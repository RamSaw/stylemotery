>27	FunctionDef	getSceneFilename (const std 
>28	ParameterList	const std 
>29	Parameter	 
>30	Identifier	scene
>31	ParameterType	const std 
>32	ReturnType	std 
>33	CompoundStatement	 
>34	ReturnStatement	 
>35	PrimaryExpression	\"\"
>36	IfStatement	if ( dsq -> mod . isActive ( ) )
>37	ElseStatement	else
>38	ReturnStatement	 
>39	CallExpression	std 
>40	ArgumentList	\"data/maps/\" + scene + \".xml\"
>41	Argument	\"data/maps/\" + scene + \".xml\"
>42	AdditiveExpression	\"data/maps/\" + scene + \".xml\"
>43	AdditiveExpression	scene + \".xml\"
>44	PrimaryExpression	\".xml\"
>45	Identifier	scene
>46	PrimaryExpression	\"data/maps/\"
>47	Callee	std 
>48	Identifier	std 
>49	ReturnStatement	 
>50	CallExpression	std 
>51	ArgumentList	dsq -> mod . getPath ( ) + \"maps/\" + scene + \".xml\"
>52	Argument	dsq -> mod . getPath ( ) + \"maps/\" + scene + \".xml\"
>53	AdditiveExpression	dsq -> mod . getPath ( ) + \"maps/\" + scene + \".xml\"
>54	AdditiveExpression	\"maps/\" + scene + \".xml\"
>55	AdditiveExpression	scene + \".xml\"
>56	PrimaryExpression	\".xml\"
>57	Identifier	scene
>58	PrimaryExpression	\"maps/\"
>59	CallExpression	dsq -> mod . getPath ( )
>60	ArgumentList	 
>61	Callee	dsq -> mod . getPath
>62	MemberAccess	dsq -> mod . getPath
>63	Identifier	getPath
>64	PtrMemberAccess	dsq -> mod
>65	Identifier	mod
>66	Identifier	dsq
>67	Callee	std 
>68	Identifier	std 
>69	Condition	 
>70	CallExpression	dsq -> mod . isActive ( )
>71	ArgumentList	 
>72	Callee	dsq -> mod . isActive
>73	MemberAccess	dsq -> mod . isActive
>74	Identifier	isActive
>75	PtrMemberAccess	dsq -> mod
>76	Identifier	mod
>77	Identifier	dsq
>88	FunctionDef	PetSlot 
>89	ParameterList	int pet
>90	Parameter	 
>91	Identifier	pet
>92	ParameterType	int
>93	CompoundStatement	 
>94	ExpressionStatement	 
>95	AssignmentExpr	wasSlot = false
>96	Identifier	false
>97	Identifier	wasSlot
>98	ExpressionStatement	 
>99	AssignmentExpr	petFlag = FLAG_PET_NAMESTART + petidx
>100	AdditiveExpression	FLAG_PET_NAMESTART + petidx
>101	Identifier	petidx
>102	Identifier	FLAG_PET_NAMESTART
>103	Identifier	petFlag
>104	ExpressionStatement	 
>105	AssignmentExpr	mouseDown = false
>106	Identifier	false
>107	Identifier	mouseDown
>108	ExpressionStatement	 
>109	AssignmentExpr	petidx = pet
>110	Identifier	pet
>111	Identifier	petidx
>112	ExpressionStatement	 
>113	AssignmentExpr	scale = Vector ( 0.9 , 0.9 )
>114	CallExpression	Vector ( 0.9 , 0.9 )
>115	ArgumentList	0.9
>116	Argument	0.9
>117	PrimaryExpression	0.9
>118	Argument	0.9
>119	PrimaryExpression	0.9
>120	Callee	Vector
>121	Identifier	Vector
>122	Identifier	scale
>123	IfStatement	if ( p )
>124	CompoundStatement	 
>125	ExpressionStatement	 
>126	CallExpression	setTexture ( fn )
>127	ArgumentList	fn
>128	Argument	fn
>129	Identifier	fn
>130	Callee	setTexture
>131	Identifier	setTexture
>132	IdentifierDeclStatement	 
>133	IdentifierDecl	fn = \"collectibles/egg-\" + p -> namePart
>134	AssignmentExpr	fn = \"collectibles/egg-\" + p -> namePart
>135	AdditiveExpression	\"collectibles/egg-\" + p -> namePart
>136	PtrMemberAccess	p -> namePart
>137	Identifier	namePart
>138	Identifier	p
>139	PrimaryExpression	\"collectibles/egg-\"
>140	Identifier	fn
>141	Identifier	fn
>142	IdentifierDeclType	std 
>143	Condition	 
>144	Identifier	p
>145	IdentifierDeclStatement	 
>146	IdentifierDecl	* p = dsq -> continuity . getPetData ( pet )
>147	AssignmentExpr	* p = dsq -> continuity . getPetData ( pet )
>148	CallExpression	dsq -> continuity . getPetData ( pet )
>149	ArgumentList	pet
>150	Argument	pet
>151	Identifier	pet
>152	Callee	dsq -> continuity . getPetData
>153	MemberAccess	dsq -> continuity . getPetData
>154	Identifier	getPetData
>155	PtrMemberAccess	dsq -> continuity
>156	Identifier	continuity
>157	Identifier	dsq
>158	Identifier	p
>159	Identifier	p
>160	IdentifierDeclType	PetData *
>181	FunctionDef	PetSlot 
>182	ParameterList	float dt
>183	Parameter	 
>184	Identifier	dt
>185	ParameterType	float
>186	ReturnType	void
>187	CompoundStatement	 
>188	IfStatement	if ( ( core -> mouse . position - getWorldPosition ( ) ) . isLength2DIn ( 32 ) )
>189	ElseStatement	else
>190	CompoundStatement	 
>191	ExpressionStatement	 
>192	CallExpression	scale . interpolateTo ( Vector ( 0.9 , 0.9 ) , 0.1 )
>193	ArgumentList	Vector ( 0.9 , 0.9 )
>194	Argument	0.1
>195	PrimaryExpression	0.1
>196	Argument	Vector ( 0.9 , 0.9 )
>197	CallExpression	Vector ( 0.9 , 0.9 )
>198	ArgumentList	0.9
>199	Argument	0.9
>200	PrimaryExpression	0.9
>201	Argument	0.9
>202	PrimaryExpression	0.9
>203	Callee	Vector
>204	Identifier	Vector
>205	Callee	scale . interpolateTo
>206	MemberAccess	scale . interpolateTo
>207	Identifier	interpolateTo
>208	Identifier	scale
>209	ExpressionStatement	 
>210	AssignmentExpr	mouseDown = false
>211	Identifier	false
>212	Identifier	mouseDown
>213	CompoundStatement	 
>214	IfStatement	if ( core -> mouse . buttons . left && ! mouseDown )
>215	ElseStatement	else
>216	IfStatement	if ( ! core -> mouse . buttons . left && mouseDown )
>217	CompoundStatement	 
>218	ExpressionStatement	 
>219	AssignmentExpr	mouseDown = false
>220	Identifier	false
>221	Identifier	mouseDown
>222	IfStatement	if ( dsq -> continuity . getFlag ( FLAG_PET_ACTIVE ) == petFlag )
>223	ElseStatement	else
>224	CompoundStatement	 
>225	ExpressionStatement	 
>226	CallExpression	dsq -> sound -> playSfx ( \"pet-off\" )
>227	ArgumentList	\"pet-off\"
>228	Argument	\"pet-off\"
>229	PrimaryExpression	\"pet-off\"
>230	Callee	dsq -> sound -> playSfx
>231	PtrMemberAccess	dsq -> sound -> playSfx
>232	Identifier	playSfx
>233	PtrMemberAccess	dsq -> sound
>234	Identifier	sound
>235	Identifier	dsq
>236	ExpressionStatement	 
>237	CallExpression	dsq -> game -> setActivePet ( FLAG_PET_NAMESTART + petidx )
>238	ArgumentList	FLAG_PET_NAMESTART + petidx
>239	Argument	FLAG_PET_NAMESTART + petidx
>240	AdditiveExpression	FLAG_PET_NAMESTART + petidx
>241	Identifier	petidx
>242	Identifier	FLAG_PET_NAMESTART
>243	Callee	dsq -> game -> setActivePet
>244	PtrMemberAccess	dsq -> game -> setActivePet
>245	Identifier	setActivePet
>246	PtrMemberAccess	dsq -> game
>247	Identifier	game
>248	Identifier	dsq
>249	CompoundStatement	 
>250	ExpressionStatement	 
>251	CallExpression	dsq -> sound -> playSfx ( \"pet-on\" )
>252	ArgumentList	\"pet-on\"
>253	Argument	\"pet-on\"
>254	PrimaryExpression	\"pet-on\"
>255	Callee	dsq -> sound -> playSfx
>256	PtrMemberAccess	dsq -> sound -> playSfx
>257	Identifier	playSfx
>258	PtrMemberAccess	dsq -> sound
>259	Identifier	sound
>260	Identifier	dsq
>261	ExpressionStatement	 
>262	CallExpression	dsq -> game -> setActivePet ( 0 )
>263	ArgumentList	0
>264	Argument	0
>265	PrimaryExpression	0
>266	Callee	dsq -> game -> setActivePet
>267	PtrMemberAccess	dsq -> game -> setActivePet
>268	Identifier	setActivePet
>269	PtrMemberAccess	dsq -> game
>270	Identifier	game
>271	Identifier	dsq
>272	Condition	 
>273	EqualityExpression	dsq -> continuity . getFlag ( FLAG_PET_ACTIVE ) == petFlag
>274	Identifier	petFlag
>275	CallExpression	dsq -> continuity . getFlag ( FLAG_PET_ACTIVE )
>276	ArgumentList	FLAG_PET_ACTIVE
>277	Argument	FLAG_PET_ACTIVE
>278	Identifier	FLAG_PET_ACTIVE
>279	Callee	dsq -> continuity . getFlag
>280	MemberAccess	dsq -> continuity . getFlag
>281	Identifier	getFlag
>282	PtrMemberAccess	dsq -> continuity
>283	Identifier	continuity
>284	Identifier	dsq
>285	ExpressionStatement	 
>286	CallExpression	dsq -> sound -> playSfx ( \"click\" )
>287	ArgumentList	\"click\"
>288	Argument	\"click\"
>289	PrimaryExpression	\"click\"
>290	Callee	dsq -> sound -> playSfx
>291	PtrMemberAccess	dsq -> sound -> playSfx
>292	Identifier	playSfx
>293	PtrMemberAccess	dsq -> sound
>294	Identifier	sound
>295	Identifier	dsq
>296	Condition	 
>297	AndExpression	! core -> mouse . buttons . left && mouseDown
>298	Identifier	mouseDown
>299	UnaryOp	! core -> mouse . buttons . left
>300	MemberAccess	core -> mouse . buttons . left
>301	Identifier	left
>302	MemberAccess	core -> mouse . buttons
>303	Identifier	buttons
>304	PtrMemberAccess	core -> mouse
>305	Identifier	mouse
>306	Identifier	core
>307	UnaryOperator	!
>308	CompoundStatement	 
>309	ExpressionStatement	 
>310	AssignmentExpr	mouseDown = true
>311	Identifier	true
>312	Identifier	mouseDown
>313	Condition	 
>314	AndExpression	core -> mouse . buttons . left && ! mouseDown
>315	UnaryOp	! mouseDown
>316	Identifier	mouseDown
>317	UnaryOperator	!
>318	MemberAccess	core -> mouse . buttons . left
>319	Identifier	left
>320	MemberAccess	core -> mouse . buttons
>321	Identifier	buttons
>322	PtrMemberAccess	core -> mouse
>323	Identifier	mouse
>324	Identifier	core
>325	ExpressionStatement	 
>326	CallExpression	scale . interpolateTo ( Vector ( 1.2 , 1.2 ) , 0.1 )
>327	ArgumentList	Vector ( 1.2 , 1.2 )
>328	Argument	0.1
>329	PrimaryExpression	0.1
>330	Argument	Vector ( 1.2 , 1.2 )
>331	CallExpression	Vector ( 1.2 , 1.2 )
>332	ArgumentList	1.2
>333	Argument	1.2
>334	PrimaryExpression	1.2
>335	Argument	1.2
>336	PrimaryExpression	1.2
>337	Callee	Vector
>338	Identifier	Vector
>339	Callee	scale . interpolateTo
>340	MemberAccess	scale . interpolateTo
>341	Identifier	interpolateTo
>342	Identifier	scale
>343	Condition	 
>344	CallExpression	( core -> mouse . position - getWorldPosition ( ) ) . isLength2DIn ( 32 )
>345	ArgumentList	32
>346	Argument	32
>347	PrimaryExpression	32
>348	Callee	( core -> mouse . position - getWorldPosition ( ) ) . isLength2DIn
>349	MemberAccess	( core -> mouse . position - getWorldPosition ( ) ) . isLength2DIn
>350	Identifier	isLength2DIn
>351	AdditiveExpression	core -> mouse . position - getWorldPosition ( )
>352	CallExpression	getWorldPosition ( )
>353	ArgumentList	 
>354	Callee	getWorldPosition
>355	Identifier	getWorldPosition
>356	MemberAccess	core -> mouse . position
>357	Identifier	position
>358	PtrMemberAccess	core -> mouse
>359	Identifier	mouse
>360	Identifier	core
>361	IfStatement	if ( alpha . x < 1 )
>362	ReturnStatement	 
>363	Condition	 
>364	RelationalExpression	alpha . x < 1
>365	PrimaryExpression	1
>366	MemberAccess	alpha . x
>367	Identifier	x
>368	Identifier	alpha
>369	IfStatement	if ( dsq -> continuity . getFlag ( FLAG_PET_ACTIVE ) == petFlag )
>370	ElseStatement	else
>371	ExpressionStatement	 
>372	AssignmentExpr	color = Vector ( 0.5 , 0.5 , 0.5 )
>373	CallExpression	Vector ( 0.5 , 0.5 , 0.5 )
>374	ArgumentList	0.5
>375	Argument	0.5
>376	PrimaryExpression	0.5
>377	Argument	0.5
>378	PrimaryExpression	0.5
>379	Argument	0.5
>380	PrimaryExpression	0.5
>381	Callee	Vector
>382	Identifier	Vector
>383	Identifier	color
>384	CompoundStatement	 
>385	ExpressionStatement	 
>386	AssignmentExpr	color = Vector ( 1 , 1 , 1 )
>387	CallExpression	Vector ( 1 , 1 , 1 )
>388	ArgumentList	1
>389	Argument	1
>390	PrimaryExpression	1
>391	Argument	1
>392	PrimaryExpression	1
>393	Argument	1
>394	PrimaryExpression	1
>395	Callee	Vector
>396	Identifier	Vector
>397	Identifier	color
>398	Condition	 
>399	EqualityExpression	dsq -> continuity . getFlag ( FLAG_PET_ACTIVE ) == petFlag
>400	Identifier	petFlag
>401	CallExpression	dsq -> continuity . getFlag ( FLAG_PET_ACTIVE )
>402	ArgumentList	FLAG_PET_ACTIVE
>403	Argument	FLAG_PET_ACTIVE
>404	Identifier	FLAG_PET_ACTIVE
>405	Callee	dsq -> continuity . getFlag
>406	MemberAccess	dsq -> continuity . getFlag
>407	Identifier	getFlag
>408	PtrMemberAccess	dsq -> continuity
>409	Identifier	continuity
>410	Identifier	dsq
>411	IfStatement	if ( ! dsq -> continuity . getFlag ( petFlag ) )
>412	ElseStatement	else
>413	CompoundStatement	 
>414	IfStatement	if ( wasSlot )
>415	CompoundStatement	 
>416	ExpressionStatement	 
>417	AssignmentExpr	wasSlot = false
>418	Identifier	false
>419	Identifier	wasSlot
>420	IfStatement	if ( p )
>421	CompoundStatement	 
>422	ExpressionStatement	 
>423	CallExpression	setTexture ( fn )
>424	ArgumentList	fn
>425	Argument	fn
>426	Identifier	fn
>427	Callee	setTexture
>428	Identifier	setTexture
>429	IdentifierDeclStatement	 
>430	IdentifierDecl	fn = \"collectibles/egg-\" + p -> namePart
>431	AssignmentExpr	fn = \"collectibles/egg-\" + p -> namePart
>432	AdditiveExpression	\"collectibles/egg-\" + p -> namePart
>433	PtrMemberAccess	p -> namePart
>434	Identifier	namePart
>435	Identifier	p
>436	PrimaryExpression	\"collectibles/egg-\"
>437	Identifier	fn
>438	Identifier	fn
>439	IdentifierDeclType	std 
>440	Condition	 
>441	Identifier	p
>442	IdentifierDeclStatement	 
>443	IdentifierDecl	* p = dsq -> continuity . getPetData ( petidx )
>444	AssignmentExpr	* p = dsq -> continuity . getPetData ( petidx )
>445	CallExpression	dsq -> continuity . getPetData ( petidx )
>446	ArgumentList	petidx
>447	Argument	petidx
>448	Identifier	petidx
>449	Callee	dsq -> continuity . getPetData
>450	MemberAccess	dsq -> continuity . getPetData
>451	Identifier	getPetData
>452	PtrMemberAccess	dsq -> continuity
>453	Identifier	continuity
>454	Identifier	dsq
>455	Identifier	p
>456	Identifier	p
>457	IdentifierDeclType	PetData *
>458	Condition	 
>459	Identifier	wasSlot
>460	ExpressionStatement	 
>461	AssignmentExpr	alphaMod = 1
>462	PrimaryExpression	1
>463	Identifier	alphaMod
>464	CompoundStatement	 
>465	ReturnStatement	 
>466	IfStatement	if ( ! wasSlot )
>467	CompoundStatement	 
>468	ExpressionStatement	 
>469	AssignmentExpr	wasSlot = true
>470	Identifier	true
>471	Identifier	wasSlot
>472	ExpressionStatement	 
>473	CallExpression	setWidthHeight ( 80 )
>474	ArgumentList	80
>475	Argument	80
>476	PrimaryExpression	80
>477	Callee	setWidthHeight
>478	Identifier	setWidthHeight
>479	ExpressionStatement	 
>480	CallExpression	setTexture ( \"gui/wok\" )
>481	ArgumentList	\"gui/wok\"
>482	Argument	\"gui/wok\"
>483	PrimaryExpression	\"gui/wok\"
>484	Callee	setTexture
>485	Identifier	setTexture
>486	Condition	 
>487	UnaryOp	! wasSlot
>488	Identifier	wasSlot
>489	UnaryOperator	!
>490	Condition	 
>491	UnaryOp	! dsq -> continuity . getFlag ( petFlag )
>492	CallExpression	dsq -> continuity . getFlag ( petFlag )
>493	ArgumentList	petFlag
>494	Argument	petFlag
>495	Identifier	petFlag
>496	Callee	dsq -> continuity . getFlag
>497	MemberAccess	dsq -> continuity . getFlag
>498	Identifier	getFlag
>499	PtrMemberAccess	dsq -> continuity
>500	Identifier	continuity
>501	Identifier	dsq
>502	UnaryOperator	!
>503	ExpressionStatement	 
>504	CallExpression	AquariaGuiQuad 
>505	ArgumentList	dt
>506	Argument	dt
>507	Identifier	dt
>508	Callee	AquariaGuiQuad 
>509	Identifier	AquariaGuiQuad 
>547	FunctionDef	FoodHolder 
>548	ParameterList	int slot , bool trash
>549	Parameter	 
>550	Identifier	trash
>551	ParameterType	bool
>552	Parameter	 
>553	Identifier	slot
>554	ParameterType	int
>555	CompoundStatement	 
>556	ExpressionStatement	 
>557	CallExpression	addChild ( lid , PM_POINTER )
>558	ArgumentList	lid
>559	Argument	PM_POINTER
>560	Identifier	PM_POINTER
>561	Argument	lid
>562	Identifier	lid
>563	Callee	addChild
>564	Identifier	addChild
>565	ExpressionStatement	 
>566	AssignmentExpr	lid -> alphaMod = 0.5
>567	PrimaryExpression	0.5
>568	PtrMemberAccess	lid -> alphaMod
>569	Identifier	alphaMod
>570	Identifier	lid
>571	ExpressionStatement	 
>572	AssignmentExpr	lid -> alpha = 0
>573	PrimaryExpression	0
>574	PtrMemberAccess	lid -> alpha
>575	Identifier	alpha
>576	Identifier	lid
>577	ExpressionStatement	 
>578	AssignmentExpr	lid = new Quad ( \"gui/wok-lid\" , Vector ( 0 , 0 ) )
>579	Expression	\"gui/wok-lid\" , Vector ( 0 , 0 )
>580	CallExpression	Vector ( 0 , 0 )
>581	ArgumentList	0
>582	Argument	0
>583	PrimaryExpression	0
>584	Argument	0
>585	PrimaryExpression	0
>586	Callee	Vector
>587	Identifier	Vector
>588	PrimaryExpression	\"gui/wok-lid\"
>589	Identifier	lid
>590	ExpressionStatement	 
>591	CallExpression	addChild ( ing , PM_POINTER )
>592	ArgumentList	ing
>593	Argument	PM_POINTER
>594	Identifier	PM_POINTER
>595	Argument	ing
>596	Identifier	ing
>597	Callee	addChild
>598	Identifier	addChild
>599	ExpressionStatement	 
>600	AssignmentExpr	ing -> renderQuad = false
>601	Identifier	false
>602	PtrMemberAccess	ing -> renderQuad
>603	Identifier	renderQuad
>604	Identifier	ing
>605	ExpressionStatement	 
>606	Identifier	Quad
>607	Statement	 
>608	Statement	 
>609	Statement	 
>610	ExpressionStatement	 
>611	CallExpression	addChild ( wok , PM_POINTER , RBP_ON )
>612	ArgumentList	wok
>613	Argument	RBP_ON
>614	Identifier	RBP_ON
>615	Argument	PM_POINTER
>616	Identifier	PM_POINTER
>617	Argument	wok
>618	Identifier	wok
>619	Callee	addChild
>620	Identifier	addChild
>621	IfStatement	if ( trash )
>622	ElseStatement	else
>623	ExpressionStatement	 
>624	CallExpression	wok -> setTexture ( \"gui/wok\" )
>625	ArgumentList	\"gui/wok\"
>626	Argument	\"gui/wok\"
>627	PrimaryExpression	\"gui/wok\"
>628	Callee	wok -> setTexture
>629	PtrMemberAccess	wok -> setTexture
>630	Identifier	setTexture
>631	Identifier	wok
>632	ExpressionStatement	 
>633	CallExpression	wok -> setTexture ( \"gui/wok-drop\" )
>634	ArgumentList	\"gui/wok-drop\"
>635	Argument	\"gui/wok-drop\"
>636	PrimaryExpression	\"gui/wok-drop\"
>637	Callee	wok -> setTexture
>638	PtrMemberAccess	wok -> setTexture
>639	Identifier	setTexture
>640	Identifier	wok
>641	Condition	 
>642	Identifier	trash
>643	ExpressionStatement	 
>644	Identifier	Quad
>645	Statement	 
>646	Statement	 
>647	Statement	 
>648	ExpressionStatement	 
>649	AssignmentExpr	renderQuad = false
>650	Identifier	false
>651	Identifier	renderQuad
>652	ExpressionStatement	 
>653	AssignmentExpr	buttonDown = false
>654	Identifier	false
>655	Identifier	buttonDown
>656	ExpressionStatement	 
>657	AssignmentExpr	foodHolderIngredient = 0
>658	PrimaryExpression	0
>659	Identifier	foodHolderIngredient
>680	FunctionDef	FoodHolder 
>681	ParameterList	bool down , bool longAnim
>682	Parameter	 
>683	Identifier	longAnim
>684	ParameterType	bool
>685	Parameter	 
>686	Identifier	down
>687	ParameterType	bool
>688	ReturnType	void
>689	CompoundStatement	 
>690	IfStatement	if ( down )
>691	ElseStatement	else
>692	CompoundStatement	 
>693	ExpressionStatement	 
>694	CallExpression	lid -> alpha . interpolateTo ( 0 , t )
>695	ArgumentList	0
>696	Argument	t
>697	Identifier	t
>698	Argument	0
>699	PrimaryExpression	0
>700	Callee	lid -> alpha . interpolateTo
>701	MemberAccess	lid -> alpha . interpolateTo
>702	Identifier	interpolateTo
>703	PtrMemberAccess	lid -> alpha
>704	Identifier	alpha
>705	Identifier	lid
>706	CompoundStatement	 
>707	ExpressionStatement	 
>708	CallExpression	dsq -> main ( t )
>709	ArgumentList	t
>710	Argument	t
>711	Identifier	t
>712	Callee	dsq -> main
>713	PtrMemberAccess	dsq -> main
>714	Identifier	main
>715	Identifier	dsq
>716	ExpressionStatement	 
>717	CallExpression	lid -> alpha . interpolateTo ( 1 , t )
>718	ArgumentList	1
>719	Argument	t
>720	Identifier	t
>721	Argument	1
>722	PrimaryExpression	1
>723	Callee	lid -> alpha . interpolateTo
>724	MemberAccess	lid -> alpha . interpolateTo
>725	Identifier	interpolateTo
>726	PtrMemberAccess	lid -> alpha
>727	Identifier	alpha
>728	Identifier	lid
>729	ExpressionStatement	 
>730	CallExpression	dsq -> sound -> playSfx ( \"bubble-lid\" )
>731	ArgumentList	\"bubble-lid\"
>732	Argument	\"bubble-lid\"
>733	PrimaryExpression	\"bubble-lid\"
>734	Callee	dsq -> sound -> playSfx
>735	PtrMemberAccess	dsq -> sound -> playSfx
>736	Identifier	playSfx
>737	PtrMemberAccess	dsq -> sound
>738	Identifier	sound
>739	Identifier	dsq
>740	Condition	 
>741	Identifier	down
>742	IfStatement	if ( ! longAnim )
>743	CompoundStatement	 
>744	ExpressionStatement	 
>745	AssignmentExpr	t = 0.1
>746	PrimaryExpression	0.1
>747	Identifier	t
>748	Condition	 
>749	UnaryOp	! longAnim
>750	Identifier	longAnim
>751	UnaryOperator	!
>752	IdentifierDeclStatement	 
>753	IdentifierDecl	t = 0.2
>754	AssignmentExpr	t = 0.2
>755	PrimaryExpression	0.2
>756	Identifier	t
>757	Identifier	t
>758	IdentifierDeclType	float
>771	FunctionDef	FoodHolder 
>772	ParameterList	 
>773	ReturnType	bool
>774	CompoundStatement	 
>775	ReturnStatement	 
>776	Identifier	trash
>781	FunctionDef	FoodHolder 
>782	ParameterList	 
>783	ReturnType	bool
>784	CompoundStatement	 
>785	ReturnStatement	 
>786	EqualityExpression	foodHolderIngredient == 0
>787	PrimaryExpression	0
>788	Identifier	foodHolderIngredient
>793	FunctionDef	FoodHolder 
>794	ParameterList	 
>795	ReturnType	IngredientData *
>796	CompoundStatement	 
>797	ReturnStatement	 
>798	Identifier	foodHolderIngredient
>803	FunctionDef	FoodHolder 
>804	ParameterList	IngredientData * i , bool effects
>805	Parameter	 
>806	Identifier	effects
>807	ParameterType	bool
>808	Parameter	 
>809	Identifier	i
>810	ParameterType	IngredientData *
>811	ReturnType	void
>812	CompoundStatement	 
>813	IfStatement	if ( ! i )
>814	ElseStatement	else
>815	CompoundStatement	 
>816	ExpressionStatement	 
>817	CallExpression	game -> enqueuePreviewRecipe ( )
>818	ArgumentList	 
>819	Callee	game -> enqueuePreviewRecipe
>820	PtrMemberAccess	game -> enqueuePreviewRecipe
>821	Identifier	enqueuePreviewRecipe
>822	Identifier	game
>823	IfStatement	if ( effects )
>824	CompoundStatement	 
>825	ExpressionStatement	 
>826	CallExpression	ing -> scale . startPath ( 0.5 )
>827	ArgumentList	0.5
>828	Argument	0.5
>829	PrimaryExpression	0.5
>830	Callee	ing -> scale . startPath
>831	MemberAccess	ing -> scale . startPath
>832	Identifier	startPath
>833	PtrMemberAccess	ing -> scale
>834	Identifier	scale
>835	Identifier	ing
>836	ExpressionStatement	 
>837	CallExpression	ing -> scale . data -> path . addPathNode ( Vector ( 1 , 1 ) , 1 )
>838	ArgumentList	Vector ( 1 , 1 )
>839	Argument	1
>840	PrimaryExpression	1
>841	Argument	Vector ( 1 , 1 )
>842	CallExpression	Vector ( 1 , 1 )
>843	ArgumentList	1
>844	Argument	1
>845	PrimaryExpression	1
>846	Argument	1
>847	PrimaryExpression	1
>848	Callee	Vector
>849	Identifier	Vector
>850	Callee	ing -> scale . data -> path . addPathNode
>851	MemberAccess	ing -> scale . data -> path . addPathNode
>852	Identifier	addPathNode
>853	PtrMemberAccess	ing -> scale . data -> path
>854	Identifier	path
>855	MemberAccess	ing -> scale . data
>856	Identifier	data
>857	PtrMemberAccess	ing -> scale
>858	Identifier	scale
>859	Identifier	ing
>860	ExpressionStatement	 
>861	CallExpression	ing -> scale . data -> path . addPathNode ( Vector ( 1.25 , 1.25 ) , 0.2 )
>862	ArgumentList	Vector ( 1.25 , 1.25 )
>863	Argument	0.2
>864	PrimaryExpression	0.2
>865	Argument	Vector ( 1.25 , 1.25 )
>866	CallExpression	Vector ( 1.25 , 1.25 )
>867	ArgumentList	1.25
>868	Argument	1.25
>869	PrimaryExpression	1.25
>870	Argument	1.25
>871	PrimaryExpression	1.25
>872	Callee	Vector
>873	Identifier	Vector
>874	Callee	ing -> scale . data -> path . addPathNode
>875	MemberAccess	ing -> scale . data -> path . addPathNode
>876	Identifier	addPathNode
>877	PtrMemberAccess	ing -> scale . data -> path
>878	Identifier	path
>879	MemberAccess	ing -> scale . data
>880	Identifier	data
>881	PtrMemberAccess	ing -> scale
>882	Identifier	scale
>883	Identifier	ing
>884	ExpressionStatement	 
>885	CallExpression	ing -> scale . data -> path . addPathNode ( Vector ( 1 , 1 ) , 0 )
>886	ArgumentList	Vector ( 1 , 1 )
>887	Argument	0
>888	PrimaryExpression	0
>889	Argument	Vector ( 1 , 1 )
>890	CallExpression	Vector ( 1 , 1 )
>891	ArgumentList	1
>892	Argument	1
>893	PrimaryExpression	1
>894	Argument	1
>895	PrimaryExpression	1
>896	Callee	Vector
>897	Identifier	Vector
>898	Callee	ing -> scale . data -> path . addPathNode
>899	MemberAccess	ing -> scale . data -> path . addPathNode
>900	Identifier	addPathNode
>901	PtrMemberAccess	ing -> scale . data -> path
>902	Identifier	path
>903	MemberAccess	ing -> scale . data
>904	Identifier	data
>905	PtrMemberAccess	ing -> scale
>906	Identifier	scale
>907	Identifier	ing
>908	ExpressionStatement	 
>909	CallExpression	ing -> scale . data -> path . clear ( )
>910	ArgumentList	 
>911	Callee	ing -> scale . data -> path . clear
>912	MemberAccess	ing -> scale . data -> path . clear
>913	Identifier	clear
>914	PtrMemberAccess	ing -> scale . data -> path
>915	Identifier	path
>916	MemberAccess	ing -> scale . data
>917	Identifier	data
>918	PtrMemberAccess	ing -> scale
>919	Identifier	scale
>920	Identifier	ing
>921	ExpressionStatement	 
>922	CallExpression	ing -> scale . ensureData ( )
>923	ArgumentList	 
>924	Callee	ing -> scale . ensureData
>925	MemberAccess	ing -> scale . ensureData
>926	Identifier	ensureData
>927	PtrMemberAccess	ing -> scale
>928	Identifier	scale
>929	Identifier	ing
>930	ExpressionStatement	 
>931	CallExpression	core -> sound -> playSfx ( \"Wok\" )
>932	ArgumentList	\"Wok\"
>933	Argument	\"Wok\"
>934	PrimaryExpression	\"Wok\"
>935	Callee	core -> sound -> playSfx
>936	PtrMemberAccess	core -> sound -> playSfx
>937	Identifier	playSfx
>938	PtrMemberAccess	core -> sound
>939	Identifier	sound
>940	Identifier	core
>941	Condition	 
>942	Identifier	effects
>943	ExpressionStatement	 
>944	AssignmentExpr	ing -> renderQuad = true
>945	Identifier	true
>946	PtrMemberAccess	ing -> renderQuad
>947	Identifier	renderQuad
>948	Identifier	ing
>949	ExpressionStatement	 
>950	CallExpression	ing -> setTexture ( \"Ingredients/\" + i -> gfx )
>951	ArgumentList	\"Ingredients/\" + i -> gfx
>952	Argument	\"Ingredients/\" + i -> gfx
>953	AdditiveExpression	\"Ingredients/\" + i -> gfx
>954	PtrMemberAccess	i -> gfx
>955	Identifier	gfx
>956	Identifier	i
>957	PrimaryExpression	\"Ingredients/\"
>958	Callee	ing -> setTexture
>959	PtrMemberAccess	ing -> setTexture
>960	Identifier	setTexture
>961	Identifier	ing
>962	IfStatement	if ( i -> amount > 0 )
>963	ExpressionStatement	 
>964	IncDecOp	i -> amount --
>965	IncDec	--
>966	PtrMemberAccess	i -> amount
>967	Identifier	amount
>968	Identifier	i
>969	Condition	 
>970	RelationalExpression	i -> amount > 0
>971	PrimaryExpression	0
>972	PtrMemberAccess	i -> amount
>973	Identifier	amount
>974	Identifier	i
>975	ExpressionStatement	 
>976	IncDecOp	i -> held ++
>977	IncDec	++
>978	PtrMemberAccess	i -> held
>979	Identifier	held
>980	Identifier	i
>981	CompoundStatement	 
>982	ExpressionStatement	 
>983	CallExpression	game -> enqueuePreviewRecipe ( )
>984	ArgumentList	 
>985	Callee	game -> enqueuePreviewRecipe
>986	PtrMemberAccess	game -> enqueuePreviewRecipe
>987	Identifier	enqueuePreviewRecipe
>988	Identifier	game
>989	IfStatement	if ( oldi && effects )
>990	CompoundStatement	 
>991	ExpressionStatement	 
>992	CallExpression	core -> sound -> playSfx ( \"Drop\" )
>993	ArgumentList	\"Drop\"
>994	Argument	\"Drop\"
>995	PrimaryExpression	\"Drop\"
>996	Callee	core -> sound -> playSfx
>997	PtrMemberAccess	core -> sound -> playSfx
>998	Identifier	playSfx
>999	PtrMemberAccess	core -> sound
>1000	Identifier	sound
>1001	Identifier	core
>1002	Condition	 
>1003	AndExpression	oldi && effects
>1004	Identifier	effects
>1005	Identifier	oldi
>1006	ExpressionStatement	 
>1007	AssignmentExpr	ing -> renderQuad = false
>1008	Identifier	false
>1009	PtrMemberAccess	ing -> renderQuad
>1010	Identifier	renderQuad
>1011	Identifier	ing
>1012	Condition	 
>1013	UnaryOp	! i
>1014	Identifier	i
>1015	UnaryOperator	!
>1016	IfStatement	if ( oldi )
>1017	CompoundStatement	 
>1018	ExpressionStatement	 
>1019	IncDecOp	oldi -> amount ++
>1020	IncDec	++
>1021	PtrMemberAccess	oldi -> amount
>1022	Identifier	amount
>1023	Identifier	oldi
>1024	IfStatement	if ( oldi -> held > 0 )
>1025	ExpressionStatement	 
>1026	IncDecOp	oldi -> held --
>1027	IncDec	--
>1028	PtrMemberAccess	oldi -> held
>1029	Identifier	held
>1030	Identifier	oldi
>1031	Condition	 
>1032	RelationalExpression	oldi -> held > 0
>1033	PrimaryExpression	0
>1034	PtrMemberAccess	oldi -> held
>1035	Identifier	held
>1036	Identifier	oldi
>1037	Condition	 
>1038	Identifier	oldi
>1039	ExpressionStatement	 
>1040	AssignmentExpr	foodHolderIngredient = i
>1041	Identifier	i
>1042	Identifier	foodHolderIngredient
>1043	IdentifierDeclStatement	 
>1044	IdentifierDecl	* oldi = foodHolderIngredient
>1045	AssignmentExpr	* oldi = foodHolderIngredient
>1046	Identifier	foodHolderIngredient
>1047	Identifier	foodHolderIngredient
>1048	Identifier	oldi
>1049	IdentifierDeclType	IngredientData *
>1080	FunctionDef	Game 
>1081	ParameterList	 
>1082	ReturnType	void
>1083	CompoundStatement	 
>1084	ExpressionStatement	 
>1085	AssignmentExpr	enqueuedPreviewRecipe = 1
>1086	PrimaryExpression	1
>1087	Identifier	enqueuedPreviewRecipe
>1092	FunctionDef	Game 
>1093	ParameterList	 
>1094	ReturnType	void
>1095	CompoundStatement	 
>1096	IfStatement	if ( cookList . size ( ) < 2 || recipeMenu . on )
>1097	ElseStatement	else
>1098	CompoundStatement	 
>1099	ExpressionStatement	 
>1100	CallExpression	previewRecipe -> alpha . interpolateTo ( 1 , t )
>1101	ArgumentList	1
>1102	Argument	t
>1103	Identifier	t
>1104	Argument	1
>1105	PrimaryExpression	1
>1106	Callee	previewRecipe -> alpha . interpolateTo
>1107	MemberAccess	previewRecipe -> alpha . interpolateTo
>1108	Identifier	interpolateTo
>1109	PtrMemberAccess	previewRecipe -> alpha
>1110	Identifier	alpha
>1111	Identifier	previewRecipe
>1112	IfStatement	if ( r && r -> isKnown ( ) )
>1113	ElseStatement	else
>1114	CompoundStatement	 
>1115	ExpressionStatement	 
>1116	CallExpression	previewRecipe -> setTexture ( \"gui/question-mark\" )
>1117	ArgumentList	\"gui/question-mark\"
>1118	Argument	\"gui/question-mark\"
>1119	PrimaryExpression	\"gui/question-mark\"
>1120	Callee	previewRecipe -> setTexture
>1121	PtrMemberAccess	previewRecipe -> setTexture
>1122	Identifier	setTexture
>1123	Identifier	previewRecipe
>1124	CompoundStatement	 
>1125	ExpressionStatement	 
>1126	CallExpression	previewRecipe -> setTexture ( \"ingredients/\" + data -> gfx )
>1127	ArgumentList	\"ingredients/\" + data -> gfx
>1128	Argument	\"ingredients/\" + data -> gfx
>1129	AdditiveExpression	\"ingredients/\" + data -> gfx
>1130	PtrMemberAccess	data -> gfx
>1131	Identifier	gfx
>1132	Identifier	data
>1133	PrimaryExpression	\"ingredients/\"
>1134	Callee	previewRecipe -> setTexture
>1135	PtrMemberAccess	previewRecipe -> setTexture
>1136	Identifier	setTexture
>1137	Identifier	previewRecipe
>1138	ExpressionStatement	 
>1139	AssignmentExpr	data = dsq -> continuity . getIngredientDataByName ( r -> result )
>1140	CallExpression	dsq -> continuity . getIngredientDataByName ( r -> result )
>1141	ArgumentList	r -> result
>1142	Argument	r -> result
>1143	PtrMemberAccess	r -> result
>1144	Identifier	result
>1145	Identifier	r
>1146	Callee	dsq -> continuity . getIngredientDataByName
>1147	MemberAccess	dsq -> continuity . getIngredientDataByName
>1148	Identifier	getIngredientDataByName
>1149	PtrMemberAccess	dsq -> continuity
>1150	Identifier	continuity
>1151	Identifier	dsq
>1152	Identifier	data
>1153	Condition	 
>1154	AndExpression	r && r -> isKnown ( )
>1155	CallExpression	r -> isKnown ( )
>1156	ArgumentList	 
>1157	Callee	r -> isKnown
>1158	PtrMemberAccess	r -> isKnown
>1159	Identifier	isKnown
>1160	Identifier	r
>1161	Identifier	r
>1162	IdentifierDeclStatement	 
>1163	IdentifierDecl	* data = 0
>1164	AssignmentExpr	* data = 0
>1165	PrimaryExpression	0
>1166	Identifier	data
>1167	Identifier	data
>1168	IdentifierDeclType	IngredientData *
>1169	IdentifierDeclStatement	 
>1170	IdentifierDecl	* r = findRecipe ( cookList )
>1171	AssignmentExpr	* r = findRecipe ( cookList )
>1172	CallExpression	findRecipe ( cookList )
>1173	ArgumentList	cookList
>1174	Argument	cookList
>1175	Identifier	cookList
>1176	Callee	findRecipe
>1177	Identifier	findRecipe
>1178	Identifier	r
>1179	Identifier	r
>1180	IdentifierDeclType	Recipe *
>1181	CompoundStatement	 
>1182	ExpressionStatement	 
>1183	CallExpression	previewRecipe -> alpha . interpolateTo ( 0 , t )
>1184	ArgumentList	0
>1185	Argument	t
>1186	Identifier	t
>1187	Argument	0
>1188	PrimaryExpression	0
>1189	Callee	previewRecipe -> alpha . interpolateTo
>1190	MemberAccess	previewRecipe -> alpha . interpolateTo
>1191	Identifier	interpolateTo
>1192	PtrMemberAccess	previewRecipe -> alpha
>1193	Identifier	alpha
>1194	Identifier	previewRecipe
>1195	Condition	 
>1196	OrExpression	cookList . size ( ) < 2 || recipeMenu . on
>1197	MemberAccess	recipeMenu . on
>1198	Identifier	on
>1199	Identifier	recipeMenu
>1200	RelationalExpression	cookList . size ( ) < 2
>1201	PrimaryExpression	2
>1202	CallExpression	cookList . size ( )
>1203	ArgumentList	 
>1204	Callee	cookList . size
>1205	MemberAccess	cookList . size
>1206	Identifier	size
>1207	Identifier	cookList
>1208	ExpressionStatement	 
>1209	CallExpression	updateCookList ( )
>1210	ArgumentList	 
>1211	Callee	updateCookList
>1212	Identifier	updateCookList
>1213	IdentifierDeclStatement	 
>1214	IdentifierDecl	t = 0.2
>1215	AssignmentExpr	t = 0.2
>1216	PrimaryExpression	0.2
>1217	Identifier	t
>1218	Identifier	t
>1219	IdentifierDeclType	const float
>1243	FunctionDef	FoodHolder 
>1244	ParameterList	 
>1245	ReturnType	void
>1246	CompoundStatement	 
>1247	IfStatement	if ( foodHolderIngredient )
>1248	CompoundStatement	 
>1249	ExpressionStatement	 
>1250	CallExpression	dsq -> game -> refreshFoodSlots ( true )
>1251	ArgumentList	true
>1252	Argument	true
>1253	Identifier	true
>1254	Callee	dsq -> game -> refreshFoodSlots
>1255	PtrMemberAccess	dsq -> game -> refreshFoodSlots
>1256	Identifier	refreshFoodSlots
>1257	PtrMemberAccess	dsq -> game
>1258	Identifier	game
>1259	Identifier	dsq
>1260	ExpressionStatement	 
>1261	CallExpression	setIngredient ( 0 )
>1262	ArgumentList	0
>1263	Argument	0
>1264	PrimaryExpression	0
>1265	Callee	setIngredient
>1266	Identifier	setIngredient
>1267	Condition	 
>1268	Identifier	foodHolderIngredient
>1277	FunctionDef	FoodHolder 
>1278	ParameterList	float dt
>1279	Parameter	 
>1280	Identifier	dt
>1281	ParameterType	float
>1282	ReturnType	void
>1283	CompoundStatement	 
>1284	IfStatement	if ( ! dsq -> game -> recipeMenu . on && foodHolderIngredient )
>1285	CompoundStatement	 
>1286	IfStatement	if ( buttonDown && ! core -> mouse . buttons . left )
>1287	ExpressionStatement	 
>1288	AssignmentExpr	buttonDown = false
>1289	Identifier	false
>1290	Identifier	buttonDown
>1291	Condition	 
>1292	AndExpression	buttonDown && ! core -> mouse . buttons . left
>1293	UnaryOp	! core -> mouse . buttons . left
>1294	MemberAccess	core -> mouse . buttons . left
>1295	Identifier	left
>1296	MemberAccess	core -> mouse . buttons
>1297	Identifier	buttons
>1298	PtrMemberAccess	core -> mouse
>1299	Identifier	mouse
>1300	Identifier	core
>1301	UnaryOperator	!
>1302	Identifier	buttonDown
>1303	IfStatement	if ( ! buttonDown && core -> mouse . buttons . left )
>1304	ExpressionStatement	 
>1305	AssignmentExpr	buttonDown = true
>1306	Identifier	true
>1307	Identifier	buttonDown
>1308	Condition	 
>1309	AndExpression	! buttonDown && core -> mouse . buttons . left
>1310	MemberAccess	core -> mouse . buttons . left
>1311	Identifier	left
>1312	MemberAccess	core -> mouse . buttons
>1313	Identifier	buttons
>1314	PtrMemberAccess	core -> mouse
>1315	Identifier	mouse
>1316	Identifier	core
>1317	UnaryOp	! buttonDown
>1318	Identifier	buttonDown
>1319	UnaryOperator	!
>1320	IfStatement	if ( ( core -> mouse . position - getWorldPosition ( ) ) . isLength2DIn ( 20 ) )
>1321	CompoundStatement	 
>1322	IfStatement	if ( ! buttonDown && core -> mouse . buttons . left )
>1323	CompoundStatement	 
>1324	ExpressionStatement	 
>1325	AssignmentExpr	buttonDown = true
>1326	Identifier	true
>1327	Identifier	buttonDown
>1328	ExpressionStatement	 
>1329	CallExpression	dropFood ( )
>1330	ArgumentList	 
>1331	Callee	dropFood
>1332	Identifier	dropFood
>1333	Condition	 
>1334	AndExpression	! buttonDown && core -> mouse . buttons . left
>1335	MemberAccess	core -> mouse . buttons . left
>1336	Identifier	left
>1337	MemberAccess	core -> mouse . buttons
>1338	Identifier	buttons
>1339	PtrMemberAccess	core -> mouse
>1340	Identifier	mouse
>1341	Identifier	core
>1342	UnaryOp	! buttonDown
>1343	Identifier	buttonDown
>1344	UnaryOperator	!
>1345	Condition	 
>1346	CallExpression	( core -> mouse . position - getWorldPosition ( ) ) . isLength2DIn ( 20 )
>1347	ArgumentList	20
>1348	Argument	20
>1349	PrimaryExpression	20
>1350	Callee	( core -> mouse . position - getWorldPosition ( ) ) . isLength2DIn
>1351	MemberAccess	( core -> mouse . position - getWorldPosition ( ) ) . isLength2DIn
>1352	Identifier	isLength2DIn
>1353	AdditiveExpression	core -> mouse . position - getWorldPosition ( )
>1354	CallExpression	getWorldPosition ( )
>1355	ArgumentList	 
>1356	Callee	getWorldPosition
>1357	Identifier	getWorldPosition
>1358	MemberAccess	core -> mouse . position
>1359	Identifier	position
>1360	PtrMemberAccess	core -> mouse
>1361	Identifier	mouse
>1362	Identifier	core
>1363	Condition	 
>1364	AndExpression	! dsq -> game -> recipeMenu . on && foodHolderIngredient
>1365	Identifier	foodHolderIngredient
>1366	UnaryOp	! dsq -> game -> recipeMenu . on
>1367	MemberAccess	dsq -> game -> recipeMenu . on
>1368	Identifier	on
>1369	PtrMemberAccess	dsq -> game -> recipeMenu
>1370	Identifier	recipeMenu
>1371	PtrMemberAccess	dsq -> game
>1372	Identifier	game
>1373	Identifier	dsq
>1374	UnaryOperator	!
>1375	ExpressionStatement	 
>1376	CallExpression	Quad 
>1377	ArgumentList	dt
>1378	Argument	dt
>1379	Identifier	dt
>1380	Callee	Quad 
>1381	Identifier	Quad 
>1405	FunctionDef	FoodSlot 
>1406	ParameterList	int slot
>1407	Parameter	 
>1408	Identifier	slot
>1409	ParameterType	int
>1410	CompoundStatement	 
>1411	ExpressionStatement	 
>1412	AssignmentExpr	rmb = 0
>1413	PrimaryExpression	0
>1414	Identifier	rmb
>1415	ExpressionStatement	 
>1416	AssignmentExpr	shareAlphaWithChildren = 1
>1417	PrimaryExpression	1
>1418	Identifier	shareAlphaWithChildren
>1419	ExpressionStatement	 
>1420	AssignmentExpr	scaleFactor = 1
>1421	PrimaryExpression	1
>1422	Identifier	scaleFactor
>1423	ExpressionStatement	 
>1424	AssignmentExpr	foodSlotIndex = - 1
>1425	UnaryOp	- 1
>1426	PrimaryExpression	1
>1427	UnaryOperator	-
>1428	Identifier	foodSlotIndex
>1429	ExpressionStatement	 
>1430	AssignmentExpr	grabTime = 0
>1431	PrimaryExpression	0
>1432	Identifier	grabTime
>1433	ExpressionStatement	 
>1434	AssignmentExpr	lastAmount = 0
>1435	PrimaryExpression	0
>1436	Identifier	lastAmount
>1437	ExpressionStatement	 
>1438	AssignmentExpr	lastIngredient = 0
>1439	PrimaryExpression	0
>1440	Identifier	lastIngredient
>1441	ExpressionStatement	 
>1442	AssignmentExpr	ingredient = 0
>1443	PrimaryExpression	0
>1444	Identifier	ingredient
>1445	ExpressionStatement	 
>1446	AssignmentExpr	inCookSlot = false
>1447	Identifier	false
>1448	Identifier	inCookSlot
>1449	ExpressionStatement	 
>1450	CallExpression	addChild ( label , PM_POINTER )
>1451	ArgumentList	label
>1452	Argument	PM_POINTER
>1453	Identifier	PM_POINTER
>1454	Argument	label
>1455	Identifier	label
>1456	Callee	addChild
>1457	Identifier	addChild
>1458	ExpressionStatement	 
>1459	AssignmentExpr	label -> position = Vector ( - 2 , 9 )
>1460	CallExpression	Vector ( - 2 , 9 )
>1461	ArgumentList	- 2
>1462	Argument	9
>1463	PrimaryExpression	9
>1464	Argument	- 2
>1465	UnaryOp	- 2
>1466	PrimaryExpression	2
>1467	UnaryOperator	-
>1468	Callee	Vector
>1469	Identifier	Vector
>1470	PtrMemberAccess	label -> position
>1471	Identifier	position
>1472	Identifier	label
>1473	ExpressionStatement	 
>1474	AssignmentExpr	label = new DebugFont ( 8 , \"\" )
>1475	Expression	8 , \"\"
>1476	PrimaryExpression	\"\"
>1477	PrimaryExpression	8
>1478	Identifier	label
>1479	ExpressionStatement	 
>1480	AssignmentExpr	renderQuad = false
>1481	Identifier	false
>1482	Identifier	renderQuad
>1483	ExpressionStatement	 
>1484	AssignmentExpr	right = false
>1485	Identifier	false
>1486	Identifier	right
>1487	ExpressionStatement	 
>1488	AssignmentExpr	doubleClickDelay = 0
>1489	PrimaryExpression	0
>1490	Identifier	doubleClickDelay
>1513	FunctionDef	FoodSlot 
>1514	ParameterList	const Vector & op
>1515	Parameter	 
>1516	Identifier	op
>1517	ParameterType	const Vector &
>1518	ReturnType	void
>1519	CompoundStatement	 
>1520	ExpressionStatement	 
>1521	AssignmentExpr	originalPosition = op
>1522	Identifier	op
>1523	Identifier	originalPosition
>1529	FunctionDef	FoodSlot 
>1530	ParameterList	bool f
>1531	Parameter	 
>1532	Identifier	f
>1533	ParameterType	bool
>1534	ReturnType	void
>1535	CompoundStatement	 
>1536	IfStatement	if ( f )
>1537	ElseStatement	else
>1538	CompoundStatement	 
>1539	ExpressionStatement	 
>1540	AssignmentExpr	label -> alpha = 0
>1541	PrimaryExpression	0
>1542	PtrMemberAccess	label -> alpha
>1543	Identifier	alpha
>1544	Identifier	label
>1545	ExpressionStatement	 
>1546	AssignmentExpr	alphaMod = 0
>1547	PrimaryExpression	0
>1548	Identifier	alphaMod
>1549	ExpressionStatement	 
>1550	AssignmentExpr	alpha = 0
>1551	PrimaryExpression	0
>1552	Identifier	alpha
>1553	CompoundStatement	 
>1554	ExpressionStatement	 
>1555	AssignmentExpr	label -> alpha = 1
>1556	PrimaryExpression	1
>1557	PtrMemberAccess	label -> alpha
>1558	Identifier	alpha
>1559	Identifier	label
>1560	ExpressionStatement	 
>1561	AssignmentExpr	alphaMod = 1
>1562	PrimaryExpression	1
>1563	Identifier	alphaMod
>1564	ExpressionStatement	 
>1565	AssignmentExpr	alpha = 1
>1566	PrimaryExpression	1
>1567	Identifier	alpha
>1568	Condition	 
>1569	Identifier	f
>1579	FunctionDef	FoodSlot 
>1580	ParameterList	bool effects
>1581	Parameter	 
>1582	Identifier	effects
>1583	ParameterType	bool
>1584	ReturnType	void
>1585	CompoundStatement	 
>1586	IfStatement	if ( i )
>1587	ElseStatement	else
>1588	ExpressionStatement	 
>1589	AssignmentExpr	lastAmount = 0
>1590	PrimaryExpression	0
>1591	Identifier	lastAmount
>1592	ExpressionStatement	 
>1593	AssignmentExpr	lastAmount = i -> amount
>1594	PtrMemberAccess	i -> amount
>1595	Identifier	amount
>1596	Identifier	i
>1597	Identifier	lastAmount
>1598	Condition	 
>1599	Identifier	i
>1600	ExpressionStatement	 
>1601	AssignmentExpr	lastIngredient = i
>1602	Identifier	i
>1603	Identifier	lastIngredient
>1604	IfStatement	if ( ingredient != 0 && ( i != lastIngredient || ( i && i -> amount != lastAmount ) ) )
>1605	CompoundStatement	 
>1606	IfStatement	if ( effects )
>1607	CompoundStatement	 
>1608	ExpressionStatement	 
>1609	CallExpression	scale . startPath ( 0.5 )
>1610	ArgumentList	0.5
>1611	Argument	0.5
>1612	PrimaryExpression	0.5
>1613	Callee	scale . startPath
>1614	MemberAccess	scale . startPath
>1615	Identifier	startPath
>1616	Identifier	scale
>1617	ExpressionStatement	 
>1618	CallExpression	scale . data -> path . addPathNode ( Vector ( 1 , 1 ) * scaleFactor , 1 )
>1619	ArgumentList	Vector ( 1 , 1 ) * scaleFactor
>1620	Argument	1
>1621	PrimaryExpression	1
>1622	Argument	Vector ( 1 , 1 ) * scaleFactor
>1623	MultiplicativeExpression	Vector ( 1 , 1 ) * scaleFactor
>1624	Identifier	scaleFactor
>1625	CallExpression	Vector ( 1 , 1 )
>1626	ArgumentList	1
>1627	Argument	1
>1628	PrimaryExpression	1
>1629	Argument	1
>1630	PrimaryExpression	1
>1631	Callee	Vector
>1632	Identifier	Vector
>1633	Callee	scale . data -> path . addPathNode
>1634	MemberAccess	scale . data -> path . addPathNode
>1635	Identifier	addPathNode
>1636	PtrMemberAccess	scale . data -> path
>1637	Identifier	path
>1638	MemberAccess	scale . data
>1639	Identifier	data
>1640	Identifier	scale
>1641	ExpressionStatement	 
>1642	CallExpression	scale . data -> path . addPathNode ( Vector ( 1.5 , 1.5 ) * scaleFactor , 0.2 )
>1643	ArgumentList	Vector ( 1.5 , 1.5 ) * scaleFactor
>1644	Argument	0.2
>1645	PrimaryExpression	0.2
>1646	Argument	Vector ( 1.5 , 1.5 ) * scaleFactor
>1647	MultiplicativeExpression	Vector ( 1.5 , 1.5 ) * scaleFactor
>1648	Identifier	scaleFactor
>1649	CallExpression	Vector ( 1.5 , 1.5 )
>1650	ArgumentList	1.5
>1651	Argument	1.5
>1652	PrimaryExpression	1.5
>1653	Argument	1.5
>1654	PrimaryExpression	1.5
>1655	Callee	Vector
>1656	Identifier	Vector
>1657	Callee	scale . data -> path . addPathNode
>1658	MemberAccess	scale . data -> path . addPathNode
>1659	Identifier	addPathNode
>1660	PtrMemberAccess	scale . data -> path
>1661	Identifier	path
>1662	MemberAccess	scale . data
>1663	Identifier	data
>1664	Identifier	scale
>1665	ExpressionStatement	 
>1666	CallExpression	scale . data -> path . addPathNode ( Vector ( 1 , 1 ) * scaleFactor , 0 )
>1667	ArgumentList	Vector ( 1 , 1 ) * scaleFactor
>1668	Argument	0
>1669	PrimaryExpression	0
>1670	Argument	Vector ( 1 , 1 ) * scaleFactor
>1671	MultiplicativeExpression	Vector ( 1 , 1 ) * scaleFactor
>1672	Identifier	scaleFactor
>1673	CallExpression	Vector ( 1 , 1 )
>1674	ArgumentList	1
>1675	Argument	1
>1676	PrimaryExpression	1
>1677	Argument	1
>1678	PrimaryExpression	1
>1679	Callee	Vector
>1680	Identifier	Vector
>1681	Callee	scale . data -> path . addPathNode
>1682	MemberAccess	scale . data -> path . addPathNode
>1683	Identifier	addPathNode
>1684	PtrMemberAccess	scale . data -> path
>1685	Identifier	path
>1686	MemberAccess	scale . data
>1687	Identifier	data
>1688	Identifier	scale
>1689	ExpressionStatement	 
>1690	CallExpression	scale . data -> path . clear ( )
>1691	ArgumentList	 
>1692	Callee	scale . data -> path . clear
>1693	MemberAccess	scale . data -> path . clear
>1694	Identifier	clear
>1695	PtrMemberAccess	scale . data -> path
>1696	Identifier	path
>1697	MemberAccess	scale . data
>1698	Identifier	data
>1699	Identifier	scale
>1700	ExpressionStatement	 
>1701	CallExpression	scale . ensureData ( )
>1702	ArgumentList	 
>1703	Callee	scale . ensureData
>1704	MemberAccess	scale . ensureData
>1705	Identifier	ensureData
>1706	Identifier	scale
>1707	Condition	 
>1708	Identifier	effects
>1709	Condition	 
>1710	AndExpression	ingredient != 0 && ( i != lastIngredient || ( i && i -> amount != lastAmount ) )
>1711	OrExpression	i != lastIngredient || ( i && i -> amount != lastAmount )
>1712	AndExpression	i && i -> amount != lastAmount
>1713	EqualityExpression	i -> amount != lastAmount
>1714	Identifier	lastAmount
>1715	PtrMemberAccess	i -> amount
>1716	Identifier	amount
>1717	Identifier	i
>1718	Identifier	i
>1719	EqualityExpression	i != lastIngredient
>1720	Identifier	lastIngredient
>1721	Identifier	i
>1722	EqualityExpression	ingredient != 0
>1723	PrimaryExpression	0
>1724	Identifier	ingredient
>1725	ExpressionStatement	 
>1726	CallExpression	scale . interpolateTo ( Vector ( 1 , 1 ) * scaleFactor , 0.001 )
>1727	ArgumentList	Vector ( 1 , 1 ) * scaleFactor
>1728	Argument	0.001
>1729	PrimaryExpression	0.001
>1730	Argument	Vector ( 1 , 1 ) * scaleFactor
>1731	MultiplicativeExpression	Vector ( 1 , 1 ) * scaleFactor
>1732	Identifier	scaleFactor
>1733	CallExpression	Vector ( 1 , 1 )
>1734	ArgumentList	1
>1735	Argument	1
>1736	PrimaryExpression	1
>1737	Argument	1
>1738	PrimaryExpression	1
>1739	Callee	Vector
>1740	Identifier	Vector
>1741	Callee	scale . interpolateTo
>1742	MemberAccess	scale . interpolateTo
>1743	Identifier	interpolateTo
>1744	Identifier	scale
>1745	IfStatement	if ( i )
>1746	ElseStatement	else
>1747	CompoundStatement	 
>1748	ExpressionStatement	 
>1749	CallExpression	setWidthHeight ( 64 )
>1750	ArgumentList	64
>1751	Argument	64
>1752	PrimaryExpression	64
>1753	Callee	setWidthHeight
>1754	Identifier	setWidthHeight
>1755	ExpressionStatement	 
>1756	CallExpression	setTexture ( \"gui/wok\" )
>1757	ArgumentList	\"gui/wok\"
>1758	Argument	\"gui/wok\"
>1759	PrimaryExpression	\"gui/wok\"
>1760	Callee	setTexture
>1761	Identifier	setTexture
>1762	ExpressionStatement	 
>1763	AssignmentExpr	renderQuad = true
>1764	Identifier	true
>1765	Identifier	renderQuad
>1766	ExpressionStatement	 
>1767	CallExpression	label -> setText ( \"\" )
>1768	ArgumentList	\"\"
>1769	Argument	\"\"
>1770	PrimaryExpression	\"\"
>1771	Callee	label -> setText
>1772	PtrMemberAccess	label -> setText
>1773	Identifier	setText
>1774	Identifier	label
>1775	ExpressionStatement	 
>1776	AssignmentExpr	ingredient = 0
>1777	PrimaryExpression	0
>1778	Identifier	ingredient
>1779	CompoundStatement	 
>1780	IfStatement	if ( i -> amount > 0 )
>1781	ElseStatement	else
>1782	CompoundStatement	 
>1783	ExpressionStatement	 
>1784	CallExpression	setWidthHeight ( 64 )
>1785	ArgumentList	64
>1786	Argument	64
>1787	PrimaryExpression	64
>1788	Callee	setWidthHeight
>1789	Identifier	setWidthHeight
>1790	ExpressionStatement	 
>1791	CallExpression	setTexture ( \"gui/wok\" )
>1792	ArgumentList	\"gui/wok\"
>1793	Argument	\"gui/wok\"
>1794	PrimaryExpression	\"gui/wok\"
>1795	Callee	setTexture
>1796	Identifier	setTexture
>1797	ExpressionStatement	 
>1798	AssignmentExpr	renderQuad = true
>1799	Identifier	true
>1800	Identifier	renderQuad
>1801	ExpressionStatement	 
>1802	CallExpression	label -> setText ( \"\" )
>1803	ArgumentList	\"\"
>1804	Argument	\"\"
>1805	PrimaryExpression	\"\"
>1806	Callee	label -> setText
>1807	PtrMemberAccess	label -> setText
>1808	Identifier	setText
>1809	Identifier	label
>1810	CompoundStatement	 
>1811	ExpressionStatement	 
>1812	AssignmentExpr	renderQuad = true
>1813	Identifier	true
>1814	Identifier	renderQuad
>1815	ExpressionStatement	 
>1816	CallExpression	setTexture ( \"Ingredients/\" + i -> gfx )
>1817	ArgumentList	\"Ingredients/\" + i -> gfx
>1818	Argument	\"Ingredients/\" + i -> gfx
>1819	AdditiveExpression	\"Ingredients/\" + i -> gfx
>1820	PtrMemberAccess	i -> gfx
>1821	Identifier	gfx
>1822	Identifier	i
>1823	PrimaryExpression	\"Ingredients/\"
>1824	Callee	setTexture
>1825	Identifier	setTexture
>1826	ExpressionStatement	 
>1827	CallExpression	label -> setText ( os . str ( ) )
>1828	ArgumentList	os . str ( )
>1829	Argument	os . str ( )
>1830	CallExpression	os . str ( )
>1831	ArgumentList	 
>1832	Callee	os . str
>1833	MemberAccess	os . str
>1834	Identifier	str
>1835	Identifier	os
>1836	Callee	label -> setText
>1837	PtrMemberAccess	label -> setText
>1838	Identifier	setText
>1839	Identifier	label
>1840	IfStatement	if ( i -> amount > 1 )
>1841	ExpressionStatement	 
>1842	ShiftExpression	os << i -> amount << \"/\" << i -> maxAmount
>1843	ShiftExpression	i -> amount << \"/\" << i -> maxAmount
>1844	ShiftExpression	\"/\" << i -> maxAmount
>1845	PtrMemberAccess	i -> maxAmount
>1846	Identifier	maxAmount
>1847	Identifier	i
>1848	PrimaryExpression	\"/\"
>1849	PtrMemberAccess	i -> amount
>1850	Identifier	amount
>1851	Identifier	i
>1852	Identifier	os
>1853	Condition	 
>1854	RelationalExpression	i -> amount > 1
>1855	PrimaryExpression	1
>1856	PtrMemberAccess	i -> amount
>1857	Identifier	amount
>1858	Identifier	i
>1859	IdentifierDeclStatement	 
>1860	IdentifierDecl	os
>1861	Identifier	os
>1862	IdentifierDeclType	std 
>1863	Condition	 
>1864	RelationalExpression	i -> amount > 0
>1865	PrimaryExpression	0
>1866	PtrMemberAccess	i -> amount
>1867	Identifier	amount
>1868	Identifier	i
>1869	ExpressionStatement	 
>1870	AssignmentExpr	ingredient = i
>1871	Identifier	i
>1872	Identifier	ingredient
>1873	Condition	 
>1874	Identifier	i
>1875	IdentifierDeclStatement	 
>1876	IdentifierDecl	* i = dsq -> continuity . getIngredientHeldByIndex ( offset + slot )
>1877	AssignmentExpr	* i = dsq -> continuity . getIngredientHeldByIndex ( offset + slot )
>1878	CallExpression	dsq -> continuity . getIngredientHeldByIndex ( offset + slot )
>1879	ArgumentList	offset + slot
>1880	Argument	offset + slot
>1881	AdditiveExpression	offset + slot
>1882	Identifier	slot
>1883	Identifier	offset
>1884	Callee	dsq -> continuity . getIngredientHeldByIndex
>1885	MemberAccess	dsq -> continuity . getIngredientHeldByIndex
>1886	Identifier	getIngredientHeldByIndex
>1887	PtrMemberAccess	dsq -> continuity
>1888	Identifier	continuity
>1889	Identifier	dsq
>1890	Identifier	i
>1891	Identifier	i
>1892	IdentifierDeclType	IngredientData *
>1893	IdentifierDeclStatement	 
>1894	IdentifierDecl	offset = game -> currentFoodPage * foodPageSize
>1895	AssignmentExpr	offset = game -> currentFoodPage * foodPageSize
>1896	MultiplicativeExpression	game -> currentFoodPage * foodPageSize
>1897	Identifier	foodPageSize
>1898	PtrMemberAccess	game -> currentFoodPage
>1899	Identifier	currentFoodPage
>1900	Identifier	game
>1901	Identifier	offset
>1902	Identifier	offset
>1903	IdentifierDeclType	int
>1937	FunctionDef	FoodSlot 
>1938	ParameterList	 
>1939	ReturnType	void
>1940	CompoundStatement	 
>1941	IfStatement	if ( ingredient && ! dsq -> isNested ( ) )
>1942	CompoundStatement	 
>1943	IfStatement	if ( ! ingredient -> effects . empty ( ) )
>1944	ElseStatement	else
>1945	CompoundStatement	 
>1946	ExpressionStatement	 
>1947	CallExpression	dsq -> sound -> playSfx ( \"denied\" )
>1948	ArgumentList	\"denied\"
>1949	Argument	\"denied\"
>1950	PrimaryExpression	\"denied\"
>1951	Callee	dsq -> sound -> playSfx
>1952	PtrMemberAccess	dsq -> sound -> playSfx
>1953	Identifier	playSfx
>1954	PtrMemberAccess	dsq -> sound
>1955	Identifier	sound
>1956	Identifier	dsq
>1957	CompoundStatement	 
>1958	IfStatement	if ( eaten )
>1959	CompoundStatement	 
>1960	ExpressionStatement	 
>1961	CallExpression	dsq -> game -> refreshFoodSlots ( true )
>1962	ArgumentList	true
>1963	Argument	true
>1964	Identifier	true
>1965	Callee	dsq -> game -> refreshFoodSlots
>1966	PtrMemberAccess	dsq -> game -> refreshFoodSlots
>1967	Identifier	refreshFoodSlots
>1968	PtrMemberAccess	dsq -> game
>1969	Identifier	game
>1970	Identifier	dsq
>1971	ExpressionStatement	 
>1972	CallExpression	dsq -> continuity . removeEmptyIngredients ( )
>1973	ArgumentList	 
>1974	Callee	dsq -> continuity . removeEmptyIngredients
>1975	MemberAccess	dsq -> continuity . removeEmptyIngredients
>1976	Identifier	removeEmptyIngredients
>1977	PtrMemberAccess	dsq -> continuity
>1978	Identifier	continuity
>1979	Identifier	dsq
>1980	ExpressionStatement	 
>1981	IncDecOp	ingredient -> amount --
>1982	IncDec	--
>1983	PtrMemberAccess	ingredient -> amount
>1984	Identifier	amount
>1985	Identifier	ingredient
>1986	Condition	 
>1987	Identifier	eaten
>1988	IdentifierDeclStatement	 
>1989	IdentifierDecl	eaten = dsq -> continuity . applyIngredientEffects ( ingredient )
>1990	AssignmentExpr	eaten = dsq -> continuity . applyIngredientEffects ( ingredient )
>1991	CallExpression	dsq -> continuity . applyIngredientEffects ( ingredient )
>1992	ArgumentList	ingredient
>1993	Argument	ingredient
>1994	Identifier	ingredient
>1995	Callee	dsq -> continuity . applyIngredientEffects
>1996	MemberAccess	dsq -> continuity . applyIngredientEffects
>1997	Identifier	applyIngredientEffects
>1998	PtrMemberAccess	dsq -> continuity
>1999	Identifier	continuity
>2000	Identifier	dsq
>2001	Identifier	eaten
>2002	Identifier	eaten
>2003	IdentifierDeclType	bool
>2004	Condition	 
>2005	UnaryOp	! ingredient -> effects . empty ( )
>2006	CallExpression	ingredient -> effects . empty ( )
>2007	ArgumentList	 
>2008	Callee	ingredient -> effects . empty
>2009	MemberAccess	ingredient -> effects . empty
>2010	Identifier	empty
>2011	PtrMemberAccess	ingredient -> effects
>2012	Identifier	effects
>2013	Identifier	ingredient
>2014	UnaryOperator	!
>2015	ForStatement	for ( int i = 0 ; i < foodHolders . size ( ) ; i ++ )
>2016	CompoundStatement	 
>2017	IfStatement	if ( ! foodHolders [ i ] -> isTrash ( ) && ! foodHolders [ i ] -> isEmpty ( ) )
>2018	CompoundStatement	 
>2019	ReturnStatement	 
>2020	ExpressionStatement	 
>2021	CallExpression	foodHolders [ i ] -> dropFood ( )
>2022	ArgumentList	 
>2023	Callee	foodHolders [ i ] -> dropFood
>2024	PtrMemberAccess	foodHolders [ i ] -> dropFood
>2025	Identifier	dropFood
>2026	ArrayIndexing	foodHolders [ i ]
>2027	Identifier	i
>2028	Identifier	foodHolders
>2029	ExpressionStatement	 
>2030	CallExpression	dsq -> sound -> playSfx ( \"denied\" )
>2031	ArgumentList	\"denied\"
>2032	Argument	\"denied\"
>2033	PrimaryExpression	\"denied\"
>2034	Callee	dsq -> sound -> playSfx
>2035	PtrMemberAccess	dsq -> sound -> playSfx
>2036	Identifier	playSfx
>2037	PtrMemberAccess	dsq -> sound
>2038	Identifier	sound
>2039	Identifier	dsq
>2040	Condition	 
>2041	AndExpression	! foodHolders [ i ] -> isTrash ( ) && ! foodHolders [ i ] -> isEmpty ( )
>2042	UnaryOp	! foodHolders [ i ] -> isEmpty ( )
>2043	CallExpression	foodHolders [ i ] -> isEmpty ( )
>2044	ArgumentList	 
>2045	Callee	foodHolders [ i ] -> isEmpty
>2046	PtrMemberAccess	foodHolders [ i ] -> isEmpty
>2047	Identifier	isEmpty
>2048	ArrayIndexing	foodHolders [ i ]
>2049	Identifier	i
>2050	Identifier	foodHolders
>2051	UnaryOperator	!
>2052	UnaryOp	! foodHolders [ i ] -> isTrash ( )
>2053	CallExpression	foodHolders [ i ] -> isTrash ( )
>2054	ArgumentList	 
>2055	Callee	foodHolders [ i ] -> isTrash
>2056	PtrMemberAccess	foodHolders [ i ] -> isTrash
>2057	Identifier	isTrash
>2058	ArrayIndexing	foodHolders [ i ]
>2059	Identifier	i
>2060	Identifier	foodHolders
>2061	UnaryOperator	!
>2062	IncDecOp	 
>2063	IncDec	++
>2064	Identifier	i
>2065	Condition	 
>2066	RelationalExpression	i < foodHolders . size ( )
>2067	CallExpression	foodHolders . size ( )
>2068	ArgumentList	 
>2069	Callee	foodHolders . size
>2070	MemberAccess	foodHolders . size
>2071	Identifier	size
>2072	Identifier	foodHolders
>2073	Identifier	i
>2074	ForInit	 
>2075	IdentifierDeclStatement	int i = 0 ;
>2076	IdentifierDecl	i = 0
>2077	AssignmentExpr	i = 0
>2078	PrimaryExpression	0
>2079	Identifier	i
>2080	Identifier	i
>2081	IdentifierDeclType	int
>2082	Condition	 
>2083	AndExpression	ingredient && ! dsq -> isNested ( )
>2084	UnaryOp	! dsq -> isNested ( )
>2085	CallExpression	dsq -> isNested ( )
>2086	ArgumentList	 
>2087	Callee	dsq -> isNested
>2088	PtrMemberAccess	dsq -> isNested
>2089	Identifier	isNested
>2090	Identifier	dsq
>2091	UnaryOperator	!
>2092	Identifier	ingredient
>2119	FunctionDef	FoodSlot 
>2120	ParameterList	 
>2121	ReturnType	void
>2122	CompoundStatement	 
>2123	ForStatement	for ( int i = foodHolders . size ( ) - 1 ; i >= 0 ; i -- )
>2124	CompoundStatement	 
>2125	IfStatement	if ( foodHolders [ i ] -> alpha . x > 0 && foodHolders [ i ] -> alphaMod > 0 && foodHolders [ i ] -> isEmpty ( ) && ! \
>2126	CompoundStatement	 
>2127	BreakStatement	 
>2128	ExpressionStatement	 
>2129	CallExpression	refresh ( true )
>2130	ArgumentList	true
>2131	Argument	true
>2132	Identifier	true
>2133	Callee	refresh
>2134	Identifier	refresh
>2135	ExpressionStatement	 
>2136	AssignmentExpr	inCookSlot = true
>2137	Identifier	true
>2138	Identifier	inCookSlot
>2139	ExpressionStatement	 
>2140	CallExpression	foodHolders [ i ] -> setIngredient ( ingredient )
>2141	ArgumentList	ingredient
>2142	Argument	ingredient
>2143	Identifier	ingredient
>2144	Callee	foodHolders [ i ] -> setIngredient
>2145	PtrMemberAccess	foodHolders [ i ] -> setIngredient
>2146	Identifier	setIngredient
>2147	ArrayIndexing	foodHolders [ i ]
>2148	Identifier	i
>2149	Identifier	foodHolders
>2150	Condition	 
>2151	AndExpression	foodHolders [ i ] -> alpha . x > 0 && foodHolders [ i ] -> alphaMod > 0 && foodHolders [ i ] -> isEmpty ( ) && ! \
>2152	AndExpression	foodHolders [ i ] -> alphaMod > 0 && foodHolders [ i ] -> isEmpty ( ) && ! foodHolders [ i ] -> isTrash ( )
>2153	AndExpression	foodHolders [ i ] -> isEmpty ( ) && ! foodHolders [ i ] -> isTrash ( )
>2154	UnaryOp	! foodHolders [ i ] -> isTrash ( )
>2155	CallExpression	foodHolders [ i ] -> isTrash ( )
>2156	ArgumentList	 
>2157	Callee	foodHolders [ i ] -> isTrash
>2158	PtrMemberAccess	foodHolders [ i ] -> isTrash
>2159	Identifier	isTrash
>2160	ArrayIndexing	foodHolders [ i ]
>2161	Identifier	i
>2162	Identifier	foodHolders
>2163	UnaryOperator	!
>2164	CallExpression	foodHolders [ i ] -> isEmpty ( )
>2165	ArgumentList	 
>2166	Callee	foodHolders [ i ] -> isEmpty
>2167	PtrMemberAccess	foodHolders [ i ] -> isEmpty
>2168	Identifier	isEmpty
>2169	ArrayIndexing	foodHolders [ i ]
>2170	Identifier	i
>2171	Identifier	foodHolders
>2172	RelationalExpression	foodHolders [ i ] -> alphaMod > 0
>2173	PrimaryExpression	0
>2174	PtrMemberAccess	foodHolders [ i ] -> alphaMod
>2175	Identifier	alphaMod
>2176	ArrayIndexing	foodHolders [ i ]
>2177	Identifier	i
>2178	Identifier	foodHolders
>2179	RelationalExpression	foodHolders [ i ] -> alpha . x > 0
>2180	PrimaryExpression	0
>2181	MemberAccess	foodHolders [ i ] -> alpha . x
>2182	Identifier	x
>2183	PtrMemberAccess	foodHolders [ i ] -> alpha
>2184	Identifier	alpha
>2185	ArrayIndexing	foodHolders [ i ]
>2186	Identifier	i
>2187	Identifier	foodHolders
>2188	IncDecOp	 
>2189	IncDec	--
>2190	Identifier	i
>2191	Condition	 
>2192	RelationalExpression	i >= 0
>2193	PrimaryExpression	0
>2194	Identifier	i
>2195	ForInit	 
>2196	IdentifierDeclStatement	int i = foodHolders . size ( ) - 1 ;
>2197	IdentifierDecl	i = foodHolders . size ( ) - 1
>2198	AssignmentExpr	i = foodHolders . size ( ) - 1
>2199	AdditiveExpression	foodHolders . size ( ) - 1
>2200	PrimaryExpression	1
>2201	CallExpression	foodHolders . size ( )
>2202	ArgumentList	 
>2203	Callee	foodHolders . size
>2204	MemberAccess	foodHolders . size
>2205	Identifier	size
>2206	Identifier	foodHolders
>2207	Identifier	i
>2208	Identifier	i
>2209	IdentifierDeclType	int
>2210	IfStatement	if ( ingredient -> amount <= 0 )
>2211	ReturnStatement	 
>2212	Condition	 
>2213	RelationalExpression	ingredient -> amount <= 0
>2214	PrimaryExpression	0
>2215	PtrMemberAccess	ingredient -> amount
>2216	Identifier	amount
>2217	Identifier	ingredient
>2218	IfStatement	if ( ! ingredient )
>2219	ReturnStatement	 
>2220	Condition	 
>2221	UnaryOp	! ingredient
>2222	Identifier	ingredient
>2223	UnaryOperator	!
>2244	FunctionDef	FoodSlot 
>2245	ParameterList	 
>2246	ReturnType	void
>2247	CompoundStatement	 
>2248	ExpressionStatement	 
>2249	CallExpression	dsq -> game -> refreshFoodSlots ( true )
>2250	ArgumentList	true
>2251	Argument	true
>2252	Identifier	true
>2253	Callee	dsq -> game -> refreshFoodSlots
>2254	PtrMemberAccess	dsq -> game -> refreshFoodSlots
>2255	Identifier	refreshFoodSlots
>2256	PtrMemberAccess	dsq -> game
>2257	Identifier	game
>2258	Identifier	dsq
>2259	ExpressionStatement	 
>2260	CallExpression	dsq -> continuity . removeEmptyIngredients ( )
>2261	ArgumentList	 
>2262	Callee	dsq -> continuity . removeEmptyIngredients
>2263	MemberAccess	dsq -> continuity . removeEmptyIngredients
>2264	Identifier	removeEmptyIngredients
>2265	PtrMemberAccess	dsq -> continuity
>2266	Identifier	continuity
>2267	Identifier	dsq
>2268	ExpressionStatement	 
>2269	CallExpression	dsq -> game -> dropIngrNames . push_back ( ingredient -> name )
>2270	ArgumentList	ingredient -> name
>2271	Argument	ingredient -> name
>2272	PtrMemberAccess	ingredient -> name
>2273	Identifier	name
>2274	Identifier	ingredient
>2275	Callee	dsq -> game -> dropIngrNames . push_back
>2276	MemberAccess	dsq -> game -> dropIngrNames . push_back
>2277	Identifier	push_back
>2278	PtrMemberAccess	dsq -> game -> dropIngrNames
>2279	Identifier	dropIngrNames
>2280	PtrMemberAccess	dsq -> game
>2281	Identifier	game
>2282	Identifier	dsq
>2283	ExpressionStatement	 
>2284	IncDecOp	ingredient -> amount --
>2285	IncDec	--
>2286	PtrMemberAccess	ingredient -> amount
>2287	Identifier	amount
>2288	Identifier	ingredient
>2289	IfStatement	if ( ingredient -> amount <= 0 )
>2290	ReturnStatement	 
>2291	Condition	 
>2292	RelationalExpression	ingredient -> amount <= 0
>2293	PrimaryExpression	0
>2294	PtrMemberAccess	ingredient -> amount
>2295	Identifier	amount
>2296	Identifier	ingredient
>2297	IfStatement	if ( ! ingredient )
>2298	ReturnStatement	 
>2299	Condition	 
>2300	UnaryOp	! ingredient
>2301	Identifier	ingredient
>2302	UnaryOperator	!
>2318	FunctionDef	FoodSlot 
>2319	ParameterList	 
>2320	ReturnType	bool
>2321	CompoundStatement	 
>2322	ReturnStatement	 
>2323	CallExpression	( core -> mouse . position - getWorldPosition ( ) ) . isLength2DIn ( 32 )
>2324	ArgumentList	32
>2325	Argument	32
>2326	PrimaryExpression	32
>2327	Callee	( core -> mouse . position - getWorldPosition ( ) ) . isLength2DIn
>2328	MemberAccess	( core -> mouse . position - getWorldPosition ( ) ) . isLength2DIn
>2329	Identifier	isLength2DIn
>2330	AdditiveExpression	core -> mouse . position - getWorldPosition ( )
>2331	CallExpression	getWorldPosition ( )
>2332	ArgumentList	 
>2333	Callee	getWorldPosition
>2334	Identifier	getWorldPosition
>2335	MemberAccess	core -> mouse . position
>2336	Identifier	position
>2337	PtrMemberAccess	core -> mouse
>2338	Identifier	mouse
>2339	Identifier	core
>2349	FunctionDef	FoodSlot 
>2350	ParameterList	float dt
>2351	Parameter	 
>2352	Identifier	dt
>2353	ParameterType	float
>2354	ReturnType	void
>2355	CompoundStatement	 
>2356	IfStatement	if ( alphaMod == 1 && ingredient && ingredient -> amount > 0 )
>2357	ElseStatement	else
>2358	CompoundStatement	 
>2359	ExpressionStatement	 
>2360	AssignmentExpr	rmb = 0
>2361	PrimaryExpression	0
>2362	Identifier	rmb
>2363	CompoundStatement	 
>2364	IfStatement	if ( ( core -> mouse . position - getWorldPosition ( ) ) . isLength2DIn ( 16 ) )
>2365	ElseStatement	else
>2366	CompoundStatement	 
>2367	ExpressionStatement	 
>2368	AssignmentExpr	rmb = 0
>2369	PrimaryExpression	0
>2370	Identifier	rmb
>2371	IfStatement	if ( ! dsq -> game -> foodDescription -> alpha . isInterpolating ( ) )
>2372	ExpressionStatement	 
>2373	CallExpression	dsq -> game -> foodDescription -> alpha . interpolateTo ( 0 , 2 )
>2374	ArgumentList	0
>2375	Argument	2
>2376	PrimaryExpression	2
>2377	Argument	0
>2378	PrimaryExpression	0
>2379	Callee	dsq -> game -> foodDescription -> alpha . interpolateTo
>2380	MemberAccess	dsq -> game -> foodDescription -> alpha . interpolateTo
>2381	Identifier	interpolateTo
>2382	PtrMemberAccess	dsq -> game -> foodDescription -> alpha
>2383	Identifier	alpha
>2384	PtrMemberAccess	dsq -> game -> foodDescription
>2385	Identifier	foodDescription
>2386	PtrMemberAccess	dsq -> game
>2387	Identifier	game
>2388	Identifier	dsq
>2389	Condition	 
>2390	UnaryOp	! dsq -> game -> foodDescription -> alpha . isInterpolating ( )
>2391	CallExpression	dsq -> game -> foodDescription -> alpha . isInterpolating ( )
>2392	ArgumentList	 
>2393	Callee	dsq -> game -> foodDescription -> alpha . isInterpolating
>2394	MemberAccess	dsq -> game -> foodDescription -> alpha . isInterpolating
>2395	Identifier	isInterpolating
>2396	PtrMemberAccess	dsq -> game -> foodDescription -> alpha
>2397	Identifier	alpha
>2398	PtrMemberAccess	dsq -> game -> foodDescription
>2399	Identifier	foodDescription
>2400	PtrMemberAccess	dsq -> game
>2401	Identifier	game
>2402	Identifier	dsq
>2403	UnaryOperator	!
>2404	IfStatement	if ( ! dsq -> game -> foodLabel -> alpha . isInterpolating ( ) )
>2405	ExpressionStatement	 
>2406	CallExpression	dsq -> game -> foodLabel -> alpha . interpolateTo ( 0 , 2 )
>2407	ArgumentList	0
>2408	Argument	2
>2409	PrimaryExpression	2
>2410	Argument	0
>2411	PrimaryExpression	0
>2412	Callee	dsq -> game -> foodLabel -> alpha . interpolateTo
>2413	MemberAccess	dsq -> game -> foodLabel -> alpha . interpolateTo
>2414	Identifier	interpolateTo
>2415	PtrMemberAccess	dsq -> game -> foodLabel -> alpha
>2416	Identifier	alpha
>2417	PtrMemberAccess	dsq -> game -> foodLabel
>2418	Identifier	foodLabel
>2419	PtrMemberAccess	dsq -> game
>2420	Identifier	game
>2421	Identifier	dsq
>2422	Condition	 
>2423	UnaryOp	! dsq -> game -> foodLabel -> alpha . isInterpolating ( )
>2424	CallExpression	dsq -> game -> foodLabel -> alpha . isInterpolating ( )
>2425	ArgumentList	 
>2426	Callee	dsq -> game -> foodLabel -> alpha . isInterpolating
>2427	MemberAccess	dsq -> game -> foodLabel -> alpha . isInterpolating
>2428	Identifier	isInterpolating
>2429	PtrMemberAccess	dsq -> game -> foodLabel -> alpha
>2430	Identifier	alpha
>2431	PtrMemberAccess	dsq -> game -> foodLabel
>2432	Identifier	foodLabel
>2433	PtrMemberAccess	dsq -> game
>2434	Identifier	game
>2435	Identifier	dsq
>2436	UnaryOperator	!
>2437	CompoundStatement	 
>2438	IfStatement	if ( core -> mouse . buttons . right && ! rmb )
>2439	ElseStatement	else
>2440	IfStatement	if ( ! core -> mouse . buttons . right && rmb )
>2441	CompoundStatement	 
>2442	ReturnStatement	 
>2443	IfStatement	if ( ! game -> recipeMenu . on )
>2444	ExpressionStatement	 
>2445	CallExpression	moveRight ( )
>2446	ArgumentList	 
>2447	Callee	moveRight
>2448	Identifier	moveRight
>2449	Condition	 
>2450	UnaryOp	! game -> recipeMenu . on
>2451	MemberAccess	game -> recipeMenu . on
>2452	Identifier	on
>2453	PtrMemberAccess	game -> recipeMenu
>2454	Identifier	recipeMenu
>2455	Identifier	game
>2456	UnaryOperator	!
>2457	ExpressionStatement	 
>2458	AssignmentExpr	rmb = 0
>2459	PrimaryExpression	0
>2460	Identifier	rmb
>2461	Condition	 
>2462	AndExpression	! core -> mouse . buttons . right && rmb
>2463	Identifier	rmb
>2464	UnaryOp	! core -> mouse . buttons . right
>2465	MemberAccess	core -> mouse . buttons . right
>2466	Identifier	right
>2467	MemberAccess	core -> mouse . buttons
>2468	Identifier	buttons
>2469	PtrMemberAccess	core -> mouse
>2470	Identifier	mouse
>2471	Identifier	core
>2472	UnaryOperator	!
>2473	CompoundStatement	 
>2474	ExpressionStatement	 
>2475	AssignmentExpr	rmb = 1
>2476	PrimaryExpression	1
>2477	Identifier	rmb
>2478	Condition	 
>2479	AndExpression	core -> mouse . buttons . right && ! rmb
>2480	UnaryOp	! rmb
>2481	Identifier	rmb
>2482	UnaryOperator	!
>2483	MemberAccess	core -> mouse . buttons . right
>2484	Identifier	right
>2485	MemberAccess	core -> mouse . buttons
>2486	Identifier	buttons
>2487	PtrMemberAccess	core -> mouse
>2488	Identifier	mouse
>2489	Identifier	core
>2490	IfStatement	if ( core -> mouse . buttons . left && foodSlotIndex == - 1 )
>2491	CompoundStatement	 
>2492	IfStatement	if ( ! inCookSlot )
>2493	CompoundStatement	 
>2494	ExpressionStatement	 
>2495	AssignmentExpr	originalPosition = position
>2496	Identifier	position
>2497	Identifier	originalPosition
>2498	Condition	 
>2499	UnaryOp	! inCookSlot
>2500	Identifier	inCookSlot
>2501	UnaryOperator	!
>2502	ExpressionStatement	 
>2503	AssignmentExpr	label -> alpha = 0
>2504	PrimaryExpression	0
>2505	PtrMemberAccess	label -> alpha
>2506	Identifier	alpha
>2507	Identifier	label
>2508	ExpressionStatement	 
>2509	AssignmentExpr	foodSlotIndex = slot
>2510	Identifier	slot
>2511	Identifier	foodSlotIndex
>2512	ExpressionStatement	 
>2513	AssignmentExpr	grabTime = 0
>2514	PrimaryExpression	0
>2515	Identifier	grabTime
>2516	Condition	 
>2517	AndExpression	core -> mouse . buttons . left && foodSlotIndex == - 1
>2518	EqualityExpression	foodSlotIndex == - 1
>2519	UnaryOp	- 1
>2520	PrimaryExpression	1
>2521	UnaryOperator	-
>2522	Identifier	foodSlotIndex
>2523	MemberAccess	core -> mouse . buttons . left
>2524	Identifier	left
>2525	MemberAccess	core -> mouse . buttons
>2526	Identifier	buttons
>2527	PtrMemberAccess	core -> mouse
>2528	Identifier	mouse
>2529	Identifier	core
>2530	ExpressionStatement	 
>2531	CallExpression	dsq -> game -> foodDescription -> alpha . interpolateTo ( 1 , 0.2 )
>2532	ArgumentList	1
>2533	Argument	0.2
>2534	PrimaryExpression	0.2
>2535	Argument	1
>2536	PrimaryExpression	1
>2537	Callee	dsq -> game -> foodDescription -> alpha . interpolateTo
>2538	MemberAccess	dsq -> game -> foodDescription -> alpha . interpolateTo
>2539	Identifier	interpolateTo
>2540	PtrMemberAccess	dsq -> game -> foodDescription -> alpha
>2541	Identifier	alpha
>2542	PtrMemberAccess	dsq -> game -> foodDescription
>2543	Identifier	foodDescription
>2544	PtrMemberAccess	dsq -> game
>2545	Identifier	game
>2546	Identifier	dsq
>2547	ExpressionStatement	 
>2548	CallExpression	dsq -> game -> foodDescription -> setText ( dsq -> continuity . getIngredientAffectsString ( ingredient ) )
>2549	ArgumentList	dsq -> continuity . getIngredientAffectsString ( ingredient )
>2550	Argument	dsq -> continuity . getIngredientAffectsString ( ingredient )
>2551	CallExpression	dsq -> continuity . getIngredientAffectsString ( ingredient )
>2552	ArgumentList	ingredient
>2553	Argument	ingredient
>2554	Identifier	ingredient
>2555	Callee	dsq -> continuity . getIngredientAffectsString
>2556	MemberAccess	dsq -> continuity . getIngredientAffectsString
>2557	Identifier	getIngredientAffectsString
>2558	PtrMemberAccess	dsq -> continuity
>2559	Identifier	continuity
>2560	Identifier	dsq
>2561	Callee	dsq -> game -> foodDescription -> setText
>2562	PtrMemberAccess	dsq -> game -> foodDescription -> setText
>2563	Identifier	setText
>2564	PtrMemberAccess	dsq -> game -> foodDescription
>2565	Identifier	foodDescription
>2566	PtrMemberAccess	dsq -> game
>2567	Identifier	game
>2568	Identifier	dsq
>2569	ExpressionStatement	 
>2570	CallExpression	dsq -> game -> foodLabel -> alpha . interpolateTo ( 1 , 0.2 )
>2571	ArgumentList	1
>2572	Argument	0.2
>2573	PrimaryExpression	0.2
>2574	Argument	1
>2575	PrimaryExpression	1
>2576	Callee	dsq -> game -> foodLabel -> alpha . interpolateTo
>2577	MemberAccess	dsq -> game -> foodLabel -> alpha . interpolateTo
>2578	Identifier	interpolateTo
>2579	PtrMemberAccess	dsq -> game -> foodLabel -> alpha
>2580	Identifier	alpha
>2581	PtrMemberAccess	dsq -> game -> foodLabel
>2582	Identifier	foodLabel
>2583	PtrMemberAccess	dsq -> game
>2584	Identifier	game
>2585	Identifier	dsq
>2586	ExpressionStatement	 
>2587	CallExpression	dsq -> game -> foodLabel -> setText ( ingredient -> displayName )
>2588	ArgumentList	ingredient -> displayName
>2589	Argument	ingredient -> displayName
>2590	PtrMemberAccess	ingredient -> displayName
>2591	Identifier	displayName
>2592	Identifier	ingredient
>2593	Callee	dsq -> game -> foodLabel -> setText
>2594	PtrMemberAccess	dsq -> game -> foodLabel -> setText
>2595	Identifier	setText
>2596	PtrMemberAccess	dsq -> game -> foodLabel
>2597	Identifier	foodLabel
>2598	PtrMemberAccess	dsq -> game
>2599	Identifier	game
>2600	Identifier	dsq
>2601	Condition	 
>2602	CallExpression	( core -> mouse . position - getWorldPosition ( ) ) . isLength2DIn ( 16 )
>2603	ArgumentList	16
>2604	Argument	16
>2605	PrimaryExpression	16
>2606	Callee	( core -> mouse . position - getWorldPosition ( ) ) . isLength2DIn
>2607	MemberAccess	( core -> mouse . position - getWorldPosition ( ) ) . isLength2DIn
>2608	Identifier	isLength2DIn
>2609	AdditiveExpression	core -> mouse . position - getWorldPosition ( )
>2610	CallExpression	getWorldPosition ( )
>2611	ArgumentList	 
>2612	Callee	getWorldPosition
>2613	Identifier	getWorldPosition
>2614	MemberAccess	core -> mouse . position
>2615	Identifier	position
>2616	PtrMemberAccess	core -> mouse
>2617	Identifier	mouse
>2618	Identifier	core
>2619	IfStatement	if ( foodSlotIndex == slot )
>2620	CompoundStatement	 
>2621	IfStatement	if ( ! core -> mouse . buttons . left )
>2622	ElseStatement	else
>2623	CompoundStatement	 
>2624	IfStatement	if ( ! dsq -> game -> recipeMenu . on )
>2625	CompoundStatement	 
>2626	IfStatement	if ( dsq -> inputMode == INPUT_MOUSE )
>2627	CompoundStatement	 
>2628	ExpressionStatement	 
>2629	AssignmentExpr	dsq -> game -> moveFoodSlotToFront = this
>2630	Identifier	this
>2631	PtrMemberAccess	dsq -> game -> moveFoodSlotToFront
>2632	Identifier	moveFoodSlotToFront
>2633	PtrMemberAccess	dsq -> game
>2634	Identifier	game
>2635	Identifier	dsq
>2636	ExpressionStatement	 
>2637	AssignmentExpr	position += diff
>2638	Identifier	diff
>2639	Identifier	position
>2640	IdentifierDeclStatement	 
>2641	IdentifierDecl	diff = core -> mouse . position - getWorldPosition ( )
>2642	AssignmentExpr	diff = core -> mouse . position - getWorldPosition ( )
>2643	AdditiveExpression	core -> mouse . position - getWorldPosition ( )
>2644	CallExpression	getWorldPosition ( )
>2645	ArgumentList	 
>2646	Callee	getWorldPosition
>2647	Identifier	getWorldPosition
>2648	MemberAccess	core -> mouse . position
>2649	Identifier	position
>2650	PtrMemberAccess	core -> mouse
>2651	Identifier	mouse
>2652	Identifier	core
>2653	Identifier	diff
>2654	Identifier	diff
>2655	IdentifierDeclType	Vector
>2656	Condition	 
>2657	EqualityExpression	dsq -> inputMode == INPUT_MOUSE
>2658	Identifier	INPUT_MOUSE
>2659	PtrMemberAccess	dsq -> inputMode
>2660	Identifier	inputMode
>2661	Identifier	dsq
>2662	Condition	 
>2663	UnaryOp	! dsq -> game -> recipeMenu . on
>2664	MemberAccess	dsq -> game -> recipeMenu . on
>2665	Identifier	on
>2666	PtrMemberAccess	dsq -> game -> recipeMenu
>2667	Identifier	recipeMenu
>2668	PtrMemberAccess	dsq -> game
>2669	Identifier	game
>2670	Identifier	dsq
>2671	UnaryOperator	!
>2672	CompoundStatement	 
>2673	ExpressionStatement	 
>2674	AssignmentExpr	grabTime = 0
>2675	PrimaryExpression	0
>2676	Identifier	grabTime
>2677	ExpressionStatement	 
>2678	AssignmentExpr	label -> alpha = 1
>2679	PrimaryExpression	1
>2680	PtrMemberAccess	label -> alpha
>2681	Identifier	alpha
>2682	Identifier	label
>2683	ExpressionStatement	 
>2684	AssignmentExpr	position = originalPosition
>2685	Identifier	originalPosition
>2686	Identifier	position
>2687	IfStatement	if ( ! dsq -> game -> recipeMenu . on )
>2688	CompoundStatement	 
>2689	IfStatement	if ( ( dsq -> game -> lips -> getWorldPosition ( ) - wp ) . isLength2DIn ( 32 ) )
>2690	ElseStatement	else
>2691	IfStatement	if ( wp . x < 40 || wp . y < 40 || wp . x > 760 || wp . y > 560 )
>2692	ElseStatement	else
>2693	CompoundStatement	 
>2694	IfStatement	if ( ! droppedIn )
>2695	CompoundStatement	 
>2696	IfStatement	if ( doubleClickDelay > 0 )
>2697	ElseStatement	else
>2698	CompoundStatement	 
>2699	ExpressionStatement	 
>2700	AssignmentExpr	doubleClickDelay = DOUBLE_CLICK_DELAY
>2701	Identifier	DOUBLE_CLICK_DELAY
>2702	Identifier	doubleClickDelay
>2703	CompoundStatement	 
>2704	ReturnStatement	 
>2705	ExpressionStatement	 
>2706	AssignmentExpr	grabTime = 0
>2707	PrimaryExpression	0
>2708	Identifier	grabTime
>2709	ExpressionStatement	 
>2710	AssignmentExpr	label -> alpha = 1
>2711	PrimaryExpression	1
>2712	PtrMemberAccess	label -> alpha
>2713	Identifier	alpha
>2714	Identifier	label
>2715	ExpressionStatement	 
>2716	AssignmentExpr	position = originalPosition
>2717	Identifier	originalPosition
>2718	Identifier	position
>2719	ExpressionStatement	 
>2720	CallExpression	eatMe ( )
>2721	ArgumentList	 
>2722	Callee	eatMe
>2723	Identifier	eatMe
>2724	ExpressionStatement	 
>2725	AssignmentExpr	doubleClickDelay = 0
>2726	PrimaryExpression	0
>2727	Identifier	doubleClickDelay
>2728	ExpressionStatement	 
>2729	AssignmentExpr	dsq -> menuSelectDelay = 0.5
>2730	PrimaryExpression	0.5
>2731	PtrMemberAccess	dsq -> menuSelectDelay
>2732	Identifier	menuSelectDelay
>2733	Identifier	dsq
>2734	Condition	 
>2735	RelationalExpression	doubleClickDelay > 0
>2736	PrimaryExpression	0
>2737	Identifier	doubleClickDelay
>2738	Condition	 
>2739	UnaryOp	! droppedIn
>2740	Identifier	droppedIn
>2741	UnaryOperator	!
>2742	ForStatement	for ( int i = 0 ; i < foodHolders . size ( ) ; i ++ )
>2743	CompoundStatement	 
>2744	IfStatement	if ( in )
>2745	CompoundStatement	 
>2746	IfStatement	if ( foodHolders [ i ] -> isTrash ( ) )
>2747	ElseStatement	else
>2748	IfStatement	if ( foodHolders [ i ] -> isEmpty ( ) )
>2749	CompoundStatement	 
>2750	BreakStatement	 
>2751	ExpressionStatement	 
>2752	CallExpression	refresh ( true )
>2753	ArgumentList	true
>2754	Argument	true
>2755	Identifier	true
>2756	Callee	refresh
>2757	Identifier	refresh
>2758	ExpressionStatement	 
>2759	AssignmentExpr	inCookSlot = true
>2760	Identifier	true
>2761	Identifier	inCookSlot
>2762	ExpressionStatement	 
>2763	CallExpression	foodHolders [ i ] -> setIngredient ( ingredient )
>2764	ArgumentList	ingredient
>2765	Argument	ingredient
>2766	Identifier	ingredient
>2767	Callee	foodHolders [ i ] -> setIngredient
>2768	PtrMemberAccess	foodHolders [ i ] -> setIngredient
>2769	Identifier	setIngredient
>2770	ArrayIndexing	foodHolders [ i ]
>2771	Identifier	i
>2772	Identifier	foodHolders
>2773	Condition	 
>2774	CallExpression	foodHolders [ i ] -> isEmpty ( )
>2775	ArgumentList	 
>2776	Callee	foodHolders [ i ] -> isEmpty
>2777	PtrMemberAccess	foodHolders [ i ] -> isEmpty
>2778	Identifier	isEmpty
>2779	ArrayIndexing	foodHolders [ i ]
>2780	Identifier	i
>2781	Identifier	foodHolders
>2782	CompoundStatement	 
>2783	BreakStatement	 
>2784	ExpressionStatement	 
>2785	CallExpression	dsq -> game -> foodDescription -> alpha . interpolateTo ( 0 , 2 )
>2786	ArgumentList	0
>2787	Argument	2
>2788	PrimaryExpression	2
>2789	Argument	0
>2790	PrimaryExpression	0
>2791	Callee	dsq -> game -> foodDescription -> alpha . interpolateTo
>2792	MemberAccess	dsq -> game -> foodDescription -> alpha . interpolateTo
>2793	Identifier	interpolateTo
>2794	PtrMemberAccess	dsq -> game -> foodDescription -> alpha
>2795	Identifier	alpha
>2796	PtrMemberAccess	dsq -> game -> foodDescription
>2797	Identifier	foodDescription
>2798	PtrMemberAccess	dsq -> game
>2799	Identifier	game
>2800	Identifier	dsq
>2801	ExpressionStatement	 
>2802	CallExpression	dsq -> game -> foodLabel -> alpha . interpolateTo ( 0 , 2 )
>2803	ArgumentList	0
>2804	Argument	2
>2805	PrimaryExpression	2
>2806	Argument	0
>2807	PrimaryExpression	0
>2808	Callee	dsq -> game -> foodLabel -> alpha . interpolateTo
>2809	MemberAccess	dsq -> game -> foodLabel -> alpha . interpolateTo
>2810	Identifier	interpolateTo
>2811	PtrMemberAccess	dsq -> game -> foodLabel -> alpha
>2812	Identifier	alpha
>2813	PtrMemberAccess	dsq -> game -> foodLabel
>2814	Identifier	foodLabel
>2815	PtrMemberAccess	dsq -> game
>2816	Identifier	game
>2817	Identifier	dsq
>2818	ExpressionStatement	 
>2819	CallExpression	discard ( )
>2820	ArgumentList	 
>2821	Callee	discard
>2822	Identifier	discard
>2823	Condition	 
>2824	CallExpression	foodHolders [ i ] -> isTrash ( )
>2825	ArgumentList	 
>2826	Callee	foodHolders [ i ] -> isTrash
>2827	PtrMemberAccess	foodHolders [ i ] -> isTrash
>2828	Identifier	isTrash
>2829	ArrayIndexing	foodHolders [ i ]
>2830	Identifier	i
>2831	Identifier	foodHolders
>2832	ExpressionStatement	 
>2833	AssignmentExpr	droppedIn = true
>2834	Identifier	true
>2835	Identifier	droppedIn
>2836	Condition	 
>2837	Identifier	in
>2838	IdentifierDeclStatement	 
>2839	IdentifierDecl	in = ( foodHolders [ i ] -> getWorldPosition ( ) - wp ) . isLength2DIn ( 32 )
>2840	AssignmentExpr	in = ( foodHolders [ i ] -> getWorldPosition ( ) - wp ) . isLength2DIn ( 32 )
>2841	CallExpression	( foodHolders [ i ] -> getWorldPosition ( ) - wp ) . isLength2DIn ( 32 )
>2842	ArgumentList	32
>2843	Argument	32
>2844	PrimaryExpression	32
>2845	Callee	( foodHolders [ i ] -> getWorldPosition ( ) - wp ) . isLength2DIn
>2846	MemberAccess	( foodHolders [ i ] -> getWorldPosition ( ) - wp ) . isLength2DIn
>2847	Identifier	isLength2DIn
>2848	AdditiveExpression	foodHolders [ i ] -> getWorldPosition ( ) - wp
>2849	Identifier	wp
>2850	CallExpression	foodHolders [ i ] -> getWorldPosition ( )
>2851	ArgumentList	 
>2852	Callee	foodHolders [ i ] -> getWorldPosition
>2853	PtrMemberAccess	foodHolders [ i ] -> getWorldPosition
>2854	Identifier	getWorldPosition
>2855	ArrayIndexing	foodHolders [ i ]
>2856	Identifier	i
>2857	Identifier	foodHolders
>2858	Identifier	in
>2859	Identifier	in
>2860	IdentifierDeclType	bool
>2861	IncDecOp	 
>2862	IncDec	++
>2863	Identifier	i
>2864	Condition	 
>2865	RelationalExpression	i < foodHolders . size ( )
>2866	CallExpression	foodHolders . size ( )
>2867	ArgumentList	 
>2868	Callee	foodHolders . size
>2869	MemberAccess	foodHolders . size
>2870	Identifier	size
>2871	Identifier	foodHolders
>2872	Identifier	i
>2873	ForInit	 
>2874	IdentifierDeclStatement	int i = 0 ;
>2875	IdentifierDecl	i = 0
>2876	AssignmentExpr	i = 0
>2877	PrimaryExpression	0
>2878	Identifier	i
>2879	Identifier	i
>2880	IdentifierDeclType	int
>2881	IdentifierDeclStatement	 
>2882	IdentifierDecl	droppedIn = false
>2883	AssignmentExpr	droppedIn = false
>2884	Identifier	false
>2885	Identifier	false
>2886	Identifier	droppedIn
>2887	IdentifierDeclType	bool
>2888	CompoundStatement	 
>2889	ExpressionStatement	 
>2890	CallExpression	discard ( )
>2891	ArgumentList	 
>2892	Callee	discard
>2893	Identifier	discard
>2894	Condition	 
>2895	OrExpression	wp . x < 40 || wp . y < 40 || wp . x > 760 || wp . y > 560
>2896	OrExpression	wp . y < 40 || wp . x > 760 || wp . y > 560
>2897	OrExpression	wp . x > 760 || wp . y > 560
>2898	RelationalExpression	wp . y > 560
>2899	PrimaryExpression	560
>2900	MemberAccess	wp . y
>2901	Identifier	y
>2902	Identifier	wp
>2903	RelationalExpression	wp . x > 760
>2904	PrimaryExpression	760
>2905	MemberAccess	wp . x
>2906	Identifier	x
>2907	Identifier	wp
>2908	RelationalExpression	wp . y < 40
>2909	PrimaryExpression	40
>2910	MemberAccess	wp . y
>2911	Identifier	y
>2912	Identifier	wp
>2913	RelationalExpression	wp . x < 40
>2914	PrimaryExpression	40
>2915	MemberAccess	wp . x
>2916	Identifier	x
>2917	Identifier	wp
>2918	CompoundStatement	 
>2919	ExpressionStatement	 
>2920	CallExpression	eatMe ( )
>2921	ArgumentList	 
>2922	Callee	eatMe
>2923	Identifier	eatMe
>2924	ExpressionStatement	 
>2925	AssignmentExpr	dsq -> menuSelectDelay = 0.5
>2926	PrimaryExpression	0.5
>2927	PtrMemberAccess	dsq -> menuSelectDelay
>2928	Identifier	menuSelectDelay
>2929	Identifier	dsq
>2930	Condition	 
>2931	CallExpression	( dsq -> game -> lips -> getWorldPosition ( ) - wp ) . isLength2DIn ( 32 )
>2932	ArgumentList	32
>2933	Argument	32
>2934	PrimaryExpression	32
>2935	Callee	( dsq -> game -> lips -> getWorldPosition ( ) - wp ) . isLength2DIn
>2936	MemberAccess	( dsq -> game -> lips -> getWorldPosition ( ) - wp ) . isLength2DIn
>2937	Identifier	isLength2DIn
>2938	AdditiveExpression	dsq -> game -> lips -> getWorldPosition ( ) - wp
>2939	Identifier	wp
>2940	CallExpression	dsq -> game -> lips -> getWorldPosition ( )
>2941	ArgumentList	 
>2942	Callee	dsq -> game -> lips -> getWorldPosition
>2943	PtrMemberAccess	dsq -> game -> lips -> getWorldPosition
>2944	Identifier	getWorldPosition
>2945	PtrMemberAccess	dsq -> game -> lips
>2946	Identifier	lips
>2947	PtrMemberAccess	dsq -> game
>2948	Identifier	game
>2949	Identifier	dsq
>2950	IdentifierDeclStatement	 
>2951	IdentifierDecl	wp = getWorldPosition ( )
>2952	AssignmentExpr	wp = getWorldPosition ( )
>2953	CallExpression	getWorldPosition ( )
>2954	ArgumentList	 
>2955	Callee	getWorldPosition
>2956	Identifier	getWorldPosition
>2957	Identifier	wp
>2958	Identifier	wp
>2959	IdentifierDeclType	Vector
>2960	Condition	 
>2961	UnaryOp	! dsq -> game -> recipeMenu . on
>2962	MemberAccess	dsq -> game -> recipeMenu . on
>2963	Identifier	on
>2964	PtrMemberAccess	dsq -> game -> recipeMenu
>2965	Identifier	recipeMenu
>2966	PtrMemberAccess	dsq -> game
>2967	Identifier	game
>2968	Identifier	dsq
>2969	UnaryOperator	!
>2970	ExpressionStatement	 
>2971	AssignmentExpr	foodSlotIndex = - 1
>2972	UnaryOp	- 1
>2973	PrimaryExpression	1
>2974	UnaryOperator	-
>2975	Identifier	foodSlotIndex
>2976	Condition	 
>2977	UnaryOp	! core -> mouse . buttons . left
>2978	MemberAccess	core -> mouse . buttons . left
>2979	Identifier	left
>2980	MemberAccess	core -> mouse . buttons
>2981	Identifier	buttons
>2982	PtrMemberAccess	core -> mouse
>2983	Identifier	mouse
>2984	Identifier	core
>2985	UnaryOperator	!
>2986	Condition	 
>2987	EqualityExpression	foodSlotIndex == slot
>2988	Identifier	slot
>2989	Identifier	foodSlotIndex
>2990	Condition	 
>2991	AndExpression	alphaMod == 1 && ingredient && ingredient -> amount > 0
>2992	AndExpression	ingredient && ingredient -> amount > 0
>2993	RelationalExpression	ingredient -> amount > 0
>2994	PrimaryExpression	0
>2995	PtrMemberAccess	ingredient -> amount
>2996	Identifier	amount
>2997	Identifier	ingredient
>2998	Identifier	ingredient
>2999	EqualityExpression	alphaMod == 1
>3000	PrimaryExpression	1
>3001	Identifier	alphaMod
>3002	IfStatement	if ( doubleClickDelay > 0 )
>3003	CompoundStatement	 
>3004	IfStatement	if ( doubleClickDelay < 0 )
>3005	ExpressionStatement	 
>3006	AssignmentExpr	doubleClickDelay = 0
>3007	PrimaryExpression	0
>3008	Identifier	doubleClickDelay
>3009	Condition	 
>3010	RelationalExpression	doubleClickDelay < 0
>3011	PrimaryExpression	0
>3012	Identifier	doubleClickDelay
>3013	ExpressionStatement	 
>3014	AssignmentExpr	doubleClickDelay -= dt
>3015	Identifier	dt
>3016	Identifier	doubleClickDelay
>3017	Condition	 
>3018	RelationalExpression	doubleClickDelay > 0
>3019	PrimaryExpression	0
>3020	Identifier	doubleClickDelay
>3021	ExpressionStatement	 
>3022	CallExpression	AquariaGuiQuad 
>3023	ArgumentList	dt
>3024	Argument	dt
>3025	Identifier	dt
>3026	Callee	AquariaGuiQuad 
>3027	Identifier	AquariaGuiQuad 
>3109	FunctionDef	SongSlot 
>3110	ParameterList	int songSlot
>3111	Parameter	 
>3112	Identifier	songSlot
>3113	ParameterType	int
>3114	CompoundStatement	 
>3115	IfStatement	if ( dsq -> continuity . isSongTypeForm ( ( SongType ) dsq -> continuity . getSongTypeBySlot ( songSlot ) ) )
>3116	ElseStatement	else
>3117	ExpressionStatement	 
>3118	AssignmentExpr	scale = Vector ( 0.6 , 0.6 )
>3119	CallExpression	Vector ( 0.6 , 0.6 )
>3120	ArgumentList	0.6
>3121	Argument	0.6
>3122	PrimaryExpression	0.6
>3123	Argument	0.6
>3124	PrimaryExpression	0.6
>3125	Callee	Vector
>3126	Identifier	Vector
>3127	Identifier	scale
>3128	ExpressionStatement	 
>3129	AssignmentExpr	scale = Vector ( 0.9 , 0.9 )
>3130	CallExpression	Vector ( 0.9 , 0.9 )
>3131	ArgumentList	0.9
>3132	Argument	0.9
>3133	PrimaryExpression	0.9
>3134	Argument	0.9
>3135	PrimaryExpression	0.9
>3136	Callee	Vector
>3137	Identifier	Vector
>3138	Identifier	scale
>3139	Condition	 
>3140	CallExpression	dsq -> continuity . isSongTypeForm ( ( SongType ) dsq -> continuity . getSongTypeBySlot ( songSlot ) )
>3141	ArgumentList	( SongType ) dsq -> continuity . getSongTypeBySlot ( songSlot )
>3142	Argument	( SongType ) dsq -> continuity . getSongTypeBySlot ( songSlot )
>3143	CastExpression	( SongType ) dsq -> continuity . getSongTypeBySlot ( songSlot )
>3144	CallExpression	dsq -> continuity . getSongTypeBySlot ( songSlot )
>3145	ArgumentList	songSlot
>3146	Argument	songSlot
>3147	Identifier	songSlot
>3148	Callee	dsq -> continuity . getSongTypeBySlot
>3149	MemberAccess	dsq -> continuity . getSongTypeBySlot
>3150	Identifier	getSongTypeBySlot
>3151	PtrMemberAccess	dsq -> continuity
>3152	Identifier	continuity
>3153	Identifier	dsq
>3154	CastTarget	SongType
>3155	Callee	dsq -> continuity . isSongTypeForm
>3156	MemberAccess	dsq -> continuity . isSongTypeForm
>3157	Identifier	isSongTypeForm
>3158	PtrMemberAccess	dsq -> continuity
>3159	Identifier	continuity
>3160	Identifier	dsq
>3161	ExpressionStatement	 
>3162	AssignmentExpr	mbDown = false
>3163	Identifier	false
>3164	Identifier	mbDown
>3165	ExpressionStatement	 
>3166	CallExpression	addChild ( glow , PM_POINTER )
>3167	ArgumentList	glow
>3168	Argument	PM_POINTER
>3169	Identifier	PM_POINTER
>3170	Argument	glow
>3171	Identifier	glow
>3172	Callee	addChild
>3173	Identifier	addChild
>3174	ExpressionStatement	 
>3175	AssignmentExpr	glow -> alpha = 0
>3176	PrimaryExpression	0
>3177	PtrMemberAccess	glow -> alpha
>3178	Identifier	alpha
>3179	Identifier	glow
>3180	ExpressionStatement	 
>3181	CallExpression	glow -> setBlendType ( RenderObject 
>3182	ArgumentList	RenderObject 
>3183	Argument	RenderObject 
>3184	Identifier	RenderObject 
>3185	Callee	glow -> setBlendType
>3186	PtrMemberAccess	glow -> setBlendType
>3187	Identifier	setBlendType
>3188	Identifier	glow
>3189	ExpressionStatement	 
>3190	CallExpression	glow -> setWidthHeight ( 128 , 128 )
>3191	ArgumentList	128
>3192	Argument	128
>3193	PrimaryExpression	128
>3194	Argument	128
>3195	PrimaryExpression	128
>3196	Callee	glow -> setWidthHeight
>3197	PtrMemberAccess	glow -> setWidthHeight
>3198	Identifier	setWidthHeight
>3199	Identifier	glow
>3200	ExpressionStatement	 
>3201	AssignmentExpr	glow = new Quad ( \"particles/glow\" , Vector ( 0 , 0 ) )
>3202	Expression	\"particles/glow\" , Vector ( 0 , 0 )
>3203	CallExpression	Vector ( 0 , 0 )
>3204	ArgumentList	0
>3205	Argument	0
>3206	PrimaryExpression	0
>3207	Argument	0
>3208	PrimaryExpression	0
>3209	Callee	Vector
>3210	Identifier	Vector
>3211	PrimaryExpression	\"particles/glow\"
>3212	Identifier	glow
>3213	ExpressionStatement	 
>3214	CallExpression	setTexture ( os . str ( ) )
>3215	ArgumentList	os . str ( )
>3216	Argument	os . str ( )
>3217	CallExpression	os . str ( )
>3218	ArgumentList	 
>3219	Callee	os . str
>3220	MemberAccess	os . str
>3221	Identifier	str
>3222	Identifier	os
>3223	Callee	setTexture
>3224	Identifier	setTexture
>3225	ExpressionStatement	 
>3226	ShiftExpression	os << \"Song/SongSlot-\" << songSlot
>3227	ShiftExpression	\"Song/SongSlot-\" << songSlot
>3228	Identifier	songSlot
>3229	PrimaryExpression	\"Song/SongSlot-\"
>3230	Identifier	os
>3231	IdentifierDeclStatement	 
>3232	IdentifierDecl	os
>3233	Identifier	os
>3234	IdentifierDeclType	std 
>3235	ExpressionStatement	 
>3236	AssignmentExpr	songType = dsq -> continuity . getSongTypeBySlot ( songSlot )
>3237	CallExpression	dsq -> continuity . getSongTypeBySlot ( songSlot )
>3238	ArgumentList	songSlot
>3239	Argument	songSlot
>3240	Identifier	songSlot
>3241	Callee	dsq -> continuity . getSongTypeBySlot
>3242	MemberAccess	dsq -> continuity . getSongTypeBySlot
>3243	Identifier	getSongTypeBySlot
>3244	PtrMemberAccess	dsq -> continuity
>3245	Identifier	continuity
>3246	Identifier	dsq
>3247	Identifier	songType
>3269	FunctionDef	SongSlot 
>3270	ParameterList	float dt
>3271	Parameter	 
>3272	Identifier	dt
>3273	ParameterType	float
>3274	ReturnType	void
>3275	CompoundStatement	 
>3276	IfStatement	if ( alpha . x == 1 && alphaMod == 1 && ( ! parent || parent -> alpha . x == 1 ) )
>3277	CompoundStatement	 
>3278	IfStatement	if ( ( core -> mouse . position - getWorldPosition ( ) ) . isLength2DIn ( 24 ) )
>3279	ElseStatement	else
>3280	CompoundStatement	 
>3281	IfStatement	if ( ! dsq -> game -> songLabel -> alpha . isInterpolating ( ) )
>3282	CompoundStatement	 
>3283	ExpressionStatement	 
>3284	CallExpression	dsq -> game -> songLabel -> alpha . interpolateTo ( 0 , 2 )
>3285	ArgumentList	0
>3286	Argument	2
>3287	PrimaryExpression	2
>3288	Argument	0
>3289	PrimaryExpression	0
>3290	Callee	dsq -> game -> songLabel -> alpha . interpolateTo
>3291	MemberAccess	dsq -> game -> songLabel -> alpha . interpolateTo
>3292	Identifier	interpolateTo
>3293	PtrMemberAccess	dsq -> game -> songLabel -> alpha
>3294	Identifier	alpha
>3295	PtrMemberAccess	dsq -> game -> songLabel
>3296	Identifier	songLabel
>3297	PtrMemberAccess	dsq -> game
>3298	Identifier	game
>3299	Identifier	dsq
>3300	Condition	 
>3301	UnaryOp	! dsq -> game -> songLabel -> alpha . isInterpolating ( )
>3302	CallExpression	dsq -> game -> songLabel -> alpha . isInterpolating ( )
>3303	ArgumentList	 
>3304	Callee	dsq -> game -> songLabel -> alpha . isInterpolating
>3305	MemberAccess	dsq -> game -> songLabel -> alpha . isInterpolating
>3306	Identifier	isInterpolating
>3307	PtrMemberAccess	dsq -> game -> songLabel -> alpha
>3308	Identifier	alpha
>3309	PtrMemberAccess	dsq -> game -> songLabel
>3310	Identifier	songLabel
>3311	PtrMemberAccess	dsq -> game
>3312	Identifier	game
>3313	Identifier	dsq
>3314	UnaryOperator	!
>3315	ExpressionStatement	 
>3316	CallExpression	glow -> alpha . interpolateTo ( 0 , 0.2 )
>3317	ArgumentList	0
>3318	Argument	0.2
>3319	PrimaryExpression	0.2
>3320	Argument	0
>3321	PrimaryExpression	0
>3322	Callee	glow -> alpha . interpolateTo
>3323	MemberAccess	glow -> alpha . interpolateTo
>3324	Identifier	interpolateTo
>3325	PtrMemberAccess	glow -> alpha
>3326	Identifier	alpha
>3327	Identifier	glow
>3328	ExpressionStatement	 
>3329	AssignmentExpr	mbDown = false
>3330	Identifier	false
>3331	Identifier	mbDown
>3332	CompoundStatement	 
>3333	ExpressionStatement	 
>3334	CallExpression	glow -> alpha . interpolateTo ( 0.2 , 0.15 )
>3335	ArgumentList	0.2
>3336	Argument	0.15
>3337	PrimaryExpression	0.15
>3338	Argument	0.2
>3339	PrimaryExpression	0.2
>3340	Callee	glow -> alpha . interpolateTo
>3341	MemberAccess	glow -> alpha . interpolateTo
>3342	Identifier	interpolateTo
>3343	PtrMemberAccess	glow -> alpha
>3344	Identifier	alpha
>3345	Identifier	glow
>3346	IfStatement	if ( ! mbDown && anyButton )
>3347	ElseStatement	else
>3348	IfStatement	if ( mbDown && ! anyButton )
>3349	CompoundStatement	 
>3350	IfStatement	if ( ! dsq -> sound -> isPlayingVoice ( ) )
>3351	ExpressionStatement	 
>3352	CallExpression	dsq -> voice ( dsq -> continuity . getVoxForSongSlot ( songSlot ) )
>3353	ArgumentList	dsq -> continuity . getVoxForSongSlot ( songSlot )
>3354	Argument	dsq -> continuity . getVoxForSongSlot ( songSlot )
>3355	CallExpression	dsq -> continuity . getVoxForSongSlot ( songSlot )
>3356	ArgumentList	songSlot
>3357	Argument	songSlot
>3358	Identifier	songSlot
>3359	Callee	dsq -> continuity . getVoxForSongSlot
>3360	MemberAccess	dsq -> continuity . getVoxForSongSlot
>3361	Identifier	getVoxForSongSlot
>3362	PtrMemberAccess	dsq -> continuity
>3363	Identifier	continuity
>3364	Identifier	dsq
>3365	Callee	dsq -> voice
>3366	PtrMemberAccess	dsq -> voice
>3367	Identifier	voice
>3368	Identifier	dsq
>3369	Condition	 
>3370	UnaryOp	! dsq -> sound -> isPlayingVoice ( )
>3371	CallExpression	dsq -> sound -> isPlayingVoice ( )
>3372	ArgumentList	 
>3373	Callee	dsq -> sound -> isPlayingVoice
>3374	PtrMemberAccess	dsq -> sound -> isPlayingVoice
>3375	Identifier	isPlayingVoice
>3376	PtrMemberAccess	dsq -> sound
>3377	Identifier	sound
>3378	Identifier	dsq
>3379	UnaryOperator	!
>3380	ExpressionStatement	 
>3381	CallExpression	dsq -> game -> playSongInMenu ( songType , 1 )
>3382	ArgumentList	songType
>3383	Argument	1
>3384	PrimaryExpression	1
>3385	Argument	songType
>3386	Identifier	songType
>3387	Callee	dsq -> game -> playSongInMenu
>3388	PtrMemberAccess	dsq -> game -> playSongInMenu
>3389	Identifier	playSongInMenu
>3390	PtrMemberAccess	dsq -> game
>3391	Identifier	game
>3392	Identifier	dsq
>3393	ExpressionStatement	 
>3394	AssignmentExpr	mbDown = false
>3395	Identifier	false
>3396	Identifier	mbDown
>3397	Condition	 
>3398	AndExpression	mbDown && ! anyButton
>3399	UnaryOp	! anyButton
>3400	Identifier	anyButton
>3401	UnaryOperator	!
>3402	Identifier	mbDown
>3403	CompoundStatement	 
>3404	ExpressionStatement	 
>3405	AssignmentExpr	mbDown = true
>3406	Identifier	true
>3407	Identifier	mbDown
>3408	Condition	 
>3409	AndExpression	! mbDown && anyButton
>3410	Identifier	anyButton
>3411	UnaryOp	! mbDown
>3412	Identifier	mbDown
>3413	UnaryOperator	!
>3414	IdentifierDeclStatement	 
>3415	IdentifierDecl	anyButton = core -> mouse . buttons . left || core -> mouse . buttons . right
>3416	AssignmentExpr	anyButton = core -> mouse . buttons . left || core -> mouse . buttons . right
>3417	OrExpression	core -> mouse . buttons . left || core -> mouse . buttons . right
>3418	MemberAccess	core -> mouse . buttons . right
>3419	Identifier	right
>3420	MemberAccess	core -> mouse . buttons
>3421	Identifier	buttons
>3422	PtrMemberAccess	core -> mouse
>3423	Identifier	mouse
>3424	Identifier	core
>3425	MemberAccess	core -> mouse . buttons . left
>3426	Identifier	left
>3427	MemberAccess	core -> mouse . buttons
>3428	Identifier	buttons
>3429	PtrMemberAccess	core -> mouse
>3430	Identifier	mouse
>3431	Identifier	core
>3432	Identifier	anyButton
>3433	Identifier	anyButton
>3434	IdentifierDeclType	const bool
>3435	ExpressionStatement	 
>3436	CallExpression	dsq -> game -> songLabel -> alpha . interpolateTo ( 1 , 0.2 )
>3437	ArgumentList	1
>3438	Argument	0.2
>3439	PrimaryExpression	0.2
>3440	Argument	1
>3441	PrimaryExpression	1
>3442	Callee	dsq -> game -> songLabel -> alpha . interpolateTo
>3443	MemberAccess	dsq -> game -> songLabel -> alpha . interpolateTo
>3444	Identifier	interpolateTo
>3445	PtrMemberAccess	dsq -> game -> songLabel -> alpha
>3446	Identifier	alpha
>3447	PtrMemberAccess	dsq -> game -> songLabel
>3448	Identifier	songLabel
>3449	PtrMemberAccess	dsq -> game
>3450	Identifier	game
>3451	Identifier	dsq
>3452	ExpressionStatement	 
>3453	CallExpression	dsq -> game -> songLabel -> setText ( dsq -> continuity . getSongNameBySlot ( songSlot ) )
>3454	ArgumentList	dsq -> continuity . getSongNameBySlot ( songSlot )
>3455	Argument	dsq -> continuity . getSongNameBySlot ( songSlot )
>3456	CallExpression	dsq -> continuity . getSongNameBySlot ( songSlot )
>3457	ArgumentList	songSlot
>3458	Argument	songSlot
>3459	Identifier	songSlot
>3460	Callee	dsq -> continuity . getSongNameBySlot
>3461	MemberAccess	dsq -> continuity . getSongNameBySlot
>3462	Identifier	getSongNameBySlot
>3463	PtrMemberAccess	dsq -> continuity
>3464	Identifier	continuity
>3465	Identifier	dsq
>3466	Callee	dsq -> game -> songLabel -> setText
>3467	PtrMemberAccess	dsq -> game -> songLabel -> setText
>3468	Identifier	setText
>3469	PtrMemberAccess	dsq -> game -> songLabel
>3470	Identifier	songLabel
>3471	PtrMemberAccess	dsq -> game
>3472	Identifier	game
>3473	Identifier	dsq
>3474	ExpressionStatement	 
>3475	CallExpression	dsq -> game -> playSongInMenu ( songType )
>3476	ArgumentList	songType
>3477	Argument	songType
>3478	Identifier	songType
>3479	Callee	dsq -> game -> playSongInMenu
>3480	PtrMemberAccess	dsq -> game -> playSongInMenu
>3481	Identifier	playSongInMenu
>3482	PtrMemberAccess	dsq -> game
>3483	Identifier	game
>3484	Identifier	dsq
>3485	Condition	 
>3486	CallExpression	( core -> mouse . position - getWorldPosition ( ) ) . isLength2DIn ( 24 )
>3487	ArgumentList	24
>3488	Argument	24
>3489	PrimaryExpression	24
>3490	Callee	( core -> mouse . position - getWorldPosition ( ) ) . isLength2DIn
>3491	MemberAccess	( core -> mouse . position - getWorldPosition ( ) ) . isLength2DIn
>3492	Identifier	isLength2DIn
>3493	AdditiveExpression	core -> mouse . position - getWorldPosition ( )
>3494	CallExpression	getWorldPosition ( )
>3495	ArgumentList	 
>3496	Callee	getWorldPosition
>3497	Identifier	getWorldPosition
>3498	MemberAccess	core -> mouse . position
>3499	Identifier	position
>3500	PtrMemberAccess	core -> mouse
>3501	Identifier	mouse
>3502	Identifier	core
>3503	Condition	 
>3504	AndExpression	alpha . x == 1 && alphaMod == 1 && ( ! parent || parent -> alpha . x == 1 )
>3505	AndExpression	alphaMod == 1 && ( ! parent || parent -> alpha . x == 1 )
>3506	OrExpression	! parent || parent -> alpha . x == 1
>3507	EqualityExpression	parent -> alpha . x == 1
>3508	PrimaryExpression	1
>3509	MemberAccess	parent -> alpha . x
>3510	Identifier	x
>3511	PtrMemberAccess	parent -> alpha
>3512	Identifier	alpha
>3513	Identifier	parent
>3514	UnaryOp	! parent
>3515	Identifier	parent
>3516	UnaryOperator	!
>3517	EqualityExpression	alphaMod == 1
>3518	PrimaryExpression	1
>3519	Identifier	alphaMod
>3520	EqualityExpression	alpha . x == 1
>3521	PrimaryExpression	1
>3522	MemberAccess	alpha . x
>3523	Identifier	x
>3524	Identifier	alpha
>3525	ExpressionStatement	 
>3526	CallExpression	AquariaGuiQuad 
>3527	ArgumentList	dt
>3528	Argument	dt
>3529	Identifier	dt
>3530	Callee	AquariaGuiQuad 
>3531	Identifier	AquariaGuiQuad 
>3580	FunctionDef	TreasureSlot 
>3581	ParameterList	int index
>3582	Parameter	 
>3583	Identifier	index
>3584	ParameterType	int
>3585	CompoundStatement	 
>3586	ExpressionStatement	 
>3587	AssignmentExpr	doubleClickTimer = 0
>3588	PrimaryExpression	0
>3589	Identifier	doubleClickTimer
>3590	ExpressionStatement	 
>3591	AssignmentExpr	flag = 0
>3592	PrimaryExpression	0
>3593	Identifier	flag
>3594	ExpressionStatement	 
>3595	AssignmentExpr	mbd = false
>3596	Identifier	false
>3597	Identifier	mbd
>3598	ExpressionStatement	 
>3599	AssignmentExpr	this -> index = index
>3600	Identifier	index
>3601	PtrMemberAccess	this -> index
>3602	Identifier	index
>3603	Identifier	this
>3615	FunctionDef	TreasureSlot 
>3616	ParameterList	float dt
>3617	Parameter	 
>3618	Identifier	dt
>3619	ParameterType	float
>3620	ReturnType	void
>3621	CompoundStatement	 
>3622	IfStatement	if ( alphaMod == 1 && alpha . x == 1 && flag != 0 )
>3623	ElseStatement	else
>3624	CompoundStatement	 
>3625	ExpressionStatement	 
>3626	CallExpression	scale . interpolateTo ( Vector ( 1 , 1 ) , 0.001 )
>3627	ArgumentList	Vector ( 1 , 1 )
>3628	Argument	0.001
>3629	PrimaryExpression	0.001
>3630	Argument	Vector ( 1 , 1 )
>3631	CallExpression	Vector ( 1 , 1 )
>3632	ArgumentList	1
>3633	Argument	1
>3634	PrimaryExpression	1
>3635	Argument	1
>3636	PrimaryExpression	1
>3637	Callee	Vector
>3638	Identifier	Vector
>3639	Callee	scale . interpolateTo
>3640	MemberAccess	scale . interpolateTo
>3641	Identifier	interpolateTo
>3642	Identifier	scale
>3643	ExpressionStatement	 
>3644	AssignmentExpr	mbd = false
>3645	Identifier	false
>3646	Identifier	mbd
>3647	CompoundStatement	 
>3648	IfStatement	if ( ( core -> mouse . position - getWorldPosition ( ) ) . isLength2DIn ( 18 ) )
>3649	ElseStatement	else
>3650	CompoundStatement	 
>3651	ExpressionStatement	 
>3652	CallExpression	scale . interpolateTo ( Vector ( 1 , 1 ) , 0.1 )
>3653	ArgumentList	Vector ( 1 , 1 )
>3654	Argument	0.1
>3655	PrimaryExpression	0.1
>3656	Argument	Vector ( 1 , 1 )
>3657	CallExpression	Vector ( 1 , 1 )
>3658	ArgumentList	1
>3659	Argument	1
>3660	PrimaryExpression	1
>3661	Argument	1
>3662	PrimaryExpression	1
>3663	Callee	Vector
>3664	Identifier	Vector
>3665	Callee	scale . interpolateTo
>3666	MemberAccess	scale . interpolateTo
>3667	Identifier	interpolateTo
>3668	Identifier	scale
>3669	ExpressionStatement	 
>3670	AssignmentExpr	mbd = false
>3671	Identifier	false
>3672	Identifier	mbd
>3673	CompoundStatement	 
>3674	IfStatement	if ( core -> mouse . buttons . left && ! mbd )
>3675	ElseStatement	else
>3676	IfStatement	if ( ! core -> mouse . buttons . left && mbd )
>3677	CompoundStatement	 
>3678	IfStatement	if ( doubleClickTimer > 0 )
>3679	ElseStatement	else
>3680	CompoundStatement	 
>3681	ExpressionStatement	 
>3682	CallExpression	debugLog ( os . str ( ) )
>3683	ArgumentList	os . str ( )
>3684	Argument	os . str ( )
>3685	CallExpression	os . str ( )
>3686	ArgumentList	 
>3687	Callee	os . str
>3688	MemberAccess	os . str
>3689	Identifier	str
>3690	Identifier	os
>3691	Callee	debugLog
>3692	Identifier	debugLog
>3693	ExpressionStatement	 
>3694	ShiftExpression	os << \"treasure flag
>3695	ShiftExpression	\"treasure flag
>3696	ShiftExpression	flag << \" desc
>3697	ShiftExpression	\" desc
>3698	Identifier	treasureDesc
>3699	PrimaryExpression	\" desc
>3700	Identifier	flag
>3701	PrimaryExpression	\"treasure flag
>3702	Identifier	os
>3703	IdentifierDeclStatement	 
>3704	IdentifierDecl	os
>3705	Identifier	os
>3706	IdentifierDeclType	std 
>3707	ExpressionStatement	 
>3708	AssignmentExpr	doubleClickTimer = 0.2
>3709	PrimaryExpression	0.2
>3710	Identifier	doubleClickTimer
>3711	ExpressionStatement	 
>3712	AssignmentExpr	selectedTreasureFlag = flag
>3713	Identifier	flag
>3714	Identifier	selectedTreasureFlag
>3715	ExpressionStatement	 
>3716	AssignmentExpr	dsq -> game -> use -> alpha = dsq -> continuity . treasureData [ flag ] . use
>3717	MemberAccess	dsq -> continuity . treasureData [ flag ] . use
>3718	Identifier	use
>3719	ArrayIndexing	dsq -> continuity . treasureData [ flag ]
>3720	Identifier	flag
>3721	MemberAccess	dsq -> continuity . treasureData
>3722	Identifier	treasureData
>3723	PtrMemberAccess	dsq -> continuity
>3724	Identifier	continuity
>3725	Identifier	dsq
>3726	PtrMemberAccess	dsq -> game -> use -> alpha
>3727	Identifier	alpha
>3728	PtrMemberAccess	dsq -> game -> use
>3729	Identifier	use
>3730	PtrMemberAccess	dsq -> game
>3731	Identifier	game
>3732	Identifier	dsq
>3733	ExpressionStatement	 
>3734	AssignmentExpr	dsq -> game -> treasureDescription -> alpha = 1
>3735	PrimaryExpression	1
>3736	PtrMemberAccess	dsq -> game -> treasureDescription -> alpha
>3737	Identifier	alpha
>3738	PtrMemberAccess	dsq -> game -> treasureDescription
>3739	Identifier	treasureDescription
>3740	PtrMemberAccess	dsq -> game
>3741	Identifier	game
>3742	Identifier	dsq
>3743	ExpressionStatement	 
>3744	CallExpression	dsq -> game -> treasureDescription -> setText ( treasureDesc , Vector ( 400 , 450 ) , 400 )
>3745	ArgumentList	treasureDesc
>3746	Argument	400
>3747	PrimaryExpression	400
>3748	Argument	Vector ( 400 , 450 )
>3749	CallExpression	Vector ( 400 , 450 )
>3750	ArgumentList	400
>3751	Argument	450
>3752	PrimaryExpression	450
>3753	Argument	400
>3754	PrimaryExpression	400
>3755	Callee	Vector
>3756	Identifier	Vector
>3757	Argument	treasureDesc
>3758	Identifier	treasureDesc
>3759	Callee	dsq -> game -> treasureDescription -> setText
>3760	PtrMemberAccess	dsq -> game -> treasureDescription -> setText
>3761	Identifier	setText
>3762	PtrMemberAccess	dsq -> game -> treasureDescription
>3763	Identifier	treasureDescription
>3764	PtrMemberAccess	dsq -> game
>3765	Identifier	game
>3766	Identifier	dsq
>3767	ExpressionStatement	 
>3768	AssignmentExpr	dsq -> game -> treasureCloseUp -> alpha = 1
>3769	PrimaryExpression	1
>3770	PtrMemberAccess	dsq -> game -> treasureCloseUp -> alpha
>3771	Identifier	alpha
>3772	PtrMemberAccess	dsq -> game -> treasureCloseUp
>3773	Identifier	treasureCloseUp
>3774	PtrMemberAccess	dsq -> game
>3775	Identifier	game
>3776	Identifier	dsq
>3777	ExpressionStatement	 
>3778	CallExpression	dsq -> game -> treasureCloseUp -> setTexture ( dsq -> continuity . treasureData [ flag ] . gfx )
>3779	ArgumentList	dsq -> continuity . treasureData [ flag ] . gfx
>3780	Argument	dsq -> continuity . treasureData [ flag ] . gfx
>3781	MemberAccess	dsq -> continuity . treasureData [ flag ] . gfx
>3782	Identifier	gfx
>3783	ArrayIndexing	dsq -> continuity . treasureData [ flag ]
>3784	Identifier	flag
>3785	MemberAccess	dsq -> continuity . treasureData
>3786	Identifier	treasureData
>3787	PtrMemberAccess	dsq -> continuity
>3788	Identifier	continuity
>3789	Identifier	dsq
>3790	Callee	dsq -> game -> treasureCloseUp -> setTexture
>3791	PtrMemberAccess	dsq -> game -> treasureCloseUp -> setTexture
>3792	Identifier	setTexture
>3793	PtrMemberAccess	dsq -> game -> treasureCloseUp
>3794	Identifier	treasureCloseUp
>3795	PtrMemberAccess	dsq -> game
>3796	Identifier	game
>3797	Identifier	dsq
>3798	ExpressionStatement	 
>3799	AssignmentExpr	dsq -> game -> treasureLabel -> alpha = 1
>3800	PrimaryExpression	1
>3801	PtrMemberAccess	dsq -> game -> treasureLabel -> alpha
>3802	Identifier	alpha
>3803	PtrMemberAccess	dsq -> game -> treasureLabel
>3804	Identifier	treasureLabel
>3805	PtrMemberAccess	dsq -> game
>3806	Identifier	game
>3807	Identifier	dsq
>3808	ExpressionStatement	 
>3809	CallExpression	dsq -> game -> treasureLabel -> setText ( treasureName )
>3810	ArgumentList	treasureName
>3811	Argument	treasureName
>3812	Identifier	treasureName
>3813	Callee	dsq -> game -> treasureLabel -> setText
>3814	PtrMemberAccess	dsq -> game -> treasureLabel -> setText
>3815	Identifier	setText
>3816	PtrMemberAccess	dsq -> game -> treasureLabel
>3817	Identifier	treasureLabel
>3818	PtrMemberAccess	dsq -> game
>3819	Identifier	game
>3820	Identifier	dsq
>3821	ExpressionStatement	 
>3822	CallExpression	dsq -> spawnParticleEffect ( \"menu-switch\" , worldRightCenter , 0 , 0 , LR_HUD3 , 1 )
>3823	ArgumentList	\"menu-switch\"
>3824	Argument	1
>3825	PrimaryExpression	1
>3826	Argument	LR_HUD3
>3827	Identifier	LR_HUD3
>3828	Argument	0
>3829	PrimaryExpression	0
>3830	Argument	0
>3831	PrimaryExpression	0
>3832	Argument	worldRightCenter
>3833	Identifier	worldRightCenter
>3834	Argument	\"menu-switch\"
>3835	PrimaryExpression	\"menu-switch\"
>3836	Callee	dsq -> spawnParticleEffect
>3837	PtrMemberAccess	dsq -> spawnParticleEffect
>3838	Identifier	spawnParticleEffect
>3839	Identifier	dsq
>3840	ExpressionStatement	 
>3841	CallExpression	dsq -> sound -> playSfx ( \"treasure-select\" , 0.5 )
>3842	ArgumentList	\"treasure-select\"
>3843	Argument	0.5
>3844	PrimaryExpression	0.5
>3845	Argument	\"treasure-select\"
>3846	PrimaryExpression	\"treasure-select\"
>3847	Callee	dsq -> sound -> playSfx
>3848	PtrMemberAccess	dsq -> sound -> playSfx
>3849	Identifier	playSfx
>3850	PtrMemberAccess	dsq -> sound
>3851	Identifier	sound
>3852	Identifier	dsq
>3853	CompoundStatement	 
>3854	ExpressionStatement	 
>3855	CallExpression	dsq -> game -> onUseTreasure ( flag )
>3856	ArgumentList	flag
>3857	Argument	flag
>3858	Identifier	flag
>3859	Callee	dsq -> game -> onUseTreasure
>3860	PtrMemberAccess	dsq -> game -> onUseTreasure
>3861	Identifier	onUseTreasure
>3862	PtrMemberAccess	dsq -> game
>3863	Identifier	game
>3864	Identifier	dsq
>3865	ExpressionStatement	 
>3866	AssignmentExpr	doubleClickTimer = 0
>3867	PrimaryExpression	0
>3868	Identifier	doubleClickTimer
>3869	Condition	 
>3870	RelationalExpression	doubleClickTimer > 0
>3871	PrimaryExpression	0
>3872	Identifier	doubleClickTimer
>3873	ExpressionStatement	 
>3874	AssignmentExpr	mbd = false
>3875	Identifier	false
>3876	Identifier	mbd
>3877	Condition	 
>3878	AndExpression	! core -> mouse . buttons . left && mbd
>3879	Identifier	mbd
>3880	UnaryOp	! core -> mouse . buttons . left
>3881	MemberAccess	core -> mouse . buttons . left
>3882	Identifier	left
>3883	MemberAccess	core -> mouse . buttons
>3884	Identifier	buttons
>3885	PtrMemberAccess	core -> mouse
>3886	Identifier	mouse
>3887	Identifier	core
>3888	UnaryOperator	!
>3889	CompoundStatement	 
>3890	ExpressionStatement	 
>3891	AssignmentExpr	mbd = true
>3892	Identifier	true
>3893	Identifier	mbd
>3894	Condition	 
>3895	AndExpression	core -> mouse . buttons . left && ! mbd
>3896	UnaryOp	! mbd
>3897	Identifier	mbd
>3898	UnaryOperator	!
>3899	MemberAccess	core -> mouse . buttons . left
>3900	Identifier	left
>3901	MemberAccess	core -> mouse . buttons
>3902	Identifier	buttons
>3903	PtrMemberAccess	core -> mouse
>3904	Identifier	mouse
>3905	Identifier	core
>3906	ExpressionStatement	 
>3907	CallExpression	scale . interpolateTo ( Vector ( 1.2 , 1.2 ) , 0.1 )
>3908	ArgumentList	Vector ( 1.2 , 1.2 )
>3909	Argument	0.1
>3910	PrimaryExpression	0.1
>3911	Argument	Vector ( 1.2 , 1.2 )
>3912	CallExpression	Vector ( 1.2 , 1.2 )
>3913	ArgumentList	1.2
>3914	Argument	1.2
>3915	PrimaryExpression	1.2
>3916	Argument	1.2
>3917	PrimaryExpression	1.2
>3918	Callee	Vector
>3919	Identifier	Vector
>3920	Callee	scale . interpolateTo
>3921	MemberAccess	scale . interpolateTo
>3922	Identifier	interpolateTo
>3923	Identifier	scale
>3924	Condition	 
>3925	CallExpression	( core -> mouse . position - getWorldPosition ( ) ) . isLength2DIn ( 18 )
>3926	ArgumentList	18
>3927	Argument	18
>3928	PrimaryExpression	18
>3929	Callee	( core -> mouse . position - getWorldPosition ( ) ) . isLength2DIn
>3930	MemberAccess	( core -> mouse . position - getWorldPosition ( ) ) . isLength2DIn
>3931	Identifier	isLength2DIn
>3932	AdditiveExpression	core -> mouse . position - getWorldPosition ( )
>3933	CallExpression	getWorldPosition ( )
>3934	ArgumentList	 
>3935	Callee	getWorldPosition
>3936	Identifier	getWorldPosition
>3937	MemberAccess	core -> mouse . position
>3938	Identifier	position
>3939	PtrMemberAccess	core -> mouse
>3940	Identifier	mouse
>3941	Identifier	core
>3942	Condition	 
>3943	AndExpression	alphaMod == 1 && alpha . x == 1 && flag != 0
>3944	AndExpression	alpha . x == 1 && flag != 0
>3945	EqualityExpression	flag != 0
>3946	PrimaryExpression	0
>3947	Identifier	flag
>3948	EqualityExpression	alpha . x == 1
>3949	PrimaryExpression	1
>3950	MemberAccess	alpha . x
>3951	Identifier	x
>3952	Identifier	alpha
>3953	EqualityExpression	alphaMod == 1
>3954	PrimaryExpression	1
>3955	Identifier	alphaMod
>3956	IfStatement	if ( doubleClickTimer < 0 )
>3957	ExpressionStatement	 
>3958	AssignmentExpr	doubleClickTimer = 0
>3959	PrimaryExpression	0
>3960	Identifier	doubleClickTimer
>3961	Condition	 
>3962	RelationalExpression	doubleClickTimer < 0
>3963	PrimaryExpression	0
>3964	Identifier	doubleClickTimer
>3965	ExpressionStatement	 
>3966	AssignmentExpr	doubleClickTimer -= dt
>3967	Identifier	dt
>3968	Identifier	doubleClickTimer
>3969	ExpressionStatement	 
>3970	CallExpression	AquariaGuiQuad 
>3971	ArgumentList	dt
>3972	Argument	dt
>3973	Identifier	dt
>3974	Callee	AquariaGuiQuad 
>3975	Identifier	AquariaGuiQuad 
>4032	FunctionDef	TreasureSlot 
>4033	ParameterList	 
>4034	ReturnType	void
>4035	CompoundStatement	 
>4036	IfStatement	if ( flag >= FLAG_COLLECTIBLE_START && flag < FLAG_COLLECTIBLE_END && dsq -> continuity . getFlag ( flag ) > 0 )
>4037	ElseStatement	else
>4038	CompoundStatement	 
>4039	ExpressionStatement	 
>4040	CallExpression	setWidthHeight ( 48 )
>4041	ArgumentList	48
>4042	Argument	48
>4043	PrimaryExpression	48
>4044	Callee	setWidthHeight
>4045	Identifier	setWidthHeight
>4046	ExpressionStatement	 
>4047	CallExpression	setTexture ( \"gui/wok\" )
>4048	ArgumentList	\"gui/wok\"
>4049	Argument	\"gui/wok\"
>4050	PrimaryExpression	\"gui/wok\"
>4051	Callee	setTexture
>4052	Identifier	setTexture
>4053	ExpressionStatement	 
>4054	AssignmentExpr	alphaMod = 1
>4055	PrimaryExpression	1
>4056	Identifier	alphaMod
>4057	ExpressionStatement	 
>4058	AssignmentExpr	flag = 0
>4059	PrimaryExpression	0
>4060	Identifier	flag
>4061	CompoundStatement	 
>4062	ExpressionStatement	 
>4063	AssignmentExpr	alphaMod = 1
>4064	PrimaryExpression	1
>4065	Identifier	alphaMod
>4066	IfStatement	if ( p1 != std 
>4067	CompoundStatement	 
>4068	IfStatement	if ( p1 != std 
>4069	CompoundStatement	 
>4070	ExpressionStatement	 
>4071	AssignmentExpr	treasureDesc = parse . substr ( p1 , p2 - p1 )
>4072	CallExpression	parse . substr ( p1 , p2 - p1 )
>4073	ArgumentList	p1
>4074	Argument	p2 - p1
>4075	AdditiveExpression	p2 - p1
>4076	Identifier	p1
>4077	Identifier	p2
>4078	Argument	p1
>4079	Identifier	p1
>4080	Callee	parse . substr
>4081	MemberAccess	parse . substr
>4082	Identifier	substr
>4083	Identifier	parse
>4084	Identifier	treasureDesc
>4085	ExpressionStatement	 
>4086	AssignmentExpr	p2 = parse . find_last_of ( ']' )
>4087	CallExpression	parse . find_last_of ( ']' )
>4088	ArgumentList	']'
>4089	Argument	']'
>4090	PrimaryExpression	']'
>4091	Callee	parse . find_last_of
>4092	MemberAccess	parse . find_last_of
>4093	Identifier	find_last_of
>4094	Identifier	parse
>4095	Identifier	p2
>4096	ExpressionStatement	 
>4097	IncDecOp	p1 ++
>4098	IncDec	++
>4099	Identifier	p1
>4100	Condition	 
>4101	EqualityExpression	p1 != std 
>4102	Identifier	std 
>4103	Identifier	p1
>4104	ExpressionStatement	 
>4105	AssignmentExpr	p1 = parse . find_last_of ( '[' )
>4106	CallExpression	parse . find_last_of ( '[' )
>4107	ArgumentList	'['
>4108	Argument	'['
>4109	PrimaryExpression	'['
>4110	Callee	parse . find_last_of
>4111	MemberAccess	parse . find_last_of
>4112	Identifier	find_last_of
>4113	Identifier	parse
>4114	Identifier	p1
>4115	ExpressionStatement	 
>4116	AssignmentExpr	treasureName = parse . substr ( p1 , p2 - p1 )
>4117	CallExpression	parse . substr ( p1 , p2 - p1 )
>4118	ArgumentList	p1
>4119	Argument	p2 - p1
>4120	AdditiveExpression	p2 - p1
>4121	Identifier	p1
>4122	Identifier	p2
>4123	Argument	p1
>4124	Identifier	p1
>4125	Callee	parse . substr
>4126	MemberAccess	parse . substr
>4127	Identifier	substr
>4128	Identifier	parse
>4129	Identifier	treasureName
>4130	IdentifierDeclStatement	 
>4131	IdentifierDecl	p2 = parse . find_first_of ( ']' )
>4132	AssignmentExpr	p2 = parse . find_first_of ( ']' )
>4133	CallExpression	parse . find_first_of ( ']' )
>4134	ArgumentList	']'
>4135	Argument	']'
>4136	PrimaryExpression	']'
>4137	Callee	parse . find_first_of
>4138	MemberAccess	parse . find_first_of
>4139	Identifier	find_first_of
>4140	Identifier	parse
>4141	Identifier	p2
>4142	Identifier	p2
>4143	IdentifierDeclType	int
>4144	ExpressionStatement	 
>4145	IncDecOp	p1 ++
>4146	IncDec	++
>4147	Identifier	p1
>4148	Condition	 
>4149	EqualityExpression	p1 != std 
>4150	Identifier	std 
>4151	Identifier	p1
>4152	IdentifierDeclStatement	 
>4153	IdentifierDecl	p1 = parse . find_first_of ( '[' )
>4154	AssignmentExpr	p1 = parse . find_first_of ( '[' )
>4155	CallExpression	parse . find_first_of ( '[' )
>4156	ArgumentList	'['
>4157	Argument	'['
>4158	PrimaryExpression	'['
>4159	Callee	parse . find_first_of
>4160	MemberAccess	parse . find_first_of
>4161	Identifier	find_first_of
>4162	Identifier	parse
>4163	Identifier	p1
>4164	Identifier	p1
>4165	IdentifierDeclType	int
>4166	IdentifierDeclStatement	 
>4167	IdentifierDecl	parse = dsq -> continuity . stringBank . get ( flag )
>4168	AssignmentExpr	parse = dsq -> continuity . stringBank . get ( flag )
>4169	CallExpression	dsq -> continuity . stringBank . get ( flag )
>4170	ArgumentList	flag
>4171	Argument	flag
>4172	Identifier	flag
>4173	Callee	dsq -> continuity . stringBank . get
>4174	MemberAccess	dsq -> continuity . stringBank . get
>4175	Identifier	get
>4176	MemberAccess	dsq -> continuity . stringBank
>4177	Identifier	stringBank
>4178	PtrMemberAccess	dsq -> continuity
>4179	Identifier	continuity
>4180	Identifier	dsq
>4181	Identifier	parse
>4182	Identifier	parse
>4183	IdentifierDeclType	std 
>4184	ExpressionStatement	 
>4185	CallExpression	setWidthHeight ( w * scl , h * scl )
>4186	ArgumentList	w * scl
>4187	Argument	h * scl
>4188	MultiplicativeExpression	h * scl
>4189	Identifier	scl
>4190	Identifier	h
>4191	Argument	w * scl
>4192	MultiplicativeExpression	w * scl
>4193	Identifier	scl
>4194	Identifier	w
>4195	Callee	setWidthHeight
>4196	Identifier	setWidthHeight
>4197	IfStatement	if ( w > h )
>4198	ElseStatement	else
>4199	CompoundStatement	 
>4200	ExpressionStatement	 
>4201	AssignmentExpr	w = ( width * sz ) / height
>4202	MultiplicativeExpression	( width * sz ) / height
>4203	Identifier	height
>4204	MultiplicativeExpression	width * sz
>4205	Identifier	sz
>4206	Identifier	width
>4207	Identifier	w
>4208	ExpressionStatement	 
>4209	AssignmentExpr	h = sz
>4210	Identifier	sz
>4211	Identifier	h
>4212	CompoundStatement	 
>4213	ExpressionStatement	 
>4214	AssignmentExpr	h = ( height * sz ) / width
>4215	MultiplicativeExpression	( height * sz ) / width
>4216	Identifier	width
>4217	MultiplicativeExpression	height * sz
>4218	Identifier	sz
>4219	Identifier	height
>4220	Identifier	h
>4221	ExpressionStatement	 
>4222	AssignmentExpr	w = sz
>4223	Identifier	sz
>4224	Identifier	w
>4225	Condition	 
>4226	RelationalExpression	w > h
>4227	Identifier	h
>4228	Identifier	w
>4229	IdentifierDeclStatement	 
>4230	IdentifierDecl	sz = 50
>4231	AssignmentExpr	sz = 50
>4232	PrimaryExpression	50
>4233	Identifier	sz
>4234	Identifier	sz
>4235	IdentifierDeclType	float
>4236	IdentifierDeclStatement	 
>4237	IdentifierDecl	h = height
>4238	AssignmentExpr	h = height
>4239	Identifier	height
>4240	Identifier	height
>4241	Identifier	h
>4242	IdentifierDeclType	float
>4243	IdentifierDeclStatement	 
>4244	IdentifierDecl	w = width
>4245	AssignmentExpr	w = width
>4246	Identifier	width
>4247	Identifier	width
>4248	Identifier	w
>4249	IdentifierDeclType	float
>4250	IdentifierDeclStatement	 
>4251	IdentifierDecl	scl = dsq -> continuity . treasureData [ flag ] . sz
>4252	AssignmentExpr	scl = dsq -> continuity . treasureData [ flag ] . sz
>4253	MemberAccess	dsq -> continuity . treasureData [ flag ] . sz
>4254	Identifier	sz
>4255	ArrayIndexing	dsq -> continuity . treasureData [ flag ]
>4256	Identifier	flag
>4257	MemberAccess	dsq -> continuity . treasureData
>4258	Identifier	treasureData
>4259	PtrMemberAccess	dsq -> continuity
>4260	Identifier	continuity
>4261	Identifier	dsq
>4262	Identifier	scl
>4263	Identifier	scl
>4264	IdentifierDeclType	float
>4265	ExpressionStatement	 
>4266	CallExpression	setTexture ( dsq -> continuity . treasureData [ flag ] . gfx )
>4267	ArgumentList	dsq -> continuity . treasureData [ flag ] . gfx
>4268	Argument	dsq -> continuity . treasureData [ flag ] . gfx
>4269	MemberAccess	dsq -> continuity . treasureData [ flag ] . gfx
>4270	Identifier	gfx
>4271	ArrayIndexing	dsq -> continuity . treasureData [ flag ]
>4272	Identifier	flag
>4273	MemberAccess	dsq -> continuity . treasureData
>4274	Identifier	treasureData
>4275	PtrMemberAccess	dsq -> continuity
>4276	Identifier	continuity
>4277	Identifier	dsq
>4278	Callee	setTexture
>4279	Identifier	setTexture
>4280	Condition	 
>4281	AndExpression	flag >= FLAG_COLLECTIBLE_START && flag < FLAG_COLLECTIBLE_END && dsq -> continuity . getFlag ( flag ) > \
>4282	AndExpression	flag < FLAG_COLLECTIBLE_END && dsq -> continuity . getFlag ( flag ) > 0
>4283	RelationalExpression	dsq -> continuity . getFlag ( flag ) > 0
>4284	PrimaryExpression	0
>4285	CallExpression	dsq -> continuity . getFlag ( flag )
>4286	ArgumentList	flag
>4287	Argument	flag
>4288	Identifier	flag
>4289	Callee	dsq -> continuity . getFlag
>4290	MemberAccess	dsq -> continuity . getFlag
>4291	Identifier	getFlag
>4292	PtrMemberAccess	dsq -> continuity
>4293	Identifier	continuity
>4294	Identifier	dsq
>4295	RelationalExpression	flag < FLAG_COLLECTIBLE_END
>4296	Identifier	FLAG_COLLECTIBLE_END
>4297	Identifier	flag
>4298	RelationalExpression	flag >= FLAG_COLLECTIBLE_START
>4299	Identifier	FLAG_COLLECTIBLE_START
>4300	Identifier	flag
>4301	ExpressionStatement	 
>4302	AssignmentExpr	flag = ( game -> currentTreasurePage * treasurePageSize ) + index + treasureFlagStart
>4303	AdditiveExpression	( game -> currentTreasurePage * treasurePageSize ) + index + treasureFlagStart
>4304	AdditiveExpression	index + treasureFlagStart
>4305	Identifier	treasureFlagStart
>4306	Identifier	index
>4307	MultiplicativeExpression	game -> currentTreasurePage * treasurePageSize
>4308	Identifier	treasurePageSize
>4309	PtrMemberAccess	game -> currentTreasurePage
>4310	Identifier	currentTreasurePage
>4311	Identifier	game
>4312	Identifier	flag
>4354	FunctionDef	Game 
>4355	ParameterList	const Vector & pos , int radius
>4356	Parameter	 
>4357	Identifier	radius
>4358	ParameterType	int
>4359	Parameter	 
>4360	Identifier	pos
>4361	ParameterType	const Vector &
>4362	ReturnType	Ingredient *
>4363	CompoundStatement	 
>4364	ReturnStatement	 
>4365	Identifier	returnIngredient
>4366	ForStatement	for ( Ingredients 
>4367	CompoundStatement	 
>4368	IfStatement	if ( len <= r2 && ( closest == - 1 || len < closest ) )
>4369	CompoundStatement	 
>4370	ExpressionStatement	 
>4371	AssignmentExpr	returnIngredient = ( * i )
>4372	UnaryOp	* i
>4373	Identifier	i
>4374	UnaryOperator	*
>4375	Identifier	returnIngredient
>4376	ExpressionStatement	 
>4377	AssignmentExpr	closest = len
>4378	Identifier	len
>4379	Identifier	closest
>4380	Condition	 
>4381	AndExpression	len <= r2 && ( closest == - 1 || len < closest )
>4382	OrExpression	closest == - 1 || len < closest
>4383	RelationalExpression	len < closest
>4384	Identifier	closest
>4385	Identifier	len
>4386	EqualityExpression	closest == - 1
>4387	UnaryOp	- 1
>4388	PrimaryExpression	1
>4389	UnaryOperator	-
>4390	Identifier	closest
>4391	RelationalExpression	len <= r2
>4392	Identifier	r2
>4393	Identifier	len
>4394	IdentifierDeclStatement	 
>4395	IdentifierDecl	len = ( pos - ( * i ) -> position ) . getSquaredLength2D ( )
>4396	AssignmentExpr	len = ( pos - ( * i ) -> position ) . getSquaredLength2D ( )
>4397	CallExpression	( pos - ( * i ) -> position ) . getSquaredLength2D ( )
>4398	ArgumentList	 
>4399	Callee	( pos - ( * i ) -> position ) . getSquaredLength2D
>4400	MemberAccess	( pos - ( * i ) -> position ) . getSquaredLength2D
>4401	Identifier	getSquaredLength2D
>4402	AdditiveExpression	pos - ( * i ) -> position
>4403	PtrMemberAccess	( * i ) -> position
>4404	Identifier	position
>4405	UnaryOp	* i
>4406	Identifier	i
>4407	UnaryOperator	*
>4408	Identifier	pos
>4409	Identifier	len
>4410	Identifier	len
>4411	IdentifierDeclType	int
>4412	IncDecOp	 
>4413	IncDec	++
>4414	Identifier	i
>4415	Condition	 
>4416	EqualityExpression	i != ingredients . end ( )
>4417	CallExpression	ingredients . end ( )
>4418	ArgumentList	 
>4419	Callee	ingredients . end
>4420	MemberAccess	ingredients . end
>4421	Identifier	end
>4422	Identifier	ingredients
>4423	Identifier	i
>4424	ForInit	 
>4425	IdentifierDeclStatement	Ingredients 
>4426	IdentifierDecl	i = ingredients . begin ( )
>4427	AssignmentExpr	i = ingredients . begin ( )
>4428	CallExpression	ingredients . begin ( )
>4429	ArgumentList	 
>4430	Callee	ingredients . begin
>4431	MemberAccess	ingredients . begin
>4432	Identifier	begin
>4433	Identifier	ingredients
>4434	Identifier	i
>4435	Identifier	i
>4436	IdentifierDeclType	Ingredients 
>4437	IdentifierDeclStatement	 
>4438	IdentifierDecl	* returnIngredient = 0
>4439	AssignmentExpr	* returnIngredient = 0
>4440	PrimaryExpression	0
>4441	Identifier	returnIngredient
>4442	Identifier	returnIngredient
>4443	IdentifierDeclType	Ingredient *
>4444	IdentifierDeclStatement	 
>4445	IdentifierDecl	r2 = sqr ( radius )
>4446	AssignmentExpr	r2 = sqr ( radius )
>4447	CallExpression	sqr ( radius )
>4448	ArgumentList	radius
>4449	Argument	radius
>4450	Identifier	radius
>4451	Callee	sqr
>4452	Identifier	sqr
>4453	Identifier	r2
>4454	Identifier	r2
>4455	IdentifierDeclType	int
>4456	IdentifierDeclStatement	 
>4457	IdentifierDecl	closest = - 1
>4458	AssignmentExpr	closest = - 1
>4459	UnaryOp	- 1
>4460	PrimaryExpression	1
>4461	UnaryOperator	-
>4462	Identifier	closest
>4463	Identifier	closest
>4464	IdentifierDeclType	int
>4483	FunctionDef	Game 
>4484	ParameterList	const Vector & pos , int radius , Entity * ignore , EntityType et , DamageType dt , int lrStart , int lrEnd
>4485	Parameter	 
>4486	Identifier	lrEnd
>4487	ParameterType	int
>4488	Parameter	 
>4489	Identifier	lrStart
>4490	ParameterType	int
>4491	Parameter	 
>4492	Identifier	dt
>4493	ParameterType	DamageType
>4494	Parameter	 
>4495	Identifier	et
>4496	ParameterType	EntityType
>4497	Parameter	 
>4498	Identifier	ignore
>4499	ParameterType	Entity *
>4500	Parameter	 
>4501	Identifier	radius
>4502	ParameterType	int
>4503	Parameter	 
>4504	Identifier	pos
>4505	ParameterType	const Vector &
>4506	ReturnType	Entity *
>4507	CompoundStatement	 
>4508	ReturnStatement	 
>4509	Identifier	closest
>4510	CompoundStatement	 
>4511	IfStatement	if ( dist <= sqrRadius )
>4512	CompoundStatement	 
>4513	IfStatement	if ( e != ignore && e -> isPresent ( ) )
>4514	CompoundStatement	 
>4515	IfStatement	if ( lrStart == - 1 || lrEnd == - 1 || ( e -> layer >= lrStart && e -> layer <= lrEnd ) )
>4516	CompoundStatement	 
>4517	IfStatement	if ( et == ET_NOTYPE || e -> getEntityType ( ) == et )
>4518	CompoundStatement	 
>4519	IfStatement	if ( dt == DT_NONE || e -> isDamageTarget ( dt ) )
>4520	CompoundStatement	 
>4521	IfStatement	if ( sml == - 1 || dist < sml )
>4522	CompoundStatement	 
>4523	ExpressionStatement	 
>4524	AssignmentExpr	sml = dist
>4525	Identifier	dist
>4526	Identifier	sml
>4527	ExpressionStatement	 
>4528	AssignmentExpr	closest = e
>4529	Identifier	e
>4530	Identifier	closest
>4531	Condition	 
>4532	OrExpression	sml == - 1 || dist < sml
>4533	RelationalExpression	dist < sml
>4534	Identifier	sml
>4535	Identifier	dist
>4536	EqualityExpression	sml == - 1
>4537	UnaryOp	- 1
>4538	PrimaryExpression	1
>4539	UnaryOperator	-
>4540	Identifier	sml
>4541	Condition	 
>4542	OrExpression	dt == DT_NONE || e -> isDamageTarget ( dt )
>4543	CallExpression	e -> isDamageTarget ( dt )
>4544	ArgumentList	dt
>4545	Argument	dt
>4546	Identifier	dt
>4547	Callee	e -> isDamageTarget
>4548	PtrMemberAccess	e -> isDamageTarget
>4549	Identifier	isDamageTarget
>4550	Identifier	e
>4551	EqualityExpression	dt == DT_NONE
>4552	Identifier	DT_NONE
>4553	Identifier	dt
>4554	Condition	 
>4555	OrExpression	et == ET_NOTYPE || e -> getEntityType ( ) == et
>4556	EqualityExpression	e -> getEntityType ( ) == et
>4557	Identifier	et
>4558	CallExpression	e -> getEntityType ( )
>4559	ArgumentList	 
>4560	Callee	e -> getEntityType
>4561	PtrMemberAccess	e -> getEntityType
>4562	Identifier	getEntityType
>4563	Identifier	e
>4564	EqualityExpression	et == ET_NOTYPE
>4565	Identifier	ET_NOTYPE
>4566	Identifier	et
>4567	Condition	 
>4568	OrExpression	lrStart == - 1 || lrEnd == - 1 || ( e -> layer >= lrStart && e -> layer <= lrEnd )
>4569	OrExpression	lrEnd == - 1 || ( e -> layer >= lrStart && e -> layer <= lrEnd )
>4570	AndExpression	e -> layer >= lrStart && e -> layer <= lrEnd
>4571	RelationalExpression	e -> layer <= lrEnd
>4572	Identifier	lrEnd
>4573	PtrMemberAccess	e -> layer
>4574	Identifier	layer
>4575	Identifier	e
>4576	RelationalExpression	e -> layer >= lrStart
>4577	Identifier	lrStart
>4578	PtrMemberAccess	e -> layer
>4579	Identifier	layer
>4580	Identifier	e
>4581	EqualityExpression	lrEnd == - 1
>4582	UnaryOp	- 1
>4583	PrimaryExpression	1
>4584	UnaryOperator	-
>4585	Identifier	lrEnd
>4586	EqualityExpression	lrStart == - 1
>4587	UnaryOp	- 1
>4588	PrimaryExpression	1
>4589	UnaryOperator	-
>4590	Identifier	lrStart
>4591	Condition	 
>4592	AndExpression	e != ignore && e -> isPresent ( )
>4593	CallExpression	e -> isPresent ( )
>4594	ArgumentList	 
>4595	Callee	e -> isPresent
>4596	PtrMemberAccess	e -> isPresent
>4597	Identifier	isPresent
>4598	Identifier	e
>4599	EqualityExpression	e != ignore
>4600	Identifier	ignore
>4601	Identifier	e
>4602	Condition	 
>4603	RelationalExpression	dist <= sqrRadius
>4604	Identifier	sqrRadius
>4605	Identifier	dist
>4606	ExpressionStatement	 
>4607	AssignmentExpr	dist = ( e -> position - pos ) . getSquaredLength2D ( )
>4608	CallExpression	( e -> position - pos ) . getSquaredLength2D ( )
>4609	ArgumentList	 
>4610	Callee	( e -> position - pos ) . getSquaredLength2D
>4611	MemberAccess	( e -> position - pos ) . getSquaredLength2D
>4612	Identifier	getSquaredLength2D
>4613	AdditiveExpression	e -> position - pos
>4614	Identifier	pos
>4615	PtrMemberAccess	e -> position
>4616	Identifier	position
>4617	Identifier	e
>4618	Identifier	dist
>4619	IdentifierDeclStatement	 
>4620	IdentifierDecl	* e = * i
>4621	AssignmentExpr	* e = * i
>4622	UnaryOp	* i
>4623	Identifier	i
>4624	UnaryOperator	*
>4625	Identifier	e
>4626	Identifier	e
>4627	IdentifierDeclType	Entity *
>4628	Statement	 
>4629	Statement	 
>4630	Statement	 
>4631	Statement	 
>4632	IdentifierDeclStatement	 
>4633	IdentifierDecl	dist = 0
>4634	AssignmentExpr	dist = 0
>4635	PrimaryExpression	0
>4636	Identifier	dist
>4637	Identifier	dist
>4638	IdentifierDeclType	int
>4639	IdentifierDeclStatement	 
>4640	IdentifierDecl	sml = - 1
>4641	AssignmentExpr	sml = - 1
>4642	UnaryOp	- 1
>4643	PrimaryExpression	1
>4644	UnaryOperator	-
>4645	Identifier	sml
>4646	Identifier	sml
>4647	IdentifierDeclType	int
>4648	IdentifierDeclStatement	 
>4649	IdentifierDecl	* closest = 0
>4650	AssignmentExpr	* closest = 0
>4651	PrimaryExpression	0
>4652	Identifier	closest
>4653	Identifier	closest
>4654	IdentifierDeclType	Entity *
>4655	IdentifierDeclStatement	 
>4656	IdentifierDecl	sqrRadius = radius * radius
>4657	AssignmentExpr	sqrRadius = radius * radius
>4658	MultiplicativeExpression	radius * radius
>4659	Identifier	radius
>4660	Identifier	radius
>4661	Identifier	sqrRadius
>4662	Identifier	sqrRadius
>4663	IdentifierDeclType	int
>4694	FunctionDef	ObsRow 
>4695	ParameterList	int tx , int ty , int len
>4696	Parameter	 
>4697	Identifier	len
>4698	ParameterType	int
>4699	Parameter	 
>4700	Identifier	ty
>4701	ParameterType	int
>4702	Parameter	 
>4703	Identifier	tx
>4704	ParameterType	int
>4705	CompoundStatement	 
>4712	FunctionDef	Game 
>4713	ParameterList	const std 
>4714	Parameter	 
>4715	Identifier	name
>4716	ParameterType	const std 
>4717	ReturnType	int
>4718	CompoundStatement	 
>4719	ReturnStatement	 
>4720	Identifier	c
>4721	CompoundStatement	 
>4722	IfStatement	if ( e -> life == 1 && ( nocasecmp ( e -> name , name ) == 0 ) )
>4723	ExpressionStatement	 
>4724	IncDecOp	c ++
>4725	IncDec	++
>4726	Identifier	c
>4727	Condition	 
>4728	AndExpression	e -> life == 1 && ( nocasecmp ( e -> name , name ) == 0 )
>4729	EqualityExpression	nocasecmp ( e -> name , name ) == 0
>4730	PrimaryExpression	0
>4731	CallExpression	nocasecmp ( e -> name , name )
>4732	ArgumentList	e -> name
>4733	Argument	name
>4734	Identifier	name
>4735	Argument	e -> name
>4736	PtrMemberAccess	e -> name
>4737	Identifier	name
>4738	Identifier	e
>4739	Callee	nocasecmp
>4740	Identifier	nocasecmp
>4741	EqualityExpression	e -> life == 1
>4742	PrimaryExpression	1
>4743	PtrMemberAccess	e -> life
>4744	Identifier	life
>4745	Identifier	e
>4746	IdentifierDeclStatement	 
>4747	IdentifierDecl	* e = * i
>4748	AssignmentExpr	* e = * i
>4749	UnaryOp	* i
>4750	Identifier	i
>4751	UnaryOperator	*
>4752	Identifier	e
>4753	Identifier	e
>4754	IdentifierDeclType	Entity *
>4755	Statement	 
>4756	Statement	 
>4757	Statement	 
>4758	Statement	 
>4759	IdentifierDeclStatement	 
>4760	IdentifierDecl	c = 0
>4761	AssignmentExpr	c = 0
>4762	PrimaryExpression	0
>4763	Identifier	c
>4764	Identifier	c
>4765	IdentifierDeclType	int
>4778	FunctionDef	Game 
>4779	ParameterList	int songType , bool override
>4780	Parameter	 
>4781	Identifier	override
>4782	ParameterType	bool
>4783	Parameter	 
>4784	Identifier	songType
>4785	ParameterType	int
>4786	ReturnType	void
>4787	CompoundStatement	 
>4788	IfStatement	if ( playingSongInMenu == - 1 || override )
>4789	CompoundStatement	 
>4790	ExpressionStatement	 
>4791	AssignmentExpr	songMenuPlayDelay = 0.5
>4792	PrimaryExpression	0.5
>4793	Identifier	songMenuPlayDelay
>4794	ExpressionStatement	 
>4795	AssignmentExpr	currentSongMenuNote = 0
>4796	PrimaryExpression	0
>4797	Identifier	currentSongMenuNote
>4798	ExpressionStatement	 
>4799	AssignmentExpr	playingSongInMenu = songType
>4800	Identifier	songType
>4801	Identifier	playingSongInMenu
>4802	Condition	 
>4803	OrExpression	playingSongInMenu == - 1 || override
>4804	Identifier	override
>4805	EqualityExpression	playingSongInMenu == - 1
>4806	UnaryOp	- 1
>4807	PrimaryExpression	1
>4808	UnaryOperator	-
>4809	Identifier	playingSongInMenu
>4818	FunctionDef	Game 
>4819	ParameterList	RenderObject * r , int flipY
>4820	Parameter	 
>4821	Identifier	flipY
>4822	ParameterType	int
>4823	Parameter	 
>4824	Identifier	r
>4825	ParameterType	RenderObject *
>4826	ReturnType	void
>4827	CompoundStatement	 
>4828	IfStatement	if ( r -> position . y < flipY )
>4829	ElseStatement	else
>4830	ExpressionStatement	 
>4831	AssignmentExpr	r -> position . y = flipY - ( r -> position . y - flipY )
>4832	AdditiveExpression	flipY - ( r -> position . y - flipY )
>4833	AdditiveExpression	r -> position . y - flipY
>4834	Identifier	flipY
>4835	MemberAccess	r -> position . y
>4836	Identifier	y
>4837	PtrMemberAccess	r -> position
>4838	Identifier	position
>4839	Identifier	r
>4840	Identifier	flipY
>4841	MemberAccess	r -> position . y
>4842	Identifier	y
>4843	PtrMemberAccess	r -> position
>4844	Identifier	position
>4845	Identifier	r
>4846	ExpressionStatement	 
>4847	AssignmentExpr	r -> position . y = flipY + ( flipY - r -> position . y )
>4848	AdditiveExpression	flipY + ( flipY - r -> position . y )
>4849	AdditiveExpression	flipY - r -> position . y
>4850	MemberAccess	r -> position . y
>4851	Identifier	y
>4852	PtrMemberAccess	r -> position
>4853	Identifier	position
>4854	Identifier	r
>4855	Identifier	flipY
>4856	Identifier	flipY
>4857	MemberAccess	r -> position . y
>4858	Identifier	y
>4859	PtrMemberAccess	r -> position
>4860	Identifier	position
>4861	Identifier	r
>4862	Condition	 
>4863	RelationalExpression	r -> position . y < flipY
>4864	Identifier	flipY
>4865	MemberAccess	r -> position . y
>4866	Identifier	y
>4867	PtrMemberAccess	r -> position
>4868	Identifier	position
>4869	Identifier	r
>4878	FunctionDef	Game 
>4879	ParameterList	 
>4880	ReturnType	bool
>4881	CompoundStatement	 
>4882	ReturnStatement	 
>4883	Identifier	sceneFlipped
>4888	FunctionDef	Game 
>4889	ParameterList	int flipY
>4890	Parameter	 
>4891	Identifier	flipY
>4892	ParameterType	int
>4893	ReturnType	void
>4894	CompoundStatement	 
>4895	ExpressionStatement	 
>4896	CallExpression	dsq -> resetTimer ( )
>4897	ArgumentList	 
>4898	Callee	dsq -> resetTimer
>4899	PtrMemberAccess	dsq -> resetTimer
>4900	Identifier	resetTimer
>4901	Identifier	dsq
>4902	IfStatement	if ( cameraFollow )
>4903	ExpressionStatement	 
>4904	CallExpression	warpCameraTo ( * cameraFollow )
>4905	ArgumentList	* cameraFollow
>4906	Argument	* cameraFollow
>4907	UnaryOp	* cameraFollow
>4908	Identifier	cameraFollow
>4909	UnaryOperator	*
>4910	Callee	warpCameraTo
>4911	Identifier	warpCameraTo
>4912	Condition	 
>4913	Identifier	cameraFollow
>4914	ExpressionStatement	 
>4915	CallExpression	reconstructGrid ( )
>4916	ArgumentList	 
>4917	Callee	reconstructGrid
>4918	Identifier	reconstructGrid
>4919	CompoundStatement	 
>4920	ExpressionStatement	 
>4921	CallExpression	e -> onSceneFlipped ( )
>4922	ArgumentList	 
>4923	Callee	e -> onSceneFlipped
>4924	PtrMemberAccess	e -> onSceneFlipped
>4925	Identifier	onSceneFlipped
>4926	Identifier	e
>4927	IdentifierDeclStatement	 
>4928	IdentifierDecl	* e = * i
>4929	AssignmentExpr	* e = * i
>4930	UnaryOp	* i
>4931	Identifier	i
>4932	UnaryOperator	*
>4933	Identifier	e
>4934	Identifier	e
>4935	IdentifierDeclType	Entity *
>4936	Statement	 
>4937	Statement	 
>4938	Statement	 
>4939	Statement	 
>4940	ExpressionStatement	 
>4941	CallExpression	reconstructGrid ( )
>4942	ArgumentList	 
>4943	Callee	reconstructGrid
>4944	Identifier	reconstructGrid
>4945	ForStatement	for ( i = 0 ; i < dsq -> getNumElements ( ) ; i ++ )
>4946	CompoundStatement	 
>4947	ExpressionStatement	 
>4948	CallExpression	flipRenderObjectVertical ( e , flipY )
>4949	ArgumentList	e
>4950	Argument	flipY
>4951	Identifier	flipY
>4952	Argument	e
>4953	Identifier	e
>4954	Callee	flipRenderObjectVertical
>4955	Identifier	flipRenderObjectVertical
>4956	ExpressionStatement	 
>4957	AssignmentExpr	e -> rotation . z = 180 - e -> rotation . z
>4958	AdditiveExpression	180 - e -> rotation . z
>4959	MemberAccess	e -> rotation . z
>4960	Identifier	z
>4961	PtrMemberAccess	e -> rotation
>4962	Identifier	rotation
>4963	Identifier	e
>4964	PrimaryExpression	180
>4965	MemberAccess	e -> rotation . z
>4966	Identifier	z
>4967	PtrMemberAccess	e -> rotation
>4968	Identifier	rotation
>4969	Identifier	e
>4970	IdentifierDeclStatement	 
>4971	IdentifierDecl	* e = dsq -> getElement ( i )
>4972	AssignmentExpr	* e = dsq -> getElement ( i )
>4973	CallExpression	dsq -> getElement ( i )
>4974	ArgumentList	i
>4975	Argument	i
>4976	Identifier	i
>4977	Callee	dsq -> getElement
>4978	PtrMemberAccess	dsq -> getElement
>4979	Identifier	getElement
>4980	Identifier	dsq
>4981	Identifier	e
>4982	Identifier	e
>4983	IdentifierDeclType	Element *
>4984	IncDecOp	 
>4985	IncDec	++
>4986	Identifier	i
>4987	Condition	 
>4988	RelationalExpression	i < dsq -> getNumElements ( )
>4989	CallExpression	dsq -> getNumElements ( )
>4990	ArgumentList	 
>4991	Callee	dsq -> getNumElements
>4992	PtrMemberAccess	dsq -> getNumElements
>4993	Identifier	getNumElements
>4994	Identifier	dsq
>4995	Identifier	i
>4996	ForInit	 
>4997	AssignmentExpr	i = 0
>4998	PrimaryExpression	0
>4999	Identifier	i
>5000	ForStatement	for ( i = 0 ; i < obsRows . size ( ) ; i ++ )
>5001	CompoundStatement	 
>5002	IfStatement	if ( obsRows [ i ] . ty < flipTY )
>5003	ElseStatement	else
>5004	ExpressionStatement	 
>5005	AssignmentExpr	obsRows [ i ] . ty = flipTY - ( obsRows [ i ] . ty - flipTY )
>5006	AdditiveExpression	flipTY - ( obsRows [ i ] . ty - flipTY )
>5007	AdditiveExpression	obsRows [ i ] . ty - flipTY
>5008	Identifier	flipTY
>5009	MemberAccess	obsRows [ i ] . ty
>5010	Identifier	ty
>5011	ArrayIndexing	obsRows [ i ]
>5012	Identifier	i
>5013	Identifier	obsRows
>5014	Identifier	flipTY
>5015	MemberAccess	obsRows [ i ] . ty
>5016	Identifier	ty
>5017	ArrayIndexing	obsRows [ i ]
>5018	Identifier	i
>5019	Identifier	obsRows
>5020	ExpressionStatement	 
>5021	AssignmentExpr	obsRows [ i ] . ty = flipTY + ( flipTY - obsRows [ i ] . ty )
>5022	AdditiveExpression	flipTY + ( flipTY - obsRows [ i ] . ty )
>5023	AdditiveExpression	flipTY - obsRows [ i ] . ty
>5024	MemberAccess	obsRows [ i ] . ty
>5025	Identifier	ty
>5026	ArrayIndexing	obsRows [ i ]
>5027	Identifier	i
>5028	Identifier	obsRows
>5029	Identifier	flipTY
>5030	Identifier	flipTY
>5031	MemberAccess	obsRows [ i ] . ty
>5032	Identifier	ty
>5033	ArrayIndexing	obsRows [ i ]
>5034	Identifier	i
>5035	Identifier	obsRows
>5036	Condition	 
>5037	RelationalExpression	obsRows [ i ] . ty < flipTY
>5038	Identifier	flipTY
>5039	MemberAccess	obsRows [ i ] . ty
>5040	Identifier	ty
>5041	ArrayIndexing	obsRows [ i ]
>5042	Identifier	i
>5043	Identifier	obsRows
>5044	IncDecOp	 
>5045	IncDec	++
>5046	Identifier	i
>5047	Condition	 
>5048	RelationalExpression	i < obsRows . size ( )
>5049	CallExpression	obsRows . size ( )
>5050	ArgumentList	 
>5051	Callee	obsRows . size
>5052	MemberAccess	obsRows . size
>5053	Identifier	size
>5054	Identifier	obsRows
>5055	Identifier	i
>5056	ForInit	 
>5057	AssignmentExpr	i = 0
>5058	PrimaryExpression	0
>5059	Identifier	i
>5060	IdentifierDeclStatement	 
>5061	IdentifierDecl	flipTY = ( flipY / TILE_SIZE ) - 1
>5062	AssignmentExpr	flipTY = ( flipY / TILE_SIZE ) - 1
>5063	AdditiveExpression	( flipY / TILE_SIZE ) - 1
>5064	PrimaryExpression	1
>5065	MultiplicativeExpression	flipY / TILE_SIZE
>5066	Identifier	TILE_SIZE
>5067	Identifier	flipY
>5068	Identifier	flipTY
>5069	Identifier	flipTY
>5070	IdentifierDeclType	int
>5071	IdentifierDeclStatement	 
>5072	IdentifierDecl	i = 0
>5073	AssignmentExpr	i = 0
>5074	PrimaryExpression	0
>5075	Identifier	i
>5076	Identifier	i
>5077	IdentifierDeclType	int
>5078	CompoundStatement	 
>5079	ExpressionStatement	 
>5080	CallExpression	flipRenderObjectVertical ( e , flipY )
>5081	ArgumentList	e
>5082	Argument	flipY
>5083	Identifier	flipY
>5084	Argument	e
>5085	Identifier	e
>5086	Callee	flipRenderObjectVertical
>5087	Identifier	flipRenderObjectVertical
>5088	IdentifierDeclStatement	 
>5089	IdentifierDecl	* e = * itr
>5090	AssignmentExpr	* e = * itr
>5091	UnaryOp	* itr
>5092	Identifier	itr
>5093	UnaryOperator	*
>5094	Identifier	e
>5095	Identifier	e
>5096	IdentifierDeclType	Entity *
>5097	Statement	 
>5098	Statement	 
>5099	Statement	 
>5100	Statement	 
>5101	ExpressionStatement	 
>5102	CallExpression	dsq -> screenTransition -> go ( 1 )
>5103	ArgumentList	1
>5104	Argument	1
>5105	PrimaryExpression	1
>5106	Callee	dsq -> screenTransition -> go
>5107	PtrMemberAccess	dsq -> screenTransition -> go
>5108	Identifier	go
>5109	PtrMemberAccess	dsq -> screenTransition
>5110	Identifier	screenTransition
>5111	Identifier	dsq
>5112	ExpressionStatement	 
>5113	CallExpression	dsq -> render ( )
>5114	ArgumentList	 
>5115	Callee	dsq -> render
>5116	PtrMemberAccess	dsq -> render
>5117	Identifier	render
>5118	Identifier	dsq
>5119	ExpressionStatement	 
>5120	CallExpression	dsq -> screenTransition -> capture ( )
>5121	ArgumentList	 
>5122	Callee	dsq -> screenTransition -> capture
>5123	PtrMemberAccess	dsq -> screenTransition -> capture
>5124	Identifier	capture
>5125	PtrMemberAccess	dsq -> screenTransition
>5126	Identifier	screenTransition
>5127	Identifier	dsq
>5128	ExpressionStatement	 
>5129	AssignmentExpr	sceneFlipped = ! sceneFlipped
>5130	UnaryOp	! sceneFlipped
>5131	Identifier	sceneFlipped
>5132	UnaryOperator	!
>5133	Identifier	sceneFlipped
>5160	FunctionDef	Game 
>5161	ParameterList	const std 
>5162	Parameter	 
>5163	Identifier	text
>5164	ParameterType	const std 
>5165	ReturnType	void
>5166	CompoundStatement	 
>5167	ExpressionStatement	 
>5168	CallExpression	menuDescription -> setText ( text )
>5169	ArgumentList	text
>5170	Argument	text
>5171	Identifier	text
>5172	Callee	menuDescription -> setText
>5173	PtrMemberAccess	menuDescription -> setText
>5174	Identifier	setText
>5175	Identifier	menuDescription
>5183	FunctionDef	Game 
>5184	ParameterList	const std 
>5185	Parameter	 
>5186	Identifier	out
>5187	ParameterType	int
>5188	Parameter	 
>5189	Identifier	times
>5190	ParameterType	int
>5191	Parameter	 
>5192	Identifier	pos
>5193	ParameterType	const Vector &
>5194	Parameter	 
>5195	Identifier	ing
>5196	ParameterType	const std 
>5197	ReturnType	Ingredient *
>5198	CompoundStatement	 
>5199	ReturnStatement	 
>5200	Identifier	i
>5201	ForStatement	for ( int c = 0 ; c < times ; c ++ )
>5202	CompoundStatement	 
>5203	IfStatement	if ( d )
>5204	ElseStatement	else
>5205	CompoundStatement	 
>5206	ExpressionStatement	 
>5207	CallExpression	debugLog ( \"Could not find ingredient data for [\" + use + \"]\" )
>5208	ArgumentList	\"Could not find ingredient data for [\" + use + \"]\"
>5209	Argument	\"Could not find ingredient data for [\" + use + \"]\"
>5210	AdditiveExpression	\"Could not find ingredient data for [\" + use + \"]\"
>5211	AdditiveExpression	use + \"]\"
>5212	PrimaryExpression	\"]\"
>5213	Identifier	use
>5214	PrimaryExpression	\"Could not find ingredient data for [\"
>5215	Callee	debugLog
>5216	Identifier	debugLog
>5217	CompoundStatement	 
>5218	ExpressionStatement	 
>5219	CallExpression	establishEntity ( i )
>5220	ArgumentList	i
>5221	Argument	i
>5222	Identifier	i
>5223	Callee	establishEntity
>5224	Identifier	establishEntity
>5225	IfStatement	if ( out )
>5226	CompoundStatement	 
>5227	ExpressionStatement	 
>5228	AssignmentExpr	i -> velocity . y = - 500
>5229	UnaryOp	- 500
>5230	PrimaryExpression	500
>5231	UnaryOperator	-
>5232	MemberAccess	i -> velocity . y
>5233	Identifier	y
>5234	PtrMemberAccess	i -> velocity
>5235	Identifier	velocity
>5236	Identifier	i
>5237	ExpressionStatement	 
>5238	AssignmentExpr	i -> velocity . x = 0
>5239	PrimaryExpression	0
>5240	MemberAccess	i -> velocity . x
>5241	Identifier	x
>5242	PtrMemberAccess	i -> velocity
>5243	Identifier	velocity
>5244	Identifier	i
>5245	Condition	 
>5246	Identifier	out
>5247	ExpressionStatement	 
>5248	CallExpression	ingredients . push_back ( i )
>5249	ArgumentList	i
>5250	Argument	i
>5251	Identifier	i
>5252	Callee	ingredients . push_back
>5253	MemberAccess	ingredients . push_back
>5254	Identifier	push_back
>5255	Identifier	ingredients
>5256	ExpressionStatement	 
>5257	AssignmentExpr	i = new Ingredient ( pos , d )
>5258	Expression	pos , d
>5259	Identifier	d
>5260	Identifier	pos
>5261	Identifier	i
>5262	Condition	 
>5263	Identifier	d
>5264	IdentifierDeclStatement	 
>5265	IdentifierDecl	* d = dsq -> continuity . getIngredientDataByName ( use )
>5266	AssignmentExpr	* d = dsq -> continuity . getIngredientDataByName ( use )
>5267	CallExpression	dsq -> continuity . getIngredientDataByName ( use )
>5268	ArgumentList	use
>5269	Argument	use
>5270	Identifier	use
>5271	Callee	dsq -> continuity . getIngredientDataByName
>5272	MemberAccess	dsq -> continuity . getIngredientDataByName
>5273	Identifier	getIngredientDataByName
>5274	PtrMemberAccess	dsq -> continuity
>5275	Identifier	continuity
>5276	Identifier	dsq
>5277	Identifier	d
>5278	Identifier	d
>5279	IdentifierDeclType	IngredientData *
>5280	IfStatement	if ( nocasecmp ( ing , \"poultice\" ) == 0 )
>5281	ExpressionStatement	 
>5282	AssignmentExpr	use = \"LeafPoultice\"
>5283	PrimaryExpression	\"LeafPoultice\"
>5284	Identifier	use
>5285	Condition	 
>5286	EqualityExpression	nocasecmp ( ing , \"poultice\" ) == 0
>5287	PrimaryExpression	0
>5288	CallExpression	nocasecmp ( ing , \"poultice\" )
>5289	ArgumentList	ing
>5290	Argument	\"poultice\"
>5291	PrimaryExpression	\"poultice\"
>5292	Argument	ing
>5293	Identifier	ing
>5294	Callee	nocasecmp
>5295	Identifier	nocasecmp
>5296	IncDecOp	 
>5297	IncDec	++
>5298	Identifier	c
>5299	Condition	 
>5300	RelationalExpression	c < times
>5301	Identifier	times
>5302	Identifier	c
>5303	ForInit	 
>5304	IdentifierDeclStatement	int c = 0 ;
>5305	IdentifierDecl	c = 0
>5306	AssignmentExpr	c = 0
>5307	PrimaryExpression	0
>5308	Identifier	c
>5309	Identifier	c
>5310	IdentifierDeclType	int
>5311	IdentifierDeclStatement	 
>5312	IdentifierDecl	* i = 0
>5313	AssignmentExpr	* i = 0
>5314	PrimaryExpression	0
>5315	Identifier	i
>5316	Identifier	i
>5317	IdentifierDeclType	Ingredient *
>5318	IdentifierDeclStatement	 
>5319	IdentifierDecl	use = ing
>5320	AssignmentExpr	use = ing
>5321	Identifier	ing
>5322	Identifier	ing
>5323	Identifier	use
>5324	IdentifierDeclType	std 
>5346	FunctionDef	Game 
>5347	ParameterList	Entity * ent , IngredientData * data
>5348	Parameter	 
>5349	Identifier	data
>5350	ParameterType	IngredientData *
>5351	Parameter	 
>5352	Identifier	ent
>5353	ParameterType	Entity *
>5354	ReturnType	void
>5355	CompoundStatement	 
>5356	ExpressionStatement	 
>5357	CallExpression	establishEntity ( i )
>5358	ArgumentList	i
>5359	Argument	i
>5360	Identifier	i
>5361	Callee	establishEntity
>5362	Identifier	establishEntity
>5363	ExpressionStatement	 
>5364	CallExpression	ingredients . push_back ( i )
>5365	ArgumentList	i
>5366	Argument	i
>5367	Identifier	i
>5368	Callee	ingredients . push_back
>5369	MemberAccess	ingredients . push_back
>5370	Identifier	push_back
>5371	Identifier	ingredients
>5372	IdentifierDeclStatement	 
>5373	IdentifierDecl	* i = new Ingredient ( ent -> position , data )
>5374	AssignmentExpr	* i = new Ingredient ( ent -> position , data )
>5375	Expression	ent -> position , data
>5376	Identifier	data
>5377	PtrMemberAccess	ent -> position
>5378	Identifier	position
>5379	Identifier	ent
>5380	Identifier	i
>5381	Identifier	i
>5382	IdentifierDeclType	Ingredient *
>5392	FunctionDef	Game 
>5393	ParameterList	 
>5394	CompoundStatement	 
>5395	ExpressionStatement	 
>5396	AssignmentExpr	cookingScript = 0
>5397	PrimaryExpression	0
>5398	Identifier	cookingScript
>5399	ExpressionStatement	 
>5400	AssignmentExpr	worldPaused = false
>5401	Identifier	false
>5402	Identifier	worldPaused
>5403	ExpressionStatement	 
>5404	AssignmentExpr	lastCollideMaskIndex = - 1
>5405	UnaryOp	- 1
>5406	PrimaryExpression	1
>5407	UnaryOperator	-
>5408	Identifier	lastCollideMaskIndex
>5409	ExpressionStatement	 
>5410	CallExpression	loadEntityTypeList ( )
>5411	ArgumentList	 
>5412	Callee	loadEntityTypeList
>5413	Identifier	loadEntityTypeList
>5414	ForStatement	for ( int i = 0 ; i < PATH_MAX ; i ++ )
>5415	ExpressionStatement	 
>5416	AssignmentExpr	firstPathOfType [ i ] = 0
>5417	PrimaryExpression	0
>5418	ArrayIndexing	firstPathOfType [ i ]
>5419	Identifier	i
>5420	Identifier	firstPathOfType
>5421	IncDecOp	 
>5422	IncDec	++
>5423	Identifier	i
>5424	Condition	 
>5425	RelationalExpression	i < PATH_MAX
>5426	Identifier	PATH_MAX
>5427	Identifier	i
>5428	ForInit	 
>5429	IdentifierDeclStatement	int i = 0 ;
>5430	IdentifierDecl	i = 0
>5431	AssignmentExpr	i = 0
>5432	PrimaryExpression	0
>5433	Identifier	i
>5434	Identifier	i
>5435	IdentifierDeclType	int
>5436	ExpressionStatement	 
>5437	AssignmentExpr	worldMapRender = 0
>5438	PrimaryExpression	0
>5439	Identifier	worldMapRender
>5440	ExpressionStatement	 
>5441	AssignmentExpr	cameraFollow = 0
>5442	PrimaryExpression	0
>5443	Identifier	cameraFollow
>5444	ExpressionStatement	 
>5445	AssignmentExpr	elementWithMenu = 0
>5446	PrimaryExpression	0
>5447	Identifier	elementWithMenu
>5448	ExpressionStatement	 
>5449	AssignmentExpr	game = this
>5450	Identifier	this
>5451	Identifier	game
>5452	ExpressionStatement	 
>5453	AssignmentExpr	deathTimer = 0
>5454	PrimaryExpression	0
>5455	Identifier	deathTimer
>5456	ExpressionStatement	 
>5457	AssignmentExpr	currentInventoryPage = 0
>5458	PrimaryExpression	0
>5459	Identifier	currentInventoryPage
>5460	ExpressionStatement	 
>5461	AssignmentExpr	fromVel = Vector ( 0 , - 1 )
>5462	CallExpression	Vector ( 0 , - 1 )
>5463	ArgumentList	0
>5464	Argument	- 1
>5465	UnaryOp	- 1
>5466	PrimaryExpression	1
>5467	UnaryOperator	-
>5468	Argument	0
>5469	PrimaryExpression	0
>5470	Callee	Vector
>5471	Identifier	Vector
>5472	Identifier	fromVel
>5473	ExpressionStatement	 
>5474	AssignmentExpr	avatar = 0
>5475	PrimaryExpression	0
>5476	Identifier	avatar
>5477	ExpressionStatement	 
>5478	AssignmentExpr	controlHint_text = 0
>5479	PrimaryExpression	0
>5480	Identifier	controlHint_text
>5481	ExpressionStatement	 
>5482	AssignmentExpr	controlHint_mouseLeft = controlHint_mouseRight = controlHint_mouseMiddle = controlHint_mouseBody = controlHint_\
>5483	AssignmentExpr	controlHint_mouseRight = controlHint_mouseMiddle = controlHint_mouseBody = controlHint_bg = 0
>5484	AssignmentExpr	controlHint_mouseMiddle = controlHint_mouseBody = controlHint_bg = 0
>5485	AssignmentExpr	controlHint_mouseBody = controlHint_bg = 0
>5486	AssignmentExpr	controlHint_bg = 0
>5487	PrimaryExpression	0
>5488	Identifier	controlHint_bg
>5489	Identifier	controlHint_mouseBody
>5490	Identifier	controlHint_mouseMiddle
>5491	Identifier	controlHint_mouseRight
>5492	Identifier	controlHint_mouseLeft
>5493	ExpressionStatement	 
>5494	AssignmentExpr	loadingScene = false
>5495	Identifier	false
>5496	Identifier	loadingScene
>5497	ExpressionStatement	 
>5498	AssignmentExpr	dsq -> loops . bg2 = BBGE_AUDIO_NOCHANNEL
>5499	Identifier	BBGE_AUDIO_NOCHANNEL
>5500	MemberAccess	dsq -> loops . bg2
>5501	Identifier	bg2
>5502	PtrMemberAccess	dsq -> loops
>5503	Identifier	loops
>5504	Identifier	dsq
>5505	ExpressionStatement	 
>5506	AssignmentExpr	dsq -> loops . bg = BBGE_AUDIO_NOCHANNEL
>5507	Identifier	BBGE_AUDIO_NOCHANNEL
>5508	MemberAccess	dsq -> loops . bg
>5509	Identifier	bg
>5510	PtrMemberAccess	dsq -> loops
>5511	Identifier	loops
>5512	Identifier	dsq
>5513	ExpressionStatement	 
>5514	AssignmentExpr	shuttingDownGameState = false
>5515	Identifier	false
>5516	Identifier	shuttingDownGameState
>5517	ExpressionStatement	 
>5518	AssignmentExpr	toFlip = - 1
>5519	UnaryOp	- 1
>5520	PrimaryExpression	1
>5521	UnaryOperator	-
>5522	Identifier	toFlip
>5523	ExpressionStatement	 
>5524	AssignmentExpr	optionsOnly = false
>5525	Identifier	false
>5526	Identifier	optionsOnly
>5527	ExpressionStatement	 
>5528	CallExpression	registerState ( this , \"Game\" )
>5529	ArgumentList	this
>5530	Argument	\"Game\"
>5531	PrimaryExpression	\"Game\"
>5532	Argument	this
>5533	Identifier	this
>5534	Callee	registerState
>5535	Identifier	registerState
>5536	ExpressionStatement	 
>5537	AssignmentExpr	active = false
>5538	Identifier	false
>5539	Identifier	active
>5540	ExpressionStatement	 
>5541	AssignmentExpr	invinciblity = false
>5542	Identifier	false
>5543	Identifier	invinciblity
>5544	ExpressionStatement	 
>5545	AssignmentExpr	activation = false
>5546	Identifier	false
>5547	Identifier	activation
>5548	ExpressionStatement	 
>5549	AssignmentExpr	invincibleOnNested = true
>5550	Identifier	true
>5551	Identifier	invincibleOnNested
>5552	ExpressionStatement	 
>5553	AssignmentExpr	hasPlayedLow = false
>5554	Identifier	false
>5555	Identifier	hasPlayedLow
>5556	ExpressionStatement	 
>5557	CallExpression	allowedMaps . push_back ( \"energytemplevision\" )
>5558	ArgumentList	\"energytemplevision\"
>5559	Argument	\"energytemplevision\"
>5560	PrimaryExpression	\"energytemplevision\"
>5561	Callee	allowedMaps . push_back
>5562	MemberAccess	allowedMaps . push_back
>5563	Identifier	push_back
>5564	Identifier	allowedMaps
>5565	ExpressionStatement	 
>5566	CallExpression	allowedMaps . push_back ( \"title\" )
>5567	ArgumentList	\"title\"
>5568	Argument	\"title\"
>5569	PrimaryExpression	\"title\"
>5570	Callee	allowedMaps . push_back
>5571	MemberAccess	allowedMaps . push_back
>5572	Identifier	push_back
>5573	Identifier	allowedMaps
>5574	ExpressionStatement	 
>5575	CallExpression	allowedMaps . push_back ( \"songcave02\" )
>5576	ArgumentList	\"songcave02\"
>5577	Argument	\"songcave02\"
>5578	PrimaryExpression	\"songcave02\"
>5579	Callee	allowedMaps . push_back
>5580	MemberAccess	allowedMaps . push_back
>5581	Identifier	push_back
>5582	Identifier	allowedMaps
>5583	ExpressionStatement	 
>5584	CallExpression	allowedMaps . push_back ( \"songcave\" )
>5585	ArgumentList	\"songcave\"
>5586	Argument	\"songcave\"
>5587	PrimaryExpression	\"songcave\"
>5588	Callee	allowedMaps . push_back
>5589	MemberAccess	allowedMaps . push_back
>5590	Identifier	push_back
>5591	Identifier	allowedMaps
>5592	ExpressionStatement	 
>5593	CallExpression	allowedMaps . push_back ( \"energytemple06\" )
>5594	ArgumentList	\"energytemple06\"
>5595	Argument	\"energytemple06\"
>5596	PrimaryExpression	\"energytemple06\"
>5597	Callee	allowedMaps . push_back
>5598	MemberAccess	allowedMaps . push_back
>5599	Identifier	push_back
>5600	Identifier	allowedMaps
>5601	ExpressionStatement	 
>5602	CallExpression	allowedMaps . push_back ( \"energytemple05\" )
>5603	ArgumentList	\"energytemple05\"
>5604	Argument	\"energytemple05\"
>5605	PrimaryExpression	\"energytemple05\"
>5606	Callee	allowedMaps . push_back
>5607	MemberAccess	allowedMaps . push_back
>5608	Identifier	push_back
>5609	Identifier	allowedMaps
>5610	ExpressionStatement	 
>5611	CallExpression	allowedMaps . push_back ( \"energytemple04\" )
>5612	ArgumentList	\"energytemple04\"
>5613	Argument	\"energytemple04\"
>5614	PrimaryExpression	\"energytemple04\"
>5615	Callee	allowedMaps . push_back
>5616	MemberAccess	allowedMaps . push_back
>5617	Identifier	push_back
>5618	Identifier	allowedMaps
>5619	ExpressionStatement	 
>5620	CallExpression	allowedMaps . push_back ( \"energytemple03\" )
>5621	ArgumentList	\"energytemple03\"
>5622	Argument	\"energytemple03\"
>5623	PrimaryExpression	\"energytemple03\"
>5624	Callee	allowedMaps . push_back
>5625	MemberAccess	allowedMaps . push_back
>5626	Identifier	push_back
>5627	Identifier	allowedMaps
>5628	ExpressionStatement	 
>5629	CallExpression	allowedMaps . push_back ( \"energytemple02\" )
>5630	ArgumentList	\"energytemple02\"
>5631	Argument	\"energytemple02\"
>5632	PrimaryExpression	\"energytemple02\"
>5633	Callee	allowedMaps . push_back
>5634	MemberAccess	allowedMaps . push_back
>5635	Identifier	push_back
>5636	Identifier	allowedMaps
>5637	ExpressionStatement	 
>5638	CallExpression	allowedMaps . push_back ( \"energytemple01\" )
>5639	ArgumentList	\"energytemple01\"
>5640	Argument	\"energytemple01\"
>5641	PrimaryExpression	\"energytemple01\"
>5642	Callee	allowedMaps . push_back
>5643	MemberAccess	allowedMaps . push_back
>5644	Identifier	push_back
>5645	Identifier	allowedMaps
>5646	ExpressionStatement	 
>5647	CallExpression	allowedMaps . push_back ( \"openwater02\" )
>5648	ArgumentList	\"openwater02\"
>5649	Argument	\"openwater02\"
>5650	PrimaryExpression	\"openwater02\"
>5651	Callee	allowedMaps . push_back
>5652	MemberAccess	allowedMaps . push_back
>5653	Identifier	push_back
>5654	Identifier	allowedMaps
>5655	ExpressionStatement	 
>5656	CallExpression	allowedMaps . push_back ( \"vedhacave\" )
>5657	ArgumentList	\"vedhacave\"
>5658	Argument	\"vedhacave\"
>5659	PrimaryExpression	\"vedhacave\"
>5660	Callee	allowedMaps . push_back
>5661	MemberAccess	allowedMaps . push_back
>5662	Identifier	push_back
>5663	Identifier	allowedMaps
>5664	ExpressionStatement	 
>5665	CallExpression	allowedMaps . push_back ( \"mainarea\" )
>5666	ArgumentList	\"mainarea\"
>5667	Argument	\"mainarea\"
>5668	PrimaryExpression	\"mainarea\"
>5669	Callee	allowedMaps . push_back
>5670	MemberAccess	allowedMaps . push_back
>5671	Identifier	push_back
>5672	Identifier	allowedMaps
>5673	ExpressionStatement	 
>5674	CallExpression	allowedMaps . push_back ( \"trainingcave\" )
>5675	ArgumentList	\"trainingcave\"
>5676	Argument	\"trainingcave\"
>5677	PrimaryExpression	\"trainingcave\"
>5678	Callee	allowedMaps . push_back
>5679	MemberAccess	allowedMaps . push_back
>5680	Identifier	push_back
>5681	Identifier	allowedMaps
>5682	ExpressionStatement	 
>5683	CallExpression	allowedMaps . push_back ( \"naijacave\" )
>5684	ArgumentList	\"naijacave\"
>5685	Argument	\"naijacave\"
>5686	PrimaryExpression	\"naijacave\"
>5687	Callee	allowedMaps . push_back
>5688	MemberAccess	allowedMaps . push_back
>5689	Identifier	push_back
>5690	Identifier	allowedMaps
>5691	ExpressionStatement	 
>5692	AssignmentExpr	cookDelay = 0
>5693	PrimaryExpression	0
>5694	Identifier	cookDelay
>5695	ExpressionStatement	 
>5696	AssignmentExpr	ripplesCheck = 0
>5697	PrimaryExpression	0
>5698	Identifier	ripplesCheck
>5699	ExpressionStatement	 
>5700	AssignmentExpr	blurEffectsCheck = 0
>5701	PrimaryExpression	0
>5702	Identifier	blurEffectsCheck
>5703	ExpressionStatement	 
>5704	AssignmentExpr	applyingState = false
>5705	Identifier	false
>5706	Identifier	applyingState
>5756	FunctionDef	Game 
>5757	ParameterList	 
>5758	CompoundStatement	 
>5759	ExpressionStatement	 
>5760	AssignmentExpr	game = 0
>5761	PrimaryExpression	0
>5762	Identifier	game
>5763	ExpressionStatement	 
>5764	CallExpression	tileCache . clean ( )
>5765	ArgumentList	 
>5766	Callee	tileCache . clean
>5767	MemberAccess	tileCache . clean
>5768	Identifier	clean
>5769	Identifier	tileCache
>5777	FunctionDef	Game 
>5778	ParameterList	bool ignoreInput , bool optionsOnly , MenuPage menuPage
>5779	Parameter	 
>5780	Identifier	menuPage
>5781	ParameterType	MenuPage
>5782	Parameter	 
>5783	Identifier	optionsOnly
>5784	ParameterType	bool
>5785	Parameter	 
>5786	Identifier	ignoreInput
>5787	ParameterType	bool
>5788	ReturnType	void
>5789	CompoundStatement	 
>5790	IfStatement	if ( avatar && core -> getNestedMains ( ) == 1 && ! avatar -> isSinging ( ) && ( ignoreInput || avatar -> isInputEnabled ( ) ) )
>5791	CompoundStatement	 
>5792	IfStatement	if ( optionsOnly )
>5793	CompoundStatement	 
>5794	ExpressionStatement	 
>5795	CallExpression	dsq -> main ( - 1 )
>5796	ArgumentList	- 1
>5797	Argument	- 1
>5798	UnaryOp	- 1
>5799	PrimaryExpression	1
>5800	UnaryOperator	-
>5801	Callee	dsq -> main
>5802	PtrMemberAccess	dsq -> main
>5803	Identifier	main
>5804	Identifier	dsq
>5805	Condition	 
>5806	Identifier	optionsOnly
>5807	ExpressionStatement	 
>5808	CallExpression	dsq -> screenTransition -> transition ( MENUPAGETRANSTIME )
>5809	ArgumentList	MENUPAGETRANSTIME
>5810	Argument	MENUPAGETRANSTIME
>5811	Identifier	MENUPAGETRANSTIME
>5812	Callee	dsq -> screenTransition -> transition
>5813	PtrMemberAccess	dsq -> screenTransition -> transition
>5814	Identifier	transition
>5815	PtrMemberAccess	dsq -> screenTransition
>5816	Identifier	screenTransition
>5817	Identifier	dsq
>5818	ExpressionStatement	 
>5819	AssignmentExpr	dsq -> routeShoulder = false
>5820	Identifier	false
>5821	PtrMemberAccess	dsq -> routeShoulder
>5822	Identifier	routeShoulder
>5823	Identifier	dsq
>5824	ExpressionStatement	 
>5825	AssignmentExpr	inGameMenu = true
>5826	Identifier	true
>5827	Identifier	inGameMenu
>5828	ExpressionStatement	 
>5829	AssignmentExpr	menuOpenTimer = 0
>5830	PrimaryExpression	0
>5831	Identifier	menuOpenTimer
>5832	IfStatement	if ( ! optionsOnly )
>5833	CompoundStatement	 
>5834	ExpressionStatement	 
>5835	CallExpression	menuIconGlow -> alpha . interpolateTo ( 1 , 0.5 )
>5836	ArgumentList	1
>5837	Argument	0.5
>5838	PrimaryExpression	0.5
>5839	Argument	1
>5840	PrimaryExpression	1
>5841	Callee	menuIconGlow -> alpha . interpolateTo
>5842	MemberAccess	menuIconGlow -> alpha . interpolateTo
>5843	Identifier	interpolateTo
>5844	PtrMemberAccess	menuIconGlow -> alpha
>5845	Identifier	alpha
>5846	Identifier	menuIconGlow
>5847	ForStatement	for ( i = 0 ; i < menu . size ( ) ; i ++ )
>5848	CompoundStatement	 
>5849	ExpressionStatement	 
>5850	CallExpression	menu [ i ] -> alpha . interpolateTo ( 1 , 0.15 )
>5851	ArgumentList	1
>5852	Argument	0.15
>5853	PrimaryExpression	0.15
>5854	Argument	1
>5855	PrimaryExpression	1
>5856	Callee	menu [ i ] -> alpha . interpolateTo
>5857	MemberAccess	menu [ i ] -> alpha . interpolateTo
>5858	Identifier	interpolateTo
>5859	PtrMemberAccess	menu [ i ] -> alpha
>5860	Identifier	alpha
>5861	ArrayIndexing	menu [ i ]
>5862	Identifier	i
>5863	Identifier	menu
>5864	ExpressionStatement	 
>5865	CallExpression	menu [ i ] -> scale . interpolateTo ( Vector ( 1 , 1 ) , 0.15 )
>5866	ArgumentList	Vector ( 1 , 1 )
>5867	Argument	0.15
>5868	PrimaryExpression	0.15
>5869	Argument	Vector ( 1 , 1 )
>5870	CallExpression	Vector ( 1 , 1 )
>5871	ArgumentList	1
>5872	Argument	1
>5873	PrimaryExpression	1
>5874	Argument	1
>5875	PrimaryExpression	1
>5876	Callee	Vector
>5877	Identifier	Vector
>5878	Callee	menu [ i ] -> scale . interpolateTo
>5879	MemberAccess	menu [ i ] -> scale . interpolateTo
>5880	Identifier	interpolateTo
>5881	PtrMemberAccess	menu [ i ] -> scale
>5882	Identifier	scale
>5883	ArrayIndexing	menu [ i ]
>5884	Identifier	i
>5885	Identifier	menu
>5886	IncDecOp	 
>5887	IncDec	++
>5888	Identifier	i
>5889	Condition	 
>5890	RelationalExpression	i < menu . size ( )
>5891	CallExpression	menu . size ( )
>5892	ArgumentList	 
>5893	Callee	menu . size
>5894	MemberAccess	menu . size
>5895	Identifier	size
>5896	Identifier	menu
>5897	Identifier	i
>5898	ForInit	 
>5899	AssignmentExpr	i = 0
>5900	PrimaryExpression	0
>5901	Identifier	i
>5902	Condition	 
>5903	UnaryOp	! optionsOnly
>5904	Identifier	optionsOnly
>5905	UnaryOperator	!
>5906	SwitchStatement	switch ( useMenuPage )
>5907	CompoundStatement	 
>5908	CompoundStatement	 
>5909	IfStatement	if ( optionsOnly )
>5910	ElseStatement	else
>5911	CompoundStatement	 
>5912	ExpressionStatement	 
>5913	CallExpression	( ( AquariaMenuItem * ) menu [ 5 ] ) -> setFocus ( true )
>5914	ArgumentList	true
>5915	Argument	true
>5916	Identifier	true
>5917	Callee	( ( AquariaMenuItem * ) menu [ 5 ] ) -> setFocus
>5918	PtrMemberAccess	( ( AquariaMenuItem * ) menu [ 5 ] ) -> setFocus
>5919	Identifier	setFocus
>5920	CastExpression	( AquariaMenuItem * ) menu [ 5 ]
>5921	ArrayIndexing	menu [ 5 ]
>5922	PrimaryExpression	5
>5923	Identifier	menu
>5924	CastTarget	AquariaMenuItem *
>5925	ForStatement	for ( i = 0 ; i < menu . size ( ) ; i ++ )
>5926	CompoundStatement	 
>5927	ExpressionStatement	 
>5928	AssignmentExpr	menu [ i ] -> alpha = 0
>5929	PrimaryExpression	0
>5930	PtrMemberAccess	menu [ i ] -> alpha
>5931	Identifier	alpha
>5932	ArrayIndexing	menu [ i ]
>5933	Identifier	i
>5934	Identifier	menu
>5935	ExpressionStatement	 
>5936	AssignmentExpr	menu [ i ] -> scale = Vector ( 0 , 0 )
>5937	CallExpression	Vector ( 0 , 0 )
>5938	ArgumentList	0
>5939	Argument	0
>5940	PrimaryExpression	0
>5941	Argument	0
>5942	PrimaryExpression	0
>5943	Callee	Vector
>5944	Identifier	Vector
>5945	PtrMemberAccess	menu [ i ] -> scale
>5946	Identifier	scale
>5947	ArrayIndexing	menu [ i ]
>5948	Identifier	i
>5949	Identifier	menu
>5950	IncDecOp	 
>5951	IncDec	++
>5952	Identifier	i
>5953	Condition	 
>5954	RelationalExpression	i < menu . size ( )
>5955	CallExpression	menu . size ( )
>5956	ArgumentList	 
>5957	Callee	menu . size
>5958	MemberAccess	menu . size
>5959	Identifier	size
>5960	Identifier	menu
>5961	Identifier	i
>5962	ForInit	 
>5963	AssignmentExpr	i = 0
>5964	PrimaryExpression	0
>5965	Identifier	i
>5966	IfStatement	if ( menuSongs )
>5967	CompoundStatement	 
>5968	ExpressionStatement	 
>5969	CallExpression	menuSongs -> alpha . interpolateTo ( 1 , t )
>5970	ArgumentList	1
>5971	Argument	t
>5972	Identifier	t
>5973	Argument	1
>5974	PrimaryExpression	1
>5975	Callee	menuSongs -> alpha . interpolateTo
>5976	MemberAccess	menuSongs -> alpha . interpolateTo
>5977	Identifier	interpolateTo
>5978	PtrMemberAccess	menuSongs -> alpha
>5979	Identifier	alpha
>5980	Identifier	menuSongs
>5981	Condition	 
>5982	Identifier	menuSongs
>5983	ExpressionStatement	 
>5984	CallExpression	songBubbles -> alpha . interpolateTo ( 1 , t )
>5985	ArgumentList	1
>5986	Argument	t
>5987	Identifier	t
>5988	Argument	1
>5989	PrimaryExpression	1
>5990	Callee	songBubbles -> alpha . interpolateTo
>5991	MemberAccess	songBubbles -> alpha . interpolateTo
>5992	Identifier	interpolateTo
>5993	PtrMemberAccess	songBubbles -> alpha
>5994	Identifier	alpha
>5995	Identifier	songBubbles
>5996	ExpressionStatement	 
>5997	CallExpression	toggleMainMenu ( true )
>5998	ArgumentList	true
>5999	Argument	true
>6000	Identifier	true
>6001	Callee	toggleMainMenu
>6002	Identifier	toggleMainMenu
>6003	IdentifierDeclStatement	 
>6004	IdentifierDecl	t = 0.1
>6005	AssignmentExpr	t = 0.1
>6006	PrimaryExpression	0.1
>6007	Identifier	t
>6008	Identifier	t
>6009	IdentifierDeclType	float
>6010	CompoundStatement	 
>6011	ExpressionStatement	 
>6012	CallExpression	toggleOptionsMenu ( true )
>6013	ArgumentList	true
>6014	Argument	true
>6015	Identifier	true
>6016	Callee	toggleOptionsMenu
>6017	Identifier	toggleOptionsMenu
>6018	Condition	 
>6019	Identifier	optionsOnly
>6020	Label	 
>6021	Identifier	default
>6022	Label	 
>6023	Identifier	MENUPAGE_SONGS
>6024	BreakStatement	 
>6025	ExpressionStatement	 
>6026	CallExpression	togglePetMenu ( true )
>6027	ArgumentList	true
>6028	Argument	true
>6029	Identifier	true
>6030	Callee	togglePetMenu
>6031	Identifier	togglePetMenu
>6032	Label	 
>6033	Identifier	MENUPAGE_PETS
>6034	BreakStatement	 
>6035	ExpressionStatement	 
>6036	CallExpression	toggleTreasureMenu ( true )
>6037	ArgumentList	true
>6038	Argument	true
>6039	Identifier	true
>6040	Callee	toggleTreasureMenu
>6041	Identifier	toggleTreasureMenu
>6042	Label	 
>6043	Identifier	MENUPAGE_TREASURES
>6044	BreakStatement	 
>6045	ExpressionStatement	 
>6046	CallExpression	( ( AquariaMenuItem * ) menu [ 6 ] ) -> setFocus ( true )
>6047	ArgumentList	true
>6048	Argument	true
>6049	Identifier	true
>6050	Callee	( ( AquariaMenuItem * ) menu [ 6 ] ) -> setFocus
>6051	PtrMemberAccess	( ( AquariaMenuItem * ) menu [ 6 ] ) -> setFocus
>6052	Identifier	setFocus
>6053	CastExpression	( AquariaMenuItem * ) menu [ 6 ]
>6054	ArrayIndexing	menu [ 6 ]
>6055	PrimaryExpression	6
>6056	Identifier	menu
>6057	CastTarget	AquariaMenuItem *
>6058	ExpressionStatement	 
>6059	CallExpression	toggleFoodMenu ( true )
>6060	ArgumentList	true
>6061	Argument	true
>6062	Identifier	true
>6063	Callee	toggleFoodMenu
>6064	Identifier	toggleFoodMenu
>6065	Label	 
>6066	Identifier	MENUPAGE_FOOD
>6067	Condition	 
>6068	Identifier	useMenuPage
>6069	IfStatement	if ( ! optionsOnly )
>6070	CompoundStatement	 
>6071	IfStatement	if ( menuPage != MENUPAGE_NONE )
>6072	ElseStatement	else
>6073	IfStatement	if ( dsq -> continuity . lastMenuPage != MENUPAGE_NONE )
>6074	CompoundStatement	 
>6075	ExpressionStatement	 
>6076	AssignmentExpr	useMenuPage = dsq -> continuity . lastMenuPage
>6077	MemberAccess	dsq -> continuity . lastMenuPage
>6078	Identifier	lastMenuPage
>6079	PtrMemberAccess	dsq -> continuity
>6080	Identifier	continuity
>6081	Identifier	dsq
>6082	Identifier	useMenuPage
>6083	Condition	 
>6084	EqualityExpression	dsq -> continuity . lastMenuPage != MENUPAGE_NONE
>6085	Identifier	MENUPAGE_NONE
>6086	MemberAccess	dsq -> continuity . lastMenuPage
>6087	Identifier	lastMenuPage
>6088	PtrMemberAccess	dsq -> continuity
>6089	Identifier	continuity
>6090	Identifier	dsq
>6091	CompoundStatement	 
>6092	ExpressionStatement	 
>6093	AssignmentExpr	useMenuPage = menuPage
>6094	Identifier	menuPage
>6095	Identifier	useMenuPage
>6096	Condition	 
>6097	EqualityExpression	menuPage != MENUPAGE_NONE
>6098	Identifier	MENUPAGE_NONE
>6099	Identifier	menuPage
>6100	Condition	 
>6101	UnaryOp	! optionsOnly
>6102	Identifier	optionsOnly
>6103	UnaryOperator	!
>6104	IdentifierDeclStatement	 
>6105	IdentifierDecl	useMenuPage = MENUPAGE_NONE
>6106	AssignmentExpr	useMenuPage = MENUPAGE_NONE
>6107	Identifier	MENUPAGE_NONE
>6108	Identifier	MENUPAGE_NONE
>6109	Identifier	useMenuPage
>6110	IdentifierDeclType	MenuPage
>6111	ExpressionStatement	 
>6112	CallExpression	dsq -> screenTransition -> capture ( )
>6113	ArgumentList	 
>6114	Callee	dsq -> screenTransition -> capture
>6115	PtrMemberAccess	dsq -> screenTransition -> capture
>6116	Identifier	capture
>6117	PtrMemberAccess	dsq -> screenTransition
>6118	Identifier	screenTransition
>6119	Identifier	dsq
>6120	ExpressionStatement	 
>6121	CallExpression	dsq -> main ( t )
>6122	ArgumentList	t
>6123	Argument	t
>6124	Identifier	t
>6125	Callee	dsq -> main
>6126	PtrMemberAccess	dsq -> main
>6127	Identifier	main
>6128	Identifier	dsq
>6129	ExpressionStatement	 
>6130	CallExpression	toggleMainMenu ( false )
>6131	ArgumentList	false
>6132	Argument	false
>6133	Identifier	false
>6134	Callee	toggleMainMenu
>6135	Identifier	toggleMainMenu
>6136	IfStatement	if ( dsq -> game -> miniMapRender )
>6137	CompoundStatement	 
>6138	ExpressionStatement	 
>6139	CallExpression	dsq -> game -> miniMapRender -> slide ( 1 )
>6140	ArgumentList	1
>6141	Argument	1
>6142	PrimaryExpression	1
>6143	Callee	dsq -> game -> miniMapRender -> slide
>6144	PtrMemberAccess	dsq -> game -> miniMapRender -> slide
>6145	Identifier	slide
>6146	PtrMemberAccess	dsq -> game -> miniMapRender
>6147	Identifier	miniMapRender
>6148	PtrMemberAccess	dsq -> game
>6149	Identifier	game
>6150	Identifier	dsq
>6151	Condition	 
>6152	PtrMemberAccess	dsq -> game -> miniMapRender
>6153	Identifier	miniMapRender
>6154	PtrMemberAccess	dsq -> game
>6155	Identifier	game
>6156	Identifier	dsq
>6157	ForStatement	for ( int i = 0 ; i < foodSlots . size ( ) ; i ++ )
>6158	ExpressionStatement	 
>6159	CallExpression	foodSlots [ i ] -> setHidden ( false )
>6160	ArgumentList	false
>6161	Argument	false
>6162	Identifier	false
>6163	Callee	foodSlots [ i ] -> setHidden
>6164	PtrMemberAccess	foodSlots [ i ] -> setHidden
>6165	Identifier	setHidden
>6166	ArrayIndexing	foodSlots [ i ]
>6167	Identifier	i
>6168	Identifier	foodSlots
>6169	IncDecOp	 
>6170	IncDec	++
>6171	Identifier	i
>6172	Condition	 
>6173	RelationalExpression	i < foodSlots . size ( )
>6174	CallExpression	foodSlots . size ( )
>6175	ArgumentList	 
>6176	Callee	foodSlots . size
>6177	MemberAccess	foodSlots . size
>6178	Identifier	size
>6179	Identifier	foodSlots
>6180	Identifier	i
>6181	ForInit	 
>6182	IdentifierDeclStatement	int i = 0 ;
>6183	IdentifierDecl	i = 0
>6184	AssignmentExpr	i = 0
>6185	PrimaryExpression	0
>6186	Identifier	i
>6187	Identifier	i
>6188	IdentifierDeclType	int
>6189	ExpressionStatement	 
>6190	CallExpression	treasureDescription -> setHidden ( false )
>6191	ArgumentList	false
>6192	Argument	false
>6193	Identifier	false
>6194	Callee	treasureDescription -> setHidden
>6195	PtrMemberAccess	treasureDescription -> setHidden
>6196	Identifier	setHidden
>6197	Identifier	treasureDescription
>6198	ForStatement	for ( int i = 0 ; i < treasureSlots . size ( ) ; i ++ )
>6199	ExpressionStatement	 
>6200	CallExpression	treasureSlots [ i ] -> setHidden ( false )
>6201	ArgumentList	false
>6202	Argument	false
>6203	Identifier	false
>6204	Callee	treasureSlots [ i ] -> setHidden
>6205	PtrMemberAccess	treasureSlots [ i ] -> setHidden
>6206	Identifier	setHidden
>6207	ArrayIndexing	treasureSlots [ i ]
>6208	Identifier	i
>6209	Identifier	treasureSlots
>6210	IncDecOp	 
>6211	IncDec	++
>6212	Identifier	i
>6213	Condition	 
>6214	RelationalExpression	i < treasureSlots . size ( )
>6215	CallExpression	treasureSlots . size ( )
>6216	ArgumentList	 
>6217	Callee	treasureSlots . size
>6218	MemberAccess	treasureSlots . size
>6219	Identifier	size
>6220	Identifier	treasureSlots
>6221	Identifier	i
>6222	ForInit	 
>6223	IdentifierDeclStatement	int i = 0 ;
>6224	IdentifierDecl	i = 0
>6225	AssignmentExpr	i = 0
>6226	PrimaryExpression	0
>6227	Identifier	i
>6228	Identifier	i
>6229	IdentifierDeclType	int
>6230	ForStatement	for ( int i = 0 ; i < menu . size ( ) ; i ++ )
>6231	ExpressionStatement	 
>6232	CallExpression	menu [ i ] -> setHidden ( false )
>6233	ArgumentList	false
>6234	Argument	false
>6235	Identifier	false
>6236	Callee	menu [ i ] -> setHidden
>6237	PtrMemberAccess	menu [ i ] -> setHidden
>6238	Identifier	setHidden
>6239	ArrayIndexing	menu [ i ]
>6240	Identifier	i
>6241	Identifier	menu
>6242	IncDecOp	 
>6243	IncDec	++
>6244	Identifier	i
>6245	Condition	 
>6246	RelationalExpression	i < menu . size ( )
>6247	CallExpression	menu . size ( )
>6248	ArgumentList	 
>6249	Callee	menu . size
>6250	MemberAccess	menu . size
>6251	Identifier	size
>6252	Identifier	menu
>6253	Identifier	i
>6254	ForInit	 
>6255	IdentifierDeclStatement	int i = 0 ;
>6256	IdentifierDecl	i = 0
>6257	AssignmentExpr	i = 0
>6258	PrimaryExpression	0
>6259	Identifier	i
>6260	Identifier	i
>6261	IdentifierDeclType	int
>6262	ExpressionStatement	 
>6263	CallExpression	menuIconGlow -> setHidden ( false )
>6264	ArgumentList	false
>6265	Argument	false
>6266	Identifier	false
>6267	Callee	menuIconGlow -> setHidden
>6268	PtrMemberAccess	menuIconGlow -> setHidden
>6269	Identifier	setHidden
>6270	Identifier	menuIconGlow
>6271	ExpressionStatement	 
>6272	CallExpression	eNo -> setHidden ( false )
>6273	ArgumentList	false
>6274	Argument	false
>6275	Identifier	false
>6276	Callee	eNo -> setHidden
>6277	PtrMemberAccess	eNo -> setHidden
>6278	Identifier	setHidden
>6279	Identifier	eNo
>6280	ExpressionStatement	 
>6281	CallExpression	eYes -> setHidden ( false )
>6282	ArgumentList	false
>6283	Argument	false
>6284	Identifier	false
>6285	Callee	eYes -> setHidden
>6286	PtrMemberAccess	eYes -> setHidden
>6287	Identifier	setHidden
>6288	Identifier	eYes
>6289	ExpressionStatement	 
>6290	CallExpression	eAre -> setHidden ( false )
>6291	ArgumentList	false
>6292	Argument	false
>6293	Identifier	false
>6294	Callee	eAre -> setHidden
>6295	PtrMemberAccess	eAre -> setHidden
>6296	Identifier	setHidden
>6297	Identifier	eAre
>6298	ExpressionStatement	 
>6299	CallExpression	menuDescription -> setHidden ( false )
>6300	ArgumentList	false
>6301	Argument	false
>6302	Identifier	false
>6303	Callee	menuDescription -> setHidden
>6304	PtrMemberAccess	menuDescription -> setHidden
>6305	Identifier	setHidden
>6306	Identifier	menuDescription
>6307	ExpressionStatement	 
>6308	CallExpression	recipeMenu . nextPage -> setHidden ( false )
>6309	ArgumentList	false
>6310	Argument	false
>6311	Identifier	false
>6312	Callee	recipeMenu . nextPage -> setHidden
>6313	PtrMemberAccess	recipeMenu . nextPage -> setHidden
>6314	Identifier	setHidden
>6315	MemberAccess	recipeMenu . nextPage
>6316	Identifier	nextPage
>6317	Identifier	recipeMenu
>6318	ExpressionStatement	 
>6319	CallExpression	recipeMenu . prevPage -> setHidden ( false )
>6320	ArgumentList	false
>6321	Argument	false
>6322	Identifier	false
>6323	Callee	recipeMenu . prevPage -> setHidden
>6324	PtrMemberAccess	recipeMenu . prevPage -> setHidden
>6325	Identifier	setHidden
>6326	MemberAccess	recipeMenu . prevPage
>6327	Identifier	prevPage
>6328	Identifier	recipeMenu
>6329	ExpressionStatement	 
>6330	CallExpression	recipeMenu . page -> setHidden ( false )
>6331	ArgumentList	false
>6332	Argument	false
>6333	Identifier	false
>6334	Callee	recipeMenu . page -> setHidden
>6335	PtrMemberAccess	recipeMenu . page -> setHidden
>6336	Identifier	setHidden
>6337	MemberAccess	recipeMenu . page
>6338	Identifier	page
>6339	Identifier	recipeMenu
>6340	ExpressionStatement	 
>6341	CallExpression	recipeMenu . header -> setHidden ( false )
>6342	ArgumentList	false
>6343	Argument	false
>6344	Identifier	false
>6345	Callee	recipeMenu . header -> setHidden
>6346	PtrMemberAccess	recipeMenu . header -> setHidden
>6347	Identifier	setHidden
>6348	MemberAccess	recipeMenu . header
>6349	Identifier	header
>6350	Identifier	recipeMenu
>6351	ExpressionStatement	 
>6352	CallExpression	recipeMenu . scrollEnd -> setHidden ( false )
>6353	ArgumentList	false
>6354	Argument	false
>6355	Identifier	false
>6356	Callee	recipeMenu . scrollEnd -> setHidden
>6357	PtrMemberAccess	recipeMenu . scrollEnd -> setHidden
>6358	Identifier	setHidden
>6359	MemberAccess	recipeMenu . scrollEnd
>6360	Identifier	scrollEnd
>6361	Identifier	recipeMenu
>6362	ExpressionStatement	 
>6363	CallExpression	recipeMenu . scroll -> setHidden ( false )
>6364	ArgumentList	false
>6365	Argument	false
>6366	Identifier	false
>6367	Callee	recipeMenu . scroll -> setHidden
>6368	PtrMemberAccess	recipeMenu . scroll -> setHidden
>6369	Identifier	setHidden
>6370	MemberAccess	recipeMenu . scroll
>6371	Identifier	scroll
>6372	Identifier	recipeMenu
>6373	ExpressionStatement	 
>6374	CallExpression	showRecipe -> setHidden ( false )
>6375	ArgumentList	false
>6376	Argument	false
>6377	Identifier	false
>6378	Callee	showRecipe -> setHidden
>6379	PtrMemberAccess	showRecipe -> setHidden
>6380	Identifier	setHidden
>6381	Identifier	showRecipe
>6382	ExpressionStatement	 
>6383	CallExpression	previewRecipe -> setHidden ( false )
>6384	ArgumentList	false
>6385	Argument	false
>6386	Identifier	false
>6387	Callee	previewRecipe -> setHidden
>6388	PtrMemberAccess	previewRecipe -> setHidden
>6389	Identifier	setHidden
>6390	Identifier	previewRecipe
>6391	ExpressionStatement	 
>6392	CallExpression	circlePageNum -> setHidden ( false )
>6393	ArgumentList	false
>6394	Argument	false
>6395	Identifier	false
>6396	Callee	circlePageNum -> setHidden
>6397	PtrMemberAccess	circlePageNum -> setHidden
>6398	Identifier	setHidden
>6399	Identifier	circlePageNum
>6400	ExpressionStatement	 
>6401	CallExpression	nextTreasure -> setHidden ( false )
>6402	ArgumentList	false
>6403	Argument	false
>6404	Identifier	false
>6405	Callee	nextTreasure -> setHidden
>6406	PtrMemberAccess	nextTreasure -> setHidden
>6407	Identifier	setHidden
>6408	Identifier	nextTreasure
>6409	ExpressionStatement	 
>6410	CallExpression	prevTreasure -> setHidden ( false )
>6411	ArgumentList	false
>6412	Argument	false
>6413	Identifier	false
>6414	Callee	prevTreasure -> setHidden
>6415	PtrMemberAccess	prevTreasure -> setHidden
>6416	Identifier	setHidden
>6417	Identifier	prevTreasure
>6418	ExpressionStatement	 
>6419	CallExpression	nextFood -> setHidden ( false )
>6420	ArgumentList	false
>6421	Argument	false
>6422	Identifier	false
>6423	Callee	nextFood -> setHidden
>6424	PtrMemberAccess	nextFood -> setHidden
>6425	Identifier	setHidden
>6426	Identifier	nextFood
>6427	ExpressionStatement	 
>6428	CallExpression	prevFood -> setHidden ( false )
>6429	ArgumentList	false
>6430	Argument	false
>6431	Identifier	false
>6432	Callee	prevFood -> setHidden
>6433	PtrMemberAccess	prevFood -> setHidden
>6434	Identifier	setHidden
>6435	Identifier	prevFood
>6436	ExpressionStatement	 
>6437	CallExpression	use -> setHidden ( false )
>6438	ArgumentList	false
>6439	Argument	false
>6440	Identifier	false
>6441	Callee	use -> setHidden
>6442	PtrMemberAccess	use -> setHidden
>6443	Identifier	setHidden
>6444	Identifier	use
>6445	ExpressionStatement	 
>6446	CallExpression	recipes -> setHidden ( false )
>6447	ArgumentList	false
>6448	Argument	false
>6449	Identifier	false
>6450	Callee	recipes -> setHidden
>6451	PtrMemberAccess	recipes -> setHidden
>6452	Identifier	setHidden
>6453	Identifier	recipes
>6454	ExpressionStatement	 
>6455	CallExpression	foodSort -> setHidden ( false )
>6456	ArgumentList	false
>6457	Argument	false
>6458	Identifier	false
>6459	Callee	foodSort -> setHidden
>6460	PtrMemberAccess	foodSort -> setHidden
>6461	Identifier	setHidden
>6462	Identifier	foodSort
>6463	ExpressionStatement	 
>6464	CallExpression	cook -> setHidden ( false )
>6465	ArgumentList	false
>6466	Argument	false
>6467	Identifier	false
>6468	Callee	cook -> setHidden
>6469	PtrMemberAccess	cook -> setHidden
>6470	Identifier	setHidden
>6471	Identifier	cook
>6472	ExpressionStatement	 
>6473	CallExpression	keyConfigButton -> setHidden ( false )
>6474	ArgumentList	false
>6475	Argument	false
>6476	Identifier	false
>6477	Callee	keyConfigButton -> setHidden
>6478	PtrMemberAccess	keyConfigButton -> setHidden
>6479	Identifier	setHidden
>6480	Identifier	keyConfigButton
>6481	ExpressionStatement	 
>6482	CallExpression	options -> setHidden ( false )
>6483	ArgumentList	false
>6484	Argument	false
>6485	Identifier	false
>6486	Callee	options -> setHidden
>6487	PtrMemberAccess	options -> setHidden
>6488	Identifier	setHidden
>6489	Identifier	options
>6490	ExpressionStatement	 
>6491	CallExpression	opt_cancel -> setHidden ( false )
>6492	ArgumentList	false
>6493	Argument	false
>6494	Identifier	false
>6495	Callee	opt_cancel -> setHidden
>6496	PtrMemberAccess	opt_cancel -> setHidden
>6497	Identifier	setHidden
>6498	Identifier	opt_cancel
>6499	ExpressionStatement	 
>6500	CallExpression	opt_save -> setHidden ( false )
>6501	ArgumentList	false
>6502	Argument	false
>6503	Identifier	false
>6504	Callee	opt_save -> setHidden
>6505	PtrMemberAccess	opt_save -> setHidden
>6506	Identifier	setHidden
>6507	Identifier	opt_save
>6508	ExpressionStatement	 
>6509	CallExpression	menuBg -> setHidden ( false )
>6510	ArgumentList	false
>6511	Argument	false
>6512	Identifier	false
>6513	Callee	menuBg -> setHidden
>6514	PtrMemberAccess	menuBg -> setHidden
>6515	Identifier	setHidden
>6516	Identifier	menuBg
>6517	ExpressionStatement	 
>6518	CallExpression	menuBg -> alpha . interpolateTo ( 1 , t * 0.5f )
>6519	ArgumentList	1
>6520	Argument	t * 0.5f
>6521	MultiplicativeExpression	t * 0.5f
>6522	PrimaryExpression	0.5f
>6523	Identifier	t
>6524	Argument	1
>6525	PrimaryExpression	1
>6526	Callee	menuBg -> alpha . interpolateTo
>6527	MemberAccess	menuBg -> alpha . interpolateTo
>6528	Identifier	interpolateTo
>6529	PtrMemberAccess	menuBg -> alpha
>6530	Identifier	alpha
>6531	Identifier	menuBg
>6532	ExpressionStatement	 
>6533	CallExpression	menuBg -> scale . interpolateTo ( menuBgScale , t )
>6534	ArgumentList	menuBgScale
>6535	Argument	t
>6536	Identifier	t
>6537	Argument	menuBgScale
>6538	Identifier	menuBgScale
>6539	Callee	menuBg -> scale . interpolateTo
>6540	MemberAccess	menuBg -> scale . interpolateTo
>6541	Identifier	interpolateTo
>6542	PtrMemberAccess	menuBg -> scale
>6543	Identifier	scale
>6544	Identifier	menuBg
>6545	ExpressionStatement	 
>6546	AssignmentExpr	menuBg -> scale = menuBgScale * 0.5f
>6547	MultiplicativeExpression	menuBgScale * 0.5f
>6548	PrimaryExpression	0.5f
>6549	Identifier	menuBgScale
>6550	PtrMemberAccess	menuBg -> scale
>6551	Identifier	scale
>6552	Identifier	menuBg
>6553	ExpressionStatement	 
>6554	CallExpression	menuDescription -> alpha . interpolateTo ( 1 , t )
>6555	ArgumentList	1
>6556	Argument	t
>6557	Identifier	t
>6558	Argument	1
>6559	PrimaryExpression	1
>6560	Callee	menuDescription -> alpha . interpolateTo
>6561	MemberAccess	menuDescription -> alpha . interpolateTo
>6562	Identifier	interpolateTo
>6563	PtrMemberAccess	menuDescription -> alpha
>6564	Identifier	alpha
>6565	Identifier	menuDescription
>6566	ExpressionStatement	 
>6567	CallExpression	menuDescription -> setText ( \"\" )
>6568	ArgumentList	\"\"
>6569	Argument	\"\"
>6570	PrimaryExpression	\"\"
>6571	Callee	menuDescription -> setText
>6572	PtrMemberAccess	menuDescription -> setText
>6573	Identifier	setText
>6574	Identifier	menuDescription
>6575	ForStatement	for ( i = 0 ; i < songSlots . size ( ) ; i ++ )
>6576	CompoundStatement	 
>6577	IfStatement	if ( dsq -> continuity . hasSong ( dsq -> continuity . getSongTypeBySlot ( i ) ) )
>6578	ElseStatement	else
>6579	ExpressionStatement	 
>6580	AssignmentExpr	songSlots [ i ] -> alpha = 0
>6581	PrimaryExpression	0
>6582	PtrMemberAccess	songSlots [ i ] -> alpha
>6583	Identifier	alpha
>6584	ArrayIndexing	songSlots [ i ]
>6585	Identifier	i
>6586	Identifier	songSlots
>6587	ExpressionStatement	 
>6588	CallExpression	songSlots [ i ] -> alpha . interpolateTo ( 1 , t )
>6589	ArgumentList	1
>6590	Argument	t
>6591	Identifier	t
>6592	Argument	1
>6593	PrimaryExpression	1
>6594	Callee	songSlots [ i ] -> alpha . interpolateTo
>6595	MemberAccess	songSlots [ i ] -> alpha . interpolateTo
>6596	Identifier	interpolateTo
>6597	PtrMemberAccess	songSlots [ i ] -> alpha
>6598	Identifier	alpha
>6599	ArrayIndexing	songSlots [ i ]
>6600	Identifier	i
>6601	Identifier	songSlots
>6602	Condition	 
>6603	CallExpression	dsq -> continuity . hasSong ( dsq -> continuity . getSongTypeBySlot ( i ) )
>6604	ArgumentList	dsq -> continuity . getSongTypeBySlot ( i )
>6605	Argument	dsq -> continuity . getSongTypeBySlot ( i )
>6606	CallExpression	dsq -> continuity . getSongTypeBySlot ( i )
>6607	ArgumentList	i
>6608	Argument	i
>6609	Identifier	i
>6610	Callee	dsq -> continuity . getSongTypeBySlot
>6611	MemberAccess	dsq -> continuity . getSongTypeBySlot
>6612	Identifier	getSongTypeBySlot
>6613	PtrMemberAccess	dsq -> continuity
>6614	Identifier	continuity
>6615	Identifier	dsq
>6616	Callee	dsq -> continuity . hasSong
>6617	MemberAccess	dsq -> continuity . hasSong
>6618	Identifier	hasSong
>6619	PtrMemberAccess	dsq -> continuity
>6620	Identifier	continuity
>6621	Identifier	dsq
>6622	IncDecOp	 
>6623	IncDec	++
>6624	Identifier	i
>6625	Condition	 
>6626	RelationalExpression	i < songSlots . size ( )
>6627	CallExpression	songSlots . size ( )
>6628	ArgumentList	 
>6629	Callee	songSlots . size
>6630	MemberAccess	songSlots . size
>6631	Identifier	size
>6632	Identifier	songSlots
>6633	Identifier	i
>6634	ForInit	 
>6635	AssignmentExpr	i = 0
>6636	PrimaryExpression	0
>6637	Identifier	i
>6638	IdentifierDeclStatement	 
>6639	IdentifierDecl	i = 0
>6640	AssignmentExpr	i = 0
>6641	PrimaryExpression	0
>6642	Identifier	i
>6643	Identifier	i
>6644	IdentifierDeclType	int
>6645	IfStatement	if ( dsq -> continuity . getFlag ( FLAG_LI ) >= 100 )
>6646	ElseStatement	else
>6647	ExpressionStatement	 
>6648	AssignmentExpr	liCrystal -> alphaMod = 0
>6649	PrimaryExpression	0
>6650	PtrMemberAccess	liCrystal -> alphaMod
>6651	Identifier	alphaMod
>6652	Identifier	liCrystal
>6653	ExpressionStatement	 
>6654	AssignmentExpr	liCrystal -> alphaMod = 1
>6655	PrimaryExpression	1
>6656	PtrMemberAccess	liCrystal -> alphaMod
>6657	Identifier	alphaMod
>6658	Identifier	liCrystal
>6659	Condition	 
>6660	RelationalExpression	dsq -> continuity . getFlag ( FLAG_LI ) >= 100
>6661	PrimaryExpression	100
>6662	CallExpression	dsq -> continuity . getFlag ( FLAG_LI )
>6663	ArgumentList	FLAG_LI
>6664	Argument	FLAG_LI
>6665	Identifier	FLAG_LI
>6666	Callee	dsq -> continuity . getFlag
>6667	MemberAccess	dsq -> continuity . getFlag
>6668	Identifier	getFlag
>6669	PtrMemberAccess	dsq -> continuity
>6670	Identifier	continuity
>6671	Identifier	dsq
>6672	IfStatement	if ( dsq -> continuity . hasFormUpgrade ( FORMUPGRADE_ENERGY2 ) )
>6673	ElseStatement	else
>6674	ExpressionStatement	 
>6675	AssignmentExpr	energyIdol -> alphaMod = 0
>6676	PrimaryExpression	0
>6677	PtrMemberAccess	energyIdol -> alphaMod
>6678	Identifier	alphaMod
>6679	Identifier	energyIdol
>6680	ExpressionStatement	 
>6681	AssignmentExpr	energyIdol -> alphaMod = 1
>6682	PrimaryExpression	1
>6683	PtrMemberAccess	energyIdol -> alphaMod
>6684	Identifier	alphaMod
>6685	Identifier	energyIdol
>6686	Condition	 
>6687	CallExpression	dsq -> continuity . hasFormUpgrade ( FORMUPGRADE_ENERGY2 )
>6688	ArgumentList	FORMUPGRADE_ENERGY2
>6689	Argument	FORMUPGRADE_ENERGY2
>6690	Identifier	FORMUPGRADE_ENERGY2
>6691	Callee	dsq -> continuity . hasFormUpgrade
>6692	MemberAccess	dsq -> continuity . hasFormUpgrade
>6693	Identifier	hasFormUpgrade
>6694	PtrMemberAccess	dsq -> continuity
>6695	Identifier	continuity
>6696	Identifier	dsq
>6697	IfStatement	if ( optionsOnly )
>6698	ElseStatement	else
>6699	CompoundStatement	 
>6700	ExpressionStatement	 
>6701	CallExpression	menuBg2 -> alpha . interpolateTo ( 1 , t * 0.5f )
>6702	ArgumentList	1
>6703	Argument	t * 0.5f
>6704	MultiplicativeExpression	t * 0.5f
>6705	PrimaryExpression	0.5f
>6706	Identifier	t
>6707	Argument	1
>6708	PrimaryExpression	1
>6709	Callee	menuBg2 -> alpha . interpolateTo
>6710	MemberAccess	menuBg2 -> alpha . interpolateTo
>6711	Identifier	interpolateTo
>6712	PtrMemberAccess	menuBg2 -> alpha
>6713	Identifier	alpha
>6714	Identifier	menuBg2
>6715	ExpressionStatement	 
>6716	AssignmentExpr	menuBg2 -> alpha = 0
>6717	PrimaryExpression	0
>6718	PtrMemberAccess	menuBg2 -> alpha
>6719	Identifier	alpha
>6720	Identifier	menuBg2
>6721	CompoundStatement	 
>6722	ExpressionStatement	 
>6723	AssignmentExpr	menuBg2 -> alpha = 0
>6724	PrimaryExpression	0
>6725	PtrMemberAccess	menuBg2 -> alpha
>6726	Identifier	alpha
>6727	Identifier	menuBg2
>6728	ExpressionStatement	 
>6729	CallExpression	addRenderObject ( menu_blackout , LR_AFTER_EFFECTS )
>6730	ArgumentList	menu_blackout
>6731	Argument	LR_AFTER_EFFECTS
>6732	Identifier	LR_AFTER_EFFECTS
>6733	Argument	menu_blackout
>6734	Identifier	menu_blackout
>6735	Callee	addRenderObject
>6736	Identifier	addRenderObject
>6737	ExpressionStatement	 
>6738	CallExpression	menu_blackout -> alpha . interpolateTo ( 1 , 0.5 )
>6739	ArgumentList	1
>6740	Argument	0.5
>6741	PrimaryExpression	0.5
>6742	Argument	1
>6743	PrimaryExpression	1
>6744	Callee	menu_blackout -> alpha . interpolateTo
>6745	MemberAccess	menu_blackout -> alpha . interpolateTo
>6746	Identifier	interpolateTo
>6747	PtrMemberAccess	menu_blackout -> alpha
>6748	Identifier	alpha
>6749	Identifier	menu_blackout
>6750	ExpressionStatement	 
>6751	AssignmentExpr	menu_blackout -> alpha = 0
>6752	PrimaryExpression	0
>6753	PtrMemberAccess	menu_blackout -> alpha
>6754	Identifier	alpha
>6755	Identifier	menu_blackout
>6756	ExpressionStatement	 
>6757	AssignmentExpr	menu_blackout -> alphaMod = 0.75
>6758	PrimaryExpression	0.75
>6759	PtrMemberAccess	menu_blackout -> alphaMod
>6760	Identifier	alphaMod
>6761	Identifier	menu_blackout
>6762	ExpressionStatement	 
>6763	AssignmentExpr	menu_blackout -> position = Vector ( 400 , 300 )
>6764	CallExpression	Vector ( 400 , 300 )
>6765	ArgumentList	400
>6766	Argument	300
>6767	PrimaryExpression	300
>6768	Argument	400
>6769	PrimaryExpression	400
>6770	Callee	Vector
>6771	Identifier	Vector
>6772	PtrMemberAccess	menu_blackout -> position
>6773	Identifier	position
>6774	Identifier	menu_blackout
>6775	ExpressionStatement	 
>6776	AssignmentExpr	menu_blackout -> followCamera = 1
>6777	PrimaryExpression	1
>6778	PtrMemberAccess	menu_blackout -> followCamera
>6779	Identifier	followCamera
>6780	Identifier	menu_blackout
>6781	ExpressionStatement	 
>6782	AssignmentExpr	menu_blackout -> autoHeight = AUTO_VIRTUALHEIGHT
>6783	Identifier	AUTO_VIRTUALHEIGHT
>6784	PtrMemberAccess	menu_blackout -> autoHeight
>6785	Identifier	autoHeight
>6786	Identifier	menu_blackout
>6787	ExpressionStatement	 
>6788	AssignmentExpr	menu_blackout -> autoWidth = AUTO_VIRTUALWIDTH
>6789	Identifier	AUTO_VIRTUALWIDTH
>6790	PtrMemberAccess	menu_blackout -> autoWidth
>6791	Identifier	autoWidth
>6792	Identifier	menu_blackout
>6793	ExpressionStatement	 
>6794	AssignmentExpr	menu_blackout -> color = 0
>6795	PrimaryExpression	0
>6796	PtrMemberAccess	menu_blackout -> color
>6797	Identifier	color
>6798	Identifier	menu_blackout
>6799	ExpressionStatement	 
>6800	Identifier	Quad
>6801	Statement	 
>6802	Statement	 
>6803	Statement	 
>6804	Condition	 
>6805	Identifier	optionsOnly
>6806	IfStatement	if ( ! optionsOnly )
>6807	CompoundStatement	 
>6808	ExpressionStatement	 
>6809	CallExpression	togglePause ( true )
>6810	ArgumentList	true
>6811	Argument	true
>6812	Identifier	true
>6813	Callee	togglePause
>6814	Identifier	togglePause
>6815	Condition	 
>6816	UnaryOp	! optionsOnly
>6817	Identifier	optionsOnly
>6818	UnaryOperator	!
>6819	IdentifierDeclStatement	 
>6820	IdentifierDecl	t = 0.3
>6821	AssignmentExpr	t = 0.3
>6822	PrimaryExpression	0.3
>6823	Identifier	t
>6824	Identifier	t
>6825	IdentifierDeclType	float
>6826	ExpressionStatement	 
>6827	CallExpression	dsq -> overlay -> alpha . interpolateTo ( 0 , 0.1 )
>6828	ArgumentList	0
>6829	Argument	0.1
>6830	PrimaryExpression	0.1
>6831	Argument	0
>6832	PrimaryExpression	0
>6833	Callee	dsq -> overlay -> alpha . interpolateTo
>6834	MemberAccess	dsq -> overlay -> alpha . interpolateTo
>6835	Identifier	interpolateTo
>6836	PtrMemberAccess	dsq -> overlay -> alpha
>6837	Identifier	alpha
>6838	PtrMemberAccess	dsq -> overlay
>6839	Identifier	overlay
>6840	Identifier	dsq
>6841	ExpressionStatement	 
>6842	CallExpression	toggleOptionsMenu ( false )
>6843	ArgumentList	false
>6844	Argument	false
>6845	Identifier	false
>6846	Callee	toggleOptionsMenu
>6847	Identifier	toggleOptionsMenu
>6848	IfStatement	if ( dsq -> game -> autoMap && dsq -> game -> autoMap -> isOn ( ) )
>6849	ExpressionStatement	 
>6850	CallExpression	dsq -> game -> autoMap -> toggle ( false )
>6851	ArgumentList	false
>6852	Argument	false
>6853	Identifier	false
>6854	Callee	dsq -> game -> autoMap -> toggle
>6855	PtrMemberAccess	dsq -> game -> autoMap -> toggle
>6856	Identifier	toggle
>6857	PtrMemberAccess	dsq -> game -> autoMap
>6858	Identifier	autoMap
>6859	PtrMemberAccess	dsq -> game
>6860	Identifier	game
>6861	Identifier	dsq
>6862	Condition	 
>6863	AndExpression	dsq -> game -> autoMap && dsq -> game -> autoMap -> isOn ( )
>6864	CallExpression	dsq -> game -> autoMap -> isOn ( )
>6865	ArgumentList	 
>6866	Callee	dsq -> game -> autoMap -> isOn
>6867	PtrMemberAccess	dsq -> game -> autoMap -> isOn
>6868	Identifier	isOn
>6869	PtrMemberAccess	dsq -> game -> autoMap
>6870	Identifier	autoMap
>6871	PtrMemberAccess	dsq -> game
>6872	Identifier	game
>6873	Identifier	dsq
>6874	PtrMemberAccess	dsq -> game -> autoMap
>6875	Identifier	autoMap
>6876	PtrMemberAccess	dsq -> game
>6877	Identifier	game
>6878	Identifier	dsq
>6879	IfStatement	if ( avatar -> isEntityDead ( ) )
>6880	ReturnStatement	 
>6881	Condition	 
>6882	CallExpression	avatar -> isEntityDead ( )
>6883	ArgumentList	 
>6884	Callee	avatar -> isEntityDead
>6885	PtrMemberAccess	avatar -> isEntityDead
>6886	Identifier	isEntityDead
>6887	Identifier	avatar
>6888	ExpressionStatement	 
>6889	CallExpression	dropIngrNames . clear ( )
>6890	ArgumentList	 
>6891	Callee	dropIngrNames . clear
>6892	MemberAccess	dropIngrNames . clear
>6893	Identifier	clear
>6894	Identifier	dropIngrNames
>6895	ExpressionStatement	 
>6896	CallExpression	core -> sound -> playSfx ( \"Menu-Open\" )
>6897	ArgumentList	\"Menu-Open\"
>6898	Argument	\"Menu-Open\"
>6899	PrimaryExpression	\"Menu-Open\"
>6900	Callee	core -> sound -> playSfx
>6901	PtrMemberAccess	core -> sound -> playSfx
>6902	Identifier	playSfx
>6903	PtrMemberAccess	core -> sound
>6904	Identifier	sound
>6905	Identifier	core
>6906	ExpressionStatement	 
>6907	AssignmentExpr	this -> optionsOnly = optionsOnly
>6908	Identifier	optionsOnly
>6909	PtrMemberAccess	this -> optionsOnly
>6910	Identifier	optionsOnly
>6911	Identifier	this
>6912	ExpressionStatement	 
>6913	AssignmentExpr	selectedTreasureFlag = - 1
>6914	UnaryOp	- 1
>6915	PrimaryExpression	1
>6916	UnaryOperator	-
>6917	Identifier	selectedTreasureFlag
>6918	ExpressionStatement	 
>6919	CallExpression	dsq -> game -> clearControlHint ( )
>6920	ArgumentList	 
>6921	Callee	dsq -> game -> clearControlHint
>6922	PtrMemberAccess	dsq -> game -> clearControlHint
>6923	Identifier	clearControlHint
>6924	PtrMemberAccess	dsq -> game
>6925	Identifier	game
>6926	Identifier	dsq
>6927	Condition	 
>6928	AndExpression	avatar && core -> getNestedMains ( ) == 1 && ! avatar -> isSinging ( ) && ( ignoreInput || avatar -> \
>6929	AndExpression	core -> getNestedMains ( ) == 1 && ! avatar -> isSinging ( ) && ( ignoreInput || avatar -> isInputEnabled ( ) )
>6930	AndExpression	! avatar -> isSinging ( ) && ( ignoreInput || avatar -> isInputEnabled ( ) )
>6931	OrExpression	ignoreInput || avatar -> isInputEnabled ( )
>6932	CallExpression	avatar -> isInputEnabled ( )
>6933	ArgumentList	 
>6934	Callee	avatar -> isInputEnabled
>6935	PtrMemberAccess	avatar -> isInputEnabled
>6936	Identifier	isInputEnabled
>6937	Identifier	avatar
>6938	Identifier	ignoreInput
>6939	UnaryOp	! avatar -> isSinging ( )
>6940	CallExpression	avatar -> isSinging ( )
>6941	ArgumentList	 
>6942	Callee	avatar -> isSinging
>6943	PtrMemberAccess	avatar -> isSinging
>6944	Identifier	isSinging
>6945	Identifier	avatar
>6946	UnaryOperator	!
>6947	EqualityExpression	core -> getNestedMains ( ) == 1
>6948	PrimaryExpression	1
>6949	CallExpression	core -> getNestedMains ( )
>6950	ArgumentList	 
>6951	Callee	core -> getNestedMains
>6952	PtrMemberAccess	core -> getNestedMains
>6953	Identifier	getNestedMains
>6954	Identifier	core
>6955	Identifier	avatar
>7093	FunctionDef	Game 
>7094	ParameterList	IngredientData * data
>7095	Parameter	 
>7096	Identifier	data
>7097	ParameterType	IngredientData *
>7098	ReturnType	void
>7099	CompoundStatement	 
>7100	ExpressionStatement	 
>7101	AssignmentExpr	ingOffYTimer = 2
>7102	PrimaryExpression	2
>7103	Identifier	ingOffYTimer
>7104	ExpressionStatement	 
>7105	AssignmentExpr	ingOffY -= 40
>7106	PrimaryExpression	40
>7107	Identifier	ingOffY
>7108	ExpressionStatement	 
>7109	CallExpression	addRenderObject ( q , LR_HELP )
>7110	ArgumentList	q
>7111	Argument	LR_HELP
>7112	Identifier	LR_HELP
>7113	Argument	q
>7114	Identifier	q
>7115	Callee	addRenderObject
>7116	Identifier	addRenderObject
>7117	ExpressionStatement	 
>7118	CallExpression	q -> setDecayRate ( 0.5 )
>7119	ArgumentList	0.5
>7120	Argument	0.5
>7121	PrimaryExpression	0.5
>7122	Callee	q -> setDecayRate
>7123	PtrMemberAccess	q -> setDecayRate
>7124	Identifier	setDecayRate
>7125	Identifier	q
>7126	ExpressionStatement	 
>7127	CallExpression	q -> setLife ( 1 )
>7128	ArgumentList	1
>7129	Argument	1
>7130	PrimaryExpression	1
>7131	Callee	q -> setLife
>7132	PtrMemberAccess	q -> setLife
>7133	Identifier	setLife
>7134	Identifier	q
>7135	ExpressionStatement	 
>7136	CallExpression	q -> alpha . startPath ( 2 )
>7137	ArgumentList	2
>7138	Argument	2
>7139	PrimaryExpression	2
>7140	Callee	q -> alpha . startPath
>7141	MemberAccess	q -> alpha . startPath
>7142	Identifier	startPath
>7143	PtrMemberAccess	q -> alpha
>7144	Identifier	alpha
>7145	Identifier	q
>7146	ExpressionStatement	 
>7147	CallExpression	q -> alpha . data -> path . addPathNode ( 0 , 1.0 )
>7148	ArgumentList	0
>7149	Argument	1.0
>7150	PrimaryExpression	1.0
>7151	Argument	0
>7152	PrimaryExpression	0
>7153	Callee	q -> alpha . data -> path . addPathNode
>7154	MemberAccess	q -> alpha . data -> path . addPathNode
>7155	Identifier	addPathNode
>7156	PtrMemberAccess	q -> alpha . data -> path
>7157	Identifier	path
>7158	MemberAccess	q -> alpha . data
>7159	Identifier	data
>7160	PtrMemberAccess	q -> alpha
>7161	Identifier	alpha
>7162	Identifier	q
>7163	ExpressionStatement	 
>7164	CallExpression	q -> alpha . data -> path . addPathNode ( 1.0 , 0.1 )
>7165	ArgumentList	1.0
>7166	Argument	0.1
>7167	PrimaryExpression	0.1
>7168	Argument	1.0
>7169	PrimaryExpression	1.0
>7170	Callee	q -> alpha . data -> path . addPathNode
>7171	MemberAccess	q -> alpha . data -> path . addPathNode
>7172	Identifier	addPathNode
>7173	PtrMemberAccess	q -> alpha . data -> path
>7174	Identifier	path
>7175	MemberAccess	q -> alpha . data
>7176	Identifier	data
>7177	PtrMemberAccess	q -> alpha
>7178	Identifier	alpha
>7179	Identifier	q
>7180	ExpressionStatement	 
>7181	CallExpression	q -> alpha . data -> path . addPathNode ( 0 , 0 )
>7182	ArgumentList	0
>7183	Argument	0
>7184	PrimaryExpression	0
>7185	Argument	0
>7186	PrimaryExpression	0
>7187	Callee	q -> alpha . data -> path . addPathNode
>7188	MemberAccess	q -> alpha . data -> path . addPathNode
>7189	Identifier	addPathNode
>7190	PtrMemberAccess	q -> alpha . data -> path
>7191	Identifier	path
>7192	MemberAccess	q -> alpha . data
>7193	Identifier	data
>7194	PtrMemberAccess	q -> alpha
>7195	Identifier	alpha
>7196	Identifier	q
>7197	ExpressionStatement	 
>7198	CallExpression	q -> alpha . ensureData ( )
>7199	ArgumentList	 
>7200	Callee	q -> alpha . ensureData
>7201	MemberAccess	q -> alpha . ensureData
>7202	Identifier	ensureData
>7203	PtrMemberAccess	q -> alpha
>7204	Identifier	alpha
>7205	Identifier	q
>7206	ExpressionStatement	 
>7207	AssignmentExpr	q -> followCamera = 1
>7208	PrimaryExpression	1
>7209	PtrMemberAccess	q -> followCamera
>7210	Identifier	followCamera
>7211	Identifier	q
>7212	ExpressionStatement	 
>7213	AssignmentExpr	q -> scale = Vector ( 0.8 , 0.8 )
>7214	CallExpression	Vector ( 0.8 , 0.8 )
>7215	ArgumentList	0.8
>7216	Argument	0.8
>7217	PrimaryExpression	0.8
>7218	Argument	0.8
>7219	PrimaryExpression	0.8
>7220	Callee	Vector
>7221	Identifier	Vector
>7222	PtrMemberAccess	q -> scale
>7223	Identifier	scale
>7224	Identifier	q
>7225	IdentifierDeclStatement	 
>7226	IdentifierDecl	* q = new Quad ( \"gfx/ingredients/\" + data -> gfx , Vector ( 800 - 20 + core -> getVirtualOffX ( ) , ( 570 - 2 * ( \
>7227	AssignmentExpr	* q = new Quad ( \"gfx/ingredients/\" + data -> gfx , Vector ( 800 - 20 + core -> getVirtualOffX ( ) , ( \
>7228	Expression	\"gfx/ingredients/\" + data -> gfx , Vector ( 800 - 20 + core -> getVirtualOffX ( ) , ( 570 - 2 * ( 100 * miniMapRender \
>7229	CallExpression	Vector ( 800 - 20 + core -> getVirtualOffX ( ) , ( 570 - 2 * ( 100 * miniMapRender -> scale . y ) ) + ingOffY )
>7230	ArgumentList	800 - 20 + core -> getVirtualOffX ( )
>7231	Argument	( 570 - 2 * ( 100 * miniMapRender -> scale . y ) ) + ingOffY
>7232	AdditiveExpression	( 570 - 2 * ( 100 * miniMapRender -> scale . y ) ) + ingOffY
>7233	Identifier	ingOffY
>7234	AdditiveExpression	570 - 2 * ( 100 * miniMapRender -> scale . y )
>7235	MultiplicativeExpression	2 * ( 100 * miniMapRender -> scale . y )
>7236	MultiplicativeExpression	100 * miniMapRender -> scale . y
>7237	MemberAccess	miniMapRender -> scale . y
>7238	Identifier	y
>7239	PtrMemberAccess	miniMapRender -> scale
>7240	Identifier	scale
>7241	Identifier	miniMapRender
>7242	PrimaryExpression	100
>7243	PrimaryExpression	2
>7244	PrimaryExpression	570
>7245	Argument	800 - 20 + core -> getVirtualOffX ( )
>7246	AdditiveExpression	800 - 20 + core -> getVirtualOffX ( )
>7247	AdditiveExpression	20 + core -> getVirtualOffX ( )
>7248	CallExpression	core -> getVirtualOffX ( )
>7249	ArgumentList	 
>7250	Callee	core -> getVirtualOffX
>7251	PtrMemberAccess	core -> getVirtualOffX
>7252	Identifier	getVirtualOffX
>7253	Identifier	core
>7254	PrimaryExpression	20
>7255	PrimaryExpression	800
>7256	Callee	Vector
>7257	Identifier	Vector
>7258	AdditiveExpression	\"gfx/ingredients/\" + data -> gfx
>7259	PtrMemberAccess	data -> gfx
>7260	Identifier	gfx
>7261	Identifier	data
>7262	PrimaryExpression	\"gfx/ingredients/\"
>7263	Identifier	q
>7264	Identifier	q
>7265	IdentifierDeclType	Quad *
>7293	FunctionDef	Game 
>7294	ParameterList	bool effects , bool cancel
>7295	Parameter	 
>7296	Identifier	cancel
>7297	ParameterType	bool
>7298	Parameter	 
>7299	Identifier	effects
>7300	ParameterType	bool
>7301	ReturnType	void
>7302	CompoundStatement	 
>7303	ForStatement	for ( int i = 0 ; i < foodSlots . size ( ) ; i ++ )
>7304	ExpressionStatement	 
>7305	CallExpression	foodSlots [ i ] -> setHidden ( true )
>7306	ArgumentList	true
>7307	Argument	true
>7308	Identifier	true
>7309	Callee	foodSlots [ i ] -> setHidden
>7310	PtrMemberAccess	foodSlots [ i ] -> setHidden
>7311	Identifier	setHidden
>7312	ArrayIndexing	foodSlots [ i ]
>7313	Identifier	i
>7314	Identifier	foodSlots
>7315	IncDecOp	 
>7316	IncDec	++
>7317	Identifier	i
>7318	Condition	 
>7319	RelationalExpression	i < foodSlots . size ( )
>7320	CallExpression	foodSlots . size ( )
>7321	ArgumentList	 
>7322	Callee	foodSlots . size
>7323	MemberAccess	foodSlots . size
>7324	Identifier	size
>7325	Identifier	foodSlots
>7326	Identifier	i
>7327	ForInit	 
>7328	IdentifierDeclStatement	int i = 0 ;
>7329	IdentifierDecl	i = 0
>7330	AssignmentExpr	i = 0
>7331	PrimaryExpression	0
>7332	Identifier	i
>7333	Identifier	i
>7334	IdentifierDeclType	int
>7335	ExpressionStatement	 
>7336	CallExpression	treasureDescription -> setHidden ( true )
>7337	ArgumentList	true
>7338	Argument	true
>7339	Identifier	true
>7340	Callee	treasureDescription -> setHidden
>7341	PtrMemberAccess	treasureDescription -> setHidden
>7342	Identifier	setHidden
>7343	Identifier	treasureDescription
>7344	ForStatement	for ( int i = 0 ; i < treasureSlots . size ( ) ; i ++ )
>7345	ExpressionStatement	 
>7346	CallExpression	treasureSlots [ i ] -> setHidden ( true )
>7347	ArgumentList	true
>7348	Argument	true
>7349	Identifier	true
>7350	Callee	treasureSlots [ i ] -> setHidden
>7351	PtrMemberAccess	treasureSlots [ i ] -> setHidden
>7352	Identifier	setHidden
>7353	ArrayIndexing	treasureSlots [ i ]
>7354	Identifier	i
>7355	Identifier	treasureSlots
>7356	IncDecOp	 
>7357	IncDec	++
>7358	Identifier	i
>7359	Condition	 
>7360	RelationalExpression	i < treasureSlots . size ( )
>7361	CallExpression	treasureSlots . size ( )
>7362	ArgumentList	 
>7363	Callee	treasureSlots . size
>7364	MemberAccess	treasureSlots . size
>7365	Identifier	size
>7366	Identifier	treasureSlots
>7367	Identifier	i
>7368	ForInit	 
>7369	IdentifierDeclStatement	int i = 0 ;
>7370	IdentifierDecl	i = 0
>7371	AssignmentExpr	i = 0
>7372	PrimaryExpression	0
>7373	Identifier	i
>7374	Identifier	i
>7375	IdentifierDeclType	int
>7376	ForStatement	for ( int i = 0 ; i < menu . size ( ) ; i ++ )
>7377	ExpressionStatement	 
>7378	CallExpression	menu [ i ] -> setHidden ( true )
>7379	ArgumentList	true
>7380	Argument	true
>7381	Identifier	true
>7382	Callee	menu [ i ] -> setHidden
>7383	PtrMemberAccess	menu [ i ] -> setHidden
>7384	Identifier	setHidden
>7385	ArrayIndexing	menu [ i ]
>7386	Identifier	i
>7387	Identifier	menu
>7388	IncDecOp	 
>7389	IncDec	++
>7390	Identifier	i
>7391	Condition	 
>7392	RelationalExpression	i < menu . size ( )
>7393	CallExpression	menu . size ( )
>7394	ArgumentList	 
>7395	Callee	menu . size
>7396	MemberAccess	menu . size
>7397	Identifier	size
>7398	Identifier	menu
>7399	Identifier	i
>7400	ForInit	 
>7401	IdentifierDeclStatement	int i = 0 ;
>7402	IdentifierDecl	i = 0
>7403	AssignmentExpr	i = 0
>7404	PrimaryExpression	0
>7405	Identifier	i
>7406	Identifier	i
>7407	IdentifierDeclType	int
>7408	ExpressionStatement	 
>7409	CallExpression	menuIconGlow -> setHidden ( true )
>7410	ArgumentList	true
>7411	Argument	true
>7412	Identifier	true
>7413	Callee	menuIconGlow -> setHidden
>7414	PtrMemberAccess	menuIconGlow -> setHidden
>7415	Identifier	setHidden
>7416	Identifier	menuIconGlow
>7417	ExpressionStatement	 
>7418	CallExpression	eNo -> setHidden ( true )
>7419	ArgumentList	true
>7420	Argument	true
>7421	Identifier	true
>7422	Callee	eNo -> setHidden
>7423	PtrMemberAccess	eNo -> setHidden
>7424	Identifier	setHidden
>7425	Identifier	eNo
>7426	ExpressionStatement	 
>7427	CallExpression	eYes -> setHidden ( true )
>7428	ArgumentList	true
>7429	Argument	true
>7430	Identifier	true
>7431	Callee	eYes -> setHidden
>7432	PtrMemberAccess	eYes -> setHidden
>7433	Identifier	setHidden
>7434	Identifier	eYes
>7435	ExpressionStatement	 
>7436	CallExpression	eAre -> setHidden ( true )
>7437	ArgumentList	true
>7438	Argument	true
>7439	Identifier	true
>7440	Callee	eAre -> setHidden
>7441	PtrMemberAccess	eAre -> setHidden
>7442	Identifier	setHidden
>7443	Identifier	eAre
>7444	ExpressionStatement	 
>7445	CallExpression	menuDescription -> setHidden ( true )
>7446	ArgumentList	true
>7447	Argument	true
>7448	Identifier	true
>7449	Callee	menuDescription -> setHidden
>7450	PtrMemberAccess	menuDescription -> setHidden
>7451	Identifier	setHidden
>7452	Identifier	menuDescription
>7453	ExpressionStatement	 
>7454	CallExpression	recipeMenu . nextPage -> setHidden ( true )
>7455	ArgumentList	true
>7456	Argument	true
>7457	Identifier	true
>7458	Callee	recipeMenu . nextPage -> setHidden
>7459	PtrMemberAccess	recipeMenu . nextPage -> setHidden
>7460	Identifier	setHidden
>7461	MemberAccess	recipeMenu . nextPage
>7462	Identifier	nextPage
>7463	Identifier	recipeMenu
>7464	ExpressionStatement	 
>7465	CallExpression	recipeMenu . prevPage -> setHidden ( true )
>7466	ArgumentList	true
>7467	Argument	true
>7468	Identifier	true
>7469	Callee	recipeMenu . prevPage -> setHidden
>7470	PtrMemberAccess	recipeMenu . prevPage -> setHidden
>7471	Identifier	setHidden
>7472	MemberAccess	recipeMenu . prevPage
>7473	Identifier	prevPage
>7474	Identifier	recipeMenu
>7475	ExpressionStatement	 
>7476	CallExpression	recipeMenu . page -> setHidden ( true )
>7477	ArgumentList	true
>7478	Argument	true
>7479	Identifier	true
>7480	Callee	recipeMenu . page -> setHidden
>7481	PtrMemberAccess	recipeMenu . page -> setHidden
>7482	Identifier	setHidden
>7483	MemberAccess	recipeMenu . page
>7484	Identifier	page
>7485	Identifier	recipeMenu
>7486	ExpressionStatement	 
>7487	CallExpression	recipeMenu . header -> setHidden ( true )
>7488	ArgumentList	true
>7489	Argument	true
>7490	Identifier	true
>7491	Callee	recipeMenu . header -> setHidden
>7492	PtrMemberAccess	recipeMenu . header -> setHidden
>7493	Identifier	setHidden
>7494	MemberAccess	recipeMenu . header
>7495	Identifier	header
>7496	Identifier	recipeMenu
>7497	ExpressionStatement	 
>7498	CallExpression	recipeMenu . scrollEnd -> setHidden ( true )
>7499	ArgumentList	true
>7500	Argument	true
>7501	Identifier	true
>7502	Callee	recipeMenu . scrollEnd -> setHidden
>7503	PtrMemberAccess	recipeMenu . scrollEnd -> setHidden
>7504	Identifier	setHidden
>7505	MemberAccess	recipeMenu . scrollEnd
>7506	Identifier	scrollEnd
>7507	Identifier	recipeMenu
>7508	ExpressionStatement	 
>7509	CallExpression	recipeMenu . scroll -> setHidden ( true )
>7510	ArgumentList	true
>7511	Argument	true
>7512	Identifier	true
>7513	Callee	recipeMenu . scroll -> setHidden
>7514	PtrMemberAccess	recipeMenu . scroll -> setHidden
>7515	Identifier	setHidden
>7516	MemberAccess	recipeMenu . scroll
>7517	Identifier	scroll
>7518	Identifier	recipeMenu
>7519	ExpressionStatement	 
>7520	CallExpression	showRecipe -> setHidden ( true )
>7521	ArgumentList	true
>7522	Argument	true
>7523	Identifier	true
>7524	Callee	showRecipe -> setHidden
>7525	PtrMemberAccess	showRecipe -> setHidden
>7526	Identifier	setHidden
>7527	Identifier	showRecipe
>7528	ExpressionStatement	 
>7529	CallExpression	previewRecipe -> setHidden ( true )
>7530	ArgumentList	true
>7531	Argument	true
>7532	Identifier	true
>7533	Callee	previewRecipe -> setHidden
>7534	PtrMemberAccess	previewRecipe -> setHidden
>7535	Identifier	setHidden
>7536	Identifier	previewRecipe
>7537	ExpressionStatement	 
>7538	CallExpression	circlePageNum -> setHidden ( true )
>7539	ArgumentList	true
>7540	Argument	true
>7541	Identifier	true
>7542	Callee	circlePageNum -> setHidden
>7543	PtrMemberAccess	circlePageNum -> setHidden
>7544	Identifier	setHidden
>7545	Identifier	circlePageNum
>7546	ExpressionStatement	 
>7547	CallExpression	nextTreasure -> setHidden ( true )
>7548	ArgumentList	true
>7549	Argument	true
>7550	Identifier	true
>7551	Callee	nextTreasure -> setHidden
>7552	PtrMemberAccess	nextTreasure -> setHidden
>7553	Identifier	setHidden
>7554	Identifier	nextTreasure
>7555	ExpressionStatement	 
>7556	CallExpression	prevTreasure -> setHidden ( true )
>7557	ArgumentList	true
>7558	Argument	true
>7559	Identifier	true
>7560	Callee	prevTreasure -> setHidden
>7561	PtrMemberAccess	prevTreasure -> setHidden
>7562	Identifier	setHidden
>7563	Identifier	prevTreasure
>7564	ExpressionStatement	 
>7565	CallExpression	nextFood -> setHidden ( true )
>7566	ArgumentList	true
>7567	Argument	true
>7568	Identifier	true
>7569	Callee	nextFood -> setHidden
>7570	PtrMemberAccess	nextFood -> setHidden
>7571	Identifier	setHidden
>7572	Identifier	nextFood
>7573	ExpressionStatement	 
>7574	CallExpression	prevFood -> setHidden ( true )
>7575	ArgumentList	true
>7576	Argument	true
>7577	Identifier	true
>7578	Callee	prevFood -> setHidden
>7579	PtrMemberAccess	prevFood -> setHidden
>7580	Identifier	setHidden
>7581	Identifier	prevFood
>7582	ExpressionStatement	 
>7583	CallExpression	use -> setHidden ( true )
>7584	ArgumentList	true
>7585	Argument	true
>7586	Identifier	true
>7587	Callee	use -> setHidden
>7588	PtrMemberAccess	use -> setHidden
>7589	Identifier	setHidden
>7590	Identifier	use
>7591	ExpressionStatement	 
>7592	CallExpression	recipes -> setHidden ( true )
>7593	ArgumentList	true
>7594	Argument	true
>7595	Identifier	true
>7596	Callee	recipes -> setHidden
>7597	PtrMemberAccess	recipes -> setHidden
>7598	Identifier	setHidden
>7599	Identifier	recipes
>7600	ExpressionStatement	 
>7601	CallExpression	foodSort -> setHidden ( true )
>7602	ArgumentList	true
>7603	Argument	true
>7604	Identifier	true
>7605	Callee	foodSort -> setHidden
>7606	PtrMemberAccess	foodSort -> setHidden
>7607	Identifier	setHidden
>7608	Identifier	foodSort
>7609	ExpressionStatement	 
>7610	CallExpression	cook -> setHidden ( true )
>7611	ArgumentList	true
>7612	Argument	true
>7613	Identifier	true
>7614	Callee	cook -> setHidden
>7615	PtrMemberAccess	cook -> setHidden
>7616	Identifier	setHidden
>7617	Identifier	cook
>7618	ExpressionStatement	 
>7619	CallExpression	keyConfigButton -> setHidden ( true )
>7620	ArgumentList	true
>7621	Argument	true
>7622	Identifier	true
>7623	Callee	keyConfigButton -> setHidden
>7624	PtrMemberAccess	keyConfigButton -> setHidden
>7625	Identifier	setHidden
>7626	Identifier	keyConfigButton
>7627	ExpressionStatement	 
>7628	CallExpression	options -> setHidden ( true )
>7629	ArgumentList	true
>7630	Argument	true
>7631	Identifier	true
>7632	Callee	options -> setHidden
>7633	PtrMemberAccess	options -> setHidden
>7634	Identifier	setHidden
>7635	Identifier	options
>7636	ExpressionStatement	 
>7637	CallExpression	opt_cancel -> setHidden ( true )
>7638	ArgumentList	true
>7639	Argument	true
>7640	Identifier	true
>7641	Callee	opt_cancel -> setHidden
>7642	PtrMemberAccess	opt_cancel -> setHidden
>7643	Identifier	setHidden
>7644	Identifier	opt_cancel
>7645	ExpressionStatement	 
>7646	CallExpression	opt_save -> setHidden ( true )
>7647	ArgumentList	true
>7648	Argument	true
>7649	Identifier	true
>7650	Callee	opt_save -> setHidden
>7651	PtrMemberAccess	opt_save -> setHidden
>7652	Identifier	setHidden
>7653	Identifier	opt_save
>7654	ExpressionStatement	 
>7655	CallExpression	menuBg -> setHidden ( true )
>7656	ArgumentList	true
>7657	Argument	true
>7658	Identifier	true
>7659	Callee	menuBg -> setHidden
>7660	PtrMemberAccess	menuBg -> setHidden
>7661	Identifier	setHidden
>7662	Identifier	menuBg
>7663	IfStatement	if ( avatar )
>7664	CompoundStatement	 
>7665	ExpressionStatement	 
>7666	AssignmentExpr	dsq -> routeShoulder = true
>7667	Identifier	true
>7668	PtrMemberAccess	dsq -> routeShoulder
>7669	Identifier	routeShoulder
>7670	Identifier	dsq
>7671	IfStatement	if ( effects )
>7672	ExpressionStatement	 
>7673	CallExpression	dsq -> quitNestedMain ( )
>7674	ArgumentList	 
>7675	Callee	dsq -> quitNestedMain
>7676	PtrMemberAccess	dsq -> quitNestedMain
>7677	Identifier	quitNestedMain
>7678	Identifier	dsq
>7679	Condition	 
>7680	Identifier	effects
>7681	ExpressionStatement	 
>7682	CallExpression	dropIngrNames . clear ( )
>7683	ArgumentList	 
>7684	Callee	dropIngrNames . clear
>7685	MemberAccess	dropIngrNames . clear
>7686	Identifier	clear
>7687	Identifier	dropIngrNames
>7688	ForStatement	for ( int i = 0 ; i < dropIngrNames . size ( ) ; i ++ )
>7689	CompoundStatement	 
>7690	ExpressionStatement	 
>7691	CallExpression	dsq -> game -> spawnIngredient ( dropIngrNames [ i ] , avatar -> position + Vector ( 0 , - 96 ) , 1 , 1 )
>7692	ArgumentList	dropIngrNames [ i ]
>7693	Argument	1
>7694	PrimaryExpression	1
>7695	Argument	1
>7696	PrimaryExpression	1
>7697	Argument	avatar -> position + Vector ( 0 , - 96 )
>7698	AdditiveExpression	avatar -> position + Vector ( 0 , - 96 )
>7699	CallExpression	Vector ( 0 , - 96 )
>7700	ArgumentList	0
>7701	Argument	- 96
>7702	UnaryOp	- 96
>7703	PrimaryExpression	96
>7704	UnaryOperator	-
>7705	Argument	0
>7706	PrimaryExpression	0
>7707	Callee	Vector
>7708	Identifier	Vector
>7709	PtrMemberAccess	avatar -> position
>7710	Identifier	position
>7711	Identifier	avatar
>7712	Argument	dropIngrNames [ i ]
>7713	ArrayIndexing	dropIngrNames [ i ]
>7714	Identifier	i
>7715	Identifier	dropIngrNames
>7716	Callee	dsq -> game -> spawnIngredient
>7717	PtrMemberAccess	dsq -> game -> spawnIngredient
>7718	Identifier	spawnIngredient
>7719	PtrMemberAccess	dsq -> game
>7720	Identifier	game
>7721	Identifier	dsq
>7722	IncDecOp	 
>7723	IncDec	++
>7724	Identifier	i
>7725	Condition	 
>7726	RelationalExpression	i < dropIngrNames . size ( )
>7727	CallExpression	dropIngrNames . size ( )
>7728	ArgumentList	 
>7729	Callee	dropIngrNames . size
>7730	MemberAccess	dropIngrNames . size
>7731	Identifier	size
>7732	Identifier	dropIngrNames
>7733	Identifier	i
>7734	ForInit	 
>7735	IdentifierDeclStatement	int i = 0 ;
>7736	IdentifierDecl	i = 0
>7737	AssignmentExpr	i = 0
>7738	PrimaryExpression	0
>7739	Identifier	i
>7740	Identifier	i
>7741	IdentifierDeclType	int
>7742	ForStatement	for ( int i = 0 ; i < songTips . size ( ) ; i ++ )
>7743	ExpressionStatement	 
>7744	AssignmentExpr	songTips [ i ] -> alpha = 0
>7745	PrimaryExpression	0
>7746	PtrMemberAccess	songTips [ i ] -> alpha
>7747	Identifier	alpha
>7748	ArrayIndexing	songTips [ i ]
>7749	Identifier	i
>7750	Identifier	songTips
>7751	IncDecOp	 
>7752	IncDec	++
>7753	Identifier	i
>7754	Condition	 
>7755	RelationalExpression	i < songTips . size ( )
>7756	CallExpression	songTips . size ( )
>7757	ArgumentList	 
>7758	Callee	songTips . size
>7759	MemberAccess	songTips . size
>7760	Identifier	size
>7761	Identifier	songTips
>7762	Identifier	i
>7763	ForInit	 
>7764	IdentifierDeclStatement	int i = 0 ;
>7765	IdentifierDecl	i = 0
>7766	AssignmentExpr	i = 0
>7767	PrimaryExpression	0
>7768	Identifier	i
>7769	Identifier	i
>7770	IdentifierDeclType	int
>7771	ExpressionStatement	 
>7772	AssignmentExpr	inGameMenu = false
>7773	Identifier	false
>7774	Identifier	inGameMenu
>7775	IfStatement	if ( effects )
>7776	ExpressionStatement	 
>7777	CallExpression	togglePause ( false )
>7778	ArgumentList	false
>7779	Argument	false
>7780	Identifier	false
>7781	Callee	togglePause
>7782	Identifier	togglePause
>7783	Condition	 
>7784	Identifier	effects
>7785	IfStatement	if ( menu_blackout )
>7786	CompoundStatement	 
>7787	ExpressionStatement	 
>7788	AssignmentExpr	menu_blackout = 0
>7789	PrimaryExpression	0
>7790	Identifier	menu_blackout
>7791	ExpressionStatement	 
>7792	CallExpression	menu_blackout -> safeKill ( )
>7793	ArgumentList	 
>7794	Callee	menu_blackout -> safeKill
>7795	PtrMemberAccess	menu_blackout -> safeKill
>7796	Identifier	safeKill
>7797	Identifier	menu_blackout
>7798	Condition	 
>7799	Identifier	menu_blackout
>7800	IfStatement	if ( effects )
>7801	ExpressionStatement	 
>7802	CallExpression	core -> main ( t )
>7803	ArgumentList	t
>7804	Argument	t
>7805	Identifier	t
>7806	Callee	core -> main
>7807	PtrMemberAccess	core -> main
>7808	Identifier	main
>7809	Identifier	core
>7810	Condition	 
>7811	Identifier	effects
>7812	IfStatement	if ( showRecipe )
>7813	CompoundStatement	 
>7814	ExpressionStatement	 
>7815	CallExpression	showRecipe -> alpha . interpolateTo ( 0 , t )
>7816	ArgumentList	0
>7817	Argument	t
>7818	Identifier	t
>7819	Argument	0
>7820	PrimaryExpression	0
>7821	Callee	showRecipe -> alpha . interpolateTo
>7822	MemberAccess	showRecipe -> alpha . interpolateTo
>7823	Identifier	interpolateTo
>7824	PtrMemberAccess	showRecipe -> alpha
>7825	Identifier	alpha
>7826	Identifier	showRecipe
>7827	Condition	 
>7828	Identifier	showRecipe
>7829	IfStatement	if ( menu_blackout )
>7830	CompoundStatement	 
>7831	ExpressionStatement	 
>7832	CallExpression	menu_blackout -> alpha . interpolateTo ( 0 , t )
>7833	ArgumentList	0
>7834	Argument	t
>7835	Identifier	t
>7836	Argument	0
>7837	PrimaryExpression	0
>7838	Callee	menu_blackout -> alpha . interpolateTo
>7839	MemberAccess	menu_blackout -> alpha . interpolateTo
>7840	Identifier	interpolateTo
>7841	PtrMemberAccess	menu_blackout -> alpha
>7842	Identifier	alpha
>7843	Identifier	menu_blackout
>7844	Condition	 
>7845	Identifier	menu_blackout
>7846	IfStatement	if ( menuSongs )
>7847	ExpressionStatement	 
>7848	CallExpression	menuSongs -> alpha . interpolateTo ( 0 , t )
>7849	ArgumentList	0
>7850	Argument	t
>7851	Identifier	t
>7852	Argument	0
>7853	PrimaryExpression	0
>7854	Callee	menuSongs -> alpha . interpolateTo
>7855	MemberAccess	menuSongs -> alpha . interpolateTo
>7856	Identifier	interpolateTo
>7857	PtrMemberAccess	menuSongs -> alpha
>7858	Identifier	alpha
>7859	Identifier	menuSongs
>7860	Condition	 
>7861	Identifier	menuSongs
>7862	ExpressionStatement	 
>7863	CallExpression	menuBg2 -> alpha . interpolateTo ( 0 , t )
>7864	ArgumentList	0
>7865	Argument	t
>7866	Identifier	t
>7867	Argument	0
>7868	PrimaryExpression	0
>7869	Callee	menuBg2 -> alpha . interpolateTo
>7870	MemberAccess	menuBg2 -> alpha . interpolateTo
>7871	Identifier	interpolateTo
>7872	PtrMemberAccess	menuBg2 -> alpha
>7873	Identifier	alpha
>7874	Identifier	menuBg2
>7875	ExpressionStatement	 
>7876	CallExpression	menuBg -> scale . interpolateTo ( menuBg -> scale * 0.5f , t )
>7877	ArgumentList	menuBg -> scale * 0.5f
>7878	Argument	t
>7879	Identifier	t
>7880	Argument	menuBg -> scale * 0.5f
>7881	MultiplicativeExpression	menuBg -> scale * 0.5f
>7882	PrimaryExpression	0.5f
>7883	PtrMemberAccess	menuBg -> scale
>7884	Identifier	scale
>7885	Identifier	menuBg
>7886	Callee	menuBg -> scale . interpolateTo
>7887	MemberAccess	menuBg -> scale . interpolateTo
>7888	Identifier	interpolateTo
>7889	PtrMemberAccess	menuBg -> scale
>7890	Identifier	scale
>7891	Identifier	menuBg
>7892	ExpressionStatement	 
>7893	CallExpression	menuBg -> alpha . interpolateTo ( 0 , t )
>7894	ArgumentList	0
>7895	Argument	t
>7896	Identifier	t
>7897	Argument	0
>7898	PrimaryExpression	0
>7899	Callee	menuBg -> alpha . interpolateTo
>7900	MemberAccess	menuBg -> alpha . interpolateTo
>7901	Identifier	interpolateTo
>7902	PtrMemberAccess	menuBg -> alpha
>7903	Identifier	alpha
>7904	Identifier	menuBg
>7905	ExpressionStatement	 
>7906	CallExpression	menuDescription -> alpha . interpolateTo ( 0 , t )
>7907	ArgumentList	0
>7908	Argument	t
>7909	Identifier	t
>7910	Argument	0
>7911	PrimaryExpression	0
>7912	Callee	menuDescription -> alpha . interpolateTo
>7913	MemberAccess	menuDescription -> alpha . interpolateTo
>7914	Identifier	interpolateTo
>7915	PtrMemberAccess	menuDescription -> alpha
>7916	Identifier	alpha
>7917	Identifier	menuDescription
>7918	IfStatement	if ( dsq -> game -> miniMapRender )
>7919	ExpressionStatement	 
>7920	CallExpression	dsq -> game -> miniMapRender -> slide ( 0 )
>7921	ArgumentList	0
>7922	Argument	0
>7923	PrimaryExpression	0
>7924	Callee	dsq -> game -> miniMapRender -> slide
>7925	PtrMemberAccess	dsq -> game -> miniMapRender -> slide
>7926	Identifier	slide
>7927	PtrMemberAccess	dsq -> game -> miniMapRender
>7928	Identifier	miniMapRender
>7929	PtrMemberAccess	dsq -> game
>7930	Identifier	game
>7931	Identifier	dsq
>7932	Condition	 
>7933	PtrMemberAccess	dsq -> game -> miniMapRender
>7934	Identifier	miniMapRender
>7935	PtrMemberAccess	dsq -> game
>7936	Identifier	game
>7937	Identifier	dsq
>7938	ExpressionStatement	 
>7939	CallExpression	songBubbles -> alpha . interpolateTo ( 0 , t )
>7940	ArgumentList	0
>7941	Argument	t
>7942	Identifier	t
>7943	Argument	0
>7944	PrimaryExpression	0
>7945	Callee	songBubbles -> alpha . interpolateTo
>7946	MemberAccess	songBubbles -> alpha . interpolateTo
>7947	Identifier	interpolateTo
>7948	PtrMemberAccess	songBubbles -> alpha
>7949	Identifier	alpha
>7950	Identifier	songBubbles
>7951	ForStatement	for ( i = 0 ; i < songSlots . size ( ) ; i ++ )
>7952	ExpressionStatement	 
>7953	CallExpression	songSlots [ i ] -> alpha . interpolateTo ( 0 , t )
>7954	ArgumentList	0
>7955	Argument	t
>7956	Identifier	t
>7957	Argument	0
>7958	PrimaryExpression	0
>7959	Callee	songSlots [ i ] -> alpha . interpolateTo
>7960	MemberAccess	songSlots [ i ] -> alpha . interpolateTo
>7961	Identifier	interpolateTo
>7962	PtrMemberAccess	songSlots [ i ] -> alpha
>7963	Identifier	alpha
>7964	ArrayIndexing	songSlots [ i ]
>7965	Identifier	i
>7966	Identifier	songSlots
>7967	IncDecOp	 
>7968	IncDec	++
>7969	Identifier	i
>7970	Condition	 
>7971	RelationalExpression	i < songSlots . size ( )
>7972	CallExpression	songSlots . size ( )
>7973	ArgumentList	 
>7974	Callee	songSlots . size
>7975	MemberAccess	songSlots . size
>7976	Identifier	size
>7977	Identifier	songSlots
>7978	Identifier	i
>7979	ForInit	 
>7980	AssignmentExpr	i = 0
>7981	PrimaryExpression	0
>7982	Identifier	i
>7983	ForStatement	for ( i = 0 ; i < spellIcons . size ( ) ; i ++ )
>7984	ExpressionStatement	 
>7985	CallExpression	spellIcons [ i ] -> alpha . interpolateTo ( 0 , t )
>7986	ArgumentList	0
>7987	Argument	t
>7988	Identifier	t
>7989	Argument	0
>7990	PrimaryExpression	0
>7991	Callee	spellIcons [ i ] -> alpha . interpolateTo
>7992	MemberAccess	spellIcons [ i ] -> alpha . interpolateTo
>7993	Identifier	interpolateTo
>7994	PtrMemberAccess	spellIcons [ i ] -> alpha
>7995	Identifier	alpha
>7996	ArrayIndexing	spellIcons [ i ]
>7997	Identifier	i
>7998	Identifier	spellIcons
>7999	IncDecOp	 
>8000	IncDec	++
>8001	Identifier	i
>8002	Condition	 
>8003	RelationalExpression	i < spellIcons . size ( )
>8004	CallExpression	spellIcons . size ( )
>8005	ArgumentList	 
>8006	Callee	spellIcons . size
>8007	MemberAccess	spellIcons . size
>8008	Identifier	size
>8009	Identifier	spellIcons
>8010	Identifier	i
>8011	ForInit	 
>8012	AssignmentExpr	i = 0
>8013	PrimaryExpression	0
>8014	Identifier	i
>8015	ForStatement	for ( i = 0 ; i < menu . size ( ) ; i ++ )
>8016	CompoundStatement	 
>8017	ExpressionStatement	 
>8018	AssignmentExpr	menu [ i ] -> alpha = 0
>8019	PrimaryExpression	0
>8020	PtrMemberAccess	menu [ i ] -> alpha
>8021	Identifier	alpha
>8022	ArrayIndexing	menu [ i ]
>8023	Identifier	i
>8024	Identifier	menu
>8025	IncDecOp	 
>8026	IncDec	++
>8027	Identifier	i
>8028	Condition	 
>8029	RelationalExpression	i < menu . size ( )
>8030	CallExpression	menu . size ( )
>8031	ArgumentList	 
>8032	Callee	menu . size
>8033	MemberAccess	menu . size
>8034	Identifier	size
>8035	Identifier	menu
>8036	Identifier	i
>8037	ForInit	 
>8038	AssignmentExpr	i = 0
>8039	PrimaryExpression	0
>8040	Identifier	i
>8041	ExpressionStatement	 
>8042	AssignmentExpr	menuIconGlow -> alpha = 0
>8043	PrimaryExpression	0
>8044	PtrMemberAccess	menuIconGlow -> alpha
>8045	Identifier	alpha
>8046	Identifier	menuIconGlow
>8047	IfStatement	if ( ! optionsOnly )
>8048	CompoundStatement	 
>8049	ExpressionStatement	 
>8050	CallExpression	toggleKeyConfigMenu ( false )
>8051	ArgumentList	false
>8052	Argument	false
>8053	Identifier	false
>8054	Callee	toggleKeyConfigMenu
>8055	Identifier	toggleKeyConfigMenu
>8056	ExpressionStatement	 
>8057	CallExpression	toggleMainMenu ( false )
>8058	ArgumentList	false
>8059	Argument	false
>8060	Identifier	false
>8061	Callee	toggleMainMenu
>8062	Identifier	toggleMainMenu
>8063	ExpressionStatement	 
>8064	CallExpression	togglePetMenu ( false )
>8065	ArgumentList	false
>8066	Argument	false
>8067	Identifier	false
>8068	Callee	togglePetMenu
>8069	Identifier	togglePetMenu
>8070	ExpressionStatement	 
>8071	CallExpression	toggleTreasureMenu ( false )
>8072	ArgumentList	false
>8073	Argument	false
>8074	Identifier	false
>8075	Callee	toggleTreasureMenu
>8076	Identifier	toggleTreasureMenu
>8077	ExpressionStatement	 
>8078	CallExpression	toggleFoodMenu ( false )
>8079	ArgumentList	false
>8080	Argument	false
>8081	Identifier	false
>8082	Callee	toggleFoodMenu
>8083	Identifier	toggleFoodMenu
>8084	Condition	 
>8085	UnaryOp	! optionsOnly
>8086	Identifier	optionsOnly
>8087	UnaryOperator	!
>8088	IfStatement	if ( cancel && ( optionsMenu || keyConfigMenu ) )
>8089	ElseStatement	else
>8090	ExpressionStatement	 
>8091	CallExpression	toggleOptionsMenu ( false )
>8092	ArgumentList	false
>8093	Argument	false
>8094	Identifier	false
>8095	Callee	toggleOptionsMenu
>8096	Identifier	toggleOptionsMenu
>8097	ExpressionStatement	 
>8098	CallExpression	onOptionsCancel ( )
>8099	ArgumentList	 
>8100	Callee	onOptionsCancel
>8101	Identifier	onOptionsCancel
>8102	Condition	 
>8103	AndExpression	cancel && ( optionsMenu || keyConfigMenu )
>8104	OrExpression	optionsMenu || keyConfigMenu
>8105	Identifier	keyConfigMenu
>8106	Identifier	optionsMenu
>8107	Identifier	cancel
>8108	ExpressionStatement	 
>8109	AssignmentExpr	dsq -> continuity . lastMenuPage = currentMenuPage
>8110	Identifier	currentMenuPage
>8111	MemberAccess	dsq -> continuity . lastMenuPage
>8112	Identifier	lastMenuPage
>8113	PtrMemberAccess	dsq -> continuity
>8114	Identifier	continuity
>8115	Identifier	dsq
>8116	ForStatement	for ( i = 0 ; i < foodHolders . size ( ) ; i ++ )
>8117	CompoundStatement	 
>8118	ExpressionStatement	 
>8119	CallExpression	foodHolders [ i ] -> dropFood ( )
>8120	ArgumentList	 
>8121	Callee	foodHolders [ i ] -> dropFood
>8122	PtrMemberAccess	foodHolders [ i ] -> dropFood
>8123	Identifier	dropFood
>8124	ArrayIndexing	foodHolders [ i ]
>8125	Identifier	i
>8126	Identifier	foodHolders
>8127	IncDecOp	 
>8128	IncDec	++
>8129	Identifier	i
>8130	Condition	 
>8131	RelationalExpression	i < foodHolders . size ( )
>8132	CallExpression	foodHolders . size ( )
>8133	ArgumentList	 
>8134	Callee	foodHolders . size
>8135	MemberAccess	foodHolders . size
>8136	Identifier	size
>8137	Identifier	foodHolders
>8138	Identifier	i
>8139	ForInit	 
>8140	AssignmentExpr	i = 0
>8141	PrimaryExpression	0
>8142	Identifier	i
>8143	IdentifierDeclStatement	 
>8144	IdentifierDecl	i = 0
>8145	AssignmentExpr	i = 0
>8146	PrimaryExpression	0
>8147	Identifier	i
>8148	Identifier	i
>8149	IdentifierDeclType	int
>8150	IfStatement	if ( ! effects )
>8151	ExpressionStatement	 
>8152	AssignmentExpr	t = 0
>8153	PrimaryExpression	0
>8154	Identifier	t
>8155	Condition	 
>8156	UnaryOp	! effects
>8157	Identifier	effects
>8158	UnaryOperator	!
>8159	IdentifierDeclStatement	 
>8160	IdentifierDecl	t = 0.3
>8161	AssignmentExpr	t = 0.3
>8162	PrimaryExpression	0.3
>8163	Identifier	t
>8164	Identifier	t
>8165	IdentifierDeclType	float
>8166	ExpressionStatement	 
>8167	AssignmentExpr	playingSongInMenu = - 1
>8168	UnaryOp	- 1
>8169	PrimaryExpression	1
>8170	UnaryOperator	-
>8171	Identifier	playingSongInMenu
>8172	ExpressionStatement	 
>8173	CallExpression	hideInGameMenuExitCheck ( false )
>8174	ArgumentList	false
>8175	Argument	false
>8176	Identifier	false
>8177	Callee	hideInGameMenuExitCheck
>8178	Identifier	hideInGameMenuExitCheck
>8179	IfStatement	if ( effects )
>8180	ExpressionStatement	 
>8181	CallExpression	core -> sound -> playSfx ( \"Menu-Close\" )
>8182	ArgumentList	\"Menu-Close\"
>8183	Argument	\"Menu-Close\"
>8184	PrimaryExpression	\"Menu-Close\"
>8185	Callee	core -> sound -> playSfx
>8186	PtrMemberAccess	core -> sound -> playSfx
>8187	Identifier	playSfx
>8188	PtrMemberAccess	core -> sound
>8189	Identifier	sound
>8190	Identifier	core
>8191	Condition	 
>8192	Identifier	effects
>8193	IfStatement	if ( resBox )
>8194	ExpressionStatement	 
>8195	CallExpression	resBox -> close ( )
>8196	ArgumentList	 
>8197	Callee	resBox -> close
>8198	PtrMemberAccess	resBox -> close
>8199	Identifier	close
>8200	Identifier	resBox
>8201	Condition	 
>8202	Identifier	resBox
>8203	Condition	 
>8204	Identifier	avatar
>8205	IfStatement	if ( effects && ! this -> isInGameMenu ( ) )
>8206	ReturnStatement	 
>8207	Condition	 
>8208	AndExpression	effects && ! this -> isInGameMenu ( )
>8209	UnaryOp	! this -> isInGameMenu ( )
>8210	CallExpression	this -> isInGameMenu ( )
>8211	ArgumentList	 
>8212	Callee	this -> isInGameMenu
>8213	PtrMemberAccess	this -> isInGameMenu
>8214	Identifier	isInGameMenu
>8215	Identifier	this
>8216	UnaryOperator	!
>8217	Identifier	effects
>8218	IfStatement	if ( FoodSlot 
>8219	ReturnStatement	 
>8220	Condition	 
>8221	EqualityExpression	FoodSlot 
>8222	UnaryOp	- 1
>8223	PrimaryExpression	1
>8224	UnaryOperator	-
>8225	Identifier	FoodSlot 
>8226	IfStatement	if ( isCooking )
>8227	ReturnStatement	 
>8228	Condition	 
>8229	Identifier	isCooking
>8351	FunctionDef	Game 
>8352	ParameterList	 
>8353	ReturnType	void
>8354	CompoundStatement	 
>8358	FunctionDef	Game 
>8359	ParameterList	Vector pos , float a
>8360	Parameter	 
>8361	Identifier	a
>8362	ParameterType	float
>8363	Parameter	 
>8364	Identifier	pos
>8365	ParameterType	Vector
>8366	ReturnType	void
>8367	CompoundStatement	 
>8368	ExpressionStatement	 
>8369	CallExpression	addRenderObject ( m , LR_PARTICLES )
>8370	ArgumentList	m
>8371	Argument	LR_PARTICLES
>8372	Identifier	LR_PARTICLES
>8373	Argument	m
>8374	Identifier	m
>8375	Callee	addRenderObject
>8376	Identifier	addRenderObject
>8377	IdentifierDeclStatement	 
>8378	IdentifierDecl	* m = new ManaBall ( pos , a )
>8379	AssignmentExpr	* m = new ManaBall ( pos , a )
>8380	Expression	pos , a
>8381	Identifier	a
>8382	Identifier	pos
>8383	Identifier	m
>8384	Identifier	m
>8385	IdentifierDeclType	ManaBall *
>8393	FunctionDef	Game 
>8394	ParameterList	 
>8395	ReturnType	void
>8396	CompoundStatement	 
>8400	FunctionDef	Game 
>8401	ParameterList	 
>8402	ReturnType	void
>8403	CompoundStatement	 
>8404	ExpressionStatement	 
>8405	AssignmentExpr	avatar = 0
>8406	PrimaryExpression	0
>8407	Identifier	avatar
>8408	ExpressionStatement	 
>8409	AssignmentExpr	bg2 = 0
>8410	PrimaryExpression	0
>8411	Identifier	bg2
>8412	ExpressionStatement	 
>8413	AssignmentExpr	bg = 0
>8414	PrimaryExpression	0
>8415	Identifier	bg
>8422	FunctionDef	Game 
>8423	ParameterList	 
>8424	ReturnType	void
>8425	CompoundStatement	 
>8426	ExpressionStatement	 
>8427	AssignmentExpr	fromPosition = avatar -> position
>8428	PtrMemberAccess	avatar -> position
>8429	Identifier	position
>8430	Identifier	avatar
>8431	Identifier	fromPosition
>8432	ExpressionStatement	 
>8433	CallExpression	fromVel . setLength2D ( 10 )
>8434	ArgumentList	10
>8435	Argument	10
>8436	PrimaryExpression	10
>8437	Callee	fromVel . setLength2D
>8438	MemberAccess	fromVel . setLength2D
>8439	Identifier	setLength2D
>8440	Identifier	fromVel
>8441	ExpressionStatement	 
>8442	AssignmentExpr	fromVel = avatar -> vel
>8443	PtrMemberAccess	avatar -> vel
>8444	Identifier	vel
>8445	Identifier	avatar
>8446	Identifier	fromVel
>8447	ExpressionStatement	 
>8448	CallExpression	avatar -> onWarp ( )
>8449	ArgumentList	 
>8450	Callee	avatar -> onWarp
>8451	PtrMemberAccess	avatar -> onWarp
>8452	Identifier	onWarp
>8453	Identifier	avatar
>8463	FunctionDef	Game 
>8464	ParameterList	std 
>8465	Parameter	 
>8466	Identifier	node
>8467	ParameterType	std 
>8468	Parameter	 
>8469	Identifier	scene
>8470	ParameterType	std 
>8471	ReturnType	void
>8472	CompoundStatement	 
>8473	ExpressionStatement	 
>8474	CallExpression	core -> enqueueJumpState ( \"Game\" )
>8475	ArgumentList	\"Game\"
>8476	Argument	\"Game\"
>8477	PrimaryExpression	\"Game\"
>8478	Callee	core -> enqueueJumpState
>8479	PtrMemberAccess	core -> enqueueJumpState
>8480	Identifier	enqueueJumpState
>8481	Identifier	core
>8482	IfStatement	if ( avatar -> isfh ( ) )
>8483	ExpressionStatement	 
>8484	AssignmentExpr	toFlip = 1
>8485	PrimaryExpression	1
>8486	Identifier	toFlip
>8487	Condition	 
>8488	CallExpression	avatar -> isfh ( )
>8489	ArgumentList	 
>8490	Callee	avatar -> isfh
>8491	PtrMemberAccess	avatar -> isfh
>8492	Identifier	isfh
>8493	Identifier	avatar
>8494	ExpressionStatement	 
>8495	CallExpression	stringToLower ( toNode )
>8496	ArgumentList	toNode
>8497	Argument	toNode
>8498	Identifier	toNode
>8499	Callee	stringToLower
>8500	Identifier	stringToLower
>8501	ExpressionStatement	 
>8502	CallExpression	stringToLower ( sceneToLoad )
>8503	ArgumentList	sceneToLoad
>8504	Argument	sceneToLoad
>8505	Identifier	sceneToLoad
>8506	Callee	stringToLower
>8507	Identifier	stringToLower
>8508	ExpressionStatement	 
>8509	AssignmentExpr	toNode = node
>8510	Identifier	node
>8511	Identifier	toNode
>8512	ExpressionStatement	 
>8513	AssignmentExpr	sceneToLoad = scene
>8514	Identifier	scene
>8515	Identifier	sceneToLoad
>8516	ExpressionStatement	 
>8517	CallExpression	warpPrep ( )
>8518	ArgumentList	 
>8519	Callee	warpPrep
>8520	Identifier	warpPrep
>8533	FunctionDef	Game 
>8534	ParameterList	Path * p
>8535	Parameter	 
>8536	Identifier	p
>8537	ParameterType	Path *
>8538	ReturnType	void
>8539	CompoundStatement	 
>8540	ExpressionStatement	 
>8541	CallExpression	core -> enqueueJumpState ( \"Game\" )
>8542	ArgumentList	\"Game\"
>8543	Argument	\"Game\"
>8544	PrimaryExpression	\"Game\"
>8545	Callee	core -> enqueueJumpState
>8546	PtrMemberAccess	core -> enqueueJumpState
>8547	Identifier	enqueueJumpState
>8548	Identifier	core
>8549	ExpressionStatement	 
>8550	CallExpression	stringToLower ( sceneToLoad )
>8551	ArgumentList	sceneToLoad
>8552	Argument	sceneToLoad
>8553	Identifier	sceneToLoad
>8554	Callee	stringToLower
>8555	Identifier	stringToLower
>8556	ExpressionStatement	 
>8557	CallExpression	stringToLower ( fromScene )
>8558	ArgumentList	fromScene
>8559	Argument	fromScene
>8560	Identifier	fromScene
>8561	Callee	stringToLower
>8562	Identifier	stringToLower
>8563	IfStatement	if ( ! p -> warpNode . empty ( ) )
>8564	ElseStatement	else
>8565	CompoundStatement	 
>8566	ExpressionStatement	 
>8567	AssignmentExpr	fromWarpType = p -> warpType
>8568	PtrMemberAccess	p -> warpType
>8569	Identifier	warpType
>8570	Identifier	p
>8571	Identifier	fromWarpType
>8572	ExpressionStatement	 
>8573	AssignmentExpr	fromScene = sceneName
>8574	Identifier	sceneName
>8575	Identifier	fromScene
>8576	CompoundStatement	 
>8577	ExpressionStatement	 
>8578	CallExpression	stringToLower ( toNode )
>8579	ArgumentList	toNode
>8580	Argument	toNode
>8581	Identifier	toNode
>8582	Callee	stringToLower
>8583	Identifier	stringToLower
>8584	ExpressionStatement	 
>8585	AssignmentExpr	toFlip = p -> toFlip
>8586	PtrMemberAccess	p -> toFlip
>8587	Identifier	toFlip
>8588	Identifier	p
>8589	Identifier	toFlip
>8590	ExpressionStatement	 
>8591	AssignmentExpr	toNode = p -> warpNode
>8592	PtrMemberAccess	p -> warpNode
>8593	Identifier	warpNode
>8594	Identifier	p
>8595	Identifier	toNode
>8596	Condition	 
>8597	UnaryOp	! p -> warpNode . empty ( )
>8598	CallExpression	p -> warpNode . empty ( )
>8599	ArgumentList	 
>8600	Callee	p -> warpNode . empty
>8601	MemberAccess	p -> warpNode . empty
>8602	Identifier	empty
>8603	PtrMemberAccess	p -> warpNode
>8604	Identifier	warpNode
>8605	Identifier	p
>8606	UnaryOperator	!
>8607	ExpressionStatement	 
>8608	AssignmentExpr	toNode = \"\"
>8609	PrimaryExpression	\"\"
>8610	Identifier	toNode
>8611	ExpressionStatement	 
>8612	AssignmentExpr	sceneToLoad = p -> warpMap
>8613	PtrMemberAccess	p -> warpMap
>8614	Identifier	warpMap
>8615	Identifier	p
>8616	Identifier	sceneToLoad
>8617	ExpressionStatement	 
>8618	CallExpression	warpPrep ( )
>8619	ArgumentList	 
>8620	Callee	warpPrep
>8621	Identifier	warpPrep
>8639	FunctionDef	Game 
>8640	ParameterList	std 
>8641	Parameter	 
>8642	Identifier	scene
>8643	ParameterType	std 
>8644	ReturnType	void
>8645	CompoundStatement	 
>8646	ExpressionStatement	 
>8647	CallExpression	core -> enqueueJumpState ( \"Game\" , false )
>8648	ArgumentList	\"Game\"
>8649	Argument	false
>8650	Identifier	false
>8651	Argument	\"Game\"
>8652	PrimaryExpression	\"Game\"
>8653	Callee	core -> enqueueJumpState
>8654	PtrMemberAccess	core -> enqueueJumpState
>8655	Identifier	enqueueJumpState
>8656	Identifier	core
>8657	ExpressionStatement	 
>8658	CallExpression	stringToLower ( sceneToLoad )
>8659	ArgumentList	sceneToLoad
>8660	Argument	sceneToLoad
>8661	Identifier	sceneToLoad
>8662	Callee	stringToLower
>8663	Identifier	stringToLower
>8664	ExpressionStatement	 
>8665	AssignmentExpr	sceneToLoad = scene
>8666	Identifier	scene
>8667	Identifier	sceneToLoad
>8668	IfStatement	if ( avatar )
>8669	CompoundStatement	 
>8670	ExpressionStatement	 
>8671	CallExpression	avatar -> onWarp ( )
>8672	ArgumentList	 
>8673	Callee	avatar -> onWarp
>8674	PtrMemberAccess	avatar -> onWarp
>8675	Identifier	onWarp
>8676	Identifier	avatar
>8677	Condition	 
>8678	Identifier	avatar
>8687	FunctionDef	Game 
>8688	ParameterList	int idx
>8689	Parameter	 
>8690	Identifier	idx
>8691	ParameterType	int
>8692	ReturnType	ElementTemplate *
>8693	CompoundStatement	 
>8694	ReturnStatement	 
>8695	PrimaryExpression	0
>8696	ForStatement	for ( int i = 0 ; i < elementTemplates . size ( ) ; i ++ )
>8697	CompoundStatement	 
>8698	IfStatement	if ( elementTemplates [ i ] . idx == idx )
>8699	CompoundStatement	 
>8700	ReturnStatement	 
>8701	UnaryOp	& elementTemplates [ i ]
>8702	ArrayIndexing	elementTemplates [ i ]
>8703	Identifier	i
>8704	Identifier	elementTemplates
>8705	UnaryOperator	&
>8706	Condition	 
>8707	EqualityExpression	elementTemplates [ i ] . idx == idx
>8708	Identifier	idx
>8709	MemberAccess	elementTemplates [ i ] . idx
>8710	Identifier	idx
>8711	ArrayIndexing	elementTemplates [ i ]
>8712	Identifier	i
>8713	Identifier	elementTemplates
>8714	IncDecOp	 
>8715	IncDec	++
>8716	Identifier	i
>8717	Condition	 
>8718	RelationalExpression	i < elementTemplates . size ( )
>8719	CallExpression	elementTemplates . size ( )
>8720	ArgumentList	 
>8721	Callee	elementTemplates . size
>8722	MemberAccess	elementTemplates . size
>8723	Identifier	size
>8724	Identifier	elementTemplates
>8725	Identifier	i
>8726	ForInit	 
>8727	IdentifierDeclStatement	int i = 0 ;
>8728	IdentifierDecl	i = 0
>8729	AssignmentExpr	i = 0
>8730	PrimaryExpression	0
>8731	Identifier	i
>8732	Identifier	i
>8733	IdentifierDeclType	int
>8746	FunctionDef	Game 
>8747	ParameterList	int idx , Vector position , int bgLayer , RenderObject * copy , ElementTemplate * et
>8748	Parameter	 
>8749	Identifier	et
>8750	ParameterType	ElementTemplate *
>8751	Parameter	 
>8752	Identifier	copy
>8753	ParameterType	RenderObject *
>8754	Parameter	 
>8755	Identifier	bgLayer
>8756	ParameterType	int
>8757	Parameter	 
>8758	Identifier	position
>8759	ParameterType	Vector
>8760	Parameter	 
>8761	Identifier	idx
>8762	ParameterType	int
>8763	ReturnType	Element *
>8764	CompoundStatement	 
>8765	ReturnStatement	 
>8766	Identifier	element
>8767	ExpressionStatement	 
>8768	CallExpression	dsq -> addElement ( element )
>8769	ArgumentList	element
>8770	Argument	element
>8771	Identifier	element
>8772	Callee	dsq -> addElement
>8773	PtrMemberAccess	dsq -> addElement
>8774	Identifier	addElement
>8775	Identifier	dsq
>8776	ExpressionStatement	 
>8777	CallExpression	addRenderObject ( element , LR_ELEMENTS1 + bgLayer )
>8778	ArgumentList	element
>8779	Argument	LR_ELEMENTS1 + bgLayer
>8780	AdditiveExpression	LR_ELEMENTS1 + bgLayer
>8781	Identifier	bgLayer
>8782	Identifier	LR_ELEMENTS1
>8783	Argument	element
>8784	Identifier	element
>8785	Callee	addRenderObject
>8786	Identifier	addRenderObject
>8787	IfStatement	if ( copy )
>8788	CompoundStatement	 
>8789	IfStatement	if ( q )
>8790	CompoundStatement	 
>8791	ExpressionStatement	 
>8792	CallExpression	element -> repeatTextureToFill ( q -> isRepeatingTextureToFill ( ) )
>8793	ArgumentList	q -> isRepeatingTextureToFill ( )
>8794	Argument	q -> isRepeatingTextureToFill ( )
>8795	CallExpression	q -> isRepeatingTextureToFill ( )
>8796	ArgumentList	 
>8797	Callee	q -> isRepeatingTextureToFill
>8798	PtrMemberAccess	q -> isRepeatingTextureToFill
>8799	Identifier	isRepeatingTextureToFill
>8800	Identifier	q
>8801	Callee	element -> repeatTextureToFill
>8802	PtrMemberAccess	element -> repeatTextureToFill
>8803	Identifier	repeatTextureToFill
>8804	Identifier	element
>8805	Condition	 
>8806	Identifier	q
>8807	ExpressionStatement	 
>8808	Identifier	copy
>8809	Statement	 
>8810	Statement	 
>8811	Statement	 
>8812	Statement	 
>8813	Statement	 
>8814	Statement	 
>8815	Statement	 
>8816	Statement	 
>8817	Statement	 
>8818	ExpressionStatement	 
>8819	AssignmentExpr	element -> rotation = copy -> rotation
>8820	PtrMemberAccess	copy -> rotation
>8821	Identifier	rotation
>8822	Identifier	copy
>8823	PtrMemberAccess	element -> rotation
>8824	Identifier	rotation
>8825	Identifier	element
>8826	IfStatement	if ( copy -> isfv ( ) )
>8827	ExpressionStatement	 
>8828	CallExpression	element -> flipVertical ( )
>8829	ArgumentList	 
>8830	Callee	element -> flipVertical
>8831	PtrMemberAccess	element -> flipVertical
>8832	Identifier	flipVertical
>8833	Identifier	element
>8834	Condition	 
>8835	CallExpression	copy -> isfv ( )
>8836	ArgumentList	 
>8837	Callee	copy -> isfv
>8838	PtrMemberAccess	copy -> isfv
>8839	Identifier	isfv
>8840	Identifier	copy
>8841	IfStatement	if ( copy -> isfh ( ) )
>8842	ExpressionStatement	 
>8843	CallExpression	element -> flipHorizontal ( )
>8844	ArgumentList	 
>8845	Callee	element -> flipHorizontal
>8846	PtrMemberAccess	element -> flipHorizontal
>8847	Identifier	flipHorizontal
>8848	Identifier	element
>8849	Condition	 
>8850	CallExpression	copy -> isfh ( )
>8851	ArgumentList	 
>8852	Callee	copy -> isfh
>8853	PtrMemberAccess	copy -> isfh
>8854	Identifier	isfh
>8855	Identifier	copy
>8856	ExpressionStatement	 
>8857	AssignmentExpr	element -> scale = copy -> scale
>8858	PtrMemberAccess	copy -> scale
>8859	Identifier	scale
>8860	Identifier	copy
>8861	PtrMemberAccess	element -> scale
>8862	Identifier	scale
>8863	Identifier	element
>8864	Condition	 
>8865	Identifier	copy
>8866	IfStatement	if ( et )
>8867	CompoundStatement	 
>8868	IfStatement	if ( et -> tu1 != 0 || et -> tu2 != 0 || et -> tv1 != 0 || et -> tv2 != 0 )
>8869	CompoundStatement	 
>8870	ExpressionStatement	 
>8871	AssignmentExpr	element -> lowerRightTextureCoordinates = Vector ( et -> tu2 , et -> tv2 )
>8872	CallExpression	Vector ( et -> tu2 , et -> tv2 )
>8873	ArgumentList	et -> tu2
>8874	Argument	et -> tv2
>8875	PtrMemberAccess	et -> tv2
>8876	Identifier	tv2
>8877	Identifier	et
>8878	Argument	et -> tu2
>8879	PtrMemberAccess	et -> tu2
>8880	Identifier	tu2
>8881	Identifier	et
>8882	Callee	Vector
>8883	Identifier	Vector
>8884	PtrMemberAccess	element -> lowerRightTextureCoordinates
>8885	Identifier	lowerRightTextureCoordinates
>8886	Identifier	element
>8887	ExpressionStatement	 
>8888	AssignmentExpr	element -> upperLeftTextureCoordinates = Vector ( et -> tu1 , et -> tv1 )
>8889	CallExpression	Vector ( et -> tu1 , et -> tv1 )
>8890	ArgumentList	et -> tu1
>8891	Argument	et -> tv1
>8892	PtrMemberAccess	et -> tv1
>8893	Identifier	tv1
>8894	Identifier	et
>8895	Argument	et -> tu1
>8896	PtrMemberAccess	et -> tu1
>8897	Identifier	tu1
>8898	Identifier	et
>8899	Callee	Vector
>8900	Identifier	Vector
>8901	PtrMemberAccess	element -> upperLeftTextureCoordinates
>8902	Identifier	upperLeftTextureCoordinates
>8903	Identifier	element
>8904	Condition	 
>8905	OrExpression	et -> tu1 != 0 || et -> tu2 != 0 || et -> tv1 != 0 || et -> tv2 != 0
>8906	OrExpression	et -> tu2 != 0 || et -> tv1 != 0 || et -> tv2 != 0
>8907	OrExpression	et -> tv1 != 0 || et -> tv2 != 0
>8908	EqualityExpression	et -> tv2 != 0
>8909	PrimaryExpression	0
>8910	PtrMemberAccess	et -> tv2
>8911	Identifier	tv2
>8912	Identifier	et
>8913	EqualityExpression	et -> tv1 != 0
>8914	PrimaryExpression	0
>8915	PtrMemberAccess	et -> tv1
>8916	Identifier	tv1
>8917	Identifier	et
>8918	EqualityExpression	et -> tu2 != 0
>8919	PrimaryExpression	0
>8920	PtrMemberAccess	et -> tu2
>8921	Identifier	tu2
>8922	Identifier	et
>8923	EqualityExpression	et -> tu1 != 0
>8924	PrimaryExpression	0
>8925	PtrMemberAccess	et -> tu1
>8926	Identifier	tu1
>8927	Identifier	et
>8928	Condition	 
>8929	Identifier	et
>8930	IfStatement	if ( et )
>8931	CompoundStatement	 
>8932	IfStatement	if ( et -> w != - 1 && et -> h != - 1 )
>8933	ExpressionStatement	 
>8934	CallExpression	element -> setWidthHeight ( et -> w , et -> h )
>8935	ArgumentList	et -> w
>8936	Argument	et -> h
>8937	PtrMemberAccess	et -> h
>8938	Identifier	h
>8939	Identifier	et
>8940	Argument	et -> w
>8941	PtrMemberAccess	et -> w
>8942	Identifier	w
>8943	Identifier	et
>8944	Callee	element -> setWidthHeight
>8945	PtrMemberAccess	element -> setWidthHeight
>8946	Identifier	setWidthHeight
>8947	Identifier	element
>8948	Condition	 
>8949	AndExpression	et -> w != - 1 && et -> h != - 1
>8950	EqualityExpression	et -> h != - 1
>8951	UnaryOp	- 1
>8952	PrimaryExpression	1
>8953	UnaryOperator	-
>8954	PtrMemberAccess	et -> h
>8955	Identifier	h
>8956	Identifier	et
>8957	EqualityExpression	et -> w != - 1
>8958	UnaryOp	- 1
>8959	PrimaryExpression	1
>8960	UnaryOperator	-
>8961	PtrMemberAccess	et -> w
>8962	Identifier	w
>8963	Identifier	et
>8964	Condition	 
>8965	Identifier	et
>8966	ExpressionStatement	 
>8967	AssignmentExpr	element -> bgLayer = bgLayer
>8968	Identifier	bgLayer
>8969	PtrMemberAccess	element -> bgLayer
>8970	Identifier	bgLayer
>8971	Identifier	element
>8972	ExpressionStatement	 
>8973	AssignmentExpr	element -> templateIdx = idx
>8974	Identifier	idx
>8975	PtrMemberAccess	element -> templateIdx
>8976	Identifier	templateIdx
>8977	Identifier	element
>8978	ExpressionStatement	 
>8979	AssignmentExpr	element -> position . z = - 0.05
>8980	UnaryOp	- 0.05
>8981	PrimaryExpression	0.05
>8982	UnaryOperator	-
>8983	MemberAccess	element -> position . z
>8984	Identifier	z
>8985	PtrMemberAccess	element -> position
>8986	Identifier	position
>8987	Identifier	element
>8988	ExpressionStatement	 
>8989	AssignmentExpr	element -> position = position
>8990	Identifier	position
>8991	PtrMemberAccess	element -> position
>8992	Identifier	position
>8993	Identifier	element
>8994	IfStatement	if ( et )
>8995	CompoundStatement	 
>8996	ExpressionStatement	 
>8997	AssignmentExpr	element -> alpha = et -> alpha
>8998	PtrMemberAccess	et -> alpha
>8999	Identifier	alpha
>9000	Identifier	et
>9001	PtrMemberAccess	element -> alpha
>9002	Identifier	alpha
>9003	Identifier	element
>9004	ExpressionStatement	 
>9005	CallExpression	element -> setTexture ( et -> gfx )
>9006	ArgumentList	et -> gfx
>9007	Argument	et -> gfx
>9008	PtrMemberAccess	et -> gfx
>9009	Identifier	gfx
>9010	Identifier	et
>9011	Callee	element -> setTexture
>9012	PtrMemberAccess	element -> setTexture
>9013	Identifier	setTexture
>9014	Identifier	element
>9015	Condition	 
>9016	Identifier	et
>9017	IdentifierDeclStatement	 
>9018	IdentifierDecl	* element = new Element ( )
>9019	AssignmentExpr	* element = new Element ( )
>9020	UnaryExpression	new Element ( )
>9021	Identifier	element
>9022	Identifier	element
>9023	IdentifierDeclType	Element *
>9024	IfStatement	if ( ! et )
>9025	ExpressionStatement	 
>9026	AssignmentExpr	et = this -> getElementTemplateByIdx ( idx )
>9027	CallExpression	this -> getElementTemplateByIdx ( idx )
>9028	ArgumentList	idx
>9029	Argument	idx
>9030	Identifier	idx
>9031	Callee	this -> getElementTemplateByIdx
>9032	PtrMemberAccess	this -> getElementTemplateByIdx
>9033	Identifier	getElementTemplateByIdx
>9034	Identifier	this
>9035	Identifier	et
>9036	Condition	 
>9037	UnaryOp	! et
>9038	Identifier	et
>9039	UnaryOperator	!
>9040	IfStatement	if ( idx == - 1 )
>9041	ReturnStatement	 
>9042	PrimaryExpression	0
>9043	Condition	 
>9044	EqualityExpression	idx == - 1
>9045	UnaryOp	- 1
>9046	PrimaryExpression	1
>9047	UnaryOperator	-
>9048	Identifier	idx
>9091	FunctionDef	Game 
>9092	ParameterList	int tx , int ty , int len
>9093	Parameter	 
>9094	Identifier	len
>9095	ParameterType	int
>9096	Parameter	 
>9097	Identifier	ty
>9098	ParameterType	int
>9099	Parameter	 
>9100	Identifier	tx
>9101	ParameterType	int
>9102	ReturnType	void
>9103	CompoundStatement	 
>9104	ExpressionStatement	 
>9105	CallExpression	obsRows . push_back ( obsRow )
>9106	ArgumentList	obsRow
>9107	Argument	obsRow
>9108	Identifier	obsRow
>9109	Callee	obsRows . push_back
>9110	MemberAccess	obsRows . push_back
>9111	Identifier	push_back
>9112	Identifier	obsRows
>9113	IdentifierDeclStatement	 
>9114	IdentifierDecl	obsRow ( tx , ty , len )
>9115	Expression	tx , ty , len
>9116	Expression	ty , len
>9117	Identifier	len
>9118	Identifier	ty
>9119	Identifier	tx
>9120	Identifier	obsRow
>9121	IdentifierDeclType	ObsRow
>9130	FunctionDef	Game 
>9131	ParameterList	 
>9132	ReturnType	void
>9133	CompoundStatement	 
>9134	ExpressionStatement	 
>9135	CallExpression	obsRows . clear ( )
>9136	ArgumentList	 
>9137	Callee	obsRows . clear
>9138	MemberAccess	obsRows . clear
>9139	Identifier	clear
>9140	Identifier	obsRows
>9145	FunctionDef	Game 
>9146	ParameterList	Quad * q , ObsType obsType , bool trim
>9147	Parameter	 
>9148	Identifier	trim
>9149	ParameterType	bool
>9150	Parameter	 
>9151	Identifier	obsType
>9152	ParameterType	ObsType
>9153	Parameter	 
>9154	Identifier	q
>9155	ParameterType	Quad *
>9156	ReturnType	void
>9157	CompoundStatement	 
>9158	IfStatement	if ( q -> texture )
>9159	CompoundStatement	 
>9160	ExpressionStatement	 
>9161	CallExpression	glPopMatrix ( )
>9162	ArgumentList	 
>9163	Callee	glPopMatrix
>9164	Identifier	glPopMatrix
>9165	ForStatement	for ( int i = 0 ; i < obs . size ( ) ; i ++ )
>9166	CompoundStatement	 
>9167	IfStatement	if ( ! dsq -> game -> isObstructed ( tvec ) )
>9168	ExpressionStatement	 
>9169	CallExpression	dsq -> game -> addGrid ( tvec , obsType )
>9170	ArgumentList	tvec
>9171	Argument	obsType
>9172	Identifier	obsType
>9173	Argument	tvec
>9174	Identifier	tvec
>9175	Callee	dsq -> game -> addGrid
>9176	PtrMemberAccess	dsq -> game -> addGrid
>9177	Identifier	addGrid
>9178	PtrMemberAccess	dsq -> game
>9179	Identifier	game
>9180	Identifier	dsq
>9181	Condition	 
>9182	UnaryOp	! dsq -> game -> isObstructed ( tvec )
>9183	CallExpression	dsq -> game -> isObstructed ( tvec )
>9184	ArgumentList	tvec
>9185	Argument	tvec
>9186	Identifier	tvec
>9187	Callee	dsq -> game -> isObstructed
>9188	PtrMemberAccess	dsq -> game -> isObstructed
>9189	Identifier	isObstructed
>9190	PtrMemberAccess	dsq -> game
>9191	Identifier	game
>9192	Identifier	dsq
>9193	UnaryOperator	!
>9194	IdentifierDeclStatement	 
>9195	IdentifierDecl	tvec ( tpos . x + w2 + x , tpos . y + h2 + y )
>9196	Expression	tpos . x + w2 + x , tpos . y + h2 + y
>9197	AdditiveExpression	tpos . y + h2 + y
>9198	AdditiveExpression	h2 + y
>9199	Identifier	y
>9200	Identifier	h2
>9201	MemberAccess	tpos . y
>9202	Identifier	y
>9203	Identifier	tpos
>9204	AdditiveExpression	tpos . x + w2 + x
>9205	AdditiveExpression	w2 + x
>9206	Identifier	x
>9207	Identifier	w2
>9208	MemberAccess	tpos . x
>9209	Identifier	x
>9210	Identifier	tpos
>9211	Identifier	tvec
>9212	IdentifierDeclType	TileVector
>9213	IdentifierDeclStatement	 
>9214	IdentifierDecl	y = m [ 13 ]
>9215	AssignmentExpr	y = m [ 13 ]
>9216	ArrayIndexing	m [ 13 ]
>9217	PrimaryExpression	13
>9218	Identifier	m
>9219	Identifier	y
>9220	Identifier	y
>9221	IdentifierDeclType	float
>9222	IdentifierDeclStatement	 
>9223	IdentifierDecl	x = m [ 12 ]
>9224	AssignmentExpr	x = m [ 12 ]
>9225	ArrayIndexing	m [ 12 ]
>9226	PrimaryExpression	12
>9227	Identifier	m
>9228	Identifier	x
>9229	Identifier	x
>9230	IdentifierDeclType	float
>9231	ExpressionStatement	 
>9232	CallExpression	glGetFloatv ( GL_MODELVIEW_MATRIX , m )
>9233	ArgumentList	GL_MODELVIEW_MATRIX
>9234	Argument	m
>9235	Identifier	m
>9236	Argument	GL_MODELVIEW_MATRIX
>9237	Identifier	GL_MODELVIEW_MATRIX
>9238	Callee	glGetFloatv
>9239	Identifier	glGetFloatv
>9240	IdentifierDeclStatement	 
>9241	IdentifierDecl	m [ 16 ]
>9242	PrimaryExpression	16
>9243	Identifier	m
>9244	IdentifierDeclType	float [ 16 ]
>9245	ExpressionStatement	 
>9246	CallExpression	glTranslatef ( ( obs [ i ] . x - w2 ) , ( obs [ i ] . y - h2 ) , 0 )
>9247	ArgumentList	obs [ i ] . x - w2
>9248	Argument	0
>9249	PrimaryExpression	0
>9250	Argument	obs [ i ] . y - h2
>9251	AdditiveExpression	obs [ i ] . y - h2
>9252	Identifier	h2
>9253	MemberAccess	obs [ i ] . y
>9254	Identifier	y
>9255	ArrayIndexing	obs [ i ]
>9256	Identifier	i
>9257	Identifier	obs
>9258	Argument	obs [ i ] . x - w2
>9259	AdditiveExpression	obs [ i ] . x - w2
>9260	Identifier	w2
>9261	MemberAccess	obs [ i ] . x
>9262	Identifier	x
>9263	ArrayIndexing	obs [ i ]
>9264	Identifier	i
>9265	Identifier	obs
>9266	Callee	glTranslatef
>9267	Identifier	glTranslatef
>9268	IfStatement	if ( q -> isfh ( ) )
>9269	CompoundStatement	 
>9270	ExpressionStatement	 
>9271	CallExpression	glRotatef ( 180 , 0 , 1 , 0 )
>9272	ArgumentList	180
>9273	Argument	0
>9274	PrimaryExpression	0
>9275	Argument	1
>9276	PrimaryExpression	1
>9277	Argument	0
>9278	PrimaryExpression	0
>9279	Argument	180
>9280	PrimaryExpression	180
>9281	Callee	glRotatef
>9282	Identifier	glRotatef
>9283	Condition	 
>9284	CallExpression	q -> isfh ( )
>9285	ArgumentList	 
>9286	Callee	q -> isfh
>9287	PtrMemberAccess	q -> isfh
>9288	Identifier	isfh
>9289	Identifier	q
>9290	ExpressionStatement	 
>9291	CallExpression	glRotatef ( q -> rotation . z , 0 , 0 , 1 )
>9292	ArgumentList	q -> rotation . z
>9293	Argument	1
>9294	PrimaryExpression	1
>9295	Argument	0
>9296	PrimaryExpression	0
>9297	Argument	0
>9298	PrimaryExpression	0
>9299	Argument	q -> rotation . z
>9300	MemberAccess	q -> rotation . z
>9301	Identifier	z
>9302	PtrMemberAccess	q -> rotation
>9303	Identifier	rotation
>9304	Identifier	q
>9305	Callee	glRotatef
>9306	Identifier	glRotatef
>9307	ExpressionStatement	 
>9308	CallExpression	glLoadIdentity ( )
>9309	ArgumentList	 
>9310	Callee	glLoadIdentity
>9311	Identifier	glLoadIdentity
>9312	IncDecOp	 
>9313	IncDec	++
>9314	Identifier	i
>9315	Condition	 
>9316	RelationalExpression	i < obs . size ( )
>9317	CallExpression	obs . size ( )
>9318	ArgumentList	 
>9319	Callee	obs . size
>9320	MemberAccess	obs . size
>9321	Identifier	size
>9322	Identifier	obs
>9323	Identifier	i
>9324	ForInit	 
>9325	IdentifierDeclStatement	int i = 0 ;
>9326	IdentifierDecl	i = 0
>9327	AssignmentExpr	i = 0
>9328	PrimaryExpression	0
>9329	Identifier	i
>9330	Identifier	i
>9331	IdentifierDeclType	int
>9332	ExpressionStatement	 
>9333	CallExpression	glPushMatrix ( )
>9334	ArgumentList	 
>9335	Callee	glPushMatrix
>9336	Identifier	glPushMatrix
>9337	IfStatement	if ( trim )
>9338	CompoundStatement	 
>9339	ForStatement	for ( int i = 0 ; i < obsCopy . size ( ) ; i ++ )
>9340	CompoundStatement	 
>9341	ForStatement	for ( int j = 0 ; j < obsCopy . size ( ) ; j ++ )
>9342	CompoundStatement	 
>9343	IfStatement	if ( i != j )
>9344	CompoundStatement	 
>9345	IfStatement	if ( sides >= 4 )
>9346	CompoundStatement	 
>9347	BreakStatement	 
>9348	ExpressionStatement	 
>9349	CallExpression	obs . push_back ( obsCopy [ i ] )
>9350	ArgumentList	obsCopy [ i ]
>9351	Argument	obsCopy [ i ]
>9352	ArrayIndexing	obsCopy [ i ]
>9353	Identifier	i
>9354	Identifier	obsCopy
>9355	Callee	obs . push_back
>9356	MemberAccess	obs . push_back
>9357	Identifier	push_back
>9358	Identifier	obs
>9359	Condition	 
>9360	RelationalExpression	sides >= 4
>9361	PrimaryExpression	4
>9362	Identifier	sides
>9363	IfStatement	if ( ( obsCopy [ j ] . x == obsCopy [ i ] . x - 1 && obsCopy [ j ] . y == obsCopy [ i ] . y ) || ( obsCopy [ j ] \
>9364	CompoundStatement	 
>9365	ExpressionStatement	 
>9366	IncDecOp	sides ++
>9367	IncDec	++
>9368	Identifier	sides
>9369	Condition	 
>9370	OrExpression	( obsCopy [ j ] . x == obsCopy [ i ] . x - 1 && obsCopy [ j ] . y == obsCopy [ i ] . y ) || ( obsCopy [ \
>9371	OrExpression	( obsCopy [ j ] . x == obsCopy [ i ] . x + 1 && obsCopy [ j ] . y == obsCopy [ i ] . y ) || ( obsCopy [ \
>9372	OrExpression	( obsCopy [ j ] . y == obsCopy [ i ] . y - 1 && obsCopy [ j ] . x == obsCopy [ i ] . x ) || ( obsCopy [ \
>9373	AndExpression	obsCopy [ j ] . y == obsCopy [ i ] . y + 1 && obsCopy [ j ] . x == obsCopy [ i ] . x
>9374	EqualityExpression	obsCopy [ j ] . x == obsCopy [ i ] . x
>9375	MemberAccess	obsCopy [ i ] . x
>9376	Identifier	x
>9377	ArrayIndexing	obsCopy [ i ]
>9378	Identifier	i
>9379	Identifier	obsCopy
>9380	MemberAccess	obsCopy [ j ] . x
>9381	Identifier	x
>9382	ArrayIndexing	obsCopy [ j ]
>9383	Identifier	j
>9384	Identifier	obsCopy
>9385	EqualityExpression	obsCopy [ j ] . y == obsCopy [ i ] . y + 1
>9386	AdditiveExpression	obsCopy [ i ] . y + 1
>9387	PrimaryExpression	1
>9388	MemberAccess	obsCopy [ i ] . y
>9389	Identifier	y
>9390	ArrayIndexing	obsCopy [ i ]
>9391	Identifier	i
>9392	Identifier	obsCopy
>9393	MemberAccess	obsCopy [ j ] . y
>9394	Identifier	y
>9395	ArrayIndexing	obsCopy [ j ]
>9396	Identifier	j
>9397	Identifier	obsCopy
>9398	AndExpression	obsCopy [ j ] . y == obsCopy [ i ] . y - 1 && obsCopy [ j ] . x == obsCopy [ i ] . x
>9399	EqualityExpression	obsCopy [ j ] . x == obsCopy [ i ] . x
>9400	MemberAccess	obsCopy [ i ] . x
>9401	Identifier	x
>9402	ArrayIndexing	obsCopy [ i ]
>9403	Identifier	i
>9404	Identifier	obsCopy
>9405	MemberAccess	obsCopy [ j ] . x
>9406	Identifier	x
>9407	ArrayIndexing	obsCopy [ j ]
>9408	Identifier	j
>9409	Identifier	obsCopy
>9410	EqualityExpression	obsCopy [ j ] . y == obsCopy [ i ] . y - 1
>9411	AdditiveExpression	obsCopy [ i ] . y - 1
>9412	PrimaryExpression	1
>9413	MemberAccess	obsCopy [ i ] . y
>9414	Identifier	y
>9415	ArrayIndexing	obsCopy [ i ]
>9416	Identifier	i
>9417	Identifier	obsCopy
>9418	MemberAccess	obsCopy [ j ] . y
>9419	Identifier	y
>9420	ArrayIndexing	obsCopy [ j ]
>9421	Identifier	j
>9422	Identifier	obsCopy
>9423	AndExpression	obsCopy [ j ] . x == obsCopy [ i ] . x + 1 && obsCopy [ j ] . y == obsCopy [ i ] . y
>9424	EqualityExpression	obsCopy [ j ] . y == obsCopy [ i ] . y
>9425	MemberAccess	obsCopy [ i ] . y
>9426	Identifier	y
>9427	ArrayIndexing	obsCopy [ i ]
>9428	Identifier	i
>9429	Identifier	obsCopy
>9430	MemberAccess	obsCopy [ j ] . y
>9431	Identifier	y
>9432	ArrayIndexing	obsCopy [ j ]
>9433	Identifier	j
>9434	Identifier	obsCopy
>9435	EqualityExpression	obsCopy [ j ] . x == obsCopy [ i ] . x + 1
>9436	AdditiveExpression	obsCopy [ i ] . x + 1
>9437	PrimaryExpression	1
>9438	MemberAccess	obsCopy [ i ] . x
>9439	Identifier	x
>9440	ArrayIndexing	obsCopy [ i ]
>9441	Identifier	i
>9442	Identifier	obsCopy
>9443	MemberAccess	obsCopy [ j ] . x
>9444	Identifier	x
>9445	ArrayIndexing	obsCopy [ j ]
>9446	Identifier	j
>9447	Identifier	obsCopy
>9448	AndExpression	obsCopy [ j ] . x == obsCopy [ i ] . x - 1 && obsCopy [ j ] . y == obsCopy [ i ] . y
>9449	EqualityExpression	obsCopy [ j ] . y == obsCopy [ i ] . y
>9450	MemberAccess	obsCopy [ i ] . y
>9451	Identifier	y
>9452	ArrayIndexing	obsCopy [ i ]
>9453	Identifier	i
>9454	Identifier	obsCopy
>9455	MemberAccess	obsCopy [ j ] . y
>9456	Identifier	y
>9457	ArrayIndexing	obsCopy [ j ]
>9458	Identifier	j
>9459	Identifier	obsCopy
>9460	EqualityExpression	obsCopy [ j ] . x == obsCopy [ i ] . x - 1
>9461	AdditiveExpression	obsCopy [ i ] . x - 1
>9462	PrimaryExpression	1
>9463	MemberAccess	obsCopy [ i ] . x
>9464	Identifier	x
>9465	ArrayIndexing	obsCopy [ i ]
>9466	Identifier	i
>9467	Identifier	obsCopy
>9468	MemberAccess	obsCopy [ j ] . x
>9469	Identifier	x
>9470	ArrayIndexing	obsCopy [ j ]
>9471	Identifier	j
>9472	Identifier	obsCopy
>9473	Condition	 
>9474	EqualityExpression	i != j
>9475	Identifier	j
>9476	Identifier	i
>9477	IncDecOp	 
>9478	IncDec	++
>9479	Identifier	j
>9480	Condition	 
>9481	RelationalExpression	j < obsCopy . size ( )
>9482	CallExpression	obsCopy . size ( )
>9483	ArgumentList	 
>9484	Callee	obsCopy . size
>9485	MemberAccess	obsCopy . size
>9486	Identifier	size
>9487	Identifier	obsCopy
>9488	Identifier	j
>9489	ForInit	 
>9490	IdentifierDeclStatement	int j = 0 ;
>9491	IdentifierDecl	j = 0
>9492	AssignmentExpr	j = 0
>9493	PrimaryExpression	0
>9494	Identifier	j
>9495	Identifier	j
>9496	IdentifierDeclType	int
>9497	ExpressionStatement	 
>9498	AssignmentExpr	sides = 0
>9499	PrimaryExpression	0
>9500	Identifier	sides
>9501	IncDecOp	 
>9502	IncDec	++
>9503	Identifier	i
>9504	Condition	 
>9505	RelationalExpression	i < obsCopy . size ( )
>9506	CallExpression	obsCopy . size ( )
>9507	ArgumentList	 
>9508	Callee	obsCopy . size
>9509	MemberAccess	obsCopy . size
>9510	Identifier	size
>9511	Identifier	obsCopy
>9512	Identifier	i
>9513	ForInit	 
>9514	IdentifierDeclStatement	int i = 0 ;
>9515	IdentifierDecl	i = 0
>9516	AssignmentExpr	i = 0
>9517	PrimaryExpression	0
>9518	Identifier	i
>9519	Identifier	i
>9520	IdentifierDeclType	int
>9521	IdentifierDeclStatement	 
>9522	IdentifierDecl	sides = 0
>9523	AssignmentExpr	sides = 0
>9524	PrimaryExpression	0
>9525	Identifier	sides
>9526	Identifier	sides
>9527	IdentifierDeclType	int
>9528	ExpressionStatement	 
>9529	CallExpression	obsCopy . swap ( obs )
>9530	ArgumentList	obs
>9531	Argument	obs
>9532	Identifier	obs
>9533	Callee	obsCopy . swap
>9534	MemberAccess	obsCopy . swap
>9535	Identifier	swap
>9536	Identifier	obsCopy
>9537	IdentifierDeclStatement	 
>9538	IdentifierDecl	obsCopy
>9539	Identifier	obsCopy
>9540	IdentifierDeclType	std 
>9541	Condition	 
>9542	Identifier	trim
>9543	ExpressionStatement	 
>9544	CallExpression	free ( data )
>9545	ArgumentList	data
>9546	Argument	data
>9547	Identifier	data
>9548	Callee	free
>9549	Identifier	free
>9550	ForStatement	for ( int tx = 0 ; tx < widthscale ; tx += TILE_SIZE )
>9551	CompoundStatement	 
>9552	ForStatement	for ( int ty = 0 ; ty < heightscale ; ty += TILE_SIZE )
>9553	CompoundStatement	 
>9554	IfStatement	if ( num >= int ( ( szx * szy ) * 0.8f ) )
>9555	CompoundStatement	 
>9556	ExpressionStatement	 
>9557	CallExpression	obs . push_back ( TileVector ( int ( tx / TILE_SIZE ) , int ( ty / TILE_SIZE ) ) )
>9558	ArgumentList	TileVector ( int ( tx / TILE_SIZE ) , int ( ty / TILE_SIZE ) )
>9559	Argument	TileVector ( int ( tx / TILE_SIZE ) , int ( ty / TILE_SIZE ) )
>9560	CallExpression	TileVector ( int ( tx / TILE_SIZE ) , int ( ty / TILE_SIZE ) )
>9561	ArgumentList	int ( tx / TILE_SIZE )
>9562	Argument	int ( ty / TILE_SIZE )
>9563	CallExpression	int ( ty / TILE_SIZE )
>9564	ArgumentList	ty / TILE_SIZE
>9565	Argument	ty / TILE_SIZE
>9566	MultiplicativeExpression	ty / TILE_SIZE
>9567	Identifier	TILE_SIZE
>9568	Identifier	ty
>9569	Callee	int
>9570	Identifier	int
>9571	Argument	int ( tx / TILE_SIZE )
>9572	CallExpression	int ( tx / TILE_SIZE )
>9573	ArgumentList	tx / TILE_SIZE
>9574	Argument	tx / TILE_SIZE
>9575	MultiplicativeExpression	tx / TILE_SIZE
>9576	Identifier	TILE_SIZE
>9577	Identifier	tx
>9578	Callee	int
>9579	Identifier	int
>9580	Callee	TileVector
>9581	Identifier	TileVector
>9582	Callee	obs . push_back
>9583	MemberAccess	obs . push_back
>9584	Identifier	push_back
>9585	Identifier	obs
>9586	Condition	 
>9587	RelationalExpression	num >= int ( ( szx * szy ) * 0.8f )
>9588	CallExpression	int ( ( szx * szy ) * 0.8f )
>9589	ArgumentList	( szx * szy ) * 0.8f
>9590	Argument	( szx * szy ) * 0.8f
>9591	MultiplicativeExpression	( szx * szy ) * 0.8f
>9592	PrimaryExpression	0.8f
>9593	MultiplicativeExpression	szx * szy
>9594	Identifier	szy
>9595	Identifier	szx
>9596	Callee	int
>9597	Identifier	int
>9598	Identifier	num
>9599	ForStatement	for ( int x = 0 ; x < szx ; x ++ )
>9600	CompoundStatement	 
>9601	ForStatement	for ( int y = 0 ; y < szy ; y ++ )
>9602	CompoundStatement	 
>9603	CompoundStatement	 
>9604	IfStatement	if ( p < size && data [ p ] >= 254 )
>9605	ElseStatement	else
>9606	CompoundStatement	 
>9607	BreakStatement	 
>9608	CompoundStatement	 
>9609	ExpressionStatement	 
>9610	IncDecOp	num ++
>9611	IncDec	++
>9612	Identifier	num
>9613	Condition	 
>9614	AndExpression	p < size && data [ p ] >= 254
>9615	RelationalExpression	data [ p ] >= 254
>9616	PrimaryExpression	254
>9617	ArrayIndexing	data [ p ]
>9618	Identifier	p
>9619	Identifier	data
>9620	RelationalExpression	p < size
>9621	Identifier	size
>9622	Identifier	p
>9623	ExpressionStatement	 
>9624	AdditiveExpression	+ ( px * 4 ) + 3
>9625	PrimaryExpression	3
>9626	UnaryOp	+ ( px * 4 )
>9627	MultiplicativeExpression	px * 4
>9628	PrimaryExpression	4
>9629	Identifier	px
>9630	UnaryOperator	+
>9631	Statement	 
>9632	Statement	 
>9633	Statement	 
>9634	Statement	 
>9635	Statement	 
>9636	Statement	 
>9637	Statement	 
>9638	Statement	 
>9639	Statement	 
>9640	Statement	 
>9641	Statement	 
>9642	Statement	 
>9643	Statement	 
>9644	Statement	 
>9645	Statement	 
>9646	Statement	 
>9647	Statement	 
>9648	Statement	 
>9649	Statement	 
>9650	Statement	 
>9651	Statement	 
>9652	Statement	 
>9653	Statement	 
>9654	Statement	 
>9655	Statement	 
>9656	Statement	 
>9657	Statement	 
>9658	Statement	 
>9659	Statement	 
>9660	Statement	 
>9661	IdentifierDeclStatement	 
>9662	IdentifierDecl	py = int ( ty / q -> scale . y ) + y
>9663	AssignmentExpr	py = int ( ty / q -> scale . y ) + y
>9664	AdditiveExpression	int ( ty / q -> scale . y ) + y
>9665	Identifier	y
>9666	CallExpression	int ( ty / q -> scale . y )
>9667	ArgumentList	ty / q -> scale . y
>9668	Argument	ty / q -> scale . y
>9669	MultiplicativeExpression	ty / q -> scale . y
>9670	MemberAccess	q -> scale . y
>9671	Identifier	y
>9672	PtrMemberAccess	q -> scale
>9673	Identifier	scale
>9674	Identifier	q
>9675	Identifier	ty
>9676	Callee	int
>9677	Identifier	int
>9678	Identifier	py
>9679	Identifier	py
>9680	IdentifierDeclType	unsigned int
>9681	IdentifierDeclStatement	 
>9682	IdentifierDecl	px = int ( tx / q -> scale . x ) + x
>9683	AssignmentExpr	px = int ( tx / q -> scale . x ) + x
>9684	AdditiveExpression	int ( tx / q -> scale . x ) + x
>9685	Identifier	x
>9686	CallExpression	int ( tx / q -> scale . x )
>9687	ArgumentList	tx / q -> scale . x
>9688	Argument	tx / q -> scale . x
>9689	MultiplicativeExpression	tx / q -> scale . x
>9690	MemberAccess	q -> scale . x
>9691	Identifier	x
>9692	PtrMemberAccess	q -> scale
>9693	Identifier	scale
>9694	Identifier	q
>9695	Identifier	tx
>9696	Callee	int
>9697	Identifier	int
>9698	Identifier	px
>9699	Identifier	px
>9700	IdentifierDeclType	unsigned int
>9701	IncDecOp	 
>9702	IncDec	++
>9703	Identifier	y
>9704	Condition	 
>9705	RelationalExpression	y < szy
>9706	Identifier	szy
>9707	Identifier	y
>9708	ForInit	 
>9709	IdentifierDeclStatement	int y = 0 ;
>9710	IdentifierDecl	y = 0
>9711	AssignmentExpr	y = 0
>9712	PrimaryExpression	0
>9713	Identifier	y
>9714	Identifier	y
>9715	IdentifierDeclType	int
>9716	IncDecOp	 
>9717	IncDec	++
>9718	Identifier	x
>9719	Condition	 
>9720	RelationalExpression	x < szx
>9721	Identifier	szx
>9722	Identifier	x
>9723	ForInit	 
>9724	IdentifierDeclStatement	int x = 0 ;
>9725	IdentifierDecl	x = 0
>9726	AssignmentExpr	x = 0
>9727	PrimaryExpression	0
>9728	Identifier	x
>9729	Identifier	x
>9730	IdentifierDeclType	int
>9731	IdentifierDeclStatement	 
>9732	IdentifierDecl	num = 0
>9733	AssignmentExpr	num = 0
>9734	PrimaryExpression	0
>9735	Identifier	num
>9736	Identifier	num
>9737	IdentifierDeclType	int
>9738	AssignmentExpr	 
>9739	Identifier	TILE_SIZE
>9740	Identifier	ty
>9741	Condition	 
>9742	RelationalExpression	ty < heightscale
>9743	Identifier	heightscale
>9744	Identifier	ty
>9745	ForInit	 
>9746	IdentifierDeclStatement	int ty = 0 ;
>9747	IdentifierDecl	ty = 0
>9748	AssignmentExpr	ty = 0
>9749	PrimaryExpression	0
>9750	Identifier	ty
>9751	Identifier	ty
>9752	IdentifierDeclType	int
>9753	AssignmentExpr	 
>9754	Identifier	TILE_SIZE
>9755	Identifier	tx
>9756	Condition	 
>9757	RelationalExpression	tx < widthscale
>9758	Identifier	widthscale
>9759	Identifier	tx
>9760	ForInit	 
>9761	IdentifierDeclStatement	int tx = 0 ;
>9762	IdentifierDecl	tx = 0
>9763	AssignmentExpr	tx = 0
>9764	PrimaryExpression	0
>9765	Identifier	tx
>9766	Identifier	tx
>9767	IdentifierDeclType	int
>9768	IfStatement	if ( szy < 1 )
>9769	ExpressionStatement	 
>9770	AssignmentExpr	szy = 1
>9771	PrimaryExpression	1
>9772	Identifier	szy
>9773	Condition	 
>9774	RelationalExpression	szy < 1
>9775	PrimaryExpression	1
>9776	Identifier	szy
>9777	IfStatement	if ( szx < 1 )
>9778	ExpressionStatement	 
>9779	AssignmentExpr	szx = 1
>9780	PrimaryExpression	1
>9781	Identifier	szx
>9782	Condition	 
>9783	RelationalExpression	szx < 1
>9784	PrimaryExpression	1
>9785	Identifier	szx
>9786	IdentifierDeclStatement	 
>9787	IdentifierDecl	szy = TILE_SIZE / q -> scale . y
>9788	AssignmentExpr	szy = TILE_SIZE / q -> scale . y
>9789	MultiplicativeExpression	TILE_SIZE / q -> scale . y
>9790	MemberAccess	q -> scale . y
>9791	Identifier	y
>9792	PtrMemberAccess	q -> scale
>9793	Identifier	scale
>9794	Identifier	q
>9795	Identifier	TILE_SIZE
>9796	Identifier	szy
>9797	Identifier	szy
>9798	IdentifierDeclType	int
>9799	IdentifierDeclStatement	 
>9800	IdentifierDecl	szx = TILE_SIZE / q -> scale . x
>9801	AssignmentExpr	szx = TILE_SIZE / q -> scale . x
>9802	MultiplicativeExpression	TILE_SIZE / q -> scale . x
>9803	MemberAccess	q -> scale . x
>9804	Identifier	x
>9805	PtrMemberAccess	q -> scale
>9806	Identifier	scale
>9807	Identifier	q
>9808	Identifier	TILE_SIZE
>9809	Identifier	szx
>9810	Identifier	szx
>9811	IdentifierDeclType	int
>9812	IfStatement	if ( ! data )
>9813	CompoundStatement	 
>9814	ReturnStatement	 
>9815	ExpressionStatement	 
>9816	CallExpression	debugLog ( \"Failed to get buffer in Game
>9817	ArgumentList	\"Failed to get buffer in Game
>9818	Argument	\"Failed to get buffer in Game
>9819	PrimaryExpression	\"Failed to get buffer in Game
>9820	Callee	debugLog
>9821	Identifier	debugLog
>9822	Condition	 
>9823	UnaryOp	! data
>9824	Identifier	data
>9825	UnaryOperator	!
>9826	IdentifierDeclStatement	 
>9827	IdentifierDecl	* data = q -> texture -> getBufferAndSize ( & w , & h , & size )
>9828	AssignmentExpr	* data = q -> texture -> getBufferAndSize ( & w , & h , & size )
>9829	CallExpression	q -> texture -> getBufferAndSize ( & w , & h , & size )
>9830	ArgumentList	& w
>9831	Argument	& size
>9832	UnaryOp	& size
>9833	Identifier	size
>9834	UnaryOperator	&
>9835	Argument	& h
>9836	UnaryOp	& h
>9837	Identifier	h
>9838	UnaryOperator	&
>9839	Argument	& w
>9840	UnaryOp	& w
>9841	Identifier	w
>9842	UnaryOperator	&
>9843	Callee	q -> texture -> getBufferAndSize
>9844	PtrMemberAccess	q -> texture -> getBufferAndSize
>9845	Identifier	getBufferAndSize
>9846	PtrMemberAccess	q -> texture
>9847	Identifier	texture
>9848	Identifier	q
>9849	Identifier	data
>9850	Identifier	data
>9851	IdentifierDeclType	unsigned char *
>9852	IdentifierDeclStatement	 
>9853	IdentifierDecl	size = 0
>9854	AssignmentExpr	size = 0
>9855	PrimaryExpression	0
>9856	Identifier	size
>9857	Identifier	size
>9858	IdentifierDeclType	unsigned int
>9859	IdentifierDeclStatement	 
>9860	IdentifierDecl	h = 0
>9861	AssignmentExpr	h = 0
>9862	PrimaryExpression	0
>9863	Identifier	h
>9864	Identifier	h
>9865	IdentifierDeclType	int
>9866	IdentifierDecl	w = 0
>9867	AssignmentExpr	w = 0
>9868	PrimaryExpression	0
>9869	Identifier	w
>9870	Identifier	w
>9871	IdentifierDeclType	int
>9872	ExpressionStatement	 
>9873	AssignmentExpr	tpos . y -= h2
>9874	Identifier	h2
>9875	MemberAccess	tpos . y
>9876	Identifier	y
>9877	Identifier	tpos
>9878	ExpressionStatement	 
>9879	AssignmentExpr	tpos . x -= w2
>9880	Identifier	w2
>9881	MemberAccess	tpos . x
>9882	Identifier	x
>9883	Identifier	tpos
>9884	ExpressionStatement	 
>9885	AssignmentExpr	h2 /= TILE_SIZE
>9886	Identifier	TILE_SIZE
>9887	Identifier	h2
>9888	ExpressionStatement	 
>9889	AssignmentExpr	w2 /= TILE_SIZE
>9890	Identifier	TILE_SIZE
>9891	Identifier	w2
>9892	IdentifierDeclStatement	 
>9893	IdentifierDecl	h2 = heightscale / 2
>9894	AssignmentExpr	h2 = heightscale / 2
>9895	MultiplicativeExpression	heightscale / 2
>9896	PrimaryExpression	2
>9897	Identifier	heightscale
>9898	Identifier	h2
>9899	Identifier	h2
>9900	IdentifierDeclType	int
>9901	IdentifierDeclStatement	 
>9902	IdentifierDecl	w2 = widthscale / 2
>9903	AssignmentExpr	w2 = widthscale / 2
>9904	MultiplicativeExpression	widthscale / 2
>9905	PrimaryExpression	2
>9906	Identifier	widthscale
>9907	Identifier	w2
>9908	Identifier	w2
>9909	IdentifierDeclType	int
>9910	IdentifierDeclStatement	 
>9911	IdentifierDecl	heightscale = q -> getHeight ( ) * q -> scale . y
>9912	AssignmentExpr	heightscale = q -> getHeight ( ) * q -> scale . y
>9913	MultiplicativeExpression	q -> getHeight ( ) * q -> scale . y
>9914	MemberAccess	q -> scale . y
>9915	Identifier	y
>9916	PtrMemberAccess	q -> scale
>9917	Identifier	scale
>9918	Identifier	q
>9919	CallExpression	q -> getHeight ( )
>9920	ArgumentList	 
>9921	Callee	q -> getHeight
>9922	PtrMemberAccess	q -> getHeight
>9923	Identifier	getHeight
>9924	Identifier	q
>9925	Identifier	heightscale
>9926	Identifier	heightscale
>9927	IdentifierDeclType	int
>9928	IdentifierDeclStatement	 
>9929	IdentifierDecl	widthscale = q -> getWidth ( ) * q -> scale . x
>9930	AssignmentExpr	widthscale = q -> getWidth ( ) * q -> scale . x
>9931	MultiplicativeExpression	q -> getWidth ( ) * q -> scale . x
>9932	MemberAccess	q -> scale . x
>9933	Identifier	x
>9934	PtrMemberAccess	q -> scale
>9935	Identifier	scale
>9936	Identifier	q
>9937	CallExpression	q -> getWidth ( )
>9938	ArgumentList	 
>9939	Callee	q -> getWidth
>9940	PtrMemberAccess	q -> getWidth
>9941	Identifier	getWidth
>9942	Identifier	q
>9943	Identifier	widthscale
>9944	Identifier	widthscale
>9945	IdentifierDeclType	int
>9946	IdentifierDeclStatement	 
>9947	IdentifierDecl	tpos ( q -> position )
>9948	PtrMemberAccess	q -> position
>9949	Identifier	position
>9950	Identifier	q
>9951	Identifier	tpos
>9952	IdentifierDeclType	TileVector
>9953	IdentifierDeclStatement	 
>9954	IdentifierDecl	obs
>9955	Identifier	obs
>9956	IdentifierDeclType	std 
>9957	Condition	 
>9958	PtrMemberAccess	q -> texture
>9959	Identifier	texture
>9960	Identifier	q
>10036	FunctionDef	Game 
>10037	ParameterList	int n , const std 
>10038	Parameter	 
>10039	Identifier	pre
>10040	ParameterType	const std 
>10041	Parameter	 
>10042	Identifier	n
>10043	ParameterType	int
>10044	ReturnType	std 
>10045	CompoundStatement	 
>10046	ReturnStatement	 
>10047	CallExpression	os . str ( )
>10048	ArgumentList	 
>10049	Callee	os . str
>10050	MemberAccess	os . str
>10051	Identifier	str
>10052	Identifier	os
>10053	IfStatement	if ( n == 6 && bNatural )
>10054	CompoundStatement	 
>10055	ExpressionStatement	 
>10056	ShiftExpression	os << \"b\"
>10057	PrimaryExpression	\"b\"
>10058	Identifier	os
>10059	Condition	 
>10060	AndExpression	n == 6 && bNatural
>10061	Identifier	bNatural
>10062	EqualityExpression	n == 6
>10063	PrimaryExpression	6
>10064	Identifier	n
>10065	ExpressionStatement	 
>10066	ShiftExpression	os << pre << \"Note\" << n
>10067	ShiftExpression	pre << \"Note\" << n
>10068	ShiftExpression	\"Note\" << n
>10069	Identifier	n
>10070	PrimaryExpression	\"Note\"
>10071	Identifier	pre
>10072	Identifier	os
>10073	IdentifierDeclStatement	 
>10074	IdentifierDecl	os
>10075	Identifier	os
>10076	IdentifierDeclType	std 
>10085	FunctionDef	Game 
>10086	ParameterList	unsigned char maskbyte
>10087	Parameter	 
>10088	Identifier	maskbyte
>10089	ParameterType	unsigned char
>10090	ReturnType	void
>10091	CompoundStatement	 
>10092	DoStatement	do
>10093	Condition	 
>10094	RelationalExpression	gridptr < gridend
>10095	Identifier	gridend
>10096	Identifier	gridptr
>10097	CompoundStatement	 
>10098	ExpressionStatement	 
>10099	UnaryExpression	++ gridptr
>10100	Identifier	gridptr
>10101	IncDec	++
>10102	ExpressionStatement	 
>10103	AssignmentExpr	* gridptr &= mask
>10104	Identifier	mask
>10105	UnaryOp	* gridptr
>10106	Identifier	gridptr
>10107	UnaryOperator	*
>10108	IdentifierDeclStatement	 
>10109	IdentifierDecl	mask = maskbyte | ( maskbyte << 8 ) | ( maskbyte << 16 ) | ( maskbyte << 24 )
>10110	AssignmentExpr	mask = maskbyte | ( maskbyte << 8 ) | ( maskbyte << 16 ) | ( maskbyte << 24 )
>10111	InclusiveOrExpression	maskbyte | ( maskbyte << 8 ) | ( maskbyte << 16 ) | ( maskbyte << 24 )
>10112	InclusiveOrExpression	( maskbyte << 8 ) | ( maskbyte << 16 ) | ( maskbyte << 24 )
>10113	InclusiveOrExpression	( maskbyte << 16 ) | ( maskbyte << 24 )
>10114	ShiftExpression	maskbyte << 24
>10115	PrimaryExpression	24
>10116	Identifier	maskbyte
>10117	ShiftExpression	maskbyte << 16
>10118	PrimaryExpression	16
>10119	Identifier	maskbyte
>10120	ShiftExpression	maskbyte << 8
>10121	PrimaryExpression	8
>10122	Identifier	maskbyte
>10123	Identifier	maskbyte
>10124	Identifier	mask
>10125	Identifier	mask
>10126	IdentifierDeclType	const uint32
>10127	IdentifierDeclStatement	 
>10128	IdentifierDecl	* gridptr = ( uint32 * ) gridstart
>10129	AssignmentExpr	* gridptr = ( uint32 * ) gridstart
>10130	CastExpression	( uint32 * ) gridstart
>10131	Identifier	gridstart
>10132	CastTarget	uint32 *
>10133	Identifier	gridptr
>10134	Identifier	gridptr
>10135	IdentifierDeclType	uint32 *
>10136	IdentifierDeclStatement	 
>10137	IdentifierDecl	* gridend = ( uint32 * ) ( gridstart + sizeof ( grid ) )
>10138	AssignmentExpr	* gridend = ( uint32 * ) ( gridstart + sizeof ( grid ) )
>10139	CastExpression	( uint32 * ) ( gridstart + sizeof ( grid ) )
>10140	AdditiveExpression	gridstart + sizeof ( grid )
>10141	SizeofExpr	sizeof ( grid )
>10142	SizeofOperand	grid
>10143	Sizeof	sizeof
>10144	Identifier	gridstart
>10145	CastTarget	uint32 *
>10146	Identifier	gridend
>10147	Identifier	gridend
>10148	IdentifierDeclType	uint32 *
>10149	IdentifierDeclStatement	 
>10150	IdentifierDecl	* gridstart = & grid [ 0 ] [ 0 ]
>10151	AssignmentExpr	* gridstart = & grid [ 0 ] [ 0 ]
>10152	UnaryOp	& grid [ 0 ] [ 0 ]
>10153	ArrayIndexing	grid [ 0 ] [ 0 ]
>10154	PrimaryExpression	0
>10155	ArrayIndexing	grid [ 0 ]
>10156	PrimaryExpression	0
>10157	Identifier	grid
>10158	UnaryOperator	&
>10159	Identifier	gridstart
>10160	Identifier	gridstart
>10161	IdentifierDeclType	unsigned char *
>10162	ExpressionStatement	 
>10163	CallExpression	compile_assert ( sizeof ( grid ) % sizeof ( uint32 ) == 0 )
>10164	ArgumentList	sizeof ( grid ) % sizeof ( uint32 ) == 0
>10165	Argument	sizeof ( grid ) % sizeof ( uint32 ) == 0
>10166	EqualityExpression	sizeof ( grid ) % sizeof ( uint32 ) == 0
>10167	PrimaryExpression	0
>10168	MultiplicativeExpression	sizeof ( grid ) % sizeof ( uint32 )
>10169	SizeofExpr	sizeof ( uint32 )
>10170	SizeofOperand	uint32
>10171	Sizeof	sizeof
>10172	SizeofExpr	sizeof ( grid )
>10173	SizeofOperand	grid
>10174	Sizeof	sizeof
>10175	Callee	compile_assert
>10176	Identifier	compile_assert
>10189	FunctionDef	Game 
>10190	ParameterList	 
>10191	ReturnType	void
>10192	CompoundStatement	 
>10193	CompoundStatement	 
>10194	ExpressionStatement	 
>10195	CallExpression	e -> fillGrid ( )
>10196	ArgumentList	 
>10197	Callee	e -> fillGrid
>10198	PtrMemberAccess	e -> fillGrid
>10199	Identifier	fillGrid
>10200	Identifier	e
>10201	IdentifierDeclStatement	 
>10202	IdentifierDecl	* e = * i
>10203	AssignmentExpr	* e = * i
>10204	UnaryOp	* i
>10205	Identifier	i
>10206	UnaryOperator	*
>10207	Identifier	e
>10208	Identifier	e
>10209	IdentifierDeclType	Entity *
>10210	Statement	 
>10211	Statement	 
>10212	Statement	 
>10213	Statement	 
>10214	ExpressionStatement	 
>10215	CallExpression	clearDynamicGrid ( ~OT_INVISIBLEENT )
>10216	ArgumentList	~OT_INVISIBLEENT
>10217	Argument	~OT_INVISIBLEENT
>10218	Identifier	~OT_INVISIBLEENT
>10219	Callee	clearDynamicGrid
>10220	Identifier	clearDynamicGrid
>10228	FunctionDef	Game 
>10229	ParameterList	bool force
>10230	Parameter	 
>10231	Identifier	force
>10232	ParameterType	bool
>10233	ReturnType	void
>10234	CompoundStatement	 
>10235	ExpressionStatement	 
>10236	CallExpression	trimGrid ( )
>10237	ArgumentList	 
>10238	Callee	trimGrid
>10239	Identifier	trimGrid
>10240	CompoundStatement	 
>10241	ExpressionStatement	 
>10242	CallExpression	e -> fillGrid ( )
>10243	ArgumentList	 
>10244	Callee	e -> fillGrid
>10245	PtrMemberAccess	e -> fillGrid
>10246	Identifier	fillGrid
>10247	Identifier	e
>10248	IdentifierDeclStatement	 
>10249	IdentifierDecl	* e = * i
>10250	AssignmentExpr	* e = * i
>10251	UnaryOp	* i
>10252	Identifier	i
>10253	UnaryOperator	*
>10254	Identifier	e
>10255	Identifier	e
>10256	IdentifierDeclType	Entity *
>10257	Statement	 
>10258	Statement	 
>10259	Statement	 
>10260	Statement	 
>10261	ForStatement	for ( i = 0 ; i < obsRows . size ( ) ; i ++ )
>10262	CompoundStatement	 
>10263	ForStatement	for ( int tx = 0 ; tx < o -> len ; tx ++ )
>10264	CompoundStatement	 
>10265	ExpressionStatement	 
>10266	CallExpression	setGrid ( TileVector ( o -> tx + tx , o -> ty ) , OT_BLACK )
>10267	ArgumentList	TileVector ( o -> tx + tx , o -> ty )
>10268	Argument	OT_BLACK
>10269	Identifier	OT_BLACK
>10270	Argument	TileVector ( o -> tx + tx , o -> ty )
>10271	CallExpression	TileVector ( o -> tx + tx , o -> ty )
>10272	ArgumentList	o -> tx + tx
>10273	Argument	o -> ty
>10274	PtrMemberAccess	o -> ty
>10275	Identifier	ty
>10276	Identifier	o
>10277	Argument	o -> tx + tx
>10278	AdditiveExpression	o -> tx + tx
>10279	Identifier	tx
>10280	PtrMemberAccess	o -> tx
>10281	Identifier	tx
>10282	Identifier	o
>10283	Callee	TileVector
>10284	Identifier	TileVector
>10285	Callee	setGrid
>10286	Identifier	setGrid
>10287	IncDecOp	 
>10288	IncDec	++
>10289	Identifier	tx
>10290	Condition	 
>10291	RelationalExpression	tx < o -> len
>10292	PtrMemberAccess	o -> len
>10293	Identifier	len
>10294	Identifier	o
>10295	Identifier	tx
>10296	ForInit	 
>10297	IdentifierDeclStatement	int tx = 0 ;
>10298	IdentifierDecl	tx = 0
>10299	AssignmentExpr	tx = 0
>10300	PrimaryExpression	0
>10301	Identifier	tx
>10302	Identifier	tx
>10303	IdentifierDeclType	int
>10304	ExpressionStatement	 
>10305	AssignmentExpr	o = & obsRows [ i ]
>10306	UnaryOp	& obsRows [ i ]
>10307	ArrayIndexing	obsRows [ i ]
>10308	Identifier	i
>10309	Identifier	obsRows
>10310	UnaryOperator	&
>10311	Identifier	o
>10312	IncDecOp	 
>10313	IncDec	++
>10314	Identifier	i
>10315	Condition	 
>10316	RelationalExpression	i < obsRows . size ( )
>10317	CallExpression	obsRows . size ( )
>10318	ArgumentList	 
>10319	Callee	obsRows . size
>10320	MemberAccess	obsRows . size
>10321	Identifier	size
>10322	Identifier	obsRows
>10323	Identifier	i
>10324	ForInit	 
>10325	AssignmentExpr	i = 0
>10326	PrimaryExpression	0
>10327	Identifier	i
>10328	IdentifierDeclStatement	 
>10329	IdentifierDecl	* o
>10330	Identifier	o
>10331	IdentifierDeclType	ObsRow *
>10332	ForStatement	for ( i = 0 ; i < dsq -> getNumElements ( ) ; i ++ )
>10333	CompoundStatement	 
>10334	ExpressionStatement	 
>10335	CallExpression	e -> fillGrid ( )
>10336	ArgumentList	 
>10337	Callee	e -> fillGrid
>10338	PtrMemberAccess	e -> fillGrid
>10339	Identifier	fillGrid
>10340	Identifier	e
>10341	IdentifierDeclStatement	 
>10342	IdentifierDecl	* e = dsq -> getElement ( i )
>10343	AssignmentExpr	* e = dsq -> getElement ( i )
>10344	CallExpression	dsq -> getElement ( i )
>10345	ArgumentList	i
>10346	Argument	i
>10347	Identifier	i
>10348	Callee	dsq -> getElement
>10349	PtrMemberAccess	dsq -> getElement
>10350	Identifier	getElement
>10351	Identifier	dsq
>10352	Identifier	e
>10353	Identifier	e
>10354	IdentifierDeclType	Element *
>10355	IncDecOp	 
>10356	IncDec	++
>10357	Identifier	i
>10358	Condition	 
>10359	RelationalExpression	i < dsq -> getNumElements ( )
>10360	CallExpression	dsq -> getNumElements ( )
>10361	ArgumentList	 
>10362	Callee	dsq -> getNumElements
>10363	PtrMemberAccess	dsq -> getNumElements
>10364	Identifier	getNumElements
>10365	Identifier	dsq
>10366	Identifier	i
>10367	ForInit	 
>10368	AssignmentExpr	i = 0
>10369	PrimaryExpression	0
>10370	Identifier	i
>10371	IdentifierDeclStatement	 
>10372	IdentifierDecl	i = 0
>10373	AssignmentExpr	i = 0
>10374	PrimaryExpression	0
>10375	Identifier	i
>10376	Identifier	i
>10377	IdentifierDeclType	int
>10378	ExpressionStatement	 
>10379	CallExpression	clearGrid ( )
>10380	ArgumentList	 
>10381	Callee	clearGrid
>10382	Identifier	clearGrid
>10383	IfStatement	if ( ! force && isSceneEditorActive ( ) )
>10384	ReturnStatement	 
>10385	Condition	 
>10386	AndExpression	! force && isSceneEditorActive ( )
>10387	CallExpression	isSceneEditorActive ( )
>10388	ArgumentList	 
>10389	Callee	isSceneEditorActive
>10390	Identifier	isSceneEditorActive
>10391	UnaryOp	! force
>10392	Identifier	force
>10393	UnaryOperator	!
>10418	FunctionDef	Game 
>10419	ParameterList	 
>10420	ReturnType	void
>10421	CompoundStatement	 
>10422	ForStatement	for ( int x = 0 ; x < MAX_GRID ; x ++ )
>10423	CompoundStatement	 
>10424	ForStatement	for ( int y = 0 ; y < MAX_GRID ; y ++ )
>10425	CompoundStatement	 
>10426	IfStatement	if ( curCol [ y ] & OT_MASK_BLACK )
>10427	CompoundStatement	 
>10428	IfStatement	if ( ! ( leftCol [ y ] & OT_MASK_BLACK ) || ! ( rightCol [ y ] & OT_MASK_BLACK ) )
>10429	ExpressionStatement	 
>10430	CallExpression	setGrid ( TileVector ( x , y ) , OT_BLACKINVIS )
>10431	ArgumentList	TileVector ( x , y )
>10432	Argument	OT_BLACKINVIS
>10433	Identifier	OT_BLACKINVIS
>10434	Argument	TileVector ( x , y )
>10435	CallExpression	TileVector ( x , y )
>10436	ArgumentList	x
>10437	Argument	y
>10438	Identifier	y
>10439	Argument	x
>10440	Identifier	x
>10441	Callee	TileVector
>10442	Identifier	TileVector
>10443	Callee	setGrid
>10444	Identifier	setGrid
>10445	Condition	 
>10446	OrExpression	! ( leftCol [ y ] & OT_MASK_BLACK ) || ! ( rightCol [ y ] & OT_MASK_BLACK )
>10447	UnaryOp	! ( rightCol [ y ] & OT_MASK_BLACK )
>10448	BitAndExpression	rightCol [ y ] & OT_MASK_BLACK
>10449	Identifier	OT_MASK_BLACK
>10450	ArrayIndexing	rightCol [ y ]
>10451	Identifier	y
>10452	Identifier	rightCol
>10453	UnaryOperator	!
>10454	UnaryOp	! ( leftCol [ y ] & OT_MASK_BLACK )
>10455	BitAndExpression	leftCol [ y ] & OT_MASK_BLACK
>10456	Identifier	OT_MASK_BLACK
>10457	ArrayIndexing	leftCol [ y ]
>10458	Identifier	y
>10459	Identifier	leftCol
>10460	UnaryOperator	!
>10461	Condition	 
>10462	BitAndExpression	curCol [ y ] & OT_MASK_BLACK
>10463	Identifier	OT_MASK_BLACK
>10464	ArrayIndexing	curCol [ y ]
>10465	Identifier	y
>10466	Identifier	curCol
>10467	IncDecOp	 
>10468	IncDec	++
>10469	Identifier	y
>10470	Condition	 
>10471	RelationalExpression	y < MAX_GRID
>10472	Identifier	MAX_GRID
>10473	Identifier	y
>10474	ForInit	 
>10475	IdentifierDeclStatement	int y = 0 ;
>10476	IdentifierDecl	y = 0
>10477	AssignmentExpr	y = 0
>10478	PrimaryExpression	0
>10479	Identifier	y
>10480	Identifier	y
>10481	IdentifierDeclType	int
>10482	IdentifierDeclStatement	 
>10483	IdentifierDecl	* rightCol = dsq -> game -> getGridColumn ( x + 1 )
>10484	AssignmentExpr	* rightCol = dsq -> game -> getGridColumn ( x + 1 )
>10485	CallExpression	dsq -> game -> getGridColumn ( x + 1 )
>10486	ArgumentList	x + 1
>10487	Argument	x + 1
>10488	AdditiveExpression	x + 1
>10489	PrimaryExpression	1
>10490	Identifier	x
>10491	Callee	dsq -> game -> getGridColumn
>10492	PtrMemberAccess	dsq -> game -> getGridColumn
>10493	Identifier	getGridColumn
>10494	PtrMemberAccess	dsq -> game
>10495	Identifier	game
>10496	Identifier	dsq
>10497	Identifier	rightCol
>10498	Identifier	rightCol
>10499	IdentifierDeclType	const unsigned char *
>10500	IdentifierDeclStatement	 
>10501	IdentifierDecl	* leftCol = dsq -> game -> getGridColumn ( x - 1 )
>10502	AssignmentExpr	* leftCol = dsq -> game -> getGridColumn ( x - 1 )
>10503	CallExpression	dsq -> game -> getGridColumn ( x - 1 )
>10504	ArgumentList	x - 1
>10505	Argument	x - 1
>10506	AdditiveExpression	x - 1
>10507	PrimaryExpression	1
>10508	Identifier	x
>10509	Callee	dsq -> game -> getGridColumn
>10510	PtrMemberAccess	dsq -> game -> getGridColumn
>10511	Identifier	getGridColumn
>10512	PtrMemberAccess	dsq -> game
>10513	Identifier	game
>10514	Identifier	dsq
>10515	Identifier	leftCol
>10516	Identifier	leftCol
>10517	IdentifierDeclType	const unsigned char *
>10518	IdentifierDeclStatement	 
>10519	IdentifierDecl	* curCol = grid [ x ]
>10520	AssignmentExpr	* curCol = grid [ x ]
>10521	ArrayIndexing	grid [ x ]
>10522	Identifier	x
>10523	Identifier	grid
>10524	Identifier	curCol
>10525	Identifier	curCol
>10526	IdentifierDeclType	const unsigned char *
>10527	IncDecOp	 
>10528	IncDec	++
>10529	Identifier	x
>10530	Condition	 
>10531	RelationalExpression	x < MAX_GRID
>10532	Identifier	MAX_GRID
>10533	Identifier	x
>10534	ForInit	 
>10535	IdentifierDeclStatement	int x = 0 ;
>10536	IdentifierDecl	x = 0
>10537	AssignmentExpr	x = 0
>10538	PrimaryExpression	0
>10539	Identifier	x
>10540	Identifier	x
>10541	IdentifierDeclType	int
>10567	FunctionDef	Game 
>10568	ParameterList	unsigned int radius , ObsType test , ObsType set , ObsType allowOverwrite
>10569	Parameter	 
>10570	Identifier	allowOverwrite
>10571	ParameterType	ObsType
>10572	Parameter	 
>10573	Identifier	set
>10574	ParameterType	ObsType
>10575	Parameter	 
>10576	Identifier	test
>10577	ParameterType	ObsType
>10578	Parameter	 
>10579	Identifier	radius
>10580	ParameterType	unsigned int
>10581	ReturnType	void
>10582	CompoundStatement	 
>10583	ForStatement	for ( int x = 0 ; x < MAX_GRID ; ++ x )
>10584	CompoundStatement	 
>10585	ForStatement	for ( int y = 0 ; y < dilate ; ++ y )
>10586	IfStatement	if ( ! ( curCol [ y - radius ] & test ) )
>10587	ExpressionStatement	 
>10588	AssignmentExpr	curCol [ y - radius ] |= set
>10589	Identifier	set
>10590	ArrayIndexing	curCol [ y - radius ]
>10591	AdditiveExpression	y - radius
>10592	Identifier	radius
>10593	Identifier	y
>10594	Identifier	curCol
>10595	Condition	 
>10596	UnaryOp	! ( curCol [ y - radius ] & test )
>10597	BitAndExpression	curCol [ y - radius ] & test
>10598	Identifier	test
>10599	ArrayIndexing	curCol [ y - radius ]
>10600	AdditiveExpression	y - radius
>10601	Identifier	radius
>10602	Identifier	y
>10603	Identifier	curCol
>10604	UnaryOperator	!
>10605	UnaryExpression	 
>10606	Identifier	y
>10607	IncDec	++
>10608	Condition	 
>10609	RelationalExpression	y < dilate
>10610	Identifier	dilate
>10611	Identifier	y
>10612	ForInit	 
>10613	IdentifierDeclStatement	int y = 0 ;
>10614	IdentifierDecl	y = 0
>10615	AssignmentExpr	y = 0
>10616	PrimaryExpression	0
>10617	Identifier	y
>10618	Identifier	y
>10619	IdentifierDeclType	int
>10620	ExpressionStatement	 
>10621	CallExpression	assert ( lim + dilate < MAX_GRID )
>10622	ArgumentList	lim + dilate < MAX_GRID
>10623	Argument	lim + dilate < MAX_GRID
>10624	RelationalExpression	lim + dilate < MAX_GRID
>10625	Identifier	MAX_GRID
>10626	AdditiveExpression	lim + dilate
>10627	Identifier	dilate
>10628	Identifier	lim
>10629	Callee	assert
>10630	Identifier	assert
>10631	ForStatement	for ( int y = radius ; y < lim ; ++ y )
>10632	CompoundStatement	 
>10633	IfStatement	if ( dilate )
>10634	CompoundStatement	 
>10635	IfStatement	if ( ( curCol [ y - radius ] & denyOverwrite ) == OT_EMPTY )
>10636	ExpressionStatement	 
>10637	AssignmentExpr	curCol [ y - radius ] |= set
>10638	Identifier	set
>10639	ArrayIndexing	curCol [ y - radius ]
>10640	AdditiveExpression	y - radius
>10641	Identifier	radius
>10642	Identifier	y
>10643	Identifier	curCol
>10644	Condition	 
>10645	EqualityExpression	( curCol [ y - radius ] & denyOverwrite ) == OT_EMPTY
>10646	Identifier	OT_EMPTY
>10647	BitAndExpression	curCol [ y - radius ] & denyOverwrite
>10648	Identifier	denyOverwrite
>10649	ArrayIndexing	curCol [ y - radius ]
>10650	AdditiveExpression	y - radius
>10651	Identifier	radius
>10652	Identifier	y
>10653	Identifier	curCol
>10654	Label	 
>10655	Identifier	doDilate2
>10656	ExpressionStatement	 
>10657	UnaryExpression	-- dilate
>10658	Identifier	dilate
>10659	IncDec	--
>10660	Condition	 
>10661	Identifier	dilate
>10662	IfStatement	if ( curCol [ y ] & test )
>10663	CompoundStatement	 
>10664	GotoStatement	 
>10665	Identifier	doDilate2
>10666	ExpressionStatement	 
>10667	AssignmentExpr	dilate = 2 * radius
>10668	MultiplicativeExpression	2 * radius
>10669	Identifier	radius
>10670	PrimaryExpression	2
>10671	Identifier	dilate
>10672	Condition	 
>10673	BitAndExpression	curCol [ y ] & test
>10674	Identifier	test
>10675	ArrayIndexing	curCol [ y ]
>10676	Identifier	y
>10677	Identifier	curCol
>10678	UnaryExpression	 
>10679	Identifier	y
>10680	IncDec	++
>10681	Condition	 
>10682	RelationalExpression	y < lim
>10683	Identifier	lim
>10684	Identifier	y
>10685	ForInit	 
>10686	IdentifierDeclStatement	int y = radius ;
>10687	IdentifierDecl	y = radius
>10688	AssignmentExpr	y = radius
>10689	Identifier	radius
>10690	Identifier	radius
>10691	Identifier	y
>10692	IdentifierDeclType	int
>10693	ExpressionStatement	 
>10694	AssignmentExpr	curCol = grid [ x ]
>10695	ArrayIndexing	grid [ x ]
>10696	Identifier	x
>10697	Identifier	grid
>10698	Identifier	curCol
>10699	Statement	 
>10700	Statement	 
>10701	Statement	 
>10702	Statement	 
>10703	UnaryExpression	 
>10704	Identifier	x
>10705	IncDec	++
>10706	Condition	 
>10707	RelationalExpression	x < MAX_GRID
>10708	Identifier	MAX_GRID
>10709	Identifier	x
>10710	ForInit	 
>10711	IdentifierDeclStatement	int x = 0 ;
>10712	IdentifierDecl	x = 0
>10713	AssignmentExpr	x = 0
>10714	PrimaryExpression	0
>10715	Identifier	x
>10716	Identifier	x
>10717	IdentifierDeclType	int
>10718	ExpressionStatement	 
>10719	AssignmentExpr	dilate = 0
>10720	PrimaryExpression	0
>10721	Identifier	dilate
>10722	ForStatement	for ( int y = 0 ; y < MAX_GRID ; ++ y )
>10723	CompoundStatement	 
>10724	ForStatement	for ( int x = 0 ; x < dilate ; ++ x )
>10725	IfStatement	if ( ! ( grid [ x ] [ y - radius ] & test ) )
>10726	ExpressionStatement	 
>10727	AssignmentExpr	grid [ x ] [ y - radius ] |= set
>10728	Identifier	set
>10729	ArrayIndexing	grid [ x ] [ y - radius ]
>10730	AdditiveExpression	y - radius
>10731	Identifier	radius
>10732	Identifier	y
>10733	ArrayIndexing	grid [ x ]
>10734	Identifier	x
>10735	Identifier	grid
>10736	Condition	 
>10737	UnaryOp	! ( grid [ x ] [ y - radius ] & test )
>10738	BitAndExpression	grid [ x ] [ y - radius ] & test
>10739	Identifier	test
>10740	ArrayIndexing	grid [ x ] [ y - radius ]
>10741	AdditiveExpression	y - radius
>10742	Identifier	radius
>10743	Identifier	y
>10744	ArrayIndexing	grid [ x ]
>10745	Identifier	x
>10746	Identifier	grid
>10747	UnaryOperator	!
>10748	UnaryExpression	 
>10749	Identifier	x
>10750	IncDec	++
>10751	Condition	 
>10752	RelationalExpression	x < dilate
>10753	Identifier	dilate
>10754	Identifier	x
>10755	ForInit	 
>10756	IdentifierDeclStatement	int x = 0 ;
>10757	IdentifierDecl	x = 0
>10758	AssignmentExpr	x = 0
>10759	PrimaryExpression	0
>10760	Identifier	x
>10761	Identifier	x
>10762	IdentifierDeclType	int
>10763	ExpressionStatement	 
>10764	CallExpression	assert ( lim + dilate < MAX_GRID )
>10765	ArgumentList	lim + dilate < MAX_GRID
>10766	Argument	lim + dilate < MAX_GRID
>10767	RelationalExpression	lim + dilate < MAX_GRID
>10768	Identifier	MAX_GRID
>10769	AdditiveExpression	lim + dilate
>10770	Identifier	dilate
>10771	Identifier	lim
>10772	Callee	assert
>10773	Identifier	assert
>10774	ForStatement	for ( int x = radius ; x < lim ; ++ x )
>10775	CompoundStatement	 
>10776	IfStatement	if ( dilate )
>10777	CompoundStatement	 
>10778	IfStatement	if ( ( grid [ x - radius ] [ y ] & denyOverwrite ) == OT_EMPTY )
>10779	ExpressionStatement	 
>10780	AssignmentExpr	grid [ x - radius ] [ y ] |= set
>10781	Identifier	set
>10782	ArrayIndexing	grid [ x - radius ] [ y ]
>10783	Identifier	y
>10784	ArrayIndexing	grid [ x - radius ]
>10785	AdditiveExpression	x - radius
>10786	Identifier	radius
>10787	Identifier	x
>10788	Identifier	grid
>10789	Condition	 
>10790	EqualityExpression	( grid [ x - radius ] [ y ] & denyOverwrite ) == OT_EMPTY
>10791	Identifier	OT_EMPTY
>10792	BitAndExpression	grid [ x - radius ] [ y ] & denyOverwrite
>10793	Identifier	denyOverwrite
>10794	ArrayIndexing	grid [ x - radius ] [ y ]
>10795	Identifier	y
>10796	ArrayIndexing	grid [ x - radius ]
>10797	AdditiveExpression	x - radius
>10798	Identifier	radius
>10799	Identifier	x
>10800	Identifier	grid
>10801	Label	 
>10802	Identifier	doDilate1
>10803	ExpressionStatement	 
>10804	UnaryExpression	-- dilate
>10805	Identifier	dilate
>10806	IncDec	--
>10807	Condition	 
>10808	Identifier	dilate
>10809	IfStatement	if ( grid [ x ] [ y ] & test )
>10810	CompoundStatement	 
>10811	GotoStatement	 
>10812	Identifier	doDilate1
>10813	ExpressionStatement	 
>10814	AssignmentExpr	dilate = 2 * radius
>10815	MultiplicativeExpression	2 * radius
>10816	Identifier	radius
>10817	PrimaryExpression	2
>10818	Identifier	dilate
>10819	Condition	 
>10820	BitAndExpression	grid [ x ] [ y ] & test
>10821	Identifier	test
>10822	ArrayIndexing	grid [ x ] [ y ]
>10823	Identifier	y
>10824	ArrayIndexing	grid [ x ]
>10825	Identifier	x
>10826	Identifier	grid
>10827	UnaryExpression	 
>10828	Identifier	x
>10829	IncDec	++
>10830	Condition	 
>10831	RelationalExpression	x < lim
>10832	Identifier	lim
>10833	Identifier	x
>10834	ForInit	 
>10835	IdentifierDeclStatement	int x = radius ;
>10836	IdentifierDecl	x = radius
>10837	AssignmentExpr	x = radius
>10838	Identifier	radius
>10839	Identifier	radius
>10840	Identifier	x
>10841	IdentifierDeclType	int
>10842	UnaryExpression	 
>10843	Identifier	y
>10844	IncDec	++
>10845	Condition	 
>10846	RelationalExpression	y < MAX_GRID
>10847	Identifier	MAX_GRID
>10848	Identifier	y
>10849	ForInit	 
>10850	IdentifierDeclStatement	int y = 0 ;
>10851	IdentifierDecl	y = 0
>10852	AssignmentExpr	y = 0
>10853	PrimaryExpression	0
>10854	Identifier	y
>10855	Identifier	y
>10856	IdentifierDeclType	int
>10857	IdentifierDeclStatement	 
>10858	IdentifierDecl	dilate = 0
>10859	AssignmentExpr	dilate = 0
>10860	PrimaryExpression	0
>10861	Identifier	dilate
>10862	Identifier	dilate
>10863	IdentifierDeclType	int
>10864	IdentifierDeclStatement	 
>10865	IdentifierDecl	denyOverwrite = ~allowOverwrite
>10866	AssignmentExpr	denyOverwrite = ~allowOverwrite
>10867	Identifier	~allowOverwrite
>10868	Identifier	~allowOverwrite
>10869	Identifier	denyOverwrite
>10870	IdentifierDeclType	const unsigned int
>10871	IdentifierDeclStatement	 
>10872	IdentifierDecl	lim = MAX_GRID - radius
>10873	AssignmentExpr	lim = MAX_GRID - radius
>10874	AdditiveExpression	MAX_GRID - radius
>10875	Identifier	radius
>10876	Identifier	MAX_GRID
>10877	Identifier	lim
>10878	Identifier	lim
>10879	IdentifierDeclType	const int
>10880	IfStatement	if ( ! radius )
>10881	ReturnStatement	 
>10882	Condition	 
>10883	UnaryOp	! radius
>10884	Identifier	radius
>10885	UnaryOperator	!
>10911	FunctionDef	Game 
>10912	ParameterList	Vector pos , int sampleArea
>10913	Parameter	 
>10914	Identifier	sampleArea
>10915	ParameterType	int
>10916	Parameter	 
>10917	Identifier	pos
>10918	ParameterType	Vector
>10919	ReturnType	float
>10920	CompoundStatement	 
>10921	ReturnStatement	 
>10922	MultiplicativeExpression	float ( covered ) / float ( total )
>10923	CallExpression	float ( total )
>10924	ArgumentList	total
>10925	Argument	total
>10926	Identifier	total
>10927	Callee	float
>10928	Identifier	float
>10929	CallExpression	float ( covered )
>10930	ArgumentList	covered
>10931	Argument	covered
>10932	Identifier	covered
>10933	Callee	float
>10934	Identifier	float
>10935	ForStatement	for ( int x = t . x - sampleArea ; x <= t . x + sampleArea ; x ++ )
>10936	CompoundStatement	 
>10937	ForStatement	for ( int y = t . y - sampleArea ; y <= t . y + sampleArea ; y ++ )
>10938	CompoundStatement	 
>10939	ExpressionStatement	 
>10940	IncDecOp	total ++
>10941	IncDec	++
>10942	Identifier	total
>10943	IfStatement	if ( isObstructed ( ct ) )
>10944	CompoundStatement	 
>10945	ExpressionStatement	 
>10946	IncDecOp	covered ++
>10947	IncDec	++
>10948	Identifier	covered
>10949	Condition	 
>10950	CallExpression	isObstructed ( ct )
>10951	ArgumentList	ct
>10952	Argument	ct
>10953	Identifier	ct
>10954	Callee	isObstructed
>10955	Identifier	isObstructed
>10956	IdentifierDeclStatement	 
>10957	IdentifierDecl	vt = ct . worldVector ( )
>10958	AssignmentExpr	vt = ct . worldVector ( )
>10959	CallExpression	ct . worldVector ( )
>10960	ArgumentList	 
>10961	Callee	ct . worldVector
>10962	MemberAccess	ct . worldVector
>10963	Identifier	worldVector
>10964	Identifier	ct
>10965	Identifier	vt
>10966	Identifier	vt
>10967	IdentifierDeclType	Vector
>10968	IdentifierDeclStatement	 
>10969	IdentifierDecl	ct ( x , y )
>10970	Expression	x , y
>10971	Identifier	y
>10972	Identifier	x
>10973	Identifier	ct
>10974	IdentifierDeclType	TileVector
>10975	IfStatement	if ( x == t . x && y == t . y )
>10976	ContinueStatement	 
>10977	Condition	 
>10978	AndExpression	x == t . x && y == t . y
>10979	EqualityExpression	y == t . y
>10980	MemberAccess	t . y
>10981	Identifier	y
>10982	Identifier	t
>10983	Identifier	y
>10984	EqualityExpression	x == t . x
>10985	MemberAccess	t . x
>10986	Identifier	x
>10987	Identifier	t
>10988	Identifier	x
>10989	IncDecOp	 
>10990	IncDec	++
>10991	Identifier	y
>10992	Condition	 
>10993	RelationalExpression	y <= t . y + sampleArea
>10994	AdditiveExpression	t . y + sampleArea
>10995	Identifier	sampleArea
>10996	MemberAccess	t . y
>10997	Identifier	y
>10998	Identifier	t
>10999	Identifier	y
>11000	ForInit	 
>11001	IdentifierDeclStatement	int y = t . y - sampleArea ;
>11002	IdentifierDecl	y = t . y - sampleArea
>11003	AssignmentExpr	y = t . y - sampleArea
>11004	AdditiveExpression	t . y - sampleArea
>11005	Identifier	sampleArea
>11006	MemberAccess	t . y
>11007	Identifier	y
>11008	Identifier	t
>11009	Identifier	y
>11010	Identifier	y
>11011	IdentifierDeclType	int
>11012	IncDecOp	 
>11013	IncDec	++
>11014	Identifier	x
>11015	Condition	 
>11016	RelationalExpression	x <= t . x + sampleArea
>11017	AdditiveExpression	t . x + sampleArea
>11018	Identifier	sampleArea
>11019	MemberAccess	t . x
>11020	Identifier	x
>11021	Identifier	t
>11022	Identifier	x
>11023	ForInit	 
>11024	IdentifierDeclStatement	int x = t . x - sampleArea ;
>11025	IdentifierDecl	x = t . x - sampleArea
>11026	AssignmentExpr	x = t . x - sampleArea
>11027	AdditiveExpression	t . x - sampleArea
>11028	Identifier	sampleArea
>11029	MemberAccess	t . x
>11030	Identifier	x
>11031	Identifier	t
>11032	Identifier	x
>11033	Identifier	x
>11034	IdentifierDeclType	int
>11035	IdentifierDeclStatement	 
>11036	IdentifierDecl	covered = 0
>11037	AssignmentExpr	covered = 0
>11038	PrimaryExpression	0
>11039	Identifier	covered
>11040	Identifier	covered
>11041	IdentifierDeclType	int
>11042	IdentifierDecl	total = 0
>11043	AssignmentExpr	total = 0
>11044	PrimaryExpression	0
>11045	Identifier	total
>11046	Identifier	total
>11047	IdentifierDeclType	int
>11048	IdentifierDeclStatement	 
>11049	IdentifierDecl	t ( pos )
>11050	Identifier	pos
>11051	Identifier	t
>11052	IdentifierDeclType	TileVector
>11070	FunctionDef	Game 
>11071	ParameterList	Vector pos , int sampleArea , int obs
>11072	Parameter	 
>11073	Identifier	obs
>11074	ParameterType	int
>11075	Parameter	 
>11076	Identifier	sampleArea
>11077	ParameterType	int
>11078	Parameter	 
>11079	Identifier	pos
>11080	ParameterType	Vector
>11081	ReturnType	float
>11082	CompoundStatement	 
>11083	ReturnStatement	 
>11084	MultiplicativeExpression	float ( c ) / float ( sz )
>11085	CallExpression	float ( sz )
>11086	ArgumentList	sz
>11087	Argument	sz
>11088	Identifier	sz
>11089	Callee	float
>11090	Identifier	float
>11091	CallExpression	float ( c )
>11092	ArgumentList	c
>11093	Argument	c
>11094	Identifier	c
>11095	Callee	float
>11096	Identifier	float
>11097	ForStatement	for ( int x = t . x - sampleArea ; x <= t . x + sampleArea ; x ++ )
>11098	CompoundStatement	 
>11099	ForStatement	for ( int y = t . y - sampleArea ; y <= t . y + sampleArea ; y ++ )
>11100	CompoundStatement	 
>11101	IfStatement	if ( isObstructed ( TileVector ( x , y ) , obs ) )
>11102	CompoundStatement	 
>11103	ExpressionStatement	 
>11104	IncDecOp	c ++
>11105	IncDec	++
>11106	Identifier	c
>11107	Condition	 
>11108	CallExpression	isObstructed ( TileVector ( x , y ) , obs )
>11109	ArgumentList	TileVector ( x , y )
>11110	Argument	obs
>11111	Identifier	obs
>11112	Argument	TileVector ( x , y )
>11113	CallExpression	TileVector ( x , y )
>11114	ArgumentList	x
>11115	Argument	y
>11116	Identifier	y
>11117	Argument	x
>11118	Identifier	x
>11119	Callee	TileVector
>11120	Identifier	TileVector
>11121	Callee	isObstructed
>11122	Identifier	isObstructed
>11123	IncDecOp	 
>11124	IncDec	++
>11125	Identifier	y
>11126	Condition	 
>11127	RelationalExpression	y <= t . y + sampleArea
>11128	AdditiveExpression	t . y + sampleArea
>11129	Identifier	sampleArea
>11130	MemberAccess	t . y
>11131	Identifier	y
>11132	Identifier	t
>11133	Identifier	y
>11134	ForInit	 
>11135	IdentifierDeclStatement	int y = t . y - sampleArea ;
>11136	IdentifierDecl	y = t . y - sampleArea
>11137	AssignmentExpr	y = t . y - sampleArea
>11138	AdditiveExpression	t . y - sampleArea
>11139	Identifier	sampleArea
>11140	MemberAccess	t . y
>11141	Identifier	y
>11142	Identifier	t
>11143	Identifier	y
>11144	Identifier	y
>11145	IdentifierDeclType	int
>11146	IncDecOp	 
>11147	IncDec	++
>11148	Identifier	x
>11149	Condition	 
>11150	RelationalExpression	x <= t . x + sampleArea
>11151	AdditiveExpression	t . x + sampleArea
>11152	Identifier	sampleArea
>11153	MemberAccess	t . x
>11154	Identifier	x
>11155	Identifier	t
>11156	Identifier	x
>11157	ForInit	 
>11158	IdentifierDeclStatement	int x = t . x - sampleArea ;
>11159	IdentifierDecl	x = t . x - sampleArea
>11160	AssignmentExpr	x = t . x - sampleArea
>11161	AdditiveExpression	t . x - sampleArea
>11162	Identifier	sampleArea
>11163	MemberAccess	t . x
>11164	Identifier	x
>11165	Identifier	t
>11166	Identifier	x
>11167	Identifier	x
>11168	IdentifierDeclType	int
>11169	IdentifierDeclStatement	 
>11170	IdentifierDecl	t ( pos )
>11171	Identifier	pos
>11172	Identifier	t
>11173	IdentifierDeclType	TileVector
>11174	IdentifierDeclStatement	 
>11175	IdentifierDecl	c = 0
>11176	AssignmentExpr	c = 0
>11177	PrimaryExpression	0
>11178	Identifier	c
>11179	Identifier	c
>11180	IdentifierDeclType	int
>11181	IdentifierDeclStatement	 
>11182	IdentifierDecl	sz = sampleArea * sampleArea
>11183	AssignmentExpr	sz = sampleArea * sampleArea
>11184	MultiplicativeExpression	sampleArea * sampleArea
>11185	Identifier	sampleArea
>11186	Identifier	sampleArea
>11187	Identifier	sz
>11188	Identifier	sz
>11189	IdentifierDeclType	int
>11206	FunctionDef	Game 
>11207	ParameterList	Vector pos , int sampleArea , float * dist , int obs
>11208	Parameter	 
>11209	Identifier	obs
>11210	ParameterType	int
>11211	Parameter	 
>11212	Identifier	dist
>11213	ParameterType	float *
>11214	Parameter	 
>11215	Identifier	sampleArea
>11216	ParameterType	int
>11217	Parameter	 
>11218	Identifier	pos
>11219	ParameterType	Vector
>11220	ReturnType	Vector
>11221	CompoundStatement	 
>11222	ReturnStatement	 
>11223	Identifier	avg
>11224	IfStatement	if ( c )
>11225	ElseStatement	else
>11226	CompoundStatement	 
>11227	ExpressionStatement	 
>11228	AssignmentExpr	avg . x = avg . y = 0
>11229	AssignmentExpr	avg . y = 0
>11230	PrimaryExpression	0
>11231	MemberAccess	avg . y
>11232	Identifier	y
>11233	Identifier	avg
>11234	MemberAccess	avg . x
>11235	Identifier	x
>11236	Identifier	avg
>11237	CompoundStatement	 
>11238	IfStatement	if ( avg . x != 0 || avg . y != 0 )
>11239	CompoundStatement	 
>11240	ExpressionStatement	 
>11241	AssignmentExpr	avg . z = 0
>11242	PrimaryExpression	0
>11243	MemberAccess	avg . z
>11244	Identifier	z
>11245	Identifier	avg
>11246	ExpressionStatement	 
>11247	CallExpression	avg . normalize2D ( )
>11248	ArgumentList	 
>11249	Callee	avg . normalize2D
>11250	MemberAccess	avg . normalize2D
>11251	Identifier	normalize2D
>11252	Identifier	avg
>11253	Condition	 
>11254	OrExpression	avg . x != 0 || avg . y != 0
>11255	EqualityExpression	avg . y != 0
>11256	PrimaryExpression	0
>11257	MemberAccess	avg . y
>11258	Identifier	y
>11259	Identifier	avg
>11260	EqualityExpression	avg . x != 0
>11261	PrimaryExpression	0
>11262	MemberAccess	avg . x
>11263	Identifier	x
>11264	Identifier	avg
>11265	ExpressionStatement	 
>11266	AssignmentExpr	avg /= c
>11267	Identifier	c
>11268	Identifier	avg
>11269	Condition	 
>11270	Identifier	c
>11271	ForStatement	for ( int i = 0 ; i < vs . size ( ) ; i ++ )
>11272	CompoundStatement	 
>11273	IfStatement	if ( len < sz )
>11274	CompoundStatement	 
>11275	ExpressionStatement	 
>11276	AssignmentExpr	avg += vs [ i ]
>11277	ArrayIndexing	vs [ i ]
>11278	Identifier	i
>11279	Identifier	vs
>11280	Identifier	avg
>11281	ExpressionStatement	 
>11282	IncDecOp	c ++
>11283	IncDec	++
>11284	Identifier	c
>11285	ExpressionStatement	 
>11286	CallExpression	vs [ i ] . setLength2D ( sz - len )
>11287	ArgumentList	sz - len
>11288	Argument	sz - len
>11289	AdditiveExpression	sz - len
>11290	Identifier	len
>11291	Identifier	sz
>11292	Callee	vs [ i ] . setLength2D
>11293	MemberAccess	vs [ i ] . setLength2D
>11294	Identifier	setLength2D
>11295	ArrayIndexing	vs [ i ]
>11296	Identifier	i
>11297	Identifier	vs
>11298	Condition	 
>11299	RelationalExpression	len < sz
>11300	Identifier	sz
>11301	Identifier	len
>11302	IdentifierDeclStatement	 
>11303	IdentifierDecl	len = vs [ i ] . getLength2D ( )
>11304	AssignmentExpr	len = vs [ i ] . getLength2D ( )
>11305	CallExpression	vs [ i ] . getLength2D ( )
>11306	ArgumentList	 
>11307	Callee	vs [ i ] . getLength2D
>11308	MemberAccess	vs [ i ] . getLength2D
>11309	Identifier	getLength2D
>11310	ArrayIndexing	vs [ i ]
>11311	Identifier	i
>11312	Identifier	vs
>11313	Identifier	len
>11314	Identifier	len
>11315	IdentifierDeclType	float
>11316	IncDecOp	 
>11317	IncDec	++
>11318	Identifier	i
>11319	Condition	 
>11320	RelationalExpression	i < vs . size ( )
>11321	CallExpression	vs . size ( )
>11322	ArgumentList	 
>11323	Callee	vs . size
>11324	MemberAccess	vs . size
>11325	Identifier	size
>11326	Identifier	vs
>11327	Identifier	i
>11328	ForInit	 
>11329	IdentifierDeclStatement	int i = 0 ;
>11330	IdentifierDecl	i = 0
>11331	AssignmentExpr	i = 0
>11332	PrimaryExpression	0
>11333	Identifier	i
>11334	Identifier	i
>11335	IdentifierDeclType	int
>11336	IdentifierDeclStatement	 
>11337	IdentifierDecl	sz = ( TILE_SIZE * ( sampleArea - 1 ) )
>11338	AssignmentExpr	sz = ( TILE_SIZE * ( sampleArea - 1 ) )
>11339	MultiplicativeExpression	TILE_SIZE * ( sampleArea - 1 )
>11340	AdditiveExpression	sampleArea - 1
>11341	PrimaryExpression	1
>11342	Identifier	sampleArea
>11343	Identifier	TILE_SIZE
>11344	Identifier	sz
>11345	Identifier	sz
>11346	IdentifierDeclType	int
>11347	ForStatement	for ( int x = t . x - sampleArea ; x <= t . x + sampleArea ; x ++ )
>11348	CompoundStatement	 
>11349	ForStatement	for ( int y = t . y - sampleArea ; y <= t . y + sampleArea ; y ++ )
>11350	CompoundStatement	 
>11351	IfStatement	if ( isObstructed ( ct , obs ) )
>11352	CompoundStatement	 
>11353	IfStatement	if ( dist != NULL )
>11354	CompoundStatement	 
>11355	IfStatement	if ( * dist == - 1 || d < * dist )
>11356	CompoundStatement	 
>11357	ExpressionStatement	 
>11358	AssignmentExpr	* dist = d
>11359	Identifier	d
>11360	UnaryOp	* dist
>11361	Identifier	dist
>11362	UnaryOperator	*
>11363	Condition	 
>11364	OrExpression	* dist == - 1 || d < * dist
>11365	RelationalExpression	d < * dist
>11366	UnaryOp	* dist
>11367	Identifier	dist
>11368	UnaryOperator	*
>11369	Identifier	d
>11370	EqualityExpression	* dist == - 1
>11371	UnaryOp	- 1
>11372	PrimaryExpression	1
>11373	UnaryOperator	-
>11374	UnaryOp	* dist
>11375	Identifier	dist
>11376	UnaryOperator	*
>11377	IdentifierDeclStatement	 
>11378	IdentifierDecl	d = ( vt - pos ) . getLength2D ( )
>11379	AssignmentExpr	d = ( vt - pos ) . getLength2D ( )
>11380	CallExpression	( vt - pos ) . getLength2D ( )
>11381	ArgumentList	 
>11382	Callee	( vt - pos ) . getLength2D
>11383	MemberAccess	( vt - pos ) . getLength2D
>11384	Identifier	getLength2D
>11385	AdditiveExpression	vt - pos
>11386	Identifier	pos
>11387	Identifier	vt
>11388	Identifier	d
>11389	Identifier	d
>11390	IdentifierDeclType	float
>11391	Condition	 
>11392	EqualityExpression	dist != NULL
>11393	Identifier	NULL
>11394	Identifier	dist
>11395	ExpressionStatement	 
>11396	CallExpression	vs . push_back ( v )
>11397	ArgumentList	v
>11398	Argument	v
>11399	Identifier	v
>11400	Callee	vs . push_back
>11401	MemberAccess	vs . push_back
>11402	Identifier	push_back
>11403	Identifier	vs
>11404	IdentifierDeclStatement	 
>11405	IdentifierDecl	v ( xDiff , yDiff )
>11406	Expression	xDiff , yDiff
>11407	Identifier	yDiff
>11408	Identifier	xDiff
>11409	Identifier	v
>11410	IdentifierDeclType	Vector
>11411	IdentifierDeclStatement	 
>11412	IdentifierDecl	yDiff = pos . y - vt . y
>11413	AssignmentExpr	yDiff = pos . y - vt . y
>11414	AdditiveExpression	pos . y - vt . y
>11415	MemberAccess	vt . y
>11416	Identifier	y
>11417	Identifier	vt
>11418	MemberAccess	pos . y
>11419	Identifier	y
>11420	Identifier	pos
>11421	Identifier	yDiff
>11422	Identifier	yDiff
>11423	IdentifierDeclType	int
>11424	IdentifierDeclStatement	 
>11425	IdentifierDecl	xDiff = pos . x - vt . x
>11426	AssignmentExpr	xDiff = pos . x - vt . x
>11427	AdditiveExpression	pos . x - vt . x
>11428	MemberAccess	vt . x
>11429	Identifier	x
>11430	Identifier	vt
>11431	MemberAccess	pos . x
>11432	Identifier	x
>11433	Identifier	pos
>11434	Identifier	xDiff
>11435	Identifier	xDiff
>11436	IdentifierDeclType	int
>11437	Condition	 
>11438	CallExpression	isObstructed ( ct , obs )
>11439	ArgumentList	ct
>11440	Argument	obs
>11441	Identifier	obs
>11442	Argument	ct
>11443	Identifier	ct
>11444	Callee	isObstructed
>11445	Identifier	isObstructed
>11446	IdentifierDeclStatement	 
>11447	IdentifierDecl	vt = ct . worldVector ( )
>11448	AssignmentExpr	vt = ct . worldVector ( )
>11449	CallExpression	ct . worldVector ( )
>11450	ArgumentList	 
>11451	Callee	ct . worldVector
>11452	MemberAccess	ct . worldVector
>11453	Identifier	worldVector
>11454	Identifier	ct
>11455	Identifier	vt
>11456	Identifier	vt
>11457	IdentifierDeclType	Vector
>11458	IdentifierDeclStatement	 
>11459	IdentifierDecl	ct ( x , y )
>11460	Expression	x , y
>11461	Identifier	y
>11462	Identifier	x
>11463	Identifier	ct
>11464	IdentifierDeclType	TileVector
>11465	IfStatement	if ( x == t . x && y == t . y )
>11466	ContinueStatement	 
>11467	Condition	 
>11468	AndExpression	x == t . x && y == t . y
>11469	EqualityExpression	y == t . y
>11470	MemberAccess	t . y
>11471	Identifier	y
>11472	Identifier	t
>11473	Identifier	y
>11474	EqualityExpression	x == t . x
>11475	MemberAccess	t . x
>11476	Identifier	x
>11477	Identifier	t
>11478	Identifier	x
>11479	IncDecOp	 
>11480	IncDec	++
>11481	Identifier	y
>11482	Condition	 
>11483	RelationalExpression	y <= t . y + sampleArea
>11484	AdditiveExpression	t . y + sampleArea
>11485	Identifier	sampleArea
>11486	MemberAccess	t . y
>11487	Identifier	y
>11488	Identifier	t
>11489	Identifier	y
>11490	ForInit	 
>11491	IdentifierDeclStatement	int y = t . y - sampleArea ;
>11492	IdentifierDecl	y = t . y - sampleArea
>11493	AssignmentExpr	y = t . y - sampleArea
>11494	AdditiveExpression	t . y - sampleArea
>11495	Identifier	sampleArea
>11496	MemberAccess	t . y
>11497	Identifier	y
>11498	Identifier	t
>11499	Identifier	y
>11500	Identifier	y
>11501	IdentifierDeclType	int
>11502	IncDecOp	 
>11503	IncDec	++
>11504	Identifier	x
>11505	Condition	 
>11506	RelationalExpression	x <= t . x + sampleArea
>11507	AdditiveExpression	t . x + sampleArea
>11508	Identifier	sampleArea
>11509	MemberAccess	t . x
>11510	Identifier	x
>11511	Identifier	t
>11512	Identifier	x
>11513	ForInit	 
>11514	IdentifierDeclStatement	int x = t . x - sampleArea ;
>11515	IdentifierDecl	x = t . x - sampleArea
>11516	AssignmentExpr	x = t . x - sampleArea
>11517	AdditiveExpression	t . x - sampleArea
>11518	Identifier	sampleArea
>11519	MemberAccess	t . x
>11520	Identifier	x
>11521	Identifier	t
>11522	Identifier	x
>11523	Identifier	x
>11524	IdentifierDeclType	int
>11525	IfStatement	if ( dist != NULL )
>11526	ExpressionStatement	 
>11527	AssignmentExpr	* dist = - 1
>11528	UnaryOp	- 1
>11529	PrimaryExpression	1
>11530	UnaryOperator	-
>11531	UnaryOp	* dist
>11532	Identifier	dist
>11533	UnaryOperator	*
>11534	Condition	 
>11535	EqualityExpression	dist != NULL
>11536	Identifier	NULL
>11537	Identifier	dist
>11538	IdentifierDeclStatement	 
>11539	IdentifierDecl	vs
>11540	Identifier	vs
>11541	IdentifierDeclType	std 
>11542	IdentifierDeclStatement	 
>11543	IdentifierDecl	c = 0
>11544	AssignmentExpr	c = 0
>11545	PrimaryExpression	0
>11546	Identifier	c
>11547	Identifier	c
>11548	IdentifierDeclType	int
>11549	IdentifierDeclStatement	 
>11550	IdentifierDecl	avg
>11551	Identifier	avg
>11552	IdentifierDeclType	Vector
>11553	IdentifierDeclStatement	 
>11554	IdentifierDecl	t ( pos )
>11555	Identifier	pos
>11556	Identifier	t
>11557	IdentifierDeclType	TileVector
>11599	FunctionDef	Game 
>11600	ParameterList	 
>11601	ReturnType	Entity *
>11602	CompoundStatement	 
>11603	ReturnStatement	 
>11604	Identifier	selected
>11605	CompoundStatement	 
>11606	IfStatement	if ( dist < sqr ( 64 ) && ( minDist == - 1 || dist < minDist ) )
>11607	CompoundStatement	 
>11608	ExpressionStatement	 
>11609	AssignmentExpr	dist = minDist
>11610	Identifier	minDist
>11611	Identifier	dist
>11612	ExpressionStatement	 
>11613	AssignmentExpr	selected = e
>11614	Identifier	e
>11615	Identifier	selected
>11616	Condition	 
>11617	AndExpression	dist < sqr ( 64 ) && ( minDist == - 1 || dist < minDist )
>11618	OrExpression	minDist == - 1 || dist < minDist
>11619	RelationalExpression	dist < minDist
>11620	Identifier	minDist
>11621	Identifier	dist
>11622	EqualityExpression	minDist == - 1
>11623	UnaryOp	- 1
>11624	PrimaryExpression	1
>11625	UnaryOperator	-
>11626	Identifier	minDist
>11627	RelationalExpression	dist < sqr ( 64 )
>11628	CallExpression	sqr ( 64 )
>11629	ArgumentList	64
>11630	Argument	64
>11631	PrimaryExpression	64
>11632	Callee	sqr
>11633	Identifier	sqr
>11634	Identifier	dist
>11635	IdentifierDeclStatement	 
>11636	IdentifierDecl	dist = ( e -> position - dsq -> getGameCursorPosition ( ) ) . getSquaredLength2D ( )
>11637	AssignmentExpr	dist = ( e -> position - dsq -> getGameCursorPosition ( ) ) . getSquaredLength2D ( )
>11638	CallExpression	( e -> position - dsq -> getGameCursorPosition ( ) ) . getSquaredLength2D ( )
>11639	ArgumentList	 
>11640	Callee	( e -> position - dsq -> getGameCursorPosition ( ) ) . getSquaredLength2D
>11641	MemberAccess	( e -> position - dsq -> getGameCursorPosition ( ) ) . getSquaredLength2D
>11642	Identifier	getSquaredLength2D
>11643	AdditiveExpression	e -> position - dsq -> getGameCursorPosition ( )
>11644	CallExpression	dsq -> getGameCursorPosition ( )
>11645	ArgumentList	 
>11646	Callee	dsq -> getGameCursorPosition
>11647	PtrMemberAccess	dsq -> getGameCursorPosition
>11648	Identifier	getGameCursorPosition
>11649	Identifier	dsq
>11650	PtrMemberAccess	e -> position
>11651	Identifier	position
>11652	Identifier	e
>11653	Identifier	dist
>11654	Identifier	dist
>11655	IdentifierDeclType	int
>11656	IdentifierDeclStatement	 
>11657	IdentifierDecl	* e = * i
>11658	AssignmentExpr	* e = * i
>11659	UnaryOp	* i
>11660	Identifier	i
>11661	UnaryOperator	*
>11662	Identifier	e
>11663	Identifier	e
>11664	IdentifierDeclType	Entity *
>11665	Statement	 
>11666	Statement	 
>11667	Statement	 
>11668	Statement	 
>11669	IdentifierDeclStatement	 
>11670	IdentifierDecl	* selected = 0
>11671	AssignmentExpr	* selected = 0
>11672	PrimaryExpression	0
>11673	Identifier	selected
>11674	Identifier	selected
>11675	IdentifierDeclType	Entity *
>11676	IdentifierDeclStatement	 
>11677	IdentifierDecl	minDist = - 1
>11678	AssignmentExpr	minDist = - 1
>11679	UnaryOp	- 1
>11680	PrimaryExpression	1
>11681	UnaryOperator	-
>11682	Identifier	minDist
>11683	Identifier	minDist
>11684	IdentifierDeclType	int
>11701	FunctionDef	Game 
>11702	ParameterList	 
>11703	ReturnType	bool
>11704	CompoundStatement	 
>11705	ReturnStatement	 
>11706	Identifier	false
>11707	IfStatement	if ( selected )
>11708	CompoundStatement	 
>11709	ReturnStatement	 
>11710	CallExpression	removeEntity ( selected )
>11711	ArgumentList	selected
>11712	Argument	selected
>11713	Identifier	selected
>11714	Callee	removeEntity
>11715	Identifier	removeEntity
>11716	Condition	 
>11717	Identifier	selected
>11718	IdentifierDeclStatement	 
>11719	IdentifierDecl	* selected = getEntityAtCursor ( )
>11720	AssignmentExpr	* selected = getEntityAtCursor ( )
>11721	CallExpression	getEntityAtCursor ( )
>11722	ArgumentList	 
>11723	Callee	getEntityAtCursor
>11724	Identifier	getEntityAtCursor
>11725	Identifier	selected
>11726	Identifier	selected
>11727	IdentifierDeclType	Entity *
>11735	FunctionDef	Game 
>11736	ParameterList	Entity * selected
>11737	Parameter	 
>11738	Identifier	selected
>11739	ParameterType	Entity *
>11740	ReturnType	bool
>11741	CompoundStatement	 
>11742	ReturnStatement	 
>11743	Identifier	false
>11744	ForStatement	for ( int i = 0 ; i < entitySaveData . size ( ) ; i ++ )
>11745	CompoundStatement	 
>11746	IfStatement	if ( entitySaveData [ i ] . x == int ( selected -> startPos . x ) && entitySaveData [ i ] . y == int ( selected \
>11747	CompoundStatement	 
>11748	ReturnStatement	 
>11749	Identifier	true
>11750	ForStatement	for ( int j = 0 ; j < copy . size ( ) ; j ++ )
>11751	CompoundStatement	 
>11752	IfStatement	if ( j != i )
>11753	ExpressionStatement	 
>11754	CallExpression	entitySaveData . push_back ( copy [ j ] )
>11755	ArgumentList	copy [ j ]
>11756	Argument	copy [ j ]
>11757	ArrayIndexing	copy [ j ]
>11758	Identifier	j
>11759	Identifier	copy
>11760	Callee	entitySaveData . push_back
>11761	MemberAccess	entitySaveData . push_back
>11762	Identifier	push_back
>11763	Identifier	entitySaveData
>11764	Condition	 
>11765	EqualityExpression	j != i
>11766	Identifier	i
>11767	Identifier	j
>11768	IncDecOp	 
>11769	IncDec	++
>11770	Identifier	j
>11771	Condition	 
>11772	RelationalExpression	j < copy . size ( )
>11773	CallExpression	copy . size ( )
>11774	ArgumentList	 
>11775	Callee	copy . size
>11776	MemberAccess	copy . size
>11777	Identifier	size
>11778	Identifier	copy
>11779	Identifier	j
>11780	ForInit	 
>11781	IdentifierDeclStatement	int j = 0 ;
>11782	IdentifierDecl	j = 0
>11783	AssignmentExpr	j = 0
>11784	PrimaryExpression	0
>11785	Identifier	j
>11786	Identifier	j
>11787	IdentifierDeclType	int
>11788	ExpressionStatement	 
>11789	CallExpression	entitySaveData . clear ( )
>11790	ArgumentList	 
>11791	Callee	entitySaveData . clear
>11792	MemberAccess	entitySaveData . clear
>11793	Identifier	clear
>11794	Identifier	entitySaveData
>11795	IdentifierDeclStatement	 
>11796	IdentifierDecl	copy = entitySaveData
>11797	AssignmentExpr	copy = entitySaveData
>11798	Identifier	entitySaveData
>11799	Identifier	entitySaveData
>11800	Identifier	copy
>11801	IdentifierDeclType	std 
>11802	Condition	 
>11803	AndExpression	entitySaveData [ i ] . x == int ( selected -> startPos . x ) && entitySaveData [ i ] . y == int ( selected \
>11804	EqualityExpression	entitySaveData [ i ] . y == int ( selected -> startPos . y )
>11805	CallExpression	int ( selected -> startPos . y )
>11806	ArgumentList	selected -> startPos . y
>11807	Argument	selected -> startPos . y
>11808	MemberAccess	selected -> startPos . y
>11809	Identifier	y
>11810	PtrMemberAccess	selected -> startPos
>11811	Identifier	startPos
>11812	Identifier	selected
>11813	Callee	int
>11814	Identifier	int
>11815	MemberAccess	entitySaveData [ i ] . y
>11816	Identifier	y
>11817	ArrayIndexing	entitySaveData [ i ]
>11818	Identifier	i
>11819	Identifier	entitySaveData
>11820	EqualityExpression	entitySaveData [ i ] . x == int ( selected -> startPos . x )
>11821	CallExpression	int ( selected -> startPos . x )
>11822	ArgumentList	selected -> startPos . x
>11823	Argument	selected -> startPos . x
>11824	MemberAccess	selected -> startPos . x
>11825	Identifier	x
>11826	PtrMemberAccess	selected -> startPos
>11827	Identifier	startPos
>11828	Identifier	selected
>11829	Callee	int
>11830	Identifier	int
>11831	MemberAccess	entitySaveData [ i ] . x
>11832	Identifier	x
>11833	ArrayIndexing	entitySaveData [ i ]
>11834	Identifier	i
>11835	Identifier	entitySaveData
>11836	IncDecOp	 
>11837	IncDec	++
>11838	Identifier	i
>11839	Condition	 
>11840	RelationalExpression	i < entitySaveData . size ( )
>11841	CallExpression	entitySaveData . size ( )
>11842	ArgumentList	 
>11843	Callee	entitySaveData . size
>11844	MemberAccess	entitySaveData . size
>11845	Identifier	size
>11846	Identifier	entitySaveData
>11847	Identifier	i
>11848	ForInit	 
>11849	IdentifierDeclStatement	int i = 0 ;
>11850	IdentifierDecl	i = 0
>11851	AssignmentExpr	i = 0
>11852	PrimaryExpression	0
>11853	Identifier	i
>11854	Identifier	i
>11855	IdentifierDeclType	int
>11856	WhileStatement	while ( e )
>11857	CompoundStatement	 
>11858	ExpressionStatement	 
>11859	AssignmentExpr	e = e -> NextSiblingElement ( \"Enemy\" )
>11860	CallExpression	e -> NextSiblingElement ( \"Enemy\" )
>11861	ArgumentList	\"Enemy\"
>11862	Argument	\"Enemy\"
>11863	PrimaryExpression	\"Enemy\"
>11864	Callee	e -> NextSiblingElement
>11865	PtrMemberAccess	e -> NextSiblingElement
>11866	Identifier	NextSiblingElement
>11867	Identifier	e
>11868	Identifier	e
>11869	IfStatement	if ( int ( selected -> startPos . x ) == x && int ( selected -> startPos . y ) == y )
>11870	CompoundStatement	 
>11871	ReturnStatement	 
>11872	Identifier	true
>11873	ExpressionStatement	 
>11874	CallExpression	this -> saveFile -> DeleteChild ( e )
>11875	ArgumentList	e
>11876	Argument	e
>11877	Identifier	e
>11878	Callee	this -> saveFile -> DeleteChild
>11879	PtrMemberAccess	this -> saveFile -> DeleteChild
>11880	Identifier	DeleteChild
>11881	PtrMemberAccess	this -> saveFile
>11882	Identifier	saveFile
>11883	Identifier	this
>11884	Condition	 
>11885	AndExpression	int ( selected -> startPos . x ) == x && int ( selected -> startPos . y ) == y
>11886	EqualityExpression	int ( selected -> startPos . y ) == y
>11887	Identifier	y
>11888	CallExpression	int ( selected -> startPos . y )
>11889	ArgumentList	selected -> startPos . y
>11890	Argument	selected -> startPos . y
>11891	MemberAccess	selected -> startPos . y
>11892	Identifier	y
>11893	PtrMemberAccess	selected -> startPos
>11894	Identifier	startPos
>11895	Identifier	selected
>11896	Callee	int
>11897	Identifier	int
>11898	EqualityExpression	int ( selected -> startPos . x ) == x
>11899	Identifier	x
>11900	CallExpression	int ( selected -> startPos . x )
>11901	ArgumentList	selected -> startPos . x
>11902	Argument	selected -> startPos . x
>11903	MemberAccess	selected -> startPos . x
>11904	Identifier	x
>11905	PtrMemberAccess	selected -> startPos
>11906	Identifier	startPos
>11907	Identifier	selected
>11908	Callee	int
>11909	Identifier	int
>11910	IdentifierDeclStatement	 
>11911	IdentifierDecl	y = atoi ( e -> Attribute ( \"y\" ) )
>11912	AssignmentExpr	y = atoi ( e -> Attribute ( \"y\" ) )
>11913	CallExpression	atoi ( e -> Attribute ( \"y\" ) )
>11914	ArgumentList	e -> Attribute ( \"y\" )
>11915	Argument	e -> Attribute ( \"y\" )
>11916	CallExpression	e -> Attribute ( \"y\" )
>11917	ArgumentList	\"y\"
>11918	Argument	\"y\"
>11919	PrimaryExpression	\"y\"
>11920	Callee	e -> Attribute
>11921	PtrMemberAccess	e -> Attribute
>11922	Identifier	Attribute
>11923	Identifier	e
>11924	Callee	atoi
>11925	Identifier	atoi
>11926	Identifier	y
>11927	Identifier	y
>11928	IdentifierDeclType	int
>11929	IdentifierDeclStatement	 
>11930	IdentifierDecl	x = atoi ( e -> Attribute ( \"x\" ) )
>11931	AssignmentExpr	x = atoi ( e -> Attribute ( \"x\" ) )
>11932	CallExpression	atoi ( e -> Attribute ( \"x\" ) )
>11933	ArgumentList	e -> Attribute ( \"x\" )
>11934	Argument	e -> Attribute ( \"x\" )
>11935	CallExpression	e -> Attribute ( \"x\" )
>11936	ArgumentList	\"x\"
>11937	Argument	\"x\"
>11938	PrimaryExpression	\"x\"
>11939	Callee	e -> Attribute
>11940	PtrMemberAccess	e -> Attribute
>11941	Identifier	Attribute
>11942	Identifier	e
>11943	Callee	atoi
>11944	Identifier	atoi
>11945	Identifier	x
>11946	Identifier	x
>11947	IdentifierDeclType	int
>11948	Condition	 
>11949	Identifier	e
>11950	IdentifierDeclStatement	 
>11951	IdentifierDecl	* e = this -> saveFile -> FirstChildElement ( \"Enemy\" )
>11952	AssignmentExpr	* e = this -> saveFile -> FirstChildElement ( \"Enemy\" )
>11953	CallExpression	this -> saveFile -> FirstChildElement ( \"Enemy\" )
>11954	ArgumentList	\"Enemy\"
>11955	Argument	\"Enemy\"
>11956	PrimaryExpression	\"Enemy\"
>11957	Callee	this -> saveFile -> FirstChildElement
>11958	PtrMemberAccess	this -> saveFile -> FirstChildElement
>11959	Identifier	FirstChildElement
>11960	PtrMemberAccess	this -> saveFile
>11961	Identifier	saveFile
>11962	Identifier	this
>11963	Identifier	e
>11964	Identifier	e
>11965	IdentifierDeclType	XMLElement *
>11966	ExpressionStatement	 
>11967	CallExpression	selected -> safeKill ( )
>11968	ArgumentList	 
>11969	Callee	selected -> safeKill
>11970	PtrMemberAccess	selected -> safeKill
>11971	Identifier	safeKill
>11972	Identifier	selected
>11973	ExpressionStatement	 
>11974	CallExpression	selected -> setState ( Entity 
>11975	ArgumentList	Entity 
>11976	Argument	Entity 
>11977	Identifier	Entity 
>11978	Callee	selected -> setState
>11979	PtrMemberAccess	selected -> setState
>11980	Identifier	setState
>11981	Identifier	selected
>12019	FunctionDef	Game 
>12020	ParameterList	Ingredient * i
>12021	Parameter	 
>12022	Identifier	i
>12023	ParameterType	Ingredient *
>12024	ReturnType	void
>12025	CompoundStatement	 
>12026	ExpressionStatement	 
>12027	CallExpression	ingredients . remove ( i )
>12028	ArgumentList	i
>12029	Argument	i
>12030	Identifier	i
>12031	Callee	ingredients . remove
>12032	MemberAccess	ingredients . remove
>12033	Identifier	remove
>12034	Identifier	ingredients
>12040	FunctionDef	Game 
>12041	ParameterList	 
>12042	ReturnType	void
>12043	CompoundStatement	 
>12044	ForStatement	for ( Ingredients 
>12045	CompoundStatement	 
>12046	IfStatement	if ( ! v . isLength2DIn ( 16 ) )
>12047	CompoundStatement	 
>12048	ExpressionStatement	 
>12049	AssignmentExpr	( * i ) -> vel += v
>12050	Identifier	v
>12051	PtrMemberAccess	( * i ) -> vel
>12052	Identifier	vel
>12053	UnaryOp	* i
>12054	Identifier	i
>12055	UnaryOperator	*
>12056	ExpressionStatement	 
>12057	CallExpression	v . setLength2D ( 500 )
>12058	ArgumentList	500
>12059	Argument	500
>12060	PrimaryExpression	500
>12061	Callee	v . setLength2D
>12062	MemberAccess	v . setLength2D
>12063	Identifier	setLength2D
>12064	Identifier	v
>12065	Condition	 
>12066	UnaryOp	! v . isLength2DIn ( 16 )
>12067	CallExpression	v . isLength2DIn ( 16 )
>12068	ArgumentList	16
>12069	Argument	16
>12070	PrimaryExpression	16
>12071	Callee	v . isLength2DIn
>12072	MemberAccess	v . isLength2DIn
>12073	Identifier	isLength2DIn
>12074	Identifier	v
>12075	UnaryOperator	!
>12076	IdentifierDeclStatement	 
>12077	IdentifierDecl	v = avatar -> position - ( * i ) -> position
>12078	AssignmentExpr	v = avatar -> position - ( * i ) -> position
>12079	AdditiveExpression	avatar -> position - ( * i ) -> position
>12080	PtrMemberAccess	( * i ) -> position
>12081	Identifier	position
>12082	UnaryOp	* i
>12083	Identifier	i
>12084	UnaryOperator	*
>12085	PtrMemberAccess	avatar -> position
>12086	Identifier	position
>12087	Identifier	avatar
>12088	Identifier	v
>12089	Identifier	v
>12090	IdentifierDeclType	Vector
>12091	UnaryExpression	 
>12092	Identifier	i
>12093	IncDec	++
>12094	Condition	 
>12095	EqualityExpression	i != ingredients . end ( )
>12096	CallExpression	ingredients . end ( )
>12097	ArgumentList	 
>12098	Callee	ingredients . end
>12099	MemberAccess	ingredients . end
>12100	Identifier	end
>12101	Identifier	ingredients
>12102	Identifier	i
>12103	ForInit	 
>12104	IdentifierDeclStatement	Ingredients 
>12105	IdentifierDecl	i = ingredients . begin ( )
>12106	AssignmentExpr	i = ingredients . begin ( )
>12107	CallExpression	ingredients . begin ( )
>12108	ArgumentList	 
>12109	Callee	ingredients . begin
>12110	MemberAccess	ingredients . begin
>12111	Identifier	begin
>12112	Identifier	ingredients
>12113	Identifier	i
>12114	Identifier	i
>12115	IdentifierDeclType	Ingredients 
>12132	FunctionDef	Game 
>12133	ParameterList	 
>12134	ReturnType	void
>12135	CompoundStatement	 
>12136	ExpressionStatement	 
>12137	AssignmentExpr	game -> sceneEditor . entityPageNum = 0
>12138	PrimaryExpression	0
>12139	MemberAccess	game -> sceneEditor . entityPageNum
>12140	Identifier	entityPageNum
>12141	PtrMemberAccess	game -> sceneEditor
>12142	Identifier	sceneEditor
>12143	Identifier	game
>12144	ExpressionStatement	 
>12145	CallExpression	in2 . close ( )
>12146	ArgumentList	 
>12147	Callee	in2 . close
>12148	MemberAccess	in2 . close
>12149	Identifier	close
>12150	Identifier	in2
>12151	WhileStatement	while ( std 
>12152	CompoundStatement	 
>12153	IfStatement	if ( line . find ( \"GROUP
>12154	ElseStatement	else
>12155	IfStatement	if ( ! line . empty ( ) )
>12156	CompoundStatement	 
>12157	ExpressionStatement	 
>12158	CallExpression	entityGroups [ curGroup ] . entities . push_back ( ent )
>12159	ArgumentList	ent
>12160	Argument	ent
>12161	Identifier	ent
>12162	Callee	entityGroups [ curGroup ] . entities . push_back
>12163	MemberAccess	entityGroups [ curGroup ] . entities . push_back
>12164	Identifier	push_back
>12165	MemberAccess	entityGroups [ curGroup ] . entities
>12166	Identifier	entities
>12167	ArrayIndexing	entityGroups [ curGroup ]
>12168	Identifier	curGroup
>12169	Identifier	entityGroups
>12170	ExpressionStatement	 
>12171	CallExpression	stringToLower ( ent . name )
>12172	ArgumentList	ent . name
>12173	Argument	ent . name
>12174	MemberAccess	ent . name
>12175	Identifier	name
>12176	Identifier	ent
>12177	Callee	stringToLower
>12178	Identifier	stringToLower
>12179	ExpressionStatement	 
>12180	ShiftExpression	is >> ent . name >> ent . gfx
>12181	ShiftExpression	ent . name >> ent . gfx
>12182	MemberAccess	ent . gfx
>12183	Identifier	gfx
>12184	Identifier	ent
>12185	MemberAccess	ent . name
>12186	Identifier	name
>12187	Identifier	ent
>12188	Identifier	is
>12189	IdentifierDeclStatement	 
>12190	IdentifierDecl	graphic
>12191	Identifier	graphic
>12192	IdentifierDeclType	std 
>12193	IdentifierDecl	addLine
>12194	Identifier	addLine
>12195	IdentifierDeclType	std 
>12196	IdentifierDeclStatement	 
>12197	IdentifierDecl	is ( line )
>12198	Identifier	line
>12199	Identifier	is
>12200	IdentifierDeclType	std 
>12201	IdentifierDeclStatement	 
>12202	IdentifierDecl	ent
>12203	Identifier	ent
>12204	IdentifierDeclType	EntityGroupEntity
>12205	Condition	 
>12206	UnaryOp	! line . empty ( )
>12207	CallExpression	line . empty ( )
>12208	ArgumentList	 
>12209	Callee	line . empty
>12210	MemberAccess	line . empty
>12211	Identifier	empty
>12212	Identifier	line
>12213	UnaryOperator	!
>12214	CompoundStatement	 
>12215	ExpressionStatement	 
>12216	AssignmentExpr	curGroup = entityGroups . size ( ) - 1
>12217	AdditiveExpression	entityGroups . size ( ) - 1
>12218	PrimaryExpression	1
>12219	CallExpression	entityGroups . size ( )
>12220	ArgumentList	 
>12221	Callee	entityGroups . size
>12222	MemberAccess	entityGroups . size
>12223	Identifier	size
>12224	Identifier	entityGroups
>12225	Identifier	curGroup
>12226	ExpressionStatement	 
>12227	CallExpression	entityGroups . push_back ( newGroup )
>12228	ArgumentList	newGroup
>12229	Argument	newGroup
>12230	Identifier	newGroup
>12231	Callee	entityGroups . push_back
>12232	MemberAccess	entityGroups . push_back
>12233	Identifier	push_back
>12234	Identifier	entityGroups
>12235	ExpressionStatement	 
>12236	AssignmentExpr	newGroup . name = line
>12237	Identifier	line
>12238	MemberAccess	newGroup . name
>12239	Identifier	name
>12240	Identifier	newGroup
>12241	IdentifierDeclStatement	 
>12242	IdentifierDecl	newGroup
>12243	Identifier	newGroup
>12244	IdentifierDeclType	EntityGroup
>12245	ExpressionStatement	 
>12246	AssignmentExpr	line = line . substr ( 6 , line . size ( ) )
>12247	CallExpression	line . substr ( 6 , line . size ( ) )
>12248	ArgumentList	6
>12249	Argument	line . size ( )
>12250	CallExpression	line . size ( )
>12251	ArgumentList	 
>12252	Callee	line . size
>12253	MemberAccess	line . size
>12254	Identifier	size
>12255	Identifier	line
>12256	Argument	6
>12257	PrimaryExpression	6
>12258	Callee	line . substr
>12259	MemberAccess	line . substr
>12260	Identifier	substr
>12261	Identifier	line
>12262	Identifier	line
>12263	Condition	 
>12264	EqualityExpression	line . find ( \"GROUP
>12265	Identifier	std 
>12266	CallExpression	line . find ( \"GROUP
>12267	ArgumentList	\"GROUP
>12268	Argument	\"GROUP
>12269	PrimaryExpression	\"GROUP
>12270	Callee	line . find
>12271	MemberAccess	line . find
>12272	Identifier	find
>12273	Identifier	line
>12274	Condition	 
>12275	CallExpression	std 
>12276	ArgumentList	in2
>12277	Argument	line
>12278	Identifier	line
>12279	Argument	in2
>12280	Identifier	in2
>12281	Callee	std 
>12282	Identifier	std 
>12283	IdentifierDeclStatement	 
>12284	IdentifierDecl	curGroup = 0
>12285	AssignmentExpr	curGroup = 0
>12286	PrimaryExpression	0
>12287	Identifier	curGroup
>12288	Identifier	curGroup
>12289	IdentifierDeclType	int
>12290	IdentifierDeclStatement	 
>12291	IdentifierDecl	in2 ( fn . c_str ( ) )
>12292	CallExpression	fn . c_str ( )
>12293	ArgumentList	 
>12294	Callee	fn . c_str
>12295	MemberAccess	fn . c_str
>12296	Identifier	c_str
>12297	Identifier	fn
>12298	Identifier	in2
>12299	IdentifierDeclType	InStream
>12300	IfStatement	if ( dsq -> mod . isActive ( ) )
>12301	CompoundStatement	 
>12302	ExpressionStatement	 
>12303	AssignmentExpr	fn = dsq -> mod . getPath ( ) + \"entitygroups.txt\"
>12304	AdditiveExpression	dsq -> mod . getPath ( ) + \"entitygroups.txt\"
>12305	PrimaryExpression	\"entitygroups.txt\"
>12306	CallExpression	dsq -> mod . getPath ( )
>12307	ArgumentList	 
>12308	Callee	dsq -> mod . getPath
>12309	MemberAccess	dsq -> mod . getPath
>12310	Identifier	getPath
>12311	PtrMemberAccess	dsq -> mod
>12312	Identifier	mod
>12313	Identifier	dsq
>12314	Identifier	fn
>12315	Condition	 
>12316	CallExpression	dsq -> mod . isActive ( )
>12317	ArgumentList	 
>12318	Callee	dsq -> mod . isActive
>12319	MemberAccess	dsq -> mod . isActive
>12320	Identifier	isActive
>12321	PtrMemberAccess	dsq -> mod
>12322	Identifier	mod
>12323	Identifier	dsq
>12324	IdentifierDeclStatement	 
>12325	IdentifierDecl	fn = \"scripts/entities/entitygroups.txt\"
>12326	AssignmentExpr	fn = \"scripts/entities/entitygroups.txt\"
>12327	PrimaryExpression	\"scripts/entities/entitygroups.txt\"
>12328	Identifier	fn
>12329	Identifier	fn
>12330	IdentifierDeclType	std 
>12331	ExpressionStatement	 
>12332	CallExpression	entityGroups . clear ( )
>12333	ArgumentList	 
>12334	Callee	entityGroups . clear
>12335	MemberAccess	entityGroups . clear
>12336	Identifier	clear
>12337	Identifier	entityGroups
>12338	ExpressionStatement	 
>12339	CallExpression	in . close ( )
>12340	ArgumentList	 
>12341	Callee	in . close
>12342	MemberAccess	in . close
>12343	Identifier	close
>12344	Identifier	in
>12345	WhileStatement	while ( std 
>12346	CompoundStatement	 
>12347	ExpressionStatement	 
>12348	CallExpression	entityTypeList . push_back ( EntityClass ( name , 1 , idx , prevGfx , scale ) )
>12349	ArgumentList	EntityClass ( name , 1 , idx , prevGfx , scale )
>12350	Argument	EntityClass ( name , 1 , idx , prevGfx , scale )
>12351	CallExpression	EntityClass ( name , 1 , idx , prevGfx , scale )
>12352	ArgumentList	name
>12353	Argument	scale
>12354	Identifier	scale
>12355	Argument	prevGfx
>12356	Identifier	prevGfx
>12357	Argument	idx
>12358	Identifier	idx
>12359	Argument	1
>12360	PrimaryExpression	1
>12361	Argument	name
>12362	Identifier	name
>12363	Callee	EntityClass
>12364	Identifier	EntityClass
>12365	Callee	entityTypeList . push_back
>12366	MemberAccess	entityTypeList . push_back
>12367	Identifier	push_back
>12368	Identifier	entityTypeList
>12369	ExpressionStatement	 
>12370	ShiftExpression	is >> idx >> name >> prevGfx >> scale
>12371	ShiftExpression	idx >> name >> prevGfx >> scale
>12372	ShiftExpression	name >> prevGfx >> scale
>12373	ShiftExpression	prevGfx >> scale
>12374	Identifier	scale
>12375	Identifier	prevGfx
>12376	Identifier	name
>12377	Identifier	idx
>12378	Identifier	is
>12379	IdentifierDeclStatement	 
>12380	IdentifierDecl	is ( line )
>12381	Identifier	line
>12382	Identifier	is
>12383	IdentifierDeclType	std 
>12384	IdentifierDeclStatement	 
>12385	IdentifierDecl	scale
>12386	Identifier	scale
>12387	IdentifierDeclType	float
>12388	IdentifierDeclStatement	 
>12389	IdentifierDecl	idx
>12390	Identifier	idx
>12391	IdentifierDeclType	int
>12392	IdentifierDeclStatement	 
>12393	IdentifierDecl	prevGfx
>12394	Identifier	prevGfx
>12395	IdentifierDeclType	std 
>12396	IdentifierDecl	name
>12397	Identifier	name
>12398	IdentifierDeclType	std 
>12399	Condition	 
>12400	CallExpression	std 
>12401	ArgumentList	in
>12402	Argument	line
>12403	Identifier	line
>12404	Argument	in
>12405	Identifier	in
>12406	Callee	std 
>12407	Identifier	std 
>12408	IfStatement	if ( ! in )
>12409	CompoundStatement	 
>12410	ExpressionStatement	 
>12411	CallExpression	exit_error ( dsq -> continuity . stringBank . get ( 2008 ) . c_str ( ) )
>12412	ArgumentList	dsq -> continuity . stringBank . get ( 2008 ) . c_str ( )
>12413	Argument	dsq -> continuity . stringBank . get ( 2008 ) . c_str ( )
>12414	CallExpression	dsq -> continuity . stringBank . get ( 2008 ) . c_str ( )
>12415	ArgumentList	 
>12416	Callee	dsq -> continuity . stringBank . get ( 2008 ) . c_str
>12417	MemberAccess	dsq -> continuity . stringBank . get ( 2008 ) . c_str
>12418	Identifier	c_str
>12419	CallExpression	dsq -> continuity . stringBank . get ( 2008 )
>12420	ArgumentList	2008
>12421	Argument	2008
>12422	PrimaryExpression	2008
>12423	Callee	dsq -> continuity . stringBank . get
>12424	MemberAccess	dsq -> continuity . stringBank . get
>12425	Identifier	get
>12426	MemberAccess	dsq -> continuity . stringBank
>12427	Identifier	stringBank
>12428	PtrMemberAccess	dsq -> continuity
>12429	Identifier	continuity
>12430	Identifier	dsq
>12431	Callee	exit_error
>12432	Identifier	exit_error
>12433	Condition	 
>12434	UnaryOp	! in
>12435	Identifier	in
>12436	UnaryOperator	!
>12437	IdentifierDeclStatement	 
>12438	IdentifierDecl	line
>12439	Identifier	line
>12440	IdentifierDeclType	std 
>12441	IdentifierDeclStatement	 
>12442	IdentifierDecl	in ( \"scripts/entities/entities.txt\" )
>12443	PrimaryExpression	\"scripts/entities/entities.txt\"
>12444	Identifier	in
>12445	IdentifierDeclType	InStream
>12446	ExpressionStatement	 
>12447	CallExpression	entityTypeList . clear ( )
>12448	ArgumentList	 
>12449	Callee	entityTypeList . clear
>12450	MemberAccess	entityTypeList . clear
>12451	Identifier	clear
>12452	Identifier	entityTypeList
>12498	FunctionDef	Game 
>12499	ParameterList	const std 
>12500	Parameter	 
>12501	Identifier	type
>12502	ParameterType	const std 
>12503	ReturnType	EntityClass *
>12504	CompoundStatement	 
>12505	ReturnStatement	 
>12506	PrimaryExpression	0
>12507	ForStatement	for ( int i = 0 ; i < entityTypeList . size ( ) ; i ++ )
>12508	CompoundStatement	 
>12509	IfStatement	if ( nocasecmp ( entityTypeList [ i ] . name , type ) == 0 )
>12510	ReturnStatement	 
>12511	UnaryOp	& entityTypeList [ i ]
>12512	ArrayIndexing	entityTypeList [ i ]
>12513	Identifier	i
>12514	Identifier	entityTypeList
>12515	UnaryOperator	&
>12516	Condition	 
>12517	EqualityExpression	nocasecmp ( entityTypeList [ i ] . name , type ) == 0
>12518	PrimaryExpression	0
>12519	CallExpression	nocasecmp ( entityTypeList [ i ] . name , type )
>12520	ArgumentList	entityTypeList [ i ] . name
>12521	Argument	type
>12522	Identifier	type
>12523	Argument	entityTypeList [ i ] . name
>12524	MemberAccess	entityTypeList [ i ] . name
>12525	Identifier	name
>12526	ArrayIndexing	entityTypeList [ i ]
>12527	Identifier	i
>12528	Identifier	entityTypeList
>12529	Callee	nocasecmp
>12530	Identifier	nocasecmp
>12531	IncDecOp	 
>12532	IncDec	++
>12533	Identifier	i
>12534	Condition	 
>12535	RelationalExpression	i < entityTypeList . size ( )
>12536	CallExpression	entityTypeList . size ( )
>12537	ArgumentList	 
>12538	Callee	entityTypeList . size
>12539	MemberAccess	entityTypeList . size
>12540	Identifier	size
>12541	Identifier	entityTypeList
>12542	Identifier	i
>12543	ForInit	 
>12544	IdentifierDeclStatement	int i = 0 ;
>12545	IdentifierDecl	i = 0
>12546	AssignmentExpr	i = 0
>12547	PrimaryExpression	0
>12548	Identifier	i
>12549	Identifier	i
>12550	IdentifierDeclType	int
>12564	FunctionDef	Game 
>12565	ParameterList	std 
>12566	Parameter	 
>12567	Identifier	type
>12568	ParameterType	std 
>12569	ReturnType	int
>12570	CompoundStatement	 
>12571	ReturnStatement	 
>12572	UnaryOp	- 1
>12573	PrimaryExpression	1
>12574	UnaryOperator	-
>12575	ForStatement	for ( int i = 0 ; i < entityTypeList . size ( ) ; i ++ )
>12576	CompoundStatement	 
>12577	IfStatement	if ( nocasecmp ( entityTypeList [ i ] . name , type ) == 0 )
>12578	ReturnStatement	 
>12579	MemberAccess	entityTypeList [ i ] . idx
>12580	Identifier	idx
>12581	ArrayIndexing	entityTypeList [ i ]
>12582	Identifier	i
>12583	Identifier	entityTypeList
>12584	Condition	 
>12585	EqualityExpression	nocasecmp ( entityTypeList [ i ] . name , type ) == 0
>12586	PrimaryExpression	0
>12587	CallExpression	nocasecmp ( entityTypeList [ i ] . name , type )
>12588	ArgumentList	entityTypeList [ i ] . name
>12589	Argument	type
>12590	Identifier	type
>12591	Argument	entityTypeList [ i ] . name
>12592	MemberAccess	entityTypeList [ i ] . name
>12593	Identifier	name
>12594	ArrayIndexing	entityTypeList [ i ]
>12595	Identifier	i
>12596	Identifier	entityTypeList
>12597	Callee	nocasecmp
>12598	Identifier	nocasecmp
>12599	IncDecOp	 
>12600	IncDec	++
>12601	Identifier	i
>12602	Condition	 
>12603	RelationalExpression	i < entityTypeList . size ( )
>12604	CallExpression	entityTypeList . size ( )
>12605	ArgumentList	 
>12606	Callee	entityTypeList . size
>12607	MemberAccess	entityTypeList . size
>12608	Identifier	size
>12609	Identifier	entityTypeList
>12610	Identifier	i
>12611	ForInit	 
>12612	IdentifierDeclStatement	int i = 0 ;
>12613	IdentifierDecl	i = 0
>12614	AssignmentExpr	i = 0
>12615	PrimaryExpression	0
>12616	Identifier	i
>12617	Identifier	i
>12618	IdentifierDeclType	int
>12631	FunctionDef	Game 
>12632	ParameterList	int idx , int id , Vector position , int rot , bool createSaveData , std 
>12633	Parameter	 
>12634	Identifier	doPostInit
>12635	ParameterType	bool
>12636	Parameter	 
>12637	Identifier	et
>12638	ParameterType	EntityType
>12639	Parameter	 
>12640	Identifier	name
>12641	ParameterType	std 
>12642	Parameter	 
>12643	Identifier	createSaveData
>12644	ParameterType	bool
>12645	Parameter	 
>12646	Identifier	rot
>12647	ParameterType	int
>12648	Parameter	 
>12649	Identifier	position
>12650	ParameterType	Vector
>12651	Parameter	 
>12652	Identifier	id
>12653	ParameterType	int
>12654	Parameter	 
>12655	Identifier	idx
>12656	ParameterType	int
>12657	ReturnType	Entity *
>12658	CompoundStatement	 
>12659	ReturnStatement	 
>12660	PrimaryExpression	0
>12661	ForStatement	for ( int i = 0 ; i < dsq -> game -> entityTypeList . size ( ) ; i ++ )
>12662	CompoundStatement	 
>12663	IfStatement	if ( ec -> idx == idx )
>12664	CompoundStatement	 
>12665	ReturnStatement	 
>12666	CallExpression	createEntity ( type , id , position , rot , createSaveData , name , et , doPostInit )
>12667	ArgumentList	type
>12668	Argument	doPostInit
>12669	Identifier	doPostInit
>12670	Argument	et
>12671	Identifier	et
>12672	Argument	name
>12673	Identifier	name
>12674	Argument	createSaveData
>12675	Identifier	createSaveData
>12676	Argument	rot
>12677	Identifier	rot
>12678	Argument	position
>12679	Identifier	position
>12680	Argument	id
>12681	Identifier	id
>12682	Argument	type
>12683	Identifier	type
>12684	Callee	createEntity
>12685	Identifier	createEntity
>12686	ExpressionStatement	 
>12687	AssignmentExpr	type = ec -> name
>12688	PtrMemberAccess	ec -> name
>12689	Identifier	name
>12690	Identifier	ec
>12691	Identifier	type
>12692	Condition	 
>12693	EqualityExpression	ec -> idx == idx
>12694	Identifier	idx
>12695	PtrMemberAccess	ec -> idx
>12696	Identifier	idx
>12697	Identifier	ec
>12698	IdentifierDeclStatement	 
>12699	IdentifierDecl	* ec = & dsq -> game -> entityTypeList [ i ]
>12700	AssignmentExpr	* ec = & dsq -> game -> entityTypeList [ i ]
>12701	UnaryOp	& dsq -> game -> entityTypeList [ i ]
>12702	ArrayIndexing	dsq -> game -> entityTypeList [ i ]
>12703	Identifier	i
>12704	PtrMemberAccess	dsq -> game -> entityTypeList
>12705	Identifier	entityTypeList
>12706	PtrMemberAccess	dsq -> game
>12707	Identifier	game
>12708	Identifier	dsq
>12709	UnaryOperator	&
>12710	Identifier	ec
>12711	Identifier	ec
>12712	IdentifierDeclType	EntityClass *
>12713	IncDecOp	 
>12714	IncDec	++
>12715	Identifier	i
>12716	Condition	 
>12717	RelationalExpression	i < dsq -> game -> entityTypeList . size ( )
>12718	CallExpression	dsq -> game -> entityTypeList . size ( )
>12719	ArgumentList	 
>12720	Callee	dsq -> game -> entityTypeList . size
>12721	MemberAccess	dsq -> game -> entityTypeList . size
>12722	Identifier	size
>12723	PtrMemberAccess	dsq -> game -> entityTypeList
>12724	Identifier	entityTypeList
>12725	PtrMemberAccess	dsq -> game
>12726	Identifier	game
>12727	Identifier	dsq
>12728	Identifier	i
>12729	ForInit	 
>12730	IdentifierDeclStatement	int i = 0 ;
>12731	IdentifierDecl	i = 0
>12732	AssignmentExpr	i = 0
>12733	PrimaryExpression	0
>12734	Identifier	i
>12735	Identifier	i
>12736	IdentifierDeclType	int
>12737	IdentifierDeclStatement	 
>12738	IdentifierDecl	type
>12739	Identifier	type
>12740	IdentifierDeclType	std 
>12770	FunctionDef	Game 
>12771	ParameterList	Entity * e , int num , int state
>12772	Parameter	 
>12773	Identifier	state
>12774	ParameterType	int
>12775	Parameter	 
>12776	Identifier	num
>12777	ParameterType	int
>12778	Parameter	 
>12779	Identifier	e
>12780	ParameterType	Entity *
>12781	ReturnType	void
>12782	CompoundStatement	 
>12783	IfStatement	if ( numDelete >= 0 )
>12784	CompoundStatement	 
>12785	ForStatement	for ( std 
>12786	CompoundStatement	 
>12787	IfStatement	if ( numDelete <= 0 )
>12788	BreakStatement	 
>12789	Condition	 
>12790	RelationalExpression	numDelete <= 0
>12791	PrimaryExpression	0
>12792	Identifier	numDelete
>12793	ExpressionStatement	 
>12794	IncDecOp	numDelete --
>12795	IncDec	--
>12796	Identifier	numDelete
>12797	IfStatement	if ( state == 0 )
>12798	ElseStatement	else
>12799	ExpressionStatement	 
>12800	CallExpression	( * i ) -> setState ( state )
>12801	ArgumentList	state
>12802	Argument	state
>12803	Identifier	state
>12804	Callee	( * i ) -> setState
>12805	PtrMemberAccess	( * i ) -> setState
>12806	Identifier	setState
>12807	UnaryOp	* i
>12808	Identifier	i
>12809	UnaryOperator	*
>12810	ExpressionStatement	 
>12811	CallExpression	( * i ) -> safeKill ( )
>12812	ArgumentList	 
>12813	Callee	( * i ) -> safeKill
>12814	PtrMemberAccess	( * i ) -> safeKill
>12815	Identifier	safeKill
>12816	UnaryOp	* i
>12817	Identifier	i
>12818	UnaryOperator	*
>12819	Condition	 
>12820	EqualityExpression	state == 0
>12821	PrimaryExpression	0
>12822	Identifier	state
>12823	IncDecOp	 
>12824	IncDec	++
>12825	Identifier	i
>12826	Condition	 
>12827	EqualityExpression	i != entityList . end ( )
>12828	CallExpression	entityList . end ( )
>12829	ArgumentList	 
>12830	Callee	entityList . end
>12831	MemberAccess	entityList . end
>12832	Identifier	end
>12833	Identifier	entityList
>12834	Identifier	i
>12835	ForInit	 
>12836	IdentifierDeclStatement	std 
>12837	IdentifierDecl	i = entityList . begin ( )
>12838	AssignmentExpr	i = entityList . begin ( )
>12839	CallExpression	entityList . begin ( )
>12840	ArgumentList	 
>12841	Callee	entityList . begin
>12842	MemberAccess	entityList . begin
>12843	Identifier	begin
>12844	Identifier	entityList
>12845	Identifier	i
>12846	Identifier	i
>12847	IdentifierDeclType	std 
>12848	Condition	 
>12849	RelationalExpression	numDelete >= 0
>12850	PrimaryExpression	0
>12851	Identifier	numDelete
>12852	IdentifierDeclStatement	 
>12853	IdentifierDecl	numDelete = c - ( num + 1 )
>12854	AssignmentExpr	numDelete = c - ( num + 1 )
>12855	AdditiveExpression	c - ( num + 1 )
>12856	AdditiveExpression	num + 1
>12857	PrimaryExpression	1
>12858	Identifier	num
>12859	Identifier	c
>12860	Identifier	numDelete
>12861	Identifier	numDelete
>12862	IdentifierDeclType	int
>12863	CompoundStatement	 
>12864	IfStatement	if ( ( * i ) -> entityTypeIdx == idx && ( state == 0 || ( * i ) -> getState ( ) != state ) )
>12865	CompoundStatement	 
>12866	ExpressionStatement	 
>12867	IncDecOp	c ++
>12868	IncDec	++
>12869	Identifier	c
>12870	ExpressionStatement	 
>12871	CallExpression	entityList . push_back ( * i )
>12872	ArgumentList	* i
>12873	Argument	* i
>12874	UnaryOp	* i
>12875	Identifier	i
>12876	UnaryOperator	*
>12877	Callee	entityList . push_back
>12878	MemberAccess	entityList . push_back
>12879	Identifier	push_back
>12880	Identifier	entityList
>12881	Condition	 
>12882	AndExpression	( * i ) -> entityTypeIdx == idx && ( state == 0 || ( * i ) -> getState ( ) != state )
>12883	OrExpression	state == 0 || ( * i ) -> getState ( ) != state
>12884	EqualityExpression	( * i ) -> getState ( ) != state
>12885	Identifier	state
>12886	CallExpression	( * i ) -> getState ( )
>12887	ArgumentList	 
>12888	Callee	( * i ) -> getState
>12889	PtrMemberAccess	( * i ) -> getState
>12890	Identifier	getState
>12891	UnaryOp	* i
>12892	Identifier	i
>12893	UnaryOperator	*
>12894	EqualityExpression	state == 0
>12895	PrimaryExpression	0
>12896	Identifier	state
>12897	EqualityExpression	( * i ) -> entityTypeIdx == idx
>12898	Identifier	idx
>12899	PtrMemberAccess	( * i ) -> entityTypeIdx
>12900	Identifier	entityTypeIdx
>12901	UnaryOp	* i
>12902	Identifier	i
>12903	UnaryOperator	*
>12904	Statement	 
>12905	Statement	 
>12906	Statement	 
>12907	Statement	 
>12908	IdentifierDeclStatement	 
>12909	IdentifierDecl	entityList
>12910	Identifier	entityList
>12911	IdentifierDeclType	std 
>12912	IdentifierDeclStatement	 
>12913	IdentifierDecl	c = 0
>12914	AssignmentExpr	c = 0
>12915	PrimaryExpression	0
>12916	Identifier	c
>12917	Identifier	c
>12918	IdentifierDeclType	int
>12919	IdentifierDeclStatement	 
>12920	IdentifierDecl	idx = e -> entityTypeIdx
>12921	AssignmentExpr	idx = e -> entityTypeIdx
>12922	PtrMemberAccess	e -> entityTypeIdx
>12923	Identifier	entityTypeIdx
>12924	Identifier	e
>12925	Identifier	idx
>12926	Identifier	idx
>12927	IdentifierDeclType	int
>12947	FunctionDef	Game 
>12948	ParameterList	Entity * e , int id , Vector position , int rot , bool createSaveData , std 
>12949	Parameter	 
>12950	Identifier	doPostInit
>12951	ParameterType	bool
>12952	Parameter	 
>12953	Identifier	et
>12954	ParameterType	EntityType
>12955	Parameter	 
>12956	Identifier	name
>12957	ParameterType	std 
>12958	Parameter	 
>12959	Identifier	createSaveData
>12960	ParameterType	bool
>12961	Parameter	 
>12962	Identifier	rot
>12963	ParameterType	int
>12964	Parameter	 
>12965	Identifier	position
>12966	ParameterType	Vector
>12967	Parameter	 
>12968	Identifier	id
>12969	ParameterType	int
>12970	Parameter	 
>12971	Identifier	e
>12972	ParameterType	Entity *
>12973	ReturnType	Entity *
>12974	CompoundStatement	 
>12975	ReturnStatement	 
>12976	Identifier	e
>12977	IfStatement	if ( doPostInit )
>12978	CompoundStatement	 
>12979	ExpressionStatement	 
>12980	CallExpression	e -> postInit ( )
>12981	ArgumentList	 
>12982	Callee	e -> postInit
>12983	PtrMemberAccess	e -> postInit
>12984	Identifier	postInit
>12985	Identifier	e
>12986	Condition	 
>12987	Identifier	doPostInit
>12988	ExpressionStatement	 
>12989	CallExpression	addRenderObject ( e , e -> layer )
>12990	ArgumentList	e
>12991	Argument	e -> layer
>12992	PtrMemberAccess	e -> layer
>12993	Identifier	layer
>12994	Identifier	e
>12995	Argument	e
>12996	Identifier	e
>12997	Callee	addRenderObject
>12998	Identifier	addRenderObject
>12999	IfStatement	if ( createSaveData )
>13000	CompoundStatement	 
>13001	ExpressionStatement	 
>13002	CallExpression	entitySaveData . push_back ( EntitySaveData ( e , idx , usePos . x , usePos . y , rot , e -> getID ( ) , e -> name ) )
>13003	ArgumentList	EntitySaveData ( e , idx , usePos . x , usePos . y , rot , e -> getID ( ) , e -> name )
>13004	Argument	EntitySaveData ( e , idx , usePos . x , usePos . y , rot , e -> getID ( ) , e -> name )
>13005	CallExpression	EntitySaveData ( e , idx , usePos . x , usePos . y , rot , e -> getID ( ) , e -> name )
>13006	ArgumentList	e
>13007	Argument	e -> name
>13008	PtrMemberAccess	e -> name
>13009	Identifier	name
>13010	Identifier	e
>13011	Argument	e -> getID ( )
>13012	CallExpression	e -> getID ( )
>13013	ArgumentList	 
>13014	Callee	e -> getID
>13015	PtrMemberAccess	e -> getID
>13016	Identifier	getID
>13017	Identifier	e
>13018	Argument	rot
>13019	Identifier	rot
>13020	Argument	usePos . y
>13021	MemberAccess	usePos . y
>13022	Identifier	y
>13023	Identifier	usePos
>13024	Argument	usePos . x
>13025	MemberAccess	usePos . x
>13026	Identifier	x
>13027	Identifier	usePos
>13028	Argument	idx
>13029	Identifier	idx
>13030	Argument	e
>13031	Identifier	e
>13032	Callee	EntitySaveData
>13033	Identifier	EntitySaveData
>13034	Callee	entitySaveData . push_back
>13035	MemberAccess	entitySaveData . push_back
>13036	Identifier	push_back
>13037	Identifier	entitySaveData
>13038	IdentifierDeclStatement	 
>13039	IdentifierDecl	idx = dsq -> game -> getIdxForEntityType ( type )
>13040	AssignmentExpr	idx = dsq -> game -> getIdxForEntityType ( type )
>13041	CallExpression	dsq -> game -> getIdxForEntityType ( type )
>13042	ArgumentList	type
>13043	Argument	type
>13044	Identifier	type
>13045	Callee	dsq -> game -> getIdxForEntityType
>13046	PtrMemberAccess	dsq -> game -> getIdxForEntityType
>13047	Identifier	getIdxForEntityType
>13048	PtrMemberAccess	dsq -> game
>13049	Identifier	game
>13050	Identifier	dsq
>13051	Identifier	idx
>13052	Identifier	idx
>13053	IdentifierDeclType	int
>13054	Condition	 
>13055	Identifier	createSaveData
>13056	ExpressionStatement	 
>13057	AssignmentExpr	e -> entityTypeIdx = idx
>13058	Identifier	idx
>13059	PtrMemberAccess	e -> entityTypeIdx
>13060	Identifier	entityTypeIdx
>13061	Identifier	e
>13062	IdentifierDeclStatement	 
>13063	IdentifierDecl	idx = getIdxForEntityType ( type )
>13064	AssignmentExpr	idx = getIdxForEntityType ( type )
>13065	CallExpression	getIdxForEntityType ( type )
>13066	ArgumentList	type
>13067	Argument	type
>13068	Identifier	type
>13069	Callee	getIdxForEntityType
>13070	Identifier	getIdxForEntityType
>13071	Identifier	idx
>13072	Identifier	idx
>13073	IdentifierDeclType	int
>13074	ExpressionStatement	 
>13075	AssignmentExpr	e -> rotation . z = rot
>13076	Identifier	rot
>13077	MemberAccess	e -> rotation . z
>13078	Identifier	z
>13079	PtrMemberAccess	e -> rotation
>13080	Identifier	rotation
>13081	Identifier	e
>13082	IfStatement	if ( ! name . empty ( ) )
>13083	ExpressionStatement	 
>13084	AssignmentExpr	e -> name = name
>13085	Identifier	name
>13086	PtrMemberAccess	e -> name
>13087	Identifier	name
>13088	Identifier	e
>13089	Condition	 
>13090	UnaryOp	! name . empty ( )
>13091	CallExpression	name . empty ( )
>13092	ArgumentList	 
>13093	Callee	name . empty
>13094	MemberAccess	name . empty
>13095	Identifier	empty
>13096	Identifier	name
>13097	UnaryOperator	!
>13098	ExpressionStatement	 
>13099	AssignmentExpr	e -> startPos = usePos
>13100	Identifier	usePos
>13101	PtrMemberAccess	e -> startPos
>13102	Identifier	startPos
>13103	Identifier	e
>13104	IdentifierDeclStatement	 
>13105	IdentifierDecl	usePos = position
>13106	AssignmentExpr	usePos = position
>13107	Identifier	position
>13108	Identifier	position
>13109	Identifier	usePos
>13110	IdentifierDeclType	Vector
>13111	ExpressionStatement	 
>13112	CallExpression	e -> init ( )
>13113	ArgumentList	 
>13114	Callee	e -> init
>13115	PtrMemberAccess	e -> init
>13116	Identifier	init
>13117	Identifier	e
>13118	IfStatement	if ( id != 0 )
>13119	ElseStatement	else
>13120	CompoundStatement	 
>13121	IfStatement	if ( loadingScene )
>13122	ElseStatement	else
>13123	CompoundStatement	 
>13124	ExpressionStatement	 
>13125	CallExpression	e -> assignUniqueID ( )
>13126	ArgumentList	 
>13127	Callee	e -> assignUniqueID
>13128	PtrMemberAccess	e -> assignUniqueID
>13129	Identifier	assignUniqueID
>13130	Identifier	e
>13131	CompoundStatement	 
>13132	ExpressionStatement	 
>13133	CallExpression	errorLog ( os . str ( ) )
>13134	ArgumentList	os . str ( )
>13135	Argument	os . str ( )
>13136	CallExpression	os . str ( )
>13137	ArgumentList	 
>13138	Callee	os . str
>13139	MemberAccess	os . str
>13140	Identifier	str
>13141	Identifier	os
>13142	Callee	errorLog
>13143	Identifier	errorLog
>13144	ExpressionStatement	 
>13145	ShiftExpression	os << \"\nEntityName
>13146	ShiftExpression	\"\nEntityName
>13147	PtrMemberAccess	e -> name
>13148	Identifier	name
>13149	Identifier	e
>13150	PrimaryExpression	\"\nEntityName
>13151	Identifier	os
>13152	ExpressionStatement	 
>13153	ShiftExpression	os << \"ERROR
>13154	PrimaryExpression	\"ERROR
>13155	Identifier	os
>13156	IdentifierDeclStatement	 
>13157	IdentifierDecl	os
>13158	Identifier	os
>13159	IdentifierDeclType	std 
>13160	Condition	 
>13161	Identifier	loadingScene
>13162	CompoundStatement	 
>13163	ExpressionStatement	 
>13164	CallExpression	e -> setID ( id )
>13165	ArgumentList	id
>13166	Argument	id
>13167	Identifier	id
>13168	Callee	e -> setID
>13169	PtrMemberAccess	e -> setID
>13170	Identifier	setID
>13171	Identifier	e
>13172	Condition	 
>13173	EqualityExpression	id != 0
>13174	PrimaryExpression	0
>13175	Identifier	id
>13176	ExpressionStatement	 
>13177	CallExpression	stringToLower ( type )
>13178	ArgumentList	type
>13179	Argument	type
>13180	Identifier	type
>13181	Callee	stringToLower
>13182	Identifier	stringToLower
>13183	IdentifierDeclStatement	 
>13184	IdentifierDecl	type = e -> name
>13185	AssignmentExpr	type = e -> name
>13186	PtrMemberAccess	e -> name
>13187	Identifier	name
>13188	Identifier	e
>13189	Identifier	type
>13190	Identifier	type
>13191	IdentifierDeclType	std 
>13229	FunctionDef	Game 
>13230	ParameterList	const std 
>13231	Parameter	 
>13232	Identifier	doPostInit
>13233	ParameterType	bool
>13234	Parameter	 
>13235	Identifier	et
>13236	ParameterType	EntityType
>13237	Parameter	 
>13238	Identifier	name
>13239	ParameterType	std 
>13240	Parameter	 
>13241	Identifier	createSaveData
>13242	ParameterType	bool
>13243	Parameter	 
>13244	Identifier	rot
>13245	ParameterType	int
>13246	Parameter	 
>13247	Identifier	position
>13248	ParameterType	Vector
>13249	Parameter	 
>13250	Identifier	id
>13251	ParameterType	int
>13252	Parameter	 
>13253	Identifier	t
>13254	ParameterType	const std 
>13255	ReturnType	Entity *
>13256	CompoundStatement	 
>13257	ReturnStatement	 
>13258	CallExpression	establishEntity ( e , id , position , rot , createSaveData , name , et , doPostInit )
>13259	ArgumentList	e
>13260	Argument	doPostInit
>13261	Identifier	doPostInit
>13262	Argument	et
>13263	Identifier	et
>13264	Argument	name
>13265	Identifier	name
>13266	Argument	createSaveData
>13267	Identifier	createSaveData
>13268	Argument	rot
>13269	Identifier	rot
>13270	Argument	position
>13271	Identifier	position
>13272	Argument	id
>13273	Identifier	id
>13274	Argument	e
>13275	Identifier	e
>13276	Callee	establishEntity
>13277	Identifier	establishEntity
>13278	ExpressionStatement	 
>13279	AssignmentExpr	e = new ScriptedEntity ( type , position , et )
>13280	Expression	type , position , et
>13281	Expression	position , et
>13282	Identifier	et
>13283	Identifier	position
>13284	Identifier	type
>13285	Identifier	e
>13286	IdentifierDeclStatement	 
>13287	IdentifierDecl	* e
>13288	Identifier	e
>13289	IdentifierDeclType	ScriptedEntity *
>13290	ExpressionStatement	 
>13291	CallExpression	stringToLower ( type )
>13292	ArgumentList	type
>13293	Argument	type
>13294	Identifier	type
>13295	Callee	stringToLower
>13296	Identifier	stringToLower
>13297	IdentifierDeclStatement	 
>13298	IdentifierDecl	type = t
>13299	AssignmentExpr	type = t
>13300	Identifier	t
>13301	Identifier	t
>13302	Identifier	type
>13303	IdentifierDeclType	std 
>13318	FunctionDef	Game 
>13319	ParameterList	 
>13320	ReturnType	void
>13321	CompoundStatement	 
>13322	CompoundStatement	 
>13323	IfStatement	if ( e )
>13324	CompoundStatement	 
>13325	ExpressionStatement	 
>13326	CallExpression	e -> init ( )
>13327	ArgumentList	 
>13328	Callee	e -> init
>13329	PtrMemberAccess	e -> init
>13330	Identifier	init
>13331	Identifier	e
>13332	Condition	 
>13333	Identifier	e
>13334	IdentifierDeclStatement	 
>13335	IdentifierDecl	* e = * i
>13336	AssignmentExpr	* e = * i
>13337	UnaryOp	* i
>13338	Identifier	i
>13339	UnaryOperator	*
>13340	Identifier	e
>13341	Identifier	e
>13342	IdentifierDeclType	Entity *
>13343	Statement	 
>13344	Statement	 
>13345	Statement	 
>13346	Statement	 
>13353	FunctionDef	Game 
>13354	ParameterList	 
>13355	ReturnType	void
>13356	CompoundStatement	 
>13357	CompoundStatement	 
>13358	IfStatement	if ( e && e -> entityID == 0 )
>13359	CompoundStatement	 
>13360	ExpressionStatement	 
>13361	CallExpression	e -> assignUniqueID ( )
>13362	ArgumentList	 
>13363	Callee	e -> assignUniqueID
>13364	PtrMemberAccess	e -> assignUniqueID
>13365	Identifier	assignUniqueID
>13366	Identifier	e
>13367	Condition	 
>13368	AndExpression	e && e -> entityID == 0
>13369	EqualityExpression	e -> entityID == 0
>13370	PrimaryExpression	0
>13371	PtrMemberAccess	e -> entityID
>13372	Identifier	entityID
>13373	Identifier	e
>13374	Identifier	e
>13375	IdentifierDeclStatement	 
>13376	IdentifierDecl	* e = * i
>13377	AssignmentExpr	* e = * i
>13378	UnaryOp	* i
>13379	Identifier	i
>13380	UnaryOperator	*
>13381	Identifier	e
>13382	Identifier	e
>13383	IdentifierDeclType	Entity *
>13384	Statement	 
>13385	Statement	 
>13386	Statement	 
>13387	Statement	 
>13396	FunctionDef	Game 
>13397	ParameterList	Entity * e , Vector pos
>13398	Parameter	 
>13399	Identifier	pos
>13400	ParameterType	Vector
>13401	Parameter	 
>13402	Identifier	e
>13403	ParameterType	Entity *
>13404	ReturnType	EntitySaveData *
>13405	CompoundStatement	 
>13406	ReturnStatement	 
>13407	PrimaryExpression	0
>13408	ForStatement	for ( int i = 0 ; i < entitySaveData . size ( ) ; i ++ )
>13409	CompoundStatement	 
>13410	IfStatement	if ( entitySaveData [ i ] . e == e )
>13411	CompoundStatement	 
>13412	ReturnStatement	 
>13413	UnaryOp	& entitySaveData [ i ]
>13414	ArrayIndexing	entitySaveData [ i ]
>13415	Identifier	i
>13416	Identifier	entitySaveData
>13417	UnaryOperator	&
>13418	Condition	 
>13419	EqualityExpression	entitySaveData [ i ] . e == e
>13420	Identifier	e
>13421	MemberAccess	entitySaveData [ i ] . e
>13422	Identifier	e
>13423	ArrayIndexing	entitySaveData [ i ]
>13424	Identifier	i
>13425	Identifier	entitySaveData
>13426	IncDecOp	 
>13427	IncDec	++
>13428	Identifier	i
>13429	Condition	 
>13430	RelationalExpression	i < entitySaveData . size ( )
>13431	CallExpression	entitySaveData . size ( )
>13432	ArgumentList	 
>13433	Callee	entitySaveData . size
>13434	MemberAccess	entitySaveData . size
>13435	Identifier	size
>13436	Identifier	entitySaveData
>13437	Identifier	i
>13438	ForInit	 
>13439	IdentifierDeclStatement	int i = 0 ;
>13440	IdentifierDecl	i = 0
>13441	AssignmentExpr	i = 0
>13442	PrimaryExpression	0
>13443	Identifier	i
>13444	Identifier	i
>13445	IdentifierDeclType	int
>13459	FunctionDef	Game 
>13460	ParameterList	float a , float t
>13461	Parameter	 
>13462	Identifier	t
>13463	ParameterType	float
>13464	Parameter	 
>13465	Identifier	a
>13466	ParameterType	float
>13467	ReturnType	void
>13468	CompoundStatement	 
>13469	ExpressionStatement	 
>13470	CallExpression	timerText -> alpha . interpolateTo ( a , t )
>13471	ArgumentList	a
>13472	Argument	t
>13473	Identifier	t
>13474	Argument	a
>13475	Identifier	a
>13476	Callee	timerText -> alpha . interpolateTo
>13477	MemberAccess	timerText -> alpha . interpolateTo
>13478	Identifier	interpolateTo
>13479	PtrMemberAccess	timerText -> alpha
>13480	Identifier	alpha
>13481	Identifier	timerText
>13490	FunctionDef	Game 
>13491	ParameterList	float time
>13492	Parameter	 
>13493	Identifier	time
>13494	ParameterType	float
>13495	ReturnType	void
>13496	CompoundStatement	 
>13497	ExpressionStatement	 
>13498	CallExpression	timerText -> setText ( os . str ( ) )
>13499	ArgumentList	os . str ( )
>13500	Argument	os . str ( )
>13501	CallExpression	os . str ( )
>13502	ArgumentList	 
>13503	Callee	os . str
>13504	MemberAccess	os . str
>13505	Identifier	str
>13506	Identifier	os
>13507	Callee	timerText -> setText
>13508	PtrMemberAccess	timerText -> setText
>13509	Identifier	setText
>13510	Identifier	timerText
>13511	ExpressionStatement	 
>13512	ShiftExpression	os << secs
>13513	Identifier	secs
>13514	Identifier	os
>13515	IfStatement	if ( secs < 10 )
>13516	ExpressionStatement	 
>13517	ShiftExpression	os << \"0\"
>13518	PrimaryExpression	\"0\"
>13519	Identifier	os
>13520	Condition	 
>13521	RelationalExpression	secs < 10
>13522	PrimaryExpression	10
>13523	Identifier	secs
>13524	IfStatement	if ( getTimer ( ) > 0.5f )
>13525	ElseStatement	else
>13526	ExpressionStatement	 
>13527	ShiftExpression	os << \".\"
>13528	PrimaryExpression	\".\"
>13529	Identifier	os
>13530	ExpressionStatement	 
>13531	ShiftExpression	os << \"
>13532	PrimaryExpression	\"
>13533	Identifier	os
>13534	Condition	 
>13535	RelationalExpression	getTimer ( ) > 0.5f
>13536	PrimaryExpression	0.5f
>13537	CallExpression	getTimer ( )
>13538	ArgumentList	 
>13539	Callee	getTimer
>13540	Identifier	getTimer
>13541	ExpressionStatement	 
>13542	ShiftExpression	os << mins
>13543	Identifier	mins
>13544	Identifier	os
>13545	IdentifierDeclStatement	 
>13546	IdentifierDecl	secs = time - ( mins * 60 )
>13547	AssignmentExpr	secs = time - ( mins * 60 )
>13548	AdditiveExpression	time - ( mins * 60 )
>13549	MultiplicativeExpression	mins * 60
>13550	PrimaryExpression	60
>13551	Identifier	mins
>13552	Identifier	time
>13553	Identifier	secs
>13554	Identifier	secs
>13555	IdentifierDeclType	int
>13556	IdentifierDeclStatement	 
>13557	IdentifierDecl	mins = int ( time / 60 )
>13558	AssignmentExpr	mins = int ( time / 60 )
>13559	CallExpression	int ( time / 60 )
>13560	ArgumentList	time / 60
>13561	Argument	time / 60
>13562	MultiplicativeExpression	time / 60
>13563	PrimaryExpression	60
>13564	Identifier	time
>13565	Callee	int
>13566	Identifier	int
>13567	Identifier	mins
>13568	Identifier	mins
>13569	IdentifierDeclType	int
>13570	IdentifierDeclStatement	 
>13571	IdentifierDecl	os
>13572	Identifier	os
>13573	IdentifierDeclType	std 
>13585	FunctionDef	Game 
>13586	ParameterList	Quad * q , float overrideCollideRadius
>13587	Parameter	 
>13588	Identifier	overrideCollideRadius
>13589	ParameterType	float
>13590	Parameter	 
>13591	Identifier	q
>13592	ParameterType	Quad *
>13593	ReturnType	void
>13594	CompoundStatement	 
>13595	IfStatement	if ( q -> texture )
>13596	CompoundStatement	 
>13597	ExpressionStatement	 
>13598	CallExpression	free ( data )
>13599	ArgumentList	data
>13600	Argument	data
>13601	Identifier	data
>13602	Callee	free
>13603	Identifier	free
>13604	ExpressionStatement	 
>13605	AssignmentExpr	q -> collisionMaskRadius = 512
>13606	PrimaryExpression	512
>13607	PtrMemberAccess	q -> collisionMaskRadius
>13608	Identifier	collisionMaskRadius
>13609	Identifier	q
>13610	ForStatement	for ( int tx = 0 ; tx < widthscale ; tx += TILE_SIZE )
>13611	CompoundStatement	 
>13612	ForStatement	for ( int ty = 0 ; ty < heightscale ; ty += TILE_SIZE )
>13613	CompoundStatement	 
>13614	IfStatement	if ( num >= int ( ( szx * szy ) * 0.25f ) )
>13615	CompoundStatement	 
>13616	ExpressionStatement	 
>13617	CallExpression	q -> collisionMask . push_back ( tile . worldVector ( ) - collisionMaskHalfVector )
>13618	ArgumentList	tile . worldVector ( ) - collisionMaskHalfVector
>13619	Argument	tile . worldVector ( ) - collisionMaskHalfVector
>13620	AdditiveExpression	tile . worldVector ( ) - collisionMaskHalfVector
>13621	Identifier	collisionMaskHalfVector
>13622	CallExpression	tile . worldVector ( )
>13623	ArgumentList	 
>13624	Callee	tile . worldVector
>13625	MemberAccess	tile . worldVector
>13626	Identifier	worldVector
>13627	Identifier	tile
>13628	Callee	q -> collisionMask . push_back
>13629	MemberAccess	q -> collisionMask . push_back
>13630	Identifier	push_back
>13631	PtrMemberAccess	q -> collisionMask
>13632	Identifier	collisionMask
>13633	Identifier	q
>13634	IdentifierDeclStatement	 
>13635	IdentifierDecl	tile ( int ( ( tx + TILE_SIZE / 2 ) / TILE_SIZE ) , int ( ( ty + TILE_SIZE / 2 ) / TILE_SIZE ) )
>13636	Expression	int ( ( tx + TILE_SIZE / 2 ) / TILE_SIZE ) , int ( ( ty + TILE_SIZE / 2 ) / TILE_SIZE )
>13637	CallExpression	int ( ( ty + TILE_SIZE / 2 ) / TILE_SIZE )
>13638	ArgumentList	( ty + TILE_SIZE / 2 ) / TILE_SIZE
>13639	Argument	( ty + TILE_SIZE / 2 ) / TILE_SIZE
>13640	MultiplicativeExpression	( ty + TILE_SIZE / 2 ) / TILE_SIZE
>13641	Identifier	TILE_SIZE
>13642	AdditiveExpression	ty + TILE_SIZE / 2
>13643	MultiplicativeExpression	TILE_SIZE / 2
>13644	PrimaryExpression	2
>13645	Identifier	TILE_SIZE
>13646	Identifier	ty
>13647	Callee	int
>13648	Identifier	int
>13649	CallExpression	int ( ( tx + TILE_SIZE / 2 ) / TILE_SIZE )
>13650	ArgumentList	( tx + TILE_SIZE / 2 ) / TILE_SIZE
>13651	Argument	( tx + TILE_SIZE / 2 ) / TILE_SIZE
>13652	MultiplicativeExpression	( tx + TILE_SIZE / 2 ) / TILE_SIZE
>13653	Identifier	TILE_SIZE
>13654	AdditiveExpression	tx + TILE_SIZE / 2
>13655	MultiplicativeExpression	TILE_SIZE / 2
>13656	PrimaryExpression	2
>13657	Identifier	TILE_SIZE
>13658	Identifier	tx
>13659	Callee	int
>13660	Identifier	int
>13661	Identifier	tile
>13662	IdentifierDeclType	TileVector
>13663	Condition	 
>13664	RelationalExpression	num >= int ( ( szx * szy ) * 0.25f )
>13665	CallExpression	int ( ( szx * szy ) * 0.25f )
>13666	ArgumentList	( szx * szy ) * 0.25f
>13667	Argument	( szx * szy ) * 0.25f
>13668	MultiplicativeExpression	( szx * szy ) * 0.25f
>13669	PrimaryExpression	0.25f
>13670	MultiplicativeExpression	szx * szy
>13671	Identifier	szy
>13672	Identifier	szx
>13673	Callee	int
>13674	Identifier	int
>13675	Identifier	num
>13676	ForStatement	for ( int x = 0 ; x < szx ; x ++ )
>13677	CompoundStatement	 
>13678	ForStatement	for ( int y = 0 ; y < szy ; y ++ )
>13679	CompoundStatement	 
>13680	CompoundStatement	 
>13681	IfStatement	if ( p < size && data [ p ] >= 250 )
>13682	CompoundStatement	 
>13683	ExpressionStatement	 
>13684	IncDecOp	num ++
>13685	IncDec	++
>13686	Identifier	num
>13687	Condition	 
>13688	AndExpression	p < size && data [ p ] >= 250
>13689	RelationalExpression	data [ p ] >= 250
>13690	PrimaryExpression	250
>13691	ArrayIndexing	data [ p ]
>13692	Identifier	p
>13693	Identifier	data
>13694	RelationalExpression	p < size
>13695	Identifier	size
>13696	Identifier	p
>13697	ExpressionStatement	 
>13698	AdditiveExpression	+ ( px * 4 ) + 3
>13699	PrimaryExpression	3
>13700	UnaryOp	+ ( px * 4 )
>13701	MultiplicativeExpression	px * 4
>13702	PrimaryExpression	4
>13703	Identifier	px
>13704	UnaryOperator	+
>13705	Statement	 
>13706	Statement	 
>13707	Statement	 
>13708	Statement	 
>13709	Statement	 
>13710	Statement	 
>13711	Statement	 
>13712	Statement	 
>13713	Statement	 
>13714	Statement	 
>13715	Statement	 
>13716	Statement	 
>13717	Statement	 
>13718	Statement	 
>13719	Statement	 
>13720	Statement	 
>13721	Statement	 
>13722	Statement	 
>13723	Statement	 
>13724	Statement	 
>13725	Statement	 
>13726	Statement	 
>13727	Statement	 
>13728	Statement	 
>13729	Statement	 
>13730	Statement	 
>13731	Statement	 
>13732	Statement	 
>13733	Statement	 
>13734	Statement	 
>13735	IdentifierDeclStatement	 
>13736	IdentifierDecl	py = int ( ty / q -> scale . y ) + y
>13737	AssignmentExpr	py = int ( ty / q -> scale . y ) + y
>13738	AdditiveExpression	int ( ty / q -> scale . y ) + y
>13739	Identifier	y
>13740	CallExpression	int ( ty / q -> scale . y )
>13741	ArgumentList	ty / q -> scale . y
>13742	Argument	ty / q -> scale . y
>13743	MultiplicativeExpression	ty / q -> scale . y
>13744	MemberAccess	q -> scale . y
>13745	Identifier	y
>13746	PtrMemberAccess	q -> scale
>13747	Identifier	scale
>13748	Identifier	q
>13749	Identifier	ty
>13750	Callee	int
>13751	Identifier	int
>13752	Identifier	py
>13753	Identifier	py
>13754	IdentifierDeclType	unsigned int
>13755	IdentifierDeclStatement	 
>13756	IdentifierDecl	px = int ( tx / q -> scale . x ) + x
>13757	AssignmentExpr	px = int ( tx / q -> scale . x ) + x
>13758	AdditiveExpression	int ( tx / q -> scale . x ) + x
>13759	Identifier	x
>13760	CallExpression	int ( tx / q -> scale . x )
>13761	ArgumentList	tx / q -> scale . x
>13762	Argument	tx / q -> scale . x
>13763	MultiplicativeExpression	tx / q -> scale . x
>13764	MemberAccess	q -> scale . x
>13765	Identifier	x
>13766	PtrMemberAccess	q -> scale
>13767	Identifier	scale
>13768	Identifier	q
>13769	Identifier	tx
>13770	Callee	int
>13771	Identifier	int
>13772	Identifier	px
>13773	Identifier	px
>13774	IdentifierDeclType	unsigned int
>13775	IncDecOp	 
>13776	IncDec	++
>13777	Identifier	y
>13778	Condition	 
>13779	RelationalExpression	y < szy
>13780	Identifier	szy
>13781	Identifier	y
>13782	ForInit	 
>13783	IdentifierDeclStatement	int y = 0 ;
>13784	IdentifierDecl	y = 0
>13785	AssignmentExpr	y = 0
>13786	PrimaryExpression	0
>13787	Identifier	y
>13788	Identifier	y
>13789	IdentifierDeclType	int
>13790	IncDecOp	 
>13791	IncDec	++
>13792	Identifier	x
>13793	Condition	 
>13794	RelationalExpression	x < szx
>13795	Identifier	szx
>13796	Identifier	x
>13797	ForInit	 
>13798	IdentifierDeclStatement	int x = 0 ;
>13799	IdentifierDecl	x = 0
>13800	AssignmentExpr	x = 0
>13801	PrimaryExpression	0
>13802	Identifier	x
>13803	Identifier	x
>13804	IdentifierDeclType	int
>13805	IdentifierDeclStatement	 
>13806	IdentifierDecl	num = 0
>13807	AssignmentExpr	num = 0
>13808	PrimaryExpression	0
>13809	Identifier	num
>13810	Identifier	num
>13811	IdentifierDeclType	int
>13812	AssignmentExpr	 
>13813	Identifier	TILE_SIZE
>13814	Identifier	ty
>13815	Condition	 
>13816	RelationalExpression	ty < heightscale
>13817	Identifier	heightscale
>13818	Identifier	ty
>13819	ForInit	 
>13820	IdentifierDeclStatement	int ty = 0 ;
>13821	IdentifierDecl	ty = 0
>13822	AssignmentExpr	ty = 0
>13823	PrimaryExpression	0
>13824	Identifier	ty
>13825	Identifier	ty
>13826	IdentifierDeclType	int
>13827	AssignmentExpr	 
>13828	Identifier	TILE_SIZE
>13829	Identifier	tx
>13830	Condition	 
>13831	RelationalExpression	tx < widthscale
>13832	Identifier	widthscale
>13833	Identifier	tx
>13834	ForInit	 
>13835	IdentifierDeclStatement	int tx = 0 ;
>13836	IdentifierDecl	tx = 0
>13837	AssignmentExpr	tx = 0
>13838	PrimaryExpression	0
>13839	Identifier	tx
>13840	Identifier	tx
>13841	IdentifierDeclType	int
>13842	IfStatement	if ( szy < 1 )
>13843	ExpressionStatement	 
>13844	AssignmentExpr	szy = 1
>13845	PrimaryExpression	1
>13846	Identifier	szy
>13847	Condition	 
>13848	RelationalExpression	szy < 1
>13849	PrimaryExpression	1
>13850	Identifier	szy
>13851	IfStatement	if ( szx < 1 )
>13852	ExpressionStatement	 
>13853	AssignmentExpr	szx = 1
>13854	PrimaryExpression	1
>13855	Identifier	szx
>13856	Condition	 
>13857	RelationalExpression	szx < 1
>13858	PrimaryExpression	1
>13859	Identifier	szx
>13860	IdentifierDeclStatement	 
>13861	IdentifierDecl	szy = TILE_SIZE / q -> scale . y
>13862	AssignmentExpr	szy = TILE_SIZE / q -> scale . y
>13863	MultiplicativeExpression	TILE_SIZE / q -> scale . y
>13864	MemberAccess	q -> scale . y
>13865	Identifier	y
>13866	PtrMemberAccess	q -> scale
>13867	Identifier	scale
>13868	Identifier	q
>13869	Identifier	TILE_SIZE
>13870	Identifier	szy
>13871	Identifier	szy
>13872	IdentifierDeclType	int
>13873	IdentifierDeclStatement	 
>13874	IdentifierDecl	szx = TILE_SIZE / q -> scale . x
>13875	AssignmentExpr	szx = TILE_SIZE / q -> scale . x
>13876	MultiplicativeExpression	TILE_SIZE / q -> scale . x
>13877	MemberAccess	q -> scale . x
>13878	Identifier	x
>13879	PtrMemberAccess	q -> scale
>13880	Identifier	scale
>13881	Identifier	q
>13882	Identifier	TILE_SIZE
>13883	Identifier	szx
>13884	Identifier	szx
>13885	IdentifierDeclType	int
>13886	IdentifierDeclStatement	 
>13887	IdentifierDecl	collisionMaskHalfVector = Vector ( q -> getWidth ( ) / 2 , q -> getHeight ( ) / 2 )
>13888	AssignmentExpr	collisionMaskHalfVector = Vector ( q -> getWidth ( ) / 2 , q -> getHeight ( ) / 2 )
>13889	CallExpression	Vector ( q -> getWidth ( ) / 2 , q -> getHeight ( ) / 2 )
>13890	ArgumentList	q -> getWidth ( ) / 2
>13891	Argument	q -> getHeight ( ) / 2
>13892	MultiplicativeExpression	q -> getHeight ( ) / 2
>13893	PrimaryExpression	2
>13894	CallExpression	q -> getHeight ( )
>13895	ArgumentList	 
>13896	Callee	q -> getHeight
>13897	PtrMemberAccess	q -> getHeight
>13898	Identifier	getHeight
>13899	Identifier	q
>13900	Argument	q -> getWidth ( ) / 2
>13901	MultiplicativeExpression	q -> getWidth ( ) / 2
>13902	PrimaryExpression	2
>13903	CallExpression	q -> getWidth ( )
>13904	ArgumentList	 
>13905	Callee	q -> getWidth
>13906	PtrMemberAccess	q -> getWidth
>13907	Identifier	getWidth
>13908	Identifier	q
>13909	Callee	Vector
>13910	Identifier	Vector
>13911	Identifier	collisionMaskHalfVector
>13912	Identifier	collisionMaskHalfVector
>13913	IdentifierDeclType	Vector
>13914	ExpressionStatement	 
>13915	AssignmentExpr	q -> collisionMaskRadius = 0
>13916	PrimaryExpression	0
>13917	PtrMemberAccess	q -> collisionMaskRadius
>13918	Identifier	collisionMaskRadius
>13919	Identifier	q
>13920	IfStatement	if ( ! data )
>13921	CompoundStatement	 
>13922	ReturnStatement	 
>13923	ExpressionStatement	 
>13924	CallExpression	debugLog ( \"Failed to get buffer in Game
>13925	ArgumentList	\"Failed to get buffer in Game
>13926	Argument	\"Failed to get buffer in Game
>13927	PrimaryExpression	\"Failed to get buffer in Game
>13928	Callee	debugLog
>13929	Identifier	debugLog
>13930	Condition	 
>13931	UnaryOp	! data
>13932	Identifier	data
>13933	UnaryOperator	!
>13934	IdentifierDeclStatement	 
>13935	IdentifierDecl	* data = q -> texture -> getBufferAndSize ( & w , & h , & size )
>13936	AssignmentExpr	* data = q -> texture -> getBufferAndSize ( & w , & h , & size )
>13937	CallExpression	q -> texture -> getBufferAndSize ( & w , & h , & size )
>13938	ArgumentList	& w
>13939	Argument	& size
>13940	UnaryOp	& size
>13941	Identifier	size
>13942	UnaryOperator	&
>13943	Argument	& h
>13944	UnaryOp	& h
>13945	Identifier	h
>13946	UnaryOperator	&
>13947	Argument	& w
>13948	UnaryOp	& w
>13949	Identifier	w
>13950	UnaryOperator	&
>13951	Callee	q -> texture -> getBufferAndSize
>13952	PtrMemberAccess	q -> texture -> getBufferAndSize
>13953	Identifier	getBufferAndSize
>13954	PtrMemberAccess	q -> texture
>13955	Identifier	texture
>13956	Identifier	q
>13957	Identifier	data
>13958	Identifier	data
>13959	IdentifierDeclType	unsigned char *
>13960	IdentifierDeclStatement	 
>13961	IdentifierDecl	size = 0
>13962	AssignmentExpr	size = 0
>13963	PrimaryExpression	0
>13964	Identifier	size
>13965	Identifier	size
>13966	IdentifierDeclType	unsigned int
>13967	IdentifierDeclStatement	 
>13968	IdentifierDecl	h = 0
>13969	AssignmentExpr	h = 0
>13970	PrimaryExpression	0
>13971	Identifier	h
>13972	Identifier	h
>13973	IdentifierDeclType	int
>13974	IdentifierDecl	w = 0
>13975	AssignmentExpr	w = 0
>13976	PrimaryExpression	0
>13977	Identifier	w
>13978	Identifier	w
>13979	IdentifierDeclType	int
>13980	ExpressionStatement	 
>13981	AssignmentExpr	tpos . y -= h2
>13982	Identifier	h2
>13983	MemberAccess	tpos . y
>13984	Identifier	y
>13985	Identifier	tpos
>13986	ExpressionStatement	 
>13987	AssignmentExpr	tpos . x -= w2
>13988	Identifier	w2
>13989	MemberAccess	tpos . x
>13990	Identifier	x
>13991	Identifier	tpos
>13992	ExpressionStatement	 
>13993	AssignmentExpr	h2 /= TILE_SIZE
>13994	Identifier	TILE_SIZE
>13995	Identifier	h2
>13996	ExpressionStatement	 
>13997	AssignmentExpr	w2 /= TILE_SIZE
>13998	Identifier	TILE_SIZE
>13999	Identifier	w2
>14000	IdentifierDeclStatement	 
>14001	IdentifierDecl	h2 = heightscale / 2
>14002	AssignmentExpr	h2 = heightscale / 2
>14003	MultiplicativeExpression	heightscale / 2
>14004	PrimaryExpression	2
>14005	Identifier	heightscale
>14006	Identifier	h2
>14007	Identifier	h2
>14008	IdentifierDeclType	int
>14009	IdentifierDeclStatement	 
>14010	IdentifierDecl	w2 = widthscale / 2
>14011	AssignmentExpr	w2 = widthscale / 2
>14012	MultiplicativeExpression	widthscale / 2
>14013	PrimaryExpression	2
>14014	Identifier	widthscale
>14015	Identifier	w2
>14016	Identifier	w2
>14017	IdentifierDeclType	int
>14018	IdentifierDeclStatement	 
>14019	IdentifierDecl	heightscale = q -> getHeight ( ) * q -> scale . y
>14020	AssignmentExpr	heightscale = q -> getHeight ( ) * q -> scale . y
>14021	MultiplicativeExpression	q -> getHeight ( ) * q -> scale . y
>14022	MemberAccess	q -> scale . y
>14023	Identifier	y
>14024	PtrMemberAccess	q -> scale
>14025	Identifier	scale
>14026	Identifier	q
>14027	CallExpression	q -> getHeight ( )
>14028	ArgumentList	 
>14029	Callee	q -> getHeight
>14030	PtrMemberAccess	q -> getHeight
>14031	Identifier	getHeight
>14032	Identifier	q
>14033	Identifier	heightscale
>14034	Identifier	heightscale
>14035	IdentifierDeclType	int
>14036	IdentifierDeclStatement	 
>14037	IdentifierDecl	widthscale = q -> getWidth ( ) * q -> scale . x
>14038	AssignmentExpr	widthscale = q -> getWidth ( ) * q -> scale . x
>14039	MultiplicativeExpression	q -> getWidth ( ) * q -> scale . x
>14040	MemberAccess	q -> scale . x
>14041	Identifier	x
>14042	PtrMemberAccess	q -> scale
>14043	Identifier	scale
>14044	Identifier	q
>14045	CallExpression	q -> getWidth ( )
>14046	ArgumentList	 
>14047	Callee	q -> getWidth
>14048	PtrMemberAccess	q -> getWidth
>14049	Identifier	getWidth
>14050	Identifier	q
>14051	Identifier	widthscale
>14052	Identifier	widthscale
>14053	IdentifierDeclType	int
>14054	IdentifierDeclStatement	 
>14055	IdentifierDecl	tpos ( q -> position )
>14056	PtrMemberAccess	q -> position
>14057	Identifier	position
>14058	Identifier	q
>14059	Identifier	tpos
>14060	IdentifierDeclType	TileVector
>14061	ExpressionStatement	 
>14062	CallExpression	q -> collisionMask . clear ( )
>14063	ArgumentList	 
>14064	Callee	q -> collisionMask . clear
>14065	MemberAccess	q -> collisionMask . clear
>14066	Identifier	clear
>14067	PtrMemberAccess	q -> collisionMask
>14068	Identifier	collisionMask
>14069	Identifier	q
>14070	IfStatement	if ( overrideCollideRadius )
>14071	ElseStatement	else
>14072	ExpressionStatement	 
>14073	AssignmentExpr	q -> collideRadius = TILE_SIZE / 2
>14074	MultiplicativeExpression	TILE_SIZE / 2
>14075	PrimaryExpression	2
>14076	Identifier	TILE_SIZE
>14077	PtrMemberAccess	q -> collideRadius
>14078	Identifier	collideRadius
>14079	Identifier	q
>14080	ExpressionStatement	 
>14081	AssignmentExpr	q -> collideRadius = overrideCollideRadius
>14082	Identifier	overrideCollideRadius
>14083	PtrMemberAccess	q -> collideRadius
>14084	Identifier	collideRadius
>14085	Identifier	q
>14086	Condition	 
>14087	Identifier	overrideCollideRadius
>14088	ExpressionStatement	 
>14089	AssignmentExpr	q -> collidePosition = Vector ( 0 , 0 , 0 )
>14090	CallExpression	Vector ( 0 , 0 , 0 )
>14091	ArgumentList	0
>14092	Argument	0
>14093	PrimaryExpression	0
>14094	Argument	0
>14095	PrimaryExpression	0
>14096	Argument	0
>14097	PrimaryExpression	0
>14098	Callee	Vector
>14099	Identifier	Vector
>14100	PtrMemberAccess	q -> collidePosition
>14101	Identifier	collidePosition
>14102	Identifier	q
>14103	Condition	 
>14104	PtrMemberAccess	q -> texture
>14105	Identifier	texture
>14106	Identifier	q
>14158	FunctionDef	Game 
>14159	ParameterList	Path * p
>14160	Parameter	 
>14161	Identifier	p
>14162	ParameterType	Path *
>14163	ReturnType	void
>14164	CompoundStatement	 
>14165	IfStatement	if ( p -> pathType >= 0 && p -> pathType < PATH_MAX )
>14166	CompoundStatement	 
>14167	ExpressionStatement	 
>14168	AssignmentExpr	firstPathOfType [ p -> pathType ] = p
>14169	Identifier	p
>14170	ArrayIndexing	firstPathOfType [ p -> pathType ]
>14171	PtrMemberAccess	p -> pathType
>14172	Identifier	pathType
>14173	Identifier	p
>14174	Identifier	firstPathOfType
>14175	ExpressionStatement	 
>14176	AssignmentExpr	p -> nextOfType = firstPathOfType [ p -> pathType ]
>14177	ArrayIndexing	firstPathOfType [ p -> pathType ]
>14178	PtrMemberAccess	p -> pathType
>14179	Identifier	pathType
>14180	Identifier	p
>14181	Identifier	firstPathOfType
>14182	PtrMemberAccess	p -> nextOfType
>14183	Identifier	nextOfType
>14184	Identifier	p
>14185	Condition	 
>14186	AndExpression	p -> pathType >= 0 && p -> pathType < PATH_MAX
>14187	RelationalExpression	p -> pathType < PATH_MAX
>14188	Identifier	PATH_MAX
>14189	PtrMemberAccess	p -> pathType
>14190	Identifier	pathType
>14191	Identifier	p
>14192	RelationalExpression	p -> pathType >= 0
>14193	PrimaryExpression	0
>14194	PtrMemberAccess	p -> pathType
>14195	Identifier	pathType
>14196	Identifier	p
>14197	ExpressionStatement	 
>14198	CallExpression	paths . push_back ( p )
>14199	ArgumentList	p
>14200	Argument	p
>14201	Identifier	p
>14202	Callee	paths . push_back
>14203	MemberAccess	paths . push_back
>14204	Identifier	push_back
>14205	Identifier	paths
>14219	FunctionDef	Game 
>14220	ParameterList	int idx
>14221	Parameter	 
>14222	Identifier	idx
>14223	ParameterType	int
>14224	ReturnType	void
>14225	CompoundStatement	 
>14226	ForStatement	for ( int i = 0 ; i < copy . size ( ) ; i ++ )
>14227	CompoundStatement	 
>14228	IfStatement	if ( i != idx )
>14229	ExpressionStatement	 
>14230	CallExpression	addPath ( copy [ i ] )
>14231	ArgumentList	copy [ i ]
>14232	Argument	copy [ i ]
>14233	ArrayIndexing	copy [ i ]
>14234	Identifier	i
>14235	Identifier	copy
>14236	Callee	addPath
>14237	Identifier	addPath
>14238	Condition	 
>14239	EqualityExpression	i != idx
>14240	Identifier	idx
>14241	Identifier	i
>14242	IncDecOp	 
>14243	IncDec	++
>14244	Identifier	i
>14245	Condition	 
>14246	RelationalExpression	i < copy . size ( )
>14247	CallExpression	copy . size ( )
>14248	ArgumentList	 
>14249	Callee	copy . size
>14250	MemberAccess	copy . size
>14251	Identifier	size
>14252	Identifier	copy
>14253	Identifier	i
>14254	ForInit	 
>14255	IdentifierDeclStatement	int i = 0 ;
>14256	IdentifierDecl	i = 0
>14257	AssignmentExpr	i = 0
>14258	PrimaryExpression	0
>14259	Identifier	i
>14260	Identifier	i
>14261	IdentifierDeclType	int
>14262	ExpressionStatement	 
>14263	CallExpression	clearPaths ( )
>14264	ArgumentList	 
>14265	Callee	clearPaths
>14266	Identifier	clearPaths
>14267	IdentifierDeclStatement	 
>14268	IdentifierDecl	copy = this -> paths
>14269	AssignmentExpr	copy = this -> paths
>14270	PtrMemberAccess	this -> paths
>14271	Identifier	paths
>14272	Identifier	this
>14273	Identifier	copy
>14274	Identifier	copy
>14275	IdentifierDeclType	std 
>14276	IfStatement	if ( idx >= 0 && idx < paths . size ( ) )
>14277	ExpressionStatement	 
>14278	CallExpression	paths [ idx ] -> destroy ( )
>14279	ArgumentList	 
>14280	Callee	paths [ idx ] -> destroy
>14281	PtrMemberAccess	paths [ idx ] -> destroy
>14282	Identifier	destroy
>14283	ArrayIndexing	paths [ idx ]
>14284	Identifier	idx
>14285	Identifier	paths
>14286	Condition	 
>14287	AndExpression	idx >= 0 && idx < paths . size ( )
>14288	RelationalExpression	idx < paths . size ( )
>14289	CallExpression	paths . size ( )
>14290	ArgumentList	 
>14291	Callee	paths . size
>14292	MemberAccess	paths . size
>14293	Identifier	size
>14294	Identifier	paths
>14295	Identifier	idx
>14296	RelationalExpression	idx >= 0
>14297	PrimaryExpression	0
>14298	Identifier	idx
>14315	FunctionDef	Game 
>14316	ParameterList	 
>14317	ReturnType	void
>14318	CompoundStatement	 
>14319	ForStatement	for ( int i = 0 ; i < PATH_MAX ; i ++ )
>14320	ExpressionStatement	 
>14321	AssignmentExpr	firstPathOfType [ i ] = 0
>14322	PrimaryExpression	0
>14323	ArrayIndexing	firstPathOfType [ i ]
>14324	Identifier	i
>14325	Identifier	firstPathOfType
>14326	IncDecOp	 
>14327	IncDec	++
>14328	Identifier	i
>14329	Condition	 
>14330	RelationalExpression	i < PATH_MAX
>14331	Identifier	PATH_MAX
>14332	Identifier	i
>14333	ForInit	 
>14334	IdentifierDeclStatement	int i = 0 ;
>14335	IdentifierDecl	i = 0
>14336	AssignmentExpr	i = 0
>14337	PrimaryExpression	0
>14338	Identifier	i
>14339	Identifier	i
>14340	IdentifierDeclType	int
>14341	ExpressionStatement	 
>14342	CallExpression	paths . clear ( )
>14343	ArgumentList	 
>14344	Callee	paths . clear
>14345	MemberAccess	paths . clear
>14346	Identifier	clear
>14347	Identifier	paths
>14357	FunctionDef	Game 
>14358	ParameterList	Path * p
>14359	Parameter	 
>14360	Identifier	p
>14361	ParameterType	Path *
>14362	ReturnType	int
>14363	CompoundStatement	 
>14364	ReturnStatement	 
>14365	UnaryOp	- 1
>14366	PrimaryExpression	1
>14367	UnaryOperator	-
>14368	ForStatement	for ( int i = 0 ; i < paths . size ( ) ; i ++ )
>14369	CompoundStatement	 
>14370	IfStatement	if ( paths [ i ] == p )
>14371	ReturnStatement	 
>14372	Identifier	i
>14373	Condition	 
>14374	EqualityExpression	paths [ i ] == p
>14375	Identifier	p
>14376	ArrayIndexing	paths [ i ]
>14377	Identifier	i
>14378	Identifier	paths
>14379	IncDecOp	 
>14380	IncDec	++
>14381	Identifier	i
>14382	Condition	 
>14383	RelationalExpression	i < paths . size ( )
>14384	CallExpression	paths . size ( )
>14385	ArgumentList	 
>14386	Callee	paths . size
>14387	MemberAccess	paths . size
>14388	Identifier	size
>14389	Identifier	paths
>14390	Identifier	i
>14391	ForInit	 
>14392	IdentifierDeclStatement	int i = 0 ;
>14393	IdentifierDecl	i = 0
>14394	AssignmentExpr	i = 0
>14395	PrimaryExpression	0
>14396	Identifier	i
>14397	Identifier	i
>14398	IdentifierDeclType	int
>14408	FunctionDef	Game 
>14409	ParameterList	 
>14410	ReturnType	Path *
>14411	CompoundStatement	 
>14412	ReturnStatement	 
>14413	CallExpression	getNearestPath ( dsq -> getGameCursorPosition ( ) , \"\" )
>14414	ArgumentList	dsq -> getGameCursorPosition ( )
>14415	Argument	\"\"
>14416	PrimaryExpression	\"\"
>14417	Argument	dsq -> getGameCursorPosition ( )
>14418	CallExpression	dsq -> getGameCursorPosition ( )
>14419	ArgumentList	 
>14420	Callee	dsq -> getGameCursorPosition
>14421	PtrMemberAccess	dsq -> getGameCursorPosition
>14422	Identifier	getGameCursorPosition
>14423	Identifier	dsq
>14424	Callee	getNearestPath
>14425	Identifier	getNearestPath
>14433	FunctionDef	Game 
>14434	ParameterList	bool withAct
>14435	Parameter	 
>14436	Identifier	withAct
>14437	ParameterType	bool
>14438	ReturnType	Path *
>14439	CompoundStatement	 
>14440	ReturnStatement	 
>14441	PrimaryExpression	0
>14442	ForStatement	for ( int i = 0 ; i < sz ; i ++ )
>14443	CompoundStatement	 
>14444	IfStatement	if ( ! p -> nodes . empty ( ) && p -> hasScript ( ) )
>14445	CompoundStatement	 
>14446	IfStatement	if ( ! withAct || p -> cursorActivation )
>14447	CompoundStatement	 
>14448	IfStatement	if ( p -> isCoordinateInside ( dsq -> getGameCursorPosition ( ) ) )
>14449	CompoundStatement	 
>14450	ReturnStatement	 
>14451	Identifier	p
>14452	Condition	 
>14453	CallExpression	p -> isCoordinateInside ( dsq -> getGameCursorPosition ( ) )
>14454	ArgumentList	dsq -> getGameCursorPosition ( )
>14455	Argument	dsq -> getGameCursorPosition ( )
>14456	CallExpression	dsq -> getGameCursorPosition ( )
>14457	ArgumentList	 
>14458	Callee	dsq -> getGameCursorPosition
>14459	PtrMemberAccess	dsq -> getGameCursorPosition
>14460	Identifier	getGameCursorPosition
>14461	Identifier	dsq
>14462	Callee	p -> isCoordinateInside
>14463	PtrMemberAccess	p -> isCoordinateInside
>14464	Identifier	isCoordinateInside
>14465	Identifier	p
>14466	Condition	 
>14467	OrExpression	! withAct || p -> cursorActivation
>14468	PtrMemberAccess	p -> cursorActivation
>14469	Identifier	cursorActivation
>14470	Identifier	p
>14471	UnaryOp	! withAct
>14472	Identifier	withAct
>14473	UnaryOperator	!
>14474	Condition	 
>14475	AndExpression	! p -> nodes . empty ( ) && p -> hasScript ( )
>14476	CallExpression	p -> hasScript ( )
>14477	ArgumentList	 
>14478	Callee	p -> hasScript
>14479	PtrMemberAccess	p -> hasScript
>14480	Identifier	hasScript
>14481	Identifier	p
>14482	UnaryOp	! p -> nodes . empty ( )
>14483	CallExpression	p -> nodes . empty ( )
>14484	ArgumentList	 
>14485	Callee	p -> nodes . empty
>14486	MemberAccess	p -> nodes . empty
>14487	Identifier	empty
>14488	PtrMemberAccess	p -> nodes
>14489	Identifier	nodes
>14490	Identifier	p
>14491	UnaryOperator	!
>14492	IdentifierDeclStatement	 
>14493	IdentifierDecl	* p = ( paths [ i ] )
>14494	AssignmentExpr	* p = ( paths [ i ] )
>14495	ArrayIndexing	paths [ i ]
>14496	Identifier	i
>14497	Identifier	paths
>14498	Identifier	p
>14499	Identifier	p
>14500	IdentifierDeclType	Path *
>14501	IncDecOp	 
>14502	IncDec	++
>14503	Identifier	i
>14504	Condition	 
>14505	RelationalExpression	i < sz
>14506	Identifier	sz
>14507	Identifier	i
>14508	ForInit	 
>14509	IdentifierDeclStatement	int i = 0 ;
>14510	IdentifierDecl	i = 0
>14511	AssignmentExpr	i = 0
>14512	PrimaryExpression	0
>14513	Identifier	i
>14514	Identifier	i
>14515	IdentifierDeclType	int
>14516	IdentifierDeclStatement	 
>14517	IdentifierDecl	sz = paths . size ( )
>14518	AssignmentExpr	sz = paths . size ( )
>14519	CallExpression	paths . size ( )
>14520	ArgumentList	 
>14521	Callee	paths . size
>14522	MemberAccess	paths . size
>14523	Identifier	size
>14524	Identifier	paths
>14525	Identifier	sz
>14526	Identifier	sz
>14527	IdentifierDeclType	int
>14548	FunctionDef	Game 
>14549	ParameterList	const Vector & pos , const std 
>14550	Parameter	 
>14551	Identifier	ignore
>14552	ParameterType	const Path *
>14553	Parameter	 
>14554	Identifier	s
>14555	ParameterType	const std 
>14556	Parameter	 
>14557	Identifier	pos
>14558	ParameterType	const Vector &
>14559	ReturnType	Path *
>14560	CompoundStatement	 
>14561	ReturnStatement	 
>14562	Identifier	closest
>14563	ForStatement	for ( int i = 0 ; i < dsq -> game -> paths . size ( ) ; i ++ )
>14564	CompoundStatement	 
>14565	IfStatement	if ( cp != ignore && ! cp -> nodes . empty ( ) && ( st . empty ( ) || st == cp -> label ) )
>14566	CompoundStatement	 
>14567	IfStatement	if ( dist < smallestDist )
>14568	CompoundStatement	 
>14569	ExpressionStatement	 
>14570	AssignmentExpr	closest = cp
>14571	Identifier	cp
>14572	Identifier	closest
>14573	ExpressionStatement	 
>14574	AssignmentExpr	smallestDist = dist
>14575	Identifier	dist
>14576	Identifier	smallestDist
>14577	Condition	 
>14578	RelationalExpression	dist < smallestDist
>14579	Identifier	smallestDist
>14580	Identifier	dist
>14581	IdentifierDeclStatement	 
>14582	IdentifierDecl	dist = v . getSquaredLength2D ( )
>14583	AssignmentExpr	dist = v . getSquaredLength2D ( )
>14584	CallExpression	v . getSquaredLength2D ( )
>14585	ArgumentList	 
>14586	Callee	v . getSquaredLength2D
>14587	MemberAccess	v . getSquaredLength2D
>14588	Identifier	getSquaredLength2D
>14589	Identifier	v
>14590	Identifier	dist
>14591	Identifier	dist
>14592	IdentifierDeclType	const float
>14593	IdentifierDeclStatement	 
>14594	IdentifierDecl	v = cp -> nodes [ 0 ] . position - pos
>14595	AssignmentExpr	v = cp -> nodes [ 0 ] . position - pos
>14596	AdditiveExpression	cp -> nodes [ 0 ] . position - pos
>14597	Identifier	pos
>14598	MemberAccess	cp -> nodes [ 0 ] . position
>14599	Identifier	position
>14600	ArrayIndexing	cp -> nodes [ 0 ]
>14601	PrimaryExpression	0
>14602	PtrMemberAccess	cp -> nodes
>14603	Identifier	nodes
>14604	Identifier	cp
>14605	Identifier	v
>14606	Identifier	v
>14607	IdentifierDeclType	const Vector
>14608	Condition	 
>14609	AndExpression	cp != ignore && ! cp -> nodes . empty ( ) && ( st . empty ( ) || st == cp -> label )
>14610	AndExpression	! cp -> nodes . empty ( ) && ( st . empty ( ) || st == cp -> label )
>14611	OrExpression	st . empty ( ) || st == cp -> label
>14612	EqualityExpression	st == cp -> label
>14613	PtrMemberAccess	cp -> label
>14614	Identifier	label
>14615	Identifier	cp
>14616	Identifier	st
>14617	CallExpression	st . empty ( )
>14618	ArgumentList	 
>14619	Callee	st . empty
>14620	MemberAccess	st . empty
>14621	Identifier	empty
>14622	Identifier	st
>14623	UnaryOp	! cp -> nodes . empty ( )
>14624	CallExpression	cp -> nodes . empty ( )
>14625	ArgumentList	 
>14626	Callee	cp -> nodes . empty
>14627	MemberAccess	cp -> nodes . empty
>14628	Identifier	empty
>14629	PtrMemberAccess	cp -> nodes
>14630	Identifier	nodes
>14631	Identifier	cp
>14632	UnaryOperator	!
>14633	EqualityExpression	cp != ignore
>14634	Identifier	ignore
>14635	Identifier	cp
>14636	IdentifierDeclStatement	 
>14637	IdentifierDecl	* cp = dsq -> game -> paths [ i ]
>14638	AssignmentExpr	* cp = dsq -> game -> paths [ i ]
>14639	ArrayIndexing	dsq -> game -> paths [ i ]
>14640	Identifier	i
>14641	PtrMemberAccess	dsq -> game -> paths
>14642	Identifier	paths
>14643	PtrMemberAccess	dsq -> game
>14644	Identifier	game
>14645	Identifier	dsq
>14646	Identifier	cp
>14647	Identifier	cp
>14648	IdentifierDeclType	Path *
>14649	IncDecOp	 
>14650	IncDec	++
>14651	Identifier	i
>14652	Condition	 
>14653	RelationalExpression	i < dsq -> game -> paths . size ( )
>14654	CallExpression	dsq -> game -> paths . size ( )
>14655	ArgumentList	 
>14656	Callee	dsq -> game -> paths . size
>14657	MemberAccess	dsq -> game -> paths . size
>14658	Identifier	size
>14659	PtrMemberAccess	dsq -> game -> paths
>14660	Identifier	paths
>14661	PtrMemberAccess	dsq -> game
>14662	Identifier	game
>14663	Identifier	dsq
>14664	Identifier	i
>14665	ForInit	 
>14666	IdentifierDeclStatement	int i = 0 ;
>14667	IdentifierDecl	i = 0
>14668	AssignmentExpr	i = 0
>14669	PrimaryExpression	0
>14670	Identifier	i
>14671	Identifier	i
>14672	IdentifierDeclType	int
>14673	ExpressionStatement	 
>14674	CallExpression	stringToLower ( st )
>14675	ArgumentList	st
>14676	Argument	st
>14677	Identifier	st
>14678	Callee	stringToLower
>14679	Identifier	stringToLower
>14680	IdentifierDeclStatement	 
>14681	IdentifierDecl	st = s
>14682	AssignmentExpr	st = s
>14683	Identifier	s
>14684	Identifier	s
>14685	Identifier	st
>14686	IdentifierDeclType	std 
>14687	IdentifierDeclStatement	 
>14688	IdentifierDecl	smallestDist = HUGE_VALF
>14689	AssignmentExpr	smallestDist = HUGE_VALF
>14690	Identifier	HUGE_VALF
>14691	Identifier	HUGE_VALF
>14692	Identifier	smallestDist
>14693	IdentifierDeclType	float
>14694	IdentifierDeclStatement	 
>14695	IdentifierDecl	* closest = 0
>14696	AssignmentExpr	* closest = 0
>14697	PrimaryExpression	0
>14698	Identifier	closest
>14699	Identifier	closest
>14700	IdentifierDeclType	Path *
>14735	FunctionDef	Game 
>14736	ParameterList	const Vector & pos , PathType pathType
>14737	Parameter	 
>14738	Identifier	pathType
>14739	ParameterType	PathType
>14740	Parameter	 
>14741	Identifier	pos
>14742	ParameterType	const Vector &
>14743	ReturnType	Path *
>14744	CompoundStatement	 
>14745	ReturnStatement	 
>14746	Identifier	closest
>14747	ForStatement	for ( Path * cp = dsq -> game -> getFirstPathOfType ( pathType ) ; cp ; cp = cp -> nextOfType )
>14748	CompoundStatement	 
>14749	IfStatement	if ( ! cp -> nodes . empty ( ) )
>14750	CompoundStatement	 
>14751	IfStatement	if ( dist < smallestDist )
>14752	CompoundStatement	 
>14753	ExpressionStatement	 
>14754	AssignmentExpr	closest = cp
>14755	Identifier	cp
>14756	Identifier	closest
>14757	ExpressionStatement	 
>14758	AssignmentExpr	smallestDist = dist
>14759	Identifier	dist
>14760	Identifier	smallestDist
>14761	Condition	 
>14762	RelationalExpression	dist < smallestDist
>14763	Identifier	smallestDist
>14764	Identifier	dist
>14765	IdentifierDeclStatement	 
>14766	IdentifierDecl	dist = v . getSquaredLength2D ( )
>14767	AssignmentExpr	dist = v . getSquaredLength2D ( )
>14768	CallExpression	v . getSquaredLength2D ( )
>14769	ArgumentList	 
>14770	Callee	v . getSquaredLength2D
>14771	MemberAccess	v . getSquaredLength2D
>14772	Identifier	getSquaredLength2D
>14773	Identifier	v
>14774	Identifier	dist
>14775	Identifier	dist
>14776	IdentifierDeclType	const float
>14777	IdentifierDeclStatement	 
>14778	IdentifierDecl	v = cp -> nodes [ 0 ] . position - pos
>14779	AssignmentExpr	v = cp -> nodes [ 0 ] . position - pos
>14780	AdditiveExpression	cp -> nodes [ 0 ] . position - pos
>14781	Identifier	pos
>14782	MemberAccess	cp -> nodes [ 0 ] . position
>14783	Identifier	position
>14784	ArrayIndexing	cp -> nodes [ 0 ]
>14785	PrimaryExpression	0
>14786	PtrMemberAccess	cp -> nodes
>14787	Identifier	nodes
>14788	Identifier	cp
>14789	Identifier	v
>14790	Identifier	v
>14791	IdentifierDeclType	const Vector
>14792	Condition	 
>14793	UnaryOp	! cp -> nodes . empty ( )
>14794	CallExpression	cp -> nodes . empty ( )
>14795	ArgumentList	 
>14796	Callee	cp -> nodes . empty
>14797	MemberAccess	cp -> nodes . empty
>14798	Identifier	empty
>14799	PtrMemberAccess	cp -> nodes
>14800	Identifier	nodes
>14801	Identifier	cp
>14802	UnaryOperator	!
>14803	AssignmentExpr	 
>14804	PtrMemberAccess	cp -> nextOfType
>14805	Identifier	nextOfType
>14806	Identifier	cp
>14807	Identifier	cp
>14808	Condition	 
>14809	Identifier	cp
>14810	ForInit	 
>14811	IdentifierDeclStatement	Path * cp = dsq -> game -> getFirstPathOfType ( pathType ) ;
>14812	IdentifierDecl	* cp = dsq -> game -> getFirstPathOfType ( pathType )
>14813	AssignmentExpr	* cp = dsq -> game -> getFirstPathOfType ( pathType )
>14814	CallExpression	dsq -> game -> getFirstPathOfType ( pathType )
>14815	ArgumentList	pathType
>14816	Argument	pathType
>14817	Identifier	pathType
>14818	Callee	dsq -> game -> getFirstPathOfType
>14819	PtrMemberAccess	dsq -> game -> getFirstPathOfType
>14820	Identifier	getFirstPathOfType
>14821	PtrMemberAccess	dsq -> game
>14822	Identifier	game
>14823	Identifier	dsq
>14824	Identifier	cp
>14825	Identifier	cp
>14826	IdentifierDeclType	Path *
>14827	IdentifierDeclStatement	 
>14828	IdentifierDecl	smallestDist = HUGE_VALF
>14829	AssignmentExpr	smallestDist = HUGE_VALF
>14830	Identifier	HUGE_VALF
>14831	Identifier	HUGE_VALF
>14832	Identifier	smallestDist
>14833	IdentifierDeclType	float
>14834	IdentifierDeclStatement	 
>14835	IdentifierDecl	* closest = 0
>14836	AssignmentExpr	* closest = 0
>14837	PrimaryExpression	0
>14838	Identifier	closest
>14839	Identifier	closest
>14840	IdentifierDeclType	Path *
>14866	FunctionDef	Game 
>14867	ParameterList	Path * p , std 
>14868	Parameter	 
>14869	Identifier	s
>14870	ParameterType	std 
>14871	Parameter	 
>14872	Identifier	p
>14873	ParameterType	Path *
>14874	ReturnType	Path *
>14875	CompoundStatement	 
>14876	ReturnStatement	 
>14877	CallExpression	getNearestPath ( p -> nodes [ 0 ] . position , s )
>14878	ArgumentList	p -> nodes [ 0 ] . position
>14879	Argument	s
>14880	Identifier	s
>14881	Argument	p -> nodes [ 0 ] . position
>14882	MemberAccess	p -> nodes [ 0 ] . position
>14883	Identifier	position
>14884	ArrayIndexing	p -> nodes [ 0 ]
>14885	PrimaryExpression	0
>14886	PtrMemberAccess	p -> nodes
>14887	Identifier	nodes
>14888	Identifier	p
>14889	Callee	getNearestPath
>14890	Identifier	getNearestPath
>14891	IfStatement	if ( p -> nodes . empty ( ) )
>14892	ReturnStatement	 
>14893	PrimaryExpression	0
>14894	Condition	 
>14895	CallExpression	p -> nodes . empty ( )
>14896	ArgumentList	 
>14897	Callee	p -> nodes . empty
>14898	MemberAccess	p -> nodes . empty
>14899	Identifier	empty
>14900	PtrMemberAccess	p -> nodes
>14901	Identifier	nodes
>14902	Identifier	p
>14915	FunctionDef	Game 
>14916	ParameterList	std 
>14917	Parameter	 
>14918	Identifier	name
>14919	ParameterType	std 
>14920	ReturnType	Path *
>14921	CompoundStatement	 
>14922	ReturnStatement	 
>14923	PrimaryExpression	0
>14924	ForStatement	for ( int i = 0 ; i < paths . size ( ) ; i ++ )
>14925	CompoundStatement	 
>14926	IfStatement	if ( paths [ i ] -> label == name )
>14927	ReturnStatement	 
>14928	ArrayIndexing	paths [ i ]
>14929	Identifier	i
>14930	Identifier	paths
>14931	Condition	 
>14932	EqualityExpression	paths [ i ] -> label == name
>14933	Identifier	name
>14934	PtrMemberAccess	paths [ i ] -> label
>14935	Identifier	label
>14936	ArrayIndexing	paths [ i ]
>14937	Identifier	i
>14938	Identifier	paths
>14939	IncDecOp	 
>14940	IncDec	++
>14941	Identifier	i
>14942	Condition	 
>14943	RelationalExpression	i < paths . size ( )
>14944	CallExpression	paths . size ( )
>14945	ArgumentList	 
>14946	Callee	paths . size
>14947	MemberAccess	paths . size
>14948	Identifier	size
>14949	Identifier	paths
>14950	Identifier	i
>14951	ForInit	 
>14952	IdentifierDeclStatement	int i = 0 ;
>14953	IdentifierDecl	i = 0
>14954	AssignmentExpr	i = 0
>14955	PrimaryExpression	0
>14956	Identifier	i
>14957	Identifier	i
>14958	IdentifierDeclType	int
>14959	ExpressionStatement	 
>14960	CallExpression	stringToLowerUserData ( name )
>14961	ArgumentList	name
>14962	Argument	name
>14963	Identifier	name
>14964	Callee	stringToLowerUserData
>14965	Identifier	stringToLowerUserData
>14978	FunctionDef	Game 
>14979	ParameterList	RenderObject * group , const std 
>14980	Parameter	 
>14981	Identifier	l3
>14982	ParameterType	int
>14983	Parameter	 
>14984	Identifier	l2
>14985	ParameterType	int
>14986	Parameter	 
>14987	Identifier	l1
>14988	ParameterType	int
>14989	Parameter	 
>14990	Identifier	y
>14991	ParameterType	int
>14992	Parameter	 
>14993	Identifier	actionInputName
>14994	ParameterType	const std 
>14995	Parameter	 
>14996	Identifier	label
>14997	ParameterType	const std 
>14998	Parameter	 
>14999	Identifier	group
>15000	ParameterType	RenderObject *
>15001	ReturnType	void
>15002	CompoundStatement	 
>15003	ExpressionStatement	 
>15004	CallExpression	k2 -> setDirMove ( DIR_LEFT , k1 )
>15005	ArgumentList	DIR_LEFT
>15006	Argument	k1
>15007	Identifier	k1
>15008	Argument	DIR_LEFT
>15009	Identifier	DIR_LEFT
>15010	Callee	k2 -> setDirMove
>15011	PtrMemberAccess	k2 -> setDirMove
>15012	Identifier	setDirMove
>15013	Identifier	k2
>15014	ExpressionStatement	 
>15015	CallExpression	j1 -> setDirMove ( DIR_LEFT , k2 )
>15016	ArgumentList	DIR_LEFT
>15017	Argument	k2
>15018	Identifier	k2
>15019	Argument	DIR_LEFT
>15020	Identifier	DIR_LEFT
>15021	Callee	j1 -> setDirMove
>15022	PtrMemberAccess	j1 -> setDirMove
>15023	Identifier	setDirMove
>15024	Identifier	j1
>15025	ExpressionStatement	 
>15026	CallExpression	k2 -> setDirMove ( DIR_RIGHT , j1 )
>15027	ArgumentList	DIR_RIGHT
>15028	Argument	j1
>15029	Identifier	j1
>15030	Argument	DIR_RIGHT
>15031	Identifier	DIR_RIGHT
>15032	Callee	k2 -> setDirMove
>15033	PtrMemberAccess	k2 -> setDirMove
>15034	Identifier	setDirMove
>15035	Identifier	k2
>15036	ExpressionStatement	 
>15037	CallExpression	k1 -> setDirMove ( DIR_RIGHT , k2 )
>15038	ArgumentList	DIR_RIGHT
>15039	Argument	k2
>15040	Identifier	k2
>15041	Argument	DIR_RIGHT
>15042	Identifier	DIR_RIGHT
>15043	Callee	k1 -> setDirMove
>15044	PtrMemberAccess	k1 -> setDirMove
>15045	Identifier	setDirMove
>15046	Identifier	k1
>15047	ExpressionStatement	 
>15048	CallExpression	group -> addChild ( j1 , PM_POINTER )
>15049	ArgumentList	j1
>15050	Argument	PM_POINTER
>15051	Identifier	PM_POINTER
>15052	Argument	j1
>15053	Identifier	j1
>15054	Callee	group -> addChild
>15055	PtrMemberAccess	group -> addChild
>15056	Identifier	addChild
>15057	Identifier	group
>15058	ExpressionStatement	 
>15059	CallExpression	j1 -> setLock ( l3 )
>15060	ArgumentList	l3
>15061	Argument	l3
>15062	Identifier	l3
>15063	Callee	j1 -> setLock
>15064	PtrMemberAccess	j1 -> setLock
>15065	Identifier	setLock
>15066	Identifier	j1
>15067	ExpressionStatement	 
>15068	AssignmentExpr	j1 -> position = Vector ( 600 , y )
>15069	CallExpression	Vector ( 600 , y )
>15070	ArgumentList	600
>15071	Argument	y
>15072	Identifier	y
>15073	Argument	600
>15074	PrimaryExpression	600
>15075	Callee	Vector
>15076	Identifier	Vector
>15077	PtrMemberAccess	j1 -> position
>15078	Identifier	position
>15079	Identifier	j1
>15080	IdentifierDeclStatement	 
>15081	IdentifierDecl	* j1 = new AquariaKeyConfig ( actionInputName , INPUTSET_JOY , 0 )
>15082	AssignmentExpr	* j1 = new AquariaKeyConfig ( actionInputName , INPUTSET_JOY , 0 )
>15083	Expression	actionInputName , INPUTSET_JOY , 0
>15084	Expression	INPUTSET_JOY , 0
>15085	PrimaryExpression	0
>15086	Identifier	INPUTSET_JOY
>15087	Identifier	actionInputName
>15088	Identifier	j1
>15089	Identifier	j1
>15090	IdentifierDeclType	AquariaKeyConfig *
>15091	ExpressionStatement	 
>15092	CallExpression	group -> addChild ( k2 , PM_POINTER )
>15093	ArgumentList	k2
>15094	Argument	PM_POINTER
>15095	Identifier	PM_POINTER
>15096	Argument	k2
>15097	Identifier	k2
>15098	Callee	group -> addChild
>15099	PtrMemberAccess	group -> addChild
>15100	Identifier	addChild
>15101	Identifier	group
>15102	ExpressionStatement	 
>15103	CallExpression	k2 -> setLock ( l2 )
>15104	ArgumentList	l2
>15105	Argument	l2
>15106	Identifier	l2
>15107	Callee	k2 -> setLock
>15108	PtrMemberAccess	k2 -> setLock
>15109	Identifier	setLock
>15110	Identifier	k2
>15111	ExpressionStatement	 
>15112	AssignmentExpr	k2 -> position = Vector ( 475 , y )
>15113	CallExpression	Vector ( 475 , y )
>15114	ArgumentList	475
>15115	Argument	y
>15116	Identifier	y
>15117	Argument	475
>15118	PrimaryExpression	475
>15119	Callee	Vector
>15120	Identifier	Vector
>15121	PtrMemberAccess	k2 -> position
>15122	Identifier	position
>15123	Identifier	k2
>15124	IdentifierDeclStatement	 
>15125	IdentifierDecl	* k2 = new AquariaKeyConfig ( actionInputName , INPUTSET_KEY , 1 )
>15126	AssignmentExpr	* k2 = new AquariaKeyConfig ( actionInputName , INPUTSET_KEY , 1 )
>15127	Expression	actionInputName , INPUTSET_KEY , 1
>15128	Expression	INPUTSET_KEY , 1
>15129	PrimaryExpression	1
>15130	Identifier	INPUTSET_KEY
>15131	Identifier	actionInputName
>15132	Identifier	k2
>15133	Identifier	k2
>15134	IdentifierDeclType	AquariaKeyConfig *
>15135	ExpressionStatement	 
>15136	CallExpression	group -> addChild ( k1 , PM_POINTER )
>15137	ArgumentList	k1
>15138	Argument	PM_POINTER
>15139	Identifier	PM_POINTER
>15140	Argument	k1
>15141	Identifier	k1
>15142	Callee	group -> addChild
>15143	PtrMemberAccess	group -> addChild
>15144	Identifier	addChild
>15145	Identifier	group
>15146	ExpressionStatement	 
>15147	CallExpression	k1 -> setLock ( l1 )
>15148	ArgumentList	l1
>15149	Argument	l1
>15150	Identifier	l1
>15151	Callee	k1 -> setLock
>15152	PtrMemberAccess	k1 -> setLock
>15153	Identifier	setLock
>15154	Identifier	k1
>15155	ExpressionStatement	 
>15156	AssignmentExpr	k1 -> position = Vector ( 350 , y )
>15157	CallExpression	Vector ( 350 , y )
>15158	ArgumentList	350
>15159	Argument	y
>15160	Identifier	y
>15161	Argument	350
>15162	PrimaryExpression	350
>15163	Callee	Vector
>15164	Identifier	Vector
>15165	PtrMemberAccess	k1 -> position
>15166	Identifier	position
>15167	Identifier	k1
>15168	IdentifierDeclStatement	 
>15169	IdentifierDecl	* k1 = new AquariaKeyConfig ( actionInputName , INPUTSET_KEY , 0 )
>15170	AssignmentExpr	* k1 = new AquariaKeyConfig ( actionInputName , INPUTSET_KEY , 0 )
>15171	Expression	actionInputName , INPUTSET_KEY , 0
>15172	Expression	INPUTSET_KEY , 0
>15173	PrimaryExpression	0
>15174	Identifier	INPUTSET_KEY
>15175	Identifier	actionInputName
>15176	Identifier	k1
>15177	Identifier	k1
>15178	IdentifierDeclType	AquariaKeyConfig *
>15179	ExpressionStatement	 
>15180	CallExpression	group -> addChild ( lb , PM_POINTER )
>15181	ArgumentList	lb
>15182	Argument	PM_POINTER
>15183	Identifier	PM_POINTER
>15184	Argument	lb
>15185	Identifier	lb
>15186	Callee	group -> addChild
>15187	PtrMemberAccess	group -> addChild
>15188	Identifier	addChild
>15189	Identifier	group
>15190	ExpressionStatement	 
>15191	AssignmentExpr	lb -> position = Vector ( 140 , y )
>15192	CallExpression	Vector ( 140 , y )
>15193	ArgumentList	140
>15194	Argument	y
>15195	Identifier	y
>15196	Argument	140
>15197	PrimaryExpression	140
>15198	Callee	Vector
>15199	Identifier	Vector
>15200	PtrMemberAccess	lb -> position
>15201	Identifier	position
>15202	Identifier	lb
>15203	ExpressionStatement	 
>15204	CallExpression	lb -> setText ( label )
>15205	ArgumentList	label
>15206	Argument	label
>15207	Identifier	label
>15208	Callee	lb -> setText
>15209	PtrMemberAccess	lb -> setText
>15210	Identifier	setText
>15211	Identifier	lb
>15212	IdentifierDeclStatement	 
>15213	IdentifierDecl	* lb = new TTFText ( & dsq -> fontArialSmallest )
>15214	AssignmentExpr	* lb = new TTFText ( & dsq -> fontArialSmallest )
>15215	UnaryOp	& dsq -> fontArialSmallest
>15216	PtrMemberAccess	dsq -> fontArialSmallest
>15217	Identifier	fontArialSmallest
>15218	Identifier	dsq
>15219	UnaryOperator	&
>15220	Identifier	lb
>15221	Identifier	lb
>15222	IdentifierDeclType	TTFText *
>15254	FunctionDef	Game 
>15255	ParameterList	RenderObject * group , const std 
>15256	Parameter	 
>15257	Identifier	offx
>15258	ParameterType	int
>15259	Parameter	 
>15260	Identifier	y
>15261	ParameterType	int
>15262	Parameter	 
>15263	Identifier	actionInputName
>15264	ParameterType	const std 
>15265	Parameter	 
>15266	Identifier	label
>15267	ParameterType	const std 
>15268	Parameter	 
>15269	Identifier	group
>15270	ParameterType	RenderObject *
>15271	ReturnType	AquariaKeyConfig *
>15272	CompoundStatement	 
>15273	ReturnStatement	 
>15274	Identifier	i1
>15275	ExpressionStatement	 
>15276	CallExpression	i1 -> setDirMove ( DIR_LEFT , 0 )
>15277	ArgumentList	DIR_LEFT
>15278	Argument	0
>15279	PrimaryExpression	0
>15280	Argument	DIR_LEFT
>15281	Identifier	DIR_LEFT
>15282	Callee	i1 -> setDirMove
>15283	PtrMemberAccess	i1 -> setDirMove
>15284	Identifier	setDirMove
>15285	Identifier	i1
>15286	ExpressionStatement	 
>15287	CallExpression	i1 -> setDirMove ( DIR_RIGHT , 0 )
>15288	ArgumentList	DIR_RIGHT
>15289	Argument	0
>15290	PrimaryExpression	0
>15291	Argument	DIR_RIGHT
>15292	Identifier	DIR_RIGHT
>15293	Callee	i1 -> setDirMove
>15294	PtrMemberAccess	i1 -> setDirMove
>15295	Identifier	setDirMove
>15296	Identifier	i1
>15297	ExpressionStatement	 
>15298	CallExpression	group -> addChild ( i1 , PM_POINTER )
>15299	ArgumentList	i1
>15300	Argument	PM_POINTER
>15301	Identifier	PM_POINTER
>15302	Argument	i1
>15303	Identifier	i1
>15304	Callee	group -> addChild
>15305	PtrMemberAccess	group -> addChild
>15306	Identifier	addChild
>15307	Identifier	group
>15308	ExpressionStatement	 
>15309	AssignmentExpr	i1 -> position = Vector ( 140 + 80 + offx , y )
>15310	CallExpression	Vector ( 140 + 80 + offx , y )
>15311	ArgumentList	140 + 80 + offx
>15312	Argument	y
>15313	Identifier	y
>15314	Argument	140 + 80 + offx
>15315	AdditiveExpression	140 + 80 + offx
>15316	AdditiveExpression	80 + offx
>15317	Identifier	offx
>15318	PrimaryExpression	80
>15319	PrimaryExpression	140
>15320	Callee	Vector
>15321	Identifier	Vector
>15322	PtrMemberAccess	i1 -> position
>15323	Identifier	position
>15324	Identifier	i1
>15325	IdentifierDeclStatement	 
>15326	IdentifierDecl	* i1 = new AquariaKeyConfig ( actionInputName , INPUTSET_OTHER , 0 )
>15327	AssignmentExpr	* i1 = new AquariaKeyConfig ( actionInputName , INPUTSET_OTHER , 0 )
>15328	Expression	actionInputName , INPUTSET_OTHER , 0
>15329	Expression	INPUTSET_OTHER , 0
>15330	PrimaryExpression	0
>15331	Identifier	INPUTSET_OTHER
>15332	Identifier	actionInputName
>15333	Identifier	i1
>15334	Identifier	i1
>15335	IdentifierDeclType	AquariaKeyConfig *
>15336	ExpressionStatement	 
>15337	CallExpression	group -> addChild ( lb , PM_POINTER )
>15338	ArgumentList	lb
>15339	Argument	PM_POINTER
>15340	Identifier	PM_POINTER
>15341	Argument	lb
>15342	Identifier	lb
>15343	Callee	group -> addChild
>15344	PtrMemberAccess	group -> addChild
>15345	Identifier	addChild
>15346	Identifier	group
>15347	ExpressionStatement	 
>15348	AssignmentExpr	lb -> position = Vector ( 140 + offx , y )
>15349	CallExpression	Vector ( 140 + offx , y )
>15350	ArgumentList	140 + offx
>15351	Argument	y
>15352	Identifier	y
>15353	Argument	140 + offx
>15354	AdditiveExpression	140 + offx
>15355	Identifier	offx
>15356	PrimaryExpression	140
>15357	Callee	Vector
>15358	Identifier	Vector
>15359	PtrMemberAccess	lb -> position
>15360	Identifier	position
>15361	Identifier	lb
>15362	ExpressionStatement	 
>15363	CallExpression	lb -> setText ( label )
>15364	ArgumentList	label
>15365	Argument	label
>15366	Identifier	label
>15367	Callee	lb -> setText
>15368	PtrMemberAccess	lb -> setText
>15369	Identifier	setText
>15370	Identifier	lb
>15371	IdentifierDeclStatement	 
>15372	IdentifierDecl	* lb = new TTFText ( & dsq -> fontArialSmallest )
>15373	AssignmentExpr	* lb = new TTFText ( & dsq -> fontArialSmallest )
>15374	UnaryOp	& dsq -> fontArialSmallest
>15375	PtrMemberAccess	dsq -> fontArialSmallest
>15376	Identifier	fontArialSmallest
>15377	Identifier	dsq
>15378	UnaryOperator	&
>15379	Identifier	lb
>15380	Identifier	lb
>15381	IdentifierDeclType	TTFText *
>15404	FunctionDef	Game 
>15405	ParameterList	const std 
>15406	Parameter	 
>15407	Identifier	lastTruth
>15408	ParameterType	bool
>15409	Parameter	 
>15410	Identifier	type
>15411	ParameterType	FlagCheckType
>15412	Parameter	 
>15413	Identifier	flagCheck
>15414	ParameterType	const std 
>15415	ReturnType	bool
>15416	CompoundStatement	 
>15417	ReturnStatement	 
>15418	Identifier	true
>15419	IfStatement	if ( ! flagCheck . empty ( ) )
>15420	CompoundStatement	 
>15421	ReturnStatement	 
>15422	Identifier	truth
>15423	IfStatement	if ( next == \"AND\" )
>15424	ElseStatement	else
>15425	IfStatement	if ( next == \"OR\" )
>15426	CompoundStatement	 
>15427	ReturnStatement	 
>15428	CallExpression	doFlagCheck ( restOfIt , OR , truth )
>15429	ArgumentList	restOfIt
>15430	Argument	truth
>15431	Identifier	truth
>15432	Argument	OR
>15433	Identifier	OR
>15434	Argument	restOfIt
>15435	Identifier	restOfIt
>15436	Callee	doFlagCheck
>15437	Identifier	doFlagCheck
>15438	ExpressionStatement	 
>15439	CallExpression	std 
>15440	ArgumentList	is
>15441	Argument	restOfIt
>15442	Identifier	restOfIt
>15443	Argument	is
>15444	Identifier	is
>15445	Callee	std 
>15446	Identifier	std 
>15447	IdentifierDeclStatement	 
>15448	IdentifierDecl	restOfIt
>15449	Identifier	restOfIt
>15450	IdentifierDeclType	std 
>15451	Condition	 
>15452	EqualityExpression	next == \"OR\"
>15453	PrimaryExpression	\"OR\"
>15454	Identifier	next
>15455	CompoundStatement	 
>15456	ReturnStatement	 
>15457	CallExpression	doFlagCheck ( restOfIt , AND , truth )
>15458	ArgumentList	restOfIt
>15459	Argument	truth
>15460	Identifier	truth
>15461	Argument	AND
>15462	Identifier	AND
>15463	Argument	restOfIt
>15464	Identifier	restOfIt
>15465	Callee	doFlagCheck
>15466	Identifier	doFlagCheck
>15467	ExpressionStatement	 
>15468	CallExpression	std 
>15469	ArgumentList	is
>15470	Argument	restOfIt
>15471	Identifier	restOfIt
>15472	Argument	is
>15473	Identifier	is
>15474	Callee	std 
>15475	Identifier	std 
>15476	IdentifierDeclStatement	 
>15477	IdentifierDecl	restOfIt
>15478	Identifier	restOfIt
>15479	IdentifierDeclType	std 
>15480	Condition	 
>15481	EqualityExpression	next == \"AND\"
>15482	PrimaryExpression	\"AND\"
>15483	Identifier	next
>15484	IfStatement	if ( type == AND )
>15485	ElseStatement	else
>15486	IfStatement	if ( type == OR )
>15487	CompoundStatement	 
>15488	ExpressionStatement	 
>15489	AssignmentExpr	truth = ( lastTruth || truth )
>15490	OrExpression	lastTruth || truth
>15491	Identifier	truth
>15492	Identifier	lastTruth
>15493	Identifier	truth
>15494	Condition	 
>15495	EqualityExpression	type == OR
>15496	Identifier	OR
>15497	Identifier	type
>15498	CompoundStatement	 
>15499	ExpressionStatement	 
>15500	AssignmentExpr	truth = ( lastTruth && truth )
>15501	AndExpression	lastTruth && truth
>15502	Identifier	truth
>15503	Identifier	lastTruth
>15504	Identifier	truth
>15505	Condition	 
>15506	EqualityExpression	type == AND
>15507	Identifier	AND
>15508	Identifier	type
>15509	IfStatement	if ( comparison == \"==\" )
>15510	ElseStatement	else
>15511	IfStatement	if ( comparison == \"<\" )
>15512	ElseStatement	else
>15513	IfStatement	if ( comparison == \">\" )
>15514	ElseStatement	else
>15515	IfStatement	if ( comparison == \"<=\" )
>15516	ElseStatement	else
>15517	IfStatement	if ( comparison == \">=\" )
>15518	CompoundStatement	 
>15519	IfStatement	if ( dsq -> continuity . getFlag ( flagName ) >= value )
>15520	ExpressionStatement	 
>15521	AssignmentExpr	truth = true
>15522	Identifier	true
>15523	Identifier	truth
>15524	Condition	 
>15525	RelationalExpression	dsq -> continuity . getFlag ( flagName ) >= value
>15526	Identifier	value
>15527	CallExpression	dsq -> continuity . getFlag ( flagName )
>15528	ArgumentList	flagName
>15529	Argument	flagName
>15530	Identifier	flagName
>15531	Callee	dsq -> continuity . getFlag
>15532	MemberAccess	dsq -> continuity . getFlag
>15533	Identifier	getFlag
>15534	PtrMemberAccess	dsq -> continuity
>15535	Identifier	continuity
>15536	Identifier	dsq
>15537	Condition	 
>15538	EqualityExpression	comparison == \">=\"
>15539	PrimaryExpression	\">=\"
>15540	Identifier	comparison
>15541	CompoundStatement	 
>15542	IfStatement	if ( dsq -> continuity . getFlag ( flagName ) <= value )
>15543	ExpressionStatement	 
>15544	AssignmentExpr	truth = true
>15545	Identifier	true
>15546	Identifier	truth
>15547	Condition	 
>15548	RelationalExpression	dsq -> continuity . getFlag ( flagName ) <= value
>15549	Identifier	value
>15550	CallExpression	dsq -> continuity . getFlag ( flagName )
>15551	ArgumentList	flagName
>15552	Argument	flagName
>15553	Identifier	flagName
>15554	Callee	dsq -> continuity . getFlag
>15555	MemberAccess	dsq -> continuity . getFlag
>15556	Identifier	getFlag
>15557	PtrMemberAccess	dsq -> continuity
>15558	Identifier	continuity
>15559	Identifier	dsq
>15560	Condition	 
>15561	EqualityExpression	comparison == \"<=\"
>15562	PrimaryExpression	\"<=\"
>15563	Identifier	comparison
>15564	CompoundStatement	 
>15565	IfStatement	if ( dsq -> continuity . getFlag ( flagName ) > value )
>15566	ExpressionStatement	 
>15567	AssignmentExpr	truth = true
>15568	Identifier	true
>15569	Identifier	truth
>15570	Condition	 
>15571	RelationalExpression	dsq -> continuity . getFlag ( flagName ) > value
>15572	Identifier	value
>15573	CallExpression	dsq -> continuity . getFlag ( flagName )
>15574	ArgumentList	flagName
>15575	Argument	flagName
>15576	Identifier	flagName
>15577	Callee	dsq -> continuity . getFlag
>15578	MemberAccess	dsq -> continuity . getFlag
>15579	Identifier	getFlag
>15580	PtrMemberAccess	dsq -> continuity
>15581	Identifier	continuity
>15582	Identifier	dsq
>15583	Condition	 
>15584	EqualityExpression	comparison == \">\"
>15585	PrimaryExpression	\">\"
>15586	Identifier	comparison
>15587	CompoundStatement	 
>15588	IfStatement	if ( dsq -> continuity . getFlag ( flagName ) < value )
>15589	ExpressionStatement	 
>15590	AssignmentExpr	truth = true
>15591	Identifier	true
>15592	Identifier	truth
>15593	Condition	 
>15594	RelationalExpression	dsq -> continuity . getFlag ( flagName ) < value
>15595	Identifier	value
>15596	CallExpression	dsq -> continuity . getFlag ( flagName )
>15597	ArgumentList	flagName
>15598	Argument	flagName
>15599	Identifier	flagName
>15600	Callee	dsq -> continuity . getFlag
>15601	MemberAccess	dsq -> continuity . getFlag
>15602	Identifier	getFlag
>15603	PtrMemberAccess	dsq -> continuity
>15604	Identifier	continuity
>15605	Identifier	dsq
>15606	Condition	 
>15607	EqualityExpression	comparison == \"<\"
>15608	PrimaryExpression	\"<\"
>15609	Identifier	comparison
>15610	CompoundStatement	 
>15611	IfStatement	if ( dsq -> continuity . getFlag ( flagName ) == value )
>15612	ExpressionStatement	 
>15613	AssignmentExpr	truth = true
>15614	Identifier	true
>15615	Identifier	truth
>15616	Condition	 
>15617	EqualityExpression	dsq -> continuity . getFlag ( flagName ) == value
>15618	Identifier	value
>15619	CallExpression	dsq -> continuity . getFlag ( flagName )
>15620	ArgumentList	flagName
>15621	Argument	flagName
>15622	Identifier	flagName
>15623	Callee	dsq -> continuity . getFlag
>15624	MemberAccess	dsq -> continuity . getFlag
>15625	Identifier	getFlag
>15626	PtrMemberAccess	dsq -> continuity
>15627	Identifier	continuity
>15628	Identifier	dsq
>15629	Condition	 
>15630	EqualityExpression	comparison == \"==\"
>15631	PrimaryExpression	\"==\"
>15632	Identifier	comparison
>15633	IdentifierDeclStatement	 
>15634	IdentifierDecl	truth = false
>15635	AssignmentExpr	truth = false
>15636	Identifier	false
>15637	Identifier	false
>15638	Identifier	truth
>15639	IdentifierDeclType	bool
>15640	ExpressionStatement	 
>15641	ShiftExpression	is >> flagName >> comparison >> value >> next
>15642	ShiftExpression	flagName >> comparison >> value >> next
>15643	ShiftExpression	comparison >> value >> next
>15644	ShiftExpression	value >> next
>15645	Identifier	next
>15646	Identifier	value
>15647	Identifier	comparison
>15648	Identifier	flagName
>15649	Identifier	is
>15650	IdentifierDeclStatement	 
>15651	IdentifierDecl	is ( flagCheck )
>15652	Identifier	flagCheck
>15653	Identifier	is
>15654	IdentifierDeclType	std 
>15655	IdentifierDeclStatement	 
>15656	IdentifierDecl	value = 0
>15657	AssignmentExpr	value = 0
>15658	PrimaryExpression	0
>15659	Identifier	value
>15660	Identifier	value
>15661	IdentifierDeclType	int
>15662	IdentifierDeclStatement	 
>15663	IdentifierDecl	next
>15664	Identifier	next
>15665	IdentifierDeclType	std 
>15666	IdentifierDecl	comparison
>15667	Identifier	comparison
>15668	IdentifierDeclType	std 
>15669	IdentifierDecl	flagName
>15670	Identifier	flagName
>15671	IdentifierDeclType	std 
>15672	Condition	 
>15673	UnaryOp	! flagCheck . empty ( )
>15674	CallExpression	flagCheck . empty ( )
>15675	ArgumentList	 
>15676	Callee	flagCheck . empty
>15677	MemberAccess	flagCheck . empty
>15678	Identifier	empty
>15679	Identifier	flagCheck
>15680	UnaryOperator	!
>15704	FunctionDef	Game 
>15705	ParameterList	 
>15706	ReturnType	void
>15707	CompoundStatement	 
>15708	ExpressionStatement	 
>15709	CallExpression	dsq -> screenTransition -> transition ( MENUPAGETRANSTIME )
>15710	ArgumentList	MENUPAGETRANSTIME
>15711	Argument	MENUPAGETRANSTIME
>15712	Identifier	MENUPAGETRANSTIME
>15713	Callee	dsq -> screenTransition -> transition
>15714	PtrMemberAccess	dsq -> screenTransition -> transition
>15715	Identifier	transition
>15716	PtrMemberAccess	dsq -> screenTransition
>15717	Identifier	screenTransition
>15718	Identifier	dsq
>15719	ExpressionStatement	 
>15720	CallExpression	toggleMainMenu ( true )
>15721	ArgumentList	true
>15722	Argument	true
>15723	Identifier	true
>15724	Callee	toggleMainMenu
>15725	Identifier	toggleMainMenu
>15726	ExpressionStatement	 
>15727	CallExpression	toggleTreasureMenu ( false )
>15728	ArgumentList	false
>15729	Argument	false
>15730	Identifier	false
>15731	Callee	toggleTreasureMenu
>15732	Identifier	toggleTreasureMenu
>15733	ExpressionStatement	 
>15734	CallExpression	togglePetMenu ( false )
>15735	ArgumentList	false
>15736	Argument	false
>15737	Identifier	false
>15738	Callee	togglePetMenu
>15739	Identifier	togglePetMenu
>15740	ExpressionStatement	 
>15741	CallExpression	toggleFoodMenu ( false )
>15742	ArgumentList	false
>15743	Argument	false
>15744	Identifier	false
>15745	Callee	toggleFoodMenu
>15746	Identifier	toggleFoodMenu
>15747	ExpressionStatement	 
>15748	CallExpression	toggleOptionsMenu ( false )
>15749	ArgumentList	false
>15750	Argument	false
>15751	Identifier	false
>15752	Callee	toggleOptionsMenu
>15753	Identifier	toggleOptionsMenu
>15754	ExpressionStatement	 
>15755	CallExpression	dsq -> screenTransition -> capture ( )
>15756	ArgumentList	 
>15757	Callee	dsq -> screenTransition -> capture
>15758	PtrMemberAccess	dsq -> screenTransition -> capture
>15759	Identifier	capture
>15760	PtrMemberAccess	dsq -> screenTransition
>15761	Identifier	screenTransition
>15762	Identifier	dsq
>15772	FunctionDef	Game 
>15773	ParameterList	 
>15774	ReturnType	void
>15775	CompoundStatement	 
>15776	ExpressionStatement	 
>15777	CallExpression	dsq -> screenTransition -> transition ( MENUPAGETRANSTIME )
>15778	ArgumentList	MENUPAGETRANSTIME
>15779	Argument	MENUPAGETRANSTIME
>15780	Identifier	MENUPAGETRANSTIME
>15781	Callee	dsq -> screenTransition -> transition
>15782	PtrMemberAccess	dsq -> screenTransition -> transition
>15783	Identifier	transition
>15784	PtrMemberAccess	dsq -> screenTransition
>15785	Identifier	screenTransition
>15786	Identifier	dsq
>15787	ExpressionStatement	 
>15788	CallExpression	toggleFoodMenu ( true )
>15789	ArgumentList	true
>15790	Argument	true
>15791	Identifier	true
>15792	Callee	toggleFoodMenu
>15793	Identifier	toggleFoodMenu
>15794	ExpressionStatement	 
>15795	CallExpression	toggleTreasureMenu ( false )
>15796	ArgumentList	false
>15797	Argument	false
>15798	Identifier	false
>15799	Callee	toggleTreasureMenu
>15800	Identifier	toggleTreasureMenu
>15801	ExpressionStatement	 
>15802	CallExpression	toggleMainMenu ( false )
>15803	ArgumentList	false
>15804	Argument	false
>15805	Identifier	false
>15806	Callee	toggleMainMenu
>15807	Identifier	toggleMainMenu
>15808	ExpressionStatement	 
>15809	CallExpression	togglePetMenu ( false )
>15810	ArgumentList	false
>15811	Argument	false
>15812	Identifier	false
>15813	Callee	togglePetMenu
>15814	Identifier	togglePetMenu
>15815	ExpressionStatement	 
>15816	CallExpression	toggleOptionsMenu ( false )
>15817	ArgumentList	false
>15818	Argument	false
>15819	Identifier	false
>15820	Callee	toggleOptionsMenu
>15821	Identifier	toggleOptionsMenu
>15822	ExpressionStatement	 
>15823	CallExpression	dsq -> screenTransition -> capture ( )
>15824	ArgumentList	 
>15825	Callee	dsq -> screenTransition -> capture
>15826	PtrMemberAccess	dsq -> screenTransition -> capture
>15827	Identifier	capture
>15828	PtrMemberAccess	dsq -> screenTransition
>15829	Identifier	screenTransition
>15830	Identifier	dsq
>15840	FunctionDef	Game 
>15841	ParameterList	 
>15842	ReturnType	void
>15843	CompoundStatement	 
>15844	ExpressionStatement	 
>15845	CallExpression	dsq -> screenTransition -> transition ( MENUPAGETRANSTIME )
>15846	ArgumentList	MENUPAGETRANSTIME
>15847	Argument	MENUPAGETRANSTIME
>15848	Identifier	MENUPAGETRANSTIME
>15849	Callee	dsq -> screenTransition -> transition
>15850	PtrMemberAccess	dsq -> screenTransition -> transition
>15851	Identifier	transition
>15852	PtrMemberAccess	dsq -> screenTransition
>15853	Identifier	screenTransition
>15854	Identifier	dsq
>15855	ExpressionStatement	 
>15856	CallExpression	togglePetMenu ( true )
>15857	ArgumentList	true
>15858	Argument	true
>15859	Identifier	true
>15860	Callee	togglePetMenu
>15861	Identifier	togglePetMenu
>15862	ExpressionStatement	 
>15863	CallExpression	toggleTreasureMenu ( false )
>15864	ArgumentList	false
>15865	Argument	false
>15866	Identifier	false
>15867	Callee	toggleTreasureMenu
>15868	Identifier	toggleTreasureMenu
>15869	ExpressionStatement	 
>15870	CallExpression	toggleMainMenu ( false )
>15871	ArgumentList	false
>15872	Argument	false
>15873	Identifier	false
>15874	Callee	toggleMainMenu
>15875	Identifier	toggleMainMenu
>15876	ExpressionStatement	 
>15877	CallExpression	toggleFoodMenu ( false )
>15878	ArgumentList	false
>15879	Argument	false
>15880	Identifier	false
>15881	Callee	toggleFoodMenu
>15882	Identifier	toggleFoodMenu
>15883	ExpressionStatement	 
>15884	CallExpression	toggleOptionsMenu ( false )
>15885	ArgumentList	false
>15886	Argument	false
>15887	Identifier	false
>15888	Callee	toggleOptionsMenu
>15889	Identifier	toggleOptionsMenu
>15890	ExpressionStatement	 
>15891	CallExpression	dsq -> screenTransition -> capture ( )
>15892	ArgumentList	 
>15893	Callee	dsq -> screenTransition -> capture
>15894	PtrMemberAccess	dsq -> screenTransition -> capture
>15895	Identifier	capture
>15896	PtrMemberAccess	dsq -> screenTransition
>15897	Identifier	screenTransition
>15898	Identifier	dsq
>15908	FunctionDef	Game 
>15909	ParameterList	 
>15910	ReturnType	void
>15911	CompoundStatement	 
>15912	ExpressionStatement	 
>15913	CallExpression	dsq -> screenTransition -> transition ( MENUPAGETRANSTIME )
>15914	ArgumentList	MENUPAGETRANSTIME
>15915	Argument	MENUPAGETRANSTIME
>15916	Identifier	MENUPAGETRANSTIME
>15917	Callee	dsq -> screenTransition -> transition
>15918	PtrMemberAccess	dsq -> screenTransition -> transition
>15919	Identifier	transition
>15920	PtrMemberAccess	dsq -> screenTransition
>15921	Identifier	screenTransition
>15922	Identifier	dsq
>15923	ExpressionStatement	 
>15924	CallExpression	toggleTreasureMenu ( true )
>15925	ArgumentList	true
>15926	Argument	true
>15927	Identifier	true
>15928	Callee	toggleTreasureMenu
>15929	Identifier	toggleTreasureMenu
>15930	ExpressionStatement	 
>15931	CallExpression	togglePetMenu ( false )
>15932	ArgumentList	false
>15933	Argument	false
>15934	Identifier	false
>15935	Callee	togglePetMenu
>15936	Identifier	togglePetMenu
>15937	ExpressionStatement	 
>15938	CallExpression	toggleMainMenu ( false )
>15939	ArgumentList	false
>15940	Argument	false
>15941	Identifier	false
>15942	Callee	toggleMainMenu
>15943	Identifier	toggleMainMenu
>15944	ExpressionStatement	 
>15945	CallExpression	toggleFoodMenu ( false )
>15946	ArgumentList	false
>15947	Argument	false
>15948	Identifier	false
>15949	Callee	toggleFoodMenu
>15950	Identifier	toggleFoodMenu
>15951	ExpressionStatement	 
>15952	CallExpression	toggleOptionsMenu ( false )
>15953	ArgumentList	false
>15954	Argument	false
>15955	Identifier	false
>15956	Callee	toggleOptionsMenu
>15957	Identifier	toggleOptionsMenu
>15958	ExpressionStatement	 
>15959	CallExpression	dsq -> screenTransition -> capture ( )
>15960	ArgumentList	 
>15961	Callee	dsq -> screenTransition -> capture
>15962	PtrMemberAccess	dsq -> screenTransition -> capture
>15963	Identifier	capture
>15964	PtrMemberAccess	dsq -> screenTransition
>15965	Identifier	screenTransition
>15966	Identifier	dsq
>15978	FunctionDef	Game 
>15979	ParameterList	 
>15980	ReturnType	void
>15981	CompoundStatement	 
>15982	ForStatement	for ( int i = 0 ; i < foodHolders . size ( ) ; i ++ )
>15983	CompoundStatement	 
>15984	IfStatement	if ( ! foodHolderNames [ i ] . empty ( ) )
>15985	CompoundStatement	 
>15986	ExpressionStatement	 
>15987	CallExpression	foodHolders [ i ] -> setIngredient ( ing , false )
>15988	ArgumentList	ing
>15989	Argument	false
>15990	Identifier	false
>15991	Argument	ing
>15992	Identifier	ing
>15993	Callee	foodHolders [ i ] -> setIngredient
>15994	PtrMemberAccess	foodHolders [ i ] -> setIngredient
>15995	Identifier	setIngredient
>15996	ArrayIndexing	foodHolders [ i ]
>15997	Identifier	i
>15998	Identifier	foodHolders
>15999	IdentifierDeclStatement	 
>16000	IdentifierDecl	* ing = dsq -> continuity . getIngredientHeldByName ( foodHolderNames [ i ] )
>16001	AssignmentExpr	* ing = dsq -> continuity . getIngredientHeldByName ( foodHolderNames [ i ] )
>16002	CallExpression	dsq -> continuity . getIngredientHeldByName ( foodHolderNames [ i ] )
>16003	ArgumentList	foodHolderNames [ i ]
>16004	Argument	foodHolderNames [ i ]
>16005	ArrayIndexing	foodHolderNames [ i ]
>16006	Identifier	i
>16007	Identifier	foodHolderNames
>16008	Callee	dsq -> continuity . getIngredientHeldByName
>16009	MemberAccess	dsq -> continuity . getIngredientHeldByName
>16010	Identifier	getIngredientHeldByName
>16011	PtrMemberAccess	dsq -> continuity
>16012	Identifier	continuity
>16013	Identifier	dsq
>16014	Identifier	ing
>16015	Identifier	ing
>16016	IdentifierDeclType	IngredientData *
>16017	Condition	 
>16018	UnaryOp	! foodHolderNames [ i ] . empty ( )
>16019	CallExpression	foodHolderNames [ i ] . empty ( )
>16020	ArgumentList	 
>16021	Callee	foodHolderNames [ i ] . empty
>16022	MemberAccess	foodHolderNames [ i ] . empty
>16023	Identifier	empty
>16024	ArrayIndexing	foodHolderNames [ i ]
>16025	Identifier	i
>16026	Identifier	foodHolderNames
>16027	UnaryOperator	!
>16028	IncDecOp	 
>16029	IncDec	++
>16030	Identifier	i
>16031	Condition	 
>16032	RelationalExpression	i < foodHolders . size ( )
>16033	CallExpression	foodHolders . size ( )
>16034	ArgumentList	 
>16035	Callee	foodHolders . size
>16036	MemberAccess	foodHolders . size
>16037	Identifier	size
>16038	Identifier	foodHolders
>16039	Identifier	i
>16040	ForInit	 
>16041	IdentifierDeclStatement	int i = 0 ;
>16042	IdentifierDecl	i = 0
>16043	AssignmentExpr	i = 0
>16044	PrimaryExpression	0
>16045	Identifier	i
>16046	Identifier	i
>16047	IdentifierDeclType	int
>16048	ExpressionStatement	 
>16049	CallExpression	dsq -> spawnParticleEffect ( \"menu-switch\" , worldLeftCenter , 0 , 0 , LR_HUD3 , 1 )
>16050	ArgumentList	\"menu-switch\"
>16051	Argument	1
>16052	PrimaryExpression	1
>16053	Argument	LR_HUD3
>16054	Identifier	LR_HUD3
>16055	Argument	0
>16056	PrimaryExpression	0
>16057	Argument	0
>16058	PrimaryExpression	0
>16059	Argument	worldLeftCenter
>16060	Identifier	worldLeftCenter
>16061	Argument	\"menu-switch\"
>16062	PrimaryExpression	\"menu-switch\"
>16063	Callee	dsq -> spawnParticleEffect
>16064	PtrMemberAccess	dsq -> spawnParticleEffect
>16065	Identifier	spawnParticleEffect
>16066	Identifier	dsq
>16067	ExpressionStatement	 
>16068	CallExpression	dsq -> sound -> playSfx ( \"menu-switch\" , 0.5 )
>16069	ArgumentList	\"menu-switch\"
>16070	Argument	0.5
>16071	PrimaryExpression	0.5
>16072	Argument	\"menu-switch\"
>16073	PrimaryExpression	\"menu-switch\"
>16074	Callee	dsq -> sound -> playSfx
>16075	PtrMemberAccess	dsq -> sound -> playSfx
>16076	Identifier	playSfx
>16077	PtrMemberAccess	dsq -> sound
>16078	Identifier	sound
>16079	Identifier	dsq
>16080	ExpressionStatement	 
>16081	CallExpression	dsq -> sound -> playSfx ( \"shuffle\" )
>16082	ArgumentList	\"shuffle\"
>16083	Argument	\"shuffle\"
>16084	PrimaryExpression	\"shuffle\"
>16085	Callee	dsq -> sound -> playSfx
>16086	PtrMemberAccess	dsq -> sound -> playSfx
>16087	Identifier	playSfx
>16088	PtrMemberAccess	dsq -> sound
>16089	Identifier	sound
>16090	Identifier	dsq
>16091	ExpressionStatement	 
>16092	CallExpression	refreshFoodSlots ( false )
>16093	ArgumentList	false
>16094	Argument	false
>16095	Identifier	false
>16096	Callee	refreshFoodSlots
>16097	Identifier	refreshFoodSlots
>16098	ExpressionStatement	 
>16099	CallExpression	dsq -> continuity . sortFood ( )
>16100	ArgumentList	 
>16101	Callee	dsq -> continuity . sortFood
>16102	MemberAccess	dsq -> continuity . sortFood
>16103	Identifier	sortFood
>16104	PtrMemberAccess	dsq -> continuity
>16105	Identifier	continuity
>16106	Identifier	dsq
>16107	IfStatement	if ( dsq -> continuity . foodSortType >= MAX_FOODSORT )
>16108	ExpressionStatement	 
>16109	AssignmentExpr	dsq -> continuity . foodSortType = 0
>16110	PrimaryExpression	0
>16111	MemberAccess	dsq -> continuity . foodSortType
>16112	Identifier	foodSortType
>16113	PtrMemberAccess	dsq -> continuity
>16114	Identifier	continuity
>16115	Identifier	dsq
>16116	Condition	 
>16117	RelationalExpression	dsq -> continuity . foodSortType >= MAX_FOODSORT
>16118	Identifier	MAX_FOODSORT
>16119	MemberAccess	dsq -> continuity . foodSortType
>16120	Identifier	foodSortType
>16121	PtrMemberAccess	dsq -> continuity
>16122	Identifier	continuity
>16123	Identifier	dsq
>16124	ExpressionStatement	 
>16125	IncDecOp	dsq -> continuity . foodSortType ++
>16126	IncDec	++
>16127	MemberAccess	dsq -> continuity . foodSortType
>16128	Identifier	foodSortType
>16129	PtrMemberAccess	dsq -> continuity
>16130	Identifier	continuity
>16131	Identifier	dsq
>16132	ForStatement	for ( int i = 0 ; i < foodHolders . size ( ) ; i ++ )
>16133	CompoundStatement	 
>16134	IfStatement	if ( ing )
>16135	CompoundStatement	 
>16136	ExpressionStatement	 
>16137	AssignmentExpr	foodHolderNames [ i ] = ing -> name
>16138	PtrMemberAccess	ing -> name
>16139	Identifier	name
>16140	Identifier	ing
>16141	ArrayIndexing	foodHolderNames [ i ]
>16142	Identifier	i
>16143	Identifier	foodHolderNames
>16144	Condition	 
>16145	Identifier	ing
>16146	IdentifierDeclStatement	 
>16147	IdentifierDecl	* ing = foodHolders [ i ] -> getIngredient ( )
>16148	AssignmentExpr	* ing = foodHolders [ i ] -> getIngredient ( )
>16149	CallExpression	foodHolders [ i ] -> getIngredient ( )
>16150	ArgumentList	 
>16151	Callee	foodHolders [ i ] -> getIngredient
>16152	PtrMemberAccess	foodHolders [ i ] -> getIngredient
>16153	Identifier	getIngredient
>16154	ArrayIndexing	foodHolders [ i ]
>16155	Identifier	i
>16156	Identifier	foodHolders
>16157	Identifier	ing
>16158	Identifier	ing
>16159	IdentifierDeclType	IngredientData *
>16160	IncDecOp	 
>16161	IncDec	++
>16162	Identifier	i
>16163	Condition	 
>16164	RelationalExpression	i < foodHolders . size ( )
>16165	CallExpression	foodHolders . size ( )
>16166	ArgumentList	 
>16167	Callee	foodHolders . size
>16168	MemberAccess	foodHolders . size
>16169	Identifier	size
>16170	Identifier	foodHolders
>16171	Identifier	i
>16172	ForInit	 
>16173	IdentifierDeclStatement	int i = 0 ;
>16174	IdentifierDecl	i = 0
>16175	AssignmentExpr	i = 0
>16176	PrimaryExpression	0
>16177	Identifier	i
>16178	Identifier	i
>16179	IdentifierDeclType	int
>16180	ExpressionStatement	 
>16181	CallExpression	foodHolderNames . resize ( foodHolders . size ( ) )
>16182	ArgumentList	foodHolders . size ( )
>16183	Argument	foodHolders . size ( )
>16184	CallExpression	foodHolders . size ( )
>16185	ArgumentList	 
>16186	Callee	foodHolders . size
>16187	MemberAccess	foodHolders . size
>16188	Identifier	size
>16189	Identifier	foodHolders
>16190	Callee	foodHolderNames . resize
>16191	MemberAccess	foodHolderNames . resize
>16192	Identifier	resize
>16193	Identifier	foodHolderNames
>16194	IdentifierDeclStatement	 
>16195	IdentifierDecl	foodHolderNames
>16196	Identifier	foodHolderNames
>16197	IdentifierDeclType	std 
>16225	FunctionDef	Game 
>16226	ParameterList	 
>16227	ReturnType	void
>16228	CompoundStatement	 
>16229	ExpressionStatement	 
>16230	AssignmentExpr	menuBg -> alpha = 0
>16231	PrimaryExpression	0
>16232	PtrMemberAccess	menuBg -> alpha
>16233	Identifier	alpha
>16234	Identifier	menuBg
>16235	ExpressionStatement	 
>16236	CallExpression	menuBg -> addChild ( treasureCloseUp , PM_POINTER )
>16237	ArgumentList	treasureCloseUp
>16238	Argument	PM_POINTER
>16239	Identifier	PM_POINTER
>16240	Argument	treasureCloseUp
>16241	Identifier	treasureCloseUp
>16242	Callee	menuBg -> addChild
>16243	PtrMemberAccess	menuBg -> addChild
>16244	Identifier	addChild
>16245	Identifier	menuBg
>16246	ExpressionStatement	 
>16247	AssignmentExpr	treasureCloseUp -> alpha = 0
>16248	PrimaryExpression	0
>16249	PtrMemberAccess	treasureCloseUp -> alpha
>16250	Identifier	alpha
>16251	Identifier	treasureCloseUp
>16252	ExpressionStatement	 
>16253	AssignmentExpr	treasureCloseUp -> position = rightCenter
>16254	Identifier	rightCenter
>16255	PtrMemberAccess	treasureCloseUp -> position
>16256	Identifier	position
>16257	Identifier	treasureCloseUp
>16258	ExpressionStatement	 
>16259	AssignmentExpr	treasureCloseUp = new Quad ( )
>16260	UnaryExpression	new Quad ( )
>16261	Identifier	treasureCloseUp
>16262	ExpressionStatement	 
>16263	CallExpression	foodTips . push_back ( tip )
>16264	ArgumentList	tip
>16265	Argument	tip
>16266	Identifier	tip
>16267	Callee	foodTips . push_back
>16268	MemberAccess	foodTips . push_back
>16269	Identifier	push_back
>16270	Identifier	foodTips
>16271	ExpressionStatement	 
>16272	CallExpression	addRenderObject ( treasureDescription , LR_HUD )
>16273	ArgumentList	treasureDescription
>16274	Argument	LR_HUD
>16275	Identifier	LR_HUD
>16276	Argument	treasureDescription
>16277	Identifier	treasureDescription
>16278	Callee	addRenderObject
>16279	Identifier	addRenderObject
>16280	ExpressionStatement	 
>16281	AssignmentExpr	treasureDescription -> required = true
>16282	Identifier	true
>16283	PtrMemberAccess	treasureDescription -> required
>16284	Identifier	required
>16285	Identifier	treasureDescription
>16286	ExpressionStatement	 
>16287	CallExpression	treasureDescription -> setAreaFromCenter ( Vector ( 400 , 200 ) , 800 , 400 )
>16288	ArgumentList	Vector ( 400 , 200 )
>16289	Argument	400
>16290	PrimaryExpression	400
>16291	Argument	800
>16292	PrimaryExpression	800
>16293	Argument	Vector ( 400 , 200 )
>16294	CallExpression	Vector ( 400 , 200 )
>16295	ArgumentList	400
>16296	Argument	200
>16297	PrimaryExpression	200
>16298	Argument	400
>16299	PrimaryExpression	400
>16300	Callee	Vector
>16301	Identifier	Vector
>16302	Callee	treasureDescription -> setAreaFromCenter
>16303	PtrMemberAccess	treasureDescription -> setAreaFromCenter
>16304	Identifier	setAreaFromCenter
>16305	Identifier	treasureDescription
>16306	ExpressionStatement	 
>16307	AssignmentExpr	treasureDescription -> alpha = 0
>16308	PrimaryExpression	0
>16309	PtrMemberAccess	treasureDescription -> alpha
>16310	Identifier	alpha
>16311	Identifier	treasureDescription
>16312	ExpressionStatement	 
>16313	AssignmentExpr	treasureDescription = new ToolTip ( )
>16314	UnaryExpression	new ToolTip ( )
>16315	Identifier	treasureDescription
>16316	ExpressionStatement	 
>16317	CallExpression	menuBg -> addChild ( treasureLabel , PM_POINTER )
>16318	ArgumentList	treasureLabel
>16319	Argument	PM_POINTER
>16320	Identifier	PM_POINTER
>16321	Argument	treasureLabel
>16322	Identifier	treasureLabel
>16323	Callee	menuBg -> addChild
>16324	PtrMemberAccess	menuBg -> addChild
>16325	Identifier	addChild
>16326	Identifier	menuBg
>16327	CompoundStatement	 
>16328	ExpressionStatement	 
>16329	AssignmentExpr	treasureLabel -> scale = Vector ( 1 , 1 )
>16330	CallExpression	Vector ( 1 , 1 )
>16331	ArgumentList	1
>16332	Argument	1
>16333	PrimaryExpression	1
>16334	Argument	1
>16335	PrimaryExpression	1
>16336	Callee	Vector
>16337	Identifier	Vector
>16338	PtrMemberAccess	treasureLabel -> scale
>16339	Identifier	scale
>16340	Identifier	treasureLabel
>16341	ExpressionStatement	 
>16342	AssignmentExpr	treasureLabel -> position = center - Vector ( 0 , 16 )
>16343	AdditiveExpression	center - Vector ( 0 , 16 )
>16344	CallExpression	Vector ( 0 , 16 )
>16345	ArgumentList	0
>16346	Argument	16
>16347	PrimaryExpression	16
>16348	Argument	0
>16349	PrimaryExpression	0
>16350	Callee	Vector
>16351	Identifier	Vector
>16352	Identifier	center
>16353	PtrMemberAccess	treasureLabel -> position
>16354	Identifier	position
>16355	Identifier	treasureLabel
>16356	ExpressionStatement	 
>16357	CallExpression	treasureLabel -> setFontSize ( 20 )
>16358	ArgumentList	20
>16359	Argument	20
>16360	PrimaryExpression	20
>16361	Callee	treasureLabel -> setFontSize
>16362	PtrMemberAccess	treasureLabel -> setFontSize
>16363	Identifier	setFontSize
>16364	Identifier	treasureLabel
>16365	ExpressionStatement	 
>16366	AssignmentExpr	treasureLabel -> followCamera = 1
>16367	PrimaryExpression	1
>16368	PtrMemberAccess	treasureLabel -> followCamera
>16369	Identifier	followCamera
>16370	Identifier	treasureLabel
>16371	ExpressionStatement	 
>16372	CallExpression	treasureLabel -> setAlign ( ALIGN_CENTER )
>16373	ArgumentList	ALIGN_CENTER
>16374	Argument	ALIGN_CENTER
>16375	Identifier	ALIGN_CENTER
>16376	Callee	treasureLabel -> setAlign
>16377	PtrMemberAccess	treasureLabel -> setAlign
>16378	Identifier	setAlign
>16379	Identifier	treasureLabel
>16380	ExpressionStatement	 
>16381	AssignmentExpr	treasureLabel -> alpha = 0
>16382	PrimaryExpression	0
>16383	PtrMemberAccess	treasureLabel -> alpha
>16384	Identifier	alpha
>16385	Identifier	treasureLabel
>16386	ExpressionStatement	 
>16387	AssignmentExpr	treasureLabel = new BitmapText ( & dsq -> smallFont )
>16388	UnaryOp	& dsq -> smallFont
>16389	PtrMemberAccess	dsq -> smallFont
>16390	Identifier	smallFont
>16391	Identifier	dsq
>16392	UnaryOperator	&
>16393	Identifier	treasureLabel
>16394	ForStatement	for ( i = 0 ; i < treasureSlots . size ( ) ; i ++ )
>16395	CompoundStatement	 
>16396	ExpressionStatement	 
>16397	CallExpression	addRenderObject ( treasureSlots [ i ] , LR_MENU )
>16398	ArgumentList	treasureSlots [ i ]
>16399	Argument	LR_MENU
>16400	Identifier	LR_MENU
>16401	Argument	treasureSlots [ i ]
>16402	ArrayIndexing	treasureSlots [ i ]
>16403	Identifier	i
>16404	Identifier	treasureSlots
>16405	Callee	addRenderObject
>16406	Identifier	addRenderObject
>16407	ExpressionStatement	 
>16408	AssignmentExpr	treasureSlots [ i ] -> followCamera = 1
>16409	PrimaryExpression	1
>16410	PtrMemberAccess	treasureSlots [ i ] -> followCamera
>16411	Identifier	followCamera
>16412	ArrayIndexing	treasureSlots [ i ]
>16413	Identifier	i
>16414	Identifier	treasureSlots
>16415	ExpressionStatement	 
>16416	AssignmentExpr	treasureSlots [ i ] -> alphaMod = 0
>16417	PrimaryExpression	0
>16418	PtrMemberAccess	treasureSlots [ i ] -> alphaMod
>16419	Identifier	alphaMod
>16420	ArrayIndexing	treasureSlots [ i ]
>16421	Identifier	i
>16422	Identifier	treasureSlots
>16423	ExpressionStatement	 
>16424	AssignmentExpr	treasureSlots [ i ] -> position = worldCenter + Vector ( sinf ( angle ) , cosf ( angle ) ) * treasureSlotRadius
>16425	AdditiveExpression	worldCenter + Vector ( sinf ( angle ) , cosf ( angle ) ) * treasureSlotRadius
>16426	MultiplicativeExpression	Vector ( sinf ( angle ) , cosf ( angle ) ) * treasureSlotRadius
>16427	Identifier	treasureSlotRadius
>16428	CallExpression	Vector ( sinf ( angle ) , cosf ( angle ) )
>16429	ArgumentList	sinf ( angle )
>16430	Argument	cosf ( angle )
>16431	CallExpression	cosf ( angle )
>16432	ArgumentList	angle
>16433	Argument	angle
>16434	Identifier	angle
>16435	Callee	cosf
>16436	Identifier	cosf
>16437	Argument	sinf ( angle )
>16438	CallExpression	sinf ( angle )
>16439	ArgumentList	angle
>16440	Argument	angle
>16441	Identifier	angle
>16442	Callee	sinf
>16443	Identifier	sinf
>16444	Callee	Vector
>16445	Identifier	Vector
>16446	Identifier	worldCenter
>16447	PtrMemberAccess	treasureSlots [ i ] -> position
>16448	Identifier	position
>16449	ArrayIndexing	treasureSlots [ i ]
>16450	Identifier	i
>16451	Identifier	treasureSlots
>16452	IdentifierDeclStatement	 
>16453	IdentifierDecl	angle = ( float ( i ) / float ( treasureSlots . size ( ) ) ) * PI * 2
>16454	AssignmentExpr	angle = ( float ( i ) / float ( treasureSlots . size ( ) ) ) * PI * 2
>16455	MultiplicativeExpression	( float ( i ) / float ( treasureSlots . size ( ) ) ) * PI * 2
>16456	MultiplicativeExpression	PI * 2
>16457	PrimaryExpression	2
>16458	Identifier	PI
>16459	MultiplicativeExpression	float ( i ) / float ( treasureSlots . size ( ) )
>16460	CallExpression	float ( treasureSlots . size ( ) )
>16461	ArgumentList	treasureSlots . size ( )
>16462	Argument	treasureSlots . size ( )
>16463	CallExpression	treasureSlots . size ( )
>16464	ArgumentList	 
>16465	Callee	treasureSlots . size
>16466	MemberAccess	treasureSlots . size
>16467	Identifier	size
>16468	Identifier	treasureSlots
>16469	Callee	float
>16470	Identifier	float
>16471	CallExpression	float ( i )
>16472	ArgumentList	i
>16473	Argument	i
>16474	Identifier	i
>16475	Callee	float
>16476	Identifier	float
>16477	Identifier	angle
>16478	Identifier	angle
>16479	IdentifierDeclType	float
>16480	ExpressionStatement	 
>16481	AssignmentExpr	treasureSlots [ i ] = new TreasureSlot ( i )
>16482	Identifier	i
>16483	ArrayIndexing	treasureSlots [ i ]
>16484	Identifier	i
>16485	Identifier	treasureSlots
>16486	IncDecOp	 
>16487	IncDec	++
>16488	Identifier	i
>16489	Condition	 
>16490	RelationalExpression	i < treasureSlots . size ( )
>16491	CallExpression	treasureSlots . size ( )
>16492	ArgumentList	 
>16493	Callee	treasureSlots . size
>16494	MemberAccess	treasureSlots . size
>16495	Identifier	size
>16496	Identifier	treasureSlots
>16497	Identifier	i
>16498	ForInit	 
>16499	AssignmentExpr	i = 0
>16500	PrimaryExpression	0
>16501	Identifier	i
>16502	ExpressionStatement	 
>16503	CallExpression	treasureSlots . resize ( treasurePageSize )
>16504	ArgumentList	treasurePageSize
>16505	Argument	treasurePageSize
>16506	Identifier	treasurePageSize
>16507	Callee	treasureSlots . resize
>16508	MemberAccess	treasureSlots . resize
>16509	Identifier	resize
>16510	Identifier	treasureSlots
>16511	IdentifierDeclStatement	 
>16512	IdentifierDecl	treasureSlotRadius = 96
>16513	AssignmentExpr	treasureSlotRadius = 96
>16514	PrimaryExpression	96
>16515	Identifier	treasureSlotRadius
>16516	Identifier	treasureSlotRadius
>16517	IdentifierDeclType	int
>16518	ExpressionStatement	 
>16519	CallExpression	menuBg -> addChild ( foodDescription , PM_POINTER )
>16520	ArgumentList	foodDescription
>16521	Argument	PM_POINTER
>16522	Identifier	PM_POINTER
>16523	Argument	foodDescription
>16524	Identifier	foodDescription
>16525	Callee	menuBg -> addChild
>16526	PtrMemberAccess	menuBg -> addChild
>16527	Identifier	addChild
>16528	Identifier	menuBg
>16529	CompoundStatement	 
>16530	ExpressionStatement	 
>16531	CallExpression	foodDescription -> setWidth ( 240 )
>16532	ArgumentList	240
>16533	Argument	240
>16534	PrimaryExpression	240
>16535	Callee	foodDescription -> setWidth
>16536	PtrMemberAccess	foodDescription -> setWidth
>16537	Identifier	setWidth
>16538	Identifier	foodDescription
>16539	ExpressionStatement	 
>16540	AssignmentExpr	foodDescription -> scale = Vector ( 0.8 , 0.8 )
>16541	CallExpression	Vector ( 0.8 , 0.8 )
>16542	ArgumentList	0.8
>16543	Argument	0.8
>16544	PrimaryExpression	0.8
>16545	Argument	0.8
>16546	PrimaryExpression	0.8
>16547	Callee	Vector
>16548	Identifier	Vector
>16549	PtrMemberAccess	foodDescription -> scale
>16550	Identifier	scale
>16551	Identifier	foodDescription
>16552	ExpressionStatement	 
>16553	AssignmentExpr	foodDescription -> position = center + Vector ( 0 , 8 ) + Vector ( 0 , - 32 )
>16554	AdditiveExpression	center + Vector ( 0 , 8 ) + Vector ( 0 , - 32 )
>16555	AdditiveExpression	Vector ( 0 , 8 ) + Vector ( 0 , - 32 )
>16556	CallExpression	Vector ( 0 , - 32 )
>16557	ArgumentList	0
>16558	Argument	- 32
>16559	UnaryOp	- 32
>16560	PrimaryExpression	32
>16561	UnaryOperator	-
>16562	Argument	0
>16563	PrimaryExpression	0
>16564	Callee	Vector
>16565	Identifier	Vector
>16566	CallExpression	Vector ( 0 , 8 )
>16567	ArgumentList	0
>16568	Argument	8
>16569	PrimaryExpression	8
>16570	Argument	0
>16571	PrimaryExpression	0
>16572	Callee	Vector
>16573	Identifier	Vector
>16574	Identifier	center
>16575	PtrMemberAccess	foodDescription -> position
>16576	Identifier	position
>16577	Identifier	foodDescription
>16578	ExpressionStatement	 
>16579	AssignmentExpr	foodDescription -> followCamera = 1
>16580	PrimaryExpression	1
>16581	PtrMemberAccess	foodDescription -> followCamera
>16582	Identifier	followCamera
>16583	Identifier	foodDescription
>16584	ExpressionStatement	 
>16585	CallExpression	foodDescription -> setAlign ( ALIGN_CENTER )
>16586	ArgumentList	ALIGN_CENTER
>16587	Argument	ALIGN_CENTER
>16588	Identifier	ALIGN_CENTER
>16589	Callee	foodDescription -> setAlign
>16590	PtrMemberAccess	foodDescription -> setAlign
>16591	Identifier	setAlign
>16592	Identifier	foodDescription
>16593	ExpressionStatement	 
>16594	AssignmentExpr	foodDescription -> alpha = 0
>16595	PrimaryExpression	0
>16596	PtrMemberAccess	foodDescription -> alpha
>16597	Identifier	alpha
>16598	Identifier	foodDescription
>16599	ExpressionStatement	 
>16600	AssignmentExpr	foodDescription = new BitmapText ( & dsq -> smallFont )
>16601	UnaryOp	& dsq -> smallFont
>16602	PtrMemberAccess	dsq -> smallFont
>16603	Identifier	smallFont
>16604	Identifier	dsq
>16605	UnaryOperator	&
>16606	Identifier	foodDescription
>16607	ExpressionStatement	 
>16608	CallExpression	menuBg -> addChild ( foodLabel , PM_POINTER )
>16609	ArgumentList	foodLabel
>16610	Argument	PM_POINTER
>16611	Identifier	PM_POINTER
>16612	Argument	foodLabel
>16613	Identifier	foodLabel
>16614	Callee	menuBg -> addChild
>16615	PtrMemberAccess	menuBg -> addChild
>16616	Identifier	addChild
>16617	Identifier	menuBg
>16618	CompoundStatement	 
>16619	ExpressionStatement	 
>16620	AssignmentExpr	foodLabel -> scale = Vector ( 1 , 1 )
>16621	CallExpression	Vector ( 1 , 1 )
>16622	ArgumentList	1
>16623	Argument	1
>16624	PrimaryExpression	1
>16625	Argument	1
>16626	PrimaryExpression	1
>16627	Callee	Vector
>16628	Identifier	Vector
>16629	PtrMemberAccess	foodLabel -> scale
>16630	Identifier	scale
>16631	Identifier	foodLabel
>16632	ExpressionStatement	 
>16633	AssignmentExpr	foodLabel -> position = center - Vector ( 0 , 16 ) + Vector ( 0 , - 32 )
>16634	AdditiveExpression	center - Vector ( 0 , 16 ) + Vector ( 0 , - 32 )
>16635	AdditiveExpression	Vector ( 0 , 16 ) + Vector ( 0 , - 32 )
>16636	CallExpression	Vector ( 0 , - 32 )
>16637	ArgumentList	0
>16638	Argument	- 32
>16639	UnaryOp	- 32
>16640	PrimaryExpression	32
>16641	UnaryOperator	-
>16642	Argument	0
>16643	PrimaryExpression	0
>16644	Callee	Vector
>16645	Identifier	Vector
>16646	CallExpression	Vector ( 0 , 16 )
>16647	ArgumentList	0
>16648	Argument	16
>16649	PrimaryExpression	16
>16650	Argument	0
>16651	PrimaryExpression	0
>16652	Callee	Vector
>16653	Identifier	Vector
>16654	Identifier	center
>16655	PtrMemberAccess	foodLabel -> position
>16656	Identifier	position
>16657	Identifier	foodLabel
>16658	ExpressionStatement	 
>16659	CallExpression	foodLabel -> setFontSize ( 20 )
>16660	ArgumentList	20
>16661	Argument	20
>16662	PrimaryExpression	20
>16663	Callee	foodLabel -> setFontSize
>16664	PtrMemberAccess	foodLabel -> setFontSize
>16665	Identifier	setFontSize
>16666	Identifier	foodLabel
>16667	ExpressionStatement	 
>16668	AssignmentExpr	foodLabel -> followCamera = 1
>16669	PrimaryExpression	1
>16670	PtrMemberAccess	foodLabel -> followCamera
>16671	Identifier	followCamera
>16672	Identifier	foodLabel
>16673	ExpressionStatement	 
>16674	CallExpression	foodLabel -> setAlign ( ALIGN_CENTER )
>16675	ArgumentList	ALIGN_CENTER
>16676	Argument	ALIGN_CENTER
>16677	Identifier	ALIGN_CENTER
>16678	Callee	foodLabel -> setAlign
>16679	PtrMemberAccess	foodLabel -> setAlign
>16680	Identifier	setAlign
>16681	Identifier	foodLabel
>16682	ExpressionStatement	 
>16683	AssignmentExpr	foodLabel -> alpha = 0
>16684	PrimaryExpression	0
>16685	PtrMemberAccess	foodLabel -> alpha
>16686	Identifier	alpha
>16687	Identifier	foodLabel
>16688	ExpressionStatement	 
>16689	AssignmentExpr	foodLabel = new BitmapText ( & dsq -> smallFont )
>16690	UnaryOp	& dsq -> smallFont
>16691	PtrMemberAccess	dsq -> smallFont
>16692	Identifier	smallFont
>16693	Identifier	dsq
>16694	UnaryOperator	&
>16695	Identifier	foodLabel
>16696	ForStatement	for ( i = 0 ; i < foodSlots . size ( ) ; i ++ )
>16697	CompoundStatement	 
>16698	ExpressionStatement	 
>16699	CallExpression	addRenderObject ( foodSlots [ i ] , LR_HUD2 )
>16700	ArgumentList	foodSlots [ i ]
>16701	Argument	LR_HUD2
>16702	Identifier	LR_HUD2
>16703	Argument	foodSlots [ i ]
>16704	ArrayIndexing	foodSlots [ i ]
>16705	Identifier	i
>16706	Identifier	foodSlots
>16707	Callee	addRenderObject
>16708	Identifier	addRenderObject
>16709	ExpressionStatement	 
>16710	AssignmentExpr	foodSlots [ i ] -> scaleFactor = 0.75
>16711	PrimaryExpression	0.75
>16712	PtrMemberAccess	foodSlots [ i ] -> scaleFactor
>16713	Identifier	scaleFactor
>16714	ArrayIndexing	foodSlots [ i ]
>16715	Identifier	i
>16716	Identifier	foodSlots
>16717	ExpressionStatement	 
>16718	AssignmentExpr	foodSlots [ i ] -> followCamera = 1
>16719	PrimaryExpression	1
>16720	PtrMemberAccess	foodSlots [ i ] -> followCamera
>16721	Identifier	followCamera
>16722	ArrayIndexing	foodSlots [ i ]
>16723	Identifier	i
>16724	Identifier	foodSlots
>16725	ExpressionStatement	 
>16726	AssignmentExpr	foodSlots [ i ] -> alphaMod = 0
>16727	PrimaryExpression	0
>16728	PtrMemberAccess	foodSlots [ i ] -> alphaMod
>16729	Identifier	alphaMod
>16730	ArrayIndexing	foodSlots [ i ]
>16731	Identifier	i
>16732	Identifier	foodSlots
>16733	ExpressionStatement	 
>16734	IncDecOp	food ++
>16735	IncDec	++
>16736	Identifier	food
>16737	ExpressionStatement	 
>16738	CallExpression	foodSlots [ i ] -> setOriginalPosition ( foodSlots [ i ] -> position )
>16739	ArgumentList	foodSlots [ i ] -> position
>16740	Argument	foodSlots [ i ] -> position
>16741	PtrMemberAccess	foodSlots [ i ] -> position
>16742	Identifier	position
>16743	ArrayIndexing	foodSlots [ i ]
>16744	Identifier	i
>16745	Identifier	foodSlots
>16746	Callee	foodSlots [ i ] -> setOriginalPosition
>16747	PtrMemberAccess	foodSlots [ i ] -> setOriginalPosition
>16748	Identifier	setOriginalPosition
>16749	ArrayIndexing	foodSlots [ i ]
>16750	Identifier	i
>16751	Identifier	foodSlots
>16752	ExpressionStatement	 
>16753	AssignmentExpr	foodSlots [ i ] -> position = worldCenter + Vector ( sinf ( angle ) , cosf ( angle ) ) * foodSlotRadius
>16754	AdditiveExpression	worldCenter + Vector ( sinf ( angle ) , cosf ( angle ) ) * foodSlotRadius
>16755	MultiplicativeExpression	Vector ( sinf ( angle ) , cosf ( angle ) ) * foodSlotRadius
>16756	Identifier	foodSlotRadius
>16757	CallExpression	Vector ( sinf ( angle ) , cosf ( angle ) )
>16758	ArgumentList	sinf ( angle )
>16759	Argument	cosf ( angle )
>16760	CallExpression	cosf ( angle )
>16761	ArgumentList	angle
>16762	Argument	angle
>16763	Identifier	angle
>16764	Callee	cosf
>16765	Identifier	cosf
>16766	Argument	sinf ( angle )
>16767	CallExpression	sinf ( angle )
>16768	ArgumentList	angle
>16769	Argument	angle
>16770	Identifier	angle
>16771	Callee	sinf
>16772	Identifier	sinf
>16773	Callee	Vector
>16774	Identifier	Vector
>16775	Identifier	worldCenter
>16776	PtrMemberAccess	foodSlots [ i ] -> position
>16777	Identifier	position
>16778	ArrayIndexing	foodSlots [ i ]
>16779	Identifier	i
>16780	Identifier	foodSlots
>16781	IdentifierDeclStatement	 
>16782	IdentifierDecl	angle = ( float ( food ) / float ( foodSlots . size ( ) ) ) * PI * 2
>16783	AssignmentExpr	angle = ( float ( food ) / float ( foodSlots . size ( ) ) ) * PI * 2
>16784	MultiplicativeExpression	( float ( food ) / float ( foodSlots . size ( ) ) ) * PI * 2
>16785	MultiplicativeExpression	PI * 2
>16786	PrimaryExpression	2
>16787	Identifier	PI
>16788	MultiplicativeExpression	float ( food ) / float ( foodSlots . size ( ) )
>16789	CallExpression	float ( foodSlots . size ( ) )
>16790	ArgumentList	foodSlots . size ( )
>16791	Argument	foodSlots . size ( )
>16792	CallExpression	foodSlots . size ( )
>16793	ArgumentList	 
>16794	Callee	foodSlots . size
>16795	MemberAccess	foodSlots . size
>16796	Identifier	size
>16797	Identifier	foodSlots
>16798	Callee	float
>16799	Identifier	float
>16800	CallExpression	float ( food )
>16801	ArgumentList	food
>16802	Argument	food
>16803	Identifier	food
>16804	Callee	float
>16805	Identifier	float
>16806	Identifier	angle
>16807	Identifier	angle
>16808	IdentifierDeclType	float
>16809	ExpressionStatement	 
>16810	AssignmentExpr	foodSlots [ i ] = new FoodSlot ( i )
>16811	Identifier	i
>16812	ArrayIndexing	foodSlots [ i ]
>16813	Identifier	i
>16814	Identifier	foodSlots
>16815	IncDecOp	 
>16816	IncDec	++
>16817	Identifier	i
>16818	Condition	 
>16819	RelationalExpression	i < foodSlots . size ( )
>16820	CallExpression	foodSlots . size ( )
>16821	ArgumentList	 
>16822	Callee	foodSlots . size
>16823	MemberAccess	foodSlots . size
>16824	Identifier	size
>16825	Identifier	foodSlots
>16826	Identifier	i
>16827	ForInit	 
>16828	AssignmentExpr	i = 0
>16829	PrimaryExpression	0
>16830	Identifier	i
>16831	IdentifierDeclStatement	 
>16832	IdentifierDecl	foodSlotRadius = 96
>16833	AssignmentExpr	foodSlotRadius = 96
>16834	PrimaryExpression	96
>16835	Identifier	foodSlotRadius
>16836	Identifier	foodSlotRadius
>16837	IdentifierDeclType	int
>16838	IdentifierDeclStatement	 
>16839	IdentifierDecl	worldCenter ( 222 , 252 )
>16840	Expression	222 , 252
>16841	PrimaryExpression	252
>16842	PrimaryExpression	222
>16843	Identifier	worldCenter
>16844	IdentifierDeclType	Vector
>16845	ExpressionStatement	 
>16846	CallExpression	foodSlots . resize ( foodPageSize )
>16847	ArgumentList	foodPageSize
>16848	Argument	foodPageSize
>16849	Identifier	foodPageSize
>16850	Callee	foodSlots . resize
>16851	MemberAccess	foodSlots . resize
>16852	Identifier	resize
>16853	Identifier	foodSlots
>16854	ExpressionStatement	 
>16855	CallExpression	( ( AquariaMenuItem * ) menu [ 4 ] ) -> setDirMove ( DIR_UP , ( ( AquariaMenuItem * ) menu [ 6 ] ) )
>16856	ArgumentList	DIR_UP
>16857	Argument	( AquariaMenuItem * ) menu [ 6 ]
>16858	CastExpression	( AquariaMenuItem * ) menu [ 6 ]
>16859	ArrayIndexing	menu [ 6 ]
>16860	PrimaryExpression	6
>16861	Identifier	menu
>16862	CastTarget	AquariaMenuItem *
>16863	Argument	DIR_UP
>16864	Identifier	DIR_UP
>16865	Callee	( ( AquariaMenuItem * ) menu [ 4 ] ) -> setDirMove
>16866	PtrMemberAccess	( ( AquariaMenuItem * ) menu [ 4 ] ) -> setDirMove
>16867	Identifier	setDirMove
>16868	CastExpression	( AquariaMenuItem * ) menu [ 4 ]
>16869	ArrayIndexing	menu [ 4 ]
>16870	PrimaryExpression	4
>16871	Identifier	menu
>16872	CastTarget	AquariaMenuItem *
>16873	ExpressionStatement	 
>16874	CallExpression	( ( AquariaMenuItem * ) menu [ 1 ] ) -> setDirMove ( DIR_UP , ( ( AquariaMenuItem * ) menu [ 8 ] ) )
>16875	ArgumentList	DIR_UP
>16876	Argument	( AquariaMenuItem * ) menu [ 8 ]
>16877	CastExpression	( AquariaMenuItem * ) menu [ 8 ]
>16878	ArrayIndexing	menu [ 8 ]
>16879	PrimaryExpression	8
>16880	Identifier	menu
>16881	CastTarget	AquariaMenuItem *
>16882	Argument	DIR_UP
>16883	Identifier	DIR_UP
>16884	Callee	( ( AquariaMenuItem * ) menu [ 1 ] ) -> setDirMove
>16885	PtrMemberAccess	( ( AquariaMenuItem * ) menu [ 1 ] ) -> setDirMove
>16886	Identifier	setDirMove
>16887	CastExpression	( AquariaMenuItem * ) menu [ 1 ]
>16888	ArrayIndexing	menu [ 1 ]
>16889	PrimaryExpression	1
>16890	Identifier	menu
>16891	CastTarget	AquariaMenuItem *
>16892	ExpressionStatement	 
>16893	CallExpression	( ( AquariaMenuItem * ) menu [ 0 ] ) -> setDirMove ( DIR_UP , ( ( AquariaMenuItem * ) menu [ 5 ] ) )
>16894	ArgumentList	DIR_UP
>16895	Argument	( AquariaMenuItem * ) menu [ 5 ]
>16896	CastExpression	( AquariaMenuItem * ) menu [ 5 ]
>16897	ArrayIndexing	menu [ 5 ]
>16898	PrimaryExpression	5
>16899	Identifier	menu
>16900	CastTarget	AquariaMenuItem *
>16901	Argument	DIR_UP
>16902	Identifier	DIR_UP
>16903	Callee	( ( AquariaMenuItem * ) menu [ 0 ] ) -> setDirMove
>16904	PtrMemberAccess	( ( AquariaMenuItem * ) menu [ 0 ] ) -> setDirMove
>16905	Identifier	setDirMove
>16906	CastExpression	( AquariaMenuItem * ) menu [ 0 ]
>16907	ArrayIndexing	menu [ 0 ]
>16908	PrimaryExpression	0
>16909	Identifier	menu
>16910	CastTarget	AquariaMenuItem *
>16911	ExpressionStatement	 
>16912	CallExpression	( ( AquariaMenuItem * ) menu [ 8 ] ) -> setDirMove ( DIR_DOWN , ( ( AquariaMenuItem * ) menu [ 1 ] ) )
>16913	ArgumentList	DIR_DOWN
>16914	Argument	( AquariaMenuItem * ) menu [ 1 ]
>16915	CastExpression	( AquariaMenuItem * ) menu [ 1 ]
>16916	ArrayIndexing	menu [ 1 ]
>16917	PrimaryExpression	1
>16918	Identifier	menu
>16919	CastTarget	AquariaMenuItem *
>16920	Argument	DIR_DOWN
>16921	Identifier	DIR_DOWN
>16922	Callee	( ( AquariaMenuItem * ) menu [ 8 ] ) -> setDirMove
>16923	PtrMemberAccess	( ( AquariaMenuItem * ) menu [ 8 ] ) -> setDirMove
>16924	Identifier	setDirMove
>16925	CastExpression	( AquariaMenuItem * ) menu [ 8 ]
>16926	ArrayIndexing	menu [ 8 ]
>16927	PrimaryExpression	8
>16928	Identifier	menu
>16929	CastTarget	AquariaMenuItem *
>16930	ExpressionStatement	 
>16931	CallExpression	( ( AquariaMenuItem * ) menu [ 7 ] ) -> setDirMove ( DIR_DOWN , ( ( AquariaMenuItem * ) menu [ 4 ] ) )
>16932	ArgumentList	DIR_DOWN
>16933	Argument	( AquariaMenuItem * ) menu [ 4 ]
>16934	CastExpression	( AquariaMenuItem * ) menu [ 4 ]
>16935	ArrayIndexing	menu [ 4 ]
>16936	PrimaryExpression	4
>16937	Identifier	menu
>16938	CastTarget	AquariaMenuItem *
>16939	Argument	DIR_DOWN
>16940	Identifier	DIR_DOWN
>16941	Callee	( ( AquariaMenuItem * ) menu [ 7 ] ) -> setDirMove
>16942	PtrMemberAccess	( ( AquariaMenuItem * ) menu [ 7 ] ) -> setDirMove
>16943	Identifier	setDirMove
>16944	CastExpression	( AquariaMenuItem * ) menu [ 7 ]
>16945	ArrayIndexing	menu [ 7 ]
>16946	PrimaryExpression	7
>16947	Identifier	menu
>16948	CastTarget	AquariaMenuItem *
>16949	ExpressionStatement	 
>16950	CallExpression	( ( AquariaMenuItem * ) menu [ 6 ] ) -> setDirMove ( DIR_DOWN , ( ( AquariaMenuItem * ) menu [ 4 ] ) )
>16951	ArgumentList	DIR_DOWN
>16952	Argument	( AquariaMenuItem * ) menu [ 4 ]
>16953	CastExpression	( AquariaMenuItem * ) menu [ 4 ]
>16954	ArrayIndexing	menu [ 4 ]
>16955	PrimaryExpression	4
>16956	Identifier	menu
>16957	CastTarget	AquariaMenuItem *
>16958	Argument	DIR_DOWN
>16959	Identifier	DIR_DOWN
>16960	Callee	( ( AquariaMenuItem * ) menu [ 6 ] ) -> setDirMove
>16961	PtrMemberAccess	( ( AquariaMenuItem * ) menu [ 6 ] ) -> setDirMove
>16962	Identifier	setDirMove
>16963	CastExpression	( AquariaMenuItem * ) menu [ 6 ]
>16964	ArrayIndexing	menu [ 6 ]
>16965	PrimaryExpression	6
>16966	Identifier	menu
>16967	CastTarget	AquariaMenuItem *
>16968	ExpressionStatement	 
>16969	CallExpression	( ( AquariaMenuItem * ) menu [ 5 ] ) -> setDirMove ( DIR_DOWN , ( ( AquariaMenuItem * ) menu [ 0 ] ) )
>16970	ArgumentList	DIR_DOWN
>16971	Argument	( AquariaMenuItem * ) menu [ 0 ]
>16972	CastExpression	( AquariaMenuItem * ) menu [ 0 ]
>16973	ArrayIndexing	menu [ 0 ]
>16974	PrimaryExpression	0
>16975	Identifier	menu
>16976	CastTarget	AquariaMenuItem *
>16977	Argument	DIR_DOWN
>16978	Identifier	DIR_DOWN
>16979	Callee	( ( AquariaMenuItem * ) menu [ 5 ] ) -> setDirMove
>16980	PtrMemberAccess	( ( AquariaMenuItem * ) menu [ 5 ] ) -> setDirMove
>16981	Identifier	setDirMove
>16982	CastExpression	( AquariaMenuItem * ) menu [ 5 ]
>16983	ArrayIndexing	menu [ 5 ]
>16984	PrimaryExpression	5
>16985	Identifier	menu
>16986	CastTarget	AquariaMenuItem *
>16987	ForStatement	for ( i = 0 ; i < menu . size ( ) ; i ++ )
>16988	CompoundStatement	 
>16989	ExpressionStatement	 
>16990	AssignmentExpr	menu [ i ] -> alpha = 0
>16991	PrimaryExpression	0
>16992	PtrMemberAccess	menu [ i ] -> alpha
>16993	Identifier	alpha
>16994	ArrayIndexing	menu [ i ]
>16995	Identifier	i
>16996	Identifier	menu
>16997	ExpressionStatement	 
>16998	CallExpression	addRenderObject ( menu [ i ] , LR_MENU )
>16999	ArgumentList	menu [ i ]
>17000	Argument	LR_MENU
>17001	Identifier	LR_MENU
>17002	Argument	menu [ i ]
>17003	ArrayIndexing	menu [ i ]
>17004	Identifier	i
>17005	Identifier	menu
>17006	Callee	addRenderObject
>17007	Identifier	addRenderObject
>17008	IncDecOp	 
>17009	IncDec	++
>17010	Identifier	i
>17011	Condition	 
>17012	RelationalExpression	i < menu . size ( )
>17013	CallExpression	menu . size ( )
>17014	ArgumentList	 
>17015	Callee	menu . size
>17016	MemberAccess	menu . size
>17017	Identifier	size
>17018	Identifier	menu
>17019	Identifier	i
>17020	ForInit	 
>17021	AssignmentExpr	i = 0
>17022	PrimaryExpression	0
>17023	Identifier	i
>17024	ExpressionStatement	 
>17025	AssignmentExpr	menu [ 9 ] -> position = Vector ( 400 + 60 * 3 , 410 )
>17026	CallExpression	Vector ( 400 + 60 * 3 , 410 )
>17027	ArgumentList	400 + 60 * 3
>17028	Argument	410
>17029	PrimaryExpression	410
>17030	Argument	400 + 60 * 3
>17031	AdditiveExpression	400 + 60 * 3
>17032	MultiplicativeExpression	60 * 3
>17033	PrimaryExpression	3
>17034	PrimaryExpression	60
>17035	PrimaryExpression	400
>17036	Callee	Vector
>17037	Identifier	Vector
>17038	PtrMemberAccess	menu [ 9 ] -> position
>17039	Identifier	position
>17040	ArrayIndexing	menu [ 9 ]
>17041	PrimaryExpression	9
>17042	Identifier	menu
>17043	ExpressionStatement	 
>17044	CallExpression	menu [ 9 ] -> useSound ( \"Click\" )
>17045	ArgumentList	\"Click\"
>17046	Argument	\"Click\"
>17047	PrimaryExpression	\"Click\"
>17048	Callee	menu [ 9 ] -> useSound
>17049	PtrMemberAccess	menu [ 9 ] -> useSound
>17050	Identifier	useSound
>17051	ArrayIndexing	menu [ 9 ]
>17052	PrimaryExpression	9
>17053	Identifier	menu
>17054	ExpressionStatement	 
>17055	CallExpression	menu [ 9 ] -> useGlow ( \"particles/glow\" , gs , gs )
>17056	ArgumentList	\"particles/glow\"
>17057	Argument	gs
>17058	Identifier	gs
>17059	Argument	gs
>17060	Identifier	gs
>17061	Argument	\"particles/glow\"
>17062	PrimaryExpression	\"particles/glow\"
>17063	Callee	menu [ 9 ] -> useGlow
>17064	PtrMemberAccess	menu [ 9 ] -> useGlow
>17065	Identifier	useGlow
>17066	ArrayIndexing	menu [ 9 ]
>17067	PrimaryExpression	9
>17068	Identifier	menu
>17069	ExpressionStatement	 
>17070	CallExpression	menu [ 9 ] -> useQuad ( \"gui/icon-help\" )
>17071	ArgumentList	\"gui/icon-help\"
>17072	Argument	\"gui/icon-help\"
>17073	PrimaryExpression	\"gui/icon-help\"
>17074	Callee	menu [ 9 ] -> useQuad
>17075	PtrMemberAccess	menu [ 9 ] -> useQuad
>17076	Identifier	useQuad
>17077	ArrayIndexing	menu [ 9 ]
>17078	PrimaryExpression	9
>17079	Identifier	menu
>17080	ExpressionStatement	 
>17081	CallExpression	menu [ 9 ] -> event . set ( MakeFunctionEvent ( Game , toggleHelpScreen ) )
>17082	ArgumentList	MakeFunctionEvent ( Game , toggleHelpScreen )
>17083	Argument	MakeFunctionEvent ( Game , toggleHelpScreen )
>17084	CallExpression	MakeFunctionEvent ( Game , toggleHelpScreen )
>17085	ArgumentList	Game
>17086	Argument	toggleHelpScreen
>17087	Identifier	toggleHelpScreen
>17088	Argument	Game
>17089	Identifier	Game
>17090	Callee	MakeFunctionEvent
>17091	Identifier	MakeFunctionEvent
>17092	Callee	menu [ 9 ] -> event . set
>17093	MemberAccess	menu [ 9 ] -> event . set
>17094	Identifier	set
>17095	PtrMemberAccess	menu [ 9 ] -> event
>17096	Identifier	event
>17097	ArrayIndexing	menu [ 9 ]
>17098	PrimaryExpression	9
>17099	Identifier	menu
>17100	ExpressionStatement	 
>17101	AssignmentExpr	menu [ 8 ] -> position = Vector ( 400 + 60 , 350 )
>17102	CallExpression	Vector ( 400 + 60 , 350 )
>17103	ArgumentList	400 + 60
>17104	Argument	350
>17105	PrimaryExpression	350
>17106	Argument	400 + 60
>17107	AdditiveExpression	400 + 60
>17108	PrimaryExpression	60
>17109	PrimaryExpression	400
>17110	Callee	Vector
>17111	Identifier	Vector
>17112	PtrMemberAccess	menu [ 8 ] -> position
>17113	Identifier	position
>17114	ArrayIndexing	menu [ 8 ]
>17115	PrimaryExpression	8
>17116	Identifier	menu
>17117	ExpressionStatement	 
>17118	CallExpression	menu [ 8 ] -> useSound ( \"Click\" )
>17119	ArgumentList	\"Click\"
>17120	Argument	\"Click\"
>17121	PrimaryExpression	\"Click\"
>17122	Callee	menu [ 8 ] -> useSound
>17123	PtrMemberAccess	menu [ 8 ] -> useSound
>17124	Identifier	useSound
>17125	ArrayIndexing	menu [ 8 ]
>17126	PrimaryExpression	8
>17127	Identifier	menu
>17128	ExpressionStatement	 
>17129	CallExpression	menu [ 8 ] -> useGlow ( \"particles/glow\" , gs , gs )
>17130	ArgumentList	\"particles/glow\"
>17131	Argument	gs
>17132	Identifier	gs
>17133	Argument	gs
>17134	Identifier	gs
>17135	Argument	\"particles/glow\"
>17136	PrimaryExpression	\"particles/glow\"
>17137	Callee	menu [ 8 ] -> useGlow
>17138	PtrMemberAccess	menu [ 8 ] -> useGlow
>17139	Identifier	useGlow
>17140	ArrayIndexing	menu [ 8 ]
>17141	PrimaryExpression	8
>17142	Identifier	menu
>17143	ExpressionStatement	 
>17144	CallExpression	menu [ 8 ] -> useQuad ( \"gui/icon-treasures\" )
>17145	ArgumentList	\"gui/icon-treasures\"
>17146	Argument	\"gui/icon-treasures\"
>17147	PrimaryExpression	\"gui/icon-treasures\"
>17148	Callee	menu [ 8 ] -> useQuad
>17149	PtrMemberAccess	menu [ 8 ] -> useQuad
>17150	Identifier	useQuad
>17151	ArrayIndexing	menu [ 8 ]
>17152	PrimaryExpression	8
>17153	Identifier	menu
>17154	ExpressionStatement	 
>17155	CallExpression	menu [ 8 ] -> event . set ( MakeFunctionEvent ( Game , switchToTreasureMenu ) )
>17156	ArgumentList	MakeFunctionEvent ( Game , switchToTreasureMenu )
>17157	Argument	MakeFunctionEvent ( Game , switchToTreasureMenu )
>17158	CallExpression	MakeFunctionEvent ( Game , switchToTreasureMenu )
>17159	ArgumentList	Game
>17160	Argument	switchToTreasureMenu
>17161	Identifier	switchToTreasureMenu
>17162	Argument	Game
>17163	Identifier	Game
>17164	Callee	MakeFunctionEvent
>17165	Identifier	MakeFunctionEvent
>17166	Callee	menu [ 8 ] -> event . set
>17167	MemberAccess	menu [ 8 ] -> event . set
>17168	Identifier	set
>17169	PtrMemberAccess	menu [ 8 ] -> event
>17170	Identifier	event
>17171	ArrayIndexing	menu [ 8 ]
>17172	PrimaryExpression	8
>17173	Identifier	menu
>17174	ExpressionStatement	 
>17175	AssignmentExpr	menu [ 7 ] -> position = Vector ( 400 + 20 , 350 )
>17176	CallExpression	Vector ( 400 + 20 , 350 )
>17177	ArgumentList	400 + 20
>17178	Argument	350
>17179	PrimaryExpression	350
>17180	Argument	400 + 20
>17181	AdditiveExpression	400 + 20
>17182	PrimaryExpression	20
>17183	PrimaryExpression	400
>17184	Callee	Vector
>17185	Identifier	Vector
>17186	PtrMemberAccess	menu [ 7 ] -> position
>17187	Identifier	position
>17188	ArrayIndexing	menu [ 7 ]
>17189	PrimaryExpression	7
>17190	Identifier	menu
>17191	ExpressionStatement	 
>17192	CallExpression	menu [ 7 ] -> useSound ( \"Click\" )
>17193	ArgumentList	\"Click\"
>17194	Argument	\"Click\"
>17195	PrimaryExpression	\"Click\"
>17196	Callee	menu [ 7 ] -> useSound
>17197	PtrMemberAccess	menu [ 7 ] -> useSound
>17198	Identifier	useSound
>17199	ArrayIndexing	menu [ 7 ]
>17200	PrimaryExpression	7
>17201	Identifier	menu
>17202	ExpressionStatement	 
>17203	CallExpression	menu [ 7 ] -> useGlow ( \"particles/glow\" , gs , gs )
>17204	ArgumentList	\"particles/glow\"
>17205	Argument	gs
>17206	Identifier	gs
>17207	Argument	gs
>17208	Identifier	gs
>17209	Argument	\"particles/glow\"
>17210	PrimaryExpression	\"particles/glow\"
>17211	Callee	menu [ 7 ] -> useGlow
>17212	PtrMemberAccess	menu [ 7 ] -> useGlow
>17213	Identifier	useGlow
>17214	ArrayIndexing	menu [ 7 ]
>17215	PrimaryExpression	7
>17216	Identifier	menu
>17217	ExpressionStatement	 
>17218	CallExpression	menu [ 7 ] -> useQuad ( \"gui/icon-pets\" )
>17219	ArgumentList	\"gui/icon-pets\"
>17220	Argument	\"gui/icon-pets\"
>17221	PrimaryExpression	\"gui/icon-pets\"
>17222	Callee	menu [ 7 ] -> useQuad
>17223	PtrMemberAccess	menu [ 7 ] -> useQuad
>17224	Identifier	useQuad
>17225	ArrayIndexing	menu [ 7 ]
>17226	PrimaryExpression	7
>17227	Identifier	menu
>17228	ExpressionStatement	 
>17229	CallExpression	menu [ 7 ] -> event . set ( MakeFunctionEvent ( Game , switchToPetMenu ) )
>17230	ArgumentList	MakeFunctionEvent ( Game , switchToPetMenu )
>17231	Argument	MakeFunctionEvent ( Game , switchToPetMenu )
>17232	CallExpression	MakeFunctionEvent ( Game , switchToPetMenu )
>17233	ArgumentList	Game
>17234	Argument	switchToPetMenu
>17235	Identifier	switchToPetMenu
>17236	Argument	Game
>17237	Identifier	Game
>17238	Callee	MakeFunctionEvent
>17239	Identifier	MakeFunctionEvent
>17240	Callee	menu [ 7 ] -> event . set
>17241	MemberAccess	menu [ 7 ] -> event . set
>17242	Identifier	set
>17243	PtrMemberAccess	menu [ 7 ] -> event
>17244	Identifier	event
>17245	ArrayIndexing	menu [ 7 ]
>17246	PrimaryExpression	7
>17247	Identifier	menu
>17248	ExpressionStatement	 
>17249	AssignmentExpr	menu [ 6 ] -> position = Vector ( 400 - 20 , 350 )
>17250	CallExpression	Vector ( 400 - 20 , 350 )
>17251	ArgumentList	400 - 20
>17252	Argument	350
>17253	PrimaryExpression	350
>17254	Argument	400 - 20
>17255	AdditiveExpression	400 - 20
>17256	PrimaryExpression	20
>17257	PrimaryExpression	400
>17258	Callee	Vector
>17259	Identifier	Vector
>17260	PtrMemberAccess	menu [ 6 ] -> position
>17261	Identifier	position
>17262	ArrayIndexing	menu [ 6 ]
>17263	PrimaryExpression	6
>17264	Identifier	menu
>17265	ExpressionStatement	 
>17266	CallExpression	menu [ 6 ] -> useSound ( \"Click\" )
>17267	ArgumentList	\"Click\"
>17268	Argument	\"Click\"
>17269	PrimaryExpression	\"Click\"
>17270	Callee	menu [ 6 ] -> useSound
>17271	PtrMemberAccess	menu [ 6 ] -> useSound
>17272	Identifier	useSound
>17273	ArrayIndexing	menu [ 6 ]
>17274	PrimaryExpression	6
>17275	Identifier	menu
>17276	ExpressionStatement	 
>17277	CallExpression	menu [ 6 ] -> useGlow ( \"particles/glow\" , gs , gs )
>17278	ArgumentList	\"particles/glow\"
>17279	Argument	gs
>17280	Identifier	gs
>17281	Argument	gs
>17282	Identifier	gs
>17283	Argument	\"particles/glow\"
>17284	PrimaryExpression	\"particles/glow\"
>17285	Callee	menu [ 6 ] -> useGlow
>17286	PtrMemberAccess	menu [ 6 ] -> useGlow
>17287	Identifier	useGlow
>17288	ArrayIndexing	menu [ 6 ]
>17289	PrimaryExpression	6
>17290	Identifier	menu
>17291	ExpressionStatement	 
>17292	CallExpression	menu [ 6 ] -> useQuad ( \"gui/icon-food\" )
>17293	ArgumentList	\"gui/icon-food\"
>17294	Argument	\"gui/icon-food\"
>17295	PrimaryExpression	\"gui/icon-food\"
>17296	Callee	menu [ 6 ] -> useQuad
>17297	PtrMemberAccess	menu [ 6 ] -> useQuad
>17298	Identifier	useQuad
>17299	ArrayIndexing	menu [ 6 ]
>17300	PrimaryExpression	6
>17301	Identifier	menu
>17302	ExpressionStatement	 
>17303	CallExpression	menu [ 6 ] -> event . set ( MakeFunctionEvent ( Game , switchToFoodMenu ) )
>17304	ArgumentList	MakeFunctionEvent ( Game , switchToFoodMenu )
>17305	Argument	MakeFunctionEvent ( Game , switchToFoodMenu )
>17306	CallExpression	MakeFunctionEvent ( Game , switchToFoodMenu )
>17307	ArgumentList	Game
>17308	Argument	switchToFoodMenu
>17309	Identifier	switchToFoodMenu
>17310	Argument	Game
>17311	Identifier	Game
>17312	Callee	MakeFunctionEvent
>17313	Identifier	MakeFunctionEvent
>17314	Callee	menu [ 6 ] -> event . set
>17315	MemberAccess	menu [ 6 ] -> event . set
>17316	Identifier	set
>17317	PtrMemberAccess	menu [ 6 ] -> event
>17318	Identifier	event
>17319	ArrayIndexing	menu [ 6 ]
>17320	PrimaryExpression	6
>17321	Identifier	menu
>17322	ExpressionStatement	 
>17323	CallExpression	addRenderObject ( menuIconGlow , LR_MENU )
>17324	ArgumentList	menuIconGlow
>17325	Argument	LR_MENU
>17326	Identifier	LR_MENU
>17327	Argument	menuIconGlow
>17328	Identifier	menuIconGlow
>17329	Callee	addRenderObject
>17330	Identifier	addRenderObject
>17331	ExpressionStatement	 
>17332	AssignmentExpr	menuIconGlow -> followCamera = 1
>17333	PrimaryExpression	1
>17334	PtrMemberAccess	menuIconGlow -> followCamera
>17335	Identifier	followCamera
>17336	Identifier	menuIconGlow
>17337	ExpressionStatement	 
>17338	CallExpression	menuIconGlow -> setBlendType ( RenderObject 
>17339	ArgumentList	RenderObject 
>17340	Argument	RenderObject 
>17341	Identifier	RenderObject 
>17342	Callee	menuIconGlow -> setBlendType
>17343	PtrMemberAccess	menuIconGlow -> setBlendType
>17344	Identifier	setBlendType
>17345	Identifier	menuIconGlow
>17346	ExpressionStatement	 
>17347	CallExpression	menuIconGlow -> setWidthHeight ( 80 , 80 )
>17348	ArgumentList	80
>17349	Argument	80
>17350	PrimaryExpression	80
>17351	Argument	80
>17352	PrimaryExpression	80
>17353	Callee	menuIconGlow -> setWidthHeight
>17354	PtrMemberAccess	menuIconGlow -> setWidthHeight
>17355	Identifier	setWidthHeight
>17356	Identifier	menuIconGlow
>17357	ExpressionStatement	 
>17358	AssignmentExpr	menuIconGlow -> alpha = 0
>17359	PrimaryExpression	0
>17360	PtrMemberAccess	menuIconGlow -> alpha
>17361	Identifier	alpha
>17362	Identifier	menuIconGlow
>17363	ExpressionStatement	 
>17364	AssignmentExpr	menuIconGlow -> alphaMod = 0.4
>17365	PrimaryExpression	0.4
>17366	PtrMemberAccess	menuIconGlow -> alphaMod
>17367	Identifier	alphaMod
>17368	Identifier	menuIconGlow
>17369	ExpressionStatement	 
>17370	AssignmentExpr	menuIconGlow = new Quad ( \"particles/glow\" , menu [ 5 ] -> position )
>17371	Expression	\"particles/glow\" , menu [ 5 ] -> position
>17372	PtrMemberAccess	menu [ 5 ] -> position
>17373	Identifier	position
>17374	ArrayIndexing	menu [ 5 ]
>17375	PrimaryExpression	5
>17376	Identifier	menu
>17377	PrimaryExpression	\"particles/glow\"
>17378	Identifier	menuIconGlow
>17379	ExpressionStatement	 
>17380	AssignmentExpr	menu [ 5 ] -> position = Vector ( 400 - 60 , 350 )
>17381	CallExpression	Vector ( 400 - 60 , 350 )
>17382	ArgumentList	400 - 60
>17383	Argument	350
>17384	PrimaryExpression	350
>17385	Argument	400 - 60
>17386	AdditiveExpression	400 - 60
>17387	PrimaryExpression	60
>17388	PrimaryExpression	400
>17389	Callee	Vector
>17390	Identifier	Vector
>17391	PtrMemberAccess	menu [ 5 ] -> position
>17392	Identifier	position
>17393	ArrayIndexing	menu [ 5 ]
>17394	PrimaryExpression	5
>17395	Identifier	menu
>17396	ExpressionStatement	 
>17397	CallExpression	menu [ 5 ] -> useSound ( \"Click\" )
>17398	ArgumentList	\"Click\"
>17399	Argument	\"Click\"
>17400	PrimaryExpression	\"Click\"
>17401	Callee	menu [ 5 ] -> useSound
>17402	PtrMemberAccess	menu [ 5 ] -> useSound
>17403	Identifier	useSound
>17404	ArrayIndexing	menu [ 5 ]
>17405	PrimaryExpression	5
>17406	Identifier	menu
>17407	ExpressionStatement	 
>17408	CallExpression	menu [ 5 ] -> useGlow ( \"particles/glow\" , gs , gs )
>17409	ArgumentList	\"particles/glow\"
>17410	Argument	gs
>17411	Identifier	gs
>17412	Argument	gs
>17413	Identifier	gs
>17414	Argument	\"particles/glow\"
>17415	PrimaryExpression	\"particles/glow\"
>17416	Callee	menu [ 5 ] -> useGlow
>17417	PtrMemberAccess	menu [ 5 ] -> useGlow
>17418	Identifier	useGlow
>17419	ArrayIndexing	menu [ 5 ]
>17420	PrimaryExpression	5
>17421	Identifier	menu
>17422	ExpressionStatement	 
>17423	CallExpression	menu [ 5 ] -> useQuad ( \"gui/icon-songs\" )
>17424	ArgumentList	\"gui/icon-songs\"
>17425	Argument	\"gui/icon-songs\"
>17426	PrimaryExpression	\"gui/icon-songs\"
>17427	Callee	menu [ 5 ] -> useQuad
>17428	PtrMemberAccess	menu [ 5 ] -> useQuad
>17429	Identifier	useQuad
>17430	ArrayIndexing	menu [ 5 ]
>17431	PrimaryExpression	5
>17432	Identifier	menu
>17433	ExpressionStatement	 
>17434	CallExpression	menu [ 5 ] -> event . set ( MakeFunctionEvent ( Game , switchToSongMenu ) )
>17435	ArgumentList	MakeFunctionEvent ( Game , switchToSongMenu )
>17436	Argument	MakeFunctionEvent ( Game , switchToSongMenu )
>17437	CallExpression	MakeFunctionEvent ( Game , switchToSongMenu )
>17438	ArgumentList	Game
>17439	Argument	switchToSongMenu
>17440	Identifier	switchToSongMenu
>17441	Argument	Game
>17442	Identifier	Game
>17443	Callee	MakeFunctionEvent
>17444	Identifier	MakeFunctionEvent
>17445	Callee	menu [ 5 ] -> event . set
>17446	MemberAccess	menu [ 5 ] -> event . set
>17447	Identifier	set
>17448	PtrMemberAccess	menu [ 5 ] -> event
>17449	Identifier	event
>17450	ArrayIndexing	menu [ 5 ]
>17451	PrimaryExpression	5
>17452	Identifier	menu
>17453	IdentifierDeclStatement	 
>17454	IdentifierDecl	gs = 40
>17455	AssignmentExpr	gs = 40
>17456	PrimaryExpression	40
>17457	Identifier	gs
>17458	Identifier	gs
>17459	IdentifierDeclType	int
>17460	ExpressionStatement	 
>17461	AssignmentExpr	menu [ 4 ] -> position = Vector ( 400 , ty + 10 )
>17462	CallExpression	Vector ( 400 , ty + 10 )
>17463	ArgumentList	400
>17464	Argument	ty + 10
>17465	AdditiveExpression	ty + 10
>17466	PrimaryExpression	10
>17467	Identifier	ty
>17468	Argument	400
>17469	PrimaryExpression	400
>17470	Callee	Vector
>17471	Identifier	Vector
>17472	PtrMemberAccess	menu [ 4 ] -> position
>17473	Identifier	position
>17474	ArrayIndexing	menu [ 4 ]
>17475	PrimaryExpression	4
>17476	Identifier	menu
>17477	ExpressionStatement	 
>17478	CallExpression	menu [ 4 ] -> useGlow ( \"particles/glow\" , 200 , 32 )
>17479	ArgumentList	\"particles/glow\"
>17480	Argument	32
>17481	PrimaryExpression	32
>17482	Argument	200
>17483	PrimaryExpression	200
>17484	Argument	\"particles/glow\"
>17485	PrimaryExpression	\"particles/glow\"
>17486	Callee	menu [ 4 ] -> useGlow
>17487	PtrMemberAccess	menu [ 4 ] -> useGlow
>17488	Identifier	useGlow
>17489	ArrayIndexing	menu [ 4 ]
>17490	PrimaryExpression	4
>17491	Identifier	menu
>17492	ExpressionStatement	 
>17493	CallExpression	menu [ 4 ] -> event . set ( MakeFunctionEvent ( Game , onOptionsMenu ) )
>17494	ArgumentList	MakeFunctionEvent ( Game , onOptionsMenu )
>17495	Argument	MakeFunctionEvent ( Game , onOptionsMenu )
>17496	CallExpression	MakeFunctionEvent ( Game , onOptionsMenu )
>17497	ArgumentList	Game
>17498	Argument	onOptionsMenu
>17499	Identifier	onOptionsMenu
>17500	Argument	Game
>17501	Identifier	Game
>17502	Callee	MakeFunctionEvent
>17503	Identifier	MakeFunctionEvent
>17504	Callee	menu [ 4 ] -> event . set
>17505	MemberAccess	menu [ 4 ] -> event . set
>17506	Identifier	set
>17507	PtrMemberAccess	menu [ 4 ] -> event
>17508	Identifier	event
>17509	ArrayIndexing	menu [ 4 ]
>17510	PrimaryExpression	4
>17511	Identifier	menu
>17512	ExpressionStatement	 
>17513	AssignmentExpr	lips = menu [ 3 ]
>17514	ArrayIndexing	menu [ 3 ]
>17515	PrimaryExpression	3
>17516	Identifier	menu
>17517	Identifier	lips
>17518	ExpressionStatement	 
>17519	CallExpression	menu [ 3 ] -> setCanDirMove ( false )
>17520	ArgumentList	false
>17521	Argument	false
>17522	Identifier	false
>17523	Callee	menu [ 3 ] -> setCanDirMove
>17524	PtrMemberAccess	menu [ 3 ] -> setCanDirMove
>17525	Identifier	setCanDirMove
>17526	ArrayIndexing	menu [ 3 ]
>17527	PrimaryExpression	3
>17528	Identifier	menu
>17529	ExpressionStatement	 
>17530	AssignmentExpr	menu [ 3 ] -> position = Vector ( 400 , 195 )
>17531	CallExpression	Vector ( 400 , 195 )
>17532	ArgumentList	400
>17533	Argument	195
>17534	PrimaryExpression	195
>17535	Argument	400
>17536	PrimaryExpression	400
>17537	Callee	Vector
>17538	Identifier	Vector
>17539	PtrMemberAccess	menu [ 3 ] -> position
>17540	Identifier	position
>17541	ArrayIndexing	menu [ 3 ]
>17542	PrimaryExpression	3
>17543	Identifier	menu
>17544	ExpressionStatement	 
>17545	CallExpression	menu [ 3 ] -> useGlow ( \"particles/glow\" , 64 , 64 )
>17546	ArgumentList	\"particles/glow\"
>17547	Argument	64
>17548	PrimaryExpression	64
>17549	Argument	64
>17550	PrimaryExpression	64
>17551	Argument	\"particles/glow\"
>17552	PrimaryExpression	\"particles/glow\"
>17553	Callee	menu [ 3 ] -> useGlow
>17554	PtrMemberAccess	menu [ 3 ] -> useGlow
>17555	Identifier	useGlow
>17556	ArrayIndexing	menu [ 3 ]
>17557	PrimaryExpression	3
>17558	Identifier	menu
>17559	ExpressionStatement	 
>17560	CallExpression	menu [ 3 ] -> event . set ( MakeFunctionEvent ( Game , onLips ) )
>17561	ArgumentList	MakeFunctionEvent ( Game , onLips )
>17562	Argument	MakeFunctionEvent ( Game , onLips )
>17563	CallExpression	MakeFunctionEvent ( Game , onLips )
>17564	ArgumentList	Game
>17565	Argument	onLips
>17566	Identifier	onLips
>17567	Argument	Game
>17568	Identifier	Game
>17569	Callee	MakeFunctionEvent
>17570	Identifier	MakeFunctionEvent
>17571	Callee	menu [ 3 ] -> event . set
>17572	MemberAccess	menu [ 3 ] -> event . set
>17573	Identifier	set
>17574	PtrMemberAccess	menu [ 3 ] -> event
>17575	Identifier	event
>17576	ArrayIndexing	menu [ 3 ]
>17577	PrimaryExpression	3
>17578	Identifier	menu
>17579	ExpressionStatement	 
>17580	CallExpression	menu [ 2 ] -> setCanDirMove ( false )
>17581	ArgumentList	false
>17582	Argument	false
>17583	Identifier	false
>17584	Callee	menu [ 2 ] -> setCanDirMove
>17585	PtrMemberAccess	menu [ 2 ] -> setCanDirMove
>17586	Identifier	setCanDirMove
>17587	ArrayIndexing	menu [ 2 ]
>17588	PrimaryExpression	2
>17589	Identifier	menu
>17590	IfStatement	if ( ! dsq -> isDeveloperKeys ( ) )
>17591	ExpressionStatement	 
>17592	AssignmentExpr	menu [ 2 ] -> position = Vector ( 400 , 12000 )
>17593	CallExpression	Vector ( 400 , 12000 )
>17594	ArgumentList	400
>17595	Argument	12000
>17596	PrimaryExpression	12000
>17597	Argument	400
>17598	PrimaryExpression	400
>17599	Callee	Vector
>17600	Identifier	Vector
>17601	PtrMemberAccess	menu [ 2 ] -> position
>17602	Identifier	position
>17603	ArrayIndexing	menu [ 2 ]
>17604	PrimaryExpression	2
>17605	Identifier	menu
>17606	Condition	 
>17607	UnaryOp	! dsq -> isDeveloperKeys ( )
>17608	CallExpression	dsq -> isDeveloperKeys ( )
>17609	ArgumentList	 
>17610	Callee	dsq -> isDeveloperKeys
>17611	PtrMemberAccess	dsq -> isDeveloperKeys
>17612	Identifier	isDeveloperKeys
>17613	Identifier	dsq
>17614	UnaryOperator	!
>17615	ExpressionStatement	 
>17616	AssignmentExpr	menu [ 2 ] -> position = Vector ( 400 , ty + 60 )
>17617	CallExpression	Vector ( 400 , ty + 60 )
>17618	ArgumentList	400
>17619	Argument	ty + 60
>17620	AdditiveExpression	ty + 60
>17621	PrimaryExpression	60
>17622	Identifier	ty
>17623	Argument	400
>17624	PrimaryExpression	400
>17625	Callee	Vector
>17626	Identifier	Vector
>17627	PtrMemberAccess	menu [ 2 ] -> position
>17628	Identifier	position
>17629	ArrayIndexing	menu [ 2 ]
>17630	PrimaryExpression	2
>17631	Identifier	menu
>17632	ExpressionStatement	 
>17633	CallExpression	menu [ 2 ] -> event . set ( MakeFunctionEvent ( Game , onDebugSave ) )
>17634	ArgumentList	MakeFunctionEvent ( Game , onDebugSave )
>17635	Argument	MakeFunctionEvent ( Game , onDebugSave )
>17636	CallExpression	MakeFunctionEvent ( Game , onDebugSave )
>17637	ArgumentList	Game
>17638	Argument	onDebugSave
>17639	Identifier	onDebugSave
>17640	Argument	Game
>17641	Identifier	Game
>17642	Callee	MakeFunctionEvent
>17643	Identifier	MakeFunctionEvent
>17644	Callee	menu [ 2 ] -> event . set
>17645	MemberAccess	menu [ 2 ] -> event . set
>17646	Identifier	set
>17647	PtrMemberAccess	menu [ 2 ] -> event
>17648	Identifier	event
>17649	ArrayIndexing	menu [ 2 ]
>17650	PrimaryExpression	2
>17651	Identifier	menu
>17652	ExpressionStatement	 
>17653	CallExpression	menu [ 2 ] -> setLabel ( \"DebugSave\" )
>17654	ArgumentList	\"DebugSave\"
>17655	Argument	\"DebugSave\"
>17656	PrimaryExpression	\"DebugSave\"
>17657	Callee	menu [ 2 ] -> setLabel
>17658	PtrMemberAccess	menu [ 2 ] -> setLabel
>17659	Identifier	setLabel
>17660	ArrayIndexing	menu [ 2 ]
>17661	PrimaryExpression	2
>17662	Identifier	menu
>17663	ExpressionStatement	 
>17664	AssignmentExpr	menu [ 1 ] -> position = Vector ( 800 - 150 + 20 , ty - 10 )
>17665	CallExpression	Vector ( 800 - 150 + 20 , ty - 10 )
>17666	ArgumentList	800 - 150 + 20
>17667	Argument	ty - 10
>17668	AdditiveExpression	ty - 10
>17669	PrimaryExpression	10
>17670	Identifier	ty
>17671	Argument	800 - 150 + 20
>17672	AdditiveExpression	800 - 150 + 20
>17673	AdditiveExpression	150 + 20
>17674	PrimaryExpression	20
>17675	PrimaryExpression	150
>17676	PrimaryExpression	800
>17677	Callee	Vector
>17678	Identifier	Vector
>17679	PtrMemberAccess	menu [ 1 ] -> position
>17680	Identifier	position
>17681	ArrayIndexing	menu [ 1 ]
>17682	PrimaryExpression	1
>17683	Identifier	menu
>17684	ExpressionStatement	 
>17685	CallExpression	menu [ 1 ] -> event . set ( MakeFunctionEvent ( Game , onInGameMenuExit ) )
>17686	ArgumentList	MakeFunctionEvent ( Game , onInGameMenuExit )
>17687	Argument	MakeFunctionEvent ( Game , onInGameMenuExit )
>17688	CallExpression	MakeFunctionEvent ( Game , onInGameMenuExit )
>17689	ArgumentList	Game
>17690	Argument	onInGameMenuExit
>17691	Identifier	onInGameMenuExit
>17692	Argument	Game
>17693	Identifier	Game
>17694	Callee	MakeFunctionEvent
>17695	Identifier	MakeFunctionEvent
>17696	Callee	menu [ 1 ] -> event . set
>17697	MemberAccess	menu [ 1 ] -> event . set
>17698	Identifier	set
>17699	PtrMemberAccess	menu [ 1 ] -> event
>17700	Identifier	event
>17701	ArrayIndexing	menu [ 1 ]
>17702	PrimaryExpression	1
>17703	Identifier	menu
>17704	ExpressionStatement	 
>17705	CallExpression	menu [ 1 ] -> useGlow ( \"particles/glow\" , 200 , 100 )
>17706	ArgumentList	\"particles/glow\"
>17707	Argument	100
>17708	PrimaryExpression	100
>17709	Argument	200
>17710	PrimaryExpression	200
>17711	Argument	\"particles/glow\"
>17712	PrimaryExpression	\"particles/glow\"
>17713	Callee	menu [ 1 ] -> useGlow
>17714	PtrMemberAccess	menu [ 1 ] -> useGlow
>17715	Identifier	useGlow
>17716	ArrayIndexing	menu [ 1 ]
>17717	PrimaryExpression	1
>17718	Identifier	menu
>17719	ExpressionStatement	 
>17720	AssignmentExpr	menu [ 0 ] -> position = Vector ( 150 - 30 , ty - 10 )
>17721	CallExpression	Vector ( 150 - 30 , ty - 10 )
>17722	ArgumentList	150 - 30
>17723	Argument	ty - 10
>17724	AdditiveExpression	ty - 10
>17725	PrimaryExpression	10
>17726	Identifier	ty
>17727	Argument	150 - 30
>17728	AdditiveExpression	150 - 30
>17729	PrimaryExpression	30
>17730	PrimaryExpression	150
>17731	Callee	Vector
>17732	Identifier	Vector
>17733	PtrMemberAccess	menu [ 0 ] -> position
>17734	Identifier	position
>17735	ArrayIndexing	menu [ 0 ]
>17736	PrimaryExpression	0
>17737	Identifier	menu
>17738	ExpressionStatement	 
>17739	CallExpression	menu [ 0 ] -> useGlow ( \"particles/glow\" , 200 , 100 )
>17740	ArgumentList	\"particles/glow\"
>17741	Argument	100
>17742	PrimaryExpression	100
>17743	Argument	200
>17744	PrimaryExpression	200
>17745	Argument	\"particles/glow\"
>17746	PrimaryExpression	\"particles/glow\"
>17747	Callee	menu [ 0 ] -> useGlow
>17748	PtrMemberAccess	menu [ 0 ] -> useGlow
>17749	Identifier	useGlow
>17750	ArrayIndexing	menu [ 0 ]
>17751	PrimaryExpression	0
>17752	Identifier	menu
>17753	ExpressionStatement	 
>17754	CallExpression	menu [ 0 ] -> event . set ( MakeFunctionEvent ( Game , onInGameMenuContinue ) )
>17755	ArgumentList	MakeFunctionEvent ( Game , onInGameMenuContinue )
>17756	Argument	MakeFunctionEvent ( Game , onInGameMenuContinue )
>17757	CallExpression	MakeFunctionEvent ( Game , onInGameMenuContinue )
>17758	ArgumentList	Game
>17759	Argument	onInGameMenuContinue
>17760	Identifier	onInGameMenuContinue
>17761	Argument	Game
>17762	Identifier	Game
>17763	Callee	MakeFunctionEvent
>17764	Identifier	MakeFunctionEvent
>17765	Callee	menu [ 0 ] -> event . set
>17766	MemberAccess	menu [ 0 ] -> event . set
>17767	Identifier	set
>17768	PtrMemberAccess	menu [ 0 ] -> event
>17769	Identifier	event
>17770	ArrayIndexing	menu [ 0 ]
>17771	PrimaryExpression	0
>17772	Identifier	menu
>17773	IdentifierDeclStatement	 
>17774	IdentifierDecl	ty = 530
>17775	AssignmentExpr	ty = 530
>17776	PrimaryExpression	530
>17777	Identifier	ty
>17778	Identifier	ty
>17779	IdentifierDeclType	int
>17780	ExpressionStatement	 
>17781	Identifier	AquariaMenuItem
>17782	Statement	 
>17783	Statement	 
>17784	Statement	 
>17785	Statement	 
>17786	Statement	 
>17787	ForStatement	for ( i = 0 ; i < menu . size ( ) ; i ++ )
>17788	Statement	 
>17789	IncDecOp	 
>17790	IncDec	++
>17791	Identifier	i
>17792	Condition	 
>17793	RelationalExpression	i < menu . size ( )
>17794	CallExpression	menu . size ( )
>17795	ArgumentList	 
>17796	Callee	menu . size
>17797	MemberAccess	menu . size
>17798	Identifier	size
>17799	Identifier	menu
>17800	Identifier	i
>17801	ForInit	 
>17802	AssignmentExpr	i = 0
>17803	PrimaryExpression	0
>17804	Identifier	i
>17805	ExpressionStatement	 
>17806	CallExpression	menu . resize ( 10 )
>17807	ArgumentList	10
>17808	Argument	10
>17809	PrimaryExpression	10
>17810	Callee	menu . resize
>17811	MemberAccess	menu . resize
>17812	Identifier	resize
>17813	Identifier	menu
>17814	ExpressionStatement	 
>17815	CallExpression	eYes -> setDirMove ( DIR_RIGHT , eNo )
>17816	ArgumentList	DIR_RIGHT
>17817	Argument	eNo
>17818	Identifier	eNo
>17819	Argument	DIR_RIGHT
>17820	Identifier	DIR_RIGHT
>17821	Callee	eYes -> setDirMove
>17822	PtrMemberAccess	eYes -> setDirMove
>17823	Identifier	setDirMove
>17824	Identifier	eYes
>17825	ExpressionStatement	 
>17826	CallExpression	eNo -> setDirMove ( DIR_LEFT , eYes )
>17827	ArgumentList	DIR_LEFT
>17828	Argument	eYes
>17829	Identifier	eYes
>17830	Argument	DIR_LEFT
>17831	Identifier	DIR_LEFT
>17832	Callee	eNo -> setDirMove
>17833	PtrMemberAccess	eNo -> setDirMove
>17834	Identifier	setDirMove
>17835	Identifier	eNo
>17836	ExpressionStatement	 
>17837	CallExpression	addRenderObject ( eNo , LR_MENU )
>17838	ArgumentList	eNo
>17839	Argument	LR_MENU
>17840	Identifier	LR_MENU
>17841	Argument	eNo
>17842	Identifier	eNo
>17843	Callee	addRenderObject
>17844	Identifier	addRenderObject
>17845	ExpressionStatement	 
>17846	AssignmentExpr	eNo -> shareAlpha = 1
>17847	PrimaryExpression	1
>17848	PtrMemberAccess	eNo -> shareAlpha
>17849	Identifier	shareAlpha
>17850	Identifier	eNo
>17851	ExpressionStatement	 
>17852	AssignmentExpr	eNo -> alpha = 0
>17853	PrimaryExpression	0
>17854	PtrMemberAccess	eNo -> alpha
>17855	Identifier	alpha
>17856	Identifier	eNo
>17857	ExpressionStatement	 
>17858	CallExpression	eNo -> event . set ( MakeFunctionEvent ( Game , onExitCheckNo ) )
>17859	ArgumentList	MakeFunctionEvent ( Game , onExitCheckNo )
>17860	Argument	MakeFunctionEvent ( Game , onExitCheckNo )
>17861	CallExpression	MakeFunctionEvent ( Game , onExitCheckNo )
>17862	ArgumentList	Game
>17863	Argument	onExitCheckNo
>17864	Identifier	onExitCheckNo
>17865	Argument	Game
>17866	Identifier	Game
>17867	Callee	MakeFunctionEvent
>17868	Identifier	MakeFunctionEvent
>17869	Callee	eNo -> event . set
>17870	MemberAccess	eNo -> event . set
>17871	Identifier	set
>17872	PtrMemberAccess	eNo -> event
>17873	Identifier	event
>17874	Identifier	eNo
>17875	ExpressionStatement	 
>17876	CallExpression	eNo -> useGlow ( \"particles/glow\" , 100 , 32 )
>17877	ArgumentList	\"particles/glow\"
>17878	Argument	32
>17879	PrimaryExpression	32
>17880	Argument	100
>17881	PrimaryExpression	100
>17882	Argument	\"particles/glow\"
>17883	PrimaryExpression	\"particles/glow\"
>17884	Callee	eNo -> useGlow
>17885	PtrMemberAccess	eNo -> useGlow
>17886	Identifier	useGlow
>17887	Identifier	eNo
>17888	ExpressionStatement	 
>17889	CallExpression	eNo -> useQuad ( \"No\" )
>17890	ArgumentList	\"No\"
>17891	Argument	\"No\"
>17892	PrimaryExpression	\"No\"
>17893	Callee	eNo -> useQuad
>17894	PtrMemberAccess	eNo -> useQuad
>17895	Identifier	useQuad
>17896	Identifier	eNo
>17897	ExpressionStatement	 
>17898	AssignmentExpr	eNo -> position = Vector ( 400 + 100 , 516 + areYouShim )
>17899	CallExpression	Vector ( 400 + 100 , 516 + areYouShim )
>17900	ArgumentList	400 + 100
>17901	Argument	516 + areYouShim
>17902	AdditiveExpression	516 + areYouShim
>17903	Identifier	areYouShim
>17904	PrimaryExpression	516
>17905	Argument	400 + 100
>17906	AdditiveExpression	400 + 100
>17907	PrimaryExpression	100
>17908	PrimaryExpression	400
>17909	Callee	Vector
>17910	Identifier	Vector
>17911	PtrMemberAccess	eNo -> position
>17912	Identifier	position
>17913	Identifier	eNo
>17914	ExpressionStatement	 
>17915	Identifier	AquariaMenuItem
>17916	Statement	 
>17917	Statement	 
>17918	Statement	 
>17919	ExpressionStatement	 
>17920	CallExpression	addRenderObject ( eYes , LR_MENU )
>17921	ArgumentList	eYes
>17922	Argument	LR_MENU
>17923	Identifier	LR_MENU
>17924	Argument	eYes
>17925	Identifier	eYes
>17926	Callee	addRenderObject
>17927	Identifier	addRenderObject
>17928	ExpressionStatement	 
>17929	AssignmentExpr	eYes -> shareAlpha = 1
>17930	PrimaryExpression	1
>17931	PtrMemberAccess	eYes -> shareAlpha
>17932	Identifier	shareAlpha
>17933	Identifier	eYes
>17934	ExpressionStatement	 
>17935	AssignmentExpr	eYes -> alpha = 0
>17936	PrimaryExpression	0
>17937	PtrMemberAccess	eYes -> alpha
>17938	Identifier	alpha
>17939	Identifier	eYes
>17940	ExpressionStatement	 
>17941	CallExpression	eYes -> event . set ( MakeFunctionEvent ( Game , onExitCheckYes ) )
>17942	ArgumentList	MakeFunctionEvent ( Game , onExitCheckYes )
>17943	Argument	MakeFunctionEvent ( Game , onExitCheckYes )
>17944	CallExpression	MakeFunctionEvent ( Game , onExitCheckYes )
>17945	ArgumentList	Game
>17946	Argument	onExitCheckYes
>17947	Identifier	onExitCheckYes
>17948	Argument	Game
>17949	Identifier	Game
>17950	Callee	MakeFunctionEvent
>17951	Identifier	MakeFunctionEvent
>17952	Callee	eYes -> event . set
>17953	MemberAccess	eYes -> event . set
>17954	Identifier	set
>17955	PtrMemberAccess	eYes -> event
>17956	Identifier	event
>17957	Identifier	eYes
>17958	ExpressionStatement	 
>17959	CallExpression	eYes -> useGlow ( \"particles/glow\" , 100 , 32 )
>17960	ArgumentList	\"particles/glow\"
>17961	Argument	32
>17962	PrimaryExpression	32
>17963	Argument	100
>17964	PrimaryExpression	100
>17965	Argument	\"particles/glow\"
>17966	PrimaryExpression	\"particles/glow\"
>17967	Callee	eYes -> useGlow
>17968	PtrMemberAccess	eYes -> useGlow
>17969	Identifier	useGlow
>17970	Identifier	eYes
>17971	ExpressionStatement	 
>17972	CallExpression	eYes -> useQuad ( \"Yes\" )
>17973	ArgumentList	\"Yes\"
>17974	Argument	\"Yes\"
>17975	PrimaryExpression	\"Yes\"
>17976	Callee	eYes -> useQuad
>17977	PtrMemberAccess	eYes -> useQuad
>17978	Identifier	useQuad
>17979	Identifier	eYes
>17980	ExpressionStatement	 
>17981	AssignmentExpr	eYes -> position = Vector ( 400 - 100 , 516 + areYouShim )
>17982	CallExpression	Vector ( 400 - 100 , 516 + areYouShim )
>17983	ArgumentList	400 - 100
>17984	Argument	516 + areYouShim
>17985	AdditiveExpression	516 + areYouShim
>17986	Identifier	areYouShim
>17987	PrimaryExpression	516
>17988	Argument	400 - 100
>17989	AdditiveExpression	400 - 100
>17990	PrimaryExpression	100
>17991	PrimaryExpression	400
>17992	Callee	Vector
>17993	Identifier	Vector
>17994	PtrMemberAccess	eYes -> position
>17995	Identifier	position
>17996	Identifier	eYes
>17997	ExpressionStatement	 
>17998	Identifier	AquariaMenuItem
>17999	Statement	 
>18000	Statement	 
>18001	Statement	 
>18002	ExpressionStatement	 
>18003	CallExpression	addRenderObject ( eAre , LR_MENU )
>18004	ArgumentList	eAre
>18005	Argument	LR_MENU
>18006	Identifier	LR_MENU
>18007	Argument	eAre
>18008	Identifier	eAre
>18009	Callee	addRenderObject
>18010	Identifier	addRenderObject
>18011	ExpressionStatement	 
>18012	AssignmentExpr	eAre -> followCamera = 1
>18013	PrimaryExpression	1
>18014	PtrMemberAccess	eAre -> followCamera
>18015	Identifier	followCamera
>18016	Identifier	eAre
>18017	ExpressionStatement	 
>18018	AssignmentExpr	eAre -> alpha = 0
>18019	PrimaryExpression	0
>18020	PtrMemberAccess	eAre -> alpha
>18021	Identifier	alpha
>18022	Identifier	eAre
>18023	ExpressionStatement	 
>18024	CallExpression	eAre -> setTexture ( \"AreYouSure\" )
>18025	ArgumentList	\"AreYouSure\"
>18026	Argument	\"AreYouSure\"
>18027	PrimaryExpression	\"AreYouSure\"
>18028	Callee	eAre -> setTexture
>18029	PtrMemberAccess	eAre -> setTexture
>18030	Identifier	setTexture
>18031	Identifier	eAre
>18032	ExpressionStatement	 
>18033	AssignmentExpr	eAre -> position = Vector ( 400 , 448 + areYouShim )
>18034	CallExpression	Vector ( 400 , 448 + areYouShim )
>18035	ArgumentList	400
>18036	Argument	448 + areYouShim
>18037	AdditiveExpression	448 + areYouShim
>18038	Identifier	areYouShim
>18039	PrimaryExpression	448
>18040	Argument	400
>18041	PrimaryExpression	400
>18042	Callee	Vector
>18043	Identifier	Vector
>18044	PtrMemberAccess	eAre -> position
>18045	Identifier	position
>18046	Identifier	eAre
>18047	ExpressionStatement	 
>18048	Identifier	Quad
>18049	Statement	 
>18050	Statement	 
>18051	Statement	 
>18052	IdentifierDeclStatement	 
>18053	IdentifierDecl	areYouShim = - 25
>18054	AssignmentExpr	areYouShim = - 25
>18055	UnaryOp	- 25
>18056	PrimaryExpression	25
>18057	UnaryOperator	-
>18058	Identifier	areYouShim
>18059	Identifier	areYouShim
>18060	IdentifierDeclType	int
>18061	ExpressionStatement	 
>18062	AssignmentExpr	currentInventoryPage = 0
>18063	PrimaryExpression	0
>18064	Identifier	currentInventoryPage
>18065	ExpressionStatement	 
>18066	CallExpression	addRenderObject ( menuDescription , LR_MENU )
>18067	ArgumentList	menuDescription
>18068	Argument	LR_MENU
>18069	Identifier	LR_MENU
>18070	Argument	menuDescription
>18071	Identifier	menuDescription
>18072	Callee	addRenderObject
>18073	Identifier	addRenderObject
>18074	ExpressionStatement	 
>18075	AssignmentExpr	menuDescription -> alpha = 0
>18076	PrimaryExpression	0
>18077	PtrMemberAccess	menuDescription -> alpha
>18078	Identifier	alpha
>18079	Identifier	menuDescription
>18080	ExpressionStatement	 
>18081	AssignmentExpr	menuDescription -> followCamera = 1
>18082	PrimaryExpression	1
>18083	PtrMemberAccess	menuDescription -> followCamera
>18084	Identifier	followCamera
>18085	Identifier	menuDescription
>18086	ExpressionStatement	 
>18087	CallExpression	menuDescription -> setWidth ( 400 )
>18088	ArgumentList	400
>18089	Argument	400
>18090	PrimaryExpression	400
>18091	Callee	menuDescription -> setWidth
>18092	PtrMemberAccess	menuDescription -> setWidth
>18093	Identifier	setWidth
>18094	Identifier	menuDescription
>18095	ExpressionStatement	 
>18096	CallExpression	menuDescription -> setAlign ( ALIGN_CENTER )
>18097	ArgumentList	ALIGN_CENTER
>18098	Argument	ALIGN_CENTER
>18099	Identifier	ALIGN_CENTER
>18100	Callee	menuDescription -> setAlign
>18101	PtrMemberAccess	menuDescription -> setAlign
>18102	Identifier	setAlign
>18103	Identifier	menuDescription
>18104	ExpressionStatement	 
>18105	AssignmentExpr	menuDescription -> position = Vector ( 400 , 450 )
>18106	CallExpression	Vector ( 400 , 450 )
>18107	ArgumentList	400
>18108	Argument	450
>18109	PrimaryExpression	450
>18110	Argument	400
>18111	PrimaryExpression	400
>18112	Callee	Vector
>18113	Identifier	Vector
>18114	PtrMemberAccess	menuDescription -> position
>18115	Identifier	position
>18116	Identifier	menuDescription
>18117	ExpressionStatement	 
>18118	CallExpression	menuDescription -> setFontSize ( 14 )
>18119	ArgumentList	14
>18120	Argument	14
>18121	PrimaryExpression	14
>18122	Callee	menuDescription -> setFontSize
>18123	PtrMemberAccess	menuDescription -> setFontSize
>18124	Identifier	setFontSize
>18125	Identifier	menuDescription
>18126	ExpressionStatement	 
>18127	AssignmentExpr	menuDescription = new BitmapText ( & dsq -> smallFont )
>18128	UnaryOp	& dsq -> smallFont
>18129	PtrMemberAccess	dsq -> smallFont
>18130	Identifier	smallFont
>18131	Identifier	dsq
>18132	UnaryOperator	&
>18133	Identifier	menuDescription
>18134	ExpressionStatement	 
>18135	AssignmentExpr	menuMoney = menuEXP = 0
>18136	AssignmentExpr	menuEXP = 0
>18137	PrimaryExpression	0
>18138	Identifier	menuEXP
>18139	Identifier	menuMoney
>18140	ExpressionStatement	 
>18141	AssignmentExpr	menuSongs = 0
>18142	PrimaryExpression	0
>18143	Identifier	menuSongs
>18144	ForStatement	for ( i = 0 ; i < songSlots . size ( ) ; i ++ )
>18145	CompoundStatement	 
>18146	ExpressionStatement	 
>18147	CallExpression	menuBg -> addChild ( songSlots [ i ] , PM_POINTER )
>18148	ArgumentList	songSlots [ i ]
>18149	Argument	PM_POINTER
>18150	Identifier	PM_POINTER
>18151	Argument	songSlots [ i ]
>18152	ArrayIndexing	songSlots [ i ]
>18153	Identifier	i
>18154	Identifier	songSlots
>18155	Callee	menuBg -> addChild
>18156	PtrMemberAccess	menuBg -> addChild
>18157	Identifier	addChild
>18158	Identifier	menuBg
>18159	IfStatement	if ( dsq -> continuity . isSongTypeForm ( s ) )
>18160	ElseStatement	else
>18161	CompoundStatement	 
>18162	ExpressionStatement	 
>18163	IncDecOp	inner ++
>18164	IncDec	++
>18165	Identifier	inner
>18166	ExpressionStatement	 
>18167	AssignmentExpr	songSlots [ i ] -> position = center + Vector ( sinf ( angle ) , cosf ( angle ) ) * radius * 0.4f
>18168	AdditiveExpression	center + Vector ( sinf ( angle ) , cosf ( angle ) ) * radius * 0.4f
>18169	MultiplicativeExpression	Vector ( sinf ( angle ) , cosf ( angle ) ) * radius * 0.4f
>18170	MultiplicativeExpression	radius * 0.4f
>18171	PrimaryExpression	0.4f
>18172	Identifier	radius
>18173	CallExpression	Vector ( sinf ( angle ) , cosf ( angle ) )
>18174	ArgumentList	sinf ( angle )
>18175	Argument	cosf ( angle )
>18176	CallExpression	cosf ( angle )
>18177	ArgumentList	angle
>18178	Argument	angle
>18179	Identifier	angle
>18180	Callee	cosf
>18181	Identifier	cosf
>18182	Argument	sinf ( angle )
>18183	CallExpression	sinf ( angle )
>18184	ArgumentList	angle
>18185	Argument	angle
>18186	Identifier	angle
>18187	Callee	sinf
>18188	Identifier	sinf
>18189	Callee	Vector
>18190	Identifier	Vector
>18191	Identifier	center
>18192	PtrMemberAccess	songSlots [ i ] -> position
>18193	Identifier	position
>18194	ArrayIndexing	songSlots [ i ]
>18195	Identifier	i
>18196	Identifier	songSlots
>18197	ExpressionStatement	 
>18198	AssignmentExpr	angle = ( float ( inner ) / float ( songSlots . size ( ) - numForms ) ) * PI * 2 + PI
>18199	AdditiveExpression	( float ( inner ) / float ( songSlots . size ( ) - numForms ) ) * PI * 2 + PI
>18200	Identifier	PI
>18201	MultiplicativeExpression	( float ( inner ) / float ( songSlots . size ( ) - numForms ) ) * PI * 2
>18202	MultiplicativeExpression	PI * 2
>18203	PrimaryExpression	2
>18204	Identifier	PI
>18205	MultiplicativeExpression	float ( inner ) / float ( songSlots . size ( ) - numForms )
>18206	CallExpression	float ( songSlots . size ( ) - numForms )
>18207	ArgumentList	songSlots . size ( ) - numForms
>18208	Argument	songSlots . size ( ) - numForms
>18209	AdditiveExpression	songSlots . size ( ) - numForms
>18210	Identifier	numForms
>18211	CallExpression	songSlots . size ( )
>18212	ArgumentList	 
>18213	Callee	songSlots . size
>18214	MemberAccess	songSlots . size
>18215	Identifier	size
>18216	Identifier	songSlots
>18217	Callee	float
>18218	Identifier	float
>18219	CallExpression	float ( inner )
>18220	ArgumentList	inner
>18221	Argument	inner
>18222	Identifier	inner
>18223	Callee	float
>18224	Identifier	float
>18225	Identifier	angle
>18226	CompoundStatement	 
>18227	ExpressionStatement	 
>18228	IncDecOp	outer ++
>18229	IncDec	++
>18230	Identifier	outer
>18231	ExpressionStatement	 
>18232	AssignmentExpr	songSlots [ i ] -> position = center + Vector ( sinf ( angle ) , cosf ( angle ) ) * radius
>18233	AdditiveExpression	center + Vector ( sinf ( angle ) , cosf ( angle ) ) * radius
>18234	MultiplicativeExpression	Vector ( sinf ( angle ) , cosf ( angle ) ) * radius
>18235	Identifier	radius
>18236	CallExpression	Vector ( sinf ( angle ) , cosf ( angle ) )
>18237	ArgumentList	sinf ( angle )
>18238	Argument	cosf ( angle )
>18239	CallExpression	cosf ( angle )
>18240	ArgumentList	angle
>18241	Argument	angle
>18242	Identifier	angle
>18243	Callee	cosf
>18244	Identifier	cosf
>18245	Argument	sinf ( angle )
>18246	CallExpression	sinf ( angle )
>18247	ArgumentList	angle
>18248	Argument	angle
>18249	Identifier	angle
>18250	Callee	sinf
>18251	Identifier	sinf
>18252	Callee	Vector
>18253	Identifier	Vector
>18254	Identifier	center
>18255	PtrMemberAccess	songSlots [ i ] -> position
>18256	Identifier	position
>18257	ArrayIndexing	songSlots [ i ]
>18258	Identifier	i
>18259	Identifier	songSlots
>18260	ExpressionStatement	 
>18261	AssignmentExpr	angle = ( float ( outer ) / float ( numForms ) ) * PI * 2
>18262	MultiplicativeExpression	( float ( outer ) / float ( numForms ) ) * PI * 2
>18263	MultiplicativeExpression	PI * 2
>18264	PrimaryExpression	2
>18265	Identifier	PI
>18266	MultiplicativeExpression	float ( outer ) / float ( numForms )
>18267	CallExpression	float ( numForms )
>18268	ArgumentList	numForms
>18269	Argument	numForms
>18270	Identifier	numForms
>18271	Callee	float
>18272	Identifier	float
>18273	CallExpression	float ( outer )
>18274	ArgumentList	outer
>18275	Argument	outer
>18276	Identifier	outer
>18277	Callee	float
>18278	Identifier	float
>18279	Identifier	angle
>18280	Condition	 
>18281	CallExpression	dsq -> continuity . isSongTypeForm ( s )
>18282	ArgumentList	s
>18283	Argument	s
>18284	Identifier	s
>18285	Callee	dsq -> continuity . isSongTypeForm
>18286	MemberAccess	dsq -> continuity . isSongTypeForm
>18287	Identifier	isSongTypeForm
>18288	PtrMemberAccess	dsq -> continuity
>18289	Identifier	continuity
>18290	Identifier	dsq
>18291	IdentifierDeclStatement	 
>18292	IdentifierDecl	s = ( SongType ) dsq -> continuity . getSongTypeBySlot ( i )
>18293	AssignmentExpr	s = ( SongType ) dsq -> continuity . getSongTypeBySlot ( i )
>18294	CastExpression	( SongType ) dsq -> continuity . getSongTypeBySlot ( i )
>18295	CallExpression	dsq -> continuity . getSongTypeBySlot ( i )
>18296	ArgumentList	i
>18297	Argument	i
>18298	Identifier	i
>18299	Callee	dsq -> continuity . getSongTypeBySlot
>18300	MemberAccess	dsq -> continuity . getSongTypeBySlot
>18301	Identifier	getSongTypeBySlot
>18302	PtrMemberAccess	dsq -> continuity
>18303	Identifier	continuity
>18304	Identifier	dsq
>18305	CastTarget	SongType
>18306	Identifier	s
>18307	Identifier	s
>18308	IdentifierDeclType	SongType
>18309	IdentifierDeclStatement	 
>18310	IdentifierDecl	angle = 0
>18311	AssignmentExpr	angle = 0
>18312	PrimaryExpression	0
>18313	Identifier	angle
>18314	Identifier	angle
>18315	IdentifierDeclType	float
>18316	ExpressionStatement	 
>18317	AssignmentExpr	songSlots [ i ] = new SongSlot ( i )
>18318	Identifier	i
>18319	ArrayIndexing	songSlots [ i ]
>18320	Identifier	i
>18321	Identifier	songSlots
>18322	IncDecOp	 
>18323	IncDec	++
>18324	Identifier	i
>18325	Condition	 
>18326	RelationalExpression	i < songSlots . size ( )
>18327	CallExpression	songSlots . size ( )
>18328	ArgumentList	 
>18329	Callee	songSlots . size
>18330	MemberAccess	songSlots . size
>18331	Identifier	size
>18332	Identifier	songSlots
>18333	Identifier	i
>18334	ForInit	 
>18335	AssignmentExpr	i = 0
>18336	PrimaryExpression	0
>18337	Identifier	i
>18338	IdentifierDeclStatement	 
>18339	IdentifierDecl	inner = 0
>18340	AssignmentExpr	inner = 0
>18341	PrimaryExpression	0
>18342	Identifier	inner
>18343	Identifier	inner
>18344	IdentifierDeclType	int
>18345	IdentifierDeclStatement	 
>18346	IdentifierDecl	outer = 0
>18347	AssignmentExpr	outer = 0
>18348	PrimaryExpression	0
>18349	Identifier	outer
>18350	Identifier	outer
>18351	IdentifierDeclType	int
>18352	ExpressionStatement	 
>18353	CallExpression	menuBg -> addChild ( foodHolders [ 3 ] , PM_POINTER )
>18354	ArgumentList	foodHolders [ 3 ]
>18355	Argument	PM_POINTER
>18356	Identifier	PM_POINTER
>18357	Argument	foodHolders [ 3 ]
>18358	ArrayIndexing	foodHolders [ 3 ]
>18359	PrimaryExpression	3
>18360	Identifier	foodHolders
>18361	Callee	menuBg -> addChild
>18362	PtrMemberAccess	menuBg -> addChild
>18363	Identifier	addChild
>18364	Identifier	menuBg
>18365	ExpressionStatement	 
>18366	AssignmentExpr	foodHolders [ 3 ] -> position = rightCenter + Vector ( 96 , 150 )
>18367	AdditiveExpression	rightCenter + Vector ( 96 , 150 )
>18368	CallExpression	Vector ( 96 , 150 )
>18369	ArgumentList	96
>18370	Argument	150
>18371	PrimaryExpression	150
>18372	Argument	96
>18373	PrimaryExpression	96
>18374	Callee	Vector
>18375	Identifier	Vector
>18376	Identifier	rightCenter
>18377	PtrMemberAccess	foodHolders [ 3 ] -> position
>18378	Identifier	position
>18379	ArrayIndexing	foodHolders [ 3 ]
>18380	PrimaryExpression	3
>18381	Identifier	foodHolders
>18382	ExpressionStatement	 
>18383	AssignmentExpr	foodHolders [ 3 ] -> alpha = 0
>18384	PrimaryExpression	0
>18385	PtrMemberAccess	foodHolders [ 3 ] -> alpha
>18386	Identifier	alpha
>18387	ArrayIndexing	foodHolders [ 3 ]
>18388	PrimaryExpression	3
>18389	Identifier	foodHolders
>18390	ExpressionStatement	 
>18391	AssignmentExpr	foodHolders [ 3 ] = new FoodHolder ( - 1 , true )
>18392	Expression	- 1 , true
>18393	Identifier	true
>18394	UnaryOp	- 1
>18395	PrimaryExpression	1
>18396	UnaryOperator	-
>18397	ArrayIndexing	foodHolders [ 3 ]
>18398	PrimaryExpression	3
>18399	Identifier	foodHolders
>18400	ExpressionStatement	 
>18401	CallExpression	foodHolders . resize ( 4 )
>18402	ArgumentList	4
>18403	Argument	4
>18404	PrimaryExpression	4
>18405	Callee	foodHolders . resize
>18406	MemberAccess	foodHolders . resize
>18407	Identifier	resize
>18408	Identifier	foodHolders
>18409	ForStatement	for ( i = 0 ; i < petSlots . size ( ) ; i ++ )
>18410	CompoundStatement	 
>18411	IfStatement	if ( p )
>18412	CompoundStatement	 
>18413	ExpressionStatement	 
>18414	CallExpression	menuBg -> addChild ( petSlots [ i ] , PM_POINTER )
>18415	ArgumentList	petSlots [ i ]
>18416	Argument	PM_POINTER
>18417	Identifier	PM_POINTER
>18418	Argument	petSlots [ i ]
>18419	ArrayIndexing	petSlots [ i ]
>18420	Identifier	i
>18421	Identifier	petSlots
>18422	Callee	menuBg -> addChild
>18423	PtrMemberAccess	menuBg -> addChild
>18424	Identifier	addChild
>18425	Identifier	menuBg
>18426	ExpressionStatement	 
>18427	AssignmentExpr	petSlots [ i ] -> position = center + Vector ( sinf ( angle ) , cosf ( angle ) ) * ( radius * 0.9f )
>18428	AdditiveExpression	center + Vector ( sinf ( angle ) , cosf ( angle ) ) * ( radius * 0.9f )
>18429	MultiplicativeExpression	Vector ( sinf ( angle ) , cosf ( angle ) ) * ( radius * 0.9f )
>18430	MultiplicativeExpression	radius * 0.9f
>18431	PrimaryExpression	0.9f
>18432	Identifier	radius
>18433	CallExpression	Vector ( sinf ( angle ) , cosf ( angle ) )
>18434	ArgumentList	sinf ( angle )
>18435	Argument	cosf ( angle )
>18436	CallExpression	cosf ( angle )
>18437	ArgumentList	angle
>18438	Argument	angle
>18439	Identifier	angle
>18440	Callee	cosf
>18441	Identifier	cosf
>18442	Argument	sinf ( angle )
>18443	CallExpression	sinf ( angle )
>18444	ArgumentList	angle
>18445	Argument	angle
>18446	Identifier	angle
>18447	Callee	sinf
>18448	Identifier	sinf
>18449	Callee	Vector
>18450	Identifier	Vector
>18451	Identifier	center
>18452	PtrMemberAccess	petSlots [ i ] -> position
>18453	Identifier	position
>18454	ArrayIndexing	petSlots [ i ]
>18455	Identifier	i
>18456	Identifier	petSlots
>18457	IdentifierDeclStatement	 
>18458	IdentifierDecl	angle = ( float ( i ) / float ( petSlots . size ( ) ) ) * PI * 2
>18459	AssignmentExpr	angle = ( float ( i ) / float ( petSlots . size ( ) ) ) * PI * 2
>18460	MultiplicativeExpression	( float ( i ) / float ( petSlots . size ( ) ) ) * PI * 2
>18461	MultiplicativeExpression	PI * 2
>18462	PrimaryExpression	2
>18463	Identifier	PI
>18464	MultiplicativeExpression	float ( i ) / float ( petSlots . size ( ) )
>18465	CallExpression	float ( petSlots . size ( ) )
>18466	ArgumentList	petSlots . size ( )
>18467	Argument	petSlots . size ( )
>18468	CallExpression	petSlots . size ( )
>18469	ArgumentList	 
>18470	Callee	petSlots . size
>18471	MemberAccess	petSlots . size
>18472	Identifier	size
>18473	Identifier	petSlots
>18474	Callee	float
>18475	Identifier	float
>18476	CallExpression	float ( i )
>18477	ArgumentList	i
>18478	Argument	i
>18479	Identifier	i
>18480	Callee	float
>18481	Identifier	float
>18482	Identifier	angle
>18483	Identifier	angle
>18484	IdentifierDeclType	float
>18485	ExpressionStatement	 
>18486	AssignmentExpr	petSlots [ i ] -> alpha = 0
>18487	PrimaryExpression	0
>18488	PtrMemberAccess	petSlots [ i ] -> alpha
>18489	Identifier	alpha
>18490	ArrayIndexing	petSlots [ i ]
>18491	Identifier	i
>18492	Identifier	petSlots
>18493	ExpressionStatement	 
>18494	AssignmentExpr	petSlots [ i ] = new PetSlot ( i )
>18495	Identifier	i
>18496	ArrayIndexing	petSlots [ i ]
>18497	Identifier	i
>18498	Identifier	petSlots
>18499	Condition	 
>18500	Identifier	p
>18501	IdentifierDeclStatement	 
>18502	IdentifierDecl	* p = dsq -> continuity . getPetData ( i )
>18503	AssignmentExpr	* p = dsq -> continuity . getPetData ( i )
>18504	CallExpression	dsq -> continuity . getPetData ( i )
>18505	ArgumentList	i
>18506	Argument	i
>18507	Identifier	i
>18508	Callee	dsq -> continuity . getPetData
>18509	MemberAccess	dsq -> continuity . getPetData
>18510	Identifier	getPetData
>18511	PtrMemberAccess	dsq -> continuity
>18512	Identifier	continuity
>18513	Identifier	dsq
>18514	Identifier	p
>18515	Identifier	p
>18516	IdentifierDeclType	PetData *
>18517	IncDecOp	 
>18518	IncDec	++
>18519	Identifier	i
>18520	Condition	 
>18521	RelationalExpression	i < petSlots . size ( )
>18522	CallExpression	petSlots . size ( )
>18523	ArgumentList	 
>18524	Callee	petSlots . size
>18525	MemberAccess	petSlots . size
>18526	Identifier	size
>18527	Identifier	petSlots
>18528	Identifier	i
>18529	ForInit	 
>18530	AssignmentExpr	i = 0
>18531	PrimaryExpression	0
>18532	Identifier	i
>18533	ExpressionStatement	 
>18534	CallExpression	petSlots . resize ( dsq -> continuity . petData . size ( ) )
>18535	ArgumentList	dsq -> continuity . petData . size ( )
>18536	Argument	dsq -> continuity . petData . size ( )
>18537	CallExpression	dsq -> continuity . petData . size ( )
>18538	ArgumentList	 
>18539	Callee	dsq -> continuity . petData . size
>18540	MemberAccess	dsq -> continuity . petData . size
>18541	Identifier	size
>18542	MemberAccess	dsq -> continuity . petData
>18543	Identifier	petData
>18544	PtrMemberAccess	dsq -> continuity
>18545	Identifier	continuity
>18546	Identifier	dsq
>18547	Callee	petSlots . resize
>18548	MemberAccess	petSlots . resize
>18549	Identifier	resize
>18550	Identifier	petSlots
>18551	ExpressionStatement	 
>18552	CallExpression	addRenderObject ( recipeMenu . nextPage , LR_RECIPES )
>18553	ArgumentList	recipeMenu . nextPage
>18554	Argument	LR_RECIPES
>18555	Identifier	LR_RECIPES
>18556	Argument	recipeMenu . nextPage
>18557	MemberAccess	recipeMenu . nextPage
>18558	Identifier	nextPage
>18559	Identifier	recipeMenu
>18560	Callee	addRenderObject
>18561	Identifier	addRenderObject
>18562	ExpressionStatement	 
>18563	AssignmentExpr	recipeMenu . nextPage -> scale = Vector ( 0.8 , 0.8 )
>18564	CallExpression	Vector ( 0.8 , 0.8 )
>18565	ArgumentList	0.8
>18566	Argument	0.8
>18567	PrimaryExpression	0.8
>18568	Argument	0.8
>18569	PrimaryExpression	0.8
>18570	Callee	Vector
>18571	Identifier	Vector
>18572	PtrMemberAccess	recipeMenu . nextPage -> scale
>18573	Identifier	scale
>18574	MemberAccess	recipeMenu . nextPage
>18575	Identifier	nextPage
>18576	Identifier	recipeMenu
>18577	ExpressionStatement	 
>18578	CallExpression	recipeMenu . nextPage -> event . set ( MakeFunctionEvent ( Game , onNextRecipePage ) )
>18579	ArgumentList	MakeFunctionEvent ( Game , onNextRecipePage )
>18580	Argument	MakeFunctionEvent ( Game , onNextRecipePage )
>18581	CallExpression	MakeFunctionEvent ( Game , onNextRecipePage )
>18582	ArgumentList	Game
>18583	Argument	onNextRecipePage
>18584	Identifier	onNextRecipePage
>18585	Argument	Game
>18586	Identifier	Game
>18587	Callee	MakeFunctionEvent
>18588	Identifier	MakeFunctionEvent
>18589	Callee	recipeMenu . nextPage -> event . set
>18590	MemberAccess	recipeMenu . nextPage -> event . set
>18591	Identifier	set
>18592	PtrMemberAccess	recipeMenu . nextPage -> event
>18593	Identifier	event
>18594	MemberAccess	recipeMenu . nextPage
>18595	Identifier	nextPage
>18596	Identifier	recipeMenu
>18597	ExpressionStatement	 
>18598	AssignmentExpr	recipeMenu . nextPage -> alpha = 0
>18599	PrimaryExpression	0
>18600	PtrMemberAccess	recipeMenu . nextPage -> alpha
>18601	Identifier	alpha
>18602	MemberAccess	recipeMenu . nextPage
>18603	Identifier	nextPage
>18604	Identifier	recipeMenu
>18605	ExpressionStatement	 
>18606	AssignmentExpr	recipeMenu . nextPage -> position = Vector ( scrollx + 150 , 410 )
>18607	CallExpression	Vector ( scrollx + 150 , 410 )
>18608	ArgumentList	scrollx + 150
>18609	Argument	410
>18610	PrimaryExpression	410
>18611	Argument	scrollx + 150
>18612	AdditiveExpression	scrollx + 150
>18613	PrimaryExpression	150
>18614	Identifier	scrollx
>18615	Callee	Vector
>18616	Identifier	Vector
>18617	PtrMemberAccess	recipeMenu . nextPage -> position
>18618	Identifier	position
>18619	MemberAccess	recipeMenu . nextPage
>18620	Identifier	nextPage
>18621	Identifier	recipeMenu
>18622	ExpressionStatement	 
>18623	CallExpression	recipeMenu . nextPage -> useGlow ( \"particles/glow\" , 64 , 32 )
>18624	ArgumentList	\"particles/glow\"
>18625	Argument	32
>18626	PrimaryExpression	32
>18627	Argument	64
>18628	PrimaryExpression	64
>18629	Argument	\"particles/glow\"
>18630	PrimaryExpression	\"particles/glow\"
>18631	Callee	recipeMenu . nextPage -> useGlow
>18632	PtrMemberAccess	recipeMenu . nextPage -> useGlow
>18633	Identifier	useGlow
>18634	MemberAccess	recipeMenu . nextPage
>18635	Identifier	nextPage
>18636	Identifier	recipeMenu
>18637	ExpressionStatement	 
>18638	CallExpression	recipeMenu . nextPage -> useSound ( \"click\" )
>18639	ArgumentList	\"click\"
>18640	Argument	\"click\"
>18641	PrimaryExpression	\"click\"
>18642	Callee	recipeMenu . nextPage -> useSound
>18643	PtrMemberAccess	recipeMenu . nextPage -> useSound
>18644	Identifier	useSound
>18645	MemberAccess	recipeMenu . nextPage
>18646	Identifier	nextPage
>18647	Identifier	recipeMenu
>18648	ExpressionStatement	 
>18649	CallExpression	recipeMenu . nextPage -> useQuad ( \"Gui/arrow-right\" )
>18650	ArgumentList	\"Gui/arrow-right\"
>18651	Argument	\"Gui/arrow-right\"
>18652	PrimaryExpression	\"Gui/arrow-right\"
>18653	Callee	recipeMenu . nextPage -> useQuad
>18654	PtrMemberAccess	recipeMenu . nextPage -> useQuad
>18655	Identifier	useQuad
>18656	MemberAccess	recipeMenu . nextPage
>18657	Identifier	nextPage
>18658	Identifier	recipeMenu
>18659	ExpressionStatement	 
>18660	Identifier	AquariaMenuItem
>18661	Statement	 
>18662	Statement	 
>18663	Statement	 
>18664	Statement	 
>18665	Statement	 
>18666	ExpressionStatement	 
>18667	CallExpression	addRenderObject ( recipeMenu . prevPage , LR_RECIPES )
>18668	ArgumentList	recipeMenu . prevPage
>18669	Argument	LR_RECIPES
>18670	Identifier	LR_RECIPES
>18671	Argument	recipeMenu . prevPage
>18672	MemberAccess	recipeMenu . prevPage
>18673	Identifier	prevPage
>18674	Identifier	recipeMenu
>18675	Callee	addRenderObject
>18676	Identifier	addRenderObject
>18677	ExpressionStatement	 
>18678	AssignmentExpr	recipeMenu . prevPage -> scale = Vector ( 0.8 , 0.8 )
>18679	CallExpression	Vector ( 0.8 , 0.8 )
>18680	ArgumentList	0.8
>18681	Argument	0.8
>18682	PrimaryExpression	0.8
>18683	Argument	0.8
>18684	PrimaryExpression	0.8
>18685	Callee	Vector
>18686	Identifier	Vector
>18687	PtrMemberAccess	recipeMenu . prevPage -> scale
>18688	Identifier	scale
>18689	MemberAccess	recipeMenu . prevPage
>18690	Identifier	prevPage
>18691	Identifier	recipeMenu
>18692	ExpressionStatement	 
>18693	CallExpression	recipeMenu . prevPage -> event . set ( MakeFunctionEvent ( Game , onPrevRecipePage ) )
>18694	ArgumentList	MakeFunctionEvent ( Game , onPrevRecipePage )
>18695	Argument	MakeFunctionEvent ( Game , onPrevRecipePage )
>18696	CallExpression	MakeFunctionEvent ( Game , onPrevRecipePage )
>18697	ArgumentList	Game
>18698	Argument	onPrevRecipePage
>18699	Identifier	onPrevRecipePage
>18700	Argument	Game
>18701	Identifier	Game
>18702	Callee	MakeFunctionEvent
>18703	Identifier	MakeFunctionEvent
>18704	Callee	recipeMenu . prevPage -> event . set
>18705	MemberAccess	recipeMenu . prevPage -> event . set
>18706	Identifier	set
>18707	PtrMemberAccess	recipeMenu . prevPage -> event
>18708	Identifier	event
>18709	MemberAccess	recipeMenu . prevPage
>18710	Identifier	prevPage
>18711	Identifier	recipeMenu
>18712	ExpressionStatement	 
>18713	AssignmentExpr	recipeMenu . prevPage -> alpha = 0
>18714	PrimaryExpression	0
>18715	PtrMemberAccess	recipeMenu . prevPage -> alpha
>18716	Identifier	alpha
>18717	MemberAccess	recipeMenu . prevPage
>18718	Identifier	prevPage
>18719	Identifier	recipeMenu
>18720	ExpressionStatement	 
>18721	AssignmentExpr	recipeMenu . prevPage -> position = Vector ( scrollx - 150 , 410 )
>18722	CallExpression	Vector ( scrollx - 150 , 410 )
>18723	ArgumentList	scrollx - 150
>18724	Argument	410
>18725	PrimaryExpression	410
>18726	Argument	scrollx - 150
>18727	AdditiveExpression	scrollx - 150
>18728	PrimaryExpression	150
>18729	Identifier	scrollx
>18730	Callee	Vector
>18731	Identifier	Vector
>18732	PtrMemberAccess	recipeMenu . prevPage -> position
>18733	Identifier	position
>18734	MemberAccess	recipeMenu . prevPage
>18735	Identifier	prevPage
>18736	Identifier	recipeMenu
>18737	ExpressionStatement	 
>18738	CallExpression	recipeMenu . prevPage -> useGlow ( \"particles/glow\" , 64 , 32 )
>18739	ArgumentList	\"particles/glow\"
>18740	Argument	32
>18741	PrimaryExpression	32
>18742	Argument	64
>18743	PrimaryExpression	64
>18744	Argument	\"particles/glow\"
>18745	PrimaryExpression	\"particles/glow\"
>18746	Callee	recipeMenu . prevPage -> useGlow
>18747	PtrMemberAccess	recipeMenu . prevPage -> useGlow
>18748	Identifier	useGlow
>18749	MemberAccess	recipeMenu . prevPage
>18750	Identifier	prevPage
>18751	Identifier	recipeMenu
>18752	ExpressionStatement	 
>18753	CallExpression	recipeMenu . prevPage -> useSound ( \"click\" )
>18754	ArgumentList	\"click\"
>18755	Argument	\"click\"
>18756	PrimaryExpression	\"click\"
>18757	Callee	recipeMenu . prevPage -> useSound
>18758	PtrMemberAccess	recipeMenu . prevPage -> useSound
>18759	Identifier	useSound
>18760	MemberAccess	recipeMenu . prevPage
>18761	Identifier	prevPage
>18762	Identifier	recipeMenu
>18763	ExpressionStatement	 
>18764	CallExpression	recipeMenu . prevPage -> useQuad ( \"Gui/arrow-left\" )
>18765	ArgumentList	\"Gui/arrow-left\"
>18766	Argument	\"Gui/arrow-left\"
>18767	PrimaryExpression	\"Gui/arrow-left\"
>18768	Callee	recipeMenu . prevPage -> useQuad
>18769	PtrMemberAccess	recipeMenu . prevPage -> useQuad
>18770	Identifier	useQuad
>18771	MemberAccess	recipeMenu . prevPage
>18772	Identifier	prevPage
>18773	Identifier	recipeMenu
>18774	ExpressionStatement	 
>18775	Identifier	AquariaMenuItem
>18776	Statement	 
>18777	Statement	 
>18778	Statement	 
>18779	Statement	 
>18780	Statement	 
>18781	ExpressionStatement	 
>18782	CallExpression	addRenderObject ( recipeMenu . page , LR_RECIPES )
>18783	ArgumentList	recipeMenu . page
>18784	Argument	LR_RECIPES
>18785	Identifier	LR_RECIPES
>18786	Argument	recipeMenu . page
>18787	MemberAccess	recipeMenu . page
>18788	Identifier	page
>18789	Identifier	recipeMenu
>18790	Callee	addRenderObject
>18791	Identifier	addRenderObject
>18792	ExpressionStatement	 
>18793	AssignmentExpr	recipeMenu . page -> alpha = 0
>18794	PrimaryExpression	0
>18795	PtrMemberAccess	recipeMenu . page -> alpha
>18796	Identifier	alpha
>18797	MemberAccess	recipeMenu . page
>18798	Identifier	page
>18799	Identifier	recipeMenu
>18800	ExpressionStatement	 
>18801	CallExpression	recipeMenu . page -> setText ( dsq -> continuity . stringBank . get ( 2006 ) )
>18802	ArgumentList	dsq -> continuity . stringBank . get ( 2006 )
>18803	Argument	dsq -> continuity . stringBank . get ( 2006 )
>18804	CallExpression	dsq -> continuity . stringBank . get ( 2006 )
>18805	ArgumentList	2006
>18806	Argument	2006
>18807	PrimaryExpression	2006
>18808	Callee	dsq -> continuity . stringBank . get
>18809	MemberAccess	dsq -> continuity . stringBank . get
>18810	Identifier	get
>18811	MemberAccess	dsq -> continuity . stringBank
>18812	Identifier	stringBank
>18813	PtrMemberAccess	dsq -> continuity
>18814	Identifier	continuity
>18815	Identifier	dsq
>18816	Callee	recipeMenu . page -> setText
>18817	PtrMemberAccess	recipeMenu . page -> setText
>18818	Identifier	setText
>18819	MemberAccess	recipeMenu . page
>18820	Identifier	page
>18821	Identifier	recipeMenu
>18822	ExpressionStatement	 
>18823	AssignmentExpr	recipeMenu . page -> position = Vector ( scrollx , 400 )
>18824	CallExpression	Vector ( scrollx , 400 )
>18825	ArgumentList	scrollx
>18826	Argument	400
>18827	PrimaryExpression	400
>18828	Argument	scrollx
>18829	Identifier	scrollx
>18830	Callee	Vector
>18831	Identifier	Vector
>18832	PtrMemberAccess	recipeMenu . page -> position
>18833	Identifier	position
>18834	MemberAccess	recipeMenu . page
>18835	Identifier	page
>18836	Identifier	recipeMenu
>18837	ExpressionStatement	 
>18838	AssignmentExpr	recipeMenu . page -> followCamera = 1
>18839	PrimaryExpression	1
>18840	PtrMemberAccess	recipeMenu . page -> followCamera
>18841	Identifier	followCamera
>18842	MemberAccess	recipeMenu . page
>18843	Identifier	page
>18844	Identifier	recipeMenu
>18845	ExpressionStatement	 
>18846	AssignmentExpr	recipeMenu . page -> color = 0
>18847	PrimaryExpression	0
>18848	PtrMemberAccess	recipeMenu . page -> color
>18849	Identifier	color
>18850	MemberAccess	recipeMenu . page
>18851	Identifier	page
>18852	Identifier	recipeMenu
>18853	ExpressionStatement	 
>18854	AssignmentExpr	recipeMenu . page = new BitmapText ( & dsq -> smallFont )
>18855	UnaryOp	& dsq -> smallFont
>18856	PtrMemberAccess	dsq -> smallFont
>18857	Identifier	smallFont
>18858	Identifier	dsq
>18859	UnaryOperator	&
>18860	MemberAccess	recipeMenu . page
>18861	Identifier	page
>18862	Identifier	recipeMenu
>18863	ExpressionStatement	 
>18864	CallExpression	addRenderObject ( recipeMenu . header , LR_RECIPES )
>18865	ArgumentList	recipeMenu . header
>18866	Argument	LR_RECIPES
>18867	Identifier	LR_RECIPES
>18868	Argument	recipeMenu . header
>18869	MemberAccess	recipeMenu . header
>18870	Identifier	header
>18871	Identifier	recipeMenu
>18872	Callee	addRenderObject
>18873	Identifier	addRenderObject
>18874	ExpressionStatement	 
>18875	AssignmentExpr	recipeMenu . header -> position = Vector ( scrollx , 5 )
>18876	CallExpression	Vector ( scrollx , 5 )
>18877	ArgumentList	scrollx
>18878	Argument	5
>18879	PrimaryExpression	5
>18880	Argument	scrollx
>18881	Identifier	scrollx
>18882	Callee	Vector
>18883	Identifier	Vector
>18884	PtrMemberAccess	recipeMenu . header -> position
>18885	Identifier	position
>18886	MemberAccess	recipeMenu . header
>18887	Identifier	header
>18888	Identifier	recipeMenu
>18889	ExpressionStatement	 
>18890	AssignmentExpr	recipeMenu . header -> alpha = 0
>18891	PrimaryExpression	0
>18892	PtrMemberAccess	recipeMenu . header -> alpha
>18893	Identifier	alpha
>18894	MemberAccess	recipeMenu . header
>18895	Identifier	header
>18896	Identifier	recipeMenu
>18897	ExpressionStatement	 
>18898	CallExpression	recipeMenu . header -> setText ( dsq -> continuity . stringBank . get ( 2007 ) )
>18899	ArgumentList	dsq -> continuity . stringBank . get ( 2007 )
>18900	Argument	dsq -> continuity . stringBank . get ( 2007 )
>18901	CallExpression	dsq -> continuity . stringBank . get ( 2007 )
>18902	ArgumentList	2007
>18903	Argument	2007
>18904	PrimaryExpression	2007
>18905	Callee	dsq -> continuity . stringBank . get
>18906	MemberAccess	dsq -> continuity . stringBank . get
>18907	Identifier	get
>18908	MemberAccess	dsq -> continuity . stringBank
>18909	Identifier	stringBank
>18910	PtrMemberAccess	dsq -> continuity
>18911	Identifier	continuity
>18912	Identifier	dsq
>18913	Callee	recipeMenu . header -> setText
>18914	PtrMemberAccess	recipeMenu . header -> setText
>18915	Identifier	setText
>18916	MemberAccess	recipeMenu . header
>18917	Identifier	header
>18918	Identifier	recipeMenu
>18919	ExpressionStatement	 
>18920	AssignmentExpr	recipeMenu . header -> followCamera = 1
>18921	PrimaryExpression	1
>18922	PtrMemberAccess	recipeMenu . header -> followCamera
>18923	Identifier	followCamera
>18924	MemberAccess	recipeMenu . header
>18925	Identifier	header
>18926	Identifier	recipeMenu
>18927	ExpressionStatement	 
>18928	AssignmentExpr	recipeMenu . header -> color = 0
>18929	PrimaryExpression	0
>18930	PtrMemberAccess	recipeMenu . header -> color
>18931	Identifier	color
>18932	MemberAccess	recipeMenu . header
>18933	Identifier	header
>18934	Identifier	recipeMenu
>18935	ExpressionStatement	 
>18936	AssignmentExpr	recipeMenu . header = new BitmapText ( & dsq -> font )
>18937	UnaryOp	& dsq -> font
>18938	PtrMemberAccess	dsq -> font
>18939	Identifier	font
>18940	Identifier	dsq
>18941	UnaryOperator	&
>18942	MemberAccess	recipeMenu . header
>18943	Identifier	header
>18944	Identifier	recipeMenu
>18945	ExpressionStatement	 
>18946	CallExpression	addRenderObject ( recipeMenu . scrollEnd , LR_RECIPES )
>18947	ArgumentList	recipeMenu . scrollEnd
>18948	Argument	LR_RECIPES
>18949	Identifier	LR_RECIPES
>18950	Argument	recipeMenu . scrollEnd
>18951	MemberAccess	recipeMenu . scrollEnd
>18952	Identifier	scrollEnd
>18953	Identifier	recipeMenu
>18954	Callee	addRenderObject
>18955	Identifier	addRenderObject
>18956	ExpressionStatement	 
>18957	AssignmentExpr	recipeMenu . scrollEnd -> alpha = 0
>18958	PrimaryExpression	0
>18959	PtrMemberAccess	recipeMenu . scrollEnd -> alpha
>18960	Identifier	alpha
>18961	MemberAccess	recipeMenu . scrollEnd
>18962	Identifier	scrollEnd
>18963	Identifier	recipeMenu
>18964	ExpressionStatement	 
>18965	AssignmentExpr	recipeMenu . scrollEnd -> followCamera = 1
>18966	PrimaryExpression	1
>18967	PtrMemberAccess	recipeMenu . scrollEnd -> followCamera
>18968	Identifier	followCamera
>18969	MemberAccess	recipeMenu . scrollEnd
>18970	Identifier	scrollEnd
>18971	Identifier	recipeMenu
>18972	ExpressionStatement	 
>18973	AssignmentExpr	recipeMenu . scrollEnd = new Quad ( \"gui/recipe-scroll-end\" , Vector ( scrollx , 400 ) )
>18974	Expression	\"gui/recipe-scroll-end\" , Vector ( scrollx , 400 )
>18975	CallExpression	Vector ( scrollx , 400 )
>18976	ArgumentList	scrollx
>18977	Argument	400
>18978	PrimaryExpression	400
>18979	Argument	scrollx
>18980	Identifier	scrollx
>18981	Callee	Vector
>18982	Identifier	Vector
>18983	PrimaryExpression	\"gui/recipe-scroll-end\"
>18984	MemberAccess	recipeMenu . scrollEnd
>18985	Identifier	scrollEnd
>18986	Identifier	recipeMenu
>18987	ExpressionStatement	 
>18988	CallExpression	addRenderObject ( recipeMenu . scroll , LR_RECIPES )
>18989	ArgumentList	recipeMenu . scroll
>18990	Argument	LR_RECIPES
>18991	Identifier	LR_RECIPES
>18992	Argument	recipeMenu . scroll
>18993	MemberAccess	recipeMenu . scroll
>18994	Identifier	scroll
>18995	Identifier	recipeMenu
>18996	Callee	addRenderObject
>18997	Identifier	addRenderObject
>18998	ExpressionStatement	 
>18999	AssignmentExpr	recipeMenu . scroll -> alpha = 0
>19000	PrimaryExpression	0
>19001	PtrMemberAccess	recipeMenu . scroll -> alpha
>19002	Identifier	alpha
>19003	MemberAccess	recipeMenu . scroll
>19004	Identifier	scroll
>19005	Identifier	recipeMenu
>19006	ExpressionStatement	 
>19007	AssignmentExpr	recipeMenu . scroll -> followCamera = 1
>19008	PrimaryExpression	1
>19009	PtrMemberAccess	recipeMenu . scroll -> followCamera
>19010	Identifier	followCamera
>19011	MemberAccess	recipeMenu . scroll
>19012	Identifier	scroll
>19013	Identifier	recipeMenu
>19014	ExpressionStatement	 
>19015	AssignmentExpr	recipeMenu . scroll = new Quad ( \"gui/recipe-scroll\" , Vector ( scrollx , 200 ) )
>19016	Expression	\"gui/recipe-scroll\" , Vector ( scrollx , 200 )
>19017	CallExpression	Vector ( scrollx , 200 )
>19018	ArgumentList	scrollx
>19019	Argument	200
>19020	PrimaryExpression	200
>19021	Argument	scrollx
>19022	Identifier	scrollx
>19023	Callee	Vector
>19024	Identifier	Vector
>19025	PrimaryExpression	\"gui/recipe-scroll\"
>19026	MemberAccess	recipeMenu . scroll
>19027	Identifier	scroll
>19028	Identifier	recipeMenu
>19029	IdentifierDeclStatement	 
>19030	IdentifierDecl	scrollx = 555
>19031	AssignmentExpr	scrollx = 555
>19032	PrimaryExpression	555
>19033	Identifier	scrollx
>19034	Identifier	scrollx
>19035	IdentifierDeclType	float
>19036	ExpressionStatement	 
>19037	CallExpression	addRenderObject ( showRecipe , LR_MENU )
>19038	ArgumentList	showRecipe
>19039	Argument	LR_MENU
>19040	Identifier	LR_MENU
>19041	Argument	showRecipe
>19042	Identifier	showRecipe
>19043	Callee	addRenderObject
>19044	Identifier	addRenderObject
>19045	ExpressionStatement	 
>19046	AssignmentExpr	showRecipe -> position = Vector ( 575 , 250 )
>19047	CallExpression	Vector ( 575 , 250 )
>19048	ArgumentList	575
>19049	Argument	250
>19050	PrimaryExpression	250
>19051	Argument	575
>19052	PrimaryExpression	575
>19053	Callee	Vector
>19054	Identifier	Vector
>19055	PtrMemberAccess	showRecipe -> position
>19056	Identifier	position
>19057	Identifier	showRecipe
>19058	ExpressionStatement	 
>19059	AssignmentExpr	showRecipe -> followCamera = 1
>19060	PrimaryExpression	1
>19061	PtrMemberAccess	showRecipe -> followCamera
>19062	Identifier	followCamera
>19063	Identifier	showRecipe
>19064	ExpressionStatement	 
>19065	AssignmentExpr	showRecipe = new Quad ( )
>19066	UnaryExpression	new Quad ( )
>19067	Identifier	showRecipe
>19068	ExpressionStatement	 
>19069	CallExpression	addRenderObject ( previewRecipe , LR_MENU )
>19070	ArgumentList	previewRecipe
>19071	Argument	LR_MENU
>19072	Identifier	LR_MENU
>19073	Argument	previewRecipe
>19074	Identifier	previewRecipe
>19075	Callee	addRenderObject
>19076	Identifier	addRenderObject
>19077	ExpressionStatement	 
>19078	AssignmentExpr	previewRecipe -> position = worldRightCenter
>19079	Identifier	worldRightCenter
>19080	PtrMemberAccess	previewRecipe -> position
>19081	Identifier	position
>19082	Identifier	previewRecipe
>19083	ExpressionStatement	 
>19084	CallExpression	previewRecipe -> scale . interpolateTo ( Vector ( 0.9 , 0.9 ) , 0.5 , - 1 , 1 , 1 )
>19085	ArgumentList	Vector ( 0.9 , 0.9 )
>19086	Argument	1
>19087	PrimaryExpression	1
>19088	Argument	1
>19089	PrimaryExpression	1
>19090	Argument	- 1
>19091	UnaryOp	- 1
>19092	PrimaryExpression	1
>19093	UnaryOperator	-
>19094	Argument	0.5
>19095	PrimaryExpression	0.5
>19096	Argument	Vector ( 0.9 , 0.9 )
>19097	CallExpression	Vector ( 0.9 , 0.9 )
>19098	ArgumentList	0.9
>19099	Argument	0.9
>19100	PrimaryExpression	0.9
>19101	Argument	0.9
>19102	PrimaryExpression	0.9
>19103	Callee	Vector
>19104	Identifier	Vector
>19105	Callee	previewRecipe -> scale . interpolateTo
>19106	MemberAccess	previewRecipe -> scale . interpolateTo
>19107	Identifier	interpolateTo
>19108	PtrMemberAccess	previewRecipe -> scale
>19109	Identifier	scale
>19110	Identifier	previewRecipe
>19111	ExpressionStatement	 
>19112	AssignmentExpr	previewRecipe -> scale = Vector ( 0.7 , 0.7 )
>19113	CallExpression	Vector ( 0.7 , 0.7 )
>19114	ArgumentList	0.7
>19115	Argument	0.7
>19116	PrimaryExpression	0.7
>19117	Argument	0.7
>19118	PrimaryExpression	0.7
>19119	Callee	Vector
>19120	Identifier	Vector
>19121	PtrMemberAccess	previewRecipe -> scale
>19122	Identifier	scale
>19123	Identifier	previewRecipe
>19124	ExpressionStatement	 
>19125	AssignmentExpr	previewRecipe -> alpha = 0
>19126	PrimaryExpression	0
>19127	PtrMemberAccess	previewRecipe -> alpha
>19128	Identifier	alpha
>19129	Identifier	previewRecipe
>19130	ExpressionStatement	 
>19131	AssignmentExpr	previewRecipe -> followCamera = 1
>19132	PrimaryExpression	1
>19133	PtrMemberAccess	previewRecipe -> followCamera
>19134	Identifier	followCamera
>19135	Identifier	previewRecipe
>19136	ExpressionStatement	 
>19137	AssignmentExpr	previewRecipe -> alphaMod = 0.75
>19138	PrimaryExpression	0.75
>19139	PtrMemberAccess	previewRecipe -> alphaMod
>19140	Identifier	alphaMod
>19141	Identifier	previewRecipe
>19142	ExpressionStatement	 
>19143	Identifier	Quad
>19144	Statement	 
>19145	Statement	 
>19146	Statement	 
>19147	ForStatement	for ( i = 0 ; i < foodHolders . size ( ) ; i ++ )
>19148	CompoundStatement	 
>19149	ExpressionStatement	 
>19150	CallExpression	menuBg -> addChild ( foodHolders [ i ] , PM_POINTER )
>19151	ArgumentList	foodHolders [ i ]
>19152	Argument	PM_POINTER
>19153	Identifier	PM_POINTER
>19154	Argument	foodHolders [ i ]
>19155	ArrayIndexing	foodHolders [ i ]
>19156	Identifier	i
>19157	Identifier	foodHolders
>19158	Callee	menuBg -> addChild
>19159	PtrMemberAccess	menuBg -> addChild
>19160	Identifier	addChild
>19161	Identifier	menuBg
>19162	ExpressionStatement	 
>19163	IncDecOp	holders ++
>19164	IncDec	++
>19165	Identifier	holders
>19166	ExpressionStatement	 
>19167	AssignmentExpr	foodHolders [ i ] -> position = rightCenter + Vector ( sinf ( angle ) , cosf ( angle ) ) * radius
>19168	AdditiveExpression	rightCenter + Vector ( sinf ( angle ) , cosf ( angle ) ) * radius
>19169	MultiplicativeExpression	Vector ( sinf ( angle ) , cosf ( angle ) ) * radius
>19170	Identifier	radius
>19171	CallExpression	Vector ( sinf ( angle ) , cosf ( angle ) )
>19172	ArgumentList	sinf ( angle )
>19173	Argument	cosf ( angle )
>19174	CallExpression	cosf ( angle )
>19175	ArgumentList	angle
>19176	Argument	angle
>19177	Identifier	angle
>19178	Callee	cosf
>19179	Identifier	cosf
>19180	Argument	sinf ( angle )
>19181	CallExpression	sinf ( angle )
>19182	ArgumentList	angle
>19183	Argument	angle
>19184	Identifier	angle
>19185	Callee	sinf
>19186	Identifier	sinf
>19187	Callee	Vector
>19188	Identifier	Vector
>19189	Identifier	rightCenter
>19190	PtrMemberAccess	foodHolders [ i ] -> position
>19191	Identifier	position
>19192	ArrayIndexing	foodHolders [ i ]
>19193	Identifier	i
>19194	Identifier	foodHolders
>19195	IdentifierDeclStatement	 
>19196	IdentifierDecl	angle = ( float ( holders ) / float ( foodHolders . size ( ) ) ) * PI * 2
>19197	AssignmentExpr	angle = ( float ( holders ) / float ( foodHolders . size ( ) ) ) * PI * 2
>19198	MultiplicativeExpression	( float ( holders ) / float ( foodHolders . size ( ) ) ) * PI * 2
>19199	MultiplicativeExpression	PI * 2
>19200	PrimaryExpression	2
>19201	Identifier	PI
>19202	MultiplicativeExpression	float ( holders ) / float ( foodHolders . size ( ) )
>19203	CallExpression	float ( foodHolders . size ( ) )
>19204	ArgumentList	foodHolders . size ( )
>19205	Argument	foodHolders . size ( )
>19206	CallExpression	foodHolders . size ( )
>19207	ArgumentList	 
>19208	Callee	foodHolders . size
>19209	MemberAccess	foodHolders . size
>19210	Identifier	size
>19211	Identifier	foodHolders
>19212	Callee	float
>19213	Identifier	float
>19214	CallExpression	float ( holders )
>19215	ArgumentList	holders
>19216	Argument	holders
>19217	Identifier	holders
>19218	Callee	float
>19219	Identifier	float
>19220	Identifier	angle
>19221	Identifier	angle
>19222	IdentifierDeclType	float
>19223	ExpressionStatement	 
>19224	AssignmentExpr	foodHolders [ i ] -> alpha = 0
>19225	PrimaryExpression	0
>19226	PtrMemberAccess	foodHolders [ i ] -> alpha
>19227	Identifier	alpha
>19228	ArrayIndexing	foodHolders [ i ]
>19229	Identifier	i
>19230	Identifier	foodHolders
>19231	ExpressionStatement	 
>19232	AssignmentExpr	foodHolders [ i ] = new FoodHolder ( i )
>19233	Identifier	i
>19234	ArrayIndexing	foodHolders [ i ]
>19235	Identifier	i
>19236	Identifier	foodHolders
>19237	IncDecOp	 
>19238	IncDec	++
>19239	Identifier	i
>19240	Condition	 
>19241	RelationalExpression	i < foodHolders . size ( )
>19242	CallExpression	foodHolders . size ( )
>19243	ArgumentList	 
>19244	Callee	foodHolders . size
>19245	MemberAccess	foodHolders . size
>19246	Identifier	size
>19247	Identifier	foodHolders
>19248	Identifier	i
>19249	ForInit	 
>19250	AssignmentExpr	i = 0
>19251	PrimaryExpression	0
>19252	Identifier	i
>19253	IdentifierDeclStatement	 
>19254	IdentifierDecl	holders = 0
>19255	AssignmentExpr	holders = 0
>19256	PrimaryExpression	0
>19257	Identifier	holders
>19258	Identifier	holders
>19259	IdentifierDeclType	int
>19260	ExpressionStatement	 
>19261	CallExpression	foodHolders . resize ( 3 )
>19262	ArgumentList	3
>19263	Argument	3
>19264	PrimaryExpression	3
>19265	Callee	foodHolders . resize
>19266	MemberAccess	foodHolders . resize
>19267	Identifier	resize
>19268	Identifier	foodHolders
>19269	ExpressionStatement	 
>19270	CallExpression	addRenderObject ( circlePageNum , LR_MENU )
>19271	ArgumentList	circlePageNum
>19272	Argument	LR_MENU
>19273	Identifier	LR_MENU
>19274	Argument	circlePageNum
>19275	Identifier	circlePageNum
>19276	Callee	addRenderObject
>19277	Identifier	addRenderObject
>19278	ExpressionStatement	 
>19279	AssignmentExpr	circlePageNum -> followCamera = 1
>19280	PrimaryExpression	1
>19281	PtrMemberAccess	circlePageNum -> followCamera
>19282	Identifier	followCamera
>19283	Identifier	circlePageNum
>19284	ExpressionStatement	 
>19285	AssignmentExpr	circlePageNum -> alpha = 0
>19286	PrimaryExpression	0
>19287	PtrMemberAccess	circlePageNum -> alpha
>19288	Identifier	alpha
>19289	Identifier	circlePageNum
>19290	ExpressionStatement	 
>19291	AssignmentExpr	circlePageNum -> position = worldLeftCenter + Vector ( 0 , - 142 )
>19292	AdditiveExpression	worldLeftCenter + Vector ( 0 , - 142 )
>19293	CallExpression	Vector ( 0 , - 142 )
>19294	ArgumentList	0
>19295	Argument	- 142
>19296	UnaryOp	- 142
>19297	PrimaryExpression	142
>19298	UnaryOperator	-
>19299	Argument	0
>19300	PrimaryExpression	0
>19301	Callee	Vector
>19302	Identifier	Vector
>19303	Identifier	worldLeftCenter
>19304	PtrMemberAccess	circlePageNum -> position
>19305	Identifier	position
>19306	Identifier	circlePageNum
>19307	ExpressionStatement	 
>19308	AssignmentExpr	circlePageNum -> color = Vector ( 0 , 0 , 0 )
>19309	CallExpression	Vector ( 0 , 0 , 0 )
>19310	ArgumentList	0
>19311	Argument	0
>19312	PrimaryExpression	0
>19313	Argument	0
>19314	PrimaryExpression	0
>19315	Argument	0
>19316	PrimaryExpression	0
>19317	Callee	Vector
>19318	Identifier	Vector
>19319	PtrMemberAccess	circlePageNum -> color
>19320	Identifier	color
>19321	Identifier	circlePageNum
>19322	ExpressionStatement	 
>19323	AssignmentExpr	circlePageNum = new BitmapText ( & dsq -> smallFont )
>19324	UnaryOp	& dsq -> smallFont
>19325	PtrMemberAccess	dsq -> smallFont
>19326	Identifier	smallFont
>19327	Identifier	dsq
>19328	UnaryOperator	&
>19329	Identifier	circlePageNum
>19330	ExpressionStatement	 
>19331	CallExpression	addRenderObject ( nextTreasure , LR_MENU )
>19332	ArgumentList	nextTreasure
>19333	Argument	LR_MENU
>19334	Identifier	LR_MENU
>19335	Argument	nextTreasure
>19336	Identifier	nextTreasure
>19337	Callee	addRenderObject
>19338	Identifier	addRenderObject
>19339	ExpressionStatement	 
>19340	CallExpression	nextTreasure -> setCanDirMove ( false )
>19341	ArgumentList	false
>19342	Argument	false
>19343	Identifier	false
>19344	Callee	nextTreasure -> setCanDirMove
>19345	PtrMemberAccess	nextTreasure -> setCanDirMove
>19346	Identifier	setCanDirMove
>19347	Identifier	nextTreasure
>19348	ExpressionStatement	 
>19349	CallExpression	nextTreasure -> event . set ( MakeFunctionEvent ( Game , onNextTreasurePage ) )
>19350	ArgumentList	MakeFunctionEvent ( Game , onNextTreasurePage )
>19351	Argument	MakeFunctionEvent ( Game , onNextTreasurePage )
>19352	CallExpression	MakeFunctionEvent ( Game , onNextTreasurePage )
>19353	ArgumentList	Game
>19354	Argument	onNextTreasurePage
>19355	Identifier	onNextTreasurePage
>19356	Argument	Game
>19357	Identifier	Game
>19358	Callee	MakeFunctionEvent
>19359	Identifier	MakeFunctionEvent
>19360	Callee	nextTreasure -> event . set
>19361	MemberAccess	nextTreasure -> event . set
>19362	Identifier	set
>19363	PtrMemberAccess	nextTreasure -> event
>19364	Identifier	event
>19365	Identifier	nextTreasure
>19366	ExpressionStatement	 
>19367	AssignmentExpr	nextTreasure -> scale = Vector ( 0.6 , 0.6 )
>19368	CallExpression	Vector ( 0.6 , 0.6 )
>19369	ArgumentList	0.6
>19370	Argument	0.6
>19371	PrimaryExpression	0.6
>19372	Argument	0.6
>19373	PrimaryExpression	0.6
>19374	Callee	Vector
>19375	Identifier	Vector
>19376	PtrMemberAccess	nextTreasure -> scale
>19377	Identifier	scale
>19378	Identifier	nextTreasure
>19379	ExpressionStatement	 
>19380	AssignmentExpr	nextTreasure -> alpha = 0
>19381	PrimaryExpression	0
>19382	PtrMemberAccess	nextTreasure -> alpha
>19383	Identifier	alpha
>19384	Identifier	nextTreasure
>19385	ExpressionStatement	 
>19386	AssignmentExpr	nextTreasure -> position = worldLeftCenter + Vector ( 50 , - 130 )
>19387	AdditiveExpression	worldLeftCenter + Vector ( 50 , - 130 )
>19388	CallExpression	Vector ( 50 , - 130 )
>19389	ArgumentList	50
>19390	Argument	- 130
>19391	UnaryOp	- 130
>19392	PrimaryExpression	130
>19393	UnaryOperator	-
>19394	Argument	50
>19395	PrimaryExpression	50
>19396	Callee	Vector
>19397	Identifier	Vector
>19398	Identifier	worldLeftCenter
>19399	PtrMemberAccess	nextTreasure -> position
>19400	Identifier	position
>19401	Identifier	nextTreasure
>19402	ExpressionStatement	 
>19403	CallExpression	nextTreasure -> useGlow ( \"particles/glow\" , 64 , 32 )
>19404	ArgumentList	\"particles/glow\"
>19405	Argument	32
>19406	PrimaryExpression	32
>19407	Argument	64
>19408	PrimaryExpression	64
>19409	Argument	\"particles/glow\"
>19410	PrimaryExpression	\"particles/glow\"
>19411	Callee	nextTreasure -> useGlow
>19412	PtrMemberAccess	nextTreasure -> useGlow
>19413	Identifier	useGlow
>19414	Identifier	nextTreasure
>19415	ExpressionStatement	 
>19416	CallExpression	nextTreasure -> useSound ( \"click\" )
>19417	ArgumentList	\"click\"
>19418	Argument	\"click\"
>19419	PrimaryExpression	\"click\"
>19420	Callee	nextTreasure -> useSound
>19421	PtrMemberAccess	nextTreasure -> useSound
>19422	Identifier	useSound
>19423	Identifier	nextTreasure
>19424	ExpressionStatement	 
>19425	CallExpression	nextTreasure -> useQuad ( \"Gui/arrow-right\" )
>19426	ArgumentList	\"Gui/arrow-right\"
>19427	Argument	\"Gui/arrow-right\"
>19428	PrimaryExpression	\"Gui/arrow-right\"
>19429	Callee	nextTreasure -> useQuad
>19430	PtrMemberAccess	nextTreasure -> useQuad
>19431	Identifier	useQuad
>19432	Identifier	nextTreasure
>19433	ExpressionStatement	 
>19434	Identifier	AquariaMenuItem
>19435	Statement	 
>19436	Statement	 
>19437	Statement	 
>19438	ExpressionStatement	 
>19439	CallExpression	addRenderObject ( prevTreasure , LR_MENU )
>19440	ArgumentList	prevTreasure
>19441	Argument	LR_MENU
>19442	Identifier	LR_MENU
>19443	Argument	prevTreasure
>19444	Identifier	prevTreasure
>19445	Callee	addRenderObject
>19446	Identifier	addRenderObject
>19447	ExpressionStatement	 
>19448	CallExpression	prevTreasure -> setCanDirMove ( false )
>19449	ArgumentList	false
>19450	Argument	false
>19451	Identifier	false
>19452	Callee	prevTreasure -> setCanDirMove
>19453	PtrMemberAccess	prevTreasure -> setCanDirMove
>19454	Identifier	setCanDirMove
>19455	Identifier	prevTreasure
>19456	ExpressionStatement	 
>19457	CallExpression	prevTreasure -> event . set ( MakeFunctionEvent ( Game , onPrevTreasurePage ) )
>19458	ArgumentList	MakeFunctionEvent ( Game , onPrevTreasurePage )
>19459	Argument	MakeFunctionEvent ( Game , onPrevTreasurePage )
>19460	CallExpression	MakeFunctionEvent ( Game , onPrevTreasurePage )
>19461	ArgumentList	Game
>19462	Argument	onPrevTreasurePage
>19463	Identifier	onPrevTreasurePage
>19464	Argument	Game
>19465	Identifier	Game
>19466	Callee	MakeFunctionEvent
>19467	Identifier	MakeFunctionEvent
>19468	Callee	prevTreasure -> event . set
>19469	MemberAccess	prevTreasure -> event . set
>19470	Identifier	set
>19471	PtrMemberAccess	prevTreasure -> event
>19472	Identifier	event
>19473	Identifier	prevTreasure
>19474	ExpressionStatement	 
>19475	AssignmentExpr	prevTreasure -> scale = Vector ( 0.6 , 0.6 )
>19476	CallExpression	Vector ( 0.6 , 0.6 )
>19477	ArgumentList	0.6
>19478	Argument	0.6
>19479	PrimaryExpression	0.6
>19480	Argument	0.6
>19481	PrimaryExpression	0.6
>19482	Callee	Vector
>19483	Identifier	Vector
>19484	PtrMemberAccess	prevTreasure -> scale
>19485	Identifier	scale
>19486	Identifier	prevTreasure
>19487	ExpressionStatement	 
>19488	CallExpression	prevTreasure -> setCanDirMove ( false )
>19489	ArgumentList	false
>19490	Argument	false
>19491	Identifier	false
>19492	Callee	prevTreasure -> setCanDirMove
>19493	PtrMemberAccess	prevTreasure -> setCanDirMove
>19494	Identifier	setCanDirMove
>19495	Identifier	prevTreasure
>19496	ExpressionStatement	 
>19497	AssignmentExpr	prevTreasure -> alpha = 0
>19498	PrimaryExpression	0
>19499	PtrMemberAccess	prevTreasure -> alpha
>19500	Identifier	alpha
>19501	Identifier	prevTreasure
>19502	ExpressionStatement	 
>19503	AssignmentExpr	prevTreasure -> position = worldLeftCenter + Vector ( - 50 , - 130 )
>19504	AdditiveExpression	worldLeftCenter + Vector ( - 50 , - 130 )
>19505	CallExpression	Vector ( - 50 , - 130 )
>19506	ArgumentList	- 50
>19507	Argument	- 130
>19508	UnaryOp	- 130
>19509	PrimaryExpression	130
>19510	UnaryOperator	-
>19511	Argument	- 50
>19512	UnaryOp	- 50
>19513	PrimaryExpression	50
>19514	UnaryOperator	-
>19515	Callee	Vector
>19516	Identifier	Vector
>19517	Identifier	worldLeftCenter
>19518	PtrMemberAccess	prevTreasure -> position
>19519	Identifier	position
>19520	Identifier	prevTreasure
>19521	ExpressionStatement	 
>19522	CallExpression	prevTreasure -> useGlow ( \"particles/glow\" , 64 , 32 )
>19523	ArgumentList	\"particles/glow\"
>19524	Argument	32
>19525	PrimaryExpression	32
>19526	Argument	64
>19527	PrimaryExpression	64
>19528	Argument	\"particles/glow\"
>19529	PrimaryExpression	\"particles/glow\"
>19530	Callee	prevTreasure -> useGlow
>19531	PtrMemberAccess	prevTreasure -> useGlow
>19532	Identifier	useGlow
>19533	Identifier	prevTreasure
>19534	ExpressionStatement	 
>19535	CallExpression	prevTreasure -> useSound ( \"click\" )
>19536	ArgumentList	\"click\"
>19537	Argument	\"click\"
>19538	PrimaryExpression	\"click\"
>19539	Callee	prevTreasure -> useSound
>19540	PtrMemberAccess	prevTreasure -> useSound
>19541	Identifier	useSound
>19542	Identifier	prevTreasure
>19543	ExpressionStatement	 
>19544	CallExpression	prevTreasure -> useQuad ( \"Gui/arrow-left\" )
>19545	ArgumentList	\"Gui/arrow-left\"
>19546	Argument	\"Gui/arrow-left\"
>19547	PrimaryExpression	\"Gui/arrow-left\"
>19548	Callee	prevTreasure -> useQuad
>19549	PtrMemberAccess	prevTreasure -> useQuad
>19550	Identifier	useQuad
>19551	Identifier	prevTreasure
>19552	ExpressionStatement	 
>19553	Identifier	AquariaMenuItem
>19554	Statement	 
>19555	Statement	 
>19556	Statement	 
>19557	ExpressionStatement	 
>19558	CallExpression	addRenderObject ( nextFood , LR_MENU )
>19559	ArgumentList	nextFood
>19560	Argument	LR_MENU
>19561	Identifier	LR_MENU
>19562	Argument	nextFood
>19563	Identifier	nextFood
>19564	Callee	addRenderObject
>19565	Identifier	addRenderObject
>19566	ExpressionStatement	 
>19567	AssignmentExpr	nextFood -> scale = Vector ( 0.6 , 0.6 )
>19568	CallExpression	Vector ( 0.6 , 0.6 )
>19569	ArgumentList	0.6
>19570	Argument	0.6
>19571	PrimaryExpression	0.6
>19572	Argument	0.6
>19573	PrimaryExpression	0.6
>19574	Callee	Vector
>19575	Identifier	Vector
>19576	PtrMemberAccess	nextFood -> scale
>19577	Identifier	scale
>19578	Identifier	nextFood
>19579	ExpressionStatement	 
>19580	CallExpression	nextFood -> event . set ( MakeFunctionEvent ( Game , onNextFoodPage ) )
>19581	ArgumentList	MakeFunctionEvent ( Game , onNextFoodPage )
>19582	Argument	MakeFunctionEvent ( Game , onNextFoodPage )
>19583	CallExpression	MakeFunctionEvent ( Game , onNextFoodPage )
>19584	ArgumentList	Game
>19585	Argument	onNextFoodPage
>19586	Identifier	onNextFoodPage
>19587	Argument	Game
>19588	Identifier	Game
>19589	Callee	MakeFunctionEvent
>19590	Identifier	MakeFunctionEvent
>19591	Callee	nextFood -> event . set
>19592	MemberAccess	nextFood -> event . set
>19593	Identifier	set
>19594	PtrMemberAccess	nextFood -> event
>19595	Identifier	event
>19596	Identifier	nextFood
>19597	ExpressionStatement	 
>19598	CallExpression	nextFood -> setCanDirMove ( false )
>19599	ArgumentList	false
>19600	Argument	false
>19601	Identifier	false
>19602	Callee	nextFood -> setCanDirMove
>19603	PtrMemberAccess	nextFood -> setCanDirMove
>19604	Identifier	setCanDirMove
>19605	Identifier	nextFood
>19606	ExpressionStatement	 
>19607	AssignmentExpr	nextFood -> alpha = 0
>19608	PrimaryExpression	0
>19609	PtrMemberAccess	nextFood -> alpha
>19610	Identifier	alpha
>19611	Identifier	nextFood
>19612	ExpressionStatement	 
>19613	AssignmentExpr	nextFood -> position = worldLeftCenter + Vector ( 50 , - 130 )
>19614	AdditiveExpression	worldLeftCenter + Vector ( 50 , - 130 )
>19615	CallExpression	Vector ( 50 , - 130 )
>19616	ArgumentList	50
>19617	Argument	- 130
>19618	UnaryOp	- 130
>19619	PrimaryExpression	130
>19620	UnaryOperator	-
>19621	Argument	50
>19622	PrimaryExpression	50
>19623	Callee	Vector
>19624	Identifier	Vector
>19625	Identifier	worldLeftCenter
>19626	PtrMemberAccess	nextFood -> position
>19627	Identifier	position
>19628	Identifier	nextFood
>19629	ExpressionStatement	 
>19630	CallExpression	nextFood -> useGlow ( \"particles/glow\" , 64 , 32 )
>19631	ArgumentList	\"particles/glow\"
>19632	Argument	32
>19633	PrimaryExpression	32
>19634	Argument	64
>19635	PrimaryExpression	64
>19636	Argument	\"particles/glow\"
>19637	PrimaryExpression	\"particles/glow\"
>19638	Callee	nextFood -> useGlow
>19639	PtrMemberAccess	nextFood -> useGlow
>19640	Identifier	useGlow
>19641	Identifier	nextFood
>19642	ExpressionStatement	 
>19643	CallExpression	nextFood -> useSound ( \"click\" )
>19644	ArgumentList	\"click\"
>19645	Argument	\"click\"
>19646	PrimaryExpression	\"click\"
>19647	Callee	nextFood -> useSound
>19648	PtrMemberAccess	nextFood -> useSound
>19649	Identifier	useSound
>19650	Identifier	nextFood
>19651	ExpressionStatement	 
>19652	CallExpression	nextFood -> useQuad ( \"Gui/arrow-right\" )
>19653	ArgumentList	\"Gui/arrow-right\"
>19654	Argument	\"Gui/arrow-right\"
>19655	PrimaryExpression	\"Gui/arrow-right\"
>19656	Callee	nextFood -> useQuad
>19657	PtrMemberAccess	nextFood -> useQuad
>19658	Identifier	useQuad
>19659	Identifier	nextFood
>19660	ExpressionStatement	 
>19661	Identifier	AquariaMenuItem
>19662	Statement	 
>19663	Statement	 
>19664	Statement	 
>19665	ExpressionStatement	 
>19666	CallExpression	addRenderObject ( prevFood , LR_MENU )
>19667	ArgumentList	prevFood
>19668	Argument	LR_MENU
>19669	Identifier	LR_MENU
>19670	Argument	prevFood
>19671	Identifier	prevFood
>19672	Callee	addRenderObject
>19673	Identifier	addRenderObject
>19674	ExpressionStatement	 
>19675	CallExpression	prevFood -> setCanDirMove ( false )
>19676	ArgumentList	false
>19677	Argument	false
>19678	Identifier	false
>19679	Callee	prevFood -> setCanDirMove
>19680	PtrMemberAccess	prevFood -> setCanDirMove
>19681	Identifier	setCanDirMove
>19682	Identifier	prevFood
>19683	ExpressionStatement	 
>19684	AssignmentExpr	prevFood -> scale = Vector ( 0.6 , 0.6 )
>19685	CallExpression	Vector ( 0.6 , 0.6 )
>19686	ArgumentList	0.6
>19687	Argument	0.6
>19688	PrimaryExpression	0.6
>19689	Argument	0.6
>19690	PrimaryExpression	0.6
>19691	Callee	Vector
>19692	Identifier	Vector
>19693	PtrMemberAccess	prevFood -> scale
>19694	Identifier	scale
>19695	Identifier	prevFood
>19696	ExpressionStatement	 
>19697	CallExpression	prevFood -> event . set ( MakeFunctionEvent ( Game , onPrevFoodPage ) )
>19698	ArgumentList	MakeFunctionEvent ( Game , onPrevFoodPage )
>19699	Argument	MakeFunctionEvent ( Game , onPrevFoodPage )
>19700	CallExpression	MakeFunctionEvent ( Game , onPrevFoodPage )
>19701	ArgumentList	Game
>19702	Argument	onPrevFoodPage
>19703	Identifier	onPrevFoodPage
>19704	Argument	Game
>19705	Identifier	Game
>19706	Callee	MakeFunctionEvent
>19707	Identifier	MakeFunctionEvent
>19708	Callee	prevFood -> event . set
>19709	MemberAccess	prevFood -> event . set
>19710	Identifier	set
>19711	PtrMemberAccess	prevFood -> event
>19712	Identifier	event
>19713	Identifier	prevFood
>19714	ExpressionStatement	 
>19715	AssignmentExpr	prevFood -> alpha = 0
>19716	PrimaryExpression	0
>19717	PtrMemberAccess	prevFood -> alpha
>19718	Identifier	alpha
>19719	Identifier	prevFood
>19720	ExpressionStatement	 
>19721	AssignmentExpr	prevFood -> position = worldLeftCenter + Vector ( - 50 , - 130 )
>19722	AdditiveExpression	worldLeftCenter + Vector ( - 50 , - 130 )
>19723	CallExpression	Vector ( - 50 , - 130 )
>19724	ArgumentList	- 50
>19725	Argument	- 130
>19726	UnaryOp	- 130
>19727	PrimaryExpression	130
>19728	UnaryOperator	-
>19729	Argument	- 50
>19730	UnaryOp	- 50
>19731	PrimaryExpression	50
>19732	UnaryOperator	-
>19733	Callee	Vector
>19734	Identifier	Vector
>19735	Identifier	worldLeftCenter
>19736	PtrMemberAccess	prevFood -> position
>19737	Identifier	position
>19738	Identifier	prevFood
>19739	ExpressionStatement	 
>19740	CallExpression	prevFood -> useGlow ( \"particles/glow\" , 64 , 32 )
>19741	ArgumentList	\"particles/glow\"
>19742	Argument	32
>19743	PrimaryExpression	32
>19744	Argument	64
>19745	PrimaryExpression	64
>19746	Argument	\"particles/glow\"
>19747	PrimaryExpression	\"particles/glow\"
>19748	Callee	prevFood -> useGlow
>19749	PtrMemberAccess	prevFood -> useGlow
>19750	Identifier	useGlow
>19751	Identifier	prevFood
>19752	ExpressionStatement	 
>19753	CallExpression	prevFood -> useSound ( \"click\" )
>19754	ArgumentList	\"click\"
>19755	Argument	\"click\"
>19756	PrimaryExpression	\"click\"
>19757	Callee	prevFood -> useSound
>19758	PtrMemberAccess	prevFood -> useSound
>19759	Identifier	useSound
>19760	Identifier	prevFood
>19761	ExpressionStatement	 
>19762	CallExpression	prevFood -> useQuad ( \"Gui/arrow-left\" )
>19763	ArgumentList	\"Gui/arrow-left\"
>19764	Argument	\"Gui/arrow-left\"
>19765	PrimaryExpression	\"Gui/arrow-left\"
>19766	Callee	prevFood -> useQuad
>19767	PtrMemberAccess	prevFood -> useQuad
>19768	Identifier	useQuad
>19769	Identifier	prevFood
>19770	ExpressionStatement	 
>19771	Identifier	AquariaMenuItem
>19772	Statement	 
>19773	Statement	 
>19774	Statement	 
>19775	ExpressionStatement	 
>19776	CallExpression	addRenderObject ( use , LR_MENU )
>19777	ArgumentList	use
>19778	Argument	LR_MENU
>19779	Identifier	LR_MENU
>19780	Argument	use
>19781	Identifier	use
>19782	Callee	addRenderObject
>19783	Identifier	addRenderObject
>19784	ExpressionStatement	 
>19785	CallExpression	use -> event . set ( MakeFunctionEvent ( Game , onUseTreasure ) )
>19786	ArgumentList	MakeFunctionEvent ( Game , onUseTreasure )
>19787	Argument	MakeFunctionEvent ( Game , onUseTreasure )
>19788	CallExpression	MakeFunctionEvent ( Game , onUseTreasure )
>19789	ArgumentList	Game
>19790	Argument	onUseTreasure
>19791	Identifier	onUseTreasure
>19792	Argument	Game
>19793	Identifier	Game
>19794	Callee	MakeFunctionEvent
>19795	Identifier	MakeFunctionEvent
>19796	Callee	use -> event . set
>19797	MemberAccess	use -> event . set
>19798	Identifier	set
>19799	PtrMemberAccess	use -> event
>19800	Identifier	event
>19801	Identifier	use
>19802	ExpressionStatement	 
>19803	AssignmentExpr	use -> scale = Vector ( 0.8 , 0.8 )
>19804	CallExpression	Vector ( 0.8 , 0.8 )
>19805	ArgumentList	0.8
>19806	Argument	0.8
>19807	PrimaryExpression	0.8
>19808	Argument	0.8
>19809	PrimaryExpression	0.8
>19810	Callee	Vector
>19811	Identifier	Vector
>19812	PtrMemberAccess	use -> scale
>19813	Identifier	scale
>19814	Identifier	use
>19815	ExpressionStatement	 
>19816	AssignmentExpr	use -> alpha = 0
>19817	PrimaryExpression	0
>19818	PtrMemberAccess	use -> alpha
>19819	Identifier	alpha
>19820	Identifier	use
>19821	ExpressionStatement	 
>19822	AssignmentExpr	use -> position = worldRightCenter + Vector ( 0 , - 120 )
>19823	AdditiveExpression	worldRightCenter + Vector ( 0 , - 120 )
>19824	CallExpression	Vector ( 0 , - 120 )
>19825	ArgumentList	0
>19826	Argument	- 120
>19827	UnaryOp	- 120
>19828	PrimaryExpression	120
>19829	UnaryOperator	-
>19830	Argument	0
>19831	PrimaryExpression	0
>19832	Callee	Vector
>19833	Identifier	Vector
>19834	Identifier	worldRightCenter
>19835	PtrMemberAccess	use -> position
>19836	Identifier	position
>19837	Identifier	use
>19838	ExpressionStatement	 
>19839	CallExpression	use -> useGlow ( \"particles/glow\" , 128 , 64 )
>19840	ArgumentList	\"particles/glow\"
>19841	Argument	64
>19842	PrimaryExpression	64
>19843	Argument	128
>19844	PrimaryExpression	128
>19845	Argument	\"particles/glow\"
>19846	PrimaryExpression	\"particles/glow\"
>19847	Callee	use -> useGlow
>19848	PtrMemberAccess	use -> useGlow
>19849	Identifier	useGlow
>19850	Identifier	use
>19851	ExpressionStatement	 
>19852	CallExpression	use -> useQuad ( \"Gui/use-button\" )
>19853	ArgumentList	\"Gui/use-button\"
>19854	Argument	\"Gui/use-button\"
>19855	PrimaryExpression	\"Gui/use-button\"
>19856	Callee	use -> useQuad
>19857	PtrMemberAccess	use -> useQuad
>19858	Identifier	useQuad
>19859	Identifier	use
>19860	ExpressionStatement	 
>19861	Identifier	AquariaMenuItem
>19862	Statement	 
>19863	Statement	 
>19864	Statement	 
>19865	ExpressionStatement	 
>19866	CallExpression	addRenderObject ( recipes , LR_MENU )
>19867	ArgumentList	recipes
>19868	Argument	LR_MENU
>19869	Identifier	LR_MENU
>19870	Argument	recipes
>19871	Identifier	recipes
>19872	Callee	addRenderObject
>19873	Identifier	addRenderObject
>19874	ExpressionStatement	 
>19875	CallExpression	recipes -> event . set ( MakeFunctionEvent ( Game , onRecipes ) )
>19876	ArgumentList	MakeFunctionEvent ( Game , onRecipes )
>19877	Argument	MakeFunctionEvent ( Game , onRecipes )
>19878	CallExpression	MakeFunctionEvent ( Game , onRecipes )
>19879	ArgumentList	Game
>19880	Argument	onRecipes
>19881	Identifier	onRecipes
>19882	Argument	Game
>19883	Identifier	Game
>19884	Callee	MakeFunctionEvent
>19885	Identifier	MakeFunctionEvent
>19886	Callee	recipes -> event . set
>19887	MemberAccess	recipes -> event . set
>19888	Identifier	set
>19889	PtrMemberAccess	recipes -> event
>19890	Identifier	event
>19891	Identifier	recipes
>19892	ExpressionStatement	 
>19893	AssignmentExpr	recipes -> scale = Vector ( 0.8 , 0.8 )
>19894	CallExpression	Vector ( 0.8 , 0.8 )
>19895	ArgumentList	0.8
>19896	Argument	0.8
>19897	PrimaryExpression	0.8
>19898	Argument	0.8
>19899	PrimaryExpression	0.8
>19900	Callee	Vector
>19901	Identifier	Vector
>19902	PtrMemberAccess	recipes -> scale
>19903	Identifier	scale
>19904	Identifier	recipes
>19905	ExpressionStatement	 
>19906	AssignmentExpr	recipes -> alpha = 0
>19907	PrimaryExpression	0
>19908	PtrMemberAccess	recipes -> alpha
>19909	Identifier	alpha
>19910	Identifier	recipes
>19911	ExpressionStatement	 
>19912	AssignmentExpr	recipes -> position = worldLeftCenter + Vector ( - 40 , 140 )
>19913	AdditiveExpression	worldLeftCenter + Vector ( - 40 , 140 )
>19914	CallExpression	Vector ( - 40 , 140 )
>19915	ArgumentList	- 40
>19916	Argument	140
>19917	PrimaryExpression	140
>19918	Argument	- 40
>19919	UnaryOp	- 40
>19920	PrimaryExpression	40
>19921	UnaryOperator	-
>19922	Callee	Vector
>19923	Identifier	Vector
>19924	Identifier	worldLeftCenter
>19925	PtrMemberAccess	recipes -> position
>19926	Identifier	position
>19927	Identifier	recipes
>19928	ExpressionStatement	 
>19929	CallExpression	recipes -> useGlow ( \"particles/glow\" , 128 , 32 )
>19930	ArgumentList	\"particles/glow\"
>19931	Argument	32
>19932	PrimaryExpression	32
>19933	Argument	128
>19934	PrimaryExpression	128
>19935	Argument	\"particles/glow\"
>19936	PrimaryExpression	\"particles/glow\"
>19937	Callee	recipes -> useGlow
>19938	PtrMemberAccess	recipes -> useGlow
>19939	Identifier	useGlow
>19940	Identifier	recipes
>19941	ExpressionStatement	 
>19942	CallExpression	recipes -> useQuad ( \"Gui/recipes-button\" )
>19943	ArgumentList	\"Gui/recipes-button\"
>19944	Argument	\"Gui/recipes-button\"
>19945	PrimaryExpression	\"Gui/recipes-button\"
>19946	Callee	recipes -> useQuad
>19947	PtrMemberAccess	recipes -> useQuad
>19948	Identifier	useQuad
>19949	Identifier	recipes
>19950	ExpressionStatement	 
>19951	Identifier	AquariaMenuItem
>19952	Statement	 
>19953	Statement	 
>19954	Statement	 
>19955	ExpressionStatement	 
>19956	CallExpression	addRenderObject ( foodSort , LR_MENU )
>19957	ArgumentList	foodSort
>19958	Argument	LR_MENU
>19959	Identifier	LR_MENU
>19960	Argument	foodSort
>19961	Identifier	foodSort
>19962	Callee	addRenderObject
>19963	Identifier	addRenderObject
>19964	ExpressionStatement	 
>19965	AssignmentExpr	foodSort -> alpha = 0
>19966	PrimaryExpression	0
>19967	PtrMemberAccess	foodSort -> alpha
>19968	Identifier	alpha
>19969	Identifier	foodSort
>19970	ExpressionStatement	 
>19971	CallExpression	foodSort -> event . set ( MakeFunctionEvent ( Game , sortFood ) )
>19972	ArgumentList	MakeFunctionEvent ( Game , sortFood )
>19973	Argument	MakeFunctionEvent ( Game , sortFood )
>19974	CallExpression	MakeFunctionEvent ( Game , sortFood )
>19975	ArgumentList	Game
>19976	Argument	sortFood
>19977	Identifier	sortFood
>19978	Argument	Game
>19979	Identifier	Game
>19980	Callee	MakeFunctionEvent
>19981	Identifier	MakeFunctionEvent
>19982	Callee	foodSort -> event . set
>19983	MemberAccess	foodSort -> event . set
>19984	Identifier	set
>19985	PtrMemberAccess	foodSort -> event
>19986	Identifier	event
>19987	Identifier	foodSort
>19988	ExpressionStatement	 
>19989	AssignmentExpr	foodSort -> position = worldLeftCenter + Vector ( - 100 , - 100 )
>19990	AdditiveExpression	worldLeftCenter + Vector ( - 100 , - 100 )
>19991	CallExpression	Vector ( - 100 , - 100 )
>19992	ArgumentList	- 100
>19993	Argument	- 100
>19994	UnaryOp	- 100
>19995	PrimaryExpression	100
>19996	UnaryOperator	-
>19997	Argument	- 100
>19998	UnaryOp	- 100
>19999	PrimaryExpression	100
>20000	UnaryOperator	-
>20001	Callee	Vector
>20002	Identifier	Vector
>20003	Identifier	worldLeftCenter
>20004	PtrMemberAccess	foodSort -> position
>20005	Identifier	position
>20006	Identifier	foodSort
>20007	ExpressionStatement	 
>20008	CallExpression	foodSort -> useGlow ( \"particles/glow\" , 32 , 32 )
>20009	ArgumentList	\"particles/glow\"
>20010	Argument	32
>20011	PrimaryExpression	32
>20012	Argument	32
>20013	PrimaryExpression	32
>20014	Argument	\"particles/glow\"
>20015	PrimaryExpression	\"particles/glow\"
>20016	Callee	foodSort -> useGlow
>20017	PtrMemberAccess	foodSort -> useGlow
>20018	Identifier	useGlow
>20019	Identifier	foodSort
>20020	ExpressionStatement	 
>20021	CallExpression	foodSort -> useSound ( \"click\" )
>20022	ArgumentList	\"click\"
>20023	Argument	\"click\"
>20024	PrimaryExpression	\"click\"
>20025	Callee	foodSort -> useSound
>20026	PtrMemberAccess	foodSort -> useSound
>20027	Identifier	useSound
>20028	Identifier	foodSort
>20029	ExpressionStatement	 
>20030	CallExpression	foodSort -> useQuad ( \"gui/sort\" )
>20031	ArgumentList	\"gui/sort\"
>20032	Argument	\"gui/sort\"
>20033	PrimaryExpression	\"gui/sort\"
>20034	Callee	foodSort -> useQuad
>20035	PtrMemberAccess	foodSort -> useQuad
>20036	Identifier	useQuad
>20037	Identifier	foodSort
>20038	ExpressionStatement	 
>20039	Identifier	AquariaMenuItem
>20040	Statement	 
>20041	Statement	 
>20042	Statement	 
>20043	ExpressionStatement	 
>20044	CallExpression	addRenderObject ( cook , LR_MENU )
>20045	ArgumentList	cook
>20046	Argument	LR_MENU
>20047	Identifier	LR_MENU
>20048	Argument	cook
>20049	Identifier	cook
>20050	Callee	addRenderObject
>20051	Identifier	addRenderObject
>20052	ExpressionStatement	 
>20053	CallExpression	cook -> setCanDirMove ( false )
>20054	ArgumentList	false
>20055	Argument	false
>20056	Identifier	false
>20057	Callee	cook -> setCanDirMove
>20058	PtrMemberAccess	cook -> setCanDirMove
>20059	Identifier	setCanDirMove
>20060	Identifier	cook
>20061	ExpressionStatement	 
>20062	CallExpression	cook -> event . set ( MakeFunctionEvent ( Game , onCook ) )
>20063	ArgumentList	MakeFunctionEvent ( Game , onCook )
>20064	Argument	MakeFunctionEvent ( Game , onCook )
>20065	CallExpression	MakeFunctionEvent ( Game , onCook )
>20066	ArgumentList	Game
>20067	Argument	onCook
>20068	Identifier	onCook
>20069	Argument	Game
>20070	Identifier	Game
>20071	Callee	MakeFunctionEvent
>20072	Identifier	MakeFunctionEvent
>20073	Callee	cook -> event . set
>20074	MemberAccess	cook -> event . set
>20075	Identifier	set
>20076	PtrMemberAccess	cook -> event
>20077	Identifier	event
>20078	Identifier	cook
>20079	ExpressionStatement	 
>20080	AssignmentExpr	cook -> scale = Vector ( 0.8 , 0.8 )
>20081	CallExpression	Vector ( 0.8 , 0.8 )
>20082	ArgumentList	0.8
>20083	Argument	0.8
>20084	PrimaryExpression	0.8
>20085	Argument	0.8
>20086	PrimaryExpression	0.8
>20087	Callee	Vector
>20088	Identifier	Vector
>20089	PtrMemberAccess	cook -> scale
>20090	Identifier	scale
>20091	Identifier	cook
>20092	ExpressionStatement	 
>20093	AssignmentExpr	cook -> alpha = 0
>20094	PrimaryExpression	0
>20095	PtrMemberAccess	cook -> alpha
>20096	Identifier	alpha
>20097	Identifier	cook
>20098	ExpressionStatement	 
>20099	AssignmentExpr	cook -> position = worldRightCenter + Vector ( 0 , - 120 )
>20100	AdditiveExpression	worldRightCenter + Vector ( 0 , - 120 )
>20101	CallExpression	Vector ( 0 , - 120 )
>20102	ArgumentList	0
>20103	Argument	- 120
>20104	UnaryOp	- 120
>20105	PrimaryExpression	120
>20106	UnaryOperator	-
>20107	Argument	0
>20108	PrimaryExpression	0
>20109	Callee	Vector
>20110	Identifier	Vector
>20111	Identifier	worldRightCenter
>20112	PtrMemberAccess	cook -> position
>20113	Identifier	position
>20114	Identifier	cook
>20115	ExpressionStatement	 
>20116	CallExpression	cook -> useGlow ( \"particles/glow\" , 128 , 40 )
>20117	ArgumentList	\"particles/glow\"
>20118	Argument	40
>20119	PrimaryExpression	40
>20120	Argument	128
>20121	PrimaryExpression	128
>20122	Argument	\"particles/glow\"
>20123	PrimaryExpression	\"particles/glow\"
>20124	Callee	cook -> useGlow
>20125	PtrMemberAccess	cook -> useGlow
>20126	Identifier	useGlow
>20127	Identifier	cook
>20128	ExpressionStatement	 
>20129	CallExpression	cook -> useQuad ( \"Gui/cook-button\" )
>20130	ArgumentList	\"Gui/cook-button\"
>20131	Argument	\"Gui/cook-button\"
>20132	PrimaryExpression	\"Gui/cook-button\"
>20133	Callee	cook -> useQuad
>20134	PtrMemberAccess	cook -> useQuad
>20135	Identifier	useQuad
>20136	Identifier	cook
>20137	ExpressionStatement	 
>20138	Identifier	AquariaMenuItem
>20139	Statement	 
>20140	Statement	 
>20141	Statement	 
>20142	ExpressionStatement	 
>20143	CallExpression	addRenderObject ( group_keyConfig , LR_OVERLAY )
>20144	ArgumentList	group_keyConfig
>20145	Argument	LR_OVERLAY
>20146	Identifier	LR_OVERLAY
>20147	Argument	group_keyConfig
>20148	Identifier	group_keyConfig
>20149	Callee	addRenderObject
>20150	Identifier	addRenderObject
>20151	ExpressionStatement	 
>20152	AssignmentExpr	group_keyConfig -> position = Vector ( 0 , - 40 )
>20153	CallExpression	Vector ( 0 , - 40 )
>20154	ArgumentList	0
>20155	Argument	- 40
>20156	UnaryOp	- 40
>20157	PrimaryExpression	40
>20158	UnaryOperator	-
>20159	Argument	0
>20160	PrimaryExpression	0
>20161	Callee	Vector
>20162	Identifier	Vector
>20163	PtrMemberAccess	group_keyConfig -> position
>20164	Identifier	position
>20165	Identifier	group_keyConfig
>20166	ExpressionStatement	 
>20167	CallExpression	group_keyConfig -> setHidden ( true )
>20168	ArgumentList	true
>20169	Argument	true
>20170	Identifier	true
>20171	Callee	group_keyConfig -> setHidden
>20172	PtrMemberAccess	group_keyConfig -> setHidden
>20173	Identifier	setHidden
>20174	Identifier	group_keyConfig
>20175	ExpressionStatement	 
>20176	AssignmentExpr	group_keyConfig -> alpha = 0
>20177	PrimaryExpression	0
>20178	PtrMemberAccess	group_keyConfig -> alpha
>20179	Identifier	alpha
>20180	Identifier	group_keyConfig
>20181	ExpressionStatement	 
>20182	AssignmentExpr	group_keyConfig -> followCamera = 1
>20183	PrimaryExpression	1
>20184	PtrMemberAccess	group_keyConfig -> followCamera
>20185	Identifier	followCamera
>20186	Identifier	group_keyConfig
>20187	ExpressionStatement	 
>20188	AssignmentExpr	group_keyConfig -> shareAlphaWithChildren = 1
>20189	PrimaryExpression	1
>20190	PtrMemberAccess	group_keyConfig -> shareAlphaWithChildren
>20191	Identifier	shareAlphaWithChildren
>20192	Identifier	group_keyConfig
>20193	Statement	 
>20194	Statement	 
>20195	ExpressionStatement	 
>20196	CallExpression	addKeyConfigLine ( group_keyConfig , SB ( 2128 ) , \"ToggleHelp\" , 480 + offy )
>20197	ArgumentList	group_keyConfig
>20198	Argument	480 + offy
>20199	AdditiveExpression	480 + offy
>20200	Identifier	offy
>20201	PrimaryExpression	480
>20202	Argument	\"ToggleHelp\"
>20203	PrimaryExpression	\"ToggleHelp\"
>20204	Argument	SB ( 2128 )
>20205	CallExpression	SB ( 2128 )
>20206	ArgumentList	2128
>20207	Argument	2128
>20208	PrimaryExpression	2128
>20209	Callee	SB
>20210	Identifier	SB
>20211	Argument	group_keyConfig
>20212	Identifier	group_keyConfig
>20213	Callee	addKeyConfigLine
>20214	Identifier	addKeyConfigLine
>20215	ExpressionStatement	 
>20216	CallExpression	addKeyConfigLine ( group_keyConfig , SB ( 2127 ) , \"Look\" , 460 + offy )
>20217	ArgumentList	group_keyConfig
>20218	Argument	460 + offy
>20219	AdditiveExpression	460 + offy
>20220	Identifier	offy
>20221	PrimaryExpression	460
>20222	Argument	\"Look\"
>20223	PrimaryExpression	\"Look\"
>20224	Argument	SB ( 2127 )
>20225	CallExpression	SB ( 2127 )
>20226	ArgumentList	2127
>20227	Argument	2127
>20228	PrimaryExpression	2127
>20229	Callee	SB
>20230	Identifier	SB
>20231	Argument	group_keyConfig
>20232	Identifier	group_keyConfig
>20233	Callee	addKeyConfigLine
>20234	Identifier	addKeyConfigLine
>20235	ExpressionStatement	 
>20236	CallExpression	addKeyConfigLine ( group_keyConfig , SB ( 2126 ) , \"FoodDrop\" , 440 + offy )
>20237	ArgumentList	group_keyConfig
>20238	Argument	440 + offy
>20239	AdditiveExpression	440 + offy
>20240	Identifier	offy
>20241	PrimaryExpression	440
>20242	Argument	\"FoodDrop\"
>20243	PrimaryExpression	\"FoodDrop\"
>20244	Argument	SB ( 2126 )
>20245	CallExpression	SB ( 2126 )
>20246	ArgumentList	2126
>20247	Argument	2126
>20248	PrimaryExpression	2126
>20249	Callee	SB
>20250	Identifier	SB
>20251	Argument	group_keyConfig
>20252	Identifier	group_keyConfig
>20253	Callee	addKeyConfigLine
>20254	Identifier	addKeyConfigLine
>20255	ExpressionStatement	 
>20256	CallExpression	addKeyConfigLine ( group_keyConfig , SB ( 2125 ) , \"FoodRight\" , 420 + offy )
>20257	ArgumentList	group_keyConfig
>20258	Argument	420 + offy
>20259	AdditiveExpression	420 + offy
>20260	Identifier	offy
>20261	PrimaryExpression	420
>20262	Argument	\"FoodRight\"
>20263	PrimaryExpression	\"FoodRight\"
>20264	Argument	SB ( 2125 )
>20265	CallExpression	SB ( 2125 )
>20266	ArgumentList	2125
>20267	Argument	2125
>20268	PrimaryExpression	2125
>20269	Callee	SB
>20270	Identifier	SB
>20271	Argument	group_keyConfig
>20272	Identifier	group_keyConfig
>20273	Callee	addKeyConfigLine
>20274	Identifier	addKeyConfigLine
>20275	ExpressionStatement	 
>20276	CallExpression	addKeyConfigLine ( group_keyConfig , SB ( 2124 ) , \"FoodLeft\" , 400 + offy )
>20277	ArgumentList	group_keyConfig
>20278	Argument	400 + offy
>20279	AdditiveExpression	400 + offy
>20280	Identifier	offy
>20281	PrimaryExpression	400
>20282	Argument	\"FoodLeft\"
>20283	PrimaryExpression	\"FoodLeft\"
>20284	Argument	SB ( 2124 )
>20285	CallExpression	SB ( 2124 )
>20286	ArgumentList	2124
>20287	Argument	2124
>20288	PrimaryExpression	2124
>20289	Callee	SB
>20290	Identifier	SB
>20291	Argument	group_keyConfig
>20292	Identifier	group_keyConfig
>20293	Callee	addKeyConfigLine
>20294	Identifier	addKeyConfigLine
>20295	ExpressionStatement	 
>20296	CallExpression	addKeyConfigLine ( group_keyConfig , SB ( 2123 ) , \"CookFood\" , 380 + offy )
>20297	ArgumentList	group_keyConfig
>20298	Argument	380 + offy
>20299	AdditiveExpression	380 + offy
>20300	Identifier	offy
>20301	PrimaryExpression	380
>20302	Argument	\"CookFood\"
>20303	PrimaryExpression	\"CookFood\"
>20304	Argument	SB ( 2123 )
>20305	CallExpression	SB ( 2123 )
>20306	ArgumentList	2123
>20307	Argument	2123
>20308	PrimaryExpression	2123
>20309	Callee	SB
>20310	Identifier	SB
>20311	Argument	group_keyConfig
>20312	Identifier	group_keyConfig
>20313	Callee	addKeyConfigLine
>20314	Identifier	addKeyConfigLine
>20315	ExpressionStatement	 
>20316	CallExpression	addKeyConfigLine ( group_keyConfig , SB ( 2122 ) , \"NextPage\" , 360 + offy )
>20317	ArgumentList	group_keyConfig
>20318	Argument	360 + offy
>20319	AdditiveExpression	360 + offy
>20320	Identifier	offy
>20321	PrimaryExpression	360
>20322	Argument	\"NextPage\"
>20323	PrimaryExpression	\"NextPage\"
>20324	Argument	SB ( 2122 )
>20325	CallExpression	SB ( 2122 )
>20326	ArgumentList	2122
>20327	Argument	2122
>20328	PrimaryExpression	2122
>20329	Callee	SB
>20330	Identifier	SB
>20331	Argument	group_keyConfig
>20332	Identifier	group_keyConfig
>20333	Callee	addKeyConfigLine
>20334	Identifier	addKeyConfigLine
>20335	ExpressionStatement	 
>20336	CallExpression	addKeyConfigLine ( group_keyConfig , SB ( 2121 ) , \"PrevPage\" , 340 + offy )
>20337	ArgumentList	group_keyConfig
>20338	Argument	340 + offy
>20339	AdditiveExpression	340 + offy
>20340	Identifier	offy
>20341	PrimaryExpression	340
>20342	Argument	\"PrevPage\"
>20343	PrimaryExpression	\"PrevPage\"
>20344	Argument	SB ( 2121 )
>20345	CallExpression	SB ( 2121 )
>20346	ArgumentList	2121
>20347	Argument	2121
>20348	PrimaryExpression	2121
>20349	Callee	SB
>20350	Identifier	SB
>20351	Argument	group_keyConfig
>20352	Identifier	group_keyConfig
>20353	Callee	addKeyConfigLine
>20354	Identifier	addKeyConfigLine
>20355	ExpressionStatement	 
>20356	AssignmentExpr	offy += 20
>20357	PrimaryExpression	20
>20358	Identifier	offy
>20359	ExpressionStatement	 
>20360	CallExpression	s2y -> setDirMove ( DIR_RIGHT , s2y )
>20361	ArgumentList	DIR_RIGHT
>20362	Argument	s2y
>20363	Identifier	s2y
>20364	Argument	DIR_RIGHT
>20365	Identifier	DIR_RIGHT
>20366	Callee	s2y -> setDirMove
>20367	PtrMemberAccess	s2y -> setDirMove
>20368	Identifier	setDirMove
>20369	Identifier	s2y
>20370	ExpressionStatement	 
>20371	CallExpression	s2y -> setDirMove ( DIR_LEFT , s2x )
>20372	ArgumentList	DIR_LEFT
>20373	Argument	s2x
>20374	Identifier	s2x
>20375	Argument	DIR_LEFT
>20376	Identifier	DIR_LEFT
>20377	Callee	s2y -> setDirMove
>20378	PtrMemberAccess	s2y -> setDirMove
>20379	Identifier	setDirMove
>20380	Identifier	s2y
>20381	ExpressionStatement	 
>20382	CallExpression	s2x -> setDirMove ( DIR_RIGHT , s2y )
>20383	ArgumentList	DIR_RIGHT
>20384	Argument	s2y
>20385	Identifier	s2y
>20386	Argument	DIR_RIGHT
>20387	Identifier	DIR_RIGHT
>20388	Callee	s2x -> setDirMove
>20389	PtrMemberAccess	s2x -> setDirMove
>20390	Identifier	setDirMove
>20391	Identifier	s2x
>20392	ExpressionStatement	 
>20393	CallExpression	s2x -> setDirMove ( DIR_LEFT , s1y )
>20394	ArgumentList	DIR_LEFT
>20395	Argument	s1y
>20396	Identifier	s1y
>20397	Argument	DIR_LEFT
>20398	Identifier	DIR_LEFT
>20399	Callee	s2x -> setDirMove
>20400	PtrMemberAccess	s2x -> setDirMove
>20401	Identifier	setDirMove
>20402	Identifier	s2x
>20403	ExpressionStatement	 
>20404	CallExpression	s1y -> setDirMove ( DIR_RIGHT , s2x )
>20405	ArgumentList	DIR_RIGHT
>20406	Argument	s2x
>20407	Identifier	s2x
>20408	Argument	DIR_RIGHT
>20409	Identifier	DIR_RIGHT
>20410	Callee	s1y -> setDirMove
>20411	PtrMemberAccess	s1y -> setDirMove
>20412	Identifier	setDirMove
>20413	Identifier	s1y
>20414	ExpressionStatement	 
>20415	CallExpression	s1y -> setDirMove ( DIR_LEFT , s1x )
>20416	ArgumentList	DIR_LEFT
>20417	Argument	s1x
>20418	Identifier	s1x
>20419	Argument	DIR_LEFT
>20420	Identifier	DIR_LEFT
>20421	Callee	s1y -> setDirMove
>20422	PtrMemberAccess	s1y -> setDirMove
>20423	Identifier	setDirMove
>20424	Identifier	s1y
>20425	ExpressionStatement	 
>20426	CallExpression	s1x -> setDirMove ( DIR_RIGHT , s1y )
>20427	ArgumentList	DIR_RIGHT
>20428	Argument	s1y
>20429	Identifier	s1y
>20430	Argument	DIR_RIGHT
>20431	Identifier	DIR_RIGHT
>20432	Callee	s1x -> setDirMove
>20433	PtrMemberAccess	s1x -> setDirMove
>20434	Identifier	setDirMove
>20435	Identifier	s1x
>20436	ExpressionStatement	 
>20437	CallExpression	s1x -> setDirMove ( DIR_LEFT , s1x )
>20438	ArgumentList	DIR_LEFT
>20439	Argument	s1x
>20440	Identifier	s1x
>20441	Argument	DIR_LEFT
>20442	Identifier	DIR_LEFT
>20443	Callee	s1x -> setDirMove
>20444	PtrMemberAccess	s1x -> setDirMove
>20445	Identifier	setDirMove
>20446	Identifier	s1x
>20447	IdentifierDeclStatement	 
>20448	IdentifierDecl	* s2y = addAxesConfigLine ( group_keyConfig , SB ( 2120 ) , \"s2ay\" , 340 + offy , 380 )
>20449	AssignmentExpr	* s2y = addAxesConfigLine ( group_keyConfig , SB ( 2120 ) , \"s2ay\" , 340 + offy , 380 )
>20450	CallExpression	addAxesConfigLine ( group_keyConfig , SB ( 2120 ) , \"s2ay\" , 340 + offy , 380 )
>20451	ArgumentList	group_keyConfig
>20452	Argument	380
>20453	PrimaryExpression	380
>20454	Argument	340 + offy
>20455	AdditiveExpression	340 + offy
>20456	Identifier	offy
>20457	PrimaryExpression	340
>20458	Argument	\"s2ay\"
>20459	PrimaryExpression	\"s2ay\"
>20460	Argument	SB ( 2120 )
>20461	CallExpression	SB ( 2120 )
>20462	ArgumentList	2120
>20463	Argument	2120
>20464	PrimaryExpression	2120
>20465	Callee	SB
>20466	Identifier	SB
>20467	Argument	group_keyConfig
>20468	Identifier	group_keyConfig
>20469	Callee	addAxesConfigLine
>20470	Identifier	addAxesConfigLine
>20471	Identifier	s2y
>20472	Identifier	s2y
>20473	IdentifierDeclType	AquariaKeyConfig *
>20474	IdentifierDeclStatement	 
>20475	IdentifierDecl	* s2x = addAxesConfigLine ( group_keyConfig , SB ( 2119 ) , \"s2ax\" , 340 + offy , 260 )
>20476	AssignmentExpr	* s2x = addAxesConfigLine ( group_keyConfig , SB ( 2119 ) , \"s2ax\" , 340 + offy , 260 )
>20477	CallExpression	addAxesConfigLine ( group_keyConfig , SB ( 2119 ) , \"s2ax\" , 340 + offy , 260 )
>20478	ArgumentList	group_keyConfig
>20479	Argument	260
>20480	PrimaryExpression	260
>20481	Argument	340 + offy
>20482	AdditiveExpression	340 + offy
>20483	Identifier	offy
>20484	PrimaryExpression	340
>20485	Argument	\"s2ax\"
>20486	PrimaryExpression	\"s2ax\"
>20487	Argument	SB ( 2119 )
>20488	CallExpression	SB ( 2119 )
>20489	ArgumentList	2119
>20490	Argument	2119
>20491	PrimaryExpression	2119
>20492	Callee	SB
>20493	Identifier	SB
>20494	Argument	group_keyConfig
>20495	Identifier	group_keyConfig
>20496	Callee	addAxesConfigLine
>20497	Identifier	addAxesConfigLine
>20498	Identifier	s2x
>20499	Identifier	s2x
>20500	IdentifierDeclType	AquariaKeyConfig *
>20501	IdentifierDeclStatement	 
>20502	IdentifierDecl	* s1y = addAxesConfigLine ( group_keyConfig , SB ( 2118 ) , \"s1ay\" , 340 + offy , 130 )
>20503	AssignmentExpr	* s1y = addAxesConfigLine ( group_keyConfig , SB ( 2118 ) , \"s1ay\" , 340 + offy , 130 )
>20504	CallExpression	addAxesConfigLine ( group_keyConfig , SB ( 2118 ) , \"s1ay\" , 340 + offy , 130 )
>20505	ArgumentList	group_keyConfig
>20506	Argument	130
>20507	PrimaryExpression	130
>20508	Argument	340 + offy
>20509	AdditiveExpression	340 + offy
>20510	Identifier	offy
>20511	PrimaryExpression	340
>20512	Argument	\"s1ay\"
>20513	PrimaryExpression	\"s1ay\"
>20514	Argument	SB ( 2118 )
>20515	CallExpression	SB ( 2118 )
>20516	ArgumentList	2118
>20517	Argument	2118
>20518	PrimaryExpression	2118
>20519	Callee	SB
>20520	Identifier	SB
>20521	Argument	group_keyConfig
>20522	Identifier	group_keyConfig
>20523	Callee	addAxesConfigLine
>20524	Identifier	addAxesConfigLine
>20525	Identifier	s1y
>20526	Identifier	s1y
>20527	IdentifierDeclType	AquariaKeyConfig *
>20528	IdentifierDeclStatement	 
>20529	IdentifierDecl	* s1x = addAxesConfigLine ( group_keyConfig , SB ( 2117 ) , \"s1ax\" , 340 + offy , 0 )
>20530	AssignmentExpr	* s1x = addAxesConfigLine ( group_keyConfig , SB ( 2117 ) , \"s1ax\" , 340 + offy , 0 )
>20531	CallExpression	addAxesConfigLine ( group_keyConfig , SB ( 2117 ) , \"s1ax\" , 340 + offy , 0 )
>20532	ArgumentList	group_keyConfig
>20533	Argument	0
>20534	PrimaryExpression	0
>20535	Argument	340 + offy
>20536	AdditiveExpression	340 + offy
>20537	Identifier	offy
>20538	PrimaryExpression	340
>20539	Argument	\"s1ax\"
>20540	PrimaryExpression	\"s1ax\"
>20541	Argument	SB ( 2117 )
>20542	CallExpression	SB ( 2117 )
>20543	ArgumentList	2117
>20544	Argument	2117
>20545	PrimaryExpression	2117
>20546	Callee	SB
>20547	Identifier	SB
>20548	Argument	group_keyConfig
>20549	Identifier	group_keyConfig
>20550	Callee	addAxesConfigLine
>20551	Identifier	addAxesConfigLine
>20552	Identifier	s1x
>20553	Identifier	s1x
>20554	IdentifierDeclType	AquariaKeyConfig *
>20555	ExpressionStatement	 
>20556	CallExpression	addKeyConfigLine ( group_keyConfig , SB ( 2116 ) , \"Escape\" , 320 + offy , 1 , 0 , 0 )
>20557	ArgumentList	group_keyConfig
>20558	Argument	0
>20559	PrimaryExpression	0
>20560	Argument	0
>20561	PrimaryExpression	0
>20562	Argument	1
>20563	PrimaryExpression	1
>20564	Argument	320 + offy
>20565	AdditiveExpression	320 + offy
>20566	Identifier	offy
>20567	PrimaryExpression	320
>20568	Argument	\"Escape\"
>20569	PrimaryExpression	\"Escape\"
>20570	Argument	SB ( 2116 )
>20571	CallExpression	SB ( 2116 )
>20572	ArgumentList	2116
>20573	Argument	2116
>20574	PrimaryExpression	2116
>20575	Callee	SB
>20576	Identifier	SB
>20577	Argument	group_keyConfig
>20578	Identifier	group_keyConfig
>20579	Callee	addKeyConfigLine
>20580	Identifier	addKeyConfigLine
>20581	ExpressionStatement	 
>20582	CallExpression	addKeyConfigLine ( group_keyConfig , SB ( 2115 ) , \"WorldMap\" , 300 + offy )
>20583	ArgumentList	group_keyConfig
>20584	Argument	300 + offy
>20585	AdditiveExpression	300 + offy
>20586	Identifier	offy
>20587	PrimaryExpression	300
>20588	Argument	\"WorldMap\"
>20589	PrimaryExpression	\"WorldMap\"
>20590	Argument	SB ( 2115 )
>20591	CallExpression	SB ( 2115 )
>20592	ArgumentList	2115
>20593	Argument	2115
>20594	PrimaryExpression	2115
>20595	Callee	SB
>20596	Identifier	SB
>20597	Argument	group_keyConfig
>20598	Identifier	group_keyConfig
>20599	Callee	addKeyConfigLine
>20600	Identifier	addKeyConfigLine
>20601	ExpressionStatement	 
>20602	CallExpression	addKeyConfigLine ( group_keyConfig , SB ( 2114 ) , \"Revert\" , 280 + offy )
>20603	ArgumentList	group_keyConfig
>20604	Argument	280 + offy
>20605	AdditiveExpression	280 + offy
>20606	Identifier	offy
>20607	PrimaryExpression	280
>20608	Argument	\"Revert\"
>20609	PrimaryExpression	\"Revert\"
>20610	Argument	SB ( 2114 )
>20611	CallExpression	SB ( 2114 )
>20612	ArgumentList	2114
>20613	Argument	2114
>20614	PrimaryExpression	2114
>20615	Callee	SB
>20616	Identifier	SB
>20617	Argument	group_keyConfig
>20618	Identifier	group_keyConfig
>20619	Callee	addKeyConfigLine
>20620	Identifier	addKeyConfigLine
>20621	ExpressionStatement	 
>20622	CallExpression	addKeyConfigLine ( group_keyConfig , SB ( 2113 ) , \"Roll\" , 260 + offy )
>20623	ArgumentList	group_keyConfig
>20624	Argument	260 + offy
>20625	AdditiveExpression	260 + offy
>20626	Identifier	offy
>20627	PrimaryExpression	260
>20628	Argument	\"Roll\"
>20629	PrimaryExpression	\"Roll\"
>20630	Argument	SB ( 2113 )
>20631	CallExpression	SB ( 2113 )
>20632	ArgumentList	2113
>20633	Argument	2113
>20634	PrimaryExpression	2113
>20635	Callee	SB
>20636	Identifier	SB
>20637	Argument	group_keyConfig
>20638	Identifier	group_keyConfig
>20639	Callee	addKeyConfigLine
>20640	Identifier	addKeyConfigLine
>20641	ExpressionStatement	 
>20642	CallExpression	addKeyConfigLine ( group_keyConfig , SB ( 2112 ) , \"SwimRight\" , 240 + offy )
>20643	ArgumentList	group_keyConfig
>20644	Argument	240 + offy
>20645	AdditiveExpression	240 + offy
>20646	Identifier	offy
>20647	PrimaryExpression	240
>20648	Argument	\"SwimRight\"
>20649	PrimaryExpression	\"SwimRight\"
>20650	Argument	SB ( 2112 )
>20651	CallExpression	SB ( 2112 )
>20652	ArgumentList	2112
>20653	Argument	2112
>20654	PrimaryExpression	2112
>20655	Callee	SB
>20656	Identifier	SB
>20657	Argument	group_keyConfig
>20658	Identifier	group_keyConfig
>20659	Callee	addKeyConfigLine
>20660	Identifier	addKeyConfigLine
>20661	ExpressionStatement	 
>20662	CallExpression	addKeyConfigLine ( group_keyConfig , SB ( 2111 ) , \"SwimLeft\" , 220 + offy )
>20663	ArgumentList	group_keyConfig
>20664	Argument	220 + offy
>20665	AdditiveExpression	220 + offy
>20666	Identifier	offy
>20667	PrimaryExpression	220
>20668	Argument	\"SwimLeft\"
>20669	PrimaryExpression	\"SwimLeft\"
>20670	Argument	SB ( 2111 )
>20671	CallExpression	SB ( 2111 )
>20672	ArgumentList	2111
>20673	Argument	2111
>20674	PrimaryExpression	2111
>20675	Callee	SB
>20676	Identifier	SB
>20677	Argument	group_keyConfig
>20678	Identifier	group_keyConfig
>20679	Callee	addKeyConfigLine
>20680	Identifier	addKeyConfigLine
>20681	ExpressionStatement	 
>20682	CallExpression	addKeyConfigLine ( group_keyConfig , SB ( 2110 ) , \"SwimDown\" , 200 + offy )
>20683	ArgumentList	group_keyConfig
>20684	Argument	200 + offy
>20685	AdditiveExpression	200 + offy
>20686	Identifier	offy
>20687	PrimaryExpression	200
>20688	Argument	\"SwimDown\"
>20689	PrimaryExpression	\"SwimDown\"
>20690	Argument	SB ( 2110 )
>20691	CallExpression	SB ( 2110 )
>20692	ArgumentList	2110
>20693	Argument	2110
>20694	PrimaryExpression	2110
>20695	Callee	SB
>20696	Identifier	SB
>20697	Argument	group_keyConfig
>20698	Identifier	group_keyConfig
>20699	Callee	addKeyConfigLine
>20700	Identifier	addKeyConfigLine
>20701	ExpressionStatement	 
>20702	CallExpression	addKeyConfigLine ( group_keyConfig , SB ( 2109 ) , \"SwimUp\" , 180 + offy )
>20703	ArgumentList	group_keyConfig
>20704	Argument	180 + offy
>20705	AdditiveExpression	180 + offy
>20706	Identifier	offy
>20707	PrimaryExpression	180
>20708	Argument	\"SwimUp\"
>20709	PrimaryExpression	\"SwimUp\"
>20710	Argument	SB ( 2109 )
>20711	CallExpression	SB ( 2109 )
>20712	ArgumentList	2109
>20713	Argument	2109
>20714	PrimaryExpression	2109
>20715	Callee	SB
>20716	Identifier	SB
>20717	Argument	group_keyConfig
>20718	Identifier	group_keyConfig
>20719	Callee	addKeyConfigLine
>20720	Identifier	addKeyConfigLine
>20721	ExpressionStatement	 
>20722	CallExpression	addKeyConfigLine ( group_keyConfig , SB ( 2108 ) , \"SecondaryAction\" , 160 + offy )
>20723	ArgumentList	group_keyConfig
>20724	Argument	160 + offy
>20725	AdditiveExpression	160 + offy
>20726	Identifier	offy
>20727	PrimaryExpression	160
>20728	Argument	\"SecondaryAction\"
>20729	PrimaryExpression	\"SecondaryAction\"
>20730	Argument	SB ( 2108 )
>20731	CallExpression	SB ( 2108 )
>20732	ArgumentList	2108
>20733	Argument	2108
>20734	PrimaryExpression	2108
>20735	Callee	SB
>20736	Identifier	SB
>20737	Argument	group_keyConfig
>20738	Identifier	group_keyConfig
>20739	Callee	addKeyConfigLine
>20740	Identifier	addKeyConfigLine
>20741	ExpressionStatement	 
>20742	CallExpression	addKeyConfigLine ( group_keyConfig , SB ( 2107 ) , \"PrimaryAction\" , 140 + offy )
>20743	ArgumentList	group_keyConfig
>20744	Argument	140 + offy
>20745	AdditiveExpression	140 + offy
>20746	Identifier	offy
>20747	PrimaryExpression	140
>20748	Argument	\"PrimaryAction\"
>20749	PrimaryExpression	\"PrimaryAction\"
>20750	Argument	SB ( 2107 )
>20751	CallExpression	SB ( 2107 )
>20752	ArgumentList	2107
>20753	Argument	2107
>20754	PrimaryExpression	2107
>20755	Callee	SB
>20756	Identifier	SB
>20757	Argument	group_keyConfig
>20758	Identifier	group_keyConfig
>20759	Callee	addKeyConfigLine
>20760	Identifier	addKeyConfigLine
>20761	ExpressionStatement	 
>20762	CallExpression	addKeyConfigLine ( group_keyConfig , SB ( 2106 ) , \"rmb\" , 120 + offy , 0 , 0 , 0 )
>20763	ArgumentList	group_keyConfig
>20764	Argument	0
>20765	PrimaryExpression	0
>20766	Argument	0
>20767	PrimaryExpression	0
>20768	Argument	0
>20769	PrimaryExpression	0
>20770	Argument	120 + offy
>20771	AdditiveExpression	120 + offy
>20772	Identifier	offy
>20773	PrimaryExpression	120
>20774	Argument	\"rmb\"
>20775	PrimaryExpression	\"rmb\"
>20776	Argument	SB ( 2106 )
>20777	CallExpression	SB ( 2106 )
>20778	ArgumentList	2106
>20779	Argument	2106
>20780	PrimaryExpression	2106
>20781	Callee	SB
>20782	Identifier	SB
>20783	Argument	group_keyConfig
>20784	Identifier	group_keyConfig
>20785	Callee	addKeyConfigLine
>20786	Identifier	addKeyConfigLine
>20787	ExpressionStatement	 
>20788	CallExpression	addKeyConfigLine ( group_keyConfig , SB ( 2105 ) , \"lmb\" , 100 + offy , 0 , 0 , 0 )
>20789	ArgumentList	group_keyConfig
>20790	Argument	0
>20791	PrimaryExpression	0
>20792	Argument	0
>20793	PrimaryExpression	0
>20794	Argument	0
>20795	PrimaryExpression	0
>20796	Argument	100 + offy
>20797	AdditiveExpression	100 + offy
>20798	Identifier	offy
>20799	PrimaryExpression	100
>20800	Argument	\"lmb\"
>20801	PrimaryExpression	\"lmb\"
>20802	Argument	SB ( 2105 )
>20803	CallExpression	SB ( 2105 )
>20804	ArgumentList	2105
>20805	Argument	2105
>20806	PrimaryExpression	2105
>20807	Callee	SB
>20808	Identifier	SB
>20809	Argument	group_keyConfig
>20810	Identifier	group_keyConfig
>20811	Callee	addKeyConfigLine
>20812	Identifier	addKeyConfigLine
>20813	ExpressionStatement	 
>20814	CallExpression	group_keyConfig -> addChild ( header_joy , PM_POINTER )
>20815	ArgumentList	header_joy
>20816	Argument	PM_POINTER
>20817	Identifier	PM_POINTER
>20818	Argument	header_joy
>20819	Identifier	header_joy
>20820	Callee	group_keyConfig -> addChild
>20821	PtrMemberAccess	group_keyConfig -> addChild
>20822	Identifier	addChild
>20823	Identifier	group_keyConfig
>20824	ExpressionStatement	 
>20825	CallExpression	header_joy -> setAlign ( ALIGN_CENTER )
>20826	ArgumentList	ALIGN_CENTER
>20827	Argument	ALIGN_CENTER
>20828	Identifier	ALIGN_CENTER
>20829	Callee	header_joy -> setAlign
>20830	PtrMemberAccess	header_joy -> setAlign
>20831	Identifier	setAlign
>20832	Identifier	header_joy
>20833	ExpressionStatement	 
>20834	AssignmentExpr	header_joy -> position = Vector ( 600 , 80 + offy )
>20835	CallExpression	Vector ( 600 , 80 + offy )
>20836	ArgumentList	600
>20837	Argument	80 + offy
>20838	AdditiveExpression	80 + offy
>20839	Identifier	offy
>20840	PrimaryExpression	80
>20841	Argument	600
>20842	PrimaryExpression	600
>20843	Callee	Vector
>20844	Identifier	Vector
>20845	PtrMemberAccess	header_joy -> position
>20846	Identifier	position
>20847	Identifier	header_joy
>20848	ExpressionStatement	 
>20849	CallExpression	header_joy -> setText ( SB ( 2104 ) )
>20850	ArgumentList	SB ( 2104 )
>20851	Argument	SB ( 2104 )
>20852	CallExpression	SB ( 2104 )
>20853	ArgumentList	2104
>20854	Argument	2104
>20855	PrimaryExpression	2104
>20856	Callee	SB
>20857	Identifier	SB
>20858	Callee	header_joy -> setText
>20859	PtrMemberAccess	header_joy -> setText
>20860	Identifier	setText
>20861	Identifier	header_joy
>20862	IdentifierDeclStatement	 
>20863	IdentifierDecl	* header_joy = new TTFText ( & dsq -> fontArialSmall )
>20864	AssignmentExpr	* header_joy = new TTFText ( & dsq -> fontArialSmall )
>20865	UnaryOp	& dsq -> fontArialSmall
>20866	PtrMemberAccess	dsq -> fontArialSmall
>20867	Identifier	fontArialSmall
>20868	Identifier	dsq
>20869	UnaryOperator	&
>20870	Identifier	header_joy
>20871	Identifier	header_joy
>20872	IdentifierDeclType	TTFText *
>20873	ExpressionStatement	 
>20874	CallExpression	group_keyConfig -> addChild ( header_key2 , PM_POINTER )
>20875	ArgumentList	header_key2
>20876	Argument	PM_POINTER
>20877	Identifier	PM_POINTER
>20878	Argument	header_key2
>20879	Identifier	header_key2
>20880	Callee	group_keyConfig -> addChild
>20881	PtrMemberAccess	group_keyConfig -> addChild
>20882	Identifier	addChild
>20883	Identifier	group_keyConfig
>20884	ExpressionStatement	 
>20885	CallExpression	header_key2 -> setAlign ( ALIGN_CENTER )
>20886	ArgumentList	ALIGN_CENTER
>20887	Argument	ALIGN_CENTER
>20888	Identifier	ALIGN_CENTER
>20889	Callee	header_key2 -> setAlign
>20890	PtrMemberAccess	header_key2 -> setAlign
>20891	Identifier	setAlign
>20892	Identifier	header_key2
>20893	ExpressionStatement	 
>20894	AssignmentExpr	header_key2 -> position = Vector ( 475 , 80 + offy )
>20895	CallExpression	Vector ( 475 , 80 + offy )
>20896	ArgumentList	475
>20897	Argument	80 + offy
>20898	AdditiveExpression	80 + offy
>20899	Identifier	offy
>20900	PrimaryExpression	80
>20901	Argument	475
>20902	PrimaryExpression	475
>20903	Callee	Vector
>20904	Identifier	Vector
>20905	PtrMemberAccess	header_key2 -> position
>20906	Identifier	position
>20907	Identifier	header_key2
>20908	ExpressionStatement	 
>20909	CallExpression	header_key2 -> setText ( SB ( 2103 ) )
>20910	ArgumentList	SB ( 2103 )
>20911	Argument	SB ( 2103 )
>20912	CallExpression	SB ( 2103 )
>20913	ArgumentList	2103
>20914	Argument	2103
>20915	PrimaryExpression	2103
>20916	Callee	SB
>20917	Identifier	SB
>20918	Callee	header_key2 -> setText
>20919	PtrMemberAccess	header_key2 -> setText
>20920	Identifier	setText
>20921	Identifier	header_key2
>20922	IdentifierDeclStatement	 
>20923	IdentifierDecl	* header_key2 = new TTFText ( & dsq -> fontArialSmall )
>20924	AssignmentExpr	* header_key2 = new TTFText ( & dsq -> fontArialSmall )
>20925	UnaryOp	& dsq -> fontArialSmall
>20926	PtrMemberAccess	dsq -> fontArialSmall
>20927	Identifier	fontArialSmall
>20928	Identifier	dsq
>20929	UnaryOperator	&
>20930	Identifier	header_key2
>20931	Identifier	header_key2
>20932	IdentifierDeclType	TTFText *
>20933	ExpressionStatement	 
>20934	CallExpression	group_keyConfig -> addChild ( header_key1 , PM_POINTER )
>20935	ArgumentList	header_key1
>20936	Argument	PM_POINTER
>20937	Identifier	PM_POINTER
>20938	Argument	header_key1
>20939	Identifier	header_key1
>20940	Callee	group_keyConfig -> addChild
>20941	PtrMemberAccess	group_keyConfig -> addChild
>20942	Identifier	addChild
>20943	Identifier	group_keyConfig
>20944	ExpressionStatement	 
>20945	CallExpression	header_key1 -> setAlign ( ALIGN_CENTER )
>20946	ArgumentList	ALIGN_CENTER
>20947	Argument	ALIGN_CENTER
>20948	Identifier	ALIGN_CENTER
>20949	Callee	header_key1 -> setAlign
>20950	PtrMemberAccess	header_key1 -> setAlign
>20951	Identifier	setAlign
>20952	Identifier	header_key1
>20953	ExpressionStatement	 
>20954	AssignmentExpr	header_key1 -> position = Vector ( 350 , 80 + offy )
>20955	CallExpression	Vector ( 350 , 80 + offy )
>20956	ArgumentList	350
>20957	Argument	80 + offy
>20958	AdditiveExpression	80 + offy
>20959	Identifier	offy
>20960	PrimaryExpression	80
>20961	Argument	350
>20962	PrimaryExpression	350
>20963	Callee	Vector
>20964	Identifier	Vector
>20965	PtrMemberAccess	header_key1 -> position
>20966	Identifier	position
>20967	Identifier	header_key1
>20968	ExpressionStatement	 
>20969	CallExpression	header_key1 -> setText ( SB ( 2102 ) )
>20970	ArgumentList	SB ( 2102 )
>20971	Argument	SB ( 2102 )
>20972	CallExpression	SB ( 2102 )
>20973	ArgumentList	2102
>20974	Argument	2102
>20975	PrimaryExpression	2102
>20976	Callee	SB
>20977	Identifier	SB
>20978	Callee	header_key1 -> setText
>20979	PtrMemberAccess	header_key1 -> setText
>20980	Identifier	setText
>20981	Identifier	header_key1
>20982	IdentifierDeclStatement	 
>20983	IdentifierDecl	* header_key1 = new TTFText ( & dsq -> fontArialSmall )
>20984	AssignmentExpr	* header_key1 = new TTFText ( & dsq -> fontArialSmall )
>20985	UnaryOp	& dsq -> fontArialSmall
>20986	PtrMemberAccess	dsq -> fontArialSmall
>20987	Identifier	fontArialSmall
>20988	Identifier	dsq
>20989	UnaryOperator	&
>20990	Identifier	header_key1
>20991	Identifier	header_key1
>20992	IdentifierDeclType	TTFText *
>20993	ExpressionStatement	 
>20994	CallExpression	group_keyConfig -> addChild ( header_action , PM_POINTER )
>20995	ArgumentList	header_action
>20996	Argument	PM_POINTER
>20997	Identifier	PM_POINTER
>20998	Argument	header_action
>20999	Identifier	header_action
>21000	Callee	group_keyConfig -> addChild
>21001	PtrMemberAccess	group_keyConfig -> addChild
>21002	Identifier	addChild
>21003	Identifier	group_keyConfig
>21004	ExpressionStatement	 
>21005	AssignmentExpr	header_action -> position = Vector ( 140 , 80 + offy )
>21006	CallExpression	Vector ( 140 , 80 + offy )
>21007	ArgumentList	140
>21008	Argument	80 + offy
>21009	AdditiveExpression	80 + offy
>21010	Identifier	offy
>21011	PrimaryExpression	80
>21012	Argument	140
>21013	PrimaryExpression	140
>21014	Callee	Vector
>21015	Identifier	Vector
>21016	PtrMemberAccess	header_action -> position
>21017	Identifier	position
>21018	Identifier	header_action
>21019	ExpressionStatement	 
>21020	CallExpression	header_action -> setText ( SB ( 2101 ) )
>21021	ArgumentList	SB ( 2101 )
>21022	Argument	SB ( 2101 )
>21023	CallExpression	SB ( 2101 )
>21024	ArgumentList	2101
>21025	Argument	2101
>21026	PrimaryExpression	2101
>21027	Callee	SB
>21028	Identifier	SB
>21029	Callee	header_action -> setText
>21030	PtrMemberAccess	header_action -> setText
>21031	Identifier	setText
>21032	Identifier	header_action
>21033	ExpressionStatement	 
>21034	AssignmentExpr	( x ) TTFText * header_action = new TTFText ( & dsq -> fontArialSmall )
>21035	UnaryOp	& dsq -> fontArialSmall
>21036	PtrMemberAccess	dsq -> fontArialSmall
>21037	Identifier	fontArialSmall
>21038	Identifier	dsq
>21039	UnaryOperator	&
>21040	MultiplicativeExpression	( x ) TTFText * header_action
>21041	Identifier	header_action
>21042	CastExpression	( x ) TTFText
>21043	Identifier	TTFText
>21044	CastTarget	x
>21045	Statement	 
>21046	Statement	 
>21047	Statement	 
>21048	Statement	 
>21049	Statement	 
>21050	Statement	 
>21051	Statement	 
>21052	Statement	 
>21053	Statement	 
>21054	Statement	 
>21055	Statement	 
>21056	Statement	 
>21057	IdentifierDeclStatement	 
>21058	IdentifierDecl	offy = - 20
>21059	AssignmentExpr	offy = - 20
>21060	UnaryOp	- 20
>21061	PrimaryExpression	20
>21062	UnaryOperator	-
>21063	Identifier	offy
>21064	Identifier	offy
>21065	IdentifierDeclType	int
>21066	ExpressionStatement	 
>21067	CallExpression	group_keyConfig -> addChild ( kcb , PM_POINTER )
>21068	ArgumentList	kcb
>21069	Argument	PM_POINTER
>21070	Identifier	PM_POINTER
>21071	Argument	kcb
>21072	Identifier	kcb
>21073	Callee	group_keyConfig -> addChild
>21074	PtrMemberAccess	group_keyConfig -> addChild
>21075	Identifier	addChild
>21076	Identifier	group_keyConfig
>21077	ExpressionStatement	 
>21078	CallExpression	kcb -> setWidthHeight ( 580 , 455 , 10 )
>21079	ArgumentList	580
>21080	Argument	10
>21081	PrimaryExpression	10
>21082	Argument	455
>21083	PrimaryExpression	455
>21084	Argument	580
>21085	PrimaryExpression	580
>21086	Callee	kcb -> setWidthHeight
>21087	PtrMemberAccess	kcb -> setWidthHeight
>21088	Identifier	setWidthHeight
>21089	Identifier	kcb
>21090	ExpressionStatement	 
>21091	AssignmentExpr	kcb -> position = Vector ( 400 , 276 - 10 )
>21092	CallExpression	Vector ( 400 , 276 - 10 )
>21093	ArgumentList	400
>21094	Argument	276 - 10
>21095	AdditiveExpression	276 - 10
>21096	PrimaryExpression	10
>21097	PrimaryExpression	276
>21098	Argument	400
>21099	PrimaryExpression	400
>21100	Callee	Vector
>21101	Identifier	Vector
>21102	PtrMemberAccess	kcb -> position
>21103	Identifier	position
>21104	Identifier	kcb
>21105	IdentifierDeclStatement	 
>21106	IdentifierDecl	* kcb = new RoundedRect ( )
>21107	AssignmentExpr	* kcb = new RoundedRect ( )
>21108	UnaryExpression	new RoundedRect ( )
>21109	Identifier	kcb
>21110	Identifier	kcb
>21111	IdentifierDeclType	RoundedRect *
>21112	ExpressionStatement	 
>21113	Identifier	RenderObject
>21114	Statement	 
>21115	Statement	 
>21116	Statement	 
>21117	ExpressionStatement	 
>21118	CallExpression	addRenderObject ( keyConfigButton , LR_MENU )
>21119	ArgumentList	keyConfigButton
>21120	Argument	LR_MENU
>21121	Identifier	LR_MENU
>21122	Argument	keyConfigButton
>21123	Identifier	keyConfigButton
>21124	Callee	addRenderObject
>21125	Identifier	addRenderObject
>21126	ExpressionStatement	 
>21127	CallExpression	keyConfigButton -> event . set ( MakeFunctionEvent ( Game , onKeyConfig ) )
>21128	ArgumentList	MakeFunctionEvent ( Game , onKeyConfig )
>21129	Argument	MakeFunctionEvent ( Game , onKeyConfig )
>21130	CallExpression	MakeFunctionEvent ( Game , onKeyConfig )
>21131	ArgumentList	Game
>21132	Argument	onKeyConfig
>21133	Identifier	onKeyConfig
>21134	Argument	Game
>21135	Identifier	Game
>21136	Callee	MakeFunctionEvent
>21137	Identifier	MakeFunctionEvent
>21138	Callee	keyConfigButton -> event . set
>21139	MemberAccess	keyConfigButton -> event . set
>21140	Identifier	set
>21141	PtrMemberAccess	keyConfigButton -> event
>21142	Identifier	event
>21143	Identifier	keyConfigButton
>21144	ExpressionStatement	 
>21145	AssignmentExpr	keyConfigButton -> scale = Vector ( 0.8 , 0.8 )
>21146	CallExpression	Vector ( 0.8 , 0.8 )
>21147	ArgumentList	0.8
>21148	Argument	0.8
>21149	PrimaryExpression	0.8
>21150	Argument	0.8
>21151	PrimaryExpression	0.8
>21152	Callee	Vector
>21153	Identifier	Vector
>21154	PtrMemberAccess	keyConfigButton -> scale
>21155	Identifier	scale
>21156	Identifier	keyConfigButton
>21157	ExpressionStatement	 
>21158	AssignmentExpr	keyConfigButton -> alpha = 0
>21159	PrimaryExpression	0
>21160	PtrMemberAccess	keyConfigButton -> alpha
>21161	Identifier	alpha
>21162	Identifier	keyConfigButton
>21163	ExpressionStatement	 
>21164	AssignmentExpr	keyConfigButton -> position = worldRightCenter + Vector ( 0 , 80 )
>21165	AdditiveExpression	worldRightCenter + Vector ( 0 , 80 )
>21166	CallExpression	Vector ( 0 , 80 )
>21167	ArgumentList	0
>21168	Argument	80
>21169	PrimaryExpression	80
>21170	Argument	0
>21171	PrimaryExpression	0
>21172	Callee	Vector
>21173	Identifier	Vector
>21174	Identifier	worldRightCenter
>21175	PtrMemberAccess	keyConfigButton -> position
>21176	Identifier	position
>21177	Identifier	keyConfigButton
>21178	ExpressionStatement	 
>21179	CallExpression	keyConfigButton -> useGlow ( \"particles/glow\" , 128 , 40 )
>21180	ArgumentList	\"particles/glow\"
>21181	Argument	40
>21182	PrimaryExpression	40
>21183	Argument	128
>21184	PrimaryExpression	128
>21185	Argument	\"particles/glow\"
>21186	PrimaryExpression	\"particles/glow\"
>21187	Callee	keyConfigButton -> useGlow
>21188	PtrMemberAccess	keyConfigButton -> useGlow
>21189	Identifier	useGlow
>21190	Identifier	keyConfigButton
>21191	ExpressionStatement	 
>21192	CallExpression	keyConfigButton -> useQuad ( \"gui/keyconfig-button\" )
>21193	ArgumentList	\"gui/keyconfig-button\"
>21194	Argument	\"gui/keyconfig-button\"
>21195	PrimaryExpression	\"gui/keyconfig-button\"
>21196	Callee	keyConfigButton -> useQuad
>21197	PtrMemberAccess	keyConfigButton -> useQuad
>21198	Identifier	useQuad
>21199	Identifier	keyConfigButton
>21200	ExpressionStatement	 
>21201	Identifier	AquariaMenuItem
>21202	Statement	 
>21203	Statement	 
>21204	Statement	 
>21205	IdentifierDeclStatement	 
>21206	IdentifierDecl	food = 0
>21207	AssignmentExpr	food = 0
>21208	PrimaryExpression	0
>21209	Identifier	food
>21210	Identifier	food
>21211	IdentifierDeclType	int
>21212	IdentifierDeclStatement	 
>21213	IdentifierDecl	radius = 118
>21214	AssignmentExpr	radius = 118
>21215	PrimaryExpression	118
>21216	Identifier	radius
>21217	Identifier	radius
>21218	IdentifierDeclType	int
>21219	ExpressionStatement	 
>21220	CallExpression	treasureTips . push_back ( tip )
>21221	ArgumentList	tip
>21222	Argument	tip
>21223	Identifier	tip
>21224	Callee	treasureTips . push_back
>21225	MemberAccess	treasureTips . push_back
>21226	Identifier	push_back
>21227	Identifier	treasureTips
>21228	ExpressionStatement	 
>21229	CallExpression	petTips . push_back ( tip )
>21230	ArgumentList	tip
>21231	Argument	tip
>21232	Identifier	tip
>21233	Callee	petTips . push_back
>21234	MemberAccess	petTips . push_back
>21235	Identifier	push_back
>21236	Identifier	petTips
>21237	ExpressionStatement	 
>21238	CallExpression	foodTips . push_back ( tip )
>21239	ArgumentList	tip
>21240	Argument	tip
>21241	Identifier	tip
>21242	Callee	foodTips . push_back
>21243	MemberAccess	foodTips . push_back
>21244	Identifier	push_back
>21245	Identifier	foodTips
>21246	ExpressionStatement	 
>21247	CallExpression	songTips . push_back ( tip )
>21248	ArgumentList	tip
>21249	Argument	tip
>21250	Identifier	tip
>21251	Callee	songTips . push_back
>21252	MemberAccess	songTips . push_back
>21253	Identifier	push_back
>21254	Identifier	songTips
>21255	ExpressionStatement	 
>21256	CallExpression	addRenderObject ( tip , LR_HUD )
>21257	ArgumentList	tip
>21258	Argument	LR_HUD
>21259	Identifier	LR_HUD
>21260	Argument	tip
>21261	Identifier	tip
>21262	Callee	addRenderObject
>21263	Identifier	addRenderObject
>21264	ExpressionStatement	 
>21265	CallExpression	tip -> setText ( dsq -> continuity . stringBank . get ( 15 ) , Vector ( 400 , 450 ) , 450 )
>21266	ArgumentList	dsq -> continuity . stringBank . get ( 15 )
>21267	Argument	450
>21268	PrimaryExpression	450
>21269	Argument	Vector ( 400 , 450 )
>21270	CallExpression	Vector ( 400 , 450 )
>21271	ArgumentList	400
>21272	Argument	450
>21273	PrimaryExpression	450
>21274	Argument	400
>21275	PrimaryExpression	400
>21276	Callee	Vector
>21277	Identifier	Vector
>21278	Argument	dsq -> continuity . stringBank . get ( 15 )
>21279	CallExpression	dsq -> continuity . stringBank . get ( 15 )
>21280	ArgumentList	15
>21281	Argument	15
>21282	PrimaryExpression	15
>21283	Callee	dsq -> continuity . stringBank . get
>21284	MemberAccess	dsq -> continuity . stringBank . get
>21285	Identifier	get
>21286	MemberAccess	dsq -> continuity . stringBank
>21287	Identifier	stringBank
>21288	PtrMemberAccess	dsq -> continuity
>21289	Identifier	continuity
>21290	Identifier	dsq
>21291	Callee	tip -> setText
>21292	PtrMemberAccess	tip -> setText
>21293	Identifier	setText
>21294	Identifier	tip
>21295	ExpressionStatement	 
>21296	CallExpression	tip -> setAreaFromCenter ( Vector ( 400 , 350 ) , 150 , 50 )
>21297	ArgumentList	Vector ( 400 , 350 )
>21298	Argument	50
>21299	PrimaryExpression	50
>21300	Argument	150
>21301	PrimaryExpression	150
>21302	Argument	Vector ( 400 , 350 )
>21303	CallExpression	Vector ( 400 , 350 )
>21304	ArgumentList	400
>21305	Argument	350
>21306	PrimaryExpression	350
>21307	Argument	400
>21308	PrimaryExpression	400
>21309	Callee	Vector
>21310	Identifier	Vector
>21311	Callee	tip -> setAreaFromCenter
>21312	PtrMemberAccess	tip -> setAreaFromCenter
>21313	Identifier	setAreaFromCenter
>21314	Identifier	tip
>21315	ExpressionStatement	 
>21316	AssignmentExpr	tip -> alpha = 0
>21317	PrimaryExpression	0
>21318	PtrMemberAccess	tip -> alpha
>21319	Identifier	alpha
>21320	Identifier	tip
>21321	ExpressionStatement	 
>21322	Identifier	ToolTip
>21323	Statement	 
>21324	Statement	 
>21325	Statement	 
>21326	ExpressionStatement	 
>21327	CallExpression	petTips . push_back ( tip )
>21328	ArgumentList	tip
>21329	Argument	tip
>21330	Identifier	tip
>21331	Callee	petTips . push_back
>21332	MemberAccess	petTips . push_back
>21333	Identifier	push_back
>21334	Identifier	petTips
>21335	ExpressionStatement	 
>21336	CallExpression	addRenderObject ( tip , LR_HUD )
>21337	ArgumentList	tip
>21338	Argument	LR_HUD
>21339	Identifier	LR_HUD
>21340	Argument	tip
>21341	Identifier	tip
>21342	Callee	addRenderObject
>21343	Identifier	addRenderObject
>21344	ExpressionStatement	 
>21345	CallExpression	tip -> setText ( dsq -> continuity . stringBank . get ( 17 ) , Vector ( 200 , 450 ) , 350 )
>21346	ArgumentList	dsq -> continuity . stringBank . get ( 17 )
>21347	Argument	350
>21348	PrimaryExpression	350
>21349	Argument	Vector ( 200 , 450 )
>21350	CallExpression	Vector ( 200 , 450 )
>21351	ArgumentList	200
>21352	Argument	450
>21353	PrimaryExpression	450
>21354	Argument	200
>21355	PrimaryExpression	200
>21356	Callee	Vector
>21357	Identifier	Vector
>21358	Argument	dsq -> continuity . stringBank . get ( 17 )
>21359	CallExpression	dsq -> continuity . stringBank . get ( 17 )
>21360	ArgumentList	17
>21361	Argument	17
>21362	PrimaryExpression	17
>21363	Callee	dsq -> continuity . stringBank . get
>21364	MemberAccess	dsq -> continuity . stringBank . get
>21365	Identifier	get
>21366	MemberAccess	dsq -> continuity . stringBank
>21367	Identifier	stringBank
>21368	PtrMemberAccess	dsq -> continuity
>21369	Identifier	continuity
>21370	Identifier	dsq
>21371	Callee	tip -> setText
>21372	PtrMemberAccess	tip -> setText
>21373	Identifier	setText
>21374	Identifier	tip
>21375	ExpressionStatement	 
>21376	CallExpression	tip -> setCircularAreaFromCenter ( worldLeftCenter , 240 )
>21377	ArgumentList	worldLeftCenter
>21378	Argument	240
>21379	PrimaryExpression	240
>21380	Argument	worldLeftCenter
>21381	Identifier	worldLeftCenter
>21382	Callee	tip -> setCircularAreaFromCenter
>21383	PtrMemberAccess	tip -> setCircularAreaFromCenter
>21384	Identifier	setCircularAreaFromCenter
>21385	Identifier	tip
>21386	ExpressionStatement	 
>21387	AssignmentExpr	tip -> alpha = 0
>21388	PrimaryExpression	0
>21389	PtrMemberAccess	tip -> alpha
>21390	Identifier	alpha
>21391	Identifier	tip
>21392	ExpressionStatement	 
>21393	Identifier	ToolTip
>21394	Statement	 
>21395	Statement	 
>21396	Statement	 
>21397	ExpressionStatement	 
>21398	CallExpression	songTips . push_back ( tip )
>21399	ArgumentList	tip
>21400	Argument	tip
>21401	Identifier	tip
>21402	Callee	songTips . push_back
>21403	MemberAccess	songTips . push_back
>21404	Identifier	push_back
>21405	Identifier	songTips
>21406	ExpressionStatement	 
>21407	CallExpression	addRenderObject ( tip , LR_HUD )
>21408	ArgumentList	tip
>21409	Argument	LR_HUD
>21410	Identifier	LR_HUD
>21411	Argument	tip
>21412	Identifier	tip
>21413	Callee	addRenderObject
>21414	Identifier	addRenderObject
>21415	ExpressionStatement	 
>21416	CallExpression	tip -> setText ( dsq -> continuity . stringBank . get ( 14 ) , Vector ( 200 , 450 ) , 350 )
>21417	ArgumentList	dsq -> continuity . stringBank . get ( 14 )
>21418	Argument	350
>21419	PrimaryExpression	350
>21420	Argument	Vector ( 200 , 450 )
>21421	CallExpression	Vector ( 200 , 450 )
>21422	ArgumentList	200
>21423	Argument	450
>21424	PrimaryExpression	450
>21425	Argument	200
>21426	PrimaryExpression	200
>21427	Callee	Vector
>21428	Identifier	Vector
>21429	Argument	dsq -> continuity . stringBank . get ( 14 )
>21430	CallExpression	dsq -> continuity . stringBank . get ( 14 )
>21431	ArgumentList	14
>21432	Argument	14
>21433	PrimaryExpression	14
>21434	Callee	dsq -> continuity . stringBank . get
>21435	MemberAccess	dsq -> continuity . stringBank . get
>21436	Identifier	get
>21437	MemberAccess	dsq -> continuity . stringBank
>21438	Identifier	stringBank
>21439	PtrMemberAccess	dsq -> continuity
>21440	Identifier	continuity
>21441	Identifier	dsq
>21442	Callee	tip -> setText
>21443	PtrMemberAccess	tip -> setText
>21444	Identifier	setText
>21445	Identifier	tip
>21446	ExpressionStatement	 
>21447	CallExpression	tip -> setCircularAreaFromCenter ( worldLeftCenter , 240 )
>21448	ArgumentList	worldLeftCenter
>21449	Argument	240
>21450	PrimaryExpression	240
>21451	Argument	worldLeftCenter
>21452	Identifier	worldLeftCenter
>21453	Callee	tip -> setCircularAreaFromCenter
>21454	PtrMemberAccess	tip -> setCircularAreaFromCenter
>21455	Identifier	setCircularAreaFromCenter
>21456	Identifier	tip
>21457	ExpressionStatement	 
>21458	AssignmentExpr	tip -> alpha = 0
>21459	PrimaryExpression	0
>21460	PtrMemberAccess	tip -> alpha
>21461	Identifier	alpha
>21462	Identifier	tip
>21463	ExpressionStatement	 
>21464	Identifier	ToolTip
>21465	Statement	 
>21466	Statement	 
>21467	Statement	 
>21468	ExpressionStatement	 
>21469	CallExpression	foodTips . push_back ( tip )
>21470	ArgumentList	tip
>21471	Argument	tip
>21472	Identifier	tip
>21473	Callee	foodTips . push_back
>21474	MemberAccess	foodTips . push_back
>21475	Identifier	push_back
>21476	Identifier	foodTips
>21477	ExpressionStatement	 
>21478	CallExpression	addRenderObject ( tip , LR_HUD )
>21479	ArgumentList	tip
>21480	Argument	LR_HUD
>21481	Identifier	LR_HUD
>21482	Argument	tip
>21483	Identifier	tip
>21484	Callee	addRenderObject
>21485	Identifier	addRenderObject
>21486	ExpressionStatement	 
>21487	CallExpression	tip -> setText ( dsq -> continuity . stringBank . get ( 1 ) , Vector ( 600 , 450 ) , 350 )
>21488	ArgumentList	dsq -> continuity . stringBank . get ( 1 )
>21489	Argument	350
>21490	PrimaryExpression	350
>21491	Argument	Vector ( 600 , 450 )
>21492	CallExpression	Vector ( 600 , 450 )
>21493	ArgumentList	600
>21494	Argument	450
>21495	PrimaryExpression	450
>21496	Argument	600
>21497	PrimaryExpression	600
>21498	Callee	Vector
>21499	Identifier	Vector
>21500	Argument	dsq -> continuity . stringBank . get ( 1 )
>21501	CallExpression	dsq -> continuity . stringBank . get ( 1 )
>21502	ArgumentList	1
>21503	Argument	1
>21504	PrimaryExpression	1
>21505	Callee	dsq -> continuity . stringBank . get
>21506	MemberAccess	dsq -> continuity . stringBank . get
>21507	Identifier	get
>21508	MemberAccess	dsq -> continuity . stringBank
>21509	Identifier	stringBank
>21510	PtrMemberAccess	dsq -> continuity
>21511	Identifier	continuity
>21512	Identifier	dsq
>21513	Callee	tip -> setText
>21514	PtrMemberAccess	tip -> setText
>21515	Identifier	setText
>21516	Identifier	tip
>21517	ExpressionStatement	 
>21518	CallExpression	tip -> setCircularAreaFromCenter ( worldRightCenter , 240 )
>21519	ArgumentList	worldRightCenter
>21520	Argument	240
>21521	PrimaryExpression	240
>21522	Argument	worldRightCenter
>21523	Identifier	worldRightCenter
>21524	Callee	tip -> setCircularAreaFromCenter
>21525	PtrMemberAccess	tip -> setCircularAreaFromCenter
>21526	Identifier	setCircularAreaFromCenter
>21527	Identifier	tip
>21528	ExpressionStatement	 
>21529	AssignmentExpr	tip -> alpha = 0
>21530	PrimaryExpression	0
>21531	PtrMemberAccess	tip -> alpha
>21532	Identifier	alpha
>21533	Identifier	tip
>21534	ExpressionStatement	 
>21535	Identifier	ToolTip
>21536	Statement	 
>21537	Statement	 
>21538	Statement	 
>21539	ExpressionStatement	 
>21540	CallExpression	foodTips . push_back ( tip )
>21541	ArgumentList	tip
>21542	Argument	tip
>21543	Identifier	tip
>21544	Callee	foodTips . push_back
>21545	MemberAccess	foodTips . push_back
>21546	Identifier	push_back
>21547	Identifier	foodTips
>21548	ExpressionStatement	 
>21549	CallExpression	addRenderObject ( tip , LR_HUD )
>21550	ArgumentList	tip
>21551	Argument	LR_HUD
>21552	Identifier	LR_HUD
>21553	Argument	tip
>21554	Identifier	tip
>21555	Callee	addRenderObject
>21556	Identifier	addRenderObject
>21557	ExpressionStatement	 
>21558	CallExpression	tip -> setText ( dsq -> continuity . stringBank . get ( 0 ) , Vector ( 200 , 450 ) , 350 )
>21559	ArgumentList	dsq -> continuity . stringBank . get ( 0 )
>21560	Argument	350
>21561	PrimaryExpression	350
>21562	Argument	Vector ( 200 , 450 )
>21563	CallExpression	Vector ( 200 , 450 )
>21564	ArgumentList	200
>21565	Argument	450
>21566	PrimaryExpression	450
>21567	Argument	200
>21568	PrimaryExpression	200
>21569	Callee	Vector
>21570	Identifier	Vector
>21571	Argument	dsq -> continuity . stringBank . get ( 0 )
>21572	CallExpression	dsq -> continuity . stringBank . get ( 0 )
>21573	ArgumentList	0
>21574	Argument	0
>21575	PrimaryExpression	0
>21576	Callee	dsq -> continuity . stringBank . get
>21577	MemberAccess	dsq -> continuity . stringBank . get
>21578	Identifier	get
>21579	MemberAccess	dsq -> continuity . stringBank
>21580	Identifier	stringBank
>21581	PtrMemberAccess	dsq -> continuity
>21582	Identifier	continuity
>21583	Identifier	dsq
>21584	Callee	tip -> setText
>21585	PtrMemberAccess	tip -> setText
>21586	Identifier	setText
>21587	Identifier	tip
>21588	ExpressionStatement	 
>21589	CallExpression	tip -> setCircularAreaFromCenter ( worldLeftCenter , 240 )
>21590	ArgumentList	worldLeftCenter
>21591	Argument	240
>21592	PrimaryExpression	240
>21593	Argument	worldLeftCenter
>21594	Identifier	worldLeftCenter
>21595	Callee	tip -> setCircularAreaFromCenter
>21596	PtrMemberAccess	tip -> setCircularAreaFromCenter
>21597	Identifier	setCircularAreaFromCenter
>21598	Identifier	tip
>21599	ExpressionStatement	 
>21600	AssignmentExpr	tip -> alpha = 0
>21601	PrimaryExpression	0
>21602	PtrMemberAccess	tip -> alpha
>21603	Identifier	alpha
>21604	Identifier	tip
>21605	ExpressionStatement	 
>21606	Identifier	ToolTip
>21607	Statement	 
>21608	Statement	 
>21609	Statement	 
>21610	ExpressionStatement	 
>21611	CallExpression	treasureTips . clear ( )
>21612	ArgumentList	 
>21613	Callee	treasureTips . clear
>21614	MemberAccess	treasureTips . clear
>21615	Identifier	clear
>21616	Identifier	treasureTips
>21617	ExpressionStatement	 
>21618	CallExpression	petTips . clear ( )
>21619	ArgumentList	 
>21620	Callee	petTips . clear
>21621	MemberAccess	petTips . clear
>21622	Identifier	clear
>21623	Identifier	petTips
>21624	ExpressionStatement	 
>21625	CallExpression	songTips . clear ( )
>21626	ArgumentList	 
>21627	Callee	songTips . clear
>21628	MemberAccess	songTips . clear
>21629	Identifier	clear
>21630	Identifier	songTips
>21631	ExpressionStatement	 
>21632	CallExpression	foodTips . clear ( )
>21633	ArgumentList	 
>21634	Callee	foodTips . clear
>21635	MemberAccess	foodTips . clear
>21636	Identifier	clear
>21637	Identifier	foodTips
>21638	IdentifierDeclStatement	 
>21639	IdentifierDecl	* tip = 0
>21640	AssignmentExpr	* tip = 0
>21641	PrimaryExpression	0
>21642	Identifier	tip
>21643	Identifier	tip
>21644	IdentifierDeclType	ToolTip *
>21645	ExpressionStatement	 
>21646	CallExpression	menuBg -> addChild ( songLabel , PM_POINTER )
>21647	ArgumentList	songLabel
>21648	Argument	PM_POINTER
>21649	Identifier	PM_POINTER
>21650	Argument	songLabel
>21651	Identifier	songLabel
>21652	Callee	menuBg -> addChild
>21653	PtrMemberAccess	menuBg -> addChild
>21654	Identifier	addChild
>21655	Identifier	menuBg
>21656	CompoundStatement	 
>21657	ExpressionStatement	 
>21658	AssignmentExpr	songLabel -> scale = Vector ( 1.2 , 1.2 )
>21659	CallExpression	Vector ( 1.2 , 1.2 )
>21660	ArgumentList	1.2
>21661	Argument	1.2
>21662	PrimaryExpression	1.2
>21663	Argument	1.2
>21664	PrimaryExpression	1.2
>21665	Callee	Vector
>21666	Identifier	Vector
>21667	PtrMemberAccess	songLabel -> scale
>21668	Identifier	scale
>21669	Identifier	songLabel
>21670	ExpressionStatement	 
>21671	AssignmentExpr	songLabel -> position = Vector ( - center . x , center . y ) + Vector ( 0 , - 15 )
>21672	AdditiveExpression	Vector ( - center . x , center . y ) + Vector ( 0 , - 15 )
>21673	CallExpression	Vector ( 0 , - 15 )
>21674	ArgumentList	0
>21675	Argument	- 15
>21676	UnaryOp	- 15
>21677	PrimaryExpression	15
>21678	UnaryOperator	-
>21679	Argument	0
>21680	PrimaryExpression	0
>21681	Callee	Vector
>21682	Identifier	Vector
>21683	CallExpression	Vector ( - center . x , center . y )
>21684	ArgumentList	- center . x
>21685	Argument	center . y
>21686	MemberAccess	center . y
>21687	Identifier	y
>21688	Identifier	center
>21689	Argument	- center . x
>21690	UnaryOp	- center . x
>21691	MemberAccess	center . x
>21692	Identifier	x
>21693	Identifier	center
>21694	UnaryOperator	-
>21695	Callee	Vector
>21696	Identifier	Vector
>21697	PtrMemberAccess	songLabel -> position
>21698	Identifier	position
>21699	Identifier	songLabel
>21700	ExpressionStatement	 
>21701	CallExpression	songLabel -> setFontSize ( 20 )
>21702	ArgumentList	20
>21703	Argument	20
>21704	PrimaryExpression	20
>21705	Callee	songLabel -> setFontSize
>21706	PtrMemberAccess	songLabel -> setFontSize
>21707	Identifier	setFontSize
>21708	Identifier	songLabel
>21709	ExpressionStatement	 
>21710	AssignmentExpr	songLabel -> followCamera = 1
>21711	PrimaryExpression	1
>21712	PtrMemberAccess	songLabel -> followCamera
>21713	Identifier	followCamera
>21714	Identifier	songLabel
>21715	ExpressionStatement	 
>21716	CallExpression	songLabel -> setAlign ( ALIGN_CENTER )
>21717	ArgumentList	ALIGN_CENTER
>21718	Argument	ALIGN_CENTER
>21719	Identifier	ALIGN_CENTER
>21720	Callee	songLabel -> setAlign
>21721	PtrMemberAccess	songLabel -> setAlign
>21722	Identifier	setAlign
>21723	Identifier	songLabel
>21724	ExpressionStatement	 
>21725	AssignmentExpr	songLabel -> alpha = 0
>21726	PrimaryExpression	0
>21727	PtrMemberAccess	songLabel -> alpha
>21728	Identifier	alpha
>21729	Identifier	songLabel
>21730	ExpressionStatement	 
>21731	AssignmentExpr	songLabel = new BitmapText ( & dsq -> smallFont )
>21732	UnaryOp	& dsq -> smallFont
>21733	PtrMemberAccess	dsq -> smallFont
>21734	Identifier	smallFont
>21735	Identifier	dsq
>21736	UnaryOperator	&
>21737	Identifier	songLabel
>21738	ExpressionStatement	 
>21739	CallExpression	menuBg -> addChild ( songBubbles , PM_POINTER )
>21740	ArgumentList	songBubbles
>21741	Argument	PM_POINTER
>21742	Identifier	PM_POINTER
>21743	Argument	songBubbles
>21744	Identifier	songBubbles
>21745	Callee	menuBg -> addChild
>21746	PtrMemberAccess	menuBg -> addChild
>21747	Identifier	addChild
>21748	Identifier	menuBg
>21749	ExpressionStatement	 
>21750	AssignmentExpr	songBubbles = new Quad ( \"gui/SongBubbles\" , Vector ( - center . x , center . y ) )
>21751	Expression	\"gui/SongBubbles\" , Vector ( - center . x , center . y )
>21752	CallExpression	Vector ( - center . x , center . y )
>21753	ArgumentList	- center . x
>21754	Argument	center . y
>21755	MemberAccess	center . y
>21756	Identifier	y
>21757	Identifier	center
>21758	Argument	- center . x
>21759	UnaryOp	- center . x
>21760	MemberAccess	center . x
>21761	Identifier	x
>21762	Identifier	center
>21763	UnaryOperator	-
>21764	Callee	Vector
>21765	Identifier	Vector
>21766	PrimaryExpression	\"gui/SongBubbles\"
>21767	Identifier	songBubbles
>21768	ExpressionStatement	 
>21769	CallExpression	menuBg -> addChild ( liCrystal , PM_POINTER )
>21770	ArgumentList	liCrystal
>21771	Argument	PM_POINTER
>21772	Identifier	PM_POINTER
>21773	Argument	liCrystal
>21774	Identifier	liCrystal
>21775	Callee	menuBg -> addChild
>21776	PtrMemberAccess	menuBg -> addChild
>21777	Identifier	addChild
>21778	Identifier	menuBg
>21779	ExpressionStatement	 
>21780	AssignmentExpr	liCrystal = new Quad ( \"gui/li-crystal\" , Vector ( 0 , 0 ) )
>21781	Expression	\"gui/li-crystal\" , Vector ( 0 , 0 )
>21782	CallExpression	Vector ( 0 , 0 )
>21783	ArgumentList	0
>21784	Argument	0
>21785	PrimaryExpression	0
>21786	Argument	0
>21787	PrimaryExpression	0
>21788	Callee	Vector
>21789	Identifier	Vector
>21790	PrimaryExpression	\"gui/li-crystal\"
>21791	Identifier	liCrystal
>21792	ExpressionStatement	 
>21793	CallExpression	menuBg -> addChild ( energyIdol , PM_POINTER )
>21794	ArgumentList	energyIdol
>21795	Argument	PM_POINTER
>21796	Identifier	PM_POINTER
>21797	Argument	energyIdol
>21798	Identifier	energyIdol
>21799	Callee	menuBg -> addChild
>21800	PtrMemberAccess	menuBg -> addChild
>21801	Identifier	addChild
>21802	Identifier	menuBg
>21803	ExpressionStatement	 
>21804	AssignmentExpr	energyIdol = new Quad ( \"formupgrades/energyidol-charged\" , Vector ( 40 , 0 ) )
>21805	Expression	\"formupgrades/energyidol-charged\" , Vector ( 40 , 0 )
>21806	CallExpression	Vector ( 40 , 0 )
>21807	ArgumentList	40
>21808	Argument	0
>21809	PrimaryExpression	0
>21810	Argument	40
>21811	PrimaryExpression	40
>21812	Callee	Vector
>21813	Identifier	Vector
>21814	PrimaryExpression	\"formupgrades/energyidol-charged\"
>21815	Identifier	energyIdol
>21816	IdentifierDeclStatement	 
>21817	IdentifierDecl	rightCenter ( 230 , - 50 )
>21818	Expression	230 , - 50
>21819	UnaryOp	- 50
>21820	PrimaryExpression	50
>21821	UnaryOperator	-
>21822	PrimaryExpression	230
>21823	Identifier	rightCenter
>21824	IdentifierDeclType	Vector
>21825	IdentifierDecl	center ( - 230 , - 50 )
>21826	Expression	- 230 , - 50
>21827	UnaryOp	- 50
>21828	PrimaryExpression	50
>21829	UnaryOperator	-
>21830	UnaryOp	- 230
>21831	PrimaryExpression	230
>21832	UnaryOperator	-
>21833	Identifier	center
>21834	IdentifierDeclType	Vector
>21835	ExpressionStatement	 
>21836	CallExpression	songSlots . resize ( 10 )
>21837	ArgumentList	10
>21838	Argument	10
>21839	PrimaryExpression	10
>21840	Callee	songSlots . resize
>21841	MemberAccess	songSlots . resize
>21842	Identifier	resize
>21843	Identifier	songSlots
>21844	ExpressionStatement	 
>21845	CallExpression	songSlots . clear ( )
>21846	ArgumentList	 
>21847	Callee	songSlots . clear
>21848	MemberAccess	songSlots . clear
>21849	Identifier	clear
>21850	Identifier	songSlots
>21851	ExpressionStatement	 
>21852	AssignmentExpr	scale = 1
>21853	PrimaryExpression	1
>21854	Identifier	scale
>21855	ExpressionStatement	 
>21856	CallExpression	addRenderObject ( options , LR_MENU )
>21857	ArgumentList	options
>21858	Argument	LR_MENU
>21859	Identifier	LR_MENU
>21860	Argument	options
>21861	Identifier	options
>21862	Callee	addRenderObject
>21863	Identifier	addRenderObject
>21864	ExpressionStatement	 
>21865	AssignmentExpr	options -> followCamera = 1
>21866	PrimaryExpression	1
>21867	PtrMemberAccess	options -> followCamera
>21868	Identifier	followCamera
>21869	Identifier	options
>21870	ExpressionStatement	 
>21871	AssignmentExpr	options -> alpha = 0
>21872	PrimaryExpression	0
>21873	PtrMemberAccess	options -> alpha
>21874	Identifier	alpha
>21875	Identifier	options
>21876	ExpressionStatement	 
>21877	AssignmentExpr	options -> shareAlphaWithChildren = 1
>21878	PrimaryExpression	1
>21879	PtrMemberAccess	options -> shareAlphaWithChildren
>21880	Identifier	shareAlphaWithChildren
>21881	Identifier	options
>21882	ExpressionStatement	 
>21883	CallExpression	addRenderObject ( opt_cancel , LR_MENU )
>21884	ArgumentList	opt_cancel
>21885	Argument	LR_MENU
>21886	Identifier	LR_MENU
>21887	Argument	opt_cancel
>21888	Identifier	opt_cancel
>21889	Callee	addRenderObject
>21890	Identifier	addRenderObject
>21891	ExpressionStatement	 
>21892	AssignmentExpr	opt_cancel -> alpha = 0
>21893	PrimaryExpression	0
>21894	PtrMemberAccess	opt_cancel -> alpha
>21895	Identifier	alpha
>21896	Identifier	opt_cancel
>21897	ExpressionStatement	 
>21898	AssignmentExpr	opt_cancel -> position = opt_cancel_original
>21899	Identifier	opt_cancel_original
>21900	PtrMemberAccess	opt_cancel -> position
>21901	Identifier	position
>21902	Identifier	opt_cancel
>21903	ExpressionStatement	 
>21904	CallExpression	opt_cancel -> event . set ( MakeFunctionEvent ( Game , onOptionsCancel ) )
>21905	ArgumentList	MakeFunctionEvent ( Game , onOptionsCancel )
>21906	Argument	MakeFunctionEvent ( Game , onOptionsCancel )
>21907	CallExpression	MakeFunctionEvent ( Game , onOptionsCancel )
>21908	ArgumentList	Game
>21909	Argument	onOptionsCancel
>21910	Identifier	onOptionsCancel
>21911	Argument	Game
>21912	Identifier	Game
>21913	Callee	MakeFunctionEvent
>21914	Identifier	MakeFunctionEvent
>21915	Callee	opt_cancel -> event . set
>21916	MemberAccess	opt_cancel -> event . set
>21917	Identifier	set
>21918	PtrMemberAccess	opt_cancel -> event
>21919	Identifier	event
>21920	Identifier	opt_cancel
>21921	ExpressionStatement	 
>21922	CallExpression	opt_cancel -> useGlow ( \"particles/glow\" , 100 , 50 )
>21923	ArgumentList	\"particles/glow\"
>21924	Argument	50
>21925	PrimaryExpression	50
>21926	Argument	100
>21927	PrimaryExpression	100
>21928	Argument	\"particles/glow\"
>21929	PrimaryExpression	\"particles/glow\"
>21930	Callee	opt_cancel -> useGlow
>21931	PtrMemberAccess	opt_cancel -> useGlow
>21932	Identifier	useGlow
>21933	Identifier	opt_cancel
>21934	ExpressionStatement	 
>21935	CallExpression	opt_cancel -> useQuad ( \"gui/Cancel\" )
>21936	ArgumentList	\"gui/Cancel\"
>21937	Argument	\"gui/Cancel\"
>21938	PrimaryExpression	\"gui/Cancel\"
>21939	Callee	opt_cancel -> useQuad
>21940	PtrMemberAccess	opt_cancel -> useQuad
>21941	Identifier	useQuad
>21942	Identifier	opt_cancel
>21943	ExpressionStatement	 
>21944	Identifier	AquariaMenuItem
>21945	Statement	 
>21946	Statement	 
>21947	Statement	 
>21948	ExpressionStatement	 
>21949	CallExpression	addRenderObject ( opt_save , LR_MENU )
>21950	ArgumentList	opt_save
>21951	Argument	LR_MENU
>21952	Identifier	LR_MENU
>21953	Argument	opt_save
>21954	Identifier	opt_save
>21955	Callee	addRenderObject
>21956	Identifier	addRenderObject
>21957	ExpressionStatement	 
>21958	AssignmentExpr	opt_save -> alpha = 0
>21959	PrimaryExpression	0
>21960	PtrMemberAccess	opt_save -> alpha
>21961	Identifier	alpha
>21962	Identifier	opt_save
>21963	ExpressionStatement	 
>21964	AssignmentExpr	opt_save -> position = opt_save_original
>21965	Identifier	opt_save_original
>21966	PtrMemberAccess	opt_save -> position
>21967	Identifier	position
>21968	Identifier	opt_save
>21969	ExpressionStatement	 
>21970	CallExpression	opt_save -> event . set ( MakeFunctionEvent ( Game , onOptionsSave ) )
>21971	ArgumentList	MakeFunctionEvent ( Game , onOptionsSave )
>21972	Argument	MakeFunctionEvent ( Game , onOptionsSave )
>21973	CallExpression	MakeFunctionEvent ( Game , onOptionsSave )
>21974	ArgumentList	Game
>21975	Argument	onOptionsSave
>21976	Identifier	onOptionsSave
>21977	Argument	Game
>21978	Identifier	Game
>21979	Callee	MakeFunctionEvent
>21980	Identifier	MakeFunctionEvent
>21981	Callee	opt_save -> event . set
>21982	MemberAccess	opt_save -> event . set
>21983	Identifier	set
>21984	PtrMemberAccess	opt_save -> event
>21985	Identifier	event
>21986	Identifier	opt_save
>21987	ExpressionStatement	 
>21988	CallExpression	opt_save -> useGlow ( \"particles/glow\" , 100 , 50 )
>21989	ArgumentList	\"particles/glow\"
>21990	Argument	50
>21991	PrimaryExpression	50
>21992	Argument	100
>21993	PrimaryExpression	100
>21994	Argument	\"particles/glow\"
>21995	PrimaryExpression	\"particles/glow\"
>21996	Callee	opt_save -> useGlow
>21997	PtrMemberAccess	opt_save -> useGlow
>21998	Identifier	useGlow
>21999	Identifier	opt_save
>22000	ExpressionStatement	 
>22001	CallExpression	opt_save -> useQuad ( \"gui/Apply\" )
>22002	ArgumentList	\"gui/Apply\"
>22003	Argument	\"gui/Apply\"
>22004	PrimaryExpression	\"gui/Apply\"
>22005	Callee	opt_save -> useQuad
>22006	PtrMemberAccess	opt_save -> useQuad
>22007	Identifier	useQuad
>22008	Identifier	opt_save
>22009	ExpressionStatement	 
>22010	Identifier	AquariaMenuItem
>22011	Statement	 
>22012	Statement	 
>22013	Statement	 
>22014	ExpressionStatement	 
>22015	CallExpression	options -> addChild ( targetingCheck , PM_POINTER )
>22016	ArgumentList	targetingCheck
>22017	Argument	PM_POINTER
>22018	Identifier	PM_POINTER
>22019	Argument	targetingCheck
>22020	Identifier	targetingCheck
>22021	Callee	options -> addChild
>22022	PtrMemberAccess	options -> addChild
>22023	Identifier	addChild
>22024	Identifier	options
>22025	ExpressionStatement	 
>22026	AssignmentExpr	targetingCheck -> position = Vector ( checkx , checky + 3 * checkd )
>22027	CallExpression	Vector ( checkx , checky + 3 * checkd )
>22028	ArgumentList	checkx
>22029	Argument	checky + 3 * checkd
>22030	AdditiveExpression	checky + 3 * checkd
>22031	MultiplicativeExpression	3 * checkd
>22032	Identifier	checkd
>22033	PrimaryExpression	3
>22034	Identifier	checky
>22035	Argument	checkx
>22036	Identifier	checkx
>22037	Callee	Vector
>22038	Identifier	Vector
>22039	PtrMemberAccess	targetingCheck -> position
>22040	Identifier	position
>22041	Identifier	targetingCheck
>22042	ExpressionStatement	 
>22043	CallExpression	targetingCheck -> setValue ( dsq -> user . control . targeting )
>22044	ArgumentList	dsq -> user . control . targeting
>22045	Argument	dsq -> user . control . targeting
>22046	MemberAccess	dsq -> user . control . targeting
>22047	Identifier	targeting
>22048	MemberAccess	dsq -> user . control
>22049	Identifier	control
>22050	PtrMemberAccess	dsq -> user
>22051	Identifier	user
>22052	Identifier	dsq
>22053	Callee	targetingCheck -> setValue
>22054	PtrMemberAccess	targetingCheck -> setValue
>22055	Identifier	setValue
>22056	Identifier	targetingCheck
>22057	ExpressionStatement	 
>22058	AssignmentExpr	targetingCheck = new AquariaCheckBox ( )
>22059	UnaryExpression	new AquariaCheckBox ( )
>22060	Identifier	targetingCheck
>22061	ExpressionStatement	 
>22062	CallExpression	options -> addChild ( autoAimCheck , PM_POINTER )
>22063	ArgumentList	autoAimCheck
>22064	Argument	PM_POINTER
>22065	Identifier	PM_POINTER
>22066	Argument	autoAimCheck
>22067	Identifier	autoAimCheck
>22068	Callee	options -> addChild
>22069	PtrMemberAccess	options -> addChild
>22070	Identifier	addChild
>22071	Identifier	options
>22072	ExpressionStatement	 
>22073	AssignmentExpr	autoAimCheck -> position = Vector ( checkx , checky + 2 * checkd )
>22074	CallExpression	Vector ( checkx , checky + 2 * checkd )
>22075	ArgumentList	checkx
>22076	Argument	checky + 2 * checkd
>22077	AdditiveExpression	checky + 2 * checkd
>22078	MultiplicativeExpression	2 * checkd
>22079	Identifier	checkd
>22080	PrimaryExpression	2
>22081	Identifier	checky
>22082	Argument	checkx
>22083	Identifier	checkx
>22084	Callee	Vector
>22085	Identifier	Vector
>22086	PtrMemberAccess	autoAimCheck -> position
>22087	Identifier	position
>22088	Identifier	autoAimCheck
>22089	ExpressionStatement	 
>22090	CallExpression	autoAimCheck -> setValue ( dsq -> user . control . autoAim )
>22091	ArgumentList	dsq -> user . control . autoAim
>22092	Argument	dsq -> user . control . autoAim
>22093	MemberAccess	dsq -> user . control . autoAim
>22094	Identifier	autoAim
>22095	MemberAccess	dsq -> user . control
>22096	Identifier	control
>22097	PtrMemberAccess	dsq -> user
>22098	Identifier	user
>22099	Identifier	dsq
>22100	Callee	autoAimCheck -> setValue
>22101	PtrMemberAccess	autoAimCheck -> setValue
>22102	Identifier	setValue
>22103	Identifier	autoAimCheck
>22104	ExpressionStatement	 
>22105	AssignmentExpr	autoAimCheck = new AquariaCheckBox ( )
>22106	UnaryExpression	new AquariaCheckBox ( )
>22107	Identifier	autoAimCheck
>22108	ExpressionStatement	 
>22109	CallExpression	options -> addChild ( toolTipsCheck , PM_POINTER )
>22110	ArgumentList	toolTipsCheck
>22111	Argument	PM_POINTER
>22112	Identifier	PM_POINTER
>22113	Argument	toolTipsCheck
>22114	Identifier	toolTipsCheck
>22115	Callee	options -> addChild
>22116	PtrMemberAccess	options -> addChild
>22117	Identifier	addChild
>22118	Identifier	options
>22119	ExpressionStatement	 
>22120	AssignmentExpr	toolTipsCheck -> position = Vector ( checkx , checky + 1 * checkd )
>22121	CallExpression	Vector ( checkx , checky + 1 * checkd )
>22122	ArgumentList	checkx
>22123	Argument	checky + 1 * checkd
>22124	AdditiveExpression	checky + 1 * checkd
>22125	MultiplicativeExpression	1 * checkd
>22126	Identifier	checkd
>22127	PrimaryExpression	1
>22128	Identifier	checky
>22129	Argument	checkx
>22130	Identifier	checkx
>22131	Callee	Vector
>22132	Identifier	Vector
>22133	PtrMemberAccess	toolTipsCheck -> position
>22134	Identifier	position
>22135	Identifier	toolTipsCheck
>22136	ExpressionStatement	 
>22137	CallExpression	toolTipsCheck -> setValue ( dsq -> user . control . toolTipsOn )
>22138	ArgumentList	dsq -> user . control . toolTipsOn
>22139	Argument	dsq -> user . control . toolTipsOn
>22140	MemberAccess	dsq -> user . control . toolTipsOn
>22141	Identifier	toolTipsOn
>22142	MemberAccess	dsq -> user . control
>22143	Identifier	control
>22144	PtrMemberAccess	dsq -> user
>22145	Identifier	user
>22146	Identifier	dsq
>22147	Callee	toolTipsCheck -> setValue
>22148	PtrMemberAccess	toolTipsCheck -> setValue
>22149	Identifier	setValue
>22150	Identifier	toolTipsCheck
>22151	ExpressionStatement	 
>22152	AssignmentExpr	toolTipsCheck = new AquariaCheckBox ( )
>22153	UnaryExpression	new AquariaCheckBox ( )
>22154	Identifier	toolTipsCheck
>22155	ExpressionStatement	 
>22156	AssignmentExpr	micInputCheck = 0
>22157	PrimaryExpression	0
>22158	Identifier	micInputCheck
>22159	ExpressionStatement	 
>22160	CallExpression	options -> addChild ( flipInputButtonsCheck , PM_POINTER )
>22161	ArgumentList	flipInputButtonsCheck
>22162	Argument	PM_POINTER
>22163	Identifier	PM_POINTER
>22164	Argument	flipInputButtonsCheck
>22165	Identifier	flipInputButtonsCheck
>22166	Callee	options -> addChild
>22167	PtrMemberAccess	options -> addChild
>22168	Identifier	addChild
>22169	Identifier	options
>22170	ExpressionStatement	 
>22171	AssignmentExpr	flipInputButtonsCheck -> position = Vector ( checkx , checky )
>22172	CallExpression	Vector ( checkx , checky )
>22173	ArgumentList	checkx
>22174	Argument	checky
>22175	Identifier	checky
>22176	Argument	checkx
>22177	Identifier	checkx
>22178	Callee	Vector
>22179	Identifier	Vector
>22180	PtrMemberAccess	flipInputButtonsCheck -> position
>22181	Identifier	position
>22182	Identifier	flipInputButtonsCheck
>22183	ExpressionStatement	 
>22184	CallExpression	flipInputButtonsCheck -> setValue ( dsq -> user . control . flipInputButtons )
>22185	ArgumentList	dsq -> user . control . flipInputButtons
>22186	Argument	dsq -> user . control . flipInputButtons
>22187	MemberAccess	dsq -> user . control . flipInputButtons
>22188	Identifier	flipInputButtons
>22189	MemberAccess	dsq -> user . control
>22190	Identifier	control
>22191	PtrMemberAccess	dsq -> user
>22192	Identifier	user
>22193	Identifier	dsq
>22194	Callee	flipInputButtonsCheck -> setValue
>22195	PtrMemberAccess	flipInputButtonsCheck -> setValue
>22196	Identifier	setValue
>22197	Identifier	flipInputButtonsCheck
>22198	ExpressionStatement	 
>22199	AssignmentExpr	flipInputButtonsCheck = new AquariaCheckBox ( )
>22200	UnaryExpression	new AquariaCheckBox ( )
>22201	Identifier	flipInputButtonsCheck
>22202	ExpressionStatement	 
>22203	CallExpression	options -> addChild ( voxslider , PM_POINTER )
>22204	ArgumentList	voxslider
>22205	Argument	PM_POINTER
>22206	Identifier	PM_POINTER
>22207	Argument	voxslider
>22208	Identifier	voxslider
>22209	Callee	options -> addChild
>22210	PtrMemberAccess	options -> addChild
>22211	Identifier	addChild
>22212	Identifier	options
>22213	ExpressionStatement	 
>22214	AssignmentExpr	voxslider -> position = Vector ( sliderx , slidery + 2 * sliderd )
>22215	CallExpression	Vector ( sliderx , slidery + 2 * sliderd )
>22216	ArgumentList	sliderx
>22217	Argument	slidery + 2 * sliderd
>22218	AdditiveExpression	slidery + 2 * sliderd
>22219	MultiplicativeExpression	2 * sliderd
>22220	Identifier	sliderd
>22221	PrimaryExpression	2
>22222	Identifier	slidery
>22223	Argument	sliderx
>22224	Identifier	sliderx
>22225	Callee	Vector
>22226	Identifier	Vector
>22227	PtrMemberAccess	voxslider -> position
>22228	Identifier	position
>22229	Identifier	voxslider
>22230	ExpressionStatement	 
>22231	CallExpression	voxslider -> setValue ( dsq -> user . audio . voxvol )
>22232	ArgumentList	dsq -> user . audio . voxvol
>22233	Argument	dsq -> user . audio . voxvol
>22234	MemberAccess	dsq -> user . audio . voxvol
>22235	Identifier	voxvol
>22236	MemberAccess	dsq -> user . audio
>22237	Identifier	audio
>22238	PtrMemberAccess	dsq -> user
>22239	Identifier	user
>22240	Identifier	dsq
>22241	Callee	voxslider -> setValue
>22242	PtrMemberAccess	voxslider -> setValue
>22243	Identifier	setValue
>22244	Identifier	voxslider
>22245	ExpressionStatement	 
>22246	AssignmentExpr	voxslider = new AquariaSlider ( )
>22247	UnaryExpression	new AquariaSlider ( )
>22248	Identifier	voxslider
>22249	ExpressionStatement	 
>22250	CallExpression	options -> addChild ( sfxslider , PM_POINTER )
>22251	ArgumentList	sfxslider
>22252	Argument	PM_POINTER
>22253	Identifier	PM_POINTER
>22254	Argument	sfxslider
>22255	Identifier	sfxslider
>22256	Callee	options -> addChild
>22257	PtrMemberAccess	options -> addChild
>22258	Identifier	addChild
>22259	Identifier	options
>22260	ExpressionStatement	 
>22261	AssignmentExpr	sfxslider -> position = Vector ( sliderx , slidery )
>22262	CallExpression	Vector ( sliderx , slidery )
>22263	ArgumentList	sliderx
>22264	Argument	slidery
>22265	Identifier	slidery
>22266	Argument	sliderx
>22267	Identifier	sliderx
>22268	Callee	Vector
>22269	Identifier	Vector
>22270	PtrMemberAccess	sfxslider -> position
>22271	Identifier	position
>22272	Identifier	sfxslider
>22273	ExpressionStatement	 
>22274	CallExpression	sfxslider -> setValue ( dsq -> user . audio . sfxvol )
>22275	ArgumentList	dsq -> user . audio . sfxvol
>22276	Argument	dsq -> user . audio . sfxvol
>22277	MemberAccess	dsq -> user . audio . sfxvol
>22278	Identifier	sfxvol
>22279	MemberAccess	dsq -> user . audio
>22280	Identifier	audio
>22281	PtrMemberAccess	dsq -> user
>22282	Identifier	user
>22283	Identifier	dsq
>22284	Callee	sfxslider -> setValue
>22285	PtrMemberAccess	sfxslider -> setValue
>22286	Identifier	setValue
>22287	Identifier	sfxslider
>22288	ExpressionStatement	 
>22289	AssignmentExpr	sfxslider = new AquariaSlider ( )
>22290	UnaryExpression	new AquariaSlider ( )
>22291	Identifier	sfxslider
>22292	ExpressionStatement	 
>22293	CallExpression	options -> addChild ( musslider , PM_POINTER )
>22294	ArgumentList	musslider
>22295	Argument	PM_POINTER
>22296	Identifier	PM_POINTER
>22297	Argument	musslider
>22298	Identifier	musslider
>22299	Callee	options -> addChild
>22300	PtrMemberAccess	options -> addChild
>22301	Identifier	addChild
>22302	Identifier	options
>22303	ExpressionStatement	 
>22304	AssignmentExpr	musslider -> position = Vector ( sliderx , slidery + 1 * sliderd )
>22305	CallExpression	Vector ( sliderx , slidery + 1 * sliderd )
>22306	ArgumentList	sliderx
>22307	Argument	slidery + 1 * sliderd
>22308	AdditiveExpression	slidery + 1 * sliderd
>22309	MultiplicativeExpression	1 * sliderd
>22310	Identifier	sliderd
>22311	PrimaryExpression	1
>22312	Identifier	slidery
>22313	Argument	sliderx
>22314	Identifier	sliderx
>22315	Callee	Vector
>22316	Identifier	Vector
>22317	PtrMemberAccess	musslider -> position
>22318	Identifier	position
>22319	Identifier	musslider
>22320	ExpressionStatement	 
>22321	CallExpression	musslider -> setValue ( dsq -> user . audio . musvol )
>22322	ArgumentList	dsq -> user . audio . musvol
>22323	Argument	dsq -> user . audio . musvol
>22324	MemberAccess	dsq -> user . audio . musvol
>22325	Identifier	musvol
>22326	MemberAccess	dsq -> user . audio
>22327	Identifier	audio
>22328	PtrMemberAccess	dsq -> user
>22329	Identifier	user
>22330	Identifier	dsq
>22331	Callee	musslider -> setValue
>22332	PtrMemberAccess	musslider -> setValue
>22333	Identifier	setValue
>22334	Identifier	musslider
>22335	ExpressionStatement	 
>22336	AssignmentExpr	musslider = new AquariaSlider ( )
>22337	UnaryExpression	new AquariaSlider ( )
>22338	Identifier	musslider
>22339	ExpressionStatement	 
>22340	CallExpression	options -> addChild ( audiolabels , PM_POINTER )
>22341	ArgumentList	audiolabels
>22342	Argument	PM_POINTER
>22343	Identifier	PM_POINTER
>22344	Argument	audiolabels
>22345	Identifier	audiolabels
>22346	Callee	options -> addChild
>22347	PtrMemberAccess	options -> addChild
>22348	Identifier	addChild
>22349	Identifier	options
>22350	ExpressionStatement	 
>22351	AssignmentExpr	audiolabels -> position = Vector ( sliderx - 64 - w / 2.0f , slidery + h / 2.0f - 14 )
>22352	CallExpression	Vector ( sliderx - 64 - w / 2.0f , slidery + h / 2.0f - 14 )
>22353	ArgumentList	sliderx - 64 - w / 2.0f
>22354	Argument	slidery + h / 2.0f - 14
>22355	AdditiveExpression	slidery + h / 2.0f - 14
>22356	AdditiveExpression	h / 2.0f - 14
>22357	PrimaryExpression	14
>22358	MultiplicativeExpression	h / 2.0f
>22359	PrimaryExpression	2.0f
>22360	Identifier	h
>22361	Identifier	slidery
>22362	Argument	sliderx - 64 - w / 2.0f
>22363	AdditiveExpression	sliderx - 64 - w / 2.0f
>22364	AdditiveExpression	64 - w / 2.0f
>22365	MultiplicativeExpression	w / 2.0f
>22366	PrimaryExpression	2.0f
>22367	Identifier	w
>22368	PrimaryExpression	64
>22369	Identifier	sliderx
>22370	Callee	Vector
>22371	Identifier	Vector
>22372	PtrMemberAccess	audiolabels -> position
>22373	Identifier	position
>22374	Identifier	audiolabels
>22375	ExpressionStatement	 
>22376	AssignmentExpr	h = audiolabels -> getHeight ( )
>22377	CallExpression	audiolabels -> getHeight ( )
>22378	ArgumentList	 
>22379	Callee	audiolabels -> getHeight
>22380	PtrMemberAccess	audiolabels -> getHeight
>22381	Identifier	getHeight
>22382	Identifier	audiolabels
>22383	Identifier	h
>22384	ExpressionStatement	 
>22385	AssignmentExpr	w = audiolabels -> getWidth ( )
>22386	CallExpression	audiolabels -> getWidth ( )
>22387	ArgumentList	 
>22388	Callee	audiolabels -> getWidth
>22389	PtrMemberAccess	audiolabels -> getWidth
>22390	Identifier	getWidth
>22391	Identifier	audiolabels
>22392	Identifier	w
>22393	IdentifierDeclStatement	 
>22394	IdentifierDecl	* audiolabels = new Quad ( \"gui/audiolabels\" , Vector ( 0 , 0 , 0 ) )
>22395	AssignmentExpr	* audiolabels = new Quad ( \"gui/audiolabels\" , Vector ( 0 , 0 , 0 ) )
>22396	Expression	\"gui/audiolabels\" , Vector ( 0 , 0 , 0 )
>22397	CallExpression	Vector ( 0 , 0 , 0 )
>22398	ArgumentList	0
>22399	Argument	0
>22400	PrimaryExpression	0
>22401	Argument	0
>22402	PrimaryExpression	0
>22403	Argument	0
>22404	PrimaryExpression	0
>22405	Callee	Vector
>22406	Identifier	Vector
>22407	PrimaryExpression	\"gui/audiolabels\"
>22408	Identifier	audiolabels
>22409	Identifier	audiolabels
>22410	IdentifierDeclType	Quad *
>22411	ExpressionStatement	 
>22412	CallExpression	options -> addChild ( resBox , PM_POINTER )
>22413	ArgumentList	resBox
>22414	Argument	PM_POINTER
>22415	Identifier	PM_POINTER
>22416	Argument	resBox
>22417	Identifier	resBox
>22418	Callee	options -> addChild
>22419	PtrMemberAccess	options -> addChild
>22420	Identifier	addChild
>22421	Identifier	options
>22422	ForStatement	for ( i = 0 ; i < core -> screenModes . size ( ) ; i ++ )
>22423	CompoundStatement	 
>22424	IfStatement	if ( core -> screenModes [ i ] . x == dsq -> user . video . resx && core -> screenModes [ i ] . y == dsq -> user \
>22425	CompoundStatement	 
>22426	ExpressionStatement	 
>22427	CallExpression	resBox -> enqueueSelectItem ( i )
>22428	ArgumentList	i
>22429	Argument	i
>22430	Identifier	i
>22431	Callee	resBox -> enqueueSelectItem
>22432	PtrMemberAccess	resBox -> enqueueSelectItem
>22433	Identifier	enqueueSelectItem
>22434	Identifier	resBox
>22435	Condition	 
>22436	AndExpression	core -> screenModes [ i ] . x == dsq -> user . video . resx && core -> screenModes [ i ] . y == dsq \
>22437	EqualityExpression	core -> screenModes [ i ] . y == dsq -> user . video . resy
>22438	MemberAccess	dsq -> user . video . resy
>22439	Identifier	resy
>22440	MemberAccess	dsq -> user . video
>22441	Identifier	video
>22442	PtrMemberAccess	dsq -> user
>22443	Identifier	user
>22444	Identifier	dsq
>22445	MemberAccess	core -> screenModes [ i ] . y
>22446	Identifier	y
>22447	ArrayIndexing	core -> screenModes [ i ]
>22448	Identifier	i
>22449	PtrMemberAccess	core -> screenModes
>22450	Identifier	screenModes
>22451	Identifier	core
>22452	EqualityExpression	core -> screenModes [ i ] . x == dsq -> user . video . resx
>22453	MemberAccess	dsq -> user . video . resx
>22454	Identifier	resx
>22455	MemberAccess	dsq -> user . video
>22456	Identifier	video
>22457	PtrMemberAccess	dsq -> user
>22458	Identifier	user
>22459	Identifier	dsq
>22460	MemberAccess	core -> screenModes [ i ] . x
>22461	Identifier	x
>22462	ArrayIndexing	core -> screenModes [ i ]
>22463	Identifier	i
>22464	PtrMemberAccess	core -> screenModes
>22465	Identifier	screenModes
>22466	Identifier	core
>22467	ExpressionStatement	 
>22468	CallExpression	resBox -> addItem ( os . str ( ) )
>22469	ArgumentList	os . str ( )
>22470	Argument	os . str ( )
>22471	CallExpression	os . str ( )
>22472	ArgumentList	 
>22473	Callee	os . str
>22474	MemberAccess	os . str
>22475	Identifier	str
>22476	Identifier	os
>22477	Callee	resBox -> addItem
>22478	PtrMemberAccess	resBox -> addItem
>22479	Identifier	addItem
>22480	Identifier	resBox
>22481	IfStatement	if ( core -> screenModes [ i ] . hz )
>22482	ExpressionStatement	 
>22483	ShiftExpression	os << \" (\" << core -> screenModes [ i ] . hz << \"hz)\"
>22484	ShiftExpression	\" (\" << core -> screenModes [ i ] . hz << \"hz)\"
>22485	ShiftExpression	core -> screenModes [ i ] . hz << \"hz)\"
>22486	PrimaryExpression	\"hz)\"
>22487	MemberAccess	core -> screenModes [ i ] . hz
>22488	Identifier	hz
>22489	ArrayIndexing	core -> screenModes [ i ]
>22490	Identifier	i
>22491	PtrMemberAccess	core -> screenModes
>22492	Identifier	screenModes
>22493	Identifier	core
>22494	PrimaryExpression	\" (\"
>22495	Identifier	os
>22496	Condition	 
>22497	MemberAccess	core -> screenModes [ i ] . hz
>22498	Identifier	hz
>22499	ArrayIndexing	core -> screenModes [ i ]
>22500	Identifier	i
>22501	PtrMemberAccess	core -> screenModes
>22502	Identifier	screenModes
>22503	Identifier	core
>22504	ExpressionStatement	 
>22505	ShiftExpression	os << core -> screenModes [ i ] . x << \"x\" << core -> screenModes [ i ] . y
>22506	ShiftExpression	core -> screenModes [ i ] . x << \"x\" << core -> screenModes [ i ] . y
>22507	ShiftExpression	\"x\" << core -> screenModes [ i ] . y
>22508	MemberAccess	core -> screenModes [ i ] . y
>22509	Identifier	y
>22510	ArrayIndexing	core -> screenModes [ i ]
>22511	Identifier	i
>22512	PtrMemberAccess	core -> screenModes
>22513	Identifier	screenModes
>22514	Identifier	core
>22515	PrimaryExpression	\"x\"
>22516	MemberAccess	core -> screenModes [ i ] . x
>22517	Identifier	x
>22518	ArrayIndexing	core -> screenModes [ i ]
>22519	Identifier	i
>22520	PtrMemberAccess	core -> screenModes
>22521	Identifier	screenModes
>22522	Identifier	core
>22523	Identifier	os
>22524	IdentifierDeclStatement	 
>22525	IdentifierDecl	os
>22526	Identifier	os
>22527	IdentifierDeclType	std 
>22528	IncDecOp	 
>22529	IncDec	++
>22530	Identifier	i
>22531	Condition	 
>22532	RelationalExpression	i < core -> screenModes . size ( )
>22533	CallExpression	core -> screenModes . size ( )
>22534	ArgumentList	 
>22535	Callee	core -> screenModes . size
>22536	MemberAccess	core -> screenModes . size
>22537	Identifier	size
>22538	PtrMemberAccess	core -> screenModes
>22539	Identifier	screenModes
>22540	Identifier	core
>22541	Identifier	i
>22542	ForInit	 
>22543	AssignmentExpr	i = 0
>22544	PrimaryExpression	0
>22545	Identifier	i
>22546	ExpressionStatement	 
>22547	AssignmentExpr	resBox -> position = Vector ( 196 , 285 )
>22548	CallExpression	Vector ( 196 , 285 )
>22549	ArgumentList	196
>22550	Argument	285
>22551	PrimaryExpression	285
>22552	Argument	196
>22553	PrimaryExpression	196
>22554	Callee	Vector
>22555	Identifier	Vector
>22556	PtrMemberAccess	resBox -> position
>22557	Identifier	position
>22558	Identifier	resBox
>22559	ExpressionStatement	 
>22560	AssignmentExpr	resBox = new AquariaComboBox ( Vector ( 0.7f , 1.0f ) )
>22561	CallExpression	Vector ( 0.7f , 1.0f )
>22562	ArgumentList	0.7f
>22563	Argument	1.0f
>22564	PrimaryExpression	1.0f
>22565	Argument	0.7f
>22566	PrimaryExpression	0.7f
>22567	Callee	Vector
>22568	Identifier	Vector
>22569	Identifier	resBox
>22570	ExpressionStatement	 
>22571	CallExpression	options -> addChild ( resolutionLabel , PM_POINTER )
>22572	ArgumentList	resolutionLabel
>22573	Argument	PM_POINTER
>22574	Identifier	PM_POINTER
>22575	Argument	resolutionLabel
>22576	Identifier	resolutionLabel
>22577	Callee	options -> addChild
>22578	PtrMemberAccess	options -> addChild
>22579	Identifier	addChild
>22580	Identifier	options
>22581	ExpressionStatement	 
>22582	AssignmentExpr	resolutionLabel -> position = Vector ( 160 , 260 )
>22583	CallExpression	Vector ( 160 , 260 )
>22584	ArgumentList	160
>22585	Argument	260
>22586	PrimaryExpression	260
>22587	Argument	160
>22588	PrimaryExpression	160
>22589	Callee	Vector
>22590	Identifier	Vector
>22591	PtrMemberAccess	resolutionLabel -> position
>22592	Identifier	position
>22593	Identifier	resolutionLabel
>22594	IdentifierDeclStatement	 
>22595	IdentifierDecl	* resolutionLabel = new Quad ( \"gui/resolution\" , Vector ( 0 , 0 , 0 ) )
>22596	AssignmentExpr	* resolutionLabel = new Quad ( \"gui/resolution\" , Vector ( 0 , 0 , 0 ) )
>22597	Expression	\"gui/resolution\" , Vector ( 0 , 0 , 0 )
>22598	CallExpression	Vector ( 0 , 0 , 0 )
>22599	ArgumentList	0
>22600	Argument	0
>22601	PrimaryExpression	0
>22602	Argument	0
>22603	PrimaryExpression	0
>22604	Argument	0
>22605	PrimaryExpression	0
>22606	Callee	Vector
>22607	Identifier	Vector
>22608	PrimaryExpression	\"gui/resolution\"
>22609	Identifier	resolutionLabel
>22610	Identifier	resolutionLabel
>22611	IdentifierDeclType	Quad *
>22612	ExpressionStatement	 
>22613	CallExpression	options -> addChild ( fullscreenCheck , PM_POINTER )
>22614	ArgumentList	fullscreenCheck
>22615	Argument	PM_POINTER
>22616	Identifier	PM_POINTER
>22617	Argument	fullscreenCheck
>22618	Identifier	fullscreenCheck
>22619	Callee	options -> addChild
>22620	PtrMemberAccess	options -> addChild
>22621	Identifier	addChild
>22622	Identifier	options
>22623	ExpressionStatement	 
>22624	AssignmentExpr	fullscreenCheck -> position = Vector ( scheckx , schecky + voptoffy )
>22625	CallExpression	Vector ( scheckx , schecky + voptoffy )
>22626	ArgumentList	scheckx
>22627	Argument	schecky + voptoffy
>22628	AdditiveExpression	schecky + voptoffy
>22629	Identifier	voptoffy
>22630	Identifier	schecky
>22631	Argument	scheckx
>22632	Identifier	scheckx
>22633	Callee	Vector
>22634	Identifier	Vector
>22635	PtrMemberAccess	fullscreenCheck -> position
>22636	Identifier	position
>22637	Identifier	fullscreenCheck
>22638	ExpressionStatement	 
>22639	CallExpression	fullscreenCheck -> setValue ( dsq -> isFullscreen ( ) )
>22640	ArgumentList	dsq -> isFullscreen ( )
>22641	Argument	dsq -> isFullscreen ( )
>22642	CallExpression	dsq -> isFullscreen ( )
>22643	ArgumentList	 
>22644	Callee	dsq -> isFullscreen
>22645	PtrMemberAccess	dsq -> isFullscreen
>22646	Identifier	isFullscreen
>22647	Identifier	dsq
>22648	Callee	fullscreenCheck -> setValue
>22649	PtrMemberAccess	fullscreenCheck -> setValue
>22650	Identifier	setValue
>22651	Identifier	fullscreenCheck
>22652	ExpressionStatement	 
>22653	AssignmentExpr	fullscreenCheck = new AquariaCheckBox ( )
>22654	UnaryExpression	new AquariaCheckBox ( )
>22655	Identifier	fullscreenCheck
>22656	ExpressionStatement	 
>22657	CallExpression	options -> addChild ( fullscreenLabel , PM_POINTER )
>22658	ArgumentList	fullscreenLabel
>22659	Argument	PM_POINTER
>22660	Identifier	PM_POINTER
>22661	Argument	fullscreenLabel
>22662	Identifier	fullscreenLabel
>22663	Callee	options -> addChild
>22664	PtrMemberAccess	options -> addChild
>22665	Identifier	addChild
>22666	Identifier	options
>22667	ExpressionStatement	 
>22668	AssignmentExpr	fullscreenLabel -> position = Vector ( scheckx - 16 - sw * 0.5f , schecky + voptoffy + sh / 2.0f - 14 )
>22669	CallExpression	Vector ( scheckx - 16 - sw * 0.5f , schecky + voptoffy + sh / 2.0f - 14 )
>22670	ArgumentList	scheckx - 16 - sw * 0.5f
>22671	Argument	schecky + voptoffy + sh / 2.0f - 14
>22672	AdditiveExpression	schecky + voptoffy + sh / 2.0f - 14
>22673	AdditiveExpression	voptoffy + sh / 2.0f - 14
>22674	AdditiveExpression	sh / 2.0f - 14
>22675	PrimaryExpression	14
>22676	MultiplicativeExpression	sh / 2.0f
>22677	PrimaryExpression	2.0f
>22678	Identifier	sh
>22679	Identifier	voptoffy
>22680	Identifier	schecky
>22681	Argument	scheckx - 16 - sw * 0.5f
>22682	AdditiveExpression	scheckx - 16 - sw * 0.5f
>22683	AdditiveExpression	16 - sw * 0.5f
>22684	MultiplicativeExpression	sw * 0.5f
>22685	PrimaryExpression	0.5f
>22686	Identifier	sw
>22687	PrimaryExpression	16
>22688	Identifier	scheckx
>22689	Callee	Vector
>22690	Identifier	Vector
>22691	PtrMemberAccess	fullscreenLabel -> position
>22692	Identifier	position
>22693	Identifier	fullscreenLabel
>22694	IdentifierDeclStatement	 
>22695	IdentifierDecl	* fullscreenLabel = new Quad ( \"gui/fullscreen\" , Vector ( 0 , 0 , 0 ) )
>22696	AssignmentExpr	* fullscreenLabel = new Quad ( \"gui/fullscreen\" , Vector ( 0 , 0 , 0 ) )
>22697	Expression	\"gui/fullscreen\" , Vector ( 0 , 0 , 0 )
>22698	CallExpression	Vector ( 0 , 0 , 0 )
>22699	ArgumentList	0
>22700	Argument	0
>22701	PrimaryExpression	0
>22702	Argument	0
>22703	PrimaryExpression	0
>22704	Argument	0
>22705	PrimaryExpression	0
>22706	Callee	Vector
>22707	Identifier	Vector
>22708	PrimaryExpression	\"gui/fullscreen\"
>22709	Identifier	fullscreenLabel
>22710	Identifier	fullscreenLabel
>22711	IdentifierDeclType	Quad *
>22712	ExpressionStatement	 
>22713	CallExpression	options -> addChild ( subtitlesCheck , PM_POINTER )
>22714	ArgumentList	subtitlesCheck
>22715	Argument	PM_POINTER
>22716	Identifier	PM_POINTER
>22717	Argument	subtitlesCheck
>22718	Identifier	subtitlesCheck
>22719	Callee	options -> addChild
>22720	PtrMemberAccess	options -> addChild
>22721	Identifier	addChild
>22722	Identifier	options
>22723	ExpressionStatement	 
>22724	AssignmentExpr	subtitlesCheck -> position = Vector ( scheckx , schecky )
>22725	CallExpression	Vector ( scheckx , schecky )
>22726	ArgumentList	scheckx
>22727	Argument	schecky
>22728	Identifier	schecky
>22729	Argument	scheckx
>22730	Identifier	scheckx
>22731	Callee	Vector
>22732	Identifier	Vector
>22733	PtrMemberAccess	subtitlesCheck -> position
>22734	Identifier	position
>22735	Identifier	subtitlesCheck
>22736	ExpressionStatement	 
>22737	CallExpression	subtitlesCheck -> setValue ( dsq -> user . audio . subtitles )
>22738	ArgumentList	dsq -> user . audio . subtitles
>22739	Argument	dsq -> user . audio . subtitles
>22740	MemberAccess	dsq -> user . audio . subtitles
>22741	Identifier	subtitles
>22742	MemberAccess	dsq -> user . audio
>22743	Identifier	audio
>22744	PtrMemberAccess	dsq -> user
>22745	Identifier	user
>22746	Identifier	dsq
>22747	Callee	subtitlesCheck -> setValue
>22748	PtrMemberAccess	subtitlesCheck -> setValue
>22749	Identifier	setValue
>22750	Identifier	subtitlesCheck
>22751	ExpressionStatement	 
>22752	AssignmentExpr	subtitlesCheck = new AquariaCheckBox ( )
>22753	UnaryExpression	new AquariaCheckBox ( )
>22754	Identifier	subtitlesCheck
>22755	ExpressionStatement	 
>22756	CallExpression	options -> addChild ( subtitleslabel , PM_POINTER )
>22757	ArgumentList	subtitleslabel
>22758	Argument	PM_POINTER
>22759	Identifier	PM_POINTER
>22760	Argument	subtitleslabel
>22761	Identifier	subtitleslabel
>22762	Callee	options -> addChild
>22763	PtrMemberAccess	options -> addChild
>22764	Identifier	addChild
>22765	Identifier	options
>22766	ExpressionStatement	 
>22767	AssignmentExpr	subtitleslabel -> position = Vector ( scheckx - 16 - sw * 0.5f , schecky + sh / 2.0f - 14 )
>22768	CallExpression	Vector ( scheckx - 16 - sw * 0.5f , schecky + sh / 2.0f - 14 )
>22769	ArgumentList	scheckx - 16 - sw * 0.5f
>22770	Argument	schecky + sh / 2.0f - 14
>22771	AdditiveExpression	schecky + sh / 2.0f - 14
>22772	AdditiveExpression	sh / 2.0f - 14
>22773	PrimaryExpression	14
>22774	MultiplicativeExpression	sh / 2.0f
>22775	PrimaryExpression	2.0f
>22776	Identifier	sh
>22777	Identifier	schecky
>22778	Argument	scheckx - 16 - sw * 0.5f
>22779	AdditiveExpression	scheckx - 16 - sw * 0.5f
>22780	AdditiveExpression	16 - sw * 0.5f
>22781	MultiplicativeExpression	sw * 0.5f
>22782	PrimaryExpression	0.5f
>22783	Identifier	sw
>22784	PrimaryExpression	16
>22785	Identifier	scheckx
>22786	Callee	Vector
>22787	Identifier	Vector
>22788	PtrMemberAccess	subtitleslabel -> position
>22789	Identifier	position
>22790	Identifier	subtitleslabel
>22791	ExpressionStatement	 
>22792	AssignmentExpr	sh = subtitleslabel -> getHeight ( )
>22793	CallExpression	subtitleslabel -> getHeight ( )
>22794	ArgumentList	 
>22795	Callee	subtitleslabel -> getHeight
>22796	PtrMemberAccess	subtitleslabel -> getHeight
>22797	Identifier	getHeight
>22798	Identifier	subtitleslabel
>22799	Identifier	sh
>22800	ExpressionStatement	 
>22801	AssignmentExpr	sw = subtitleslabel -> getWidth ( )
>22802	CallExpression	subtitleslabel -> getWidth ( )
>22803	ArgumentList	 
>22804	Callee	subtitleslabel -> getWidth
>22805	PtrMemberAccess	subtitleslabel -> getWidth
>22806	Identifier	getWidth
>22807	Identifier	subtitleslabel
>22808	Identifier	sw
>22809	IdentifierDeclStatement	 
>22810	IdentifierDecl	* subtitleslabel = new Quad ( \"gui/subtitles\" , Vector ( 0 , 0 , 0 ) )
>22811	AssignmentExpr	* subtitleslabel = new Quad ( \"gui/subtitles\" , Vector ( 0 , 0 , 0 ) )
>22812	Expression	\"gui/subtitles\" , Vector ( 0 , 0 , 0 )
>22813	CallExpression	Vector ( 0 , 0 , 0 )
>22814	ArgumentList	0
>22815	Argument	0
>22816	PrimaryExpression	0
>22817	Argument	0
>22818	PrimaryExpression	0
>22819	Argument	0
>22820	PrimaryExpression	0
>22821	Callee	Vector
>22822	Identifier	Vector
>22823	PrimaryExpression	\"gui/subtitles\"
>22824	Identifier	subtitleslabel
>22825	Identifier	subtitleslabel
>22826	IdentifierDeclType	Quad *
>22827	IdentifierDeclStatement	 
>22828	IdentifierDecl	voptoffy = 26
>22829	AssignmentExpr	voptoffy = 26
>22830	PrimaryExpression	26
>22831	Identifier	voptoffy
>22832	Identifier	voptoffy
>22833	IdentifierDeclType	int
>22834	IdentifierDeclStatement	 
>22835	IdentifierDecl	sh
>22836	Identifier	sh
>22837	IdentifierDeclType	int
>22838	IdentifierDecl	sw
>22839	Identifier	sw
>22840	IdentifierDeclType	int
>22841	IdentifierDeclStatement	 
>22842	IdentifierDecl	schecky = 315
>22843	AssignmentExpr	schecky = 315
>22844	PrimaryExpression	315
>22845	Identifier	schecky
>22846	Identifier	schecky
>22847	IdentifierDeclType	int
>22848	IdentifierDeclStatement	 
>22849	IdentifierDecl	scheckx = 270
>22850	AssignmentExpr	scheckx = 270
>22851	PrimaryExpression	270
>22852	Identifier	scheckx
>22853	Identifier	scheckx
>22854	IdentifierDeclType	int
>22855	ExpressionStatement	 
>22856	CallExpression	options -> addChild ( controllabels , PM_POINTER )
>22857	ArgumentList	controllabels
>22858	Argument	PM_POINTER
>22859	Identifier	PM_POINTER
>22860	Argument	controllabels
>22861	Identifier	controllabels
>22862	Callee	options -> addChild
>22863	PtrMemberAccess	options -> addChild
>22864	Identifier	addChild
>22865	Identifier	options
>22866	ExpressionStatement	 
>22867	AssignmentExpr	controllabels -> position = Vector ( checkx - 16 - w / 2.0f , checky + h / 2.0f - 14 )
>22868	CallExpression	Vector ( checkx - 16 - w / 2.0f , checky + h / 2.0f - 14 )
>22869	ArgumentList	checkx - 16 - w / 2.0f
>22870	Argument	checky + h / 2.0f - 14
>22871	AdditiveExpression	checky + h / 2.0f - 14
>22872	AdditiveExpression	h / 2.0f - 14
>22873	PrimaryExpression	14
>22874	MultiplicativeExpression	h / 2.0f
>22875	PrimaryExpression	2.0f
>22876	Identifier	h
>22877	Identifier	checky
>22878	Argument	checkx - 16 - w / 2.0f
>22879	AdditiveExpression	checkx - 16 - w / 2.0f
>22880	AdditiveExpression	16 - w / 2.0f
>22881	MultiplicativeExpression	w / 2.0f
>22882	PrimaryExpression	2.0f
>22883	Identifier	w
>22884	PrimaryExpression	16
>22885	Identifier	checkx
>22886	Callee	Vector
>22887	Identifier	Vector
>22888	PtrMemberAccess	controllabels -> position
>22889	Identifier	position
>22890	Identifier	controllabels
>22891	IdentifierDeclStatement	 
>22892	IdentifierDecl	h = controllabels -> getHeight ( )
>22893	AssignmentExpr	h = controllabels -> getHeight ( )
>22894	CallExpression	controllabels -> getHeight ( )
>22895	ArgumentList	 
>22896	Callee	controllabels -> getHeight
>22897	PtrMemberAccess	controllabels -> getHeight
>22898	Identifier	getHeight
>22899	Identifier	controllabels
>22900	Identifier	h
>22901	Identifier	h
>22902	IdentifierDeclType	int
>22903	IdentifierDeclStatement	 
>22904	IdentifierDecl	w = controllabels -> getWidth ( )
>22905	AssignmentExpr	w = controllabels -> getWidth ( )
>22906	CallExpression	controllabels -> getWidth ( )
>22907	ArgumentList	 
>22908	Callee	controllabels -> getWidth
>22909	PtrMemberAccess	controllabels -> getWidth
>22910	Identifier	getWidth
>22911	Identifier	controllabels
>22912	Identifier	w
>22913	Identifier	w
>22914	IdentifierDeclType	int
>22915	IdentifierDeclStatement	 
>22916	IdentifierDecl	* controllabels = new Quad ( \"gui/controllabels\" , Vector ( 0 , 0 , 0 ) )
>22917	AssignmentExpr	* controllabels = new Quad ( \"gui/controllabels\" , Vector ( 0 , 0 , 0 ) )
>22918	Expression	\"gui/controllabels\" , Vector ( 0 , 0 , 0 )
>22919	CallExpression	Vector ( 0 , 0 , 0 )
>22920	ArgumentList	0
>22921	Argument	0
>22922	PrimaryExpression	0
>22923	Argument	0
>22924	PrimaryExpression	0
>22925	Argument	0
>22926	PrimaryExpression	0
>22927	Callee	Vector
>22928	Identifier	Vector
>22929	PrimaryExpression	\"gui/controllabels\"
>22930	Identifier	controllabels
>22931	Identifier	controllabels
>22932	IdentifierDeclType	Quad *
>22933	ExpressionStatement	 
>22934	CallExpression	options -> addChild ( controls , PM_POINTER )
>22935	ArgumentList	controls
>22936	Argument	PM_POINTER
>22937	Identifier	PM_POINTER
>22938	Argument	controls
>22939	Identifier	controls
>22940	Callee	options -> addChild
>22941	PtrMemberAccess	options -> addChild
>22942	Identifier	addChild
>22943	Identifier	options
>22944	IdentifierDeclStatement	 
>22945	IdentifierDecl	* controls = new Quad ( \"gui/controls\" , Vector ( 600 , 125 ) )
>22946	AssignmentExpr	* controls = new Quad ( \"gui/controls\" , Vector ( 600 , 125 ) )
>22947	Expression	\"gui/controls\" , Vector ( 600 , 125 )
>22948	CallExpression	Vector ( 600 , 125 )
>22949	ArgumentList	600
>22950	Argument	125
>22951	PrimaryExpression	125
>22952	Argument	600
>22953	PrimaryExpression	600
>22954	Callee	Vector
>22955	Identifier	Vector
>22956	PrimaryExpression	\"gui/controls\"
>22957	Identifier	controls
>22958	Identifier	controls
>22959	IdentifierDeclType	Quad *
>22960	ExpressionStatement	 
>22961	CallExpression	options -> addChild ( audio , PM_POINTER )
>22962	ArgumentList	audio
>22963	Argument	PM_POINTER
>22964	Identifier	PM_POINTER
>22965	Argument	audio
>22966	Identifier	audio
>22967	Callee	options -> addChild
>22968	PtrMemberAccess	options -> addChild
>22969	Identifier	addChild
>22970	Identifier	options
>22971	IdentifierDeclStatement	 
>22972	IdentifierDecl	* audio = new Quad ( \"gui/audiovisual\" , Vector ( 200 , 125 ) )
>22973	AssignmentExpr	* audio = new Quad ( \"gui/audiovisual\" , Vector ( 200 , 125 ) )
>22974	Expression	\"gui/audiovisual\" , Vector ( 200 , 125 )
>22975	CallExpression	Vector ( 200 , 125 )
>22976	ArgumentList	200
>22977	Argument	125
>22978	PrimaryExpression	125
>22979	Argument	200
>22980	PrimaryExpression	200
>22981	Callee	Vector
>22982	Identifier	Vector
>22983	PrimaryExpression	\"gui/audiovisual\"
>22984	Identifier	audio
>22985	Identifier	audio
>22986	IdentifierDeclType	Quad *
>22987	IdentifierDeclStatement	 
>22988	IdentifierDecl	checkd = 26
>22989	AssignmentExpr	checkd = 26
>22990	PrimaryExpression	26
>22991	Identifier	checkd
>22992	Identifier	checkd
>22993	IdentifierDeclType	int
>22994	IdentifierDecl	checky = 160
>22995	AssignmentExpr	checky = 160
>22996	PrimaryExpression	160
>22997	Identifier	checky
>22998	Identifier	checky
>22999	IdentifierDeclType	int
>23000	IdentifierDecl	checkx = 660
>23001	AssignmentExpr	checkx = 660
>23002	PrimaryExpression	660
>23003	Identifier	checkx
>23004	Identifier	checkx
>23005	IdentifierDeclType	int
>23006	IdentifierDeclStatement	 
>23007	IdentifierDecl	sliderd = 26
>23008	AssignmentExpr	sliderd = 26
>23009	PrimaryExpression	26
>23010	Identifier	sliderd
>23011	Identifier	sliderd
>23012	IdentifierDeclType	int
>23013	IdentifierDecl	slidery = 160
>23014	AssignmentExpr	slidery = 160
>23015	PrimaryExpression	160
>23016	Identifier	slidery
>23017	Identifier	slidery
>23018	IdentifierDeclType	int
>23019	IdentifierDecl	sliderx = 250
>23020	AssignmentExpr	sliderx = 250
>23021	PrimaryExpression	250
>23022	Identifier	sliderx
>23023	Identifier	sliderx
>23024	IdentifierDeclType	int
>23025	ExpressionStatement	 
>23026	AssignmentExpr	options -> renderQuad = false
>23027	Identifier	false
>23028	PtrMemberAccess	options -> renderQuad
>23029	Identifier	renderQuad
>23030	Identifier	options
>23031	ExpressionStatement	 
>23032	Identifier	Quad
>23033	Statement	 
>23034	Statement	 
>23035	Statement	 
>23036	IdentifierDeclStatement	 
>23037	IdentifierDecl	scale = menuBg -> scale . x
>23038	AssignmentExpr	scale = menuBg -> scale . x
>23039	MemberAccess	menuBg -> scale . x
>23040	Identifier	x
>23041	PtrMemberAccess	menuBg -> scale
>23042	Identifier	scale
>23043	Identifier	menuBg
>23044	Identifier	scale
>23045	Identifier	scale
>23046	IdentifierDeclType	float
>23047	ExpressionStatement	 
>23048	CallExpression	menuBg -> addChild ( menuBg2 , PM_POINTER )
>23049	ArgumentList	menuBg2
>23050	Argument	PM_POINTER
>23051	Identifier	PM_POINTER
>23052	Argument	menuBg2
>23053	Identifier	menuBg2
>23054	Callee	menuBg -> addChild
>23055	PtrMemberAccess	menuBg -> addChild
>23056	Identifier	addChild
>23057	Identifier	menuBg
>23058	ExpressionStatement	 
>23059	AssignmentExpr	menuBg2 -> position = Vector ( 0 , 240 )
>23060	CallExpression	Vector ( 0 , 240 )
>23061	ArgumentList	0
>23062	Argument	240
>23063	PrimaryExpression	240
>23064	Argument	0
>23065	PrimaryExpression	0
>23066	Callee	Vector
>23067	Identifier	Vector
>23068	PtrMemberAccess	menuBg2 -> position
>23069	Identifier	position
>23070	Identifier	menuBg2
>23071	ExpressionStatement	 
>23072	CallExpression	menuBg2 -> setTexture ( \"menu2\" )
>23073	ArgumentList	\"menu2\"
>23074	Argument	\"menu2\"
>23075	PrimaryExpression	\"menu2\"
>23076	Callee	menuBg2 -> setTexture
>23077	PtrMemberAccess	menuBg2 -> setTexture
>23078	Identifier	setTexture
>23079	Identifier	menuBg2
>23080	ExpressionStatement	 
>23081	Identifier	Quad
>23082	Statement	 
>23083	Statement	 
>23084	Statement	 
>23085	ExpressionStatement	 
>23086	CallExpression	addRenderObject ( menuBg , LR_MENU )
>23087	ArgumentList	menuBg
>23088	Argument	LR_MENU
>23089	Identifier	LR_MENU
>23090	Argument	menuBg
>23091	Identifier	menuBg
>23092	Callee	addRenderObject
>23093	Identifier	addRenderObject
>23094	ExpressionStatement	 
>23095	AssignmentExpr	menuBg -> followCamera = 1
>23096	PrimaryExpression	1
>23097	PtrMemberAccess	menuBg -> followCamera
>23098	Identifier	followCamera
>23099	Identifier	menuBg
>23100	ExpressionStatement	 
>23101	AssignmentExpr	menuBg -> position = Vector ( 400 , 300 , menuz )
>23102	CallExpression	Vector ( 400 , 300 , menuz )
>23103	ArgumentList	400
>23104	Argument	menuz
>23105	Identifier	menuz
>23106	Argument	300
>23107	PrimaryExpression	300
>23108	Argument	400
>23109	PrimaryExpression	400
>23110	Callee	Vector
>23111	Identifier	Vector
>23112	PtrMemberAccess	menuBg -> position
>23113	Identifier	position
>23114	Identifier	menuBg
>23115	ExpressionStatement	 
>23116	AssignmentExpr	menuBgScale = Vector ( 800.0f / 1024.0f , 800.0f / 1024.0f )
>23117	CallExpression	Vector ( 800.0f / 1024.0f , 800.0f / 1024.0f )
>23118	ArgumentList	800.0f / 1024.0f
>23119	Argument	800.0f / 1024.0f
>23120	MultiplicativeExpression	800.0f / 1024.0f
>23121	PrimaryExpression	1024.0f
>23122	PrimaryExpression	800.0f
>23123	Argument	800.0f / 1024.0f
>23124	MultiplicativeExpression	800.0f / 1024.0f
>23125	PrimaryExpression	1024.0f
>23126	PrimaryExpression	800.0f
>23127	Callee	Vector
>23128	Identifier	Vector
>23129	Identifier	menuBgScale
>23130	ExpressionStatement	 
>23131	CallExpression	menuBg -> setTexture ( \"menu\" )
>23132	ArgumentList	\"menu\"
>23133	Argument	\"menu\"
>23134	PrimaryExpression	\"menu\"
>23135	Callee	menuBg -> setTexture
>23136	PtrMemberAccess	menuBg -> setTexture
>23137	Identifier	setTexture
>23138	Identifier	menuBg
>23139	ExpressionStatement	 
>23140	Identifier	Quad
>23141	Statement	 
>23142	Statement	 
>23143	Statement	 
>23144	IdentifierDeclStatement	 
>23145	IdentifierDecl	i = 0
>23146	AssignmentExpr	i = 0
>23147	PrimaryExpression	0
>23148	Identifier	i
>23149	Identifier	i
>23150	IdentifierDeclType	int
>23151	IdentifierDeclStatement	 
>23152	IdentifierDecl	menuz = 4
>23153	AssignmentExpr	menuz = 4
>23154	PrimaryExpression	4
>23155	Identifier	menuz
>23156	Identifier	menuz
>23157	IdentifierDeclType	float
>23639	FunctionDef	Game 
>23640	ParameterList	 
>23641	ReturnType	void
>23642	CompoundStatement	 
>23643	ExpressionStatement	 
>23644	CallExpression	game -> recipeMenu . goNextPage ( )
>23645	ArgumentList	 
>23646	Callee	game -> recipeMenu . goNextPage
>23647	MemberAccess	game -> recipeMenu . goNextPage
>23648	Identifier	goNextPage
>23649	PtrMemberAccess	game -> recipeMenu
>23650	Identifier	recipeMenu
>23651	Identifier	game
>23658	FunctionDef	Game 
>23659	ParameterList	 
>23660	ReturnType	void
>23661	CompoundStatement	 
>23662	ExpressionStatement	 
>23663	CallExpression	game -> recipeMenu . goPrevPage ( )
>23664	ArgumentList	 
>23665	Callee	game -> recipeMenu . goPrevPage
>23666	MemberAccess	game -> recipeMenu . goPrevPage
>23667	Identifier	goPrevPage
>23668	PtrMemberAccess	game -> recipeMenu
>23669	Identifier	recipeMenu
>23670	Identifier	game
>23677	FunctionDef	Game 
>23678	ParameterList	bool on
>23679	Parameter	 
>23680	Identifier	on
>23681	ParameterType	bool
>23682	ReturnType	void
>23683	CompoundStatement	 
>23684	IfStatement	if ( avatar )
>23685	CompoundStatement	 
>23686	ExpressionStatement	 
>23687	AssignmentExpr	avatar -> zoomOverriden = on
>23688	Identifier	on
>23689	PtrMemberAccess	avatar -> zoomOverriden
>23690	Identifier	zoomOverriden
>23691	Identifier	avatar
>23692	IfStatement	if ( ! on && avatar -> zoomOverriden == true )
>23693	CompoundStatement	 
>23694	ExpressionStatement	 
>23695	AssignmentExpr	avatar -> myZoom = dsq -> globalScale
>23696	PtrMemberAccess	dsq -> globalScale
>23697	Identifier	globalScale
>23698	Identifier	dsq
>23699	PtrMemberAccess	avatar -> myZoom
>23700	Identifier	myZoom
>23701	Identifier	avatar
>23702	ExpressionStatement	 
>23703	CallExpression	dsq -> globalScale . stop ( )
>23704	ArgumentList	 
>23705	Callee	dsq -> globalScale . stop
>23706	MemberAccess	dsq -> globalScale . stop
>23707	Identifier	stop
>23708	PtrMemberAccess	dsq -> globalScale
>23709	Identifier	globalScale
>23710	Identifier	dsq
>23711	Condition	 
>23712	AndExpression	! on && avatar -> zoomOverriden == true
>23713	EqualityExpression	avatar -> zoomOverriden == true
>23714	Identifier	true
>23715	PtrMemberAccess	avatar -> zoomOverriden
>23716	Identifier	zoomOverriden
>23717	Identifier	avatar
>23718	UnaryOp	! on
>23719	Identifier	on
>23720	UnaryOperator	!
>23721	IfStatement	if ( on )
>23722	CompoundStatement	 
>23723	IfStatement	if ( avatar -> isEntityDead ( ) )
>23724	ReturnStatement	 
>23725	Condition	 
>23726	CallExpression	avatar -> isEntityDead ( )
>23727	ArgumentList	 
>23728	Callee	avatar -> isEntityDead
>23729	PtrMemberAccess	avatar -> isEntityDead
>23730	Identifier	isEntityDead
>23731	Identifier	avatar
>23732	Condition	 
>23733	Identifier	on
>23734	Condition	 
>23735	Identifier	avatar
>23749	FunctionDef	Game 
>23750	ParameterList	 
>23751	ReturnType	void
>23752	CompoundStatement	 
>23753	IfStatement	if ( progressBar )
>23754	CompoundStatement	 
>23755	ExpressionStatement	 
>23756	CallExpression	progressBar -> progress ( )
>23757	ArgumentList	 
>23758	Callee	progressBar -> progress
>23759	PtrMemberAccess	progressBar -> progress
>23760	Identifier	progress
>23761	Identifier	progressBar
>23762	Condition	 
>23763	Identifier	progressBar
>23768	FunctionDef	Game 
>23769	ParameterList	 
>23770	ReturnType	void
>23771	CompoundStatement	 
>23772	IfStatement	if ( progressBar )
>23773	CompoundStatement	 
>23774	ExpressionStatement	 
>23775	AssignmentExpr	progressBar = 0
>23776	PrimaryExpression	0
>23777	Identifier	progressBar
>23778	ExpressionStatement	 
>23779	AssignmentExpr	progressBar -> fadeAlphaWithLife = 1
>23780	PrimaryExpression	1
>23781	PtrMemberAccess	progressBar -> fadeAlphaWithLife
>23782	Identifier	fadeAlphaWithLife
>23783	Identifier	progressBar
>23784	ExpressionStatement	 
>23785	CallExpression	progressBar -> setDecayRate ( 1.0f / 0.5f )
>23786	ArgumentList	1.0f / 0.5f
>23787	Argument	1.0f / 0.5f
>23788	MultiplicativeExpression	1.0f / 0.5f
>23789	PrimaryExpression	0.5f
>23790	PrimaryExpression	1.0f
>23791	Callee	progressBar -> setDecayRate
>23792	PtrMemberAccess	progressBar -> setDecayRate
>23793	Identifier	setDecayRate
>23794	Identifier	progressBar
>23795	ExpressionStatement	 
>23796	CallExpression	progressBar -> setLife ( 1 )
>23797	ArgumentList	1
>23798	Argument	1
>23799	PrimaryExpression	1
>23800	Callee	progressBar -> setLife
>23801	PtrMemberAccess	progressBar -> setLife
>23802	Identifier	setLife
>23803	Identifier	progressBar
>23804	Condition	 
>23805	Identifier	progressBar
>23812	FunctionDef	Game 
>23813	ParameterList	std 
>23814	Parameter	 
>23815	Identifier	scene
>23816	ParameterType	std 
>23817	ReturnType	bool
>23818	CompoundStatement	 
>23819	ReturnStatement	 
>23820	Identifier	true
>23821	ExpressionStatement	 
>23822	CallExpression	endProgress ( )
>23823	ArgumentList	 
>23824	Callee	endProgress
>23825	Identifier	endProgress
>23826	ExpressionStatement	 
>23827	CallExpression	findMaxCameraValues ( )
>23828	ArgumentList	 
>23829	Callee	findMaxCameraValues
>23830	Identifier	findMaxCameraValues
>23831	IfStatement	if ( nocasecmp ( scene , \"cathedral02\" ) == 0 )
>23832	ExpressionStatement	 
>23833	CallExpression	dsq -> getRenderObjectLayer ( LR_ELEMENTS3 ) -> setOptimizeStatic ( false )
>23834	ArgumentList	false
>23835	Argument	false
>23836	Identifier	false
>23837	Callee	dsq -> getRenderObjectLayer ( LR_ELEMENTS3 ) -> setOptimizeStatic
>23838	PtrMemberAccess	dsq -> getRenderObjectLayer ( LR_ELEMENTS3 ) -> setOptimizeStatic
>23839	Identifier	setOptimizeStatic
>23840	CallExpression	dsq -> getRenderObjectLayer ( LR_ELEMENTS3 )
>23841	ArgumentList	LR_ELEMENTS3
>23842	Argument	LR_ELEMENTS3
>23843	Identifier	LR_ELEMENTS3
>23844	Callee	dsq -> getRenderObjectLayer
>23845	PtrMemberAccess	dsq -> getRenderObjectLayer
>23846	Identifier	getRenderObjectLayer
>23847	Identifier	dsq
>23848	Condition	 
>23849	EqualityExpression	nocasecmp ( scene , \"cathedral02\" ) == 0
>23850	PrimaryExpression	0
>23851	CallExpression	nocasecmp ( scene , \"cathedral02\" )
>23852	ArgumentList	scene
>23853	Argument	\"cathedral02\"
>23854	PrimaryExpression	\"cathedral02\"
>23855	Argument	scene
>23856	Identifier	scene
>23857	Callee	nocasecmp
>23858	Identifier	nocasecmp
>23859	ExpressionStatement	 
>23860	CallExpression	setElementLayerFlags ( )
>23861	ArgumentList	 
>23862	Callee	setElementLayerFlags
>23863	Identifier	setElementLayerFlags
>23864	ExpressionStatement	 
>23865	CallExpression	rebuildElementUpdateList ( )
>23866	ArgumentList	 
>23867	Callee	rebuildElementUpdateList
>23868	Identifier	rebuildElementUpdateList
>23869	ExpressionStatement	 
>23870	CallExpression	this -> reconstructGrid ( true )
>23871	ArgumentList	true
>23872	Argument	true
>23873	Identifier	true
>23874	Callee	this -> reconstructGrid
>23875	PtrMemberAccess	this -> reconstructGrid
>23876	Identifier	reconstructGrid
>23877	Identifier	this
>23878	CompoundStatement	 
>23879	ExpressionStatement	 
>23880	CallExpression	e -> onSceneFlipped ( )
>23881	ArgumentList	 
>23882	Callee	e -> onSceneFlipped
>23883	PtrMemberAccess	e -> onSceneFlipped
>23884	Identifier	onSceneFlipped
>23885	Identifier	e
>23886	IdentifierDeclStatement	 
>23887	IdentifierDecl	* e = * i
>23888	AssignmentExpr	* e = * i
>23889	UnaryOp	* i
>23890	Identifier	i
>23891	UnaryOperator	*
>23892	Identifier	e
>23893	Identifier	e
>23894	IdentifierDeclType	Entity *
>23895	Statement	 
>23896	Statement	 
>23897	Statement	 
>23898	Statement	 
>23899	WhileStatement	while ( entitiesNode )
>23900	CompoundStatement	 
>23901	ExpressionStatement	 
>23902	AssignmentExpr	entitiesNode = entitiesNode -> NextSiblingElement ( \"Entities\" )
>23903	CallExpression	entitiesNode -> NextSiblingElement ( \"Entities\" )
>23904	ArgumentList	\"Entities\"
>23905	Argument	\"Entities\"
>23906	PrimaryExpression	\"Entities\"
>23907	Callee	entitiesNode -> NextSiblingElement
>23908	PtrMemberAccess	entitiesNode -> NextSiblingElement
>23909	Identifier	NextSiblingElement
>23910	Identifier	entitiesNode
>23911	Identifier	entitiesNode
>23912	IfStatement	if ( entitiesNode -> Attribute ( \"j\" ) )
>23913	CompoundStatement	 
>23914	WhileStatement	while ( is >> idx )
>23915	CompoundStatement	 
>23916	IfStatement	if ( ! name . empty ( ) )
>23917	ElseStatement	else
>23918	ExpressionStatement	 
>23919	CallExpression	dsq -> game -> createEntity ( idx , id , Vector ( x , y ) , rot , true , \"\" , ET_ENEMY )
>23920	ArgumentList	idx
>23921	Argument	ET_ENEMY
>23922	Identifier	ET_ENEMY
>23923	Argument	\"\"
>23924	PrimaryExpression	\"\"
>23925	Argument	true
>23926	Identifier	true
>23927	Argument	rot
>23928	Identifier	rot
>23929	Argument	Vector ( x , y )
>23930	CallExpression	Vector ( x , y )
>23931	ArgumentList	x
>23932	Argument	y
>23933	Identifier	y
>23934	Argument	x
>23935	Identifier	x
>23936	Callee	Vector
>23937	Identifier	Vector
>23938	Argument	id
>23939	Identifier	id
>23940	Argument	idx
>23941	Identifier	idx
>23942	Callee	dsq -> game -> createEntity
>23943	PtrMemberAccess	dsq -> game -> createEntity
>23944	Identifier	createEntity
>23945	PtrMemberAccess	dsq -> game
>23946	Identifier	game
>23947	Identifier	dsq
>23948	ExpressionStatement	 
>23949	CallExpression	dsq -> game -> createEntity ( name , id , Vector ( x , y ) , rot , true , \"\" , ET_ENEMY )
>23950	ArgumentList	name
>23951	Argument	ET_ENEMY
>23952	Identifier	ET_ENEMY
>23953	Argument	\"\"
>23954	PrimaryExpression	\"\"
>23955	Argument	true
>23956	Identifier	true
>23957	Argument	rot
>23958	Identifier	rot
>23959	Argument	Vector ( x , y )
>23960	CallExpression	Vector ( x , y )
>23961	ArgumentList	x
>23962	Argument	y
>23963	Identifier	y
>23964	Argument	x
>23965	Identifier	x
>23966	Callee	Vector
>23967	Identifier	Vector
>23968	Argument	id
>23969	Identifier	id
>23970	Argument	name
>23971	Identifier	name
>23972	Callee	dsq -> game -> createEntity
>23973	PtrMemberAccess	dsq -> game -> createEntity
>23974	Identifier	createEntity
>23975	PtrMemberAccess	dsq -> game
>23976	Identifier	game
>23977	Identifier	dsq
>23978	Condition	 
>23979	UnaryOp	! name . empty ( )
>23980	CallExpression	name . empty ( )
>23981	ArgumentList	 
>23982	Callee	name . empty
>23983	MemberAccess	name . empty
>23984	Identifier	empty
>23985	Identifier	name
>23986	UnaryOperator	!
>23987	ExpressionStatement	 
>23988	ShiftExpression	is >> x >> y >> rot >> groupID >> id
>23989	ShiftExpression	x >> y >> rot >> groupID >> id
>23990	ShiftExpression	y >> rot >> groupID >> id
>23991	ShiftExpression	rot >> groupID >> id
>23992	ShiftExpression	groupID >> id
>23993	Identifier	id
>23994	Identifier	groupID
>23995	Identifier	rot
>23996	Identifier	y
>23997	Identifier	x
>23998	Identifier	is
>23999	IfStatement	if ( idx == - 1 )
>24000	ExpressionStatement	 
>24001	ShiftExpression	is >> name
>24002	Identifier	name
>24003	Identifier	is
>24004	Condition	 
>24005	EqualityExpression	idx == - 1
>24006	UnaryOp	- 1
>24007	PrimaryExpression	1
>24008	UnaryOperator	-
>24009	Identifier	idx
>24010	ExpressionStatement	 
>24011	AssignmentExpr	name = \"\"
>24012	PrimaryExpression	\"\"
>24013	Identifier	name
>24014	Condition	 
>24015	ShiftExpression	is >> idx
>24016	Identifier	idx
>24017	Identifier	is
>24018	IdentifierDeclStatement	 
>24019	IdentifierDecl	name
>24020	Identifier	name
>24021	IdentifierDeclType	std 
>24022	IdentifierDeclStatement	 
>24023	IdentifierDecl	id
>24024	Identifier	id
>24025	IdentifierDeclType	int
>24026	IdentifierDecl	groupID
>24027	Identifier	groupID
>24028	IdentifierDeclType	int
>24029	IdentifierDecl	rot
>24030	Identifier	rot
>24031	IdentifierDeclType	int
>24032	IdentifierDecl	y
>24033	Identifier	y
>24034	IdentifierDeclType	int
>24035	IdentifierDecl	x
>24036	Identifier	x
>24037	IdentifierDeclType	int
>24038	IdentifierDecl	idx
>24039	Identifier	idx
>24040	IdentifierDeclType	int
>24041	IdentifierDeclStatement	 
>24042	IdentifierDecl	is ( entitiesNode -> Attribute ( \"j\" ) )
>24043	CallExpression	entitiesNode -> Attribute ( \"j\" )
>24044	ArgumentList	\"j\"
>24045	Argument	\"j\"
>24046	PrimaryExpression	\"j\"
>24047	Callee	entitiesNode -> Attribute
>24048	PtrMemberAccess	entitiesNode -> Attribute
>24049	Identifier	Attribute
>24050	Identifier	entitiesNode
>24051	Identifier	is
>24052	IdentifierDeclType	SimpleIStringStream
>24053	Condition	 
>24054	CallExpression	entitiesNode -> Attribute ( \"j\" )
>24055	ArgumentList	\"j\"
>24056	Argument	\"j\"
>24057	PrimaryExpression	\"j\"
>24058	Callee	entitiesNode -> Attribute
>24059	PtrMemberAccess	entitiesNode -> Attribute
>24060	Identifier	Attribute
>24061	Identifier	entitiesNode
>24062	Condition	 
>24063	Identifier	entitiesNode
>24064	IdentifierDeclStatement	 
>24065	IdentifierDecl	* entitiesNode = doc . FirstChildElement ( \"Entities\" )
>24066	AssignmentExpr	* entitiesNode = doc . FirstChildElement ( \"Entities\" )
>24067	CallExpression	doc . FirstChildElement ( \"Entities\" )
>24068	ArgumentList	\"Entities\"
>24069	Argument	\"Entities\"
>24070	PrimaryExpression	\"Entities\"
>24071	Callee	doc . FirstChildElement
>24072	MemberAccess	doc . FirstChildElement
>24073	Identifier	FirstChildElement
>24074	Identifier	doc
>24075	Identifier	entitiesNode
>24076	Identifier	entitiesNode
>24077	IdentifierDeclType	XMLElement *
>24078	ExpressionStatement	 
>24079	CallExpression	this -> reconstructGrid ( true )
>24080	ArgumentList	true
>24081	Argument	true
>24082	Identifier	true
>24083	Callee	this -> reconstructGrid
>24084	PtrMemberAccess	this -> reconstructGrid
>24085	Identifier	reconstructGrid
>24086	Identifier	this
>24087	WhileStatement	while ( element )
>24088	CompoundStatement	 
>24089	ExpressionStatement	 
>24090	AssignmentExpr	element = element -> NextSiblingElement ( \"Element\" )
>24091	CallExpression	element -> NextSiblingElement ( \"Element\" )
>24092	ArgumentList	\"Element\"
>24093	Argument	\"Element\"
>24094	PrimaryExpression	\"Element\"
>24095	Callee	element -> NextSiblingElement
>24096	PtrMemberAccess	element -> NextSiblingElement
>24097	Identifier	NextSiblingElement
>24098	Identifier	element
>24099	Identifier	element
>24100	IfStatement	if ( element -> Attribute ( \"idx\" ) )
>24101	CompoundStatement	 
>24102	IfStatement	if ( idx != - 1 )
>24103	CompoundStatement	 
>24104	IfStatement	if ( element -> Attribute ( \"sz\" ) )
>24105	CompoundStatement	 
>24106	ExpressionStatement	 
>24107	ShiftExpression	is >> e -> scale . x >> e -> scale . y
>24108	ShiftExpression	e -> scale . x >> e -> scale . y
>24109	MemberAccess	e -> scale . y
>24110	Identifier	y
>24111	PtrMemberAccess	e -> scale
>24112	Identifier	scale
>24113	Identifier	e
>24114	MemberAccess	e -> scale . x
>24115	Identifier	x
>24116	PtrMemberAccess	e -> scale
>24117	Identifier	scale
>24118	Identifier	e
>24119	Identifier	is
>24120	IdentifierDeclStatement	 
>24121	IdentifierDecl	is ( element -> Attribute ( \"sz\" ) )
>24122	CallExpression	element -> Attribute ( \"sz\" )
>24123	ArgumentList	\"sz\"
>24124	Argument	\"sz\"
>24125	PrimaryExpression	\"sz\"
>24126	Callee	element -> Attribute
>24127	PtrMemberAccess	element -> Attribute
>24128	Identifier	Attribute
>24129	Identifier	element
>24130	Identifier	is
>24131	IdentifierDeclType	SimpleIStringStream
>24132	Condition	 
>24133	CallExpression	element -> Attribute ( \"sz\" )
>24134	ArgumentList	\"sz\"
>24135	Argument	\"sz\"
>24136	PrimaryExpression	\"sz\"
>24137	Callee	element -> Attribute
>24138	PtrMemberAccess	element -> Attribute
>24139	Identifier	Attribute
>24140	Identifier	element
>24141	IfStatement	if ( flipV )
>24142	ExpressionStatement	 
>24143	CallExpression	e -> flipVertical ( )
>24144	ArgumentList	 
>24145	Callee	e -> flipVertical
>24146	PtrMemberAccess	e -> flipVertical
>24147	Identifier	flipVertical
>24148	Identifier	e
>24149	Condition	 
>24150	Identifier	flipV
>24151	IfStatement	if ( flipH )
>24152	ExpressionStatement	 
>24153	CallExpression	e -> flipHorizontal ( )
>24154	ArgumentList	 
>24155	Callee	e -> flipHorizontal
>24156	PtrMemberAccess	e -> flipHorizontal
>24157	Identifier	flipHorizontal
>24158	Identifier	e
>24159	Condition	 
>24160	Identifier	flipH
>24161	ExpressionStatement	 
>24162	AssignmentExpr	e -> rotation . z = rot
>24163	Identifier	rot
>24164	MemberAccess	e -> rotation . z
>24165	Identifier	z
>24166	PtrMemberAccess	e -> rotation
>24167	Identifier	rotation
>24168	Identifier	e
>24169	IdentifierDeclStatement	 
>24170	IdentifierDecl	* e = createElement ( idx , Vector ( x , y ) , layer )
>24171	AssignmentExpr	* e = createElement ( idx , Vector ( x , y ) , layer )
>24172	CallExpression	createElement ( idx , Vector ( x , y ) , layer )
>24173	ArgumentList	idx
>24174	Argument	layer
>24175	Identifier	layer
>24176	Argument	Vector ( x , y )
>24177	CallExpression	Vector ( x , y )
>24178	ArgumentList	x
>24179	Argument	y
>24180	Identifier	y
>24181	Argument	x
>24182	Identifier	x
>24183	Callee	Vector
>24184	Identifier	Vector
>24185	Argument	idx
>24186	Identifier	idx
>24187	Callee	createElement
>24188	Identifier	createElement
>24189	Identifier	e
>24190	Identifier	e
>24191	IdentifierDeclType	Element *
>24192	Condition	 
>24193	EqualityExpression	idx != - 1
>24194	UnaryOp	- 1
>24195	PrimaryExpression	1
>24196	UnaryOperator	-
>24197	Identifier	idx
>24198	IfStatement	if ( element -> Attribute ( \"lyr\" ) )
>24199	ExpressionStatement	 
>24200	AssignmentExpr	layer = atoi ( element -> Attribute ( \"lyr\" ) )
>24201	CallExpression	atoi ( element -> Attribute ( \"lyr\" ) )
>24202	ArgumentList	element -> Attribute ( \"lyr\" )
>24203	Argument	element -> Attribute ( \"lyr\" )
>24204	CallExpression	element -> Attribute ( \"lyr\" )
>24205	ArgumentList	\"lyr\"
>24206	Argument	\"lyr\"
>24207	PrimaryExpression	\"lyr\"
>24208	Callee	element -> Attribute
>24209	PtrMemberAccess	element -> Attribute
>24210	Identifier	Attribute
>24211	Identifier	element
>24212	Callee	atoi
>24213	Identifier	atoi
>24214	Identifier	layer
>24215	Condition	 
>24216	CallExpression	element -> Attribute ( \"lyr\" )
>24217	ArgumentList	\"lyr\"
>24218	Argument	\"lyr\"
>24219	PrimaryExpression	\"lyr\"
>24220	Callee	element -> Attribute
>24221	PtrMemberAccess	element -> Attribute
>24222	Identifier	Attribute
>24223	Identifier	element
>24224	IfStatement	if ( element -> Attribute ( \"rot\" ) )
>24225	ExpressionStatement	 
>24226	AssignmentExpr	rot = atof ( element -> Attribute ( \"rot\" ) )
>24227	CallExpression	atof ( element -> Attribute ( \"rot\" ) )
>24228	ArgumentList	element -> Attribute ( \"rot\" )
>24229	Argument	element -> Attribute ( \"rot\" )
>24230	CallExpression	element -> Attribute ( \"rot\" )
>24231	ArgumentList	\"rot\"
>24232	Argument	\"rot\"
>24233	PrimaryExpression	\"rot\"
>24234	Callee	element -> Attribute
>24235	PtrMemberAccess	element -> Attribute
>24236	Identifier	Attribute
>24237	Identifier	element
>24238	Callee	atof
>24239	Identifier	atof
>24240	Identifier	rot
>24241	Condition	 
>24242	CallExpression	element -> Attribute ( \"rot\" )
>24243	ArgumentList	\"rot\"
>24244	Argument	\"rot\"
>24245	PrimaryExpression	\"rot\"
>24246	Callee	element -> Attribute
>24247	PtrMemberAccess	element -> Attribute
>24248	Identifier	Attribute
>24249	Identifier	element
>24250	IfStatement	if ( element -> Attribute ( \"flipV\" ) )
>24251	ExpressionStatement	 
>24252	AssignmentExpr	flipV = atoi ( element -> Attribute ( \"flipV\" ) )
>24253	CallExpression	atoi ( element -> Attribute ( \"flipV\" ) )
>24254	ArgumentList	element -> Attribute ( \"flipV\" )
>24255	Argument	element -> Attribute ( \"flipV\" )
>24256	CallExpression	element -> Attribute ( \"flipV\" )
>24257	ArgumentList	\"flipV\"
>24258	Argument	\"flipV\"
>24259	PrimaryExpression	\"flipV\"
>24260	Callee	element -> Attribute
>24261	PtrMemberAccess	element -> Attribute
>24262	Identifier	Attribute
>24263	Identifier	element
>24264	Callee	atoi
>24265	Identifier	atoi
>24266	Identifier	flipV
>24267	Condition	 
>24268	CallExpression	element -> Attribute ( \"flipV\" )
>24269	ArgumentList	\"flipV\"
>24270	Argument	\"flipV\"
>24271	PrimaryExpression	\"flipV\"
>24272	Callee	element -> Attribute
>24273	PtrMemberAccess	element -> Attribute
>24274	Identifier	Attribute
>24275	Identifier	element
>24276	IfStatement	if ( element -> Attribute ( \"flipH\" ) )
>24277	ExpressionStatement	 
>24278	AssignmentExpr	flipH = atoi ( element -> Attribute ( \"flipH\" ) )
>24279	CallExpression	atoi ( element -> Attribute ( \"flipH\" ) )
>24280	ArgumentList	element -> Attribute ( \"flipH\" )
>24281	Argument	element -> Attribute ( \"flipH\" )
>24282	CallExpression	element -> Attribute ( \"flipH\" )
>24283	ArgumentList	\"flipH\"
>24284	Argument	\"flipH\"
>24285	PrimaryExpression	\"flipH\"
>24286	Callee	element -> Attribute
>24287	PtrMemberAccess	element -> Attribute
>24288	Identifier	Attribute
>24289	Identifier	element
>24290	Callee	atoi
>24291	Identifier	atoi
>24292	Identifier	flipH
>24293	Condition	 
>24294	CallExpression	element -> Attribute ( \"flipH\" )
>24295	ArgumentList	\"flipH\"
>24296	Argument	\"flipH\"
>24297	PrimaryExpression	\"flipH\"
>24298	Callee	element -> Attribute
>24299	PtrMemberAccess	element -> Attribute
>24300	Identifier	Attribute
>24301	Identifier	element
>24302	IdentifierDeclStatement	 
>24303	IdentifierDecl	flipV = false
>24304	AssignmentExpr	flipV = false
>24305	Identifier	false
>24306	Identifier	false
>24307	Identifier	flipV
>24308	IdentifierDeclType	bool
>24309	IdentifierDecl	flipH = false
>24310	AssignmentExpr	flipH = false
>24311	Identifier	false
>24312	Identifier	false
>24313	Identifier	flipH
>24314	IdentifierDeclType	bool
>24315	IdentifierDeclStatement	 
>24316	IdentifierDecl	rot = 0
>24317	AssignmentExpr	rot = 0
>24318	PrimaryExpression	0
>24319	Identifier	rot
>24320	Identifier	rot
>24321	IdentifierDeclType	float
>24322	IdentifierDeclStatement	 
>24323	IdentifierDecl	layer = LR_ELEMENTS5
>24324	AssignmentExpr	layer = LR_ELEMENTS5
>24325	Identifier	LR_ELEMENTS5
>24326	Identifier	LR_ELEMENTS5
>24327	Identifier	layer
>24328	IdentifierDeclType	int
>24329	IdentifierDeclStatement	 
>24330	IdentifierDecl	idx = atoi ( element -> Attribute ( \"idx\" ) )
>24331	AssignmentExpr	idx = atoi ( element -> Attribute ( \"idx\" ) )
>24332	CallExpression	atoi ( element -> Attribute ( \"idx\" ) )
>24333	ArgumentList	element -> Attribute ( \"idx\" )
>24334	Argument	element -> Attribute ( \"idx\" )
>24335	CallExpression	element -> Attribute ( \"idx\" )
>24336	ArgumentList	\"idx\"
>24337	Argument	\"idx\"
>24338	PrimaryExpression	\"idx\"
>24339	Callee	element -> Attribute
>24340	PtrMemberAccess	element -> Attribute
>24341	Identifier	Attribute
>24342	Identifier	element
>24343	Callee	atoi
>24344	Identifier	atoi
>24345	Identifier	idx
>24346	Identifier	idx
>24347	IdentifierDeclType	int
>24348	IdentifierDeclStatement	 
>24349	IdentifierDecl	y = atoi ( element -> Attribute ( \"y\" ) )
>24350	AssignmentExpr	y = atoi ( element -> Attribute ( \"y\" ) )
>24351	CallExpression	atoi ( element -> Attribute ( \"y\" ) )
>24352	ArgumentList	element -> Attribute ( \"y\" )
>24353	Argument	element -> Attribute ( \"y\" )
>24354	CallExpression	element -> Attribute ( \"y\" )
>24355	ArgumentList	\"y\"
>24356	Argument	\"y\"
>24357	PrimaryExpression	\"y\"
>24358	Callee	element -> Attribute
>24359	PtrMemberAccess	element -> Attribute
>24360	Identifier	Attribute
>24361	Identifier	element
>24362	Callee	atoi
>24363	Identifier	atoi
>24364	Identifier	y
>24365	Identifier	y
>24366	IdentifierDeclType	int
>24367	IdentifierDeclStatement	 
>24368	IdentifierDecl	x = atoi ( element -> Attribute ( \"x\" ) )
>24369	AssignmentExpr	x = atoi ( element -> Attribute ( \"x\" ) )
>24370	CallExpression	atoi ( element -> Attribute ( \"x\" ) )
>24371	ArgumentList	element -> Attribute ( \"x\" )
>24372	Argument	element -> Attribute ( \"x\" )
>24373	CallExpression	element -> Attribute ( \"x\" )
>24374	ArgumentList	\"x\"
>24375	Argument	\"x\"
>24376	PrimaryExpression	\"x\"
>24377	Callee	element -> Attribute
>24378	PtrMemberAccess	element -> Attribute
>24379	Identifier	Attribute
>24380	Identifier	element
>24381	Callee	atoi
>24382	Identifier	atoi
>24383	Identifier	x
>24384	Identifier	x
>24385	IdentifierDeclType	int
>24386	Condition	 
>24387	CallExpression	element -> Attribute ( \"idx\" )
>24388	ArgumentList	\"idx\"
>24389	Argument	\"idx\"
>24390	PrimaryExpression	\"idx\"
>24391	Callee	element -> Attribute
>24392	PtrMemberAccess	element -> Attribute
>24393	Identifier	Attribute
>24394	Identifier	element
>24395	Condition	 
>24396	Identifier	element
>24397	IdentifierDeclStatement	 
>24398	IdentifierDecl	* element = doc . FirstChildElement ( \"Element\" )
>24399	AssignmentExpr	* element = doc . FirstChildElement ( \"Element\" )
>24400	CallExpression	doc . FirstChildElement ( \"Element\" )
>24401	ArgumentList	\"Element\"
>24402	Argument	\"Element\"
>24403	PrimaryExpression	\"Element\"
>24404	Callee	doc . FirstChildElement
>24405	MemberAccess	doc . FirstChildElement
>24406	Identifier	FirstChildElement
>24407	Identifier	doc
>24408	Identifier	element
>24409	Identifier	element
>24410	IdentifierDeclType	XMLElement *
>24411	WhileStatement	while ( simpleElements )
>24412	CompoundStatement	 
>24413	ExpressionStatement	 
>24414	AssignmentExpr	simpleElements = simpleElements -> NextSiblingElement ( \"SE\" )
>24415	CallExpression	simpleElements -> NextSiblingElement ( \"SE\" )
>24416	ArgumentList	\"SE\"
>24417	Argument	\"SE\"
>24418	PrimaryExpression	\"SE\"
>24419	Callee	simpleElements -> NextSiblingElement
>24420	PtrMemberAccess	simpleElements -> NextSiblingElement
>24421	Identifier	NextSiblingElement
>24422	Identifier	simpleElements
>24423	Identifier	simpleElements
>24424	IfStatement	if ( simpleElements -> Attribute ( \"repeatScale\" ) )
>24425	CompoundStatement	 
>24426	ForStatement	for ( size_t i = 0 ; i < loadedElements . size ( ) ; ++ i )
>24427	CompoundStatement	 
>24428	IfStatement	if ( e -> isRepeatingTextureToFill ( ) )
>24429	CompoundStatement	 
>24430	ExpressionStatement	 
>24431	CallExpression	e -> refreshRepeatTextureToFill ( )
>24432	ArgumentList	 
>24433	Callee	e -> refreshRepeatTextureToFill
>24434	PtrMemberAccess	e -> refreshRepeatTextureToFill
>24435	Identifier	refreshRepeatTextureToFill
>24436	Identifier	e
>24437	ExpressionStatement	 
>24438	AssignmentExpr	e -> repeatToFillScale . y = repeatScaleY
>24439	Identifier	repeatScaleY
>24440	MemberAccess	e -> repeatToFillScale . y
>24441	Identifier	y
>24442	PtrMemberAccess	e -> repeatToFillScale
>24443	Identifier	repeatToFillScale
>24444	Identifier	e
>24445	ExpressionStatement	 
>24446	AssignmentExpr	e -> repeatToFillScale . x = repeatScaleX
>24447	Identifier	repeatScaleX
>24448	MemberAccess	e -> repeatToFillScale . x
>24449	Identifier	x
>24450	PtrMemberAccess	e -> repeatToFillScale
>24451	Identifier	repeatToFillScale
>24452	Identifier	e
>24453	IfStatement	if ( ! ( is2 >> repeatScaleX >> repeatScaleY ) )
>24454	BreakStatement	 
>24455	Condition	 
>24456	UnaryOp	! ( is2 >> repeatScaleX >> repeatScaleY )
>24457	ShiftExpression	is2 >> repeatScaleX >> repeatScaleY
>24458	ShiftExpression	repeatScaleX >> repeatScaleY
>24459	Identifier	repeatScaleY
>24460	Identifier	repeatScaleX
>24461	Identifier	is2
>24462	UnaryOperator	!
>24463	IdentifierDeclStatement	 
>24464	IdentifierDecl	repeatScaleY = 1
>24465	AssignmentExpr	repeatScaleY = 1
>24466	PrimaryExpression	1
>24467	Identifier	repeatScaleY
>24468	Identifier	repeatScaleY
>24469	IdentifierDeclType	float
>24470	IdentifierDecl	repeatScaleX = 1
>24471	AssignmentExpr	repeatScaleX = 1
>24472	PrimaryExpression	1
>24473	Identifier	repeatScaleX
>24474	Identifier	repeatScaleX
>24475	IdentifierDeclType	float
>24476	Condition	 
>24477	CallExpression	e -> isRepeatingTextureToFill ( )
>24478	ArgumentList	 
>24479	Callee	e -> isRepeatingTextureToFill
>24480	PtrMemberAccess	e -> isRepeatingTextureToFill
>24481	Identifier	isRepeatingTextureToFill
>24482	Identifier	e
>24483	IdentifierDeclStatement	 
>24484	IdentifierDecl	* e = loadedElements [ i ]
>24485	AssignmentExpr	* e = loadedElements [ i ]
>24486	ArrayIndexing	loadedElements [ i ]
>24487	Identifier	i
>24488	Identifier	loadedElements
>24489	Identifier	e
>24490	Identifier	e
>24491	IdentifierDeclType	Element *
>24492	UnaryExpression	 
>24493	Identifier	i
>24494	IncDec	++
>24495	Condition	 
>24496	RelationalExpression	i < loadedElements . size ( )
>24497	CallExpression	loadedElements . size ( )
>24498	ArgumentList	 
>24499	Callee	loadedElements . size
>24500	MemberAccess	loadedElements . size
>24501	Identifier	size
>24502	Identifier	loadedElements
>24503	Identifier	i
>24504	ForInit	 
>24505	IdentifierDeclStatement	size_t i = 0 ;
>24506	IdentifierDecl	i = 0
>24507	AssignmentExpr	i = 0
>24508	PrimaryExpression	0
>24509	Identifier	i
>24510	Identifier	i
>24511	IdentifierDeclType	size_t
>24512	IdentifierDeclStatement	 
>24513	IdentifierDecl	is2 ( simpleElements -> Attribute ( \"repeatScale\" ) )
>24514	CallExpression	simpleElements -> Attribute ( \"repeatScale\" )
>24515	ArgumentList	\"repeatScale\"
>24516	Argument	\"repeatScale\"
>24517	PrimaryExpression	\"repeatScale\"
>24518	Callee	simpleElements -> Attribute
>24519	PtrMemberAccess	simpleElements -> Attribute
>24520	Identifier	Attribute
>24521	Identifier	simpleElements
>24522	Identifier	is2
>24523	IdentifierDeclType	SimpleIStringStream
>24524	Condition	 
>24525	CallExpression	simpleElements -> Attribute ( \"repeatScale\" )
>24526	ArgumentList	\"repeatScale\"
>24527	Argument	\"repeatScale\"
>24528	PrimaryExpression	\"repeatScale\"
>24529	Callee	simpleElements -> Attribute
>24530	PtrMemberAccess	simpleElements -> Attribute
>24531	Identifier	Attribute
>24532	Identifier	simpleElements
>24533	IfStatement	if ( simpleElements -> Attribute ( \"k\" ) )
>24534	CompoundStatement	 
>24535	WhileStatement	while ( is2 >> idx )
>24536	CompoundStatement	 
>24537	ExpressionStatement	 
>24538	CallExpression	loadedElements . push_back ( e )
>24539	ArgumentList	e
>24540	Argument	e
>24541	Identifier	e
>24542	Callee	loadedElements . push_back
>24543	MemberAccess	loadedElements . push_back
>24544	Identifier	push_back
>24545	Identifier	loadedElements
>24546	IfStatement	if ( c > 100 )
>24547	CompoundStatement	 
>24548	ExpressionStatement	 
>24549	CallExpression	addProgress ( )
>24550	ArgumentList	 
>24551	Callee	addProgress
>24552	Identifier	addProgress
>24553	ExpressionStatement	 
>24554	AssignmentExpr	c = 0
>24555	PrimaryExpression	0
>24556	Identifier	c
>24557	Condition	 
>24558	RelationalExpression	c > 100
>24559	PrimaryExpression	100
>24560	Identifier	c
>24561	ExpressionStatement	 
>24562	IncDecOp	c ++
>24563	IncDec	++
>24564	Identifier	c
>24565	IfStatement	if ( repeat )
>24566	ExpressionStatement	 
>24567	CallExpression	e -> repeatTextureToFill ( true )
>24568	ArgumentList	true
>24569	Argument	true
>24570	Identifier	true
>24571	Callee	e -> repeatTextureToFill
>24572	PtrMemberAccess	e -> repeatTextureToFill
>24573	Identifier	repeatTextureToFill
>24574	Identifier	e
>24575	Condition	 
>24576	Identifier	repeat
>24577	ExpressionStatement	 
>24578	CallExpression	e -> setElementEffectByIndex ( efxIdx )
>24579	ArgumentList	efxIdx
>24580	Argument	efxIdx
>24581	Identifier	efxIdx
>24582	Callee	e -> setElementEffectByIndex
>24583	PtrMemberAccess	e -> setElementEffectByIndex
>24584	Identifier	setElementEffectByIndex
>24585	Identifier	e
>24586	ExpressionStatement	 
>24587	AssignmentExpr	e -> rotation . z = rot
>24588	Identifier	rot
>24589	MemberAccess	e -> rotation . z
>24590	Identifier	z
>24591	PtrMemberAccess	e -> rotation
>24592	Identifier	rotation
>24593	Identifier	e
>24594	ExpressionStatement	 
>24595	AssignmentExpr	e -> scale = Vector ( sz , sz2 )
>24596	CallExpression	Vector ( sz , sz2 )
>24597	ArgumentList	sz
>24598	Argument	sz2
>24599	Identifier	sz2
>24600	Argument	sz
>24601	Identifier	sz
>24602	Callee	Vector
>24603	Identifier	Vector
>24604	PtrMemberAccess	e -> scale
>24605	Identifier	scale
>24606	Identifier	e
>24607	IfStatement	if ( fv )
>24608	ExpressionStatement	 
>24609	CallExpression	e -> flipVertical ( )
>24610	ArgumentList	 
>24611	Callee	e -> flipVertical
>24612	PtrMemberAccess	e -> flipVertical
>24613	Identifier	flipVertical
>24614	Identifier	e
>24615	Condition	 
>24616	Identifier	fv
>24617	IfStatement	if ( fh )
>24618	ExpressionStatement	 
>24619	CallExpression	e -> flipHorizontal ( )
>24620	ArgumentList	 
>24621	Callee	e -> flipHorizontal
>24622	PtrMemberAccess	e -> flipHorizontal
>24623	Identifier	flipHorizontal
>24624	Identifier	e
>24625	Condition	 
>24626	Identifier	fh
>24627	ExpressionStatement	 
>24628	AssignmentExpr	e -> elementFlag = ( ElementFlag ) flags
>24629	CastExpression	( ElementFlag ) flags
>24630	Identifier	flags
>24631	CastTarget	ElementFlag
>24632	PtrMemberAccess	e -> elementFlag
>24633	Identifier	elementFlag
>24634	Identifier	e
>24635	IdentifierDeclStatement	 
>24636	IdentifierDecl	* e = createElement ( idx , Vector ( x , y ) , l )
>24637	AssignmentExpr	* e = createElement ( idx , Vector ( x , y ) , l )
>24638	CallExpression	createElement ( idx , Vector ( x , y ) , l )
>24639	ArgumentList	idx
>24640	Argument	l
>24641	Identifier	l
>24642	Argument	Vector ( x , y )
>24643	CallExpression	Vector ( x , y )
>24644	ArgumentList	x
>24645	Argument	y
>24646	Identifier	y
>24647	Argument	x
>24648	Identifier	x
>24649	Callee	Vector
>24650	Identifier	Vector
>24651	Argument	idx
>24652	Identifier	idx
>24653	Callee	createElement
>24654	Identifier	createElement
>24655	Identifier	e
>24656	Identifier	e
>24657	IdentifierDeclType	Element *
>24658	IfStatement	if ( sz2 < MIN_SIZE )
>24659	ExpressionStatement	 
>24660	AssignmentExpr	sz2 = MIN_SIZE
>24661	Identifier	MIN_SIZE
>24662	Identifier	sz2
>24663	Condition	 
>24664	RelationalExpression	sz2 < MIN_SIZE
>24665	Identifier	MIN_SIZE
>24666	Identifier	sz2
>24667	IfStatement	if ( sz < MIN_SIZE )
>24668	ExpressionStatement	 
>24669	AssignmentExpr	sz = MIN_SIZE
>24670	Identifier	MIN_SIZE
>24671	Identifier	sz
>24672	Condition	 
>24673	RelationalExpression	sz < MIN_SIZE
>24674	Identifier	MIN_SIZE
>24675	Identifier	sz
>24676	ExpressionStatement	 
>24677	ShiftExpression	is2 >> x >> y >> rot >> sz >> sz2 >> fh >> fv >> flags >> efxIdx >> repeat
>24678	ShiftExpression	x >> y >> rot >> sz >> sz2 >> fh >> fv >> flags >> efxIdx >> repeat
>24679	ShiftExpression	y >> rot >> sz >> sz2 >> fh >> fv >> flags >> efxIdx >> repeat
>24680	ShiftExpression	rot >> sz >> sz2 >> fh >> fv >> flags >> efxIdx >> repeat
>24681	ShiftExpression	sz >> sz2 >> fh >> fv >> flags >> efxIdx >> repeat
>24682	ShiftExpression	sz2 >> fh >> fv >> flags >> efxIdx >> repeat
>24683	ShiftExpression	fh >> fv >> flags >> efxIdx >> repeat
>24684	ShiftExpression	fv >> flags >> efxIdx >> repeat
>24685	ShiftExpression	flags >> efxIdx >> repeat
>24686	ShiftExpression	efxIdx >> repeat
>24687	Identifier	repeat
>24688	Identifier	efxIdx
>24689	Identifier	flags
>24690	Identifier	fv
>24691	Identifier	fh
>24692	Identifier	sz2
>24693	Identifier	sz
>24694	Identifier	rot
>24695	Identifier	y
>24696	Identifier	x
>24697	Identifier	is2
>24698	IdentifierDeclStatement	 
>24699	IdentifierDecl	repeat
>24700	Identifier	repeat
>24701	IdentifierDeclType	int
>24702	IdentifierDeclStatement	 
>24703	IdentifierDecl	efxIdx
>24704	Identifier	efxIdx
>24705	IdentifierDeclType	int
>24706	IdentifierDeclStatement	 
>24707	IdentifierDecl	flags
>24708	Identifier	flags
>24709	IdentifierDeclType	int
>24710	IdentifierDeclStatement	 
>24711	IdentifierDecl	fv
>24712	Identifier	fv
>24713	IdentifierDeclType	int
>24714	IdentifierDecl	fh
>24715	Identifier	fh
>24716	IdentifierDeclType	int
>24717	Condition	 
>24718	ShiftExpression	is2 >> idx
>24719	Identifier	idx
>24720	Identifier	is2
>24721	IdentifierDeclStatement	 
>24722	IdentifierDecl	c = 0
>24723	AssignmentExpr	c = 0
>24724	PrimaryExpression	0
>24725	Identifier	c
>24726	Identifier	c
>24727	IdentifierDeclType	int
>24728	IdentifierDeclStatement	 
>24729	IdentifierDecl	l = atoi ( simpleElements -> Attribute ( \"l\" ) )
>24730	AssignmentExpr	l = atoi ( simpleElements -> Attribute ( \"l\" ) )
>24731	CallExpression	atoi ( simpleElements -> Attribute ( \"l\" ) )
>24732	ArgumentList	simpleElements -> Attribute ( \"l\" )
>24733	Argument	simpleElements -> Attribute ( \"l\" )
>24734	CallExpression	simpleElements -> Attribute ( \"l\" )
>24735	ArgumentList	\"l\"
>24736	Argument	\"l\"
>24737	PrimaryExpression	\"l\"
>24738	Callee	simpleElements -> Attribute
>24739	PtrMemberAccess	simpleElements -> Attribute
>24740	Identifier	Attribute
>24741	Identifier	simpleElements
>24742	Callee	atoi
>24743	Identifier	atoi
>24744	Identifier	l
>24745	Identifier	l
>24746	IdentifierDeclType	int
>24747	IdentifierDeclStatement	 
>24748	IdentifierDecl	is2 ( simpleElements -> Attribute ( \"k\" ) )
>24749	CallExpression	simpleElements -> Attribute ( \"k\" )
>24750	ArgumentList	\"k\"
>24751	Argument	\"k\"
>24752	PrimaryExpression	\"k\"
>24753	Callee	simpleElements -> Attribute
>24754	PtrMemberAccess	simpleElements -> Attribute
>24755	Identifier	Attribute
>24756	Identifier	simpleElements
>24757	Identifier	is2
>24758	IdentifierDeclType	SimpleIStringStream
>24759	Condition	 
>24760	CallExpression	simpleElements -> Attribute ( \"k\" )
>24761	ArgumentList	\"k\"
>24762	Argument	\"k\"
>24763	PrimaryExpression	\"k\"
>24764	Callee	simpleElements -> Attribute
>24765	PtrMemberAccess	simpleElements -> Attribute
>24766	Identifier	Attribute
>24767	Identifier	simpleElements
>24768	IfStatement	if ( simpleElements -> Attribute ( \"j\" ) )
>24769	CompoundStatement	 
>24770	WhileStatement	while ( is2 >> idx )
>24771	CompoundStatement	 
>24772	ExpressionStatement	 
>24773	CallExpression	loadedElements . push_back ( e )
>24774	ArgumentList	e
>24775	Argument	e
>24776	Identifier	e
>24777	Callee	loadedElements . push_back
>24778	MemberAccess	loadedElements . push_back
>24779	Identifier	push_back
>24780	Identifier	loadedElements
>24781	IfStatement	if ( repeat )
>24782	ExpressionStatement	 
>24783	CallExpression	e -> repeatTextureToFill ( true )
>24784	ArgumentList	true
>24785	Argument	true
>24786	Identifier	true
>24787	Callee	e -> repeatTextureToFill
>24788	PtrMemberAccess	e -> repeatTextureToFill
>24789	Identifier	repeatTextureToFill
>24790	Identifier	e
>24791	Condition	 
>24792	Identifier	repeat
>24793	ExpressionStatement	 
>24794	CallExpression	e -> setElementEffectByIndex ( efxIdx )
>24795	ArgumentList	efxIdx
>24796	Argument	efxIdx
>24797	Identifier	efxIdx
>24798	Callee	e -> setElementEffectByIndex
>24799	PtrMemberAccess	e -> setElementEffectByIndex
>24800	Identifier	setElementEffectByIndex
>24801	Identifier	e
>24802	ExpressionStatement	 
>24803	AssignmentExpr	e -> rotation . z = rot
>24804	Identifier	rot
>24805	MemberAccess	e -> rotation . z
>24806	Identifier	z
>24807	PtrMemberAccess	e -> rotation
>24808	Identifier	rotation
>24809	Identifier	e
>24810	ExpressionStatement	 
>24811	AssignmentExpr	e -> scale = Vector ( sz , sz )
>24812	CallExpression	Vector ( sz , sz )
>24813	ArgumentList	sz
>24814	Argument	sz
>24815	Identifier	sz
>24816	Argument	sz
>24817	Identifier	sz
>24818	Callee	Vector
>24819	Identifier	Vector
>24820	PtrMemberAccess	e -> scale
>24821	Identifier	scale
>24822	Identifier	e
>24823	IfStatement	if ( fv )
>24824	ExpressionStatement	 
>24825	CallExpression	e -> flipVertical ( )
>24826	ArgumentList	 
>24827	Callee	e -> flipVertical
>24828	PtrMemberAccess	e -> flipVertical
>24829	Identifier	flipVertical
>24830	Identifier	e
>24831	Condition	 
>24832	Identifier	fv
>24833	IfStatement	if ( fh )
>24834	ExpressionStatement	 
>24835	CallExpression	e -> flipHorizontal ( )
>24836	ArgumentList	 
>24837	Callee	e -> flipHorizontal
>24838	PtrMemberAccess	e -> flipHorizontal
>24839	Identifier	flipHorizontal
>24840	Identifier	e
>24841	Condition	 
>24842	Identifier	fh
>24843	ExpressionStatement	 
>24844	AssignmentExpr	e -> elementFlag = ( ElementFlag ) flags
>24845	CastExpression	( ElementFlag ) flags
>24846	Identifier	flags
>24847	CastTarget	ElementFlag
>24848	PtrMemberAccess	e -> elementFlag
>24849	Identifier	elementFlag
>24850	Identifier	e
>24851	IdentifierDeclStatement	 
>24852	IdentifierDecl	* e = createElement ( idx , Vector ( x , y ) , l )
>24853	AssignmentExpr	* e = createElement ( idx , Vector ( x , y ) , l )
>24854	CallExpression	createElement ( idx , Vector ( x , y ) , l )
>24855	ArgumentList	idx
>24856	Argument	l
>24857	Identifier	l
>24858	Argument	Vector ( x , y )
>24859	CallExpression	Vector ( x , y )
>24860	ArgumentList	x
>24861	Argument	y
>24862	Identifier	y
>24863	Argument	x
>24864	Identifier	x
>24865	Callee	Vector
>24866	Identifier	Vector
>24867	Argument	idx
>24868	Identifier	idx
>24869	Callee	createElement
>24870	Identifier	createElement
>24871	Identifier	e
>24872	Identifier	e
>24873	IdentifierDeclType	Element *
>24874	IfStatement	if ( sz < MIN_SIZE )
>24875	ExpressionStatement	 
>24876	AssignmentExpr	sz = MIN_SIZE
>24877	Identifier	MIN_SIZE
>24878	Identifier	sz
>24879	Condition	 
>24880	RelationalExpression	sz < MIN_SIZE
>24881	Identifier	MIN_SIZE
>24882	Identifier	sz
>24883	ExpressionStatement	 
>24884	ShiftExpression	is2 >> x >> y >> rot >> sz >> fh >> fv >> flags >> efxIdx >> repeat
>24885	ShiftExpression	x >> y >> rot >> sz >> fh >> fv >> flags >> efxIdx >> repeat
>24886	ShiftExpression	y >> rot >> sz >> fh >> fv >> flags >> efxIdx >> repeat
>24887	ShiftExpression	rot >> sz >> fh >> fv >> flags >> efxIdx >> repeat
>24888	ShiftExpression	sz >> fh >> fv >> flags >> efxIdx >> repeat
>24889	ShiftExpression	fh >> fv >> flags >> efxIdx >> repeat
>24890	ShiftExpression	fv >> flags >> efxIdx >> repeat
>24891	ShiftExpression	flags >> efxIdx >> repeat
>24892	ShiftExpression	efxIdx >> repeat
>24893	Identifier	repeat
>24894	Identifier	efxIdx
>24895	Identifier	flags
>24896	Identifier	fv
>24897	Identifier	fh
>24898	Identifier	sz
>24899	Identifier	rot
>24900	Identifier	y
>24901	Identifier	x
>24902	Identifier	is2
>24903	IdentifierDeclStatement	 
>24904	IdentifierDecl	repeat
>24905	Identifier	repeat
>24906	IdentifierDeclType	int
>24907	IdentifierDeclStatement	 
>24908	IdentifierDecl	efxIdx
>24909	Identifier	efxIdx
>24910	IdentifierDeclType	int
>24911	IdentifierDeclStatement	 
>24912	IdentifierDecl	flags
>24913	Identifier	flags
>24914	IdentifierDeclType	int
>24915	IdentifierDeclStatement	 
>24916	IdentifierDecl	fv
>24917	Identifier	fv
>24918	IdentifierDeclType	int
>24919	IdentifierDecl	fh
>24920	Identifier	fh
>24921	IdentifierDeclType	int
>24922	Condition	 
>24923	ShiftExpression	is2 >> idx
>24924	Identifier	idx
>24925	Identifier	is2
>24926	IdentifierDeclStatement	 
>24927	IdentifierDecl	l = atoi ( simpleElements -> Attribute ( \"l\" ) )
>24928	AssignmentExpr	l = atoi ( simpleElements -> Attribute ( \"l\" ) )
>24929	CallExpression	atoi ( simpleElements -> Attribute ( \"l\" ) )
>24930	ArgumentList	simpleElements -> Attribute ( \"l\" )
>24931	Argument	simpleElements -> Attribute ( \"l\" )
>24932	CallExpression	simpleElements -> Attribute ( \"l\" )
>24933	ArgumentList	\"l\"
>24934	Argument	\"l\"
>24935	PrimaryExpression	\"l\"
>24936	Callee	simpleElements -> Attribute
>24937	PtrMemberAccess	simpleElements -> Attribute
>24938	Identifier	Attribute
>24939	Identifier	simpleElements
>24940	Callee	atoi
>24941	Identifier	atoi
>24942	Identifier	l
>24943	Identifier	l
>24944	IdentifierDeclType	int
>24945	IdentifierDeclStatement	 
>24946	IdentifierDecl	is2 ( simpleElements -> Attribute ( \"j\" ) )
>24947	CallExpression	simpleElements -> Attribute ( \"j\" )
>24948	ArgumentList	\"j\"
>24949	Argument	\"j\"
>24950	PrimaryExpression	\"j\"
>24951	Callee	simpleElements -> Attribute
>24952	PtrMemberAccess	simpleElements -> Attribute
>24953	Identifier	Attribute
>24954	Identifier	simpleElements
>24955	Identifier	is2
>24956	IdentifierDeclType	SimpleIStringStream
>24957	Condition	 
>24958	CallExpression	simpleElements -> Attribute ( \"j\" )
>24959	ArgumentList	\"j\"
>24960	Argument	\"j\"
>24961	PrimaryExpression	\"j\"
>24962	Callee	simpleElements -> Attribute
>24963	PtrMemberAccess	simpleElements -> Attribute
>24964	Identifier	Attribute
>24965	Identifier	simpleElements
>24966	IfStatement	if ( simpleElements -> Attribute ( \"i\" ) )
>24967	CompoundStatement	 
>24968	WhileStatement	while ( is2 >> idx )
>24969	CompoundStatement	 
>24970	ExpressionStatement	 
>24971	CallExpression	loadedElements . push_back ( e )
>24972	ArgumentList	e
>24973	Argument	e
>24974	Identifier	e
>24975	Callee	loadedElements . push_back
>24976	MemberAccess	loadedElements . push_back
>24977	Identifier	push_back
>24978	Identifier	loadedElements
>24979	ExpressionStatement	 
>24980	CallExpression	e -> setElementEffectByIndex ( efxIdx )
>24981	ArgumentList	efxIdx
>24982	Argument	efxIdx
>24983	Identifier	efxIdx
>24984	Callee	e -> setElementEffectByIndex
>24985	PtrMemberAccess	e -> setElementEffectByIndex
>24986	Identifier	setElementEffectByIndex
>24987	Identifier	e
>24988	ExpressionStatement	 
>24989	AssignmentExpr	e -> rotation . z = rot
>24990	Identifier	rot
>24991	MemberAccess	e -> rotation . z
>24992	Identifier	z
>24993	PtrMemberAccess	e -> rotation
>24994	Identifier	rotation
>24995	Identifier	e
>24996	ExpressionStatement	 
>24997	AssignmentExpr	e -> scale = Vector ( sz , sz )
>24998	CallExpression	Vector ( sz , sz )
>24999	ArgumentList	sz
>25000	Argument	sz
>25001	Identifier	sz
>25002	Argument	sz
>25003	Identifier	sz
>25004	Callee	Vector
>25005	Identifier	Vector
>25006	PtrMemberAccess	e -> scale
>25007	Identifier	scale
>25008	Identifier	e
>25009	IfStatement	if ( fv )
>25010	ExpressionStatement	 
>25011	CallExpression	e -> flipVertical ( )
>25012	ArgumentList	 
>25013	Callee	e -> flipVertical
>25014	PtrMemberAccess	e -> flipVertical
>25015	Identifier	flipVertical
>25016	Identifier	e
>25017	Condition	 
>25018	Identifier	fv
>25019	IfStatement	if ( fh )
>25020	ExpressionStatement	 
>25021	CallExpression	e -> flipHorizontal ( )
>25022	ArgumentList	 
>25023	Callee	e -> flipHorizontal
>25024	PtrMemberAccess	e -> flipHorizontal
>25025	Identifier	flipHorizontal
>25026	Identifier	e
>25027	Condition	 
>25028	Identifier	fh
>25029	ExpressionStatement	 
>25030	AssignmentExpr	e -> elementFlag = ( ElementFlag ) flags
>25031	CastExpression	( ElementFlag ) flags
>25032	Identifier	flags
>25033	CastTarget	ElementFlag
>25034	PtrMemberAccess	e -> elementFlag
>25035	Identifier	elementFlag
>25036	Identifier	e
>25037	IdentifierDeclStatement	 
>25038	IdentifierDecl	* e = createElement ( idx , Vector ( x , y ) , l )
>25039	AssignmentExpr	* e = createElement ( idx , Vector ( x , y ) , l )
>25040	CallExpression	createElement ( idx , Vector ( x , y ) , l )
>25041	ArgumentList	idx
>25042	Argument	l
>25043	Identifier	l
>25044	Argument	Vector ( x , y )
>25045	CallExpression	Vector ( x , y )
>25046	ArgumentList	x
>25047	Argument	y
>25048	Identifier	y
>25049	Argument	x
>25050	Identifier	x
>25051	Callee	Vector
>25052	Identifier	Vector
>25053	Argument	idx
>25054	Identifier	idx
>25055	Callee	createElement
>25056	Identifier	createElement
>25057	Identifier	e
>25058	Identifier	e
>25059	IdentifierDeclType	Element *
>25060	IfStatement	if ( sz < MIN_SIZE )
>25061	ExpressionStatement	 
>25062	AssignmentExpr	sz = MIN_SIZE
>25063	Identifier	MIN_SIZE
>25064	Identifier	sz
>25065	Condition	 
>25066	RelationalExpression	sz < MIN_SIZE
>25067	Identifier	MIN_SIZE
>25068	Identifier	sz
>25069	ExpressionStatement	 
>25070	ShiftExpression	is2 >> x >> y >> rot >> sz >> fh >> fv >> flags >> efxIdx
>25071	ShiftExpression	x >> y >> rot >> sz >> fh >> fv >> flags >> efxIdx
>25072	ShiftExpression	y >> rot >> sz >> fh >> fv >> flags >> efxIdx
>25073	ShiftExpression	rot >> sz >> fh >> fv >> flags >> efxIdx
>25074	ShiftExpression	sz >> fh >> fv >> flags >> efxIdx
>25075	ShiftExpression	fh >> fv >> flags >> efxIdx
>25076	ShiftExpression	fv >> flags >> efxIdx
>25077	ShiftExpression	flags >> efxIdx
>25078	Identifier	efxIdx
>25079	Identifier	flags
>25080	Identifier	fv
>25081	Identifier	fh
>25082	Identifier	sz
>25083	Identifier	rot
>25084	Identifier	y
>25085	Identifier	x
>25086	Identifier	is2
>25087	IdentifierDeclStatement	 
>25088	IdentifierDecl	efxIdx
>25089	Identifier	efxIdx
>25090	IdentifierDeclType	int
>25091	IdentifierDeclStatement	 
>25092	IdentifierDecl	flags
>25093	Identifier	flags
>25094	IdentifierDeclType	int
>25095	IdentifierDeclStatement	 
>25096	IdentifierDecl	fv
>25097	Identifier	fv
>25098	IdentifierDeclType	int
>25099	IdentifierDecl	fh
>25100	Identifier	fh
>25101	IdentifierDeclType	int
>25102	Condition	 
>25103	ShiftExpression	is2 >> idx
>25104	Identifier	idx
>25105	Identifier	is2
>25106	IdentifierDeclStatement	 
>25107	IdentifierDecl	l = atoi ( simpleElements -> Attribute ( \"l\" ) )
>25108	AssignmentExpr	l = atoi ( simpleElements -> Attribute ( \"l\" ) )
>25109	CallExpression	atoi ( simpleElements -> Attribute ( \"l\" ) )
>25110	ArgumentList	simpleElements -> Attribute ( \"l\" )
>25111	Argument	simpleElements -> Attribute ( \"l\" )
>25112	CallExpression	simpleElements -> Attribute ( \"l\" )
>25113	ArgumentList	\"l\"
>25114	Argument	\"l\"
>25115	PrimaryExpression	\"l\"
>25116	Callee	simpleElements -> Attribute
>25117	PtrMemberAccess	simpleElements -> Attribute
>25118	Identifier	Attribute
>25119	Identifier	simpleElements
>25120	Callee	atoi
>25121	Identifier	atoi
>25122	Identifier	l
>25123	Identifier	l
>25124	IdentifierDeclType	int
>25125	IdentifierDeclStatement	 
>25126	IdentifierDecl	is2 ( simpleElements -> Attribute ( \"i\" ) )
>25127	CallExpression	simpleElements -> Attribute ( \"i\" )
>25128	ArgumentList	\"i\"
>25129	Argument	\"i\"
>25130	PrimaryExpression	\"i\"
>25131	Callee	simpleElements -> Attribute
>25132	PtrMemberAccess	simpleElements -> Attribute
>25133	Identifier	Attribute
>25134	Identifier	simpleElements
>25135	Identifier	is2
>25136	IdentifierDeclType	SimpleIStringStream
>25137	Condition	 
>25138	CallExpression	simpleElements -> Attribute ( \"i\" )
>25139	ArgumentList	\"i\"
>25140	Argument	\"i\"
>25141	PrimaryExpression	\"i\"
>25142	Callee	simpleElements -> Attribute
>25143	PtrMemberAccess	simpleElements -> Attribute
>25144	Identifier	Attribute
>25145	Identifier	simpleElements
>25146	IfStatement	if ( simpleElements -> Attribute ( \"h\" ) )
>25147	CompoundStatement	 
>25148	WhileStatement	while ( is2 >> idx )
>25149	CompoundStatement	 
>25150	ExpressionStatement	 
>25151	CallExpression	loadedElements . push_back ( e )
>25152	ArgumentList	e
>25153	Argument	e
>25154	Identifier	e
>25155	Callee	loadedElements . push_back
>25156	MemberAccess	loadedElements . push_back
>25157	Identifier	push_back
>25158	Identifier	loadedElements
>25159	ExpressionStatement	 
>25160	AssignmentExpr	e -> rotation . z = rot
>25161	Identifier	rot
>25162	MemberAccess	e -> rotation . z
>25163	Identifier	z
>25164	PtrMemberAccess	e -> rotation
>25165	Identifier	rotation
>25166	Identifier	e
>25167	ExpressionStatement	 
>25168	AssignmentExpr	e -> scale = Vector ( sz , sz )
>25169	CallExpression	Vector ( sz , sz )
>25170	ArgumentList	sz
>25171	Argument	sz
>25172	Identifier	sz
>25173	Argument	sz
>25174	Identifier	sz
>25175	Callee	Vector
>25176	Identifier	Vector
>25177	PtrMemberAccess	e -> scale
>25178	Identifier	scale
>25179	Identifier	e
>25180	IfStatement	if ( fv )
>25181	ExpressionStatement	 
>25182	CallExpression	e -> flipVertical ( )
>25183	ArgumentList	 
>25184	Callee	e -> flipVertical
>25185	PtrMemberAccess	e -> flipVertical
>25186	Identifier	flipVertical
>25187	Identifier	e
>25188	Condition	 
>25189	Identifier	fv
>25190	IfStatement	if ( fh )
>25191	ExpressionStatement	 
>25192	CallExpression	e -> flipHorizontal ( )
>25193	ArgumentList	 
>25194	Callee	e -> flipHorizontal
>25195	PtrMemberAccess	e -> flipHorizontal
>25196	Identifier	flipHorizontal
>25197	Identifier	e
>25198	Condition	 
>25199	Identifier	fh
>25200	IfStatement	if ( e -> elementFlag >= EF_MAX || e -> elementFlag < EF_NONE )
>25201	ExpressionStatement	 
>25202	AssignmentExpr	e -> elementFlag = EF_NONE
>25203	Identifier	EF_NONE
>25204	PtrMemberAccess	e -> elementFlag
>25205	Identifier	elementFlag
>25206	Identifier	e
>25207	Condition	 
>25208	OrExpression	e -> elementFlag >= EF_MAX || e -> elementFlag < EF_NONE
>25209	RelationalExpression	e -> elementFlag < EF_NONE
>25210	Identifier	EF_NONE
>25211	PtrMemberAccess	e -> elementFlag
>25212	Identifier	elementFlag
>25213	Identifier	e
>25214	RelationalExpression	e -> elementFlag >= EF_MAX
>25215	Identifier	EF_MAX
>25216	PtrMemberAccess	e -> elementFlag
>25217	Identifier	elementFlag
>25218	Identifier	e
>25219	ExpressionStatement	 
>25220	AssignmentExpr	e -> elementFlag = ( ElementFlag ) flags
>25221	CastExpression	( ElementFlag ) flags
>25222	Identifier	flags
>25223	CastTarget	ElementFlag
>25224	PtrMemberAccess	e -> elementFlag
>25225	Identifier	elementFlag
>25226	Identifier	e
>25227	IdentifierDeclStatement	 
>25228	IdentifierDecl	* e = createElement ( idx , Vector ( x , y ) , l )
>25229	AssignmentExpr	* e = createElement ( idx , Vector ( x , y ) , l )
>25230	CallExpression	createElement ( idx , Vector ( x , y ) , l )
>25231	ArgumentList	idx
>25232	Argument	l
>25233	Identifier	l
>25234	Argument	Vector ( x , y )
>25235	CallExpression	Vector ( x , y )
>25236	ArgumentList	x
>25237	Argument	y
>25238	Identifier	y
>25239	Argument	x
>25240	Identifier	x
>25241	Callee	Vector
>25242	Identifier	Vector
>25243	Argument	idx
>25244	Identifier	idx
>25245	Callee	createElement
>25246	Identifier	createElement
>25247	Identifier	e
>25248	Identifier	e
>25249	IdentifierDeclType	Element *
>25250	ExpressionStatement	 
>25251	ShiftExpression	is2 >> x >> y >> rot >> sz >> fh >> fv >> flags
>25252	ShiftExpression	x >> y >> rot >> sz >> fh >> fv >> flags
>25253	ShiftExpression	y >> rot >> sz >> fh >> fv >> flags
>25254	ShiftExpression	rot >> sz >> fh >> fv >> flags
>25255	ShiftExpression	sz >> fh >> fv >> flags
>25256	ShiftExpression	fh >> fv >> flags
>25257	ShiftExpression	fv >> flags
>25258	Identifier	flags
>25259	Identifier	fv
>25260	Identifier	fh
>25261	Identifier	sz
>25262	Identifier	rot
>25263	Identifier	y
>25264	Identifier	x
>25265	Identifier	is2
>25266	IdentifierDeclStatement	 
>25267	IdentifierDecl	flags
>25268	Identifier	flags
>25269	IdentifierDeclType	int
>25270	IdentifierDeclStatement	 
>25271	IdentifierDecl	fv
>25272	Identifier	fv
>25273	IdentifierDeclType	int
>25274	IdentifierDecl	fh
>25275	Identifier	fh
>25276	IdentifierDeclType	int
>25277	Condition	 
>25278	ShiftExpression	is2 >> idx
>25279	Identifier	idx
>25280	Identifier	is2
>25281	IdentifierDeclStatement	 
>25282	IdentifierDecl	l = atoi ( simpleElements -> Attribute ( \"l\" ) )
>25283	AssignmentExpr	l = atoi ( simpleElements -> Attribute ( \"l\" ) )
>25284	CallExpression	atoi ( simpleElements -> Attribute ( \"l\" ) )
>25285	ArgumentList	simpleElements -> Attribute ( \"l\" )
>25286	Argument	simpleElements -> Attribute ( \"l\" )
>25287	CallExpression	simpleElements -> Attribute ( \"l\" )
>25288	ArgumentList	\"l\"
>25289	Argument	\"l\"
>25290	PrimaryExpression	\"l\"
>25291	Callee	simpleElements -> Attribute
>25292	PtrMemberAccess	simpleElements -> Attribute
>25293	Identifier	Attribute
>25294	Identifier	simpleElements
>25295	Callee	atoi
>25296	Identifier	atoi
>25297	Identifier	l
>25298	Identifier	l
>25299	IdentifierDeclType	int
>25300	IdentifierDeclStatement	 
>25301	IdentifierDecl	is2 ( simpleElements -> Attribute ( \"h\" ) )
>25302	CallExpression	simpleElements -> Attribute ( \"h\" )
>25303	ArgumentList	\"h\"
>25304	Argument	\"h\"
>25305	PrimaryExpression	\"h\"
>25306	Callee	simpleElements -> Attribute
>25307	PtrMemberAccess	simpleElements -> Attribute
>25308	Identifier	Attribute
>25309	Identifier	simpleElements
>25310	Identifier	is2
>25311	IdentifierDeclType	SimpleIStringStream
>25312	Condition	 
>25313	CallExpression	simpleElements -> Attribute ( \"h\" )
>25314	ArgumentList	\"h\"
>25315	Argument	\"h\"
>25316	PrimaryExpression	\"h\"
>25317	Callee	simpleElements -> Attribute
>25318	PtrMemberAccess	simpleElements -> Attribute
>25319	Identifier	Attribute
>25320	Identifier	simpleElements
>25321	IfStatement	if ( simpleElements -> Attribute ( \"g\" ) )
>25322	CompoundStatement	 
>25323	WhileStatement	while ( is2 >> idx )
>25324	CompoundStatement	 
>25325	ExpressionStatement	 
>25326	CallExpression	loadedElements . push_back ( e )
>25327	ArgumentList	e
>25328	Argument	e
>25329	Identifier	e
>25330	Callee	loadedElements . push_back
>25331	MemberAccess	loadedElements . push_back
>25332	Identifier	push_back
>25333	Identifier	loadedElements
>25334	ExpressionStatement	 
>25335	AssignmentExpr	e -> rotation . z = rot
>25336	Identifier	rot
>25337	MemberAccess	e -> rotation . z
>25338	Identifier	z
>25339	PtrMemberAccess	e -> rotation
>25340	Identifier	rotation
>25341	Identifier	e
>25342	ExpressionStatement	 
>25343	AssignmentExpr	e -> scale = Vector ( sz , sz )
>25344	CallExpression	Vector ( sz , sz )
>25345	ArgumentList	sz
>25346	Argument	sz
>25347	Identifier	sz
>25348	Argument	sz
>25349	Identifier	sz
>25350	Callee	Vector
>25351	Identifier	Vector
>25352	PtrMemberAccess	e -> scale
>25353	Identifier	scale
>25354	Identifier	e
>25355	IfStatement	if ( fv )
>25356	ExpressionStatement	 
>25357	CallExpression	e -> flipVertical ( )
>25358	ArgumentList	 
>25359	Callee	e -> flipVertical
>25360	PtrMemberAccess	e -> flipVertical
>25361	Identifier	flipVertical
>25362	Identifier	e
>25363	Condition	 
>25364	Identifier	fv
>25365	IfStatement	if ( fh )
>25366	ExpressionStatement	 
>25367	CallExpression	e -> flipHorizontal ( )
>25368	ArgumentList	 
>25369	Callee	e -> flipHorizontal
>25370	PtrMemberAccess	e -> flipHorizontal
>25371	Identifier	flipHorizontal
>25372	Identifier	e
>25373	Condition	 
>25374	Identifier	fh
>25375	IdentifierDeclStatement	 
>25376	IdentifierDecl	* e = createElement ( idx , Vector ( x , y ) , l )
>25377	AssignmentExpr	* e = createElement ( idx , Vector ( x , y ) , l )
>25378	CallExpression	createElement ( idx , Vector ( x , y ) , l )
>25379	ArgumentList	idx
>25380	Argument	l
>25381	Identifier	l
>25382	Argument	Vector ( x , y )
>25383	CallExpression	Vector ( x , y )
>25384	ArgumentList	x
>25385	Argument	y
>25386	Identifier	y
>25387	Argument	x
>25388	Identifier	x
>25389	Callee	Vector
>25390	Identifier	Vector
>25391	Argument	idx
>25392	Identifier	idx
>25393	Callee	createElement
>25394	Identifier	createElement
>25395	Identifier	e
>25396	Identifier	e
>25397	IdentifierDeclType	Element *
>25398	ExpressionStatement	 
>25399	ShiftExpression	is2 >> x >> y >> rot >> sz >> fh >> fv
>25400	ShiftExpression	x >> y >> rot >> sz >> fh >> fv
>25401	ShiftExpression	y >> rot >> sz >> fh >> fv
>25402	ShiftExpression	rot >> sz >> fh >> fv
>25403	ShiftExpression	sz >> fh >> fv
>25404	ShiftExpression	fh >> fv
>25405	Identifier	fv
>25406	Identifier	fh
>25407	Identifier	sz
>25408	Identifier	rot
>25409	Identifier	y
>25410	Identifier	x
>25411	Identifier	is2
>25412	IdentifierDeclStatement	 
>25413	IdentifierDecl	fv
>25414	Identifier	fv
>25415	IdentifierDeclType	int
>25416	IdentifierDecl	fh
>25417	Identifier	fh
>25418	IdentifierDeclType	int
>25419	Condition	 
>25420	ShiftExpression	is2 >> idx
>25421	Identifier	idx
>25422	Identifier	is2
>25423	IdentifierDeclStatement	 
>25424	IdentifierDecl	l = atoi ( simpleElements -> Attribute ( \"l\" ) )
>25425	AssignmentExpr	l = atoi ( simpleElements -> Attribute ( \"l\" ) )
>25426	CallExpression	atoi ( simpleElements -> Attribute ( \"l\" ) )
>25427	ArgumentList	simpleElements -> Attribute ( \"l\" )
>25428	Argument	simpleElements -> Attribute ( \"l\" )
>25429	CallExpression	simpleElements -> Attribute ( \"l\" )
>25430	ArgumentList	\"l\"
>25431	Argument	\"l\"
>25432	PrimaryExpression	\"l\"
>25433	Callee	simpleElements -> Attribute
>25434	PtrMemberAccess	simpleElements -> Attribute
>25435	Identifier	Attribute
>25436	Identifier	simpleElements
>25437	Callee	atoi
>25438	Identifier	atoi
>25439	Identifier	l
>25440	Identifier	l
>25441	IdentifierDeclType	int
>25442	IdentifierDeclStatement	 
>25443	IdentifierDecl	is2 ( simpleElements -> Attribute ( \"g\" ) )
>25444	CallExpression	simpleElements -> Attribute ( \"g\" )
>25445	ArgumentList	\"g\"
>25446	Argument	\"g\"
>25447	PrimaryExpression	\"g\"
>25448	Callee	simpleElements -> Attribute
>25449	PtrMemberAccess	simpleElements -> Attribute
>25450	Identifier	Attribute
>25451	Identifier	simpleElements
>25452	Identifier	is2
>25453	IdentifierDeclType	SimpleIStringStream
>25454	Condition	 
>25455	CallExpression	simpleElements -> Attribute ( \"g\" )
>25456	ArgumentList	\"g\"
>25457	Argument	\"g\"
>25458	PrimaryExpression	\"g\"
>25459	Callee	simpleElements -> Attribute
>25460	PtrMemberAccess	simpleElements -> Attribute
>25461	Identifier	Attribute
>25462	Identifier	simpleElements
>25463	IfStatement	if ( simpleElements -> Attribute ( \"f\" ) )
>25464	CompoundStatement	 
>25465	WhileStatement	while ( is2 >> idx )
>25466	CompoundStatement	 
>25467	ExpressionStatement	 
>25468	CallExpression	loadedElements . push_back ( e )
>25469	ArgumentList	e
>25470	Argument	e
>25471	Identifier	e
>25472	Callee	loadedElements . push_back
>25473	MemberAccess	loadedElements . push_back
>25474	Identifier	push_back
>25475	Identifier	loadedElements
>25476	ExpressionStatement	 
>25477	AssignmentExpr	e -> rotation . z = rot
>25478	Identifier	rot
>25479	MemberAccess	e -> rotation . z
>25480	Identifier	z
>25481	PtrMemberAccess	e -> rotation
>25482	Identifier	rotation
>25483	Identifier	e
>25484	ExpressionStatement	 
>25485	AssignmentExpr	e -> scale = Vector ( sz , sz )
>25486	CallExpression	Vector ( sz , sz )
>25487	ArgumentList	sz
>25488	Argument	sz
>25489	Identifier	sz
>25490	Argument	sz
>25491	Identifier	sz
>25492	Callee	Vector
>25493	Identifier	Vector
>25494	PtrMemberAccess	e -> scale
>25495	Identifier	scale
>25496	Identifier	e
>25497	IdentifierDeclStatement	 
>25498	IdentifierDecl	* e = createElement ( idx , Vector ( x , y ) , l )
>25499	AssignmentExpr	* e = createElement ( idx , Vector ( x , y ) , l )
>25500	CallExpression	createElement ( idx , Vector ( x , y ) , l )
>25501	ArgumentList	idx
>25502	Argument	l
>25503	Identifier	l
>25504	Argument	Vector ( x , y )
>25505	CallExpression	Vector ( x , y )
>25506	ArgumentList	x
>25507	Argument	y
>25508	Identifier	y
>25509	Argument	x
>25510	Identifier	x
>25511	Callee	Vector
>25512	Identifier	Vector
>25513	Argument	idx
>25514	Identifier	idx
>25515	Callee	createElement
>25516	Identifier	createElement
>25517	Identifier	e
>25518	Identifier	e
>25519	IdentifierDeclType	Element *
>25520	ExpressionStatement	 
>25521	ShiftExpression	is2 >> x >> y >> rot >> sz
>25522	ShiftExpression	x >> y >> rot >> sz
>25523	ShiftExpression	y >> rot >> sz
>25524	ShiftExpression	rot >> sz
>25525	Identifier	sz
>25526	Identifier	rot
>25527	Identifier	y
>25528	Identifier	x
>25529	Identifier	is2
>25530	Condition	 
>25531	ShiftExpression	is2 >> idx
>25532	Identifier	idx
>25533	Identifier	is2
>25534	IdentifierDeclStatement	 
>25535	IdentifierDecl	l = atoi ( simpleElements -> Attribute ( \"l\" ) )
>25536	AssignmentExpr	l = atoi ( simpleElements -> Attribute ( \"l\" ) )
>25537	CallExpression	atoi ( simpleElements -> Attribute ( \"l\" ) )
>25538	ArgumentList	simpleElements -> Attribute ( \"l\" )
>25539	Argument	simpleElements -> Attribute ( \"l\" )
>25540	CallExpression	simpleElements -> Attribute ( \"l\" )
>25541	ArgumentList	\"l\"
>25542	Argument	\"l\"
>25543	PrimaryExpression	\"l\"
>25544	Callee	simpleElements -> Attribute
>25545	PtrMemberAccess	simpleElements -> Attribute
>25546	Identifier	Attribute
>25547	Identifier	simpleElements
>25548	Callee	atoi
>25549	Identifier	atoi
>25550	Identifier	l
>25551	Identifier	l
>25552	IdentifierDeclType	int
>25553	IdentifierDeclStatement	 
>25554	IdentifierDecl	is2 ( simpleElements -> Attribute ( \"f\" ) )
>25555	CallExpression	simpleElements -> Attribute ( \"f\" )
>25556	ArgumentList	\"f\"
>25557	Argument	\"f\"
>25558	PrimaryExpression	\"f\"
>25559	Callee	simpleElements -> Attribute
>25560	PtrMemberAccess	simpleElements -> Attribute
>25561	Identifier	Attribute
>25562	Identifier	simpleElements
>25563	Identifier	is2
>25564	IdentifierDeclType	SimpleIStringStream
>25565	Condition	 
>25566	CallExpression	simpleElements -> Attribute ( \"f\" )
>25567	ArgumentList	\"f\"
>25568	Argument	\"f\"
>25569	PrimaryExpression	\"f\"
>25570	Callee	simpleElements -> Attribute
>25571	PtrMemberAccess	simpleElements -> Attribute
>25572	Identifier	Attribute
>25573	Identifier	simpleElements
>25574	IfStatement	if ( simpleElements -> Attribute ( \"e\" ) )
>25575	CompoundStatement	 
>25576	WhileStatement	while ( is2 >> idx )
>25577	CompoundStatement	 
>25578	ExpressionStatement	 
>25579	CallExpression	loadedElements . push_back ( e )
>25580	ArgumentList	e
>25581	Argument	e
>25582	Identifier	e
>25583	Callee	loadedElements . push_back
>25584	MemberAccess	loadedElements . push_back
>25585	Identifier	push_back
>25586	Identifier	loadedElements
>25587	ExpressionStatement	 
>25588	AssignmentExpr	e -> rotation . z = rot
>25589	Identifier	rot
>25590	MemberAccess	e -> rotation . z
>25591	Identifier	z
>25592	PtrMemberAccess	e -> rotation
>25593	Identifier	rotation
>25594	Identifier	e
>25595	IdentifierDeclStatement	 
>25596	IdentifierDecl	* e = createElement ( idx , Vector ( x , y ) , l )
>25597	AssignmentExpr	* e = createElement ( idx , Vector ( x , y ) , l )
>25598	CallExpression	createElement ( idx , Vector ( x , y ) , l )
>25599	ArgumentList	idx
>25600	Argument	l
>25601	Identifier	l
>25602	Argument	Vector ( x , y )
>25603	CallExpression	Vector ( x , y )
>25604	ArgumentList	x
>25605	Argument	y
>25606	Identifier	y
>25607	Argument	x
>25608	Identifier	x
>25609	Callee	Vector
>25610	Identifier	Vector
>25611	Argument	idx
>25612	Identifier	idx
>25613	Callee	createElement
>25614	Identifier	createElement
>25615	Identifier	e
>25616	Identifier	e
>25617	IdentifierDeclType	Element *
>25618	ExpressionStatement	 
>25619	ShiftExpression	is2 >> x >> y >> rot
>25620	ShiftExpression	x >> y >> rot
>25621	ShiftExpression	y >> rot
>25622	Identifier	rot
>25623	Identifier	y
>25624	Identifier	x
>25625	Identifier	is2
>25626	Condition	 
>25627	ShiftExpression	is2 >> idx
>25628	Identifier	idx
>25629	Identifier	is2
>25630	IdentifierDeclStatement	 
>25631	IdentifierDecl	l = atoi ( simpleElements -> Attribute ( \"l\" ) )
>25632	AssignmentExpr	l = atoi ( simpleElements -> Attribute ( \"l\" ) )
>25633	CallExpression	atoi ( simpleElements -> Attribute ( \"l\" ) )
>25634	ArgumentList	simpleElements -> Attribute ( \"l\" )
>25635	Argument	simpleElements -> Attribute ( \"l\" )
>25636	CallExpression	simpleElements -> Attribute ( \"l\" )
>25637	ArgumentList	\"l\"
>25638	Argument	\"l\"
>25639	PrimaryExpression	\"l\"
>25640	Callee	simpleElements -> Attribute
>25641	PtrMemberAccess	simpleElements -> Attribute
>25642	Identifier	Attribute
>25643	Identifier	simpleElements
>25644	Callee	atoi
>25645	Identifier	atoi
>25646	Identifier	l
>25647	Identifier	l
>25648	IdentifierDeclType	int
>25649	IdentifierDeclStatement	 
>25650	IdentifierDecl	is2 ( simpleElements -> Attribute ( \"e\" ) )
>25651	CallExpression	simpleElements -> Attribute ( \"e\" )
>25652	ArgumentList	\"e\"
>25653	Argument	\"e\"
>25654	PrimaryExpression	\"e\"
>25655	Callee	simpleElements -> Attribute
>25656	PtrMemberAccess	simpleElements -> Attribute
>25657	Identifier	Attribute
>25658	Identifier	simpleElements
>25659	Identifier	is2
>25660	IdentifierDeclType	SimpleIStringStream
>25661	Condition	 
>25662	CallExpression	simpleElements -> Attribute ( \"e\" )
>25663	ArgumentList	\"e\"
>25664	Argument	\"e\"
>25665	PrimaryExpression	\"e\"
>25666	Callee	simpleElements -> Attribute
>25667	PtrMemberAccess	simpleElements -> Attribute
>25668	Identifier	Attribute
>25669	Identifier	simpleElements
>25670	IfStatement	if ( simpleElements -> Attribute ( \"d\" ) )
>25671	CompoundStatement	 
>25672	WhileStatement	while ( is >> idx )
>25673	CompoundStatement	 
>25674	ExpressionStatement	 
>25675	CallExpression	loadedElements . push_back ( e )
>25676	ArgumentList	e
>25677	Argument	e
>25678	Identifier	e
>25679	Callee	loadedElements . push_back
>25680	MemberAccess	loadedElements . push_back
>25681	Identifier	push_back
>25682	Identifier	loadedElements
>25683	ExpressionStatement	 
>25684	AssignmentExpr	e -> rotation . z = rot
>25685	Identifier	rot
>25686	MemberAccess	e -> rotation . z
>25687	Identifier	z
>25688	PtrMemberAccess	e -> rotation
>25689	Identifier	rotation
>25690	Identifier	e
>25691	IdentifierDeclStatement	 
>25692	IdentifierDecl	* e = createElement ( idx , Vector ( x , y ) , 4 )
>25693	AssignmentExpr	* e = createElement ( idx , Vector ( x , y ) , 4 )
>25694	CallExpression	createElement ( idx , Vector ( x , y ) , 4 )
>25695	ArgumentList	idx
>25696	Argument	4
>25697	PrimaryExpression	4
>25698	Argument	Vector ( x , y )
>25699	CallExpression	Vector ( x , y )
>25700	ArgumentList	x
>25701	Argument	y
>25702	Identifier	y
>25703	Argument	x
>25704	Identifier	x
>25705	Callee	Vector
>25706	Identifier	Vector
>25707	Argument	idx
>25708	Identifier	idx
>25709	Callee	createElement
>25710	Identifier	createElement
>25711	Identifier	e
>25712	Identifier	e
>25713	IdentifierDeclType	Element *
>25714	ExpressionStatement	 
>25715	ShiftExpression	is >> x >> y >> rot
>25716	ShiftExpression	x >> y >> rot
>25717	ShiftExpression	y >> rot
>25718	Identifier	rot
>25719	Identifier	y
>25720	Identifier	x
>25721	Identifier	is
>25722	Condition	 
>25723	ShiftExpression	is >> idx
>25724	Identifier	idx
>25725	Identifier	is
>25726	IdentifierDeclStatement	 
>25727	IdentifierDecl	is ( simpleElements -> Attribute ( \"d\" ) )
>25728	CallExpression	simpleElements -> Attribute ( \"d\" )
>25729	ArgumentList	\"d\"
>25730	Argument	\"d\"
>25731	PrimaryExpression	\"d\"
>25732	Callee	simpleElements -> Attribute
>25733	PtrMemberAccess	simpleElements -> Attribute
>25734	Identifier	Attribute
>25735	Identifier	simpleElements
>25736	Identifier	is
>25737	IdentifierDeclType	SimpleIStringStream
>25738	Condition	 
>25739	CallExpression	simpleElements -> Attribute ( \"d\" )
>25740	ArgumentList	\"d\"
>25741	Argument	\"d\"
>25742	PrimaryExpression	\"d\"
>25743	Callee	simpleElements -> Attribute
>25744	PtrMemberAccess	simpleElements -> Attribute
>25745	Identifier	Attribute
>25746	Identifier	simpleElements
>25747	ExpressionStatement	 
>25748	CallExpression	loadedElements . clear ( )
>25749	ArgumentList	 
>25750	Callee	loadedElements . clear
>25751	MemberAccess	loadedElements . clear
>25752	Identifier	clear
>25753	Identifier	loadedElements
>25754	IdentifierDeclStatement	 
>25755	IdentifierDecl	sz2
>25756	Identifier	sz2
>25757	IdentifierDeclType	float
>25758	IdentifierDecl	sz
>25759	Identifier	sz
>25760	IdentifierDeclType	float
>25761	IdentifierDeclStatement	 
>25762	IdentifierDecl	rot
>25763	Identifier	rot
>25764	IdentifierDeclType	int
>25765	IdentifierDecl	y
>25766	Identifier	y
>25767	IdentifierDeclType	int
>25768	IdentifierDecl	x
>25769	Identifier	x
>25770	IdentifierDeclType	int
>25771	IdentifierDecl	idx
>25772	Identifier	idx
>25773	IdentifierDeclType	int
>25774	Condition	 
>25775	Identifier	simpleElements
>25776	IdentifierDeclStatement	 
>25777	IdentifierDecl	* simpleElements = doc . FirstChildElement ( \"SE\" )
>25778	AssignmentExpr	* simpleElements = doc . FirstChildElement ( \"SE\" )
>25779	CallExpression	doc . FirstChildElement ( \"SE\" )
>25780	ArgumentList	\"SE\"
>25781	Argument	\"SE\"
>25782	PrimaryExpression	\"SE\"
>25783	Callee	doc . FirstChildElement
>25784	MemberAccess	doc . FirstChildElement
>25785	Identifier	FirstChildElement
>25786	Identifier	doc
>25787	Identifier	simpleElements
>25788	Identifier	simpleElements
>25789	IdentifierDeclType	XMLElement *
>25790	ExpressionStatement	 
>25791	CallExpression	loadedElements . reserve ( 200 )
>25792	ArgumentList	200
>25793	Argument	200
>25794	PrimaryExpression	200
>25795	Callee	loadedElements . reserve
>25796	MemberAccess	loadedElements . reserve
>25797	Identifier	reserve
>25798	Identifier	loadedElements
>25799	IdentifierDeclStatement	 
>25800	IdentifierDecl	loadedElements
>25801	Identifier	loadedElements
>25802	IdentifierDeclType	std 
>25803	WhileStatement	while ( schoolFish )
>25804	CompoundStatement	 
>25805	ExpressionStatement	 
>25806	CallExpression	saveFile -> InsertEndChild ( newSF )
>25807	ArgumentList	newSF
>25808	Argument	newSF
>25809	Identifier	newSF
>25810	Callee	saveFile -> InsertEndChild
>25811	PtrMemberAccess	saveFile -> InsertEndChild
>25812	Identifier	InsertEndChild
>25813	Identifier	saveFile
>25814	IfStatement	if ( size != 1 )
>25815	ExpressionStatement	 
>25816	CallExpression	newSF -> SetAttribute ( \"size\" , size )
>25817	ArgumentList	\"size\"
>25818	Argument	size
>25819	Identifier	size
>25820	Argument	\"size\"
>25821	PrimaryExpression	\"size\"
>25822	Callee	newSF -> SetAttribute
>25823	PtrMemberAccess	newSF -> SetAttribute
>25824	Identifier	SetAttribute
>25825	Identifier	newSF
>25826	Condition	 
>25827	EqualityExpression	size != 1
>25828	PrimaryExpression	1
>25829	Identifier	size
>25830	IfStatement	if ( ! gfx . empty ( ) )
>25831	ExpressionStatement	 
>25832	CallExpression	newSF -> SetAttribute ( \"gfx\" , gfx . c_str ( ) )
>25833	ArgumentList	\"gfx\"
>25834	Argument	gfx . c_str ( )
>25835	CallExpression	gfx . c_str ( )
>25836	ArgumentList	 
>25837	Callee	gfx . c_str
>25838	MemberAccess	gfx . c_str
>25839	Identifier	c_str
>25840	Identifier	gfx
>25841	Argument	\"gfx\"
>25842	PrimaryExpression	\"gfx\"
>25843	Callee	newSF -> SetAttribute
>25844	PtrMemberAccess	newSF -> SetAttribute
>25845	Identifier	SetAttribute
>25846	Identifier	newSF
>25847	Condition	 
>25848	UnaryOp	! gfx . empty ( )
>25849	CallExpression	gfx . empty ( )
>25850	ArgumentList	 
>25851	Callee	gfx . empty
>25852	MemberAccess	gfx . empty
>25853	Identifier	empty
>25854	Identifier	gfx
>25855	UnaryOperator	!
>25856	IfStatement	if ( layer != 0 )
>25857	ExpressionStatement	 
>25858	CallExpression	newSF -> SetAttribute ( \"layer\" , layer )
>25859	ArgumentList	\"layer\"
>25860	Argument	layer
>25861	Identifier	layer
>25862	Argument	\"layer\"
>25863	PrimaryExpression	\"layer\"
>25864	Callee	newSF -> SetAttribute
>25865	PtrMemberAccess	newSF -> SetAttribute
>25866	Identifier	SetAttribute
>25867	Identifier	newSF
>25868	Condition	 
>25869	EqualityExpression	layer != 0
>25870	PrimaryExpression	0
>25871	Identifier	layer
>25872	IfStatement	if ( maxSpeed != 0 )
>25873	ExpressionStatement	 
>25874	CallExpression	newSF -> SetAttribute ( \"maxSpeed\" , maxSpeed )
>25875	ArgumentList	\"maxSpeed\"
>25876	Argument	maxSpeed
>25877	Identifier	maxSpeed
>25878	Argument	\"maxSpeed\"
>25879	PrimaryExpression	\"maxSpeed\"
>25880	Callee	newSF -> SetAttribute
>25881	PtrMemberAccess	newSF -> SetAttribute
>25882	Identifier	SetAttribute
>25883	Identifier	newSF
>25884	Condition	 
>25885	EqualityExpression	maxSpeed != 0
>25886	PrimaryExpression	0
>25887	Identifier	maxSpeed
>25888	IfStatement	if ( range != 0 )
>25889	ExpressionStatement	 
>25890	CallExpression	newSF -> SetAttribute ( \"range\" , range )
>25891	ArgumentList	\"range\"
>25892	Argument	range
>25893	Identifier	range
>25894	Argument	\"range\"
>25895	PrimaryExpression	\"range\"
>25896	Callee	newSF -> SetAttribute
>25897	PtrMemberAccess	newSF -> SetAttribute
>25898	Identifier	SetAttribute
>25899	Identifier	newSF
>25900	Condition	 
>25901	EqualityExpression	range != 0
>25902	PrimaryExpression	0
>25903	Identifier	range
>25904	ExpressionStatement	 
>25905	CallExpression	newSF -> SetAttribute ( \"num\" , num )
>25906	ArgumentList	\"num\"
>25907	Argument	num
>25908	Identifier	num
>25909	Argument	\"num\"
>25910	PrimaryExpression	\"num\"
>25911	Callee	newSF -> SetAttribute
>25912	PtrMemberAccess	newSF -> SetAttribute
>25913	Identifier	SetAttribute
>25914	Identifier	newSF
>25915	ExpressionStatement	 
>25916	CallExpression	newSF -> SetAttribute ( \"id\" , id )
>25917	ArgumentList	\"id\"
>25918	Argument	id
>25919	Identifier	id
>25920	Argument	\"id\"
>25921	PrimaryExpression	\"id\"
>25922	Callee	newSF -> SetAttribute
>25923	PtrMemberAccess	newSF -> SetAttribute
>25924	Identifier	SetAttribute
>25925	Identifier	newSF
>25926	ExpressionStatement	 
>25927	CallExpression	newSF -> SetAttribute ( \"y\" , y )
>25928	ArgumentList	\"y\"
>25929	Argument	y
>25930	Identifier	y
>25931	Argument	\"y\"
>25932	PrimaryExpression	\"y\"
>25933	Callee	newSF -> SetAttribute
>25934	PtrMemberAccess	newSF -> SetAttribute
>25935	Identifier	SetAttribute
>25936	Identifier	newSF
>25937	ExpressionStatement	 
>25938	CallExpression	newSF -> SetAttribute ( \"x\" , x )
>25939	ArgumentList	\"x\"
>25940	Argument	x
>25941	Identifier	x
>25942	Argument	\"x\"
>25943	PrimaryExpression	\"x\"
>25944	Callee	newSF -> SetAttribute
>25945	PtrMemberAccess	newSF -> SetAttribute
>25946	Identifier	SetAttribute
>25947	Identifier	newSF
>25948	IdentifierDeclStatement	 
>25949	IdentifierDecl	* newSF = saveFile -> NewElement ( \"SchoolFish\" )
>25950	AssignmentExpr	* newSF = saveFile -> NewElement ( \"SchoolFish\" )
>25951	CallExpression	saveFile -> NewElement ( \"SchoolFish\" )
>25952	ArgumentList	\"SchoolFish\"
>25953	Argument	\"SchoolFish\"
>25954	PrimaryExpression	\"SchoolFish\"
>25955	Callee	saveFile -> NewElement
>25956	PtrMemberAccess	saveFile -> NewElement
>25957	Identifier	NewElement
>25958	Identifier	saveFile
>25959	Identifier	newSF
>25960	Identifier	newSF
>25961	IdentifierDeclType	XMLElement *
>25962	ExpressionStatement	 
>25963	AssignmentExpr	schoolFish = schoolFish -> NextSiblingElement ( \"SchoolFish\" )
>25964	CallExpression	schoolFish -> NextSiblingElement ( \"SchoolFish\" )
>25965	ArgumentList	\"SchoolFish\"
>25966	Argument	\"SchoolFish\"
>25967	PrimaryExpression	\"SchoolFish\"
>25968	Callee	schoolFish -> NextSiblingElement
>25969	PtrMemberAccess	schoolFish -> NextSiblingElement
>25970	Identifier	NextSiblingElement
>25971	Identifier	schoolFish
>25972	Identifier	schoolFish
>25973	ForStatement	for ( int i = 0 ; i < num ; i ++ )
>25974	CompoundStatement	 
>25975	ExpressionStatement	 
>25976	AssignmentExpr	s -> scale *= size
>25977	Identifier	size
>25978	PtrMemberAccess	s -> scale
>25979	Identifier	scale
>25980	Identifier	s
>25981	ExpressionStatement	 
>25982	CallExpression	s -> applyLayer ( layer )
>25983	ArgumentList	layer
>25984	Argument	layer
>25985	Identifier	layer
>25986	Callee	s -> applyLayer
>25987	PtrMemberAccess	s -> applyLayer
>25988	Identifier	applyLayer
>25989	Identifier	s
>25990	IfStatement	if ( layer == - 3 )
>25991	ElseStatement	else
>25992	CompoundStatement	 
>25993	IfStatement	if ( chance ( 50 ) )
>25994	ElseStatement	else
>25995	ExpressionStatement	 
>25996	CallExpression	addRenderObject ( s , LR_ENTITIES )
>25997	ArgumentList	s
>25998	Argument	LR_ENTITIES
>25999	Identifier	LR_ENTITIES
>26000	Argument	s
>26001	Identifier	s
>26002	Callee	addRenderObject
>26003	Identifier	addRenderObject
>26004	ExpressionStatement	 
>26005	CallExpression	addRenderObject ( s , LR_ENTITIES2 )
>26006	ArgumentList	s
>26007	Argument	LR_ENTITIES2
>26008	Identifier	LR_ENTITIES2
>26009	Argument	s
>26010	Identifier	s
>26011	Callee	addRenderObject
>26012	Identifier	addRenderObject
>26013	Condition	 
>26014	CallExpression	chance ( 50 )
>26015	ArgumentList	50
>26016	Argument	50
>26017	PrimaryExpression	50
>26018	Callee	chance
>26019	Identifier	chance
>26020	CompoundStatement	 
>26021	ExpressionStatement	 
>26022	CallExpression	addRenderObject ( s , LR_ELEMENTS11 )
>26023	ArgumentList	s
>26024	Argument	LR_ELEMENTS11
>26025	Identifier	LR_ELEMENTS11
>26026	Argument	s
>26027	Identifier	s
>26028	Callee	addRenderObject
>26029	Identifier	addRenderObject
>26030	Condition	 
>26031	EqualityExpression	layer == - 3
>26032	UnaryOp	- 3
>26033	PrimaryExpression	3
>26034	UnaryOperator	-
>26035	Identifier	layer
>26036	CompoundStatement	 
>26037	ExpressionStatement	 
>26038	CallExpression	debugLog ( os . str ( ) )
>26039	ArgumentList	os . str ( )
>26040	Argument	os . str ( )
>26041	CallExpression	os . str ( )
>26042	ArgumentList	 
>26043	Callee	os . str
>26044	MemberAccess	os . str
>26045	Identifier	str
>26046	Identifier	os
>26047	Callee	debugLog
>26048	Identifier	debugLog
>26049	ExpressionStatement	 
>26050	ShiftExpression	os << \"adding schoolfish (\" << s -> position . x << \", \" << s -> position . y << \")\"
>26051	ShiftExpression	\"adding schoolfish (\" << s -> position . x << \", \" << s -> position . y << \")\"
>26052	ShiftExpression	s -> position . x << \", \" << s -> position . y << \")\"
>26053	ShiftExpression	\", \" << s -> position . y << \")\"
>26054	ShiftExpression	s -> position . y << \")\"
>26055	PrimaryExpression	\")\"
>26056	MemberAccess	s -> position . y
>26057	Identifier	y
>26058	PtrMemberAccess	s -> position
>26059	Identifier	position
>26060	Identifier	s
>26061	PrimaryExpression	\", \"
>26062	MemberAccess	s -> position . x
>26063	Identifier	x
>26064	PtrMemberAccess	s -> position
>26065	Identifier	position
>26066	Identifier	s
>26067	PrimaryExpression	\"adding schoolfish (\"
>26068	Identifier	os
>26069	IdentifierDeclStatement	 
>26070	IdentifierDecl	os
>26071	Identifier	os
>26072	IdentifierDeclType	std 
>26073	IfStatement	if ( maxSpeed != 0 )
>26074	ExpressionStatement	 
>26075	CallExpression	s -> setMaxSpeed ( maxSpeed )
>26076	ArgumentList	maxSpeed
>26077	Argument	maxSpeed
>26078	Identifier	maxSpeed
>26079	Callee	s -> setMaxSpeed
>26080	PtrMemberAccess	s -> setMaxSpeed
>26081	Identifier	setMaxSpeed
>26082	Identifier	s
>26083	Condition	 
>26084	EqualityExpression	maxSpeed != 0
>26085	PrimaryExpression	0
>26086	Identifier	maxSpeed
>26087	IfStatement	if ( range != 0 )
>26088	ExpressionStatement	 
>26089	AssignmentExpr	s -> range = range
>26090	Identifier	range
>26091	PtrMemberAccess	s -> range
>26092	Identifier	range
>26093	Identifier	s
>26094	Condition	 
>26095	EqualityExpression	range != 0
>26096	PrimaryExpression	0
>26097	Identifier	range
>26098	ExpressionStatement	 
>26099	CallExpression	s -> addToFlock ( id )
>26100	ArgumentList	id
>26101	Argument	id
>26102	Identifier	id
>26103	Callee	s -> addToFlock
>26104	PtrMemberAccess	s -> addToFlock
>26105	Identifier	addToFlock
>26106	Identifier	s
>26107	ExpressionStatement	 
>26108	AssignmentExpr	s -> startPos = s -> position
>26109	PtrMemberAccess	s -> position
>26110	Identifier	position
>26111	Identifier	s
>26112	PtrMemberAccess	s -> startPos
>26113	Identifier	startPos
>26114	Identifier	s
>26115	ExpressionStatement	 
>26116	AssignmentExpr	s -> position = Vector ( x + i * 5 , y + i * 5 )
>26117	CallExpression	Vector ( x + i * 5 , y + i * 5 )
>26118	ArgumentList	x + i * 5
>26119	Argument	y + i * 5
>26120	AdditiveExpression	y + i * 5
>26121	MultiplicativeExpression	i * 5
>26122	PrimaryExpression	5
>26123	Identifier	i
>26124	Identifier	y
>26125	Argument	x + i * 5
>26126	AdditiveExpression	x + i * 5
>26127	MultiplicativeExpression	i * 5
>26128	PrimaryExpression	5
>26129	Identifier	i
>26130	Identifier	x
>26131	Callee	Vector
>26132	Identifier	Vector
>26133	PtrMemberAccess	s -> position
>26134	Identifier	position
>26135	Identifier	s
>26136	IdentifierDeclStatement	 
>26137	IdentifierDecl	* s = new SchoolFish ( texture )
>26138	AssignmentExpr	* s = new SchoolFish ( texture )
>26139	Identifier	texture
>26140	Identifier	texture
>26141	Identifier	s
>26142	IdentifierDeclType	SchoolFish *
>26143	IncDecOp	 
>26144	IncDec	++
>26145	Identifier	i
>26146	Condition	 
>26147	RelationalExpression	i < num
>26148	Identifier	num
>26149	Identifier	i
>26150	ForInit	 
>26151	IdentifierDeclStatement	int i = 0 ;
>26152	IdentifierDecl	i = 0
>26153	AssignmentExpr	i = 0
>26154	PrimaryExpression	0
>26155	Identifier	i
>26156	Identifier	i
>26157	IdentifierDeclType	int
>26158	IfStatement	if ( schoolFish -> Attribute ( \"range\" ) )
>26159	ExpressionStatement	 
>26160	AssignmentExpr	range = atoi ( schoolFish -> Attribute ( \"range\" ) )
>26161	CallExpression	atoi ( schoolFish -> Attribute ( \"range\" ) )
>26162	ArgumentList	schoolFish -> Attribute ( \"range\" )
>26163	Argument	schoolFish -> Attribute ( \"range\" )
>26164	CallExpression	schoolFish -> Attribute ( \"range\" )
>26165	ArgumentList	\"range\"
>26166	Argument	\"range\"
>26167	PrimaryExpression	\"range\"
>26168	Callee	schoolFish -> Attribute
>26169	PtrMemberAccess	schoolFish -> Attribute
>26170	Identifier	Attribute
>26171	Identifier	schoolFish
>26172	Callee	atoi
>26173	Identifier	atoi
>26174	Identifier	range
>26175	Condition	 
>26176	CallExpression	schoolFish -> Attribute ( \"range\" )
>26177	ArgumentList	\"range\"
>26178	Argument	\"range\"
>26179	PrimaryExpression	\"range\"
>26180	Callee	schoolFish -> Attribute
>26181	PtrMemberAccess	schoolFish -> Attribute
>26182	Identifier	Attribute
>26183	Identifier	schoolFish
>26184	IdentifierDeclStatement	 
>26185	IdentifierDecl	range = 0
>26186	AssignmentExpr	range = 0
>26187	PrimaryExpression	0
>26188	Identifier	range
>26189	Identifier	range
>26190	IdentifierDeclType	int
>26191	IfStatement	if ( schoolFish -> Attribute ( \"maxSpeed\" ) )
>26192	ExpressionStatement	 
>26193	AssignmentExpr	maxSpeed = atoi ( schoolFish -> Attribute ( \"maxSpeed\" ) )
>26194	CallExpression	atoi ( schoolFish -> Attribute ( \"maxSpeed\" ) )
>26195	ArgumentList	schoolFish -> Attribute ( \"maxSpeed\" )
>26196	Argument	schoolFish -> Attribute ( \"maxSpeed\" )
>26197	CallExpression	schoolFish -> Attribute ( \"maxSpeed\" )
>26198	ArgumentList	\"maxSpeed\"
>26199	Argument	\"maxSpeed\"
>26200	PrimaryExpression	\"maxSpeed\"
>26201	Callee	schoolFish -> Attribute
>26202	PtrMemberAccess	schoolFish -> Attribute
>26203	Identifier	Attribute
>26204	Identifier	schoolFish
>26205	Callee	atoi
>26206	Identifier	atoi
>26207	Identifier	maxSpeed
>26208	Condition	 
>26209	CallExpression	schoolFish -> Attribute ( \"maxSpeed\" )
>26210	ArgumentList	\"maxSpeed\"
>26211	Argument	\"maxSpeed\"
>26212	PrimaryExpression	\"maxSpeed\"
>26213	Callee	schoolFish -> Attribute
>26214	PtrMemberAccess	schoolFish -> Attribute
>26215	Identifier	Attribute
>26216	Identifier	schoolFish
>26217	IdentifierDeclStatement	 
>26218	IdentifierDecl	maxSpeed = 0
>26219	AssignmentExpr	maxSpeed = 0
>26220	PrimaryExpression	0
>26221	Identifier	maxSpeed
>26222	Identifier	maxSpeed
>26223	IdentifierDeclType	int
>26224	IfStatement	if ( schoolFish -> Attribute ( \"size\" ) )
>26225	CompoundStatement	 
>26226	ExpressionStatement	 
>26227	ShiftExpression	is >> size
>26228	Identifier	size
>26229	Identifier	is
>26230	IdentifierDeclStatement	 
>26231	IdentifierDecl	is ( schoolFish -> Attribute ( \"size\" ) )
>26232	CallExpression	schoolFish -> Attribute ( \"size\" )
>26233	ArgumentList	\"size\"
>26234	Argument	\"size\"
>26235	PrimaryExpression	\"size\"
>26236	Callee	schoolFish -> Attribute
>26237	PtrMemberAccess	schoolFish -> Attribute
>26238	Identifier	Attribute
>26239	Identifier	schoolFish
>26240	Identifier	is
>26241	IdentifierDeclType	SimpleIStringStream
>26242	Condition	 
>26243	CallExpression	schoolFish -> Attribute ( \"size\" )
>26244	ArgumentList	\"size\"
>26245	Argument	\"size\"
>26246	PrimaryExpression	\"size\"
>26247	Callee	schoolFish -> Attribute
>26248	PtrMemberAccess	schoolFish -> Attribute
>26249	Identifier	Attribute
>26250	Identifier	schoolFish
>26251	IdentifierDeclStatement	 
>26252	IdentifierDecl	size = 1
>26253	AssignmentExpr	size = 1
>26254	PrimaryExpression	1
>26255	Identifier	size
>26256	Identifier	size
>26257	IdentifierDeclType	float
>26258	IfStatement	if ( schoolFish -> Attribute ( \"layer\" ) )
>26259	CompoundStatement	 
>26260	ExpressionStatement	 
>26261	AssignmentExpr	layer = atoi ( schoolFish -> Attribute ( \"layer\" ) )
>26262	CallExpression	atoi ( schoolFish -> Attribute ( \"layer\" ) )
>26263	ArgumentList	schoolFish -> Attribute ( \"layer\" )
>26264	Argument	schoolFish -> Attribute ( \"layer\" )
>26265	CallExpression	schoolFish -> Attribute ( \"layer\" )
>26266	ArgumentList	\"layer\"
>26267	Argument	\"layer\"
>26268	PrimaryExpression	\"layer\"
>26269	Callee	schoolFish -> Attribute
>26270	PtrMemberAccess	schoolFish -> Attribute
>26271	Identifier	Attribute
>26272	Identifier	schoolFish
>26273	Callee	atoi
>26274	Identifier	atoi
>26275	Identifier	layer
>26276	Condition	 
>26277	CallExpression	schoolFish -> Attribute ( \"layer\" )
>26278	ArgumentList	\"layer\"
>26279	Argument	\"layer\"
>26280	PrimaryExpression	\"layer\"
>26281	Callee	schoolFish -> Attribute
>26282	PtrMemberAccess	schoolFish -> Attribute
>26283	Identifier	Attribute
>26284	Identifier	schoolFish
>26285	IdentifierDeclStatement	 
>26286	IdentifierDecl	layer = 0
>26287	AssignmentExpr	layer = 0
>26288	PrimaryExpression	0
>26289	Identifier	layer
>26290	Identifier	layer
>26291	IdentifierDeclType	int
>26292	IfStatement	if ( schoolFish -> Attribute ( \"gfx\" ) )
>26293	CompoundStatement	 
>26294	ExpressionStatement	 
>26295	AssignmentExpr	texture = gfx
>26296	Identifier	gfx
>26297	Identifier	texture
>26298	ExpressionStatement	 
>26299	AssignmentExpr	gfx = schoolFish -> Attribute ( \"gfx\" )
>26300	CallExpression	schoolFish -> Attribute ( \"gfx\" )
>26301	ArgumentList	\"gfx\"
>26302	Argument	\"gfx\"
>26303	PrimaryExpression	\"gfx\"
>26304	Callee	schoolFish -> Attribute
>26305	PtrMemberAccess	schoolFish -> Attribute
>26306	Identifier	Attribute
>26307	Identifier	schoolFish
>26308	Identifier	gfx
>26309	Condition	 
>26310	CallExpression	schoolFish -> Attribute ( \"gfx\" )
>26311	ArgumentList	\"gfx\"
>26312	Argument	\"gfx\"
>26313	PrimaryExpression	\"gfx\"
>26314	Callee	schoolFish -> Attribute
>26315	PtrMemberAccess	schoolFish -> Attribute
>26316	Identifier	Attribute
>26317	Identifier	schoolFish
>26318	IdentifierDeclStatement	 
>26319	IdentifierDecl	texture = \"flock-0001\"
>26320	AssignmentExpr	texture = \"flock-0001\"
>26321	PrimaryExpression	\"flock-0001\"
>26322	Identifier	texture
>26323	Identifier	texture
>26324	IdentifierDeclType	std 
>26325	IdentifierDecl	gfx
>26326	Identifier	gfx
>26327	IdentifierDeclType	std 
>26328	ExpressionStatement	 
>26329	AssignmentExpr	id = atoi ( schoolFish -> Attribute ( \"id\" ) )
>26330	CallExpression	atoi ( schoolFish -> Attribute ( \"id\" ) )
>26331	ArgumentList	schoolFish -> Attribute ( \"id\" )
>26332	Argument	schoolFish -> Attribute ( \"id\" )
>26333	CallExpression	schoolFish -> Attribute ( \"id\" )
>26334	ArgumentList	\"id\"
>26335	Argument	\"id\"
>26336	PrimaryExpression	\"id\"
>26337	Callee	schoolFish -> Attribute
>26338	PtrMemberAccess	schoolFish -> Attribute
>26339	Identifier	Attribute
>26340	Identifier	schoolFish
>26341	Callee	atoi
>26342	Identifier	atoi
>26343	Identifier	id
>26344	ExpressionStatement	 
>26345	AssignmentExpr	y = atoi ( schoolFish -> Attribute ( \"y\" ) )
>26346	CallExpression	atoi ( schoolFish -> Attribute ( \"y\" ) )
>26347	ArgumentList	schoolFish -> Attribute ( \"y\" )
>26348	Argument	schoolFish -> Attribute ( \"y\" )
>26349	CallExpression	schoolFish -> Attribute ( \"y\" )
>26350	ArgumentList	\"y\"
>26351	Argument	\"y\"
>26352	PrimaryExpression	\"y\"
>26353	Callee	schoolFish -> Attribute
>26354	PtrMemberAccess	schoolFish -> Attribute
>26355	Identifier	Attribute
>26356	Identifier	schoolFish
>26357	Callee	atoi
>26358	Identifier	atoi
>26359	Identifier	y
>26360	ExpressionStatement	 
>26361	AssignmentExpr	x = atoi ( schoolFish -> Attribute ( \"x\" ) )
>26362	CallExpression	atoi ( schoolFish -> Attribute ( \"x\" ) )
>26363	ArgumentList	schoolFish -> Attribute ( \"x\" )
>26364	Argument	schoolFish -> Attribute ( \"x\" )
>26365	CallExpression	schoolFish -> Attribute ( \"x\" )
>26366	ArgumentList	\"x\"
>26367	Argument	\"x\"
>26368	PrimaryExpression	\"x\"
>26369	Callee	schoolFish -> Attribute
>26370	PtrMemberAccess	schoolFish -> Attribute
>26371	Identifier	Attribute
>26372	Identifier	schoolFish
>26373	Callee	atoi
>26374	Identifier	atoi
>26375	Identifier	x
>26376	IdentifierDeclStatement	 
>26377	IdentifierDecl	id
>26378	Identifier	id
>26379	IdentifierDeclType	int
>26380	IdentifierDeclStatement	 
>26381	IdentifierDecl	y
>26382	Identifier	y
>26383	IdentifierDeclType	int
>26384	IdentifierDecl	x
>26385	Identifier	x
>26386	IdentifierDeclType	int
>26387	IdentifierDeclStatement	 
>26388	IdentifierDecl	num = atoi ( schoolFish -> Attribute ( \"num\" ) )
>26389	AssignmentExpr	num = atoi ( schoolFish -> Attribute ( \"num\" ) )
>26390	CallExpression	atoi ( schoolFish -> Attribute ( \"num\" ) )
>26391	ArgumentList	schoolFish -> Attribute ( \"num\" )
>26392	Argument	schoolFish -> Attribute ( \"num\" )
>26393	CallExpression	schoolFish -> Attribute ( \"num\" )
>26394	ArgumentList	\"num\"
>26395	Argument	\"num\"
>26396	PrimaryExpression	\"num\"
>26397	Callee	schoolFish -> Attribute
>26398	PtrMemberAccess	schoolFish -> Attribute
>26399	Identifier	Attribute
>26400	Identifier	schoolFish
>26401	Callee	atoi
>26402	Identifier	atoi
>26403	Identifier	num
>26404	Identifier	num
>26405	IdentifierDeclType	int
>26406	Condition	 
>26407	Identifier	schoolFish
>26408	IdentifierDeclStatement	 
>26409	IdentifierDecl	* schoolFish = doc . FirstChildElement ( \"SchoolFish\" )
>26410	AssignmentExpr	* schoolFish = doc . FirstChildElement ( \"SchoolFish\" )
>26411	CallExpression	doc . FirstChildElement ( \"SchoolFish\" )
>26412	ArgumentList	\"SchoolFish\"
>26413	Argument	\"SchoolFish\"
>26414	PrimaryExpression	\"SchoolFish\"
>26415	Callee	doc . FirstChildElement
>26416	MemberAccess	doc . FirstChildElement
>26417	Identifier	FirstChildElement
>26418	Identifier	doc
>26419	Identifier	schoolFish
>26420	Identifier	schoolFish
>26421	IdentifierDeclType	XMLElement *
>26422	WhileStatement	while ( warpArea )
>26423	CompoundStatement	 
>26424	ExpressionStatement	 
>26425	AssignmentExpr	warpArea = warpArea -> NextSiblingElement ( \"WarpArea\" )
>26426	CallExpression	warpArea -> NextSiblingElement ( \"WarpArea\" )
>26427	ArgumentList	\"WarpArea\"
>26428	Argument	\"WarpArea\"
>26429	PrimaryExpression	\"WarpArea\"
>26430	Callee	warpArea -> NextSiblingElement
>26431	PtrMemberAccess	warpArea -> NextSiblingElement
>26432	Identifier	NextSiblingElement
>26433	Identifier	warpArea
>26434	Identifier	warpArea
>26435	IfStatement	if ( a . generated )
>26436	CompoundStatement	 
>26437	ExpressionStatement	 
>26438	CallExpression	setWarpAreaSceneName ( a )
>26439	ArgumentList	a
>26440	Argument	a
>26441	Identifier	a
>26442	Callee	setWarpAreaSceneName
>26443	Identifier	setWarpAreaSceneName
>26444	Condition	 
>26445	MemberAccess	a . generated
>26446	Identifier	generated
>26447	Identifier	a
>26448	IfStatement	if ( add )
>26449	ExpressionStatement	 
>26450	CallExpression	warpAreas . push_back ( a )
>26451	ArgumentList	a
>26452	Argument	a
>26453	Identifier	a
>26454	Callee	warpAreas . push_back
>26455	MemberAccess	warpAreas . push_back
>26456	Identifier	push_back
>26457	Identifier	warpAreas
>26458	Condition	 
>26459	Identifier	add
>26460	IfStatement	if ( warpArea -> Attribute ( \"flagCheck\" ) )
>26461	CompoundStatement	 
>26462	ExpressionStatement	 
>26463	AssignmentExpr	add = doFlagCheck ( flagCheck )
>26464	CallExpression	doFlagCheck ( flagCheck )
>26465	ArgumentList	flagCheck
>26466	Argument	flagCheck
>26467	Identifier	flagCheck
>26468	Callee	doFlagCheck
>26469	Identifier	doFlagCheck
>26470	Identifier	add
>26471	ExpressionStatement	 
>26472	AssignmentExpr	flagCheck = warpArea -> Attribute ( \"flagCheck\" )
>26473	CallExpression	warpArea -> Attribute ( \"flagCheck\" )
>26474	ArgumentList	\"flagCheck\"
>26475	Argument	\"flagCheck\"
>26476	PrimaryExpression	\"flagCheck\"
>26477	Callee	warpArea -> Attribute
>26478	PtrMemberAccess	warpArea -> Attribute
>26479	Identifier	Attribute
>26480	Identifier	warpArea
>26481	Identifier	flagCheck
>26482	Condition	 
>26483	CallExpression	warpArea -> Attribute ( \"flagCheck\" )
>26484	ArgumentList	\"flagCheck\"
>26485	Argument	\"flagCheck\"
>26486	PrimaryExpression	\"flagCheck\"
>26487	Callee	warpArea -> Attribute
>26488	PtrMemberAccess	warpArea -> Attribute
>26489	Identifier	Attribute
>26490	Identifier	warpArea
>26491	IdentifierDeclStatement	 
>26492	IdentifierDecl	flagCheck
>26493	Identifier	flagCheck
>26494	IdentifierDeclType	std 
>26495	IdentifierDeclStatement	 
>26496	IdentifierDecl	add = true
>26497	AssignmentExpr	add = true
>26498	Identifier	true
>26499	Identifier	true
>26500	Identifier	add
>26501	IdentifierDeclType	bool
>26502	ExpressionStatement	 
>26503	AssignmentExpr	a . warpAreaType = warpAreaType
>26504	Identifier	warpAreaType
>26505	MemberAccess	a . warpAreaType
>26506	Identifier	warpAreaType
>26507	Identifier	a
>26508	ExpressionStatement	 
>26509	AssignmentExpr	a . sceneName = sceneName
>26510	Identifier	sceneName
>26511	MemberAccess	a . sceneName
>26512	Identifier	sceneName
>26513	Identifier	a
>26514	ExpressionStatement	 
>26515	CallExpression	a . spawnOffset . normalize2D ( )
>26516	ArgumentList	 
>26517	Callee	a . spawnOffset . normalize2D
>26518	MemberAccess	a . spawnOffset . normalize2D
>26519	Identifier	normalize2D
>26520	MemberAccess	a . spawnOffset
>26521	Identifier	spawnOffset
>26522	Identifier	a
>26523	ExpressionStatement	 
>26524	ShiftExpression	is >> sceneName >> warpAreaType >> a . spawnOffset . x >> a . spawnOffset . y
>26525	ShiftExpression	sceneName >> warpAreaType >> a . spawnOffset . x >> a . spawnOffset . y
>26526	ShiftExpression	warpAreaType >> a . spawnOffset . x >> a . spawnOffset . y
>26527	ShiftExpression	a . spawnOffset . x >> a . spawnOffset . y
>26528	MemberAccess	a . spawnOffset . y
>26529	Identifier	y
>26530	MemberAccess	a . spawnOffset
>26531	Identifier	spawnOffset
>26532	Identifier	a
>26533	MemberAccess	a . spawnOffset . x
>26534	Identifier	x
>26535	MemberAccess	a . spawnOffset
>26536	Identifier	spawnOffset
>26537	Identifier	a
>26538	Identifier	warpAreaType
>26539	Identifier	sceneName
>26540	Identifier	is
>26541	IdentifierDeclStatement	 
>26542	IdentifierDecl	side
>26543	Identifier	side
>26544	IdentifierDeclType	std 
>26545	IdentifierDecl	warpAreaType
>26546	Identifier	warpAreaType
>26547	IdentifierDeclType	std 
>26548	IdentifierDecl	sceneName
>26549	Identifier	sceneName
>26550	IdentifierDeclType	std 
>26551	IdentifierDeclStatement	 
>26552	IdentifierDecl	is ( sceneString )
>26553	Identifier	sceneString
>26554	Identifier	is
>26555	IdentifierDeclType	SimpleIStringStream
>26556	ExpressionStatement	 
>26557	CallExpression	waSF -> SetAttribute ( \"scene\" , sceneString . c_str ( ) )
>26558	ArgumentList	\"scene\"
>26559	Argument	sceneString . c_str ( )
>26560	CallExpression	sceneString . c_str ( )
>26561	ArgumentList	 
>26562	Callee	sceneString . c_str
>26563	MemberAccess	sceneString . c_str
>26564	Identifier	c_str
>26565	Identifier	sceneString
>26566	Argument	\"scene\"
>26567	PrimaryExpression	\"scene\"
>26568	Callee	waSF -> SetAttribute
>26569	PtrMemberAccess	waSF -> SetAttribute
>26570	Identifier	SetAttribute
>26571	Identifier	waSF
>26572	IdentifierDeclStatement	 
>26573	IdentifierDecl	sceneString = warpArea -> Attribute ( \"scene\" )
>26574	AssignmentExpr	sceneString = warpArea -> Attribute ( \"scene\" )
>26575	CallExpression	warpArea -> Attribute ( \"scene\" )
>26576	ArgumentList	\"scene\"
>26577	Argument	\"scene\"
>26578	PrimaryExpression	\"scene\"
>26579	Callee	warpArea -> Attribute
>26580	PtrMemberAccess	warpArea -> Attribute
>26581	Identifier	Attribute
>26582	Identifier	warpArea
>26583	Identifier	sceneString
>26584	Identifier	sceneString
>26585	IdentifierDeclType	std 
>26586	IfStatement	if ( warpArea -> Attribute ( \"g\" ) )
>26587	CompoundStatement	 
>26588	ExpressionStatement	 
>26589	CallExpression	waSF -> SetAttribute ( \"g\" , a . generated = atoi ( warpArea -> Attribute ( \"g\" ) ) )
>26590	ArgumentList	\"g\"
>26591	Argument	a . generated = atoi ( warpArea -> Attribute ( \"g\" ) )
>26592	AssignmentExpr	a . generated = atoi ( warpArea -> Attribute ( \"g\" ) )
>26593	CallExpression	atoi ( warpArea -> Attribute ( \"g\" ) )
>26594	ArgumentList	warpArea -> Attribute ( \"g\" )
>26595	Argument	warpArea -> Attribute ( \"g\" )
>26596	CallExpression	warpArea -> Attribute ( \"g\" )
>26597	ArgumentList	\"g\"
>26598	Argument	\"g\"
>26599	PrimaryExpression	\"g\"
>26600	Callee	warpArea -> Attribute
>26601	PtrMemberAccess	warpArea -> Attribute
>26602	Identifier	Attribute
>26603	Identifier	warpArea
>26604	Callee	atoi
>26605	Identifier	atoi
>26606	MemberAccess	a . generated
>26607	Identifier	generated
>26608	Identifier	a
>26609	Argument	\"g\"
>26610	PrimaryExpression	\"g\"
>26611	Callee	waSF -> SetAttribute
>26612	PtrMemberAccess	waSF -> SetAttribute
>26613	Identifier	SetAttribute
>26614	Identifier	waSF
>26615	Condition	 
>26616	CallExpression	warpArea -> Attribute ( \"g\" )
>26617	ArgumentList	\"g\"
>26618	Argument	\"g\"
>26619	PrimaryExpression	\"g\"
>26620	Callee	warpArea -> Attribute
>26621	PtrMemberAccess	warpArea -> Attribute
>26622	Identifier	Attribute
>26623	Identifier	warpArea
>26624	IfStatement	if ( warpArea -> Attribute ( \"w\" ) )
>26625	CompoundStatement	 
>26626	ExpressionStatement	 
>26627	CallExpression	waSF -> SetAttribute ( \"h\" , a . h = atoi ( warpArea -> Attribute ( \"h\" ) ) )
>26628	ArgumentList	\"h\"
>26629	Argument	a . h = atoi ( warpArea -> Attribute ( \"h\" ) )
>26630	AssignmentExpr	a . h = atoi ( warpArea -> Attribute ( \"h\" ) )
>26631	CallExpression	atoi ( warpArea -> Attribute ( \"h\" ) )
>26632	ArgumentList	warpArea -> Attribute ( \"h\" )
>26633	Argument	warpArea -> Attribute ( \"h\" )
>26634	CallExpression	warpArea -> Attribute ( \"h\" )
>26635	ArgumentList	\"h\"
>26636	Argument	\"h\"
>26637	PrimaryExpression	\"h\"
>26638	Callee	warpArea -> Attribute
>26639	PtrMemberAccess	warpArea -> Attribute
>26640	Identifier	Attribute
>26641	Identifier	warpArea
>26642	Callee	atoi
>26643	Identifier	atoi
>26644	MemberAccess	a . h
>26645	Identifier	h
>26646	Identifier	a
>26647	Argument	\"h\"
>26648	PrimaryExpression	\"h\"
>26649	Callee	waSF -> SetAttribute
>26650	PtrMemberAccess	waSF -> SetAttribute
>26651	Identifier	SetAttribute
>26652	Identifier	waSF
>26653	ExpressionStatement	 
>26654	CallExpression	waSF -> SetAttribute ( \"w\" , a . w = atoi ( warpArea -> Attribute ( \"w\" ) ) )
>26655	ArgumentList	\"w\"
>26656	Argument	a . w = atoi ( warpArea -> Attribute ( \"w\" ) )
>26657	AssignmentExpr	a . w = atoi ( warpArea -> Attribute ( \"w\" ) )
>26658	CallExpression	atoi ( warpArea -> Attribute ( \"w\" ) )
>26659	ArgumentList	warpArea -> Attribute ( \"w\" )
>26660	Argument	warpArea -> Attribute ( \"w\" )
>26661	CallExpression	warpArea -> Attribute ( \"w\" )
>26662	ArgumentList	\"w\"
>26663	Argument	\"w\"
>26664	PrimaryExpression	\"w\"
>26665	Callee	warpArea -> Attribute
>26666	PtrMemberAccess	warpArea -> Attribute
>26667	Identifier	Attribute
>26668	Identifier	warpArea
>26669	Callee	atoi
>26670	Identifier	atoi
>26671	MemberAccess	a . w
>26672	Identifier	w
>26673	Identifier	a
>26674	Argument	\"w\"
>26675	PrimaryExpression	\"w\"
>26676	Callee	waSF -> SetAttribute
>26677	PtrMemberAccess	waSF -> SetAttribute
>26678	Identifier	SetAttribute
>26679	Identifier	waSF
>26680	ExpressionStatement	 
>26681	AssignmentExpr	isRect = true
>26682	Identifier	true
>26683	Identifier	isRect
>26684	Condition	 
>26685	CallExpression	warpArea -> Attribute ( \"w\" )
>26686	ArgumentList	\"w\"
>26687	Argument	\"w\"
>26688	PrimaryExpression	\"w\"
>26689	Callee	warpArea -> Attribute
>26690	PtrMemberAccess	warpArea -> Attribute
>26691	Identifier	Attribute
>26692	Identifier	warpArea
>26693	IdentifierDeclStatement	 
>26694	IdentifierDecl	isRect = false
>26695	AssignmentExpr	isRect = false
>26696	Identifier	false
>26697	Identifier	false
>26698	Identifier	isRect
>26699	IdentifierDeclType	bool
>26700	IfStatement	if ( warpArea -> Attribute ( \"radius\" ) )
>26701	ExpressionStatement	 
>26702	CallExpression	waSF -> SetAttribute ( \"radius\" , a . radius = atoi ( warpArea -> Attribute ( \"radius\" ) ) )
>26703	ArgumentList	\"radius\"
>26704	Argument	a . radius = atoi ( warpArea -> Attribute ( \"radius\" ) )
>26705	AssignmentExpr	a . radius = atoi ( warpArea -> Attribute ( \"radius\" ) )
>26706	CallExpression	atoi ( warpArea -> Attribute ( \"radius\" ) )
>26707	ArgumentList	warpArea -> Attribute ( \"radius\" )
>26708	Argument	warpArea -> Attribute ( \"radius\" )
>26709	CallExpression	warpArea -> Attribute ( \"radius\" )
>26710	ArgumentList	\"radius\"
>26711	Argument	\"radius\"
>26712	PrimaryExpression	\"radius\"
>26713	Callee	warpArea -> Attribute
>26714	PtrMemberAccess	warpArea -> Attribute
>26715	Identifier	Attribute
>26716	Identifier	warpArea
>26717	Callee	atoi
>26718	Identifier	atoi
>26719	MemberAccess	a . radius
>26720	Identifier	radius
>26721	Identifier	a
>26722	Argument	\"radius\"
>26723	PrimaryExpression	\"radius\"
>26724	Callee	waSF -> SetAttribute
>26725	PtrMemberAccess	waSF -> SetAttribute
>26726	Identifier	SetAttribute
>26727	Identifier	waSF
>26728	Condition	 
>26729	CallExpression	warpArea -> Attribute ( \"radius\" )
>26730	ArgumentList	\"radius\"
>26731	Argument	\"radius\"
>26732	PrimaryExpression	\"radius\"
>26733	Callee	warpArea -> Attribute
>26734	PtrMemberAccess	warpArea -> Attribute
>26735	Identifier	Attribute
>26736	Identifier	warpArea
>26737	ExpressionStatement	 
>26738	CallExpression	waSF -> SetAttribute ( \"y\" , a . position . y = atoi ( warpArea -> Attribute ( \"y\" ) ) )
>26739	ArgumentList	\"y\"
>26740	Argument	a . position . y = atoi ( warpArea -> Attribute ( \"y\" ) )
>26741	AssignmentExpr	a . position . y = atoi ( warpArea -> Attribute ( \"y\" ) )
>26742	CallExpression	atoi ( warpArea -> Attribute ( \"y\" ) )
>26743	ArgumentList	warpArea -> Attribute ( \"y\" )
>26744	Argument	warpArea -> Attribute ( \"y\" )
>26745	CallExpression	warpArea -> Attribute ( \"y\" )
>26746	ArgumentList	\"y\"
>26747	Argument	\"y\"
>26748	PrimaryExpression	\"y\"
>26749	Callee	warpArea -> Attribute
>26750	PtrMemberAccess	warpArea -> Attribute
>26751	Identifier	Attribute
>26752	Identifier	warpArea
>26753	Callee	atoi
>26754	Identifier	atoi
>26755	MemberAccess	a . position . y
>26756	Identifier	y
>26757	MemberAccess	a . position
>26758	Identifier	position
>26759	Identifier	a
>26760	Argument	\"y\"
>26761	PrimaryExpression	\"y\"
>26762	Callee	waSF -> SetAttribute
>26763	PtrMemberAccess	waSF -> SetAttribute
>26764	Identifier	SetAttribute
>26765	Identifier	waSF
>26766	ExpressionStatement	 
>26767	CallExpression	waSF -> SetAttribute ( \"x\" , a . position . x = atoi ( warpArea -> Attribute ( \"x\" ) ) )
>26768	ArgumentList	\"x\"
>26769	Argument	a . position . x = atoi ( warpArea -> Attribute ( \"x\" ) )
>26770	AssignmentExpr	a . position . x = atoi ( warpArea -> Attribute ( \"x\" ) )
>26771	CallExpression	atoi ( warpArea -> Attribute ( \"x\" ) )
>26772	ArgumentList	warpArea -> Attribute ( \"x\" )
>26773	Argument	warpArea -> Attribute ( \"x\" )
>26774	CallExpression	warpArea -> Attribute ( \"x\" )
>26775	ArgumentList	\"x\"
>26776	Argument	\"x\"
>26777	PrimaryExpression	\"x\"
>26778	Callee	warpArea -> Attribute
>26779	PtrMemberAccess	warpArea -> Attribute
>26780	Identifier	Attribute
>26781	Identifier	warpArea
>26782	Callee	atoi
>26783	Identifier	atoi
>26784	MemberAccess	a . position . x
>26785	Identifier	x
>26786	MemberAccess	a . position
>26787	Identifier	position
>26788	Identifier	a
>26789	Argument	\"x\"
>26790	PrimaryExpression	\"x\"
>26791	Callee	waSF -> SetAttribute
>26792	PtrMemberAccess	waSF -> SetAttribute
>26793	Identifier	SetAttribute
>26794	Identifier	waSF
>26795	IdentifierDeclStatement	 
>26796	IdentifierDecl	a
>26797	Identifier	a
>26798	IdentifierDeclType	WarpArea
>26799	IdentifierDeclStatement	 
>26800	IdentifierDecl	* waSF = doc . NewElement ( \"WarpArea\" )
>26801	AssignmentExpr	* waSF = doc . NewElement ( \"WarpArea\" )
>26802	CallExpression	doc . NewElement ( \"WarpArea\" )
>26803	ArgumentList	\"WarpArea\"
>26804	Argument	\"WarpArea\"
>26805	PrimaryExpression	\"WarpArea\"
>26806	Callee	doc . NewElement
>26807	MemberAccess	doc . NewElement
>26808	Identifier	NewElement
>26809	Identifier	doc
>26810	Identifier	waSF
>26811	Identifier	waSF
>26812	IdentifierDeclType	XMLElement *
>26813	Condition	 
>26814	Identifier	warpArea
>26815	IdentifierDeclStatement	 
>26816	IdentifierDecl	* warpArea = doc . FirstChildElement ( \"WarpArea\" )
>26817	AssignmentExpr	* warpArea = doc . FirstChildElement ( \"WarpArea\" )
>26818	CallExpression	doc . FirstChildElement ( \"WarpArea\" )
>26819	ArgumentList	\"WarpArea\"
>26820	Argument	\"WarpArea\"
>26821	PrimaryExpression	\"WarpArea\"
>26822	Callee	doc . FirstChildElement
>26823	MemberAccess	doc . FirstChildElement
>26824	Identifier	FirstChildElement
>26825	Identifier	doc
>26826	Identifier	warpArea
>26827	Identifier	warpArea
>26828	IdentifierDeclType	XMLElement *
>26829	WhileStatement	while ( floater )
>26830	CompoundStatement	 
>26831	ExpressionStatement	 
>26832	AssignmentExpr	floater = floater -> NextSiblingElement ( \"Floater\" )
>26833	CallExpression	floater -> NextSiblingElement ( \"Floater\" )
>26834	ArgumentList	\"Floater\"
>26835	Argument	\"Floater\"
>26836	PrimaryExpression	\"Floater\"
>26837	Callee	floater -> NextSiblingElement
>26838	PtrMemberAccess	floater -> NextSiblingElement
>26839	Identifier	NextSiblingElement
>26840	Identifier	floater
>26841	Identifier	floater
>26842	ExpressionStatement	 
>26843	CallExpression	nSF -> SetAttribute ( \"fy\" , fy = atoi ( floater -> Attribute ( \"fy\" ) ) )
>26844	ArgumentList	\"fy\"
>26845	Argument	fy = atoi ( floater -> Attribute ( \"fy\" ) )
>26846	AssignmentExpr	fy = atoi ( floater -> Attribute ( \"fy\" ) )
>26847	CallExpression	atoi ( floater -> Attribute ( \"fy\" ) )
>26848	ArgumentList	floater -> Attribute ( \"fy\" )
>26849	Argument	floater -> Attribute ( \"fy\" )
>26850	CallExpression	floater -> Attribute ( \"fy\" )
>26851	ArgumentList	\"fy\"
>26852	Argument	\"fy\"
>26853	PrimaryExpression	\"fy\"
>26854	Callee	floater -> Attribute
>26855	PtrMemberAccess	floater -> Attribute
>26856	Identifier	Attribute
>26857	Identifier	floater
>26858	Callee	atoi
>26859	Identifier	atoi
>26860	Identifier	fy
>26861	Argument	\"fy\"
>26862	PrimaryExpression	\"fy\"
>26863	Callee	nSF -> SetAttribute
>26864	PtrMemberAccess	nSF -> SetAttribute
>26865	Identifier	SetAttribute
>26866	Identifier	nSF
>26867	ExpressionStatement	 
>26868	CallExpression	nSF -> SetAttribute ( \"fx\" , fx = atoi ( floater -> Attribute ( \"fx\" ) ) )
>26869	ArgumentList	\"fx\"
>26870	Argument	fx = atoi ( floater -> Attribute ( \"fx\" ) )
>26871	AssignmentExpr	fx = atoi ( floater -> Attribute ( \"fx\" ) )
>26872	CallExpression	atoi ( floater -> Attribute ( \"fx\" ) )
>26873	ArgumentList	floater -> Attribute ( \"fx\" )
>26874	Argument	floater -> Attribute ( \"fx\" )
>26875	CallExpression	floater -> Attribute ( \"fx\" )
>26876	ArgumentList	\"fx\"
>26877	Argument	\"fx\"
>26878	PrimaryExpression	\"fx\"
>26879	Callee	floater -> Attribute
>26880	PtrMemberAccess	floater -> Attribute
>26881	Identifier	Attribute
>26882	Identifier	floater
>26883	Callee	atoi
>26884	Identifier	atoi
>26885	Identifier	fx
>26886	Argument	\"fx\"
>26887	PrimaryExpression	\"fx\"
>26888	Callee	nSF -> SetAttribute
>26889	PtrMemberAccess	nSF -> SetAttribute
>26890	Identifier	SetAttribute
>26891	Identifier	nSF
>26892	ExpressionStatement	 
>26893	CallExpression	nSF -> SetAttribute ( \"y\" , y = atoi ( floater -> Attribute ( \"y\" ) ) )
>26894	ArgumentList	\"y\"
>26895	Argument	y = atoi ( floater -> Attribute ( \"y\" ) )
>26896	AssignmentExpr	y = atoi ( floater -> Attribute ( \"y\" ) )
>26897	CallExpression	atoi ( floater -> Attribute ( \"y\" ) )
>26898	ArgumentList	floater -> Attribute ( \"y\" )
>26899	Argument	floater -> Attribute ( \"y\" )
>26900	CallExpression	floater -> Attribute ( \"y\" )
>26901	ArgumentList	\"y\"
>26902	Argument	\"y\"
>26903	PrimaryExpression	\"y\"
>26904	Callee	floater -> Attribute
>26905	PtrMemberAccess	floater -> Attribute
>26906	Identifier	Attribute
>26907	Identifier	floater
>26908	Callee	atoi
>26909	Identifier	atoi
>26910	Identifier	y
>26911	Argument	\"y\"
>26912	PrimaryExpression	\"y\"
>26913	Callee	nSF -> SetAttribute
>26914	PtrMemberAccess	nSF -> SetAttribute
>26915	Identifier	SetAttribute
>26916	Identifier	nSF
>26917	ExpressionStatement	 
>26918	CallExpression	nSF -> SetAttribute ( \"x\" , x = atoi ( floater -> Attribute ( \"x\" ) ) )
>26919	ArgumentList	\"x\"
>26920	Argument	x = atoi ( floater -> Attribute ( \"x\" ) )
>26921	AssignmentExpr	x = atoi ( floater -> Attribute ( \"x\" ) )
>26922	CallExpression	atoi ( floater -> Attribute ( \"x\" ) )
>26923	ArgumentList	floater -> Attribute ( \"x\" )
>26924	Argument	floater -> Attribute ( \"x\" )
>26925	CallExpression	floater -> Attribute ( \"x\" )
>26926	ArgumentList	\"x\"
>26927	Argument	\"x\"
>26928	PrimaryExpression	\"x\"
>26929	Callee	floater -> Attribute
>26930	PtrMemberAccess	floater -> Attribute
>26931	Identifier	Attribute
>26932	Identifier	floater
>26933	Callee	atoi
>26934	Identifier	atoi
>26935	Identifier	x
>26936	Argument	\"x\"
>26937	PrimaryExpression	\"x\"
>26938	Callee	nSF -> SetAttribute
>26939	PtrMemberAccess	nSF -> SetAttribute
>26940	Identifier	SetAttribute
>26941	Identifier	nSF
>26942	ExpressionStatement	 
>26943	CallExpression	nSF -> SetAttribute ( \"tex\" , floater -> Attribute ( \"tex\" ) )
>26944	ArgumentList	\"tex\"
>26945	Argument	floater -> Attribute ( \"tex\" )
>26946	CallExpression	floater -> Attribute ( \"tex\" )
>26947	ArgumentList	\"tex\"
>26948	Argument	\"tex\"
>26949	PrimaryExpression	\"tex\"
>26950	Callee	floater -> Attribute
>26951	PtrMemberAccess	floater -> Attribute
>26952	Identifier	Attribute
>26953	Identifier	floater
>26954	Argument	\"tex\"
>26955	PrimaryExpression	\"tex\"
>26956	Callee	nSF -> SetAttribute
>26957	PtrMemberAccess	nSF -> SetAttribute
>26958	Identifier	SetAttribute
>26959	Identifier	nSF
>26960	ExpressionStatement	 
>26961	CallExpression	nSF -> SetAttribute ( \"boxH\" , boxH = atoi ( floater -> Attribute ( \"boxH\" ) ) )
>26962	ArgumentList	\"boxH\"
>26963	Argument	boxH = atoi ( floater -> Attribute ( \"boxH\" ) )
>26964	AssignmentExpr	boxH = atoi ( floater -> Attribute ( \"boxH\" ) )
>26965	CallExpression	atoi ( floater -> Attribute ( \"boxH\" ) )
>26966	ArgumentList	floater -> Attribute ( \"boxH\" )
>26967	Argument	floater -> Attribute ( \"boxH\" )
>26968	CallExpression	floater -> Attribute ( \"boxH\" )
>26969	ArgumentList	\"boxH\"
>26970	Argument	\"boxH\"
>26971	PrimaryExpression	\"boxH\"
>26972	Callee	floater -> Attribute
>26973	PtrMemberAccess	floater -> Attribute
>26974	Identifier	Attribute
>26975	Identifier	floater
>26976	Callee	atoi
>26977	Identifier	atoi
>26978	Identifier	boxH
>26979	Argument	\"boxH\"
>26980	PrimaryExpression	\"boxH\"
>26981	Callee	nSF -> SetAttribute
>26982	PtrMemberAccess	nSF -> SetAttribute
>26983	Identifier	SetAttribute
>26984	Identifier	nSF
>26985	ExpressionStatement	 
>26986	CallExpression	nSF -> SetAttribute ( \"boxW\" , boxW = atoi ( floater -> Attribute ( \"boxW\" ) ) )
>26987	ArgumentList	\"boxW\"
>26988	Argument	boxW = atoi ( floater -> Attribute ( \"boxW\" ) )
>26989	AssignmentExpr	boxW = atoi ( floater -> Attribute ( \"boxW\" ) )
>26990	CallExpression	atoi ( floater -> Attribute ( \"boxW\" ) )
>26991	ArgumentList	floater -> Attribute ( \"boxW\" )
>26992	Argument	floater -> Attribute ( \"boxW\" )
>26993	CallExpression	floater -> Attribute ( \"boxW\" )
>26994	ArgumentList	\"boxW\"
>26995	Argument	\"boxW\"
>26996	PrimaryExpression	\"boxW\"
>26997	Callee	floater -> Attribute
>26998	PtrMemberAccess	floater -> Attribute
>26999	Identifier	Attribute
>27000	Identifier	floater
>27001	Callee	atoi
>27002	Identifier	atoi
>27003	Identifier	boxW
>27004	Argument	\"boxW\"
>27005	PrimaryExpression	\"boxW\"
>27006	Callee	nSF -> SetAttribute
>27007	PtrMemberAccess	nSF -> SetAttribute
>27008	Identifier	SetAttribute
>27009	Identifier	nSF
>27010	IdentifierDeclStatement	 
>27011	IdentifierDecl	fy
>27012	Identifier	fy
>27013	IdentifierDeclType	int
>27014	IdentifierDecl	fx
>27015	Identifier	fx
>27016	IdentifierDeclType	int
>27017	IdentifierDecl	y
>27018	Identifier	y
>27019	IdentifierDeclType	int
>27020	IdentifierDecl	x
>27021	Identifier	x
>27022	IdentifierDeclType	int
>27023	IdentifierDecl	boxH
>27024	Identifier	boxH
>27025	IdentifierDeclType	int
>27026	IdentifierDecl	boxW
>27027	Identifier	boxW
>27028	IdentifierDeclType	int
>27029	IfStatement	if ( ! floater -> Attribute ( \"boxW\" ) || ! floater -> Attribute ( \"boxH\" ) )
>27030	CompoundStatement	 
>27031	BreakStatement	 
>27032	ExpressionStatement	 
>27033	CallExpression	errorLog ( \"no boxW/boxH\" )
>27034	ArgumentList	\"no boxW/boxH\"
>27035	Argument	\"no boxW/boxH\"
>27036	PrimaryExpression	\"no boxW/boxH\"
>27037	Callee	errorLog
>27038	Identifier	errorLog
>27039	Condition	 
>27040	OrExpression	! floater -> Attribute ( \"boxW\" ) || ! floater -> Attribute ( \"boxH\" )
>27041	UnaryOp	! floater -> Attribute ( \"boxH\" )
>27042	CallExpression	floater -> Attribute ( \"boxH\" )
>27043	ArgumentList	\"boxH\"
>27044	Argument	\"boxH\"
>27045	PrimaryExpression	\"boxH\"
>27046	Callee	floater -> Attribute
>27047	PtrMemberAccess	floater -> Attribute
>27048	Identifier	Attribute
>27049	Identifier	floater
>27050	UnaryOperator	!
>27051	UnaryOp	! floater -> Attribute ( \"boxW\" )
>27052	CallExpression	floater -> Attribute ( \"boxW\" )
>27053	ArgumentList	\"boxW\"
>27054	Argument	\"boxW\"
>27055	PrimaryExpression	\"boxW\"
>27056	Callee	floater -> Attribute
>27057	PtrMemberAccess	floater -> Attribute
>27058	Identifier	Attribute
>27059	Identifier	floater
>27060	UnaryOperator	!
>27061	IdentifierDeclStatement	 
>27062	IdentifierDecl	* nSF = doc . NewElement ( \"Floater\" )
>27063	AssignmentExpr	* nSF = doc . NewElement ( \"Floater\" )
>27064	CallExpression	doc . NewElement ( \"Floater\" )
>27065	ArgumentList	\"Floater\"
>27066	Argument	\"Floater\"
>27067	PrimaryExpression	\"Floater\"
>27068	Callee	doc . NewElement
>27069	MemberAccess	doc . NewElement
>27070	Identifier	NewElement
>27071	Identifier	doc
>27072	Identifier	nSF
>27073	Identifier	nSF
>27074	IdentifierDeclType	XMLElement *
>27075	Condition	 
>27076	Identifier	floater
>27077	IdentifierDeclStatement	 
>27078	IdentifierDecl	* floater = doc . FirstChildElement ( \"Floater\" )
>27079	AssignmentExpr	* floater = doc . FirstChildElement ( \"Floater\" )
>27080	CallExpression	doc . FirstChildElement ( \"Floater\" )
>27081	ArgumentList	\"Floater\"
>27082	Argument	\"Floater\"
>27083	PrimaryExpression	\"Floater\"
>27084	Callee	doc . FirstChildElement
>27085	MemberAccess	doc . FirstChildElement
>27086	Identifier	FirstChildElement
>27087	Identifier	doc
>27088	Identifier	floater
>27089	Identifier	floater
>27090	IdentifierDeclType	XMLElement *
>27091	WhileStatement	while ( quad )
>27092	CompoundStatement	 
>27093	ExpressionStatement	 
>27094	AssignmentExpr	quad = quad -> NextSiblingElement ( \"Quad\" )
>27095	CallExpression	quad -> NextSiblingElement ( \"Quad\" )
>27096	ArgumentList	\"Quad\"
>27097	Argument	\"Quad\"
>27098	PrimaryExpression	\"Quad\"
>27099	Callee	quad -> NextSiblingElement
>27100	PtrMemberAccess	quad -> NextSiblingElement
>27101	Identifier	NextSiblingElement
>27102	Identifier	quad
>27103	Identifier	quad
>27104	ExpressionStatement	 
>27105	CallExpression	saveFile -> InsertEndChild ( qSF )
>27106	ArgumentList	qSF
>27107	Argument	qSF
>27108	Identifier	qSF
>27109	Callee	saveFile -> InsertEndChild
>27110	PtrMemberAccess	saveFile -> InsertEndChild
>27111	Identifier	InsertEndChild
>27112	Identifier	saveFile
>27113	ExpressionStatement	 
>27114	CallExpression	addRenderObject ( q , LR_BACKGROUND )
>27115	ArgumentList	q
>27116	Argument	LR_BACKGROUND
>27117	Identifier	LR_BACKGROUND
>27118	Argument	q
>27119	Identifier	q
>27120	Callee	addRenderObject
>27121	Identifier	addRenderObject
>27122	IfStatement	if ( justify == \"upperLeft\" )
>27123	CompoundStatement	 
>27124	ExpressionStatement	 
>27125	AssignmentExpr	q -> offset = Vector ( ( q -> getWidth ( ) * q -> scale . x ) / 2.0f , ( q -> getHeight ( ) * q -> scale \
>27126	CallExpression	Vector ( ( q -> getWidth ( ) * q -> scale . x ) / 2.0f , ( q -> getHeight ( ) * q -> scale . y ) / 2.0f )
>27127	ArgumentList	( q -> getWidth ( ) * q -> scale . x ) / 2.0f
>27128	Argument	( q -> getHeight ( ) * q -> scale . y ) / 2.0f
>27129	MultiplicativeExpression	( q -> getHeight ( ) * q -> scale . y ) / 2.0f
>27130	PrimaryExpression	2.0f
>27131	MultiplicativeExpression	q -> getHeight ( ) * q -> scale . y
>27132	MemberAccess	q -> scale . y
>27133	Identifier	y
>27134	PtrMemberAccess	q -> scale
>27135	Identifier	scale
>27136	Identifier	q
>27137	CallExpression	q -> getHeight ( )
>27138	ArgumentList	 
>27139	Callee	q -> getHeight
>27140	PtrMemberAccess	q -> getHeight
>27141	Identifier	getHeight
>27142	Identifier	q
>27143	Argument	( q -> getWidth ( ) * q -> scale . x ) / 2.0f
>27144	MultiplicativeExpression	( q -> getWidth ( ) * q -> scale . x ) / 2.0f
>27145	PrimaryExpression	2.0f
>27146	MultiplicativeExpression	q -> getWidth ( ) * q -> scale . x
>27147	MemberAccess	q -> scale . x
>27148	Identifier	x
>27149	PtrMemberAccess	q -> scale
>27150	Identifier	scale
>27151	Identifier	q
>27152	CallExpression	q -> getWidth ( )
>27153	ArgumentList	 
>27154	Callee	q -> getWidth
>27155	PtrMemberAccess	q -> getWidth
>27156	Identifier	getWidth
>27157	Identifier	q
>27158	Callee	Vector
>27159	Identifier	Vector
>27160	PtrMemberAccess	q -> offset
>27161	Identifier	offset
>27162	Identifier	q
>27163	Condition	 
>27164	EqualityExpression	justify == \"upperLeft\"
>27165	PrimaryExpression	\"upperLeft\"
>27166	Identifier	justify
>27167	ExpressionStatement	 
>27168	CallExpression	q -> setWidthHeight ( w , h )
>27169	ArgumentList	w
>27170	Argument	h
>27171	Identifier	h
>27172	Argument	w
>27173	Identifier	w
>27174	Callee	q -> setWidthHeight
>27175	PtrMemberAccess	q -> setWidthHeight
>27176	Identifier	setWidthHeight
>27177	Identifier	q
>27178	ExpressionStatement	 
>27179	CallExpression	q -> toggleCull ( cull )
>27180	ArgumentList	cull
>27181	Argument	cull
>27182	Identifier	cull
>27183	Callee	q -> toggleCull
>27184	PtrMemberAccess	q -> toggleCull
>27185	Identifier	toggleCull
>27186	Identifier	q
>27187	ExpressionStatement	 
>27188	CallExpression	q -> setTexture ( tex )
>27189	ArgumentList	tex
>27190	Argument	tex
>27191	Identifier	tex
>27192	Callee	q -> setTexture
>27193	PtrMemberAccess	q -> setTexture
>27194	Identifier	setTexture
>27195	Identifier	q
>27196	ExpressionStatement	 
>27197	AssignmentExpr	q -> position = Vector ( x , y , z )
>27198	CallExpression	Vector ( x , y , z )
>27199	ArgumentList	x
>27200	Argument	z
>27201	Identifier	z
>27202	Argument	y
>27203	Identifier	y
>27204	Argument	x
>27205	Identifier	x
>27206	Callee	Vector
>27207	Identifier	Vector
>27208	PtrMemberAccess	q -> position
>27209	Identifier	position
>27210	Identifier	q
>27211	ExpressionStatement	 
>27212	Identifier	Quad
>27213	Statement	 
>27214	Statement	 
>27215	Statement	 
>27216	Statement	 
>27217	Statement	 
>27218	IfStatement	if ( quad -> Attribute ( \"solid\" ) )
>27219	ExpressionStatement	 
>27220	CallExpression	qSF -> SetAttribute ( \"solid\" , solid = atoi ( quad -> Attribute ( \"solid\" ) ) )
>27221	ArgumentList	\"solid\"
>27222	Argument	solid = atoi ( quad -> Attribute ( \"solid\" ) )
>27223	AssignmentExpr	solid = atoi ( quad -> Attribute ( \"solid\" ) )
>27224	CallExpression	atoi ( quad -> Attribute ( \"solid\" ) )
>27225	ArgumentList	quad -> Attribute ( \"solid\" )
>27226	Argument	quad -> Attribute ( \"solid\" )
>27227	CallExpression	quad -> Attribute ( \"solid\" )
>27228	ArgumentList	\"solid\"
>27229	Argument	\"solid\"
>27230	PrimaryExpression	\"solid\"
>27231	Callee	quad -> Attribute
>27232	PtrMemberAccess	quad -> Attribute
>27233	Identifier	Attribute
>27234	Identifier	quad
>27235	Callee	atoi
>27236	Identifier	atoi
>27237	Identifier	solid
>27238	Argument	\"solid\"
>27239	PrimaryExpression	\"solid\"
>27240	Callee	qSF -> SetAttribute
>27241	PtrMemberAccess	qSF -> SetAttribute
>27242	Identifier	SetAttribute
>27243	Identifier	qSF
>27244	Condition	 
>27245	CallExpression	quad -> Attribute ( \"solid\" )
>27246	ArgumentList	\"solid\"
>27247	Argument	\"solid\"
>27248	PrimaryExpression	\"solid\"
>27249	Callee	quad -> Attribute
>27250	PtrMemberAccess	quad -> Attribute
>27251	Identifier	Attribute
>27252	Identifier	quad
>27253	ExpressionStatement	 
>27254	CallExpression	qSF -> SetAttribute ( \"justify\" , ( justify = ( quad -> Attribute ( \"justify\" ) ) ) . c_str ( ) )
>27255	ArgumentList	\"justify\"
>27256	Argument	( justify = ( quad -> Attribute ( \"justify\" ) ) ) . c_str ( )
>27257	CallExpression	( justify = ( quad -> Attribute ( \"justify\" ) ) ) . c_str ( )
>27258	ArgumentList	 
>27259	Callee	( justify = ( quad -> Attribute ( \"justify\" ) ) ) . c_str
>27260	MemberAccess	( justify = ( quad -> Attribute ( \"justify\" ) ) ) . c_str
>27261	Identifier	c_str
>27262	AssignmentExpr	justify = ( quad -> Attribute ( \"justify\" ) )
>27263	CallExpression	quad -> Attribute ( \"justify\" )
>27264	ArgumentList	\"justify\"
>27265	Argument	\"justify\"
>27266	PrimaryExpression	\"justify\"
>27267	Callee	quad -> Attribute
>27268	PtrMemberAccess	quad -> Attribute
>27269	Identifier	Attribute
>27270	Identifier	quad
>27271	Identifier	justify
>27272	Argument	\"justify\"
>27273	PrimaryExpression	\"justify\"
>27274	Callee	qSF -> SetAttribute
>27275	PtrMemberAccess	qSF -> SetAttribute
>27276	Identifier	SetAttribute
>27277	Identifier	qSF
>27278	ExpressionStatement	 
>27279	CallExpression	qSF -> SetAttribute ( \"cull\" , cull = atoi ( quad -> Attribute ( \"cull\" ) ) )
>27280	ArgumentList	\"cull\"
>27281	Argument	cull = atoi ( quad -> Attribute ( \"cull\" ) )
>27282	AssignmentExpr	cull = atoi ( quad -> Attribute ( \"cull\" ) )
>27283	CallExpression	atoi ( quad -> Attribute ( \"cull\" ) )
>27284	ArgumentList	quad -> Attribute ( \"cull\" )
>27285	Argument	quad -> Attribute ( \"cull\" )
>27286	CallExpression	quad -> Attribute ( \"cull\" )
>27287	ArgumentList	\"cull\"
>27288	Argument	\"cull\"
>27289	PrimaryExpression	\"cull\"
>27290	Callee	quad -> Attribute
>27291	PtrMemberAccess	quad -> Attribute
>27292	Identifier	Attribute
>27293	Identifier	quad
>27294	Callee	atoi
>27295	Identifier	atoi
>27296	Identifier	cull
>27297	Argument	\"cull\"
>27298	PrimaryExpression	\"cull\"
>27299	Callee	qSF -> SetAttribute
>27300	PtrMemberAccess	qSF -> SetAttribute
>27301	Identifier	SetAttribute
>27302	Identifier	qSF
>27303	ExpressionStatement	 
>27304	CallExpression	qSF -> SetAttribute ( \"tex\" , ( tex = ( quad -> Attribute ( \"tex\" ) ) ) . c_str ( ) )
>27305	ArgumentList	\"tex\"
>27306	Argument	( tex = ( quad -> Attribute ( \"tex\" ) ) ) . c_str ( )
>27307	CallExpression	( tex = ( quad -> Attribute ( \"tex\" ) ) ) . c_str ( )
>27308	ArgumentList	 
>27309	Callee	( tex = ( quad -> Attribute ( \"tex\" ) ) ) . c_str
>27310	MemberAccess	( tex = ( quad -> Attribute ( \"tex\" ) ) ) . c_str
>27311	Identifier	c_str
>27312	AssignmentExpr	tex = ( quad -> Attribute ( \"tex\" ) )
>27313	CallExpression	quad -> Attribute ( \"tex\" )
>27314	ArgumentList	\"tex\"
>27315	Argument	\"tex\"
>27316	PrimaryExpression	\"tex\"
>27317	Callee	quad -> Attribute
>27318	PtrMemberAccess	quad -> Attribute
>27319	Identifier	Attribute
>27320	Identifier	quad
>27321	Identifier	tex
>27322	Argument	\"tex\"
>27323	PrimaryExpression	\"tex\"
>27324	Callee	qSF -> SetAttribute
>27325	PtrMemberAccess	qSF -> SetAttribute
>27326	Identifier	SetAttribute
>27327	Identifier	qSF
>27328	ExpressionStatement	 
>27329	CallExpression	qSF -> SetAttribute ( \"h\" , h = atoi ( quad -> Attribute ( \"h\" ) ) )
>27330	ArgumentList	\"h\"
>27331	Argument	h = atoi ( quad -> Attribute ( \"h\" ) )
>27332	AssignmentExpr	h = atoi ( quad -> Attribute ( \"h\" ) )
>27333	CallExpression	atoi ( quad -> Attribute ( \"h\" ) )
>27334	ArgumentList	quad -> Attribute ( \"h\" )
>27335	Argument	quad -> Attribute ( \"h\" )
>27336	CallExpression	quad -> Attribute ( \"h\" )
>27337	ArgumentList	\"h\"
>27338	Argument	\"h\"
>27339	PrimaryExpression	\"h\"
>27340	Callee	quad -> Attribute
>27341	PtrMemberAccess	quad -> Attribute
>27342	Identifier	Attribute
>27343	Identifier	quad
>27344	Callee	atoi
>27345	Identifier	atoi
>27346	Identifier	h
>27347	Argument	\"h\"
>27348	PrimaryExpression	\"h\"
>27349	Callee	qSF -> SetAttribute
>27350	PtrMemberAccess	qSF -> SetAttribute
>27351	Identifier	SetAttribute
>27352	Identifier	qSF
>27353	ExpressionStatement	 
>27354	CallExpression	qSF -> SetAttribute ( \"w\" , w = atoi ( quad -> Attribute ( \"w\" ) ) )
>27355	ArgumentList	\"w\"
>27356	Argument	w = atoi ( quad -> Attribute ( \"w\" ) )
>27357	AssignmentExpr	w = atoi ( quad -> Attribute ( \"w\" ) )
>27358	CallExpression	atoi ( quad -> Attribute ( \"w\" ) )
>27359	ArgumentList	quad -> Attribute ( \"w\" )
>27360	Argument	quad -> Attribute ( \"w\" )
>27361	CallExpression	quad -> Attribute ( \"w\" )
>27362	ArgumentList	\"w\"
>27363	Argument	\"w\"
>27364	PrimaryExpression	\"w\"
>27365	Callee	quad -> Attribute
>27366	PtrMemberAccess	quad -> Attribute
>27367	Identifier	Attribute
>27368	Identifier	quad
>27369	Callee	atoi
>27370	Identifier	atoi
>27371	Identifier	w
>27372	Argument	\"w\"
>27373	PrimaryExpression	\"w\"
>27374	Callee	qSF -> SetAttribute
>27375	PtrMemberAccess	qSF -> SetAttribute
>27376	Identifier	SetAttribute
>27377	Identifier	qSF
>27378	ExpressionStatement	 
>27379	CallExpression	qSF -> SetAttribute ( \"y\" , y = atoi ( quad -> Attribute ( \"y\" ) ) )
>27380	ArgumentList	\"y\"
>27381	Argument	y = atoi ( quad -> Attribute ( \"y\" ) )
>27382	AssignmentExpr	y = atoi ( quad -> Attribute ( \"y\" ) )
>27383	CallExpression	atoi ( quad -> Attribute ( \"y\" ) )
>27384	ArgumentList	quad -> Attribute ( \"y\" )
>27385	Argument	quad -> Attribute ( \"y\" )
>27386	CallExpression	quad -> Attribute ( \"y\" )
>27387	ArgumentList	\"y\"
>27388	Argument	\"y\"
>27389	PrimaryExpression	\"y\"
>27390	Callee	quad -> Attribute
>27391	PtrMemberAccess	quad -> Attribute
>27392	Identifier	Attribute
>27393	Identifier	quad
>27394	Callee	atoi
>27395	Identifier	atoi
>27396	Identifier	y
>27397	Argument	\"y\"
>27398	PrimaryExpression	\"y\"
>27399	Callee	qSF -> SetAttribute
>27400	PtrMemberAccess	qSF -> SetAttribute
>27401	Identifier	SetAttribute
>27402	Identifier	qSF
>27403	ExpressionStatement	 
>27404	CallExpression	qSF -> SetAttribute ( \"x\" , x = atoi ( quad -> Attribute ( \"x\" ) ) )
>27405	ArgumentList	\"x\"
>27406	Argument	x = atoi ( quad -> Attribute ( \"x\" ) )
>27407	AssignmentExpr	x = atoi ( quad -> Attribute ( \"x\" ) )
>27408	CallExpression	atoi ( quad -> Attribute ( \"x\" ) )
>27409	ArgumentList	quad -> Attribute ( \"x\" )
>27410	Argument	quad -> Attribute ( \"x\" )
>27411	CallExpression	quad -> Attribute ( \"x\" )
>27412	ArgumentList	\"x\"
>27413	Argument	\"x\"
>27414	PrimaryExpression	\"x\"
>27415	Callee	quad -> Attribute
>27416	PtrMemberAccess	quad -> Attribute
>27417	Identifier	Attribute
>27418	Identifier	quad
>27419	Callee	atoi
>27420	Identifier	atoi
>27421	Identifier	x
>27422	Argument	\"x\"
>27423	PrimaryExpression	\"x\"
>27424	Callee	qSF -> SetAttribute
>27425	PtrMemberAccess	qSF -> SetAttribute
>27426	Identifier	SetAttribute
>27427	Identifier	qSF
>27428	IdentifierDeclStatement	 
>27429	IdentifierDecl	tex
>27430	Identifier	tex
>27431	IdentifierDeclType	std 
>27432	IdentifierDeclStatement	 
>27433	IdentifierDecl	justify
>27434	Identifier	justify
>27435	IdentifierDeclType	std 
>27436	IdentifierDeclStatement	 
>27437	IdentifierDecl	solid = false
>27438	AssignmentExpr	solid = false
>27439	Identifier	false
>27440	Identifier	false
>27441	Identifier	solid
>27442	IdentifierDeclType	bool
>27443	IdentifierDeclStatement	 
>27444	IdentifierDecl	cull = true
>27445	AssignmentExpr	cull = true
>27446	Identifier	true
>27447	Identifier	true
>27448	Identifier	cull
>27449	IdentifierDeclType	bool
>27450	IdentifierDeclStatement	 
>27451	IdentifierDecl	h = 0
>27452	AssignmentExpr	h = 0
>27453	PrimaryExpression	0
>27454	Identifier	h
>27455	Identifier	h
>27456	IdentifierDeclType	int
>27457	IdentifierDecl	w = 0
>27458	AssignmentExpr	w = 0
>27459	PrimaryExpression	0
>27460	Identifier	w
>27461	Identifier	w
>27462	IdentifierDeclType	int
>27463	IdentifierDeclStatement	 
>27464	IdentifierDecl	z = 0
>27465	AssignmentExpr	z = 0
>27466	PrimaryExpression	0
>27467	Identifier	z
>27468	Identifier	z
>27469	IdentifierDeclType	int
>27470	IdentifierDecl	y = 0
>27471	AssignmentExpr	y = 0
>27472	PrimaryExpression	0
>27473	Identifier	y
>27474	Identifier	y
>27475	IdentifierDeclType	int
>27476	IdentifierDecl	x = 0
>27477	AssignmentExpr	x = 0
>27478	PrimaryExpression	0
>27479	Identifier	x
>27480	Identifier	x
>27481	IdentifierDeclType	int
>27482	IdentifierDeclStatement	 
>27483	IdentifierDecl	* qSF = saveFile -> NewElement ( \"Quad\" )
>27484	AssignmentExpr	* qSF = saveFile -> NewElement ( \"Quad\" )
>27485	CallExpression	saveFile -> NewElement ( \"Quad\" )
>27486	ArgumentList	\"Quad\"
>27487	Argument	\"Quad\"
>27488	PrimaryExpression	\"Quad\"
>27489	Callee	saveFile -> NewElement
>27490	PtrMemberAccess	saveFile -> NewElement
>27491	Identifier	NewElement
>27492	Identifier	saveFile
>27493	Identifier	qSF
>27494	Identifier	qSF
>27495	IdentifierDeclType	XMLElement *
>27496	Condition	 
>27497	Identifier	quad
>27498	IdentifierDeclStatement	 
>27499	IdentifierDecl	* quad = doc . FirstChildElement ( \"Quad\" )
>27500	AssignmentExpr	* quad = doc . FirstChildElement ( \"Quad\" )
>27501	CallExpression	doc . FirstChildElement ( \"Quad\" )
>27502	ArgumentList	\"Quad\"
>27503	Argument	\"Quad\"
>27504	PrimaryExpression	\"Quad\"
>27505	Callee	doc . FirstChildElement
>27506	MemberAccess	doc . FirstChildElement
>27507	Identifier	FirstChildElement
>27508	Identifier	doc
>27509	Identifier	quad
>27510	Identifier	quad
>27511	IdentifierDeclType	XMLElement *
>27512	WhileStatement	while ( pathXml )
>27513	CompoundStatement	 
>27514	ExpressionStatement	 
>27515	AssignmentExpr	pathXml = pathXml -> NextSiblingElement ( \"Path\" )
>27516	CallExpression	pathXml -> NextSiblingElement ( \"Path\" )
>27517	ArgumentList	\"Path\"
>27518	Argument	\"Path\"
>27519	PrimaryExpression	\"Path\"
>27520	Callee	pathXml -> NextSiblingElement
>27521	PtrMemberAccess	pathXml -> NextSiblingElement
>27522	Identifier	NextSiblingElement
>27523	Identifier	pathXml
>27524	Identifier	pathXml
>27525	ExpressionStatement	 
>27526	CallExpression	addProgress ( )
>27527	ArgumentList	 
>27528	Callee	addProgress
>27529	Identifier	addProgress
>27530	ExpressionStatement	 
>27531	CallExpression	addPath ( path )
>27532	ArgumentList	path
>27533	Argument	path
>27534	Identifier	path
>27535	Callee	addPath
>27536	Identifier	addPath
>27537	ExpressionStatement	 
>27538	CallExpression	path -> refreshScript ( )
>27539	ArgumentList	 
>27540	Callee	path -> refreshScript
>27541	PtrMemberAccess	path -> refreshScript
>27542	Identifier	refreshScript
>27543	Identifier	path
>27544	WhileStatement	while ( nodeXml )
>27545	CompoundStatement	 
>27546	ExpressionStatement	 
>27547	AssignmentExpr	nodeXml = nodeXml -> NextSiblingElement ( \"Node\" )
>27548	CallExpression	nodeXml -> NextSiblingElement ( \"Node\" )
>27549	ArgumentList	\"Node\"
>27550	Argument	\"Node\"
>27551	PrimaryExpression	\"Node\"
>27552	Callee	nodeXml -> NextSiblingElement
>27553	PtrMemberAccess	nodeXml -> NextSiblingElement
>27554	Identifier	NextSiblingElement
>27555	Identifier	nodeXml
>27556	Identifier	nodeXml
>27557	ExpressionStatement	 
>27558	CallExpression	path -> nodes . push_back ( node )
>27559	ArgumentList	node
>27560	Argument	node
>27561	Identifier	node
>27562	Callee	path -> nodes . push_back
>27563	MemberAccess	path -> nodes . push_back
>27564	Identifier	push_back
>27565	PtrMemberAccess	path -> nodes
>27566	Identifier	nodes
>27567	Identifier	path
>27568	IfStatement	if ( nodeXml -> Attribute ( \"shape\" ) )
>27569	CompoundStatement	 
>27570	ExpressionStatement	 
>27571	AssignmentExpr	path -> pathShape = ( PathShape ) atoi ( nodeXml -> Attribute ( \"shape\" ) )
>27572	CastExpression	( PathShape ) atoi ( nodeXml -> Attribute ( \"shape\" ) )
>27573	CallExpression	atoi ( nodeXml -> Attribute ( \"shape\" ) )
>27574	ArgumentList	nodeXml -> Attribute ( \"shape\" )
>27575	Argument	nodeXml -> Attribute ( \"shape\" )
>27576	CallExpression	nodeXml -> Attribute ( \"shape\" )
>27577	ArgumentList	\"shape\"
>27578	Argument	\"shape\"
>27579	PrimaryExpression	\"shape\"
>27580	Callee	nodeXml -> Attribute
>27581	PtrMemberAccess	nodeXml -> Attribute
>27582	Identifier	Attribute
>27583	Identifier	nodeXml
>27584	Callee	atoi
>27585	Identifier	atoi
>27586	CastTarget	PathShape
>27587	PtrMemberAccess	path -> pathShape
>27588	Identifier	pathShape
>27589	Identifier	path
>27590	Condition	 
>27591	CallExpression	nodeXml -> Attribute ( \"shape\" )
>27592	ArgumentList	\"shape\"
>27593	Argument	\"shape\"
>27594	PrimaryExpression	\"shape\"
>27595	Callee	nodeXml -> Attribute
>27596	PtrMemberAccess	nodeXml -> Attribute
>27597	Identifier	Attribute
>27598	Identifier	nodeXml
>27599	IfStatement	if ( nodeXml -> Attribute ( \"rect\" ) )
>27600	CompoundStatement	 
>27601	ExpressionStatement	 
>27602	CallExpression	path -> rect . setHeight ( h )
>27603	ArgumentList	h
>27604	Argument	h
>27605	Identifier	h
>27606	Callee	path -> rect . setHeight
>27607	MemberAccess	path -> rect . setHeight
>27608	Identifier	setHeight
>27609	PtrMemberAccess	path -> rect
>27610	Identifier	rect
>27611	Identifier	path
>27612	ExpressionStatement	 
>27613	CallExpression	path -> rect . setWidth ( w )
>27614	ArgumentList	w
>27615	Argument	w
>27616	Identifier	w
>27617	Callee	path -> rect . setWidth
>27618	MemberAccess	path -> rect . setWidth
>27619	Identifier	setWidth
>27620	PtrMemberAccess	path -> rect
>27621	Identifier	rect
>27622	Identifier	path
>27623	ExpressionStatement	 
>27624	ShiftExpression	is >> w >> h
>27625	ShiftExpression	w >> h
>27626	Identifier	h
>27627	Identifier	w
>27628	Identifier	is
>27629	IdentifierDeclStatement	 
>27630	IdentifierDecl	h
>27631	Identifier	h
>27632	IdentifierDeclType	int
>27633	IdentifierDecl	w
>27634	Identifier	w
>27635	IdentifierDeclType	int
>27636	IdentifierDeclStatement	 
>27637	IdentifierDecl	is ( nodeXml -> Attribute ( \"rect\" ) )
>27638	CallExpression	nodeXml -> Attribute ( \"rect\" )
>27639	ArgumentList	\"rect\"
>27640	Argument	\"rect\"
>27641	PrimaryExpression	\"rect\"
>27642	Callee	nodeXml -> Attribute
>27643	PtrMemberAccess	nodeXml -> Attribute
>27644	Identifier	Attribute
>27645	Identifier	nodeXml
>27646	Identifier	is
>27647	IdentifierDeclType	SimpleIStringStream
>27648	Condition	 
>27649	CallExpression	nodeXml -> Attribute ( \"rect\" )
>27650	ArgumentList	\"rect\"
>27651	Argument	\"rect\"
>27652	PrimaryExpression	\"rect\"
>27653	Callee	nodeXml -> Attribute
>27654	PtrMemberAccess	nodeXml -> Attribute
>27655	Identifier	Attribute
>27656	Identifier	nodeXml
>27657	IfStatement	if ( nodeXml -> Attribute ( \"ms\" ) )
>27658	CompoundStatement	 
>27659	ExpressionStatement	 
>27660	AssignmentExpr	node . maxSpeed = atoi ( nodeXml -> Attribute ( \"ms\" ) )
>27661	CallExpression	atoi ( nodeXml -> Attribute ( \"ms\" ) )
>27662	ArgumentList	nodeXml -> Attribute ( \"ms\" )
>27663	Argument	nodeXml -> Attribute ( \"ms\" )
>27664	CallExpression	nodeXml -> Attribute ( \"ms\" )
>27665	ArgumentList	\"ms\"
>27666	Argument	\"ms\"
>27667	PrimaryExpression	\"ms\"
>27668	Callee	nodeXml -> Attribute
>27669	PtrMemberAccess	nodeXml -> Attribute
>27670	Identifier	Attribute
>27671	Identifier	nodeXml
>27672	Callee	atoi
>27673	Identifier	atoi
>27674	MemberAccess	node . maxSpeed
>27675	Identifier	maxSpeed
>27676	Identifier	node
>27677	Condition	 
>27678	CallExpression	nodeXml -> Attribute ( \"ms\" )
>27679	ArgumentList	\"ms\"
>27680	Argument	\"ms\"
>27681	PrimaryExpression	\"ms\"
>27682	Callee	nodeXml -> Attribute
>27683	PtrMemberAccess	nodeXml -> Attribute
>27684	Identifier	Attribute
>27685	Identifier	nodeXml
>27686	ExpressionStatement	 
>27687	ShiftExpression	is >> node . position . x >> node . position . y
>27688	ShiftExpression	node . position . x >> node . position . y
>27689	MemberAccess	node . position . y
>27690	Identifier	y
>27691	MemberAccess	node . position
>27692	Identifier	position
>27693	Identifier	node
>27694	MemberAccess	node . position . x
>27695	Identifier	x
>27696	MemberAccess	node . position
>27697	Identifier	position
>27698	Identifier	node
>27699	Identifier	is
>27700	IdentifierDeclStatement	 
>27701	IdentifierDecl	is ( nodeXml -> Attribute ( \"pos\" ) )
>27702	CallExpression	nodeXml -> Attribute ( \"pos\" )
>27703	ArgumentList	\"pos\"
>27704	Argument	\"pos\"
>27705	PrimaryExpression	\"pos\"
>27706	Callee	nodeXml -> Attribute
>27707	PtrMemberAccess	nodeXml -> Attribute
>27708	Identifier	Attribute
>27709	Identifier	nodeXml
>27710	Identifier	is
>27711	IdentifierDeclType	SimpleIStringStream
>27712	IdentifierDeclStatement	 
>27713	IdentifierDecl	node
>27714	Identifier	node
>27715	IdentifierDeclType	PathNode
>27716	Condition	 
>27717	Identifier	nodeXml
>27718	IdentifierDeclStatement	 
>27719	IdentifierDecl	* nodeXml = pathXml -> FirstChildElement ( \"Node\" )
>27720	AssignmentExpr	* nodeXml = pathXml -> FirstChildElement ( \"Node\" )
>27721	CallExpression	pathXml -> FirstChildElement ( \"Node\" )
>27722	ArgumentList	\"Node\"
>27723	Argument	\"Node\"
>27724	PrimaryExpression	\"Node\"
>27725	Callee	pathXml -> FirstChildElement
>27726	PtrMemberAccess	pathXml -> FirstChildElement
>27727	Identifier	FirstChildElement
>27728	Identifier	pathXml
>27729	Identifier	nodeXml
>27730	Identifier	nodeXml
>27731	IdentifierDeclType	XMLElement *
>27732	ExpressionStatement	 
>27733	CallExpression	stringToLower ( path -> name )
>27734	ArgumentList	path -> name
>27735	Argument	path -> name
>27736	PtrMemberAccess	path -> name
>27737	Identifier	name
>27738	Identifier	path
>27739	Callee	stringToLower
>27740	Identifier	stringToLower
>27741	ExpressionStatement	 
>27742	AssignmentExpr	path -> name = pathXml -> Attribute ( \"name\" )
>27743	CallExpression	pathXml -> Attribute ( \"name\" )
>27744	ArgumentList	\"name\"
>27745	Argument	\"name\"
>27746	PrimaryExpression	\"name\"
>27747	Callee	pathXml -> Attribute
>27748	PtrMemberAccess	pathXml -> Attribute
>27749	Identifier	Attribute
>27750	Identifier	pathXml
>27751	PtrMemberAccess	path -> name
>27752	Identifier	name
>27753	Identifier	path
>27754	ExpressionStatement	 
>27755	Identifier	Path
>27756	Statement	 
>27757	Statement	 
>27758	Statement	 
>27759	Statement	 
>27760	Statement	 
>27761	Condition	 
>27762	Identifier	pathXml
>27763	IdentifierDeclStatement	 
>27764	IdentifierDecl	* pathXml = doc . FirstChildElement ( \"Path\" )
>27765	AssignmentExpr	* pathXml = doc . FirstChildElement ( \"Path\" )
>27766	CallExpression	doc . FirstChildElement ( \"Path\" )
>27767	ArgumentList	\"Path\"
>27768	Argument	\"Path\"
>27769	PrimaryExpression	\"Path\"
>27770	Callee	doc . FirstChildElement
>27771	MemberAccess	doc . FirstChildElement
>27772	Identifier	FirstChildElement
>27773	Identifier	doc
>27774	Identifier	pathXml
>27775	Identifier	pathXml
>27776	IdentifierDeclType	XMLElement *
>27777	IfStatement	if ( obs )
>27778	CompoundStatement	 
>27779	ExpressionStatement	 
>27780	CallExpression	addProgress ( )
>27781	ArgumentList	 
>27782	Callee	addProgress
>27783	Identifier	addProgress
>27784	WhileStatement	while ( is >> tx )
>27785	CompoundStatement	 
>27786	ExpressionStatement	 
>27787	CallExpression	addObsRow ( tx , ty , len )
>27788	ArgumentList	tx
>27789	Argument	len
>27790	Identifier	len
>27791	Argument	ty
>27792	Identifier	ty
>27793	Argument	tx
>27794	Identifier	tx
>27795	Callee	addObsRow
>27796	Identifier	addObsRow
>27797	ExpressionStatement	 
>27798	ShiftExpression	is >> ty >> len
>27799	ShiftExpression	ty >> len
>27800	Identifier	len
>27801	Identifier	ty
>27802	Identifier	is
>27803	Condition	 
>27804	ShiftExpression	is >> tx
>27805	Identifier	tx
>27806	Identifier	is
>27807	IdentifierDeclStatement	 
>27808	IdentifierDecl	is ( obs -> Attribute ( \"d\" ) )
>27809	CallExpression	obs -> Attribute ( \"d\" )
>27810	ArgumentList	\"d\"
>27811	Argument	\"d\"
>27812	PrimaryExpression	\"d\"
>27813	Callee	obs -> Attribute
>27814	PtrMemberAccess	obs -> Attribute
>27815	Identifier	Attribute
>27816	Identifier	obs
>27817	Identifier	is
>27818	IdentifierDeclType	SimpleIStringStream
>27819	IdentifierDeclStatement	 
>27820	IdentifierDecl	len
>27821	Identifier	len
>27822	IdentifierDeclType	int
>27823	IdentifierDecl	ty
>27824	Identifier	ty
>27825	IdentifierDeclType	int
>27826	IdentifierDecl	tx
>27827	Identifier	tx
>27828	IdentifierDeclType	int
>27829	Condition	 
>27830	Identifier	obs
>27831	IdentifierDeclStatement	 
>27832	IdentifierDecl	* obs = doc . FirstChildElement ( \"Obs\" )
>27833	AssignmentExpr	* obs = doc . FirstChildElement ( \"Obs\" )
>27834	CallExpression	doc . FirstChildElement ( \"Obs\" )
>27835	ArgumentList	\"Obs\"
>27836	Argument	\"Obs\"
>27837	PrimaryExpression	\"Obs\"
>27838	Callee	doc . FirstChildElement
>27839	MemberAccess	doc . FirstChildElement
>27840	Identifier	FirstChildElement
>27841	Identifier	doc
>27842	Identifier	obs
>27843	Identifier	obs
>27844	IdentifierDeclType	XMLElement *
>27845	IfStatement	if ( level )
>27846	ElseStatement	else
>27847	ReturnStatement	 
>27848	Identifier	false
>27849	CompoundStatement	 
>27850	ExpressionStatement	 
>27851	CallExpression	saveFile -> InsertEndChild ( levelSF )
>27852	ArgumentList	levelSF
>27853	Argument	levelSF
>27854	Identifier	levelSF
>27855	Callee	saveFile -> InsertEndChild
>27856	PtrMemberAccess	saveFile -> InsertEndChild
>27857	Identifier	InsertEndChild
>27858	Identifier	saveFile
>27859	IfStatement	if ( level -> Attribute ( \"sceneColor\" ) )
>27860	CompoundStatement	 
>27861	ExpressionStatement	 
>27862	CallExpression	levelSF -> SetAttribute ( \"sceneColor\" , level -> Attribute ( \"sceneColor\" ) )
>27863	ArgumentList	\"sceneColor\"
>27864	Argument	level -> Attribute ( \"sceneColor\" )
>27865	CallExpression	level -> Attribute ( \"sceneColor\" )
>27866	ArgumentList	\"sceneColor\"
>27867	Argument	\"sceneColor\"
>27868	PrimaryExpression	\"sceneColor\"
>27869	Callee	level -> Attribute
>27870	PtrMemberAccess	level -> Attribute
>27871	Identifier	Attribute
>27872	Identifier	level
>27873	Argument	\"sceneColor\"
>27874	PrimaryExpression	\"sceneColor\"
>27875	Callee	levelSF -> SetAttribute
>27876	PtrMemberAccess	levelSF -> SetAttribute
>27877	Identifier	SetAttribute
>27878	Identifier	levelSF
>27879	ExpressionStatement	 
>27880	ShiftExpression	in >> sceneColor . x >> sceneColor . y >> sceneColor . z
>27881	ShiftExpression	sceneColor . x >> sceneColor . y >> sceneColor . z
>27882	ShiftExpression	sceneColor . y >> sceneColor . z
>27883	MemberAccess	sceneColor . z
>27884	Identifier	z
>27885	Identifier	sceneColor
>27886	MemberAccess	sceneColor . y
>27887	Identifier	y
>27888	Identifier	sceneColor
>27889	MemberAccess	sceneColor . x
>27890	Identifier	x
>27891	Identifier	sceneColor
>27892	Identifier	in
>27893	IdentifierDeclStatement	 
>27894	IdentifierDecl	in ( level -> Attribute ( \"sceneColor\" ) )
>27895	CallExpression	level -> Attribute ( \"sceneColor\" )
>27896	ArgumentList	\"sceneColor\"
>27897	Argument	\"sceneColor\"
>27898	PrimaryExpression	\"sceneColor\"
>27899	Callee	level -> Attribute
>27900	PtrMemberAccess	level -> Attribute
>27901	Identifier	Attribute
>27902	Identifier	level
>27903	Identifier	in
>27904	IdentifierDeclType	SimpleIStringStream
>27905	Condition	 
>27906	CallExpression	level -> Attribute ( \"sceneColor\" )
>27907	ArgumentList	\"sceneColor\"
>27908	Argument	\"sceneColor\"
>27909	PrimaryExpression	\"sceneColor\"
>27910	Callee	level -> Attribute
>27911	PtrMemberAccess	level -> Attribute
>27912	Identifier	Attribute
>27913	Identifier	level
>27914	IfStatement	if ( level -> Attribute ( \"music\" ) )
>27915	CompoundStatement	 
>27916	ExpressionStatement	 
>27917	CallExpression	levelSF -> SetAttribute ( \"music\" , level -> Attribute ( \"music\" ) )
>27918	ArgumentList	\"music\"
>27919	Argument	level -> Attribute ( \"music\" )
>27920	CallExpression	level -> Attribute ( \"music\" )
>27921	ArgumentList	\"music\"
>27922	Argument	\"music\"
>27923	PrimaryExpression	\"music\"
>27924	Callee	level -> Attribute
>27925	PtrMemberAccess	level -> Attribute
>27926	Identifier	Attribute
>27927	Identifier	level
>27928	Argument	\"music\"
>27929	PrimaryExpression	\"music\"
>27930	Callee	levelSF -> SetAttribute
>27931	PtrMemberAccess	levelSF -> SetAttribute
>27932	Identifier	SetAttribute
>27933	Identifier	levelSF
>27934	ExpressionStatement	 
>27935	AssignmentExpr	saveMusic = level -> Attribute ( \"music\" )
>27936	CallExpression	level -> Attribute ( \"music\" )
>27937	ArgumentList	\"music\"
>27938	Argument	\"music\"
>27939	PrimaryExpression	\"music\"
>27940	Callee	level -> Attribute
>27941	PtrMemberAccess	level -> Attribute
>27942	Identifier	Attribute
>27943	Identifier	level
>27944	Identifier	saveMusic
>27945	ExpressionStatement	 
>27946	CallExpression	setMusicToPlay ( level -> Attribute ( \"music\" ) )
>27947	ArgumentList	level -> Attribute ( \"music\" )
>27948	Argument	level -> Attribute ( \"music\" )
>27949	CallExpression	level -> Attribute ( \"music\" )
>27950	ArgumentList	\"music\"
>27951	Argument	\"music\"
>27952	PrimaryExpression	\"music\"
>27953	Callee	level -> Attribute
>27954	PtrMemberAccess	level -> Attribute
>27955	Identifier	Attribute
>27956	Identifier	level
>27957	Callee	setMusicToPlay
>27958	Identifier	setMusicToPlay
>27959	Condition	 
>27960	CallExpression	level -> Attribute ( \"music\" )
>27961	ArgumentList	\"music\"
>27962	Argument	\"music\"
>27963	PrimaryExpression	\"music\"
>27964	Callee	level -> Attribute
>27965	PtrMemberAccess	level -> Attribute
>27966	Identifier	Attribute
>27967	Identifier	level
>27968	ExpressionStatement	 
>27969	AssignmentExpr	musicToPlay = \"\"
>27970	PrimaryExpression	\"\"
>27971	Identifier	musicToPlay
>27972	IfStatement	if ( level -> Attribute ( \"backdrop\" ) )
>27973	CompoundStatement	 
>27974	ExpressionStatement	 
>27975	CallExpression	levelSF -> SetAttribute ( \"backdrop\" , backdrop . c_str ( ) )
>27976	ArgumentList	\"backdrop\"
>27977	Argument	backdrop . c_str ( )
>27978	CallExpression	backdrop . c_str ( )
>27979	ArgumentList	 
>27980	Callee	backdrop . c_str
>27981	MemberAccess	backdrop . c_str
>27982	Identifier	c_str
>27983	Identifier	backdrop
>27984	Argument	\"backdrop\"
>27985	PrimaryExpression	\"backdrop\"
>27986	Callee	levelSF -> SetAttribute
>27987	PtrMemberAccess	levelSF -> SetAttribute
>27988	Identifier	SetAttribute
>27989	Identifier	levelSF
>27990	ExpressionStatement	 
>27991	AssignmentExpr	backdropQuad -> offset = Vector ( ( backdropQuad -> getWidth ( ) * backdropQuad -> scale . x ) / 2.0f , ( \
>27992	CallExpression	Vector ( ( backdropQuad -> getWidth ( ) * backdropQuad -> scale . x ) / 2.0f , ( backdropQuad -> getHeight ( ) * \
>27993	ArgumentList	( backdropQuad -> getWidth ( ) * backdropQuad -> scale . x ) / 2.0f
>27994	Argument	( backdropQuad -> getHeight ( ) * backdropQuad -> scale . y ) / 2.0f
>27995	MultiplicativeExpression	( backdropQuad -> getHeight ( ) * backdropQuad -> scale . y ) / 2.0f
>27996	PrimaryExpression	2.0f
>27997	MultiplicativeExpression	backdropQuad -> getHeight ( ) * backdropQuad -> scale . y
>27998	MemberAccess	backdropQuad -> scale . y
>27999	Identifier	y
>28000	PtrMemberAccess	backdropQuad -> scale
>28001	Identifier	scale
>28002	Identifier	backdropQuad
>28003	CallExpression	backdropQuad -> getHeight ( )
>28004	ArgumentList	 
>28005	Callee	backdropQuad -> getHeight
>28006	PtrMemberAccess	backdropQuad -> getHeight
>28007	Identifier	getHeight
>28008	Identifier	backdropQuad
>28009	Argument	( backdropQuad -> getWidth ( ) * backdropQuad -> scale . x ) / 2.0f
>28010	MultiplicativeExpression	( backdropQuad -> getWidth ( ) * backdropQuad -> scale . x ) / 2.0f
>28011	PrimaryExpression	2.0f
>28012	MultiplicativeExpression	backdropQuad -> getWidth ( ) * backdropQuad -> scale . x
>28013	MemberAccess	backdropQuad -> scale . x
>28014	Identifier	x
>28015	PtrMemberAccess	backdropQuad -> scale
>28016	Identifier	scale
>28017	Identifier	backdropQuad
>28018	CallExpression	backdropQuad -> getWidth ( )
>28019	ArgumentList	 
>28020	Callee	backdropQuad -> getWidth
>28021	PtrMemberAccess	backdropQuad -> getWidth
>28022	Identifier	getWidth
>28023	Identifier	backdropQuad
>28024	Callee	Vector
>28025	Identifier	Vector
>28026	PtrMemberAccess	backdropQuad -> offset
>28027	Identifier	offset
>28028	Identifier	backdropQuad
>28029	ExpressionStatement	 
>28030	CallExpression	addRenderObject ( backdropQuad , LR_SCENEBACKGROUNDIMAGE )
>28031	ArgumentList	backdropQuad
>28032	Argument	LR_SCENEBACKGROUNDIMAGE
>28033	Identifier	LR_SCENEBACKGROUNDIMAGE
>28034	Argument	backdropQuad
>28035	Identifier	backdropQuad
>28036	Callee	addRenderObject
>28037	Identifier	addRenderObject
>28038	ExpressionStatement	 
>28039	CallExpression	backdropQuad -> toggleCull ( false )
>28040	ArgumentList	false
>28041	Argument	false
>28042	Identifier	false
>28043	Callee	backdropQuad -> toggleCull
>28044	PtrMemberAccess	backdropQuad -> toggleCull
>28045	Identifier	toggleCull
>28046	Identifier	backdropQuad
>28047	IfStatement	if ( level -> Attribute ( \"bd-w\" ) && level -> Attribute ( \"bd-h\" ) )
>28048	CompoundStatement	 
>28049	ExpressionStatement	 
>28050	CallExpression	levelSF -> SetAttribute ( \"bd-h\" , h )
>28051	ArgumentList	\"bd-h\"
>28052	Argument	h
>28053	Identifier	h
>28054	Argument	\"bd-h\"
>28055	PrimaryExpression	\"bd-h\"
>28056	Callee	levelSF -> SetAttribute
>28057	PtrMemberAccess	levelSF -> SetAttribute
>28058	Identifier	SetAttribute
>28059	Identifier	levelSF
>28060	ExpressionStatement	 
>28061	CallExpression	levelSF -> SetAttribute ( \"bd-w\" , w )
>28062	ArgumentList	\"bd-w\"
>28063	Argument	w
>28064	Identifier	w
>28065	Argument	\"bd-w\"
>28066	PrimaryExpression	\"bd-w\"
>28067	Callee	levelSF -> SetAttribute
>28068	PtrMemberAccess	levelSF -> SetAttribute
>28069	Identifier	SetAttribute
>28070	Identifier	levelSF
>28071	ExpressionStatement	 
>28072	CallExpression	backdropQuad -> setWidthHeight ( w , h )
>28073	ArgumentList	w
>28074	Argument	h
>28075	Identifier	h
>28076	Argument	w
>28077	Identifier	w
>28078	Callee	backdropQuad -> setWidthHeight
>28079	PtrMemberAccess	backdropQuad -> setWidthHeight
>28080	Identifier	setWidthHeight
>28081	Identifier	backdropQuad
>28082	IdentifierDeclStatement	 
>28083	IdentifierDecl	h = atoi ( level -> Attribute ( \"bd-h\" ) )
>28084	AssignmentExpr	h = atoi ( level -> Attribute ( \"bd-h\" ) )
>28085	CallExpression	atoi ( level -> Attribute ( \"bd-h\" ) )
>28086	ArgumentList	level -> Attribute ( \"bd-h\" )
>28087	Argument	level -> Attribute ( \"bd-h\" )
>28088	CallExpression	level -> Attribute ( \"bd-h\" )
>28089	ArgumentList	\"bd-h\"
>28090	Argument	\"bd-h\"
>28091	PrimaryExpression	\"bd-h\"
>28092	Callee	level -> Attribute
>28093	PtrMemberAccess	level -> Attribute
>28094	Identifier	Attribute
>28095	Identifier	level
>28096	Callee	atoi
>28097	Identifier	atoi
>28098	Identifier	h
>28099	Identifier	h
>28100	IdentifierDeclType	int
>28101	IdentifierDeclStatement	 
>28102	IdentifierDecl	w = atoi ( level -> Attribute ( \"bd-w\" ) )
>28103	AssignmentExpr	w = atoi ( level -> Attribute ( \"bd-w\" ) )
>28104	CallExpression	atoi ( level -> Attribute ( \"bd-w\" ) )
>28105	ArgumentList	level -> Attribute ( \"bd-w\" )
>28106	Argument	level -> Attribute ( \"bd-w\" )
>28107	CallExpression	level -> Attribute ( \"bd-w\" )
>28108	ArgumentList	\"bd-w\"
>28109	Argument	\"bd-w\"
>28110	PrimaryExpression	\"bd-w\"
>28111	Callee	level -> Attribute
>28112	PtrMemberAccess	level -> Attribute
>28113	Identifier	Attribute
>28114	Identifier	level
>28115	Callee	atoi
>28116	Identifier	atoi
>28117	Identifier	w
>28118	Identifier	w
>28119	IdentifierDeclType	int
>28120	Condition	 
>28121	AndExpression	level -> Attribute ( \"bd-w\" ) && level -> Attribute ( \"bd-h\" )
>28122	CallExpression	level -> Attribute ( \"bd-h\" )
>28123	ArgumentList	\"bd-h\"
>28124	Argument	\"bd-h\"
>28125	PrimaryExpression	\"bd-h\"
>28126	Callee	level -> Attribute
>28127	PtrMemberAccess	level -> Attribute
>28128	Identifier	Attribute
>28129	Identifier	level
>28130	CallExpression	level -> Attribute ( \"bd-w\" )
>28131	ArgumentList	\"bd-w\"
>28132	Argument	\"bd-w\"
>28133	PrimaryExpression	\"bd-w\"
>28134	Callee	level -> Attribute
>28135	PtrMemberAccess	level -> Attribute
>28136	Identifier	Attribute
>28137	Identifier	level
>28138	IfStatement	if ( level -> Attribute ( \"bd-x\" ) && level -> Attribute ( \"bd-y\" ) )
>28139	CompoundStatement	 
>28140	ExpressionStatement	 
>28141	CallExpression	levelSF -> SetAttribute ( \"bd-y\" , y )
>28142	ArgumentList	\"bd-y\"
>28143	Argument	y
>28144	Identifier	y
>28145	Argument	\"bd-y\"
>28146	PrimaryExpression	\"bd-y\"
>28147	Callee	levelSF -> SetAttribute
>28148	PtrMemberAccess	levelSF -> SetAttribute
>28149	Identifier	SetAttribute
>28150	Identifier	levelSF
>28151	ExpressionStatement	 
>28152	CallExpression	levelSF -> SetAttribute ( \"bd-x\" , x )
>28153	ArgumentList	\"bd-x\"
>28154	Argument	x
>28155	Identifier	x
>28156	Argument	\"bd-x\"
>28157	PrimaryExpression	\"bd-x\"
>28158	Callee	levelSF -> SetAttribute
>28159	PtrMemberAccess	levelSF -> SetAttribute
>28160	Identifier	SetAttribute
>28161	Identifier	levelSF
>28162	ExpressionStatement	 
>28163	AssignmentExpr	backdropQuad -> position = Vector ( x , y )
>28164	CallExpression	Vector ( x , y )
>28165	ArgumentList	x
>28166	Argument	y
>28167	Identifier	y
>28168	Argument	x
>28169	Identifier	x
>28170	Callee	Vector
>28171	Identifier	Vector
>28172	PtrMemberAccess	backdropQuad -> position
>28173	Identifier	position
>28174	Identifier	backdropQuad
>28175	IdentifierDeclStatement	 
>28176	IdentifierDecl	y = atoi ( level -> Attribute ( \"bd-y\" ) )
>28177	AssignmentExpr	y = atoi ( level -> Attribute ( \"bd-y\" ) )
>28178	CallExpression	atoi ( level -> Attribute ( \"bd-y\" ) )
>28179	ArgumentList	level -> Attribute ( \"bd-y\" )
>28180	Argument	level -> Attribute ( \"bd-y\" )
>28181	CallExpression	level -> Attribute ( \"bd-y\" )
>28182	ArgumentList	\"bd-y\"
>28183	Argument	\"bd-y\"
>28184	PrimaryExpression	\"bd-y\"
>28185	Callee	level -> Attribute
>28186	PtrMemberAccess	level -> Attribute
>28187	Identifier	Attribute
>28188	Identifier	level
>28189	Callee	atoi
>28190	Identifier	atoi
>28191	Identifier	y
>28192	Identifier	y
>28193	IdentifierDeclType	int
>28194	IdentifierDeclStatement	 
>28195	IdentifierDecl	x = atoi ( level -> Attribute ( \"bd-x\" ) )
>28196	AssignmentExpr	x = atoi ( level -> Attribute ( \"bd-x\" ) )
>28197	CallExpression	atoi ( level -> Attribute ( \"bd-x\" ) )
>28198	ArgumentList	level -> Attribute ( \"bd-x\" )
>28199	Argument	level -> Attribute ( \"bd-x\" )
>28200	CallExpression	level -> Attribute ( \"bd-x\" )
>28201	ArgumentList	\"bd-x\"
>28202	Argument	\"bd-x\"
>28203	PrimaryExpression	\"bd-x\"
>28204	Callee	level -> Attribute
>28205	PtrMemberAccess	level -> Attribute
>28206	Identifier	Attribute
>28207	Identifier	level
>28208	Callee	atoi
>28209	Identifier	atoi
>28210	Identifier	x
>28211	Identifier	x
>28212	IdentifierDeclType	int
>28213	Condition	 
>28214	AndExpression	level -> Attribute ( \"bd-x\" ) && level -> Attribute ( \"bd-y\" )
>28215	CallExpression	level -> Attribute ( \"bd-y\" )
>28216	ArgumentList	\"bd-y\"
>28217	Argument	\"bd-y\"
>28218	PrimaryExpression	\"bd-y\"
>28219	Callee	level -> Attribute
>28220	PtrMemberAccess	level -> Attribute
>28221	Identifier	Attribute
>28222	Identifier	level
>28223	CallExpression	level -> Attribute ( \"bd-x\" )
>28224	ArgumentList	\"bd-x\"
>28225	Argument	\"bd-x\"
>28226	PrimaryExpression	\"bd-x\"
>28227	Callee	level -> Attribute
>28228	PtrMemberAccess	level -> Attribute
>28229	Identifier	Attribute
>28230	Identifier	level
>28231	ExpressionStatement	 
>28232	AssignmentExpr	backdropQuad -> blendEnabled = false
>28233	Identifier	false
>28234	PtrMemberAccess	backdropQuad -> blendEnabled
>28235	Identifier	blendEnabled
>28236	Identifier	backdropQuad
>28237	ExpressionStatement	 
>28238	CallExpression	backdropQuad -> setTexture ( backdrop )
>28239	ArgumentList	backdrop
>28240	Argument	backdrop
>28241	Identifier	backdrop
>28242	Callee	backdropQuad -> setTexture
>28243	PtrMemberAccess	backdropQuad -> setTexture
>28244	Identifier	setTexture
>28245	Identifier	backdropQuad
>28246	ExpressionStatement	 
>28247	Identifier	Quad
>28248	Statement	 
>28249	Statement	 
>28250	Statement	 
>28251	IdentifierDeclStatement	 
>28252	IdentifierDecl	backdrop = level -> Attribute ( \"backdrop\" )
>28253	AssignmentExpr	backdrop = level -> Attribute ( \"backdrop\" )
>28254	CallExpression	level -> Attribute ( \"backdrop\" )
>28255	ArgumentList	\"backdrop\"
>28256	Argument	\"backdrop\"
>28257	PrimaryExpression	\"backdrop\"
>28258	Callee	level -> Attribute
>28259	PtrMemberAccess	level -> Attribute
>28260	Identifier	Attribute
>28261	Identifier	level
>28262	Identifier	backdrop
>28263	Identifier	backdrop
>28264	IdentifierDeclType	std 
>28265	Condition	 
>28266	CallExpression	level -> Attribute ( \"backdrop\" )
>28267	ArgumentList	\"backdrop\"
>28268	Argument	\"backdrop\"
>28269	PrimaryExpression	\"backdrop\"
>28270	Callee	level -> Attribute
>28271	PtrMemberAccess	level -> Attribute
>28272	Identifier	Attribute
>28273	Identifier	level
>28274	IfStatement	if ( level -> Attribute ( \"bg2\" ) )
>28275	ElseStatement	else
>28276	CompoundStatement	 
>28277	ExpressionStatement	 
>28278	AssignmentExpr	bg2 -> alpha = 0
>28279	PrimaryExpression	0
>28280	PtrMemberAccess	bg2 -> alpha
>28281	Identifier	alpha
>28282	Identifier	bg2
>28283	CompoundStatement	 
>28284	ExpressionStatement	 
>28285	AssignmentExpr	bg -> alpha = 0
>28286	PrimaryExpression	0
>28287	PtrMemberAccess	bg -> alpha
>28288	Identifier	alpha
>28289	Identifier	bg
>28290	ExpressionStatement	 
>28291	AssignmentExpr	bg2 -> alpha = 0
>28292	PrimaryExpression	0
>28293	PtrMemberAccess	bg2 -> alpha
>28294	Identifier	alpha
>28295	Identifier	bg2
>28296	IfStatement	if ( ! tex . empty ( ) )
>28297	ElseStatement	else
>28298	ExpressionStatement	 
>28299	AssignmentExpr	bg2 -> alpha = 0
>28300	PrimaryExpression	0
>28301	PtrMemberAccess	bg2 -> alpha
>28302	Identifier	alpha
>28303	Identifier	bg2
>28304	CompoundStatement	 
>28305	ExpressionStatement	 
>28306	CallExpression	levelSF -> SetAttribute ( \"bg2\" , tex . c_str ( ) )
>28307	ArgumentList	\"bg2\"
>28308	Argument	tex . c_str ( )
>28309	CallExpression	tex . c_str ( )
>28310	ArgumentList	 
>28311	Callee	tex . c_str
>28312	MemberAccess	tex . c_str
>28313	Identifier	c_str
>28314	Identifier	tex
>28315	Argument	\"bg2\"
>28316	PrimaryExpression	\"bg2\"
>28317	Callee	levelSF -> SetAttribute
>28318	PtrMemberAccess	levelSF -> SetAttribute
>28319	Identifier	SetAttribute
>28320	Identifier	levelSF
>28321	ExpressionStatement	 
>28322	CallExpression	bg2 -> setWidthHeight ( 900 , 600 )
>28323	ArgumentList	900
>28324	Argument	600
>28325	PrimaryExpression	600
>28326	Argument	900
>28327	PrimaryExpression	900
>28328	Callee	bg2 -> setWidthHeight
>28329	PtrMemberAccess	bg2 -> setWidthHeight
>28330	Identifier	setWidthHeight
>28331	Identifier	bg2
>28332	ExpressionStatement	 
>28333	CallExpression	bg2 -> setTexture ( tex )
>28334	ArgumentList	tex
>28335	Argument	tex
>28336	Identifier	tex
>28337	Callee	bg2 -> setTexture
>28338	PtrMemberAccess	bg2 -> setTexture
>28339	Identifier	setTexture
>28340	Identifier	bg2
>28341	Condition	 
>28342	UnaryOp	! tex . empty ( )
>28343	CallExpression	tex . empty ( )
>28344	ArgumentList	 
>28345	Callee	tex . empty
>28346	MemberAccess	tex . empty
>28347	Identifier	empty
>28348	Identifier	tex
>28349	UnaryOperator	!
>28350	IdentifierDeclStatement	 
>28351	IdentifierDecl	tex = std 
>28352	AssignmentExpr	tex = std 
>28353	CallExpression	std 
>28354	ArgumentList	level -> Attribute ( \"bg2\" )
>28355	Argument	level -> Attribute ( \"bg2\" )
>28356	CallExpression	level -> Attribute ( \"bg2\" )
>28357	ArgumentList	\"bg2\"
>28358	Argument	\"bg2\"
>28359	PrimaryExpression	\"bg2\"
>28360	Callee	level -> Attribute
>28361	PtrMemberAccess	level -> Attribute
>28362	Identifier	Attribute
>28363	Identifier	level
>28364	Callee	std 
>28365	Identifier	std 
>28366	Identifier	tex
>28367	Identifier	tex
>28368	IdentifierDeclType	std 
>28369	Condition	 
>28370	CallExpression	level -> Attribute ( \"bg2\" )
>28371	ArgumentList	\"bg2\"
>28372	Argument	\"bg2\"
>28373	PrimaryExpression	\"bg2\"
>28374	Callee	level -> Attribute
>28375	PtrMemberAccess	level -> Attribute
>28376	Identifier	Attribute
>28377	Identifier	level
>28378	IfStatement	if ( level -> Attribute ( \"parallaxLock\" ) )
>28379	CompoundStatement	 
>28380	ExpressionStatement	 
>28381	CallExpression	levelSF -> SetAttribute ( \"parallaxLock\" , level -> Attribute ( \"parallaxLock\" ) )
>28382	ArgumentList	\"parallaxLock\"
>28383	Argument	level -> Attribute ( \"parallaxLock\" )
>28384	CallExpression	level -> Attribute ( \"parallaxLock\" )
>28385	ArgumentList	\"parallaxLock\"
>28386	Argument	\"parallaxLock\"
>28387	PrimaryExpression	\"parallaxLock\"
>28388	Callee	level -> Attribute
>28389	PtrMemberAccess	level -> Attribute
>28390	Identifier	Attribute
>28391	Identifier	level
>28392	Argument	\"parallaxLock\"
>28393	PrimaryExpression	\"parallaxLock\"
>28394	Callee	levelSF -> SetAttribute
>28395	PtrMemberAccess	levelSF -> SetAttribute
>28396	Identifier	SetAttribute
>28397	Identifier	levelSF
>28398	ExpressionStatement	 
>28399	AssignmentExpr	l -> followCameraLock = b
>28400	Identifier	b
>28401	PtrMemberAccess	l -> followCameraLock
>28402	Identifier	followCameraLock
>28403	Identifier	l
>28404	ExpressionStatement	 
>28405	AssignmentExpr	l = & dsq -> renderObjectLayers [ LR_ELEMENTS16 ]
>28406	UnaryOp	& dsq -> renderObjectLayers [ LR_ELEMENTS16 ]
>28407	ArrayIndexing	dsq -> renderObjectLayers [ LR_ELEMENTS16 ]
>28408	Identifier	LR_ELEMENTS16
>28409	PtrMemberAccess	dsq -> renderObjectLayers
>28410	Identifier	renderObjectLayers
>28411	Identifier	dsq
>28412	UnaryOperator	&
>28413	Identifier	l
>28414	ExpressionStatement	 
>28415	AssignmentExpr	l -> followCameraLock = g
>28416	Identifier	g
>28417	PtrMemberAccess	l -> followCameraLock
>28418	Identifier	followCameraLock
>28419	Identifier	l
>28420	ExpressionStatement	 
>28421	AssignmentExpr	l = & dsq -> renderObjectLayers [ LR_ELEMENTS15 ]
>28422	UnaryOp	& dsq -> renderObjectLayers [ LR_ELEMENTS15 ]
>28423	ArrayIndexing	dsq -> renderObjectLayers [ LR_ELEMENTS15 ]
>28424	Identifier	LR_ELEMENTS15
>28425	PtrMemberAccess	dsq -> renderObjectLayers
>28426	Identifier	renderObjectLayers
>28427	Identifier	dsq
>28428	UnaryOperator	&
>28429	Identifier	l
>28430	ExpressionStatement	 
>28431	AssignmentExpr	l -> followCameraLock = r
>28432	Identifier	r
>28433	PtrMemberAccess	l -> followCameraLock
>28434	Identifier	followCameraLock
>28435	Identifier	l
>28436	ExpressionStatement	 
>28437	AssignmentExpr	l = & dsq -> renderObjectLayers [ LR_ELEMENTS14 ]
>28438	UnaryOp	& dsq -> renderObjectLayers [ LR_ELEMENTS14 ]
>28439	ArrayIndexing	dsq -> renderObjectLayers [ LR_ELEMENTS14 ]
>28440	Identifier	LR_ELEMENTS14
>28441	PtrMemberAccess	dsq -> renderObjectLayers
>28442	Identifier	renderObjectLayers
>28443	Identifier	dsq
>28444	UnaryOperator	&
>28445	Identifier	l
>28446	ExpressionStatement	 
>28447	AssignmentExpr	l -> followCameraLock = z
>28448	Identifier	z
>28449	PtrMemberAccess	l -> followCameraLock
>28450	Identifier	followCameraLock
>28451	Identifier	l
>28452	ExpressionStatement	 
>28453	AssignmentExpr	l = & dsq -> renderObjectLayers [ LR_ELEMENTS12 ]
>28454	UnaryOp	& dsq -> renderObjectLayers [ LR_ELEMENTS12 ]
>28455	ArrayIndexing	dsq -> renderObjectLayers [ LR_ELEMENTS12 ]
>28456	Identifier	LR_ELEMENTS12
>28457	PtrMemberAccess	dsq -> renderObjectLayers
>28458	Identifier	renderObjectLayers
>28459	Identifier	dsq
>28460	UnaryOperator	&
>28461	Identifier	l
>28462	ExpressionStatement	 
>28463	AssignmentExpr	l -> followCameraLock = y
>28464	Identifier	y
>28465	PtrMemberAccess	l -> followCameraLock
>28466	Identifier	followCameraLock
>28467	Identifier	l
>28468	ExpressionStatement	 
>28469	AssignmentExpr	l = & dsq -> renderObjectLayers [ LR_ELEMENTS11 ]
>28470	UnaryOp	& dsq -> renderObjectLayers [ LR_ELEMENTS11 ]
>28471	ArrayIndexing	dsq -> renderObjectLayers [ LR_ELEMENTS11 ]
>28472	Identifier	LR_ELEMENTS11
>28473	PtrMemberAccess	dsq -> renderObjectLayers
>28474	Identifier	renderObjectLayers
>28475	Identifier	dsq
>28476	UnaryOperator	&
>28477	Identifier	l
>28478	ExpressionStatement	 
>28479	AssignmentExpr	l -> followCameraLock = x
>28480	Identifier	x
>28481	PtrMemberAccess	l -> followCameraLock
>28482	Identifier	followCameraLock
>28483	Identifier	l
>28484	ExpressionStatement	 
>28485	AssignmentExpr	l = & dsq -> renderObjectLayers [ LR_ELEMENTS10 ]
>28486	UnaryOp	& dsq -> renderObjectLayers [ LR_ELEMENTS10 ]
>28487	ArrayIndexing	dsq -> renderObjectLayers [ LR_ELEMENTS10 ]
>28488	Identifier	LR_ELEMENTS10
>28489	PtrMemberAccess	dsq -> renderObjectLayers
>28490	Identifier	renderObjectLayers
>28491	Identifier	dsq
>28492	UnaryOperator	&
>28493	Identifier	l
>28494	IdentifierDeclStatement	 
>28495	IdentifierDecl	* l = 0
>28496	AssignmentExpr	* l = 0
>28497	PrimaryExpression	0
>28498	Identifier	l
>28499	Identifier	l
>28500	IdentifierDeclType	RenderObjectLayer *
>28501	ExpressionStatement	 
>28502	ShiftExpression	is >> x >> y >> z >> r >> g >> b
>28503	ShiftExpression	x >> y >> z >> r >> g >> b
>28504	ShiftExpression	y >> z >> r >> g >> b
>28505	ShiftExpression	z >> r >> g >> b
>28506	ShiftExpression	r >> g >> b
>28507	ShiftExpression	g >> b
>28508	Identifier	b
>28509	Identifier	g
>28510	Identifier	r
>28511	Identifier	z
>28512	Identifier	y
>28513	Identifier	x
>28514	Identifier	is
>28515	IdentifierDeclStatement	 
>28516	IdentifierDecl	is ( level -> Attribute ( \"parallaxLock\" ) )
>28517	CallExpression	level -> Attribute ( \"parallaxLock\" )
>28518	ArgumentList	\"parallaxLock\"
>28519	Argument	\"parallaxLock\"
>28520	PrimaryExpression	\"parallaxLock\"
>28521	Callee	level -> Attribute
>28522	PtrMemberAccess	level -> Attribute
>28523	Identifier	Attribute
>28524	Identifier	level
>28525	Identifier	is
>28526	IdentifierDeclType	SimpleIStringStream
>28527	IdentifierDeclStatement	 
>28528	IdentifierDecl	b
>28529	Identifier	b
>28530	IdentifierDeclType	int
>28531	IdentifierDecl	g
>28532	Identifier	g
>28533	IdentifierDeclType	int
>28534	IdentifierDecl	r
>28535	Identifier	r
>28536	IdentifierDeclType	int
>28537	IdentifierDecl	z
>28538	Identifier	z
>28539	IdentifierDeclType	int
>28540	IdentifierDecl	y
>28541	Identifier	y
>28542	IdentifierDeclType	int
>28543	IdentifierDecl	x
>28544	Identifier	x
>28545	IdentifierDeclType	int
>28546	Condition	 
>28547	CallExpression	level -> Attribute ( \"parallaxLock\" )
>28548	ArgumentList	\"parallaxLock\"
>28549	Argument	\"parallaxLock\"
>28550	PrimaryExpression	\"parallaxLock\"
>28551	Callee	level -> Attribute
>28552	PtrMemberAccess	level -> Attribute
>28553	Identifier	Attribute
>28554	Identifier	level
>28555	IfStatement	if ( level -> Attribute ( \"parallax\" ) )
>28556	CompoundStatement	 
>28557	ExpressionStatement	 
>28558	CallExpression	levelSF -> SetAttribute ( \"parallax\" , level -> Attribute ( \"parallax\" ) )
>28559	ArgumentList	\"parallax\"
>28560	Argument	level -> Attribute ( \"parallax\" )
>28561	CallExpression	level -> Attribute ( \"parallax\" )
>28562	ArgumentList	\"parallax\"
>28563	Argument	\"parallax\"
>28564	PrimaryExpression	\"parallax\"
>28565	Callee	level -> Attribute
>28566	PtrMemberAccess	level -> Attribute
>28567	Identifier	Attribute
>28568	Identifier	level
>28569	Argument	\"parallax\"
>28570	PrimaryExpression	\"parallax\"
>28571	Callee	levelSF -> SetAttribute
>28572	PtrMemberAccess	levelSF -> SetAttribute
>28573	Identifier	SetAttribute
>28574	Identifier	levelSF
>28575	ExpressionStatement	 
>28576	AssignmentExpr	l -> followCamera = b
>28577	Identifier	b
>28578	PtrMemberAccess	l -> followCamera
>28579	Identifier	followCamera
>28580	Identifier	l
>28581	ExpressionStatement	 
>28582	AssignmentExpr	l = & dsq -> renderObjectLayers [ LR_ELEMENTS16 ]
>28583	UnaryOp	& dsq -> renderObjectLayers [ LR_ELEMENTS16 ]
>28584	ArrayIndexing	dsq -> renderObjectLayers [ LR_ELEMENTS16 ]
>28585	Identifier	LR_ELEMENTS16
>28586	PtrMemberAccess	dsq -> renderObjectLayers
>28587	Identifier	renderObjectLayers
>28588	Identifier	dsq
>28589	UnaryOperator	&
>28590	Identifier	l
>28591	ExpressionStatement	 
>28592	AssignmentExpr	l -> followCamera = g
>28593	Identifier	g
>28594	PtrMemberAccess	l -> followCamera
>28595	Identifier	followCamera
>28596	Identifier	l
>28597	ExpressionStatement	 
>28598	AssignmentExpr	l = & dsq -> renderObjectLayers [ LR_ELEMENTS15 ]
>28599	UnaryOp	& dsq -> renderObjectLayers [ LR_ELEMENTS15 ]
>28600	ArrayIndexing	dsq -> renderObjectLayers [ LR_ELEMENTS15 ]
>28601	Identifier	LR_ELEMENTS15
>28602	PtrMemberAccess	dsq -> renderObjectLayers
>28603	Identifier	renderObjectLayers
>28604	Identifier	dsq
>28605	UnaryOperator	&
>28606	Identifier	l
>28607	ExpressionStatement	 
>28608	AssignmentExpr	l -> followCamera = r
>28609	Identifier	r
>28610	PtrMemberAccess	l -> followCamera
>28611	Identifier	followCamera
>28612	Identifier	l
>28613	ExpressionStatement	 
>28614	AssignmentExpr	l = & dsq -> renderObjectLayers [ LR_ELEMENTS14 ]
>28615	UnaryOp	& dsq -> renderObjectLayers [ LR_ELEMENTS14 ]
>28616	ArrayIndexing	dsq -> renderObjectLayers [ LR_ELEMENTS14 ]
>28617	Identifier	LR_ELEMENTS14
>28618	PtrMemberAccess	dsq -> renderObjectLayers
>28619	Identifier	renderObjectLayers
>28620	Identifier	dsq
>28621	UnaryOperator	&
>28622	Identifier	l
>28623	ExpressionStatement	 
>28624	AssignmentExpr	l -> followCamera = z
>28625	Identifier	z
>28626	PtrMemberAccess	l -> followCamera
>28627	Identifier	followCamera
>28628	Identifier	l
>28629	ExpressionStatement	 
>28630	AssignmentExpr	l = & dsq -> renderObjectLayers [ LR_ELEMENTS12 ]
>28631	UnaryOp	& dsq -> renderObjectLayers [ LR_ELEMENTS12 ]
>28632	ArrayIndexing	dsq -> renderObjectLayers [ LR_ELEMENTS12 ]
>28633	Identifier	LR_ELEMENTS12
>28634	PtrMemberAccess	dsq -> renderObjectLayers
>28635	Identifier	renderObjectLayers
>28636	Identifier	dsq
>28637	UnaryOperator	&
>28638	Identifier	l
>28639	ExpressionStatement	 
>28640	AssignmentExpr	l -> followCamera = y
>28641	Identifier	y
>28642	PtrMemberAccess	l -> followCamera
>28643	Identifier	followCamera
>28644	Identifier	l
>28645	ExpressionStatement	 
>28646	AssignmentExpr	l = & dsq -> renderObjectLayers [ LR_ENTITIES_MINUS4 ]
>28647	UnaryOp	& dsq -> renderObjectLayers [ LR_ENTITIES_MINUS4 ]
>28648	ArrayIndexing	dsq -> renderObjectLayers [ LR_ENTITIES_MINUS4 ]
>28649	Identifier	LR_ENTITIES_MINUS4
>28650	PtrMemberAccess	dsq -> renderObjectLayers
>28651	Identifier	renderObjectLayers
>28652	Identifier	dsq
>28653	UnaryOperator	&
>28654	Identifier	l
>28655	ExpressionStatement	 
>28656	AssignmentExpr	l -> followCamera = y
>28657	Identifier	y
>28658	PtrMemberAccess	l -> followCamera
>28659	Identifier	followCamera
>28660	Identifier	l
>28661	ExpressionStatement	 
>28662	AssignmentExpr	l = & dsq -> renderObjectLayers [ LR_ENTITIES_MINUS4_PLACEHOLDER ]
>28663	UnaryOp	& dsq -> renderObjectLayers [ LR_ENTITIES_MINUS4_PLACEHOLDER ]
>28664	ArrayIndexing	dsq -> renderObjectLayers [ LR_ENTITIES_MINUS4_PLACEHOLDER ]
>28665	Identifier	LR_ENTITIES_MINUS4_PLACEHOLDER
>28666	PtrMemberAccess	dsq -> renderObjectLayers
>28667	Identifier	renderObjectLayers
>28668	Identifier	dsq
>28669	UnaryOperator	&
>28670	Identifier	l
>28671	ExpressionStatement	 
>28672	AssignmentExpr	l -> followCamera = y
>28673	Identifier	y
>28674	PtrMemberAccess	l -> followCamera
>28675	Identifier	followCamera
>28676	Identifier	l
>28677	ExpressionStatement	 
>28678	AssignmentExpr	l = & dsq -> renderObjectLayers [ LR_ELEMENTS11 ]
>28679	UnaryOp	& dsq -> renderObjectLayers [ LR_ELEMENTS11 ]
>28680	ArrayIndexing	dsq -> renderObjectLayers [ LR_ELEMENTS11 ]
>28681	Identifier	LR_ELEMENTS11
>28682	PtrMemberAccess	dsq -> renderObjectLayers
>28683	Identifier	renderObjectLayers
>28684	Identifier	dsq
>28685	UnaryOperator	&
>28686	Identifier	l
>28687	ExpressionStatement	 
>28688	AssignmentExpr	l -> followCamera = x
>28689	Identifier	x
>28690	PtrMemberAccess	l -> followCamera
>28691	Identifier	followCamera
>28692	Identifier	l
>28693	ExpressionStatement	 
>28694	AssignmentExpr	l = & dsq -> renderObjectLayers [ LR_ELEMENTS10 ]
>28695	UnaryOp	& dsq -> renderObjectLayers [ LR_ELEMENTS10 ]
>28696	ArrayIndexing	dsq -> renderObjectLayers [ LR_ELEMENTS10 ]
>28697	Identifier	LR_ELEMENTS10
>28698	PtrMemberAccess	dsq -> renderObjectLayers
>28699	Identifier	renderObjectLayers
>28700	Identifier	dsq
>28701	UnaryOperator	&
>28702	Identifier	l
>28703	IdentifierDeclStatement	 
>28704	IdentifierDecl	* l = 0
>28705	AssignmentExpr	* l = 0
>28706	PrimaryExpression	0
>28707	Identifier	l
>28708	Identifier	l
>28709	IdentifierDeclType	RenderObjectLayer *
>28710	ExpressionStatement	 
>28711	ShiftExpression	is >> x >> y >> z >> r >> g >> b
>28712	ShiftExpression	x >> y >> z >> r >> g >> b
>28713	ShiftExpression	y >> z >> r >> g >> b
>28714	ShiftExpression	z >> r >> g >> b
>28715	ShiftExpression	r >> g >> b
>28716	ShiftExpression	g >> b
>28717	Identifier	b
>28718	Identifier	g
>28719	Identifier	r
>28720	Identifier	z
>28721	Identifier	y
>28722	Identifier	x
>28723	Identifier	is
>28724	IdentifierDeclStatement	 
>28725	IdentifierDecl	b
>28726	Identifier	b
>28727	IdentifierDeclType	float
>28728	IdentifierDecl	g
>28729	Identifier	g
>28730	IdentifierDeclType	float
>28731	IdentifierDecl	r
>28732	Identifier	r
>28733	IdentifierDeclType	float
>28734	IdentifierDecl	z
>28735	Identifier	z
>28736	IdentifierDeclType	float
>28737	IdentifierDecl	y
>28738	Identifier	y
>28739	IdentifierDeclType	float
>28740	IdentifierDecl	x
>28741	Identifier	x
>28742	IdentifierDeclType	float
>28743	IdentifierDeclStatement	 
>28744	IdentifierDecl	is ( level -> Attribute ( \"parallax\" ) )
>28745	CallExpression	level -> Attribute ( \"parallax\" )
>28746	ArgumentList	\"parallax\"
>28747	Argument	\"parallax\"
>28748	PrimaryExpression	\"parallax\"
>28749	Callee	level -> Attribute
>28750	PtrMemberAccess	level -> Attribute
>28751	Identifier	Attribute
>28752	Identifier	level
>28753	Identifier	is
>28754	IdentifierDeclType	SimpleIStringStream
>28755	Condition	 
>28756	CallExpression	level -> Attribute ( \"parallax\" )
>28757	ArgumentList	\"parallax\"
>28758	Argument	\"parallax\"
>28759	PrimaryExpression	\"parallax\"
>28760	Callee	level -> Attribute
>28761	PtrMemberAccess	level -> Attribute
>28762	Identifier	Attribute
>28763	Identifier	level
>28764	IfStatement	if ( level -> Attribute ( \"gradient\" ) )
>28765	CompoundStatement	 
>28766	ExpressionStatement	 
>28767	CallExpression	levelSF -> SetAttribute ( \"gradient\" , 1 )
>28768	ArgumentList	\"gradient\"
>28769	Argument	1
>28770	PrimaryExpression	1
>28771	Argument	\"gradient\"
>28772	PrimaryExpression	\"gradient\"
>28773	Callee	levelSF -> SetAttribute
>28774	PtrMemberAccess	levelSF -> SetAttribute
>28775	Identifier	SetAttribute
>28776	Identifier	levelSF
>28777	ExpressionStatement	 
>28778	CallExpression	createGradient ( )
>28779	ArgumentList	 
>28780	Callee	createGradient
>28781	Identifier	createGradient
>28782	IfStatement	if ( level -> Attribute ( \"gradBtm\" ) )
>28783	CompoundStatement	 
>28784	ExpressionStatement	 
>28785	CallExpression	levelSF -> SetAttribute ( \"gradBtm\" , level -> Attribute ( \"gradBtm\" ) )
>28786	ArgumentList	\"gradBtm\"
>28787	Argument	level -> Attribute ( \"gradBtm\" )
>28788	CallExpression	level -> Attribute ( \"gradBtm\" )
>28789	ArgumentList	\"gradBtm\"
>28790	Argument	\"gradBtm\"
>28791	PrimaryExpression	\"gradBtm\"
>28792	Callee	level -> Attribute
>28793	PtrMemberAccess	level -> Attribute
>28794	Identifier	Attribute
>28795	Identifier	level
>28796	Argument	\"gradBtm\"
>28797	PrimaryExpression	\"gradBtm\"
>28798	Callee	levelSF -> SetAttribute
>28799	PtrMemberAccess	levelSF -> SetAttribute
>28800	Identifier	SetAttribute
>28801	Identifier	levelSF
>28802	ExpressionStatement	 
>28803	ShiftExpression	is >> gradBtm . x >> gradBtm . y >> gradBtm . z
>28804	ShiftExpression	gradBtm . x >> gradBtm . y >> gradBtm . z
>28805	ShiftExpression	gradBtm . y >> gradBtm . z
>28806	MemberAccess	gradBtm . z
>28807	Identifier	z
>28808	Identifier	gradBtm
>28809	MemberAccess	gradBtm . y
>28810	Identifier	y
>28811	Identifier	gradBtm
>28812	MemberAccess	gradBtm . x
>28813	Identifier	x
>28814	Identifier	gradBtm
>28815	Identifier	is
>28816	IdentifierDeclStatement	 
>28817	IdentifierDecl	is ( level -> Attribute ( \"gradBtm\" ) )
>28818	CallExpression	level -> Attribute ( \"gradBtm\" )
>28819	ArgumentList	\"gradBtm\"
>28820	Argument	\"gradBtm\"
>28821	PrimaryExpression	\"gradBtm\"
>28822	Callee	level -> Attribute
>28823	PtrMemberAccess	level -> Attribute
>28824	Identifier	Attribute
>28825	Identifier	level
>28826	Identifier	is
>28827	IdentifierDeclType	SimpleIStringStream
>28828	Condition	 
>28829	CallExpression	level -> Attribute ( \"gradBtm\" )
>28830	ArgumentList	\"gradBtm\"
>28831	Argument	\"gradBtm\"
>28832	PrimaryExpression	\"gradBtm\"
>28833	Callee	level -> Attribute
>28834	PtrMemberAccess	level -> Attribute
>28835	Identifier	Attribute
>28836	Identifier	level
>28837	IfStatement	if ( level -> Attribute ( \"gradTop\" ) )
>28838	CompoundStatement	 
>28839	ExpressionStatement	 
>28840	CallExpression	levelSF -> SetAttribute ( \"gradTop\" , level -> Attribute ( \"gradTop\" ) )
>28841	ArgumentList	\"gradTop\"
>28842	Argument	level -> Attribute ( \"gradTop\" )
>28843	CallExpression	level -> Attribute ( \"gradTop\" )
>28844	ArgumentList	\"gradTop\"
>28845	Argument	\"gradTop\"
>28846	PrimaryExpression	\"gradTop\"
>28847	Callee	level -> Attribute
>28848	PtrMemberAccess	level -> Attribute
>28849	Identifier	Attribute
>28850	Identifier	level
>28851	Argument	\"gradTop\"
>28852	PrimaryExpression	\"gradTop\"
>28853	Callee	levelSF -> SetAttribute
>28854	PtrMemberAccess	levelSF -> SetAttribute
>28855	Identifier	SetAttribute
>28856	Identifier	levelSF
>28857	ExpressionStatement	 
>28858	ShiftExpression	is >> gradTop . x >> gradTop . y >> gradTop . z
>28859	ShiftExpression	gradTop . x >> gradTop . y >> gradTop . z
>28860	ShiftExpression	gradTop . y >> gradTop . z
>28861	MemberAccess	gradTop . z
>28862	Identifier	z
>28863	Identifier	gradTop
>28864	MemberAccess	gradTop . y
>28865	Identifier	y
>28866	Identifier	gradTop
>28867	MemberAccess	gradTop . x
>28868	Identifier	x
>28869	Identifier	gradTop
>28870	Identifier	is
>28871	IdentifierDeclStatement	 
>28872	IdentifierDecl	is ( level -> Attribute ( \"gradTop\" ) )
>28873	CallExpression	level -> Attribute ( \"gradTop\" )
>28874	ArgumentList	\"gradTop\"
>28875	Argument	\"gradTop\"
>28876	PrimaryExpression	\"gradTop\"
>28877	Callee	level -> Attribute
>28878	PtrMemberAccess	level -> Attribute
>28879	Identifier	Attribute
>28880	Identifier	level
>28881	Identifier	is
>28882	IdentifierDeclType	SimpleIStringStream
>28883	Condition	 
>28884	CallExpression	level -> Attribute ( \"gradTop\" )
>28885	ArgumentList	\"gradTop\"
>28886	Argument	\"gradTop\"
>28887	PrimaryExpression	\"gradTop\"
>28888	Callee	level -> Attribute
>28889	PtrMemberAccess	level -> Attribute
>28890	Identifier	Attribute
>28891	Identifier	level
>28892	Condition	 
>28893	CallExpression	level -> Attribute ( \"gradient\" )
>28894	ArgumentList	\"gradient\"
>28895	Argument	\"gradient\"
>28896	PrimaryExpression	\"gradient\"
>28897	Callee	level -> Attribute
>28898	PtrMemberAccess	level -> Attribute
>28899	Identifier	Attribute
>28900	Identifier	level
>28901	ExpressionStatement	 
>28902	AssignmentExpr	gradTop = gradBtm = Vector ( 0 , 0 , 0 )
>28903	AssignmentExpr	gradBtm = Vector ( 0 , 0 , 0 )
>28904	CallExpression	Vector ( 0 , 0 , 0 )
>28905	ArgumentList	0
>28906	Argument	0
>28907	PrimaryExpression	0
>28908	Argument	0
>28909	PrimaryExpression	0
>28910	Argument	0
>28911	PrimaryExpression	0
>28912	Callee	Vector
>28913	Identifier	Vector
>28914	Identifier	gradBtm
>28915	Identifier	gradTop
>28916	IfStatement	if ( level -> Attribute ( \"bg\" ) )
>28917	ElseStatement	else
>28918	CompoundStatement	 
>28919	ExpressionStatement	 
>28920	AssignmentExpr	bg -> alpha = 0
>28921	PrimaryExpression	0
>28922	PtrMemberAccess	bg -> alpha
>28923	Identifier	alpha
>28924	Identifier	bg
>28925	CompoundStatement	 
>28926	IfStatement	if ( ! tex . empty ( ) )
>28927	ElseStatement	else
>28928	CompoundStatement	 
>28929	ExpressionStatement	 
>28930	AssignmentExpr	bg -> alpha = 0
>28931	PrimaryExpression	0
>28932	PtrMemberAccess	bg -> alpha
>28933	Identifier	alpha
>28934	Identifier	bg
>28935	CompoundStatement	 
>28936	ExpressionStatement	 
>28937	CallExpression	levelSF -> SetAttribute ( \"bg\" , tex . c_str ( ) )
>28938	ArgumentList	\"bg\"
>28939	Argument	tex . c_str ( )
>28940	CallExpression	tex . c_str ( )
>28941	ArgumentList	 
>28942	Callee	tex . c_str
>28943	MemberAccess	tex . c_str
>28944	Identifier	c_str
>28945	Identifier	tex
>28946	Argument	\"bg\"
>28947	PrimaryExpression	\"bg\"
>28948	Callee	levelSF -> SetAttribute
>28949	PtrMemberAccess	levelSF -> SetAttribute
>28950	Identifier	SetAttribute
>28951	Identifier	levelSF
>28952	ExpressionStatement	 
>28953	CallExpression	bg -> setWidthHeight ( 900 , 600 )
>28954	ArgumentList	900
>28955	Argument	600
>28956	PrimaryExpression	600
>28957	Argument	900
>28958	PrimaryExpression	900
>28959	Callee	bg -> setWidthHeight
>28960	PtrMemberAccess	bg -> setWidthHeight
>28961	Identifier	setWidthHeight
>28962	Identifier	bg
>28963	ExpressionStatement	 
>28964	CallExpression	bg -> setTexture ( tex )
>28965	ArgumentList	tex
>28966	Argument	tex
>28967	Identifier	tex
>28968	Callee	bg -> setTexture
>28969	PtrMemberAccess	bg -> setTexture
>28970	Identifier	setTexture
>28971	Identifier	bg
>28972	Condition	 
>28973	UnaryOp	! tex . empty ( )
>28974	CallExpression	tex . empty ( )
>28975	ArgumentList	 
>28976	Callee	tex . empty
>28977	MemberAccess	tex . empty
>28978	Identifier	empty
>28979	Identifier	tex
>28980	UnaryOperator	!
>28981	IdentifierDeclStatement	 
>28982	IdentifierDecl	tex = std 
>28983	AssignmentExpr	tex = std 
>28984	CallExpression	std 
>28985	ArgumentList	level -> Attribute ( \"bg\" )
>28986	Argument	level -> Attribute ( \"bg\" )
>28987	CallExpression	level -> Attribute ( \"bg\" )
>28988	ArgumentList	\"bg\"
>28989	Argument	\"bg\"
>28990	PrimaryExpression	\"bg\"
>28991	Callee	level -> Attribute
>28992	PtrMemberAccess	level -> Attribute
>28993	Identifier	Attribute
>28994	Identifier	level
>28995	Callee	std 
>28996	Identifier	std 
>28997	Identifier	tex
>28998	Identifier	tex
>28999	IdentifierDeclType	std 
>29000	Condition	 
>29001	CallExpression	level -> Attribute ( \"bg\" )
>29002	ArgumentList	\"bg\"
>29003	Argument	\"bg\"
>29004	PrimaryExpression	\"bg\"
>29005	Callee	level -> Attribute
>29006	PtrMemberAccess	level -> Attribute
>29007	Identifier	Attribute
>29008	Identifier	level
>29009	IfStatement	if ( level -> Attribute ( \"natureForm\" ) )
>29010	CompoundStatement	 
>29011	ExpressionStatement	 
>29012	CallExpression	levelSF -> SetAttribute ( \"natureForm\" , sceneNatureForm . c_str ( ) )
>29013	ArgumentList	\"natureForm\"
>29014	Argument	sceneNatureForm . c_str ( )
>29015	CallExpression	sceneNatureForm . c_str ( )
>29016	ArgumentList	 
>29017	Callee	sceneNatureForm . c_str
>29018	MemberAccess	sceneNatureForm . c_str
>29019	Identifier	c_str
>29020	Identifier	sceneNatureForm
>29021	Argument	\"natureForm\"
>29022	PrimaryExpression	\"natureForm\"
>29023	Callee	levelSF -> SetAttribute
>29024	PtrMemberAccess	levelSF -> SetAttribute
>29025	Identifier	SetAttribute
>29026	Identifier	levelSF
>29027	ExpressionStatement	 
>29028	AssignmentExpr	sceneNatureForm = level -> Attribute ( \"natureForm\" )
>29029	CallExpression	level -> Attribute ( \"natureForm\" )
>29030	ArgumentList	\"natureForm\"
>29031	Argument	\"natureForm\"
>29032	PrimaryExpression	\"natureForm\"
>29033	Callee	level -> Attribute
>29034	PtrMemberAccess	level -> Attribute
>29035	Identifier	Attribute
>29036	Identifier	level
>29037	Identifier	sceneNatureForm
>29038	Condition	 
>29039	CallExpression	level -> Attribute ( \"natureForm\" )
>29040	ArgumentList	\"natureForm\"
>29041	Argument	\"natureForm\"
>29042	PrimaryExpression	\"natureForm\"
>29043	Callee	level -> Attribute
>29044	PtrMemberAccess	level -> Attribute
>29045	Identifier	Attribute
>29046	Identifier	level
>29047	IfStatement	if ( level -> Attribute ( \"maxZoom\" ) )
>29048	CompoundStatement	 
>29049	ExpressionStatement	 
>29050	CallExpression	levelSF -> SetAttribute ( \"maxZoom\" , os . str ( ) . c_str ( ) )
>29051	ArgumentList	\"maxZoom\"
>29052	Argument	os . str ( ) . c_str ( )
>29053	CallExpression	os . str ( ) . c_str ( )
>29054	ArgumentList	 
>29055	Callee	os . str ( ) . c_str
>29056	MemberAccess	os . str ( ) . c_str
>29057	Identifier	c_str
>29058	CallExpression	os . str ( )
>29059	ArgumentList	 
>29060	Callee	os . str
>29061	MemberAccess	os . str
>29062	Identifier	str
>29063	Identifier	os
>29064	Argument	\"maxZoom\"
>29065	PrimaryExpression	\"maxZoom\"
>29066	Callee	levelSF -> SetAttribute
>29067	PtrMemberAccess	levelSF -> SetAttribute
>29068	Identifier	SetAttribute
>29069	Identifier	levelSF
>29070	ExpressionStatement	 
>29071	ShiftExpression	os << maxZoom
>29072	Identifier	maxZoom
>29073	Identifier	os
>29074	IdentifierDeclStatement	 
>29075	IdentifierDecl	os
>29076	Identifier	os
>29077	IdentifierDeclType	std 
>29078	ExpressionStatement	 
>29079	AssignmentExpr	maxZoom = atof ( level -> Attribute ( \"maxZoom\" ) )
>29080	CallExpression	atof ( level -> Attribute ( \"maxZoom\" ) )
>29081	ArgumentList	level -> Attribute ( \"maxZoom\" )
>29082	Argument	level -> Attribute ( \"maxZoom\" )
>29083	CallExpression	level -> Attribute ( \"maxZoom\" )
>29084	ArgumentList	\"maxZoom\"
>29085	Argument	\"maxZoom\"
>29086	PrimaryExpression	\"maxZoom\"
>29087	Callee	level -> Attribute
>29088	PtrMemberAccess	level -> Attribute
>29089	Identifier	Attribute
>29090	Identifier	level
>29091	Callee	atof
>29092	Identifier	atof
>29093	Identifier	maxZoom
>29094	Condition	 
>29095	CallExpression	level -> Attribute ( \"maxZoom\" )
>29096	ArgumentList	\"maxZoom\"
>29097	Argument	\"maxZoom\"
>29098	PrimaryExpression	\"maxZoom\"
>29099	Callee	level -> Attribute
>29100	PtrMemberAccess	level -> Attribute
>29101	Identifier	Attribute
>29102	Identifier	level
>29103	IfStatement	if ( level -> Attribute ( \"cameraConstrained\" ) )
>29104	CompoundStatement	 
>29105	ExpressionStatement	 
>29106	CallExpression	debugLog ( os . str ( ) )
>29107	ArgumentList	os . str ( )
>29108	Argument	os . str ( )
>29109	CallExpression	os . str ( )
>29110	ArgumentList	 
>29111	Callee	os . str
>29112	MemberAccess	os . str
>29113	Identifier	str
>29114	Identifier	os
>29115	Callee	debugLog
>29116	Identifier	debugLog
>29117	ExpressionStatement	 
>29118	ShiftExpression	os << \"cameraConstrained
>29119	ShiftExpression	\"cameraConstrained
>29120	Identifier	cameraConstrained
>29121	PrimaryExpression	\"cameraConstrained
>29122	Identifier	os
>29123	IdentifierDeclStatement	 
>29124	IdentifierDecl	os
>29125	Identifier	os
>29126	IdentifierDeclType	std 
>29127	ExpressionStatement	 
>29128	CallExpression	levelSF -> SetAttribute ( \"cameraConstrained\" , cameraConstrained )
>29129	ArgumentList	\"cameraConstrained\"
>29130	Argument	cameraConstrained
>29131	Identifier	cameraConstrained
>29132	Argument	\"cameraConstrained\"
>29133	PrimaryExpression	\"cameraConstrained\"
>29134	Callee	levelSF -> SetAttribute
>29135	PtrMemberAccess	levelSF -> SetAttribute
>29136	Identifier	SetAttribute
>29137	Identifier	levelSF
>29138	ExpressionStatement	 
>29139	ShiftExpression	is >> cameraConstrained
>29140	Identifier	cameraConstrained
>29141	Identifier	is
>29142	IdentifierDeclStatement	 
>29143	IdentifierDecl	is ( level -> Attribute ( \"cameraConstrained\" ) )
>29144	CallExpression	level -> Attribute ( \"cameraConstrained\" )
>29145	ArgumentList	\"cameraConstrained\"
>29146	Argument	\"cameraConstrained\"
>29147	PrimaryExpression	\"cameraConstrained\"
>29148	Callee	level -> Attribute
>29149	PtrMemberAccess	level -> Attribute
>29150	Identifier	Attribute
>29151	Identifier	level
>29152	Identifier	is
>29153	IdentifierDeclType	SimpleIStringStream
>29154	Condition	 
>29155	CallExpression	level -> Attribute ( \"cameraConstrained\" )
>29156	ArgumentList	\"cameraConstrained\"
>29157	Argument	\"cameraConstrained\"
>29158	PrimaryExpression	\"cameraConstrained\"
>29159	Callee	level -> Attribute
>29160	PtrMemberAccess	level -> Attribute
>29161	Identifier	Attribute
>29162	Identifier	level
>29163	IfStatement	if ( level -> Attribute ( \"bgRepeat\" ) )
>29164	CompoundStatement	 
>29165	ExpressionStatement	 
>29166	CallExpression	levelSF -> SetAttribute ( \"bgRepeat\" , level -> Attribute ( \"bgRepeat\" ) )
>29167	ArgumentList	\"bgRepeat\"
>29168	Argument	level -> Attribute ( \"bgRepeat\" )
>29169	CallExpression	level -> Attribute ( \"bgRepeat\" )
>29170	ArgumentList	\"bgRepeat\"
>29171	Argument	\"bgRepeat\"
>29172	PrimaryExpression	\"bgRepeat\"
>29173	Callee	level -> Attribute
>29174	PtrMemberAccess	level -> Attribute
>29175	Identifier	Attribute
>29176	Identifier	level
>29177	Argument	\"bgRepeat\"
>29178	PrimaryExpression	\"bgRepeat\"
>29179	Callee	levelSF -> SetAttribute
>29180	PtrMemberAccess	levelSF -> SetAttribute
>29181	Identifier	SetAttribute
>29182	Identifier	levelSF
>29183	ExpressionStatement	 
>29184	ShiftExpression	is >> backgroundImageRepeat
>29185	Identifier	backgroundImageRepeat
>29186	Identifier	is
>29187	IdentifierDeclStatement	 
>29188	IdentifierDecl	is ( level -> Attribute ( \"bgRepeat\" ) )
>29189	CallExpression	level -> Attribute ( \"bgRepeat\" )
>29190	ArgumentList	\"bgRepeat\"
>29191	Argument	\"bgRepeat\"
>29192	PrimaryExpression	\"bgRepeat\"
>29193	Callee	level -> Attribute
>29194	PtrMemberAccess	level -> Attribute
>29195	Identifier	Attribute
>29196	Identifier	level
>29197	Identifier	is
>29198	IdentifierDeclType	SimpleIStringStream
>29199	Condition	 
>29200	CallExpression	level -> Attribute ( \"bgRepeat\" )
>29201	ArgumentList	\"bgRepeat\"
>29202	Argument	\"bgRepeat\"
>29203	PrimaryExpression	\"bgRepeat\"
>29204	Callee	level -> Attribute
>29205	PtrMemberAccess	level -> Attribute
>29206	Identifier	Attribute
>29207	Identifier	level
>29208	ExpressionStatement	 
>29209	CallExpression	dsq -> darkLayer . toggle ( true )
>29210	ArgumentList	true
>29211	Argument	true
>29212	Identifier	true
>29213	Callee	dsq -> darkLayer . toggle
>29214	MemberAccess	dsq -> darkLayer . toggle
>29215	Identifier	toggle
>29216	PtrMemberAccess	dsq -> darkLayer
>29217	Identifier	darkLayer
>29218	Identifier	dsq
>29219	IfStatement	if ( level -> Attribute ( \"bnat\" ) )
>29220	ElseStatement	else
>29221	CompoundStatement	 
>29222	ExpressionStatement	 
>29223	AssignmentExpr	bNatural = false
>29224	Identifier	false
>29225	Identifier	bNatural
>29226	CompoundStatement	 
>29227	ExpressionStatement	 
>29228	CallExpression	levelSF -> SetAttribute ( \"bnat\" , 1 )
>29229	ArgumentList	\"bnat\"
>29230	Argument	1
>29231	PrimaryExpression	1
>29232	Argument	\"bnat\"
>29233	PrimaryExpression	\"bnat\"
>29234	Callee	levelSF -> SetAttribute
>29235	PtrMemberAccess	levelSF -> SetAttribute
>29236	Identifier	SetAttribute
>29237	Identifier	levelSF
>29238	ExpressionStatement	 
>29239	AssignmentExpr	bNatural = atoi ( level -> Attribute ( \"bnat\" ) )
>29240	CallExpression	atoi ( level -> Attribute ( \"bnat\" ) )
>29241	ArgumentList	level -> Attribute ( \"bnat\" )
>29242	Argument	level -> Attribute ( \"bnat\" )
>29243	CallExpression	level -> Attribute ( \"bnat\" )
>29244	ArgumentList	\"bnat\"
>29245	Argument	\"bnat\"
>29246	PrimaryExpression	\"bnat\"
>29247	Callee	level -> Attribute
>29248	PtrMemberAccess	level -> Attribute
>29249	Identifier	Attribute
>29250	Identifier	level
>29251	Callee	atoi
>29252	Identifier	atoi
>29253	Identifier	bNatural
>29254	Condition	 
>29255	CallExpression	level -> Attribute ( \"bnat\" )
>29256	ArgumentList	\"bnat\"
>29257	Argument	\"bnat\"
>29258	PrimaryExpression	\"bnat\"
>29259	Callee	level -> Attribute
>29260	PtrMemberAccess	level -> Attribute
>29261	Identifier	Attribute
>29262	Identifier	level
>29263	IfStatement	if ( level -> Attribute ( \"airSfxLoop\" ) )
>29264	CompoundStatement	 
>29265	ExpressionStatement	 
>29266	CallExpression	levelSF -> SetAttribute ( \"airSfxLoop\" , airSfxLoop . c_str ( ) )
>29267	ArgumentList	\"airSfxLoop\"
>29268	Argument	airSfxLoop . c_str ( )
>29269	CallExpression	airSfxLoop . c_str ( )
>29270	ArgumentList	 
>29271	Callee	airSfxLoop . c_str
>29272	MemberAccess	airSfxLoop . c_str
>29273	Identifier	c_str
>29274	Identifier	airSfxLoop
>29275	Argument	\"airSfxLoop\"
>29276	PrimaryExpression	\"airSfxLoop\"
>29277	Callee	levelSF -> SetAttribute
>29278	PtrMemberAccess	levelSF -> SetAttribute
>29279	Identifier	SetAttribute
>29280	Identifier	levelSF
>29281	ExpressionStatement	 
>29282	AssignmentExpr	airSfxLoop = level -> Attribute ( \"airSfxLoop\" )
>29283	CallExpression	level -> Attribute ( \"airSfxLoop\" )
>29284	ArgumentList	\"airSfxLoop\"
>29285	Argument	\"airSfxLoop\"
>29286	PrimaryExpression	\"airSfxLoop\"
>29287	Callee	level -> Attribute
>29288	PtrMemberAccess	level -> Attribute
>29289	Identifier	Attribute
>29290	Identifier	level
>29291	Identifier	airSfxLoop
>29292	Condition	 
>29293	CallExpression	level -> Attribute ( \"airSfxLoop\" )
>29294	ArgumentList	\"airSfxLoop\"
>29295	Argument	\"airSfxLoop\"
>29296	PrimaryExpression	\"airSfxLoop\"
>29297	Callee	level -> Attribute
>29298	PtrMemberAccess	level -> Attribute
>29299	Identifier	Attribute
>29300	Identifier	level
>29301	IfStatement	if ( level -> Attribute ( \"bgSfxLoop\" ) )
>29302	CompoundStatement	 
>29303	ExpressionStatement	 
>29304	CallExpression	levelSF -> SetAttribute ( \"bgSfxLoop\" , bgSfxLoop . c_str ( ) )
>29305	ArgumentList	\"bgSfxLoop\"
>29306	Argument	bgSfxLoop . c_str ( )
>29307	CallExpression	bgSfxLoop . c_str ( )
>29308	ArgumentList	 
>29309	Callee	bgSfxLoop . c_str
>29310	MemberAccess	bgSfxLoop . c_str
>29311	Identifier	c_str
>29312	Identifier	bgSfxLoop
>29313	Argument	\"bgSfxLoop\"
>29314	PrimaryExpression	\"bgSfxLoop\"
>29315	Callee	levelSF -> SetAttribute
>29316	PtrMemberAccess	levelSF -> SetAttribute
>29317	Identifier	SetAttribute
>29318	Identifier	levelSF
>29319	ExpressionStatement	 
>29320	AssignmentExpr	bgSfxLoop = level -> Attribute ( \"bgSfxLoop\" )
>29321	CallExpression	level -> Attribute ( \"bgSfxLoop\" )
>29322	ArgumentList	\"bgSfxLoop\"
>29323	Argument	\"bgSfxLoop\"
>29324	PrimaryExpression	\"bgSfxLoop\"
>29325	Callee	level -> Attribute
>29326	PtrMemberAccess	level -> Attribute
>29327	Identifier	Attribute
>29328	Identifier	level
>29329	Identifier	bgSfxLoop
>29330	Condition	 
>29331	CallExpression	level -> Attribute ( \"bgSfxLoop\" )
>29332	ArgumentList	\"bgSfxLoop\"
>29333	Argument	\"bgSfxLoop\"
>29334	PrimaryExpression	\"bgSfxLoop\"
>29335	Callee	level -> Attribute
>29336	PtrMemberAccess	level -> Attribute
>29337	Identifier	Attribute
>29338	Identifier	level
>29339	IfStatement	if ( level -> Attribute ( \"worldMapIndex\" ) )
>29340	CompoundStatement	 
>29341	ExpressionStatement	 
>29342	CallExpression	levelSF -> SetAttribute ( \"worldMapIndex\" , worldMapIndex )
>29343	ArgumentList	\"worldMapIndex\"
>29344	Argument	worldMapIndex
>29345	Identifier	worldMapIndex
>29346	Argument	\"worldMapIndex\"
>29347	PrimaryExpression	\"worldMapIndex\"
>29348	Callee	levelSF -> SetAttribute
>29349	PtrMemberAccess	levelSF -> SetAttribute
>29350	Identifier	SetAttribute
>29351	Identifier	levelSF
>29352	ExpressionStatement	 
>29353	AssignmentExpr	worldMapIndex = atoi ( level -> Attribute ( \"worldMapIndex\" ) )
>29354	CallExpression	atoi ( level -> Attribute ( \"worldMapIndex\" ) )
>29355	ArgumentList	level -> Attribute ( \"worldMapIndex\" )
>29356	Argument	level -> Attribute ( \"worldMapIndex\" )
>29357	CallExpression	level -> Attribute ( \"worldMapIndex\" )
>29358	ArgumentList	\"worldMapIndex\"
>29359	Argument	\"worldMapIndex\"
>29360	PrimaryExpression	\"worldMapIndex\"
>29361	Callee	level -> Attribute
>29362	PtrMemberAccess	level -> Attribute
>29363	Identifier	Attribute
>29364	Identifier	level
>29365	Callee	atoi
>29366	Identifier	atoi
>29367	Identifier	worldMapIndex
>29368	Condition	 
>29369	CallExpression	level -> Attribute ( \"worldMapIndex\" )
>29370	ArgumentList	\"worldMapIndex\"
>29371	Argument	\"worldMapIndex\"
>29372	PrimaryExpression	\"worldMapIndex\"
>29373	Callee	level -> Attribute
>29374	PtrMemberAccess	level -> Attribute
>29375	Identifier	Attribute
>29376	Identifier	level
>29377	IfStatement	if ( level -> Attribute ( \"waterLevel\" ) )
>29378	CompoundStatement	 
>29379	ExpressionStatement	 
>29380	CallExpression	levelSF -> SetAttribute ( \"waterLevel\" , waterLevel . x )
>29381	ArgumentList	\"waterLevel\"
>29382	Argument	waterLevel . x
>29383	MemberAccess	waterLevel . x
>29384	Identifier	x
>29385	Identifier	waterLevel
>29386	Argument	\"waterLevel\"
>29387	PrimaryExpression	\"waterLevel\"
>29388	Callee	levelSF -> SetAttribute
>29389	PtrMemberAccess	levelSF -> SetAttribute
>29390	Identifier	SetAttribute
>29391	Identifier	levelSF
>29392	ExpressionStatement	 
>29393	AssignmentExpr	saveWaterLevel = atoi ( level -> Attribute ( \"waterLevel\" ) )
>29394	CallExpression	atoi ( level -> Attribute ( \"waterLevel\" ) )
>29395	ArgumentList	level -> Attribute ( \"waterLevel\" )
>29396	Argument	level -> Attribute ( \"waterLevel\" )
>29397	CallExpression	level -> Attribute ( \"waterLevel\" )
>29398	ArgumentList	\"waterLevel\"
>29399	Argument	\"waterLevel\"
>29400	PrimaryExpression	\"waterLevel\"
>29401	Callee	level -> Attribute
>29402	PtrMemberAccess	level -> Attribute
>29403	Identifier	Attribute
>29404	Identifier	level
>29405	Callee	atoi
>29406	Identifier	atoi
>29407	Identifier	saveWaterLevel
>29408	ExpressionStatement	 
>29409	AssignmentExpr	waterLevel = atoi ( level -> Attribute ( \"waterLevel\" ) )
>29410	CallExpression	atoi ( level -> Attribute ( \"waterLevel\" ) )
>29411	ArgumentList	level -> Attribute ( \"waterLevel\" )
>29412	Argument	level -> Attribute ( \"waterLevel\" )
>29413	CallExpression	level -> Attribute ( \"waterLevel\" )
>29414	ArgumentList	\"waterLevel\"
>29415	Argument	\"waterLevel\"
>29416	PrimaryExpression	\"waterLevel\"
>29417	Callee	level -> Attribute
>29418	PtrMemberAccess	level -> Attribute
>29419	Identifier	Attribute
>29420	Identifier	level
>29421	Callee	atoi
>29422	Identifier	atoi
>29423	Identifier	waterLevel
>29424	ExpressionStatement	 
>29425	AssignmentExpr	useWaterLevel = true
>29426	Identifier	true
>29427	Identifier	useWaterLevel
>29428	Condition	 
>29429	CallExpression	level -> Attribute ( \"waterLevel\" )
>29430	ArgumentList	\"waterLevel\"
>29431	Argument	\"waterLevel\"
>29432	PrimaryExpression	\"waterLevel\"
>29433	Callee	level -> Attribute
>29434	PtrMemberAccess	level -> Attribute
>29435	Identifier	Attribute
>29436	Identifier	level
>29437	IfStatement	if ( level -> Attribute ( \"tileset\" ) )
>29438	ElseStatement	else
>29439	IfStatement	if ( level -> Attribute ( \"elementTemplatePack\" ) )
>29440	ElseStatement	else
>29441	ReturnStatement	 
>29442	Identifier	false
>29443	CompoundStatement	 
>29444	ExpressionStatement	 
>29445	CallExpression	levelSF -> SetAttribute ( \"tileset\" , elementTemplatePack . c_str ( ) )
>29446	ArgumentList	\"tileset\"
>29447	Argument	elementTemplatePack . c_str ( )
>29448	CallExpression	elementTemplatePack . c_str ( )
>29449	ArgumentList	 
>29450	Callee	elementTemplatePack . c_str
>29451	MemberAccess	elementTemplatePack . c_str
>29452	Identifier	c_str
>29453	Identifier	elementTemplatePack
>29454	Argument	\"tileset\"
>29455	PrimaryExpression	\"tileset\"
>29456	Callee	levelSF -> SetAttribute
>29457	PtrMemberAccess	levelSF -> SetAttribute
>29458	Identifier	SetAttribute
>29459	Identifier	levelSF
>29460	ExpressionStatement	 
>29461	CallExpression	loadElementTemplates ( elementTemplatePack )
>29462	ArgumentList	elementTemplatePack
>29463	Argument	elementTemplatePack
>29464	Identifier	elementTemplatePack
>29465	Callee	loadElementTemplates
>29466	Identifier	loadElementTemplates
>29467	ExpressionStatement	 
>29468	AssignmentExpr	elementTemplatePack = level -> Attribute ( \"elementTemplatePack\" )
>29469	CallExpression	level -> Attribute ( \"elementTemplatePack\" )
>29470	ArgumentList	\"elementTemplatePack\"
>29471	Argument	\"elementTemplatePack\"
>29472	PrimaryExpression	\"elementTemplatePack\"
>29473	Callee	level -> Attribute
>29474	PtrMemberAccess	level -> Attribute
>29475	Identifier	Attribute
>29476	Identifier	level
>29477	Identifier	elementTemplatePack
>29478	Condition	 
>29479	CallExpression	level -> Attribute ( \"elementTemplatePack\" )
>29480	ArgumentList	\"elementTemplatePack\"
>29481	Argument	\"elementTemplatePack\"
>29482	PrimaryExpression	\"elementTemplatePack\"
>29483	Callee	level -> Attribute
>29484	PtrMemberAccess	level -> Attribute
>29485	Identifier	Attribute
>29486	Identifier	level
>29487	CompoundStatement	 
>29488	ExpressionStatement	 
>29489	CallExpression	levelSF -> SetAttribute ( \"tileset\" , elementTemplatePack . c_str ( ) )
>29490	ArgumentList	\"tileset\"
>29491	Argument	elementTemplatePack . c_str ( )
>29492	CallExpression	elementTemplatePack . c_str ( )
>29493	ArgumentList	 
>29494	Callee	elementTemplatePack . c_str
>29495	MemberAccess	elementTemplatePack . c_str
>29496	Identifier	c_str
>29497	Identifier	elementTemplatePack
>29498	Argument	\"tileset\"
>29499	PrimaryExpression	\"tileset\"
>29500	Callee	levelSF -> SetAttribute
>29501	PtrMemberAccess	levelSF -> SetAttribute
>29502	Identifier	SetAttribute
>29503	Identifier	levelSF
>29504	ExpressionStatement	 
>29505	CallExpression	loadElementTemplates ( elementTemplatePack )
>29506	ArgumentList	elementTemplatePack
>29507	Argument	elementTemplatePack
>29508	Identifier	elementTemplatePack
>29509	Callee	loadElementTemplates
>29510	Identifier	loadElementTemplates
>29511	ExpressionStatement	 
>29512	AssignmentExpr	elementTemplatePack = level -> Attribute ( \"tileset\" )
>29513	CallExpression	level -> Attribute ( \"tileset\" )
>29514	ArgumentList	\"tileset\"
>29515	Argument	\"tileset\"
>29516	PrimaryExpression	\"tileset\"
>29517	Callee	level -> Attribute
>29518	PtrMemberAccess	level -> Attribute
>29519	Identifier	Attribute
>29520	Identifier	level
>29521	Identifier	elementTemplatePack
>29522	Condition	 
>29523	CallExpression	level -> Attribute ( \"tileset\" )
>29524	ArgumentList	\"tileset\"
>29525	Argument	\"tileset\"
>29526	PrimaryExpression	\"tileset\"
>29527	Callee	level -> Attribute
>29528	PtrMemberAccess	level -> Attribute
>29529	Identifier	Attribute
>29530	Identifier	level
>29531	IdentifierDeclStatement	 
>29532	IdentifierDecl	* levelSF = saveFile -> NewElement ( \"Level\" )
>29533	AssignmentExpr	* levelSF = saveFile -> NewElement ( \"Level\" )
>29534	CallExpression	saveFile -> NewElement ( \"Level\" )
>29535	ArgumentList	\"Level\"
>29536	Argument	\"Level\"
>29537	PrimaryExpression	\"Level\"
>29538	Callee	saveFile -> NewElement
>29539	PtrMemberAccess	saveFile -> NewElement
>29540	Identifier	NewElement
>29541	Identifier	saveFile
>29542	Identifier	levelSF
>29543	Identifier	levelSF
>29544	IdentifierDeclType	XMLElement *
>29545	Condition	 
>29546	Identifier	level
>29547	IdentifierDeclStatement	 
>29548	IdentifierDecl	* level = doc . FirstChildElement ( \"Level\" )
>29549	AssignmentExpr	* level = doc . FirstChildElement ( \"Level\" )
>29550	CallExpression	doc . FirstChildElement ( \"Level\" )
>29551	ArgumentList	\"Level\"
>29552	Argument	\"Level\"
>29553	PrimaryExpression	\"Level\"
>29554	Callee	doc . FirstChildElement
>29555	MemberAccess	doc . FirstChildElement
>29556	Identifier	FirstChildElement
>29557	Identifier	doc
>29558	Identifier	level
>29559	Identifier	level
>29560	IdentifierDeclType	XMLElement *
>29561	WhileStatement	while ( lensFlare )
>29562	CompoundStatement	 
>29563	ExpressionStatement	 
>29564	AssignmentExpr	lensFlare = lensFlare -> NextSiblingElement ( \"LensFlare\" )
>29565	CallExpression	lensFlare -> NextSiblingElement ( \"LensFlare\" )
>29566	ArgumentList	\"LensFlare\"
>29567	Argument	\"LensFlare\"
>29568	PrimaryExpression	\"LensFlare\"
>29569	Callee	lensFlare -> NextSiblingElement
>29570	PtrMemberAccess	lensFlare -> NextSiblingElement
>29571	Identifier	NextSiblingElement
>29572	Identifier	lensFlare
>29573	Identifier	lensFlare
>29574	ExpressionStatement	 
>29575	CallExpression	saveFile -> InsertEndChild ( lSF )
>29576	ArgumentList	lSF
>29577	Argument	lSF
>29578	Identifier	lSF
>29579	Callee	saveFile -> InsertEndChild
>29580	PtrMemberAccess	saveFile -> InsertEndChild
>29581	Identifier	InsertEndChild
>29582	Identifier	saveFile
>29583	ExpressionStatement	 
>29584	CallExpression	lSF -> SetAttribute ( \"maxLen\" , lensFlare -> Attribute ( \"maxLen\" ) )
>29585	ArgumentList	\"maxLen\"
>29586	Argument	lensFlare -> Attribute ( \"maxLen\" )
>29587	CallExpression	lensFlare -> Attribute ( \"maxLen\" )
>29588	ArgumentList	\"maxLen\"
>29589	Argument	\"maxLen\"
>29590	PrimaryExpression	\"maxLen\"
>29591	Callee	lensFlare -> Attribute
>29592	PtrMemberAccess	lensFlare -> Attribute
>29593	Identifier	Attribute
>29594	Identifier	lensFlare
>29595	Argument	\"maxLen\"
>29596	PrimaryExpression	\"maxLen\"
>29597	Callee	lSF -> SetAttribute
>29598	PtrMemberAccess	lSF -> SetAttribute
>29599	Identifier	SetAttribute
>29600	Identifier	lSF
>29601	ExpressionStatement	 
>29602	CallExpression	lSF -> SetAttribute ( \"h\" , lensFlare -> Attribute ( \"h\" ) )
>29603	ArgumentList	\"h\"
>29604	Argument	lensFlare -> Attribute ( \"h\" )
>29605	CallExpression	lensFlare -> Attribute ( \"h\" )
>29606	ArgumentList	\"h\"
>29607	Argument	\"h\"
>29608	PrimaryExpression	\"h\"
>29609	Callee	lensFlare -> Attribute
>29610	PtrMemberAccess	lensFlare -> Attribute
>29611	Identifier	Attribute
>29612	Identifier	lensFlare
>29613	Argument	\"h\"
>29614	PrimaryExpression	\"h\"
>29615	Callee	lSF -> SetAttribute
>29616	PtrMemberAccess	lSF -> SetAttribute
>29617	Identifier	SetAttribute
>29618	Identifier	lSF
>29619	ExpressionStatement	 
>29620	CallExpression	lSF -> SetAttribute ( \"w\" , lensFlare -> Attribute ( \"w\" ) )
>29621	ArgumentList	\"w\"
>29622	Argument	lensFlare -> Attribute ( \"w\" )
>29623	CallExpression	lensFlare -> Attribute ( \"w\" )
>29624	ArgumentList	\"w\"
>29625	Argument	\"w\"
>29626	PrimaryExpression	\"w\"
>29627	Callee	lensFlare -> Attribute
>29628	PtrMemberAccess	lensFlare -> Attribute
>29629	Identifier	Attribute
>29630	Identifier	lensFlare
>29631	Argument	\"w\"
>29632	PrimaryExpression	\"w\"
>29633	Callee	lSF -> SetAttribute
>29634	PtrMemberAccess	lSF -> SetAttribute
>29635	Identifier	SetAttribute
>29636	Identifier	lSF
>29637	ExpressionStatement	 
>29638	CallExpression	lSF -> SetAttribute ( \"tex\" , lensFlare -> Attribute ( \"tex\" ) )
>29639	ArgumentList	\"tex\"
>29640	Argument	lensFlare -> Attribute ( \"tex\" )
>29641	CallExpression	lensFlare -> Attribute ( \"tex\" )
>29642	ArgumentList	\"tex\"
>29643	Argument	\"tex\"
>29644	PrimaryExpression	\"tex\"
>29645	Callee	lensFlare -> Attribute
>29646	PtrMemberAccess	lensFlare -> Attribute
>29647	Identifier	Attribute
>29648	Identifier	lensFlare
>29649	Argument	\"tex\"
>29650	PrimaryExpression	\"tex\"
>29651	Callee	lSF -> SetAttribute
>29652	PtrMemberAccess	lSF -> SetAttribute
>29653	Identifier	SetAttribute
>29654	Identifier	lSF
>29655	ExpressionStatement	 
>29656	CallExpression	lSF -> SetAttribute ( \"y\" , lensFlare -> Attribute ( \"y\" ) )
>29657	ArgumentList	\"y\"
>29658	Argument	lensFlare -> Attribute ( \"y\" )
>29659	CallExpression	lensFlare -> Attribute ( \"y\" )
>29660	ArgumentList	\"y\"
>29661	Argument	\"y\"
>29662	PrimaryExpression	\"y\"
>29663	Callee	lensFlare -> Attribute
>29664	PtrMemberAccess	lensFlare -> Attribute
>29665	Identifier	Attribute
>29666	Identifier	lensFlare
>29667	Argument	\"y\"
>29668	PrimaryExpression	\"y\"
>29669	Callee	lSF -> SetAttribute
>29670	PtrMemberAccess	lSF -> SetAttribute
>29671	Identifier	SetAttribute
>29672	Identifier	lSF
>29673	ExpressionStatement	 
>29674	CallExpression	lSF -> SetAttribute ( \"x\" , lensFlare -> Attribute ( \"x\" ) )
>29675	ArgumentList	\"x\"
>29676	Argument	lensFlare -> Attribute ( \"x\" )
>29677	CallExpression	lensFlare -> Attribute ( \"x\" )
>29678	ArgumentList	\"x\"
>29679	Argument	\"x\"
>29680	PrimaryExpression	\"x\"
>29681	Callee	lensFlare -> Attribute
>29682	PtrMemberAccess	lensFlare -> Attribute
>29683	Identifier	Attribute
>29684	Identifier	lensFlare
>29685	Argument	\"x\"
>29686	PrimaryExpression	\"x\"
>29687	Callee	lSF -> SetAttribute
>29688	PtrMemberAccess	lSF -> SetAttribute
>29689	Identifier	SetAttribute
>29690	Identifier	lSF
>29691	ExpressionStatement	 
>29692	CallExpression	lSF -> SetAttribute ( \"inc\" , lensFlare -> Attribute ( \"inc\" ) )
>29693	ArgumentList	\"inc\"
>29694	Argument	lensFlare -> Attribute ( \"inc\" )
>29695	CallExpression	lensFlare -> Attribute ( \"inc\" )
>29696	ArgumentList	\"inc\"
>29697	Argument	\"inc\"
>29698	PrimaryExpression	\"inc\"
>29699	Callee	lensFlare -> Attribute
>29700	PtrMemberAccess	lensFlare -> Attribute
>29701	Identifier	Attribute
>29702	Identifier	lensFlare
>29703	Argument	\"inc\"
>29704	PrimaryExpression	\"inc\"
>29705	Callee	lSF -> SetAttribute
>29706	PtrMemberAccess	lSF -> SetAttribute
>29707	Identifier	SetAttribute
>29708	Identifier	lSF
>29709	IdentifierDeclStatement	 
>29710	IdentifierDecl	* lSF = saveFile -> NewElement ( \"LensFlare\" )
>29711	AssignmentExpr	* lSF = saveFile -> NewElement ( \"LensFlare\" )
>29712	CallExpression	saveFile -> NewElement ( \"LensFlare\" )
>29713	ArgumentList	\"LensFlare\"
>29714	Argument	\"LensFlare\"
>29715	PrimaryExpression	\"LensFlare\"
>29716	Callee	saveFile -> NewElement
>29717	PtrMemberAccess	saveFile -> NewElement
>29718	Identifier	NewElement
>29719	Identifier	saveFile
>29720	Identifier	lSF
>29721	Identifier	lSF
>29722	IdentifierDeclType	XMLElement *
>29723	ExpressionStatement	 
>29724	CallExpression	addRenderObject ( l , LR_LIGHTING )
>29725	ArgumentList	l
>29726	Argument	LR_LIGHTING
>29727	Identifier	LR_LIGHTING
>29728	Argument	l
>29729	Identifier	l
>29730	Callee	addRenderObject
>29731	Identifier	addRenderObject
>29732	ExpressionStatement	 
>29733	AssignmentExpr	l -> position = Vector ( atoi ( lensFlare -> Attribute ( \"x\" ) ) , atoi ( lensFlare -> Attribute ( \"y\" ) ) )
>29734	CallExpression	Vector ( atoi ( lensFlare -> Attribute ( \"x\" ) ) , atoi ( lensFlare -> Attribute ( \"y\" ) ) )
>29735	ArgumentList	atoi ( lensFlare -> Attribute ( \"x\" ) )
>29736	Argument	atoi ( lensFlare -> Attribute ( \"y\" ) )
>29737	CallExpression	atoi ( lensFlare -> Attribute ( \"y\" ) )
>29738	ArgumentList	lensFlare -> Attribute ( \"y\" )
>29739	Argument	lensFlare -> Attribute ( \"y\" )
>29740	CallExpression	lensFlare -> Attribute ( \"y\" )
>29741	ArgumentList	\"y\"
>29742	Argument	\"y\"
>29743	PrimaryExpression	\"y\"
>29744	Callee	lensFlare -> Attribute
>29745	PtrMemberAccess	lensFlare -> Attribute
>29746	Identifier	Attribute
>29747	Identifier	lensFlare
>29748	Callee	atoi
>29749	Identifier	atoi
>29750	Argument	atoi ( lensFlare -> Attribute ( \"x\" ) )
>29751	CallExpression	atoi ( lensFlare -> Attribute ( \"x\" ) )
>29752	ArgumentList	lensFlare -> Attribute ( \"x\" )
>29753	Argument	lensFlare -> Attribute ( \"x\" )
>29754	CallExpression	lensFlare -> Attribute ( \"x\" )
>29755	ArgumentList	\"x\"
>29756	Argument	\"x\"
>29757	PrimaryExpression	\"x\"
>29758	Callee	lensFlare -> Attribute
>29759	PtrMemberAccess	lensFlare -> Attribute
>29760	Identifier	Attribute
>29761	Identifier	lensFlare
>29762	Callee	atoi
>29763	Identifier	atoi
>29764	Callee	Vector
>29765	Identifier	Vector
>29766	PtrMemberAccess	l -> position
>29767	Identifier	position
>29768	Identifier	l
>29769	ExpressionStatement	 
>29770	AssignmentExpr	l -> maxLen = atoi ( lensFlare -> Attribute ( \"maxLen\" ) )
>29771	CallExpression	atoi ( lensFlare -> Attribute ( \"maxLen\" ) )
>29772	ArgumentList	lensFlare -> Attribute ( \"maxLen\" )
>29773	Argument	lensFlare -> Attribute ( \"maxLen\" )
>29774	CallExpression	lensFlare -> Attribute ( \"maxLen\" )
>29775	ArgumentList	\"maxLen\"
>29776	Argument	\"maxLen\"
>29777	PrimaryExpression	\"maxLen\"
>29778	Callee	lensFlare -> Attribute
>29779	PtrMemberAccess	lensFlare -> Attribute
>29780	Identifier	Attribute
>29781	Identifier	lensFlare
>29782	Callee	atoi
>29783	Identifier	atoi
>29784	PtrMemberAccess	l -> maxLen
>29785	Identifier	maxLen
>29786	Identifier	l
>29787	ExpressionStatement	 
>29788	ShiftExpression	is2 >> l -> inc
>29789	PtrMemberAccess	l -> inc
>29790	Identifier	inc
>29791	Identifier	l
>29792	Identifier	is2
>29793	IdentifierDeclStatement	 
>29794	IdentifierDecl	is2 ( lensFlare -> Attribute ( \"inc\" ) )
>29795	CallExpression	lensFlare -> Attribute ( \"inc\" )
>29796	ArgumentList	\"inc\"
>29797	Argument	\"inc\"
>29798	PrimaryExpression	\"inc\"
>29799	Callee	lensFlare -> Attribute
>29800	PtrMemberAccess	lensFlare -> Attribute
>29801	Identifier	Attribute
>29802	Identifier	lensFlare
>29803	Identifier	is2
>29804	IdentifierDeclType	SimpleIStringStream
>29805	WhileStatement	while ( is >> tex )
>29806	CompoundStatement	 
>29807	IfStatement	if ( ! tex . empty ( ) )
>29808	ExpressionStatement	 
>29809	CallExpression	l -> addFlare ( tex , Vector ( 1 , 1 , 1 ) , w , h )
>29810	ArgumentList	tex
>29811	Argument	h
>29812	Identifier	h
>29813	Argument	w
>29814	Identifier	w
>29815	Argument	Vector ( 1 , 1 , 1 )
>29816	CallExpression	Vector ( 1 , 1 , 1 )
>29817	ArgumentList	1
>29818	Argument	1
>29819	PrimaryExpression	1
>29820	Argument	1
>29821	PrimaryExpression	1
>29822	Argument	1
>29823	PrimaryExpression	1
>29824	Callee	Vector
>29825	Identifier	Vector
>29826	Argument	tex
>29827	Identifier	tex
>29828	Callee	l -> addFlare
>29829	PtrMemberAccess	l -> addFlare
>29830	Identifier	addFlare
>29831	Identifier	l
>29832	Condition	 
>29833	UnaryOp	! tex . empty ( )
>29834	CallExpression	tex . empty ( )
>29835	ArgumentList	 
>29836	Callee	tex . empty
>29837	MemberAccess	tex . empty
>29838	Identifier	empty
>29839	Identifier	tex
>29840	UnaryOperator	!
>29841	Condition	 
>29842	ShiftExpression	is >> tex
>29843	Identifier	tex
>29844	Identifier	is
>29845	IdentifierDeclStatement	 
>29846	IdentifierDecl	tex
>29847	Identifier	tex
>29848	IdentifierDeclType	std 
>29849	ExpressionStatement	 
>29850	AssignmentExpr	h = atoi ( lensFlare -> Attribute ( \"h\" ) )
>29851	CallExpression	atoi ( lensFlare -> Attribute ( \"h\" ) )
>29852	ArgumentList	lensFlare -> Attribute ( \"h\" )
>29853	Argument	lensFlare -> Attribute ( \"h\" )
>29854	CallExpression	lensFlare -> Attribute ( \"h\" )
>29855	ArgumentList	\"h\"
>29856	Argument	\"h\"
>29857	PrimaryExpression	\"h\"
>29858	Callee	lensFlare -> Attribute
>29859	PtrMemberAccess	lensFlare -> Attribute
>29860	Identifier	Attribute
>29861	Identifier	lensFlare
>29862	Callee	atoi
>29863	Identifier	atoi
>29864	Identifier	h
>29865	ExpressionStatement	 
>29866	AssignmentExpr	w = atoi ( lensFlare -> Attribute ( \"w\" ) )
>29867	CallExpression	atoi ( lensFlare -> Attribute ( \"w\" ) )
>29868	ArgumentList	lensFlare -> Attribute ( \"w\" )
>29869	Argument	lensFlare -> Attribute ( \"w\" )
>29870	CallExpression	lensFlare -> Attribute ( \"w\" )
>29871	ArgumentList	\"w\"
>29872	Argument	\"w\"
>29873	PrimaryExpression	\"w\"
>29874	Callee	lensFlare -> Attribute
>29875	PtrMemberAccess	lensFlare -> Attribute
>29876	Identifier	Attribute
>29877	Identifier	lensFlare
>29878	Callee	atoi
>29879	Identifier	atoi
>29880	Identifier	w
>29881	IdentifierDeclStatement	 
>29882	IdentifierDecl	h = - 1
>29883	AssignmentExpr	h = - 1
>29884	UnaryOp	- 1
>29885	PrimaryExpression	1
>29886	UnaryOperator	-
>29887	Identifier	h
>29888	Identifier	h
>29889	IdentifierDeclType	int
>29890	IdentifierDecl	w = - 1
>29891	AssignmentExpr	w = - 1
>29892	UnaryOp	- 1
>29893	PrimaryExpression	1
>29894	UnaryOperator	-
>29895	Identifier	w
>29896	Identifier	w
>29897	IdentifierDeclType	int
>29898	IdentifierDeclStatement	 
>29899	IdentifierDecl	is ( lensFlare -> Attribute ( \"tex\" ) )
>29900	CallExpression	lensFlare -> Attribute ( \"tex\" )
>29901	ArgumentList	\"tex\"
>29902	Argument	\"tex\"
>29903	PrimaryExpression	\"tex\"
>29904	Callee	lensFlare -> Attribute
>29905	PtrMemberAccess	lensFlare -> Attribute
>29906	Identifier	Attribute
>29907	Identifier	lensFlare
>29908	Identifier	is
>29909	IdentifierDeclType	SimpleIStringStream
>29910	ExpressionStatement	 
>29911	Identifier	LensFlare
>29912	Statement	 
>29913	Statement	 
>29914	Statement	 
>29915	Statement	 
>29916	Statement	 
>29917	Condition	 
>29918	Identifier	lensFlare
>29919	IdentifierDeclStatement	 
>29920	IdentifierDecl	* lensFlare = doc . FirstChildElement ( \"LensFlare\" )
>29921	AssignmentExpr	* lensFlare = doc . FirstChildElement ( \"LensFlare\" )
>29922	CallExpression	doc . FirstChildElement ( \"LensFlare\" )
>29923	ArgumentList	\"LensFlare\"
>29924	Argument	\"LensFlare\"
>29925	PrimaryExpression	\"LensFlare\"
>29926	Callee	doc . FirstChildElement
>29927	MemberAccess	doc . FirstChildElement
>29928	Identifier	FirstChildElement
>29929	Identifier	doc
>29930	Identifier	lensFlare
>29931	Identifier	lensFlare
>29932	IdentifierDeclType	XMLElement *
>29933	ExpressionStatement	 
>29934	CallExpression	warpAreas . clear ( )
>29935	ArgumentList	 
>29936	Callee	warpAreas . clear
>29937	MemberAccess	warpAreas . clear
>29938	Identifier	clear
>29939	Identifier	warpAreas
>29940	ExpressionStatement	 
>29941	CallExpression	clearObsRows ( )
>29942	ArgumentList	 
>29943	Callee	clearObsRows
>29944	Identifier	clearObsRows
>29945	ExpressionStatement	 
>29946	CallExpression	addProgress ( )
>29947	ArgumentList	 
>29948	Callee	addProgress
>29949	Identifier	addProgress
>29950	IfStatement	if ( ! saveFile )
>29951	CompoundStatement	 
>29952	ExpressionStatement	 
>29953	AssignmentExpr	saveFile = new XMLDocument ( )
>29954	UnaryExpression	new XMLDocument ( )
>29955	Identifier	saveFile
>29956	Condition	 
>29957	UnaryOp	! saveFile
>29958	Identifier	saveFile
>29959	UnaryOperator	!
>29960	IfStatement	if ( saveFile )
>29961	CompoundStatement	 
>29962	ExpressionStatement	 
>29963	AssignmentExpr	saveFile = 0
>29964	PrimaryExpression	0
>29965	Identifier	saveFile
>29966	ExpressionStatement	 
>29967	Identifier	saveFile
>29968	Statement	 
>29969	Condition	 
>29970	Identifier	saveFile
>29971	IfStatement	if ( readXML ( fn , doc ) != XML_SUCCESS )
>29972	CompoundStatement	 
>29973	ReturnStatement	 
>29974	Identifier	false
>29975	ExpressionStatement	 
>29976	CallExpression	dsq -> screenMessage ( \"Could not load scene [\" + fn + \"] - Malformed XML\" )
>29977	ArgumentList	\"Could not load scene [\" + fn + \"] - Malformed XML\"
>29978	Argument	\"Could not load scene [\" + fn + \"] - Malformed XML\"
>29979	AdditiveExpression	\"Could not load scene [\" + fn + \"] - Malformed XML\"
>29980	AdditiveExpression	fn + \"] - Malformed XML\"
>29981	PrimaryExpression	\"] - Malformed XML\"
>29982	Identifier	fn
>29983	PrimaryExpression	\"Could not load scene [\"
>29984	Callee	dsq -> screenMessage
>29985	PtrMemberAccess	dsq -> screenMessage
>29986	Identifier	screenMessage
>29987	Identifier	dsq
>29988	Condition	 
>29989	EqualityExpression	readXML ( fn , doc ) != XML_SUCCESS
>29990	Identifier	XML_SUCCESS
>29991	CallExpression	readXML ( fn , doc )
>29992	ArgumentList	fn
>29993	Argument	doc
>29994	Identifier	doc
>29995	Argument	fn
>29996	Identifier	fn
>29997	Callee	readXML
>29998	Identifier	readXML
>29999	IdentifierDeclStatement	 
>30000	IdentifierDecl	doc
>30001	Identifier	doc
>30002	IdentifierDeclType	XMLDocument
>30003	IfStatement	if ( ! exists ( fn ) )
>30004	CompoundStatement	 
>30005	ReturnStatement	 
>30006	Identifier	false
>30007	ExpressionStatement	 
>30008	CallExpression	dsq -> screenMessage ( s )
>30009	ArgumentList	s
>30010	Argument	s
>30011	Identifier	s
>30012	Callee	dsq -> screenMessage
>30013	PtrMemberAccess	dsq -> screenMessage
>30014	Identifier	screenMessage
>30015	Identifier	dsq
>30016	IdentifierDeclStatement	 
>30017	IdentifierDecl	s = \"Could not find map [\" + fn + \"]\"
>30018	AssignmentExpr	s = \"Could not find map [\" + fn + \"]\"
>30019	AdditiveExpression	\"Could not find map [\" + fn + \"]\"
>30020	AdditiveExpression	fn + \"]\"
>30021	PrimaryExpression	\"]\"
>30022	Identifier	fn
>30023	PrimaryExpression	\"Could not find map [\"
>30024	Identifier	s
>30025	Identifier	s
>30026	IdentifierDeclType	std 
>30027	Condition	 
>30028	UnaryOp	! exists ( fn )
>30029	CallExpression	exists ( fn )
>30030	ArgumentList	fn
>30031	Argument	fn
>30032	Identifier	fn
>30033	Callee	exists
>30034	Identifier	exists
>30035	UnaryOperator	!
>30036	IdentifierDeclStatement	 
>30037	IdentifierDecl	fn = getSceneFilename ( scene )
>30038	AssignmentExpr	fn = getSceneFilename ( scene )
>30039	CallExpression	getSceneFilename ( scene )
>30040	ArgumentList	scene
>30041	Argument	scene
>30042	Identifier	scene
>30043	Callee	getSceneFilename
>30044	Identifier	getSceneFilename
>30045	Identifier	fn
>30046	Identifier	fn
>30047	IdentifierDeclType	std 
>30048	ExpressionStatement	 
>30049	CallExpression	entitySaveData . clear ( )
>30050	ArgumentList	 
>30051	Callee	entitySaveData . clear
>30052	MemberAccess	entitySaveData . clear
>30053	Identifier	clear
>30054	Identifier	entitySaveData
>30055	ExpressionStatement	 
>30056	AssignmentExpr	elementTemplatePack = \"Main\"
>30057	PrimaryExpression	\"Main\"
>30058	Identifier	elementTemplatePack
>30059	ExpressionStatement	 
>30060	AssignmentExpr	airSfxLoop = \"\"
>30061	PrimaryExpression	\"\"
>30062	Identifier	airSfxLoop
>30063	ExpressionStatement	 
>30064	AssignmentExpr	bgSfxLoop = \"\"
>30065	PrimaryExpression	\"\"
>30066	Identifier	bgSfxLoop
>30340	FunctionDef	Game 
>30341	ParameterList	const std 
>30342	Parameter	 
>30343	Identifier	m
>30344	ParameterType	const std 
>30345	ReturnType	void
>30346	CompoundStatement	 
>30347	ExpressionStatement	 
>30348	CallExpression	stringToLower ( musicToPlay )
>30349	ArgumentList	musicToPlay
>30350	Argument	musicToPlay
>30351	Identifier	musicToPlay
>30352	Callee	stringToLower
>30353	Identifier	stringToLower
>30354	ExpressionStatement	 
>30355	AssignmentExpr	musicToPlay = m
>30356	Identifier	m
>30357	Identifier	musicToPlay
>30363	FunctionDef	Game 
>30364	ParameterList	 
>30365	ReturnType	void
>30366	CompoundStatement	 
>30367	IfStatement	if ( backdropQuad )
>30368	CompoundStatement	 
>30369	IfStatement	if ( backdropQuad -> getHeight ( ) > cameraMax . y )
>30370	CompoundStatement	 
>30371	ExpressionStatement	 
>30372	AssignmentExpr	cameraMax . y = backdropQuad -> getHeight ( )
>30373	CallExpression	backdropQuad -> getHeight ( )
>30374	ArgumentList	 
>30375	Callee	backdropQuad -> getHeight
>30376	PtrMemberAccess	backdropQuad -> getHeight
>30377	Identifier	getHeight
>30378	Identifier	backdropQuad
>30379	MemberAccess	cameraMax . y
>30380	Identifier	y
>30381	Identifier	cameraMax
>30382	Condition	 
>30383	RelationalExpression	backdropQuad -> getHeight ( ) > cameraMax . y
>30384	MemberAccess	cameraMax . y
>30385	Identifier	y
>30386	Identifier	cameraMax
>30387	CallExpression	backdropQuad -> getHeight ( )
>30388	ArgumentList	 
>30389	Callee	backdropQuad -> getHeight
>30390	PtrMemberAccess	backdropQuad -> getHeight
>30391	Identifier	getHeight
>30392	Identifier	backdropQuad
>30393	IfStatement	if ( backdropQuad -> getWidth ( ) > cameraMax . x )
>30394	CompoundStatement	 
>30395	ExpressionStatement	 
>30396	AssignmentExpr	cameraMax . x = backdropQuad -> getWidth ( )
>30397	CallExpression	backdropQuad -> getWidth ( )
>30398	ArgumentList	 
>30399	Callee	backdropQuad -> getWidth
>30400	PtrMemberAccess	backdropQuad -> getWidth
>30401	Identifier	getWidth
>30402	Identifier	backdropQuad
>30403	MemberAccess	cameraMax . x
>30404	Identifier	x
>30405	Identifier	cameraMax
>30406	Condition	 
>30407	RelationalExpression	backdropQuad -> getWidth ( ) > cameraMax . x
>30408	MemberAccess	cameraMax . x
>30409	Identifier	x
>30410	Identifier	cameraMax
>30411	CallExpression	backdropQuad -> getWidth ( )
>30412	ArgumentList	 
>30413	Callee	backdropQuad -> getWidth
>30414	PtrMemberAccess	backdropQuad -> getWidth
>30415	Identifier	getWidth
>30416	Identifier	backdropQuad
>30417	Condition	 
>30418	Identifier	backdropQuad
>30419	ForStatement	for ( i = 0 ; i < obsRows . size ( ) ; i ++ )
>30420	CompoundStatement	 
>30421	IfStatement	if ( v . y > cameraMax . y )
>30422	CompoundStatement	 
>30423	ExpressionStatement	 
>30424	AssignmentExpr	cameraMax . y = v . y
>30425	MemberAccess	v . y
>30426	Identifier	y
>30427	Identifier	v
>30428	MemberAccess	cameraMax . y
>30429	Identifier	y
>30430	Identifier	cameraMax
>30431	Condition	 
>30432	RelationalExpression	v . y > cameraMax . y
>30433	MemberAccess	cameraMax . y
>30434	Identifier	y
>30435	Identifier	cameraMax
>30436	MemberAccess	v . y
>30437	Identifier	y
>30438	Identifier	v
>30439	IfStatement	if ( v . x > cameraMax . x )
>30440	CompoundStatement	 
>30441	ExpressionStatement	 
>30442	AssignmentExpr	cameraMax . x = v . x
>30443	MemberAccess	v . x
>30444	Identifier	x
>30445	Identifier	v
>30446	MemberAccess	cameraMax . x
>30447	Identifier	x
>30448	Identifier	cameraMax
>30449	Condition	 
>30450	RelationalExpression	v . x > cameraMax . x
>30451	MemberAccess	cameraMax . x
>30452	Identifier	x
>30453	Identifier	cameraMax
>30454	MemberAccess	v . x
>30455	Identifier	x
>30456	Identifier	v
>30457	IdentifierDeclStatement	 
>30458	IdentifierDecl	v = t . worldVector ( )
>30459	AssignmentExpr	v = t . worldVector ( )
>30460	CallExpression	t . worldVector ( )
>30461	ArgumentList	 
>30462	Callee	t . worldVector
>30463	MemberAccess	t . worldVector
>30464	Identifier	worldVector
>30465	Identifier	t
>30466	Identifier	v
>30467	Identifier	v
>30468	IdentifierDeclType	Vector
>30469	IdentifierDeclStatement	 
>30470	IdentifierDecl	t ( r -> tx + r -> len , r -> ty )
>30471	Expression	r -> tx + r -> len , r -> ty
>30472	PtrMemberAccess	r -> ty
>30473	Identifier	ty
>30474	Identifier	r
>30475	AdditiveExpression	r -> tx + r -> len
>30476	PtrMemberAccess	r -> len
>30477	Identifier	len
>30478	Identifier	r
>30479	PtrMemberAccess	r -> tx
>30480	Identifier	tx
>30481	Identifier	r
>30482	Identifier	t
>30483	IdentifierDeclType	TileVector
>30484	IdentifierDeclStatement	 
>30485	IdentifierDecl	* r = & obsRows [ i ]
>30486	AssignmentExpr	* r = & obsRows [ i ]
>30487	UnaryOp	& obsRows [ i ]
>30488	ArrayIndexing	obsRows [ i ]
>30489	Identifier	i
>30490	Identifier	obsRows
>30491	UnaryOperator	&
>30492	Identifier	r
>30493	Identifier	r
>30494	IdentifierDeclType	ObsRow *
>30495	IncDecOp	 
>30496	IncDec	++
>30497	Identifier	i
>30498	Condition	 
>30499	RelationalExpression	i < obsRows . size ( )
>30500	CallExpression	obsRows . size ( )
>30501	ArgumentList	 
>30502	Callee	obsRows . size
>30503	MemberAccess	obsRows . size
>30504	Identifier	size
>30505	Identifier	obsRows
>30506	Identifier	i
>30507	ForInit	 
>30508	AssignmentExpr	i = 0
>30509	PrimaryExpression	0
>30510	Identifier	i
>30511	IdentifierDeclStatement	 
>30512	IdentifierDecl	i = 0
>30513	AssignmentExpr	i = 0
>30514	PrimaryExpression	0
>30515	Identifier	i
>30516	Identifier	i
>30517	IdentifierDeclType	int
>30518	ExpressionStatement	 
>30519	AssignmentExpr	cameraMax . y = - 1
>30520	UnaryOp	- 1
>30521	PrimaryExpression	1
>30522	UnaryOperator	-
>30523	MemberAccess	cameraMax . y
>30524	Identifier	y
>30525	Identifier	cameraMax
>30526	ExpressionStatement	 
>30527	AssignmentExpr	cameraMax . x = - 1
>30528	UnaryOp	- 1
>30529	PrimaryExpression	1
>30530	UnaryOperator	-
>30531	MemberAccess	cameraMax . x
>30532	Identifier	x
>30533	Identifier	cameraMax
>30534	ExpressionStatement	 
>30535	AssignmentExpr	cameraMin . y = 20
>30536	PrimaryExpression	20
>30537	MemberAccess	cameraMin . y
>30538	Identifier	y
>30539	Identifier	cameraMin
>30540	ExpressionStatement	 
>30541	AssignmentExpr	cameraMin . x = 20
>30542	PrimaryExpression	20
>30543	MemberAccess	cameraMin . x
>30544	Identifier	x
>30545	Identifier	cameraMin
>30570	FunctionDef	Game 
>30571	ParameterList	WarpArea & warpArea
>30572	Parameter	 
>30573	Identifier	warpArea
>30574	ParameterType	WarpArea &
>30575	ReturnType	void
>30576	CompoundStatement	 
>30577	IfStatement	if ( warpArea . sceneName . empty ( ) )
>30578	CompoundStatement	 
>30579	ExpressionStatement	 
>30580	CallExpression	errorLog ( warpArea . warpAreaType + \" WarpArea for \" + dsq -> game -> sceneName + \" not found\" )
>30581	ArgumentList	warpArea . warpAreaType + \" WarpArea for \" + dsq -> game -> sceneName + \" not found\"
>30582	Argument	warpArea . warpAreaType + \" WarpArea for \" + dsq -> game -> sceneName + \" not found\"
>30583	AdditiveExpression	warpArea . warpAreaType + \" WarpArea for \" + dsq -> game -> sceneName + \" not found\"
>30584	AdditiveExpression	\" WarpArea for \" + dsq -> game -> sceneName + \" not found\"
>30585	AdditiveExpression	dsq -> game -> sceneName + \" not found\"
>30586	PrimaryExpression	\" not found\"
>30587	PtrMemberAccess	dsq -> game -> sceneName
>30588	Identifier	sceneName
>30589	PtrMemberAccess	dsq -> game
>30590	Identifier	game
>30591	Identifier	dsq
>30592	PrimaryExpression	\" WarpArea for \"
>30593	MemberAccess	warpArea . warpAreaType
>30594	Identifier	warpAreaType
>30595	Identifier	warpArea
>30596	Callee	errorLog
>30597	Identifier	errorLog
>30598	Condition	 
>30599	CallExpression	warpArea . sceneName . empty ( )
>30600	ArgumentList	 
>30601	Callee	warpArea . sceneName . empty
>30602	MemberAccess	warpArea . sceneName . empty
>30603	Identifier	empty
>30604	MemberAccess	warpArea . sceneName
>30605	Identifier	sceneName
>30606	Identifier	warpArea
>30607	WhileStatement	while ( std 
>30608	CompoundStatement	 
>30609	IfStatement	if ( area1 == dsq -> game -> sceneName && warpArea . warpAreaType == color )
>30610	CompoundStatement	 
>30611	BreakStatement	 
>30612	ExpressionStatement	 
>30613	AssignmentExpr	warpArea . sceneName = area2
>30614	Identifier	area2
>30615	MemberAccess	warpArea . sceneName
>30616	Identifier	sceneName
>30617	Identifier	warpArea
>30618	IfStatement	if ( dir2 == \"Left\" )
>30619	ElseStatement	else
>30620	IfStatement	if ( dir2 == \"Right\" )
>30621	ElseStatement	else
>30622	IfStatement	if ( dir2 == \"Up\" )
>30623	ElseStatement	else
>30624	IfStatement	if ( dir2 == \"Down\" )
>30625	ExpressionStatement	 
>30626	AssignmentExpr	warpArea . spawnOffset = Vector ( 0 , 1 )
>30627	CallExpression	Vector ( 0 , 1 )
>30628	ArgumentList	0
>30629	Argument	1
>30630	PrimaryExpression	1
>30631	Argument	0
>30632	PrimaryExpression	0
>30633	Callee	Vector
>30634	Identifier	Vector
>30635	MemberAccess	warpArea . spawnOffset
>30636	Identifier	spawnOffset
>30637	Identifier	warpArea
>30638	Condition	 
>30639	EqualityExpression	dir2 == \"Down\"
>30640	PrimaryExpression	\"Down\"
>30641	Identifier	dir2
>30642	ExpressionStatement	 
>30643	AssignmentExpr	warpArea . spawnOffset = Vector ( 0 , - 1 )
>30644	CallExpression	Vector ( 0 , - 1 )
>30645	ArgumentList	0
>30646	Argument	- 1
>30647	UnaryOp	- 1
>30648	PrimaryExpression	1
>30649	UnaryOperator	-
>30650	Argument	0
>30651	PrimaryExpression	0
>30652	Callee	Vector
>30653	Identifier	Vector
>30654	MemberAccess	warpArea . spawnOffset
>30655	Identifier	spawnOffset
>30656	Identifier	warpArea
>30657	Condition	 
>30658	EqualityExpression	dir2 == \"Up\"
>30659	PrimaryExpression	\"Up\"
>30660	Identifier	dir2
>30661	ExpressionStatement	 
>30662	AssignmentExpr	warpArea . spawnOffset = Vector ( 1 , 0 )
>30663	CallExpression	Vector ( 1 , 0 )
>30664	ArgumentList	1
>30665	Argument	0
>30666	PrimaryExpression	0
>30667	Argument	1
>30668	PrimaryExpression	1
>30669	Callee	Vector
>30670	Identifier	Vector
>30671	MemberAccess	warpArea . spawnOffset
>30672	Identifier	spawnOffset
>30673	Identifier	warpArea
>30674	Condition	 
>30675	EqualityExpression	dir2 == \"Right\"
>30676	PrimaryExpression	\"Right\"
>30677	Identifier	dir2
>30678	ExpressionStatement	 
>30679	AssignmentExpr	warpArea . spawnOffset = Vector ( - 1 , 0 )
>30680	CallExpression	Vector ( - 1 , 0 )
>30681	ArgumentList	- 1
>30682	Argument	0
>30683	PrimaryExpression	0
>30684	Argument	- 1
>30685	UnaryOp	- 1
>30686	PrimaryExpression	1
>30687	UnaryOperator	-
>30688	Callee	Vector
>30689	Identifier	Vector
>30690	MemberAccess	warpArea . spawnOffset
>30691	Identifier	spawnOffset
>30692	Identifier	warpArea
>30693	Condition	 
>30694	EqualityExpression	dir2 == \"Left\"
>30695	PrimaryExpression	\"Left\"
>30696	Identifier	dir2
>30697	Condition	 
>30698	AndExpression	area1 == dsq -> game -> sceneName && warpArea . warpAreaType == color
>30699	EqualityExpression	warpArea . warpAreaType == color
>30700	Identifier	color
>30701	MemberAccess	warpArea . warpAreaType
>30702	Identifier	warpAreaType
>30703	Identifier	warpArea
>30704	EqualityExpression	area1 == dsq -> game -> sceneName
>30705	PtrMemberAccess	dsq -> game -> sceneName
>30706	Identifier	sceneName
>30707	PtrMemberAccess	dsq -> game
>30708	Identifier	game
>30709	Identifier	dsq
>30710	Identifier	area1
>30711	IfStatement	if ( area2 == dsq -> game -> sceneName && warpArea . warpAreaType == color )
>30712	CompoundStatement	 
>30713	ExpressionStatement	 
>30714	AssignmentExpr	area1 = dsq -> game -> sceneName
>30715	PtrMemberAccess	dsq -> game -> sceneName
>30716	Identifier	sceneName
>30717	PtrMemberAccess	dsq -> game
>30718	Identifier	game
>30719	Identifier	dsq
>30720	Identifier	area1
>30721	ExpressionStatement	 
>30722	AssignmentExpr	dir2 = dir1
>30723	Identifier	dir1
>30724	Identifier	dir2
>30725	ExpressionStatement	 
>30726	AssignmentExpr	area2 = area1
>30727	Identifier	area1
>30728	Identifier	area2
>30729	Condition	 
>30730	AndExpression	area2 == dsq -> game -> sceneName && warpArea . warpAreaType == color
>30731	EqualityExpression	warpArea . warpAreaType == color
>30732	Identifier	color
>30733	MemberAccess	warpArea . warpAreaType
>30734	Identifier	warpAreaType
>30735	Identifier	warpArea
>30736	EqualityExpression	area2 == dsq -> game -> sceneName
>30737	PtrMemberAccess	dsq -> game -> sceneName
>30738	Identifier	sceneName
>30739	PtrMemberAccess	dsq -> game
>30740	Identifier	game
>30741	Identifier	dsq
>30742	Identifier	area2
>30743	ExpressionStatement	 
>30744	ShiftExpression	is >> color >> area1 >> dir1 >> area2 >> dir2
>30745	ShiftExpression	color >> area1 >> dir1 >> area2 >> dir2
>30746	ShiftExpression	area1 >> dir1 >> area2 >> dir2
>30747	ShiftExpression	dir1 >> area2 >> dir2
>30748	ShiftExpression	area2 >> dir2
>30749	Identifier	dir2
>30750	Identifier	area2
>30751	Identifier	dir1
>30752	Identifier	area1
>30753	Identifier	color
>30754	Identifier	is
>30755	IdentifierDeclStatement	 
>30756	IdentifierDecl	is ( line )
>30757	Identifier	line
>30758	Identifier	is
>30759	IdentifierDeclType	std 
>30760	Condition	 
>30761	CallExpression	std 
>30762	ArgumentList	in
>30763	Argument	line
>30764	Identifier	line
>30765	Argument	in
>30766	Identifier	in
>30767	Callee	std 
>30768	Identifier	std 
>30769	IdentifierDeclStatement	 
>30770	IdentifierDecl	line
>30771	Identifier	line
>30772	IdentifierDeclType	std 
>30773	IdentifierDeclStatement	 
>30774	IdentifierDecl	dir2
>30775	Identifier	dir2
>30776	IdentifierDeclType	std 
>30777	IdentifierDecl	area2
>30778	Identifier	area2
>30779	IdentifierDeclType	std 
>30780	IdentifierDecl	dir1
>30781	Identifier	dir1
>30782	IdentifierDeclType	std 
>30783	IdentifierDecl	area1
>30784	Identifier	area1
>30785	IdentifierDeclType	std 
>30786	IdentifierDecl	color
>30787	Identifier	color
>30788	IdentifierDeclType	std 
>30789	IdentifierDeclStatement	 
>30790	IdentifierDecl	in ( \"data/warpAreas.txt\" )
>30791	PrimaryExpression	\"data/warpAreas.txt\"
>30792	Identifier	in
>30793	IdentifierDeclType	InStream
>30818	FunctionDef	Game 
>30819	ParameterList	std 
>30820	Parameter	 
>30821	Identifier	scene
>30822	ParameterType	std 
>30823	ReturnType	bool
>30824	CompoundStatement	 
>30825	ReturnStatement	 
>30826	Identifier	ret
>30827	ExpressionStatement	 
>30828	AssignmentExpr	loadingScene = false
>30829	Identifier	false
>30830	Identifier	loadingScene
>30831	IdentifierDeclStatement	 
>30832	IdentifierDecl	ret = loadSceneXML ( scene )
>30833	AssignmentExpr	ret = loadSceneXML ( scene )
>30834	CallExpression	loadSceneXML ( scene )
>30835	ArgumentList	scene
>30836	Argument	scene
>30837	Identifier	scene
>30838	Callee	loadSceneXML
>30839	Identifier	loadSceneXML
>30840	Identifier	ret
>30841	Identifier	ret
>30842	IdentifierDeclType	bool
>30843	ExpressionStatement	 
>30844	AssignmentExpr	loadingScene = true
>30845	Identifier	true
>30846	Identifier	loadingScene
>30847	IfStatement	if ( i == allowedMaps . size ( ) )
>30848	CompoundStatement	 
>30849	ExpressionStatement	 
>30850	CallExpression	exit_error ( \"Demo version refuses to load this map, sorry.\" )
>30851	ArgumentList	\"Demo version refuses to load this map, sorry.\"
>30852	Argument	\"Demo version refuses to load this map, sorry.\"
>30853	PrimaryExpression	\"Demo version refuses to load this map, sorry.\"
>30854	Callee	exit_error
>30855	Identifier	exit_error
>30856	Condition	 
>30857	EqualityExpression	i == allowedMaps . size ( )
>30858	CallExpression	allowedMaps . size ( )
>30859	ArgumentList	 
>30860	Callee	allowedMaps . size
>30861	MemberAccess	allowedMaps . size
>30862	Identifier	size
>30863	Identifier	allowedMaps
>30864	Identifier	i
>30865	ForStatement	for ( ; i < allowedMaps . size ( ) ; i ++ )
>30866	CompoundStatement	 
>30867	IfStatement	if ( allowedMaps [ i ] == scene )
>30868	BreakStatement	 
>30869	Condition	 
>30870	EqualityExpression	allowedMaps [ i ] == scene
>30871	Identifier	scene
>30872	ArrayIndexing	allowedMaps [ i ]
>30873	Identifier	i
>30874	Identifier	allowedMaps
>30875	IncDecOp	 
>30876	IncDec	++
>30877	Identifier	i
>30878	Condition	 
>30879	RelationalExpression	i < allowedMaps . size ( )
>30880	CallExpression	allowedMaps . size ( )
>30881	ArgumentList	 
>30882	Callee	allowedMaps . size
>30883	MemberAccess	allowedMaps . size
>30884	Identifier	size
>30885	Identifier	allowedMaps
>30886	Identifier	i
>30887	IdentifierDeclStatement	 
>30888	IdentifierDecl	i = 0
>30889	AssignmentExpr	i = 0
>30890	PrimaryExpression	0
>30891	Identifier	i
>30892	Identifier	i
>30893	IdentifierDeclType	int
>30894	IfStatement	if ( scene . empty ( ) )
>30895	CompoundStatement	 
>30896	ReturnStatement	 
>30897	Identifier	false
>30898	Condition	 
>30899	CallExpression	scene . empty ( )
>30900	ArgumentList	 
>30901	Callee	scene . empty
>30902	MemberAccess	scene . empty
>30903	Identifier	empty
>30904	Identifier	scene
>30905	ExpressionStatement	 
>30906	AssignmentExpr	sceneName = scene
>30907	Identifier	scene
>30908	Identifier	sceneName
>30909	ExpressionStatement	 
>30910	CallExpression	stringToLower ( scene )
>30911	ArgumentList	scene
>30912	Argument	scene
>30913	Identifier	scene
>30914	Callee	stringToLower
>30915	Identifier	stringToLower
>30932	FunctionDef	Game 
>30933	ParameterList	std 
>30934	Parameter	 
>30935	Identifier	scene
>30936	ParameterType	std 
>30937	ReturnType	bool
>30938	CompoundStatement	 
>30939	ReturnStatement	 
>30940	Identifier	result
>30941	IfStatement	if ( result )
>30942	ElseStatement	else
>30943	ExpressionStatement	 
>30944	CallExpression	debugLog ( \"Failed to save map
>30945	ArgumentList	\"Failed to save map
>30946	Argument	\"Failed to save map
>30947	AdditiveExpression	\"Failed to save map
>30948	Identifier	fn
>30949	PrimaryExpression	\"Failed to save map
>30950	Callee	debugLog
>30951	Identifier	debugLog
>30952	ExpressionStatement	 
>30953	CallExpression	debugLog ( \"Successfully saved map
>30954	ArgumentList	\"Successfully saved map
>30955	Argument	\"Successfully saved map
>30956	AdditiveExpression	\"Successfully saved map
>30957	Identifier	fn
>30958	PrimaryExpression	\"Successfully saved map
>30959	Callee	debugLog
>30960	Identifier	debugLog
>30961	Condition	 
>30962	Identifier	result
>30963	IdentifierDeclStatement	 
>30964	IdentifierDecl	result = saveFile . SaveFile ( fn . c_str ( ) ) == XML_SUCCESS
>30965	AssignmentExpr	result = saveFile . SaveFile ( fn . c_str ( ) ) == XML_SUCCESS
>30966	EqualityExpression	saveFile . SaveFile ( fn . c_str ( ) ) == XML_SUCCESS
>30967	Identifier	XML_SUCCESS
>30968	CallExpression	saveFile . SaveFile ( fn . c_str ( ) )
>30969	ArgumentList	fn . c_str ( )
>30970	Argument	fn . c_str ( )
>30971	CallExpression	fn . c_str ( )
>30972	ArgumentList	 
>30973	Callee	fn . c_str
>30974	MemberAccess	fn . c_str
>30975	Identifier	c_str
>30976	Identifier	fn
>30977	Callee	saveFile . SaveFile
>30978	MemberAccess	saveFile . SaveFile
>30979	Identifier	SaveFile
>30980	Identifier	saveFile
>30981	Identifier	result
>30982	Identifier	result
>30983	IdentifierDeclType	bool
>30984	ForStatement	for ( i = 0 ; i < LR_MAX ; i ++ )
>30985	CompoundStatement	 
>30986	IfStatement	if ( ! s . empty ( ) )
>30987	CompoundStatement	 
>30988	ExpressionStatement	 
>30989	CallExpression	saveFile . InsertEndChild ( simpleElementsXML )
>30990	ArgumentList	simpleElementsXML
>30991	Argument	simpleElementsXML
>30992	Identifier	simpleElementsXML
>30993	Callee	saveFile . InsertEndChild
>30994	MemberAccess	saveFile . InsertEndChild
>30995	Identifier	InsertEndChild
>30996	Identifier	saveFile
>30997	IfStatement	if ( ! repeatScaleStr . empty ( ) )
>30998	ExpressionStatement	 
>30999	CallExpression	simpleElementsXML -> SetAttribute ( \"repeatScale\" , repeatScaleStr . c_str ( ) )
>31000	ArgumentList	\"repeatScale\"
>31001	Argument	repeatScaleStr . c_str ( )
>31002	CallExpression	repeatScaleStr . c_str ( )
>31003	ArgumentList	 
>31004	Callee	repeatScaleStr . c_str
>31005	MemberAccess	repeatScaleStr . c_str
>31006	Identifier	c_str
>31007	Identifier	repeatScaleStr
>31008	Argument	\"repeatScale\"
>31009	PrimaryExpression	\"repeatScale\"
>31010	Callee	simpleElementsXML -> SetAttribute
>31011	PtrMemberAccess	simpleElementsXML -> SetAttribute
>31012	Identifier	SetAttribute
>31013	Identifier	simpleElementsXML
>31014	Condition	 
>31015	UnaryOp	! repeatScaleStr . empty ( )
>31016	CallExpression	repeatScaleStr . empty ( )
>31017	ArgumentList	 
>31018	Callee	repeatScaleStr . empty
>31019	MemberAccess	repeatScaleStr . empty
>31020	Identifier	empty
>31021	Identifier	repeatScaleStr
>31022	UnaryOperator	!
>31023	IdentifierDeclStatement	 
>31024	IdentifierDecl	repeatScaleStr = simpleElements_repeatScale [ i ] . str ( )
>31025	AssignmentExpr	repeatScaleStr = simpleElements_repeatScale [ i ] . str ( )
>31026	CallExpression	simpleElements_repeatScale [ i ] . str ( )
>31027	ArgumentList	 
>31028	Callee	simpleElements_repeatScale [ i ] . str
>31029	MemberAccess	simpleElements_repeatScale [ i ] . str
>31030	Identifier	str
>31031	ArrayIndexing	simpleElements_repeatScale [ i ]
>31032	Identifier	i
>31033	Identifier	simpleElements_repeatScale
>31034	Identifier	repeatScaleStr
>31035	Identifier	repeatScaleStr
>31036	IdentifierDeclType	std 
>31037	ExpressionStatement	 
>31038	CallExpression	simpleElementsXML -> SetAttribute ( \"l\" , i )
>31039	ArgumentList	\"l\"
>31040	Argument	i
>31041	Identifier	i
>31042	Argument	\"l\"
>31043	PrimaryExpression	\"l\"
>31044	Callee	simpleElementsXML -> SetAttribute
>31045	PtrMemberAccess	simpleElementsXML -> SetAttribute
>31046	Identifier	SetAttribute
>31047	Identifier	simpleElementsXML
>31048	ExpressionStatement	 
>31049	CallExpression	simpleElementsXML -> SetAttribute ( \"k\" , s . c_str ( ) )
>31050	ArgumentList	\"k\"
>31051	Argument	s . c_str ( )
>31052	CallExpression	s . c_str ( )
>31053	ArgumentList	 
>31054	Callee	s . c_str
>31055	MemberAccess	s . c_str
>31056	Identifier	c_str
>31057	Identifier	s
>31058	Argument	\"k\"
>31059	PrimaryExpression	\"k\"
>31060	Callee	simpleElementsXML -> SetAttribute
>31061	PtrMemberAccess	simpleElementsXML -> SetAttribute
>31062	Identifier	SetAttribute
>31063	Identifier	simpleElementsXML
>31064	IdentifierDeclStatement	 
>31065	IdentifierDecl	* simpleElementsXML = saveFile . NewElement ( \"SE\" )
>31066	AssignmentExpr	* simpleElementsXML = saveFile . NewElement ( \"SE\" )
>31067	CallExpression	saveFile . NewElement ( \"SE\" )
>31068	ArgumentList	\"SE\"
>31069	Argument	\"SE\"
>31070	PrimaryExpression	\"SE\"
>31071	Callee	saveFile . NewElement
>31072	MemberAccess	saveFile . NewElement
>31073	Identifier	NewElement
>31074	Identifier	saveFile
>31075	Identifier	simpleElementsXML
>31076	Identifier	simpleElementsXML
>31077	IdentifierDeclType	XMLElement *
>31078	Condition	 
>31079	UnaryOp	! s . empty ( )
>31080	CallExpression	s . empty ( )
>31081	ArgumentList	 
>31082	Callee	s . empty
>31083	MemberAccess	s . empty
>31084	Identifier	empty
>31085	Identifier	s
>31086	UnaryOperator	!
>31087	IdentifierDeclStatement	 
>31088	IdentifierDecl	s = simpleElements [ i ] . str ( )
>31089	AssignmentExpr	s = simpleElements [ i ] . str ( )
>31090	CallExpression	simpleElements [ i ] . str ( )
>31091	ArgumentList	 
>31092	Callee	simpleElements [ i ] . str
>31093	MemberAccess	simpleElements [ i ] . str
>31094	Identifier	str
>31095	ArrayIndexing	simpleElements [ i ]
>31096	Identifier	i
>31097	Identifier	simpleElements
>31098	Identifier	s
>31099	Identifier	s
>31100	IdentifierDeclType	std 
>31101	IncDecOp	 
>31102	IncDec	++
>31103	Identifier	i
>31104	Condition	 
>31105	RelationalExpression	i < LR_MAX
>31106	Identifier	LR_MAX
>31107	Identifier	i
>31108	ForInit	 
>31109	AssignmentExpr	i = 0
>31110	PrimaryExpression	0
>31111	Identifier	i
>31112	IfStatement	if ( dsq -> game -> entitySaveData . size ( ) > 0 )
>31113	CompoundStatement	 
>31114	ExpressionStatement	 
>31115	CallExpression	saveFile . InsertEndChild ( entitiesNode )
>31116	ArgumentList	entitiesNode
>31117	Argument	entitiesNode
>31118	Identifier	entitiesNode
>31119	Callee	saveFile . InsertEndChild
>31120	MemberAccess	saveFile . InsertEndChild
>31121	Identifier	InsertEndChild
>31122	Identifier	saveFile
>31123	ExpressionStatement	 
>31124	CallExpression	entitiesNode -> SetAttribute ( \"j\" , os . str ( ) . c_str ( ) )
>31125	ArgumentList	\"j\"
>31126	Argument	os . str ( ) . c_str ( )
>31127	CallExpression	os . str ( ) . c_str ( )
>31128	ArgumentList	 
>31129	Callee	os . str ( ) . c_str
>31130	MemberAccess	os . str ( ) . c_str
>31131	Identifier	c_str
>31132	CallExpression	os . str ( )
>31133	ArgumentList	 
>31134	Callee	os . str
>31135	MemberAccess	os . str
>31136	Identifier	str
>31137	Identifier	os
>31138	Argument	\"j\"
>31139	PrimaryExpression	\"j\"
>31140	Callee	entitiesNode -> SetAttribute
>31141	PtrMemberAccess	entitiesNode -> SetAttribute
>31142	Identifier	SetAttribute
>31143	Identifier	entitiesNode
>31144	ForStatement	for ( int i = 0 ; i < dsq -> game -> entitySaveData . size ( ) ; i ++ )
>31145	CompoundStatement	 
>31146	ExpressionStatement	 
>31147	ShiftExpression	os << e -> x << \" \" << e -> y << \" \" << e -> rot << \" \" << 0 << \" \" << e -> id << \" \"
>31148	ShiftExpression	e -> x << \" \" << e -> y << \" \" << e -> rot << \" \" << 0 << \" \" << e -> id << \" \"
>31149	ShiftExpression	\" \" << e -> y << \" \" << e -> rot << \" \" << 0 << \" \" << e -> id << \" \"
>31150	ShiftExpression	e -> y << \" \" << e -> rot << \" \" << 0 << \" \" << e -> id << \" \"
>31151	ShiftExpression	\" \" << e -> rot << \" \" << 0 << \" \" << e -> id << \" \"
>31152	ShiftExpression	e -> rot << \" \" << 0 << \" \" << e -> id << \" \"
>31153	ShiftExpression	\" \" << 0 << \" \" << e -> id << \" \"
>31154	ShiftExpression	0 << \" \" << e -> id << \" \"
>31155	ShiftExpression	\" \" << e -> id << \" \"
>31156	ShiftExpression	e -> id << \" \"
>31157	PrimaryExpression	\" \"
>31158	PtrMemberAccess	e -> id
>31159	Identifier	id
>31160	Identifier	e
>31161	PrimaryExpression	\" \"
>31162	PrimaryExpression	0
>31163	PrimaryExpression	\" \"
>31164	PtrMemberAccess	e -> rot
>31165	Identifier	rot
>31166	Identifier	e
>31167	PrimaryExpression	\" \"
>31168	PtrMemberAccess	e -> y
>31169	Identifier	y
>31170	Identifier	e
>31171	PrimaryExpression	\" \"
>31172	PtrMemberAccess	e -> x
>31173	Identifier	x
>31174	Identifier	e
>31175	Identifier	os
>31176	IfStatement	if ( e -> idx == - 1 )
>31177	CompoundStatement	 
>31178	IfStatement	if ( ! e -> name . empty ( ) )
>31179	ElseStatement	else
>31180	ExpressionStatement	 
>31181	ShiftExpression	os << \"INVALID\" << \" \"
>31182	ShiftExpression	\"INVALID\" << \" \"
>31183	PrimaryExpression	\" \"
>31184	PrimaryExpression	\"INVALID\"
>31185	Identifier	os
>31186	ExpressionStatement	 
>31187	ShiftExpression	os << e -> name << \" \"
>31188	ShiftExpression	e -> name << \" \"
>31189	PrimaryExpression	\" \"
>31190	PtrMemberAccess	e -> name
>31191	Identifier	name
>31192	Identifier	e
>31193	Identifier	os
>31194	Condition	 
>31195	UnaryOp	! e -> name . empty ( )
>31196	CallExpression	e -> name . empty ( )
>31197	ArgumentList	 
>31198	Callee	e -> name . empty
>31199	MemberAccess	e -> name . empty
>31200	Identifier	empty
>31201	PtrMemberAccess	e -> name
>31202	Identifier	name
>31203	Identifier	e
>31204	UnaryOperator	!
>31205	Condition	 
>31206	EqualityExpression	e -> idx == - 1
>31207	UnaryOp	- 1
>31208	PrimaryExpression	1
>31209	UnaryOperator	-
>31210	PtrMemberAccess	e -> idx
>31211	Identifier	idx
>31212	Identifier	e
>31213	ExpressionStatement	 
>31214	ShiftExpression	os << e -> idx << \" \"
>31215	ShiftExpression	e -> idx << \" \"
>31216	PrimaryExpression	\" \"
>31217	PtrMemberAccess	e -> idx
>31218	Identifier	idx
>31219	Identifier	e
>31220	Identifier	os
>31221	IdentifierDeclStatement	 
>31222	IdentifierDecl	* e = & dsq -> game -> entitySaveData [ i ]
>31223	AssignmentExpr	* e = & dsq -> game -> entitySaveData [ i ]
>31224	UnaryOp	& dsq -> game -> entitySaveData [ i ]
>31225	ArrayIndexing	dsq -> game -> entitySaveData [ i ]
>31226	Identifier	i
>31227	PtrMemberAccess	dsq -> game -> entitySaveData
>31228	Identifier	entitySaveData
>31229	PtrMemberAccess	dsq -> game
>31230	Identifier	game
>31231	Identifier	dsq
>31232	UnaryOperator	&
>31233	Identifier	e
>31234	Identifier	e
>31235	IdentifierDeclType	EntitySaveData *
>31236	IncDecOp	 
>31237	IncDec	++
>31238	Identifier	i
>31239	Condition	 
>31240	RelationalExpression	i < dsq -> game -> entitySaveData . size ( )
>31241	CallExpression	dsq -> game -> entitySaveData . size ( )
>31242	ArgumentList	 
>31243	Callee	dsq -> game -> entitySaveData . size
>31244	MemberAccess	dsq -> game -> entitySaveData . size
>31245	Identifier	size
>31246	PtrMemberAccess	dsq -> game -> entitySaveData
>31247	Identifier	entitySaveData
>31248	PtrMemberAccess	dsq -> game
>31249	Identifier	game
>31250	Identifier	dsq
>31251	Identifier	i
>31252	ForInit	 
>31253	IdentifierDeclStatement	int i = 0 ;
>31254	IdentifierDecl	i = 0
>31255	AssignmentExpr	i = 0
>31256	PrimaryExpression	0
>31257	Identifier	i
>31258	Identifier	i
>31259	IdentifierDeclType	int
>31260	IdentifierDeclStatement	 
>31261	IdentifierDecl	os
>31262	Identifier	os
>31263	IdentifierDeclType	std 
>31264	IdentifierDeclStatement	 
>31265	IdentifierDecl	* entitiesNode = saveFile . NewElement ( \"Entities\" )
>31266	AssignmentExpr	* entitiesNode = saveFile . NewElement ( \"Entities\" )
>31267	CallExpression	saveFile . NewElement ( \"Entities\" )
>31268	ArgumentList	\"Entities\"
>31269	Argument	\"Entities\"
>31270	PrimaryExpression	\"Entities\"
>31271	Callee	saveFile . NewElement
>31272	MemberAccess	saveFile . NewElement
>31273	Identifier	NewElement
>31274	Identifier	saveFile
>31275	Identifier	entitiesNode
>31276	Identifier	entitiesNode
>31277	IdentifierDeclType	XMLElement *
>31278	Condition	 
>31279	RelationalExpression	dsq -> game -> entitySaveData . size ( ) > 0
>31280	PrimaryExpression	0
>31281	CallExpression	dsq -> game -> entitySaveData . size ( )
>31282	ArgumentList	 
>31283	Callee	dsq -> game -> entitySaveData . size
>31284	MemberAccess	dsq -> game -> entitySaveData . size
>31285	Identifier	size
>31286	PtrMemberAccess	dsq -> game -> entitySaveData
>31287	Identifier	entitySaveData
>31288	PtrMemberAccess	dsq -> game
>31289	Identifier	game
>31290	Identifier	dsq
>31291	ForStatement	for ( i = 0 ; i < dsq -> getNumElements ( ) ; i ++ )
>31292	CompoundStatement	 
>31293	IfStatement	if ( e -> isRepeatingTextureToFill ( ) )
>31294	CompoundStatement	 
>31295	ExpressionStatement	 
>31296	ShiftExpression	SE_rs << e -> repeatToFillScale . x << \" \" << e -> repeatToFillScale . y << \" \"
>31297	ShiftExpression	e -> repeatToFillScale . x << \" \" << e -> repeatToFillScale . y << \" \"
>31298	ShiftExpression	\" \" << e -> repeatToFillScale . y << \" \"
>31299	ShiftExpression	e -> repeatToFillScale . y << \" \"
>31300	PrimaryExpression	\" \"
>31301	MemberAccess	e -> repeatToFillScale . y
>31302	Identifier	y
>31303	PtrMemberAccess	e -> repeatToFillScale
>31304	Identifier	repeatToFillScale
>31305	Identifier	e
>31306	PrimaryExpression	\" \"
>31307	MemberAccess	e -> repeatToFillScale . x
>31308	Identifier	x
>31309	PtrMemberAccess	e -> repeatToFillScale
>31310	Identifier	repeatToFillScale
>31311	Identifier	e
>31312	Identifier	SE_rs
>31313	IdentifierDeclStatement	 
>31314	IdentifierDecl	& SE_rs = simpleElements_repeatScale [ e -> bgLayer ]
>31315	AssignmentExpr	& SE_rs = simpleElements_repeatScale [ e -> bgLayer ]
>31316	ArrayIndexing	simpleElements_repeatScale [ e -> bgLayer ]
>31317	PtrMemberAccess	e -> bgLayer
>31318	Identifier	bgLayer
>31319	Identifier	e
>31320	Identifier	simpleElements_repeatScale
>31321	Identifier	SE_rs
>31322	Identifier	SE_rs
>31323	IdentifierDeclType	std 
>31324	Condition	 
>31325	CallExpression	e -> isRepeatingTextureToFill ( )
>31326	ArgumentList	 
>31327	Callee	e -> isRepeatingTextureToFill
>31328	PtrMemberAccess	e -> isRepeatingTextureToFill
>31329	Identifier	isRepeatingTextureToFill
>31330	Identifier	e
>31331	ExpressionStatement	 
>31332	ShiftExpression	SE << e -> templateIdx << \" \" << int ( e -> position . x ) << \" \" << int ( e -> position . y ) << \" \" << \
>31333	ShiftExpression	e -> templateIdx << \" \" << int ( e -> position . x ) << \" \" << int ( e -> position . y ) << \" \" << int ( \
>31334	ShiftExpression	\" \" << int ( e -> position . x ) << \" \" << int ( e -> position . y ) << \" \" << int ( e -> rotation . \
>31335	ShiftExpression	int ( e -> position . x ) << \" \" << int ( e -> position . y ) << \" \" << int ( e -> rotation . z ) << \" \" << \
>31336	ShiftExpression	\" \" << int ( e -> position . y ) << \" \" << int ( e -> rotation . z ) << \" \" << e -> scale . x << \" \" << \
>31337	ShiftExpression	int ( e -> position . y ) << \" \" << int ( e -> rotation . z ) << \" \" << e -> scale . x << \" \" << e -> \
>31338	ShiftExpression	\" \" << int ( e -> rotation . z ) << \" \" << e -> scale . x << \" \" << e -> scale . y << \" \" << int ( e \
>31339	ShiftExpression	int ( e -> rotation . z ) << \" \" << e -> scale . x << \" \" << e -> scale . y << \" \" << int ( e -> isfh ( ) ) << \" \" << \
>31340	ShiftExpression	\" \" << e -> scale . x << \" \" << e -> scale . y << \" \" << int ( e -> isfh ( ) ) << \" \" << int ( e -> \
>31341	ShiftExpression	e -> scale . x << \" \" << e -> scale . y << \" \" << int ( e -> isfh ( ) ) << \" \" << int ( e -> isfv ( ) ) << \" \" << \
>31342	ShiftExpression	\" \" << e -> scale . y << \" \" << int ( e -> isfh ( ) ) << \" \" << int ( e -> isfv ( ) ) << \" \" << e -> \
>31343	ShiftExpression	e -> scale . y << \" \" << int ( e -> isfh ( ) ) << \" \" << int ( e -> isfv ( ) ) << \" \" << e -> elementFlag << \" \" << \
>31344	ShiftExpression	\" \" << int ( e -> isfh ( ) ) << \" \" << int ( e -> isfv ( ) ) << \" \" << e -> elementFlag << \" \" << e \
>31345	ShiftExpression	int ( e -> isfh ( ) ) << \" \" << int ( e -> isfv ( ) ) << \" \" << e -> elementFlag << \" \" << e -> getElementEffectIndex ( ) << \" \" << \
>31346	ShiftExpression	\" \" << int ( e -> isfv ( ) ) << \" \" << e -> elementFlag << \" \" << e -> getElementEffectIndex ( ) << \" \" << \
>31347	ShiftExpression	int ( e -> isfv ( ) ) << \" \" << e -> elementFlag << \" \" << e -> getElementEffectIndex ( ) << \" \" << \
>31348	ShiftExpression	\" \" << e -> elementFlag << \" \" << e -> getElementEffectIndex ( ) << \" \" << e -> isRepeatingTextureToFill ( ) << \" \"\
>31349	ShiftExpression	e -> elementFlag << \" \" << e -> getElementEffectIndex ( ) << \" \" << e -> isRepeatingTextureToFill ( ) << \" \"\
>31350	ShiftExpression	\" \" << e -> getElementEffectIndex ( ) << \" \" << e -> isRepeatingTextureToFill ( ) << \" \"
>31351	ShiftExpression	e -> getElementEffectIndex ( ) << \" \" << e -> isRepeatingTextureToFill ( ) << \" \"
>31352	ShiftExpression	\" \" << e -> isRepeatingTextureToFill ( ) << \" \"
>31353	ShiftExpression	e -> isRepeatingTextureToFill ( ) << \" \"
>31354	PrimaryExpression	\" \"
>31355	CallExpression	e -> isRepeatingTextureToFill ( )
>31356	ArgumentList	 
>31357	Callee	e -> isRepeatingTextureToFill
>31358	PtrMemberAccess	e -> isRepeatingTextureToFill
>31359	Identifier	isRepeatingTextureToFill
>31360	Identifier	e
>31361	PrimaryExpression	\" \"
>31362	CallExpression	e -> getElementEffectIndex ( )
>31363	ArgumentList	 
>31364	Callee	e -> getElementEffectIndex
>31365	PtrMemberAccess	e -> getElementEffectIndex
>31366	Identifier	getElementEffectIndex
>31367	Identifier	e
>31368	PrimaryExpression	\" \"
>31369	PtrMemberAccess	e -> elementFlag
>31370	Identifier	elementFlag
>31371	Identifier	e
>31372	PrimaryExpression	\" \"
>31373	CallExpression	int ( e -> isfv ( ) )
>31374	ArgumentList	e -> isfv ( )
>31375	Argument	e -> isfv ( )
>31376	CallExpression	e -> isfv ( )
>31377	ArgumentList	 
>31378	Callee	e -> isfv
>31379	PtrMemberAccess	e -> isfv
>31380	Identifier	isfv
>31381	Identifier	e
>31382	Callee	int
>31383	Identifier	int
>31384	PrimaryExpression	\" \"
>31385	CallExpression	int ( e -> isfh ( ) )
>31386	ArgumentList	e -> isfh ( )
>31387	Argument	e -> isfh ( )
>31388	CallExpression	e -> isfh ( )
>31389	ArgumentList	 
>31390	Callee	e -> isfh
>31391	PtrMemberAccess	e -> isfh
>31392	Identifier	isfh
>31393	Identifier	e
>31394	Callee	int
>31395	Identifier	int
>31396	PrimaryExpression	\" \"
>31397	MemberAccess	e -> scale . y
>31398	Identifier	y
>31399	PtrMemberAccess	e -> scale
>31400	Identifier	scale
>31401	Identifier	e
>31402	PrimaryExpression	\" \"
>31403	MemberAccess	e -> scale . x
>31404	Identifier	x
>31405	PtrMemberAccess	e -> scale
>31406	Identifier	scale
>31407	Identifier	e
>31408	PrimaryExpression	\" \"
>31409	CallExpression	int ( e -> rotation . z )
>31410	ArgumentList	e -> rotation . z
>31411	Argument	e -> rotation . z
>31412	MemberAccess	e -> rotation . z
>31413	Identifier	z
>31414	PtrMemberAccess	e -> rotation
>31415	Identifier	rotation
>31416	Identifier	e
>31417	Callee	int
>31418	Identifier	int
>31419	PrimaryExpression	\" \"
>31420	CallExpression	int ( e -> position . y )
>31421	ArgumentList	e -> position . y
>31422	Argument	e -> position . y
>31423	MemberAccess	e -> position . y
>31424	Identifier	y
>31425	PtrMemberAccess	e -> position
>31426	Identifier	position
>31427	Identifier	e
>31428	Callee	int
>31429	Identifier	int
>31430	PrimaryExpression	\" \"
>31431	CallExpression	int ( e -> position . x )
>31432	ArgumentList	e -> position . x
>31433	Argument	e -> position . x
>31434	MemberAccess	e -> position . x
>31435	Identifier	x
>31436	PtrMemberAccess	e -> position
>31437	Identifier	position
>31438	Identifier	e
>31439	Callee	int
>31440	Identifier	int
>31441	PrimaryExpression	\" \"
>31442	PtrMemberAccess	e -> templateIdx
>31443	Identifier	templateIdx
>31444	Identifier	e
>31445	Identifier	SE
>31446	IdentifierDeclStatement	 
>31447	IdentifierDecl	& SE = simpleElements [ e -> bgLayer ]
>31448	AssignmentExpr	& SE = simpleElements [ e -> bgLayer ]
>31449	ArrayIndexing	simpleElements [ e -> bgLayer ]
>31450	PtrMemberAccess	e -> bgLayer
>31451	Identifier	bgLayer
>31452	Identifier	e
>31453	Identifier	simpleElements
>31454	Identifier	SE
>31455	Identifier	SE
>31456	IdentifierDeclType	std 
>31457	IdentifierDeclStatement	 
>31458	IdentifierDecl	* e = dsq -> getElement ( i )
>31459	AssignmentExpr	* e = dsq -> getElement ( i )
>31460	CallExpression	dsq -> getElement ( i )
>31461	ArgumentList	i
>31462	Argument	i
>31463	Identifier	i
>31464	Callee	dsq -> getElement
>31465	PtrMemberAccess	dsq -> getElement
>31466	Identifier	getElement
>31467	Identifier	dsq
>31468	Identifier	e
>31469	Identifier	e
>31470	IdentifierDeclType	Element *
>31471	IncDecOp	 
>31472	IncDec	++
>31473	Identifier	i
>31474	Condition	 
>31475	RelationalExpression	i < dsq -> getNumElements ( )
>31476	CallExpression	dsq -> getNumElements ( )
>31477	ArgumentList	 
>31478	Callee	dsq -> getNumElements
>31479	PtrMemberAccess	dsq -> getNumElements
>31480	Identifier	getNumElements
>31481	Identifier	dsq
>31482	Identifier	i
>31483	ForInit	 
>31484	AssignmentExpr	i = 0
>31485	PrimaryExpression	0
>31486	Identifier	i
>31487	IdentifierDeclStatement	 
>31488	IdentifierDecl	simpleElements_repeatScale [ LR_MAX ]
>31489	Identifier	LR_MAX
>31490	Identifier	simpleElements_repeatScale
>31491	IdentifierDeclType	std 
>31492	IdentifierDeclStatement	 
>31493	IdentifierDecl	simpleElements [ LR_MAX ]
>31494	Identifier	LR_MAX
>31495	Identifier	simpleElements
>31496	IdentifierDeclType	std 
>31497	ForStatement	for ( i = 0 ; i < dsq -> game -> warpAreas . size ( ) ; i ++ )
>31498	CompoundStatement	 
>31499	ExpressionStatement	 
>31500	CallExpression	saveFile . InsertEndChild ( waSF )
>31501	ArgumentList	waSF
>31502	Argument	waSF
>31503	Identifier	waSF
>31504	Callee	saveFile . InsertEndChild
>31505	MemberAccess	saveFile . InsertEndChild
>31506	Identifier	InsertEndChild
>31507	Identifier	saveFile
>31508	ExpressionStatement	 
>31509	CallExpression	waSF -> SetAttribute ( \"scene\" , os . str ( ) . c_str ( ) )
>31510	ArgumentList	\"scene\"
>31511	Argument	os . str ( ) . c_str ( )
>31512	CallExpression	os . str ( ) . c_str ( )
>31513	ArgumentList	 
>31514	Callee	os . str ( ) . c_str
>31515	MemberAccess	os . str ( ) . c_str
>31516	Identifier	c_str
>31517	CallExpression	os . str ( )
>31518	ArgumentList	 
>31519	Callee	os . str
>31520	MemberAccess	os . str
>31521	Identifier	str
>31522	Identifier	os
>31523	Argument	\"scene\"
>31524	PrimaryExpression	\"scene\"
>31525	Callee	waSF -> SetAttribute
>31526	PtrMemberAccess	waSF -> SetAttribute
>31527	Identifier	SetAttribute
>31528	Identifier	waSF
>31529	ExpressionStatement	 
>31530	ShiftExpression	os << a . sceneName << \" \" << a . warpAreaType << \" \" << a . spawnOffset . x << \" \" << a . spawnOffset \
>31531	ShiftExpression	a . sceneName << \" \" << a . warpAreaType << \" \" << a . spawnOffset . x << \" \" << a . spawnOffset . y
>31532	ShiftExpression	\" \" << a . warpAreaType << \" \" << a . spawnOffset . x << \" \" << a . spawnOffset . y
>31533	ShiftExpression	a . warpAreaType << \" \" << a . spawnOffset . x << \" \" << a . spawnOffset . y
>31534	ShiftExpression	\" \" << a . spawnOffset . x << \" \" << a . spawnOffset . y
>31535	ShiftExpression	a . spawnOffset . x << \" \" << a . spawnOffset . y
>31536	ShiftExpression	\" \" << a . spawnOffset . y
>31537	MemberAccess	a . spawnOffset . y
>31538	Identifier	y
>31539	MemberAccess	a . spawnOffset
>31540	Identifier	spawnOffset
>31541	Identifier	a
>31542	PrimaryExpression	\" \"
>31543	MemberAccess	a . spawnOffset . x
>31544	Identifier	x
>31545	MemberAccess	a . spawnOffset
>31546	Identifier	spawnOffset
>31547	Identifier	a
>31548	PrimaryExpression	\" \"
>31549	MemberAccess	a . warpAreaType
>31550	Identifier	warpAreaType
>31551	Identifier	a
>31552	PrimaryExpression	\" \"
>31553	MemberAccess	a . sceneName
>31554	Identifier	sceneName
>31555	Identifier	a
>31556	Identifier	os
>31557	IdentifierDeclStatement	 
>31558	IdentifierDecl	os
>31559	Identifier	os
>31560	IdentifierDeclType	std 
>31561	IfStatement	if ( a . generated )
>31562	CompoundStatement	 
>31563	ExpressionStatement	 
>31564	CallExpression	waSF -> SetAttribute ( \"g\" , 1 )
>31565	ArgumentList	\"g\"
>31566	Argument	1
>31567	PrimaryExpression	1
>31568	Argument	\"g\"
>31569	PrimaryExpression	\"g\"
>31570	Callee	waSF -> SetAttribute
>31571	PtrMemberAccess	waSF -> SetAttribute
>31572	Identifier	SetAttribute
>31573	Identifier	waSF
>31574	Condition	 
>31575	MemberAccess	a . generated
>31576	Identifier	generated
>31577	Identifier	a
>31578	IfStatement	if ( a . radius > 0 )
>31579	ElseStatement	else
>31580	IfStatement	if ( a . w > 0 && a . h > 0 )
>31581	CompoundStatement	 
>31582	ExpressionStatement	 
>31583	CallExpression	waSF -> SetAttribute ( \"h\" , a . h )
>31584	ArgumentList	\"h\"
>31585	Argument	a . h
>31586	MemberAccess	a . h
>31587	Identifier	h
>31588	Identifier	a
>31589	Argument	\"h\"
>31590	PrimaryExpression	\"h\"
>31591	Callee	waSF -> SetAttribute
>31592	PtrMemberAccess	waSF -> SetAttribute
>31593	Identifier	SetAttribute
>31594	Identifier	waSF
>31595	ExpressionStatement	 
>31596	CallExpression	waSF -> SetAttribute ( \"w\" , a . w )
>31597	ArgumentList	\"w\"
>31598	Argument	a . w
>31599	MemberAccess	a . w
>31600	Identifier	w
>31601	Identifier	a
>31602	Argument	\"w\"
>31603	PrimaryExpression	\"w\"
>31604	Callee	waSF -> SetAttribute
>31605	PtrMemberAccess	waSF -> SetAttribute
>31606	Identifier	SetAttribute
>31607	Identifier	waSF
>31608	Condition	 
>31609	AndExpression	a . w > 0 && a . h > 0
>31610	RelationalExpression	a . h > 0
>31611	PrimaryExpression	0
>31612	MemberAccess	a . h
>31613	Identifier	h
>31614	Identifier	a
>31615	RelationalExpression	a . w > 0
>31616	PrimaryExpression	0
>31617	MemberAccess	a . w
>31618	Identifier	w
>31619	Identifier	a
>31620	ExpressionStatement	 
>31621	CallExpression	waSF -> SetAttribute ( \"radius\" , a . radius )
>31622	ArgumentList	\"radius\"
>31623	Argument	a . radius
>31624	MemberAccess	a . radius
>31625	Identifier	radius
>31626	Identifier	a
>31627	Argument	\"radius\"
>31628	PrimaryExpression	\"radius\"
>31629	Callee	waSF -> SetAttribute
>31630	PtrMemberAccess	waSF -> SetAttribute
>31631	Identifier	SetAttribute
>31632	Identifier	waSF
>31633	Condition	 
>31634	RelationalExpression	a . radius > 0
>31635	PrimaryExpression	0
>31636	MemberAccess	a . radius
>31637	Identifier	radius
>31638	Identifier	a
>31639	ExpressionStatement	 
>31640	CallExpression	waSF -> SetAttribute ( \"y\" , a . position . y )
>31641	ArgumentList	\"y\"
>31642	Argument	a . position . y
>31643	MemberAccess	a . position . y
>31644	Identifier	y
>31645	MemberAccess	a . position
>31646	Identifier	position
>31647	Identifier	a
>31648	Argument	\"y\"
>31649	PrimaryExpression	\"y\"
>31650	Callee	waSF -> SetAttribute
>31651	PtrMemberAccess	waSF -> SetAttribute
>31652	Identifier	SetAttribute
>31653	Identifier	waSF
>31654	ExpressionStatement	 
>31655	CallExpression	waSF -> SetAttribute ( \"x\" , a . position . x )
>31656	ArgumentList	\"x\"
>31657	Argument	a . position . x
>31658	MemberAccess	a . position . x
>31659	Identifier	x
>31660	MemberAccess	a . position
>31661	Identifier	position
>31662	Identifier	a
>31663	Argument	\"x\"
>31664	PrimaryExpression	\"x\"
>31665	Callee	waSF -> SetAttribute
>31666	PtrMemberAccess	waSF -> SetAttribute
>31667	Identifier	SetAttribute
>31668	Identifier	waSF
>31669	IdentifierDeclStatement	 
>31670	IdentifierDecl	* waSF = saveFile . NewElement ( \"WarpArea\" )
>31671	AssignmentExpr	* waSF = saveFile . NewElement ( \"WarpArea\" )
>31672	CallExpression	saveFile . NewElement ( \"WarpArea\" )
>31673	ArgumentList	\"WarpArea\"
>31674	Argument	\"WarpArea\"
>31675	PrimaryExpression	\"WarpArea\"
>31676	Callee	saveFile . NewElement
>31677	MemberAccess	saveFile . NewElement
>31678	Identifier	NewElement
>31679	Identifier	saveFile
>31680	Identifier	waSF
>31681	Identifier	waSF
>31682	IdentifierDeclType	XMLElement *
>31683	IdentifierDeclStatement	 
>31684	IdentifierDecl	a = dsq -> game -> warpAreas [ i ]
>31685	AssignmentExpr	a = dsq -> game -> warpAreas [ i ]
>31686	ArrayIndexing	dsq -> game -> warpAreas [ i ]
>31687	Identifier	i
>31688	PtrMemberAccess	dsq -> game -> warpAreas
>31689	Identifier	warpAreas
>31690	PtrMemberAccess	dsq -> game
>31691	Identifier	game
>31692	Identifier	dsq
>31693	Identifier	a
>31694	Identifier	a
>31695	IdentifierDeclType	WarpArea
>31696	IncDecOp	 
>31697	IncDec	++
>31698	Identifier	i
>31699	Condition	 
>31700	RelationalExpression	i < dsq -> game -> warpAreas . size ( )
>31701	CallExpression	dsq -> game -> warpAreas . size ( )
>31702	ArgumentList	 
>31703	Callee	dsq -> game -> warpAreas . size
>31704	MemberAccess	dsq -> game -> warpAreas . size
>31705	Identifier	size
>31706	PtrMemberAccess	dsq -> game -> warpAreas
>31707	Identifier	warpAreas
>31708	PtrMemberAccess	dsq -> game
>31709	Identifier	game
>31710	Identifier	dsq
>31711	Identifier	i
>31712	ForInit	 
>31713	AssignmentExpr	i = 0
>31714	PrimaryExpression	0
>31715	Identifier	i
>31716	ForStatement	for ( i = 0 ; i < dsq -> game -> getNumPaths ( ) ; i ++ )
>31717	CompoundStatement	 
>31718	ExpressionStatement	 
>31719	CallExpression	saveFile . InsertEndChild ( pathXml )
>31720	ArgumentList	pathXml
>31721	Argument	pathXml
>31722	Identifier	pathXml
>31723	Callee	saveFile . InsertEndChild
>31724	MemberAccess	saveFile . InsertEndChild
>31725	Identifier	InsertEndChild
>31726	Identifier	saveFile
>31727	ForStatement	for ( int n = 0 ; n < p -> nodes . size ( ) ; n ++ )
>31728	CompoundStatement	 
>31729	ExpressionStatement	 
>31730	CallExpression	pathXml -> InsertEndChild ( nodeXml )
>31731	ArgumentList	nodeXml
>31732	Argument	nodeXml
>31733	Identifier	nodeXml
>31734	Callee	pathXml -> InsertEndChild
>31735	PtrMemberAccess	pathXml -> InsertEndChild
>31736	Identifier	InsertEndChild
>31737	Identifier	pathXml
>31738	IfStatement	if ( p -> nodes [ n ] . maxSpeed != - 1 )
>31739	CompoundStatement	 
>31740	ExpressionStatement	 
>31741	CallExpression	nodeXml -> SetAttribute ( \"ms\" , p -> nodes [ n ] . maxSpeed )
>31742	ArgumentList	\"ms\"
>31743	Argument	p -> nodes [ n ] . maxSpeed
>31744	MemberAccess	p -> nodes [ n ] . maxSpeed
>31745	Identifier	maxSpeed
>31746	ArrayIndexing	p -> nodes [ n ]
>31747	Identifier	n
>31748	PtrMemberAccess	p -> nodes
>31749	Identifier	nodes
>31750	Identifier	p
>31751	Argument	\"ms\"
>31752	PrimaryExpression	\"ms\"
>31753	Callee	nodeXml -> SetAttribute
>31754	PtrMemberAccess	nodeXml -> SetAttribute
>31755	Identifier	SetAttribute
>31756	Identifier	nodeXml
>31757	Condition	 
>31758	EqualityExpression	p -> nodes [ n ] . maxSpeed != - 1
>31759	UnaryOp	- 1
>31760	PrimaryExpression	1
>31761	UnaryOperator	-
>31762	MemberAccess	p -> nodes [ n ] . maxSpeed
>31763	Identifier	maxSpeed
>31764	ArrayIndexing	p -> nodes [ n ]
>31765	Identifier	n
>31766	PtrMemberAccess	p -> nodes
>31767	Identifier	nodes
>31768	Identifier	p
>31769	ExpressionStatement	 
>31770	CallExpression	nodeXml -> SetAttribute ( \"shape\" , ( int ) p -> pathShape )
>31771	ArgumentList	\"shape\"
>31772	Argument	( int ) p -> pathShape
>31773	CastExpression	( int ) p -> pathShape
>31774	PtrMemberAccess	p -> pathShape
>31775	Identifier	pathShape
>31776	Identifier	p
>31777	CastTarget	int
>31778	Argument	\"shape\"
>31779	PrimaryExpression	\"shape\"
>31780	Callee	nodeXml -> SetAttribute
>31781	PtrMemberAccess	nodeXml -> SetAttribute
>31782	Identifier	SetAttribute
>31783	Identifier	nodeXml
>31784	ExpressionStatement	 
>31785	CallExpression	nodeXml -> SetAttribute ( \"rect\" , os2 . str ( ) . c_str ( ) )
>31786	ArgumentList	\"rect\"
>31787	Argument	os2 . str ( ) . c_str ( )
>31788	CallExpression	os2 . str ( ) . c_str ( )
>31789	ArgumentList	 
>31790	Callee	os2 . str ( ) . c_str
>31791	MemberAccess	os2 . str ( ) . c_str
>31792	Identifier	c_str
>31793	CallExpression	os2 . str ( )
>31794	ArgumentList	 
>31795	Callee	os2 . str
>31796	MemberAccess	os2 . str
>31797	Identifier	str
>31798	Identifier	os2
>31799	Argument	\"rect\"
>31800	PrimaryExpression	\"rect\"
>31801	Callee	nodeXml -> SetAttribute
>31802	PtrMemberAccess	nodeXml -> SetAttribute
>31803	Identifier	SetAttribute
>31804	Identifier	nodeXml
>31805	ExpressionStatement	 
>31806	ShiftExpression	os2 << p -> rect . getWidth ( ) << \" \" << p -> rect . getHeight ( )
>31807	ShiftExpression	p -> rect . getWidth ( ) << \" \" << p -> rect . getHeight ( )
>31808	ShiftExpression	\" \" << p -> rect . getHeight ( )
>31809	CallExpression	p -> rect . getHeight ( )
>31810	ArgumentList	 
>31811	Callee	p -> rect . getHeight
>31812	MemberAccess	p -> rect . getHeight
>31813	Identifier	getHeight
>31814	PtrMemberAccess	p -> rect
>31815	Identifier	rect
>31816	Identifier	p
>31817	PrimaryExpression	\" \"
>31818	CallExpression	p -> rect . getWidth ( )
>31819	ArgumentList	 
>31820	Callee	p -> rect . getWidth
>31821	MemberAccess	p -> rect . getWidth
>31822	Identifier	getWidth
>31823	PtrMemberAccess	p -> rect
>31824	Identifier	rect
>31825	Identifier	p
>31826	Identifier	os2
>31827	IdentifierDeclStatement	 
>31828	IdentifierDecl	os2
>31829	Identifier	os2
>31830	IdentifierDeclType	std 
>31831	ExpressionStatement	 
>31832	CallExpression	nodeXml -> SetAttribute ( \"pos\" , os . str ( ) . c_str ( ) )
>31833	ArgumentList	\"pos\"
>31834	Argument	os . str ( ) . c_str ( )
>31835	CallExpression	os . str ( ) . c_str ( )
>31836	ArgumentList	 
>31837	Callee	os . str ( ) . c_str
>31838	MemberAccess	os . str ( ) . c_str
>31839	Identifier	c_str
>31840	CallExpression	os . str ( )
>31841	ArgumentList	 
>31842	Callee	os . str
>31843	MemberAccess	os . str
>31844	Identifier	str
>31845	Identifier	os
>31846	Argument	\"pos\"
>31847	PrimaryExpression	\"pos\"
>31848	Callee	nodeXml -> SetAttribute
>31849	PtrMemberAccess	nodeXml -> SetAttribute
>31850	Identifier	SetAttribute
>31851	Identifier	nodeXml
>31852	ExpressionStatement	 
>31853	ShiftExpression	os << int ( p -> nodes [ n ] . position . x ) << \" \" << int ( p -> nodes [ n ] . position . y )
>31854	ShiftExpression	int ( p -> nodes [ n ] . position . x ) << \" \" << int ( p -> nodes [ n ] . position . y )
>31855	ShiftExpression	\" \" << int ( p -> nodes [ n ] . position . y )
>31856	CallExpression	int ( p -> nodes [ n ] . position . y )
>31857	ArgumentList	p -> nodes [ n ] . position . y
>31858	Argument	p -> nodes [ n ] . position . y
>31859	MemberAccess	p -> nodes [ n ] . position . y
>31860	Identifier	y
>31861	MemberAccess	p -> nodes [ n ] . position
>31862	Identifier	position
>31863	ArrayIndexing	p -> nodes [ n ]
>31864	Identifier	n
>31865	PtrMemberAccess	p -> nodes
>31866	Identifier	nodes
>31867	Identifier	p
>31868	Callee	int
>31869	Identifier	int
>31870	PrimaryExpression	\" \"
>31871	CallExpression	int ( p -> nodes [ n ] . position . x )
>31872	ArgumentList	p -> nodes [ n ] . position . x
>31873	Argument	p -> nodes [ n ] . position . x
>31874	MemberAccess	p -> nodes [ n ] . position . x
>31875	Identifier	x
>31876	MemberAccess	p -> nodes [ n ] . position
>31877	Identifier	position
>31878	ArrayIndexing	p -> nodes [ n ]
>31879	Identifier	n
>31880	PtrMemberAccess	p -> nodes
>31881	Identifier	nodes
>31882	Identifier	p
>31883	Callee	int
>31884	Identifier	int
>31885	Identifier	os
>31886	IdentifierDeclStatement	 
>31887	IdentifierDecl	os
>31888	Identifier	os
>31889	IdentifierDeclType	std 
>31890	IdentifierDeclStatement	 
>31891	IdentifierDecl	* nodeXml = saveFile . NewElement ( \"Node\" )
>31892	AssignmentExpr	* nodeXml = saveFile . NewElement ( \"Node\" )
>31893	CallExpression	saveFile . NewElement ( \"Node\" )
>31894	ArgumentList	\"Node\"
>31895	Argument	\"Node\"
>31896	PrimaryExpression	\"Node\"
>31897	Callee	saveFile . NewElement
>31898	MemberAccess	saveFile . NewElement
>31899	Identifier	NewElement
>31900	Identifier	saveFile
>31901	Identifier	nodeXml
>31902	Identifier	nodeXml
>31903	IdentifierDeclType	XMLElement *
>31904	IncDecOp	 
>31905	IncDec	++
>31906	Identifier	n
>31907	Condition	 
>31908	RelationalExpression	n < p -> nodes . size ( )
>31909	CallExpression	p -> nodes . size ( )
>31910	ArgumentList	 
>31911	Callee	p -> nodes . size
>31912	MemberAccess	p -> nodes . size
>31913	Identifier	size
>31914	PtrMemberAccess	p -> nodes
>31915	Identifier	nodes
>31916	Identifier	p
>31917	Identifier	n
>31918	ForInit	 
>31919	IdentifierDeclStatement	int n = 0 ;
>31920	IdentifierDecl	n = 0
>31921	AssignmentExpr	n = 0
>31922	PrimaryExpression	0
>31923	Identifier	n
>31924	Identifier	n
>31925	IdentifierDeclType	int
>31926	ExpressionStatement	 
>31927	CallExpression	pathXml -> SetAttribute ( \"name\" , p -> name . c_str ( ) )
>31928	ArgumentList	\"name\"
>31929	Argument	p -> name . c_str ( )
>31930	CallExpression	p -> name . c_str ( )
>31931	ArgumentList	 
>31932	Callee	p -> name . c_str
>31933	MemberAccess	p -> name . c_str
>31934	Identifier	c_str
>31935	PtrMemberAccess	p -> name
>31936	Identifier	name
>31937	Identifier	p
>31938	Argument	\"name\"
>31939	PrimaryExpression	\"name\"
>31940	Callee	pathXml -> SetAttribute
>31941	PtrMemberAccess	pathXml -> SetAttribute
>31942	Identifier	SetAttribute
>31943	Identifier	pathXml
>31944	IdentifierDeclStatement	 
>31945	IdentifierDecl	* p = dsq -> game -> getPath ( i )
>31946	AssignmentExpr	* p = dsq -> game -> getPath ( i )
>31947	CallExpression	dsq -> game -> getPath ( i )
>31948	ArgumentList	i
>31949	Argument	i
>31950	Identifier	i
>31951	Callee	dsq -> game -> getPath
>31952	PtrMemberAccess	dsq -> game -> getPath
>31953	Identifier	getPath
>31954	PtrMemberAccess	dsq -> game
>31955	Identifier	game
>31956	Identifier	dsq
>31957	Identifier	p
>31958	Identifier	p
>31959	IdentifierDeclType	Path *
>31960	IdentifierDeclStatement	 
>31961	IdentifierDecl	* pathXml = saveFile . NewElement ( \"Path\" )
>31962	AssignmentExpr	* pathXml = saveFile . NewElement ( \"Path\" )
>31963	CallExpression	saveFile . NewElement ( \"Path\" )
>31964	ArgumentList	\"Path\"
>31965	Argument	\"Path\"
>31966	PrimaryExpression	\"Path\"
>31967	Callee	saveFile . NewElement
>31968	MemberAccess	saveFile . NewElement
>31969	Identifier	NewElement
>31970	Identifier	saveFile
>31971	Identifier	pathXml
>31972	Identifier	pathXml
>31973	IdentifierDeclType	XMLElement *
>31974	IncDecOp	 
>31975	IncDec	++
>31976	Identifier	i
>31977	Condition	 
>31978	RelationalExpression	i < dsq -> game -> getNumPaths ( )
>31979	CallExpression	dsq -> game -> getNumPaths ( )
>31980	ArgumentList	 
>31981	Callee	dsq -> game -> getNumPaths
>31982	PtrMemberAccess	dsq -> game -> getNumPaths
>31983	Identifier	getNumPaths
>31984	PtrMemberAccess	dsq -> game
>31985	Identifier	game
>31986	Identifier	dsq
>31987	Identifier	i
>31988	ForInit	 
>31989	AssignmentExpr	i = 0
>31990	PrimaryExpression	0
>31991	Identifier	i
>31992	ExpressionStatement	 
>31993	CallExpression	saveFile . InsertEndChild ( obsXml )
>31994	ArgumentList	obsXml
>31995	Argument	obsXml
>31996	Identifier	obsXml
>31997	Callee	saveFile . InsertEndChild
>31998	MemberAccess	saveFile . InsertEndChild
>31999	Identifier	InsertEndChild
>32000	Identifier	saveFile
>32001	ExpressionStatement	 
>32002	CallExpression	obsXml -> SetAttribute ( \"d\" , obs . str ( ) . c_str ( ) )
>32003	ArgumentList	\"d\"
>32004	Argument	obs . str ( ) . c_str ( )
>32005	CallExpression	obs . str ( ) . c_str ( )
>32006	ArgumentList	 
>32007	Callee	obs . str ( ) . c_str
>32008	MemberAccess	obs . str ( ) . c_str
>32009	Identifier	c_str
>32010	CallExpression	obs . str ( )
>32011	ArgumentList	 
>32012	Callee	obs . str
>32013	MemberAccess	obs . str
>32014	Identifier	str
>32015	Identifier	obs
>32016	Argument	\"d\"
>32017	PrimaryExpression	\"d\"
>32018	Callee	obsXml -> SetAttribute
>32019	PtrMemberAccess	obsXml -> SetAttribute
>32020	Identifier	SetAttribute
>32021	Identifier	obsXml
>32022	IdentifierDeclStatement	 
>32023	IdentifierDecl	* obsXml = saveFile . NewElement ( \"Obs\" )
>32024	AssignmentExpr	* obsXml = saveFile . NewElement ( \"Obs\" )
>32025	CallExpression	saveFile . NewElement ( \"Obs\" )
>32026	ArgumentList	\"Obs\"
>32027	Argument	\"Obs\"
>32028	PrimaryExpression	\"Obs\"
>32029	Callee	saveFile . NewElement
>32030	MemberAccess	saveFile . NewElement
>32031	Identifier	NewElement
>32032	Identifier	saveFile
>32033	Identifier	obsXml
>32034	Identifier	obsXml
>32035	IdentifierDeclType	XMLElement *
>32036	ForStatement	for ( i = 0 ; i < obsRows . size ( ) ; i ++ )
>32037	CompoundStatement	 
>32038	ExpressionStatement	 
>32039	ShiftExpression	obs << obsRows [ i ] . tx << \" \" << obsRows [ i ] . ty << \" \" << obsRows [ i ] . len << \" \"
>32040	ShiftExpression	obsRows [ i ] . tx << \" \" << obsRows [ i ] . ty << \" \" << obsRows [ i ] . len << \" \"
>32041	ShiftExpression	\" \" << obsRows [ i ] . ty << \" \" << obsRows [ i ] . len << \" \"
>32042	ShiftExpression	obsRows [ i ] . ty << \" \" << obsRows [ i ] . len << \" \"
>32043	ShiftExpression	\" \" << obsRows [ i ] . len << \" \"
>32044	ShiftExpression	obsRows [ i ] . len << \" \"
>32045	PrimaryExpression	\" \"
>32046	MemberAccess	obsRows [ i ] . len
>32047	Identifier	len
>32048	ArrayIndexing	obsRows [ i ]
>32049	Identifier	i
>32050	Identifier	obsRows
>32051	PrimaryExpression	\" \"
>32052	MemberAccess	obsRows [ i ] . ty
>32053	Identifier	ty
>32054	ArrayIndexing	obsRows [ i ]
>32055	Identifier	i
>32056	Identifier	obsRows
>32057	PrimaryExpression	\" \"
>32058	MemberAccess	obsRows [ i ] . tx
>32059	Identifier	tx
>32060	ArrayIndexing	obsRows [ i ]
>32061	Identifier	i
>32062	Identifier	obsRows
>32063	Identifier	obs
>32064	IncDecOp	 
>32065	IncDec	++
>32066	Identifier	i
>32067	Condition	 
>32068	RelationalExpression	i < obsRows . size ( )
>32069	CallExpression	obsRows . size ( )
>32070	ArgumentList	 
>32071	Callee	obsRows . size
>32072	MemberAccess	obsRows . size
>32073	Identifier	size
>32074	Identifier	obsRows
>32075	Identifier	i
>32076	ForInit	 
>32077	AssignmentExpr	i = 0
>32078	PrimaryExpression	0
>32079	Identifier	i
>32080	IdentifierDeclStatement	 
>32081	IdentifierDecl	i = 0
>32082	AssignmentExpr	i = 0
>32083	PrimaryExpression	0
>32084	Identifier	i
>32085	Identifier	i
>32086	IdentifierDeclType	int
>32087	IdentifierDeclStatement	 
>32088	IdentifierDecl	obs
>32089	Identifier	obs
>32090	IdentifierDeclType	std 
>32091	IfStatement	if ( level )
>32092	CompoundStatement	 
>32093	IfStatement	if ( ! saveMusic . empty ( ) )
>32094	CompoundStatement	 
>32095	ExpressionStatement	 
>32096	CallExpression	level -> SetAttribute ( \"music\" , saveMusic . c_str ( ) )
>32097	ArgumentList	\"music\"
>32098	Argument	saveMusic . c_str ( )
>32099	CallExpression	saveMusic . c_str ( )
>32100	ArgumentList	 
>32101	Callee	saveMusic . c_str
>32102	MemberAccess	saveMusic . c_str
>32103	Identifier	c_str
>32104	Identifier	saveMusic
>32105	Argument	\"music\"
>32106	PrimaryExpression	\"music\"
>32107	Callee	level -> SetAttribute
>32108	PtrMemberAccess	level -> SetAttribute
>32109	Identifier	SetAttribute
>32110	Identifier	level
>32111	Condition	 
>32112	UnaryOp	! saveMusic . empty ( )
>32113	CallExpression	saveMusic . empty ( )
>32114	ArgumentList	 
>32115	Callee	saveMusic . empty
>32116	MemberAccess	saveMusic . empty
>32117	Identifier	empty
>32118	Identifier	saveMusic
>32119	UnaryOperator	!
>32120	IfStatement	if ( grad )
>32121	CompoundStatement	 
>32122	ExpressionStatement	 
>32123	CallExpression	level -> SetAttribute ( \"gradBtm\" , os2 . str ( ) . c_str ( ) )
>32124	ArgumentList	\"gradBtm\"
>32125	Argument	os2 . str ( ) . c_str ( )
>32126	CallExpression	os2 . str ( ) . c_str ( )
>32127	ArgumentList	 
>32128	Callee	os2 . str ( ) . c_str
>32129	MemberAccess	os2 . str ( ) . c_str
>32130	Identifier	c_str
>32131	CallExpression	os2 . str ( )
>32132	ArgumentList	 
>32133	Callee	os2 . str
>32134	MemberAccess	os2 . str
>32135	Identifier	str
>32136	Identifier	os2
>32137	Argument	\"gradBtm\"
>32138	PrimaryExpression	\"gradBtm\"
>32139	Callee	level -> SetAttribute
>32140	PtrMemberAccess	level -> SetAttribute
>32141	Identifier	SetAttribute
>32142	Identifier	level
>32143	ExpressionStatement	 
>32144	ShiftExpression	os2 << gradBtm . x << \" \" << gradBtm . y << \" \" << gradBtm . z
>32145	ShiftExpression	gradBtm . x << \" \" << gradBtm . y << \" \" << gradBtm . z
>32146	ShiftExpression	\" \" << gradBtm . y << \" \" << gradBtm . z
>32147	ShiftExpression	gradBtm . y << \" \" << gradBtm . z
>32148	ShiftExpression	\" \" << gradBtm . z
>32149	MemberAccess	gradBtm . z
>32150	Identifier	z
>32151	Identifier	gradBtm
>32152	PrimaryExpression	\" \"
>32153	MemberAccess	gradBtm . y
>32154	Identifier	y
>32155	Identifier	gradBtm
>32156	PrimaryExpression	\" \"
>32157	MemberAccess	gradBtm . x
>32158	Identifier	x
>32159	Identifier	gradBtm
>32160	Identifier	os2
>32161	IdentifierDeclStatement	 
>32162	IdentifierDecl	os2
>32163	Identifier	os2
>32164	IdentifierDeclType	std 
>32165	ExpressionStatement	 
>32166	CallExpression	level -> SetAttribute ( \"gradTop\" , os . str ( ) . c_str ( ) )
>32167	ArgumentList	\"gradTop\"
>32168	Argument	os . str ( ) . c_str ( )
>32169	CallExpression	os . str ( ) . c_str ( )
>32170	ArgumentList	 
>32171	Callee	os . str ( ) . c_str
>32172	MemberAccess	os . str ( ) . c_str
>32173	Identifier	c_str
>32174	CallExpression	os . str ( )
>32175	ArgumentList	 
>32176	Callee	os . str
>32177	MemberAccess	os . str
>32178	Identifier	str
>32179	Identifier	os
>32180	Argument	\"gradTop\"
>32181	PrimaryExpression	\"gradTop\"
>32182	Callee	level -> SetAttribute
>32183	PtrMemberAccess	level -> SetAttribute
>32184	Identifier	SetAttribute
>32185	Identifier	level
>32186	ExpressionStatement	 
>32187	ShiftExpression	os << gradTop . x << \" \" << gradTop . y << \" \" << gradTop . z
>32188	ShiftExpression	gradTop . x << \" \" << gradTop . y << \" \" << gradTop . z
>32189	ShiftExpression	\" \" << gradTop . y << \" \" << gradTop . z
>32190	ShiftExpression	gradTop . y << \" \" << gradTop . z
>32191	ShiftExpression	\" \" << gradTop . z
>32192	MemberAccess	gradTop . z
>32193	Identifier	z
>32194	Identifier	gradTop
>32195	PrimaryExpression	\" \"
>32196	MemberAccess	gradTop . y
>32197	Identifier	y
>32198	Identifier	gradTop
>32199	PrimaryExpression	\" \"
>32200	MemberAccess	gradTop . x
>32201	Identifier	x
>32202	Identifier	gradTop
>32203	Identifier	os
>32204	IdentifierDeclStatement	 
>32205	IdentifierDecl	os
>32206	Identifier	os
>32207	IdentifierDeclType	std 
>32208	ExpressionStatement	 
>32209	CallExpression	level -> SetAttribute ( \"gradient\" , 1 )
>32210	ArgumentList	\"gradient\"
>32211	Argument	1
>32212	PrimaryExpression	1
>32213	Argument	\"gradient\"
>32214	PrimaryExpression	\"gradient\"
>32215	Callee	level -> SetAttribute
>32216	PtrMemberAccess	level -> SetAttribute
>32217	Identifier	SetAttribute
>32218	Identifier	level
>32219	Condition	 
>32220	Identifier	grad
>32221	ExpressionStatement	 
>32222	CallExpression	level -> SetAttribute ( \"waterLevel\" , dsq -> game -> saveWaterLevel )
>32223	ArgumentList	\"waterLevel\"
>32224	Argument	dsq -> game -> saveWaterLevel
>32225	PtrMemberAccess	dsq -> game -> saveWaterLevel
>32226	Identifier	saveWaterLevel
>32227	PtrMemberAccess	dsq -> game
>32228	Identifier	game
>32229	Identifier	dsq
>32230	Argument	\"waterLevel\"
>32231	PrimaryExpression	\"waterLevel\"
>32232	Callee	level -> SetAttribute
>32233	PtrMemberAccess	level -> SetAttribute
>32234	Identifier	SetAttribute
>32235	Identifier	level
>32236	Condition	 
>32237	Identifier	level
>32238	IfStatement	if ( ! level )
>32239	CompoundStatement	 
>32240	ExpressionStatement	 
>32241	CallExpression	saveFile . InsertFirstChild ( level )
>32242	ArgumentList	level
>32243	Argument	level
>32244	Identifier	level
>32245	Callee	saveFile . InsertFirstChild
>32246	MemberAccess	saveFile . InsertFirstChild
>32247	Identifier	InsertFirstChild
>32248	Identifier	saveFile
>32249	ExpressionStatement	 
>32250	AssignmentExpr	level = saveFile . NewElement ( \"Level\" )
>32251	CallExpression	saveFile . NewElement ( \"Level\" )
>32252	ArgumentList	\"Level\"
>32253	Argument	\"Level\"
>32254	PrimaryExpression	\"Level\"
>32255	Callee	saveFile . NewElement
>32256	MemberAccess	saveFile . NewElement
>32257	Identifier	NewElement
>32258	Identifier	saveFile
>32259	Identifier	level
>32260	Condition	 
>32261	UnaryOp	! level
>32262	Identifier	level
>32263	UnaryOperator	!
>32264	IdentifierDeclStatement	 
>32265	IdentifierDecl	* level = saveFile . FirstChildElement ( \"Level\" )
>32266	AssignmentExpr	* level = saveFile . FirstChildElement ( \"Level\" )
>32267	CallExpression	saveFile . FirstChildElement ( \"Level\" )
>32268	ArgumentList	\"Level\"
>32269	Argument	\"Level\"
>32270	PrimaryExpression	\"Level\"
>32271	Callee	saveFile . FirstChildElement
>32272	MemberAccess	saveFile . FirstChildElement
>32273	Identifier	FirstChildElement
>32274	Identifier	saveFile
>32275	Identifier	level
>32276	Identifier	level
>32277	IdentifierDeclType	XMLElement *
>32278	CompoundStatement	 
>32279	IfStatement	if ( xmlerr != XML_SUCCESS )
>32280	CompoundStatement	 
>32281	ExpressionStatement	 
>32282	CallExpression	errorLog ( os . str ( ) )
>32283	ArgumentList	os . str ( )
>32284	Argument	os . str ( )
>32285	CallExpression	os . str ( )
>32286	ArgumentList	 
>32287	Callee	os . str
>32288	MemberAccess	os . str
>32289	Identifier	str
>32290	Identifier	os
>32291	Callee	errorLog
>32292	Identifier	errorLog
>32293	ExpressionStatement	 
>32294	ShiftExpression	os << \"Game
>32295	ShiftExpression	\"Game
>32296	Identifier	xmlerr
>32297	PrimaryExpression	\"Game
>32298	Identifier	os
>32299	IdentifierDeclStatement	 
>32300	IdentifierDecl	os
>32301	Identifier	os
>32302	IdentifierDeclType	std 
>32303	Condition	 
>32304	EqualityExpression	xmlerr != XML_SUCCESS
>32305	Identifier	XML_SUCCESS
>32306	Identifier	xmlerr
>32307	IdentifierDeclStatement	 
>32308	IdentifierDecl	xmlerr = saveFile . Parse ( printer . CStr ( ) , printer . CStrSize ( ) )
>32309	AssignmentExpr	xmlerr = saveFile . Parse ( printer . CStr ( ) , printer . CStrSize ( ) )
>32310	CallExpression	saveFile . Parse ( printer . CStr ( ) , printer . CStrSize ( ) )
>32311	ArgumentList	printer . CStr ( )
>32312	Argument	printer . CStrSize ( )
>32313	CallExpression	printer . CStrSize ( )
>32314	ArgumentList	 
>32315	Callee	printer . CStrSize
>32316	MemberAccess	printer . CStrSize
>32317	Identifier	CStrSize
>32318	Identifier	printer
>32319	Argument	printer . CStr ( )
>32320	CallExpression	printer . CStr ( )
>32321	ArgumentList	 
>32322	Callee	printer . CStr
>32323	MemberAccess	printer . CStr
>32324	Identifier	CStr
>32325	Identifier	printer
>32326	Callee	saveFile . Parse
>32327	MemberAccess	saveFile . Parse
>32328	Identifier	Parse
>32329	Identifier	saveFile
>32330	Identifier	xmlerr
>32331	Identifier	xmlerr
>32332	IdentifierDeclType	XMLError
>32333	ExpressionStatement	 
>32334	CallExpression	this -> saveFile -> Print ( & printer )
>32335	ArgumentList	& printer
>32336	Argument	& printer
>32337	UnaryOp	& printer
>32338	Identifier	printer
>32339	UnaryOperator	&
>32340	Callee	this -> saveFile -> Print
>32341	PtrMemberAccess	this -> saveFile -> Print
>32342	Identifier	Print
>32343	PtrMemberAccess	this -> saveFile
>32344	Identifier	saveFile
>32345	Identifier	this
>32346	IdentifierDeclStatement	 
>32347	IdentifierDecl	printer
>32348	Identifier	printer
>32349	IdentifierDeclType	XMLPrinter
>32350	IdentifierDeclStatement	 
>32351	IdentifierDecl	saveFile
>32352	Identifier	saveFile
>32353	IdentifierDeclType	XMLDocument
>32354	IdentifierDeclStatement	 
>32355	IdentifierDecl	fn = getSceneFilename ( scene )
>32356	AssignmentExpr	fn = getSceneFilename ( scene )
>32357	CallExpression	getSceneFilename ( scene )
>32358	ArgumentList	scene
>32359	Argument	scene
>32360	Identifier	scene
>32361	Callee	getSceneFilename
>32362	Identifier	getSceneFilename
>32363	Identifier	fn
>32364	Identifier	fn
>32365	IdentifierDeclType	std 
>32366	IfStatement	if ( ! this -> saveFile )
>32367	ReturnStatement	 
>32368	Identifier	false
>32369	Condition	 
>32370	UnaryOp	! this -> saveFile
>32371	PtrMemberAccess	this -> saveFile
>32372	Identifier	saveFile
>32373	Identifier	this
>32374	UnaryOperator	!
>32504	FunctionDef	Game 
>32505	ParameterList	WarpArea * area
>32506	Parameter	 
>32507	Identifier	area
>32508	ParameterType	WarpArea *
>32509	ReturnType	void
>32510	CompoundStatement	 
>32511	ExpressionStatement	 
>32512	CallExpression	dsq -> game -> transitionToScene ( area -> sceneName )
>32513	ArgumentList	area -> sceneName
>32514	Argument	area -> sceneName
>32515	PtrMemberAccess	area -> sceneName
>32516	Identifier	sceneName
>32517	Identifier	area
>32518	Callee	dsq -> game -> transitionToScene
>32519	PtrMemberAccess	dsq -> game -> transitionToScene
>32520	Identifier	transitionToScene
>32521	PtrMemberAccess	dsq -> game
>32522	Identifier	game
>32523	Identifier	dsq
>32524	ExpressionStatement	 
>32525	AssignmentExpr	dsq -> game -> spawnOffset = area -> spawnOffset
>32526	PtrMemberAccess	area -> spawnOffset
>32527	Identifier	spawnOffset
>32528	Identifier	area
>32529	PtrMemberAccess	dsq -> game -> spawnOffset
>32530	Identifier	spawnOffset
>32531	PtrMemberAccess	dsq -> game
>32532	Identifier	game
>32533	Identifier	dsq
>32534	ExpressionStatement	 
>32535	AssignmentExpr	dsq -> game -> warpAreaType = area -> warpAreaType
>32536	PtrMemberAccess	area -> warpAreaType
>32537	Identifier	warpAreaType
>32538	Identifier	area
>32539	PtrMemberAccess	dsq -> game -> warpAreaType
>32540	Identifier	warpAreaType
>32541	PtrMemberAccess	dsq -> game
>32542	Identifier	game
>32543	Identifier	dsq
>32544	IfStatement	if ( this -> miniMapHint . scene == area -> sceneName && this -> miniMapHint . warpAreaType == area -> warpAreaType )
>32545	CompoundStatement	 
>32546	ExpressionStatement	 
>32547	CallExpression	miniMapHint . clear ( )
>32548	ArgumentList	 
>32549	Callee	miniMapHint . clear
>32550	MemberAccess	miniMapHint . clear
>32551	Identifier	clear
>32552	Identifier	miniMapHint
>32553	Condition	 
>32554	AndExpression	this -> miniMapHint . scene == area -> sceneName && this -> miniMapHint . warpAreaType == area -> warpAreaType
>32555	EqualityExpression	this -> miniMapHint . warpAreaType == area -> warpAreaType
>32556	PtrMemberAccess	area -> warpAreaType
>32557	Identifier	warpAreaType
>32558	Identifier	area
>32559	MemberAccess	this -> miniMapHint . warpAreaType
>32560	Identifier	warpAreaType
>32561	PtrMemberAccess	this -> miniMapHint
>32562	Identifier	miniMapHint
>32563	Identifier	this
>32564	EqualityExpression	this -> miniMapHint . scene == area -> sceneName
>32565	PtrMemberAccess	area -> sceneName
>32566	Identifier	sceneName
>32567	Identifier	area
>32568	MemberAccess	this -> miniMapHint . scene
>32569	Identifier	scene
>32570	PtrMemberAccess	this -> miniMapHint
>32571	Identifier	miniMapHint
>32572	Identifier	this
>32594	FunctionDef	Game 
>32595	ParameterList	 
>32596	ReturnType	void
>32597	CompoundStatement	 
>32598	IfStatement	if ( ! grad )
>32599	CompoundStatement	 
>32600	IfStatement	if ( bg2 )
>32601	ExpressionStatement	 
>32602	AssignmentExpr	bg2 -> blendEnabled = true
>32603	Identifier	true
>32604	PtrMemberAccess	bg2 -> blendEnabled
>32605	Identifier	blendEnabled
>32606	Identifier	bg2
>32607	Condition	 
>32608	Identifier	bg2
>32609	IfStatement	if ( bg )
>32610	ExpressionStatement	 
>32611	AssignmentExpr	bg -> blendEnabled = true
>32612	Identifier	true
>32613	PtrMemberAccess	bg -> blendEnabled
>32614	Identifier	blendEnabled
>32615	Identifier	bg
>32616	Condition	 
>32617	Identifier	bg
>32618	ExpressionStatement	 
>32619	CallExpression	addRenderObject ( grad , LR_BACKDROP )
>32620	ArgumentList	grad
>32621	Argument	LR_BACKDROP
>32622	Identifier	LR_BACKDROP
>32623	Argument	grad
>32624	Identifier	grad
>32625	Callee	addRenderObject
>32626	Identifier	addRenderObject
>32627	CompoundStatement	 
>32628	ExpressionStatement	 
>32629	CallExpression	grad -> toggleCull ( false )
>32630	ArgumentList	false
>32631	Argument	false
>32632	Identifier	false
>32633	Callee	grad -> toggleCull
>32634	PtrMemberAccess	grad -> toggleCull
>32635	Identifier	toggleCull
>32636	Identifier	grad
>32637	ExpressionStatement	 
>32638	AssignmentExpr	grad -> alpha = 1
>32639	PrimaryExpression	1
>32640	PtrMemberAccess	grad -> alpha
>32641	Identifier	alpha
>32642	Identifier	grad
>32643	ExpressionStatement	 
>32644	AssignmentExpr	grad -> followCamera = 1
>32645	PrimaryExpression	1
>32646	PtrMemberAccess	grad -> followCamera
>32647	Identifier	followCamera
>32648	Identifier	grad
>32649	ExpressionStatement	 
>32650	AssignmentExpr	grad -> position = Vector ( 400 , 300 , - 4 )
>32651	CallExpression	Vector ( 400 , 300 , - 4 )
>32652	ArgumentList	400
>32653	Argument	- 4
>32654	UnaryOp	- 4
>32655	PrimaryExpression	4
>32656	UnaryOperator	-
>32657	Argument	300
>32658	PrimaryExpression	300
>32659	Argument	400
>32660	PrimaryExpression	400
>32661	Callee	Vector
>32662	Identifier	Vector
>32663	PtrMemberAccess	grad -> position
>32664	Identifier	position
>32665	Identifier	grad
>32666	ExpressionStatement	 
>32667	AssignmentExpr	grad -> autoHeight = AUTO_VIRTUALHEIGHT
>32668	Identifier	AUTO_VIRTUALHEIGHT
>32669	PtrMemberAccess	grad -> autoHeight
>32670	Identifier	autoHeight
>32671	Identifier	grad
>32672	ExpressionStatement	 
>32673	AssignmentExpr	grad -> autoWidth = AUTO_VIRTUALWIDTH
>32674	Identifier	AUTO_VIRTUALWIDTH
>32675	PtrMemberAccess	grad -> autoWidth
>32676	Identifier	autoWidth
>32677	Identifier	grad
>32678	ExpressionStatement	 
>32679	CallExpression	grad -> makeVertical ( gradTop , gradBtm )
>32680	ArgumentList	gradTop
>32681	Argument	gradBtm
>32682	Identifier	gradBtm
>32683	Argument	gradTop
>32684	Identifier	gradTop
>32685	Callee	grad -> makeVertical
>32686	PtrMemberAccess	grad -> makeVertical
>32687	Identifier	makeVertical
>32688	Identifier	grad
>32689	ExpressionStatement	 
>32690	Identifier	Gradient
>32691	Statement	 
>32692	Statement	 
>32693	Statement	 
>32694	Condition	 
>32695	UnaryOp	! grad
>32696	Identifier	grad
>32697	UnaryOperator	!
>32698	IfStatement	if ( grad )
>32699	CompoundStatement	 
>32700	ExpressionStatement	 
>32701	AssignmentExpr	grad = 0
>32702	PrimaryExpression	0
>32703	Identifier	grad
>32704	ExpressionStatement	 
>32705	CallExpression	grad -> safeKill ( )
>32706	ArgumentList	 
>32707	Callee	grad -> safeKill
>32708	PtrMemberAccess	grad -> safeKill
>32709	Identifier	safeKill
>32710	Identifier	grad
>32711	Condition	 
>32712	Identifier	grad
>32737	FunctionDef	Game 
>32738	ParameterList	 
>32739	ReturnType	bool
>32740	CompoundStatement	 
>32741	ReturnStatement	 
>32742	Identifier	inGameMenu
>32747	FunctionDef	Game 
>32748	ParameterList	Entity * e , Entity * me
>32749	Parameter	 
>32750	Identifier	me
>32751	ParameterType	Entity *
>32752	Parameter	 
>32753	Identifier	e
>32754	ParameterType	Entity *
>32755	ReturnType	bool
>32756	CompoundStatement	 
>32757	ReturnStatement	 
>32758	AndExpression	e != me && e -> isNormalLayer ( ) && e -> isPresent ( ) && e -> getEntityType ( ) == ET_ENEMY && e -> \
>32759	AndExpression	e -> isNormalLayer ( ) && e -> isPresent ( ) && e -> getEntityType ( ) == ET_ENEMY && e -> isAvatarAttackTarget ( )
>32760	AndExpression	e -> isPresent ( ) && e -> getEntityType ( ) == ET_ENEMY && e -> isAvatarAttackTarget ( )
>32761	AndExpression	e -> getEntityType ( ) == ET_ENEMY && e -> isAvatarAttackTarget ( )
>32762	CallExpression	e -> isAvatarAttackTarget ( )
>32763	ArgumentList	 
>32764	Callee	e -> isAvatarAttackTarget
>32765	PtrMemberAccess	e -> isAvatarAttackTarget
>32766	Identifier	isAvatarAttackTarget
>32767	Identifier	e
>32768	EqualityExpression	e -> getEntityType ( ) == ET_ENEMY
>32769	Identifier	ET_ENEMY
>32770	CallExpression	e -> getEntityType ( )
>32771	ArgumentList	 
>32772	Callee	e -> getEntityType
>32773	PtrMemberAccess	e -> getEntityType
>32774	Identifier	getEntityType
>32775	Identifier	e
>32776	CallExpression	e -> isPresent ( )
>32777	ArgumentList	 
>32778	Callee	e -> isPresent
>32779	PtrMemberAccess	e -> isPresent
>32780	Identifier	isPresent
>32781	Identifier	e
>32782	CallExpression	e -> isNormalLayer ( )
>32783	ArgumentList	 
>32784	Callee	e -> isNormalLayer
>32785	PtrMemberAccess	e -> isNormalLayer
>32786	Identifier	isNormalLayer
>32787	Identifier	e
>32788	EqualityExpression	e != me
>32789	Identifier	me
>32790	Identifier	e
>32802	FunctionDef	Game 
>32803	ParameterList	 
>32804	ReturnType	void
>32805	CompoundStatement	 
>32806	ForStatement	for ( int i = 0 ; i < warpAreas . size ( ) ; i ++ )
>32807	CompoundStatement	 
>32808	IfStatement	if ( this -> sceneName == miniMapHint . scene )
>32809	ElseStatement	else
>32810	CompoundStatement	 
>32811	IfStatement	if ( warpAreas [ i ] . sceneName == miniMapHint . scene )
>32812	CompoundStatement	 
>32813	ExpressionStatement	 
>32814	AssignmentExpr	miniMapHintPosition = warpAreas [ i ] . position
>32815	MemberAccess	warpAreas [ i ] . position
>32816	Identifier	position
>32817	ArrayIndexing	warpAreas [ i ]
>32818	Identifier	i
>32819	Identifier	warpAreas
>32820	Identifier	miniMapHintPosition
>32821	Condition	 
>32822	EqualityExpression	warpAreas [ i ] . sceneName == miniMapHint . scene
>32823	MemberAccess	miniMapHint . scene
>32824	Identifier	scene
>32825	Identifier	miniMapHint
>32826	MemberAccess	warpAreas [ i ] . sceneName
>32827	Identifier	sceneName
>32828	ArrayIndexing	warpAreas [ i ]
>32829	Identifier	i
>32830	Identifier	warpAreas
>32831	CompoundStatement	 
>32832	IfStatement	if ( warpAreas [ i ] . warpAreaType == miniMapHint . warpAreaType )
>32833	CompoundStatement	 
>32834	ExpressionStatement	 
>32835	AssignmentExpr	miniMapHintPosition = warpAreas [ i ] . position
>32836	MemberAccess	warpAreas [ i ] . position
>32837	Identifier	position
>32838	ArrayIndexing	warpAreas [ i ]
>32839	Identifier	i
>32840	Identifier	warpAreas
>32841	Identifier	miniMapHintPosition
>32842	Condition	 
>32843	EqualityExpression	warpAreas [ i ] . warpAreaType == miniMapHint . warpAreaType
>32844	MemberAccess	miniMapHint . warpAreaType
>32845	Identifier	warpAreaType
>32846	Identifier	miniMapHint
>32847	MemberAccess	warpAreas [ i ] . warpAreaType
>32848	Identifier	warpAreaType
>32849	ArrayIndexing	warpAreas [ i ]
>32850	Identifier	i
>32851	Identifier	warpAreas
>32852	Condition	 
>32853	EqualityExpression	this -> sceneName == miniMapHint . scene
>32854	MemberAccess	miniMapHint . scene
>32855	Identifier	scene
>32856	Identifier	miniMapHint
>32857	PtrMemberAccess	this -> sceneName
>32858	Identifier	sceneName
>32859	Identifier	this
>32860	IncDecOp	 
>32861	IncDec	++
>32862	Identifier	i
>32863	Condition	 
>32864	RelationalExpression	i < warpAreas . size ( )
>32865	CallExpression	warpAreas . size ( )
>32866	ArgumentList	 
>32867	Callee	warpAreas . size
>32868	MemberAccess	warpAreas . size
>32869	Identifier	size
>32870	Identifier	warpAreas
>32871	Identifier	i
>32872	ForInit	 
>32873	IdentifierDeclStatement	int i = 0 ;
>32874	IdentifierDecl	i = 0
>32875	AssignmentExpr	i = 0
>32876	PrimaryExpression	0
>32877	Identifier	i
>32878	Identifier	i
>32879	IdentifierDeclType	int
>32880	ExpressionStatement	 
>32881	AssignmentExpr	miniMapHintPosition = Vector ( 0 , 0 , 0 )
>32882	CallExpression	Vector ( 0 , 0 , 0 )
>32883	ArgumentList	0
>32884	Argument	0
>32885	PrimaryExpression	0
>32886	Argument	0
>32887	PrimaryExpression	0
>32888	Argument	0
>32889	PrimaryExpression	0
>32890	Callee	Vector
>32891	Identifier	Vector
>32892	Identifier	miniMapHintPosition
>32912	FunctionDef	Game 
>32913	ParameterList	 
>32914	ReturnType	void
>32915	CompoundStatement	 
>32916	ExpressionStatement	 
>32917	CallExpression	setActivePet ( dsq -> continuity . getFlag ( FLAG_PET_ACTIVE ) )
>32918	ArgumentList	dsq -> continuity . getFlag ( FLAG_PET_ACTIVE )
>32919	Argument	dsq -> continuity . getFlag ( FLAG_PET_ACTIVE )
>32920	CallExpression	dsq -> continuity . getFlag ( FLAG_PET_ACTIVE )
>32921	ArgumentList	FLAG_PET_ACTIVE
>32922	Argument	FLAG_PET_ACTIVE
>32923	Identifier	FLAG_PET_ACTIVE
>32924	Callee	dsq -> continuity . getFlag
>32925	MemberAccess	dsq -> continuity . getFlag
>32926	Identifier	getFlag
>32927	PtrMemberAccess	dsq -> continuity
>32928	Identifier	continuity
>32929	Identifier	dsq
>32930	Callee	setActivePet
>32931	Identifier	setActivePet
>32940	FunctionDef	Game 
>32941	ParameterList	int flag
>32942	Parameter	 
>32943	Identifier	flag
>32944	ParameterType	int
>32945	ReturnType	Entity *
>32946	CompoundStatement	 
>32947	ReturnStatement	 
>32948	Identifier	currentPet
>32949	IfStatement	if ( flag != 0 )
>32950	CompoundStatement	 
>32951	IfStatement	if ( p )
>32952	CompoundStatement	 
>32953	IfStatement	if ( e )
>32954	CompoundStatement	 
>32955	ExpressionStatement	 
>32956	CallExpression	e -> postInit ( )
>32957	ArgumentList	 
>32958	Callee	e -> postInit
>32959	PtrMemberAccess	e -> postInit
>32960	Identifier	postInit
>32961	Identifier	e
>32962	ExpressionStatement	 
>32963	CallExpression	e -> setState ( Entity 
>32964	ArgumentList	Entity 
>32965	Argument	true
>32966	Identifier	true
>32967	Argument	- 1
>32968	UnaryOp	- 1
>32969	PrimaryExpression	1
>32970	UnaryOperator	-
>32971	Argument	Entity 
>32972	Identifier	Entity 
>32973	Callee	e -> setState
>32974	PtrMemberAccess	e -> setState
>32975	Identifier	setState
>32976	Identifier	e
>32977	ExpressionStatement	 
>32978	AssignmentExpr	currentPet = e
>32979	Identifier	e
>32980	Identifier	currentPet
>32981	Condition	 
>32982	Identifier	e
>32983	IdentifierDeclStatement	 
>32984	IdentifierDecl	* e = createEntity ( \"Pet_\" + name , - 1 , avatar -> position , 0 , false , \"\" )
>32985	AssignmentExpr	* e = createEntity ( \"Pet_\" + name , - 1 , avatar -> position , 0 , false , \"\" )
>32986	CallExpression	createEntity ( \"Pet_\" + name , - 1 , avatar -> position , 0 , false , \"\" )
>32987	ArgumentList	\"Pet_\" + name
>32988	Argument	\"\"
>32989	PrimaryExpression	\"\"
>32990	Argument	false
>32991	Identifier	false
>32992	Argument	0
>32993	PrimaryExpression	0
>32994	Argument	avatar -> position
>32995	PtrMemberAccess	avatar -> position
>32996	Identifier	position
>32997	Identifier	avatar
>32998	Argument	- 1
>32999	UnaryOp	- 1
>33000	PrimaryExpression	1
>33001	UnaryOperator	-
>33002	Argument	\"Pet_\" + name
>33003	AdditiveExpression	\"Pet_\" + name
>33004	Identifier	name
>33005	PrimaryExpression	\"Pet_\"
>33006	Callee	createEntity
>33007	Identifier	createEntity
>33008	Identifier	e
>33009	Identifier	e
>33010	IdentifierDeclType	Entity *
>33011	IdentifierDeclStatement	 
>33012	IdentifierDecl	name = p -> namePart
>33013	AssignmentExpr	name = p -> namePart
>33014	PtrMemberAccess	p -> namePart
>33015	Identifier	namePart
>33016	Identifier	p
>33017	Identifier	name
>33018	Identifier	name
>33019	IdentifierDeclType	std 
>33020	Condition	 
>33021	Identifier	p
>33022	IdentifierDeclStatement	 
>33023	IdentifierDecl	* p = dsq -> continuity . getPetData ( petv )
>33024	AssignmentExpr	* p = dsq -> continuity . getPetData ( petv )
>33025	CallExpression	dsq -> continuity . getPetData ( petv )
>33026	ArgumentList	petv
>33027	Argument	petv
>33028	Identifier	petv
>33029	Callee	dsq -> continuity . getPetData
>33030	MemberAccess	dsq -> continuity . getPetData
>33031	Identifier	getPetData
>33032	PtrMemberAccess	dsq -> continuity
>33033	Identifier	continuity
>33034	Identifier	dsq
>33035	Identifier	p
>33036	Identifier	p
>33037	IdentifierDeclType	PetData *
>33038	IdentifierDeclStatement	 
>33039	IdentifierDecl	petv = flag - FLAG_PET_NAMESTART
>33040	AssignmentExpr	petv = flag - FLAG_PET_NAMESTART
>33041	AdditiveExpression	flag - FLAG_PET_NAMESTART
>33042	Identifier	FLAG_PET_NAMESTART
>33043	Identifier	flag
>33044	Identifier	petv
>33045	Identifier	petv
>33046	IdentifierDeclType	int
>33047	Condition	 
>33048	EqualityExpression	flag != 0
>33049	PrimaryExpression	0
>33050	Identifier	flag
>33051	ExpressionStatement	 
>33052	CallExpression	dsq -> continuity . setFlag ( FLAG_PET_ACTIVE , flag )
>33053	ArgumentList	FLAG_PET_ACTIVE
>33054	Argument	flag
>33055	Identifier	flag
>33056	Argument	FLAG_PET_ACTIVE
>33057	Identifier	FLAG_PET_ACTIVE
>33058	Callee	dsq -> continuity . setFlag
>33059	MemberAccess	dsq -> continuity . setFlag
>33060	Identifier	setFlag
>33061	PtrMemberAccess	dsq -> continuity
>33062	Identifier	continuity
>33063	Identifier	dsq
>33064	IfStatement	if ( currentPet )
>33065	CompoundStatement	 
>33066	ExpressionStatement	 
>33067	AssignmentExpr	currentPet = 0
>33068	PrimaryExpression	0
>33069	Identifier	currentPet
>33070	ExpressionStatement	 
>33071	CallExpression	currentPet -> safeKill ( )
>33072	ArgumentList	 
>33073	Callee	currentPet -> safeKill
>33074	PtrMemberAccess	currentPet -> safeKill
>33075	Identifier	safeKill
>33076	Identifier	currentPet
>33077	Condition	 
>33078	Identifier	currentPet
>33103	FunctionDef	Game 
>33104	ParameterList	 
>33105	ReturnType	void
>33106	CompoundStatement	 
>33107	IfStatement	if ( liFlag == 100 )
>33108	CompoundStatement	 
>33109	ExpressionStatement	 
>33110	AssignmentExpr	li = createEntity ( \"Li\" , 0 , Vector ( 0 , 0 ) , 0 , false , \"\" )
>33111	CallExpression	createEntity ( \"Li\" , 0 , Vector ( 0 , 0 ) , 0 , false , \"\" )
>33112	ArgumentList	\"Li\"
>33113	Argument	\"\"
>33114	PrimaryExpression	\"\"
>33115	Argument	false
>33116	Identifier	false
>33117	Argument	0
>33118	PrimaryExpression	0
>33119	Argument	Vector ( 0 , 0 )
>33120	CallExpression	Vector ( 0 , 0 )
>33121	ArgumentList	0
>33122	Argument	0
>33123	PrimaryExpression	0
>33124	Argument	0
>33125	PrimaryExpression	0
>33126	Callee	Vector
>33127	Identifier	Vector
>33128	Argument	0
>33129	PrimaryExpression	0
>33130	Argument	\"Li\"
>33131	PrimaryExpression	\"Li\"
>33132	Callee	createEntity
>33133	Identifier	createEntity
>33134	Identifier	li
>33135	ExpressionStatement	 
>33136	CallExpression	debugLog ( \"Creating Li\" )
>33137	ArgumentList	\"Creating Li\"
>33138	Argument	\"Creating Li\"
>33139	PrimaryExpression	\"Creating Li\"
>33140	Callee	debugLog
>33141	Identifier	debugLog
>33142	Condition	 
>33143	EqualityExpression	liFlag == 100
>33144	PrimaryExpression	100
>33145	Identifier	liFlag
>33146	ExpressionStatement	 
>33147	CallExpression	debugLog ( os . str ( ) )
>33148	ArgumentList	os . str ( )
>33149	Argument	os . str ( )
>33150	CallExpression	os . str ( )
>33151	ArgumentList	 
>33152	Callee	os . str
>33153	MemberAccess	os . str
>33154	Identifier	str
>33155	Identifier	os
>33156	Callee	debugLog
>33157	Identifier	debugLog
>33158	ExpressionStatement	 
>33159	ShiftExpression	os << \"liFlag
>33160	ShiftExpression	\"liFlag
>33161	Identifier	liFlag
>33162	PrimaryExpression	\"liFlag
>33163	Identifier	os
>33164	IdentifierDeclStatement	 
>33165	IdentifierDecl	os
>33166	Identifier	os
>33167	IdentifierDeclType	std 
>33168	IdentifierDeclStatement	 
>33169	IdentifierDecl	liFlag = dsq -> continuity . getFlag ( FLAG_LI )
>33170	AssignmentExpr	liFlag = dsq -> continuity . getFlag ( FLAG_LI )
>33171	CallExpression	dsq -> continuity . getFlag ( FLAG_LI )
>33172	ArgumentList	FLAG_LI
>33173	Argument	FLAG_LI
>33174	Identifier	FLAG_LI
>33175	Callee	dsq -> continuity . getFlag
>33176	MemberAccess	dsq -> continuity . getFlag
>33177	Identifier	getFlag
>33178	PtrMemberAccess	dsq -> continuity
>33179	Identifier	continuity
>33180	Identifier	dsq
>33181	Identifier	liFlag
>33182	Identifier	liFlag
>33183	IdentifierDeclType	int
>33199	FunctionDef	Game 
>33200	ParameterList	 
>33201	ReturnType	void
>33202	CompoundStatement	 
>33206	FunctionDef	Game 
>33207	ParameterList	const std 
>33208	Parameter	 
>33209	Identifier	gfx
>33210	ParameterType	const std 
>33211	ReturnType	void
>33212	CompoundStatement	 
>33213	IfStatement	if ( ! image )
>33214	CompoundStatement	 
>33215	ExpressionStatement	 
>33216	CallExpression	dsq -> fade ( 0 , 0.5 )
>33217	ArgumentList	0
>33218	Argument	0.5
>33219	PrimaryExpression	0.5
>33220	Argument	0
>33221	PrimaryExpression	0
>33222	Callee	dsq -> fade
>33223	PtrMemberAccess	dsq -> fade
>33224	Identifier	fade
>33225	Identifier	dsq
>33226	ExpressionStatement	 
>33227	AssignmentExpr	image -> alpha = 1
>33228	PrimaryExpression	1
>33229	PtrMemberAccess	image -> alpha
>33230	Identifier	alpha
>33231	Identifier	image
>33232	ExpressionStatement	 
>33233	CallExpression	image -> scale . interpolateTo ( Vector ( 1.1 , 1.1 ) , 12 )
>33234	ArgumentList	Vector ( 1.1 , 1.1 )
>33235	Argument	12
>33236	PrimaryExpression	12
>33237	Argument	Vector ( 1.1 , 1.1 )
>33238	CallExpression	Vector ( 1.1 , 1.1 )
>33239	ArgumentList	1.1
>33240	Argument	1.1
>33241	PrimaryExpression	1.1
>33242	Argument	1.1
>33243	PrimaryExpression	1.1
>33244	Callee	Vector
>33245	Identifier	Vector
>33246	Callee	image -> scale . interpolateTo
>33247	MemberAccess	image -> scale . interpolateTo
>33248	Identifier	interpolateTo
>33249	PtrMemberAccess	image -> scale
>33250	Identifier	scale
>33251	Identifier	image
>33252	ExpressionStatement	 
>33253	AssignmentExpr	image -> scale = Vector ( 1 , 1 )
>33254	CallExpression	Vector ( 1 , 1 )
>33255	ArgumentList	1
>33256	Argument	1
>33257	PrimaryExpression	1
>33258	Argument	1
>33259	PrimaryExpression	1
>33260	Callee	Vector
>33261	Identifier	Vector
>33262	PtrMemberAccess	image -> scale
>33263	Identifier	scale
>33264	Identifier	image
>33265	ExpressionStatement	 
>33266	CallExpression	core -> addRenderObject ( image , LR_HUD )
>33267	ArgumentList	image
>33268	Argument	LR_HUD
>33269	Identifier	LR_HUD
>33270	Argument	image
>33271	Identifier	image
>33272	Callee	core -> addRenderObject
>33273	PtrMemberAccess	core -> addRenderObject
>33274	Identifier	addRenderObject
>33275	Identifier	core
>33276	ExpressionStatement	 
>33277	AssignmentExpr	image -> followCamera = 1
>33278	PrimaryExpression	1
>33279	PtrMemberAccess	image -> followCamera
>33280	Identifier	followCamera
>33281	Identifier	image
>33282	ExpressionStatement	 
>33283	AssignmentExpr	image -> alpha = 0
>33284	PrimaryExpression	0
>33285	PtrMemberAccess	image -> alpha
>33286	Identifier	alpha
>33287	Identifier	image
>33288	ExpressionStatement	 
>33289	AssignmentExpr	image -> offset = Vector ( 0 , 100 )
>33290	CallExpression	Vector ( 0 , 100 )
>33291	ArgumentList	0
>33292	Argument	100
>33293	PrimaryExpression	100
>33294	Argument	0
>33295	PrimaryExpression	0
>33296	Callee	Vector
>33297	Identifier	Vector
>33298	PtrMemberAccess	image -> offset
>33299	Identifier	offset
>33300	Identifier	image
>33301	ExpressionStatement	 
>33302	CallExpression	image -> setWidthHeight ( 800 , 800 )
>33303	ArgumentList	800
>33304	Argument	800
>33305	PrimaryExpression	800
>33306	Argument	800
>33307	PrimaryExpression	800
>33308	Callee	image -> setWidthHeight
>33309	PtrMemberAccess	image -> setWidthHeight
>33310	Identifier	setWidthHeight
>33311	Identifier	image
>33312	ExpressionStatement	 
>33313	AssignmentExpr	image -> position = Vector ( 400 , 300 )
>33314	CallExpression	Vector ( 400 , 300 )
>33315	ArgumentList	400
>33316	Argument	300
>33317	PrimaryExpression	300
>33318	Argument	400
>33319	PrimaryExpression	400
>33320	Callee	Vector
>33321	Identifier	Vector
>33322	PtrMemberAccess	image -> position
>33323	Identifier	position
>33324	Identifier	image
>33325	ExpressionStatement	 
>33326	CallExpression	image -> setTexture ( gfx )
>33327	ArgumentList	gfx
>33328	Argument	gfx
>33329	Identifier	gfx
>33330	Callee	image -> setTexture
>33331	PtrMemberAccess	image -> setTexture
>33332	Identifier	setTexture
>33333	Identifier	image
>33334	ExpressionStatement	 
>33335	Identifier	Quad
>33336	Statement	 
>33337	Statement	 
>33338	Statement	 
>33339	ExpressionStatement	 
>33340	CallExpression	dsq -> watch ( 0.5 )
>33341	ArgumentList	0.5
>33342	Argument	0.5
>33343	PrimaryExpression	0.5
>33344	Callee	dsq -> watch
>33345	PtrMemberAccess	dsq -> watch
>33346	Identifier	watch
>33347	Identifier	dsq
>33348	ExpressionStatement	 
>33349	CallExpression	dsq -> fade ( 1 , 0.5 )
>33350	ArgumentList	1
>33351	Argument	0.5
>33352	PrimaryExpression	0.5
>33353	Argument	1
>33354	PrimaryExpression	1
>33355	Callee	dsq -> fade
>33356	PtrMemberAccess	dsq -> fade
>33357	Identifier	fade
>33358	Identifier	dsq
>33359	ExpressionStatement	 
>33360	AssignmentExpr	dsq -> overlay -> color = Vector ( 1 , 1 , 1 )
>33361	CallExpression	Vector ( 1 , 1 , 1 )
>33362	ArgumentList	1
>33363	Argument	1
>33364	PrimaryExpression	1
>33365	Argument	1
>33366	PrimaryExpression	1
>33367	Argument	1
>33368	PrimaryExpression	1
>33369	Callee	Vector
>33370	Identifier	Vector
>33371	PtrMemberAccess	dsq -> overlay -> color
>33372	Identifier	color
>33373	PtrMemberAccess	dsq -> overlay
>33374	Identifier	overlay
>33375	Identifier	dsq
>33376	Condition	 
>33377	UnaryOp	! image
>33378	Identifier	image
>33379	UnaryOperator	!
>33400	FunctionDef	Game 
>33401	ParameterList	 
>33402	ReturnType	void
>33403	CompoundStatement	 
>33404	ExpressionStatement	 
>33405	AssignmentExpr	dsq -> overlay -> color = 0
>33406	PrimaryExpression	0
>33407	PtrMemberAccess	dsq -> overlay -> color
>33408	Identifier	color
>33409	PtrMemberAccess	dsq -> overlay
>33410	Identifier	overlay
>33411	Identifier	dsq
>33412	ExpressionStatement	 
>33413	AssignmentExpr	image = 0
>33414	PrimaryExpression	0
>33415	Identifier	image
>33416	IfStatement	if ( image )
>33417	CompoundStatement	 
>33418	ExpressionStatement	 
>33419	AssignmentExpr	image -> fadeAlphaWithLife = 1
>33420	PrimaryExpression	1
>33421	PtrMemberAccess	image -> fadeAlphaWithLife
>33422	Identifier	fadeAlphaWithLife
>33423	Identifier	image
>33424	ExpressionStatement	 
>33425	CallExpression	image -> setDecayRate ( 1.0f / 2.0f )
>33426	ArgumentList	1.0f / 2.0f
>33427	Argument	1.0f / 2.0f
>33428	MultiplicativeExpression	1.0f / 2.0f
>33429	PrimaryExpression	2.0f
>33430	PrimaryExpression	1.0f
>33431	Callee	image -> setDecayRate
>33432	PtrMemberAccess	image -> setDecayRate
>33433	Identifier	setDecayRate
>33434	Identifier	image
>33435	ExpressionStatement	 
>33436	CallExpression	image -> setLife ( 1 )
>33437	ArgumentList	1
>33438	Argument	1
>33439	PrimaryExpression	1
>33440	Callee	image -> setLife
>33441	PtrMemberAccess	image -> setLife
>33442	Identifier	setLife
>33443	Identifier	image
>33444	Condition	 
>33445	Identifier	image
>33458	FunctionDef	Game 
>33459	ParameterList	int v
>33460	Parameter	 
>33461	Identifier	v
>33462	ParameterType	int
>33463	ReturnType	void
>33464	CompoundStatement	 
>33465	IfStatement	if ( v != lastBgSfxLoop )
>33466	CompoundStatement	 
>33467	ExpressionStatement	 
>33468	AssignmentExpr	lastBgSfxLoop = v
>33469	Identifier	v
>33470	Identifier	lastBgSfxLoop
>33471	SwitchStatement	switch ( v )
>33472	CompoundStatement	 
>33473	BreakStatement	 
>33474	IfStatement	if ( ! airSfxLoop . empty ( ) )
>33475	CompoundStatement	 
>33476	ExpressionStatement	 
>33477	AssignmentExpr	dsq -> loops . bg = core -> sound -> playSfx ( sfx )
>33478	CallExpression	core -> sound -> playSfx ( sfx )
>33479	ArgumentList	sfx
>33480	Argument	sfx
>33481	Identifier	sfx
>33482	Callee	core -> sound -> playSfx
>33483	PtrMemberAccess	core -> sound -> playSfx
>33484	Identifier	playSfx
>33485	PtrMemberAccess	core -> sound
>33486	Identifier	sound
>33487	Identifier	core
>33488	MemberAccess	dsq -> loops . bg
>33489	Identifier	bg
>33490	PtrMemberAccess	dsq -> loops
>33491	Identifier	loops
>33492	Identifier	dsq
>33493	ExpressionStatement	 
>33494	AssignmentExpr	sfx . priority = 0.8
>33495	PrimaryExpression	0.8
>33496	MemberAccess	sfx . priority
>33497	Identifier	priority
>33498	Identifier	sfx
>33499	ExpressionStatement	 
>33500	AssignmentExpr	sfx . loops = - 1
>33501	UnaryOp	- 1
>33502	PrimaryExpression	1
>33503	UnaryOperator	-
>33504	MemberAccess	sfx . loops
>33505	Identifier	loops
>33506	Identifier	sfx
>33507	ExpressionStatement	 
>33508	AssignmentExpr	sfx . vol = bgSfxVol
>33509	Identifier	bgSfxVol
>33510	MemberAccess	sfx . vol
>33511	Identifier	vol
>33512	Identifier	sfx
>33513	ExpressionStatement	 
>33514	AssignmentExpr	sfx . name = airSfxLoop
>33515	Identifier	airSfxLoop
>33516	MemberAccess	sfx . name
>33517	Identifier	name
>33518	Identifier	sfx
>33519	IdentifierDeclStatement	 
>33520	IdentifierDecl	sfx
>33521	Identifier	sfx
>33522	IdentifierDeclType	PlaySfx
>33523	Condition	 
>33524	UnaryOp	! airSfxLoop . empty ( )
>33525	CallExpression	airSfxLoop . empty ( )
>33526	ArgumentList	 
>33527	Callee	airSfxLoop . empty
>33528	MemberAccess	airSfxLoop . empty
>33529	Identifier	empty
>33530	Identifier	airSfxLoop
>33531	UnaryOperator	!
>33532	Label	 
>33533	BreakStatement	 
>33534	IfStatement	if ( ! bgSfxLoop . empty ( ) )
>33535	CompoundStatement	 
>33536	ExpressionStatement	 
>33537	AssignmentExpr	dsq -> loops . bg = core -> sound -> playSfx ( sfx )
>33538	CallExpression	core -> sound -> playSfx ( sfx )
>33539	ArgumentList	sfx
>33540	Argument	sfx
>33541	Identifier	sfx
>33542	Callee	core -> sound -> playSfx
>33543	PtrMemberAccess	core -> sound -> playSfx
>33544	Identifier	playSfx
>33545	PtrMemberAccess	core -> sound
>33546	Identifier	sound
>33547	Identifier	core
>33548	MemberAccess	dsq -> loops . bg
>33549	Identifier	bg
>33550	PtrMemberAccess	dsq -> loops
>33551	Identifier	loops
>33552	Identifier	dsq
>33553	ExpressionStatement	 
>33554	AssignmentExpr	sfx . priority = 0.8
>33555	PrimaryExpression	0.8
>33556	MemberAccess	sfx . priority
>33557	Identifier	priority
>33558	Identifier	sfx
>33559	ExpressionStatement	 
>33560	AssignmentExpr	sfx . loops = - 1
>33561	UnaryOp	- 1
>33562	PrimaryExpression	1
>33563	UnaryOperator	-
>33564	MemberAccess	sfx . loops
>33565	Identifier	loops
>33566	Identifier	sfx
>33567	ExpressionStatement	 
>33568	AssignmentExpr	sfx . vol = bgSfxVol
>33569	Identifier	bgSfxVol
>33570	MemberAccess	sfx . vol
>33571	Identifier	vol
>33572	Identifier	sfx
>33573	ExpressionStatement	 
>33574	AssignmentExpr	sfx . name = bgSfxLoop
>33575	Identifier	bgSfxLoop
>33576	MemberAccess	sfx . name
>33577	Identifier	name
>33578	Identifier	sfx
>33579	IdentifierDeclStatement	 
>33580	IdentifierDecl	sfx
>33581	Identifier	sfx
>33582	IdentifierDeclType	PlaySfx
>33583	Condition	 
>33584	UnaryOp	! bgSfxLoop . empty ( )
>33585	CallExpression	bgSfxLoop . empty ( )
>33586	ArgumentList	 
>33587	Callee	bgSfxLoop . empty
>33588	MemberAccess	bgSfxLoop . empty
>33589	Identifier	empty
>33590	Identifier	bgSfxLoop
>33591	UnaryOperator	!
>33592	Label	 
>33593	Condition	 
>33594	Identifier	v
>33595	IfStatement	if ( dsq -> loops . bg != BBGE_AUDIO_NOCHANNEL )
>33596	CompoundStatement	 
>33597	ExpressionStatement	 
>33598	AssignmentExpr	dsq -> loops . bg = BBGE_AUDIO_NOCHANNEL
>33599	Identifier	BBGE_AUDIO_NOCHANNEL
>33600	MemberAccess	dsq -> loops . bg
>33601	Identifier	bg
>33602	PtrMemberAccess	dsq -> loops
>33603	Identifier	loops
>33604	Identifier	dsq
>33605	ExpressionStatement	 
>33606	CallExpression	core -> sound -> fadeSfx ( dsq -> loops . bg , SFT_OUT , 0.5 )
>33607	ArgumentList	dsq -> loops . bg
>33608	Argument	0.5
>33609	PrimaryExpression	0.5
>33610	Argument	SFT_OUT
>33611	Identifier	SFT_OUT
>33612	Argument	dsq -> loops . bg
>33613	MemberAccess	dsq -> loops . bg
>33614	Identifier	bg
>33615	PtrMemberAccess	dsq -> loops
>33616	Identifier	loops
>33617	Identifier	dsq
>33618	Callee	core -> sound -> fadeSfx
>33619	PtrMemberAccess	core -> sound -> fadeSfx
>33620	Identifier	fadeSfx
>33621	PtrMemberAccess	core -> sound
>33622	Identifier	sound
>33623	Identifier	core
>33624	Condition	 
>33625	EqualityExpression	dsq -> loops . bg != BBGE_AUDIO_NOCHANNEL
>33626	Identifier	BBGE_AUDIO_NOCHANNEL
>33627	MemberAccess	dsq -> loops . bg
>33628	Identifier	bg
>33629	PtrMemberAccess	dsq -> loops
>33630	Identifier	loops
>33631	Identifier	dsq
>33632	Condition	 
>33633	EqualityExpression	v != lastBgSfxLoop
>33634	Identifier	lastBgSfxLoop
>33635	Identifier	v
>33663	FunctionDef	Game 
>33664	ParameterList	Entity * eDead
>33665	Parameter	 
>33666	Identifier	eDead
>33667	ParameterType	Entity *
>33668	ReturnType	void
>33669	CompoundStatement	 
>33670	ExpressionStatement	 
>33671	CallExpression	dsq -> continuity . entityDied ( eDead )
>33672	ArgumentList	eDead
>33673	Argument	eDead
>33674	Identifier	eDead
>33675	Callee	dsq -> continuity . entityDied
>33676	MemberAccess	dsq -> continuity . entityDied
>33677	Identifier	entityDied
>33678	PtrMemberAccess	dsq -> continuity
>33679	Identifier	continuity
>33680	Identifier	dsq
>33681	CompoundStatement	 
>33682	IfStatement	if ( e != eDead && e -> isv ( EV_ENTITYDIED , 1 ) )
>33683	CompoundStatement	 
>33684	ExpressionStatement	 
>33685	CallExpression	e -> entityDied ( eDead )
>33686	ArgumentList	eDead
>33687	Argument	eDead
>33688	Identifier	eDead
>33689	Callee	e -> entityDied
>33690	PtrMemberAccess	e -> entityDied
>33691	Identifier	entityDied
>33692	Identifier	e
>33693	Condition	 
>33694	AndExpression	e != eDead && e -> isv ( EV_ENTITYDIED , 1 )
>33695	CallExpression	e -> isv ( EV_ENTITYDIED , 1 )
>33696	ArgumentList	EV_ENTITYDIED
>33697	Argument	1
>33698	PrimaryExpression	1
>33699	Argument	EV_ENTITYDIED
>33700	Identifier	EV_ENTITYDIED
>33701	Callee	e -> isv
>33702	PtrMemberAccess	e -> isv
>33703	Identifier	isv
>33704	Identifier	e
>33705	EqualityExpression	e != eDead
>33706	Identifier	eDead
>33707	Identifier	e
>33708	ExpressionStatement	 
>33709	AssignmentExpr	e = * i
>33710	UnaryOp	* i
>33711	Identifier	i
>33712	UnaryOperator	*
>33713	Identifier	e
>33714	Statement	 
>33715	Statement	 
>33716	Statement	 
>33717	Statement	 
>33718	IdentifierDeclStatement	 
>33719	IdentifierDecl	* e = 0
>33720	AssignmentExpr	* e = 0
>33721	PrimaryExpression	0
>33722	Identifier	e
>33723	Identifier	e
>33724	IdentifierDeclType	Entity *
>33738	FunctionDef	Game 
>33739	ParameterList	 
>33740	ReturnType	void
>33741	CompoundStatement	 
>33742	ExpressionStatement	 
>33743	CallExpression	core -> resetTimer ( )
>33744	ArgumentList	 
>33745	Callee	core -> resetTimer
>33746	PtrMemberAccess	core -> resetTimer
>33747	Identifier	resetTimer
>33748	Identifier	core
>33749	CompoundStatement	 
>33750	IfStatement	if ( e )
>33751	CompoundStatement	 
>33752	ExpressionStatement	 
>33753	CallExpression	e -> postInit ( )
>33754	ArgumentList	 
>33755	Callee	e -> postInit
>33756	PtrMemberAccess	e -> postInit
>33757	Identifier	postInit
>33758	Identifier	e
>33759	Condition	 
>33760	Identifier	e
>33761	IdentifierDeclStatement	 
>33762	IdentifierDecl	* e = * i
>33763	AssignmentExpr	* e = * i
>33764	UnaryOp	* i
>33765	Identifier	i
>33766	UnaryOperator	*
>33767	Identifier	e
>33768	Identifier	e
>33769	IdentifierDeclType	Entity *
>33770	Statement	 
>33771	Statement	 
>33772	Statement	 
>33773	Statement	 
>33781	FunctionDef	Game 
>33782	ParameterList	 
>33783	ReturnType	void
>33784	CompoundStatement	 
>33785	IfStatement	if ( this -> isPaused ( ) )
>33786	ElseStatement	else
>33787	IfStatement	if ( this -> isWorldPaused ( ) )
>33788	ElseStatement	else
>33789	CompoundStatement	 
>33790	ExpressionStatement	 
>33791	AssignmentExpr	core -> particlesPaused = 0
>33792	PrimaryExpression	0
>33793	PtrMemberAccess	core -> particlesPaused
>33794	Identifier	particlesPaused
>33795	Identifier	core
>33796	CompoundStatement	 
>33797	ExpressionStatement	 
>33798	AssignmentExpr	core -> particlesPaused = 1
>33799	PrimaryExpression	1
>33800	PtrMemberAccess	core -> particlesPaused
>33801	Identifier	particlesPaused
>33802	Identifier	core
>33803	Condition	 
>33804	CallExpression	this -> isWorldPaused ( )
>33805	ArgumentList	 
>33806	Callee	this -> isWorldPaused
>33807	PtrMemberAccess	this -> isWorldPaused
>33808	Identifier	isWorldPaused
>33809	Identifier	this
>33810	CompoundStatement	 
>33811	ExpressionStatement	 
>33812	AssignmentExpr	core -> particlesPaused = 2
>33813	PrimaryExpression	2
>33814	PtrMemberAccess	core -> particlesPaused
>33815	Identifier	particlesPaused
>33816	Identifier	core
>33817	Condition	 
>33818	CallExpression	this -> isPaused ( )
>33819	ArgumentList	 
>33820	Callee	this -> isPaused
>33821	PtrMemberAccess	this -> isPaused
>33822	Identifier	isPaused
>33823	Identifier	this
>33834	FunctionDef	game_collideParticle (Vector pos)
>33835	ParameterList	Vector pos
>33836	Parameter	 
>33837	Identifier	pos
>33838	ParameterType	Vector
>33839	ReturnType	int
>33840	CompoundStatement	 
>33841	ReturnStatement	 
>33842	CallExpression	dsq -> game -> isObstructed ( t )
>33843	ArgumentList	t
>33844	Argument	t
>33845	Identifier	t
>33846	Callee	dsq -> game -> isObstructed
>33847	PtrMemberAccess	dsq -> game -> isObstructed
>33848	Identifier	isObstructed
>33849	PtrMemberAccess	dsq -> game
>33850	Identifier	game
>33851	Identifier	dsq
>33852	IdentifierDeclStatement	 
>33853	IdentifierDecl	t ( pos )
>33854	Identifier	pos
>33855	Identifier	t
>33856	IdentifierDeclType	TileVector
>33857	IfStatement	if ( ! inWaterBubble && aboveWaterLine )
>33858	CompoundStatement	 
>33859	ReturnStatement	 
>33860	PrimaryExpression	1
>33861	Condition	 
>33862	AndExpression	! inWaterBubble && aboveWaterLine
>33863	Identifier	aboveWaterLine
>33864	UnaryOp	! inWaterBubble
>33865	Identifier	inWaterBubble
>33866	UnaryOperator	!
>33867	IfStatement	if ( ! aboveWaterLine )
>33868	CompoundStatement	 
>33869	IfStatement	if ( p && p -> active )
>33870	CompoundStatement	 
>33871	IfStatement	if ( p -> isCoordinateInside ( pos ) )
>33872	CompoundStatement	 
>33873	ExpressionStatement	 
>33874	AssignmentExpr	inWaterBubble = true
>33875	Identifier	true
>33876	Identifier	inWaterBubble
>33877	Condition	 
>33878	CallExpression	p -> isCoordinateInside ( pos )
>33879	ArgumentList	pos
>33880	Argument	pos
>33881	Identifier	pos
>33882	Callee	p -> isCoordinateInside
>33883	PtrMemberAccess	p -> isCoordinateInside
>33884	Identifier	isCoordinateInside
>33885	Identifier	p
>33886	Condition	 
>33887	AndExpression	p && p -> active
>33888	PtrMemberAccess	p -> active
>33889	Identifier	active
>33890	Identifier	p
>33891	Identifier	p
>33892	IdentifierDeclStatement	 
>33893	IdentifierDecl	* p = dsq -> game -> getNearestPath ( pos , PATH_WATERBUBBLE )
>33894	AssignmentExpr	* p = dsq -> game -> getNearestPath ( pos , PATH_WATERBUBBLE )
>33895	CallExpression	dsq -> game -> getNearestPath ( pos , PATH_WATERBUBBLE )
>33896	ArgumentList	pos
>33897	Argument	PATH_WATERBUBBLE
>33898	Identifier	PATH_WATERBUBBLE
>33899	Argument	pos
>33900	Identifier	pos
>33901	Callee	dsq -> game -> getNearestPath
>33902	PtrMemberAccess	dsq -> game -> getNearestPath
>33903	Identifier	getNearestPath
>33904	PtrMemberAccess	dsq -> game
>33905	Identifier	game
>33906	Identifier	dsq
>33907	Identifier	p
>33908	Identifier	p
>33909	IdentifierDeclType	Path *
>33910	Condition	 
>33911	UnaryOp	! aboveWaterLine
>33912	Identifier	aboveWaterLine
>33913	UnaryOperator	!
>33914	IdentifierDeclStatement	 
>33915	IdentifierDecl	inWaterBubble = false
>33916	AssignmentExpr	inWaterBubble = false
>33917	Identifier	false
>33918	Identifier	false
>33919	Identifier	inWaterBubble
>33920	IdentifierDeclType	bool
>33921	IdentifierDeclStatement	 
>33922	IdentifierDecl	aboveWaterLine = ( pos . y <= dsq -> game -> waterLevel . x + 20 )
>33923	AssignmentExpr	aboveWaterLine = ( pos . y <= dsq -> game -> waterLevel . x + 20 )
>33924	RelationalExpression	pos . y <= dsq -> game -> waterLevel . x + 20
>33925	AdditiveExpression	dsq -> game -> waterLevel . x + 20
>33926	PrimaryExpression	20
>33927	MemberAccess	dsq -> game -> waterLevel . x
>33928	Identifier	x
>33929	PtrMemberAccess	dsq -> game -> waterLevel
>33930	Identifier	waterLevel
>33931	PtrMemberAccess	dsq -> game
>33932	Identifier	game
>33933	Identifier	dsq
>33934	MemberAccess	pos . y
>33935	Identifier	y
>33936	Identifier	pos
>33937	Identifier	aboveWaterLine
>33938	Identifier	aboveWaterLine
>33939	IdentifierDeclType	bool
>33964	FunctionDef	game_wibbleParticle (Particle * p)
>33965	ParameterList	Particle * p
>33966	Parameter	 
>33967	Identifier	p
>33968	ParameterType	Particle *
>33969	ReturnType	void
>33970	CompoundStatement	 
>33975	FunctionDef	Game 
>33976	ParameterList	 
>33977	ReturnType	void
>33978	CompoundStatement	 
>33979	ForStatement	for ( int i = 0 ; i < dsq -> getNumElements ( ) ; i ++ )
>33980	CompoundStatement	 
>33981	IfStatement	if ( ee . type == EFX_WAVY )
>33982	ExpressionStatement	 
>33983	CallExpression	elementInteractionList . push_back ( e )
>33984	ArgumentList	e
>33985	Argument	e
>33986	Identifier	e
>33987	Callee	elementInteractionList . push_back
>33988	MemberAccess	elementInteractionList . push_back
>33989	Identifier	push_back
>33990	Identifier	elementInteractionList
>33991	Condition	 
>33992	EqualityExpression	ee . type == EFX_WAVY
>33993	Identifier	EFX_WAVY
>33994	MemberAccess	ee . type
>33995	Identifier	type
>33996	Identifier	ee
>33997	IdentifierDeclStatement	 
>33998	IdentifierDecl	ee = dsq -> getElementEffectByIndex ( eeidx )
>33999	AssignmentExpr	ee = dsq -> getElementEffectByIndex ( eeidx )
>34000	CallExpression	dsq -> getElementEffectByIndex ( eeidx )
>34001	ArgumentList	eeidx
>34002	Argument	eeidx
>34003	Identifier	eeidx
>34004	Callee	dsq -> getElementEffectByIndex
>34005	PtrMemberAccess	dsq -> getElementEffectByIndex
>34006	Identifier	getElementEffectByIndex
>34007	Identifier	dsq
>34008	Identifier	ee
>34009	Identifier	ee
>34010	IdentifierDeclType	ElementEffect
>34011	IfStatement	if ( eeidx != - 1 && e -> layer >= LR_ELEMENTS1 && e -> layer <= LR_ELEMENTS8 )
>34012	ExpressionStatement	 
>34013	CallExpression	elementUpdateList . push_back ( e )
>34014	ArgumentList	e
>34015	Argument	e
>34016	Identifier	e
>34017	Callee	elementUpdateList . push_back
>34018	MemberAccess	elementUpdateList . push_back
>34019	Identifier	push_back
>34020	Identifier	elementUpdateList
>34021	Condition	 
>34022	AndExpression	eeidx != - 1 && e -> layer >= LR_ELEMENTS1 && e -> layer <= LR_ELEMENTS8
>34023	AndExpression	e -> layer >= LR_ELEMENTS1 && e -> layer <= LR_ELEMENTS8
>34024	RelationalExpression	e -> layer <= LR_ELEMENTS8
>34025	Identifier	LR_ELEMENTS8
>34026	PtrMemberAccess	e -> layer
>34027	Identifier	layer
>34028	Identifier	e
>34029	RelationalExpression	e -> layer >= LR_ELEMENTS1
>34030	Identifier	LR_ELEMENTS1
>34031	PtrMemberAccess	e -> layer
>34032	Identifier	layer
>34033	Identifier	e
>34034	EqualityExpression	eeidx != - 1
>34035	UnaryOp	- 1
>34036	PrimaryExpression	1
>34037	UnaryOperator	-
>34038	Identifier	eeidx
>34039	IdentifierDeclStatement	 
>34040	IdentifierDecl	eeidx = e -> getElementEffectIndex ( )
>34041	AssignmentExpr	eeidx = e -> getElementEffectIndex ( )
>34042	CallExpression	e -> getElementEffectIndex ( )
>34043	ArgumentList	 
>34044	Callee	e -> getElementEffectIndex
>34045	PtrMemberAccess	e -> getElementEffectIndex
>34046	Identifier	getElementEffectIndex
>34047	Identifier	e
>34048	Identifier	eeidx
>34049	Identifier	eeidx
>34050	IdentifierDeclType	const int
>34051	IdentifierDeclStatement	 
>34052	IdentifierDecl	* e = dsq -> getElement ( i )
>34053	AssignmentExpr	* e = dsq -> getElement ( i )
>34054	CallExpression	dsq -> getElement ( i )
>34055	ArgumentList	i
>34056	Argument	i
>34057	Identifier	i
>34058	Callee	dsq -> getElement
>34059	PtrMemberAccess	dsq -> getElement
>34060	Identifier	getElement
>34061	Identifier	dsq
>34062	Identifier	e
>34063	Identifier	e
>34064	IdentifierDeclType	Element *
>34065	IncDecOp	 
>34066	IncDec	++
>34067	Identifier	i
>34068	Condition	 
>34069	RelationalExpression	i < dsq -> getNumElements ( )
>34070	CallExpression	dsq -> getNumElements ( )
>34071	ArgumentList	 
>34072	Callee	dsq -> getNumElements
>34073	PtrMemberAccess	dsq -> getNumElements
>34074	Identifier	getNumElements
>34075	Identifier	dsq
>34076	Identifier	i
>34077	ForInit	 
>34078	IdentifierDeclStatement	int i = 0 ;
>34079	IdentifierDecl	i = 0
>34080	AssignmentExpr	i = 0
>34081	PrimaryExpression	0
>34082	Identifier	i
>34083	Identifier	i
>34084	IdentifierDeclType	int
>34085	ExpressionStatement	 
>34086	CallExpression	elementInteractionList . clear ( )
>34087	ArgumentList	 
>34088	Callee	elementInteractionList . clear
>34089	MemberAccess	elementInteractionList . clear
>34090	Identifier	clear
>34091	Identifier	elementInteractionList
>34092	ExpressionStatement	 
>34093	CallExpression	elementUpdateList . clear ( )
>34094	ArgumentList	 
>34095	Callee	elementUpdateList . clear
>34096	MemberAccess	elementUpdateList . clear
>34097	Identifier	clear
>34098	Identifier	elementUpdateList
>34099	ForStatement	for ( int i = LR_ELEMENTS1 ; i <= LR_ELEMENTS8 ; i ++ )
>34100	ExpressionStatement	 
>34101	AssignmentExpr	dsq -> getRenderObjectLayer ( i ) -> update = false
>34102	Identifier	false
>34103	PtrMemberAccess	dsq -> getRenderObjectLayer ( i ) -> update
>34104	Identifier	update
>34105	CallExpression	dsq -> getRenderObjectLayer ( i )
>34106	ArgumentList	i
>34107	Argument	i
>34108	Identifier	i
>34109	Callee	dsq -> getRenderObjectLayer
>34110	PtrMemberAccess	dsq -> getRenderObjectLayer
>34111	Identifier	getRenderObjectLayer
>34112	Identifier	dsq
>34113	IncDecOp	 
>34114	IncDec	++
>34115	Identifier	i
>34116	Condition	 
>34117	RelationalExpression	i <= LR_ELEMENTS8
>34118	Identifier	LR_ELEMENTS8
>34119	Identifier	i
>34120	ForInit	 
>34121	IdentifierDeclStatement	int i = LR_ELEMENTS1 ;
>34122	IdentifierDecl	i = LR_ELEMENTS1
>34123	AssignmentExpr	i = LR_ELEMENTS1
>34124	Identifier	LR_ELEMENTS1
>34125	Identifier	LR_ELEMENTS1
>34126	Identifier	i
>34127	IdentifierDeclType	int
>34154	FunctionDef	Game 
>34155	ParameterList	 
>34156	ReturnType	void
>34157	CompoundStatement	 
>34158	ForStatement	for ( int i = LR_ELEMENTS1 ; i <= LR_ELEMENTS16 ; i ++ )
>34159	CompoundStatement	 
>34160	ExpressionStatement	 
>34161	CallExpression	dsq -> getRenderObjectLayer ( i ) -> setOptimizeStatic ( ! isSceneEditorActive ( ) && dsq -> user . video . displaylists )
>34162	ArgumentList	! isSceneEditorActive ( ) && dsq -> user . video . displaylists
>34163	Argument	! isSceneEditorActive ( ) && dsq -> user . video . displaylists
>34164	AndExpression	! isSceneEditorActive ( ) && dsq -> user . video . displaylists
>34165	MemberAccess	dsq -> user . video . displaylists
>34166	Identifier	displaylists
>34167	MemberAccess	dsq -> user . video
>34168	Identifier	video
>34169	PtrMemberAccess	dsq -> user
>34170	Identifier	user
>34171	Identifier	dsq
>34172	UnaryOp	! isSceneEditorActive ( )
>34173	CallExpression	isSceneEditorActive ( )
>34174	ArgumentList	 
>34175	Callee	isSceneEditorActive
>34176	Identifier	isSceneEditorActive
>34177	UnaryOperator	!
>34178	Callee	dsq -> getRenderObjectLayer ( i ) -> setOptimizeStatic
>34179	PtrMemberAccess	dsq -> getRenderObjectLayer ( i ) -> setOptimizeStatic
>34180	Identifier	setOptimizeStatic
>34181	CallExpression	dsq -> getRenderObjectLayer ( i )
>34182	ArgumentList	i
>34183	Argument	i
>34184	Identifier	i
>34185	Callee	dsq -> getRenderObjectLayer
>34186	PtrMemberAccess	dsq -> getRenderObjectLayer
>34187	Identifier	getRenderObjectLayer
>34188	Identifier	dsq
>34189	IfStatement	if ( i == LR_ELEMENTS11 )
>34190	ContinueStatement	 
>34191	Condition	 
>34192	EqualityExpression	i == LR_ELEMENTS11
>34193	Identifier	LR_ELEMENTS11
>34194	Identifier	i
>34195	IncDecOp	 
>34196	IncDec	++
>34197	Identifier	i
>34198	Condition	 
>34199	RelationalExpression	i <= LR_ELEMENTS16
>34200	Identifier	LR_ELEMENTS16
>34201	Identifier	i
>34202	ForInit	 
>34203	IdentifierDeclStatement	int i = LR_ELEMENTS1 ;
>34204	IdentifierDecl	i = LR_ELEMENTS1
>34205	AssignmentExpr	i = LR_ELEMENTS1
>34206	Identifier	LR_ELEMENTS1
>34207	Identifier	LR_ELEMENTS1
>34208	Identifier	i
>34209	IdentifierDeclType	int
>34224	FunctionDef	Game 
>34225	ParameterList	float mod
>34226	Parameter	 
>34227	Identifier	mod
>34228	ParameterType	float
>34229	ReturnType	float
>34230	CompoundStatement	 
>34231	ReturnStatement	 
>34232	MultiplicativeExpression	timer * mod
>34233	Identifier	mod
>34234	Identifier	timer
>34240	FunctionDef	Game 
>34241	ParameterList	float mod
>34242	Parameter	 
>34243	Identifier	mod
>34244	ParameterType	float
>34245	ReturnType	float
>34246	CompoundStatement	 
>34247	ReturnStatement	 
>34248	MultiplicativeExpression	timer * 2 * mod
>34249	MultiplicativeExpression	2 * mod
>34250	Identifier	mod
>34251	PrimaryExpression	2
>34252	Identifier	timer
>34253	IfStatement	if ( t > 0.5f )
>34254	ExpressionStatement	 
>34255	AssignmentExpr	t = 1 - t
>34256	AdditiveExpression	1 - t
>34257	Identifier	t
>34258	PrimaryExpression	1
>34259	Identifier	t
>34260	Condition	 
>34261	RelationalExpression	t > 0.5f
>34262	PrimaryExpression	0.5f
>34263	Identifier	t
>34264	IdentifierDeclStatement	 
>34265	IdentifierDecl	t = timer
>34266	AssignmentExpr	t = timer
>34267	Identifier	timer
>34268	Identifier	timer
>34269	Identifier	t
>34270	IdentifierDeclType	float
>34277	FunctionDef	Game 
>34278	ParameterList	float mod
>34279	Parameter	 
>34280	Identifier	mod
>34281	ParameterType	float
>34282	ReturnType	float
>34283	CompoundStatement	 
>34284	ReturnStatement	 
>34285	MultiplicativeExpression	halfTimer * mod
>34286	Identifier	mod
>34287	Identifier	halfTimer
>34293	FunctionDef	Game 
>34294	ParameterList	int id , int state
>34295	Parameter	 
>34296	Identifier	state
>34297	ParameterType	int
>34298	Parameter	 
>34299	Identifier	id
>34300	ParameterType	int
>34301	ReturnType	void
>34302	CompoundStatement	 
>34303	IfStatement	if ( isInGameMenu ( ) )
>34304	CompoundStatement	 
>34305	IfStatement	if ( treasureMenu )
>34306	ElseStatement	else
>34307	IfStatement	if ( foodMenu )
>34308	CompoundStatement	 
>34309	IfStatement	if ( ! state && ! dsq -> isNested ( ) )
>34310	CompoundStatement	 
>34311	IfStatement	if ( id == ACTION_FOODDROP )
>34312	CompoundStatement	 
>34313	IfStatement	if ( recipeMenu . on )
>34314	ElseStatement	else
>34315	CompoundStatement	 
>34316	IfStatement	if ( trashIndex >= 0 )
>34317	CompoundStatement	 
>34318	IfStatement	if ( ingrIndex >= 0 )
>34319	CompoundStatement	 
>34320	ExpressionStatement	 
>34321	CallExpression	foodSlots [ ingrIndex ] -> discard ( )
>34322	ArgumentList	 
>34323	Callee	foodSlots [ ingrIndex ] -> discard
>34324	PtrMemberAccess	foodSlots [ ingrIndex ] -> discard
>34325	Identifier	discard
>34326	ArrayIndexing	foodSlots [ ingrIndex ]
>34327	Identifier	ingrIndex
>34328	Identifier	foodSlots
>34329	Condition	 
>34330	RelationalExpression	ingrIndex >= 0
>34331	PrimaryExpression	0
>34332	Identifier	ingrIndex
>34333	ForStatement	for ( int i = 0 ; i < foodSlots . size ( ) ; i ++ )
>34334	CompoundStatement	 
>34335	IfStatement	if ( foodSlots [ i ] -> isCursorIn ( ) && foodSlots [ i ] -> getIngredient ( ) )
>34336	CompoundStatement	 
>34337	BreakStatement	 
>34338	ExpressionStatement	 
>34339	AssignmentExpr	ingrIndex = i
>34340	Identifier	i
>34341	Identifier	ingrIndex
>34342	Condition	 
>34343	AndExpression	foodSlots [ i ] -> isCursorIn ( ) && foodSlots [ i ] -> getIngredient ( )
>34344	CallExpression	foodSlots [ i ] -> getIngredient ( )
>34345	ArgumentList	 
>34346	Callee	foodSlots [ i ] -> getIngredient
>34347	PtrMemberAccess	foodSlots [ i ] -> getIngredient
>34348	Identifier	getIngredient
>34349	ArrayIndexing	foodSlots [ i ]
>34350	Identifier	i
>34351	Identifier	foodSlots
>34352	CallExpression	foodSlots [ i ] -> isCursorIn ( )
>34353	ArgumentList	 
>34354	Callee	foodSlots [ i ] -> isCursorIn
>34355	PtrMemberAccess	foodSlots [ i ] -> isCursorIn
>34356	Identifier	isCursorIn
>34357	ArrayIndexing	foodSlots [ i ]
>34358	Identifier	i
>34359	Identifier	foodSlots
>34360	IncDecOp	 
>34361	IncDec	++
>34362	Identifier	i
>34363	Condition	 
>34364	RelationalExpression	i < foodSlots . size ( )
>34365	CallExpression	foodSlots . size ( )
>34366	ArgumentList	 
>34367	Callee	foodSlots . size
>34368	MemberAccess	foodSlots . size
>34369	Identifier	size
>34370	Identifier	foodSlots
>34371	Identifier	i
>34372	ForInit	 
>34373	IdentifierDeclStatement	int i = 0 ;
>34374	IdentifierDecl	i = 0
>34375	AssignmentExpr	i = 0
>34376	PrimaryExpression	0
>34377	Identifier	i
>34378	Identifier	i
>34379	IdentifierDeclType	int
>34380	IdentifierDeclStatement	 
>34381	IdentifierDecl	ingrIndex = - 1
>34382	AssignmentExpr	ingrIndex = - 1
>34383	UnaryOp	- 1
>34384	PrimaryExpression	1
>34385	UnaryOperator	-
>34386	Identifier	ingrIndex
>34387	Identifier	ingrIndex
>34388	IdentifierDeclType	int
>34389	Condition	 
>34390	RelationalExpression	trashIndex >= 0
>34391	PrimaryExpression	0
>34392	Identifier	trashIndex
>34393	ForStatement	for ( int i = 0 ; i < foodHolders . size ( ) ; i ++ )
>34394	CompoundStatement	 
>34395	IfStatement	if ( foodHolders [ i ] -> alpha . x > 0 && foodHolders [ i ] -> alphaMod > 0 && foodHolders [ i ] -> isTrash ( ) )
>34396	CompoundStatement	 
>34397	BreakStatement	 
>34398	ExpressionStatement	 
>34399	AssignmentExpr	trashIndex = i
>34400	Identifier	i
>34401	Identifier	trashIndex
>34402	Condition	 
>34403	AndExpression	foodHolders [ i ] -> alpha . x > 0 && foodHolders [ i ] -> alphaMod > 0 && foodHolders [ i ] -> isTrash ( )
>34404	AndExpression	foodHolders [ i ] -> alphaMod > 0 && foodHolders [ i ] -> isTrash ( )
>34405	CallExpression	foodHolders [ i ] -> isTrash ( )
>34406	ArgumentList	 
>34407	Callee	foodHolders [ i ] -> isTrash
>34408	PtrMemberAccess	foodHolders [ i ] -> isTrash
>34409	Identifier	isTrash
>34410	ArrayIndexing	foodHolders [ i ]
>34411	Identifier	i
>34412	Identifier	foodHolders
>34413	RelationalExpression	foodHolders [ i ] -> alphaMod > 0
>34414	PrimaryExpression	0
>34415	PtrMemberAccess	foodHolders [ i ] -> alphaMod
>34416	Identifier	alphaMod
>34417	ArrayIndexing	foodHolders [ i ]
>34418	Identifier	i
>34419	Identifier	foodHolders
>34420	RelationalExpression	foodHolders [ i ] -> alpha . x > 0
>34421	PrimaryExpression	0
>34422	MemberAccess	foodHolders [ i ] -> alpha . x
>34423	Identifier	x
>34424	PtrMemberAccess	foodHolders [ i ] -> alpha
>34425	Identifier	alpha
>34426	ArrayIndexing	foodHolders [ i ]
>34427	Identifier	i
>34428	Identifier	foodHolders
>34429	IncDecOp	 
>34430	IncDec	++
>34431	Identifier	i
>34432	Condition	 
>34433	RelationalExpression	i < foodHolders . size ( )
>34434	CallExpression	foodHolders . size ( )
>34435	ArgumentList	 
>34436	Callee	foodHolders . size
>34437	MemberAccess	foodHolders . size
>34438	Identifier	size
>34439	Identifier	foodHolders
>34440	Identifier	i
>34441	ForInit	 
>34442	IdentifierDeclStatement	int i = 0 ;
>34443	IdentifierDecl	i = 0
>34444	AssignmentExpr	i = 0
>34445	PrimaryExpression	0
>34446	Identifier	i
>34447	Identifier	i
>34448	IdentifierDeclType	int
>34449	IdentifierDeclStatement	 
>34450	IdentifierDecl	trashIndex = - 1
>34451	AssignmentExpr	trashIndex = - 1
>34452	UnaryOp	- 1
>34453	PrimaryExpression	1
>34454	UnaryOperator	-
>34455	Identifier	trashIndex
>34456	Identifier	trashIndex
>34457	IdentifierDeclType	int
>34458	CompoundStatement	 
>34459	Condition	 
>34460	MemberAccess	recipeMenu . on
>34461	Identifier	on
>34462	Identifier	recipeMenu
>34463	Condition	 
>34464	EqualityExpression	id == ACTION_FOODDROP
>34465	Identifier	ACTION_FOODDROP
>34466	Identifier	id
>34467	IfStatement	if ( id == ACTION_FOODRIGHT )
>34468	CompoundStatement	 
>34469	IfStatement	if ( recipeMenu . on )
>34470	ElseStatement	else
>34471	CompoundStatement	 
>34472	ForStatement	for ( int i = 0 ; i < foodSlots . size ( ) ; i ++ )
>34473	CompoundStatement	 
>34474	IfStatement	if ( foodSlots [ i ] -> isCursorIn ( ) && foodSlots [ i ] -> getIngredient ( ) )
>34475	CompoundStatement	 
>34476	BreakStatement	 
>34477	ExpressionStatement	 
>34478	CallExpression	foodSlots [ i ] -> moveRight ( )
>34479	ArgumentList	 
>34480	Callee	foodSlots [ i ] -> moveRight
>34481	PtrMemberAccess	foodSlots [ i ] -> moveRight
>34482	Identifier	moveRight
>34483	ArrayIndexing	foodSlots [ i ]
>34484	Identifier	i
>34485	Identifier	foodSlots
>34486	Condition	 
>34487	AndExpression	foodSlots [ i ] -> isCursorIn ( ) && foodSlots [ i ] -> getIngredient ( )
>34488	CallExpression	foodSlots [ i ] -> getIngredient ( )
>34489	ArgumentList	 
>34490	Callee	foodSlots [ i ] -> getIngredient
>34491	PtrMemberAccess	foodSlots [ i ] -> getIngredient
>34492	Identifier	getIngredient
>34493	ArrayIndexing	foodSlots [ i ]
>34494	Identifier	i
>34495	Identifier	foodSlots
>34496	CallExpression	foodSlots [ i ] -> isCursorIn ( )
>34497	ArgumentList	 
>34498	Callee	foodSlots [ i ] -> isCursorIn
>34499	PtrMemberAccess	foodSlots [ i ] -> isCursorIn
>34500	Identifier	isCursorIn
>34501	ArrayIndexing	foodSlots [ i ]
>34502	Identifier	i
>34503	Identifier	foodSlots
>34504	IncDecOp	 
>34505	IncDec	++
>34506	Identifier	i
>34507	Condition	 
>34508	RelationalExpression	i < foodSlots . size ( )
>34509	CallExpression	foodSlots . size ( )
>34510	ArgumentList	 
>34511	Callee	foodSlots . size
>34512	MemberAccess	foodSlots . size
>34513	Identifier	size
>34514	Identifier	foodSlots
>34515	Identifier	i
>34516	ForInit	 
>34517	IdentifierDeclStatement	int i = 0 ;
>34518	IdentifierDecl	i = 0
>34519	AssignmentExpr	i = 0
>34520	PrimaryExpression	0
>34521	Identifier	i
>34522	Identifier	i
>34523	IdentifierDeclType	int
>34524	CompoundStatement	 
>34525	Condition	 
>34526	MemberAccess	recipeMenu . on
>34527	Identifier	on
>34528	Identifier	recipeMenu
>34529	Condition	 
>34530	EqualityExpression	id == ACTION_FOODRIGHT
>34531	Identifier	ACTION_FOODRIGHT
>34532	Identifier	id
>34533	IfStatement	if ( id == ACTION_FOODLEFT )
>34534	CompoundStatement	 
>34535	IfStatement	if ( recipeMenu . on )
>34536	ElseStatement	else
>34537	CompoundStatement	 
>34538	ForStatement	for ( int i = 0 ; i < foodHolders . size ( ) ; i ++ )
>34539	CompoundStatement	 
>34540	IfStatement	if ( ! foodHolders [ i ] -> isTrash ( ) && ! foodHolders [ i ] -> isEmpty ( ) )
>34541	CompoundStatement	 
>34542	BreakStatement	 
>34543	ExpressionStatement	 
>34544	CallExpression	foodHolders [ i ] -> dropFood ( )
>34545	ArgumentList	 
>34546	Callee	foodHolders [ i ] -> dropFood
>34547	PtrMemberAccess	foodHolders [ i ] -> dropFood
>34548	Identifier	dropFood
>34549	ArrayIndexing	foodHolders [ i ]
>34550	Identifier	i
>34551	Identifier	foodHolders
>34552	Condition	 
>34553	AndExpression	! foodHolders [ i ] -> isTrash ( ) && ! foodHolders [ i ] -> isEmpty ( )
>34554	UnaryOp	! foodHolders [ i ] -> isEmpty ( )
>34555	CallExpression	foodHolders [ i ] -> isEmpty ( )
>34556	ArgumentList	 
>34557	Callee	foodHolders [ i ] -> isEmpty
>34558	PtrMemberAccess	foodHolders [ i ] -> isEmpty
>34559	Identifier	isEmpty
>34560	ArrayIndexing	foodHolders [ i ]
>34561	Identifier	i
>34562	Identifier	foodHolders
>34563	UnaryOperator	!
>34564	UnaryOp	! foodHolders [ i ] -> isTrash ( )
>34565	CallExpression	foodHolders [ i ] -> isTrash ( )
>34566	ArgumentList	 
>34567	Callee	foodHolders [ i ] -> isTrash
>34568	PtrMemberAccess	foodHolders [ i ] -> isTrash
>34569	Identifier	isTrash
>34570	ArrayIndexing	foodHolders [ i ]
>34571	Identifier	i
>34572	Identifier	foodHolders
>34573	UnaryOperator	!
>34574	IncDecOp	 
>34575	IncDec	++
>34576	Identifier	i
>34577	Condition	 
>34578	RelationalExpression	i < foodHolders . size ( )
>34579	CallExpression	foodHolders . size ( )
>34580	ArgumentList	 
>34581	Callee	foodHolders . size
>34582	MemberAccess	foodHolders . size
>34583	Identifier	size
>34584	Identifier	foodHolders
>34585	Identifier	i
>34586	ForInit	 
>34587	IdentifierDeclStatement	int i = 0 ;
>34588	IdentifierDecl	i = 0
>34589	AssignmentExpr	i = 0
>34590	PrimaryExpression	0
>34591	Identifier	i
>34592	Identifier	i
>34593	IdentifierDeclType	int
>34594	CompoundStatement	 
>34595	Condition	 
>34596	MemberAccess	recipeMenu . on
>34597	Identifier	on
>34598	Identifier	recipeMenu
>34599	Condition	 
>34600	EqualityExpression	id == ACTION_FOODLEFT
>34601	Identifier	ACTION_FOODLEFT
>34602	Identifier	id
>34603	IfStatement	if ( id == ACTION_COOKFOOD )
>34604	CompoundStatement	 
>34605	IfStatement	if ( ! recipeMenu . on )
>34606	ExpressionStatement	 
>34607	CallExpression	onCook ( )
>34608	ArgumentList	 
>34609	Callee	onCook
>34610	Identifier	onCook
>34611	Condition	 
>34612	UnaryOp	! recipeMenu . on
>34613	MemberAccess	recipeMenu . on
>34614	Identifier	on
>34615	Identifier	recipeMenu
>34616	UnaryOperator	!
>34617	Condition	 
>34618	EqualityExpression	id == ACTION_COOKFOOD
>34619	Identifier	ACTION_COOKFOOD
>34620	Identifier	id
>34621	IfStatement	if ( dsq -> menuSelectDelay == 0 )
>34622	CompoundStatement	 
>34623	IfStatement	if ( id == ACTION_NEXTPAGE )
>34624	CompoundStatement	 
>34625	IfStatement	if ( recipeMenu . on )
>34626	ElseStatement	else
>34627	ExpressionStatement	 
>34628	CallExpression	onNextFoodPage ( )
>34629	ArgumentList	 
>34630	Callee	onNextFoodPage
>34631	Identifier	onNextFoodPage
>34632	ExpressionStatement	 
>34633	CallExpression	recipeMenu . goNextPage ( )
>34634	ArgumentList	 
>34635	Callee	recipeMenu . goNextPage
>34636	MemberAccess	recipeMenu . goNextPage
>34637	Identifier	goNextPage
>34638	Identifier	recipeMenu
>34639	Condition	 
>34640	MemberAccess	recipeMenu . on
>34641	Identifier	on
>34642	Identifier	recipeMenu
>34643	ExpressionStatement	 
>34644	AssignmentExpr	dsq -> menuSelectDelay = MENUSELECTDELAY
>34645	Identifier	MENUSELECTDELAY
>34646	PtrMemberAccess	dsq -> menuSelectDelay
>34647	Identifier	menuSelectDelay
>34648	Identifier	dsq
>34649	Condition	 
>34650	EqualityExpression	id == ACTION_NEXTPAGE
>34651	Identifier	ACTION_NEXTPAGE
>34652	Identifier	id
>34653	IfStatement	if ( id == ACTION_PREVPAGE )
>34654	CompoundStatement	 
>34655	IfStatement	if ( recipeMenu . on )
>34656	ElseStatement	else
>34657	ExpressionStatement	 
>34658	CallExpression	onPrevFoodPage ( )
>34659	ArgumentList	 
>34660	Callee	onPrevFoodPage
>34661	Identifier	onPrevFoodPage
>34662	ExpressionStatement	 
>34663	CallExpression	recipeMenu . goPrevPage ( )
>34664	ArgumentList	 
>34665	Callee	recipeMenu . goPrevPage
>34666	MemberAccess	recipeMenu . goPrevPage
>34667	Identifier	goPrevPage
>34668	Identifier	recipeMenu
>34669	Condition	 
>34670	MemberAccess	recipeMenu . on
>34671	Identifier	on
>34672	Identifier	recipeMenu
>34673	ExpressionStatement	 
>34674	AssignmentExpr	dsq -> menuSelectDelay = MENUSELECTDELAY
>34675	Identifier	MENUSELECTDELAY
>34676	PtrMemberAccess	dsq -> menuSelectDelay
>34677	Identifier	menuSelectDelay
>34678	Identifier	dsq
>34679	Condition	 
>34680	EqualityExpression	id == ACTION_PREVPAGE
>34681	Identifier	ACTION_PREVPAGE
>34682	Identifier	id
>34683	Condition	 
>34684	EqualityExpression	dsq -> menuSelectDelay == 0
>34685	PrimaryExpression	0
>34686	PtrMemberAccess	dsq -> menuSelectDelay
>34687	Identifier	menuSelectDelay
>34688	Identifier	dsq
>34689	Condition	 
>34690	AndExpression	! state && ! dsq -> isNested ( )
>34691	UnaryOp	! dsq -> isNested ( )
>34692	CallExpression	dsq -> isNested ( )
>34693	ArgumentList	 
>34694	Callee	dsq -> isNested
>34695	PtrMemberAccess	dsq -> isNested
>34696	Identifier	isNested
>34697	Identifier	dsq
>34698	UnaryOperator	!
>34699	UnaryOp	! state
>34700	Identifier	state
>34701	UnaryOperator	!
>34702	Condition	 
>34703	Identifier	foodMenu
>34704	CompoundStatement	 
>34705	IfStatement	if ( ! state && ! dsq -> isNested ( ) )
>34706	CompoundStatement	 
>34707	IfStatement	if ( dsq -> menuSelectDelay == 0 )
>34708	CompoundStatement	 
>34709	IfStatement	if ( id == ACTION_NEXTPAGE )
>34710	CompoundStatement	 
>34711	ExpressionStatement	 
>34712	CallExpression	onNextTreasurePage ( )
>34713	ArgumentList	 
>34714	Callee	onNextTreasurePage
>34715	Identifier	onNextTreasurePage
>34716	ExpressionStatement	 
>34717	AssignmentExpr	dsq -> menuSelectDelay = MENUSELECTDELAY
>34718	Identifier	MENUSELECTDELAY
>34719	PtrMemberAccess	dsq -> menuSelectDelay
>34720	Identifier	menuSelectDelay
>34721	Identifier	dsq
>34722	Condition	 
>34723	EqualityExpression	id == ACTION_NEXTPAGE
>34724	Identifier	ACTION_NEXTPAGE
>34725	Identifier	id
>34726	IfStatement	if ( id == ACTION_PREVPAGE )
>34727	CompoundStatement	 
>34728	ExpressionStatement	 
>34729	CallExpression	onPrevTreasurePage ( )
>34730	ArgumentList	 
>34731	Callee	onPrevTreasurePage
>34732	Identifier	onPrevTreasurePage
>34733	ExpressionStatement	 
>34734	AssignmentExpr	dsq -> menuSelectDelay = MENUSELECTDELAY
>34735	Identifier	MENUSELECTDELAY
>34736	PtrMemberAccess	dsq -> menuSelectDelay
>34737	Identifier	menuSelectDelay
>34738	Identifier	dsq
>34739	Condition	 
>34740	EqualityExpression	id == ACTION_PREVPAGE
>34741	Identifier	ACTION_PREVPAGE
>34742	Identifier	id
>34743	Condition	 
>34744	EqualityExpression	dsq -> menuSelectDelay == 0
>34745	PrimaryExpression	0
>34746	PtrMemberAccess	dsq -> menuSelectDelay
>34747	Identifier	menuSelectDelay
>34748	Identifier	dsq
>34749	Condition	 
>34750	AndExpression	! state && ! dsq -> isNested ( )
>34751	UnaryOp	! dsq -> isNested ( )
>34752	CallExpression	dsq -> isNested ( )
>34753	ArgumentList	 
>34754	Callee	dsq -> isNested
>34755	PtrMemberAccess	dsq -> isNested
>34756	Identifier	isNested
>34757	Identifier	dsq
>34758	UnaryOperator	!
>34759	UnaryOp	! state
>34760	Identifier	state
>34761	UnaryOperator	!
>34762	Condition	 
>34763	Identifier	treasureMenu
>34764	Condition	 
>34765	CallExpression	isInGameMenu ( )
>34766	ArgumentList	 
>34767	Callee	isInGameMenu
>34768	Identifier	isInGameMenu
>34769	IfStatement	if ( dsq -> isDeveloperKeys ( ) || isSceneEditorActive ( ) )
>34770	CompoundStatement	 
>34771	IfStatement	if ( id == ACTION_TOGGLEGRID && ! state )
>34772	ExpressionStatement	 
>34773	CallExpression	toggleGridRender ( )
>34774	ArgumentList	 
>34775	Callee	toggleGridRender
>34776	Identifier	toggleGridRender
>34777	Condition	 
>34778	AndExpression	id == ACTION_TOGGLEGRID && ! state
>34779	UnaryOp	! state
>34780	Identifier	state
>34781	UnaryOperator	!
>34782	EqualityExpression	id == ACTION_TOGGLEGRID
>34783	Identifier	ACTION_TOGGLEGRID
>34784	Identifier	id
>34785	Condition	 
>34786	OrExpression	dsq -> isDeveloperKeys ( ) || isSceneEditorActive ( )
>34787	CallExpression	isSceneEditorActive ( )
>34788	ArgumentList	 
>34789	Callee	isSceneEditorActive
>34790	Identifier	isSceneEditorActive
>34791	CallExpression	dsq -> isDeveloperKeys ( )
>34792	ArgumentList	 
>34793	Callee	dsq -> isDeveloperKeys
>34794	PtrMemberAccess	dsq -> isDeveloperKeys
>34795	Identifier	isDeveloperKeys
>34796	Identifier	dsq
>34797	IfStatement	if ( id == ACTION_TOGGLESCENEEDITOR && ! state )
>34798	ExpressionStatement	 
>34799	CallExpression	toggleSceneEditor ( )
>34800	ArgumentList	 
>34801	Callee	toggleSceneEditor
>34802	Identifier	toggleSceneEditor
>34803	Condition	 
>34804	AndExpression	id == ACTION_TOGGLESCENEEDITOR && ! state
>34805	UnaryOp	! state
>34806	Identifier	state
>34807	UnaryOperator	!
>34808	EqualityExpression	id == ACTION_TOGGLESCENEEDITOR
>34809	Identifier	ACTION_TOGGLESCENEEDITOR
>34810	Identifier	id
>34811	IfStatement	if ( id == ACTION_TOGGLEWORLDMAP && ! state )
>34812	CompoundStatement	 
>34813	IfStatement	if ( foodMenu )
>34814	ElseStatement	else
>34815	IfStatement	if ( ! core -> isStateJumpPending ( ) )
>34816	CompoundStatement	 
>34817	ExpressionStatement	 
>34818	CallExpression	toggleWorldMap ( )
>34819	ArgumentList	 
>34820	Callee	toggleWorldMap
>34821	Identifier	toggleWorldMap
>34822	Condition	 
>34823	UnaryOp	! core -> isStateJumpPending ( )
>34824	CallExpression	core -> isStateJumpPending ( )
>34825	ArgumentList	 
>34826	Callee	core -> isStateJumpPending
>34827	PtrMemberAccess	core -> isStateJumpPending
>34828	Identifier	isStateJumpPending
>34829	Identifier	core
>34830	UnaryOperator	!
>34831	CompoundStatement	 
>34832	ExpressionStatement	 
>34833	CallExpression	recipeMenu . toggle ( ! recipeMenu . on , true )
>34834	ArgumentList	! recipeMenu . on
>34835	Argument	true
>34836	Identifier	true
>34837	Argument	! recipeMenu . on
>34838	UnaryOp	! recipeMenu . on
>34839	MemberAccess	recipeMenu . on
>34840	Identifier	on
>34841	Identifier	recipeMenu
>34842	UnaryOperator	!
>34843	Callee	recipeMenu . toggle
>34844	MemberAccess	recipeMenu . toggle
>34845	Identifier	toggle
>34846	Identifier	recipeMenu
>34847	ExpressionStatement	 
>34848	CallExpression	recipes -> setFocus ( true )
>34849	ArgumentList	true
>34850	Argument	true
>34851	Identifier	true
>34852	Callee	recipes -> setFocus
>34853	PtrMemberAccess	recipes -> setFocus
>34854	Identifier	setFocus
>34855	Identifier	recipes
>34856	Condition	 
>34857	Identifier	foodMenu
>34858	Condition	 
>34859	AndExpression	id == ACTION_TOGGLEWORLDMAP && ! state
>34860	UnaryOp	! state
>34861	Identifier	state
>34862	UnaryOperator	!
>34863	EqualityExpression	id == ACTION_TOGGLEWORLDMAP
>34864	Identifier	ACTION_TOGGLEWORLDMAP
>34865	Identifier	id
>34866	IfStatement	if ( id == ACTION_TOGGLEMENU )
>34867	CompoundStatement	 
>34868	IfStatement	if ( state )
>34869	ElseStatement	else
>34870	ExpressionStatement	 
>34871	CallExpression	hideInGameMenu ( )
>34872	ArgumentList	 
>34873	Callee	hideInGameMenu
>34874	Identifier	hideInGameMenu
>34875	ExpressionStatement	 
>34876	CallExpression	showInGameMenu ( )
>34877	ArgumentList	 
>34878	Callee	showInGameMenu
>34879	Identifier	showInGameMenu
>34880	Condition	 
>34881	Identifier	state
>34882	Condition	 
>34883	EqualityExpression	id == ACTION_TOGGLEMENU
>34884	Identifier	ACTION_TOGGLEMENU
>34885	Identifier	id
>34886	IfStatement	if ( id == ACTION_PRIMARY && ! state )
>34887	ExpressionStatement	 
>34888	CallExpression	onLeftMouseButton ( )
>34889	ArgumentList	 
>34890	Callee	onLeftMouseButton
>34891	Identifier	onLeftMouseButton
>34892	Condition	 
>34893	AndExpression	id == ACTION_PRIMARY && ! state
>34894	UnaryOp	! state
>34895	Identifier	state
>34896	UnaryOperator	!
>34897	EqualityExpression	id == ACTION_PRIMARY
>34898	Identifier	ACTION_PRIMARY
>34899	Identifier	id
>34900	IfStatement	if ( id == ACTION_ESC && ! state )
>34901	ExpressionStatement	 
>34902	CallExpression	onPressEscape ( )
>34903	ArgumentList	 
>34904	Callee	onPressEscape
>34905	Identifier	onPressEscape
>34906	Condition	 
>34907	AndExpression	id == ACTION_ESC && ! state
>34908	UnaryOp	! state
>34909	Identifier	state
>34910	UnaryOperator	!
>34911	EqualityExpression	id == ACTION_ESC
>34912	Identifier	ACTION_ESC
>34913	Identifier	id
>34914	IfStatement	if ( id == ACTION_TOGGLEHELPSCREEN && ! state )
>34915	CompoundStatement	 
>34916	ExpressionStatement	 
>34917	CallExpression	onToggleHelpScreen ( )
>34918	ArgumentList	 
>34919	Callee	onToggleHelpScreen
>34920	Identifier	onToggleHelpScreen
>34921	Condition	 
>34922	AndExpression	id == ACTION_TOGGLEHELPSCREEN && ! state
>34923	UnaryOp	! state
>34924	Identifier	state
>34925	UnaryOperator	!
>34926	EqualityExpression	id == ACTION_TOGGLEHELPSCREEN
>34927	Identifier	ACTION_TOGGLEHELPSCREEN
>34928	Identifier	id
>34929	IfStatement	if ( isIgnoreAction ( ( AquariaActions ) id ) )
>34930	ReturnStatement	 
>34931	Condition	 
>34932	CallExpression	isIgnoreAction ( ( AquariaActions ) id )
>34933	ArgumentList	( AquariaActions ) id
>34934	Argument	( AquariaActions ) id
>34935	CastExpression	( AquariaActions ) id
>34936	Identifier	id
>34937	CastTarget	AquariaActions
>34938	Callee	isIgnoreAction
>34939	Identifier	isIgnoreAction
>34940	ForStatement	for ( int i = 0 ; i < paths . size ( ) ; i ++ )
>34941	CompoundStatement	 
>34942	IfStatement	if ( paths [ i ] -> catchActions )
>34943	CompoundStatement	 
>34944	IfStatement	if ( ! paths [ i ] -> action ( id , state ) )
>34945	BreakStatement	 
>34946	Condition	 
>34947	UnaryOp	! paths [ i ] -> action ( id , state )
>34948	CallExpression	paths [ i ] -> action ( id , state )
>34949	ArgumentList	id
>34950	Argument	state
>34951	Identifier	state
>34952	Argument	id
>34953	Identifier	id
>34954	Callee	paths [ i ] -> action
>34955	PtrMemberAccess	paths [ i ] -> action
>34956	Identifier	action
>34957	ArrayIndexing	paths [ i ]
>34958	Identifier	i
>34959	Identifier	paths
>34960	UnaryOperator	!
>34961	Condition	 
>34962	PtrMemberAccess	paths [ i ] -> catchActions
>34963	Identifier	catchActions
>34964	ArrayIndexing	paths [ i ]
>34965	Identifier	i
>34966	Identifier	paths
>34967	IncDecOp	 
>34968	IncDec	++
>34969	Identifier	i
>34970	Condition	 
>34971	RelationalExpression	i < paths . size ( )
>34972	CallExpression	paths . size ( )
>34973	ArgumentList	 
>34974	Callee	paths . size
>34975	MemberAccess	paths . size
>34976	Identifier	size
>34977	Identifier	paths
>34978	Identifier	i
>34979	ForInit	 
>34980	IdentifierDeclStatement	int i = 0 ;
>34981	IdentifierDecl	i = 0
>34982	AssignmentExpr	i = 0
>34983	PrimaryExpression	0
>34984	Identifier	i
>34985	Identifier	i
>34986	IdentifierDeclType	int
>35050	FunctionDef	Game 
>35051	ParameterList	 
>35052	ReturnType	void
>35053	CompoundStatement	 
>35054	IfStatement	if ( worldMapRender )
>35055	CompoundStatement	 
>35056	ExpressionStatement	 
>35057	CallExpression	worldMapRender -> toggle ( ! worldMapRender -> isOn ( ) )
>35058	ArgumentList	! worldMapRender -> isOn ( )
>35059	Argument	! worldMapRender -> isOn ( )
>35060	UnaryOp	! worldMapRender -> isOn ( )
>35061	CallExpression	worldMapRender -> isOn ( )
>35062	ArgumentList	 
>35063	Callee	worldMapRender -> isOn
>35064	PtrMemberAccess	worldMapRender -> isOn
>35065	Identifier	isOn
>35066	Identifier	worldMapRender
>35067	UnaryOperator	!
>35068	Callee	worldMapRender -> toggle
>35069	PtrMemberAccess	worldMapRender -> toggle
>35070	Identifier	toggle
>35071	Identifier	worldMapRender
>35072	Condition	 
>35073	Identifier	worldMapRender
>35080	FunctionDef	Game 
>35081	ParameterList	 
>35082	ReturnType	void
>35083	CompoundStatement	 
>35084	ExpressionStatement	 
>35085	CallExpression	debugLog ( \"Game
>35086	ArgumentList	\"Game
>35087	Argument	\"Game
>35088	PrimaryExpression	\"Game
>35089	Callee	debugLog
>35090	Identifier	debugLog
>35091	ExpressionStatement	 
>35092	CallExpression	dsq -> forceInputGrabOff ( )
>35093	ArgumentList	 
>35094	Callee	dsq -> forceInputGrabOff
>35095	PtrMemberAccess	dsq -> forceInputGrabOff
>35096	Identifier	forceInputGrabOff
>35097	Identifier	dsq
>35098	IfStatement	if ( ! dsq -> doScreenTrans )
>35099	CompoundStatement	 
>35100	ExpressionStatement	 
>35101	CallExpression	dsq -> toggleCursor ( true , 0.5 )
>35102	ArgumentList	true
>35103	Argument	0.5
>35104	PrimaryExpression	0.5
>35105	Argument	true
>35106	Identifier	true
>35107	Callee	dsq -> toggleCursor
>35108	PtrMemberAccess	dsq -> toggleCursor
>35109	Identifier	toggleCursor
>35110	Identifier	dsq
>35111	Condition	 
>35112	UnaryOp	! dsq -> doScreenTrans
>35113	PtrMemberAccess	dsq -> doScreenTrans
>35114	Identifier	doScreenTrans
>35115	Identifier	dsq
>35116	UnaryOperator	!
>35117	ExpressionStatement	 
>35118	AssignmentExpr	applyingState = false
>35119	Identifier	false
>35120	Identifier	applyingState
>35121	IfStatement	if ( verbose )
>35122	ExpressionStatement	 
>35123	CallExpression	debugLog ( \"reset timer\" )
>35124	ArgumentList	\"reset timer\"
>35125	Argument	\"reset timer\"
>35126	PrimaryExpression	\"reset timer\"
>35127	Callee	debugLog
>35128	Identifier	debugLog
>35129	Condition	 
>35130	Identifier	verbose
>35131	IfStatement	if ( dsq -> doScreenTrans )
>35132	CompoundStatement	 
>35133	ExpressionStatement	 
>35134	CallExpression	dsq -> clearSaveSlots ( false )
>35135	ArgumentList	false
>35136	Argument	false
>35137	Identifier	false
>35138	Callee	dsq -> clearSaveSlots
>35139	PtrMemberAccess	dsq -> clearSaveSlots
>35140	Identifier	clearSaveSlots
>35141	Identifier	dsq
>35142	ExpressionStatement	 
>35143	CallExpression	dsq -> main ( 0.21 )
>35144	ArgumentList	0.21
>35145	Argument	0.21
>35146	PrimaryExpression	0.21
>35147	Callee	dsq -> main
>35148	PtrMemberAccess	dsq -> main
>35149	Identifier	main
>35150	Identifier	dsq
>35151	ExpressionStatement	 
>35152	CallExpression	dsq -> tfader -> alpha . interpolateTo ( 0 , 0.2 )
>35153	ArgumentList	0
>35154	Argument	0.2
>35155	PrimaryExpression	0.2
>35156	Argument	0
>35157	PrimaryExpression	0
>35158	Callee	dsq -> tfader -> alpha . interpolateTo
>35159	MemberAccess	dsq -> tfader -> alpha . interpolateTo
>35160	Identifier	interpolateTo
>35161	PtrMemberAccess	dsq -> tfader -> alpha
>35162	Identifier	alpha
>35163	PtrMemberAccess	dsq -> tfader
>35164	Identifier	tfader
>35165	Identifier	dsq
>35166	ExpressionStatement	 
>35167	CallExpression	dsq -> toggleCursor ( true )
>35168	ArgumentList	true
>35169	Argument	true
>35170	Identifier	true
>35171	Callee	dsq -> toggleCursor
>35172	PtrMemberAccess	dsq -> toggleCursor
>35173	Identifier	toggleCursor
>35174	Identifier	dsq
>35175	ExpressionStatement	 
>35176	CallExpression	dsq -> main ( 0.5 )
>35177	ArgumentList	0.5
>35178	Argument	0.5
>35179	PrimaryExpression	0.5
>35180	Callee	dsq -> main
>35181	PtrMemberAccess	dsq -> main
>35182	Identifier	main
>35183	Identifier	dsq
>35184	ExpressionStatement	 
>35185	AssignmentExpr	dsq -> overlay -> alpha = 0
>35186	PrimaryExpression	0
>35187	PtrMemberAccess	dsq -> overlay -> alpha
>35188	Identifier	alpha
>35189	PtrMemberAccess	dsq -> overlay
>35190	Identifier	overlay
>35191	Identifier	dsq
>35192	ExpressionStatement	 
>35193	CallExpression	dsq -> transitionSaveSlots ( )
>35194	ArgumentList	 
>35195	Callee	dsq -> transitionSaveSlots
>35196	PtrMemberAccess	dsq -> transitionSaveSlots
>35197	Identifier	transitionSaveSlots
>35198	Identifier	dsq
>35199	ExpressionStatement	 
>35200	AssignmentExpr	dsq -> doScreenTrans = false
>35201	Identifier	false
>35202	PtrMemberAccess	dsq -> doScreenTrans
>35203	Identifier	doScreenTrans
>35204	Identifier	dsq
>35205	ExpressionStatement	 
>35206	CallExpression	dsq -> toggleCursor ( false , 0 )
>35207	ArgumentList	false
>35208	Argument	0
>35209	PrimaryExpression	0
>35210	Argument	false
>35211	Identifier	false
>35212	Callee	dsq -> toggleCursor
>35213	PtrMemberAccess	dsq -> toggleCursor
>35214	Identifier	toggleCursor
>35215	Identifier	dsq
>35216	ExpressionStatement	 
>35217	CallExpression	core -> resetTimer ( )
>35218	ArgumentList	 
>35219	Callee	core -> resetTimer
>35220	PtrMemberAccess	core -> resetTimer
>35221	Identifier	resetTimer
>35222	Identifier	core
>35223	ExpressionStatement	 
>35224	CallExpression	debugLog ( \"SCREENTRANS!\" )
>35225	ArgumentList	\"SCREENTRANS!\"
>35226	Argument	\"SCREENTRANS!\"
>35227	PrimaryExpression	\"SCREENTRANS!\"
>35228	Callee	debugLog
>35229	Identifier	debugLog
>35230	Condition	 
>35231	PtrMemberAccess	dsq -> doScreenTrans
>35232	Identifier	doScreenTrans
>35233	Identifier	dsq
>35234	IfStatement	if ( ! dsq -> doScreenTrans && ( dsq -> overlay -> alpha != 0 && ! dsq -> overlay -> alpha . isInterpolating ( ) ) )
>35235	CompoundStatement	 
>35236	ExpressionStatement	 
>35237	CallExpression	core -> resetTimer ( )
>35238	ArgumentList	 
>35239	Callee	core -> resetTimer
>35240	PtrMemberAccess	core -> resetTimer
>35241	Identifier	resetTimer
>35242	Identifier	core
>35243	ExpressionStatement	 
>35244	CallExpression	avatar -> enableInput ( )
>35245	ArgumentList	 
>35246	Callee	avatar -> enableInput
>35247	PtrMemberAccess	avatar -> enableInput
>35248	Identifier	enableInput
>35249	Identifier	avatar
>35250	ExpressionStatement	 
>35251	CallExpression	core -> main ( 0.5 )
>35252	ArgumentList	0.5
>35253	Argument	0.5
>35254	PrimaryExpression	0.5
>35255	Callee	core -> main
>35256	PtrMemberAccess	core -> main
>35257	Identifier	main
>35258	Identifier	core
>35259	ExpressionStatement	 
>35260	CallExpression	avatar -> disableInput ( )
>35261	ArgumentList	 
>35262	Callee	avatar -> disableInput
>35263	PtrMemberAccess	avatar -> disableInput
>35264	Identifier	disableInput
>35265	Identifier	avatar
>35266	ExpressionStatement	 
>35267	CallExpression	core -> resetTimer ( )
>35268	ArgumentList	 
>35269	Callee	core -> resetTimer
>35270	PtrMemberAccess	core -> resetTimer
>35271	Identifier	resetTimer
>35272	Identifier	core
>35273	ExpressionStatement	 
>35274	CallExpression	dsq -> overlay -> alpha . interpolateTo ( 0 , 1 )
>35275	ArgumentList	0
>35276	Argument	1
>35277	PrimaryExpression	1
>35278	Argument	0
>35279	PrimaryExpression	0
>35280	Callee	dsq -> overlay -> alpha . interpolateTo
>35281	MemberAccess	dsq -> overlay -> alpha . interpolateTo
>35282	Identifier	interpolateTo
>35283	PtrMemberAccess	dsq -> overlay -> alpha
>35284	Identifier	alpha
>35285	PtrMemberAccess	dsq -> overlay
>35286	Identifier	overlay
>35287	Identifier	dsq
>35288	ExpressionStatement	 
>35289	CallExpression	debugLog ( \"FADEIN\" )
>35290	ArgumentList	\"FADEIN\"
>35291	Argument	\"FADEIN\"
>35292	PrimaryExpression	\"FADEIN\"
>35293	Callee	debugLog
>35294	Identifier	debugLog
>35295	IfStatement	if ( verbose )
>35296	ExpressionStatement	 
>35297	CallExpression	debugLog ( \"fading in\" )
>35298	ArgumentList	\"fading in\"
>35299	Argument	\"fading in\"
>35300	PrimaryExpression	\"fading in\"
>35301	Callee	debugLog
>35302	Identifier	debugLog
>35303	Condition	 
>35304	Identifier	verbose
>35305	Condition	 
>35306	AndExpression	! dsq -> doScreenTrans && ( dsq -> overlay -> alpha != 0 && ! dsq -> overlay -> alpha . isInterpolating ( ) )
>35307	AndExpression	dsq -> overlay -> alpha != 0 && ! dsq -> overlay -> alpha . isInterpolating ( )
>35308	UnaryOp	! dsq -> overlay -> alpha . isInterpolating ( )
>35309	CallExpression	dsq -> overlay -> alpha . isInterpolating ( )
>35310	ArgumentList	 
>35311	Callee	dsq -> overlay -> alpha . isInterpolating
>35312	MemberAccess	dsq -> overlay -> alpha . isInterpolating
>35313	Identifier	isInterpolating
>35314	PtrMemberAccess	dsq -> overlay -> alpha
>35315	Identifier	alpha
>35316	PtrMemberAccess	dsq -> overlay
>35317	Identifier	overlay
>35318	Identifier	dsq
>35319	UnaryOperator	!
>35320	EqualityExpression	dsq -> overlay -> alpha != 0
>35321	PrimaryExpression	0
>35322	PtrMemberAccess	dsq -> overlay -> alpha
>35323	Identifier	alpha
>35324	PtrMemberAccess	dsq -> overlay
>35325	Identifier	overlay
>35326	Identifier	dsq
>35327	UnaryOp	! dsq -> doScreenTrans
>35328	PtrMemberAccess	dsq -> doScreenTrans
>35329	Identifier	doScreenTrans
>35330	Identifier	dsq
>35331	UnaryOperator	!
>35332	IfStatement	if ( dsq -> mod . isActive ( ) )
>35333	ElseStatement	else
>35334	ExpressionStatement	 
>35335	CallExpression	dsq -> runScript ( \"scripts/maps/map_\" + sceneName + \".lua\" , \"init\" , true )
>35336	ArgumentList	\"scripts/maps/map_\" + sceneName + \".lua\"
>35337	Argument	true
>35338	Identifier	true
>35339	Argument	\"init\"
>35340	PrimaryExpression	\"init\"
>35341	Argument	\"scripts/maps/map_\" + sceneName + \".lua\"
>35342	AdditiveExpression	\"scripts/maps/map_\" + sceneName + \".lua\"
>35343	AdditiveExpression	sceneName + \".lua\"
>35344	PrimaryExpression	\".lua\"
>35345	Identifier	sceneName
>35346	PrimaryExpression	\"scripts/maps/map_\"
>35347	Callee	dsq -> runScript
>35348	PtrMemberAccess	dsq -> runScript
>35349	Identifier	runScript
>35350	Identifier	dsq
>35351	ExpressionStatement	 
>35352	CallExpression	dsq -> runScript ( dsq -> mod . getPath ( ) + \"scripts/map_\" + sceneName + \".lua\" , \"init\" , true )
>35353	ArgumentList	dsq -> mod . getPath ( ) + \"scripts/map_\" + sceneName + \".lua\"
>35354	Argument	true
>35355	Identifier	true
>35356	Argument	\"init\"
>35357	PrimaryExpression	\"init\"
>35358	Argument	dsq -> mod . getPath ( ) + \"scripts/map_\" + sceneName + \".lua\"
>35359	AdditiveExpression	dsq -> mod . getPath ( ) + \"scripts/map_\" + sceneName + \".lua\"
>35360	AdditiveExpression	\"scripts/map_\" + sceneName + \".lua\"
>35361	AdditiveExpression	sceneName + \".lua\"
>35362	PrimaryExpression	\".lua\"
>35363	Identifier	sceneName
>35364	PrimaryExpression	\"scripts/map_\"
>35365	CallExpression	dsq -> mod . getPath ( )
>35366	ArgumentList	 
>35367	Callee	dsq -> mod . getPath
>35368	MemberAccess	dsq -> mod . getPath
>35369	Identifier	getPath
>35370	PtrMemberAccess	dsq -> mod
>35371	Identifier	mod
>35372	Identifier	dsq
>35373	Callee	dsq -> runScript
>35374	PtrMemberAccess	dsq -> runScript
>35375	Identifier	runScript
>35376	Identifier	dsq
>35377	Condition	 
>35378	CallExpression	dsq -> mod . isActive ( )
>35379	ArgumentList	 
>35380	Callee	dsq -> mod . isActive
>35381	MemberAccess	dsq -> mod . isActive
>35382	Identifier	isActive
>35383	PtrMemberAccess	dsq -> mod
>35384	Identifier	mod
>35385	Identifier	dsq
>35386	IfStatement	if ( verbose )
>35387	ExpressionStatement	 
>35388	CallExpression	debugLog ( \"loading map init script\" )
>35389	ArgumentList	\"loading map init script\"
>35390	Argument	\"loading map init script\"
>35391	PrimaryExpression	\"loading map init script\"
>35392	Callee	debugLog
>35393	Identifier	debugLog
>35394	Condition	 
>35395	Identifier	verbose
>35396	ExpressionStatement	 
>35397	CallExpression	dsq -> subtitlePlayer . show ( 0.25 )
>35398	ArgumentList	0.25
>35399	Argument	0.25
>35400	PrimaryExpression	0.25
>35401	Callee	dsq -> subtitlePlayer . show
>35402	MemberAccess	dsq -> subtitlePlayer . show
>35403	Identifier	show
>35404	PtrMemberAccess	dsq -> subtitlePlayer
>35405	Identifier	subtitlePlayer
>35406	Identifier	dsq
>35407	ExpressionStatement	 
>35408	CallExpression	updateBgSfxLoop ( )
>35409	ArgumentList	 
>35410	Callee	updateBgSfxLoop
>35411	Identifier	updateBgSfxLoop
>35412	ExpressionStatement	 
>35413	CallExpression	debugLog ( \"Updating bgSfxLoop\" )
>35414	ArgumentList	\"Updating bgSfxLoop\"
>35415	Argument	\"Updating bgSfxLoop\"
>35416	PrimaryExpression	\"Updating bgSfxLoop\"
>35417	Callee	debugLog
>35418	Identifier	debugLog
>35419	ForStatement	for ( i = 0 ; i < pathSz ; i ++ )
>35420	CompoundStatement	 
>35421	ExpressionStatement	 
>35422	CallExpression	getPath ( i ) -> init ( )
>35423	ArgumentList	 
>35424	Callee	getPath ( i ) -> init
>35425	PtrMemberAccess	getPath ( i ) -> init
>35426	Identifier	init
>35427	CallExpression	getPath ( i )
>35428	ArgumentList	i
>35429	Argument	i
>35430	Identifier	i
>35431	Callee	getPath
>35432	Identifier	getPath
>35433	IncDecOp	 
>35434	IncDec	++
>35435	Identifier	i
>35436	Condition	 
>35437	RelationalExpression	i < pathSz
>35438	Identifier	pathSz
>35439	Identifier	i
>35440	ForInit	 
>35441	AssignmentExpr	i = 0
>35442	PrimaryExpression	0
>35443	Identifier	i
>35444	IdentifierDeclStatement	 
>35445	IdentifierDecl	pathSz = getNumPaths ( )
>35446	AssignmentExpr	pathSz = getNumPaths ( )
>35447	CallExpression	getNumPaths ( )
>35448	ArgumentList	 
>35449	Callee	getNumPaths
>35450	Identifier	getNumPaths
>35451	Identifier	pathSz
>35452	Identifier	pathSz
>35453	IdentifierDeclType	int
>35454	IfStatement	if ( verbose )
>35455	ExpressionStatement	 
>35456	CallExpression	debugLog ( \"paths init\" )
>35457	ArgumentList	\"paths init\"
>35458	Argument	\"paths init\"
>35459	PrimaryExpression	\"paths init\"
>35460	Callee	debugLog
>35461	Identifier	debugLog
>35462	Condition	 
>35463	Identifier	verbose
>35464	ExpressionStatement	 
>35465	CallExpression	core -> resetTimer ( )
>35466	ArgumentList	 
>35467	Callee	core -> resetTimer
>35468	PtrMemberAccess	core -> resetTimer
>35469	Identifier	resetTimer
>35470	Identifier	core
>35471	IfStatement	if ( verbose )
>35472	ExpressionStatement	 
>35473	CallExpression	debugLog ( \"reset timer\" )
>35474	ArgumentList	\"reset timer\"
>35475	Argument	\"reset timer\"
>35476	PrimaryExpression	\"reset timer\"
>35477	Callee	debugLog
>35478	Identifier	debugLog
>35479	Condition	 
>35480	Identifier	verbose
>35481	IfStatement	if ( verbose )
>35482	ExpressionStatement	 
>35483	CallExpression	debugLog ( \"Done initAvatar\" )
>35484	ArgumentList	\"Done initAvatar\"
>35485	Argument	\"Done initAvatar\"
>35486	PrimaryExpression	\"Done initAvatar\"
>35487	Callee	debugLog
>35488	Identifier	debugLog
>35489	Condition	 
>35490	Identifier	verbose
>35491	ExpressionStatement	 
>35492	CallExpression	dsq -> continuity . initAvatar ( avatar )
>35493	ArgumentList	avatar
>35494	Argument	avatar
>35495	Identifier	avatar
>35496	Callee	dsq -> continuity . initAvatar
>35497	MemberAccess	dsq -> continuity . initAvatar
>35498	Identifier	initAvatar
>35499	PtrMemberAccess	dsq -> continuity
>35500	Identifier	continuity
>35501	Identifier	dsq
>35502	IfStatement	if ( verbose )
>35503	ExpressionStatement	 
>35504	CallExpression	debugLog ( \"initAvatar\" )
>35505	ArgumentList	\"initAvatar\"
>35506	Argument	\"initAvatar\"
>35507	PrimaryExpression	\"initAvatar\"
>35508	Callee	debugLog
>35509	Identifier	debugLog
>35510	Condition	 
>35511	Identifier	verbose
>35512	IfStatement	if ( dsq -> continuity . getWorldType ( ) != WT_NORMAL )
>35513	ExpressionStatement	 
>35514	CallExpression	dsq -> continuity . applyWorldEffects ( dsq -> continuity . getWorldType ( ) , 0 , musicchanged )
>35515	ArgumentList	dsq -> continuity . getWorldType ( )
>35516	Argument	musicchanged
>35517	Identifier	musicchanged
>35518	Argument	0
>35519	PrimaryExpression	0
>35520	Argument	dsq -> continuity . getWorldType ( )
>35521	CallExpression	dsq -> continuity . getWorldType ( )
>35522	ArgumentList	 
>35523	Callee	dsq -> continuity . getWorldType
>35524	MemberAccess	dsq -> continuity . getWorldType
>35525	Identifier	getWorldType
>35526	PtrMemberAccess	dsq -> continuity
>35527	Identifier	continuity
>35528	Identifier	dsq
>35529	Callee	dsq -> continuity . applyWorldEffects
>35530	MemberAccess	dsq -> continuity . applyWorldEffects
>35531	Identifier	applyWorldEffects
>35532	PtrMemberAccess	dsq -> continuity
>35533	Identifier	continuity
>35534	Identifier	dsq
>35535	Condition	 
>35536	EqualityExpression	dsq -> continuity . getWorldType ( ) != WT_NORMAL
>35537	Identifier	WT_NORMAL
>35538	CallExpression	dsq -> continuity . getWorldType ( )
>35539	ArgumentList	 
>35540	Callee	dsq -> continuity . getWorldType
>35541	MemberAccess	dsq -> continuity . getWorldType
>35542	Identifier	getWorldType
>35543	PtrMemberAccess	dsq -> continuity
>35544	Identifier	continuity
>35545	Identifier	dsq
>35546	IfStatement	if ( ! airSfxLoop . empty ( ) )
>35547	CompoundStatement	 
>35548	ExpressionStatement	 
>35549	CallExpression	core -> sound -> loadLocalSound ( airSfxLoop )
>35550	ArgumentList	airSfxLoop
>35551	Argument	airSfxLoop
>35552	Identifier	airSfxLoop
>35553	Callee	core -> sound -> loadLocalSound
>35554	PtrMemberAccess	core -> sound -> loadLocalSound
>35555	Identifier	loadLocalSound
>35556	PtrMemberAccess	core -> sound
>35557	Identifier	sound
>35558	Identifier	core
>35559	Condition	 
>35560	UnaryOp	! airSfxLoop . empty ( )
>35561	CallExpression	airSfxLoop . empty ( )
>35562	ArgumentList	 
>35563	Callee	airSfxLoop . empty
>35564	MemberAccess	airSfxLoop . empty
>35565	Identifier	empty
>35566	Identifier	airSfxLoop
>35567	UnaryOperator	!
>35568	IfStatement	if ( ! bgSfxLoop . empty ( ) )
>35569	CompoundStatement	 
>35570	ExpressionStatement	 
>35571	CallExpression	core -> sound -> loadLocalSound ( bgSfxLoop )
>35572	ArgumentList	bgSfxLoop
>35573	Argument	bgSfxLoop
>35574	Identifier	bgSfxLoop
>35575	Callee	core -> sound -> loadLocalSound
>35576	PtrMemberAccess	core -> sound -> loadLocalSound
>35577	Identifier	loadLocalSound
>35578	PtrMemberAccess	core -> sound
>35579	Identifier	sound
>35580	Identifier	core
>35581	Condition	 
>35582	UnaryOp	! bgSfxLoop . empty ( )
>35583	CallExpression	bgSfxLoop . empty ( )
>35584	ArgumentList	 
>35585	Callee	bgSfxLoop . empty
>35586	MemberAccess	bgSfxLoop . empty
>35587	Identifier	empty
>35588	Identifier	bgSfxLoop
>35589	UnaryOperator	!
>35590	ExpressionStatement	 
>35591	AssignmentExpr	dsq -> loops . bg = BBGE_AUDIO_NOCHANNEL
>35592	Identifier	BBGE_AUDIO_NOCHANNEL
>35593	MemberAccess	dsq -> loops . bg
>35594	Identifier	bg
>35595	PtrMemberAccess	dsq -> loops
>35596	Identifier	loops
>35597	Identifier	dsq
>35598	IdentifierDeclStatement	 
>35599	IdentifierDecl	musicchanged = updateMusic ( )
>35600	AssignmentExpr	musicchanged = updateMusic ( )
>35601	CallExpression	updateMusic ( )
>35602	ArgumentList	 
>35603	Callee	updateMusic
>35604	Identifier	updateMusic
>35605	Identifier	musicchanged
>35606	Identifier	musicchanged
>35607	IdentifierDeclType	bool
>35608	ExpressionStatement	 
>35609	CallExpression	postInitEntities ( )
>35610	ArgumentList	 
>35611	Callee	postInitEntities
>35612	Identifier	postInitEntities
>35613	ExpressionStatement	 
>35614	CallExpression	createPets ( )
>35615	ArgumentList	 
>35616	Callee	createPets
>35617	Identifier	createPets
>35618	ExpressionStatement	 
>35619	CallExpression	updateMiniMapHintPosition ( )
>35620	ArgumentList	 
>35621	Callee	updateMiniMapHintPosition
>35622	Identifier	updateMiniMapHintPosition
>35623	IfStatement	if ( dsq -> mod . isActive ( ) )
>35624	ElseStatement	else
>35625	ExpressionStatement	 
>35626	AssignmentExpr	cookingScript = dsq -> scriptInterface . openScript ( \"scripts/global/cooking.lua\" , true )
>35627	CallExpression	dsq -> scriptInterface . openScript ( \"scripts/global/cooking.lua\" , true )
>35628	ArgumentList	\"scripts/global/cooking.lua\"
>35629	Argument	true
>35630	Identifier	true
>35631	Argument	\"scripts/global/cooking.lua\"
>35632	PrimaryExpression	\"scripts/global/cooking.lua\"
>35633	Callee	dsq -> scriptInterface . openScript
>35634	MemberAccess	dsq -> scriptInterface . openScript
>35635	Identifier	openScript
>35636	PtrMemberAccess	dsq -> scriptInterface
>35637	Identifier	scriptInterface
>35638	Identifier	dsq
>35639	Identifier	cookingScript
>35640	ExpressionStatement	 
>35641	AssignmentExpr	cookingScript = dsq -> scriptInterface . openScript ( dsq -> mod . getPath ( ) + \"scripts/cooking.lua\" , \
>35642	CallExpression	dsq -> scriptInterface . openScript ( dsq -> mod . getPath ( ) + \"scripts/cooking.lua\" , true )
>35643	ArgumentList	dsq -> mod . getPath ( ) + \"scripts/cooking.lua\"
>35644	Argument	true
>35645	Identifier	true
>35646	Argument	dsq -> mod . getPath ( ) + \"scripts/cooking.lua\"
>35647	AdditiveExpression	dsq -> mod . getPath ( ) + \"scripts/cooking.lua\"
>35648	PrimaryExpression	\"scripts/cooking.lua\"
>35649	CallExpression	dsq -> mod . getPath ( )
>35650	ArgumentList	 
>35651	Callee	dsq -> mod . getPath
>35652	MemberAccess	dsq -> mod . getPath
>35653	Identifier	getPath
>35654	PtrMemberAccess	dsq -> mod
>35655	Identifier	mod
>35656	Identifier	dsq
>35657	Callee	dsq -> scriptInterface . openScript
>35658	MemberAccess	dsq -> scriptInterface . openScript
>35659	Identifier	openScript
>35660	PtrMemberAccess	dsq -> scriptInterface
>35661	Identifier	scriptInterface
>35662	Identifier	dsq
>35663	Identifier	cookingScript
>35664	Condition	 
>35665	CallExpression	dsq -> mod . isActive ( )
>35666	ArgumentList	 
>35667	Callee	dsq -> mod . isActive
>35668	MemberAccess	dsq -> mod . isActive
>35669	Identifier	isActive
>35670	PtrMemberAccess	dsq -> mod
>35671	Identifier	mod
>35672	Identifier	dsq
>35673	IfStatement	if ( cookingScript )
>35674	CompoundStatement	 
>35675	ExpressionStatement	 
>35676	AssignmentExpr	cookingScript = NULL
>35677	Identifier	NULL
>35678	Identifier	cookingScript
>35679	ExpressionStatement	 
>35680	CallExpression	dsq -> scriptInterface . closeScript ( cookingScript )
>35681	ArgumentList	cookingScript
>35682	Argument	cookingScript
>35683	Identifier	cookingScript
>35684	Callee	dsq -> scriptInterface . closeScript
>35685	MemberAccess	dsq -> scriptInterface . closeScript
>35686	Identifier	closeScript
>35687	PtrMemberAccess	dsq -> scriptInterface
>35688	Identifier	scriptInterface
>35689	Identifier	dsq
>35690	Condition	 
>35691	Identifier	cookingScript
>35692	IfStatement	if ( ! overrideMusic . empty ( ) )
>35693	CompoundStatement	 
>35694	ExpressionStatement	 
>35695	AssignmentExpr	musicToPlay = overrideMusic
>35696	Identifier	overrideMusic
>35697	Identifier	musicToPlay
>35698	Condition	 
>35699	UnaryOp	! overrideMusic . empty ( )
>35700	CallExpression	overrideMusic . empty ( )
>35701	ArgumentList	 
>35702	Callee	overrideMusic . empty
>35703	MemberAccess	overrideMusic . empty
>35704	Identifier	empty
>35705	Identifier	overrideMusic
>35706	UnaryOperator	!
>35707	IdentifierDeclStatement	 
>35708	IdentifierDecl	musicToPlay = this -> musicToPlay
>35709	AssignmentExpr	musicToPlay = this -> musicToPlay
>35710	PtrMemberAccess	this -> musicToPlay
>35711	Identifier	musicToPlay
>35712	Identifier	this
>35713	Identifier	musicToPlay
>35714	Identifier	musicToPlay
>35715	IdentifierDeclType	std 
>35716	IfStatement	if ( dsq -> mod . isActive ( ) )
>35717	ElseStatement	else
>35718	ExpressionStatement	 
>35719	CallExpression	dsq -> runScript ( \"scripts/maps/premap_\" + sceneName + \".lua\" , \"init\" , true )
>35720	ArgumentList	\"scripts/maps/premap_\" + sceneName + \".lua\"
>35721	Argument	true
>35722	Identifier	true
>35723	Argument	\"init\"
>35724	PrimaryExpression	\"init\"
>35725	Argument	\"scripts/maps/premap_\" + sceneName + \".lua\"
>35726	AdditiveExpression	\"scripts/maps/premap_\" + sceneName + \".lua\"
>35727	AdditiveExpression	sceneName + \".lua\"
>35728	PrimaryExpression	\".lua\"
>35729	Identifier	sceneName
>35730	PrimaryExpression	\"scripts/maps/premap_\"
>35731	Callee	dsq -> runScript
>35732	PtrMemberAccess	dsq -> runScript
>35733	Identifier	runScript
>35734	Identifier	dsq
>35735	ExpressionStatement	 
>35736	CallExpression	dsq -> runScript ( dsq -> mod . getPath ( ) + \"scripts/premap_\" + sceneName + \".lua\" , \"init\" , true )
>35737	ArgumentList	dsq -> mod . getPath ( ) + \"scripts/premap_\" + sceneName + \".lua\"
>35738	Argument	true
>35739	Identifier	true
>35740	Argument	\"init\"
>35741	PrimaryExpression	\"init\"
>35742	Argument	dsq -> mod . getPath ( ) + \"scripts/premap_\" + sceneName + \".lua\"
>35743	AdditiveExpression	dsq -> mod . getPath ( ) + \"scripts/premap_\" + sceneName + \".lua\"
>35744	AdditiveExpression	\"scripts/premap_\" + sceneName + \".lua\"
>35745	AdditiveExpression	sceneName + \".lua\"
>35746	PrimaryExpression	\".lua\"
>35747	Identifier	sceneName
>35748	PrimaryExpression	\"scripts/premap_\"
>35749	CallExpression	dsq -> mod . getPath ( )
>35750	ArgumentList	 
>35751	Callee	dsq -> mod . getPath
>35752	MemberAccess	dsq -> mod . getPath
>35753	Identifier	getPath
>35754	PtrMemberAccess	dsq -> mod
>35755	Identifier	mod
>35756	Identifier	dsq
>35757	Callee	dsq -> runScript
>35758	PtrMemberAccess	dsq -> runScript
>35759	Identifier	runScript
>35760	Identifier	dsq
>35761	Condition	 
>35762	CallExpression	dsq -> mod . isActive ( )
>35763	ArgumentList	 
>35764	Callee	dsq -> mod . isActive
>35765	MemberAccess	dsq -> mod . isActive
>35766	Identifier	isActive
>35767	PtrMemberAccess	dsq -> mod
>35768	Identifier	mod
>35769	Identifier	dsq
>35770	ExpressionStatement	 
>35771	CallExpression	core -> sort ( )
>35772	ArgumentList	 
>35773	Callee	core -> sort
>35774	PtrMemberAccess	core -> sort
>35775	Identifier	sort
>35776	Identifier	core
>35777	ExpressionStatement	 
>35778	AssignmentExpr	core -> cameraPos = getCameraPositionFor ( avatar -> position )
>35779	CallExpression	getCameraPositionFor ( avatar -> position )
>35780	ArgumentList	avatar -> position
>35781	Argument	avatar -> position
>35782	PtrMemberAccess	avatar -> position
>35783	Identifier	position
>35784	Identifier	avatar
>35785	Callee	getCameraPositionFor
>35786	Identifier	getCameraPositionFor
>35787	PtrMemberAccess	core -> cameraPos
>35788	Identifier	cameraPos
>35789	Identifier	core
>35790	ExpressionStatement	 
>35791	AssignmentExpr	cameraInterp = avatar -> position
>35792	PtrMemberAccess	avatar -> position
>35793	Identifier	position
>35794	Identifier	avatar
>35795	Identifier	cameraInterp
>35796	ExpressionStatement	 
>35797	AssignmentExpr	avatar -> myZoom = dsq -> continuity . zoom
>35798	MemberAccess	dsq -> continuity . zoom
>35799	Identifier	zoom
>35800	PtrMemberAccess	dsq -> continuity
>35801	Identifier	continuity
>35802	Identifier	dsq
>35803	PtrMemberAccess	avatar -> myZoom
>35804	Identifier	myZoom
>35805	Identifier	avatar
>35806	ExpressionStatement	 
>35807	AssignmentExpr	core -> globalScale = dsq -> continuity . zoom
>35808	MemberAccess	dsq -> continuity . zoom
>35809	Identifier	zoom
>35810	PtrMemberAccess	dsq -> continuity
>35811	Identifier	continuity
>35812	Identifier	dsq
>35813	PtrMemberAccess	core -> globalScale
>35814	Identifier	globalScale
>35815	Identifier	core
>35816	ExpressionStatement	 
>35817	CallExpression	cameraInterp . stop ( )
>35818	ArgumentList	 
>35819	Callee	cameraInterp . stop
>35820	MemberAccess	cameraInterp . stop
>35821	Identifier	stop
>35822	Identifier	cameraInterp
>35823	ExpressionStatement	 
>35824	CallExpression	core -> cacheRender ( )
>35825	ArgumentList	 
>35826	Callee	core -> cacheRender
>35827	PtrMemberAccess	core -> cacheRender
>35828	Identifier	cacheRender
>35829	Identifier	core
>35830	ExpressionStatement	 
>35831	CallExpression	hideInGameMenu ( false )
>35832	ArgumentList	false
>35833	Argument	false
>35834	Identifier	false
>35835	Callee	hideInGameMenu
>35836	Identifier	hideInGameMenu
>35837	ExpressionStatement	 
>35838	CallExpression	createInGameMenu ( )
>35839	ArgumentList	 
>35840	Callee	createInGameMenu
>35841	Identifier	createInGameMenu
>35842	ExpressionStatement	 
>35843	AssignmentExpr	toNode = \"\"
>35844	PrimaryExpression	\"\"
>35845	Identifier	toNode
>35846	IfStatement	if ( li )
>35847	CompoundStatement	 
>35848	ExpressionStatement	 
>35849	AssignmentExpr	li -> position = avatar -> position + Vector ( 8 , 8 )
>35850	AdditiveExpression	avatar -> position + Vector ( 8 , 8 )
>35851	CallExpression	Vector ( 8 , 8 )
>35852	ArgumentList	8
>35853	Argument	8
>35854	PrimaryExpression	8
>35855	Argument	8
>35856	PrimaryExpression	8
>35857	Callee	Vector
>35858	Identifier	Vector
>35859	PtrMemberAccess	avatar -> position
>35860	Identifier	position
>35861	Identifier	avatar
>35862	PtrMemberAccess	li -> position
>35863	Identifier	position
>35864	Identifier	li
>35865	Condition	 
>35866	Identifier	li
>35867	IfStatement	if ( avatar -> position . isZero ( ) || avatar -> position == Vector ( 1 , 1 ) )
>35868	CompoundStatement	 
>35869	IfStatement	if ( ( p = getPathByName ( \"NAIJASTART\" ) ) != 0 || ( p = getPathByName ( \"NAIJASTART L\" ) ) != 0 )
>35870	ElseStatement	else
>35871	IfStatement	if ( ( p = getPathByName ( \"NAIJASTART R\" ) ) != 0 )
>35872	CompoundStatement	 
>35873	ExpressionStatement	 
>35874	CallExpression	avatar -> flipHorizontal ( )
>35875	ArgumentList	 
>35876	Callee	avatar -> flipHorizontal
>35877	PtrMemberAccess	avatar -> flipHorizontal
>35878	Identifier	flipHorizontal
>35879	Identifier	avatar
>35880	ExpressionStatement	 
>35881	AssignmentExpr	avatar -> position = p -> nodes [ 0 ] . position
>35882	MemberAccess	p -> nodes [ 0 ] . position
>35883	Identifier	position
>35884	ArrayIndexing	p -> nodes [ 0 ]
>35885	PrimaryExpression	0
>35886	PtrMemberAccess	p -> nodes
>35887	Identifier	nodes
>35888	Identifier	p
>35889	PtrMemberAccess	avatar -> position
>35890	Identifier	position
>35891	Identifier	avatar
>35892	Condition	 
>35893	EqualityExpression	( p = getPathByName ( \"NAIJASTART R\" ) ) != 0
>35894	PrimaryExpression	0
>35895	AssignmentExpr	p = getPathByName ( \"NAIJASTART R\" )
>35896	CallExpression	getPathByName ( \"NAIJASTART R\" )
>35897	ArgumentList	\"NAIJASTART R\"
>35898	Argument	\"NAIJASTART R\"
>35899	PrimaryExpression	\"NAIJASTART R\"
>35900	Callee	getPathByName
>35901	Identifier	getPathByName
>35902	Identifier	p
>35903	CompoundStatement	 
>35904	ExpressionStatement	 
>35905	AssignmentExpr	avatar -> position = p -> nodes [ 0 ] . position
>35906	MemberAccess	p -> nodes [ 0 ] . position
>35907	Identifier	position
>35908	ArrayIndexing	p -> nodes [ 0 ]
>35909	PrimaryExpression	0
>35910	PtrMemberAccess	p -> nodes
>35911	Identifier	nodes
>35912	Identifier	p
>35913	PtrMemberAccess	avatar -> position
>35914	Identifier	position
>35915	Identifier	avatar
>35916	Condition	 
>35917	OrExpression	( p = getPathByName ( \"NAIJASTART\" ) ) != 0 || ( p = getPathByName ( \"NAIJASTART L\" ) ) != 0
>35918	EqualityExpression	( p = getPathByName ( \"NAIJASTART L\" ) ) != 0
>35919	PrimaryExpression	0
>35920	AssignmentExpr	p = getPathByName ( \"NAIJASTART L\" )
>35921	CallExpression	getPathByName ( \"NAIJASTART L\" )
>35922	ArgumentList	\"NAIJASTART L\"
>35923	Argument	\"NAIJASTART L\"
>35924	PrimaryExpression	\"NAIJASTART L\"
>35925	Callee	getPathByName
>35926	Identifier	getPathByName
>35927	Identifier	p
>35928	EqualityExpression	( p = getPathByName ( \"NAIJASTART\" ) ) != 0
>35929	PrimaryExpression	0
>35930	AssignmentExpr	p = getPathByName ( \"NAIJASTART\" )
>35931	CallExpression	getPathByName ( \"NAIJASTART\" )
>35932	ArgumentList	\"NAIJASTART\"
>35933	Argument	\"NAIJASTART\"
>35934	PrimaryExpression	\"NAIJASTART\"
>35935	Callee	getPathByName
>35936	Identifier	getPathByName
>35937	Identifier	p
>35938	IdentifierDeclStatement	 
>35939	IdentifierDecl	* p = 0
>35940	AssignmentExpr	* p = 0
>35941	PrimaryExpression	0
>35942	Identifier	p
>35943	Identifier	p
>35944	IdentifierDeclType	Path *
>35945	Condition	 
>35946	OrExpression	avatar -> position . isZero ( ) || avatar -> position == Vector ( 1 , 1 )
>35947	EqualityExpression	avatar -> position == Vector ( 1 , 1 )
>35948	CallExpression	Vector ( 1 , 1 )
>35949	ArgumentList	1
>35950	Argument	1
>35951	PrimaryExpression	1
>35952	Argument	1
>35953	PrimaryExpression	1
>35954	Callee	Vector
>35955	Identifier	Vector
>35956	PtrMemberAccess	avatar -> position
>35957	Identifier	position
>35958	Identifier	avatar
>35959	CallExpression	avatar -> position . isZero ( )
>35960	ArgumentList	 
>35961	Callee	avatar -> position . isZero
>35962	MemberAccess	avatar -> position . isZero
>35963	Identifier	isZero
>35964	PtrMemberAccess	avatar -> position
>35965	Identifier	position
>35966	Identifier	avatar
>35967	IfStatement	if ( ! avatar -> isUnderWater ( ) )
>35968	CompoundStatement	 
>35969	ExpressionStatement	 
>35970	AssignmentExpr	avatar -> currentMaxSpeed = dsq -> v . maxOutOfWaterSpeed
>35971	MemberAccess	dsq -> v . maxOutOfWaterSpeed
>35972	Identifier	maxOutOfWaterSpeed
>35973	PtrMemberAccess	dsq -> v
>35974	Identifier	v
>35975	Identifier	dsq
>35976	PtrMemberAccess	avatar -> currentMaxSpeed
>35977	Identifier	currentMaxSpeed
>35978	Identifier	avatar
>35979	ExpressionStatement	 
>35980	CallExpression	avatar -> setMaxSpeed ( dsq -> v . maxOutOfWaterSpeed )
>35981	ArgumentList	dsq -> v . maxOutOfWaterSpeed
>35982	Argument	dsq -> v . maxOutOfWaterSpeed
>35983	MemberAccess	dsq -> v . maxOutOfWaterSpeed
>35984	Identifier	maxOutOfWaterSpeed
>35985	PtrMemberAccess	dsq -> v
>35986	Identifier	v
>35987	Identifier	dsq
>35988	Callee	avatar -> setMaxSpeed
>35989	PtrMemberAccess	avatar -> setMaxSpeed
>35990	Identifier	setMaxSpeed
>35991	Identifier	avatar
>35992	Condition	 
>35993	UnaryOp	! avatar -> isUnderWater ( )
>35994	CallExpression	avatar -> isUnderWater ( )
>35995	ArgumentList	 
>35996	Callee	avatar -> isUnderWater
>35997	PtrMemberAccess	avatar -> isUnderWater
>35998	Identifier	isUnderWater
>35999	Identifier	avatar
>36000	UnaryOperator	!
>36001	ExpressionStatement	 
>36002	CallExpression	avatar -> setWasUnderWater ( )
>36003	ArgumentList	 
>36004	Callee	avatar -> setWasUnderWater
>36005	PtrMemberAccess	avatar -> setWasUnderWater
>36006	Identifier	setWasUnderWater
>36007	Identifier	avatar
>36008	IfStatement	if ( ! fromScene . empty ( ) )
>36009	ElseStatement	else
>36010	IfStatement	if ( ! toNode . empty ( ) )
>36011	CompoundStatement	 
>36012	ExpressionStatement	 
>36013	AssignmentExpr	toNode = \"\"
>36014	PrimaryExpression	\"\"
>36015	Identifier	toNode
>36016	IfStatement	if ( p )
>36017	CompoundStatement	 
>36018	ExpressionStatement	 
>36019	AssignmentExpr	avatar -> position = p -> nodes [ 0 ] . position
>36020	MemberAccess	p -> nodes [ 0 ] . position
>36021	Identifier	position
>36022	ArrayIndexing	p -> nodes [ 0 ]
>36023	PrimaryExpression	0
>36024	PtrMemberAccess	p -> nodes
>36025	Identifier	nodes
>36026	Identifier	p
>36027	PtrMemberAccess	avatar -> position
>36028	Identifier	position
>36029	Identifier	avatar
>36030	Condition	 
>36031	Identifier	p
>36032	IdentifierDeclStatement	 
>36033	IdentifierDecl	* p = dsq -> game -> getPathByName ( toNode )
>36034	AssignmentExpr	* p = dsq -> game -> getPathByName ( toNode )
>36035	CallExpression	dsq -> game -> getPathByName ( toNode )
>36036	ArgumentList	toNode
>36037	Argument	toNode
>36038	Identifier	toNode
>36039	Callee	dsq -> game -> getPathByName
>36040	PtrMemberAccess	dsq -> game -> getPathByName
>36041	Identifier	getPathByName
>36042	PtrMemberAccess	dsq -> game
>36043	Identifier	game
>36044	Identifier	dsq
>36045	Identifier	p
>36046	Identifier	p
>36047	IdentifierDeclType	Path *
>36048	Condition	 
>36049	UnaryOp	! toNode . empty ( )
>36050	CallExpression	toNode . empty ( )
>36051	ArgumentList	 
>36052	Callee	toNode . empty
>36053	MemberAccess	toNode . empty
>36054	Identifier	empty
>36055	Identifier	toNode
>36056	UnaryOperator	!
>36057	CompoundStatement	 
>36058	ExpressionStatement	 
>36059	AssignmentExpr	fromScene = \"\"
>36060	PrimaryExpression	\"\"
>36061	Identifier	fromScene
>36062	IfStatement	if ( closest )
>36063	ElseStatement	else
>36064	CompoundStatement	 
>36065	ExpressionStatement	 
>36066	CallExpression	debugLog ( \"ERROR
>36067	ArgumentList	\"ERROR
>36068	Argument	\"ERROR
>36069	PrimaryExpression	\"ERROR
>36070	Callee	debugLog
>36071	Identifier	debugLog
>36072	CompoundStatement	 
>36073	IfStatement	if ( doFlip )
>36074	ExpressionStatement	 
>36075	CallExpression	avatar -> flipHorizontal ( )
>36076	ArgumentList	 
>36077	Callee	avatar -> flipHorizontal
>36078	PtrMemberAccess	avatar -> flipHorizontal
>36079	Identifier	flipHorizontal
>36080	Identifier	avatar
>36081	Condition	 
>36082	Identifier	doFlip
>36083	ExpressionStatement	 
>36084	AssignmentExpr	avatar -> position = closest -> getEnterPosition ( 50 )
>36085	CallExpression	closest -> getEnterPosition ( 50 )
>36086	ArgumentList	50
>36087	Argument	50
>36088	PrimaryExpression	50
>36089	Callee	closest -> getEnterPosition
>36090	PtrMemberAccess	closest -> getEnterPosition
>36091	Identifier	getEnterPosition
>36092	Identifier	closest
>36093	PtrMemberAccess	avatar -> position
>36094	Identifier	position
>36095	Identifier	avatar
>36096	ExpressionStatement	 
>36097	CallExpression	debugLog ( \"warping avatar to node
>36098	ArgumentList	\"warping avatar to node
>36099	Argument	\"warping avatar to node
>36100	AdditiveExpression	\"warping avatar to node
>36101	PtrMemberAccess	closest -> name
>36102	Identifier	name
>36103	Identifier	closest
>36104	PrimaryExpression	\"warping avatar to node
>36105	Callee	debugLog
>36106	Identifier	debugLog
>36107	Condition	 
>36108	Identifier	closest
>36109	ForStatement	for ( int i = 0 ; i < dsq -> game -> getNumPaths ( ) ; i ++ )
>36110	CompoundStatement	 
>36111	IfStatement	if ( p && ( nocasecmp ( p -> warpMap , fromScene ) == 0 ) )
>36112	CompoundStatement	 
>36113	IfStatement	if ( go )
>36114	CompoundStatement	 
>36115	IfStatement	if ( dist == - 1 )
>36116	ElseStatement	else
>36117	IfStatement	if ( dist < smallestDist )
>36118	CompoundStatement	 
>36119	ExpressionStatement	 
>36120	AssignmentExpr	closestPushOut = pushOut
>36121	Identifier	pushOut
>36122	Identifier	closestPushOut
>36123	ExpressionStatement	 
>36124	AssignmentExpr	closest = p
>36125	Identifier	p
>36126	Identifier	closest
>36127	ExpressionStatement	 
>36128	AssignmentExpr	smallestDist = dist
>36129	Identifier	dist
>36130	Identifier	smallestDist
>36131	Condition	 
>36132	RelationalExpression	dist < smallestDist
>36133	Identifier	smallestDist
>36134	Identifier	dist
>36135	CompoundStatement	 
>36136	ExpressionStatement	 
>36137	CallExpression	debugLog ( p -> warpMap + \"
>36138	ArgumentList	p -> warpMap + \"
>36139	Argument	p -> warpMap + \"
>36140	AdditiveExpression	p -> warpMap + \"
>36141	PrimaryExpression	\"
>36142	PtrMemberAccess	p -> warpMap
>36143	Identifier	warpMap
>36144	Identifier	p
>36145	Callee	debugLog
>36146	Identifier	debugLog
>36147	Condition	 
>36148	EqualityExpression	dist == - 1
>36149	UnaryOp	- 1
>36150	PrimaryExpression	1
>36151	UnaryOperator	-
>36152	Identifier	dist
>36153	Condition	 
>36154	Identifier	go
>36155	SwitchStatement	switch ( fromWarpType )
>36156	CompoundStatement	 
>36157	BreakStatement	 
>36158	ExpressionStatement	 
>36159	AssignmentExpr	dist = fabsf ( fromPosition . x - pos . x )
>36160	CallExpression	fabsf ( fromPosition . x - pos . x )
>36161	ArgumentList	fromPosition . x - pos . x
>36162	Argument	fromPosition . x - pos . x
>36163	AdditiveExpression	fromPosition . x - pos . x
>36164	MemberAccess	pos . x
>36165	Identifier	x
>36166	Identifier	pos
>36167	MemberAccess	fromPosition . x
>36168	Identifier	x
>36169	Identifier	fromPosition
>36170	Callee	fabsf
>36171	Identifier	fabsf
>36172	Identifier	dist
>36173	ExpressionStatement	 
>36174	AssignmentExpr	pushOut = Vector ( 0 , 1 )
>36175	CallExpression	Vector ( 0 , 1 )
>36176	ArgumentList	0
>36177	Argument	1
>36178	PrimaryExpression	1
>36179	Argument	0
>36180	PrimaryExpression	0
>36181	Callee	Vector
>36182	Identifier	Vector
>36183	Identifier	pushOut
>36184	ExpressionStatement	 
>36185	AssignmentExpr	go = ( p -> warpType == CHAR_UP )
>36186	EqualityExpression	p -> warpType == CHAR_UP
>36187	Identifier	CHAR_UP
>36188	PtrMemberAccess	p -> warpType
>36189	Identifier	warpType
>36190	Identifier	p
>36191	Identifier	go
>36192	Label	 
>36193	Identifier	CHAR_DOWN
>36194	BreakStatement	 
>36195	ExpressionStatement	 
>36196	AssignmentExpr	dist = fabsf ( fromPosition . x - pos . x )
>36197	CallExpression	fabsf ( fromPosition . x - pos . x )
>36198	ArgumentList	fromPosition . x - pos . x
>36199	Argument	fromPosition . x - pos . x
>36200	AdditiveExpression	fromPosition . x - pos . x
>36201	MemberAccess	pos . x
>36202	Identifier	x
>36203	Identifier	pos
>36204	MemberAccess	fromPosition . x
>36205	Identifier	x
>36206	Identifier	fromPosition
>36207	Callee	fabsf
>36208	Identifier	fabsf
>36209	Identifier	dist
>36210	ExpressionStatement	 
>36211	AssignmentExpr	pushOut = Vector ( 0 , - 1 )
>36212	CallExpression	Vector ( 0 , - 1 )
>36213	ArgumentList	0
>36214	Argument	- 1
>36215	UnaryOp	- 1
>36216	PrimaryExpression	1
>36217	UnaryOperator	-
>36218	Argument	0
>36219	PrimaryExpression	0
>36220	Callee	Vector
>36221	Identifier	Vector
>36222	Identifier	pushOut
>36223	ExpressionStatement	 
>36224	AssignmentExpr	go = ( p -> warpType == CHAR_DOWN )
>36225	EqualityExpression	p -> warpType == CHAR_DOWN
>36226	Identifier	CHAR_DOWN
>36227	PtrMemberAccess	p -> warpType
>36228	Identifier	warpType
>36229	Identifier	p
>36230	Identifier	go
>36231	Label	 
>36232	Identifier	CHAR_UP
>36233	BreakStatement	 
>36234	ExpressionStatement	 
>36235	AssignmentExpr	dist = fabsf ( fromPosition . y - pos . y )
>36236	CallExpression	fabsf ( fromPosition . y - pos . y )
>36237	ArgumentList	fromPosition . y - pos . y
>36238	Argument	fromPosition . y - pos . y
>36239	AdditiveExpression	fromPosition . y - pos . y
>36240	MemberAccess	pos . y
>36241	Identifier	y
>36242	Identifier	pos
>36243	MemberAccess	fromPosition . y
>36244	Identifier	y
>36245	Identifier	fromPosition
>36246	Callee	fabsf
>36247	Identifier	fabsf
>36248	Identifier	dist
>36249	ExpressionStatement	 
>36250	AssignmentExpr	pushOut = Vector ( - 1 , 0 )
>36251	CallExpression	Vector ( - 1 , 0 )
>36252	ArgumentList	- 1
>36253	Argument	0
>36254	PrimaryExpression	0
>36255	Argument	- 1
>36256	UnaryOp	- 1
>36257	PrimaryExpression	1
>36258	UnaryOperator	-
>36259	Callee	Vector
>36260	Identifier	Vector
>36261	Identifier	pushOut
>36262	ExpressionStatement	 
>36263	AssignmentExpr	go = ( p -> warpType == CHAR_RIGHT )
>36264	EqualityExpression	p -> warpType == CHAR_RIGHT
>36265	Identifier	CHAR_RIGHT
>36266	PtrMemberAccess	p -> warpType
>36267	Identifier	warpType
>36268	Identifier	p
>36269	Identifier	go
>36270	Label	 
>36271	Identifier	CHAR_LEFT
>36272	BreakStatement	 
>36273	ExpressionStatement	 
>36274	AssignmentExpr	doFlip = true
>36275	Identifier	true
>36276	Identifier	doFlip
>36277	ExpressionStatement	 
>36278	AssignmentExpr	dist = fabsf ( fromPosition . y - pos . y )
>36279	CallExpression	fabsf ( fromPosition . y - pos . y )
>36280	ArgumentList	fromPosition . y - pos . y
>36281	Argument	fromPosition . y - pos . y
>36282	AdditiveExpression	fromPosition . y - pos . y
>36283	MemberAccess	pos . y
>36284	Identifier	y
>36285	Identifier	pos
>36286	MemberAccess	fromPosition . y
>36287	Identifier	y
>36288	Identifier	fromPosition
>36289	Callee	fabsf
>36290	Identifier	fabsf
>36291	Identifier	dist
>36292	ExpressionStatement	 
>36293	AssignmentExpr	pushOut = Vector ( 1 , 0 )
>36294	CallExpression	Vector ( 1 , 0 )
>36295	ArgumentList	1
>36296	Argument	0
>36297	PrimaryExpression	0
>36298	Argument	1
>36299	PrimaryExpression	1
>36300	Callee	Vector
>36301	Identifier	Vector
>36302	Identifier	pushOut
>36303	ExpressionStatement	 
>36304	AssignmentExpr	go = ( p -> warpType == CHAR_LEFT )
>36305	EqualityExpression	p -> warpType == CHAR_LEFT
>36306	Identifier	CHAR_LEFT
>36307	PtrMemberAccess	p -> warpType
>36308	Identifier	warpType
>36309	Identifier	p
>36310	Identifier	go
>36311	Label	 
>36312	Identifier	CHAR_RIGHT
>36313	Condition	 
>36314	Identifier	fromWarpType
>36315	IdentifierDeclStatement	 
>36316	IdentifierDecl	pushOut
>36317	Identifier	pushOut
>36318	IdentifierDeclType	Vector
>36319	IdentifierDeclStatement	 
>36320	IdentifierDecl	go = false
>36321	AssignmentExpr	go = false
>36322	Identifier	false
>36323	Identifier	false
>36324	Identifier	go
>36325	IdentifierDeclType	bool
>36326	IdentifierDeclStatement	 
>36327	IdentifierDecl	dist = - 1
>36328	AssignmentExpr	dist = - 1
>36329	UnaryOp	- 1
>36330	PrimaryExpression	1
>36331	UnaryOperator	-
>36332	Identifier	dist
>36333	Identifier	dist
>36334	IdentifierDeclType	float
>36335	Condition	 
>36336	AndExpression	p && ( nocasecmp ( p -> warpMap , fromScene ) == 0 )
>36337	EqualityExpression	nocasecmp ( p -> warpMap , fromScene ) == 0
>36338	PrimaryExpression	0
>36339	CallExpression	nocasecmp ( p -> warpMap , fromScene )
>36340	ArgumentList	p -> warpMap
>36341	Argument	fromScene
>36342	Identifier	fromScene
>36343	Argument	p -> warpMap
>36344	PtrMemberAccess	p -> warpMap
>36345	Identifier	warpMap
>36346	Identifier	p
>36347	Callee	nocasecmp
>36348	Identifier	nocasecmp
>36349	Identifier	p
>36350	IdentifierDeclStatement	 
>36351	IdentifierDecl	pos = p -> nodes [ 0 ] . position
>36352	AssignmentExpr	pos = p -> nodes [ 0 ] . position
>36353	MemberAccess	p -> nodes [ 0 ] . position
>36354	Identifier	position
>36355	ArrayIndexing	p -> nodes [ 0 ]
>36356	PrimaryExpression	0
>36357	PtrMemberAccess	p -> nodes
>36358	Identifier	nodes
>36359	Identifier	p
>36360	Identifier	pos
>36361	Identifier	pos
>36362	IdentifierDeclType	Vector
>36363	IdentifierDeclStatement	 
>36364	IdentifierDecl	* p = dsq -> game -> getPath ( i )
>36365	AssignmentExpr	* p = dsq -> game -> getPath ( i )
>36366	CallExpression	dsq -> game -> getPath ( i )
>36367	ArgumentList	i
>36368	Argument	i
>36369	Identifier	i
>36370	Callee	dsq -> game -> getPath
>36371	PtrMemberAccess	dsq -> game -> getPath
>36372	Identifier	getPath
>36373	PtrMemberAccess	dsq -> game
>36374	Identifier	game
>36375	Identifier	dsq
>36376	Identifier	p
>36377	Identifier	p
>36378	IdentifierDeclType	Path *
>36379	IncDecOp	 
>36380	IncDec	++
>36381	Identifier	i
>36382	Condition	 
>36383	RelationalExpression	i < dsq -> game -> getNumPaths ( )
>36384	CallExpression	dsq -> game -> getNumPaths ( )
>36385	ArgumentList	 
>36386	Callee	dsq -> game -> getNumPaths
>36387	PtrMemberAccess	dsq -> game -> getNumPaths
>36388	Identifier	getNumPaths
>36389	PtrMemberAccess	dsq -> game
>36390	Identifier	game
>36391	Identifier	dsq
>36392	Identifier	i
>36393	ForInit	 
>36394	IdentifierDeclStatement	int i = 0 ;
>36395	IdentifierDecl	i = 0
>36396	AssignmentExpr	i = 0
>36397	PrimaryExpression	0
>36398	Identifier	i
>36399	Identifier	i
>36400	IdentifierDeclType	int
>36401	IdentifierDeclStatement	 
>36402	IdentifierDecl	doFlip = false
>36403	AssignmentExpr	doFlip = false
>36404	Identifier	false
>36405	Identifier	false
>36406	Identifier	doFlip
>36407	IdentifierDeclType	bool
>36408	IdentifierDeclStatement	 
>36409	IdentifierDecl	closestPushOut
>36410	Identifier	closestPushOut
>36411	IdentifierDeclType	Vector
>36412	IdentifierDeclStatement	 
>36413	IdentifierDecl	* closest = 0
>36414	AssignmentExpr	* closest = 0
>36415	PrimaryExpression	0
>36416	Identifier	closest
>36417	Identifier	closest
>36418	IdentifierDeclType	Path *
>36419	IdentifierDeclStatement	 
>36420	IdentifierDecl	smallestDist = HUGE_VALF
>36421	AssignmentExpr	smallestDist = HUGE_VALF
>36422	Identifier	HUGE_VALF
>36423	Identifier	HUGE_VALF
>36424	Identifier	smallestDist
>36425	IdentifierDeclType	float
>36426	ExpressionStatement	 
>36427	CallExpression	debugLog ( \"fromScene
>36428	ArgumentList	\"fromScene
>36429	Argument	\"fromScene
>36430	AdditiveExpression	\"fromScene
>36431	AdditiveExpression	fromScene + \" fromWarpType
>36432	AdditiveExpression	\" fromWarpType
>36433	Identifier	fromWarpType
>36434	PrimaryExpression	\" fromWarpType
>36435	Identifier	fromScene
>36436	PrimaryExpression	\"fromScene
>36437	Callee	debugLog
>36438	Identifier	debugLog
>36439	ExpressionStatement	 
>36440	CallExpression	stringToLower ( fromScene )
>36441	ArgumentList	fromScene
>36442	Argument	fromScene
>36443	Identifier	fromScene
>36444	Callee	stringToLower
>36445	Identifier	stringToLower
>36446	Condition	 
>36447	UnaryOp	! fromScene . empty ( )
>36448	CallExpression	fromScene . empty ( )
>36449	ArgumentList	 
>36450	Callee	fromScene . empty
>36451	MemberAccess	fromScene . empty
>36452	Identifier	empty
>36453	Identifier	fromScene
>36454	UnaryOperator	!
>36455	ExpressionStatement	 
>36456	AssignmentExpr	sceneToLoad = \"\"
>36457	PrimaryExpression	\"\"
>36458	Identifier	sceneToLoad
>36459	ExpressionStatement	 
>36460	CallExpression	addRenderObject ( worldMapRender , LR_WORLDMAP )
>36461	ArgumentList	worldMapRender
>36462	Argument	LR_WORLDMAP
>36463	Identifier	LR_WORLDMAP
>36464	Argument	worldMapRender
>36465	Identifier	worldMapRender
>36466	Callee	addRenderObject
>36467	Identifier	addRenderObject
>36468	ExpressionStatement	 
>36469	Identifier	WorldMapRender
>36470	Statement	 
>36471	Statement	 
>36472	Statement	 
>36473	IfStatement	if ( dsq -> mod . isActive ( ) && dsq -> mod . mapRevealMethod != REVEAL_UNSPECIFIED )
>36474	ElseStatement	else
>36475	ExpressionStatement	 
>36476	CallExpression	WorldMapRender 
>36477	ArgumentList	( WorldMapRevealMethod ) dsq -> user . video . worldMapRevealMethod
>36478	Argument	( WorldMapRevealMethod ) dsq -> user . video . worldMapRevealMethod
>36479	CastExpression	( WorldMapRevealMethod ) dsq -> user . video . worldMapRevealMethod
>36480	MemberAccess	dsq -> user . video . worldMapRevealMethod
>36481	Identifier	worldMapRevealMethod
>36482	MemberAccess	dsq -> user . video
>36483	Identifier	video
>36484	PtrMemberAccess	dsq -> user
>36485	Identifier	user
>36486	Identifier	dsq
>36487	CastTarget	WorldMapRevealMethod
>36488	Callee	WorldMapRender 
>36489	Identifier	WorldMapRender 
>36490	ExpressionStatement	 
>36491	CallExpression	WorldMapRender 
>36492	ArgumentList	dsq -> mod . mapRevealMethod
>36493	Argument	dsq -> mod . mapRevealMethod
>36494	MemberAccess	dsq -> mod . mapRevealMethod
>36495	Identifier	mapRevealMethod
>36496	PtrMemberAccess	dsq -> mod
>36497	Identifier	mod
>36498	Identifier	dsq
>36499	Callee	WorldMapRender 
>36500	Identifier	WorldMapRender 
>36501	Condition	 
>36502	AndExpression	dsq -> mod . isActive ( ) && dsq -> mod . mapRevealMethod != REVEAL_UNSPECIFIED
>36503	EqualityExpression	dsq -> mod . mapRevealMethod != REVEAL_UNSPECIFIED
>36504	Identifier	REVEAL_UNSPECIFIED
>36505	MemberAccess	dsq -> mod . mapRevealMethod
>36506	Identifier	mapRevealMethod
>36507	PtrMemberAccess	dsq -> mod
>36508	Identifier	mod
>36509	Identifier	dsq
>36510	CallExpression	dsq -> mod . isActive ( )
>36511	ArgumentList	 
>36512	Callee	dsq -> mod . isActive
>36513	MemberAccess	dsq -> mod . isActive
>36514	Identifier	isActive
>36515	PtrMemberAccess	dsq -> mod
>36516	Identifier	mod
>36517	Identifier	dsq
>36518	ExpressionStatement	 
>36519	AssignmentExpr	worldMapRender = 0
>36520	PrimaryExpression	0
>36521	Identifier	worldMapRender
>36522	ExpressionStatement	 
>36523	CallExpression	addRenderObject ( timerText , LR_MINIMAP )
>36524	ArgumentList	timerText
>36525	Argument	LR_MINIMAP
>36526	Identifier	LR_MINIMAP
>36527	Argument	timerText
>36528	Identifier	timerText
>36529	Callee	addRenderObject
>36530	Identifier	addRenderObject
>36531	ExpressionStatement	 
>36532	AssignmentExpr	timerText -> followCamera = 1
>36533	PrimaryExpression	1
>36534	PtrMemberAccess	timerText -> followCamera
>36535	Identifier	followCamera
>36536	Identifier	timerText
>36537	ExpressionStatement	 
>36538	AssignmentExpr	timerText -> alpha = 0
>36539	PrimaryExpression	0
>36540	PtrMemberAccess	timerText -> alpha
>36541	Identifier	alpha
>36542	Identifier	timerText
>36543	ExpressionStatement	 
>36544	AssignmentExpr	timerText -> position = Vector ( 745 , 550 )
>36545	CallExpression	Vector ( 745 , 550 )
>36546	ArgumentList	745
>36547	Argument	550
>36548	PrimaryExpression	550
>36549	Argument	745
>36550	PrimaryExpression	745
>36551	Callee	Vector
>36552	Identifier	Vector
>36553	PtrMemberAccess	timerText -> position
>36554	Identifier	position
>36555	Identifier	timerText
>36556	ExpressionStatement	 
>36557	AssignmentExpr	timerText = new BitmapText ( & dsq -> smallFont )
>36558	UnaryOp	& dsq -> smallFont
>36559	PtrMemberAccess	dsq -> smallFont
>36560	Identifier	smallFont
>36561	Identifier	dsq
>36562	UnaryOperator	&
>36563	Identifier	timerText
>36564	ExpressionStatement	 
>36565	CallExpression	addRenderObject ( miniMapRender , LR_MINIMAP )
>36566	ArgumentList	miniMapRender
>36567	Argument	LR_MINIMAP
>36568	Identifier	LR_MINIMAP
>36569	Argument	miniMapRender
>36570	Identifier	miniMapRender
>36571	Callee	addRenderObject
>36572	Identifier	addRenderObject
>36573	ExpressionStatement	 
>36574	AssignmentExpr	miniMapRender -> scale = Vector ( 0.55 , 0.55 )
>36575	CallExpression	Vector ( 0.55 , 0.55 )
>36576	ArgumentList	0.55
>36577	Argument	0.55
>36578	PrimaryExpression	0.55
>36579	Argument	0.55
>36580	PrimaryExpression	0.55
>36581	Callee	Vector
>36582	Identifier	Vector
>36583	PtrMemberAccess	miniMapRender -> scale
>36584	Identifier	scale
>36585	Identifier	miniMapRender
>36586	ExpressionStatement	 
>36587	Identifier	MiniMapRender
>36588	Statement	 
>36589	Statement	 
>36590	Statement	 
>36591	ExpressionStatement	 
>36592	AssignmentExpr	miniMapRender = 0
>36593	PrimaryExpression	0
>36594	Identifier	miniMapRender
>36595	ExpressionStatement	 
>36596	AssignmentExpr	autoMap = 0
>36597	PrimaryExpression	0
>36598	Identifier	autoMap
>36599	ExpressionStatement	 
>36600	CallExpression	addRenderObject ( hudUnderlay , LR_HUDUNDERLAY )
>36601	ArgumentList	hudUnderlay
>36602	Argument	LR_HUDUNDERLAY
>36603	Identifier	LR_HUDUNDERLAY
>36604	Argument	hudUnderlay
>36605	Identifier	hudUnderlay
>36606	Callee	addRenderObject
>36607	Identifier	addRenderObject
>36608	ExpressionStatement	 
>36609	AssignmentExpr	hudUnderlay -> followCamera = 1
>36610	PrimaryExpression	1
>36611	PtrMemberAccess	hudUnderlay -> followCamera
>36612	Identifier	followCamera
>36613	Identifier	hudUnderlay
>36614	ExpressionStatement	 
>36615	AssignmentExpr	hudUnderlay -> alpha = 0
>36616	PrimaryExpression	0
>36617	PtrMemberAccess	hudUnderlay -> alpha
>36618	Identifier	alpha
>36619	Identifier	hudUnderlay
>36620	ExpressionStatement	 
>36621	AssignmentExpr	hudUnderlay -> autoHeight = AUTO_VIRTUALHEIGHT
>36622	Identifier	AUTO_VIRTUALHEIGHT
>36623	PtrMemberAccess	hudUnderlay -> autoHeight
>36624	Identifier	autoHeight
>36625	Identifier	hudUnderlay
>36626	ExpressionStatement	 
>36627	AssignmentExpr	hudUnderlay -> autoWidth = AUTO_VIRTUALWIDTH
>36628	Identifier	AUTO_VIRTUALWIDTH
>36629	PtrMemberAccess	hudUnderlay -> autoWidth
>36630	Identifier	autoWidth
>36631	Identifier	hudUnderlay
>36632	ExpressionStatement	 
>36633	AssignmentExpr	hudUnderlay -> position = Vector ( 400 , 300 )
>36634	CallExpression	Vector ( 400 , 300 )
>36635	ArgumentList	400
>36636	Argument	300
>36637	PrimaryExpression	300
>36638	Argument	400
>36639	PrimaryExpression	400
>36640	Callee	Vector
>36641	Identifier	Vector
>36642	PtrMemberAccess	hudUnderlay -> position
>36643	Identifier	position
>36644	Identifier	hudUnderlay
>36645	ExpressionStatement	 
>36646	AssignmentExpr	hudUnderlay -> color = 0
>36647	PrimaryExpression	0
>36648	PtrMemberAccess	hudUnderlay -> color
>36649	Identifier	color
>36650	Identifier	hudUnderlay
>36651	ExpressionStatement	 
>36652	Identifier	Quad
>36653	Statement	 
>36654	Statement	 
>36655	Statement	 
>36656	ExpressionStatement	 
>36657	CallExpression	addRenderObject ( blackRender , LR_ELEMENTS4 )
>36658	ArgumentList	blackRender
>36659	Argument	LR_ELEMENTS4
>36660	Identifier	LR_ELEMENTS4
>36661	Argument	blackRender
>36662	Identifier	blackRender
>36663	Callee	addRenderObject
>36664	Identifier	addRenderObject
>36665	ExpressionStatement	 
>36666	AssignmentExpr	blackRender -> blendEnabled = false
>36667	Identifier	false
>36668	PtrMemberAccess	blackRender -> blendEnabled
>36669	Identifier	blendEnabled
>36670	Identifier	blackRender
>36671	ExpressionStatement	 
>36672	AssignmentExpr	blackRender -> color = Vector ( 0 , 0 , 0 )
>36673	CallExpression	Vector ( 0 , 0 , 0 )
>36674	ArgumentList	0
>36675	Argument	0
>36676	PrimaryExpression	0
>36677	Argument	0
>36678	PrimaryExpression	0
>36679	Argument	0
>36680	PrimaryExpression	0
>36681	Callee	Vector
>36682	Identifier	Vector
>36683	PtrMemberAccess	blackRender -> color
>36684	Identifier	color
>36685	Identifier	blackRender
>36686	IdentifierDeclStatement	 
>36687	IdentifierDecl	* blackRender = new GridRender ( OT_BLACK )
>36688	AssignmentExpr	* blackRender = new GridRender ( OT_BLACK )
>36689	Identifier	OT_BLACK
>36690	Identifier	OT_BLACK
>36691	Identifier	blackRender
>36692	IdentifierDeclType	GridRender *
>36693	ExpressionStatement	 
>36694	CallExpression	addRenderObject ( waterSurfaceRender , LR_WATERSURFACE )
>36695	ArgumentList	waterSurfaceRender
>36696	Argument	LR_WATERSURFACE
>36697	Identifier	LR_WATERSURFACE
>36698	Argument	waterSurfaceRender
>36699	Identifier	waterSurfaceRender
>36700	Callee	addRenderObject
>36701	Identifier	addRenderObject
>36702	ExpressionStatement	 
>36703	AssignmentExpr	waterSurfaceRender = new WaterSurfaceRender ( )
>36704	UnaryExpression	new WaterSurfaceRender ( )
>36705	Identifier	waterSurfaceRender
>36706	ExpressionStatement	 
>36707	AssignmentExpr	gridRenderUser2 -> alpha = 0
>36708	PrimaryExpression	0
>36709	PtrMemberAccess	gridRenderUser2 -> alpha
>36710	Identifier	alpha
>36711	Identifier	gridRenderUser2
>36712	ExpressionStatement	 
>36713	AssignmentExpr	gridRenderUser2 -> color = Vector ( 1 , 1 , 1 )
>36714	CallExpression	Vector ( 1 , 1 , 1 )
>36715	ArgumentList	1
>36716	Argument	1
>36717	PrimaryExpression	1
>36718	Argument	1
>36719	PrimaryExpression	1
>36720	Argument	1
>36721	PrimaryExpression	1
>36722	Callee	Vector
>36723	Identifier	Vector
>36724	PtrMemberAccess	gridRenderUser2 -> color
>36725	Identifier	color
>36726	Identifier	gridRenderUser2
>36727	ExpressionStatement	 
>36728	CallExpression	addRenderObject ( gridRenderUser2 , LR_DEBUG_TEXT )
>36729	ArgumentList	gridRenderUser2
>36730	Argument	LR_DEBUG_TEXT
>36731	Identifier	LR_DEBUG_TEXT
>36732	Argument	gridRenderUser2
>36733	Identifier	gridRenderUser2
>36734	Callee	addRenderObject
>36735	Identifier	addRenderObject
>36736	ExpressionStatement	 
>36737	AssignmentExpr	gridRenderUser2 = new GridRender ( OT_USER2 )
>36738	Identifier	OT_USER2
>36739	Identifier	gridRenderUser2
>36740	ExpressionStatement	 
>36741	AssignmentExpr	gridRenderUser1 -> alpha = 0
>36742	PrimaryExpression	0
>36743	PtrMemberAccess	gridRenderUser1 -> alpha
>36744	Identifier	alpha
>36745	Identifier	gridRenderUser1
>36746	ExpressionStatement	 
>36747	AssignmentExpr	gridRenderUser1 -> color = Vector ( 1 , 0 , 1 )
>36748	CallExpression	Vector ( 1 , 0 , 1 )
>36749	ArgumentList	1
>36750	Argument	1
>36751	PrimaryExpression	1
>36752	Argument	0
>36753	PrimaryExpression	0
>36754	Argument	1
>36755	PrimaryExpression	1
>36756	Callee	Vector
>36757	Identifier	Vector
>36758	PtrMemberAccess	gridRenderUser1 -> color
>36759	Identifier	color
>36760	Identifier	gridRenderUser1
>36761	ExpressionStatement	 
>36762	CallExpression	addRenderObject ( gridRenderUser1 , LR_DEBUG_TEXT )
>36763	ArgumentList	gridRenderUser1
>36764	Argument	LR_DEBUG_TEXT
>36765	Identifier	LR_DEBUG_TEXT
>36766	Argument	gridRenderUser1
>36767	Identifier	gridRenderUser1
>36768	Callee	addRenderObject
>36769	Identifier	addRenderObject
>36770	ExpressionStatement	 
>36771	AssignmentExpr	gridRenderUser1 = new GridRender ( OT_USER1 )
>36772	Identifier	OT_USER1
>36773	Identifier	gridRenderUser1
>36774	ExpressionStatement	 
>36775	AssignmentExpr	gridRenderEnt -> alpha = 0
>36776	PrimaryExpression	0
>36777	PtrMemberAccess	gridRenderEnt -> alpha
>36778	Identifier	alpha
>36779	Identifier	gridRenderEnt
>36780	ExpressionStatement	 
>36781	CallExpression	addRenderObject ( gridRenderEnt , LR_DEBUG_TEXT )
>36782	ArgumentList	gridRenderEnt
>36783	Argument	LR_DEBUG_TEXT
>36784	Identifier	LR_DEBUG_TEXT
>36785	Argument	gridRenderEnt
>36786	Identifier	gridRenderEnt
>36787	Callee	addRenderObject
>36788	Identifier	addRenderObject
>36789	ExpressionStatement	 
>36790	AssignmentExpr	gridRenderEnt -> color = Vector ( 0 , 1 , 0.5 )
>36791	CallExpression	Vector ( 0 , 1 , 0.5 )
>36792	ArgumentList	0
>36793	Argument	0.5
>36794	PrimaryExpression	0.5
>36795	Argument	1
>36796	PrimaryExpression	1
>36797	Argument	0
>36798	PrimaryExpression	0
>36799	Callee	Vector
>36800	Identifier	Vector
>36801	PtrMemberAccess	gridRenderEnt -> color
>36802	Identifier	color
>36803	Identifier	gridRenderEnt
>36804	ExpressionStatement	 
>36805	AssignmentExpr	gridRenderEnt = new GridRender ( OT_INVISIBLEENT )
>36806	Identifier	OT_INVISIBLEENT
>36807	Identifier	gridRenderEnt
>36808	ExpressionStatement	 
>36809	AssignmentExpr	edgeRender -> alpha = 0
>36810	PrimaryExpression	0
>36811	PtrMemberAccess	edgeRender -> alpha
>36812	Identifier	alpha
>36813	Identifier	edgeRender
>36814	ExpressionStatement	 
>36815	CallExpression	addRenderObject ( edgeRender , LR_DEBUG_TEXT )
>36816	ArgumentList	edgeRender
>36817	Argument	LR_DEBUG_TEXT
>36818	Identifier	LR_DEBUG_TEXT
>36819	Argument	edgeRender
>36820	Identifier	edgeRender
>36821	Callee	addRenderObject
>36822	Identifier	addRenderObject
>36823	ExpressionStatement	 
>36824	AssignmentExpr	edgeRender -> color = Vector ( 0.3f , 0 , 0.6f )
>36825	CallExpression	Vector ( 0.3f , 0 , 0.6f )
>36826	ArgumentList	0.3f
>36827	Argument	0.6f
>36828	PrimaryExpression	0.6f
>36829	Argument	0
>36830	PrimaryExpression	0
>36831	Argument	0.3f
>36832	PrimaryExpression	0.3f
>36833	Callee	Vector
>36834	Identifier	Vector
>36835	PtrMemberAccess	edgeRender -> color
>36836	Identifier	color
>36837	Identifier	edgeRender
>36838	ExpressionStatement	 
>36839	AssignmentExpr	edgeRender = new GridRender ( OT_BLACKINVIS )
>36840	Identifier	OT_BLACKINVIS
>36841	Identifier	edgeRender
>36842	ExpressionStatement	 
>36843	AssignmentExpr	gridRender3 -> alpha = 0
>36844	PrimaryExpression	0
>36845	PtrMemberAccess	gridRender3 -> alpha
>36846	Identifier	alpha
>36847	Identifier	gridRender3
>36848	ExpressionStatement	 
>36849	CallExpression	addRenderObject ( gridRender3 , LR_DEBUG_TEXT )
>36850	ArgumentList	gridRender3
>36851	Argument	LR_DEBUG_TEXT
>36852	Identifier	LR_DEBUG_TEXT
>36853	Argument	gridRender3
>36854	Identifier	gridRender3
>36855	Callee	addRenderObject
>36856	Identifier	addRenderObject
>36857	ExpressionStatement	 
>36858	AssignmentExpr	gridRender3 -> color = Vector ( 1 , 0.5f , 0 )
>36859	CallExpression	Vector ( 1 , 0.5f , 0 )
>36860	ArgumentList	1
>36861	Argument	0
>36862	PrimaryExpression	0
>36863	Argument	0.5f
>36864	PrimaryExpression	0.5f
>36865	Argument	1
>36866	PrimaryExpression	1
>36867	Callee	Vector
>36868	Identifier	Vector
>36869	PtrMemberAccess	gridRender3 -> color
>36870	Identifier	color
>36871	Identifier	gridRender3
>36872	ExpressionStatement	 
>36873	AssignmentExpr	gridRender3 = new GridRender ( OT_INVISIBLEIN )
>36874	Identifier	OT_INVISIBLEIN
>36875	Identifier	gridRender3
>36876	ExpressionStatement	 
>36877	AssignmentExpr	gridRender2 -> alpha = 0
>36878	PrimaryExpression	0
>36879	PtrMemberAccess	gridRender2 -> alpha
>36880	Identifier	alpha
>36881	Identifier	gridRender2
>36882	ExpressionStatement	 
>36883	CallExpression	addRenderObject ( gridRender2 , LR_DEBUG_TEXT )
>36884	ArgumentList	gridRender2
>36885	Argument	LR_DEBUG_TEXT
>36886	Identifier	LR_DEBUG_TEXT
>36887	Argument	gridRender2
>36888	Identifier	gridRender2
>36889	Callee	addRenderObject
>36890	Identifier	addRenderObject
>36891	ExpressionStatement	 
>36892	AssignmentExpr	gridRender2 -> color = Vector ( 1 , 1 , 0 )
>36893	CallExpression	Vector ( 1 , 1 , 0 )
>36894	ArgumentList	1
>36895	Argument	0
>36896	PrimaryExpression	0
>36897	Argument	1
>36898	PrimaryExpression	1
>36899	Argument	1
>36900	PrimaryExpression	1
>36901	Callee	Vector
>36902	Identifier	Vector
>36903	PtrMemberAccess	gridRender2 -> color
>36904	Identifier	color
>36905	Identifier	gridRender2
>36906	ExpressionStatement	 
>36907	AssignmentExpr	gridRender2 = new GridRender ( OT_HURT )
>36908	Identifier	OT_HURT
>36909	Identifier	gridRender2
>36910	ExpressionStatement	 
>36911	AssignmentExpr	gridRender -> alpha = 0
>36912	PrimaryExpression	0
>36913	PtrMemberAccess	gridRender -> alpha
>36914	Identifier	alpha
>36915	Identifier	gridRender
>36916	ExpressionStatement	 
>36917	CallExpression	addRenderObject ( gridRender , LR_DEBUG_TEXT )
>36918	ArgumentList	gridRender
>36919	Argument	LR_DEBUG_TEXT
>36920	Identifier	LR_DEBUG_TEXT
>36921	Argument	gridRender
>36922	Identifier	gridRender
>36923	Callee	addRenderObject
>36924	Identifier	addRenderObject
>36925	ExpressionStatement	 
>36926	AssignmentExpr	gridRender -> color = Vector ( 1 , 0 , 0 )
>36927	CallExpression	Vector ( 1 , 0 , 0 )
>36928	ArgumentList	1
>36929	Argument	0
>36930	PrimaryExpression	0
>36931	Argument	0
>36932	PrimaryExpression	0
>36933	Argument	1
>36934	PrimaryExpression	1
>36935	Callee	Vector
>36936	Identifier	Vector
>36937	PtrMemberAccess	gridRender -> color
>36938	Identifier	color
>36939	Identifier	gridRender
>36940	ExpressionStatement	 
>36941	AssignmentExpr	gridRender = new GridRender ( OT_INVISIBLE )
>36942	Identifier	OT_INVISIBLE
>36943	Identifier	gridRender
>36944	ExpressionStatement	 
>36945	CallExpression	addRenderObject ( songLineRender , LR_HUD )
>36946	ArgumentList	songLineRender
>36947	Argument	LR_HUD
>36948	Identifier	LR_HUD
>36949	Argument	songLineRender
>36950	Identifier	songLineRender
>36951	Callee	addRenderObject
>36952	Identifier	addRenderObject
>36953	ExpressionStatement	 
>36954	AssignmentExpr	songLineRender = new SongLineRender ( )
>36955	UnaryExpression	new SongLineRender ( )
>36956	Identifier	songLineRender
>36957	ExpressionStatement	 
>36958	CallExpression	addRenderObject ( steamRender , LR_ELEMENTS9 )
>36959	ArgumentList	steamRender
>36960	Argument	LR_ELEMENTS9
>36961	Identifier	LR_ELEMENTS9
>36962	Argument	steamRender
>36963	Identifier	steamRender
>36964	Callee	addRenderObject
>36965	Identifier	addRenderObject
>36966	ExpressionStatement	 
>36967	AssignmentExpr	steamRender = new SteamRender ( )
>36968	UnaryExpression	new SteamRender ( )
>36969	Identifier	steamRender
>36970	ExpressionStatement	 
>36971	CallExpression	addRenderObject ( currentRender , LR_ELEMENTS3 )
>36972	ArgumentList	currentRender
>36973	Argument	LR_ELEMENTS3
>36974	Identifier	LR_ELEMENTS3
>36975	Argument	currentRender
>36976	Identifier	currentRender
>36977	Callee	addRenderObject
>36978	Identifier	addRenderObject
>36979	ExpressionStatement	 
>36980	AssignmentExpr	currentRender = new CurrentRender ( )
>36981	UnaryExpression	new CurrentRender ( )
>36982	Identifier	currentRender
>36983	IfStatement	if ( verbose )
>36984	ExpressionStatement	 
>36985	CallExpression	debugLog ( \"...Done\" )
>36986	ArgumentList	\"...Done\"
>36987	Argument	\"...Done\"
>36988	PrimaryExpression	\"...Done\"
>36989	Callee	debugLog
>36990	Identifier	debugLog
>36991	Condition	 
>36992	Identifier	verbose
>36993	ExpressionStatement	 
>36994	CallExpression	setCameraFollowEntity ( avatar )
>36995	ArgumentList	avatar
>36996	Argument	avatar
>36997	Identifier	avatar
>36998	Callee	setCameraFollowEntity
>36999	Identifier	setCameraFollowEntity
>37000	ExpressionStatement	 
>37001	CallExpression	addRenderObject ( avatar , LR_ENTITIES )
>37002	ArgumentList	avatar
>37003	Argument	LR_ENTITIES
>37004	Identifier	LR_ENTITIES
>37005	Argument	avatar
>37006	Identifier	avatar
>37007	Callee	addRenderObject
>37008	Identifier	addRenderObject
>37009	IfStatement	if ( verbose )
>37010	ExpressionStatement	 
>37011	CallExpression	debugLog ( \"Adding Avatar\" )
>37012	ArgumentList	\"Adding Avatar\"
>37013	Argument	\"Adding Avatar\"
>37014	PrimaryExpression	\"Adding Avatar\"
>37015	Callee	debugLog
>37016	Identifier	debugLog
>37017	Condition	 
>37018	Identifier	verbose
>37019	IfStatement	if ( ! warpAreaType . empty ( ) )
>37020	CompoundStatement	 
>37021	ExpressionStatement	 
>37022	AssignmentExpr	warpAreaType = \"\"
>37023	PrimaryExpression	\"\"
>37024	Identifier	warpAreaType
>37025	ForStatement	for ( int i = 0 ; i < warpAreas . size ( ) ; i ++ )
>37026	CompoundStatement	 
>37027	IfStatement	if ( a -> warpAreaType == warpAreaType )
>37028	CompoundStatement	 
>37029	BreakStatement	 
>37030	IfStatement	if ( a -> radius )
>37031	ElseStatement	else
>37032	CompoundStatement	 
>37033	ExpressionStatement	 
>37034	AssignmentExpr	avatar -> position = a -> position + s
>37035	AdditiveExpression	a -> position + s
>37036	Identifier	s
>37037	PtrMemberAccess	a -> position
>37038	Identifier	position
>37039	Identifier	a
>37040	PtrMemberAccess	avatar -> position
>37041	Identifier	position
>37042	Identifier	avatar
>37043	IdentifierDeclStatement	 
>37044	IdentifierDecl	s ( spawnOffset . x * ( a -> w + extra ) , spawnOffset . y * ( a -> h + extra ) )
>37045	Expression	spawnOffset . x * ( a -> w + extra ) , spawnOffset . y * ( a -> h + extra )
>37046	MultiplicativeExpression	spawnOffset . y * ( a -> h + extra )
>37047	AdditiveExpression	a -> h + extra
>37048	Identifier	extra
>37049	PtrMemberAccess	a -> h
>37050	Identifier	h
>37051	Identifier	a
>37052	MemberAccess	spawnOffset . y
>37053	Identifier	y
>37054	Identifier	spawnOffset
>37055	MultiplicativeExpression	spawnOffset . x * ( a -> w + extra )
>37056	AdditiveExpression	a -> w + extra
>37057	Identifier	extra
>37058	PtrMemberAccess	a -> w
>37059	Identifier	w
>37060	Identifier	a
>37061	MemberAccess	spawnOffset . x
>37062	Identifier	x
>37063	Identifier	spawnOffset
>37064	Identifier	s
>37065	IdentifierDeclType	Vector
>37066	ExpressionStatement	 
>37067	AssignmentExpr	avatar -> position = a -> position + ( spawnOffset * ( a -> radius + extra ) )
>37068	AdditiveExpression	a -> position + ( spawnOffset * ( a -> radius + extra ) )
>37069	MultiplicativeExpression	spawnOffset * ( a -> radius + extra )
>37070	AdditiveExpression	a -> radius + extra
>37071	Identifier	extra
>37072	PtrMemberAccess	a -> radius
>37073	Identifier	radius
>37074	Identifier	a
>37075	Identifier	spawnOffset
>37076	PtrMemberAccess	a -> position
>37077	Identifier	position
>37078	Identifier	a
>37079	PtrMemberAccess	avatar -> position
>37080	Identifier	position
>37081	Identifier	avatar
>37082	Condition	 
>37083	PtrMemberAccess	a -> radius
>37084	Identifier	radius
>37085	Identifier	a
>37086	IdentifierDeclStatement	 
>37087	IdentifierDecl	extra = 96
>37088	AssignmentExpr	extra = 96
>37089	PrimaryExpression	96
>37090	Identifier	extra
>37091	Identifier	extra
>37092	IdentifierDeclType	int
>37093	Condition	 
>37094	EqualityExpression	a -> warpAreaType == warpAreaType
>37095	Identifier	warpAreaType
>37096	PtrMemberAccess	a -> warpAreaType
>37097	Identifier	warpAreaType
>37098	Identifier	a
>37099	IdentifierDeclStatement	 
>37100	IdentifierDecl	* a = & warpAreas [ i ]
>37101	AssignmentExpr	* a = & warpAreas [ i ]
>37102	UnaryOp	& warpAreas [ i ]
>37103	ArrayIndexing	warpAreas [ i ]
>37104	Identifier	i
>37105	Identifier	warpAreas
>37106	UnaryOperator	&
>37107	Identifier	a
>37108	Identifier	a
>37109	IdentifierDeclType	WarpArea *
>37110	IncDecOp	 
>37111	IncDec	++
>37112	Identifier	i
>37113	Condition	 
>37114	RelationalExpression	i < warpAreas . size ( )
>37115	CallExpression	warpAreas . size ( )
>37116	ArgumentList	 
>37117	Callee	warpAreas . size
>37118	MemberAccess	warpAreas . size
>37119	Identifier	size
>37120	Identifier	warpAreas
>37121	Identifier	i
>37122	ForInit	 
>37123	IdentifierDeclStatement	int i = 0 ;
>37124	IdentifierDecl	i = 0
>37125	AssignmentExpr	i = 0
>37126	PrimaryExpression	0
>37127	Identifier	i
>37128	Identifier	i
>37129	IdentifierDeclType	int
>37130	Condition	 
>37131	UnaryOp	! warpAreaType . empty ( )
>37132	CallExpression	warpAreaType . empty ( )
>37133	ArgumentList	 
>37134	Callee	warpAreaType . empty
>37135	MemberAccess	warpAreaType . empty
>37136	Identifier	empty
>37137	Identifier	warpAreaType
>37138	UnaryOperator	!
>37139	ExpressionStatement	 
>37140	CallExpression	colorTest ( )
>37141	ArgumentList	 
>37142	Callee	colorTest
>37143	Identifier	colorTest
>37144	ExpressionStatement	 
>37145	CallExpression	dsq -> continuity . worldMap . revealMap ( sceneName )
>37146	ArgumentList	sceneName
>37147	Argument	sceneName
>37148	Identifier	sceneName
>37149	Callee	dsq -> continuity . worldMap . revealMap
>37150	MemberAccess	dsq -> continuity . worldMap . revealMap
>37151	Identifier	revealMap
>37152	MemberAccess	dsq -> continuity . worldMap
>37153	Identifier	worldMap
>37154	PtrMemberAccess	dsq -> continuity
>37155	Identifier	continuity
>37156	Identifier	dsq
>37157	ExpressionStatement	 
>37158	AssignmentExpr	backupSceneColor = sceneColor
>37159	Identifier	sceneColor
>37160	Identifier	backupSceneColor
>37161	IfStatement	if ( verbose )
>37162	ExpressionStatement	 
>37163	CallExpression	debugLog ( \"...Done\" )
>37164	ArgumentList	\"...Done\"
>37165	Argument	\"...Done\"
>37166	PrimaryExpression	\"...Done\"
>37167	Callee	debugLog
>37168	Identifier	debugLog
>37169	Condition	 
>37170	Identifier	verbose
>37171	IfStatement	if ( ! loadScene ( sceneToLoad ) )
>37172	CompoundStatement	 
>37173	ExpressionStatement	 
>37174	CallExpression	loadElementTemplates ( elementTemplatePack )
>37175	ArgumentList	elementTemplatePack
>37176	Argument	elementTemplatePack
>37177	Identifier	elementTemplatePack
>37178	Callee	loadElementTemplates
>37179	Identifier	loadElementTemplates
>37180	Condition	 
>37181	UnaryOp	! loadScene ( sceneToLoad )
>37182	CallExpression	loadScene ( sceneToLoad )
>37183	ArgumentList	sceneToLoad
>37184	Argument	sceneToLoad
>37185	Identifier	sceneToLoad
>37186	Callee	loadScene
>37187	Identifier	loadScene
>37188	UnaryOperator	!
>37189	IfStatement	if ( verbose )
>37190	ExpressionStatement	 
>37191	CallExpression	debugLog ( \"Loading Scene\" )
>37192	ArgumentList	\"Loading Scene\"
>37193	Argument	\"Loading Scene\"
>37194	PrimaryExpression	\"Loading Scene\"
>37195	Callee	debugLog
>37196	Identifier	debugLog
>37197	Condition	 
>37198	Identifier	verbose
>37199	ExpressionStatement	 
>37200	AssignmentExpr	shapeDebug = 0
>37201	PrimaryExpression	0
>37202	Identifier	shapeDebug
>37203	ExpressionStatement	 
>37204	CallExpression	bindInput ( )
>37205	ArgumentList	 
>37206	Callee	bindInput
>37207	Identifier	bindInput
>37208	IfStatement	if ( verbose )
>37209	ExpressionStatement	 
>37210	CallExpression	debugLog ( \"Done WarpKeys\" )
>37211	ArgumentList	\"Done WarpKeys\"
>37212	Argument	\"Done WarpKeys\"
>37213	PrimaryExpression	\"Done WarpKeys\"
>37214	Callee	debugLog
>37215	Identifier	debugLog
>37216	Condition	 
>37217	Identifier	verbose
>37218	IfStatement	if ( verbose )
>37219	ExpressionStatement	 
>37220	CallExpression	debugLog ( \"WarpKeys\" )
>37221	ArgumentList	\"WarpKeys\"
>37222	Argument	\"WarpKeys\"
>37223	PrimaryExpression	\"WarpKeys\"
>37224	Callee	debugLog
>37225	Identifier	debugLog
>37226	Condition	 
>37227	Identifier	verbose
>37228	IfStatement	if ( toFlip == 1 )
>37229	CompoundStatement	 
>37230	ExpressionStatement	 
>37231	AssignmentExpr	toFlip = - 1
>37232	UnaryOp	- 1
>37233	PrimaryExpression	1
>37234	UnaryOperator	-
>37235	Identifier	toFlip
>37236	ExpressionStatement	 
>37237	CallExpression	dsq -> game -> avatar -> flipHorizontal ( )
>37238	ArgumentList	 
>37239	Callee	dsq -> game -> avatar -> flipHorizontal
>37240	PtrMemberAccess	dsq -> game -> avatar -> flipHorizontal
>37241	Identifier	flipHorizontal
>37242	PtrMemberAccess	dsq -> game -> avatar
>37243	Identifier	avatar
>37244	PtrMemberAccess	dsq -> game
>37245	Identifier	game
>37246	Identifier	dsq
>37247	Condition	 
>37248	EqualityExpression	toFlip == 1
>37249	PrimaryExpression	1
>37250	Identifier	toFlip
>37251	IfStatement	if ( verbose )
>37252	ExpressionStatement	 
>37253	CallExpression	debugLog ( \"Done\" )
>37254	ArgumentList	\"Done\"
>37255	Argument	\"Done\"
>37256	PrimaryExpression	\"Done\"
>37257	Callee	debugLog
>37258	Identifier	debugLog
>37259	Condition	 
>37260	Identifier	verbose
>37261	ExpressionStatement	 
>37262	CallExpression	createLi ( )
>37263	ArgumentList	 
>37264	Callee	createLi
>37265	Identifier	createLi
>37266	IfStatement	if ( verbose )
>37267	ExpressionStatement	 
>37268	CallExpression	debugLog ( \"Create Li\" )
>37269	ArgumentList	\"Create Li\"
>37270	Argument	\"Create Li\"
>37271	PrimaryExpression	\"Create Li\"
>37272	Callee	debugLog
>37273	Identifier	debugLog
>37274	Condition	 
>37275	Identifier	verbose
>37276	IfStatement	if ( verbose )
>37277	ExpressionStatement	 
>37278	CallExpression	debugLog ( \"Done warp\" )
>37279	ArgumentList	\"Done warp\"
>37280	Argument	\"Done warp\"
>37281	PrimaryExpression	\"Done warp\"
>37282	Callee	debugLog
>37283	Identifier	debugLog
>37284	Condition	 
>37285	Identifier	verbose
>37286	IfStatement	if ( warpAreaType . empty ( ) )
>37287	CompoundStatement	 
>37288	ExpressionStatement	 
>37289	AssignmentExpr	positionToAvatar = Vector ( 0 , 0 )
>37290	CallExpression	Vector ( 0 , 0 )
>37291	ArgumentList	0
>37292	Argument	0
>37293	PrimaryExpression	0
>37294	Argument	0
>37295	PrimaryExpression	0
>37296	Callee	Vector
>37297	Identifier	Vector
>37298	Identifier	positionToAvatar
>37299	IfStatement	if ( positionToAvatar . x == 0 && positionToAvatar . y == 0 )
>37300	ElseStatement	else
>37301	ExpressionStatement	 
>37302	AssignmentExpr	avatar -> position = positionToAvatar
>37303	Identifier	positionToAvatar
>37304	PtrMemberAccess	avatar -> position
>37305	Identifier	position
>37306	Identifier	avatar
>37307	ExpressionStatement	 
>37308	AssignmentExpr	avatar -> position = Vector ( dsq -> avStart . x , dsq -> avStart . y )
>37309	CallExpression	Vector ( dsq -> avStart . x , dsq -> avStart . y )
>37310	ArgumentList	dsq -> avStart . x
>37311	Argument	dsq -> avStart . y
>37312	MemberAccess	dsq -> avStart . y
>37313	Identifier	y
>37314	PtrMemberAccess	dsq -> avStart
>37315	Identifier	avStart
>37316	Identifier	dsq
>37317	Argument	dsq -> avStart . x
>37318	MemberAccess	dsq -> avStart . x
>37319	Identifier	x
>37320	PtrMemberAccess	dsq -> avStart
>37321	Identifier	avStart
>37322	Identifier	dsq
>37323	Callee	Vector
>37324	Identifier	Vector
>37325	PtrMemberAccess	avatar -> position
>37326	Identifier	position
>37327	Identifier	avatar
>37328	Condition	 
>37329	AndExpression	positionToAvatar . x == 0 && positionToAvatar . y == 0
>37330	EqualityExpression	positionToAvatar . y == 0
>37331	PrimaryExpression	0
>37332	MemberAccess	positionToAvatar . y
>37333	Identifier	y
>37334	Identifier	positionToAvatar
>37335	EqualityExpression	positionToAvatar . x == 0
>37336	PrimaryExpression	0
>37337	MemberAccess	positionToAvatar . x
>37338	Identifier	x
>37339	Identifier	positionToAvatar
>37340	Condition	 
>37341	CallExpression	warpAreaType . empty ( )
>37342	ArgumentList	 
>37343	Callee	warpAreaType . empty
>37344	MemberAccess	warpAreaType . empty
>37345	Identifier	empty
>37346	Identifier	warpAreaType
>37347	IfStatement	if ( verbose )
>37348	ExpressionStatement	 
>37349	CallExpression	debugLog ( \"Done new Avatar\" )
>37350	ArgumentList	\"Done new Avatar\"
>37351	Argument	\"Done new Avatar\"
>37352	PrimaryExpression	\"Done new Avatar\"
>37353	Callee	debugLog
>37354	Identifier	debugLog
>37355	Condition	 
>37356	Identifier	verbose
>37357	ExpressionStatement	 
>37358	AssignmentExpr	avatar = new Avatar ( )
>37359	UnaryExpression	new Avatar ( )
>37360	Identifier	avatar
>37361	IfStatement	if ( verbose )
>37362	ExpressionStatement	 
>37363	CallExpression	debugLog ( \"Creating Avatar\" )
>37364	ArgumentList	\"Creating Avatar\"
>37365	Argument	\"Creating Avatar\"
>37366	PrimaryExpression	\"Creating Avatar\"
>37367	Callee	debugLog
>37368	Identifier	debugLog
>37369	Condition	 
>37370	Identifier	verbose
>37371	IfStatement	if ( dsq -> canOpenEditor ( ) )
>37372	CompoundStatement	 
>37373	ExpressionStatement	 
>37374	CallExpression	sceneEditor . init ( )
>37375	ArgumentList	 
>37376	Callee	sceneEditor . init
>37377	MemberAccess	sceneEditor . init
>37378	Identifier	init
>37379	Identifier	sceneEditor
>37380	Condition	 
>37381	CallExpression	dsq -> canOpenEditor ( )
>37382	ArgumentList	 
>37383	Callee	dsq -> canOpenEditor
>37384	PtrMemberAccess	dsq -> canOpenEditor
>37385	Identifier	canOpenEditor
>37386	Identifier	dsq
>37387	ExpressionStatement	 
>37388	AssignmentExpr	li = 0
>37389	PrimaryExpression	0
>37390	Identifier	li
>37391	ExpressionStatement	 
>37392	CallExpression	addRenderObject ( controlHint_shine , LR_HELP )
>37393	ArgumentList	controlHint_shine
>37394	Argument	LR_HELP
>37395	Identifier	LR_HELP
>37396	Argument	controlHint_shine
>37397	Identifier	controlHint_shine
>37398	Callee	addRenderObject
>37399	Identifier	addRenderObject
>37400	CompoundStatement	 
>37401	ExpressionStatement	 
>37402	CallExpression	controlHint_shine -> setBlendType ( RenderObject 
>37403	ArgumentList	RenderObject 
>37404	Argument	RenderObject 
>37405	Identifier	RenderObject 
>37406	Callee	controlHint_shine -> setBlendType
>37407	PtrMemberAccess	controlHint_shine -> setBlendType
>37408	Identifier	setBlendType
>37409	Identifier	controlHint_shine
>37410	ExpressionStatement	 
>37411	AssignmentExpr	controlHint_shine -> alpha = 0
>37412	PrimaryExpression	0
>37413	PtrMemberAccess	controlHint_shine -> alpha
>37414	Identifier	alpha
>37415	Identifier	controlHint_shine
>37416	ExpressionStatement	 
>37417	CallExpression	controlHint_shine -> setWidthHeight ( core -> getVirtualWidth ( ) , 100 )
>37418	ArgumentList	core -> getVirtualWidth ( )
>37419	Argument	100
>37420	PrimaryExpression	100
>37421	Argument	core -> getVirtualWidth ( )
>37422	CallExpression	core -> getVirtualWidth ( )
>37423	ArgumentList	 
>37424	Callee	core -> getVirtualWidth
>37425	PtrMemberAccess	core -> getVirtualWidth
>37426	Identifier	getVirtualWidth
>37427	Identifier	core
>37428	Callee	controlHint_shine -> setWidthHeight
>37429	PtrMemberAccess	controlHint_shine -> setWidthHeight
>37430	Identifier	setWidthHeight
>37431	Identifier	controlHint_shine
>37432	ExpressionStatement	 
>37433	AssignmentExpr	controlHint_shine -> alphaMod = 0.3
>37434	PrimaryExpression	0.3
>37435	PtrMemberAccess	controlHint_shine -> alphaMod
>37436	Identifier	alphaMod
>37437	Identifier	controlHint_shine
>37438	ExpressionStatement	 
>37439	AssignmentExpr	controlHint_shine -> position = Vector ( 400 , 500 )
>37440	CallExpression	Vector ( 400 , 500 )
>37441	ArgumentList	400
>37442	Argument	500
>37443	PrimaryExpression	500
>37444	Argument	400
>37445	PrimaryExpression	400
>37446	Callee	Vector
>37447	Identifier	Vector
>37448	PtrMemberAccess	controlHint_shine -> position
>37449	Identifier	position
>37450	Identifier	controlHint_shine
>37451	ExpressionStatement	 
>37452	AssignmentExpr	controlHint_shine -> followCamera = 1
>37453	PrimaryExpression	1
>37454	PtrMemberAccess	controlHint_shine -> followCamera
>37455	Identifier	followCamera
>37456	Identifier	controlHint_shine
>37457	ExpressionStatement	 
>37458	AssignmentExpr	controlHint_shine -> color = Vector ( 1 , 1 , 1 )
>37459	CallExpression	Vector ( 1 , 1 , 1 )
>37460	ArgumentList	1
>37461	Argument	1
>37462	PrimaryExpression	1
>37463	Argument	1
>37464	PrimaryExpression	1
>37465	Argument	1
>37466	PrimaryExpression	1
>37467	Callee	Vector
>37468	Identifier	Vector
>37469	PtrMemberAccess	controlHint_shine -> color
>37470	Identifier	color
>37471	Identifier	controlHint_shine
>37472	ExpressionStatement	 
>37473	Identifier	Quad
>37474	Statement	 
>37475	Statement	 
>37476	Statement	 
>37477	ExpressionStatement	 
>37478	CallExpression	addRenderObject ( controlHint_mouseBody , LR_HELP )
>37479	ArgumentList	controlHint_mouseBody
>37480	Argument	LR_HELP
>37481	Identifier	LR_HELP
>37482	Argument	controlHint_mouseBody
>37483	Identifier	controlHint_mouseBody
>37484	Callee	addRenderObject
>37485	Identifier	addRenderObject
>37486	CompoundStatement	 
>37487	ExpressionStatement	 
>37488	AssignmentExpr	controlHint_mouseBody -> alpha = 0
>37489	PrimaryExpression	0
>37490	PtrMemberAccess	controlHint_mouseBody -> alpha
>37491	Identifier	alpha
>37492	Identifier	controlHint_mouseBody
>37493	ExpressionStatement	 
>37494	AssignmentExpr	controlHint_mouseBody -> position = mousePos
>37495	Identifier	mousePos
>37496	PtrMemberAccess	controlHint_mouseBody -> position
>37497	Identifier	position
>37498	Identifier	controlHint_mouseBody
>37499	ExpressionStatement	 
>37500	CallExpression	controlHint_mouseBody -> setTexture ( \"Mouse-Body\" )
>37501	ArgumentList	\"Mouse-Body\"
>37502	Argument	\"Mouse-Body\"
>37503	PrimaryExpression	\"Mouse-Body\"
>37504	Callee	controlHint_mouseBody -> setTexture
>37505	PtrMemberAccess	controlHint_mouseBody -> setTexture
>37506	Identifier	setTexture
>37507	Identifier	controlHint_mouseBody
>37508	ExpressionStatement	 
>37509	AssignmentExpr	controlHint_mouseBody -> followCamera = 1
>37510	PrimaryExpression	1
>37511	PtrMemberAccess	controlHint_mouseBody -> followCamera
>37512	Identifier	followCamera
>37513	Identifier	controlHint_mouseBody
>37514	ExpressionStatement	 
>37515	Identifier	Quad
>37516	Statement	 
>37517	Statement	 
>37518	Statement	 
>37519	ExpressionStatement	 
>37520	CallExpression	addRenderObject ( controlHint_mouseMiddle , LR_HELP )
>37521	ArgumentList	controlHint_mouseMiddle
>37522	Argument	LR_HELP
>37523	Identifier	LR_HELP
>37524	Argument	controlHint_mouseMiddle
>37525	Identifier	controlHint_mouseMiddle
>37526	Callee	addRenderObject
>37527	Identifier	addRenderObject
>37528	CompoundStatement	 
>37529	ExpressionStatement	 
>37530	AssignmentExpr	controlHint_mouseMiddle -> alpha = 0
>37531	PrimaryExpression	0
>37532	PtrMemberAccess	controlHint_mouseMiddle -> alpha
>37533	Identifier	alpha
>37534	Identifier	controlHint_mouseMiddle
>37535	ExpressionStatement	 
>37536	AssignmentExpr	controlHint_mouseMiddle -> position = mousePos
>37537	Identifier	mousePos
>37538	PtrMemberAccess	controlHint_mouseMiddle -> position
>37539	Identifier	position
>37540	Identifier	controlHint_mouseMiddle
>37541	ExpressionStatement	 
>37542	CallExpression	controlHint_mouseMiddle -> setTexture ( \"Mouse-MiddleButton\" )
>37543	ArgumentList	\"Mouse-MiddleButton\"
>37544	Argument	\"Mouse-MiddleButton\"
>37545	PrimaryExpression	\"Mouse-MiddleButton\"
>37546	Callee	controlHint_mouseMiddle -> setTexture
>37547	PtrMemberAccess	controlHint_mouseMiddle -> setTexture
>37548	Identifier	setTexture
>37549	Identifier	controlHint_mouseMiddle
>37550	ExpressionStatement	 
>37551	AssignmentExpr	controlHint_mouseMiddle -> followCamera = 1
>37552	PrimaryExpression	1
>37553	PtrMemberAccess	controlHint_mouseMiddle -> followCamera
>37554	Identifier	followCamera
>37555	Identifier	controlHint_mouseMiddle
>37556	ExpressionStatement	 
>37557	Identifier	Quad
>37558	Statement	 
>37559	Statement	 
>37560	Statement	 
>37561	ExpressionStatement	 
>37562	CallExpression	addRenderObject ( controlHint_mouseRight , LR_HELP )
>37563	ArgumentList	controlHint_mouseRight
>37564	Argument	LR_HELP
>37565	Identifier	LR_HELP
>37566	Argument	controlHint_mouseRight
>37567	Identifier	controlHint_mouseRight
>37568	Callee	addRenderObject
>37569	Identifier	addRenderObject
>37570	CompoundStatement	 
>37571	ExpressionStatement	 
>37572	AssignmentExpr	controlHint_mouseRight -> alpha = 0
>37573	PrimaryExpression	0
>37574	PtrMemberAccess	controlHint_mouseRight -> alpha
>37575	Identifier	alpha
>37576	Identifier	controlHint_mouseRight
>37577	ExpressionStatement	 
>37578	AssignmentExpr	controlHint_mouseRight -> position = mousePos
>37579	Identifier	mousePos
>37580	PtrMemberAccess	controlHint_mouseRight -> position
>37581	Identifier	position
>37582	Identifier	controlHint_mouseRight
>37583	ExpressionStatement	 
>37584	CallExpression	controlHint_mouseRight -> setTexture ( \"Mouse-RightButton\" )
>37585	ArgumentList	\"Mouse-RightButton\"
>37586	Argument	\"Mouse-RightButton\"
>37587	PrimaryExpression	\"Mouse-RightButton\"
>37588	Callee	controlHint_mouseRight -> setTexture
>37589	PtrMemberAccess	controlHint_mouseRight -> setTexture
>37590	Identifier	setTexture
>37591	Identifier	controlHint_mouseRight
>37592	ExpressionStatement	 
>37593	AssignmentExpr	controlHint_mouseRight -> followCamera = 1
>37594	PrimaryExpression	1
>37595	PtrMemberAccess	controlHint_mouseRight -> followCamera
>37596	Identifier	followCamera
>37597	Identifier	controlHint_mouseRight
>37598	ExpressionStatement	 
>37599	Identifier	Quad
>37600	Statement	 
>37601	Statement	 
>37602	Statement	 
>37603	ExpressionStatement	 
>37604	CallExpression	addRenderObject ( controlHint_mouseLeft , LR_HELP )
>37605	ArgumentList	controlHint_mouseLeft
>37606	Argument	LR_HELP
>37607	Identifier	LR_HELP
>37608	Argument	controlHint_mouseLeft
>37609	Identifier	controlHint_mouseLeft
>37610	Callee	addRenderObject
>37611	Identifier	addRenderObject
>37612	CompoundStatement	 
>37613	ExpressionStatement	 
>37614	AssignmentExpr	controlHint_mouseLeft -> alpha = 0
>37615	PrimaryExpression	0
>37616	PtrMemberAccess	controlHint_mouseLeft -> alpha
>37617	Identifier	alpha
>37618	Identifier	controlHint_mouseLeft
>37619	ExpressionStatement	 
>37620	AssignmentExpr	controlHint_mouseLeft -> position = mousePos
>37621	Identifier	mousePos
>37622	PtrMemberAccess	controlHint_mouseLeft -> position
>37623	Identifier	position
>37624	Identifier	controlHint_mouseLeft
>37625	ExpressionStatement	 
>37626	CallExpression	controlHint_mouseLeft -> setTexture ( \"Mouse-LeftButton\" )
>37627	ArgumentList	\"Mouse-LeftButton\"
>37628	Argument	\"Mouse-LeftButton\"
>37629	PrimaryExpression	\"Mouse-LeftButton\"
>37630	Callee	controlHint_mouseLeft -> setTexture
>37631	PtrMemberAccess	controlHint_mouseLeft -> setTexture
>37632	Identifier	setTexture
>37633	Identifier	controlHint_mouseLeft
>37634	ExpressionStatement	 
>37635	AssignmentExpr	controlHint_mouseLeft -> followCamera = 1
>37636	PrimaryExpression	1
>37637	PtrMemberAccess	controlHint_mouseLeft -> followCamera
>37638	Identifier	followCamera
>37639	Identifier	controlHint_mouseLeft
>37640	ExpressionStatement	 
>37641	Identifier	Quad
>37642	Statement	 
>37643	Statement	 
>37644	Statement	 
>37645	ExpressionStatement	 
>37646	CallExpression	addRenderObject ( controlHint_image , LR_HELP )
>37647	ArgumentList	controlHint_image
>37648	Argument	LR_HELP
>37649	Identifier	LR_HELP
>37650	Argument	controlHint_image
>37651	Identifier	controlHint_image
>37652	Callee	addRenderObject
>37653	Identifier	addRenderObject
>37654	CompoundStatement	 
>37655	ExpressionStatement	 
>37656	AssignmentExpr	controlHint_image -> alpha = 0
>37657	PrimaryExpression	0
>37658	PtrMemberAccess	controlHint_image -> alpha
>37659	Identifier	alpha
>37660	Identifier	controlHint_image
>37661	ExpressionStatement	 
>37662	AssignmentExpr	controlHint_image -> position = mousePos
>37663	Identifier	mousePos
>37664	PtrMemberAccess	controlHint_image -> position
>37665	Identifier	position
>37666	Identifier	controlHint_image
>37667	ExpressionStatement	 
>37668	AssignmentExpr	controlHint_image -> followCamera = 1
>37669	PrimaryExpression	1
>37670	PtrMemberAccess	controlHint_image -> followCamera
>37671	Identifier	followCamera
>37672	Identifier	controlHint_image
>37673	ExpressionStatement	 
>37674	Identifier	Quad
>37675	Statement	 
>37676	Statement	 
>37677	Statement	 
>37678	ExpressionStatement	 
>37679	CallExpression	addRenderObject ( controlHint_text , LR_HELP )
>37680	ArgumentList	controlHint_text
>37681	Argument	LR_HELP
>37682	Identifier	LR_HELP
>37683	Argument	controlHint_text
>37684	Identifier	controlHint_text
>37685	Callee	addRenderObject
>37686	Identifier	addRenderObject
>37687	CompoundStatement	 
>37688	ExpressionStatement	 
>37689	AssignmentExpr	controlHint_text -> scale = Vector ( 0.9 , 0.9 )
>37690	CallExpression	Vector ( 0.9 , 0.9 )
>37691	ArgumentList	0.9
>37692	Argument	0.9
>37693	PrimaryExpression	0.9
>37694	Argument	0.9
>37695	PrimaryExpression	0.9
>37696	Callee	Vector
>37697	Identifier	Vector
>37698	PtrMemberAccess	controlHint_text -> scale
>37699	Identifier	scale
>37700	Identifier	controlHint_text
>37701	ExpressionStatement	 
>37702	AssignmentExpr	controlHint_text -> followCamera = 1
>37703	PrimaryExpression	1
>37704	PtrMemberAccess	controlHint_text -> followCamera
>37705	Identifier	followCamera
>37706	Identifier	controlHint_text
>37707	ExpressionStatement	 
>37708	CallExpression	controlHint_text -> setAlign ( ALIGN_LEFT )
>37709	ArgumentList	ALIGN_LEFT
>37710	Argument	ALIGN_LEFT
>37711	Identifier	ALIGN_LEFT
>37712	Callee	controlHint_text -> setAlign
>37713	PtrMemberAccess	controlHint_text -> setAlign
>37714	Identifier	setAlign
>37715	Identifier	controlHint_text
>37716	ExpressionStatement	 
>37717	CallExpression	controlHint_text -> setWidth ( 700 )
>37718	ArgumentList	700
>37719	Argument	700
>37720	PrimaryExpression	700
>37721	Callee	controlHint_text -> setWidth
>37722	PtrMemberAccess	controlHint_text -> setWidth
>37723	Identifier	setWidth
>37724	Identifier	controlHint_text
>37725	ExpressionStatement	 
>37726	AssignmentExpr	controlHint_text -> alpha = 0
>37727	PrimaryExpression	0
>37728	PtrMemberAccess	controlHint_text -> alpha
>37729	Identifier	alpha
>37730	Identifier	controlHint_text
>37731	ExpressionStatement	 
>37732	AssignmentExpr	controlHint_text = new BitmapText ( & dsq -> smallFont )
>37733	UnaryOp	& dsq -> smallFont
>37734	PtrMemberAccess	dsq -> smallFont
>37735	Identifier	smallFont
>37736	Identifier	dsq
>37737	UnaryOperator	&
>37738	Identifier	controlHint_text
>37739	ExpressionStatement	 
>37740	CallExpression	addRenderObject ( controlHint_bg , LR_HELP )
>37741	ArgumentList	controlHint_bg
>37742	Argument	LR_HELP
>37743	Identifier	LR_HELP
>37744	Argument	controlHint_bg
>37745	Identifier	controlHint_bg
>37746	Callee	addRenderObject
>37747	Identifier	addRenderObject
>37748	CompoundStatement	 
>37749	ExpressionStatement	 
>37750	AssignmentExpr	controlHint_bg -> alpha = 0
>37751	PrimaryExpression	0
>37752	PtrMemberAccess	controlHint_bg -> alpha
>37753	Identifier	alpha
>37754	Identifier	controlHint_bg
>37755	ExpressionStatement	 
>37756	AssignmentExpr	controlHint_bg -> autoWidth = AUTO_VIRTUALWIDTH
>37757	Identifier	AUTO_VIRTUALWIDTH
>37758	PtrMemberAccess	controlHint_bg -> autoWidth
>37759	Identifier	autoWidth
>37760	Identifier	controlHint_bg
>37761	ExpressionStatement	 
>37762	CallExpression	controlHint_bg -> setWidthHeight ( core -> getVirtualWidth ( ) , 100 )
>37763	ArgumentList	core -> getVirtualWidth ( )
>37764	Argument	100
>37765	PrimaryExpression	100
>37766	Argument	core -> getVirtualWidth ( )
>37767	CallExpression	core -> getVirtualWidth ( )
>37768	ArgumentList	 
>37769	Callee	core -> getVirtualWidth
>37770	PtrMemberAccess	core -> getVirtualWidth
>37771	Identifier	getVirtualWidth
>37772	Identifier	core
>37773	Callee	controlHint_bg -> setWidthHeight
>37774	PtrMemberAccess	controlHint_bg -> setWidthHeight
>37775	Identifier	setWidthHeight
>37776	Identifier	controlHint_bg
>37777	ExpressionStatement	 
>37778	AssignmentExpr	controlHint_bg -> alphaMod = 0.7
>37779	PrimaryExpression	0.7
>37780	PtrMemberAccess	controlHint_bg -> alphaMod
>37781	Identifier	alphaMod
>37782	Identifier	controlHint_bg
>37783	ExpressionStatement	 
>37784	AssignmentExpr	controlHint_bg -> color = 0
>37785	PrimaryExpression	0
>37786	PtrMemberAccess	controlHint_bg -> color
>37787	Identifier	color
>37788	Identifier	controlHint_bg
>37789	ExpressionStatement	 
>37790	AssignmentExpr	controlHint_bg -> position = Vector ( 400 , 500 )
>37791	CallExpression	Vector ( 400 , 500 )
>37792	ArgumentList	400
>37793	Argument	500
>37794	PrimaryExpression	500
>37795	Argument	400
>37796	PrimaryExpression	400
>37797	Callee	Vector
>37798	Identifier	Vector
>37799	PtrMemberAccess	controlHint_bg -> position
>37800	Identifier	position
>37801	Identifier	controlHint_bg
>37802	ExpressionStatement	 
>37803	AssignmentExpr	controlHint_bg -> followCamera = 1
>37804	PrimaryExpression	1
>37805	PtrMemberAccess	controlHint_bg -> followCamera
>37806	Identifier	followCamera
>37807	Identifier	controlHint_bg
>37808	ExpressionStatement	 
>37809	Identifier	Quad
>37810	Statement	 
>37811	Statement	 
>37812	Statement	 
>37813	IdentifierDeclStatement	 
>37814	IdentifierDecl	mousePos ( 400 , 490 )
>37815	Expression	400 , 490
>37816	PrimaryExpression	490
>37817	PrimaryExpression	400
>37818	Identifier	mousePos
>37819	IdentifierDeclType	Vector
>37820	ExpressionStatement	 
>37821	CallExpression	addRenderObject ( bg , LR_BACKGROUND )
>37822	ArgumentList	bg
>37823	Argument	LR_BACKGROUND
>37824	Identifier	LR_BACKGROUND
>37825	Argument	bg
>37826	Identifier	bg
>37827	Callee	addRenderObject
>37828	Identifier	addRenderObject
>37829	CompoundStatement	 
>37830	ExpressionStatement	 
>37831	AssignmentExpr	bg -> alpha = 1
>37832	PrimaryExpression	1
>37833	PtrMemberAccess	bg -> alpha
>37834	Identifier	alpha
>37835	Identifier	bg
>37836	ExpressionStatement	 
>37837	AssignmentExpr	bg -> followCamera = 1
>37838	PrimaryExpression	1
>37839	PtrMemberAccess	bg -> followCamera
>37840	Identifier	followCamera
>37841	Identifier	bg
>37842	ExpressionStatement	 
>37843	CallExpression	bg -> setWidthHeight ( 900 , 600 )
>37844	ArgumentList	900
>37845	Argument	600
>37846	PrimaryExpression	600
>37847	Argument	900
>37848	PrimaryExpression	900
>37849	Callee	bg -> setWidthHeight
>37850	PtrMemberAccess	bg -> setWidthHeight
>37851	Identifier	setWidthHeight
>37852	Identifier	bg
>37853	ExpressionStatement	 
>37854	CallExpression	bg -> setTexture ( \"missingImage\" )
>37855	ArgumentList	\"missingImage\"
>37856	Argument	\"missingImage\"
>37857	PrimaryExpression	\"missingImage\"
>37858	Callee	bg -> setTexture
>37859	PtrMemberAccess	bg -> setTexture
>37860	Identifier	setTexture
>37861	Identifier	bg
>37862	ExpressionStatement	 
>37863	AssignmentExpr	bg -> position = Vector ( 400 , 300 , - 2 )
>37864	CallExpression	Vector ( 400 , 300 , - 2 )
>37865	ArgumentList	400
>37866	Argument	- 2
>37867	UnaryOp	- 2
>37868	PrimaryExpression	2
>37869	UnaryOperator	-
>37870	Argument	300
>37871	PrimaryExpression	300
>37872	Argument	400
>37873	PrimaryExpression	400
>37874	Callee	Vector
>37875	Identifier	Vector
>37876	PtrMemberAccess	bg -> position
>37877	Identifier	position
>37878	Identifier	bg
>37879	ExpressionStatement	 
>37880	AssignmentExpr	bg -> blendEnabled = false
>37881	Identifier	false
>37882	PtrMemberAccess	bg -> blendEnabled
>37883	Identifier	blendEnabled
>37884	Identifier	bg
>37885	ExpressionStatement	 
>37886	Identifier	Quad
>37887	Statement	 
>37888	Statement	 
>37889	Statement	 
>37890	ExpressionStatement	 
>37891	CallExpression	addRenderObject ( bg2 , LR_BACKGROUND )
>37892	ArgumentList	bg2
>37893	Argument	LR_BACKGROUND
>37894	Identifier	LR_BACKGROUND
>37895	Argument	bg2
>37896	Identifier	bg2
>37897	Callee	addRenderObject
>37898	Identifier	addRenderObject
>37899	CompoundStatement	 
>37900	ExpressionStatement	 
>37901	AssignmentExpr	bg2 -> alpha = 0.8
>37902	PrimaryExpression	0.8
>37903	PtrMemberAccess	bg2 -> alpha
>37904	Identifier	alpha
>37905	Identifier	bg2
>37906	ExpressionStatement	 
>37907	AssignmentExpr	bg2 -> followCamera = 1
>37908	PrimaryExpression	1
>37909	PtrMemberAccess	bg2 -> followCamera
>37910	Identifier	followCamera
>37911	Identifier	bg2
>37912	ExpressionStatement	 
>37913	CallExpression	bg2 -> setWidthHeight ( 900 , 600 )
>37914	ArgumentList	900
>37915	Argument	600
>37916	PrimaryExpression	600
>37917	Argument	900
>37918	PrimaryExpression	900
>37919	Callee	bg2 -> setWidthHeight
>37920	PtrMemberAccess	bg2 -> setWidthHeight
>37921	Identifier	setWidthHeight
>37922	Identifier	bg2
>37923	ExpressionStatement	 
>37924	CallExpression	bg2 -> setTexture ( \"missingImage\" )
>37925	ArgumentList	\"missingImage\"
>37926	Argument	\"missingImage\"
>37927	PrimaryExpression	\"missingImage\"
>37928	Callee	bg2 -> setTexture
>37929	PtrMemberAccess	bg2 -> setTexture
>37930	Identifier	setTexture
>37931	Identifier	bg2
>37932	ExpressionStatement	 
>37933	AssignmentExpr	bg2 -> position = Vector ( 400 , 300 , - 3 )
>37934	CallExpression	Vector ( 400 , 300 , - 3 )
>37935	ArgumentList	400
>37936	Argument	- 3
>37937	UnaryOp	- 3
>37938	PrimaryExpression	3
>37939	UnaryOperator	-
>37940	Argument	300
>37941	PrimaryExpression	300
>37942	Argument	400
>37943	PrimaryExpression	400
>37944	Callee	Vector
>37945	Identifier	Vector
>37946	PtrMemberAccess	bg2 -> position
>37947	Identifier	position
>37948	Identifier	bg2
>37949	ExpressionStatement	 
>37950	Identifier	Quad
>37951	Statement	 
>37952	Statement	 
>37953	Statement	 
>37954	ExpressionStatement	 
>37955	CallExpression	addRenderObject ( damageSprite , LR_DAMAGESPRITE )
>37956	ArgumentList	damageSprite
>37957	Argument	LR_DAMAGESPRITE
>37958	Identifier	LR_DAMAGESPRITE
>37959	Argument	damageSprite
>37960	Identifier	damageSprite
>37961	Callee	addRenderObject
>37962	Identifier	addRenderObject
>37963	CompoundStatement	 
>37964	ExpressionStatement	 
>37965	CallExpression	damageSprite -> scale . interpolateTo ( Vector ( 1.1 , 1.1 ) , 0.75 , - 1 , 1 , 1 )
>37966	ArgumentList	Vector ( 1.1 , 1.1 )
>37967	Argument	1
>37968	PrimaryExpression	1
>37969	Argument	1
>37970	PrimaryExpression	1
>37971	Argument	- 1
>37972	UnaryOp	- 1
>37973	PrimaryExpression	1
>37974	UnaryOperator	-
>37975	Argument	0.75
>37976	PrimaryExpression	0.75
>37977	Argument	Vector ( 1.1 , 1.1 )
>37978	CallExpression	Vector ( 1.1 , 1.1 )
>37979	ArgumentList	1.1
>37980	Argument	1.1
>37981	PrimaryExpression	1.1
>37982	Argument	1.1
>37983	PrimaryExpression	1.1
>37984	Callee	Vector
>37985	Identifier	Vector
>37986	Callee	damageSprite -> scale . interpolateTo
>37987	MemberAccess	damageSprite -> scale . interpolateTo
>37988	Identifier	interpolateTo
>37989	PtrMemberAccess	damageSprite -> scale
>37990	Identifier	scale
>37991	Identifier	damageSprite
>37992	ExpressionStatement	 
>37993	AssignmentExpr	damageSprite -> followCamera = true
>37994	Identifier	true
>37995	PtrMemberAccess	damageSprite -> followCamera
>37996	Identifier	followCamera
>37997	Identifier	damageSprite
>37998	ExpressionStatement	 
>37999	AssignmentExpr	damageSprite -> position = Vector ( 400 , 300 )
>38000	CallExpression	Vector ( 400 , 300 )
>38001	ArgumentList	400
>38002	Argument	300
>38003	PrimaryExpression	300
>38004	Argument	400
>38005	PrimaryExpression	400
>38006	Callee	Vector
>38007	Identifier	Vector
>38008	PtrMemberAccess	damageSprite -> position
>38009	Identifier	position
>38010	Identifier	damageSprite
>38011	ExpressionStatement	 
>38012	AssignmentExpr	damageSprite -> autoHeight = AUTO_VIRTUALHEIGHT
>38013	Identifier	AUTO_VIRTUALHEIGHT
>38014	PtrMemberAccess	damageSprite -> autoHeight
>38015	Identifier	autoHeight
>38016	Identifier	damageSprite
>38017	ExpressionStatement	 
>38018	AssignmentExpr	damageSprite -> autoWidth = AUTO_VIRTUALWIDTH
>38019	Identifier	AUTO_VIRTUALWIDTH
>38020	PtrMemberAccess	damageSprite -> autoWidth
>38021	Identifier	autoWidth
>38022	Identifier	damageSprite
>38023	ExpressionStatement	 
>38024	AssignmentExpr	damageSprite -> alpha = 0
>38025	PrimaryExpression	0
>38026	PtrMemberAccess	damageSprite -> alpha
>38027	Identifier	alpha
>38028	Identifier	damageSprite
>38029	ExpressionStatement	 
>38030	CallExpression	damageSprite -> setTexture ( \"damage\" )
>38031	ArgumentList	\"damage\"
>38032	Argument	\"damage\"
>38033	PrimaryExpression	\"damage\"
>38034	Callee	damageSprite -> setTexture
>38035	PtrMemberAccess	damageSprite -> setTexture
>38036	Identifier	setTexture
>38037	Identifier	damageSprite
>38038	ExpressionStatement	 
>38039	Identifier	Quad
>38040	Statement	 
>38041	Statement	 
>38042	Statement	 
>38043	ExpressionStatement	 
>38044	AssignmentExpr	progressBar = 0
>38045	PrimaryExpression	0
>38046	Identifier	progressBar
>38047	ExpressionStatement	 
>38048	AssignmentExpr	elementWithMenu = 0
>38049	PrimaryExpression	0
>38050	Identifier	elementWithMenu
>38051	ExpressionStatement	 
>38052	CallExpression	dsq -> clearElements ( )
>38053	ArgumentList	 
>38054	Callee	dsq -> clearElements
>38055	PtrMemberAccess	dsq -> clearElements
>38056	Identifier	clearElements
>38057	Identifier	dsq
>38058	ExpressionStatement	 
>38059	CallExpression	dsq -> clearEntities ( )
>38060	ArgumentList	 
>38061	Callee	dsq -> clearEntities
>38062	PtrMemberAccess	dsq -> clearEntities
>38063	Identifier	clearEntities
>38064	Identifier	dsq
>38065	ExpressionStatement	 
>38066	CallExpression	StateObject 
>38067	ArgumentList	 
>38068	Callee	StateObject 
>38069	Identifier	StateObject 
>38070	ExpressionStatement	 
>38071	CallExpression	SkeletalSprite 
>38072	ArgumentList	 
>38073	Callee	SkeletalSprite 
>38074	Identifier	SkeletalSprite 
>38075	ExpressionStatement	 
>38076	CallExpression	clearPointers ( )
>38077	ArgumentList	 
>38078	Callee	clearPointers
>38079	Identifier	clearPointers
>38080	ExpressionStatement	 
>38081	CallExpression	clearGrid ( )
>38082	ArgumentList	 
>38083	Callee	clearGrid
>38084	Identifier	clearGrid
>38085	ExpressionStatement	 
>38086	AssignmentExpr	elementTemplatePack = \"\"
>38087	PrimaryExpression	\"\"
>38088	Identifier	elementTemplatePack
>38089	ExpressionStatement	 
>38090	AssignmentExpr	sceneName = \"\"
>38091	PrimaryExpression	\"\"
>38092	Identifier	sceneName
>38093	ExpressionStatement	 
>38094	AssignmentExpr	sceneColor = Vector ( 1 , 1 , 1 )
>38095	CallExpression	Vector ( 1 , 1 , 1 )
>38096	ArgumentList	1
>38097	Argument	1
>38098	PrimaryExpression	1
>38099	Argument	1
>38100	PrimaryExpression	1
>38101	Argument	1
>38102	PrimaryExpression	1
>38103	Callee	Vector
>38104	Identifier	Vector
>38105	Identifier	sceneColor
>38106	ExpressionStatement	 
>38107	AssignmentExpr	paused = false
>38108	Identifier	false
>38109	Identifier	paused
>38110	ExpressionStatement	 
>38111	AssignmentExpr	runGameOverScript = false
>38112	Identifier	false
>38113	Identifier	runGameOverScript
>38114	ExpressionStatement	 
>38115	AssignmentExpr	deathTimer = 0.9
>38116	PrimaryExpression	0.9
>38117	Identifier	deathTimer
>38118	ExpressionStatement	 
>38119	AssignmentExpr	saveFile = 0
>38120	PrimaryExpression	0
>38121	Identifier	saveFile
>38122	ExpressionStatement	 
>38123	AssignmentExpr	maxLookDistance = 600
>38124	PrimaryExpression	600
>38125	Identifier	maxLookDistance
>38126	ExpressionStatement	 
>38127	AssignmentExpr	maxZoom = - 1
>38128	UnaryOp	- 1
>38129	PrimaryExpression	1
>38130	UnaryOperator	-
>38131	Identifier	maxZoom
>38132	ExpressionStatement	 
>38133	AssignmentExpr	grad = 0
>38134	PrimaryExpression	0
>38135	Identifier	grad
>38136	ExpressionStatement	 
>38137	AssignmentExpr	backgroundImageRepeat = 1
>38138	PrimaryExpression	1
>38139	Identifier	backgroundImageRepeat
>38140	ExpressionStatement	 
>38141	AssignmentExpr	dsq -> getRenderObjectLayer ( LR_BLACKGROUND ) -> update = false
>38142	Identifier	false
>38143	PtrMemberAccess	dsq -> getRenderObjectLayer ( LR_BLACKGROUND ) -> update
>38144	Identifier	update
>38145	CallExpression	dsq -> getRenderObjectLayer ( LR_BLACKGROUND )
>38146	ArgumentList	LR_BLACKGROUND
>38147	Argument	LR_BLACKGROUND
>38148	Identifier	LR_BLACKGROUND
>38149	Callee	dsq -> getRenderObjectLayer
>38150	PtrMemberAccess	dsq -> getRenderObjectLayer
>38151	Identifier	getRenderObjectLayer
>38152	Identifier	dsq
>38153	ExpressionStatement	 
>38154	AssignmentExpr	currentInventoryPage = 0
>38155	PrimaryExpression	0
>38156	Identifier	currentInventoryPage
>38157	ExpressionStatement	 
>38158	AssignmentExpr	waterLevel = saveWaterLevel = 0
>38159	AssignmentExpr	saveWaterLevel = 0
>38160	PrimaryExpression	0
>38161	Identifier	saveWaterLevel
>38162	Identifier	waterLevel
>38163	ExpressionStatement	 
>38164	AssignmentExpr	useWaterLevel = false
>38165	Identifier	false
>38166	Identifier	useWaterLevel
>38167	ExpressionStatement	 
>38168	AssignmentExpr	sceneFlipped = false
>38169	Identifier	false
>38170	Identifier	sceneFlipped
>38171	ExpressionStatement	 
>38172	AssignmentExpr	inGameMenu = false
>38173	Identifier	false
>38174	Identifier	inGameMenu
>38175	ExpressionStatement	 
>38176	CallExpression	clearObsRows ( )
>38177	ArgumentList	 
>38178	Callee	clearObsRows
>38179	Identifier	clearObsRows
>38180	ExpressionStatement	 
>38181	AssignmentExpr	backdropQuad = 0
>38182	PrimaryExpression	0
>38183	Identifier	backdropQuad
>38184	ExpressionStatement	 
>38185	CallExpression	Shot 
>38186	ArgumentList	 
>38187	Callee	Shot 
>38188	MemberAccess	Shot 
>38189	Identifier	clear
>38190	Identifier	Shot 
>38191	ExpressionStatement	 
>38192	CallExpression	Shot 
>38193	ArgumentList	 
>38194	Callee	Shot 
>38195	MemberAccess	Shot 
>38196	Identifier	clear
>38197	Identifier	Shot 
>38198	IfStatement	if ( core -> afterEffectManager )
>38199	CompoundStatement	 
>38200	ExpressionStatement	 
>38201	CallExpression	core -> afterEffectManager -> clear ( )
>38202	ArgumentList	 
>38203	Callee	core -> afterEffectManager -> clear
>38204	PtrMemberAccess	core -> afterEffectManager -> clear
>38205	Identifier	clear
>38206	PtrMemberAccess	core -> afterEffectManager
>38207	Identifier	afterEffectManager
>38208	Identifier	core
>38209	Condition	 
>38210	PtrMemberAccess	core -> afterEffectManager
>38211	Identifier	afterEffectManager
>38212	Identifier	core
>38213	ExpressionStatement	 
>38214	AssignmentExpr	sceneColor3 = Vector ( 1 , 1 , 1 )
>38215	CallExpression	Vector ( 1 , 1 , 1 )
>38216	ArgumentList	1
>38217	Argument	1
>38218	PrimaryExpression	1
>38219	Argument	1
>38220	PrimaryExpression	1
>38221	Argument	1
>38222	PrimaryExpression	1
>38223	Callee	Vector
>38224	Identifier	Vector
>38225	Identifier	sceneColor3
>38226	ExpressionStatement	 
>38227	AssignmentExpr	sceneColor2 = Vector ( 1 , 1 , 1 )
>38228	CallExpression	Vector ( 1 , 1 , 1 )
>38229	ArgumentList	1
>38230	Argument	1
>38231	PrimaryExpression	1
>38232	Argument	1
>38233	PrimaryExpression	1
>38234	Argument	1
>38235	PrimaryExpression	1
>38236	Callee	Vector
>38237	Identifier	Vector
>38238	Identifier	sceneColor2
>38239	ExpressionStatement	 
>38240	AssignmentExpr	playingSongInMenu = - 1
>38241	UnaryOp	- 1
>38242	PrimaryExpression	1
>38243	UnaryOperator	-
>38244	Identifier	playingSongInMenu
>38245	ExpressionStatement	 
>38246	AssignmentExpr	cameraLerpDelay = 0
>38247	PrimaryExpression	0
>38248	Identifier	cameraLerpDelay
>38249	ExpressionStatement	 
>38250	CallExpression	ignoredActions . clear ( )
>38251	ArgumentList	 
>38252	Callee	ignoredActions . clear
>38253	MemberAccess	ignoredActions . clear
>38254	Identifier	clear
>38255	Identifier	ignoredActions
>38256	ExpressionStatement	 
>38257	CallExpression	dsq -> resetLayerPasses ( )
>38258	ArgumentList	 
>38259	Callee	dsq -> resetLayerPasses
>38260	PtrMemberAccess	dsq -> resetLayerPasses
>38261	Identifier	resetLayerPasses
>38262	Identifier	dsq
>38263	ForStatement	for ( i = LR_ELEMENTS10 ; i <= LR_ELEMENTS16 ; i ++ )
>38264	CompoundStatement	 
>38265	ExpressionStatement	 
>38266	AssignmentExpr	l -> followCameraLock = 0
>38267	PrimaryExpression	0
>38268	PtrMemberAccess	l -> followCameraLock
>38269	Identifier	followCameraLock
>38270	Identifier	l
>38271	ExpressionStatement	 
>38272	AssignmentExpr	l -> followCamera = 0
>38273	PrimaryExpression	0
>38274	PtrMemberAccess	l -> followCamera
>38275	Identifier	followCamera
>38276	Identifier	l
>38277	ExpressionStatement	 
>38278	AssignmentExpr	l = & dsq -> renderObjectLayers [ i ]
>38279	UnaryOp	& dsq -> renderObjectLayers [ i ]
>38280	ArrayIndexing	dsq -> renderObjectLayers [ i ]
>38281	Identifier	i
>38282	PtrMemberAccess	dsq -> renderObjectLayers
>38283	Identifier	renderObjectLayers
>38284	Identifier	dsq
>38285	UnaryOperator	&
>38286	Identifier	l
>38287	IncDecOp	 
>38288	IncDec	++
>38289	Identifier	i
>38290	Condition	 
>38291	RelationalExpression	i <= LR_ELEMENTS16
>38292	Identifier	LR_ELEMENTS16
>38293	Identifier	i
>38294	ForInit	 
>38295	AssignmentExpr	i = LR_ELEMENTS10
>38296	Identifier	LR_ELEMENTS10
>38297	Identifier	i
>38298	IdentifierDeclStatement	 
>38299	IdentifierDecl	* l = 0
>38300	AssignmentExpr	* l = 0
>38301	PrimaryExpression	0
>38302	Identifier	l
>38303	Identifier	l
>38304	IdentifierDeclType	RenderObjectLayer *
>38305	ExpressionStatement	 
>38306	AssignmentExpr	cameraConstrained = true
>38307	Identifier	true
>38308	Identifier	cameraConstrained
>38309	ExpressionStatement	 
>38310	AssignmentExpr	controlHintTimer = 0
>38311	PrimaryExpression	0
>38312	Identifier	controlHintTimer
>38313	ExpressionStatement	 
>38314	CallExpression	dsq -> applyParallaxUserSettings ( )
>38315	ArgumentList	 
>38316	Callee	dsq -> applyParallaxUserSettings
>38317	PtrMemberAccess	dsq -> applyParallaxUserSettings
>38318	Identifier	applyParallaxUserSettings
>38319	Identifier	dsq
>38320	ForStatement	for ( i = LR_ELEMENTS1 ; i <= LR_ELEMENTS12 ; i ++ )
>38321	CompoundStatement	 
>38322	ExpressionStatement	 
>38323	CallExpression	dsq -> game -> setElementLayerVisible ( i - LR_ELEMENTS1 , true )
>38324	ArgumentList	i - LR_ELEMENTS1
>38325	Argument	true
>38326	Identifier	true
>38327	Argument	i - LR_ELEMENTS1
>38328	AdditiveExpression	i - LR_ELEMENTS1
>38329	Identifier	LR_ELEMENTS1
>38330	Identifier	i
>38331	Callee	dsq -> game -> setElementLayerVisible
>38332	PtrMemberAccess	dsq -> game -> setElementLayerVisible
>38333	Identifier	setElementLayerVisible
>38334	PtrMemberAccess	dsq -> game
>38335	Identifier	game
>38336	Identifier	dsq
>38337	IncDecOp	 
>38338	IncDec	++
>38339	Identifier	i
>38340	Condition	 
>38341	RelationalExpression	i <= LR_ELEMENTS12
>38342	Identifier	LR_ELEMENTS12
>38343	Identifier	i
>38344	ForInit	 
>38345	AssignmentExpr	i = LR_ELEMENTS1
>38346	Identifier	LR_ELEMENTS1
>38347	Identifier	i
>38348	ExpressionStatement	 
>38349	AssignmentExpr	dsq -> overlay -> color = 0
>38350	PrimaryExpression	0
>38351	PtrMemberAccess	dsq -> overlay -> color
>38352	Identifier	color
>38353	PtrMemberAccess	dsq -> overlay
>38354	Identifier	overlay
>38355	Identifier	dsq
>38356	ExpressionStatement	 
>38357	AssignmentExpr	dsq -> overlay -> alpha = 1
>38358	PrimaryExpression	1
>38359	PtrMemberAccess	dsq -> overlay -> alpha
>38360	Identifier	alpha
>38361	PtrMemberAccess	dsq -> overlay
>38362	Identifier	overlay
>38363	Identifier	dsq
>38364	ExpressionStatement	 
>38365	CallExpression	debugLog ( \"Entering Game
>38366	ArgumentList	\"Entering Game
>38367	Argument	\"Entering Game
>38368	PrimaryExpression	\"Entering Game
>38369	Callee	debugLog
>38370	Identifier	debugLog
>38371	IdentifierDeclStatement	 
>38372	IdentifierDecl	i = 0
>38373	AssignmentExpr	i = 0
>38374	PrimaryExpression	0
>38375	Identifier	i
>38376	Identifier	i
>38377	IdentifierDeclType	int
>38378	ExpressionStatement	 
>38379	AssignmentExpr	inGameMenuExitState = 0
>38380	PrimaryExpression	0
>38381	Identifier	inGameMenuExitState
>38382	ExpressionStatement	 
>38383	AssignmentExpr	controlHint_ignoreClear = false
>38384	Identifier	false
>38385	Identifier	controlHint_ignoreClear
>38386	ExpressionStatement	 
>38387	AssignmentExpr	core -> particleManager -> specialFunction = game_wibbleParticle
>38388	Identifier	game_wibbleParticle
>38389	PtrMemberAccess	core -> particleManager -> specialFunction
>38390	Identifier	specialFunction
>38391	PtrMemberAccess	core -> particleManager
>38392	Identifier	particleManager
>38393	Identifier	core
>38394	ExpressionStatement	 
>38395	AssignmentExpr	core -> particleManager -> collideFunction = game_collideParticle
>38396	Identifier	game_collideParticle
>38397	PtrMemberAccess	core -> particleManager -> collideFunction
>38398	Identifier	collideFunction
>38399	PtrMemberAccess	core -> particleManager
>38400	Identifier	particleManager
>38401	Identifier	core
>38402	ExpressionStatement	 
>38403	AssignmentExpr	image = 0
>38404	PrimaryExpression	0
>38405	Identifier	image
>38406	ExpressionStatement	 
>38407	AssignmentExpr	songLineRender = 0
>38408	PrimaryExpression	0
>38409	Identifier	songLineRender
>38410	ExpressionStatement	 
>38411	AssignmentExpr	bNatural = false
>38412	Identifier	false
>38413	Identifier	bNatural
>38414	ExpressionStatement	 
>38415	AssignmentExpr	core -> particlesPaused = false
>38416	Identifier	false
>38417	PtrMemberAccess	core -> particlesPaused
>38418	Identifier	particlesPaused
>38419	Identifier	core
>38420	ExpressionStatement	 
>38421	AssignmentExpr	shuttingDownGameState = false
>38422	Identifier	false
>38423	Identifier	shuttingDownGameState
>38424	ExpressionStatement	 
>38425	AssignmentExpr	cameraFollowEntity = 0
>38426	PrimaryExpression	0
>38427	Identifier	cameraFollowEntity
>38428	ExpressionStatement	 
>38429	AssignmentExpr	cameraFollowObject = 0
>38430	PrimaryExpression	0
>38431	Identifier	cameraFollowObject
>38432	ExpressionStatement	 
>38433	AssignmentExpr	halfTimer = 0
>38434	PrimaryExpression	0
>38435	Identifier	halfTimer
>38436	ExpressionStatement	 
>38437	AssignmentExpr	timer = 0
>38438	PrimaryExpression	0
>38439	Identifier	timer
>38440	ExpressionStatement	 
>38441	AssignmentExpr	saveMusic = \"\"
>38442	PrimaryExpression	\"\"
>38443	Identifier	saveMusic
>38444	ExpressionStatement	 
>38445	AssignmentExpr	lastBgSfxLoop = - 1
>38446	UnaryOp	- 1
>38447	PrimaryExpression	1
>38448	UnaryOperator	-
>38449	Identifier	lastBgSfxLoop
>38450	ExpressionStatement	 
>38451	AssignmentExpr	bgSfxLoopPlaying2 = \"\"
>38452	PrimaryExpression	\"\"
>38453	Identifier	bgSfxLoopPlaying2
>38454	ExpressionStatement	 
>38455	AssignmentExpr	currentPet = 0
>38456	PrimaryExpression	0
>38457	Identifier	currentPet
>38458	ExpressionStatement	 
>38459	AssignmentExpr	foodMenu = optionsMenu = petMenu = treasureMenu = false
>38460	AssignmentExpr	optionsMenu = petMenu = treasureMenu = false
>38461	AssignmentExpr	petMenu = treasureMenu = false
>38462	AssignmentExpr	treasureMenu = false
>38463	Identifier	false
>38464	Identifier	treasureMenu
>38465	Identifier	petMenu
>38466	Identifier	optionsMenu
>38467	Identifier	foodMenu
>38468	ExpressionStatement	 
>38469	CallExpression	dropIngrNames . clear ( )
>38470	ArgumentList	 
>38471	Callee	dropIngrNames . clear
>38472	MemberAccess	dropIngrNames . clear
>38473	Identifier	clear
>38474	Identifier	dropIngrNames
>38475	ExpressionStatement	 
>38476	CallExpression	particleManager -> setNumSuckPositions ( 10 )
>38477	ArgumentList	10
>38478	Argument	10
>38479	PrimaryExpression	10
>38480	Callee	particleManager -> setNumSuckPositions
>38481	PtrMemberAccess	particleManager -> setNumSuckPositions
>38482	Identifier	setNumSuckPositions
>38483	Identifier	particleManager
>38484	ExpressionStatement	 
>38485	AssignmentExpr	worldMapIndex = - 1
>38486	UnaryOp	- 1
>38487	PrimaryExpression	1
>38488	UnaryOperator	-
>38489	Identifier	worldMapIndex
>38490	ExpressionStatement	 
>38491	CallExpression	controlHintNotes . clear ( )
>38492	ArgumentList	 
>38493	Callee	controlHintNotes . clear
>38494	MemberAccess	controlHintNotes . clear
>38495	Identifier	clear
>38496	Identifier	controlHintNotes
>38497	ExpressionStatement	 
>38498	AssignmentExpr	invincibleOnNested = true
>38499	Identifier	true
>38500	Identifier	invincibleOnNested
>38501	ExpressionStatement	 
>38502	AssignmentExpr	firstSchoolFish = true
>38503	Identifier	true
>38504	Identifier	firstSchoolFish
>38505	ExpressionStatement	 
>38506	AssignmentExpr	hasPlayedLow = false
>38507	Identifier	false
>38508	Identifier	hasPlayedLow
>38509	ExpressionStatement	 
>38510	AssignmentExpr	active = true
>38511	Identifier	true
>38512	Identifier	active
>38513	ExpressionStatement	 
>38514	AssignmentExpr	activation = true
>38515	Identifier	true
>38516	Identifier	activation
>38517	ExpressionStatement	 
>38518	CallExpression	dsq -> toggleVersionLabel ( false )
>38519	ArgumentList	false
>38520	Argument	false
>38521	Identifier	false
>38522	Callee	dsq -> toggleVersionLabel
>38523	PtrMemberAccess	dsq -> toggleVersionLabel
>38524	Identifier	toggleVersionLabel
>38525	Identifier	dsq
>38526	ExpressionStatement	 
>38527	AssignmentExpr	cookDelay = 0
>38528	PrimaryExpression	0
>38529	Identifier	cookDelay
>38530	ExpressionStatement	 
>38531	AssignmentExpr	AquariaGuiElement 
>38532	Identifier	true
>38533	Identifier	AquariaGuiElement 
>38534	ExpressionStatement	 
>38535	AssignmentExpr	ingOffYTimer = 0
>38536	PrimaryExpression	0
>38537	Identifier	ingOffYTimer
>38538	ExpressionStatement	 
>38539	AssignmentExpr	ingOffY = 0
>38540	PrimaryExpression	0
>38541	Identifier	ingOffY
>38542	ExpressionStatement	 
>38543	AssignmentExpr	cameraOffBounds = false
>38544	Identifier	false
>38545	Identifier	cameraOffBounds
>38546	ExpressionStatement	 
>38547	AssignmentExpr	moveFoodSlotToFront = 0
>38548	PrimaryExpression	0
>38549	Identifier	moveFoodSlotToFront
>38550	ExpressionStatement	 
>38551	CallExpression	dsq -> setTexturePointers ( )
>38552	ArgumentList	 
>38553	Callee	dsq -> setTexturePointers
>38554	PtrMemberAccess	dsq -> setTexturePointers
>38555	Identifier	setTexturePointers
>38556	Identifier	dsq
>38557	ExpressionStatement	 
>38558	CallExpression	dsq -> toggleBlackBars ( false )
>38559	ArgumentList	false
>38560	Argument	false
>38561	Identifier	false
>38562	Callee	dsq -> toggleBlackBars
>38563	PtrMemberAccess	dsq -> toggleBlackBars
>38564	Identifier	toggleBlackBars
>38565	Identifier	dsq
>38566	ExpressionStatement	 
>38567	AssignmentExpr	enqueuedPreviewRecipe = 0
>38568	PrimaryExpression	0
>38569	Identifier	enqueuedPreviewRecipe
>38570	ExpressionStatement	 
>38571	AssignmentExpr	isCooking = false
>38572	Identifier	false
>38573	Identifier	isCooking
>38574	ExpressionStatement	 
>38575	CallExpression	dsq -> collectScriptGarbage ( )
>38576	ArgumentList	 
>38577	Callee	dsq -> collectScriptGarbage
>38578	PtrMemberAccess	dsq -> collectScriptGarbage
>38579	Identifier	collectScriptGarbage
>38580	Identifier	dsq
>38581	IfStatement	if ( sceneToLoad == \"title\" && dsq -> mod . isShuttingDown ( ) )
>38582	CompoundStatement	 
>38583	IfStatement	if ( dsq -> mod . isActive ( ) )
>38584	CompoundStatement	 
>38585	ExpressionStatement	 
>38586	CallExpression	dsq -> continuity . reset ( )
>38587	ArgumentList	 
>38588	Callee	dsq -> continuity . reset
>38589	MemberAccess	dsq -> continuity . reset
>38590	Identifier	reset
>38591	PtrMemberAccess	dsq -> continuity
>38592	Identifier	continuity
>38593	Identifier	dsq
>38594	ExpressionStatement	 
>38595	CallExpression	dsq -> mod . stop ( )
>38596	ArgumentList	 
>38597	Callee	dsq -> mod . stop
>38598	MemberAccess	dsq -> mod . stop
>38599	Identifier	stop
>38600	PtrMemberAccess	dsq -> mod
>38601	Identifier	mod
>38602	Identifier	dsq
>38603	Condition	 
>38604	CallExpression	dsq -> mod . isActive ( )
>38605	ArgumentList	 
>38606	Callee	dsq -> mod . isActive
>38607	MemberAccess	dsq -> mod . isActive
>38608	Identifier	isActive
>38609	PtrMemberAccess	dsq -> mod
>38610	Identifier	mod
>38611	Identifier	dsq
>38612	Condition	 
>38613	AndExpression	sceneToLoad == \"title\" && dsq -> mod . isShuttingDown ( )
>38614	CallExpression	dsq -> mod . isShuttingDown ( )
>38615	ArgumentList	 
>38616	Callee	dsq -> mod . isShuttingDown
>38617	MemberAccess	dsq -> mod . isShuttingDown
>38618	Identifier	isShuttingDown
>38619	PtrMemberAccess	dsq -> mod
>38620	Identifier	mod
>38621	Identifier	dsq
>38622	EqualityExpression	sceneToLoad == \"title\"
>38623	PrimaryExpression	\"title\"
>38624	Identifier	sceneToLoad
>38625	ExpressionStatement	 
>38626	AssignmentExpr	dsq -> returnToScene = \"\"
>38627	PrimaryExpression	\"\"
>38628	PtrMemberAccess	dsq -> returnToScene
>38629	Identifier	returnToScene
>38630	Identifier	dsq
>38631	ExpressionStatement	 
>38632	AssignmentExpr	helpBG2 = 0
>38633	PrimaryExpression	0
>38634	Identifier	helpBG2
>38635	ExpressionStatement	 
>38636	AssignmentExpr	helpBG = 0
>38637	PrimaryExpression	0
>38638	Identifier	helpBG
>38639	ExpressionStatement	 
>38640	AssignmentExpr	inHelpScreen = false
>38641	Identifier	false
>38642	Identifier	inHelpScreen
>38643	ExpressionStatement	 
>38644	AssignmentExpr	helpUp = helpDown = 0
>38645	AssignmentExpr	helpDown = 0
>38646	PrimaryExpression	0
>38647	Identifier	helpDown
>38648	Identifier	helpUp
>38649	ExpressionStatement	 
>38650	AssignmentExpr	helpText = 0
>38651	PrimaryExpression	0
>38652	Identifier	helpText
>38653	ExpressionStatement	 
>38654	AssignmentExpr	applyingState = true
>38655	Identifier	true
>38656	Identifier	applyingState
>38657	IdentifierDeclStatement	 
>38658	IdentifierDecl	verbose = true
>38659	AssignmentExpr	verbose = true
>38660	Identifier	true
>38661	Identifier	true
>38662	Identifier	verbose
>38663	IdentifierDeclType	bool
>39052	FunctionDef	Game 
>39053	ParameterList	 
>39054	ReturnType	void
>39055	CompoundStatement	 
>39056	IfStatement	if ( worldMapRender )
>39057	ExpressionStatement	 
>39058	CallExpression	worldMapRender -> bindInput ( )
>39059	ArgumentList	 
>39060	Callee	worldMapRender -> bindInput
>39061	PtrMemberAccess	worldMapRender -> bindInput
>39062	Identifier	bindInput
>39063	Identifier	worldMapRender
>39064	Condition	 
>39065	Identifier	worldMapRender
>39066	IfStatement	if ( avatar )
>39067	ExpressionStatement	 
>39068	CallExpression	avatar -> bindInput ( )
>39069	ArgumentList	 
>39070	Callee	avatar -> bindInput
>39071	PtrMemberAccess	avatar -> bindInput
>39072	Identifier	bindInput
>39073	Identifier	avatar
>39074	Condition	 
>39075	Identifier	avatar
>39076	ExpressionStatement	 
>39077	CallExpression	dsq -> user . control . actionSet . importAction ( this , \"Roll\" , ACTION_ROLL )
>39078	ArgumentList	this
>39079	Argument	ACTION_ROLL
>39080	Identifier	ACTION_ROLL
>39081	Argument	\"Roll\"
>39082	PrimaryExpression	\"Roll\"
>39083	Argument	this
>39084	Identifier	this
>39085	Callee	dsq -> user . control . actionSet . importAction
>39086	MemberAccess	dsq -> user . control . actionSet . importAction
>39087	Identifier	importAction
>39088	MemberAccess	dsq -> user . control . actionSet
>39089	Identifier	actionSet
>39090	MemberAccess	dsq -> user . control
>39091	Identifier	control
>39092	PtrMemberAccess	dsq -> user
>39093	Identifier	user
>39094	Identifier	dsq
>39095	ExpressionStatement	 
>39096	CallExpression	dsq -> user . control . actionSet . importAction ( this , \"Look\" , ACTION_LOOK )
>39097	ArgumentList	this
>39098	Argument	ACTION_LOOK
>39099	Identifier	ACTION_LOOK
>39100	Argument	\"Look\"
>39101	PrimaryExpression	\"Look\"
>39102	Argument	this
>39103	Identifier	this
>39104	Callee	dsq -> user . control . actionSet . importAction
>39105	MemberAccess	dsq -> user . control . actionSet . importAction
>39106	Identifier	importAction
>39107	MemberAccess	dsq -> user . control . actionSet
>39108	Identifier	actionSet
>39109	MemberAccess	dsq -> user . control
>39110	Identifier	control
>39111	PtrMemberAccess	dsq -> user
>39112	Identifier	user
>39113	Identifier	dsq
>39114	ExpressionStatement	 
>39115	CallExpression	dsq -> user . control . actionSet . importAction ( this , \"Revert\" , ACTION_REVERT )
>39116	ArgumentList	this
>39117	Argument	ACTION_REVERT
>39118	Identifier	ACTION_REVERT
>39119	Argument	\"Revert\"
>39120	PrimaryExpression	\"Revert\"
>39121	Argument	this
>39122	Identifier	this
>39123	Callee	dsq -> user . control . actionSet . importAction
>39124	MemberAccess	dsq -> user . control . actionSet . importAction
>39125	Identifier	importAction
>39126	MemberAccess	dsq -> user . control . actionSet
>39127	Identifier	actionSet
>39128	MemberAccess	dsq -> user . control
>39129	Identifier	control
>39130	PtrMemberAccess	dsq -> user
>39131	Identifier	user
>39132	Identifier	dsq
>39133	ExpressionStatement	 
>39134	CallExpression	dsq -> user . control . actionSet . importAction ( this , \"SongSlot10\" , ACTION_SONGSLOT10 )
>39135	ArgumentList	this
>39136	Argument	ACTION_SONGSLOT10
>39137	Identifier	ACTION_SONGSLOT10
>39138	Argument	\"SongSlot10\"
>39139	PrimaryExpression	\"SongSlot10\"
>39140	Argument	this
>39141	Identifier	this
>39142	Callee	dsq -> user . control . actionSet . importAction
>39143	MemberAccess	dsq -> user . control . actionSet . importAction
>39144	Identifier	importAction
>39145	MemberAccess	dsq -> user . control . actionSet
>39146	Identifier	actionSet
>39147	MemberAccess	dsq -> user . control
>39148	Identifier	control
>39149	PtrMemberAccess	dsq -> user
>39150	Identifier	user
>39151	Identifier	dsq
>39152	ExpressionStatement	 
>39153	CallExpression	dsq -> user . control . actionSet . importAction ( this , \"SongSlot9\" , ACTION_SONGSLOT9 )
>39154	ArgumentList	this
>39155	Argument	ACTION_SONGSLOT9
>39156	Identifier	ACTION_SONGSLOT9
>39157	Argument	\"SongSlot9\"
>39158	PrimaryExpression	\"SongSlot9\"
>39159	Argument	this
>39160	Identifier	this
>39161	Callee	dsq -> user . control . actionSet . importAction
>39162	MemberAccess	dsq -> user . control . actionSet . importAction
>39163	Identifier	importAction
>39164	MemberAccess	dsq -> user . control . actionSet
>39165	Identifier	actionSet
>39166	MemberAccess	dsq -> user . control
>39167	Identifier	control
>39168	PtrMemberAccess	dsq -> user
>39169	Identifier	user
>39170	Identifier	dsq
>39171	ExpressionStatement	 
>39172	CallExpression	dsq -> user . control . actionSet . importAction ( this , \"SongSlot8\" , ACTION_SONGSLOT8 )
>39173	ArgumentList	this
>39174	Argument	ACTION_SONGSLOT8
>39175	Identifier	ACTION_SONGSLOT8
>39176	Argument	\"SongSlot8\"
>39177	PrimaryExpression	\"SongSlot8\"
>39178	Argument	this
>39179	Identifier	this
>39180	Callee	dsq -> user . control . actionSet . importAction
>39181	MemberAccess	dsq -> user . control . actionSet . importAction
>39182	Identifier	importAction
>39183	MemberAccess	dsq -> user . control . actionSet
>39184	Identifier	actionSet
>39185	MemberAccess	dsq -> user . control
>39186	Identifier	control
>39187	PtrMemberAccess	dsq -> user
>39188	Identifier	user
>39189	Identifier	dsq
>39190	ExpressionStatement	 
>39191	CallExpression	dsq -> user . control . actionSet . importAction ( this , \"SongSlot7\" , ACTION_SONGSLOT7 )
>39192	ArgumentList	this
>39193	Argument	ACTION_SONGSLOT7
>39194	Identifier	ACTION_SONGSLOT7
>39195	Argument	\"SongSlot7\"
>39196	PrimaryExpression	\"SongSlot7\"
>39197	Argument	this
>39198	Identifier	this
>39199	Callee	dsq -> user . control . actionSet . importAction
>39200	MemberAccess	dsq -> user . control . actionSet . importAction
>39201	Identifier	importAction
>39202	MemberAccess	dsq -> user . control . actionSet
>39203	Identifier	actionSet
>39204	MemberAccess	dsq -> user . control
>39205	Identifier	control
>39206	PtrMemberAccess	dsq -> user
>39207	Identifier	user
>39208	Identifier	dsq
>39209	ExpressionStatement	 
>39210	CallExpression	dsq -> user . control . actionSet . importAction ( this , \"SongSlot6\" , ACTION_SONGSLOT6 )
>39211	ArgumentList	this
>39212	Argument	ACTION_SONGSLOT6
>39213	Identifier	ACTION_SONGSLOT6
>39214	Argument	\"SongSlot6\"
>39215	PrimaryExpression	\"SongSlot6\"
>39216	Argument	this
>39217	Identifier	this
>39218	Callee	dsq -> user . control . actionSet . importAction
>39219	MemberAccess	dsq -> user . control . actionSet . importAction
>39220	Identifier	importAction
>39221	MemberAccess	dsq -> user . control . actionSet
>39222	Identifier	actionSet
>39223	MemberAccess	dsq -> user . control
>39224	Identifier	control
>39225	PtrMemberAccess	dsq -> user
>39226	Identifier	user
>39227	Identifier	dsq
>39228	ExpressionStatement	 
>39229	CallExpression	dsq -> user . control . actionSet . importAction ( this , \"SongSlot5\" , ACTION_SONGSLOT5 )
>39230	ArgumentList	this
>39231	Argument	ACTION_SONGSLOT5
>39232	Identifier	ACTION_SONGSLOT5
>39233	Argument	\"SongSlot5\"
>39234	PrimaryExpression	\"SongSlot5\"
>39235	Argument	this
>39236	Identifier	this
>39237	Callee	dsq -> user . control . actionSet . importAction
>39238	MemberAccess	dsq -> user . control . actionSet . importAction
>39239	Identifier	importAction
>39240	MemberAccess	dsq -> user . control . actionSet
>39241	Identifier	actionSet
>39242	MemberAccess	dsq -> user . control
>39243	Identifier	control
>39244	PtrMemberAccess	dsq -> user
>39245	Identifier	user
>39246	Identifier	dsq
>39247	ExpressionStatement	 
>39248	CallExpression	dsq -> user . control . actionSet . importAction ( this , \"SongSlot4\" , ACTION_SONGSLOT4 )
>39249	ArgumentList	this
>39250	Argument	ACTION_SONGSLOT4
>39251	Identifier	ACTION_SONGSLOT4
>39252	Argument	\"SongSlot4\"
>39253	PrimaryExpression	\"SongSlot4\"
>39254	Argument	this
>39255	Identifier	this
>39256	Callee	dsq -> user . control . actionSet . importAction
>39257	MemberAccess	dsq -> user . control . actionSet . importAction
>39258	Identifier	importAction
>39259	MemberAccess	dsq -> user . control . actionSet
>39260	Identifier	actionSet
>39261	MemberAccess	dsq -> user . control
>39262	Identifier	control
>39263	PtrMemberAccess	dsq -> user
>39264	Identifier	user
>39265	Identifier	dsq
>39266	ExpressionStatement	 
>39267	CallExpression	dsq -> user . control . actionSet . importAction ( this , \"SongSlot3\" , ACTION_SONGSLOT3 )
>39268	ArgumentList	this
>39269	Argument	ACTION_SONGSLOT3
>39270	Identifier	ACTION_SONGSLOT3
>39271	Argument	\"SongSlot3\"
>39272	PrimaryExpression	\"SongSlot3\"
>39273	Argument	this
>39274	Identifier	this
>39275	Callee	dsq -> user . control . actionSet . importAction
>39276	MemberAccess	dsq -> user . control . actionSet . importAction
>39277	Identifier	importAction
>39278	MemberAccess	dsq -> user . control . actionSet
>39279	Identifier	actionSet
>39280	MemberAccess	dsq -> user . control
>39281	Identifier	control
>39282	PtrMemberAccess	dsq -> user
>39283	Identifier	user
>39284	Identifier	dsq
>39285	ExpressionStatement	 
>39286	CallExpression	dsq -> user . control . actionSet . importAction ( this , \"SongSlot2\" , ACTION_SONGSLOT2 )
>39287	ArgumentList	this
>39288	Argument	ACTION_SONGSLOT2
>39289	Identifier	ACTION_SONGSLOT2
>39290	Argument	\"SongSlot2\"
>39291	PrimaryExpression	\"SongSlot2\"
>39292	Argument	this
>39293	Identifier	this
>39294	Callee	dsq -> user . control . actionSet . importAction
>39295	MemberAccess	dsq -> user . control . actionSet . importAction
>39296	Identifier	importAction
>39297	MemberAccess	dsq -> user . control . actionSet
>39298	Identifier	actionSet
>39299	MemberAccess	dsq -> user . control
>39300	Identifier	control
>39301	PtrMemberAccess	dsq -> user
>39302	Identifier	user
>39303	Identifier	dsq
>39304	ExpressionStatement	 
>39305	CallExpression	dsq -> user . control . actionSet . importAction ( this , \"SongSlot1\" , ACTION_SONGSLOT1 )
>39306	ArgumentList	this
>39307	Argument	ACTION_SONGSLOT1
>39308	Identifier	ACTION_SONGSLOT1
>39309	Argument	\"SongSlot1\"
>39310	PrimaryExpression	\"SongSlot1\"
>39311	Argument	this
>39312	Identifier	this
>39313	Callee	dsq -> user . control . actionSet . importAction
>39314	MemberAccess	dsq -> user . control . actionSet . importAction
>39315	Identifier	importAction
>39316	MemberAccess	dsq -> user . control . actionSet
>39317	Identifier	actionSet
>39318	MemberAccess	dsq -> user . control
>39319	Identifier	control
>39320	PtrMemberAccess	dsq -> user
>39321	Identifier	user
>39322	Identifier	dsq
>39323	ExpressionStatement	 
>39324	CallExpression	addAction ( ACTION_MENUDOWN , JOY1_STICK_DOWN )
>39325	ArgumentList	ACTION_MENUDOWN
>39326	Argument	JOY1_STICK_DOWN
>39327	Identifier	JOY1_STICK_DOWN
>39328	Argument	ACTION_MENUDOWN
>39329	Identifier	ACTION_MENUDOWN
>39330	Callee	addAction
>39331	Identifier	addAction
>39332	ExpressionStatement	 
>39333	CallExpression	addAction ( ACTION_MENUUP , JOY1_STICK_UP )
>39334	ArgumentList	ACTION_MENUUP
>39335	Argument	JOY1_STICK_UP
>39336	Identifier	JOY1_STICK_UP
>39337	Argument	ACTION_MENUUP
>39338	Identifier	ACTION_MENUUP
>39339	Callee	addAction
>39340	Identifier	addAction
>39341	ExpressionStatement	 
>39342	CallExpression	addAction ( ACTION_MENURIGHT , JOY1_STICK_RIGHT )
>39343	ArgumentList	ACTION_MENURIGHT
>39344	Argument	JOY1_STICK_RIGHT
>39345	Identifier	JOY1_STICK_RIGHT
>39346	Argument	ACTION_MENURIGHT
>39347	Identifier	ACTION_MENURIGHT
>39348	Callee	addAction
>39349	Identifier	addAction
>39350	ExpressionStatement	 
>39351	CallExpression	addAction ( ACTION_MENULEFT , JOY1_STICK_LEFT )
>39352	ArgumentList	ACTION_MENULEFT
>39353	Argument	JOY1_STICK_LEFT
>39354	Identifier	JOY1_STICK_LEFT
>39355	Argument	ACTION_MENULEFT
>39356	Identifier	ACTION_MENULEFT
>39357	Callee	addAction
>39358	Identifier	addAction
>39359	IfStatement	if ( dsq -> canOpenEditor ( ) )
>39360	CompoundStatement	 
>39361	ExpressionStatement	 
>39362	CallExpression	addAction ( ACTION_TOGGLEGRID , KEY_F9 )
>39363	ArgumentList	ACTION_TOGGLEGRID
>39364	Argument	KEY_F9
>39365	Identifier	KEY_F9
>39366	Argument	ACTION_TOGGLEGRID
>39367	Identifier	ACTION_TOGGLEGRID
>39368	Callee	addAction
>39369	Identifier	addAction
>39370	Condition	 
>39371	CallExpression	dsq -> canOpenEditor ( )
>39372	ArgumentList	 
>39373	Callee	dsq -> canOpenEditor
>39374	PtrMemberAccess	dsq -> canOpenEditor
>39375	Identifier	canOpenEditor
>39376	Identifier	dsq
>39377	ExpressionStatement	 
>39378	CallExpression	dsq -> user . control . actionSet . importAction ( this , \"FoodDrop\" , ACTION_FOODDROP )
>39379	ArgumentList	this
>39380	Argument	ACTION_FOODDROP
>39381	Identifier	ACTION_FOODDROP
>39382	Argument	\"FoodDrop\"
>39383	PrimaryExpression	\"FoodDrop\"
>39384	Argument	this
>39385	Identifier	this
>39386	Callee	dsq -> user . control . actionSet . importAction
>39387	MemberAccess	dsq -> user . control . actionSet . importAction
>39388	Identifier	importAction
>39389	MemberAccess	dsq -> user . control . actionSet
>39390	Identifier	actionSet
>39391	MemberAccess	dsq -> user . control
>39392	Identifier	control
>39393	PtrMemberAccess	dsq -> user
>39394	Identifier	user
>39395	Identifier	dsq
>39396	ExpressionStatement	 
>39397	CallExpression	dsq -> user . control . actionSet . importAction ( this , \"FoodRight\" , ACTION_FOODRIGHT )
>39398	ArgumentList	this
>39399	Argument	ACTION_FOODRIGHT
>39400	Identifier	ACTION_FOODRIGHT
>39401	Argument	\"FoodRight\"
>39402	PrimaryExpression	\"FoodRight\"
>39403	Argument	this
>39404	Identifier	this
>39405	Callee	dsq -> user . control . actionSet . importAction
>39406	MemberAccess	dsq -> user . control . actionSet . importAction
>39407	Identifier	importAction
>39408	MemberAccess	dsq -> user . control . actionSet
>39409	Identifier	actionSet
>39410	MemberAccess	dsq -> user . control
>39411	Identifier	control
>39412	PtrMemberAccess	dsq -> user
>39413	Identifier	user
>39414	Identifier	dsq
>39415	ExpressionStatement	 
>39416	CallExpression	dsq -> user . control . actionSet . importAction ( this , \"FoodLeft\" , ACTION_FOODLEFT )
>39417	ArgumentList	this
>39418	Argument	ACTION_FOODLEFT
>39419	Identifier	ACTION_FOODLEFT
>39420	Argument	\"FoodLeft\"
>39421	PrimaryExpression	\"FoodLeft\"
>39422	Argument	this
>39423	Identifier	this
>39424	Callee	dsq -> user . control . actionSet . importAction
>39425	MemberAccess	dsq -> user . control . actionSet . importAction
>39426	Identifier	importAction
>39427	MemberAccess	dsq -> user . control . actionSet
>39428	Identifier	actionSet
>39429	MemberAccess	dsq -> user . control
>39430	Identifier	control
>39431	PtrMemberAccess	dsq -> user
>39432	Identifier	user
>39433	Identifier	dsq
>39434	ExpressionStatement	 
>39435	CallExpression	dsq -> user . control . actionSet . importAction ( this , \"CookFood\" , ACTION_COOKFOOD )
>39436	ArgumentList	this
>39437	Argument	ACTION_COOKFOOD
>39438	Identifier	ACTION_COOKFOOD
>39439	Argument	\"CookFood\"
>39440	PrimaryExpression	\"CookFood\"
>39441	Argument	this
>39442	Identifier	this
>39443	Callee	dsq -> user . control . actionSet . importAction
>39444	MemberAccess	dsq -> user . control . actionSet . importAction
>39445	Identifier	importAction
>39446	MemberAccess	dsq -> user . control . actionSet
>39447	Identifier	actionSet
>39448	MemberAccess	dsq -> user . control
>39449	Identifier	control
>39450	PtrMemberAccess	dsq -> user
>39451	Identifier	user
>39452	Identifier	dsq
>39453	ExpressionStatement	 
>39454	CallExpression	dsq -> user . control . actionSet . importAction ( this , \"NextPage\" , ACTION_NEXTPAGE )
>39455	ArgumentList	this
>39456	Argument	ACTION_NEXTPAGE
>39457	Identifier	ACTION_NEXTPAGE
>39458	Argument	\"NextPage\"
>39459	PrimaryExpression	\"NextPage\"
>39460	Argument	this
>39461	Identifier	this
>39462	Callee	dsq -> user . control . actionSet . importAction
>39463	MemberAccess	dsq -> user . control . actionSet . importAction
>39464	Identifier	importAction
>39465	MemberAccess	dsq -> user . control . actionSet
>39466	Identifier	actionSet
>39467	MemberAccess	dsq -> user . control
>39468	Identifier	control
>39469	PtrMemberAccess	dsq -> user
>39470	Identifier	user
>39471	Identifier	dsq
>39472	ExpressionStatement	 
>39473	CallExpression	dsq -> user . control . actionSet . importAction ( this , \"PrevPage\" , ACTION_PREVPAGE )
>39474	ArgumentList	this
>39475	Argument	ACTION_PREVPAGE
>39476	Identifier	ACTION_PREVPAGE
>39477	Argument	\"PrevPage\"
>39478	PrimaryExpression	\"PrevPage\"
>39479	Argument	this
>39480	Identifier	this
>39481	Callee	dsq -> user . control . actionSet . importAction
>39482	MemberAccess	dsq -> user . control . actionSet . importAction
>39483	Identifier	importAction
>39484	MemberAccess	dsq -> user . control . actionSet
>39485	Identifier	actionSet
>39486	MemberAccess	dsq -> user . control
>39487	Identifier	control
>39488	PtrMemberAccess	dsq -> user
>39489	Identifier	user
>39490	Identifier	dsq
>39491	ExpressionStatement	 
>39492	CallExpression	dsq -> user . control . actionSet . importAction ( this , \"SwimRight\" , ACTION_SWIMRIGHT )
>39493	ArgumentList	this
>39494	Argument	ACTION_SWIMRIGHT
>39495	Identifier	ACTION_SWIMRIGHT
>39496	Argument	\"SwimRight\"
>39497	PrimaryExpression	\"SwimRight\"
>39498	Argument	this
>39499	Identifier	this
>39500	Callee	dsq -> user . control . actionSet . importAction
>39501	MemberAccess	dsq -> user . control . actionSet . importAction
>39502	Identifier	importAction
>39503	MemberAccess	dsq -> user . control . actionSet
>39504	Identifier	actionSet
>39505	MemberAccess	dsq -> user . control
>39506	Identifier	control
>39507	PtrMemberAccess	dsq -> user
>39508	Identifier	user
>39509	Identifier	dsq
>39510	ExpressionStatement	 
>39511	CallExpression	dsq -> user . control . actionSet . importAction ( this , \"SwimLeft\" , ACTION_SWIMLEFT )
>39512	ArgumentList	this
>39513	Argument	ACTION_SWIMLEFT
>39514	Identifier	ACTION_SWIMLEFT
>39515	Argument	\"SwimLeft\"
>39516	PrimaryExpression	\"SwimLeft\"
>39517	Argument	this
>39518	Identifier	this
>39519	Callee	dsq -> user . control . actionSet . importAction
>39520	MemberAccess	dsq -> user . control . actionSet . importAction
>39521	Identifier	importAction
>39522	MemberAccess	dsq -> user . control . actionSet
>39523	Identifier	actionSet
>39524	MemberAccess	dsq -> user . control
>39525	Identifier	control
>39526	PtrMemberAccess	dsq -> user
>39527	Identifier	user
>39528	Identifier	dsq
>39529	ExpressionStatement	 
>39530	CallExpression	dsq -> user . control . actionSet . importAction ( this , \"SwimDown\" , ACTION_SWIMDOWN )
>39531	ArgumentList	this
>39532	Argument	ACTION_SWIMDOWN
>39533	Identifier	ACTION_SWIMDOWN
>39534	Argument	\"SwimDown\"
>39535	PrimaryExpression	\"SwimDown\"
>39536	Argument	this
>39537	Identifier	this
>39538	Callee	dsq -> user . control . actionSet . importAction
>39539	MemberAccess	dsq -> user . control . actionSet . importAction
>39540	Identifier	importAction
>39541	MemberAccess	dsq -> user . control . actionSet
>39542	Identifier	actionSet
>39543	MemberAccess	dsq -> user . control
>39544	Identifier	control
>39545	PtrMemberAccess	dsq -> user
>39546	Identifier	user
>39547	Identifier	dsq
>39548	ExpressionStatement	 
>39549	CallExpression	dsq -> user . control . actionSet . importAction ( this , \"SwimUp\" , ACTION_SWIMUP )
>39550	ArgumentList	this
>39551	Argument	ACTION_SWIMUP
>39552	Identifier	ACTION_SWIMUP
>39553	Argument	\"SwimUp\"
>39554	PrimaryExpression	\"SwimUp\"
>39555	Argument	this
>39556	Identifier	this
>39557	Callee	dsq -> user . control . actionSet . importAction
>39558	MemberAccess	dsq -> user . control . actionSet . importAction
>39559	Identifier	importAction
>39560	MemberAccess	dsq -> user . control . actionSet
>39561	Identifier	actionSet
>39562	MemberAccess	dsq -> user . control
>39563	Identifier	control
>39564	PtrMemberAccess	dsq -> user
>39565	Identifier	user
>39566	Identifier	dsq
>39567	ExpressionStatement	 
>39568	CallExpression	dsq -> user . control . actionSet . importAction ( this , \"ToggleHelp\" , ACTION_TOGGLEHELPSCREEN )
>39569	ArgumentList	this
>39570	Argument	ACTION_TOGGLEHELPSCREEN
>39571	Identifier	ACTION_TOGGLEHELPSCREEN
>39572	Argument	\"ToggleHelp\"
>39573	PrimaryExpression	\"ToggleHelp\"
>39574	Argument	this
>39575	Identifier	this
>39576	Callee	dsq -> user . control . actionSet . importAction
>39577	MemberAccess	dsq -> user . control . actionSet . importAction
>39578	Identifier	importAction
>39579	MemberAccess	dsq -> user . control . actionSet
>39580	Identifier	actionSet
>39581	MemberAccess	dsq -> user . control
>39582	Identifier	control
>39583	PtrMemberAccess	dsq -> user
>39584	Identifier	user
>39585	Identifier	dsq
>39586	ExpressionStatement	 
>39587	CallExpression	dsq -> user . control . actionSet . importAction ( this , \"WorldMap\" , ACTION_TOGGLEWORLDMAP )
>39588	ArgumentList	this
>39589	Argument	ACTION_TOGGLEWORLDMAP
>39590	Identifier	ACTION_TOGGLEWORLDMAP
>39591	Argument	\"WorldMap\"
>39592	PrimaryExpression	\"WorldMap\"
>39593	Argument	this
>39594	Identifier	this
>39595	Callee	dsq -> user . control . actionSet . importAction
>39596	MemberAccess	dsq -> user . control . actionSet . importAction
>39597	Identifier	importAction
>39598	MemberAccess	dsq -> user . control . actionSet
>39599	Identifier	actionSet
>39600	MemberAccess	dsq -> user . control
>39601	Identifier	control
>39602	PtrMemberAccess	dsq -> user
>39603	Identifier	user
>39604	Identifier	dsq
>39605	ExpressionStatement	 
>39606	CallExpression	dsq -> user . control . actionSet . importAction ( this , \"Escape\" , ACTION_ESC )
>39607	ArgumentList	this
>39608	Argument	ACTION_ESC
>39609	Identifier	ACTION_ESC
>39610	Argument	\"Escape\"
>39611	PrimaryExpression	\"Escape\"
>39612	Argument	this
>39613	Identifier	this
>39614	Callee	dsq -> user . control . actionSet . importAction
>39615	MemberAccess	dsq -> user . control . actionSet . importAction
>39616	Identifier	importAction
>39617	MemberAccess	dsq -> user . control . actionSet
>39618	Identifier	actionSet
>39619	MemberAccess	dsq -> user . control
>39620	Identifier	control
>39621	PtrMemberAccess	dsq -> user
>39622	Identifier	user
>39623	Identifier	dsq
>39624	ExpressionStatement	 
>39625	CallExpression	dsq -> user . control . actionSet . importAction ( this , \"SecondaryAction\" , ACTION_SECONDARY )
>39626	ArgumentList	this
>39627	Argument	ACTION_SECONDARY
>39628	Identifier	ACTION_SECONDARY
>39629	Argument	\"SecondaryAction\"
>39630	PrimaryExpression	\"SecondaryAction\"
>39631	Argument	this
>39632	Identifier	this
>39633	Callee	dsq -> user . control . actionSet . importAction
>39634	MemberAccess	dsq -> user . control . actionSet . importAction
>39635	Identifier	importAction
>39636	MemberAccess	dsq -> user . control . actionSet
>39637	Identifier	actionSet
>39638	MemberAccess	dsq -> user . control
>39639	Identifier	control
>39640	PtrMemberAccess	dsq -> user
>39641	Identifier	user
>39642	Identifier	dsq
>39643	ExpressionStatement	 
>39644	CallExpression	dsq -> user . control . actionSet . importAction ( this , \"PrimaryAction\" , ACTION_PRIMARY )
>39645	ArgumentList	this
>39646	Argument	ACTION_PRIMARY
>39647	Identifier	ACTION_PRIMARY
>39648	Argument	\"PrimaryAction\"
>39649	PrimaryExpression	\"PrimaryAction\"
>39650	Argument	this
>39651	Identifier	this
>39652	Callee	dsq -> user . control . actionSet . importAction
>39653	MemberAccess	dsq -> user . control . actionSet . importAction
>39654	Identifier	importAction
>39655	MemberAccess	dsq -> user . control . actionSet
>39656	Identifier	actionSet
>39657	MemberAccess	dsq -> user . control
>39658	Identifier	control
>39659	PtrMemberAccess	dsq -> user
>39660	Identifier	user
>39661	Identifier	dsq
>39662	IfStatement	if ( dsq -> canOpenEditor ( ) )
>39663	CompoundStatement	 
>39664	ExpressionStatement	 
>39665	CallExpression	addAction ( ACTION_TOGGLESCENEEDITOR , KEY_TAB )
>39666	ArgumentList	ACTION_TOGGLESCENEEDITOR
>39667	Argument	KEY_TAB
>39668	Identifier	KEY_TAB
>39669	Argument	ACTION_TOGGLESCENEEDITOR
>39670	Identifier	ACTION_TOGGLESCENEEDITOR
>39671	Callee	addAction
>39672	Identifier	addAction
>39673	Condition	 
>39674	CallExpression	dsq -> canOpenEditor ( )
>39675	ArgumentList	 
>39676	Callee	dsq -> canOpenEditor
>39677	PtrMemberAccess	dsq -> canOpenEditor
>39678	Identifier	canOpenEditor
>39679	Identifier	dsq
>39680	ExpressionStatement	 
>39681	CallExpression	ActionMapper 
>39682	ArgumentList	 
>39683	Callee	ActionMapper 
>39684	Identifier	ActionMapper 
>39685	IfStatement	if ( ! ( this -> applyingState || this -> isActive ( ) ) )
>39686	ReturnStatement	 
>39687	Condition	 
>39688	UnaryOp	! ( this -> applyingState || this -> isActive ( ) )
>39689	OrExpression	this -> applyingState || this -> isActive ( )
>39690	CallExpression	this -> isActive ( )
>39691	ArgumentList	 
>39692	Callee	this -> isActive
>39693	PtrMemberAccess	this -> isActive
>39694	Identifier	isActive
>39695	Identifier	this
>39696	PtrMemberAccess	this -> applyingState
>39697	Identifier	applyingState
>39698	Identifier	this
>39699	UnaryOperator	!
>39769	FunctionDef	Game 
>39770	ParameterList	 
>39771	ReturnType	void
>39772	CompoundStatement	 
>39773	IfStatement	if ( currentTreasurePage > 0 )
>39774	ElseStatement	else
>39775	CompoundStatement	 
>39776	IfStatement	if ( numTreasures > 0 )
>39777	CompoundStatement	 
>39778	ExpressionStatement	 
>39779	CallExpression	refreshTreasureSlots ( )
>39780	ArgumentList	 
>39781	Callee	refreshTreasureSlots
>39782	Identifier	refreshTreasureSlots
>39783	ExpressionStatement	 
>39784	AssignmentExpr	currentTreasurePage = ( ( numTreasures - 1 ) / treasurePageSize )
>39785	MultiplicativeExpression	( numTreasures - 1 ) / treasurePageSize
>39786	Identifier	treasurePageSize
>39787	AdditiveExpression	numTreasures - 1
>39788	PrimaryExpression	1
>39789	Identifier	numTreasures
>39790	Identifier	currentTreasurePage
>39791	ExpressionStatement	 
>39792	CallExpression	dsq -> spawnParticleEffect ( \"menu-switch\" , worldLeftCenter , 0 , 0 , LR_HUD3 , 1 )
>39793	ArgumentList	\"menu-switch\"
>39794	Argument	1
>39795	PrimaryExpression	1
>39796	Argument	LR_HUD3
>39797	Identifier	LR_HUD3
>39798	Argument	0
>39799	PrimaryExpression	0
>39800	Argument	0
>39801	PrimaryExpression	0
>39802	Argument	worldLeftCenter
>39803	Identifier	worldLeftCenter
>39804	Argument	\"menu-switch\"
>39805	PrimaryExpression	\"menu-switch\"
>39806	Callee	dsq -> spawnParticleEffect
>39807	PtrMemberAccess	dsq -> spawnParticleEffect
>39808	Identifier	spawnParticleEffect
>39809	Identifier	dsq
>39810	ExpressionStatement	 
>39811	CallExpression	dsq -> sound -> playSfx ( \"menu-switch\" , 0.5 )
>39812	ArgumentList	\"menu-switch\"
>39813	Argument	0.5
>39814	PrimaryExpression	0.5
>39815	Argument	\"menu-switch\"
>39816	PrimaryExpression	\"menu-switch\"
>39817	Callee	dsq -> sound -> playSfx
>39818	PtrMemberAccess	dsq -> sound -> playSfx
>39819	Identifier	playSfx
>39820	PtrMemberAccess	dsq -> sound
>39821	Identifier	sound
>39822	Identifier	dsq
>39823	Condition	 
>39824	RelationalExpression	numTreasures > 0
>39825	PrimaryExpression	0
>39826	Identifier	numTreasures
>39827	CompoundStatement	 
>39828	ExpressionStatement	 
>39829	CallExpression	refreshTreasureSlots ( )
>39830	ArgumentList	 
>39831	Callee	refreshTreasureSlots
>39832	Identifier	refreshTreasureSlots
>39833	ExpressionStatement	 
>39834	IncDecOp	currentTreasurePage --
>39835	IncDec	--
>39836	Identifier	currentTreasurePage
>39837	ExpressionStatement	 
>39838	CallExpression	dsq -> spawnParticleEffect ( \"menu-switch\" , worldLeftCenter , 0 , 0 , LR_HUD3 , 1 )
>39839	ArgumentList	\"menu-switch\"
>39840	Argument	1
>39841	PrimaryExpression	1
>39842	Argument	LR_HUD3
>39843	Identifier	LR_HUD3
>39844	Argument	0
>39845	PrimaryExpression	0
>39846	Argument	0
>39847	PrimaryExpression	0
>39848	Argument	worldLeftCenter
>39849	Identifier	worldLeftCenter
>39850	Argument	\"menu-switch\"
>39851	PrimaryExpression	\"menu-switch\"
>39852	Callee	dsq -> spawnParticleEffect
>39853	PtrMemberAccess	dsq -> spawnParticleEffect
>39854	Identifier	spawnParticleEffect
>39855	Identifier	dsq
>39856	ExpressionStatement	 
>39857	CallExpression	dsq -> sound -> playSfx ( \"menu-switch\" , 0.5 )
>39858	ArgumentList	\"menu-switch\"
>39859	Argument	0.5
>39860	PrimaryExpression	0.5
>39861	Argument	\"menu-switch\"
>39862	PrimaryExpression	\"menu-switch\"
>39863	Callee	dsq -> sound -> playSfx
>39864	PtrMemberAccess	dsq -> sound -> playSfx
>39865	Identifier	playSfx
>39866	PtrMemberAccess	dsq -> sound
>39867	Identifier	sound
>39868	Identifier	dsq
>39869	Condition	 
>39870	RelationalExpression	currentTreasurePage > 0
>39871	PrimaryExpression	0
>39872	Identifier	currentTreasurePage
>39884	FunctionDef	Game 
>39885	ParameterList	 
>39886	ReturnType	void
>39887	CompoundStatement	 
>39888	IfStatement	if ( ( currentTreasurePage + 1 ) * treasurePageSize < numTreasures )
>39889	ElseStatement	else
>39890	CompoundStatement	 
>39891	IfStatement	if ( currentTreasurePage != 0 )
>39892	CompoundStatement	 
>39893	ExpressionStatement	 
>39894	CallExpression	refreshTreasureSlots ( )
>39895	ArgumentList	 
>39896	Callee	refreshTreasureSlots
>39897	Identifier	refreshTreasureSlots
>39898	ExpressionStatement	 
>39899	AssignmentExpr	currentTreasurePage = 0
>39900	PrimaryExpression	0
>39901	Identifier	currentTreasurePage
>39902	ExpressionStatement	 
>39903	CallExpression	dsq -> spawnParticleEffect ( \"menu-switch\" , worldLeftCenter , 0 , 0 , LR_HUD3 , 1 )
>39904	ArgumentList	\"menu-switch\"
>39905	Argument	1
>39906	PrimaryExpression	1
>39907	Argument	LR_HUD3
>39908	Identifier	LR_HUD3
>39909	Argument	0
>39910	PrimaryExpression	0
>39911	Argument	0
>39912	PrimaryExpression	0
>39913	Argument	worldLeftCenter
>39914	Identifier	worldLeftCenter
>39915	Argument	\"menu-switch\"
>39916	PrimaryExpression	\"menu-switch\"
>39917	Callee	dsq -> spawnParticleEffect
>39918	PtrMemberAccess	dsq -> spawnParticleEffect
>39919	Identifier	spawnParticleEffect
>39920	Identifier	dsq
>39921	ExpressionStatement	 
>39922	CallExpression	dsq -> sound -> playSfx ( \"menu-switch\" , 0.5 )
>39923	ArgumentList	\"menu-switch\"
>39924	Argument	0.5
>39925	PrimaryExpression	0.5
>39926	Argument	\"menu-switch\"
>39927	PrimaryExpression	\"menu-switch\"
>39928	Callee	dsq -> sound -> playSfx
>39929	PtrMemberAccess	dsq -> sound -> playSfx
>39930	Identifier	playSfx
>39931	PtrMemberAccess	dsq -> sound
>39932	Identifier	sound
>39933	Identifier	dsq
>39934	Condition	 
>39935	EqualityExpression	currentTreasurePage != 0
>39936	PrimaryExpression	0
>39937	Identifier	currentTreasurePage
>39938	CompoundStatement	 
>39939	ExpressionStatement	 
>39940	CallExpression	refreshTreasureSlots ( )
>39941	ArgumentList	 
>39942	Callee	refreshTreasureSlots
>39943	Identifier	refreshTreasureSlots
>39944	ExpressionStatement	 
>39945	IncDecOp	currentTreasurePage ++
>39946	IncDec	++
>39947	Identifier	currentTreasurePage
>39948	ExpressionStatement	 
>39949	CallExpression	dsq -> spawnParticleEffect ( \"menu-switch\" , worldLeftCenter , 0 , 0 , LR_HUD3 , 1 )
>39950	ArgumentList	\"menu-switch\"
>39951	Argument	1
>39952	PrimaryExpression	1
>39953	Argument	LR_HUD3
>39954	Identifier	LR_HUD3
>39955	Argument	0
>39956	PrimaryExpression	0
>39957	Argument	0
>39958	PrimaryExpression	0
>39959	Argument	worldLeftCenter
>39960	Identifier	worldLeftCenter
>39961	Argument	\"menu-switch\"
>39962	PrimaryExpression	\"menu-switch\"
>39963	Callee	dsq -> spawnParticleEffect
>39964	PtrMemberAccess	dsq -> spawnParticleEffect
>39965	Identifier	spawnParticleEffect
>39966	Identifier	dsq
>39967	ExpressionStatement	 
>39968	CallExpression	dsq -> sound -> playSfx ( \"menu-switch\" , 0.5 )
>39969	ArgumentList	\"menu-switch\"
>39970	Argument	0.5
>39971	PrimaryExpression	0.5
>39972	Argument	\"menu-switch\"
>39973	PrimaryExpression	\"menu-switch\"
>39974	Callee	dsq -> sound -> playSfx
>39975	PtrMemberAccess	dsq -> sound -> playSfx
>39976	Identifier	playSfx
>39977	PtrMemberAccess	dsq -> sound
>39978	Identifier	sound
>39979	Identifier	dsq
>39980	Condition	 
>39981	RelationalExpression	( currentTreasurePage + 1 ) * treasurePageSize < numTreasures
>39982	Identifier	numTreasures
>39983	MultiplicativeExpression	( currentTreasurePage + 1 ) * treasurePageSize
>39984	Identifier	treasurePageSize
>39985	AdditiveExpression	currentTreasurePage + 1
>39986	PrimaryExpression	1
>39987	Identifier	currentTreasurePage
>39999	FunctionDef	Game 
>40000	ParameterList	 
>40001	ReturnType	void
>40002	CompoundStatement	 
>40003	IfStatement	if ( currentFoodPage != lastFoodPage )
>40004	CompoundStatement	 
>40005	ExpressionStatement	 
>40006	CallExpression	dsq -> spawnParticleEffect ( \"menu-switch\" , worldLeftCenter , 0 , 0 , LR_HUD3 , 1 )
>40007	ArgumentList	\"menu-switch\"
>40008	Argument	1
>40009	PrimaryExpression	1
>40010	Argument	LR_HUD3
>40011	Identifier	LR_HUD3
>40012	Argument	0
>40013	PrimaryExpression	0
>40014	Argument	0
>40015	PrimaryExpression	0
>40016	Argument	worldLeftCenter
>40017	Identifier	worldLeftCenter
>40018	Argument	\"menu-switch\"
>40019	PrimaryExpression	\"menu-switch\"
>40020	Callee	dsq -> spawnParticleEffect
>40021	PtrMemberAccess	dsq -> spawnParticleEffect
>40022	Identifier	spawnParticleEffect
>40023	Identifier	dsq
>40024	ExpressionStatement	 
>40025	CallExpression	dsq -> sound -> playSfx ( \"menu-switch\" , 0.5 )
>40026	ArgumentList	\"menu-switch\"
>40027	Argument	0.5
>40028	PrimaryExpression	0.5
>40029	Argument	\"menu-switch\"
>40030	PrimaryExpression	\"menu-switch\"
>40031	Callee	dsq -> sound -> playSfx
>40032	PtrMemberAccess	dsq -> sound -> playSfx
>40033	Identifier	playSfx
>40034	PtrMemberAccess	dsq -> sound
>40035	Identifier	sound
>40036	Identifier	dsq
>40037	Condition	 
>40038	EqualityExpression	currentFoodPage != lastFoodPage
>40039	Identifier	lastFoodPage
>40040	Identifier	currentFoodPage
>40041	ExpressionStatement	 
>40042	CallExpression	debugLog ( os . str ( ) )
>40043	ArgumentList	os . str ( )
>40044	Argument	os . str ( )
>40045	CallExpression	os . str ( )
>40046	ArgumentList	 
>40047	Callee	os . str
>40048	MemberAccess	os . str
>40049	Identifier	str
>40050	Identifier	os
>40051	Callee	debugLog
>40052	Identifier	debugLog
>40053	ExpressionStatement	 
>40054	ShiftExpression	os << \"food page
>40055	ShiftExpression	\"food page
>40056	Identifier	currentFoodPage
>40057	PrimaryExpression	\"food page
>40058	Identifier	os
>40059	IdentifierDeclStatement	 
>40060	IdentifierDecl	os
>40061	Identifier	os
>40062	IdentifierDeclType	std 
>40063	IfStatement	if ( currentFoodPage > 0 )
>40064	ElseStatement	else
>40065	CompoundStatement	 
>40066	IfStatement	if ( dsq -> continuity . hasIngredients ( ) )
>40067	CompoundStatement	 
>40068	ExpressionStatement	 
>40069	CallExpression	refreshFoodSlots ( false )
>40070	ArgumentList	false
>40071	Argument	false
>40072	Identifier	false
>40073	Callee	refreshFoodSlots
>40074	Identifier	refreshFoodSlots
>40075	ExpressionStatement	 
>40076	AssignmentExpr	currentFoodPage = ( ( dsq -> continuity . ingredientCount ( ) - 1 ) / foodPageSize )
>40077	MultiplicativeExpression	( dsq -> continuity . ingredientCount ( ) - 1 ) / foodPageSize
>40078	Identifier	foodPageSize
>40079	AdditiveExpression	dsq -> continuity . ingredientCount ( ) - 1
>40080	PrimaryExpression	1
>40081	CallExpression	dsq -> continuity . ingredientCount ( )
>40082	ArgumentList	 
>40083	Callee	dsq -> continuity . ingredientCount
>40084	MemberAccess	dsq -> continuity . ingredientCount
>40085	Identifier	ingredientCount
>40086	PtrMemberAccess	dsq -> continuity
>40087	Identifier	continuity
>40088	Identifier	dsq
>40089	Identifier	currentFoodPage
>40090	Condition	 
>40091	CallExpression	dsq -> continuity . hasIngredients ( )
>40092	ArgumentList	 
>40093	Callee	dsq -> continuity . hasIngredients
>40094	MemberAccess	dsq -> continuity . hasIngredients
>40095	Identifier	hasIngredients
>40096	PtrMemberAccess	dsq -> continuity
>40097	Identifier	continuity
>40098	Identifier	dsq
>40099	CompoundStatement	 
>40100	ExpressionStatement	 
>40101	CallExpression	refreshFoodSlots ( false )
>40102	ArgumentList	false
>40103	Argument	false
>40104	Identifier	false
>40105	Callee	refreshFoodSlots
>40106	Identifier	refreshFoodSlots
>40107	ExpressionStatement	 
>40108	IncDecOp	currentFoodPage --
>40109	IncDec	--
>40110	Identifier	currentFoodPage
>40111	Condition	 
>40112	RelationalExpression	currentFoodPage > 0
>40113	PrimaryExpression	0
>40114	Identifier	currentFoodPage
>40115	IdentifierDeclStatement	 
>40116	IdentifierDecl	lastFoodPage = currentFoodPage
>40117	AssignmentExpr	lastFoodPage = currentFoodPage
>40118	Identifier	currentFoodPage
>40119	Identifier	currentFoodPage
>40120	Identifier	lastFoodPage
>40121	IdentifierDeclType	int
>40139	FunctionDef	Game 
>40140	ParameterList	 
>40141	ReturnType	void
>40142	CompoundStatement	 
>40143	IfStatement	if ( currentFoodPage != lastFoodPage )
>40144	CompoundStatement	 
>40145	ExpressionStatement	 
>40146	CallExpression	dsq -> spawnParticleEffect ( \"menu-switch\" , worldLeftCenter , 0 , 0 , LR_HUD3 , 1 )
>40147	ArgumentList	\"menu-switch\"
>40148	Argument	1
>40149	PrimaryExpression	1
>40150	Argument	LR_HUD3
>40151	Identifier	LR_HUD3
>40152	Argument	0
>40153	PrimaryExpression	0
>40154	Argument	0
>40155	PrimaryExpression	0
>40156	Argument	worldLeftCenter
>40157	Identifier	worldLeftCenter
>40158	Argument	\"menu-switch\"
>40159	PrimaryExpression	\"menu-switch\"
>40160	Callee	dsq -> spawnParticleEffect
>40161	PtrMemberAccess	dsq -> spawnParticleEffect
>40162	Identifier	spawnParticleEffect
>40163	Identifier	dsq
>40164	ExpressionStatement	 
>40165	CallExpression	dsq -> sound -> playSfx ( \"menu-switch\" , 0.5 )
>40166	ArgumentList	\"menu-switch\"
>40167	Argument	0.5
>40168	PrimaryExpression	0.5
>40169	Argument	\"menu-switch\"
>40170	PrimaryExpression	\"menu-switch\"
>40171	Callee	dsq -> sound -> playSfx
>40172	PtrMemberAccess	dsq -> sound -> playSfx
>40173	Identifier	playSfx
>40174	PtrMemberAccess	dsq -> sound
>40175	Identifier	sound
>40176	Identifier	dsq
>40177	Condition	 
>40178	EqualityExpression	currentFoodPage != lastFoodPage
>40179	Identifier	lastFoodPage
>40180	Identifier	currentFoodPage
>40181	IfStatement	if ( ( currentFoodPage + 1 ) * foodPageSize < dsq -> continuity . ingredientCount ( ) )
>40182	ElseStatement	else
>40183	CompoundStatement	 
>40184	IfStatement	if ( currentFoodPage != 0 )
>40185	CompoundStatement	 
>40186	ExpressionStatement	 
>40187	CallExpression	refreshFoodSlots ( false )
>40188	ArgumentList	false
>40189	Argument	false
>40190	Identifier	false
>40191	Callee	refreshFoodSlots
>40192	Identifier	refreshFoodSlots
>40193	ExpressionStatement	 
>40194	AssignmentExpr	currentFoodPage = 0
>40195	PrimaryExpression	0
>40196	Identifier	currentFoodPage
>40197	Condition	 
>40198	EqualityExpression	currentFoodPage != 0
>40199	PrimaryExpression	0
>40200	Identifier	currentFoodPage
>40201	CompoundStatement	 
>40202	ExpressionStatement	 
>40203	CallExpression	refreshFoodSlots ( false )
>40204	ArgumentList	false
>40205	Argument	false
>40206	Identifier	false
>40207	Callee	refreshFoodSlots
>40208	Identifier	refreshFoodSlots
>40209	ExpressionStatement	 
>40210	IncDecOp	currentFoodPage ++
>40211	IncDec	++
>40212	Identifier	currentFoodPage
>40213	Condition	 
>40214	RelationalExpression	( currentFoodPage + 1 ) * foodPageSize < dsq -> continuity . ingredientCount ( )
>40215	CallExpression	dsq -> continuity . ingredientCount ( )
>40216	ArgumentList	 
>40217	Callee	dsq -> continuity . ingredientCount
>40218	MemberAccess	dsq -> continuity . ingredientCount
>40219	Identifier	ingredientCount
>40220	PtrMemberAccess	dsq -> continuity
>40221	Identifier	continuity
>40222	Identifier	dsq
>40223	MultiplicativeExpression	( currentFoodPage + 1 ) * foodPageSize
>40224	Identifier	foodPageSize
>40225	AdditiveExpression	currentFoodPage + 1
>40226	PrimaryExpression	1
>40227	Identifier	currentFoodPage
>40228	IdentifierDeclStatement	 
>40229	IdentifierDecl	lastFoodPage = currentFoodPage
>40230	AssignmentExpr	lastFoodPage = currentFoodPage
>40231	Identifier	currentFoodPage
>40232	Identifier	currentFoodPage
>40233	Identifier	lastFoodPage
>40234	IdentifierDeclType	int
>40249	FunctionDef	Game 
>40250	ParameterList	 
>40251	ReturnType	void
>40252	CompoundStatement	 
>40253	IfStatement	if ( selectedTreasureFlag != - 1 )
>40254	CompoundStatement	 
>40255	ExpressionStatement	 
>40256	CallExpression	onUseTreasure ( selectedTreasureFlag )
>40257	ArgumentList	selectedTreasureFlag
>40258	Argument	selectedTreasureFlag
>40259	Identifier	selectedTreasureFlag
>40260	Callee	onUseTreasure
>40261	Identifier	onUseTreasure
>40262	Condition	 
>40263	EqualityExpression	selectedTreasureFlag != - 1
>40264	UnaryOp	- 1
>40265	PrimaryExpression	1
>40266	UnaryOperator	-
>40267	Identifier	selectedTreasureFlag
>40268	ExpressionStatement	 
>40269	CallExpression	debugLog ( \"Use Treasure!\" )
>40270	ArgumentList	\"Use Treasure!\"
>40271	Argument	\"Use Treasure!\"
>40272	PrimaryExpression	\"Use Treasure!\"
>40273	Callee	debugLog
>40274	Identifier	debugLog
>40279	FunctionDef	Game 
>40280	ParameterList	int flag
>40281	Parameter	 
>40282	Identifier	flag
>40283	ParameterType	int
>40284	ReturnType	void
>40285	CompoundStatement	 
>40286	IfStatement	if ( dsq -> mod . isActive ( ) )
>40287	ElseStatement	else
>40288	ExpressionStatement	 
>40289	CallExpression	dsq -> runScriptNum ( \"scripts/global/menu-treasures.lua\" , \"useTreasure\" , flag )
>40290	ArgumentList	\"scripts/global/menu-treasures.lua\"
>40291	Argument	flag
>40292	Identifier	flag
>40293	Argument	\"useTreasure\"
>40294	PrimaryExpression	\"useTreasure\"
>40295	Argument	\"scripts/global/menu-treasures.lua\"
>40296	PrimaryExpression	\"scripts/global/menu-treasures.lua\"
>40297	Callee	dsq -> runScriptNum
>40298	PtrMemberAccess	dsq -> runScriptNum
>40299	Identifier	runScriptNum
>40300	Identifier	dsq
>40301	ExpressionStatement	 
>40302	CallExpression	dsq -> runScriptNum ( dsq -> mod . getPath ( ) + \"scripts/menu-treasures.lua\" , \"useTreasure\" , flag )
>40303	ArgumentList	dsq -> mod . getPath ( ) + \"scripts/menu-treasures.lua\"
>40304	Argument	flag
>40305	Identifier	flag
>40306	Argument	\"useTreasure\"
>40307	PrimaryExpression	\"useTreasure\"
>40308	Argument	dsq -> mod . getPath ( ) + \"scripts/menu-treasures.lua\"
>40309	AdditiveExpression	dsq -> mod . getPath ( ) + \"scripts/menu-treasures.lua\"
>40310	PrimaryExpression	\"scripts/menu-treasures.lua\"
>40311	CallExpression	dsq -> mod . getPath ( )
>40312	ArgumentList	 
>40313	Callee	dsq -> mod . getPath
>40314	MemberAccess	dsq -> mod . getPath
>40315	Identifier	getPath
>40316	PtrMemberAccess	dsq -> mod
>40317	Identifier	mod
>40318	Identifier	dsq
>40319	Callee	dsq -> runScriptNum
>40320	PtrMemberAccess	dsq -> runScriptNum
>40321	Identifier	runScriptNum
>40322	Identifier	dsq
>40323	Condition	 
>40324	CallExpression	dsq -> mod . isActive ( )
>40325	ArgumentList	 
>40326	Callee	dsq -> mod . isActive
>40327	MemberAccess	dsq -> mod . isActive
>40328	Identifier	isActive
>40329	PtrMemberAccess	dsq -> mod
>40330	Identifier	mod
>40331	Identifier	dsq
>40341	FunctionDef	Game 
>40342	ParameterList	const std 
>40343	Parameter	 
>40344	Identifier	list
>40345	ParameterType	const std 
>40346	ReturnType	Recipe *
>40347	CompoundStatement	 
>40348	ReturnStatement	 
>40349	PrimaryExpression	0
>40350	IfStatement	if ( rc == dsq -> continuity . recipes . size ( ) )
>40351	CompoundStatement	 
>40352	Condition	 
>40353	EqualityExpression	rc == dsq -> continuity . recipes . size ( )
>40354	CallExpression	dsq -> continuity . recipes . size ( )
>40355	ArgumentList	 
>40356	Callee	dsq -> continuity . recipes . size
>40357	MemberAccess	dsq -> continuity . recipes . size
>40358	Identifier	size
>40359	MemberAccess	dsq -> continuity . recipes
>40360	Identifier	recipes
>40361	PtrMemberAccess	dsq -> continuity
>40362	Identifier	continuity
>40363	Identifier	dsq
>40364	Identifier	rc
>40365	ForStatement	for ( int i = 0 ; i < list . size ( ) ; i ++ )
>40366	ExpressionStatement	 
>40367	AssignmentExpr	list [ i ] -> marked = 0
>40368	PrimaryExpression	0
>40369	PtrMemberAccess	list [ i ] -> marked
>40370	Identifier	marked
>40371	ArrayIndexing	list [ i ]
>40372	Identifier	i
>40373	Identifier	list
>40374	IncDecOp	 
>40375	IncDec	++
>40376	Identifier	i
>40377	Condition	 
>40378	RelationalExpression	i < list . size ( )
>40379	CallExpression	list . size ( )
>40380	ArgumentList	 
>40381	Callee	list . size
>40382	MemberAccess	list . size
>40383	Identifier	size
>40384	Identifier	list
>40385	Identifier	i
>40386	ForInit	 
>40387	IdentifierDeclStatement	int i = 0 ;
>40388	IdentifierDecl	i = 0
>40389	AssignmentExpr	i = 0
>40390	PrimaryExpression	0
>40391	Identifier	i
>40392	Identifier	i
>40393	IdentifierDeclType	int
>40394	ForStatement	for ( rc = 0 ; rc < dsq -> continuity . recipes . size ( ) ; rc ++ )
>40395	CompoundStatement	 
>40396	IfStatement	if ( q == r -> types . size ( ) )
>40397	CompoundStatement	 
>40398	IfStatement	if ( q2 == r -> names . size ( ) )
>40399	CompoundStatement	 
>40400	ReturnStatement	 
>40401	Identifier	r
>40402	Condition	 
>40403	EqualityExpression	q2 == r -> names . size ( )
>40404	CallExpression	r -> names . size ( )
>40405	ArgumentList	 
>40406	Callee	r -> names . size
>40407	MemberAccess	r -> names . size
>40408	Identifier	size
>40409	PtrMemberAccess	r -> names
>40410	Identifier	names
>40411	Identifier	r
>40412	Identifier	q2
>40413	ForStatement	for ( int c = 0 ; c < r -> names . size ( ) ; c ++ )
>40414	CompoundStatement	 
>40415	IfStatement	if ( ingName ( list , n -> name , n -> amount ) )
>40416	ElseStatement	else
>40417	BreakStatement	 
>40418	ExpressionStatement	 
>40419	IncDecOp	q2 ++
>40420	IncDec	++
>40421	Identifier	q2
>40422	Condition	 
>40423	CallExpression	ingName ( list , n -> name , n -> amount )
>40424	ArgumentList	list
>40425	Argument	n -> amount
>40426	PtrMemberAccess	n -> amount
>40427	Identifier	amount
>40428	Identifier	n
>40429	Argument	n -> name
>40430	PtrMemberAccess	n -> name
>40431	Identifier	name
>40432	Identifier	n
>40433	Argument	list
>40434	Identifier	list
>40435	Callee	ingName
>40436	Identifier	ingName
>40437	IdentifierDeclStatement	 
>40438	IdentifierDecl	* n = & r -> names [ c ]
>40439	AssignmentExpr	* n = & r -> names [ c ]
>40440	UnaryOp	& r -> names [ c ]
>40441	ArrayIndexing	r -> names [ c ]
>40442	Identifier	c
>40443	PtrMemberAccess	r -> names
>40444	Identifier	names
>40445	Identifier	r
>40446	UnaryOperator	&
>40447	Identifier	n
>40448	Identifier	n
>40449	IdentifierDeclType	RecipeName *
>40450	IncDecOp	 
>40451	IncDec	++
>40452	Identifier	c
>40453	Condition	 
>40454	RelationalExpression	c < r -> names . size ( )
>40455	CallExpression	r -> names . size ( )
>40456	ArgumentList	 
>40457	Callee	r -> names . size
>40458	MemberAccess	r -> names . size
>40459	Identifier	size
>40460	PtrMemberAccess	r -> names
>40461	Identifier	names
>40462	Identifier	r
>40463	Identifier	c
>40464	ForInit	 
>40465	IdentifierDeclStatement	int c = 0 ;
>40466	IdentifierDecl	c = 0
>40467	AssignmentExpr	c = 0
>40468	PrimaryExpression	0
>40469	Identifier	c
>40470	Identifier	c
>40471	IdentifierDeclType	int
>40472	ExpressionStatement	 
>40473	AssignmentExpr	q2 = 0
>40474	PrimaryExpression	0
>40475	Identifier	q2
>40476	Condition	 
>40477	EqualityExpression	q == r -> types . size ( )
>40478	CallExpression	r -> types . size ( )
>40479	ArgumentList	 
>40480	Callee	r -> types . size
>40481	MemberAccess	r -> types . size
>40482	Identifier	size
>40483	PtrMemberAccess	r -> types
>40484	Identifier	types
>40485	Identifier	r
>40486	Identifier	q
>40487	ForStatement	for ( int c = 0 ; c < r -> types . size ( ) ; c ++ )
>40488	CompoundStatement	 
>40489	IfStatement	if ( ingType ( list , t -> type , t -> amount ) )
>40490	ElseStatement	else
>40491	BreakStatement	 
>40492	ExpressionStatement	 
>40493	IncDecOp	q ++
>40494	IncDec	++
>40495	Identifier	q
>40496	Condition	 
>40497	CallExpression	ingType ( list , t -> type , t -> amount )
>40498	ArgumentList	list
>40499	Argument	t -> amount
>40500	PtrMemberAccess	t -> amount
>40501	Identifier	amount
>40502	Identifier	t
>40503	Argument	t -> type
>40504	PtrMemberAccess	t -> type
>40505	Identifier	type
>40506	Identifier	t
>40507	Argument	list
>40508	Identifier	list
>40509	Callee	ingType
>40510	Identifier	ingType
>40511	IdentifierDeclStatement	 
>40512	IdentifierDecl	* t = & r -> types [ c ]
>40513	AssignmentExpr	* t = & r -> types [ c ]
>40514	UnaryOp	& r -> types [ c ]
>40515	ArrayIndexing	r -> types [ c ]
>40516	Identifier	c
>40517	PtrMemberAccess	r -> types
>40518	Identifier	types
>40519	Identifier	r
>40520	UnaryOperator	&
>40521	Identifier	t
>40522	Identifier	t
>40523	IdentifierDeclType	RecipeType *
>40524	IncDecOp	 
>40525	IncDec	++
>40526	Identifier	c
>40527	Condition	 
>40528	RelationalExpression	c < r -> types . size ( )
>40529	CallExpression	r -> types . size ( )
>40530	ArgumentList	 
>40531	Callee	r -> types . size
>40532	MemberAccess	r -> types . size
>40533	Identifier	size
>40534	PtrMemberAccess	r -> types
>40535	Identifier	types
>40536	Identifier	r
>40537	Identifier	c
>40538	ForInit	 
>40539	IdentifierDeclStatement	int c = 0 ;
>40540	IdentifierDecl	c = 0
>40541	AssignmentExpr	c = 0
>40542	PrimaryExpression	0
>40543	Identifier	c
>40544	Identifier	c
>40545	IdentifierDeclType	int
>40546	IfStatement	if ( listAmount != recipeAmount )
>40547	ContinueStatement	 
>40548	Condition	 
>40549	EqualityExpression	listAmount != recipeAmount
>40550	Identifier	recipeAmount
>40551	Identifier	listAmount
>40552	ForStatement	for ( int i = 0 ; i < r -> names . size ( ) ; i ++ )
>40553	ExpressionStatement	 
>40554	AssignmentExpr	recipeAmount += r -> names [ i ] . amount
>40555	MemberAccess	r -> names [ i ] . amount
>40556	Identifier	amount
>40557	ArrayIndexing	r -> names [ i ]
>40558	Identifier	i
>40559	PtrMemberAccess	r -> names
>40560	Identifier	names
>40561	Identifier	r
>40562	Identifier	recipeAmount
>40563	IncDecOp	 
>40564	IncDec	++
>40565	Identifier	i
>40566	Condition	 
>40567	RelationalExpression	i < r -> names . size ( )
>40568	CallExpression	r -> names . size ( )
>40569	ArgumentList	 
>40570	Callee	r -> names . size
>40571	MemberAccess	r -> names . size
>40572	Identifier	size
>40573	PtrMemberAccess	r -> names
>40574	Identifier	names
>40575	Identifier	r
>40576	Identifier	i
>40577	ForInit	 
>40578	IdentifierDeclStatement	int i = 0 ;
>40579	IdentifierDecl	i = 0
>40580	AssignmentExpr	i = 0
>40581	PrimaryExpression	0
>40582	Identifier	i
>40583	Identifier	i
>40584	IdentifierDeclType	int
>40585	ForStatement	for ( int i = 0 ; i < r -> types . size ( ) ; i ++ )
>40586	ExpressionStatement	 
>40587	AssignmentExpr	recipeAmount += r -> types [ i ] . amount
>40588	MemberAccess	r -> types [ i ] . amount
>40589	Identifier	amount
>40590	ArrayIndexing	r -> types [ i ]
>40591	Identifier	i
>40592	PtrMemberAccess	r -> types
>40593	Identifier	types
>40594	Identifier	r
>40595	Identifier	recipeAmount
>40596	IncDecOp	 
>40597	IncDec	++
>40598	Identifier	i
>40599	Condition	 
>40600	RelationalExpression	i < r -> types . size ( )
>40601	CallExpression	r -> types . size ( )
>40602	ArgumentList	 
>40603	Callee	r -> types . size
>40604	MemberAccess	r -> types . size
>40605	Identifier	size
>40606	PtrMemberAccess	r -> types
>40607	Identifier	types
>40608	Identifier	r
>40609	Identifier	i
>40610	ForInit	 
>40611	IdentifierDeclStatement	int i = 0 ;
>40612	IdentifierDecl	i = 0
>40613	AssignmentExpr	i = 0
>40614	PrimaryExpression	0
>40615	Identifier	i
>40616	Identifier	i
>40617	IdentifierDeclType	int
>40618	IdentifierDeclStatement	 
>40619	IdentifierDecl	recipeAmount = 0
>40620	AssignmentExpr	recipeAmount = 0
>40621	PrimaryExpression	0
>40622	Identifier	recipeAmount
>40623	Identifier	recipeAmount
>40624	IdentifierDeclType	int
>40625	IdentifierDeclStatement	 
>40626	IdentifierDecl	listAmount = list . size ( )
>40627	AssignmentExpr	listAmount = list . size ( )
>40628	CallExpression	list . size ( )
>40629	ArgumentList	 
>40630	Callee	list . size
>40631	MemberAccess	list . size
>40632	Identifier	size
>40633	Identifier	list
>40634	Identifier	listAmount
>40635	Identifier	listAmount
>40636	IdentifierDeclType	int
>40637	ExpressionStatement	 
>40638	AssignmentExpr	q = 0
>40639	PrimaryExpression	0
>40640	Identifier	q
>40641	ExpressionStatement	 
>40642	AssignmentExpr	tr = r
>40643	Identifier	r
>40644	Identifier	tr
>40645	ExpressionStatement	 
>40646	AssignmentExpr	r = & dsq -> continuity . recipes [ rc ]
>40647	UnaryOp	& dsq -> continuity . recipes [ rc ]
>40648	ArrayIndexing	dsq -> continuity . recipes [ rc ]
>40649	Identifier	rc
>40650	MemberAccess	dsq -> continuity . recipes
>40651	Identifier	recipes
>40652	PtrMemberAccess	dsq -> continuity
>40653	Identifier	continuity
>40654	Identifier	dsq
>40655	UnaryOperator	&
>40656	Identifier	r
>40657	ExpressionStatement	 
>40658	AssignmentExpr	tr = 0
>40659	PrimaryExpression	0
>40660	Identifier	tr
>40661	ForStatement	for ( int i = 0 ; i < list . size ( ) ; i ++ )
>40662	ExpressionStatement	 
>40663	AssignmentExpr	list [ i ] -> marked = 0
>40664	PrimaryExpression	0
>40665	PtrMemberAccess	list [ i ] -> marked
>40666	Identifier	marked
>40667	ArrayIndexing	list [ i ]
>40668	Identifier	i
>40669	Identifier	list
>40670	IncDecOp	 
>40671	IncDec	++
>40672	Identifier	i
>40673	Condition	 
>40674	RelationalExpression	i < list . size ( )
>40675	CallExpression	list . size ( )
>40676	ArgumentList	 
>40677	Callee	list . size
>40678	MemberAccess	list . size
>40679	Identifier	size
>40680	Identifier	list
>40681	Identifier	i
>40682	ForInit	 
>40683	IdentifierDeclStatement	int i = 0 ;
>40684	IdentifierDecl	i = 0
>40685	AssignmentExpr	i = 0
>40686	PrimaryExpression	0
>40687	Identifier	i
>40688	Identifier	i
>40689	IdentifierDeclType	int
>40690	IncDecOp	 
>40691	IncDec	++
>40692	Identifier	rc
>40693	Condition	 
>40694	RelationalExpression	rc < dsq -> continuity . recipes . size ( )
>40695	CallExpression	dsq -> continuity . recipes . size ( )
>40696	ArgumentList	 
>40697	Callee	dsq -> continuity . recipes . size
>40698	MemberAccess	dsq -> continuity . recipes . size
>40699	Identifier	size
>40700	MemberAccess	dsq -> continuity . recipes
>40701	Identifier	recipes
>40702	PtrMemberAccess	dsq -> continuity
>40703	Identifier	continuity
>40704	Identifier	dsq
>40705	Identifier	rc
>40706	ForInit	 
>40707	AssignmentExpr	rc = 0
>40708	PrimaryExpression	0
>40709	Identifier	rc
>40710	IdentifierDeclStatement	 
>40711	IdentifierDecl	q2 = 0
>40712	AssignmentExpr	q2 = 0
>40713	PrimaryExpression	0
>40714	Identifier	q2
>40715	Identifier	q2
>40716	IdentifierDeclType	int
>40717	IdentifierDecl	q = 0
>40718	AssignmentExpr	q = 0
>40719	PrimaryExpression	0
>40720	Identifier	q
>40721	Identifier	q
>40722	IdentifierDeclType	int
>40723	IdentifierDeclStatement	 
>40724	IdentifierDecl	* tr = 0
>40725	AssignmentExpr	* tr = 0
>40726	PrimaryExpression	0
>40727	Identifier	tr
>40728	Identifier	tr
>40729	IdentifierDeclType	Recipe *
>40730	IdentifierDeclStatement	 
>40731	IdentifierDecl	* r = 0
>40732	AssignmentExpr	* r = 0
>40733	PrimaryExpression	0
>40734	Identifier	r
>40735	Identifier	r
>40736	IdentifierDeclType	Recipe *
>40737	IdentifierDeclStatement	 
>40738	IdentifierDecl	rc = 0
>40739	AssignmentExpr	rc = 0
>40740	PrimaryExpression	0
>40741	Identifier	rc
>40742	Identifier	rc
>40743	IdentifierDeclType	int
>40744	IfStatement	if ( list . size ( ) < 2 )
>40745	ReturnStatement	 
>40746	PrimaryExpression	0
>40747	Condition	 
>40748	RelationalExpression	list . size ( ) < 2
>40749	PrimaryExpression	2
>40750	CallExpression	list . size ( )
>40751	ArgumentList	 
>40752	Callee	list . size
>40753	MemberAccess	list . size
>40754	Identifier	size
>40755	Identifier	list
>40808	FunctionDef	Game 
>40809	ParameterList	 
>40810	ReturnType	void
>40811	CompoundStatement	 
>40812	ForStatement	for ( int i = 0 ; i < foodHolders . size ( ) ; i ++ )
>40813	CompoundStatement	 
>40814	IfStatement	if ( ! foodHolders [ i ] -> isTrash ( ) && ing )
>40815	CompoundStatement	 
>40816	ExpressionStatement	 
>40817	CallExpression	cookList . push_back ( ing )
>40818	ArgumentList	ing
>40819	Argument	ing
>40820	Identifier	ing
>40821	Callee	cookList . push_back
>40822	MemberAccess	cookList . push_back
>40823	Identifier	push_back
>40824	Identifier	cookList
>40825	ExpressionStatement	 
>40826	CallExpression	debugLog ( os . str ( ) )
>40827	ArgumentList	os . str ( )
>40828	Argument	os . str ( )
>40829	CallExpression	os . str ( )
>40830	ArgumentList	 
>40831	Callee	os . str
>40832	MemberAccess	os . str
>40833	Identifier	str
>40834	Identifier	os
>40835	Callee	debugLog
>40836	Identifier	debugLog
>40837	ExpressionStatement	 
>40838	ShiftExpression	os << \"cooklist
>40839	ShiftExpression	\"cooklist
>40840	PtrMemberAccess	ing -> name
>40841	Identifier	name
>40842	Identifier	ing
>40843	PrimaryExpression	\"cooklist
>40844	Identifier	os
>40845	IdentifierDeclStatement	 
>40846	IdentifierDecl	os
>40847	Identifier	os
>40848	IdentifierDeclType	std 
>40849	Condition	 
>40850	AndExpression	! foodHolders [ i ] -> isTrash ( ) && ing
>40851	Identifier	ing
>40852	UnaryOp	! foodHolders [ i ] -> isTrash ( )
>40853	CallExpression	foodHolders [ i ] -> isTrash ( )
>40854	ArgumentList	 
>40855	Callee	foodHolders [ i ] -> isTrash
>40856	PtrMemberAccess	foodHolders [ i ] -> isTrash
>40857	Identifier	isTrash
>40858	ArrayIndexing	foodHolders [ i ]
>40859	Identifier	i
>40860	Identifier	foodHolders
>40861	UnaryOperator	!
>40862	IdentifierDeclStatement	 
>40863	IdentifierDecl	* ing = foodHolders [ i ] -> getIngredient ( )
>40864	AssignmentExpr	* ing = foodHolders [ i ] -> getIngredient ( )
>40865	CallExpression	foodHolders [ i ] -> getIngredient ( )
>40866	ArgumentList	 
>40867	Callee	foodHolders [ i ] -> getIngredient
>40868	PtrMemberAccess	foodHolders [ i ] -> getIngredient
>40869	Identifier	getIngredient
>40870	ArrayIndexing	foodHolders [ i ]
>40871	Identifier	i
>40872	Identifier	foodHolders
>40873	Identifier	ing
>40874	Identifier	ing
>40875	IdentifierDeclType	IngredientData *
>40876	IncDecOp	 
>40877	IncDec	++
>40878	Identifier	i
>40879	Condition	 
>40880	RelationalExpression	i < foodHolders . size ( )
>40881	CallExpression	foodHolders . size ( )
>40882	ArgumentList	 
>40883	Callee	foodHolders . size
>40884	MemberAccess	foodHolders . size
>40885	Identifier	size
>40886	Identifier	foodHolders
>40887	Identifier	i
>40888	ForInit	 
>40889	IdentifierDeclStatement	int i = 0 ;
>40890	IdentifierDecl	i = 0
>40891	AssignmentExpr	i = 0
>40892	PrimaryExpression	0
>40893	Identifier	i
>40894	Identifier	i
>40895	IdentifierDeclType	int
>40896	ExpressionStatement	 
>40897	CallExpression	cookList . clear ( )
>40898	ArgumentList	 
>40899	Callee	cookList . clear
>40900	MemberAccess	cookList . clear
>40901	Identifier	clear
>40902	Identifier	cookList
>40919	FunctionDef	Game 
>40920	ParameterList	 
>40921	ReturnType	void
>40922	CompoundStatement	 
>40923	IfStatement	if ( foodMenu )
>40924	CompoundStatement	 
>40925	ExpressionStatement	 
>40926	CallExpression	toggleRecipeList ( ! recipeMenu . on )
>40927	ArgumentList	! recipeMenu . on
>40928	Argument	! recipeMenu . on
>40929	UnaryOp	! recipeMenu . on
>40930	MemberAccess	recipeMenu . on
>40931	Identifier	on
>40932	Identifier	recipeMenu
>40933	UnaryOperator	!
>40934	Callee	toggleRecipeList
>40935	Identifier	toggleRecipeList
>40936	Condition	 
>40937	Identifier	foodMenu
>40944	FunctionDef	Game 
>40945	ParameterList	 
>40946	ReturnType	void
>40947	CompoundStatement	 
>40948	ExpressionStatement	 
>40949	CallExpression	dsq -> screenTransition -> transition ( MENUPAGETRANSTIME )
>40950	ArgumentList	MENUPAGETRANSTIME
>40951	Argument	MENUPAGETRANSTIME
>40952	Identifier	MENUPAGETRANSTIME
>40953	Callee	dsq -> screenTransition -> transition
>40954	PtrMemberAccess	dsq -> screenTransition -> transition
>40955	Identifier	transition
>40956	PtrMemberAccess	dsq -> screenTransition
>40957	Identifier	screenTransition
>40958	Identifier	dsq
>40959	ExpressionStatement	 
>40960	CallExpression	toggleKeyConfigMenu ( true )
>40961	ArgumentList	true
>40962	Argument	true
>40963	Identifier	true
>40964	Callee	toggleKeyConfigMenu
>40965	Identifier	toggleKeyConfigMenu
>40966	ExpressionStatement	 
>40967	CallExpression	dsq -> screenTransition -> capture ( )
>40968	ArgumentList	 
>40969	Callee	dsq -> screenTransition -> capture
>40970	PtrMemberAccess	dsq -> screenTransition -> capture
>40971	Identifier	capture
>40972	PtrMemberAccess	dsq -> screenTransition
>40973	Identifier	screenTransition
>40974	Identifier	dsq
>40983	FunctionDef	Game 
>40984	ParameterList	 
>40985	ReturnType	define DEBUG_COOK void
>40986	CompoundStatement	 
>40987	ExpressionStatement	 
>40988	AssignmentExpr	isCooking = false
>40989	Identifier	false
>40990	Identifier	isCooking
>40991	ExpressionStatement	 
>40992	AssignmentExpr	AquariaGuiElement 
>40993	Identifier	true
>40994	Identifier	AquariaGuiElement 
>40995	Label	 
>40996	Identifier	endcook
>40997	ExpressionStatement	 
>40998	CallExpression	refreshFoodSlots ( true )
>40999	ArgumentList	true
>41000	Argument	true
>41001	Identifier	true
>41002	Callee	refreshFoodSlots
>41003	Identifier	refreshFoodSlots
>41004	IfStatement	if ( cooked )
>41005	ElseStatement	else
>41006	CompoundStatement	 
>41007	ExpressionStatement	 
>41008	CallExpression	dsq -> centerMessage ( dsq -> continuity . stringBank . get ( 27 ) )
>41009	ArgumentList	dsq -> continuity . stringBank . get ( 27 )
>41010	Argument	dsq -> continuity . stringBank . get ( 27 )
>41011	CallExpression	dsq -> continuity . stringBank . get ( 27 )
>41012	ArgumentList	27
>41013	Argument	27
>41014	PrimaryExpression	27
>41015	Callee	dsq -> continuity . stringBank . get
>41016	MemberAccess	dsq -> continuity . stringBank . get
>41017	Identifier	get
>41018	MemberAccess	dsq -> continuity . stringBank
>41019	Identifier	stringBank
>41020	PtrMemberAccess	dsq -> continuity
>41021	Identifier	continuity
>41022	Identifier	dsq
>41023	Callee	dsq -> centerMessage
>41024	PtrMemberAccess	dsq -> centerMessage
>41025	Identifier	centerMessage
>41026	Identifier	dsq
>41027	ExpressionStatement	 
>41028	CallExpression	dsq -> sound -> playSfx ( \"Denied\" )
>41029	ArgumentList	\"Denied\"
>41030	Argument	\"Denied\"
>41031	PrimaryExpression	\"Denied\"
>41032	Callee	dsq -> sound -> playSfx
>41033	PtrMemberAccess	dsq -> sound -> playSfx
>41034	Identifier	playSfx
>41035	PtrMemberAccess	dsq -> sound
>41036	Identifier	sound
>41037	Identifier	dsq
>41038	CompoundStatement	 
>41039	ExpressionStatement	 
>41040	AssignmentExpr	core -> mouse . buttonsEnabled = true
>41041	Identifier	true
>41042	MemberAccess	core -> mouse . buttonsEnabled
>41043	Identifier	buttonsEnabled
>41044	PtrMemberAccess	core -> mouse
>41045	Identifier	mouse
>41046	Identifier	core
>41047	IfStatement	if ( r )
>41048	CompoundStatement	 
>41049	IfStatement	if ( haveLeftovers )
>41050	ExpressionStatement	 
>41051	CallExpression	updatePreviewRecipe ( )
>41052	ArgumentList	 
>41053	Callee	updatePreviewRecipe
>41054	Identifier	updatePreviewRecipe
>41055	Condition	 
>41056	Identifier	haveLeftovers
>41057	ExpressionStatement	 
>41058	CallExpression	dsq -> continuity . learnRecipe ( r )
>41059	ArgumentList	r
>41060	Argument	r
>41061	Identifier	r
>41062	Callee	dsq -> continuity . learnRecipe
>41063	MemberAccess	dsq -> continuity . learnRecipe
>41064	Identifier	learnRecipe
>41065	PtrMemberAccess	dsq -> continuity
>41066	Identifier	continuity
>41067	Identifier	dsq
>41068	Condition	 
>41069	Identifier	r
>41070	ExpressionStatement	 
>41071	CallExpression	dsq -> continuity . setFlag ( FLAG_COOKS , dsq -> continuity . getFlag ( FLAG_COOKS ) + 1 )
>41072	ArgumentList	FLAG_COOKS
>41073	Argument	dsq -> continuity . getFlag ( FLAG_COOKS ) + 1
>41074	AdditiveExpression	dsq -> continuity . getFlag ( FLAG_COOKS ) + 1
>41075	PrimaryExpression	1
>41076	CallExpression	dsq -> continuity . getFlag ( FLAG_COOKS )
>41077	ArgumentList	FLAG_COOKS
>41078	Argument	FLAG_COOKS
>41079	Identifier	FLAG_COOKS
>41080	Callee	dsq -> continuity . getFlag
>41081	MemberAccess	dsq -> continuity . getFlag
>41082	Identifier	getFlag
>41083	PtrMemberAccess	dsq -> continuity
>41084	Identifier	continuity
>41085	Identifier	dsq
>41086	Argument	FLAG_COOKS
>41087	Identifier	FLAG_COOKS
>41088	Callee	dsq -> continuity . setFlag
>41089	MemberAccess	dsq -> continuity . setFlag
>41090	Identifier	setFlag
>41091	PtrMemberAccess	dsq -> continuity
>41092	Identifier	continuity
>41093	Identifier	dsq
>41094	ExpressionStatement	 
>41095	CallExpression	dsq -> main ( 0.5 )
>41096	ArgumentList	0.5
>41097	Argument	0.5
>41098	PrimaryExpression	0.5
>41099	Callee	dsq -> main
>41100	PtrMemberAccess	dsq -> main
>41101	Identifier	main
>41102	Identifier	dsq
>41103	ExpressionStatement	 
>41104	CallExpression	dsq -> continuity . removeEmptyIngredients ( )
>41105	ArgumentList	 
>41106	Callee	dsq -> continuity . removeEmptyIngredients
>41107	MemberAccess	dsq -> continuity . removeEmptyIngredients
>41108	Identifier	removeEmptyIngredients
>41109	PtrMemberAccess	dsq -> continuity
>41110	Identifier	continuity
>41111	Identifier	dsq
>41112	ExpressionStatement	 
>41113	CallExpression	dsq -> continuity . pickupIngredient ( data , 1 )
>41114	ArgumentList	data
>41115	Argument	1
>41116	PrimaryExpression	1
>41117	Argument	data
>41118	Identifier	data
>41119	Callee	dsq -> continuity . pickupIngredient
>41120	MemberAccess	dsq -> continuity . pickupIngredient
>41121	Identifier	pickupIngredient
>41122	PtrMemberAccess	dsq -> continuity
>41123	Identifier	continuity
>41124	Identifier	dsq
>41125	IfStatement	if ( data )
>41126	CompoundStatement	 
>41127	ExpressionStatement	 
>41128	CallExpression	showRecipe -> alpha . startPath ( t )
>41129	ArgumentList	t
>41130	Argument	t
>41131	Identifier	t
>41132	Callee	showRecipe -> alpha . startPath
>41133	MemberAccess	showRecipe -> alpha . startPath
>41134	Identifier	startPath
>41135	PtrMemberAccess	showRecipe -> alpha
>41136	Identifier	alpha
>41137	Identifier	showRecipe
>41138	ExpressionStatement	 
>41139	CallExpression	showRecipe -> alpha . data -> path . addPathNode ( 0 , 1 )
>41140	ArgumentList	0
>41141	Argument	1
>41142	PrimaryExpression	1
>41143	Argument	0
>41144	PrimaryExpression	0
>41145	Callee	showRecipe -> alpha . data -> path . addPathNode
>41146	MemberAccess	showRecipe -> alpha . data -> path . addPathNode
>41147	Identifier	addPathNode
>41148	PtrMemberAccess	showRecipe -> alpha . data -> path
>41149	Identifier	path
>41150	MemberAccess	showRecipe -> alpha . data
>41151	Identifier	data
>41152	PtrMemberAccess	showRecipe -> alpha
>41153	Identifier	alpha
>41154	Identifier	showRecipe
>41155	ExpressionStatement	 
>41156	CallExpression	showRecipe -> alpha . data -> path . addPathNode ( 1 , 0.6 )
>41157	ArgumentList	1
>41158	Argument	0.6
>41159	PrimaryExpression	0.6
>41160	Argument	1
>41161	PrimaryExpression	1
>41162	Callee	showRecipe -> alpha . data -> path . addPathNode
>41163	MemberAccess	showRecipe -> alpha . data -> path . addPathNode
>41164	Identifier	addPathNode
>41165	PtrMemberAccess	showRecipe -> alpha . data -> path
>41166	Identifier	path
>41167	MemberAccess	showRecipe -> alpha . data
>41168	Identifier	data
>41169	PtrMemberAccess	showRecipe -> alpha
>41170	Identifier	alpha
>41171	Identifier	showRecipe
>41172	ExpressionStatement	 
>41173	CallExpression	showRecipe -> alpha . data -> path . addPathNode ( 1 , 0.1 )
>41174	ArgumentList	1
>41175	Argument	0.1
>41176	PrimaryExpression	0.1
>41177	Argument	1
>41178	PrimaryExpression	1
>41179	Callee	showRecipe -> alpha . data -> path . addPathNode
>41180	MemberAccess	showRecipe -> alpha . data -> path . addPathNode
>41181	Identifier	addPathNode
>41182	PtrMemberAccess	showRecipe -> alpha . data -> path
>41183	Identifier	path
>41184	MemberAccess	showRecipe -> alpha . data
>41185	Identifier	data
>41186	PtrMemberAccess	showRecipe -> alpha
>41187	Identifier	alpha
>41188	Identifier	showRecipe
>41189	ExpressionStatement	 
>41190	CallExpression	showRecipe -> alpha . data -> path . addPathNode ( 0 , 0 )
>41191	ArgumentList	0
>41192	Argument	0
>41193	PrimaryExpression	0
>41194	Argument	0
>41195	PrimaryExpression	0
>41196	Callee	showRecipe -> alpha . data -> path . addPathNode
>41197	MemberAccess	showRecipe -> alpha . data -> path . addPathNode
>41198	Identifier	addPathNode
>41199	PtrMemberAccess	showRecipe -> alpha . data -> path
>41200	Identifier	path
>41201	MemberAccess	showRecipe -> alpha . data
>41202	Identifier	data
>41203	PtrMemberAccess	showRecipe -> alpha
>41204	Identifier	alpha
>41205	Identifier	showRecipe
>41206	ExpressionStatement	 
>41207	CallExpression	showRecipe -> alpha . data -> path . clear ( )
>41208	ArgumentList	 
>41209	Callee	showRecipe -> alpha . data -> path . clear
>41210	MemberAccess	showRecipe -> alpha . data -> path . clear
>41211	Identifier	clear
>41212	PtrMemberAccess	showRecipe -> alpha . data -> path
>41213	Identifier	path
>41214	MemberAccess	showRecipe -> alpha . data
>41215	Identifier	data
>41216	PtrMemberAccess	showRecipe -> alpha
>41217	Identifier	alpha
>41218	Identifier	showRecipe
>41219	ExpressionStatement	 
>41220	CallExpression	showRecipe -> alpha . ensureData ( )
>41221	ArgumentList	 
>41222	Callee	showRecipe -> alpha . ensureData
>41223	MemberAccess	showRecipe -> alpha . ensureData
>41224	Identifier	ensureData
>41225	PtrMemberAccess	showRecipe -> alpha
>41226	Identifier	alpha
>41227	Identifier	showRecipe
>41228	ExpressionStatement	 
>41229	CallExpression	showRecipe -> scale . interpolateTo ( Vector ( 1.2 , 1.2 ) , t )
>41230	ArgumentList	Vector ( 1.2 , 1.2 )
>41231	Argument	t
>41232	Identifier	t
>41233	Argument	Vector ( 1.2 , 1.2 )
>41234	CallExpression	Vector ( 1.2 , 1.2 )
>41235	ArgumentList	1.2
>41236	Argument	1.2
>41237	PrimaryExpression	1.2
>41238	Argument	1.2
>41239	PrimaryExpression	1.2
>41240	Callee	Vector
>41241	Identifier	Vector
>41242	Callee	showRecipe -> scale . interpolateTo
>41243	MemberAccess	showRecipe -> scale . interpolateTo
>41244	Identifier	interpolateTo
>41245	PtrMemberAccess	showRecipe -> scale
>41246	Identifier	scale
>41247	Identifier	showRecipe
>41248	ExpressionStatement	 
>41249	AssignmentExpr	showRecipe -> scale = Vector ( 0.5 , 0.5 )
>41250	CallExpression	Vector ( 0.5 , 0.5 )
>41251	ArgumentList	0.5
>41252	Argument	0.5
>41253	PrimaryExpression	0.5
>41254	Argument	0.5
>41255	PrimaryExpression	0.5
>41256	Callee	Vector
>41257	Identifier	Vector
>41258	PtrMemberAccess	showRecipe -> scale
>41259	Identifier	scale
>41260	Identifier	showRecipe
>41261	ExpressionStatement	 
>41262	CallExpression	showRecipe -> setTexture ( n )
>41263	ArgumentList	n
>41264	Argument	n
>41265	Identifier	n
>41266	Callee	showRecipe -> setTexture
>41267	PtrMemberAccess	showRecipe -> setTexture
>41268	Identifier	setTexture
>41269	Identifier	showRecipe
>41270	IdentifierDeclStatement	 
>41271	IdentifierDecl	n = \"Ingredients/\" + data -> gfx
>41272	AssignmentExpr	n = \"Ingredients/\" + data -> gfx
>41273	AdditiveExpression	\"Ingredients/\" + data -> gfx
>41274	PtrMemberAccess	data -> gfx
>41275	Identifier	gfx
>41276	Identifier	data
>41277	PrimaryExpression	\"Ingredients/\"
>41278	Identifier	n
>41279	Identifier	n
>41280	IdentifierDeclType	std 
>41281	IdentifierDeclStatement	 
>41282	IdentifierDecl	t = 3
>41283	AssignmentExpr	t = 3
>41284	PrimaryExpression	3
>41285	Identifier	t
>41286	Identifier	t
>41287	IdentifierDeclType	float
>41288	Condition	 
>41289	Identifier	data
>41290	IfStatement	if ( longAnim )
>41291	ElseStatement	else
>41292	ExpressionStatement	 
>41293	CallExpression	dsq -> main ( 0.2 )
>41294	ArgumentList	0.2
>41295	Argument	0.2
>41296	PrimaryExpression	0.2
>41297	Callee	dsq -> main
>41298	PtrMemberAccess	dsq -> main
>41299	Identifier	main
>41300	Identifier	dsq
>41301	ExpressionStatement	 
>41302	CallExpression	dsq -> main ( 0.5 )
>41303	ArgumentList	0.5
>41304	Argument	0.5
>41305	PrimaryExpression	0.5
>41306	Callee	dsq -> main
>41307	PtrMemberAccess	dsq -> main
>41308	Identifier	main
>41309	Identifier	dsq
>41310	Condition	 
>41311	Identifier	longAnim
>41312	ExpressionStatement	 
>41313	CallExpression	dsq -> spawnParticleEffect ( \"cook-food\" , Vector ( 575 , 250 ) , 0 , 0 , LR_HUD3 , 1 )
>41314	ArgumentList	\"cook-food\"
>41315	Argument	1
>41316	PrimaryExpression	1
>41317	Argument	LR_HUD3
>41318	Identifier	LR_HUD3
>41319	Argument	0
>41320	PrimaryExpression	0
>41321	Argument	0
>41322	PrimaryExpression	0
>41323	Argument	Vector ( 575 , 250 )
>41324	CallExpression	Vector ( 575 , 250 )
>41325	ArgumentList	575
>41326	Argument	250
>41327	PrimaryExpression	250
>41328	Argument	575
>41329	PrimaryExpression	575
>41330	Callee	Vector
>41331	Identifier	Vector
>41332	Argument	\"cook-food\"
>41333	PrimaryExpression	\"cook-food\"
>41334	Callee	dsq -> spawnParticleEffect
>41335	PtrMemberAccess	dsq -> spawnParticleEffect
>41336	Identifier	spawnParticleEffect
>41337	Identifier	dsq
>41338	ForStatement	for ( int i = 0 ; i < foodHolders . size ( ) ; i ++ )
>41339	IfStatement	if ( foodHolders [ i ] -> alpha . x > 0 && ! foodHolders [ i ] -> isTrash ( ) )
>41340	ExpressionStatement	 
>41341	CallExpression	foodHolders [ i ] -> animateLid ( false )
>41342	ArgumentList	false
>41343	Argument	false
>41344	Identifier	false
>41345	Callee	foodHolders [ i ] -> animateLid
>41346	PtrMemberAccess	foodHolders [ i ] -> animateLid
>41347	Identifier	animateLid
>41348	ArrayIndexing	foodHolders [ i ]
>41349	Identifier	i
>41350	Identifier	foodHolders
>41351	Condition	 
>41352	AndExpression	foodHolders [ i ] -> alpha . x > 0 && ! foodHolders [ i ] -> isTrash ( )
>41353	UnaryOp	! foodHolders [ i ] -> isTrash ( )
>41354	CallExpression	foodHolders [ i ] -> isTrash ( )
>41355	ArgumentList	 
>41356	Callee	foodHolders [ i ] -> isTrash
>41357	PtrMemberAccess	foodHolders [ i ] -> isTrash
>41358	Identifier	isTrash
>41359	ArrayIndexing	foodHolders [ i ]
>41360	Identifier	i
>41361	Identifier	foodHolders
>41362	UnaryOperator	!
>41363	RelationalExpression	foodHolders [ i ] -> alpha . x > 0
>41364	PrimaryExpression	0
>41365	MemberAccess	foodHolders [ i ] -> alpha . x
>41366	Identifier	x
>41367	PtrMemberAccess	foodHolders [ i ] -> alpha
>41368	Identifier	alpha
>41369	ArrayIndexing	foodHolders [ i ]
>41370	Identifier	i
>41371	Identifier	foodHolders
>41372	IncDecOp	 
>41373	IncDec	++
>41374	Identifier	i
>41375	Condition	 
>41376	RelationalExpression	i < foodHolders . size ( )
>41377	CallExpression	foodHolders . size ( )
>41378	ArgumentList	 
>41379	Callee	foodHolders . size
>41380	MemberAccess	foodHolders . size
>41381	Identifier	size
>41382	Identifier	foodHolders
>41383	Identifier	i
>41384	ForInit	 
>41385	IdentifierDeclStatement	int i = 0 ;
>41386	IdentifierDecl	i = 0
>41387	AssignmentExpr	i = 0
>41388	PrimaryExpression	0
>41389	Identifier	i
>41390	Identifier	i
>41391	IdentifierDeclType	int
>41392	ExpressionStatement	 
>41393	CallExpression	dsq -> sound -> playSfx ( \"Cook\" )
>41394	ArgumentList	\"Cook\"
>41395	Argument	\"Cook\"
>41396	PrimaryExpression	\"Cook\"
>41397	Callee	dsq -> sound -> playSfx
>41398	PtrMemberAccess	dsq -> sound -> playSfx
>41399	Identifier	playSfx
>41400	PtrMemberAccess	dsq -> sound
>41401	Identifier	sound
>41402	Identifier	dsq
>41403	ForStatement	for ( int i = 0 ; i < foodHolders . size ( ) ; i ++ )
>41404	CompoundStatement	 
>41405	IfStatement	if ( ! haveLeftovers )
>41406	CompoundStatement	 
>41407	ExpressionStatement	 
>41408	CallExpression	foodHolders [ i ] -> setIngredient ( 0 , false )
>41409	ArgumentList	0
>41410	Argument	false
>41411	Identifier	false
>41412	Argument	0
>41413	PrimaryExpression	0
>41414	Callee	foodHolders [ i ] -> setIngredient
>41415	PtrMemberAccess	foodHolders [ i ] -> setIngredient
>41416	Identifier	setIngredient
>41417	ArrayIndexing	foodHolders [ i ]
>41418	Identifier	i
>41419	Identifier	foodHolders
>41420	Condition	 
>41421	UnaryOp	! haveLeftovers
>41422	Identifier	haveLeftovers
>41423	UnaryOperator	!
>41424	IfStatement	if ( ing )
>41425	CompoundStatement	 
>41426	ExpressionStatement	 
>41427	IncDecOp	ing -> amount --
>41428	IncDec	--
>41429	PtrMemberAccess	ing -> amount
>41430	Identifier	amount
>41431	Identifier	ing
>41432	Condition	 
>41433	Identifier	ing
>41434	IdentifierDeclStatement	 
>41435	IdentifierDecl	* ing = foodHolders [ i ] -> getIngredient ( )
>41436	AssignmentExpr	* ing = foodHolders [ i ] -> getIngredient ( )
>41437	CallExpression	foodHolders [ i ] -> getIngredient ( )
>41438	ArgumentList	 
>41439	Callee	foodHolders [ i ] -> getIngredient
>41440	PtrMemberAccess	foodHolders [ i ] -> getIngredient
>41441	Identifier	getIngredient
>41442	ArrayIndexing	foodHolders [ i ]
>41443	Identifier	i
>41444	Identifier	foodHolders
>41445	Identifier	ing
>41446	Identifier	ing
>41447	IdentifierDeclType	IngredientData *
>41448	IncDecOp	 
>41449	IncDec	++
>41450	Identifier	i
>41451	Condition	 
>41452	RelationalExpression	i < foodHolders . size ( )
>41453	CallExpression	foodHolders . size ( )
>41454	ArgumentList	 
>41455	Callee	foodHolders . size
>41456	MemberAccess	foodHolders . size
>41457	Identifier	size
>41458	Identifier	foodHolders
>41459	Identifier	i
>41460	ForInit	 
>41461	IdentifierDeclStatement	int i = 0 ;
>41462	IdentifierDecl	i = 0
>41463	AssignmentExpr	i = 0
>41464	PrimaryExpression	0
>41465	Identifier	i
>41466	Identifier	i
>41467	IdentifierDeclType	int
>41468	ForStatement	for ( int i = 0 ; i < foodHolders . size ( ) ; i ++ )
>41469	CompoundStatement	 
>41470	IfStatement	if ( ! foodHolders [ i ] -> isEmpty ( ) )
>41471	CompoundStatement	 
>41472	IfStatement	if ( ! ing || ing -> amount < ing -> held )
>41473	CompoundStatement	 
>41474	BreakStatement	 
>41475	ExpressionStatement	 
>41476	AssignmentExpr	haveLeftovers = false
>41477	Identifier	false
>41478	Identifier	haveLeftovers
>41479	Condition	 
>41480	OrExpression	! ing || ing -> amount < ing -> held
>41481	RelationalExpression	ing -> amount < ing -> held
>41482	PtrMemberAccess	ing -> held
>41483	Identifier	held
>41484	Identifier	ing
>41485	PtrMemberAccess	ing -> amount
>41486	Identifier	amount
>41487	Identifier	ing
>41488	UnaryOp	! ing
>41489	Identifier	ing
>41490	UnaryOperator	!
>41491	IdentifierDeclStatement	 
>41492	IdentifierDecl	* ing = foodHolders [ i ] -> getIngredient ( )
>41493	AssignmentExpr	* ing = foodHolders [ i ] -> getIngredient ( )
>41494	CallExpression	foodHolders [ i ] -> getIngredient ( )
>41495	ArgumentList	 
>41496	Callee	foodHolders [ i ] -> getIngredient
>41497	PtrMemberAccess	foodHolders [ i ] -> getIngredient
>41498	Identifier	getIngredient
>41499	ArrayIndexing	foodHolders [ i ]
>41500	Identifier	i
>41501	Identifier	foodHolders
>41502	Identifier	ing
>41503	Identifier	ing
>41504	IdentifierDeclType	IngredientData *
>41505	Condition	 
>41506	UnaryOp	! foodHolders [ i ] -> isEmpty ( )
>41507	CallExpression	foodHolders [ i ] -> isEmpty ( )
>41508	ArgumentList	 
>41509	Callee	foodHolders [ i ] -> isEmpty
>41510	PtrMemberAccess	foodHolders [ i ] -> isEmpty
>41511	Identifier	isEmpty
>41512	ArrayIndexing	foodHolders [ i ]
>41513	Identifier	i
>41514	Identifier	foodHolders
>41515	UnaryOperator	!
>41516	IncDecOp	 
>41517	IncDec	++
>41518	Identifier	i
>41519	Condition	 
>41520	RelationalExpression	i < foodHolders . size ( )
>41521	CallExpression	foodHolders . size ( )
>41522	ArgumentList	 
>41523	Callee	foodHolders . size
>41524	MemberAccess	foodHolders . size
>41525	Identifier	size
>41526	Identifier	foodHolders
>41527	Identifier	i
>41528	ForInit	 
>41529	IdentifierDeclStatement	int i = 0 ;
>41530	IdentifierDecl	i = 0
>41531	AssignmentExpr	i = 0
>41532	PrimaryExpression	0
>41533	Identifier	i
>41534	Identifier	i
>41535	IdentifierDeclType	int
>41536	IdentifierDeclStatement	 
>41537	IdentifierDecl	haveLeftovers = true
>41538	AssignmentExpr	haveLeftovers = true
>41539	Identifier	true
>41540	Identifier	true
>41541	Identifier	haveLeftovers
>41542	IdentifierDeclType	bool
>41543	IfStatement	if ( longAnim )
>41544	ElseStatement	else
>41545	ExpressionStatement	 
>41546	CallExpression	dsq -> main ( 0.2 )
>41547	ArgumentList	0.2
>41548	Argument	0.2
>41549	PrimaryExpression	0.2
>41550	Callee	dsq -> main
>41551	PtrMemberAccess	dsq -> main
>41552	Identifier	main
>41553	Identifier	dsq
>41554	ExpressionStatement	 
>41555	CallExpression	dsq -> main ( 0.5 )
>41556	ArgumentList	0.5
>41557	Argument	0.5
>41558	PrimaryExpression	0.5
>41559	Callee	dsq -> main
>41560	PtrMemberAccess	dsq -> main
>41561	Identifier	main
>41562	Identifier	dsq
>41563	Condition	 
>41564	Identifier	longAnim
>41565	ForStatement	for ( int i = 0 ; i < foodHolders . size ( ) ; i ++ )
>41566	CompoundStatement	 
>41567	IfStatement	if ( ! foodHolders [ i ] -> isEmpty ( ) )
>41568	ExpressionStatement	 
>41569	CallExpression	dsq -> spawnParticleEffect ( \"cook-ingredient\" , foodHolders [ i ] -> getWorldPosition ( ) , 0 , 0 , LR_HUD3 , 1 )
>41570	ArgumentList	\"cook-ingredient\"
>41571	Argument	1
>41572	PrimaryExpression	1
>41573	Argument	LR_HUD3
>41574	Identifier	LR_HUD3
>41575	Argument	0
>41576	PrimaryExpression	0
>41577	Argument	0
>41578	PrimaryExpression	0
>41579	Argument	foodHolders [ i ] -> getWorldPosition ( )
>41580	CallExpression	foodHolders [ i ] -> getWorldPosition ( )
>41581	ArgumentList	 
>41582	Callee	foodHolders [ i ] -> getWorldPosition
>41583	PtrMemberAccess	foodHolders [ i ] -> getWorldPosition
>41584	Identifier	getWorldPosition
>41585	ArrayIndexing	foodHolders [ i ]
>41586	Identifier	i
>41587	Identifier	foodHolders
>41588	Argument	\"cook-ingredient\"
>41589	PrimaryExpression	\"cook-ingredient\"
>41590	Callee	dsq -> spawnParticleEffect
>41591	PtrMemberAccess	dsq -> spawnParticleEffect
>41592	Identifier	spawnParticleEffect
>41593	Identifier	dsq
>41594	Condition	 
>41595	UnaryOp	! foodHolders [ i ] -> isEmpty ( )
>41596	CallExpression	foodHolders [ i ] -> isEmpty ( )
>41597	ArgumentList	 
>41598	Callee	foodHolders [ i ] -> isEmpty
>41599	PtrMemberAccess	foodHolders [ i ] -> isEmpty
>41600	Identifier	isEmpty
>41601	ArrayIndexing	foodHolders [ i ]
>41602	Identifier	i
>41603	Identifier	foodHolders
>41604	UnaryOperator	!
>41605	IncDecOp	 
>41606	IncDec	++
>41607	Identifier	i
>41608	Condition	 
>41609	RelationalExpression	i < foodHolders . size ( )
>41610	CallExpression	foodHolders . size ( )
>41611	ArgumentList	 
>41612	Callee	foodHolders . size
>41613	MemberAccess	foodHolders . size
>41614	Identifier	size
>41615	Identifier	foodHolders
>41616	Identifier	i
>41617	ForInit	 
>41618	IdentifierDeclStatement	int i = 0 ;
>41619	IdentifierDecl	i = 0
>41620	AssignmentExpr	i = 0
>41621	PrimaryExpression	0
>41622	Identifier	i
>41623	Identifier	i
>41624	IdentifierDeclType	int
>41625	ExpressionStatement	 
>41626	CallExpression	dsq -> sound -> playSfx ( \"boil\" )
>41627	ArgumentList	\"boil\"
>41628	Argument	\"boil\"
>41629	PrimaryExpression	\"boil\"
>41630	Callee	dsq -> sound -> playSfx
>41631	PtrMemberAccess	dsq -> sound -> playSfx
>41632	Identifier	playSfx
>41633	PtrMemberAccess	dsq -> sound
>41634	Identifier	sound
>41635	Identifier	dsq
>41636	IfStatement	if ( longAnim )
>41637	CompoundStatement	 
>41638	ExpressionStatement	 
>41639	CallExpression	dsq -> main ( nt )
>41640	ArgumentList	nt
>41641	Argument	nt
>41642	Identifier	nt
>41643	Callee	dsq -> main
>41644	PtrMemberAccess	dsq -> main
>41645	Identifier	main
>41646	Identifier	dsq
>41647	ExpressionStatement	 
>41648	CallExpression	dsq -> sound -> fadeSfx ( handle , SFT_OUT , ft )
>41649	ArgumentList	handle
>41650	Argument	ft
>41651	Identifier	ft
>41652	Argument	SFT_OUT
>41653	Identifier	SFT_OUT
>41654	Argument	handle
>41655	Identifier	handle
>41656	Callee	dsq -> sound -> fadeSfx
>41657	PtrMemberAccess	dsq -> sound -> fadeSfx
>41658	Identifier	fadeSfx
>41659	PtrMemberAccess	dsq -> sound
>41660	Identifier	sound
>41661	Identifier	dsq
>41662	ExpressionStatement	 
>41663	CallExpression	dsq -> main ( nt2 )
>41664	ArgumentList	nt2
>41665	Argument	nt2
>41666	Identifier	nt2
>41667	Callee	dsq -> main
>41668	PtrMemberAccess	dsq -> main
>41669	Identifier	main
>41670	Identifier	dsq
>41671	ExpressionStatement	 
>41672	AssignmentExpr	handle = dsq -> sound -> playSfx ( note3 )
>41673	CallExpression	dsq -> sound -> playSfx ( note3 )
>41674	ArgumentList	note3
>41675	Argument	note3
>41676	Identifier	note3
>41677	Callee	dsq -> sound -> playSfx
>41678	PtrMemberAccess	dsq -> sound -> playSfx
>41679	Identifier	playSfx
>41680	PtrMemberAccess	dsq -> sound
>41681	Identifier	sound
>41682	Identifier	dsq
>41683	Identifier	handle
>41684	ExpressionStatement	 
>41685	CallExpression	dsq -> main ( nt )
>41686	ArgumentList	nt
>41687	Argument	nt
>41688	Identifier	nt
>41689	Callee	dsq -> main
>41690	PtrMemberAccess	dsq -> main
>41691	Identifier	main
>41692	Identifier	dsq
>41693	ExpressionStatement	 
>41694	CallExpression	dsq -> sound -> fadeSfx ( handle , SFT_OUT , ft )
>41695	ArgumentList	handle
>41696	Argument	ft
>41697	Identifier	ft
>41698	Argument	SFT_OUT
>41699	Identifier	SFT_OUT
>41700	Argument	handle
>41701	Identifier	handle
>41702	Callee	dsq -> sound -> fadeSfx
>41703	PtrMemberAccess	dsq -> sound -> fadeSfx
>41704	Identifier	fadeSfx
>41705	PtrMemberAccess	dsq -> sound
>41706	Identifier	sound
>41707	Identifier	dsq
>41708	ExpressionStatement	 
>41709	CallExpression	dsq -> main ( nt2 )
>41710	ArgumentList	nt2
>41711	Argument	nt2
>41712	Identifier	nt2
>41713	Callee	dsq -> main
>41714	PtrMemberAccess	dsq -> main
>41715	Identifier	main
>41716	Identifier	dsq
>41717	ExpressionStatement	 
>41718	AssignmentExpr	handle = dsq -> sound -> playSfx ( note2 )
>41719	CallExpression	dsq -> sound -> playSfx ( note2 )
>41720	ArgumentList	note2
>41721	Argument	note2
>41722	Identifier	note2
>41723	Callee	dsq -> sound -> playSfx
>41724	PtrMemberAccess	dsq -> sound -> playSfx
>41725	Identifier	playSfx
>41726	PtrMemberAccess	dsq -> sound
>41727	Identifier	sound
>41728	Identifier	dsq
>41729	Identifier	handle
>41730	ExpressionStatement	 
>41731	CallExpression	dsq -> main ( nt )
>41732	ArgumentList	nt
>41733	Argument	nt
>41734	Identifier	nt
>41735	Callee	dsq -> main
>41736	PtrMemberAccess	dsq -> main
>41737	Identifier	main
>41738	Identifier	dsq
>41739	ExpressionStatement	 
>41740	CallExpression	dsq -> sound -> fadeSfx ( handle , SFT_OUT , ft )
>41741	ArgumentList	handle
>41742	Argument	ft
>41743	Identifier	ft
>41744	Argument	SFT_OUT
>41745	Identifier	SFT_OUT
>41746	Argument	handle
>41747	Identifier	handle
>41748	Callee	dsq -> sound -> fadeSfx
>41749	PtrMemberAccess	dsq -> sound -> fadeSfx
>41750	Identifier	fadeSfx
>41751	PtrMemberAccess	dsq -> sound
>41752	Identifier	sound
>41753	Identifier	dsq
>41754	ExpressionStatement	 
>41755	CallExpression	dsq -> main ( nt2 )
>41756	ArgumentList	nt2
>41757	Argument	nt2
>41758	Identifier	nt2
>41759	Callee	dsq -> main
>41760	PtrMemberAccess	dsq -> main
>41761	Identifier	main
>41762	Identifier	dsq
>41763	ExpressionStatement	 
>41764	AssignmentExpr	handle = dsq -> sound -> playSfx ( note1 )
>41765	CallExpression	dsq -> sound -> playSfx ( note1 )
>41766	ArgumentList	note1
>41767	Argument	note1
>41768	Identifier	note1
>41769	Callee	dsq -> sound -> playSfx
>41770	PtrMemberAccess	dsq -> sound -> playSfx
>41771	Identifier	playSfx
>41772	PtrMemberAccess	dsq -> sound
>41773	Identifier	sound
>41774	Identifier	dsq
>41775	Identifier	handle
>41776	ExpressionStatement	 
>41777	AssignmentExpr	note3 . name = getNoteName ( 3 )
>41778	CallExpression	getNoteName ( 3 )
>41779	ArgumentList	3
>41780	Argument	3
>41781	PrimaryExpression	3
>41782	Callee	getNoteName
>41783	Identifier	getNoteName
>41784	MemberAccess	note3 . name
>41785	Identifier	name
>41786	Identifier	note3
>41787	IdentifierDeclStatement	 
>41788	IdentifierDecl	note3
>41789	Identifier	note3
>41790	IdentifierDeclType	PlaySfx
>41791	ExpressionStatement	 
>41792	AssignmentExpr	note2 . name = getNoteName ( 4 )
>41793	CallExpression	getNoteName ( 4 )
>41794	ArgumentList	4
>41795	Argument	4
>41796	PrimaryExpression	4
>41797	Callee	getNoteName
>41798	Identifier	getNoteName
>41799	MemberAccess	note2 . name
>41800	Identifier	name
>41801	Identifier	note2
>41802	IdentifierDeclStatement	 
>41803	IdentifierDecl	note2
>41804	Identifier	note2
>41805	IdentifierDeclType	PlaySfx
>41806	ExpressionStatement	 
>41807	AssignmentExpr	note1 . name = getNoteName ( 0 )
>41808	CallExpression	getNoteName ( 0 )
>41809	ArgumentList	0
>41810	Argument	0
>41811	PrimaryExpression	0
>41812	Callee	getNoteName
>41813	Identifier	getNoteName
>41814	MemberAccess	note1 . name
>41815	Identifier	name
>41816	Identifier	note1
>41817	IdentifierDeclStatement	 
>41818	IdentifierDecl	note1
>41819	Identifier	note1
>41820	IdentifierDeclType	PlaySfx
>41821	IdentifierDeclStatement	 
>41822	IdentifierDecl	* handle = NULL
>41823	AssignmentExpr	* handle = NULL
>41824	Identifier	NULL
>41825	Identifier	NULL
>41826	Identifier	handle
>41827	IdentifierDeclType	void *
>41828	IdentifierDeclStatement	 
>41829	IdentifierDecl	nt2 = 0.2
>41830	AssignmentExpr	nt2 = 0.2
>41831	PrimaryExpression	0.2
>41832	Identifier	nt2
>41833	Identifier	nt2
>41834	IdentifierDeclType	float
>41835	IdentifierDeclStatement	 
>41836	IdentifierDecl	nt = 0.1
>41837	AssignmentExpr	nt = 0.1
>41838	PrimaryExpression	0.1
>41839	Identifier	nt
>41840	Identifier	nt
>41841	IdentifierDeclType	float
>41842	IdentifierDeclStatement	 
>41843	IdentifierDecl	ft = 0.8
>41844	AssignmentExpr	ft = 0.8
>41845	PrimaryExpression	0.8
>41846	Identifier	ft
>41847	Identifier	ft
>41848	IdentifierDeclType	float
>41849	Condition	 
>41850	Identifier	longAnim
>41851	ForStatement	for ( int i = foodHolders . size ( ) - 1 ; i >= 0 ; i -- )
>41852	IfStatement	if ( foodHolders [ i ] -> alpha . x > 0 && ! foodHolders [ i ] -> isEmpty ( ) && ! foodHolders [ i ] -> isTrash ( ) )
>41853	ExpressionStatement	 
>41854	CallExpression	foodHolders [ i ] -> animateLid ( true , longAnim )
>41855	ArgumentList	true
>41856	Argument	longAnim
>41857	Identifier	longAnim
>41858	Argument	true
>41859	Identifier	true
>41860	Callee	foodHolders [ i ] -> animateLid
>41861	PtrMemberAccess	foodHolders [ i ] -> animateLid
>41862	Identifier	animateLid
>41863	ArrayIndexing	foodHolders [ i ]
>41864	Identifier	i
>41865	Identifier	foodHolders
>41866	Condition	 
>41867	AndExpression	foodHolders [ i ] -> alpha . x > 0 && ! foodHolders [ i ] -> isEmpty ( ) && ! foodHolders [ i ] -> isTrash ( )
>41868	AndExpression	! foodHolders [ i ] -> isEmpty ( ) && ! foodHolders [ i ] -> isTrash ( )
>41869	UnaryOp	! foodHolders [ i ] -> isTrash ( )
>41870	CallExpression	foodHolders [ i ] -> isTrash ( )
>41871	ArgumentList	 
>41872	Callee	foodHolders [ i ] -> isTrash
>41873	PtrMemberAccess	foodHolders [ i ] -> isTrash
>41874	Identifier	isTrash
>41875	ArrayIndexing	foodHolders [ i ]
>41876	Identifier	i
>41877	Identifier	foodHolders
>41878	UnaryOperator	!
>41879	UnaryOp	! foodHolders [ i ] -> isEmpty ( )
>41880	CallExpression	foodHolders [ i ] -> isEmpty ( )
>41881	ArgumentList	 
>41882	Callee	foodHolders [ i ] -> isEmpty
>41883	PtrMemberAccess	foodHolders [ i ] -> isEmpty
>41884	Identifier	isEmpty
>41885	ArrayIndexing	foodHolders [ i ]
>41886	Identifier	i
>41887	Identifier	foodHolders
>41888	UnaryOperator	!
>41889	RelationalExpression	foodHolders [ i ] -> alpha . x > 0
>41890	PrimaryExpression	0
>41891	MemberAccess	foodHolders [ i ] -> alpha . x
>41892	Identifier	x
>41893	PtrMemberAccess	foodHolders [ i ] -> alpha
>41894	Identifier	alpha
>41895	ArrayIndexing	foodHolders [ i ]
>41896	Identifier	i
>41897	Identifier	foodHolders
>41898	IncDecOp	 
>41899	IncDec	--
>41900	Identifier	i
>41901	Condition	 
>41902	RelationalExpression	i >= 0
>41903	PrimaryExpression	0
>41904	Identifier	i
>41905	ForInit	 
>41906	IdentifierDeclStatement	int i = foodHolders . size ( ) - 1 ;
>41907	IdentifierDecl	i = foodHolders . size ( ) - 1
>41908	AssignmentExpr	i = foodHolders . size ( ) - 1
>41909	AdditiveExpression	foodHolders . size ( ) - 1
>41910	PrimaryExpression	1
>41911	CallExpression	foodHolders . size ( )
>41912	ArgumentList	 
>41913	Callee	foodHolders . size
>41914	MemberAccess	foodHolders . size
>41915	Identifier	size
>41916	Identifier	foodHolders
>41917	Identifier	i
>41918	Identifier	i
>41919	IdentifierDeclType	int
>41920	IfStatement	if ( cooks >= 4 )
>41921	ExpressionStatement	 
>41922	AssignmentExpr	longAnim = false
>41923	Identifier	false
>41924	Identifier	longAnim
>41925	Condition	 
>41926	RelationalExpression	cooks >= 4
>41927	PrimaryExpression	4
>41928	Identifier	cooks
>41929	IdentifierDeclStatement	 
>41930	IdentifierDecl	cooks = dsq -> continuity . getFlag ( FLAG_COOKS )
>41931	AssignmentExpr	cooks = dsq -> continuity . getFlag ( FLAG_COOKS )
>41932	CallExpression	dsq -> continuity . getFlag ( FLAG_COOKS )
>41933	ArgumentList	FLAG_COOKS
>41934	Argument	FLAG_COOKS
>41935	Identifier	FLAG_COOKS
>41936	Callee	dsq -> continuity . getFlag
>41937	MemberAccess	dsq -> continuity . getFlag
>41938	Identifier	getFlag
>41939	PtrMemberAccess	dsq -> continuity
>41940	Identifier	continuity
>41941	Identifier	dsq
>41942	Identifier	cooks
>41943	Identifier	cooks
>41944	IdentifierDeclType	int
>41945	IdentifierDeclStatement	 
>41946	IdentifierDecl	longAnim = true
>41947	AssignmentExpr	longAnim = true
>41948	Identifier	true
>41949	Identifier	true
>41950	Identifier	longAnim
>41951	IdentifierDeclType	bool
>41952	ExpressionStatement	 
>41953	AssignmentExpr	core -> mouse . buttonsEnabled = false
>41954	Identifier	false
>41955	MemberAccess	core -> mouse . buttonsEnabled
>41956	Identifier	buttonsEnabled
>41957	PtrMemberAccess	core -> mouse
>41958	Identifier	mouse
>41959	Identifier	core
>41960	ExpressionStatement	 
>41961	CallExpression	debugLog ( \"Cooked something!\" )
>41962	ArgumentList	\"Cooked something!\"
>41963	Argument	\"Cooked something!\"
>41964	PrimaryExpression	\"Cooked something!\"
>41965	Callee	debugLog
>41966	Identifier	debugLog
>41967	Condition	 
>41968	Identifier	cooked
>41969	IfStatement	if ( data )
>41970	CompoundStatement	 
>41971	ExpressionStatement	 
>41972	AssignmentExpr	cooked = ! dsq -> continuity . isIngredientFull ( data )
>41973	UnaryOp	! dsq -> continuity . isIngredientFull ( data )
>41974	CallExpression	dsq -> continuity . isIngredientFull ( data )
>41975	ArgumentList	data
>41976	Argument	data
>41977	Identifier	data
>41978	Callee	dsq -> continuity . isIngredientFull
>41979	MemberAccess	dsq -> continuity . isIngredientFull
>41980	Identifier	isIngredientFull
>41981	PtrMemberAccess	dsq -> continuity
>41982	Identifier	continuity
>41983	Identifier	dsq
>41984	UnaryOperator	!
>41985	Identifier	cooked
>41986	Condition	 
>41987	Identifier	data
>41988	IfStatement	if ( ! data )
>41989	CompoundStatement	 
>41990	IfStatement	if ( ! tooMany )
>41991	CompoundStatement	 
>41992	ExpressionStatement	 
>41993	CallExpression	dsq -> continuity . setFlag ( FLAG_SEALOAFANNOYANCE , f )
>41994	ArgumentList	FLAG_SEALOAFANNOYANCE
>41995	Argument	f
>41996	Identifier	f
>41997	Argument	FLAG_SEALOAFANNOYANCE
>41998	Identifier	FLAG_SEALOAFANNOYANCE
>41999	Callee	dsq -> continuity . setFlag
>42000	MemberAccess	dsq -> continuity . setFlag
>42001	Identifier	setFlag
>42002	PtrMemberAccess	dsq -> continuity
>42003	Identifier	continuity
>42004	Identifier	dsq
>42005	IfStatement	if ( f >= 3 )
>42006	CompoundStatement	 
>42007	ExpressionStatement	 
>42008	AssignmentExpr	f = 0
>42009	PrimaryExpression	0
>42010	Identifier	f
>42011	ExpressionStatement	 
>42012	CallExpression	dsq -> voiceInterupt ( \"naija_sealoaf\" )
>42013	ArgumentList	\"naija_sealoaf\"
>42014	Argument	\"naija_sealoaf\"
>42015	PrimaryExpression	\"naija_sealoaf\"
>42016	Callee	dsq -> voiceInterupt
>42017	PtrMemberAccess	dsq -> voiceInterupt
>42018	Identifier	voiceInterupt
>42019	Identifier	dsq
>42020	Condition	 
>42021	RelationalExpression	f >= 3
>42022	PrimaryExpression	3
>42023	Identifier	f
>42024	ExpressionStatement	 
>42025	IncDecOp	f ++
>42026	IncDec	++
>42027	Identifier	f
>42028	IdentifierDeclStatement	 
>42029	IdentifierDecl	f = dsq -> continuity . getFlag ( FLAG_SEALOAFANNOYANCE )
>42030	AssignmentExpr	f = dsq -> continuity . getFlag ( FLAG_SEALOAFANNOYANCE )
>42031	CallExpression	dsq -> continuity . getFlag ( FLAG_SEALOAFANNOYANCE )
>42032	ArgumentList	FLAG_SEALOAFANNOYANCE
>42033	Argument	FLAG_SEALOAFANNOYANCE
>42034	Identifier	FLAG_SEALOAFANNOYANCE
>42035	Callee	dsq -> continuity . getFlag
>42036	MemberAccess	dsq -> continuity . getFlag
>42037	Identifier	getFlag
>42038	PtrMemberAccess	dsq -> continuity
>42039	Identifier	continuity
>42040	Identifier	dsq
>42041	Identifier	f
>42042	Identifier	f
>42043	IdentifierDeclType	int
>42044	Condition	 
>42045	UnaryOp	! tooMany
>42046	Identifier	tooMany
>42047	UnaryOperator	!
>42048	IdentifierDeclStatement	 
>42049	IdentifierDecl	tooMany = data && dsq -> continuity . isIngredientFull ( data )
>42050	AssignmentExpr	tooMany = data && dsq -> continuity . isIngredientFull ( data )
>42051	AndExpression	data && dsq -> continuity . isIngredientFull ( data )
>42052	CallExpression	dsq -> continuity . isIngredientFull ( data )
>42053	ArgumentList	data
>42054	Argument	data
>42055	Identifier	data
>42056	Callee	dsq -> continuity . isIngredientFull
>42057	MemberAccess	dsq -> continuity . isIngredientFull
>42058	Identifier	isIngredientFull
>42059	PtrMemberAccess	dsq -> continuity
>42060	Identifier	continuity
>42061	Identifier	dsq
>42062	Identifier	data
>42063	Identifier	tooMany
>42064	Identifier	tooMany
>42065	IdentifierDeclType	bool
>42066	ExpressionStatement	 
>42067	AssignmentExpr	data = dsq -> continuity . getIngredientDataByName ( \"SeaLoaf\" )
>42068	CallExpression	dsq -> continuity . getIngredientDataByName ( \"SeaLoaf\" )
>42069	ArgumentList	\"SeaLoaf\"
>42070	Argument	\"SeaLoaf\"
>42071	PrimaryExpression	\"SeaLoaf\"
>42072	Callee	dsq -> continuity . getIngredientDataByName
>42073	MemberAccess	dsq -> continuity . getIngredientDataByName
>42074	Identifier	getIngredientDataByName
>42075	PtrMemberAccess	dsq -> continuity
>42076	Identifier	continuity
>42077	Identifier	dsq
>42078	Identifier	data
>42079	ExpressionStatement	 
>42080	CallExpression	dsq -> sound -> playSfx ( \"Denied\" )
>42081	ArgumentList	\"Denied\"
>42082	Argument	\"Denied\"
>42083	PrimaryExpression	\"Denied\"
>42084	Callee	dsq -> sound -> playSfx
>42085	PtrMemberAccess	dsq -> sound -> playSfx
>42086	Identifier	playSfx
>42087	PtrMemberAccess	dsq -> sound
>42088	Identifier	sound
>42089	Identifier	dsq
>42090	Condition	 
>42091	UnaryOp	! data
>42092	Identifier	data
>42093	UnaryOperator	!
>42094	IfStatement	if ( r )
>42095	ElseStatement	else
>42096	IfStatement	if ( cookingScript )
>42097	CompoundStatement	 
>42098	IfStatement	if ( cookingScript -> call ( \"cookFailure\" , p1 , p2 , p3 , & ingname ) )
>42099	CompoundStatement	 
>42100	IfStatement	if ( ! data )
>42101	GotoStatement	 
>42102	Identifier	endcook
>42103	Condition	 
>42104	UnaryOp	! data
>42105	Identifier	data
>42106	UnaryOperator	!
>42107	IfStatement	if ( ingname . length ( ) )
>42108	ExpressionStatement	 
>42109	AssignmentExpr	data = dsq -> continuity . getIngredientDataByName ( ingname )
>42110	CallExpression	dsq -> continuity . getIngredientDataByName ( ingname )
>42111	ArgumentList	ingname
>42112	Argument	ingname
>42113	Identifier	ingname
>42114	Callee	dsq -> continuity . getIngredientDataByName
>42115	MemberAccess	dsq -> continuity . getIngredientDataByName
>42116	Identifier	getIngredientDataByName
>42117	PtrMemberAccess	dsq -> continuity
>42118	Identifier	continuity
>42119	Identifier	dsq
>42120	Identifier	data
>42121	Condition	 
>42122	CallExpression	ingname . length ( )
>42123	ArgumentList	 
>42124	Callee	ingname . length
>42125	MemberAccess	ingname . length
>42126	Identifier	length
>42127	Identifier	ingname
>42128	Condition	 
>42129	CallExpression	cookingScript -> call ( \"cookFailure\" , p1 , p2 , p3 , & ingname )
>42130	ArgumentList	\"cookFailure\"
>42131	Argument	& ingname
>42132	UnaryOp	& ingname
>42133	Identifier	ingname
>42134	UnaryOperator	&
>42135	Argument	p3
>42136	Identifier	p3
>42137	Argument	p2
>42138	Identifier	p2
>42139	Argument	p1
>42140	Identifier	p1
>42141	Argument	\"cookFailure\"
>42142	PrimaryExpression	\"cookFailure\"
>42143	Callee	cookingScript -> call
>42144	PtrMemberAccess	cookingScript -> call
>42145	Identifier	call
>42146	Identifier	cookingScript
>42147	IdentifierDeclStatement	 
>42148	IdentifierDecl	ingname
>42149	Identifier	ingname
>42150	IdentifierDeclType	std 
>42151	IdentifierDeclStatement	 
>42152	IdentifierDecl	* p3 = cookList . size ( ) >= 3 ? cookList [ 2 ] -> name . c_str ( ) 
>42153	AssignmentExpr	* p3 = cookList . size ( ) >= 3 ? cookList [ 2 ] -> name . c_str ( ) 
>42154	ConditionalExpression	cookList . size ( ) >= 3 ? cookList [ 2 ] -> name . c_str ( ) 
>42155	PrimaryExpression	\"\"
>42156	CallExpression	cookList [ 2 ] -> name . c_str ( )
>42157	ArgumentList	 
>42158	Callee	cookList [ 2 ] -> name . c_str
>42159	MemberAccess	cookList [ 2 ] -> name . c_str
>42160	Identifier	c_str
>42161	PtrMemberAccess	cookList [ 2 ] -> name
>42162	Identifier	name
>42163	ArrayIndexing	cookList [ 2 ]
>42164	PrimaryExpression	2
>42165	Identifier	cookList
>42166	Condition	cookList . size ( ) >= 3
>42167	RelationalExpression	cookList . size ( ) >= 3
>42168	PrimaryExpression	3
>42169	CallExpression	cookList . size ( )
>42170	ArgumentList	 
>42171	Callee	cookList . size
>42172	MemberAccess	cookList . size
>42173	Identifier	size
>42174	Identifier	cookList
>42175	Identifier	p3
>42176	Identifier	p3
>42177	IdentifierDeclType	const char *
>42178	IdentifierDeclStatement	 
>42179	IdentifierDecl	* p2 = cookList [ 1 ] -> name . c_str ( )
>42180	AssignmentExpr	* p2 = cookList [ 1 ] -> name . c_str ( )
>42181	CallExpression	cookList [ 1 ] -> name . c_str ( )
>42182	ArgumentList	 
>42183	Callee	cookList [ 1 ] -> name . c_str
>42184	MemberAccess	cookList [ 1 ] -> name . c_str
>42185	Identifier	c_str
>42186	PtrMemberAccess	cookList [ 1 ] -> name
>42187	Identifier	name
>42188	ArrayIndexing	cookList [ 1 ]
>42189	PrimaryExpression	1
>42190	Identifier	cookList
>42191	Identifier	p2
>42192	Identifier	p2
>42193	IdentifierDeclType	const char *
>42194	IdentifierDeclStatement	 
>42195	IdentifierDecl	* p1 = cookList [ 0 ] -> name . c_str ( )
>42196	AssignmentExpr	* p1 = cookList [ 0 ] -> name . c_str ( )
>42197	CallExpression	cookList [ 0 ] -> name . c_str ( )
>42198	ArgumentList	 
>42199	Callee	cookList [ 0 ] -> name . c_str
>42200	MemberAccess	cookList [ 0 ] -> name . c_str
>42201	Identifier	c_str
>42202	PtrMemberAccess	cookList [ 0 ] -> name
>42203	Identifier	name
>42204	ArrayIndexing	cookList [ 0 ]
>42205	PrimaryExpression	0
>42206	Identifier	cookList
>42207	Identifier	p1
>42208	Identifier	p1
>42209	IdentifierDeclType	const char *
>42210	Condition	 
>42211	Identifier	cookingScript
>42212	ExpressionStatement	 
>42213	AssignmentExpr	data = dsq -> continuity . getIngredientDataByName ( r -> result )
>42214	CallExpression	dsq -> continuity . getIngredientDataByName ( r -> result )
>42215	ArgumentList	r -> result
>42216	Argument	r -> result
>42217	PtrMemberAccess	r -> result
>42218	Identifier	result
>42219	Identifier	r
>42220	Callee	dsq -> continuity . getIngredientDataByName
>42221	MemberAccess	dsq -> continuity . getIngredientDataByName
>42222	Identifier	getIngredientDataByName
>42223	PtrMemberAccess	dsq -> continuity
>42224	Identifier	continuity
>42225	Identifier	dsq
>42226	Identifier	data
>42227	Condition	 
>42228	Identifier	r
>42229	IdentifierDeclStatement	 
>42230	IdentifierDecl	* r = findRecipe ( cookList )
>42231	AssignmentExpr	* r = findRecipe ( cookList )
>42232	CallExpression	findRecipe ( cookList )
>42233	ArgumentList	cookList
>42234	Argument	cookList
>42235	Identifier	cookList
>42236	Callee	findRecipe
>42237	Identifier	findRecipe
>42238	Identifier	r
>42239	Identifier	r
>42240	IdentifierDeclType	Recipe *
>42241	IdentifierDeclStatement	 
>42242	IdentifierDecl	* data = 0
>42243	AssignmentExpr	* data = 0
>42244	PrimaryExpression	0
>42245	Identifier	data
>42246	Identifier	data
>42247	IdentifierDeclType	IngredientData *
>42248	ExpressionStatement	 
>42249	AssignmentExpr	isCooking = true
>42250	Identifier	true
>42251	Identifier	isCooking
>42252	IdentifierDeclStatement	 
>42253	IdentifierDecl	cooked = false
>42254	AssignmentExpr	cooked = false
>42255	Identifier	false
>42256	Identifier	false
>42257	Identifier	cooked
>42258	IdentifierDeclType	bool
>42259	ExpressionStatement	 
>42260	AssignmentExpr	cookDelay = 0.4
>42261	PrimaryExpression	0.4
>42262	Identifier	cookDelay
>42263	ExpressionStatement	 
>42264	AssignmentExpr	AquariaGuiElement 
>42265	Identifier	false
>42266	Identifier	AquariaGuiElement 
>42267	IfStatement	if ( cookList . size ( ) < 2 || recipeMenu . on )
>42268	ReturnStatement	 
>42269	Condition	 
>42270	OrExpression	cookList . size ( ) < 2 || recipeMenu . on
>42271	MemberAccess	recipeMenu . on
>42272	Identifier	on
>42273	Identifier	recipeMenu
>42274	RelationalExpression	cookList . size ( ) < 2
>42275	PrimaryExpression	2
>42276	CallExpression	cookList . size ( )
>42277	ArgumentList	 
>42278	Callee	cookList . size
>42279	MemberAccess	cookList . size
>42280	Identifier	size
>42281	Identifier	cookList
>42282	ExpressionStatement	 
>42283	CallExpression	updateCookList ( )
>42284	ArgumentList	 
>42285	Callee	updateCookList
>42286	Identifier	updateCookList
>42287	ExpressionStatement	 
>42288	CallExpression	debugLog ( \"Cook!\" )
>42289	ArgumentList	\"Cook!\"
>42290	Argument	\"Cook!\"
>42291	PrimaryExpression	\"Cook!\"
>42292	Callee	debugLog
>42293	Identifier	debugLog
>42294	IfStatement	if ( cookDelay > 0 )
>42295	ReturnStatement	 
>42296	Condition	 
>42297	RelationalExpression	cookDelay > 0
>42298	PrimaryExpression	0
>42299	Identifier	cookDelay
>42300	IfStatement	if ( recipeMenu . on )
>42301	ReturnStatement	 
>42302	Condition	 
>42303	MemberAccess	recipeMenu . on
>42304	Identifier	on
>42305	Identifier	recipeMenu
>42409	FunctionDef	Game 
>42410	ParameterList	float sz , float t
>42411	Parameter	 
>42412	Identifier	t
>42413	ParameterType	float
>42414	Parameter	 
>42415	Identifier	sz
>42416	ParameterType	float
>42417	ReturnType	void
>42418	CompoundStatement	 
>42419	IfStatement	if ( sz == 0 )
>42420	ElseStatement	else
>42421	CompoundStatement	 
>42422	ExpressionStatement	 
>42423	CallExpression	dsq -> globalScaleChanged ( )
>42424	ArgumentList	 
>42425	Callee	dsq -> globalScaleChanged
>42426	PtrMemberAccess	dsq -> globalScaleChanged
>42427	Identifier	globalScaleChanged
>42428	Identifier	dsq
>42429	ExpressionStatement	 
>42430	CallExpression	dsq -> globalScale . interpolateTo ( Vector ( sz , sz ) , t )
>42431	ArgumentList	Vector ( sz , sz )
>42432	Argument	t
>42433	Identifier	t
>42434	Argument	Vector ( sz , sz )
>42435	CallExpression	Vector ( sz , sz )
>42436	ArgumentList	sz
>42437	Argument	sz
>42438	Identifier	sz
>42439	Argument	sz
>42440	Identifier	sz
>42441	Callee	Vector
>42442	Identifier	Vector
>42443	Callee	dsq -> globalScale . interpolateTo
>42444	MemberAccess	dsq -> globalScale . interpolateTo
>42445	Identifier	interpolateTo
>42446	PtrMemberAccess	dsq -> globalScale
>42447	Identifier	globalScale
>42448	Identifier	dsq
>42449	ExpressionStatement	 
>42450	CallExpression	dsq -> globalScale . stop ( )
>42451	ArgumentList	 
>42452	Callee	dsq -> globalScale . stop
>42453	MemberAccess	dsq -> globalScale . stop
>42454	Identifier	stop
>42455	PtrMemberAccess	dsq -> globalScale
>42456	Identifier	globalScale
>42457	Identifier	dsq
>42458	ExpressionStatement	 
>42459	CallExpression	dsq -> game -> toggleOverrideZoom ( true )
>42460	ArgumentList	true
>42461	Argument	true
>42462	Identifier	true
>42463	Callee	dsq -> game -> toggleOverrideZoom
>42464	PtrMemberAccess	dsq -> game -> toggleOverrideZoom
>42465	Identifier	toggleOverrideZoom
>42466	PtrMemberAccess	dsq -> game
>42467	Identifier	game
>42468	Identifier	dsq
>42469	CompoundStatement	 
>42470	ExpressionStatement	 
>42471	CallExpression	dsq -> game -> toggleOverrideZoom ( false )
>42472	ArgumentList	false
>42473	Argument	false
>42474	Identifier	false
>42475	Callee	dsq -> game -> toggleOverrideZoom
>42476	PtrMemberAccess	dsq -> game -> toggleOverrideZoom
>42477	Identifier	toggleOverrideZoom
>42478	PtrMemberAccess	dsq -> game
>42479	Identifier	game
>42480	Identifier	dsq
>42481	Condition	 
>42482	EqualityExpression	sz == 0
>42483	PrimaryExpression	0
>42484	Identifier	sz
>42497	FunctionDef	getFoodSlotFromIndex ()
>42498	ParameterList	 
>42499	ReturnType	FoodSlot *
>42500	CompoundStatement	 
>42501	ReturnStatement	 
>42502	PrimaryExpression	0
>42503	ForStatement	for ( int i = 0 ; i < dsq -> game -> foodSlots . size ( ) ; i ++ )
>42504	CompoundStatement	 
>42505	IfStatement	if ( dsq -> game -> foodSlots [ i ] -> slot == FoodSlot 
>42506	CompoundStatement	 
>42507	ReturnStatement	 
>42508	ArrayIndexing	dsq -> game -> foodSlots [ i ]
>42509	Identifier	i
>42510	PtrMemberAccess	dsq -> game -> foodSlots
>42511	Identifier	foodSlots
>42512	PtrMemberAccess	dsq -> game
>42513	Identifier	game
>42514	Identifier	dsq
>42515	Condition	 
>42516	EqualityExpression	dsq -> game -> foodSlots [ i ] -> slot == FoodSlot 
>42517	Identifier	FoodSlot 
>42518	PtrMemberAccess	dsq -> game -> foodSlots [ i ] -> slot
>42519	Identifier	slot
>42520	ArrayIndexing	dsq -> game -> foodSlots [ i ]
>42521	Identifier	i
>42522	PtrMemberAccess	dsq -> game -> foodSlots
>42523	Identifier	foodSlots
>42524	PtrMemberAccess	dsq -> game
>42525	Identifier	game
>42526	Identifier	dsq
>42527	IncDecOp	 
>42528	IncDec	++
>42529	Identifier	i
>42530	Condition	 
>42531	RelationalExpression	i < dsq -> game -> foodSlots . size ( )
>42532	CallExpression	dsq -> game -> foodSlots . size ( )
>42533	ArgumentList	 
>42534	Callee	dsq -> game -> foodSlots . size
>42535	MemberAccess	dsq -> game -> foodSlots . size
>42536	Identifier	size
>42537	PtrMemberAccess	dsq -> game -> foodSlots
>42538	Identifier	foodSlots
>42539	PtrMemberAccess	dsq -> game
>42540	Identifier	game
>42541	Identifier	dsq
>42542	Identifier	i
>42543	ForInit	 
>42544	IdentifierDeclStatement	int i = 0 ;
>42545	IdentifierDecl	i = 0
>42546	AssignmentExpr	i = 0
>42547	PrimaryExpression	0
>42548	Identifier	i
>42549	Identifier	i
>42550	IdentifierDeclType	int
>42572	FunctionDef	Game 
>42573	ParameterList	 
>42574	ReturnType	void
>42575	CompoundStatement	 
>42576	IfStatement	if ( ! foodMenu )
>42577	CompoundStatement	 
>42578	IfStatement	if ( dsq -> lastVoiceFile . find ( \"NAIJA_SONG_\" ) != std 
>42579	CompoundStatement	 
>42580	ExpressionStatement	 
>42581	CallExpression	dsq -> stopVoice ( )
>42582	ArgumentList	 
>42583	Callee	dsq -> stopVoice
>42584	PtrMemberAccess	dsq -> stopVoice
>42585	Identifier	stopVoice
>42586	Identifier	dsq
>42587	Condition	 
>42588	EqualityExpression	dsq -> lastVoiceFile . find ( \"NAIJA_SONG_\" ) != std 
>42589	Identifier	std 
>42590	CallExpression	dsq -> lastVoiceFile . find ( \"NAIJA_SONG_\" )
>42591	ArgumentList	\"NAIJA_SONG_\"
>42592	Argument	\"NAIJA_SONG_\"
>42593	PrimaryExpression	\"NAIJA_SONG_\"
>42594	Callee	dsq -> lastVoiceFile . find
>42595	MemberAccess	dsq -> lastVoiceFile . find
>42596	Identifier	find
>42597	PtrMemberAccess	dsq -> lastVoiceFile
>42598	Identifier	lastVoiceFile
>42599	Identifier	dsq
>42600	Condition	 
>42601	UnaryOp	! foodMenu
>42602	Identifier	foodMenu
>42603	UnaryOperator	!
>42615	FunctionDef	Game 
>42616	ParameterList	 
>42617	ReturnType	void
>42618	CompoundStatement	 
>42619	IfStatement	if ( ! controlHint_ignoreClear )
>42620	CompoundStatement	 
>42621	ExpressionStatement	 
>42622	CallExpression	controlHintNotes . clear ( )
>42623	ArgumentList	 
>42624	Callee	controlHintNotes . clear
>42625	MemberAccess	controlHintNotes . clear
>42626	Identifier	clear
>42627	Identifier	controlHintNotes
>42628	ForStatement	for ( int i = 0 ; i < controlHintNotes . size ( ) ; i ++ )
>42629	CompoundStatement	 
>42630	ExpressionStatement	 
>42631	CallExpression	controlHintNotes [ i ] -> alpha . interpolateTo ( 0 , hintTransTime )
>42632	ArgumentList	0
>42633	Argument	hintTransTime
>42634	Identifier	hintTransTime
>42635	Argument	0
>42636	PrimaryExpression	0
>42637	Callee	controlHintNotes [ i ] -> alpha . interpolateTo
>42638	MemberAccess	controlHintNotes [ i ] -> alpha . interpolateTo
>42639	Identifier	interpolateTo
>42640	PtrMemberAccess	controlHintNotes [ i ] -> alpha
>42641	Identifier	alpha
>42642	ArrayIndexing	controlHintNotes [ i ]
>42643	Identifier	i
>42644	Identifier	controlHintNotes
>42645	IncDecOp	 
>42646	IncDec	++
>42647	Identifier	i
>42648	Condition	 
>42649	RelationalExpression	i < controlHintNotes . size ( )
>42650	CallExpression	controlHintNotes . size ( )
>42651	ArgumentList	 
>42652	Callee	controlHintNotes . size
>42653	MemberAccess	controlHintNotes . size
>42654	Identifier	size
>42655	Identifier	controlHintNotes
>42656	Identifier	i
>42657	ForInit	 
>42658	IdentifierDeclStatement	int i = 0 ;
>42659	IdentifierDecl	i = 0
>42660	AssignmentExpr	i = 0
>42661	PrimaryExpression	0
>42662	Identifier	i
>42663	Identifier	i
>42664	IdentifierDeclType	int
>42665	IfStatement	if ( controlHint_bg )
>42666	CompoundStatement	 
>42667	ExpressionStatement	 
>42668	CallExpression	controlHint_image -> alpha . interpolateTo ( 0 , hintTransTime )
>42669	ArgumentList	0
>42670	Argument	hintTransTime
>42671	Identifier	hintTransTime
>42672	Argument	0
>42673	PrimaryExpression	0
>42674	Callee	controlHint_image -> alpha . interpolateTo
>42675	MemberAccess	controlHint_image -> alpha . interpolateTo
>42676	Identifier	interpolateTo
>42677	PtrMemberAccess	controlHint_image -> alpha
>42678	Identifier	alpha
>42679	Identifier	controlHint_image
>42680	ExpressionStatement	 
>42681	CallExpression	controlHint_bg -> alpha . interpolateTo ( 0 , hintTransTime )
>42682	ArgumentList	0
>42683	Argument	hintTransTime
>42684	Identifier	hintTransTime
>42685	Argument	0
>42686	PrimaryExpression	0
>42687	Callee	controlHint_bg -> alpha . interpolateTo
>42688	MemberAccess	controlHint_bg -> alpha . interpolateTo
>42689	Identifier	interpolateTo
>42690	PtrMemberAccess	controlHint_bg -> alpha
>42691	Identifier	alpha
>42692	Identifier	controlHint_bg
>42693	ExpressionStatement	 
>42694	CallExpression	controlHint_text -> alpha . interpolateTo ( 0 , hintTransTime )
>42695	ArgumentList	0
>42696	Argument	hintTransTime
>42697	Identifier	hintTransTime
>42698	Argument	0
>42699	PrimaryExpression	0
>42700	Callee	controlHint_text -> alpha . interpolateTo
>42701	MemberAccess	controlHint_text -> alpha . interpolateTo
>42702	Identifier	interpolateTo
>42703	PtrMemberAccess	controlHint_text -> alpha
>42704	Identifier	alpha
>42705	Identifier	controlHint_text
>42706	ExpressionStatement	 
>42707	CallExpression	controlHint_mouseBody -> alpha . interpolateTo ( 0 , hintTransTime )
>42708	ArgumentList	0
>42709	Argument	hintTransTime
>42710	Identifier	hintTransTime
>42711	Argument	0
>42712	PrimaryExpression	0
>42713	Callee	controlHint_mouseBody -> alpha . interpolateTo
>42714	MemberAccess	controlHint_mouseBody -> alpha . interpolateTo
>42715	Identifier	interpolateTo
>42716	PtrMemberAccess	controlHint_mouseBody -> alpha
>42717	Identifier	alpha
>42718	Identifier	controlHint_mouseBody
>42719	ExpressionStatement	 
>42720	CallExpression	controlHint_mouseMiddle -> alpha . interpolateTo ( 0 , hintTransTime )
>42721	ArgumentList	0
>42722	Argument	hintTransTime
>42723	Identifier	hintTransTime
>42724	Argument	0
>42725	PrimaryExpression	0
>42726	Callee	controlHint_mouseMiddle -> alpha . interpolateTo
>42727	MemberAccess	controlHint_mouseMiddle -> alpha . interpolateTo
>42728	Identifier	interpolateTo
>42729	PtrMemberAccess	controlHint_mouseMiddle -> alpha
>42730	Identifier	alpha
>42731	Identifier	controlHint_mouseMiddle
>42732	ExpressionStatement	 
>42733	CallExpression	controlHint_mouseRight -> alpha . interpolateTo ( 0 , hintTransTime )
>42734	ArgumentList	0
>42735	Argument	hintTransTime
>42736	Identifier	hintTransTime
>42737	Argument	0
>42738	PrimaryExpression	0
>42739	Callee	controlHint_mouseRight -> alpha . interpolateTo
>42740	MemberAccess	controlHint_mouseRight -> alpha . interpolateTo
>42741	Identifier	interpolateTo
>42742	PtrMemberAccess	controlHint_mouseRight -> alpha
>42743	Identifier	alpha
>42744	Identifier	controlHint_mouseRight
>42745	ExpressionStatement	 
>42746	CallExpression	controlHint_mouseLeft -> alpha . interpolateTo ( 0 , hintTransTime )
>42747	ArgumentList	0
>42748	Argument	hintTransTime
>42749	Identifier	hintTransTime
>42750	Argument	0
>42751	PrimaryExpression	0
>42752	Callee	controlHint_mouseLeft -> alpha . interpolateTo
>42753	MemberAccess	controlHint_mouseLeft -> alpha . interpolateTo
>42754	Identifier	interpolateTo
>42755	PtrMemberAccess	controlHint_mouseLeft -> alpha
>42756	Identifier	alpha
>42757	Identifier	controlHint_mouseLeft
>42758	Condition	 
>42759	Identifier	controlHint_bg
>42760	ExpressionStatement	 
>42761	AssignmentExpr	controlHintTimer = 0
>42762	PrimaryExpression	0
>42763	Identifier	controlHintTimer
>42764	Condition	 
>42765	UnaryOp	! controlHint_ignoreClear
>42766	Identifier	controlHint_ignoreClear
>42767	UnaryOperator	!
>42803	FunctionDef	Game 
>42804	ParameterList	 
>42805	ReturnType	float
>42806	CompoundStatement	 
>42807	ReturnStatement	 
>42808	MemberAccess	waterLevel . x
>42809	Identifier	x
>42810	Identifier	waterLevel
>42816	FunctionDef	Game 
>42817	ParameterList	const std 
>42818	Parameter	 
>42819	Identifier	scale
>42820	ParameterType	float
>42821	Parameter	 
>42822	Identifier	songType
>42823	ParameterType	int
>42824	Parameter	 
>42825	Identifier	ignoreClear
>42826	ParameterType	bool
>42827	Parameter	 
>42828	Identifier	image
>42829	ParameterType	std 
>42830	Parameter	 
>42831	Identifier	time
>42832	ParameterType	float
>42833	Parameter	 
>42834	Identifier	middle
>42835	ParameterType	bool
>42836	Parameter	 
>42837	Identifier	right
>42838	ParameterType	bool
>42839	Parameter	 
>42840	Identifier	left
>42841	ParameterType	bool
>42842	Parameter	 
>42843	Identifier	h
>42844	ParameterType	const std 
>42845	ReturnType	void
>42846	CompoundStatement	 
>42847	ExpressionStatement	 
>42848	CallExpression	controlHint_shine -> alpha . startPath ( 0.4 )
>42849	ArgumentList	0.4
>42850	Argument	0.4
>42851	PrimaryExpression	0.4
>42852	Callee	controlHint_shine -> alpha . startPath
>42853	MemberAccess	controlHint_shine -> alpha . startPath
>42854	Identifier	startPath
>42855	PtrMemberAccess	controlHint_shine -> alpha
>42856	Identifier	alpha
>42857	Identifier	controlHint_shine
>42858	ExpressionStatement	 
>42859	CallExpression	controlHint_shine -> alpha . data -> path . addPathNode ( 0.001 , 1.0 )
>42860	ArgumentList	0.001
>42861	Argument	1.0
>42862	PrimaryExpression	1.0
>42863	Argument	0.001
>42864	PrimaryExpression	0.001
>42865	Callee	controlHint_shine -> alpha . data -> path . addPathNode
>42866	MemberAccess	controlHint_shine -> alpha . data -> path . addPathNode
>42867	Identifier	addPathNode
>42868	PtrMemberAccess	controlHint_shine -> alpha . data -> path
>42869	Identifier	path
>42870	MemberAccess	controlHint_shine -> alpha . data
>42871	Identifier	data
>42872	PtrMemberAccess	controlHint_shine -> alpha
>42873	Identifier	alpha
>42874	Identifier	controlHint_shine
>42875	ExpressionStatement	 
>42876	CallExpression	controlHint_shine -> alpha . data -> path . addPathNode ( 1.000 , 0.3 )
>42877	ArgumentList	1.000
>42878	Argument	0.3
>42879	PrimaryExpression	0.3
>42880	Argument	1.000
>42881	PrimaryExpression	1.000
>42882	Callee	controlHint_shine -> alpha . data -> path . addPathNode
>42883	MemberAccess	controlHint_shine -> alpha . data -> path . addPathNode
>42884	Identifier	addPathNode
>42885	PtrMemberAccess	controlHint_shine -> alpha . data -> path
>42886	Identifier	path
>42887	MemberAccess	controlHint_shine -> alpha . data
>42888	Identifier	data
>42889	PtrMemberAccess	controlHint_shine -> alpha
>42890	Identifier	alpha
>42891	Identifier	controlHint_shine
>42892	ExpressionStatement	 
>42893	CallExpression	controlHint_shine -> alpha . data -> path . addPathNode ( 0.001 , 0.0 )
>42894	ArgumentList	0.001
>42895	Argument	0.0
>42896	PrimaryExpression	0.0
>42897	Argument	0.001
>42898	PrimaryExpression	0.001
>42899	Callee	controlHint_shine -> alpha . data -> path . addPathNode
>42900	MemberAccess	controlHint_shine -> alpha . data -> path . addPathNode
>42901	Identifier	addPathNode
>42902	PtrMemberAccess	controlHint_shine -> alpha . data -> path
>42903	Identifier	path
>42904	MemberAccess	controlHint_shine -> alpha . data
>42905	Identifier	data
>42906	PtrMemberAccess	controlHint_shine -> alpha
>42907	Identifier	alpha
>42908	Identifier	controlHint_shine
>42909	ExpressionStatement	 
>42910	CallExpression	controlHint_shine -> alpha . data -> path . clear ( )
>42911	ArgumentList	 
>42912	Callee	controlHint_shine -> alpha . data -> path . clear
>42913	MemberAccess	controlHint_shine -> alpha . data -> path . clear
>42914	Identifier	clear
>42915	PtrMemberAccess	controlHint_shine -> alpha . data -> path
>42916	Identifier	path
>42917	MemberAccess	controlHint_shine -> alpha . data
>42918	Identifier	data
>42919	PtrMemberAccess	controlHint_shine -> alpha
>42920	Identifier	alpha
>42921	Identifier	controlHint_shine
>42922	ExpressionStatement	 
>42923	CallExpression	controlHint_shine -> alpha . ensureData ( )
>42924	ArgumentList	 
>42925	Callee	controlHint_shine -> alpha . ensureData
>42926	MemberAccess	controlHint_shine -> alpha . ensureData
>42927	Identifier	ensureData
>42928	PtrMemberAccess	controlHint_shine -> alpha
>42929	Identifier	alpha
>42930	Identifier	controlHint_shine
>42931	ExpressionStatement	 
>42932	AssignmentExpr	controlHint_ignoreClear = ignoreClear
>42933	Identifier	ignoreClear
>42934	Identifier	controlHint_ignoreClear
>42935	ForStatement	for ( int i = 0 ; i < controlHintNotes . size ( ) ; i ++ )
>42936	CompoundStatement	 
>42937	ExpressionStatement	 
>42938	CallExpression	controlHintNotes [ i ] -> alpha . interpolateTo ( alphaOn , hintTransTime )
>42939	ArgumentList	alphaOn
>42940	Argument	hintTransTime
>42941	Identifier	hintTransTime
>42942	Argument	alphaOn
>42943	Identifier	alphaOn
>42944	Callee	controlHintNotes [ i ] -> alpha . interpolateTo
>42945	MemberAccess	controlHintNotes [ i ] -> alpha . interpolateTo
>42946	Identifier	interpolateTo
>42947	PtrMemberAccess	controlHintNotes [ i ] -> alpha
>42948	Identifier	alpha
>42949	ArrayIndexing	controlHintNotes [ i ]
>42950	Identifier	i
>42951	Identifier	controlHintNotes
>42952	IncDecOp	 
>42953	IncDec	++
>42954	Identifier	i
>42955	Condition	 
>42956	RelationalExpression	i < controlHintNotes . size ( )
>42957	CallExpression	controlHintNotes . size ( )
>42958	ArgumentList	 
>42959	Callee	controlHintNotes . size
>42960	MemberAccess	controlHintNotes . size
>42961	Identifier	size
>42962	Identifier	controlHintNotes
>42963	Identifier	i
>42964	ForInit	 
>42965	IdentifierDeclStatement	int i = 0 ;
>42966	IdentifierDecl	i = 0
>42967	AssignmentExpr	i = 0
>42968	PrimaryExpression	0
>42969	Identifier	i
>42970	Identifier	i
>42971	IdentifierDeclType	int
>42972	IfStatement	if ( ! left && ! right && ! middle )
>42973	ElseStatement	else
>42974	CompoundStatement	 
>42975	ExpressionStatement	 
>42976	CallExpression	controlHint_mouseBody -> alpha . interpolateTo ( 0.5 , hintTransTime )
>42977	ArgumentList	0.5
>42978	Argument	hintTransTime
>42979	Identifier	hintTransTime
>42980	Argument	0.5
>42981	PrimaryExpression	0.5
>42982	Callee	controlHint_mouseBody -> alpha . interpolateTo
>42983	MemberAccess	controlHint_mouseBody -> alpha . interpolateTo
>42984	Identifier	interpolateTo
>42985	PtrMemberAccess	controlHint_mouseBody -> alpha
>42986	Identifier	alpha
>42987	Identifier	controlHint_mouseBody
>42988	IfStatement	if ( middle )
>42989	ElseStatement	else
>42990	ExpressionStatement	 
>42991	CallExpression	controlHint_mouseMiddle -> alpha . interpolateTo ( alphaOff , hintTransTime )
>42992	ArgumentList	alphaOff
>42993	Argument	hintTransTime
>42994	Identifier	hintTransTime
>42995	Argument	alphaOff
>42996	Identifier	alphaOff
>42997	Callee	controlHint_mouseMiddle -> alpha . interpolateTo
>42998	MemberAccess	controlHint_mouseMiddle -> alpha . interpolateTo
>42999	Identifier	interpolateTo
>43000	PtrMemberAccess	controlHint_mouseMiddle -> alpha
>43001	Identifier	alpha
>43002	Identifier	controlHint_mouseMiddle
>43003	ExpressionStatement	 
>43004	CallExpression	controlHint_mouseMiddle -> alpha . interpolateTo ( alphaOn , hintTransTime )
>43005	ArgumentList	alphaOn
>43006	Argument	hintTransTime
>43007	Identifier	hintTransTime
>43008	Argument	alphaOn
>43009	Identifier	alphaOn
>43010	Callee	controlHint_mouseMiddle -> alpha . interpolateTo
>43011	MemberAccess	controlHint_mouseMiddle -> alpha . interpolateTo
>43012	Identifier	interpolateTo
>43013	PtrMemberAccess	controlHint_mouseMiddle -> alpha
>43014	Identifier	alpha
>43015	Identifier	controlHint_mouseMiddle
>43016	Condition	 
>43017	Identifier	middle
>43018	IfStatement	if ( right )
>43019	ElseStatement	else
>43020	ExpressionStatement	 
>43021	CallExpression	controlHint_mouseRight -> alpha . interpolateTo ( alphaOff , hintTransTime )
>43022	ArgumentList	alphaOff
>43023	Argument	hintTransTime
>43024	Identifier	hintTransTime
>43025	Argument	alphaOff
>43026	Identifier	alphaOff
>43027	Callee	controlHint_mouseRight -> alpha . interpolateTo
>43028	MemberAccess	controlHint_mouseRight -> alpha . interpolateTo
>43029	Identifier	interpolateTo
>43030	PtrMemberAccess	controlHint_mouseRight -> alpha
>43031	Identifier	alpha
>43032	Identifier	controlHint_mouseRight
>43033	ExpressionStatement	 
>43034	CallExpression	controlHint_mouseRight -> alpha . interpolateTo ( alphaOn , hintTransTime )
>43035	ArgumentList	alphaOn
>43036	Argument	hintTransTime
>43037	Identifier	hintTransTime
>43038	Argument	alphaOn
>43039	Identifier	alphaOn
>43040	Callee	controlHint_mouseRight -> alpha . interpolateTo
>43041	MemberAccess	controlHint_mouseRight -> alpha . interpolateTo
>43042	Identifier	interpolateTo
>43043	PtrMemberAccess	controlHint_mouseRight -> alpha
>43044	Identifier	alpha
>43045	Identifier	controlHint_mouseRight
>43046	Condition	 
>43047	Identifier	right
>43048	IfStatement	if ( left )
>43049	ElseStatement	else
>43050	ExpressionStatement	 
>43051	CallExpression	controlHint_mouseLeft -> alpha . interpolateTo ( alphaOff , hintTransTime )
>43052	ArgumentList	alphaOff
>43053	Argument	hintTransTime
>43054	Identifier	hintTransTime
>43055	Argument	alphaOff
>43056	Identifier	alphaOff
>43057	Callee	controlHint_mouseLeft -> alpha . interpolateTo
>43058	MemberAccess	controlHint_mouseLeft -> alpha . interpolateTo
>43059	Identifier	interpolateTo
>43060	PtrMemberAccess	controlHint_mouseLeft -> alpha
>43061	Identifier	alpha
>43062	Identifier	controlHint_mouseLeft
>43063	ExpressionStatement	 
>43064	CallExpression	controlHint_mouseLeft -> alpha . interpolateTo ( alphaOn , hintTransTime )
>43065	ArgumentList	alphaOn
>43066	Argument	hintTransTime
>43067	Identifier	hintTransTime
>43068	Argument	alphaOn
>43069	Identifier	alphaOn
>43070	Callee	controlHint_mouseLeft -> alpha . interpolateTo
>43071	MemberAccess	controlHint_mouseLeft -> alpha . interpolateTo
>43072	Identifier	interpolateTo
>43073	PtrMemberAccess	controlHint_mouseLeft -> alpha
>43074	Identifier	alpha
>43075	Identifier	controlHint_mouseLeft
>43076	Condition	 
>43077	Identifier	left
>43078	ExpressionStatement	 
>43079	CallExpression	controlHint_text -> setAlign ( ALIGN_CENTER )
>43080	ArgumentList	ALIGN_CENTER
>43081	Argument	ALIGN_CENTER
>43082	Identifier	ALIGN_CENTER
>43083	Callee	controlHint_text -> setAlign
>43084	PtrMemberAccess	controlHint_text -> setAlign
>43085	Identifier	setAlign
>43086	Identifier	controlHint_text
>43087	ExpressionStatement	 
>43088	AssignmentExpr	controlHint_text -> position . x = 400
>43089	PrimaryExpression	400
>43090	MemberAccess	controlHint_text -> position . x
>43091	Identifier	x
>43092	PtrMemberAccess	controlHint_text -> position
>43093	Identifier	position
>43094	Identifier	controlHint_text
>43095	ExpressionStatement	 
>43096	AssignmentExpr	controlHint_text -> position . y = 520
>43097	PrimaryExpression	520
>43098	MemberAccess	controlHint_text -> position . y
>43099	Identifier	y
>43100	PtrMemberAccess	controlHint_text -> position
>43101	Identifier	position
>43102	Identifier	controlHint_text
>43103	CompoundStatement	 
>43104	IfStatement	if ( image . empty ( ) && controlHintNotes . empty ( ) )
>43105	ElseStatement	else
>43106	CompoundStatement	 
>43107	ExpressionStatement	 
>43108	CallExpression	controlHint_text -> setAlign ( ALIGN_CENTER )
>43109	ArgumentList	ALIGN_CENTER
>43110	Argument	ALIGN_CENTER
>43111	Identifier	ALIGN_CENTER
>43112	Callee	controlHint_text -> setAlign
>43113	PtrMemberAccess	controlHint_text -> setAlign
>43114	Identifier	setAlign
>43115	Identifier	controlHint_text
>43116	ExpressionStatement	 
>43117	AssignmentExpr	controlHint_text -> position . x = 400
>43118	PrimaryExpression	400
>43119	MemberAccess	controlHint_text -> position . x
>43120	Identifier	x
>43121	PtrMemberAccess	controlHint_text -> position
>43122	Identifier	position
>43123	Identifier	controlHint_text
>43124	ExpressionStatement	 
>43125	AssignmentExpr	controlHint_text -> position . y = 520
>43126	PrimaryExpression	520
>43127	MemberAccess	controlHint_text -> position . y
>43128	Identifier	y
>43129	PtrMemberAccess	controlHint_text -> position
>43130	Identifier	position
>43131	Identifier	controlHint_text
>43132	CompoundStatement	 
>43133	ExpressionStatement	 
>43134	AssignmentExpr	controlHint_text -> position . y = 470
>43135	PrimaryExpression	470
>43136	MemberAccess	controlHint_text -> position . y
>43137	Identifier	y
>43138	PtrMemberAccess	controlHint_text -> position
>43139	Identifier	position
>43140	Identifier	controlHint_text
>43141	Condition	 
>43142	AndExpression	image . empty ( ) && controlHintNotes . empty ( )
>43143	CallExpression	controlHintNotes . empty ( )
>43144	ArgumentList	 
>43145	Callee	controlHintNotes . empty
>43146	MemberAccess	controlHintNotes . empty
>43147	Identifier	empty
>43148	Identifier	controlHintNotes
>43149	CallExpression	image . empty ( )
>43150	ArgumentList	 
>43151	Callee	image . empty
>43152	MemberAccess	image . empty
>43153	Identifier	empty
>43154	Identifier	image
>43155	ExpressionStatement	 
>43156	CallExpression	controlHint_mouseMiddle -> alpha . interpolateTo ( 0 , hintTransTime )
>43157	ArgumentList	0
>43158	Argument	hintTransTime
>43159	Identifier	hintTransTime
>43160	Argument	0
>43161	PrimaryExpression	0
>43162	Callee	controlHint_mouseMiddle -> alpha . interpolateTo
>43163	MemberAccess	controlHint_mouseMiddle -> alpha . interpolateTo
>43164	Identifier	interpolateTo
>43165	PtrMemberAccess	controlHint_mouseMiddle -> alpha
>43166	Identifier	alpha
>43167	Identifier	controlHint_mouseMiddle
>43168	ExpressionStatement	 
>43169	CallExpression	controlHint_mouseLeft -> alpha . interpolateTo ( 0 , hintTransTime )
>43170	ArgumentList	0
>43171	Argument	hintTransTime
>43172	Identifier	hintTransTime
>43173	Argument	0
>43174	PrimaryExpression	0
>43175	Callee	controlHint_mouseLeft -> alpha . interpolateTo
>43176	MemberAccess	controlHint_mouseLeft -> alpha . interpolateTo
>43177	Identifier	interpolateTo
>43178	PtrMemberAccess	controlHint_mouseLeft -> alpha
>43179	Identifier	alpha
>43180	Identifier	controlHint_mouseLeft
>43181	ExpressionStatement	 
>43182	CallExpression	controlHint_mouseRight -> alpha . interpolateTo ( 0 , hintTransTime )
>43183	ArgumentList	0
>43184	Argument	hintTransTime
>43185	Identifier	hintTransTime
>43186	Argument	0
>43187	PrimaryExpression	0
>43188	Callee	controlHint_mouseRight -> alpha . interpolateTo
>43189	MemberAccess	controlHint_mouseRight -> alpha . interpolateTo
>43190	Identifier	interpolateTo
>43191	PtrMemberAccess	controlHint_mouseRight -> alpha
>43192	Identifier	alpha
>43193	Identifier	controlHint_mouseRight
>43194	Condition	 
>43195	AndExpression	! left && ! right && ! middle
>43196	AndExpression	! right && ! middle
>43197	UnaryOp	! middle
>43198	Identifier	middle
>43199	UnaryOperator	!
>43200	UnaryOp	! right
>43201	Identifier	right
>43202	UnaryOperator	!
>43203	UnaryOp	! left
>43204	Identifier	left
>43205	UnaryOperator	!
>43206	ExpressionStatement	 
>43207	CallExpression	controlHint_text -> setAlign ( ALIGN_LEFT )
>43208	ArgumentList	ALIGN_LEFT
>43209	Argument	ALIGN_LEFT
>43210	Identifier	ALIGN_LEFT
>43211	Callee	controlHint_text -> setAlign
>43212	PtrMemberAccess	controlHint_text -> setAlign
>43213	Identifier	setAlign
>43214	Identifier	controlHint_text
>43215	ExpressionStatement	 
>43216	AssignmentExpr	controlHint_text -> position . x = 400 - controlHint_text -> getSetWidth ( ) / 2 + 25
>43217	AdditiveExpression	400 - controlHint_text -> getSetWidth ( ) / 2 + 25
>43218	AdditiveExpression	controlHint_text -> getSetWidth ( ) / 2 + 25
>43219	PrimaryExpression	25
>43220	MultiplicativeExpression	controlHint_text -> getSetWidth ( ) / 2
>43221	PrimaryExpression	2
>43222	CallExpression	controlHint_text -> getSetWidth ( )
>43223	ArgumentList	 
>43224	Callee	controlHint_text -> getSetWidth
>43225	PtrMemberAccess	controlHint_text -> getSetWidth
>43226	Identifier	getSetWidth
>43227	Identifier	controlHint_text
>43228	PrimaryExpression	400
>43229	MemberAccess	controlHint_text -> position . x
>43230	Identifier	x
>43231	PtrMemberAccess	controlHint_text -> position
>43232	Identifier	position
>43233	Identifier	controlHint_text
>43234	IfStatement	if ( ! image . empty ( ) )
>43235	ElseStatement	else
>43236	CompoundStatement	 
>43237	ExpressionStatement	 
>43238	CallExpression	controlHint_image -> alpha . interpolateTo ( 0 , hintTransTime )
>43239	ArgumentList	0
>43240	Argument	hintTransTime
>43241	Identifier	hintTransTime
>43242	Argument	0
>43243	PrimaryExpression	0
>43244	Callee	controlHint_image -> alpha . interpolateTo
>43245	MemberAccess	controlHint_image -> alpha . interpolateTo
>43246	Identifier	interpolateTo
>43247	PtrMemberAccess	controlHint_image -> alpha
>43248	Identifier	alpha
>43249	Identifier	controlHint_image
>43250	CompoundStatement	 
>43251	ExpressionStatement	 
>43252	AssignmentExpr	controlHint_image -> scale = Vector ( scale , scale )
>43253	CallExpression	Vector ( scale , scale )
>43254	ArgumentList	scale
>43255	Argument	scale
>43256	Identifier	scale
>43257	Argument	scale
>43258	Identifier	scale
>43259	Callee	Vector
>43260	Identifier	Vector
>43261	PtrMemberAccess	controlHint_image -> scale
>43262	Identifier	scale
>43263	Identifier	controlHint_image
>43264	ExpressionStatement	 
>43265	CallExpression	controlHint_image -> alpha . interpolateTo ( 1 , hintTransTime )
>43266	ArgumentList	1
>43267	Argument	hintTransTime
>43268	Identifier	hintTransTime
>43269	Argument	1
>43270	PrimaryExpression	1
>43271	Callee	controlHint_image -> alpha . interpolateTo
>43272	MemberAccess	controlHint_image -> alpha . interpolateTo
>43273	Identifier	interpolateTo
>43274	PtrMemberAccess	controlHint_image -> alpha
>43275	Identifier	alpha
>43276	Identifier	controlHint_image
>43277	ExpressionStatement	 
>43278	CallExpression	controlHint_image -> setTexture ( image )
>43279	ArgumentList	image
>43280	Argument	image
>43281	Identifier	image
>43282	Callee	controlHint_image -> setTexture
>43283	PtrMemberAccess	controlHint_image -> setTexture
>43284	Identifier	setTexture
>43285	Identifier	controlHint_image
>43286	Condition	 
>43287	UnaryOp	! image . empty ( )
>43288	CallExpression	image . empty ( )
>43289	ArgumentList	 
>43290	Callee	image . empty
>43291	MemberAccess	image . empty
>43292	Identifier	empty
>43293	Identifier	image
>43294	UnaryOperator	!
>43295	ExpressionStatement	 
>43296	CallExpression	controlHint_text -> alpha . interpolateTo ( 1 , hintTransTime )
>43297	ArgumentList	1
>43298	Argument	hintTransTime
>43299	Identifier	hintTransTime
>43300	Argument	1
>43301	PrimaryExpression	1
>43302	Callee	controlHint_text -> alpha . interpolateTo
>43303	MemberAccess	controlHint_text -> alpha . interpolateTo
>43304	Identifier	interpolateTo
>43305	PtrMemberAccess	controlHint_text -> alpha
>43306	Identifier	alpha
>43307	Identifier	controlHint_text
>43308	ExpressionStatement	 
>43309	CallExpression	controlHint_text -> setText ( hint )
>43310	ArgumentList	hint
>43311	Argument	hint
>43312	Identifier	hint
>43313	Callee	controlHint_text -> setText
>43314	PtrMemberAccess	controlHint_text -> setText
>43315	Identifier	setText
>43316	Identifier	controlHint_text
>43317	ExpressionStatement	 
>43318	AssignmentExpr	controlHint_bg -> scale = Vector ( 1 , 1 )
>43319	CallExpression	Vector ( 1 , 1 )
>43320	ArgumentList	1
>43321	Argument	1
>43322	PrimaryExpression	1
>43323	Argument	1
>43324	PrimaryExpression	1
>43325	Callee	Vector
>43326	Identifier	Vector
>43327	PtrMemberAccess	controlHint_bg -> scale
>43328	Identifier	scale
>43329	Identifier	controlHint_bg
>43330	ExpressionStatement	 
>43331	CallExpression	controlHint_bg -> alpha . interpolateTo ( 1 , hintTransTime )
>43332	ArgumentList	1
>43333	Argument	hintTransTime
>43334	Identifier	hintTransTime
>43335	Argument	1
>43336	PrimaryExpression	1
>43337	Callee	controlHint_bg -> alpha . interpolateTo
>43338	MemberAccess	controlHint_bg -> alpha . interpolateTo
>43339	Identifier	interpolateTo
>43340	PtrMemberAccess	controlHint_bg -> alpha
>43341	Identifier	alpha
>43342	Identifier	controlHint_bg
>43343	IdentifierDeclStatement	 
>43344	IdentifierDecl	alphaOff = 0.5
>43345	AssignmentExpr	alphaOff = 0.5
>43346	PrimaryExpression	0.5
>43347	Identifier	alphaOff
>43348	Identifier	alphaOff
>43349	IdentifierDeclType	float
>43350	IdentifierDecl	alphaOn = 0.8
>43351	AssignmentExpr	alphaOn = 0.8
>43352	PrimaryExpression	0.8
>43353	Identifier	alphaOn
>43354	Identifier	alphaOn
>43355	IdentifierDeclType	float
>43356	IfStatement	if ( songType > 0 )
>43357	CompoundStatement	 
>43358	ForStatement	for ( int i = 0 ; i < song -> notes . size ( ) ; i ++ )
>43359	CompoundStatement	 
>43360	ExpressionStatement	 
>43361	AssignmentExpr	p += Vector ( 40 , 0 )
>43362	CallExpression	Vector ( 40 , 0 )
>43363	ArgumentList	40
>43364	Argument	0
>43365	PrimaryExpression	0
>43366	Argument	40
>43367	PrimaryExpression	40
>43368	Callee	Vector
>43369	Identifier	Vector
>43370	Identifier	p
>43371	ExpressionStatement	 
>43372	CallExpression	controlHintNotes . push_back ( q )
>43373	ArgumentList	q
>43374	Argument	q
>43375	Identifier	q
>43376	Callee	controlHintNotes . push_back
>43377	MemberAccess	controlHintNotes . push_back
>43378	Identifier	push_back
>43379	Identifier	controlHintNotes
>43380	ExpressionStatement	 
>43381	CallExpression	addRenderObject ( q , controlHint_bg -> layer )
>43382	ArgumentList	q
>43383	Argument	controlHint_bg -> layer
>43384	PtrMemberAccess	controlHint_bg -> layer
>43385	Identifier	layer
>43386	Identifier	controlHint_bg
>43387	Argument	q
>43388	Identifier	q
>43389	Callee	addRenderObject
>43390	Identifier	addRenderObject
>43391	IfStatement	if ( i % 2 )
>43392	ElseStatement	else
>43393	ExpressionStatement	 
>43394	AssignmentExpr	q -> offset = Vector ( 0 , 10 )
>43395	CallExpression	Vector ( 0 , 10 )
>43396	ArgumentList	0
>43397	Argument	10
>43398	PrimaryExpression	10
>43399	Argument	0
>43400	PrimaryExpression	0
>43401	Callee	Vector
>43402	Identifier	Vector
>43403	PtrMemberAccess	q -> offset
>43404	Identifier	offset
>43405	Identifier	q
>43406	ExpressionStatement	 
>43407	AssignmentExpr	q -> offset = Vector ( 0 , - 10 )
>43408	CallExpression	Vector ( 0 , - 10 )
>43409	ArgumentList	0
>43410	Argument	- 10
>43411	UnaryOp	- 10
>43412	PrimaryExpression	10
>43413	UnaryOperator	-
>43414	Argument	0
>43415	PrimaryExpression	0
>43416	Callee	Vector
>43417	Identifier	Vector
>43418	PtrMemberAccess	q -> offset
>43419	Identifier	offset
>43420	Identifier	q
>43421	Condition	 
>43422	MultiplicativeExpression	i % 2
>43423	PrimaryExpression	2
>43424	Identifier	i
>43425	ExpressionStatement	 
>43426	AssignmentExpr	q -> alpha = 0
>43427	PrimaryExpression	0
>43428	PtrMemberAccess	q -> alpha
>43429	Identifier	alpha
>43430	Identifier	q
>43431	ExpressionStatement	 
>43432	AssignmentExpr	q -> scale = Vector ( 1.0 , 1.0 )
>43433	CallExpression	Vector ( 1.0 , 1.0 )
>43434	ArgumentList	1.0
>43435	Argument	1.0
>43436	PrimaryExpression	1.0
>43437	Argument	1.0
>43438	PrimaryExpression	1.0
>43439	Callee	Vector
>43440	Identifier	Vector
>43441	PtrMemberAccess	q -> scale
>43442	Identifier	scale
>43443	Identifier	q
>43444	ExpressionStatement	 
>43445	AssignmentExpr	q -> followCamera = 1
>43446	PrimaryExpression	1
>43447	PtrMemberAccess	q -> followCamera
>43448	Identifier	followCamera
>43449	Identifier	q
>43450	ExpressionStatement	 
>43451	AssignmentExpr	q -> color = dsq -> getNoteColor ( note ) * 0.5f + Vector ( 1 , 1 , 1 ) * 0.5f
>43452	AdditiveExpression	dsq -> getNoteColor ( note ) * 0.5f + Vector ( 1 , 1 , 1 ) * 0.5f
>43453	MultiplicativeExpression	Vector ( 1 , 1 , 1 ) * 0.5f
>43454	PrimaryExpression	0.5f
>43455	CallExpression	Vector ( 1 , 1 , 1 )
>43456	ArgumentList	1
>43457	Argument	1
>43458	PrimaryExpression	1
>43459	Argument	1
>43460	PrimaryExpression	1
>43461	Argument	1
>43462	PrimaryExpression	1
>43463	Callee	Vector
>43464	Identifier	Vector
>43465	MultiplicativeExpression	dsq -> getNoteColor ( note ) * 0.5f
>43466	PrimaryExpression	0.5f
>43467	CallExpression	dsq -> getNoteColor ( note )
>43468	ArgumentList	note
>43469	Argument	note
>43470	Identifier	note
>43471	Callee	dsq -> getNoteColor
>43472	PtrMemberAccess	dsq -> getNoteColor
>43473	Identifier	getNoteColor
>43474	Identifier	dsq
>43475	PtrMemberAccess	q -> color
>43476	Identifier	color
>43477	Identifier	q
>43478	IdentifierDeclStatement	 
>43479	IdentifierDecl	* q = new Quad ( sbuf , p )
>43480	AssignmentExpr	* q = new Quad ( sbuf , p )
>43481	Expression	sbuf , p
>43482	Identifier	p
>43483	Identifier	sbuf
>43484	Identifier	q
>43485	Identifier	q
>43486	IdentifierDeclType	Quad *
>43487	ExpressionStatement	 
>43488	CallExpression	sprintf ( sbuf , \"song/notebutton-%d\" , note )
>43489	ArgumentList	sbuf
>43490	Argument	note
>43491	Identifier	note
>43492	Argument	\"song/notebutton-%d\"
>43493	PrimaryExpression	\"song/notebutton-%d\"
>43494	Argument	sbuf
>43495	Identifier	sbuf
>43496	Callee	sprintf
>43497	Identifier	sprintf
>43498	IdentifierDeclStatement	 
>43499	IdentifierDecl	note = song -> notes [ i ]
>43500	AssignmentExpr	note = song -> notes [ i ]
>43501	ArrayIndexing	song -> notes [ i ]
>43502	Identifier	i
>43503	PtrMemberAccess	song -> notes
>43504	Identifier	notes
>43505	Identifier	song
>43506	Identifier	note
>43507	Identifier	note
>43508	IdentifierDeclType	int
>43509	IncDecOp	 
>43510	IncDec	++
>43511	Identifier	i
>43512	Condition	 
>43513	RelationalExpression	i < song -> notes . size ( )
>43514	CallExpression	song -> notes . size ( )
>43515	ArgumentList	 
>43516	Callee	song -> notes . size
>43517	MemberAccess	song -> notes . size
>43518	Identifier	size
>43519	PtrMemberAccess	song -> notes
>43520	Identifier	notes
>43521	Identifier	song
>43522	Identifier	i
>43523	ForInit	 
>43524	IdentifierDeclStatement	int i = 0 ;
>43525	IdentifierDecl	i = 0
>43526	AssignmentExpr	i = 0
>43527	PrimaryExpression	0
>43528	Identifier	i
>43529	Identifier	i
>43530	IdentifierDeclType	int
>43531	ExpressionStatement	 
>43532	AssignmentExpr	p += Vector ( 100 , 0 )
>43533	CallExpression	Vector ( 100 , 0 )
>43534	ArgumentList	100
>43535	Argument	0
>43536	PrimaryExpression	0
>43537	Argument	100
>43538	PrimaryExpression	100
>43539	Callee	Vector
>43540	Identifier	Vector
>43541	Identifier	p
>43542	ExpressionStatement	 
>43543	CallExpression	controlHintNotes . push_back ( q )
>43544	ArgumentList	q
>43545	Argument	q
>43546	Identifier	q
>43547	Callee	controlHintNotes . push_back
>43548	MemberAccess	controlHintNotes . push_back
>43549	Identifier	push_back
>43550	Identifier	controlHintNotes
>43551	ExpressionStatement	 
>43552	CallExpression	addRenderObject ( q , controlHint_bg -> layer )
>43553	ArgumentList	q
>43554	Argument	controlHint_bg -> layer
>43555	PtrMemberAccess	controlHint_bg -> layer
>43556	Identifier	layer
>43557	Identifier	controlHint_bg
>43558	Argument	q
>43559	Identifier	q
>43560	Callee	addRenderObject
>43561	Identifier	addRenderObject
>43562	ExpressionStatement	 
>43563	AssignmentExpr	q -> alpha = 0
>43564	PrimaryExpression	0
>43565	PtrMemberAccess	q -> alpha
>43566	Identifier	alpha
>43567	Identifier	q
>43568	ExpressionStatement	 
>43569	AssignmentExpr	q -> scale = Vector ( 0.7 , 0.7 )
>43570	CallExpression	Vector ( 0.7 , 0.7 )
>43571	ArgumentList	0.7
>43572	Argument	0.7
>43573	PrimaryExpression	0.7
>43574	Argument	0.7
>43575	PrimaryExpression	0.7
>43576	Callee	Vector
>43577	Identifier	Vector
>43578	PtrMemberAccess	q -> scale
>43579	Identifier	scale
>43580	Identifier	q
>43581	ExpressionStatement	 
>43582	AssignmentExpr	q -> followCamera = 1
>43583	PrimaryExpression	1
>43584	PtrMemberAccess	q -> followCamera
>43585	Identifier	followCamera
>43586	Identifier	q
>43587	IdentifierDeclStatement	 
>43588	IdentifierDecl	* q = new Quad ( sbuf , p )
>43589	AssignmentExpr	* q = new Quad ( sbuf , p )
>43590	Expression	sbuf , p
>43591	Identifier	p
>43592	Identifier	sbuf
>43593	Identifier	q
>43594	Identifier	q
>43595	IdentifierDeclType	Quad *
>43596	ExpressionStatement	 
>43597	CallExpression	sprintf ( sbuf , \"song/songslot-%d\" , dsq -> continuity . getSongSlotByType ( songType ) )
>43598	ArgumentList	sbuf
>43599	Argument	dsq -> continuity . getSongSlotByType ( songType )
>43600	CallExpression	dsq -> continuity . getSongSlotByType ( songType )
>43601	ArgumentList	songType
>43602	Argument	songType
>43603	Identifier	songType
>43604	Callee	dsq -> continuity . getSongSlotByType
>43605	MemberAccess	dsq -> continuity . getSongSlotByType
>43606	Identifier	getSongSlotByType
>43607	PtrMemberAccess	dsq -> continuity
>43608	Identifier	continuity
>43609	Identifier	dsq
>43610	Argument	\"song/songslot-%d\"
>43611	PrimaryExpression	\"song/songslot-%d\"
>43612	Argument	sbuf
>43613	Identifier	sbuf
>43614	Callee	sprintf
>43615	Identifier	sprintf
>43616	IdentifierDeclStatement	 
>43617	IdentifierDecl	sbuf [ 32 ]
>43618	PrimaryExpression	32
>43619	Identifier	sbuf
>43620	IdentifierDeclType	char [ 32 ]
>43621	IdentifierDeclStatement	 
>43622	IdentifierDecl	p = controlHint_mouseLeft -> position + Vector ( - 100 , 0 )
>43623	AssignmentExpr	p = controlHint_mouseLeft -> position + Vector ( - 100 , 0 )
>43624	AdditiveExpression	controlHint_mouseLeft -> position + Vector ( - 100 , 0 )
>43625	CallExpression	Vector ( - 100 , 0 )
>43626	ArgumentList	- 100
>43627	Argument	0
>43628	PrimaryExpression	0
>43629	Argument	- 100
>43630	UnaryOp	- 100
>43631	PrimaryExpression	100
>43632	UnaryOperator	-
>43633	Callee	Vector
>43634	Identifier	Vector
>43635	PtrMemberAccess	controlHint_mouseLeft -> position
>43636	Identifier	position
>43637	Identifier	controlHint_mouseLeft
>43638	Identifier	p
>43639	Identifier	p
>43640	IdentifierDeclType	Vector
>43641	ExpressionStatement	 
>43642	CallExpression	controlHintNotes . clear ( )
>43643	ArgumentList	 
>43644	Callee	controlHintNotes . clear
>43645	MemberAccess	controlHintNotes . clear
>43646	Identifier	clear
>43647	Identifier	controlHintNotes
>43648	IdentifierDeclStatement	 
>43649	IdentifierDecl	* song = dsq -> continuity . getSongByIndex ( songType )
>43650	AssignmentExpr	* song = dsq -> continuity . getSongByIndex ( songType )
>43651	CallExpression	dsq -> continuity . getSongByIndex ( songType )
>43652	ArgumentList	songType
>43653	Argument	songType
>43654	Identifier	songType
>43655	Callee	dsq -> continuity . getSongByIndex
>43656	MemberAccess	dsq -> continuity . getSongByIndex
>43657	Identifier	getSongByIndex
>43658	PtrMemberAccess	dsq -> continuity
>43659	Identifier	continuity
>43660	Identifier	dsq
>43661	Identifier	song
>43662	Identifier	song
>43663	IdentifierDeclType	Song *
>43664	Condition	 
>43665	RelationalExpression	songType > 0
>43666	PrimaryExpression	0
>43667	Identifier	songType
>43668	ExpressionStatement	 
>43669	CallExpression	debugLog ( os . str ( ) )
>43670	ArgumentList	os . str ( )
>43671	Argument	os . str ( )
>43672	CallExpression	os . str ( )
>43673	ArgumentList	 
>43674	Callee	os . str
>43675	MemberAccess	os . str
>43676	Identifier	str
>43677	Identifier	os
>43678	Callee	debugLog
>43679	Identifier	debugLog
>43680	ExpressionStatement	 
>43681	ShiftExpression	os << \"set control hint
>43682	ShiftExpression	\"set control hint
>43683	ShiftExpression	hint << \", \" << left << \", \" << right << \", \" << middle << \" t
>43684	ShiftExpression	\", \" << left << \", \" << right << \", \" << middle << \" t
>43685	ShiftExpression	left << \", \" << right << \", \" << middle << \" t
>43686	ShiftExpression	\", \" << right << \", \" << middle << \" t
>43687	ShiftExpression	right << \", \" << middle << \" t
>43688	ShiftExpression	\", \" << middle << \" t
>43689	ShiftExpression	middle << \" t
>43690	ShiftExpression	\" t
>43691	ShiftExpression	time << \" )\"
>43692	PrimaryExpression	\" )\"
>43693	Identifier	time
>43694	PrimaryExpression	\" t
>43695	Identifier	middle
>43696	PrimaryExpression	\", \"
>43697	Identifier	right
>43698	PrimaryExpression	\", \"
>43699	Identifier	left
>43700	PrimaryExpression	\", \"
>43701	Identifier	hint
>43702	PrimaryExpression	\"set control hint
>43703	Identifier	os
>43704	IdentifierDeclStatement	 
>43705	IdentifierDecl	os
>43706	Identifier	os
>43707	IdentifierDeclType	std 
>43708	IfStatement	if ( core -> flipMouseButtons )
>43709	CompoundStatement	 
>43710	ExpressionStatement	 
>43711	CallExpression	std 
>43712	ArgumentList	left
>43713	Argument	right
>43714	Identifier	right
>43715	Argument	left
>43716	Identifier	left
>43717	Callee	std 
>43718	Identifier	std 
>43719	IfStatement	if ( h . find ( \"Left\" ) != std 
>43720	ElseStatement	else
>43721	IfStatement	if ( h . find ( \"Left\" ) == std 
>43722	CompoundStatement	 
>43723	ExpressionStatement	 
>43724	CallExpression	hint . replace ( hint . find ( sought ) , sought . size ( ) , replacement )
>43725	ArgumentList	hint . find ( sought )
>43726	Argument	replacement
>43727	Identifier	replacement
>43728	Argument	sought . size ( )
>43729	CallExpression	sought . size ( )
>43730	ArgumentList	 
>43731	Callee	sought . size
>43732	MemberAccess	sought . size
>43733	Identifier	size
>43734	Identifier	sought
>43735	Argument	hint . find ( sought )
>43736	CallExpression	hint . find ( sought )
>43737	ArgumentList	sought
>43738	Argument	sought
>43739	Identifier	sought
>43740	Callee	hint . find
>43741	MemberAccess	hint . find
>43742	Identifier	find
>43743	Identifier	hint
>43744	Callee	hint . replace
>43745	MemberAccess	hint . replace
>43746	Identifier	replace
>43747	Identifier	hint
>43748	IdentifierDeclStatement	 
>43749	IdentifierDecl	replacement = \"Left\"
>43750	AssignmentExpr	replacement = \"Left\"
>43751	PrimaryExpression	\"Left\"
>43752	Identifier	replacement
>43753	Identifier	replacement
>43754	IdentifierDeclType	std 
>43755	IdentifierDeclStatement	 
>43756	IdentifierDecl	sought = \"Right\"
>43757	AssignmentExpr	sought = \"Right\"
>43758	PrimaryExpression	\"Right\"
>43759	Identifier	sought
>43760	Identifier	sought
>43761	IdentifierDeclType	std 
>43762	Condition	 
>43763	AndExpression	h . find ( \"Left\" ) == std 
>43764	EqualityExpression	h . find ( \"Right\" ) != std 
>43765	Identifier	std 
>43766	CallExpression	h . find ( \"Right\" )
>43767	ArgumentList	\"Right\"
>43768	Argument	\"Right\"
>43769	PrimaryExpression	\"Right\"
>43770	Callee	h . find
>43771	MemberAccess	h . find
>43772	Identifier	find
>43773	Identifier	h
>43774	EqualityExpression	h . find ( \"Left\" ) == std 
>43775	Identifier	std 
>43776	CallExpression	h . find ( \"Left\" )
>43777	ArgumentList	\"Left\"
>43778	Argument	\"Left\"
>43779	PrimaryExpression	\"Left\"
>43780	Callee	h . find
>43781	MemberAccess	h . find
>43782	Identifier	find
>43783	Identifier	h
>43784	CompoundStatement	 
>43785	ExpressionStatement	 
>43786	CallExpression	hint . replace ( hint . find ( sought ) , sought . size ( ) , replacement )
>43787	ArgumentList	hint . find ( sought )
>43788	Argument	replacement
>43789	Identifier	replacement
>43790	Argument	sought . size ( )
>43791	CallExpression	sought . size ( )
>43792	ArgumentList	 
>43793	Callee	sought . size
>43794	MemberAccess	sought . size
>43795	Identifier	size
>43796	Identifier	sought
>43797	Argument	hint . find ( sought )
>43798	CallExpression	hint . find ( sought )
>43799	ArgumentList	sought
>43800	Argument	sought
>43801	Identifier	sought
>43802	Callee	hint . find
>43803	MemberAccess	hint . find
>43804	Identifier	find
>43805	Identifier	hint
>43806	Callee	hint . replace
>43807	MemberAccess	hint . replace
>43808	Identifier	replace
>43809	Identifier	hint
>43810	IdentifierDeclStatement	 
>43811	IdentifierDecl	replacement = \"Right\"
>43812	AssignmentExpr	replacement = \"Right\"
>43813	PrimaryExpression	\"Right\"
>43814	Identifier	replacement
>43815	Identifier	replacement
>43816	IdentifierDeclType	std 
>43817	IdentifierDeclStatement	 
>43818	IdentifierDecl	sought = \"Left\"
>43819	AssignmentExpr	sought = \"Left\"
>43820	PrimaryExpression	\"Left\"
>43821	Identifier	sought
>43822	Identifier	sought
>43823	IdentifierDeclType	std 
>43824	Condition	 
>43825	AndExpression	h . find ( \"Left\" ) != std 
>43826	EqualityExpression	h . find ( \"Right\" ) == std 
>43827	Identifier	std 
>43828	CallExpression	h . find ( \"Right\" )
>43829	ArgumentList	\"Right\"
>43830	Argument	\"Right\"
>43831	PrimaryExpression	\"Right\"
>43832	Callee	h . find
>43833	MemberAccess	h . find
>43834	Identifier	find
>43835	Identifier	h
>43836	EqualityExpression	h . find ( \"Left\" ) != std 
>43837	Identifier	std 
>43838	CallExpression	h . find ( \"Left\" )
>43839	ArgumentList	\"Left\"
>43840	Argument	\"Left\"
>43841	PrimaryExpression	\"Left\"
>43842	Callee	h . find
>43843	MemberAccess	h . find
>43844	Identifier	find
>43845	Identifier	h
>43846	Condition	 
>43847	PtrMemberAccess	core -> flipMouseButtons
>43848	Identifier	flipMouseButtons
>43849	Identifier	core
>43850	ExpressionStatement	 
>43851	AssignmentExpr	controlHintTimer = time
>43852	Identifier	time
>43853	Identifier	controlHintTimer
>43854	IdentifierDeclStatement	 
>43855	IdentifierDecl	hint = h
>43856	AssignmentExpr	hint = h
>43857	Identifier	h
>43858	Identifier	h
>43859	Identifier	hint
>43860	IdentifierDeclType	std 
>43861	ExpressionStatement	 
>43862	CallExpression	clearControlHint ( )
>43863	ArgumentList	 
>43864	Callee	clearControlHint
>43865	Identifier	clearControlHint
>43866	ExpressionStatement	 
>43867	AssignmentExpr	controlHint_ignoreClear = false
>43868	Identifier	false
>43869	Identifier	controlHint_ignoreClear
>43870	IfStatement	if ( ! h . empty ( ) )
>43871	ExpressionStatement	 
>43872	CallExpression	dsq -> sound -> playSfx ( \"controlhint\" )
>43873	ArgumentList	\"controlhint\"
>43874	Argument	\"controlhint\"
>43875	PrimaryExpression	\"controlhint\"
>43876	Callee	dsq -> sound -> playSfx
>43877	PtrMemberAccess	dsq -> sound -> playSfx
>43878	Identifier	playSfx
>43879	PtrMemberAccess	dsq -> sound
>43880	Identifier	sound
>43881	Identifier	dsq
>43882	Condition	 
>43883	UnaryOp	! h . empty ( )
>43884	CallExpression	h . empty ( )
>43885	ArgumentList	 
>43886	Callee	h . empty
>43887	MemberAccess	h . empty
>43888	Identifier	empty
>43889	Identifier	h
>43890	UnaryOperator	!
>43995	FunctionDef	Game 
>43996	ParameterList	 
>43997	ReturnType	void
>43998	CompoundStatement	 
>43999	ExpressionStatement	 
>44000	CallExpression	flipSceneVertical ( 14960 )
>44001	ArgumentList	14960
>44002	Argument	14960
>44003	PrimaryExpression	14960
>44004	Callee	flipSceneVertical
>44005	Identifier	flipSceneVertical
>44009	FunctionDef	appendFileToString (std 
>44010	ParameterList	std 
>44011	Parameter	 
>44012	Identifier	file
>44013	ParameterType	const std 
>44014	Parameter	 
>44015	Identifier	string
>44016	ParameterType	std 
>44017	ReturnType	void
>44018	CompoundStatement	 
>44019	ExpressionStatement	 
>44020	CallExpression	inf . close ( )
>44021	ArgumentList	 
>44022	Callee	inf . close
>44023	MemberAccess	inf . close
>44024	Identifier	close
>44025	Identifier	inf
>44026	IfStatement	if ( inf . is_open ( ) )
>44027	CompoundStatement	 
>44028	WhileStatement	while ( ! inf . eof ( ) )
>44029	CompoundStatement	 
>44030	ExpressionStatement	 
>44031	AssignmentExpr	string += read + \"\n\"
>44032	AdditiveExpression	read + \"\n\"
>44033	PrimaryExpression	\"\n\"
>44034	Identifier	read
>44035	Identifier	string
>44036	ExpressionStatement	 
>44037	AssignmentExpr	read = dsq -> user . control . actionSet . insertInputIntoString ( read )
>44038	CallExpression	dsq -> user . control . actionSet . insertInputIntoString ( read )
>44039	ArgumentList	read
>44040	Argument	read
>44041	Identifier	read
>44042	Callee	dsq -> user . control . actionSet . insertInputIntoString
>44043	MemberAccess	dsq -> user . control . actionSet . insertInputIntoString
>44044	Identifier	insertInputIntoString
>44045	MemberAccess	dsq -> user . control . actionSet
>44046	Identifier	actionSet
>44047	MemberAccess	dsq -> user . control
>44048	Identifier	control
>44049	PtrMemberAccess	dsq -> user
>44050	Identifier	user
>44051	Identifier	dsq
>44052	Identifier	read
>44053	ExpressionStatement	 
>44054	AssignmentExpr	read = stripEndlineForUnix ( read )
>44055	CallExpression	stripEndlineForUnix ( read )
>44056	ArgumentList	read
>44057	Argument	read
>44058	Identifier	read
>44059	Callee	stripEndlineForUnix
>44060	Identifier	stripEndlineForUnix
>44061	Identifier	read
>44062	ExpressionStatement	 
>44063	CallExpression	std 
>44064	ArgumentList	inf
>44065	Argument	read
>44066	Identifier	read
>44067	Argument	inf
>44068	Identifier	inf
>44069	Callee	std 
>44070	Identifier	std 
>44071	IdentifierDeclStatement	 
>44072	IdentifierDecl	read
>44073	Identifier	read
>44074	IdentifierDeclType	std 
>44075	Condition	 
>44076	UnaryOp	! inf . eof ( )
>44077	CallExpression	inf . eof ( )
>44078	ArgumentList	 
>44079	Callee	inf . eof
>44080	MemberAccess	inf . eof
>44081	Identifier	eof
>44082	Identifier	inf
>44083	UnaryOperator	!
>44084	Condition	 
>44085	CallExpression	inf . is_open ( )
>44086	ArgumentList	 
>44087	Callee	inf . is_open
>44088	MemberAccess	inf . is_open
>44089	Identifier	is_open
>44090	Identifier	inf
>44091	IdentifierDeclStatement	 
>44092	IdentifierDecl	inf ( file . c_str ( ) )
>44093	CallExpression	file . c_str ( )
>44094	ArgumentList	 
>44095	Callee	file . c_str
>44096	MemberAccess	file . c_str
>44097	Identifier	c_str
>44098	Identifier	file
>44099	Identifier	inf
>44100	IdentifierDeclType	InStream
>44117	FunctionDef	Game 
>44118	ParameterList	 
>44119	ReturnType	void
>44120	CompoundStatement	 
>44121	IfStatement	if ( inHelpScreen )
>44122	ElseStatement	else
>44123	IfStatement	if ( core -> isStateJumpPending ( ) )
>44124	ElseStatement	else
>44125	CompoundStatement	 
>44126	IfStatement	if ( worldMapRender -> isOn ( ) )
>44127	ElseStatement	else
>44128	IfStatement	if ( currentMenuPage == MENUPAGE_FOOD )
>44129	ElseStatement	else
>44130	IfStatement	if ( currentMenuPage == MENUPAGE_TREASURES )
>44131	ElseStatement	else
>44132	IfStatement	if ( currentMenuPage == MENUPAGE_PETS )
>44133	ElseStatement	else
>44134	CompoundStatement	 
>44135	ExpressionStatement	 
>44136	CallExpression	toggleHelpScreen ( true )
>44137	ArgumentList	true
>44138	Argument	true
>44139	Identifier	true
>44140	Callee	toggleHelpScreen
>44141	Identifier	toggleHelpScreen
>44142	CompoundStatement	 
>44143	ExpressionStatement	 
>44144	CallExpression	toggleHelpScreen ( true , \"[Pets]\" )
>44145	ArgumentList	true
>44146	Argument	\"[Pets]\"
>44147	PrimaryExpression	\"[Pets]\"
>44148	Argument	true
>44149	Identifier	true
>44150	Callee	toggleHelpScreen
>44151	Identifier	toggleHelpScreen
>44152	Condition	 
>44153	EqualityExpression	currentMenuPage == MENUPAGE_PETS
>44154	Identifier	MENUPAGE_PETS
>44155	Identifier	currentMenuPage
>44156	CompoundStatement	 
>44157	ExpressionStatement	 
>44158	CallExpression	toggleHelpScreen ( true , \"[Treasures]\" )
>44159	ArgumentList	true
>44160	Argument	\"[Treasures]\"
>44161	PrimaryExpression	\"[Treasures]\"
>44162	Argument	true
>44163	Identifier	true
>44164	Callee	toggleHelpScreen
>44165	Identifier	toggleHelpScreen
>44166	Condition	 
>44167	EqualityExpression	currentMenuPage == MENUPAGE_TREASURES
>44168	Identifier	MENUPAGE_TREASURES
>44169	Identifier	currentMenuPage
>44170	CompoundStatement	 
>44171	ExpressionStatement	 
>44172	CallExpression	toggleHelpScreen ( true , \"[Food]\" )
>44173	ArgumentList	true
>44174	Argument	\"[Food]\"
>44175	PrimaryExpression	\"[Food]\"
>44176	Argument	true
>44177	Identifier	true
>44178	Callee	toggleHelpScreen
>44179	Identifier	toggleHelpScreen
>44180	Condition	 
>44181	EqualityExpression	currentMenuPage == MENUPAGE_FOOD
>44182	Identifier	MENUPAGE_FOOD
>44183	Identifier	currentMenuPage
>44184	CompoundStatement	 
>44185	ExpressionStatement	 
>44186	CallExpression	toggleHelpScreen ( true , \"[World Map]\" )
>44187	ArgumentList	true
>44188	Argument	\"[World Map]\"
>44189	PrimaryExpression	\"[World Map]\"
>44190	Argument	true
>44191	Identifier	true
>44192	Callee	toggleHelpScreen
>44193	Identifier	toggleHelpScreen
>44194	Condition	 
>44195	CallExpression	worldMapRender -> isOn ( )
>44196	ArgumentList	 
>44197	Callee	worldMapRender -> isOn
>44198	PtrMemberAccess	worldMapRender -> isOn
>44199	Identifier	isOn
>44200	Identifier	worldMapRender
>44201	ReturnStatement	 
>44202	Condition	 
>44203	CallExpression	core -> isStateJumpPending ( )
>44204	ArgumentList	 
>44205	Callee	core -> isStateJumpPending
>44206	PtrMemberAccess	core -> isStateJumpPending
>44207	Identifier	isStateJumpPending
>44208	Identifier	core
>44209	ExpressionStatement	 
>44210	CallExpression	toggleHelpScreen ( false )
>44211	ArgumentList	false
>44212	Argument	false
>44213	Identifier	false
>44214	Callee	toggleHelpScreen
>44215	Identifier	toggleHelpScreen
>44216	Condition	 
>44217	Identifier	inHelpScreen
>44234	FunctionDef	Game 
>44235	ParameterList	bool on , const std 
>44236	Parameter	 
>44237	Identifier	label
>44238	ParameterType	const std 
>44239	Parameter	 
>44240	Identifier	on
>44241	ParameterType	bool
>44242	ReturnType	void
>44243	CompoundStatement	 
>44244	ExpressionStatement	 
>44245	AssignmentExpr	inHelpScreen = on
>44246	Identifier	on
>44247	Identifier	inHelpScreen
>44248	IfStatement	if ( on )
>44249	ElseStatement	else
>44250	CompoundStatement	 
>44251	ExpressionStatement	 
>44252	AssignmentExpr	AquariaGuiElement 
>44253	PrimaryExpression	0
>44254	Identifier	AquariaGuiElement 
>44255	ExpressionStatement	 
>44256	CallExpression	dsq -> screenTransition -> transition ( MENUPAGETRANSTIME )
>44257	ArgumentList	MENUPAGETRANSTIME
>44258	Argument	MENUPAGETRANSTIME
>44259	Identifier	MENUPAGETRANSTIME
>44260	Callee	dsq -> screenTransition -> transition
>44261	PtrMemberAccess	dsq -> screenTransition -> transition
>44262	Identifier	transition
>44263	PtrMemberAccess	dsq -> screenTransition
>44264	Identifier	screenTransition
>44265	Identifier	dsq
>44266	ExpressionStatement	 
>44267	CallExpression	dsq -> applyParallaxUserSettings ( )
>44268	ArgumentList	 
>44269	Callee	dsq -> applyParallaxUserSettings
>44270	PtrMemberAccess	dsq -> applyParallaxUserSettings
>44271	Identifier	applyParallaxUserSettings
>44272	Identifier	dsq
>44273	ForStatement	for ( int i = 0 ; i < LR_HELP ; i ++ )
>44274	CompoundStatement	 
>44275	ExpressionStatement	 
>44276	AssignmentExpr	core -> getRenderObjectLayer ( i ) -> visible = true
>44277	Identifier	true
>44278	PtrMemberAccess	core -> getRenderObjectLayer ( i ) -> visible
>44279	Identifier	visible
>44280	CallExpression	core -> getRenderObjectLayer ( i )
>44281	ArgumentList	i
>44282	Argument	i
>44283	Identifier	i
>44284	Callee	core -> getRenderObjectLayer
>44285	PtrMemberAccess	core -> getRenderObjectLayer
>44286	Identifier	getRenderObjectLayer
>44287	Identifier	core
>44288	IncDecOp	 
>44289	IncDec	++
>44290	Identifier	i
>44291	Condition	 
>44292	RelationalExpression	i < LR_HELP
>44293	Identifier	LR_HELP
>44294	Identifier	i
>44295	ForInit	 
>44296	IdentifierDeclStatement	int i = 0 ;
>44297	IdentifierDecl	i = 0
>44298	AssignmentExpr	i = 0
>44299	PrimaryExpression	0
>44300	Identifier	i
>44301	Identifier	i
>44302	IdentifierDeclType	int
>44303	IfStatement	if ( helpCancel )
>44304	CompoundStatement	 
>44305	ExpressionStatement	 
>44306	AssignmentExpr	helpCancel = 0
>44307	PrimaryExpression	0
>44308	Identifier	helpCancel
>44309	ExpressionStatement	 
>44310	CallExpression	helpCancel -> setDecayRate ( 1000 )
>44311	ArgumentList	1000
>44312	Argument	1000
>44313	PrimaryExpression	1000
>44314	Callee	helpCancel -> setDecayRate
>44315	PtrMemberAccess	helpCancel -> setDecayRate
>44316	Identifier	setDecayRate
>44317	Identifier	helpCancel
>44318	ExpressionStatement	 
>44319	CallExpression	helpCancel -> setLife ( 1 )
>44320	ArgumentList	1
>44321	Argument	1
>44322	PrimaryExpression	1
>44323	Callee	helpCancel -> setLife
>44324	PtrMemberAccess	helpCancel -> setLife
>44325	Identifier	setLife
>44326	Identifier	helpCancel
>44327	ExpressionStatement	 
>44328	AssignmentExpr	helpCancel -> alpha = 0
>44329	PrimaryExpression	0
>44330	PtrMemberAccess	helpCancel -> alpha
>44331	Identifier	alpha
>44332	Identifier	helpCancel
>44333	Condition	 
>44334	Identifier	helpCancel
>44335	IfStatement	if ( helpDown )
>44336	CompoundStatement	 
>44337	ExpressionStatement	 
>44338	AssignmentExpr	helpDown = 0
>44339	PrimaryExpression	0
>44340	Identifier	helpDown
>44341	ExpressionStatement	 
>44342	CallExpression	helpDown -> setDecayRate ( 1000 )
>44343	ArgumentList	1000
>44344	Argument	1000
>44345	PrimaryExpression	1000
>44346	Callee	helpDown -> setDecayRate
>44347	PtrMemberAccess	helpDown -> setDecayRate
>44348	Identifier	setDecayRate
>44349	Identifier	helpDown
>44350	ExpressionStatement	 
>44351	CallExpression	helpDown -> setLife ( 1 )
>44352	ArgumentList	1
>44353	Argument	1
>44354	PrimaryExpression	1
>44355	Callee	helpDown -> setLife
>44356	PtrMemberAccess	helpDown -> setLife
>44357	Identifier	setLife
>44358	Identifier	helpDown
>44359	ExpressionStatement	 
>44360	AssignmentExpr	helpDown -> alpha = 0
>44361	PrimaryExpression	0
>44362	PtrMemberAccess	helpDown -> alpha
>44363	Identifier	alpha
>44364	Identifier	helpDown
>44365	Condition	 
>44366	Identifier	helpDown
>44367	IfStatement	if ( helpUp )
>44368	CompoundStatement	 
>44369	ExpressionStatement	 
>44370	AssignmentExpr	helpUp = 0
>44371	PrimaryExpression	0
>44372	Identifier	helpUp
>44373	ExpressionStatement	 
>44374	CallExpression	helpUp -> setDecayRate ( 1000 )
>44375	ArgumentList	1000
>44376	Argument	1000
>44377	PrimaryExpression	1000
>44378	Callee	helpUp -> setDecayRate
>44379	PtrMemberAccess	helpUp -> setDecayRate
>44380	Identifier	setDecayRate
>44381	Identifier	helpUp
>44382	ExpressionStatement	 
>44383	CallExpression	helpUp -> setLife ( 1 )
>44384	ArgumentList	1
>44385	Argument	1
>44386	PrimaryExpression	1
>44387	Callee	helpUp -> setLife
>44388	PtrMemberAccess	helpUp -> setLife
>44389	Identifier	setLife
>44390	Identifier	helpUp
>44391	ExpressionStatement	 
>44392	AssignmentExpr	helpUp -> alpha = 0
>44393	PrimaryExpression	0
>44394	PtrMemberAccess	helpUp -> alpha
>44395	Identifier	alpha
>44396	Identifier	helpUp
>44397	Condition	 
>44398	Identifier	helpUp
>44399	IfStatement	if ( helpBG2 )
>44400	CompoundStatement	 
>44401	ExpressionStatement	 
>44402	AssignmentExpr	helpBG2 = 0
>44403	PrimaryExpression	0
>44404	Identifier	helpBG2
>44405	ExpressionStatement	 
>44406	CallExpression	helpBG2 -> setDecayRate ( 1000 )
>44407	ArgumentList	1000
>44408	Argument	1000
>44409	PrimaryExpression	1000
>44410	Callee	helpBG2 -> setDecayRate
>44411	PtrMemberAccess	helpBG2 -> setDecayRate
>44412	Identifier	setDecayRate
>44413	Identifier	helpBG2
>44414	ExpressionStatement	 
>44415	CallExpression	helpBG2 -> setLife ( 1 )
>44416	ArgumentList	1
>44417	Argument	1
>44418	PrimaryExpression	1
>44419	Callee	helpBG2 -> setLife
>44420	PtrMemberAccess	helpBG2 -> setLife
>44421	Identifier	setLife
>44422	Identifier	helpBG2
>44423	ExpressionStatement	 
>44424	AssignmentExpr	helpBG2 -> alpha = 0
>44425	PrimaryExpression	0
>44426	PtrMemberAccess	helpBG2 -> alpha
>44427	Identifier	alpha
>44428	Identifier	helpBG2
>44429	Condition	 
>44430	Identifier	helpBG2
>44431	IfStatement	if ( helpBG )
>44432	CompoundStatement	 
>44433	ExpressionStatement	 
>44434	AssignmentExpr	helpBG = 0
>44435	PrimaryExpression	0
>44436	Identifier	helpBG
>44437	ExpressionStatement	 
>44438	CallExpression	helpBG -> setDecayRate ( 1000 )
>44439	ArgumentList	1000
>44440	Argument	1000
>44441	PrimaryExpression	1000
>44442	Callee	helpBG -> setDecayRate
>44443	PtrMemberAccess	helpBG -> setDecayRate
>44444	Identifier	setDecayRate
>44445	Identifier	helpBG
>44446	ExpressionStatement	 
>44447	CallExpression	helpBG -> setLife ( 1 )
>44448	ArgumentList	1
>44449	Argument	1
>44450	PrimaryExpression	1
>44451	Callee	helpBG -> setLife
>44452	PtrMemberAccess	helpBG -> setLife
>44453	Identifier	setLife
>44454	Identifier	helpBG
>44455	ExpressionStatement	 
>44456	AssignmentExpr	helpBG -> alpha = 0
>44457	PrimaryExpression	0
>44458	PtrMemberAccess	helpBG -> alpha
>44459	Identifier	alpha
>44460	Identifier	helpBG
>44461	Condition	 
>44462	Identifier	helpBG
>44463	IfStatement	if ( helpText )
>44464	CompoundStatement	 
>44465	ExpressionStatement	 
>44466	AssignmentExpr	helpText = 0
>44467	PrimaryExpression	0
>44468	Identifier	helpText
>44469	ExpressionStatement	 
>44470	CallExpression	helpText -> setDecayRate ( 1000 )
>44471	ArgumentList	1000
>44472	Argument	1000
>44473	PrimaryExpression	1000
>44474	Callee	helpText -> setDecayRate
>44475	PtrMemberAccess	helpText -> setDecayRate
>44476	Identifier	setDecayRate
>44477	Identifier	helpText
>44478	ExpressionStatement	 
>44479	CallExpression	helpText -> setLife ( 1 )
>44480	ArgumentList	1
>44481	Argument	1
>44482	PrimaryExpression	1
>44483	Callee	helpText -> setLife
>44484	PtrMemberAccess	helpText -> setLife
>44485	Identifier	setLife
>44486	Identifier	helpText
>44487	ExpressionStatement	 
>44488	AssignmentExpr	helpText -> alpha = 0
>44489	PrimaryExpression	0
>44490	PtrMemberAccess	helpText -> alpha
>44491	Identifier	alpha
>44492	Identifier	helpText
>44493	Condition	 
>44494	Identifier	helpText
>44495	ExpressionStatement	 
>44496	CallExpression	dsq -> screenTransition -> capture ( )
>44497	ArgumentList	 
>44498	Callee	dsq -> screenTransition -> capture
>44499	PtrMemberAccess	dsq -> screenTransition -> capture
>44500	Identifier	capture
>44501	PtrMemberAccess	dsq -> screenTransition
>44502	Identifier	screenTransition
>44503	Identifier	dsq
>44504	IfStatement	if ( ! helpWasPaused )
>44505	ExpressionStatement	 
>44506	CallExpression	togglePause ( false )
>44507	ArgumentList	false
>44508	Argument	false
>44509	Identifier	false
>44510	Callee	togglePause
>44511	Identifier	togglePause
>44512	Condition	 
>44513	UnaryOp	! helpWasPaused
>44514	Identifier	helpWasPaused
>44515	UnaryOperator	!
>44516	CompoundStatement	 
>44517	ExpressionStatement	 
>44518	CallExpression	dsq -> screenTransition -> transition ( MENUPAGETRANSTIME )
>44519	ArgumentList	MENUPAGETRANSTIME
>44520	Argument	MENUPAGETRANSTIME
>44521	Identifier	MENUPAGETRANSTIME
>44522	Callee	dsq -> screenTransition -> transition
>44523	PtrMemberAccess	dsq -> screenTransition -> transition
>44524	Identifier	transition
>44525	PtrMemberAccess	dsq -> screenTransition
>44526	Identifier	screenTransition
>44527	Identifier	dsq
>44528	ExpressionStatement	 
>44529	CallExpression	core -> resetTimer ( )
>44530	ArgumentList	 
>44531	Callee	core -> resetTimer
>44532	PtrMemberAccess	core -> resetTimer
>44533	Identifier	resetTimer
>44534	Identifier	core
>44535	ForStatement	for ( int i = 0 ; i < LR_HELP ; i ++ )
>44536	CompoundStatement	 
>44537	ExpressionStatement	 
>44538	AssignmentExpr	core -> getRenderObjectLayer ( i ) -> visible = false
>44539	Identifier	false
>44540	PtrMemberAccess	core -> getRenderObjectLayer ( i ) -> visible
>44541	Identifier	visible
>44542	CallExpression	core -> getRenderObjectLayer ( i )
>44543	ArgumentList	i
>44544	Argument	i
>44545	Identifier	i
>44546	Callee	core -> getRenderObjectLayer
>44547	PtrMemberAccess	core -> getRenderObjectLayer
>44548	Identifier	getRenderObjectLayer
>44549	Identifier	core
>44550	IncDecOp	 
>44551	IncDec	++
>44552	Identifier	i
>44553	Condition	 
>44554	RelationalExpression	i < LR_HELP
>44555	Identifier	LR_HELP
>44556	Identifier	i
>44557	ForInit	 
>44558	IdentifierDeclStatement	int i = 0 ;
>44559	IdentifierDecl	i = 0
>44560	AssignmentExpr	i = 0
>44561	PrimaryExpression	0
>44562	Identifier	i
>44563	Identifier	i
>44564	IdentifierDeclType	int
>44565	ExpressionStatement	 
>44566	CallExpression	addRenderObject ( helpCancel , LR_HELP )
>44567	ArgumentList	helpCancel
>44568	Argument	LR_HELP
>44569	Identifier	LR_HELP
>44570	Argument	helpCancel
>44571	Identifier	helpCancel
>44572	Callee	addRenderObject
>44573	Identifier	addRenderObject
>44574	ExpressionStatement	 
>44575	AssignmentExpr	helpCancel -> guiInputLevel = 100
>44576	PrimaryExpression	100
>44577	PtrMemberAccess	helpCancel -> guiInputLevel
>44578	Identifier	guiInputLevel
>44579	Identifier	helpCancel
>44580	ExpressionStatement	 
>44581	AssignmentExpr	helpCancel -> scale = Vector ( 0.9 , 0.9 )
>44582	CallExpression	Vector ( 0.9 , 0.9 )
>44583	ArgumentList	0.9
>44584	Argument	0.9
>44585	PrimaryExpression	0.9
>44586	Argument	0.9
>44587	PrimaryExpression	0.9
>44588	Callee	Vector
>44589	Identifier	Vector
>44590	PtrMemberAccess	helpCancel -> scale
>44591	Identifier	scale
>44592	Identifier	helpCancel
>44593	ExpressionStatement	 
>44594	CallExpression	helpCancel -> event . set ( MakeFunctionEvent ( Game , toggleHelpScreen ) )
>44595	ArgumentList	MakeFunctionEvent ( Game , toggleHelpScreen )
>44596	Argument	MakeFunctionEvent ( Game , toggleHelpScreen )
>44597	CallExpression	MakeFunctionEvent ( Game , toggleHelpScreen )
>44598	ArgumentList	Game
>44599	Argument	toggleHelpScreen
>44600	Identifier	toggleHelpScreen
>44601	Argument	Game
>44602	Identifier	Game
>44603	Callee	MakeFunctionEvent
>44604	Identifier	MakeFunctionEvent
>44605	Callee	helpCancel -> event . set
>44606	MemberAccess	helpCancel -> event . set
>44607	Identifier	set
>44608	PtrMemberAccess	helpCancel -> event
>44609	Identifier	event
>44610	Identifier	helpCancel
>44611	ExpressionStatement	 
>44612	AssignmentExpr	helpCancel -> followCamera = 1
>44613	PrimaryExpression	1
>44614	PtrMemberAccess	helpCancel -> followCamera
>44615	Identifier	followCamera
>44616	Identifier	helpCancel
>44617	ExpressionStatement	 
>44618	AssignmentExpr	helpCancel -> position = Vector ( 750 , 600 - 20 )
>44619	CallExpression	Vector ( 750 , 600 - 20 )
>44620	ArgumentList	750
>44621	Argument	600 - 20
>44622	AdditiveExpression	600 - 20
>44623	PrimaryExpression	20
>44624	PrimaryExpression	600
>44625	Argument	750
>44626	PrimaryExpression	750
>44627	Callee	Vector
>44628	Identifier	Vector
>44629	PtrMemberAccess	helpCancel -> position
>44630	Identifier	position
>44631	Identifier	helpCancel
>44632	ExpressionStatement	 
>44633	CallExpression	helpCancel -> useGlow ( \"particles/glow\" , 128 , 40 )
>44634	ArgumentList	\"particles/glow\"
>44635	Argument	40
>44636	PrimaryExpression	40
>44637	Argument	128
>44638	PrimaryExpression	128
>44639	Argument	\"particles/glow\"
>44640	PrimaryExpression	\"particles/glow\"
>44641	Callee	helpCancel -> useGlow
>44642	PtrMemberAccess	helpCancel -> useGlow
>44643	Identifier	useGlow
>44644	Identifier	helpCancel
>44645	ExpressionStatement	 
>44646	CallExpression	helpCancel -> useSound ( \"click\" )
>44647	ArgumentList	\"click\"
>44648	Argument	\"click\"
>44649	PrimaryExpression	\"click\"
>44650	Callee	helpCancel -> useSound
>44651	PtrMemberAccess	helpCancel -> useSound
>44652	Identifier	useSound
>44653	Identifier	helpCancel
>44654	ExpressionStatement	 
>44655	CallExpression	helpCancel -> useQuad ( \"Gui/cancel\" )
>44656	ArgumentList	\"Gui/cancel\"
>44657	Argument	\"Gui/cancel\"
>44658	PrimaryExpression	\"Gui/cancel\"
>44659	Callee	helpCancel -> useQuad
>44660	PtrMemberAccess	helpCancel -> useQuad
>44661	Identifier	useQuad
>44662	Identifier	helpCancel
>44663	ExpressionStatement	 
>44664	Identifier	AquariaMenuItem
>44665	Statement	 
>44666	Statement	 
>44667	Statement	 
>44668	ExpressionStatement	 
>44669	CallExpression	addRenderObject ( helpDown , LR_HELP )
>44670	ArgumentList	helpDown
>44671	Argument	LR_HELP
>44672	Identifier	LR_HELP
>44673	Argument	helpDown
>44674	Identifier	helpDown
>44675	Callee	addRenderObject
>44676	Identifier	addRenderObject
>44677	ExpressionStatement	 
>44678	AssignmentExpr	helpDown -> guiInputLevel = 100
>44679	PrimaryExpression	100
>44680	PtrMemberAccess	helpDown -> guiInputLevel
>44681	Identifier	guiInputLevel
>44682	Identifier	helpDown
>44683	ExpressionStatement	 
>44684	AssignmentExpr	helpDown -> scale = Vector ( 0.6 , 0.6 )
>44685	CallExpression	Vector ( 0.6 , 0.6 )
>44686	ArgumentList	0.6
>44687	Argument	0.6
>44688	PrimaryExpression	0.6
>44689	Argument	0.6
>44690	PrimaryExpression	0.6
>44691	Callee	Vector
>44692	Identifier	Vector
>44693	PtrMemberAccess	helpDown -> scale
>44694	Identifier	scale
>44695	Identifier	helpDown
>44696	ExpressionStatement	 
>44697	CallExpression	helpDown -> event . set ( MakeFunctionEvent ( Game , onHelpDown ) )
>44698	ArgumentList	MakeFunctionEvent ( Game , onHelpDown )
>44699	Argument	MakeFunctionEvent ( Game , onHelpDown )
>44700	CallExpression	MakeFunctionEvent ( Game , onHelpDown )
>44701	ArgumentList	Game
>44702	Argument	onHelpDown
>44703	Identifier	onHelpDown
>44704	Argument	Game
>44705	Identifier	Game
>44706	Callee	MakeFunctionEvent
>44707	Identifier	MakeFunctionEvent
>44708	Callee	helpDown -> event . set
>44709	MemberAccess	helpDown -> event . set
>44710	Identifier	set
>44711	PtrMemberAccess	helpDown -> event
>44712	Identifier	event
>44713	Identifier	helpDown
>44714	ExpressionStatement	 
>44715	AssignmentExpr	helpDown -> rotation . z = 90
>44716	PrimaryExpression	90
>44717	MemberAccess	helpDown -> rotation . z
>44718	Identifier	z
>44719	PtrMemberAccess	helpDown -> rotation
>44720	Identifier	rotation
>44721	Identifier	helpDown
>44722	ExpressionStatement	 
>44723	AssignmentExpr	helpDown -> followCamera = 1
>44724	PrimaryExpression	1
>44725	PtrMemberAccess	helpDown -> followCamera
>44726	Identifier	followCamera
>44727	Identifier	helpDown
>44728	ExpressionStatement	 
>44729	AssignmentExpr	helpDown -> position = Vector ( 50 , 600 - 40 )
>44730	CallExpression	Vector ( 50 , 600 - 40 )
>44731	ArgumentList	50
>44732	Argument	600 - 40
>44733	AdditiveExpression	600 - 40
>44734	PrimaryExpression	40
>44735	PrimaryExpression	600
>44736	Argument	50
>44737	PrimaryExpression	50
>44738	Callee	Vector
>44739	Identifier	Vector
>44740	PtrMemberAccess	helpDown -> position
>44741	Identifier	position
>44742	Identifier	helpDown
>44743	ExpressionStatement	 
>44744	CallExpression	helpDown -> useGlow ( \"particles/glow\" , 64 , 32 )
>44745	ArgumentList	\"particles/glow\"
>44746	Argument	32
>44747	PrimaryExpression	32
>44748	Argument	64
>44749	PrimaryExpression	64
>44750	Argument	\"particles/glow\"
>44751	PrimaryExpression	\"particles/glow\"
>44752	Callee	helpDown -> useGlow
>44753	PtrMemberAccess	helpDown -> useGlow
>44754	Identifier	useGlow
>44755	Identifier	helpDown
>44756	ExpressionStatement	 
>44757	CallExpression	helpDown -> useSound ( \"click\" )
>44758	ArgumentList	\"click\"
>44759	Argument	\"click\"
>44760	PrimaryExpression	\"click\"
>44761	Callee	helpDown -> useSound
>44762	PtrMemberAccess	helpDown -> useSound
>44763	Identifier	useSound
>44764	Identifier	helpDown
>44765	ExpressionStatement	 
>44766	CallExpression	helpDown -> useQuad ( \"Gui/arrow-right\" )
>44767	ArgumentList	\"Gui/arrow-right\"
>44768	Argument	\"Gui/arrow-right\"
>44769	PrimaryExpression	\"Gui/arrow-right\"
>44770	Callee	helpDown -> useQuad
>44771	PtrMemberAccess	helpDown -> useQuad
>44772	Identifier	useQuad
>44773	Identifier	helpDown
>44774	ExpressionStatement	 
>44775	Identifier	AquariaMenuItem
>44776	Statement	 
>44777	Statement	 
>44778	Statement	 
>44779	ExpressionStatement	 
>44780	CallExpression	addRenderObject ( helpUp , LR_HELP )
>44781	ArgumentList	helpUp
>44782	Argument	LR_HELP
>44783	Identifier	LR_HELP
>44784	Argument	helpUp
>44785	Identifier	helpUp
>44786	Callee	addRenderObject
>44787	Identifier	addRenderObject
>44788	ExpressionStatement	 
>44789	AssignmentExpr	helpUp -> guiInputLevel = 100
>44790	PrimaryExpression	100
>44791	PtrMemberAccess	helpUp -> guiInputLevel
>44792	Identifier	guiInputLevel
>44793	Identifier	helpUp
>44794	ExpressionStatement	 
>44795	AssignmentExpr	helpUp -> scale = Vector ( 0.6 , 0.6 )
>44796	CallExpression	Vector ( 0.6 , 0.6 )
>44797	ArgumentList	0.6
>44798	Argument	0.6
>44799	PrimaryExpression	0.6
>44800	Argument	0.6
>44801	PrimaryExpression	0.6
>44802	Callee	Vector
>44803	Identifier	Vector
>44804	PtrMemberAccess	helpUp -> scale
>44805	Identifier	scale
>44806	Identifier	helpUp
>44807	ExpressionStatement	 
>44808	CallExpression	helpUp -> event . set ( MakeFunctionEvent ( Game , onHelpUp ) )
>44809	ArgumentList	MakeFunctionEvent ( Game , onHelpUp )
>44810	Argument	MakeFunctionEvent ( Game , onHelpUp )
>44811	CallExpression	MakeFunctionEvent ( Game , onHelpUp )
>44812	ArgumentList	Game
>44813	Argument	onHelpUp
>44814	Identifier	onHelpUp
>44815	Argument	Game
>44816	Identifier	Game
>44817	Callee	MakeFunctionEvent
>44818	Identifier	MakeFunctionEvent
>44819	Callee	helpUp -> event . set
>44820	MemberAccess	helpUp -> event . set
>44821	Identifier	set
>44822	PtrMemberAccess	helpUp -> event
>44823	Identifier	event
>44824	Identifier	helpUp
>44825	ExpressionStatement	 
>44826	AssignmentExpr	helpUp -> rotation . z = 90
>44827	PrimaryExpression	90
>44828	MemberAccess	helpUp -> rotation . z
>44829	Identifier	z
>44830	PtrMemberAccess	helpUp -> rotation
>44831	Identifier	rotation
>44832	Identifier	helpUp
>44833	ExpressionStatement	 
>44834	AssignmentExpr	helpUp -> followCamera = 1
>44835	PrimaryExpression	1
>44836	PtrMemberAccess	helpUp -> followCamera
>44837	Identifier	followCamera
>44838	Identifier	helpUp
>44839	ExpressionStatement	 
>44840	AssignmentExpr	helpUp -> position = Vector ( 50 , 40 )
>44841	CallExpression	Vector ( 50 , 40 )
>44842	ArgumentList	50
>44843	Argument	40
>44844	PrimaryExpression	40
>44845	Argument	50
>44846	PrimaryExpression	50
>44847	Callee	Vector
>44848	Identifier	Vector
>44849	PtrMemberAccess	helpUp -> position
>44850	Identifier	position
>44851	Identifier	helpUp
>44852	ExpressionStatement	 
>44853	CallExpression	helpUp -> useGlow ( \"particles/glow\" , 64 , 32 )
>44854	ArgumentList	\"particles/glow\"
>44855	Argument	32
>44856	PrimaryExpression	32
>44857	Argument	64
>44858	PrimaryExpression	64
>44859	Argument	\"particles/glow\"
>44860	PrimaryExpression	\"particles/glow\"
>44861	Callee	helpUp -> useGlow
>44862	PtrMemberAccess	helpUp -> useGlow
>44863	Identifier	useGlow
>44864	Identifier	helpUp
>44865	ExpressionStatement	 
>44866	CallExpression	helpUp -> useSound ( \"click\" )
>44867	ArgumentList	\"click\"
>44868	Argument	\"click\"
>44869	PrimaryExpression	\"click\"
>44870	Callee	helpUp -> useSound
>44871	PtrMemberAccess	helpUp -> useSound
>44872	Identifier	useSound
>44873	Identifier	helpUp
>44874	ExpressionStatement	 
>44875	CallExpression	helpUp -> useQuad ( \"Gui/arrow-left\" )
>44876	ArgumentList	\"Gui/arrow-left\"
>44877	Argument	\"Gui/arrow-left\"
>44878	PrimaryExpression	\"Gui/arrow-left\"
>44879	Callee	helpUp -> useQuad
>44880	PtrMemberAccess	helpUp -> useQuad
>44881	Identifier	useQuad
>44882	Identifier	helpUp
>44883	ExpressionStatement	 
>44884	Identifier	AquariaMenuItem
>44885	Statement	 
>44886	Statement	 
>44887	Statement	 
>44888	ExpressionStatement	 
>44889	CallExpression	addRenderObject ( helpText , LR_HELP )
>44890	ArgumentList	helpText
>44891	Argument	LR_HELP
>44892	Identifier	LR_HELP
>44893	Argument	helpText
>44894	Identifier	helpText
>44895	Callee	addRenderObject
>44896	Identifier	addRenderObject
>44897	IfStatement	if ( ! label . empty ( ) )
>44898	CompoundStatement	 
>44899	ExpressionStatement	 
>44900	CallExpression	helpText -> offset . interpolateTo ( Vector ( 0 , - helpText -> getLineHeight ( ) * line ) , - 1200 )
>44901	ArgumentList	Vector ( 0 , - helpText -> getLineHeight ( ) * line )
>44902	Argument	- 1200
>44903	UnaryOp	- 1200
>44904	PrimaryExpression	1200
>44905	UnaryOperator	-
>44906	Argument	Vector ( 0 , - helpText -> getLineHeight ( ) * line )
>44907	CallExpression	Vector ( 0 , - helpText -> getLineHeight ( ) * line )
>44908	ArgumentList	0
>44909	Argument	- helpText -> getLineHeight ( ) * line
>44910	MultiplicativeExpression	- helpText -> getLineHeight ( ) * line
>44911	Identifier	line
>44912	UnaryOp	- helpText -> getLineHeight ( )
>44913	CallExpression	helpText -> getLineHeight ( )
>44914	ArgumentList	 
>44915	Callee	helpText -> getLineHeight
>44916	PtrMemberAccess	helpText -> getLineHeight
>44917	Identifier	getLineHeight
>44918	Identifier	helpText
>44919	UnaryOperator	-
>44920	Argument	0
>44921	PrimaryExpression	0
>44922	Callee	Vector
>44923	Identifier	Vector
>44924	Callee	helpText -> offset . interpolateTo
>44925	MemberAccess	helpText -> offset . interpolateTo
>44926	Identifier	interpolateTo
>44927	PtrMemberAccess	helpText -> offset
>44928	Identifier	offset
>44929	Identifier	helpText
>44930	IdentifierDeclStatement	 
>44931	IdentifierDecl	line = helpText -> findLine ( label )
>44932	AssignmentExpr	line = helpText -> findLine ( label )
>44933	CallExpression	helpText -> findLine ( label )
>44934	ArgumentList	label
>44935	Argument	label
>44936	Identifier	label
>44937	Callee	helpText -> findLine
>44938	PtrMemberAccess	helpText -> findLine
>44939	Identifier	findLine
>44940	Identifier	helpText
>44941	Identifier	line
>44942	Identifier	line
>44943	IdentifierDeclType	int
>44944	Condition	 
>44945	UnaryOp	! label . empty ( )
>44946	CallExpression	label . empty ( )
>44947	ArgumentList	 
>44948	Callee	label . empty
>44949	MemberAccess	label . empty
>44950	Identifier	empty
>44951	Identifier	label
>44952	UnaryOperator	!
>44953	ExpressionStatement	 
>44954	AssignmentExpr	helpText -> position = Vector ( 100 , 20 )
>44955	CallExpression	Vector ( 100 , 20 )
>44956	ArgumentList	100
>44957	Argument	20
>44958	PrimaryExpression	20
>44959	Argument	100
>44960	PrimaryExpression	100
>44961	Callee	Vector
>44962	Identifier	Vector
>44963	PtrMemberAccess	helpText -> position
>44964	Identifier	position
>44965	Identifier	helpText
>44966	ExpressionStatement	 
>44967	AssignmentExpr	helpText -> followCamera = 1
>44968	PrimaryExpression	1
>44969	PtrMemberAccess	helpText -> followCamera
>44970	Identifier	followCamera
>44971	Identifier	helpText
>44972	ExpressionStatement	 
>44973	AssignmentExpr	helpText -> cull = false
>44974	Identifier	false
>44975	PtrMemberAccess	helpText -> cull
>44976	Identifier	cull
>44977	Identifier	helpText
>44978	ExpressionStatement	 
>44979	CallExpression	helpText -> setText ( data )
>44980	ArgumentList	data
>44981	Argument	data
>44982	Identifier	data
>44983	Callee	helpText -> setText
>44984	PtrMemberAccess	helpText -> setText
>44985	Identifier	setText
>44986	Identifier	helpText
>44987	ExpressionStatement	 
>44988	CallExpression	helpText -> setWidth ( 600 )
>44989	ArgumentList	600
>44990	Argument	600
>44991	PrimaryExpression	600
>44992	Callee	helpText -> setWidth
>44993	PtrMemberAccess	helpText -> setWidth
>44994	Identifier	setWidth
>44995	Identifier	helpText
>44996	ExpressionStatement	 
>44997	AssignmentExpr	helpText = new TTFText ( & dsq -> fontArialSmall )
>44998	UnaryOp	& dsq -> fontArialSmall
>44999	PtrMemberAccess	dsq -> fontArialSmall
>45000	Identifier	fontArialSmall
>45001	Identifier	dsq
>45002	UnaryOperator	&
>45003	Identifier	helpText
>45004	ExpressionStatement	 
>45005	CallExpression	addRenderObject ( helpBG2 , LR_HELP )
>45006	ArgumentList	helpBG2
>45007	Argument	LR_HELP
>45008	Identifier	LR_HELP
>45009	Argument	helpBG2
>45010	Identifier	helpBG2
>45011	Callee	addRenderObject
>45012	Identifier	addRenderObject
>45013	ExpressionStatement	 
>45014	AssignmentExpr	helpBG2 -> followCamera = 1
>45015	PrimaryExpression	1
>45016	PtrMemberAccess	helpBG2 -> followCamera
>45017	Identifier	followCamera
>45018	Identifier	helpBG2
>45019	ExpressionStatement	 
>45020	AssignmentExpr	helpBG2 -> position = Vector ( 400 , 300 )
>45021	CallExpression	Vector ( 400 , 300 )
>45022	ArgumentList	400
>45023	Argument	300
>45024	PrimaryExpression	300
>45025	Argument	400
>45026	PrimaryExpression	400
>45027	Callee	Vector
>45028	Identifier	Vector
>45029	PtrMemberAccess	helpBG2 -> position
>45030	Identifier	position
>45031	Identifier	helpBG2
>45032	ExpressionStatement	 
>45033	AssignmentExpr	helpBG2 -> autoHeight = AUTO_VIRTUALHEIGHT
>45034	Identifier	AUTO_VIRTUALHEIGHT
>45035	PtrMemberAccess	helpBG2 -> autoHeight
>45036	Identifier	autoHeight
>45037	Identifier	helpBG2
>45038	ExpressionStatement	 
>45039	CallExpression	helpBG2 -> setWidth ( 620 )
>45040	ArgumentList	620
>45041	Argument	620
>45042	PrimaryExpression	620
>45043	Callee	helpBG2 -> setWidth
>45044	PtrMemberAccess	helpBG2 -> setWidth
>45045	Identifier	setWidth
>45046	Identifier	helpBG2
>45047	ExpressionStatement	 
>45048	AssignmentExpr	helpBG2 -> alphaMod = 0.5
>45049	PrimaryExpression	0.5
>45050	PtrMemberAccess	helpBG2 -> alphaMod
>45051	Identifier	alphaMod
>45052	Identifier	helpBG2
>45053	ExpressionStatement	 
>45054	AssignmentExpr	helpBG2 -> color = 0
>45055	PrimaryExpression	0
>45056	PtrMemberAccess	helpBG2 -> color
>45057	Identifier	color
>45058	Identifier	helpBG2
>45059	ExpressionStatement	 
>45060	Identifier	Quad
>45061	Statement	 
>45062	Statement	 
>45063	Statement	 
>45064	ExpressionStatement	 
>45065	CallExpression	addRenderObject ( helpBG , LR_HELP )
>45066	ArgumentList	helpBG
>45067	Argument	LR_HELP
>45068	Identifier	LR_HELP
>45069	Argument	helpBG
>45070	Identifier	helpBG
>45071	Callee	addRenderObject
>45072	Identifier	addRenderObject
>45073	ExpressionStatement	 
>45074	AssignmentExpr	helpBG -> followCamera = 1
>45075	PrimaryExpression	1
>45076	PtrMemberAccess	helpBG -> followCamera
>45077	Identifier	followCamera
>45078	Identifier	helpBG
>45079	ExpressionStatement	 
>45080	AssignmentExpr	helpBG -> position = Vector ( 400 , 300 )
>45081	CallExpression	Vector ( 400 , 300 )
>45082	ArgumentList	400
>45083	Argument	300
>45084	PrimaryExpression	300
>45085	Argument	400
>45086	PrimaryExpression	400
>45087	Callee	Vector
>45088	Identifier	Vector
>45089	PtrMemberAccess	helpBG -> position
>45090	Identifier	position
>45091	Identifier	helpBG
>45092	ExpressionStatement	 
>45093	AssignmentExpr	helpBG -> autoHeight = AUTO_VIRTUALHEIGHT
>45094	Identifier	AUTO_VIRTUALHEIGHT
>45095	PtrMemberAccess	helpBG -> autoHeight
>45096	Identifier	autoHeight
>45097	Identifier	helpBG
>45098	ExpressionStatement	 
>45099	AssignmentExpr	helpBG -> autoWidth = AUTO_VIRTUALWIDTH
>45100	Identifier	AUTO_VIRTUALWIDTH
>45101	PtrMemberAccess	helpBG -> autoWidth
>45102	Identifier	autoWidth
>45103	Identifier	helpBG
>45104	ExpressionStatement	 
>45105	AssignmentExpr	helpBG -> repeatToFillScale = Vector ( 2 , 2 )
>45106	CallExpression	Vector ( 2 , 2 )
>45107	ArgumentList	2
>45108	Argument	2
>45109	PrimaryExpression	2
>45110	Argument	2
>45111	PrimaryExpression	2
>45112	Callee	Vector
>45113	Identifier	Vector
>45114	PtrMemberAccess	helpBG -> repeatToFillScale
>45115	Identifier	repeatToFillScale
>45116	Identifier	helpBG
>45117	ExpressionStatement	 
>45118	CallExpression	helpBG -> repeatTextureToFill ( true )
>45119	ArgumentList	true
>45120	Argument	true
>45121	Identifier	true
>45122	Callee	helpBG -> repeatTextureToFill
>45123	PtrMemberAccess	helpBG -> repeatTextureToFill
>45124	Identifier	repeatTextureToFill
>45125	Identifier	helpBG
>45126	ExpressionStatement	 
>45127	CallExpression	helpBG -> setTexture ( \"brick\" )
>45128	ArgumentList	\"brick\"
>45129	Argument	\"brick\"
>45130	PrimaryExpression	\"brick\"
>45131	Callee	helpBG -> setTexture
>45132	PtrMemberAccess	helpBG -> setTexture
>45133	Identifier	setTexture
>45134	Identifier	helpBG
>45135	ExpressionStatement	 
>45136	Identifier	Quad
>45137	Statement	 
>45138	Statement	 
>45139	Statement	 
>45140	ExpressionStatement	 
>45141	CallExpression	dsq -> continuity . statsAndAchievements -> appendStringData ( data )
>45142	ArgumentList	data
>45143	Argument	data
>45144	Identifier	data
>45145	Callee	dsq -> continuity . statsAndAchievements -> appendStringData
>45146	PtrMemberAccess	dsq -> continuity . statsAndAchievements -> appendStringData
>45147	Identifier	appendStringData
>45148	MemberAccess	dsq -> continuity . statsAndAchievements
>45149	Identifier	statsAndAchievements
>45150	PtrMemberAccess	dsq -> continuity
>45151	Identifier	continuity
>45152	Identifier	dsq
>45153	ExpressionStatement	 
>45154	AssignmentExpr	data += \"\n\n\" + dsq -> continuity . stringBank . get ( 2032 ) + \"\n\n\"
>45155	AdditiveExpression	\"\n\n\" + dsq -> continuity . stringBank . get ( 2032 ) + \"\n\n\"
>45156	AdditiveExpression	dsq -> continuity . stringBank . get ( 2032 ) + \"\n\n\"
>45157	PrimaryExpression	\"\n\n\"
>45158	CallExpression	dsq -> continuity . stringBank . get ( 2032 )
>45159	ArgumentList	2032
>45160	Argument	2032
>45161	PrimaryExpression	2032
>45162	Callee	dsq -> continuity . stringBank . get
>45163	MemberAccess	dsq -> continuity . stringBank . get
>45164	Identifier	get
>45165	MemberAccess	dsq -> continuity . stringBank
>45166	Identifier	stringBank
>45167	PtrMemberAccess	dsq -> continuity
>45168	Identifier	continuity
>45169	Identifier	dsq
>45170	PrimaryExpression	\"\n\n\"
>45171	Identifier	data
>45172	ExpressionStatement	 
>45173	CallExpression	appendFileToString ( data , fname )
>45174	ArgumentList	data
>45175	Argument	fname
>45176	Identifier	fname
>45177	Argument	data
>45178	Identifier	data
>45179	Callee	appendFileToString
>45180	Identifier	appendFileToString
>45181	ExpressionStatement	 
>45182	AssignmentExpr	fname = localisePath ( \"data/help_end_mac.txt\" )
>45183	CallExpression	localisePath ( \"data/help_end_mac.txt\" )
>45184	ArgumentList	\"data/help_end_mac.txt\"
>45185	Argument	\"data/help_end_mac.txt\"
>45186	PrimaryExpression	\"data/help_end_mac.txt\"
>45187	Callee	localisePath
>45188	Identifier	localisePath
>45189	Identifier	fname
>45190	ExpressionStatement	 
>45191	CallExpression	appendFileToString ( data , fname )
>45192	ArgumentList	data
>45193	Argument	fname
>45194	Identifier	fname
>45195	Argument	data
>45196	Identifier	data
>45197	Callee	appendFileToString
>45198	Identifier	appendFileToString
>45199	ExpressionStatement	 
>45200	AssignmentExpr	fname = localisePath ( \"data/help_start.txt\" )
>45201	CallExpression	localisePath ( \"data/help_start.txt\" )
>45202	ArgumentList	\"data/help_start.txt\"
>45203	Argument	\"data/help_start.txt\"
>45204	PrimaryExpression	\"data/help_start.txt\"
>45205	Callee	localisePath
>45206	Identifier	localisePath
>45207	Identifier	fname
>45208	IfStatement	if ( dsq -> continuity . hasSong ( SONG_ENERGYFORM ) )
>45209	CompoundStatement	 
>45210	ExpressionStatement	 
>45211	CallExpression	appendFileToString ( data , fname )
>45212	ArgumentList	data
>45213	Argument	fname
>45214	Identifier	fname
>45215	Argument	data
>45216	Identifier	data
>45217	Callee	appendFileToString
>45218	Identifier	appendFileToString
>45219	ExpressionStatement	 
>45220	AssignmentExpr	fname = localisePath ( \"data/help_energyform.txt\" )
>45221	CallExpression	localisePath ( \"data/help_energyform.txt\" )
>45222	ArgumentList	\"data/help_energyform.txt\"
>45223	Argument	\"data/help_energyform.txt\"
>45224	PrimaryExpression	\"data/help_energyform.txt\"
>45225	Callee	localisePath
>45226	Identifier	localisePath
>45227	Identifier	fname
>45228	Condition	 
>45229	CallExpression	dsq -> continuity . hasSong ( SONG_ENERGYFORM )
>45230	ArgumentList	SONG_ENERGYFORM
>45231	Argument	SONG_ENERGYFORM
>45232	Identifier	SONG_ENERGYFORM
>45233	Callee	dsq -> continuity . hasSong
>45234	MemberAccess	dsq -> continuity . hasSong
>45235	Identifier	hasSong
>45236	PtrMemberAccess	dsq -> continuity
>45237	Identifier	continuity
>45238	Identifier	dsq
>45239	IfStatement	if ( dsq -> continuity . hasSong ( SONG_BIND ) )
>45240	CompoundStatement	 
>45241	ExpressionStatement	 
>45242	CallExpression	appendFileToString ( data , fname )
>45243	ArgumentList	data
>45244	Argument	fname
>45245	Identifier	fname
>45246	Argument	data
>45247	Identifier	data
>45248	Callee	appendFileToString
>45249	Identifier	appendFileToString
>45250	ExpressionStatement	 
>45251	AssignmentExpr	fname = localisePath ( \"data/help_bindsong.txt\" )
>45252	CallExpression	localisePath ( \"data/help_bindsong.txt\" )
>45253	ArgumentList	\"data/help_bindsong.txt\"
>45254	Argument	\"data/help_bindsong.txt\"
>45255	PrimaryExpression	\"data/help_bindsong.txt\"
>45256	Callee	localisePath
>45257	Identifier	localisePath
>45258	Identifier	fname
>45259	Condition	 
>45260	CallExpression	dsq -> continuity . hasSong ( SONG_BIND )
>45261	ArgumentList	SONG_BIND
>45262	Argument	SONG_BIND
>45263	Identifier	SONG_BIND
>45264	Callee	dsq -> continuity . hasSong
>45265	MemberAccess	dsq -> continuity . hasSong
>45266	Identifier	hasSong
>45267	PtrMemberAccess	dsq -> continuity
>45268	Identifier	continuity
>45269	Identifier	dsq
>45270	ExpressionStatement	 
>45271	CallExpression	appendFileToString ( data , fname )
>45272	ArgumentList	data
>45273	Argument	fname
>45274	Identifier	fname
>45275	Argument	data
>45276	Identifier	data
>45277	Callee	appendFileToString
>45278	Identifier	appendFileToString
>45279	IdentifierDeclStatement	 
>45280	IdentifierDecl	fname = localisePath ( \"data/help_header_mac.txt\" )
>45281	AssignmentExpr	fname = localisePath ( \"data/help_header_mac.txt\" )
>45282	CallExpression	localisePath ( \"data/help_header_mac.txt\" )
>45283	ArgumentList	\"data/help_header_mac.txt\"
>45284	Argument	\"data/help_header_mac.txt\"
>45285	PrimaryExpression	\"data/help_header_mac.txt\"
>45286	Callee	localisePath
>45287	Identifier	localisePath
>45288	Identifier	fname
>45289	Identifier	fname
>45290	IdentifierDeclType	std 
>45291	IdentifierDeclStatement	 
>45292	IdentifierDecl	data
>45293	Identifier	data
>45294	IdentifierDeclType	std 
>45295	ExpressionStatement	 
>45296	CallExpression	togglePause ( true )
>45297	ArgumentList	true
>45298	Argument	true
>45299	Identifier	true
>45300	Callee	togglePause
>45301	Identifier	togglePause
>45302	ExpressionStatement	 
>45303	AssignmentExpr	helpWasPaused = isPaused ( )
>45304	CallExpression	isPaused ( )
>45305	ArgumentList	 
>45306	Callee	isPaused
>45307	Identifier	isPaused
>45308	Identifier	helpWasPaused
>45309	ExpressionStatement	 
>45310	CallExpression	dsq -> screenTransition -> capture ( )
>45311	ArgumentList	 
>45312	Callee	dsq -> screenTransition -> capture
>45313	PtrMemberAccess	dsq -> screenTransition -> capture
>45314	Identifier	capture
>45315	PtrMemberAccess	dsq -> screenTransition
>45316	Identifier	screenTransition
>45317	Identifier	dsq
>45318	ExpressionStatement	 
>45319	AssignmentExpr	AquariaGuiElement 
>45320	PrimaryExpression	100
>45321	Identifier	AquariaGuiElement 
>45322	Condition	 
>45323	Identifier	on
>45324	IfStatement	if ( dsq -> saveSlotMode != SSM_NONE )
>45325	ReturnStatement	 
>45326	Condition	 
>45327	EqualityExpression	dsq -> saveSlotMode != SSM_NONE
>45328	Identifier	SSM_NONE
>45329	PtrMemberAccess	dsq -> saveSlotMode
>45330	Identifier	saveSlotMode
>45331	Identifier	dsq
>45332	IfStatement	if ( dsq -> isNested ( ) )
>45333	ReturnStatement	 
>45334	Condition	 
>45335	CallExpression	dsq -> isNested ( )
>45336	ArgumentList	 
>45337	Callee	dsq -> isNested
>45338	PtrMemberAccess	dsq -> isNested
>45339	Identifier	isNested
>45340	Identifier	dsq
>45341	IfStatement	if ( dsq -> screenTransition -> isGoing ( ) )
>45342	ReturnStatement	 
>45343	Condition	 
>45344	CallExpression	dsq -> screenTransition -> isGoing ( )
>45345	ArgumentList	 
>45346	Callee	dsq -> screenTransition -> isGoing
>45347	PtrMemberAccess	dsq -> screenTransition -> isGoing
>45348	Identifier	isGoing
>45349	PtrMemberAccess	dsq -> screenTransition
>45350	Identifier	screenTransition
>45351	Identifier	dsq
>45352	IfStatement	if ( core -> getShiftState ( ) )
>45353	ReturnStatement	 
>45354	Condition	 
>45355	CallExpression	core -> getShiftState ( )
>45356	ArgumentList	 
>45357	Callee	core -> getShiftState
>45358	PtrMemberAccess	core -> getShiftState
>45359	Identifier	getShiftState
>45360	Identifier	core
>45361	IfStatement	if ( inHelpScreen == on )
>45362	ReturnStatement	 
>45363	Condition	 
>45364	EqualityExpression	inHelpScreen == on
>45365	Identifier	on
>45366	Identifier	inHelpScreen
>45367	IfStatement	if ( dsq -> game -> isSceneEditorActive ( ) )
>45368	ReturnStatement	 
>45369	Condition	 
>45370	CallExpression	dsq -> game -> isSceneEditorActive ( )
>45371	ArgumentList	 
>45372	Callee	dsq -> game -> isSceneEditorActive
>45373	PtrMemberAccess	dsq -> game -> isSceneEditorActive
>45374	Identifier	isSceneEditorActive
>45375	PtrMemberAccess	dsq -> game
>45376	Identifier	game
>45377	Identifier	dsq
>45486	FunctionDef	Game 
>45487	ParameterList	 
>45488	ReturnType	bool
>45489	CompoundStatement	 
>45490	ReturnStatement	 
>45491	Identifier	false
>45492	IfStatement	if ( ! musicToPlay . empty ( ) )
>45493	ElseStatement	else
>45494	CompoundStatement	 
>45495	ExpressionStatement	 
>45496	CallExpression	core -> sound -> fadeMusic ( SFT_OUT , 1 )
>45497	ArgumentList	SFT_OUT
>45498	Argument	1
>45499	PrimaryExpression	1
>45500	Argument	SFT_OUT
>45501	Identifier	SFT_OUT
>45502	Callee	core -> sound -> fadeMusic
>45503	PtrMemberAccess	core -> sound -> fadeMusic
>45504	Identifier	fadeMusic
>45505	PtrMemberAccess	core -> sound
>45506	Identifier	sound
>45507	Identifier	core
>45508	CompoundStatement	 
>45509	IfStatement	if ( musicToPlay == \"none\" )
>45510	ElseStatement	else
>45511	CompoundStatement	 
>45512	IfStatement	if ( play )
>45513	CompoundStatement	 
>45514	ReturnStatement	 
>45515	CallExpression	core -> sound -> playMusic ( musicToPlay , SLT_LOOP , SFT_CROSS , 1 , SCT_ISNOTPLAYING )
>45516	ArgumentList	musicToPlay
>45517	Argument	SCT_ISNOTPLAYING
>45518	Identifier	SCT_ISNOTPLAYING
>45519	Argument	1
>45520	PrimaryExpression	1
>45521	Argument	SFT_CROSS
>45522	Identifier	SFT_CROSS
>45523	Argument	SLT_LOOP
>45524	Identifier	SLT_LOOP
>45525	Argument	musicToPlay
>45526	Identifier	musicToPlay
>45527	Callee	core -> sound -> playMusic
>45528	PtrMemberAccess	core -> sound -> playMusic
>45529	Identifier	playMusic
>45530	PtrMemberAccess	core -> sound
>45531	Identifier	sound
>45532	Identifier	core
>45533	Condition	 
>45534	Identifier	play
>45535	IdentifierDeclStatement	 
>45536	IdentifierDecl	play = true
>45537	AssignmentExpr	play = true
>45538	Identifier	true
>45539	Identifier	true
>45540	Identifier	play
>45541	IdentifierDeclType	bool
>45542	ExpressionStatement	 
>45543	CallExpression	core -> sound -> fadeMusic ( SFT_OUT , 1 )
>45544	ArgumentList	SFT_OUT
>45545	Argument	1
>45546	PrimaryExpression	1
>45547	Argument	SFT_OUT
>45548	Identifier	SFT_OUT
>45549	Callee	core -> sound -> fadeMusic
>45550	PtrMemberAccess	core -> sound -> fadeMusic
>45551	Identifier	fadeMusic
>45552	PtrMemberAccess	core -> sound
>45553	Identifier	sound
>45554	Identifier	core
>45555	Condition	 
>45556	EqualityExpression	musicToPlay == \"none\"
>45557	PrimaryExpression	\"none\"
>45558	Identifier	musicToPlay
>45559	Condition	 
>45560	UnaryOp	! musicToPlay . empty ( )
>45561	CallExpression	musicToPlay . empty ( )
>45562	ArgumentList	 
>45563	Callee	musicToPlay . empty
>45564	MemberAccess	musicToPlay . empty
>45565	Identifier	empty
>45566	Identifier	musicToPlay
>45567	UnaryOperator	!
>45568	IfStatement	if ( ! overrideMusic . empty ( ) )
>45569	CompoundStatement	 
>45570	ExpressionStatement	 
>45571	AssignmentExpr	musicToPlay = overrideMusic
>45572	Identifier	overrideMusic
>45573	Identifier	musicToPlay
>45574	Condition	 
>45575	UnaryOp	! overrideMusic . empty ( )
>45576	CallExpression	overrideMusic . empty ( )
>45577	ArgumentList	 
>45578	Callee	overrideMusic . empty
>45579	MemberAccess	overrideMusic . empty
>45580	Identifier	empty
>45581	Identifier	overrideMusic
>45582	UnaryOperator	!
>45583	IdentifierDeclStatement	 
>45584	IdentifierDecl	musicToPlay = this -> musicToPlay
>45585	AssignmentExpr	musicToPlay = this -> musicToPlay
>45586	PtrMemberAccess	this -> musicToPlay
>45587	Identifier	musicToPlay
>45588	Identifier	this
>45589	Identifier	musicToPlay
>45590	Identifier	musicToPlay
>45591	IdentifierDeclType	std 
>45615	FunctionDef	Game 
>45616	ParameterList	 
>45617	ReturnType	void
>45618	CompoundStatement	 
>45619	IfStatement	if ( dsq -> isInCutscene ( ) )
>45620	ElseStatement	else
>45621	CompoundStatement	 
>45622	IfStatement	if ( ( dsq -> saveSlotMode != SSM_NONE || dsq -> inModSelector ) && core -> isNested ( ) )
>45623	CompoundStatement	 
>45624	ExpressionStatement	 
>45625	CallExpression	core -> quitNestedMain ( )
>45626	ArgumentList	 
>45627	Callee	core -> quitNestedMain
>45628	PtrMemberAccess	core -> quitNestedMain
>45629	Identifier	quitNestedMain
>45630	Identifier	core
>45631	ExpressionStatement	 
>45632	AssignmentExpr	dsq -> selectedSaveSlot = 0
>45633	PrimaryExpression	0
>45634	PtrMemberAccess	dsq -> selectedSaveSlot
>45635	Identifier	selectedSaveSlot
>45636	Identifier	dsq
>45637	Condition	 
>45638	AndExpression	( dsq -> saveSlotMode != SSM_NONE || dsq -> inModSelector ) && core -> isNested ( )
>45639	CallExpression	core -> isNested ( )
>45640	ArgumentList	 
>45641	Callee	core -> isNested
>45642	PtrMemberAccess	core -> isNested
>45643	Identifier	isNested
>45644	Identifier	core
>45645	OrExpression	dsq -> saveSlotMode != SSM_NONE || dsq -> inModSelector
>45646	PtrMemberAccess	dsq -> inModSelector
>45647	Identifier	inModSelector
>45648	Identifier	dsq
>45649	EqualityExpression	dsq -> saveSlotMode != SSM_NONE
>45650	Identifier	SSM_NONE
>45651	PtrMemberAccess	dsq -> saveSlotMode
>45652	Identifier	saveSlotMode
>45653	Identifier	dsq
>45654	IfStatement	if ( ! paused )
>45655	ElseStatement	else
>45656	CompoundStatement	 
>45657	IfStatement	if ( autoMap )
>45658	CompoundStatement	 
>45659	IfStatement	if ( paused && autoMap -> isOn ( ) )
>45660	ExpressionStatement	 
>45661	CallExpression	autoMap -> toggle ( false )
>45662	ArgumentList	false
>45663	Argument	false
>45664	Identifier	false
>45665	Callee	autoMap -> toggle
>45666	PtrMemberAccess	autoMap -> toggle
>45667	Identifier	toggle
>45668	Identifier	autoMap
>45669	Condition	 
>45670	AndExpression	paused && autoMap -> isOn ( )
>45671	CallExpression	autoMap -> isOn ( )
>45672	ArgumentList	 
>45673	Callee	autoMap -> isOn
>45674	PtrMemberAccess	autoMap -> isOn
>45675	Identifier	isOn
>45676	Identifier	autoMap
>45677	Identifier	paused
>45678	Condition	 
>45679	Identifier	autoMap
>45680	CompoundStatement	 
>45681	IfStatement	if ( core -> getNestedMains ( ) == 1 && ! core -> isStateJumpPending ( ) )
>45682	ExpressionStatement	 
>45683	CallExpression	action ( ACTION_TOGGLEMENU , 1 )
>45684	ArgumentList	ACTION_TOGGLEMENU
>45685	Argument	1
>45686	PrimaryExpression	1
>45687	Argument	ACTION_TOGGLEMENU
>45688	Identifier	ACTION_TOGGLEMENU
>45689	Callee	action
>45690	Identifier	action
>45691	Condition	 
>45692	AndExpression	core -> getNestedMains ( ) == 1 && ! core -> isStateJumpPending ( )
>45693	UnaryOp	! core -> isStateJumpPending ( )
>45694	CallExpression	core -> isStateJumpPending ( )
>45695	ArgumentList	 
>45696	Callee	core -> isStateJumpPending
>45697	PtrMemberAccess	core -> isStateJumpPending
>45698	Identifier	isStateJumpPending
>45699	Identifier	core
>45700	UnaryOperator	!
>45701	EqualityExpression	core -> getNestedMains ( ) == 1
>45702	PrimaryExpression	1
>45703	CallExpression	core -> getNestedMains ( )
>45704	ArgumentList	 
>45705	Callee	core -> getNestedMains
>45706	PtrMemberAccess	core -> getNestedMains
>45707	Identifier	getNestedMains
>45708	Identifier	core
>45709	Condition	 
>45710	UnaryOp	! paused
>45711	Identifier	paused
>45712	UnaryOperator	!
>45713	IfStatement	if ( dsq -> game -> isInGameMenu ( ) )
>45714	CompoundStatement	 
>45715	ReturnStatement	 
>45716	IfStatement	if ( ! AquariaKeyConfig 
>45717	CompoundStatement	 
>45718	IfStatement	if ( dsq -> game -> menuOpenTimer > 0.5f )
>45719	CompoundStatement	 
>45720	IfStatement	if ( optionsMenu || keyConfigMenu )
>45721	ElseStatement	else
>45722	ExpressionStatement	 
>45723	CallExpression	action ( ACTION_TOGGLEMENU , 0 )
>45724	ArgumentList	ACTION_TOGGLEMENU
>45725	Argument	0
>45726	PrimaryExpression	0
>45727	Argument	ACTION_TOGGLEMENU
>45728	Identifier	ACTION_TOGGLEMENU
>45729	Callee	action
>45730	Identifier	action
>45731	ExpressionStatement	 
>45732	CallExpression	onOptionsCancel ( )
>45733	ArgumentList	 
>45734	Callee	onOptionsCancel
>45735	Identifier	onOptionsCancel
>45736	Condition	 
>45737	OrExpression	optionsMenu || keyConfigMenu
>45738	Identifier	keyConfigMenu
>45739	Identifier	optionsMenu
>45740	Condition	 
>45741	RelationalExpression	dsq -> game -> menuOpenTimer > 0.5f
>45742	PrimaryExpression	0.5f
>45743	PtrMemberAccess	dsq -> game -> menuOpenTimer
>45744	Identifier	menuOpenTimer
>45745	PtrMemberAccess	dsq -> game
>45746	Identifier	game
>45747	Identifier	dsq
>45748	Condition	 
>45749	UnaryOp	! AquariaKeyConfig 
>45750	Identifier	AquariaKeyConfig 
>45751	UnaryOperator	!
>45752	Condition	 
>45753	CallExpression	dsq -> game -> isInGameMenu ( )
>45754	ArgumentList	 
>45755	Callee	dsq -> game -> isInGameMenu
>45756	PtrMemberAccess	dsq -> game -> isInGameMenu
>45757	Identifier	isInGameMenu
>45758	PtrMemberAccess	dsq -> game
>45759	Identifier	game
>45760	Identifier	dsq
>45761	IfStatement	if ( dsq -> game -> worldMapRender -> isOn ( ) && ! dsq -> isNested ( ) )
>45762	CompoundStatement	 
>45763	ReturnStatement	 
>45764	ExpressionStatement	 
>45765	CallExpression	dsq -> game -> worldMapRender -> toggle ( false )
>45766	ArgumentList	false
>45767	Argument	false
>45768	Identifier	false
>45769	Callee	dsq -> game -> worldMapRender -> toggle
>45770	PtrMemberAccess	dsq -> game -> worldMapRender -> toggle
>45771	Identifier	toggle
>45772	PtrMemberAccess	dsq -> game -> worldMapRender
>45773	Identifier	worldMapRender
>45774	PtrMemberAccess	dsq -> game
>45775	Identifier	game
>45776	Identifier	dsq
>45777	Condition	 
>45778	AndExpression	dsq -> game -> worldMapRender -> isOn ( ) && ! dsq -> isNested ( )
>45779	UnaryOp	! dsq -> isNested ( )
>45780	CallExpression	dsq -> isNested ( )
>45781	ArgumentList	 
>45782	Callee	dsq -> isNested
>45783	PtrMemberAccess	dsq -> isNested
>45784	Identifier	isNested
>45785	Identifier	dsq
>45786	UnaryOperator	!
>45787	CallExpression	dsq -> game -> worldMapRender -> isOn ( )
>45788	ArgumentList	 
>45789	Callee	dsq -> game -> worldMapRender -> isOn
>45790	PtrMemberAccess	dsq -> game -> worldMapRender -> isOn
>45791	Identifier	isOn
>45792	PtrMemberAccess	dsq -> game -> worldMapRender
>45793	Identifier	worldMapRender
>45794	PtrMemberAccess	dsq -> game
>45795	Identifier	game
>45796	Identifier	dsq
>45797	IfStatement	if ( inHelpScreen )
>45798	CompoundStatement	 
>45799	ReturnStatement	 
>45800	ExpressionStatement	 
>45801	CallExpression	toggleHelpScreen ( false )
>45802	ArgumentList	false
>45803	Argument	false
>45804	Identifier	false
>45805	Callee	toggleHelpScreen
>45806	Identifier	toggleHelpScreen
>45807	Condition	 
>45808	Identifier	inHelpScreen
>45809	CompoundStatement	 
>45810	Condition	 
>45811	CallExpression	dsq -> isInCutscene ( )
>45812	ArgumentList	 
>45813	Callee	dsq -> isInCutscene
>45814	PtrMemberAccess	dsq -> isInCutscene
>45815	Identifier	isInCutscene
>45816	Identifier	dsq
>45853	FunctionDef	Game 
>45854	ParameterList	 
>45855	ReturnType	void
>45856	CompoundStatement	 
>45857	ExpressionStatement	 
>45858	CallExpression	dsq -> game -> togglePause ( false )
>45859	ArgumentList	false
>45860	Argument	false
>45861	Identifier	false
>45862	Callee	dsq -> game -> togglePause
>45863	PtrMemberAccess	dsq -> game -> togglePause
>45864	Identifier	togglePause
>45865	PtrMemberAccess	dsq -> game
>45866	Identifier	game
>45867	Identifier	dsq
>45868	ExpressionStatement	 
>45869	CallExpression	dsq -> doSaveSlotMenu ( SSM_SAVE )
>45870	ArgumentList	SSM_SAVE
>45871	Argument	SSM_SAVE
>45872	Identifier	SSM_SAVE
>45873	Callee	dsq -> doSaveSlotMenu
>45874	PtrMemberAccess	dsq -> doSaveSlotMenu
>45875	Identifier	doSaveSlotMenu
>45876	Identifier	dsq
>45877	ExpressionStatement	 
>45878	CallExpression	dsq -> game -> togglePause ( true )
>45879	ArgumentList	true
>45880	Argument	true
>45881	Identifier	true
>45882	Callee	dsq -> game -> togglePause
>45883	PtrMemberAccess	dsq -> game -> togglePause
>45884	Identifier	togglePause
>45885	PtrMemberAccess	dsq -> game
>45886	Identifier	game
>45887	Identifier	dsq
>45888	ExpressionStatement	 
>45889	CallExpression	core -> main ( 0.5 )
>45890	ArgumentList	0.5
>45891	Argument	0.5
>45892	PrimaryExpression	0.5
>45893	Callee	core -> main
>45894	PtrMemberAccess	core -> main
>45895	Identifier	main
>45896	Identifier	core
>45897	ExpressionStatement	 
>45898	CallExpression	clearControlHint ( )
>45899	ArgumentList	 
>45900	Callee	clearControlHint
>45901	Identifier	clearControlHint
>45902	ExpressionStatement	 
>45903	CallExpression	hideInGameMenu ( )
>45904	ArgumentList	 
>45905	Callee	hideInGameMenu
>45906	Identifier	hideInGameMenu
>45917	FunctionDef	Game 
>45918	ParameterList	 
>45919	ReturnType	void
>45920	CompoundStatement	 
>45924	FunctionDef	Game 
>45925	ParameterList	 
>45926	ReturnType	void
>45927	CompoundStatement	 
>45931	FunctionDef	Game 
>45932	ParameterList	 
>45933	ReturnType	void
>45934	CompoundStatement	 
>45935	ExpressionStatement	 
>45936	CallExpression	hideInGameMenu ( )
>45937	ArgumentList	 
>45938	Callee	hideInGameMenu
>45939	Identifier	hideInGameMenu
>45943	FunctionDef	Game 
>45944	ParameterList	 
>45945	ReturnType	void
>45946	CompoundStatement	 
>45950	FunctionDef	Game 
>45951	ParameterList	 
>45952	ReturnType	void
>45953	CompoundStatement	 
>45957	FunctionDef	Game 
>45958	ParameterList	 
>45959	ReturnType	void
>45960	CompoundStatement	 
>45961	ExpressionStatement	 
>45962	CallExpression	dsq -> title ( )
>45963	ArgumentList	 
>45964	Callee	dsq -> title
>45965	PtrMemberAccess	dsq -> title
>45966	Identifier	title
>45967	Identifier	dsq
>45968	ExpressionStatement	 
>45969	CallExpression	dsq -> toggleCursor ( 0 , 0.25 )
>45970	ArgumentList	0
>45971	Argument	0.25
>45972	PrimaryExpression	0.25
>45973	Argument	0
>45974	PrimaryExpression	0
>45975	Callee	dsq -> toggleCursor
>45976	PtrMemberAccess	dsq -> toggleCursor
>45977	Identifier	toggleCursor
>45978	Identifier	dsq
>45979	ExpressionStatement	 
>45980	CallExpression	dsq -> sound -> stopAllVoice ( )
>45981	ArgumentList	 
>45982	Callee	dsq -> sound -> stopAllVoice
>45983	PtrMemberAccess	dsq -> sound -> stopAllVoice
>45984	Identifier	stopAllVoice
>45985	PtrMemberAccess	dsq -> sound
>45986	Identifier	sound
>45987	Identifier	dsq
>45994	FunctionDef	Game 
>45995	ParameterList	 
>45996	ReturnType	void
>45997	CompoundStatement	 
>45998	ExpressionStatement	 
>45999	CallExpression	hideInGameMenuExitCheck ( true )
>46000	ArgumentList	true
>46001	Argument	true
>46002	Identifier	true
>46003	Callee	hideInGameMenuExitCheck
>46004	Identifier	hideInGameMenuExitCheck
>46009	FunctionDef	Game 
>46010	ParameterList	 
>46011	ReturnType	void
>46012	CompoundStatement	 
>46013	ExpressionStatement	 
>46014	CallExpression	eNo -> setFocus ( true )
>46015	ArgumentList	true
>46016	Argument	true
>46017	Identifier	true
>46018	Callee	eNo -> setFocus
>46019	PtrMemberAccess	eNo -> setFocus
>46020	Identifier	setFocus
>46021	Identifier	eNo
>46022	ExpressionStatement	 
>46023	CallExpression	eAre -> alpha . interpolateTo ( 1 , 0.2 )
>46024	ArgumentList	1
>46025	Argument	0.2
>46026	PrimaryExpression	0.2
>46027	Argument	1
>46028	PrimaryExpression	1
>46029	Callee	eAre -> alpha . interpolateTo
>46030	MemberAccess	eAre -> alpha . interpolateTo
>46031	Identifier	interpolateTo
>46032	PtrMemberAccess	eAre -> alpha
>46033	Identifier	alpha
>46034	Identifier	eAre
>46035	ExpressionStatement	 
>46036	CallExpression	eNo -> alpha . interpolateTo ( 1 , 0.2 )
>46037	ArgumentList	1
>46038	Argument	0.2
>46039	PrimaryExpression	0.2
>46040	Argument	1
>46041	PrimaryExpression	1
>46042	Callee	eNo -> alpha . interpolateTo
>46043	MemberAccess	eNo -> alpha . interpolateTo
>46044	Identifier	interpolateTo
>46045	PtrMemberAccess	eNo -> alpha
>46046	Identifier	alpha
>46047	Identifier	eNo
>46048	ExpressionStatement	 
>46049	CallExpression	eYes -> alpha . interpolateTo ( 1 , 0.2 )
>46050	ArgumentList	1
>46051	Argument	0.2
>46052	PrimaryExpression	0.2
>46053	Argument	1
>46054	PrimaryExpression	1
>46055	Callee	eYes -> alpha . interpolateTo
>46056	MemberAccess	eYes -> alpha . interpolateTo
>46057	Identifier	interpolateTo
>46058	PtrMemberAccess	eYes -> alpha
>46059	Identifier	alpha
>46060	Identifier	eYes
>46061	ExpressionStatement	 
>46062	AssignmentExpr	inGameMenuExitState = 1
>46063	PrimaryExpression	1
>46064	Identifier	inGameMenuExitState
>46065	ExpressionStatement	 
>46066	CallExpression	recipeMenu . toggle ( false )
>46067	ArgumentList	false
>46068	Argument	false
>46069	Identifier	false
>46070	Callee	recipeMenu . toggle
>46071	MemberAccess	recipeMenu . toggle
>46072	Identifier	toggle
>46073	Identifier	recipeMenu
>46090	FunctionDef	Game 
>46091	ParameterList	bool refocus
>46092	Parameter	 
>46093	Identifier	refocus
>46094	ParameterType	bool
>46095	ReturnType	void
>46096	CompoundStatement	 
>46097	IfStatement	if ( refocus )
>46098	ExpressionStatement	 
>46099	CallExpression	( ( AquariaMenuItem * ) menu [ 1 ] ) -> setFocus ( true )
>46100	ArgumentList	true
>46101	Argument	true
>46102	Identifier	true
>46103	Callee	( ( AquariaMenuItem * ) menu [ 1 ] ) -> setFocus
>46104	PtrMemberAccess	( ( AquariaMenuItem * ) menu [ 1 ] ) -> setFocus
>46105	Identifier	setFocus
>46106	CastExpression	( AquariaMenuItem * ) menu [ 1 ]
>46107	ArrayIndexing	menu [ 1 ]
>46108	PrimaryExpression	1
>46109	Identifier	menu
>46110	CastTarget	AquariaMenuItem *
>46111	Condition	 
>46112	Identifier	refocus
>46113	ExpressionStatement	 
>46114	CallExpression	eAre -> alpha . interpolateTo ( 0 , 0.2 )
>46115	ArgumentList	0
>46116	Argument	0.2
>46117	PrimaryExpression	0.2
>46118	Argument	0
>46119	PrimaryExpression	0
>46120	Callee	eAre -> alpha . interpolateTo
>46121	MemberAccess	eAre -> alpha . interpolateTo
>46122	Identifier	interpolateTo
>46123	PtrMemberAccess	eAre -> alpha
>46124	Identifier	alpha
>46125	Identifier	eAre
>46126	ExpressionStatement	 
>46127	CallExpression	eNo -> alpha . interpolateTo ( 0 , 0.2 )
>46128	ArgumentList	0
>46129	Argument	0.2
>46130	PrimaryExpression	0.2
>46131	Argument	0
>46132	PrimaryExpression	0
>46133	Callee	eNo -> alpha . interpolateTo
>46134	MemberAccess	eNo -> alpha . interpolateTo
>46135	Identifier	interpolateTo
>46136	PtrMemberAccess	eNo -> alpha
>46137	Identifier	alpha
>46138	Identifier	eNo
>46139	ExpressionStatement	 
>46140	CallExpression	eYes -> alpha . interpolateTo ( 0 , 0.2 )
>46141	ArgumentList	0
>46142	Argument	0.2
>46143	PrimaryExpression	0.2
>46144	Argument	0
>46145	PrimaryExpression	0
>46146	Callee	eYes -> alpha . interpolateTo
>46147	MemberAccess	eYes -> alpha . interpolateTo
>46148	Identifier	interpolateTo
>46149	PtrMemberAccess	eYes -> alpha
>46150	Identifier	alpha
>46151	Identifier	eYes
>46152	ExpressionStatement	 
>46153	AssignmentExpr	inGameMenuExitState = 0
>46154	PrimaryExpression	0
>46155	Identifier	inGameMenuExitState
>46173	FunctionDef	Game 
>46174	ParameterList	 
>46175	ReturnType	void
>46176	CompoundStatement	 
>46177	IfStatement	if ( ! dsq -> user . demo . warpKeys || ( core -> getCtrlState ( ) && core -> getAltState ( ) ) )
>46178	CompoundStatement	 
>46179	IfStatement	if ( inGameMenuExitState == 0 )
>46180	CompoundStatement	 
>46181	ExpressionStatement	 
>46182	CallExpression	showInGameMenuExitCheck ( )
>46183	ArgumentList	 
>46184	Callee	showInGameMenuExitCheck
>46185	Identifier	showInGameMenuExitCheck
>46186	Condition	 
>46187	EqualityExpression	inGameMenuExitState == 0
>46188	PrimaryExpression	0
>46189	Identifier	inGameMenuExitState
>46190	Condition	 
>46191	OrExpression	! dsq -> user . demo . warpKeys || ( core -> getCtrlState ( ) && core -> getAltState ( ) )
>46192	AndExpression	core -> getCtrlState ( ) && core -> getAltState ( )
>46193	CallExpression	core -> getAltState ( )
>46194	ArgumentList	 
>46195	Callee	core -> getAltState
>46196	PtrMemberAccess	core -> getAltState
>46197	Identifier	getAltState
>46198	Identifier	core
>46199	CallExpression	core -> getCtrlState ( )
>46200	ArgumentList	 
>46201	Callee	core -> getCtrlState
>46202	PtrMemberAccess	core -> getCtrlState
>46203	Identifier	getCtrlState
>46204	Identifier	core
>46205	UnaryOp	! dsq -> user . demo . warpKeys
>46206	MemberAccess	dsq -> user . demo . warpKeys
>46207	Identifier	warpKeys
>46208	MemberAccess	dsq -> user . demo
>46209	Identifier	demo
>46210	PtrMemberAccess	dsq -> user
>46211	Identifier	user
>46212	Identifier	dsq
>46213	UnaryOperator	!
>46227	FunctionDef	Game 
>46228	ParameterList	bool on
>46229	Parameter	 
>46230	Identifier	on
>46231	ParameterType	bool
>46232	ReturnType	void
>46233	CompoundStatement	 
>46234	IfStatement	if ( on )
>46235	ElseStatement	else
>46236	ExpressionStatement	 
>46237	AssignmentExpr	damageSprite -> alphaMod = 0
>46238	PrimaryExpression	0
>46239	PtrMemberAccess	damageSprite -> alphaMod
>46240	Identifier	alphaMod
>46241	Identifier	damageSprite
>46242	CompoundStatement	 
>46243	ExpressionStatement	 
>46244	AssignmentExpr	damageSprite -> alphaMod = 1
>46245	PrimaryExpression	1
>46246	PtrMemberAccess	damageSprite -> alphaMod
>46247	Identifier	alphaMod
>46248	Identifier	damageSprite
>46249	Condition	 
>46250	Identifier	on
>46258	FunctionDef	Game 
>46259	ParameterList	bool v
>46260	Parameter	 
>46261	Identifier	v
>46262	ParameterType	bool
>46263	ReturnType	void
>46264	CompoundStatement	 
>46265	IfStatement	if ( paused )
>46266	CompoundStatement	 
>46267	ExpressionStatement	 
>46268	AssignmentExpr	dsq -> cursorBlinker -> alpha = 0
>46269	PrimaryExpression	0
>46270	PtrMemberAccess	dsq -> cursorBlinker -> alpha
>46271	Identifier	alpha
>46272	PtrMemberAccess	dsq -> cursorBlinker
>46273	Identifier	cursorBlinker
>46274	Identifier	dsq
>46275	ExpressionStatement	 
>46276	AssignmentExpr	dsq -> cursorGlow -> alpha = 0
>46277	PrimaryExpression	0
>46278	PtrMemberAccess	dsq -> cursorGlow -> alpha
>46279	Identifier	alpha
>46280	PtrMemberAccess	dsq -> cursorGlow
>46281	Identifier	cursorGlow
>46282	Identifier	dsq
>46283	Condition	 
>46284	Identifier	paused
>46285	ExpressionStatement	 
>46286	AssignmentExpr	paused = v
>46287	Identifier	v
>46288	Identifier	paused
>46303	FunctionDef	Game 
>46304	ParameterList	 
>46305	ReturnType	bool
>46306	CompoundStatement	 
>46307	ReturnStatement	 
>46308	Identifier	paused
>46313	FunctionDef	Game 
>46314	ParameterList	bool wallJump
>46315	Parameter	 
>46316	Identifier	wallJump
>46317	ParameterType	bool
>46318	ReturnType	void
>46319	CompoundStatement	 
>46320	IfStatement	if ( chance ( 50 ) )
>46321	CompoundStatement	 
>46322	SwitchStatement	switch ( dsq -> continuity . form )
>46323	CompoundStatement	 
>46324	BreakStatement	 
>46325	ExpressionStatement	 
>46326	CallExpression	sound -> playSfx ( \"BeastBurst\" , ( 128 + rand ( ) % 64 ) / 256.0f )
>46327	ArgumentList	\"BeastBurst\"
>46328	Argument	( 128 + rand ( ) % 64 ) / 256.0f
>46329	MultiplicativeExpression	( 128 + rand ( ) % 64 ) / 256.0f
>46330	PrimaryExpression	256.0f
>46331	AdditiveExpression	128 + rand ( ) % 64
>46332	MultiplicativeExpression	rand ( ) % 64
>46333	PrimaryExpression	64
>46334	CallExpression	rand ( )
>46335	ArgumentList	 
>46336	Callee	rand
>46337	Identifier	rand
>46338	PrimaryExpression	128
>46339	Argument	\"BeastBurst\"
>46340	PrimaryExpression	\"BeastBurst\"
>46341	Callee	sound -> playSfx
>46342	PtrMemberAccess	sound -> playSfx
>46343	Identifier	playSfx
>46344	Identifier	sound
>46345	Label	 
>46346	Identifier	FORM_BEAST
>46347	Condition	 
>46348	MemberAccess	dsq -> continuity . form
>46349	Identifier	form
>46350	PtrMemberAccess	dsq -> continuity
>46351	Identifier	continuity
>46352	Identifier	dsq
>46353	Condition	 
>46354	CallExpression	chance ( 50 )
>46355	ArgumentList	50
>46356	Argument	50
>46357	PrimaryExpression	50
>46358	Callee	chance
>46359	Identifier	chance
>46360	ExpressionStatement	 
>46361	CallExpression	sound -> playSfx ( \"Burst\" , 1 )
>46362	ArgumentList	\"Burst\"
>46363	Argument	1
>46364	PrimaryExpression	1
>46365	Argument	\"Burst\"
>46366	PrimaryExpression	\"Burst\"
>46367	Callee	sound -> playSfx
>46368	PtrMemberAccess	sound -> playSfx
>46369	Identifier	playSfx
>46370	Identifier	sound
>46371	IfStatement	if ( wallJump )
>46372	ExpressionStatement	 
>46373	AssignmentExpr	freqBase += 100
>46374	PrimaryExpression	100
>46375	Identifier	freqBase
>46376	Condition	 
>46377	Identifier	wallJump
>46378	IdentifierDeclStatement	 
>46379	IdentifierDecl	freqBase = 950
>46380	AssignmentExpr	freqBase = 950
>46381	PrimaryExpression	950
>46382	Identifier	freqBase
>46383	Identifier	freqBase
>46384	IdentifierDeclType	int
>46397	FunctionDef	Game 
>46398	ParameterList	Entity * a , Entity * b
>46399	Parameter	 
>46400	Identifier	b
>46401	ParameterType	Entity *
>46402	Parameter	 
>46403	Identifier	a
>46404	ParameterType	Entity *
>46405	ReturnType	bool
>46406	CompoundStatement	 
>46407	ReturnStatement	 
>46408	CallExpression	( a -> position - b -> position ) . isLength2DIn ( a -> collideRadius + b -> collideRadius )
>46409	ArgumentList	a -> collideRadius + b -> collideRadius
>46410	Argument	a -> collideRadius + b -> collideRadius
>46411	AdditiveExpression	a -> collideRadius + b -> collideRadius
>46412	PtrMemberAccess	b -> collideRadius
>46413	Identifier	collideRadius
>46414	Identifier	b
>46415	PtrMemberAccess	a -> collideRadius
>46416	Identifier	collideRadius
>46417	Identifier	a
>46418	Callee	( a -> position - b -> position ) . isLength2DIn
>46419	MemberAccess	( a -> position - b -> position ) . isLength2DIn
>46420	Identifier	isLength2DIn
>46421	AdditiveExpression	a -> position - b -> position
>46422	PtrMemberAccess	b -> position
>46423	Identifier	position
>46424	Identifier	b
>46425	PtrMemberAccess	a -> position
>46426	Identifier	position
>46427	Identifier	a
>46440	FunctionDef	Game 
>46441	ParameterList	Entity * a , int num , const Vector & pos2 , float radius , float perc , int * colSegment
>46442	Parameter	 
>46443	Identifier	colSegment
>46444	ParameterType	int *
>46445	Parameter	 
>46446	Identifier	perc
>46447	ParameterType	float
>46448	Parameter	 
>46449	Identifier	radius
>46450	ParameterType	float
>46451	Parameter	 
>46452	Identifier	pos2
>46453	ParameterType	const Vector &
>46454	Parameter	 
>46455	Identifier	num
>46456	ParameterType	int
>46457	Parameter	 
>46458	Identifier	a
>46459	ParameterType	Entity *
>46460	ReturnType	bool
>46461	CompoundStatement	 
>46462	ReturnStatement	 
>46463	Identifier	c
>46464	IfStatement	if ( a && a -> hair )
>46465	CompoundStatement	 
>46466	ForStatement	for ( int i = 0 ; i < num ; i ++ )
>46467	CompoundStatement	 
>46468	IfStatement	if ( c )
>46469	CompoundStatement	 
>46470	ReturnStatement	 
>46471	Identifier	true
>46472	IfStatement	if ( colSegment )
>46473	ExpressionStatement	 
>46474	AssignmentExpr	* colSegment = i
>46475	Identifier	i
>46476	UnaryOp	* colSegment
>46477	Identifier	colSegment
>46478	UnaryOperator	*
>46479	Condition	 
>46480	Identifier	colSegment
>46481	Condition	 
>46482	Identifier	c
>46483	ExpressionStatement	 
>46484	AssignmentExpr	c = ( ( a -> hair -> hairNodes [ i ] . position ) - pos2 ) . isLength2DIn ( a -> hair -> hairWidth * \
>46485	CallExpression	( ( a -> hair -> hairNodes [ i ] . position ) - pos2 ) . isLength2DIn ( a -> hair -> hairWidth * perc + radius )
>46486	ArgumentList	a -> hair -> hairWidth * perc + radius
>46487	Argument	a -> hair -> hairWidth * perc + radius
>46488	AdditiveExpression	a -> hair -> hairWidth * perc + radius
>46489	Identifier	radius
>46490	MultiplicativeExpression	a -> hair -> hairWidth * perc
>46491	Identifier	perc
>46492	PtrMemberAccess	a -> hair -> hairWidth
>46493	Identifier	hairWidth
>46494	PtrMemberAccess	a -> hair
>46495	Identifier	hair
>46496	Identifier	a
>46497	Callee	( ( a -> hair -> hairNodes [ i ] . position ) - pos2 ) . isLength2DIn
>46498	MemberAccess	( ( a -> hair -> hairNodes [ i ] . position ) - pos2 ) . isLength2DIn
>46499	Identifier	isLength2DIn
>46500	AdditiveExpression	( a -> hair -> hairNodes [ i ] . position ) - pos2
>46501	Identifier	pos2
>46502	MemberAccess	a -> hair -> hairNodes [ i ] . position
>46503	Identifier	position
>46504	ArrayIndexing	a -> hair -> hairNodes [ i ]
>46505	Identifier	i
>46506	PtrMemberAccess	a -> hair -> hairNodes
>46507	Identifier	hairNodes
>46508	PtrMemberAccess	a -> hair
>46509	Identifier	hair
>46510	Identifier	a
>46511	Identifier	c
>46512	IncDecOp	 
>46513	IncDec	++
>46514	Identifier	i
>46515	Condition	 
>46516	RelationalExpression	i < num
>46517	Identifier	num
>46518	Identifier	i
>46519	ForInit	 
>46520	IdentifierDeclStatement	int i = 0 ;
>46521	IdentifierDecl	i = 0
>46522	AssignmentExpr	i = 0
>46523	PrimaryExpression	0
>46524	Identifier	i
>46525	Identifier	i
>46526	IdentifierDeclType	int
>46527	IfStatement	if ( num == 0 )
>46528	ExpressionStatement	 
>46529	AssignmentExpr	num = a -> hair -> hairNodes . size ( )
>46530	CallExpression	a -> hair -> hairNodes . size ( )
>46531	ArgumentList	 
>46532	Callee	a -> hair -> hairNodes . size
>46533	MemberAccess	a -> hair -> hairNodes . size
>46534	Identifier	size
>46535	PtrMemberAccess	a -> hair -> hairNodes
>46536	Identifier	hairNodes
>46537	PtrMemberAccess	a -> hair
>46538	Identifier	hair
>46539	Identifier	a
>46540	Identifier	num
>46541	Condition	 
>46542	EqualityExpression	num == 0
>46543	PrimaryExpression	0
>46544	Identifier	num
>46545	Condition	 
>46546	AndExpression	a && a -> hair
>46547	PtrMemberAccess	a -> hair
>46548	Identifier	hair
>46549	Identifier	a
>46550	Identifier	a
>46551	IdentifierDeclStatement	 
>46552	IdentifierDecl	c = false
>46553	AssignmentExpr	c = false
>46554	Identifier	false
>46555	Identifier	false
>46556	Identifier	c
>46557	IdentifierDeclType	bool
>46558	IfStatement	if ( perc == 0 )
>46559	ExpressionStatement	 
>46560	AssignmentExpr	perc = 1
>46561	PrimaryExpression	1
>46562	Identifier	perc
>46563	Condition	 
>46564	EqualityExpression	perc == 0
>46565	PrimaryExpression	0
>46566	Identifier	perc
>46594	FunctionDef	Game 
>46595	ParameterList	Entity * skeletal , RenderObject * circle
>46596	Parameter	 
>46597	Identifier	circle
>46598	ParameterType	RenderObject *
>46599	Parameter	 
>46600	Identifier	skeletal
>46601	ParameterType	Entity *
>46602	ReturnType	Bone *
>46603	CompoundStatement	 
>46604	ReturnStatement	 
>46605	CallExpression	collideSkeletalVsCircle ( skeletal , circle -> position , circle -> collideRadius )
>46606	ArgumentList	skeletal
>46607	Argument	circle -> collideRadius
>46608	PtrMemberAccess	circle -> collideRadius
>46609	Identifier	collideRadius
>46610	Identifier	circle
>46611	Argument	circle -> position
>46612	PtrMemberAccess	circle -> position
>46613	Identifier	position
>46614	Identifier	circle
>46615	Argument	skeletal
>46616	Identifier	skeletal
>46617	Callee	collideSkeletalVsCircle
>46618	Identifier	collideSkeletalVsCircle
>46628	FunctionDef	Game 
>46629	ParameterList	Entity * skeletal , Vector start , Vector end , float radius
>46630	Parameter	 
>46631	Identifier	radius
>46632	ParameterType	float
>46633	Parameter	 
>46634	Identifier	end
>46635	ParameterType	Vector
>46636	Parameter	 
>46637	Identifier	start
>46638	ParameterType	Vector
>46639	Parameter	 
>46640	Identifier	skeletal
>46641	ParameterType	Entity *
>46642	ReturnType	Bone *
>46643	CompoundStatement	 
>46644	ReturnStatement	 
>46645	Identifier	closest
>46646	ForStatement	for ( int i = 0 ; i < skeletal -> skeletalSprite . bones . size ( ) ; i ++ )
>46647	CompoundStatement	 
>46648	IfStatement	if ( closest != 0 )
>46649	CompoundStatement	 
>46650	BreakStatement	 
>46651	Condition	 
>46652	EqualityExpression	closest != 0
>46653	PrimaryExpression	0
>46654	Identifier	closest
>46655	IfStatement	if ( ! b -> collisionMask . empty ( ) && b -> alpha . x == 1 && b -> renderQuad )
>46656	CompoundStatement	 
>46657	ForStatement	for ( int i = 0 ; i < b -> transformedCollisionMask . size ( ) ; i ++ )
>46658	CompoundStatement	 
>46659	IfStatement	if ( isTouchingLine ( start , end , b -> transformedCollisionMask [ i ] , radius + b -> collideRadius ) )
>46660	CompoundStatement	 
>46661	BreakStatement	 
>46662	ExpressionStatement	 
>46663	AssignmentExpr	closest = b
>46664	Identifier	b
>46665	Identifier	closest
>46666	Condition	 
>46667	CallExpression	isTouchingLine ( start , end , b -> transformedCollisionMask [ i ] , radius + b -> collideRadius )
>46668	ArgumentList	start
>46669	Argument	radius + b -> collideRadius
>46670	AdditiveExpression	radius + b -> collideRadius
>46671	PtrMemberAccess	b -> collideRadius
>46672	Identifier	collideRadius
>46673	Identifier	b
>46674	Identifier	radius
>46675	Argument	b -> transformedCollisionMask [ i ]
>46676	ArrayIndexing	b -> transformedCollisionMask [ i ]
>46677	Identifier	i
>46678	PtrMemberAccess	b -> transformedCollisionMask
>46679	Identifier	transformedCollisionMask
>46680	Identifier	b
>46681	Argument	end
>46682	Identifier	end
>46683	Argument	start
>46684	Identifier	start
>46685	Callee	isTouchingLine
>46686	Identifier	isTouchingLine
>46687	IncDecOp	 
>46688	IncDec	++
>46689	Identifier	i
>46690	Condition	 
>46691	RelationalExpression	i < b -> transformedCollisionMask . size ( )
>46692	CallExpression	b -> transformedCollisionMask . size ( )
>46693	ArgumentList	 
>46694	Callee	b -> transformedCollisionMask . size
>46695	MemberAccess	b -> transformedCollisionMask . size
>46696	Identifier	size
>46697	PtrMemberAccess	b -> transformedCollisionMask
>46698	Identifier	transformedCollisionMask
>46699	Identifier	b
>46700	Identifier	i
>46701	ForInit	 
>46702	IdentifierDeclStatement	int i = 0 ;
>46703	IdentifierDecl	i = 0
>46704	AssignmentExpr	i = 0
>46705	PrimaryExpression	0
>46706	Identifier	i
>46707	Identifier	i
>46708	IdentifierDeclType	int
>46709	Condition	 
>46710	AndExpression	! b -> collisionMask . empty ( ) && b -> alpha . x == 1 && b -> renderQuad
>46711	AndExpression	b -> alpha . x == 1 && b -> renderQuad
>46712	PtrMemberAccess	b -> renderQuad
>46713	Identifier	renderQuad
>46714	Identifier	b
>46715	EqualityExpression	b -> alpha . x == 1
>46716	PrimaryExpression	1
>46717	MemberAccess	b -> alpha . x
>46718	Identifier	x
>46719	PtrMemberAccess	b -> alpha
>46720	Identifier	alpha
>46721	Identifier	b
>46722	UnaryOp	! b -> collisionMask . empty ( )
>46723	CallExpression	b -> collisionMask . empty ( )
>46724	ArgumentList	 
>46725	Callee	b -> collisionMask . empty
>46726	MemberAccess	b -> collisionMask . empty
>46727	Identifier	empty
>46728	PtrMemberAccess	b -> collisionMask
>46729	Identifier	collisionMask
>46730	Identifier	b
>46731	UnaryOperator	!
>46732	IdentifierDeclStatement	 
>46733	IdentifierDecl	* b = skeletal -> skeletalSprite . bones [ i ]
>46734	AssignmentExpr	* b = skeletal -> skeletalSprite . bones [ i ]
>46735	ArrayIndexing	skeletal -> skeletalSprite . bones [ i ]
>46736	Identifier	i
>46737	MemberAccess	skeletal -> skeletalSprite . bones
>46738	Identifier	bones
>46739	PtrMemberAccess	skeletal -> skeletalSprite
>46740	Identifier	skeletalSprite
>46741	Identifier	skeletal
>46742	Identifier	b
>46743	Identifier	b
>46744	IdentifierDeclType	Bone *
>46745	IncDecOp	 
>46746	IncDec	++
>46747	Identifier	i
>46748	Condition	 
>46749	RelationalExpression	i < skeletal -> skeletalSprite . bones . size ( )
>46750	CallExpression	skeletal -> skeletalSprite . bones . size ( )
>46751	ArgumentList	 
>46752	Callee	skeletal -> skeletalSprite . bones . size
>46753	MemberAccess	skeletal -> skeletalSprite . bones . size
>46754	Identifier	size
>46755	MemberAccess	skeletal -> skeletalSprite . bones
>46756	Identifier	bones
>46757	PtrMemberAccess	skeletal -> skeletalSprite
>46758	Identifier	skeletalSprite
>46759	Identifier	skeletal
>46760	Identifier	i
>46761	ForInit	 
>46762	IdentifierDeclStatement	int i = 0 ;
>46763	IdentifierDecl	i = 0
>46764	AssignmentExpr	i = 0
>46765	PrimaryExpression	0
>46766	Identifier	i
>46767	Identifier	i
>46768	IdentifierDeclType	int
>46769	IdentifierDeclStatement	 
>46770	IdentifierDecl	* closest = 0
>46771	AssignmentExpr	* closest = 0
>46772	PrimaryExpression	0
>46773	Identifier	closest
>46774	Identifier	closest
>46775	IdentifierDeclType	Bone *
>46806	FunctionDef	Game 
>46807	ParameterList	RenderObject * r , Vector start , Vector end , float radius
>46808	Parameter	 
>46809	Identifier	radius
>46810	ParameterType	float
>46811	Parameter	 
>46812	Identifier	end
>46813	ParameterType	Vector
>46814	Parameter	 
>46815	Identifier	start
>46816	ParameterType	Vector
>46817	Parameter	 
>46818	Identifier	r
>46819	ParameterType	RenderObject *
>46820	ReturnType	bool
>46821	CompoundStatement	 
>46822	ReturnStatement	 
>46823	Identifier	collision
>46824	IfStatement	if ( isTouchingLine ( start , end , r -> position , radius + r -> collideRadius , & lastCollidePosition ) )
>46825	CompoundStatement	 
>46826	ExpressionStatement	 
>46827	AssignmentExpr	collision = true
>46828	Identifier	true
>46829	Identifier	collision
>46830	Condition	 
>46831	CallExpression	isTouchingLine ( start , end , r -> position , radius + r -> collideRadius , & lastCollidePosition )
>46832	ArgumentList	start
>46833	Argument	& lastCollidePosition
>46834	UnaryOp	& lastCollidePosition
>46835	Identifier	lastCollidePosition
>46836	UnaryOperator	&
>46837	Argument	radius + r -> collideRadius
>46838	AdditiveExpression	radius + r -> collideRadius
>46839	PtrMemberAccess	r -> collideRadius
>46840	Identifier	collideRadius
>46841	Identifier	r
>46842	Identifier	radius
>46843	Argument	r -> position
>46844	PtrMemberAccess	r -> position
>46845	Identifier	position
>46846	Identifier	r
>46847	Argument	end
>46848	Identifier	end
>46849	Argument	start
>46850	Identifier	start
>46851	Callee	isTouchingLine
>46852	Identifier	isTouchingLine
>46853	IdentifierDeclStatement	 
>46854	IdentifierDecl	collision = false
>46855	AssignmentExpr	collision = false
>46856	Identifier	false
>46857	Identifier	false
>46858	Identifier	collision
>46859	IdentifierDeclType	bool
>46875	FunctionDef	Game 
>46876	ParameterList	RenderObject * r , float angle , float startLen , float endLen , float radius , Vector basePos
>46877	Parameter	 
>46878	Identifier	basePos
>46879	ParameterType	Vector
>46880	Parameter	 
>46881	Identifier	radius
>46882	ParameterType	float
>46883	Parameter	 
>46884	Identifier	endLen
>46885	ParameterType	float
>46886	Parameter	 
>46887	Identifier	startLen
>46888	ParameterType	float
>46889	Parameter	 
>46890	Identifier	angle
>46891	ParameterType	float
>46892	Parameter	 
>46893	Identifier	r
>46894	ParameterType	RenderObject *
>46895	ReturnType	bool
>46896	CompoundStatement	 
>46897	ReturnStatement	 
>46898	Identifier	collision
>46899	IfStatement	if ( shapeDebug )
>46900	CompoundStatement	 
>46901	ExpressionStatement	 
>46902	AssignmentExpr	shapeDebug -> position = end
>46903	Identifier	end
>46904	PtrMemberAccess	shapeDebug -> position
>46905	Identifier	position
>46906	Identifier	shapeDebug
>46907	Condition	 
>46908	Identifier	shapeDebug
>46909	IfStatement	if ( isTouchingLine ( start , end , r -> position , radius + r -> collideRadius , & lastCollidePosition ) )
>46910	CompoundStatement	 
>46911	ExpressionStatement	 
>46912	AssignmentExpr	collision = true
>46913	Identifier	true
>46914	Identifier	collision
>46915	Condition	 
>46916	CallExpression	isTouchingLine ( start , end , r -> position , radius + r -> collideRadius , & lastCollidePosition )
>46917	ArgumentList	start
>46918	Argument	& lastCollidePosition
>46919	UnaryOp	& lastCollidePosition
>46920	Identifier	lastCollidePosition
>46921	UnaryOperator	&
>46922	Argument	radius + r -> collideRadius
>46923	AdditiveExpression	radius + r -> collideRadius
>46924	PtrMemberAccess	r -> collideRadius
>46925	Identifier	collideRadius
>46926	Identifier	r
>46927	Identifier	radius
>46928	Argument	r -> position
>46929	PtrMemberAccess	r -> position
>46930	Identifier	position
>46931	Identifier	r
>46932	Argument	end
>46933	Identifier	end
>46934	Argument	start
>46935	Identifier	start
>46936	Callee	isTouchingLine
>46937	Identifier	isTouchingLine
>46938	IdentifierDeclStatement	 
>46939	IdentifierDecl	end = Vector ( sinv , cosv ) * endLen + basePos
>46940	AssignmentExpr	end = Vector ( sinv , cosv ) * endLen + basePos
>46941	AdditiveExpression	Vector ( sinv , cosv ) * endLen + basePos
>46942	Identifier	basePos
>46943	MultiplicativeExpression	Vector ( sinv , cosv ) * endLen
>46944	Identifier	endLen
>46945	CallExpression	Vector ( sinv , cosv )
>46946	ArgumentList	sinv
>46947	Argument	cosv
>46948	Identifier	cosv
>46949	Argument	sinv
>46950	Identifier	sinv
>46951	Callee	Vector
>46952	Identifier	Vector
>46953	Identifier	end
>46954	Identifier	end
>46955	IdentifierDeclType	Vector
>46956	IdentifierDeclStatement	 
>46957	IdentifierDecl	start = Vector ( sinv , cosv ) * startLen + basePos
>46958	AssignmentExpr	start = Vector ( sinv , cosv ) * startLen + basePos
>46959	AdditiveExpression	Vector ( sinv , cosv ) * startLen + basePos
>46960	Identifier	basePos
>46961	MultiplicativeExpression	Vector ( sinv , cosv ) * startLen
>46962	Identifier	startLen
>46963	CallExpression	Vector ( sinv , cosv )
>46964	ArgumentList	sinv
>46965	Argument	cosv
>46966	Identifier	cosv
>46967	Argument	sinv
>46968	Identifier	sinv
>46969	Callee	Vector
>46970	Identifier	Vector
>46971	Identifier	start
>46972	Identifier	start
>46973	IdentifierDeclType	Vector
>46974	IdentifierDeclStatement	 
>46975	IdentifierDecl	cosv = cosf ( rads )
>46976	AssignmentExpr	cosv = cosf ( rads )
>46977	CallExpression	cosf ( rads )
>46978	ArgumentList	rads
>46979	Argument	rads
>46980	Identifier	rads
>46981	Callee	cosf
>46982	Identifier	cosf
>46983	Identifier	cosv
>46984	Identifier	cosv
>46985	IdentifierDeclType	float
>46986	IdentifierDeclStatement	 
>46987	IdentifierDecl	sinv = sinf ( rads )
>46988	AssignmentExpr	sinv = sinf ( rads )
>46989	CallExpression	sinf ( rads )
>46990	ArgumentList	rads
>46991	Argument	rads
>46992	Identifier	rads
>46993	Callee	sinf
>46994	Identifier	sinf
>46995	Identifier	sinv
>46996	Identifier	sinv
>46997	IdentifierDeclType	float
>46998	IdentifierDeclStatement	 
>46999	IdentifierDecl	rads = MathFunctions 
>47000	AssignmentExpr	rads = MathFunctions 
>47001	CallExpression	MathFunctions 
>47002	ArgumentList	angle
>47003	Argument	angle
>47004	Identifier	angle
>47005	Callee	MathFunctions 
>47006	Identifier	MathFunctions 
>47007	Identifier	rads
>47008	Identifier	rads
>47009	IdentifierDeclType	float
>47010	IdentifierDeclStatement	 
>47011	IdentifierDecl	collision = false
>47012	AssignmentExpr	collision = false
>47013	Identifier	false
>47014	Identifier	false
>47015	Identifier	collision
>47016	IdentifierDeclType	bool
>47046	FunctionDef	Game 
>47047	ParameterList	Entity * skeletal , Vector pos , float radius
>47048	Parameter	 
>47049	Identifier	radius
>47050	ParameterType	float
>47051	Parameter	 
>47052	Identifier	pos
>47053	ParameterType	Vector
>47054	Parameter	 
>47055	Identifier	skeletal
>47056	ParameterType	Entity *
>47057	ReturnType	Bone *
>47058	CompoundStatement	 
>47059	ReturnStatement	 
>47060	Identifier	closest
>47061	ForStatement	for ( int i = 0 ; i < skeletal -> skeletalSprite . bones . size ( ) ; i ++ )
>47062	CompoundStatement	 
>47063	IfStatement	if ( b -> alpha . x == 1 && b -> renderQuad )
>47064	CompoundStatement	 
>47065	IfStatement	if ( ! b -> collisionRects . empty ( ) )
>47066	ElseStatement	else
>47067	IfStatement	if ( ! b -> collisionMask . empty ( ) )
>47068	ElseStatement	else
>47069	IfStatement	if ( b -> collideRadius )
>47070	CompoundStatement	 
>47071	IfStatement	if ( dist < sqr ( radius + b -> collideRadius ) )
>47072	CompoundStatement	 
>47073	IfStatement	if ( dist < smallestDist )
>47074	CompoundStatement	 
>47075	ExpressionStatement	 
>47076	AssignmentExpr	smallestDist = dist
>47077	Identifier	dist
>47078	Identifier	smallestDist
>47079	ExpressionStatement	 
>47080	AssignmentExpr	closest = b
>47081	Identifier	b
>47082	Identifier	closest
>47083	Condition	 
>47084	RelationalExpression	dist < smallestDist
>47085	Identifier	smallestDist
>47086	Identifier	dist
>47087	Condition	 
>47088	RelationalExpression	dist < sqr ( radius + b -> collideRadius )
>47089	CallExpression	sqr ( radius + b -> collideRadius )
>47090	ArgumentList	radius + b -> collideRadius
>47091	Argument	radius + b -> collideRadius
>47092	AdditiveExpression	radius + b -> collideRadius
>47093	PtrMemberAccess	b -> collideRadius
>47094	Identifier	collideRadius
>47095	Identifier	b
>47096	Identifier	radius
>47097	Callee	sqr
>47098	Identifier	sqr
>47099	Identifier	dist
>47100	Condition	 
>47101	PtrMemberAccess	b -> collideRadius
>47102	Identifier	collideRadius
>47103	Identifier	b
>47104	CompoundStatement	 
>47105	IfStatement	if ( dist < checkRadius )
>47106	CompoundStatement	 
>47107	ForStatement	for ( int i = 0 ; i < b -> transformedCollisionMask . size ( ) ; i ++ )
>47108	CompoundStatement	 
>47109	IfStatement	if ( ( b -> transformedCollisionMask [ i ] - pos ) . isLength2DIn ( radius + b -> collideRadius * skeletal -> scale \
>47110	CompoundStatement	 
>47111	BreakStatement	 
>47112	ExpressionStatement	 
>47113	AssignmentExpr	lastCollideMaskIndex = i
>47114	Identifier	i
>47115	Identifier	lastCollideMaskIndex
>47116	ExpressionStatement	 
>47117	AssignmentExpr	smallestDist = dist
>47118	Identifier	dist
>47119	Identifier	smallestDist
>47120	ExpressionStatement	 
>47121	AssignmentExpr	closest = b
>47122	Identifier	b
>47123	Identifier	closest
>47124	Condition	 
>47125	CallExpression	( b -> transformedCollisionMask [ i ] - pos ) . isLength2DIn ( radius + b -> collideRadius * skeletal -> scale . \
>47126	ArgumentList	radius + b -> collideRadius * skeletal -> scale . x
>47127	Argument	radius + b -> collideRadius * skeletal -> scale . x
>47128	AdditiveExpression	radius + b -> collideRadius * skeletal -> scale . x
>47129	MultiplicativeExpression	b -> collideRadius * skeletal -> scale . x
>47130	MemberAccess	skeletal -> scale . x
>47131	Identifier	x
>47132	PtrMemberAccess	skeletal -> scale
>47133	Identifier	scale
>47134	Identifier	skeletal
>47135	PtrMemberAccess	b -> collideRadius
>47136	Identifier	collideRadius
>47137	Identifier	b
>47138	Identifier	radius
>47139	Callee	( b -> transformedCollisionMask [ i ] - pos ) . isLength2DIn
>47140	MemberAccess	( b -> transformedCollisionMask [ i ] - pos ) . isLength2DIn
>47141	Identifier	isLength2DIn
>47142	AdditiveExpression	b -> transformedCollisionMask [ i ] - pos
>47143	Identifier	pos
>47144	ArrayIndexing	b -> transformedCollisionMask [ i ]
>47145	Identifier	i
>47146	PtrMemberAccess	b -> transformedCollisionMask
>47147	Identifier	transformedCollisionMask
>47148	Identifier	b
>47149	IncDecOp	 
>47150	IncDec	++
>47151	Identifier	i
>47152	Condition	 
>47153	RelationalExpression	i < b -> transformedCollisionMask . size ( )
>47154	CallExpression	b -> transformedCollisionMask . size ( )
>47155	ArgumentList	 
>47156	Callee	b -> transformedCollisionMask . size
>47157	MemberAccess	b -> transformedCollisionMask . size
>47158	Identifier	size
>47159	PtrMemberAccess	b -> transformedCollisionMask
>47160	Identifier	transformedCollisionMask
>47161	Identifier	b
>47162	Identifier	i
>47163	ForInit	 
>47164	IdentifierDeclStatement	int i = 0 ;
>47165	IdentifierDecl	i = 0
>47166	AssignmentExpr	i = 0
>47167	PrimaryExpression	0
>47168	Identifier	i
>47169	Identifier	i
>47170	IdentifierDeclType	int
>47171	Condition	 
>47172	RelationalExpression	dist < checkRadius
>47173	Identifier	checkRadius
>47174	Identifier	dist
>47175	Condition	 
>47176	UnaryOp	! b -> collisionMask . empty ( )
>47177	CallExpression	b -> collisionMask . empty ( )
>47178	ArgumentList	 
>47179	Callee	b -> collisionMask . empty
>47180	MemberAccess	b -> collisionMask . empty
>47181	Identifier	empty
>47182	PtrMemberAccess	b -> collisionMask
>47183	Identifier	collisionMask
>47184	Identifier	b
>47185	UnaryOperator	!
>47186	CompoundStatement	 
>47187	ForStatement	for ( int i = 0 ; i < b -> collisionRects . size ( ) ; i ++ )
>47188	CompoundStatement	 
>47189	ExpressionStatement	 
>47190	CallExpression	b -> collisionRects [ i ] . isCoordinateInside ( pos , radius )
>47191	ArgumentList	pos
>47192	Argument	radius
>47193	Identifier	radius
>47194	Argument	pos
>47195	Identifier	pos
>47196	Callee	b -> collisionRects [ i ] . isCoordinateInside
>47197	MemberAccess	b -> collisionRects [ i ] . isCoordinateInside
>47198	Identifier	isCoordinateInside
>47199	ArrayIndexing	b -> collisionRects [ i ]
>47200	Identifier	i
>47201	PtrMemberAccess	b -> collisionRects
>47202	Identifier	collisionRects
>47203	Identifier	b
>47204	IncDecOp	 
>47205	IncDec	++
>47206	Identifier	i
>47207	Condition	 
>47208	RelationalExpression	i < b -> collisionRects . size ( )
>47209	CallExpression	b -> collisionRects . size ( )
>47210	ArgumentList	 
>47211	Callee	b -> collisionRects . size
>47212	MemberAccess	b -> collisionRects . size
>47213	Identifier	size
>47214	PtrMemberAccess	b -> collisionRects
>47215	Identifier	collisionRects
>47216	Identifier	b
>47217	Identifier	i
>47218	ForInit	 
>47219	IdentifierDeclStatement	int i = 0 ;
>47220	IdentifierDecl	i = 0
>47221	AssignmentExpr	i = 0
>47222	PrimaryExpression	0
>47223	Identifier	i
>47224	Identifier	i
>47225	IdentifierDeclType	int
>47226	Condition	 
>47227	UnaryOp	! b -> collisionRects . empty ( )
>47228	CallExpression	b -> collisionRects . empty ( )
>47229	ArgumentList	 
>47230	Callee	b -> collisionRects . empty
>47231	MemberAccess	b -> collisionRects . empty
>47232	Identifier	empty
>47233	PtrMemberAccess	b -> collisionRects
>47234	Identifier	collisionRects
>47235	Identifier	b
>47236	UnaryOperator	!
>47237	IdentifierDeclStatement	 
>47238	IdentifierDecl	dist = ( bonePos - pos ) . getSquaredLength2D ( )
>47239	AssignmentExpr	dist = ( bonePos - pos ) . getSquaredLength2D ( )
>47240	CallExpression	( bonePos - pos ) . getSquaredLength2D ( )
>47241	ArgumentList	 
>47242	Callee	( bonePos - pos ) . getSquaredLength2D
>47243	MemberAccess	( bonePos - pos ) . getSquaredLength2D
>47244	Identifier	getSquaredLength2D
>47245	AdditiveExpression	bonePos - pos
>47246	Identifier	pos
>47247	Identifier	bonePos
>47248	Identifier	dist
>47249	Identifier	dist
>47250	IdentifierDeclType	float
>47251	IdentifierDeclStatement	 
>47252	IdentifierDecl	bonePos = b -> getWorldCollidePosition ( )
>47253	AssignmentExpr	bonePos = b -> getWorldCollidePosition ( )
>47254	CallExpression	b -> getWorldCollidePosition ( )
>47255	ArgumentList	 
>47256	Callee	b -> getWorldCollidePosition
>47257	PtrMemberAccess	b -> getWorldCollidePosition
>47258	Identifier	getWorldCollidePosition
>47259	Identifier	b
>47260	Identifier	bonePos
>47261	Identifier	bonePos
>47262	IdentifierDeclType	Vector
>47263	IdentifierDeclStatement	 
>47264	IdentifierDecl	checkRadius = sqr ( radius + b -> collisionMaskRadius )
>47265	AssignmentExpr	checkRadius = sqr ( radius + b -> collisionMaskRadius )
>47266	CallExpression	sqr ( radius + b -> collisionMaskRadius )
>47267	ArgumentList	radius + b -> collisionMaskRadius
>47268	Argument	radius + b -> collisionMaskRadius
>47269	AdditiveExpression	radius + b -> collisionMaskRadius
>47270	PtrMemberAccess	b -> collisionMaskRadius
>47271	Identifier	collisionMaskRadius
>47272	Identifier	b
>47273	Identifier	radius
>47274	Callee	sqr
>47275	Identifier	sqr
>47276	Identifier	checkRadius
>47277	Identifier	checkRadius
>47278	IdentifierDeclType	float
>47279	Condition	 
>47280	AndExpression	b -> alpha . x == 1 && b -> renderQuad
>47281	PtrMemberAccess	b -> renderQuad
>47282	Identifier	renderQuad
>47283	Identifier	b
>47284	EqualityExpression	b -> alpha . x == 1
>47285	PrimaryExpression	1
>47286	MemberAccess	b -> alpha . x
>47287	Identifier	x
>47288	PtrMemberAccess	b -> alpha
>47289	Identifier	alpha
>47290	Identifier	b
>47291	IdentifierDeclStatement	 
>47292	IdentifierDecl	* b = skeletal -> skeletalSprite . bones [ i ]
>47293	AssignmentExpr	* b = skeletal -> skeletalSprite . bones [ i ]
>47294	ArrayIndexing	skeletal -> skeletalSprite . bones [ i ]
>47295	Identifier	i
>47296	MemberAccess	skeletal -> skeletalSprite . bones
>47297	Identifier	bones
>47298	PtrMemberAccess	skeletal -> skeletalSprite
>47299	Identifier	skeletalSprite
>47300	Identifier	skeletal
>47301	Identifier	b
>47302	Identifier	b
>47303	IdentifierDeclType	Bone *
>47304	IncDecOp	 
>47305	IncDec	++
>47306	Identifier	i
>47307	Condition	 
>47308	RelationalExpression	i < skeletal -> skeletalSprite . bones . size ( )
>47309	CallExpression	skeletal -> skeletalSprite . bones . size ( )
>47310	ArgumentList	 
>47311	Callee	skeletal -> skeletalSprite . bones . size
>47312	MemberAccess	skeletal -> skeletalSprite . bones . size
>47313	Identifier	size
>47314	MemberAccess	skeletal -> skeletalSprite . bones
>47315	Identifier	bones
>47316	PtrMemberAccess	skeletal -> skeletalSprite
>47317	Identifier	skeletalSprite
>47318	Identifier	skeletal
>47319	Identifier	i
>47320	ForInit	 
>47321	IdentifierDeclStatement	int i = 0 ;
>47322	IdentifierDecl	i = 0
>47323	AssignmentExpr	i = 0
>47324	PrimaryExpression	0
>47325	Identifier	i
>47326	Identifier	i
>47327	IdentifierDeclType	int
>47328	IfStatement	if ( ! ( pos - skeletal -> position ) . isLength2DIn ( 2000 ) )
>47329	ReturnStatement	 
>47330	PrimaryExpression	0
>47331	Condition	 
>47332	UnaryOp	! ( pos - skeletal -> position ) . isLength2DIn ( 2000 )
>47333	CallExpression	( pos - skeletal -> position ) . isLength2DIn ( 2000 )
>47334	ArgumentList	2000
>47335	Argument	2000
>47336	PrimaryExpression	2000
>47337	Callee	( pos - skeletal -> position ) . isLength2DIn
>47338	MemberAccess	( pos - skeletal -> position ) . isLength2DIn
>47339	Identifier	isLength2DIn
>47340	AdditiveExpression	pos - skeletal -> position
>47341	PtrMemberAccess	skeletal -> position
>47342	Identifier	position
>47343	Identifier	skeletal
>47344	Identifier	pos
>47345	UnaryOperator	!
>47346	IdentifierDeclStatement	 
>47347	IdentifierDecl	* closest = 0
>47348	AssignmentExpr	* closest = 0
>47349	PrimaryExpression	0
>47350	Identifier	closest
>47351	Identifier	closest
>47352	IdentifierDeclType	Bone *
>47353	IdentifierDeclStatement	 
>47354	IdentifierDecl	smallestDist = HUGE_VALF
>47355	AssignmentExpr	smallestDist = HUGE_VALF
>47356	Identifier	HUGE_VALF
>47357	Identifier	HUGE_VALF
>47358	Identifier	smallestDist
>47359	IdentifierDeclType	float
>47407	FunctionDef	Game 
>47408	ParameterList	LocalWarpType localWarpType
>47409	Parameter	 
>47410	Identifier	localWarpType
>47411	ParameterType	LocalWarpType
>47412	ReturnType	void
>47413	CompoundStatement	 
>47414	ExpressionStatement	 
>47415	CallExpression	core -> resetTimer ( )
>47416	ArgumentList	 
>47417	Callee	core -> resetTimer
>47418	PtrMemberAccess	core -> resetTimer
>47419	Identifier	resetTimer
>47420	Identifier	core
>47421	ExpressionStatement	 
>47422	CallExpression	dsq -> screenTransition -> capture ( )
>47423	ArgumentList	 
>47424	Callee	dsq -> screenTransition -> capture
>47425	PtrMemberAccess	dsq -> screenTransition -> capture
>47426	Identifier	capture
>47427	PtrMemberAccess	dsq -> screenTransition
>47428	Identifier	screenTransition
>47429	Identifier	dsq
>47430	IfStatement	if ( localWarpType == LOCALWARP_IN )
>47431	ElseStatement	else
>47432	IfStatement	if ( localWarpType == LOCALWARP_OUT )
>47433	CompoundStatement	 
>47434	ExpressionStatement	 
>47435	AssignmentExpr	dsq -> game -> avatar -> warpInLocal = Vector ( 0 , 0 , 0 )
>47436	CallExpression	Vector ( 0 , 0 , 0 )
>47437	ArgumentList	0
>47438	Argument	0
>47439	PrimaryExpression	0
>47440	Argument	0
>47441	PrimaryExpression	0
>47442	Argument	0
>47443	PrimaryExpression	0
>47444	Callee	Vector
>47445	Identifier	Vector
>47446	PtrMemberAccess	dsq -> game -> avatar -> warpInLocal
>47447	Identifier	warpInLocal
>47448	PtrMemberAccess	dsq -> game -> avatar
>47449	Identifier	avatar
>47450	PtrMemberAccess	dsq -> game
>47451	Identifier	game
>47452	Identifier	dsq
>47453	Condition	 
>47454	EqualityExpression	localWarpType == LOCALWARP_OUT
>47455	Identifier	LOCALWARP_OUT
>47456	Identifier	localWarpType
>47457	CompoundStatement	 
>47458	ExpressionStatement	 
>47459	AssignmentExpr	dsq -> game -> avatar -> warpInLocal = dsq -> game -> avatar -> position
>47460	PtrMemberAccess	dsq -> game -> avatar -> position
>47461	Identifier	position
>47462	PtrMemberAccess	dsq -> game -> avatar
>47463	Identifier	avatar
>47464	PtrMemberAccess	dsq -> game
>47465	Identifier	game
>47466	Identifier	dsq
>47467	PtrMemberAccess	dsq -> game -> avatar -> warpInLocal
>47468	Identifier	warpInLocal
>47469	PtrMemberAccess	dsq -> game -> avatar
>47470	Identifier	avatar
>47471	PtrMemberAccess	dsq -> game
>47472	Identifier	game
>47473	Identifier	dsq
>47474	Condition	 
>47475	EqualityExpression	localWarpType == LOCALWARP_IN
>47476	Identifier	LOCALWARP_IN
>47477	Identifier	localWarpType
>47498	FunctionDef	Game 
>47499	ParameterList	 
>47500	ReturnType	void
>47501	CompoundStatement	 
>47502	ExpressionStatement	 
>47503	CallExpression	dsq -> screenTransition -> transition ( 0.6 )
>47504	ArgumentList	0.6
>47505	Argument	0.6
>47506	PrimaryExpression	0.6
>47507	Callee	dsq -> screenTransition -> transition
>47508	PtrMemberAccess	dsq -> screenTransition -> transition
>47509	Identifier	transition
>47510	PtrMemberAccess	dsq -> screenTransition
>47511	Identifier	screenTransition
>47512	Identifier	dsq
>47513	ExpressionStatement	 
>47514	CallExpression	dsq -> game -> snapCam ( )
>47515	ArgumentList	 
>47516	Callee	dsq -> game -> snapCam
>47517	PtrMemberAccess	dsq -> game -> snapCam
>47518	Identifier	snapCam
>47519	PtrMemberAccess	dsq -> game
>47520	Identifier	game
>47521	Identifier	dsq
>47522	IfStatement	if ( dsq -> game -> avatar -> pullTarget )
>47523	ExpressionStatement	 
>47524	AssignmentExpr	dsq -> game -> avatar -> pullTarget -> position = dsq -> game -> avatar -> position
>47525	PtrMemberAccess	dsq -> game -> avatar -> position
>47526	Identifier	position
>47527	PtrMemberAccess	dsq -> game -> avatar
>47528	Identifier	avatar
>47529	PtrMemberAccess	dsq -> game
>47530	Identifier	game
>47531	Identifier	dsq
>47532	PtrMemberAccess	dsq -> game -> avatar -> pullTarget -> position
>47533	Identifier	position
>47534	PtrMemberAccess	dsq -> game -> avatar -> pullTarget
>47535	Identifier	pullTarget
>47536	PtrMemberAccess	dsq -> game -> avatar
>47537	Identifier	avatar
>47538	PtrMemberAccess	dsq -> game
>47539	Identifier	game
>47540	Identifier	dsq
>47541	Condition	 
>47542	PtrMemberAccess	dsq -> game -> avatar -> pullTarget
>47543	Identifier	pullTarget
>47544	PtrMemberAccess	dsq -> game -> avatar
>47545	Identifier	avatar
>47546	PtrMemberAccess	dsq -> game
>47547	Identifier	game
>47548	Identifier	dsq
>47549	IfStatement	if ( dsq -> game -> li && dsq -> continuity . hasLi ( ) )
>47550	ExpressionStatement	 
>47551	AssignmentExpr	dsq -> game -> li -> position = dsq -> game -> avatar -> position
>47552	PtrMemberAccess	dsq -> game -> avatar -> position
>47553	Identifier	position
>47554	PtrMemberAccess	dsq -> game -> avatar
>47555	Identifier	avatar
>47556	PtrMemberAccess	dsq -> game
>47557	Identifier	game
>47558	Identifier	dsq
>47559	PtrMemberAccess	dsq -> game -> li -> position
>47560	Identifier	position
>47561	PtrMemberAccess	dsq -> game -> li
>47562	Identifier	li
>47563	PtrMemberAccess	dsq -> game
>47564	Identifier	game
>47565	Identifier	dsq
>47566	Condition	 
>47567	AndExpression	dsq -> game -> li && dsq -> continuity . hasLi ( )
>47568	CallExpression	dsq -> continuity . hasLi ( )
>47569	ArgumentList	 
>47570	Callee	dsq -> continuity . hasLi
>47571	MemberAccess	dsq -> continuity . hasLi
>47572	Identifier	hasLi
>47573	PtrMemberAccess	dsq -> continuity
>47574	Identifier	continuity
>47575	Identifier	dsq
>47576	PtrMemberAccess	dsq -> game -> li
>47577	Identifier	li
>47578	PtrMemberAccess	dsq -> game
>47579	Identifier	game
>47580	Identifier	dsq
>47606	FunctionDef	Game 
>47607	ParameterList	const Vector & pos , int t
>47608	Parameter	 
>47609	Identifier	t
>47610	ParameterType	int
>47611	Parameter	 
>47612	Identifier	pos
>47613	ParameterType	const Vector &
>47614	ReturnType	void
>47615	CompoundStatement	 
>47616	CompoundStatement	 
>47617	IfStatement	if ( ( e -> position - pos ) . isLength2DIn ( 1024 ) )
>47618	CompoundStatement	 
>47619	ExpressionStatement	 
>47620	CallExpression	e -> sporesDropped ( pos , t )
>47621	ArgumentList	pos
>47622	Argument	t
>47623	Identifier	t
>47624	Argument	pos
>47625	Identifier	pos
>47626	Callee	e -> sporesDropped
>47627	PtrMemberAccess	e -> sporesDropped
>47628	Identifier	sporesDropped
>47629	Identifier	e
>47630	Condition	 
>47631	CallExpression	( e -> position - pos ) . isLength2DIn ( 1024 )
>47632	ArgumentList	1024
>47633	Argument	1024
>47634	PrimaryExpression	1024
>47635	Callee	( e -> position - pos ) . isLength2DIn
>47636	MemberAccess	( e -> position - pos ) . isLength2DIn
>47637	Identifier	isLength2DIn
>47638	AdditiveExpression	e -> position - pos
>47639	Identifier	pos
>47640	PtrMemberAccess	e -> position
>47641	Identifier	position
>47642	Identifier	e
>47643	IdentifierDeclStatement	 
>47644	IdentifierDecl	* e = * i
>47645	AssignmentExpr	* e = * i
>47646	UnaryOp	* i
>47647	Identifier	i
>47648	UnaryOperator	*
>47649	Identifier	e
>47650	Identifier	e
>47651	IdentifierDeclType	Entity *
>47652	Statement	 
>47653	Statement	 
>47654	Statement	 
>47655	Statement	 
>47667	FunctionDef	Game 
>47668	ParameterList	Entity * e , Shot * shot
>47669	Parameter	 
>47670	Identifier	shot
>47671	ParameterType	Shot *
>47672	Parameter	 
>47673	Identifier	e
>47674	ParameterType	Entity *
>47675	ReturnType	bool
>47676	CompoundStatement	 
>47677	ReturnStatement	 
>47678	Identifier	true
>47679	IfStatement	if ( e -> getEntityType ( ) == ET_ENEMY )
>47680	ElseStatement	else
>47681	IfStatement	if ( e -> getEntityType ( ) == ET_AVATAR )
>47682	ElseStatement	else
>47683	IfStatement	if ( e -> getEntityType ( ) == ET_PET )
>47684	CompoundStatement	 
>47685	ReturnStatement	 
>47686	Identifier	go
>47687	IfStatement	if ( shot -> firer && shot -> firer -> getEntityType ( ) != ET_ENEMY )
>47688	ExpressionStatement	 
>47689	AssignmentExpr	go = false
>47690	Identifier	false
>47691	Identifier	go
>47692	Condition	 
>47693	AndExpression	shot -> firer && shot -> firer -> getEntityType ( ) != ET_ENEMY
>47694	EqualityExpression	shot -> firer -> getEntityType ( ) != ET_ENEMY
>47695	Identifier	ET_ENEMY
>47696	CallExpression	shot -> firer -> getEntityType ( )
>47697	ArgumentList	 
>47698	Callee	shot -> firer -> getEntityType
>47699	PtrMemberAccess	shot -> firer -> getEntityType
>47700	Identifier	getEntityType
>47701	PtrMemberAccess	shot -> firer
>47702	Identifier	firer
>47703	Identifier	shot
>47704	PtrMemberAccess	shot -> firer
>47705	Identifier	firer
>47706	Identifier	shot
>47707	IdentifierDeclStatement	 
>47708	IdentifierDecl	go = shot -> firer != e
>47709	AssignmentExpr	go = shot -> firer != e
>47710	EqualityExpression	shot -> firer != e
>47711	Identifier	e
>47712	PtrMemberAccess	shot -> firer
>47713	Identifier	firer
>47714	Identifier	shot
>47715	Identifier	go
>47716	Identifier	go
>47717	IdentifierDeclType	bool
>47718	Condition	 
>47719	EqualityExpression	e -> getEntityType ( ) == ET_PET
>47720	Identifier	ET_PET
>47721	CallExpression	e -> getEntityType ( )
>47722	ArgumentList	 
>47723	Callee	e -> getEntityType
>47724	PtrMemberAccess	e -> getEntityType
>47725	Identifier	getEntityType
>47726	Identifier	e
>47727	CompoundStatement	 
>47728	ReturnStatement	 
>47729	AndExpression	! dsq -> game -> isDamageTypeAvatar ( shot -> getDamageType ( ) ) && ( ! shot -> firer || shot -> firer \
>47730	OrExpression	! shot -> firer || shot -> firer -> getEntityType ( ) == ET_ENEMY
>47731	EqualityExpression	shot -> firer -> getEntityType ( ) == ET_ENEMY
>47732	Identifier	ET_ENEMY
>47733	CallExpression	shot -> firer -> getEntityType ( )
>47734	ArgumentList	 
>47735	Callee	shot -> firer -> getEntityType
>47736	PtrMemberAccess	shot -> firer -> getEntityType
>47737	Identifier	getEntityType
>47738	PtrMemberAccess	shot -> firer
>47739	Identifier	firer
>47740	Identifier	shot
>47741	UnaryOp	! shot -> firer
>47742	PtrMemberAccess	shot -> firer
>47743	Identifier	firer
>47744	Identifier	shot
>47745	UnaryOperator	!
>47746	UnaryOp	! dsq -> game -> isDamageTypeAvatar ( shot -> getDamageType ( ) )
>47747	CallExpression	dsq -> game -> isDamageTypeAvatar ( shot -> getDamageType ( ) )
>47748	ArgumentList	shot -> getDamageType ( )
>47749	Argument	shot -> getDamageType ( )
>47750	CallExpression	shot -> getDamageType ( )
>47751	ArgumentList	 
>47752	Callee	shot -> getDamageType
>47753	PtrMemberAccess	shot -> getDamageType
>47754	Identifier	getDamageType
>47755	Identifier	shot
>47756	Callee	dsq -> game -> isDamageTypeAvatar
>47757	PtrMemberAccess	dsq -> game -> isDamageTypeAvatar
>47758	Identifier	isDamageTypeAvatar
>47759	PtrMemberAccess	dsq -> game
>47760	Identifier	game
>47761	Identifier	dsq
>47762	UnaryOperator	!
>47763	Condition	 
>47764	EqualityExpression	e -> getEntityType ( ) == ET_AVATAR
>47765	Identifier	ET_AVATAR
>47766	CallExpression	e -> getEntityType ( )
>47767	ArgumentList	 
>47768	Callee	e -> getEntityType
>47769	PtrMemberAccess	e -> getEntityType
>47770	Identifier	getEntityType
>47771	Identifier	e
>47772	CompoundStatement	 
>47773	IfStatement	if ( shot -> getDamageType ( ) == DT_AVATAR_BITE )
>47774	CompoundStatement	 
>47775	ReturnStatement	 
>47776	Identifier	true
>47777	ForStatement	for ( i = avatar -> bittenEntities . begin ( ) ; i != avatar -> bittenEntities . end ( ) ; i ++ )
>47778	CompoundStatement	 
>47779	IfStatement	if ( e == ( * i ) )
>47780	CompoundStatement	 
>47781	ReturnStatement	 
>47782	Identifier	false
>47783	Condition	 
>47784	EqualityExpression	e == ( * i )
>47785	UnaryOp	* i
>47786	Identifier	i
>47787	UnaryOperator	*
>47788	Identifier	e
>47789	IncDecOp	 
>47790	IncDec	++
>47791	Identifier	i
>47792	Condition	 
>47793	EqualityExpression	i != avatar -> bittenEntities . end ( )
>47794	CallExpression	avatar -> bittenEntities . end ( )
>47795	ArgumentList	 
>47796	Callee	avatar -> bittenEntities . end
>47797	MemberAccess	avatar -> bittenEntities . end
>47798	Identifier	end
>47799	PtrMemberAccess	avatar -> bittenEntities
>47800	Identifier	bittenEntities
>47801	Identifier	avatar
>47802	Identifier	i
>47803	ForInit	 
>47804	AssignmentExpr	i = avatar -> bittenEntities . begin ( )
>47805	CallExpression	avatar -> bittenEntities . begin ( )
>47806	ArgumentList	 
>47807	Callee	avatar -> bittenEntities . begin
>47808	MemberAccess	avatar -> bittenEntities . begin
>47809	Identifier	begin
>47810	PtrMemberAccess	avatar -> bittenEntities
>47811	Identifier	bittenEntities
>47812	Identifier	avatar
>47813	Identifier	i
>47814	IdentifierDeclStatement	 
>47815	IdentifierDecl	i
>47816	Identifier	i
>47817	IdentifierDeclType	Avatar 
>47818	Condition	 
>47819	EqualityExpression	shot -> getDamageType ( ) == DT_AVATAR_BITE
>47820	Identifier	DT_AVATAR_BITE
>47821	CallExpression	shot -> getDamageType ( )
>47822	ArgumentList	 
>47823	Callee	shot -> getDamageType
>47824	PtrMemberAccess	shot -> getDamageType
>47825	Identifier	getDamageType
>47826	Identifier	shot
>47827	Condition	 
>47828	EqualityExpression	e -> getEntityType ( ) == ET_ENEMY
>47829	Identifier	ET_ENEMY
>47830	CallExpression	e -> getEntityType ( )
>47831	ArgumentList	 
>47832	Callee	e -> getEntityType
>47833	PtrMemberAccess	e -> getEntityType
>47834	Identifier	getEntityType
>47835	Identifier	e
>47836	IfStatement	if ( shot -> checkDamageTarget )
>47837	CompoundStatement	 
>47838	IfStatement	if ( ! e -> isDamageTarget ( shot -> getDamageType ( ) ) )
>47839	ReturnStatement	 
>47840	Identifier	false
>47841	Condition	 
>47842	UnaryOp	! e -> isDamageTarget ( shot -> getDamageType ( ) )
>47843	CallExpression	e -> isDamageTarget ( shot -> getDamageType ( ) )
>47844	ArgumentList	shot -> getDamageType ( )
>47845	Argument	shot -> getDamageType ( )
>47846	CallExpression	shot -> getDamageType ( )
>47847	ArgumentList	 
>47848	Callee	shot -> getDamageType
>47849	PtrMemberAccess	shot -> getDamageType
>47850	Identifier	getDamageType
>47851	Identifier	shot
>47852	Callee	e -> isDamageTarget
>47853	PtrMemberAccess	e -> isDamageTarget
>47854	Identifier	isDamageTarget
>47855	Identifier	e
>47856	UnaryOperator	!
>47857	Condition	 
>47858	PtrMemberAccess	shot -> checkDamageTarget
>47859	Identifier	checkDamageTarget
>47860	Identifier	shot
>47861	IfStatement	if ( ! shot -> isHitEnts ( ) || shot -> firer == e )
>47862	CompoundStatement	 
>47863	ReturnStatement	 
>47864	Identifier	false
>47865	Condition	 
>47866	OrExpression	! shot -> isHitEnts ( ) || shot -> firer == e
>47867	EqualityExpression	shot -> firer == e
>47868	Identifier	e
>47869	PtrMemberAccess	shot -> firer
>47870	Identifier	firer
>47871	Identifier	shot
>47872	UnaryOp	! shot -> isHitEnts ( )
>47873	CallExpression	shot -> isHitEnts ( )
>47874	ArgumentList	 
>47875	Callee	shot -> isHitEnts
>47876	PtrMemberAccess	shot -> isHitEnts
>47877	Identifier	isHitEnts
>47878	Identifier	shot
>47879	UnaryOperator	!
>47916	FunctionDef	Game 
>47917	ParameterList	Entity * e , bool hasShield
>47918	Parameter	 
>47919	Identifier	hasShield
>47920	ParameterType	bool
>47921	Parameter	 
>47922	Identifier	e
>47923	ParameterType	Entity *
>47924	ReturnType	void
>47925	CompoundStatement	 
>47926	ForStatement	for ( size_t i = 0 ; i < Shot 
>47927	CompoundStatement	 
>47928	IfStatement	if ( shot -> isActive ( ) && isEntityCollideWithShot ( e , shot ) && ( ! hasShield || ( ! shot -> shotData || ! \
>47929	CompoundStatement	 
>47930	IfStatement	if ( ( collidePoint - shot -> position ) . isLength2DIn ( shot -> collideRadius + e -> collideRadius ) )
>47931	CompoundStatement	 
>47932	ExpressionStatement	 
>47933	CallExpression	shot -> hitEntity ( e , 0 )
>47934	ArgumentList	e
>47935	Argument	0
>47936	PrimaryExpression	0
>47937	Argument	e
>47938	Identifier	e
>47939	Callee	shot -> hitEntity
>47940	PtrMemberAccess	shot -> hitEntity
>47941	Identifier	hitEntity
>47942	Identifier	shot
>47943	ExpressionStatement	 
>47944	AssignmentExpr	lastCollidePosition = shot -> position
>47945	PtrMemberAccess	shot -> position
>47946	Identifier	position
>47947	Identifier	shot
>47948	Identifier	lastCollidePosition
>47949	Condition	 
>47950	CallExpression	( collidePoint - shot -> position ) . isLength2DIn ( shot -> collideRadius + e -> collideRadius )
>47951	ArgumentList	shot -> collideRadius + e -> collideRadius
>47952	Argument	shot -> collideRadius + e -> collideRadius
>47953	AdditiveExpression	shot -> collideRadius + e -> collideRadius
>47954	PtrMemberAccess	e -> collideRadius
>47955	Identifier	collideRadius
>47956	Identifier	e
>47957	PtrMemberAccess	shot -> collideRadius
>47958	Identifier	collideRadius
>47959	Identifier	shot
>47960	Callee	( collidePoint - shot -> position ) . isLength2DIn
>47961	MemberAccess	( collidePoint - shot -> position ) . isLength2DIn
>47962	Identifier	isLength2DIn
>47963	AdditiveExpression	collidePoint - shot -> position
>47964	PtrMemberAccess	shot -> position
>47965	Identifier	position
>47966	Identifier	shot
>47967	Identifier	collidePoint
>47968	IfStatement	if ( e -> getNumTargetPoints ( ) > 0 )
>47969	CompoundStatement	 
>47970	ExpressionStatement	 
>47971	AssignmentExpr	collidePoint = e -> getTargetPoint ( 0 )
>47972	CallExpression	e -> getTargetPoint ( 0 )
>47973	ArgumentList	0
>47974	Argument	0
>47975	PrimaryExpression	0
>47976	Callee	e -> getTargetPoint
>47977	PtrMemberAccess	e -> getTargetPoint
>47978	Identifier	getTargetPoint
>47979	Identifier	e
>47980	Identifier	collidePoint
>47981	Condition	 
>47982	RelationalExpression	e -> getNumTargetPoints ( ) > 0
>47983	PrimaryExpression	0
>47984	CallExpression	e -> getNumTargetPoints ( )
>47985	ArgumentList	 
>47986	Callee	e -> getNumTargetPoints
>47987	PtrMemberAccess	e -> getNumTargetPoints
>47988	Identifier	getNumTargetPoints
>47989	Identifier	e
>47990	IdentifierDeclStatement	 
>47991	IdentifierDecl	collidePoint = e -> position + e -> offset
>47992	AssignmentExpr	collidePoint = e -> position + e -> offset
>47993	AdditiveExpression	e -> position + e -> offset
>47994	PtrMemberAccess	e -> offset
>47995	Identifier	offset
>47996	Identifier	e
>47997	PtrMemberAccess	e -> position
>47998	Identifier	position
>47999	Identifier	e
>48000	Identifier	collidePoint
>48001	Identifier	collidePoint
>48002	IdentifierDeclType	Vector
>48003	Condition	 
>48004	AndExpression	shot -> isActive ( ) && isEntityCollideWithShot ( e , shot ) && ( ! hasShield || ( ! shot -> shotData || ! \
>48005	AndExpression	isEntityCollideWithShot ( e , shot ) && ( ! hasShield || ( ! shot -> shotData || ! shot -> shotData \
>48006	OrExpression	! hasShield || ( ! shot -> shotData || ! shot -> shotData -> ignoreShield )
>48007	OrExpression	! shot -> shotData || ! shot -> shotData -> ignoreShield
>48008	UnaryOp	! shot -> shotData -> ignoreShield
>48009	PtrMemberAccess	shot -> shotData -> ignoreShield
>48010	Identifier	ignoreShield
>48011	PtrMemberAccess	shot -> shotData
>48012	Identifier	shotData
>48013	Identifier	shot
>48014	UnaryOperator	!
>48015	UnaryOp	! shot -> shotData
>48016	PtrMemberAccess	shot -> shotData
>48017	Identifier	shotData
>48018	Identifier	shot
>48019	UnaryOperator	!
>48020	UnaryOp	! hasShield
>48021	Identifier	hasShield
>48022	UnaryOperator	!
>48023	CallExpression	isEntityCollideWithShot ( e , shot )
>48024	ArgumentList	e
>48025	Argument	shot
>48026	Identifier	shot
>48027	Argument	e
>48028	Identifier	e
>48029	Callee	isEntityCollideWithShot
>48030	Identifier	isEntityCollideWithShot
>48031	CallExpression	shot -> isActive ( )
>48032	ArgumentList	 
>48033	Callee	shot -> isActive
>48034	PtrMemberAccess	shot -> isActive
>48035	Identifier	isActive
>48036	Identifier	shot
>48037	IdentifierDeclStatement	 
>48038	IdentifierDecl	* shot = Shot 
>48039	AssignmentExpr	* shot = Shot 
>48040	ArrayIndexing	Shot 
>48041	Identifier	i
>48042	Identifier	Shot 
>48043	Identifier	shot
>48044	Identifier	shot
>48045	IdentifierDeclType	Shot *
>48046	UnaryExpression	 
>48047	Identifier	i
>48048	IncDec	++
>48049	Condition	 
>48050	RelationalExpression	i < Shot 
>48051	CallExpression	Shot 
>48052	ArgumentList	 
>48053	Callee	Shot 
>48054	MemberAccess	Shot 
>48055	Identifier	size
>48056	Identifier	Shot 
>48057	Identifier	i
>48058	ForInit	 
>48059	IdentifierDeclStatement	size_t i = 0 ;
>48060	IdentifierDecl	i = 0
>48061	AssignmentExpr	i = 0
>48062	PrimaryExpression	0
>48063	Identifier	i
>48064	Identifier	i
>48065	IdentifierDeclType	size_t
>48066	ExpressionStatement	 
>48067	CallExpression	BBGE_PROF ( Game_handleShotCollisions )
>48068	ArgumentList	Game_handleShotCollisions
>48069	Argument	Game_handleShotCollisions
>48070	Identifier	Game_handleShotCollisions
>48071	Callee	BBGE_PROF
>48072	Identifier	BBGE_PROF
>48103	FunctionDef	Game 
>48104	ParameterList	DamageType dt
>48105	Parameter	 
>48106	Identifier	dt
>48107	ParameterType	DamageType
>48108	ReturnType	bool
>48109	CompoundStatement	 
>48110	ReturnStatement	 
>48111	AndExpression	dt >= DT_AVATAR && dt < DT_TOUCH
>48112	RelationalExpression	dt < DT_TOUCH
>48113	Identifier	DT_TOUCH
>48114	Identifier	dt
>48115	RelationalExpression	dt >= DT_AVATAR
>48116	Identifier	DT_AVATAR
>48117	Identifier	dt
>48124	FunctionDef	Game 
>48125	ParameterList	DamageType dt
>48126	Parameter	 
>48127	Identifier	dt
>48128	ParameterType	DamageType
>48129	ReturnType	bool
>48130	CompoundStatement	 
>48131	ReturnStatement	 
>48132	AndExpression	dt >= DT_ENEMY && dt < DT_AVATAR
>48133	RelationalExpression	dt < DT_AVATAR
>48134	Identifier	DT_AVATAR
>48135	Identifier	dt
>48136	RelationalExpression	dt >= DT_ENEMY
>48137	Identifier	DT_ENEMY
>48138	Identifier	dt
>48145	FunctionDef	Game 
>48146	ParameterList	Entity * e
>48147	Parameter	 
>48148	Identifier	e
>48149	ParameterType	Entity *
>48150	ReturnType	void
>48151	CompoundStatement	 
>48152	ForStatement	for ( size_t i = 0 ; i < Shot 
>48153	CompoundStatement	 
>48154	IfStatement	if ( shot -> isActive ( ) && isEntityCollideWithShot ( e , shot ) )
>48155	CompoundStatement	 
>48156	IfStatement	if ( b )
>48157	CompoundStatement	 
>48158	ExpressionStatement	 
>48159	CallExpression	shot -> hitEntity ( e , b )
>48160	ArgumentList	e
>48161	Argument	b
>48162	Identifier	b
>48163	Argument	e
>48164	Identifier	e
>48165	Callee	shot -> hitEntity
>48166	PtrMemberAccess	shot -> hitEntity
>48167	Identifier	hitEntity
>48168	Identifier	shot
>48169	ExpressionStatement	 
>48170	AssignmentExpr	lastCollidePosition = shot -> position
>48171	PtrMemberAccess	shot -> position
>48172	Identifier	position
>48173	Identifier	shot
>48174	Identifier	lastCollidePosition
>48175	Condition	 
>48176	Identifier	b
>48177	IdentifierDeclStatement	 
>48178	IdentifierDecl	* b = collideSkeletalVsCircle ( e , shot -> position , shot -> collideRadius )
>48179	AssignmentExpr	* b = collideSkeletalVsCircle ( e , shot -> position , shot -> collideRadius )
>48180	CallExpression	collideSkeletalVsCircle ( e , shot -> position , shot -> collideRadius )
>48181	ArgumentList	e
>48182	Argument	shot -> collideRadius
>48183	PtrMemberAccess	shot -> collideRadius
>48184	Identifier	collideRadius
>48185	Identifier	shot
>48186	Argument	shot -> position
>48187	PtrMemberAccess	shot -> position
>48188	Identifier	position
>48189	Identifier	shot
>48190	Argument	e
>48191	Identifier	e
>48192	Callee	collideSkeletalVsCircle
>48193	Identifier	collideSkeletalVsCircle
>48194	Identifier	b
>48195	Identifier	b
>48196	IdentifierDeclType	Bone *
>48197	Condition	 
>48198	AndExpression	shot -> isActive ( ) && isEntityCollideWithShot ( e , shot )
>48199	CallExpression	isEntityCollideWithShot ( e , shot )
>48200	ArgumentList	e
>48201	Argument	shot
>48202	Identifier	shot
>48203	Argument	e
>48204	Identifier	e
>48205	Callee	isEntityCollideWithShot
>48206	Identifier	isEntityCollideWithShot
>48207	CallExpression	shot -> isActive ( )
>48208	ArgumentList	 
>48209	Callee	shot -> isActive
>48210	PtrMemberAccess	shot -> isActive
>48211	Identifier	isActive
>48212	Identifier	shot
>48213	IdentifierDeclStatement	 
>48214	IdentifierDecl	* shot = Shot 
>48215	AssignmentExpr	* shot = Shot 
>48216	ArrayIndexing	Shot 
>48217	Identifier	i
>48218	Identifier	Shot 
>48219	Identifier	shot
>48220	Identifier	shot
>48221	IdentifierDeclType	Shot *
>48222	UnaryExpression	 
>48223	Identifier	i
>48224	IncDec	++
>48225	Condition	 
>48226	RelationalExpression	i < Shot 
>48227	CallExpression	Shot 
>48228	ArgumentList	 
>48229	Callee	Shot 
>48230	MemberAccess	Shot 
>48231	Identifier	size
>48232	Identifier	Shot 
>48233	Identifier	i
>48234	ForInit	 
>48235	IdentifierDeclStatement	size_t i = 0 ;
>48236	IdentifierDecl	i = 0
>48237	AssignmentExpr	i = 0
>48238	PrimaryExpression	0
>48239	Identifier	i
>48240	Identifier	i
>48241	IdentifierDeclType	size_t
>48242	ExpressionStatement	 
>48243	CallExpression	BBGE_PROF ( Game_HSSKELETAL )
>48244	ArgumentList	Game_HSSKELETAL
>48245	Argument	Game_HSSKELETAL
>48246	Identifier	Game_HSSKELETAL
>48247	Callee	BBGE_PROF
>48248	Identifier	BBGE_PROF
>48268	FunctionDef	Game 
>48269	ParameterList	Entity * e , int num , float perc
>48270	Parameter	 
>48271	Identifier	perc
>48272	ParameterType	float
>48273	Parameter	 
>48274	Identifier	num
>48275	ParameterType	int
>48276	Parameter	 
>48277	Identifier	e
>48278	ParameterType	Entity *
>48279	ReturnType	void
>48280	CompoundStatement	 
>48281	ForStatement	for ( size_t i = 0 ; i < Shot 
>48282	CompoundStatement	 
>48283	IfStatement	if ( shot -> isActive ( ) && isEntityCollideWithShot ( e , shot ) )
>48284	CompoundStatement	 
>48285	IfStatement	if ( b )
>48286	CompoundStatement	 
>48287	ExpressionStatement	 
>48288	CallExpression	shot -> hitEntity ( e , 0 )
>48289	ArgumentList	e
>48290	Argument	0
>48291	PrimaryExpression	0
>48292	Argument	e
>48293	Identifier	e
>48294	Callee	shot -> hitEntity
>48295	PtrMemberAccess	shot -> hitEntity
>48296	Identifier	hitEntity
>48297	Identifier	shot
>48298	ExpressionStatement	 
>48299	AssignmentExpr	lastCollidePosition = shot -> position
>48300	PtrMemberAccess	shot -> position
>48301	Identifier	position
>48302	Identifier	shot
>48303	Identifier	lastCollidePosition
>48304	Condition	 
>48305	Identifier	b
>48306	IdentifierDeclStatement	 
>48307	IdentifierDecl	b = collideHairVsCircle ( e , num , shot -> position , 8 , perc )
>48308	AssignmentExpr	b = collideHairVsCircle ( e , num , shot -> position , 8 , perc )
>48309	CallExpression	collideHairVsCircle ( e , num , shot -> position , 8 , perc )
>48310	ArgumentList	e
>48311	Argument	perc
>48312	Identifier	perc
>48313	Argument	8
>48314	PrimaryExpression	8
>48315	Argument	shot -> position
>48316	PtrMemberAccess	shot -> position
>48317	Identifier	position
>48318	Identifier	shot
>48319	Argument	num
>48320	Identifier	num
>48321	Argument	e
>48322	Identifier	e
>48323	Callee	collideHairVsCircle
>48324	Identifier	collideHairVsCircle
>48325	Identifier	b
>48326	Identifier	b
>48327	IdentifierDeclType	bool
>48328	Condition	 
>48329	AndExpression	shot -> isActive ( ) && isEntityCollideWithShot ( e , shot )
>48330	CallExpression	isEntityCollideWithShot ( e , shot )
>48331	ArgumentList	e
>48332	Argument	shot
>48333	Identifier	shot
>48334	Argument	e
>48335	Identifier	e
>48336	Callee	isEntityCollideWithShot
>48337	Identifier	isEntityCollideWithShot
>48338	CallExpression	shot -> isActive ( )
>48339	ArgumentList	 
>48340	Callee	shot -> isActive
>48341	PtrMemberAccess	shot -> isActive
>48342	Identifier	isActive
>48343	Identifier	shot
>48344	IdentifierDeclStatement	 
>48345	IdentifierDecl	* shot = Shot 
>48346	AssignmentExpr	* shot = Shot 
>48347	ArrayIndexing	Shot 
>48348	Identifier	i
>48349	Identifier	Shot 
>48350	Identifier	shot
>48351	Identifier	shot
>48352	IdentifierDeclType	Shot *
>48353	UnaryExpression	 
>48354	Identifier	i
>48355	IncDec	++
>48356	Condition	 
>48357	RelationalExpression	i < Shot 
>48358	CallExpression	Shot 
>48359	ArgumentList	 
>48360	Callee	Shot 
>48361	MemberAccess	Shot 
>48362	Identifier	size
>48363	Identifier	Shot 
>48364	Identifier	i
>48365	ForInit	 
>48366	IdentifierDeclStatement	size_t i = 0 ;
>48367	IdentifierDecl	i = 0
>48368	AssignmentExpr	i = 0
>48369	PrimaryExpression	0
>48370	Identifier	i
>48371	Identifier	i
>48372	IdentifierDeclType	size_t
>48392	FunctionDef	Game 
>48393	ParameterList	 
>48394	ReturnType	void
>48395	CompoundStatement	 
>48396	IfStatement	if ( ! core -> getAltState ( ) )
>48397	CompoundStatement	 
>48398	ExpressionStatement	 
>48399	CallExpression	setElementLayerFlags ( )
>48400	ArgumentList	 
>48401	Callee	setElementLayerFlags
>48402	Identifier	setElementLayerFlags
>48403	ExpressionStatement	 
>48404	CallExpression	sceneEditor . toggle ( )
>48405	ArgumentList	 
>48406	Callee	sceneEditor . toggle
>48407	MemberAccess	sceneEditor . toggle
>48408	Identifier	toggle
>48409	Identifier	sceneEditor
>48410	Condition	 
>48411	UnaryOp	! core -> getAltState ( )
>48412	CallExpression	core -> getAltState ( )
>48413	ArgumentList	 
>48414	Callee	core -> getAltState
>48415	PtrMemberAccess	core -> getAltState
>48416	Identifier	getAltState
>48417	Identifier	core
>48418	UnaryOperator	!
>48426	FunctionDef	Game 
>48427	ParameterList	 
>48428	ReturnType	void
>48429	CompoundStatement	 
>48430	IfStatement	if ( miniMapRender )
>48431	CompoundStatement	 
>48432	IfStatement	if ( miniMapRender -> alpha == 0 )
>48433	ElseStatement	else
>48434	IfStatement	if ( ! miniMapRender -> alpha . isInterpolating ( ) )
>48435	ExpressionStatement	 
>48436	CallExpression	miniMapRender -> alpha . interpolateTo ( 0 , 0.1f )
>48437	ArgumentList	0
>48438	Argument	0.1f
>48439	PrimaryExpression	0.1f
>48440	Argument	0
>48441	PrimaryExpression	0
>48442	Callee	miniMapRender -> alpha . interpolateTo
>48443	MemberAccess	miniMapRender -> alpha . interpolateTo
>48444	Identifier	interpolateTo
>48445	PtrMemberAccess	miniMapRender -> alpha
>48446	Identifier	alpha
>48447	Identifier	miniMapRender
>48448	Condition	 
>48449	UnaryOp	! miniMapRender -> alpha . isInterpolating ( )
>48450	CallExpression	miniMapRender -> alpha . isInterpolating ( )
>48451	ArgumentList	 
>48452	Callee	miniMapRender -> alpha . isInterpolating
>48453	MemberAccess	miniMapRender -> alpha . isInterpolating
>48454	Identifier	isInterpolating
>48455	PtrMemberAccess	miniMapRender -> alpha
>48456	Identifier	alpha
>48457	Identifier	miniMapRender
>48458	UnaryOperator	!
>48459	ExpressionStatement	 
>48460	CallExpression	miniMapRender -> alpha . interpolateTo ( 1 , 0.1f )
>48461	ArgumentList	1
>48462	Argument	0.1f
>48463	PrimaryExpression	0.1f
>48464	Argument	1
>48465	PrimaryExpression	1
>48466	Callee	miniMapRender -> alpha . interpolateTo
>48467	MemberAccess	miniMapRender -> alpha . interpolateTo
>48468	Identifier	interpolateTo
>48469	PtrMemberAccess	miniMapRender -> alpha
>48470	Identifier	alpha
>48471	Identifier	miniMapRender
>48472	Condition	 
>48473	EqualityExpression	miniMapRender -> alpha == 0
>48474	PrimaryExpression	0
>48475	PtrMemberAccess	miniMapRender -> alpha
>48476	Identifier	alpha
>48477	Identifier	miniMapRender
>48478	Condition	 
>48479	Identifier	miniMapRender
>48487	FunctionDef	Game 
>48488	ParameterList	int v
>48489	Parameter	 
>48490	Identifier	v
>48491	ParameterType	int
>48492	ReturnType	void
>48493	CompoundStatement	 
>48494	IfStatement	if ( miniMapRender )
>48495	CompoundStatement	 
>48496	IfStatement	if ( v == 0 )
>48497	ElseStatement	else
>48498	ExpressionStatement	 
>48499	CallExpression	miniMapRender -> alpha . interpolateTo ( 1 , 0.1f )
>48500	ArgumentList	1
>48501	Argument	0.1f
>48502	PrimaryExpression	0.1f
>48503	Argument	1
>48504	PrimaryExpression	1
>48505	Callee	miniMapRender -> alpha . interpolateTo
>48506	MemberAccess	miniMapRender -> alpha . interpolateTo
>48507	Identifier	interpolateTo
>48508	PtrMemberAccess	miniMapRender -> alpha
>48509	Identifier	alpha
>48510	Identifier	miniMapRender
>48511	ExpressionStatement	 
>48512	CallExpression	miniMapRender -> alpha . interpolateTo ( 0 , 0.1f )
>48513	ArgumentList	0
>48514	Argument	0.1f
>48515	PrimaryExpression	0.1f
>48516	Argument	0
>48517	PrimaryExpression	0
>48518	Callee	miniMapRender -> alpha . interpolateTo
>48519	MemberAccess	miniMapRender -> alpha . interpolateTo
>48520	Identifier	interpolateTo
>48521	PtrMemberAccess	miniMapRender -> alpha
>48522	Identifier	alpha
>48523	Identifier	miniMapRender
>48524	Condition	 
>48525	EqualityExpression	v == 0
>48526	PrimaryExpression	0
>48527	Identifier	v
>48528	Condition	 
>48529	Identifier	miniMapRender
>48537	FunctionDef	Game 
>48538	ParameterList	 
>48539	ReturnType	void
>48540	CompoundStatement	 
>48541	ExpressionStatement	 
>48542	CallExpression	gridRenderUser2 -> alpha . interpolateTo ( a , t )
>48543	ArgumentList	a
>48544	Argument	t
>48545	Identifier	t
>48546	Argument	a
>48547	Identifier	a
>48548	Callee	gridRenderUser2 -> alpha . interpolateTo
>48549	MemberAccess	gridRenderUser2 -> alpha . interpolateTo
>48550	Identifier	interpolateTo
>48551	PtrMemberAccess	gridRenderUser2 -> alpha
>48552	Identifier	alpha
>48553	Identifier	gridRenderUser2
>48554	ExpressionStatement	 
>48555	CallExpression	gridRenderUser1 -> alpha . interpolateTo ( a , t )
>48556	ArgumentList	a
>48557	Argument	t
>48558	Identifier	t
>48559	Argument	a
>48560	Identifier	a
>48561	Callee	gridRenderUser1 -> alpha . interpolateTo
>48562	MemberAccess	gridRenderUser1 -> alpha . interpolateTo
>48563	Identifier	interpolateTo
>48564	PtrMemberAccess	gridRenderUser1 -> alpha
>48565	Identifier	alpha
>48566	Identifier	gridRenderUser1
>48567	ExpressionStatement	 
>48568	CallExpression	gridRenderEnt -> alpha . interpolateTo ( a , t )
>48569	ArgumentList	a
>48570	Argument	t
>48571	Identifier	t
>48572	Argument	a
>48573	Identifier	a
>48574	Callee	gridRenderEnt -> alpha . interpolateTo
>48575	MemberAccess	gridRenderEnt -> alpha . interpolateTo
>48576	Identifier	interpolateTo
>48577	PtrMemberAccess	gridRenderEnt -> alpha
>48578	Identifier	alpha
>48579	Identifier	gridRenderEnt
>48580	ExpressionStatement	 
>48581	CallExpression	edgeRender -> alpha . interpolateTo ( a , t )
>48582	ArgumentList	a
>48583	Argument	t
>48584	Identifier	t
>48585	Argument	a
>48586	Identifier	a
>48587	Callee	edgeRender -> alpha . interpolateTo
>48588	MemberAccess	edgeRender -> alpha . interpolateTo
>48589	Identifier	interpolateTo
>48590	PtrMemberAccess	edgeRender -> alpha
>48591	Identifier	alpha
>48592	Identifier	edgeRender
>48593	ExpressionStatement	 
>48594	CallExpression	gridRender3 -> alpha . interpolateTo ( a , t )
>48595	ArgumentList	a
>48596	Argument	t
>48597	Identifier	t
>48598	Argument	a
>48599	Identifier	a
>48600	Callee	gridRender3 -> alpha . interpolateTo
>48601	MemberAccess	gridRender3 -> alpha . interpolateTo
>48602	Identifier	interpolateTo
>48603	PtrMemberAccess	gridRender3 -> alpha
>48604	Identifier	alpha
>48605	Identifier	gridRender3
>48606	ExpressionStatement	 
>48607	CallExpression	gridRender2 -> alpha . interpolateTo ( a , t )
>48608	ArgumentList	a
>48609	Argument	t
>48610	Identifier	t
>48611	Argument	a
>48612	Identifier	a
>48613	Callee	gridRender2 -> alpha . interpolateTo
>48614	MemberAccess	gridRender2 -> alpha . interpolateTo
>48615	Identifier	interpolateTo
>48616	PtrMemberAccess	gridRender2 -> alpha
>48617	Identifier	alpha
>48618	Identifier	gridRender2
>48619	ExpressionStatement	 
>48620	CallExpression	gridRender -> alpha . interpolateTo ( a , t )
>48621	ArgumentList	a
>48622	Argument	t
>48623	Identifier	t
>48624	Argument	a
>48625	Identifier	a
>48626	Callee	gridRender -> alpha . interpolateTo
>48627	MemberAccess	gridRender -> alpha . interpolateTo
>48628	Identifier	interpolateTo
>48629	PtrMemberAccess	gridRender -> alpha
>48630	Identifier	alpha
>48631	Identifier	gridRender
>48632	IfStatement	if ( gridRender -> alpha == 0 )
>48633	ExpressionStatement	 
>48634	AssignmentExpr	a = 0.5f
>48635	PrimaryExpression	0.5f
>48636	Identifier	a
>48637	Condition	 
>48638	EqualityExpression	gridRender -> alpha == 0
>48639	PrimaryExpression	0
>48640	PtrMemberAccess	gridRender -> alpha
>48641	Identifier	alpha
>48642	Identifier	gridRender
>48643	IdentifierDeclStatement	 
>48644	IdentifierDecl	a = 0
>48645	AssignmentExpr	a = 0
>48646	PrimaryExpression	0
>48647	Identifier	a
>48648	Identifier	a
>48649	IdentifierDeclType	float
>48650	IdentifierDeclStatement	 
>48651	IdentifierDecl	t = 0
>48652	AssignmentExpr	t = 0
>48653	PrimaryExpression	0
>48654	Identifier	t
>48655	Identifier	t
>48656	IdentifierDeclType	float
>48683	FunctionDef	Game 
>48684	ParameterList	const Vector & pos
>48685	Parameter	 
>48686	Identifier	pos
>48687	ParameterType	const Vector &
>48688	ReturnType	Vector
>48689	CompoundStatement	 
>48690	ReturnStatement	 
>48691	CallExpression	Vector ( pos . x - 400 * core -> invGlobalScale , pos . y - 300 * core -> invGlobalScale , 0 )
>48692	ArgumentList	pos . x - 400 * core -> invGlobalScale
>48693	Argument	0
>48694	PrimaryExpression	0
>48695	Argument	pos . y - 300 * core -> invGlobalScale
>48696	AdditiveExpression	pos . y - 300 * core -> invGlobalScale
>48697	MultiplicativeExpression	300 * core -> invGlobalScale
>48698	PtrMemberAccess	core -> invGlobalScale
>48699	Identifier	invGlobalScale
>48700	Identifier	core
>48701	PrimaryExpression	300
>48702	MemberAccess	pos . y
>48703	Identifier	y
>48704	Identifier	pos
>48705	Argument	pos . x - 400 * core -> invGlobalScale
>48706	AdditiveExpression	pos . x - 400 * core -> invGlobalScale
>48707	MultiplicativeExpression	400 * core -> invGlobalScale
>48708	PtrMemberAccess	core -> invGlobalScale
>48709	Identifier	invGlobalScale
>48710	Identifier	core
>48711	PrimaryExpression	400
>48712	MemberAccess	pos . x
>48713	Identifier	x
>48714	Identifier	pos
>48715	Callee	Vector
>48716	Identifier	Vector
>48727	FunctionDef	Game 
>48728	ParameterList	Quad * q , float speed
>48729	Parameter	 
>48730	Identifier	speed
>48731	ParameterType	float
>48732	Parameter	 
>48733	Identifier	q
>48734	ParameterType	Quad *
>48735	ReturnType	void
>48736	CompoundStatement	 
>48737	ExpressionStatement	 
>48738	AssignmentExpr	q -> lowerRightTextureCoordinates = Vector ( camx2 * backgroundImageRepeat , camy2 * backgroundImageRepeat )
>48739	CallExpression	Vector ( camx2 * backgroundImageRepeat , camy2 * backgroundImageRepeat )
>48740	ArgumentList	camx2 * backgroundImageRepeat
>48741	Argument	camy2 * backgroundImageRepeat
>48742	MultiplicativeExpression	camy2 * backgroundImageRepeat
>48743	Identifier	backgroundImageRepeat
>48744	Identifier	camy2
>48745	Argument	camx2 * backgroundImageRepeat
>48746	MultiplicativeExpression	camx2 * backgroundImageRepeat
>48747	Identifier	backgroundImageRepeat
>48748	Identifier	camx2
>48749	Callee	Vector
>48750	Identifier	Vector
>48751	PtrMemberAccess	q -> lowerRightTextureCoordinates
>48752	Identifier	lowerRightTextureCoordinates
>48753	Identifier	q
>48754	ExpressionStatement	 
>48755	AssignmentExpr	q -> upperLeftTextureCoordinates = Vector ( camx1 * backgroundImageRepeat , camy1 * backgroundImageRepeat )
>48756	CallExpression	Vector ( camx1 * backgroundImageRepeat , camy1 * backgroundImageRepeat )
>48757	ArgumentList	camx1 * backgroundImageRepeat
>48758	Argument	camy1 * backgroundImageRepeat
>48759	MultiplicativeExpression	camy1 * backgroundImageRepeat
>48760	Identifier	backgroundImageRepeat
>48761	Identifier	camy1
>48762	Argument	camx1 * backgroundImageRepeat
>48763	MultiplicativeExpression	camx1 * backgroundImageRepeat
>48764	Identifier	backgroundImageRepeat
>48765	Identifier	camx1
>48766	Callee	Vector
>48767	Identifier	Vector
>48768	PtrMemberAccess	q -> upperLeftTextureCoordinates
>48769	Identifier	upperLeftTextureCoordinates
>48770	Identifier	q
>48771	IdentifierDeclStatement	 
>48772	IdentifierDecl	camy2 = camy + float ( backgroundImageRepeat ) / 2.0f
>48773	AssignmentExpr	camy2 = camy + float ( backgroundImageRepeat ) / 2.0f
>48774	AdditiveExpression	camy + float ( backgroundImageRepeat ) / 2.0f
>48775	MultiplicativeExpression	float ( backgroundImageRepeat ) / 2.0f
>48776	PrimaryExpression	2.0f
>48777	CallExpression	float ( backgroundImageRepeat )
>48778	ArgumentList	backgroundImageRepeat
>48779	Argument	backgroundImageRepeat
>48780	Identifier	backgroundImageRepeat
>48781	Callee	float
>48782	Identifier	float
>48783	Identifier	camy
>48784	Identifier	camy2
>48785	Identifier	camy2
>48786	IdentifierDeclType	float
>48787	IdentifierDeclStatement	 
>48788	IdentifierDecl	camy1 = camy - float ( backgroundImageRepeat ) / 2.0f
>48789	AssignmentExpr	camy1 = camy - float ( backgroundImageRepeat ) / 2.0f
>48790	AdditiveExpression	camy - float ( backgroundImageRepeat ) / 2.0f
>48791	MultiplicativeExpression	float ( backgroundImageRepeat ) / 2.0f
>48792	PrimaryExpression	2.0f
>48793	CallExpression	float ( backgroundImageRepeat )
>48794	ArgumentList	backgroundImageRepeat
>48795	Argument	backgroundImageRepeat
>48796	Identifier	backgroundImageRepeat
>48797	Callee	float
>48798	Identifier	float
>48799	Identifier	camy
>48800	Identifier	camy1
>48801	Identifier	camy1
>48802	IdentifierDeclType	float
>48803	IdentifierDeclStatement	 
>48804	IdentifierDecl	camx2 = camx + float ( backgroundImageRepeat ) / 2.0f
>48805	AssignmentExpr	camx2 = camx + float ( backgroundImageRepeat ) / 2.0f
>48806	AdditiveExpression	camx + float ( backgroundImageRepeat ) / 2.0f
>48807	MultiplicativeExpression	float ( backgroundImageRepeat ) / 2.0f
>48808	PrimaryExpression	2.0f
>48809	CallExpression	float ( backgroundImageRepeat )
>48810	ArgumentList	backgroundImageRepeat
>48811	Argument	backgroundImageRepeat
>48812	Identifier	backgroundImageRepeat
>48813	Callee	float
>48814	Identifier	float
>48815	Identifier	camx
>48816	Identifier	camx2
>48817	Identifier	camx2
>48818	IdentifierDeclType	float
>48819	IdentifierDeclStatement	 
>48820	IdentifierDecl	camx1 = camx - float ( backgroundImageRepeat ) / 2.0f
>48821	AssignmentExpr	camx1 = camx - float ( backgroundImageRepeat ) / 2.0f
>48822	AdditiveExpression	camx - float ( backgroundImageRepeat ) / 2.0f
>48823	MultiplicativeExpression	float ( backgroundImageRepeat ) / 2.0f
>48824	PrimaryExpression	2.0f
>48825	CallExpression	float ( backgroundImageRepeat )
>48826	ArgumentList	backgroundImageRepeat
>48827	Argument	backgroundImageRepeat
>48828	Identifier	backgroundImageRepeat
>48829	Callee	float
>48830	Identifier	float
>48831	Identifier	camx
>48832	Identifier	camx1
>48833	Identifier	camx1
>48834	IdentifierDeclType	float
>48835	IdentifierDeclStatement	 
>48836	IdentifierDecl	camy = - ( core -> cameraPos . y / 600.0f ) * speed
>48837	AssignmentExpr	camy = - ( core -> cameraPos . y / 600.0f ) * speed
>48838	MultiplicativeExpression	- ( core -> cameraPos . y / 600.0f ) * speed
>48839	Identifier	speed
>48840	UnaryOp	- ( core -> cameraPos . y / 600.0f )
>48841	MultiplicativeExpression	core -> cameraPos . y / 600.0f
>48842	PrimaryExpression	600.0f
>48843	MemberAccess	core -> cameraPos . y
>48844	Identifier	y
>48845	PtrMemberAccess	core -> cameraPos
>48846	Identifier	cameraPos
>48847	Identifier	core
>48848	UnaryOperator	-
>48849	Identifier	camy
>48850	Identifier	camy
>48851	IdentifierDeclType	float
>48852	IdentifierDeclStatement	 
>48853	IdentifierDecl	camx = ( core -> cameraPos . x / 800.0f ) * speed
>48854	AssignmentExpr	camx = ( core -> cameraPos . x / 800.0f ) * speed
>48855	MultiplicativeExpression	( core -> cameraPos . x / 800.0f ) * speed
>48856	Identifier	speed
>48857	MultiplicativeExpression	core -> cameraPos . x / 800.0f
>48858	PrimaryExpression	800.0f
>48859	MemberAccess	core -> cameraPos . x
>48860	Identifier	x
>48861	PtrMemberAccess	core -> cameraPos
>48862	Identifier	cameraPos
>48863	Identifier	core
>48864	Identifier	camx
>48865	Identifier	camx
>48866	IdentifierDeclType	float
>48867	ExpressionStatement	 
>48868	AssignmentExpr	q -> texture -> repeat = true
>48869	Identifier	true
>48870	PtrMemberAccess	q -> texture -> repeat
>48871	Identifier	repeat
>48872	PtrMemberAccess	q -> texture
>48873	Identifier	texture
>48874	Identifier	q
>48875	ExpressionStatement	 
>48876	AssignmentExpr	q -> followCamera = 1
>48877	PrimaryExpression	1
>48878	PtrMemberAccess	q -> followCamera
>48879	Identifier	followCamera
>48880	Identifier	q
>48909	FunctionDef	Game 
>48910	ParameterList	Vector * position
>48911	Parameter	 
>48912	Identifier	position
>48913	ParameterType	Vector *
>48914	ReturnType	void
>48915	CompoundStatement	 
>48916	ExpressionStatement	 
>48917	AssignmentExpr	cameraFollowEntity = 0
>48918	PrimaryExpression	0
>48919	Identifier	cameraFollowEntity
>48920	ExpressionStatement	 
>48921	AssignmentExpr	cameraFollowObject = 0
>48922	PrimaryExpression	0
>48923	Identifier	cameraFollowObject
>48924	ExpressionStatement	 
>48925	AssignmentExpr	cameraFollow = position
>48926	Identifier	position
>48927	Identifier	cameraFollow
>48935	FunctionDef	Game 
>48936	ParameterList	RenderObject * r
>48937	Parameter	 
>48938	Identifier	r
>48939	ParameterType	RenderObject *
>48940	ReturnType	void
>48941	CompoundStatement	 
>48942	ExpressionStatement	 
>48943	AssignmentExpr	cameraFollowEntity = 0
>48944	PrimaryExpression	0
>48945	Identifier	cameraFollowEntity
>48946	ExpressionStatement	 
>48947	AssignmentExpr	cameraFollowObject = r
>48948	Identifier	r
>48949	Identifier	cameraFollowObject
>48950	ExpressionStatement	 
>48951	AssignmentExpr	cameraFollow = & r -> position
>48952	UnaryOp	& r -> position
>48953	PtrMemberAccess	r -> position
>48954	Identifier	position
>48955	Identifier	r
>48956	UnaryOperator	&
>48957	Identifier	cameraFollow
>48967	FunctionDef	Game 
>48968	ParameterList	Entity * e
>48969	Parameter	 
>48970	Identifier	e
>48971	ParameterType	Entity *
>48972	ReturnType	void
>48973	CompoundStatement	 
>48974	ExpressionStatement	 
>48975	AssignmentExpr	cameraFollowEntity = e
>48976	Identifier	e
>48977	Identifier	cameraFollowEntity
>48978	ExpressionStatement	 
>48979	AssignmentExpr	cameraFollowObject = 0
>48980	PrimaryExpression	0
>48981	Identifier	cameraFollowObject
>48982	ExpressionStatement	 
>48983	AssignmentExpr	cameraFollow = & e -> position
>48984	UnaryOp	& e -> position
>48985	PtrMemberAccess	e -> position
>48986	Identifier	position
>48987	Identifier	e
>48988	UnaryOperator	&
>48989	Identifier	cameraFollow
>48999	FunctionDef	Game 
>49000	ParameterList	float dt
>49001	Parameter	 
>49002	Identifier	dt
>49003	ParameterType	float
>49004	ReturnType	void
>49005	CompoundStatement	 
>49010	FunctionDef	Game 
>49011	ParameterList	 
>49012	ReturnType	void
>49013	CompoundStatement	 
>49014	ExpressionStatement	 
>49015	CallExpression	dsq -> screenTransition -> transition ( MENUPAGETRANSTIME )
>49016	ArgumentList	MENUPAGETRANSTIME
>49017	Argument	MENUPAGETRANSTIME
>49018	Identifier	MENUPAGETRANSTIME
>49019	Callee	dsq -> screenTransition -> transition
>49020	PtrMemberAccess	dsq -> screenTransition -> transition
>49021	Identifier	transition
>49022	PtrMemberAccess	dsq -> screenTransition
>49023	Identifier	screenTransition
>49024	Identifier	dsq
>49025	ExpressionStatement	 
>49026	CallExpression	toggleOptionsMenu ( true )
>49027	ArgumentList	true
>49028	Argument	true
>49029	Identifier	true
>49030	Callee	toggleOptionsMenu
>49031	Identifier	toggleOptionsMenu
>49032	ExpressionStatement	 
>49033	CallExpression	dsq -> screenTransition -> capture ( )
>49034	ArgumentList	 
>49035	Callee	dsq -> screenTransition -> capture
>49036	PtrMemberAccess	dsq -> screenTransition -> capture
>49037	Identifier	capture
>49038	PtrMemberAccess	dsq -> screenTransition
>49039	Identifier	screenTransition
>49040	Identifier	dsq
>49049	FunctionDef	Game 
>49050	ParameterList	 
>49051	ReturnType	void
>49052	CompoundStatement	 
>49053	IfStatement	if ( keyConfigMenu )
>49054	ElseStatement	else
>49055	CompoundStatement	 
>49056	IfStatement	if ( optionsOnly )
>49057	ElseStatement	else
>49058	CompoundStatement	 
>49059	ExpressionStatement	 
>49060	CallExpression	dsq -> screenTransition -> transition ( MENUPAGETRANSTIME )
>49061	ArgumentList	MENUPAGETRANSTIME
>49062	Argument	MENUPAGETRANSTIME
>49063	Identifier	MENUPAGETRANSTIME
>49064	Callee	dsq -> screenTransition -> transition
>49065	PtrMemberAccess	dsq -> screenTransition -> transition
>49066	Identifier	transition
>49067	PtrMemberAccess	dsq -> screenTransition
>49068	Identifier	screenTransition
>49069	Identifier	dsq
>49070	ExpressionStatement	 
>49071	CallExpression	toggleOptionsMenu ( false )
>49072	ArgumentList	false
>49073	Argument	false
>49074	Identifier	false
>49075	Callee	toggleOptionsMenu
>49076	Identifier	toggleOptionsMenu
>49077	ExpressionStatement	 
>49078	CallExpression	dsq -> screenTransition -> capture ( )
>49079	ArgumentList	 
>49080	Callee	dsq -> screenTransition -> capture
>49081	PtrMemberAccess	dsq -> screenTransition -> capture
>49082	Identifier	capture
>49083	PtrMemberAccess	dsq -> screenTransition
>49084	Identifier	screenTransition
>49085	Identifier	dsq
>49086	CompoundStatement	 
>49087	ExpressionStatement	 
>49088	CallExpression	hideInGameMenu ( )
>49089	ArgumentList	 
>49090	Callee	hideInGameMenu
>49091	Identifier	hideInGameMenu
>49092	Condition	 
>49093	Identifier	optionsOnly
>49094	CompoundStatement	 
>49095	ExpressionStatement	 
>49096	CallExpression	dsq -> screenTransition -> transition ( MENUPAGETRANSTIME )
>49097	ArgumentList	MENUPAGETRANSTIME
>49098	Argument	MENUPAGETRANSTIME
>49099	Identifier	MENUPAGETRANSTIME
>49100	Callee	dsq -> screenTransition -> transition
>49101	PtrMemberAccess	dsq -> screenTransition -> transition
>49102	Identifier	transition
>49103	PtrMemberAccess	dsq -> screenTransition
>49104	Identifier	screenTransition
>49105	Identifier	dsq
>49106	ExpressionStatement	 
>49107	CallExpression	toggleOptionsMenu ( true , false , true )
>49108	ArgumentList	true
>49109	Argument	true
>49110	Identifier	true
>49111	Argument	false
>49112	Identifier	false
>49113	Argument	true
>49114	Identifier	true
>49115	Callee	toggleOptionsMenu
>49116	Identifier	toggleOptionsMenu
>49117	ExpressionStatement	 
>49118	CallExpression	toggleKeyConfigMenu ( false )
>49119	ArgumentList	false
>49120	Argument	false
>49121	Identifier	false
>49122	Callee	toggleKeyConfigMenu
>49123	Identifier	toggleKeyConfigMenu
>49124	ExpressionStatement	 
>49125	CallExpression	dsq -> screenTransition -> capture ( )
>49126	ArgumentList	 
>49127	Callee	dsq -> screenTransition -> capture
>49128	PtrMemberAccess	dsq -> screenTransition -> capture
>49129	Identifier	capture
>49130	PtrMemberAccess	dsq -> screenTransition
>49131	Identifier	screenTransition
>49132	Identifier	dsq
>49133	ExpressionStatement	 
>49134	AssignmentExpr	AquariaKeyConfig 
>49135	PrimaryExpression	0
>49136	Identifier	AquariaKeyConfig 
>49137	Condition	 
>49138	Identifier	keyConfigMenu
>49139	IfStatement	if ( ! keyConfigMenu )
>49140	ExpressionStatement	 
>49141	CallExpression	dsq -> user . save ( )
>49142	ArgumentList	 
>49143	Callee	dsq -> user . save
>49144	MemberAccess	dsq -> user . save
>49145	Identifier	save
>49146	PtrMemberAccess	dsq -> user
>49147	Identifier	user
>49148	Identifier	dsq
>49149	Condition	 
>49150	UnaryOp	! keyConfigMenu
>49151	Identifier	keyConfigMenu
>49152	UnaryOperator	!
>49153	IfStatement	if ( dsq -> user . video . resx != dsq -> user_backup . video . resx || dsq -> user . video . resy != dsq -> user_\
>49154	CompoundStatement	 
>49155	IfStatement	if ( dsq -> confirm ( \"\" , \"graphics\" , false , 10 ) )
>49156	ElseStatement	else
>49157	CompoundStatement	 
>49158	ExpressionStatement	 
>49159	CallExpression	dsq -> resetGraphics ( dsq -> user . video . resx , dsq -> user . video . resy , dsq -> user . video . full )
>49160	ArgumentList	dsq -> user . video . resx
>49161	Argument	dsq -> user . video . full
>49162	MemberAccess	dsq -> user . video . full
>49163	Identifier	full
>49164	MemberAccess	dsq -> user . video
>49165	Identifier	video
>49166	PtrMemberAccess	dsq -> user
>49167	Identifier	user
>49168	Identifier	dsq
>49169	Argument	dsq -> user . video . resy
>49170	MemberAccess	dsq -> user . video . resy
>49171	Identifier	resy
>49172	MemberAccess	dsq -> user . video
>49173	Identifier	video
>49174	PtrMemberAccess	dsq -> user
>49175	Identifier	user
>49176	Identifier	dsq
>49177	Argument	dsq -> user . video . resx
>49178	MemberAccess	dsq -> user . video . resx
>49179	Identifier	resx
>49180	MemberAccess	dsq -> user . video
>49181	Identifier	video
>49182	PtrMemberAccess	dsq -> user
>49183	Identifier	user
>49184	Identifier	dsq
>49185	Callee	dsq -> resetGraphics
>49186	PtrMemberAccess	dsq -> resetGraphics
>49187	Identifier	resetGraphics
>49188	Identifier	dsq
>49189	ExpressionStatement	 
>49190	CallExpression	dsq -> user . apply ( )
>49191	ArgumentList	 
>49192	Callee	dsq -> user . apply
>49193	MemberAccess	dsq -> user . apply
>49194	Identifier	apply
>49195	PtrMemberAccess	dsq -> user
>49196	Identifier	user
>49197	Identifier	dsq
>49198	ExpressionStatement	 
>49199	AssignmentExpr	dsq -> user . video . vsync = dsq -> user_backup . video . vsync
>49200	MemberAccess	dsq -> user_backup . video . vsync
>49201	Identifier	vsync
>49202	MemberAccess	dsq -> user_backup . video
>49203	Identifier	video
>49204	PtrMemberAccess	dsq -> user_backup
>49205	Identifier	user_backup
>49206	Identifier	dsq
>49207	MemberAccess	dsq -> user . video . vsync
>49208	Identifier	vsync
>49209	MemberAccess	dsq -> user . video
>49210	Identifier	video
>49211	PtrMemberAccess	dsq -> user
>49212	Identifier	user
>49213	Identifier	dsq
>49214	ExpressionStatement	 
>49215	AssignmentExpr	dsq -> user . video . full = dsq -> user_backup . video . full
>49216	MemberAccess	dsq -> user_backup . video . full
>49217	Identifier	full
>49218	MemberAccess	dsq -> user_backup . video
>49219	Identifier	video
>49220	PtrMemberAccess	dsq -> user_backup
>49221	Identifier	user_backup
>49222	Identifier	dsq
>49223	MemberAccess	dsq -> user . video . full
>49224	Identifier	full
>49225	MemberAccess	dsq -> user . video
>49226	Identifier	video
>49227	PtrMemberAccess	dsq -> user
>49228	Identifier	user
>49229	Identifier	dsq
>49230	ExpressionStatement	 
>49231	AssignmentExpr	dsq -> user . video . bits = dsq -> user_backup . video . bits
>49232	MemberAccess	dsq -> user_backup . video . bits
>49233	Identifier	bits
>49234	MemberAccess	dsq -> user_backup . video
>49235	Identifier	video
>49236	PtrMemberAccess	dsq -> user_backup
>49237	Identifier	user_backup
>49238	Identifier	dsq
>49239	MemberAccess	dsq -> user . video . bits
>49240	Identifier	bits
>49241	MemberAccess	dsq -> user . video
>49242	Identifier	video
>49243	PtrMemberAccess	dsq -> user
>49244	Identifier	user
>49245	Identifier	dsq
>49246	ExpressionStatement	 
>49247	AssignmentExpr	dsq -> user . video . resy = dsq -> user_backup . video . resy
>49248	MemberAccess	dsq -> user_backup . video . resy
>49249	Identifier	resy
>49250	MemberAccess	dsq -> user_backup . video
>49251	Identifier	video
>49252	PtrMemberAccess	dsq -> user_backup
>49253	Identifier	user_backup
>49254	Identifier	dsq
>49255	MemberAccess	dsq -> user . video . resy
>49256	Identifier	resy
>49257	MemberAccess	dsq -> user . video
>49258	Identifier	video
>49259	PtrMemberAccess	dsq -> user
>49260	Identifier	user
>49261	Identifier	dsq
>49262	ExpressionStatement	 
>49263	AssignmentExpr	dsq -> user . video . resx = dsq -> user_backup . video . resx
>49264	MemberAccess	dsq -> user_backup . video . resx
>49265	Identifier	resx
>49266	MemberAccess	dsq -> user_backup . video
>49267	Identifier	video
>49268	PtrMemberAccess	dsq -> user_backup
>49269	Identifier	user_backup
>49270	Identifier	dsq
>49271	MemberAccess	dsq -> user . video . resx
>49272	Identifier	resx
>49273	MemberAccess	dsq -> user . video
>49274	Identifier	video
>49275	PtrMemberAccess	dsq -> user
>49276	Identifier	user
>49277	Identifier	dsq
>49278	CompoundStatement	 
>49279	Condition	 
>49280	CallExpression	dsq -> confirm ( \"\" , \"graphics\" , false , 10 )
>49281	ArgumentList	\"\"
>49282	Argument	10
>49283	PrimaryExpression	10
>49284	Argument	false
>49285	Identifier	false
>49286	Argument	\"graphics\"
>49287	PrimaryExpression	\"graphics\"
>49288	Argument	\"\"
>49289	PrimaryExpression	\"\"
>49290	Callee	dsq -> confirm
>49291	PtrMemberAccess	dsq -> confirm
>49292	Identifier	confirm
>49293	Identifier	dsq
>49294	ExpressionStatement	 
>49295	CallExpression	dsq -> resetGraphics ( dsq -> user . video . resx , dsq -> user . video . resy , dsq -> user . video . full )
>49296	ArgumentList	dsq -> user . video . resx
>49297	Argument	dsq -> user . video . full
>49298	MemberAccess	dsq -> user . video . full
>49299	Identifier	full
>49300	MemberAccess	dsq -> user . video
>49301	Identifier	video
>49302	PtrMemberAccess	dsq -> user
>49303	Identifier	user
>49304	Identifier	dsq
>49305	Argument	dsq -> user . video . resy
>49306	MemberAccess	dsq -> user . video . resy
>49307	Identifier	resy
>49308	MemberAccess	dsq -> user . video
>49309	Identifier	video
>49310	PtrMemberAccess	dsq -> user
>49311	Identifier	user
>49312	Identifier	dsq
>49313	Argument	dsq -> user . video . resx
>49314	MemberAccess	dsq -> user . video . resx
>49315	Identifier	resx
>49316	MemberAccess	dsq -> user . video
>49317	Identifier	video
>49318	PtrMemberAccess	dsq -> user
>49319	Identifier	user
>49320	Identifier	dsq
>49321	Callee	dsq -> resetGraphics
>49322	PtrMemberAccess	dsq -> resetGraphics
>49323	Identifier	resetGraphics
>49324	Identifier	dsq
>49325	Condition	 
>49326	OrExpression	dsq -> user . video . resx != dsq -> user_backup . video . resx || dsq -> user . video . resy != dsq \
>49327	OrExpression	dsq -> user . video . resy != dsq -> user_backup . video . resy || dsq -> user . video . bits != dsq \
>49328	OrExpression	dsq -> user . video . bits != dsq -> user_backup . video . bits || dsq -> user . video . full != dsq \
>49329	OrExpression	dsq -> user . video . full != dsq -> user_backup . video . full || dsq -> user . video . vsync != dsq \
>49330	EqualityExpression	dsq -> user . video . vsync != dsq -> user_backup . video . vsync
>49331	MemberAccess	dsq -> user_backup . video . vsync
>49332	Identifier	vsync
>49333	MemberAccess	dsq -> user_backup . video
>49334	Identifier	video
>49335	PtrMemberAccess	dsq -> user_backup
>49336	Identifier	user_backup
>49337	Identifier	dsq
>49338	MemberAccess	dsq -> user . video . vsync
>49339	Identifier	vsync
>49340	MemberAccess	dsq -> user . video
>49341	Identifier	video
>49342	PtrMemberAccess	dsq -> user
>49343	Identifier	user
>49344	Identifier	dsq
>49345	EqualityExpression	dsq -> user . video . full != dsq -> user_backup . video . full
>49346	MemberAccess	dsq -> user_backup . video . full
>49347	Identifier	full
>49348	MemberAccess	dsq -> user_backup . video
>49349	Identifier	video
>49350	PtrMemberAccess	dsq -> user_backup
>49351	Identifier	user_backup
>49352	Identifier	dsq
>49353	MemberAccess	dsq -> user . video . full
>49354	Identifier	full
>49355	MemberAccess	dsq -> user . video
>49356	Identifier	video
>49357	PtrMemberAccess	dsq -> user
>49358	Identifier	user
>49359	Identifier	dsq
>49360	EqualityExpression	dsq -> user . video . bits != dsq -> user_backup . video . bits
>49361	MemberAccess	dsq -> user_backup . video . bits
>49362	Identifier	bits
>49363	MemberAccess	dsq -> user_backup . video
>49364	Identifier	video
>49365	PtrMemberAccess	dsq -> user_backup
>49366	Identifier	user_backup
>49367	Identifier	dsq
>49368	MemberAccess	dsq -> user . video . bits
>49369	Identifier	bits
>49370	MemberAccess	dsq -> user . video
>49371	Identifier	video
>49372	PtrMemberAccess	dsq -> user
>49373	Identifier	user
>49374	Identifier	dsq
>49375	EqualityExpression	dsq -> user . video . resy != dsq -> user_backup . video . resy
>49376	MemberAccess	dsq -> user_backup . video . resy
>49377	Identifier	resy
>49378	MemberAccess	dsq -> user_backup . video
>49379	Identifier	video
>49380	PtrMemberAccess	dsq -> user_backup
>49381	Identifier	user_backup
>49382	Identifier	dsq
>49383	MemberAccess	dsq -> user . video . resy
>49384	Identifier	resy
>49385	MemberAccess	dsq -> user . video
>49386	Identifier	video
>49387	PtrMemberAccess	dsq -> user
>49388	Identifier	user
>49389	Identifier	dsq
>49390	EqualityExpression	dsq -> user . video . resx != dsq -> user_backup . video . resx
>49391	MemberAccess	dsq -> user_backup . video . resx
>49392	Identifier	resx
>49393	MemberAccess	dsq -> user_backup . video
>49394	Identifier	video
>49395	PtrMemberAccess	dsq -> user_backup
>49396	Identifier	user_backup
>49397	Identifier	dsq
>49398	MemberAccess	dsq -> user . video . resx
>49399	Identifier	resx
>49400	MemberAccess	dsq -> user . video
>49401	Identifier	video
>49402	PtrMemberAccess	dsq -> user
>49403	Identifier	user
>49404	Identifier	dsq
>49405	ExpressionStatement	 
>49406	CallExpression	dsq -> user . apply ( )
>49407	ArgumentList	 
>49408	Callee	dsq -> user . apply
>49409	MemberAccess	dsq -> user . apply
>49410	Identifier	apply
>49411	PtrMemberAccess	dsq -> user
>49412	Identifier	user
>49413	Identifier	dsq
>49441	FunctionDef	Game 
>49442	ParameterList	 
>49443	ReturnType	void
>49444	CompoundStatement	 
>49445	IfStatement	if ( keyConfigMenu )
>49446	ElseStatement	else
>49447	CompoundStatement	 
>49448	IfStatement	if ( optionsOnly )
>49449	ElseStatement	else
>49450	CompoundStatement	 
>49451	ExpressionStatement	 
>49452	CallExpression	dsq -> screenTransition -> transition ( MENUPAGETRANSTIME )
>49453	ArgumentList	MENUPAGETRANSTIME
>49454	Argument	MENUPAGETRANSTIME
>49455	Identifier	MENUPAGETRANSTIME
>49456	Callee	dsq -> screenTransition -> transition
>49457	PtrMemberAccess	dsq -> screenTransition -> transition
>49458	Identifier	transition
>49459	PtrMemberAccess	dsq -> screenTransition
>49460	Identifier	screenTransition
>49461	Identifier	dsq
>49462	ExpressionStatement	 
>49463	CallExpression	toggleOptionsMenu ( false )
>49464	ArgumentList	false
>49465	Argument	false
>49466	Identifier	false
>49467	Callee	toggleOptionsMenu
>49468	Identifier	toggleOptionsMenu
>49469	ExpressionStatement	 
>49470	CallExpression	dsq -> screenTransition -> capture ( )
>49471	ArgumentList	 
>49472	Callee	dsq -> screenTransition -> capture
>49473	PtrMemberAccess	dsq -> screenTransition -> capture
>49474	Identifier	capture
>49475	PtrMemberAccess	dsq -> screenTransition
>49476	Identifier	screenTransition
>49477	Identifier	dsq
>49478	CompoundStatement	 
>49479	ExpressionStatement	 
>49480	CallExpression	hideInGameMenu ( )
>49481	ArgumentList	 
>49482	Callee	hideInGameMenu
>49483	Identifier	hideInGameMenu
>49484	Condition	 
>49485	Identifier	optionsOnly
>49486	CompoundStatement	 
>49487	ExpressionStatement	 
>49488	CallExpression	dsq -> screenTransition -> transition ( MENUPAGETRANSTIME )
>49489	ArgumentList	MENUPAGETRANSTIME
>49490	Argument	MENUPAGETRANSTIME
>49491	Identifier	MENUPAGETRANSTIME
>49492	Callee	dsq -> screenTransition -> transition
>49493	PtrMemberAccess	dsq -> screenTransition -> transition
>49494	Identifier	transition
>49495	PtrMemberAccess	dsq -> screenTransition
>49496	Identifier	screenTransition
>49497	Identifier	dsq
>49498	ExpressionStatement	 
>49499	CallExpression	toggleOptionsMenu ( true , true , true )
>49500	ArgumentList	true
>49501	Argument	true
>49502	Identifier	true
>49503	Argument	true
>49504	Identifier	true
>49505	Argument	true
>49506	Identifier	true
>49507	Callee	toggleOptionsMenu
>49508	Identifier	toggleOptionsMenu
>49509	ExpressionStatement	 
>49510	CallExpression	toggleKeyConfigMenu ( false )
>49511	ArgumentList	false
>49512	Argument	false
>49513	Identifier	false
>49514	Callee	toggleKeyConfigMenu
>49515	Identifier	toggleKeyConfigMenu
>49516	ExpressionStatement	 
>49517	CallExpression	dsq -> screenTransition -> capture ( )
>49518	ArgumentList	 
>49519	Callee	dsq -> screenTransition -> capture
>49520	PtrMemberAccess	dsq -> screenTransition -> capture
>49521	Identifier	capture
>49522	PtrMemberAccess	dsq -> screenTransition
>49523	Identifier	screenTransition
>49524	Identifier	dsq
>49525	ExpressionStatement	 
>49526	AssignmentExpr	AquariaKeyConfig 
>49527	PrimaryExpression	0
>49528	Identifier	AquariaKeyConfig 
>49529	Condition	 
>49530	Identifier	keyConfigMenu
>49531	ExpressionStatement	 
>49532	CallExpression	dsq -> user . apply ( )
>49533	ArgumentList	 
>49534	Callee	dsq -> user . apply
>49535	MemberAccess	dsq -> user . apply
>49536	Identifier	apply
>49537	PtrMemberAccess	dsq -> user
>49538	Identifier	user
>49539	Identifier	dsq
>49540	IfStatement	if ( ! keyConfigMenu )
>49541	ElseStatement	else
>49542	CompoundStatement	 
>49543	ExpressionStatement	 
>49544	AssignmentExpr	dsq -> user . control . actionSet = dsq -> user_bcontrol . control . actionSet
>49545	MemberAccess	dsq -> user_bcontrol . control . actionSet
>49546	Identifier	actionSet
>49547	MemberAccess	dsq -> user_bcontrol . control
>49548	Identifier	control
>49549	PtrMemberAccess	dsq -> user_bcontrol
>49550	Identifier	user_bcontrol
>49551	Identifier	dsq
>49552	MemberAccess	dsq -> user . control . actionSet
>49553	Identifier	actionSet
>49554	MemberAccess	dsq -> user . control
>49555	Identifier	control
>49556	PtrMemberAccess	dsq -> user
>49557	Identifier	user
>49558	Identifier	dsq
>49559	CompoundStatement	 
>49560	ExpressionStatement	 
>49561	AssignmentExpr	dsq -> user = dsq -> user_backup
>49562	PtrMemberAccess	dsq -> user_backup
>49563	Identifier	user_backup
>49564	Identifier	dsq
>49565	PtrMemberAccess	dsq -> user
>49566	Identifier	user
>49567	Identifier	dsq
>49568	Condition	 
>49569	UnaryOp	! keyConfigMenu
>49570	Identifier	keyConfigMenu
>49571	UnaryOperator	!
>49591	FunctionDef	Game 
>49592	ParameterList	bool effects
>49593	Parameter	 
>49594	Identifier	effects
>49595	ParameterType	bool
>49596	ReturnType	void
>49597	CompoundStatement	 
>49598	ForStatement	for ( int i = 0 ; i < foodSlots . size ( ) ; i ++ )
>49599	CompoundStatement	 
>49600	ExpressionStatement	 
>49601	CallExpression	foodSlots [ i ] -> refresh ( effects )
>49602	ArgumentList	effects
>49603	Argument	effects
>49604	Identifier	effects
>49605	Callee	foodSlots [ i ] -> refresh
>49606	PtrMemberAccess	foodSlots [ i ] -> refresh
>49607	Identifier	refresh
>49608	ArrayIndexing	foodSlots [ i ]
>49609	Identifier	i
>49610	Identifier	foodSlots
>49611	IncDecOp	 
>49612	IncDec	++
>49613	Identifier	i
>49614	Condition	 
>49615	RelationalExpression	i < foodSlots . size ( )
>49616	CallExpression	foodSlots . size ( )
>49617	ArgumentList	 
>49618	Callee	foodSlots . size
>49619	MemberAccess	foodSlots . size
>49620	Identifier	size
>49621	Identifier	foodSlots
>49622	Identifier	i
>49623	ForInit	 
>49624	IdentifierDeclStatement	int i = 0 ;
>49625	IdentifierDecl	i = 0
>49626	AssignmentExpr	i = 0
>49627	PrimaryExpression	0
>49628	Identifier	i
>49629	Identifier	i
>49630	IdentifierDeclType	int
>49640	FunctionDef	Game 
>49641	ParameterList	 
>49642	ReturnType	void
>49643	CompoundStatement	 
>49644	ForStatement	for ( int i = 0 ; i < treasureSlots . size ( ) ; i ++ )
>49645	CompoundStatement	 
>49646	ExpressionStatement	 
>49647	CallExpression	treasureSlots [ i ] -> refresh ( )
>49648	ArgumentList	 
>49649	Callee	treasureSlots [ i ] -> refresh
>49650	PtrMemberAccess	treasureSlots [ i ] -> refresh
>49651	Identifier	refresh
>49652	ArrayIndexing	treasureSlots [ i ]
>49653	Identifier	i
>49654	Identifier	treasureSlots
>49655	IncDecOp	 
>49656	IncDec	++
>49657	Identifier	i
>49658	Condition	 
>49659	RelationalExpression	i < treasureSlots . size ( )
>49660	CallExpression	treasureSlots . size ( )
>49661	ArgumentList	 
>49662	Callee	treasureSlots . size
>49663	MemberAccess	treasureSlots . size
>49664	Identifier	size
>49665	Identifier	treasureSlots
>49666	Identifier	i
>49667	ForInit	 
>49668	IdentifierDeclStatement	int i = 0 ;
>49669	IdentifierDecl	i = 0
>49670	AssignmentExpr	i = 0
>49671	PrimaryExpression	0
>49672	Identifier	i
>49673	Identifier	i
>49674	IdentifierDeclType	int
>49683	FunctionDef	Game 
>49684	ParameterList	bool f
>49685	Parameter	 
>49686	Identifier	f
>49687	ParameterType	bool
>49688	ReturnType	void
>49689	CompoundStatement	 
>49690	ExpressionStatement	 
>49691	AssignmentExpr	petMenu = f
>49692	Identifier	f
>49693	Identifier	petMenu
>49694	IfStatement	if ( f && ! petMenu )
>49695	ElseStatement	else
>49696	IfStatement	if ( ! f && petMenu )
>49697	CompoundStatement	 
>49698	ExpressionStatement	 
>49699	CallExpression	menu [ 0 ] -> setDirMove ( DIR_UP , 0 )
>49700	ArgumentList	DIR_UP
>49701	Argument	0
>49702	PrimaryExpression	0
>49703	Argument	DIR_UP
>49704	Identifier	DIR_UP
>49705	Callee	menu [ 0 ] -> setDirMove
>49706	PtrMemberAccess	menu [ 0 ] -> setDirMove
>49707	Identifier	setDirMove
>49708	ArrayIndexing	menu [ 0 ]
>49709	PrimaryExpression	0
>49710	Identifier	menu
>49711	ExpressionStatement	 
>49712	CallExpression	menu [ 5 ] -> setDirMove ( DIR_UP , 0 )
>49713	ArgumentList	DIR_UP
>49714	Argument	0
>49715	PrimaryExpression	0
>49716	Argument	DIR_UP
>49717	Identifier	DIR_UP
>49718	Callee	menu [ 5 ] -> setDirMove
>49719	PtrMemberAccess	menu [ 5 ] -> setDirMove
>49720	Identifier	setDirMove
>49721	ArrayIndexing	menu [ 5 ]
>49722	PrimaryExpression	5
>49723	Identifier	menu
>49724	ExpressionStatement	 
>49725	CallExpression	menu [ 5 ] -> setDirMove ( DIR_LEFT , 0 )
>49726	ArgumentList	DIR_LEFT
>49727	Argument	0
>49728	PrimaryExpression	0
>49729	Argument	DIR_LEFT
>49730	Identifier	DIR_LEFT
>49731	Callee	menu [ 5 ] -> setDirMove
>49732	PtrMemberAccess	menu [ 5 ] -> setDirMove
>49733	Identifier	setDirMove
>49734	ArrayIndexing	menu [ 5 ]
>49735	PrimaryExpression	5
>49736	Identifier	menu
>49737	ExpressionStatement	 
>49738	AssignmentExpr	liCrystal -> alpha = 0
>49739	PrimaryExpression	0
>49740	PtrMemberAccess	liCrystal -> alpha
>49741	Identifier	alpha
>49742	Identifier	liCrystal
>49743	ForStatement	for ( int i = 0 ; i < petTips . size ( ) ; i ++ )
>49744	CompoundStatement	 
>49745	ExpressionStatement	 
>49746	AssignmentExpr	petTips [ i ] -> alpha = 0
>49747	PrimaryExpression	0
>49748	PtrMemberAccess	petTips [ i ] -> alpha
>49749	Identifier	alpha
>49750	ArrayIndexing	petTips [ i ]
>49751	Identifier	i
>49752	Identifier	petTips
>49753	IncDecOp	 
>49754	IncDec	++
>49755	Identifier	i
>49756	Condition	 
>49757	RelationalExpression	i < petTips . size ( )
>49758	CallExpression	petTips . size ( )
>49759	ArgumentList	 
>49760	Callee	petTips . size
>49761	MemberAccess	petTips . size
>49762	Identifier	size
>49763	Identifier	petTips
>49764	Identifier	i
>49765	ForInit	 
>49766	IdentifierDeclStatement	int i = 0 ;
>49767	IdentifierDecl	i = 0
>49768	AssignmentExpr	i = 0
>49769	PrimaryExpression	0
>49770	Identifier	i
>49771	Identifier	i
>49772	IdentifierDeclType	int
>49773	ForStatement	for ( int i = 0 ; i < petSlots . size ( ) ; i ++ )
>49774	CompoundStatement	 
>49775	ExpressionStatement	 
>49776	AssignmentExpr	petSlots [ i ] -> alpha = 0
>49777	PrimaryExpression	0
>49778	PtrMemberAccess	petSlots [ i ] -> alpha
>49779	Identifier	alpha
>49780	ArrayIndexing	petSlots [ i ]
>49781	Identifier	i
>49782	Identifier	petSlots
>49783	IncDecOp	 
>49784	IncDec	++
>49785	Identifier	i
>49786	Condition	 
>49787	RelationalExpression	i < petSlots . size ( )
>49788	CallExpression	petSlots . size ( )
>49789	ArgumentList	 
>49790	Callee	petSlots . size
>49791	MemberAccess	petSlots . size
>49792	Identifier	size
>49793	Identifier	petSlots
>49794	Identifier	i
>49795	ForInit	 
>49796	IdentifierDeclStatement	int i = 0 ;
>49797	IdentifierDecl	i = 0
>49798	AssignmentExpr	i = 0
>49799	PrimaryExpression	0
>49800	Identifier	i
>49801	Identifier	i
>49802	IdentifierDeclType	int
>49803	Condition	 
>49804	AndExpression	! f && petMenu
>49805	Identifier	petMenu
>49806	UnaryOp	! f
>49807	Identifier	f
>49808	UnaryOperator	!
>49809	CompoundStatement	 
>49810	ExpressionStatement	 
>49811	CallExpression	doMenuSectionHighlight ( 2 )
>49812	ArgumentList	2
>49813	Argument	2
>49814	PrimaryExpression	2
>49815	Callee	doMenuSectionHighlight
>49816	Identifier	doMenuSectionHighlight
>49817	ExpressionStatement	 
>49818	CallExpression	menu [ 7 ] -> setFocus ( true )
>49819	ArgumentList	true
>49820	Argument	true
>49821	Identifier	true
>49822	Callee	menu [ 7 ] -> setFocus
>49823	PtrMemberAccess	menu [ 7 ] -> setFocus
>49824	Identifier	setFocus
>49825	ArrayIndexing	menu [ 7 ]
>49826	PrimaryExpression	7
>49827	Identifier	menu
>49828	ExpressionStatement	 
>49829	AssignmentExpr	liCrystal -> alpha = 1
>49830	PrimaryExpression	1
>49831	PtrMemberAccess	liCrystal -> alpha
>49832	Identifier	alpha
>49833	Identifier	liCrystal
>49834	ForStatement	for ( int i = 0 ; i < petTips . size ( ) ; i ++ )
>49835	CompoundStatement	 
>49836	ExpressionStatement	 
>49837	AssignmentExpr	petTips [ i ] -> alpha = 1
>49838	PrimaryExpression	1
>49839	PtrMemberAccess	petTips [ i ] -> alpha
>49840	Identifier	alpha
>49841	ArrayIndexing	petTips [ i ]
>49842	Identifier	i
>49843	Identifier	petTips
>49844	IncDecOp	 
>49845	IncDec	++
>49846	Identifier	i
>49847	Condition	 
>49848	RelationalExpression	i < petTips . size ( )
>49849	CallExpression	petTips . size ( )
>49850	ArgumentList	 
>49851	Callee	petTips . size
>49852	MemberAccess	petTips . size
>49853	Identifier	size
>49854	Identifier	petTips
>49855	Identifier	i
>49856	ForInit	 
>49857	IdentifierDeclStatement	int i = 0 ;
>49858	IdentifierDecl	i = 0
>49859	AssignmentExpr	i = 0
>49860	PrimaryExpression	0
>49861	Identifier	i
>49862	Identifier	i
>49863	IdentifierDeclType	int
>49864	IfStatement	if ( petSlots . size ( ) == 4 )
>49865	CompoundStatement	 
>49866	ExpressionStatement	 
>49867	CallExpression	petSlots [ 3 ] -> setDirMove ( DIR_DOWN , petSlots [ 0 ] )
>49868	ArgumentList	DIR_DOWN
>49869	Argument	petSlots [ 0 ]
>49870	ArrayIndexing	petSlots [ 0 ]
>49871	PrimaryExpression	0
>49872	Identifier	petSlots
>49873	Argument	DIR_DOWN
>49874	Identifier	DIR_DOWN
>49875	Callee	petSlots [ 3 ] -> setDirMove
>49876	PtrMemberAccess	petSlots [ 3 ] -> setDirMove
>49877	Identifier	setDirMove
>49878	ArrayIndexing	petSlots [ 3 ]
>49879	PrimaryExpression	3
>49880	Identifier	petSlots
>49881	ExpressionStatement	 
>49882	CallExpression	petSlots [ 3 ] -> setDirMove ( DIR_RIGHT , petSlots [ 1 ] )
>49883	ArgumentList	DIR_RIGHT
>49884	Argument	petSlots [ 1 ]
>49885	ArrayIndexing	petSlots [ 1 ]
>49886	PrimaryExpression	1
>49887	Identifier	petSlots
>49888	Argument	DIR_RIGHT
>49889	Identifier	DIR_RIGHT
>49890	Callee	petSlots [ 3 ] -> setDirMove
>49891	PtrMemberAccess	petSlots [ 3 ] -> setDirMove
>49892	Identifier	setDirMove
>49893	ArrayIndexing	petSlots [ 3 ]
>49894	PrimaryExpression	3
>49895	Identifier	petSlots
>49896	ExpressionStatement	 
>49897	CallExpression	petSlots [ 3 ] -> setDirMove ( DIR_UP , petSlots [ 2 ] )
>49898	ArgumentList	DIR_UP
>49899	Argument	petSlots [ 2 ]
>49900	ArrayIndexing	petSlots [ 2 ]
>49901	PrimaryExpression	2
>49902	Identifier	petSlots
>49903	Argument	DIR_UP
>49904	Identifier	DIR_UP
>49905	Callee	petSlots [ 3 ] -> setDirMove
>49906	PtrMemberAccess	petSlots [ 3 ] -> setDirMove
>49907	Identifier	setDirMove
>49908	ArrayIndexing	petSlots [ 3 ]
>49909	PrimaryExpression	3
>49910	Identifier	petSlots
>49911	ExpressionStatement	 
>49912	CallExpression	petSlots [ 2 ] -> setDirMove ( DIR_LEFT , petSlots [ 3 ] )
>49913	ArgumentList	DIR_LEFT
>49914	Argument	petSlots [ 3 ]
>49915	ArrayIndexing	petSlots [ 3 ]
>49916	PrimaryExpression	3
>49917	Identifier	petSlots
>49918	Argument	DIR_LEFT
>49919	Identifier	DIR_LEFT
>49920	Callee	petSlots [ 2 ] -> setDirMove
>49921	PtrMemberAccess	petSlots [ 2 ] -> setDirMove
>49922	Identifier	setDirMove
>49923	ArrayIndexing	petSlots [ 2 ]
>49924	PrimaryExpression	2
>49925	Identifier	petSlots
>49926	ExpressionStatement	 
>49927	CallExpression	petSlots [ 2 ] -> setDirMove ( DIR_DOWN , petSlots [ 0 ] )
>49928	ArgumentList	DIR_DOWN
>49929	Argument	petSlots [ 0 ]
>49930	ArrayIndexing	petSlots [ 0 ]
>49931	PrimaryExpression	0
>49932	Identifier	petSlots
>49933	Argument	DIR_DOWN
>49934	Identifier	DIR_DOWN
>49935	Callee	petSlots [ 2 ] -> setDirMove
>49936	PtrMemberAccess	petSlots [ 2 ] -> setDirMove
>49937	Identifier	setDirMove
>49938	ArrayIndexing	petSlots [ 2 ]
>49939	PrimaryExpression	2
>49940	Identifier	petSlots
>49941	ExpressionStatement	 
>49942	CallExpression	petSlots [ 2 ] -> setDirMove ( DIR_RIGHT , petSlots [ 1 ] )
>49943	ArgumentList	DIR_RIGHT
>49944	Argument	petSlots [ 1 ]
>49945	ArrayIndexing	petSlots [ 1 ]
>49946	PrimaryExpression	1
>49947	Identifier	petSlots
>49948	Argument	DIR_RIGHT
>49949	Identifier	DIR_RIGHT
>49950	Callee	petSlots [ 2 ] -> setDirMove
>49951	PtrMemberAccess	petSlots [ 2 ] -> setDirMove
>49952	Identifier	setDirMove
>49953	ArrayIndexing	petSlots [ 2 ]
>49954	PrimaryExpression	2
>49955	Identifier	petSlots
>49956	ExpressionStatement	 
>49957	CallExpression	menu [ 5 ] -> setDirMove ( DIR_UP , petSlots [ 1 ] )
>49958	ArgumentList	DIR_UP
>49959	Argument	petSlots [ 1 ]
>49960	ArrayIndexing	petSlots [ 1 ]
>49961	PrimaryExpression	1
>49962	Identifier	petSlots
>49963	Argument	DIR_UP
>49964	Identifier	DIR_UP
>49965	Callee	menu [ 5 ] -> setDirMove
>49966	PtrMemberAccess	menu [ 5 ] -> setDirMove
>49967	Identifier	setDirMove
>49968	ArrayIndexing	menu [ 5 ]
>49969	PrimaryExpression	5
>49970	Identifier	menu
>49971	ExpressionStatement	 
>49972	CallExpression	menu [ 5 ] -> setDirMove ( DIR_LEFT , petSlots [ 1 ] )
>49973	ArgumentList	DIR_LEFT
>49974	Argument	petSlots [ 1 ]
>49975	ArrayIndexing	petSlots [ 1 ]
>49976	PrimaryExpression	1
>49977	Identifier	petSlots
>49978	Argument	DIR_LEFT
>49979	Identifier	DIR_LEFT
>49980	Callee	menu [ 5 ] -> setDirMove
>49981	PtrMemberAccess	menu [ 5 ] -> setDirMove
>49982	Identifier	setDirMove
>49983	ArrayIndexing	menu [ 5 ]
>49984	PrimaryExpression	5
>49985	Identifier	menu
>49986	ExpressionStatement	 
>49987	CallExpression	petSlots [ 1 ] -> setDirMove ( DIR_RIGHT , menu [ 5 ] )
>49988	ArgumentList	DIR_RIGHT
>49989	Argument	menu [ 5 ]
>49990	ArrayIndexing	menu [ 5 ]
>49991	PrimaryExpression	5
>49992	Identifier	menu
>49993	Argument	DIR_RIGHT
>49994	Identifier	DIR_RIGHT
>49995	Callee	petSlots [ 1 ] -> setDirMove
>49996	PtrMemberAccess	petSlots [ 1 ] -> setDirMove
>49997	Identifier	setDirMove
>49998	ArrayIndexing	petSlots [ 1 ]
>49999	PrimaryExpression	1
>50000	Identifier	petSlots
>50001	ExpressionStatement	 
>50002	CallExpression	petSlots [ 1 ] -> setDirMove ( DIR_DOWN , petSlots [ 0 ] )
>50003	ArgumentList	DIR_DOWN
>50004	Argument	petSlots [ 0 ]
>50005	ArrayIndexing	petSlots [ 0 ]
>50006	PrimaryExpression	0
>50007	Identifier	petSlots
>50008	Argument	DIR_DOWN
>50009	Identifier	DIR_DOWN
>50010	Callee	petSlots [ 1 ] -> setDirMove
>50011	PtrMemberAccess	petSlots [ 1 ] -> setDirMove
>50012	Identifier	setDirMove
>50013	ArrayIndexing	petSlots [ 1 ]
>50014	PrimaryExpression	1
>50015	Identifier	petSlots
>50016	ExpressionStatement	 
>50017	CallExpression	petSlots [ 1 ] -> setDirMove ( DIR_UP , petSlots [ 2 ] )
>50018	ArgumentList	DIR_UP
>50019	Argument	petSlots [ 2 ]
>50020	ArrayIndexing	petSlots [ 2 ]
>50021	PrimaryExpression	2
>50022	Identifier	petSlots
>50023	Argument	DIR_UP
>50024	Identifier	DIR_UP
>50025	Callee	petSlots [ 1 ] -> setDirMove
>50026	PtrMemberAccess	petSlots [ 1 ] -> setDirMove
>50027	Identifier	setDirMove
>50028	ArrayIndexing	petSlots [ 1 ]
>50029	PrimaryExpression	1
>50030	Identifier	petSlots
>50031	ExpressionStatement	 
>50032	CallExpression	petSlots [ 1 ] -> setDirMove ( DIR_LEFT , petSlots [ 3 ] )
>50033	ArgumentList	DIR_LEFT
>50034	Argument	petSlots [ 3 ]
>50035	ArrayIndexing	petSlots [ 3 ]
>50036	PrimaryExpression	3
>50037	Identifier	petSlots
>50038	Argument	DIR_LEFT
>50039	Identifier	DIR_LEFT
>50040	Callee	petSlots [ 1 ] -> setDirMove
>50041	PtrMemberAccess	petSlots [ 1 ] -> setDirMove
>50042	Identifier	setDirMove
>50043	ArrayIndexing	petSlots [ 1 ]
>50044	PrimaryExpression	1
>50045	Identifier	petSlots
>50046	ExpressionStatement	 
>50047	CallExpression	menu [ 0 ] -> setDirMove ( DIR_UP , petSlots [ 0 ] )
>50048	ArgumentList	DIR_UP
>50049	Argument	petSlots [ 0 ]
>50050	ArrayIndexing	petSlots [ 0 ]
>50051	PrimaryExpression	0
>50052	Identifier	petSlots
>50053	Argument	DIR_UP
>50054	Identifier	DIR_UP
>50055	Callee	menu [ 0 ] -> setDirMove
>50056	PtrMemberAccess	menu [ 0 ] -> setDirMove
>50057	Identifier	setDirMove
>50058	ArrayIndexing	menu [ 0 ]
>50059	PrimaryExpression	0
>50060	Identifier	menu
>50061	ExpressionStatement	 
>50062	CallExpression	petSlots [ 0 ] -> setDirMove ( DIR_DOWN , menu [ 0 ] )
>50063	ArgumentList	DIR_DOWN
>50064	Argument	menu [ 0 ]
>50065	ArrayIndexing	menu [ 0 ]
>50066	PrimaryExpression	0
>50067	Identifier	menu
>50068	Argument	DIR_DOWN
>50069	Identifier	DIR_DOWN
>50070	Callee	petSlots [ 0 ] -> setDirMove
>50071	PtrMemberAccess	petSlots [ 0 ] -> setDirMove
>50072	Identifier	setDirMove
>50073	ArrayIndexing	petSlots [ 0 ]
>50074	PrimaryExpression	0
>50075	Identifier	petSlots
>50076	ExpressionStatement	 
>50077	CallExpression	petSlots [ 0 ] -> setDirMove ( DIR_LEFT , petSlots [ 3 ] )
>50078	ArgumentList	DIR_LEFT
>50079	Argument	petSlots [ 3 ]
>50080	ArrayIndexing	petSlots [ 3 ]
>50081	PrimaryExpression	3
>50082	Identifier	petSlots
>50083	Argument	DIR_LEFT
>50084	Identifier	DIR_LEFT
>50085	Callee	petSlots [ 0 ] -> setDirMove
>50086	PtrMemberAccess	petSlots [ 0 ] -> setDirMove
>50087	Identifier	setDirMove
>50088	ArrayIndexing	petSlots [ 0 ]
>50089	PrimaryExpression	0
>50090	Identifier	petSlots
>50091	ExpressionStatement	 
>50092	CallExpression	petSlots [ 0 ] -> setDirMove ( DIR_UP , petSlots [ 2 ] )
>50093	ArgumentList	DIR_UP
>50094	Argument	petSlots [ 2 ]
>50095	ArrayIndexing	petSlots [ 2 ]
>50096	PrimaryExpression	2
>50097	Identifier	petSlots
>50098	Argument	DIR_UP
>50099	Identifier	DIR_UP
>50100	Callee	petSlots [ 0 ] -> setDirMove
>50101	PtrMemberAccess	petSlots [ 0 ] -> setDirMove
>50102	Identifier	setDirMove
>50103	ArrayIndexing	petSlots [ 0 ]
>50104	PrimaryExpression	0
>50105	Identifier	petSlots
>50106	ExpressionStatement	 
>50107	CallExpression	petSlots [ 0 ] -> setDirMove ( DIR_RIGHT , petSlots [ 1 ] )
>50108	ArgumentList	DIR_RIGHT
>50109	Argument	petSlots [ 1 ]
>50110	ArrayIndexing	petSlots [ 1 ]
>50111	PrimaryExpression	1
>50112	Identifier	petSlots
>50113	Argument	DIR_RIGHT
>50114	Identifier	DIR_RIGHT
>50115	Callee	petSlots [ 0 ] -> setDirMove
>50116	PtrMemberAccess	petSlots [ 0 ] -> setDirMove
>50117	Identifier	setDirMove
>50118	ArrayIndexing	petSlots [ 0 ]
>50119	PrimaryExpression	0
>50120	Identifier	petSlots
>50121	Condition	 
>50122	EqualityExpression	petSlots . size ( ) == 4
>50123	PrimaryExpression	4
>50124	CallExpression	petSlots . size ( )
>50125	ArgumentList	 
>50126	Callee	petSlots . size
>50127	MemberAccess	petSlots . size
>50128	Identifier	size
>50129	Identifier	petSlots
>50130	ForStatement	for ( int i = 0 ; i < petSlots . size ( ) ; i ++ )
>50131	CompoundStatement	 
>50132	IfStatement	if ( has )
>50133	CompoundStatement	 
>50134	ExpressionStatement	 
>50135	AssignmentExpr	hasPet = true
>50136	Identifier	true
>50137	Identifier	hasPet
>50138	Condition	 
>50139	Identifier	has
>50140	IdentifierDeclStatement	 
>50141	IdentifierDecl	has = dsq -> continuity . getFlag ( petSlots [ i ] -> petFlag )
>50142	AssignmentExpr	has = dsq -> continuity . getFlag ( petSlots [ i ] -> petFlag )
>50143	CallExpression	dsq -> continuity . getFlag ( petSlots [ i ] -> petFlag )
>50144	ArgumentList	petSlots [ i ] -> petFlag
>50145	Argument	petSlots [ i ] -> petFlag
>50146	PtrMemberAccess	petSlots [ i ] -> petFlag
>50147	Identifier	petFlag
>50148	ArrayIndexing	petSlots [ i ]
>50149	Identifier	i
>50150	Identifier	petSlots
>50151	Callee	dsq -> continuity . getFlag
>50152	MemberAccess	dsq -> continuity . getFlag
>50153	Identifier	getFlag
>50154	PtrMemberAccess	dsq -> continuity
>50155	Identifier	continuity
>50156	Identifier	dsq
>50157	Identifier	has
>50158	Identifier	has
>50159	IdentifierDeclType	bool
>50160	ExpressionStatement	 
>50161	AssignmentExpr	petSlots [ i ] -> alpha = 1
>50162	PrimaryExpression	1
>50163	PtrMemberAccess	petSlots [ i ] -> alpha
>50164	Identifier	alpha
>50165	ArrayIndexing	petSlots [ i ]
>50166	Identifier	i
>50167	Identifier	petSlots
>50168	IncDecOp	 
>50169	IncDec	++
>50170	Identifier	i
>50171	Condition	 
>50172	RelationalExpression	i < petSlots . size ( )
>50173	CallExpression	petSlots . size ( )
>50174	ArgumentList	 
>50175	Callee	petSlots . size
>50176	MemberAccess	petSlots . size
>50177	Identifier	size
>50178	Identifier	petSlots
>50179	Identifier	i
>50180	ForInit	 
>50181	IdentifierDeclStatement	int i = 0 ;
>50182	IdentifierDecl	i = 0
>50183	AssignmentExpr	i = 0
>50184	PrimaryExpression	0
>50185	Identifier	i
>50186	Identifier	i
>50187	IdentifierDeclType	int
>50188	IdentifierDeclStatement	 
>50189	IdentifierDecl	hasPet = false
>50190	AssignmentExpr	hasPet = false
>50191	Identifier	false
>50192	Identifier	false
>50193	Identifier	hasPet
>50194	IdentifierDeclType	bool
>50195	ExpressionStatement	 
>50196	CallExpression	toggleMainMenu ( false )
>50197	ArgumentList	false
>50198	Argument	false
>50199	Identifier	false
>50200	Callee	toggleMainMenu
>50201	Identifier	toggleMainMenu
>50202	ExpressionStatement	 
>50203	AssignmentExpr	currentMenuPage = MENUPAGE_PETS
>50204	Identifier	MENUPAGE_PETS
>50205	Identifier	currentMenuPage
>50206	Condition	 
>50207	AndExpression	f && ! petMenu
>50208	UnaryOp	! petMenu
>50209	Identifier	petMenu
>50210	UnaryOperator	!
>50211	Identifier	f
>50212	IfStatement	if ( treasureMenu )
>50213	ExpressionStatement	 
>50214	CallExpression	toggleTreasureMenu ( false )
>50215	ArgumentList	false
>50216	Argument	false
>50217	Identifier	false
>50218	Callee	toggleTreasureMenu
>50219	Identifier	toggleTreasureMenu
>50220	Condition	 
>50221	Identifier	treasureMenu
>50222	IfStatement	if ( foodMenu )
>50223	ExpressionStatement	 
>50224	CallExpression	toggleFoodMenu ( false )
>50225	ArgumentList	false
>50226	Argument	false
>50227	Identifier	false
>50228	Callee	toggleFoodMenu
>50229	Identifier	toggleFoodMenu
>50230	Condition	 
>50231	Identifier	foodMenu
>50232	IfStatement	if ( optionsMenu )
>50233	CompoundStatement	 
>50234	ExpressionStatement	 
>50235	CallExpression	toggleOptionsMenu ( false )
>50236	ArgumentList	false
>50237	Argument	false
>50238	Identifier	false
>50239	Callee	toggleOptionsMenu
>50240	Identifier	toggleOptionsMenu
>50241	Condition	 
>50242	Identifier	optionsMenu
>50284	FunctionDef	Game 
>50285	ParameterList	bool f
>50286	Parameter	 
>50287	Identifier	f
>50288	ParameterType	bool
>50289	ReturnType	void
>50290	CompoundStatement	 
>50291	IfStatement	if ( f )
>50292	ElseStatement	else
>50293	CompoundStatement	 
>50294	ExpressionStatement	 
>50295	AssignmentExpr	treasureCloseUp -> alpha = 0
>50296	PrimaryExpression	0
>50297	PtrMemberAccess	treasureCloseUp -> alpha
>50298	Identifier	alpha
>50299	Identifier	treasureCloseUp
>50300	ExpressionStatement	 
>50301	AssignmentExpr	treasureDescription -> alpha = 0
>50302	PrimaryExpression	0
>50303	PtrMemberAccess	treasureDescription -> alpha
>50304	Identifier	alpha
>50305	Identifier	treasureDescription
>50306	ExpressionStatement	 
>50307	AssignmentExpr	treasureLabel -> alpha = 0
>50308	PrimaryExpression	0
>50309	PtrMemberAccess	treasureLabel -> alpha
>50310	Identifier	alpha
>50311	Identifier	treasureLabel
>50312	ExpressionStatement	 
>50313	AssignmentExpr	use -> alpha = 0
>50314	PrimaryExpression	0
>50315	PtrMemberAccess	use -> alpha
>50316	Identifier	alpha
>50317	Identifier	use
>50318	ExpressionStatement	 
>50319	AssignmentExpr	prevTreasure -> alpha = 0
>50320	PrimaryExpression	0
>50321	PtrMemberAccess	prevTreasure -> alpha
>50322	Identifier	alpha
>50323	Identifier	prevTreasure
>50324	ExpressionStatement	 
>50325	AssignmentExpr	nextTreasure -> alpha = 0
>50326	PrimaryExpression	0
>50327	PtrMemberAccess	nextTreasure -> alpha
>50328	Identifier	alpha
>50329	Identifier	nextTreasure
>50330	CompoundStatement	 
>50331	ExpressionStatement	 
>50332	AssignmentExpr	treasureCloseUp -> alpha = 0
>50333	PrimaryExpression	0
>50334	PtrMemberAccess	treasureCloseUp -> alpha
>50335	Identifier	alpha
>50336	Identifier	treasureCloseUp
>50337	ExpressionStatement	 
>50338	AssignmentExpr	treasureDescription -> alpha = 0
>50339	PrimaryExpression	0
>50340	PtrMemberAccess	treasureDescription -> alpha
>50341	Identifier	alpha
>50342	Identifier	treasureDescription
>50343	ExpressionStatement	 
>50344	AssignmentExpr	treasureLabel -> alpha = 0
>50345	PrimaryExpression	0
>50346	PtrMemberAccess	treasureLabel -> alpha
>50347	Identifier	alpha
>50348	Identifier	treasureLabel
>50349	ExpressionStatement	 
>50350	AssignmentExpr	use -> alpha = 0
>50351	PrimaryExpression	0
>50352	PtrMemberAccess	use -> alpha
>50353	Identifier	alpha
>50354	Identifier	use
>50355	ExpressionStatement	 
>50356	AssignmentExpr	prevTreasure -> alpha = 1
>50357	PrimaryExpression	1
>50358	PtrMemberAccess	prevTreasure -> alpha
>50359	Identifier	alpha
>50360	Identifier	prevTreasure
>50361	ExpressionStatement	 
>50362	AssignmentExpr	nextTreasure -> alpha = 1
>50363	PrimaryExpression	1
>50364	PtrMemberAccess	nextTreasure -> alpha
>50365	Identifier	alpha
>50366	Identifier	nextTreasure
>50367	Condition	 
>50368	Identifier	f
>50369	ForStatement	for ( int i = 0 ; i < treasureSlots . size ( ) ; i ++ )
>50370	CompoundStatement	 
>50371	IfStatement	if ( f )
>50372	ElseStatement	else
>50373	ExpressionStatement	 
>50374	AssignmentExpr	treasureSlots [ i ] -> alpha = 0
>50375	PrimaryExpression	0
>50376	PtrMemberAccess	treasureSlots [ i ] -> alpha
>50377	Identifier	alpha
>50378	ArrayIndexing	treasureSlots [ i ]
>50379	Identifier	i
>50380	Identifier	treasureSlots
>50381	ExpressionStatement	 
>50382	AssignmentExpr	treasureSlots [ i ] -> alpha = 1
>50383	PrimaryExpression	1
>50384	PtrMemberAccess	treasureSlots [ i ] -> alpha
>50385	Identifier	alpha
>50386	ArrayIndexing	treasureSlots [ i ]
>50387	Identifier	i
>50388	Identifier	treasureSlots
>50389	Condition	 
>50390	Identifier	f
>50391	IncDecOp	 
>50392	IncDec	++
>50393	Identifier	i
>50394	Condition	 
>50395	RelationalExpression	i < treasureSlots . size ( )
>50396	CallExpression	treasureSlots . size ( )
>50397	ArgumentList	 
>50398	Callee	treasureSlots . size
>50399	MemberAccess	treasureSlots . size
>50400	Identifier	size
>50401	Identifier	treasureSlots
>50402	Identifier	i
>50403	ForInit	 
>50404	IdentifierDeclStatement	int i = 0 ;
>50405	IdentifierDecl	i = 0
>50406	AssignmentExpr	i = 0
>50407	PrimaryExpression	0
>50408	Identifier	i
>50409	Identifier	i
>50410	IdentifierDeclType	int
>50411	IfStatement	if ( f && ! treasureMenu )
>50412	ElseStatement	else
>50413	IfStatement	if ( ! f && treasureMenu )
>50414	CompoundStatement	 
>50415	ExpressionStatement	 
>50416	AssignmentExpr	circlePageNum -> alpha = 0
>50417	PrimaryExpression	0
>50418	PtrMemberAccess	circlePageNum -> alpha
>50419	Identifier	alpha
>50420	Identifier	circlePageNum
>50421	ExpressionStatement	 
>50422	AssignmentExpr	liCrystal -> alpha = 0
>50423	PrimaryExpression	0
>50424	PtrMemberAccess	liCrystal -> alpha
>50425	Identifier	alpha
>50426	Identifier	liCrystal
>50427	ExpressionStatement	 
>50428	CallExpression	menu [ 5 ] -> setDirMove ( DIR_LEFT , 0 )
>50429	ArgumentList	DIR_LEFT
>50430	Argument	0
>50431	PrimaryExpression	0
>50432	Argument	DIR_LEFT
>50433	Identifier	DIR_LEFT
>50434	Callee	menu [ 5 ] -> setDirMove
>50435	PtrMemberAccess	menu [ 5 ] -> setDirMove
>50436	Identifier	setDirMove
>50437	ArrayIndexing	menu [ 5 ]
>50438	PrimaryExpression	5
>50439	Identifier	menu
>50440	ExpressionStatement	 
>50441	CallExpression	menu [ 0 ] -> setDirMove ( DIR_UP , 0 )
>50442	ArgumentList	DIR_UP
>50443	Argument	0
>50444	PrimaryExpression	0
>50445	Argument	DIR_UP
>50446	Identifier	DIR_UP
>50447	Callee	menu [ 0 ] -> setDirMove
>50448	PtrMemberAccess	menu [ 0 ] -> setDirMove
>50449	Identifier	setDirMove
>50450	ArrayIndexing	menu [ 0 ]
>50451	PrimaryExpression	0
>50452	Identifier	menu
>50453	ForStatement	for ( int i = 0 ; i < treasureTips . size ( ) ; i ++ )
>50454	ExpressionStatement	 
>50455	AssignmentExpr	treasureTips [ i ] -> alpha = 0
>50456	PrimaryExpression	0
>50457	PtrMemberAccess	treasureTips [ i ] -> alpha
>50458	Identifier	alpha
>50459	ArrayIndexing	treasureTips [ i ]
>50460	Identifier	i
>50461	Identifier	treasureTips
>50462	IncDecOp	 
>50463	IncDec	++
>50464	Identifier	i
>50465	Condition	 
>50466	RelationalExpression	i < treasureTips . size ( )
>50467	CallExpression	treasureTips . size ( )
>50468	ArgumentList	 
>50469	Callee	treasureTips . size
>50470	MemberAccess	treasureTips . size
>50471	Identifier	size
>50472	Identifier	treasureTips
>50473	Identifier	i
>50474	ForInit	 
>50475	IdentifierDeclStatement	int i = 0 ;
>50476	IdentifierDecl	i = 0
>50477	AssignmentExpr	i = 0
>50478	PrimaryExpression	0
>50479	Identifier	i
>50480	Identifier	i
>50481	IdentifierDeclType	int
>50482	ExpressionStatement	 
>50483	AssignmentExpr	treasureMenu = false
>50484	Identifier	false
>50485	Identifier	treasureMenu
>50486	Condition	 
>50487	AndExpression	! f && treasureMenu
>50488	Identifier	treasureMenu
>50489	UnaryOp	! f
>50490	Identifier	f
>50491	UnaryOperator	!
>50492	CompoundStatement	 
>50493	ExpressionStatement	 
>50494	AssignmentExpr	circlePageNum -> alpha = 1
>50495	PrimaryExpression	1
>50496	PtrMemberAccess	circlePageNum -> alpha
>50497	Identifier	alpha
>50498	Identifier	circlePageNum
>50499	ExpressionStatement	 
>50500	AssignmentExpr	liCrystal -> alpha = 1
>50501	PrimaryExpression	1
>50502	PtrMemberAccess	liCrystal -> alpha
>50503	Identifier	alpha
>50504	Identifier	liCrystal
>50505	ExpressionStatement	 
>50506	CallExpression	doMenuSectionHighlight ( 3 )
>50507	ArgumentList	3
>50508	Argument	3
>50509	PrimaryExpression	3
>50510	Callee	doMenuSectionHighlight
>50511	Identifier	doMenuSectionHighlight
>50512	ExpressionStatement	 
>50513	CallExpression	menu [ 8 ] -> setFocus ( true )
>50514	ArgumentList	true
>50515	Argument	true
>50516	Identifier	true
>50517	Callee	menu [ 8 ] -> setFocus
>50518	PtrMemberAccess	menu [ 8 ] -> setFocus
>50519	Identifier	setFocus
>50520	ArrayIndexing	menu [ 8 ]
>50521	PrimaryExpression	8
>50522	Identifier	menu
>50523	IfStatement	if ( treasureSlots . size ( ) > 8 )
>50524	CompoundStatement	 
>50525	ExpressionStatement	 
>50526	CallExpression	treasureSlots [ 3 ] -> setDirMove ( DIR_RIGHT , menu [ 5 ] )
>50527	ArgumentList	DIR_RIGHT
>50528	Argument	menu [ 5 ]
>50529	ArrayIndexing	menu [ 5 ]
>50530	PrimaryExpression	5
>50531	Identifier	menu
>50532	Argument	DIR_RIGHT
>50533	Identifier	DIR_RIGHT
>50534	Callee	treasureSlots [ 3 ] -> setDirMove
>50535	PtrMemberAccess	treasureSlots [ 3 ] -> setDirMove
>50536	Identifier	setDirMove
>50537	ArrayIndexing	treasureSlots [ 3 ]
>50538	PrimaryExpression	3
>50539	Identifier	treasureSlots
>50540	ExpressionStatement	 
>50541	CallExpression	menu [ 5 ] -> setDirMove ( DIR_LEFT , treasureSlots [ 2 ] )
>50542	ArgumentList	DIR_LEFT
>50543	Argument	treasureSlots [ 2 ]
>50544	ArrayIndexing	treasureSlots [ 2 ]
>50545	PrimaryExpression	2
>50546	Identifier	treasureSlots
>50547	Argument	DIR_LEFT
>50548	Identifier	DIR_LEFT
>50549	Callee	menu [ 5 ] -> setDirMove
>50550	PtrMemberAccess	menu [ 5 ] -> setDirMove
>50551	Identifier	setDirMove
>50552	ArrayIndexing	menu [ 5 ]
>50553	PrimaryExpression	5
>50554	Identifier	menu
>50555	ExpressionStatement	 
>50556	CallExpression	treasureSlots [ 2 ] -> setDirMove ( DIR_RIGHT , menu [ 5 ] )
>50557	ArgumentList	DIR_RIGHT
>50558	Argument	menu [ 5 ]
>50559	ArrayIndexing	menu [ 5 ]
>50560	PrimaryExpression	5
>50561	Identifier	menu
>50562	Argument	DIR_RIGHT
>50563	Identifier	DIR_RIGHT
>50564	Callee	treasureSlots [ 2 ] -> setDirMove
>50565	PtrMemberAccess	treasureSlots [ 2 ] -> setDirMove
>50566	Identifier	setDirMove
>50567	ArrayIndexing	treasureSlots [ 2 ]
>50568	PrimaryExpression	2
>50569	Identifier	treasureSlots
>50570	ExpressionStatement	 
>50571	CallExpression	menu [ 0 ] -> setDirMove ( DIR_UP , treasureSlots [ 0 ] )
>50572	ArgumentList	DIR_UP
>50573	Argument	treasureSlots [ 0 ]
>50574	ArrayIndexing	treasureSlots [ 0 ]
>50575	PrimaryExpression	0
>50576	Identifier	treasureSlots
>50577	Argument	DIR_UP
>50578	Identifier	DIR_UP
>50579	Callee	menu [ 0 ] -> setDirMove
>50580	PtrMemberAccess	menu [ 0 ] -> setDirMove
>50581	Identifier	setDirMove
>50582	ArrayIndexing	menu [ 0 ]
>50583	PrimaryExpression	0
>50584	Identifier	menu
>50585	ExpressionStatement	 
>50586	CallExpression	treasureSlots [ 0 ] -> setDirMove ( DIR_DOWN , menu [ 0 ] )
>50587	ArgumentList	DIR_DOWN
>50588	Argument	menu [ 0 ]
>50589	ArrayIndexing	menu [ 0 ]
>50590	PrimaryExpression	0
>50591	Identifier	menu
>50592	Argument	DIR_DOWN
>50593	Identifier	DIR_DOWN
>50594	Callee	treasureSlots [ 0 ] -> setDirMove
>50595	PtrMemberAccess	treasureSlots [ 0 ] -> setDirMove
>50596	Identifier	setDirMove
>50597	ArrayIndexing	treasureSlots [ 0 ]
>50598	PrimaryExpression	0
>50599	Identifier	treasureSlots
>50600	Condition	 
>50601	RelationalExpression	treasureSlots . size ( ) > 8
>50602	PrimaryExpression	8
>50603	CallExpression	treasureSlots . size ( )
>50604	ArgumentList	 
>50605	Callee	treasureSlots . size
>50606	MemberAccess	treasureSlots . size
>50607	Identifier	size
>50608	Identifier	treasureSlots
>50609	ForStatement	for ( int i = 0 ; i < treasureTips . size ( ) ; i ++ )
>50610	ExpressionStatement	 
>50611	AssignmentExpr	treasureTips [ i ] -> alpha = 1
>50612	PrimaryExpression	1
>50613	PtrMemberAccess	treasureTips [ i ] -> alpha
>50614	Identifier	alpha
>50615	ArrayIndexing	treasureTips [ i ]
>50616	Identifier	i
>50617	Identifier	treasureTips
>50618	IncDecOp	 
>50619	IncDec	++
>50620	Identifier	i
>50621	Condition	 
>50622	RelationalExpression	i < treasureTips . size ( )
>50623	CallExpression	treasureTips . size ( )
>50624	ArgumentList	 
>50625	Callee	treasureTips . size
>50626	MemberAccess	treasureTips . size
>50627	Identifier	size
>50628	Identifier	treasureTips
>50629	Identifier	i
>50630	ForInit	 
>50631	IdentifierDeclStatement	int i = 0 ;
>50632	IdentifierDecl	i = 0
>50633	AssignmentExpr	i = 0
>50634	PrimaryExpression	0
>50635	Identifier	i
>50636	Identifier	i
>50637	IdentifierDeclType	int
>50638	ExpressionStatement	 
>50639	CallExpression	refreshTreasureSlots ( )
>50640	ArgumentList	 
>50641	Callee	refreshTreasureSlots
>50642	Identifier	refreshTreasureSlots
>50643	ExpressionStatement	 
>50644	CallExpression	toggleMainMenu ( false )
>50645	ArgumentList	false
>50646	Argument	false
>50647	Identifier	false
>50648	Callee	toggleMainMenu
>50649	Identifier	toggleMainMenu
>50650	ExpressionStatement	 
>50651	AssignmentExpr	treasureMenu = true
>50652	Identifier	true
>50653	Identifier	treasureMenu
>50654	ExpressionStatement	 
>50655	AssignmentExpr	currentMenuPage = MENUPAGE_TREASURES
>50656	Identifier	MENUPAGE_TREASURES
>50657	Identifier	currentMenuPage
>50658	Condition	 
>50659	AndExpression	f && ! treasureMenu
>50660	UnaryOp	! treasureMenu
>50661	Identifier	treasureMenu
>50662	UnaryOperator	!
>50663	Identifier	f
>50664	IfStatement	if ( petMenu )
>50665	ExpressionStatement	 
>50666	CallExpression	togglePetMenu ( false )
>50667	ArgumentList	false
>50668	Argument	false
>50669	Identifier	false
>50670	Callee	togglePetMenu
>50671	Identifier	togglePetMenu
>50672	Condition	 
>50673	Identifier	petMenu
>50674	IfStatement	if ( foodMenu )
>50675	ExpressionStatement	 
>50676	CallExpression	toggleFoodMenu ( false )
>50677	ArgumentList	false
>50678	Argument	false
>50679	Identifier	false
>50680	Callee	toggleFoodMenu
>50681	Identifier	toggleFoodMenu
>50682	Condition	 
>50683	Identifier	foodMenu
>50684	IfStatement	if ( optionsMenu )
>50685	ExpressionStatement	 
>50686	CallExpression	toggleOptionsMenu ( false )
>50687	ArgumentList	false
>50688	Argument	false
>50689	Identifier	false
>50690	Callee	toggleOptionsMenu
>50691	Identifier	toggleOptionsMenu
>50692	Condition	 
>50693	Identifier	optionsMenu
>50749	FunctionDef	Game 
>50750	ParameterList	bool on
>50751	Parameter	 
>50752	Identifier	on
>50753	ParameterType	bool
>50754	ReturnType	void
>50755	CompoundStatement	 
>50756	ExpressionStatement	 
>50757	CallExpression	recipeMenu . toggle ( on , true )
>50758	ArgumentList	on
>50759	Argument	true
>50760	Identifier	true
>50761	Argument	on
>50762	Identifier	on
>50763	Callee	recipeMenu . toggle
>50764	MemberAccess	recipeMenu . toggle
>50765	Identifier	toggle
>50766	Identifier	recipeMenu
>50773	FunctionDef	Game 
>50774	ParameterList	bool f
>50775	Parameter	 
>50776	Identifier	f
>50777	ParameterType	bool
>50778	ReturnType	void
>50779	CompoundStatement	 
>50780	ForStatement	for ( int i = 0 ; i < foodSlots . size ( ) ; i ++ )
>50781	CompoundStatement	 
>50782	ExpressionStatement	 
>50783	CallExpression	foodSlots [ i ] -> toggle ( f )
>50784	ArgumentList	f
>50785	Argument	f
>50786	Identifier	f
>50787	Callee	foodSlots [ i ] -> toggle
>50788	PtrMemberAccess	foodSlots [ i ] -> toggle
>50789	Identifier	toggle
>50790	ArrayIndexing	foodSlots [ i ]
>50791	Identifier	i
>50792	Identifier	foodSlots
>50793	IncDecOp	 
>50794	IncDec	++
>50795	Identifier	i
>50796	Condition	 
>50797	RelationalExpression	i < foodSlots . size ( )
>50798	CallExpression	foodSlots . size ( )
>50799	ArgumentList	 
>50800	Callee	foodSlots . size
>50801	MemberAccess	foodSlots . size
>50802	Identifier	size
>50803	Identifier	foodSlots
>50804	Identifier	i
>50805	ForInit	 
>50806	IdentifierDeclStatement	int i = 0 ;
>50807	IdentifierDecl	i = 0
>50808	AssignmentExpr	i = 0
>50809	PrimaryExpression	0
>50810	Identifier	i
>50811	Identifier	i
>50812	IdentifierDeclType	int
>50813	IfStatement	if ( f && ! foodMenu )
>50814	ElseStatement	else
>50815	IfStatement	if ( ! f && foodMenu )
>50816	CompoundStatement	 
>50817	ExpressionStatement	 
>50818	AssignmentExpr	previewRecipe -> alpha = 0
>50819	PrimaryExpression	0
>50820	PtrMemberAccess	previewRecipe -> alpha
>50821	Identifier	alpha
>50822	Identifier	previewRecipe
>50823	ExpressionStatement	 
>50824	AssignmentExpr	circlePageNum -> alpha = 0
>50825	PrimaryExpression	0
>50826	PtrMemberAccess	circlePageNum -> alpha
>50827	Identifier	alpha
>50828	Identifier	circlePageNum
>50829	ExpressionStatement	 
>50830	CallExpression	menu [ 5 ] -> setDirMove ( DIR_LEFT , 0 )
>50831	ArgumentList	DIR_LEFT
>50832	Argument	0
>50833	PrimaryExpression	0
>50834	Argument	DIR_LEFT
>50835	Identifier	DIR_LEFT
>50836	Callee	menu [ 5 ] -> setDirMove
>50837	PtrMemberAccess	menu [ 5 ] -> setDirMove
>50838	Identifier	setDirMove
>50839	ArrayIndexing	menu [ 5 ]
>50840	PrimaryExpression	5
>50841	Identifier	menu
>50842	ForStatement	for ( int i = 0 ; i < foodTips . size ( ) ; i ++ )
>50843	ExpressionStatement	 
>50844	AssignmentExpr	foodTips [ i ] -> alpha = 0
>50845	PrimaryExpression	0
>50846	PtrMemberAccess	foodTips [ i ] -> alpha
>50847	Identifier	alpha
>50848	ArrayIndexing	foodTips [ i ]
>50849	Identifier	i
>50850	Identifier	foodTips
>50851	IncDecOp	 
>50852	IncDec	++
>50853	Identifier	i
>50854	Condition	 
>50855	RelationalExpression	i < foodTips . size ( )
>50856	CallExpression	foodTips . size ( )
>50857	ArgumentList	 
>50858	Callee	foodTips . size
>50859	MemberAccess	foodTips . size
>50860	Identifier	size
>50861	Identifier	foodTips
>50862	Identifier	i
>50863	ForInit	 
>50864	IdentifierDeclStatement	int i = 0 ;
>50865	IdentifierDecl	i = 0
>50866	AssignmentExpr	i = 0
>50867	PrimaryExpression	0
>50868	Identifier	i
>50869	Identifier	i
>50870	IdentifierDeclType	int
>50871	ExpressionStatement	 
>50872	AssignmentExpr	liCrystal -> alpha = 0
>50873	PrimaryExpression	0
>50874	PtrMemberAccess	liCrystal -> alpha
>50875	Identifier	alpha
>50876	Identifier	liCrystal
>50877	ExpressionStatement	 
>50878	AssignmentExpr	showRecipe -> alpha = 0
>50879	PrimaryExpression	0
>50880	PtrMemberAccess	showRecipe -> alpha
>50881	Identifier	alpha
>50882	Identifier	showRecipe
>50883	ExpressionStatement	 
>50884	AssignmentExpr	foodSort -> alpha = 0
>50885	PrimaryExpression	0
>50886	PtrMemberAccess	foodSort -> alpha
>50887	Identifier	alpha
>50888	Identifier	foodSort
>50889	ExpressionStatement	 
>50890	AssignmentExpr	foodDescription -> alpha = 0
>50891	PrimaryExpression	0
>50892	PtrMemberAccess	foodDescription -> alpha
>50893	Identifier	alpha
>50894	Identifier	foodDescription
>50895	ExpressionStatement	 
>50896	AssignmentExpr	foodLabel -> alpha = 0
>50897	PrimaryExpression	0
>50898	PtrMemberAccess	foodLabel -> alpha
>50899	Identifier	alpha
>50900	Identifier	foodLabel
>50901	ExpressionStatement	 
>50902	AssignmentExpr	foodLabel -> alphaMod = 0
>50903	PrimaryExpression	0
>50904	PtrMemberAccess	foodLabel -> alphaMod
>50905	Identifier	alphaMod
>50906	Identifier	foodLabel
>50907	ExpressionStatement	 
>50908	AssignmentExpr	nextFood -> alpha = 0
>50909	PrimaryExpression	0
>50910	PtrMemberAccess	nextFood -> alpha
>50911	Identifier	alpha
>50912	Identifier	nextFood
>50913	ExpressionStatement	 
>50914	AssignmentExpr	prevFood -> alpha = 0
>50915	PrimaryExpression	0
>50916	PtrMemberAccess	prevFood -> alpha
>50917	Identifier	alpha
>50918	Identifier	prevFood
>50919	ExpressionStatement	 
>50920	AssignmentExpr	recipes -> alpha = 0
>50921	PrimaryExpression	0
>50922	PtrMemberAccess	recipes -> alpha
>50923	Identifier	alpha
>50924	Identifier	recipes
>50925	ExpressionStatement	 
>50926	AssignmentExpr	cook -> alpha = 0
>50927	PrimaryExpression	0
>50928	PtrMemberAccess	cook -> alpha
>50929	Identifier	alpha
>50930	Identifier	cook
>50931	ExpressionStatement	 
>50932	AssignmentExpr	foodMenu = false
>50933	Identifier	false
>50934	Identifier	foodMenu
>50935	ExpressionStatement	 
>50936	CallExpression	recipeMenu . toggle ( false )
>50937	ArgumentList	false
>50938	Argument	false
>50939	Identifier	false
>50940	Callee	recipeMenu . toggle
>50941	MemberAccess	recipeMenu . toggle
>50942	Identifier	toggle
>50943	Identifier	recipeMenu
>50944	Condition	 
>50945	AndExpression	! f && foodMenu
>50946	Identifier	foodMenu
>50947	UnaryOp	! f
>50948	Identifier	f
>50949	UnaryOperator	!
>50950	CompoundStatement	 
>50951	ExpressionStatement	 
>50952	CallExpression	updatePreviewRecipe ( )
>50953	ArgumentList	 
>50954	Callee	updatePreviewRecipe
>50955	Identifier	updatePreviewRecipe
>50956	ExpressionStatement	 
>50957	AssignmentExpr	previewRecipe -> alpha = 0
>50958	PrimaryExpression	0
>50959	PtrMemberAccess	previewRecipe -> alpha
>50960	Identifier	alpha
>50961	Identifier	previewRecipe
>50962	ExpressionStatement	 
>50963	AssignmentExpr	circlePageNum -> alpha = 1
>50964	PrimaryExpression	1
>50965	PtrMemberAccess	circlePageNum -> alpha
>50966	Identifier	alpha
>50967	Identifier	circlePageNum
>50968	ExpressionStatement	 
>50969	AssignmentExpr	liCrystal -> alpha = 1
>50970	PrimaryExpression	1
>50971	PtrMemberAccess	liCrystal -> alpha
>50972	Identifier	alpha
>50973	Identifier	liCrystal
>50974	ExpressionStatement	 
>50975	CallExpression	doMenuSectionHighlight ( 1 )
>50976	ArgumentList	1
>50977	Argument	1
>50978	PrimaryExpression	1
>50979	Callee	doMenuSectionHighlight
>50980	Identifier	doMenuSectionHighlight
>50981	ExpressionStatement	 
>50982	CallExpression	menu [ 6 ] -> setFocus ( true )
>50983	ArgumentList	true
>50984	Argument	true
>50985	Identifier	true
>50986	Callee	menu [ 6 ] -> setFocus
>50987	PtrMemberAccess	menu [ 6 ] -> setFocus
>50988	Identifier	setFocus
>50989	ArrayIndexing	menu [ 6 ]
>50990	PrimaryExpression	6
>50991	Identifier	menu
>50992	IfStatement	if ( foodSlots . size ( ) >= 16 )
>50993	CompoundStatement	 
>50994	ExpressionStatement	 
>50995	CallExpression	recipes -> setDirMove ( DIR_RIGHT , menu [ 5 ] )
>50996	ArgumentList	DIR_RIGHT
>50997	Argument	menu [ 5 ]
>50998	ArrayIndexing	menu [ 5 ]
>50999	PrimaryExpression	5
>51000	Identifier	menu
>51001	Argument	DIR_RIGHT
>51002	Identifier	DIR_RIGHT
>51003	Callee	recipes -> setDirMove
>51004	PtrMemberAccess	recipes -> setDirMove
>51005	Identifier	setDirMove
>51006	Identifier	recipes
>51007	ExpressionStatement	 
>51008	CallExpression	foodSlots [ 15 ] -> setDirMove ( DIR_LEFT , foodSlots [ 14 ] )
>51009	ArgumentList	DIR_LEFT
>51010	Argument	foodSlots [ 14 ]
>51011	ArrayIndexing	foodSlots [ 14 ]
>51012	PrimaryExpression	14
>51013	Identifier	foodSlots
>51014	Argument	DIR_LEFT
>51015	Identifier	DIR_LEFT
>51016	Callee	foodSlots [ 15 ] -> setDirMove
>51017	PtrMemberAccess	foodSlots [ 15 ] -> setDirMove
>51018	Identifier	setDirMove
>51019	ArrayIndexing	foodSlots [ 15 ]
>51020	PrimaryExpression	15
>51021	Identifier	foodSlots
>51022	ExpressionStatement	 
>51023	CallExpression	foodSlots [ 15 ] -> setDirMove ( DIR_RIGHT , foodSlots [ 0 ] )
>51024	ArgumentList	DIR_RIGHT
>51025	Argument	foodSlots [ 0 ]
>51026	ArrayIndexing	foodSlots [ 0 ]
>51027	PrimaryExpression	0
>51028	Identifier	foodSlots
>51029	Argument	DIR_RIGHT
>51030	Identifier	DIR_RIGHT
>51031	Callee	foodSlots [ 15 ] -> setDirMove
>51032	PtrMemberAccess	foodSlots [ 15 ] -> setDirMove
>51033	Identifier	setDirMove
>51034	ArrayIndexing	foodSlots [ 15 ]
>51035	PrimaryExpression	15
>51036	Identifier	foodSlots
>51037	ExpressionStatement	 
>51038	CallExpression	foodSlots [ 0 ] -> setDirMove ( DIR_LEFT , foodSlots [ 15 ] )
>51039	ArgumentList	DIR_LEFT
>51040	Argument	foodSlots [ 15 ]
>51041	ArrayIndexing	foodSlots [ 15 ]
>51042	PrimaryExpression	15
>51043	Identifier	foodSlots
>51044	Argument	DIR_LEFT
>51045	Identifier	DIR_LEFT
>51046	Callee	foodSlots [ 0 ] -> setDirMove
>51047	PtrMemberAccess	foodSlots [ 0 ] -> setDirMove
>51048	Identifier	setDirMove
>51049	ArrayIndexing	foodSlots [ 0 ]
>51050	PrimaryExpression	0
>51051	Identifier	foodSlots
>51052	ExpressionStatement	 
>51053	CallExpression	foodSlots [ 0 ] -> setDirMove ( DIR_DOWN , recipes )
>51054	ArgumentList	DIR_DOWN
>51055	Argument	recipes
>51056	Identifier	recipes
>51057	Argument	DIR_DOWN
>51058	Identifier	DIR_DOWN
>51059	Callee	foodSlots [ 0 ] -> setDirMove
>51060	PtrMemberAccess	foodSlots [ 0 ] -> setDirMove
>51061	Identifier	setDirMove
>51062	ArrayIndexing	foodSlots [ 0 ]
>51063	PrimaryExpression	0
>51064	Identifier	foodSlots
>51065	ExpressionStatement	 
>51066	CallExpression	foodSlots [ 14 ] -> setDirMove ( DIR_DOWN , recipes )
>51067	ArgumentList	DIR_DOWN
>51068	Argument	recipes
>51069	Identifier	recipes
>51070	Argument	DIR_DOWN
>51071	Identifier	DIR_DOWN
>51072	Callee	foodSlots [ 14 ] -> setDirMove
>51073	PtrMemberAccess	foodSlots [ 14 ] -> setDirMove
>51074	Identifier	setDirMove
>51075	ArrayIndexing	foodSlots [ 14 ]
>51076	PrimaryExpression	14
>51077	Identifier	foodSlots
>51078	ExpressionStatement	 
>51079	CallExpression	foodSlots [ 15 ] -> setDirMove ( DIR_DOWN , recipes )
>51080	ArgumentList	DIR_DOWN
>51081	Argument	recipes
>51082	Identifier	recipes
>51083	Argument	DIR_DOWN
>51084	Identifier	DIR_DOWN
>51085	Callee	foodSlots [ 15 ] -> setDirMove
>51086	PtrMemberAccess	foodSlots [ 15 ] -> setDirMove
>51087	Identifier	setDirMove
>51088	ArrayIndexing	foodSlots [ 15 ]
>51089	PrimaryExpression	15
>51090	Identifier	foodSlots
>51091	ExpressionStatement	 
>51092	CallExpression	recipes -> setDirMove ( DIR_UP , foodSlots [ 15 ] )
>51093	ArgumentList	DIR_UP
>51094	Argument	foodSlots [ 15 ]
>51095	ArrayIndexing	foodSlots [ 15 ]
>51096	PrimaryExpression	15
>51097	Identifier	foodSlots
>51098	Argument	DIR_UP
>51099	Identifier	DIR_UP
>51100	Callee	recipes -> setDirMove
>51101	PtrMemberAccess	recipes -> setDirMove
>51102	Identifier	setDirMove
>51103	Identifier	recipes
>51104	ExpressionStatement	 
>51105	CallExpression	treasureSlots [ 3 ] -> setDirMove ( DIR_RIGHT , menu [ 5 ] )
>51106	ArgumentList	DIR_RIGHT
>51107	Argument	menu [ 5 ]
>51108	ArrayIndexing	menu [ 5 ]
>51109	PrimaryExpression	5
>51110	Identifier	menu
>51111	Argument	DIR_RIGHT
>51112	Identifier	DIR_RIGHT
>51113	Callee	treasureSlots [ 3 ] -> setDirMove
>51114	PtrMemberAccess	treasureSlots [ 3 ] -> setDirMove
>51115	Identifier	setDirMove
>51116	ArrayIndexing	treasureSlots [ 3 ]
>51117	PrimaryExpression	3
>51118	Identifier	treasureSlots
>51119	ExpressionStatement	 
>51120	CallExpression	menu [ 5 ] -> setDirMove ( DIR_LEFT , foodSlots [ 2 ] )
>51121	ArgumentList	DIR_LEFT
>51122	Argument	foodSlots [ 2 ]
>51123	ArrayIndexing	foodSlots [ 2 ]
>51124	PrimaryExpression	2
>51125	Identifier	foodSlots
>51126	Argument	DIR_LEFT
>51127	Identifier	DIR_LEFT
>51128	Callee	menu [ 5 ] -> setDirMove
>51129	PtrMemberAccess	menu [ 5 ] -> setDirMove
>51130	Identifier	setDirMove
>51131	ArrayIndexing	menu [ 5 ]
>51132	PrimaryExpression	5
>51133	Identifier	menu
>51134	ExpressionStatement	 
>51135	CallExpression	foodSlots [ 3 ] -> setDirMove ( DIR_RIGHT , menu [ 5 ] )
>51136	ArgumentList	DIR_RIGHT
>51137	Argument	menu [ 5 ]
>51138	ArrayIndexing	menu [ 5 ]
>51139	PrimaryExpression	5
>51140	Identifier	menu
>51141	Argument	DIR_RIGHT
>51142	Identifier	DIR_RIGHT
>51143	Callee	foodSlots [ 3 ] -> setDirMove
>51144	PtrMemberAccess	foodSlots [ 3 ] -> setDirMove
>51145	Identifier	setDirMove
>51146	ArrayIndexing	foodSlots [ 3 ]
>51147	PrimaryExpression	3
>51148	Identifier	foodSlots
>51149	ExpressionStatement	 
>51150	CallExpression	foodSlots [ 2 ] -> setDirMove ( DIR_RIGHT , menu [ 5 ] )
>51151	ArgumentList	DIR_RIGHT
>51152	Argument	menu [ 5 ]
>51153	ArrayIndexing	menu [ 5 ]
>51154	PrimaryExpression	5
>51155	Identifier	menu
>51156	Argument	DIR_RIGHT
>51157	Identifier	DIR_RIGHT
>51158	Callee	foodSlots [ 2 ] -> setDirMove
>51159	PtrMemberAccess	foodSlots [ 2 ] -> setDirMove
>51160	Identifier	setDirMove
>51161	ArrayIndexing	foodSlots [ 2 ]
>51162	PrimaryExpression	2
>51163	Identifier	foodSlots
>51164	Condition	 
>51165	RelationalExpression	foodSlots . size ( ) >= 16
>51166	PrimaryExpression	16
>51167	CallExpression	foodSlots . size ( )
>51168	ArgumentList	 
>51169	Callee	foodSlots . size
>51170	MemberAccess	foodSlots . size
>51171	Identifier	size
>51172	Identifier	foodSlots
>51173	ForStatement	for ( int i = 0 ; i < foodTips . size ( ) ; i ++ )
>51174	ExpressionStatement	 
>51175	AssignmentExpr	foodTips [ i ] -> alpha = 1
>51176	PrimaryExpression	1
>51177	PtrMemberAccess	foodTips [ i ] -> alpha
>51178	Identifier	alpha
>51179	ArrayIndexing	foodTips [ i ]
>51180	Identifier	i
>51181	Identifier	foodTips
>51182	IncDecOp	 
>51183	IncDec	++
>51184	Identifier	i
>51185	Condition	 
>51186	RelationalExpression	i < foodTips . size ( )
>51187	CallExpression	foodTips . size ( )
>51188	ArgumentList	 
>51189	Callee	foodTips . size
>51190	MemberAccess	foodTips . size
>51191	Identifier	size
>51192	Identifier	foodTips
>51193	Identifier	i
>51194	ForInit	 
>51195	IdentifierDeclStatement	int i = 0 ;
>51196	IdentifierDecl	i = 0
>51197	AssignmentExpr	i = 0
>51198	PrimaryExpression	0
>51199	Identifier	i
>51200	Identifier	i
>51201	IdentifierDeclType	int
>51202	ExpressionStatement	 
>51203	AssignmentExpr	foodSort -> alpha = 1
>51204	PrimaryExpression	1
>51205	PtrMemberAccess	foodSort -> alpha
>51206	Identifier	alpha
>51207	Identifier	foodSort
>51208	ExpressionStatement	 
>51209	AssignmentExpr	foodDescription -> alphaMod = 1
>51210	PrimaryExpression	1
>51211	PtrMemberAccess	foodDescription -> alphaMod
>51212	Identifier	alphaMod
>51213	Identifier	foodDescription
>51214	ExpressionStatement	 
>51215	AssignmentExpr	foodLabel -> alphaMod = 1
>51216	PrimaryExpression	1
>51217	PtrMemberAccess	foodLabel -> alphaMod
>51218	Identifier	alphaMod
>51219	Identifier	foodLabel
>51220	ExpressionStatement	 
>51221	AssignmentExpr	nextFood -> alpha = 1
>51222	PrimaryExpression	1
>51223	PtrMemberAccess	nextFood -> alpha
>51224	Identifier	alpha
>51225	Identifier	nextFood
>51226	ExpressionStatement	 
>51227	AssignmentExpr	prevFood -> alpha = 1
>51228	PrimaryExpression	1
>51229	PtrMemberAccess	prevFood -> alpha
>51230	Identifier	alpha
>51231	Identifier	prevFood
>51232	ExpressionStatement	 
>51233	AssignmentExpr	recipes -> alpha = 1
>51234	PrimaryExpression	1
>51235	PtrMemberAccess	recipes -> alpha
>51236	Identifier	alpha
>51237	Identifier	recipes
>51238	ExpressionStatement	 
>51239	AssignmentExpr	cook -> alpha = 1
>51240	PrimaryExpression	1
>51241	PtrMemberAccess	cook -> alpha
>51242	Identifier	alpha
>51243	Identifier	cook
>51244	ExpressionStatement	 
>51245	CallExpression	refreshFoodSlots ( false )
>51246	ArgumentList	false
>51247	Argument	false
>51248	Identifier	false
>51249	Callee	refreshFoodSlots
>51250	Identifier	refreshFoodSlots
>51251	ExpressionStatement	 
>51252	CallExpression	toggleMainMenu ( false )
>51253	ArgumentList	false
>51254	Argument	false
>51255	Identifier	false
>51256	Callee	toggleMainMenu
>51257	Identifier	toggleMainMenu
>51258	ExpressionStatement	 
>51259	AssignmentExpr	foodMenu = true
>51260	Identifier	true
>51261	Identifier	foodMenu
>51262	ExpressionStatement	 
>51263	AssignmentExpr	currentMenuPage = MENUPAGE_FOOD
>51264	Identifier	MENUPAGE_FOOD
>51265	Identifier	currentMenuPage
>51266	Condition	 
>51267	AndExpression	f && ! foodMenu
>51268	UnaryOp	! foodMenu
>51269	Identifier	foodMenu
>51270	UnaryOperator	!
>51271	Identifier	f
>51272	IfStatement	if ( f )
>51273	CompoundStatement	 
>51274	IfStatement	if ( dsq -> game -> avatar )
>51275	CompoundStatement	 
>51276	IfStatement	if ( dsq -> continuity . getFlag ( FLAG_UPGRADE_WOK ) > 0 || ( ( p = dsq -> game -> getNearestPath ( dsq -> game \
>51277	ElseStatement	else
>51278	CompoundStatement	 
>51279	ExpressionStatement	 
>51280	AssignmentExpr	foodHolders [ 0 ] -> alpha = 0
>51281	PrimaryExpression	0
>51282	PtrMemberAccess	foodHolders [ 0 ] -> alpha
>51283	Identifier	alpha
>51284	ArrayIndexing	foodHolders [ 0 ]
>51285	PrimaryExpression	0
>51286	Identifier	foodHolders
>51287	CompoundStatement	 
>51288	ExpressionStatement	 
>51289	AssignmentExpr	foodHolders [ 0 ] -> alpha = 1
>51290	PrimaryExpression	1
>51291	PtrMemberAccess	foodHolders [ 0 ] -> alpha
>51292	Identifier	alpha
>51293	ArrayIndexing	foodHolders [ 0 ]
>51294	PrimaryExpression	0
>51295	Identifier	foodHolders
>51296	Condition	 
>51297	OrExpression	dsq -> continuity . getFlag ( FLAG_UPGRADE_WOK ) > 0 || ( ( p = dsq -> game -> getNearestPath ( dsq \
>51298	AndExpression	( p = dsq -> game -> getNearestPath ( dsq -> game -> avatar -> position , PATH_COOK ) ) && p -> isCoordinateInside ( \
>51299	CallExpression	p -> isCoordinateInside ( dsq -> game -> avatar -> position )
>51300	ArgumentList	dsq -> game -> avatar -> position
>51301	Argument	dsq -> game -> avatar -> position
>51302	PtrMemberAccess	dsq -> game -> avatar -> position
>51303	Identifier	position
>51304	PtrMemberAccess	dsq -> game -> avatar
>51305	Identifier	avatar
>51306	PtrMemberAccess	dsq -> game
>51307	Identifier	game
>51308	Identifier	dsq
>51309	Callee	p -> isCoordinateInside
>51310	PtrMemberAccess	p -> isCoordinateInside
>51311	Identifier	isCoordinateInside
>51312	Identifier	p
>51313	AssignmentExpr	p = dsq -> game -> getNearestPath ( dsq -> game -> avatar -> position , PATH_COOK )
>51314	CallExpression	dsq -> game -> getNearestPath ( dsq -> game -> avatar -> position , PATH_COOK )
>51315	ArgumentList	dsq -> game -> avatar -> position
>51316	Argument	PATH_COOK
>51317	Identifier	PATH_COOK
>51318	Argument	dsq -> game -> avatar -> position
>51319	PtrMemberAccess	dsq -> game -> avatar -> position
>51320	Identifier	position
>51321	PtrMemberAccess	dsq -> game -> avatar
>51322	Identifier	avatar
>51323	PtrMemberAccess	dsq -> game
>51324	Identifier	game
>51325	Identifier	dsq
>51326	Callee	dsq -> game -> getNearestPath
>51327	PtrMemberAccess	dsq -> game -> getNearestPath
>51328	Identifier	getNearestPath
>51329	PtrMemberAccess	dsq -> game
>51330	Identifier	game
>51331	Identifier	dsq
>51332	Identifier	p
>51333	RelationalExpression	dsq -> continuity . getFlag ( FLAG_UPGRADE_WOK ) > 0
>51334	PrimaryExpression	0
>51335	CallExpression	dsq -> continuity . getFlag ( FLAG_UPGRADE_WOK )
>51336	ArgumentList	FLAG_UPGRADE_WOK
>51337	Argument	FLAG_UPGRADE_WOK
>51338	Identifier	FLAG_UPGRADE_WOK
>51339	Callee	dsq -> continuity . getFlag
>51340	MemberAccess	dsq -> continuity . getFlag
>51341	Identifier	getFlag
>51342	PtrMemberAccess	dsq -> continuity
>51343	Identifier	continuity
>51344	Identifier	dsq
>51345	IdentifierDeclStatement	 
>51346	IdentifierDecl	* p = 0
>51347	AssignmentExpr	* p = 0
>51348	PrimaryExpression	0
>51349	Identifier	p
>51350	Identifier	p
>51351	IdentifierDeclType	Path *
>51352	Condition	 
>51353	PtrMemberAccess	dsq -> game -> avatar
>51354	Identifier	avatar
>51355	PtrMemberAccess	dsq -> game
>51356	Identifier	game
>51357	Identifier	dsq
>51358	Condition	 
>51359	Identifier	f
>51360	ForStatement	for ( int i = 0 ; i < foodHolders . size ( ) ; i ++ )
>51361	CompoundStatement	 
>51362	IfStatement	if ( f )
>51363	ElseStatement	else
>51364	ExpressionStatement	 
>51365	AssignmentExpr	foodHolders [ i ] -> alpha = 0
>51366	PrimaryExpression	0
>51367	PtrMemberAccess	foodHolders [ i ] -> alpha
>51368	Identifier	alpha
>51369	ArrayIndexing	foodHolders [ i ]
>51370	Identifier	i
>51371	Identifier	foodHolders
>51372	ExpressionStatement	 
>51373	AssignmentExpr	foodHolders [ i ] -> alpha = 1
>51374	PrimaryExpression	1
>51375	PtrMemberAccess	foodHolders [ i ] -> alpha
>51376	Identifier	alpha
>51377	ArrayIndexing	foodHolders [ i ]
>51378	Identifier	i
>51379	Identifier	foodHolders
>51380	Condition	 
>51381	Identifier	f
>51382	IncDecOp	 
>51383	IncDec	++
>51384	Identifier	i
>51385	Condition	 
>51386	RelationalExpression	i < foodHolders . size ( )
>51387	CallExpression	foodHolders . size ( )
>51388	ArgumentList	 
>51389	Callee	foodHolders . size
>51390	MemberAccess	foodHolders . size
>51391	Identifier	size
>51392	Identifier	foodHolders
>51393	Identifier	i
>51394	ForInit	 
>51395	IdentifierDeclStatement	int i = 0 ;
>51396	IdentifierDecl	i = 0
>51397	AssignmentExpr	i = 0
>51398	PrimaryExpression	0
>51399	Identifier	i
>51400	Identifier	i
>51401	IdentifierDeclType	int
>51402	IfStatement	if ( treasureMenu )
>51403	ExpressionStatement	 
>51404	CallExpression	toggleTreasureMenu ( false )
>51405	ArgumentList	false
>51406	Argument	false
>51407	Identifier	false
>51408	Callee	toggleTreasureMenu
>51409	Identifier	toggleTreasureMenu
>51410	Condition	 
>51411	Identifier	treasureMenu
>51412	IfStatement	if ( petMenu )
>51413	ExpressionStatement	 
>51414	CallExpression	togglePetMenu ( false )
>51415	ArgumentList	false
>51416	Argument	false
>51417	Identifier	false
>51418	Callee	togglePetMenu
>51419	Identifier	togglePetMenu
>51420	Condition	 
>51421	Identifier	petMenu
>51422	IfStatement	if ( optionsMenu )
>51423	ExpressionStatement	 
>51424	CallExpression	toggleOptionsMenu ( false )
>51425	ArgumentList	false
>51426	Argument	false
>51427	Identifier	false
>51428	Callee	toggleOptionsMenu
>51429	Identifier	toggleOptionsMenu
>51430	Condition	 
>51431	Identifier	optionsMenu
>51523	FunctionDef	Game 
>51524	ParameterList	int section
>51525	Parameter	 
>51526	Identifier	section
>51527	ParameterType	int
>51528	ReturnType	void
>51529	CompoundStatement	 
>51530	ExpressionStatement	 
>51531	AssignmentExpr	menuIconGlow -> position = menu [ 5 + section ] -> position
>51532	PtrMemberAccess	menu [ 5 + section ] -> position
>51533	Identifier	position
>51534	ArrayIndexing	menu [ 5 + section ]
>51535	AdditiveExpression	5 + section
>51536	Identifier	section
>51537	PrimaryExpression	5
>51538	Identifier	menu
>51539	PtrMemberAccess	menuIconGlow -> position
>51540	Identifier	position
>51541	Identifier	menuIconGlow
>51542	ExpressionStatement	 
>51543	AssignmentExpr	( ( AquariaMenuItem * ) menu [ ( 5 + section ) ] ) -> quad -> alphaMod = 1.0
>51544	PrimaryExpression	1.0
>51545	PtrMemberAccess	( ( AquariaMenuItem * ) menu [ ( 5 + section ) ] ) -> quad -> alphaMod
>51546	Identifier	alphaMod
>51547	PtrMemberAccess	( ( AquariaMenuItem * ) menu [ ( 5 + section ) ] ) -> quad
>51548	Identifier	quad
>51549	CastExpression	( AquariaMenuItem * ) menu [ ( 5 + section ) ]
>51550	ArrayIndexing	menu [ ( 5 + section ) ]
>51551	AdditiveExpression	5 + section
>51552	Identifier	section
>51553	PrimaryExpression	5
>51554	Identifier	menu
>51555	CastTarget	AquariaMenuItem *
>51556	ForStatement	for ( int i = 0 ; i < 4 ; i ++ )
>51557	ExpressionStatement	 
>51558	AssignmentExpr	( ( AquariaMenuItem * ) menu [ ( 5 + i ) ] ) -> quad -> alphaMod = 0.8
>51559	PrimaryExpression	0.8
>51560	PtrMemberAccess	( ( AquariaMenuItem * ) menu [ ( 5 + i ) ] ) -> quad -> alphaMod
>51561	Identifier	alphaMod
>51562	PtrMemberAccess	( ( AquariaMenuItem * ) menu [ ( 5 + i ) ] ) -> quad
>51563	Identifier	quad
>51564	CastExpression	( AquariaMenuItem * ) menu [ ( 5 + i ) ]
>51565	ArrayIndexing	menu [ ( 5 + i ) ]
>51566	AdditiveExpression	5 + i
>51567	Identifier	i
>51568	PrimaryExpression	5
>51569	Identifier	menu
>51570	CastTarget	AquariaMenuItem *
>51571	IncDecOp	 
>51572	IncDec	++
>51573	Identifier	i
>51574	Condition	 
>51575	RelationalExpression	i < 4
>51576	PrimaryExpression	4
>51577	Identifier	i
>51578	ForInit	 
>51579	IdentifierDeclStatement	int i = 0 ;
>51580	IdentifierDecl	i = 0
>51581	AssignmentExpr	i = 0
>51582	PrimaryExpression	0
>51583	Identifier	i
>51584	Identifier	i
>51585	IdentifierDeclType	int
>51611	FunctionDef	Game 
>51612	ParameterList	bool f
>51613	Parameter	 
>51614	Identifier	f
>51615	ParameterType	bool
>51616	ReturnType	void
>51617	CompoundStatement	 
>51618	IfStatement	if ( f )
>51619	ElseStatement	else
>51620	CompoundStatement	 
>51621	ExpressionStatement	 
>51622	CallExpression	liCrystal -> alpha . interpolateTo ( 0 , t )
>51623	ArgumentList	0
>51624	Argument	t
>51625	Identifier	t
>51626	Argument	0
>51627	PrimaryExpression	0
>51628	Callee	liCrystal -> alpha . interpolateTo
>51629	MemberAccess	liCrystal -> alpha . interpolateTo
>51630	Identifier	interpolateTo
>51631	PtrMemberAccess	liCrystal -> alpha
>51632	Identifier	alpha
>51633	Identifier	liCrystal
>51634	ExpressionStatement	 
>51635	CallExpression	energyIdol -> alpha . interpolateTo ( 0 , t )
>51636	ArgumentList	0
>51637	Argument	t
>51638	Identifier	t
>51639	Argument	0
>51640	PrimaryExpression	0
>51641	Callee	energyIdol -> alpha . interpolateTo
>51642	MemberAccess	energyIdol -> alpha . interpolateTo
>51643	Identifier	interpolateTo
>51644	PtrMemberAccess	energyIdol -> alpha
>51645	Identifier	alpha
>51646	Identifier	energyIdol
>51647	ExpressionStatement	 
>51648	CallExpression	songBubbles -> alpha . interpolateTo ( 0 , t )
>51649	ArgumentList	0
>51650	Argument	t
>51651	Identifier	t
>51652	Argument	0
>51653	PrimaryExpression	0
>51654	Callee	songBubbles -> alpha . interpolateTo
>51655	MemberAccess	songBubbles -> alpha . interpolateTo
>51656	Identifier	interpolateTo
>51657	PtrMemberAccess	songBubbles -> alpha
>51658	Identifier	alpha
>51659	Identifier	songBubbles
>51660	ForStatement	for ( int i = 0 ; i < songTips . size ( ) ; i ++ )
>51661	ExpressionStatement	 
>51662	AssignmentExpr	songTips [ i ] -> alpha = 0
>51663	PrimaryExpression	0
>51664	PtrMemberAccess	songTips [ i ] -> alpha
>51665	Identifier	alpha
>51666	ArrayIndexing	songTips [ i ]
>51667	Identifier	i
>51668	Identifier	songTips
>51669	IncDecOp	 
>51670	IncDec	++
>51671	Identifier	i
>51672	Condition	 
>51673	RelationalExpression	i < songTips . size ( )
>51674	CallExpression	songTips . size ( )
>51675	ArgumentList	 
>51676	Callee	songTips . size
>51677	MemberAccess	songTips . size
>51678	Identifier	size
>51679	Identifier	songTips
>51680	Identifier	i
>51681	ForInit	 
>51682	IdentifierDeclStatement	int i = 0 ;
>51683	IdentifierDecl	i = 0
>51684	AssignmentExpr	i = 0
>51685	PrimaryExpression	0
>51686	Identifier	i
>51687	Identifier	i
>51688	IdentifierDeclType	int
>51689	ForStatement	for ( int i = 0 ; i < songSlots . size ( ) ; i ++ )
>51690	CompoundStatement	 
>51691	ExpressionStatement	 
>51692	AssignmentExpr	songSlots [ i ] -> alphaMod = 0
>51693	PrimaryExpression	0
>51694	PtrMemberAccess	songSlots [ i ] -> alphaMod
>51695	Identifier	alphaMod
>51696	ArrayIndexing	songSlots [ i ]
>51697	Identifier	i
>51698	Identifier	songSlots
>51699	IncDecOp	 
>51700	IncDec	++
>51701	Identifier	i
>51702	Condition	 
>51703	RelationalExpression	i < songSlots . size ( )
>51704	CallExpression	songSlots . size ( )
>51705	ArgumentList	 
>51706	Callee	songSlots . size
>51707	MemberAccess	songSlots . size
>51708	Identifier	size
>51709	Identifier	songSlots
>51710	Identifier	i
>51711	ForInit	 
>51712	IdentifierDeclStatement	int i = 0 ;
>51713	IdentifierDecl	i = 0
>51714	AssignmentExpr	i = 0
>51715	PrimaryExpression	0
>51716	Identifier	i
>51717	Identifier	i
>51718	IdentifierDeclType	int
>51719	ExpressionStatement	 
>51720	CallExpression	( ( AquariaMenuItem * ) menu [ 5 ] ) -> setDirMove ( DIR_LEFT , 0 )
>51721	ArgumentList	DIR_LEFT
>51722	Argument	0
>51723	PrimaryExpression	0
>51724	Argument	DIR_LEFT
>51725	Identifier	DIR_LEFT
>51726	Callee	( ( AquariaMenuItem * ) menu [ 5 ] ) -> setDirMove
>51727	PtrMemberAccess	( ( AquariaMenuItem * ) menu [ 5 ] ) -> setDirMove
>51728	Identifier	setDirMove
>51729	CastExpression	( AquariaMenuItem * ) menu [ 5 ]
>51730	ArrayIndexing	menu [ 5 ]
>51731	PrimaryExpression	5
>51732	Identifier	menu
>51733	CastTarget	AquariaMenuItem *
>51734	CompoundStatement	 
>51735	ExpressionStatement	 
>51736	CallExpression	doMenuSectionHighlight ( 0 )
>51737	ArgumentList	0
>51738	Argument	0
>51739	PrimaryExpression	0
>51740	Callee	doMenuSectionHighlight
>51741	Identifier	doMenuSectionHighlight
>51742	ExpressionStatement	 
>51743	CallExpression	( ( AquariaMenuItem * ) menu [ 5 ] ) -> setDirMove ( DIR_LEFT , ss )
>51744	ArgumentList	DIR_LEFT
>51745	Argument	ss
>51746	Identifier	ss
>51747	Argument	DIR_LEFT
>51748	Identifier	DIR_LEFT
>51749	Callee	( ( AquariaMenuItem * ) menu [ 5 ] ) -> setDirMove
>51750	PtrMemberAccess	( ( AquariaMenuItem * ) menu [ 5 ] ) -> setDirMove
>51751	Identifier	setDirMove
>51752	CastExpression	( AquariaMenuItem * ) menu [ 5 ]
>51753	ArrayIndexing	menu [ 5 ]
>51754	PrimaryExpression	5
>51755	Identifier	menu
>51756	CastTarget	AquariaMenuItem *
>51757	IfStatement	if ( ss )
>51758	CompoundStatement	 
>51759	ExpressionStatement	 
>51760	CallExpression	ss -> setDirMove ( DIR_RIGHT , ( AquariaMenuItem * ) menu [ 5 ] )
>51761	ArgumentList	DIR_RIGHT
>51762	Argument	( AquariaMenuItem * ) menu [ 5 ]
>51763	CastExpression	( AquariaMenuItem * ) menu [ 5 ]
>51764	ArrayIndexing	menu [ 5 ]
>51765	PrimaryExpression	5
>51766	Identifier	menu
>51767	CastTarget	AquariaMenuItem *
>51768	Argument	DIR_RIGHT
>51769	Identifier	DIR_RIGHT
>51770	Callee	ss -> setDirMove
>51771	PtrMemberAccess	ss -> setDirMove
>51772	Identifier	setDirMove
>51773	Identifier	ss
>51774	Condition	 
>51775	Identifier	ss
>51776	ForStatement	for ( int i = 0 ; i < songSlots . size ( ) ; i ++ )
>51777	CompoundStatement	 
>51778	IfStatement	if ( dsq -> continuity . hasSong ( dsq -> continuity . getSongTypeBySlot ( i ) ) )
>51779	CompoundStatement	 
>51780	CompoundStatement	 
>51781	IfStatement	if ( p . x > sm )
>51782	CompoundStatement	 
>51783	ExpressionStatement	 
>51784	AssignmentExpr	ss = songSlots [ i ]
>51785	ArrayIndexing	songSlots [ i ]
>51786	Identifier	i
>51787	Identifier	songSlots
>51788	Identifier	ss
>51789	ExpressionStatement	 
>51790	AssignmentExpr	sm = p . x
>51791	MemberAccess	p . x
>51792	Identifier	x
>51793	Identifier	p
>51794	Identifier	sm
>51795	Condition	 
>51796	RelationalExpression	p . x > sm
>51797	Identifier	sm
>51798	MemberAccess	p . x
>51799	Identifier	x
>51800	Identifier	p
>51801	IdentifierDeclStatement	 
>51802	IdentifierDecl	p = songSlots [ i ] -> getWorldPosition ( )
>51803	AssignmentExpr	p = songSlots [ i ] -> getWorldPosition ( )
>51804	CallExpression	songSlots [ i ] -> getWorldPosition ( )
>51805	ArgumentList	 
>51806	Callee	songSlots [ i ] -> getWorldPosition
>51807	PtrMemberAccess	songSlots [ i ] -> getWorldPosition
>51808	Identifier	getWorldPosition
>51809	ArrayIndexing	songSlots [ i ]
>51810	Identifier	i
>51811	Identifier	songSlots
>51812	Identifier	p
>51813	Identifier	p
>51814	IdentifierDeclType	Vector
>51815	Condition	 
>51816	CallExpression	dsq -> continuity . hasSong ( dsq -> continuity . getSongTypeBySlot ( i ) )
>51817	ArgumentList	dsq -> continuity . getSongTypeBySlot ( i )
>51818	Argument	dsq -> continuity . getSongTypeBySlot ( i )
>51819	CallExpression	dsq -> continuity . getSongTypeBySlot ( i )
>51820	ArgumentList	i
>51821	Argument	i
>51822	Identifier	i
>51823	Callee	dsq -> continuity . getSongTypeBySlot
>51824	MemberAccess	dsq -> continuity . getSongTypeBySlot
>51825	Identifier	getSongTypeBySlot
>51826	PtrMemberAccess	dsq -> continuity
>51827	Identifier	continuity
>51828	Identifier	dsq
>51829	Callee	dsq -> continuity . hasSong
>51830	MemberAccess	dsq -> continuity . hasSong
>51831	Identifier	hasSong
>51832	PtrMemberAccess	dsq -> continuity
>51833	Identifier	continuity
>51834	Identifier	dsq
>51835	IncDecOp	 
>51836	IncDec	++
>51837	Identifier	i
>51838	Condition	 
>51839	RelationalExpression	i < songSlots . size ( )
>51840	CallExpression	songSlots . size ( )
>51841	ArgumentList	 
>51842	Callee	songSlots . size
>51843	MemberAccess	songSlots . size
>51844	Identifier	size
>51845	Identifier	songSlots
>51846	Identifier	i
>51847	ForInit	 
>51848	IdentifierDeclStatement	int i = 0 ;
>51849	IdentifierDecl	i = 0
>51850	AssignmentExpr	i = 0
>51851	PrimaryExpression	0
>51852	Identifier	i
>51853	Identifier	i
>51854	IdentifierDeclType	int
>51855	IdentifierDeclStatement	 
>51856	IdentifierDecl	* ss = 0
>51857	AssignmentExpr	* ss = 0
>51858	PrimaryExpression	0
>51859	Identifier	ss
>51860	Identifier	ss
>51861	IdentifierDeclType	SongSlot *
>51862	IdentifierDeclStatement	 
>51863	IdentifierDecl	sm = - 900
>51864	AssignmentExpr	sm = - 900
>51865	UnaryOp	- 900
>51866	PrimaryExpression	900
>51867	UnaryOperator	-
>51868	Identifier	sm
>51869	Identifier	sm
>51870	IdentifierDeclType	int
>51871	ExpressionStatement	 
>51872	CallExpression	menuBg2 -> alpha . interpolateTo ( 1 , t )
>51873	ArgumentList	1
>51874	Argument	t
>51875	Identifier	t
>51876	Argument	1
>51877	PrimaryExpression	1
>51878	Callee	menuBg2 -> alpha . interpolateTo
>51879	MemberAccess	menuBg2 -> alpha . interpolateTo
>51880	Identifier	interpolateTo
>51881	PtrMemberAccess	menuBg2 -> alpha
>51882	Identifier	alpha
>51883	Identifier	menuBg2
>51884	ForStatement	for ( int i = 0 ; i < songTips . size ( ) ; i ++ )
>51885	ExpressionStatement	 
>51886	AssignmentExpr	songTips [ i ] -> alpha = 1
>51887	PrimaryExpression	1
>51888	PtrMemberAccess	songTips [ i ] -> alpha
>51889	Identifier	alpha
>51890	ArrayIndexing	songTips [ i ]
>51891	Identifier	i
>51892	Identifier	songTips
>51893	IncDecOp	 
>51894	IncDec	++
>51895	Identifier	i
>51896	Condition	 
>51897	RelationalExpression	i < songTips . size ( )
>51898	CallExpression	songTips . size ( )
>51899	ArgumentList	 
>51900	Callee	songTips . size
>51901	MemberAccess	songTips . size
>51902	Identifier	size
>51903	Identifier	songTips
>51904	Identifier	i
>51905	ForInit	 
>51906	IdentifierDeclStatement	int i = 0 ;
>51907	IdentifierDecl	i = 0
>51908	AssignmentExpr	i = 0
>51909	PrimaryExpression	0
>51910	Identifier	i
>51911	Identifier	i
>51912	IdentifierDeclType	int
>51913	ExpressionStatement	 
>51914	CallExpression	liCrystal -> alpha . interpolateTo ( 1 , t )
>51915	ArgumentList	1
>51916	Argument	t
>51917	Identifier	t
>51918	Argument	1
>51919	PrimaryExpression	1
>51920	Callee	liCrystal -> alpha . interpolateTo
>51921	MemberAccess	liCrystal -> alpha . interpolateTo
>51922	Identifier	interpolateTo
>51923	PtrMemberAccess	liCrystal -> alpha
>51924	Identifier	alpha
>51925	Identifier	liCrystal
>51926	ExpressionStatement	 
>51927	CallExpression	energyIdol -> alpha . interpolateTo ( 1 , t )
>51928	ArgumentList	1
>51929	Argument	t
>51930	Identifier	t
>51931	Argument	1
>51932	PrimaryExpression	1
>51933	Callee	energyIdol -> alpha . interpolateTo
>51934	MemberAccess	energyIdol -> alpha . interpolateTo
>51935	Identifier	interpolateTo
>51936	PtrMemberAccess	energyIdol -> alpha
>51937	Identifier	alpha
>51938	Identifier	energyIdol
>51939	ExpressionStatement	 
>51940	CallExpression	songBubbles -> alpha . interpolateTo ( 1 , t )
>51941	ArgumentList	1
>51942	Argument	t
>51943	Identifier	t
>51944	Argument	1
>51945	PrimaryExpression	1
>51946	Callee	songBubbles -> alpha . interpolateTo
>51947	MemberAccess	songBubbles -> alpha . interpolateTo
>51948	Identifier	interpolateTo
>51949	PtrMemberAccess	songBubbles -> alpha
>51950	Identifier	alpha
>51951	Identifier	songBubbles
>51952	ForStatement	for ( int i = 0 ; i < songSlots . size ( ) ; i ++ )
>51953	CompoundStatement	 
>51954	ExpressionStatement	 
>51955	AssignmentExpr	songSlots [ i ] -> alphaMod = 1
>51956	PrimaryExpression	1
>51957	PtrMemberAccess	songSlots [ i ] -> alphaMod
>51958	Identifier	alphaMod
>51959	ArrayIndexing	songSlots [ i ]
>51960	Identifier	i
>51961	Identifier	songSlots
>51962	IncDecOp	 
>51963	IncDec	++
>51964	Identifier	i
>51965	Condition	 
>51966	RelationalExpression	i < songSlots . size ( )
>51967	CallExpression	songSlots . size ( )
>51968	ArgumentList	 
>51969	Callee	songSlots . size
>51970	MemberAccess	songSlots . size
>51971	Identifier	size
>51972	Identifier	songSlots
>51973	Identifier	i
>51974	ForInit	 
>51975	IdentifierDeclStatement	int i = 0 ;
>51976	IdentifierDecl	i = 0
>51977	AssignmentExpr	i = 0
>51978	PrimaryExpression	0
>51979	Identifier	i
>51980	Identifier	i
>51981	IdentifierDeclType	int
>51982	ExpressionStatement	 
>51983	AssignmentExpr	currentMenuPage = MENUPAGE_SONGS
>51984	Identifier	MENUPAGE_SONGS
>51985	Identifier	currentMenuPage
>51986	Condition	 
>51987	Identifier	f
>51988	IdentifierDeclStatement	 
>51989	IdentifierDecl	t = 0
>51990	AssignmentExpr	t = 0
>51991	PrimaryExpression	0
>51992	Identifier	t
>51993	Identifier	t
>51994	IdentifierDeclType	const float
>52041	FunctionDef	Game 
>52042	ParameterList	bool f
>52043	Parameter	 
>52044	Identifier	f
>52045	ParameterType	bool
>52046	ReturnType	void
>52047	CompoundStatement	 
>52048	IfStatement	if ( f && ! keyConfigMenu )
>52049	ElseStatement	else
>52050	IfStatement	if ( ! f )
>52051	CompoundStatement	 
>52052	ExpressionStatement	 
>52053	AssignmentExpr	menuIconGlow -> alpha = 1
>52054	PrimaryExpression	1
>52055	PtrMemberAccess	menuIconGlow -> alpha
>52056	Identifier	alpha
>52057	Identifier	menuIconGlow
>52058	ExpressionStatement	 
>52059	AssignmentExpr	opt_cancel -> position = opt_cancel_original
>52060	Identifier	opt_cancel_original
>52061	PtrMemberAccess	opt_cancel -> position
>52062	Identifier	position
>52063	Identifier	opt_cancel
>52064	ExpressionStatement	 
>52065	AssignmentExpr	opt_save -> position = opt_save_original
>52066	Identifier	opt_save_original
>52067	PtrMemberAccess	opt_save -> position
>52068	Identifier	position
>52069	Identifier	opt_save
>52070	ExpressionStatement	 
>52071	AssignmentExpr	opt_save -> alpha = 0
>52072	PrimaryExpression	0
>52073	PtrMemberAccess	opt_save -> alpha
>52074	Identifier	alpha
>52075	Identifier	opt_save
>52076	ExpressionStatement	 
>52077	AssignmentExpr	opt_cancel -> alpha = 0
>52078	PrimaryExpression	0
>52079	PtrMemberAccess	opt_cancel -> alpha
>52080	Identifier	alpha
>52081	Identifier	opt_cancel
>52082	ExpressionStatement	 
>52083	CallExpression	group_keyConfig -> setHidden ( true )
>52084	ArgumentList	true
>52085	Argument	true
>52086	Identifier	true
>52087	Callee	group_keyConfig -> setHidden
>52088	PtrMemberAccess	group_keyConfig -> setHidden
>52089	Identifier	setHidden
>52090	Identifier	group_keyConfig
>52091	ExpressionStatement	 
>52092	AssignmentExpr	group_keyConfig -> alpha = 0
>52093	PrimaryExpression	0
>52094	PtrMemberAccess	group_keyConfig -> alpha
>52095	Identifier	alpha
>52096	Identifier	group_keyConfig
>52097	ExpressionStatement	 
>52098	AssignmentExpr	keyConfigMenu = false
>52099	Identifier	false
>52100	Identifier	keyConfigMenu
>52101	Condition	 
>52102	UnaryOp	! f
>52103	Identifier	f
>52104	UnaryOperator	!
>52105	CompoundStatement	 
>52106	ExpressionStatement	 
>52107	AssignmentExpr	menuIconGlow -> alpha = 0
>52108	PrimaryExpression	0
>52109	PtrMemberAccess	menuIconGlow -> alpha
>52110	Identifier	alpha
>52111	Identifier	menuIconGlow
>52112	ExpressionStatement	 
>52113	CallExpression	opt_cancel -> setFocus ( true )
>52114	ArgumentList	true
>52115	Argument	true
>52116	Identifier	true
>52117	Callee	opt_cancel -> setFocus
>52118	PtrMemberAccess	opt_cancel -> setFocus
>52119	Identifier	setFocus
>52120	Identifier	opt_cancel
>52121	ExpressionStatement	 
>52122	AssignmentExpr	opt_cancel -> position = opt_cancel_original + Vector ( 0 , 120 )
>52123	AdditiveExpression	opt_cancel_original + Vector ( 0 , 120 )
>52124	CallExpression	Vector ( 0 , 120 )
>52125	ArgumentList	0
>52126	Argument	120
>52127	PrimaryExpression	120
>52128	Argument	0
>52129	PrimaryExpression	0
>52130	Callee	Vector
>52131	Identifier	Vector
>52132	Identifier	opt_cancel_original
>52133	PtrMemberAccess	opt_cancel -> position
>52134	Identifier	position
>52135	Identifier	opt_cancel
>52136	ExpressionStatement	 
>52137	AssignmentExpr	opt_save -> position = opt_save_original + Vector ( 0 , 120 )
>52138	AdditiveExpression	opt_save_original + Vector ( 0 , 120 )
>52139	CallExpression	Vector ( 0 , 120 )
>52140	ArgumentList	0
>52141	Argument	120
>52142	PrimaryExpression	120
>52143	Argument	0
>52144	PrimaryExpression	0
>52145	Callee	Vector
>52146	Identifier	Vector
>52147	Identifier	opt_save_original
>52148	PtrMemberAccess	opt_save -> position
>52149	Identifier	position
>52150	Identifier	opt_save
>52151	ExpressionStatement	 
>52152	AssignmentExpr	opt_save -> alpha = 1
>52153	PrimaryExpression	1
>52154	PtrMemberAccess	opt_save -> alpha
>52155	Identifier	alpha
>52156	Identifier	opt_save
>52157	ExpressionStatement	 
>52158	AssignmentExpr	opt_cancel -> alpha = 1
>52159	PrimaryExpression	1
>52160	PtrMemberAccess	opt_cancel -> alpha
>52161	Identifier	alpha
>52162	Identifier	opt_cancel
>52163	ExpressionStatement	 
>52164	CallExpression	upleft -> setDirMove ( DIR_DOWN , opt_save )
>52165	ArgumentList	DIR_DOWN
>52166	Argument	opt_save
>52167	Identifier	opt_save
>52168	Argument	DIR_DOWN
>52169	Identifier	DIR_DOWN
>52170	Callee	upleft -> setDirMove
>52171	PtrMemberAccess	upleft -> setDirMove
>52172	Identifier	setDirMove
>52173	Identifier	upleft
>52174	ExpressionStatement	 
>52175	CallExpression	opt_save -> setDirMove ( DIR_UP , upleft )
>52176	ArgumentList	DIR_UP
>52177	Argument	upleft
>52178	Identifier	upleft
>52179	Argument	DIR_UP
>52180	Identifier	DIR_UP
>52181	Callee	opt_save -> setDirMove
>52182	PtrMemberAccess	opt_save -> setDirMove
>52183	Identifier	setDirMove
>52184	Identifier	opt_save
>52185	ExpressionStatement	 
>52186	CallExpression	upright0 -> setDirMove ( DIR_DOWN , opt_cancel )
>52187	ArgumentList	DIR_DOWN
>52188	Argument	opt_cancel
>52189	Identifier	opt_cancel
>52190	Argument	DIR_DOWN
>52191	Identifier	DIR_DOWN
>52192	Callee	upright0 -> setDirMove
>52193	PtrMemberAccess	upright0 -> setDirMove
>52194	Identifier	setDirMove
>52195	Identifier	upright0
>52196	ExpressionStatement	 
>52197	CallExpression	upright -> setDirMove ( DIR_DOWN , opt_cancel )
>52198	ArgumentList	DIR_DOWN
>52199	Argument	opt_cancel
>52200	Identifier	opt_cancel
>52201	Argument	DIR_DOWN
>52202	Identifier	DIR_DOWN
>52203	Callee	upright -> setDirMove
>52204	PtrMemberAccess	upright -> setDirMove
>52205	Identifier	setDirMove
>52206	Identifier	upright
>52207	ExpressionStatement	 
>52208	CallExpression	opt_cancel -> setDirMove ( DIR_UP , upright )
>52209	ArgumentList	DIR_UP
>52210	Argument	upright
>52211	Identifier	upright
>52212	Argument	DIR_UP
>52213	Identifier	DIR_UP
>52214	Callee	opt_cancel -> setDirMove
>52215	PtrMemberAccess	opt_cancel -> setDirMove
>52216	Identifier	setDirMove
>52217	Identifier	opt_cancel
>52218	IdentifierDeclStatement	 
>52219	IdentifierDecl	* upleft = ( AquariaKeyConfig * ) ( * i )
>52220	AssignmentExpr	* upleft = ( AquariaKeyConfig * ) ( * i )
>52221	CastExpression	( AquariaKeyConfig * ) ( * i )
>52222	UnaryOp	* i
>52223	Identifier	i
>52224	UnaryOperator	*
>52225	CastTarget	AquariaKeyConfig *
>52226	Identifier	upleft
>52227	Identifier	upleft
>52228	IdentifierDeclType	AquariaKeyConfig *
>52229	ExpressionStatement	 
>52230	IncDecOp	i ++
>52231	IncDec	++
>52232	Identifier	i
>52233	IdentifierDeclStatement	 
>52234	IdentifierDecl	* upright = ( AquariaKeyConfig * ) ( * i )
>52235	AssignmentExpr	* upright = ( AquariaKeyConfig * ) ( * i )
>52236	CastExpression	( AquariaKeyConfig * ) ( * i )
>52237	UnaryOp	* i
>52238	Identifier	i
>52239	UnaryOperator	*
>52240	CastTarget	AquariaKeyConfig *
>52241	Identifier	upright
>52242	Identifier	upright
>52243	IdentifierDeclType	AquariaKeyConfig *
>52244	ExpressionStatement	 
>52245	IncDecOp	i ++
>52246	IncDec	++
>52247	Identifier	i
>52248	IdentifierDeclStatement	 
>52249	IdentifierDecl	* upright0 = ( AquariaKeyConfig * ) ( * i )
>52250	AssignmentExpr	* upright0 = ( AquariaKeyConfig * ) ( * i )
>52251	CastExpression	( AquariaKeyConfig * ) ( * i )
>52252	UnaryOp	* i
>52253	Identifier	i
>52254	UnaryOperator	*
>52255	CastTarget	AquariaKeyConfig *
>52256	Identifier	upright0
>52257	Identifier	upright0
>52258	IdentifierDeclType	AquariaKeyConfig *
>52259	IdentifierDeclStatement	 
>52260	IdentifierDecl	i = group_keyConfig -> children . rbegin ( )
>52261	AssignmentExpr	i = group_keyConfig -> children . rbegin ( )
>52262	CallExpression	group_keyConfig -> children . rbegin ( )
>52263	ArgumentList	 
>52264	Callee	group_keyConfig -> children . rbegin
>52265	MemberAccess	group_keyConfig -> children . rbegin
>52266	Identifier	rbegin
>52267	PtrMemberAccess	group_keyConfig -> children
>52268	Identifier	children
>52269	Identifier	group_keyConfig
>52270	Identifier	i
>52271	Identifier	i
>52272	IdentifierDeclType	RenderObject 
>52273	ExpressionStatement	 
>52274	AssignmentExpr	dsq -> user_bcontrol = dsq -> user
>52275	PtrMemberAccess	dsq -> user
>52276	Identifier	user
>52277	Identifier	dsq
>52278	PtrMemberAccess	dsq -> user_bcontrol
>52279	Identifier	user_bcontrol
>52280	Identifier	dsq
>52281	ExpressionStatement	 
>52282	AssignmentExpr	group_keyConfig -> alpha = 1
>52283	PrimaryExpression	1
>52284	PtrMemberAccess	group_keyConfig -> alpha
>52285	Identifier	alpha
>52286	Identifier	group_keyConfig
>52287	ExpressionStatement	 
>52288	CallExpression	group_keyConfig -> setHidden ( false )
>52289	ArgumentList	false
>52290	Argument	false
>52291	Identifier	false
>52292	Callee	group_keyConfig -> setHidden
>52293	PtrMemberAccess	group_keyConfig -> setHidden
>52294	Identifier	setHidden
>52295	Identifier	group_keyConfig
>52296	ExpressionStatement	 
>52297	AssignmentExpr	keyConfigMenu = true
>52298	Identifier	true
>52299	Identifier	keyConfigMenu
>52300	ExpressionStatement	 
>52301	CallExpression	menuBg2 -> alpha . interpolateTo ( 0 , t )
>52302	ArgumentList	0
>52303	Argument	t
>52304	Identifier	t
>52305	Argument	0
>52306	PrimaryExpression	0
>52307	Callee	menuBg2 -> alpha . interpolateTo
>52308	MemberAccess	menuBg2 -> alpha . interpolateTo
>52309	Identifier	interpolateTo
>52310	PtrMemberAccess	menuBg2 -> alpha
>52311	Identifier	alpha
>52312	Identifier	menuBg2
>52313	ExpressionStatement	 
>52314	CallExpression	toggleMainMenu ( false )
>52315	ArgumentList	false
>52316	Argument	false
>52317	Identifier	false
>52318	Callee	toggleMainMenu
>52319	Identifier	toggleMainMenu
>52320	CompoundStatement	 
>52321	ForStatement	for ( int i = 4 ; i <= 8 ; i ++ )
>52322	ExpressionStatement	 
>52323	CallExpression	menu [ i ] -> alpha . interpolateTo ( 0 , t )
>52324	ArgumentList	0
>52325	Argument	t
>52326	Identifier	t
>52327	Argument	0
>52328	PrimaryExpression	0
>52329	Callee	menu [ i ] -> alpha . interpolateTo
>52330	MemberAccess	menu [ i ] -> alpha . interpolateTo
>52331	Identifier	interpolateTo
>52332	PtrMemberAccess	menu [ i ] -> alpha
>52333	Identifier	alpha
>52334	ArrayIndexing	menu [ i ]
>52335	Identifier	i
>52336	Identifier	menu
>52337	IncDecOp	 
>52338	IncDec	++
>52339	Identifier	i
>52340	Condition	 
>52341	RelationalExpression	i <= 8
>52342	PrimaryExpression	8
>52343	Identifier	i
>52344	ForInit	 
>52345	IdentifierDeclStatement	int i = 4 ;
>52346	IdentifierDecl	i = 4
>52347	AssignmentExpr	i = 4
>52348	PrimaryExpression	4
>52349	Identifier	i
>52350	Identifier	i
>52351	IdentifierDeclType	int
>52352	ForStatement	for ( int i = 0 ; i <= 1 ; i ++ )
>52353	ExpressionStatement	 
>52354	CallExpression	menu [ i ] -> alpha . interpolateTo ( 0 , t )
>52355	ArgumentList	0
>52356	Argument	t
>52357	Identifier	t
>52358	Argument	0
>52359	PrimaryExpression	0
>52360	Callee	menu [ i ] -> alpha . interpolateTo
>52361	MemberAccess	menu [ i ] -> alpha . interpolateTo
>52362	Identifier	interpolateTo
>52363	PtrMemberAccess	menu [ i ] -> alpha
>52364	Identifier	alpha
>52365	ArrayIndexing	menu [ i ]
>52366	Identifier	i
>52367	Identifier	menu
>52368	IncDecOp	 
>52369	IncDec	++
>52370	Identifier	i
>52371	Condition	 
>52372	RelationalExpression	i <= 1
>52373	PrimaryExpression	1
>52374	Identifier	i
>52375	ForInit	 
>52376	IdentifierDeclStatement	int i = 0 ;
>52377	IdentifierDecl	i = 0
>52378	AssignmentExpr	i = 0
>52379	PrimaryExpression	0
>52380	Identifier	i
>52381	Identifier	i
>52382	IdentifierDeclType	int
>52383	ExpressionStatement	 
>52384	CallExpression	toggleOptionsMenu ( false , false , true )
>52385	ArgumentList	false
>52386	Argument	true
>52387	Identifier	true
>52388	Argument	false
>52389	Identifier	false
>52390	Argument	false
>52391	Identifier	false
>52392	Callee	toggleOptionsMenu
>52393	Identifier	toggleOptionsMenu
>52394	Condition	 
>52395	AndExpression	f && ! keyConfigMenu
>52396	UnaryOp	! keyConfigMenu
>52397	Identifier	keyConfigMenu
>52398	UnaryOperator	!
>52399	Identifier	f
>52400	ExpressionStatement	 
>52401	AssignmentExpr	playingSongInMenu = - 1
>52402	UnaryOp	- 1
>52403	PrimaryExpression	1
>52404	UnaryOperator	-
>52405	Identifier	playingSongInMenu
>52406	IdentifierDeclStatement	 
>52407	IdentifierDecl	t = 0
>52408	AssignmentExpr	t = 0
>52409	PrimaryExpression	0
>52410	Identifier	t
>52411	Identifier	t
>52412	IdentifierDeclType	const float
>52460	FunctionDef	Game 
>52461	ParameterList	bool f , bool skipBackup , bool isKeyConfig
>52462	Parameter	 
>52463	Identifier	isKeyConfig
>52464	ParameterType	bool
>52465	Parameter	 
>52466	Identifier	skipBackup
>52467	ParameterType	bool
>52468	Parameter	 
>52469	Identifier	f
>52470	ParameterType	bool
>52471	ReturnType	void
>52472	CompoundStatement	 
>52473	IfStatement	if ( f && ! optionsMenu )
>52474	ElseStatement	else
>52475	IfStatement	if ( ! f && optionsMenu )
>52476	CompoundStatement	 
>52477	ExpressionStatement	 
>52478	AssignmentExpr	menuIconGlow -> alpha = 1
>52479	PrimaryExpression	1
>52480	PtrMemberAccess	menuIconGlow -> alpha
>52481	Identifier	alpha
>52482	Identifier	menuIconGlow
>52483	IfStatement	if ( ! optionsOnly )
>52484	CompoundStatement	 
>52485	ExpressionStatement	 
>52486	CallExpression	menuBg2 -> alpha . interpolateTo ( 1 , t )
>52487	ArgumentList	1
>52488	Argument	t
>52489	Identifier	t
>52490	Argument	1
>52491	PrimaryExpression	1
>52492	Callee	menuBg2 -> alpha . interpolateTo
>52493	MemberAccess	menuBg2 -> alpha . interpolateTo
>52494	Identifier	interpolateTo
>52495	PtrMemberAccess	menuBg2 -> alpha
>52496	Identifier	alpha
>52497	Identifier	menuBg2
>52498	IfStatement	if ( ! isKeyConfig )
>52499	CompoundStatement	 
>52500	SwitchStatement	switch ( dsq -> continuity . lastOptionsMenuPage )
>52501	CompoundStatement	 
>52502	BreakStatement	 
>52503	ExpressionStatement	 
>52504	CallExpression	( ( AquariaMenuItem * ) menu [ 5 ] ) -> setFocus ( true )
>52505	ArgumentList	true
>52506	Argument	true
>52507	Identifier	true
>52508	Callee	( ( AquariaMenuItem * ) menu [ 5 ] ) -> setFocus
>52509	PtrMemberAccess	( ( AquariaMenuItem * ) menu [ 5 ] ) -> setFocus
>52510	Identifier	setFocus
>52511	CastExpression	( AquariaMenuItem * ) menu [ 5 ]
>52512	ArrayIndexing	menu [ 5 ]
>52513	PrimaryExpression	5
>52514	Identifier	menu
>52515	CastTarget	AquariaMenuItem *
>52516	ExpressionStatement	 
>52517	CallExpression	toggleMainMenu ( true )
>52518	ArgumentList	true
>52519	Argument	true
>52520	Identifier	true
>52521	Callee	toggleMainMenu
>52522	Identifier	toggleMainMenu
>52523	Label	 
>52524	Identifier	default
>52525	Label	 
>52526	Identifier	MENUPAGE_SONGS
>52527	BreakStatement	 
>52528	ExpressionStatement	 
>52529	CallExpression	( ( AquariaMenuItem * ) menu [ 7 ] ) -> setFocus ( true )
>52530	ArgumentList	true
>52531	Argument	true
>52532	Identifier	true
>52533	Callee	( ( AquariaMenuItem * ) menu [ 7 ] ) -> setFocus
>52534	PtrMemberAccess	( ( AquariaMenuItem * ) menu [ 7 ] ) -> setFocus
>52535	Identifier	setFocus
>52536	CastExpression	( AquariaMenuItem * ) menu [ 7 ]
>52537	ArrayIndexing	menu [ 7 ]
>52538	PrimaryExpression	7
>52539	Identifier	menu
>52540	CastTarget	AquariaMenuItem *
>52541	ExpressionStatement	 
>52542	CallExpression	togglePetMenu ( true )
>52543	ArgumentList	true
>52544	Argument	true
>52545	Identifier	true
>52546	Callee	togglePetMenu
>52547	Identifier	togglePetMenu
>52548	Label	 
>52549	Identifier	MENUPAGE_PETS
>52550	BreakStatement	 
>52551	ExpressionStatement	 
>52552	CallExpression	( ( AquariaMenuItem * ) menu [ 8 ] ) -> setFocus ( true )
>52553	ArgumentList	true
>52554	Argument	true
>52555	Identifier	true
>52556	Callee	( ( AquariaMenuItem * ) menu [ 8 ] ) -> setFocus
>52557	PtrMemberAccess	( ( AquariaMenuItem * ) menu [ 8 ] ) -> setFocus
>52558	Identifier	setFocus
>52559	CastExpression	( AquariaMenuItem * ) menu [ 8 ]
>52560	ArrayIndexing	menu [ 8 ]
>52561	PrimaryExpression	8
>52562	Identifier	menu
>52563	CastTarget	AquariaMenuItem *
>52564	ExpressionStatement	 
>52565	CallExpression	toggleTreasureMenu ( true )
>52566	ArgumentList	true
>52567	Argument	true
>52568	Identifier	true
>52569	Callee	toggleTreasureMenu
>52570	Identifier	toggleTreasureMenu
>52571	Label	 
>52572	Identifier	MENUPAGE_TREASURES
>52573	BreakStatement	 
>52574	ExpressionStatement	 
>52575	CallExpression	( ( AquariaMenuItem * ) menu [ 6 ] ) -> setFocus ( true )
>52576	ArgumentList	true
>52577	Argument	true
>52578	Identifier	true
>52579	Callee	( ( AquariaMenuItem * ) menu [ 6 ] ) -> setFocus
>52580	PtrMemberAccess	( ( AquariaMenuItem * ) menu [ 6 ] ) -> setFocus
>52581	Identifier	setFocus
>52582	CastExpression	( AquariaMenuItem * ) menu [ 6 ]
>52583	ArrayIndexing	menu [ 6 ]
>52584	PrimaryExpression	6
>52585	Identifier	menu
>52586	CastTarget	AquariaMenuItem *
>52587	ExpressionStatement	 
>52588	CallExpression	toggleFoodMenu ( true )
>52589	ArgumentList	true
>52590	Argument	true
>52591	Identifier	true
>52592	Callee	toggleFoodMenu
>52593	Identifier	toggleFoodMenu
>52594	Label	 
>52595	Identifier	MENUPAGE_FOOD
>52596	Condition	 
>52597	MemberAccess	dsq -> continuity . lastOptionsMenuPage
>52598	Identifier	lastOptionsMenuPage
>52599	PtrMemberAccess	dsq -> continuity
>52600	Identifier	continuity
>52601	Identifier	dsq
>52602	Condition	 
>52603	UnaryOp	! isKeyConfig
>52604	Identifier	isKeyConfig
>52605	UnaryOperator	!
>52606	ForStatement	for ( int i = 4 ; i <= 9 ; i ++ )
>52607	CompoundStatement	 
>52608	ExpressionStatement	 
>52609	CallExpression	menu [ i ] -> alpha . interpolateTo ( 1 , t )
>52610	ArgumentList	1
>52611	Argument	t
>52612	Identifier	t
>52613	Argument	1
>52614	PrimaryExpression	1
>52615	Callee	menu [ i ] -> alpha . interpolateTo
>52616	MemberAccess	menu [ i ] -> alpha . interpolateTo
>52617	Identifier	interpolateTo
>52618	PtrMemberAccess	menu [ i ] -> alpha
>52619	Identifier	alpha
>52620	ArrayIndexing	menu [ i ]
>52621	Identifier	i
>52622	Identifier	menu
>52623	IncDecOp	 
>52624	IncDec	++
>52625	Identifier	i
>52626	Condition	 
>52627	RelationalExpression	i <= 9
>52628	PrimaryExpression	9
>52629	Identifier	i
>52630	ForInit	 
>52631	IdentifierDeclStatement	int i = 4 ;
>52632	IdentifierDecl	i = 4
>52633	AssignmentExpr	i = 4
>52634	PrimaryExpression	4
>52635	Identifier	i
>52636	Identifier	i
>52637	IdentifierDeclType	int
>52638	ForStatement	for ( int i = 0 ; i <= 1 ; i ++ )
>52639	ExpressionStatement	 
>52640	CallExpression	menu [ i ] -> alpha . interpolateTo ( 1 , t )
>52641	ArgumentList	1
>52642	Argument	t
>52643	Identifier	t
>52644	Argument	1
>52645	PrimaryExpression	1
>52646	Callee	menu [ i ] -> alpha . interpolateTo
>52647	MemberAccess	menu [ i ] -> alpha . interpolateTo
>52648	Identifier	interpolateTo
>52649	PtrMemberAccess	menu [ i ] -> alpha
>52650	Identifier	alpha
>52651	ArrayIndexing	menu [ i ]
>52652	Identifier	i
>52653	Identifier	menu
>52654	IncDecOp	 
>52655	IncDec	++
>52656	Identifier	i
>52657	Condition	 
>52658	RelationalExpression	i <= 1
>52659	PrimaryExpression	1
>52660	Identifier	i
>52661	ForInit	 
>52662	IdentifierDeclStatement	int i = 0 ;
>52663	IdentifierDecl	i = 0
>52664	AssignmentExpr	i = 0
>52665	PrimaryExpression	0
>52666	Identifier	i
>52667	Identifier	i
>52668	IdentifierDeclType	int
>52669	Condition	 
>52670	UnaryOp	! optionsOnly
>52671	Identifier	optionsOnly
>52672	UnaryOperator	!
>52673	ExpressionStatement	 
>52674	AssignmentExpr	optionsMenu = false
>52675	Identifier	false
>52676	Identifier	optionsMenu
>52677	ExpressionStatement	 
>52678	AssignmentExpr	liCrystal -> alpha = 0
>52679	PrimaryExpression	0
>52680	PtrMemberAccess	liCrystal -> alpha
>52681	Identifier	alpha
>52682	Identifier	liCrystal
>52683	ExpressionStatement	 
>52684	AssignmentExpr	opt_save -> alpha = 0
>52685	PrimaryExpression	0
>52686	PtrMemberAccess	opt_save -> alpha
>52687	Identifier	alpha
>52688	Identifier	opt_save
>52689	ExpressionStatement	 
>52690	AssignmentExpr	opt_cancel -> alpha = 0
>52691	PrimaryExpression	0
>52692	PtrMemberAccess	opt_cancel -> alpha
>52693	Identifier	alpha
>52694	Identifier	opt_cancel
>52695	ExpressionStatement	 
>52696	CallExpression	options -> alpha . interpolateTo ( 0 , t )
>52697	ArgumentList	0
>52698	Argument	t
>52699	Identifier	t
>52700	Argument	0
>52701	PrimaryExpression	0
>52702	Callee	options -> alpha . interpolateTo
>52703	MemberAccess	options -> alpha . interpolateTo
>52704	Identifier	interpolateTo
>52705	PtrMemberAccess	options -> alpha
>52706	Identifier	alpha
>52707	Identifier	options
>52708	ExpressionStatement	 
>52709	AssignmentExpr	keyConfigButton -> alpha = 0
>52710	PrimaryExpression	0
>52711	PtrMemberAccess	keyConfigButton -> alpha
>52712	Identifier	alpha
>52713	Identifier	keyConfigButton
>52714	ExpressionStatement	 
>52715	AssignmentExpr	lips -> alpha = 0
>52716	PrimaryExpression	0
>52717	PtrMemberAccess	lips -> alpha
>52718	Identifier	alpha
>52719	Identifier	lips
>52720	Condition	 
>52721	AndExpression	! f && optionsMenu
>52722	Identifier	optionsMenu
>52723	UnaryOp	! f
>52724	Identifier	f
>52725	UnaryOperator	!
>52726	CompoundStatement	 
>52727	ExpressionStatement	 
>52728	AssignmentExpr	menuIconGlow -> alpha = 0
>52729	PrimaryExpression	0
>52730	PtrMemberAccess	menuIconGlow -> alpha
>52731	Identifier	alpha
>52732	Identifier	menuIconGlow
>52733	ExpressionStatement	 
>52734	AssignmentExpr	optionsMenu = true
>52735	Identifier	true
>52736	Identifier	optionsMenu
>52737	ExpressionStatement	 
>52738	AssignmentExpr	liCrystal -> alpha = 1
>52739	PrimaryExpression	1
>52740	PtrMemberAccess	liCrystal -> alpha
>52741	Identifier	alpha
>52742	Identifier	liCrystal
>52743	ExpressionStatement	 
>52744	AssignmentExpr	lips -> alpha = 0
>52745	PrimaryExpression	0
>52746	PtrMemberAccess	lips -> alpha
>52747	Identifier	alpha
>52748	Identifier	lips
>52749	ExpressionStatement	 
>52750	CallExpression	opt_cancel -> setFocus ( true )
>52751	ArgumentList	true
>52752	Argument	true
>52753	Identifier	true
>52754	Callee	opt_cancel -> setFocus
>52755	PtrMemberAccess	opt_cancel -> setFocus
>52756	Identifier	setFocus
>52757	Identifier	opt_cancel
>52758	ExpressionStatement	 
>52759	AssignmentExpr	opt_save -> alpha = 1
>52760	PrimaryExpression	1
>52761	PtrMemberAccess	opt_save -> alpha
>52762	Identifier	alpha
>52763	Identifier	opt_save
>52764	ExpressionStatement	 
>52765	AssignmentExpr	opt_cancel -> alpha = 1
>52766	PrimaryExpression	1
>52767	PtrMemberAccess	opt_cancel -> alpha
>52768	Identifier	alpha
>52769	Identifier	opt_cancel
>52770	ExpressionStatement	 
>52771	CallExpression	menuBg2 -> alpha . interpolateTo ( 0 , t )
>52772	ArgumentList	0
>52773	Argument	t
>52774	Identifier	t
>52775	Argument	0
>52776	PrimaryExpression	0
>52777	Callee	menuBg2 -> alpha . interpolateTo
>52778	MemberAccess	menuBg2 -> alpha . interpolateTo
>52779	Identifier	interpolateTo
>52780	PtrMemberAccess	menuBg2 -> alpha
>52781	Identifier	alpha
>52782	Identifier	menuBg2
>52783	ExpressionStatement	 
>52784	AssignmentExpr	keyConfigButton -> alpha = 1
>52785	PrimaryExpression	1
>52786	PtrMemberAccess	keyConfigButton -> alpha
>52787	Identifier	alpha
>52788	Identifier	keyConfigButton
>52789	ExpressionStatement	 
>52790	CallExpression	toggleMainMenu ( false )
>52791	ArgumentList	false
>52792	Argument	false
>52793	Identifier	false
>52794	Callee	toggleMainMenu
>52795	Identifier	toggleMainMenu
>52796	ForStatement	for ( int i = 4 ; i <= 9 ; i ++ )
>52797	ExpressionStatement	 
>52798	CallExpression	menu [ i ] -> alpha . interpolateTo ( 0 , t )
>52799	ArgumentList	0
>52800	Argument	t
>52801	Identifier	t
>52802	Argument	0
>52803	PrimaryExpression	0
>52804	Callee	menu [ i ] -> alpha . interpolateTo
>52805	MemberAccess	menu [ i ] -> alpha . interpolateTo
>52806	Identifier	interpolateTo
>52807	PtrMemberAccess	menu [ i ] -> alpha
>52808	Identifier	alpha
>52809	ArrayIndexing	menu [ i ]
>52810	Identifier	i
>52811	Identifier	menu
>52812	IncDecOp	 
>52813	IncDec	++
>52814	Identifier	i
>52815	Condition	 
>52816	RelationalExpression	i <= 9
>52817	PrimaryExpression	9
>52818	Identifier	i
>52819	ForInit	 
>52820	IdentifierDeclStatement	int i = 4 ;
>52821	IdentifierDecl	i = 4
>52822	AssignmentExpr	i = 4
>52823	PrimaryExpression	4
>52824	Identifier	i
>52825	Identifier	i
>52826	IdentifierDeclType	int
>52827	ForStatement	for ( int i = 0 ; i <= 1 ; i ++ )
>52828	ExpressionStatement	 
>52829	CallExpression	menu [ i ] -> alpha . interpolateTo ( 0 , t )
>52830	ArgumentList	0
>52831	Argument	t
>52832	Identifier	t
>52833	Argument	0
>52834	PrimaryExpression	0
>52835	Callee	menu [ i ] -> alpha . interpolateTo
>52836	MemberAccess	menu [ i ] -> alpha . interpolateTo
>52837	Identifier	interpolateTo
>52838	PtrMemberAccess	menu [ i ] -> alpha
>52839	Identifier	alpha
>52840	ArrayIndexing	menu [ i ]
>52841	Identifier	i
>52842	Identifier	menu
>52843	IncDecOp	 
>52844	IncDec	++
>52845	Identifier	i
>52846	Condition	 
>52847	RelationalExpression	i <= 1
>52848	PrimaryExpression	1
>52849	Identifier	i
>52850	ForInit	 
>52851	IdentifierDeclStatement	int i = 0 ;
>52852	IdentifierDecl	i = 0
>52853	AssignmentExpr	i = 0
>52854	PrimaryExpression	0
>52855	Identifier	i
>52856	Identifier	i
>52857	IdentifierDeclType	int
>52858	ExpressionStatement	 
>52859	CallExpression	options -> alpha . interpolateTo ( 1 , t )
>52860	ArgumentList	1
>52861	Argument	t
>52862	Identifier	t
>52863	Argument	1
>52864	PrimaryExpression	1
>52865	Callee	options -> alpha . interpolateTo
>52866	MemberAccess	options -> alpha . interpolateTo
>52867	Identifier	interpolateTo
>52868	PtrMemberAccess	options -> alpha
>52869	Identifier	alpha
>52870	Identifier	options
>52871	IfStatement	if ( ! skipBackup )
>52872	ExpressionStatement	 
>52873	AssignmentExpr	dsq -> user_backup = dsq -> user
>52874	PtrMemberAccess	dsq -> user
>52875	Identifier	user
>52876	Identifier	dsq
>52877	PtrMemberAccess	dsq -> user_backup
>52878	Identifier	user_backup
>52879	Identifier	dsq
>52880	Condition	 
>52881	UnaryOp	! skipBackup
>52882	Identifier	skipBackup
>52883	UnaryOperator	!
>52884	ExpressionStatement	 
>52885	CallExpression	keyConfigButton -> setDirMove ( DIR_UP , targetingCheck )
>52886	ArgumentList	DIR_UP
>52887	Argument	targetingCheck
>52888	Identifier	targetingCheck
>52889	Argument	DIR_UP
>52890	Identifier	DIR_UP
>52891	Callee	keyConfigButton -> setDirMove
>52892	PtrMemberAccess	keyConfigButton -> setDirMove
>52893	Identifier	setDirMove
>52894	Identifier	keyConfigButton
>52895	ExpressionStatement	 
>52896	CallExpression	voxslider -> setDirMove ( DIR_DOWN , opt_save )
>52897	ArgumentList	DIR_DOWN
>52898	Argument	opt_save
>52899	Identifier	opt_save
>52900	Argument	DIR_DOWN
>52901	Identifier	DIR_DOWN
>52902	Callee	voxslider -> setDirMove
>52903	PtrMemberAccess	voxslider -> setDirMove
>52904	Identifier	setDirMove
>52905	Identifier	voxslider
>52906	ExpressionStatement	 
>52907	CallExpression	opt_save -> setDirMove ( DIR_UP , voxslider )
>52908	ArgumentList	DIR_UP
>52909	Argument	voxslider
>52910	Identifier	voxslider
>52911	Argument	DIR_UP
>52912	Identifier	DIR_UP
>52913	Callee	opt_save -> setDirMove
>52914	PtrMemberAccess	opt_save -> setDirMove
>52915	Identifier	setDirMove
>52916	Identifier	opt_save
>52917	ExpressionStatement	 
>52918	CallExpression	targetingCheck -> setDirMove ( DIR_DOWN , opt_cancel )
>52919	ArgumentList	DIR_DOWN
>52920	Argument	opt_cancel
>52921	Identifier	opt_cancel
>52922	Argument	DIR_DOWN
>52923	Identifier	DIR_DOWN
>52924	Callee	targetingCheck -> setDirMove
>52925	PtrMemberAccess	targetingCheck -> setDirMove
>52926	Identifier	setDirMove
>52927	Identifier	targetingCheck
>52928	ExpressionStatement	 
>52929	CallExpression	opt_cancel -> setDirMove ( DIR_UP , targetingCheck )
>52930	ArgumentList	DIR_UP
>52931	Argument	targetingCheck
>52932	Identifier	targetingCheck
>52933	Argument	DIR_UP
>52934	Identifier	DIR_UP
>52935	Callee	opt_cancel -> setDirMove
>52936	PtrMemberAccess	opt_cancel -> setDirMove
>52937	Identifier	setDirMove
>52938	Identifier	opt_cancel
>52939	IfStatement	if ( resBox )
>52940	CompoundStatement	 
>52941	IfStatement	if ( ! resBox -> setSelectedItem ( os . str ( ) ) )
>52942	CompoundStatement	 
>52943	ExpressionStatement	 
>52944	CallExpression	resBox -> setSelectedItem ( os . str ( ) )
>52945	ArgumentList	os . str ( )
>52946	Argument	os . str ( )
>52947	CallExpression	os . str ( )
>52948	ArgumentList	 
>52949	Callee	os . str
>52950	MemberAccess	os . str
>52951	Identifier	str
>52952	Identifier	os
>52953	Callee	resBox -> setSelectedItem
>52954	PtrMemberAccess	resBox -> setSelectedItem
>52955	Identifier	setSelectedItem
>52956	Identifier	resBox
>52957	ExpressionStatement	 
>52958	CallExpression	resBox -> addItem ( os . str ( ) )
>52959	ArgumentList	os . str ( )
>52960	Argument	os . str ( )
>52961	CallExpression	os . str ( )
>52962	ArgumentList	 
>52963	Callee	os . str
>52964	MemberAccess	os . str
>52965	Identifier	str
>52966	Identifier	os
>52967	Callee	resBox -> addItem
>52968	PtrMemberAccess	resBox -> addItem
>52969	Identifier	addItem
>52970	Identifier	resBox
>52971	Condition	 
>52972	UnaryOp	! resBox -> setSelectedItem ( os . str ( ) )
>52973	CallExpression	resBox -> setSelectedItem ( os . str ( ) )
>52974	ArgumentList	os . str ( )
>52975	Argument	os . str ( )
>52976	CallExpression	os . str ( )
>52977	ArgumentList	 
>52978	Callee	os . str
>52979	MemberAccess	os . str
>52980	Identifier	str
>52981	Identifier	os
>52982	Callee	resBox -> setSelectedItem
>52983	PtrMemberAccess	resBox -> setSelectedItem
>52984	Identifier	setSelectedItem
>52985	Identifier	resBox
>52986	UnaryOperator	!
>52987	ExpressionStatement	 
>52988	ShiftExpression	os << core -> width << \"x\" << core -> height
>52989	ShiftExpression	core -> width << \"x\" << core -> height
>52990	ShiftExpression	\"x\" << core -> height
>52991	PtrMemberAccess	core -> height
>52992	Identifier	height
>52993	Identifier	core
>52994	PrimaryExpression	\"x\"
>52995	PtrMemberAccess	core -> width
>52996	Identifier	width
>52997	Identifier	core
>52998	Identifier	os
>52999	IdentifierDeclStatement	 
>53000	IdentifierDecl	os
>53001	Identifier	os
>53002	IdentifierDeclType	std 
>53003	Condition	 
>53004	Identifier	resBox
>53005	IfStatement	if ( micInputCheck )
>53006	ExpressionStatement	 
>53007	CallExpression	micInputCheck -> setValue ( dsq -> user . audio . micOn )
>53008	ArgumentList	dsq -> user . audio . micOn
>53009	Argument	dsq -> user . audio . micOn
>53010	MemberAccess	dsq -> user . audio . micOn
>53011	Identifier	micOn
>53012	MemberAccess	dsq -> user . audio
>53013	Identifier	audio
>53014	PtrMemberAccess	dsq -> user
>53015	Identifier	user
>53016	Identifier	dsq
>53017	Callee	micInputCheck -> setValue
>53018	PtrMemberAccess	micInputCheck -> setValue
>53019	Identifier	setValue
>53020	Identifier	micInputCheck
>53021	Condition	 
>53022	Identifier	micInputCheck
>53023	IfStatement	if ( ripplesCheck )
>53024	ExpressionStatement	 
>53025	CallExpression	ripplesCheck -> setValue ( core -> afterEffectManager != 0 )
>53026	ArgumentList	core -> afterEffectManager != 0
>53027	Argument	core -> afterEffectManager != 0
>53028	EqualityExpression	core -> afterEffectManager != 0
>53029	PrimaryExpression	0
>53030	PtrMemberAccess	core -> afterEffectManager
>53031	Identifier	afterEffectManager
>53032	Identifier	core
>53033	Callee	ripplesCheck -> setValue
>53034	PtrMemberAccess	ripplesCheck -> setValue
>53035	Identifier	setValue
>53036	Identifier	ripplesCheck
>53037	Condition	 
>53038	Identifier	ripplesCheck
>53039	ExpressionStatement	 
>53040	CallExpression	fullscreenCheck -> setValue ( dsq -> isFullscreen ( ) )
>53041	ArgumentList	dsq -> isFullscreen ( )
>53042	Argument	dsq -> isFullscreen ( )
>53043	CallExpression	dsq -> isFullscreen ( )
>53044	ArgumentList	 
>53045	Callee	dsq -> isFullscreen
>53046	PtrMemberAccess	dsq -> isFullscreen
>53047	Identifier	isFullscreen
>53048	Identifier	dsq
>53049	Callee	fullscreenCheck -> setValue
>53050	PtrMemberAccess	fullscreenCheck -> setValue
>53051	Identifier	setValue
>53052	Identifier	fullscreenCheck
>53053	ExpressionStatement	 
>53054	CallExpression	subtitlesCheck -> setValue ( dsq -> user . audio . subtitles )
>53055	ArgumentList	dsq -> user . audio . subtitles
>53056	Argument	dsq -> user . audio . subtitles
>53057	MemberAccess	dsq -> user . audio . subtitles
>53058	Identifier	subtitles
>53059	MemberAccess	dsq -> user . audio
>53060	Identifier	audio
>53061	PtrMemberAccess	dsq -> user
>53062	Identifier	user
>53063	Identifier	dsq
>53064	Callee	subtitlesCheck -> setValue
>53065	PtrMemberAccess	subtitlesCheck -> setValue
>53066	Identifier	setValue
>53067	Identifier	subtitlesCheck
>53068	ExpressionStatement	 
>53069	CallExpression	targetingCheck -> setValue ( dsq -> user . control . targeting )
>53070	ArgumentList	dsq -> user . control . targeting
>53071	Argument	dsq -> user . control . targeting
>53072	MemberAccess	dsq -> user . control . targeting
>53073	Identifier	targeting
>53074	MemberAccess	dsq -> user . control
>53075	Identifier	control
>53076	PtrMemberAccess	dsq -> user
>53077	Identifier	user
>53078	Identifier	dsq
>53079	Callee	targetingCheck -> setValue
>53080	PtrMemberAccess	targetingCheck -> setValue
>53081	Identifier	setValue
>53082	Identifier	targetingCheck
>53083	ExpressionStatement	 
>53084	CallExpression	autoAimCheck -> setValue ( dsq -> user . control . autoAim )
>53085	ArgumentList	dsq -> user . control . autoAim
>53086	Argument	dsq -> user . control . autoAim
>53087	MemberAccess	dsq -> user . control . autoAim
>53088	Identifier	autoAim
>53089	MemberAccess	dsq -> user . control
>53090	Identifier	control
>53091	PtrMemberAccess	dsq -> user
>53092	Identifier	user
>53093	Identifier	dsq
>53094	Callee	autoAimCheck -> setValue
>53095	PtrMemberAccess	autoAimCheck -> setValue
>53096	Identifier	setValue
>53097	Identifier	autoAimCheck
>53098	ExpressionStatement	 
>53099	CallExpression	toolTipsCheck -> setValue ( dsq -> user . control . toolTipsOn )
>53100	ArgumentList	dsq -> user . control . toolTipsOn
>53101	Argument	dsq -> user . control . toolTipsOn
>53102	MemberAccess	dsq -> user . control . toolTipsOn
>53103	Identifier	toolTipsOn
>53104	MemberAccess	dsq -> user . control
>53105	Identifier	control
>53106	PtrMemberAccess	dsq -> user
>53107	Identifier	user
>53108	Identifier	dsq
>53109	Callee	toolTipsCheck -> setValue
>53110	PtrMemberAccess	toolTipsCheck -> setValue
>53111	Identifier	setValue
>53112	Identifier	toolTipsCheck
>53113	ExpressionStatement	 
>53114	CallExpression	flipInputButtonsCheck -> setValue ( dsq -> user . control . flipInputButtons )
>53115	ArgumentList	dsq -> user . control . flipInputButtons
>53116	Argument	dsq -> user . control . flipInputButtons
>53117	MemberAccess	dsq -> user . control . flipInputButtons
>53118	Identifier	flipInputButtons
>53119	MemberAccess	dsq -> user . control
>53120	Identifier	control
>53121	PtrMemberAccess	dsq -> user
>53122	Identifier	user
>53123	Identifier	dsq
>53124	Callee	flipInputButtonsCheck -> setValue
>53125	PtrMemberAccess	flipInputButtonsCheck -> setValue
>53126	Identifier	setValue
>53127	Identifier	flipInputButtonsCheck
>53128	IfStatement	if ( blurEffectsCheck )
>53129	ExpressionStatement	 
>53130	CallExpression	blurEffectsCheck -> setValue ( dsq -> user . video . blur )
>53131	ArgumentList	dsq -> user . video . blur
>53132	Argument	dsq -> user . video . blur
>53133	MemberAccess	dsq -> user . video . blur
>53134	Identifier	blur
>53135	MemberAccess	dsq -> user . video
>53136	Identifier	video
>53137	PtrMemberAccess	dsq -> user
>53138	Identifier	user
>53139	Identifier	dsq
>53140	Callee	blurEffectsCheck -> setValue
>53141	PtrMemberAccess	blurEffectsCheck -> setValue
>53142	Identifier	setValue
>53143	Identifier	blurEffectsCheck
>53144	Condition	 
>53145	Identifier	blurEffectsCheck
>53146	ExpressionStatement	 
>53147	CallExpression	sfxslider -> setValue ( dsq -> user . audio . sfxvol )
>53148	ArgumentList	dsq -> user . audio . sfxvol
>53149	Argument	dsq -> user . audio . sfxvol
>53150	MemberAccess	dsq -> user . audio . sfxvol
>53151	Identifier	sfxvol
>53152	MemberAccess	dsq -> user . audio
>53153	Identifier	audio
>53154	PtrMemberAccess	dsq -> user
>53155	Identifier	user
>53156	Identifier	dsq
>53157	Callee	sfxslider -> setValue
>53158	PtrMemberAccess	sfxslider -> setValue
>53159	Identifier	setValue
>53160	Identifier	sfxslider
>53161	ExpressionStatement	 
>53162	CallExpression	musslider -> setValue ( dsq -> user . audio . musvol )
>53163	ArgumentList	dsq -> user . audio . musvol
>53164	Argument	dsq -> user . audio . musvol
>53165	MemberAccess	dsq -> user . audio . musvol
>53166	Identifier	musvol
>53167	MemberAccess	dsq -> user . audio
>53168	Identifier	audio
>53169	PtrMemberAccess	dsq -> user
>53170	Identifier	user
>53171	Identifier	dsq
>53172	Callee	musslider -> setValue
>53173	PtrMemberAccess	musslider -> setValue
>53174	Identifier	setValue
>53175	Identifier	musslider
>53176	ExpressionStatement	 
>53177	CallExpression	voxslider -> setValue ( dsq -> user . audio . voxvol )
>53178	ArgumentList	dsq -> user . audio . voxvol
>53179	Argument	dsq -> user . audio . voxvol
>53180	MemberAccess	dsq -> user . audio . voxvol
>53181	Identifier	voxvol
>53182	MemberAccess	dsq -> user . audio
>53183	Identifier	audio
>53184	PtrMemberAccess	dsq -> user
>53185	Identifier	user
>53186	Identifier	dsq
>53187	Callee	voxslider -> setValue
>53188	PtrMemberAccess	voxslider -> setValue
>53189	Identifier	setValue
>53190	Identifier	voxslider
>53191	ExpressionStatement	 
>53192	AssignmentExpr	optionsMenu = true
>53193	Identifier	true
>53194	Identifier	optionsMenu
>53195	ExpressionStatement	 
>53196	CallExpression	toggleFoodMenu ( false )
>53197	ArgumentList	false
>53198	Argument	false
>53199	Identifier	false
>53200	Callee	toggleFoodMenu
>53201	Identifier	toggleFoodMenu
>53202	IfStatement	if ( ! isKeyConfig && ! optionsOnly )
>53203	CompoundStatement	 
>53204	ExpressionStatement	 
>53205	AssignmentExpr	dsq -> continuity . lastOptionsMenuPage = currentMenuPage
>53206	Identifier	currentMenuPage
>53207	MemberAccess	dsq -> continuity . lastOptionsMenuPage
>53208	Identifier	lastOptionsMenuPage
>53209	PtrMemberAccess	dsq -> continuity
>53210	Identifier	continuity
>53211	Identifier	dsq
>53212	Condition	 
>53213	AndExpression	! isKeyConfig && ! optionsOnly
>53214	UnaryOp	! optionsOnly
>53215	Identifier	optionsOnly
>53216	UnaryOperator	!
>53217	UnaryOp	! isKeyConfig
>53218	Identifier	isKeyConfig
>53219	UnaryOperator	!
>53220	Condition	 
>53221	AndExpression	f && ! optionsMenu
>53222	UnaryOp	! optionsMenu
>53223	Identifier	optionsMenu
>53224	UnaryOperator	!
>53225	Identifier	f
>53226	ExpressionStatement	 
>53227	AssignmentExpr	playingSongInMenu = - 1
>53228	UnaryOp	- 1
>53229	PrimaryExpression	1
>53230	UnaryOperator	-
>53231	Identifier	playingSongInMenu
>53232	IdentifierDeclStatement	 
>53233	IdentifierDecl	t = 0
>53234	AssignmentExpr	t = 0
>53235	PrimaryExpression	0
>53236	Identifier	t
>53237	Identifier	t
>53238	IdentifierDeclType	const float
>53327	FunctionDef	Game 
>53328	ParameterList	float dt
>53329	Parameter	 
>53330	Identifier	dt
>53331	ParameterType	float
>53332	ReturnType	void
>53333	CompoundStatement	 
>53334	IfStatement	if ( optionsMenu )
>53335	CompoundStatement	 
>53336	ExpressionStatement	 
>53337	CallExpression	dsq -> user . apply ( )
>53338	ArgumentList	 
>53339	Callee	dsq -> user . apply
>53340	MemberAccess	dsq -> user . apply
>53341	Identifier	apply
>53342	PtrMemberAccess	dsq -> user
>53343	Identifier	user
>53344	Identifier	dsq
>53345	IfStatement	if ( sfxslider -> hadInput ( ) )
>53346	ElseStatement	else
>53347	IfStatement	if ( voxslider -> hadInput ( ) )
>53348	ElseStatement	else
>53349	IfStatement	if ( optsfxdly > 0.6f )
>53350	CompoundStatement	 
>53351	IfStatement	if ( voxslider -> isGrabbed ( ) )
>53352	CompoundStatement	 
>53353	IfStatement	if ( ! dsq -> sound -> isPlayingVoice ( ) )
>53354	CompoundStatement	 
>53355	ExpressionStatement	 
>53356	CallExpression	dsq -> voice ( \"naija_somethingfamiliar\" )
>53357	ArgumentList	\"naija_somethingfamiliar\"
>53358	Argument	\"naija_somethingfamiliar\"
>53359	PrimaryExpression	\"naija_somethingfamiliar\"
>53360	Callee	dsq -> voice
>53361	PtrMemberAccess	dsq -> voice
>53362	Identifier	voice
>53363	Identifier	dsq
>53364	Condition	 
>53365	UnaryOp	! dsq -> sound -> isPlayingVoice ( )
>53366	CallExpression	dsq -> sound -> isPlayingVoice ( )
>53367	ArgumentList	 
>53368	Callee	dsq -> sound -> isPlayingVoice
>53369	PtrMemberAccess	dsq -> sound -> isPlayingVoice
>53370	Identifier	isPlayingVoice
>53371	PtrMemberAccess	dsq -> sound
>53372	Identifier	sound
>53373	Identifier	dsq
>53374	UnaryOperator	!
>53375	Condition	 
>53376	CallExpression	voxslider -> isGrabbed ( )
>53377	ArgumentList	 
>53378	Callee	voxslider -> isGrabbed
>53379	PtrMemberAccess	voxslider -> isGrabbed
>53380	Identifier	isGrabbed
>53381	Identifier	voxslider
>53382	IfStatement	if ( sfxslider -> isGrabbed ( ) )
>53383	CompoundStatement	 
>53384	IfStatement	if ( dsq -> game -> avatar )
>53385	ExpressionStatement	 
>53386	CallExpression	dsq -> game -> avatar -> updateHeartbeatSfx ( )
>53387	ArgumentList	 
>53388	Callee	dsq -> game -> avatar -> updateHeartbeatSfx
>53389	PtrMemberAccess	dsq -> game -> avatar -> updateHeartbeatSfx
>53390	Identifier	updateHeartbeatSfx
>53391	PtrMemberAccess	dsq -> game -> avatar
>53392	Identifier	avatar
>53393	PtrMemberAccess	dsq -> game
>53394	Identifier	game
>53395	Identifier	dsq
>53396	Condition	 
>53397	PtrMemberAccess	dsq -> game -> avatar
>53398	Identifier	avatar
>53399	PtrMemberAccess	dsq -> game
>53400	Identifier	game
>53401	Identifier	dsq
>53402	ExpressionStatement	 
>53403	CallExpression	dsq -> loops . updateVolume ( )
>53404	ArgumentList	 
>53405	Callee	dsq -> loops . updateVolume
>53406	MemberAccess	dsq -> loops . updateVolume
>53407	Identifier	updateVolume
>53408	PtrMemberAccess	dsq -> loops
>53409	Identifier	loops
>53410	Identifier	dsq
>53411	ExpressionStatement	 
>53412	CallExpression	dsq -> sound -> playSfx ( \"denied\" )
>53413	ArgumentList	\"denied\"
>53414	Argument	\"denied\"
>53415	PrimaryExpression	\"denied\"
>53416	Callee	dsq -> sound -> playSfx
>53417	PtrMemberAccess	dsq -> sound -> playSfx
>53418	Identifier	playSfx
>53419	PtrMemberAccess	dsq -> sound
>53420	Identifier	sound
>53421	Identifier	dsq
>53422	Condition	 
>53423	CallExpression	sfxslider -> isGrabbed ( )
>53424	ArgumentList	 
>53425	Callee	sfxslider -> isGrabbed
>53426	PtrMemberAccess	sfxslider -> isGrabbed
>53427	Identifier	isGrabbed
>53428	Identifier	sfxslider
>53429	ExpressionStatement	 
>53430	AssignmentExpr	optsfxdly = 0
>53431	PrimaryExpression	0
>53432	Identifier	optsfxdly
>53433	Condition	 
>53434	RelationalExpression	optsfxdly > 0.6f
>53435	PrimaryExpression	0.6f
>53436	Identifier	optsfxdly
>53437	CompoundStatement	 
>53438	IfStatement	if ( ! dsq -> sound -> isPlayingVoice ( ) )
>53439	ExpressionStatement	 
>53440	CallExpression	dsq -> voice ( \"naija_somethingfamiliar\" )
>53441	ArgumentList	\"naija_somethingfamiliar\"
>53442	Argument	\"naija_somethingfamiliar\"
>53443	PrimaryExpression	\"naija_somethingfamiliar\"
>53444	Callee	dsq -> voice
>53445	PtrMemberAccess	dsq -> voice
>53446	Identifier	voice
>53447	Identifier	dsq
>53448	Condition	 
>53449	UnaryOp	! dsq -> sound -> isPlayingVoice ( )
>53450	CallExpression	dsq -> sound -> isPlayingVoice ( )
>53451	ArgumentList	 
>53452	Callee	dsq -> sound -> isPlayingVoice
>53453	PtrMemberAccess	dsq -> sound -> isPlayingVoice
>53454	Identifier	isPlayingVoice
>53455	PtrMemberAccess	dsq -> sound
>53456	Identifier	sound
>53457	Identifier	dsq
>53458	UnaryOperator	!
>53459	Condition	 
>53460	CallExpression	voxslider -> hadInput ( )
>53461	ArgumentList	 
>53462	Callee	voxslider -> hadInput
>53463	PtrMemberAccess	voxslider -> hadInput
>53464	Identifier	hadInput
>53465	Identifier	voxslider
>53466	CompoundStatement	 
>53467	ExpressionStatement	 
>53468	CallExpression	dsq -> sound -> playSfx ( \"denied\" )
>53469	ArgumentList	\"denied\"
>53470	Argument	\"denied\"
>53471	PrimaryExpression	\"denied\"
>53472	Callee	dsq -> sound -> playSfx
>53473	PtrMemberAccess	dsq -> sound -> playSfx
>53474	Identifier	playSfx
>53475	PtrMemberAccess	dsq -> sound
>53476	Identifier	sound
>53477	Identifier	dsq
>53478	Condition	 
>53479	CallExpression	sfxslider -> hadInput ( )
>53480	ArgumentList	 
>53481	Callee	sfxslider -> hadInput
>53482	PtrMemberAccess	sfxslider -> hadInput
>53483	Identifier	hadInput
>53484	Identifier	sfxslider
>53485	ExpressionStatement	 
>53486	AssignmentExpr	optsfxdly += dt
>53487	Identifier	dt
>53488	Identifier	optsfxdly
>53489	IfStatement	if ( resBox )
>53490	CompoundStatement	 
>53491	IfStatement	if ( ! s . empty ( ) )
>53492	CompoundStatement	 
>53493	ExpressionStatement	 
>53494	ShiftExpression	is2 >> dsq -> user . video . resy
>53495	MemberAccess	dsq -> user . video . resy
>53496	Identifier	resy
>53497	MemberAccess	dsq -> user . video
>53498	Identifier	video
>53499	PtrMemberAccess	dsq -> user
>53500	Identifier	user
>53501	Identifier	dsq
>53502	Identifier	is2
>53503	IdentifierDeclStatement	 
>53504	IdentifierDecl	is2 ( s . substr ( pos + 1 , s . size ( ) - ( pos + 1 ) ) )
>53505	CallExpression	s . substr ( pos + 1 , s . size ( ) - ( pos + 1 ) )
>53506	ArgumentList	pos + 1
>53507	Argument	s . size ( ) - ( pos + 1 )
>53508	AdditiveExpression	s . size ( ) - ( pos + 1 )
>53509	AdditiveExpression	pos + 1
>53510	PrimaryExpression	1
>53511	Identifier	pos
>53512	CallExpression	s . size ( )
>53513	ArgumentList	 
>53514	Callee	s . size
>53515	MemberAccess	s . size
>53516	Identifier	size
>53517	Identifier	s
>53518	Argument	pos + 1
>53519	AdditiveExpression	pos + 1
>53520	PrimaryExpression	1
>53521	Identifier	pos
>53522	Callee	s . substr
>53523	MemberAccess	s . substr
>53524	Identifier	substr
>53525	Identifier	s
>53526	Identifier	is2
>53527	IdentifierDeclType	std 
>53528	ExpressionStatement	 
>53529	ShiftExpression	is1 >> dsq -> user . video . resx
>53530	MemberAccess	dsq -> user . video . resx
>53531	Identifier	resx
>53532	MemberAccess	dsq -> user . video
>53533	Identifier	video
>53534	PtrMemberAccess	dsq -> user
>53535	Identifier	user
>53536	Identifier	dsq
>53537	Identifier	is1
>53538	IdentifierDeclStatement	 
>53539	IdentifierDecl	is1 ( s . substr ( 0 , pos ) )
>53540	CallExpression	s . substr ( 0 , pos )
>53541	ArgumentList	0
>53542	Argument	pos
>53543	Identifier	pos
>53544	Argument	0
>53545	PrimaryExpression	0
>53546	Callee	s . substr
>53547	MemberAccess	s . substr
>53548	Identifier	substr
>53549	Identifier	s
>53550	Identifier	is1
>53551	IdentifierDeclType	std 
>53552	IdentifierDeclStatement	 
>53553	IdentifierDecl	pos = s . find ( 'x' )
>53554	AssignmentExpr	pos = s . find ( 'x' )
>53555	CallExpression	s . find ( 'x' )
>53556	ArgumentList	'x'
>53557	Argument	'x'
>53558	PrimaryExpression	'x'
>53559	Callee	s . find
>53560	MemberAccess	s . find
>53561	Identifier	find
>53562	Identifier	s
>53563	Identifier	pos
>53564	Identifier	pos
>53565	IdentifierDeclType	int
>53566	Condition	 
>53567	UnaryOp	! s . empty ( )
>53568	CallExpression	s . empty ( )
>53569	ArgumentList	 
>53570	Callee	s . empty
>53571	MemberAccess	s . empty
>53572	Identifier	empty
>53573	Identifier	s
>53574	UnaryOperator	!
>53575	IdentifierDeclStatement	 
>53576	IdentifierDecl	s = resBox -> getSelectedItemString ( )
>53577	AssignmentExpr	s = resBox -> getSelectedItemString ( )
>53578	CallExpression	resBox -> getSelectedItemString ( )
>53579	ArgumentList	 
>53580	Callee	resBox -> getSelectedItemString
>53581	PtrMemberAccess	resBox -> getSelectedItemString
>53582	Identifier	getSelectedItemString
>53583	Identifier	resBox
>53584	Identifier	s
>53585	Identifier	s
>53586	IdentifierDeclType	std 
>53587	Condition	 
>53588	Identifier	resBox
>53589	IfStatement	if ( blurEffectsCheck )
>53590	ExpressionStatement	 
>53591	AssignmentExpr	dsq -> user . video . blur = blurEffectsCheck -> getValue ( )
>53592	CallExpression	blurEffectsCheck -> getValue ( )
>53593	ArgumentList	 
>53594	Callee	blurEffectsCheck -> getValue
>53595	PtrMemberAccess	blurEffectsCheck -> getValue
>53596	Identifier	getValue
>53597	Identifier	blurEffectsCheck
>53598	MemberAccess	dsq -> user . video . blur
>53599	Identifier	blur
>53600	MemberAccess	dsq -> user . video
>53601	Identifier	video
>53602	PtrMemberAccess	dsq -> user
>53603	Identifier	user
>53604	Identifier	dsq
>53605	Condition	 
>53606	Identifier	blurEffectsCheck
>53607	IfStatement	if ( ripplesCheck )
>53608	ExpressionStatement	 
>53609	AssignmentExpr	dsq -> user . video . fbuffer = ripplesCheck -> getValue ( )
>53610	CallExpression	ripplesCheck -> getValue ( )
>53611	ArgumentList	 
>53612	Callee	ripplesCheck -> getValue
>53613	PtrMemberAccess	ripplesCheck -> getValue
>53614	Identifier	getValue
>53615	Identifier	ripplesCheck
>53616	MemberAccess	dsq -> user . video . fbuffer
>53617	Identifier	fbuffer
>53618	MemberAccess	dsq -> user . video
>53619	Identifier	video
>53620	PtrMemberAccess	dsq -> user
>53621	Identifier	user
>53622	Identifier	dsq
>53623	Condition	 
>53624	Identifier	ripplesCheck
>53625	ExpressionStatement	 
>53626	AssignmentExpr	dsq -> user . video . full = fullscreenCheck -> getValue ( )
>53627	CallExpression	fullscreenCheck -> getValue ( )
>53628	ArgumentList	 
>53629	Callee	fullscreenCheck -> getValue
>53630	PtrMemberAccess	fullscreenCheck -> getValue
>53631	Identifier	getValue
>53632	Identifier	fullscreenCheck
>53633	MemberAccess	dsq -> user . video . full
>53634	Identifier	full
>53635	MemberAccess	dsq -> user . video
>53636	Identifier	video
>53637	PtrMemberAccess	dsq -> user
>53638	Identifier	user
>53639	Identifier	dsq
>53640	ExpressionStatement	 
>53641	AssignmentExpr	dsq -> user . audio . subtitles = subtitlesCheck -> getValue ( )
>53642	CallExpression	subtitlesCheck -> getValue ( )
>53643	ArgumentList	 
>53644	Callee	subtitlesCheck -> getValue
>53645	PtrMemberAccess	subtitlesCheck -> getValue
>53646	Identifier	getValue
>53647	Identifier	subtitlesCheck
>53648	MemberAccess	dsq -> user . audio . subtitles
>53649	Identifier	subtitles
>53650	MemberAccess	dsq -> user . audio
>53651	Identifier	audio
>53652	PtrMemberAccess	dsq -> user
>53653	Identifier	user
>53654	Identifier	dsq
>53655	ExpressionStatement	 
>53656	AssignmentExpr	dsq -> user . control . targeting = targetingCheck -> getValue ( )
>53657	CallExpression	targetingCheck -> getValue ( )
>53658	ArgumentList	 
>53659	Callee	targetingCheck -> getValue
>53660	PtrMemberAccess	targetingCheck -> getValue
>53661	Identifier	getValue
>53662	Identifier	targetingCheck
>53663	MemberAccess	dsq -> user . control . targeting
>53664	Identifier	targeting
>53665	MemberAccess	dsq -> user . control
>53666	Identifier	control
>53667	PtrMemberAccess	dsq -> user
>53668	Identifier	user
>53669	Identifier	dsq
>53670	ExpressionStatement	 
>53671	AssignmentExpr	dsq -> user . control . autoAim = autoAimCheck -> getValue ( )
>53672	CallExpression	autoAimCheck -> getValue ( )
>53673	ArgumentList	 
>53674	Callee	autoAimCheck -> getValue
>53675	PtrMemberAccess	autoAimCheck -> getValue
>53676	Identifier	getValue
>53677	Identifier	autoAimCheck
>53678	MemberAccess	dsq -> user . control . autoAim
>53679	Identifier	autoAim
>53680	MemberAccess	dsq -> user . control
>53681	Identifier	control
>53682	PtrMemberAccess	dsq -> user
>53683	Identifier	user
>53684	Identifier	dsq
>53685	ExpressionStatement	 
>53686	AssignmentExpr	dsq -> user . control . toolTipsOn = toolTipsCheck -> getValue ( )
>53687	CallExpression	toolTipsCheck -> getValue ( )
>53688	ArgumentList	 
>53689	Callee	toolTipsCheck -> getValue
>53690	PtrMemberAccess	toolTipsCheck -> getValue
>53691	Identifier	getValue
>53692	Identifier	toolTipsCheck
>53693	MemberAccess	dsq -> user . control . toolTipsOn
>53694	Identifier	toolTipsOn
>53695	MemberAccess	dsq -> user . control
>53696	Identifier	control
>53697	PtrMemberAccess	dsq -> user
>53698	Identifier	user
>53699	Identifier	dsq
>53700	ExpressionStatement	 
>53701	AssignmentExpr	dsq -> user . control . flipInputButtons = flipInputButtonsCheck -> getValue ( )
>53702	CallExpression	flipInputButtonsCheck -> getValue ( )
>53703	ArgumentList	 
>53704	Callee	flipInputButtonsCheck -> getValue
>53705	PtrMemberAccess	flipInputButtonsCheck -> getValue
>53706	Identifier	getValue
>53707	Identifier	flipInputButtonsCheck
>53708	MemberAccess	dsq -> user . control . flipInputButtons
>53709	Identifier	flipInputButtons
>53710	MemberAccess	dsq -> user . control
>53711	Identifier	control
>53712	PtrMemberAccess	dsq -> user
>53713	Identifier	user
>53714	Identifier	dsq
>53715	IfStatement	if ( micInputCheck )
>53716	ExpressionStatement	 
>53717	AssignmentExpr	dsq -> user . audio . micOn = micInputCheck -> getValue ( )
>53718	CallExpression	micInputCheck -> getValue ( )
>53719	ArgumentList	 
>53720	Callee	micInputCheck -> getValue
>53721	PtrMemberAccess	micInputCheck -> getValue
>53722	Identifier	getValue
>53723	Identifier	micInputCheck
>53724	MemberAccess	dsq -> user . audio . micOn
>53725	Identifier	micOn
>53726	MemberAccess	dsq -> user . audio
>53727	Identifier	audio
>53728	PtrMemberAccess	dsq -> user
>53729	Identifier	user
>53730	Identifier	dsq
>53731	Condition	 
>53732	Identifier	micInputCheck
>53733	ExpressionStatement	 
>53734	AssignmentExpr	dsq -> user . audio . musvol = musslider -> getValue ( )
>53735	CallExpression	musslider -> getValue ( )
>53736	ArgumentList	 
>53737	Callee	musslider -> getValue
>53738	PtrMemberAccess	musslider -> getValue
>53739	Identifier	getValue
>53740	Identifier	musslider
>53741	MemberAccess	dsq -> user . audio . musvol
>53742	Identifier	musvol
>53743	MemberAccess	dsq -> user . audio
>53744	Identifier	audio
>53745	PtrMemberAccess	dsq -> user
>53746	Identifier	user
>53747	Identifier	dsq
>53748	ExpressionStatement	 
>53749	AssignmentExpr	dsq -> user . audio . sfxvol = sfxslider -> getValue ( )
>53750	CallExpression	sfxslider -> getValue ( )
>53751	ArgumentList	 
>53752	Callee	sfxslider -> getValue
>53753	PtrMemberAccess	sfxslider -> getValue
>53754	Identifier	getValue
>53755	Identifier	sfxslider
>53756	MemberAccess	dsq -> user . audio . sfxvol
>53757	Identifier	sfxvol
>53758	MemberAccess	dsq -> user . audio
>53759	Identifier	audio
>53760	PtrMemberAccess	dsq -> user
>53761	Identifier	user
>53762	Identifier	dsq
>53763	ExpressionStatement	 
>53764	AssignmentExpr	dsq -> user . audio . voxvol = voxslider -> getValue ( )
>53765	CallExpression	voxslider -> getValue ( )
>53766	ArgumentList	 
>53767	Callee	voxslider -> getValue
>53768	PtrMemberAccess	voxslider -> getValue
>53769	Identifier	getValue
>53770	Identifier	voxslider
>53771	MemberAccess	dsq -> user . audio . voxvol
>53772	Identifier	voxvol
>53773	MemberAccess	dsq -> user . audio
>53774	Identifier	audio
>53775	PtrMemberAccess	dsq -> user
>53776	Identifier	user
>53777	Identifier	dsq
>53778	Condition	 
>53779	Identifier	optionsMenu
>53862	FunctionDef	Game 
>53863	ParameterList	float dt
>53864	Parameter	 
>53865	Identifier	dt
>53866	ParameterType	float
>53867	ReturnType	void
>53868	CompoundStatement	 
>53869	IfStatement	if ( isInGameMenu ( ) )
>53870	CompoundStatement	 
>53871	IfStatement	if ( playingSongInMenu != - 1 )
>53872	CompoundStatement	 
>53873	IfStatement	if ( currentSongMenuNote < s . notes . size ( ) )
>53874	ElseStatement	else
>53875	CompoundStatement	 
>53876	IfStatement	if ( songMenuPlayDelay >= 1.0f )
>53877	CompoundStatement	 
>53878	ExpressionStatement	 
>53879	AssignmentExpr	playingSongInMenu = - 1
>53880	UnaryOp	- 1
>53881	PrimaryExpression	1
>53882	UnaryOperator	-
>53883	Identifier	playingSongInMenu
>53884	Condition	 
>53885	RelationalExpression	songMenuPlayDelay >= 1.0f
>53886	PrimaryExpression	1.0f
>53887	Identifier	songMenuPlayDelay
>53888	CompoundStatement	 
>53889	IfStatement	if ( songMenuPlayDelay >= 0.5f )
>53890	CompoundStatement	 
>53891	IfStatement	if ( currentSongMenuNote >= 0 && currentSongMenuNote < s . notes . size ( ) )
>53892	ElseStatement	else
>53893	CompoundStatement	 
>53894	CompoundStatement	 
>53895	ExpressionStatement	 
>53896	IncDecOp	currentSongMenuNote ++
>53897	IncDec	++
>53898	Identifier	currentSongMenuNote
>53899	ExpressionStatement	 
>53900	CallExpression	game -> addRenderObject ( q , LR_HUD )
>53901	ArgumentList	q
>53902	Argument	LR_HUD
>53903	Identifier	LR_HUD
>53904	Argument	q
>53905	Identifier	q
>53906	Callee	game -> addRenderObject
>53907	PtrMemberAccess	game -> addRenderObject
>53908	Identifier	addRenderObject
>53909	Identifier	game
>53910	ExpressionStatement	 
>53911	CallExpression	q -> setDecayRate ( 1 )
>53912	ArgumentList	1
>53913	Argument	1
>53914	PrimaryExpression	1
>53915	Callee	q -> setDecayRate
>53916	PtrMemberAccess	q -> setDecayRate
>53917	Identifier	setDecayRate
>53918	Identifier	q
>53919	ExpressionStatement	 
>53920	CallExpression	q -> setLife ( t )
>53921	ArgumentList	t
>53922	Argument	t
>53923	Identifier	t
>53924	Callee	q -> setLife
>53925	PtrMemberAccess	q -> setLife
>53926	Identifier	setLife
>53927	Identifier	q
>53928	ExpressionStatement	 
>53929	AssignmentExpr	q -> followCamera = 1
>53930	PrimaryExpression	1
>53931	PtrMemberAccess	q -> followCamera
>53932	Identifier	followCamera
>53933	Identifier	q
>53934	ExpressionStatement	 
>53935	CallExpression	q -> alpha . startPath ( t )
>53936	ArgumentList	t
>53937	Argument	t
>53938	Identifier	t
>53939	Callee	q -> alpha . startPath
>53940	MemberAccess	q -> alpha . startPath
>53941	Identifier	startPath
>53942	PtrMemberAccess	q -> alpha
>53943	Identifier	alpha
>53944	Identifier	q
>53945	ExpressionStatement	 
>53946	CallExpression	q -> alpha . data -> path . addPathNode ( 0 , 1 )
>53947	ArgumentList	0
>53948	Argument	1
>53949	PrimaryExpression	1
>53950	Argument	0
>53951	PrimaryExpression	0
>53952	Callee	q -> alpha . data -> path . addPathNode
>53953	MemberAccess	q -> alpha . data -> path . addPathNode
>53954	Identifier	addPathNode
>53955	PtrMemberAccess	q -> alpha . data -> path
>53956	Identifier	path
>53957	MemberAccess	q -> alpha . data
>53958	Identifier	data
>53959	PtrMemberAccess	q -> alpha
>53960	Identifier	alpha
>53961	Identifier	q
>53962	ExpressionStatement	 
>53963	CallExpression	q -> alpha . data -> path . addPathNode ( 0.75 , 0.5 )
>53964	ArgumentList	0.75
>53965	Argument	0.5
>53966	PrimaryExpression	0.5
>53967	Argument	0.75
>53968	PrimaryExpression	0.75
>53969	Callee	q -> alpha . data -> path . addPathNode
>53970	MemberAccess	q -> alpha . data -> path . addPathNode
>53971	Identifier	addPathNode
>53972	PtrMemberAccess	q -> alpha . data -> path
>53973	Identifier	path
>53974	MemberAccess	q -> alpha . data
>53975	Identifier	data
>53976	PtrMemberAccess	q -> alpha
>53977	Identifier	alpha
>53978	Identifier	q
>53979	ExpressionStatement	 
>53980	CallExpression	q -> alpha . data -> path . addPathNode ( 0.75 , 0.5 )
>53981	ArgumentList	0.75
>53982	Argument	0.5
>53983	PrimaryExpression	0.5
>53984	Argument	0.75
>53985	PrimaryExpression	0.75
>53986	Callee	q -> alpha . data -> path . addPathNode
>53987	MemberAccess	q -> alpha . data -> path . addPathNode
>53988	Identifier	addPathNode
>53989	PtrMemberAccess	q -> alpha . data -> path
>53990	Identifier	path
>53991	MemberAccess	q -> alpha . data
>53992	Identifier	data
>53993	PtrMemberAccess	q -> alpha
>53994	Identifier	alpha
>53995	Identifier	q
>53996	ExpressionStatement	 
>53997	CallExpression	q -> alpha . data -> path . addPathNode ( 0 , 0 )
>53998	ArgumentList	0
>53999	Argument	0
>54000	PrimaryExpression	0
>54001	Argument	0
>54002	PrimaryExpression	0
>54003	Callee	q -> alpha . data -> path . addPathNode
>54004	MemberAccess	q -> alpha . data -> path . addPathNode
>54005	Identifier	addPathNode
>54006	PtrMemberAccess	q -> alpha . data -> path
>54007	Identifier	path
>54008	MemberAccess	q -> alpha . data
>54009	Identifier	data
>54010	PtrMemberAccess	q -> alpha
>54011	Identifier	alpha
>54012	Identifier	q
>54013	ExpressionStatement	 
>54014	CallExpression	q -> alpha . ensureData ( )
>54015	ArgumentList	 
>54016	Callee	q -> alpha . ensureData
>54017	MemberAccess	q -> alpha . ensureData
>54018	Identifier	ensureData
>54019	PtrMemberAccess	q -> alpha
>54020	Identifier	alpha
>54021	Identifier	q
>54022	ExpressionStatement	 
>54023	AssignmentExpr	q -> scale = Vector ( 5 , 5 )
>54024	CallExpression	Vector ( 5 , 5 )
>54025	ArgumentList	5
>54026	Argument	5
>54027	PrimaryExpression	5
>54028	Argument	5
>54029	PrimaryExpression	5
>54030	Callee	Vector
>54031	Identifier	Vector
>54032	PtrMemberAccess	q -> scale
>54033	Identifier	scale
>54034	Identifier	q
>54035	ExpressionStatement	 
>54036	CallExpression	q -> setBlendType ( RenderObject 
>54037	ArgumentList	RenderObject 
>54038	Argument	RenderObject 
>54039	Identifier	RenderObject 
>54040	Callee	q -> setBlendType
>54041	PtrMemberAccess	q -> setBlendType
>54042	Identifier	setBlendType
>54043	Identifier	q
>54044	IdentifierDeclStatement	 
>54045	IdentifierDecl	* q = new Quad ( \"particles/glow\" , Vector ( 400 + 237 * menuBg -> scale . x , 300 - 52 * menuBg -> scale . x ) + \
>54046	AssignmentExpr	* q = new Quad ( \"particles/glow\" , Vector ( 400 + 237 * menuBg -> scale . x , 300 - 52 * menuBg -> scale \
>54047	Expression	\"particles/glow\" , Vector ( 400 + 237 * menuBg -> scale . x , 300 - 52 * menuBg -> scale . x ) + notePos
>54048	AdditiveExpression	Vector ( 400 + 237 * menuBg -> scale . x , 300 - 52 * menuBg -> scale . x ) + notePos
>54049	Identifier	notePos
>54050	CallExpression	Vector ( 400 + 237 * menuBg -> scale . x , 300 - 52 * menuBg -> scale . x )
>54051	ArgumentList	400 + 237 * menuBg -> scale . x
>54052	Argument	300 - 52 * menuBg -> scale . x
>54053	AdditiveExpression	300 - 52 * menuBg -> scale . x
>54054	MultiplicativeExpression	52 * menuBg -> scale . x
>54055	MemberAccess	menuBg -> scale . x
>54056	Identifier	x
>54057	PtrMemberAccess	menuBg -> scale
>54058	Identifier	scale
>54059	Identifier	menuBg
>54060	PrimaryExpression	52
>54061	PrimaryExpression	300
>54062	Argument	400 + 237 * menuBg -> scale . x
>54063	AdditiveExpression	400 + 237 * menuBg -> scale . x
>54064	MultiplicativeExpression	237 * menuBg -> scale . x
>54065	MemberAccess	menuBg -> scale . x
>54066	Identifier	x
>54067	PtrMemberAccess	menuBg -> scale
>54068	Identifier	scale
>54069	Identifier	menuBg
>54070	PrimaryExpression	237
>54071	PrimaryExpression	400
>54072	Callee	Vector
>54073	Identifier	Vector
>54074	PrimaryExpression	\"particles/glow\"
>54075	Identifier	q
>54076	Identifier	q
>54077	IdentifierDeclType	Quad *
>54078	IdentifierDeclStatement	 
>54079	IdentifierDecl	t = 0.5
>54080	AssignmentExpr	t = 0.5
>54081	PrimaryExpression	0.5
>54082	Identifier	t
>54083	Identifier	t
>54084	IdentifierDeclType	float
>54085	IdentifierDeclStatement	 
>54086	IdentifierDecl	notePos ( sinf ( a ) * sz , cosf ( a ) * sz )
>54087	Expression	sinf ( a ) * sz , cosf ( a ) * sz
>54088	MultiplicativeExpression	cosf ( a ) * sz
>54089	Identifier	sz
>54090	CallExpression	cosf ( a )
>54091	ArgumentList	a
>54092	Argument	a
>54093	Identifier	a
>54094	Callee	cosf
>54095	Identifier	cosf
>54096	MultiplicativeExpression	sinf ( a ) * sz
>54097	Identifier	sz
>54098	CallExpression	sinf ( a )
>54099	ArgumentList	a
>54100	Argument	a
>54101	Identifier	a
>54102	Callee	sinf
>54103	Identifier	sinf
>54104	Identifier	notePos
>54105	IdentifierDeclType	Vector
>54106	IdentifierDeclStatement	 
>54107	IdentifierDecl	sz = 110 * menuBg -> scale . x
>54108	AssignmentExpr	sz = 110 * menuBg -> scale . x
>54109	MultiplicativeExpression	110 * menuBg -> scale . x
>54110	MemberAccess	menuBg -> scale . x
>54111	Identifier	x
>54112	PtrMemberAccess	menuBg -> scale
>54113	Identifier	scale
>54114	Identifier	menuBg
>54115	PrimaryExpression	110
>54116	Identifier	sz
>54117	Identifier	sz
>54118	IdentifierDeclType	int
>54119	IdentifierDeclStatement	 
>54120	IdentifierDecl	a = ( s . notes [ currentSongMenuNote ] * 2 * PI ) / 8.0f
>54121	AssignmentExpr	a = ( s . notes [ currentSongMenuNote ] * 2 * PI ) / 8.0f
>54122	MultiplicativeExpression	( s . notes [ currentSongMenuNote ] * 2 * PI ) / 8.0f
>54123	PrimaryExpression	8.0f
>54124	MultiplicativeExpression	s . notes [ currentSongMenuNote ] * 2 * PI
>54125	MultiplicativeExpression	2 * PI
>54126	Identifier	PI
>54127	PrimaryExpression	2
>54128	ArrayIndexing	s . notes [ currentSongMenuNote ]
>54129	Identifier	currentSongMenuNote
>54130	MemberAccess	s . notes
>54131	Identifier	notes
>54132	Identifier	s
>54133	Identifier	a
>54134	Identifier	a
>54135	IdentifierDeclType	float
>54136	ExpressionStatement	 
>54137	CallExpression	sound -> playSfx ( dsq -> game -> getNoteName ( s . notes [ currentSongMenuNote ] , \"Menu\" ) )
>54138	ArgumentList	dsq -> game -> getNoteName ( s . notes [ currentSongMenuNote ] , \"Menu\" )
>54139	Argument	dsq -> game -> getNoteName ( s . notes [ currentSongMenuNote ] , \"Menu\" )
>54140	CallExpression	dsq -> game -> getNoteName ( s . notes [ currentSongMenuNote ] , \"Menu\" )
>54141	ArgumentList	s . notes [ currentSongMenuNote ]
>54142	Argument	\"Menu\"
>54143	PrimaryExpression	\"Menu\"
>54144	Argument	s . notes [ currentSongMenuNote ]
>54145	ArrayIndexing	s . notes [ currentSongMenuNote ]
>54146	Identifier	currentSongMenuNote
>54147	MemberAccess	s . notes
>54148	Identifier	notes
>54149	Identifier	s
>54150	Callee	dsq -> game -> getNoteName
>54151	PtrMemberAccess	dsq -> game -> getNoteName
>54152	Identifier	getNoteName
>54153	PtrMemberAccess	dsq -> game
>54154	Identifier	game
>54155	Identifier	dsq
>54156	Callee	sound -> playSfx
>54157	PtrMemberAccess	sound -> playSfx
>54158	Identifier	playSfx
>54159	Identifier	sound
>54160	Condition	 
>54161	AndExpression	currentSongMenuNote >= 0 && currentSongMenuNote < s . notes . size ( )
>54162	RelationalExpression	currentSongMenuNote < s . notes . size ( )
>54163	CallExpression	s . notes . size ( )
>54164	ArgumentList	 
>54165	Callee	s . notes . size
>54166	MemberAccess	s . notes . size
>54167	Identifier	size
>54168	MemberAccess	s . notes
>54169	Identifier	notes
>54170	Identifier	s
>54171	Identifier	currentSongMenuNote
>54172	RelationalExpression	currentSongMenuNote >= 0
>54173	PrimaryExpression	0
>54174	Identifier	currentSongMenuNote
>54175	ExpressionStatement	 
>54176	AssignmentExpr	songMenuPlayDelay = 0
>54177	PrimaryExpression	0
>54178	Identifier	songMenuPlayDelay
>54179	Condition	 
>54180	RelationalExpression	songMenuPlayDelay >= 0.5f
>54181	PrimaryExpression	0.5f
>54182	Identifier	songMenuPlayDelay
>54183	Condition	 
>54184	RelationalExpression	currentSongMenuNote < s . notes . size ( )
>54185	CallExpression	s . notes . size ( )
>54186	ArgumentList	 
>54187	Callee	s . notes . size
>54188	MemberAccess	s . notes . size
>54189	Identifier	size
>54190	MemberAccess	s . notes
>54191	Identifier	notes
>54192	Identifier	s
>54193	Identifier	currentSongMenuNote
>54194	IdentifierDeclStatement	 
>54195	IdentifierDecl	s = dsq -> continuity . songBank [ playingSongInMenu ]
>54196	AssignmentExpr	s = dsq -> continuity . songBank [ playingSongInMenu ]
>54197	ArrayIndexing	dsq -> continuity . songBank [ playingSongInMenu ]
>54198	Identifier	playingSongInMenu
>54199	MemberAccess	dsq -> continuity . songBank
>54200	Identifier	songBank
>54201	PtrMemberAccess	dsq -> continuity
>54202	Identifier	continuity
>54203	Identifier	dsq
>54204	Identifier	s
>54205	Identifier	s
>54206	IdentifierDeclType	Song
>54207	ExpressionStatement	 
>54208	AssignmentExpr	songMenuPlayDelay += dt
>54209	Identifier	dt
>54210	Identifier	songMenuPlayDelay
>54211	Condition	 
>54212	EqualityExpression	playingSongInMenu != - 1
>54213	UnaryOp	- 1
>54214	PrimaryExpression	1
>54215	UnaryOperator	-
>54216	Identifier	playingSongInMenu
>54217	ExpressionStatement	 
>54218	CallExpression	updateOptionsMenu ( dt )
>54219	ArgumentList	dt
>54220	Argument	dt
>54221	Identifier	dt
>54222	Callee	updateOptionsMenu
>54223	Identifier	updateOptionsMenu
>54224	IfStatement	if ( treasureMenu )
>54225	CompoundStatement	 
>54226	ExpressionStatement	 
>54227	CallExpression	circlePageNum -> setText ( os . str ( ) )
>54228	ArgumentList	os . str ( )
>54229	Argument	os . str ( )
>54230	CallExpression	os . str ( )
>54231	ArgumentList	 
>54232	Callee	os . str
>54233	MemberAccess	os . str
>54234	Identifier	str
>54235	Identifier	os
>54236	Callee	circlePageNum -> setText
>54237	PtrMemberAccess	circlePageNum -> setText
>54238	Identifier	setText
>54239	Identifier	circlePageNum
>54240	ExpressionStatement	 
>54241	ShiftExpression	os << ( currentTreasurePage + 1 ) << \"/\" << ( numTreasures / treasurePageSize )
>54242	ShiftExpression	( currentTreasurePage + 1 ) << \"/\" << ( numTreasures / treasurePageSize )
>54243	ShiftExpression	\"/\" << ( numTreasures / treasurePageSize )
>54244	MultiplicativeExpression	numTreasures / treasurePageSize
>54245	Identifier	treasurePageSize
>54246	Identifier	numTreasures
>54247	PrimaryExpression	\"/\"
>54248	AdditiveExpression	currentTreasurePage + 1
>54249	PrimaryExpression	1
>54250	Identifier	currentTreasurePage
>54251	Identifier	os
>54252	IdentifierDeclStatement	 
>54253	IdentifierDecl	os
>54254	Identifier	os
>54255	IdentifierDeclType	std 
>54256	Condition	 
>54257	Identifier	treasureMenu
>54258	IfStatement	if ( foodMenu )
>54259	CompoundStatement	 
>54260	IfStatement	if ( dsq -> continuity . hasIngredients ( ) )
>54261	ElseStatement	else
>54262	CompoundStatement	 
>54263	ExpressionStatement	 
>54264	CallExpression	circlePageNum -> setText ( \"1/1\" )
>54265	ArgumentList	\"1/1\"
>54266	Argument	\"1/1\"
>54267	PrimaryExpression	\"1/1\"
>54268	Callee	circlePageNum -> setText
>54269	PtrMemberAccess	circlePageNum -> setText
>54270	Identifier	setText
>54271	Identifier	circlePageNum
>54272	CompoundStatement	 
>54273	IfStatement	if ( pageNum > numPages && pageNum > 1 )
>54274	CompoundStatement	 
>54275	ExpressionStatement	 
>54276	CallExpression	onPrevFoodPage ( )
>54277	ArgumentList	 
>54278	Callee	onPrevFoodPage
>54279	Identifier	onPrevFoodPage
>54280	Condition	 
>54281	AndExpression	pageNum > numPages && pageNum > 1
>54282	RelationalExpression	pageNum > 1
>54283	PrimaryExpression	1
>54284	Identifier	pageNum
>54285	RelationalExpression	pageNum > numPages
>54286	Identifier	numPages
>54287	Identifier	pageNum
>54288	ExpressionStatement	 
>54289	CallExpression	circlePageNum -> setText ( os . str ( ) )
>54290	ArgumentList	os . str ( )
>54291	Argument	os . str ( )
>54292	CallExpression	os . str ( )
>54293	ArgumentList	 
>54294	Callee	os . str
>54295	MemberAccess	os . str
>54296	Identifier	str
>54297	Identifier	os
>54298	Callee	circlePageNum -> setText
>54299	PtrMemberAccess	circlePageNum -> setText
>54300	Identifier	setText
>54301	Identifier	circlePageNum
>54302	ExpressionStatement	 
>54303	ShiftExpression	os << pageNum << \"/\" << numPages
>54304	ShiftExpression	pageNum << \"/\" << numPages
>54305	ShiftExpression	\"/\" << numPages
>54306	Identifier	numPages
>54307	PrimaryExpression	\"/\"
>54308	Identifier	pageNum
>54309	Identifier	os
>54310	IdentifierDeclStatement	 
>54311	IdentifierDecl	os
>54312	Identifier	os
>54313	IdentifierDeclType	std 
>54314	IdentifierDeclStatement	 
>54315	IdentifierDecl	numPages = ( ( dsq -> continuity . ingredientCount ( ) - 1 ) / foodPageSize ) + 1
>54316	AssignmentExpr	numPages = ( ( dsq -> continuity . ingredientCount ( ) - 1 ) / foodPageSize ) + 1
>54317	AdditiveExpression	( ( dsq -> continuity . ingredientCount ( ) - 1 ) / foodPageSize ) + 1
>54318	PrimaryExpression	1
>54319	MultiplicativeExpression	( dsq -> continuity . ingredientCount ( ) - 1 ) / foodPageSize
>54320	Identifier	foodPageSize
>54321	AdditiveExpression	dsq -> continuity . ingredientCount ( ) - 1
>54322	PrimaryExpression	1
>54323	CallExpression	dsq -> continuity . ingredientCount ( )
>54324	ArgumentList	 
>54325	Callee	dsq -> continuity . ingredientCount
>54326	MemberAccess	dsq -> continuity . ingredientCount
>54327	Identifier	ingredientCount
>54328	PtrMemberAccess	dsq -> continuity
>54329	Identifier	continuity
>54330	Identifier	dsq
>54331	Identifier	numPages
>54332	Identifier	numPages
>54333	IdentifierDeclType	int
>54334	IdentifierDeclStatement	 
>54335	IdentifierDecl	pageNum = ( currentFoodPage + 1 )
>54336	AssignmentExpr	pageNum = ( currentFoodPage + 1 )
>54337	AdditiveExpression	currentFoodPage + 1
>54338	PrimaryExpression	1
>54339	Identifier	currentFoodPage
>54340	Identifier	pageNum
>54341	Identifier	pageNum
>54342	IdentifierDeclType	int
>54343	Condition	 
>54344	CallExpression	dsq -> continuity . hasIngredients ( )
>54345	ArgumentList	 
>54346	Callee	dsq -> continuity . hasIngredients
>54347	MemberAccess	dsq -> continuity . hasIngredients
>54348	Identifier	hasIngredients
>54349	PtrMemberAccess	dsq -> continuity
>54350	Identifier	continuity
>54351	Identifier	dsq
>54352	IfStatement	if ( dsq -> inputMode == INPUT_JOYSTICK )
>54353	CompoundStatement	 
>54354	Condition	 
>54355	EqualityExpression	dsq -> inputMode == INPUT_JOYSTICK
>54356	Identifier	INPUT_JOYSTICK
>54357	PtrMemberAccess	dsq -> inputMode
>54358	Identifier	inputMode
>54359	Identifier	dsq
>54360	Condition	 
>54361	Identifier	foodMenu
>54362	IfStatement	if ( dt > 10 )
>54363	ExpressionStatement	 
>54364	AssignmentExpr	dt = 10
>54365	PrimaryExpression	10
>54366	Identifier	dt
>54367	Condition	 
>54368	RelationalExpression	dt > 10
>54369	PrimaryExpression	10
>54370	Identifier	dt
>54371	ExpressionStatement	 
>54372	AssignmentExpr	menuOpenTimer += dt
>54373	Identifier	dt
>54374	Identifier	menuOpenTimer
>54375	Condition	 
>54376	CallExpression	isInGameMenu ( )
>54377	ArgumentList	 
>54378	Callee	isInGameMenu
>54379	Identifier	isInGameMenu
>54443	FunctionDef	Game 
>54444	ParameterList	float dt
>54445	Parameter	 
>54446	Identifier	dt
>54447	ParameterType	float
>54448	ReturnType	void
>54449	CompoundStatement	 
>54450	IfStatement	if ( rotate )
>54451	ElseStatement	else
>54452	CompoundStatement	 
>54453	ExpressionStatement	 
>54454	AssignmentExpr	dsq -> cursor -> rotation . z = 0
>54455	PrimaryExpression	0
>54456	MemberAccess	dsq -> cursor -> rotation . z
>54457	Identifier	z
>54458	PtrMemberAccess	dsq -> cursor -> rotation
>54459	Identifier	rotation
>54460	PtrMemberAccess	dsq -> cursor
>54461	Identifier	cursor
>54462	Identifier	dsq
>54463	CompoundStatement	 
>54464	IfStatement	if ( avatar )
>54465	CompoundStatement	 
>54466	ExpressionStatement	 
>54467	AssignmentExpr	dsq -> cursor -> rotation . z = angle
>54468	Identifier	angle
>54469	MemberAccess	dsq -> cursor -> rotation . z
>54470	Identifier	z
>54471	PtrMemberAccess	dsq -> cursor -> rotation
>54472	Identifier	rotation
>54473	PtrMemberAccess	dsq -> cursor
>54474	Identifier	cursor
>54475	Identifier	dsq
>54476	ExpressionStatement	 
>54477	AssignmentExpr	angle += 90
>54478	PrimaryExpression	90
>54479	Identifier	angle
>54480	ExpressionStatement	 
>54481	AssignmentExpr	angle = 180 - ( 360 - angle )
>54482	AdditiveExpression	180 - ( 360 - angle )
>54483	AdditiveExpression	360 - angle
>54484	Identifier	angle
>54485	PrimaryExpression	360
>54486	PrimaryExpression	180
>54487	Identifier	angle
>54488	ExpressionStatement	 
>54489	CallExpression	MathFunctions 
>54490	ArgumentList	Vector ( 0 , 0 , 0 )
>54491	Argument	angle
>54492	Identifier	angle
>54493	Argument	vec
>54494	Identifier	vec
>54495	Argument	Vector ( 0 , 0 , 0 )
>54496	CallExpression	Vector ( 0 , 0 , 0 )
>54497	ArgumentList	0
>54498	Argument	0
>54499	PrimaryExpression	0
>54500	Argument	0
>54501	PrimaryExpression	0
>54502	Argument	0
>54503	PrimaryExpression	0
>54504	Callee	Vector
>54505	Identifier	Vector
>54506	Callee	MathFunctions 
>54507	Identifier	MathFunctions 
>54508	IdentifierDeclStatement	 
>54509	IdentifierDecl	angle = 0
>54510	AssignmentExpr	angle = 0
>54511	PrimaryExpression	0
>54512	Identifier	angle
>54513	Identifier	angle
>54514	IdentifierDeclType	float
>54515	IdentifierDeclStatement	 
>54516	IdentifierDecl	vec = dsq -> getGameCursorPosition ( ) - avatar -> position
>54517	AssignmentExpr	vec = dsq -> getGameCursorPosition ( ) - avatar -> position
>54518	AdditiveExpression	dsq -> getGameCursorPosition ( ) - avatar -> position
>54519	PtrMemberAccess	avatar -> position
>54520	Identifier	position
>54521	Identifier	avatar
>54522	CallExpression	dsq -> getGameCursorPosition ( )
>54523	ArgumentList	 
>54524	Callee	dsq -> getGameCursorPosition
>54525	PtrMemberAccess	dsq -> getGameCursorPosition
>54526	Identifier	getGameCursorPosition
>54527	Identifier	dsq
>54528	Identifier	vec
>54529	Identifier	vec
>54530	IdentifierDeclType	Vector
>54531	Condition	 
>54532	Identifier	avatar
>54533	Condition	 
>54534	Identifier	rotate
>54535	IfStatement	if ( isSceneEditorActive ( ) || dsq -> game -> isPaused ( ) || ( ! avatar || ! avatar -> isInputEnabled ( ) ) || ( \
>54536	ElseStatement	else
>54537	IfStatement	if ( avatar )
>54538	CompoundStatement	 
>54539	IfStatement	if ( avatar -> looking )
>54540	ElseStatement	else
>54541	IfStatement	if ( avatar -> isSinging ( ) )
>54542	ElseStatement	else
>54543	IfStatement	if ( dsq -> game -> isInGameMenu ( ) || v . isLength2DIn ( avatar -> getStopDistance ( ) ) || ( avatar -> entityToActivate || \
>54544	ElseStatement	else
>54545	IfStatement	if ( ! v . isLength2DIn ( avatar -> getBurstDistance ( ) ) )
>54546	ElseStatement	else
>54547	CompoundStatement	 
>54548	ExpressionStatement	 
>54549	AssignmentExpr	rotate = true
>54550	Identifier	true
>54551	Identifier	rotate
>54552	ExpressionStatement	 
>54553	CallExpression	dsq -> setCursor ( CURSOR_SWIM )
>54554	ArgumentList	CURSOR_SWIM
>54555	Argument	CURSOR_SWIM
>54556	Identifier	CURSOR_SWIM
>54557	Callee	dsq -> setCursor
>54558	PtrMemberAccess	dsq -> setCursor
>54559	Identifier	setCursor
>54560	Identifier	dsq
>54561	CompoundStatement	 
>54562	ExpressionStatement	 
>54563	AssignmentExpr	rotate = true
>54564	Identifier	true
>54565	Identifier	rotate
>54566	ExpressionStatement	 
>54567	CallExpression	dsq -> setCursor ( CURSOR_BURST )
>54568	ArgumentList	CURSOR_BURST
>54569	Argument	CURSOR_BURST
>54570	Identifier	CURSOR_BURST
>54571	Callee	dsq -> setCursor
>54572	PtrMemberAccess	dsq -> setCursor
>54573	Identifier	setCursor
>54574	Identifier	dsq
>54575	Condition	 
>54576	UnaryOp	! v . isLength2DIn ( avatar -> getBurstDistance ( ) )
>54577	CallExpression	v . isLength2DIn ( avatar -> getBurstDistance ( ) )
>54578	ArgumentList	avatar -> getBurstDistance ( )
>54579	Argument	avatar -> getBurstDistance ( )
>54580	CallExpression	avatar -> getBurstDistance ( )
>54581	ArgumentList	 
>54582	Callee	avatar -> getBurstDistance
>54583	PtrMemberAccess	avatar -> getBurstDistance
>54584	Identifier	getBurstDistance
>54585	Identifier	avatar
>54586	Callee	v . isLength2DIn
>54587	MemberAccess	v . isLength2DIn
>54588	Identifier	isLength2DIn
>54589	Identifier	v
>54590	UnaryOperator	!
>54591	CompoundStatement	 
>54592	ExpressionStatement	 
>54593	CallExpression	dsq -> setCursor ( CURSOR_NORMAL )
>54594	ArgumentList	CURSOR_NORMAL
>54595	Argument	CURSOR_NORMAL
>54596	Identifier	CURSOR_NORMAL
>54597	Callee	dsq -> setCursor
>54598	PtrMemberAccess	dsq -> setCursor
>54599	Identifier	setCursor
>54600	Identifier	dsq
>54601	Condition	 
>54602	OrExpression	dsq -> game -> isInGameMenu ( ) || v . isLength2DIn ( avatar -> getStopDistance ( ) ) || ( avatar -> \
>54603	OrExpression	v . isLength2DIn ( avatar -> getStopDistance ( ) ) || ( avatar -> entityToActivate || avatar -> pathToActivate )
>54604	OrExpression	avatar -> entityToActivate || avatar -> pathToActivate
>54605	PtrMemberAccess	avatar -> pathToActivate
>54606	Identifier	pathToActivate
>54607	Identifier	avatar
>54608	PtrMemberAccess	avatar -> entityToActivate
>54609	Identifier	entityToActivate
>54610	Identifier	avatar
>54611	CallExpression	v . isLength2DIn ( avatar -> getStopDistance ( ) )
>54612	ArgumentList	avatar -> getStopDistance ( )
>54613	Argument	avatar -> getStopDistance ( )
>54614	CallExpression	avatar -> getStopDistance ( )
>54615	ArgumentList	 
>54616	Callee	avatar -> getStopDistance
>54617	PtrMemberAccess	avatar -> getStopDistance
>54618	Identifier	getStopDistance
>54619	Identifier	avatar
>54620	Callee	v . isLength2DIn
>54621	MemberAccess	v . isLength2DIn
>54622	Identifier	isLength2DIn
>54623	Identifier	v
>54624	CallExpression	dsq -> game -> isInGameMenu ( )
>54625	ArgumentList	 
>54626	Callee	dsq -> game -> isInGameMenu
>54627	PtrMemberAccess	dsq -> game -> isInGameMenu
>54628	Identifier	isInGameMenu
>54629	PtrMemberAccess	dsq -> game
>54630	Identifier	game
>54631	Identifier	dsq
>54632	CompoundStatement	 
>54633	ExpressionStatement	 
>54634	CallExpression	dsq -> setCursor ( CURSOR_SING )
>54635	ArgumentList	CURSOR_SING
>54636	Argument	CURSOR_SING
>54637	Identifier	CURSOR_SING
>54638	Callee	dsq -> setCursor
>54639	PtrMemberAccess	dsq -> setCursor
>54640	Identifier	setCursor
>54641	Identifier	dsq
>54642	Condition	 
>54643	CallExpression	avatar -> isSinging ( )
>54644	ArgumentList	 
>54645	Callee	avatar -> isSinging
>54646	PtrMemberAccess	avatar -> isSinging
>54647	Identifier	isSinging
>54648	Identifier	avatar
>54649	CompoundStatement	 
>54650	ExpressionStatement	 
>54651	CallExpression	dsq -> setCursor ( CURSOR_LOOK )
>54652	ArgumentList	CURSOR_LOOK
>54653	Argument	CURSOR_LOOK
>54654	Identifier	CURSOR_LOOK
>54655	Callee	dsq -> setCursor
>54656	PtrMemberAccess	dsq -> setCursor
>54657	Identifier	setCursor
>54658	Identifier	dsq
>54659	Condition	 
>54660	PtrMemberAccess	avatar -> looking
>54661	Identifier	looking
>54662	Identifier	avatar
>54663	IdentifierDeclStatement	 
>54664	IdentifierDecl	v = avatar -> getVectorToCursor ( )
>54665	AssignmentExpr	v = avatar -> getVectorToCursor ( )
>54666	CallExpression	avatar -> getVectorToCursor ( )
>54667	ArgumentList	 
>54668	Callee	avatar -> getVectorToCursor
>54669	PtrMemberAccess	avatar -> getVectorToCursor
>54670	Identifier	getVectorToCursor
>54671	Identifier	avatar
>54672	Identifier	v
>54673	Identifier	v
>54674	IdentifierDeclType	Vector
>54675	IfStatement	if ( dsq -> inputMode == INPUT_JOYSTICK )
>54676	ElseStatement	else
>54677	CompoundStatement	 
>54678	ExpressionStatement	 
>54679	AssignmentExpr	dsq -> cursor -> alphaMod = 0.5
>54680	PrimaryExpression	0.5
>54681	PtrMemberAccess	dsq -> cursor -> alphaMod
>54682	Identifier	alphaMod
>54683	PtrMemberAccess	dsq -> cursor
>54684	Identifier	cursor
>54685	Identifier	dsq
>54686	ExpressionStatement	 
>54687	AssignmentExpr	dsq -> cursor -> offset = Vector ( 0 , 0 )
>54688	CallExpression	Vector ( 0 , 0 )
>54689	ArgumentList	0
>54690	Argument	0
>54691	PrimaryExpression	0
>54692	Argument	0
>54693	PrimaryExpression	0
>54694	Callee	Vector
>54695	Identifier	Vector
>54696	PtrMemberAccess	dsq -> cursor -> offset
>54697	Identifier	offset
>54698	PtrMemberAccess	dsq -> cursor
>54699	Identifier	cursor
>54700	Identifier	dsq
>54701	ExpressionStatement	 
>54702	CallExpression	dsq -> cursor -> offset . stop ( )
>54703	ArgumentList	 
>54704	Callee	dsq -> cursor -> offset . stop
>54705	MemberAccess	dsq -> cursor -> offset . stop
>54706	Identifier	stop
>54707	PtrMemberAccess	dsq -> cursor -> offset
>54708	Identifier	offset
>54709	PtrMemberAccess	dsq -> cursor
>54710	Identifier	cursor
>54711	Identifier	dsq
>54712	CompoundStatement	 
>54713	IfStatement	if ( ! dsq -> game -> isPaused ( ) )
>54714	CompoundStatement	 
>54715	Condition	 
>54716	UnaryOp	! dsq -> game -> isPaused ( )
>54717	CallExpression	dsq -> game -> isPaused ( )
>54718	ArgumentList	 
>54719	Callee	dsq -> game -> isPaused
>54720	PtrMemberAccess	dsq -> game -> isPaused
>54721	Identifier	isPaused
>54722	PtrMemberAccess	dsq -> game
>54723	Identifier	game
>54724	Identifier	dsq
>54725	UnaryOperator	!
>54726	IfStatement	if ( ! avatar -> isSinging ( ) )
>54727	ExpressionStatement	 
>54728	CallExpression	core -> setMousePosition ( core -> center )
>54729	ArgumentList	core -> center
>54730	Argument	core -> center
>54731	PtrMemberAccess	core -> center
>54732	Identifier	center
>54733	Identifier	core
>54734	Callee	core -> setMousePosition
>54735	PtrMemberAccess	core -> setMousePosition
>54736	Identifier	setMousePosition
>54737	Identifier	core
>54738	Condition	 
>54739	UnaryOp	! avatar -> isSinging ( )
>54740	CallExpression	avatar -> isSinging ( )
>54741	ArgumentList	 
>54742	Callee	avatar -> isSinging
>54743	PtrMemberAccess	avatar -> isSinging
>54744	Identifier	isSinging
>54745	Identifier	avatar
>54746	UnaryOperator	!
>54747	ExpressionStatement	 
>54748	AssignmentExpr	dsq -> cursor -> alphaMod = 0
>54749	PrimaryExpression	0
>54750	PtrMemberAccess	dsq -> cursor -> alphaMod
>54751	Identifier	alphaMod
>54752	PtrMemberAccess	dsq -> cursor
>54753	Identifier	cursor
>54754	Identifier	dsq
>54755	Condition	 
>54756	EqualityExpression	dsq -> inputMode == INPUT_JOYSTICK
>54757	Identifier	INPUT_JOYSTICK
>54758	PtrMemberAccess	dsq -> inputMode
>54759	Identifier	inputMode
>54760	Identifier	dsq
>54761	Condition	 
>54762	Identifier	avatar
>54763	CompoundStatement	 
>54764	IfStatement	if ( dsq -> inputMode == INPUT_MOUSE || isSceneEditorActive ( ) || dsq -> game -> isPaused ( ) )
>54765	ExpressionStatement	 
>54766	AssignmentExpr	dsq -> cursor -> alphaMod = 0.5
>54767	PrimaryExpression	0.5
>54768	PtrMemberAccess	dsq -> cursor -> alphaMod
>54769	Identifier	alphaMod
>54770	PtrMemberAccess	dsq -> cursor
>54771	Identifier	cursor
>54772	Identifier	dsq
>54773	Condition	 
>54774	OrExpression	dsq -> inputMode == INPUT_MOUSE || isSceneEditorActive ( ) || dsq -> game -> isPaused ( )
>54775	OrExpression	isSceneEditorActive ( ) || dsq -> game -> isPaused ( )
>54776	CallExpression	dsq -> game -> isPaused ( )
>54777	ArgumentList	 
>54778	Callee	dsq -> game -> isPaused
>54779	PtrMemberAccess	dsq -> game -> isPaused
>54780	Identifier	isPaused
>54781	PtrMemberAccess	dsq -> game
>54782	Identifier	game
>54783	Identifier	dsq
>54784	CallExpression	isSceneEditorActive ( )
>54785	ArgumentList	 
>54786	Callee	isSceneEditorActive
>54787	Identifier	isSceneEditorActive
>54788	EqualityExpression	dsq -> inputMode == INPUT_MOUSE
>54789	Identifier	INPUT_MOUSE
>54790	PtrMemberAccess	dsq -> inputMode
>54791	Identifier	inputMode
>54792	Identifier	dsq
>54793	ExpressionStatement	 
>54794	CallExpression	dsq -> setCursor ( CURSOR_NORMAL )
>54795	ArgumentList	CURSOR_NORMAL
>54796	Argument	CURSOR_NORMAL
>54797	Identifier	CURSOR_NORMAL
>54798	Callee	dsq -> setCursor
>54799	PtrMemberAccess	dsq -> setCursor
>54800	Identifier	setCursor
>54801	Identifier	dsq
>54802	Condition	 
>54803	OrExpression	isSceneEditorActive ( ) || dsq -> game -> isPaused ( ) || ( ! avatar || ! avatar -> isInputEnabled ( ) ) || ( \
>54804	OrExpression	dsq -> game -> isPaused ( ) || ( ! avatar || ! avatar -> isInputEnabled ( ) ) || ( dsq -> game -> miniMapRender && \
>54805	OrExpression	( ! avatar || ! avatar -> isInputEnabled ( ) ) || ( dsq -> game -> miniMapRender && dsq -> game -> miniMapRender \
>54806	AndExpression	dsq -> game -> miniMapRender && dsq -> game -> miniMapRender -> isCursorIn ( )
>54807	CallExpression	dsq -> game -> miniMapRender -> isCursorIn ( )
>54808	ArgumentList	 
>54809	Callee	dsq -> game -> miniMapRender -> isCursorIn
>54810	PtrMemberAccess	dsq -> game -> miniMapRender -> isCursorIn
>54811	Identifier	isCursorIn
>54812	PtrMemberAccess	dsq -> game -> miniMapRender
>54813	Identifier	miniMapRender
>54814	PtrMemberAccess	dsq -> game
>54815	Identifier	game
>54816	Identifier	dsq
>54817	PtrMemberAccess	dsq -> game -> miniMapRender
>54818	Identifier	miniMapRender
>54819	PtrMemberAccess	dsq -> game
>54820	Identifier	game
>54821	Identifier	dsq
>54822	OrExpression	! avatar || ! avatar -> isInputEnabled ( )
>54823	UnaryOp	! avatar -> isInputEnabled ( )
>54824	CallExpression	avatar -> isInputEnabled ( )
>54825	ArgumentList	 
>54826	Callee	avatar -> isInputEnabled
>54827	PtrMemberAccess	avatar -> isInputEnabled
>54828	Identifier	isInputEnabled
>54829	Identifier	avatar
>54830	UnaryOperator	!
>54831	UnaryOp	! avatar
>54832	Identifier	avatar
>54833	UnaryOperator	!
>54834	CallExpression	dsq -> game -> isPaused ( )
>54835	ArgumentList	 
>54836	Callee	dsq -> game -> isPaused
>54837	PtrMemberAccess	dsq -> game -> isPaused
>54838	Identifier	isPaused
>54839	PtrMemberAccess	dsq -> game
>54840	Identifier	game
>54841	Identifier	dsq
>54842	CallExpression	isSceneEditorActive ( )
>54843	ArgumentList	 
>54844	Callee	isSceneEditorActive
>54845	Identifier	isSceneEditorActive
>54846	IfStatement	if ( dsq -> inputMode == INPUT_MOUSE )
>54847	ElseStatement	else
>54848	IfStatement	if ( dsq -> inputMode == INPUT_JOYSTICK )
>54849	CompoundStatement	 
>54850	IfStatement	if ( ! dsq -> game -> isPaused ( ) || dsq -> game -> isInGameMenu ( ) || ! dsq -> game -> avatar -> isInputEnabled ( ) )
>54851	ElseStatement	else
>54852	CompoundStatement	 
>54853	ExpressionStatement	 
>54854	AssignmentExpr	dsq -> cursor -> offset = Vector ( 0 , 0 )
>54855	CallExpression	Vector ( 0 , 0 )
>54856	ArgumentList	0
>54857	Argument	0
>54858	PrimaryExpression	0
>54859	Argument	0
>54860	PrimaryExpression	0
>54861	Callee	Vector
>54862	Identifier	Vector
>54863	PtrMemberAccess	dsq -> cursor -> offset
>54864	Identifier	offset
>54865	PtrMemberAccess	dsq -> cursor
>54866	Identifier	cursor
>54867	Identifier	dsq
>54868	ExpressionStatement	 
>54869	CallExpression	dsq -> cursor -> offset . stop ( )
>54870	ArgumentList	 
>54871	Callee	dsq -> cursor -> offset . stop
>54872	MemberAccess	dsq -> cursor -> offset . stop
>54873	Identifier	stop
>54874	PtrMemberAccess	dsq -> cursor -> offset
>54875	Identifier	offset
>54876	PtrMemberAccess	dsq -> cursor
>54877	Identifier	cursor
>54878	Identifier	dsq
>54879	CompoundStatement	 
>54880	IfStatement	if ( ! dsq -> cursor -> offset . isInterpolating ( ) )
>54881	CompoundStatement	 
>54882	ExpressionStatement	 
>54883	CallExpression	dsq -> cursor -> offset . interpolateTo ( Vector ( 0 , offy - 20 ) , 0.4 , - 1 , 1 , 1 )
>54884	ArgumentList	Vector ( 0 , offy - 20 )
>54885	Argument	1
>54886	PrimaryExpression	1
>54887	Argument	1
>54888	PrimaryExpression	1
>54889	Argument	- 1
>54890	UnaryOp	- 1
>54891	PrimaryExpression	1
>54892	UnaryOperator	-
>54893	Argument	0.4
>54894	PrimaryExpression	0.4
>54895	Argument	Vector ( 0 , offy - 20 )
>54896	CallExpression	Vector ( 0 , offy - 20 )
>54897	ArgumentList	0
>54898	Argument	offy - 20
>54899	AdditiveExpression	offy - 20
>54900	PrimaryExpression	20
>54901	Identifier	offy
>54902	Argument	0
>54903	PrimaryExpression	0
>54904	Callee	Vector
>54905	Identifier	Vector
>54906	Callee	dsq -> cursor -> offset . interpolateTo
>54907	MemberAccess	dsq -> cursor -> offset . interpolateTo
>54908	Identifier	interpolateTo
>54909	PtrMemberAccess	dsq -> cursor -> offset
>54910	Identifier	offset
>54911	PtrMemberAccess	dsq -> cursor
>54912	Identifier	cursor
>54913	Identifier	dsq
>54914	ExpressionStatement	 
>54915	AssignmentExpr	dsq -> cursor -> offset = Vector ( 0 , offy )
>54916	CallExpression	Vector ( 0 , offy )
>54917	ArgumentList	0
>54918	Argument	offy
>54919	Identifier	offy
>54920	Argument	0
>54921	PrimaryExpression	0
>54922	Callee	Vector
>54923	Identifier	Vector
>54924	PtrMemberAccess	dsq -> cursor -> offset
>54925	Identifier	offset
>54926	PtrMemberAccess	dsq -> cursor
>54927	Identifier	cursor
>54928	Identifier	dsq
>54929	Condition	 
>54930	UnaryOp	! dsq -> cursor -> offset . isInterpolating ( )
>54931	CallExpression	dsq -> cursor -> offset . isInterpolating ( )
>54932	ArgumentList	 
>54933	Callee	dsq -> cursor -> offset . isInterpolating
>54934	MemberAccess	dsq -> cursor -> offset . isInterpolating
>54935	Identifier	isInterpolating
>54936	PtrMemberAccess	dsq -> cursor -> offset
>54937	Identifier	offset
>54938	PtrMemberAccess	dsq -> cursor
>54939	Identifier	cursor
>54940	Identifier	dsq
>54941	UnaryOperator	!
>54942	IfStatement	if ( dsq -> game -> isInGameMenu ( ) || ! dsq -> game -> avatar -> isInputEnabled ( ) )
>54943	CompoundStatement	 
>54944	ExpressionStatement	 
>54945	AssignmentExpr	offy = 0
>54946	PrimaryExpression	0
>54947	Identifier	offy
>54948	Condition	 
>54949	OrExpression	dsq -> game -> isInGameMenu ( ) || ! dsq -> game -> avatar -> isInputEnabled ( )
>54950	UnaryOp	! dsq -> game -> avatar -> isInputEnabled ( )
>54951	CallExpression	dsq -> game -> avatar -> isInputEnabled ( )
>54952	ArgumentList	 
>54953	Callee	dsq -> game -> avatar -> isInputEnabled
>54954	PtrMemberAccess	dsq -> game -> avatar -> isInputEnabled
>54955	Identifier	isInputEnabled
>54956	PtrMemberAccess	dsq -> game -> avatar
>54957	Identifier	avatar
>54958	PtrMemberAccess	dsq -> game
>54959	Identifier	game
>54960	Identifier	dsq
>54961	UnaryOperator	!
>54962	CallExpression	dsq -> game -> isInGameMenu ( )
>54963	ArgumentList	 
>54964	Callee	dsq -> game -> isInGameMenu
>54965	PtrMemberAccess	dsq -> game -> isInGameMenu
>54966	Identifier	isInGameMenu
>54967	PtrMemberAccess	dsq -> game
>54968	Identifier	game
>54969	Identifier	dsq
>54970	IdentifierDeclStatement	 
>54971	IdentifierDecl	offy = - 60
>54972	AssignmentExpr	offy = - 60
>54973	UnaryOp	- 60
>54974	PrimaryExpression	60
>54975	UnaryOperator	-
>54976	Identifier	offy
>54977	Identifier	offy
>54978	IdentifierDeclType	int
>54979	Condition	 
>54980	OrExpression	! dsq -> game -> isPaused ( ) || dsq -> game -> isInGameMenu ( ) || ! dsq -> game -> avatar -> isInputEnabled ( )
>54981	OrExpression	dsq -> game -> isInGameMenu ( ) || ! dsq -> game -> avatar -> isInputEnabled ( )
>54982	UnaryOp	! dsq -> game -> avatar -> isInputEnabled ( )
>54983	CallExpression	dsq -> game -> avatar -> isInputEnabled ( )
>54984	ArgumentList	 
>54985	Callee	dsq -> game -> avatar -> isInputEnabled
>54986	PtrMemberAccess	dsq -> game -> avatar -> isInputEnabled
>54987	Identifier	isInputEnabled
>54988	PtrMemberAccess	dsq -> game -> avatar
>54989	Identifier	avatar
>54990	PtrMemberAccess	dsq -> game
>54991	Identifier	game
>54992	Identifier	dsq
>54993	UnaryOperator	!
>54994	CallExpression	dsq -> game -> isInGameMenu ( )
>54995	ArgumentList	 
>54996	Callee	dsq -> game -> isInGameMenu
>54997	PtrMemberAccess	dsq -> game -> isInGameMenu
>54998	Identifier	isInGameMenu
>54999	PtrMemberAccess	dsq -> game
>55000	Identifier	game
>55001	Identifier	dsq
>55002	UnaryOp	! dsq -> game -> isPaused ( )
>55003	CallExpression	dsq -> game -> isPaused ( )
>55004	ArgumentList	 
>55005	Callee	dsq -> game -> isPaused
>55006	PtrMemberAccess	dsq -> game -> isPaused
>55007	Identifier	isPaused
>55008	PtrMemberAccess	dsq -> game
>55009	Identifier	game
>55010	Identifier	dsq
>55011	UnaryOperator	!
>55012	Condition	 
>55013	EqualityExpression	dsq -> inputMode == INPUT_JOYSTICK
>55014	Identifier	INPUT_JOYSTICK
>55015	PtrMemberAccess	dsq -> inputMode
>55016	Identifier	inputMode
>55017	Identifier	dsq
>55018	CompoundStatement	 
>55019	ExpressionStatement	 
>55020	AssignmentExpr	dsq -> cursor -> offset = Vector ( 0 , 0 )
>55021	CallExpression	Vector ( 0 , 0 )
>55022	ArgumentList	0
>55023	Argument	0
>55024	PrimaryExpression	0
>55025	Argument	0
>55026	PrimaryExpression	0
>55027	Callee	Vector
>55028	Identifier	Vector
>55029	PtrMemberAccess	dsq -> cursor -> offset
>55030	Identifier	offset
>55031	PtrMemberAccess	dsq -> cursor
>55032	Identifier	cursor
>55033	Identifier	dsq
>55034	ExpressionStatement	 
>55035	CallExpression	dsq -> cursor -> offset . stop ( )
>55036	ArgumentList	 
>55037	Callee	dsq -> cursor -> offset . stop
>55038	MemberAccess	dsq -> cursor -> offset . stop
>55039	Identifier	stop
>55040	PtrMemberAccess	dsq -> cursor -> offset
>55041	Identifier	offset
>55042	PtrMemberAccess	dsq -> cursor
>55043	Identifier	cursor
>55044	Identifier	dsq
>55045	Condition	 
>55046	EqualityExpression	dsq -> inputMode == INPUT_MOUSE
>55047	Identifier	INPUT_MOUSE
>55048	PtrMemberAccess	dsq -> inputMode
>55049	Identifier	inputMode
>55050	Identifier	dsq
>55051	IdentifierDeclStatement	 
>55052	IdentifierDecl	rotate = false
>55053	AssignmentExpr	rotate = false
>55054	Identifier	false
>55055	Identifier	false
>55056	Identifier	rotate
>55057	IdentifierDeclType	bool
>55117	FunctionDef	Game 
>55118	ParameterList	 
>55119	ReturnType	void
>55120	CompoundStatement	 
>55121	IfStatement	if ( cameraConstrained )
>55122	CompoundStatement	 
>55123	IfStatement	if ( cameraMax . y != - 1 && dsq -> cameraPos . y + scrh >= cameraMax . y )
>55124	CompoundStatement	 
>55125	ExpressionStatement	 
>55126	AssignmentExpr	cameraOffBounds = 1
>55127	PrimaryExpression	1
>55128	Identifier	cameraOffBounds
>55129	ExpressionStatement	 
>55130	AssignmentExpr	dsq -> cameraPos . y = cameraMax . y - scrh
>55131	AdditiveExpression	cameraMax . y - scrh
>55132	Identifier	scrh
>55133	MemberAccess	cameraMax . y
>55134	Identifier	y
>55135	Identifier	cameraMax
>55136	MemberAccess	dsq -> cameraPos . y
>55137	Identifier	y
>55138	PtrMemberAccess	dsq -> cameraPos
>55139	Identifier	cameraPos
>55140	Identifier	dsq
>55141	Condition	 
>55142	AndExpression	cameraMax . y != - 1 && dsq -> cameraPos . y + scrh >= cameraMax . y
>55143	RelationalExpression	dsq -> cameraPos . y + scrh >= cameraMax . y
>55144	MemberAccess	cameraMax . y
>55145	Identifier	y
>55146	Identifier	cameraMax
>55147	AdditiveExpression	dsq -> cameraPos . y + scrh
>55148	Identifier	scrh
>55149	MemberAccess	dsq -> cameraPos . y
>55150	Identifier	y
>55151	PtrMemberAccess	dsq -> cameraPos
>55152	Identifier	cameraPos
>55153	Identifier	dsq
>55154	EqualityExpression	cameraMax . y != - 1
>55155	UnaryOp	- 1
>55156	PrimaryExpression	1
>55157	UnaryOperator	-
>55158	MemberAccess	cameraMax . y
>55159	Identifier	y
>55160	Identifier	cameraMax
>55161	IfStatement	if ( cameraMax . x != - 1 && dsq -> cameraPos . x + scrw >= cameraMax . x )
>55162	CompoundStatement	 
>55163	ExpressionStatement	 
>55164	AssignmentExpr	cameraOffBounds = 1
>55165	PrimaryExpression	1
>55166	Identifier	cameraOffBounds
>55167	ExpressionStatement	 
>55168	AssignmentExpr	dsq -> cameraPos . x = cameraMax . x - scrw
>55169	AdditiveExpression	cameraMax . x - scrw
>55170	Identifier	scrw
>55171	MemberAccess	cameraMax . x
>55172	Identifier	x
>55173	Identifier	cameraMax
>55174	MemberAccess	dsq -> cameraPos . x
>55175	Identifier	x
>55176	PtrMemberAccess	dsq -> cameraPos
>55177	Identifier	cameraPos
>55178	Identifier	dsq
>55179	Condition	 
>55180	AndExpression	cameraMax . x != - 1 && dsq -> cameraPos . x + scrw >= cameraMax . x
>55181	RelationalExpression	dsq -> cameraPos . x + scrw >= cameraMax . x
>55182	MemberAccess	cameraMax . x
>55183	Identifier	x
>55184	Identifier	cameraMax
>55185	AdditiveExpression	dsq -> cameraPos . x + scrw
>55186	Identifier	scrw
>55187	MemberAccess	dsq -> cameraPos . x
>55188	Identifier	x
>55189	PtrMemberAccess	dsq -> cameraPos
>55190	Identifier	cameraPos
>55191	Identifier	dsq
>55192	EqualityExpression	cameraMax . x != - 1
>55193	UnaryOp	- 1
>55194	PrimaryExpression	1
>55195	UnaryOperator	-
>55196	MemberAccess	cameraMax . x
>55197	Identifier	x
>55198	Identifier	cameraMax
>55199	IdentifierDeclStatement	 
>55200	IdentifierDecl	scrh = 600 * core -> invGlobalScale
>55201	AssignmentExpr	scrh = 600 * core -> invGlobalScale
>55202	MultiplicativeExpression	600 * core -> invGlobalScale
>55203	PtrMemberAccess	core -> invGlobalScale
>55204	Identifier	invGlobalScale
>55205	Identifier	core
>55206	PrimaryExpression	600
>55207	Identifier	scrh
>55208	Identifier	scrh
>55209	IdentifierDeclType	float
>55210	IdentifierDeclStatement	 
>55211	IdentifierDecl	scrw = ( core -> getVirtualWidth ( ) - core -> getVirtualOffX ( ) + TILE_SIZE ) * core -> invGlobalScale
>55212	AssignmentExpr	scrw = ( core -> getVirtualWidth ( ) - core -> getVirtualOffX ( ) + TILE_SIZE ) * core -> invGlobalScale
>55213	MultiplicativeExpression	( core -> getVirtualWidth ( ) - core -> getVirtualOffX ( ) + TILE_SIZE ) * core -> invGlobalScale
>55214	PtrMemberAccess	core -> invGlobalScale
>55215	Identifier	invGlobalScale
>55216	Identifier	core
>55217	AdditiveExpression	core -> getVirtualWidth ( ) - core -> getVirtualOffX ( ) + TILE_SIZE
>55218	AdditiveExpression	core -> getVirtualOffX ( ) + TILE_SIZE
>55219	Identifier	TILE_SIZE
>55220	CallExpression	core -> getVirtualOffX ( )
>55221	ArgumentList	 
>55222	Callee	core -> getVirtualOffX
>55223	PtrMemberAccess	core -> getVirtualOffX
>55224	Identifier	getVirtualOffX
>55225	Identifier	core
>55226	CallExpression	core -> getVirtualWidth ( )
>55227	ArgumentList	 
>55228	Callee	core -> getVirtualWidth
>55229	PtrMemberAccess	core -> getVirtualWidth
>55230	Identifier	getVirtualWidth
>55231	Identifier	core
>55232	Identifier	scrw
>55233	Identifier	scrw
>55234	IdentifierDeclType	float
>55235	IfStatement	if ( dsq -> cameraPos . y <= ( cameraMin . y + 1 ) )
>55236	CompoundStatement	 
>55237	ExpressionStatement	 
>55238	AssignmentExpr	cameraOffBounds = 1
>55239	PrimaryExpression	1
>55240	Identifier	cameraOffBounds
>55241	ExpressionStatement	 
>55242	AssignmentExpr	dsq -> cameraPos . y = ( cameraMin . y + 1 ) + vh2
>55243	AdditiveExpression	( cameraMin . y + 1 ) + vh2
>55244	Identifier	vh2
>55245	AdditiveExpression	cameraMin . y + 1
>55246	PrimaryExpression	1
>55247	MemberAccess	cameraMin . y
>55248	Identifier	y
>55249	Identifier	cameraMin
>55250	MemberAccess	dsq -> cameraPos . y
>55251	Identifier	y
>55252	PtrMemberAccess	dsq -> cameraPos
>55253	Identifier	cameraPos
>55254	Identifier	dsq
>55255	Condition	 
>55256	RelationalExpression	dsq -> cameraPos . y <= ( cameraMin . y + 1 )
>55257	AdditiveExpression	cameraMin . y + 1
>55258	PrimaryExpression	1
>55259	MemberAccess	cameraMin . y
>55260	Identifier	y
>55261	Identifier	cameraMin
>55262	MemberAccess	dsq -> cameraPos . y
>55263	Identifier	y
>55264	PtrMemberAccess	dsq -> cameraPos
>55265	Identifier	cameraPos
>55266	Identifier	dsq
>55267	IfStatement	if ( dsq -> cameraPos . x - vw2 < ( cameraMin . x + 1 ) )
>55268	CompoundStatement	 
>55269	ExpressionStatement	 
>55270	AssignmentExpr	cameraOffBounds = 1
>55271	PrimaryExpression	1
>55272	Identifier	cameraOffBounds
>55273	ExpressionStatement	 
>55274	AssignmentExpr	dsq -> cameraPos . x = ( cameraMin . x + 1 ) + vw2
>55275	AdditiveExpression	( cameraMin . x + 1 ) + vw2
>55276	Identifier	vw2
>55277	AdditiveExpression	cameraMin . x + 1
>55278	PrimaryExpression	1
>55279	MemberAccess	cameraMin . x
>55280	Identifier	x
>55281	Identifier	cameraMin
>55282	MemberAccess	dsq -> cameraPos . x
>55283	Identifier	x
>55284	PtrMemberAccess	dsq -> cameraPos
>55285	Identifier	cameraPos
>55286	Identifier	dsq
>55287	Condition	 
>55288	RelationalExpression	dsq -> cameraPos . x - vw2 < ( cameraMin . x + 1 )
>55289	AdditiveExpression	cameraMin . x + 1
>55290	PrimaryExpression	1
>55291	MemberAccess	cameraMin . x
>55292	Identifier	x
>55293	Identifier	cameraMin
>55294	AdditiveExpression	dsq -> cameraPos . x - vw2
>55295	Identifier	vw2
>55296	MemberAccess	dsq -> cameraPos . x
>55297	Identifier	x
>55298	PtrMemberAccess	dsq -> cameraPos
>55299	Identifier	cameraPos
>55300	Identifier	dsq
>55301	IdentifierDeclStatement	 
>55302	IdentifierDecl	vh2 = core -> getVirtualOffY ( ) * core -> invGlobalScale
>55303	AssignmentExpr	vh2 = core -> getVirtualOffY ( ) * core -> invGlobalScale
>55304	MultiplicativeExpression	core -> getVirtualOffY ( ) * core -> invGlobalScale
>55305	PtrMemberAccess	core -> invGlobalScale
>55306	Identifier	invGlobalScale
>55307	Identifier	core
>55308	CallExpression	core -> getVirtualOffY ( )
>55309	ArgumentList	 
>55310	Callee	core -> getVirtualOffY
>55311	PtrMemberAccess	core -> getVirtualOffY
>55312	Identifier	getVirtualOffY
>55313	Identifier	core
>55314	Identifier	vh2
>55315	Identifier	vh2
>55316	IdentifierDeclType	float
>55317	IdentifierDeclStatement	 
>55318	IdentifierDecl	vw2 = core -> getVirtualOffX ( ) * core -> invGlobalScale
>55319	AssignmentExpr	vw2 = core -> getVirtualOffX ( ) * core -> invGlobalScale
>55320	MultiplicativeExpression	core -> getVirtualOffX ( ) * core -> invGlobalScale
>55321	PtrMemberAccess	core -> invGlobalScale
>55322	Identifier	invGlobalScale
>55323	Identifier	core
>55324	CallExpression	core -> getVirtualOffX ( )
>55325	ArgumentList	 
>55326	Callee	core -> getVirtualOffX
>55327	PtrMemberAccess	core -> getVirtualOffX
>55328	Identifier	getVirtualOffX
>55329	Identifier	core
>55330	Identifier	vw2
>55331	Identifier	vw2
>55332	IdentifierDeclType	float
>55333	Condition	 
>55334	Identifier	cameraConstrained
>55335	ExpressionStatement	 
>55336	AssignmentExpr	cameraOffBounds = 0
>55337	PrimaryExpression	0
>55338	Identifier	cameraOffBounds
>55366	FunctionDef	areEntitiesUnique ()
>55367	ParameterList	 
>55368	ReturnType	bool
>55369	CompoundStatement	 
>55370	ReturnStatement	 
>55371	Identifier	unique
>55372	IfStatement	if ( unique )
>55373	ElseStatement	else
>55374	CompoundStatement	 
>55375	ExpressionStatement	 
>55376	CallExpression	debugLog ( os . str ( ) )
>55377	ArgumentList	os . str ( )
>55378	Argument	os . str ( )
>55379	CallExpression	os . str ( )
>55380	ArgumentList	 
>55381	Callee	os . str
>55382	MemberAccess	os . str
>55383	Identifier	str
>55384	Identifier	os
>55385	Callee	debugLog
>55386	Identifier	debugLog
>55387	ExpressionStatement	 
>55388	ShiftExpression	os << c << \" Entity IDs are NOT unique\"
>55389	ShiftExpression	c << \" Entity IDs are NOT unique\"
>55390	PrimaryExpression	\" Entity IDs are NOT unique\"
>55391	Identifier	c
>55392	Identifier	os
>55393	IdentifierDeclStatement	 
>55394	IdentifierDecl	os
>55395	Identifier	os
>55396	IdentifierDeclType	std 
>55397	CompoundStatement	 
>55398	ExpressionStatement	 
>55399	CallExpression	debugLog ( \"Entity IDs are unique\" )
>55400	ArgumentList	\"Entity IDs are unique\"
>55401	Argument	\"Entity IDs are unique\"
>55402	PrimaryExpression	\"Entity IDs are unique\"
>55403	Callee	debugLog
>55404	Identifier	debugLog
>55405	Condition	 
>55406	Identifier	unique
>55407	CompoundStatement	 
>55408	CompoundStatement	 
>55409	IfStatement	if ( e != e2 )
>55410	CompoundStatement	 
>55411	IfStatement	if ( e -> getID ( ) == e2 -> getID ( ) )
>55412	CompoundStatement	 
>55413	ExpressionStatement	 
>55414	IncDecOp	c ++
>55415	IncDec	++
>55416	Identifier	c
>55417	ExpressionStatement	 
>55418	AssignmentExpr	unique = false
>55419	Identifier	false
>55420	Identifier	unique
>55421	ExpressionStatement	 
>55422	CallExpression	debugLog ( os . str ( ) )
>55423	ArgumentList	os . str ( )
>55424	Argument	os . str ( )
>55425	CallExpression	os . str ( )
>55426	ArgumentList	 
>55427	Callee	os . str
>55428	MemberAccess	os . str
>55429	Identifier	str
>55430	Identifier	os
>55431	Callee	debugLog
>55432	Identifier	debugLog
>55433	ExpressionStatement	 
>55434	ShiftExpression	os << \"found non-unique entity
>55435	ShiftExpression	\"found non-unique entity
>55436	ShiftExpression	e -> getID ( ) << \" names, \" << e -> name << \" and \" << e2 -> name
>55437	ShiftExpression	\" names, \" << e -> name << \" and \" << e2 -> name
>55438	ShiftExpression	e -> name << \" and \" << e2 -> name
>55439	ShiftExpression	\" and \" << e2 -> name
>55440	PtrMemberAccess	e2 -> name
>55441	Identifier	name
>55442	Identifier	e2
>55443	PrimaryExpression	\" and \"
>55444	PtrMemberAccess	e -> name
>55445	Identifier	name
>55446	Identifier	e
>55447	PrimaryExpression	\" names, \"
>55448	CallExpression	e -> getID ( )
>55449	ArgumentList	 
>55450	Callee	e -> getID
>55451	PtrMemberAccess	e -> getID
>55452	Identifier	getID
>55453	Identifier	e
>55454	PrimaryExpression	\"found non-unique entity
>55455	Identifier	os
>55456	IdentifierDeclStatement	 
>55457	IdentifierDecl	os
>55458	Identifier	os
>55459	IdentifierDeclType	std 
>55460	Condition	 
>55461	EqualityExpression	e -> getID ( ) == e2 -> getID ( )
>55462	CallExpression	e2 -> getID ( )
>55463	ArgumentList	 
>55464	Callee	e2 -> getID
>55465	PtrMemberAccess	e2 -> getID
>55466	Identifier	getID
>55467	Identifier	e2
>55468	CallExpression	e -> getID ( )
>55469	ArgumentList	 
>55470	Callee	e -> getID
>55471	PtrMemberAccess	e -> getID
>55472	Identifier	getID
>55473	Identifier	e
>55474	Condition	 
>55475	EqualityExpression	e != e2
>55476	Identifier	e2
>55477	Identifier	e
>55478	IdentifierDeclStatement	 
>55479	IdentifierDecl	* e2 = * j
>55480	AssignmentExpr	* e2 = * j
>55481	UnaryOp	* j
>55482	Identifier	j
>55483	UnaryOperator	*
>55484	Identifier	e2
>55485	Identifier	e2
>55486	IdentifierDeclType	Entity *
>55487	Statement	 
>55488	Statement	 
>55489	Statement	 
>55490	Statement	 
>55491	IdentifierDeclStatement	 
>55492	IdentifierDecl	* e = * i
>55493	AssignmentExpr	* e = * i
>55494	UnaryOp	* i
>55495	Identifier	i
>55496	UnaryOperator	*
>55497	Identifier	e
>55498	Identifier	e
>55499	IdentifierDeclType	Entity *
>55500	Statement	 
>55501	Statement	 
>55502	Statement	 
>55503	Statement	 
>55504	IdentifierDeclStatement	 
>55505	IdentifierDecl	c = 0
>55506	AssignmentExpr	c = 0
>55507	PrimaryExpression	0
>55508	Identifier	c
>55509	Identifier	c
>55510	IdentifierDeclType	int
>55511	IdentifierDeclStatement	 
>55512	IdentifierDecl	unique = true
>55513	AssignmentExpr	unique = true
>55514	Identifier	true
>55515	Identifier	true
>55516	Identifier	unique
>55517	IdentifierDeclType	bool
>55537	FunctionDef	Game 
>55538	ParameterList	 
>55539	ReturnType	bool
>55540	CompoundStatement	 
>55541	ReturnStatement	 
>55542	EqualityExpression	controlHint_bg -> alpha . x != 0
>55543	PrimaryExpression	0
>55544	MemberAccess	controlHint_bg -> alpha . x
>55545	Identifier	x
>55546	PtrMemberAccess	controlHint_bg -> alpha
>55547	Identifier	alpha
>55548	Identifier	controlHint_bg
>55556	FunctionDef	Game 
>55557	ParameterList	Vector start , Vector target
>55558	Parameter	 
>55559	Identifier	target
>55560	ParameterType	Vector
>55561	Parameter	 
>55562	Identifier	start
>55563	ParameterType	Vector
>55564	ReturnType	bool
>55565	CompoundStatement	 
>55566	ReturnStatement	 
>55567	Identifier	false
>55568	WhileStatement	while ( c < 2048 * 10 )
>55569	CompoundStatement	 
>55570	ExpressionStatement	 
>55571	IncDecOp	c ++
>55572	IncDec	++
>55573	Identifier	c
>55574	ForStatement	for ( i = 1 ; i <= 6 ; i ++ )
>55575	CompoundStatement	 
>55576	IfStatement	if ( dsq -> game -> isObstructed ( tl ) || dsq -> game -> isObstructed ( tr ) )
>55577	ReturnStatement	 
>55578	Identifier	false
>55579	Condition	 
>55580	OrExpression	dsq -> game -> isObstructed ( tl ) || dsq -> game -> isObstructed ( tr )
>55581	CallExpression	dsq -> game -> isObstructed ( tr )
>55582	ArgumentList	tr
>55583	Argument	tr
>55584	Identifier	tr
>55585	Callee	dsq -> game -> isObstructed
>55586	PtrMemberAccess	dsq -> game -> isObstructed
>55587	Identifier	isObstructed
>55588	PtrMemberAccess	dsq -> game
>55589	Identifier	game
>55590	Identifier	dsq
>55591	CallExpression	dsq -> game -> isObstructed ( tl )
>55592	ArgumentList	tl
>55593	Argument	tl
>55594	Identifier	tl
>55595	Callee	dsq -> game -> isObstructed
>55596	PtrMemberAccess	dsq -> game -> isObstructed
>55597	Identifier	isObstructed
>55598	PtrMemberAccess	dsq -> game
>55599	Identifier	game
>55600	Identifier	dsq
>55601	IdentifierDeclStatement	 
>55602	IdentifierDecl	tr ( pos + pr * i )
>55603	AdditiveExpression	pos + pr * i
>55604	MultiplicativeExpression	pr * i
>55605	Identifier	i
>55606	Identifier	pr
>55607	Identifier	pos
>55608	Identifier	tr
>55609	IdentifierDeclType	TileVector
>55610	IdentifierDeclStatement	 
>55611	IdentifierDecl	tl ( pos + pl * i )
>55612	AdditiveExpression	pos + pl * i
>55613	MultiplicativeExpression	pl * i
>55614	Identifier	i
>55615	Identifier	pl
>55616	Identifier	pos
>55617	Identifier	tl
>55618	IdentifierDeclType	TileVector
>55619	IncDecOp	 
>55620	IncDec	++
>55621	Identifier	i
>55622	Condition	 
>55623	RelationalExpression	i <= 6
>55624	PrimaryExpression	6
>55625	Identifier	i
>55626	ForInit	 
>55627	AssignmentExpr	i = 1
>55628	PrimaryExpression	1
>55629	Identifier	i
>55630	ExpressionStatement	 
>55631	AssignmentExpr	i = 1
>55632	PrimaryExpression	1
>55633	Identifier	i
>55634	IdentifierDeclStatement	 
>55635	IdentifierDecl	pr = mov . getPerpendicularRight ( )
>55636	AssignmentExpr	pr = mov . getPerpendicularRight ( )
>55637	CallExpression	mov . getPerpendicularRight ( )
>55638	ArgumentList	 
>55639	Callee	mov . getPerpendicularRight
>55640	MemberAccess	mov . getPerpendicularRight
>55641	Identifier	getPerpendicularRight
>55642	Identifier	mov
>55643	Identifier	pr
>55644	Identifier	pr
>55645	IdentifierDeclType	Vector
>55646	IdentifierDeclStatement	 
>55647	IdentifierDecl	pl = mov . getPerpendicularLeft ( )
>55648	AssignmentExpr	pl = mov . getPerpendicularLeft ( )
>55649	CallExpression	mov . getPerpendicularLeft ( )
>55650	ArgumentList	 
>55651	Callee	mov . getPerpendicularLeft
>55652	MemberAccess	mov . getPerpendicularLeft
>55653	Identifier	getPerpendicularLeft
>55654	Identifier	mov
>55655	Identifier	pl
>55656	Identifier	pl
>55657	IdentifierDeclType	Vector
>55658	IfStatement	if ( diff . getSquaredLength2D ( ) <= sqr ( TILE_SIZE * 2 ) )
>55659	ReturnStatement	 
>55660	Identifier	true
>55661	Condition	 
>55662	RelationalExpression	diff . getSquaredLength2D ( ) <= sqr ( TILE_SIZE * 2 )
>55663	CallExpression	sqr ( TILE_SIZE * 2 )
>55664	ArgumentList	TILE_SIZE * 2
>55665	Argument	TILE_SIZE * 2
>55666	MultiplicativeExpression	TILE_SIZE * 2
>55667	PrimaryExpression	2
>55668	Identifier	TILE_SIZE
>55669	Callee	sqr
>55670	Identifier	sqr
>55671	CallExpression	diff . getSquaredLength2D ( )
>55672	ArgumentList	 
>55673	Callee	diff . getSquaredLength2D
>55674	MemberAccess	diff . getSquaredLength2D
>55675	Identifier	getSquaredLength2D
>55676	Identifier	diff
>55677	IdentifierDeclStatement	 
>55678	IdentifierDecl	diff = target - pos
>55679	AssignmentExpr	diff = target - pos
>55680	AdditiveExpression	target - pos
>55681	Identifier	pos
>55682	Identifier	target
>55683	Identifier	diff
>55684	Identifier	diff
>55685	IdentifierDeclType	Vector
>55686	IfStatement	if ( dsq -> game -> isObstructed ( TileVector ( pos ) ) )
>55687	ReturnStatement	 
>55688	Identifier	false
>55689	Condition	 
>55690	CallExpression	dsq -> game -> isObstructed ( TileVector ( pos ) )
>55691	ArgumentList	TileVector ( pos )
>55692	Argument	TileVector ( pos )
>55693	CallExpression	TileVector ( pos )
>55694	ArgumentList	pos
>55695	Argument	pos
>55696	Identifier	pos
>55697	Callee	TileVector
>55698	Identifier	TileVector
>55699	Callee	dsq -> game -> isObstructed
>55700	PtrMemberAccess	dsq -> game -> isObstructed
>55701	Identifier	isObstructed
>55702	PtrMemberAccess	dsq -> game
>55703	Identifier	game
>55704	Identifier	dsq
>55705	ExpressionStatement	 
>55706	AssignmentExpr	pos += mov
>55707	Identifier	mov
>55708	Identifier	pos
>55709	Condition	 
>55710	RelationalExpression	c < 2048 * 10
>55711	MultiplicativeExpression	2048 * 10
>55712	PrimaryExpression	10
>55713	PrimaryExpression	2048
>55714	Identifier	c
>55715	IdentifierDeclStatement	 
>55716	IdentifierDecl	c = 0
>55717	AssignmentExpr	c = 0
>55718	PrimaryExpression	0
>55719	Identifier	c
>55720	Identifier	c
>55721	IdentifierDeclType	int
>55722	ExpressionStatement	 
>55723	CallExpression	mov . setLength2D ( TILE_SIZE * 1 )
>55724	ArgumentList	TILE_SIZE * 1
>55725	Argument	TILE_SIZE * 1
>55726	MultiplicativeExpression	TILE_SIZE * 1
>55727	PrimaryExpression	1
>55728	Identifier	TILE_SIZE
>55729	Callee	mov . setLength2D
>55730	MemberAccess	mov . setLength2D
>55731	Identifier	setLength2D
>55732	Identifier	mov
>55733	IdentifierDeclStatement	 
>55734	IdentifierDecl	pos = start
>55735	AssignmentExpr	pos = start
>55736	Identifier	start
>55737	Identifier	start
>55738	Identifier	pos
>55739	IdentifierDeclType	Vector
>55740	IdentifierDeclStatement	 
>55741	IdentifierDecl	mov ( target - start )
>55742	AdditiveExpression	target - start
>55743	Identifier	start
>55744	Identifier	target
>55745	Identifier	mov
>55746	IdentifierDeclType	Vector
>55747	IdentifierDeclStatement	 
>55748	IdentifierDecl	i = 0
>55749	AssignmentExpr	i = 0
>55750	PrimaryExpression	0
>55751	Identifier	i
>55752	Identifier	i
>55753	IdentifierDeclType	int
>55784	FunctionDef	Game 
>55785	ParameterList	 
>55786	ReturnType	void
>55787	CompoundStatement	 
>55788	IfStatement	if ( avatar -> isUnderWater ( avatar -> getHeadPosition ( ) ) )
>55789	ElseStatement	else
>55790	ExpressionStatement	 
>55791	CallExpression	dsq -> game -> switchBgLoop ( 1 )
>55792	ArgumentList	1
>55793	Argument	1
>55794	PrimaryExpression	1
>55795	Callee	dsq -> game -> switchBgLoop
>55796	PtrMemberAccess	dsq -> game -> switchBgLoop
>55797	Identifier	switchBgLoop
>55798	PtrMemberAccess	dsq -> game
>55799	Identifier	game
>55800	Identifier	dsq
>55801	CompoundStatement	 
>55802	ExpressionStatement	 
>55803	CallExpression	dsq -> game -> switchBgLoop ( 0 )
>55804	ArgumentList	0
>55805	Argument	0
>55806	PrimaryExpression	0
>55807	Callee	dsq -> game -> switchBgLoop
>55808	PtrMemberAccess	dsq -> game -> switchBgLoop
>55809	Identifier	switchBgLoop
>55810	PtrMemberAccess	dsq -> game
>55811	Identifier	game
>55812	Identifier	dsq
>55813	Condition	 
>55814	CallExpression	avatar -> isUnderWater ( avatar -> getHeadPosition ( ) )
>55815	ArgumentList	avatar -> getHeadPosition ( )
>55816	Argument	avatar -> getHeadPosition ( )
>55817	CallExpression	avatar -> getHeadPosition ( )
>55818	ArgumentList	 
>55819	Callee	avatar -> getHeadPosition
>55820	PtrMemberAccess	avatar -> getHeadPosition
>55821	Identifier	getHeadPosition
>55822	Identifier	avatar
>55823	Callee	avatar -> isUnderWater
>55824	PtrMemberAccess	avatar -> isUnderWater
>55825	Identifier	isUnderWater
>55826	Identifier	avatar
>55827	IfStatement	if ( p && p -> isCoordinateInside ( dsq -> game -> avatar -> position ) && ! p -> content . empty ( ) )
>55828	ElseStatement	else
>55829	CompoundStatement	 
>55830	IfStatement	if ( dsq -> loops . bg2 != BBGE_AUDIO_NOCHANNEL )
>55831	CompoundStatement	 
>55832	ExpressionStatement	 
>55833	AssignmentExpr	bgSfxLoopPlaying2 = \"\"
>55834	PrimaryExpression	\"\"
>55835	Identifier	bgSfxLoopPlaying2
>55836	ExpressionStatement	 
>55837	AssignmentExpr	dsq -> loops . bg2 = BBGE_AUDIO_NOCHANNEL
>55838	Identifier	BBGE_AUDIO_NOCHANNEL
>55839	MemberAccess	dsq -> loops . bg2
>55840	Identifier	bg2
>55841	PtrMemberAccess	dsq -> loops
>55842	Identifier	loops
>55843	Identifier	dsq
>55844	ExpressionStatement	 
>55845	CallExpression	core -> sound -> fadeSfx ( dsq -> loops . bg2 , SFT_OUT , bgLoopFadeTime )
>55846	ArgumentList	dsq -> loops . bg2
>55847	Argument	bgLoopFadeTime
>55848	Identifier	bgLoopFadeTime
>55849	Argument	SFT_OUT
>55850	Identifier	SFT_OUT
>55851	Argument	dsq -> loops . bg2
>55852	MemberAccess	dsq -> loops . bg2
>55853	Identifier	bg2
>55854	PtrMemberAccess	dsq -> loops
>55855	Identifier	loops
>55856	Identifier	dsq
>55857	Callee	core -> sound -> fadeSfx
>55858	PtrMemberAccess	core -> sound -> fadeSfx
>55859	Identifier	fadeSfx
>55860	PtrMemberAccess	core -> sound
>55861	Identifier	sound
>55862	Identifier	core
>55863	Condition	 
>55864	EqualityExpression	dsq -> loops . bg2 != BBGE_AUDIO_NOCHANNEL
>55865	Identifier	BBGE_AUDIO_NOCHANNEL
>55866	MemberAccess	dsq -> loops . bg2
>55867	Identifier	bg2
>55868	PtrMemberAccess	dsq -> loops
>55869	Identifier	loops
>55870	Identifier	dsq
>55871	CompoundStatement	 
>55872	IfStatement	if ( bgSfxLoopPlaying2 != p -> content )
>55873	CompoundStatement	 
>55874	ExpressionStatement	 
>55875	AssignmentExpr	bgSfxLoopPlaying2 = p -> content
>55876	PtrMemberAccess	p -> content
>55877	Identifier	content
>55878	Identifier	p
>55879	Identifier	bgSfxLoopPlaying2
>55880	ExpressionStatement	 
>55881	AssignmentExpr	dsq -> loops . bg2 = core -> sound -> playSfx ( play )
>55882	CallExpression	core -> sound -> playSfx ( play )
>55883	ArgumentList	play
>55884	Argument	play
>55885	Identifier	play
>55886	Callee	core -> sound -> playSfx
>55887	PtrMemberAccess	core -> sound -> playSfx
>55888	Identifier	playSfx
>55889	PtrMemberAccess	core -> sound
>55890	Identifier	sound
>55891	Identifier	core
>55892	MemberAccess	dsq -> loops . bg2
>55893	Identifier	bg2
>55894	PtrMemberAccess	dsq -> loops
>55895	Identifier	loops
>55896	Identifier	dsq
>55897	ExpressionStatement	 
>55898	AssignmentExpr	play . priority = 0.7
>55899	PrimaryExpression	0.7
>55900	MemberAccess	play . priority
>55901	Identifier	priority
>55902	Identifier	play
>55903	ExpressionStatement	 
>55904	AssignmentExpr	play . loops = - 1
>55905	UnaryOp	- 1
>55906	PrimaryExpression	1
>55907	UnaryOperator	-
>55908	MemberAccess	play . loops
>55909	Identifier	loops
>55910	Identifier	play
>55911	ExpressionStatement	 
>55912	AssignmentExpr	play . vol = 1
>55913	PrimaryExpression	1
>55914	MemberAccess	play . vol
>55915	Identifier	vol
>55916	Identifier	play
>55917	ExpressionStatement	 
>55918	AssignmentExpr	play . fade = SFT_IN
>55919	Identifier	SFT_IN
>55920	MemberAccess	play . fade
>55921	Identifier	fade
>55922	Identifier	play
>55923	ExpressionStatement	 
>55924	AssignmentExpr	play . time = bgLoopFadeTime
>55925	Identifier	bgLoopFadeTime
>55926	MemberAccess	play . time
>55927	Identifier	time
>55928	Identifier	play
>55929	ExpressionStatement	 
>55930	AssignmentExpr	play . name = p -> content
>55931	PtrMemberAccess	p -> content
>55932	Identifier	content
>55933	Identifier	p
>55934	MemberAccess	play . name
>55935	Identifier	name
>55936	Identifier	play
>55937	IdentifierDeclStatement	 
>55938	IdentifierDecl	play
>55939	Identifier	play
>55940	IdentifierDeclType	PlaySfx
>55941	IfStatement	if ( dsq -> loops . bg2 != BBGE_AUDIO_NOCHANNEL )
>55942	CompoundStatement	 
>55943	ExpressionStatement	 
>55944	AssignmentExpr	bgSfxLoopPlaying2 = \"\"
>55945	PrimaryExpression	\"\"
>55946	Identifier	bgSfxLoopPlaying2
>55947	ExpressionStatement	 
>55948	AssignmentExpr	dsq -> loops . bg2 = BBGE_AUDIO_NOCHANNEL
>55949	Identifier	BBGE_AUDIO_NOCHANNEL
>55950	MemberAccess	dsq -> loops . bg2
>55951	Identifier	bg2
>55952	PtrMemberAccess	dsq -> loops
>55953	Identifier	loops
>55954	Identifier	dsq
>55955	ExpressionStatement	 
>55956	CallExpression	core -> sound -> fadeSfx ( dsq -> loops . bg2 , SFT_OUT , bgLoopFadeTime )
>55957	ArgumentList	dsq -> loops . bg2
>55958	Argument	bgLoopFadeTime
>55959	Identifier	bgLoopFadeTime
>55960	Argument	SFT_OUT
>55961	Identifier	SFT_OUT
>55962	Argument	dsq -> loops . bg2
>55963	MemberAccess	dsq -> loops . bg2
>55964	Identifier	bg2
>55965	PtrMemberAccess	dsq -> loops
>55966	Identifier	loops
>55967	Identifier	dsq
>55968	Callee	core -> sound -> fadeSfx
>55969	PtrMemberAccess	core -> sound -> fadeSfx
>55970	Identifier	fadeSfx
>55971	PtrMemberAccess	core -> sound
>55972	Identifier	sound
>55973	Identifier	core
>55974	Condition	 
>55975	EqualityExpression	dsq -> loops . bg2 != BBGE_AUDIO_NOCHANNEL
>55976	Identifier	BBGE_AUDIO_NOCHANNEL
>55977	MemberAccess	dsq -> loops . bg2
>55978	Identifier	bg2
>55979	PtrMemberAccess	dsq -> loops
>55980	Identifier	loops
>55981	Identifier	dsq
>55982	Condition	 
>55983	EqualityExpression	bgSfxLoopPlaying2 != p -> content
>55984	PtrMemberAccess	p -> content
>55985	Identifier	content
>55986	Identifier	p
>55987	Identifier	bgSfxLoopPlaying2
>55988	Condition	 
>55989	AndExpression	p && p -> isCoordinateInside ( dsq -> game -> avatar -> position ) && ! p -> content . empty ( )
>55990	AndExpression	p -> isCoordinateInside ( dsq -> game -> avatar -> position ) && ! p -> content . empty ( )
>55991	UnaryOp	! p -> content . empty ( )
>55992	CallExpression	p -> content . empty ( )
>55993	ArgumentList	 
>55994	Callee	p -> content . empty
>55995	MemberAccess	p -> content . empty
>55996	Identifier	empty
>55997	PtrMemberAccess	p -> content
>55998	Identifier	content
>55999	Identifier	p
>56000	UnaryOperator	!
>56001	CallExpression	p -> isCoordinateInside ( dsq -> game -> avatar -> position )
>56002	ArgumentList	dsq -> game -> avatar -> position
>56003	Argument	dsq -> game -> avatar -> position
>56004	PtrMemberAccess	dsq -> game -> avatar -> position
>56005	Identifier	position
>56006	PtrMemberAccess	dsq -> game -> avatar
>56007	Identifier	avatar
>56008	PtrMemberAccess	dsq -> game
>56009	Identifier	game
>56010	Identifier	dsq
>56011	Callee	p -> isCoordinateInside
>56012	PtrMemberAccess	p -> isCoordinateInside
>56013	Identifier	isCoordinateInside
>56014	Identifier	p
>56015	Identifier	p
>56016	IdentifierDeclStatement	 
>56017	IdentifierDecl	* p = getNearestPath ( dsq -> game -> avatar -> position , PATH_BGSFXLOOP )
>56018	AssignmentExpr	* p = getNearestPath ( dsq -> game -> avatar -> position , PATH_BGSFXLOOP )
>56019	CallExpression	getNearestPath ( dsq -> game -> avatar -> position , PATH_BGSFXLOOP )
>56020	ArgumentList	dsq -> game -> avatar -> position
>56021	Argument	PATH_BGSFXLOOP
>56022	Identifier	PATH_BGSFXLOOP
>56023	Argument	dsq -> game -> avatar -> position
>56024	PtrMemberAccess	dsq -> game -> avatar -> position
>56025	Identifier	position
>56026	PtrMemberAccess	dsq -> game -> avatar
>56027	Identifier	avatar
>56028	PtrMemberAccess	dsq -> game
>56029	Identifier	game
>56030	Identifier	dsq
>56031	Callee	getNearestPath
>56032	Identifier	getNearestPath
>56033	Identifier	p
>56034	Identifier	p
>56035	IdentifierDeclType	Path *
>56036	IfStatement	if ( ! avatar )
>56037	ReturnStatement	 
>56038	Condition	 
>56039	UnaryOp	! avatar
>56040	Identifier	avatar
>56041	UnaryOperator	!
>56092	FunctionDef	Game 
>56093	ParameterList	 
>56094	ReturnType	void
>56095	CompoundStatement	 
>56096	ExpressionStatement	 
>56097	CallExpression	helpText -> offset . interpolateTo ( Vector ( 0 , to ) , helpTextScrollClickTime )
>56098	ArgumentList	Vector ( 0 , to )
>56099	Argument	helpTextScrollClickTime
>56100	Identifier	helpTextScrollClickTime
>56101	Argument	Vector ( 0 , to )
>56102	CallExpression	Vector ( 0 , to )
>56103	ArgumentList	0
>56104	Argument	to
>56105	Identifier	to
>56106	Argument	0
>56107	PrimaryExpression	0
>56108	Callee	Vector
>56109	Identifier	Vector
>56110	Callee	helpText -> offset . interpolateTo
>56111	MemberAccess	helpText -> offset . interpolateTo
>56112	Identifier	interpolateTo
>56113	PtrMemberAccess	helpText -> offset
>56114	Identifier	offset
>56115	Identifier	helpText
>56116	IfStatement	if ( to < - helpText -> getFullHeight ( ) + core -> getVirtualHeight ( ) )
>56117	CompoundStatement	 
>56118	ExpressionStatement	 
>56119	AssignmentExpr	to = - helpText -> getFullHeight ( ) + core -> getVirtualHeight ( )
>56120	AdditiveExpression	- helpText -> getFullHeight ( ) + core -> getVirtualHeight ( )
>56121	CallExpression	core -> getVirtualHeight ( )
>56122	ArgumentList	 
>56123	Callee	core -> getVirtualHeight
>56124	PtrMemberAccess	core -> getVirtualHeight
>56125	Identifier	getVirtualHeight
>56126	Identifier	core
>56127	UnaryOp	- helpText -> getFullHeight ( )
>56128	CallExpression	helpText -> getFullHeight ( )
>56129	ArgumentList	 
>56130	Callee	helpText -> getFullHeight
>56131	PtrMemberAccess	helpText -> getFullHeight
>56132	Identifier	getFullHeight
>56133	Identifier	helpText
>56134	UnaryOperator	-
>56135	Identifier	to
>56136	Condition	 
>56137	RelationalExpression	to < - helpText -> getFullHeight ( ) + core -> getVirtualHeight ( )
>56138	AdditiveExpression	- helpText -> getFullHeight ( ) + core -> getVirtualHeight ( )
>56139	CallExpression	core -> getVirtualHeight ( )
>56140	ArgumentList	 
>56141	Callee	core -> getVirtualHeight
>56142	PtrMemberAccess	core -> getVirtualHeight
>56143	Identifier	getVirtualHeight
>56144	Identifier	core
>56145	UnaryOp	- helpText -> getFullHeight ( )
>56146	CallExpression	helpText -> getFullHeight ( )
>56147	ArgumentList	 
>56148	Callee	helpText -> getFullHeight
>56149	PtrMemberAccess	helpText -> getFullHeight
>56150	Identifier	getFullHeight
>56151	Identifier	helpText
>56152	UnaryOperator	-
>56153	Identifier	to
>56154	IdentifierDeclStatement	 
>56155	IdentifierDecl	to = helpText -> offset . y - helpTextScrollClickAmount
>56156	AssignmentExpr	to = helpText -> offset . y - helpTextScrollClickAmount
>56157	AdditiveExpression	helpText -> offset . y - helpTextScrollClickAmount
>56158	Identifier	helpTextScrollClickAmount
>56159	MemberAccess	helpText -> offset . y
>56160	Identifier	y
>56161	PtrMemberAccess	helpText -> offset
>56162	Identifier	offset
>56163	Identifier	helpText
>56164	Identifier	to
>56165	Identifier	to
>56166	IdentifierDeclType	float
>56182	FunctionDef	Game 
>56183	ParameterList	 
>56184	ReturnType	void
>56185	CompoundStatement	 
>56186	ExpressionStatement	 
>56187	CallExpression	helpText -> offset . interpolateTo ( Vector ( 0 , to ) , helpTextScrollClickTime )
>56188	ArgumentList	Vector ( 0 , to )
>56189	Argument	helpTextScrollClickTime
>56190	Identifier	helpTextScrollClickTime
>56191	Argument	Vector ( 0 , to )
>56192	CallExpression	Vector ( 0 , to )
>56193	ArgumentList	0
>56194	Argument	to
>56195	Identifier	to
>56196	Argument	0
>56197	PrimaryExpression	0
>56198	Callee	Vector
>56199	Identifier	Vector
>56200	Callee	helpText -> offset . interpolateTo
>56201	MemberAccess	helpText -> offset . interpolateTo
>56202	Identifier	interpolateTo
>56203	PtrMemberAccess	helpText -> offset
>56204	Identifier	offset
>56205	Identifier	helpText
>56206	IfStatement	if ( to > 0 )
>56207	CompoundStatement	 
>56208	ExpressionStatement	 
>56209	AssignmentExpr	to = 0
>56210	PrimaryExpression	0
>56211	Identifier	to
>56212	Condition	 
>56213	RelationalExpression	to > 0
>56214	PrimaryExpression	0
>56215	Identifier	to
>56216	IdentifierDeclStatement	 
>56217	IdentifierDecl	to = helpText -> offset . y + helpTextScrollClickAmount
>56218	AssignmentExpr	to = helpText -> offset . y + helpTextScrollClickAmount
>56219	AdditiveExpression	helpText -> offset . y + helpTextScrollClickAmount
>56220	Identifier	helpTextScrollClickAmount
>56221	MemberAccess	helpText -> offset . y
>56222	Identifier	y
>56223	PtrMemberAccess	helpText -> offset
>56224	Identifier	offset
>56225	Identifier	helpText
>56226	Identifier	to
>56227	Identifier	to
>56228	IdentifierDeclType	float
>56240	FunctionDef	Game 
>56241	ParameterList	float dt
>56242	Parameter	 
>56243	Identifier	dt
>56244	ParameterType	float
>56245	ReturnType	void
>56246	CompoundStatement	 
>56247	IfStatement	if ( ! isSceneEditorActive ( ) )
>56248	CompoundStatement	 
>56249	ExpressionStatement	 
>56250	CallExpression	cameraInterp . update ( dt )
>56251	ArgumentList	dt
>56252	Argument	dt
>56253	Identifier	dt
>56254	Callee	cameraInterp . update
>56255	MemberAccess	cameraInterp . update
>56256	Identifier	update
>56257	Identifier	cameraInterp
>56258	IfStatement	if ( cameraFollow )
>56259	CompoundStatement	 
>56260	IdentifierDeclStatement	 
>56261	IdentifierDecl	dd = ( dsq -> cameraPos - oldCamPos ) . getLength2D ( )
>56262	AssignmentExpr	dd = ( dsq -> cameraPos - oldCamPos ) . getLength2D ( )
>56263	CallExpression	( dsq -> cameraPos - oldCamPos ) . getLength2D ( )
>56264	ArgumentList	 
>56265	Callee	( dsq -> cameraPos - oldCamPos ) . getLength2D
>56266	MemberAccess	( dsq -> cameraPos - oldCamPos ) . getLength2D
>56267	Identifier	getLength2D
>56268	AdditiveExpression	dsq -> cameraPos - oldCamPos
>56269	Identifier	oldCamPos
>56270	PtrMemberAccess	dsq -> cameraPos
>56271	Identifier	cameraPos
>56272	Identifier	dsq
>56273	Identifier	dd
>56274	Identifier	dd
>56275	IdentifierDeclType	float
>56276	ExpressionStatement	 
>56277	CallExpression	constrainCamera ( )
>56278	ArgumentList	 
>56279	Callee	constrainCamera
>56280	Identifier	constrainCamera
>56281	ExpressionStatement	 
>56282	AssignmentExpr	dsq -> cameraPos = getCameraPositionFor ( cameraInterp )
>56283	CallExpression	getCameraPositionFor ( cameraInterp )
>56284	ArgumentList	cameraInterp
>56285	Argument	cameraInterp
>56286	Identifier	cameraInterp
>56287	Callee	getCameraPositionFor
>56288	Identifier	getCameraPositionFor
>56289	PtrMemberAccess	dsq -> cameraPos
>56290	Identifier	cameraPos
>56291	Identifier	dsq
>56292	ExpressionStatement	 
>56293	CallExpression	cameraInterp . interpolateTo ( dest , cameraLerpDelay )
>56294	ArgumentList	dest
>56295	Argument	cameraLerpDelay
>56296	Identifier	cameraLerpDelay
>56297	Argument	dest
>56298	Identifier	dest
>56299	Callee	cameraInterp . interpolateTo
>56300	MemberAccess	cameraInterp . interpolateTo
>56301	Identifier	interpolateTo
>56302	Identifier	cameraInterp
>56303	ExpressionStatement	 
>56304	CallExpression	cameraInterp . stop ( )
>56305	ArgumentList	 
>56306	Callee	cameraInterp . stop
>56307	MemberAccess	cameraInterp . stop
>56308	Identifier	stop
>56309	Identifier	cameraInterp
>56310	IdentifierDeclStatement	 
>56311	IdentifierDecl	oldCamPos = dsq -> cameraPos
>56312	AssignmentExpr	oldCamPos = dsq -> cameraPos
>56313	PtrMemberAccess	dsq -> cameraPos
>56314	Identifier	cameraPos
>56315	Identifier	dsq
>56316	Identifier	oldCamPos
>56317	Identifier	oldCamPos
>56318	IdentifierDeclType	Vector
>56319	IfStatement	if ( cameraLerpDelay == 0 )
>56320	CompoundStatement	 
>56321	ExpressionStatement	 
>56322	AssignmentExpr	cameraLerpDelay = vars -> defaultCameraLerpDelay
>56323	PtrMemberAccess	vars -> defaultCameraLerpDelay
>56324	Identifier	defaultCameraLerpDelay
>56325	Identifier	vars
>56326	Identifier	cameraLerpDelay
>56327	Condition	 
>56328	EqualityExpression	cameraLerpDelay == 0
>56329	PrimaryExpression	0
>56330	Identifier	cameraLerpDelay
>56331	IfStatement	if ( avatar )
>56332	CompoundStatement	 
>56333	IfStatement	if ( avatar -> looking && ! dsq -> game -> isPaused ( ) )
>56334	ElseStatement	else
>56335	CompoundStatement	 
>56336	ExpressionStatement	 
>56337	AssignmentExpr	avatar -> looking = 0
>56338	PrimaryExpression	0
>56339	PtrMemberAccess	avatar -> looking
>56340	Identifier	looking
>56341	Identifier	avatar
>56342	CompoundStatement	 
>56343	ExpressionStatement	 
>56344	AssignmentExpr	dest += diff
>56345	Identifier	diff
>56346	Identifier	dest
>56347	ExpressionStatement	 
>56348	CallExpression	diff . capLength2D ( maxLookDistance )
>56349	ArgumentList	maxLookDistance
>56350	Argument	maxLookDistance
>56351	Identifier	maxLookDistance
>56352	Callee	diff . capLength2D
>56353	MemberAccess	diff . capLength2D
>56354	Identifier	capLength2D
>56355	Identifier	diff
>56356	IdentifierDeclStatement	 
>56357	IdentifierDecl	diff = avatar -> getAim ( )
>56358	AssignmentExpr	diff = avatar -> getAim ( )
>56359	CallExpression	avatar -> getAim ( )
>56360	ArgumentList	 
>56361	Callee	avatar -> getAim
>56362	PtrMemberAccess	avatar -> getAim
>56363	Identifier	getAim
>56364	Identifier	avatar
>56365	Identifier	diff
>56366	Identifier	diff
>56367	IdentifierDeclType	Vector
>56368	Condition	 
>56369	AndExpression	avatar -> looking && ! dsq -> game -> isPaused ( )
>56370	UnaryOp	! dsq -> game -> isPaused ( )
>56371	CallExpression	dsq -> game -> isPaused ( )
>56372	ArgumentList	 
>56373	Callee	dsq -> game -> isPaused
>56374	PtrMemberAccess	dsq -> game -> isPaused
>56375	Identifier	isPaused
>56376	PtrMemberAccess	dsq -> game
>56377	Identifier	game
>56378	Identifier	dsq
>56379	UnaryOperator	!
>56380	PtrMemberAccess	avatar -> looking
>56381	Identifier	looking
>56382	Identifier	avatar
>56383	Condition	 
>56384	Identifier	avatar
>56385	IdentifierDeclStatement	 
>56386	IdentifierDecl	dest = * cameraFollow
>56387	AssignmentExpr	dest = * cameraFollow
>56388	UnaryOp	* cameraFollow
>56389	Identifier	cameraFollow
>56390	UnaryOperator	*
>56391	Identifier	dest
>56392	Identifier	dest
>56393	IdentifierDeclType	Vector
>56394	Condition	 
>56395	Identifier	cameraFollow
>56396	IfStatement	if ( ! isPaused ( ) )
>56397	ExpressionStatement	 
>56398	CallExpression	waterLevel . update ( dt )
>56399	ArgumentList	dt
>56400	Argument	dt
>56401	Identifier	dt
>56402	Callee	waterLevel . update
>56403	MemberAccess	waterLevel . update
>56404	Identifier	update
>56405	Identifier	waterLevel
>56406	Condition	 
>56407	UnaryOp	! isPaused ( )
>56408	CallExpression	isPaused ( )
>56409	ArgumentList	 
>56410	Callee	isPaused
>56411	Identifier	isPaused
>56412	UnaryOperator	!
>56413	Condition	 
>56414	UnaryOp	! isSceneEditorActive ( )
>56415	CallExpression	isSceneEditorActive ( )
>56416	ArgumentList	 
>56417	Callee	isSceneEditorActive
>56418	Identifier	isSceneEditorActive
>56419	UnaryOperator	!
>56420	IfStatement	if ( ! avatar -> entityToActivate && ! avatar -> pathToActivate )
>56421	CompoundStatement	 
>56422	ExpressionStatement	 
>56423	CallExpression	dsq -> cursorBlinker -> alpha . interpolateTo ( 0 , 0.1 )
>56424	ArgumentList	0
>56425	Argument	0.1
>56426	PrimaryExpression	0.1
>56427	Argument	0
>56428	PrimaryExpression	0
>56429	Callee	dsq -> cursorBlinker -> alpha . interpolateTo
>56430	MemberAccess	dsq -> cursorBlinker -> alpha . interpolateTo
>56431	Identifier	interpolateTo
>56432	PtrMemberAccess	dsq -> cursorBlinker -> alpha
>56433	Identifier	alpha
>56434	PtrMemberAccess	dsq -> cursorBlinker
>56435	Identifier	cursorBlinker
>56436	Identifier	dsq
>56437	ExpressionStatement	 
>56438	CallExpression	dsq -> cursorGlow -> alpha . interpolateTo ( 0 , 0.2 )
>56439	ArgumentList	0
>56440	Argument	0.2
>56441	PrimaryExpression	0.2
>56442	Argument	0
>56443	PrimaryExpression	0
>56444	Callee	dsq -> cursorGlow -> alpha . interpolateTo
>56445	MemberAccess	dsq -> cursorGlow -> alpha . interpolateTo
>56446	Identifier	interpolateTo
>56447	PtrMemberAccess	dsq -> cursorGlow -> alpha
>56448	Identifier	alpha
>56449	PtrMemberAccess	dsq -> cursorGlow
>56450	Identifier	cursorGlow
>56451	Identifier	dsq
>56452	Condition	 
>56453	AndExpression	! avatar -> entityToActivate && ! avatar -> pathToActivate
>56454	UnaryOp	! avatar -> pathToActivate
>56455	PtrMemberAccess	avatar -> pathToActivate
>56456	Identifier	pathToActivate
>56457	Identifier	avatar
>56458	UnaryOperator	!
>56459	UnaryOp	! avatar -> entityToActivate
>56460	PtrMemberAccess	avatar -> entityToActivate
>56461	Identifier	entityToActivate
>56462	Identifier	avatar
>56463	UnaryOperator	!
>56464	IfStatement	if ( ! activation )
>56465	CompoundStatement	 
>56466	ExpressionStatement	 
>56467	AssignmentExpr	avatar -> pathToActivate = 0
>56468	PrimaryExpression	0
>56469	PtrMemberAccess	avatar -> pathToActivate
>56470	Identifier	pathToActivate
>56471	Identifier	avatar
>56472	ExpressionStatement	 
>56473	AssignmentExpr	avatar -> entityToActivate = 0
>56474	PrimaryExpression	0
>56475	PtrMemberAccess	avatar -> entityToActivate
>56476	Identifier	entityToActivate
>56477	Identifier	avatar
>56478	Condition	 
>56479	UnaryOp	! activation
>56480	Identifier	activation
>56481	UnaryOperator	!
>56482	IfStatement	if ( avatar && core -> getNestedMains ( ) == 1 && ! isPaused ( ) && ! avatar -> isSinging ( ) && activation )
>56483	CompoundStatement	 
>56484	IfStatement	if ( dsq -> game && dsq -> game -> avatar -> canActivateStuff ( ) )
>56485	CompoundStatement	 
>56486	IfStatement	if ( p && p -> cursorActivation )
>56487	CompoundStatement	 
>56488	IfStatement	if ( p -> isCoordinateInside ( dsq -> game -> avatar -> position ) || diff . getSquaredLength2D ( ) < sqr ( p -> \
>56489	CompoundStatement	 
>56490	CompoundStatement	 
>56491	IfStatement	if ( ! hadThingToActivate )
>56492	CompoundStatement	 
>56493	ExpressionStatement	 
>56494	CallExpression	dsq -> cursorGlow -> scale . interpolateTo ( bigGlow , bigGlowTime , 1 , - 1 , 1 )
>56495	ArgumentList	bigGlow
>56496	Argument	1
>56497	PrimaryExpression	1
>56498	Argument	- 1
>56499	UnaryOp	- 1
>56500	PrimaryExpression	1
>56501	UnaryOperator	-
>56502	Argument	1
>56503	PrimaryExpression	1
>56504	Argument	bigGlowTime
>56505	Identifier	bigGlowTime
>56506	Argument	bigGlow
>56507	Identifier	bigGlow
>56508	Callee	dsq -> cursorGlow -> scale . interpolateTo
>56509	MemberAccess	dsq -> cursorGlow -> scale . interpolateTo
>56510	Identifier	interpolateTo
>56511	PtrMemberAccess	dsq -> cursorGlow -> scale
>56512	Identifier	scale
>56513	PtrMemberAccess	dsq -> cursorGlow
>56514	Identifier	cursorGlow
>56515	Identifier	dsq
>56516	ExpressionStatement	 
>56517	AssignmentExpr	dsq -> cursorGlow -> scale = Vector ( 1 , 1 )
>56518	CallExpression	Vector ( 1 , 1 )
>56519	ArgumentList	1
>56520	Argument	1
>56521	PrimaryExpression	1
>56522	Argument	1
>56523	PrimaryExpression	1
>56524	Callee	Vector
>56525	Identifier	Vector
>56526	PtrMemberAccess	dsq -> cursorGlow -> scale
>56527	Identifier	scale
>56528	PtrMemberAccess	dsq -> cursorGlow
>56529	Identifier	cursorGlow
>56530	Identifier	dsq
>56531	Condition	 
>56532	UnaryOp	! hadThingToActivate
>56533	Identifier	hadThingToActivate
>56534	UnaryOperator	!
>56535	ExpressionStatement	 
>56536	CallExpression	dsq -> cursorBlinker -> alpha . interpolateTo ( 1 , 0.2 )
>56537	ArgumentList	1
>56538	Argument	0.2
>56539	PrimaryExpression	0.2
>56540	Argument	1
>56541	PrimaryExpression	1
>56542	Callee	dsq -> cursorBlinker -> alpha . interpolateTo
>56543	MemberAccess	dsq -> cursorBlinker -> alpha . interpolateTo
>56544	Identifier	interpolateTo
>56545	PtrMemberAccess	dsq -> cursorBlinker -> alpha
>56546	Identifier	alpha
>56547	PtrMemberAccess	dsq -> cursorBlinker
>56548	Identifier	cursorBlinker
>56549	Identifier	dsq
>56550	ExpressionStatement	 
>56551	CallExpression	dsq -> cursorGlow -> alpha . interpolateTo ( 1 , 0.2 )
>56552	ArgumentList	1
>56553	Argument	0.2
>56554	PrimaryExpression	0.2
>56555	Argument	1
>56556	PrimaryExpression	1
>56557	Callee	dsq -> cursorGlow -> alpha . interpolateTo
>56558	MemberAccess	dsq -> cursorGlow -> alpha . interpolateTo
>56559	Identifier	interpolateTo
>56560	PtrMemberAccess	dsq -> cursorGlow -> alpha
>56561	Identifier	alpha
>56562	PtrMemberAccess	dsq -> cursorGlow
>56563	Identifier	cursorGlow
>56564	Identifier	dsq
>56565	ExpressionStatement	 
>56566	AssignmentExpr	avatar -> pathToActivate = p
>56567	Identifier	p
>56568	PtrMemberAccess	avatar -> pathToActivate
>56569	Identifier	pathToActivate
>56570	Identifier	avatar
>56571	Condition	 
>56572	OrExpression	p -> isCoordinateInside ( dsq -> game -> avatar -> position ) || diff . getSquaredLength2D ( ) < sqr ( \
>56573	RelationalExpression	diff . getSquaredLength2D ( ) < sqr ( p -> activationRange )
>56574	CallExpression	sqr ( p -> activationRange )
>56575	ArgumentList	p -> activationRange
>56576	Argument	p -> activationRange
>56577	PtrMemberAccess	p -> activationRange
>56578	Identifier	activationRange
>56579	Identifier	p
>56580	Callee	sqr
>56581	Identifier	sqr
>56582	CallExpression	diff . getSquaredLength2D ( )
>56583	ArgumentList	 
>56584	Callee	diff . getSquaredLength2D
>56585	MemberAccess	diff . getSquaredLength2D
>56586	Identifier	getSquaredLength2D
>56587	Identifier	diff
>56588	CallExpression	p -> isCoordinateInside ( dsq -> game -> avatar -> position )
>56589	ArgumentList	dsq -> game -> avatar -> position
>56590	Argument	dsq -> game -> avatar -> position
>56591	PtrMemberAccess	dsq -> game -> avatar -> position
>56592	Identifier	position
>56593	PtrMemberAccess	dsq -> game -> avatar
>56594	Identifier	avatar
>56595	PtrMemberAccess	dsq -> game
>56596	Identifier	game
>56597	Identifier	dsq
>56598	Callee	p -> isCoordinateInside
>56599	PtrMemberAccess	p -> isCoordinateInside
>56600	Identifier	isCoordinateInside
>56601	Identifier	p
>56602	IdentifierDeclStatement	 
>56603	IdentifierDecl	diff = p -> nodes [ 0 ] . position - dsq -> game -> avatar -> position
>56604	AssignmentExpr	diff = p -> nodes [ 0 ] . position - dsq -> game -> avatar -> position
>56605	AdditiveExpression	p -> nodes [ 0 ] . position - dsq -> game -> avatar -> position
>56606	PtrMemberAccess	dsq -> game -> avatar -> position
>56607	Identifier	position
>56608	PtrMemberAccess	dsq -> game -> avatar
>56609	Identifier	avatar
>56610	PtrMemberAccess	dsq -> game
>56611	Identifier	game
>56612	Identifier	dsq
>56613	MemberAccess	p -> nodes [ 0 ] . position
>56614	Identifier	position
>56615	ArrayIndexing	p -> nodes [ 0 ]
>56616	PrimaryExpression	0
>56617	PtrMemberAccess	p -> nodes
>56618	Identifier	nodes
>56619	Identifier	p
>56620	Identifier	diff
>56621	Identifier	diff
>56622	IdentifierDeclType	Vector
>56623	Condition	 
>56624	AndExpression	p && p -> cursorActivation
>56625	PtrMemberAccess	p -> cursorActivation
>56626	Identifier	cursorActivation
>56627	Identifier	p
>56628	Identifier	p
>56629	IdentifierDeclStatement	 
>56630	IdentifierDecl	* p = dsq -> game -> getScriptedPathAtCursor ( true )
>56631	AssignmentExpr	* p = dsq -> game -> getScriptedPathAtCursor ( true )
>56632	CallExpression	dsq -> game -> getScriptedPathAtCursor ( true )
>56633	ArgumentList	true
>56634	Argument	true
>56635	Identifier	true
>56636	Callee	dsq -> game -> getScriptedPathAtCursor
>56637	PtrMemberAccess	dsq -> game -> getScriptedPathAtCursor
>56638	Identifier	getScriptedPathAtCursor
>56639	PtrMemberAccess	dsq -> game
>56640	Identifier	game
>56641	Identifier	dsq
>56642	Identifier	p
>56643	Identifier	p
>56644	IdentifierDeclType	Path *
>56645	Condition	 
>56646	AndExpression	dsq -> game && dsq -> game -> avatar -> canActivateStuff ( )
>56647	CallExpression	dsq -> game -> avatar -> canActivateStuff ( )
>56648	ArgumentList	 
>56649	Callee	dsq -> game -> avatar -> canActivateStuff
>56650	PtrMemberAccess	dsq -> game -> avatar -> canActivateStuff
>56651	Identifier	canActivateStuff
>56652	PtrMemberAccess	dsq -> game -> avatar
>56653	Identifier	avatar
>56654	PtrMemberAccess	dsq -> game
>56655	Identifier	game
>56656	Identifier	dsq
>56657	PtrMemberAccess	dsq -> game
>56658	Identifier	game
>56659	Identifier	dsq
>56660	ExpressionStatement	 
>56661	AssignmentExpr	avatar -> pathToActivate = 0
>56662	PrimaryExpression	0
>56663	PtrMemberAccess	avatar -> pathToActivate
>56664	Identifier	pathToActivate
>56665	Identifier	avatar
>56666	IfStatement	if ( avatar -> canActivateStuff ( ) )
>56667	CompoundStatement	 
>56668	CompoundStatement	 
>56669	IfStatement	if ( sqrLen < sqr ( e -> activationRadius ) && ( avatar -> position - e -> position ) . getSquaredLength2D ( ) < \
>56670	CompoundStatement	 
>56671	BreakStatement	 
>56672	CompoundStatement	 
>56673	IfStatement	if ( ! hadThingToActivate )
>56674	CompoundStatement	 
>56675	ExpressionStatement	 
>56676	CallExpression	dsq -> cursorGlow -> scale . interpolateTo ( bigGlow , bigGlowTime , 1 , - 1 , 1 )
>56677	ArgumentList	bigGlow
>56678	Argument	1
>56679	PrimaryExpression	1
>56680	Argument	- 1
>56681	UnaryOp	- 1
>56682	PrimaryExpression	1
>56683	UnaryOperator	-
>56684	Argument	1
>56685	PrimaryExpression	1
>56686	Argument	bigGlowTime
>56687	Identifier	bigGlowTime
>56688	Argument	bigGlow
>56689	Identifier	bigGlow
>56690	Callee	dsq -> cursorGlow -> scale . interpolateTo
>56691	MemberAccess	dsq -> cursorGlow -> scale . interpolateTo
>56692	Identifier	interpolateTo
>56693	PtrMemberAccess	dsq -> cursorGlow -> scale
>56694	Identifier	scale
>56695	PtrMemberAccess	dsq -> cursorGlow
>56696	Identifier	cursorGlow
>56697	Identifier	dsq
>56698	ExpressionStatement	 
>56699	AssignmentExpr	dsq -> cursorGlow -> scale = Vector ( 1 , 1 )
>56700	CallExpression	Vector ( 1 , 1 )
>56701	ArgumentList	1
>56702	Argument	1
>56703	PrimaryExpression	1
>56704	Argument	1
>56705	PrimaryExpression	1
>56706	Callee	Vector
>56707	Identifier	Vector
>56708	PtrMemberAccess	dsq -> cursorGlow -> scale
>56709	Identifier	scale
>56710	PtrMemberAccess	dsq -> cursorGlow
>56711	Identifier	cursorGlow
>56712	Identifier	dsq
>56713	Condition	 
>56714	UnaryOp	! hadThingToActivate
>56715	Identifier	hadThingToActivate
>56716	UnaryOperator	!
>56717	ExpressionStatement	 
>56718	CallExpression	dsq -> cursorBlinker -> alpha . interpolateTo ( 1.0 , 0.1 )
>56719	ArgumentList	1.0
>56720	Argument	0.1
>56721	PrimaryExpression	0.1
>56722	Argument	1.0
>56723	PrimaryExpression	1.0
>56724	Callee	dsq -> cursorBlinker -> alpha . interpolateTo
>56725	MemberAccess	dsq -> cursorBlinker -> alpha . interpolateTo
>56726	Identifier	interpolateTo
>56727	PtrMemberAccess	dsq -> cursorBlinker -> alpha
>56728	Identifier	alpha
>56729	PtrMemberAccess	dsq -> cursorBlinker
>56730	Identifier	cursorBlinker
>56731	Identifier	dsq
>56732	ExpressionStatement	 
>56733	CallExpression	dsq -> cursorGlow -> alpha . interpolateTo ( 1 , 0.2 )
>56734	ArgumentList	1
>56735	Argument	0.2
>56736	PrimaryExpression	0.2
>56737	Argument	1
>56738	PrimaryExpression	1
>56739	Callee	dsq -> cursorGlow -> alpha . interpolateTo
>56740	MemberAccess	dsq -> cursorGlow -> alpha . interpolateTo
>56741	Identifier	interpolateTo
>56742	PtrMemberAccess	dsq -> cursorGlow -> alpha
>56743	Identifier	alpha
>56744	PtrMemberAccess	dsq -> cursorGlow
>56745	Identifier	cursorGlow
>56746	Identifier	dsq
>56747	ExpressionStatement	 
>56748	AssignmentExpr	avatar -> entityToActivate = e
>56749	Identifier	e
>56750	PtrMemberAccess	avatar -> entityToActivate
>56751	Identifier	entityToActivate
>56752	Identifier	avatar
>56753	Condition	 
>56754	AndExpression	sqrLen < sqr ( e -> activationRadius ) && ( avatar -> position - e -> position ) . getSquaredLength2D ( ) < \
>56755	AndExpression	( avatar -> position - e -> position ) . getSquaredLength2D ( ) < sqr ( e -> activationRange ) && e \
>56756	AndExpression	e -> activationType == Entity 
>56757	UnaryOp	! e -> position . isInterpolating ( )
>56758	CallExpression	e -> position . isInterpolating ( )
>56759	ArgumentList	 
>56760	Callee	e -> position . isInterpolating
>56761	MemberAccess	e -> position . isInterpolating
>56762	Identifier	isInterpolating
>56763	PtrMemberAccess	e -> position
>56764	Identifier	position
>56765	Identifier	e
>56766	UnaryOperator	!
>56767	EqualityExpression	e -> activationType == Entity 
>56768	Identifier	Entity 
>56769	PtrMemberAccess	e -> activationType
>56770	Identifier	activationType
>56771	Identifier	e
>56772	RelationalExpression	( avatar -> position - e -> position ) . getSquaredLength2D ( ) < sqr ( e -> activationRange )
>56773	CallExpression	sqr ( e -> activationRange )
>56774	ArgumentList	e -> activationRange
>56775	Argument	e -> activationRange
>56776	PtrMemberAccess	e -> activationRange
>56777	Identifier	activationRange
>56778	Identifier	e
>56779	Callee	sqr
>56780	Identifier	sqr
>56781	CallExpression	( avatar -> position - e -> position ) . getSquaredLength2D ( )
>56782	ArgumentList	 
>56783	Callee	( avatar -> position - e -> position ) . getSquaredLength2D
>56784	MemberAccess	( avatar -> position - e -> position ) . getSquaredLength2D
>56785	Identifier	getSquaredLength2D
>56786	AdditiveExpression	avatar -> position - e -> position
>56787	PtrMemberAccess	e -> position
>56788	Identifier	position
>56789	Identifier	e
>56790	PtrMemberAccess	avatar -> position
>56791	Identifier	position
>56792	Identifier	avatar
>56793	RelationalExpression	sqrLen < sqr ( e -> activationRadius )
>56794	CallExpression	sqr ( e -> activationRadius )
>56795	ArgumentList	e -> activationRadius
>56796	Argument	e -> activationRadius
>56797	PtrMemberAccess	e -> activationRadius
>56798	Identifier	activationRadius
>56799	Identifier	e
>56800	Callee	sqr
>56801	Identifier	sqr
>56802	Identifier	sqrLen
>56803	IdentifierDeclStatement	 
>56804	IdentifierDecl	sqrLen = ( dsq -> getGameCursorPosition ( ) - e -> position ) . getSquaredLength2D ( )
>56805	AssignmentExpr	sqrLen = ( dsq -> getGameCursorPosition ( ) - e -> position ) . getSquaredLength2D ( )
>56806	CallExpression	( dsq -> getGameCursorPosition ( ) - e -> position ) . getSquaredLength2D ( )
>56807	ArgumentList	 
>56808	Callee	( dsq -> getGameCursorPosition ( ) - e -> position ) . getSquaredLength2D
>56809	MemberAccess	( dsq -> getGameCursorPosition ( ) - e -> position ) . getSquaredLength2D
>56810	Identifier	getSquaredLength2D
>56811	AdditiveExpression	dsq -> getGameCursorPosition ( ) - e -> position
>56812	PtrMemberAccess	e -> position
>56813	Identifier	position
>56814	Identifier	e
>56815	CallExpression	dsq -> getGameCursorPosition ( )
>56816	ArgumentList	 
>56817	Callee	dsq -> getGameCursorPosition
>56818	PtrMemberAccess	dsq -> getGameCursorPosition
>56819	Identifier	getGameCursorPosition
>56820	Identifier	dsq
>56821	Identifier	sqrLen
>56822	Identifier	sqrLen
>56823	IdentifierDeclType	float
>56824	IdentifierDeclStatement	 
>56825	IdentifierDecl	* e = * i
>56826	AssignmentExpr	* e = * i
>56827	UnaryOp	* i
>56828	Identifier	i
>56829	UnaryOperator	*
>56830	Identifier	e
>56831	Identifier	e
>56832	IdentifierDeclType	Entity *
>56833	Statement	 
>56834	Statement	 
>56835	Statement	 
>56836	Statement	 
>56837	Condition	 
>56838	CallExpression	avatar -> canActivateStuff ( )
>56839	ArgumentList	 
>56840	Callee	avatar -> canActivateStuff
>56841	PtrMemberAccess	avatar -> canActivateStuff
>56842	Identifier	canActivateStuff
>56843	Identifier	avatar
>56844	ExpressionStatement	 
>56845	AssignmentExpr	avatar -> entityToActivate = 0
>56846	PrimaryExpression	0
>56847	PtrMemberAccess	avatar -> entityToActivate
>56848	Identifier	entityToActivate
>56849	Identifier	avatar
>56850	IdentifierDeclStatement	 
>56851	IdentifierDecl	hadThingToActivate = ( avatar -> entityToActivate != 0 || avatar -> pathToActivate != 0 )
>56852	AssignmentExpr	hadThingToActivate = ( avatar -> entityToActivate != 0 || avatar -> pathToActivate != 0 )
>56853	OrExpression	avatar -> entityToActivate != 0 || avatar -> pathToActivate != 0
>56854	EqualityExpression	avatar -> pathToActivate != 0
>56855	PrimaryExpression	0
>56856	PtrMemberAccess	avatar -> pathToActivate
>56857	Identifier	pathToActivate
>56858	Identifier	avatar
>56859	EqualityExpression	avatar -> entityToActivate != 0
>56860	PrimaryExpression	0
>56861	PtrMemberAccess	avatar -> entityToActivate
>56862	Identifier	entityToActivate
>56863	Identifier	avatar
>56864	Identifier	hadThingToActivate
>56865	Identifier	hadThingToActivate
>56866	IdentifierDeclType	bool
>56867	IdentifierDeclStatement	 
>56868	IdentifierDecl	bigGlowTime = 0.4
>56869	AssignmentExpr	bigGlowTime = 0.4
>56870	PrimaryExpression	0.4
>56871	Identifier	bigGlowTime
>56872	Identifier	bigGlowTime
>56873	IdentifierDeclType	float
>56874	IdentifierDeclStatement	 
>56875	IdentifierDecl	bigGlow ( 3 , 3 )
>56876	Expression	3 , 3
>56877	PrimaryExpression	3
>56878	PrimaryExpression	3
>56879	Identifier	bigGlow
>56880	IdentifierDeclType	Vector
>56881	ExpressionStatement	 
>56882	CallExpression	dsq -> continuity . refreshAvatarData ( avatar )
>56883	ArgumentList	avatar
>56884	Argument	avatar
>56885	Identifier	avatar
>56886	Callee	dsq -> continuity . refreshAvatarData
>56887	MemberAccess	dsq -> continuity . refreshAvatarData
>56888	Identifier	refreshAvatarData
>56889	PtrMemberAccess	dsq -> continuity
>56890	Identifier	continuity
>56891	Identifier	dsq
>56892	Condition	 
>56893	AndExpression	avatar && core -> getNestedMains ( ) == 1 && ! isPaused ( ) && ! avatar -> isSinging ( ) && activation
>56894	AndExpression	core -> getNestedMains ( ) == 1 && ! isPaused ( ) && ! avatar -> isSinging ( ) && activation
>56895	AndExpression	! isPaused ( ) && ! avatar -> isSinging ( ) && activation
>56896	AndExpression	! avatar -> isSinging ( ) && activation
>56897	Identifier	activation
>56898	UnaryOp	! avatar -> isSinging ( )
>56899	CallExpression	avatar -> isSinging ( )
>56900	ArgumentList	 
>56901	Callee	avatar -> isSinging
>56902	PtrMemberAccess	avatar -> isSinging
>56903	Identifier	isSinging
>56904	Identifier	avatar
>56905	UnaryOperator	!
>56906	UnaryOp	! isPaused ( )
>56907	CallExpression	isPaused ( )
>56908	ArgumentList	 
>56909	Callee	isPaused
>56910	Identifier	isPaused
>56911	UnaryOperator	!
>56912	EqualityExpression	core -> getNestedMains ( ) == 1
>56913	PrimaryExpression	1
>56914	CallExpression	core -> getNestedMains ( )
>56915	ArgumentList	 
>56916	Callee	core -> getNestedMains
>56917	PtrMemberAccess	core -> getNestedMains
>56918	Identifier	getNestedMains
>56919	Identifier	core
>56920	Identifier	avatar
>56921	IfStatement	if ( avatar && avatar -> isSinging ( ) && avatar -> songInterfaceTimer > 0.5f )
>56922	CompoundStatement	 
>56923	ExpressionStatement	 
>56924	AssignmentExpr	avatar -> pathToActivate = 0
>56925	PrimaryExpression	0
>56926	PtrMemberAccess	avatar -> pathToActivate
>56927	Identifier	pathToActivate
>56928	Identifier	avatar
>56929	ExpressionStatement	 
>56930	AssignmentExpr	avatar -> entityToActivate = 0
>56931	PrimaryExpression	0
>56932	PtrMemberAccess	avatar -> entityToActivate
>56933	Identifier	entityToActivate
>56934	Identifier	avatar
>56935	Condition	 
>56936	AndExpression	avatar && avatar -> isSinging ( ) && avatar -> songInterfaceTimer > 0.5f
>56937	AndExpression	avatar -> isSinging ( ) && avatar -> songInterfaceTimer > 0.5f
>56938	RelationalExpression	avatar -> songInterfaceTimer > 0.5f
>56939	PrimaryExpression	0.5f
>56940	PtrMemberAccess	avatar -> songInterfaceTimer
>56941	Identifier	songInterfaceTimer
>56942	Identifier	avatar
>56943	CallExpression	avatar -> isSinging ( )
>56944	ArgumentList	 
>56945	Callee	avatar -> isSinging
>56946	PtrMemberAccess	avatar -> isSinging
>56947	Identifier	isSinging
>56948	Identifier	avatar
>56949	Identifier	avatar
>56950	IfStatement	if ( avatar && ( avatar -> isEntityDead ( ) || avatar -> health <= 0 ) && core -> getNestedMains ( ) == 1 && ! \
>56951	CompoundStatement	 
>56952	IfStatement	if ( deathTimer > 0 )
>56953	CompoundStatement	 
>56954	IfStatement	if ( deathTimer <= 0 )
>56955	CompoundStatement	 
>56956	ExpressionStatement	 
>56957	CallExpression	core -> enqueueJumpState ( \"GameOver\" )
>56958	ArgumentList	\"GameOver\"
>56959	Argument	\"GameOver\"
>56960	PrimaryExpression	\"GameOver\"
>56961	Callee	core -> enqueueJumpState
>56962	PtrMemberAccess	core -> enqueueJumpState
>56963	Identifier	enqueueJumpState
>56964	Identifier	core
>56965	Condition	 
>56966	RelationalExpression	deathTimer <= 0
>56967	PrimaryExpression	0
>56968	Identifier	deathTimer
>56969	ExpressionStatement	 
>56970	AssignmentExpr	deathTimer -= dt
>56971	Identifier	dt
>56972	Identifier	deathTimer
>56973	Condition	 
>56974	RelationalExpression	deathTimer > 0
>56975	PrimaryExpression	0
>56976	Identifier	deathTimer
>56977	ExpressionStatement	 
>56978	CallExpression	dsq -> stopVoice ( )
>56979	ArgumentList	 
>56980	Callee	dsq -> stopVoice
>56981	PtrMemberAccess	dsq -> stopVoice
>56982	Identifier	stopVoice
>56983	Identifier	dsq
>56984	Condition	 
>56985	AndExpression	avatar && ( avatar -> isEntityDead ( ) || avatar -> health <= 0 ) && core -> getNestedMains ( ) == 1 && ! \
>56986	AndExpression	( avatar -> isEntityDead ( ) || avatar -> health <= 0 ) && core -> getNestedMains ( ) == 1 && ! isPaused ( )
>56987	AndExpression	core -> getNestedMains ( ) == 1 && ! isPaused ( )
>56988	UnaryOp	! isPaused ( )
>56989	CallExpression	isPaused ( )
>56990	ArgumentList	 
>56991	Callee	isPaused
>56992	Identifier	isPaused
>56993	UnaryOperator	!
>56994	EqualityExpression	core -> getNestedMains ( ) == 1
>56995	PrimaryExpression	1
>56996	CallExpression	core -> getNestedMains ( )
>56997	ArgumentList	 
>56998	Callee	core -> getNestedMains
>56999	PtrMemberAccess	core -> getNestedMains
>57000	Identifier	getNestedMains
>57001	Identifier	core
>57002	OrExpression	avatar -> isEntityDead ( ) || avatar -> health <= 0
>57003	RelationalExpression	avatar -> health <= 0
>57004	PrimaryExpression	0
>57005	PtrMemberAccess	avatar -> health
>57006	Identifier	health
>57007	Identifier	avatar
>57008	CallExpression	avatar -> isEntityDead ( )
>57009	ArgumentList	 
>57010	Callee	avatar -> isEntityDead
>57011	PtrMemberAccess	avatar -> isEntityDead
>57012	Identifier	isEntityDead
>57013	Identifier	avatar
>57014	Identifier	avatar
>57015	IfStatement	if ( ! isPaused ( ) )
>57016	CompoundStatement	 
>57017	WhileStatement	while ( halfTimer > 1.0f )
>57018	ExpressionStatement	 
>57019	AssignmentExpr	halfTimer -= 1.0f
>57020	PrimaryExpression	1.0f
>57021	Identifier	halfTimer
>57022	Condition	 
>57023	RelationalExpression	halfTimer > 1.0f
>57024	PrimaryExpression	1.0f
>57025	Identifier	halfTimer
>57026	ExpressionStatement	 
>57027	AssignmentExpr	halfTimer += dt * 0.5f
>57028	MultiplicativeExpression	dt * 0.5f
>57029	PrimaryExpression	0.5f
>57030	Identifier	dt
>57031	Identifier	halfTimer
>57032	WhileStatement	while ( timer > 1.0f )
>57033	ExpressionStatement	 
>57034	AssignmentExpr	timer -= 1.0f
>57035	PrimaryExpression	1.0f
>57036	Identifier	timer
>57037	Condition	 
>57038	RelationalExpression	timer > 1.0f
>57039	PrimaryExpression	1.0f
>57040	Identifier	timer
>57041	ExpressionStatement	 
>57042	AssignmentExpr	timer += dt
>57043	Identifier	dt
>57044	Identifier	timer
>57045	Condition	 
>57046	UnaryOp	! isPaused ( )
>57047	CallExpression	isPaused ( )
>57048	ArgumentList	 
>57049	Callee	isPaused
>57050	Identifier	isPaused
>57051	UnaryOperator	!
>57052	ExpressionStatement	 
>57053	CallExpression	dsq -> emote . update ( dt )
>57054	ArgumentList	dt
>57055	Argument	dt
>57056	Identifier	dt
>57057	Callee	dsq -> emote . update
>57058	MemberAccess	dsq -> emote . update
>57059	Identifier	update
>57060	PtrMemberAccess	dsq -> emote
>57061	Identifier	emote
>57062	Identifier	dsq
>57063	CompoundStatement	 
>57064	ExpressionStatement	 
>57065	CallExpression	sceneEditor . update ( dt )
>57066	ArgumentList	dt
>57067	Argument	dt
>57068	Identifier	dt
>57069	Callee	sceneEditor . update
>57070	MemberAccess	sceneEditor . update
>57071	Identifier	update
>57072	Identifier	sceneEditor
>57073	IfStatement	if ( avatar && grad && bg && bg2 )
>57074	CompoundStatement	 
>57075	Condition	 
>57076	AndExpression	avatar && grad && bg && bg2
>57077	AndExpression	grad && bg && bg2
>57078	AndExpression	bg && bg2
>57079	Identifier	bg2
>57080	Identifier	bg
>57081	Identifier	grad
>57082	Identifier	avatar
>57083	ExpressionStatement	 
>57084	CallExpression	updateInGameMenu ( dt )
>57085	ArgumentList	dt
>57086	Argument	dt
>57087	Identifier	dt
>57088	Callee	updateInGameMenu
>57089	Identifier	updateInGameMenu
>57090	IfStatement	if ( bg2 )
>57091	CompoundStatement	 
>57092	ExpressionStatement	 
>57093	CallExpression	setParallaxTextureCoordinates ( bg2 , 0.1 )
>57094	ArgumentList	bg2
>57095	Argument	0.1
>57096	PrimaryExpression	0.1
>57097	Argument	bg2
>57098	Identifier	bg2
>57099	Callee	setParallaxTextureCoordinates
>57100	Identifier	setParallaxTextureCoordinates
>57101	Condition	 
>57102	Identifier	bg2
>57103	IfStatement	if ( bg )
>57104	CompoundStatement	 
>57105	ExpressionStatement	 
>57106	CallExpression	setParallaxTextureCoordinates ( bg , 0.3 )
>57107	ArgumentList	bg
>57108	Argument	0.3
>57109	PrimaryExpression	0.3
>57110	Argument	bg
>57111	Identifier	bg
>57112	Callee	setParallaxTextureCoordinates
>57113	Identifier	setParallaxTextureCoordinates
>57114	Condition	 
>57115	Identifier	bg
>57116	ExpressionStatement	 
>57117	AssignmentExpr	dsq -> sceneColorOverlay -> color = sceneColor * sceneColor2 * sceneColor3
>57118	MultiplicativeExpression	sceneColor * sceneColor2 * sceneColor3
>57119	MultiplicativeExpression	sceneColor2 * sceneColor3
>57120	Identifier	sceneColor3
>57121	Identifier	sceneColor2
>57122	Identifier	sceneColor
>57123	PtrMemberAccess	dsq -> sceneColorOverlay -> color
>57124	Identifier	color
>57125	PtrMemberAccess	dsq -> sceneColorOverlay
>57126	Identifier	sceneColorOverlay
>57127	Identifier	dsq
>57128	ExpressionStatement	 
>57129	CallExpression	sceneColor3 . update ( dt )
>57130	ArgumentList	dt
>57131	Argument	dt
>57132	Identifier	dt
>57133	Callee	sceneColor3 . update
>57134	MemberAccess	sceneColor3 . update
>57135	Identifier	update
>57136	Identifier	sceneColor3
>57137	ExpressionStatement	 
>57138	CallExpression	sceneColor2 . update ( dt )
>57139	ArgumentList	dt
>57140	Argument	dt
>57141	Identifier	dt
>57142	Callee	sceneColor2 . update
>57143	MemberAccess	sceneColor2 . update
>57144	Identifier	update
>57145	Identifier	sceneColor2
>57146	ExpressionStatement	 
>57147	CallExpression	sceneColor . update ( dt )
>57148	ArgumentList	dt
>57149	Argument	dt
>57150	Identifier	dt
>57151	Callee	sceneColor . update
>57152	MemberAccess	sceneColor . update
>57153	Identifier	update
>57154	Identifier	sceneColor
>57155	ExpressionStatement	 
>57156	CallExpression	updateBgSfxLoop ( )
>57157	ArgumentList	 
>57158	Callee	updateBgSfxLoop
>57159	Identifier	updateBgSfxLoop
>57160	ExpressionStatement	 
>57161	CallExpression	updateCursor ( dt )
>57162	ArgumentList	dt
>57163	Argument	dt
>57164	Identifier	dt
>57165	Callee	updateCursor
>57166	Identifier	updateCursor
>57167	ExpressionStatement	 
>57168	CallExpression	updateCurrentVisuals ( dt )
>57169	ArgumentList	dt
>57170	Argument	dt
>57171	Identifier	dt
>57172	Callee	updateCurrentVisuals
>57173	Identifier	updateCurrentVisuals
>57174	ExpressionStatement	 
>57175	CallExpression	FlockEntity 
>57176	ArgumentList	 
>57177	Callee	FlockEntity 
>57178	Identifier	FlockEntity 
>57179	CompoundStatement	 
>57180	ExpressionStatement	 
>57181	CallExpression	( * j ) -> postUpdate ( dt )
>57182	ArgumentList	dt
>57183	Argument	dt
>57184	Identifier	dt
>57185	Callee	( * j ) -> postUpdate
>57186	PtrMemberAccess	( * j ) -> postUpdate
>57187	Identifier	postUpdate
>57188	UnaryOp	* j
>57189	Identifier	j
>57190	UnaryOperator	*
>57191	Statement	 
>57192	Statement	 
>57193	Statement	 
>57194	Statement	 
>57195	ForStatement	for ( i = 0 ; i < dsq -> game -> getNumPaths ( ) ; i ++ )
>57196	CompoundStatement	 
>57197	ExpressionStatement	 
>57198	CallExpression	dsq -> game -> getPath ( i ) -> update ( dt )
>57199	ArgumentList	dt
>57200	Argument	dt
>57201	Identifier	dt
>57202	Callee	dsq -> game -> getPath ( i ) -> update
>57203	PtrMemberAccess	dsq -> game -> getPath ( i ) -> update
>57204	Identifier	update
>57205	CallExpression	dsq -> game -> getPath ( i )
>57206	ArgumentList	i
>57207	Argument	i
>57208	Identifier	i
>57209	Callee	dsq -> game -> getPath
>57210	PtrMemberAccess	dsq -> game -> getPath
>57211	Identifier	getPath
>57212	PtrMemberAccess	dsq -> game
>57213	Identifier	game
>57214	Identifier	dsq
>57215	IncDecOp	 
>57216	IncDec	++
>57217	Identifier	i
>57218	Condition	 
>57219	RelationalExpression	i < dsq -> game -> getNumPaths ( )
>57220	CallExpression	dsq -> game -> getNumPaths ( )
>57221	ArgumentList	 
>57222	Callee	dsq -> game -> getNumPaths
>57223	PtrMemberAccess	dsq -> game -> getNumPaths
>57224	Identifier	getNumPaths
>57225	PtrMemberAccess	dsq -> game
>57226	Identifier	game
>57227	Identifier	dsq
>57228	Identifier	i
>57229	ForInit	 
>57230	AssignmentExpr	i = 0
>57231	PrimaryExpression	0
>57232	Identifier	i
>57233	IdentifierDeclStatement	 
>57234	IdentifierDecl	i = 0
>57235	AssignmentExpr	i = 0
>57236	PrimaryExpression	0
>57237	Identifier	i
>57238	Identifier	i
>57239	IdentifierDeclType	int
>57240	ForStatement	for ( ElementUpdateList 
>57241	CompoundStatement	 
>57242	ExpressionStatement	 
>57243	CallExpression	( * e ) -> update ( dt )
>57244	ArgumentList	dt
>57245	Argument	dt
>57246	Identifier	dt
>57247	Callee	( * e ) -> update
>57248	PtrMemberAccess	( * e ) -> update
>57249	Identifier	update
>57250	UnaryOp	* e
>57251	Identifier	e
>57252	UnaryOperator	*
>57253	IncDecOp	 
>57254	IncDec	++
>57255	Identifier	e
>57256	Condition	 
>57257	EqualityExpression	e != elementUpdateList . end ( )
>57258	CallExpression	elementUpdateList . end ( )
>57259	ArgumentList	 
>57260	Callee	elementUpdateList . end
>57261	MemberAccess	elementUpdateList . end
>57262	Identifier	end
>57263	Identifier	elementUpdateList
>57264	Identifier	e
>57265	ForInit	 
>57266	IdentifierDeclStatement	ElementUpdateList 
>57267	IdentifierDecl	e = elementUpdateList . begin ( )
>57268	AssignmentExpr	e = elementUpdateList . begin ( )
>57269	CallExpression	elementUpdateList . begin ( )
>57270	ArgumentList	 
>57271	Callee	elementUpdateList . begin
>57272	MemberAccess	elementUpdateList . begin
>57273	Identifier	begin
>57274	Identifier	elementUpdateList
>57275	Identifier	e
>57276	Identifier	e
>57277	IdentifierDeclType	ElementUpdateList 
>57278	ExpressionStatement	 
>57279	CallExpression	StateObject 
>57280	ArgumentList	dt
>57281	Argument	dt
>57282	Identifier	dt
>57283	Callee	StateObject 
>57284	Identifier	StateObject 
>57285	ExpressionStatement	 
>57286	CallExpression	dsq -> continuity . update ( dt )
>57287	ArgumentList	dt
>57288	Argument	dt
>57289	Identifier	dt
>57290	Callee	dsq -> continuity . update
>57291	MemberAccess	dsq -> continuity . update
>57292	Identifier	update
>57293	PtrMemberAccess	dsq -> continuity
>57294	Identifier	continuity
>57295	Identifier	dsq
>57296	IfStatement	if ( controlHintTimer > 0 )
>57297	CompoundStatement	 
>57298	IfStatement	if ( controlHintTimer < 0 )
>57299	CompoundStatement	 
>57300	ExpressionStatement	 
>57301	CallExpression	clearControlHint ( )
>57302	ArgumentList	 
>57303	Callee	clearControlHint
>57304	Identifier	clearControlHint
>57305	ExpressionStatement	 
>57306	AssignmentExpr	controlHint_ignoreClear = false
>57307	Identifier	false
>57308	Identifier	controlHint_ignoreClear
>57309	Condition	 
>57310	RelationalExpression	controlHintTimer < 0
>57311	PrimaryExpression	0
>57312	Identifier	controlHintTimer
>57313	ExpressionStatement	 
>57314	AssignmentExpr	controlHintTimer -= dt
>57315	Identifier	dt
>57316	Identifier	controlHintTimer
>57317	Condition	 
>57318	RelationalExpression	controlHintTimer > 0
>57319	PrimaryExpression	0
>57320	Identifier	controlHintTimer
>57321	ExpressionStatement	 
>57322	CallExpression	updateParticlePause ( )
>57323	ArgumentList	 
>57324	Callee	updateParticlePause
>57325	Identifier	updateParticlePause
>57326	IfStatement	if ( avatar )
>57327	CompoundStatement	 
>57328	ExpressionStatement	 
>57329	CallExpression	particleManager -> setSuckPosition ( 1 , avatar -> position + avatar -> vel + avatar -> vel2 )
>57330	ArgumentList	1
>57331	Argument	avatar -> position + avatar -> vel + avatar -> vel2
>57332	AdditiveExpression	avatar -> position + avatar -> vel + avatar -> vel2
>57333	AdditiveExpression	avatar -> vel + avatar -> vel2
>57334	PtrMemberAccess	avatar -> vel2
>57335	Identifier	vel2
>57336	Identifier	avatar
>57337	PtrMemberAccess	avatar -> vel
>57338	Identifier	vel
>57339	Identifier	avatar
>57340	PtrMemberAccess	avatar -> position
>57341	Identifier	position
>57342	Identifier	avatar
>57343	Argument	1
>57344	PrimaryExpression	1
>57345	Callee	particleManager -> setSuckPosition
>57346	PtrMemberAccess	particleManager -> setSuckPosition
>57347	Identifier	setSuckPosition
>57348	Identifier	particleManager
>57349	ExpressionStatement	 
>57350	CallExpression	particleManager -> setSuckPosition ( 0 , avatar -> position )
>57351	ArgumentList	0
>57352	Argument	avatar -> position
>57353	PtrMemberAccess	avatar -> position
>57354	Identifier	position
>57355	Identifier	avatar
>57356	Argument	0
>57357	PrimaryExpression	0
>57358	Callee	particleManager -> setSuckPosition
>57359	PtrMemberAccess	particleManager -> setSuckPosition
>57360	Identifier	setSuckPosition
>57361	Identifier	particleManager
>57362	IfStatement	if ( avatar -> isRolling ( ) )
>57363	ElseStatement	else
>57364	IfStatement	if ( avatar -> isCharging ( ) )
>57365	ElseStatement	else
>57366	IfStatement	if ( avatar -> bursting )
>57367	ElseStatement	else
>57368	ExpressionStatement	 
>57369	CallExpression	particleManager -> addInfluence ( ParticleInfluence ( avatar -> position , avatar -> vel . getLength2D ( ) , 24 , \
>57370	ArgumentList	ParticleInfluence ( avatar -> position , avatar -> vel . getLength2D ( ) , 24 , false )
>57371	Argument	ParticleInfluence ( avatar -> position , avatar -> vel . getLength2D ( ) , 24 , false )
>57372	CallExpression	ParticleInfluence ( avatar -> position , avatar -> vel . getLength2D ( ) , 24 , false )
>57373	ArgumentList	avatar -> position
>57374	Argument	false
>57375	Identifier	false
>57376	Argument	24
>57377	PrimaryExpression	24
>57378	Argument	avatar -> vel . getLength2D ( )
>57379	CallExpression	avatar -> vel . getLength2D ( )
>57380	ArgumentList	 
>57381	Callee	avatar -> vel . getLength2D
>57382	MemberAccess	avatar -> vel . getLength2D
>57383	Identifier	getLength2D
>57384	PtrMemberAccess	avatar -> vel
>57385	Identifier	vel
>57386	Identifier	avatar
>57387	Argument	avatar -> position
>57388	PtrMemberAccess	avatar -> position
>57389	Identifier	position
>57390	Identifier	avatar
>57391	Callee	ParticleInfluence
>57392	Identifier	ParticleInfluence
>57393	Callee	particleManager -> addInfluence
>57394	PtrMemberAccess	particleManager -> addInfluence
>57395	Identifier	addInfluence
>57396	Identifier	particleManager
>57397	ExpressionStatement	 
>57398	CallExpression	particleManager -> addInfluence ( ParticleInfluence ( avatar -> position , 400 , 200 , true ) )
>57399	ArgumentList	ParticleInfluence ( avatar -> position , 400 , 200 , true )
>57400	Argument	ParticleInfluence ( avatar -> position , 400 , 200 , true )
>57401	CallExpression	ParticleInfluence ( avatar -> position , 400 , 200 , true )
>57402	ArgumentList	avatar -> position
>57403	Argument	true
>57404	Identifier	true
>57405	Argument	200
>57406	PrimaryExpression	200
>57407	Argument	400
>57408	PrimaryExpression	400
>57409	Argument	avatar -> position
>57410	PtrMemberAccess	avatar -> position
>57411	Identifier	position
>57412	Identifier	avatar
>57413	Callee	ParticleInfluence
>57414	Identifier	ParticleInfluence
>57415	Callee	particleManager -> addInfluence
>57416	PtrMemberAccess	particleManager -> addInfluence
>57417	Identifier	addInfluence
>57418	Identifier	particleManager
>57419	Condition	 
>57420	PtrMemberAccess	avatar -> bursting
>57421	Identifier	bursting
>57422	Identifier	avatar
>57423	ExpressionStatement	 
>57424	CallExpression	particleManager -> addInfluence ( ParticleInfluence ( avatar -> position , 100 , 600 , true ) )
>57425	ArgumentList	ParticleInfluence ( avatar -> position , 100 , 600 , true )
>57426	Argument	ParticleInfluence ( avatar -> position , 100 , 600 , true )
>57427	CallExpression	ParticleInfluence ( avatar -> position , 100 , 600 , true )
>57428	ArgumentList	avatar -> position
>57429	Argument	true
>57430	Identifier	true
>57431	Argument	600
>57432	PrimaryExpression	600
>57433	Argument	100
>57434	PrimaryExpression	100
>57435	Argument	avatar -> position
>57436	PtrMemberAccess	avatar -> position
>57437	Identifier	position
>57438	Identifier	avatar
>57439	Callee	ParticleInfluence
>57440	Identifier	ParticleInfluence
>57441	Callee	particleManager -> addInfluence
>57442	PtrMemberAccess	particleManager -> addInfluence
>57443	Identifier	addInfluence
>57444	Identifier	particleManager
>57445	Condition	 
>57446	CallExpression	avatar -> isCharging ( )
>57447	ArgumentList	 
>57448	Callee	avatar -> isCharging
>57449	PtrMemberAccess	avatar -> isCharging
>57450	Identifier	isCharging
>57451	Identifier	avatar
>57452	ExpressionStatement	 
>57453	CallExpression	particleManager -> addInfluence ( ParticleInfluence ( avatar -> position , 300 , 800 , true ) )
>57454	ArgumentList	ParticleInfluence ( avatar -> position , 300 , 800 , true )
>57455	Argument	ParticleInfluence ( avatar -> position , 300 , 800 , true )
>57456	CallExpression	ParticleInfluence ( avatar -> position , 300 , 800 , true )
>57457	ArgumentList	avatar -> position
>57458	Argument	true
>57459	Identifier	true
>57460	Argument	800
>57461	PrimaryExpression	800
>57462	Argument	300
>57463	PrimaryExpression	300
>57464	Argument	avatar -> position
>57465	PtrMemberAccess	avatar -> position
>57466	Identifier	position
>57467	Identifier	avatar
>57468	Callee	ParticleInfluence
>57469	Identifier	ParticleInfluence
>57470	Callee	particleManager -> addInfluence
>57471	PtrMemberAccess	particleManager -> addInfluence
>57472	Identifier	addInfluence
>57473	Identifier	particleManager
>57474	Condition	 
>57475	CallExpression	avatar -> isRolling ( )
>57476	ArgumentList	 
>57477	Callee	avatar -> isRolling
>57478	PtrMemberAccess	avatar -> isRolling
>57479	Identifier	isRolling
>57480	Identifier	avatar
>57481	Condition	 
>57482	Identifier	avatar
>57483	IfStatement	if ( cookDelay > 0 )
>57484	CompoundStatement	 
>57485	IfStatement	if ( cookDelay < 0 )
>57486	ExpressionStatement	 
>57487	AssignmentExpr	cookDelay = 0
>57488	PrimaryExpression	0
>57489	Identifier	cookDelay
>57490	Condition	 
>57491	RelationalExpression	cookDelay < 0
>57492	PrimaryExpression	0
>57493	Identifier	cookDelay
>57494	ExpressionStatement	 
>57495	AssignmentExpr	cookDelay -= dt
>57496	Identifier	dt
>57497	Identifier	cookDelay
>57498	Condition	 
>57499	RelationalExpression	cookDelay > 0
>57500	PrimaryExpression	0
>57501	Identifier	cookDelay
>57502	IfStatement	if ( ingOffYTimer > 0 )
>57503	CompoundStatement	 
>57504	IfStatement	if ( ingOffYTimer < 0 )
>57505	CompoundStatement	 
>57506	ExpressionStatement	 
>57507	AssignmentExpr	ingOffY = 0
>57508	PrimaryExpression	0
>57509	Identifier	ingOffY
>57510	ExpressionStatement	 
>57511	AssignmentExpr	ingOffYTimer = 0
>57512	PrimaryExpression	0
>57513	Identifier	ingOffYTimer
>57514	Condition	 
>57515	RelationalExpression	ingOffYTimer < 0
>57516	PrimaryExpression	0
>57517	Identifier	ingOffYTimer
>57518	ExpressionStatement	 
>57519	AssignmentExpr	ingOffYTimer -= dt
>57520	Identifier	dt
>57521	Identifier	ingOffYTimer
>57522	Condition	 
>57523	RelationalExpression	ingOffYTimer > 0
>57524	PrimaryExpression	0
>57525	Identifier	ingOffYTimer
>57526	IfStatement	if ( moveFoodSlotToFront )
>57527	CompoundStatement	 
>57528	ExpressionStatement	 
>57529	AssignmentExpr	moveFoodSlotToFront = 0
>57530	PrimaryExpression	0
>57531	Identifier	moveFoodSlotToFront
>57532	ExpressionStatement	 
>57533	CallExpression	moveFoodSlotToFront -> moveToFront ( )
>57534	ArgumentList	 
>57535	Callee	moveFoodSlotToFront -> moveToFront
>57536	PtrMemberAccess	moveFoodSlotToFront -> moveToFront
>57537	Identifier	moveToFront
>57538	Identifier	moveFoodSlotToFront
>57539	Condition	 
>57540	Identifier	moveFoodSlotToFront
>57541	IfStatement	if ( enqueuedPreviewRecipe )
>57542	CompoundStatement	 
>57543	ExpressionStatement	 
>57544	AssignmentExpr	enqueuedPreviewRecipe = 0
>57545	PrimaryExpression	0
>57546	Identifier	enqueuedPreviewRecipe
>57547	ExpressionStatement	 
>57548	CallExpression	updatePreviewRecipe ( )
>57549	ArgumentList	 
>57550	Callee	updatePreviewRecipe
>57551	Identifier	updatePreviewRecipe
>57552	Condition	 
>57553	Identifier	enqueuedPreviewRecipe
>57554	IfStatement	if ( inHelpScreen )
>57555	CompoundStatement	 
>57556	IfStatement	if ( isActing ( ACTION_SWIMUP ) )
>57557	CompoundStatement	 
>57558	IfStatement	if ( helpText -> offset . y > 0 )
>57559	CompoundStatement	 
>57560	ExpressionStatement	 
>57561	AssignmentExpr	helpText -> offset . y = 0
>57562	PrimaryExpression	0
>57563	MemberAccess	helpText -> offset . y
>57564	Identifier	y
>57565	PtrMemberAccess	helpText -> offset
>57566	Identifier	offset
>57567	Identifier	helpText
>57568	Condition	 
>57569	RelationalExpression	helpText -> offset . y > 0
>57570	PrimaryExpression	0
>57571	MemberAccess	helpText -> offset . y
>57572	Identifier	y
>57573	PtrMemberAccess	helpText -> offset
>57574	Identifier	offset
>57575	Identifier	helpText
>57576	ExpressionStatement	 
>57577	AssignmentExpr	helpText -> offset . y += helpTextScrollSpeed * dt
>57578	MultiplicativeExpression	helpTextScrollSpeed * dt
>57579	Identifier	dt
>57580	Identifier	helpTextScrollSpeed
>57581	MemberAccess	helpText -> offset . y
>57582	Identifier	y
>57583	PtrMemberAccess	helpText -> offset
>57584	Identifier	offset
>57585	Identifier	helpText
>57586	ExpressionStatement	 
>57587	CallExpression	helpText -> offset . stop ( )
>57588	ArgumentList	 
>57589	Callee	helpText -> offset . stop
>57590	MemberAccess	helpText -> offset . stop
>57591	Identifier	stop
>57592	PtrMemberAccess	helpText -> offset
>57593	Identifier	offset
>57594	Identifier	helpText
>57595	Condition	 
>57596	CallExpression	isActing ( ACTION_SWIMUP )
>57597	ArgumentList	ACTION_SWIMUP
>57598	Argument	ACTION_SWIMUP
>57599	Identifier	ACTION_SWIMUP
>57600	Callee	isActing
>57601	Identifier	isActing
>57602	IfStatement	if ( isActing ( ACTION_SWIMDOWN ) )
>57603	CompoundStatement	 
>57604	IfStatement	if ( helpText -> offset . y < - helpText -> getFullHeight ( ) + core -> getVirtualHeight ( ) )
>57605	CompoundStatement	 
>57606	ExpressionStatement	 
>57607	AssignmentExpr	helpText -> offset . y = - helpText -> getFullHeight ( ) + core -> getVirtualHeight ( )
>57608	AdditiveExpression	- helpText -> getFullHeight ( ) + core -> getVirtualHeight ( )
>57609	CallExpression	core -> getVirtualHeight ( )
>57610	ArgumentList	 
>57611	Callee	core -> getVirtualHeight
>57612	PtrMemberAccess	core -> getVirtualHeight
>57613	Identifier	getVirtualHeight
>57614	Identifier	core
>57615	UnaryOp	- helpText -> getFullHeight ( )
>57616	CallExpression	helpText -> getFullHeight ( )
>57617	ArgumentList	 
>57618	Callee	helpText -> getFullHeight
>57619	PtrMemberAccess	helpText -> getFullHeight
>57620	Identifier	getFullHeight
>57621	Identifier	helpText
>57622	UnaryOperator	-
>57623	MemberAccess	helpText -> offset . y
>57624	Identifier	y
>57625	PtrMemberAccess	helpText -> offset
>57626	Identifier	offset
>57627	Identifier	helpText
>57628	Condition	 
>57629	RelationalExpression	helpText -> offset . y < - helpText -> getFullHeight ( ) + core -> getVirtualHeight ( )
>57630	AdditiveExpression	- helpText -> getFullHeight ( ) + core -> getVirtualHeight ( )
>57631	CallExpression	core -> getVirtualHeight ( )
>57632	ArgumentList	 
>57633	Callee	core -> getVirtualHeight
>57634	PtrMemberAccess	core -> getVirtualHeight
>57635	Identifier	getVirtualHeight
>57636	Identifier	core
>57637	UnaryOp	- helpText -> getFullHeight ( )
>57638	CallExpression	helpText -> getFullHeight ( )
>57639	ArgumentList	 
>57640	Callee	helpText -> getFullHeight
>57641	PtrMemberAccess	helpText -> getFullHeight
>57642	Identifier	getFullHeight
>57643	Identifier	helpText
>57644	UnaryOperator	-
>57645	MemberAccess	helpText -> offset . y
>57646	Identifier	y
>57647	PtrMemberAccess	helpText -> offset
>57648	Identifier	offset
>57649	Identifier	helpText
>57650	ExpressionStatement	 
>57651	AssignmentExpr	helpText -> offset . y -= helpTextScrollSpeed * dt
>57652	MultiplicativeExpression	helpTextScrollSpeed * dt
>57653	Identifier	dt
>57654	Identifier	helpTextScrollSpeed
>57655	MemberAccess	helpText -> offset . y
>57656	Identifier	y
>57657	PtrMemberAccess	helpText -> offset
>57658	Identifier	offset
>57659	Identifier	helpText
>57660	ExpressionStatement	 
>57661	CallExpression	helpText -> offset . stop ( )
>57662	ArgumentList	 
>57663	Callee	helpText -> offset . stop
>57664	MemberAccess	helpText -> offset . stop
>57665	Identifier	stop
>57666	PtrMemberAccess	helpText -> offset
>57667	Identifier	offset
>57668	Identifier	helpText
>57669	Condition	 
>57670	CallExpression	isActing ( ACTION_SWIMDOWN )
>57671	ArgumentList	ACTION_SWIMDOWN
>57672	Argument	ACTION_SWIMDOWN
>57673	Identifier	ACTION_SWIMDOWN
>57674	Callee	isActing
>57675	Identifier	isActing
>57676	IdentifierDeclStatement	 
>57677	IdentifierDecl	helpTextScrollSpeed = 400.0f
>57678	AssignmentExpr	helpTextScrollSpeed = 400.0f
>57679	PrimaryExpression	400.0f
>57680	Identifier	helpTextScrollSpeed
>57681	Identifier	helpTextScrollSpeed
>57682	IdentifierDeclType	const float
>57683	Condition	 
>57684	Identifier	inHelpScreen
>57685	ExpressionStatement	 
>57686	CallExpression	particleManager -> clearInfluences ( )
>57687	ArgumentList	 
>57688	Callee	particleManager -> clearInfluences
>57689	PtrMemberAccess	particleManager -> clearInfluences
>57690	Identifier	clearInfluences
>57691	Identifier	particleManager
>57830	FunctionDef	Game 
>57831	ParameterList	int bgLayer , bool v
>57832	Parameter	 
>57833	Identifier	v
>57834	ParameterType	bool
>57835	Parameter	 
>57836	Identifier	bgLayer
>57837	ParameterType	int
>57838	ReturnType	void
>57839	CompoundStatement	 
>57840	ExpressionStatement	 
>57841	AssignmentExpr	core -> getRenderObjectLayer ( LR_ELEMENTS1 + bgLayer ) -> visible = v
>57842	Identifier	v
>57843	PtrMemberAccess	core -> getRenderObjectLayer ( LR_ELEMENTS1 + bgLayer ) -> visible
>57844	Identifier	visible
>57845	CallExpression	core -> getRenderObjectLayer ( LR_ELEMENTS1 + bgLayer )
>57846	ArgumentList	LR_ELEMENTS1 + bgLayer
>57847	Argument	LR_ELEMENTS1 + bgLayer
>57848	AdditiveExpression	LR_ELEMENTS1 + bgLayer
>57849	Identifier	bgLayer
>57850	Identifier	LR_ELEMENTS1
>57851	Callee	core -> getRenderObjectLayer
>57852	PtrMemberAccess	core -> getRenderObjectLayer
>57853	Identifier	getRenderObjectLayer
>57854	Identifier	core
>57867	FunctionDef	Game 
>57868	ParameterList	int bgLayer
>57869	Parameter	 
>57870	Identifier	bgLayer
>57871	ParameterType	int
>57872	ReturnType	bool
>57873	CompoundStatement	 
>57874	ReturnStatement	 
>57875	PtrMemberAccess	core -> getRenderObjectLayer ( LR_ELEMENTS1 + bgLayer ) -> visible
>57876	Identifier	visible
>57877	CallExpression	core -> getRenderObjectLayer ( LR_ELEMENTS1 + bgLayer )
>57878	ArgumentList	LR_ELEMENTS1 + bgLayer
>57879	Argument	LR_ELEMENTS1 + bgLayer
>57880	AdditiveExpression	LR_ELEMENTS1 + bgLayer
>57881	Identifier	bgLayer
>57882	Identifier	LR_ELEMENTS1
>57883	Callee	core -> getRenderObjectLayer
>57884	PtrMemberAccess	core -> getRenderObjectLayer
>57885	Identifier	getRenderObjectLayer
>57886	Identifier	core
>57898	FunctionDef	Game 
>57899	ParameterList	const std 
>57900	Parameter	 
>57901	Identifier	playSfx
>57902	ParameterType	bool
>57903	Parameter	 
>57904	Identifier	aim
>57905	ParameterType	const Vector &
>57906	Parameter	 
>57907	Identifier	pos
>57908	ParameterType	const Vector &
>57909	Parameter	 
>57910	Identifier	target
>57911	ParameterType	Entity *
>57912	Parameter	 
>57913	Identifier	firer
>57914	ParameterType	Entity *
>57915	Parameter	 
>57916	Identifier	bankShot
>57917	ParameterType	const std 
>57918	ReturnType	Shot *
>57919	CompoundStatement	 
>57920	ReturnStatement	 
>57921	Identifier	s
>57922	IfStatement	if ( firer )
>57923	CompoundStatement	 
>57924	ExpressionStatement	 
>57925	CallExpression	core -> getTopStateData ( ) -> addRenderObject ( s , LR_PROJECTILES )
>57926	ArgumentList	s
>57927	Argument	LR_PROJECTILES
>57928	Identifier	LR_PROJECTILES
>57929	Argument	s
>57930	Identifier	s
>57931	Callee	core -> getTopStateData ( ) -> addRenderObject
>57932	PtrMemberAccess	core -> getTopStateData ( ) -> addRenderObject
>57933	Identifier	addRenderObject
>57934	CallExpression	core -> getTopStateData ( )
>57935	ArgumentList	 
>57936	Callee	core -> getTopStateData
>57937	PtrMemberAccess	core -> getTopStateData
>57938	Identifier	getTopStateData
>57939	Identifier	core
>57940	ExpressionStatement	 
>57941	CallExpression	s -> fire ( playSfx )
>57942	ArgumentList	playSfx
>57943	Argument	playSfx
>57944	Identifier	playSfx
>57945	Callee	s -> fire
>57946	PtrMemberAccess	s -> fire
>57947	Identifier	fire
>57948	Identifier	s
>57949	ExpressionStatement	 
>57950	CallExpression	s -> updatePosition ( )
>57951	ArgumentList	 
>57952	Callee	s -> updatePosition
>57953	PtrMemberAccess	s -> updatePosition
>57954	Identifier	updatePosition
>57955	Identifier	s
>57956	IfStatement	if ( ! aim . isZero ( ) )
>57957	ElseStatement	else
>57958	CompoundStatement	 
>57959	IfStatement	if ( target && firer )
>57960	ElseStatement	else
>57961	IfStatement	if ( firer )
>57962	ElseStatement	else
>57963	ExpressionStatement	 
>57964	CallExpression	s -> setAimVector ( Vector ( 0 , 1 ) )
>57965	ArgumentList	Vector ( 0 , 1 )
>57966	Argument	Vector ( 0 , 1 )
>57967	CallExpression	Vector ( 0 , 1 )
>57968	ArgumentList	0
>57969	Argument	1
>57970	PrimaryExpression	1
>57971	Argument	0
>57972	PrimaryExpression	0
>57973	Callee	Vector
>57974	Identifier	Vector
>57975	Callee	s -> setAimVector
>57976	PtrMemberAccess	s -> setAimVector
>57977	Identifier	setAimVector
>57978	Identifier	s
>57979	ExpressionStatement	 
>57980	CallExpression	s -> setAimVector ( firer -> getNormal ( ) )
>57981	ArgumentList	firer -> getNormal ( )
>57982	Argument	firer -> getNormal ( )
>57983	CallExpression	firer -> getNormal ( )
>57984	ArgumentList	 
>57985	Callee	firer -> getNormal
>57986	PtrMemberAccess	firer -> getNormal
>57987	Identifier	getNormal
>57988	Identifier	firer
>57989	Callee	s -> setAimVector
>57990	PtrMemberAccess	s -> setAimVector
>57991	Identifier	setAimVector
>57992	Identifier	s
>57993	Condition	 
>57994	Identifier	firer
>57995	ExpressionStatement	 
>57996	CallExpression	s -> setAimVector ( target -> position - firer -> position )
>57997	ArgumentList	target -> position - firer -> position
>57998	Argument	target -> position - firer -> position
>57999	AdditiveExpression	target -> position - firer -> position
>58000	PtrMemberAccess	firer -> position
>58001	Identifier	position
>58002	Identifier	firer
>58003	PtrMemberAccess	target -> position
>58004	Identifier	position
>58005	Identifier	target
>58006	Callee	s -> setAimVector
>58007	PtrMemberAccess	s -> setAimVector
>58008	Identifier	setAimVector
>58009	Identifier	s
>58010	Condition	 
>58011	AndExpression	target && firer
>58012	Identifier	firer
>58013	Identifier	target
>58014	ExpressionStatement	 
>58015	CallExpression	s -> setAimVector ( aim )
>58016	ArgumentList	aim
>58017	Argument	aim
>58018	Identifier	aim
>58019	Callee	s -> setAimVector
>58020	PtrMemberAccess	s -> setAimVector
>58021	Identifier	setAimVector
>58022	Identifier	s
>58023	Condition	 
>58024	UnaryOp	! aim . isZero ( )
>58025	CallExpression	aim . isZero ( )
>58026	ArgumentList	 
>58027	Callee	aim . isZero
>58028	MemberAccess	aim . isZero
>58029	Identifier	isZero
>58030	Identifier	aim
>58031	UnaryOperator	!
>58032	ExpressionStatement	 
>58033	CallExpression	Shot 
>58034	ArgumentList	bankShot
>58035	Argument	s
>58036	Identifier	s
>58037	Argument	bankShot
>58038	Identifier	bankShot
>58039	Callee	Shot 
>58040	Identifier	Shot 
>58041	IfStatement	if ( target )
>58042	ExpressionStatement	 
>58043	CallExpression	s -> setTarget ( target )
>58044	ArgumentList	target
>58045	Argument	target
>58046	Identifier	target
>58047	Callee	s -> setTarget
>58048	PtrMemberAccess	s -> setTarget
>58049	Identifier	setTarget
>58050	Identifier	s
>58051	Condition	 
>58052	Identifier	target
>58053	IfStatement	if ( pos . isZero ( ) )
>58054	ElseStatement	else
>58055	ExpressionStatement	 
>58056	AssignmentExpr	s -> position = pos
>58057	Identifier	pos
>58058	PtrMemberAccess	s -> position
>58059	Identifier	position
>58060	Identifier	s
>58061	ExpressionStatement	 
>58062	AssignmentExpr	s -> position = firer -> position
>58063	PtrMemberAccess	firer -> position
>58064	Identifier	position
>58065	Identifier	firer
>58066	PtrMemberAccess	s -> position
>58067	Identifier	position
>58068	Identifier	s
>58069	Condition	 
>58070	CallExpression	pos . isZero ( )
>58071	ArgumentList	 
>58072	Callee	pos . isZero
>58073	MemberAccess	pos . isZero
>58074	Identifier	isZero
>58075	Identifier	pos
>58076	ExpressionStatement	 
>58077	AssignmentExpr	s -> firer = firer
>58078	Identifier	firer
>58079	PtrMemberAccess	s -> firer
>58080	Identifier	firer
>58081	Identifier	s
>58082	ExpressionStatement	 
>58083	Identifier	Shot
>58084	Statement	 
>58085	Statement	 
>58086	Statement	 
>58087	Condition	 
>58088	Identifier	firer
>58089	IdentifierDeclStatement	 
>58090	IdentifierDecl	* s = 0
>58091	AssignmentExpr	* s = 0
>58092	PrimaryExpression	0
>58093	Identifier	s
>58094	Identifier	s
>58095	IdentifierDeclType	Shot *
>58121	FunctionDef	Game 
>58122	ParameterList	Entity * firer , const std 
>58123	Parameter	 
>58124	Identifier	targetPt
>58125	ParameterType	int
>58126	Parameter	 
>58127	Identifier	velLenOverride
>58128	ParameterType	int
>58129	Parameter	 
>58130	Identifier	homing
>58131	ParameterType	int
>58132	Parameter	 
>58133	Identifier	target
>58134	ParameterType	Entity *
>58135	Parameter	 
>58136	Identifier	dir
>58137	ParameterType	Vector
>58138	Parameter	 
>58139	Identifier	big
>58140	ParameterType	bool
>58141	Parameter	 
>58142	Identifier	position
>58143	ParameterType	Vector
>58144	Parameter	 
>58145	Identifier	particleEffect
>58146	ParameterType	const std 
>58147	Parameter	 
>58148	Identifier	firer
>58149	ParameterType	Entity *
>58150	ReturnType	Shot *
>58151	CompoundStatement	 
>58152	ReturnStatement	 
>58153	PrimaryExpression	0
>58154	ExpressionStatement	 
>58155	CallExpression	debugLog ( \"Old version of Game
>58156	ArgumentList	\"Old version of Game
>58157	Argument	\"Old version of Game
>58158	PrimaryExpression	\"Old version of Game
>58159	Callee	debugLog
>58160	Identifier	debugLog
>58173	FunctionDef	Game 
>58174	ParameterList	RenderObject * r
>58175	Parameter	 
>58176	Identifier	r
>58177	ParameterType	RenderObject *
>58178	ReturnType	void
>58179	CompoundStatement	 
>58180	ExpressionStatement	 
>58181	CallExpression	warpCameraTo ( r -> position )
>58182	ArgumentList	r -> position
>58183	Argument	r -> position
>58184	PtrMemberAccess	r -> position
>58185	Identifier	position
>58186	Identifier	r
>58187	Callee	warpCameraTo
>58188	Identifier	warpCameraTo
>58195	FunctionDef	Game 
>58196	ParameterList	Vector position
>58197	Parameter	 
>58198	Identifier	position
>58199	ParameterType	Vector
>58200	ReturnType	void
>58201	CompoundStatement	 
>58202	ExpressionStatement	 
>58203	AssignmentExpr	dsq -> cameraPos = getCameraPositionFor ( position )
>58204	CallExpression	getCameraPositionFor ( position )
>58205	ArgumentList	position
>58206	Argument	position
>58207	Identifier	position
>58208	Callee	getCameraPositionFor
>58209	Identifier	getCameraPositionFor
>58210	PtrMemberAccess	dsq -> cameraPos
>58211	Identifier	cameraPos
>58212	Identifier	dsq
>58213	ExpressionStatement	 
>58214	AssignmentExpr	cameraInterp = position
>58215	Identifier	position
>58216	Identifier	cameraInterp
>58217	ExpressionStatement	 
>58218	CallExpression	cameraInterp . stop ( )
>58219	ArgumentList	 
>58220	Callee	cameraInterp . stop
>58221	MemberAccess	cameraInterp . stop
>58222	Identifier	stop
>58223	Identifier	cameraInterp
>58233	FunctionDef	Game 
>58234	ParameterList	 
>58235	ReturnType	void
>58236	CompoundStatement	 
>58237	IfStatement	if ( cameraFollow )
>58238	ExpressionStatement	 
>58239	CallExpression	warpCameraTo ( * cameraFollow )
>58240	ArgumentList	* cameraFollow
>58241	Argument	* cameraFollow
>58242	UnaryOp	* cameraFollow
>58243	Identifier	cameraFollow
>58244	UnaryOperator	*
>58245	Callee	warpCameraTo
>58246	Identifier	warpCameraTo
>58247	Condition	 
>58248	Identifier	cameraFollow
>58254	FunctionDef	Game 
>58255	ParameterList	int i
>58256	Parameter	 
>58257	Identifier	i
>58258	ParameterType	int
>58259	ReturnType	ElementTemplate
>58260	CompoundStatement	 
>58261	ReturnStatement	 
>58262	Identifier	t
>58263	ExpressionStatement	 
>58264	AssignmentExpr	t . h = 512 * cell
>58265	MultiplicativeExpression	512 * cell
>58266	Identifier	cell
>58267	PrimaryExpression	512
>58268	MemberAccess	t . h
>58269	Identifier	h
>58270	Identifier	t
>58271	ExpressionStatement	 
>58272	AssignmentExpr	t . w = 512 * cell
>58273	MultiplicativeExpression	512 * cell
>58274	Identifier	cell
>58275	PrimaryExpression	512
>58276	MemberAccess	t . w
>58277	Identifier	w
>58278	Identifier	t
>58279	ExpressionStatement	 
>58280	CallExpression	std 
>58281	ArgumentList	t . tv1
>58282	Argument	t . tv2
>58283	MemberAccess	t . tv2
>58284	Identifier	tv2
>58285	Identifier	t
>58286	Argument	t . tv1
>58287	MemberAccess	t . tv1
>58288	Identifier	tv1
>58289	Identifier	t
>58290	Callee	std 
>58291	Identifier	std 
>58292	ExpressionStatement	 
>58293	AssignmentExpr	t . tv1 = 1 - t . tv1
>58294	AdditiveExpression	1 - t . tv1
>58295	MemberAccess	t . tv1
>58296	Identifier	tv1
>58297	Identifier	t
>58298	PrimaryExpression	1
>58299	MemberAccess	t . tv1
>58300	Identifier	tv1
>58301	Identifier	t
>58302	ExpressionStatement	 
>58303	AssignmentExpr	t . tv2 = 1 - t . tv2
>58304	AdditiveExpression	1 - t . tv2
>58305	MemberAccess	t . tv2
>58306	Identifier	tv2
>58307	Identifier	t
>58308	PrimaryExpression	1
>58309	MemberAccess	t . tv2
>58310	Identifier	tv2
>58311	Identifier	t
>58312	ExpressionStatement	 
>58313	AssignmentExpr	t . tv2 = t . tv1 + cell
>58314	AdditiveExpression	t . tv1 + cell
>58315	Identifier	cell
>58316	MemberAccess	t . tv1
>58317	Identifier	tv1
>58318	Identifier	t
>58319	MemberAccess	t . tv2
>58320	Identifier	tv2
>58321	Identifier	t
>58322	ExpressionStatement	 
>58323	AssignmentExpr	t . tu2 = t . tu1 + cell
>58324	AdditiveExpression	t . tu1 + cell
>58325	Identifier	cell
>58326	MemberAccess	t . tu1
>58327	Identifier	tu1
>58328	Identifier	t
>58329	MemberAccess	t . tu2
>58330	Identifier	tu2
>58331	Identifier	t
>58332	ExpressionStatement	 
>58333	AssignmentExpr	t . tv1 = y * cell
>58334	MultiplicativeExpression	y * cell
>58335	Identifier	cell
>58336	Identifier	y
>58337	MemberAccess	t . tv1
>58338	Identifier	tv1
>58339	Identifier	t
>58340	ExpressionStatement	 
>58341	AssignmentExpr	t . tu1 = x * cell
>58342	MultiplicativeExpression	x * cell
>58343	Identifier	cell
>58344	Identifier	x
>58345	MemberAccess	t . tu1
>58346	Identifier	tu1
>58347	Identifier	t
>58348	WhileStatement	while ( x >= 6 )
>58349	CompoundStatement	 
>58350	ExpressionStatement	 
>58351	IncDecOp	y ++
>58352	IncDec	++
>58353	Identifier	y
>58354	ExpressionStatement	 
>58355	AssignmentExpr	x -= 6
>58356	PrimaryExpression	6
>58357	Identifier	x
>58358	Condition	 
>58359	RelationalExpression	x >= 6
>58360	PrimaryExpression	6
>58361	Identifier	x
>58362	IdentifierDeclStatement	 
>58363	IdentifierDecl	y = 0
>58364	AssignmentExpr	y = 0
>58365	PrimaryExpression	0
>58366	Identifier	y
>58367	Identifier	y
>58368	IdentifierDeclType	int
>58369	IdentifierDecl	x = i
>58370	AssignmentExpr	x = i
>58371	Identifier	i
>58372	Identifier	i
>58373	Identifier	x
>58374	IdentifierDeclType	int
>58375	ExpressionStatement	 
>58376	AssignmentExpr	t . gfx = \"Aquarian\"
>58377	PrimaryExpression	\"Aquarian\"
>58378	MemberAccess	t . gfx
>58379	Identifier	gfx
>58380	Identifier	t
>58381	ExpressionStatement	 
>58382	AssignmentExpr	t . idx = 1024 + i
>58383	AdditiveExpression	1024 + i
>58384	Identifier	i
>58385	PrimaryExpression	1024
>58386	MemberAccess	t . idx
>58387	Identifier	idx
>58388	Identifier	t
>58389	IdentifierDeclStatement	 
>58390	IdentifierDecl	t
>58391	Identifier	t
>58392	IdentifierDeclType	ElementTemplate
>58393	IdentifierDeclStatement	 
>58394	IdentifierDecl	cell = 64.0f / 512.0f
>58395	AssignmentExpr	cell = 64.0f / 512.0f
>58396	MultiplicativeExpression	64.0f / 512.0f
>58397	PrimaryExpression	512.0f
>58398	PrimaryExpression	64.0f
>58399	Identifier	cell
>58400	Identifier	cell
>58401	IdentifierDeclType	float
>58418	FunctionDef	Game 
>58419	ParameterList	std 
>58420	Parameter	 
>58421	Identifier	pack
>58422	ParameterType	std 
>58423	ReturnType	void
>58424	CompoundStatement	 
>58425	ForStatement	for ( int i = 0 ; i < 27 ; i ++ )
>58426	CompoundStatement	 
>58427	ExpressionStatement	 
>58428	CallExpression	elementTemplates . push_back ( getElementTemplateForLetter ( i ) )
>58429	ArgumentList	getElementTemplateForLetter ( i )
>58430	Argument	getElementTemplateForLetter ( i )
>58431	CallExpression	getElementTemplateForLetter ( i )
>58432	ArgumentList	i
>58433	Argument	i
>58434	Identifier	i
>58435	Callee	getElementTemplateForLetter
>58436	Identifier	getElementTemplateForLetter
>58437	Callee	elementTemplates . push_back
>58438	MemberAccess	elementTemplates . push_back
>58439	Identifier	push_back
>58440	Identifier	elementTemplates
>58441	IncDecOp	 
>58442	IncDec	++
>58443	Identifier	i
>58444	Condition	 
>58445	RelationalExpression	i < 27
>58446	PrimaryExpression	27
>58447	Identifier	i
>58448	ForInit	 
>58449	IdentifierDeclStatement	int i = 0 ;
>58450	IdentifierDecl	i = 0
>58451	AssignmentExpr	i = 0
>58452	PrimaryExpression	0
>58453	Identifier	i
>58454	Identifier	i
>58455	IdentifierDeclType	int
>58456	ForStatement	for ( int i = 0 ; i < elementTemplates . size ( ) ; i ++ )
>58457	CompoundStatement	 
>58458	ForStatement	for ( int j = i ; j < elementTemplates . size ( ) ; j ++ )
>58459	CompoundStatement	 
>58460	IfStatement	if ( elementTemplates [ i ] . idx > elementTemplates [ j ] . idx )
>58461	CompoundStatement	 
>58462	ExpressionStatement	 
>58463	CallExpression	std 
>58464	ArgumentList	elementTemplates [ i ]
>58465	Argument	elementTemplates [ j ]
>58466	ArrayIndexing	elementTemplates [ j ]
>58467	Identifier	j
>58468	Identifier	elementTemplates
>58469	Argument	elementTemplates [ i ]
>58470	ArrayIndexing	elementTemplates [ i ]
>58471	Identifier	i
>58472	Identifier	elementTemplates
>58473	Callee	std 
>58474	Identifier	std 
>58475	Condition	 
>58476	RelationalExpression	elementTemplates [ i ] . idx > elementTemplates [ j ] . idx
>58477	MemberAccess	elementTemplates [ j ] . idx
>58478	Identifier	idx
>58479	ArrayIndexing	elementTemplates [ j ]
>58480	Identifier	j
>58481	Identifier	elementTemplates
>58482	MemberAccess	elementTemplates [ i ] . idx
>58483	Identifier	idx
>58484	ArrayIndexing	elementTemplates [ i ]
>58485	Identifier	i
>58486	Identifier	elementTemplates
>58487	IncDecOp	 
>58488	IncDec	++
>58489	Identifier	j
>58490	Condition	 
>58491	RelationalExpression	j < elementTemplates . size ( )
>58492	CallExpression	elementTemplates . size ( )
>58493	ArgumentList	 
>58494	Callee	elementTemplates . size
>58495	MemberAccess	elementTemplates . size
>58496	Identifier	size
>58497	Identifier	elementTemplates
>58498	Identifier	j
>58499	ForInit	 
>58500	IdentifierDeclStatement	int j = i ;
>58501	IdentifierDecl	j = i
>58502	AssignmentExpr	j = i
>58503	Identifier	i
>58504	Identifier	i
>58505	Identifier	j
>58506	IdentifierDeclType	int
>58507	IncDecOp	 
>58508	IncDec	++
>58509	Identifier	i
>58510	Condition	 
>58511	RelationalExpression	i < elementTemplates . size ( )
>58512	CallExpression	elementTemplates . size ( )
>58513	ArgumentList	 
>58514	Callee	elementTemplates . size
>58515	MemberAccess	elementTemplates . size
>58516	Identifier	size
>58517	Identifier	elementTemplates
>58518	Identifier	i
>58519	ForInit	 
>58520	IdentifierDeclStatement	int i = 0 ;
>58521	IdentifierDecl	i = 0
>58522	AssignmentExpr	i = 0
>58523	PrimaryExpression	0
>58524	Identifier	i
>58525	Identifier	i
>58526	IdentifierDeclType	int
>58527	ExpressionStatement	 
>58528	CallExpression	in . close ( )
>58529	ArgumentList	 
>58530	Callee	in . close
>58531	MemberAccess	in . close
>58532	Identifier	close
>58533	Identifier	in
>58534	WhileStatement	while ( std 
>58535	CompoundStatement	 
>58536	IfStatement	if ( doPrecache )
>58537	ExpressionStatement	 
>58538	CallExpression	tileCache . precacheTex ( gfx )
>58539	ArgumentList	gfx
>58540	Argument	gfx
>58541	Identifier	gfx
>58542	Callee	tileCache . precacheTex
>58543	MemberAccess	tileCache . precacheTex
>58544	Identifier	precacheTex
>58545	Identifier	tileCache
>58546	Condition	 
>58547	Identifier	doPrecache
>58548	ExpressionStatement	 
>58549	CallExpression	elementTemplates . push_back ( t )
>58550	ArgumentList	t
>58551	Argument	t
>58552	Identifier	t
>58553	Callee	elementTemplates . push_back
>58554	MemberAccess	elementTemplates . push_back
>58555	Identifier	push_back
>58556	Identifier	elementTemplates
>58557	ExpressionStatement	 
>58558	AssignmentExpr	t . h = h
>58559	Identifier	h
>58560	MemberAccess	t . h
>58561	Identifier	h
>58562	Identifier	t
>58563	ExpressionStatement	 
>58564	AssignmentExpr	t . w = w
>58565	Identifier	w
>58566	MemberAccess	t . w
>58567	Identifier	w
>58568	Identifier	t
>58569	IfStatement	if ( h == 0 )
>58570	ExpressionStatement	 
>58571	AssignmentExpr	h = - 1
>58572	UnaryOp	- 1
>58573	PrimaryExpression	1
>58574	UnaryOperator	-
>58575	Identifier	h
>58576	Condition	 
>58577	EqualityExpression	h == 0
>58578	PrimaryExpression	0
>58579	Identifier	h
>58580	IfStatement	if ( w == 0 )
>58581	ExpressionStatement	 
>58582	AssignmentExpr	w = - 1
>58583	UnaryOp	- 1
>58584	PrimaryExpression	1
>58585	UnaryOperator	-
>58586	Identifier	w
>58587	Condition	 
>58588	EqualityExpression	w == 0
>58589	PrimaryExpression	0
>58590	Identifier	w
>58591	ExpressionStatement	 
>58592	AssignmentExpr	t . gfx = gfx
>58593	Identifier	gfx
>58594	MemberAccess	t . gfx
>58595	Identifier	gfx
>58596	Identifier	t
>58597	ExpressionStatement	 
>58598	AssignmentExpr	t . idx = idx
>58599	Identifier	idx
>58600	MemberAccess	t . idx
>58601	Identifier	idx
>58602	Identifier	t
>58603	IdentifierDeclStatement	 
>58604	IdentifierDecl	t
>58605	Identifier	t
>58606	IdentifierDeclType	ElementTemplate
>58607	ExpressionStatement	 
>58608	ShiftExpression	is >> idx >> gfx >> w >> h
>58609	ShiftExpression	idx >> gfx >> w >> h
>58610	ShiftExpression	gfx >> w >> h
>58611	ShiftExpression	w >> h
>58612	Identifier	h
>58613	Identifier	w
>58614	Identifier	gfx
>58615	Identifier	idx
>58616	Identifier	is
>58617	IdentifierDeclStatement	 
>58618	IdentifierDecl	is ( line )
>58619	Identifier	line
>58620	Identifier	is
>58621	IdentifierDeclType	std 
>58622	IdentifierDeclStatement	 
>58623	IdentifierDecl	gfx
>58624	Identifier	gfx
>58625	IdentifierDeclType	std 
>58626	IdentifierDeclStatement	 
>58627	IdentifierDecl	h = - 1
>58628	AssignmentExpr	h = - 1
>58629	UnaryOp	- 1
>58630	PrimaryExpression	1
>58631	UnaryOperator	-
>58632	Identifier	h
>58633	Identifier	h
>58634	IdentifierDeclType	int
>58635	IdentifierDecl	w = - 1
>58636	AssignmentExpr	w = - 1
>58637	UnaryOp	- 1
>58638	PrimaryExpression	1
>58639	UnaryOperator	-
>58640	Identifier	w
>58641	Identifier	w
>58642	IdentifierDeclType	int
>58643	IdentifierDecl	idx = - 1
>58644	AssignmentExpr	idx = - 1
>58645	UnaryOp	- 1
>58646	PrimaryExpression	1
>58647	UnaryOperator	-
>58648	Identifier	idx
>58649	Identifier	idx
>58650	IdentifierDeclType	int
>58651	Condition	 
>58652	CallExpression	std 
>58653	ArgumentList	in
>58654	Argument	line
>58655	Identifier	line
>58656	Argument	in
>58657	Identifier	in
>58658	Callee	std 
>58659	Identifier	std 
>58660	IdentifierDeclStatement	 
>58661	IdentifierDecl	line
>58662	Identifier	line
>58663	IdentifierDeclType	std 
>58664	IdentifierDeclStatement	 
>58665	IdentifierDecl	in ( fn . c_str ( ) )
>58666	CallExpression	fn . c_str ( )
>58667	ArgumentList	 
>58668	Callee	fn . c_str
>58669	MemberAccess	fn . c_str
>58670	Identifier	c_str
>58671	Identifier	fn
>58672	Identifier	in
>58673	IdentifierDeclType	InStream
>58674	IfStatement	if ( doPrecache )
>58675	CompoundStatement	 
>58676	ExpressionStatement	 
>58677	CallExpression	tileCache . clean ( )
>58678	ArgumentList	 
>58679	Callee	tileCache . clean
>58680	MemberAccess	tileCache . clean
>58681	Identifier	clean
>58682	Identifier	tileCache
>58683	Condition	 
>58684	Identifier	doPrecache
>58685	IfStatement	if ( ! exists ( fn ) )
>58686	CompoundStatement	 
>58687	ReturnStatement	 
>58688	ExpressionStatement	 
>58689	CallExpression	errorLog ( \"Could not open element template pack [\" + fn + \"]\" )
>58690	ArgumentList	\"Could not open element template pack [\" + fn + \"]\"
>58691	Argument	\"Could not open element template pack [\" + fn + \"]\"
>58692	AdditiveExpression	\"Could not open element template pack [\" + fn + \"]\"
>58693	AdditiveExpression	fn + \"]\"
>58694	PrimaryExpression	\"]\"
>58695	Identifier	fn
>58696	PrimaryExpression	\"Could not open element template pack [\"
>58697	Callee	errorLog
>58698	Identifier	errorLog
>58699	Condition	 
>58700	UnaryOp	! exists ( fn )
>58701	CallExpression	exists ( fn )
>58702	ArgumentList	fn
>58703	Argument	fn
>58704	Identifier	fn
>58705	Callee	exists
>58706	Identifier	exists
>58707	UnaryOperator	!
>58708	ExpressionStatement	 
>58709	AssignmentExpr	lastTileset = fn
>58710	Identifier	fn
>58711	Identifier	lastTileset
>58712	IfStatement	if ( lastTileset == fn )
>58713	CompoundStatement	 
>58714	ExpressionStatement	 
>58715	AssignmentExpr	doPrecache = false
>58716	Identifier	false
>58717	Identifier	doPrecache
>58718	Condition	 
>58719	EqualityExpression	lastTileset == fn
>58720	Identifier	fn
>58721	Identifier	lastTileset
>58722	IfStatement	if ( dsq -> mod . isActive ( ) )
>58723	ElseStatement	else
>58724	ExpressionStatement	 
>58725	AssignmentExpr	fn = \"data/tilesets/\" + pack + \".txt\"
>58726	AdditiveExpression	\"data/tilesets/\" + pack + \".txt\"
>58727	AdditiveExpression	pack + \".txt\"
>58728	PrimaryExpression	\".txt\"
>58729	Identifier	pack
>58730	PrimaryExpression	\"data/tilesets/\"
>58731	Identifier	fn
>58732	ExpressionStatement	 
>58733	AssignmentExpr	fn = dsq -> mod . getPath ( ) + \"tilesets/\" + pack + \".txt\"
>58734	AdditiveExpression	dsq -> mod . getPath ( ) + \"tilesets/\" + pack + \".txt\"
>58735	AdditiveExpression	\"tilesets/\" + pack + \".txt\"
>58736	AdditiveExpression	pack + \".txt\"
>58737	PrimaryExpression	\".txt\"
>58738	Identifier	pack
>58739	PrimaryExpression	\"tilesets/\"
>58740	CallExpression	dsq -> mod . getPath ( )
>58741	ArgumentList	 
>58742	Callee	dsq -> mod . getPath
>58743	MemberAccess	dsq -> mod . getPath
>58744	Identifier	getPath
>58745	PtrMemberAccess	dsq -> mod
>58746	Identifier	mod
>58747	Identifier	dsq
>58748	Identifier	fn
>58749	Condition	 
>58750	CallExpression	dsq -> mod . isActive ( )
>58751	ArgumentList	 
>58752	Callee	dsq -> mod . isActive
>58753	MemberAccess	dsq -> mod . isActive
>58754	Identifier	isActive
>58755	PtrMemberAccess	dsq -> mod
>58756	Identifier	mod
>58757	Identifier	dsq
>58758	IdentifierDeclStatement	 
>58759	IdentifierDecl	fn
>58760	Identifier	fn
>58761	IdentifierDeclType	std 
>58762	IdentifierDeclStatement	 
>58763	IdentifierDecl	doPrecache = false
>58764	AssignmentExpr	doPrecache = false
>58765	Identifier	false
>58766	Identifier	false
>58767	Identifier	doPrecache
>58768	IdentifierDeclType	bool
>58769	ExpressionStatement	 
>58770	CallExpression	elementTemplates . clear ( )
>58771	ArgumentList	 
>58772	Callee	elementTemplates . clear
>58773	MemberAccess	elementTemplates . clear
>58774	Identifier	clear
>58775	Identifier	elementTemplates
>58776	ExpressionStatement	 
>58777	CallExpression	stringToLower ( pack )
>58778	ArgumentList	pack
>58779	Argument	pack
>58780	Identifier	pack
>58781	Callee	stringToLower
>58782	Identifier	stringToLower
>58821	FunctionDef	Game 
>58822	ParameterList	int v
>58823	Parameter	 
>58824	Identifier	v
>58825	ParameterType	int
>58826	ReturnType	void
>58827	CompoundStatement	 
>58828	ExpressionStatement	 
>58829	CallExpression	memset ( grid , v , sizeof ( grid ) )
>58830	ArgumentList	grid
>58831	Argument	sizeof ( grid )
>58832	SizeofExpr	sizeof ( grid )
>58833	SizeofOperand	grid
>58834	Sizeof	sizeof
>58835	Argument	v
>58836	Identifier	v
>58837	Argument	grid
>58838	Identifier	grid
>58839	Callee	memset
>58840	Identifier	memset
>58841	ExpressionStatement	 
>58842	CallExpression	compile_assert ( sizeof ( grid ) == MAX_GRID * MAX_GRID )
>58843	ArgumentList	sizeof ( grid ) == MAX_GRID * MAX_GRID
>58844	Argument	sizeof ( grid ) == MAX_GRID * MAX_GRID
>58845	EqualityExpression	sizeof ( grid ) == MAX_GRID * MAX_GRID
>58846	MultiplicativeExpression	MAX_GRID * MAX_GRID
>58847	Identifier	MAX_GRID
>58848	Identifier	MAX_GRID
>58849	SizeofExpr	sizeof ( grid )
>58850	SizeofOperand	grid
>58851	Sizeof	sizeof
>58852	Callee	compile_assert
>58853	Identifier	compile_assert
>58860	FunctionDef	Game 
>58861	ParameterList	 
>58862	ReturnType	void
>58863	CompoundStatement	 
>58864	ExpressionStatement	 
>58865	AssignmentExpr	overrideMusic = \"\"
>58866	PrimaryExpression	\"\"
>58867	Identifier	overrideMusic
>58872	FunctionDef	Game 
>58873	ParameterList	ElementTemplate * et , Vector position , float rot360
>58874	Parameter	 
>58875	Identifier	rot360
>58876	ParameterType	float
>58877	Parameter	 
>58878	Identifier	position
>58879	ParameterType	Vector
>58880	Parameter	 
>58881	Identifier	et
>58882	ParameterType	ElementTemplate *
>58883	ReturnType	void
>58884	CompoundStatement	 
>58885	ForStatement	for ( int i = 0 ; i < et -> grid . size ( ) ; i ++ )
>58886	CompoundStatement	 
>58887	ExpressionStatement	 
>58888	CallExpression	setGrid ( s , OT_INVISIBLE )
>58889	ArgumentList	s
>58890	Argument	OT_INVISIBLE
>58891	Identifier	OT_INVISIBLE
>58892	Argument	s
>58893	Identifier	s
>58894	Callee	setGrid
>58895	Identifier	setGrid
>58896	IdentifierDeclStatement	 
>58897	IdentifierDecl	s ( t . x + x , t . y + y )
>58898	Expression	t . x + x , t . y + y
>58899	AdditiveExpression	t . y + y
>58900	Identifier	y
>58901	MemberAccess	t . y
>58902	Identifier	y
>58903	Identifier	t
>58904	AdditiveExpression	t . x + x
>58905	Identifier	x
>58906	MemberAccess	t . x
>58907	Identifier	x
>58908	Identifier	t
>58909	Identifier	s
>58910	IdentifierDeclType	TileVector
>58911	IfStatement	if ( rot360 >= 0 && rot360 < 90 )
>58912	ElseStatement	else
>58913	IfStatement	if ( rot360 >= 90 && rot360 < 180 )
>58914	ElseStatement	else
>58915	IfStatement	if ( rot360 >= 180 && rot360 < 270 )
>58916	ElseStatement	else
>58917	IfStatement	if ( rot360 >= 270 && rot360 < 360 )
>58918	CompoundStatement	 
>58919	ExpressionStatement	 
>58920	AssignmentExpr	y = - y
>58921	UnaryOp	- y
>58922	Identifier	y
>58923	UnaryOperator	-
>58924	Identifier	y
>58925	ExpressionStatement	 
>58926	AssignmentExpr	x = swap
>58927	Identifier	swap
>58928	Identifier	x
>58929	ExpressionStatement	 
>58930	AssignmentExpr	y = x
>58931	Identifier	x
>58932	Identifier	y
>58933	IdentifierDeclStatement	 
>58934	IdentifierDecl	swap = y
>58935	AssignmentExpr	swap = y
>58936	Identifier	y
>58937	Identifier	y
>58938	Identifier	swap
>58939	IdentifierDeclType	int
>58940	Condition	 
>58941	AndExpression	rot360 >= 270 && rot360 < 360
>58942	RelationalExpression	rot360 < 360
>58943	PrimaryExpression	360
>58944	Identifier	rot360
>58945	RelationalExpression	rot360 >= 270
>58946	PrimaryExpression	270
>58947	Identifier	rot360
>58948	CompoundStatement	 
>58949	ExpressionStatement	 
>58950	AssignmentExpr	y = - y
>58951	UnaryOp	- y
>58952	Identifier	y
>58953	UnaryOperator	-
>58954	Identifier	y
>58955	ExpressionStatement	 
>58956	AssignmentExpr	x = - x
>58957	UnaryOp	- x
>58958	Identifier	x
>58959	UnaryOperator	-
>58960	Identifier	x
>58961	Condition	 
>58962	AndExpression	rot360 >= 180 && rot360 < 270
>58963	RelationalExpression	rot360 < 270
>58964	PrimaryExpression	270
>58965	Identifier	rot360
>58966	RelationalExpression	rot360 >= 180
>58967	PrimaryExpression	180
>58968	Identifier	rot360
>58969	CompoundStatement	 
>58970	ExpressionStatement	 
>58971	AssignmentExpr	x = - x
>58972	UnaryOp	- x
>58973	Identifier	x
>58974	UnaryOperator	-
>58975	Identifier	x
>58976	ExpressionStatement	 
>58977	AssignmentExpr	x = swap
>58978	Identifier	swap
>58979	Identifier	x
>58980	ExpressionStatement	 
>58981	AssignmentExpr	y = x
>58982	Identifier	x
>58983	Identifier	y
>58984	IdentifierDeclStatement	 
>58985	IdentifierDecl	swap = y
>58986	AssignmentExpr	swap = y
>58987	Identifier	y
>58988	Identifier	y
>58989	Identifier	swap
>58990	IdentifierDeclType	int
>58991	Condition	 
>58992	AndExpression	rot360 >= 90 && rot360 < 180
>58993	RelationalExpression	rot360 < 180
>58994	PrimaryExpression	180
>58995	Identifier	rot360
>58996	RelationalExpression	rot360 >= 90
>58997	PrimaryExpression	90
>58998	Identifier	rot360
>58999	CompoundStatement	 
>59000	Condition	 
>59001	AndExpression	rot360 >= 0 && rot360 < 90
>59002	RelationalExpression	rot360 < 90
>59003	PrimaryExpression	90
>59004	Identifier	rot360
>59005	RelationalExpression	rot360 >= 0
>59006	PrimaryExpression	0
>59007	Identifier	rot360
>59008	IdentifierDeclStatement	 
>59009	IdentifierDecl	y = et -> grid [ i ] . y
>59010	AssignmentExpr	y = et -> grid [ i ] . y
>59011	MemberAccess	et -> grid [ i ] . y
>59012	Identifier	y
>59013	ArrayIndexing	et -> grid [ i ]
>59014	Identifier	i
>59015	PtrMemberAccess	et -> grid
>59016	Identifier	grid
>59017	Identifier	et
>59018	Identifier	y
>59019	Identifier	y
>59020	IdentifierDeclType	int
>59021	IdentifierDeclStatement	 
>59022	IdentifierDecl	x = et -> grid [ i ] . x
>59023	AssignmentExpr	x = et -> grid [ i ] . x
>59024	MemberAccess	et -> grid [ i ] . x
>59025	Identifier	x
>59026	ArrayIndexing	et -> grid [ i ]
>59027	Identifier	i
>59028	PtrMemberAccess	et -> grid
>59029	Identifier	grid
>59030	Identifier	et
>59031	Identifier	x
>59032	Identifier	x
>59033	IdentifierDeclType	int
>59034	IdentifierDeclStatement	 
>59035	IdentifierDecl	t ( position )
>59036	Identifier	position
>59037	Identifier	t
>59038	IdentifierDeclType	TileVector
>59039	IncDecOp	 
>59040	IncDec	++
>59041	Identifier	i
>59042	Condition	 
>59043	RelationalExpression	i < et -> grid . size ( )
>59044	CallExpression	et -> grid . size ( )
>59045	ArgumentList	 
>59046	Callee	et -> grid . size
>59047	MemberAccess	et -> grid . size
>59048	Identifier	size
>59049	PtrMemberAccess	et -> grid
>59050	Identifier	grid
>59051	Identifier	et
>59052	Identifier	i
>59053	ForInit	 
>59054	IdentifierDeclStatement	int i = 0 ;
>59055	IdentifierDecl	i = 0
>59056	AssignmentExpr	i = 0
>59057	PrimaryExpression	0
>59058	Identifier	i
>59059	Identifier	i
>59060	IdentifierDeclType	int
>59082	FunctionDef	Game 
>59083	ParameterList	 
>59084	ReturnType	void
>59085	CompoundStatement	 
>59086	ExpressionStatement	 
>59087	CallExpression	debugLog ( \"Game
>59088	ArgumentList	\"Game
>59089	Argument	\"Game
>59090	PrimaryExpression	\"Game
>59091	Callee	debugLog
>59092	Identifier	debugLog
>59093	ExpressionStatement	 
>59094	AssignmentExpr	dsq -> routeShoulder = true
>59095	Identifier	true
>59096	PtrMemberAccess	dsq -> routeShoulder
>59097	Identifier	routeShoulder
>59098	Identifier	dsq
>59099	ExpressionStatement	 
>59100	AssignmentExpr	active = false
>59101	Identifier	false
>59102	Identifier	active
>59103	ExpressionStatement	 
>59104	CallExpression	core -> sound -> clearLocalSounds ( )
>59105	ArgumentList	 
>59106	Callee	core -> sound -> clearLocalSounds
>59107	PtrMemberAccess	core -> sound -> clearLocalSounds
>59108	Identifier	clearLocalSounds
>59109	PtrMemberAccess	core -> sound
>59110	Identifier	sound
>59111	Identifier	core
>59112	ExpressionStatement	 
>59113	CallExpression	debugLog ( \"clear Local Sounds\" )
>59114	ArgumentList	\"clear Local Sounds\"
>59115	Argument	\"clear Local Sounds\"
>59116	PrimaryExpression	\"clear Local Sounds\"
>59117	Callee	debugLog
>59118	Identifier	debugLog
>59119	ExpressionStatement	 
>59120	CallExpression	Spore 
>59121	ArgumentList	 
>59122	Callee	Spore 
>59123	Identifier	Spore 
>59124	ExpressionStatement	 
>59125	CallExpression	debugLog ( \"killAllSpores\" )
>59126	ArgumentList	\"killAllSpores\"
>59127	Argument	\"killAllSpores\"
>59128	PrimaryExpression	\"killAllSpores\"
>59129	Callee	debugLog
>59130	Identifier	debugLog
>59131	ExpressionStatement	 
>59132	CallExpression	Web 
>59133	ArgumentList	 
>59134	Callee	Web 
>59135	Identifier	Web 
>59136	ExpressionStatement	 
>59137	CallExpression	debugLog ( \"killAllWebs\" )
>59138	ArgumentList	\"killAllWebs\"
>59139	Argument	\"killAllWebs\"
>59140	PrimaryExpression	\"killAllWebs\"
>59141	Callee	debugLog
>59142	Identifier	debugLog
>59143	ExpressionStatement	 
>59144	CallExpression	Beam 
>59145	ArgumentList	 
>59146	Callee	Beam 
>59147	Identifier	Beam 
>59148	ExpressionStatement	 
>59149	CallExpression	debugLog ( \"killAllBeams\" )
>59150	ArgumentList	\"killAllBeams\"
>59151	Argument	\"killAllBeams\"
>59152	PrimaryExpression	\"killAllBeams\"
>59153	Callee	debugLog
>59154	Identifier	debugLog
>59155	ExpressionStatement	 
>59156	CallExpression	Shot 
>59157	ArgumentList	 
>59158	Callee	Shot 
>59159	Identifier	Shot 
>59160	ExpressionStatement	 
>59161	CallExpression	Shot 
>59162	ArgumentList	 
>59163	Callee	Shot 
>59164	Identifier	Shot 
>59165	ExpressionStatement	 
>59166	CallExpression	debugLog ( \"killAllShots\" )
>59167	ArgumentList	\"killAllShots\"
>59168	Argument	\"killAllShots\"
>59169	PrimaryExpression	\"killAllShots\"
>59170	Callee	debugLog
>59171	Identifier	debugLog
>59172	ExpressionStatement	 
>59173	CallExpression	clearObsRows ( )
>59174	ArgumentList	 
>59175	Callee	clearObsRows
>59176	Identifier	clearObsRows
>59177	ExpressionStatement	 
>59178	AssignmentExpr	worldMapRender = 0
>59179	PrimaryExpression	0
>59180	Identifier	worldMapRender
>59181	ExpressionStatement	 
>59182	AssignmentExpr	gridRenderUser2 = 0
>59183	PrimaryExpression	0
>59184	Identifier	gridRenderUser2
>59185	ExpressionStatement	 
>59186	AssignmentExpr	gridRenderUser1 = 0
>59187	PrimaryExpression	0
>59188	Identifier	gridRenderUser1
>59189	ExpressionStatement	 
>59190	AssignmentExpr	gridRenderEnt = 0
>59191	PrimaryExpression	0
>59192	Identifier	gridRenderEnt
>59193	ExpressionStatement	 
>59194	AssignmentExpr	edgeRender = 0
>59195	PrimaryExpression	0
>59196	Identifier	edgeRender
>59197	ExpressionStatement	 
>59198	AssignmentExpr	gridRender3 = 0
>59199	PrimaryExpression	0
>59200	Identifier	gridRender3
>59201	ExpressionStatement	 
>59202	AssignmentExpr	gridRender2 = 0
>59203	PrimaryExpression	0
>59204	Identifier	gridRender2
>59205	ExpressionStatement	 
>59206	AssignmentExpr	gridRender = 0
>59207	PrimaryExpression	0
>59208	Identifier	gridRender
>59209	ExpressionStatement	 
>59210	AssignmentExpr	miniMapRender = 0
>59211	PrimaryExpression	0
>59212	Identifier	miniMapRender
>59213	ExpressionStatement	 
>59214	AssignmentExpr	controlHint_text = 0
>59215	PrimaryExpression	0
>59216	Identifier	controlHint_text
>59217	ExpressionStatement	 
>59218	AssignmentExpr	controlHint_mouseLeft = controlHint_mouseRight = controlHint_mouseMiddle = controlHint_mouseBody = controlHint_\
>59219	AssignmentExpr	controlHint_mouseRight = controlHint_mouseMiddle = controlHint_mouseBody = controlHint_bg = controlHint_\
>59220	AssignmentExpr	controlHint_mouseMiddle = controlHint_mouseBody = controlHint_bg = controlHint_image = 0
>59221	AssignmentExpr	controlHint_mouseBody = controlHint_bg = controlHint_image = 0
>59222	AssignmentExpr	controlHint_bg = controlHint_image = 0
>59223	AssignmentExpr	controlHint_image = 0
>59224	PrimaryExpression	0
>59225	Identifier	controlHint_image
>59226	Identifier	controlHint_bg
>59227	Identifier	controlHint_mouseBody
>59228	Identifier	controlHint_mouseMiddle
>59229	Identifier	controlHint_mouseRight
>59230	Identifier	controlHint_mouseLeft
>59231	ExpressionStatement	 
>59232	CallExpression	sceneColor . stop ( )
>59233	ArgumentList	 
>59234	Callee	sceneColor . stop
>59235	MemberAccess	sceneColor . stop
>59236	Identifier	stop
>59237	Identifier	sceneColor
>59238	ExpressionStatement	 
>59239	AssignmentExpr	core -> cameraPos = Vector ( 0 , 0 )
>59240	CallExpression	Vector ( 0 , 0 )
>59241	ArgumentList	0
>59242	Argument	0
>59243	PrimaryExpression	0
>59244	Argument	0
>59245	PrimaryExpression	0
>59246	Callee	Vector
>59247	Identifier	Vector
>59248	PtrMemberAccess	core -> cameraPos
>59249	Identifier	cameraPos
>59250	Identifier	core
>59251	ExpressionStatement	 
>59252	AssignmentExpr	cameraFollow = 0
>59253	PrimaryExpression	0
>59254	Identifier	cameraFollow
>59255	ExpressionStatement	 
>59256	CallExpression	sceneEditor . shutdown ( )
>59257	ArgumentList	 
>59258	Callee	sceneEditor . shutdown
>59259	MemberAccess	sceneEditor . shutdown
>59260	Identifier	shutdown
>59261	Identifier	sceneEditor
>59262	ExpressionStatement	 
>59263	AssignmentExpr	avatar = 0
>59264	PrimaryExpression	0
>59265	Identifier	avatar
>59266	ExpressionStatement	 
>59267	CallExpression	dsq -> clearEntities ( )
>59268	ArgumentList	 
>59269	Callee	dsq -> clearEntities
>59270	PtrMemberAccess	dsq -> clearEntities
>59271	Identifier	clearEntities
>59272	Identifier	dsq
>59273	ExpressionStatement	 
>59274	CallExpression	dsq -> clearElements ( )
>59275	ArgumentList	 
>59276	Callee	dsq -> clearElements
>59277	PtrMemberAccess	dsq -> clearElements
>59278	Identifier	clearElements
>59279	Identifier	dsq
>59280	ExpressionStatement	 
>59281	CallExpression	StateObject 
>59282	ArgumentList	 
>59283	Callee	StateObject 
>59284	Identifier	StateObject 
>59285	ExpressionStatement	 
>59286	CallExpression	clearPaths ( )
>59287	ArgumentList	 
>59288	Callee	clearPaths
>59289	Identifier	clearPaths
>59290	ForStatement	for ( int i = 0 ; i < getNumPaths ( ) ; i ++ )
>59291	CompoundStatement	 
>59292	ExpressionStatement	 
>59293	Identifier	p
>59294	Statement	 
>59295	ExpressionStatement	 
>59296	CallExpression	p -> destroy ( )
>59297	ArgumentList	 
>59298	Callee	p -> destroy
>59299	PtrMemberAccess	p -> destroy
>59300	Identifier	destroy
>59301	Identifier	p
>59302	IdentifierDeclStatement	 
>59303	IdentifierDecl	* p = getPath ( i )
>59304	AssignmentExpr	* p = getPath ( i )
>59305	CallExpression	getPath ( i )
>59306	ArgumentList	i
>59307	Argument	i
>59308	Identifier	i
>59309	Callee	getPath
>59310	Identifier	getPath
>59311	Identifier	p
>59312	Identifier	p
>59313	IdentifierDeclType	Path *
>59314	IncDecOp	 
>59315	IncDec	++
>59316	Identifier	i
>59317	Condition	 
>59318	RelationalExpression	i < getNumPaths ( )
>59319	CallExpression	getNumPaths ( )
>59320	ArgumentList	 
>59321	Callee	getNumPaths
>59322	Identifier	getNumPaths
>59323	Identifier	i
>59324	ForInit	 
>59325	IdentifierDeclStatement	int i = 0 ;
>59326	IdentifierDecl	i = 0
>59327	AssignmentExpr	i = 0
>59328	PrimaryExpression	0
>59329	Identifier	i
>59330	Identifier	i
>59331	IdentifierDeclType	int
>59332	ExpressionStatement	 
>59333	CallExpression	core -> globalScaleChanged ( )
>59334	ArgumentList	 
>59335	Callee	core -> globalScaleChanged
>59336	PtrMemberAccess	core -> globalScaleChanged
>59337	Identifier	globalScaleChanged
>59338	Identifier	core
>59339	ExpressionStatement	 
>59340	AssignmentExpr	dsq -> globalScale = Vector ( 1 , 1 )
>59341	CallExpression	Vector ( 1 , 1 )
>59342	ArgumentList	1
>59343	Argument	1
>59344	PrimaryExpression	1
>59345	Argument	1
>59346	PrimaryExpression	1
>59347	Callee	Vector
>59348	Identifier	Vector
>59349	PtrMemberAccess	dsq -> globalScale
>59350	Identifier	globalScale
>59351	Identifier	dsq
>59352	ExpressionStatement	 
>59353	AssignmentExpr	dsq -> game -> avatar -> myZoom = Vector ( 1 , 1 )
>59354	CallExpression	Vector ( 1 , 1 )
>59355	ArgumentList	1
>59356	Argument	1
>59357	PrimaryExpression	1
>59358	Argument	1
>59359	PrimaryExpression	1
>59360	Callee	Vector
>59361	Identifier	Vector
>59362	PtrMemberAccess	dsq -> game -> avatar -> myZoom
>59363	Identifier	myZoom
>59364	PtrMemberAccess	dsq -> game -> avatar
>59365	Identifier	avatar
>59366	PtrMemberAccess	dsq -> game
>59367	Identifier	game
>59368	Identifier	dsq
>59369	ExpressionStatement	 
>59370	CallExpression	dsq -> globalScale . stop ( )
>59371	ArgumentList	 
>59372	Callee	dsq -> globalScale . stop
>59373	MemberAccess	dsq -> globalScale . stop
>59374	Identifier	stop
>59375	PtrMemberAccess	dsq -> globalScale
>59376	Identifier	globalScale
>59377	Identifier	dsq
>59378	ExpressionStatement	 
>59379	CallExpression	dsq -> game -> avatar -> myZoom . stop ( )
>59380	ArgumentList	 
>59381	Callee	dsq -> game -> avatar -> myZoom . stop
>59382	MemberAccess	dsq -> game -> avatar -> myZoom . stop
>59383	Identifier	stop
>59384	PtrMemberAccess	dsq -> game -> avatar -> myZoom
>59385	Identifier	myZoom
>59386	PtrMemberAccess	dsq -> game -> avatar
>59387	Identifier	avatar
>59388	PtrMemberAccess	dsq -> game
>59389	Identifier	game
>59390	Identifier	dsq
>59391	ExpressionStatement	 
>59392	CallExpression	dsq -> game -> toggleOverrideZoom ( false )
>59393	ArgumentList	false
>59394	Argument	false
>59395	Identifier	false
>59396	Callee	dsq -> game -> toggleOverrideZoom
>59397	PtrMemberAccess	dsq -> game -> toggleOverrideZoom
>59398	Identifier	toggleOverrideZoom
>59399	PtrMemberAccess	dsq -> game
>59400	Identifier	game
>59401	Identifier	dsq
>59402	ExpressionStatement	 
>59403	AssignmentExpr	dsq -> continuity . zoom = core -> globalScale
>59404	PtrMemberAccess	core -> globalScale
>59405	Identifier	globalScale
>59406	Identifier	core
>59407	MemberAccess	dsq -> continuity . zoom
>59408	Identifier	zoom
>59409	PtrMemberAccess	dsq -> continuity
>59410	Identifier	continuity
>59411	Identifier	dsq
>59412	IfStatement	if ( saveFile )
>59413	CompoundStatement	 
>59414	ExpressionStatement	 
>59415	AssignmentExpr	saveFile = 0
>59416	PrimaryExpression	0
>59417	Identifier	saveFile
>59418	ExpressionStatement	 
>59419	Identifier	saveFile
>59420	Statement	 
>59421	Condition	 
>59422	Identifier	saveFile
>59423	ExpressionStatement	 
>59424	AssignmentExpr	dsq -> getRenderObjectLayer ( LR_BLACKGROUND ) -> update = true
>59425	Identifier	true
>59426	PtrMemberAccess	dsq -> getRenderObjectLayer ( LR_BLACKGROUND ) -> update
>59427	Identifier	update
>59428	CallExpression	dsq -> getRenderObjectLayer ( LR_BLACKGROUND )
>59429	ArgumentList	LR_BLACKGROUND
>59430	Argument	LR_BLACKGROUND
>59431	Identifier	LR_BLACKGROUND
>59432	Callee	dsq -> getRenderObjectLayer
>59433	PtrMemberAccess	dsq -> getRenderObjectLayer
>59434	Identifier	getRenderObjectLayer
>59435	Identifier	dsq
>59436	IfStatement	if ( core -> afterEffectManager )
>59437	ExpressionStatement	 
>59438	CallExpression	core -> afterEffectManager -> clear ( )
>59439	ArgumentList	 
>59440	Callee	core -> afterEffectManager -> clear
>59441	PtrMemberAccess	core -> afterEffectManager -> clear
>59442	Identifier	clear
>59443	PtrMemberAccess	core -> afterEffectManager
>59444	Identifier	afterEffectManager
>59445	Identifier	core
>59446	Condition	 
>59447	PtrMemberAccess	core -> afterEffectManager
>59448	Identifier	afterEffectManager
>59449	Identifier	core
>59450	ExpressionStatement	 
>59451	CallExpression	dsq -> shakeCamera ( 0 , 0 )
>59452	ArgumentList	0
>59453	Argument	0
>59454	PrimaryExpression	0
>59455	Argument	0
>59456	PrimaryExpression	0
>59457	Callee	dsq -> shakeCamera
>59458	PtrMemberAccess	dsq -> shakeCamera
>59459	Identifier	shakeCamera
>59460	Identifier	dsq
>59461	ExpressionStatement	 
>59462	CallExpression	dsq -> darkLayer . toggle ( 0 )
>59463	ArgumentList	0
>59464	Argument	0
>59465	PrimaryExpression	0
>59466	Callee	dsq -> darkLayer . toggle
>59467	MemberAccess	dsq -> darkLayer . toggle
>59468	Identifier	toggle
>59469	PtrMemberAccess	dsq -> darkLayer
>59470	Identifier	darkLayer
>59471	Identifier	dsq
>59472	ExpressionStatement	 
>59473	CallExpression	dsq -> setCursor ( CURSOR_NORMAL )
>59474	ArgumentList	CURSOR_NORMAL
>59475	Argument	CURSOR_NORMAL
>59476	Identifier	CURSOR_NORMAL
>59477	Callee	dsq -> setCursor
>59478	PtrMemberAccess	dsq -> setCursor
>59479	Identifier	setCursor
>59480	Identifier	dsq
>59481	ExpressionStatement	 
>59482	CallExpression	elementInteractionList . clear ( )
>59483	ArgumentList	 
>59484	Callee	elementInteractionList . clear
>59485	MemberAccess	elementInteractionList . clear
>59486	Identifier	clear
>59487	Identifier	elementInteractionList
>59488	ExpressionStatement	 
>59489	CallExpression	elementUpdateList . clear ( )
>59490	ArgumentList	 
>59491	Callee	elementUpdateList . clear
>59492	MemberAccess	elementUpdateList . clear
>59493	Identifier	clear
>59494	Identifier	elementUpdateList
>59495	ExpressionStatement	 
>59496	AssignmentExpr	core -> particlesPaused = false
>59497	Identifier	false
>59498	PtrMemberAccess	core -> particlesPaused
>59499	Identifier	particlesPaused
>59500	Identifier	core
>59501	ExpressionStatement	 
>59502	CallExpression	ingredients . clear ( )
>59503	ArgumentList	 
>59504	Callee	ingredients . clear
>59505	MemberAccess	ingredients . clear
>59506	Identifier	clear
>59507	Identifier	ingredients
>59508	ExpressionStatement	 
>59509	CallExpression	dsq -> sound -> clearFadingSfx ( )
>59510	ArgumentList	 
>59511	Callee	dsq -> sound -> clearFadingSfx
>59512	PtrMemberAccess	dsq -> sound -> clearFadingSfx
>59513	Identifier	clearFadingSfx
>59514	PtrMemberAccess	dsq -> sound
>59515	Identifier	sound
>59516	Identifier	dsq
>59517	ExpressionStatement	 
>59518	CallExpression	dsq -> rumble ( 0 , 0 , 0 )
>59519	ArgumentList	0
>59520	Argument	0
>59521	PrimaryExpression	0
>59522	Argument	0
>59523	PrimaryExpression	0
>59524	Argument	0
>59525	PrimaryExpression	0
>59526	Callee	dsq -> rumble
>59527	PtrMemberAccess	dsq -> rumble
>59528	Identifier	rumble
>59529	Identifier	dsq
>59530	ExpressionStatement	 
>59531	CallExpression	dsq -> main ( fadeTime )
>59532	ArgumentList	fadeTime
>59533	Argument	fadeTime
>59534	Identifier	fadeTime
>59535	Callee	dsq -> main
>59536	PtrMemberAccess	dsq -> main
>59537	Identifier	main
>59538	Identifier	dsq
>59539	ExpressionStatement	 
>59540	CallExpression	dsq -> overlay -> alpha . interpolateTo ( 1 , fadeTime )
>59541	ArgumentList	1
>59542	Argument	fadeTime
>59543	Identifier	fadeTime
>59544	Argument	1
>59545	PrimaryExpression	1
>59546	Callee	dsq -> overlay -> alpha . interpolateTo
>59547	MemberAccess	dsq -> overlay -> alpha . interpolateTo
>59548	Identifier	interpolateTo
>59549	PtrMemberAccess	dsq -> overlay -> alpha
>59550	Identifier	alpha
>59551	PtrMemberAccess	dsq -> overlay
>59552	Identifier	overlay
>59553	Identifier	dsq
>59554	ExpressionStatement	 
>59555	AssignmentExpr	dsq -> overlay -> color = 0
>59556	PrimaryExpression	0
>59557	PtrMemberAccess	dsq -> overlay -> color
>59558	Identifier	color
>59559	PtrMemberAccess	dsq -> overlay
>59560	Identifier	overlay
>59561	Identifier	dsq
>59562	ExpressionStatement	 
>59563	CallExpression	clearControlHint ( )
>59564	ArgumentList	 
>59565	Callee	clearControlHint
>59566	Identifier	clearControlHint
>59567	ExpressionStatement	 
>59568	AssignmentExpr	controlHint_ignoreClear = false
>59569	Identifier	false
>59570	Identifier	controlHint_ignoreClear
>59571	ExpressionStatement	 
>59572	CallExpression	debugLog ( \"control hint\" )
>59573	ArgumentList	\"control hint\"
>59574	Argument	\"control hint\"
>59575	PrimaryExpression	\"control hint\"
>59576	Callee	debugLog
>59577	Identifier	debugLog
>59578	IfStatement	if ( ! isInGameMenu ( ) )
>59579	ExpressionStatement	 
>59580	CallExpression	avatar -> disableInput ( )
>59581	ArgumentList	 
>59582	Callee	avatar -> disableInput
>59583	PtrMemberAccess	avatar -> disableInput
>59584	Identifier	disableInput
>59585	Identifier	avatar
>59586	Condition	 
>59587	UnaryOp	! isInGameMenu ( )
>59588	CallExpression	isInGameMenu ( )
>59589	ArgumentList	 
>59590	Callee	isInGameMenu
>59591	Identifier	isInGameMenu
>59592	UnaryOperator	!
>59593	ExpressionStatement	 
>59594	CallExpression	dsq -> toggleCursor ( 0 , fadeTime )
>59595	ArgumentList	0
>59596	Argument	fadeTime
>59597	Identifier	fadeTime
>59598	Argument	0
>59599	PrimaryExpression	0
>59600	Callee	dsq -> toggleCursor
>59601	PtrMemberAccess	dsq -> toggleCursor
>59602	Identifier	toggleCursor
>59603	Identifier	dsq
>59604	ExpressionStatement	 
>59605	CallExpression	debugLog ( \"toggleCursor\" )
>59606	ArgumentList	\"toggleCursor\"
>59607	Argument	\"toggleCursor\"
>59608	PrimaryExpression	\"toggleCursor\"
>59609	Callee	debugLog
>59610	Identifier	debugLog
>59611	ExpressionStatement	 
>59612	CallExpression	dsq -> loops . stopAll ( )
>59613	ArgumentList	 
>59614	Callee	dsq -> loops . stopAll
>59615	MemberAccess	dsq -> loops . stopAll
>59616	Identifier	stopAll
>59617	PtrMemberAccess	dsq -> loops
>59618	Identifier	loops
>59619	Identifier	dsq
>59620	ExpressionStatement	 
>59621	CallExpression	debugLog ( \"bgSfxLoop\" )
>59622	ArgumentList	\"bgSfxLoop\"
>59623	Argument	\"bgSfxLoop\"
>59624	PrimaryExpression	\"bgSfxLoop\"
>59625	Callee	debugLog
>59626	Identifier	debugLog
>59627	ExpressionStatement	 
>59628	CallExpression	dsq -> gameSpeed . interpolateTo ( 1 , 0 )
>59629	ArgumentList	1
>59630	Argument	0
>59631	PrimaryExpression	0
>59632	Argument	1
>59633	PrimaryExpression	1
>59634	Callee	dsq -> gameSpeed . interpolateTo
>59635	MemberAccess	dsq -> gameSpeed . interpolateTo
>59636	Identifier	interpolateTo
>59637	PtrMemberAccess	dsq -> gameSpeed
>59638	Identifier	gameSpeed
>59639	Identifier	dsq
>59640	ExpressionStatement	 
>59641	CallExpression	debugLog ( \"gameSpeed\" )
>59642	ArgumentList	\"gameSpeed\"
>59643	Argument	\"gameSpeed\"
>59644	PrimaryExpression	\"gameSpeed\"
>59645	Callee	debugLog
>59646	Identifier	debugLog
>59647	IfStatement	if ( sceneEditor . isOn ( ) )
>59648	ExpressionStatement	 
>59649	CallExpression	sceneEditor . toggle ( false )
>59650	ArgumentList	false
>59651	Argument	false
>59652	Identifier	false
>59653	Callee	sceneEditor . toggle
>59654	MemberAccess	sceneEditor . toggle
>59655	Identifier	toggle
>59656	Identifier	sceneEditor
>59657	Condition	 
>59658	CallExpression	sceneEditor . isOn ( )
>59659	ArgumentList	 
>59660	Callee	sceneEditor . isOn
>59661	MemberAccess	sceneEditor . isOn
>59662	Identifier	isOn
>59663	Identifier	sceneEditor
>59664	ExpressionStatement	 
>59665	CallExpression	debugLog ( \"toggle sceneEditor\" )
>59666	ArgumentList	\"toggle sceneEditor\"
>59667	Argument	\"toggle sceneEditor\"
>59668	PrimaryExpression	\"toggle sceneEditor\"
>59669	Callee	debugLog
>59670	Identifier	debugLog
>59671	IfStatement	if ( avatar )
>59672	CompoundStatement	 
>59673	ExpressionStatement	 
>59674	CallExpression	avatar -> endOfGameState ( )
>59675	ArgumentList	 
>59676	Callee	avatar -> endOfGameState
>59677	PtrMemberAccess	avatar -> endOfGameState
>59678	Identifier	endOfGameState
>59679	Identifier	avatar
>59680	Condition	 
>59681	Identifier	avatar
>59682	ExpressionStatement	 
>59683	CallExpression	debugLog ( \"avatar->endOfGameState()\" )
>59684	ArgumentList	\"avatar->endOfGameState()\"
>59685	Argument	\"avatar->endOfGameState()\"
>59686	PrimaryExpression	\"avatar->endOfGameState()\"
>59687	Callee	debugLog
>59688	Identifier	debugLog
>59689	ExpressionStatement	 
>59690	AssignmentExpr	shuttingDownGameState = true
>59691	Identifier	true
>59692	Identifier	shuttingDownGameState
>59693	ExpressionStatement	 
>59694	CallExpression	debugLog ( \"Entering Game
>59695	ArgumentList	\"Entering Game
>59696	Argument	\"Entering Game
>59697	PrimaryExpression	\"Entering Game
>59698	Callee	debugLog
>59699	Identifier	debugLog
>59700	ExpressionStatement	 
>59701	CallExpression	dropIngrNames . clear ( )
>59702	ArgumentList	 
>59703	Callee	dropIngrNames . clear
>59704	MemberAccess	dropIngrNames . clear
>59705	Identifier	clear
>59706	Identifier	dropIngrNames
>59707	ExpressionStatement	 
>59708	CallExpression	dsq -> subtitlePlayer . hide ( fadeTime )
>59709	ArgumentList	fadeTime
>59710	Argument	fadeTime
>59711	Identifier	fadeTime
>59712	Callee	dsq -> subtitlePlayer . hide
>59713	MemberAccess	dsq -> subtitlePlayer . hide
>59714	Identifier	hide
>59715	PtrMemberAccess	dsq -> subtitlePlayer
>59716	Identifier	subtitlePlayer
>59717	Identifier	dsq
>59718	ExpressionStatement	 
>59719	CallExpression	dsq -> toggleVersionLabel ( false )
>59720	ArgumentList	false
>59721	Argument	false
>59722	Identifier	false
>59723	Callee	dsq -> toggleVersionLabel
>59724	PtrMemberAccess	dsq -> toggleVersionLabel
>59725	Identifier	toggleVersionLabel
>59726	Identifier	dsq
>59727	IdentifierDeclStatement	 
>59728	IdentifierDecl	fadeTime = 0.25
>59729	AssignmentExpr	fadeTime = 0.25
>59730	PrimaryExpression	0.25
>59731	Identifier	fadeTime
>59732	Identifier	fadeTime
>59733	IdentifierDeclType	const float
>59810	FunctionDef	Game 
>59811	ParameterList	 
>59812	ReturnType	bool
>59813	CompoundStatement	 
>59814	ReturnStatement	 
>59815	Identifier	active
>59820	FunctionDef	isBoxIn (Vector pos1 , Vector sz1 , Vector pos2 , Vector sz2)
>59821	ParameterList	Vector pos1 , Vector sz1 , Vector pos2 , Vector sz2
>59822	Parameter	 
>59823	Identifier	sz2
>59824	ParameterType	Vector
>59825	Parameter	 
>59826	Identifier	pos2
>59827	ParameterType	Vector
>59828	Parameter	 
>59829	Identifier	sz1
>59830	ParameterType	Vector
>59831	Parameter	 
>59832	Identifier	pos1
>59833	ParameterType	Vector
>59834	ReturnType	bool
>59835	CompoundStatement	 
>59836	ReturnStatement	 
>59837	Identifier	false
>59838	IfStatement	if ( ( pos1 . x - sz1 . x > pos2 . x - sz2 . x ) && ( pos1 . x - sz1 . x < pos2 . x + sz2 . x ) )
>59839	ElseStatement	else
>59840	IfStatement	if ( ( pos1 . x + sz1 . x > pos2 . x - sz2 . x ) && ( pos1 . x + sz1 . x < pos2 . x + sz2 . x ) )
>59841	CompoundStatement	 
>59842	IfStatement	if ( ( pos1 . y - sz1 . y > pos2 . y - sz2 . y ) && ( pos1 . y - sz1 . y < pos2 . y + sz2 . y ) )
>59843	ElseStatement	else
>59844	IfStatement	if ( ( pos1 . y + sz1 . y > pos2 . y - sz2 . y ) && ( pos1 . y + sz1 . y < pos2 . y + sz2 . y ) )
>59845	ReturnStatement	 
>59846	Identifier	true
>59847	Condition	 
>59848	AndExpression	( pos1 . y + sz1 . y > pos2 . y - sz2 . y ) && ( pos1 . y + sz1 . y < pos2 . y + sz2 . y )
>59849	RelationalExpression	pos1 . y + sz1 . y < pos2 . y + sz2 . y
>59850	AdditiveExpression	pos2 . y + sz2 . y
>59851	MemberAccess	sz2 . y
>59852	Identifier	y
>59853	Identifier	sz2
>59854	MemberAccess	pos2 . y
>59855	Identifier	y
>59856	Identifier	pos2
>59857	AdditiveExpression	pos1 . y + sz1 . y
>59858	MemberAccess	sz1 . y
>59859	Identifier	y
>59860	Identifier	sz1
>59861	MemberAccess	pos1 . y
>59862	Identifier	y
>59863	Identifier	pos1
>59864	RelationalExpression	pos1 . y + sz1 . y > pos2 . y - sz2 . y
>59865	AdditiveExpression	pos2 . y - sz2 . y
>59866	MemberAccess	sz2 . y
>59867	Identifier	y
>59868	Identifier	sz2
>59869	MemberAccess	pos2 . y
>59870	Identifier	y
>59871	Identifier	pos2
>59872	AdditiveExpression	pos1 . y + sz1 . y
>59873	MemberAccess	sz1 . y
>59874	Identifier	y
>59875	Identifier	sz1
>59876	MemberAccess	pos1 . y
>59877	Identifier	y
>59878	Identifier	pos1
>59879	ReturnStatement	 
>59880	Identifier	true
>59881	Condition	 
>59882	AndExpression	( pos1 . y - sz1 . y > pos2 . y - sz2 . y ) && ( pos1 . y - sz1 . y < pos2 . y + sz2 . y )
>59883	RelationalExpression	pos1 . y - sz1 . y < pos2 . y + sz2 . y
>59884	AdditiveExpression	pos2 . y + sz2 . y
>59885	MemberAccess	sz2 . y
>59886	Identifier	y
>59887	Identifier	sz2
>59888	MemberAccess	pos2 . y
>59889	Identifier	y
>59890	Identifier	pos2
>59891	AdditiveExpression	pos1 . y - sz1 . y
>59892	MemberAccess	sz1 . y
>59893	Identifier	y
>59894	Identifier	sz1
>59895	MemberAccess	pos1 . y
>59896	Identifier	y
>59897	Identifier	pos1
>59898	RelationalExpression	pos1 . y - sz1 . y > pos2 . y - sz2 . y
>59899	AdditiveExpression	pos2 . y - sz2 . y
>59900	MemberAccess	sz2 . y
>59901	Identifier	y
>59902	Identifier	sz2
>59903	MemberAccess	pos2 . y
>59904	Identifier	y
>59905	Identifier	pos2
>59906	AdditiveExpression	pos1 . y - sz1 . y
>59907	MemberAccess	sz1 . y
>59908	Identifier	y
>59909	Identifier	sz1
>59910	MemberAccess	pos1 . y
>59911	Identifier	y
>59912	Identifier	pos1
>59913	Condition	 
>59914	AndExpression	( pos1 . x + sz1 . x > pos2 . x - sz2 . x ) && ( pos1 . x + sz1 . x < pos2 . x + sz2 . x )
>59915	RelationalExpression	pos1 . x + sz1 . x < pos2 . x + sz2 . x
>59916	AdditiveExpression	pos2 . x + sz2 . x
>59917	MemberAccess	sz2 . x
>59918	Identifier	x
>59919	Identifier	sz2
>59920	MemberAccess	pos2 . x
>59921	Identifier	x
>59922	Identifier	pos2
>59923	AdditiveExpression	pos1 . x + sz1 . x
>59924	MemberAccess	sz1 . x
>59925	Identifier	x
>59926	Identifier	sz1
>59927	MemberAccess	pos1 . x
>59928	Identifier	x
>59929	Identifier	pos1
>59930	RelationalExpression	pos1 . x + sz1 . x > pos2 . x - sz2 . x
>59931	AdditiveExpression	pos2 . x - sz2 . x
>59932	MemberAccess	sz2 . x
>59933	Identifier	x
>59934	Identifier	sz2
>59935	MemberAccess	pos2 . x
>59936	Identifier	x
>59937	Identifier	pos2
>59938	AdditiveExpression	pos1 . x + sz1 . x
>59939	MemberAccess	sz1 . x
>59940	Identifier	x
>59941	Identifier	sz1
>59942	MemberAccess	pos1 . x
>59943	Identifier	x
>59944	Identifier	pos1
>59945	CompoundStatement	 
>59946	IfStatement	if ( ( pos1 . y - sz1 . y > pos2 . y - sz2 . y ) && ( pos1 . y - sz1 . y < pos2 . y + sz2 . y ) )
>59947	ElseStatement	else
>59948	IfStatement	if ( ( pos1 . y + sz1 . y > pos2 . y - sz2 . y ) && ( pos1 . y + sz1 . y < pos2 . y + sz2 . y ) )
>59949	ReturnStatement	 
>59950	Identifier	true
>59951	Condition	 
>59952	AndExpression	( pos1 . y + sz1 . y > pos2 . y - sz2 . y ) && ( pos1 . y + sz1 . y < pos2 . y + sz2 . y )
>59953	RelationalExpression	pos1 . y + sz1 . y < pos2 . y + sz2 . y
>59954	AdditiveExpression	pos2 . y + sz2 . y
>59955	MemberAccess	sz2 . y
>59956	Identifier	y
>59957	Identifier	sz2
>59958	MemberAccess	pos2 . y
>59959	Identifier	y
>59960	Identifier	pos2
>59961	AdditiveExpression	pos1 . y + sz1 . y
>59962	MemberAccess	sz1 . y
>59963	Identifier	y
>59964	Identifier	sz1
>59965	MemberAccess	pos1 . y
>59966	Identifier	y
>59967	Identifier	pos1
>59968	RelationalExpression	pos1 . y + sz1 . y > pos2 . y - sz2 . y
>59969	AdditiveExpression	pos2 . y - sz2 . y
>59970	MemberAccess	sz2 . y
>59971	Identifier	y
>59972	Identifier	sz2
>59973	MemberAccess	pos2 . y
>59974	Identifier	y
>59975	Identifier	pos2
>59976	AdditiveExpression	pos1 . y + sz1 . y
>59977	MemberAccess	sz1 . y
>59978	Identifier	y
>59979	Identifier	sz1
>59980	MemberAccess	pos1 . y
>59981	Identifier	y
>59982	Identifier	pos1
>59983	ReturnStatement	 
>59984	Identifier	true
>59985	Condition	 
>59986	AndExpression	( pos1 . y - sz1 . y > pos2 . y - sz2 . y ) && ( pos1 . y - sz1 . y < pos2 . y + sz2 . y )
>59987	RelationalExpression	pos1 . y - sz1 . y < pos2 . y + sz2 . y
>59988	AdditiveExpression	pos2 . y + sz2 . y
>59989	MemberAccess	sz2 . y
>59990	Identifier	y
>59991	Identifier	sz2
>59992	MemberAccess	pos2 . y
>59993	Identifier	y
>59994	Identifier	pos2
>59995	AdditiveExpression	pos1 . y - sz1 . y
>59996	MemberAccess	sz1 . y
>59997	Identifier	y
>59998	Identifier	sz1
>59999	MemberAccess	pos1 . y
>60000	Identifier	y
>60001	Identifier	pos1
>60002	RelationalExpression	pos1 . y - sz1 . y > pos2 . y - sz2 . y
>60003	AdditiveExpression	pos2 . y - sz2 . y
>60004	MemberAccess	sz2 . y
>60005	Identifier	y
>60006	Identifier	sz2
>60007	MemberAccess	pos2 . y
>60008	Identifier	y
>60009	Identifier	pos2
>60010	AdditiveExpression	pos1 . y - sz1 . y
>60011	MemberAccess	sz1 . y
>60012	Identifier	y
>60013	Identifier	sz1
>60014	MemberAccess	pos1 . y
>60015	Identifier	y
>60016	Identifier	pos1
>60017	Condition	 
>60018	AndExpression	( pos1 . x - sz1 . x > pos2 . x - sz2 . x ) && ( pos1 . x - sz1 . x < pos2 . x + sz2 . x )
>60019	RelationalExpression	pos1 . x - sz1 . x < pos2 . x + sz2 . x
>60020	AdditiveExpression	pos2 . x + sz2 . x
>60021	MemberAccess	sz2 . x
>60022	Identifier	x
>60023	Identifier	sz2
>60024	MemberAccess	pos2 . x
>60025	Identifier	x
>60026	Identifier	pos2
>60027	AdditiveExpression	pos1 . x - sz1 . x
>60028	MemberAccess	sz1 . x
>60029	Identifier	x
>60030	Identifier	sz1
>60031	MemberAccess	pos1 . x
>60032	Identifier	x
>60033	Identifier	pos1
>60034	RelationalExpression	pos1 . x - sz1 . x > pos2 . x - sz2 . x
>60035	AdditiveExpression	pos2 . x - sz2 . x
>60036	MemberAccess	sz2 . x
>60037	Identifier	x
>60038	Identifier	sz2
>60039	MemberAccess	pos2 . x
>60040	Identifier	x
>60041	Identifier	pos2
>60042	AdditiveExpression	pos1 . x - sz1 . x
>60043	MemberAccess	sz1 . x
>60044	Identifier	x
>60045	Identifier	sz1
>60046	MemberAccess	pos1 . x
>60047	Identifier	x
>60048	Identifier	pos1
>60066	FunctionDef	Game 
>60067	ParameterList	Vector a , Vector b , Vector c , Vector p
>60068	Parameter	 
>60069	Identifier	p
>60070	ParameterType	Vector
>60071	Parameter	 
>60072	Identifier	c
>60073	ParameterType	Vector
>60074	Parameter	 
>60075	Identifier	b
>60076	ParameterType	Vector
>60077	Parameter	 
>60078	Identifier	a
>60079	ParameterType	Vector
>60080	ReturnType	Vector
>60081	CompoundStatement	 
>60082	ReturnStatement	 
>60083	Identifier	Rca
>60084	IfStatement	if ( RbcDist < RabDist && RbcDist < RcaDist )
>60085	ReturnStatement	 
>60086	Identifier	Rbc
>60087	Condition	 
>60088	AndExpression	RbcDist < RabDist && RbcDist < RcaDist
>60089	RelationalExpression	RbcDist < RcaDist
>60090	Identifier	RcaDist
>60091	Identifier	RbcDist
>60092	RelationalExpression	RbcDist < RabDist
>60093	Identifier	RabDist
>60094	Identifier	RbcDist
>60095	IfStatement	if ( RabDist < RbcDist && RabDist < RcaDist )
>60096	CompoundStatement	 
>60097	ReturnStatement	 
>60098	Identifier	Rab
>60099	Condition	 
>60100	AndExpression	RabDist < RbcDist && RabDist < RcaDist
>60101	RelationalExpression	RabDist < RcaDist
>60102	Identifier	RcaDist
>60103	Identifier	RabDist
>60104	RelationalExpression	RabDist < RbcDist
>60105	Identifier	RbcDist
>60106	Identifier	RabDist
>60107	IdentifierDeclStatement	 
>60108	IdentifierDecl	RcaDist = Rca . getSquaredLength2D ( )
>60109	AssignmentExpr	RcaDist = Rca . getSquaredLength2D ( )
>60110	CallExpression	Rca . getSquaredLength2D ( )
>60111	ArgumentList	 
>60112	Callee	Rca . getSquaredLength2D
>60113	MemberAccess	Rca . getSquaredLength2D
>60114	Identifier	getSquaredLength2D
>60115	Identifier	Rca
>60116	Identifier	RcaDist
>60117	Identifier	RcaDist
>60118	IdentifierDeclType	int
>60119	IdentifierDeclStatement	 
>60120	IdentifierDecl	RbcDist = Rab . getSquaredLength2D ( )
>60121	AssignmentExpr	RbcDist = Rab . getSquaredLength2D ( )
>60122	CallExpression	Rab . getSquaredLength2D ( )
>60123	ArgumentList	 
>60124	Callee	Rab . getSquaredLength2D
>60125	MemberAccess	Rab . getSquaredLength2D
>60126	Identifier	getSquaredLength2D
>60127	Identifier	Rab
>60128	Identifier	RbcDist
>60129	Identifier	RbcDist
>60130	IdentifierDeclType	int
>60131	IdentifierDeclStatement	 
>60132	IdentifierDecl	RabDist = Rab . getSquaredLength2D ( )
>60133	AssignmentExpr	RabDist = Rab . getSquaredLength2D ( )
>60134	CallExpression	Rab . getSquaredLength2D ( )
>60135	ArgumentList	 
>60136	Callee	Rab . getSquaredLength2D
>60137	MemberAccess	Rab . getSquaredLength2D
>60138	Identifier	getSquaredLength2D
>60139	Identifier	Rab
>60140	Identifier	RabDist
>60141	Identifier	RabDist
>60142	IdentifierDeclType	int
>60143	IdentifierDeclStatement	 
>60144	IdentifierDecl	Rca = getClosestPointOnLine ( c , a , p )
>60145	AssignmentExpr	Rca = getClosestPointOnLine ( c , a , p )
>60146	CallExpression	getClosestPointOnLine ( c , a , p )
>60147	ArgumentList	c
>60148	Argument	p
>60149	Identifier	p
>60150	Argument	a
>60151	Identifier	a
>60152	Argument	c
>60153	Identifier	c
>60154	Callee	getClosestPointOnLine
>60155	Identifier	getClosestPointOnLine
>60156	Identifier	Rca
>60157	Identifier	Rca
>60158	IdentifierDeclType	Vector
>60159	IdentifierDeclStatement	 
>60160	IdentifierDecl	Rbc = getClosestPointOnLine ( b , c , p )
>60161	AssignmentExpr	Rbc = getClosestPointOnLine ( b , c , p )
>60162	CallExpression	getClosestPointOnLine ( b , c , p )
>60163	ArgumentList	b
>60164	Argument	p
>60165	Identifier	p
>60166	Argument	c
>60167	Identifier	c
>60168	Argument	b
>60169	Identifier	b
>60170	Callee	getClosestPointOnLine
>60171	Identifier	getClosestPointOnLine
>60172	Identifier	Rbc
>60173	Identifier	Rbc
>60174	IdentifierDeclType	Vector
>60175	IdentifierDeclStatement	 
>60176	IdentifierDecl	Rab = getClosestPointOnLine ( a , b , p )
>60177	AssignmentExpr	Rab = getClosestPointOnLine ( a , b , p )
>60178	CallExpression	getClosestPointOnLine ( a , b , p )
>60179	ArgumentList	a
>60180	Argument	p
>60181	Identifier	p
>60182	Argument	b
>60183	Identifier	b
>60184	Argument	a
>60185	Identifier	a
>60186	Callee	getClosestPointOnLine
>60187	Identifier	getClosestPointOnLine
>60188	Identifier	Rab
>60189	Identifier	Rab
>60190	IdentifierDeclType	Vector
>60207	FunctionDef	Game 
>60208	ParameterList	Vector a , Vector b , Vector p
>60209	Parameter	 
>60210	Identifier	p
>60211	ParameterType	Vector
>60212	Parameter	 
>60213	Identifier	b
>60214	ParameterType	Vector
>60215	Parameter	 
>60216	Identifier	a
>60217	ParameterType	Vector
>60218	ReturnType	Vector
>60219	CompoundStatement	 
>60220	ReturnStatement	 
>60221	AdditiveExpression	a + V
>60222	Identifier	V
>60223	Identifier	a
>60224	ExpressionStatement	 
>60225	CallExpression	V . setLength2D ( t )
>60226	ArgumentList	t
>60227	Argument	t
>60228	Identifier	t
>60229	Callee	V . setLength2D
>60230	MemberAccess	V . setLength2D
>60231	Identifier	setLength2D
>60232	Identifier	V
>60233	IfStatement	if ( t > d )
>60234	ReturnStatement	 
>60235	Identifier	b
>60236	Condition	 
>60237	RelationalExpression	t > d
>60238	Identifier	d
>60239	Identifier	t
>60240	IfStatement	if ( t < 0 )
>60241	ReturnStatement	 
>60242	Identifier	a
>60243	Condition	 
>60244	RelationalExpression	t < 0
>60245	PrimaryExpression	0
>60246	Identifier	t
>60247	IdentifierDeclStatement	 
>60248	IdentifierDecl	t = V . dot ( c )
>60249	AssignmentExpr	t = V . dot ( c )
>60250	CallExpression	V . dot ( c )
>60251	ArgumentList	c
>60252	Argument	c
>60253	Identifier	c
>60254	Callee	V . dot
>60255	MemberAccess	V . dot
>60256	Identifier	dot
>60257	Identifier	V
>60258	Identifier	t
>60259	Identifier	t
>60260	IdentifierDeclType	float
>60261	IdentifierDeclStatement	 
>60262	IdentifierDecl	d = ( a - b ) . getLength2D ( )
>60263	AssignmentExpr	d = ( a - b ) . getLength2D ( )
>60264	CallExpression	( a - b ) . getLength2D ( )
>60265	ArgumentList	 
>60266	Callee	( a - b ) . getLength2D
>60267	MemberAccess	( a - b ) . getLength2D
>60268	Identifier	getLength2D
>60269	AdditiveExpression	a - b
>60270	Identifier	b
>60271	Identifier	a
>60272	Identifier	d
>60273	Identifier	d
>60274	IdentifierDeclType	float
>60275	ExpressionStatement	 
>60276	CallExpression	V . normalize2D ( )
>60277	ArgumentList	 
>60278	Callee	V . normalize2D
>60279	MemberAccess	V . normalize2D
>60280	Identifier	normalize2D
>60281	Identifier	V
>60282	IdentifierDeclStatement	 
>60283	IdentifierDecl	V = b - a
>60284	AssignmentExpr	V = b - a
>60285	AdditiveExpression	b - a
>60286	Identifier	a
>60287	Identifier	b
>60288	Identifier	V
>60289	Identifier	V
>60290	IdentifierDeclType	Vector
>60291	IdentifierDeclStatement	 
>60292	IdentifierDecl	c = p - a
>60293	AssignmentExpr	c = p - a
>60294	AdditiveExpression	p - a
>60295	Identifier	a
>60296	Identifier	p
>60297	Identifier	c
>60298	Identifier	c
>60299	IdentifierDeclType	Vector
>60312	FunctionDef	Game 
>60313	ParameterList	const Vector & position , float r
>60314	Parameter	 
>60315	Identifier	r
>60316	ParameterType	float
>60317	Parameter	 
>60318	Identifier	position
>60319	ParameterType	const Vector &
>60320	ReturnType	bool
>60321	CompoundStatement	 
>60322	ReturnStatement	 
>60323	Identifier	false
>60324	ExpressionStatement	 
>60325	AssignmentExpr	lastCollideTileType = OT_EMPTY
>60326	Identifier	OT_EMPTY
>60327	Identifier	lastCollideTileType
>60328	ForStatement	for ( int x = tile . x - xrange ; x <= tile . x + xrange ; x ++ )
>60329	CompoundStatement	 
>60330	ForStatement	for ( int y = tile . y - yrange ; y <= tile . y + yrange ; y ++ )
>60331	CompoundStatement	 
>60332	IfStatement	if ( v != 0 )
>60333	CompoundStatement	 
>60334	IfStatement	if ( position . y > ry - hsz && position . y < ry + hsz )
>60335	CompoundStatement	 
>60336	IfStatement	if ( fabsf ( rx - position . x ) < r + hsz )
>60337	CompoundStatement	 
>60338	ReturnStatement	 
>60339	Identifier	true
>60340	Condition	 
>60341	RelationalExpression	fabsf ( rx - position . x ) < r + hsz
>60342	AdditiveExpression	r + hsz
>60343	Identifier	hsz
>60344	Identifier	r
>60345	CallExpression	fabsf ( rx - position . x )
>60346	ArgumentList	rx - position . x
>60347	Argument	rx - position . x
>60348	AdditiveExpression	rx - position . x
>60349	MemberAccess	position . x
>60350	Identifier	x
>60351	Identifier	position
>60352	Identifier	rx
>60353	Callee	fabsf
>60354	Identifier	fabsf
>60355	Condition	 
>60356	AndExpression	position . y > ry - hsz && position . y < ry + hsz
>60357	RelationalExpression	position . y < ry + hsz
>60358	AdditiveExpression	ry + hsz
>60359	Identifier	hsz
>60360	Identifier	ry
>60361	MemberAccess	position . y
>60362	Identifier	y
>60363	Identifier	position
>60364	RelationalExpression	position . y > ry - hsz
>60365	AdditiveExpression	ry - hsz
>60366	Identifier	hsz
>60367	Identifier	ry
>60368	MemberAccess	position . y
>60369	Identifier	y
>60370	Identifier	position
>60371	IfStatement	if ( position . x > rx - hsz && position . x < rx + hsz )
>60372	CompoundStatement	 
>60373	IfStatement	if ( fabsf ( ry - position . y ) < r + hsz )
>60374	CompoundStatement	 
>60375	ReturnStatement	 
>60376	Identifier	true
>60377	Condition	 
>60378	RelationalExpression	fabsf ( ry - position . y ) < r + hsz
>60379	AdditiveExpression	r + hsz
>60380	Identifier	hsz
>60381	Identifier	r
>60382	CallExpression	fabsf ( ry - position . y )
>60383	ArgumentList	ry - position . y
>60384	Argument	ry - position . y
>60385	AdditiveExpression	ry - position . y
>60386	MemberAccess	position . y
>60387	Identifier	y
>60388	Identifier	position
>60389	Identifier	ry
>60390	Callee	fabsf
>60391	Identifier	fabsf
>60392	Condition	 
>60393	AndExpression	position . x > rx - hsz && position . x < rx + hsz
>60394	RelationalExpression	position . x < rx + hsz
>60395	AdditiveExpression	rx + hsz
>60396	Identifier	hsz
>60397	Identifier	rx
>60398	MemberAccess	position . x
>60399	Identifier	x
>60400	Identifier	position
>60401	RelationalExpression	position . x > rx - hsz
>60402	AdditiveExpression	rx - hsz
>60403	Identifier	hsz
>60404	Identifier	rx
>60405	MemberAccess	position . x
>60406	Identifier	x
>60407	Identifier	position
>60408	IfStatement	if ( rSqr < sqr ( r ) )
>60409	ReturnStatement	 
>60410	Identifier	true
>60411	Condition	 
>60412	RelationalExpression	rSqr < sqr ( r )
>60413	CallExpression	sqr ( r )
>60414	ArgumentList	r
>60415	Argument	r
>60416	Identifier	r
>60417	Callee	sqr
>60418	Identifier	sqr
>60419	Identifier	rSqr
>60420	ExpressionStatement	 
>60421	AssignmentExpr	rSqr = sqr ( position . x - ( rx + hsz ) ) + sqr ( position . y - ( ry - hsz ) )
>60422	AdditiveExpression	sqr ( position . x - ( rx + hsz ) ) + sqr ( position . y - ( ry - hsz ) )
>60423	CallExpression	sqr ( position . y - ( ry - hsz ) )
>60424	ArgumentList	position . y - ( ry - hsz )
>60425	Argument	position . y - ( ry - hsz )
>60426	AdditiveExpression	position . y - ( ry - hsz )
>60427	AdditiveExpression	ry - hsz
>60428	Identifier	hsz
>60429	Identifier	ry
>60430	MemberAccess	position . y
>60431	Identifier	y
>60432	Identifier	position
>60433	Callee	sqr
>60434	Identifier	sqr
>60435	CallExpression	sqr ( position . x - ( rx + hsz ) )
>60436	ArgumentList	position . x - ( rx + hsz )
>60437	Argument	position . x - ( rx + hsz )
>60438	AdditiveExpression	position . x - ( rx + hsz )
>60439	AdditiveExpression	rx + hsz
>60440	Identifier	hsz
>60441	Identifier	rx
>60442	MemberAccess	position . x
>60443	Identifier	x
>60444	Identifier	position
>60445	Callee	sqr
>60446	Identifier	sqr
>60447	Identifier	rSqr
>60448	IfStatement	if ( rSqr < sqr ( r ) )
>60449	ReturnStatement	 
>60450	Identifier	true
>60451	Condition	 
>60452	RelationalExpression	rSqr < sqr ( r )
>60453	CallExpression	sqr ( r )
>60454	ArgumentList	r
>60455	Argument	r
>60456	Identifier	r
>60457	Callee	sqr
>60458	Identifier	sqr
>60459	Identifier	rSqr
>60460	ExpressionStatement	 
>60461	AssignmentExpr	rSqr = sqr ( position . x - ( rx - hsz ) ) + sqr ( position . y - ( ry - hsz ) )
>60462	AdditiveExpression	sqr ( position . x - ( rx - hsz ) ) + sqr ( position . y - ( ry - hsz ) )
>60463	CallExpression	sqr ( position . y - ( ry - hsz ) )
>60464	ArgumentList	position . y - ( ry - hsz )
>60465	Argument	position . y - ( ry - hsz )
>60466	AdditiveExpression	position . y - ( ry - hsz )
>60467	AdditiveExpression	ry - hsz
>60468	Identifier	hsz
>60469	Identifier	ry
>60470	MemberAccess	position . y
>60471	Identifier	y
>60472	Identifier	position
>60473	Callee	sqr
>60474	Identifier	sqr
>60475	CallExpression	sqr ( position . x - ( rx - hsz ) )
>60476	ArgumentList	position . x - ( rx - hsz )
>60477	Argument	position . x - ( rx - hsz )
>60478	AdditiveExpression	position . x - ( rx - hsz )
>60479	AdditiveExpression	rx - hsz
>60480	Identifier	hsz
>60481	Identifier	rx
>60482	MemberAccess	position . x
>60483	Identifier	x
>60484	Identifier	position
>60485	Callee	sqr
>60486	Identifier	sqr
>60487	Identifier	rSqr
>60488	IfStatement	if ( rSqr < sqr ( r ) )
>60489	ReturnStatement	 
>60490	Identifier	true
>60491	Condition	 
>60492	RelationalExpression	rSqr < sqr ( r )
>60493	CallExpression	sqr ( r )
>60494	ArgumentList	r
>60495	Argument	r
>60496	Identifier	r
>60497	Callee	sqr
>60498	Identifier	sqr
>60499	Identifier	rSqr
>60500	ExpressionStatement	 
>60501	AssignmentExpr	rSqr = sqr ( position . x - ( rx - hsz ) ) + sqr ( position . y - ( ry + hsz ) )
>60502	AdditiveExpression	sqr ( position . x - ( rx - hsz ) ) + sqr ( position . y - ( ry + hsz ) )
>60503	CallExpression	sqr ( position . y - ( ry + hsz ) )
>60504	ArgumentList	position . y - ( ry + hsz )
>60505	Argument	position . y - ( ry + hsz )
>60506	AdditiveExpression	position . y - ( ry + hsz )
>60507	AdditiveExpression	ry + hsz
>60508	Identifier	hsz
>60509	Identifier	ry
>60510	MemberAccess	position . y
>60511	Identifier	y
>60512	Identifier	position
>60513	Callee	sqr
>60514	Identifier	sqr
>60515	CallExpression	sqr ( position . x - ( rx - hsz ) )
>60516	ArgumentList	position . x - ( rx - hsz )
>60517	Argument	position . x - ( rx - hsz )
>60518	AdditiveExpression	position . x - ( rx - hsz )
>60519	AdditiveExpression	rx - hsz
>60520	Identifier	hsz
>60521	Identifier	rx
>60522	MemberAccess	position . x
>60523	Identifier	x
>60524	Identifier	position
>60525	Callee	sqr
>60526	Identifier	sqr
>60527	Identifier	rSqr
>60528	IfStatement	if ( rSqr < sqr ( r ) )
>60529	ReturnStatement	 
>60530	Identifier	true
>60531	Condition	 
>60532	RelationalExpression	rSqr < sqr ( r )
>60533	CallExpression	sqr ( r )
>60534	ArgumentList	r
>60535	Argument	r
>60536	Identifier	r
>60537	Callee	sqr
>60538	Identifier	sqr
>60539	Identifier	rSqr
>60540	ExpressionStatement	 
>60541	AssignmentExpr	rSqr = sqr ( position . x - ( rx + hsz ) ) + sqr ( position . y - ( ry + hsz ) )
>60542	AdditiveExpression	sqr ( position . x - ( rx + hsz ) ) + sqr ( position . y - ( ry + hsz ) )
>60543	CallExpression	sqr ( position . y - ( ry + hsz ) )
>60544	ArgumentList	position . y - ( ry + hsz )
>60545	Argument	position . y - ( ry + hsz )
>60546	AdditiveExpression	position . y - ( ry + hsz )
>60547	AdditiveExpression	ry + hsz
>60548	Identifier	hsz
>60549	Identifier	ry
>60550	MemberAccess	position . y
>60551	Identifier	y
>60552	Identifier	position
>60553	Callee	sqr
>60554	Identifier	sqr
>60555	CallExpression	sqr ( position . x - ( rx + hsz ) )
>60556	ArgumentList	position . x - ( rx + hsz )
>60557	Argument	position . x - ( rx + hsz )
>60558	AdditiveExpression	position . x - ( rx + hsz )
>60559	AdditiveExpression	rx + hsz
>60560	Identifier	hsz
>60561	Identifier	rx
>60562	MemberAccess	position . x
>60563	Identifier	x
>60564	Identifier	position
>60565	Callee	sqr
>60566	Identifier	sqr
>60567	Identifier	rSqr
>60568	ExpressionStatement	 
>60569	AssignmentExpr	lastCollideTileType = ( ObsType ) v
>60570	CastExpression	( ObsType ) v
>60571	Identifier	v
>60572	CastTarget	ObsType
>60573	Identifier	lastCollideTileType
>60574	IdentifierDeclStatement	 
>60575	IdentifierDecl	rSqr
>60576	Identifier	rSqr
>60577	IdentifierDeclType	float
>60578	IdentifierDeclStatement	 
>60579	IdentifierDecl	ry = ( y * TILE_SIZE ) + TILE_SIZE / 2
>60580	AssignmentExpr	ry = ( y * TILE_SIZE ) + TILE_SIZE / 2
>60581	AdditiveExpression	( y * TILE_SIZE ) + TILE_SIZE / 2
>60582	MultiplicativeExpression	TILE_SIZE / 2
>60583	PrimaryExpression	2
>60584	Identifier	TILE_SIZE
>60585	MultiplicativeExpression	y * TILE_SIZE
>60586	Identifier	TILE_SIZE
>60587	Identifier	y
>60588	Identifier	ry
>60589	Identifier	ry
>60590	IdentifierDeclType	float
>60591	IdentifierDeclStatement	 
>60592	IdentifierDecl	rx = ( x * TILE_SIZE ) + TILE_SIZE / 2
>60593	AssignmentExpr	rx = ( x * TILE_SIZE ) + TILE_SIZE / 2
>60594	AdditiveExpression	( x * TILE_SIZE ) + TILE_SIZE / 2
>60595	MultiplicativeExpression	TILE_SIZE / 2
>60596	PrimaryExpression	2
>60597	Identifier	TILE_SIZE
>60598	MultiplicativeExpression	x * TILE_SIZE
>60599	Identifier	TILE_SIZE
>60600	Identifier	x
>60601	Identifier	rx
>60602	Identifier	rx
>60603	IdentifierDeclType	float
>60604	ExpressionStatement	 
>60605	AssignmentExpr	lastCollidePosition = t . worldVector ( )
>60606	CallExpression	t . worldVector ( )
>60607	ArgumentList	 
>60608	Callee	t . worldVector
>60609	MemberAccess	t . worldVector
>60610	Identifier	worldVector
>60611	Identifier	t
>60612	Identifier	lastCollidePosition
>60613	IdentifierDeclStatement	 
>60614	IdentifierDecl	t ( x , y )
>60615	Expression	x , y
>60616	Identifier	y
>60617	Identifier	x
>60618	Identifier	t
>60619	IdentifierDeclType	TileVector
>60620	Condition	 
>60621	EqualityExpression	v != 0
>60622	PrimaryExpression	0
>60623	Identifier	v
>60624	IdentifierDeclStatement	 
>60625	IdentifierDecl	v = this -> getGrid ( TileVector ( x , y ) )
>60626	AssignmentExpr	v = this -> getGrid ( TileVector ( x , y ) )
>60627	CallExpression	this -> getGrid ( TileVector ( x , y ) )
>60628	ArgumentList	TileVector ( x , y )
>60629	Argument	TileVector ( x , y )
>60630	CallExpression	TileVector ( x , y )
>60631	ArgumentList	x
>60632	Argument	y
>60633	Identifier	y
>60634	Argument	x
>60635	Identifier	x
>60636	Callee	TileVector
>60637	Identifier	TileVector
>60638	Callee	this -> getGrid
>60639	PtrMemberAccess	this -> getGrid
>60640	Identifier	getGrid
>60641	Identifier	this
>60642	Identifier	v
>60643	Identifier	v
>60644	IdentifierDeclType	int
>60645	IncDecOp	 
>60646	IncDec	++
>60647	Identifier	y
>60648	Condition	 
>60649	RelationalExpression	y <= tile . y + yrange
>60650	AdditiveExpression	tile . y + yrange
>60651	Identifier	yrange
>60652	MemberAccess	tile . y
>60653	Identifier	y
>60654	Identifier	tile
>60655	Identifier	y
>60656	ForInit	 
>60657	IdentifierDeclStatement	int y = tile . y - yrange ;
>60658	IdentifierDecl	y = tile . y - yrange
>60659	AssignmentExpr	y = tile . y - yrange
>60660	AdditiveExpression	tile . y - yrange
>60661	Identifier	yrange
>60662	MemberAccess	tile . y
>60663	Identifier	y
>60664	Identifier	tile
>60665	Identifier	y
>60666	Identifier	y
>60667	IdentifierDeclType	int
>60668	IncDecOp	 
>60669	IncDec	++
>60670	Identifier	x
>60671	Condition	 
>60672	RelationalExpression	x <= tile . x + xrange
>60673	AdditiveExpression	tile . x + xrange
>60674	Identifier	xrange
>60675	MemberAccess	tile . x
>60676	Identifier	x
>60677	Identifier	tile
>60678	Identifier	x
>60679	ForInit	 
>60680	IdentifierDeclStatement	int x = tile . x - xrange ;
>60681	IdentifierDecl	x = tile . x - xrange
>60682	AssignmentExpr	x = tile . x - xrange
>60683	AdditiveExpression	tile . x - xrange
>60684	Identifier	xrange
>60685	MemberAccess	tile . x
>60686	Identifier	x
>60687	Identifier	tile
>60688	Identifier	x
>60689	Identifier	x
>60690	IdentifierDeclType	int
>60691	ExpressionStatement	 
>60692	AssignmentExpr	yrange = ( r / TILE_SIZE ) + 1
>60693	AdditiveExpression	( r / TILE_SIZE ) + 1
>60694	PrimaryExpression	1
>60695	MultiplicativeExpression	r / TILE_SIZE
>60696	Identifier	TILE_SIZE
>60697	Identifier	r
>60698	Identifier	yrange
>60699	ExpressionStatement	 
>60700	AssignmentExpr	xrange = ( r / TILE_SIZE ) + 1
>60701	AdditiveExpression	( r / TILE_SIZE ) + 1
>60702	PrimaryExpression	1
>60703	MultiplicativeExpression	r / TILE_SIZE
>60704	Identifier	TILE_SIZE
>60705	Identifier	r
>60706	Identifier	xrange
>60707	IdentifierDeclStatement	 
>60708	IdentifierDecl	yrange = 1
>60709	AssignmentExpr	yrange = 1
>60710	PrimaryExpression	1
>60711	Identifier	yrange
>60712	Identifier	yrange
>60713	IdentifierDeclType	int
>60714	IdentifierDecl	xrange = 1
>60715	AssignmentExpr	xrange = 1
>60716	PrimaryExpression	1
>60717	Identifier	xrange
>60718	Identifier	xrange
>60719	IdentifierDeclType	int
>60720	IdentifierDeclStatement	 
>60721	IdentifierDecl	hsz = TILE_SIZE / 2
>60722	AssignmentExpr	hsz = TILE_SIZE / 2
>60723	MultiplicativeExpression	TILE_SIZE / 2
>60724	PrimaryExpression	2
>60725	Identifier	TILE_SIZE
>60726	Identifier	hsz
>60727	Identifier	hsz
>60728	IdentifierDeclType	float
>60729	ExpressionStatement	 
>60730	AssignmentExpr	tile . y = t . y
>60731	MemberAccess	t . y
>60732	Identifier	y
>60733	Identifier	t
>60734	MemberAccess	tile . y
>60735	Identifier	y
>60736	Identifier	tile
>60737	ExpressionStatement	 
>60738	AssignmentExpr	tile . x = t . x
>60739	MemberAccess	t . x
>60740	Identifier	x
>60741	Identifier	t
>60742	MemberAccess	tile . x
>60743	Identifier	x
>60744	Identifier	tile
>60745	IdentifierDeclStatement	 
>60746	IdentifierDecl	t ( tile )
>60747	Identifier	tile
>60748	Identifier	t
>60749	IdentifierDeclType	TileVector
>60750	IdentifierDeclStatement	 
>60751	IdentifierDecl	tile = position
>60752	AssignmentExpr	tile = position
>60753	Identifier	position
>60754	Identifier	position
>60755	Identifier	tile
>60756	IdentifierDeclType	Vector
>60792	FunctionDef	Game 
>60793	ParameterList	Recipe * r , bool effects
>60794	Parameter	 
>60795	Identifier	effects
>60796	ParameterType	bool
>60797	Parameter	 
>60798	Identifier	r
>60799	ParameterType	Recipe *
>60800	ReturnType	void
>60801	CompoundStatement	 
>60802	IfStatement	if ( nocasecmp ( dsq -> getTopStateData ( ) -> name , \"Game\" ) == 0 && ! applyingState )
>60803	CompoundStatement	 
>60804	IfStatement	if ( data )
>60805	CompoundStatement	 
>60806	IfStatement	if ( effects )
>60807	CompoundStatement	 
>60808	ExpressionStatement	 
>60809	CallExpression	dsq -> game -> setControlHint ( os . str ( ) , 0 , 0 , 0 , 3 , std 
>60810	ArgumentList	os . str ( )
>60811	Argument	std 
>60812	AdditiveExpression	std 
>60813	PtrMemberAccess	data -> gfx
>60814	Identifier	gfx
>60815	Identifier	data
>60816	CallExpression	std 
>60817	ArgumentList	\"gfx/ingredients/\"
>60818	Argument	\"gfx/ingredients/\"
>60819	PrimaryExpression	\"gfx/ingredients/\"
>60820	Callee	std 
>60821	Identifier	std 
>60822	Argument	3
>60823	PrimaryExpression	3
>60824	Argument	0
>60825	PrimaryExpression	0
>60826	Argument	0
>60827	PrimaryExpression	0
>60828	Argument	0
>60829	PrimaryExpression	0
>60830	Argument	os . str ( )
>60831	CallExpression	os . str ( )
>60832	ArgumentList	 
>60833	Callee	os . str
>60834	MemberAccess	os . str
>60835	Identifier	str
>60836	Identifier	os
>60837	Callee	dsq -> game -> setControlHint
>60838	PtrMemberAccess	dsq -> game -> setControlHint
>60839	Identifier	setControlHint
>60840	PtrMemberAccess	dsq -> game
>60841	Identifier	game
>60842	Identifier	dsq
>60843	Condition	 
>60844	Identifier	effects
>60845	Condition	 
>60846	Identifier	data
>60847	IdentifierDeclStatement	 
>60848	IdentifierDecl	* data = dsq -> continuity . getIngredientDataByName ( r -> result )
>60849	AssignmentExpr	* data = dsq -> continuity . getIngredientDataByName ( r -> result )
>60850	CallExpression	dsq -> continuity . getIngredientDataByName ( r -> result )
>60851	ArgumentList	r -> result
>60852	Argument	r -> result
>60853	PtrMemberAccess	r -> result
>60854	Identifier	result
>60855	Identifier	r
>60856	Callee	dsq -> continuity . getIngredientDataByName
>60857	MemberAccess	dsq -> continuity . getIngredientDataByName
>60858	Identifier	getIngredientDataByName
>60859	PtrMemberAccess	dsq -> continuity
>60860	Identifier	continuity
>60861	Identifier	dsq
>60862	Identifier	data
>60863	Identifier	data
>60864	IdentifierDeclType	IngredientData *
>60865	ExpressionStatement	 
>60866	ShiftExpression	os << dsq -> continuity . stringBank . get ( 23 ) << \" \" << r -> resultDisplayName << \" \" << dsq -> \
>60867	ShiftExpression	dsq -> continuity . stringBank . get ( 23 ) << \" \" << r -> resultDisplayName << \" \" << dsq -> continuity \
>60868	ShiftExpression	\" \" << r -> resultDisplayName << \" \" << dsq -> continuity . stringBank . get ( 24 )
>60869	ShiftExpression	r -> resultDisplayName << \" \" << dsq -> continuity . stringBank . get ( 24 )
>60870	ShiftExpression	\" \" << dsq -> continuity . stringBank . get ( 24 )
>60871	CallExpression	dsq -> continuity . stringBank . get ( 24 )
>60872	ArgumentList	24
>60873	Argument	24
>60874	PrimaryExpression	24
>60875	Callee	dsq -> continuity . stringBank . get
>60876	MemberAccess	dsq -> continuity . stringBank . get
>60877	Identifier	get
>60878	MemberAccess	dsq -> continuity . stringBank
>60879	Identifier	stringBank
>60880	PtrMemberAccess	dsq -> continuity
>60881	Identifier	continuity
>60882	Identifier	dsq
>60883	PrimaryExpression	\" \"
>60884	PtrMemberAccess	r -> resultDisplayName
>60885	Identifier	resultDisplayName
>60886	Identifier	r
>60887	PrimaryExpression	\" \"
>60888	CallExpression	dsq -> continuity . stringBank . get ( 23 )
>60889	ArgumentList	23
>60890	Argument	23
>60891	PrimaryExpression	23
>60892	Callee	dsq -> continuity . stringBank . get
>60893	MemberAccess	dsq -> continuity . stringBank . get
>60894	Identifier	get
>60895	MemberAccess	dsq -> continuity . stringBank
>60896	Identifier	stringBank
>60897	PtrMemberAccess	dsq -> continuity
>60898	Identifier	continuity
>60899	Identifier	dsq
>60900	Identifier	os
>60901	IdentifierDeclStatement	 
>60902	IdentifierDecl	os
>60903	Identifier	os
>60904	IdentifierDeclType	std 
>60905	Condition	 
>60906	AndExpression	nocasecmp ( dsq -> getTopStateData ( ) -> name , \"Game\" ) == 0 && ! applyingState
>60907	UnaryOp	! applyingState
>60908	Identifier	applyingState
>60909	UnaryOperator	!
>60910	EqualityExpression	nocasecmp ( dsq -> getTopStateData ( ) -> name , \"Game\" ) == 0
>60911	PrimaryExpression	0
>60912	CallExpression	nocasecmp ( dsq -> getTopStateData ( ) -> name , \"Game\" )
>60913	ArgumentList	dsq -> getTopStateData ( ) -> name
>60914	Argument	\"Game\"
>60915	PrimaryExpression	\"Game\"
>60916	Argument	dsq -> getTopStateData ( ) -> name
>60917	PtrMemberAccess	dsq -> getTopStateData ( ) -> name
>60918	Identifier	name
>60919	CallExpression	dsq -> getTopStateData ( )
>60920	ArgumentList	 
>60921	Callee	dsq -> getTopStateData
>60922	PtrMemberAccess	dsq -> getTopStateData
>60923	Identifier	getTopStateData
>60924	Identifier	dsq
>60925	Callee	nocasecmp
>60926	Identifier	nocasecmp
>60952	FunctionDef	Game 
>60953	ParameterList	AquariaActions ac , bool ignore
>60954	Parameter	 
>60955	Identifier	ignore
>60956	ParameterType	bool
>60957	Parameter	 
>60958	Identifier	ac
>60959	ParameterType	AquariaActions
>60960	ReturnType	void
>60961	CompoundStatement	 
>60962	IfStatement	if ( ignore )
>60963	ElseStatement	else
>60964	ExpressionStatement	 
>60965	CallExpression	ignoredActions . erase ( ac )
>60966	ArgumentList	ac
>60967	Argument	ac
>60968	Identifier	ac
>60969	Callee	ignoredActions . erase
>60970	MemberAccess	ignoredActions . erase
>60971	Identifier	erase
>60972	Identifier	ignoredActions
>60973	ExpressionStatement	 
>60974	CallExpression	ignoredActions . insert ( ac )
>60975	ArgumentList	ac
>60976	Argument	ac
>60977	Identifier	ac
>60978	Callee	ignoredActions . insert
>60979	MemberAccess	ignoredActions . insert
>60980	Identifier	insert
>60981	Identifier	ignoredActions
>60982	Condition	 
>60983	Identifier	ignore
>60990	FunctionDef	Game 
>60991	ParameterList	AquariaActions ac
>60992	Parameter	 
>60993	Identifier	ac
>60994	ParameterType	AquariaActions
>60995	ReturnType	bool
>60996	CompoundStatement	 
>60997	ReturnStatement	 
>60998	EqualityExpression	ignoredActions . find ( ac ) != ignoredActions . end ( )
>60999	CallExpression	ignoredActions . end ( )
>61000	ArgumentList	 
>61001	Callee	ignoredActions . end
>61002	MemberAccess	ignoredActions . end
>61003	Identifier	end
>61004	Identifier	ignoredActions
>61005	CallExpression	ignoredActions . find ( ac )
>61006	ArgumentList	ac
>61007	Argument	ac
>61008	Identifier	ac
>61009	Callee	ignoredActions . find
>61010	MemberAccess	ignoredActions . find
>61011	Identifier	find
>61012	Identifier	ignoredActions
<27=33,32,28
<28=29
<29=31,30
<33=36,34
<34=35
<36=69,49,37
<37=38
<38=39
<39=47,40
<40=41
<41=42
<42=46,43
<43=45,44
<47=48
<49=50
<50=67,51
<51=52
<52=53
<53=59,54
<54=58,55
<55=57,56
<59=61,60
<61=62
<62=64,63
<64=66,65
<67=68
<69=70
<70=72,71
<72=73
<73=75,74
<75=77,76
<88=93,89
<89=90
<90=92,91
<93=145,123,112,108,104,98,94
<94=95
<95=97,96
<98=99
<99=103,100
<100=102,101
<104=105
<105=107,106
<108=109
<109=111,110
<112=113
<113=122,114
<114=120,115
<115=118,116
<116=117
<118=119
<120=121
<123=143,124
<124=132,125
<125=126
<126=130,127
<127=128
<128=129
<130=131
<132=133
<133=142,141,134
<134=140,135
<135=139,136
<136=138,137
<143=144
<145=146
<146=160,159,147
<147=158,148
<148=152,149
<149=150
<150=151
<152=153
<153=155,154
<155=157,156
<181=187,186,182
<182=183
<183=185,184
<187=503,411,369,361,188
<188=343,213,189
<189=190
<190=209,191
<191=192
<192=205,193
<193=196,194
<194=195
<196=197
<197=203,198
<198=201,199
<199=200
<201=202
<203=204
<205=206
<206=208,207
<209=210
<210=212,211
<213=325,214
<214=313,308,215
<215=216
<216=296,217
<217=285,222,218
<218=219
<219=221,220
<222=272,249,223
<223=224
<224=236,225
<225=226
<226=230,227
<227=228
<228=229
<230=231
<231=233,232
<233=235,234
<236=237
<237=243,238
<238=239
<239=240
<240=242,241
<243=244
<244=246,245
<246=248,247
<249=261,250
<250=251
<251=255,252
<252=253
<253=254
<255=256
<256=258,257
<258=260,259
<261=262
<262=266,263
<263=264
<264=265
<266=267
<267=269,268
<269=271,270
<272=273
<273=275,274
<275=279,276
<276=277
<277=278
<279=280
<280=282,281
<282=284,283
<285=286
<286=290,287
<287=288
<288=289
<290=291
<291=293,292
<293=295,294
<296=297
<297=299,298
<299=307,300
<300=302,301
<302=304,303
<304=306,305
<308=309
<309=310
<310=312,311
<313=314
<314=318,315
<315=317,316
<318=320,319
<320=322,321
<322=324,323
<325=326
<326=339,327
<327=330,328
<328=329
<330=331
<331=337,332
<332=335,333
<333=334
<335=336
<337=338
<339=340
<340=342,341
<343=344
<344=348,345
<345=346
<346=347
<348=349
<349=351,350
<351=356,352
<352=354,353
<354=355
<356=358,357
<358=360,359
<361=363,362
<363=364
<364=366,365
<366=368,367
<369=398,384,370
<370=371
<371=372
<372=383,373
<373=381,374
<374=379,377,375
<375=376
<377=378
<379=380
<381=382
<384=385
<385=386
<386=397,387
<387=395,388
<388=393,391,389
<389=390
<391=392
<393=394
<395=396
<398=399
<399=401,400
<401=405,402
<402=403
<403=404
<405=406
<406=408,407
<408=410,409
<411=490,464,412
<412=413
<413=460,414
<414=458,415
<415=442,420,416
<416=417
<417=419,418
<420=440,421
<421=429,422
<422=423
<423=427,424
<424=425
<425=426
<427=428
<429=430
<430=439,438,431
<431=437,432
<432=436,433
<433=435,434
<440=441
<442=443
<443=457,456,444
<444=455,445
<445=449,446
<446=447
<447=448
<449=450
<450=452,451
<452=454,453
<458=459
<460=461
<461=463,462
<464=466,465
<466=486,467
<467=479,472,468
<468=469
<469=471,470
<472=473
<473=477,474
<474=475
<475=476
<477=478
<479=480
<480=484,481
<481=482
<482=483
<484=485
<486=487
<487=489,488
<490=491
<491=502,492
<492=496,493
<493=494
<494=495
<496=497
<497=499,498
<499=501,500
<503=504
<504=508,505
<505=506
<506=507
<508=509
<547=555,548
<548=552,549
<549=551,550
<552=554,553
<555=656,652,648,647,646,645,643,621,610,609,608,607,605,599,590,577,571,565,556
<556=557
<557=563,558
<558=561,559
<559=560
<561=562
<563=564
<565=566
<566=568,567
<568=570,569
<571=572
<572=574,573
<574=576,575
<577=578
<578=589,579
<579=588,580
<580=586,581
<581=584,582
<582=583
<584=585
<586=587
<590=591
<591=597,592
<592=595,593
<593=594
<595=596
<597=598
<599=600
<600=602,601
<602=604,603
<605=606
<610=611
<611=619,612
<612=617,615,613
<613=614
<615=616
<617=618
<619=620
<621=641,632,622
<622=623
<623=624
<624=628,625
<625=626
<626=627
<628=629
<629=631,630
<632=633
<633=637,634
<634=635
<635=636
<637=638
<638=640,639
<641=642
<643=644
<648=649
<649=651,650
<652=653
<653=655,654
<656=657
<657=659,658
<680=689,688,681
<681=685,682
<682=684,683
<685=687,686
<689=752,742,690
<690=740,706,691
<691=692
<692=693
<693=694
<694=700,695
<695=698,696
<696=697
<698=699
<700=701
<701=703,702
<703=705,704
<706=729,716,707
<707=708
<708=712,709
<709=710
<710=711
<712=713
<713=715,714
<716=717
<717=723,718
<718=721,719
<719=720
<721=722
<723=724
<724=726,725
<726=728,727
<729=730
<730=734,731
<731=732
<732=733
<734=735
<735=737,736
<737=739,738
<740=741
<742=748,743
<743=744
<744=745
<745=747,746
<748=749
<749=751,750
<752=753
<753=758,757,754
<754=756,755
<771=774,773,772
<774=775
<775=776
<781=784,783,782
<784=785
<785=786
<786=788,787
<793=796,795,794
<796=797
<797=798
<803=812,811,804
<804=808,805
<805=807,806
<808=810,809
<812=1043,1039,1016,813
<813=1012,981,814
<814=815
<815=975,962,949,943,823,816
<816=817
<817=819,818
<819=820
<820=822,821
<823=941,824
<824=930,921,908,884,860,836,825
<825=826
<826=830,827
<827=828
<828=829
<830=831
<831=833,832
<833=835,834
<836=837
<837=850,838
<838=841,839
<839=840
<841=842
<842=848,843
<843=846,844
<844=845
<846=847
<848=849
<850=851
<851=853,852
<853=855,854
<855=857,856
<857=859,858
<860=861
<861=874,862
<862=865,863
<863=864
<865=866
<866=872,867
<867=870,868
<868=869
<870=871
<872=873
<874=875
<875=877,876
<877=879,878
<879=881,880
<881=883,882
<884=885
<885=898,886
<886=889,887
<887=888
<889=890
<890=896,891
<891=894,892
<892=893
<894=895
<896=897
<898=899
<899=901,900
<901=903,902
<903=905,904
<905=907,906
<908=909
<909=911,910
<911=912
<912=914,913
<914=916,915
<916=918,917
<918=920,919
<921=922
<922=924,923
<924=925
<925=927,926
<927=929,928
<930=931
<931=935,932
<932=933
<933=934
<935=936
<936=938,937
<938=940,939
<941=942
<943=944
<944=946,945
<946=948,947
<949=950
<950=958,951
<951=952
<952=953
<953=957,954
<954=956,955
<958=959
<959=961,960
<962=969,963
<963=964
<964=966,965
<966=968,967
<969=970
<970=972,971
<972=974,973
<975=976
<976=978,977
<978=980,979
<981=1006,989,982
<982=983
<983=985,984
<985=986
<986=988,987
<989=1002,990
<990=991
<991=992
<992=996,993
<993=994
<994=995
<996=997
<997=999,998
<999=1001,1000
<1002=1003
<1003=1005,1004
<1006=1007
<1007=1009,1008
<1009=1011,1010
<1012=1013
<1013=1015,1014
<1016=1037,1017
<1017=1024,1018
<1018=1019
<1019=1021,1020
<1021=1023,1022
<1024=1031,1025
<1025=1026
<1026=1028,1027
<1028=1030,1029
<1031=1032
<1032=1034,1033
<1034=1036,1035
<1037=1038
<1039=1040
<1040=1042,1041
<1043=1044
<1044=1049,1048,1045
<1045=1047,1046
<1080=1083,1082,1081
<1083=1084
<1084=1085
<1085=1087,1086
<1092=1095,1094,1093
<1095=1213,1208,1096
<1096=1195,1181,1097
<1097=1098
<1098=1169,1162,1112,1099
<1099=1100
<1100=1106,1101
<1101=1104,1102
<1102=1103
<1104=1105
<1106=1107
<1107=1109,1108
<1109=1111,1110
<1112=1153,1124,1113
<1113=1114
<1114=1115
<1115=1116
<1116=1120,1117
<1117=1118
<1118=1119
<1120=1121
<1121=1123,1122
<1124=1138,1125
<1125=1126
<1126=1134,1127
<1127=1128
<1128=1129
<1129=1133,1130
<1130=1132,1131
<1134=1135
<1135=1137,1136
<1138=1139
<1139=1152,1140
<1140=1146,1141
<1141=1142
<1142=1143
<1143=1145,1144
<1146=1147
<1147=1149,1148
<1149=1151,1150
<1153=1154
<1154=1161,1155
<1155=1157,1156
<1157=1158
<1158=1160,1159
<1162=1163
<1163=1168,1167,1164
<1164=1166,1165
<1169=1170
<1170=1180,1179,1171
<1171=1178,1172
<1172=1176,1173
<1173=1174
<1174=1175
<1176=1177
<1181=1182
<1182=1183
<1183=1189,1184
<1184=1187,1185
<1185=1186
<1187=1188
<1189=1190
<1190=1192,1191
<1192=1194,1193
<1195=1196
<1196=1200,1197
<1197=1199,1198
<1200=1202,1201
<1202=1204,1203
<1204=1205
<1205=1207,1206
<1208=1209
<1209=1211,1210
<1211=1212
<1213=1214
<1214=1219,1218,1215
<1215=1217,1216
<1243=1246,1245,1244
<1246=1247
<1247=1267,1248
<1248=1260,1249
<1249=1250
<1250=1254,1251
<1251=1252
<1252=1253
<1254=1255
<1255=1257,1256
<1257=1259,1258
<1260=1261
<1261=1265,1262
<1262=1263
<1263=1264
<1265=1266
<1267=1268
<1277=1283,1282,1278
<1278=1279
<1279=1281,1280
<1283=1375,1284
<1284=1363,1285
<1285=1320,1303,1286
<1286=1291,1287
<1287=1288
<1288=1290,1289
<1291=1292
<1292=1302,1293
<1293=1301,1294
<1294=1296,1295
<1296=1298,1297
<1298=1300,1299
<1303=1308,1304
<1304=1305
<1305=1307,1306
<1308=1309
<1309=1317,1310
<1310=1312,1311
<1312=1314,1313
<1314=1316,1315
<1317=1319,1318
<1320=1345,1321
<1321=1322
<1322=1333,1323
<1323=1328,1324
<1324=1325
<1325=1327,1326
<1328=1329
<1329=1331,1330
<1331=1332
<1333=1334
<1334=1342,1335
<1335=1337,1336
<1337=1339,1338
<1339=1341,1340
<1342=1344,1343
<1345=1346
<1346=1350,1347
<1347=1348
<1348=1349
<1350=1351
<1351=1353,1352
<1353=1358,1354
<1354=1356,1355
<1356=1357
<1358=1360,1359
<1360=1362,1361
<1363=1364
<1364=1366,1365
<1366=1374,1367
<1367=1369,1368
<1369=1371,1370
<1371=1373,1372
<1375=1376
<1376=1380,1377
<1377=1378
<1378=1379
<1380=1381
<1405=1410,1406
<1406=1407
<1407=1409,1408
<1410=1487,1483,1479,1473,1458,1449,1445,1441,1437,1433,1429,1423,1419,1415,1411
<1411=1412
<1412=1414,1413
<1415=1416
<1416=1418,1417
<1419=1420
<1420=1422,1421
<1423=1424
<1424=1428,1425
<1425=1427,1426
<1429=1430
<1430=1432,1431
<1433=1434
<1434=1436,1435
<1437=1438
<1438=1440,1439
<1441=1442
<1442=1444,1443
<1445=1446
<1446=1448,1447
<1449=1450
<1450=1456,1451
<1451=1454,1452
<1452=1453
<1454=1455
<1456=1457
<1458=1459
<1459=1470,1460
<1460=1468,1461
<1461=1464,1462
<1462=1463
<1464=1465
<1465=1467,1466
<1468=1469
<1470=1472,1471
<1473=1474
<1474=1478,1475
<1475=1477,1476
<1479=1480
<1480=1482,1481
<1483=1484
<1484=1486,1485
<1487=1488
<1488=1490,1489
<1513=1519,1518,1514
<1514=1515
<1515=1517,1516
<1519=1520
<1520=1521
<1521=1523,1522
<1529=1535,1534,1530
<1530=1531
<1531=1533,1532
<1535=1536
<1536=1568,1553,1537
<1537=1538
<1538=1549,1545,1539
<1539=1540
<1540=1542,1541
<1542=1544,1543
<1545=1546
<1546=1548,1547
<1549=1550
<1550=1552,1551
<1553=1564,1560,1554
<1554=1555
<1555=1557,1556
<1557=1559,1558
<1560=1561
<1561=1563,1562
<1564=1565
<1565=1567,1566
<1568=1569
<1579=1585,1584,1580
<1580=1581
<1581=1583,1582
<1585=1893,1875,1745,1725,1604,1600,1586
<1586=1598,1592,1587
<1587=1588
<1588=1589
<1589=1591,1590
<1592=1593
<1593=1597,1594
<1594=1596,1595
<1598=1599
<1600=1601
<1601=1603,1602
<1604=1709,1605
<1605=1606
<1606=1707,1607
<1607=1700,1689,1665,1641,1617,1608
<1608=1609
<1609=1613,1610
<1610=1611
<1611=1612
<1613=1614
<1614=1616,1615
<1617=1618
<1618=1633,1619
<1619=1622,1620
<1620=1621
<1622=1623
<1623=1625,1624
<1625=1631,1626
<1626=1629,1627
<1627=1628
<1629=1630
<1631=1632
<1633=1634
<1634=1636,1635
<1636=1638,1637
<1638=1640,1639
<1641=1642
<1642=1657,1643
<1643=1646,1644
<1644=1645
<1646=1647
<1647=1649,1648
<1649=1655,1650
<1650=1653,1651
<1651=1652
<1653=1654
<1655=1656
<1657=1658
<1658=1660,1659
<1660=1662,1661
<1662=1664,1663
<1665=1666
<1666=1681,1667
<1667=1670,1668
<1668=1669
<1670=1671
<1671=1673,1672
<1673=1679,1674
<1674=1677,1675
<1675=1676
<1677=1678
<1679=1680
<1681=1682
<1682=1684,1683
<1684=1686,1685
<1686=1688,1687
<1689=1690
<1690=1692,1691
<1692=1693
<1693=1695,1694
<1695=1697,1696
<1697=1699,1698
<1700=1701
<1701=1703,1702
<1703=1704
<1704=1706,1705
<1707=1708
<1709=1710
<1710=1722,1711
<1711=1719,1712
<1712=1718,1713
<1713=1715,1714
<1715=1717,1716
<1719=1721,1720
<1722=1724,1723
<1725=1726
<1726=1741,1727
<1727=1730,1728
<1728=1729
<1730=1731
<1731=1733,1732
<1733=1739,1734
<1734=1737,1735
<1735=1736
<1737=1738
<1739=1740
<1741=1742
<1742=1744,1743
<1745=1873,1779,1746
<1746=1747
<1747=1775,1766,1762,1755,1748
<1748=1749
<1749=1753,1750
<1750=1751
<1751=1752
<1753=1754
<1755=1756
<1756=1760,1757
<1757=1758
<1758=1759
<1760=1761
<1762=1763
<1763=1765,1764
<1766=1767
<1767=1771,1768
<1768=1769
<1769=1770
<1771=1772
<1772=1774,1773
<1775=1776
<1776=1778,1777
<1779=1869,1780
<1780=1863,1810,1781
<1781=1782
<1782=1801,1797,1790,1783
<1783=1784
<1784=1788,1785
<1785=1786
<1786=1787
<1788=1789
<1790=1791
<1791=1795,1792
<1792=1793
<1793=1794
<1795=1796
<1797=1798
<1798=1800,1799
<1801=1802
<1802=1806,1803
<1803=1804
<1804=1805
<1806=1807
<1807=1809,1808
<1810=1859,1840,1826,1815,1811
<1811=1812
<1812=1814,1813
<1815=1816
<1816=1824,1817
<1817=1818
<1818=1819
<1819=1823,1820
<1820=1822,1821
<1824=1825
<1826=1827
<1827=1836,1828
<1828=1829
<1829=1830
<1830=1832,1831
<1832=1833
<1833=1835,1834
<1836=1837
<1837=1839,1838
<1840=1853,1841
<1841=1842
<1842=1852,1843
<1843=1849,1844
<1844=1848,1845
<1845=1847,1846
<1849=1851,1850
<1853=1854
<1854=1856,1855
<1856=1858,1857
<1859=1860
<1860=1862,1861
<1863=1864
<1864=1866,1865
<1866=1868,1867
<1869=1870
<1870=1872,1871
<1873=1874
<1875=1876
<1876=1892,1891,1877
<1877=1890,1878
<1878=1884,1879
<1879=1880
<1880=1881
<1881=1883,1882
<1884=1885
<1885=1887,1886
<1887=1889,1888
<1893=1894
<1894=1903,1902,1895
<1895=1901,1896
<1896=1898,1897
<1898=1900,1899
<1937=1940,1939,1938
<1940=1941
<1941=2082,1942
<1942=2015,1943
<1943=2004,1957,1944
<1944=1945
<1945=1946
<1946=1947
<1947=1951,1948
<1948=1949
<1949=1950
<1951=1952
<1952=1954,1953
<1954=1956,1955
<1957=1988,1958
<1958=1986,1959
<1959=1980,1971,1960
<1960=1961
<1961=1965,1962
<1962=1963
<1963=1964
<1965=1966
<1966=1968,1967
<1968=1970,1969
<1971=1972
<1972=1974,1973
<1974=1975
<1975=1977,1976
<1977=1979,1978
<1980=1981
<1981=1983,1982
<1983=1985,1984
<1986=1987
<1988=1989
<1989=2003,2002,1990
<1990=2001,1991
<1991=1995,1992
<1992=1993
<1993=1994
<1995=1996
<1996=1998,1997
<1998=2000,1999
<2004=2005
<2005=2014,2006
<2006=2008,2007
<2008=2009
<2009=2011,2010
<2011=2013,2012
<2015=2074,2065,2062,2016
<2016=2017
<2017=2040,2018
<2018=2029,2020,2019
<2020=2021
<2021=2023,2022
<2023=2024
<2024=2026,2025
<2026=2028,2027
<2029=2030
<2030=2034,2031
<2031=2032
<2032=2033
<2034=2035
<2035=2037,2036
<2037=2039,2038
<2040=2041
<2041=2052,2042
<2042=2051,2043
<2043=2045,2044
<2045=2046
<2046=2048,2047
<2048=2050,2049
<2052=2061,2053
<2053=2055,2054
<2055=2056
<2056=2058,2057
<2058=2060,2059
<2062=2064,2063
<2065=2066
<2066=2073,2067
<2067=2069,2068
<2069=2070
<2070=2072,2071
<2074=2075
<2075=2076
<2076=2081,2080,2077
<2077=2079,2078
<2082=2083
<2083=2092,2084
<2084=2091,2085
<2085=2087,2086
<2087=2088
<2088=2090,2089
<2119=2122,2121,2120
<2122=2218,2210,2123
<2123=2195,2191,2188,2124
<2124=2125
<2125=2150,2126
<2126=2139,2135,2128,2127
<2128=2129
<2129=2133,2130
<2130=2131
<2131=2132
<2133=2134
<2135=2136
<2136=2138,2137
<2139=2140
<2140=2144,2141
<2141=2142
<2142=2143
<2144=2145
<2145=2147,2146
<2147=2149,2148
<2150=2151
<2151=2179,2152
<2152=2172,2153
<2153=2164,2154
<2154=2163,2155
<2155=2157,2156
<2157=2158
<2158=2160,2159
<2160=2162,2161
<2164=2166,2165
<2166=2167
<2167=2169,2168
<2169=2171,2170
<2172=2174,2173
<2174=2176,2175
<2176=2178,2177
<2179=2181,2180
<2181=2183,2182
<2183=2185,2184
<2185=2187,2186
<2188=2190,2189
<2191=2192
<2192=2194,2193
<2195=2196
<2196=2197
<2197=2209,2208,2198
<2198=2207,2199
<2199=2201,2200
<2201=2203,2202
<2203=2204
<2204=2206,2205
<2210=2212,2211
<2212=2213
<2213=2215,2214
<2215=2217,2216
<2218=2220,2219
<2220=2221
<2221=2223,2222
<2244=2247,2246,2245
<2247=2297,2289,2283,2268,2259,2248
<2248=2249
<2249=2253,2250
<2250=2251
<2251=2252
<2253=2254
<2254=2256,2255
<2256=2258,2257
<2259=2260
<2260=2262,2261
<2262=2263
<2263=2265,2264
<2265=2267,2266
<2268=2269
<2269=2275,2270
<2270=2271
<2271=2272
<2272=2274,2273
<2275=2276
<2276=2278,2277
<2278=2280,2279
<2280=2282,2281
<2283=2284
<2284=2286,2285
<2286=2288,2287
<2289=2291,2290
<2291=2292
<2292=2294,2293
<2294=2296,2295
<2297=2299,2298
<2299=2300
<2300=2302,2301
<2318=2321,2320,2319
<2321=2322
<2322=2323
<2323=2327,2324
<2324=2325
<2325=2326
<2327=2328
<2328=2330,2329
<2330=2335,2331
<2331=2333,2332
<2333=2334
<2335=2337,2336
<2337=2339,2338
<2349=2355,2354,2350
<2350=2351
<2351=2353,2352
<2355=3021,3002,2356
<2356=2990,2363,2357
<2357=2358
<2358=2359
<2359=2360
<2360=2362,2361
<2363=2619,2364
<2364=2601,2437,2365
<2365=2366
<2366=2404,2371,2367
<2367=2368
<2368=2370,2369
<2371=2389,2372
<2372=2373
<2373=2379,2374
<2374=2377,2375
<2375=2376
<2377=2378
<2379=2380
<2380=2382,2381
<2382=2384,2383
<2384=2386,2385
<2386=2388,2387
<2389=2390
<2390=2403,2391
<2391=2393,2392
<2393=2394
<2394=2396,2395
<2396=2398,2397
<2398=2400,2399
<2400=2402,2401
<2404=2422,2405
<2405=2406
<2406=2412,2407
<2407=2410,2408
<2408=2409
<2410=2411
<2412=2413
<2413=2415,2414
<2415=2417,2416
<2417=2419,2418
<2419=2421,2420
<2422=2423
<2423=2436,2424
<2424=2426,2425
<2426=2427
<2427=2429,2428
<2429=2431,2430
<2431=2433,2432
<2433=2435,2434
<2437=2586,2569,2547,2530,2490,2438
<2438=2478,2473,2439
<2439=2440
<2440=2461,2441
<2441=2457,2443,2442
<2443=2449,2444
<2444=2445
<2445=2447,2446
<2447=2448
<2449=2450
<2450=2456,2451
<2451=2453,2452
<2453=2455,2454
<2457=2458
<2458=2460,2459
<2461=2462
<2462=2464,2463
<2464=2472,2465
<2465=2467,2466
<2467=2469,2468
<2469=2471,2470
<2473=2474
<2474=2475
<2475=2477,2476
<2478=2479
<2479=2483,2480
<2480=2482,2481
<2483=2485,2484
<2485=2487,2486
<2487=2489,2488
<2490=2516,2491
<2491=2512,2508,2502,2492
<2492=2498,2493
<2493=2494
<2494=2495
<2495=2497,2496
<2498=2499
<2499=2501,2500
<2502=2503
<2503=2505,2504
<2505=2507,2506
<2508=2509
<2509=2511,2510
<2512=2513
<2513=2515,2514
<2516=2517
<2517=2523,2518
<2518=2522,2519
<2519=2521,2520
<2523=2525,2524
<2525=2527,2526
<2527=2529,2528
<2530=2531
<2531=2537,2532
<2532=2535,2533
<2533=2534
<2535=2536
<2537=2538
<2538=2540,2539
<2540=2542,2541
<2542=2544,2543
<2544=2546,2545
<2547=2548
<2548=2561,2549
<2549=2550
<2550=2551
<2551=2555,2552
<2552=2553
<2553=2554
<2555=2556
<2556=2558,2557
<2558=2560,2559
<2561=2562
<2562=2564,2563
<2564=2566,2565
<2566=2568,2567
<2569=2570
<2570=2576,2571
<2571=2574,2572
<2572=2573
<2574=2575
<2576=2577
<2577=2579,2578
<2579=2581,2580
<2581=2583,2582
<2583=2585,2584
<2586=2587
<2587=2593,2588
<2588=2589
<2589=2590
<2590=2592,2591
<2593=2594
<2594=2596,2595
<2596=2598,2597
<2598=2600,2599
<2601=2602
<2602=2606,2603
<2603=2604
<2604=2605
<2606=2607
<2607=2609,2608
<2609=2614,2610
<2610=2612,2611
<2612=2613
<2614=2616,2615
<2616=2618,2617
<2619=2986,2620
<2620=2621
<2621=2976,2672,2622
<2622=2623
<2623=2624
<2624=2662,2625
<2625=2626
<2626=2656,2627
<2627=2640,2636,2628
<2628=2629
<2629=2631,2630
<2631=2633,2632
<2633=2635,2634
<2636=2637
<2637=2639,2638
<2640=2641
<2641=2655,2654,2642
<2642=2653,2643
<2643=2648,2644
<2644=2646,2645
<2646=2647
<2648=2650,2649
<2650=2652,2651
<2656=2657
<2657=2659,2658
<2659=2661,2660
<2662=2663
<2663=2671,2664
<2664=2666,2665
<2666=2668,2667
<2668=2670,2669
<2672=2970,2687,2683,2677,2673
<2673=2674
<2674=2676,2675
<2677=2678
<2678=2680,2679
<2680=2682,2681
<2683=2684
<2684=2686,2685
<2687=2960,2688
<2688=2950,2689
<2689=2930,2918,2690
<2690=2691
<2691=2894,2888,2692
<2692=2693
<2693=2881,2742,2694
<2694=2738,2695
<2695=2696
<2696=2734,2703,2697
<2697=2698
<2698=2699
<2699=2700
<2700=2702,2701
<2703=2728,2724,2719,2715,2709,2705,2704
<2705=2706
<2706=2708,2707
<2709=2710
<2710=2712,2711
<2712=2714,2713
<2715=2716
<2716=2718,2717
<2719=2720
<2720=2722,2721
<2722=2723
<2724=2725
<2725=2727,2726
<2728=2729
<2729=2731,2730
<2731=2733,2732
<2734=2735
<2735=2737,2736
<2738=2739
<2739=2741,2740
<2742=2873,2864,2861,2743
<2743=2838,2744
<2744=2836,2745
<2745=2832,2746
<2746=2823,2782,2747
<2747=2748
<2748=2773,2749
<2749=2762,2758,2751,2750
<2751=2752
<2752=2756,2753
<2753=2754
<2754=2755
<2756=2757
<2758=2759
<2759=2761,2760
<2762=2763
<2763=2767,2764
<2764=2765
<2765=2766
<2767=2768
<2768=2770,2769
<2770=2772,2771
<2773=2774
<2774=2776,2775
<2776=2777
<2777=2779,2778
<2779=2781,2780
<2782=2818,2801,2784,2783
<2784=2785
<2785=2791,2786
<2786=2789,2787
<2787=2788
<2789=2790
<2791=2792
<2792=2794,2793
<2794=2796,2795
<2796=2798,2797
<2798=2800,2799
<2801=2802
<2802=2808,2803
<2803=2806,2804
<2804=2805
<2806=2807
<2808=2809
<2809=2811,2810
<2811=2813,2812
<2813=2815,2814
<2815=2817,2816
<2818=2819
<2819=2821,2820
<2821=2822
<2823=2824
<2824=2826,2825
<2826=2827
<2827=2829,2828
<2829=2831,2830
<2832=2833
<2833=2835,2834
<2836=2837
<2838=2839
<2839=2860,2859,2840
<2840=2858,2841
<2841=2845,2842
<2842=2843
<2843=2844
<2845=2846
<2846=2848,2847
<2848=2850,2849
<2850=2852,2851
<2852=2853
<2853=2855,2854
<2855=2857,2856
<2861=2863,2862
<2864=2865
<2865=2872,2866
<2866=2868,2867
<2868=2869
<2869=2871,2870
<2873=2874
<2874=2875
<2875=2880,2879,2876
<2876=2878,2877
<2881=2882
<2882=2887,2886,2883
<2883=2885,2884
<2888=2889
<2889=2890
<2890=2892,2891
<2892=2893
<2894=2895
<2895=2913,2896
<2896=2908,2897
<2897=2903,2898
<2898=2900,2899
<2900=2902,2901
<2903=2905,2904
<2905=2907,2906
<2908=2910,2909
<2910=2912,2911
<2913=2915,2914
<2915=2917,2916
<2918=2924,2919
<2919=2920
<2920=2922,2921
<2922=2923
<2924=2925
<2925=2927,2926
<2927=2929,2928
<2930=2931
<2931=2935,2932
<2932=2933
<2933=2934
<2935=2936
<2936=2938,2937
<2938=2940,2939
<2940=2942,2941
<2942=2943
<2943=2945,2944
<2945=2947,2946
<2947=2949,2948
<2950=2951
<2951=2959,2958,2952
<2952=2957,2953
<2953=2955,2954
<2955=2956
<2960=2961
<2961=2969,2962
<2962=2964,2963
<2964=2966,2965
<2966=2968,2967
<2970=2971
<2971=2975,2972
<2972=2974,2973
<2976=2977
<2977=2985,2978
<2978=2980,2979
<2980=2982,2981
<2982=2984,2983
<2986=2987
<2987=2989,2988
<2990=2991
<2991=2999,2992
<2992=2998,2993
<2993=2995,2994
<2995=2997,2996
<2999=3001,3000
<3002=3017,3003
<3003=3013,3004
<3004=3009,3005
<3005=3006
<3006=3008,3007
<3009=3010
<3010=3012,3011
<3013=3014
<3014=3016,3015
<3017=3018
<3018=3020,3019
<3021=3022
<3022=3026,3023
<3023=3024
<3024=3025
<3026=3027
<3109=3114,3110
<3110=3111
<3111=3113,3112
<3114=3235,3231,3225,3213,3200,3189,3180,3174,3165,3161,3115
<3115=3139,3128,3116
<3116=3117
<3117=3118
<3118=3127,3119
<3119=3125,3120
<3120=3123,3121
<3121=3122
<3123=3124
<3125=3126
<3128=3129
<3129=3138,3130
<3130=3136,3131
<3131=3134,3132
<3132=3133
<3134=3135
<3136=3137
<3139=3140
<3140=3155,3141
<3141=3142
<3142=3143
<3143=3154,3144
<3144=3148,3145
<3145=3146
<3146=3147
<3148=3149
<3149=3151,3150
<3151=3153,3152
<3155=3156
<3156=3158,3157
<3158=3160,3159
<3161=3162
<3162=3164,3163
<3165=3166
<3166=3172,3167
<3167=3170,3168
<3168=3169
<3170=3171
<3172=3173
<3174=3175
<3175=3177,3176
<3177=3179,3178
<3180=3181
<3181=3185,3182
<3182=3183
<3183=3184
<3185=3186
<3186=3188,3187
<3189=3190
<3190=3196,3191
<3191=3194,3192
<3192=3193
<3194=3195
<3196=3197
<3197=3199,3198
<3200=3201
<3201=3212,3202
<3202=3211,3203
<3203=3209,3204
<3204=3207,3205
<3205=3206
<3207=3208
<3209=3210
<3213=3214
<3214=3223,3215
<3215=3216
<3216=3217
<3217=3219,3218
<3219=3220
<3220=3222,3221
<3223=3224
<3225=3226
<3226=3230,3227
<3227=3229,3228
<3231=3232
<3232=3234,3233
<3235=3236
<3236=3247,3237
<3237=3241,3238
<3238=3239
<3239=3240
<3241=3242
<3242=3244,3243
<3244=3246,3245
<3269=3275,3274,3270
<3270=3271
<3271=3273,3272
<3275=3525,3276
<3276=3503,3277
<3277=3278
<3278=3485,3332,3279
<3279=3280
<3280=3328,3315,3281
<3281=3300,3282
<3282=3283
<3283=3284
<3284=3290,3285
<3285=3288,3286
<3286=3287
<3288=3289
<3290=3291
<3291=3293,3292
<3293=3295,3294
<3295=3297,3296
<3297=3299,3298
<3300=3301
<3301=3314,3302
<3302=3304,3303
<3304=3305
<3305=3307,3306
<3307=3309,3308
<3309=3311,3310
<3311=3313,3312
<3315=3316
<3316=3322,3317
<3317=3320,3318
<3318=3319
<3320=3321
<3322=3323
<3323=3325,3324
<3325=3327,3326
<3328=3329
<3329=3331,3330
<3332=3474,3452,3435,3414,3346,3333
<3333=3334
<3334=3340,3335
<3335=3338,3336
<3336=3337
<3338=3339
<3340=3341
<3341=3343,3342
<3343=3345,3344
<3346=3408,3403,3347
<3347=3348
<3348=3397,3349
<3349=3393,3380,3350
<3350=3369,3351
<3351=3352
<3352=3365,3353
<3353=3354
<3354=3355
<3355=3359,3356
<3356=3357
<3357=3358
<3359=3360
<3360=3362,3361
<3362=3364,3363
<3365=3366
<3366=3368,3367
<3369=3370
<3370=3379,3371
<3371=3373,3372
<3373=3374
<3374=3376,3375
<3376=3378,3377
<3380=3381
<3381=3387,3382
<3382=3385,3383
<3383=3384
<3385=3386
<3387=3388
<3388=3390,3389
<3390=3392,3391
<3393=3394
<3394=3396,3395
<3397=3398
<3398=3402,3399
<3399=3401,3400
<3403=3404
<3404=3405
<3405=3407,3406
<3408=3409
<3409=3411,3410
<3411=3413,3412
<3414=3415
<3415=3434,3433,3416
<3416=3432,3417
<3417=3425,3418
<3418=3420,3419
<3420=3422,3421
<3422=3424,3423
<3425=3427,3426
<3427=3429,3428
<3429=3431,3430
<3435=3436
<3436=3442,3437
<3437=3440,3438
<3438=3439
<3440=3441
<3442=3443
<3443=3445,3444
<3445=3447,3446
<3447=3449,3448
<3449=3451,3450
<3452=3453
<3453=3466,3454
<3454=3455
<3455=3456
<3456=3460,3457
<3457=3458
<3458=3459
<3460=3461
<3461=3463,3462
<3463=3465,3464
<3466=3467
<3467=3469,3468
<3469=3471,3470
<3471=3473,3472
<3474=3475
<3475=3479,3476
<3476=3477
<3477=3478
<3479=3480
<3480=3482,3481
<3482=3484,3483
<3485=3486
<3486=3490,3487
<3487=3488
<3488=3489
<3490=3491
<3491=3493,3492
<3493=3498,3494
<3494=3496,3495
<3496=3497
<3498=3500,3499
<3500=3502,3501
<3503=3504
<3504=3520,3505
<3505=3517,3506
<3506=3514,3507
<3507=3509,3508
<3509=3511,3510
<3511=3513,3512
<3514=3516,3515
<3517=3519,3518
<3520=3522,3521
<3522=3524,3523
<3525=3526
<3526=3530,3527
<3527=3528
<3528=3529
<3530=3531
<3580=3585,3581
<3581=3582
<3582=3584,3583
<3585=3598,3594,3590,3586
<3586=3587
<3587=3589,3588
<3590=3591
<3591=3593,3592
<3594=3595
<3595=3597,3596
<3598=3599
<3599=3601,3600
<3601=3603,3602
<3615=3621,3620,3616
<3616=3617
<3617=3619,3618
<3621=3969,3965,3956,3622
<3622=3942,3647,3623
<3623=3624
<3624=3643,3625
<3625=3626
<3626=3639,3627
<3627=3630,3628
<3628=3629
<3630=3631
<3631=3637,3632
<3632=3635,3633
<3633=3634
<3635=3636
<3637=3638
<3639=3640
<3640=3642,3641
<3643=3644
<3644=3646,3645
<3647=3648
<3648=3924,3673,3649
<3649=3650
<3650=3669,3651
<3651=3652
<3652=3665,3653
<3653=3656,3654
<3654=3655
<3656=3657
<3657=3663,3658
<3658=3661,3659
<3659=3660
<3661=3662
<3663=3664
<3665=3666
<3666=3668,3667
<3669=3670
<3670=3672,3671
<3673=3906,3674
<3674=3894,3889,3675
<3675=3676
<3676=3877,3677
<3677=3873,3678
<3678=3869,3853,3679
<3679=3680
<3680=3840,3821,3808,3798,3777,3767,3743,3733,3715,3711,3707,3703,3693,3681
<3681=3682
<3682=3691,3683
<3683=3684
<3684=3685
<3685=3687,3686
<3687=3688
<3688=3690,3689
<3691=3692
<3693=3694
<3694=3702,3695
<3695=3701,3696
<3696=3700,3697
<3697=3699,3698
<3703=3704
<3704=3706,3705
<3707=3708
<3708=3710,3709
<3711=3712
<3712=3714,3713
<3715=3716
<3716=3726,3717
<3717=3719,3718
<3719=3721,3720
<3721=3723,3722
<3723=3725,3724
<3726=3728,3727
<3728=3730,3729
<3730=3732,3731
<3733=3734
<3734=3736,3735
<3736=3738,3737
<3738=3740,3739
<3740=3742,3741
<3743=3744
<3744=3759,3745
<3745=3757,3748,3746
<3746=3747
<3748=3749
<3749=3755,3750
<3750=3753,3751
<3751=3752
<3753=3754
<3755=3756
<3757=3758
<3759=3760
<3760=3762,3761
<3762=3764,3763
<3764=3766,3765
<3767=3768
<3768=3770,3769
<3770=3772,3771
<3772=3774,3773
<3774=3776,3775
<3777=3778
<3778=3790,3779
<3779=3780
<3780=3781
<3781=3783,3782
<3783=3785,3784
<3785=3787,3786
<3787=3789,3788
<3790=3791
<3791=3793,3792
<3793=3795,3794
<3795=3797,3796
<3798=3799
<3799=3801,3800
<3801=3803,3802
<3803=3805,3804
<3805=3807,3806
<3808=3809
<3809=3813,3810
<3810=3811
<3811=3812
<3813=3814
<3814=3816,3815
<3816=3818,3817
<3818=3820,3819
<3821=3822
<3822=3836,3823
<3823=3834,3832,3830,3828,3826,3824
<3824=3825
<3826=3827
<3828=3829
<3830=3831
<3832=3833
<3834=3835
<3836=3837
<3837=3839,3838
<3840=3841
<3841=3847,3842
<3842=3845,3843
<3843=3844
<3845=3846
<3847=3848
<3848=3850,3849
<3850=3852,3851
<3853=3865,3854
<3854=3855
<3855=3859,3856
<3856=3857
<3857=3858
<3859=3860
<3860=3862,3861
<3862=3864,3863
<3865=3866
<3866=3868,3867
<3869=3870
<3870=3872,3871
<3873=3874
<3874=3876,3875
<3877=3878
<3878=3880,3879
<3880=3888,3881
<3881=3883,3882
<3883=3885,3884
<3885=3887,3886
<3889=3890
<3890=3891
<3891=3893,3892
<3894=3895
<3895=3899,3896
<3896=3898,3897
<3899=3901,3900
<3901=3903,3902
<3903=3905,3904
<3906=3907
<3907=3920,3908
<3908=3911,3909
<3909=3910
<3911=3912
<3912=3918,3913
<3913=3916,3914
<3914=3915
<3916=3917
<3918=3919
<3920=3921
<3921=3923,3922
<3924=3925
<3925=3929,3926
<3926=3927
<3927=3928
<3929=3930
<3930=3932,3931
<3932=3937,3933
<3933=3935,3934
<3935=3936
<3937=3939,3938
<3939=3941,3940
<3942=3943
<3943=3953,3944
<3944=3948,3945
<3945=3947,3946
<3948=3950,3949
<3950=3952,3951
<3953=3955,3954
<3956=3961,3957
<3957=3958
<3958=3960,3959
<3961=3962
<3962=3964,3963
<3965=3966
<3966=3968,3967
<3969=3970
<3970=3974,3971
<3971=3972
<3972=3973
<3974=3975
<4032=4035,4034,4033
<4035=4301,4036
<4036=4280,4061,4037
<4037=4038
<4038=4057,4053,4046,4039
<4039=4040
<4040=4044,4041
<4041=4042
<4042=4043
<4044=4045
<4046=4047
<4047=4051,4048
<4048=4049
<4049=4050
<4051=4052
<4053=4054
<4054=4056,4055
<4057=4058
<4058=4060,4059
<4061=4265,4250,4243,4236,4229,4197,4184,4166,4152,4066,4062
<4062=4063
<4063=4065,4064
<4066=4148,4067
<4067=4144,4130,4115,4104,4068
<4068=4100,4069
<4069=4096,4085,4070
<4070=4071
<4071=4084,4072
<4072=4080,4073
<4073=4078,4074
<4074=4075
<4075=4077,4076
<4078=4079
<4080=4081
<4081=4083,4082
<4085=4086
<4086=4095,4087
<4087=4091,4088
<4088=4089
<4089=4090
<4091=4092
<4092=4094,4093
<4096=4097
<4097=4099,4098
<4100=4101
<4101=4103,4102
<4104=4105
<4105=4114,4106
<4106=4110,4107
<4107=4108
<4108=4109
<4110=4111
<4111=4113,4112
<4115=4116
<4116=4129,4117
<4117=4125,4118
<4118=4123,4119
<4119=4120
<4120=4122,4121
<4123=4124
<4125=4126
<4126=4128,4127
<4130=4131
<4131=4143,4142,4132
<4132=4141,4133
<4133=4137,4134
<4134=4135
<4135=4136
<4137=4138
<4138=4140,4139
<4144=4145
<4145=4147,4146
<4148=4149
<4149=4151,4150
<4152=4153
<4153=4165,4164,4154
<4154=4163,4155
<4155=4159,4156
<4156=4157
<4157=4158
<4159=4160
<4160=4162,4161
<4166=4167
<4167=4183,4182,4168
<4168=4181,4169
<4169=4173,4170
<4170=4171
<4171=4172
<4173=4174
<4174=4176,4175
<4176=4178,4177
<4178=4180,4179
<4184=4185
<4185=4195,4186
<4186=4191,4187
<4187=4188
<4188=4190,4189
<4191=4192
<4192=4194,4193
<4195=4196
<4197=4225,4212,4198
<4198=4199
<4199=4208,4200
<4200=4201
<4201=4207,4202
<4202=4204,4203
<4204=4206,4205
<4208=4209
<4209=4211,4210
<4212=4221,4213
<4213=4214
<4214=4220,4215
<4215=4217,4216
<4217=4219,4218
<4221=4222
<4222=4224,4223
<4225=4226
<4226=4228,4227
<4229=4230
<4230=4235,4234,4231
<4231=4233,4232
<4236=4237
<4237=4242,4241,4238
<4238=4240,4239
<4243=4244
<4244=4249,4248,4245
<4245=4247,4246
<4250=4251
<4251=4264,4263,4252
<4252=4262,4253
<4253=4255,4254
<4255=4257,4256
<4257=4259,4258
<4259=4261,4260
<4265=4266
<4266=4278,4267
<4267=4268
<4268=4269
<4269=4271,4270
<4271=4273,4272
<4273=4275,4274
<4275=4277,4276
<4278=4279
<4280=4281
<4281=4298,4282
<4282=4295,4283
<4283=4285,4284
<4285=4289,4286
<4286=4287
<4287=4288
<4289=4290
<4290=4292,4291
<4292=4294,4293
<4295=4297,4296
<4298=4300,4299
<4301=4302
<4302=4312,4303
<4303=4307,4304
<4304=4306,4305
<4307=4309,4308
<4309=4311,4310
<4354=4363,4362,4355
<4355=4359,4356
<4356=4358,4357
<4359=4361,4360
<4363=4456,4444,4437,4366,4364
<4364=4365
<4366=4424,4415,4412,4367
<4367=4394,4368
<4368=4380,4369
<4369=4376,4370
<4370=4371
<4371=4375,4372
<4372=4374,4373
<4376=4377
<4377=4379,4378
<4380=4381
<4381=4391,4382
<4382=4386,4383
<4383=4385,4384
<4386=4390,4387
<4387=4389,4388
<4391=4393,4392
<4394=4395
<4395=4411,4410,4396
<4396=4409,4397
<4397=4399,4398
<4399=4400
<4400=4402,4401
<4402=4408,4403
<4403=4405,4404
<4405=4407,4406
<4412=4414,4413
<4415=4416
<4416=4423,4417
<4417=4419,4418
<4419=4420
<4420=4422,4421
<4424=4425
<4425=4426
<4426=4436,4435,4427
<4427=4434,4428
<4428=4430,4429
<4430=4431
<4431=4433,4432
<4437=4438
<4438=4443,4442,4439
<4439=4441,4440
<4444=4445
<4445=4455,4454,4446
<4446=4453,4447
<4447=4451,4448
<4448=4449
<4449=4450
<4451=4452
<4456=4457
<4457=4464,4463,4458
<4458=4462,4459
<4459=4461,4460
<4483=4507,4506,4484
<4484=4503,4500,4497,4494,4491,4488,4485
<4485=4487,4486
<4488=4490,4489
<4491=4493,4492
<4494=4496,4495
<4497=4499,4498
<4500=4502,4501
<4503=4505,4504
<4507=4655,4648,4639,4632,4631,4630,4629,4628,4510,4508
<4508=4509
<4510=4619,4606,4511
<4511=4602,4512
<4512=4513
<4513=4591,4514
<4514=4515
<4515=4567,4516
<4516=4517
<4517=4554,4518
<4518=4519
<4519=4541,4520
<4520=4521
<4521=4531,4522
<4522=4527,4523
<4523=4524
<4524=4526,4525
<4527=4528
<4528=4530,4529
<4531=4532
<4532=4536,4533
<4533=4535,4534
<4536=4540,4537
<4537=4539,4538
<4541=4542
<4542=4551,4543
<4543=4547,4544
<4544=4545
<4545=4546
<4547=4548
<4548=4550,4549
<4551=4553,4552
<4554=4555
<4555=4564,4556
<4556=4558,4557
<4558=4560,4559
<4560=4561
<4561=4563,4562
<4564=4566,4565
<4567=4568
<4568=4586,4569
<4569=4581,4570
<4570=4576,4571
<4571=4573,4572
<4573=4575,4574
<4576=4578,4577
<4578=4580,4579
<4581=4585,4582
<4582=4584,4583
<4586=4590,4587
<4587=4589,4588
<4591=4592
<4592=4599,4593
<4593=4595,4594
<4595=4596
<4596=4598,4597
<4599=4601,4600
<4602=4603
<4603=4605,4604
<4606=4607
<4607=4618,4608
<4608=4610,4609
<4610=4611
<4611=4613,4612
<4613=4615,4614
<4615=4617,4616
<4619=4620
<4620=4627,4626,4621
<4621=4625,4622
<4622=4624,4623
<4632=4633
<4633=4638,4637,4634
<4634=4636,4635
<4639=4640
<4640=4647,4646,4641
<4641=4645,4642
<4642=4644,4643
<4648=4649
<4649=4654,4653,4650
<4650=4652,4651
<4655=4656
<4656=4663,4662,4657
<4657=4661,4658
<4658=4660,4659
<4694=4705,4695
<4695=4702,4699,4696
<4696=4698,4697
<4699=4701,4700
<4702=4704,4703
<4712=4718,4717,4713
<4713=4714
<4714=4716,4715
<4718=4759,4758,4757,4756,4755,4721,4719
<4719=4720
<4721=4746,4722
<4722=4727,4723
<4723=4724
<4724=4726,4725
<4727=4728
<4728=4741,4729
<4729=4731,4730
<4731=4739,4732
<4732=4735,4733
<4733=4734
<4735=4736
<4736=4738,4737
<4739=4740
<4741=4743,4742
<4743=4745,4744
<4746=4747
<4747=4754,4753,4748
<4748=4752,4749
<4749=4751,4750
<4759=4760
<4760=4765,4764,4761
<4761=4763,4762
<4778=4787,4786,4779
<4779=4783,4780
<4780=4782,4781
<4783=4785,4784
<4787=4788
<4788=4802,4789
<4789=4798,4794,4790
<4790=4791
<4791=4793,4792
<4794=4795
<4795=4797,4796
<4798=4799
<4799=4801,4800
<4802=4803
<4803=4805,4804
<4805=4809,4806
<4806=4808,4807
<4818=4827,4826,4819
<4819=4823,4820
<4820=4822,4821
<4823=4825,4824
<4827=4828
<4828=4862,4846,4829
<4829=4830
<4830=4831
<4831=4841,4832
<4832=4840,4833
<4833=4835,4834
<4835=4837,4836
<4837=4839,4838
<4841=4843,4842
<4843=4845,4844
<4846=4847
<4847=4857,4848
<4848=4856,4849
<4849=4855,4850
<4850=4852,4851
<4852=4854,4853
<4857=4859,4858
<4859=4861,4860
<4862=4863
<4863=4865,4864
<4865=4867,4866
<4867=4869,4868
<4878=4881,4880,4879
<4881=4882
<4882=4883
<4888=4894,4893,4889
<4889=4890
<4890=4892,4891
<4894=5128,5119,5112,5101,5100,5099,5098,5097,5078,5071,5060,5000,4945,4940,4939,4938,4937,4936,4919,4914,4902,4895
<4895=4896
<4896=4898,4897
<4898=4899
<4899=4901,4900
<4902=4912,4903
<4903=4904
<4904=4910,4905
<4905=4906
<4906=4907
<4907=4909,4908
<4910=4911
<4912=4913
<4914=4915
<4915=4917,4916
<4917=4918
<4919=4927,4920
<4920=4921
<4921=4923,4922
<4923=4924
<4924=4926,4925
<4927=4928
<4928=4935,4934,4929
<4929=4933,4930
<4930=4932,4931
<4940=4941
<4941=4943,4942
<4943=4944
<4945=4996,4987,4984,4946
<4946=4970,4956,4947
<4947=4948
<4948=4954,4949
<4949=4952,4950
<4950=4951
<4952=4953
<4954=4955
<4956=4957
<4957=4965,4958
<4958=4964,4959
<4959=4961,4960
<4961=4963,4962
<4965=4967,4966
<4967=4969,4968
<4970=4971
<4971=4983,4982,4972
<4972=4981,4973
<4973=4977,4974
<4974=4975
<4975=4976
<4977=4978
<4978=4980,4979
<4984=4986,4985
<4987=4988
<4988=4995,4989
<4989=4991,4990
<4991=4992
<4992=4994,4993
<4996=4997
<4997=4999,4998
<5000=5056,5047,5044,5001
<5001=5002
<5002=5036,5020,5003
<5003=5004
<5004=5005
<5005=5015,5006
<5006=5014,5007
<5007=5009,5008
<5009=5011,5010
<5011=5013,5012
<5015=5017,5016
<5017=5019,5018
<5020=5021
<5021=5031,5022
<5022=5030,5023
<5023=5029,5024
<5024=5026,5025
<5026=5028,5027
<5031=5033,5032
<5033=5035,5034
<5036=5037
<5037=5039,5038
<5039=5041,5040
<5041=5043,5042
<5044=5046,5045
<5047=5048
<5048=5055,5049
<5049=5051,5050
<5051=5052
<5052=5054,5053
<5056=5057
<5057=5059,5058
<5060=5061
<5061=5070,5069,5062
<5062=5068,5063
<5063=5065,5064
<5065=5067,5066
<5071=5072
<5072=5077,5076,5073
<5073=5075,5074
<5078=5088,5079
<5079=5080
<5080=5086,5081
<5081=5084,5082
<5082=5083
<5084=5085
<5086=5087
<5088=5089
<5089=5096,5095,5090
<5090=5094,5091
<5091=5093,5092
<5101=5102
<5102=5106,5103
<5103=5104
<5104=5105
<5106=5107
<5107=5109,5108
<5109=5111,5110
<5112=5113
<5113=5115,5114
<5115=5116
<5116=5118,5117
<5119=5120
<5120=5122,5121
<5122=5123
<5123=5125,5124
<5125=5127,5126
<5128=5129
<5129=5133,5130
<5130=5132,5131
<5160=5166,5165,5161
<5161=5162
<5162=5164,5163
<5166=5167
<5167=5168
<5168=5172,5169
<5169=5170
<5170=5171
<5172=5173
<5173=5175,5174
<5183=5198,5197,5184
<5184=5194,5191,5188,5185
<5185=5187,5186
<5188=5190,5189
<5191=5193,5192
<5194=5196,5195
<5198=5318,5311,5201,5199
<5199=5200
<5201=5303,5299,5296,5202
<5202=5280,5264,5203
<5203=5262,5217,5204
<5204=5205
<5205=5206
<5206=5207
<5207=5215,5208
<5208=5209
<5209=5210
<5210=5214,5211
<5211=5213,5212
<5215=5216
<5217=5256,5247,5225,5218
<5218=5219
<5219=5223,5220
<5220=5221
<5221=5222
<5223=5224
<5225=5245,5226
<5226=5237,5227
<5227=5228
<5228=5232,5229
<5229=5231,5230
<5232=5234,5233
<5234=5236,5235
<5237=5238
<5238=5240,5239
<5240=5242,5241
<5242=5244,5243
<5245=5246
<5247=5248
<5248=5252,5249
<5249=5250
<5250=5251
<5252=5253
<5253=5255,5254
<5256=5257
<5257=5261,5258
<5258=5260,5259
<5262=5263
<5264=5265
<5265=5279,5278,5266
<5266=5277,5267
<5267=5271,5268
<5268=5269
<5269=5270
<5271=5272
<5272=5274,5273
<5274=5276,5275
<5280=5285,5281
<5281=5282
<5282=5284,5283
<5285=5286
<5286=5288,5287
<5288=5294,5289
<5289=5292,5290
<5290=5291
<5292=5293
<5294=5295
<5296=5298,5297
<5299=5300
<5300=5302,5301
<5303=5304
<5304=5305
<5305=5310,5309,5306
<5306=5308,5307
<5311=5312
<5312=5317,5316,5313
<5313=5315,5314
<5318=5319
<5319=5324,5323,5320
<5320=5322,5321
<5346=5355,5354,5347
<5347=5351,5348
<5348=5350,5349
<5351=5353,5352
<5355=5372,5363,5356
<5356=5357
<5357=5361,5358
<5358=5359
<5359=5360
<5361=5362
<5363=5364
<5364=5368,5365
<5365=5366
<5366=5367
<5368=5369
<5369=5371,5370
<5372=5373
<5373=5382,5381,5374
<5374=5380,5375
<5375=5377,5376
<5377=5379,5378
<5392=5394,5393
<5394=5703,5699,5695,5691,5682,5673,5664,5655,5646,5637,5628,5619,5610,5601,5592,5583,5574,5565,5556,5552,5548,5544,5540,5536,5527,5523,5517,5513,5505,5497,5493,5481,5477,5473,5460,5456,5452,5448,5444,5440,5436,5414,5409,5403,5399,5395
<5395=5396
<5396=5398,5397
<5399=5400
<5400=5402,5401
<5403=5404
<5404=5408,5405
<5405=5407,5406
<5409=5410
<5410=5412,5411
<5412=5413
<5414=5428,5424,5421,5415
<5415=5416
<5416=5418,5417
<5418=5420,5419
<5421=5423,5422
<5424=5425
<5425=5427,5426
<5428=5429
<5429=5430
<5430=5435,5434,5431
<5431=5433,5432
<5436=5437
<5437=5439,5438
<5440=5441
<5441=5443,5442
<5444=5445
<5445=5447,5446
<5448=5449
<5449=5451,5450
<5452=5453
<5453=5455,5454
<5456=5457
<5457=5459,5458
<5460=5461
<5461=5472,5462
<5462=5470,5463
<5463=5468,5464
<5464=5465
<5465=5467,5466
<5468=5469
<5470=5471
<5473=5474
<5474=5476,5475
<5477=5478
<5478=5480,5479
<5481=5482
<5482=5492,5483
<5483=5491,5484
<5484=5490,5485
<5485=5489,5486
<5486=5488,5487
<5493=5494
<5494=5496,5495
<5497=5498
<5498=5500,5499
<5500=5502,5501
<5502=5504,5503
<5505=5506
<5506=5508,5507
<5508=5510,5509
<5510=5512,5511
<5513=5514
<5514=5516,5515
<5517=5518
<5518=5522,5519
<5519=5521,5520
<5523=5524
<5524=5526,5525
<5527=5528
<5528=5534,5529
<5529=5532,5530
<5530=5531
<5532=5533
<5534=5535
<5536=5537
<5537=5539,5538
<5540=5541
<5541=5543,5542
<5544=5545
<5545=5547,5546
<5548=5549
<5549=5551,5550
<5552=5553
<5553=5555,5554
<5556=5557
<5557=5561,5558
<5558=5559
<5559=5560
<5561=5562
<5562=5564,5563
<5565=5566
<5566=5570,5567
<5567=5568
<5568=5569
<5570=5571
<5571=5573,5572
<5574=5575
<5575=5579,5576
<5576=5577
<5577=5578
<5579=5580
<5580=5582,5581
<5583=5584
<5584=5588,5585
<5585=5586
<5586=5587
<5588=5589
<5589=5591,5590
<5592=5593
<5593=5597,5594
<5594=5595
<5595=5596
<5597=5598
<5598=5600,5599
<5601=5602
<5602=5606,5603
<5603=5604
<5604=5605
<5606=5607
<5607=5609,5608
<5610=5611
<5611=5615,5612
<5612=5613
<5613=5614
<5615=5616
<5616=5618,5617
<5619=5620
<5620=5624,5621
<5621=5622
<5622=5623
<5624=5625
<5625=5627,5626
<5628=5629
<5629=5633,5630
<5630=5631
<5631=5632
<5633=5634
<5634=5636,5635
<5637=5638
<5638=5642,5639
<5639=5640
<5640=5641
<5642=5643
<5643=5645,5644
<5646=5647
<5647=5651,5648
<5648=5649
<5649=5650
<5651=5652
<5652=5654,5653
<5655=5656
<5656=5660,5657
<5657=5658
<5658=5659
<5660=5661
<5661=5663,5662
<5664=5665
<5665=5669,5666
<5666=5667
<5667=5668
<5669=5670
<5670=5672,5671
<5673=5674
<5674=5678,5675
<5675=5676
<5676=5677
<5678=5679
<5679=5681,5680
<5682=5683
<5683=5687,5684
<5684=5685
<5685=5686
<5687=5688
<5688=5690,5689
<5691=5692
<5692=5694,5693
<5695=5696
<5696=5698,5697
<5699=5700
<5700=5702,5701
<5703=5704
<5704=5706,5705
<5756=5758,5757
<5758=5763,5759
<5759=5760
<5760=5762,5761
<5763=5764
<5764=5766,5765
<5766=5767
<5767=5769,5768
<5777=5789,5788,5778
<5778=5785,5782,5779
<5779=5781,5780
<5782=5784,5783
<5785=5787,5786
<5789=5790
<5790=6927,5791
<5791=6918,6912,6906,6895,6888,6879,6848,6841,6826,6819,6806,6697,6672,6645,6638,5792,5807,5818,5824,5828,5832,5906,6069,6104,6111,6120,6129,6136,6157,6189,6198,6230,6262,6271,6280,6289,6298,6307,6318,6329,6340,6351,6362,6373,6382,6391,6400,6409,6418,6427,6436,6445,6454,6463,6472,6481,6490,6499,6508,6517,6532,6545,6553,6566,6575
<5792=5805,5793
<5793=5794
<5794=5795
<5795=5801,5796
<5796=5797
<5797=5798
<5798=5800,5799
<5801=5802
<5802=5804,5803
<5805=5806
<5807=5808
<5808=5812,5809
<5809=5810
<5810=5811
<5812=5813
<5813=5815,5814
<5815=5817,5816
<5818=5819
<5819=5821,5820
<5821=5823,5822
<5824=5825
<5825=5827,5826
<5828=5829
<5829=5831,5830
<5832=5902,5833
<5833=5847,5834
<5834=5835
<5835=5841,5836
<5836=5839,5837
<5837=5838
<5839=5840
<5841=5842
<5842=5844,5843
<5844=5846,5845
<5847=5898,5889,5886,5848
<5848=5864,5849
<5849=5850
<5850=5856,5851
<5851=5854,5852
<5852=5853
<5854=5855
<5856=5857
<5857=5859,5858
<5859=5861,5860
<5861=5863,5862
<5864=5865
<5865=5878,5866
<5866=5869,5867
<5867=5868
<5869=5870
<5870=5876,5871
<5871=5874,5872
<5872=5873
<5874=5875
<5876=5877
<5878=5879
<5879=5881,5880
<5881=5883,5882
<5883=5885,5884
<5886=5888,5887
<5889=5890
<5890=5897,5891
<5891=5893,5892
<5893=5894
<5894=5896,5895
<5898=5899
<5899=5901,5900
<5902=5903
<5903=5905,5904
<5906=6067,5907
<5907=6065,6058,6045,6044,6042,6035,6034,6032,6025,6024,6022,6020,5908
<5908=5909
<5909=6018,6010,5910
<5910=5911
<5911=6003,5996,5983,5966,5925,5912
<5912=5913
<5913=5917,5914
<5914=5915
<5915=5916
<5917=5918
<5918=5920,5919
<5920=5924,5921
<5921=5923,5922
<5925=5962,5953,5950,5926
<5926=5935,5927
<5927=5928
<5928=5930,5929
<5930=5932,5931
<5932=5934,5933
<5935=5936
<5936=5945,5937
<5937=5943,5938
<5938=5941,5939
<5939=5940
<5941=5942
<5943=5944
<5945=5947,5946
<5947=5949,5948
<5950=5952,5951
<5953=5954
<5954=5961,5955
<5955=5957,5956
<5957=5958
<5958=5960,5959
<5962=5963
<5963=5965,5964
<5966=5981,5967
<5967=5968
<5968=5969
<5969=5975,5970
<5970=5973,5971
<5971=5972
<5973=5974
<5975=5976
<5976=5978,5977
<5978=5980,5979
<5981=5982
<5983=5984
<5984=5990,5985
<5985=5988,5986
<5986=5987
<5988=5989
<5990=5991
<5991=5993,5992
<5993=5995,5994
<5996=5997
<5997=6001,5998
<5998=5999
<5999=6000
<6001=6002
<6003=6004
<6004=6009,6008,6005
<6005=6007,6006
<6010=6011
<6011=6012
<6012=6016,6013
<6013=6014
<6014=6015
<6016=6017
<6018=6019
<6020=6021
<6022=6023
<6025=6026
<6026=6030,6027
<6027=6028
<6028=6029
<6030=6031
<6032=6033
<6035=6036
<6036=6040,6037
<6037=6038
<6038=6039
<6040=6041
<6042=6043
<6045=6046
<6046=6050,6047
<6047=6048
<6048=6049
<6050=6051
<6051=6053,6052
<6053=6057,6054
<6054=6056,6055
<6058=6059
<6059=6063,6060
<6060=6061
<6061=6062
<6063=6064
<6065=6066
<6067=6068
<6069=6100,6070
<6070=6071
<6071=6096,6091,6072
<6072=6073
<6073=6083,6074
<6074=6075
<6075=6076
<6076=6082,6077
<6077=6079,6078
<6079=6081,6080
<6083=6084
<6084=6086,6085
<6086=6088,6087
<6088=6090,6089
<6091=6092
<6092=6093
<6093=6095,6094
<6096=6097
<6097=6099,6098
<6100=6101
<6101=6103,6102
<6104=6105
<6105=6110,6109,6106
<6106=6108,6107
<6111=6112
<6112=6114,6113
<6114=6115
<6115=6117,6116
<6117=6119,6118
<6120=6121
<6121=6125,6122
<6122=6123
<6123=6124
<6125=6126
<6126=6128,6127
<6129=6130
<6130=6134,6131
<6131=6132
<6132=6133
<6134=6135
<6136=6151,6137
<6137=6138
<6138=6139
<6139=6143,6140
<6140=6141
<6141=6142
<6143=6144
<6144=6146,6145
<6146=6148,6147
<6148=6150,6149
<6151=6152
<6152=6154,6153
<6154=6156,6155
<6157=6181,6172,6169,6158
<6158=6159
<6159=6163,6160
<6160=6161
<6161=6162
<6163=6164
<6164=6166,6165
<6166=6168,6167
<6169=6171,6170
<6172=6173
<6173=6180,6174
<6174=6176,6175
<6176=6177
<6177=6179,6178
<6181=6182
<6182=6183
<6183=6188,6187,6184
<6184=6186,6185
<6189=6190
<6190=6194,6191
<6191=6192
<6192=6193
<6194=6195
<6195=6197,6196
<6198=6222,6213,6210,6199
<6199=6200
<6200=6204,6201
<6201=6202
<6202=6203
<6204=6205
<6205=6207,6206
<6207=6209,6208
<6210=6212,6211
<6213=6214
<6214=6221,6215
<6215=6217,6216
<6217=6218
<6218=6220,6219
<6222=6223
<6223=6224
<6224=6229,6228,6225
<6225=6227,6226
<6230=6254,6245,6242,6231
<6231=6232
<6232=6236,6233
<6233=6234
<6234=6235
<6236=6237
<6237=6239,6238
<6239=6241,6240
<6242=6244,6243
<6245=6246
<6246=6253,6247
<6247=6249,6248
<6249=6250
<6250=6252,6251
<6254=6255
<6255=6256
<6256=6261,6260,6257
<6257=6259,6258
<6262=6263
<6263=6267,6264
<6264=6265
<6265=6266
<6267=6268
<6268=6270,6269
<6271=6272
<6272=6276,6273
<6273=6274
<6274=6275
<6276=6277
<6277=6279,6278
<6280=6281
<6281=6285,6282
<6282=6283
<6283=6284
<6285=6286
<6286=6288,6287
<6289=6290
<6290=6294,6291
<6291=6292
<6292=6293
<6294=6295
<6295=6297,6296
<6298=6299
<6299=6303,6300
<6300=6301
<6301=6302
<6303=6304
<6304=6306,6305
<6307=6308
<6308=6312,6309
<6309=6310
<6310=6311
<6312=6313
<6313=6315,6314
<6315=6317,6316
<6318=6319
<6319=6323,6320
<6320=6321
<6321=6322
<6323=6324
<6324=6326,6325
<6326=6328,6327
<6329=6330
<6330=6334,6331
<6331=6332
<6332=6333
<6334=6335
<6335=6337,6336
<6337=6339,6338
<6340=6341
<6341=6345,6342
<6342=6343
<6343=6344
<6345=6346
<6346=6348,6347
<6348=6350,6349
<6351=6352
<6352=6356,6353
<6353=6354
<6354=6355
<6356=6357
<6357=6359,6358
<6359=6361,6360
<6362=6363
<6363=6367,6364
<6364=6365
<6365=6366
<6367=6368
<6368=6370,6369
<6370=6372,6371
<6373=6374
<6374=6378,6375
<6375=6376
<6376=6377
<6378=6379
<6379=6381,6380
<6382=6383
<6383=6387,6384
<6384=6385
<6385=6386
<6387=6388
<6388=6390,6389
<6391=6392
<6392=6396,6393
<6393=6394
<6394=6395
<6396=6397
<6397=6399,6398
<6400=6401
<6401=6405,6402
<6402=6403
<6403=6404
<6405=6406
<6406=6408,6407
<6409=6410
<6410=6414,6411
<6411=6412
<6412=6413
<6414=6415
<6415=6417,6416
<6418=6419
<6419=6423,6420
<6420=6421
<6421=6422
<6423=6424
<6424=6426,6425
<6427=6428
<6428=6432,6429
<6429=6430
<6430=6431
<6432=6433
<6433=6435,6434
<6436=6437
<6437=6441,6438
<6438=6439
<6439=6440
<6441=6442
<6442=6444,6443
<6445=6446
<6446=6450,6447
<6447=6448
<6448=6449
<6450=6451
<6451=6453,6452
<6454=6455
<6455=6459,6456
<6456=6457
<6457=6458
<6459=6460
<6460=6462,6461
<6463=6464
<6464=6468,6465
<6465=6466
<6466=6467
<6468=6469
<6469=6471,6470
<6472=6473
<6473=6477,6474
<6474=6475
<6475=6476
<6477=6478
<6478=6480,6479
<6481=6482
<6482=6486,6483
<6483=6484
<6484=6485
<6486=6487
<6487=6489,6488
<6490=6491
<6491=6495,6492
<6492=6493
<6493=6494
<6495=6496
<6496=6498,6497
<6499=6500
<6500=6504,6501
<6501=6502
<6502=6503
<6504=6505
<6505=6507,6506
<6508=6509
<6509=6513,6510
<6510=6511
<6511=6512
<6513=6514
<6514=6516,6515
<6517=6518
<6518=6526,6519
<6519=6524,6520
<6520=6521
<6521=6523,6522
<6524=6525
<6526=6527
<6527=6529,6528
<6529=6531,6530
<6532=6533
<6533=6539,6534
<6534=6537,6535
<6535=6536
<6537=6538
<6539=6540
<6540=6542,6541
<6542=6544,6543
<6545=6546
<6546=6550,6547
<6547=6549,6548
<6550=6552,6551
<6553=6554
<6554=6560,6555
<6555=6558,6556
<6556=6557
<6558=6559
<6560=6561
<6561=6563,6562
<6563=6565,6564
<6566=6567
<6567=6571,6568
<6568=6569
<6569=6570
<6571=6572
<6572=6574,6573
<6575=6634,6625,6622,6576
<6576=6577
<6577=6602,6587,6578
<6578=6579
<6579=6580
<6580=6582,6581
<6582=6584,6583
<6584=6586,6585
<6587=6588
<6588=6594,6589
<6589=6592,6590
<6590=6591
<6592=6593
<6594=6595
<6595=6597,6596
<6597=6599,6598
<6599=6601,6600
<6602=6603
<6603=6616,6604
<6604=6605
<6605=6606
<6606=6610,6607
<6607=6608
<6608=6609
<6610=6611
<6611=6613,6612
<6613=6615,6614
<6616=6617
<6617=6619,6618
<6619=6621,6620
<6622=6624,6623
<6625=6626
<6626=6633,6627
<6627=6629,6628
<6629=6630
<6630=6632,6631
<6634=6635
<6635=6637,6636
<6638=6639
<6639=6644,6643,6640
<6640=6642,6641
<6645=6659,6653,6646
<6646=6647
<6647=6648
<6648=6650,6649
<6650=6652,6651
<6653=6654
<6654=6656,6655
<6656=6658,6657
<6659=6660
<6660=6662,6661
<6662=6666,6663
<6663=6664
<6664=6665
<6666=6667
<6667=6669,6668
<6669=6671,6670
<6672=6686,6680,6673
<6673=6674
<6674=6675
<6675=6677,6676
<6677=6679,6678
<6680=6681
<6681=6683,6682
<6683=6685,6684
<6686=6687
<6687=6691,6688
<6688=6689
<6689=6690
<6691=6692
<6692=6694,6693
<6694=6696,6695
<6697=6804,6721,6698
<6698=6699
<6699=6715,6700
<6700=6701
<6701=6709,6702
<6702=6707,6703
<6703=6704
<6704=6706,6705
<6707=6708
<6709=6710
<6710=6712,6711
<6712=6714,6713
<6715=6716
<6716=6718,6717
<6718=6720,6719
<6721=6803,6802,6801,6799,6793,6787,6781,6775,6762,6756,6750,6737,6728,6722
<6722=6723
<6723=6725,6724
<6725=6727,6726
<6728=6729
<6729=6735,6730
<6730=6733,6731
<6731=6732
<6733=6734
<6735=6736
<6737=6738
<6738=6744,6739
<6739=6742,6740
<6740=6741
<6742=6743
<6744=6745
<6745=6747,6746
<6747=6749,6748
<6750=6751
<6751=6753,6752
<6753=6755,6754
<6756=6757
<6757=6759,6758
<6759=6761,6760
<6762=6763
<6763=6772,6764
<6764=6770,6765
<6765=6768,6766
<6766=6767
<6768=6769
<6770=6771
<6772=6774,6773
<6775=6776
<6776=6778,6777
<6778=6780,6779
<6781=6782
<6782=6784,6783
<6784=6786,6785
<6787=6788
<6788=6790,6789
<6790=6792,6791
<6793=6794
<6794=6796,6795
<6796=6798,6797
<6799=6800
<6804=6805
<6806=6815,6807
<6807=6808
<6808=6809
<6809=6813,6810
<6810=6811
<6811=6812
<6813=6814
<6815=6816
<6816=6818,6817
<6819=6820
<6820=6825,6824,6821
<6821=6823,6822
<6826=6827
<6827=6833,6828
<6828=6831,6829
<6829=6830
<6831=6832
<6833=6834
<6834=6836,6835
<6836=6838,6837
<6838=6840,6839
<6841=6842
<6842=6846,6843
<6843=6844
<6844=6845
<6846=6847
<6848=6862,6849
<6849=6850
<6850=6854,6851
<6851=6852
<6852=6853
<6854=6855
<6855=6857,6856
<6857=6859,6858
<6859=6861,6860
<6862=6863
<6863=6874,6864
<6864=6866,6865
<6866=6867
<6867=6869,6868
<6869=6871,6870
<6871=6873,6872
<6874=6876,6875
<6876=6878,6877
<6879=6881,6880
<6881=6882
<6882=6884,6883
<6884=6885
<6885=6887,6886
<6888=6889
<6889=6891,6890
<6891=6892
<6892=6894,6893
<6895=6896
<6896=6900,6897
<6897=6898
<6898=6899
<6900=6901
<6901=6903,6902
<6903=6905,6904
<6906=6907
<6907=6909,6908
<6909=6911,6910
<6912=6913
<6913=6917,6914
<6914=6916,6915
<6918=6919
<6919=6921,6920
<6921=6922
<6922=6924,6923
<6924=6926,6925
<6927=6928
<6928=6955,6929
<6929=6947,6930
<6930=6939,6931
<6931=6938,6932
<6932=6934,6933
<6934=6935
<6935=6937,6936
<6939=6946,6940
<6940=6942,6941
<6942=6943
<6943=6945,6944
<6947=6949,6948
<6949=6951,6950
<6951=6952
<6952=6954,6953
<7093=7099,7098,7094
<7094=7095
<7095=7097,7096
<7099=7225,7212,7206,7197,7180,7163,7146,7135,7126,7117,7108,7104,7100
<7100=7101
<7101=7103,7102
<7104=7105
<7105=7107,7106
<7108=7109
<7109=7115,7110
<7110=7113,7111
<7111=7112
<7113=7114
<7115=7116
<7117=7118
<7118=7122,7119
<7119=7120
<7120=7121
<7122=7123
<7123=7125,7124
<7126=7127
<7127=7131,7128
<7128=7129
<7129=7130
<7131=7132
<7132=7134,7133
<7135=7136
<7136=7140,7137
<7137=7138
<7138=7139
<7140=7141
<7141=7143,7142
<7143=7145,7144
<7146=7147
<7147=7153,7148
<7148=7151,7149
<7149=7150
<7151=7152
<7153=7154
<7154=7156,7155
<7156=7158,7157
<7158=7160,7159
<7160=7162,7161
<7163=7164
<7164=7170,7165
<7165=7168,7166
<7166=7167
<7168=7169
<7170=7171
<7171=7173,7172
<7173=7175,7174
<7175=7177,7176
<7177=7179,7178
<7180=7181
<7181=7187,7182
<7182=7185,7183
<7183=7184
<7185=7186
<7187=7188
<7188=7190,7189
<7190=7192,7191
<7192=7194,7193
<7194=7196,7195
<7197=7198
<7198=7200,7199
<7200=7201
<7201=7203,7202
<7203=7205,7204
<7206=7207
<7207=7209,7208
<7209=7211,7210
<7212=7213
<7213=7222,7214
<7214=7220,7215
<7215=7218,7216
<7216=7217
<7218=7219
<7220=7221
<7222=7224,7223
<7225=7226
<7226=7265,7264,7227
<7227=7263,7228
<7228=7258,7229
<7229=7256,7230
<7230=7245,7231
<7231=7232
<7232=7234,7233
<7234=7244,7235
<7235=7243,7236
<7236=7242,7237
<7237=7239,7238
<7239=7241,7240
<7245=7246
<7246=7255,7247
<7247=7254,7248
<7248=7250,7249
<7250=7251
<7251=7253,7252
<7256=7257
<7258=7262,7259
<7259=7261,7260
<7293=7302,7301,7294
<7294=7298,7295
<7295=7297,7296
<7298=7300,7299
<7302=8226,8218,8205,7663,7654,7645,7636,7627,7618,7609,7600,7591,7582,7573,7564,7555,7546,7537,7528,7519,7508,7497,7486,7475,7464,7453,7444,7435,7426,7417,7408,7376,7344,7335,7303
<7303=7327,7318,7315,7304
<7304=7305
<7305=7309,7306
<7306=7307
<7307=7308
<7309=7310
<7310=7312,7311
<7312=7314,7313
<7315=7317,7316
<7318=7319
<7319=7326,7320
<7320=7322,7321
<7322=7323
<7323=7325,7324
<7327=7328
<7328=7329
<7329=7334,7333,7330
<7330=7332,7331
<7335=7336
<7336=7340,7337
<7337=7338
<7338=7339
<7340=7341
<7341=7343,7342
<7344=7368,7359,7356,7345
<7345=7346
<7346=7350,7347
<7347=7348
<7348=7349
<7350=7351
<7351=7353,7352
<7353=7355,7354
<7356=7358,7357
<7359=7360
<7360=7367,7361
<7361=7363,7362
<7363=7364
<7364=7366,7365
<7368=7369
<7369=7370
<7370=7375,7374,7371
<7371=7373,7372
<7376=7400,7391,7388,7377
<7377=7378
<7378=7382,7379
<7379=7380
<7380=7381
<7382=7383
<7383=7385,7384
<7385=7387,7386
<7388=7390,7389
<7391=7392
<7392=7399,7393
<7393=7395,7394
<7395=7396
<7396=7398,7397
<7400=7401
<7401=7402
<7402=7407,7406,7403
<7403=7405,7404
<7408=7409
<7409=7413,7410
<7410=7411
<7411=7412
<7413=7414
<7414=7416,7415
<7417=7418
<7418=7422,7419
<7419=7420
<7420=7421
<7422=7423
<7423=7425,7424
<7426=7427
<7427=7431,7428
<7428=7429
<7429=7430
<7431=7432
<7432=7434,7433
<7435=7436
<7436=7440,7437
<7437=7438
<7438=7439
<7440=7441
<7441=7443,7442
<7444=7445
<7445=7449,7446
<7446=7447
<7447=7448
<7449=7450
<7450=7452,7451
<7453=7454
<7454=7458,7455
<7455=7456
<7456=7457
<7458=7459
<7459=7461,7460
<7461=7463,7462
<7464=7465
<7465=7469,7466
<7466=7467
<7467=7468
<7469=7470
<7470=7472,7471
<7472=7474,7473
<7475=7476
<7476=7480,7477
<7477=7478
<7478=7479
<7480=7481
<7481=7483,7482
<7483=7485,7484
<7486=7487
<7487=7491,7488
<7488=7489
<7489=7490
<7491=7492
<7492=7494,7493
<7494=7496,7495
<7497=7498
<7498=7502,7499
<7499=7500
<7500=7501
<7502=7503
<7503=7505,7504
<7505=7507,7506
<7508=7509
<7509=7513,7510
<7510=7511
<7511=7512
<7513=7514
<7514=7516,7515
<7516=7518,7517
<7519=7520
<7520=7524,7521
<7521=7522
<7522=7523
<7524=7525
<7525=7527,7526
<7528=7529
<7529=7533,7530
<7530=7531
<7531=7532
<7533=7534
<7534=7536,7535
<7537=7538
<7538=7542,7539
<7539=7540
<7540=7541
<7542=7543
<7543=7545,7544
<7546=7547
<7547=7551,7548
<7548=7549
<7549=7550
<7551=7552
<7552=7554,7553
<7555=7556
<7556=7560,7557
<7557=7558
<7558=7559
<7560=7561
<7561=7563,7562
<7564=7565
<7565=7569,7566
<7566=7567
<7567=7568
<7569=7570
<7570=7572,7571
<7573=7574
<7574=7578,7575
<7575=7576
<7576=7577
<7578=7579
<7579=7581,7580
<7582=7583
<7583=7587,7584
<7584=7585
<7585=7586
<7587=7588
<7588=7590,7589
<7591=7592
<7592=7596,7593
<7593=7594
<7594=7595
<7596=7597
<7597=7599,7598
<7600=7601
<7601=7605,7602
<7602=7603
<7603=7604
<7605=7606
<7606=7608,7607
<7609=7610
<7610=7614,7611
<7611=7612
<7612=7613
<7614=7615
<7615=7617,7616
<7618=7619
<7619=7623,7620
<7620=7621
<7621=7622
<7623=7624
<7624=7626,7625
<7627=7628
<7628=7632,7629
<7629=7630
<7630=7631
<7632=7633
<7633=7635,7634
<7636=7637
<7637=7641,7638
<7638=7639
<7639=7640
<7641=7642
<7642=7644,7643
<7645=7646
<7646=7650,7647
<7647=7648
<7648=7649
<7650=7651
<7651=7653,7652
<7654=7655
<7655=7659,7656
<7656=7657
<7657=7658
<7659=7660
<7660=7662,7661
<7663=8203,7664
<7664=8193,8179,8172,8166,8159,8150,8143,8116,8108,8088,8047,8041,8015,7983,7951,7938,7918,7905,7892,7875,7862,7846,7829,7812,7800,7785,7775,7771,7742,7688,7681,7671,7665
<7665=7666
<7666=7668,7667
<7668=7670,7669
<7671=7679,7672
<7672=7673
<7673=7675,7674
<7675=7676
<7676=7678,7677
<7679=7680
<7681=7682
<7682=7684,7683
<7684=7685
<7685=7687,7686
<7688=7734,7725,7722,7689
<7689=7690
<7690=7691
<7691=7716,7692
<7692=7712,7697,7695,7693
<7693=7694
<7695=7696
<7697=7698
<7698=7709,7699
<7699=7707,7700
<7700=7705,7701
<7701=7702
<7702=7704,7703
<7705=7706
<7707=7708
<7709=7711,7710
<7712=7713
<7713=7715,7714
<7716=7717
<7717=7719,7718
<7719=7721,7720
<7722=7724,7723
<7725=7726
<7726=7733,7727
<7727=7729,7728
<7729=7730
<7730=7732,7731
<7734=7735
<7735=7736
<7736=7741,7740,7737
<7737=7739,7738
<7742=7763,7754,7751,7743
<7743=7744
<7744=7746,7745
<7746=7748,7747
<7748=7750,7749
<7751=7753,7752
<7754=7755
<7755=7762,7756
<7756=7758,7757
<7758=7759
<7759=7761,7760
<7763=7764
<7764=7765
<7765=7770,7769,7766
<7766=7768,7767
<7771=7772
<7772=7774,7773
<7775=7783,7776
<7776=7777
<7777=7781,7778
<7778=7779
<7779=7780
<7781=7782
<7783=7784
<7785=7798,7786
<7786=7791,7787
<7787=7788
<7788=7790,7789
<7791=7792
<7792=7794,7793
<7794=7795
<7795=7797,7796
<7798=7799
<7800=7810,7801
<7801=7802
<7802=7806,7803
<7803=7804
<7804=7805
<7806=7807
<7807=7809,7808
<7810=7811
<7812=7827,7813
<7813=7814
<7814=7815
<7815=7821,7816
<7816=7819,7817
<7817=7818
<7819=7820
<7821=7822
<7822=7824,7823
<7824=7826,7825
<7827=7828
<7829=7844,7830
<7830=7831
<7831=7832
<7832=7838,7833
<7833=7836,7834
<7834=7835
<7836=7837
<7838=7839
<7839=7841,7840
<7841=7843,7842
<7844=7845
<7846=7860,7847
<7847=7848
<7848=7854,7849
<7849=7852,7850
<7850=7851
<7852=7853
<7854=7855
<7855=7857,7856
<7857=7859,7858
<7860=7861
<7862=7863
<7863=7869,7864
<7864=7867,7865
<7865=7866
<7867=7868
<7869=7870
<7870=7872,7871
<7872=7874,7873
<7875=7876
<7876=7886,7877
<7877=7880,7878
<7878=7879
<7880=7881
<7881=7883,7882
<7883=7885,7884
<7886=7887
<7887=7889,7888
<7889=7891,7890
<7892=7893
<7893=7899,7894
<7894=7897,7895
<7895=7896
<7897=7898
<7899=7900
<7900=7902,7901
<7902=7904,7903
<7905=7906
<7906=7912,7907
<7907=7910,7908
<7908=7909
<7910=7911
<7912=7913
<7913=7915,7914
<7915=7917,7916
<7918=7932,7919
<7919=7920
<7920=7924,7921
<7921=7922
<7922=7923
<7924=7925
<7925=7927,7926
<7927=7929,7928
<7929=7931,7930
<7932=7933
<7933=7935,7934
<7935=7937,7936
<7938=7939
<7939=7945,7940
<7940=7943,7941
<7941=7942
<7943=7944
<7945=7946
<7946=7948,7947
<7948=7950,7949
<7951=7979,7970,7967,7952
<7952=7953
<7953=7959,7954
<7954=7957,7955
<7955=7956
<7957=7958
<7959=7960
<7960=7962,7961
<7962=7964,7963
<7964=7966,7965
<7967=7969,7968
<7970=7971
<7971=7978,7972
<7972=7974,7973
<7974=7975
<7975=7977,7976
<7979=7980
<7980=7982,7981
<7983=8011,8002,7999,7984
<7984=7985
<7985=7991,7986
<7986=7989,7987
<7987=7988
<7989=7990
<7991=7992
<7992=7994,7993
<7994=7996,7995
<7996=7998,7997
<7999=8001,8000
<8002=8003
<8003=8010,8004
<8004=8006,8005
<8006=8007
<8007=8009,8008
<8011=8012
<8012=8014,8013
<8015=8037,8028,8025,8016
<8016=8017
<8017=8018
<8018=8020,8019
<8020=8022,8021
<8022=8024,8023
<8025=8027,8026
<8028=8029
<8029=8036,8030
<8030=8032,8031
<8032=8033
<8033=8035,8034
<8037=8038
<8038=8040,8039
<8041=8042
<8042=8044,8043
<8044=8046,8045
<8047=8084,8048
<8048=8077,8070,8063,8056,8049
<8049=8050
<8050=8054,8051
<8051=8052
<8052=8053
<8054=8055
<8056=8057
<8057=8061,8058
<8058=8059
<8059=8060
<8061=8062
<8063=8064
<8064=8068,8065
<8065=8066
<8066=8067
<8068=8069
<8070=8071
<8071=8075,8072
<8072=8073
<8073=8074
<8075=8076
<8077=8078
<8078=8082,8079
<8079=8080
<8080=8081
<8082=8083
<8084=8085
<8085=8087,8086
<8088=8102,8097,8089
<8089=8090
<8090=8091
<8091=8095,8092
<8092=8093
<8093=8094
<8095=8096
<8097=8098
<8098=8100,8099
<8100=8101
<8102=8103
<8103=8107,8104
<8104=8106,8105
<8108=8109
<8109=8111,8110
<8111=8113,8112
<8113=8115,8114
<8116=8139,8130,8127,8117
<8117=8118
<8118=8119
<8119=8121,8120
<8121=8122
<8122=8124,8123
<8124=8126,8125
<8127=8129,8128
<8130=8131
<8131=8138,8132
<8132=8134,8133
<8134=8135
<8135=8137,8136
<8139=8140
<8140=8142,8141
<8143=8144
<8144=8149,8148,8145
<8145=8147,8146
<8150=8155,8151
<8151=8152
<8152=8154,8153
<8155=8156
<8156=8158,8157
<8159=8160
<8160=8165,8164,8161
<8161=8163,8162
<8166=8167
<8167=8171,8168
<8168=8170,8169
<8172=8173
<8173=8177,8174
<8174=8175
<8175=8176
<8177=8178
<8179=8191,8180
<8180=8181
<8181=8185,8182
<8182=8183
<8183=8184
<8185=8186
<8186=8188,8187
<8188=8190,8189
<8191=8192
<8193=8201,8194
<8194=8195
<8195=8197,8196
<8197=8198
<8198=8200,8199
<8201=8202
<8203=8204
<8205=8207,8206
<8207=8208
<8208=8217,8209
<8209=8216,8210
<8210=8212,8211
<8212=8213
<8213=8215,8214
<8218=8220,8219
<8220=8221
<8221=8225,8222
<8222=8224,8223
<8226=8228,8227
<8228=8229
<8351=8354,8353,8352
<8358=8367,8366,8359
<8359=8363,8360
<8360=8362,8361
<8363=8365,8364
<8367=8377,8368
<8368=8369
<8369=8375,8370
<8370=8373,8371
<8371=8372
<8373=8374
<8375=8376
<8377=8378
<8378=8385,8384,8379
<8379=8383,8380
<8380=8382,8381
<8393=8396,8395,8394
<8400=8403,8402,8401
<8403=8412,8408,8404
<8404=8405
<8405=8407,8406
<8408=8409
<8409=8411,8410
<8412=8413
<8413=8415,8414
<8422=8425,8424,8423
<8425=8447,8441,8432,8426
<8426=8427
<8427=8431,8428
<8428=8430,8429
<8432=8433
<8433=8437,8434
<8434=8435
<8435=8436
<8437=8438
<8438=8440,8439
<8441=8442
<8442=8446,8443
<8443=8445,8444
<8447=8448
<8448=8450,8449
<8450=8451
<8451=8453,8452
<8463=8472,8471,8464
<8464=8468,8465
<8465=8467,8466
<8468=8470,8469
<8472=8516,8512,8508,8501,8494,8482,8473
<8473=8474
<8474=8478,8475
<8475=8476
<8476=8477
<8478=8479
<8479=8481,8480
<8482=8487,8483
<8483=8484
<8484=8486,8485
<8487=8488
<8488=8490,8489
<8490=8491
<8491=8493,8492
<8494=8495
<8495=8499,8496
<8496=8497
<8497=8498
<8499=8500
<8501=8502
<8502=8506,8503
<8503=8504
<8504=8505
<8506=8507
<8508=8509
<8509=8511,8510
<8512=8513
<8513=8515,8514
<8516=8517
<8517=8519,8518
<8519=8520
<8533=8539,8538,8534
<8534=8535
<8535=8537,8536
<8539=8617,8611,8607,8563,8556,8549,8540
<8540=8541
<8541=8545,8542
<8542=8543
<8543=8544
<8545=8546
<8546=8548,8547
<8549=8550
<8550=8554,8551
<8551=8552
<8552=8553
<8554=8555
<8556=8557
<8557=8561,8558
<8558=8559
<8559=8560
<8561=8562
<8563=8596,8576,8564
<8564=8565
<8565=8572,8566
<8566=8567
<8567=8571,8568
<8568=8570,8569
<8572=8573
<8573=8575,8574
<8576=8590,8584,8577
<8577=8578
<8578=8582,8579
<8579=8580
<8580=8581
<8582=8583
<8584=8585
<8585=8589,8586
<8586=8588,8587
<8590=8591
<8591=8595,8592
<8592=8594,8593
<8596=8597
<8597=8606,8598
<8598=8600,8599
<8600=8601
<8601=8603,8602
<8603=8605,8604
<8607=8608
<8608=8610,8609
<8611=8612
<8612=8616,8613
<8613=8615,8614
<8617=8618
<8618=8620,8619
<8620=8621
<8639=8645,8644,8640
<8640=8641
<8641=8643,8642
<8645=8668,8664,8657,8646
<8646=8647
<8647=8653,8648
<8648=8651,8649
<8649=8650
<8651=8652
<8653=8654
<8654=8656,8655
<8657=8658
<8658=8662,8659
<8659=8660
<8660=8661
<8662=8663
<8664=8665
<8665=8667,8666
<8668=8677,8669
<8669=8670
<8670=8671
<8671=8673,8672
<8673=8674
<8674=8676,8675
<8677=8678
<8687=8693,8692,8688
<8688=8689
<8689=8691,8690
<8693=8696,8694
<8694=8695
<8696=8726,8717,8714,8697
<8697=8698
<8698=8706,8699
<8699=8700
<8700=8701
<8701=8705,8702
<8702=8704,8703
<8706=8707
<8707=8709,8708
<8709=8711,8710
<8711=8713,8712
<8714=8716,8715
<8717=8718
<8718=8725,8719
<8719=8721,8720
<8721=8722
<8722=8724,8723
<8726=8727
<8727=8728
<8728=8733,8732,8729
<8729=8731,8730
<8746=8764,8763,8747
<8747=8760,8757,8754,8751,8748
<8748=8750,8749
<8751=8753,8752
<8754=8756,8755
<8757=8759,8758
<8760=8762,8761
<8764=9040,9024,9017,8994,8988,8978,8972,8966,8930,8866,8787,8776,8767,8765
<8765=8766
<8767=8768
<8768=8772,8769
<8769=8770
<8770=8771
<8772=8773
<8773=8775,8774
<8776=8777
<8777=8785,8778
<8778=8783,8779
<8779=8780
<8780=8782,8781
<8783=8784
<8785=8786
<8787=8864,8788
<8788=8856,8841,8826,8818,8817,8816,8815,8814,8813,8812,8811,8810,8809,8807,8789
<8789=8805,8790
<8790=8791
<8791=8792
<8792=8801,8793
<8793=8794
<8794=8795
<8795=8797,8796
<8797=8798
<8798=8800,8799
<8801=8802
<8802=8804,8803
<8805=8806
<8807=8808
<8818=8819
<8819=8823,8820
<8820=8822,8821
<8823=8825,8824
<8826=8834,8827
<8827=8828
<8828=8830,8829
<8830=8831
<8831=8833,8832
<8834=8835
<8835=8837,8836
<8837=8838
<8838=8840,8839
<8841=8849,8842
<8842=8843
<8843=8845,8844
<8845=8846
<8846=8848,8847
<8849=8850
<8850=8852,8851
<8852=8853
<8853=8855,8854
<8856=8857
<8857=8861,8858
<8858=8860,8859
<8861=8863,8862
<8864=8865
<8866=8928,8867
<8867=8868
<8868=8904,8869
<8869=8887,8870
<8870=8871
<8871=8884,8872
<8872=8882,8873
<8873=8878,8874
<8874=8875
<8875=8877,8876
<8878=8879
<8879=8881,8880
<8882=8883
<8884=8886,8885
<8887=8888
<8888=8901,8889
<8889=8899,8890
<8890=8895,8891
<8891=8892
<8892=8894,8893
<8895=8896
<8896=8898,8897
<8899=8900
<8901=8903,8902
<8904=8905
<8905=8923,8906
<8906=8918,8907
<8907=8913,8908
<8908=8910,8909
<8910=8912,8911
<8913=8915,8914
<8915=8917,8916
<8918=8920,8919
<8920=8922,8921
<8923=8925,8924
<8925=8927,8926
<8928=8929
<8930=8964,8931
<8931=8932
<8932=8948,8933
<8933=8934
<8934=8944,8935
<8935=8940,8936
<8936=8937
<8937=8939,8938
<8940=8941
<8941=8943,8942
<8944=8945
<8945=8947,8946
<8948=8949
<8949=8957,8950
<8950=8954,8951
<8951=8953,8952
<8954=8956,8955
<8957=8961,8958
<8958=8960,8959
<8961=8963,8962
<8964=8965
<8966=8967
<8967=8969,8968
<8969=8971,8970
<8972=8973
<8973=8975,8974
<8975=8977,8976
<8978=8979
<8979=8983,8980
<8980=8982,8981
<8983=8985,8984
<8985=8987,8986
<8988=8989
<8989=8991,8990
<8991=8993,8992
<8994=9015,8995
<8995=9004,8996
<8996=8997
<8997=9001,8998
<8998=9000,8999
<9001=9003,9002
<9004=9005
<9005=9011,9006
<9006=9007
<9007=9008
<9008=9010,9009
<9011=9012
<9012=9014,9013
<9015=9016
<9017=9018
<9018=9023,9022,9019
<9019=9021,9020
<9024=9036,9025
<9025=9026
<9026=9035,9027
<9027=9031,9028
<9028=9029
<9029=9030
<9031=9032
<9032=9034,9033
<9036=9037
<9037=9039,9038
<9040=9043,9041
<9041=9042
<9043=9044
<9044=9048,9045
<9045=9047,9046
<9091=9103,9102,9092
<9092=9099,9096,9093
<9093=9095,9094
<9096=9098,9097
<9099=9101,9100
<9103=9113,9104
<9104=9105
<9105=9109,9106
<9106=9107
<9107=9108
<9109=9110
<9110=9112,9111
<9113=9114
<9114=9121,9120,9115
<9115=9119,9116
<9116=9118,9117
<9130=9133,9132,9131
<9133=9134
<9134=9135
<9135=9137,9136
<9137=9138
<9138=9140,9139
<9145=9157,9156,9146
<9146=9153,9150,9147
<9147=9149,9148
<9150=9152,9151
<9153=9155,9154
<9157=9158
<9158=9957,9159
<9159=9953,9946,9928,9910,9901,9892,9888,9884,9878,9872,9859,9852,9826,9812,9799,9786,9777,9768,9550,9543,9337,9332,9165,9160
<9160=9161
<9161=9163,9162
<9163=9164
<9165=9324,9315,9312,9166
<9166=9307,9290,9268,9245,9240,9231,9222,9213,9194,9167
<9167=9181,9168
<9168=9169
<9169=9175,9170
<9170=9173,9171
<9171=9172
<9173=9174
<9175=9176
<9176=9178,9177
<9178=9180,9179
<9181=9182
<9182=9193,9183
<9183=9187,9184
<9184=9185
<9185=9186
<9187=9188
<9188=9190,9189
<9190=9192,9191
<9194=9195
<9195=9212,9211,9196
<9196=9204,9197
<9197=9201,9198
<9198=9200,9199
<9201=9203,9202
<9204=9208,9205
<9205=9207,9206
<9208=9210,9209
<9213=9214
<9214=9221,9220,9215
<9215=9219,9216
<9216=9218,9217
<9222=9223
<9223=9230,9229,9224
<9224=9228,9225
<9225=9227,9226
<9231=9232
<9232=9238,9233
<9233=9236,9234
<9234=9235
<9236=9237
<9238=9239
<9240=9241
<9241=9244,9243,9242
<9245=9246
<9246=9266,9247
<9247=9258,9250,9248
<9248=9249
<9250=9251
<9251=9253,9252
<9253=9255,9254
<9255=9257,9256
<9258=9259
<9259=9261,9260
<9261=9263,9262
<9263=9265,9264
<9266=9267
<9268=9283,9269
<9269=9270
<9270=9271
<9271=9281,9272
<9272=9279,9277,9275,9273
<9273=9274
<9275=9276
<9277=9278
<9279=9280
<9281=9282
<9283=9284
<9284=9286,9285
<9286=9287
<9287=9289,9288
<9290=9291
<9291=9305,9292
<9292=9299,9297,9295,9293
<9293=9294
<9295=9296
<9297=9298
<9299=9300
<9300=9302,9301
<9302=9304,9303
<9305=9306
<9307=9308
<9308=9310,9309
<9310=9311
<9312=9314,9313
<9315=9316
<9316=9323,9317
<9317=9319,9318
<9319=9320
<9320=9322,9321
<9324=9325
<9325=9326
<9326=9331,9330,9327
<9327=9329,9328
<9332=9333
<9333=9335,9334
<9335=9336
<9337=9541,9338
<9338=9537,9528,9521,9339
<9339=9513,9504,9501,9340
<9340=9497,9341
<9341=9489,9480,9477,9342
<9342=9343
<9343=9473,9344
<9344=9363,9345
<9345=9359,9346
<9346=9348,9347
<9348=9349
<9349=9355,9350
<9350=9351
<9351=9352
<9352=9354,9353
<9355=9356
<9356=9358,9357
<9359=9360
<9360=9362,9361
<9363=9369,9364
<9364=9365
<9365=9366
<9366=9368,9367
<9369=9370
<9370=9448,9371
<9371=9423,9372
<9372=9398,9373
<9373=9385,9374
<9374=9380,9375
<9375=9377,9376
<9377=9379,9378
<9380=9382,9381
<9382=9384,9383
<9385=9393,9386
<9386=9388,9387
<9388=9390,9389
<9390=9392,9391
<9393=9395,9394
<9395=9397,9396
<9398=9410,9399
<9399=9405,9400
<9400=9402,9401
<9402=9404,9403
<9405=9407,9406
<9407=9409,9408
<9410=9418,9411
<9411=9413,9412
<9413=9415,9414
<9415=9417,9416
<9418=9420,9419
<9420=9422,9421
<9423=9435,9424
<9424=9430,9425
<9425=9427,9426
<9427=9429,9428
<9430=9432,9431
<9432=9434,9433
<9435=9443,9436
<9436=9438,9437
<9438=9440,9439
<9440=9442,9441
<9443=9445,9444
<9445=9447,9446
<9448=9460,9449
<9449=9455,9450
<9450=9452,9451
<9452=9454,9453
<9455=9457,9456
<9457=9459,9458
<9460=9468,9461
<9461=9463,9462
<9463=9465,9464
<9465=9467,9466
<9468=9470,9469
<9470=9472,9471
<9473=9474
<9474=9476,9475
<9477=9479,9478
<9480=9481
<9481=9488,9482
<9482=9484,9483
<9484=9485
<9485=9487,9486
<9489=9490
<9490=9491
<9491=9496,9495,9492
<9492=9494,9493
<9497=9498
<9498=9500,9499
<9501=9503,9502
<9504=9505
<9505=9512,9506
<9506=9508,9507
<9508=9509
<9509=9511,9510
<9513=9514
<9514=9515
<9515=9520,9519,9516
<9516=9518,9517
<9521=9522
<9522=9527,9526,9523
<9523=9525,9524
<9528=9529
<9529=9533,9530
<9530=9531
<9531=9532
<9533=9534
<9534=9536,9535
<9537=9538
<9538=9540,9539
<9541=9542
<9543=9544
<9544=9548,9545
<9545=9546
<9546=9547
<9548=9549
<9550=9760,9756,9753,9551
<9551=9552
<9552=9745,9741,9738,9553
<9553=9731,9599,9554
<9554=9586,9555
<9555=9556
<9556=9557
<9557=9582,9558
<9558=9559
<9559=9560
<9560=9580,9561
<9561=9571,9562
<9562=9563
<9563=9569,9564
<9564=9565
<9565=9566
<9566=9568,9567
<9569=9570
<9571=9572
<9572=9578,9573
<9573=9574
<9574=9575
<9575=9577,9576
<9578=9579
<9580=9581
<9582=9583
<9583=9585,9584
<9586=9587
<9587=9598,9588
<9588=9596,9589
<9589=9590
<9590=9591
<9591=9593,9592
<9593=9595,9594
<9596=9597
<9599=9723,9719,9716,9600
<9600=9601
<9601=9708,9704,9701,9602
<9602=9681,9661,9660,9659,9658,9657,9656,9655,9654,9653,9652,9651,9650,9649,9648,9647,9646,9645,9603
<9603=9644,9643,9642,9641,9640,9639,9638,9637,9636,9635,9634,9633,9632,9631,9623,9604
<9604=9613,9608,9605
<9605=9606
<9606=9607
<9608=9609
<9609=9610
<9610=9612,9611
<9613=9614
<9614=9620,9615
<9615=9617,9616
<9617=9619,9618
<9620=9622,9621
<9623=9624
<9624=9626,9625
<9626=9630,9627
<9627=9629,9628
<9661=9662
<9662=9680,9679,9663
<9663=9678,9664
<9664=9666,9665
<9666=9676,9667
<9667=9668
<9668=9669
<9669=9675,9670
<9670=9672,9671
<9672=9674,9673
<9676=9677
<9681=9682
<9682=9700,9699,9683
<9683=9698,9684
<9684=9686,9685
<9686=9696,9687
<9687=9688
<9688=9689
<9689=9695,9690
<9690=9692,9691
<9692=9694,9693
<9696=9697
<9701=9703,9702
<9704=9705
<9705=9707,9706
<9708=9709
<9709=9710
<9710=9715,9714,9711
<9711=9713,9712
<9716=9718,9717
<9719=9720
<9720=9722,9721
<9723=9724
<9724=9725
<9725=9730,9729,9726
<9726=9728,9727
<9731=9732
<9732=9737,9736,9733
<9733=9735,9734
<9738=9740,9739
<9741=9742
<9742=9744,9743
<9745=9746
<9746=9747
<9747=9752,9751,9748
<9748=9750,9749
<9753=9755,9754
<9756=9757
<9757=9759,9758
<9760=9761
<9761=9762
<9762=9767,9766,9763
<9763=9765,9764
<9768=9773,9769
<9769=9770
<9770=9772,9771
<9773=9774
<9774=9776,9775
<9777=9782,9778
<9778=9779
<9779=9781,9780
<9782=9783
<9783=9785,9784
<9786=9787
<9787=9798,9797,9788
<9788=9796,9789
<9789=9795,9790
<9790=9792,9791
<9792=9794,9793
<9799=9800
<9800=9811,9810,9801
<9801=9809,9802
<9802=9808,9803
<9803=9805,9804
<9805=9807,9806
<9812=9822,9813
<9813=9815,9814
<9815=9816
<9816=9820,9817
<9817=9818
<9818=9819
<9820=9821
<9822=9823
<9823=9825,9824
<9826=9827
<9827=9851,9850,9828
<9828=9849,9829
<9829=9843,9830
<9830=9839,9835,9831
<9831=9832
<9832=9834,9833
<9835=9836
<9836=9838,9837
<9839=9840
<9840=9842,9841
<9843=9844
<9844=9846,9845
<9846=9848,9847
<9852=9853
<9853=9858,9857,9854
<9854=9856,9855
<9859=9866,9860
<9860=9865,9864,9861
<9861=9863,9862
<9866=9871,9870,9867
<9867=9869,9868
<9872=9873
<9873=9875,9874
<9875=9877,9876
<9878=9879
<9879=9881,9880
<9881=9883,9882
<9884=9885
<9885=9887,9886
<9888=9889
<9889=9891,9890
<9892=9893
<9893=9900,9899,9894
<9894=9898,9895
<9895=9897,9896
<9901=9902
<9902=9909,9908,9903
<9903=9907,9904
<9904=9906,9905
<9910=9911
<9911=9927,9926,9912
<9912=9925,9913
<9913=9919,9914
<9914=9916,9915
<9916=9918,9917
<9919=9921,9920
<9921=9922
<9922=9924,9923
<9928=9929
<9929=9945,9944,9930
<9930=9943,9931
<9931=9937,9932
<9932=9934,9933
<9934=9936,9935
<9937=9939,9938
<9939=9940
<9940=9942,9941
<9946=9947
<9947=9952,9951,9948
<9948=9950,9949
<9953=9954
<9954=9956,9955
<9957=9958
<9958=9960,9959
<10036=10045,10044,10037
<10037=10041,10038
<10038=10040,10039
<10041=10043,10042
<10045=10073,10065,10053,10046
<10046=10047
<10047=10049,10048
<10049=10050
<10050=10052,10051
<10053=10059,10054
<10054=10055
<10055=10056
<10056=10058,10057
<10059=10060
<10060=10062,10061
<10062=10064,10063
<10065=10066
<10066=10072,10067
<10067=10071,10068
<10068=10070,10069
<10073=10074
<10074=10076,10075
<10085=10091,10090,10086
<10086=10087
<10087=10089,10088
<10091=10162,10149,10136,10127,10108,10092
<10092=10097,10093
<10093=10094
<10094=10096,10095
<10097=10102,10098
<10098=10099
<10099=10101,10100
<10102=10103
<10103=10105,10104
<10105=10107,10106
<10108=10109
<10109=10126,10125,10110
<10110=10124,10111
<10111=10123,10112
<10112=10120,10113
<10113=10117,10114
<10114=10116,10115
<10117=10119,10118
<10120=10122,10121
<10127=10128
<10128=10135,10134,10129
<10129=10133,10130
<10130=10132,10131
<10136=10137
<10137=10148,10147,10138
<10138=10146,10139
<10139=10145,10140
<10140=10144,10141
<10141=10143,10142
<10149=10150
<10150=10161,10160,10151
<10151=10159,10152
<10152=10158,10153
<10153=10155,10154
<10155=10157,10156
<10162=10163
<10163=10175,10164
<10164=10165
<10165=10166
<10166=10168,10167
<10168=10172,10169
<10169=10171,10170
<10172=10174,10173
<10175=10176
<10189=10192,10191,10190
<10192=10214,10213,10212,10211,10210,10193
<10193=10201,10194
<10194=10195
<10195=10197,10196
<10197=10198
<10198=10200,10199
<10201=10202
<10202=10209,10208,10203
<10203=10207,10204
<10204=10206,10205
<10214=10215
<10215=10219,10216
<10216=10217
<10217=10218
<10219=10220
<10228=10234,10233,10229
<10229=10230
<10230=10232,10231
<10234=10383,10378,10371,10332,10328,10261,10260,10259,10258,10257,10240,10235
<10235=10236
<10236=10238,10237
<10238=10239
<10240=10248,10241
<10241=10242
<10242=10244,10243
<10244=10245
<10245=10247,10246
<10248=10249
<10249=10256,10255,10250
<10250=10254,10251
<10251=10253,10252
<10261=10324,10315,10312,10262
<10262=10304,10263
<10263=10296,10290,10287,10264
<10264=10265
<10265=10266
<10266=10285,10267
<10267=10270,10268
<10268=10269
<10270=10271
<10271=10283,10272
<10272=10277,10273
<10273=10274
<10274=10276,10275
<10277=10278
<10278=10280,10279
<10280=10282,10281
<10283=10284
<10285=10286
<10287=10289,10288
<10290=10291
<10291=10295,10292
<10292=10294,10293
<10296=10297
<10297=10298
<10298=10303,10302,10299
<10299=10301,10300
<10304=10305
<10305=10311,10306
<10306=10310,10307
<10307=10309,10308
<10312=10314,10313
<10315=10316
<10316=10323,10317
<10317=10319,10318
<10319=10320
<10320=10322,10321
<10324=10325
<10325=10327,10326
<10328=10329
<10329=10331,10330
<10332=10367,10358,10355,10333
<10333=10341,10334
<10334=10335
<10335=10337,10336
<10337=10338
<10338=10340,10339
<10341=10342
<10342=10354,10353,10343
<10343=10352,10344
<10344=10348,10345
<10345=10346
<10346=10347
<10348=10349
<10349=10351,10350
<10355=10357,10356
<10358=10359
<10359=10366,10360
<10360=10362,10361
<10362=10363
<10363=10365,10364
<10367=10368
<10368=10370,10369
<10371=10372
<10372=10377,10376,10373
<10373=10375,10374
<10378=10379
<10379=10381,10380
<10381=10382
<10383=10385,10384
<10385=10386
<10386=10391,10387
<10387=10389,10388
<10389=10390
<10391=10393,10392
<10418=10421,10420,10419
<10421=10422
<10422=10534,10530,10527,10423
<10423=10518,10500,10482,10424
<10424=10474,10470,10467,10425
<10425=10426
<10426=10461,10427
<10427=10428
<10428=10445,10429
<10429=10430
<10430=10443,10431
<10431=10434,10432
<10432=10433
<10434=10435
<10435=10441,10436
<10436=10439,10437
<10437=10438
<10439=10440
<10441=10442
<10443=10444
<10445=10446
<10446=10454,10447
<10447=10453,10448
<10448=10450,10449
<10450=10452,10451
<10454=10460,10455
<10455=10457,10456
<10457=10459,10458
<10461=10462
<10462=10464,10463
<10464=10466,10465
<10467=10469,10468
<10470=10471
<10471=10473,10472
<10474=10475
<10475=10476
<10476=10481,10480,10477
<10477=10479,10478
<10482=10483
<10483=10499,10498,10484
<10484=10497,10485
<10485=10491,10486
<10486=10487
<10487=10488
<10488=10490,10489
<10491=10492
<10492=10494,10493
<10494=10496,10495
<10500=10501
<10501=10517,10516,10502
<10502=10515,10503
<10503=10509,10504
<10504=10505
<10505=10506
<10506=10508,10507
<10509=10510
<10510=10512,10511
<10512=10514,10513
<10518=10519
<10519=10526,10525,10520
<10520=10524,10521
<10521=10523,10522
<10527=10529,10528
<10530=10531
<10531=10533,10532
<10534=10535
<10535=10536
<10536=10541,10540,10537
<10537=10539,10538
<10567=10582,10581,10568
<10568=10578,10575,10572,10569
<10569=10571,10570
<10572=10574,10573
<10575=10577,10576
<10578=10580,10579
<10582=10880,10871,10864,10857,10722,10718,10583
<10583=10710,10706,10703,10584
<10584=10702,10701,10700,10699,10693,10631,10620,10585
<10585=10612,10608,10605,10586
<10586=10595,10587
<10587=10588
<10588=10590,10589
<10590=10594,10591
<10591=10593,10592
<10595=10596
<10596=10604,10597
<10597=10599,10598
<10599=10603,10600
<10600=10602,10601
<10605=10607,10606
<10608=10609
<10609=10611,10610
<10612=10613
<10613=10614
<10614=10619,10618,10615
<10615=10617,10616
<10620=10621
<10621=10629,10622
<10622=10623
<10623=10624
<10624=10626,10625
<10626=10628,10627
<10629=10630
<10631=10685,10681,10678,10632
<10632=10662,10633
<10633=10660,10634
<10634=10656,10654,10635
<10635=10644,10636
<10636=10637
<10637=10639,10638
<10639=10643,10640
<10640=10642,10641
<10644=10645
<10645=10647,10646
<10647=10649,10648
<10649=10653,10650
<10650=10652,10651
<10654=10655
<10656=10657
<10657=10659,10658
<10660=10661
<10662=10672,10663
<10663=10666,10664
<10664=10665
<10666=10667
<10667=10671,10668
<10668=10670,10669
<10672=10673
<10673=10675,10674
<10675=10677,10676
<10678=10680,10679
<10681=10682
<10682=10684,10683
<10685=10686
<10686=10687
<10687=10692,10691,10688
<10688=10690,10689
<10693=10694
<10694=10698,10695
<10695=10697,10696
<10703=10705,10704
<10706=10707
<10707=10709,10708
<10710=10711
<10711=10712
<10712=10717,10716,10713
<10713=10715,10714
<10718=10719
<10719=10721,10720
<10722=10849,10845,10842,10723
<10723=10774,10763,10724
<10724=10755,10751,10748,10725
<10725=10736,10726
<10726=10727
<10727=10729,10728
<10729=10733,10730
<10730=10732,10731
<10733=10735,10734
<10736=10737
<10737=10747,10738
<10738=10740,10739
<10740=10744,10741
<10741=10743,10742
<10744=10746,10745
<10748=10750,10749
<10751=10752
<10752=10754,10753
<10755=10756
<10756=10757
<10757=10762,10761,10758
<10758=10760,10759
<10763=10764
<10764=10772,10765
<10765=10766
<10766=10767
<10767=10769,10768
<10769=10771,10770
<10772=10773
<10774=10834,10830,10827,10775
<10775=10809,10776
<10776=10807,10777
<10777=10803,10801,10778
<10778=10789,10779
<10779=10780
<10780=10782,10781
<10782=10784,10783
<10784=10788,10785
<10785=10787,10786
<10789=10790
<10790=10792,10791
<10792=10794,10793
<10794=10796,10795
<10796=10800,10797
<10797=10799,10798
<10801=10802
<10803=10804
<10804=10806,10805
<10807=10808
<10809=10819,10810
<10810=10813,10811
<10811=10812
<10813=10814
<10814=10818,10815
<10815=10817,10816
<10819=10820
<10820=10822,10821
<10822=10824,10823
<10824=10826,10825
<10827=10829,10828
<10830=10831
<10831=10833,10832
<10834=10835
<10835=10836
<10836=10841,10840,10837
<10837=10839,10838
<10842=10844,10843
<10845=10846
<10846=10848,10847
<10849=10850
<10850=10851
<10851=10856,10855,10852
<10852=10854,10853
<10857=10858
<10858=10863,10862,10859
<10859=10861,10860
<10864=10865
<10865=10870,10869,10866
<10866=10868,10867
<10871=10872
<10872=10879,10878,10873
<10873=10877,10874
<10874=10876,10875
<10880=10882,10881
<10882=10883
<10883=10885,10884
<10911=10920,10919,10912
<10912=10916,10913
<10913=10915,10914
<10916=10918,10917
<10920=11048,11035,10935,10921
<10921=10922
<10922=10929,10923
<10923=10927,10924
<10924=10925
<10925=10926
<10927=10928
<10929=10933,10930
<10930=10931
<10931=10932
<10933=10934
<10935=11023,11015,11012,10936
<10936=10937
<10937=11000,10992,10989,10938
<10938=10975,10968,10956,10943,10939
<10939=10940
<10940=10942,10941
<10943=10949,10944
<10944=10945
<10945=10946
<10946=10948,10947
<10949=10950
<10950=10954,10951
<10951=10952
<10952=10953
<10954=10955
<10956=10957
<10957=10967,10966,10958
<10958=10965,10959
<10959=10961,10960
<10961=10962
<10962=10964,10963
<10968=10969
<10969=10974,10973,10970
<10970=10972,10971
<10975=10977,10976
<10977=10978
<10978=10984,10979
<10979=10983,10980
<10980=10982,10981
<10984=10988,10985
<10985=10987,10986
<10989=10991,10990
<10992=10993
<10993=10999,10994
<10994=10996,10995
<10996=10998,10997
<11000=11001
<11001=11002
<11002=11011,11010,11003
<11003=11009,11004
<11004=11006,11005
<11006=11008,11007
<11012=11014,11013
<11015=11016
<11016=11022,11017
<11017=11019,11018
<11019=11021,11020
<11023=11024
<11024=11025
<11025=11034,11033,11026
<11026=11032,11027
<11027=11029,11028
<11029=11031,11030
<11035=11042,11036
<11036=11041,11040,11037
<11037=11039,11038
<11042=11047,11046,11043
<11043=11045,11044
<11048=11049
<11049=11052,11051,11050
<11070=11082,11081,11071
<11071=11078,11075,11072
<11072=11074,11073
<11075=11077,11076
<11078=11080,11079
<11082=11181,11174,11169,11097,11083
<11083=11084
<11084=11091,11085
<11085=11089,11086
<11086=11087
<11087=11088
<11089=11090
<11091=11095,11092
<11092=11093
<11093=11094
<11095=11096
<11097=11157,11149,11146,11098
<11098=11099
<11099=11134,11126,11123,11100
<11100=11101
<11101=11107,11102
<11102=11103
<11103=11104
<11104=11106,11105
<11107=11108
<11108=11121,11109
<11109=11112,11110
<11110=11111
<11112=11113
<11113=11119,11114
<11114=11117,11115
<11115=11116
<11117=11118
<11119=11120
<11121=11122
<11123=11125,11124
<11126=11127
<11127=11133,11128
<11128=11130,11129
<11130=11132,11131
<11134=11135
<11135=11136
<11136=11145,11144,11137
<11137=11143,11138
<11138=11140,11139
<11140=11142,11141
<11146=11148,11147
<11149=11150
<11150=11156,11151
<11151=11153,11152
<11153=11155,11154
<11157=11158
<11158=11159
<11159=11168,11167,11160
<11160=11166,11161
<11161=11163,11162
<11163=11165,11164
<11169=11170
<11170=11173,11172,11171
<11174=11175
<11175=11180,11179,11176
<11176=11178,11177
<11181=11182
<11182=11189,11188,11183
<11183=11187,11184
<11184=11186,11185
<11206=11221,11220,11207
<11207=11217,11214,11211,11208
<11208=11210,11209
<11211=11213,11212
<11214=11216,11215
<11217=11219,11218
<11221=11553,11549,11542,11538,11525,11347,11336,11271,11224,11222
<11222=11223
<11224=11269,11237,11225
<11225=11226
<11226=11227
<11227=11228
<11228=11234,11229
<11229=11231,11230
<11231=11233,11232
<11234=11236,11235
<11237=11265,11238
<11238=11253,11239
<11239=11246,11240
<11240=11241
<11241=11243,11242
<11243=11245,11244
<11246=11247
<11247=11249,11248
<11249=11250
<11250=11252,11251
<11253=11254
<11254=11260,11255
<11255=11257,11256
<11257=11259,11258
<11260=11262,11261
<11262=11264,11263
<11265=11266
<11266=11268,11267
<11269=11270
<11271=11328,11319,11316,11272
<11272=11302,11273
<11273=11298,11274
<11274=11285,11281,11275
<11275=11276
<11276=11280,11277
<11277=11279,11278
<11281=11282
<11282=11284,11283
<11285=11286
<11286=11292,11287
<11287=11288
<11288=11289
<11289=11291,11290
<11292=11293
<11293=11295,11294
<11295=11297,11296
<11298=11299
<11299=11301,11300
<11302=11303
<11303=11315,11314,11304
<11304=11313,11305
<11305=11307,11306
<11307=11308
<11308=11310,11309
<11310=11312,11311
<11316=11318,11317
<11319=11320
<11320=11327,11321
<11321=11323,11322
<11323=11324
<11324=11326,11325
<11328=11329
<11329=11330
<11330=11335,11334,11331
<11331=11333,11332
<11336=11337
<11337=11346,11345,11338
<11338=11344,11339
<11339=11343,11340
<11340=11342,11341
<11347=11513,11505,11502,11348
<11348=11349
<11349=11490,11482,11479,11350
<11350=11465,11458,11446,11351
<11351=11437,11352
<11352=11424,11411,11404,11395,11353
<11353=11391,11354
<11354=11377,11355
<11355=11363,11356
<11356=11357
<11357=11358
<11358=11360,11359
<11360=11362,11361
<11363=11364
<11364=11370,11365
<11365=11369,11366
<11366=11368,11367
<11370=11374,11371
<11371=11373,11372
<11374=11376,11375
<11377=11378
<11378=11390,11389,11379
<11379=11388,11380
<11380=11382,11381
<11382=11383
<11383=11385,11384
<11385=11387,11386
<11391=11392
<11392=11394,11393
<11395=11396
<11396=11400,11397
<11397=11398
<11398=11399
<11400=11401
<11401=11403,11402
<11404=11405
<11405=11410,11409,11406
<11406=11408,11407
<11411=11412
<11412=11423,11422,11413
<11413=11421,11414
<11414=11418,11415
<11415=11417,11416
<11418=11420,11419
<11424=11425
<11425=11436,11435,11426
<11426=11434,11427
<11427=11431,11428
<11428=11430,11429
<11431=11433,11432
<11437=11438
<11438=11444,11439
<11439=11442,11440
<11440=11441
<11442=11443
<11444=11445
<11446=11447
<11447=11457,11456,11448
<11448=11455,11449
<11449=11451,11450
<11451=11452
<11452=11454,11453
<11458=11459
<11459=11464,11463,11460
<11460=11462,11461
<11465=11467,11466
<11467=11468
<11468=11474,11469
<11469=11473,11470
<11470=11472,11471
<11474=11478,11475
<11475=11477,11476
<11479=11481,11480
<11482=11483
<11483=11489,11484
<11484=11486,11485
<11486=11488,11487
<11490=11491
<11491=11492
<11492=11501,11500,11493
<11493=11499,11494
<11494=11496,11495
<11496=11498,11497
<11502=11504,11503
<11505=11506
<11506=11512,11507
<11507=11509,11508
<11509=11511,11510
<11513=11514
<11514=11515
<11515=11524,11523,11516
<11516=11522,11517
<11517=11519,11518
<11519=11521,11520
<11525=11534,11526
<11526=11527
<11527=11531,11528
<11528=11530,11529
<11531=11533,11532
<11534=11535
<11535=11537,11536
<11538=11539
<11539=11541,11540
<11542=11543
<11543=11548,11547,11544
<11544=11546,11545
<11549=11550
<11550=11552,11551
<11553=11554
<11554=11557,11556,11555
<11599=11602,11601,11600
<11602=11676,11669,11668,11667,11666,11665,11605,11603
<11603=11604
<11605=11656,11635,11606
<11606=11616,11607
<11607=11612,11608
<11608=11609
<11609=11611,11610
<11612=11613
<11613=11615,11614
<11616=11617
<11617=11627,11618
<11618=11622,11619
<11619=11621,11620
<11622=11626,11623
<11623=11625,11624
<11627=11634,11628
<11628=11632,11629
<11629=11630
<11630=11631
<11632=11633
<11635=11636
<11636=11655,11654,11637
<11637=11653,11638
<11638=11640,11639
<11640=11641
<11641=11643,11642
<11643=11650,11644
<11644=11646,11645
<11646=11647
<11647=11649,11648
<11650=11652,11651
<11656=11657
<11657=11664,11663,11658
<11658=11662,11659
<11659=11661,11660
<11669=11670
<11670=11675,11674,11671
<11671=11673,11672
<11676=11677
<11677=11684,11683,11678
<11678=11682,11679
<11679=11681,11680
<11701=11704,11703,11702
<11704=11718,11707,11705
<11705=11706
<11707=11716,11708
<11708=11709
<11709=11710
<11710=11714,11711
<11711=11712
<11712=11713
<11714=11715
<11716=11717
<11718=11719
<11719=11727,11726,11720
<11720=11725,11721
<11721=11723,11722
<11723=11724
<11735=11741,11740,11736
<11736=11737
<11737=11739,11738
<11741=11973,11966,11950,11856,11744,11742
<11742=11743
<11744=11848,11839,11836,11745
<11745=11746
<11746=11802,11747
<11747=11795,11788,11750,11748
<11748=11749
<11750=11780,11771,11768,11751
<11751=11752
<11752=11764,11753
<11753=11754
<11754=11760,11755
<11755=11756
<11756=11757
<11757=11759,11758
<11760=11761
<11761=11763,11762
<11764=11765
<11765=11767,11766
<11768=11770,11769
<11771=11772
<11772=11779,11773
<11773=11775,11774
<11775=11776
<11776=11778,11777
<11780=11781
<11781=11782
<11782=11787,11786,11783
<11783=11785,11784
<11788=11789
<11789=11791,11790
<11791=11792
<11792=11794,11793
<11795=11796
<11796=11801,11800,11797
<11797=11799,11798
<11802=11803
<11803=11820,11804
<11804=11815,11805
<11805=11813,11806
<11806=11807
<11807=11808
<11808=11810,11809
<11810=11812,11811
<11813=11814
<11815=11817,11816
<11817=11819,11818
<11820=11831,11821
<11821=11829,11822
<11822=11823
<11823=11824
<11824=11826,11825
<11826=11828,11827
<11829=11830
<11831=11833,11832
<11833=11835,11834
<11836=11838,11837
<11839=11840
<11840=11847,11841
<11841=11843,11842
<11843=11844
<11844=11846,11845
<11848=11849
<11849=11850
<11850=11855,11854,11851
<11851=11853,11852
<11856=11948,11857
<11857=11929,11910,11869,11858
<11858=11859
<11859=11868,11860
<11860=11864,11861
<11861=11862
<11862=11863
<11864=11865
<11865=11867,11866
<11869=11884,11870
<11870=11873,11871
<11871=11872
<11873=11874
<11874=11878,11875
<11875=11876
<11876=11877
<11878=11879
<11879=11881,11880
<11881=11883,11882
<11884=11885
<11885=11898,11886
<11886=11888,11887
<11888=11896,11889
<11889=11890
<11890=11891
<11891=11893,11892
<11893=11895,11894
<11896=11897
<11898=11900,11899
<11900=11908,11901
<11901=11902
<11902=11903
<11903=11905,11904
<11905=11907,11906
<11908=11909
<11910=11911
<11911=11928,11927,11912
<11912=11926,11913
<11913=11924,11914
<11914=11915
<11915=11916
<11916=11920,11917
<11917=11918
<11918=11919
<11920=11921
<11921=11923,11922
<11924=11925
<11929=11930
<11930=11947,11946,11931
<11931=11945,11932
<11932=11943,11933
<11933=11934
<11934=11935
<11935=11939,11936
<11936=11937
<11937=11938
<11939=11940
<11940=11942,11941
<11943=11944
<11948=11949
<11950=11951
<11951=11965,11964,11952
<11952=11963,11953
<11953=11957,11954
<11954=11955
<11955=11956
<11957=11958
<11958=11960,11959
<11960=11962,11961
<11966=11967
<11967=11969,11968
<11969=11970
<11970=11972,11971
<11973=11974
<11974=11978,11975
<11975=11976
<11976=11977
<11978=11979
<11979=11981,11980
<12019=12025,12024,12020
<12020=12021
<12021=12023,12022
<12025=12026
<12026=12027
<12027=12031,12028
<12028=12029
<12029=12030
<12031=12032
<12032=12034,12033
<12040=12043,12042,12041
<12043=12044
<12044=12103,12094,12091,12045
<12045=12076,12046
<12046=12065,12047
<12047=12056,12048
<12048=12049
<12049=12051,12050
<12051=12053,12052
<12053=12055,12054
<12056=12057
<12057=12061,12058
<12058=12059
<12059=12060
<12061=12062
<12062=12064,12063
<12065=12066
<12066=12075,12067
<12067=12071,12068
<12068=12069
<12069=12070
<12071=12072
<12072=12074,12073
<12076=12077
<12077=12090,12089,12078
<12078=12088,12079
<12079=12085,12080
<12080=12082,12081
<12082=12084,12083
<12085=12087,12086
<12091=12093,12092
<12094=12095
<12095=12102,12096
<12096=12098,12097
<12098=12099
<12099=12101,12100
<12103=12104
<12104=12105
<12105=12115,12114,12106
<12106=12113,12107
<12107=12109,12108
<12109=12110
<12110=12112,12111
<12132=12135,12134,12133
<12135=12446,12441,12437,12408,12345,12338,12331,12324,12300,12290,12283,12151,12144,12136
<12136=12137
<12137=12139,12138
<12139=12141,12140
<12141=12143,12142
<12144=12145
<12145=12147,12146
<12147=12148
<12148=12150,12149
<12151=12274,12152
<12152=12153
<12153=12263,12214,12154
<12154=12155
<12155=12205,12156
<12156=12201,12196,12189,12179,12170,12157
<12157=12158
<12158=12162,12159
<12159=12160
<12160=12161
<12162=12163
<12163=12165,12164
<12165=12167,12166
<12167=12169,12168
<12170=12171
<12171=12177,12172
<12172=12173
<12173=12174
<12174=12176,12175
<12177=12178
<12179=12180
<12180=12188,12181
<12181=12185,12182
<12182=12184,12183
<12185=12187,12186
<12189=12193,12190
<12190=12192,12191
<12193=12195,12194
<12196=12197
<12197=12200,12199,12198
<12201=12202
<12202=12204,12203
<12205=12206
<12206=12213,12207
<12207=12209,12208
<12209=12210
<12210=12212,12211
<12214=12245,12241,12235,12226,12215
<12215=12216
<12216=12225,12217
<12217=12219,12218
<12219=12221,12220
<12221=12222
<12222=12224,12223
<12226=12227
<12227=12231,12228
<12228=12229
<12229=12230
<12231=12232
<12232=12234,12233
<12235=12236
<12236=12238,12237
<12238=12240,12239
<12241=12242
<12242=12244,12243
<12245=12246
<12246=12262,12247
<12247=12258,12248
<12248=12256,12249
<12249=12250
<12250=12252,12251
<12252=12253
<12253=12255,12254
<12256=12257
<12258=12259
<12259=12261,12260
<12263=12264
<12264=12266,12265
<12266=12270,12267
<12267=12268
<12268=12269
<12270=12271
<12271=12273,12272
<12274=12275
<12275=12281,12276
<12276=12279,12277
<12277=12278
<12279=12280
<12281=12282
<12283=12284
<12284=12289,12288,12285
<12285=12287,12286
<12290=12291
<12291=12299,12298,12292
<12292=12294,12293
<12294=12295
<12295=12297,12296
<12300=12315,12301
<12301=12302
<12302=12303
<12303=12314,12304
<12304=12306,12305
<12306=12308,12307
<12308=12309
<12309=12311,12310
<12311=12313,12312
<12315=12316
<12316=12318,12317
<12318=12319
<12319=12321,12320
<12321=12323,12322
<12324=12325
<12325=12330,12329,12326
<12326=12328,12327
<12331=12332
<12332=12334,12333
<12334=12335
<12335=12337,12336
<12338=12339
<12339=12341,12340
<12341=12342
<12342=12344,12343
<12345=12399,12346
<12346=12392,12388,12384,12379,12369,12347
<12347=12348
<12348=12365,12349
<12349=12350
<12350=12351
<12351=12363,12352
<12352=12361,12359,12357,12355,12353
<12353=12354
<12355=12356
<12357=12358
<12359=12360
<12361=12362
<12363=12364
<12365=12366
<12366=12368,12367
<12369=12370
<12370=12378,12371
<12371=12377,12372
<12372=12376,12373
<12373=12375,12374
<12379=12380
<12380=12383,12382,12381
<12384=12385
<12385=12387,12386
<12388=12389
<12389=12391,12390
<12392=12396,12393
<12393=12395,12394
<12396=12398,12397
<12399=12400
<12400=12406,12401
<12401=12404,12402
<12402=12403
<12404=12405
<12406=12407
<12408=12433,12409
<12409=12410
<12410=12411
<12411=12431,12412
<12412=12413
<12413=12414
<12414=12416,12415
<12416=12417
<12417=12419,12418
<12419=12423,12420
<12420=12421
<12421=12422
<12423=12424
<12424=12426,12425
<12426=12428,12427
<12428=12430,12429
<12431=12432
<12433=12434
<12434=12436,12435
<12437=12438
<12438=12440,12439
<12441=12442
<12442=12445,12444,12443
<12446=12447
<12447=12449,12448
<12449=12450
<12450=12452,12451
<12498=12504,12503,12499
<12499=12500
<12500=12502,12501
<12504=12507,12505
<12505=12506
<12507=12543,12534,12531,12508
<12508=12509
<12509=12516,12510
<12510=12511
<12511=12515,12512
<12512=12514,12513
<12516=12517
<12517=12519,12518
<12519=12529,12520
<12520=12523,12521
<12521=12522
<12523=12524
<12524=12526,12525
<12526=12528,12527
<12529=12530
<12531=12533,12532
<12534=12535
<12535=12542,12536
<12536=12538,12537
<12538=12539
<12539=12541,12540
<12543=12544
<12544=12545
<12545=12550,12549,12546
<12546=12548,12547
<12564=12570,12569,12565
<12565=12566
<12566=12568,12567
<12570=12575,12571
<12571=12572
<12572=12574,12573
<12575=12611,12602,12599,12576
<12576=12577
<12577=12584,12578
<12578=12579
<12579=12581,12580
<12581=12583,12582
<12584=12585
<12585=12587,12586
<12587=12597,12588
<12588=12591,12589
<12589=12590
<12591=12592
<12592=12594,12593
<12594=12596,12595
<12597=12598
<12599=12601,12600
<12602=12603
<12603=12610,12604
<12604=12606,12605
<12606=12607
<12607=12609,12608
<12611=12612
<12612=12613
<12613=12618,12617,12614
<12614=12616,12615
<12631=12658,12657,12632
<12632=12654,12651,12648,12645,12642,12639,12636,12633
<12633=12635,12634
<12636=12638,12637
<12639=12641,12640
<12642=12644,12643
<12645=12647,12646
<12648=12650,12649
<12651=12653,12652
<12654=12656,12655
<12658=12737,12661,12659
<12659=12660
<12661=12729,12716,12713,12662
<12662=12698,12663
<12663=12692,12664
<12664=12686,12665
<12665=12666
<12666=12684,12667
<12667=12682,12680,12678,12676,12674,12672,12670,12668
<12668=12669
<12670=12671
<12672=12673
<12674=12675
<12676=12677
<12678=12679
<12680=12681
<12682=12683
<12684=12685
<12686=12687
<12687=12691,12688
<12688=12690,12689
<12692=12693
<12693=12695,12694
<12695=12697,12696
<12698=12699
<12699=12712,12711,12700
<12700=12710,12701
<12701=12709,12702
<12702=12704,12703
<12704=12706,12705
<12706=12708,12707
<12713=12715,12714
<12716=12717
<12717=12728,12718
<12718=12720,12719
<12720=12721
<12721=12723,12722
<12723=12725,12724
<12725=12727,12726
<12729=12730
<12730=12731
<12731=12736,12735,12732
<12732=12734,12733
<12737=12738
<12738=12740,12739
<12770=12782,12781,12771
<12771=12778,12775,12772
<12772=12774,12773
<12775=12777,12776
<12778=12780,12779
<12782=12919,12912,12908,12907,12906,12905,12904,12863,12852,12783
<12783=12848,12784
<12784=12785
<12785=12835,12826,12823,12786
<12786=12797,12793,12787
<12787=12789,12788
<12789=12790
<12790=12792,12791
<12793=12794
<12794=12796,12795
<12797=12819,12810,12798
<12798=12799
<12799=12800
<12800=12804,12801
<12801=12802
<12802=12803
<12804=12805
<12805=12807,12806
<12807=12809,12808
<12810=12811
<12811=12813,12812
<12813=12814
<12814=12816,12815
<12816=12818,12817
<12819=12820
<12820=12822,12821
<12823=12825,12824
<12826=12827
<12827=12834,12828
<12828=12830,12829
<12830=12831
<12831=12833,12832
<12835=12836
<12836=12837
<12837=12847,12846,12838
<12838=12845,12839
<12839=12841,12840
<12841=12842
<12842=12844,12843
<12848=12849
<12849=12851,12850
<12852=12853
<12853=12862,12861,12854
<12854=12860,12855
<12855=12859,12856
<12856=12858,12857
<12863=12864
<12864=12881,12865
<12865=12870,12866
<12866=12867
<12867=12869,12868
<12870=12871
<12871=12877,12872
<12872=12873
<12873=12874
<12874=12876,12875
<12877=12878
<12878=12880,12879
<12881=12882
<12882=12897,12883
<12883=12894,12884
<12884=12886,12885
<12886=12888,12887
<12888=12889
<12889=12891,12890
<12891=12893,12892
<12894=12896,12895
<12897=12899,12898
<12899=12901,12900
<12901=12903,12902
<12908=12909
<12909=12911,12910
<12912=12913
<12913=12918,12917,12914
<12914=12916,12915
<12919=12920
<12920=12927,12926,12921
<12921=12925,12922
<12922=12924,12923
<12947=12974,12973,12948
<12948=12970,12967,12964,12961,12958,12955,12952,12949
<12949=12951,12950
<12952=12954,12953
<12955=12957,12956
<12958=12960,12959
<12961=12963,12962
<12964=12966,12965
<12967=12969,12968
<12970=12972,12971
<12974=13183,13176,13118,13111,13104,13098,13082,13074,13062,13056,12999,12988,12977,12975
<12975=12976
<12977=12986,12978
<12978=12979
<12979=12980
<12980=12982,12981
<12982=12983
<12983=12985,12984
<12986=12987
<12988=12989
<12989=12997,12990
<12990=12995,12991
<12991=12992
<12992=12994,12993
<12995=12996
<12997=12998
<12999=13054,13000
<13000=13038,13001
<13001=13002
<13002=13034,13003
<13003=13004
<13004=13005
<13005=13032,13006
<13006=13030,13028,13024,13020,13018,13011,13007
<13007=13008
<13008=13010,13009
<13011=13012
<13012=13014,13013
<13014=13015
<13015=13017,13016
<13018=13019
<13020=13021
<13021=13023,13022
<13024=13025
<13025=13027,13026
<13028=13029
<13030=13031
<13032=13033
<13034=13035
<13035=13037,13036
<13038=13039
<13039=13053,13052,13040
<13040=13051,13041
<13041=13045,13042
<13042=13043
<13043=13044
<13045=13046
<13046=13048,13047
<13048=13050,13049
<13054=13055
<13056=13057
<13057=13059,13058
<13059=13061,13060
<13062=13063
<13063=13073,13072,13064
<13064=13071,13065
<13065=13069,13066
<13066=13067
<13067=13068
<13069=13070
<13074=13075
<13075=13077,13076
<13077=13079,13078
<13079=13081,13080
<13082=13089,13083
<13083=13084
<13084=13086,13085
<13086=13088,13087
<13089=13090
<13090=13097,13091
<13091=13093,13092
<13093=13094
<13094=13096,13095
<13098=13099
<13099=13101,13100
<13101=13103,13102
<13104=13105
<13105=13110,13109,13106
<13106=13108,13107
<13111=13112
<13112=13114,13113
<13114=13115
<13115=13117,13116
<13118=13172,13162,13119
<13119=13120
<13120=13121
<13121=13160,13131,13122
<13122=13123
<13123=13124
<13124=13125
<13125=13127,13126
<13127=13128
<13128=13130,13129
<13131=13156,13152,13144,13132
<13132=13133
<13133=13142,13134
<13134=13135
<13135=13136
<13136=13138,13137
<13138=13139
<13139=13141,13140
<13142=13143
<13144=13145
<13145=13151,13146
<13146=13150,13147
<13147=13149,13148
<13152=13153
<13153=13155,13154
<13156=13157
<13157=13159,13158
<13160=13161
<13162=13163
<13163=13164
<13164=13168,13165
<13165=13166
<13166=13167
<13168=13169
<13169=13171,13170
<13172=13173
<13173=13175,13174
<13176=13177
<13177=13181,13178
<13178=13179
<13179=13180
<13181=13182
<13183=13184
<13184=13191,13190,13185
<13185=13189,13186
<13186=13188,13187
<13229=13256,13255,13230
<13230=13252,13249,13246,13243,13240,13237,13234,13231
<13231=13233,13232
<13234=13236,13235
<13237=13239,13238
<13240=13242,13241
<13243=13245,13244
<13246=13248,13247
<13249=13251,13250
<13252=13254,13253
<13256=13297,13290,13286,13278,13257
<13257=13258
<13258=13276,13259
<13259=13274,13272,13270,13268,13266,13264,13262,13260
<13260=13261
<13262=13263
<13264=13265
<13266=13267
<13268=13269
<13270=13271
<13272=13273
<13274=13275
<13276=13277
<13278=13279
<13279=13285,13280
<13280=13284,13281
<13281=13283,13282
<13286=13287
<13287=13289,13288
<13290=13291
<13291=13295,13292
<13292=13293
<13293=13294
<13295=13296
<13297=13298
<13298=13303,13302,13299
<13299=13301,13300
<13318=13321,13320,13319
<13321=13346,13345,13344,13343,13322
<13322=13334,13323
<13323=13332,13324
<13324=13325
<13325=13326
<13326=13328,13327
<13328=13329
<13329=13331,13330
<13332=13333
<13334=13335
<13335=13342,13341,13336
<13336=13340,13337
<13337=13339,13338
<13353=13356,13355,13354
<13356=13387,13386,13385,13384,13357
<13357=13375,13358
<13358=13367,13359
<13359=13360
<13360=13361
<13361=13363,13362
<13363=13364
<13364=13366,13365
<13367=13368
<13368=13374,13369
<13369=13371,13370
<13371=13373,13372
<13375=13376
<13376=13383,13382,13377
<13377=13381,13378
<13378=13380,13379
<13396=13405,13404,13397
<13397=13401,13398
<13398=13400,13399
<13401=13403,13402
<13405=13408,13406
<13406=13407
<13408=13438,13429,13426,13409
<13409=13410
<13410=13418,13411
<13411=13412
<13412=13413
<13413=13417,13414
<13414=13416,13415
<13418=13419
<13419=13421,13420
<13421=13423,13422
<13423=13425,13424
<13426=13428,13427
<13429=13430
<13430=13437,13431
<13431=13433,13432
<13433=13434
<13434=13436,13435
<13438=13439
<13439=13440
<13440=13445,13444,13441
<13441=13443,13442
<13459=13468,13467,13460
<13460=13464,13461
<13461=13463,13462
<13464=13466,13465
<13468=13469
<13469=13470
<13470=13476,13471
<13471=13474,13472
<13472=13473
<13474=13475
<13476=13477
<13477=13479,13478
<13479=13481,13480
<13490=13496,13495,13491
<13491=13492
<13492=13494,13493
<13496=13570,13556,13545,13541,13524,13515,13511,13497
<13497=13498
<13498=13507,13499
<13499=13500
<13500=13501
<13501=13503,13502
<13503=13504
<13504=13506,13505
<13507=13508
<13508=13510,13509
<13511=13512
<13512=13514,13513
<13515=13520,13516
<13516=13517
<13517=13519,13518
<13520=13521
<13521=13523,13522
<13524=13534,13530,13525
<13525=13526
<13526=13527
<13527=13529,13528
<13530=13531
<13531=13533,13532
<13534=13535
<13535=13537,13536
<13537=13539,13538
<13539=13540
<13541=13542
<13542=13544,13543
<13545=13546
<13546=13555,13554,13547
<13547=13553,13548
<13548=13552,13549
<13549=13551,13550
<13556=13557
<13557=13569,13568,13558
<13558=13567,13559
<13559=13565,13560
<13560=13561
<13561=13562
<13562=13564,13563
<13565=13566
<13570=13571
<13571=13573,13572
<13585=13594,13593,13586
<13586=13590,13587
<13587=13589,13588
<13590=13592,13591
<13594=13595
<13595=14103,13596
<13596=14088,14070,14061,14054,14036,14018,14009,14000,13996,13992,13986,13980,13967,13960,13934,13920,13914,13886,13873,13860,13851,13842,13610,13604,13597
<13597=13598
<13598=13602,13599
<13599=13600
<13600=13601
<13602=13603
<13604=13605
<13605=13607,13606
<13607=13609,13608
<13610=13834,13830,13827,13611
<13611=13612
<13612=13819,13815,13812,13613
<13613=13805,13676,13614
<13614=13663,13615
<13615=13634,13616
<13616=13617
<13617=13628,13618
<13618=13619
<13619=13620
<13620=13622,13621
<13622=13624,13623
<13624=13625
<13625=13627,13626
<13628=13629
<13629=13631,13630
<13631=13633,13632
<13634=13635
<13635=13662,13661,13636
<13636=13649,13637
<13637=13647,13638
<13638=13639
<13639=13640
<13640=13642,13641
<13642=13646,13643
<13643=13645,13644
<13647=13648
<13649=13659,13650
<13650=13651
<13651=13652
<13652=13654,13653
<13654=13658,13655
<13655=13657,13656
<13659=13660
<13663=13664
<13664=13675,13665
<13665=13673,13666
<13666=13667
<13667=13668
<13668=13670,13669
<13670=13672,13671
<13673=13674
<13676=13797,13793,13790,13677
<13677=13678
<13678=13782,13778,13775,13679
<13679=13755,13735,13734,13733,13732,13731,13730,13729,13728,13727,13726,13725,13724,13723,13722,13721,13720,13719,13680
<13680=13718,13717,13716,13715,13714,13713,13712,13711,13710,13709,13708,13707,13706,13705,13697,13681
<13681=13687,13682
<13682=13683
<13683=13684
<13684=13686,13685
<13687=13688
<13688=13694,13689
<13689=13691,13690
<13691=13693,13692
<13694=13696,13695
<13697=13698
<13698=13700,13699
<13700=13704,13701
<13701=13703,13702
<13735=13736
<13736=13754,13753,13737
<13737=13752,13738
<13738=13740,13739
<13740=13750,13741
<13741=13742
<13742=13743
<13743=13749,13744
<13744=13746,13745
<13746=13748,13747
<13750=13751
<13755=13756
<13756=13774,13773,13757
<13757=13772,13758
<13758=13760,13759
<13760=13770,13761
<13761=13762
<13762=13763
<13763=13769,13764
<13764=13766,13765
<13766=13768,13767
<13770=13771
<13775=13777,13776
<13778=13779
<13779=13781,13780
<13782=13783
<13783=13784
<13784=13789,13788,13785
<13785=13787,13786
<13790=13792,13791
<13793=13794
<13794=13796,13795
<13797=13798
<13798=13799
<13799=13804,13803,13800
<13800=13802,13801
<13805=13806
<13806=13811,13810,13807
<13807=13809,13808
<13812=13814,13813
<13815=13816
<13816=13818,13817
<13819=13820
<13820=13821
<13821=13826,13825,13822
<13822=13824,13823
<13827=13829,13828
<13830=13831
<13831=13833,13832
<13834=13835
<13835=13836
<13836=13841,13840,13837
<13837=13839,13838
<13842=13847,13843
<13843=13844
<13844=13846,13845
<13847=13848
<13848=13850,13849
<13851=13856,13852
<13852=13853
<13853=13855,13854
<13856=13857
<13857=13859,13858
<13860=13861
<13861=13872,13871,13862
<13862=13870,13863
<13863=13869,13864
<13864=13866,13865
<13866=13868,13867
<13873=13874
<13874=13885,13884,13875
<13875=13883,13876
<13876=13882,13877
<13877=13879,13878
<13879=13881,13880
<13886=13887
<13887=13913,13912,13888
<13888=13911,13889
<13889=13909,13890
<13890=13900,13891
<13891=13892
<13892=13894,13893
<13894=13896,13895
<13896=13897
<13897=13899,13898
<13900=13901
<13901=13903,13902
<13903=13905,13904
<13905=13906
<13906=13908,13907
<13909=13910
<13914=13915
<13915=13917,13916
<13917=13919,13918
<13920=13930,13921
<13921=13923,13922
<13923=13924
<13924=13928,13925
<13925=13926
<13926=13927
<13928=13929
<13930=13931
<13931=13933,13932
<13934=13935
<13935=13959,13958,13936
<13936=13957,13937
<13937=13951,13938
<13938=13947,13943,13939
<13939=13940
<13940=13942,13941
<13943=13944
<13944=13946,13945
<13947=13948
<13948=13950,13949
<13951=13952
<13952=13954,13953
<13954=13956,13955
<13960=13961
<13961=13966,13965,13962
<13962=13964,13963
<13967=13974,13968
<13968=13973,13972,13969
<13969=13971,13970
<13974=13979,13978,13975
<13975=13977,13976
<13980=13981
<13981=13983,13982
<13983=13985,13984
<13986=13987
<13987=13989,13988
<13989=13991,13990
<13992=13993
<13993=13995,13994
<13996=13997
<13997=13999,13998
<14000=14001
<14001=14008,14007,14002
<14002=14006,14003
<14003=14005,14004
<14009=14010
<14010=14017,14016,14011
<14011=14015,14012
<14012=14014,14013
<14018=14019
<14019=14035,14034,14020
<14020=14033,14021
<14021=14027,14022
<14022=14024,14023
<14024=14026,14025
<14027=14029,14028
<14029=14030
<14030=14032,14031
<14036=14037
<14037=14053,14052,14038
<14038=14051,14039
<14039=14045,14040
<14040=14042,14041
<14042=14044,14043
<14045=14047,14046
<14047=14048
<14048=14050,14049
<14054=14055
<14055=14060,14059,14056
<14056=14058,14057
<14061=14062
<14062=14064,14063
<14064=14065
<14065=14067,14066
<14067=14069,14068
<14070=14086,14080,14071
<14071=14072
<14072=14073
<14073=14077,14074
<14074=14076,14075
<14077=14079,14078
<14080=14081
<14081=14083,14082
<14083=14085,14084
<14086=14087
<14088=14089
<14089=14100,14090
<14090=14098,14091
<14091=14096,14094,14092
<14092=14093
<14094=14095
<14096=14097
<14098=14099
<14100=14102,14101
<14103=14104
<14104=14106,14105
<14158=14164,14163,14159
<14159=14160
<14160=14162,14161
<14164=14197,14165
<14165=14185,14166
<14166=14175,14167
<14167=14168
<14168=14170,14169
<14170=14174,14171
<14171=14173,14172
<14175=14176
<14176=14182,14177
<14177=14181,14178
<14178=14180,14179
<14182=14184,14183
<14185=14186
<14186=14192,14187
<14187=14189,14188
<14189=14191,14190
<14192=14194,14193
<14194=14196,14195
<14197=14198
<14198=14202,14199
<14199=14200
<14200=14201
<14202=14203
<14203=14205,14204
<14219=14225,14224,14220
<14220=14221
<14221=14223,14222
<14225=14276,14267,14262,14226
<14226=14254,14245,14242,14227
<14227=14228
<14228=14238,14229
<14229=14230
<14230=14236,14231
<14231=14232
<14232=14233
<14233=14235,14234
<14236=14237
<14238=14239
<14239=14241,14240
<14242=14244,14243
<14245=14246
<14246=14253,14247
<14247=14249,14248
<14249=14250
<14250=14252,14251
<14254=14255
<14255=14256
<14256=14261,14260,14257
<14257=14259,14258
<14262=14263
<14263=14265,14264
<14265=14266
<14267=14268
<14268=14275,14274,14269
<14269=14273,14270
<14270=14272,14271
<14276=14286,14277
<14277=14278
<14278=14280,14279
<14280=14281
<14281=14283,14282
<14283=14285,14284
<14286=14287
<14287=14296,14288
<14288=14295,14289
<14289=14291,14290
<14291=14292
<14292=14294,14293
<14296=14298,14297
<14315=14318,14317,14316
<14318=14341,14319
<14319=14333,14329,14326,14320
<14320=14321
<14321=14323,14322
<14323=14325,14324
<14326=14328,14327
<14329=14330
<14330=14332,14331
<14333=14334
<14334=14335
<14335=14340,14339,14336
<14336=14338,14337
<14341=14342
<14342=14344,14343
<14344=14345
<14345=14347,14346
<14357=14363,14362,14358
<14358=14359
<14359=14361,14360
<14363=14368,14364
<14364=14365
<14365=14367,14366
<14368=14391,14382,14379,14369
<14369=14370
<14370=14373,14371
<14371=14372
<14373=14374
<14374=14376,14375
<14376=14378,14377
<14379=14381,14380
<14382=14383
<14383=14390,14384
<14384=14386,14385
<14386=14387
<14387=14389,14388
<14391=14392
<14392=14393
<14393=14398,14397,14394
<14394=14396,14395
<14408=14411,14410,14409
<14411=14412
<14412=14413
<14413=14424,14414
<14414=14417,14415
<14415=14416
<14417=14418
<14418=14420,14419
<14420=14421
<14421=14423,14422
<14424=14425
<14433=14439,14438,14434
<14434=14435
<14435=14437,14436
<14439=14516,14442,14440
<14440=14441
<14442=14508,14504,14501,14443
<14443=14492,14444
<14444=14474,14445
<14445=14446
<14446=14466,14447
<14447=14448
<14448=14452,14449
<14449=14450
<14450=14451
<14452=14453
<14453=14462,14454
<14454=14455
<14455=14456
<14456=14458,14457
<14458=14459
<14459=14461,14460
<14462=14463
<14463=14465,14464
<14466=14467
<14467=14471,14468
<14468=14470,14469
<14471=14473,14472
<14474=14475
<14475=14482,14476
<14476=14478,14477
<14478=14479
<14479=14481,14480
<14482=14491,14483
<14483=14485,14484
<14485=14486
<14486=14488,14487
<14488=14490,14489
<14492=14493
<14493=14500,14499,14494
<14494=14498,14495
<14495=14497,14496
<14501=14503,14502
<14504=14505
<14505=14507,14506
<14508=14509
<14509=14510
<14510=14515,14514,14511
<14511=14513,14512
<14516=14517
<14517=14527,14526,14518
<14518=14525,14519
<14519=14521,14520
<14521=14522
<14522=14524,14523
<14548=14560,14559,14549
<14549=14556,14553,14550
<14550=14552,14551
<14553=14555,14554
<14556=14558,14557
<14560=14694,14687,14680,14673,14563,14561
<14561=14562
<14563=14665,14652,14649,14564
<14564=14636,14565
<14565=14608,14566
<14566=14593,14581,14567
<14567=14577,14568
<14568=14573,14569
<14569=14570
<14570=14572,14571
<14573=14574
<14574=14576,14575
<14577=14578
<14578=14580,14579
<14581=14582
<14582=14592,14591,14583
<14583=14590,14584
<14584=14586,14585
<14586=14587
<14587=14589,14588
<14593=14594
<14594=14607,14606,14595
<14595=14605,14596
<14596=14598,14597
<14598=14600,14599
<14600=14602,14601
<14602=14604,14603
<14608=14609
<14609=14633,14610
<14610=14623,14611
<14611=14617,14612
<14612=14616,14613
<14613=14615,14614
<14617=14619,14618
<14619=14620
<14620=14622,14621
<14623=14632,14624
<14624=14626,14625
<14626=14627
<14627=14629,14628
<14629=14631,14630
<14633=14635,14634
<14636=14637
<14637=14648,14647,14638
<14638=14646,14639
<14639=14641,14640
<14641=14643,14642
<14643=14645,14644
<14649=14651,14650
<14652=14653
<14653=14664,14654
<14654=14656,14655
<14656=14657
<14657=14659,14658
<14659=14661,14660
<14661=14663,14662
<14665=14666
<14666=14667
<14667=14672,14671,14668
<14668=14670,14669
<14673=14674
<14674=14678,14675
<14675=14676
<14676=14677
<14678=14679
<14680=14681
<14681=14686,14685,14682
<14682=14684,14683
<14687=14688
<14688=14693,14692,14689
<14689=14691,14690
<14694=14695
<14695=14700,14699,14696
<14696=14698,14697
<14735=14744,14743,14736
<14736=14740,14737
<14737=14739,14738
<14740=14742,14741
<14744=14834,14827,14747,14745
<14745=14746
<14747=14810,14808,14803,14748
<14748=14749
<14749=14792,14750
<14750=14777,14765,14751
<14751=14761,14752
<14752=14757,14753
<14753=14754
<14754=14756,14755
<14757=14758
<14758=14760,14759
<14761=14762
<14762=14764,14763
<14765=14766
<14766=14776,14775,14767
<14767=14774,14768
<14768=14770,14769
<14770=14771
<14771=14773,14772
<14777=14778
<14778=14791,14790,14779
<14779=14789,14780
<14780=14782,14781
<14782=14784,14783
<14784=14786,14785
<14786=14788,14787
<14792=14793
<14793=14802,14794
<14794=14796,14795
<14796=14797
<14797=14799,14798
<14799=14801,14800
<14803=14807,14804
<14804=14806,14805
<14808=14809
<14810=14811
<14811=14812
<14812=14826,14825,14813
<14813=14824,14814
<14814=14818,14815
<14815=14816
<14816=14817
<14818=14819
<14819=14821,14820
<14821=14823,14822
<14827=14828
<14828=14833,14832,14829
<14829=14831,14830
<14834=14835
<14835=14840,14839,14836
<14836=14838,14837
<14866=14875,14874,14867
<14867=14871,14868
<14868=14870,14869
<14871=14873,14872
<14875=14891,14876
<14876=14877
<14877=14889,14878
<14878=14881,14879
<14879=14880
<14881=14882
<14882=14884,14883
<14884=14886,14885
<14886=14888,14887
<14889=14890
<14891=14894,14892
<14892=14893
<14894=14895
<14895=14897,14896
<14897=14898
<14898=14900,14899
<14900=14902,14901
<14915=14921,14920,14916
<14916=14917
<14917=14919,14918
<14921=14959,14924,14922
<14922=14923
<14924=14951,14942,14939,14925
<14925=14926
<14926=14931,14927
<14927=14928
<14928=14930,14929
<14931=14932
<14932=14934,14933
<14934=14936,14935
<14936=14938,14937
<14939=14941,14940
<14942=14943
<14943=14950,14944
<14944=14946,14945
<14946=14947
<14947=14949,14948
<14951=14952
<14952=14953
<14953=14958,14957,14954
<14954=14956,14955
<14959=14960
<14960=14964,14961
<14961=14962
<14962=14963
<14964=14965
<14978=15002,15001,14979
<14979=14998,14995,14992,14989,14986,14983,14980
<14980=14982,14981
<14983=14985,14984
<14986=14988,14987
<14989=14991,14990
<14992=14994,14993
<14995=14997,14996
<14998=15000,14999
<15002=15212,15203,15190,15179,15168,15155,15146,15135,15124,15111,15102,15091,15080,15067,15058,15047,15036,15025,15014,15003
<15003=15004
<15004=15010,15005
<15005=15008,15006
<15006=15007
<15008=15009
<15010=15011
<15011=15013,15012
<15014=15015
<15015=15021,15016
<15016=15019,15017
<15017=15018
<15019=15020
<15021=15022
<15022=15024,15023
<15025=15026
<15026=15032,15027
<15027=15030,15028
<15028=15029
<15030=15031
<15032=15033
<15033=15035,15034
<15036=15037
<15037=15043,15038
<15038=15041,15039
<15039=15040
<15041=15042
<15043=15044
<15044=15046,15045
<15047=15048
<15048=15054,15049
<15049=15052,15050
<15050=15051
<15052=15053
<15054=15055
<15055=15057,15056
<15058=15059
<15059=15063,15060
<15060=15061
<15061=15062
<15063=15064
<15064=15066,15065
<15067=15068
<15068=15077,15069
<15069=15075,15070
<15070=15073,15071
<15071=15072
<15073=15074
<15075=15076
<15077=15079,15078
<15080=15081
<15081=15090,15089,15082
<15082=15088,15083
<15083=15087,15084
<15084=15086,15085
<15091=15092
<15092=15098,15093
<15093=15096,15094
<15094=15095
<15096=15097
<15098=15099
<15099=15101,15100
<15102=15103
<15103=15107,15104
<15104=15105
<15105=15106
<15107=15108
<15108=15110,15109
<15111=15112
<15112=15121,15113
<15113=15119,15114
<15114=15117,15115
<15115=15116
<15117=15118
<15119=15120
<15121=15123,15122
<15124=15125
<15125=15134,15133,15126
<15126=15132,15127
<15127=15131,15128
<15128=15130,15129
<15135=15136
<15136=15142,15137
<15137=15140,15138
<15138=15139
<15140=15141
<15142=15143
<15143=15145,15144
<15146=15147
<15147=15151,15148
<15148=15149
<15149=15150
<15151=15152
<15152=15154,15153
<15155=15156
<15156=15165,15157
<15157=15163,15158
<15158=15161,15159
<15159=15160
<15161=15162
<15163=15164
<15165=15167,15166
<15168=15169
<15169=15178,15177,15170
<15170=15176,15171
<15171=15175,15172
<15172=15174,15173
<15179=15180
<15180=15186,15181
<15181=15184,15182
<15182=15183
<15184=15185
<15186=15187
<15187=15189,15188
<15190=15191
<15191=15200,15192
<15192=15198,15193
<15193=15196,15194
<15194=15195
<15196=15197
<15198=15199
<15200=15202,15201
<15203=15204
<15204=15208,15205
<15205=15206
<15206=15207
<15208=15209
<15209=15211,15210
<15212=15213
<15213=15222,15221,15214
<15214=15220,15215
<15215=15219,15216
<15216=15218,15217
<15254=15272,15271,15255
<15255=15268,15265,15262,15259,15256
<15256=15258,15257
<15259=15261,15260
<15262=15264,15263
<15265=15267,15266
<15268=15270,15269
<15272=15371,15362,15347,15336,15325,15308,15297,15286,15275,15273
<15273=15274
<15275=15276
<15276=15282,15277
<15277=15280,15278
<15278=15279
<15280=15281
<15282=15283
<15283=15285,15284
<15286=15287
<15287=15293,15288
<15288=15291,15289
<15289=15290
<15291=15292
<15293=15294
<15294=15296,15295
<15297=15298
<15298=15304,15299
<15299=15302,15300
<15300=15301
<15302=15303
<15304=15305
<15305=15307,15306
<15308=15309
<15309=15322,15310
<15310=15320,15311
<15311=15314,15312
<15312=15313
<15314=15315
<15315=15319,15316
<15316=15318,15317
<15320=15321
<15322=15324,15323
<15325=15326
<15326=15335,15334,15327
<15327=15333,15328
<15328=15332,15329
<15329=15331,15330
<15336=15337
<15337=15343,15338
<15338=15341,15339
<15339=15340
<15341=15342
<15343=15344
<15344=15346,15345
<15347=15348
<15348=15359,15349
<15349=15357,15350
<15350=15353,15351
<15351=15352
<15353=15354
<15354=15356,15355
<15357=15358
<15359=15361,15360
<15362=15363
<15363=15367,15364
<15364=15365
<15365=15366
<15367=15368
<15368=15370,15369
<15371=15372
<15372=15381,15380,15373
<15373=15379,15374
<15374=15378,15375
<15375=15377,15376
<15404=15416,15415,15405
<15405=15412,15409,15406
<15406=15408,15407
<15409=15411,15410
<15412=15414,15413
<15416=15419,15417
<15417=15418
<15419=15672,15420
<15420=15662,15655,15650,15640,15633,15509,15484,15423,15421
<15421=15422
<15423=15480,15455,15424
<15424=15425
<15425=15451,15426
<15426=15447,15438,15427
<15427=15428
<15428=15436,15429
<15429=15434,15432,15430
<15430=15431
<15432=15433
<15434=15435
<15436=15437
<15438=15439
<15439=15445,15440
<15440=15443,15441
<15441=15442
<15443=15444
<15445=15446
<15447=15448
<15448=15450,15449
<15451=15452
<15452=15454,15453
<15455=15476,15467,15456
<15456=15457
<15457=15465,15458
<15458=15463,15461,15459
<15459=15460
<15461=15462
<15463=15464
<15465=15466
<15467=15468
<15468=15474,15469
<15469=15472,15470
<15470=15471
<15472=15473
<15474=15475
<15476=15477
<15477=15479,15478
<15480=15481
<15481=15483,15482
<15484=15505,15498,15485
<15485=15486
<15486=15494,15487
<15487=15488
<15488=15489
<15489=15493,15490
<15490=15492,15491
<15494=15495
<15495=15497,15496
<15498=15499
<15499=15500
<15500=15504,15501
<15501=15503,15502
<15505=15506
<15506=15508,15507
<15509=15629,15610,15510
<15510=15511
<15511=15606,15587,15512
<15512=15513
<15513=15583,15564,15514
<15514=15515
<15515=15560,15541,15516
<15516=15517
<15517=15537,15518
<15518=15519
<15519=15524,15520
<15520=15521
<15521=15523,15522
<15524=15525
<15525=15527,15526
<15527=15531,15528
<15528=15529
<15529=15530
<15531=15532
<15532=15534,15533
<15534=15536,15535
<15537=15538
<15538=15540,15539
<15541=15542
<15542=15547,15543
<15543=15544
<15544=15546,15545
<15547=15548
<15548=15550,15549
<15550=15554,15551
<15551=15552
<15552=15553
<15554=15555
<15555=15557,15556
<15557=15559,15558
<15560=15561
<15561=15563,15562
<15564=15565
<15565=15570,15566
<15566=15567
<15567=15569,15568
<15570=15571
<15571=15573,15572
<15573=15577,15574
<15574=15575
<15575=15576
<15577=15578
<15578=15580,15579
<15580=15582,15581
<15583=15584
<15584=15586,15585
<15587=15588
<15588=15593,15589
<15589=15590
<15590=15592,15591
<15593=15594
<15594=15596,15595
<15596=15600,15597
<15597=15598
<15598=15599
<15600=15601
<15601=15603,15602
<15603=15605,15604
<15606=15607
<15607=15609,15608
<15610=15611
<15611=15616,15612
<15612=15613
<15613=15615,15614
<15616=15617
<15617=15619,15618
<15619=15623,15620
<15620=15621
<15621=15622
<15623=15624
<15624=15626,15625
<15626=15628,15627
<15629=15630
<15630=15632,15631
<15633=15634
<15634=15639,15638,15635
<15635=15637,15636
<15640=15641
<15641=15649,15642
<15642=15648,15643
<15643=15647,15644
<15644=15646,15645
<15650=15651
<15651=15654,15653,15652
<15655=15656
<15656=15661,15660,15657
<15657=15659,15658
<15662=15669,15666,15663
<15663=15665,15664
<15666=15668,15667
<15669=15671,15670
<15672=15673
<15673=15680,15674
<15674=15676,15675
<15676=15677
<15677=15679,15678
<15704=15707,15706,15705
<15707=15754,15747,15740,15733,15726,15719,15708
<15708=15709
<15709=15713,15710
<15710=15711
<15711=15712
<15713=15714
<15714=15716,15715
<15716=15718,15717
<15719=15720
<15720=15724,15721
<15721=15722
<15722=15723
<15724=15725
<15726=15727
<15727=15731,15728
<15728=15729
<15729=15730
<15731=15732
<15733=15734
<15734=15738,15735
<15735=15736
<15736=15737
<15738=15739
<15740=15741
<15741=15745,15742
<15742=15743
<15743=15744
<15745=15746
<15747=15748
<15748=15752,15749
<15749=15750
<15750=15751
<15752=15753
<15754=15755
<15755=15757,15756
<15757=15758
<15758=15760,15759
<15760=15762,15761
<15772=15775,15774,15773
<15775=15822,15815,15808,15801,15794,15787,15776
<15776=15777
<15777=15781,15778
<15778=15779
<15779=15780
<15781=15782
<15782=15784,15783
<15784=15786,15785
<15787=15788
<15788=15792,15789
<15789=15790
<15790=15791
<15792=15793
<15794=15795
<15795=15799,15796
<15796=15797
<15797=15798
<15799=15800
<15801=15802
<15802=15806,15803
<15803=15804
<15804=15805
<15806=15807
<15808=15809
<15809=15813,15810
<15810=15811
<15811=15812
<15813=15814
<15815=15816
<15816=15820,15817
<15817=15818
<15818=15819
<15820=15821
<15822=15823
<15823=15825,15824
<15825=15826
<15826=15828,15827
<15828=15830,15829
<15840=15843,15842,15841
<15843=15890,15883,15876,15869,15862,15855,15844
<15844=15845
<15845=15849,15846
<15846=15847
<15847=15848
<15849=15850
<15850=15852,15851
<15852=15854,15853
<15855=15856
<15856=15860,15857
<15857=15858
<15858=15859
<15860=15861
<15862=15863
<15863=15867,15864
<15864=15865
<15865=15866
<15867=15868
<15869=15870
<15870=15874,15871
<15871=15872
<15872=15873
<15874=15875
<15876=15877
<15877=15881,15878
<15878=15879
<15879=15880
<15881=15882
<15883=15884
<15884=15888,15885
<15885=15886
<15886=15887
<15888=15889
<15890=15891
<15891=15893,15892
<15893=15894
<15894=15896,15895
<15896=15898,15897
<15908=15911,15910,15909
<15911=15958,15951,15944,15937,15930,15923,15912
<15912=15913
<15913=15917,15914
<15914=15915
<15915=15916
<15917=15918
<15918=15920,15919
<15920=15922,15921
<15923=15924
<15924=15928,15925
<15925=15926
<15926=15927
<15928=15929
<15930=15931
<15931=15935,15932
<15932=15933
<15933=15934
<15935=15936
<15937=15938
<15938=15942,15939
<15939=15940
<15940=15941
<15942=15943
<15944=15945
<15945=15949,15946
<15946=15947
<15947=15948
<15949=15950
<15951=15952
<15952=15956,15953
<15953=15954
<15954=15955
<15956=15957
<15958=15959
<15959=15961,15960
<15961=15962
<15962=15964,15963
<15964=15966,15965
<15978=15981,15980,15979
<15981=16194,16180,16132,16124,16107,16098,16091,16080,16067,16048,15982
<15982=16040,16031,16028,15983
<15983=15984
<15984=16017,15985
<15985=15999,15986
<15986=15987
<15987=15993,15988
<15988=15991,15989
<15989=15990
<15991=15992
<15993=15994
<15994=15996,15995
<15996=15998,15997
<15999=16000
<16000=16016,16015,16001
<16001=16014,16002
<16002=16008,16003
<16003=16004
<16004=16005
<16005=16007,16006
<16008=16009
<16009=16011,16010
<16011=16013,16012
<16017=16018
<16018=16027,16019
<16019=16021,16020
<16021=16022
<16022=16024,16023
<16024=16026,16025
<16028=16030,16029
<16031=16032
<16032=16039,16033
<16033=16035,16034
<16035=16036
<16036=16038,16037
<16040=16041
<16041=16042
<16042=16047,16046,16043
<16043=16045,16044
<16048=16049
<16049=16063,16050
<16050=16061,16059,16057,16055,16053,16051
<16051=16052
<16053=16054
<16055=16056
<16057=16058
<16059=16060
<16061=16062
<16063=16064
<16064=16066,16065
<16067=16068
<16068=16074,16069
<16069=16072,16070
<16070=16071
<16072=16073
<16074=16075
<16075=16077,16076
<16077=16079,16078
<16080=16081
<16081=16085,16082
<16082=16083
<16083=16084
<16085=16086
<16086=16088,16087
<16088=16090,16089
<16091=16092
<16092=16096,16093
<16093=16094
<16094=16095
<16096=16097
<16098=16099
<16099=16101,16100
<16101=16102
<16102=16104,16103
<16104=16106,16105
<16107=16116,16108
<16108=16109
<16109=16111,16110
<16111=16113,16112
<16113=16115,16114
<16116=16117
<16117=16119,16118
<16119=16121,16120
<16121=16123,16122
<16124=16125
<16125=16127,16126
<16127=16129,16128
<16129=16131,16130
<16132=16172,16163,16160,16133
<16133=16146,16134
<16134=16144,16135
<16135=16136
<16136=16137
<16137=16141,16138
<16138=16140,16139
<16141=16143,16142
<16144=16145
<16146=16147
<16147=16159,16158,16148
<16148=16157,16149
<16149=16151,16150
<16151=16152
<16152=16154,16153
<16154=16156,16155
<16160=16162,16161
<16163=16164
<16164=16171,16165
<16165=16167,16166
<16167=16168
<16168=16170,16169
<16172=16173
<16173=16174
<16174=16179,16178,16175
<16175=16177,16176
<16180=16181
<16181=16190,16182
<16182=16183
<16183=16184
<16184=16186,16185
<16186=16187
<16187=16189,16188
<16190=16191
<16191=16193,16192
<16194=16195
<16195=16197,16196
<16225=16228,16227,16226
<16228=23151,23144,23143,23142,23141,23139,23130,23115,23100,23094,23085,23084,23083,23082,23080,23071,23058,23047,23036,23035,23034,23033,23031,23025,23006,22987,22971,22960,22944,22933,22915,22903,22891,22866,22855,22848,22841,22834,22827,22809,22800,22791,22766,22755,22751,22736,22723,22712,22694,22667,22656,22652,22638,22623,22612,22594,22581,22570,22559,22546,22422,22411,22393,22384,22375,22350,22339,22335,22320,22303,22292,22288,22273,22260,22249,22245,22230,22213,22202,22198,22183,22170,22159,22155,22151,22136,22119,22108,22104,22089,22072,22061,22057,22042,22025,22014,22013,22012,22011,22009,22000,21987,21969,21963,21957,21948,21947,21946,21945,21943,21934,21921,21903,21897,21891,21882,21876,21870,21864,21855,21851,21844,21835,21816,21803,21792,21779,21768,21749,21738,21730,21656,21645,21638,21631,21624,21617,21610,21609,21608,21607,21605,21599,21588,21557,21548,21539,21538,21537,21536,21534,21528,21517,21486,21477,21468,21467,21466,21465,21463,21457,21446,21415,21406,21397,21396,21395,21394,21392,21386,21375,21344,21335,21326,21325,21324,21323,21321,21315,21295,21264,21255,21246,21237,21228,21219,21212,21205,21204,21203,21202,21200,21191,21178,21163,21157,21144,21126,21117,21116,21115,21114,21112,21105,21090,21077,21066,21057,21056,21055,21054,21053,21052,21051,21050,21049,21048,21047,21046,21045,21033,21019,21004,20993,20982,20968,20953,20944,20933,20922,20908,20893,20884,20873,20862,20848,20833,20824,20813,20787,20761,20741,20721,20701,20681,20661,20641,20621,20601,20581,20555,20528,20501,20474,20447,20436,20425,20414,20403,20392,20381,20370,20359,20355,20335,20315,20295,20275,20255,20235,20215,20195,20194,20193,20187,20181,20175,20166,20151,20142,20141,20140,20139,20137,20128,20115,20098,20092,20079,20061,20052,20043,20042,20041,20040,20038,20029,20020,20007,19988,19970,19964,19955,19954,19953,19952,19950,19941,19928,19911,19905,19892,19874,19865,19864,19863,19862,19860,19851,19838,19821,19815,19802,19784,19775,19774,19773,19772,19770,19761,19752,19739,19720,19714,19696,19683,19674,19665,19664,19663,19662,19660,19651,19642,19629,19612,19606,19597,19579,19566,19557,19556,19555,19554,19552,19543,19534,19521,19502,19496,19487,19474,19456,19447,19438,19437,19436,19435,19433,19424,19415,19402,19385,19379,19366,19348,19339,19330,19322,19307,19290,19284,19278,19269,19260,19253,19147,19146,19145,19144,19142,19136,19130,19124,19111,19083,19077,19068,19064,19058,19045,19036,19029,19014,19006,18998,18987,18972,18964,18956,18945,18935,18927,18919,18897,18889,18874,18863,18853,18845,18837,18822,18800,18792,18781,18780,18779,18778,18777,18776,18774,18763,18752,18737,18720,18712,18692,18677,18666,18665,18664,18663,18662,18661,18659,18648,18637,18622,18605,18597,18577,18562,18551,18533,18409,18400,18390,18382,18365,18352,18345,18338,18144,18140,18134,18126,18117,18104,18095,18086,18080,18074,18065,18061,18052,18051,18050,18049,18047,18032,18023,18017,18011,18002,18001,18000,17999,17997,17980,17971,17958,17940,17934,17928,17919,17918,17917,17916,17914,17897,17888,17875,17857,17851,17845,17836,17825,17814,17805,17787,17786,17785,17784,17783,17782,17780,17773,17753,17738,17719,17704,17684,17663,17652,17632,17615,17590,17579,17559,17544,17529,17518,17512,17492,17477,17460,17453,17433,17422,17407,17396,17379,17369,17363,17357,17346,17337,17331,17322,17302,17291,17276,17265,17248,16229,16235,16246,16252,16258,16262,16271,16280,16286,16306,16312,16316,16327,16386,16394,16502,16511,16518,16529,16599,16607,16618,16688,16696,16831,16838,16845,16854,16873,16892,16911,16930,16949,16968,16987,17024,17043,17054,17069,17080,17100,17117,17128,17143,17154,17174,17191,17202,17217,17228
<16229=16230
<16230=16232,16231
<16232=16234,16233
<16235=16236
<16236=16242,16237
<16237=16240,16238
<16238=16239
<16240=16241
<16242=16243
<16243=16245,16244
<16246=16247
<16247=16249,16248
<16249=16251,16250
<16252=16253
<16253=16255,16254
<16255=16257,16256
<16258=16259
<16259=16261,16260
<16262=16263
<16263=16267,16264
<16264=16265
<16265=16266
<16267=16268
<16268=16270,16269
<16271=16272
<16272=16278,16273
<16273=16276,16274
<16274=16275
<16276=16277
<16278=16279
<16280=16281
<16281=16283,16282
<16283=16285,16284
<16286=16287
<16287=16302,16288
<16288=16293,16291,16289
<16289=16290
<16291=16292
<16293=16294
<16294=16300,16295
<16295=16298,16296
<16296=16297
<16298=16299
<16300=16301
<16302=16303
<16303=16305,16304
<16306=16307
<16307=16309,16308
<16309=16311,16310
<16312=16313
<16313=16315,16314
<16316=16317
<16317=16323,16318
<16318=16321,16319
<16319=16320
<16321=16322
<16323=16324
<16324=16326,16325
<16327=16380,16371,16365,16356,16341,16328
<16328=16329
<16329=16338,16330
<16330=16336,16331
<16331=16334,16332
<16332=16333
<16334=16335
<16336=16337
<16338=16340,16339
<16341=16342
<16342=16353,16343
<16343=16352,16344
<16344=16350,16345
<16345=16348,16346
<16346=16347
<16348=16349
<16350=16351
<16353=16355,16354
<16356=16357
<16357=16361,16358
<16358=16359
<16359=16360
<16361=16362
<16362=16364,16363
<16365=16366
<16366=16368,16367
<16368=16370,16369
<16371=16372
<16372=16376,16373
<16373=16374
<16374=16375
<16376=16377
<16377=16379,16378
<16380=16381
<16381=16383,16382
<16383=16385,16384
<16386=16387
<16387=16393,16388
<16388=16392,16389
<16389=16391,16390
<16394=16498,16489,16486,16395
<16395=16480,16452,16423,16415,16407,16396
<16396=16397
<16397=16405,16398
<16398=16401,16399
<16399=16400
<16401=16402
<16402=16404,16403
<16405=16406
<16407=16408
<16408=16410,16409
<16410=16412,16411
<16412=16414,16413
<16415=16416
<16416=16418,16417
<16418=16420,16419
<16420=16422,16421
<16423=16424
<16424=16447,16425
<16425=16446,16426
<16426=16428,16427
<16428=16444,16429
<16429=16437,16430
<16430=16431
<16431=16435,16432
<16432=16433
<16433=16434
<16435=16436
<16437=16438
<16438=16442,16439
<16439=16440
<16440=16441
<16442=16443
<16444=16445
<16447=16449,16448
<16449=16451,16450
<16452=16453
<16453=16479,16478,16454
<16454=16477,16455
<16455=16459,16456
<16456=16458,16457
<16459=16471,16460
<16460=16469,16461
<16461=16462
<16462=16463
<16463=16465,16464
<16465=16466
<16466=16468,16467
<16469=16470
<16471=16475,16472
<16472=16473
<16473=16474
<16475=16476
<16480=16481
<16481=16483,16482
<16483=16485,16484
<16486=16488,16487
<16489=16490
<16490=16497,16491
<16491=16493,16492
<16493=16494
<16494=16496,16495
<16498=16499
<16499=16501,16500
<16502=16503
<16503=16507,16504
<16504=16505
<16505=16506
<16507=16508
<16508=16510,16509
<16511=16512
<16512=16517,16516,16513
<16513=16515,16514
<16518=16519
<16519=16525,16520
<16520=16523,16521
<16521=16522
<16523=16524
<16525=16526
<16526=16528,16527
<16529=16593,16584,16578,16552,16539,16530
<16530=16531
<16531=16535,16532
<16532=16533
<16533=16534
<16535=16536
<16536=16538,16537
<16539=16540
<16540=16549,16541
<16541=16547,16542
<16542=16545,16543
<16543=16544
<16545=16546
<16547=16548
<16549=16551,16550
<16552=16553
<16553=16575,16554
<16554=16574,16555
<16555=16566,16556
<16556=16564,16557
<16557=16562,16558
<16558=16559
<16559=16561,16560
<16562=16563
<16564=16565
<16566=16572,16567
<16567=16570,16568
<16568=16569
<16570=16571
<16572=16573
<16575=16577,16576
<16578=16579
<16579=16581,16580
<16581=16583,16582
<16584=16585
<16585=16589,16586
<16586=16587
<16587=16588
<16589=16590
<16590=16592,16591
<16593=16594
<16594=16596,16595
<16596=16598,16597
<16599=16600
<16600=16606,16601
<16601=16605,16602
<16602=16604,16603
<16607=16608
<16608=16614,16609
<16609=16612,16610
<16610=16611
<16612=16613
<16614=16615
<16615=16617,16616
<16618=16682,16673,16667,16658,16632,16619
<16619=16620
<16620=16629,16621
<16621=16627,16622
<16622=16625,16623
<16623=16624
<16625=16626
<16627=16628
<16629=16631,16630
<16632=16633
<16633=16655,16634
<16634=16654,16635
<16635=16646,16636
<16636=16644,16637
<16637=16642,16638
<16638=16639
<16639=16641,16640
<16642=16643
<16644=16645
<16646=16652,16647
<16647=16650,16648
<16648=16649
<16650=16651
<16652=16653
<16655=16657,16656
<16658=16659
<16659=16663,16660
<16660=16661
<16661=16662
<16663=16664
<16664=16666,16665
<16667=16668
<16668=16670,16669
<16670=16672,16671
<16673=16674
<16674=16678,16675
<16675=16676
<16676=16677
<16678=16679
<16679=16681,16680
<16682=16683
<16683=16685,16684
<16685=16687,16686
<16688=16689
<16689=16695,16690
<16690=16694,16691
<16691=16693,16692
<16696=16827,16818,16815,16697
<16697=16809,16781,16752,16737,16733,16725,16717,16709,16698
<16698=16699
<16699=16707,16700
<16700=16703,16701
<16701=16702
<16703=16704
<16704=16706,16705
<16707=16708
<16709=16710
<16710=16712,16711
<16712=16714,16713
<16714=16716,16715
<16717=16718
<16718=16720,16719
<16720=16722,16721
<16722=16724,16723
<16725=16726
<16726=16728,16727
<16728=16730,16729
<16730=16732,16731
<16733=16734
<16734=16736,16735
<16737=16738
<16738=16746,16739
<16739=16740
<16740=16741
<16741=16743,16742
<16743=16745,16744
<16746=16747
<16747=16749,16748
<16749=16751,16750
<16752=16753
<16753=16776,16754
<16754=16775,16755
<16755=16757,16756
<16757=16773,16758
<16758=16766,16759
<16759=16760
<16760=16764,16761
<16761=16762
<16762=16763
<16764=16765
<16766=16767
<16767=16771,16768
<16768=16769
<16769=16770
<16771=16772
<16773=16774
<16776=16778,16777
<16778=16780,16779
<16781=16782
<16782=16808,16807,16783
<16783=16806,16784
<16784=16788,16785
<16785=16787,16786
<16788=16800,16789
<16789=16798,16790
<16790=16791
<16791=16792
<16792=16794,16793
<16794=16795
<16795=16797,16796
<16798=16799
<16800=16804,16801
<16801=16802
<16802=16803
<16804=16805
<16809=16810
<16810=16812,16811
<16812=16814,16813
<16815=16817,16816
<16818=16819
<16819=16826,16820
<16820=16822,16821
<16822=16823
<16823=16825,16824
<16827=16828
<16828=16830,16829
<16831=16832
<16832=16837,16836,16833
<16833=16835,16834
<16838=16839
<16839=16844,16843,16840
<16840=16842,16841
<16845=16846
<16846=16850,16847
<16847=16848
<16848=16849
<16850=16851
<16851=16853,16852
<16854=16855
<16855=16865,16856
<16856=16863,16857
<16857=16858
<16858=16862,16859
<16859=16861,16860
<16863=16864
<16865=16866
<16866=16868,16867
<16868=16872,16869
<16869=16871,16870
<16873=16874
<16874=16884,16875
<16875=16882,16876
<16876=16877
<16877=16881,16878
<16878=16880,16879
<16882=16883
<16884=16885
<16885=16887,16886
<16887=16891,16888
<16888=16890,16889
<16892=16893
<16893=16903,16894
<16894=16901,16895
<16895=16896
<16896=16900,16897
<16897=16899,16898
<16901=16902
<16903=16904
<16904=16906,16905
<16906=16910,16907
<16907=16909,16908
<16911=16912
<16912=16922,16913
<16913=16920,16914
<16914=16915
<16915=16919,16916
<16916=16918,16917
<16920=16921
<16922=16923
<16923=16925,16924
<16925=16929,16926
<16926=16928,16927
<16930=16931
<16931=16941,16932
<16932=16939,16933
<16933=16934
<16934=16938,16935
<16935=16937,16936
<16939=16940
<16941=16942
<16942=16944,16943
<16944=16948,16945
<16945=16947,16946
<16949=16950
<16950=16960,16951
<16951=16958,16952
<16952=16953
<16953=16957,16954
<16954=16956,16955
<16958=16959
<16960=16961
<16961=16963,16962
<16963=16967,16964
<16964=16966,16965
<16968=16969
<16969=16979,16970
<16970=16977,16971
<16971=16972
<16972=16976,16973
<16973=16975,16974
<16977=16978
<16979=16980
<16980=16982,16981
<16982=16986,16983
<16983=16985,16984
<16987=17020,17011,17008,16988
<16988=16997,16989
<16989=16990
<16990=16992,16991
<16992=16994,16993
<16994=16996,16995
<16997=16998
<16998=17006,16999
<16999=17002,17000
<17000=17001
<17002=17003
<17003=17005,17004
<17006=17007
<17008=17010,17009
<17011=17012
<17012=17019,17013
<17013=17015,17014
<17015=17016
<17016=17018,17017
<17020=17021
<17021=17023,17022
<17024=17025
<17025=17038,17026
<17026=17036,17027
<17027=17030,17028
<17028=17029
<17030=17031
<17031=17035,17032
<17032=17034,17033
<17036=17037
<17038=17040,17039
<17040=17042,17041
<17043=17044
<17044=17048,17045
<17045=17046
<17046=17047
<17048=17049
<17049=17051,17050
<17051=17053,17052
<17054=17055
<17055=17063,17056
<17056=17061,17059,17057
<17057=17058
<17059=17060
<17061=17062
<17063=17064
<17064=17066,17065
<17066=17068,17067
<17069=17070
<17070=17074,17071
<17071=17072
<17072=17073
<17074=17075
<17075=17077,17076
<17077=17079,17078
<17080=17081
<17081=17092,17082
<17082=17083
<17083=17084
<17084=17090,17085
<17085=17088,17086
<17086=17087
<17088=17089
<17090=17091
<17092=17093
<17093=17095,17094
<17095=17097,17096
<17097=17099,17098
<17100=17101
<17101=17112,17102
<17102=17110,17103
<17103=17106,17104
<17104=17105
<17106=17107
<17107=17109,17108
<17110=17111
<17112=17114,17113
<17114=17116,17115
<17117=17118
<17118=17122,17119
<17119=17120
<17120=17121
<17122=17123
<17123=17125,17124
<17125=17127,17126
<17128=17129
<17129=17137,17130
<17130=17135,17133,17131
<17131=17132
<17133=17134
<17135=17136
<17137=17138
<17138=17140,17139
<17140=17142,17141
<17143=17144
<17144=17148,17145
<17145=17146
<17146=17147
<17148=17149
<17149=17151,17150
<17151=17153,17152
<17154=17155
<17155=17166,17156
<17156=17157
<17157=17158
<17158=17164,17159
<17159=17162,17160
<17160=17161
<17162=17163
<17164=17165
<17166=17167
<17167=17169,17168
<17169=17171,17170
<17171=17173,17172
<17174=17175
<17175=17186,17176
<17176=17184,17177
<17177=17180,17178
<17178=17179
<17180=17181
<17181=17183,17182
<17184=17185
<17186=17188,17187
<17188=17190,17189
<17191=17192
<17192=17196,17193
<17193=17194
<17194=17195
<17196=17197
<17197=17199,17198
<17199=17201,17200
<17202=17203
<17203=17211,17204
<17204=17209,17207,17205
<17205=17206
<17207=17208
<17209=17210
<17211=17212
<17212=17214,17213
<17214=17216,17215
<17217=17218
<17218=17222,17219
<17219=17220
<17220=17221
<17222=17223
<17223=17225,17224
<17225=17227,17226
<17228=17229
<17229=17240,17230
<17230=17231
<17231=17232
<17232=17238,17233
<17233=17236,17234
<17234=17235
<17236=17237
<17238=17239
<17240=17241
<17241=17243,17242
<17243=17245,17244
<17245=17247,17246
<17248=17249
<17249=17260,17250
<17250=17258,17251
<17251=17254,17252
<17252=17253
<17254=17255
<17255=17257,17256
<17258=17259
<17260=17262,17261
<17262=17264,17263
<17265=17266
<17266=17270,17267
<17267=17268
<17268=17269
<17270=17271
<17271=17273,17272
<17273=17275,17274
<17276=17277
<17277=17285,17278
<17278=17283,17281,17279
<17279=17280
<17281=17282
<17283=17284
<17285=17286
<17286=17288,17287
<17288=17290,17289
<17291=17292
<17292=17296,17293
<17293=17294
<17294=17295
<17296=17297
<17297=17299,17298
<17299=17301,17300
<17302=17303
<17303=17314,17304
<17304=17305
<17305=17306
<17306=17312,17307
<17307=17310,17308
<17308=17309
<17310=17311
<17312=17313
<17314=17315
<17315=17317,17316
<17317=17319,17318
<17319=17321,17320
<17322=17323
<17323=17329,17324
<17324=17327,17325
<17325=17326
<17327=17328
<17329=17330
<17331=17332
<17332=17334,17333
<17334=17336,17335
<17337=17338
<17338=17342,17339
<17339=17340
<17340=17341
<17342=17343
<17343=17345,17344
<17346=17347
<17347=17353,17348
<17348=17351,17349
<17349=17350
<17351=17352
<17353=17354
<17354=17356,17355
<17357=17358
<17358=17360,17359
<17360=17362,17361
<17363=17364
<17364=17366,17365
<17366=17368,17367
<17369=17370
<17370=17378,17371
<17371=17377,17372
<17372=17374,17373
<17374=17376,17375
<17379=17380
<17380=17391,17381
<17381=17389,17382
<17382=17385,17383
<17383=17384
<17385=17386
<17386=17388,17387
<17389=17390
<17391=17393,17392
<17393=17395,17394
<17396=17397
<17397=17401,17398
<17398=17399
<17399=17400
<17401=17402
<17402=17404,17403
<17404=17406,17405
<17407=17408
<17408=17416,17409
<17409=17414,17412,17410
<17410=17411
<17412=17413
<17414=17415
<17416=17417
<17417=17419,17418
<17419=17421,17420
<17422=17423
<17423=17427,17424
<17424=17425
<17425=17426
<17427=17428
<17428=17430,17429
<17430=17432,17431
<17433=17434
<17434=17445,17435
<17435=17436
<17436=17437
<17437=17443,17438
<17438=17441,17439
<17439=17440
<17441=17442
<17443=17444
<17445=17446
<17446=17448,17447
<17448=17450,17449
<17450=17452,17451
<17453=17454
<17454=17459,17458,17455
<17455=17457,17456
<17460=17461
<17461=17472,17462
<17462=17470,17463
<17463=17468,17464
<17464=17465
<17465=17467,17466
<17468=17469
<17470=17471
<17472=17474,17473
<17474=17476,17475
<17477=17478
<17478=17486,17479
<17479=17484,17482,17480
<17480=17481
<17482=17483
<17484=17485
<17486=17487
<17487=17489,17488
<17489=17491,17490
<17492=17493
<17493=17504,17494
<17494=17495
<17495=17496
<17496=17502,17497
<17497=17500,17498
<17498=17499
<17500=17501
<17502=17503
<17504=17505
<17505=17507,17506
<17507=17509,17508
<17509=17511,17510
<17512=17513
<17513=17517,17514
<17514=17516,17515
<17518=17519
<17519=17523,17520
<17520=17521
<17521=17522
<17523=17524
<17524=17526,17525
<17526=17528,17527
<17529=17530
<17530=17539,17531
<17531=17537,17532
<17532=17535,17533
<17533=17534
<17535=17536
<17537=17538
<17539=17541,17540
<17541=17543,17542
<17544=17545
<17545=17553,17546
<17546=17551,17549,17547
<17547=17548
<17549=17550
<17551=17552
<17553=17554
<17554=17556,17555
<17556=17558,17557
<17559=17560
<17560=17571,17561
<17561=17562
<17562=17563
<17563=17569,17564
<17564=17567,17565
<17565=17566
<17567=17568
<17569=17570
<17571=17572
<17572=17574,17573
<17574=17576,17575
<17576=17578,17577
<17579=17580
<17580=17584,17581
<17581=17582
<17582=17583
<17584=17585
<17585=17587,17586
<17587=17589,17588
<17590=17606,17591
<17591=17592
<17592=17601,17593
<17593=17599,17594
<17594=17597,17595
<17595=17596
<17597=17598
<17599=17600
<17601=17603,17602
<17603=17605,17604
<17606=17607
<17607=17614,17608
<17608=17610,17609
<17610=17611
<17611=17613,17612
<17615=17616
<17616=17627,17617
<17617=17625,17618
<17618=17623,17619
<17619=17620
<17620=17622,17621
<17623=17624
<17625=17626
<17627=17629,17628
<17629=17631,17630
<17632=17633
<17633=17644,17634
<17634=17635
<17635=17636
<17636=17642,17637
<17637=17640,17638
<17638=17639
<17640=17641
<17642=17643
<17644=17645
<17645=17647,17646
<17647=17649,17648
<17649=17651,17650
<17652=17653
<17653=17657,17654
<17654=17655
<17655=17656
<17657=17658
<17658=17660,17659
<17660=17662,17661
<17663=17664
<17664=17679,17665
<17665=17677,17666
<17666=17671,17667
<17667=17668
<17668=17670,17669
<17671=17672
<17672=17676,17673
<17673=17675,17674
<17677=17678
<17679=17681,17680
<17681=17683,17682
<17684=17685
<17685=17696,17686
<17686=17687
<17687=17688
<17688=17694,17689
<17689=17692,17690
<17690=17691
<17692=17693
<17694=17695
<17696=17697
<17697=17699,17698
<17699=17701,17700
<17701=17703,17702
<17704=17705
<17705=17713,17706
<17706=17711,17709,17707
<17707=17708
<17709=17710
<17711=17712
<17713=17714
<17714=17716,17715
<17716=17718,17717
<17719=17720
<17720=17733,17721
<17721=17731,17722
<17722=17727,17723
<17723=17724
<17724=17726,17725
<17727=17728
<17728=17730,17729
<17731=17732
<17733=17735,17734
<17735=17737,17736
<17738=17739
<17739=17747,17740
<17740=17745,17743,17741
<17741=17742
<17743=17744
<17745=17746
<17747=17748
<17748=17750,17749
<17750=17752,17751
<17753=17754
<17754=17765,17755
<17755=17756
<17756=17757
<17757=17763,17758
<17758=17761,17759
<17759=17760
<17761=17762
<17763=17764
<17765=17766
<17766=17768,17767
<17768=17770,17769
<17770=17772,17771
<17773=17774
<17774=17779,17778,17775
<17775=17777,17776
<17780=17781
<17787=17801,17792,17789,17788
<17789=17791,17790
<17792=17793
<17793=17800,17794
<17794=17796,17795
<17796=17797
<17797=17799,17798
<17801=17802
<17802=17804,17803
<17805=17806
<17806=17810,17807
<17807=17808
<17808=17809
<17810=17811
<17811=17813,17812
<17814=17815
<17815=17821,17816
<17816=17819,17817
<17817=17818
<17819=17820
<17821=17822
<17822=17824,17823
<17825=17826
<17826=17832,17827
<17827=17830,17828
<17828=17829
<17830=17831
<17832=17833
<17833=17835,17834
<17836=17837
<17837=17843,17838
<17838=17841,17839
<17839=17840
<17841=17842
<17843=17844
<17845=17846
<17846=17848,17847
<17848=17850,17849
<17851=17852
<17852=17854,17853
<17854=17856,17855
<17857=17858
<17858=17869,17859
<17859=17860
<17860=17861
<17861=17867,17862
<17862=17865,17863
<17863=17864
<17865=17866
<17867=17868
<17869=17870
<17870=17872,17871
<17872=17874,17873
<17875=17876
<17876=17884,17877
<17877=17882,17880,17878
<17878=17879
<17880=17881
<17882=17883
<17884=17885
<17885=17887,17886
<17888=17889
<17889=17893,17890
<17890=17891
<17891=17892
<17893=17894
<17894=17896,17895
<17897=17898
<17898=17911,17899
<17899=17909,17900
<17900=17905,17901
<17901=17902
<17902=17904,17903
<17905=17906
<17906=17908,17907
<17909=17910
<17911=17913,17912
<17914=17915
<17919=17920
<17920=17926,17921
<17921=17924,17922
<17922=17923
<17924=17925
<17926=17927
<17928=17929
<17929=17931,17930
<17931=17933,17932
<17934=17935
<17935=17937,17936
<17937=17939,17938
<17940=17941
<17941=17952,17942
<17942=17943
<17943=17944
<17944=17950,17945
<17945=17948,17946
<17946=17947
<17948=17949
<17950=17951
<17952=17953
<17953=17955,17954
<17955=17957,17956
<17958=17959
<17959=17967,17960
<17960=17965,17963,17961
<17961=17962
<17963=17964
<17965=17966
<17967=17968
<17968=17970,17969
<17971=17972
<17972=17976,17973
<17973=17974
<17974=17975
<17976=17977
<17977=17979,17978
<17980=17981
<17981=17994,17982
<17982=17992,17983
<17983=17988,17984
<17984=17985
<17985=17987,17986
<17988=17989
<17989=17991,17990
<17992=17993
<17994=17996,17995
<17997=17998
<18002=18003
<18003=18009,18004
<18004=18007,18005
<18005=18006
<18007=18008
<18009=18010
<18011=18012
<18012=18014,18013
<18014=18016,18015
<18017=18018
<18018=18020,18019
<18020=18022,18021
<18023=18024
<18024=18028,18025
<18025=18026
<18026=18027
<18028=18029
<18029=18031,18030
<18032=18033
<18033=18044,18034
<18034=18042,18035
<18035=18040,18036
<18036=18037
<18037=18039,18038
<18040=18041
<18042=18043
<18044=18046,18045
<18047=18048
<18052=18053
<18053=18060,18059,18054
<18054=18058,18055
<18055=18057,18056
<18061=18062
<18062=18064,18063
<18065=18066
<18066=18072,18067
<18067=18070,18068
<18068=18069
<18070=18071
<18072=18073
<18074=18075
<18075=18077,18076
<18077=18079,18078
<18080=18081
<18081=18083,18082
<18083=18085,18084
<18086=18087
<18087=18091,18088
<18088=18089
<18089=18090
<18091=18092
<18092=18094,18093
<18095=18096
<18096=18100,18097
<18097=18098
<18098=18099
<18100=18101
<18101=18103,18102
<18104=18105
<18105=18114,18106
<18106=18112,18107
<18107=18110,18108
<18108=18109
<18110=18111
<18112=18113
<18114=18116,18115
<18117=18118
<18118=18122,18119
<18119=18120
<18120=18121
<18122=18123
<18123=18125,18124
<18126=18127
<18127=18133,18128
<18128=18132,18129
<18129=18131,18130
<18134=18135
<18135=18139,18136
<18136=18138,18137
<18140=18141
<18141=18143,18142
<18144=18334,18325,18322,18145
<18145=18316,18309,18291,18159,18146
<18146=18147
<18147=18155,18148
<18148=18151,18149
<18149=18150
<18151=18152
<18152=18154,18153
<18155=18156
<18156=18158,18157
<18159=18280,18226,18160
<18160=18161
<18161=18197,18166,18162
<18162=18163
<18163=18165,18164
<18166=18167
<18167=18192,18168
<18168=18191,18169
<18169=18173,18170
<18170=18172,18171
<18173=18189,18174
<18174=18182,18175
<18175=18176
<18176=18180,18177
<18177=18178
<18178=18179
<18180=18181
<18182=18183
<18183=18187,18184
<18184=18185
<18185=18186
<18187=18188
<18189=18190
<18192=18194,18193
<18194=18196,18195
<18197=18198
<18198=18225,18199
<18199=18201,18200
<18201=18205,18202
<18202=18204,18203
<18205=18219,18206
<18206=18217,18207
<18207=18208
<18208=18209
<18209=18211,18210
<18211=18213,18212
<18213=18214
<18214=18216,18215
<18217=18218
<18219=18223,18220
<18220=18221
<18221=18222
<18223=18224
<18226=18260,18231,18227
<18227=18228
<18228=18230,18229
<18231=18232
<18232=18255,18233
<18233=18254,18234
<18234=18236,18235
<18236=18252,18237
<18237=18245,18238
<18238=18239
<18239=18243,18240
<18240=18241
<18241=18242
<18243=18244
<18245=18246
<18246=18250,18247
<18247=18248
<18248=18249
<18250=18251
<18252=18253
<18255=18257,18256
<18257=18259,18258
<18260=18261
<18261=18279,18262
<18262=18266,18263
<18263=18265,18264
<18266=18273,18267
<18267=18271,18268
<18268=18269
<18269=18270
<18271=18272
<18273=18277,18274
<18274=18275
<18275=18276
<18277=18278
<18280=18281
<18281=18285,18282
<18282=18283
<18283=18284
<18285=18286
<18286=18288,18287
<18288=18290,18289
<18291=18292
<18292=18308,18307,18293
<18293=18306,18294
<18294=18305,18295
<18295=18299,18296
<18296=18297
<18297=18298
<18299=18300
<18300=18302,18301
<18302=18304,18303
<18309=18310
<18310=18315,18314,18311
<18311=18313,18312
<18316=18317
<18317=18319,18318
<18319=18321,18320
<18322=18324,18323
<18325=18326
<18326=18333,18327
<18327=18329,18328
<18329=18330
<18330=18332,18331
<18334=18335
<18335=18337,18336
<18338=18339
<18339=18344,18343,18340
<18340=18342,18341
<18345=18346
<18346=18351,18350,18347
<18347=18349,18348
<18352=18353
<18353=18361,18354
<18354=18357,18355
<18355=18356
<18357=18358
<18358=18360,18359
<18361=18362
<18362=18364,18363
<18365=18366
<18366=18377,18367
<18367=18376,18368
<18368=18374,18369
<18369=18372,18370
<18370=18371
<18372=18373
<18374=18375
<18377=18379,18378
<18379=18381,18380
<18382=18383
<18383=18385,18384
<18385=18387,18386
<18387=18389,18388
<18390=18391
<18391=18397,18392
<18392=18394,18393
<18394=18396,18395
<18397=18399,18398
<18400=18401
<18401=18405,18402
<18402=18403
<18403=18404
<18405=18406
<18406=18408,18407
<18409=18529,18520,18517,18410
<18410=18501,18411
<18411=18499,18412
<18412=18493,18485,18457,18426,18413
<18413=18414
<18414=18422,18415
<18415=18418,18416
<18416=18417
<18418=18419
<18419=18421,18420
<18422=18423
<18423=18425,18424
<18426=18427
<18427=18452,18428
<18428=18451,18429
<18429=18433,18430
<18430=18432,18431
<18433=18449,18434
<18434=18442,18435
<18435=18436
<18436=18440,18437
<18437=18438
<18438=18439
<18440=18441
<18442=18443
<18443=18447,18444
<18444=18445
<18445=18446
<18447=18448
<18449=18450
<18452=18454,18453
<18454=18456,18455
<18457=18458
<18458=18484,18483,18459
<18459=18482,18460
<18460=18464,18461
<18461=18463,18462
<18464=18476,18465
<18465=18474,18466
<18466=18467
<18467=18468
<18468=18470,18469
<18470=18471
<18471=18473,18472
<18474=18475
<18476=18480,18477
<18477=18478
<18478=18479
<18480=18481
<18485=18486
<18486=18488,18487
<18488=18490,18489
<18490=18492,18491
<18493=18494
<18494=18496,18495
<18496=18498,18497
<18499=18500
<18501=18502
<18502=18516,18515,18503
<18503=18514,18504
<18504=18508,18505
<18505=18506
<18506=18507
<18508=18509
<18509=18511,18510
<18511=18513,18512
<18517=18519,18518
<18520=18521
<18521=18528,18522
<18522=18524,18523
<18524=18525
<18525=18527,18526
<18529=18530
<18530=18532,18531
<18533=18534
<18534=18547,18535
<18535=18536
<18536=18537
<18537=18539,18538
<18539=18540
<18540=18542,18541
<18542=18544,18543
<18544=18546,18545
<18547=18548
<18548=18550,18549
<18551=18552
<18552=18560,18553
<18553=18556,18554
<18554=18555
<18556=18557
<18557=18559,18558
<18560=18561
<18562=18563
<18563=18572,18564
<18564=18570,18565
<18565=18568,18566
<18566=18567
<18568=18569
<18570=18571
<18572=18574,18573
<18574=18576,18575
<18577=18578
<18578=18589,18579
<18579=18580
<18580=18581
<18581=18587,18582
<18582=18585,18583
<18583=18584
<18585=18586
<18587=18588
<18589=18590
<18590=18592,18591
<18592=18594,18593
<18594=18596,18595
<18597=18598
<18598=18600,18599
<18600=18602,18601
<18602=18604,18603
<18605=18606
<18606=18617,18607
<18607=18615,18608
<18608=18611,18609
<18609=18610
<18611=18612
<18612=18614,18613
<18615=18616
<18617=18619,18618
<18619=18621,18620
<18622=18623
<18623=18631,18624
<18624=18629,18627,18625
<18625=18626
<18627=18628
<18629=18630
<18631=18632
<18632=18634,18633
<18634=18636,18635
<18637=18638
<18638=18642,18639
<18639=18640
<18640=18641
<18642=18643
<18643=18645,18644
<18645=18647,18646
<18648=18649
<18649=18653,18650
<18650=18651
<18651=18652
<18653=18654
<18654=18656,18655
<18656=18658,18657
<18659=18660
<18666=18667
<18667=18675,18668
<18668=18671,18669
<18669=18670
<18671=18672
<18672=18674,18673
<18675=18676
<18677=18678
<18678=18687,18679
<18679=18685,18680
<18680=18683,18681
<18681=18682
<18683=18684
<18685=18686
<18687=18689,18688
<18689=18691,18690
<18692=18693
<18693=18704,18694
<18694=18695
<18695=18696
<18696=18702,18697
<18697=18700,18698
<18698=18699
<18700=18701
<18702=18703
<18704=18705
<18705=18707,18706
<18707=18709,18708
<18709=18711,18710
<18712=18713
<18713=18715,18714
<18715=18717,18716
<18717=18719,18718
<18720=18721
<18721=18732,18722
<18722=18730,18723
<18723=18726,18724
<18724=18725
<18726=18727
<18727=18729,18728
<18730=18731
<18732=18734,18733
<18734=18736,18735
<18737=18738
<18738=18746,18739
<18739=18744,18742,18740
<18740=18741
<18742=18743
<18744=18745
<18746=18747
<18747=18749,18748
<18749=18751,18750
<18752=18753
<18753=18757,18754
<18754=18755
<18755=18756
<18757=18758
<18758=18760,18759
<18760=18762,18761
<18763=18764
<18764=18768,18765
<18765=18766
<18766=18767
<18768=18769
<18769=18771,18770
<18771=18773,18772
<18774=18775
<18781=18782
<18782=18790,18783
<18783=18786,18784
<18784=18785
<18786=18787
<18787=18789,18788
<18790=18791
<18792=18793
<18793=18795,18794
<18795=18797,18796
<18797=18799,18798
<18800=18801
<18801=18816,18802
<18802=18803
<18803=18804
<18804=18808,18805
<18805=18806
<18806=18807
<18808=18809
<18809=18811,18810
<18811=18813,18812
<18813=18815,18814
<18816=18817
<18817=18819,18818
<18819=18821,18820
<18822=18823
<18823=18832,18824
<18824=18830,18825
<18825=18828,18826
<18826=18827
<18828=18829
<18830=18831
<18832=18834,18833
<18834=18836,18835
<18837=18838
<18838=18840,18839
<18840=18842,18841
<18842=18844,18843
<18845=18846
<18846=18848,18847
<18848=18850,18849
<18850=18852,18851
<18853=18854
<18854=18860,18855
<18855=18859,18856
<18856=18858,18857
<18860=18862,18861
<18863=18864
<18864=18872,18865
<18865=18868,18866
<18866=18867
<18868=18869
<18869=18871,18870
<18872=18873
<18874=18875
<18875=18884,18876
<18876=18882,18877
<18877=18880,18878
<18878=18879
<18880=18881
<18882=18883
<18884=18886,18885
<18886=18888,18887
<18889=18890
<18890=18892,18891
<18892=18894,18893
<18894=18896,18895
<18897=18898
<18898=18913,18899
<18899=18900
<18900=18901
<18901=18905,18902
<18902=18903
<18903=18904
<18905=18906
<18906=18908,18907
<18908=18910,18909
<18910=18912,18911
<18913=18914
<18914=18916,18915
<18916=18918,18917
<18919=18920
<18920=18922,18921
<18922=18924,18923
<18924=18926,18925
<18927=18928
<18928=18930,18929
<18930=18932,18931
<18932=18934,18933
<18935=18936
<18936=18942,18937
<18937=18941,18938
<18938=18940,18939
<18942=18944,18943
<18945=18946
<18946=18954,18947
<18947=18950,18948
<18948=18949
<18950=18951
<18951=18953,18952
<18954=18955
<18956=18957
<18957=18959,18958
<18959=18961,18960
<18961=18963,18962
<18964=18965
<18965=18967,18966
<18967=18969,18968
<18969=18971,18970
<18972=18973
<18973=18984,18974
<18974=18983,18975
<18975=18981,18976
<18976=18979,18977
<18977=18978
<18979=18980
<18981=18982
<18984=18986,18985
<18987=18988
<18988=18996,18989
<18989=18992,18990
<18990=18991
<18992=18993
<18993=18995,18994
<18996=18997
<18998=18999
<18999=19001,19000
<19001=19003,19002
<19003=19005,19004
<19006=19007
<19007=19009,19008
<19009=19011,19010
<19011=19013,19012
<19014=19015
<19015=19026,19016
<19016=19025,19017
<19017=19023,19018
<19018=19021,19019
<19019=19020
<19021=19022
<19023=19024
<19026=19028,19027
<19029=19030
<19030=19035,19034,19031
<19031=19033,19032
<19036=19037
<19037=19043,19038
<19038=19041,19039
<19039=19040
<19041=19042
<19043=19044
<19045=19046
<19046=19055,19047
<19047=19053,19048
<19048=19051,19049
<19049=19050
<19051=19052
<19053=19054
<19055=19057,19056
<19058=19059
<19059=19061,19060
<19061=19063,19062
<19064=19065
<19065=19067,19066
<19068=19069
<19069=19075,19070
<19070=19073,19071
<19071=19072
<19073=19074
<19075=19076
<19077=19078
<19078=19080,19079
<19080=19082,19081
<19083=19084
<19084=19105,19085
<19085=19096,19094,19090,19088,19086
<19086=19087
<19088=19089
<19090=19091
<19091=19093,19092
<19094=19095
<19096=19097
<19097=19103,19098
<19098=19101,19099
<19099=19100
<19101=19102
<19103=19104
<19105=19106
<19106=19108,19107
<19108=19110,19109
<19111=19112
<19112=19121,19113
<19113=19119,19114
<19114=19117,19115
<19115=19116
<19117=19118
<19119=19120
<19121=19123,19122
<19124=19125
<19125=19127,19126
<19127=19129,19128
<19130=19131
<19131=19133,19132
<19133=19135,19134
<19136=19137
<19137=19139,19138
<19139=19141,19140
<19142=19143
<19147=19249,19240,19237,19148
<19148=19231,19223,19195,19166,19162,19149
<19149=19150
<19150=19158,19151
<19151=19154,19152
<19152=19153
<19154=19155
<19155=19157,19156
<19158=19159
<19159=19161,19160
<19162=19163
<19163=19165,19164
<19166=19167
<19167=19190,19168
<19168=19189,19169
<19169=19171,19170
<19171=19187,19172
<19172=19180,19173
<19173=19174
<19174=19178,19175
<19175=19176
<19176=19177
<19178=19179
<19180=19181
<19181=19185,19182
<19182=19183
<19183=19184
<19185=19186
<19187=19188
<19190=19192,19191
<19192=19194,19193
<19195=19196
<19196=19222,19221,19197
<19197=19220,19198
<19198=19202,19199
<19199=19201,19200
<19202=19214,19203
<19203=19212,19204
<19204=19205
<19205=19206
<19206=19208,19207
<19208=19209
<19209=19211,19210
<19212=19213
<19214=19218,19215
<19215=19216
<19216=19217
<19218=19219
<19223=19224
<19224=19226,19225
<19226=19228,19227
<19228=19230,19229
<19231=19232
<19232=19234,19233
<19234=19236,19235
<19237=19239,19238
<19240=19241
<19241=19248,19242
<19242=19244,19243
<19244=19245
<19245=19247,19246
<19249=19250
<19250=19252,19251
<19253=19254
<19254=19259,19258,19255
<19255=19257,19256
<19260=19261
<19261=19265,19262
<19262=19263
<19263=19264
<19265=19266
<19266=19268,19267
<19269=19270
<19270=19276,19271
<19271=19274,19272
<19272=19273
<19274=19275
<19276=19277
<19278=19279
<19279=19281,19280
<19281=19283,19282
<19284=19285
<19285=19287,19286
<19287=19289,19288
<19290=19291
<19291=19304,19292
<19292=19303,19293
<19293=19301,19294
<19294=19299,19295
<19295=19296
<19296=19298,19297
<19299=19300
<19301=19302
<19304=19306,19305
<19307=19308
<19308=19319,19309
<19309=19317,19310
<19310=19315,19313,19311
<19311=19312
<19313=19314
<19315=19316
<19317=19318
<19319=19321,19320
<19322=19323
<19323=19329,19324
<19324=19328,19325
<19325=19327,19326
<19330=19331
<19331=19337,19332
<19332=19335,19333
<19333=19334
<19335=19336
<19337=19338
<19339=19340
<19340=19344,19341
<19341=19342
<19342=19343
<19344=19345
<19345=19347,19346
<19348=19349
<19349=19360,19350
<19350=19351
<19351=19352
<19352=19358,19353
<19353=19356,19354
<19354=19355
<19356=19357
<19358=19359
<19360=19361
<19361=19363,19362
<19363=19365,19364
<19366=19367
<19367=19376,19368
<19368=19374,19369
<19369=19372,19370
<19370=19371
<19372=19373
<19374=19375
<19376=19378,19377
<19379=19380
<19380=19382,19381
<19382=19384,19383
<19385=19386
<19386=19399,19387
<19387=19398,19388
<19388=19396,19389
<19389=19394,19390
<19390=19391
<19391=19393,19392
<19394=19395
<19396=19397
<19399=19401,19400
<19402=19403
<19403=19411,19404
<19404=19409,19407,19405
<19405=19406
<19407=19408
<19409=19410
<19411=19412
<19412=19414,19413
<19415=19416
<19416=19420,19417
<19417=19418
<19418=19419
<19420=19421
<19421=19423,19422
<19424=19425
<19425=19429,19426
<19426=19427
<19427=19428
<19429=19430
<19430=19432,19431
<19433=19434
<19438=19439
<19439=19445,19440
<19440=19443,19441
<19441=19442
<19443=19444
<19445=19446
<19447=19448
<19448=19452,19449
<19449=19450
<19450=19451
<19452=19453
<19453=19455,19454
<19456=19457
<19457=19468,19458
<19458=19459
<19459=19460
<19460=19466,19461
<19461=19464,19462
<19462=19463
<19464=19465
<19466=19467
<19468=19469
<19469=19471,19470
<19471=19473,19472
<19474=19475
<19475=19484,19476
<19476=19482,19477
<19477=19480,19478
<19478=19479
<19480=19481
<19482=19483
<19484=19486,19485
<19487=19488
<19488=19492,19489
<19489=19490
<19490=19491
<19492=19493
<19493=19495,19494
<19496=19497
<19497=19499,19498
<19499=19501,19500
<19502=19503
<19503=19518,19504
<19504=19517,19505
<19505=19515,19506
<19506=19511,19507
<19507=19508
<19508=19510,19509
<19511=19512
<19512=19514,19513
<19515=19516
<19518=19520,19519
<19521=19522
<19522=19530,19523
<19523=19528,19526,19524
<19524=19525
<19526=19527
<19528=19529
<19530=19531
<19531=19533,19532
<19534=19535
<19535=19539,19536
<19536=19537
<19537=19538
<19539=19540
<19540=19542,19541
<19543=19544
<19544=19548,19545
<19545=19546
<19546=19547
<19548=19549
<19549=19551,19550
<19552=19553
<19557=19558
<19558=19564,19559
<19559=19562,19560
<19560=19561
<19562=19563
<19564=19565
<19566=19567
<19567=19576,19568
<19568=19574,19569
<19569=19572,19570
<19570=19571
<19572=19573
<19574=19575
<19576=19578,19577
<19579=19580
<19580=19591,19581
<19581=19582
<19582=19583
<19583=19589,19584
<19584=19587,19585
<19585=19586
<19587=19588
<19589=19590
<19591=19592
<19592=19594,19593
<19594=19596,19595
<19597=19598
<19598=19602,19599
<19599=19600
<19600=19601
<19602=19603
<19603=19605,19604
<19606=19607
<19607=19609,19608
<19609=19611,19610
<19612=19613
<19613=19626,19614
<19614=19625,19615
<19615=19623,19616
<19616=19621,19617
<19617=19618
<19618=19620,19619
<19621=19622
<19623=19624
<19626=19628,19627
<19629=19630
<19630=19638,19631
<19631=19636,19634,19632
<19632=19633
<19634=19635
<19636=19637
<19638=19639
<19639=19641,19640
<19642=19643
<19643=19647,19644
<19644=19645
<19645=19646
<19647=19648
<19648=19650,19649
<19651=19652
<19652=19656,19653
<19653=19654
<19654=19655
<19656=19657
<19657=19659,19658
<19660=19661
<19665=19666
<19666=19672,19667
<19667=19670,19668
<19668=19669
<19670=19671
<19672=19673
<19674=19675
<19675=19679,19676
<19676=19677
<19677=19678
<19679=19680
<19680=19682,19681
<19683=19684
<19684=19693,19685
<19685=19691,19686
<19686=19689,19687
<19687=19688
<19689=19690
<19691=19692
<19693=19695,19694
<19696=19697
<19697=19708,19698
<19698=19699
<19699=19700
<19700=19706,19701
<19701=19704,19702
<19702=19703
<19704=19705
<19706=19707
<19708=19709
<19709=19711,19710
<19711=19713,19712
<19714=19715
<19715=19717,19716
<19717=19719,19718
<19720=19721
<19721=19736,19722
<19722=19735,19723
<19723=19733,19724
<19724=19729,19725
<19725=19726
<19726=19728,19727
<19729=19730
<19730=19732,19731
<19733=19734
<19736=19738,19737
<19739=19740
<19740=19748,19741
<19741=19746,19744,19742
<19742=19743
<19744=19745
<19746=19747
<19748=19749
<19749=19751,19750
<19752=19753
<19753=19757,19754
<19754=19755
<19755=19756
<19757=19758
<19758=19760,19759
<19761=19762
<19762=19766,19763
<19763=19764
<19764=19765
<19766=19767
<19767=19769,19768
<19770=19771
<19775=19776
<19776=19782,19777
<19777=19780,19778
<19778=19779
<19780=19781
<19782=19783
<19784=19785
<19785=19796,19786
<19786=19787
<19787=19788
<19788=19794,19789
<19789=19792,19790
<19790=19791
<19792=19793
<19794=19795
<19796=19797
<19797=19799,19798
<19799=19801,19800
<19802=19803
<19803=19812,19804
<19804=19810,19805
<19805=19808,19806
<19806=19807
<19808=19809
<19810=19811
<19812=19814,19813
<19815=19816
<19816=19818,19817
<19818=19820,19819
<19821=19822
<19822=19835,19823
<19823=19834,19824
<19824=19832,19825
<19825=19830,19826
<19826=19827
<19827=19829,19828
<19830=19831
<19832=19833
<19835=19837,19836
<19838=19839
<19839=19847,19840
<19840=19845,19843,19841
<19841=19842
<19843=19844
<19845=19846
<19847=19848
<19848=19850,19849
<19851=19852
<19852=19856,19853
<19853=19854
<19854=19855
<19856=19857
<19857=19859,19858
<19860=19861
<19865=19866
<19866=19872,19867
<19867=19870,19868
<19868=19869
<19870=19871
<19872=19873
<19874=19875
<19875=19886,19876
<19876=19877
<19877=19878
<19878=19884,19879
<19879=19882,19880
<19880=19881
<19882=19883
<19884=19885
<19886=19887
<19887=19889,19888
<19889=19891,19890
<19892=19893
<19893=19902,19894
<19894=19900,19895
<19895=19898,19896
<19896=19897
<19898=19899
<19900=19901
<19902=19904,19903
<19905=19906
<19906=19908,19907
<19908=19910,19909
<19911=19912
<19912=19925,19913
<19913=19924,19914
<19914=19922,19915
<19915=19918,19916
<19916=19917
<19918=19919
<19919=19921,19920
<19922=19923
<19925=19927,19926
<19928=19929
<19929=19937,19930
<19930=19935,19933,19931
<19931=19932
<19933=19934
<19935=19936
<19937=19938
<19938=19940,19939
<19941=19942
<19942=19946,19943
<19943=19944
<19944=19945
<19946=19947
<19947=19949,19948
<19950=19951
<19955=19956
<19956=19962,19957
<19957=19960,19958
<19958=19959
<19960=19961
<19962=19963
<19964=19965
<19965=19967,19966
<19967=19969,19968
<19970=19971
<19971=19982,19972
<19972=19973
<19973=19974
<19974=19980,19975
<19975=19978,19976
<19976=19977
<19978=19979
<19980=19981
<19982=19983
<19983=19985,19984
<19985=19987,19986
<19988=19989
<19989=20004,19990
<19990=20003,19991
<19991=20001,19992
<19992=19997,19993
<19993=19994
<19994=19996,19995
<19997=19998
<19998=20000,19999
<20001=20002
<20004=20006,20005
<20007=20008
<20008=20016,20009
<20009=20014,20012,20010
<20010=20011
<20012=20013
<20014=20015
<20016=20017
<20017=20019,20018
<20020=20021
<20021=20025,20022
<20022=20023
<20023=20024
<20025=20026
<20026=20028,20027
<20029=20030
<20030=20034,20031
<20031=20032
<20032=20033
<20034=20035
<20035=20037,20036
<20038=20039
<20043=20044
<20044=20050,20045
<20045=20048,20046
<20046=20047
<20048=20049
<20050=20051
<20052=20053
<20053=20057,20054
<20054=20055
<20055=20056
<20057=20058
<20058=20060,20059
<20061=20062
<20062=20073,20063
<20063=20064
<20064=20065
<20065=20071,20066
<20066=20069,20067
<20067=20068
<20069=20070
<20071=20072
<20073=20074
<20074=20076,20075
<20076=20078,20077
<20079=20080
<20080=20089,20081
<20081=20087,20082
<20082=20085,20083
<20083=20084
<20085=20086
<20087=20088
<20089=20091,20090
<20092=20093
<20093=20095,20094
<20095=20097,20096
<20098=20099
<20099=20112,20100
<20100=20111,20101
<20101=20109,20102
<20102=20107,20103
<20103=20104
<20104=20106,20105
<20107=20108
<20109=20110
<20112=20114,20113
<20115=20116
<20116=20124,20117
<20117=20122,20120,20118
<20118=20119
<20120=20121
<20122=20123
<20124=20125
<20125=20127,20126
<20128=20129
<20129=20133,20130
<20130=20131
<20131=20132
<20133=20134
<20134=20136,20135
<20137=20138
<20142=20143
<20143=20149,20144
<20144=20147,20145
<20145=20146
<20147=20148
<20149=20150
<20151=20152
<20152=20163,20153
<20153=20161,20154
<20154=20159,20155
<20155=20156
<20156=20158,20157
<20159=20160
<20161=20162
<20163=20165,20164
<20166=20167
<20167=20171,20168
<20168=20169
<20169=20170
<20171=20172
<20172=20174,20173
<20175=20176
<20176=20178,20177
<20178=20180,20179
<20181=20182
<20182=20184,20183
<20184=20186,20185
<20187=20188
<20188=20190,20189
<20190=20192,20191
<20195=20196
<20196=20213,20197
<20197=20211,20204,20202,20198
<20198=20199
<20199=20201,20200
<20202=20203
<20204=20205
<20205=20209,20206
<20206=20207
<20207=20208
<20209=20210
<20211=20212
<20213=20214
<20215=20216
<20216=20233,20217
<20217=20231,20224,20222,20218
<20218=20219
<20219=20221,20220
<20222=20223
<20224=20225
<20225=20229,20226
<20226=20227
<20227=20228
<20229=20230
<20231=20232
<20233=20234
<20235=20236
<20236=20253,20237
<20237=20251,20244,20242,20238
<20238=20239
<20239=20241,20240
<20242=20243
<20244=20245
<20245=20249,20246
<20246=20247
<20247=20248
<20249=20250
<20251=20252
<20253=20254
<20255=20256
<20256=20273,20257
<20257=20271,20264,20262,20258
<20258=20259
<20259=20261,20260
<20262=20263
<20264=20265
<20265=20269,20266
<20266=20267
<20267=20268
<20269=20270
<20271=20272
<20273=20274
<20275=20276
<20276=20293,20277
<20277=20291,20284,20282,20278
<20278=20279
<20279=20281,20280
<20282=20283
<20284=20285
<20285=20289,20286
<20286=20287
<20287=20288
<20289=20290
<20291=20292
<20293=20294
<20295=20296
<20296=20313,20297
<20297=20311,20304,20302,20298
<20298=20299
<20299=20301,20300
<20302=20303
<20304=20305
<20305=20309,20306
<20306=20307
<20307=20308
<20309=20310
<20311=20312
<20313=20314
<20315=20316
<20316=20333,20317
<20317=20331,20324,20322,20318
<20318=20319
<20319=20321,20320
<20322=20323
<20324=20325
<20325=20329,20326
<20326=20327
<20327=20328
<20329=20330
<20331=20332
<20333=20334
<20335=20336
<20336=20353,20337
<20337=20351,20344,20342,20338
<20338=20339
<20339=20341,20340
<20342=20343
<20344=20345
<20345=20349,20346
<20346=20347
<20347=20348
<20349=20350
<20351=20352
<20353=20354
<20355=20356
<20356=20358,20357
<20359=20360
<20360=20366,20361
<20361=20364,20362
<20362=20363
<20364=20365
<20366=20367
<20367=20369,20368
<20370=20371
<20371=20377,20372
<20372=20375,20373
<20373=20374
<20375=20376
<20377=20378
<20378=20380,20379
<20381=20382
<20382=20388,20383
<20383=20386,20384
<20384=20385
<20386=20387
<20388=20389
<20389=20391,20390
<20392=20393
<20393=20399,20394
<20394=20397,20395
<20395=20396
<20397=20398
<20399=20400
<20400=20402,20401
<20403=20404
<20404=20410,20405
<20405=20408,20406
<20406=20407
<20408=20409
<20410=20411
<20411=20413,20412
<20414=20415
<20415=20421,20416
<20416=20419,20417
<20417=20418
<20419=20420
<20421=20422
<20422=20424,20423
<20425=20426
<20426=20432,20427
<20427=20430,20428
<20428=20429
<20430=20431
<20432=20433
<20433=20435,20434
<20436=20437
<20437=20443,20438
<20438=20441,20439
<20439=20440
<20441=20442
<20443=20444
<20444=20446,20445
<20447=20448
<20448=20473,20472,20449
<20449=20471,20450
<20450=20469,20451
<20451=20467,20460,20458,20454,20452
<20452=20453
<20454=20455
<20455=20457,20456
<20458=20459
<20460=20461
<20461=20465,20462
<20462=20463
<20463=20464
<20465=20466
<20467=20468
<20469=20470
<20474=20475
<20475=20500,20499,20476
<20476=20498,20477
<20477=20496,20478
<20478=20494,20487,20485,20481,20479
<20479=20480
<20481=20482
<20482=20484,20483
<20485=20486
<20487=20488
<20488=20492,20489
<20489=20490
<20490=20491
<20492=20493
<20494=20495
<20496=20497
<20501=20502
<20502=20527,20526,20503
<20503=20525,20504
<20504=20523,20505
<20505=20521,20514,20512,20508,20506
<20506=20507
<20508=20509
<20509=20511,20510
<20512=20513
<20514=20515
<20515=20519,20516
<20516=20517
<20517=20518
<20519=20520
<20521=20522
<20523=20524
<20528=20529
<20529=20554,20553,20530
<20530=20552,20531
<20531=20550,20532
<20532=20548,20541,20539,20535,20533
<20533=20534
<20535=20536
<20536=20538,20537
<20539=20540
<20541=20542
<20542=20546,20543
<20543=20544
<20544=20545
<20546=20547
<20548=20549
<20550=20551
<20555=20556
<20556=20579,20557
<20557=20577,20570,20568,20564,20562,20560,20558
<20558=20559
<20560=20561
<20562=20563
<20564=20565
<20565=20567,20566
<20568=20569
<20570=20571
<20571=20575,20572
<20572=20573
<20573=20574
<20575=20576
<20577=20578
<20579=20580
<20581=20582
<20582=20599,20583
<20583=20597,20590,20588,20584
<20584=20585
<20585=20587,20586
<20588=20589
<20590=20591
<20591=20595,20592
<20592=20593
<20593=20594
<20595=20596
<20597=20598
<20599=20600
<20601=20602
<20602=20619,20603
<20603=20617,20610,20608,20604
<20604=20605
<20605=20607,20606
<20608=20609
<20610=20611
<20611=20615,20612
<20612=20613
<20613=20614
<20615=20616
<20617=20618
<20619=20620
<20621=20622
<20622=20639,20623
<20623=20637,20630,20628,20624
<20624=20625
<20625=20627,20626
<20628=20629
<20630=20631
<20631=20635,20632
<20632=20633
<20633=20634
<20635=20636
<20637=20638
<20639=20640
<20641=20642
<20642=20659,20643
<20643=20657,20650,20648,20644
<20644=20645
<20645=20647,20646
<20648=20649
<20650=20651
<20651=20655,20652
<20652=20653
<20653=20654
<20655=20656
<20657=20658
<20659=20660
<20661=20662
<20662=20679,20663
<20663=20677,20670,20668,20664
<20664=20665
<20665=20667,20666
<20668=20669
<20670=20671
<20671=20675,20672
<20672=20673
<20673=20674
<20675=20676
<20677=20678
<20679=20680
<20681=20682
<20682=20699,20683
<20683=20697,20690,20688,20684
<20684=20685
<20685=20687,20686
<20688=20689
<20690=20691
<20691=20695,20692
<20692=20693
<20693=20694
<20695=20696
<20697=20698
<20699=20700
<20701=20702
<20702=20719,20703
<20703=20717,20710,20708,20704
<20704=20705
<20705=20707,20706
<20708=20709
<20710=20711
<20711=20715,20712
<20712=20713
<20713=20714
<20715=20716
<20717=20718
<20719=20720
<20721=20722
<20722=20739,20723
<20723=20737,20730,20728,20724
<20724=20725
<20725=20727,20726
<20728=20729
<20730=20731
<20731=20735,20732
<20732=20733
<20733=20734
<20735=20736
<20737=20738
<20739=20740
<20741=20742
<20742=20759,20743
<20743=20757,20750,20748,20744
<20744=20745
<20745=20747,20746
<20748=20749
<20750=20751
<20751=20755,20752
<20752=20753
<20753=20754
<20755=20756
<20757=20758
<20759=20760
<20761=20762
<20762=20785,20763
<20763=20783,20776,20774,20770,20768,20766,20764
<20764=20765
<20766=20767
<20768=20769
<20770=20771
<20771=20773,20772
<20774=20775
<20776=20777
<20777=20781,20778
<20778=20779
<20779=20780
<20781=20782
<20783=20784
<20785=20786
<20787=20788
<20788=20811,20789
<20789=20809,20802,20800,20796,20794,20792,20790
<20790=20791
<20792=20793
<20794=20795
<20796=20797
<20797=20799,20798
<20800=20801
<20802=20803
<20803=20807,20804
<20804=20805
<20805=20806
<20807=20808
<20809=20810
<20811=20812
<20813=20814
<20814=20820,20815
<20815=20818,20816
<20816=20817
<20818=20819
<20820=20821
<20821=20823,20822
<20824=20825
<20825=20829,20826
<20826=20827
<20827=20828
<20829=20830
<20830=20832,20831
<20833=20834
<20834=20845,20835
<20835=20843,20836
<20836=20841,20837
<20837=20838
<20838=20840,20839
<20841=20842
<20843=20844
<20845=20847,20846
<20848=20849
<20849=20858,20850
<20850=20851
<20851=20852
<20852=20856,20853
<20853=20854
<20854=20855
<20856=20857
<20858=20859
<20859=20861,20860
<20862=20863
<20863=20872,20871,20864
<20864=20870,20865
<20865=20869,20866
<20866=20868,20867
<20873=20874
<20874=20880,20875
<20875=20878,20876
<20876=20877
<20878=20879
<20880=20881
<20881=20883,20882
<20884=20885
<20885=20889,20886
<20886=20887
<20887=20888
<20889=20890
<20890=20892,20891
<20893=20894
<20894=20905,20895
<20895=20903,20896
<20896=20901,20897
<20897=20898
<20898=20900,20899
<20901=20902
<20903=20904
<20905=20907,20906
<20908=20909
<20909=20918,20910
<20910=20911
<20911=20912
<20912=20916,20913
<20913=20914
<20914=20915
<20916=20917
<20918=20919
<20919=20921,20920
<20922=20923
<20923=20932,20931,20924
<20924=20930,20925
<20925=20929,20926
<20926=20928,20927
<20933=20934
<20934=20940,20935
<20935=20938,20936
<20936=20937
<20938=20939
<20940=20941
<20941=20943,20942
<20944=20945
<20945=20949,20946
<20946=20947
<20947=20948
<20949=20950
<20950=20952,20951
<20953=20954
<20954=20965,20955
<20955=20963,20956
<20956=20961,20957
<20957=20958
<20958=20960,20959
<20961=20962
<20963=20964
<20965=20967,20966
<20968=20969
<20969=20978,20970
<20970=20971
<20971=20972
<20972=20976,20973
<20973=20974
<20974=20975
<20976=20977
<20978=20979
<20979=20981,20980
<20982=20983
<20983=20992,20991,20984
<20984=20990,20985
<20985=20989,20986
<20986=20988,20987
<20993=20994
<20994=21000,20995
<20995=20998,20996
<20996=20997
<20998=20999
<21000=21001
<21001=21003,21002
<21004=21005
<21005=21016,21006
<21006=21014,21007
<21007=21012,21008
<21008=21009
<21009=21011,21010
<21012=21013
<21014=21015
<21016=21018,21017
<21019=21020
<21020=21029,21021
<21021=21022
<21022=21023
<21023=21027,21024
<21024=21025
<21025=21026
<21027=21028
<21029=21030
<21030=21032,21031
<21033=21034
<21034=21040,21035
<21035=21039,21036
<21036=21038,21037
<21040=21042,21041
<21042=21044,21043
<21057=21058
<21058=21065,21064,21059
<21059=21063,21060
<21060=21062,21061
<21066=21067
<21067=21073,21068
<21068=21071,21069
<21069=21070
<21071=21072
<21073=21074
<21074=21076,21075
<21077=21078
<21078=21086,21079
<21079=21084,21082,21080
<21080=21081
<21082=21083
<21084=21085
<21086=21087
<21087=21089,21088
<21090=21091
<21091=21102,21092
<21092=21100,21093
<21093=21098,21094
<21094=21095
<21095=21097,21096
<21098=21099
<21100=21101
<21102=21104,21103
<21105=21106
<21106=21111,21110,21107
<21107=21109,21108
<21112=21113
<21117=21118
<21118=21124,21119
<21119=21122,21120
<21120=21121
<21122=21123
<21124=21125
<21126=21127
<21127=21138,21128
<21128=21129
<21129=21130
<21130=21136,21131
<21131=21134,21132
<21132=21133
<21134=21135
<21136=21137
<21138=21139
<21139=21141,21140
<21141=21143,21142
<21144=21145
<21145=21154,21146
<21146=21152,21147
<21147=21150,21148
<21148=21149
<21150=21151
<21152=21153
<21154=21156,21155
<21157=21158
<21158=21160,21159
<21160=21162,21161
<21163=21164
<21164=21175,21165
<21165=21174,21166
<21166=21172,21167
<21167=21170,21168
<21168=21169
<21170=21171
<21172=21173
<21175=21177,21176
<21178=21179
<21179=21187,21180
<21180=21185,21183,21181
<21181=21182
<21183=21184
<21185=21186
<21187=21188
<21188=21190,21189
<21191=21192
<21192=21196,21193
<21193=21194
<21194=21195
<21196=21197
<21197=21199,21198
<21200=21201
<21205=21206
<21206=21211,21210,21207
<21207=21209,21208
<21212=21213
<21213=21218,21217,21214
<21214=21216,21215
<21219=21220
<21220=21224,21221
<21221=21222
<21222=21223
<21224=21225
<21225=21227,21226
<21228=21229
<21229=21233,21230
<21230=21231
<21231=21232
<21233=21234
<21234=21236,21235
<21237=21238
<21238=21242,21239
<21239=21240
<21240=21241
<21242=21243
<21243=21245,21244
<21246=21247
<21247=21251,21248
<21248=21249
<21249=21250
<21251=21252
<21252=21254,21253
<21255=21256
<21256=21262,21257
<21257=21260,21258
<21258=21259
<21260=21261
<21262=21263
<21264=21265
<21265=21291,21266
<21266=21278,21269,21267
<21267=21268
<21269=21270
<21270=21276,21271
<21271=21274,21272
<21272=21273
<21274=21275
<21276=21277
<21278=21279
<21279=21283,21280
<21280=21281
<21281=21282
<21283=21284
<21284=21286,21285
<21286=21288,21287
<21288=21290,21289
<21291=21292
<21292=21294,21293
<21295=21296
<21296=21311,21297
<21297=21302,21300,21298
<21298=21299
<21300=21301
<21302=21303
<21303=21309,21304
<21304=21307,21305
<21305=21306
<21307=21308
<21309=21310
<21311=21312
<21312=21314,21313
<21315=21316
<21316=21318,21317
<21318=21320,21319
<21321=21322
<21326=21327
<21327=21331,21328
<21328=21329
<21329=21330
<21331=21332
<21332=21334,21333
<21335=21336
<21336=21342,21337
<21337=21340,21338
<21338=21339
<21340=21341
<21342=21343
<21344=21345
<21345=21371,21346
<21346=21358,21349,21347
<21347=21348
<21349=21350
<21350=21356,21351
<21351=21354,21352
<21352=21353
<21354=21355
<21356=21357
<21358=21359
<21359=21363,21360
<21360=21361
<21361=21362
<21363=21364
<21364=21366,21365
<21366=21368,21367
<21368=21370,21369
<21371=21372
<21372=21374,21373
<21375=21376
<21376=21382,21377
<21377=21380,21378
<21378=21379
<21380=21381
<21382=21383
<21383=21385,21384
<21386=21387
<21387=21389,21388
<21389=21391,21390
<21392=21393
<21397=21398
<21398=21402,21399
<21399=21400
<21400=21401
<21402=21403
<21403=21405,21404
<21406=21407
<21407=21413,21408
<21408=21411,21409
<21409=21410
<21411=21412
<21413=21414
<21415=21416
<21416=21442,21417
<21417=21429,21420,21418
<21418=21419
<21420=21421
<21421=21427,21422
<21422=21425,21423
<21423=21424
<21425=21426
<21427=21428
<21429=21430
<21430=21434,21431
<21431=21432
<21432=21433
<21434=21435
<21435=21437,21436
<21437=21439,21438
<21439=21441,21440
<21442=21443
<21443=21445,21444
<21446=21447
<21447=21453,21448
<21448=21451,21449
<21449=21450
<21451=21452
<21453=21454
<21454=21456,21455
<21457=21458
<21458=21460,21459
<21460=21462,21461
<21463=21464
<21468=21469
<21469=21473,21470
<21470=21471
<21471=21472
<21473=21474
<21474=21476,21475
<21477=21478
<21478=21484,21479
<21479=21482,21480
<21480=21481
<21482=21483
<21484=21485
<21486=21487
<21487=21513,21488
<21488=21500,21491,21489
<21489=21490
<21491=21492
<21492=21498,21493
<21493=21496,21494
<21494=21495
<21496=21497
<21498=21499
<21500=21501
<21501=21505,21502
<21502=21503
<21503=21504
<21505=21506
<21506=21508,21507
<21508=21510,21509
<21510=21512,21511
<21513=21514
<21514=21516,21515
<21517=21518
<21518=21524,21519
<21519=21522,21520
<21520=21521
<21522=21523
<21524=21525
<21525=21527,21526
<21528=21529
<21529=21531,21530
<21531=21533,21532
<21534=21535
<21539=21540
<21540=21544,21541
<21541=21542
<21542=21543
<21544=21545
<21545=21547,21546
<21548=21549
<21549=21555,21550
<21550=21553,21551
<21551=21552
<21553=21554
<21555=21556
<21557=21558
<21558=21584,21559
<21559=21571,21562,21560
<21560=21561
<21562=21563
<21563=21569,21564
<21564=21567,21565
<21565=21566
<21567=21568
<21569=21570
<21571=21572
<21572=21576,21573
<21573=21574
<21574=21575
<21576=21577
<21577=21579,21578
<21579=21581,21580
<21581=21583,21582
<21584=21585
<21585=21587,21586
<21588=21589
<21589=21595,21590
<21590=21593,21591
<21591=21592
<21593=21594
<21595=21596
<21596=21598,21597
<21599=21600
<21600=21602,21601
<21602=21604,21603
<21605=21606
<21610=21611
<21611=21613,21612
<21613=21614
<21614=21616,21615
<21617=21618
<21618=21620,21619
<21620=21621
<21621=21623,21622
<21624=21625
<21625=21627,21626
<21627=21628
<21628=21630,21629
<21631=21632
<21632=21634,21633
<21634=21635
<21635=21637,21636
<21638=21639
<21639=21644,21643,21640
<21640=21642,21641
<21645=21646
<21646=21652,21647
<21647=21650,21648
<21648=21649
<21650=21651
<21652=21653
<21653=21655,21654
<21656=21724,21715,21709,21700,21670,21657
<21657=21658
<21658=21667,21659
<21659=21665,21660
<21660=21663,21661
<21661=21662
<21663=21664
<21665=21666
<21667=21669,21668
<21670=21671
<21671=21697,21672
<21672=21683,21673
<21673=21681,21674
<21674=21679,21675
<21675=21676
<21676=21678,21677
<21679=21680
<21681=21682
<21683=21695,21684
<21684=21689,21685
<21685=21686
<21686=21688,21687
<21689=21690
<21690=21694,21691
<21691=21693,21692
<21695=21696
<21697=21699,21698
<21700=21701
<21701=21705,21702
<21702=21703
<21703=21704
<21705=21706
<21706=21708,21707
<21709=21710
<21710=21712,21711
<21712=21714,21713
<21715=21716
<21716=21720,21717
<21717=21718
<21718=21719
<21720=21721
<21721=21723,21722
<21724=21725
<21725=21727,21726
<21727=21729,21728
<21730=21731
<21731=21737,21732
<21732=21736,21733
<21733=21735,21734
<21738=21739
<21739=21745,21740
<21740=21743,21741
<21741=21742
<21743=21744
<21745=21746
<21746=21748,21747
<21749=21750
<21750=21767,21751
<21751=21766,21752
<21752=21764,21753
<21753=21758,21754
<21754=21755
<21755=21757,21756
<21758=21759
<21759=21763,21760
<21760=21762,21761
<21764=21765
<21768=21769
<21769=21775,21770
<21770=21773,21771
<21771=21772
<21773=21774
<21775=21776
<21776=21778,21777
<21779=21780
<21780=21791,21781
<21781=21790,21782
<21782=21788,21783
<21783=21786,21784
<21784=21785
<21786=21787
<21788=21789
<21792=21793
<21793=21799,21794
<21794=21797,21795
<21795=21796
<21797=21798
<21799=21800
<21800=21802,21801
<21803=21804
<21804=21815,21805
<21805=21814,21806
<21806=21812,21807
<21807=21810,21808
<21808=21809
<21810=21811
<21812=21813
<21816=21825,21817
<21817=21824,21823,21818
<21818=21822,21819
<21819=21821,21820
<21825=21834,21833,21826
<21826=21830,21827
<21827=21829,21828
<21830=21832,21831
<21835=21836
<21836=21840,21837
<21837=21838
<21838=21839
<21840=21841
<21841=21843,21842
<21844=21845
<21845=21847,21846
<21847=21848
<21848=21850,21849
<21851=21852
<21852=21854,21853
<21855=21856
<21856=21862,21857
<21857=21860,21858
<21858=21859
<21860=21861
<21862=21863
<21864=21865
<21865=21867,21866
<21867=21869,21868
<21870=21871
<21871=21873,21872
<21873=21875,21874
<21876=21877
<21877=21879,21878
<21879=21881,21880
<21882=21883
<21883=21889,21884
<21884=21887,21885
<21885=21886
<21887=21888
<21889=21890
<21891=21892
<21892=21894,21893
<21894=21896,21895
<21897=21898
<21898=21900,21899
<21900=21902,21901
<21903=21904
<21904=21915,21905
<21905=21906
<21906=21907
<21907=21913,21908
<21908=21911,21909
<21909=21910
<21911=21912
<21913=21914
<21915=21916
<21916=21918,21917
<21918=21920,21919
<21921=21922
<21922=21930,21923
<21923=21928,21926,21924
<21924=21925
<21926=21927
<21928=21929
<21930=21931
<21931=21933,21932
<21934=21935
<21935=21939,21936
<21936=21937
<21937=21938
<21939=21940
<21940=21942,21941
<21943=21944
<21948=21949
<21949=21955,21950
<21950=21953,21951
<21951=21952
<21953=21954
<21955=21956
<21957=21958
<21958=21960,21959
<21960=21962,21961
<21963=21964
<21964=21966,21965
<21966=21968,21967
<21969=21970
<21970=21981,21971
<21971=21972
<21972=21973
<21973=21979,21974
<21974=21977,21975
<21975=21976
<21977=21978
<21979=21980
<21981=21982
<21982=21984,21983
<21984=21986,21985
<21987=21988
<21988=21996,21989
<21989=21994,21992,21990
<21990=21991
<21992=21993
<21994=21995
<21996=21997
<21997=21999,21998
<22000=22001
<22001=22005,22002
<22002=22003
<22003=22004
<22005=22006
<22006=22008,22007
<22009=22010
<22014=22015
<22015=22021,22016
<22016=22019,22017
<22017=22018
<22019=22020
<22021=22022
<22022=22024,22023
<22025=22026
<22026=22039,22027
<22027=22037,22028
<22028=22035,22029
<22029=22030
<22030=22034,22031
<22031=22033,22032
<22035=22036
<22037=22038
<22039=22041,22040
<22042=22043
<22043=22053,22044
<22044=22045
<22045=22046
<22046=22048,22047
<22048=22050,22049
<22050=22052,22051
<22053=22054
<22054=22056,22055
<22057=22058
<22058=22060,22059
<22061=22062
<22062=22068,22063
<22063=22066,22064
<22064=22065
<22066=22067
<22068=22069
<22069=22071,22070
<22072=22073
<22073=22086,22074
<22074=22084,22075
<22075=22082,22076
<22076=22077
<22077=22081,22078
<22078=22080,22079
<22082=22083
<22084=22085
<22086=22088,22087
<22089=22090
<22090=22100,22091
<22091=22092
<22092=22093
<22093=22095,22094
<22095=22097,22096
<22097=22099,22098
<22100=22101
<22101=22103,22102
<22104=22105
<22105=22107,22106
<22108=22109
<22109=22115,22110
<22110=22113,22111
<22111=22112
<22113=22114
<22115=22116
<22116=22118,22117
<22119=22120
<22120=22133,22121
<22121=22131,22122
<22122=22129,22123
<22123=22124
<22124=22128,22125
<22125=22127,22126
<22129=22130
<22131=22132
<22133=22135,22134
<22136=22137
<22137=22147,22138
<22138=22139
<22139=22140
<22140=22142,22141
<22142=22144,22143
<22144=22146,22145
<22147=22148
<22148=22150,22149
<22151=22152
<22152=22154,22153
<22155=22156
<22156=22158,22157
<22159=22160
<22160=22166,22161
<22161=22164,22162
<22162=22163
<22164=22165
<22166=22167
<22167=22169,22168
<22170=22171
<22171=22180,22172
<22172=22178,22173
<22173=22176,22174
<22174=22175
<22176=22177
<22178=22179
<22180=22182,22181
<22183=22184
<22184=22194,22185
<22185=22186
<22186=22187
<22187=22189,22188
<22189=22191,22190
<22191=22193,22192
<22194=22195
<22195=22197,22196
<22198=22199
<22199=22201,22200
<22202=22203
<22203=22209,22204
<22204=22207,22205
<22205=22206
<22207=22208
<22209=22210
<22210=22212,22211
<22213=22214
<22214=22227,22215
<22215=22225,22216
<22216=22223,22217
<22217=22218
<22218=22222,22219
<22219=22221,22220
<22223=22224
<22225=22226
<22227=22229,22228
<22230=22231
<22231=22241,22232
<22232=22233
<22233=22234
<22234=22236,22235
<22236=22238,22237
<22238=22240,22239
<22241=22242
<22242=22244,22243
<22245=22246
<22246=22248,22247
<22249=22250
<22250=22256,22251
<22251=22254,22252
<22252=22253
<22254=22255
<22256=22257
<22257=22259,22258
<22260=22261
<22261=22270,22262
<22262=22268,22263
<22263=22266,22264
<22264=22265
<22266=22267
<22268=22269
<22270=22272,22271
<22273=22274
<22274=22284,22275
<22275=22276
<22276=22277
<22277=22279,22278
<22279=22281,22280
<22281=22283,22282
<22284=22285
<22285=22287,22286
<22288=22289
<22289=22291,22290
<22292=22293
<22293=22299,22294
<22294=22297,22295
<22295=22296
<22297=22298
<22299=22300
<22300=22302,22301
<22303=22304
<22304=22317,22305
<22305=22315,22306
<22306=22313,22307
<22307=22308
<22308=22312,22309
<22309=22311,22310
<22313=22314
<22315=22316
<22317=22319,22318
<22320=22321
<22321=22331,22322
<22322=22323
<22323=22324
<22324=22326,22325
<22326=22328,22327
<22328=22330,22329
<22331=22332
<22332=22334,22333
<22335=22336
<22336=22338,22337
<22339=22340
<22340=22346,22341
<22341=22344,22342
<22342=22343
<22344=22345
<22346=22347
<22347=22349,22348
<22350=22351
<22351=22372,22352
<22352=22370,22353
<22353=22362,22354
<22354=22355
<22355=22361,22356
<22356=22358,22357
<22358=22360,22359
<22362=22363
<22363=22369,22364
<22364=22368,22365
<22365=22367,22366
<22370=22371
<22372=22374,22373
<22375=22376
<22376=22383,22377
<22377=22379,22378
<22379=22380
<22380=22382,22381
<22384=22385
<22385=22392,22386
<22386=22388,22387
<22388=22389
<22389=22391,22390
<22393=22394
<22394=22410,22409,22395
<22395=22408,22396
<22396=22407,22397
<22397=22405,22398
<22398=22403,22401,22399
<22399=22400
<22401=22402
<22403=22404
<22405=22406
<22411=22412
<22412=22418,22413
<22413=22416,22414
<22414=22415
<22416=22417
<22418=22419
<22419=22421,22420
<22422=22542,22531,22528,22423
<22423=22524,22504,22481,22467,22424
<22424=22435,22425
<22425=22426
<22426=22427
<22427=22431,22428
<22428=22429
<22429=22430
<22431=22432
<22432=22434,22433
<22435=22436
<22436=22452,22437
<22437=22445,22438
<22438=22440,22439
<22440=22442,22441
<22442=22444,22443
<22445=22447,22446
<22447=22449,22448
<22449=22451,22450
<22452=22460,22453
<22453=22455,22454
<22455=22457,22456
<22457=22459,22458
<22460=22462,22461
<22462=22464,22463
<22464=22466,22465
<22467=22468
<22468=22477,22469
<22469=22470
<22470=22471
<22471=22473,22472
<22473=22474
<22474=22476,22475
<22477=22478
<22478=22480,22479
<22481=22496,22482
<22482=22483
<22483=22495,22484
<22484=22494,22485
<22485=22487,22486
<22487=22489,22488
<22489=22491,22490
<22491=22493,22492
<22496=22497
<22497=22499,22498
<22499=22501,22500
<22501=22503,22502
<22504=22505
<22505=22523,22506
<22506=22516,22507
<22507=22515,22508
<22508=22510,22509
<22510=22512,22511
<22512=22514,22513
<22516=22518,22517
<22518=22520,22519
<22520=22522,22521
<22524=22525
<22525=22527,22526
<22528=22530,22529
<22531=22532
<22532=22541,22533
<22533=22535,22534
<22535=22536
<22536=22538,22537
<22538=22540,22539
<22542=22543
<22543=22545,22544
<22546=22547
<22547=22556,22548
<22548=22554,22549
<22549=22552,22550
<22550=22551
<22552=22553
<22554=22555
<22556=22558,22557
<22559=22560
<22560=22569,22561
<22561=22567,22562
<22562=22565,22563
<22563=22564
<22565=22566
<22567=22568
<22570=22571
<22571=22577,22572
<22572=22575,22573
<22573=22574
<22575=22576
<22577=22578
<22578=22580,22579
<22581=22582
<22582=22591,22583
<22583=22589,22584
<22584=22587,22585
<22585=22586
<22587=22588
<22589=22590
<22591=22593,22592
<22594=22595
<22595=22611,22610,22596
<22596=22609,22597
<22597=22608,22598
<22598=22606,22599
<22599=22604,22602,22600
<22600=22601
<22602=22603
<22604=22605
<22606=22607
<22612=22613
<22613=22619,22614
<22614=22617,22615
<22615=22616
<22617=22618
<22619=22620
<22620=22622,22621
<22623=22624
<22624=22635,22625
<22625=22633,22626
<22626=22631,22627
<22627=22628
<22628=22630,22629
<22631=22632
<22633=22634
<22635=22637,22636
<22638=22639
<22639=22648,22640
<22640=22641
<22641=22642
<22642=22644,22643
<22644=22645
<22645=22647,22646
<22648=22649
<22649=22651,22650
<22652=22653
<22653=22655,22654
<22656=22657
<22657=22663,22658
<22658=22661,22659
<22659=22660
<22661=22662
<22663=22664
<22664=22666,22665
<22667=22668
<22668=22691,22669
<22669=22689,22670
<22670=22681,22671
<22671=22672
<22672=22680,22673
<22673=22679,22674
<22674=22676,22675
<22676=22678,22677
<22681=22682
<22682=22688,22683
<22683=22687,22684
<22684=22686,22685
<22689=22690
<22691=22693,22692
<22694=22695
<22695=22711,22710,22696
<22696=22709,22697
<22697=22708,22698
<22698=22706,22699
<22699=22704,22702,22700
<22700=22701
<22702=22703
<22704=22705
<22706=22707
<22712=22713
<22713=22719,22714
<22714=22717,22715
<22715=22716
<22717=22718
<22719=22720
<22720=22722,22721
<22723=22724
<22724=22733,22725
<22725=22731,22726
<22726=22729,22727
<22727=22728
<22729=22730
<22731=22732
<22733=22735,22734
<22736=22737
<22737=22747,22738
<22738=22739
<22739=22740
<22740=22742,22741
<22742=22744,22743
<22744=22746,22745
<22747=22748
<22748=22750,22749
<22751=22752
<22752=22754,22753
<22755=22756
<22756=22762,22757
<22757=22760,22758
<22758=22759
<22760=22761
<22762=22763
<22763=22765,22764
<22766=22767
<22767=22788,22768
<22768=22786,22769
<22769=22778,22770
<22770=22771
<22771=22777,22772
<22772=22774,22773
<22774=22776,22775
<22778=22779
<22779=22785,22780
<22780=22784,22781
<22781=22783,22782
<22786=22787
<22788=22790,22789
<22791=22792
<22792=22799,22793
<22793=22795,22794
<22795=22796
<22796=22798,22797
<22800=22801
<22801=22808,22802
<22802=22804,22803
<22804=22805
<22805=22807,22806
<22809=22810
<22810=22826,22825,22811
<22811=22824,22812
<22812=22823,22813
<22813=22821,22814
<22814=22819,22817,22815
<22815=22816
<22817=22818
<22819=22820
<22821=22822
<22827=22828
<22828=22833,22832,22829
<22829=22831,22830
<22834=22838,22835
<22835=22837,22836
<22838=22840,22839
<22841=22842
<22842=22847,22846,22843
<22843=22845,22844
<22848=22849
<22849=22854,22853,22850
<22850=22852,22851
<22855=22856
<22856=22862,22857
<22857=22860,22858
<22858=22859
<22860=22861
<22862=22863
<22863=22865,22864
<22866=22867
<22867=22888,22868
<22868=22886,22869
<22869=22878,22870
<22870=22871
<22871=22877,22872
<22872=22874,22873
<22874=22876,22875
<22878=22879
<22879=22885,22880
<22880=22884,22881
<22881=22883,22882
<22886=22887
<22888=22890,22889
<22891=22892
<22892=22902,22901,22893
<22893=22900,22894
<22894=22896,22895
<22896=22897
<22897=22899,22898
<22903=22904
<22904=22914,22913,22905
<22905=22912,22906
<22906=22908,22907
<22908=22909
<22909=22911,22910
<22915=22916
<22916=22932,22931,22917
<22917=22930,22918
<22918=22929,22919
<22919=22927,22920
<22920=22925,22923,22921
<22921=22922
<22923=22924
<22925=22926
<22927=22928
<22933=22934
<22934=22940,22935
<22935=22938,22936
<22936=22937
<22938=22939
<22940=22941
<22941=22943,22942
<22944=22945
<22945=22959,22958,22946
<22946=22957,22947
<22947=22956,22948
<22948=22954,22949
<22949=22952,22950
<22950=22951
<22952=22953
<22954=22955
<22960=22961
<22961=22967,22962
<22962=22965,22963
<22963=22964
<22965=22966
<22967=22968
<22968=22970,22969
<22971=22972
<22972=22986,22985,22973
<22973=22984,22974
<22974=22983,22975
<22975=22981,22976
<22976=22979,22977
<22977=22978
<22979=22980
<22981=22982
<22987=23000,22994,22988
<22988=22993,22992,22989
<22989=22991,22990
<22994=22999,22998,22995
<22995=22997,22996
<23000=23005,23004,23001
<23001=23003,23002
<23006=23019,23013,23007
<23007=23012,23011,23008
<23008=23010,23009
<23013=23018,23017,23014
<23014=23016,23015
<23019=23024,23023,23020
<23020=23022,23021
<23025=23026
<23026=23028,23027
<23028=23030,23029
<23031=23032
<23036=23037
<23037=23046,23045,23038
<23038=23044,23039
<23039=23041,23040
<23041=23043,23042
<23047=23048
<23048=23054,23049
<23049=23052,23050
<23050=23051
<23052=23053
<23054=23055
<23055=23057,23056
<23058=23059
<23059=23068,23060
<23060=23066,23061
<23061=23064,23062
<23062=23063
<23064=23065
<23066=23067
<23068=23070,23069
<23071=23072
<23072=23076,23073
<23073=23074
<23074=23075
<23076=23077
<23077=23079,23078
<23080=23081
<23085=23086
<23086=23092,23087
<23087=23090,23088
<23088=23089
<23090=23091
<23092=23093
<23094=23095
<23095=23097,23096
<23097=23099,23098
<23100=23101
<23101=23112,23102
<23102=23110,23103
<23103=23108,23106,23104
<23104=23105
<23106=23107
<23108=23109
<23110=23111
<23112=23114,23113
<23115=23116
<23116=23129,23117
<23117=23127,23118
<23118=23123,23119
<23119=23120
<23120=23122,23121
<23123=23124
<23124=23126,23125
<23127=23128
<23130=23131
<23131=23135,23132
<23132=23133
<23133=23134
<23135=23136
<23136=23138,23137
<23139=23140
<23144=23145
<23145=23150,23149,23146
<23146=23148,23147
<23151=23152
<23152=23157,23156,23153
<23153=23155,23154
<23639=23642,23641,23640
<23642=23643
<23643=23644
<23644=23646,23645
<23646=23647
<23647=23649,23648
<23649=23651,23650
<23658=23661,23660,23659
<23661=23662
<23662=23663
<23663=23665,23664
<23665=23666
<23666=23668,23667
<23668=23670,23669
<23677=23683,23682,23678
<23678=23679
<23679=23681,23680
<23683=23684
<23684=23734,23685
<23685=23721,23692,23686
<23686=23687
<23687=23689,23688
<23689=23691,23690
<23692=23711,23693
<23693=23702,23694
<23694=23695
<23695=23699,23696
<23696=23698,23697
<23699=23701,23700
<23702=23703
<23703=23705,23704
<23705=23706
<23706=23708,23707
<23708=23710,23709
<23711=23712
<23712=23718,23713
<23713=23715,23714
<23715=23717,23716
<23718=23720,23719
<23721=23732,23722
<23722=23723
<23723=23725,23724
<23725=23726
<23726=23728,23727
<23728=23729
<23729=23731,23730
<23732=23733
<23734=23735
<23749=23752,23751,23750
<23752=23753
<23753=23762,23754
<23754=23755
<23755=23756
<23756=23758,23757
<23758=23759
<23759=23761,23760
<23762=23763
<23768=23771,23770,23769
<23771=23772
<23772=23804,23773
<23773=23795,23784,23778,23774
<23774=23775
<23775=23777,23776
<23778=23779
<23779=23781,23780
<23781=23783,23782
<23784=23785
<23785=23791,23786
<23786=23787
<23787=23788
<23788=23790,23789
<23791=23792
<23792=23794,23793
<23795=23796
<23796=23800,23797
<23797=23798
<23798=23799
<23800=23801
<23801=23803,23802
<23804=23805
<23812=23818,23817,23813
<23813=23814
<23814=23816,23815
<23818=23819,23821,23826,23831,23859,23864,23869,23878,23895,23896,23897,23898,23899,24064,24078,24087,24397,24411,25776,25790,25799,25803,26408,26422,26815,26829,27077,27091,27498,27512,27763,27777,27831,27845,29547,29561,29919,29933,29940,29945,29950,29960,29971,29999,30003,30036,30048,30055,30059,30063
<23819=23820
<23821=23822
<23822=23824,23823
<23824=23825
<23826=23827
<23827=23829,23828
<23829=23830
<23831=23848,23832
<23832=23833
<23833=23837,23834
<23834=23835
<23835=23836
<23837=23838
<23838=23840,23839
<23840=23844,23841
<23841=23842
<23842=23843
<23844=23845
<23845=23847,23846
<23848=23849
<23849=23851,23850
<23851=23857,23852
<23852=23855,23853
<23853=23854
<23855=23856
<23857=23858
<23859=23860
<23860=23862,23861
<23862=23863
<23864=23865
<23865=23867,23866
<23867=23868
<23869=23870
<23870=23874,23871
<23871=23872
<23872=23873
<23874=23875
<23875=23877,23876
<23878=23886,23879
<23879=23880
<23880=23882,23881
<23882=23883
<23883=23885,23884
<23886=23887
<23887=23894,23893,23888
<23888=23892,23889
<23889=23891,23890
<23899=24062,23900
<23900=23912,23901
<23901=23902
<23902=23911,23903
<23903=23907,23904
<23904=23905
<23905=23906
<23907=23908
<23908=23910,23909
<23912=24053,23913
<23913=24041,24022,24018,23914
<23914=24014,23915
<23915=24010,23999,23987,23916
<23916=23978,23948,23917
<23917=23918
<23918=23919
<23919=23942,23920
<23920=23940,23938,23929,23927,23925,23923,23921
<23921=23922
<23923=23924
<23925=23926
<23927=23928
<23929=23930
<23930=23936,23931
<23931=23934,23932
<23932=23933
<23934=23935
<23936=23937
<23938=23939
<23940=23941
<23942=23943
<23943=23945,23944
<23945=23947,23946
<23948=23949
<23949=23972,23950
<23950=23970,23968,23959,23957,23955,23953,23951
<23951=23952
<23953=23954
<23955=23956
<23957=23958
<23959=23960
<23960=23966,23961
<23961=23964,23962
<23962=23963
<23964=23965
<23966=23967
<23968=23969
<23970=23971
<23972=23973
<23973=23975,23974
<23975=23977,23976
<23978=23979
<23979=23986,23980
<23980=23982,23981
<23982=23983
<23983=23985,23984
<23987=23988
<23988=23998,23989
<23989=23997,23990
<23990=23996,23991
<23991=23995,23992
<23992=23994,23993
<23999=24004,24000
<24000=24001
<24001=24003,24002
<24004=24005
<24005=24009,24006
<24006=24008,24007
<24010=24011
<24011=24013,24012
<24014=24015
<24015=24017,24016
<24018=24019
<24019=24021,24020
<24022=24038,24035,24032,24029,24026,24023
<24023=24025,24024
<24026=24028,24027
<24029=24031,24030
<24032=24034,24033
<24035=24037,24036
<24038=24040,24039
<24041=24042
<24042=24052,24051,24043
<24043=24047,24044
<24044=24045
<24045=24046
<24047=24048
<24048=24050,24049
<24053=24054
<24054=24058,24055
<24055=24056
<24056=24057
<24058=24059
<24059=24061,24060
<24062=24063
<24064=24065
<24065=24077,24076,24066
<24066=24075,24067
<24067=24071,24068
<24068=24069
<24069=24070
<24071=24072
<24072=24074,24073
<24078=24079
<24079=24083,24080
<24080=24081
<24081=24082
<24083=24084
<24084=24086,24085
<24087=24395,24088
<24088=24100,24089
<24089=24090
<24090=24099,24091
<24091=24095,24092
<24092=24093
<24093=24094
<24095=24096
<24096=24098,24097
<24100=24386,24101
<24101=24367,24348,24329,24322,24315,24302,24276,24250,24224,24198,24102
<24102=24192,24103
<24103=24169,24161,24151,24141,24104
<24104=24132,24105
<24105=24120,24106
<24106=24107
<24107=24119,24108
<24108=24114,24109
<24109=24111,24110
<24111=24113,24112
<24114=24116,24115
<24116=24118,24117
<24120=24121
<24121=24131,24130,24122
<24122=24126,24123
<24123=24124
<24124=24125
<24126=24127
<24127=24129,24128
<24132=24133
<24133=24137,24134
<24134=24135
<24135=24136
<24137=24138
<24138=24140,24139
<24141=24149,24142
<24142=24143
<24143=24145,24144
<24145=24146
<24146=24148,24147
<24149=24150
<24151=24159,24152
<24152=24153
<24153=24155,24154
<24155=24156
<24156=24158,24157
<24159=24160
<24161=24162
<24162=24164,24163
<24164=24166,24165
<24166=24168,24167
<24169=24170
<24170=24191,24190,24171
<24171=24189,24172
<24172=24187,24173
<24173=24185,24176,24174
<24174=24175
<24176=24177
<24177=24183,24178
<24178=24181,24179
<24179=24180
<24181=24182
<24183=24184
<24185=24186
<24187=24188
<24192=24193
<24193=24197,24194
<24194=24196,24195
<24198=24215,24199
<24199=24200
<24200=24214,24201
<24201=24212,24202
<24202=24203
<24203=24204
<24204=24208,24205
<24205=24206
<24206=24207
<24208=24209
<24209=24211,24210
<24212=24213
<24215=24216
<24216=24220,24217
<24217=24218
<24218=24219
<24220=24221
<24221=24223,24222
<24224=24241,24225
<24225=24226
<24226=24240,24227
<24227=24238,24228
<24228=24229
<24229=24230
<24230=24234,24231
<24231=24232
<24232=24233
<24234=24235
<24235=24237,24236
<24238=24239
<24241=24242
<24242=24246,24243
<24243=24244
<24244=24245
<24246=24247
<24247=24249,24248
<24250=24267,24251
<24251=24252
<24252=24266,24253
<24253=24264,24254
<24254=24255
<24255=24256
<24256=24260,24257
<24257=24258
<24258=24259
<24260=24261
<24261=24263,24262
<24264=24265
<24267=24268
<24268=24272,24269
<24269=24270
<24270=24271
<24272=24273
<24273=24275,24274
<24276=24293,24277
<24277=24278
<24278=24292,24279
<24279=24290,24280
<24280=24281
<24281=24282
<24282=24286,24283
<24283=24284
<24284=24285
<24286=24287
<24287=24289,24288
<24290=24291
<24293=24294
<24294=24298,24295
<24295=24296
<24296=24297
<24298=24299
<24299=24301,24300
<24302=24309,24303
<24303=24308,24307,24304
<24304=24306,24305
<24309=24314,24313,24310
<24310=24312,24311
<24315=24316
<24316=24321,24320,24317
<24317=24319,24318
<24322=24323
<24323=24328,24327,24324
<24324=24326,24325
<24329=24330
<24330=24347,24346,24331
<24331=24345,24332
<24332=24343,24333
<24333=24334
<24334=24335
<24335=24339,24336
<24336=24337
<24337=24338
<24339=24340
<24340=24342,24341
<24343=24344
<24348=24349
<24349=24366,24365,24350
<24350=24364,24351
<24351=24362,24352
<24352=24353
<24353=24354
<24354=24358,24355
<24355=24356
<24356=24357
<24358=24359
<24359=24361,24360
<24362=24363
<24367=24368
<24368=24385,24384,24369
<24369=24383,24370
<24370=24381,24371
<24371=24372
<24372=24373
<24373=24377,24374
<24374=24375
<24375=24376
<24377=24378
<24378=24380,24379
<24381=24382
<24386=24387
<24387=24391,24388
<24388=24389
<24389=24390
<24391=24392
<24392=24394,24393
<24395=24396
<24397=24398
<24398=24410,24409,24399
<24399=24408,24400
<24400=24404,24401
<24401=24402
<24402=24403
<24404=24405
<24405=24407,24406
<24411=25774,24412
<24412=25761,25754,25747,25670,25574,25463,25321,25146,24966,24768,24533,24424,24413
<24413=24414
<24414=24423,24415
<24415=24419,24416
<24416=24417
<24417=24418
<24419=24420
<24420=24422,24421
<24424=24524,24425
<24425=24512,24426
<24426=24504,24495,24492,24427
<24427=24483,24428
<24428=24476,24429
<24429=24463,24453,24445,24437,24430
<24430=24431
<24431=24433,24432
<24433=24434
<24434=24436,24435
<24437=24438
<24438=24440,24439
<24440=24442,24441
<24442=24444,24443
<24445=24446
<24446=24448,24447
<24448=24450,24449
<24450=24452,24451
<24453=24455,24454
<24455=24456
<24456=24462,24457
<24457=24461,24458
<24458=24460,24459
<24463=24470,24464
<24464=24469,24468,24465
<24465=24467,24466
<24470=24475,24474,24471
<24471=24473,24472
<24476=24477
<24477=24479,24478
<24479=24480
<24480=24482,24481
<24483=24484
<24484=24491,24490,24485
<24485=24489,24486
<24486=24488,24487
<24492=24494,24493
<24495=24496
<24496=24503,24497
<24497=24499,24498
<24499=24500
<24500=24502,24501
<24504=24505
<24505=24506
<24506=24511,24510,24507
<24507=24509,24508
<24512=24513
<24513=24523,24522,24514
<24514=24518,24515
<24515=24516
<24516=24517
<24518=24519
<24519=24521,24520
<24524=24525
<24525=24529,24526
<24526=24527
<24527=24528
<24529=24530
<24530=24532,24531
<24533=24759,24534
<24534=24747,24728,24721,24535
<24535=24717,24536
<24536=24710,24706,24702,24698,24676,24667,24658,24635,24627,24617,24607,24594,24586,24577,24565,24561,24546,24537
<24537=24538
<24538=24542,24539
<24539=24540
<24540=24541
<24542=24543
<24543=24545,24544
<24546=24557,24547
<24547=24553,24548
<24548=24549
<24549=24551,24550
<24551=24552
<24553=24554
<24554=24556,24555
<24557=24558
<24558=24560,24559
<24561=24562
<24562=24564,24563
<24565=24575,24566
<24566=24567
<24567=24571,24568
<24568=24569
<24569=24570
<24571=24572
<24572=24574,24573
<24575=24576
<24577=24578
<24578=24582,24579
<24579=24580
<24580=24581
<24582=24583
<24583=24585,24584
<24586=24587
<24587=24589,24588
<24589=24591,24590
<24591=24593,24592
<24594=24595
<24595=24604,24596
<24596=24602,24597
<24597=24600,24598
<24598=24599
<24600=24601
<24602=24603
<24604=24606,24605
<24607=24615,24608
<24608=24609
<24609=24611,24610
<24611=24612
<24612=24614,24613
<24615=24616
<24617=24625,24618
<24618=24619
<24619=24621,24620
<24621=24622
<24622=24624,24623
<24625=24626
<24627=24628
<24628=24632,24629
<24629=24631,24630
<24632=24634,24633
<24635=24636
<24636=24657,24656,24637
<24637=24655,24638
<24638=24653,24639
<24639=24651,24642,24640
<24640=24641
<24642=24643
<24643=24649,24644
<24644=24647,24645
<24645=24646
<24647=24648
<24649=24650
<24651=24652
<24653=24654
<24658=24663,24659
<24659=24660
<24660=24662,24661
<24663=24664
<24664=24666,24665
<24667=24672,24668
<24668=24669
<24669=24671,24670
<24672=24673
<24673=24675,24674
<24676=24677
<24677=24697,24678
<24678=24696,24679
<24679=24695,24680
<24680=24694,24681
<24681=24693,24682
<24682=24692,24683
<24683=24691,24684
<24684=24690,24685
<24685=24689,24686
<24686=24688,24687
<24698=24699
<24699=24701,24700
<24702=24703
<24703=24705,24704
<24706=24707
<24707=24709,24708
<24710=24714,24711
<24711=24713,24712
<24714=24716,24715
<24717=24718
<24718=24720,24719
<24721=24722
<24722=24727,24726,24723
<24723=24725,24724
<24728=24729
<24729=24746,24745,24730
<24730=24744,24731
<24731=24742,24732
<24732=24733
<24733=24734
<24734=24738,24735
<24735=24736
<24736=24737
<24738=24739
<24739=24741,24740
<24742=24743
<24747=24748
<24748=24758,24757,24749
<24749=24753,24750
<24750=24751
<24751=24752
<24753=24754
<24754=24756,24755
<24759=24760
<24760=24764,24761
<24761=24762
<24762=24763
<24764=24765
<24765=24767,24766
<24768=24957,24769
<24769=24945,24926,24770
<24770=24922,24771
<24771=24915,24911,24907,24903,24883,24874,24851,24843,24833,24823,24810,24802,24793,24781,24772
<24772=24773
<24773=24777,24774
<24774=24775
<24775=24776
<24777=24778
<24778=24780,24779
<24781=24791,24782
<24782=24783
<24783=24787,24784
<24784=24785
<24785=24786
<24787=24788
<24788=24790,24789
<24791=24792
<24793=24794
<24794=24798,24795
<24795=24796
<24796=24797
<24798=24799
<24799=24801,24800
<24802=24803
<24803=24805,24804
<24805=24807,24806
<24807=24809,24808
<24810=24811
<24811=24820,24812
<24812=24818,24813
<24813=24816,24814
<24814=24815
<24816=24817
<24818=24819
<24820=24822,24821
<24823=24831,24824
<24824=24825
<24825=24827,24826
<24827=24828
<24828=24830,24829
<24831=24832
<24833=24841,24834
<24834=24835
<24835=24837,24836
<24837=24838
<24838=24840,24839
<24841=24842
<24843=24844
<24844=24848,24845
<24845=24847,24846
<24848=24850,24849
<24851=24852
<24852=24873,24872,24853
<24853=24871,24854
<24854=24869,24855
<24855=24867,24858,24856
<24856=24857
<24858=24859
<24859=24865,24860
<24860=24863,24861
<24861=24862
<24863=24864
<24865=24866
<24867=24868
<24869=24870
<24874=24879,24875
<24875=24876
<24876=24878,24877
<24879=24880
<24880=24882,24881
<24883=24884
<24884=24902,24885
<24885=24901,24886
<24886=24900,24887
<24887=24899,24888
<24888=24898,24889
<24889=24897,24890
<24890=24896,24891
<24891=24895,24892
<24892=24894,24893
<24903=24904
<24904=24906,24905
<24907=24908
<24908=24910,24909
<24911=24912
<24912=24914,24913
<24915=24919,24916
<24916=24918,24917
<24919=24921,24920
<24922=24923
<24923=24925,24924
<24926=24927
<24927=24944,24943,24928
<24928=24942,24929
<24929=24940,24930
<24930=24931
<24931=24932
<24932=24936,24933
<24933=24934
<24934=24935
<24936=24937
<24937=24939,24938
<24940=24941
<24945=24946
<24946=24956,24955,24947
<24947=24951,24948
<24948=24949
<24949=24950
<24951=24952
<24952=24954,24953
<24957=24958
<24958=24962,24959
<24959=24960
<24960=24961
<24962=24963
<24963=24965,24964
<24966=25137,24967
<24967=25125,25106,24968
<24968=25102,24969
<24969=25095,25091,25087,25069,25060,25037,25029,25019,25009,24996,24988,24979,24970
<24970=24971
<24971=24975,24972
<24972=24973
<24973=24974
<24975=24976
<24976=24978,24977
<24979=24980
<24980=24984,24981
<24981=24982
<24982=24983
<24984=24985
<24985=24987,24986
<24988=24989
<24989=24991,24990
<24991=24993,24992
<24993=24995,24994
<24996=24997
<24997=25006,24998
<24998=25004,24999
<24999=25002,25000
<25000=25001
<25002=25003
<25004=25005
<25006=25008,25007
<25009=25017,25010
<25010=25011
<25011=25013,25012
<25013=25014
<25014=25016,25015
<25017=25018
<25019=25027,25020
<25020=25021
<25021=25023,25022
<25023=25024
<25024=25026,25025
<25027=25028
<25029=25030
<25030=25034,25031
<25031=25033,25032
<25034=25036,25035
<25037=25038
<25038=25059,25058,25039
<25039=25057,25040
<25040=25055,25041
<25041=25053,25044,25042
<25042=25043
<25044=25045
<25045=25051,25046
<25046=25049,25047
<25047=25048
<25049=25050
<25051=25052
<25053=25054
<25055=25056
<25060=25065,25061
<25061=25062
<25062=25064,25063
<25065=25066
<25066=25068,25067
<25069=25070
<25070=25086,25071
<25071=25085,25072
<25072=25084,25073
<25073=25083,25074
<25074=25082,25075
<25075=25081,25076
<25076=25080,25077
<25077=25079,25078
<25087=25088
<25088=25090,25089
<25091=25092
<25092=25094,25093
<25095=25099,25096
<25096=25098,25097
<25099=25101,25100
<25102=25103
<25103=25105,25104
<25106=25107
<25107=25124,25123,25108
<25108=25122,25109
<25109=25120,25110
<25110=25111
<25111=25112
<25112=25116,25113
<25113=25114
<25114=25115
<25116=25117
<25117=25119,25118
<25120=25121
<25125=25126
<25126=25136,25135,25127
<25127=25131,25128
<25128=25129
<25129=25130
<25131=25132
<25132=25134,25133
<25137=25138
<25138=25142,25139
<25139=25140
<25140=25141
<25142=25143
<25143=25145,25144
<25146=25312,25147
<25147=25300,25281,25148
<25148=25277,25149
<25149=25270,25266,25250,25227,25219,25200,25190,25180,25167,25159,25150
<25150=25151
<25151=25155,25152
<25152=25153
<25153=25154
<25155=25156
<25156=25158,25157
<25159=25160
<25160=25162,25161
<25162=25164,25163
<25164=25166,25165
<25167=25168
<25168=25177,25169
<25169=25175,25170
<25170=25173,25171
<25171=25172
<25173=25174
<25175=25176
<25177=25179,25178
<25180=25188,25181
<25181=25182
<25182=25184,25183
<25184=25185
<25185=25187,25186
<25188=25189
<25190=25198,25191
<25191=25192
<25192=25194,25193
<25194=25195
<25195=25197,25196
<25198=25199
<25200=25207,25201
<25201=25202
<25202=25204,25203
<25204=25206,25205
<25207=25208
<25208=25214,25209
<25209=25211,25210
<25211=25213,25212
<25214=25216,25215
<25216=25218,25217
<25219=25220
<25220=25224,25221
<25221=25223,25222
<25224=25226,25225
<25227=25228
<25228=25249,25248,25229
<25229=25247,25230
<25230=25245,25231
<25231=25243,25234,25232
<25232=25233
<25234=25235
<25235=25241,25236
<25236=25239,25237
<25237=25238
<25239=25240
<25241=25242
<25243=25244
<25245=25246
<25250=25251
<25251=25265,25252
<25252=25264,25253
<25253=25263,25254
<25254=25262,25255
<25255=25261,25256
<25256=25260,25257
<25257=25259,25258
<25266=25267
<25267=25269,25268
<25270=25274,25271
<25271=25273,25272
<25274=25276,25275
<25277=25278
<25278=25280,25279
<25281=25282
<25282=25299,25298,25283
<25283=25297,25284
<25284=25295,25285
<25285=25286
<25286=25287
<25287=25291,25288
<25288=25289
<25289=25290
<25291=25292
<25292=25294,25293
<25295=25296
<25300=25301
<25301=25311,25310,25302
<25302=25306,25303
<25303=25304
<25304=25305
<25306=25307
<25307=25309,25308
<25312=25313
<25313=25317,25314
<25314=25315
<25315=25316
<25317=25318
<25318=25320,25319
<25321=25454,25322
<25322=25442,25423,25323
<25323=25419,25324
<25324=25412,25398,25375,25365,25355,25342,25334,25325
<25325=25326
<25326=25330,25327
<25327=25328
<25328=25329
<25330=25331
<25331=25333,25332
<25334=25335
<25335=25337,25336
<25337=25339,25338
<25339=25341,25340
<25342=25343
<25343=25352,25344
<25344=25350,25345
<25345=25348,25346
<25346=25347
<25348=25349
<25350=25351
<25352=25354,25353
<25355=25363,25356
<25356=25357
<25357=25359,25358
<25359=25360
<25360=25362,25361
<25363=25364
<25365=25373,25366
<25366=25367
<25367=25369,25368
<25369=25370
<25370=25372,25371
<25373=25374
<25375=25376
<25376=25397,25396,25377
<25377=25395,25378
<25378=25393,25379
<25379=25391,25382,25380
<25380=25381
<25382=25383
<25383=25389,25384
<25384=25387,25385
<25385=25386
<25387=25388
<25389=25390
<25391=25392
<25393=25394
<25398=25399
<25399=25411,25400
<25400=25410,25401
<25401=25409,25402
<25402=25408,25403
<25403=25407,25404
<25404=25406,25405
<25412=25416,25413
<25413=25415,25414
<25416=25418,25417
<25419=25420
<25420=25422,25421
<25423=25424
<25424=25441,25440,25425
<25425=25439,25426
<25426=25437,25427
<25427=25428
<25428=25429
<25429=25433,25430
<25430=25431
<25431=25432
<25433=25434
<25434=25436,25435
<25437=25438
<25442=25443
<25443=25453,25452,25444
<25444=25448,25445
<25445=25446
<25446=25447
<25448=25449
<25449=25451,25450
<25454=25455
<25455=25459,25456
<25456=25457
<25457=25458
<25459=25460
<25460=25462,25461
<25463=25565,25464
<25464=25553,25534,25465
<25465=25530,25466
<25466=25520,25497,25484,25476,25467
<25467=25468
<25468=25472,25469
<25469=25470
<25470=25471
<25472=25473
<25473=25475,25474
<25476=25477
<25477=25479,25478
<25479=25481,25480
<25481=25483,25482
<25484=25485
<25485=25494,25486
<25486=25492,25487
<25487=25490,25488
<25488=25489
<25490=25491
<25492=25493
<25494=25496,25495
<25497=25498
<25498=25519,25518,25499
<25499=25517,25500
<25500=25515,25501
<25501=25513,25504,25502
<25502=25503
<25504=25505
<25505=25511,25506
<25506=25509,25507
<25507=25508
<25509=25510
<25511=25512
<25513=25514
<25515=25516
<25520=25521
<25521=25529,25522
<25522=25528,25523
<25523=25527,25524
<25524=25526,25525
<25530=25531
<25531=25533,25532
<25534=25535
<25535=25552,25551,25536
<25536=25550,25537
<25537=25548,25538
<25538=25539
<25539=25540
<25540=25544,25541
<25541=25542
<25542=25543
<25544=25545
<25545=25547,25546
<25548=25549
<25553=25554
<25554=25564,25563,25555
<25555=25559,25556
<25556=25557
<25557=25558
<25559=25560
<25560=25562,25561
<25565=25566
<25566=25570,25567
<25567=25568
<25568=25569
<25570=25571
<25571=25573,25572
<25574=25661,25575
<25575=25649,25630,25576
<25576=25626,25577
<25577=25618,25595,25587,25578
<25578=25579
<25579=25583,25580
<25580=25581
<25581=25582
<25583=25584
<25584=25586,25585
<25587=25588
<25588=25590,25589
<25590=25592,25591
<25592=25594,25593
<25595=25596
<25596=25617,25616,25597
<25597=25615,25598
<25598=25613,25599
<25599=25611,25602,25600
<25600=25601
<25602=25603
<25603=25609,25604
<25604=25607,25605
<25605=25606
<25607=25608
<25609=25610
<25611=25612
<25613=25614
<25618=25619
<25619=25625,25620
<25620=25624,25621
<25621=25623,25622
<25626=25627
<25627=25629,25628
<25630=25631
<25631=25648,25647,25632
<25632=25646,25633
<25633=25644,25634
<25634=25635
<25635=25636
<25636=25640,25637
<25637=25638
<25638=25639
<25640=25641
<25641=25643,25642
<25644=25645
<25649=25650
<25650=25660,25659,25651
<25651=25655,25652
<25652=25653
<25653=25654
<25655=25656
<25656=25658,25657
<25661=25662
<25662=25666,25663
<25663=25664
<25664=25665
<25666=25667
<25667=25669,25668
<25670=25738,25671
<25671=25726,25672
<25672=25722,25673
<25673=25714,25691,25683,25674
<25674=25675
<25675=25679,25676
<25676=25677
<25677=25678
<25679=25680
<25680=25682,25681
<25683=25684
<25684=25686,25685
<25686=25688,25687
<25688=25690,25689
<25691=25692
<25692=25713,25712,25693
<25693=25711,25694
<25694=25709,25695
<25695=25707,25698,25696
<25696=25697
<25698=25699
<25699=25705,25700
<25700=25703,25701
<25701=25702
<25703=25704
<25705=25706
<25707=25708
<25709=25710
<25714=25715
<25715=25721,25716
<25716=25720,25717
<25717=25719,25718
<25722=25723
<25723=25725,25724
<25726=25727
<25727=25737,25736,25728
<25728=25732,25729
<25729=25730
<25730=25731
<25732=25733
<25733=25735,25734
<25738=25739
<25739=25743,25740
<25740=25741
<25741=25742
<25743=25744
<25744=25746,25745
<25747=25748
<25748=25750,25749
<25750=25751
<25751=25753,25752
<25754=25758,25755
<25755=25757,25756
<25758=25760,25759
<25761=25762,25765,25768,25771
<25762=25764,25763
<25765=25767,25766
<25768=25770,25769
<25771=25773,25772
<25774=25775
<25776=25777
<25777=25789,25788,25778
<25778=25787,25779
<25779=25783,25780
<25780=25781
<25781=25782
<25783=25784
<25784=25786,25785
<25790=25791
<25791=25795,25792
<25792=25793
<25793=25794
<25795=25796
<25796=25798,25797
<25799=25800
<25800=25802,25801
<25803=26406,25804
<25804=26387,26380,26376,26360,26344,26328,26318,26292,26285,26258,26251,26224,26217,26191,26184,26158,25973,25962,25948,25937,25926,25915,25904,25888,25872,25856,25830,25814,25805
<25805=25806
<25806=25810,25807
<25807=25808
<25808=25809
<25810=25811
<25811=25813,25812
<25814=25826,25815
<25815=25816
<25816=25822,25817
<25817=25820,25818
<25818=25819
<25820=25821
<25822=25823
<25823=25825,25824
<25826=25827
<25827=25829,25828
<25830=25847,25831
<25831=25832
<25832=25843,25833
<25833=25841,25834
<25834=25835
<25835=25837,25836
<25837=25838
<25838=25840,25839
<25841=25842
<25843=25844
<25844=25846,25845
<25847=25848
<25848=25855,25849
<25849=25851,25850
<25851=25852
<25852=25854,25853
<25856=25868,25857
<25857=25858
<25858=25864,25859
<25859=25862,25860
<25860=25861
<25862=25863
<25864=25865
<25865=25867,25866
<25868=25869
<25869=25871,25870
<25872=25884,25873
<25873=25874
<25874=25880,25875
<25875=25878,25876
<25876=25877
<25878=25879
<25880=25881
<25881=25883,25882
<25884=25885
<25885=25887,25886
<25888=25900,25889
<25889=25890
<25890=25896,25891
<25891=25894,25892
<25892=25893
<25894=25895
<25896=25897
<25897=25899,25898
<25900=25901
<25901=25903,25902
<25904=25905
<25905=25911,25906
<25906=25909,25907
<25907=25908
<25909=25910
<25911=25912
<25912=25914,25913
<25915=25916
<25916=25922,25917
<25917=25920,25918
<25918=25919
<25920=25921
<25922=25923
<25923=25925,25924
<25926=25927
<25927=25933,25928
<25928=25931,25929
<25929=25930
<25931=25932
<25933=25934
<25934=25936,25935
<25937=25938
<25938=25944,25939
<25939=25942,25940
<25940=25941
<25942=25943
<25944=25945
<25945=25947,25946
<25948=25949
<25949=25961,25960,25950
<25950=25959,25951
<25951=25955,25952
<25952=25953
<25953=25954
<25955=25956
<25956=25958,25957
<25962=25963
<25963=25972,25964
<25964=25968,25965
<25965=25966
<25966=25967
<25968=25969
<25969=25971,25970
<25973=26150,26146,26143,25974
<25974=26136,26036,25990,25981,25975
<25975=25976
<25976=25978,25977
<25978=25980,25979
<25981=25982
<25982=25986,25983
<25983=25984
<25984=25985
<25986=25987
<25987=25989,25988
<25990=26030,26020,25991
<25991=25992
<25992=25993
<25993=26013,26004,25994
<25994=25995
<25995=25996
<25996=26002,25997
<25997=26000,25998
<25998=25999
<26000=26001
<26002=26003
<26004=26005
<26005=26011,26006
<26006=26009,26007
<26007=26008
<26009=26010
<26011=26012
<26013=26014
<26014=26018,26015
<26015=26016
<26016=26017
<26018=26019
<26020=26021
<26021=26022
<26022=26028,26023
<26023=26026,26024
<26024=26025
<26026=26027
<26028=26029
<26030=26031
<26031=26035,26032
<26032=26034,26033
<26036=26115,26107,26098,26087,26073,26069,26049,26037
<26037=26038
<26038=26047,26039
<26039=26040
<26040=26041
<26041=26043,26042
<26043=26044
<26044=26046,26045
<26047=26048
<26049=26050
<26050=26068,26051
<26051=26067,26052
<26052=26062,26053
<26053=26061,26054
<26054=26056,26055
<26056=26058,26057
<26058=26060,26059
<26062=26064,26063
<26064=26066,26065
<26069=26070
<26070=26072,26071
<26073=26083,26074
<26074=26075
<26075=26079,26076
<26076=26077
<26077=26078
<26079=26080
<26080=26082,26081
<26083=26084
<26084=26086,26085
<26087=26094,26088
<26088=26089
<26089=26091,26090
<26091=26093,26092
<26094=26095
<26095=26097,26096
<26098=26099
<26099=26103,26100
<26100=26101
<26101=26102
<26103=26104
<26104=26106,26105
<26107=26108
<26108=26112,26109
<26109=26111,26110
<26112=26114,26113
<26115=26116
<26116=26133,26117
<26117=26131,26118
<26118=26125,26119
<26119=26120
<26120=26124,26121
<26121=26123,26122
<26125=26126
<26126=26130,26127
<26127=26129,26128
<26131=26132
<26133=26135,26134
<26136=26137
<26137=26142,26141,26138
<26138=26140,26139
<26143=26145,26144
<26146=26147
<26147=26149,26148
<26150=26151
<26151=26152
<26152=26157,26156,26153
<26153=26155,26154
<26158=26175,26159
<26159=26160
<26160=26174,26161
<26161=26172,26162
<26162=26163
<26163=26164
<26164=26168,26165
<26165=26166
<26166=26167
<26168=26169
<26169=26171,26170
<26172=26173
<26175=26176
<26176=26180,26177
<26177=26178
<26178=26179
<26180=26181
<26181=26183,26182
<26184=26185
<26185=26190,26189,26186
<26186=26188,26187
<26191=26208,26192
<26192=26193
<26193=26207,26194
<26194=26205,26195
<26195=26196
<26196=26197
<26197=26201,26198
<26198=26199
<26199=26200
<26201=26202
<26202=26204,26203
<26205=26206
<26208=26209
<26209=26213,26210
<26210=26211
<26211=26212
<26213=26214
<26214=26216,26215
<26217=26218
<26218=26223,26222,26219
<26219=26221,26220
<26224=26242,26225
<26225=26230,26226
<26226=26227
<26227=26229,26228
<26230=26231
<26231=26241,26240,26232
<26232=26236,26233
<26233=26234
<26234=26235
<26236=26237
<26237=26239,26238
<26242=26243
<26243=26247,26244
<26244=26245
<26245=26246
<26247=26248
<26248=26250,26249
<26251=26252
<26252=26257,26256,26253
<26253=26255,26254
<26258=26276,26259
<26259=26260
<26260=26261
<26261=26275,26262
<26262=26273,26263
<26263=26264
<26264=26265
<26265=26269,26266
<26266=26267
<26267=26268
<26269=26270
<26270=26272,26271
<26273=26274
<26276=26277
<26277=26281,26278
<26278=26279
<26279=26280
<26281=26282
<26282=26284,26283
<26285=26286
<26286=26291,26290,26287
<26287=26289,26288
<26292=26309,26293
<26293=26298,26294
<26294=26295
<26295=26297,26296
<26298=26299
<26299=26308,26300
<26300=26304,26301
<26301=26302
<26302=26303
<26304=26305
<26305=26307,26306
<26309=26310
<26310=26314,26311
<26311=26312
<26312=26313
<26314=26315
<26315=26317,26316
<26318=26325,26319
<26319=26324,26323,26320
<26320=26322,26321
<26325=26327,26326
<26328=26329
<26329=26343,26330
<26330=26341,26331
<26331=26332
<26332=26333
<26333=26337,26334
<26334=26335
<26335=26336
<26337=26338
<26338=26340,26339
<26341=26342
<26344=26345
<26345=26359,26346
<26346=26357,26347
<26347=26348
<26348=26349
<26349=26353,26350
<26350=26351
<26351=26352
<26353=26354
<26354=26356,26355
<26357=26358
<26360=26361
<26361=26375,26362
<26362=26373,26363
<26363=26364
<26364=26365
<26365=26369,26366
<26366=26367
<26367=26368
<26369=26370
<26370=26372,26371
<26373=26374
<26376=26377
<26377=26379,26378
<26380=26384,26381
<26381=26383,26382
<26384=26386,26385
<26387=26388
<26388=26405,26404,26389
<26389=26403,26390
<26390=26401,26391
<26391=26392
<26392=26393
<26393=26397,26394
<26394=26395
<26395=26396
<26397=26398
<26398=26400,26399
<26401=26402
<26406=26407
<26408=26409
<26409=26421,26420,26410
<26410=26419,26411
<26411=26415,26412
<26412=26413
<26413=26414
<26415=26416
<26416=26418,26417
<26422=26813,26423
<26423=26799,26795,26766,26737,26700,26693,26624,26586,26572,26556,26551,26541,26523,26514,26508,26502,26495,26491,26460,26448,26435,26424
<26424=26425
<26425=26434,26426
<26426=26430,26427
<26427=26428
<26428=26429
<26430=26431
<26431=26433,26432
<26435=26444,26436
<26436=26437
<26437=26438
<26438=26442,26439
<26439=26440
<26440=26441
<26442=26443
<26444=26445
<26445=26447,26446
<26448=26458,26449
<26449=26450
<26450=26454,26451
<26451=26452
<26452=26453
<26454=26455
<26455=26457,26456
<26458=26459
<26460=26482,26461
<26461=26471,26462
<26462=26463
<26463=26470,26464
<26464=26468,26465
<26465=26466
<26466=26467
<26468=26469
<26471=26472
<26472=26481,26473
<26473=26477,26474
<26474=26475
<26475=26476
<26477=26478
<26478=26480,26479
<26482=26483
<26483=26487,26484
<26484=26485
<26485=26486
<26487=26488
<26488=26490,26489
<26491=26492
<26492=26494,26493
<26495=26496
<26496=26501,26500,26497
<26497=26499,26498
<26502=26503
<26503=26505,26504
<26505=26507,26506
<26508=26509
<26509=26511,26510
<26511=26513,26512
<26514=26515
<26515=26517,26516
<26517=26518
<26518=26520,26519
<26520=26522,26521
<26523=26524
<26524=26540,26525
<26525=26539,26526
<26526=26538,26527
<26527=26533,26528
<26528=26530,26529
<26530=26532,26531
<26533=26535,26534
<26535=26537,26536
<26541=26548,26545,26542
<26542=26544,26543
<26545=26547,26546
<26548=26550,26549
<26551=26552
<26552=26555,26554,26553
<26556=26557
<26557=26568,26558
<26558=26566,26559
<26559=26560
<26560=26562,26561
<26562=26563
<26563=26565,26564
<26566=26567
<26568=26569
<26569=26571,26570
<26572=26573
<26573=26585,26584,26574
<26574=26583,26575
<26575=26579,26576
<26576=26577
<26577=26578
<26579=26580
<26580=26582,26581
<26586=26615,26587
<26587=26588
<26588=26589
<26589=26611,26590
<26590=26609,26591
<26591=26592
<26592=26606,26593
<26593=26604,26594
<26594=26595
<26595=26596
<26596=26600,26597
<26597=26598
<26598=26599
<26600=26601
<26601=26603,26602
<26604=26605
<26606=26608,26607
<26609=26610
<26611=26612
<26612=26614,26613
<26615=26616
<26616=26620,26617
<26617=26618
<26618=26619
<26620=26621
<26621=26623,26622
<26624=26684,26625
<26625=26680,26653,26626
<26626=26627
<26627=26649,26628
<26628=26647,26629
<26629=26630
<26630=26644,26631
<26631=26642,26632
<26632=26633
<26633=26634
<26634=26638,26635
<26635=26636
<26636=26637
<26638=26639
<26639=26641,26640
<26642=26643
<26644=26646,26645
<26647=26648
<26649=26650
<26650=26652,26651
<26653=26654
<26654=26676,26655
<26655=26674,26656
<26656=26657
<26657=26671,26658
<26658=26669,26659
<26659=26660
<26660=26661
<26661=26665,26662
<26662=26663
<26663=26664
<26665=26666
<26666=26668,26667
<26669=26670
<26671=26673,26672
<26674=26675
<26676=26677
<26677=26679,26678
<26680=26681
<26681=26683,26682
<26684=26685
<26685=26689,26686
<26686=26687
<26687=26688
<26689=26690
<26690=26692,26691
<26693=26694
<26694=26699,26698,26695
<26695=26697,26696
<26700=26728,26701
<26701=26702
<26702=26724,26703
<26703=26722,26704
<26704=26705
<26705=26719,26706
<26706=26717,26707
<26707=26708
<26708=26709
<26709=26713,26710
<26710=26711
<26711=26712
<26713=26714
<26714=26716,26715
<26717=26718
<26719=26721,26720
<26722=26723
<26724=26725
<26725=26727,26726
<26728=26729
<26729=26733,26730
<26730=26731
<26731=26732
<26733=26734
<26734=26736,26735
<26737=26738
<26738=26762,26739
<26739=26760,26740
<26740=26741
<26741=26755,26742
<26742=26753,26743
<26743=26744
<26744=26745
<26745=26749,26746
<26746=26747
<26747=26748
<26749=26750
<26750=26752,26751
<26753=26754
<26755=26757,26756
<26757=26759,26758
<26760=26761
<26762=26763
<26763=26765,26764
<26766=26767
<26767=26791,26768
<26768=26789,26769
<26769=26770
<26770=26784,26771
<26771=26782,26772
<26772=26773
<26773=26774
<26774=26778,26775
<26775=26776
<26776=26777
<26778=26779
<26779=26781,26780
<26782=26783
<26784=26786,26785
<26786=26788,26787
<26789=26790
<26791=26792
<26792=26794,26793
<26795=26796
<26796=26798,26797
<26799=26800
<26800=26812,26811,26801
<26801=26810,26802
<26802=26806,26803
<26803=26804
<26804=26805
<26806=26807
<26807=26809,26808
<26813=26814
<26815=26816
<26816=26828,26827,26817
<26817=26826,26818
<26818=26822,26819
<26819=26820
<26820=26821
<26822=26823
<26823=26825,26824
<26829=27075,26830
<26830=27061,27029,27010,26985,26960,26942,26917,26892,26867,26842,26831
<26831=26832
<26832=26841,26833
<26833=26837,26834
<26834=26835
<26835=26836
<26837=26838
<26838=26840,26839
<26842=26843
<26843=26863,26844
<26844=26861,26845
<26845=26846
<26846=26860,26847
<26847=26858,26848
<26848=26849
<26849=26850
<26850=26854,26851
<26851=26852
<26852=26853
<26854=26855
<26855=26857,26856
<26858=26859
<26861=26862
<26863=26864
<26864=26866,26865
<26867=26868
<26868=26888,26869
<26869=26886,26870
<26870=26871
<26871=26885,26872
<26872=26883,26873
<26873=26874
<26874=26875
<26875=26879,26876
<26876=26877
<26877=26878
<26879=26880
<26880=26882,26881
<26883=26884
<26886=26887
<26888=26889
<26889=26891,26890
<26892=26893
<26893=26913,26894
<26894=26911,26895
<26895=26896
<26896=26910,26897
<26897=26908,26898
<26898=26899
<26899=26900
<26900=26904,26901
<26901=26902
<26902=26903
<26904=26905
<26905=26907,26906
<26908=26909
<26911=26912
<26913=26914
<26914=26916,26915
<26917=26918
<26918=26938,26919
<26919=26936,26920
<26920=26921
<26921=26935,26922
<26922=26933,26923
<26923=26924
<26924=26925
<26925=26929,26926
<26926=26927
<26927=26928
<26929=26930
<26930=26932,26931
<26933=26934
<26936=26937
<26938=26939
<26939=26941,26940
<26942=26943
<26943=26956,26944
<26944=26954,26945
<26945=26946
<26946=26950,26947
<26947=26948
<26948=26949
<26950=26951
<26951=26953,26952
<26954=26955
<26956=26957
<26957=26959,26958
<26960=26961
<26961=26981,26962
<26962=26979,26963
<26963=26964
<26964=26978,26965
<26965=26976,26966
<26966=26967
<26967=26968
<26968=26972,26969
<26969=26970
<26970=26971
<26972=26973
<26973=26975,26974
<26976=26977
<26979=26980
<26981=26982
<26982=26984,26983
<26985=26986
<26986=27006,26987
<26987=27004,26988
<26988=26989
<26989=27003,26990
<26990=27001,26991
<26991=26992
<26992=26993
<26993=26997,26994
<26994=26995
<26995=26996
<26997=26998
<26998=27000,26999
<27001=27002
<27004=27005
<27006=27007
<27007=27009,27008
<27010=27026,27023,27020,27017,27014,27011
<27011=27013,27012
<27014=27016,27015
<27017=27019,27018
<27020=27022,27021
<27023=27025,27024
<27026=27028,27027
<27029=27039,27030
<27030=27032,27031
<27032=27033
<27033=27037,27034
<27034=27035
<27035=27036
<27037=27038
<27039=27040
<27040=27051,27041
<27041=27050,27042
<27042=27046,27043
<27043=27044
<27044=27045
<27046=27047
<27047=27049,27048
<27051=27060,27052
<27052=27056,27053
<27053=27054
<27054=27055
<27056=27057
<27057=27059,27058
<27061=27062
<27062=27074,27073,27063
<27063=27072,27064
<27064=27068,27065
<27065=27066
<27066=27067
<27068=27069
<27069=27071,27070
<27075=27076
<27077=27078
<27078=27090,27089,27079
<27079=27088,27080
<27080=27084,27081
<27081=27082
<27082=27083
<27084=27085
<27085=27087,27086
<27091=27496,27092
<27092=27482,27463,27450,27443,27436,27432,27428,27403,27378,27353,27328,27303,27278,27253,27218,27217,27216,27215,27214,27213,27211,27196,27187,27178,27167,27122,27113,27104,27093
<27093=27094
<27094=27103,27095
<27095=27099,27096
<27096=27097
<27097=27098
<27099=27100
<27100=27102,27101
<27104=27105
<27105=27109,27106
<27106=27107
<27107=27108
<27109=27110
<27110=27112,27111
<27113=27114
<27114=27120,27115
<27115=27118,27116
<27116=27117
<27118=27119
<27120=27121
<27122=27163,27123
<27123=27124
<27124=27125
<27125=27160,27126
<27126=27158,27127
<27127=27143,27128
<27128=27129
<27129=27131,27130
<27131=27137,27132
<27132=27134,27133
<27134=27136,27135
<27137=27139,27138
<27139=27140
<27140=27142,27141
<27143=27144
<27144=27146,27145
<27146=27152,27147
<27147=27149,27148
<27149=27151,27150
<27152=27154,27153
<27154=27155
<27155=27157,27156
<27158=27159
<27160=27162,27161
<27163=27164
<27164=27166,27165
<27167=27168
<27168=27174,27169
<27169=27172,27170
<27170=27171
<27172=27173
<27174=27175
<27175=27177,27176
<27178=27179
<27179=27183,27180
<27180=27181
<27181=27182
<27183=27184
<27184=27186,27185
<27187=27188
<27188=27192,27189
<27189=27190
<27190=27191
<27192=27193
<27193=27195,27194
<27196=27197
<27197=27208,27198
<27198=27206,27199
<27199=27204,27202,27200
<27200=27201
<27202=27203
<27204=27205
<27206=27207
<27208=27210,27209
<27211=27212
<27218=27244,27219
<27219=27220
<27220=27240,27221
<27221=27238,27222
<27222=27223
<27223=27237,27224
<27224=27235,27225
<27225=27226
<27226=27227
<27227=27231,27228
<27228=27229
<27229=27230
<27231=27232
<27232=27234,27233
<27235=27236
<27238=27239
<27240=27241
<27241=27243,27242
<27244=27245
<27245=27249,27246
<27246=27247
<27247=27248
<27249=27250
<27250=27252,27251
<27253=27254
<27254=27274,27255
<27255=27272,27256
<27256=27257
<27257=27259,27258
<27259=27260
<27260=27262,27261
<27262=27271,27263
<27263=27267,27264
<27264=27265
<27265=27266
<27267=27268
<27268=27270,27269
<27272=27273
<27274=27275
<27275=27277,27276
<27278=27279
<27279=27299,27280
<27280=27297,27281
<27281=27282
<27282=27296,27283
<27283=27294,27284
<27284=27285
<27285=27286
<27286=27290,27287
<27287=27288
<27288=27289
<27290=27291
<27291=27293,27292
<27294=27295
<27297=27298
<27299=27300
<27300=27302,27301
<27303=27304
<27304=27324,27305
<27305=27322,27306
<27306=27307
<27307=27309,27308
<27309=27310
<27310=27312,27311
<27312=27321,27313
<27313=27317,27314
<27314=27315
<27315=27316
<27317=27318
<27318=27320,27319
<27322=27323
<27324=27325
<27325=27327,27326
<27328=27329
<27329=27349,27330
<27330=27347,27331
<27331=27332
<27332=27346,27333
<27333=27344,27334
<27334=27335
<27335=27336
<27336=27340,27337
<27337=27338
<27338=27339
<27340=27341
<27341=27343,27342
<27344=27345
<27347=27348
<27349=27350
<27350=27352,27351
<27353=27354
<27354=27374,27355
<27355=27372,27356
<27356=27357
<27357=27371,27358
<27358=27369,27359
<27359=27360
<27360=27361
<27361=27365,27362
<27362=27363
<27363=27364
<27365=27366
<27366=27368,27367
<27369=27370
<27372=27373
<27374=27375
<27375=27377,27376
<27378=27379
<27379=27399,27380
<27380=27397,27381
<27381=27382
<27382=27396,27383
<27383=27394,27384
<27384=27385
<27385=27386
<27386=27390,27387
<27387=27388
<27388=27389
<27390=27391
<27391=27393,27392
<27394=27395
<27397=27398
<27399=27400
<27400=27402,27401
<27403=27404
<27404=27424,27405
<27405=27422,27406
<27406=27407
<27407=27421,27408
<27408=27419,27409
<27409=27410
<27410=27411
<27411=27415,27412
<27412=27413
<27413=27414
<27415=27416
<27416=27418,27417
<27419=27420
<27422=27423
<27424=27425
<27425=27427,27426
<27428=27429
<27429=27431,27430
<27432=27433
<27433=27435,27434
<27436=27437
<27437=27442,27441,27438
<27438=27440,27439
<27443=27444
<27444=27449,27448,27445
<27445=27447,27446
<27450=27457,27451
<27451=27456,27455,27452
<27452=27454,27453
<27457=27462,27461,27458
<27458=27460,27459
<27463=27476,27470,27464
<27464=27469,27468,27465
<27465=27467,27466
<27470=27475,27474,27471
<27471=27473,27472
<27476=27481,27480,27477
<27477=27479,27478
<27482=27483
<27483=27495,27494,27484
<27484=27493,27485
<27485=27489,27486
<27486=27487
<27487=27488
<27489=27490
<27490=27492,27491
<27496=27497
<27498=27499
<27499=27511,27510,27500
<27500=27509,27501
<27501=27505,27502
<27502=27503
<27503=27504
<27505=27506
<27506=27508,27507
<27512=27761,27513
<27513=27760,27759,27758,27757,27756,27754,27741,27732,27718,27544,27537,27530,27525,27514
<27514=27515
<27515=27524,27516
<27516=27520,27517
<27517=27518
<27518=27519
<27520=27521
<27521=27523,27522
<27525=27526
<27526=27528,27527
<27528=27529
<27530=27531
<27531=27535,27532
<27532=27533
<27533=27534
<27535=27536
<27537=27538
<27538=27540,27539
<27540=27541
<27541=27543,27542
<27544=27716,27545
<27545=27712,27700,27686,27657,27599,27568,27557,27546
<27546=27547
<27547=27556,27548
<27548=27552,27549
<27549=27550
<27550=27551
<27552=27553
<27553=27555,27554
<27557=27558
<27558=27562,27559
<27559=27560
<27560=27561
<27562=27563
<27563=27565,27564
<27565=27567,27566
<27568=27590,27569
<27569=27570
<27570=27571
<27571=27587,27572
<27572=27586,27573
<27573=27584,27574
<27574=27575
<27575=27576
<27576=27580,27577
<27577=27578
<27578=27579
<27580=27581
<27581=27583,27582
<27584=27585
<27587=27589,27588
<27590=27591
<27591=27595,27592
<27592=27593
<27593=27594
<27595=27596
<27596=27598,27597
<27599=27648,27600
<27600=27636,27629,27623,27612,27601
<27601=27602
<27602=27606,27603
<27603=27604
<27604=27605
<27606=27607
<27607=27609,27608
<27609=27611,27610
<27612=27613
<27613=27617,27614
<27614=27615
<27615=27616
<27617=27618
<27618=27620,27619
<27620=27622,27621
<27623=27624
<27624=27628,27625
<27625=27627,27626
<27629=27633,27630
<27630=27632,27631
<27633=27635,27634
<27636=27637
<27637=27647,27646,27638
<27638=27642,27639
<27639=27640
<27640=27641
<27642=27643
<27643=27645,27644
<27648=27649
<27649=27653,27650
<27650=27651
<27651=27652
<27653=27654
<27654=27656,27655
<27657=27677,27658
<27658=27659
<27659=27660
<27660=27674,27661
<27661=27672,27662
<27662=27663
<27663=27664
<27664=27668,27665
<27665=27666
<27666=27667
<27668=27669
<27669=27671,27670
<27672=27673
<27674=27676,27675
<27677=27678
<27678=27682,27679
<27679=27680
<27680=27681
<27682=27683
<27683=27685,27684
<27686=27687
<27687=27699,27688
<27688=27694,27689
<27689=27691,27690
<27691=27693,27692
<27694=27696,27695
<27696=27698,27697
<27700=27701
<27701=27711,27710,27702
<27702=27706,27703
<27703=27704
<27704=27705
<27706=27707
<27707=27709,27708
<27712=27713
<27713=27715,27714
<27716=27717
<27718=27719
<27719=27731,27730,27720
<27720=27729,27721
<27721=27725,27722
<27722=27723
<27723=27724
<27725=27726
<27726=27728,27727
<27732=27733
<27733=27739,27734
<27734=27735
<27735=27736
<27736=27738,27737
<27739=27740
<27741=27742
<27742=27751,27743
<27743=27747,27744
<27744=27745
<27745=27746
<27747=27748
<27748=27750,27749
<27751=27753,27752
<27754=27755
<27761=27762
<27763=27764
<27764=27776,27775,27765
<27765=27774,27766
<27766=27770,27767
<27767=27768
<27768=27769
<27770=27771
<27771=27773,27772
<27777=27829,27778
<27778=27819,27807,27784,27779
<27779=27780
<27780=27782,27781
<27782=27783
<27784=27803,27785
<27785=27797,27786
<27786=27787
<27787=27795,27788
<27788=27793,27791,27789
<27789=27790
<27791=27792
<27793=27794
<27795=27796
<27797=27798
<27798=27802,27799
<27799=27801,27800
<27803=27804
<27804=27806,27805
<27807=27808
<27808=27818,27817,27809
<27809=27813,27810
<27810=27811
<27811=27812
<27813=27814
<27814=27816,27815
<27819=27826,27823,27820
<27820=27822,27821
<27823=27825,27824
<27826=27828,27827
<27829=27830
<27831=27832
<27832=27844,27843,27833
<27833=27842,27834
<27834=27838,27835
<27835=27836
<27836=27837
<27838=27839
<27839=27841,27840
<27845=29545,27849,27846
<27846=27847
<27847=27848
<27849=29531,29437,29377,29339,29301,29263,29219,29208,29163,29103,29047,29009,28916,28901,28764,28555,28378,28274,27972,27968,27914,27859,27850
<27850=27851
<27851=27855,27852
<27852=27853
<27853=27854
<27855=27856
<27856=27858,27857
<27859=27905,27860
<27860=27893,27879,27861
<27861=27862
<27862=27875,27863
<27863=27873,27864
<27864=27865
<27865=27869,27866
<27866=27867
<27867=27868
<27869=27870
<27870=27872,27871
<27873=27874
<27875=27876
<27876=27878,27877
<27879=27880
<27880=27892,27881
<27881=27889,27882
<27882=27886,27883
<27883=27885,27884
<27886=27888,27887
<27889=27891,27890
<27893=27894
<27894=27904,27903,27895
<27895=27899,27896
<27896=27897
<27897=27898
<27899=27900
<27900=27902,27901
<27905=27906
<27906=27910,27907
<27907=27908
<27908=27909
<27910=27911
<27911=27913,27912
<27914=27959,27915
<27915=27945,27934,27916
<27916=27917
<27917=27930,27918
<27918=27928,27919
<27919=27920
<27920=27924,27921
<27921=27922
<27922=27923
<27924=27925
<27925=27927,27926
<27928=27929
<27930=27931
<27931=27933,27932
<27934=27935
<27935=27944,27936
<27936=27940,27937
<27937=27938
<27938=27939
<27940=27941
<27941=27943,27942
<27945=27946
<27946=27957,27947
<27947=27948
<27948=27949
<27949=27953,27950
<27950=27951
<27951=27952
<27953=27954
<27954=27956,27955
<27957=27958
<27959=27960
<27960=27964,27961
<27961=27962
<27962=27963
<27964=27965
<27965=27967,27966
<27968=27969
<27969=27971,27970
<27972=28265,27973
<27973=28251,28250,28249,28248,28246,28237,28231,28138,28047,28038,28029,27990,27974
<27974=27975
<27975=27986,27976
<27976=27984,27977
<27977=27978
<27978=27980,27979
<27980=27981
<27981=27983,27982
<27984=27985
<27986=27987
<27987=27989,27988
<27990=27991
<27991=28026,27992
<27992=28024,27993
<27993=28009,27994
<27994=27995
<27995=27997,27996
<27997=28003,27998
<27998=28000,27999
<28000=28002,28001
<28003=28005,28004
<28005=28006
<28006=28008,28007
<28009=28010
<28010=28012,28011
<28012=28018,28013
<28013=28015,28014
<28015=28017,28016
<28018=28020,28019
<28020=28021
<28021=28023,28022
<28024=28025
<28026=28028,28027
<28029=28030
<28030=28036,28031
<28031=28034,28032
<28032=28033
<28034=28035
<28036=28037
<28038=28039
<28039=28043,28040
<28040=28041
<28041=28042
<28043=28044
<28044=28046,28045
<28047=28120,28048
<28048=28101,28082,28071,28060,28049
<28049=28050
<28050=28056,28051
<28051=28054,28052
<28052=28053
<28054=28055
<28056=28057
<28057=28059,28058
<28060=28061
<28061=28067,28062
<28062=28065,28063
<28063=28064
<28065=28066
<28067=28068
<28068=28070,28069
<28071=28072
<28072=28078,28073
<28073=28076,28074
<28074=28075
<28076=28077
<28078=28079
<28079=28081,28080
<28082=28083
<28083=28100,28099,28084
<28084=28098,28085
<28085=28096,28086
<28086=28087
<28087=28088
<28088=28092,28089
<28089=28090
<28090=28091
<28092=28093
<28093=28095,28094
<28096=28097
<28101=28102
<28102=28119,28118,28103
<28103=28117,28104
<28104=28115,28105
<28105=28106
<28106=28107
<28107=28111,28108
<28108=28109
<28109=28110
<28111=28112
<28112=28114,28113
<28115=28116
<28120=28121
<28121=28130,28122
<28122=28126,28123
<28123=28124
<28124=28125
<28126=28127
<28127=28129,28128
<28130=28134,28131
<28131=28132
<28132=28133
<28134=28135
<28135=28137,28136
<28138=28213,28139
<28139=28194,28175,28162,28151,28140
<28140=28141
<28141=28147,28142
<28142=28145,28143
<28143=28144
<28145=28146
<28147=28148
<28148=28150,28149
<28151=28152
<28152=28158,28153
<28153=28156,28154
<28154=28155
<28156=28157
<28158=28159
<28159=28161,28160
<28162=28163
<28163=28172,28164
<28164=28170,28165
<28165=28168,28166
<28166=28167
<28168=28169
<28170=28171
<28172=28174,28173
<28175=28176
<28176=28193,28192,28177
<28177=28191,28178
<28178=28189,28179
<28179=28180
<28180=28181
<28181=28185,28182
<28182=28183
<28183=28184
<28185=28186
<28186=28188,28187
<28189=28190
<28194=28195
<28195=28212,28211,28196
<28196=28210,28197
<28197=28208,28198
<28198=28199
<28199=28200
<28200=28204,28201
<28201=28202
<28202=28203
<28204=28205
<28205=28207,28206
<28208=28209
<28213=28214
<28214=28223,28215
<28215=28219,28216
<28216=28217
<28217=28218
<28219=28220
<28220=28222,28221
<28223=28227,28224
<28224=28225
<28225=28226
<28227=28228
<28228=28230,28229
<28231=28232
<28232=28234,28233
<28234=28236,28235
<28237=28238
<28238=28242,28239
<28239=28240
<28240=28241
<28242=28243
<28243=28245,28244
<28246=28247
<28251=28252
<28252=28264,28263,28253
<28253=28262,28254
<28254=28258,28255
<28255=28256
<28256=28257
<28258=28259
<28259=28261,28260
<28265=28266
<28266=28270,28267
<28267=28268
<28268=28269
<28270=28271
<28271=28273,28272
<28274=28369,28283,28275
<28275=28276
<28276=28277
<28277=28278
<28278=28280,28279
<28280=28282,28281
<28283=28350,28296,28290,28284
<28284=28285
<28285=28287,28286
<28287=28289,28288
<28290=28291
<28291=28293,28292
<28293=28295,28294
<28296=28341,28304,28297
<28297=28298
<28298=28299
<28299=28301,28300
<28301=28303,28302
<28304=28332,28321,28305
<28305=28306
<28306=28317,28307
<28307=28315,28308
<28308=28309
<28309=28311,28310
<28311=28312
<28312=28314,28313
<28315=28316
<28317=28318
<28318=28320,28319
<28321=28322
<28322=28328,28323
<28323=28326,28324
<28324=28325
<28326=28327
<28328=28329
<28329=28331,28330
<28332=28333
<28333=28337,28334
<28334=28335
<28335=28336
<28337=28338
<28338=28340,28339
<28341=28342
<28342=28349,28343
<28343=28345,28344
<28345=28346
<28346=28348,28347
<28350=28351
<28351=28368,28367,28352
<28352=28366,28353
<28353=28364,28354
<28354=28355
<28355=28356
<28356=28360,28357
<28357=28358
<28358=28359
<28360=28361
<28361=28363,28362
<28364=28365
<28369=28370
<28370=28374,28371
<28371=28372
<28372=28373
<28374=28375
<28375=28377,28376
<28378=28546,28379
<28379=28527,28515,28501,28494,28484,28478,28468,28462,28452,28446,28436,28430,28420,28414,28404,28398,28380
<28380=28381
<28381=28394,28382
<28382=28392,28383
<28383=28384
<28384=28388,28385
<28385=28386
<28386=28387
<28388=28389
<28389=28391,28390
<28392=28393
<28394=28395
<28395=28397,28396
<28398=28399
<28399=28401,28400
<28401=28403,28402
<28404=28405
<28405=28413,28406
<28406=28412,28407
<28407=28409,28408
<28409=28411,28410
<28414=28415
<28415=28417,28416
<28417=28419,28418
<28420=28421
<28421=28429,28422
<28422=28428,28423
<28423=28425,28424
<28425=28427,28426
<28430=28431
<28431=28433,28432
<28433=28435,28434
<28436=28437
<28437=28445,28438
<28438=28444,28439
<28439=28441,28440
<28441=28443,28442
<28446=28447
<28447=28449,28448
<28449=28451,28450
<28452=28453
<28453=28461,28454
<28454=28460,28455
<28455=28457,28456
<28457=28459,28458
<28462=28463
<28463=28465,28464
<28465=28467,28466
<28468=28469
<28469=28477,28470
<28470=28476,28471
<28471=28473,28472
<28473=28475,28474
<28478=28479
<28479=28481,28480
<28481=28483,28482
<28484=28485
<28485=28493,28486
<28486=28492,28487
<28487=28489,28488
<28489=28491,28490
<28494=28495
<28495=28500,28499,28496
<28496=28498,28497
<28501=28502
<28502=28514,28503
<28503=28513,28504
<28504=28512,28505
<28505=28511,28506
<28506=28510,28507
<28507=28509,28508
<28515=28516
<28516=28526,28525,28517
<28517=28521,28518
<28518=28519
<28519=28520
<28521=28522
<28522=28524,28523
<28527=28543,28540,28537,28534,28531,28528
<28528=28530,28529
<28531=28533,28532
<28534=28536,28535
<28537=28539,28538
<28540=28542,28541
<28543=28545,28544
<28546=28547
<28547=28551,28548
<28548=28549
<28549=28550
<28551=28552
<28552=28554,28553
<28555=28755,28556
<28556=28743,28724,28710,28703,28693,28687,28677,28671,28661,28655,28645,28639,28629,28623,28613,28607,28597,28591,28581,28575,28557
<28557=28558
<28558=28571,28559
<28559=28569,28560
<28560=28561
<28561=28565,28562
<28562=28563
<28563=28564
<28565=28566
<28566=28568,28567
<28569=28570
<28571=28572
<28572=28574,28573
<28575=28576
<28576=28578,28577
<28578=28580,28579
<28581=28582
<28582=28590,28583
<28583=28589,28584
<28584=28586,28585
<28586=28588,28587
<28591=28592
<28592=28594,28593
<28594=28596,28595
<28597=28598
<28598=28606,28599
<28599=28605,28600
<28600=28602,28601
<28602=28604,28603
<28607=28608
<28608=28610,28609
<28610=28612,28611
<28613=28614
<28614=28622,28615
<28615=28621,28616
<28616=28618,28617
<28618=28620,28619
<28623=28624
<28624=28626,28625
<28626=28628,28627
<28629=28630
<28630=28638,28631
<28631=28637,28632
<28632=28634,28633
<28634=28636,28635
<28639=28640
<28640=28642,28641
<28642=28644,28643
<28645=28646
<28646=28654,28647
<28647=28653,28648
<28648=28650,28649
<28650=28652,28651
<28655=28656
<28656=28658,28657
<28658=28660,28659
<28661=28662
<28662=28670,28663
<28663=28669,28664
<28664=28666,28665
<28666=28668,28667
<28671=28672
<28672=28674,28673
<28674=28676,28675
<28677=28678
<28678=28686,28679
<28679=28685,28680
<28680=28682,28681
<28682=28684,28683
<28687=28688
<28688=28690,28689
<28690=28692,28691
<28693=28694
<28694=28702,28695
<28695=28701,28696
<28696=28698,28697
<28698=28700,28699
<28703=28704
<28704=28709,28708,28705
<28705=28707,28706
<28710=28711
<28711=28723,28712
<28712=28722,28713
<28713=28721,28714
<28714=28720,28715
<28715=28719,28716
<28716=28718,28717
<28724=28740,28737,28734,28731,28728,28725
<28725=28727,28726
<28728=28730,28729
<28731=28733,28732
<28734=28736,28735
<28737=28739,28738
<28740=28742,28741
<28743=28744
<28744=28754,28753,28745
<28745=28749,28746
<28746=28747
<28747=28748
<28749=28750
<28750=28752,28751
<28755=28756
<28756=28760,28757
<28757=28758
<28758=28759
<28760=28761
<28761=28763,28762
<28764=28892,28765
<28765=28837,28782,28777,28766
<28766=28767
<28767=28773,28768
<28768=28771,28769
<28769=28770
<28771=28772
<28773=28774
<28774=28776,28775
<28777=28778
<28778=28780,28779
<28780=28781
<28782=28828,28783
<28783=28816,28802,28784
<28784=28785
<28785=28798,28786
<28786=28796,28787
<28787=28788
<28788=28792,28789
<28789=28790
<28790=28791
<28792=28793
<28793=28795,28794
<28796=28797
<28798=28799
<28799=28801,28800
<28802=28803
<28803=28815,28804
<28804=28812,28805
<28805=28809,28806
<28806=28808,28807
<28809=28811,28810
<28812=28814,28813
<28816=28817
<28817=28827,28826,28818
<28818=28822,28819
<28819=28820
<28820=28821
<28822=28823
<28823=28825,28824
<28828=28829
<28829=28833,28830
<28830=28831
<28831=28832
<28833=28834
<28834=28836,28835
<28837=28883,28838
<28838=28871,28857,28839
<28839=28840
<28840=28853,28841
<28841=28851,28842
<28842=28843
<28843=28847,28844
<28844=28845
<28845=28846
<28847=28848
<28848=28850,28849
<28851=28852
<28853=28854
<28854=28856,28855
<28857=28858
<28858=28870,28859
<28859=28867,28860
<28860=28864,28861
<28861=28863,28862
<28864=28866,28865
<28867=28869,28868
<28871=28872
<28872=28882,28881,28873
<28873=28877,28874
<28874=28875
<28875=28876
<28877=28878
<28878=28880,28879
<28883=28884
<28884=28888,28885
<28885=28886
<28886=28887
<28888=28889
<28889=28891,28890
<28892=28893
<28893=28897,28894
<28894=28895
<28895=28896
<28897=28898
<28898=28900,28899
<28901=28902
<28902=28915,28903
<28903=28914,28904
<28904=28912,28905
<28905=28910,28908,28906
<28906=28907
<28908=28909
<28910=28911
<28912=28913
<28916=29000,28925,28917
<28917=28918
<28918=28919
<28919=28920
<28920=28922,28921
<28922=28924,28923
<28925=28981,28926
<28926=28972,28935,28927
<28927=28928
<28928=28929
<28929=28930
<28930=28932,28931
<28932=28934,28933
<28935=28963,28952,28936
<28936=28937
<28937=28948,28938
<28938=28946,28939
<28939=28940
<28940=28942,28941
<28942=28943
<28943=28945,28944
<28946=28947
<28948=28949
<28949=28951,28950
<28952=28953
<28953=28959,28954
<28954=28957,28955
<28955=28956
<28957=28958
<28959=28960
<28960=28962,28961
<28963=28964
<28964=28968,28965
<28965=28966
<28966=28967
<28968=28969
<28969=28971,28970
<28972=28973
<28973=28980,28974
<28974=28976,28975
<28976=28977
<28977=28979,28978
<28981=28982
<28982=28999,28998,28983
<28983=28997,28984
<28984=28995,28985
<28985=28986
<28986=28987
<28987=28991,28988
<28988=28989
<28989=28990
<28991=28992
<28992=28994,28993
<28995=28996
<29000=29001
<29001=29005,29002
<29002=29003
<29003=29004
<29005=29006
<29006=29008,29007
<29009=29038,29010
<29010=29027,29011
<29011=29012
<29012=29023,29013
<29013=29021,29014
<29014=29015
<29015=29017,29016
<29017=29018
<29018=29020,29019
<29021=29022
<29023=29024
<29024=29026,29025
<29027=29028
<29028=29037,29029
<29029=29033,29030
<29030=29031
<29031=29032
<29033=29034
<29034=29036,29035
<29038=29039
<29039=29043,29040
<29040=29041
<29041=29042
<29043=29044
<29044=29046,29045
<29047=29094,29048
<29048=29078,29074,29070,29049
<29049=29050
<29050=29066,29051
<29051=29064,29052
<29052=29053
<29053=29055,29054
<29055=29056
<29056=29058,29057
<29058=29060,29059
<29060=29061
<29061=29063,29062
<29064=29065
<29066=29067
<29067=29069,29068
<29070=29071
<29071=29073,29072
<29074=29075
<29075=29077,29076
<29078=29079
<29079=29093,29080
<29080=29091,29081
<29081=29082
<29082=29083
<29083=29087,29084
<29084=29085
<29085=29086
<29087=29088
<29088=29090,29089
<29091=29092
<29094=29095
<29095=29099,29096
<29096=29097
<29097=29098
<29099=29100
<29100=29102,29101
<29103=29154,29104
<29104=29142,29138,29127,29123,29117,29105
<29105=29106
<29106=29115,29107
<29107=29108
<29108=29109
<29109=29111,29110
<29111=29112
<29112=29114,29113
<29115=29116
<29117=29118
<29118=29122,29119
<29119=29121,29120
<29123=29124
<29124=29126,29125
<29127=29128
<29128=29134,29129
<29129=29132,29130
<29130=29131
<29132=29133
<29134=29135
<29135=29137,29136
<29138=29139
<29139=29141,29140
<29142=29143
<29143=29153,29152,29144
<29144=29148,29145
<29145=29146
<29146=29147
<29148=29149
<29149=29151,29150
<29154=29155
<29155=29159,29156
<29156=29157
<29157=29158
<29159=29160
<29160=29162,29161
<29163=29199,29164
<29164=29187,29183,29165
<29165=29166
<29166=29179,29167
<29167=29177,29168
<29168=29169
<29169=29173,29170
<29170=29171
<29171=29172
<29173=29174
<29174=29176,29175
<29177=29178
<29179=29180
<29180=29182,29181
<29183=29184
<29184=29186,29185
<29187=29188
<29188=29198,29197,29189
<29189=29193,29190
<29190=29191
<29191=29192
<29193=29194
<29194=29196,29195
<29199=29200
<29200=29204,29201
<29201=29202
<29202=29203
<29204=29205
<29205=29207,29206
<29208=29209
<29209=29213,29210
<29210=29211
<29211=29212
<29213=29214
<29214=29216,29215
<29216=29218,29217
<29219=29254,29226,29220
<29220=29221
<29221=29222
<29222=29223
<29223=29225,29224
<29226=29238,29227
<29227=29228
<29228=29234,29229
<29229=29232,29230
<29230=29231
<29232=29233
<29234=29235
<29235=29237,29236
<29238=29239
<29239=29253,29240
<29240=29251,29241
<29241=29242
<29242=29243
<29243=29247,29244
<29244=29245
<29245=29246
<29247=29248
<29248=29250,29249
<29251=29252
<29254=29255
<29255=29259,29256
<29256=29257
<29257=29258
<29259=29260
<29260=29262,29261
<29263=29292,29264
<29264=29281,29265
<29265=29266
<29266=29277,29267
<29267=29275,29268
<29268=29269
<29269=29271,29270
<29271=29272
<29272=29274,29273
<29275=29276
<29277=29278
<29278=29280,29279
<29281=29282
<29282=29291,29283
<29283=29287,29284
<29284=29285
<29285=29286
<29287=29288
<29288=29290,29289
<29292=29293
<29293=29297,29294
<29294=29295
<29295=29296
<29297=29298
<29298=29300,29299
<29301=29330,29302
<29302=29319,29303
<29303=29304
<29304=29315,29305
<29305=29313,29306
<29306=29307
<29307=29309,29308
<29309=29310
<29310=29312,29311
<29313=29314
<29315=29316
<29316=29318,29317
<29319=29320
<29320=29329,29321
<29321=29325,29322
<29322=29323
<29323=29324
<29325=29326
<29326=29328,29327
<29330=29331
<29331=29335,29332
<29332=29333
<29333=29334
<29335=29336
<29336=29338,29337
<29339=29368,29340
<29340=29352,29341
<29341=29342
<29342=29348,29343
<29343=29346,29344
<29344=29345
<29346=29347
<29348=29349
<29349=29351,29350
<29352=29353
<29353=29367,29354
<29354=29365,29355
<29355=29356
<29356=29357
<29357=29361,29358
<29358=29359
<29359=29360
<29361=29362
<29362=29364,29363
<29365=29366
<29368=29369
<29369=29373,29370
<29370=29371
<29371=29372
<29373=29374
<29374=29376,29375
<29377=29428,29378
<29378=29424,29408,29392,29379
<29379=29380
<29380=29388,29381
<29381=29386,29382
<29382=29383
<29383=29385,29384
<29386=29387
<29388=29389
<29389=29391,29390
<29392=29393
<29393=29407,29394
<29394=29405,29395
<29395=29396
<29396=29397
<29397=29401,29398
<29398=29399
<29399=29400
<29401=29402
<29402=29404,29403
<29405=29406
<29408=29409
<29409=29423,29410
<29410=29421,29411
<29411=29412
<29412=29413
<29413=29417,29414
<29414=29415
<29415=29416
<29417=29418
<29418=29420,29419
<29421=29422
<29424=29425
<29425=29427,29426
<29428=29429
<29429=29433,29430
<29430=29431
<29431=29432
<29433=29434
<29434=29436,29435
<29437=29522,29487,29438
<29438=29439
<29439=29478,29443,29440
<29440=29441
<29441=29442
<29443=29467,29460,29444
<29444=29445
<29445=29456,29446
<29446=29454,29447
<29447=29448
<29448=29450,29449
<29450=29451
<29451=29453,29452
<29454=29455
<29456=29457
<29457=29459,29458
<29460=29461
<29461=29465,29462
<29462=29463
<29463=29464
<29465=29466
<29467=29468
<29468=29477,29469
<29469=29473,29470
<29470=29471
<29471=29472
<29473=29474
<29474=29476,29475
<29478=29479
<29479=29483,29480
<29480=29481
<29481=29482
<29483=29484
<29484=29486,29485
<29487=29511,29504,29488
<29488=29489
<29489=29500,29490
<29490=29498,29491
<29491=29492
<29492=29494,29493
<29494=29495
<29495=29497,29496
<29498=29499
<29500=29501
<29501=29503,29502
<29504=29505
<29505=29509,29506
<29506=29507
<29507=29508
<29509=29510
<29511=29512
<29512=29521,29513
<29513=29517,29514
<29514=29515
<29515=29516
<29517=29518
<29518=29520,29519
<29522=29523
<29523=29527,29524
<29524=29525
<29525=29526
<29527=29528
<29528=29530,29529
<29531=29532
<29532=29544,29543,29533
<29533=29542,29534
<29534=29538,29535
<29535=29536
<29536=29537
<29538=29539
<29539=29541,29540
<29545=29546
<29547=29548
<29548=29560,29559,29549
<29549=29558,29550
<29550=29554,29551
<29551=29552
<29552=29553
<29554=29555
<29555=29557,29556
<29561=29917,29562
<29562=29916,29915,29914,29913,29912,29910,29898,29881,29865,29849,29845,29805,29793,29787,29769,29732,29723,29709,29691,29673,29655,29637,29619,29601,29583,29574,29563
<29563=29564
<29564=29573,29565
<29565=29569,29566
<29566=29567
<29567=29568
<29569=29570
<29570=29572,29571
<29574=29575
<29575=29579,29576
<29576=29577
<29577=29578
<29579=29580
<29580=29582,29581
<29583=29584
<29584=29597,29585
<29585=29595,29586
<29586=29587
<29587=29591,29588
<29588=29589
<29589=29590
<29591=29592
<29592=29594,29593
<29595=29596
<29597=29598
<29598=29600,29599
<29601=29602
<29602=29615,29603
<29603=29613,29604
<29604=29605
<29605=29609,29606
<29606=29607
<29607=29608
<29609=29610
<29610=29612,29611
<29613=29614
<29615=29616
<29616=29618,29617
<29619=29620
<29620=29633,29621
<29621=29631,29622
<29622=29623
<29623=29627,29624
<29624=29625
<29625=29626
<29627=29628
<29628=29630,29629
<29631=29632
<29633=29634
<29634=29636,29635
<29637=29638
<29638=29651,29639
<29639=29649,29640
<29640=29641
<29641=29645,29642
<29642=29643
<29643=29644
<29645=29646
<29646=29648,29647
<29649=29650
<29651=29652
<29652=29654,29653
<29655=29656
<29656=29669,29657
<29657=29667,29658
<29658=29659
<29659=29663,29660
<29660=29661
<29661=29662
<29663=29664
<29664=29666,29665
<29667=29668
<29669=29670
<29670=29672,29671
<29673=29674
<29674=29687,29675
<29675=29685,29676
<29676=29677
<29677=29681,29678
<29678=29679
<29679=29680
<29681=29682
<29682=29684,29683
<29685=29686
<29687=29688
<29688=29690,29689
<29691=29692
<29692=29705,29693
<29693=29703,29694
<29694=29695
<29695=29699,29696
<29696=29697
<29697=29698
<29699=29700
<29700=29702,29701
<29703=29704
<29705=29706
<29706=29708,29707
<29709=29710
<29710=29722,29721,29711
<29711=29720,29712
<29712=29716,29713
<29713=29714
<29714=29715
<29716=29717
<29717=29719,29718
<29723=29724
<29724=29730,29725
<29725=29728,29726
<29726=29727
<29728=29729
<29730=29731
<29732=29733
<29733=29766,29734
<29734=29764,29735
<29735=29750,29736
<29736=29737
<29737=29748,29738
<29738=29739
<29739=29740
<29740=29744,29741
<29741=29742
<29742=29743
<29744=29745
<29745=29747,29746
<29748=29749
<29750=29751
<29751=29762,29752
<29752=29753
<29753=29754
<29754=29758,29755
<29755=29756
<29756=29757
<29758=29759
<29759=29761,29760
<29762=29763
<29764=29765
<29766=29768,29767
<29769=29770
<29770=29784,29771
<29771=29782,29772
<29772=29773
<29773=29774
<29774=29778,29775
<29775=29776
<29776=29777
<29778=29779
<29779=29781,29780
<29782=29783
<29784=29786,29785
<29787=29788
<29788=29792,29789
<29789=29791,29790
<29793=29794
<29794=29804,29803,29795
<29795=29799,29796
<29796=29797
<29797=29798
<29799=29800
<29800=29802,29801
<29805=29841,29806
<29806=29807
<29807=29832,29808
<29808=29809
<29809=29828,29810
<29810=29826,29815,29813,29811
<29811=29812
<29813=29814
<29815=29816
<29816=29824,29817
<29817=29822,29820,29818
<29818=29819
<29820=29821
<29822=29823
<29824=29825
<29826=29827
<29828=29829
<29829=29831,29830
<29832=29833
<29833=29840,29834
<29834=29836,29835
<29836=29837
<29837=29839,29838
<29841=29842
<29842=29844,29843
<29845=29846
<29846=29848,29847
<29849=29850
<29850=29864,29851
<29851=29862,29852
<29852=29853
<29853=29854
<29854=29858,29855
<29855=29856
<29856=29857
<29858=29859
<29859=29861,29860
<29862=29863
<29865=29866
<29866=29880,29867
<29867=29878,29868
<29868=29869
<29869=29870
<29870=29874,29871
<29871=29872
<29872=29873
<29874=29875
<29875=29877,29876
<29878=29879
<29881=29890,29882
<29882=29889,29888,29883
<29883=29887,29884
<29884=29886,29885
<29890=29897,29896,29891
<29891=29895,29892
<29892=29894,29893
<29898=29899
<29899=29909,29908,29900
<29900=29904,29901
<29901=29902
<29902=29903
<29904=29905
<29905=29907,29906
<29910=29911
<29917=29918
<29919=29920
<29920=29932,29931,29921
<29921=29930,29922
<29922=29926,29923
<29923=29924
<29924=29925
<29926=29927
<29927=29929,29928
<29933=29934
<29934=29936,29935
<29936=29937
<29937=29939,29938
<29940=29941
<29941=29943,29942
<29943=29944
<29945=29946
<29946=29948,29947
<29948=29949
<29950=29956,29951
<29951=29952
<29952=29953
<29953=29955,29954
<29956=29957
<29957=29959,29958
<29960=29969,29961
<29961=29968,29966,29962
<29962=29963
<29963=29965,29964
<29966=29967
<29969=29970
<29971=29988,29972
<29972=29975,29973
<29973=29974
<29975=29976
<29976=29984,29977
<29977=29978
<29978=29979
<29979=29983,29980
<29980=29982,29981
<29984=29985
<29985=29987,29986
<29988=29989
<29989=29991,29990
<29991=29997,29992
<29992=29995,29993
<29993=29994
<29995=29996
<29997=29998
<29999=30000
<30000=30002,30001
<30003=30027,30004
<30004=30016,30007,30005
<30005=30006
<30007=30008
<30008=30012,30009
<30009=30010
<30010=30011
<30012=30013
<30013=30015,30014
<30016=30017
<30017=30026,30025,30018
<30018=30024,30019
<30019=30023,30020
<30020=30022,30021
<30027=30028
<30028=30035,30029
<30029=30033,30030
<30030=30031
<30031=30032
<30033=30034
<30036=30037
<30037=30047,30046,30038
<30038=30045,30039
<30039=30043,30040
<30040=30041
<30041=30042
<30043=30044
<30048=30049
<30049=30051,30050
<30051=30052
<30052=30054,30053
<30055=30056
<30056=30058,30057
<30059=30060
<30060=30062,30061
<30063=30064
<30064=30066,30065
<30340=30346,30345,30341
<30341=30342
<30342=30344,30343
<30346=30354,30347
<30347=30348
<30348=30352,30349
<30349=30350
<30350=30351
<30352=30353
<30354=30355
<30355=30357,30356
<30363=30366,30365,30364
<30366=30540,30534,30526,30518,30511,30419,30367
<30367=30417,30368
<30368=30393,30369
<30369=30382,30370
<30370=30371
<30371=30372
<30372=30379,30373
<30373=30375,30374
<30375=30376
<30376=30378,30377
<30379=30381,30380
<30382=30383
<30383=30387,30384
<30384=30386,30385
<30387=30389,30388
<30389=30390
<30390=30392,30391
<30393=30406,30394
<30394=30395
<30395=30396
<30396=30403,30397
<30397=30399,30398
<30399=30400
<30400=30402,30401
<30403=30405,30404
<30406=30407
<30407=30411,30408
<30408=30410,30409
<30411=30413,30412
<30413=30414
<30414=30416,30415
<30417=30418
<30419=30507,30498,30495,30420
<30420=30484,30469,30457,30439,30421
<30421=30431,30422
<30422=30423
<30423=30424
<30424=30428,30425
<30425=30427,30426
<30428=30430,30429
<30431=30432
<30432=30436,30433
<30433=30435,30434
<30436=30438,30437
<30439=30449,30440
<30440=30441
<30441=30442
<30442=30446,30443
<30443=30445,30444
<30446=30448,30447
<30449=30450
<30450=30454,30451
<30451=30453,30452
<30454=30456,30455
<30457=30458
<30458=30468,30467,30459
<30459=30466,30460
<30460=30462,30461
<30462=30463
<30463=30465,30464
<30469=30470
<30470=30483,30482,30471
<30471=30475,30472
<30472=30474,30473
<30475=30479,30476
<30476=30478,30477
<30479=30481,30480
<30484=30485
<30485=30494,30493,30486
<30486=30492,30487
<30487=30491,30488
<30488=30490,30489
<30495=30497,30496
<30498=30499
<30499=30506,30500
<30500=30502,30501
<30502=30503
<30503=30505,30504
<30507=30508
<30508=30510,30509
<30511=30512
<30512=30517,30516,30513
<30513=30515,30514
<30518=30519
<30519=30523,30520
<30520=30522,30521
<30523=30525,30524
<30526=30527
<30527=30531,30528
<30528=30530,30529
<30531=30533,30532
<30534=30535
<30535=30537,30536
<30537=30539,30538
<30540=30541
<30541=30543,30542
<30543=30545,30544
<30570=30576,30575,30571
<30571=30572
<30572=30574,30573
<30576=30789,30773,30769,30607,30577
<30577=30598,30578
<30578=30579
<30579=30580
<30580=30596,30581
<30581=30582
<30582=30583
<30583=30593,30584
<30584=30592,30585
<30585=30587,30586
<30587=30589,30588
<30589=30591,30590
<30593=30595,30594
<30596=30597
<30598=30599
<30599=30601,30600
<30601=30602
<30602=30604,30603
<30604=30606,30605
<30607=30760,30608
<30608=30755,30743,30711,30609
<30609=30697,30610
<30610=30618,30612,30611
<30612=30613
<30613=30615,30614
<30615=30617,30616
<30618=30693,30678,30619
<30619=30620
<30620=30674,30661,30621
<30621=30622
<30622=30657,30642,30623
<30623=30624
<30624=30638,30625
<30625=30626
<30626=30635,30627
<30627=30633,30628
<30628=30631,30629
<30629=30630
<30631=30632
<30633=30634
<30635=30637,30636
<30638=30639
<30639=30641,30640
<30642=30643
<30643=30654,30644
<30644=30652,30645
<30645=30650,30646
<30646=30647
<30647=30649,30648
<30650=30651
<30652=30653
<30654=30656,30655
<30657=30658
<30658=30660,30659
<30661=30662
<30662=30671,30663
<30663=30669,30664
<30664=30667,30665
<30665=30666
<30667=30668
<30669=30670
<30671=30673,30672
<30674=30675
<30675=30677,30676
<30678=30679
<30679=30690,30680
<30680=30688,30681
<30681=30684,30682
<30682=30683
<30684=30685
<30685=30687,30686
<30688=30689
<30690=30692,30691
<30693=30694
<30694=30696,30695
<30697=30698
<30698=30704,30699
<30699=30701,30700
<30701=30703,30702
<30704=30710,30705
<30705=30707,30706
<30707=30709,30708
<30711=30729,30712
<30712=30725,30721,30713
<30713=30714
<30714=30720,30715
<30715=30717,30716
<30717=30719,30718
<30721=30722
<30722=30724,30723
<30725=30726
<30726=30728,30727
<30729=30730
<30730=30736,30731
<30731=30733,30732
<30733=30735,30734
<30736=30742,30737
<30737=30739,30738
<30739=30741,30740
<30743=30744
<30744=30754,30745
<30745=30753,30746
<30746=30752,30747
<30747=30751,30748
<30748=30750,30749
<30755=30756
<30756=30759,30758,30757
<30760=30761
<30761=30767,30762
<30762=30765,30763
<30763=30764
<30765=30766
<30767=30768
<30769=30770
<30770=30772,30771
<30773=30786,30783,30780,30777,30774
<30774=30776,30775
<30777=30779,30778
<30780=30782,30781
<30783=30785,30784
<30786=30788,30787
<30789=30790
<30790=30793,30792,30791
<30818=30824,30823,30819
<30819=30820
<30820=30822,30821
<30824=30909,30905,30894,30887,30865,30847,30843,30831,30827,30825
<30825=30826
<30827=30828
<30828=30830,30829
<30831=30832
<30832=30842,30841,30833
<30833=30840,30834
<30834=30838,30835
<30835=30836
<30836=30837
<30838=30839
<30843=30844
<30844=30846,30845
<30847=30856,30848
<30848=30849
<30849=30850
<30850=30854,30851
<30851=30852
<30852=30853
<30854=30855
<30856=30857
<30857=30864,30858
<30858=30860,30859
<30860=30861
<30861=30863,30862
<30865=30878,30875,30866
<30866=30867
<30867=30869,30868
<30869=30870
<30870=30872,30871
<30872=30874,30873
<30875=30877,30876
<30878=30879
<30879=30886,30880
<30880=30882,30881
<30882=30883
<30883=30885,30884
<30887=30888
<30888=30893,30892,30889
<30889=30891,30890
<30894=30898,30895
<30895=30896
<30896=30897
<30898=30899
<30899=30901,30900
<30901=30902
<30902=30904,30903
<30905=30906
<30906=30908,30907
<30909=30910
<30910=30914,30911
<30911=30912
<30912=30913
<30914=30915
<30932=30938,30937,30933
<30933=30934
<30934=30936,30935
<30938=32366,32354,32350,32278,32264,32238,32091,32087,32080,32036,32022,32001,31992,31716,31497,31492,31487,31291,31112,30984,30963,30941,30939
<30939=30940
<30941=30961,30952,30942
<30942=30943
<30943=30944
<30944=30950,30945
<30945=30946
<30946=30947
<30947=30949,30948
<30950=30951
<30952=30953
<30953=30959,30954
<30954=30955
<30955=30956
<30956=30958,30957
<30959=30960
<30961=30962
<30963=30964
<30964=30983,30982,30965
<30965=30981,30966
<30966=30968,30967
<30968=30977,30969
<30969=30970
<30970=30971
<30971=30973,30972
<30973=30974
<30974=30976,30975
<30977=30978
<30978=30980,30979
<30984=31108,31104,31101,30985
<30985=31087,30986
<30986=31078,30987
<30987=31064,31048,31037,31023,30997,30988
<30988=30989
<30989=30993,30990
<30990=30991
<30991=30992
<30993=30994
<30994=30996,30995
<30997=31014,30998
<30998=30999
<30999=31010,31000
<31000=31008,31001
<31001=31002
<31002=31004,31003
<31004=31005
<31005=31007,31006
<31008=31009
<31010=31011
<31011=31013,31012
<31014=31015
<31015=31022,31016
<31016=31018,31017
<31018=31019
<31019=31021,31020
<31023=31024
<31024=31036,31035,31025
<31025=31034,31026
<31026=31028,31027
<31028=31029
<31029=31031,31030
<31031=31033,31032
<31037=31038
<31038=31044,31039
<31039=31042,31040
<31040=31041
<31042=31043
<31044=31045
<31045=31047,31046
<31048=31049
<31049=31060,31050
<31050=31058,31051
<31051=31052
<31052=31054,31053
<31054=31055
<31055=31057,31056
<31058=31059
<31060=31061
<31061=31063,31062
<31064=31065
<31065=31077,31076,31066
<31066=31075,31067
<31067=31071,31068
<31068=31069
<31069=31070
<31071=31072
<31072=31074,31073
<31078=31079
<31079=31086,31080
<31080=31082,31081
<31082=31083
<31083=31085,31084
<31087=31088
<31088=31100,31099,31089
<31089=31098,31090
<31090=31092,31091
<31092=31093
<31093=31095,31094
<31095=31097,31096
<31101=31103,31102
<31104=31105
<31105=31107,31106
<31108=31109
<31109=31111,31110
<31112=31278,31113
<31113=31264,31260,31144,31123,31114
<31114=31115
<31115=31119,31116
<31116=31117
<31117=31118
<31119=31120
<31120=31122,31121
<31123=31124
<31124=31140,31125
<31125=31138,31126
<31126=31127
<31127=31129,31128
<31129=31130
<31130=31132,31131
<31132=31134,31133
<31134=31135
<31135=31137,31136
<31138=31139
<31140=31141
<31141=31143,31142
<31144=31252,31239,31236,31145
<31145=31221,31213,31176,31146
<31146=31147
<31147=31175,31148
<31148=31172,31149
<31149=31171,31150
<31150=31168,31151
<31151=31167,31152
<31152=31164,31153
<31153=31163,31154
<31154=31162,31155
<31155=31161,31156
<31156=31158,31157
<31158=31160,31159
<31164=31166,31165
<31168=31170,31169
<31172=31174,31173
<31176=31205,31177
<31177=31178
<31178=31194,31186,31179
<31179=31180
<31180=31181
<31181=31185,31182
<31182=31184,31183
<31186=31187
<31187=31193,31188
<31188=31190,31189
<31190=31192,31191
<31194=31195
<31195=31204,31196
<31196=31198,31197
<31198=31199
<31199=31201,31200
<31201=31203,31202
<31205=31206
<31206=31210,31207
<31207=31209,31208
<31210=31212,31211
<31213=31214
<31214=31220,31215
<31215=31217,31216
<31217=31219,31218
<31221=31222
<31222=31235,31234,31223
<31223=31233,31224
<31224=31232,31225
<31225=31227,31226
<31227=31229,31228
<31229=31231,31230
<31236=31238,31237
<31239=31240
<31240=31251,31241
<31241=31243,31242
<31243=31244
<31244=31246,31245
<31246=31248,31247
<31248=31250,31249
<31252=31253
<31253=31254
<31254=31259,31258,31255
<31255=31257,31256
<31260=31261
<31261=31263,31262
<31264=31265
<31265=31277,31276,31266
<31266=31275,31267
<31267=31271,31268
<31268=31269
<31269=31270
<31271=31272
<31272=31274,31273
<31278=31279
<31279=31281,31280
<31281=31283,31282
<31283=31284
<31284=31286,31285
<31286=31288,31287
<31288=31290,31289
<31291=31483,31474,31471,31292
<31292=31457,31446,31331,31293
<31293=31324,31294
<31294=31313,31295
<31295=31296
<31296=31312,31297
<31297=31307,31298
<31298=31306,31299
<31299=31301,31300
<31301=31303,31302
<31303=31305,31304
<31307=31309,31308
<31309=31311,31310
<31313=31314
<31314=31323,31322,31315
<31315=31321,31316
<31316=31320,31317
<31317=31319,31318
<31324=31325
<31325=31327,31326
<31327=31328
<31328=31330,31329
<31331=31332
<31332=31445,31333
<31333=31442,31334
<31334=31441,31335
<31335=31431,31336
<31336=31430,31337
<31337=31420,31338
<31338=31419,31339
<31339=31409,31340
<31340=31408,31341
<31341=31403,31342
<31342=31402,31343
<31343=31397,31344
<31344=31396,31345
<31345=31385,31346
<31346=31384,31347
<31347=31373,31348
<31348=31372,31349
<31349=31369,31350
<31350=31368,31351
<31351=31362,31352
<31352=31361,31353
<31353=31355,31354
<31355=31357,31356
<31357=31358
<31358=31360,31359
<31362=31364,31363
<31364=31365
<31365=31367,31366
<31369=31371,31370
<31373=31382,31374
<31374=31375
<31375=31376
<31376=31378,31377
<31378=31379
<31379=31381,31380
<31382=31383
<31385=31394,31386
<31386=31387
<31387=31388
<31388=31390,31389
<31390=31391
<31391=31393,31392
<31394=31395
<31397=31399,31398
<31399=31401,31400
<31403=31405,31404
<31405=31407,31406
<31409=31417,31410
<31410=31411
<31411=31412
<31412=31414,31413
<31414=31416,31415
<31417=31418
<31420=31428,31421
<31421=31422
<31422=31423
<31423=31425,31424
<31425=31427,31426
<31428=31429
<31431=31439,31432
<31432=31433
<31433=31434
<31434=31436,31435
<31436=31438,31437
<31439=31440
<31442=31444,31443
<31446=31447
<31447=31456,31455,31448
<31448=31454,31449
<31449=31453,31450
<31450=31452,31451
<31457=31458
<31458=31470,31469,31459
<31459=31468,31460
<31460=31464,31461
<31461=31462
<31462=31463
<31464=31465
<31465=31467,31466
<31471=31473,31472
<31474=31475
<31475=31482,31476
<31476=31478,31477
<31478=31479
<31479=31481,31480
<31483=31484
<31484=31486,31485
<31487=31488
<31488=31491,31490,31489
<31492=31493
<31493=31496,31495,31494
<31497=31712,31699,31696,31498
<31498=31683,31669,31654,31639,31578,31561,31557,31529,31508,31499
<31499=31500
<31500=31504,31501
<31501=31502
<31502=31503
<31504=31505
<31505=31507,31506
<31508=31509
<31509=31525,31510
<31510=31523,31511
<31511=31512
<31512=31514,31513
<31514=31515
<31515=31517,31516
<31517=31519,31518
<31519=31520
<31520=31522,31521
<31523=31524
<31525=31526
<31526=31528,31527
<31529=31530
<31530=31556,31531
<31531=31553,31532
<31532=31552,31533
<31533=31549,31534
<31534=31548,31535
<31535=31543,31536
<31536=31542,31537
<31537=31539,31538
<31539=31541,31540
<31543=31545,31544
<31545=31547,31546
<31549=31551,31550
<31553=31555,31554
<31557=31558
<31558=31560,31559
<31561=31574,31562
<31562=31563
<31563=31564
<31564=31570,31565
<31565=31568,31566
<31566=31567
<31568=31569
<31570=31571
<31571=31573,31572
<31574=31575
<31575=31577,31576
<31578=31633,31620,31579
<31579=31580
<31580=31608,31581
<31581=31595,31582
<31582=31583
<31583=31591,31584
<31584=31589,31585
<31585=31586
<31586=31588,31587
<31589=31590
<31591=31592
<31592=31594,31593
<31595=31596
<31596=31604,31597
<31597=31602,31598
<31598=31599
<31599=31601,31600
<31602=31603
<31604=31605
<31605=31607,31606
<31608=31609
<31609=31615,31610
<31610=31612,31611
<31612=31614,31613
<31615=31617,31616
<31617=31619,31618
<31620=31621
<31621=31629,31622
<31622=31627,31623
<31623=31624
<31624=31626,31625
<31627=31628
<31629=31630
<31630=31632,31631
<31633=31634
<31634=31636,31635
<31636=31638,31637
<31639=31640
<31640=31650,31641
<31641=31648,31642
<31642=31643
<31643=31645,31644
<31645=31647,31646
<31648=31649
<31650=31651
<31651=31653,31652
<31654=31655
<31655=31665,31656
<31656=31663,31657
<31657=31658
<31658=31660,31659
<31660=31662,31661
<31663=31664
<31665=31666
<31666=31668,31667
<31669=31670
<31670=31682,31681,31671
<31671=31680,31672
<31672=31676,31673
<31673=31674
<31674=31675
<31676=31677
<31677=31679,31678
<31683=31684
<31684=31695,31694,31685
<31685=31693,31686
<31686=31688,31687
<31688=31690,31689
<31690=31692,31691
<31696=31698,31697
<31699=31700
<31700=31711,31701
<31701=31703,31702
<31703=31704
<31704=31706,31705
<31706=31708,31707
<31708=31710,31709
<31712=31713
<31713=31715,31714
<31716=31988,31977,31974,31717
<31717=31960,31944,31926,31727,31718
<31718=31719
<31719=31723,31720
<31720=31721
<31721=31722
<31723=31724
<31724=31726,31725
<31727=31918,31907,31904,31728
<31728=31890,31886,31852,31831,31827,31805,31784,31769,31738,31729
<31729=31730
<31730=31734,31731
<31731=31732
<31732=31733
<31734=31735
<31735=31737,31736
<31738=31757,31739
<31739=31740
<31740=31741
<31741=31753,31742
<31742=31751,31743
<31743=31744
<31744=31746,31745
<31746=31748,31747
<31748=31750,31749
<31751=31752
<31753=31754
<31754=31756,31755
<31757=31758
<31758=31762,31759
<31759=31761,31760
<31762=31764,31763
<31764=31766,31765
<31766=31768,31767
<31769=31770
<31770=31780,31771
<31771=31778,31772
<31772=31773
<31773=31777,31774
<31774=31776,31775
<31778=31779
<31780=31781
<31781=31783,31782
<31784=31785
<31785=31801,31786
<31786=31799,31787
<31787=31788
<31788=31790,31789
<31790=31791
<31791=31793,31792
<31793=31795,31794
<31795=31796
<31796=31798,31797
<31799=31800
<31801=31802
<31802=31804,31803
<31805=31806
<31806=31826,31807
<31807=31818,31808
<31808=31817,31809
<31809=31811,31810
<31811=31812
<31812=31814,31813
<31814=31816,31815
<31818=31820,31819
<31820=31821
<31821=31823,31822
<31823=31825,31824
<31827=31828
<31828=31830,31829
<31831=31832
<31832=31848,31833
<31833=31846,31834
<31834=31835
<31835=31837,31836
<31837=31838
<31838=31840,31839
<31840=31842,31841
<31842=31843
<31843=31845,31844
<31846=31847
<31848=31849
<31849=31851,31850
<31852=31853
<31853=31885,31854
<31854=31871,31855
<31855=31870,31856
<31856=31868,31857
<31857=31858
<31858=31859
<31859=31861,31860
<31861=31863,31862
<31863=31865,31864
<31865=31867,31866
<31868=31869
<31871=31883,31872
<31872=31873
<31873=31874
<31874=31876,31875
<31876=31878,31877
<31878=31880,31879
<31880=31882,31881
<31883=31884
<31886=31887
<31887=31889,31888
<31890=31891
<31891=31903,31902,31892
<31892=31901,31893
<31893=31897,31894
<31894=31895
<31895=31896
<31897=31898
<31898=31900,31899
<31904=31906,31905
<31907=31908
<31908=31917,31909
<31909=31911,31910
<31911=31912
<31912=31914,31913
<31914=31916,31915
<31918=31919
<31919=31920
<31920=31925,31924,31921
<31921=31923,31922
<31926=31927
<31927=31940,31928
<31928=31938,31929
<31929=31930
<31930=31932,31931
<31932=31933
<31933=31935,31934
<31935=31937,31936
<31938=31939
<31940=31941
<31941=31943,31942
<31944=31945
<31945=31959,31958,31946
<31946=31957,31947
<31947=31951,31948
<31948=31949
<31949=31950
<31951=31952
<31952=31954,31953
<31954=31956,31955
<31960=31961
<31961=31973,31972,31962
<31962=31971,31963
<31963=31967,31964
<31964=31965
<31965=31966
<31967=31968
<31968=31970,31969
<31974=31976,31975
<31977=31978
<31978=31987,31979
<31979=31981,31980
<31981=31982
<31982=31984,31983
<31984=31986,31985
<31988=31989
<31989=31991,31990
<31992=31993
<31993=31997,31994
<31994=31995
<31995=31996
<31997=31998
<31998=32000,31999
<32001=32002
<32002=32018,32003
<32003=32016,32004
<32004=32005
<32005=32007,32006
<32007=32008
<32008=32010,32009
<32010=32012,32011
<32012=32013
<32013=32015,32014
<32016=32017
<32018=32019
<32019=32021,32020
<32022=32023
<32023=32035,32034,32024
<32024=32033,32025
<32025=32029,32026
<32026=32027
<32027=32028
<32029=32030
<32030=32032,32031
<32036=32076,32067,32064,32037
<32037=32038
<32038=32039
<32039=32063,32040
<32040=32058,32041
<32041=32057,32042
<32042=32052,32043
<32043=32051,32044
<32044=32046,32045
<32046=32048,32047
<32048=32050,32049
<32052=32054,32053
<32054=32056,32055
<32058=32060,32059
<32060=32062,32061
<32064=32066,32065
<32067=32068
<32068=32075,32069
<32069=32071,32070
<32071=32072
<32072=32074,32073
<32076=32077
<32077=32079,32078
<32080=32081
<32081=32086,32085,32082
<32082=32084,32083
<32087=32088
<32088=32090,32089
<32091=32236,32092
<32092=32221,32120,32093
<32093=32111,32094
<32094=32095
<32095=32096
<32096=32107,32097
<32097=32105,32098
<32098=32099
<32099=32101,32100
<32101=32102
<32102=32104,32103
<32105=32106
<32107=32108
<32108=32110,32109
<32111=32112
<32112=32119,32113
<32113=32115,32114
<32115=32116
<32116=32118,32117
<32120=32219,32121
<32121=32208,32204,32186,32165,32161,32143,32122
<32122=32123
<32123=32139,32124
<32124=32137,32125
<32125=32126
<32126=32128,32127
<32128=32129
<32129=32131,32130
<32131=32133,32132
<32133=32134
<32134=32136,32135
<32137=32138
<32139=32140
<32140=32142,32141
<32143=32144
<32144=32160,32145
<32145=32157,32146
<32146=32156,32147
<32147=32153,32148
<32148=32152,32149
<32149=32151,32150
<32153=32155,32154
<32157=32159,32158
<32161=32162
<32162=32164,32163
<32165=32166
<32166=32182,32167
<32167=32180,32168
<32168=32169
<32169=32171,32170
<32171=32172
<32172=32174,32173
<32174=32176,32175
<32176=32177
<32177=32179,32178
<32180=32181
<32182=32183
<32183=32185,32184
<32186=32187
<32187=32203,32188
<32188=32200,32189
<32189=32199,32190
<32190=32196,32191
<32191=32195,32192
<32192=32194,32193
<32196=32198,32197
<32200=32202,32201
<32204=32205
<32205=32207,32206
<32208=32209
<32209=32215,32210
<32210=32213,32211
<32211=32212
<32213=32214
<32215=32216
<32216=32218,32217
<32219=32220
<32221=32222
<32222=32232,32223
<32223=32230,32224
<32224=32225
<32225=32227,32226
<32227=32229,32228
<32230=32231
<32232=32233
<32233=32235,32234
<32236=32237
<32238=32260,32239
<32239=32249,32240
<32240=32241
<32241=32245,32242
<32242=32243
<32243=32244
<32245=32246
<32246=32248,32247
<32249=32250
<32250=32259,32251
<32251=32255,32252
<32252=32253
<32253=32254
<32255=32256
<32256=32258,32257
<32260=32261
<32261=32263,32262
<32264=32265
<32265=32277,32276,32266
<32266=32275,32267
<32267=32271,32268
<32268=32269
<32269=32270
<32271=32272
<32272=32274,32273
<32278=32346,32333,32307,32279
<32279=32303,32280
<32280=32299,32293,32281
<32281=32282
<32282=32291,32283
<32283=32284
<32284=32285
<32285=32287,32286
<32287=32288
<32288=32290,32289
<32291=32292
<32293=32294
<32294=32298,32295
<32295=32297,32296
<32299=32300
<32300=32302,32301
<32303=32304
<32304=32306,32305
<32307=32308
<32308=32332,32331,32309
<32309=32330,32310
<32310=32326,32311
<32311=32319,32312
<32312=32313
<32313=32315,32314
<32315=32316
<32316=32318,32317
<32319=32320
<32320=32322,32321
<32322=32323
<32323=32325,32324
<32326=32327
<32327=32329,32328
<32333=32334
<32334=32340,32335
<32335=32336
<32336=32337
<32337=32339,32338
<32340=32341
<32341=32343,32342
<32343=32345,32344
<32346=32347
<32347=32349,32348
<32350=32351
<32351=32353,32352
<32354=32355
<32355=32365,32364,32356
<32356=32363,32357
<32357=32361,32358
<32358=32359
<32359=32360
<32361=32362
<32366=32369,32367
<32367=32368
<32369=32370
<32370=32374,32371
<32371=32373,32372
<32504=32510,32509,32505
<32505=32506
<32506=32508,32507
<32510=32544,32534,32524,32511
<32511=32512
<32512=32518,32513
<32513=32514
<32514=32515
<32515=32517,32516
<32518=32519
<32519=32521,32520
<32521=32523,32522
<32524=32525
<32525=32529,32526
<32526=32528,32527
<32529=32531,32530
<32531=32533,32532
<32534=32535
<32535=32539,32536
<32536=32538,32537
<32539=32541,32540
<32541=32543,32542
<32544=32553,32545
<32545=32546
<32546=32547
<32547=32549,32548
<32549=32550
<32550=32552,32551
<32553=32554
<32554=32564,32555
<32555=32559,32556
<32556=32558,32557
<32559=32561,32560
<32561=32563,32562
<32564=32568,32565
<32565=32567,32566
<32568=32570,32569
<32570=32572,32571
<32594=32597,32596,32595
<32597=32698,32598
<32598=32694,32599
<32599=32693,32692,32691,32689,32627,32618,32609,32600
<32600=32607,32601
<32601=32602
<32602=32604,32603
<32604=32606,32605
<32607=32608
<32609=32616,32610
<32610=32611
<32611=32613,32612
<32613=32615,32614
<32616=32617
<32618=32619
<32619=32625,32620
<32620=32623,32621
<32621=32622
<32623=32624
<32625=32626
<32627=32678,32672,32666,32649,32643,32637,32628
<32628=32629
<32629=32633,32630
<32630=32631
<32631=32632
<32633=32634
<32634=32636,32635
<32637=32638
<32638=32640,32639
<32640=32642,32641
<32643=32644
<32644=32646,32645
<32646=32648,32647
<32649=32650
<32650=32663,32651
<32651=32661,32652
<32652=32659,32657,32653
<32653=32654
<32654=32656,32655
<32657=32658
<32659=32660
<32661=32662
<32663=32665,32664
<32666=32667
<32667=32669,32668
<32669=32671,32670
<32672=32673
<32673=32675,32674
<32675=32677,32676
<32678=32679
<32679=32685,32680
<32680=32683,32681
<32681=32682
<32683=32684
<32685=32686
<32686=32688,32687
<32689=32690
<32694=32695
<32695=32697,32696
<32698=32711,32699
<32699=32704,32700
<32700=32701
<32701=32703,32702
<32704=32705
<32705=32707,32706
<32707=32708
<32708=32710,32709
<32711=32712
<32737=32740,32739,32738
<32740=32741
<32741=32742
<32747=32756,32755,32748
<32748=32752,32749
<32749=32751,32750
<32752=32754,32753
<32756=32757
<32757=32758
<32758=32788,32759
<32759=32782,32760
<32760=32776,32761
<32761=32768,32762
<32762=32764,32763
<32764=32765
<32765=32767,32766
<32768=32770,32769
<32770=32772,32771
<32772=32773
<32773=32775,32774
<32776=32778,32777
<32778=32779
<32779=32781,32780
<32782=32784,32783
<32784=32785
<32785=32787,32786
<32788=32790,32789
<32802=32805,32804,32803
<32805=32880,32806
<32806=32872,32863,32860,32807
<32807=32808
<32808=32852,32831,32809
<32809=32810
<32810=32811
<32811=32821,32812
<32812=32813
<32813=32814
<32814=32820,32815
<32815=32817,32816
<32817=32819,32818
<32821=32822
<32822=32826,32823
<32823=32825,32824
<32826=32828,32827
<32828=32830,32829
<32831=32832
<32832=32842,32833
<32833=32834
<32834=32835
<32835=32841,32836
<32836=32838,32837
<32838=32840,32839
<32842=32843
<32843=32847,32844
<32844=32846,32845
<32847=32849,32848
<32849=32851,32850
<32852=32853
<32853=32857,32854
<32854=32856,32855
<32857=32859,32858
<32860=32862,32861
<32863=32864
<32864=32871,32865
<32865=32867,32866
<32867=32868
<32868=32870,32869
<32872=32873
<32873=32874
<32874=32879,32878,32875
<32875=32877,32876
<32880=32881
<32881=32892,32882
<32882=32890,32883
<32883=32888,32886,32884
<32884=32885
<32886=32887
<32888=32889
<32890=32891
<32912=32915,32914,32913
<32915=32916
<32916=32917
<32917=32930,32918
<32918=32919
<32919=32920
<32920=32924,32921
<32921=32922
<32922=32923
<32924=32925
<32925=32927,32926
<32927=32929,32928
<32930=32931
<32940=32946,32945,32941
<32941=32942
<32942=32944,32943
<32946=33064,33051,32949,32947
<32947=32948
<32949=33047,32950
<32950=33038,33022,32951
<32951=33020,32952
<32952=33011,32983,32953
<32953=32981,32954
<32954=32977,32962,32955
<32955=32956
<32956=32958,32957
<32958=32959
<32959=32961,32960
<32962=32963
<32963=32973,32964
<32964=32971,32967,32965
<32965=32966
<32967=32968
<32968=32970,32969
<32971=32972
<32973=32974
<32974=32976,32975
<32977=32978
<32978=32980,32979
<32981=32982
<32983=32984
<32984=33010,33009,32985
<32985=33008,32986
<32986=33006,32987
<32987=33002,32998,32994,32992,32990,32988
<32988=32989
<32990=32991
<32992=32993
<32994=32995
<32995=32997,32996
<32998=32999
<32999=33001,33000
<33002=33003
<33003=33005,33004
<33006=33007
<33011=33012
<33012=33019,33018,33013
<33013=33017,33014
<33014=33016,33015
<33020=33021
<33022=33023
<33023=33037,33036,33024
<33024=33035,33025
<33025=33029,33026
<33026=33027
<33027=33028
<33029=33030
<33030=33032,33031
<33032=33034,33033
<33038=33039
<33039=33046,33045,33040
<33040=33044,33041
<33041=33043,33042
<33047=33048
<33048=33050,33049
<33051=33052
<33052=33058,33053
<33053=33056,33054
<33054=33055
<33056=33057
<33058=33059
<33059=33061,33060
<33061=33063,33062
<33064=33077,33065
<33065=33070,33066
<33066=33067
<33067=33069,33068
<33070=33071
<33071=33073,33072
<33073=33074
<33074=33076,33075
<33077=33078
<33103=33106,33105,33104
<33106=33168,33164,33158,33146,33107
<33107=33142,33108
<33108=33135,33109
<33109=33110
<33110=33134,33111
<33111=33132,33112
<33112=33130,33128,33119,33117,33115,33113
<33113=33114
<33115=33116
<33117=33118
<33119=33120
<33120=33126,33121
<33121=33124,33122
<33122=33123
<33124=33125
<33126=33127
<33128=33129
<33130=33131
<33132=33133
<33135=33136
<33136=33140,33137
<33137=33138
<33138=33139
<33140=33141
<33142=33143
<33143=33145,33144
<33146=33147
<33147=33156,33148
<33148=33149
<33149=33150
<33150=33152,33151
<33152=33153
<33153=33155,33154
<33156=33157
<33158=33159
<33159=33163,33160
<33160=33162,33161
<33164=33165
<33165=33167,33166
<33168=33169
<33169=33183,33182,33170
<33170=33181,33171
<33171=33175,33172
<33172=33173
<33173=33174
<33175=33176
<33176=33178,33177
<33178=33180,33179
<33199=33202,33201,33200
<33206=33212,33211,33207
<33207=33208
<33208=33210,33209
<33212=33213
<33213=33376,33214
<33214=33359,33348,33339,33338,33337,33336,33334,33325,33312,33301,33288,33282,33276,33265,33252,33232,33226,33215
<33215=33216
<33216=33222,33217
<33217=33220,33218
<33218=33219
<33220=33221
<33222=33223
<33223=33225,33224
<33226=33227
<33227=33229,33228
<33229=33231,33230
<33232=33233
<33233=33246,33234
<33234=33237,33235
<33235=33236
<33237=33238
<33238=33244,33239
<33239=33242,33240
<33240=33241
<33242=33243
<33244=33245
<33246=33247
<33247=33249,33248
<33249=33251,33250
<33252=33253
<33253=33262,33254
<33254=33260,33255
<33255=33258,33256
<33256=33257
<33258=33259
<33260=33261
<33262=33264,33263
<33265=33266
<33266=33272,33267
<33267=33270,33268
<33268=33269
<33270=33271
<33272=33273
<33273=33275,33274
<33276=33277
<33277=33279,33278
<33279=33281,33280
<33282=33283
<33283=33285,33284
<33285=33287,33286
<33288=33289
<33289=33298,33290
<33290=33296,33291
<33291=33294,33292
<33292=33293
<33294=33295
<33296=33297
<33298=33300,33299
<33301=33302
<33302=33308,33303
<33303=33306,33304
<33304=33305
<33306=33307
<33308=33309
<33309=33311,33310
<33312=33313
<33313=33322,33314
<33314=33320,33315
<33315=33318,33316
<33316=33317
<33318=33319
<33320=33321
<33322=33324,33323
<33325=33326
<33326=33330,33327
<33327=33328
<33328=33329
<33330=33331
<33331=33333,33332
<33334=33335
<33339=33340
<33340=33344,33341
<33341=33342
<33342=33343
<33344=33345
<33345=33347,33346
<33348=33349
<33349=33355,33350
<33350=33353,33351
<33351=33352
<33353=33354
<33355=33356
<33356=33358,33357
<33359=33360
<33360=33371,33361
<33361=33369,33362
<33362=33367,33365,33363
<33363=33364
<33365=33366
<33367=33368
<33369=33370
<33371=33373,33372
<33373=33375,33374
<33376=33377
<33377=33379,33378
<33400=33403,33402,33401
<33403=33416,33412,33404
<33404=33405
<33405=33407,33406
<33407=33409,33408
<33409=33411,33410
<33412=33413
<33413=33415,33414
<33416=33444,33417
<33417=33435,33424,33418
<33418=33419
<33419=33421,33420
<33421=33423,33422
<33424=33425
<33425=33431,33426
<33426=33427
<33427=33428
<33428=33430,33429
<33431=33432
<33432=33434,33433
<33435=33436
<33436=33440,33437
<33437=33438
<33438=33439
<33440=33441
<33441=33443,33442
<33444=33445
<33458=33464,33463,33459
<33459=33460
<33460=33462,33461
<33464=33465
<33465=33632,33466
<33466=33595,33471,33467
<33467=33468
<33468=33470,33469
<33471=33593,33472
<33472=33592,33534,33533,33532,33474,33473
<33474=33523,33475
<33475=33519,33513,33507,33499,33493,33476
<33476=33477
<33477=33488,33478
<33478=33482,33479
<33479=33480
<33480=33481
<33482=33483
<33483=33485,33484
<33485=33487,33486
<33488=33490,33489
<33490=33492,33491
<33493=33494
<33494=33496,33495
<33496=33498,33497
<33499=33500
<33500=33504,33501
<33501=33503,33502
<33504=33506,33505
<33507=33508
<33508=33510,33509
<33510=33512,33511
<33513=33514
<33514=33516,33515
<33516=33518,33517
<33519=33520
<33520=33522,33521
<33523=33524
<33524=33531,33525
<33525=33527,33526
<33527=33528
<33528=33530,33529
<33534=33583,33535
<33535=33579,33573,33567,33559,33553,33536
<33536=33537
<33537=33548,33538
<33538=33542,33539
<33539=33540
<33540=33541
<33542=33543
<33543=33545,33544
<33545=33547,33546
<33548=33550,33549
<33550=33552,33551
<33553=33554
<33554=33556,33555
<33556=33558,33557
<33559=33560
<33560=33564,33561
<33561=33563,33562
<33564=33566,33565
<33567=33568
<33568=33570,33569
<33570=33572,33571
<33573=33574
<33574=33576,33575
<33576=33578,33577
<33579=33580
<33580=33582,33581
<33583=33584
<33584=33591,33585
<33585=33587,33586
<33587=33588
<33588=33590,33589
<33593=33594
<33595=33624,33596
<33596=33605,33597
<33597=33598
<33598=33600,33599
<33600=33602,33601
<33602=33604,33603
<33605=33606
<33606=33618,33607
<33607=33612,33610,33608
<33608=33609
<33610=33611
<33612=33613
<33613=33615,33614
<33615=33617,33616
<33618=33619
<33619=33621,33620
<33621=33623,33622
<33624=33625
<33625=33627,33626
<33627=33629,33628
<33629=33631,33630
<33632=33633
<33633=33635,33634
<33663=33669,33668,33664
<33664=33665
<33665=33667,33666
<33669=33718,33717,33716,33715,33714,33681,33670
<33670=33671
<33671=33675,33672
<33672=33673
<33673=33674
<33675=33676
<33676=33678,33677
<33678=33680,33679
<33681=33708,33682
<33682=33693,33683
<33683=33684
<33684=33685
<33685=33689,33686
<33686=33687
<33687=33688
<33689=33690
<33690=33692,33691
<33693=33694
<33694=33705,33695
<33695=33701,33696
<33696=33699,33697
<33697=33698
<33699=33700
<33701=33702
<33702=33704,33703
<33705=33707,33706
<33708=33709
<33709=33713,33710
<33710=33712,33711
<33718=33719
<33719=33724,33723,33720
<33720=33722,33721
<33738=33741,33740,33739
<33741=33773,33772,33771,33770,33749,33742
<33742=33743
<33743=33745,33744
<33745=33746
<33746=33748,33747
<33749=33761,33750
<33750=33759,33751
<33751=33752
<33752=33753
<33753=33755,33754
<33755=33756
<33756=33758,33757
<33759=33760
<33761=33762
<33762=33769,33768,33763
<33763=33767,33764
<33764=33766,33765
<33781=33784,33783,33782
<33784=33785
<33785=33817,33810,33786
<33786=33787
<33787=33803,33796,33788
<33788=33789
<33789=33790
<33790=33791
<33791=33793,33792
<33793=33795,33794
<33796=33797
<33797=33798
<33798=33800,33799
<33800=33802,33801
<33803=33804
<33804=33806,33805
<33806=33807
<33807=33809,33808
<33810=33811
<33811=33812
<33812=33814,33813
<33814=33816,33815
<33817=33818
<33818=33820,33819
<33820=33821
<33821=33823,33822
<33834=33840,33839,33835
<33835=33836
<33836=33838,33837
<33840=33921,33914,33867,33857,33852,33841
<33841=33842
<33842=33846,33843
<33843=33844
<33844=33845
<33846=33847
<33847=33849,33848
<33849=33851,33850
<33852=33853
<33853=33856,33855,33854
<33857=33861,33858
<33858=33859
<33859=33860
<33861=33862
<33862=33864,33863
<33864=33866,33865
<33867=33910,33868
<33868=33892,33869
<33869=33886,33870
<33870=33871
<33871=33877,33872
<33872=33873
<33873=33874
<33874=33876,33875
<33877=33878
<33878=33882,33879
<33879=33880
<33880=33881
<33882=33883
<33883=33885,33884
<33886=33887
<33887=33891,33888
<33888=33890,33889
<33892=33893
<33893=33909,33908,33894
<33894=33907,33895
<33895=33901,33896
<33896=33899,33897
<33897=33898
<33899=33900
<33901=33902
<33902=33904,33903
<33904=33906,33905
<33910=33911
<33911=33913,33912
<33914=33915
<33915=33920,33919,33916
<33916=33918,33917
<33921=33922
<33922=33939,33938,33923
<33923=33937,33924
<33924=33934,33925
<33925=33927,33926
<33927=33929,33928
<33929=33931,33930
<33931=33933,33932
<33934=33936,33935
<33964=33970,33969,33965
<33965=33966
<33966=33968,33967
<33975=33978,33977,33976
<33978=34099,34092,34085,33979
<33979=34077,34068,34065,33980
<33980=34051,34039,34011,33997,33981
<33981=33991,33982
<33982=33983
<33983=33987,33984
<33984=33985
<33985=33986
<33987=33988
<33988=33990,33989
<33991=33992
<33992=33994,33993
<33994=33996,33995
<33997=33998
<33998=34010,34009,33999
<33999=34008,34000
<34000=34004,34001
<34001=34002
<34002=34003
<34004=34005
<34005=34007,34006
<34011=34021,34012
<34012=34013
<34013=34017,34014
<34014=34015
<34015=34016
<34017=34018
<34018=34020,34019
<34021=34022
<34022=34034,34023
<34023=34029,34024
<34024=34026,34025
<34026=34028,34027
<34029=34031,34030
<34031=34033,34032
<34034=34038,34035
<34035=34037,34036
<34039=34040
<34040=34050,34049,34041
<34041=34048,34042
<34042=34044,34043
<34044=34045
<34045=34047,34046
<34051=34052
<34052=34064,34063,34053
<34053=34062,34054
<34054=34058,34055
<34055=34056
<34056=34057
<34058=34059
<34059=34061,34060
<34065=34067,34066
<34068=34069
<34069=34076,34070
<34070=34072,34071
<34072=34073
<34073=34075,34074
<34077=34078
<34078=34079
<34079=34084,34083,34080
<34080=34082,34081
<34085=34086
<34086=34088,34087
<34088=34089
<34089=34091,34090
<34092=34093
<34093=34095,34094
<34095=34096
<34096=34098,34097
<34099=34120,34116,34113,34100
<34100=34101
<34101=34103,34102
<34103=34105,34104
<34105=34109,34106
<34106=34107
<34107=34108
<34109=34110
<34110=34112,34111
<34113=34115,34114
<34116=34117
<34117=34119,34118
<34120=34121
<34121=34122
<34122=34127,34126,34123
<34123=34125,34124
<34154=34157,34156,34155
<34157=34158
<34158=34202,34198,34195,34159
<34159=34189,34160
<34160=34161
<34161=34178,34162
<34162=34163
<34163=34164
<34164=34172,34165
<34165=34167,34166
<34167=34169,34168
<34169=34171,34170
<34172=34177,34173
<34173=34175,34174
<34175=34176
<34178=34179
<34179=34181,34180
<34181=34185,34182
<34182=34183
<34183=34184
<34185=34186
<34186=34188,34187
<34189=34191,34190
<34191=34192
<34192=34194,34193
<34195=34197,34196
<34198=34199
<34199=34201,34200
<34202=34203
<34203=34204
<34204=34209,34208,34205
<34205=34207,34206
<34224=34230,34229,34225
<34225=34226
<34226=34228,34227
<34230=34231
<34231=34232
<34232=34234,34233
<34240=34246,34245,34241
<34241=34242
<34242=34244,34243
<34246=34264,34253,34247
<34247=34248
<34248=34252,34249
<34249=34251,34250
<34253=34260,34254
<34254=34255
<34255=34259,34256
<34256=34258,34257
<34260=34261
<34261=34263,34262
<34264=34265
<34265=34270,34269,34266
<34266=34268,34267
<34277=34283,34282,34278
<34278=34279
<34279=34281,34280
<34283=34284
<34284=34285
<34285=34287,34286
<34293=34302,34301,34294
<34294=34298,34295
<34295=34297,34296
<34298=34300,34299
<34302=34940,34929,34914,34900,34886,34866,34811,34797,34769,34303
<34303=34764,34304
<34304=34305
<34305=34762,34704,34306
<34306=34307
<34307=34702,34308
<34308=34309
<34309=34689,34310
<34310=34621,34603,34533,34467,34311
<34311=34463,34312
<34312=34313
<34313=34459,34458,34314
<34314=34315
<34315=34449,34393,34316
<34316=34389,34317
<34317=34380,34333,34318
<34318=34329,34319
<34319=34320
<34320=34321
<34321=34323,34322
<34323=34324
<34324=34326,34325
<34326=34328,34327
<34329=34330
<34330=34332,34331
<34333=34372,34363,34360,34334
<34334=34335
<34335=34342,34336
<34336=34338,34337
<34338=34339
<34339=34341,34340
<34342=34343
<34343=34352,34344
<34344=34346,34345
<34346=34347
<34347=34349,34348
<34349=34351,34350
<34352=34354,34353
<34354=34355
<34355=34357,34356
<34357=34359,34358
<34360=34362,34361
<34363=34364
<34364=34371,34365
<34365=34367,34366
<34367=34368
<34368=34370,34369
<34372=34373
<34373=34374
<34374=34379,34378,34375
<34375=34377,34376
<34380=34381
<34381=34388,34387,34382
<34382=34386,34383
<34383=34385,34384
<34389=34390
<34390=34392,34391
<34393=34441,34432,34429,34394
<34394=34395
<34395=34402,34396
<34396=34398,34397
<34398=34399
<34399=34401,34400
<34402=34403
<34403=34420,34404
<34404=34413,34405
<34405=34407,34406
<34407=34408
<34408=34410,34409
<34410=34412,34411
<34413=34415,34414
<34415=34417,34416
<34417=34419,34418
<34420=34422,34421
<34422=34424,34423
<34424=34426,34425
<34426=34428,34427
<34429=34431,34430
<34432=34433
<34433=34440,34434
<34434=34436,34435
<34436=34437
<34437=34439,34438
<34441=34442
<34442=34443
<34443=34448,34447,34444
<34444=34446,34445
<34449=34450
<34450=34457,34456,34451
<34451=34455,34452
<34452=34454,34453
<34459=34460
<34460=34462,34461
<34463=34464
<34464=34466,34465
<34467=34529,34468
<34468=34469
<34469=34525,34524,34470
<34470=34471
<34471=34472
<34472=34516,34507,34504,34473
<34473=34474
<34474=34486,34475
<34475=34477,34476
<34477=34478
<34478=34480,34479
<34480=34481
<34481=34483,34482
<34483=34485,34484
<34486=34487
<34487=34496,34488
<34488=34490,34489
<34490=34491
<34491=34493,34492
<34493=34495,34494
<34496=34498,34497
<34498=34499
<34499=34501,34500
<34501=34503,34502
<34504=34506,34505
<34507=34508
<34508=34515,34509
<34509=34511,34510
<34511=34512
<34512=34514,34513
<34516=34517
<34517=34518
<34518=34523,34522,34519
<34519=34521,34520
<34525=34526
<34526=34528,34527
<34529=34530
<34530=34532,34531
<34533=34599,34534
<34534=34535
<34535=34595,34594,34536
<34536=34537
<34537=34538
<34538=34586,34577,34574,34539
<34539=34540
<34540=34552,34541
<34541=34543,34542
<34543=34544
<34544=34546,34545
<34546=34547
<34547=34549,34548
<34549=34551,34550
<34552=34553
<34553=34564,34554
<34554=34563,34555
<34555=34557,34556
<34557=34558
<34558=34560,34559
<34560=34562,34561
<34564=34573,34565
<34565=34567,34566
<34567=34568
<34568=34570,34569
<34570=34572,34571
<34574=34576,34575
<34577=34578
<34578=34585,34579
<34579=34581,34580
<34581=34582
<34582=34584,34583
<34586=34587
<34587=34588
<34588=34593,34592,34589
<34589=34591,34590
<34595=34596
<34596=34598,34597
<34599=34600
<34600=34602,34601
<34603=34617,34604
<34604=34605
<34605=34611,34606
<34606=34607
<34607=34609,34608
<34609=34610
<34611=34612
<34612=34616,34613
<34613=34615,34614
<34617=34618
<34618=34620,34619
<34621=34683,34622
<34622=34653,34623
<34623=34649,34624
<34624=34643,34625
<34625=34639,34632,34626
<34626=34627
<34627=34628
<34628=34630,34629
<34630=34631
<34632=34633
<34633=34635,34634
<34635=34636
<34636=34638,34637
<34639=34640
<34640=34642,34641
<34643=34644
<34644=34646,34645
<34646=34648,34647
<34649=34650
<34650=34652,34651
<34653=34679,34654
<34654=34673,34655
<34655=34669,34662,34656
<34656=34657
<34657=34658
<34658=34660,34659
<34660=34661
<34662=34663
<34663=34665,34664
<34665=34666
<34666=34668,34667
<34669=34670
<34670=34672,34671
<34673=34674
<34674=34676,34675
<34676=34678,34677
<34679=34680
<34680=34682,34681
<34683=34684
<34684=34686,34685
<34686=34688,34687
<34689=34690
<34690=34699,34691
<34691=34698,34692
<34692=34694,34693
<34694=34695
<34695=34697,34696
<34699=34701,34700
<34702=34703
<34704=34705
<34705=34749,34706
<34706=34707
<34707=34743,34708
<34708=34726,34709
<34709=34722,34710
<34710=34716,34711
<34711=34712
<34712=34714,34713
<34714=34715
<34716=34717
<34717=34719,34718
<34719=34721,34720
<34722=34723
<34723=34725,34724
<34726=34739,34727
<34727=34733,34728
<34728=34729
<34729=34731,34730
<34731=34732
<34733=34734
<34734=34736,34735
<34736=34738,34737
<34739=34740
<34740=34742,34741
<34743=34744
<34744=34746,34745
<34746=34748,34747
<34749=34750
<34750=34759,34751
<34751=34758,34752
<34752=34754,34753
<34754=34755
<34755=34757,34756
<34759=34761,34760
<34762=34763
<34764=34765
<34765=34767,34766
<34767=34768
<34769=34785,34770
<34770=34771
<34771=34777,34772
<34772=34773
<34773=34775,34774
<34775=34776
<34777=34778
<34778=34782,34779
<34779=34781,34780
<34782=34784,34783
<34785=34786
<34786=34791,34787
<34787=34789,34788
<34789=34790
<34791=34793,34792
<34793=34794
<34794=34796,34795
<34797=34803,34798
<34798=34799
<34799=34801,34800
<34801=34802
<34803=34804
<34804=34808,34805
<34805=34807,34806
<34808=34810,34809
<34811=34858,34812
<34812=34813
<34813=34856,34831,34814
<34814=34815
<34815=34822,34816
<34816=34817
<34817=34818
<34818=34820,34819
<34820=34821
<34822=34823
<34823=34830,34824
<34824=34826,34825
<34826=34827
<34827=34829,34828
<34831=34847,34832
<34832=34833
<34833=34843,34834
<34834=34837,34835
<34835=34836
<34837=34838
<34838=34842,34839
<34839=34841,34840
<34843=34844
<34844=34846,34845
<34847=34848
<34848=34852,34849
<34849=34850
<34850=34851
<34852=34853
<34853=34855,34854
<34856=34857
<34858=34859
<34859=34863,34860
<34860=34862,34861
<34863=34865,34864
<34866=34882,34867
<34867=34868
<34868=34880,34875,34869
<34869=34870
<34870=34871
<34871=34873,34872
<34873=34874
<34875=34876
<34876=34878,34877
<34878=34879
<34880=34881
<34882=34883
<34883=34885,34884
<34886=34892,34887
<34887=34888
<34888=34890,34889
<34890=34891
<34892=34893
<34893=34897,34894
<34894=34896,34895
<34897=34899,34898
<34900=34906,34901
<34901=34902
<34902=34904,34903
<34904=34905
<34906=34907
<34907=34911,34908
<34908=34910,34909
<34911=34913,34912
<34914=34921,34915
<34915=34916
<34916=34917
<34917=34919,34918
<34919=34920
<34921=34922
<34922=34926,34923
<34923=34925,34924
<34926=34928,34927
<34929=34931,34930
<34931=34932
<34932=34938,34933
<34933=34934
<34934=34935
<34935=34937,34936
<34938=34939
<34940=34979,34970,34967,34941
<34941=34942
<34942=34961,34943
<34943=34944
<34944=34946,34945
<34946=34947
<34947=34960,34948
<34948=34954,34949
<34949=34952,34950
<34950=34951
<34952=34953
<34954=34955
<34955=34957,34956
<34957=34959,34958
<34961=34962
<34962=34964,34963
<34964=34966,34965
<34967=34969,34968
<34970=34971
<34971=34978,34972
<34972=34974,34973
<34974=34975
<34975=34977,34976
<34979=34980
<34980=34981
<34981=34986,34985,34982
<34982=34984,34983
<35050=35053,35052,35051
<35053=35054
<35054=35072,35055
<35055=35056
<35056=35057
<35057=35068,35058
<35058=35059
<35059=35060
<35060=35067,35061
<35061=35063,35062
<35063=35064
<35064=35066,35065
<35068=35069
<35069=35071,35070
<35072=35073
<35080=35083,35082,35081
<35083=38657,38653,38649,38643,38639,38635,38631,38625,38581,38574,38570,38566,38557,38550,38546,38542,38538,38534,38530,38526,38517,38513,38509,38505,38501,38497,38490,38484,38475,38468,38458,38454,38450,38444,38440,38436,38432,38428,38424,38420,38414,38410,38406,38402,38394,38386,38382,38378,38371,38364,38356,38348,38320,38313,38309,38305,38298,38263,38256,38249,38245,38239,38226,38213,38198,38191,38184,38180,38175,38171,38167,38163,38157,38153,38140,38136,38132,38126,38122,38118,38114,38110,38106,38093,38089,38085,38080,38075,38070,38065,38058,38051,38047,38043,38042,38041,38040,38038,37963,37954,37953,37952,37951,37949,37899,37890,37889,37888,37887,37885,37829,37820,37813,37812,37811,37810,37808,37748,37739,37731,37687,37678,37677,37676,37675,37673,37654,37645,37644,37643,37642,37640,37612,37603,37602,37601,37600,37598,37570,37561,37560,37559,37558,37556,37528,37519,37518,37517,37516,37514,37486,37477,37476,37475,37474,37472,37400,37391,37387,37371,37361,37357,37347,37286,37276,37266,37261,37251,37228,37218,37208,37203,37199,37189,37171,37161,37157,37144,37139,37019,37009,37000,36993,36983,36979,36970,36966,36957,36953,36944,36940,36925,36916,36910,36906,36891,36882,36876,36872,36857,36848,36842,36838,36823,36814,36808,36804,36789,36780,36774,36770,36761,36746,36740,36736,36727,36712,36706,36702,36693,36686,36671,36665,36656,36655,36654,36653,36651,36645,36632,36626,36620,36614,36608,36599,36595,36591,36590,36589,36588,36586,36573,36564,36556,36543,36537,36531,36522,36518,36473,36472,36471,36470,36468,35084,35091,35098,35117,35121,35131,35234,35332,35386,35396,35407,35412,35419,35444,35454,35464,35471,35481,35491,35502,35512,35546,35568,35590,35598,35608,35613,35618,35623,35673,35692,35707,35716,35770,35777,35790,35796,35806,35816,35823,35830,35837,35842,35846,35867,35967,36001,36008,36455,36459
<35084=35085
<35085=35089,35086
<35086=35087
<35087=35088
<35089=35090
<35091=35092
<35092=35094,35093
<35094=35095
<35095=35097,35096
<35098=35111,35099
<35099=35100
<35100=35101
<35101=35107,35102
<35102=35105,35103
<35103=35104
<35105=35106
<35107=35108
<35108=35110,35109
<35111=35112
<35112=35116,35113
<35113=35115,35114
<35117=35118
<35118=35120,35119
<35121=35129,35122
<35122=35123
<35123=35127,35124
<35124=35125
<35125=35126
<35127=35128
<35129=35130
<35131=35230,35132
<35132=35223,35216,35205,35199,35192,35184,35175,35166,35151,35142,35133
<35133=35134
<35134=35138,35135
<35135=35136
<35136=35137
<35138=35139
<35139=35141,35140
<35142=35143
<35143=35147,35144
<35144=35145
<35145=35146
<35147=35148
<35148=35150,35149
<35151=35152
<35152=35158,35153
<35153=35156,35154
<35154=35155
<35156=35157
<35158=35159
<35159=35161,35160
<35161=35163,35162
<35163=35165,35164
<35166=35167
<35167=35171,35168
<35168=35169
<35169=35170
<35171=35172
<35172=35174,35173
<35175=35176
<35176=35180,35177
<35177=35178
<35178=35179
<35180=35181
<35181=35183,35182
<35184=35185
<35185=35187,35186
<35187=35189,35188
<35189=35191,35190
<35192=35193
<35193=35195,35194
<35195=35196
<35196=35198,35197
<35199=35200
<35200=35202,35201
<35202=35204,35203
<35205=35206
<35206=35212,35207
<35207=35210,35208
<35208=35209
<35210=35211
<35212=35213
<35213=35215,35214
<35216=35217
<35217=35219,35218
<35219=35220
<35220=35222,35221
<35223=35224
<35224=35228,35225
<35225=35226
<35226=35227
<35228=35229
<35230=35231
<35231=35233,35232
<35234=35305,35235
<35235=35295,35288,35273,35266,35259,35250,35243,35236
<35236=35237
<35237=35239,35238
<35239=35240
<35240=35242,35241
<35243=35244
<35244=35246,35245
<35246=35247
<35247=35249,35248
<35250=35251
<35251=35255,35252
<35252=35253
<35253=35254
<35255=35256
<35256=35258,35257
<35259=35260
<35260=35262,35261
<35262=35263
<35263=35265,35264
<35266=35267
<35267=35269,35268
<35269=35270
<35270=35272,35271
<35273=35274
<35274=35280,35275
<35275=35278,35276
<35276=35277
<35278=35279
<35280=35281
<35281=35283,35282
<35283=35285,35284
<35285=35287,35286
<35288=35289
<35289=35293,35290
<35290=35291
<35291=35292
<35293=35294
<35295=35303,35296
<35296=35297
<35297=35301,35298
<35298=35299
<35299=35300
<35301=35302
<35303=35304
<35305=35306
<35306=35327,35307
<35307=35320,35308
<35308=35319,35309
<35309=35311,35310
<35311=35312
<35312=35314,35313
<35314=35316,35315
<35316=35318,35317
<35320=35322,35321
<35322=35324,35323
<35324=35326,35325
<35327=35331,35328
<35328=35330,35329
<35332=35377,35351,35333
<35333=35334
<35334=35335
<35335=35347,35336
<35336=35341,35339,35337
<35337=35338
<35339=35340
<35341=35342
<35342=35346,35343
<35343=35345,35344
<35347=35348
<35348=35350,35349
<35351=35352
<35352=35373,35353
<35353=35358,35356,35354
<35354=35355
<35356=35357
<35358=35359
<35359=35365,35360
<35360=35364,35361
<35361=35363,35362
<35365=35367,35366
<35367=35368
<35368=35370,35369
<35370=35372,35371
<35373=35374
<35374=35376,35375
<35377=35378
<35378=35380,35379
<35380=35381
<35381=35383,35382
<35383=35385,35384
<35386=35394,35387
<35387=35388
<35388=35392,35389
<35389=35390
<35390=35391
<35392=35393
<35394=35395
<35396=35397
<35397=35401,35398
<35398=35399
<35399=35400
<35401=35402
<35402=35404,35403
<35404=35406,35405
<35407=35408
<35408=35410,35409
<35410=35411
<35412=35413
<35413=35417,35414
<35414=35415
<35415=35416
<35417=35418
<35419=35440,35436,35433,35420
<35420=35421
<35421=35422
<35422=35424,35423
<35424=35425
<35425=35427,35426
<35427=35431,35428
<35428=35429
<35429=35430
<35431=35432
<35433=35435,35434
<35436=35437
<35437=35439,35438
<35440=35441
<35441=35443,35442
<35444=35445
<35445=35453,35452,35446
<35446=35451,35447
<35447=35449,35448
<35449=35450
<35454=35462,35455
<35455=35456
<35456=35460,35457
<35457=35458
<35458=35459
<35460=35461
<35462=35463
<35464=35465
<35465=35467,35466
<35467=35468
<35468=35470,35469
<35471=35479,35472
<35472=35473
<35473=35477,35474
<35474=35475
<35475=35476
<35477=35478
<35479=35480
<35481=35489,35482
<35482=35483
<35483=35487,35484
<35484=35485
<35485=35486
<35487=35488
<35489=35490
<35491=35492
<35492=35496,35493
<35493=35494
<35494=35495
<35496=35497
<35497=35499,35498
<35499=35501,35500
<35502=35510,35503
<35503=35504
<35504=35508,35505
<35505=35506
<35506=35507
<35508=35509
<35510=35511
<35512=35535,35513
<35513=35514
<35514=35529,35515
<35515=35520,35518,35516
<35516=35517
<35518=35519
<35520=35521
<35521=35523,35522
<35523=35524
<35524=35526,35525
<35526=35528,35527
<35529=35530
<35530=35532,35531
<35532=35534,35533
<35535=35536
<35536=35538,35537
<35538=35540,35539
<35540=35541
<35541=35543,35542
<35543=35545,35544
<35546=35559,35547
<35547=35548
<35548=35549
<35549=35553,35550
<35550=35551
<35551=35552
<35553=35554
<35554=35556,35555
<35556=35558,35557
<35559=35560
<35560=35567,35561
<35561=35563,35562
<35563=35564
<35564=35566,35565
<35568=35581,35569
<35569=35570
<35570=35571
<35571=35575,35572
<35572=35573
<35573=35574
<35575=35576
<35576=35578,35577
<35578=35580,35579
<35581=35582
<35582=35589,35583
<35583=35585,35584
<35585=35586
<35586=35588,35587
<35590=35591
<35591=35593,35592
<35593=35595,35594
<35595=35597,35596
<35598=35599
<35599=35607,35606,35600
<35600=35605,35601
<35601=35603,35602
<35603=35604
<35608=35609
<35609=35611,35610
<35611=35612
<35613=35614
<35614=35616,35615
<35616=35617
<35618=35619
<35619=35621,35620
<35621=35622
<35623=35664,35640,35624
<35624=35625
<35625=35626
<35626=35639,35627
<35627=35633,35628
<35628=35631,35629
<35629=35630
<35631=35632
<35633=35634
<35634=35636,35635
<35636=35638,35637
<35640=35641
<35641=35663,35642
<35642=35657,35643
<35643=35646,35644
<35644=35645
<35646=35647
<35647=35649,35648
<35649=35651,35650
<35651=35652
<35652=35654,35653
<35654=35656,35655
<35657=35658
<35658=35660,35659
<35660=35662,35661
<35664=35665
<35665=35667,35666
<35667=35668
<35668=35670,35669
<35670=35672,35671
<35673=35690,35674
<35674=35679,35675
<35675=35676
<35676=35678,35677
<35679=35680
<35680=35684,35681
<35681=35682
<35682=35683
<35684=35685
<35685=35687,35686
<35687=35689,35688
<35690=35691
<35692=35698,35693
<35693=35694
<35694=35695
<35695=35697,35696
<35698=35699
<35699=35706,35700
<35700=35702,35701
<35702=35703
<35703=35705,35704
<35707=35708
<35708=35715,35714,35709
<35709=35713,35710
<35710=35712,35711
<35716=35761,35735,35717
<35717=35718
<35718=35719
<35719=35731,35720
<35720=35725,35723,35721
<35721=35722
<35723=35724
<35725=35726
<35726=35730,35727
<35727=35729,35728
<35731=35732
<35732=35734,35733
<35735=35736
<35736=35757,35737
<35737=35742,35740,35738
<35738=35739
<35740=35741
<35742=35743
<35743=35749,35744
<35744=35748,35745
<35745=35747,35746
<35749=35751,35750
<35751=35752
<35752=35754,35753
<35754=35756,35755
<35757=35758
<35758=35760,35759
<35761=35762
<35762=35764,35763
<35764=35765
<35765=35767,35766
<35767=35769,35768
<35770=35771
<35771=35773,35772
<35773=35774
<35774=35776,35775
<35777=35778
<35778=35787,35779
<35779=35785,35780
<35780=35781
<35781=35782
<35782=35784,35783
<35785=35786
<35787=35789,35788
<35790=35791
<35791=35795,35792
<35792=35794,35793
<35796=35797
<35797=35803,35798
<35798=35800,35799
<35800=35802,35801
<35803=35805,35804
<35806=35807
<35807=35813,35808
<35808=35810,35809
<35810=35812,35811
<35813=35815,35814
<35816=35817
<35817=35819,35818
<35819=35820
<35820=35822,35821
<35823=35824
<35824=35826,35825
<35826=35827
<35827=35829,35828
<35830=35831
<35831=35835,35832
<35832=35833
<35833=35834
<35835=35836
<35837=35838
<35838=35840,35839
<35840=35841
<35842=35843
<35843=35845,35844
<35846=35865,35847
<35847=35848
<35848=35849
<35849=35862,35850
<35850=35859,35851
<35851=35857,35852
<35852=35855,35853
<35853=35854
<35855=35856
<35857=35858
<35859=35861,35860
<35862=35864,35863
<35865=35866
<35867=35945,35868
<35868=35938,35869
<35869=35916,35903,35870
<35870=35871
<35871=35892,35872
<35872=35880,35873
<35873=35874
<35874=35876,35875
<35876=35877
<35877=35879,35878
<35880=35881
<35881=35889,35882
<35882=35884,35883
<35884=35886,35885
<35886=35888,35887
<35889=35891,35890
<35892=35893
<35893=35895,35894
<35895=35902,35896
<35896=35900,35897
<35897=35898
<35898=35899
<35900=35901
<35903=35904
<35904=35905
<35905=35913,35906
<35906=35908,35907
<35908=35910,35909
<35910=35912,35911
<35913=35915,35914
<35916=35917
<35917=35928,35918
<35918=35920,35919
<35920=35927,35921
<35921=35925,35922
<35922=35923
<35923=35924
<35925=35926
<35928=35930,35929
<35930=35937,35931
<35931=35935,35932
<35932=35933
<35933=35934
<35935=35936
<35938=35939
<35939=35944,35943,35940
<35940=35942,35941
<35945=35946
<35946=35959,35947
<35947=35956,35948
<35948=35954,35949
<35949=35952,35950
<35950=35951
<35952=35953
<35954=35955
<35956=35958,35957
<35959=35961,35960
<35961=35962
<35962=35964,35963
<35964=35966,35965
<35967=35992,35968
<35968=35979,35969
<35969=35970
<35970=35976,35971
<35971=35973,35972
<35973=35975,35974
<35976=35978,35977
<35979=35980
<35980=35988,35981
<35981=35982
<35982=35983
<35983=35985,35984
<35985=35987,35986
<35988=35989
<35989=35991,35990
<35992=35993
<35993=36000,35994
<35994=35996,35995
<35996=35997
<35997=35999,35998
<36001=36002
<36002=36004,36003
<36004=36005
<36005=36007,36006
<36008=36446,36057,36009
<36009=36010
<36010=36048,36011
<36011=36032,36016,36012
<36012=36013
<36013=36015,36014
<36016=36030,36017
<36017=36018
<36018=36019
<36019=36027,36020
<36020=36022,36021
<36022=36024,36023
<36024=36026,36025
<36027=36029,36028
<36030=36031
<36032=36033
<36033=36047,36046,36034
<36034=36045,36035
<36035=36039,36036
<36036=36037
<36037=36038
<36039=36040
<36040=36042,36041
<36042=36044,36043
<36048=36049
<36049=36056,36050
<36050=36052,36051
<36052=36053
<36053=36055,36054
<36057=36439,36426,36419,36412,36408,36401,36109,36062,36058
<36058=36059
<36059=36061,36060
<36062=36107,36072,36063
<36063=36064
<36064=36065
<36065=36066
<36066=36070,36067
<36067=36068
<36068=36069
<36070=36071
<36072=36096,36083,36073
<36073=36081,36074
<36074=36075
<36075=36077,36076
<36077=36078
<36078=36080,36079
<36081=36082
<36083=36084
<36084=36093,36085
<36085=36089,36086
<36086=36087
<36087=36088
<36089=36090
<36090=36092,36091
<36093=36095,36094
<36096=36097
<36097=36105,36098
<36098=36099
<36099=36100
<36100=36104,36101
<36101=36103,36102
<36105=36106
<36107=36108
<36109=36393,36382,36379,36110
<36110=36363,36350,36111
<36111=36335,36112
<36112=36326,36319,36315,36155,36113
<36113=36153,36114
<36114=36115
<36115=36147,36135,36116
<36116=36117
<36117=36131,36118
<36118=36127,36123,36119
<36119=36120
<36120=36122,36121
<36123=36124
<36124=36126,36125
<36127=36128
<36128=36130,36129
<36131=36132
<36132=36134,36133
<36135=36136
<36136=36137
<36137=36145,36138
<36138=36139
<36139=36140
<36140=36142,36141
<36142=36144,36143
<36145=36146
<36147=36148
<36148=36152,36149
<36149=36151,36150
<36153=36154
<36155=36313,36156
<36156=36311,36303,36292,36277,36273,36272,36270,36262,36249,36234,36233,36231,36223,36210,36195,36194,36192,36184,36173,36158,36157
<36158=36159
<36159=36172,36160
<36160=36170,36161
<36161=36162
<36162=36163
<36163=36167,36164
<36164=36166,36165
<36167=36169,36168
<36170=36171
<36173=36174
<36174=36183,36175
<36175=36181,36176
<36176=36179,36177
<36177=36178
<36179=36180
<36181=36182
<36184=36185
<36185=36191,36186
<36186=36188,36187
<36188=36190,36189
<36192=36193
<36195=36196
<36196=36209,36197
<36197=36207,36198
<36198=36199
<36199=36200
<36200=36204,36201
<36201=36203,36202
<36204=36206,36205
<36207=36208
<36210=36211
<36211=36222,36212
<36212=36220,36213
<36213=36218,36214
<36214=36215
<36215=36217,36216
<36218=36219
<36220=36221
<36223=36224
<36224=36230,36225
<36225=36227,36226
<36227=36229,36228
<36231=36232
<36234=36235
<36235=36248,36236
<36236=36246,36237
<36237=36238
<36238=36239
<36239=36243,36240
<36240=36242,36241
<36243=36245,36244
<36246=36247
<36249=36250
<36250=36261,36251
<36251=36259,36252
<36252=36255,36253
<36253=36254
<36255=36256
<36256=36258,36257
<36259=36260
<36262=36263
<36263=36269,36264
<36264=36266,36265
<36266=36268,36267
<36270=36271
<36273=36274
<36274=36276,36275
<36277=36278
<36278=36291,36279
<36279=36289,36280
<36280=36281
<36281=36282
<36282=36286,36283
<36283=36285,36284
<36286=36288,36287
<36289=36290
<36292=36293
<36293=36302,36294
<36294=36300,36295
<36295=36298,36296
<36296=36297
<36298=36299
<36300=36301
<36303=36304
<36304=36310,36305
<36305=36307,36306
<36307=36309,36308
<36311=36312
<36313=36314
<36315=36316
<36316=36318,36317
<36319=36320
<36320=36325,36324,36321
<36321=36323,36322
<36326=36327
<36327=36334,36333,36328
<36328=36332,36329
<36329=36331,36330
<36335=36336
<36336=36349,36337
<36337=36339,36338
<36339=36347,36340
<36340=36343,36341
<36341=36342
<36343=36344
<36344=36346,36345
<36347=36348
<36350=36351
<36351=36362,36361,36352
<36352=36360,36353
<36353=36355,36354
<36355=36357,36356
<36357=36359,36358
<36363=36364
<36364=36378,36377,36365
<36365=36376,36366
<36366=36370,36367
<36367=36368
<36368=36369
<36370=36371
<36371=36373,36372
<36373=36375,36374
<36379=36381,36380
<36382=36383
<36383=36392,36384
<36384=36386,36385
<36386=36387
<36387=36389,36388
<36389=36391,36390
<36393=36394
<36394=36395
<36395=36400,36399,36396
<36396=36398,36397
<36401=36402
<36402=36407,36406,36403
<36403=36405,36404
<36408=36409
<36409=36411,36410
<36412=36413
<36413=36418,36417,36414
<36414=36416,36415
<36419=36420
<36420=36425,36424,36421
<36421=36423,36422
<36426=36427
<36427=36437,36428
<36428=36429
<36429=36430
<36430=36436,36431
<36431=36435,36432
<36432=36434,36433
<36437=36438
<36439=36440
<36440=36444,36441
<36441=36442
<36442=36443
<36444=36445
<36446=36447
<36447=36454,36448
<36448=36450,36449
<36450=36451
<36451=36453,36452
<36455=36456
<36456=36458,36457
<36459=36460
<36460=36466,36461
<36461=36464,36462
<36462=36463
<36464=36465
<36466=36467
<36468=36469
<36473=36501,36490,36474
<36474=36475
<36475=36476
<36476=36488,36477
<36477=36478
<36478=36479
<36479=36487,36480
<36480=36482,36481
<36482=36484,36483
<36484=36486,36485
<36488=36489
<36490=36491
<36491=36499,36492
<36492=36493
<36493=36494
<36494=36496,36495
<36496=36498,36497
<36499=36500
<36501=36502
<36502=36510,36503
<36503=36505,36504
<36505=36507,36506
<36507=36509,36508
<36510=36512,36511
<36512=36513
<36513=36515,36514
<36515=36517,36516
<36518=36519
<36519=36521,36520
<36522=36523
<36523=36529,36524
<36524=36527,36525
<36525=36526
<36527=36528
<36529=36530
<36531=36532
<36532=36534,36533
<36534=36536,36535
<36537=36538
<36538=36540,36539
<36540=36542,36541
<36543=36544
<36544=36553,36545
<36545=36551,36546
<36546=36549,36547
<36547=36548
<36549=36550
<36551=36552
<36553=36555,36554
<36556=36557
<36557=36563,36558
<36558=36562,36559
<36559=36561,36560
<36564=36565
<36565=36571,36566
<36566=36569,36567
<36567=36568
<36569=36570
<36571=36572
<36573=36574
<36574=36583,36575
<36575=36581,36576
<36576=36579,36577
<36577=36578
<36579=36580
<36581=36582
<36583=36585,36584
<36586=36587
<36591=36592
<36592=36594,36593
<36595=36596
<36596=36598,36597
<36599=36600
<36600=36606,36601
<36601=36604,36602
<36602=36603
<36604=36605
<36606=36607
<36608=36609
<36609=36611,36610
<36611=36613,36612
<36614=36615
<36615=36617,36616
<36617=36619,36618
<36620=36621
<36621=36623,36622
<36623=36625,36624
<36626=36627
<36627=36629,36628
<36629=36631,36630
<36632=36633
<36633=36642,36634
<36634=36640,36635
<36635=36638,36636
<36636=36637
<36638=36639
<36640=36641
<36642=36644,36643
<36645=36646
<36646=36648,36647
<36648=36650,36649
<36651=36652
<36656=36657
<36657=36663,36658
<36658=36661,36659
<36659=36660
<36661=36662
<36663=36664
<36665=36666
<36666=36668,36667
<36668=36670,36669
<36671=36672
<36672=36683,36673
<36673=36681,36674
<36674=36679,36677,36675
<36675=36676
<36677=36678
<36679=36680
<36681=36682
<36683=36685,36684
<36686=36687
<36687=36692,36691,36688
<36688=36690,36689
<36693=36694
<36694=36700,36695
<36695=36698,36696
<36696=36697
<36698=36699
<36700=36701
<36702=36703
<36703=36705,36704
<36706=36707
<36707=36709,36708
<36709=36711,36710
<36712=36713
<36713=36724,36714
<36714=36722,36715
<36715=36720,36718,36716
<36716=36717
<36718=36719
<36720=36721
<36722=36723
<36724=36726,36725
<36727=36728
<36728=36734,36729
<36729=36732,36730
<36730=36731
<36732=36733
<36734=36735
<36736=36737
<36737=36739,36738
<36740=36741
<36741=36743,36742
<36743=36745,36744
<36746=36747
<36747=36758,36748
<36748=36756,36749
<36749=36754,36752,36750
<36750=36751
<36752=36753
<36754=36755
<36756=36757
<36758=36760,36759
<36761=36762
<36762=36768,36763
<36763=36766,36764
<36764=36765
<36766=36767
<36768=36769
<36770=36771
<36771=36773,36772
<36774=36775
<36775=36777,36776
<36777=36779,36778
<36780=36781
<36781=36787,36782
<36782=36785,36783
<36783=36784
<36785=36786
<36787=36788
<36789=36790
<36790=36801,36791
<36791=36799,36792
<36792=36797,36795,36793
<36793=36794
<36795=36796
<36797=36798
<36799=36800
<36801=36803,36802
<36804=36805
<36805=36807,36806
<36808=36809
<36809=36811,36810
<36811=36813,36812
<36814=36815
<36815=36821,36816
<36816=36819,36817
<36817=36818
<36819=36820
<36821=36822
<36823=36824
<36824=36835,36825
<36825=36833,36826
<36826=36831,36829,36827
<36827=36828
<36829=36830
<36831=36832
<36833=36834
<36835=36837,36836
<36838=36839
<36839=36841,36840
<36842=36843
<36843=36845,36844
<36845=36847,36846
<36848=36849
<36849=36855,36850
<36850=36853,36851
<36851=36852
<36853=36854
<36855=36856
<36857=36858
<36858=36869,36859
<36859=36867,36860
<36860=36865,36863,36861
<36861=36862
<36863=36864
<36865=36866
<36867=36868
<36869=36871,36870
<36872=36873
<36873=36875,36874
<36876=36877
<36877=36879,36878
<36879=36881,36880
<36882=36883
<36883=36889,36884
<36884=36887,36885
<36885=36886
<36887=36888
<36889=36890
<36891=36892
<36892=36903,36893
<36893=36901,36894
<36894=36899,36897,36895
<36895=36896
<36897=36898
<36899=36900
<36901=36902
<36903=36905,36904
<36906=36907
<36907=36909,36908
<36910=36911
<36911=36913,36912
<36913=36915,36914
<36916=36917
<36917=36923,36918
<36918=36921,36919
<36919=36920
<36921=36922
<36923=36924
<36925=36926
<36926=36937,36927
<36927=36935,36928
<36928=36933,36931,36929
<36929=36930
<36931=36932
<36933=36934
<36935=36936
<36937=36939,36938
<36940=36941
<36941=36943,36942
<36944=36945
<36945=36951,36946
<36946=36949,36947
<36947=36948
<36949=36950
<36951=36952
<36953=36954
<36954=36956,36955
<36957=36958
<36958=36964,36959
<36959=36962,36960
<36960=36961
<36962=36963
<36964=36965
<36966=36967
<36967=36969,36968
<36970=36971
<36971=36977,36972
<36972=36975,36973
<36973=36974
<36975=36976
<36977=36978
<36979=36980
<36980=36982,36981
<36983=36991,36984
<36984=36985
<36985=36989,36986
<36986=36987
<36987=36988
<36989=36990
<36991=36992
<36993=36994
<36994=36998,36995
<36995=36996
<36996=36997
<36998=36999
<37000=37001
<37001=37007,37002
<37002=37005,37003
<37003=37004
<37005=37006
<37007=37008
<37009=37017,37010
<37010=37011
<37011=37015,37012
<37012=37013
<37013=37014
<37015=37016
<37017=37018
<37019=37130,37020
<37020=37025,37021
<37021=37022
<37022=37024,37023
<37025=37122,37113,37110,37026
<37026=37099,37027
<37027=37093,37028
<37028=37086,37030,37029
<37030=37082,37066,37031
<37031=37032
<37032=37043,37033
<37033=37034
<37034=37040,37035
<37035=37037,37036
<37037=37039,37038
<37040=37042,37041
<37043=37044
<37044=37065,37064,37045
<37045=37055,37046
<37046=37052,37047
<37047=37049,37048
<37049=37051,37050
<37052=37054,37053
<37055=37061,37056
<37056=37058,37057
<37058=37060,37059
<37061=37063,37062
<37066=37067
<37067=37079,37068
<37068=37076,37069
<37069=37075,37070
<37070=37072,37071
<37072=37074,37073
<37076=37078,37077
<37079=37081,37080
<37082=37083
<37083=37085,37084
<37086=37087
<37087=37092,37091,37088
<37088=37090,37089
<37093=37094
<37094=37096,37095
<37096=37098,37097
<37099=37100
<37100=37109,37108,37101
<37101=37107,37102
<37102=37106,37103
<37103=37105,37104
<37110=37112,37111
<37113=37114
<37114=37121,37115
<37115=37117,37116
<37117=37118
<37118=37120,37119
<37122=37123
<37123=37124
<37124=37129,37128,37125
<37125=37127,37126
<37130=37131
<37131=37138,37132
<37132=37134,37133
<37134=37135
<37135=37137,37136
<37139=37140
<37140=37142,37141
<37142=37143
<37144=37145
<37145=37149,37146
<37146=37147
<37147=37148
<37149=37150
<37150=37152,37151
<37152=37154,37153
<37154=37156,37155
<37157=37158
<37158=37160,37159
<37161=37169,37162
<37162=37163
<37163=37167,37164
<37164=37165
<37165=37166
<37167=37168
<37169=37170
<37171=37180,37172
<37172=37173
<37173=37174
<37174=37178,37175
<37175=37176
<37176=37177
<37178=37179
<37180=37181
<37181=37188,37182
<37182=37186,37183
<37183=37184
<37184=37185
<37186=37187
<37189=37197,37190
<37190=37191
<37191=37195,37192
<37192=37193
<37193=37194
<37195=37196
<37197=37198
<37199=37200
<37200=37202,37201
<37203=37204
<37204=37206,37205
<37206=37207
<37208=37216,37209
<37209=37210
<37210=37214,37211
<37211=37212
<37212=37213
<37214=37215
<37216=37217
<37218=37226,37219
<37219=37220
<37220=37224,37221
<37221=37222
<37222=37223
<37224=37225
<37226=37227
<37228=37247,37229
<37229=37236,37230
<37230=37231
<37231=37235,37232
<37232=37234,37233
<37236=37237
<37237=37239,37238
<37239=37240
<37240=37242,37241
<37242=37244,37243
<37244=37246,37245
<37247=37248
<37248=37250,37249
<37251=37259,37252
<37252=37253
<37253=37257,37254
<37254=37255
<37255=37256
<37257=37258
<37259=37260
<37261=37262
<37262=37264,37263
<37264=37265
<37266=37274,37267
<37267=37268
<37268=37272,37269
<37269=37270
<37270=37271
<37272=37273
<37274=37275
<37276=37284,37277
<37277=37278
<37278=37282,37279
<37279=37280
<37280=37281
<37282=37283
<37284=37285
<37286=37340,37287
<37287=37299,37288
<37288=37289
<37289=37298,37290
<37290=37296,37291
<37291=37294,37292
<37292=37293
<37294=37295
<37296=37297
<37299=37328,37307,37300
<37300=37301
<37301=37302
<37302=37304,37303
<37304=37306,37305
<37307=37308
<37308=37325,37309
<37309=37323,37310
<37310=37317,37311
<37311=37312
<37312=37314,37313
<37314=37316,37315
<37317=37318
<37318=37320,37319
<37320=37322,37321
<37323=37324
<37325=37327,37326
<37328=37329
<37329=37335,37330
<37330=37332,37331
<37332=37334,37333
<37335=37337,37336
<37337=37339,37338
<37340=37341
<37341=37343,37342
<37343=37344
<37344=37346,37345
<37347=37355,37348
<37348=37349
<37349=37353,37350
<37350=37351
<37351=37352
<37353=37354
<37355=37356
<37357=37358
<37358=37360,37359
<37361=37369,37362
<37362=37363
<37363=37367,37364
<37364=37365
<37365=37366
<37367=37368
<37369=37370
<37371=37380,37372
<37372=37373
<37373=37374
<37374=37376,37375
<37376=37377
<37377=37379,37378
<37380=37381
<37381=37383,37382
<37383=37384
<37384=37386,37385
<37387=37388
<37388=37390,37389
<37391=37392
<37392=37398,37393
<37393=37396,37394
<37394=37395
<37396=37397
<37398=37399
<37400=37457,37451,37438,37432,37416,37410,37401
<37401=37402
<37402=37406,37403
<37403=37404
<37404=37405
<37406=37407
<37407=37409,37408
<37410=37411
<37411=37413,37412
<37413=37415,37414
<37416=37417
<37417=37428,37418
<37418=37421,37419
<37419=37420
<37421=37422
<37422=37424,37423
<37424=37425
<37425=37427,37426
<37428=37429
<37429=37431,37430
<37432=37433
<37433=37435,37434
<37435=37437,37436
<37438=37439
<37439=37448,37440
<37440=37446,37441
<37441=37444,37442
<37442=37443
<37444=37445
<37446=37447
<37448=37450,37449
<37451=37452
<37452=37454,37453
<37454=37456,37455
<37457=37458
<37458=37469,37459
<37459=37467,37460
<37460=37465,37463,37461
<37461=37462
<37463=37464
<37465=37466
<37467=37468
<37469=37471,37470
<37472=37473
<37477=37478
<37478=37484,37479
<37479=37482,37480
<37480=37481
<37482=37483
<37484=37485
<37486=37508,37499,37493,37487
<37487=37488
<37488=37490,37489
<37490=37492,37491
<37493=37494
<37494=37496,37495
<37496=37498,37497
<37499=37500
<37500=37504,37501
<37501=37502
<37502=37503
<37504=37505
<37505=37507,37506
<37508=37509
<37509=37511,37510
<37511=37513,37512
<37514=37515
<37519=37520
<37520=37526,37521
<37521=37524,37522
<37522=37523
<37524=37525
<37526=37527
<37528=37550,37541,37535,37529
<37529=37530
<37530=37532,37531
<37532=37534,37533
<37535=37536
<37536=37538,37537
<37538=37540,37539
<37541=37542
<37542=37546,37543
<37543=37544
<37544=37545
<37546=37547
<37547=37549,37548
<37550=37551
<37551=37553,37552
<37553=37555,37554
<37556=37557
<37561=37562
<37562=37568,37563
<37563=37566,37564
<37564=37565
<37566=37567
<37568=37569
<37570=37592,37583,37577,37571
<37571=37572
<37572=37574,37573
<37574=37576,37575
<37577=37578
<37578=37580,37579
<37580=37582,37581
<37583=37584
<37584=37588,37585
<37585=37586
<37586=37587
<37588=37589
<37589=37591,37590
<37592=37593
<37593=37595,37594
<37595=37597,37596
<37598=37599
<37603=37604
<37604=37610,37605
<37605=37608,37606
<37606=37607
<37608=37609
<37610=37611
<37612=37634,37625,37619,37613
<37613=37614
<37614=37616,37615
<37616=37618,37617
<37619=37620
<37620=37622,37621
<37622=37624,37623
<37625=37626
<37626=37630,37627
<37627=37628
<37628=37629
<37630=37631
<37631=37633,37632
<37634=37635
<37635=37637,37636
<37637=37639,37638
<37640=37641
<37645=37646
<37646=37652,37647
<37647=37650,37648
<37648=37649
<37650=37651
<37652=37653
<37654=37667,37661,37655
<37655=37656
<37656=37658,37657
<37658=37660,37659
<37661=37662
<37662=37664,37663
<37664=37666,37665
<37667=37668
<37668=37670,37669
<37670=37672,37671
<37673=37674
<37678=37679
<37679=37685,37680
<37680=37683,37681
<37681=37682
<37683=37684
<37685=37686
<37687=37725,37716,37707,37701,37688
<37688=37689
<37689=37698,37690
<37690=37696,37691
<37691=37694,37692
<37692=37693
<37694=37695
<37696=37697
<37698=37700,37699
<37701=37702
<37702=37704,37703
<37704=37706,37705
<37707=37708
<37708=37712,37709
<37709=37710
<37710=37711
<37712=37713
<37713=37715,37714
<37716=37717
<37717=37721,37718
<37718=37719
<37719=37720
<37721=37722
<37722=37724,37723
<37725=37726
<37726=37728,37727
<37728=37730,37729
<37731=37732
<37732=37738,37733
<37733=37737,37734
<37734=37736,37735
<37739=37740
<37740=37746,37741
<37741=37744,37742
<37742=37743
<37744=37745
<37746=37747
<37748=37802,37789,37783,37777,37761,37755,37749
<37749=37750
<37750=37752,37751
<37752=37754,37753
<37755=37756
<37756=37758,37757
<37758=37760,37759
<37761=37762
<37762=37773,37763
<37763=37766,37764
<37764=37765
<37766=37767
<37767=37769,37768
<37769=37770
<37770=37772,37771
<37773=37774
<37774=37776,37775
<37777=37778
<37778=37780,37779
<37780=37782,37781
<37783=37784
<37784=37786,37785
<37786=37788,37787
<37789=37790
<37790=37799,37791
<37791=37797,37792
<37792=37795,37793
<37793=37794
<37795=37796
<37797=37798
<37799=37801,37800
<37802=37803
<37803=37805,37804
<37805=37807,37806
<37808=37809
<37813=37814
<37814=37819,37818,37815
<37815=37817,37816
<37820=37821
<37821=37827,37822
<37822=37825,37823
<37823=37824
<37825=37826
<37827=37828
<37829=37879,37862,37853,37842,37836,37830
<37830=37831
<37831=37833,37832
<37833=37835,37834
<37836=37837
<37837=37839,37838
<37839=37841,37840
<37842=37843
<37843=37849,37844
<37844=37847,37845
<37845=37846
<37847=37848
<37849=37850
<37850=37852,37851
<37853=37854
<37854=37858,37855
<37855=37856
<37856=37857
<37858=37859
<37859=37861,37860
<37862=37863
<37863=37876,37864
<37864=37874,37865
<37865=37872,37870,37866
<37866=37867
<37867=37869,37868
<37870=37871
<37872=37873
<37874=37875
<37876=37878,37877
<37879=37880
<37880=37882,37881
<37882=37884,37883
<37885=37886
<37890=37891
<37891=37897,37892
<37892=37895,37893
<37893=37894
<37895=37896
<37897=37898
<37899=37932,37923,37912,37906,37900
<37900=37901
<37901=37903,37902
<37903=37905,37904
<37906=37907
<37907=37909,37908
<37909=37911,37910
<37912=37913
<37913=37919,37914
<37914=37917,37915
<37915=37916
<37917=37918
<37919=37920
<37920=37922,37921
<37923=37924
<37924=37928,37925
<37925=37926
<37926=37927
<37928=37929
<37929=37931,37930
<37932=37933
<37933=37946,37934
<37934=37944,37935
<37935=37942,37940,37936
<37936=37937
<37937=37939,37938
<37940=37941
<37942=37943
<37944=37945
<37946=37948,37947
<37949=37950
<37954=37955
<37955=37961,37956
<37956=37959,37957
<37957=37958
<37959=37960
<37961=37962
<37963=38029,38023,38017,38011,37998,37992,37964
<37964=37965
<37965=37986,37966
<37966=37977,37975,37971,37969,37967
<37967=37968
<37969=37970
<37971=37972
<37972=37974,37973
<37975=37976
<37977=37978
<37978=37984,37979
<37979=37982,37980
<37980=37981
<37982=37983
<37984=37985
<37986=37987
<37987=37989,37988
<37989=37991,37990
<37992=37993
<37993=37995,37994
<37995=37997,37996
<37998=37999
<37999=38008,38000
<38000=38006,38001
<38001=38004,38002
<38002=38003
<38004=38005
<38006=38007
<38008=38010,38009
<38011=38012
<38012=38014,38013
<38014=38016,38015
<38017=38018
<38018=38020,38019
<38020=38022,38021
<38023=38024
<38024=38026,38025
<38026=38028,38027
<38029=38030
<38030=38034,38031
<38031=38032
<38032=38033
<38034=38035
<38035=38037,38036
<38038=38039
<38043=38044
<38044=38046,38045
<38047=38048
<38048=38050,38049
<38051=38052
<38052=38054,38053
<38054=38055
<38055=38057,38056
<38058=38059
<38059=38061,38060
<38061=38062
<38062=38064,38063
<38065=38066
<38066=38068,38067
<38068=38069
<38070=38071
<38071=38073,38072
<38073=38074
<38075=38076
<38076=38078,38077
<38078=38079
<38080=38081
<38081=38083,38082
<38083=38084
<38085=38086
<38086=38088,38087
<38089=38090
<38090=38092,38091
<38093=38094
<38094=38105,38095
<38095=38103,38096
<38096=38101,38099,38097
<38097=38098
<38099=38100
<38101=38102
<38103=38104
<38106=38107
<38107=38109,38108
<38110=38111
<38111=38113,38112
<38114=38115
<38115=38117,38116
<38118=38119
<38119=38121,38120
<38122=38123
<38123=38125,38124
<38126=38127
<38127=38131,38128
<38128=38130,38129
<38132=38133
<38133=38135,38134
<38136=38137
<38137=38139,38138
<38140=38141
<38141=38143,38142
<38143=38145,38144
<38145=38149,38146
<38146=38147
<38147=38148
<38149=38150
<38150=38152,38151
<38153=38154
<38154=38156,38155
<38157=38158
<38158=38162,38159
<38159=38161,38160
<38163=38164
<38164=38166,38165
<38167=38168
<38168=38170,38169
<38171=38172
<38172=38174,38173
<38175=38176
<38176=38178,38177
<38178=38179
<38180=38181
<38181=38183,38182
<38184=38185
<38185=38187,38186
<38187=38188
<38188=38190,38189
<38191=38192
<38192=38194,38193
<38194=38195
<38195=38197,38196
<38198=38209,38199
<38199=38200
<38200=38201
<38201=38203,38202
<38203=38204
<38204=38206,38205
<38206=38208,38207
<38209=38210
<38210=38212,38211
<38213=38214
<38214=38225,38215
<38215=38223,38216
<38216=38221,38219,38217
<38217=38218
<38219=38220
<38221=38222
<38223=38224
<38226=38227
<38227=38238,38228
<38228=38236,38229
<38229=38234,38232,38230
<38230=38231
<38232=38233
<38234=38235
<38236=38237
<38239=38240
<38240=38244,38241
<38241=38243,38242
<38245=38246
<38246=38248,38247
<38249=38250
<38250=38252,38251
<38252=38253
<38253=38255,38254
<38256=38257
<38257=38259,38258
<38259=38260
<38260=38262,38261
<38263=38294,38290,38287,38264
<38264=38277,38271,38265
<38265=38266
<38266=38268,38267
<38268=38270,38269
<38271=38272
<38272=38274,38273
<38274=38276,38275
<38277=38278
<38278=38286,38279
<38279=38285,38280
<38280=38282,38281
<38282=38284,38283
<38287=38289,38288
<38290=38291
<38291=38293,38292
<38294=38295
<38295=38297,38296
<38298=38299
<38299=38304,38303,38300
<38300=38302,38301
<38305=38306
<38306=38308,38307
<38309=38310
<38310=38312,38311
<38313=38314
<38314=38316,38315
<38316=38317
<38317=38319,38318
<38320=38344,38340,38337,38321
<38321=38322
<38322=38323
<38323=38331,38324
<38324=38327,38325
<38325=38326
<38327=38328
<38328=38330,38329
<38331=38332
<38332=38334,38333
<38334=38336,38335
<38337=38339,38338
<38340=38341
<38341=38343,38342
<38344=38345
<38345=38347,38346
<38348=38349
<38349=38351,38350
<38351=38353,38352
<38353=38355,38354
<38356=38357
<38357=38359,38358
<38359=38361,38360
<38361=38363,38362
<38364=38365
<38365=38369,38366
<38366=38367
<38367=38368
<38369=38370
<38371=38372
<38372=38377,38376,38373
<38373=38375,38374
<38378=38379
<38379=38381,38380
<38382=38383
<38383=38385,38384
<38386=38387
<38387=38389,38388
<38389=38391,38390
<38391=38393,38392
<38394=38395
<38395=38397,38396
<38397=38399,38398
<38399=38401,38400
<38402=38403
<38403=38405,38404
<38406=38407
<38407=38409,38408
<38410=38411
<38411=38413,38412
<38414=38415
<38415=38417,38416
<38417=38419,38418
<38420=38421
<38421=38423,38422
<38424=38425
<38425=38427,38426
<38428=38429
<38429=38431,38430
<38432=38433
<38433=38435,38434
<38436=38437
<38437=38439,38438
<38440=38441
<38441=38443,38442
<38444=38445
<38445=38449,38446
<38446=38448,38447
<38450=38451
<38451=38453,38452
<38454=38455
<38455=38457,38456
<38458=38459
<38459=38467,38460
<38460=38466,38461
<38461=38465,38462
<38462=38464,38463
<38468=38469
<38469=38471,38470
<38471=38472
<38472=38474,38473
<38475=38476
<38476=38480,38477
<38477=38478
<38478=38479
<38480=38481
<38481=38483,38482
<38484=38485
<38485=38489,38486
<38486=38488,38487
<38490=38491
<38491=38493,38492
<38493=38494
<38494=38496,38495
<38497=38498
<38498=38500,38499
<38501=38502
<38502=38504,38503
<38505=38506
<38506=38508,38507
<38509=38510
<38510=38512,38511
<38513=38514
<38514=38516,38515
<38517=38518
<38518=38522,38519
<38519=38520
<38520=38521
<38522=38523
<38523=38525,38524
<38526=38527
<38527=38529,38528
<38530=38531
<38531=38533,38532
<38534=38535
<38535=38537,38536
<38538=38539
<38539=38541,38540
<38542=38543
<38543=38545,38544
<38546=38547
<38547=38549,38548
<38550=38551
<38551=38553,38552
<38553=38554
<38554=38556,38555
<38557=38558
<38558=38562,38559
<38559=38560
<38560=38561
<38562=38563
<38563=38565,38564
<38566=38567
<38567=38569,38568
<38570=38571
<38571=38573,38572
<38574=38575
<38575=38577,38576
<38577=38578
<38578=38580,38579
<38581=38612,38582
<38582=38583
<38583=38603,38584
<38584=38594,38585
<38585=38586
<38586=38588,38587
<38588=38589
<38589=38591,38590
<38591=38593,38592
<38594=38595
<38595=38597,38596
<38597=38598
<38598=38600,38599
<38600=38602,38601
<38603=38604
<38604=38606,38605
<38606=38607
<38607=38609,38608
<38609=38611,38610
<38612=38613
<38613=38622,38614
<38614=38616,38615
<38616=38617
<38617=38619,38618
<38619=38621,38620
<38622=38624,38623
<38625=38626
<38626=38628,38627
<38628=38630,38629
<38631=38632
<38632=38634,38633
<38635=38636
<38636=38638,38637
<38639=38640
<38640=38642,38641
<38643=38644
<38644=38648,38645
<38645=38647,38646
<38649=38650
<38650=38652,38651
<38653=38654
<38654=38656,38655
<38657=38658
<38658=38663,38662,38659
<38659=38661,38660
<39052=39055,39054,39053
<39055=39685,39680,39662,39643,39624,39605,39586,39567,39548,39529,39510,39491,39472,39453,39434,39415,39396,39377,39359,39350,39341,39332,39323,39304,39285,39266,39247,39228,39209,39190,39171,39152,39133,39114,39095,39076,39066,39056
<39056=39064,39057
<39057=39058
<39058=39060,39059
<39060=39061
<39061=39063,39062
<39064=39065
<39066=39074,39067
<39067=39068
<39068=39070,39069
<39070=39071
<39071=39073,39072
<39074=39075
<39076=39077
<39077=39085,39078
<39078=39083,39081,39079
<39079=39080
<39081=39082
<39083=39084
<39085=39086
<39086=39088,39087
<39088=39090,39089
<39090=39092,39091
<39092=39094,39093
<39095=39096
<39096=39104,39097
<39097=39102,39100,39098
<39098=39099
<39100=39101
<39102=39103
<39104=39105
<39105=39107,39106
<39107=39109,39108
<39109=39111,39110
<39111=39113,39112
<39114=39115
<39115=39123,39116
<39116=39121,39119,39117
<39117=39118
<39119=39120
<39121=39122
<39123=39124
<39124=39126,39125
<39126=39128,39127
<39128=39130,39129
<39130=39132,39131
<39133=39134
<39134=39142,39135
<39135=39140,39138,39136
<39136=39137
<39138=39139
<39140=39141
<39142=39143
<39143=39145,39144
<39145=39147,39146
<39147=39149,39148
<39149=39151,39150
<39152=39153
<39153=39161,39154
<39154=39159,39157,39155
<39155=39156
<39157=39158
<39159=39160
<39161=39162
<39162=39164,39163
<39164=39166,39165
<39166=39168,39167
<39168=39170,39169
<39171=39172
<39172=39180,39173
<39173=39178,39176,39174
<39174=39175
<39176=39177
<39178=39179
<39180=39181
<39181=39183,39182
<39183=39185,39184
<39185=39187,39186
<39187=39189,39188
<39190=39191
<39191=39199,39192
<39192=39197,39195,39193
<39193=39194
<39195=39196
<39197=39198
<39199=39200
<39200=39202,39201
<39202=39204,39203
<39204=39206,39205
<39206=39208,39207
<39209=39210
<39210=39218,39211
<39211=39216,39214,39212
<39212=39213
<39214=39215
<39216=39217
<39218=39219
<39219=39221,39220
<39221=39223,39222
<39223=39225,39224
<39225=39227,39226
<39228=39229
<39229=39237,39230
<39230=39235,39233,39231
<39231=39232
<39233=39234
<39235=39236
<39237=39238
<39238=39240,39239
<39240=39242,39241
<39242=39244,39243
<39244=39246,39245
<39247=39248
<39248=39256,39249
<39249=39254,39252,39250
<39250=39251
<39252=39253
<39254=39255
<39256=39257
<39257=39259,39258
<39259=39261,39260
<39261=39263,39262
<39263=39265,39264
<39266=39267
<39267=39275,39268
<39268=39273,39271,39269
<39269=39270
<39271=39272
<39273=39274
<39275=39276
<39276=39278,39277
<39278=39280,39279
<39280=39282,39281
<39282=39284,39283
<39285=39286
<39286=39294,39287
<39287=39292,39290,39288
<39288=39289
<39290=39291
<39292=39293
<39294=39295
<39295=39297,39296
<39297=39299,39298
<39299=39301,39300
<39301=39303,39302
<39304=39305
<39305=39313,39306
<39306=39311,39309,39307
<39307=39308
<39309=39310
<39311=39312
<39313=39314
<39314=39316,39315
<39316=39318,39317
<39318=39320,39319
<39320=39322,39321
<39323=39324
<39324=39330,39325
<39325=39328,39326
<39326=39327
<39328=39329
<39330=39331
<39332=39333
<39333=39339,39334
<39334=39337,39335
<39335=39336
<39337=39338
<39339=39340
<39341=39342
<39342=39348,39343
<39343=39346,39344
<39344=39345
<39346=39347
<39348=39349
<39350=39351
<39351=39357,39352
<39352=39355,39353
<39353=39354
<39355=39356
<39357=39358
<39359=39370,39360
<39360=39361
<39361=39362
<39362=39368,39363
<39363=39366,39364
<39364=39365
<39366=39367
<39368=39369
<39370=39371
<39371=39373,39372
<39373=39374
<39374=39376,39375
<39377=39378
<39378=39386,39379
<39379=39384,39382,39380
<39380=39381
<39382=39383
<39384=39385
<39386=39387
<39387=39389,39388
<39389=39391,39390
<39391=39393,39392
<39393=39395,39394
<39396=39397
<39397=39405,39398
<39398=39403,39401,39399
<39399=39400
<39401=39402
<39403=39404
<39405=39406
<39406=39408,39407
<39408=39410,39409
<39410=39412,39411
<39412=39414,39413
<39415=39416
<39416=39424,39417
<39417=39422,39420,39418
<39418=39419
<39420=39421
<39422=39423
<39424=39425
<39425=39427,39426
<39427=39429,39428
<39429=39431,39430
<39431=39433,39432
<39434=39435
<39435=39443,39436
<39436=39441,39439,39437
<39437=39438
<39439=39440
<39441=39442
<39443=39444
<39444=39446,39445
<39446=39448,39447
<39448=39450,39449
<39450=39452,39451
<39453=39454
<39454=39462,39455
<39455=39460,39458,39456
<39456=39457
<39458=39459
<39460=39461
<39462=39463
<39463=39465,39464
<39465=39467,39466
<39467=39469,39468
<39469=39471,39470
<39472=39473
<39473=39481,39474
<39474=39479,39477,39475
<39475=39476
<39477=39478
<39479=39480
<39481=39482
<39482=39484,39483
<39484=39486,39485
<39486=39488,39487
<39488=39490,39489
<39491=39492
<39492=39500,39493
<39493=39498,39496,39494
<39494=39495
<39496=39497
<39498=39499
<39500=39501
<39501=39503,39502
<39503=39505,39504
<39505=39507,39506
<39507=39509,39508
<39510=39511
<39511=39519,39512
<39512=39517,39515,39513
<39513=39514
<39515=39516
<39517=39518
<39519=39520
<39520=39522,39521
<39522=39524,39523
<39524=39526,39525
<39526=39528,39527
<39529=39530
<39530=39538,39531
<39531=39536,39534,39532
<39532=39533
<39534=39535
<39536=39537
<39538=39539
<39539=39541,39540
<39541=39543,39542
<39543=39545,39544
<39545=39547,39546
<39548=39549
<39549=39557,39550
<39550=39555,39553,39551
<39551=39552
<39553=39554
<39555=39556
<39557=39558
<39558=39560,39559
<39560=39562,39561
<39562=39564,39563
<39564=39566,39565
<39567=39568
<39568=39576,39569
<39569=39574,39572,39570
<39570=39571
<39572=39573
<39574=39575
<39576=39577
<39577=39579,39578
<39579=39581,39580
<39581=39583,39582
<39583=39585,39584
<39586=39587
<39587=39595,39588
<39588=39593,39591,39589
<39589=39590
<39591=39592
<39593=39594
<39595=39596
<39596=39598,39597
<39598=39600,39599
<39600=39602,39601
<39602=39604,39603
<39605=39606
<39606=39614,39607
<39607=39612,39610,39608
<39608=39609
<39610=39611
<39612=39613
<39614=39615
<39615=39617,39616
<39617=39619,39618
<39619=39621,39620
<39621=39623,39622
<39624=39625
<39625=39633,39626
<39626=39631,39629,39627
<39627=39628
<39629=39630
<39631=39632
<39633=39634
<39634=39636,39635
<39636=39638,39637
<39638=39640,39639
<39640=39642,39641
<39643=39644
<39644=39652,39645
<39645=39650,39648,39646
<39646=39647
<39648=39649
<39650=39651
<39652=39653
<39653=39655,39654
<39655=39657,39656
<39657=39659,39658
<39659=39661,39660
<39662=39673,39663
<39663=39664
<39664=39665
<39665=39671,39666
<39666=39669,39667
<39667=39668
<39669=39670
<39671=39672
<39673=39674
<39674=39676,39675
<39676=39677
<39677=39679,39678
<39680=39681
<39681=39683,39682
<39683=39684
<39685=39687,39686
<39687=39688
<39688=39699,39689
<39689=39696,39690
<39690=39692,39691
<39692=39693
<39693=39695,39694
<39696=39698,39697
<39769=39772,39771,39770
<39772=39773
<39773=39869,39827,39774
<39774=39775
<39775=39776
<39776=39823,39777
<39777=39810,39791,39783,39778
<39778=39779
<39779=39781,39780
<39781=39782
<39783=39784
<39784=39790,39785
<39785=39787,39786
<39787=39789,39788
<39791=39792
<39792=39806,39793
<39793=39804,39802,39800,39798,39796,39794
<39794=39795
<39796=39797
<39798=39799
<39800=39801
<39802=39803
<39804=39805
<39806=39807
<39807=39809,39808
<39810=39811
<39811=39817,39812
<39812=39815,39813
<39813=39814
<39815=39816
<39817=39818
<39818=39820,39819
<39820=39822,39821
<39823=39824
<39824=39826,39825
<39827=39856,39837,39833,39828
<39828=39829
<39829=39831,39830
<39831=39832
<39833=39834
<39834=39836,39835
<39837=39838
<39838=39852,39839
<39839=39850,39848,39846,39844,39842,39840
<39840=39841
<39842=39843
<39844=39845
<39846=39847
<39848=39849
<39850=39851
<39852=39853
<39853=39855,39854
<39856=39857
<39857=39863,39858
<39858=39861,39859
<39859=39860
<39861=39862
<39863=39864
<39864=39866,39865
<39866=39868,39867
<39869=39870
<39870=39872,39871
<39884=39887,39886,39885
<39887=39888
<39888=39980,39938,39889
<39889=39890
<39890=39891
<39891=39934,39892
<39892=39921,39902,39898,39893
<39893=39894
<39894=39896,39895
<39896=39897
<39898=39899
<39899=39901,39900
<39902=39903
<39903=39917,39904
<39904=39915,39913,39911,39909,39907,39905
<39905=39906
<39907=39908
<39909=39910
<39911=39912
<39913=39914
<39915=39916
<39917=39918
<39918=39920,39919
<39921=39922
<39922=39928,39923
<39923=39926,39924
<39924=39925
<39926=39927
<39928=39929
<39929=39931,39930
<39931=39933,39932
<39934=39935
<39935=39937,39936
<39938=39967,39948,39944,39939
<39939=39940
<39940=39942,39941
<39942=39943
<39944=39945
<39945=39947,39946
<39948=39949
<39949=39963,39950
<39950=39961,39959,39957,39955,39953,39951
<39951=39952
<39953=39954
<39955=39956
<39957=39958
<39959=39960
<39961=39962
<39963=39964
<39964=39966,39965
<39967=39968
<39968=39974,39969
<39969=39972,39970
<39970=39971
<39972=39973
<39974=39975
<39975=39977,39976
<39977=39979,39978
<39980=39981
<39981=39983,39982
<39983=39985,39984
<39985=39987,39986
<39999=40002,40001,40000
<40002=40115,40063,40059,40053,40041,40003
<40003=40037,40004
<40004=40024,40005
<40005=40006
<40006=40020,40007
<40007=40018,40016,40014,40012,40010,40008
<40008=40009
<40010=40011
<40012=40013
<40014=40015
<40016=40017
<40018=40019
<40020=40021
<40021=40023,40022
<40024=40025
<40025=40031,40026
<40026=40029,40027
<40027=40028
<40029=40030
<40031=40032
<40032=40034,40033
<40034=40036,40035
<40037=40038
<40038=40040,40039
<40041=40042
<40042=40051,40043
<40043=40044
<40044=40045
<40045=40047,40046
<40047=40048
<40048=40050,40049
<40051=40052
<40053=40054
<40054=40058,40055
<40055=40057,40056
<40059=40060
<40060=40062,40061
<40063=40111,40099,40064
<40064=40065
<40065=40066
<40066=40090,40067
<40067=40075,40068
<40068=40069
<40069=40073,40070
<40070=40071
<40071=40072
<40073=40074
<40075=40076
<40076=40089,40077
<40077=40079,40078
<40079=40081,40080
<40081=40083,40082
<40083=40084
<40084=40086,40085
<40086=40088,40087
<40090=40091
<40091=40093,40092
<40093=40094
<40094=40096,40095
<40096=40098,40097
<40099=40107,40100
<40100=40101
<40101=40105,40102
<40102=40103
<40103=40104
<40105=40106
<40107=40108
<40108=40110,40109
<40111=40112
<40112=40114,40113
<40115=40116
<40116=40121,40120,40117
<40117=40119,40118
<40139=40142,40141,40140
<40142=40228,40181,40143
<40143=40177,40144
<40144=40164,40145
<40145=40146
<40146=40160,40147
<40147=40158,40156,40154,40152,40150,40148
<40148=40149
<40150=40151
<40152=40153
<40154=40155
<40156=40157
<40158=40159
<40160=40161
<40161=40163,40162
<40164=40165
<40165=40171,40166
<40166=40169,40167
<40167=40168
<40169=40170
<40171=40172
<40172=40174,40173
<40174=40176,40175
<40177=40178
<40178=40180,40179
<40181=40213,40201,40182
<40182=40183
<40183=40184
<40184=40197,40185
<40185=40193,40186
<40186=40187
<40187=40191,40188
<40188=40189
<40189=40190
<40191=40192
<40193=40194
<40194=40196,40195
<40197=40198
<40198=40200,40199
<40201=40209,40202
<40202=40203
<40203=40207,40204
<40204=40205
<40205=40206
<40207=40208
<40209=40210
<40210=40212,40211
<40213=40214
<40214=40223,40215
<40215=40217,40216
<40217=40218
<40218=40220,40219
<40220=40222,40221
<40223=40225,40224
<40225=40227,40226
<40228=40229
<40229=40234,40233,40230
<40230=40232,40231
<40249=40252,40251,40250
<40252=40268,40253
<40253=40262,40254
<40254=40255
<40255=40256
<40256=40260,40257
<40257=40258
<40258=40259
<40260=40261
<40262=40263
<40263=40267,40264
<40264=40266,40265
<40268=40269
<40269=40273,40270
<40270=40271
<40271=40272
<40273=40274
<40279=40285,40284,40280
<40280=40281
<40281=40283,40282
<40285=40286
<40286=40323,40301,40287
<40287=40288
<40288=40289
<40289=40297,40290
<40290=40295,40293,40291
<40291=40292
<40293=40294
<40295=40296
<40297=40298
<40298=40300,40299
<40301=40302
<40302=40319,40303
<40303=40308,40306,40304
<40304=40305
<40306=40307
<40308=40309
<40309=40311,40310
<40311=40313,40312
<40313=40314
<40314=40316,40315
<40316=40318,40317
<40319=40320
<40320=40322,40321
<40323=40324
<40324=40326,40325
<40326=40327
<40327=40329,40328
<40329=40331,40330
<40341=40347,40346,40342
<40342=40343
<40343=40345,40344
<40347=40744,40737,40730,40723,40710,40394,40365,40350,40348
<40348=40349
<40350=40352,40351
<40352=40353
<40353=40364,40354
<40354=40356,40355
<40356=40357
<40357=40359,40358
<40359=40361,40360
<40361=40363,40362
<40365=40386,40377,40374,40366
<40366=40367
<40367=40369,40368
<40369=40371,40370
<40371=40373,40372
<40374=40376,40375
<40377=40378
<40378=40385,40379
<40379=40381,40380
<40381=40382
<40382=40384,40383
<40386=40387
<40387=40388
<40388=40393,40392,40389
<40389=40391,40390
<40394=40706,40693,40690,40395
<40395=40661,40657,40645,40641,40637,40625,40618,40585,40552,40546,40487,40396
<40396=40476,40397
<40397=40472,40413,40398
<40398=40402,40399
<40399=40400
<40400=40401
<40402=40403
<40403=40412,40404
<40404=40406,40405
<40406=40407
<40407=40409,40408
<40409=40411,40410
<40413=40464,40453,40450,40414
<40414=40437,40415
<40415=40422,40418,40416
<40416=40417
<40418=40419
<40419=40421,40420
<40422=40423
<40423=40435,40424
<40424=40433,40429,40425
<40425=40426
<40426=40428,40427
<40429=40430
<40430=40432,40431
<40433=40434
<40435=40436
<40437=40438
<40438=40449,40448,40439
<40439=40447,40440
<40440=40446,40441
<40441=40443,40442
<40443=40445,40444
<40450=40452,40451
<40453=40454
<40454=40463,40455
<40455=40457,40456
<40457=40458
<40458=40460,40459
<40460=40462,40461
<40464=40465
<40465=40466
<40466=40471,40470,40467
<40467=40469,40468
<40472=40473
<40473=40475,40474
<40476=40477
<40477=40486,40478
<40478=40480,40479
<40480=40481
<40481=40483,40482
<40483=40485,40484
<40487=40538,40527,40524,40488
<40488=40511,40489
<40489=40496,40492,40490
<40490=40491
<40492=40493
<40493=40495,40494
<40496=40497
<40497=40509,40498
<40498=40507,40503,40499
<40499=40500
<40500=40502,40501
<40503=40504
<40504=40506,40505
<40507=40508
<40509=40510
<40511=40512
<40512=40523,40522,40513
<40513=40521,40514
<40514=40520,40515
<40515=40517,40516
<40517=40519,40518
<40524=40526,40525
<40527=40528
<40528=40537,40529
<40529=40531,40530
<40531=40532
<40532=40534,40533
<40534=40536,40535
<40538=40539
<40539=40540
<40540=40545,40544,40541
<40541=40543,40542
<40546=40548,40547
<40548=40549
<40549=40551,40550
<40552=40577,40566,40563,40553
<40553=40554
<40554=40562,40555
<40555=40557,40556
<40557=40559,40558
<40559=40561,40560
<40563=40565,40564
<40566=40567
<40567=40576,40568
<40568=40570,40569
<40570=40571
<40571=40573,40572
<40573=40575,40574
<40577=40578
<40578=40579
<40579=40584,40583,40580
<40580=40582,40581
<40585=40610,40599,40596,40586
<40586=40587
<40587=40595,40588
<40588=40590,40589
<40590=40592,40591
<40592=40594,40593
<40596=40598,40597
<40599=40600
<40600=40609,40601
<40601=40603,40602
<40603=40604
<40604=40606,40605
<40606=40608,40607
<40610=40611
<40611=40612
<40612=40617,40616,40613
<40613=40615,40614
<40618=40619
<40619=40624,40623,40620
<40620=40622,40621
<40625=40626
<40626=40636,40635,40627
<40627=40634,40628
<40628=40630,40629
<40630=40631
<40631=40633,40632
<40637=40638
<40638=40640,40639
<40641=40642
<40642=40644,40643
<40645=40646
<40646=40656,40647
<40647=40655,40648
<40648=40650,40649
<40650=40652,40651
<40652=40654,40653
<40657=40658
<40658=40660,40659
<40661=40682,40673,40670,40662
<40662=40663
<40663=40665,40664
<40665=40667,40666
<40667=40669,40668
<40670=40672,40671
<40673=40674
<40674=40681,40675
<40675=40677,40676
<40677=40678
<40678=40680,40679
<40682=40683
<40683=40684
<40684=40689,40688,40685
<40685=40687,40686
<40690=40692,40691
<40693=40694
<40694=40705,40695
<40695=40697,40696
<40697=40698
<40698=40700,40699
<40700=40702,40701
<40702=40704,40703
<40706=40707
<40707=40709,40708
<40710=40717,40711
<40711=40716,40715,40712
<40712=40714,40713
<40717=40722,40721,40718
<40718=40720,40719
<40723=40724
<40724=40729,40728,40725
<40725=40727,40726
<40730=40731
<40731=40736,40735,40732
<40732=40734,40733
<40737=40738
<40738=40743,40742,40739
<40739=40741,40740
<40744=40747,40745
<40745=40746
<40747=40748
<40748=40750,40749
<40750=40752,40751
<40752=40753
<40753=40755,40754
<40808=40811,40810,40809
<40811=40896,40812
<40812=40888,40879,40876,40813
<40813=40862,40814
<40814=40849,40815
<40815=40845,40837,40825,40816
<40816=40817
<40817=40821,40818
<40818=40819
<40819=40820
<40821=40822
<40822=40824,40823
<40825=40826
<40826=40835,40827
<40827=40828
<40828=40829
<40829=40831,40830
<40831=40832
<40832=40834,40833
<40835=40836
<40837=40838
<40838=40844,40839
<40839=40843,40840
<40840=40842,40841
<40845=40846
<40846=40848,40847
<40849=40850
<40850=40852,40851
<40852=40861,40853
<40853=40855,40854
<40855=40856
<40856=40858,40857
<40858=40860,40859
<40862=40863
<40863=40875,40874,40864
<40864=40873,40865
<40865=40867,40866
<40867=40868
<40868=40870,40869
<40870=40872,40871
<40876=40878,40877
<40879=40880
<40880=40887,40881
<40881=40883,40882
<40883=40884
<40884=40886,40885
<40888=40889
<40889=40890
<40890=40895,40894,40891
<40891=40893,40892
<40896=40897
<40897=40899,40898
<40899=40900
<40900=40902,40901
<40919=40922,40921,40920
<40922=40923
<40923=40936,40924
<40924=40925
<40925=40926
<40926=40934,40927
<40927=40928
<40928=40929
<40929=40933,40930
<40930=40932,40931
<40934=40935
<40936=40937
<40944=40947,40946,40945
<40947=40966,40959,40948
<40948=40949
<40949=40953,40950
<40950=40951
<40951=40952
<40953=40954
<40954=40956,40955
<40956=40958,40957
<40959=40960
<40960=40964,40961
<40961=40962
<40962=40963
<40964=40965
<40966=40967
<40967=40969,40968
<40969=40970
<40970=40972,40971
<40972=40974,40973
<40983=40986,40985,40984
<40986=42300,42294,42287,42282,42267,42263,42259,42252,42248,42241,42229,42094,41988,41969,41004,40997,40995,40991,40987
<40987=40988
<40988=40990,40989
<40991=40992
<40992=40994,40993
<40995=40996
<40997=40998
<40998=41002,40999
<40999=41000
<41000=41001
<41002=41003
<41004=41967,41038,41005
<41005=41006
<41006=41027,41007
<41007=41008
<41008=41023,41009
<41009=41010
<41010=41011
<41011=41015,41012
<41012=41013
<41013=41014
<41015=41016
<41016=41018,41017
<41018=41020,41019
<41020=41022,41021
<41023=41024
<41024=41026,41025
<41027=41028
<41028=41032,41029
<41029=41030
<41030=41031
<41032=41033
<41033=41035,41034
<41035=41037,41036
<41038=41960,41952,41945,41929,41920,41851,41636,41625,41565,41543,41536,41468,41403,41392,41338,41312,41290,41125,41112,41103,41094,41070,41047,41039
<41039=41040
<41040=41042,41041
<41042=41044,41043
<41044=41046,41045
<41047=41068,41048
<41048=41057,41049
<41049=41055,41050
<41050=41051
<41051=41053,41052
<41053=41054
<41055=41056
<41057=41058
<41058=41062,41059
<41059=41060
<41060=41061
<41062=41063
<41063=41065,41064
<41065=41067,41066
<41068=41069
<41070=41071
<41071=41088,41072
<41072=41086,41073
<41073=41074
<41074=41076,41075
<41076=41080,41077
<41077=41078
<41078=41079
<41080=41081
<41081=41083,41082
<41083=41085,41084
<41086=41087
<41088=41089
<41089=41091,41090
<41091=41093,41092
<41094=41095
<41095=41099,41096
<41096=41097
<41097=41098
<41099=41100
<41100=41102,41101
<41103=41104
<41104=41106,41105
<41106=41107
<41107=41109,41108
<41109=41111,41110
<41112=41113
<41113=41119,41114
<41114=41117,41115
<41115=41116
<41117=41118
<41119=41120
<41120=41122,41121
<41122=41124,41123
<41125=41288,41126
<41126=41281,41270,41261,41248,41228,41219,41206,41189,41172,41155,41138,41127
<41127=41128
<41128=41132,41129
<41129=41130
<41130=41131
<41132=41133
<41133=41135,41134
<41135=41137,41136
<41138=41139
<41139=41145,41140
<41140=41143,41141
<41141=41142
<41143=41144
<41145=41146
<41146=41148,41147
<41148=41150,41149
<41150=41152,41151
<41152=41154,41153
<41155=41156
<41156=41162,41157
<41157=41160,41158
<41158=41159
<41160=41161
<41162=41163
<41163=41165,41164
<41165=41167,41166
<41167=41169,41168
<41169=41171,41170
<41172=41173
<41173=41179,41174
<41174=41177,41175
<41175=41176
<41177=41178
<41179=41180
<41180=41182,41181
<41182=41184,41183
<41184=41186,41185
<41186=41188,41187
<41189=41190
<41190=41196,41191
<41191=41194,41192
<41192=41193
<41194=41195
<41196=41197
<41197=41199,41198
<41199=41201,41200
<41201=41203,41202
<41203=41205,41204
<41206=41207
<41207=41209,41208
<41209=41210
<41210=41212,41211
<41212=41214,41213
<41214=41216,41215
<41216=41218,41217
<41219=41220
<41220=41222,41221
<41222=41223
<41223=41225,41224
<41225=41227,41226
<41228=41229
<41229=41242,41230
<41230=41233,41231
<41231=41232
<41233=41234
<41234=41240,41235
<41235=41238,41236
<41236=41237
<41238=41239
<41240=41241
<41242=41243
<41243=41245,41244
<41245=41247,41246
<41248=41249
<41249=41258,41250
<41250=41256,41251
<41251=41254,41252
<41252=41253
<41254=41255
<41256=41257
<41258=41260,41259
<41261=41262
<41262=41266,41263
<41263=41264
<41264=41265
<41266=41267
<41267=41269,41268
<41270=41271
<41271=41280,41279,41272
<41272=41278,41273
<41273=41277,41274
<41274=41276,41275
<41281=41282
<41282=41287,41286,41283
<41283=41285,41284
<41288=41289
<41290=41310,41301,41291
<41291=41292
<41292=41293
<41293=41297,41294
<41294=41295
<41295=41296
<41297=41298
<41298=41300,41299
<41301=41302
<41302=41306,41303
<41303=41304
<41304=41305
<41306=41307
<41307=41309,41308
<41310=41311
<41312=41313
<41313=41334,41314
<41314=41332,41323,41321,41319,41317,41315
<41315=41316
<41317=41318
<41319=41320
<41321=41322
<41323=41324
<41324=41330,41325
<41325=41328,41326
<41326=41327
<41328=41329
<41330=41331
<41332=41333
<41334=41335
<41335=41337,41336
<41338=41384,41375,41372,41339
<41339=41351,41340
<41340=41341
<41341=41345,41342
<41342=41343
<41343=41344
<41345=41346
<41346=41348,41347
<41348=41350,41349
<41351=41352
<41352=41363,41353
<41353=41362,41354
<41354=41356,41355
<41356=41357
<41357=41359,41358
<41359=41361,41360
<41363=41365,41364
<41365=41367,41366
<41367=41369,41368
<41369=41371,41370
<41372=41374,41373
<41375=41376
<41376=41383,41377
<41377=41379,41378
<41379=41380
<41380=41382,41381
<41384=41385
<41385=41386
<41386=41391,41390,41387
<41387=41389,41388
<41392=41393
<41393=41397,41394
<41394=41395
<41395=41396
<41397=41398
<41398=41400,41399
<41400=41402,41401
<41403=41460,41451,41448,41404
<41404=41434,41424,41405
<41405=41420,41406
<41406=41407
<41407=41408
<41408=41414,41409
<41409=41412,41410
<41410=41411
<41412=41413
<41414=41415
<41415=41417,41416
<41417=41419,41418
<41420=41421
<41421=41423,41422
<41424=41432,41425
<41425=41426
<41426=41427
<41427=41429,41428
<41429=41431,41430
<41432=41433
<41434=41435
<41435=41447,41446,41436
<41436=41445,41437
<41437=41439,41438
<41439=41440
<41440=41442,41441
<41442=41444,41443
<41448=41450,41449
<41451=41452
<41452=41459,41453
<41453=41455,41454
<41455=41456
<41456=41458,41457
<41460=41461
<41461=41462
<41462=41467,41466,41463
<41463=41465,41464
<41468=41528,41519,41516,41469
<41469=41470
<41470=41505,41471
<41471=41491,41472
<41472=41479,41473
<41473=41475,41474
<41475=41476
<41476=41478,41477
<41479=41480
<41480=41488,41481
<41481=41485,41482
<41482=41484,41483
<41485=41487,41486
<41488=41490,41489
<41491=41492
<41492=41504,41503,41493
<41493=41502,41494
<41494=41496,41495
<41496=41497
<41497=41499,41498
<41499=41501,41500
<41505=41506
<41506=41515,41507
<41507=41509,41508
<41509=41510
<41510=41512,41511
<41512=41514,41513
<41516=41518,41517
<41519=41520
<41520=41527,41521
<41521=41523,41522
<41523=41524
<41524=41526,41525
<41528=41529
<41529=41530
<41530=41535,41534,41531
<41531=41533,41532
<41536=41537
<41537=41542,41541,41538
<41538=41540,41539
<41543=41563,41554,41544
<41544=41545
<41545=41546
<41546=41550,41547
<41547=41548
<41548=41549
<41550=41551
<41551=41553,41552
<41554=41555
<41555=41559,41556
<41556=41557
<41557=41558
<41559=41560
<41560=41562,41561
<41563=41564
<41565=41617,41608,41605,41566
<41566=41567
<41567=41594,41568
<41568=41569
<41569=41590,41570
<41570=41588,41579,41577,41575,41573,41571
<41571=41572
<41573=41574
<41575=41576
<41577=41578
<41579=41580
<41580=41582,41581
<41582=41583
<41583=41585,41584
<41585=41587,41586
<41588=41589
<41590=41591
<41591=41593,41592
<41594=41595
<41595=41604,41596
<41596=41598,41597
<41598=41599
<41599=41601,41600
<41601=41603,41602
<41605=41607,41606
<41608=41609
<41609=41616,41610
<41610=41612,41611
<41612=41613
<41613=41615,41614
<41617=41618
<41618=41619
<41619=41624,41623,41620
<41620=41622,41621
<41625=41626
<41626=41630,41627
<41627=41628
<41628=41629
<41630=41631
<41631=41633,41632
<41633=41635,41634
<41636=41849,41637
<41637=41842,41835,41828,41821,41817,41806,41802,41791,41787,41776,41763,41754,41739,41730,41717,41708,41693,41684,41671,41662,41647,41638
<41638=41639
<41639=41643,41640
<41640=41641
<41641=41642
<41643=41644
<41644=41646,41645
<41647=41648
<41648=41656,41649
<41649=41654,41652,41650
<41650=41651
<41652=41653
<41654=41655
<41656=41657
<41657=41659,41658
<41659=41661,41660
<41662=41663
<41663=41667,41664
<41664=41665
<41665=41666
<41667=41668
<41668=41670,41669
<41671=41672
<41672=41683,41673
<41673=41677,41674
<41674=41675
<41675=41676
<41677=41678
<41678=41680,41679
<41680=41682,41681
<41684=41685
<41685=41689,41686
<41686=41687
<41687=41688
<41689=41690
<41690=41692,41691
<41693=41694
<41694=41702,41695
<41695=41700,41698,41696
<41696=41697
<41698=41699
<41700=41701
<41702=41703
<41703=41705,41704
<41705=41707,41706
<41708=41709
<41709=41713,41710
<41710=41711
<41711=41712
<41713=41714
<41714=41716,41715
<41717=41718
<41718=41729,41719
<41719=41723,41720
<41720=41721
<41721=41722
<41723=41724
<41724=41726,41725
<41726=41728,41727
<41730=41731
<41731=41735,41732
<41732=41733
<41733=41734
<41735=41736
<41736=41738,41737
<41739=41740
<41740=41748,41741
<41741=41746,41744,41742
<41742=41743
<41744=41745
<41746=41747
<41748=41749
<41749=41751,41750
<41751=41753,41752
<41754=41755
<41755=41759,41756
<41756=41757
<41757=41758
<41759=41760
<41760=41762,41761
<41763=41764
<41764=41775,41765
<41765=41769,41766
<41766=41767
<41767=41768
<41769=41770
<41770=41772,41771
<41772=41774,41773
<41776=41777
<41777=41784,41778
<41778=41782,41779
<41779=41780
<41780=41781
<41782=41783
<41784=41786,41785
<41787=41788
<41788=41790,41789
<41791=41792
<41792=41799,41793
<41793=41797,41794
<41794=41795
<41795=41796
<41797=41798
<41799=41801,41800
<41802=41803
<41803=41805,41804
<41806=41807
<41807=41814,41808
<41808=41812,41809
<41809=41810
<41810=41811
<41812=41813
<41814=41816,41815
<41817=41818
<41818=41820,41819
<41821=41822
<41822=41827,41826,41823
<41823=41825,41824
<41828=41829
<41829=41834,41833,41830
<41830=41832,41831
<41835=41836
<41836=41841,41840,41837
<41837=41839,41838
<41842=41843
<41843=41848,41847,41844
<41844=41846,41845
<41849=41850
<41851=41905,41901,41898,41852
<41852=41866,41853
<41853=41854
<41854=41860,41855
<41855=41858,41856
<41856=41857
<41858=41859
<41860=41861
<41861=41863,41862
<41863=41865,41864
<41866=41867
<41867=41889,41868
<41868=41879,41869
<41869=41878,41870
<41870=41872,41871
<41872=41873
<41873=41875,41874
<41875=41877,41876
<41879=41888,41880
<41880=41882,41881
<41882=41883
<41883=41885,41884
<41885=41887,41886
<41889=41891,41890
<41891=41893,41892
<41893=41895,41894
<41895=41897,41896
<41898=41900,41899
<41901=41902
<41902=41904,41903
<41905=41906
<41906=41907
<41907=41919,41918,41908
<41908=41917,41909
<41909=41911,41910
<41911=41913,41912
<41913=41914
<41914=41916,41915
<41920=41925,41921
<41921=41922
<41922=41924,41923
<41925=41926
<41926=41928,41927
<41929=41930
<41930=41944,41943,41931
<41931=41942,41932
<41932=41936,41933
<41933=41934
<41934=41935
<41936=41937
<41937=41939,41938
<41939=41941,41940
<41945=41946
<41946=41951,41950,41947
<41947=41949,41948
<41952=41953
<41953=41955,41954
<41955=41957,41956
<41957=41959,41958
<41960=41961
<41961=41965,41962
<41962=41963
<41963=41964
<41965=41966
<41967=41968
<41969=41986,41970
<41970=41971
<41971=41972
<41972=41985,41973
<41973=41984,41974
<41974=41978,41975
<41975=41976
<41976=41977
<41978=41979
<41979=41981,41980
<41981=41983,41982
<41986=41987
<41988=42090,41989
<41989=42079,42066,42048,41990
<41990=42044,41991
<41991=42028,42024,42005,41992
<41992=41993
<41993=41999,41994
<41994=41997,41995
<41995=41996
<41997=41998
<41999=42000
<42000=42002,42001
<42002=42004,42003
<42005=42020,42006
<42006=42011,42007
<42007=42008
<42008=42010,42009
<42011=42012
<42012=42016,42013
<42013=42014
<42014=42015
<42016=42017
<42017=42019,42018
<42020=42021
<42021=42023,42022
<42024=42025
<42025=42027,42026
<42028=42029
<42029=42043,42042,42030
<42030=42041,42031
<42031=42035,42032
<42032=42033
<42033=42034
<42035=42036
<42036=42038,42037
<42038=42040,42039
<42044=42045
<42045=42047,42046
<42048=42049
<42049=42065,42064,42050
<42050=42063,42051
<42051=42062,42052
<42052=42056,42053
<42053=42054
<42054=42055
<42056=42057
<42057=42059,42058
<42059=42061,42060
<42066=42067
<42067=42078,42068
<42068=42072,42069
<42069=42070
<42070=42071
<42072=42073
<42073=42075,42074
<42075=42077,42076
<42079=42080
<42080=42084,42081
<42081=42082
<42082=42083
<42084=42085
<42085=42087,42086
<42087=42089,42088
<42090=42091
<42091=42093,42092
<42094=42227,42212,42095
<42095=42096
<42096=42210,42097
<42097=42194,42178,42151,42147,42098
<42098=42128,42099
<42099=42107,42100
<42100=42103,42101
<42101=42102
<42103=42104
<42104=42106,42105
<42107=42121,42108
<42108=42109
<42109=42120,42110
<42110=42114,42111
<42111=42112
<42112=42113
<42114=42115
<42115=42117,42116
<42117=42119,42118
<42121=42122
<42122=42124,42123
<42124=42125
<42125=42127,42126
<42128=42129
<42129=42143,42130
<42130=42141,42139,42137,42135,42131
<42131=42132
<42132=42134,42133
<42135=42136
<42137=42138
<42139=42140
<42141=42142
<42143=42144
<42144=42146,42145
<42147=42148
<42148=42150,42149
<42151=42152
<42152=42177,42176,42153
<42153=42175,42154
<42154=42166,42156,42155
<42156=42158,42157
<42158=42159
<42159=42161,42160
<42161=42163,42162
<42163=42165,42164
<42166=42167
<42167=42169,42168
<42169=42171,42170
<42171=42172
<42172=42174,42173
<42178=42179
<42179=42193,42192,42180
<42180=42191,42181
<42181=42183,42182
<42183=42184
<42184=42186,42185
<42186=42188,42187
<42188=42190,42189
<42194=42195
<42195=42209,42208,42196
<42196=42207,42197
<42197=42199,42198
<42199=42200
<42200=42202,42201
<42202=42204,42203
<42204=42206,42205
<42210=42211
<42212=42213
<42213=42226,42214
<42214=42220,42215
<42215=42216
<42216=42217
<42217=42219,42218
<42220=42221
<42221=42223,42222
<42223=42225,42224
<42227=42228
<42229=42230
<42230=42240,42239,42231
<42231=42238,42232
<42232=42236,42233
<42233=42234
<42234=42235
<42236=42237
<42241=42242
<42242=42247,42246,42243
<42243=42245,42244
<42248=42249
<42249=42251,42250
<42252=42253
<42253=42258,42257,42254
<42254=42256,42255
<42259=42260
<42260=42262,42261
<42263=42264
<42264=42266,42265
<42267=42269,42268
<42269=42270
<42270=42274,42271
<42271=42273,42272
<42274=42276,42275
<42276=42278,42277
<42278=42279
<42279=42281,42280
<42282=42283
<42283=42285,42284
<42285=42286
<42287=42288
<42288=42292,42289
<42289=42290
<42290=42291
<42292=42293
<42294=42296,42295
<42296=42297
<42297=42299,42298
<42300=42302,42301
<42302=42303
<42303=42305,42304
<42409=42418,42417,42410
<42410=42414,42411
<42411=42413,42412
<42414=42416,42415
<42418=42419
<42419=42481,42469,42420
<42420=42421
<42421=42458,42449,42429,42422
<42422=42423
<42423=42425,42424
<42425=42426
<42426=42428,42427
<42429=42430
<42430=42443,42431
<42431=42434,42432
<42432=42433
<42434=42435
<42435=42441,42436
<42436=42439,42437
<42437=42438
<42439=42440
<42441=42442
<42443=42444
<42444=42446,42445
<42446=42448,42447
<42449=42450
<42450=42452,42451
<42452=42453
<42453=42455,42454
<42455=42457,42456
<42458=42459
<42459=42463,42460
<42460=42461
<42461=42462
<42463=42464
<42464=42466,42465
<42466=42468,42467
<42469=42470
<42470=42471
<42471=42475,42472
<42472=42473
<42473=42474
<42475=42476
<42476=42478,42477
<42478=42480,42479
<42481=42482
<42482=42484,42483
<42497=42500,42499,42498
<42500=42503,42501
<42501=42502
<42503=42543,42530,42527,42504
<42504=42505
<42505=42515,42506
<42506=42507
<42507=42508
<42508=42510,42509
<42510=42512,42511
<42512=42514,42513
<42515=42516
<42516=42518,42517
<42518=42520,42519
<42520=42522,42521
<42522=42524,42523
<42524=42526,42525
<42527=42529,42528
<42530=42531
<42531=42542,42532
<42532=42534,42533
<42534=42535
<42535=42537,42536
<42537=42539,42538
<42539=42541,42540
<42543=42544
<42544=42545
<42545=42550,42549,42546
<42546=42548,42547
<42572=42575,42574,42573
<42575=42576
<42576=42600,42577
<42577=42578
<42578=42587,42579
<42579=42580
<42580=42581
<42581=42583,42582
<42583=42584
<42584=42586,42585
<42587=42588
<42588=42590,42589
<42590=42594,42591
<42591=42592
<42592=42593
<42594=42595
<42595=42597,42596
<42597=42599,42598
<42600=42601
<42601=42603,42602
<42615=42618,42617,42616
<42618=42619
<42619=42764,42620
<42620=42760,42665,42628,42621
<42621=42622
<42622=42624,42623
<42624=42625
<42625=42627,42626
<42628=42657,42648,42645,42629
<42629=42630
<42630=42631
<42631=42637,42632
<42632=42635,42633
<42633=42634
<42635=42636
<42637=42638
<42638=42640,42639
<42640=42642,42641
<42642=42644,42643
<42645=42647,42646
<42648=42649
<42649=42656,42650
<42650=42652,42651
<42652=42653
<42653=42655,42654
<42657=42658
<42658=42659
<42659=42664,42663,42660
<42660=42662,42661
<42665=42758,42666
<42666=42745,42732,42719,42706,42693,42680,42667
<42667=42668
<42668=42674,42669
<42669=42672,42670
<42670=42671
<42672=42673
<42674=42675
<42675=42677,42676
<42677=42679,42678
<42680=42681
<42681=42687,42682
<42682=42685,42683
<42683=42684
<42685=42686
<42687=42688
<42688=42690,42689
<42690=42692,42691
<42693=42694
<42694=42700,42695
<42695=42698,42696
<42696=42697
<42698=42699
<42700=42701
<42701=42703,42702
<42703=42705,42704
<42706=42707
<42707=42713,42708
<42708=42711,42709
<42709=42710
<42711=42712
<42713=42714
<42714=42716,42715
<42716=42718,42717
<42719=42720
<42720=42726,42721
<42721=42724,42722
<42722=42723
<42724=42725
<42726=42727
<42727=42729,42728
<42729=42731,42730
<42732=42733
<42733=42739,42734
<42734=42737,42735
<42735=42736
<42737=42738
<42739=42740
<42740=42742,42741
<42742=42744,42743
<42745=42746
<42746=42752,42747
<42747=42750,42748
<42748=42749
<42750=42751
<42752=42753
<42753=42755,42754
<42755=42757,42756
<42758=42759
<42760=42761
<42761=42763,42762
<42764=42765
<42765=42767,42766
<42803=42806,42805,42804
<42806=42807
<42807=42808
<42808=42810,42809
<42816=42846,42845,42817
<42817=42842,42839,42836,42833,42830,42827,42824,42821,42818
<42818=42820,42819
<42821=42823,42822
<42824=42826,42825
<42827=42829,42828
<42830=42832,42831
<42833=42835,42834
<42836=42838,42837
<42839=42841,42840
<42842=42844,42843
<42846=43870,43866,43861,43854,43850,43708,43704,43680,43668,43356,43343,43330,43317,43308,43295,43234,43215,43206,42972,42935,42931,42922,42909,42892,42875,42858,42847
<42847=42848
<42848=42852,42849
<42849=42850
<42850=42851
<42852=42853
<42853=42855,42854
<42855=42857,42856
<42858=42859
<42859=42865,42860
<42860=42863,42861
<42861=42862
<42863=42864
<42865=42866
<42866=42868,42867
<42868=42870,42869
<42870=42872,42871
<42872=42874,42873
<42875=42876
<42876=42882,42877
<42877=42880,42878
<42878=42879
<42880=42881
<42882=42883
<42883=42885,42884
<42885=42887,42886
<42887=42889,42888
<42889=42891,42890
<42892=42893
<42893=42899,42894
<42894=42897,42895
<42895=42896
<42897=42898
<42899=42900
<42900=42902,42901
<42902=42904,42903
<42904=42906,42905
<42906=42908,42907
<42909=42910
<42910=42912,42911
<42912=42913
<42913=42915,42914
<42915=42917,42916
<42917=42919,42918
<42919=42921,42920
<42922=42923
<42923=42925,42924
<42925=42926
<42926=42928,42927
<42928=42930,42929
<42931=42932
<42932=42934,42933
<42935=42964,42955,42952,42936
<42936=42937
<42937=42938
<42938=42944,42939
<42939=42942,42940
<42940=42941
<42942=42943
<42944=42945
<42945=42947,42946
<42947=42949,42948
<42949=42951,42950
<42952=42954,42953
<42955=42956
<42956=42963,42957
<42957=42959,42958
<42959=42960
<42960=42962,42961
<42964=42965
<42965=42966
<42966=42971,42970,42967
<42967=42969,42968
<42972=43194,43103,42973
<42973=42974
<42974=43095,43087,43078,43048,43018,42988,42975
<42975=42976
<42976=42982,42977
<42977=42980,42978
<42978=42979
<42980=42981
<42982=42983
<42983=42985,42984
<42985=42987,42986
<42988=43016,43003,42989
<42989=42990
<42990=42991
<42991=42997,42992
<42992=42995,42993
<42993=42994
<42995=42996
<42997=42998
<42998=43000,42999
<43000=43002,43001
<43003=43004
<43004=43010,43005
<43005=43008,43006
<43006=43007
<43008=43009
<43010=43011
<43011=43013,43012
<43013=43015,43014
<43016=43017
<43018=43046,43033,43019
<43019=43020
<43020=43021
<43021=43027,43022
<43022=43025,43023
<43023=43024
<43025=43026
<43027=43028
<43028=43030,43029
<43030=43032,43031
<43033=43034
<43034=43040,43035
<43035=43038,43036
<43036=43037
<43038=43039
<43040=43041
<43041=43043,43042
<43043=43045,43044
<43046=43047
<43048=43076,43063,43049
<43049=43050
<43050=43051
<43051=43057,43052
<43052=43055,43053
<43053=43054
<43055=43056
<43057=43058
<43058=43060,43059
<43060=43062,43061
<43063=43064
<43064=43070,43065
<43065=43068,43066
<43066=43067
<43068=43069
<43070=43071
<43071=43073,43072
<43073=43075,43074
<43076=43077
<43078=43079
<43079=43083,43080
<43080=43081
<43081=43082
<43083=43084
<43084=43086,43085
<43087=43088
<43088=43090,43089
<43090=43092,43091
<43092=43094,43093
<43095=43096
<43096=43098,43097
<43098=43100,43099
<43100=43102,43101
<43103=43181,43168,43155,43104
<43104=43141,43132,43105
<43105=43106
<43106=43124,43116,43107
<43107=43108
<43108=43112,43109
<43109=43110
<43110=43111
<43112=43113
<43113=43115,43114
<43116=43117
<43117=43119,43118
<43119=43121,43120
<43121=43123,43122
<43124=43125
<43125=43127,43126
<43127=43129,43128
<43129=43131,43130
<43132=43133
<43133=43134
<43134=43136,43135
<43136=43138,43137
<43138=43140,43139
<43141=43142
<43142=43149,43143
<43143=43145,43144
<43145=43146
<43146=43148,43147
<43149=43151,43150
<43151=43152
<43152=43154,43153
<43155=43156
<43156=43162,43157
<43157=43160,43158
<43158=43159
<43160=43161
<43162=43163
<43163=43165,43164
<43165=43167,43166
<43168=43169
<43169=43175,43170
<43170=43173,43171
<43171=43172
<43173=43174
<43175=43176
<43176=43178,43177
<43178=43180,43179
<43181=43182
<43182=43188,43183
<43183=43186,43184
<43184=43185
<43186=43187
<43188=43189
<43189=43191,43190
<43191=43193,43192
<43194=43195
<43195=43203,43196
<43196=43200,43197
<43197=43199,43198
<43200=43202,43201
<43203=43205,43204
<43206=43207
<43207=43211,43208
<43208=43209
<43209=43210
<43211=43212
<43212=43214,43213
<43215=43216
<43216=43229,43217
<43217=43228,43218
<43218=43220,43219
<43220=43222,43221
<43222=43224,43223
<43224=43225
<43225=43227,43226
<43229=43231,43230
<43231=43233,43232
<43234=43286,43250,43235
<43235=43236
<43236=43237
<43237=43238
<43238=43244,43239
<43239=43242,43240
<43240=43241
<43242=43243
<43244=43245
<43245=43247,43246
<43247=43249,43248
<43250=43277,43264,43251
<43251=43252
<43252=43261,43253
<43253=43259,43254
<43254=43257,43255
<43255=43256
<43257=43258
<43259=43260
<43261=43263,43262
<43264=43265
<43265=43271,43266
<43266=43269,43267
<43267=43268
<43269=43270
<43271=43272
<43272=43274,43273
<43274=43276,43275
<43277=43278
<43278=43282,43279
<43279=43280
<43280=43281
<43282=43283
<43283=43285,43284
<43286=43287
<43287=43294,43288
<43288=43290,43289
<43290=43291
<43291=43293,43292
<43295=43296
<43296=43302,43297
<43297=43300,43298
<43298=43299
<43300=43301
<43302=43303
<43303=43305,43304
<43305=43307,43306
<43308=43309
<43309=43313,43310
<43310=43311
<43311=43312
<43313=43314
<43314=43316,43315
<43317=43318
<43318=43327,43319
<43319=43325,43320
<43320=43323,43321
<43321=43322
<43323=43324
<43325=43326
<43327=43329,43328
<43330=43331
<43331=43337,43332
<43332=43335,43333
<43333=43334
<43335=43336
<43337=43338
<43338=43340,43339
<43340=43342,43341
<43343=43350,43344
<43344=43349,43348,43345
<43345=43347,43346
<43350=43355,43354,43351
<43351=43353,43352
<43356=43664,43357
<43357=43648,43641,43621,43616,43596,43587,43581,43568,43562,43551,43542,43531,43358
<43358=43523,43512,43509,43359
<43359=43498,43487,43478,43450,43444,43431,43425,43391,43380,43371,43360
<43360=43361
<43361=43370,43362
<43362=43368,43363
<43363=43366,43364
<43364=43365
<43366=43367
<43368=43369
<43371=43372
<43372=43376,43373
<43373=43374
<43374=43375
<43376=43377
<43377=43379,43378
<43380=43381
<43381=43389,43382
<43382=43387,43383
<43383=43384
<43384=43386,43385
<43387=43388
<43389=43390
<43391=43421,43406,43392
<43392=43393
<43393=43394
<43394=43403,43395
<43395=43401,43396
<43396=43399,43397
<43397=43398
<43399=43400
<43401=43402
<43403=43405,43404
<43406=43407
<43407=43418,43408
<43408=43416,43409
<43409=43414,43410
<43410=43411
<43411=43413,43412
<43414=43415
<43416=43417
<43418=43420,43419
<43421=43422
<43422=43424,43423
<43425=43426
<43426=43428,43427
<43428=43430,43429
<43431=43432
<43432=43441,43433
<43433=43439,43434
<43434=43437,43435
<43435=43436
<43437=43438
<43439=43440
<43441=43443,43442
<43444=43445
<43445=43447,43446
<43447=43449,43448
<43450=43451
<43451=43475,43452
<43452=43465,43453
<43453=43455,43454
<43455=43463,43456
<43456=43461,43459,43457
<43457=43458
<43459=43460
<43461=43462
<43463=43464
<43465=43467,43466
<43467=43471,43468
<43468=43469
<43469=43470
<43471=43472
<43472=43474,43473
<43475=43477,43476
<43478=43479
<43479=43486,43485,43480
<43480=43484,43481
<43481=43483,43482
<43487=43488
<43488=43496,43489
<43489=43494,43492,43490
<43490=43491
<43492=43493
<43494=43495
<43496=43497
<43498=43499
<43499=43508,43507,43500
<43500=43506,43501
<43501=43503,43502
<43503=43505,43504
<43509=43511,43510
<43512=43513
<43513=43522,43514
<43514=43516,43515
<43516=43517
<43517=43519,43518
<43519=43521,43520
<43523=43524
<43524=43525
<43525=43530,43529,43526
<43526=43528,43527
<43531=43532
<43532=43541,43533
<43533=43539,43534
<43534=43537,43535
<43535=43536
<43537=43538
<43539=43540
<43542=43543
<43543=43547,43544
<43544=43545
<43545=43546
<43547=43548
<43548=43550,43549
<43551=43552
<43552=43560,43553
<43553=43558,43554
<43554=43555
<43555=43557,43556
<43558=43559
<43560=43561
<43562=43563
<43563=43565,43564
<43565=43567,43566
<43568=43569
<43569=43578,43570
<43570=43576,43571
<43571=43574,43572
<43572=43573
<43574=43575
<43576=43577
<43578=43580,43579
<43581=43582
<43582=43584,43583
<43584=43586,43585
<43587=43588
<43588=43595,43594,43589
<43589=43593,43590
<43590=43592,43591
<43596=43597
<43597=43614,43598
<43598=43612,43610,43599
<43599=43600
<43600=43604,43601
<43601=43602
<43602=43603
<43604=43605
<43605=43607,43606
<43607=43609,43608
<43610=43611
<43612=43613
<43614=43615
<43616=43617
<43617=43620,43619,43618
<43621=43622
<43622=43640,43639,43623
<43623=43638,43624
<43624=43635,43625
<43625=43633,43626
<43626=43629,43627
<43627=43628
<43629=43630
<43630=43632,43631
<43633=43634
<43635=43637,43636
<43641=43642
<43642=43644,43643
<43644=43645
<43645=43647,43646
<43648=43649
<43649=43663,43662,43650
<43650=43661,43651
<43651=43655,43652
<43652=43653
<43653=43654
<43655=43656
<43656=43658,43657
<43658=43660,43659
<43664=43665
<43665=43667,43666
<43668=43669
<43669=43678,43670
<43670=43671
<43671=43672
<43672=43674,43673
<43674=43675
<43675=43677,43676
<43678=43679
<43680=43681
<43681=43703,43682
<43682=43702,43683
<43683=43701,43684
<43684=43700,43685
<43685=43699,43686
<43686=43698,43687
<43687=43697,43688
<43688=43696,43689
<43689=43695,43690
<43690=43694,43691
<43691=43693,43692
<43704=43705
<43705=43707,43706
<43708=43846,43709
<43709=43719,43710
<43710=43711
<43711=43717,43712
<43712=43715,43713
<43713=43714
<43715=43716
<43717=43718
<43719=43824,43784,43720
<43720=43721
<43721=43762,43722
<43722=43755,43748,43723
<43723=43724
<43724=43744,43725
<43725=43735,43728,43726
<43726=43727
<43728=43729
<43729=43731,43730
<43731=43732
<43732=43734,43733
<43735=43736
<43736=43740,43737
<43737=43738
<43738=43739
<43740=43741
<43741=43743,43742
<43744=43745
<43745=43747,43746
<43748=43749
<43749=43754,43753,43750
<43750=43752,43751
<43755=43756
<43756=43761,43760,43757
<43757=43759,43758
<43762=43763
<43763=43774,43764
<43764=43766,43765
<43766=43770,43767
<43767=43768
<43768=43769
<43770=43771
<43771=43773,43772
<43774=43776,43775
<43776=43780,43777
<43777=43778
<43778=43779
<43780=43781
<43781=43783,43782
<43784=43817,43810,43785
<43785=43786
<43786=43806,43787
<43787=43797,43790,43788
<43788=43789
<43790=43791
<43791=43793,43792
<43793=43794
<43794=43796,43795
<43797=43798
<43798=43802,43799
<43799=43800
<43800=43801
<43802=43803
<43803=43805,43804
<43806=43807
<43807=43809,43808
<43810=43811
<43811=43816,43815,43812
<43812=43814,43813
<43817=43818
<43818=43823,43822,43819
<43819=43821,43820
<43824=43825
<43825=43836,43826
<43826=43828,43827
<43828=43832,43829
<43829=43830
<43830=43831
<43832=43833
<43833=43835,43834
<43836=43838,43837
<43838=43842,43839
<43839=43840
<43840=43841
<43842=43843
<43843=43845,43844
<43846=43847
<43847=43849,43848
<43850=43851
<43851=43853,43852
<43854=43855
<43855=43860,43859,43856
<43856=43858,43857
<43861=43862
<43862=43864,43863
<43864=43865
<43866=43867
<43867=43869,43868
<43870=43882,43871
<43871=43872
<43872=43876,43873
<43873=43874
<43874=43875
<43876=43877
<43877=43879,43878
<43879=43881,43880
<43882=43883
<43883=43890,43884
<43884=43886,43885
<43886=43887
<43887=43889,43888
<43995=43998,43997,43996
<43998=43999
<43999=44000
<44000=44004,44001
<44001=44002
<44002=44003
<44004=44005
<44009=44018,44017,44010
<44010=44014,44011
<44011=44013,44012
<44014=44016,44015
<44018=44091,44026,44019
<44019=44020
<44020=44022,44021
<44022=44023
<44023=44025,44024
<44026=44084,44027
<44027=44028
<44028=44075,44029
<44029=44071,44062,44053,44036,44030
<44030=44031
<44031=44035,44032
<44032=44034,44033
<44036=44037
<44037=44052,44038
<44038=44042,44039
<44039=44040
<44040=44041
<44042=44043
<44043=44045,44044
<44045=44047,44046
<44047=44049,44048
<44049=44051,44050
<44053=44054
<44054=44061,44055
<44055=44059,44056
<44056=44057
<44057=44058
<44059=44060
<44062=44063
<44063=44069,44064
<44064=44067,44065
<44065=44066
<44067=44068
<44069=44070
<44071=44072
<44072=44074,44073
<44075=44076
<44076=44083,44077
<44077=44079,44078
<44079=44080
<44080=44082,44081
<44084=44085
<44085=44087,44086
<44087=44088
<44088=44090,44089
<44091=44092
<44092=44100,44099,44093
<44093=44095,44094
<44095=44096
<44096=44098,44097
<44117=44120,44119,44118
<44120=44121
<44121=44216,44209,44122
<44122=44123
<44123=44202,44201,44124
<44124=44125
<44125=44126
<44126=44194,44184,44127
<44127=44128
<44128=44180,44170,44129
<44129=44130
<44130=44166,44156,44131
<44131=44132
<44132=44152,44142,44133
<44133=44134
<44134=44135
<44135=44136
<44136=44140,44137
<44137=44138
<44138=44139
<44140=44141
<44142=44143
<44143=44144
<44144=44150,44145
<44145=44148,44146
<44146=44147
<44148=44149
<44150=44151
<44152=44153
<44153=44155,44154
<44156=44157
<44157=44158
<44158=44164,44159
<44159=44162,44160
<44160=44161
<44162=44163
<44164=44165
<44166=44167
<44167=44169,44168
<44170=44171
<44171=44172
<44172=44178,44173
<44173=44176,44174
<44174=44175
<44176=44177
<44178=44179
<44180=44181
<44181=44183,44182
<44184=44185
<44185=44186
<44186=44192,44187
<44187=44190,44188
<44188=44189
<44190=44191
<44192=44193
<44194=44195
<44195=44197,44196
<44197=44198
<44198=44200,44199
<44202=44203
<44203=44205,44204
<44205=44206
<44206=44208,44207
<44209=44210
<44210=44214,44211
<44211=44212
<44212=44213
<44214=44215
<44216=44217
<44234=44243,44242,44235
<44235=44239,44236
<44236=44238,44237
<44239=44241,44240
<44243=45367,45361,45352,45341,45332,45324,44248,44244
<44244=44245
<44245=44247,44246
<44248=45322,44516,44249
<44249=44250
<44250=44504,44495,44463,44431,44399,44367,44335,44303,44273,44266,44255,44251
<44251=44252
<44252=44254,44253
<44255=44256
<44256=44260,44257
<44257=44258
<44258=44259
<44260=44261
<44261=44263,44262
<44263=44265,44264
<44266=44267
<44267=44269,44268
<44269=44270
<44270=44272,44271
<44273=44295,44291,44288,44274
<44274=44275
<44275=44276
<44276=44278,44277
<44278=44280,44279
<44280=44284,44281
<44281=44282
<44282=44283
<44284=44285
<44285=44287,44286
<44288=44290,44289
<44291=44292
<44292=44294,44293
<44295=44296
<44296=44297
<44297=44302,44301,44298
<44298=44300,44299
<44303=44333,44304
<44304=44327,44318,44309,44305
<44305=44306
<44306=44308,44307
<44309=44310
<44310=44314,44311
<44311=44312
<44312=44313
<44314=44315
<44315=44317,44316
<44318=44319
<44319=44323,44320
<44320=44321
<44321=44322
<44323=44324
<44324=44326,44325
<44327=44328
<44328=44330,44329
<44330=44332,44331
<44333=44334
<44335=44365,44336
<44336=44359,44350,44341,44337
<44337=44338
<44338=44340,44339
<44341=44342
<44342=44346,44343
<44343=44344
<44344=44345
<44346=44347
<44347=44349,44348
<44350=44351
<44351=44355,44352
<44352=44353
<44353=44354
<44355=44356
<44356=44358,44357
<44359=44360
<44360=44362,44361
<44362=44364,44363
<44365=44366
<44367=44397,44368
<44368=44391,44382,44373,44369
<44369=44370
<44370=44372,44371
<44373=44374
<44374=44378,44375
<44375=44376
<44376=44377
<44378=44379
<44379=44381,44380
<44382=44383
<44383=44387,44384
<44384=44385
<44385=44386
<44387=44388
<44388=44390,44389
<44391=44392
<44392=44394,44393
<44394=44396,44395
<44397=44398
<44399=44429,44400
<44400=44423,44414,44405,44401
<44401=44402
<44402=44404,44403
<44405=44406
<44406=44410,44407
<44407=44408
<44408=44409
<44410=44411
<44411=44413,44412
<44414=44415
<44415=44419,44416
<44416=44417
<44417=44418
<44419=44420
<44420=44422,44421
<44423=44424
<44424=44426,44425
<44426=44428,44427
<44429=44430
<44431=44461,44432
<44432=44455,44446,44437,44433
<44433=44434
<44434=44436,44435
<44437=44438
<44438=44442,44439
<44439=44440
<44440=44441
<44442=44443
<44443=44445,44444
<44446=44447
<44447=44451,44448
<44448=44449
<44449=44450
<44451=44452
<44452=44454,44453
<44455=44456
<44456=44458,44457
<44458=44460,44459
<44461=44462
<44463=44493,44464
<44464=44487,44478,44469,44465
<44465=44466
<44466=44468,44467
<44469=44470
<44470=44474,44471
<44471=44472
<44472=44473
<44474=44475
<44475=44477,44476
<44478=44479
<44479=44483,44480
<44480=44481
<44481=44482
<44483=44484
<44484=44486,44485
<44487=44488
<44488=44490,44489
<44490=44492,44491
<44493=44494
<44495=44496
<44496=44498,44497
<44498=44499
<44499=44501,44500
<44501=44503,44502
<44504=44512,44505
<44505=44506
<44506=44510,44507
<44507=44508
<44508=44509
<44510=44511
<44512=44513
<44513=44515,44514
<44516=45318,45309,45302,45295,45291,45279,45270,45239,45208,45199,45190,45181,45172,45153,45140,45139,45138,45137,45135,45126,45117,45104,45098,45092,45079,45073,45064,45063,45062,45061,45059,45053,45047,45038,45032,45019,45013,45004,44996,44987,44517,44528,44535,44565,44574,44580,44593,44611,44617,44632,44645,44654,44663,44665,44666,44667,44668,44677,44683,44696,44714,44722,44728,44743,44756,44765,44774,44776,44777,44778,44779,44788,44794,44807,44825,44833,44839,44852,44865,44874,44883,44885,44886,44887,44888,44897,44953,44966,44972,44978
<44517=44518
<44518=44522,44519
<44519=44520
<44520=44521
<44522=44523
<44523=44525,44524
<44525=44527,44526
<44528=44529
<44529=44531,44530
<44531=44532
<44532=44534,44533
<44535=44557,44553,44550,44536
<44536=44537
<44537=44538
<44538=44540,44539
<44540=44542,44541
<44542=44546,44543
<44543=44544
<44544=44545
<44546=44547
<44547=44549,44548
<44550=44552,44551
<44553=44554
<44554=44556,44555
<44557=44558
<44558=44559
<44559=44564,44563,44560
<44560=44562,44561
<44565=44566
<44566=44572,44567
<44567=44570,44568
<44568=44569
<44570=44571
<44572=44573
<44574=44575
<44575=44577,44576
<44577=44579,44578
<44580=44581
<44581=44590,44582
<44582=44588,44583
<44583=44586,44584
<44584=44585
<44586=44587
<44588=44589
<44590=44592,44591
<44593=44594
<44594=44605,44595
<44595=44596
<44596=44597
<44597=44603,44598
<44598=44601,44599
<44599=44600
<44601=44602
<44603=44604
<44605=44606
<44606=44608,44607
<44608=44610,44609
<44611=44612
<44612=44614,44613
<44614=44616,44615
<44617=44618
<44618=44629,44619
<44619=44627,44620
<44620=44625,44621
<44621=44622
<44622=44624,44623
<44625=44626
<44627=44628
<44629=44631,44630
<44632=44633
<44633=44641,44634
<44634=44639,44637,44635
<44635=44636
<44637=44638
<44639=44640
<44641=44642
<44642=44644,44643
<44645=44646
<44646=44650,44647
<44647=44648
<44648=44649
<44650=44651
<44651=44653,44652
<44654=44655
<44655=44659,44656
<44656=44657
<44657=44658
<44659=44660
<44660=44662,44661
<44663=44664
<44668=44669
<44669=44675,44670
<44670=44673,44671
<44671=44672
<44673=44674
<44675=44676
<44677=44678
<44678=44680,44679
<44680=44682,44681
<44683=44684
<44684=44693,44685
<44685=44691,44686
<44686=44689,44687
<44687=44688
<44689=44690
<44691=44692
<44693=44695,44694
<44696=44697
<44697=44708,44698
<44698=44699
<44699=44700
<44700=44706,44701
<44701=44704,44702
<44702=44703
<44704=44705
<44706=44707
<44708=44709
<44709=44711,44710
<44711=44713,44712
<44714=44715
<44715=44717,44716
<44717=44719,44718
<44719=44721,44720
<44722=44723
<44723=44725,44724
<44725=44727,44726
<44728=44729
<44729=44740,44730
<44730=44738,44731
<44731=44736,44732
<44732=44733
<44733=44735,44734
<44736=44737
<44738=44739
<44740=44742,44741
<44743=44744
<44744=44752,44745
<44745=44750,44748,44746
<44746=44747
<44748=44749
<44750=44751
<44752=44753
<44753=44755,44754
<44756=44757
<44757=44761,44758
<44758=44759
<44759=44760
<44761=44762
<44762=44764,44763
<44765=44766
<44766=44770,44767
<44767=44768
<44768=44769
<44770=44771
<44771=44773,44772
<44774=44775
<44779=44780
<44780=44786,44781
<44781=44784,44782
<44782=44783
<44784=44785
<44786=44787
<44788=44789
<44789=44791,44790
<44791=44793,44792
<44794=44795
<44795=44804,44796
<44796=44802,44797
<44797=44800,44798
<44798=44799
<44800=44801
<44802=44803
<44804=44806,44805
<44807=44808
<44808=44819,44809
<44809=44810
<44810=44811
<44811=44817,44812
<44812=44815,44813
<44813=44814
<44815=44816
<44817=44818
<44819=44820
<44820=44822,44821
<44822=44824,44823
<44825=44826
<44826=44828,44827
<44828=44830,44829
<44830=44832,44831
<44833=44834
<44834=44836,44835
<44836=44838,44837
<44839=44840
<44840=44849,44841
<44841=44847,44842
<44842=44845,44843
<44843=44844
<44845=44846
<44847=44848
<44849=44851,44850
<44852=44853
<44853=44861,44854
<44854=44859,44857,44855
<44855=44856
<44857=44858
<44859=44860
<44861=44862
<44862=44864,44863
<44865=44866
<44866=44870,44867
<44867=44868
<44868=44869
<44870=44871
<44871=44873,44872
<44874=44875
<44875=44879,44876
<44876=44877
<44877=44878
<44879=44880
<44880=44882,44881
<44883=44884
<44888=44889
<44889=44895,44890
<44890=44893,44891
<44891=44892
<44893=44894
<44895=44896
<44897=44944,44898
<44898=44930,44899
<44899=44900
<44900=44924,44901
<44901=44906,44902
<44902=44903
<44903=44905,44904
<44906=44907
<44907=44922,44908
<44908=44920,44909
<44909=44910
<44910=44912,44911
<44912=44919,44913
<44913=44915,44914
<44915=44916
<44916=44918,44917
<44920=44921
<44922=44923
<44924=44925
<44925=44927,44926
<44927=44929,44928
<44930=44931
<44931=44943,44942,44932
<44932=44941,44933
<44933=44937,44934
<44934=44935
<44935=44936
<44937=44938
<44938=44940,44939
<44944=44945
<44945=44952,44946
<44946=44948,44947
<44948=44949
<44949=44951,44950
<44953=44954
<44954=44963,44955
<44955=44961,44956
<44956=44959,44957
<44957=44958
<44959=44960
<44961=44962
<44963=44965,44964
<44966=44967
<44967=44969,44968
<44969=44971,44970
<44972=44973
<44973=44975,44974
<44975=44977,44976
<44978=44979
<44979=44983,44980
<44980=44981
<44981=44982
<44983=44984
<44984=44986,44985
<44987=44988
<44988=44992,44989
<44989=44990
<44990=44991
<44992=44993
<44993=44995,44994
<44996=44997
<44997=45003,44998
<44998=45002,44999
<44999=45001,45000
<45004=45005
<45005=45011,45006
<45006=45009,45007
<45007=45008
<45009=45010
<45011=45012
<45013=45014
<45014=45016,45015
<45016=45018,45017
<45019=45020
<45020=45029,45021
<45021=45027,45022
<45022=45025,45023
<45023=45024
<45025=45026
<45027=45028
<45029=45031,45030
<45032=45033
<45033=45035,45034
<45035=45037,45036
<45038=45039
<45039=45043,45040
<45040=45041
<45041=45042
<45043=45044
<45044=45046,45045
<45047=45048
<45048=45050,45049
<45050=45052,45051
<45053=45054
<45054=45056,45055
<45056=45058,45057
<45059=45060
<45064=45065
<45065=45071,45066
<45066=45069,45067
<45067=45068
<45069=45070
<45071=45072
<45073=45074
<45074=45076,45075
<45076=45078,45077
<45079=45080
<45080=45089,45081
<45081=45087,45082
<45082=45085,45083
<45083=45084
<45085=45086
<45087=45088
<45089=45091,45090
<45092=45093
<45093=45095,45094
<45095=45097,45096
<45098=45099
<45099=45101,45100
<45101=45103,45102
<45104=45105
<45105=45114,45106
<45106=45112,45107
<45107=45110,45108
<45108=45109
<45110=45111
<45112=45113
<45114=45116,45115
<45117=45118
<45118=45122,45119
<45119=45120
<45120=45121
<45122=45123
<45123=45125,45124
<45126=45127
<45127=45131,45128
<45128=45129
<45129=45130
<45131=45132
<45132=45134,45133
<45135=45136
<45140=45141
<45141=45145,45142
<45142=45143
<45143=45144
<45145=45146
<45146=45148,45147
<45148=45150,45149
<45150=45152,45151
<45153=45154
<45154=45171,45155
<45155=45170,45156
<45156=45158,45157
<45158=45162,45159
<45159=45160
<45160=45161
<45162=45163
<45163=45165,45164
<45165=45167,45166
<45167=45169,45168
<45172=45173
<45173=45179,45174
<45174=45177,45175
<45175=45176
<45177=45178
<45179=45180
<45181=45182
<45182=45189,45183
<45183=45187,45184
<45184=45185
<45185=45186
<45187=45188
<45190=45191
<45191=45197,45192
<45192=45195,45193
<45193=45194
<45195=45196
<45197=45198
<45199=45200
<45200=45207,45201
<45201=45205,45202
<45202=45203
<45203=45204
<45205=45206
<45208=45228,45209
<45209=45219,45210
<45210=45211
<45211=45217,45212
<45212=45215,45213
<45213=45214
<45215=45216
<45217=45218
<45219=45220
<45220=45227,45221
<45221=45225,45222
<45222=45223
<45223=45224
<45225=45226
<45228=45229
<45229=45233,45230
<45230=45231
<45231=45232
<45233=45234
<45234=45236,45235
<45236=45238,45237
<45239=45259,45240
<45240=45250,45241
<45241=45242
<45242=45248,45243
<45243=45246,45244
<45244=45245
<45246=45247
<45248=45249
<45250=45251
<45251=45258,45252
<45252=45256,45253
<45253=45254
<45254=45255
<45256=45257
<45259=45260
<45260=45264,45261
<45261=45262
<45262=45263
<45264=45265
<45265=45267,45266
<45267=45269,45268
<45270=45271
<45271=45277,45272
<45272=45275,45273
<45273=45274
<45275=45276
<45277=45278
<45279=45280
<45280=45290,45289,45281
<45281=45288,45282
<45282=45286,45283
<45283=45284
<45284=45285
<45286=45287
<45291=45292
<45292=45294,45293
<45295=45296
<45296=45300,45297
<45297=45298
<45298=45299
<45300=45301
<45302=45303
<45303=45308,45304
<45304=45306,45305
<45306=45307
<45309=45310
<45310=45312,45311
<45312=45313
<45313=45315,45314
<45315=45317,45316
<45318=45319
<45319=45321,45320
<45322=45323
<45324=45326,45325
<45326=45327
<45327=45329,45328
<45329=45331,45330
<45332=45334,45333
<45334=45335
<45335=45337,45336
<45337=45338
<45338=45340,45339
<45341=45343,45342
<45343=45344
<45344=45346,45345
<45346=45347
<45347=45349,45348
<45349=45351,45350
<45352=45354,45353
<45354=45355
<45355=45357,45356
<45357=45358
<45358=45360,45359
<45361=45363,45362
<45363=45364
<45364=45366,45365
<45367=45369,45368
<45369=45370
<45370=45372,45371
<45372=45373
<45373=45375,45374
<45375=45377,45376
<45486=45489,45488,45487
<45489=45583,45568,45492,45490
<45490=45491
<45492=45559,45508,45493
<45493=45494
<45494=45495
<45495=45496
<45496=45502,45497
<45497=45500,45498
<45498=45499
<45500=45501
<45502=45503
<45503=45505,45504
<45505=45507,45506
<45508=45509
<45509=45555,45542,45510
<45510=45511
<45511=45535,45512
<45512=45533,45513
<45513=45514
<45514=45515
<45515=45527,45516
<45516=45525,45523,45521,45519,45517
<45517=45518
<45519=45520
<45521=45522
<45523=45524
<45525=45526
<45527=45528
<45528=45530,45529
<45530=45532,45531
<45533=45534
<45535=45536
<45536=45541,45540,45537
<45537=45539,45538
<45542=45543
<45543=45549,45544
<45544=45547,45545
<45545=45546
<45547=45548
<45549=45550
<45550=45552,45551
<45552=45554,45553
<45555=45556
<45556=45558,45557
<45559=45560
<45560=45567,45561
<45561=45563,45562
<45563=45564
<45564=45566,45565
<45568=45574,45569
<45569=45570
<45570=45571
<45571=45573,45572
<45574=45575
<45575=45582,45576
<45576=45578,45577
<45578=45579
<45579=45581,45580
<45583=45584
<45584=45591,45590,45585
<45585=45589,45586
<45586=45588,45587
<45615=45618,45617,45616
<45618=45619
<45619=45810,45809,45620
<45620=45621
<45621=45797,45761,45713,45654,45622
<45622=45637,45623
<45623=45631,45624
<45624=45625
<45625=45627,45626
<45627=45628
<45628=45630,45629
<45631=45632
<45632=45634,45633
<45634=45636,45635
<45637=45638
<45638=45645,45639
<45639=45641,45640
<45641=45642
<45642=45644,45643
<45645=45649,45646
<45646=45648,45647
<45649=45651,45650
<45651=45653,45652
<45654=45709,45680,45655
<45655=45656
<45656=45657
<45657=45678,45658
<45658=45659
<45659=45669,45660
<45660=45661
<45661=45665,45662
<45662=45663
<45663=45664
<45665=45666
<45666=45668,45667
<45669=45670
<45670=45677,45671
<45671=45673,45672
<45673=45674
<45674=45676,45675
<45678=45679
<45680=45681
<45681=45691,45682
<45682=45683
<45683=45689,45684
<45684=45687,45685
<45685=45686
<45687=45688
<45689=45690
<45691=45692
<45692=45701,45693
<45693=45700,45694
<45694=45696,45695
<45696=45697
<45697=45699,45698
<45701=45703,45702
<45703=45705,45704
<45705=45706
<45706=45708,45707
<45709=45710
<45710=45712,45711
<45713=45752,45714
<45714=45716,45715
<45716=45748,45717
<45717=45718
<45718=45740,45719
<45719=45720
<45720=45736,45731,45721
<45721=45722
<45722=45723
<45723=45729,45724
<45724=45727,45725
<45725=45726
<45727=45728
<45729=45730
<45731=45732
<45732=45734,45733
<45734=45735
<45736=45737
<45737=45739,45738
<45740=45741
<45741=45743,45742
<45743=45745,45744
<45745=45747,45746
<45748=45749
<45749=45751,45750
<45752=45753
<45753=45755,45754
<45755=45756
<45756=45758,45757
<45758=45760,45759
<45761=45777,45762
<45762=45764,45763
<45764=45765
<45765=45769,45766
<45766=45767
<45767=45768
<45769=45770
<45770=45772,45771
<45772=45774,45773
<45774=45776,45775
<45777=45778
<45778=45787,45779
<45779=45786,45780
<45780=45782,45781
<45782=45783
<45783=45785,45784
<45787=45789,45788
<45789=45790
<45790=45792,45791
<45792=45794,45793
<45794=45796,45795
<45797=45807,45798
<45798=45800,45799
<45800=45801
<45801=45805,45802
<45802=45803
<45803=45804
<45805=45806
<45807=45808
<45810=45811
<45811=45813,45812
<45813=45814
<45814=45816,45815
<45853=45856,45855,45854
<45856=45902,45897,45888,45877,45868,45857
<45857=45858
<45858=45862,45859
<45859=45860
<45860=45861
<45862=45863
<45863=45865,45864
<45865=45867,45866
<45868=45869
<45869=45873,45870
<45870=45871
<45871=45872
<45873=45874
<45874=45876,45875
<45877=45878
<45878=45882,45879
<45879=45880
<45880=45881
<45882=45883
<45883=45885,45884
<45885=45887,45886
<45888=45889
<45889=45893,45890
<45890=45891
<45891=45892
<45893=45894
<45894=45896,45895
<45897=45898
<45898=45900,45899
<45900=45901
<45902=45903
<45903=45905,45904
<45905=45906
<45917=45920,45919,45918
<45924=45927,45926,45925
<45931=45934,45933,45932
<45934=45935
<45935=45936
<45936=45938,45937
<45938=45939
<45943=45946,45945,45944
<45950=45953,45952,45951
<45957=45960,45959,45958
<45960=45979,45968,45961
<45961=45962
<45962=45964,45963
<45964=45965
<45965=45967,45966
<45968=45969
<45969=45975,45970
<45970=45973,45971
<45971=45972
<45973=45974
<45975=45976
<45976=45978,45977
<45979=45980
<45980=45982,45981
<45982=45983
<45983=45985,45984
<45985=45987,45986
<45994=45997,45996,45995
<45997=45998
<45998=45999
<45999=46003,46000
<46000=46001
<46001=46002
<46003=46004
<46009=46012,46011,46010
<46012=46065,46061,46048,46035,46022,46013
<46013=46014
<46014=46018,46015
<46015=46016
<46016=46017
<46018=46019
<46019=46021,46020
<46022=46023
<46023=46029,46024
<46024=46027,46025
<46025=46026
<46027=46028
<46029=46030
<46030=46032,46031
<46032=46034,46033
<46035=46036
<46036=46042,46037
<46037=46040,46038
<46038=46039
<46040=46041
<46042=46043
<46043=46045,46044
<46045=46047,46046
<46048=46049
<46049=46055,46050
<46050=46053,46051
<46051=46052
<46053=46054
<46055=46056
<46056=46058,46057
<46058=46060,46059
<46061=46062
<46062=46064,46063
<46065=46066
<46066=46070,46067
<46067=46068
<46068=46069
<46070=46071
<46071=46073,46072
<46090=46096,46095,46091
<46091=46092
<46092=46094,46093
<46096=46152,46139,46126,46113,46097
<46097=46111,46098
<46098=46099
<46099=46103,46100
<46100=46101
<46101=46102
<46103=46104
<46104=46106,46105
<46106=46110,46107
<46107=46109,46108
<46111=46112
<46113=46114
<46114=46120,46115
<46115=46118,46116
<46116=46117
<46118=46119
<46120=46121
<46121=46123,46122
<46123=46125,46124
<46126=46127
<46127=46133,46128
<46128=46131,46129
<46129=46130
<46131=46132
<46133=46134
<46134=46136,46135
<46136=46138,46137
<46139=46140
<46140=46146,46141
<46141=46144,46142
<46142=46143
<46144=46145
<46146=46147
<46147=46149,46148
<46149=46151,46150
<46152=46153
<46153=46155,46154
<46173=46176,46175,46174
<46176=46177
<46177=46190,46178
<46178=46179
<46179=46186,46180
<46180=46181
<46181=46182
<46182=46184,46183
<46184=46185
<46186=46187
<46187=46189,46188
<46190=46191
<46191=46205,46192
<46192=46199,46193
<46193=46195,46194
<46195=46196
<46196=46198,46197
<46199=46201,46200
<46201=46202
<46202=46204,46203
<46205=46213,46206
<46206=46208,46207
<46208=46210,46209
<46210=46212,46211
<46227=46233,46232,46228
<46228=46229
<46229=46231,46230
<46233=46234
<46234=46249,46242,46235
<46235=46236
<46236=46237
<46237=46239,46238
<46239=46241,46240
<46242=46243
<46243=46244
<46244=46246,46245
<46246=46248,46247
<46249=46250
<46258=46264,46263,46259
<46259=46260
<46260=46262,46261
<46264=46285,46265
<46265=46283,46266
<46266=46275,46267
<46267=46268
<46268=46270,46269
<46270=46272,46271
<46272=46274,46273
<46275=46276
<46276=46278,46277
<46278=46280,46279
<46280=46282,46281
<46283=46284
<46285=46286
<46286=46288,46287
<46303=46306,46305,46304
<46306=46307
<46307=46308
<46313=46319,46318,46314
<46314=46315
<46315=46317,46316
<46319=46378,46371,46360,46320
<46320=46353,46321
<46321=46322
<46322=46347,46323
<46323=46345,46325,46324
<46325=46326
<46326=46341,46327
<46327=46339,46328
<46328=46329
<46329=46331,46330
<46331=46338,46332
<46332=46334,46333
<46334=46336,46335
<46336=46337
<46339=46340
<46341=46342
<46342=46344,46343
<46345=46346
<46347=46348
<46348=46350,46349
<46350=46352,46351
<46353=46354
<46354=46358,46355
<46355=46356
<46356=46357
<46358=46359
<46360=46361
<46361=46367,46362
<46362=46365,46363
<46363=46364
<46365=46366
<46367=46368
<46368=46370,46369
<46371=46376,46372
<46372=46373
<46373=46375,46374
<46376=46377
<46378=46379
<46379=46384,46383,46380
<46380=46382,46381
<46397=46406,46405,46398
<46398=46402,46399
<46399=46401,46400
<46402=46404,46403
<46406=46407
<46407=46408
<46408=46418,46409
<46409=46410
<46410=46411
<46411=46415,46412
<46412=46414,46413
<46415=46417,46416
<46418=46419
<46419=46421,46420
<46421=46425,46422
<46422=46424,46423
<46425=46427,46426
<46440=46461,46460,46441
<46441=46457,46454,46451,46448,46445,46442
<46442=46444,46443
<46445=46447,46446
<46448=46450,46449
<46451=46453,46452
<46454=46456,46455
<46457=46459,46458
<46461=46558,46551,46464,46462
<46462=46463
<46464=46545,46465
<46465=46527,46466
<46466=46519,46515,46512,46467
<46467=46483,46468
<46468=46481,46469
<46469=46472,46470
<46470=46471
<46472=46479,46473
<46473=46474
<46474=46476,46475
<46476=46478,46477
<46479=46480
<46481=46482
<46483=46484
<46484=46511,46485
<46485=46497,46486
<46486=46487
<46487=46488
<46488=46490,46489
<46490=46492,46491
<46492=46494,46493
<46494=46496,46495
<46497=46498
<46498=46500,46499
<46500=46502,46501
<46502=46504,46503
<46504=46506,46505
<46506=46508,46507
<46508=46510,46509
<46512=46514,46513
<46515=46516
<46516=46518,46517
<46519=46520
<46520=46521
<46521=46526,46525,46522
<46522=46524,46523
<46527=46541,46528
<46528=46529
<46529=46540,46530
<46530=46532,46531
<46532=46533
<46533=46535,46534
<46535=46537,46536
<46537=46539,46538
<46541=46542
<46542=46544,46543
<46545=46546
<46546=46550,46547
<46547=46549,46548
<46551=46552
<46552=46557,46556,46553
<46553=46555,46554
<46558=46563,46559
<46559=46560
<46560=46562,46561
<46563=46564
<46564=46566,46565
<46594=46603,46602,46595
<46595=46599,46596
<46596=46598,46597
<46599=46601,46600
<46603=46604
<46604=46605
<46605=46617,46606
<46606=46615,46611,46607
<46607=46608
<46608=46610,46609
<46611=46612
<46612=46614,46613
<46615=46616
<46617=46618
<46628=46643,46642,46629
<46629=46639,46636,46633,46630
<46630=46632,46631
<46633=46635,46634
<46636=46638,46637
<46639=46641,46640
<46643=46769,46646,46644
<46644=46645
<46646=46761,46748,46745,46647
<46647=46732,46655,46648
<46648=46651,46649
<46649=46650
<46651=46652
<46652=46654,46653
<46655=46709,46656
<46656=46657
<46657=46701,46690,46687,46658
<46658=46659
<46659=46666,46660
<46660=46662,46661
<46662=46663
<46663=46665,46664
<46666=46667
<46667=46685,46668
<46668=46683,46681,46675,46669
<46669=46670
<46670=46674,46671
<46671=46673,46672
<46675=46676
<46676=46678,46677
<46678=46680,46679
<46681=46682
<46683=46684
<46685=46686
<46687=46689,46688
<46690=46691
<46691=46700,46692
<46692=46694,46693
<46694=46695
<46695=46697,46696
<46697=46699,46698
<46701=46702
<46702=46703
<46703=46708,46707,46704
<46704=46706,46705
<46709=46710
<46710=46722,46711
<46711=46715,46712
<46712=46714,46713
<46715=46717,46716
<46717=46719,46718
<46719=46721,46720
<46722=46731,46723
<46723=46725,46724
<46725=46726
<46726=46728,46727
<46728=46730,46729
<46732=46733
<46733=46744,46743,46734
<46734=46742,46735
<46735=46737,46736
<46737=46739,46738
<46739=46741,46740
<46745=46747,46746
<46748=46749
<46749=46760,46750
<46750=46752,46751
<46752=46753
<46753=46755,46754
<46755=46757,46756
<46757=46759,46758
<46761=46762
<46762=46763
<46763=46768,46767,46764
<46764=46766,46765
<46769=46770
<46770=46775,46774,46771
<46771=46773,46772
<46806=46821,46820,46807
<46807=46817,46814,46811,46808
<46808=46810,46809
<46811=46813,46812
<46814=46816,46815
<46817=46819,46818
<46821=46853,46824,46822
<46822=46823
<46824=46830,46825
<46825=46826
<46826=46827
<46827=46829,46828
<46830=46831
<46831=46851,46832
<46832=46849,46847,46843,46837,46833
<46833=46834
<46834=46836,46835
<46837=46838
<46838=46842,46839
<46839=46841,46840
<46843=46844
<46844=46846,46845
<46847=46848
<46849=46850
<46851=46852
<46853=46854
<46854=46859,46858,46855
<46855=46857,46856
<46875=46896,46895,46876
<46876=46892,46889,46886,46883,46880,46877
<46877=46879,46878
<46880=46882,46881
<46883=46885,46884
<46886=46888,46887
<46889=46891,46890
<46892=46894,46893
<46896=47010,46998,46986,46974,46956,46938,46909,46899,46897
<46897=46898
<46899=46907,46900
<46900=46901
<46901=46902
<46902=46904,46903
<46904=46906,46905
<46907=46908
<46909=46915,46910
<46910=46911
<46911=46912
<46912=46914,46913
<46915=46916
<46916=46936,46917
<46917=46934,46932,46928,46922,46918
<46918=46919
<46919=46921,46920
<46922=46923
<46923=46927,46924
<46924=46926,46925
<46928=46929
<46929=46931,46930
<46932=46933
<46934=46935
<46936=46937
<46938=46939
<46939=46955,46954,46940
<46940=46953,46941
<46941=46943,46942
<46943=46945,46944
<46945=46951,46946
<46946=46949,46947
<46947=46948
<46949=46950
<46951=46952
<46956=46957
<46957=46973,46972,46958
<46958=46971,46959
<46959=46961,46960
<46961=46963,46962
<46963=46969,46964
<46964=46967,46965
<46965=46966
<46967=46968
<46969=46970
<46974=46975
<46975=46985,46984,46976
<46976=46983,46977
<46977=46981,46978
<46978=46979
<46979=46980
<46981=46982
<46986=46987
<46987=46997,46996,46988
<46988=46995,46989
<46989=46993,46990
<46990=46991
<46991=46992
<46993=46994
<46998=46999
<46999=47009,47008,47000
<47000=47007,47001
<47001=47005,47002
<47002=47003
<47003=47004
<47005=47006
<47010=47011
<47011=47016,47015,47012
<47012=47014,47013
<47046=47058,47057,47047
<47047=47054,47051,47048
<47048=47050,47049
<47051=47053,47052
<47054=47056,47055
<47058=47353,47346,47328,47061,47059
<47059=47060
<47061=47320,47307,47304,47062
<47062=47291,47063
<47063=47279,47064
<47064=47263,47251,47237,47065
<47065=47226,47186,47066
<47066=47067
<47067=47175,47104,47068
<47068=47069
<47069=47100,47070
<47070=47071
<47071=47087,47072
<47072=47073
<47073=47083,47074
<47074=47079,47075
<47075=47076
<47076=47078,47077
<47079=47080
<47080=47082,47081
<47083=47084
<47084=47086,47085
<47087=47088
<47088=47099,47089
<47089=47097,47090
<47090=47091
<47091=47092
<47092=47096,47093
<47093=47095,47094
<47097=47098
<47100=47101
<47101=47103,47102
<47104=47105
<47105=47171,47106
<47106=47107
<47107=47163,47152,47149,47108
<47108=47109
<47109=47124,47110
<47110=47120,47116,47112,47111
<47112=47113
<47113=47115,47114
<47116=47117
<47117=47119,47118
<47120=47121
<47121=47123,47122
<47124=47125
<47125=47139,47126
<47126=47127
<47127=47128
<47128=47138,47129
<47129=47135,47130
<47130=47132,47131
<47132=47134,47133
<47135=47137,47136
<47139=47140
<47140=47142,47141
<47142=47144,47143
<47144=47146,47145
<47146=47148,47147
<47149=47151,47150
<47152=47153
<47153=47162,47154
<47154=47156,47155
<47156=47157
<47157=47159,47158
<47159=47161,47160
<47163=47164
<47164=47165
<47165=47170,47169,47166
<47166=47168,47167
<47171=47172
<47172=47174,47173
<47175=47176
<47176=47185,47177
<47177=47179,47178
<47179=47180
<47180=47182,47181
<47182=47184,47183
<47186=47187
<47187=47218,47207,47204,47188
<47188=47189
<47189=47190
<47190=47196,47191
<47191=47194,47192
<47192=47193
<47194=47195
<47196=47197
<47197=47199,47198
<47199=47201,47200
<47201=47203,47202
<47204=47206,47205
<47207=47208
<47208=47217,47209
<47209=47211,47210
<47211=47212
<47212=47214,47213
<47214=47216,47215
<47218=47219
<47219=47220
<47220=47225,47224,47221
<47221=47223,47222
<47226=47227
<47227=47236,47228
<47228=47230,47229
<47230=47231
<47231=47233,47232
<47233=47235,47234
<47237=47238
<47238=47250,47249,47239
<47239=47248,47240
<47240=47242,47241
<47242=47243
<47243=47245,47244
<47245=47247,47246
<47251=47252
<47252=47262,47261,47253
<47253=47260,47254
<47254=47256,47255
<47256=47257
<47257=47259,47258
<47263=47264
<47264=47278,47277,47265
<47265=47276,47266
<47266=47274,47267
<47267=47268
<47268=47269
<47269=47273,47270
<47270=47272,47271
<47274=47275
<47279=47280
<47280=47284,47281
<47281=47283,47282
<47284=47286,47285
<47286=47288,47287
<47288=47290,47289
<47291=47292
<47292=47303,47302,47293
<47293=47301,47294
<47294=47296,47295
<47296=47298,47297
<47298=47300,47299
<47304=47306,47305
<47307=47308
<47308=47319,47309
<47309=47311,47310
<47311=47312
<47312=47314,47313
<47314=47316,47315
<47316=47318,47317
<47320=47321
<47321=47322
<47322=47327,47326,47323
<47323=47325,47324
<47328=47331,47329
<47329=47330
<47331=47332
<47332=47345,47333
<47333=47337,47334
<47334=47335
<47335=47336
<47337=47338
<47338=47340,47339
<47340=47344,47341
<47341=47343,47342
<47346=47347
<47347=47352,47351,47348
<47348=47350,47349
<47353=47354
<47354=47359,47358,47355
<47355=47357,47356
<47407=47413,47412,47408
<47408=47409
<47409=47411,47410
<47413=47430,47421,47414
<47414=47415
<47415=47417,47416
<47417=47418
<47418=47420,47419
<47421=47422
<47422=47424,47423
<47424=47425
<47425=47427,47426
<47427=47429,47428
<47430=47474,47457,47431
<47431=47432
<47432=47453,47433
<47433=47434
<47434=47435
<47435=47446,47436
<47436=47444,47437
<47437=47442,47440,47438
<47438=47439
<47440=47441
<47442=47443
<47444=47445
<47446=47448,47447
<47448=47450,47449
<47450=47452,47451
<47453=47454
<47454=47456,47455
<47457=47458
<47458=47459
<47459=47467,47460
<47460=47462,47461
<47462=47464,47463
<47464=47466,47465
<47467=47469,47468
<47469=47471,47470
<47471=47473,47472
<47474=47475
<47475=47477,47476
<47498=47501,47500,47499
<47501=47549,47522,47513,47502
<47502=47503
<47503=47507,47504
<47504=47505
<47505=47506
<47507=47508
<47508=47510,47509
<47510=47512,47511
<47513=47514
<47514=47516,47515
<47516=47517
<47517=47519,47518
<47519=47521,47520
<47522=47541,47523
<47523=47524
<47524=47532,47525
<47525=47527,47526
<47527=47529,47528
<47529=47531,47530
<47532=47534,47533
<47534=47536,47535
<47536=47538,47537
<47538=47540,47539
<47541=47542
<47542=47544,47543
<47544=47546,47545
<47546=47548,47547
<47549=47566,47550
<47550=47551
<47551=47559,47552
<47552=47554,47553
<47554=47556,47555
<47556=47558,47557
<47559=47561,47560
<47561=47563,47562
<47563=47565,47564
<47566=47567
<47567=47576,47568
<47568=47570,47569
<47570=47571
<47571=47573,47572
<47573=47575,47574
<47576=47578,47577
<47578=47580,47579
<47606=47615,47614,47607
<47607=47611,47608
<47608=47610,47609
<47611=47613,47612
<47615=47655,47654,47653,47652,47616
<47616=47643,47617
<47617=47630,47618
<47618=47619
<47619=47620
<47620=47626,47621
<47621=47624,47622
<47622=47623
<47624=47625
<47626=47627
<47627=47629,47628
<47630=47631
<47631=47635,47632
<47632=47633
<47633=47634
<47635=47636
<47636=47638,47637
<47638=47640,47639
<47640=47642,47641
<47643=47644
<47644=47651,47650,47645
<47645=47649,47646
<47646=47648,47647
<47667=47676,47675,47668
<47668=47672,47669
<47669=47671,47670
<47672=47674,47673
<47676=47861,47836,47679,47677
<47677=47678
<47679=47827,47772,47680
<47680=47681
<47681=47763,47727,47682
<47682=47683
<47683=47718,47684
<47684=47707,47687,47685
<47685=47686
<47687=47692,47688
<47688=47689
<47689=47691,47690
<47692=47693
<47693=47704,47694
<47694=47696,47695
<47696=47698,47697
<47698=47699
<47699=47701,47700
<47701=47703,47702
<47704=47706,47705
<47707=47708
<47708=47717,47716,47709
<47709=47715,47710
<47710=47712,47711
<47712=47714,47713
<47718=47719
<47719=47721,47720
<47721=47723,47722
<47723=47724
<47724=47726,47725
<47727=47728
<47728=47729
<47729=47746,47730
<47730=47741,47731
<47731=47733,47732
<47733=47735,47734
<47735=47736
<47736=47738,47737
<47738=47740,47739
<47741=47745,47742
<47742=47744,47743
<47746=47762,47747
<47747=47756,47748
<47748=47749
<47749=47750
<47750=47752,47751
<47752=47753
<47753=47755,47754
<47756=47757
<47757=47759,47758
<47759=47761,47760
<47763=47764
<47764=47766,47765
<47766=47768,47767
<47768=47769
<47769=47771,47770
<47772=47773
<47773=47818,47774
<47774=47814,47777,47775
<47775=47776
<47777=47803,47792,47789,47778
<47778=47779
<47779=47783,47780
<47780=47781
<47781=47782
<47783=47784
<47784=47788,47785
<47785=47787,47786
<47789=47791,47790
<47792=47793
<47793=47802,47794
<47794=47796,47795
<47796=47797
<47797=47799,47798
<47799=47801,47800
<47803=47804
<47804=47813,47805
<47805=47807,47806
<47807=47808
<47808=47810,47809
<47810=47812,47811
<47814=47815
<47815=47817,47816
<47818=47819
<47819=47821,47820
<47821=47823,47822
<47823=47824
<47824=47826,47825
<47827=47828
<47828=47830,47829
<47830=47832,47831
<47832=47833
<47833=47835,47834
<47836=47857,47837
<47837=47838
<47838=47841,47839
<47839=47840
<47841=47842
<47842=47856,47843
<47843=47852,47844
<47844=47845
<47845=47846
<47846=47848,47847
<47848=47849
<47849=47851,47850
<47852=47853
<47853=47855,47854
<47857=47858
<47858=47860,47859
<47861=47865,47862
<47862=47863
<47863=47864
<47865=47866
<47866=47872,47867
<47867=47869,47868
<47869=47871,47870
<47872=47879,47873
<47873=47875,47874
<47875=47876
<47876=47878,47877
<47916=47925,47924,47917
<47917=47921,47918
<47918=47920,47919
<47921=47923,47922
<47925=48066,47926
<47926=48058,48049,48046,47927
<47927=48037,47928
<47928=48003,47929
<47929=47990,47968,47930
<47930=47949,47931
<47931=47943,47932
<47932=47933
<47933=47939,47934
<47934=47937,47935
<47935=47936
<47937=47938
<47939=47940
<47940=47942,47941
<47943=47944
<47944=47948,47945
<47945=47947,47946
<47949=47950
<47950=47960,47951
<47951=47952
<47952=47953
<47953=47957,47954
<47954=47956,47955
<47957=47959,47958
<47960=47961
<47961=47963,47962
<47963=47967,47964
<47964=47966,47965
<47968=47981,47969
<47969=47970
<47970=47971
<47971=47980,47972
<47972=47976,47973
<47973=47974
<47974=47975
<47976=47977
<47977=47979,47978
<47981=47982
<47982=47984,47983
<47984=47986,47985
<47986=47987
<47987=47989,47988
<47990=47991
<47991=48002,48001,47992
<47992=48000,47993
<47993=47997,47994
<47994=47996,47995
<47997=47999,47998
<48003=48004
<48004=48031,48005
<48005=48023,48006
<48006=48020,48007
<48007=48015,48008
<48008=48014,48009
<48009=48011,48010
<48011=48013,48012
<48015=48019,48016
<48016=48018,48017
<48020=48022,48021
<48023=48029,48024
<48024=48027,48025
<48025=48026
<48027=48028
<48029=48030
<48031=48033,48032
<48033=48034
<48034=48036,48035
<48037=48038
<48038=48045,48044,48039
<48039=48043,48040
<48040=48042,48041
<48046=48048,48047
<48049=48050
<48050=48057,48051
<48051=48053,48052
<48053=48054
<48054=48056,48055
<48058=48059
<48059=48060
<48060=48065,48064,48061
<48061=48063,48062
<48066=48067
<48067=48071,48068
<48068=48069
<48069=48070
<48071=48072
<48103=48109,48108,48104
<48104=48105
<48105=48107,48106
<48109=48110
<48110=48111
<48111=48115,48112
<48112=48114,48113
<48115=48117,48116
<48124=48130,48129,48125
<48125=48126
<48126=48128,48127
<48130=48131
<48131=48132
<48132=48136,48133
<48133=48135,48134
<48136=48138,48137
<48145=48151,48150,48146
<48146=48147
<48147=48149,48148
<48151=48242,48152
<48152=48234,48225,48222,48153
<48153=48213,48154
<48154=48197,48155
<48155=48177,48156
<48156=48175,48157
<48157=48169,48158
<48158=48159
<48159=48165,48160
<48160=48163,48161
<48161=48162
<48163=48164
<48165=48166
<48166=48168,48167
<48169=48170
<48170=48174,48171
<48171=48173,48172
<48175=48176
<48177=48178
<48178=48196,48195,48179
<48179=48194,48180
<48180=48192,48181
<48181=48190,48186,48182
<48182=48183
<48183=48185,48184
<48186=48187
<48187=48189,48188
<48190=48191
<48192=48193
<48197=48198
<48198=48207,48199
<48199=48205,48200
<48200=48203,48201
<48201=48202
<48203=48204
<48205=48206
<48207=48209,48208
<48209=48210
<48210=48212,48211
<48213=48214
<48214=48221,48220,48215
<48215=48219,48216
<48216=48218,48217
<48222=48224,48223
<48225=48226
<48226=48233,48227
<48227=48229,48228
<48229=48230
<48230=48232,48231
<48234=48235
<48235=48236
<48236=48241,48240,48237
<48237=48239,48238
<48242=48243
<48243=48247,48244
<48244=48245
<48245=48246
<48247=48248
<48268=48280,48279,48269
<48269=48276,48273,48270
<48270=48272,48271
<48273=48275,48274
<48276=48278,48277
<48280=48281
<48281=48365,48356,48353,48282
<48282=48344,48283
<48283=48328,48284
<48284=48306,48285
<48285=48304,48286
<48286=48298,48287
<48287=48288
<48288=48294,48289
<48289=48292,48290
<48290=48291
<48292=48293
<48294=48295
<48295=48297,48296
<48298=48299
<48299=48303,48300
<48300=48302,48301
<48304=48305
<48306=48307
<48307=48327,48326,48308
<48308=48325,48309
<48309=48323,48310
<48310=48321,48319,48315,48313,48311
<48311=48312
<48313=48314
<48315=48316
<48316=48318,48317
<48319=48320
<48321=48322
<48323=48324
<48328=48329
<48329=48338,48330
<48330=48336,48331
<48331=48334,48332
<48332=48333
<48334=48335
<48336=48337
<48338=48340,48339
<48340=48341
<48341=48343,48342
<48344=48345
<48345=48352,48351,48346
<48346=48350,48347
<48347=48349,48348
<48353=48355,48354
<48356=48357
<48357=48364,48358
<48358=48360,48359
<48360=48361
<48361=48363,48362
<48365=48366
<48366=48367
<48367=48372,48371,48368
<48368=48370,48369
<48392=48395,48394,48393
<48395=48396
<48396=48410,48397
<48397=48403,48398
<48398=48399
<48399=48401,48400
<48401=48402
<48403=48404
<48404=48406,48405
<48406=48407
<48407=48409,48408
<48410=48411
<48411=48418,48412
<48412=48414,48413
<48414=48415
<48415=48417,48416
<48426=48429,48428,48427
<48429=48430
<48430=48478,48431
<48431=48432
<48432=48472,48459,48433
<48433=48434
<48434=48448,48435
<48435=48436
<48436=48442,48437
<48437=48440,48438
<48438=48439
<48440=48441
<48442=48443
<48443=48445,48444
<48445=48447,48446
<48448=48449
<48449=48458,48450
<48450=48452,48451
<48452=48453
<48453=48455,48454
<48455=48457,48456
<48459=48460
<48460=48466,48461
<48461=48464,48462
<48462=48463
<48464=48465
<48466=48467
<48467=48469,48468
<48469=48471,48470
<48472=48473
<48473=48475,48474
<48475=48477,48476
<48478=48479
<48487=48493,48492,48488
<48488=48489
<48489=48491,48490
<48493=48494
<48494=48528,48495
<48495=48496
<48496=48524,48511,48497
<48497=48498
<48498=48499
<48499=48505,48500
<48500=48503,48501
<48501=48502
<48503=48504
<48505=48506
<48506=48508,48507
<48508=48510,48509
<48511=48512
<48512=48518,48513
<48513=48516,48514
<48514=48515
<48516=48517
<48518=48519
<48519=48521,48520
<48521=48523,48522
<48524=48525
<48525=48527,48526
<48528=48529
<48537=48540,48539,48538
<48540=48650,48643,48632,48619,48606,48593,48580,48567,48554,48541
<48541=48542
<48542=48548,48543
<48543=48546,48544
<48544=48545
<48546=48547
<48548=48549
<48549=48551,48550
<48551=48553,48552
<48554=48555
<48555=48561,48556
<48556=48559,48557
<48557=48558
<48559=48560
<48561=48562
<48562=48564,48563
<48564=48566,48565
<48567=48568
<48568=48574,48569
<48569=48572,48570
<48570=48571
<48572=48573
<48574=48575
<48575=48577,48576
<48577=48579,48578
<48580=48581
<48581=48587,48582
<48582=48585,48583
<48583=48584
<48585=48586
<48587=48588
<48588=48590,48589
<48590=48592,48591
<48593=48594
<48594=48600,48595
<48595=48598,48596
<48596=48597
<48598=48599
<48600=48601
<48601=48603,48602
<48603=48605,48604
<48606=48607
<48607=48613,48608
<48608=48611,48609
<48609=48610
<48611=48612
<48613=48614
<48614=48616,48615
<48616=48618,48617
<48619=48620
<48620=48626,48621
<48621=48624,48622
<48622=48623
<48624=48625
<48626=48627
<48627=48629,48628
<48629=48631,48630
<48632=48637,48633
<48633=48634
<48634=48636,48635
<48637=48638
<48638=48640,48639
<48640=48642,48641
<48643=48644
<48644=48649,48648,48645
<48645=48647,48646
<48650=48651
<48651=48656,48655,48652
<48652=48654,48653
<48683=48689,48688,48684
<48684=48685
<48685=48687,48686
<48689=48690
<48690=48691
<48691=48715,48692
<48692=48705,48695,48693
<48693=48694
<48695=48696
<48696=48702,48697
<48697=48701,48698
<48698=48700,48699
<48702=48704,48703
<48705=48706
<48706=48712,48707
<48707=48711,48708
<48708=48710,48709
<48712=48714,48713
<48715=48716
<48727=48736,48735,48728
<48728=48732,48729
<48729=48731,48730
<48732=48734,48733
<48736=48875,48867,48852,48835,48819,48803,48787,48771,48754,48737
<48737=48738
<48738=48751,48739
<48739=48749,48740
<48740=48745,48741
<48741=48742
<48742=48744,48743
<48745=48746
<48746=48748,48747
<48749=48750
<48751=48753,48752
<48754=48755
<48755=48768,48756
<48756=48766,48757
<48757=48762,48758
<48758=48759
<48759=48761,48760
<48762=48763
<48763=48765,48764
<48766=48767
<48768=48770,48769
<48771=48772
<48772=48786,48785,48773
<48773=48784,48774
<48774=48783,48775
<48775=48777,48776
<48777=48781,48778
<48778=48779
<48779=48780
<48781=48782
<48787=48788
<48788=48802,48801,48789
<48789=48800,48790
<48790=48799,48791
<48791=48793,48792
<48793=48797,48794
<48794=48795
<48795=48796
<48797=48798
<48803=48804
<48804=48818,48817,48805
<48805=48816,48806
<48806=48815,48807
<48807=48809,48808
<48809=48813,48810
<48810=48811
<48811=48812
<48813=48814
<48819=48820
<48820=48834,48833,48821
<48821=48832,48822
<48822=48831,48823
<48823=48825,48824
<48825=48829,48826
<48826=48827
<48827=48828
<48829=48830
<48835=48836
<48836=48851,48850,48837
<48837=48849,48838
<48838=48840,48839
<48840=48848,48841
<48841=48843,48842
<48843=48845,48844
<48845=48847,48846
<48852=48853
<48853=48866,48865,48854
<48854=48864,48855
<48855=48857,48856
<48857=48859,48858
<48859=48861,48860
<48861=48863,48862
<48867=48868
<48868=48870,48869
<48870=48872,48871
<48872=48874,48873
<48875=48876
<48876=48878,48877
<48878=48880,48879
<48909=48915,48914,48910
<48910=48911
<48911=48913,48912
<48915=48924,48920,48916
<48916=48917
<48917=48919,48918
<48920=48921
<48921=48923,48922
<48924=48925
<48925=48927,48926
<48935=48941,48940,48936
<48936=48937
<48937=48939,48938
<48941=48950,48946,48942
<48942=48943
<48943=48945,48944
<48946=48947
<48947=48949,48948
<48950=48951
<48951=48957,48952
<48952=48956,48953
<48953=48955,48954
<48967=48973,48972,48968
<48968=48969
<48969=48971,48970
<48973=48982,48978,48974
<48974=48975
<48975=48977,48976
<48978=48979
<48979=48981,48980
<48982=48983
<48983=48989,48984
<48984=48988,48985
<48985=48987,48986
<48999=49005,49004,49000
<49000=49001
<49001=49003,49002
<49010=49013,49012,49011
<49013=49032,49025,49014
<49014=49015
<49015=49019,49016
<49016=49017
<49017=49018
<49019=49020
<49020=49022,49021
<49022=49024,49023
<49025=49026
<49026=49030,49027
<49027=49028
<49028=49029
<49030=49031
<49032=49033
<49033=49035,49034
<49035=49036
<49036=49038,49037
<49038=49040,49039
<49049=49052,49051,49050
<49052=49405,49153,49139,49053
<49053=49137,49094,49054
<49054=49055
<49055=49056
<49056=49092,49086,49057
<49057=49058
<49058=49077,49070,49059
<49059=49060
<49060=49064,49061
<49061=49062
<49062=49063
<49064=49065
<49065=49067,49066
<49067=49069,49068
<49070=49071
<49071=49075,49072
<49072=49073
<49073=49074
<49075=49076
<49077=49078
<49078=49080,49079
<49080=49081
<49081=49083,49082
<49083=49085,49084
<49086=49087
<49087=49088
<49088=49090,49089
<49090=49091
<49092=49093
<49094=49133,49124,49117,49106,49095
<49095=49096
<49096=49100,49097
<49097=49098
<49098=49099
<49100=49101
<49101=49103,49102
<49103=49105,49104
<49106=49107
<49107=49115,49108
<49108=49113,49111,49109
<49109=49110
<49111=49112
<49113=49114
<49115=49116
<49117=49118
<49118=49122,49119
<49119=49120
<49120=49121
<49122=49123
<49124=49125
<49125=49127,49126
<49127=49128
<49128=49130,49129
<49130=49132,49131
<49133=49134
<49134=49136,49135
<49137=49138
<49139=49149,49140
<49140=49141
<49141=49143,49142
<49143=49144
<49144=49146,49145
<49146=49148,49147
<49149=49150
<49150=49152,49151
<49153=49325,49154
<49154=49294,49155
<49155=49279,49278,49156
<49156=49157
<49157=49262,49246,49230,49214,49198,49189,49158
<49158=49159
<49159=49185,49160
<49160=49177,49169,49161
<49161=49162
<49162=49164,49163
<49164=49166,49165
<49166=49168,49167
<49169=49170
<49170=49172,49171
<49172=49174,49173
<49174=49176,49175
<49177=49178
<49178=49180,49179
<49180=49182,49181
<49182=49184,49183
<49185=49186
<49186=49188,49187
<49189=49190
<49190=49192,49191
<49192=49193
<49193=49195,49194
<49195=49197,49196
<49198=49199
<49199=49207,49200
<49200=49202,49201
<49202=49204,49203
<49204=49206,49205
<49207=49209,49208
<49209=49211,49210
<49211=49213,49212
<49214=49215
<49215=49223,49216
<49216=49218,49217
<49218=49220,49219
<49220=49222,49221
<49223=49225,49224
<49225=49227,49226
<49227=49229,49228
<49230=49231
<49231=49239,49232
<49232=49234,49233
<49234=49236,49235
<49236=49238,49237
<49239=49241,49240
<49241=49243,49242
<49243=49245,49244
<49246=49247
<49247=49255,49248
<49248=49250,49249
<49250=49252,49251
<49252=49254,49253
<49255=49257,49256
<49257=49259,49258
<49259=49261,49260
<49262=49263
<49263=49271,49264
<49264=49266,49265
<49266=49268,49267
<49268=49270,49269
<49271=49273,49272
<49273=49275,49274
<49275=49277,49276
<49279=49280
<49280=49290,49281
<49281=49288,49286,49284,49282
<49282=49283
<49284=49285
<49286=49287
<49288=49289
<49290=49291
<49291=49293,49292
<49294=49295
<49295=49321,49296
<49296=49313,49305,49297
<49297=49298
<49298=49300,49299
<49300=49302,49301
<49302=49304,49303
<49305=49306
<49306=49308,49307
<49308=49310,49309
<49310=49312,49311
<49313=49314
<49314=49316,49315
<49316=49318,49317
<49318=49320,49319
<49321=49322
<49322=49324,49323
<49325=49326
<49326=49390,49327
<49327=49375,49328
<49328=49360,49329
<49329=49345,49330
<49330=49338,49331
<49331=49333,49332
<49333=49335,49334
<49335=49337,49336
<49338=49340,49339
<49340=49342,49341
<49342=49344,49343
<49345=49353,49346
<49346=49348,49347
<49348=49350,49349
<49350=49352,49351
<49353=49355,49354
<49355=49357,49356
<49357=49359,49358
<49360=49368,49361
<49361=49363,49362
<49363=49365,49364
<49365=49367,49366
<49368=49370,49369
<49370=49372,49371
<49372=49374,49373
<49375=49383,49376
<49376=49378,49377
<49378=49380,49379
<49380=49382,49381
<49383=49385,49384
<49385=49387,49386
<49387=49389,49388
<49390=49398,49391
<49391=49393,49392
<49393=49395,49394
<49395=49397,49396
<49398=49400,49399
<49400=49402,49401
<49402=49404,49403
<49405=49406
<49406=49408,49407
<49408=49409
<49409=49411,49410
<49411=49413,49412
<49441=49444,49443,49442
<49444=49540,49531,49445
<49445=49529,49486,49446
<49446=49447
<49447=49448
<49448=49484,49478,49449
<49449=49450
<49450=49469,49462,49451
<49451=49452
<49452=49456,49453
<49453=49454
<49454=49455
<49456=49457
<49457=49459,49458
<49459=49461,49460
<49462=49463
<49463=49467,49464
<49464=49465
<49465=49466
<49467=49468
<49469=49470
<49470=49472,49471
<49472=49473
<49473=49475,49474
<49475=49477,49476
<49478=49479
<49479=49480
<49480=49482,49481
<49482=49483
<49484=49485
<49486=49525,49516,49509,49498,49487
<49487=49488
<49488=49492,49489
<49489=49490
<49490=49491
<49492=49493
<49493=49495,49494
<49495=49497,49496
<49498=49499
<49499=49507,49500
<49500=49505,49503,49501
<49501=49502
<49503=49504
<49505=49506
<49507=49508
<49509=49510
<49510=49514,49511
<49511=49512
<49512=49513
<49514=49515
<49516=49517
<49517=49519,49518
<49519=49520
<49520=49522,49521
<49522=49524,49523
<49525=49526
<49526=49528,49527
<49529=49530
<49531=49532
<49532=49534,49533
<49534=49535
<49535=49537,49536
<49537=49539,49538
<49540=49568,49559,49541
<49541=49542
<49542=49543
<49543=49544
<49544=49552,49545
<49545=49547,49546
<49547=49549,49548
<49549=49551,49550
<49552=49554,49553
<49554=49556,49555
<49556=49558,49557
<49559=49560
<49560=49561
<49561=49565,49562
<49562=49564,49563
<49565=49567,49566
<49568=49569
<49569=49571,49570
<49591=49597,49596,49592
<49592=49593
<49593=49595,49594
<49597=49598
<49598=49623,49614,49611,49599
<49599=49600
<49600=49601
<49601=49605,49602
<49602=49603
<49603=49604
<49605=49606
<49606=49608,49607
<49608=49610,49609
<49611=49613,49612
<49614=49615
<49615=49622,49616
<49616=49618,49617
<49618=49619
<49619=49621,49620
<49623=49624
<49624=49625
<49625=49630,49629,49626
<49626=49628,49627
<49640=49643,49642,49641
<49643=49644
<49644=49667,49658,49655,49645
<49645=49646
<49646=49647
<49647=49649,49648
<49649=49650
<49650=49652,49651
<49652=49654,49653
<49655=49657,49656
<49658=49659
<49659=49666,49660
<49660=49662,49661
<49662=49663
<49663=49665,49664
<49667=49668
<49668=49669
<49669=49674,49673,49670
<49670=49672,49671
<49683=49689,49688,49684
<49684=49685
<49685=49687,49686
<49689=50232,50222,50212,49694,49690
<49690=49691
<49691=49693,49692
<49694=50206,49809,49695
<49695=49696
<49696=49803,49697
<49697=49773,49743,49737,49724,49711,49698
<49698=49699
<49699=49705,49700
<49700=49703,49701
<49701=49702
<49703=49704
<49705=49706
<49706=49708,49707
<49708=49710,49709
<49711=49712
<49712=49718,49713
<49713=49716,49714
<49714=49715
<49716=49717
<49718=49719
<49719=49721,49720
<49721=49723,49722
<49724=49725
<49725=49731,49726
<49726=49729,49727
<49727=49728
<49729=49730
<49731=49732
<49732=49734,49733
<49734=49736,49735
<49737=49738
<49738=49740,49739
<49740=49742,49741
<49743=49765,49756,49753,49744
<49744=49745
<49745=49746
<49746=49748,49747
<49748=49750,49749
<49750=49752,49751
<49753=49755,49754
<49756=49757
<49757=49764,49758
<49758=49760,49759
<49760=49761
<49761=49763,49762
<49765=49766
<49766=49767
<49767=49772,49771,49768
<49768=49770,49769
<49773=49795,49786,49783,49774
<49774=49775
<49775=49776
<49776=49778,49777
<49778=49780,49779
<49780=49782,49781
<49783=49785,49784
<49786=49787
<49787=49794,49788
<49788=49790,49789
<49790=49791
<49791=49793,49792
<49795=49796
<49796=49797
<49797=49802,49801,49798
<49798=49800,49799
<49803=49804
<49804=49806,49805
<49806=49808,49807
<49809=50202,50195,50188,50130,49864,49834,49828,49817,49810
<49810=49811
<49811=49815,49812
<49812=49813
<49813=49814
<49815=49816
<49817=49818
<49818=49822,49819
<49819=49820
<49820=49821
<49822=49823
<49823=49825,49824
<49825=49827,49826
<49828=49829
<49829=49831,49830
<49831=49833,49832
<49834=49856,49847,49844,49835
<49835=49836
<49836=49837
<49837=49839,49838
<49839=49841,49840
<49841=49843,49842
<49844=49846,49845
<49847=49848
<49848=49855,49849
<49849=49851,49850
<49851=49852
<49852=49854,49853
<49856=49857
<49857=49858
<49858=49863,49862,49859
<49859=49861,49860
<49864=50121,49865
<49865=50106,50091,50076,50061,50046,50031,50016,50001,49986,49971,49956,49941,49926,49911,49896,49881,49866
<49866=49867
<49867=49875,49868
<49868=49873,49869
<49869=49870
<49870=49872,49871
<49873=49874
<49875=49876
<49876=49878,49877
<49878=49880,49879
<49881=49882
<49882=49890,49883
<49883=49888,49884
<49884=49885
<49885=49887,49886
<49888=49889
<49890=49891
<49891=49893,49892
<49893=49895,49894
<49896=49897
<49897=49905,49898
<49898=49903,49899
<49899=49900
<49900=49902,49901
<49903=49904
<49905=49906
<49906=49908,49907
<49908=49910,49909
<49911=49912
<49912=49920,49913
<49913=49918,49914
<49914=49915
<49915=49917,49916
<49918=49919
<49920=49921
<49921=49923,49922
<49923=49925,49924
<49926=49927
<49927=49935,49928
<49928=49933,49929
<49929=49930
<49930=49932,49931
<49933=49934
<49935=49936
<49936=49938,49937
<49938=49940,49939
<49941=49942
<49942=49950,49943
<49943=49948,49944
<49944=49945
<49945=49947,49946
<49948=49949
<49950=49951
<49951=49953,49952
<49953=49955,49954
<49956=49957
<49957=49965,49958
<49958=49963,49959
<49959=49960
<49960=49962,49961
<49963=49964
<49965=49966
<49966=49968,49967
<49968=49970,49969
<49971=49972
<49972=49980,49973
<49973=49978,49974
<49974=49975
<49975=49977,49976
<49978=49979
<49980=49981
<49981=49983,49982
<49983=49985,49984
<49986=49987
<49987=49995,49988
<49988=49993,49989
<49989=49990
<49990=49992,49991
<49993=49994
<49995=49996
<49996=49998,49997
<49998=50000,49999
<50001=50002
<50002=50010,50003
<50003=50008,50004
<50004=50005
<50005=50007,50006
<50008=50009
<50010=50011
<50011=50013,50012
<50013=50015,50014
<50016=50017
<50017=50025,50018
<50018=50023,50019
<50019=50020
<50020=50022,50021
<50023=50024
<50025=50026
<50026=50028,50027
<50028=50030,50029
<50031=50032
<50032=50040,50033
<50033=50038,50034
<50034=50035
<50035=50037,50036
<50038=50039
<50040=50041
<50041=50043,50042
<50043=50045,50044
<50046=50047
<50047=50055,50048
<50048=50053,50049
<50049=50050
<50050=50052,50051
<50053=50054
<50055=50056
<50056=50058,50057
<50058=50060,50059
<50061=50062
<50062=50070,50063
<50063=50068,50064
<50064=50065
<50065=50067,50066
<50068=50069
<50070=50071
<50071=50073,50072
<50073=50075,50074
<50076=50077
<50077=50085,50078
<50078=50083,50079
<50079=50080
<50080=50082,50081
<50083=50084
<50085=50086
<50086=50088,50087
<50088=50090,50089
<50091=50092
<50092=50100,50093
<50093=50098,50094
<50094=50095
<50095=50097,50096
<50098=50099
<50100=50101
<50101=50103,50102
<50103=50105,50104
<50106=50107
<50107=50115,50108
<50108=50113,50109
<50109=50110
<50110=50112,50111
<50113=50114
<50115=50116
<50116=50118,50117
<50118=50120,50119
<50121=50122
<50122=50124,50123
<50124=50126,50125
<50126=50127
<50127=50129,50128
<50130=50180,50171,50168,50131
<50131=50160,50140,50132
<50132=50138,50133
<50133=50134
<50134=50135
<50135=50137,50136
<50138=50139
<50140=50141
<50141=50159,50158,50142
<50142=50157,50143
<50143=50151,50144
<50144=50145
<50145=50146
<50146=50148,50147
<50148=50150,50149
<50151=50152
<50152=50154,50153
<50154=50156,50155
<50160=50161
<50161=50163,50162
<50163=50165,50164
<50165=50167,50166
<50168=50170,50169
<50171=50172
<50172=50179,50173
<50173=50175,50174
<50175=50176
<50176=50178,50177
<50180=50181
<50181=50182
<50182=50187,50186,50183
<50183=50185,50184
<50188=50189
<50189=50194,50193,50190
<50190=50192,50191
<50195=50196
<50196=50200,50197
<50197=50198
<50198=50199
<50200=50201
<50202=50203
<50203=50205,50204
<50206=50207
<50207=50211,50208
<50208=50210,50209
<50212=50220,50213
<50213=50214
<50214=50218,50215
<50215=50216
<50216=50217
<50218=50219
<50220=50221
<50222=50230,50223
<50223=50224
<50224=50228,50225
<50225=50226
<50226=50227
<50228=50229
<50230=50231
<50232=50241,50233
<50233=50234
<50234=50235
<50235=50239,50236
<50236=50237
<50237=50238
<50239=50240
<50241=50242
<50284=50290,50289,50285
<50285=50286
<50286=50288,50287
<50290=50684,50674,50664,50411,50369,50291
<50291=50367,50330,50292
<50292=50293
<50293=50324,50318,50312,50306,50300,50294
<50294=50295
<50295=50297,50296
<50297=50299,50298
<50300=50301
<50301=50303,50302
<50303=50305,50304
<50306=50307
<50307=50309,50308
<50309=50311,50310
<50312=50313
<50313=50315,50314
<50315=50317,50316
<50318=50319
<50319=50321,50320
<50321=50323,50322
<50324=50325
<50325=50327,50326
<50327=50329,50328
<50330=50361,50355,50349,50343,50337,50331
<50331=50332
<50332=50334,50333
<50334=50336,50335
<50337=50338
<50338=50340,50339
<50340=50342,50341
<50343=50344
<50344=50346,50345
<50346=50348,50347
<50349=50350
<50350=50352,50351
<50352=50354,50353
<50355=50356
<50356=50358,50357
<50358=50360,50359
<50361=50362
<50362=50364,50363
<50364=50366,50365
<50367=50368
<50369=50403,50394,50391,50370
<50370=50371
<50371=50389,50381,50372
<50372=50373
<50373=50374
<50374=50376,50375
<50376=50378,50377
<50378=50380,50379
<50381=50382
<50382=50384,50383
<50384=50386,50385
<50386=50388,50387
<50389=50390
<50391=50393,50392
<50394=50395
<50395=50402,50396
<50396=50398,50397
<50398=50399
<50399=50401,50400
<50403=50404
<50404=50405
<50405=50410,50409,50406
<50406=50408,50407
<50411=50658,50492,50412
<50412=50413
<50413=50486,50414
<50414=50482,50453,50440,50427,50421,50415
<50415=50416
<50416=50418,50417
<50418=50420,50419
<50421=50422
<50422=50424,50423
<50424=50426,50425
<50427=50428
<50428=50434,50429
<50429=50432,50430
<50430=50431
<50432=50433
<50434=50435
<50435=50437,50436
<50437=50439,50438
<50440=50441
<50441=50447,50442
<50442=50445,50443
<50443=50444
<50445=50446
<50447=50448
<50448=50450,50449
<50450=50452,50451
<50453=50474,50465,50462,50454
<50454=50455
<50455=50457,50456
<50457=50459,50458
<50459=50461,50460
<50462=50464,50463
<50465=50466
<50466=50473,50467
<50467=50469,50468
<50469=50470
<50470=50472,50471
<50474=50475
<50475=50476
<50476=50481,50480,50477
<50477=50479,50478
<50482=50483
<50483=50485,50484
<50486=50487
<50487=50489,50488
<50489=50491,50490
<50492=50654,50650,50643,50638,50609,50523,50512,50505,50499,50493
<50493=50494
<50494=50496,50495
<50496=50498,50497
<50499=50500
<50500=50502,50501
<50502=50504,50503
<50505=50506
<50506=50510,50507
<50507=50508
<50508=50509
<50510=50511
<50512=50513
<50513=50517,50514
<50514=50515
<50515=50516
<50517=50518
<50518=50520,50519
<50520=50522,50521
<50523=50600,50524
<50524=50585,50570,50555,50540,50525
<50525=50526
<50526=50534,50527
<50527=50532,50528
<50528=50529
<50529=50531,50530
<50532=50533
<50534=50535
<50535=50537,50536
<50537=50539,50538
<50540=50541
<50541=50549,50542
<50542=50547,50543
<50543=50544
<50544=50546,50545
<50547=50548
<50549=50550
<50550=50552,50551
<50552=50554,50553
<50555=50556
<50556=50564,50557
<50557=50562,50558
<50558=50559
<50559=50561,50560
<50562=50563
<50564=50565
<50565=50567,50566
<50567=50569,50568
<50570=50571
<50571=50579,50572
<50572=50577,50573
<50573=50574
<50574=50576,50575
<50577=50578
<50579=50580
<50580=50582,50581
<50582=50584,50583
<50585=50586
<50586=50594,50587
<50587=50592,50588
<50588=50589
<50589=50591,50590
<50592=50593
<50594=50595
<50595=50597,50596
<50597=50599,50598
<50600=50601
<50601=50603,50602
<50603=50605,50604
<50605=50606
<50606=50608,50607
<50609=50630,50621,50618,50610
<50610=50611
<50611=50613,50612
<50613=50615,50614
<50615=50617,50616
<50618=50620,50619
<50621=50622
<50622=50629,50623
<50623=50625,50624
<50625=50626
<50626=50628,50627
<50630=50631
<50631=50632
<50632=50637,50636,50633
<50633=50635,50634
<50638=50639
<50639=50641,50640
<50641=50642
<50643=50644
<50644=50648,50645
<50645=50646
<50646=50647
<50648=50649
<50650=50651
<50651=50653,50652
<50654=50655
<50655=50657,50656
<50658=50659
<50659=50663,50660
<50660=50662,50661
<50664=50672,50665
<50665=50666
<50666=50670,50667
<50667=50668
<50668=50669
<50670=50671
<50672=50673
<50674=50682,50675
<50675=50676
<50676=50680,50677
<50677=50678
<50678=50679
<50680=50681
<50682=50683
<50684=50692,50685
<50685=50686
<50686=50690,50687
<50687=50688
<50688=50689
<50690=50691
<50692=50693
<50749=50755,50754,50750
<50750=50751
<50751=50753,50752
<50755=50756
<50756=50757
<50757=50763,50758
<50758=50761,50759
<50759=50760
<50761=50762
<50763=50764
<50764=50766,50765
<50773=50779,50778,50774
<50774=50775
<50775=50777,50776
<50779=51422,51412,51402,51360,51272,50813,50780
<50780=50805,50796,50793,50781
<50781=50782
<50782=50783
<50783=50787,50784
<50784=50785
<50785=50786
<50787=50788
<50788=50790,50789
<50790=50792,50791
<50793=50795,50794
<50796=50797
<50797=50804,50798
<50798=50800,50799
<50800=50801
<50801=50803,50802
<50805=50806
<50806=50807
<50807=50812,50811,50808
<50808=50810,50809
<50813=51266,50950,50814
<50814=50815
<50815=50944,50816
<50816=50935,50931,50925,50919,50913,50907,50901,50895,50889,50883,50877,50871,50842,50829,50823,50817
<50817=50818
<50818=50820,50819
<50820=50822,50821
<50823=50824
<50824=50826,50825
<50826=50828,50827
<50829=50830
<50830=50836,50831
<50831=50834,50832
<50832=50833
<50834=50835
<50836=50837
<50837=50839,50838
<50839=50841,50840
<50842=50863,50854,50851,50843
<50843=50844
<50844=50846,50845
<50846=50848,50847
<50848=50850,50849
<50851=50853,50852
<50854=50855
<50855=50862,50856
<50856=50858,50857
<50858=50859
<50859=50861,50860
<50863=50864
<50864=50865
<50865=50870,50869,50866
<50866=50868,50867
<50871=50872
<50872=50874,50873
<50874=50876,50875
<50877=50878
<50878=50880,50879
<50880=50882,50881
<50883=50884
<50884=50886,50885
<50886=50888,50887
<50889=50890
<50890=50892,50891
<50892=50894,50893
<50895=50896
<50896=50898,50897
<50898=50900,50899
<50901=50902
<50902=50904,50903
<50904=50906,50905
<50907=50908
<50908=50910,50909
<50910=50912,50911
<50913=50914
<50914=50916,50915
<50916=50918,50917
<50919=50920
<50920=50922,50921
<50922=50924,50923
<50925=50926
<50926=50928,50927
<50928=50930,50929
<50931=50932
<50932=50934,50933
<50935=50936
<50936=50940,50937
<50937=50938
<50938=50939
<50940=50941
<50941=50943,50942
<50944=50945
<50945=50947,50946
<50947=50949,50948
<50950=51262,51258,51251,51244,51238,51232,51226,51220,51214,51208,51202,51173,50992,50981,50974,50968,50962,50956,50951
<50951=50952
<50952=50954,50953
<50954=50955
<50956=50957
<50957=50959,50958
<50959=50961,50960
<50962=50963
<50963=50965,50964
<50965=50967,50966
<50968=50969
<50969=50971,50970
<50971=50973,50972
<50974=50975
<50975=50979,50976
<50976=50977
<50977=50978
<50979=50980
<50981=50982
<50982=50986,50983
<50983=50984
<50984=50985
<50986=50987
<50987=50989,50988
<50989=50991,50990
<50992=51164,50993
<50993=51149,51134,51119,51104,51091,51078,51065,51052,51037,51022,51007,50994
<50994=50995
<50995=51003,50996
<50996=51001,50997
<50997=50998
<50998=51000,50999
<51001=51002
<51003=51004
<51004=51006,51005
<51007=51008
<51008=51016,51009
<51009=51014,51010
<51010=51011
<51011=51013,51012
<51014=51015
<51016=51017
<51017=51019,51018
<51019=51021,51020
<51022=51023
<51023=51031,51024
<51024=51029,51025
<51025=51026
<51026=51028,51027
<51029=51030
<51031=51032
<51032=51034,51033
<51034=51036,51035
<51037=51038
<51038=51046,51039
<51039=51044,51040
<51040=51041
<51041=51043,51042
<51044=51045
<51046=51047
<51047=51049,51048
<51049=51051,51050
<51052=51053
<51053=51059,51054
<51054=51057,51055
<51055=51056
<51057=51058
<51059=51060
<51060=51062,51061
<51062=51064,51063
<51065=51066
<51066=51072,51067
<51067=51070,51068
<51068=51069
<51070=51071
<51072=51073
<51073=51075,51074
<51075=51077,51076
<51078=51079
<51079=51085,51080
<51080=51083,51081
<51081=51082
<51083=51084
<51085=51086
<51086=51088,51087
<51088=51090,51089
<51091=51092
<51092=51100,51093
<51093=51098,51094
<51094=51095
<51095=51097,51096
<51098=51099
<51100=51101
<51101=51103,51102
<51104=51105
<51105=51113,51106
<51106=51111,51107
<51107=51108
<51108=51110,51109
<51111=51112
<51113=51114
<51114=51116,51115
<51116=51118,51117
<51119=51120
<51120=51128,51121
<51121=51126,51122
<51122=51123
<51123=51125,51124
<51126=51127
<51128=51129
<51129=51131,51130
<51131=51133,51132
<51134=51135
<51135=51143,51136
<51136=51141,51137
<51137=51138
<51138=51140,51139
<51141=51142
<51143=51144
<51144=51146,51145
<51146=51148,51147
<51149=51150
<51150=51158,51151
<51151=51156,51152
<51152=51153
<51153=51155,51154
<51156=51157
<51158=51159
<51159=51161,51160
<51161=51163,51162
<51164=51165
<51165=51167,51166
<51167=51169,51168
<51169=51170
<51170=51172,51171
<51173=51194,51185,51182,51174
<51174=51175
<51175=51177,51176
<51177=51179,51178
<51179=51181,51180
<51182=51184,51183
<51185=51186
<51186=51193,51187
<51187=51189,51188
<51189=51190
<51190=51192,51191
<51194=51195
<51195=51196
<51196=51201,51200,51197
<51197=51199,51198
<51202=51203
<51203=51205,51204
<51205=51207,51206
<51208=51209
<51209=51211,51210
<51211=51213,51212
<51214=51215
<51215=51217,51216
<51217=51219,51218
<51220=51221
<51221=51223,51222
<51223=51225,51224
<51226=51227
<51227=51229,51228
<51229=51231,51230
<51232=51233
<51233=51235,51234
<51235=51237,51236
<51238=51239
<51239=51241,51240
<51241=51243,51242
<51244=51245
<51245=51249,51246
<51246=51247
<51247=51248
<51249=51250
<51251=51252
<51252=51256,51253
<51253=51254
<51254=51255
<51256=51257
<51258=51259
<51259=51261,51260
<51262=51263
<51263=51265,51264
<51266=51267
<51267=51271,51268
<51268=51270,51269
<51272=51358,51273
<51273=51274
<51274=51352,51275
<51275=51345,51276
<51276=51296,51287,51277
<51277=51278
<51278=51279
<51279=51280
<51280=51282,51281
<51282=51284,51283
<51284=51286,51285
<51287=51288
<51288=51289
<51289=51291,51290
<51291=51293,51292
<51293=51295,51294
<51296=51297
<51297=51333,51298
<51298=51313,51299
<51299=51309,51300
<51300=51301
<51301=51302
<51302=51304,51303
<51304=51306,51305
<51306=51308,51307
<51309=51310
<51310=51312,51311
<51313=51332,51314
<51314=51326,51315
<51315=51318,51316
<51316=51317
<51318=51319
<51319=51321,51320
<51321=51323,51322
<51323=51325,51324
<51326=51327
<51327=51329,51328
<51329=51331,51330
<51333=51335,51334
<51335=51339,51336
<51336=51337
<51337=51338
<51339=51340
<51340=51342,51341
<51342=51344,51343
<51345=51346
<51346=51351,51350,51347
<51347=51349,51348
<51352=51353
<51353=51355,51354
<51355=51357,51356
<51358=51359
<51360=51394,51385,51382,51361
<51361=51362
<51362=51380,51372,51363
<51363=51364
<51364=51365
<51365=51367,51366
<51367=51369,51368
<51369=51371,51370
<51372=51373
<51373=51375,51374
<51375=51377,51376
<51377=51379,51378
<51380=51381
<51382=51384,51383
<51385=51386
<51386=51393,51387
<51387=51389,51388
<51389=51390
<51390=51392,51391
<51394=51395
<51395=51396
<51396=51401,51400,51397
<51397=51399,51398
<51402=51410,51403
<51403=51404
<51404=51408,51405
<51405=51406
<51406=51407
<51408=51409
<51410=51411
<51412=51420,51413
<51413=51414
<51414=51418,51415
<51415=51416
<51416=51417
<51418=51419
<51420=51421
<51422=51430,51423
<51423=51424
<51424=51428,51425
<51425=51426
<51426=51427
<51428=51429
<51430=51431
<51523=51529,51528,51524
<51524=51525
<51525=51527,51526
<51529=51556,51542,51530
<51530=51531
<51531=51539,51532
<51532=51534,51533
<51534=51538,51535
<51535=51537,51536
<51539=51541,51540
<51542=51543
<51543=51545,51544
<51545=51547,51546
<51547=51549,51548
<51549=51555,51550
<51550=51554,51551
<51551=51553,51552
<51556=51578,51574,51571,51557
<51557=51558
<51558=51560,51559
<51560=51562,51561
<51562=51564,51563
<51564=51570,51565
<51565=51569,51566
<51566=51568,51567
<51571=51573,51572
<51574=51575
<51575=51577,51576
<51578=51579
<51579=51580
<51580=51585,51584,51581
<51581=51583,51582
<51611=51617,51616,51612
<51612=51613
<51613=51615,51614
<51617=51988,51618
<51618=51986,51734,51619
<51619=51620
<51620=51719,51689,51660,51647,51634,51621
<51621=51622
<51622=51628,51623
<51623=51626,51624
<51624=51625
<51626=51627
<51628=51629
<51629=51631,51630
<51631=51633,51632
<51634=51635
<51635=51641,51636
<51636=51639,51637
<51637=51638
<51639=51640
<51641=51642
<51642=51644,51643
<51644=51646,51645
<51647=51648
<51648=51654,51649
<51649=51652,51650
<51650=51651
<51652=51653
<51654=51655
<51655=51657,51656
<51657=51659,51658
<51660=51681,51672,51669,51661
<51661=51662
<51662=51664,51663
<51664=51666,51665
<51666=51668,51667
<51669=51671,51670
<51672=51673
<51673=51680,51674
<51674=51676,51675
<51676=51677
<51677=51679,51678
<51681=51682
<51682=51683
<51683=51688,51687,51684
<51684=51686,51685
<51689=51711,51702,51699,51690
<51690=51691
<51691=51692
<51692=51694,51693
<51694=51696,51695
<51696=51698,51697
<51699=51701,51700
<51702=51703
<51703=51710,51704
<51704=51706,51705
<51706=51707
<51707=51709,51708
<51711=51712
<51712=51713
<51713=51718,51717,51714
<51714=51716,51715
<51719=51720
<51720=51726,51721
<51721=51724,51722
<51722=51723
<51724=51725
<51726=51727
<51727=51729,51728
<51729=51733,51730
<51730=51732,51731
<51734=51982,51952,51939,51926,51913,51884,51871,51862,51855,51776,51757,51742,51735
<51735=51736
<51736=51740,51737
<51737=51738
<51738=51739
<51740=51741
<51742=51743
<51743=51749,51744
<51744=51747,51745
<51745=51746
<51747=51748
<51749=51750
<51750=51752,51751
<51752=51756,51753
<51753=51755,51754
<51757=51774,51758
<51758=51759
<51759=51760
<51760=51770,51761
<51761=51768,51762
<51762=51763
<51763=51767,51764
<51764=51766,51765
<51768=51769
<51770=51771
<51771=51773,51772
<51774=51775
<51776=51847,51838,51835,51777
<51777=51778
<51778=51815,51779
<51779=51780
<51780=51801,51781
<51781=51795,51782
<51782=51789,51783
<51783=51784
<51784=51788,51785
<51785=51787,51786
<51789=51790
<51790=51794,51791
<51791=51793,51792
<51795=51796
<51796=51798,51797
<51798=51800,51799
<51801=51802
<51802=51814,51813,51803
<51803=51812,51804
<51804=51806,51805
<51806=51807
<51807=51809,51808
<51809=51811,51810
<51815=51816
<51816=51829,51817
<51817=51818
<51818=51819
<51819=51823,51820
<51820=51821
<51821=51822
<51823=51824
<51824=51826,51825
<51826=51828,51827
<51829=51830
<51830=51832,51831
<51832=51834,51833
<51835=51837,51836
<51838=51839
<51839=51846,51840
<51840=51842,51841
<51842=51843
<51843=51845,51844
<51847=51848
<51848=51849
<51849=51854,51853,51850
<51850=51852,51851
<51855=51856
<51856=51861,51860,51857
<51857=51859,51858
<51862=51863
<51863=51870,51869,51864
<51864=51868,51865
<51865=51867,51866
<51871=51872
<51872=51878,51873
<51873=51876,51874
<51874=51875
<51876=51877
<51878=51879
<51879=51881,51880
<51881=51883,51882
<51884=51905,51896,51893,51885
<51885=51886
<51886=51888,51887
<51888=51890,51889
<51890=51892,51891
<51893=51895,51894
<51896=51897
<51897=51904,51898
<51898=51900,51899
<51900=51901
<51901=51903,51902
<51905=51906
<51906=51907
<51907=51912,51911,51908
<51908=51910,51909
<51913=51914
<51914=51920,51915
<51915=51918,51916
<51916=51917
<51918=51919
<51920=51921
<51921=51923,51922
<51923=51925,51924
<51926=51927
<51927=51933,51928
<51928=51931,51929
<51929=51930
<51931=51932
<51933=51934
<51934=51936,51935
<51936=51938,51937
<51939=51940
<51940=51946,51941
<51941=51944,51942
<51942=51943
<51944=51945
<51946=51947
<51947=51949,51948
<51949=51951,51950
<51952=51974,51965,51962,51953
<51953=51954
<51954=51955
<51955=51957,51956
<51957=51959,51958
<51959=51961,51960
<51962=51964,51963
<51965=51966
<51966=51973,51967
<51967=51969,51968
<51969=51970
<51970=51972,51971
<51974=51975
<51975=51976
<51976=51981,51980,51977
<51977=51979,51978
<51982=51983
<51983=51985,51984
<51986=51987
<51988=51989
<51989=51994,51993,51990
<51990=51992,51991
<52041=52047,52046,52042
<52042=52043
<52043=52045,52044
<52047=52406,52400,52048
<52048=52394,52105,52049
<52049=52050
<52050=52101,52051
<52051=52097,52091,52082,52076,52070,52064,52058,52052
<52052=52053
<52053=52055,52054
<52055=52057,52056
<52058=52059
<52059=52061,52060
<52061=52063,52062
<52064=52065
<52065=52067,52066
<52067=52069,52068
<52070=52071
<52071=52073,52072
<52073=52075,52074
<52076=52077
<52077=52079,52078
<52079=52081,52080
<52082=52083
<52083=52087,52084
<52084=52085
<52085=52086
<52087=52088
<52088=52090,52089
<52091=52092
<52092=52094,52093
<52094=52096,52095
<52097=52098
<52098=52100,52099
<52101=52102
<52102=52104,52103
<52105=52383,52320,52313,52300,52296,52287,52281,52273,52259,52248,52244,52233,52229,52218,52207,52196,52185,52174,52163,52157,52151,52136,52121,52112,52106
<52106=52107
<52107=52109,52108
<52109=52111,52110
<52112=52113
<52113=52117,52114
<52114=52115
<52115=52116
<52117=52118
<52118=52120,52119
<52121=52122
<52122=52133,52123
<52123=52132,52124
<52124=52130,52125
<52125=52128,52126
<52126=52127
<52128=52129
<52130=52131
<52133=52135,52134
<52136=52137
<52137=52148,52138
<52138=52147,52139
<52139=52145,52140
<52140=52143,52141
<52141=52142
<52143=52144
<52145=52146
<52148=52150,52149
<52151=52152
<52152=52154,52153
<52154=52156,52155
<52157=52158
<52158=52160,52159
<52160=52162,52161
<52163=52164
<52164=52170,52165
<52165=52168,52166
<52166=52167
<52168=52169
<52170=52171
<52171=52173,52172
<52174=52175
<52175=52181,52176
<52176=52179,52177
<52177=52178
<52179=52180
<52181=52182
<52182=52184,52183
<52185=52186
<52186=52192,52187
<52187=52190,52188
<52188=52189
<52190=52191
<52192=52193
<52193=52195,52194
<52196=52197
<52197=52203,52198
<52198=52201,52199
<52199=52200
<52201=52202
<52203=52204
<52204=52206,52205
<52207=52208
<52208=52214,52209
<52209=52212,52210
<52210=52211
<52212=52213
<52214=52215
<52215=52217,52216
<52218=52219
<52219=52228,52227,52220
<52220=52226,52221
<52221=52225,52222
<52222=52224,52223
<52229=52230
<52230=52232,52231
<52233=52234
<52234=52243,52242,52235
<52235=52241,52236
<52236=52240,52237
<52237=52239,52238
<52244=52245
<52245=52247,52246
<52248=52249
<52249=52258,52257,52250
<52250=52256,52251
<52251=52255,52252
<52252=52254,52253
<52259=52260
<52260=52272,52271,52261
<52261=52270,52262
<52262=52264,52263
<52264=52265
<52265=52267,52266
<52267=52269,52268
<52273=52274
<52274=52278,52275
<52275=52277,52276
<52278=52280,52279
<52281=52282
<52282=52284,52283
<52284=52286,52285
<52287=52288
<52288=52292,52289
<52289=52290
<52290=52291
<52292=52293
<52293=52295,52294
<52296=52297
<52297=52299,52298
<52300=52301
<52301=52307,52302
<52302=52305,52303
<52303=52304
<52305=52306
<52307=52308
<52308=52310,52309
<52310=52312,52311
<52313=52314
<52314=52318,52315
<52315=52316
<52316=52317
<52318=52319
<52320=52352,52321
<52321=52344,52340,52337,52322
<52322=52323
<52323=52329,52324
<52324=52327,52325
<52325=52326
<52327=52328
<52329=52330
<52330=52332,52331
<52332=52334,52333
<52334=52336,52335
<52337=52339,52338
<52340=52341
<52341=52343,52342
<52344=52345
<52345=52346
<52346=52351,52350,52347
<52347=52349,52348
<52352=52375,52371,52368,52353
<52353=52354
<52354=52360,52355
<52355=52358,52356
<52356=52357
<52358=52359
<52360=52361
<52361=52363,52362
<52363=52365,52364
<52365=52367,52366
<52368=52370,52369
<52371=52372
<52372=52374,52373
<52375=52376
<52376=52377
<52377=52382,52381,52378
<52378=52380,52379
<52383=52384
<52384=52392,52385
<52385=52390,52388,52386
<52386=52387
<52388=52389
<52390=52391
<52392=52393
<52394=52395
<52395=52399,52396
<52396=52398,52397
<52400=52401
<52401=52405,52402
<52402=52404,52403
<52406=52407
<52407=52412,52411,52408
<52408=52410,52409
<52460=52472,52471,52461
<52461=52468,52465,52462
<52462=52464,52463
<52465=52467,52466
<52468=52470,52469
<52472=53232,53226,52473
<52473=53220,52726,52474
<52474=52475
<52475=52720,52476
<52476=52714,52708,52695,52689,52683,52677,52673,52483,52477
<52477=52478
<52478=52480,52479
<52480=52482,52481
<52483=52669,52484
<52484=52638,52606,52498,52485
<52485=52486
<52486=52492,52487
<52487=52490,52488
<52488=52489
<52490=52491
<52492=52493
<52493=52495,52494
<52495=52497,52496
<52498=52602,52499
<52499=52500
<52500=52596,52501
<52501=52594,52587,52574,52573,52571,52564,52551,52550,52548,52541,52528,52527,52525,52523,52516,52503,52502
<52503=52504
<52504=52508,52505
<52505=52506
<52506=52507
<52508=52509
<52509=52511,52510
<52511=52515,52512
<52512=52514,52513
<52516=52517
<52517=52521,52518
<52518=52519
<52519=52520
<52521=52522
<52523=52524
<52525=52526
<52528=52529
<52529=52533,52530
<52530=52531
<52531=52532
<52533=52534
<52534=52536,52535
<52536=52540,52537
<52537=52539,52538
<52541=52542
<52542=52546,52543
<52543=52544
<52544=52545
<52546=52547
<52548=52549
<52551=52552
<52552=52556,52553
<52553=52554
<52554=52555
<52556=52557
<52557=52559,52558
<52559=52563,52560
<52560=52562,52561
<52564=52565
<52565=52569,52566
<52566=52567
<52567=52568
<52569=52570
<52571=52572
<52574=52575
<52575=52579,52576
<52576=52577
<52577=52578
<52579=52580
<52580=52582,52581
<52582=52586,52583
<52583=52585,52584
<52587=52588
<52588=52592,52589
<52589=52590
<52590=52591
<52592=52593
<52594=52595
<52596=52597
<52597=52599,52598
<52599=52601,52600
<52602=52603
<52603=52605,52604
<52606=52630,52626,52623,52607
<52607=52608
<52608=52609
<52609=52615,52610
<52610=52613,52611
<52611=52612
<52613=52614
<52615=52616
<52616=52618,52617
<52618=52620,52619
<52620=52622,52621
<52623=52625,52624
<52626=52627
<52627=52629,52628
<52630=52631
<52631=52632
<52632=52637,52636,52633
<52633=52635,52634
<52638=52661,52657,52654,52639
<52639=52640
<52640=52646,52641
<52641=52644,52642
<52642=52643
<52644=52645
<52646=52647
<52647=52649,52648
<52649=52651,52650
<52651=52653,52652
<52654=52656,52655
<52657=52658
<52658=52660,52659
<52661=52662
<52662=52663
<52663=52668,52667,52664
<52664=52666,52665
<52669=52670
<52670=52672,52671
<52673=52674
<52674=52676,52675
<52677=52678
<52678=52680,52679
<52680=52682,52681
<52683=52684
<52684=52686,52685
<52686=52688,52687
<52689=52690
<52690=52692,52691
<52692=52694,52693
<52695=52696
<52696=52702,52697
<52697=52700,52698
<52698=52699
<52700=52701
<52702=52703
<52703=52705,52704
<52705=52707,52706
<52708=52709
<52709=52711,52710
<52711=52713,52712
<52714=52715
<52715=52717,52716
<52717=52719,52718
<52720=52721
<52721=52723,52722
<52723=52725,52724
<52726=53202,53195,53191,53176,53161,53146,53128,53113,53098,53083,53068,53053,53039,53023,53005,52939,52928,52917,52906,52895,52884,52871,52858,52827,52796,52789,52783,52770,52764,52758,52749,52743,52737,52733,52727
<52727=52728
<52728=52730,52729
<52730=52732,52731
<52733=52734
<52734=52736,52735
<52737=52738
<52738=52740,52739
<52740=52742,52741
<52743=52744
<52744=52746,52745
<52746=52748,52747
<52749=52750
<52750=52754,52751
<52751=52752
<52752=52753
<52754=52755
<52755=52757,52756
<52758=52759
<52759=52761,52760
<52761=52763,52762
<52764=52765
<52765=52767,52766
<52767=52769,52768
<52770=52771
<52771=52777,52772
<52772=52775,52773
<52773=52774
<52775=52776
<52777=52778
<52778=52780,52779
<52780=52782,52781
<52783=52784
<52784=52786,52785
<52786=52788,52787
<52789=52790
<52790=52794,52791
<52791=52792
<52792=52793
<52794=52795
<52796=52819,52815,52812,52797
<52797=52798
<52798=52804,52799
<52799=52802,52800
<52800=52801
<52802=52803
<52804=52805
<52805=52807,52806
<52807=52809,52808
<52809=52811,52810
<52812=52814,52813
<52815=52816
<52816=52818,52817
<52819=52820
<52820=52821
<52821=52826,52825,52822
<52822=52824,52823
<52827=52850,52846,52843,52828
<52828=52829
<52829=52835,52830
<52830=52833,52831
<52831=52832
<52833=52834
<52835=52836
<52836=52838,52837
<52838=52840,52839
<52840=52842,52841
<52843=52845,52844
<52846=52847
<52847=52849,52848
<52850=52851
<52851=52852
<52852=52857,52856,52853
<52853=52855,52854
<52858=52859
<52859=52865,52860
<52860=52863,52861
<52861=52862
<52863=52864
<52865=52866
<52866=52868,52867
<52868=52870,52869
<52871=52880,52872
<52872=52873
<52873=52877,52874
<52874=52876,52875
<52877=52879,52878
<52880=52881
<52881=52883,52882
<52884=52885
<52885=52891,52886
<52886=52889,52887
<52887=52888
<52889=52890
<52891=52892
<52892=52894,52893
<52895=52896
<52896=52902,52897
<52897=52900,52898
<52898=52899
<52900=52901
<52902=52903
<52903=52905,52904
<52906=52907
<52907=52913,52908
<52908=52911,52909
<52909=52910
<52911=52912
<52913=52914
<52914=52916,52915
<52917=52918
<52918=52924,52919
<52919=52922,52920
<52920=52921
<52922=52923
<52924=52925
<52925=52927,52926
<52928=52929
<52929=52935,52930
<52930=52933,52931
<52931=52932
<52933=52934
<52935=52936
<52936=52938,52937
<52939=53003,52940
<52940=52999,52987,52941
<52941=52971,52942
<52942=52957,52943
<52943=52944
<52944=52953,52945
<52945=52946
<52946=52947
<52947=52949,52948
<52949=52950
<52950=52952,52951
<52953=52954
<52954=52956,52955
<52957=52958
<52958=52967,52959
<52959=52960
<52960=52961
<52961=52963,52962
<52963=52964
<52964=52966,52965
<52967=52968
<52968=52970,52969
<52971=52972
<52972=52986,52973
<52973=52982,52974
<52974=52975
<52975=52976
<52976=52978,52977
<52978=52979
<52979=52981,52980
<52982=52983
<52983=52985,52984
<52987=52988
<52988=52998,52989
<52989=52995,52990
<52990=52994,52991
<52991=52993,52992
<52995=52997,52996
<52999=53000
<53000=53002,53001
<53003=53004
<53005=53021,53006
<53006=53007
<53007=53017,53008
<53008=53009
<53009=53010
<53010=53012,53011
<53012=53014,53013
<53014=53016,53015
<53017=53018
<53018=53020,53019
<53021=53022
<53023=53037,53024
<53024=53025
<53025=53033,53026
<53026=53027
<53027=53028
<53028=53030,53029
<53030=53032,53031
<53033=53034
<53034=53036,53035
<53037=53038
<53039=53040
<53040=53049,53041
<53041=53042
<53042=53043
<53043=53045,53044
<53045=53046
<53046=53048,53047
<53049=53050
<53050=53052,53051
<53053=53054
<53054=53064,53055
<53055=53056
<53056=53057
<53057=53059,53058
<53059=53061,53060
<53061=53063,53062
<53064=53065
<53065=53067,53066
<53068=53069
<53069=53079,53070
<53070=53071
<53071=53072
<53072=53074,53073
<53074=53076,53075
<53076=53078,53077
<53079=53080
<53080=53082,53081
<53083=53084
<53084=53094,53085
<53085=53086
<53086=53087
<53087=53089,53088
<53089=53091,53090
<53091=53093,53092
<53094=53095
<53095=53097,53096
<53098=53099
<53099=53109,53100
<53100=53101
<53101=53102
<53102=53104,53103
<53104=53106,53105
<53106=53108,53107
<53109=53110
<53110=53112,53111
<53113=53114
<53114=53124,53115
<53115=53116
<53116=53117
<53117=53119,53118
<53119=53121,53120
<53121=53123,53122
<53124=53125
<53125=53127,53126
<53128=53144,53129
<53129=53130
<53130=53140,53131
<53131=53132
<53132=53133
<53133=53135,53134
<53135=53137,53136
<53137=53139,53138
<53140=53141
<53141=53143,53142
<53144=53145
<53146=53147
<53147=53157,53148
<53148=53149
<53149=53150
<53150=53152,53151
<53152=53154,53153
<53154=53156,53155
<53157=53158
<53158=53160,53159
<53161=53162
<53162=53172,53163
<53163=53164
<53164=53165
<53165=53167,53166
<53167=53169,53168
<53169=53171,53170
<53172=53173
<53173=53175,53174
<53176=53177
<53177=53187,53178
<53178=53179
<53179=53180
<53180=53182,53181
<53182=53184,53183
<53184=53186,53185
<53187=53188
<53188=53190,53189
<53191=53192
<53192=53194,53193
<53195=53196
<53196=53200,53197
<53197=53198
<53198=53199
<53200=53201
<53202=53212,53203
<53203=53204
<53204=53205
<53205=53207,53206
<53207=53209,53208
<53209=53211,53210
<53212=53213
<53213=53217,53214
<53214=53216,53215
<53217=53219,53218
<53220=53221
<53221=53225,53222
<53222=53224,53223
<53226=53227
<53227=53231,53228
<53228=53230,53229
<53232=53233
<53233=53238,53237,53234
<53234=53236,53235
<53327=53333,53332,53328
<53328=53329
<53329=53331,53330
<53333=53334
<53334=53778,53335
<53335=53763,53748,53733,53715,53700,53685,53670,53655,53640,53625,53607,53589,53489,53485,53345,53336
<53336=53337
<53337=53339,53338
<53339=53340
<53340=53342,53341
<53342=53344,53343
<53345=53478,53466,53346
<53346=53347
<53347=53459,53437,53348
<53348=53349
<53349=53433,53350
<53350=53429,53382,53351
<53351=53375,53352
<53352=53353
<53353=53364,53354
<53354=53355
<53355=53356
<53356=53360,53357
<53357=53358
<53358=53359
<53360=53361
<53361=53363,53362
<53364=53365
<53365=53374,53366
<53366=53368,53367
<53368=53369
<53369=53371,53370
<53371=53373,53372
<53375=53376
<53376=53378,53377
<53378=53379
<53379=53381,53380
<53382=53422,53383
<53383=53411,53402,53384
<53384=53396,53385
<53385=53386
<53386=53388,53387
<53388=53389
<53389=53391,53390
<53391=53393,53392
<53393=53395,53394
<53396=53397
<53397=53399,53398
<53399=53401,53400
<53402=53403
<53403=53405,53404
<53405=53406
<53406=53408,53407
<53408=53410,53409
<53411=53412
<53412=53416,53413
<53413=53414
<53414=53415
<53416=53417
<53417=53419,53418
<53419=53421,53420
<53422=53423
<53423=53425,53424
<53425=53426
<53426=53428,53427
<53429=53430
<53430=53432,53431
<53433=53434
<53434=53436,53435
<53437=53438
<53438=53448,53439
<53439=53440
<53440=53444,53441
<53441=53442
<53442=53443
<53444=53445
<53445=53447,53446
<53448=53449
<53449=53458,53450
<53450=53452,53451
<53452=53453
<53453=53455,53454
<53455=53457,53456
<53459=53460
<53460=53462,53461
<53462=53463
<53463=53465,53464
<53466=53467
<53467=53468
<53468=53472,53469
<53469=53470
<53470=53471
<53472=53473
<53473=53475,53474
<53475=53477,53476
<53478=53479
<53479=53481,53480
<53481=53482
<53482=53484,53483
<53485=53486
<53486=53488,53487
<53489=53587,53490
<53490=53575,53491
<53491=53566,53492
<53492=53552,53538,53528,53503,53493
<53493=53494
<53494=53502,53495
<53495=53497,53496
<53497=53499,53498
<53499=53501,53500
<53503=53504
<53504=53527,53526,53505
<53505=53522,53506
<53506=53518,53507
<53507=53508
<53508=53512,53509
<53509=53511,53510
<53512=53514,53513
<53514=53515
<53515=53517,53516
<53518=53519
<53519=53521,53520
<53522=53523
<53523=53525,53524
<53528=53529
<53529=53537,53530
<53530=53532,53531
<53532=53534,53533
<53534=53536,53535
<53538=53539
<53539=53551,53550,53540
<53540=53546,53541
<53541=53544,53542
<53542=53543
<53544=53545
<53546=53547
<53547=53549,53548
<53552=53553
<53553=53565,53564,53554
<53554=53563,53555
<53555=53559,53556
<53556=53557
<53557=53558
<53559=53560
<53560=53562,53561
<53566=53567
<53567=53574,53568
<53568=53570,53569
<53570=53571
<53571=53573,53572
<53575=53576
<53576=53586,53585,53577
<53577=53584,53578
<53578=53580,53579
<53580=53581
<53581=53583,53582
<53587=53588
<53589=53605,53590
<53590=53591
<53591=53598,53592
<53592=53594,53593
<53594=53595
<53595=53597,53596
<53598=53600,53599
<53600=53602,53601
<53602=53604,53603
<53605=53606
<53607=53623,53608
<53608=53609
<53609=53616,53610
<53610=53612,53611
<53612=53613
<53613=53615,53614
<53616=53618,53617
<53618=53620,53619
<53620=53622,53621
<53623=53624
<53625=53626
<53626=53633,53627
<53627=53629,53628
<53629=53630
<53630=53632,53631
<53633=53635,53634
<53635=53637,53636
<53637=53639,53638
<53640=53641
<53641=53648,53642
<53642=53644,53643
<53644=53645
<53645=53647,53646
<53648=53650,53649
<53650=53652,53651
<53652=53654,53653
<53655=53656
<53656=53663,53657
<53657=53659,53658
<53659=53660
<53660=53662,53661
<53663=53665,53664
<53665=53667,53666
<53667=53669,53668
<53670=53671
<53671=53678,53672
<53672=53674,53673
<53674=53675
<53675=53677,53676
<53678=53680,53679
<53680=53682,53681
<53682=53684,53683
<53685=53686
<53686=53693,53687
<53687=53689,53688
<53689=53690
<53690=53692,53691
<53693=53695,53694
<53695=53697,53696
<53697=53699,53698
<53700=53701
<53701=53708,53702
<53702=53704,53703
<53704=53705
<53705=53707,53706
<53708=53710,53709
<53710=53712,53711
<53712=53714,53713
<53715=53731,53716
<53716=53717
<53717=53724,53718
<53718=53720,53719
<53720=53721
<53721=53723,53722
<53724=53726,53725
<53726=53728,53727
<53728=53730,53729
<53731=53732
<53733=53734
<53734=53741,53735
<53735=53737,53736
<53737=53738
<53738=53740,53739
<53741=53743,53742
<53743=53745,53744
<53745=53747,53746
<53748=53749
<53749=53756,53750
<53750=53752,53751
<53752=53753
<53753=53755,53754
<53756=53758,53757
<53758=53760,53759
<53760=53762,53761
<53763=53764
<53764=53771,53765
<53765=53767,53766
<53767=53768
<53768=53770,53769
<53771=53773,53772
<53773=53775,53774
<53775=53777,53776
<53778=53779
<53862=53868,53867,53863
<53863=53864
<53864=53866,53865
<53868=53869
<53869=54375,53870
<53870=54371,54362,54258,54224,54217,53871
<53871=54211,53872
<53872=54207,54194,53873
<53873=54183,53888,53874
<53874=53875
<53875=53876
<53876=53884,53877
<53877=53878
<53878=53879
<53879=53883,53880
<53880=53882,53881
<53884=53885
<53885=53887,53886
<53888=53889
<53889=54179,53890
<53890=54175,53891
<53891=54160,53894,53892
<53892=53893
<53894=54136,54119,54106,54085,54078,54044,54035,54022,54013,53996,53979,53962,53945,53934,53928,53919,53910,53899,53895
<53895=53896
<53896=53898,53897
<53899=53900
<53900=53906,53901
<53901=53904,53902
<53902=53903
<53904=53905
<53906=53907
<53907=53909,53908
<53910=53911
<53911=53915,53912
<53912=53913
<53913=53914
<53915=53916
<53916=53918,53917
<53919=53920
<53920=53924,53921
<53921=53922
<53922=53923
<53924=53925
<53925=53927,53926
<53928=53929
<53929=53931,53930
<53931=53933,53932
<53934=53935
<53935=53939,53936
<53936=53937
<53937=53938
<53939=53940
<53940=53942,53941
<53942=53944,53943
<53945=53946
<53946=53952,53947
<53947=53950,53948
<53948=53949
<53950=53951
<53952=53953
<53953=53955,53954
<53955=53957,53956
<53957=53959,53958
<53959=53961,53960
<53962=53963
<53963=53969,53964
<53964=53967,53965
<53965=53966
<53967=53968
<53969=53970
<53970=53972,53971
<53972=53974,53973
<53974=53976,53975
<53976=53978,53977
<53979=53980
<53980=53986,53981
<53981=53984,53982
<53982=53983
<53984=53985
<53986=53987
<53987=53989,53988
<53989=53991,53990
<53991=53993,53992
<53993=53995,53994
<53996=53997
<53997=54003,53998
<53998=54001,53999
<53999=54000
<54001=54002
<54003=54004
<54004=54006,54005
<54006=54008,54007
<54008=54010,54009
<54010=54012,54011
<54013=54014
<54014=54016,54015
<54016=54017
<54017=54019,54018
<54019=54021,54020
<54022=54023
<54023=54032,54024
<54024=54030,54025
<54025=54028,54026
<54026=54027
<54028=54029
<54030=54031
<54032=54034,54033
<54035=54036
<54036=54040,54037
<54037=54038
<54038=54039
<54040=54041
<54041=54043,54042
<54044=54045
<54045=54077,54076,54046
<54046=54075,54047
<54047=54074,54048
<54048=54050,54049
<54050=54072,54051
<54051=54062,54052
<54052=54053
<54053=54061,54054
<54054=54060,54055
<54055=54057,54056
<54057=54059,54058
<54062=54063
<54063=54071,54064
<54064=54070,54065
<54065=54067,54066
<54067=54069,54068
<54072=54073
<54078=54079
<54079=54084,54083,54080
<54080=54082,54081
<54085=54086
<54086=54105,54104,54087
<54087=54096,54088
<54088=54090,54089
<54090=54094,54091
<54091=54092
<54092=54093
<54094=54095
<54096=54098,54097
<54098=54102,54099
<54099=54100
<54100=54101
<54102=54103
<54106=54107
<54107=54118,54117,54108
<54108=54116,54109
<54109=54115,54110
<54110=54112,54111
<54112=54114,54113
<54119=54120
<54120=54135,54134,54121
<54121=54133,54122
<54122=54124,54123
<54124=54128,54125
<54125=54127,54126
<54128=54130,54129
<54130=54132,54131
<54136=54137
<54137=54156,54138
<54138=54139
<54139=54140
<54140=54150,54141
<54141=54144,54142
<54142=54143
<54144=54145
<54145=54147,54146
<54147=54149,54148
<54150=54151
<54151=54153,54152
<54153=54155,54154
<54156=54157
<54157=54159,54158
<54160=54161
<54161=54172,54162
<54162=54171,54163
<54163=54165,54164
<54165=54166
<54166=54168,54167
<54168=54170,54169
<54172=54174,54173
<54175=54176
<54176=54178,54177
<54179=54180
<54180=54182,54181
<54183=54184
<54184=54193,54185
<54185=54187,54186
<54187=54188
<54188=54190,54189
<54190=54192,54191
<54194=54195
<54195=54206,54205,54196
<54196=54204,54197
<54197=54199,54198
<54199=54201,54200
<54201=54203,54202
<54207=54208
<54208=54210,54209
<54211=54212
<54212=54216,54213
<54213=54215,54214
<54217=54218
<54218=54222,54219
<54219=54220
<54220=54221
<54222=54223
<54224=54256,54225
<54225=54252,54240,54226
<54226=54227
<54227=54236,54228
<54228=54229
<54229=54230
<54230=54232,54231
<54232=54233
<54233=54235,54234
<54236=54237
<54237=54239,54238
<54240=54241
<54241=54251,54242
<54242=54248,54243
<54243=54247,54244
<54244=54246,54245
<54248=54250,54249
<54252=54253
<54253=54255,54254
<54256=54257
<54258=54360,54259
<54259=54352,54260
<54260=54343,54272,54261
<54261=54262
<54262=54263
<54263=54264
<54264=54268,54265
<54265=54266
<54266=54267
<54268=54269
<54269=54271,54270
<54272=54334,54314,54310,54302,54288,54273
<54273=54280,54274
<54274=54275
<54275=54276
<54276=54278,54277
<54278=54279
<54280=54281
<54281=54285,54282
<54282=54284,54283
<54285=54287,54286
<54288=54289
<54289=54298,54290
<54290=54291
<54291=54292
<54292=54294,54293
<54294=54295
<54295=54297,54296
<54298=54299
<54299=54301,54300
<54302=54303
<54303=54309,54304
<54304=54308,54305
<54305=54307,54306
<54310=54311
<54311=54313,54312
<54314=54315
<54315=54333,54332,54316
<54316=54331,54317
<54317=54319,54318
<54319=54321,54320
<54321=54323,54322
<54323=54325,54324
<54325=54326
<54326=54328,54327
<54328=54330,54329
<54334=54335
<54335=54342,54341,54336
<54336=54340,54337
<54337=54339,54338
<54343=54344
<54344=54346,54345
<54346=54347
<54347=54349,54348
<54349=54351,54350
<54352=54354,54353
<54354=54355
<54355=54357,54356
<54357=54359,54358
<54360=54361
<54362=54367,54363
<54363=54364
<54364=54366,54365
<54367=54368
<54368=54370,54369
<54371=54372
<54372=54374,54373
<54375=54376
<54376=54378,54377
<54378=54379
<54443=54449,54448,54444
<54444=54445
<54445=54447,54446
<54449=55051,54846,54535,54450
<54450=54533,54463,54451
<54451=54452
<54452=54453
<54453=54454
<54454=54456,54455
<54456=54458,54457
<54458=54460,54459
<54460=54462,54461
<54463=54464
<54464=54531,54465
<54465=54515,54508,54488,54480,54476,54466
<54466=54467
<54467=54469,54468
<54469=54471,54470
<54471=54473,54472
<54473=54475,54474
<54476=54477
<54477=54479,54478
<54480=54481
<54481=54487,54482
<54482=54486,54483
<54483=54485,54484
<54488=54489
<54489=54506,54490
<54490=54495,54493,54491
<54491=54492
<54493=54494
<54495=54496
<54496=54504,54497
<54497=54502,54500,54498
<54498=54499
<54500=54501
<54502=54503
<54504=54505
<54506=54507
<54508=54509
<54509=54514,54513,54510
<54510=54512,54511
<54515=54516
<54516=54530,54529,54517
<54517=54528,54518
<54518=54522,54519
<54519=54521,54520
<54522=54524,54523
<54524=54525
<54525=54527,54526
<54531=54532
<54533=54534
<54535=54802,54763,54536
<54536=54537
<54537=54761,54538
<54538=54675,54663,54539
<54539=54659,54649,54540
<54540=54541
<54541=54642,54632,54542
<54542=54543
<54543=54601,54591,54544
<54544=54545
<54545=54575,54561,54546
<54546=54547
<54547=54552,54548
<54548=54549
<54549=54551,54550
<54552=54553
<54553=54557,54554
<54554=54555
<54555=54556
<54557=54558
<54558=54560,54559
<54561=54566,54562
<54562=54563
<54563=54565,54564
<54566=54567
<54567=54571,54568
<54568=54569
<54569=54570
<54571=54572
<54572=54574,54573
<54575=54576
<54576=54590,54577
<54577=54586,54578
<54578=54579
<54579=54580
<54580=54582,54581
<54582=54583
<54583=54585,54584
<54586=54587
<54587=54589,54588
<54591=54592
<54592=54593
<54593=54597,54594
<54594=54595
<54595=54596
<54597=54598
<54598=54600,54599
<54601=54602
<54602=54624,54603
<54603=54611,54604
<54604=54608,54605
<54605=54607,54606
<54608=54610,54609
<54611=54620,54612
<54612=54613
<54613=54614
<54614=54616,54615
<54616=54617
<54617=54619,54618
<54620=54621
<54621=54623,54622
<54624=54626,54625
<54626=54627
<54627=54629,54628
<54629=54631,54630
<54632=54633
<54633=54634
<54634=54638,54635
<54635=54636
<54636=54637
<54638=54639
<54639=54641,54640
<54642=54643
<54643=54645,54644
<54645=54646
<54646=54648,54647
<54649=54650
<54650=54651
<54651=54655,54652
<54652=54653
<54653=54654
<54655=54656
<54656=54658,54657
<54659=54660
<54660=54662,54661
<54663=54664
<54664=54674,54673,54665
<54665=54672,54666
<54666=54668,54667
<54668=54669
<54669=54671,54670
<54675=54755,54712,54676
<54676=54677
<54677=54701,54686,54678
<54678=54679
<54679=54681,54680
<54681=54683,54682
<54683=54685,54684
<54686=54687
<54687=54696,54688
<54688=54694,54689
<54689=54692,54690
<54690=54691
<54692=54693
<54694=54695
<54696=54698,54697
<54698=54700,54699
<54701=54702
<54702=54704,54703
<54704=54705
<54705=54707,54706
<54707=54709,54708
<54709=54711,54710
<54712=54747,54726,54713
<54713=54715,54714
<54715=54716
<54716=54725,54717
<54717=54719,54718
<54719=54720
<54720=54722,54721
<54722=54724,54723
<54726=54738,54727
<54727=54728
<54728=54734,54729
<54729=54730
<54730=54731
<54731=54733,54732
<54734=54735
<54735=54737,54736
<54738=54739
<54739=54746,54740
<54740=54742,54741
<54742=54743
<54743=54745,54744
<54747=54748
<54748=54750,54749
<54750=54752,54751
<54752=54754,54753
<54755=54756
<54756=54758,54757
<54758=54760,54759
<54761=54762
<54763=54793,54764
<54764=54773,54765
<54765=54766
<54766=54768,54767
<54768=54770,54769
<54770=54772,54771
<54773=54774
<54774=54788,54775
<54775=54784,54776
<54776=54778,54777
<54778=54779
<54779=54781,54780
<54781=54783,54782
<54784=54786,54785
<54786=54787
<54788=54790,54789
<54790=54792,54791
<54793=54794
<54794=54798,54795
<54795=54796
<54796=54797
<54798=54799
<54799=54801,54800
<54802=54803
<54803=54842,54804
<54804=54834,54805
<54805=54822,54806
<54806=54817,54807
<54807=54809,54808
<54809=54810
<54810=54812,54811
<54812=54814,54813
<54814=54816,54815
<54817=54819,54818
<54819=54821,54820
<54822=54831,54823
<54823=54830,54824
<54824=54826,54825
<54826=54827
<54827=54829,54828
<54831=54833,54832
<54834=54836,54835
<54836=54837
<54837=54839,54838
<54839=54841,54840
<54842=54844,54843
<54844=54845
<54846=55045,55018,54847
<54847=54848
<54848=55012,54849
<54849=54850
<54850=54979,54879,54851
<54851=54852
<54852=54868,54853
<54853=54854
<54854=54863,54855
<54855=54861,54856
<54856=54859,54857
<54857=54858
<54859=54860
<54861=54862
<54863=54865,54864
<54865=54867,54866
<54868=54869
<54869=54871,54870
<54871=54872
<54872=54874,54873
<54874=54876,54875
<54876=54878,54877
<54879=54970,54942,54880
<54880=54929,54881
<54881=54914,54882
<54882=54883
<54883=54906,54884
<54884=54895,54893,54889,54887,54885
<54885=54886
<54887=54888
<54889=54890
<54890=54892,54891
<54893=54894
<54895=54896
<54896=54904,54897
<54897=54902,54898
<54898=54899
<54899=54901,54900
<54902=54903
<54904=54905
<54906=54907
<54907=54909,54908
<54909=54911,54910
<54911=54913,54912
<54914=54915
<54915=54924,54916
<54916=54922,54917
<54917=54920,54918
<54918=54919
<54920=54921
<54922=54923
<54924=54926,54925
<54926=54928,54927
<54929=54930
<54930=54941,54931
<54931=54933,54932
<54933=54934
<54934=54936,54935
<54936=54938,54937
<54938=54940,54939
<54942=54948,54943
<54943=54944
<54944=54945
<54945=54947,54946
<54948=54949
<54949=54962,54950
<54950=54961,54951
<54951=54953,54952
<54953=54954
<54954=54956,54955
<54956=54958,54957
<54958=54960,54959
<54962=54964,54963
<54964=54965
<54965=54967,54966
<54967=54969,54968
<54970=54971
<54971=54978,54977,54972
<54972=54976,54973
<54973=54975,54974
<54979=54980
<54980=55002,54981
<54981=54994,54982
<54982=54993,54983
<54983=54985,54984
<54985=54986
<54986=54988,54987
<54988=54990,54989
<54990=54992,54991
<54994=54996,54995
<54996=54997
<54997=54999,54998
<54999=55001,55000
<55002=55011,55003
<55003=55005,55004
<55005=55006
<55006=55008,55007
<55008=55010,55009
<55012=55013
<55013=55015,55014
<55015=55017,55016
<55018=55034,55019
<55019=55020
<55020=55029,55021
<55021=55027,55022
<55022=55025,55023
<55023=55024
<55025=55026
<55027=55028
<55029=55031,55030
<55031=55033,55032
<55034=55035
<55035=55037,55036
<55037=55038
<55038=55040,55039
<55040=55042,55041
<55042=55044,55043
<55045=55046
<55046=55048,55047
<55048=55050,55049
<55051=55052
<55052=55057,55056,55053
<55053=55055,55054
<55117=55120,55119,55118
<55120=55335,55121
<55121=55333,55122
<55122=55317,55301,55267,55235,55210,55199,55161,55123
<55123=55141,55124
<55124=55129,55125
<55125=55126
<55126=55128,55127
<55129=55130
<55130=55136,55131
<55131=55133,55132
<55133=55135,55134
<55136=55138,55137
<55138=55140,55139
<55141=55142
<55142=55154,55143
<55143=55147,55144
<55144=55146,55145
<55147=55149,55148
<55149=55151,55150
<55151=55153,55152
<55154=55158,55155
<55155=55157,55156
<55158=55160,55159
<55161=55179,55162
<55162=55167,55163
<55163=55164
<55164=55166,55165
<55167=55168
<55168=55174,55169
<55169=55171,55170
<55171=55173,55172
<55174=55176,55175
<55176=55178,55177
<55179=55180
<55180=55192,55181
<55181=55185,55182
<55182=55184,55183
<55185=55187,55186
<55187=55189,55188
<55189=55191,55190
<55192=55196,55193
<55193=55195,55194
<55196=55198,55197
<55199=55200
<55200=55209,55208,55201
<55201=55207,55202
<55202=55206,55203
<55203=55205,55204
<55210=55211
<55211=55234,55233,55212
<55212=55232,55213
<55213=55217,55214
<55214=55216,55215
<55217=55226,55218
<55218=55220,55219
<55220=55222,55221
<55222=55223
<55223=55225,55224
<55226=55228,55227
<55228=55229
<55229=55231,55230
<55235=55255,55236
<55236=55241,55237
<55237=55238
<55238=55240,55239
<55241=55242
<55242=55250,55243
<55243=55245,55244
<55245=55247,55246
<55247=55249,55248
<55250=55252,55251
<55252=55254,55253
<55255=55256
<55256=55262,55257
<55257=55259,55258
<55259=55261,55260
<55262=55264,55263
<55264=55266,55265
<55267=55287,55268
<55268=55273,55269
<55269=55270
<55270=55272,55271
<55273=55274
<55274=55282,55275
<55275=55277,55276
<55277=55279,55278
<55279=55281,55280
<55282=55284,55283
<55284=55286,55285
<55287=55288
<55288=55294,55289
<55289=55291,55290
<55291=55293,55292
<55294=55296,55295
<55296=55298,55297
<55298=55300,55299
<55301=55302
<55302=55316,55315,55303
<55303=55314,55304
<55304=55308,55305
<55305=55307,55306
<55308=55310,55309
<55310=55311
<55311=55313,55312
<55317=55318
<55318=55332,55331,55319
<55319=55330,55320
<55320=55324,55321
<55321=55323,55322
<55324=55326,55325
<55326=55327
<55327=55329,55328
<55333=55334
<55335=55336
<55336=55338,55337
<55366=55369,55368,55367
<55369=55511,55504,55503,55502,55501,55500,55407,55372,55370
<55370=55371
<55372=55405,55397,55373
<55373=55374
<55374=55393,55387,55375
<55375=55376
<55376=55385,55377
<55377=55378
<55378=55379
<55379=55381,55380
<55381=55382
<55382=55384,55383
<55385=55386
<55387=55388
<55388=55392,55389
<55389=55391,55390
<55393=55394
<55394=55396,55395
<55397=55398
<55398=55399
<55399=55403,55400
<55400=55401
<55401=55402
<55403=55404
<55405=55406
<55407=55491,55490,55489,55488,55487,55408
<55408=55478,55409
<55409=55474,55410
<55410=55411
<55411=55460,55412
<55412=55456,55433,55421,55417,55413
<55413=55414
<55414=55416,55415
<55417=55418
<55418=55420,55419
<55421=55422
<55422=55431,55423
<55423=55424
<55424=55425
<55425=55427,55426
<55427=55428
<55428=55430,55429
<55431=55432
<55433=55434
<55434=55455,55435
<55435=55454,55436
<55436=55448,55437
<55437=55447,55438
<55438=55444,55439
<55439=55443,55440
<55440=55442,55441
<55444=55446,55445
<55448=55450,55449
<55450=55451
<55451=55453,55452
<55456=55457
<55457=55459,55458
<55460=55461
<55461=55468,55462
<55462=55464,55463
<55464=55465
<55465=55467,55466
<55468=55470,55469
<55470=55471
<55471=55473,55472
<55474=55475
<55475=55477,55476
<55478=55479
<55479=55486,55485,55480
<55480=55484,55481
<55481=55483,55482
<55491=55492
<55492=55499,55498,55493
<55493=55497,55494
<55494=55496,55495
<55504=55505
<55505=55510,55509,55506
<55506=55508,55507
<55511=55512
<55512=55517,55516,55513
<55513=55515,55514
<55537=55540,55539,55538
<55540=55541
<55541=55542
<55542=55544,55543
<55544=55546,55545
<55546=55548,55547
<55556=55565,55564,55557
<55557=55561,55558
<55558=55560,55559
<55561=55563,55562
<55565=55747,55740,55733,55722,55715,55568,55566
<55566=55567
<55568=55709,55569
<55569=55705,55686,55677,55658,55646,55634,55630,55574,55570
<55570=55571
<55571=55573,55572
<55574=55626,55622,55619,55575
<55575=55610,55601,55576
<55576=55579,55577
<55577=55578
<55579=55580
<55580=55591,55581
<55581=55585,55582
<55582=55583
<55583=55584
<55585=55586
<55586=55588,55587
<55588=55590,55589
<55591=55595,55592
<55592=55593
<55593=55594
<55595=55596
<55596=55598,55597
<55598=55600,55599
<55601=55602
<55602=55609,55608,55603
<55603=55607,55604
<55604=55606,55605
<55610=55611
<55611=55618,55617,55612
<55612=55616,55613
<55613=55615,55614
<55619=55621,55620
<55622=55623
<55623=55625,55624
<55626=55627
<55627=55629,55628
<55630=55631
<55631=55633,55632
<55634=55635
<55635=55645,55644,55636
<55636=55643,55637
<55637=55639,55638
<55639=55640
<55640=55642,55641
<55646=55647
<55647=55657,55656,55648
<55648=55655,55649
<55649=55651,55650
<55651=55652
<55652=55654,55653
<55658=55661,55659
<55659=55660
<55661=55662
<55662=55671,55663
<55663=55669,55664
<55664=55665
<55665=55666
<55666=55668,55667
<55669=55670
<55671=55673,55672
<55673=55674
<55674=55676,55675
<55677=55678
<55678=55685,55684,55679
<55679=55683,55680
<55680=55682,55681
<55686=55689,55687
<55687=55688
<55689=55690
<55690=55699,55691
<55691=55692
<55692=55693
<55693=55697,55694
<55694=55695
<55695=55696
<55697=55698
<55699=55700
<55700=55702,55701
<55702=55704,55703
<55705=55706
<55706=55708,55707
<55709=55710
<55710=55714,55711
<55711=55713,55712
<55715=55716
<55716=55721,55720,55717
<55717=55719,55718
<55722=55723
<55723=55729,55724
<55724=55725
<55725=55726
<55726=55728,55727
<55729=55730
<55730=55732,55731
<55733=55734
<55734=55739,55738,55735
<55735=55737,55736
<55740=55741
<55741=55746,55745,55742
<55742=55744,55743
<55747=55748
<55748=55753,55752,55749
<55749=55751,55750
<55784=55787,55786,55785
<55787=56036,56016,55827,55788
<55788=55813,55801,55789
<55789=55790
<55790=55791
<55791=55795,55792
<55792=55793
<55793=55794
<55795=55796
<55796=55798,55797
<55798=55800,55799
<55801=55802
<55802=55803
<55803=55807,55804
<55804=55805
<55805=55806
<55807=55808
<55808=55810,55809
<55810=55812,55811
<55813=55814
<55814=55823,55815
<55815=55816
<55816=55817
<55817=55819,55818
<55819=55820
<55820=55822,55821
<55823=55824
<55824=55826,55825
<55827=55988,55871,55828
<55828=55829
<55829=55830
<55830=55863,55831
<55831=55844,55836,55832
<55832=55833
<55833=55835,55834
<55836=55837
<55837=55839,55838
<55839=55841,55840
<55841=55843,55842
<55844=55845
<55845=55857,55846
<55846=55851,55849,55847
<55847=55848
<55849=55850
<55851=55852
<55852=55854,55853
<55854=55856,55855
<55857=55858
<55858=55860,55859
<55860=55862,55861
<55863=55864
<55864=55866,55865
<55866=55868,55867
<55868=55870,55869
<55871=55872
<55872=55982,55873
<55873=55941,55937,55929,55923,55917,55911,55903,55897,55880,55874
<55874=55875
<55875=55879,55876
<55876=55878,55877
<55880=55881
<55881=55892,55882
<55882=55886,55883
<55883=55884
<55884=55885
<55886=55887
<55887=55889,55888
<55889=55891,55890
<55892=55894,55893
<55894=55896,55895
<55897=55898
<55898=55900,55899
<55900=55902,55901
<55903=55904
<55904=55908,55905
<55905=55907,55906
<55908=55910,55909
<55911=55912
<55912=55914,55913
<55914=55916,55915
<55917=55918
<55918=55920,55919
<55920=55922,55921
<55923=55924
<55924=55926,55925
<55926=55928,55927
<55929=55930
<55930=55934,55931
<55931=55933,55932
<55934=55936,55935
<55937=55938
<55938=55940,55939
<55941=55974,55942
<55942=55955,55947,55943
<55943=55944
<55944=55946,55945
<55947=55948
<55948=55950,55949
<55950=55952,55951
<55952=55954,55953
<55955=55956
<55956=55968,55957
<55957=55962,55960,55958
<55958=55959
<55960=55961
<55962=55963
<55963=55965,55964
<55965=55967,55966
<55968=55969
<55969=55971,55970
<55971=55973,55972
<55974=55975
<55975=55977,55976
<55977=55979,55978
<55979=55981,55980
<55982=55983
<55983=55987,55984
<55984=55986,55985
<55988=55989
<55989=56015,55990
<55990=56001,55991
<55991=56000,55992
<55992=55994,55993
<55994=55995
<55995=55997,55996
<55997=55999,55998
<56001=56011,56002
<56002=56003
<56003=56004
<56004=56006,56005
<56006=56008,56007
<56008=56010,56009
<56011=56012
<56012=56014,56013
<56016=56017
<56017=56035,56034,56018
<56018=56033,56019
<56019=56031,56020
<56020=56023,56021
<56021=56022
<56023=56024
<56024=56026,56025
<56026=56028,56027
<56028=56030,56029
<56031=56032
<56036=56038,56037
<56038=56039
<56039=56041,56040
<56092=56095,56094,56093
<56095=56154,56116,56096
<56096=56097
<56097=56110,56098
<56098=56101,56099
<56099=56100
<56101=56102
<56102=56108,56103
<56103=56106,56104
<56104=56105
<56106=56107
<56108=56109
<56110=56111
<56111=56113,56112
<56113=56115,56114
<56116=56136,56117
<56117=56118
<56118=56119
<56119=56135,56120
<56120=56127,56121
<56121=56123,56122
<56123=56124
<56124=56126,56125
<56127=56134,56128
<56128=56130,56129
<56130=56131
<56131=56133,56132
<56136=56137
<56137=56153,56138
<56138=56145,56139
<56139=56141,56140
<56141=56142
<56142=56144,56143
<56145=56152,56146
<56146=56148,56147
<56148=56149
<56149=56151,56150
<56154=56155
<56155=56166,56165,56156
<56156=56164,56157
<56157=56159,56158
<56159=56161,56160
<56161=56163,56162
<56182=56185,56184,56183
<56185=56216,56206,56186
<56186=56187
<56187=56200,56188
<56188=56191,56189
<56189=56190
<56191=56192
<56192=56198,56193
<56193=56196,56194
<56194=56195
<56196=56197
<56198=56199
<56200=56201
<56201=56203,56202
<56203=56205,56204
<56206=56212,56207
<56207=56208
<56208=56209
<56209=56211,56210
<56212=56213
<56213=56215,56214
<56216=56217
<56217=56228,56227,56218
<56218=56226,56219
<56219=56221,56220
<56221=56223,56222
<56223=56225,56224
<56240=56246,56245,56241
<56241=56242
<56242=56244,56243
<56246=57685,57554,57541,57526,57502,57483,57326,57321,57296,57285,57278,57240,57233,57195,57194,57193,57192,57191,57179,57174,57167,57160,57155,57146,57137,57128,57116,57103,57090,57083,57073,57063,57052,57015,56950,56921,56482,56464,56420,56247
<56247=56413,56248
<56248=56396,56258,56249
<56249=56250
<56250=56254,56251
<56251=56252
<56252=56253
<56254=56255
<56255=56257,56256
<56258=56394,56259
<56259=56385,56331,56319,56310,56303,56292,56281,56276,56260
<56260=56261
<56261=56275,56274,56262
<56262=56273,56263
<56263=56265,56264
<56265=56266
<56266=56268,56267
<56268=56270,56269
<56270=56272,56271
<56276=56277
<56277=56279,56278
<56279=56280
<56281=56282
<56282=56289,56283
<56283=56287,56284
<56284=56285
<56285=56286
<56287=56288
<56289=56291,56290
<56292=56293
<56293=56299,56294
<56294=56297,56295
<56295=56296
<56297=56298
<56299=56300
<56300=56302,56301
<56303=56304
<56304=56306,56305
<56306=56307
<56307=56309,56308
<56310=56311
<56311=56318,56317,56312
<56312=56316,56313
<56313=56315,56314
<56319=56327,56320
<56320=56321
<56321=56322
<56322=56326,56323
<56323=56325,56324
<56327=56328
<56328=56330,56329
<56331=56383,56332
<56332=56333
<56333=56368,56342,56334
<56334=56335
<56335=56336
<56336=56337
<56337=56339,56338
<56339=56341,56340
<56342=56356,56347,56343
<56343=56344
<56344=56346,56345
<56347=56348
<56348=56352,56349
<56349=56350
<56350=56351
<56352=56353
<56353=56355,56354
<56356=56357
<56357=56367,56366,56358
<56358=56365,56359
<56359=56361,56360
<56361=56362
<56362=56364,56363
<56368=56369
<56369=56380,56370
<56370=56379,56371
<56371=56373,56372
<56373=56374
<56374=56376,56375
<56376=56378,56377
<56380=56382,56381
<56383=56384
<56385=56386
<56386=56393,56392,56387
<56387=56391,56388
<56388=56390,56389
<56394=56395
<56396=56406,56397
<56397=56398
<56398=56402,56399
<56399=56400
<56400=56401
<56402=56403
<56403=56405,56404
<56406=56407
<56407=56412,56408
<56408=56410,56409
<56410=56411
<56413=56414
<56414=56419,56415
<56415=56417,56416
<56417=56418
<56420=56452,56421
<56421=56437,56422
<56422=56423
<56423=56429,56424
<56424=56427,56425
<56425=56426
<56427=56428
<56429=56430
<56430=56432,56431
<56432=56434,56433
<56434=56436,56435
<56437=56438
<56438=56444,56439
<56439=56442,56440
<56440=56441
<56442=56443
<56444=56445
<56445=56447,56446
<56447=56449,56448
<56449=56451,56450
<56452=56453
<56453=56459,56454
<56454=56458,56455
<56455=56457,56456
<56459=56463,56460
<56460=56462,56461
<56464=56478,56465
<56465=56472,56466
<56466=56467
<56467=56469,56468
<56469=56471,56470
<56472=56473
<56473=56475,56474
<56475=56477,56476
<56478=56479
<56479=56481,56480
<56482=56892,56483
<56483=56881,56874,56867,56850,56844,56666,56660,56484
<56484=56645,56485
<56485=56629,56486
<56486=56623,56487
<56487=56602,56488
<56488=56571,56489
<56489=56490
<56490=56565,56550,56535,56491
<56491=56531,56492
<56492=56516,56493
<56493=56494
<56494=56508,56495
<56495=56506,56504,56502,56498,56496
<56496=56497
<56498=56499
<56499=56501,56500
<56502=56503
<56504=56505
<56506=56507
<56508=56509
<56509=56511,56510
<56511=56513,56512
<56513=56515,56514
<56516=56517
<56517=56526,56518
<56518=56524,56519
<56519=56522,56520
<56520=56521
<56522=56523
<56524=56525
<56526=56528,56527
<56528=56530,56529
<56531=56532
<56532=56534,56533
<56535=56536
<56536=56542,56537
<56537=56540,56538
<56538=56539
<56540=56541
<56542=56543
<56543=56545,56544
<56545=56547,56546
<56547=56549,56548
<56550=56551
<56551=56557,56552
<56552=56555,56553
<56553=56554
<56555=56556
<56557=56558
<56558=56560,56559
<56560=56562,56561
<56562=56564,56563
<56565=56566
<56566=56568,56567
<56568=56570,56569
<56571=56572
<56572=56588,56573
<56573=56582,56574
<56574=56580,56575
<56575=56576
<56576=56577
<56577=56579,56578
<56580=56581
<56582=56584,56583
<56584=56585
<56585=56587,56586
<56588=56598,56589
<56589=56590
<56590=56591
<56591=56593,56592
<56593=56595,56594
<56595=56597,56596
<56598=56599
<56599=56601,56600
<56602=56603
<56603=56622,56621,56604
<56604=56620,56605
<56605=56613,56606
<56606=56608,56607
<56608=56610,56609
<56610=56612,56611
<56613=56615,56614
<56615=56617,56616
<56617=56619,56618
<56623=56624
<56624=56628,56625
<56625=56627,56626
<56629=56630
<56630=56644,56643,56631
<56631=56642,56632
<56632=56636,56633
<56633=56634
<56634=56635
<56636=56637
<56637=56639,56638
<56639=56641,56640
<56645=56646
<56646=56657,56647
<56647=56649,56648
<56649=56650
<56650=56652,56651
<56652=56654,56653
<56654=56656,56655
<56657=56659,56658
<56660=56661
<56661=56663,56662
<56663=56665,56664
<56666=56837,56667
<56667=56836,56835,56834,56833,56668
<56668=56824,56803,56669
<56669=56753,56670
<56670=56672,56671
<56672=56747,56732,56717,56673
<56673=56713,56674
<56674=56698,56675
<56675=56676
<56676=56690,56677
<56677=56688,56686,56684,56680,56678
<56678=56679
<56680=56681
<56681=56683,56682
<56684=56685
<56686=56687
<56688=56689
<56690=56691
<56691=56693,56692
<56693=56695,56694
<56695=56697,56696
<56698=56699
<56699=56708,56700
<56700=56706,56701
<56701=56704,56702
<56702=56703
<56704=56705
<56706=56707
<56708=56710,56709
<56710=56712,56711
<56713=56714
<56714=56716,56715
<56717=56718
<56718=56724,56719
<56719=56722,56720
<56720=56721
<56722=56723
<56724=56725
<56725=56727,56726
<56727=56729,56728
<56729=56731,56730
<56732=56733
<56733=56739,56734
<56734=56737,56735
<56735=56736
<56737=56738
<56739=56740
<56740=56742,56741
<56742=56744,56743
<56744=56746,56745
<56747=56748
<56748=56750,56749
<56750=56752,56751
<56753=56754
<56754=56793,56755
<56755=56772,56756
<56756=56767,56757
<56757=56766,56758
<56758=56760,56759
<56760=56761
<56761=56763,56762
<56763=56765,56764
<56767=56769,56768
<56769=56771,56770
<56772=56781,56773
<56773=56779,56774
<56774=56775
<56775=56776
<56776=56778,56777
<56779=56780
<56781=56783,56782
<56783=56784
<56784=56786,56785
<56786=56790,56787
<56787=56789,56788
<56790=56792,56791
<56793=56802,56794
<56794=56800,56795
<56795=56796
<56796=56797
<56797=56799,56798
<56800=56801
<56803=56804
<56804=56823,56822,56805
<56805=56821,56806
<56806=56808,56807
<56808=56809
<56809=56811,56810
<56811=56815,56812
<56812=56814,56813
<56815=56817,56816
<56817=56818
<56818=56820,56819
<56824=56825
<56825=56832,56831,56826
<56826=56830,56827
<56827=56829,56828
<56837=56838
<56838=56840,56839
<56840=56841
<56841=56843,56842
<56844=56845
<56845=56847,56846
<56847=56849,56848
<56850=56851
<56851=56866,56865,56852
<56852=56864,56853
<56853=56859,56854
<56854=56856,56855
<56856=56858,56857
<56859=56861,56860
<56861=56863,56862
<56867=56868
<56868=56873,56872,56869
<56869=56871,56870
<56874=56875
<56875=56880,56879,56876
<56876=56878,56877
<56881=56882
<56882=56886,56883
<56883=56884
<56884=56885
<56886=56887
<56887=56889,56888
<56889=56891,56890
<56892=56893
<56893=56920,56894
<56894=56912,56895
<56895=56906,56896
<56896=56898,56897
<56898=56905,56899
<56899=56901,56900
<56901=56902
<56902=56904,56903
<56906=56911,56907
<56907=56909,56908
<56909=56910
<56912=56914,56913
<56914=56916,56915
<56916=56917
<56917=56919,56918
<56921=56935,56922
<56922=56929,56923
<56923=56924
<56924=56926,56925
<56926=56928,56927
<56929=56930
<56930=56932,56931
<56932=56934,56933
<56935=56936
<56936=56949,56937
<56937=56943,56938
<56938=56940,56939
<56940=56942,56941
<56943=56945,56944
<56945=56946
<56946=56948,56947
<56950=56984,56951
<56951=56977,56952
<56952=56973,56953
<56953=56969,56954
<56954=56965,56955
<56955=56956
<56956=56957
<56957=56961,56958
<56958=56959
<56959=56960
<56961=56962
<56962=56964,56963
<56965=56966
<56966=56968,56967
<56969=56970
<56970=56972,56971
<56973=56974
<56974=56976,56975
<56977=56978
<56978=56980,56979
<56980=56981
<56981=56983,56982
<56984=56985
<56985=57014,56986
<56986=57002,56987
<56987=56994,56988
<56988=56993,56989
<56989=56991,56990
<56991=56992
<56994=56996,56995
<56996=56998,56997
<56998=56999
<56999=57001,57000
<57002=57008,57003
<57003=57005,57004
<57005=57007,57006
<57008=57010,57009
<57010=57011
<57011=57013,57012
<57015=57045,57016
<57016=57041,57032,57026,57017
<57017=57022,57018
<57018=57019
<57019=57021,57020
<57022=57023
<57023=57025,57024
<57026=57027
<57027=57031,57028
<57028=57030,57029
<57032=57037,57033
<57033=57034
<57034=57036,57035
<57037=57038
<57038=57040,57039
<57041=57042
<57042=57044,57043
<57045=57046
<57046=57051,57047
<57047=57049,57048
<57049=57050
<57052=57053
<57053=57057,57054
<57054=57055
<57055=57056
<57057=57058
<57058=57060,57059
<57060=57062,57061
<57063=57064
<57064=57065
<57065=57069,57066
<57066=57067
<57067=57068
<57069=57070
<57070=57072,57071
<57073=57075,57074
<57075=57076
<57076=57082,57077
<57077=57081,57078
<57078=57080,57079
<57083=57084
<57084=57088,57085
<57085=57086
<57086=57087
<57088=57089
<57090=57101,57091
<57091=57092
<57092=57093
<57093=57099,57094
<57094=57097,57095
<57095=57096
<57097=57098
<57099=57100
<57101=57102
<57103=57114,57104
<57104=57105
<57105=57106
<57106=57112,57107
<57107=57110,57108
<57108=57109
<57110=57111
<57112=57113
<57114=57115
<57116=57117
<57117=57123,57118
<57118=57122,57119
<57119=57121,57120
<57123=57125,57124
<57125=57127,57126
<57128=57129
<57129=57133,57130
<57130=57131
<57131=57132
<57133=57134
<57134=57136,57135
<57137=57138
<57138=57142,57139
<57139=57140
<57140=57141
<57142=57143
<57143=57145,57144
<57146=57147
<57147=57151,57148
<57148=57149
<57149=57150
<57151=57152
<57152=57154,57153
<57155=57156
<57156=57158,57157
<57158=57159
<57160=57161
<57161=57165,57162
<57162=57163
<57163=57164
<57165=57166
<57167=57168
<57168=57172,57169
<57169=57170
<57170=57171
<57172=57173
<57174=57175
<57175=57177,57176
<57177=57178
<57179=57180
<57180=57181
<57181=57185,57182
<57182=57183
<57183=57184
<57185=57186
<57186=57188,57187
<57188=57190,57189
<57195=57229,57218,57215,57196
<57196=57197
<57197=57198
<57198=57202,57199
<57199=57200
<57200=57201
<57202=57203
<57203=57205,57204
<57205=57209,57206
<57206=57207
<57207=57208
<57209=57210
<57210=57212,57211
<57212=57214,57213
<57215=57217,57216
<57218=57219
<57219=57228,57220
<57220=57222,57221
<57222=57223
<57223=57225,57224
<57225=57227,57226
<57229=57230
<57230=57232,57231
<57233=57234
<57234=57239,57238,57235
<57235=57237,57236
<57240=57265,57256,57253,57241
<57241=57242
<57242=57243
<57243=57247,57244
<57244=57245
<57245=57246
<57247=57248
<57248=57250,57249
<57250=57252,57251
<57253=57255,57254
<57256=57257
<57257=57264,57258
<57258=57260,57259
<57260=57261
<57261=57263,57262
<57265=57266
<57266=57267
<57267=57277,57276,57268
<57268=57275,57269
<57269=57271,57270
<57271=57272
<57272=57274,57273
<57278=57279
<57279=57283,57280
<57280=57281
<57281=57282
<57283=57284
<57285=57286
<57286=57290,57287
<57287=57288
<57288=57289
<57290=57291
<57291=57293,57292
<57293=57295,57294
<57296=57317,57297
<57297=57313,57298
<57298=57309,57299
<57299=57305,57300
<57300=57301
<57301=57303,57302
<57303=57304
<57305=57306
<57306=57308,57307
<57309=57310
<57310=57312,57311
<57313=57314
<57314=57316,57315
<57317=57318
<57318=57320,57319
<57321=57322
<57322=57324,57323
<57324=57325
<57326=57481,57327
<57327=57362,57349,57328
<57328=57329
<57329=57345,57330
<57330=57343,57331
<57331=57332
<57332=57340,57333
<57333=57337,57334
<57334=57336,57335
<57337=57339,57338
<57340=57342,57341
<57343=57344
<57345=57346
<57346=57348,57347
<57349=57350
<57350=57358,57351
<57351=57356,57352
<57352=57353
<57353=57355,57354
<57356=57357
<57358=57359
<57359=57361,57360
<57362=57474,57452,57363
<57363=57364
<57364=57445,57423,57365
<57365=57366
<57366=57419,57397,57367
<57367=57368
<57368=57369
<57369=57393,57370
<57370=57371
<57371=57372
<57372=57391,57373
<57373=57387,57378,57376,57374
<57374=57375
<57376=57377
<57378=57379
<57379=57381,57380
<57381=57382
<57382=57384,57383
<57384=57386,57385
<57387=57388
<57388=57390,57389
<57391=57392
<57393=57394
<57394=57396,57395
<57397=57398
<57398=57415,57399
<57399=57400
<57400=57401
<57401=57413,57402
<57402=57409,57407,57405,57403
<57403=57404
<57405=57406
<57407=57408
<57409=57410
<57410=57412,57411
<57413=57414
<57415=57416
<57416=57418,57417
<57419=57420
<57420=57422,57421
<57423=57424
<57424=57441,57425
<57425=57426
<57426=57427
<57427=57439,57428
<57428=57435,57433,57431,57429
<57429=57430
<57431=57432
<57433=57434
<57435=57436
<57436=57438,57437
<57439=57440
<57441=57442
<57442=57444,57443
<57445=57446
<57446=57448,57447
<57448=57449
<57449=57451,57450
<57452=57453
<57453=57470,57454
<57454=57455
<57455=57456
<57456=57468,57457
<57457=57464,57462,57460,57458
<57458=57459
<57460=57461
<57462=57463
<57464=57465
<57465=57467,57466
<57468=57469
<57470=57471
<57471=57473,57472
<57474=57475
<57475=57477,57476
<57477=57478
<57478=57480,57479
<57481=57482
<57483=57498,57484
<57484=57494,57485
<57485=57490,57486
<57486=57487
<57487=57489,57488
<57490=57491
<57491=57493,57492
<57494=57495
<57495=57497,57496
<57498=57499
<57499=57501,57500
<57502=57522,57503
<57503=57518,57504
<57504=57514,57505
<57505=57510,57506
<57506=57507
<57507=57509,57508
<57510=57511
<57511=57513,57512
<57514=57515
<57515=57517,57516
<57518=57519
<57519=57521,57520
<57522=57523
<57523=57525,57524
<57526=57539,57527
<57527=57532,57528
<57528=57529
<57529=57531,57530
<57532=57533
<57533=57535,57534
<57535=57536
<57536=57538,57537
<57539=57540
<57541=57552,57542
<57542=57547,57543
<57543=57544
<57544=57546,57545
<57547=57548
<57548=57550,57549
<57550=57551
<57552=57553
<57554=57683,57555
<57555=57676,57602,57556
<57556=57595,57557
<57557=57586,57576,57558
<57558=57568,57559
<57559=57560
<57560=57561
<57561=57563,57562
<57563=57565,57564
<57565=57567,57566
<57568=57569
<57569=57571,57570
<57571=57573,57572
<57573=57575,57574
<57576=57577
<57577=57581,57578
<57578=57580,57579
<57581=57583,57582
<57583=57585,57584
<57586=57587
<57587=57589,57588
<57589=57590
<57590=57592,57591
<57592=57594,57593
<57595=57596
<57596=57600,57597
<57597=57598
<57598=57599
<57600=57601
<57602=57669,57603
<57603=57660,57650,57604
<57604=57628,57605
<57605=57606
<57606=57607
<57607=57623,57608
<57608=57615,57609
<57609=57611,57610
<57611=57612
<57612=57614,57613
<57615=57622,57616
<57616=57618,57617
<57618=57619
<57619=57621,57620
<57623=57625,57624
<57625=57627,57626
<57628=57629
<57629=57645,57630
<57630=57637,57631
<57631=57633,57632
<57633=57634
<57634=57636,57635
<57637=57644,57638
<57638=57640,57639
<57640=57641
<57641=57643,57642
<57645=57647,57646
<57647=57649,57648
<57650=57651
<57651=57655,57652
<57652=57654,57653
<57655=57657,57656
<57657=57659,57658
<57660=57661
<57661=57663,57662
<57663=57664
<57664=57666,57665
<57666=57668,57667
<57669=57670
<57670=57674,57671
<57671=57672
<57672=57673
<57674=57675
<57676=57677
<57677=57682,57681,57678
<57678=57680,57679
<57683=57684
<57685=57686
<57686=57688,57687
<57688=57689
<57689=57691,57690
<57830=57839,57838,57831
<57831=57835,57832
<57832=57834,57833
<57835=57837,57836
<57839=57840
<57840=57841
<57841=57843,57842
<57843=57845,57844
<57845=57851,57846
<57846=57847
<57847=57848
<57848=57850,57849
<57851=57852
<57852=57854,57853
<57867=57873,57872,57868
<57868=57869
<57869=57871,57870
<57873=57874
<57874=57875
<57875=57877,57876
<57877=57883,57878
<57878=57879
<57879=57880
<57880=57882,57881
<57883=57884
<57884=57886,57885
<57898=57919,57918,57899
<57899=57915,57912,57909,57906,57903,57900
<57900=57902,57901
<57903=57905,57904
<57906=57908,57907
<57909=57911,57910
<57912=57914,57913
<57915=57917,57916
<57919=58089,57922,57920
<57920=57921
<57922=58087,57923
<57923=58086,58085,58084,58082,58076,58053,58041,58032,57956,57949,57940,57924
<57924=57925
<57925=57931,57926
<57926=57929,57927
<57927=57928
<57929=57930
<57931=57932
<57932=57934,57933
<57934=57936,57935
<57936=57937
<57937=57939,57938
<57940=57941
<57941=57945,57942
<57942=57943
<57943=57944
<57945=57946
<57946=57948,57947
<57949=57950
<57950=57952,57951
<57952=57953
<57953=57955,57954
<57956=58023,58014,57957
<57957=57958
<57958=57959
<57959=58010,57995,57960
<57960=57961
<57961=57993,57979,57962
<57962=57963
<57963=57964
<57964=57975,57965
<57965=57966
<57966=57967
<57967=57973,57968
<57968=57971,57969
<57969=57970
<57971=57972
<57973=57974
<57975=57976
<57976=57978,57977
<57979=57980
<57980=57989,57981
<57981=57982
<57982=57983
<57983=57985,57984
<57985=57986
<57986=57988,57987
<57989=57990
<57990=57992,57991
<57993=57994
<57995=57996
<57996=58006,57997
<57997=57998
<57998=57999
<57999=58003,58000
<58000=58002,58001
<58003=58005,58004
<58006=58007
<58007=58009,58008
<58010=58011
<58011=58013,58012
<58014=58015
<58015=58019,58016
<58016=58017
<58017=58018
<58019=58020
<58020=58022,58021
<58023=58024
<58024=58031,58025
<58025=58027,58026
<58027=58028
<58028=58030,58029
<58032=58033
<58033=58039,58034
<58034=58037,58035
<58035=58036
<58037=58038
<58039=58040
<58041=58051,58042
<58042=58043
<58043=58047,58044
<58044=58045
<58045=58046
<58047=58048
<58048=58050,58049
<58051=58052
<58053=58069,58061,58054
<58054=58055
<58055=58056
<58056=58058,58057
<58058=58060,58059
<58061=58062
<58062=58066,58063
<58063=58065,58064
<58066=58068,58067
<58069=58070
<58070=58072,58071
<58072=58073
<58073=58075,58074
<58076=58077
<58077=58079,58078
<58079=58081,58080
<58082=58083
<58087=58088
<58089=58090
<58090=58095,58094,58091
<58091=58093,58092
<58121=58151,58150,58122
<58122=58147,58144,58141,58138,58135,58132,58129,58126,58123
<58123=58125,58124
<58126=58128,58127
<58129=58131,58130
<58132=58134,58133
<58135=58137,58136
<58138=58140,58139
<58141=58143,58142
<58144=58146,58145
<58147=58149,58148
<58151=58154,58152
<58152=58153
<58154=58155
<58155=58159,58156
<58156=58157
<58157=58158
<58159=58160
<58173=58179,58178,58174
<58174=58175
<58175=58177,58176
<58179=58180
<58180=58181
<58181=58187,58182
<58182=58183
<58183=58184
<58184=58186,58185
<58187=58188
<58195=58201,58200,58196
<58196=58197
<58197=58199,58198
<58201=58217,58213,58202
<58202=58203
<58203=58210,58204
<58204=58208,58205
<58205=58206
<58206=58207
<58208=58209
<58210=58212,58211
<58213=58214
<58214=58216,58215
<58217=58218
<58218=58220,58219
<58220=58221
<58221=58223,58222
<58233=58236,58235,58234
<58236=58237
<58237=58247,58238
<58238=58239
<58239=58245,58240
<58240=58241
<58241=58242
<58242=58244,58243
<58245=58246
<58247=58248
<58254=58260,58259,58255
<58255=58256
<58256=58258,58257
<58260=58393,58389,58381,58375,58362,58348,58340,58332,58322,58312,58302,58292,58279,58271,58263,58261
<58261=58262
<58263=58264
<58264=58268,58265
<58265=58267,58266
<58268=58270,58269
<58271=58272
<58272=58276,58273
<58273=58275,58274
<58276=58278,58277
<58279=58280
<58280=58290,58281
<58281=58286,58282
<58282=58283
<58283=58285,58284
<58286=58287
<58287=58289,58288
<58290=58291
<58292=58293
<58293=58299,58294
<58294=58298,58295
<58295=58297,58296
<58299=58301,58300
<58302=58303
<58303=58309,58304
<58304=58308,58305
<58305=58307,58306
<58309=58311,58310
<58312=58313
<58313=58319,58314
<58314=58316,58315
<58316=58318,58317
<58319=58321,58320
<58322=58323
<58323=58329,58324
<58324=58326,58325
<58326=58328,58327
<58329=58331,58330
<58332=58333
<58333=58337,58334
<58334=58336,58335
<58337=58339,58338
<58340=58341
<58341=58345,58342
<58342=58344,58343
<58345=58347,58346
<58348=58358,58349
<58349=58354,58350
<58350=58351
<58351=58353,58352
<58354=58355
<58355=58357,58356
<58358=58359
<58359=58361,58360
<58362=58369,58363
<58363=58368,58367,58364
<58364=58366,58365
<58369=58374,58373,58370
<58370=58372,58371
<58375=58376
<58376=58378,58377
<58378=58380,58379
<58381=58382
<58382=58386,58383
<58383=58385,58384
<58386=58388,58387
<58389=58390
<58390=58392,58391
<58393=58394
<58394=58401,58400,58395
<58395=58399,58396
<58396=58398,58397
<58418=58424,58423,58419
<58419=58420
<58420=58422,58421
<58424=58776,58769,58762,58758,58722,58712,58708,58685,58674,58664,58660,58534,58527,58456,58425
<58425=58448,58444,58441,58426
<58426=58427
<58427=58428
<58428=58437,58429
<58429=58430
<58430=58431
<58431=58435,58432
<58432=58433
<58433=58434
<58435=58436
<58437=58438
<58438=58440,58439
<58441=58443,58442
<58444=58445
<58445=58447,58446
<58448=58449
<58449=58450
<58450=58455,58454,58451
<58451=58453,58452
<58456=58519,58510,58507,58457
<58457=58458
<58458=58499,58490,58487,58459
<58459=58460
<58460=58475,58461
<58461=58462
<58462=58463
<58463=58473,58464
<58464=58469,58465
<58465=58466
<58466=58468,58467
<58469=58470
<58470=58472,58471
<58473=58474
<58475=58476
<58476=58482,58477
<58477=58479,58478
<58479=58481,58480
<58482=58484,58483
<58484=58486,58485
<58487=58489,58488
<58490=58491
<58491=58498,58492
<58492=58494,58493
<58494=58495
<58495=58497,58496
<58499=58500
<58500=58501
<58501=58506,58505,58502
<58502=58504,58503
<58507=58509,58508
<58510=58511
<58511=58518,58512
<58512=58514,58513
<58514=58515
<58515=58517,58516
<58519=58520
<58520=58521
<58521=58526,58525,58522
<58522=58524,58523
<58527=58528
<58528=58530,58529
<58530=58531
<58531=58533,58532
<58534=58651,58535
<58535=58626,58622,58617,58607,58603,58597,58591,58580,58569,58563,58557,58548,58536
<58536=58546,58537
<58537=58538
<58538=58542,58539
<58539=58540
<58540=58541
<58542=58543
<58543=58545,58544
<58546=58547
<58548=58549
<58549=58553,58550
<58550=58551
<58551=58552
<58553=58554
<58554=58556,58555
<58557=58558
<58558=58560,58559
<58560=58562,58561
<58563=58564
<58564=58566,58565
<58566=58568,58567
<58569=58576,58570
<58570=58571
<58571=58575,58572
<58572=58574,58573
<58576=58577
<58577=58579,58578
<58580=58587,58581
<58581=58582
<58582=58586,58583
<58583=58585,58584
<58587=58588
<58588=58590,58589
<58591=58592
<58592=58594,58593
<58594=58596,58595
<58597=58598
<58598=58600,58599
<58600=58602,58601
<58603=58604
<58604=58606,58605
<58607=58608
<58608=58616,58609
<58609=58615,58610
<58610=58614,58611
<58611=58613,58612
<58617=58618
<58618=58621,58620,58619
<58622=58623
<58623=58625,58624
<58626=58643,58635,58627
<58627=58634,58633,58628
<58628=58632,58629
<58629=58631,58630
<58635=58642,58641,58636
<58636=58640,58637
<58637=58639,58638
<58643=58650,58649,58644
<58644=58648,58645
<58645=58647,58646
<58651=58652
<58652=58658,58653
<58653=58656,58654
<58654=58655
<58656=58657
<58658=58659
<58660=58661
<58661=58663,58662
<58664=58665
<58665=58673,58672,58666
<58666=58668,58667
<58668=58669
<58669=58671,58670
<58674=58683,58675
<58675=58676
<58676=58677
<58677=58679,58678
<58679=58680
<58680=58682,58681
<58683=58684
<58685=58699,58686
<58686=58688,58687
<58688=58689
<58689=58697,58690
<58690=58691
<58691=58692
<58692=58696,58693
<58693=58695,58694
<58697=58698
<58699=58700
<58700=58707,58701
<58701=58705,58702
<58702=58703
<58703=58704
<58705=58706
<58708=58709
<58709=58711,58710
<58712=58718,58713
<58713=58714
<58714=58715
<58715=58717,58716
<58718=58719
<58719=58721,58720
<58722=58749,58732,58723
<58723=58724
<58724=58725
<58725=58731,58726
<58726=58730,58727
<58727=58729,58728
<58732=58733
<58733=58748,58734
<58734=58740,58735
<58735=58739,58736
<58736=58738,58737
<58740=58742,58741
<58742=58743
<58743=58745,58744
<58745=58747,58746
<58749=58750
<58750=58752,58751
<58752=58753
<58753=58755,58754
<58755=58757,58756
<58758=58759
<58759=58761,58760
<58762=58763
<58763=58768,58767,58764
<58764=58766,58765
<58769=58770
<58770=58772,58771
<58772=58773
<58773=58775,58774
<58776=58777
<58777=58781,58778
<58778=58779
<58779=58780
<58781=58782
<58821=58827,58826,58822
<58822=58823
<58823=58825,58824
<58827=58841,58828
<58828=58829
<58829=58839,58830
<58830=58837,58835,58831
<58831=58832
<58832=58834,58833
<58835=58836
<58837=58838
<58839=58840
<58841=58842
<58842=58852,58843
<58843=58844
<58844=58845
<58845=58849,58846
<58846=58848,58847
<58849=58851,58850
<58852=58853
<58860=58863,58862,58861
<58863=58864
<58864=58865
<58865=58867,58866
<58872=58884,58883,58873
<58873=58880,58877,58874
<58874=58876,58875
<58877=58879,58878
<58880=58882,58881
<58884=58885
<58885=59053,59042,59039,58886
<58886=59034,59021,59008,58911,58896,58887
<58887=58888
<58888=58894,58889
<58889=58892,58890
<58890=58891
<58892=58893
<58894=58895
<58896=58897
<58897=58910,58909,58898
<58898=58904,58899
<58899=58901,58900
<58901=58903,58902
<58904=58906,58905
<58906=58908,58907
<58911=59000,58999,58912
<58912=58913
<58913=58991,58969,58914
<58914=58915
<58915=58961,58948,58916
<58916=58917
<58917=58940,58918
<58918=58933,58929,58925,58919
<58919=58920
<58920=58924,58921
<58921=58923,58922
<58925=58926
<58926=58928,58927
<58929=58930
<58930=58932,58931
<58933=58934
<58934=58939,58938,58935
<58935=58937,58936
<58940=58941
<58941=58945,58942
<58942=58944,58943
<58945=58947,58946
<58948=58955,58949
<58949=58950
<58950=58954,58951
<58951=58953,58952
<58955=58956
<58956=58960,58957
<58957=58959,58958
<58961=58962
<58962=58966,58963
<58963=58965,58964
<58966=58968,58967
<58969=58984,58980,58976,58970
<58970=58971
<58971=58975,58972
<58972=58974,58973
<58976=58977
<58977=58979,58978
<58980=58981
<58981=58983,58982
<58984=58985
<58985=58990,58989,58986
<58986=58988,58987
<58991=58992
<58992=58996,58993
<58993=58995,58994
<58996=58998,58997
<59000=59001
<59001=59005,59002
<59002=59004,59003
<59005=59007,59006
<59008=59009
<59009=59020,59019,59010
<59010=59018,59011
<59011=59013,59012
<59013=59015,59014
<59015=59017,59016
<59021=59022
<59022=59033,59032,59023
<59023=59031,59024
<59024=59026,59025
<59026=59028,59027
<59028=59030,59029
<59034=59035
<59035=59038,59037,59036
<59039=59041,59040
<59042=59043
<59043=59052,59044
<59044=59046,59045
<59046=59047
<59047=59049,59048
<59049=59051,59050
<59053=59054
<59054=59055
<59055=59060,59059,59056
<59056=59058,59057
<59082=59085,59084,59083
<59085=59727,59718,59707,59700,59693,59689,59682,59671,59664,59647,59640,59627,59620,59611,59604,59593,59578,59571,59567,59562,59554,59539,59530,59517,59508,59501,59495,59488,59086,59093,59099,59103,59112,59119,59124,59131,59136,59143,59148,59155,59160,59165,59172,59177,59181,59185,59189,59193,59197,59201,59205,59209,59213,59217,59231,59238,59251,59255,59262,59266,59273,59280,59285,59290,59332,59339,59352,59369,59378,59391,59402,59412,59423,59436,59450,59461,59472,59481
<59086=59087
<59087=59091,59088
<59088=59089
<59089=59090
<59091=59092
<59093=59094
<59094=59096,59095
<59096=59098,59097
<59099=59100
<59100=59102,59101
<59103=59104
<59104=59106,59105
<59106=59107
<59107=59109,59108
<59109=59111,59110
<59112=59113
<59113=59117,59114
<59114=59115
<59115=59116
<59117=59118
<59119=59120
<59120=59122,59121
<59122=59123
<59124=59125
<59125=59129,59126
<59126=59127
<59127=59128
<59129=59130
<59131=59132
<59132=59134,59133
<59134=59135
<59136=59137
<59137=59141,59138
<59138=59139
<59139=59140
<59141=59142
<59143=59144
<59144=59146,59145
<59146=59147
<59148=59149
<59149=59153,59150
<59150=59151
<59151=59152
<59153=59154
<59155=59156
<59156=59158,59157
<59158=59159
<59160=59161
<59161=59163,59162
<59163=59164
<59165=59166
<59166=59170,59167
<59167=59168
<59168=59169
<59170=59171
<59172=59173
<59173=59175,59174
<59175=59176
<59177=59178
<59178=59180,59179
<59181=59182
<59182=59184,59183
<59185=59186
<59186=59188,59187
<59189=59190
<59190=59192,59191
<59193=59194
<59194=59196,59195
<59197=59198
<59198=59200,59199
<59201=59202
<59202=59204,59203
<59205=59206
<59206=59208,59207
<59209=59210
<59210=59212,59211
<59213=59214
<59214=59216,59215
<59217=59218
<59218=59230,59219
<59219=59229,59220
<59220=59228,59221
<59221=59227,59222
<59222=59226,59223
<59223=59225,59224
<59231=59232
<59232=59234,59233
<59234=59235
<59235=59237,59236
<59238=59239
<59239=59248,59240
<59240=59246,59241
<59241=59244,59242
<59242=59243
<59244=59245
<59246=59247
<59248=59250,59249
<59251=59252
<59252=59254,59253
<59255=59256
<59256=59258,59257
<59258=59259
<59259=59261,59260
<59262=59263
<59263=59265,59264
<59266=59267
<59267=59269,59268
<59269=59270
<59270=59272,59271
<59273=59274
<59274=59276,59275
<59276=59277
<59277=59279,59278
<59280=59281
<59281=59283,59282
<59283=59284
<59285=59286
<59286=59288,59287
<59288=59289
<59290=59324,59317,59314,59291
<59291=59302,59295,59294,59292
<59292=59293
<59295=59296
<59296=59298,59297
<59298=59299
<59299=59301,59300
<59302=59303
<59303=59313,59312,59304
<59304=59311,59305
<59305=59309,59306
<59306=59307
<59307=59308
<59309=59310
<59314=59316,59315
<59317=59318
<59318=59323,59319
<59319=59321,59320
<59321=59322
<59324=59325
<59325=59326
<59326=59331,59330,59327
<59327=59329,59328
<59332=59333
<59333=59335,59334
<59335=59336
<59336=59338,59337
<59339=59340
<59340=59349,59341
<59341=59347,59342
<59342=59345,59343
<59343=59344
<59345=59346
<59347=59348
<59349=59351,59350
<59352=59353
<59353=59362,59354
<59354=59360,59355
<59355=59358,59356
<59356=59357
<59358=59359
<59360=59361
<59362=59364,59363
<59364=59366,59365
<59366=59368,59367
<59369=59370
<59370=59372,59371
<59372=59373
<59373=59375,59374
<59375=59377,59376
<59378=59379
<59379=59381,59380
<59381=59382
<59382=59384,59383
<59384=59386,59385
<59386=59388,59387
<59388=59390,59389
<59391=59392
<59392=59396,59393
<59393=59394
<59394=59395
<59396=59397
<59397=59399,59398
<59399=59401,59400
<59402=59403
<59403=59407,59404
<59404=59406,59405
<59407=59409,59408
<59409=59411,59410
<59412=59421,59413
<59413=59420,59418,59414
<59414=59415
<59415=59417,59416
<59418=59419
<59421=59422
<59423=59424
<59424=59426,59425
<59426=59428,59427
<59428=59432,59429
<59429=59430
<59430=59431
<59432=59433
<59433=59435,59434
<59436=59446,59437
<59437=59438
<59438=59440,59439
<59440=59441
<59441=59443,59442
<59443=59445,59444
<59446=59447
<59447=59449,59448
<59450=59451
<59451=59457,59452
<59452=59455,59453
<59453=59454
<59455=59456
<59457=59458
<59458=59460,59459
<59461=59462
<59462=59466,59463
<59463=59464
<59464=59465
<59466=59467
<59467=59469,59468
<59469=59471,59470
<59472=59473
<59473=59477,59474
<59474=59475
<59475=59476
<59477=59478
<59478=59480,59479
<59481=59482
<59482=59484,59483
<59484=59485
<59485=59487,59486
<59488=59489
<59489=59491,59490
<59491=59492
<59492=59494,59493
<59495=59496
<59496=59498,59497
<59498=59500,59499
<59501=59502
<59502=59504,59503
<59504=59505
<59505=59507,59506
<59508=59509
<59509=59511,59510
<59511=59512
<59512=59514,59513
<59514=59516,59515
<59517=59518
<59518=59526,59519
<59519=59524,59522,59520
<59520=59521
<59522=59523
<59524=59525
<59526=59527
<59527=59529,59528
<59530=59531
<59531=59535,59532
<59532=59533
<59533=59534
<59535=59536
<59536=59538,59537
<59539=59540
<59540=59546,59541
<59541=59544,59542
<59542=59543
<59544=59545
<59546=59547
<59547=59549,59548
<59549=59551,59550
<59551=59553,59552
<59554=59555
<59555=59557,59556
<59557=59559,59558
<59559=59561,59560
<59562=59563
<59563=59565,59564
<59565=59566
<59567=59568
<59568=59570,59569
<59571=59572
<59572=59576,59573
<59573=59574
<59574=59575
<59576=59577
<59578=59586,59579
<59579=59580
<59580=59582,59581
<59582=59583
<59583=59585,59584
<59586=59587
<59587=59592,59588
<59588=59590,59589
<59590=59591
<59593=59594
<59594=59600,59595
<59595=59598,59596
<59596=59597
<59598=59599
<59600=59601
<59601=59603,59602
<59604=59605
<59605=59609,59606
<59606=59607
<59607=59608
<59609=59610
<59611=59612
<59612=59614,59613
<59614=59615
<59615=59617,59616
<59617=59619,59618
<59620=59621
<59621=59625,59622
<59622=59623
<59623=59624
<59625=59626
<59627=59628
<59628=59634,59629
<59629=59632,59630
<59630=59631
<59632=59633
<59634=59635
<59635=59637,59636
<59637=59639,59638
<59640=59641
<59641=59645,59642
<59642=59643
<59643=59644
<59645=59646
<59647=59657,59648
<59648=59649
<59649=59653,59650
<59650=59651
<59651=59652
<59653=59654
<59654=59656,59655
<59657=59658
<59658=59660,59659
<59660=59661
<59661=59663,59662
<59664=59665
<59665=59669,59666
<59666=59667
<59667=59668
<59669=59670
<59671=59680,59672
<59672=59673
<59673=59674
<59674=59676,59675
<59676=59677
<59677=59679,59678
<59680=59681
<59682=59683
<59683=59687,59684
<59684=59685
<59685=59686
<59687=59688
<59689=59690
<59690=59692,59691
<59693=59694
<59694=59698,59695
<59695=59696
<59696=59697
<59698=59699
<59700=59701
<59701=59703,59702
<59703=59704
<59704=59706,59705
<59707=59708
<59708=59712,59709
<59709=59710
<59710=59711
<59712=59713
<59713=59715,59714
<59715=59717,59716
<59718=59719
<59719=59723,59720
<59720=59721
<59721=59722
<59723=59724
<59724=59726,59725
<59727=59728
<59728=59733,59732,59729
<59729=59731,59730
<59810=59813,59812,59811
<59813=59814
<59814=59815
<59820=59835,59834,59821
<59821=59831,59828,59825,59822
<59822=59824,59823
<59825=59827,59826
<59828=59830,59829
<59831=59833,59832
<59835=59838,59836
<59836=59837
<59838=60017,59945,59839
<59839=59840
<59840=59913,59841
<59841=59842
<59842=59881,59879,59843
<59843=59844
<59844=59847,59845
<59845=59846
<59847=59848
<59848=59864,59849
<59849=59857,59850
<59850=59854,59851
<59851=59853,59852
<59854=59856,59855
<59857=59861,59858
<59858=59860,59859
<59861=59863,59862
<59864=59872,59865
<59865=59869,59866
<59866=59868,59867
<59869=59871,59870
<59872=59876,59873
<59873=59875,59874
<59876=59878,59877
<59879=59880
<59881=59882
<59882=59898,59883
<59883=59891,59884
<59884=59888,59885
<59885=59887,59886
<59888=59890,59889
<59891=59895,59892
<59892=59894,59893
<59895=59897,59896
<59898=59906,59899
<59899=59903,59900
<59900=59902,59901
<59903=59905,59904
<59906=59910,59907
<59907=59909,59908
<59910=59912,59911
<59913=59914
<59914=59930,59915
<59915=59923,59916
<59916=59920,59917
<59917=59919,59918
<59920=59922,59921
<59923=59927,59924
<59924=59926,59925
<59927=59929,59928
<59930=59938,59931
<59931=59935,59932
<59932=59934,59933
<59935=59937,59936
<59938=59942,59939
<59939=59941,59940
<59942=59944,59943
<59945=59946
<59946=59985,59983,59947
<59947=59948
<59948=59951,59949
<59949=59950
<59951=59952
<59952=59968,59953
<59953=59961,59954
<59954=59958,59955
<59955=59957,59956
<59958=59960,59959
<59961=59965,59962
<59962=59964,59963
<59965=59967,59966
<59968=59976,59969
<59969=59973,59970
<59970=59972,59971
<59973=59975,59974
<59976=59980,59977
<59977=59979,59978
<59980=59982,59981
<59983=59984
<59985=59986
<59986=60002,59987
<59987=59995,59988
<59988=59992,59989
<59989=59991,59990
<59992=59994,59993
<59995=59999,59996
<59996=59998,59997
<59999=60001,60000
<60002=60010,60003
<60003=60007,60004
<60004=60006,60005
<60007=60009,60008
<60010=60014,60011
<60011=60013,60012
<60014=60016,60015
<60017=60018
<60018=60034,60019
<60019=60027,60020
<60020=60024,60021
<60021=60023,60022
<60024=60026,60025
<60027=60031,60028
<60028=60030,60029
<60031=60033,60032
<60034=60042,60035
<60035=60039,60036
<60036=60038,60037
<60039=60041,60040
<60042=60046,60043
<60043=60045,60044
<60046=60048,60047
<60066=60081,60080,60067
<60067=60077,60074,60071,60068
<60068=60070,60069
<60071=60073,60072
<60074=60076,60075
<60077=60079,60078
<60081=60175,60159,60143,60131,60119,60107,60095,60084,60082
<60082=60083
<60084=60087,60085
<60085=60086
<60087=60088
<60088=60092,60089
<60089=60091,60090
<60092=60094,60093
<60095=60099,60096
<60096=60097
<60097=60098
<60099=60100
<60100=60104,60101
<60101=60103,60102
<60104=60106,60105
<60107=60108
<60108=60118,60117,60109
<60109=60116,60110
<60110=60112,60111
<60112=60113
<60113=60115,60114
<60119=60120
<60120=60130,60129,60121
<60121=60128,60122
<60122=60124,60123
<60124=60125
<60125=60127,60126
<60131=60132
<60132=60142,60141,60133
<60133=60140,60134
<60134=60136,60135
<60136=60137
<60137=60139,60138
<60143=60144
<60144=60158,60157,60145
<60145=60156,60146
<60146=60154,60147
<60147=60152,60150,60148
<60148=60149
<60150=60151
<60152=60153
<60154=60155
<60159=60160
<60160=60174,60173,60161
<60161=60172,60162
<60162=60170,60163
<60163=60168,60166,60164
<60164=60165
<60166=60167
<60168=60169
<60170=60171
<60175=60176
<60176=60190,60189,60177
<60177=60188,60178
<60178=60186,60179
<60179=60184,60182,60180
<60180=60181
<60182=60183
<60184=60185
<60186=60187
<60207=60219,60218,60208
<60208=60215,60212,60209
<60209=60211,60210
<60212=60214,60213
<60215=60217,60216
<60219=60291,60282,60275,60261,60247,60240,60233,60224,60220
<60220=60221
<60221=60223,60222
<60224=60225
<60225=60229,60226
<60226=60227
<60227=60228
<60229=60230
<60230=60232,60231
<60233=60236,60234
<60234=60235
<60236=60237
<60237=60239,60238
<60240=60243,60241
<60241=60242
<60243=60244
<60244=60246,60245
<60247=60248
<60248=60260,60259,60249
<60249=60258,60250
<60250=60254,60251
<60251=60252
<60252=60253
<60254=60255
<60255=60257,60256
<60261=60262
<60262=60274,60273,60263
<60263=60272,60264
<60264=60266,60265
<60266=60267
<60267=60269,60268
<60269=60271,60270
<60275=60276
<60276=60278,60277
<60278=60279
<60279=60281,60280
<60282=60283
<60283=60290,60289,60284
<60284=60288,60285
<60285=60287,60286
<60291=60292
<60292=60299,60298,60293
<60293=60297,60294
<60294=60296,60295
<60312=60321,60320,60313
<60313=60317,60314
<60314=60316,60315
<60317=60319,60318
<60321=60750,60745,60737,60729,60720,60707,60699,60691,60328,60324,60322
<60322=60323
<60324=60325
<60325=60327,60326
<60328=60679,60671,60668,60329
<60329=60330
<60330=60656,60648,60645,60331
<60331=60624,60332
<60332=60620,60333
<60333=60613,60604,60591,60578,60574,60568,60540,60528,60500,60488,60460,60448,60420,60408,60371,60334
<60334=60355,60335
<60335=60336
<60336=60340,60337
<60337=60338
<60338=60339
<60340=60341
<60341=60345,60342
<60342=60344,60343
<60345=60353,60346
<60346=60347
<60347=60348
<60348=60352,60349
<60349=60351,60350
<60353=60354
<60355=60356
<60356=60364,60357
<60357=60361,60358
<60358=60360,60359
<60361=60363,60362
<60364=60368,60365
<60365=60367,60366
<60368=60370,60369
<60371=60392,60372
<60372=60373
<60373=60377,60374
<60374=60375
<60375=60376
<60377=60378
<60378=60382,60379
<60379=60381,60380
<60382=60390,60383
<60383=60384
<60384=60385
<60385=60389,60386
<60386=60388,60387
<60390=60391
<60392=60393
<60393=60401,60394
<60394=60398,60395
<60395=60397,60396
<60398=60400,60399
<60401=60405,60402
<60402=60404,60403
<60405=60407,60406
<60408=60411,60409
<60409=60410
<60411=60412
<60412=60419,60413
<60413=60417,60414
<60414=60415
<60415=60416
<60417=60418
<60420=60421
<60421=60447,60422
<60422=60435,60423
<60423=60433,60424
<60424=60425
<60425=60426
<60426=60430,60427
<60427=60429,60428
<60430=60432,60431
<60433=60434
<60435=60445,60436
<60436=60437
<60437=60438
<60438=60442,60439
<60439=60441,60440
<60442=60444,60443
<60445=60446
<60448=60451,60449
<60449=60450
<60451=60452
<60452=60459,60453
<60453=60457,60454
<60454=60455
<60455=60456
<60457=60458
<60460=60461
<60461=60487,60462
<60462=60475,60463
<60463=60473,60464
<60464=60465
<60465=60466
<60466=60470,60467
<60467=60469,60468
<60470=60472,60471
<60473=60474
<60475=60485,60476
<60476=60477
<60477=60478
<60478=60482,60479
<60479=60481,60480
<60482=60484,60483
<60485=60486
<60488=60491,60489
<60489=60490
<60491=60492
<60492=60499,60493
<60493=60497,60494
<60494=60495
<60495=60496
<60497=60498
<60500=60501
<60501=60527,60502
<60502=60515,60503
<60503=60513,60504
<60504=60505
<60505=60506
<60506=60510,60507
<60507=60509,60508
<60510=60512,60511
<60513=60514
<60515=60525,60516
<60516=60517
<60517=60518
<60518=60522,60519
<60519=60521,60520
<60522=60524,60523
<60525=60526
<60528=60531,60529
<60529=60530
<60531=60532
<60532=60539,60533
<60533=60537,60534
<60534=60535
<60535=60536
<60537=60538
<60540=60541
<60541=60567,60542
<60542=60555,60543
<60543=60553,60544
<60544=60545
<60545=60546
<60546=60550,60547
<60547=60549,60548
<60550=60552,60551
<60553=60554
<60555=60565,60556
<60556=60557
<60557=60558
<60558=60562,60559
<60559=60561,60560
<60562=60564,60563
<60565=60566
<60568=60569
<60569=60573,60570
<60570=60572,60571
<60574=60575
<60575=60577,60576
<60578=60579
<60579=60590,60589,60580
<60580=60588,60581
<60581=60585,60582
<60582=60584,60583
<60585=60587,60586
<60591=60592
<60592=60603,60602,60593
<60593=60601,60594
<60594=60598,60595
<60595=60597,60596
<60598=60600,60599
<60604=60605
<60605=60612,60606
<60606=60608,60607
<60608=60609
<60609=60611,60610
<60613=60614
<60614=60619,60618,60615
<60615=60617,60616
<60620=60621
<60621=60623,60622
<60624=60625
<60625=60644,60643,60626
<60626=60642,60627
<60627=60638,60628
<60628=60629
<60629=60630
<60630=60636,60631
<60631=60634,60632
<60632=60633
<60634=60635
<60636=60637
<60638=60639
<60639=60641,60640
<60645=60647,60646
<60648=60649
<60649=60655,60650
<60650=60652,60651
<60652=60654,60653
<60656=60657
<60657=60658
<60658=60667,60666,60659
<60659=60665,60660
<60660=60662,60661
<60662=60664,60663
<60668=60670,60669
<60671=60672
<60672=60678,60673
<60673=60675,60674
<60675=60677,60676
<60679=60680
<60680=60681
<60681=60690,60689,60682
<60682=60688,60683
<60683=60685,60684
<60685=60687,60686
<60691=60692
<60692=60698,60693
<60693=60695,60694
<60695=60697,60696
<60699=60700
<60700=60706,60701
<60701=60703,60702
<60703=60705,60704
<60707=60714,60708
<60708=60713,60712,60709
<60709=60711,60710
<60714=60719,60718,60715
<60715=60717,60716
<60720=60721
<60721=60728,60727,60722
<60722=60726,60723
<60723=60725,60724
<60729=60730
<60730=60734,60731
<60731=60733,60732
<60734=60736,60735
<60737=60738
<60738=60742,60739
<60739=60741,60740
<60742=60744,60743
<60745=60746
<60746=60749,60748,60747
<60750=60751
<60751=60756,60755,60752
<60752=60754,60753
<60792=60801,60800,60793
<60793=60797,60794
<60794=60796,60795
<60797=60799,60798
<60801=60802
<60802=60905,60803
<60803=60901,60865,60847,60804
<60804=60845,60805
<60805=60806
<60806=60843,60807
<60807=60808
<60808=60809
<60809=60837,60810
<60810=60830,60828,60826,60824,60822,60811
<60811=60812
<60812=60816,60813
<60813=60815,60814
<60816=60820,60817
<60817=60818
<60818=60819
<60820=60821
<60822=60823
<60824=60825
<60826=60827
<60828=60829
<60830=60831
<60831=60833,60832
<60833=60834
<60834=60836,60835
<60837=60838
<60838=60840,60839
<60840=60842,60841
<60843=60844
<60845=60846
<60847=60848
<60848=60864,60863,60849
<60849=60862,60850
<60850=60856,60851
<60851=60852
<60852=60853
<60853=60855,60854
<60856=60857
<60857=60859,60858
<60859=60861,60860
<60865=60866
<60866=60900,60867
<60867=60888,60868
<60868=60887,60869
<60869=60884,60870
<60870=60883,60871
<60871=60875,60872
<60872=60873
<60873=60874
<60875=60876
<60876=60878,60877
<60878=60880,60879
<60880=60882,60881
<60884=60886,60885
<60888=60892,60889
<60889=60890
<60890=60891
<60892=60893
<60893=60895,60894
<60895=60897,60896
<60897=60899,60898
<60901=60902
<60902=60904,60903
<60905=60906
<60906=60910,60907
<60907=60909,60908
<60910=60912,60911
<60912=60925,60913
<60913=60916,60914
<60914=60915
<60916=60917
<60917=60919,60918
<60919=60921,60920
<60921=60922
<60922=60924,60923
<60925=60926
<60952=60961,60960,60953
<60953=60957,60954
<60954=60956,60955
<60957=60959,60958
<60961=60962
<60962=60982,60973,60963
<60963=60964
<60964=60965
<60965=60969,60966
<60966=60967
<60967=60968
<60969=60970
<60970=60972,60971
<60973=60974
<60974=60978,60975
<60975=60976
<60976=60977
<60978=60979
<60979=60981,60980
<60982=60983
<60990=60996,60995,60991
<60991=60992
<60992=60994,60993
<60996=60997
<60997=60998
<60998=61005,60999
<60999=61001,61000
<61001=61002
<61002=61004,61003
<61005=61009,61006
<61006=61007
<61007=61008
<61009=61010
<61010=61012,61011
