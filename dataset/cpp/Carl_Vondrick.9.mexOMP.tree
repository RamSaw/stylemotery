>3	FunctionDef	callFunction (mxArray * plhs [ ] , const mxArray * prhs [ ] , const long nlhs)
>4	ParameterList	mxArray * plhs [ ] , const mxArray * prhs [ ] , const long nlhs
>5	Parameter	 
>6	Identifier	nlhs
>7	ParameterType	const long
>8	Parameter	 
>9	Identifier	prhs
>10	ParameterType	const mxArray * [ ]
>11	Parameter	 
>12	Identifier	plhs
>13	ParameterType	mxArray * [ ]
>14	ReturnType	inline void
>15	CompoundStatement	 
>16	ExpressionStatement	 
>17	CallExpression	convertSpMatrix ( plhs [ 0 ] , K , M , alpha . n ( ) , alpha . nzmax ( ) , alpha . v ( ) , alpha . r ( ) , alpha \
>18	ArgumentList	plhs [ 0 ]
>19	Argument	alpha . pB ( )
>20	CallExpression	alpha . pB ( )
>21	ArgumentList	 
>22	Callee	alpha . pB
>23	MemberAccess	alpha . pB
>24	Identifier	pB
>25	Identifier	alpha
>26	Argument	alpha . r ( )
>27	CallExpression	alpha . r ( )
>28	ArgumentList	 
>29	Callee	alpha . r
>30	MemberAccess	alpha . r
>31	Identifier	r
>32	Identifier	alpha
>33	Argument	alpha . v ( )
>34	CallExpression	alpha . v ( )
>35	ArgumentList	 
>36	Callee	alpha . v
>37	MemberAccess	alpha . v
>38	Identifier	v
>39	Identifier	alpha
>40	Argument	alpha . nzmax ( )
>41	CallExpression	alpha . nzmax ( )
>42	ArgumentList	 
>43	Callee	alpha . nzmax
>44	MemberAccess	alpha . nzmax
>45	Identifier	nzmax
>46	Identifier	alpha
>47	Argument	alpha . n ( )
>48	CallExpression	alpha . n ( )
>49	ArgumentList	 
>50	Callee	alpha . n
>51	MemberAccess	alpha . n
>52	Identifier	n
>53	Identifier	alpha
>54	Argument	M
>55	Identifier	M
>56	Argument	K
>57	Identifier	K
>58	Argument	plhs [ 0 ]
>59	ArrayIndexing	plhs [ 0 ]
>60	PrimaryExpression	0
>61	Identifier	plhs
>62	Callee	convertSpMatrix
>63	Identifier	convertSpMatrix
>64	ExpressionStatement	 
>65	RelationalExpression	omp < T > ( X , D , alpha , pL , pE , pLambda , sizeL > 1 , sizeE > 1 , sizeLambda > 1 , numThreads , \
>66	RelationalExpression	T > ( X , D , alpha , pL , pE , pLambda , sizeL > 1 , sizeE > 1 , sizeLambda > 1 , numThreads , prPath )
>67	Expression	X , D , alpha , pL , pE , pLambda , sizeL > 1 , sizeE > 1 , sizeLambda > 1 , numThreads , prPath
>68	Expression	D , alpha , pL , pE , pLambda , sizeL > 1 , sizeE > 1 , sizeLambda > 1 , numThreads , prPath
>69	Expression	alpha , pL , pE , pLambda , sizeL > 1 , sizeE > 1 , sizeLambda > 1 , numThreads , prPath
>70	Expression	pL , pE , pLambda , sizeL > 1 , sizeE > 1 , sizeLambda > 1 , numThreads , prPath
>71	Expression	pE , pLambda , sizeL > 1 , sizeE > 1 , sizeLambda > 1 , numThreads , prPath
>72	Expression	pLambda , sizeL > 1 , sizeE > 1 , sizeLambda > 1 , numThreads , prPath
>73	Expression	sizeL > 1 , sizeE > 1 , sizeLambda > 1 , numThreads , prPath
>74	Expression	sizeE > 1 , sizeLambda > 1 , numThreads , prPath
>75	Expression	sizeLambda > 1 , numThreads , prPath
>76	Expression	numThreads , prPath
>77	Identifier	prPath
>78	Identifier	numThreads
>79	RelationalExpression	sizeLambda > 1
>80	PrimaryExpression	1
>81	Identifier	sizeLambda
>82	RelationalExpression	sizeE > 1
>83	PrimaryExpression	1
>84	Identifier	sizeE
>85	RelationalExpression	sizeL > 1
>86	PrimaryExpression	1
>87	Identifier	sizeL
>88	Identifier	pLambda
>89	Identifier	pE
>90	Identifier	pL
>91	Identifier	alpha
>92	Identifier	D
>93	Identifier	X
>94	Identifier	T
>95	Identifier	omp
>96	IfStatement	if ( nlhs == 2 )
>97	CompoundStatement	 
>98	ExpressionStatement	 
>99	AssignmentExpr	prPath = & path
>100	UnaryOp	& path
>101	Identifier	path
>102	UnaryOperator	&
>103	Identifier	prPath
>104	ExpressionStatement	 
>105	CallExpression	path . setZeros ( )
>106	ArgumentList	 
>107	Callee	path . setZeros
>108	MemberAccess	path . setZeros
>109	Identifier	setZeros
>110	Identifier	path
>111	IdentifierDeclStatement	 
>112	IdentifierDecl	path ( pr_path , K , L )
>113	Expression	pr_path , K , L
>114	Expression	K , L
>115	Identifier	L
>116	Identifier	K
>117	Identifier	pr_path
>118	Identifier	path
>119	IdentifierDeclType	Matrix < T >
>120	ExpressionStatement	 
>121	CallExpression	mxGetPr ( plhs [ 1 ] )
>122	ArgumentList	plhs [ 1 ]
>123	Argument	plhs [ 1 ]
>124	ArrayIndexing	plhs [ 1 ]
>125	PrimaryExpression	1
>126	Identifier	plhs
>127	Callee	mxGetPr
>128	Identifier	mxGetPr
>129	Statement	 
>130	Statement	 
>131	Statement	 
>132	Statement	 
>133	Statement	 
>134	Statement	 
>135	Statement	 
>136	Statement	 
>137	Statement	 
>138	ExpressionStatement	 
>139	AssignmentExpr	plhs [ 1 ] = createMatrix < T > ( K , L )
>140	RelationalExpression	createMatrix < T > ( K , L )
>141	RelationalExpression	T > ( K , L )
>142	Expression	K , L
>143	Identifier	L
>144	Identifier	K
>145	Identifier	T
>146	Identifier	createMatrix
>147	ArrayIndexing	plhs [ 1 ]
>148	PrimaryExpression	1
>149	Identifier	plhs
>150	Condition	 
>151	EqualityExpression	nlhs == 2
>152	PrimaryExpression	2
>153	Identifier	nlhs
>154	IdentifierDeclStatement	 
>155	IdentifierDecl	* prPath = NULL
>156	AssignmentExpr	* prPath = NULL
>157	Identifier	NULL
>158	Identifier	NULL
>159	Identifier	prPath
>160	IdentifierDeclType	Matrix < T > *
>161	IfStatement	if ( pr_lambda )
>162	CompoundStatement	 
>163	ExpressionStatement	 
>164	CallExpression	mxGetPr ( pr_lambda )
>165	ArgumentList	pr_lambda
>166	Argument	pr_lambda
>167	Identifier	pr_lambda
>168	Callee	mxGetPr
>169	Identifier	mxGetPr
>170	Statement	 
>171	Statement	 
>172	Statement	 
>173	Statement	 
>174	Statement	 
>175	Statement	 
>176	IfStatement	if ( sizeLambda > 1 )
>177	Statement	 
>178	Condition	 
>179	RelationalExpression	sizeLambda > 1
>180	PrimaryExpression	1
>181	Identifier	sizeLambda
>182	ExpressionStatement	 
>183	AssignmentExpr	lambda = static_cast < T > ( mxGetScalar ( pr_lambda ) )
>184	RelationalExpression	static_cast < T > ( mxGetScalar ( pr_lambda ) )
>185	RelationalExpression	T > ( mxGetScalar ( pr_lambda ) )
>186	CallExpression	mxGetScalar ( pr_lambda )
>187	ArgumentList	pr_lambda
>188	Argument	pr_lambda
>189	Identifier	pr_lambda
>190	Callee	mxGetScalar
>191	Identifier	mxGetScalar
>192	Identifier	T
>193	Identifier	static_cast
>194	Identifier	lambda
>195	ExpressionStatement	 
>196	ArrayIndexing	dimsLambda [ 1 ]
>197	PrimaryExpression	1
>198	Identifier	dimsLambda
>199	Statement	 
>200	Statement	 
>201	Statement	 
>202	Statement	 
>203	Statement	 
>204	Statement	 
>205	Statement	 
>206	Statement	 
>207	Statement	 
>208	Statement	 
>209	Statement	 
>210	Statement	 
>211	Statement	 
>212	Statement	 
>213	Statement	 
>214	Statement	 
>215	Statement	 
>216	IdentifierDeclStatement	 
>217	IdentifierDecl	* dimsLambda = mxGetDimensions ( pr_lambda )
>218	AssignmentExpr	* dimsLambda = mxGetDimensions ( pr_lambda )
>219	CallExpression	mxGetDimensions ( pr_lambda )
>220	ArgumentList	pr_lambda
>221	Argument	pr_lambda
>222	Identifier	pr_lambda
>223	Callee	mxGetDimensions
>224	Identifier	mxGetDimensions
>225	Identifier	dimsLambda
>226	Identifier	dimsLambda
>227	IdentifierDeclType	const mwSize *
>228	Condition	 
>229	Identifier	pr_lambda
>230	IdentifierDeclStatement	 
>231	IdentifierDecl	* pLambda = & lambda
>232	AssignmentExpr	* pLambda = & lambda
>233	UnaryOp	& lambda
>234	Identifier	lambda
>235	UnaryOperator	&
>236	Identifier	pLambda
>237	Identifier	pLambda
>238	IdentifierDeclType	T *
>239	IdentifierDeclStatement	 
>240	IdentifierDecl	sizeLambda = 1
>241	AssignmentExpr	sizeLambda = 1
>242	PrimaryExpression	1
>243	Identifier	sizeLambda
>244	Identifier	sizeLambda
>245	IdentifierDeclType	long
>246	IdentifierDeclStatement	 
>247	IdentifierDecl	lambda = 0
>248	AssignmentExpr	lambda = 0
>249	PrimaryExpression	0
>250	Identifier	lambda
>251	Identifier	lambda
>252	IdentifierDeclType	T
>253	IfStatement	if ( pr_eps )
>254	CompoundStatement	 
>255	ExpressionStatement	 
>256	CallExpression	mxGetPr ( pr_eps )
>257	ArgumentList	pr_eps
>258	Argument	pr_eps
>259	Identifier	pr_eps
>260	Callee	mxGetPr
>261	Identifier	mxGetPr
>262	Statement	 
>263	Statement	 
>264	Statement	 
>265	Statement	 
>266	Statement	 
>267	Statement	 
>268	IfStatement	if ( sizeE > 1 )
>269	Statement	 
>270	Condition	 
>271	RelationalExpression	sizeE > 1
>272	PrimaryExpression	1
>273	Identifier	sizeE
>274	ExpressionStatement	 
>275	AssignmentExpr	eps = static_cast < T > ( mxGetScalar ( pr_eps ) )
>276	RelationalExpression	static_cast < T > ( mxGetScalar ( pr_eps ) )
>277	RelationalExpression	T > ( mxGetScalar ( pr_eps ) )
>278	CallExpression	mxGetScalar ( pr_eps )
>279	ArgumentList	pr_eps
>280	Argument	pr_eps
>281	Identifier	pr_eps
>282	Callee	mxGetScalar
>283	Identifier	mxGetScalar
>284	Identifier	T
>285	Identifier	static_cast
>286	Identifier	eps
>287	ExpressionStatement	 
>288	ArrayIndexing	dimsE [ 1 ]
>289	PrimaryExpression	1
>290	Identifier	dimsE
>291	Statement	 
>292	Statement	 
>293	Statement	 
>294	Statement	 
>295	Statement	 
>296	Statement	 
>297	Statement	 
>298	Statement	 
>299	Statement	 
>300	Statement	 
>301	Statement	 
>302	Statement	 
>303	Statement	 
>304	Statement	 
>305	Statement	 
>306	Statement	 
>307	Statement	 
>308	IdentifierDeclStatement	 
>309	IdentifierDecl	* dimsE = mxGetDimensions ( pr_eps )
>310	AssignmentExpr	* dimsE = mxGetDimensions ( pr_eps )
>311	CallExpression	mxGetDimensions ( pr_eps )
>312	ArgumentList	pr_eps
>313	Argument	pr_eps
>314	Identifier	pr_eps
>315	Callee	mxGetDimensions
>316	Identifier	mxGetDimensions
>317	Identifier	dimsE
>318	Identifier	dimsE
>319	IdentifierDeclType	const mwSize *
>320	Condition	 
>321	Identifier	pr_eps
>322	IdentifierDeclStatement	 
>323	IdentifierDecl	* pE = & eps
>324	AssignmentExpr	* pE = & eps
>325	UnaryOp	& eps
>326	Identifier	eps
>327	UnaryOperator	&
>328	Identifier	pE
>329	Identifier	pE
>330	IdentifierDeclType	T *
>331	IdentifierDeclStatement	 
>332	IdentifierDecl	eps = 0
>333	AssignmentExpr	eps = 0
>334	PrimaryExpression	0
>335	Identifier	eps
>336	Identifier	eps
>337	IdentifierDeclType	T
>338	IdentifierDeclStatement	 
>339	IdentifierDecl	sizeE = 1
>340	AssignmentExpr	sizeE = 1
>341	PrimaryExpression	1
>342	Identifier	sizeE
>343	Identifier	sizeE
>344	IdentifierDeclType	long
>345	IfStatement	if ( pr_L )
>346	CompoundStatement	 
>347	ExpressionStatement	 
>348	Statement	 
>349	Statement	 
>350	Statement	 
>351	Statement	 
>352	Statement	 
>353	Statement	 
>354	Statement	 
>355	Statement	 
>356	Statement	 
>357	Statement	 
>358	Statement	 
>359	Statement	 
>360	Statement	 
>361	Statement	 
>362	Statement	 
>363	Statement	 
>364	Statement	 
>365	IfStatement	if ( sizeL > 1 )
>366	CompoundStatement	 
>367	ExpressionStatement	 
>368	CallExpression	mxGetPr ( pr_L )
>369	ArgumentList	pr_L
>370	Argument	pr_L
>371	Identifier	pr_L
>372	Callee	mxGetPr
>373	Identifier	mxGetPr
>374	Statement	 
>375	Statement	 
>376	Statement	 
>377	Statement	 
>378	Statement	 
>379	Statement	 
>380	Statement	 
>381	ExpressionStatement	 
>382	CallExpression	mexErrMsgTxt ( \"Type of param.L should be int32\" )
>383	ArgumentList	\"Type of param.L should be int32\"
>384	Argument	\"Type of param.L should be int32\"
>385	PrimaryExpression	\"Type of param.L should be int32\"
>386	Callee	mexErrMsgTxt
>387	Identifier	mexErrMsgTxt
>388	Statement	 
>389	Statement	 
>390	Statement	 
>391	Statement	 
>392	Statement	 
>393	Statement	 
>394	Statement	 
>395	Statement	 
>396	Statement	 
>397	Statement	 
>398	Statement	 
>399	Condition	 
>400	RelationalExpression	sizeL > 1
>401	PrimaryExpression	1
>402	Identifier	sizeL
>403	ExpressionStatement	 
>404	ArrayIndexing	dimsL [ 1 ]
>405	PrimaryExpression	1
>406	Identifier	dimsL
>407	Statement	 
>408	Statement	 
>409	Statement	 
>410	Statement	 
>411	Statement	 
>412	Statement	 
>413	Statement	 
>414	Statement	 
>415	Statement	 
>416	Statement	 
>417	Statement	 
>418	Statement	 
>419	Statement	 
>420	Statement	 
>421	Statement	 
>422	Statement	 
>423	Statement	 
>424	IdentifierDeclStatement	 
>425	IdentifierDecl	* dimsL = mxGetDimensions ( pr_L )
>426	AssignmentExpr	* dimsL = mxGetDimensions ( pr_L )
>427	CallExpression	mxGetDimensions ( pr_L )
>428	ArgumentList	pr_L
>429	Argument	pr_L
>430	Identifier	pr_L
>431	Callee	mxGetDimensions
>432	Identifier	mxGetDimensions
>433	Identifier	dimsL
>434	Identifier	dimsL
>435	IdentifierDeclType	const mwSize *
>436	Condition	 
>437	Identifier	pr_L
>438	IdentifierDeclStatement	 
>439	IdentifierDecl	* pL = & L
>440	AssignmentExpr	* pL = & L
>441	UnaryOp	& L
>442	Identifier	L
>443	UnaryOperator	&
>444	Identifier	pL
>445	Identifier	pL
>446	IdentifierDeclType	long *
>447	IdentifierDeclStatement	 
>448	IdentifierDecl	L = MIN ( n , K )
>449	AssignmentExpr	L = MIN ( n , K )
>450	CallExpression	MIN ( n , K )
>451	ArgumentList	n
>452	Argument	K
>453	Identifier	K
>454	Argument	n
>455	Identifier	n
>456	Callee	MIN
>457	Identifier	MIN
>458	Identifier	L
>459	Identifier	L
>460	IdentifierDeclType	long
>461	IdentifierDeclStatement	 
>462	IdentifierDecl	sizeL = 1
>463	AssignmentExpr	sizeL = 1
>464	PrimaryExpression	1
>465	Identifier	sizeL
>466	Identifier	sizeL
>467	IdentifierDeclType	long
>468	IfStatement	if ( ! pr_L && ! pr_eps && ! pr_lambda )
>469	ExpressionStatement	 
>470	CallExpression	mexErrMsgTxt ( \"You should either provide L, eps or lambda\" )
>471	ArgumentList	\"You should either provide L, eps or lambda\"
>472	Argument	\"You should either provide L, eps or lambda\"
>473	PrimaryExpression	\"You should either provide L, eps or lambda\"
>474	Callee	mexErrMsgTxt
>475	Identifier	mexErrMsgTxt
>476	Condition	 
>477	AndExpression	! pr_L && ! pr_eps && ! pr_lambda
>478	AndExpression	! pr_eps && ! pr_lambda
>479	UnaryOp	! pr_lambda
>480	Identifier	pr_lambda
>481	UnaryOperator	!
>482	UnaryOp	! pr_eps
>483	Identifier	pr_eps
>484	UnaryOperator	!
>485	UnaryOp	! pr_L
>486	Identifier	pr_L
>487	UnaryOperator	!
>488	IdentifierDeclStatement	 
>489	IdentifierDecl	* pr_lambda = mxGetField ( prhs [ 2 ] , 0 , \"lambda\" )
>490	AssignmentExpr	* pr_lambda = mxGetField ( prhs [ 2 ] , 0 , \"lambda\" )
>491	CallExpression	mxGetField ( prhs [ 2 ] , 0 , \"lambda\" )
>492	ArgumentList	prhs [ 2 ]
>493	Argument	\"lambda\"
>494	PrimaryExpression	\"lambda\"
>495	Argument	0
>496	PrimaryExpression	0
>497	Argument	prhs [ 2 ]
>498	ArrayIndexing	prhs [ 2 ]
>499	PrimaryExpression	2
>500	Identifier	prhs
>501	Callee	mxGetField
>502	Identifier	mxGetField
>503	Identifier	pr_lambda
>504	Identifier	pr_lambda
>505	IdentifierDeclType	mxArray *
>506	IdentifierDeclStatement	 
>507	IdentifierDecl	* pr_eps = mxGetField ( prhs [ 2 ] , 0 , \"eps\" )
>508	AssignmentExpr	* pr_eps = mxGetField ( prhs [ 2 ] , 0 , \"eps\" )
>509	CallExpression	mxGetField ( prhs [ 2 ] , 0 , \"eps\" )
>510	ArgumentList	prhs [ 2 ]
>511	Argument	\"eps\"
>512	PrimaryExpression	\"eps\"
>513	Argument	0
>514	PrimaryExpression	0
>515	Argument	prhs [ 2 ]
>516	ArrayIndexing	prhs [ 2 ]
>517	PrimaryExpression	2
>518	Identifier	prhs
>519	Callee	mxGetField
>520	Identifier	mxGetField
>521	Identifier	pr_eps
>522	Identifier	pr_eps
>523	IdentifierDeclType	mxArray *
>524	IdentifierDeclStatement	 
>525	IdentifierDecl	* pr_L = mxGetField ( prhs [ 2 ] , 0 , \"L\" )
>526	AssignmentExpr	* pr_L = mxGetField ( prhs [ 2 ] , 0 , \"L\" )
>527	CallExpression	mxGetField ( prhs [ 2 ] , 0 , \"L\" )
>528	ArgumentList	prhs [ 2 ]
>529	Argument	\"L\"
>530	PrimaryExpression	\"L\"
>531	Argument	0
>532	PrimaryExpression	0
>533	Argument	prhs [ 2 ]
>534	ArrayIndexing	prhs [ 2 ]
>535	PrimaryExpression	2
>536	Identifier	prhs
>537	Callee	mxGetField
>538	Identifier	mxGetField
>539	Identifier	pr_L
>540	Identifier	pr_L
>541	IdentifierDeclType	mxArray *
>542	ExpressionStatement	 
>543	Expression	prhs [ 2 ] , \"numThreads\" , - 1
>544	Expression	\"numThreads\" , - 1
>545	UnaryOp	- 1
>546	PrimaryExpression	1
>547	UnaryOperator	-
>548	PrimaryExpression	\"numThreads\"
>549	ArrayIndexing	prhs [ 2 ]
>550	PrimaryExpression	2
>551	Identifier	prhs
>552	Statement	 
>553	Statement	 
>554	Statement	 
>555	Statement	 
>556	Statement	 
>557	Statement	 
>558	Statement	 
>559	IdentifierDeclStatement	 
>560	IdentifierDecl	alpha
>561	Identifier	alpha
>562	IdentifierDeclType	SpMatrix < T >
>563	IdentifierDeclStatement	 
>564	IdentifierDecl	D ( prD , n , K )
>565	Expression	prD , n , K
>566	Expression	n , K
>567	Identifier	K
>568	Identifier	n
>569	Identifier	prD
>570	Identifier	D
>571	IdentifierDeclType	Matrix < T >
>572	IdentifierDeclStatement	 
>573	IdentifierDecl	X ( prX , n , M )
>574	Expression	prX , n , M
>575	Expression	n , M
>576	Identifier	M
>577	Identifier	n
>578	Identifier	prX
>579	Identifier	X
>580	IdentifierDeclType	Matrix < T >
>581	IfStatement	if ( n != nD )
>582	ExpressionStatement	 
>583	CallExpression	mexErrMsgTxt ( \"argument sizes are not consistent\" )
>584	ArgumentList	\"argument sizes are not consistent\"
>585	Argument	\"argument sizes are not consistent\"
>586	PrimaryExpression	\"argument sizes are not consistent\"
>587	Callee	mexErrMsgTxt
>588	Identifier	mexErrMsgTxt
>589	Condition	 
>590	EqualityExpression	n != nD
>591	Identifier	nD
>592	Identifier	n
>593	ExpressionStatement	 
>594	ArrayIndexing	dimsD [ 1 ]
>595	PrimaryExpression	1
>596	Identifier	dimsD
>597	Statement	 
>598	Statement	 
>599	Statement	 
>600	Statement	 
>601	Statement	 
>602	Statement	 
>603	Statement	 
>604	ExpressionStatement	 
>605	ArrayIndexing	dimsD [ 0 ]
>606	PrimaryExpression	0
>607	Identifier	dimsD
>608	Statement	 
>609	Statement	 
>610	Statement	 
>611	Statement	 
>612	Statement	 
>613	Statement	 
>614	Statement	 
>615	IdentifierDeclStatement	 
>616	IdentifierDecl	* dimsD = mxGetDimensions ( prhs [ 1 ] )
>617	AssignmentExpr	* dimsD = mxGetDimensions ( prhs [ 1 ] )
>618	CallExpression	mxGetDimensions ( prhs [ 1 ] )
>619	ArgumentList	prhs [ 1 ]
>620	Argument	prhs [ 1 ]
>621	ArrayIndexing	prhs [ 1 ]
>622	PrimaryExpression	1
>623	Identifier	prhs
>624	Callee	mxGetDimensions
>625	Identifier	mxGetDimensions
>626	Identifier	dimsD
>627	Identifier	dimsD
>628	IdentifierDeclType	const mwSize *
>629	ExpressionStatement	 
>630	CallExpression	mxGetPr ( prhs [ 1 ] )
>631	ArgumentList	prhs [ 1 ]
>632	Argument	prhs [ 1 ]
>633	ArrayIndexing	prhs [ 1 ]
>634	PrimaryExpression	1
>635	Identifier	prhs
>636	Callee	mxGetPr
>637	Identifier	mxGetPr
>638	Statement	 
>639	Statement	 
>640	Statement	 
>641	Statement	 
>642	Statement	 
>643	Statement	 
>644	Statement	 
>645	Statement	 
>646	Statement	 
>647	ExpressionStatement	 
>648	ArrayIndexing	dimsX [ 1 ]
>649	PrimaryExpression	1
>650	Identifier	dimsX
>651	Statement	 
>652	Statement	 
>653	Statement	 
>654	Statement	 
>655	Statement	 
>656	Statement	 
>657	Statement	 
>658	ExpressionStatement	 
>659	ArrayIndexing	dimsX [ 0 ]
>660	PrimaryExpression	0
>661	Identifier	dimsX
>662	Statement	 
>663	Statement	 
>664	Statement	 
>665	Statement	 
>666	Statement	 
>667	Statement	 
>668	Statement	 
>669	IdentifierDeclStatement	 
>670	IdentifierDecl	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>671	AssignmentExpr	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>672	CallExpression	mxGetDimensions ( prhs [ 0 ] )
>673	ArgumentList	prhs [ 0 ]
>674	Argument	prhs [ 0 ]
>675	ArrayIndexing	prhs [ 0 ]
>676	PrimaryExpression	0
>677	Identifier	prhs
>678	Callee	mxGetDimensions
>679	Identifier	mxGetDimensions
>680	Identifier	dimsX
>681	Identifier	dimsX
>682	IdentifierDeclType	const mwSize *
>683	ExpressionStatement	 
>684	CallExpression	mxGetPr ( prhs [ 0 ] )
>685	ArgumentList	prhs [ 0 ]
>686	Argument	prhs [ 0 ]
>687	ArrayIndexing	prhs [ 0 ]
>688	PrimaryExpression	0
>689	Identifier	prhs
>690	Callee	mxGetPr
>691	Identifier	mxGetPr
>692	Statement	 
>693	Statement	 
>694	Statement	 
>695	Statement	 
>696	Statement	 
>697	Statement	 
>698	Statement	 
>699	Statement	 
>700	Statement	 
>701	IfStatement	if ( ! mxIsStruct ( prhs [ 2 ] ) )
>702	ExpressionStatement	 
>703	CallExpression	mexErrMsgTxt ( \"argument 3 should be struct\" )
>704	ArgumentList	\"argument 3 should be struct\"
>705	Argument	\"argument 3 should be struct\"
>706	PrimaryExpression	\"argument 3 should be struct\"
>707	Callee	mexErrMsgTxt
>708	Identifier	mexErrMsgTxt
>709	Condition	 
>710	UnaryOp	! mxIsStruct ( prhs [ 2 ] )
>711	CallExpression	mxIsStruct ( prhs [ 2 ] )
>712	ArgumentList	prhs [ 2 ]
>713	Argument	prhs [ 2 ]
>714	ArrayIndexing	prhs [ 2 ]
>715	PrimaryExpression	2
>716	Identifier	prhs
>717	Callee	mxIsStruct
>718	Identifier	mxIsStruct
>719	UnaryOperator	!
>720	IfStatement	if ( mxIsSparse ( prhs [ 1 ] ) )
>721	ExpressionStatement	 
>722	CallExpression	mexErrMsgTxt ( \"argument 2 should be full\" )
>723	ArgumentList	\"argument 2 should be full\"
>724	Argument	\"argument 2 should be full\"
>725	PrimaryExpression	\"argument 2 should be full\"
>726	Callee	mexErrMsgTxt
>727	Identifier	mexErrMsgTxt
>728	Condition	 
>729	CallExpression	mxIsSparse ( prhs [ 1 ] )
>730	ArgumentList	prhs [ 1 ]
>731	Argument	prhs [ 1 ]
>732	ArrayIndexing	prhs [ 1 ]
>733	PrimaryExpression	1
>734	Identifier	prhs
>735	Callee	mxIsSparse
>736	Identifier	mxIsSparse
>737	IfStatement	if ( ! mexCheckType < T > ( prhs [ 1 ] ) )
>738	ExpressionStatement	 
>739	CallExpression	mexErrMsgTxt ( \"type of argument 2 is not consistent\" )
>740	ArgumentList	\"type of argument 2 is not consistent\"
>741	Argument	\"type of argument 2 is not consistent\"
>742	PrimaryExpression	\"type of argument 2 is not consistent\"
>743	Callee	mexErrMsgTxt
>744	Identifier	mexErrMsgTxt
>745	Condition	 
>746	RelationalExpression	! mexCheckType < T > ( prhs [ 1 ] )
>747	RelationalExpression	T > ( prhs [ 1 ] )
>748	ArrayIndexing	prhs [ 1 ]
>749	PrimaryExpression	1
>750	Identifier	prhs
>751	Identifier	T
>752	UnaryOp	! mexCheckType
>753	Identifier	mexCheckType
>754	UnaryOperator	!
>755	IfStatement	if ( mxIsSparse ( prhs [ 0 ] ) )
>756	ExpressionStatement	 
>757	CallExpression	mexErrMsgTxt ( \"argument 1 should be full\" )
>758	ArgumentList	\"argument 1 should be full\"
>759	Argument	\"argument 1 should be full\"
>760	PrimaryExpression	\"argument 1 should be full\"
>761	Callee	mexErrMsgTxt
>762	Identifier	mexErrMsgTxt
>763	Condition	 
>764	CallExpression	mxIsSparse ( prhs [ 0 ] )
>765	ArgumentList	prhs [ 0 ]
>766	Argument	prhs [ 0 ]
>767	ArrayIndexing	prhs [ 0 ]
>768	PrimaryExpression	0
>769	Identifier	prhs
>770	Callee	mxIsSparse
>771	Identifier	mxIsSparse
>772	IfStatement	if ( ! mexCheckType < T > ( prhs [ 0 ] ) )
>773	ExpressionStatement	 
>774	CallExpression	mexErrMsgTxt ( \"type of argument 1 is not consistent\" )
>775	ArgumentList	\"type of argument 1 is not consistent\"
>776	Argument	\"type of argument 1 is not consistent\"
>777	PrimaryExpression	\"type of argument 1 is not consistent\"
>778	Callee	mexErrMsgTxt
>779	Identifier	mexErrMsgTxt
>780	Condition	 
>781	RelationalExpression	! mexCheckType < T > ( prhs [ 0 ] )
>782	RelationalExpression	T > ( prhs [ 0 ] )
>783	ArrayIndexing	prhs [ 0 ]
>784	PrimaryExpression	0
>785	Identifier	prhs
>786	Identifier	T
>787	UnaryOp	! mexCheckType
>788	Identifier	mexCheckType
>789	UnaryOperator	!
>844	FunctionDef	mexFunction (int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ])
>845	ParameterList	int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ]
>846	Parameter	 
>847	Identifier	prhs
>848	ParameterType	const mxArray * [ ]
>849	Parameter	 
>850	Identifier	nrhs
>851	ParameterType	int
>852	Parameter	 
>853	Identifier	plhs
>854	ParameterType	mxArray * [ ]
>855	Parameter	 
>856	Identifier	nlhs
>857	ParameterType	int
>858	ReturnType	void
>859	CompoundStatement	 
>860	IfStatement	if ( mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS )
>861	ElseStatement	else
>862	CompoundStatement	 
>863	ExpressionStatement	 
>864	RelationalExpression	callFunction < float > ( plhs , prhs , nlhs )
>865	RelationalExpression	float > ( plhs , prhs , nlhs )
>866	Expression	plhs , prhs , nlhs
>867	Expression	prhs , nlhs
>868	Identifier	nlhs
>869	Identifier	prhs
>870	Identifier	plhs
>871	Identifier	float
>872	Identifier	callFunction
>873	CompoundStatement	 
>874	ExpressionStatement	 
>875	RelationalExpression	callFunction < double > ( plhs , prhs , nlhs )
>876	RelationalExpression	double > ( plhs , prhs , nlhs )
>877	Expression	plhs , prhs , nlhs
>878	Expression	prhs , nlhs
>879	Identifier	nlhs
>880	Identifier	prhs
>881	Identifier	plhs
>882	Identifier	double
>883	Identifier	callFunction
>884	Condition	 
>885	EqualityExpression	mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS
>886	Identifier	mxDOUBLE_CLASS
>887	CallExpression	mxGetClassID ( prhs [ 0 ] )
>888	ArgumentList	prhs [ 0 ]
>889	Argument	prhs [ 0 ]
>890	ArrayIndexing	prhs [ 0 ]
>891	PrimaryExpression	0
>892	Identifier	prhs
>893	Callee	mxGetClassID
>894	Identifier	mxGetClassID
>895	IfStatement	if ( nlhs != 1 && nlhs != 2 )
>896	ExpressionStatement	 
>897	CallExpression	mexErrMsgTxt ( \"Bad number of output arguments\" )
>898	ArgumentList	\"Bad number of output arguments\"
>899	Argument	\"Bad number of output arguments\"
>900	PrimaryExpression	\"Bad number of output arguments\"
>901	Callee	mexErrMsgTxt
>902	Identifier	mexErrMsgTxt
>903	Condition	 
>904	AndExpression	nlhs != 1 && nlhs != 2
>905	EqualityExpression	nlhs != 2
>906	PrimaryExpression	2
>907	Identifier	nlhs
>908	EqualityExpression	nlhs != 1
>909	PrimaryExpression	1
>910	Identifier	nlhs
>911	IfStatement	if ( nrhs != 3 )
>912	ExpressionStatement	 
>913	CallExpression	mexErrMsgTxt ( \"Bad number of inputs arguments\" )
>914	ArgumentList	\"Bad number of inputs arguments\"
>915	Argument	\"Bad number of inputs arguments\"
>916	PrimaryExpression	\"Bad number of inputs arguments\"
>917	Callee	mexErrMsgTxt
>918	Identifier	mexErrMsgTxt
>919	Condition	 
>920	EqualityExpression	nrhs != 3
>921	PrimaryExpression	3
>922	Identifier	nrhs
<3=15,14,4
<4=11,8,5
<5=7,6
<8=10,9
<11=13,12
<15=772,755,737,720,701,700,699,698,697,696,695,694,693,692,683,669,668,667,666,665,664,663,662,658,657,656,655,654,653,652,651,647,646,645,644,643,642,641,640,639,638,16,64,96,154,161,230,239,246,253,322,331,338,345,438,447,461,468,488,506,524,542,552,553,554,555,556,557,558,559,563,572,581,593,597,598,599,600,601,602,603,604,608,609,610,611,612,613,614,615,629
<16=17
<17=62,18
<18=58,56,54,47,40,33,26,19
<19=20
<20=22,21
<22=23
<23=25,24
<26=27
<27=29,28
<29=30
<30=32,31
<33=34
<34=36,35
<36=37
<37=39,38
<40=41
<41=43,42
<43=44
<44=46,45
<47=48
<48=50,49
<50=51
<51=53,52
<54=55
<56=57
<58=59
<59=61,60
<62=63
<64=65
<65=95,66
<66=94,67
<67=93,68
<68=92,69
<69=91,70
<70=90,71
<71=89,72
<72=88,73
<73=85,74
<74=82,75
<75=79,76
<76=78,77
<79=81,80
<82=84,83
<85=87,86
<96=150,97
<97=138,137,136,135,134,133,132,131,130,129,120,111,104,98
<98=99
<99=103,100
<100=102,101
<104=105
<105=107,106
<107=108
<108=110,109
<111=112
<112=119,118,113
<113=117,114
<114=116,115
<120=121
<121=127,122
<122=123
<123=124
<124=126,125
<127=128
<138=139
<139=147,140
<140=146,141
<141=145,142
<142=144,143
<147=149,148
<150=151
<151=153,152
<154=155
<155=160,159,156
<156=158,157
<161=228,162
<162=216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,195,182,176,175,174,173,172,171,170,163
<163=164
<164=168,165
<165=166
<166=167
<168=169
<176=178,177
<178=179
<179=181,180
<182=183
<183=194,184
<184=193,185
<185=192,186
<186=190,187
<187=188
<188=189
<190=191
<195=196
<196=198,197
<216=217
<217=227,226,218
<218=225,219
<219=223,220
<220=221
<221=222
<223=224
<228=229
<230=231
<231=238,237,232
<232=236,233
<233=235,234
<239=240
<240=245,244,241
<241=243,242
<246=247
<247=252,251,248
<248=250,249
<253=320,254
<254=308,307,306,305,304,303,302,301,300,299,298,297,296,295,294,293,292,291,287,274,268,267,266,265,264,263,262,255
<255=256
<256=260,257
<257=258
<258=259
<260=261
<268=270,269
<270=271
<271=273,272
<274=275
<275=286,276
<276=285,277
<277=284,278
<278=282,279
<279=280
<280=281
<282=283
<287=288
<288=290,289
<308=309
<309=319,318,310
<310=317,311
<311=315,312
<312=313
<313=314
<315=316
<320=321
<322=323
<323=330,329,324
<324=328,325
<325=327,326
<331=332
<332=337,336,333
<333=335,334
<338=339
<339=344,343,340
<340=342,341
<345=436,346
<346=424,423,422,421,420,419,418,417,416,415,414,413,412,411,410,409,408,407,403,365,364,363,362,361,360,359,358,357,356,355,354,353,352,351,350,349,348,347
<365=399,366
<366=398,397,396,395,394,393,392,391,390,389,388,381,380,379,378,377,376,375,374,367
<367=368
<368=372,369
<369=370
<370=371
<372=373
<381=382
<382=386,383
<383=384
<384=385
<386=387
<399=400
<400=402,401
<403=404
<404=406,405
<424=425
<425=435,434,426
<426=433,427
<427=431,428
<428=429
<429=430
<431=432
<436=437
<438=439
<439=446,445,440
<440=444,441
<441=443,442
<447=448
<448=460,459,449
<449=458,450
<450=456,451
<451=454,452
<452=453
<454=455
<456=457
<461=462
<462=467,466,463
<463=465,464
<468=476,469
<469=470
<470=474,471
<471=472
<472=473
<474=475
<476=477
<477=485,478
<478=482,479
<479=481,480
<482=484,483
<485=487,486
<488=489
<489=505,504,490
<490=503,491
<491=501,492
<492=497,495,493
<493=494
<495=496
<497=498
<498=500,499
<501=502
<506=507
<507=523,522,508
<508=521,509
<509=519,510
<510=515,513,511
<511=512
<513=514
<515=516
<516=518,517
<519=520
<524=525
<525=541,540,526
<526=539,527
<527=537,528
<528=533,531,529
<529=530
<531=532
<533=534
<534=536,535
<537=538
<542=543
<543=549,544
<544=548,545
<545=547,546
<549=551,550
<559=560
<560=562,561
<563=564
<564=571,570,565
<565=569,566
<566=568,567
<572=573
<573=580,579,574
<574=578,575
<575=577,576
<581=589,582
<582=583
<583=587,584
<584=585
<585=586
<587=588
<589=590
<590=592,591
<593=594
<594=596,595
<604=605
<605=607,606
<615=616
<616=628,627,617
<617=626,618
<618=624,619
<619=620
<620=621
<621=623,622
<624=625
<629=630
<630=636,631
<631=632
<632=633
<633=635,634
<636=637
<647=648
<648=650,649
<658=659
<659=661,660
<669=670
<670=682,681,671
<671=680,672
<672=678,673
<673=674
<674=675
<675=677,676
<678=679
<683=684
<684=690,685
<685=686
<686=687
<687=689,688
<690=691
<701=709,702
<702=703
<703=707,704
<704=705
<705=706
<707=708
<709=710
<710=719,711
<711=717,712
<712=713
<713=714
<714=716,715
<717=718
<720=728,721
<721=722
<722=726,723
<723=724
<724=725
<726=727
<728=729
<729=735,730
<730=731
<731=732
<732=734,733
<735=736
<737=745,738
<738=739
<739=743,740
<740=741
<741=742
<743=744
<745=746
<746=752,747
<747=751,748
<748=750,749
<752=754,753
<755=763,756
<756=757
<757=761,758
<758=759
<759=760
<761=762
<763=764
<764=770,765
<765=766
<766=767
<767=769,768
<770=771
<772=780,773
<773=774
<774=778,775
<775=776
<776=777
<778=779
<780=781
<781=787,782
<782=786,783
<783=785,784
<787=789,788
<844=859,858,845
<845=855,852,849,846
<846=848,847
<849=851,850
<852=854,853
<855=857,856
<859=911,895,860
<860=884,873,861
<861=862
<862=863
<863=864
<864=872,865
<865=871,866
<866=870,867
<867=869,868
<873=874
<874=875
<875=883,876
<876=882,877
<877=881,878
<878=880,879
<884=885
<885=887,886
<887=893,888
<888=889
<889=890
<890=892,891
<893=894
<895=903,896
<896=897
<897=901,898
<898=899
<899=900
<901=902
<903=904
<904=908,905
<905=907,906
<908=910,909
<911=919,912
<912=913
<913=917,914
<914=915
<915=916
<917=918
<919=920
<920=922,921
