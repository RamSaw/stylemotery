>3	FunctionDef	PythonSystem_initFromReferenceP (unsigned long long refP)
>4	ParameterList	unsigned long long refP
>5	Parameter	 
>6	Identifier	refP
>7	ParameterType	unsigned long long
>8	ReturnType	void
>9	CompoundStatement	 
>10	ExpressionStatement	 
>11	CallExpression	nta 
>12	ArgumentList	* p
>13	Argument	* p
>14	UnaryOp	* p
>15	Identifier	p
>16	UnaryOperator	*
>17	Callee	nta 
>18	Identifier	nta 
>19	IdentifierDeclStatement	 
>20	IdentifierDecl	* p = ( nta 
>21	AssignmentExpr	* p = ( nta 
>22	CastExpression	( nta 
>23	Identifier	refP
>24	CastTarget	nta 
>25	Identifier	p
>26	Identifier	p
>27	IdentifierDeclType	const nta 
>28	ExpressionStatement	 
>29	CallExpression	NTA_CHECK ( refP != 0 )
>30	ArgumentList	refP != 0
>31	Argument	refP != 0
>32	EqualityExpression	refP != 0
>33	PrimaryExpression	0
>34	Identifier	refP
>35	Callee	NTA_CHECK
>36	Identifier	NTA_CHECK
>43	FunctionDef	initNumpyLibraryForImageSensorLite ()
>44	ParameterList	 
>45	ReturnType	int
>46	CompoundStatement	 
>47	ReturnStatement	 
>48	CallExpression	_import_array ( )
>49	ArgumentList	 
>50	Callee	_import_array
>51	Identifier	_import_array
>56	FunctionDef	extractAuxInfo (const char * pCtlBufAddr , BBOX * psBox , int * pnAddress , int * pnPartitionID , int * pnCategoryID , \
>57	ParameterList	const char * pCtlBufAddr , BBOX * psBox , int * pnAddress , int * pnPartitionID , int * pnCategoryID , int * pnVideoID , \
>58	Parameter	 
>59	Identifier	pnAlphaAddress
>60	ParameterType	int *
>61	Parameter	 
>62	Identifier	pnVideoID
>63	ParameterType	int *
>64	Parameter	 
>65	Identifier	pnCategoryID
>66	ParameterType	int *
>67	Parameter	 
>68	Identifier	pnPartitionID
>69	ParameterType	int *
>70	Parameter	 
>71	Identifier	pnAddress
>72	ParameterType	int *
>73	Parameter	 
>74	Identifier	psBox
>75	ParameterType	BBOX *
>76	Parameter	 
>77	Identifier	pCtlBufAddr
>78	ParameterType	const char *
>79	ReturnType	NTA_EXPORT int
>80	CompoundStatement	 
>81	ReturnStatement	 
>82	PrimaryExpression	0
>83	BlockStarter	 
>84	CompoundStatement	 
>85	ReturnStatement	return - 1 ;
>86	UnaryOp	- 1
>87	PrimaryExpression	1
>88	UnaryOperator	-
>89	ExpressionStatement	NTA_WARN << \"gaborNode -- returning error
>90	ShiftExpression	NTA_WARN << \"gaborNode -- returning error
>91	ShiftExpression	\"gaborNode -- returning error
>92	CallExpression	e . what ( )
>93	ArgumentList	 
>94	Callee	e . what
>95	MemberAccess	e . what
>96	Identifier	what
>97	Identifier	e
>98	PrimaryExpression	\"gaborNode -- returning error
>99	Identifier	NTA_WARN
>100	Identifier	e
>101	BlockStarter	 
>102	CompoundStatement	 
>103	IfStatement	if ( pnAlphaAddress )
>104	ExpressionStatement	* pnAlphaAddress = DATA_ALPHA_ADDRESS ( pCtlBufAddr )
>105	AssignmentExpr	* pnAlphaAddress = DATA_ALPHA_ADDRESS ( pCtlBufAddr )
>106	CallExpression	DATA_ALPHA_ADDRESS ( pCtlBufAddr )
>107	ArgumentList	pCtlBufAddr
>108	Argument	pCtlBufAddr
>109	Identifier	pCtlBufAddr
>110	Callee	DATA_ALPHA_ADDRESS
>111	Identifier	DATA_ALPHA_ADDRESS
>112	UnaryOp	* pnAlphaAddress
>113	Identifier	pnAlphaAddress
>114	UnaryOperator	*
>115	Condition	pnAlphaAddress
>116	Identifier	pnAlphaAddress
>117	IfStatement	if ( pnAddress )
>118	ExpressionStatement	* pnAddress = DATA_ADDRESS ( pCtlBufAddr )
>119	AssignmentExpr	* pnAddress = DATA_ADDRESS ( pCtlBufAddr )
>120	CallExpression	DATA_ADDRESS ( pCtlBufAddr )
>121	ArgumentList	pCtlBufAddr
>122	Argument	pCtlBufAddr
>123	Identifier	pCtlBufAddr
>124	Callee	DATA_ADDRESS
>125	Identifier	DATA_ADDRESS
>126	UnaryOp	* pnAddress
>127	Identifier	pnAddress
>128	UnaryOperator	*
>129	Condition	pnAddress
>130	Identifier	pnAddress
>131	IfStatement	if ( pnVideoID )
>132	ExpressionStatement	* pnVideoID = VIDEO_ID ( pCtlBufAddr )
>133	AssignmentExpr	* pnVideoID = VIDEO_ID ( pCtlBufAddr )
>134	CallExpression	VIDEO_ID ( pCtlBufAddr )
>135	ArgumentList	pCtlBufAddr
>136	Argument	pCtlBufAddr
>137	Identifier	pCtlBufAddr
>138	Callee	VIDEO_ID
>139	Identifier	VIDEO_ID
>140	UnaryOp	* pnVideoID
>141	Identifier	pnVideoID
>142	UnaryOperator	*
>143	Condition	pnVideoID
>144	Identifier	pnVideoID
>145	IfStatement	if ( pnCategoryID )
>146	ExpressionStatement	* pnCategoryID = CATEGORY_ID ( pCtlBufAddr )
>147	AssignmentExpr	* pnCategoryID = CATEGORY_ID ( pCtlBufAddr )
>148	CallExpression	CATEGORY_ID ( pCtlBufAddr )
>149	ArgumentList	pCtlBufAddr
>150	Argument	pCtlBufAddr
>151	Identifier	pCtlBufAddr
>152	Callee	CATEGORY_ID
>153	Identifier	CATEGORY_ID
>154	UnaryOp	* pnCategoryID
>155	Identifier	pnCategoryID
>156	UnaryOperator	*
>157	Condition	pnCategoryID
>158	Identifier	pnCategoryID
>159	IfStatement	if ( pnPartitionID )
>160	ExpressionStatement	* pnPartitionID = PARTITION_ID ( pCtlBufAddr )
>161	AssignmentExpr	* pnPartitionID = PARTITION_ID ( pCtlBufAddr )
>162	CallExpression	PARTITION_ID ( pCtlBufAddr )
>163	ArgumentList	pCtlBufAddr
>164	Argument	pCtlBufAddr
>165	Identifier	pCtlBufAddr
>166	Callee	PARTITION_ID
>167	Identifier	PARTITION_ID
>168	UnaryOp	* pnPartitionID
>169	Identifier	pnPartitionID
>170	UnaryOperator	*
>171	Condition	pnPartitionID
>172	Identifier	pnPartitionID
>173	ExpressionStatement	psBox -> nBottom = BOX_BOTTOM ( pCtlBufAddr )
>174	AssignmentExpr	psBox -> nBottom = BOX_BOTTOM ( pCtlBufAddr )
>175	CallExpression	BOX_BOTTOM ( pCtlBufAddr )
>176	ArgumentList	pCtlBufAddr
>177	Argument	pCtlBufAddr
>178	Identifier	pCtlBufAddr
>179	Callee	BOX_BOTTOM
>180	Identifier	BOX_BOTTOM
>181	PtrMemberAccess	psBox -> nBottom
>182	Identifier	nBottom
>183	Identifier	psBox
>184	ExpressionStatement	psBox -> nRight = BOX_RIGHT ( pCtlBufAddr )
>185	AssignmentExpr	psBox -> nRight = BOX_RIGHT ( pCtlBufAddr )
>186	CallExpression	BOX_RIGHT ( pCtlBufAddr )
>187	ArgumentList	pCtlBufAddr
>188	Argument	pCtlBufAddr
>189	Identifier	pCtlBufAddr
>190	Callee	BOX_RIGHT
>191	Identifier	BOX_RIGHT
>192	PtrMemberAccess	psBox -> nRight
>193	Identifier	nRight
>194	Identifier	psBox
>195	ExpressionStatement	psBox -> nTop = BOX_TOP ( pCtlBufAddr )
>196	AssignmentExpr	psBox -> nTop = BOX_TOP ( pCtlBufAddr )
>197	CallExpression	BOX_TOP ( pCtlBufAddr )
>198	ArgumentList	pCtlBufAddr
>199	Argument	pCtlBufAddr
>200	Identifier	pCtlBufAddr
>201	Callee	BOX_TOP
>202	Identifier	BOX_TOP
>203	PtrMemberAccess	psBox -> nTop
>204	Identifier	nTop
>205	Identifier	psBox
>206	ExpressionStatement	psBox -> nLeft = BOX_LEFT ( pCtlBufAddr )
>207	AssignmentExpr	psBox -> nLeft = BOX_LEFT ( pCtlBufAddr )
>208	CallExpression	BOX_LEFT ( pCtlBufAddr )
>209	ArgumentList	pCtlBufAddr
>210	Argument	pCtlBufAddr
>211	Identifier	pCtlBufAddr
>212	Callee	BOX_LEFT
>213	Identifier	BOX_LEFT
>214	PtrMemberAccess	psBox -> nLeft
>215	Identifier	nLeft
>216	Identifier	psBox
<3=9,8,4
<4=5
<5=7,6
<9=28,19,10
<10=11
<11=17,12
<12=13
<13=14
<14=16,15
<17=18
<19=20
<20=27,26,21
<21=25,22
<22=24,23
<28=29
<29=35,30
<30=31
<31=32
<32=34,33
<35=36
<43=46,45,44
<46=47
<47=48
<48=50,49
<50=51
<56=80,79,57
<57=76,73,70,67,64,61,58
<58=60,59
<61=63,62
<64=66,65
<67=69,68
<70=72,71
<73=75,74
<76=78,77
<80=101,83,81
<81=82
<83=100,84
<84=89,85
<85=86
<86=88,87
<89=90
<90=99,91
<91=98,92
<92=94,93
<94=95
<95=97,96
<101=102
<102=206,195,184,173,159,145,131,117,103
<103=115,104
<104=105
<105=112,106
<106=110,107
<107=108
<108=109
<110=111
<112=114,113
<115=116
<117=129,118
<118=119
<119=126,120
<120=124,121
<121=122
<122=123
<124=125
<126=128,127
<129=130
<131=143,132
<132=133
<133=140,134
<134=138,135
<135=136
<136=137
<138=139
<140=142,141
<143=144
<145=157,146
<146=147
<147=154,148
<148=152,149
<149=150
<150=151
<152=153
<154=156,155
<157=158
<159=171,160
<160=161
<161=168,162
<162=166,163
<163=164
<164=165
<166=167
<168=170,169
<171=172
<173=174
<174=181,175
<175=179,176
<176=177
<177=178
<179=180
<181=183,182
<184=185
<185=192,186
<186=190,187
<187=188
<188=189
<190=191
<192=194,193
<195=196
<196=203,197
<197=201,198
<198=199
<199=200
<201=202
<203=205,204
<206=207
<207=214,208
<208=212,209
<209=210
<210=211
<212=213
<214=216,215
