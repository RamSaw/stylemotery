>3	FunctionDef	cnc_load_lib (const char * clientDllName)
>4	ParameterList	const char * clientDllName
>5	Parameter	 
>6	Identifier	clientDllName
>7	ParameterType	const char *
>8	ReturnType	static communicator_loader_type
>9	CompoundStatement	 
>10	ReturnStatement	 
>11	Identifier	loader
>12	ExpressionStatement	 
>13	ShiftExpression	std 
>14	ShiftExpression	\"done.\" << std 
>15	Identifier	std 
>16	PrimaryExpression	\"done.\"
>17	Identifier	std 
>18	IfStatement	if ( ! clientDllHandle )
>19	CompoundStatement	 
>20	ReturnStatement	 
>21	Identifier	NULL
>22	ExpressionStatement	 
>23	ShiftExpression	std 
>24	ShiftExpression	\"Error code
>25	ShiftExpression	GetLastError ( ) << std 
>26	Identifier	std 
>27	CallExpression	GetLastError ( )
>28	ArgumentList	 
>29	Callee	GetLastError
>30	Identifier	GetLastError
>31	PrimaryExpression	\"Error code
>32	Identifier	std 
>33	ExpressionStatement	 
>34	ShiftExpression	std 
>35	ShiftExpression	\"\nCould not open client library \'\" << clientDllName << \"\'\n\"
>36	ShiftExpression	clientDllName << \"\'\n\"
>37	PrimaryExpression	\"\'\n\"
>38	Identifier	clientDllName
>39	PrimaryExpression	\"\nCould not open client library \'\"
>40	Identifier	std 
>41	Condition	 
>42	UnaryOp	! clientDllHandle
>43	Identifier	clientDllHandle
>44	UnaryOperator	!
>45	ExpressionStatement	 
>46	AssignmentExpr	loader = ( communicator_loader_type ) GetProcAddress ( clientDllHandle , \"load_communicator_\" )
>47	CastExpression	( communicator_loader_type ) GetProcAddress ( clientDllHandle , \"load_communicator_\" )
>48	CallExpression	GetProcAddress ( clientDllHandle , \"load_communicator_\" )
>49	ArgumentList	clientDllHandle
>50	Argument	\"load_communicator_\"
>51	PrimaryExpression	\"load_communicator_\"
>52	Argument	clientDllHandle
>53	Identifier	clientDllHandle
>54	Callee	GetProcAddress
>55	Identifier	GetProcAddress
>56	CastTarget	communicator_loader_type
>57	Identifier	loader
>58	IdentifierDeclStatement	 
>59	IdentifierDecl	loader
>60	Identifier	loader
>61	IdentifierDeclType	communicator_loader_type
>62	ExpressionStatement	 
>63	ShiftExpression	std 
>64	PrimaryExpression	\"...and communicator...\"
>65	Identifier	std 
>66	IfStatement	if ( ! clientDllHandle )
>67	CompoundStatement	 
>68	ReturnStatement	 
>69	Identifier	NULL
>70	ExpressionStatement	 
>71	ShiftExpression	std 
>72	ShiftExpression	\"Error code
>73	ShiftExpression	GetLastError ( ) << std 
>74	Identifier	std 
>75	CallExpression	GetLastError ( )
>76	ArgumentList	 
>77	Callee	GetLastError
>78	Identifier	GetLastError
>79	PrimaryExpression	\"Error code
>80	Identifier	std 
>81	ExpressionStatement	 
>82	ShiftExpression	std 
>83	ShiftExpression	\"\nCould not open client library \'\" << clientDllName << \"\'\n\"
>84	ShiftExpression	clientDllName << \"\'\n\"
>85	PrimaryExpression	\"\'\n\"
>86	Identifier	clientDllName
>87	PrimaryExpression	\"\nCould not open client library \'\"
>88	Identifier	std 
>89	Condition	 
>90	UnaryOp	! clientDllHandle
>91	Identifier	clientDllHandle
>92	UnaryOperator	!
>93	IdentifierDeclStatement	 
>94	IdentifierDecl	clientDllHandle = LoadLibraryA ( lib . c_str ( ) )
>95	AssignmentExpr	clientDllHandle = LoadLibraryA ( lib . c_str ( ) )
>96	CallExpression	LoadLibraryA ( lib . c_str ( ) )
>97	ArgumentList	lib . c_str ( )
>98	Argument	lib . c_str ( )
>99	CallExpression	lib . c_str ( )
>100	ArgumentList	 
>101	Callee	lib . c_str
>102	MemberAccess	lib . c_str
>103	Identifier	c_str
>104	Identifier	lib
>105	Callee	LoadLibraryA
>106	Identifier	LoadLibraryA
>107	Identifier	clientDllHandle
>108	Identifier	clientDllHandle
>109	IdentifierDeclType	HMODULE
>110	ExpressionStatement	 
>111	CallExpression	lib . append ( \".dll\" )
>112	ArgumentList	\".dll\"
>113	Argument	\".dll\"
>114	PrimaryExpression	\".dll\"
>115	Callee	lib . append
>116	MemberAccess	lib . append
>117	Identifier	append
>118	Identifier	lib
>119	IdentifierDeclStatement	 
>120	IdentifierDecl	lib ( clientDllName )
>121	Identifier	clientDllName
>122	Identifier	lib
>123	IdentifierDeclType	std 
>124	ExpressionStatement	 
>125	ShiftExpression	std 
>126	ShiftExpression	\"Loading \" << clientDllName << \"...\" << std 
>127	ShiftExpression	clientDllName << \"...\" << std 
>128	ShiftExpression	\"...\" << std 
>129	Identifier	std 
>130	PrimaryExpression	\"...\"
>131	Identifier	clientDllName
>132	PrimaryExpression	\"Loading \"
>133	Identifier	std 
>145	FunctionDef	comm_lib_name (const char * comm , bool use_itac)
>146	ParameterList	const char * comm , bool use_itac
>147	Parameter	 
>148	Identifier	use_itac
>149	ParameterType	bool
>150	Parameter	 
>151	Identifier	comm
>152	ParameterType	const char *
>153	ReturnType	const std 
>154	CompoundStatement	 
>155	ReturnStatement	 
>156	Identifier	lib_name
>157	ExpressionStatement	 
>158	CastExpression	( _x ) lib_name . append ( _STRFY ( CNC_DLL_SUFX ) )
>159	CallExpression	lib_name . append ( _STRFY ( CNC_DLL_SUFX ) )
>160	ArgumentList	_STRFY ( CNC_DLL_SUFX )
>161	Argument	_STRFY ( CNC_DLL_SUFX )
>162	CallExpression	_STRFY ( CNC_DLL_SUFX )
>163	ArgumentList	CNC_DLL_SUFX
>164	Argument	CNC_DLL_SUFX
>165	Identifier	CNC_DLL_SUFX
>166	Callee	_STRFY
>167	Identifier	_STRFY
>168	Callee	lib_name . append
>169	MemberAccess	lib_name . append
>170	Identifier	append
>171	Identifier	lib_name
>172	CastTarget	_x
>173	Statement	 
>174	Statement	 
>175	Statement	 
>176	Statement	 
>177	Statement	 
>178	Statement	 
>179	Statement	 
>180	Statement	 
>181	Statement	 
>182	Statement	 
>183	Statement	 
>184	Statement	 
>185	ExpressionStatement	 
>186	CallExpression	lib_name . append ( \"_debug\" )
>187	ArgumentList	\"_debug\"
>188	Argument	\"_debug\"
>189	PrimaryExpression	\"_debug\"
>190	Callee	lib_name . append
>191	MemberAccess	lib_name . append
>192	Identifier	append
>193	Identifier	lib_name
>194	IfStatement	if ( use_itac )
>195	ExpressionStatement	 
>196	CallExpression	lib_name . append ( \"_itac\" )
>197	ArgumentList	\"_itac\"
>198	Argument	\"_itac\"
>199	PrimaryExpression	\"_itac\"
>200	Callee	lib_name . append
>201	MemberAccess	lib_name . append
>202	Identifier	append
>203	Identifier	lib_name
>204	Condition	 
>205	Identifier	use_itac
>206	IfStatement	if ( comm != NULL )
>207	ElseStatement	else
>208	CompoundStatement	 
>209	ReturnStatement	 
>210	CallExpression	std 
>211	ArgumentList	 
>212	Callee	std 
>213	Identifier	std 
>214	ExpressionStatement	 
>215	ShiftExpression	std 
>216	ShiftExpression	\"Warning
>217	Identifier	std 
>218	PrimaryExpression	\"Warning
>219	Identifier	std 
>220	CompoundStatement	 
>221	IfStatement	if ( strcmp ( comm , \"SOCKETS\" ) == 0 )
>222	ElseStatement	else
>223	IfStatement	if ( strcmp ( comm , \"MPI\" ) == 0 )
>224	ElseStatement	else
>225	IfStatement	if ( strcmp ( comm , \"SHMEM\" ) == 0 )
>226	ElseStatement	else
>227	IfStatement	if ( strcmp ( comm , \"XN\" ) == 0 )
>228	ElseStatement	else
>229	CompoundStatement	 
>230	ExpressionStatement	 
>231	CallExpression	lib_name . append ( \"socket\" )
>232	ArgumentList	\"socket\"
>233	Argument	\"socket\"
>234	PrimaryExpression	\"socket\"
>235	Callee	lib_name . append
>236	MemberAccess	lib_name . append
>237	Identifier	append
>238	Identifier	lib_name
>239	ExpressionStatement	 
>240	ShiftExpression	std 
>241	ShiftExpression	\"Warning
>242	ShiftExpression	comm << \" is not supported (currently supported  options are SHMEM, SOCKETS, MPI, or XN);\" << \"proceeding \
>243	ShiftExpression	\" is not supported (currently supported  options are SHMEM, SOCKETS, MPI, or XN);\" << \"proceeding in \
>244	ShiftExpression	\"proceeding in SOCKETS mode.\" << std 
>245	Identifier	std 
>246	PrimaryExpression	\"proceeding in SOCKETS mode.\"
>247	PrimaryExpression	\" is not supported (currently supported  options are SHMEM, SOCKETS, MPI, or XN);\"
>248	Identifier	comm
>249	PrimaryExpression	\"Warning
>250	Identifier	std 
>251	CompoundStatement	 
>252	ExpressionStatement	 
>253	CallExpression	lib_name . append ( \"client\" )
>254	ArgumentList	\"client\"
>255	Argument	\"client\"
>256	PrimaryExpression	\"client\"
>257	Callee	lib_name . append
>258	MemberAccess	lib_name . append
>259	Identifier	append
>260	Identifier	lib_name
>261	ExpressionStatement	 
>262	CallExpression	lib_name . append ( \"xn_\" )
>263	ArgumentList	\"xn_\"
>264	Argument	\"xn_\"
>265	PrimaryExpression	\"xn_\"
>266	Callee	lib_name . append
>267	MemberAccess	lib_name . append
>268	Identifier	append
>269	Identifier	lib_name
>270	Condition	 
>271	EqualityExpression	strcmp ( comm , \"XN\" ) == 0
>272	PrimaryExpression	0
>273	CallExpression	strcmp ( comm , \"XN\" )
>274	ArgumentList	comm
>275	Argument	\"XN\"
>276	PrimaryExpression	\"XN\"
>277	Argument	comm
>278	Identifier	comm
>279	Callee	strcmp
>280	Identifier	strcmp
>281	CompoundStatement	 
>282	ReturnStatement	 
>283	CallExpression	std 
>284	ArgumentList	 
>285	Callee	std 
>286	Identifier	std 
>287	Condition	 
>288	EqualityExpression	strcmp ( comm , \"SHMEM\" ) == 0
>289	PrimaryExpression	0
>290	CallExpression	strcmp ( comm , \"SHMEM\" )
>291	ArgumentList	comm
>292	Argument	\"SHMEM\"
>293	PrimaryExpression	\"SHMEM\"
>294	Argument	comm
>295	Identifier	comm
>296	Callee	strcmp
>297	Identifier	strcmp
>298	CompoundStatement	 
>299	ExpressionStatement	 
>300	CallExpression	lib_name . append ( \"mpi\" )
>301	ArgumentList	\"mpi\"
>302	Argument	\"mpi\"
>303	PrimaryExpression	\"mpi\"
>304	Callee	lib_name . append
>305	MemberAccess	lib_name . append
>306	Identifier	append
>307	Identifier	lib_name
>308	Condition	 
>309	EqualityExpression	strcmp ( comm , \"MPI\" ) == 0
>310	PrimaryExpression	0
>311	CallExpression	strcmp ( comm , \"MPI\" )
>312	ArgumentList	comm
>313	Argument	\"MPI\"
>314	PrimaryExpression	\"MPI\"
>315	Argument	comm
>316	Identifier	comm
>317	Callee	strcmp
>318	Identifier	strcmp
>319	CompoundStatement	 
>320	ExpressionStatement	 
>321	CallExpression	lib_name . append ( \"socket\" )
>322	ArgumentList	\"socket\"
>323	Argument	\"socket\"
>324	PrimaryExpression	\"socket\"
>325	Callee	lib_name . append
>326	MemberAccess	lib_name . append
>327	Identifier	append
>328	Identifier	lib_name
>329	Condition	 
>330	EqualityExpression	strcmp ( comm , \"SOCKETS\" ) == 0
>331	PrimaryExpression	0
>332	CallExpression	strcmp ( comm , \"SOCKETS\" )
>333	ArgumentList	comm
>334	Argument	\"SOCKETS\"
>335	PrimaryExpression	\"SOCKETS\"
>336	Argument	comm
>337	Identifier	comm
>338	Callee	strcmp
>339	Identifier	strcmp
>340	Condition	 
>341	EqualityExpression	comm != NULL
>342	Identifier	NULL
>343	Identifier	comm
>344	IdentifierDeclStatement	 
>345	IdentifierDecl	lib_name ( \"cnc_\" )
>346	PrimaryExpression	\"cnc_\"
>347	Identifier	lib_name
>348	IdentifierDeclType	std 
>360	FunctionDef	dist_cnc_load_comm (const char * comm , bool use_itac)
>361	ParameterList	const char * comm , bool use_itac
>362	Parameter	 
>363	Identifier	use_itac
>364	ParameterType	bool
>365	Parameter	 
>366	Identifier	comm
>367	ParameterType	const char *
>368	ReturnType	communicator_loader_type CNC_API
>369	CompoundStatement	 
>370	ReturnStatement	 
>371	CallExpression	cnc_load_lib ( clientDllName . c_str ( ) )
>372	ArgumentList	clientDllName . c_str ( )
>373	Argument	clientDllName . c_str ( )
>374	CallExpression	clientDllName . c_str ( )
>375	ArgumentList	 
>376	Callee	clientDllName . c_str
>377	MemberAccess	clientDllName . c_str
>378	Identifier	c_str
>379	Identifier	clientDllName
>380	Callee	cnc_load_lib
>381	Identifier	cnc_load_lib
>382	IfStatement	if ( clientDllName . empty ( ) )
>383	ReturnStatement	 
>384	Identifier	NULL
>385	Condition	 
>386	CallExpression	clientDllName . empty ( )
>387	ArgumentList	 
>388	Callee	clientDllName . empty
>389	MemberAccess	clientDllName . empty
>390	Identifier	empty
>391	Identifier	clientDllName
>392	IdentifierDeclStatement	 
>393	IdentifierDecl	clientDllName = comm_lib_name ( comm , use_itac )
>394	AssignmentExpr	clientDllName = comm_lib_name ( comm , use_itac )
>395	CallExpression	comm_lib_name ( comm , use_itac )
>396	ArgumentList	comm
>397	Argument	use_itac
>398	Identifier	use_itac
>399	Argument	comm
>400	Identifier	comm
>401	Callee	comm_lib_name
>402	Identifier	comm_lib_name
>403	Identifier	clientDllName
>404	Identifier	clientDllName
>405	IdentifierDeclType	const std 
<3=9,8,4
<4=5
<5=7,6
<9=124,119,110,93,66,62,58,45,18,12,10
<10=11
<12=13
<13=17,14
<14=16,15
<18=41,19
<19=33,22,20
<20=21
<22=23
<23=32,24
<24=31,25
<25=27,26
<27=29,28
<29=30
<33=34
<34=40,35
<35=39,36
<36=38,37
<41=42
<42=44,43
<45=46
<46=57,47
<47=56,48
<48=54,49
<49=52,50
<50=51
<52=53
<54=55
<58=59
<59=61,60
<62=63
<63=65,64
<66=89,67
<67=81,70,68
<68=69
<70=71
<71=80,72
<72=79,73
<73=75,74
<75=77,76
<77=78
<81=82
<82=88,83
<83=87,84
<84=86,85
<89=90
<90=92,91
<93=94
<94=109,108,95
<95=107,96
<96=105,97
<97=98
<98=99
<99=101,100
<101=102
<102=104,103
<105=106
<110=111
<111=115,112
<112=113
<113=114
<115=116
<116=118,117
<119=120
<120=123,122,121
<124=125
<125=133,126
<126=132,127
<127=131,128
<128=130,129
<145=154,153,146
<146=150,147
<147=149,148
<150=152,151
<154=344,206,194,185,184,183,182,181,180,179,178,177,176,175,174,173,157,155
<155=156
<157=158
<158=172,159
<159=168,160
<160=161
<161=162
<162=166,163
<163=164
<164=165
<166=167
<168=169
<169=171,170
<185=186
<186=190,187
<187=188
<188=189
<190=191
<191=193,192
<194=204,195
<195=196
<196=200,197
<197=198
<198=199
<200=201
<201=203,202
<204=205
<206=340,220,207
<207=208
<208=214,209
<209=210
<210=212,211
<212=213
<214=215
<215=219,216
<216=218,217
<220=221
<221=329,319,222
<222=223
<223=308,298,224
<224=225
<225=287,281,226
<226=227
<227=270,251,228
<228=229
<229=239,230
<230=231
<231=235,232
<232=233
<233=234
<235=236
<236=238,237
<239=240
<240=250,241
<241=249,242
<242=248,243
<243=247,244
<244=246,245
<251=261,252
<252=253
<253=257,254
<254=255
<255=256
<257=258
<258=260,259
<261=262
<262=266,263
<263=264
<264=265
<266=267
<267=269,268
<270=271
<271=273,272
<273=279,274
<274=277,275
<275=276
<277=278
<279=280
<281=282
<282=283
<283=285,284
<285=286
<287=288
<288=290,289
<290=296,291
<291=294,292
<292=293
<294=295
<296=297
<298=299
<299=300
<300=304,301
<301=302
<302=303
<304=305
<305=307,306
<308=309
<309=311,310
<311=317,312
<312=315,313
<313=314
<315=316
<317=318
<319=320
<320=321
<321=325,322
<322=323
<323=324
<325=326
<326=328,327
<329=330
<330=332,331
<332=338,333
<333=336,334
<334=335
<336=337
<338=339
<340=341
<341=343,342
<344=345
<345=348,347,346
<360=369,368,361
<361=365,362
<362=364,363
<365=367,366
<369=392,382,370
<370=371
<371=380,372
<372=373
<373=374
<374=376,375
<376=377
<377=379,378
<380=381
<382=385,383
<383=384
<385=386
<386=388,387
<388=389
<389=391,390
<392=393
<393=405,404,394
<394=403,395
<395=401,396
<396=399,397
<397=398
<399=400
<401=402
