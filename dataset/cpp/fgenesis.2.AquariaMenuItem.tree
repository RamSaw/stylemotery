>13	FunctionDef	AquariaGuiElement 
>14	ParameterList	 
>15	CompoundStatement	 
>16	ExpressionStatement	 
>17	AssignmentExpr	guiInputLevel = 0
>18	PrimaryExpression	0
>19	Identifier	guiInputLevel
>20	ExpressionStatement	 
>21	AssignmentExpr	canDirMove = true
>22	Identifier	true
>23	Identifier	canDirMove
>24	ExpressionStatement	 
>25	CallExpression	guiElements . push_back ( this )
>26	ArgumentList	this
>27	Argument	this
>28	Identifier	this
>29	Callee	guiElements . push_back
>30	MemberAccess	guiElements . push_back
>31	Identifier	push_back
>32	Identifier	guiElements
>33	ExpressionStatement	 
>34	AssignmentExpr	guiMoveTimer = 0
>35	PrimaryExpression	0
>36	Identifier	guiMoveTimer
>37	ExpressionStatement	 
>38	AssignmentExpr	hasFocus = false
>39	Identifier	false
>40	Identifier	hasFocus
>41	ForStatement	for ( int i = 0 ; i < DIR_MAX ; i ++ )
>42	CompoundStatement	 
>43	ExpressionStatement	 
>44	AssignmentExpr	dirMove [ i ] = 0
>45	PrimaryExpression	0
>46	ArrayIndexing	dirMove [ i ]
>47	Identifier	i
>48	Identifier	dirMove
>49	IncDecOp	 
>50	IncDec	++
>51	Identifier	i
>52	Condition	 
>53	RelationalExpression	i < DIR_MAX
>54	Identifier	DIR_MAX
>55	Identifier	i
>56	ForInit	 
>57	IdentifierDeclStatement	int i = 0 ;
>58	IdentifierDecl	i = 0
>59	AssignmentExpr	i = 0
>60	PrimaryExpression	0
>61	Identifier	i
>62	Identifier	i
>63	IdentifierDeclType	int
>80	FunctionDef	AquariaGuiElement 
>81	ParameterList	 
>82	ReturnType	bool
>83	CompoundStatement	 
>84	ReturnStatement	 
>85	Identifier	false
>86	IfStatement	if ( guiInputLevel >= AquariaGuiElement 
>87	CompoundStatement	 
>88	ReturnStatement	 
>89	Identifier	true
>90	Condition	 
>91	RelationalExpression	guiInputLevel >= AquariaGuiElement 
>92	Identifier	AquariaGuiElement 
>93	Identifier	guiInputLevel
>101	FunctionDef	AquariaGuiElement 
>102	ParameterList	 
>103	ReturnType	void
>104	CompoundStatement	 
>105	ExpressionStatement	 
>106	CallExpression	guiElements . remove ( this )
>107	ArgumentList	this
>108	Argument	this
>109	Identifier	this
>110	Callee	guiElements . remove
>111	MemberAccess	guiElements . remove
>112	Identifier	remove
>113	Identifier	guiElements
>119	FunctionDef	AquariaGuiElement 
>120	ParameterList	int dir , AquariaGuiElement * item
>121	Parameter	 
>122	Identifier	item
>123	ParameterType	AquariaGuiElement *
>124	Parameter	 
>125	Identifier	dir
>126	ParameterType	int
>127	ReturnType	void
>128	CompoundStatement	 
>129	IfStatement	if ( dir >= 0 && dir < DIR_MAX )
>130	CompoundStatement	 
>131	ExpressionStatement	 
>132	AssignmentExpr	dirMove [ dir ] = item
>133	Identifier	item
>134	ArrayIndexing	dirMove [ dir ]
>135	Identifier	dir
>136	Identifier	dirMove
>137	Condition	 
>138	AndExpression	dir >= 0 && dir < DIR_MAX
>139	RelationalExpression	dir < DIR_MAX
>140	Identifier	DIR_MAX
>141	Identifier	dir
>142	RelationalExpression	dir >= 0
>143	PrimaryExpression	0
>144	Identifier	dir
>154	FunctionDef	AquariaGuiElement 
>155	ParameterList	bool on
>156	Parameter	 
>157	Identifier	on
>158	ParameterType	bool
>159	ReturnType	void
>160	CompoundStatement	 
>161	ExpressionStatement	 
>162	AssignmentExpr	canDirMove = on
>163	Identifier	on
>164	Identifier	canDirMove
>170	FunctionDef	AquariaGuiElement 
>171	ParameterList	bool v
>172	Parameter	 
>173	Identifier	v
>174	ParameterType	bool
>175	ReturnType	void
>176	CompoundStatement	 
>177	IfStatement	if ( v )
>178	ElseStatement	else
>179	IfStatement	if ( this == currentFocus )
>180	ExpressionStatement	 
>181	AssignmentExpr	currentFocus = 0
>182	PrimaryExpression	0
>183	Identifier	currentFocus
>184	Condition	 
>185	EqualityExpression	this == currentFocus
>186	Identifier	currentFocus
>187	Identifier	this
>188	CompoundStatement	 
>189	ForStatement	for ( GuiElements 
>190	CompoundStatement	 
>191	IfStatement	if ( gui && gui != guiThis )
>192	CompoundStatement	 
>193	ExpressionStatement	 
>194	CallExpression	gui -> setFocus ( false )
>195	ArgumentList	false
>196	Argument	false
>197	Identifier	false
>198	Callee	gui -> setFocus
>199	PtrMemberAccess	gui -> setFocus
>200	Identifier	setFocus
>201	Identifier	gui
>202	Condition	 
>203	AndExpression	gui && gui != guiThis
>204	EqualityExpression	gui != guiThis
>205	Identifier	guiThis
>206	Identifier	gui
>207	Identifier	gui
>208	ExpressionStatement	 
>209	AssignmentExpr	gui = ( * i )
>210	UnaryOp	* i
>211	Identifier	i
>212	UnaryOperator	*
>213	Identifier	gui
>214	IncDecOp	 
>215	IncDec	++
>216	Identifier	i
>217	Condition	 
>218	EqualityExpression	i != guiElements . end ( )
>219	CallExpression	guiElements . end ( )
>220	ArgumentList	 
>221	Callee	guiElements . end
>222	MemberAccess	guiElements . end
>223	Identifier	end
>224	Identifier	guiElements
>225	Identifier	i
>226	ForInit	 
>227	IdentifierDeclStatement	GuiElements 
>228	IdentifierDecl	i = guiElements . begin ( )
>229	AssignmentExpr	i = guiElements . begin ( )
>230	CallExpression	guiElements . begin ( )
>231	ArgumentList	 
>232	Callee	guiElements . begin
>233	MemberAccess	guiElements . begin
>234	Identifier	begin
>235	Identifier	guiElements
>236	Identifier	i
>237	Identifier	i
>238	IdentifierDeclType	GuiElements 
>239	IdentifierDeclStatement	 
>240	IdentifierDecl	* guiThis = ( AquariaGuiElement * ) this
>241	AssignmentExpr	* guiThis = ( AquariaGuiElement * ) this
>242	CastExpression	( AquariaGuiElement * ) this
>243	Identifier	this
>244	CastTarget	AquariaGuiElement *
>245	Identifier	guiThis
>246	Identifier	guiThis
>247	IdentifierDeclType	AquariaGuiElement *
>248	IdentifierDecl	* gui = 0
>249	AssignmentExpr	* gui = 0
>250	PrimaryExpression	0
>251	Identifier	gui
>252	Identifier	gui
>253	IdentifierDeclType	AquariaGuiElement *
>254	IfStatement	if ( dsq -> inputMode == INPUT_JOYSTICK )
>255	ExpressionStatement	 
>256	CallExpression	core -> setMousePosition ( getGuiPosition ( ) )
>257	ArgumentList	getGuiPosition ( )
>258	Argument	getGuiPosition ( )
>259	CallExpression	getGuiPosition ( )
>260	ArgumentList	 
>261	Callee	getGuiPosition
>262	Identifier	getGuiPosition
>263	Callee	core -> setMousePosition
>264	PtrMemberAccess	core -> setMousePosition
>265	Identifier	setMousePosition
>266	Identifier	core
>267	Condition	 
>268	EqualityExpression	dsq -> inputMode == INPUT_JOYSTICK
>269	Identifier	INPUT_JOYSTICK
>270	PtrMemberAccess	dsq -> inputMode
>271	Identifier	inputMode
>272	Identifier	dsq
>273	ExpressionStatement	 
>274	AssignmentExpr	currentFocus = this
>275	Identifier	this
>276	Identifier	currentFocus
>277	Condition	 
>278	Identifier	v
>279	ExpressionStatement	 
>280	AssignmentExpr	hasFocus = v
>281	Identifier	v
>282	Identifier	hasFocus
>304	FunctionDef	AquariaGuiElement 
>305	ParameterList	float dt
>306	Parameter	 
>307	Identifier	dt
>308	ParameterType	float
>309	ReturnType	void
>310	CompoundStatement	 
>311	IfStatement	if ( hasFocus && isGuiVisible ( ) && canDirMove && canDirMoveGlobal && hasInput ( ) )
>312	CompoundStatement	 
>313	IfStatement	if ( guiMoveTimer == 0 )
>314	CompoundStatement	 
>315	IfStatement	if ( ! gui )
>316	CompoundStatement	 
>317	IfStatement	if ( closest )
>318	CompoundStatement	 
>319	ExpressionStatement	 
>320	AssignmentExpr	guiMoveTimer = moveDelay
>321	Identifier	moveDelay
>322	Identifier	guiMoveTimer
>323	ExpressionStatement	 
>324	CallExpression	closest -> setFocus ( true )
>325	ArgumentList	true
>326	Argument	true
>327	Identifier	true
>328	Callee	closest -> setFocus
>329	PtrMemberAccess	closest -> setFocus
>330	Identifier	setFocus
>331	Identifier	closest
>332	Condition	 
>333	Identifier	closest
>334	ForStatement	for ( GuiElements 
>335	CompoundStatement	 
>336	IfStatement	if ( gui != this && gui -> isGuiVisible ( ) && gui -> canDirMove )
>337	CompoundStatement	 
>338	IfStatement	if ( go )
>339	ElseStatement	else
>340	CompoundStatement	 
>341	ContinueStatement	 
>342	CompoundStatement	 
>343	IfStatement	if ( smallDist == - 1 || dist < smallDist )
>344	CompoundStatement	 
>345	ExpressionStatement	 
>346	AssignmentExpr	smallDist = dist
>347	Identifier	dist
>348	Identifier	smallDist
>349	ExpressionStatement	 
>350	AssignmentExpr	closest = gui
>351	Identifier	gui
>352	Identifier	closest
>353	Condition	 
>354	OrExpression	smallDist == - 1 || dist < smallDist
>355	RelationalExpression	dist < smallDist
>356	Identifier	smallDist
>357	Identifier	dist
>358	EqualityExpression	smallDist == - 1
>359	UnaryOp	- 1
>360	PrimaryExpression	1
>361	UnaryOperator	-
>362	Identifier	smallDist
>363	ExpressionStatement	 
>364	AssignmentExpr	dist = ( p1 - p2 ) . getSquaredLength2D ( )
>365	CallExpression	( p1 - p2 ) . getSquaredLength2D ( )
>366	ArgumentList	 
>367	Callee	( p1 - p2 ) . getSquaredLength2D
>368	MemberAccess	( p1 - p2 ) . getSquaredLength2D
>369	Identifier	getSquaredLength2D
>370	AdditiveExpression	p1 - p2
>371	Identifier	p2
>372	Identifier	p1
>373	Identifier	dist
>374	Condition	 
>375	Identifier	go
>376	IfStatement	if ( dir == DIR_DOWN )
>377	ElseStatement	else
>378	IfStatement	if ( dir == DIR_UP )
>379	ElseStatement	else
>380	IfStatement	if ( dir == DIR_RIGHT )
>381	ElseStatement	else
>382	IfStatement	if ( dir == DIR_LEFT )
>383	ElseStatement	else
>384	CompoundStatement	 
>385	ContinueStatement	 
>386	CompoundStatement	 
>387	IfStatement	if ( fabsf ( p1 . y - p2 . y ) < ch )
>388	CompoundStatement	 
>389	ExpressionStatement	 
>390	AssignmentExpr	p1 . y = p2 . y = 0
>391	AssignmentExpr	p2 . y = 0
>392	PrimaryExpression	0
>393	MemberAccess	p2 . y
>394	Identifier	y
>395	Identifier	p2
>396	MemberAccess	p1 . y
>397	Identifier	y
>398	Identifier	p1
>399	IfStatement	if ( p2 . x < p1 . x )
>400	ExpressionStatement	 
>401	AssignmentExpr	go = 1
>402	PrimaryExpression	1
>403	Identifier	go
>404	Condition	 
>405	RelationalExpression	p2 . x < p1 . x
>406	MemberAccess	p1 . x
>407	Identifier	x
>408	Identifier	p1
>409	MemberAccess	p2 . x
>410	Identifier	x
>411	Identifier	p2
>412	Condition	 
>413	RelationalExpression	fabsf ( p1 . y - p2 . y ) < ch
>414	Identifier	ch
>415	CallExpression	fabsf ( p1 . y - p2 . y )
>416	ArgumentList	p1 . y - p2 . y
>417	Argument	p1 . y - p2 . y
>418	AdditiveExpression	p1 . y - p2 . y
>419	MemberAccess	p2 . y
>420	Identifier	y
>421	Identifier	p2
>422	MemberAccess	p1 . y
>423	Identifier	y
>424	Identifier	p1
>425	Callee	fabsf
>426	Identifier	fabsf
>427	Condition	 
>428	EqualityExpression	dir == DIR_LEFT
>429	Identifier	DIR_LEFT
>430	Identifier	dir
>431	CompoundStatement	 
>432	IfStatement	if ( fabsf ( p1 . y - p2 . y ) < ch )
>433	CompoundStatement	 
>434	ExpressionStatement	 
>435	AssignmentExpr	p1 . y = p2 . y = 0
>436	AssignmentExpr	p2 . y = 0
>437	PrimaryExpression	0
>438	MemberAccess	p2 . y
>439	Identifier	y
>440	Identifier	p2
>441	MemberAccess	p1 . y
>442	Identifier	y
>443	Identifier	p1
>444	IfStatement	if ( p2 . x > p1 . x )
>445	ExpressionStatement	 
>446	AssignmentExpr	go = 1
>447	PrimaryExpression	1
>448	Identifier	go
>449	Condition	 
>450	RelationalExpression	p2 . x > p1 . x
>451	MemberAccess	p1 . x
>452	Identifier	x
>453	Identifier	p1
>454	MemberAccess	p2 . x
>455	Identifier	x
>456	Identifier	p2
>457	Condition	 
>458	RelationalExpression	fabsf ( p1 . y - p2 . y ) < ch
>459	Identifier	ch
>460	CallExpression	fabsf ( p1 . y - p2 . y )
>461	ArgumentList	p1 . y - p2 . y
>462	Argument	p1 . y - p2 . y
>463	AdditiveExpression	p1 . y - p2 . y
>464	MemberAccess	p2 . y
>465	Identifier	y
>466	Identifier	p2
>467	MemberAccess	p1 . y
>468	Identifier	y
>469	Identifier	p1
>470	Callee	fabsf
>471	Identifier	fabsf
>472	Condition	 
>473	EqualityExpression	dir == DIR_RIGHT
>474	Identifier	DIR_RIGHT
>475	Identifier	dir
>476	CompoundStatement	 
>477	IfStatement	if ( fabsf ( p1 . x - p2 . x ) < ch )
>478	CompoundStatement	 
>479	ExpressionStatement	 
>480	AssignmentExpr	p1 . x = p2 . x = 0
>481	AssignmentExpr	p2 . x = 0
>482	PrimaryExpression	0
>483	MemberAccess	p2 . x
>484	Identifier	x
>485	Identifier	p2
>486	MemberAccess	p1 . x
>487	Identifier	x
>488	Identifier	p1
>489	IfStatement	if ( p2 . y < p1 . y )
>490	ExpressionStatement	 
>491	AssignmentExpr	go = 1
>492	PrimaryExpression	1
>493	Identifier	go
>494	Condition	 
>495	RelationalExpression	p2 . y < p1 . y
>496	MemberAccess	p1 . y
>497	Identifier	y
>498	Identifier	p1
>499	MemberAccess	p2 . y
>500	Identifier	y
>501	Identifier	p2
>502	Condition	 
>503	RelationalExpression	fabsf ( p1 . x - p2 . x ) < ch
>504	Identifier	ch
>505	CallExpression	fabsf ( p1 . x - p2 . x )
>506	ArgumentList	p1 . x - p2 . x
>507	Argument	p1 . x - p2 . x
>508	AdditiveExpression	p1 . x - p2 . x
>509	MemberAccess	p2 . x
>510	Identifier	x
>511	Identifier	p2
>512	MemberAccess	p1 . x
>513	Identifier	x
>514	Identifier	p1
>515	Callee	fabsf
>516	Identifier	fabsf
>517	Condition	 
>518	EqualityExpression	dir == DIR_UP
>519	Identifier	DIR_UP
>520	Identifier	dir
>521	CompoundStatement	 
>522	IfStatement	if ( fabsf ( p1 . x - p2 . x ) < ch )
>523	CompoundStatement	 
>524	ExpressionStatement	 
>525	AssignmentExpr	p1 . x = p2 . x = 0
>526	AssignmentExpr	p2 . x = 0
>527	PrimaryExpression	0
>528	MemberAccess	p2 . x
>529	Identifier	x
>530	Identifier	p2
>531	MemberAccess	p1 . x
>532	Identifier	x
>533	Identifier	p1
>534	IfStatement	if ( p2 . y > p1 . y )
>535	ExpressionStatement	 
>536	AssignmentExpr	go = 1
>537	PrimaryExpression	1
>538	Identifier	go
>539	Condition	 
>540	RelationalExpression	p2 . y > p1 . y
>541	MemberAccess	p1 . y
>542	Identifier	y
>543	Identifier	p1
>544	MemberAccess	p2 . y
>545	Identifier	y
>546	Identifier	p2
>547	Condition	 
>548	RelationalExpression	fabsf ( p1 . x - p2 . x ) < ch
>549	Identifier	ch
>550	CallExpression	fabsf ( p1 . x - p2 . x )
>551	ArgumentList	p1 . x - p2 . x
>552	Argument	p1 . x - p2 . x
>553	AdditiveExpression	p1 . x - p2 . x
>554	MemberAccess	p2 . x
>555	Identifier	x
>556	Identifier	p2
>557	MemberAccess	p1 . x
>558	Identifier	x
>559	Identifier	p1
>560	Callee	fabsf
>561	Identifier	fabsf
>562	Condition	 
>563	EqualityExpression	dir == DIR_DOWN
>564	Identifier	DIR_DOWN
>565	Identifier	dir
>566	IdentifierDeclStatement	 
>567	IdentifierDecl	p2 = gui -> getGuiPosition ( )
>568	AssignmentExpr	p2 = gui -> getGuiPosition ( )
>569	CallExpression	gui -> getGuiPosition ( )
>570	ArgumentList	 
>571	Callee	gui -> getGuiPosition
>572	PtrMemberAccess	gui -> getGuiPosition
>573	Identifier	getGuiPosition
>574	Identifier	gui
>575	Identifier	p2
>576	Identifier	p2
>577	IdentifierDeclType	Vector
>578	IdentifierDeclStatement	 
>579	IdentifierDecl	p1 = getGuiPosition ( )
>580	AssignmentExpr	p1 = getGuiPosition ( )
>581	CallExpression	getGuiPosition ( )
>582	ArgumentList	 
>583	Callee	getGuiPosition
>584	Identifier	getGuiPosition
>585	Identifier	p1
>586	Identifier	p1
>587	IdentifierDeclType	Vector
>588	IdentifierDeclStatement	 
>589	IdentifierDecl	go = 0
>590	AssignmentExpr	go = 0
>591	PrimaryExpression	0
>592	Identifier	go
>593	Identifier	go
>594	IdentifierDeclType	int
>595	Condition	 
>596	AndExpression	gui != this && gui -> isGuiVisible ( ) && gui -> canDirMove
>597	AndExpression	gui -> isGuiVisible ( ) && gui -> canDirMove
>598	PtrMemberAccess	gui -> canDirMove
>599	Identifier	canDirMove
>600	Identifier	gui
>601	CallExpression	gui -> isGuiVisible ( )
>602	ArgumentList	 
>603	Callee	gui -> isGuiVisible
>604	PtrMemberAccess	gui -> isGuiVisible
>605	Identifier	isGuiVisible
>606	Identifier	gui
>607	EqualityExpression	gui != this
>608	Identifier	this
>609	Identifier	gui
>610	ExpressionStatement	 
>611	AssignmentExpr	gui = ( * i )
>612	UnaryOp	* i
>613	Identifier	i
>614	UnaryOperator	*
>615	Identifier	gui
>616	IncDecOp	 
>617	IncDec	++
>618	Identifier	i
>619	Condition	 
>620	EqualityExpression	i != guiElements . end ( )
>621	CallExpression	guiElements . end ( )
>622	ArgumentList	 
>623	Callee	guiElements . end
>624	MemberAccess	guiElements . end
>625	Identifier	end
>626	Identifier	guiElements
>627	Identifier	i
>628	ForInit	 
>629	IdentifierDeclStatement	GuiElements 
>630	IdentifierDecl	i = guiElements . begin ( )
>631	AssignmentExpr	i = guiElements . begin ( )
>632	CallExpression	guiElements . begin ( )
>633	ArgumentList	 
>634	Callee	guiElements . begin
>635	MemberAccess	guiElements . begin
>636	Identifier	begin
>637	Identifier	guiElements
>638	Identifier	i
>639	Identifier	i
>640	IdentifierDeclType	GuiElements 
>641	IdentifierDeclStatement	 
>642	IdentifierDecl	ch = 64
>643	AssignmentExpr	ch = 64
>644	PrimaryExpression	64
>645	Identifier	ch
>646	Identifier	ch
>647	IdentifierDeclType	int
>648	IdentifierDeclStatement	 
>649	IdentifierDecl	* closest = 0
>650	AssignmentExpr	* closest = 0
>651	PrimaryExpression	0
>652	Identifier	closest
>653	Identifier	closest
>654	IdentifierDeclType	AquariaGuiElement *
>655	IdentifierDecl	* gui = 0
>656	AssignmentExpr	* gui = 0
>657	PrimaryExpression	0
>658	Identifier	gui
>659	Identifier	gui
>660	IdentifierDeclType	AquariaGuiElement *
>661	IdentifierDeclStatement	 
>662	IdentifierDecl	dist = 0
>663	AssignmentExpr	dist = 0
>664	PrimaryExpression	0
>665	Identifier	dist
>666	Identifier	dist
>667	IdentifierDeclType	int
>668	IdentifierDecl	smallDist = - 1
>669	AssignmentExpr	smallDist = - 1
>670	UnaryOp	- 1
>671	PrimaryExpression	1
>672	UnaryOperator	-
>673	Identifier	smallDist
>674	Identifier	smallDist
>675	IdentifierDeclType	int
>676	ExpressionStatement	 
>677	CallExpression	debugLog ( \"updating closest\" )
>678	ArgumentList	\"updating closest\"
>679	Argument	\"updating closest\"
>680	PrimaryExpression	\"updating closest\"
>681	Callee	debugLog
>682	Identifier	debugLog
>683	Condition	 
>684	UnaryOp	! gui
>685	Identifier	gui
>686	UnaryOperator	!
>687	IfStatement	if ( dir > DIR_NONE && dir < DIR_MAX )
>688	CompoundStatement	 
>689	IfStatement	if ( gui )
>690	CompoundStatement	 
>691	ExpressionStatement	 
>692	AssignmentExpr	guiMoveTimer = moveDelay
>693	Identifier	moveDelay
>694	Identifier	guiMoveTimer
>695	ExpressionStatement	 
>696	CallExpression	gui -> setFocus ( true )
>697	ArgumentList	true
>698	Argument	true
>699	Identifier	true
>700	Callee	gui -> setFocus
>701	PtrMemberAccess	gui -> setFocus
>702	Identifier	setFocus
>703	Identifier	gui
>704	Condition	 
>705	Identifier	gui
>706	ExpressionStatement	 
>707	AssignmentExpr	gui = dirMove [ dir ]
>708	ArrayIndexing	dirMove [ dir ]
>709	Identifier	dir
>710	Identifier	dirMove
>711	Identifier	gui
>712	Condition	 
>713	AndExpression	dir > DIR_NONE && dir < DIR_MAX
>714	RelationalExpression	dir < DIR_MAX
>715	Identifier	DIR_MAX
>716	Identifier	dir
>717	RelationalExpression	dir > DIR_NONE
>718	Identifier	DIR_NONE
>719	Identifier	dir
>720	IdentifierDeclStatement	 
>721	IdentifierDecl	* gui = 0
>722	AssignmentExpr	* gui = 0
>723	PrimaryExpression	0
>724	Identifier	gui
>725	Identifier	gui
>726	IdentifierDeclType	AquariaGuiElement *
>727	IdentifierDeclStatement	 
>728	IdentifierDecl	moveDelay = 0.2
>729	AssignmentExpr	moveDelay = 0.2
>730	PrimaryExpression	0.2
>731	Identifier	moveDelay
>732	Identifier	moveDelay
>733	IdentifierDeclType	const float
>734	IfStatement	if ( dir == DIR_NONE )
>735	ReturnStatement	 
>736	Condition	 
>737	EqualityExpression	dir == DIR_NONE
>738	Identifier	DIR_NONE
>739	Identifier	dir
>740	IfStatement	if ( ! p . isLength2DIn ( 0.4 ) )
>741	ElseStatement	else
>742	CompoundStatement	 
>743	IfStatement	if ( obj )
>744	CompoundStatement	 
>745	IfStatement	if ( obj -> isActing ( ACTION_MENULEFT ) )
>746	ElseStatement	else
>747	IfStatement	if ( obj -> isActing ( ACTION_MENURIGHT ) )
>748	ElseStatement	else
>749	IfStatement	if ( obj -> isActing ( ACTION_MENUUP ) )
>750	ElseStatement	else
>751	IfStatement	if ( obj -> isActing ( ACTION_MENUDOWN ) )
>752	ExpressionStatement	 
>753	AssignmentExpr	dir = DIR_DOWN
>754	Identifier	DIR_DOWN
>755	Identifier	dir
>756	Condition	 
>757	CallExpression	obj -> isActing ( ACTION_MENUDOWN )
>758	ArgumentList	ACTION_MENUDOWN
>759	Argument	ACTION_MENUDOWN
>760	Identifier	ACTION_MENUDOWN
>761	Callee	obj -> isActing
>762	PtrMemberAccess	obj -> isActing
>763	Identifier	isActing
>764	Identifier	obj
>765	ExpressionStatement	 
>766	AssignmentExpr	dir = DIR_UP
>767	Identifier	DIR_UP
>768	Identifier	dir
>769	Condition	 
>770	CallExpression	obj -> isActing ( ACTION_MENUUP )
>771	ArgumentList	ACTION_MENUUP
>772	Argument	ACTION_MENUUP
>773	Identifier	ACTION_MENUUP
>774	Callee	obj -> isActing
>775	PtrMemberAccess	obj -> isActing
>776	Identifier	isActing
>777	Identifier	obj
>778	ExpressionStatement	 
>779	AssignmentExpr	dir = DIR_RIGHT
>780	Identifier	DIR_RIGHT
>781	Identifier	dir
>782	Condition	 
>783	CallExpression	obj -> isActing ( ACTION_MENURIGHT )
>784	ArgumentList	ACTION_MENURIGHT
>785	Argument	ACTION_MENURIGHT
>786	Identifier	ACTION_MENURIGHT
>787	Callee	obj -> isActing
>788	PtrMemberAccess	obj -> isActing
>789	Identifier	isActing
>790	Identifier	obj
>791	ExpressionStatement	 
>792	AssignmentExpr	dir = DIR_LEFT
>793	Identifier	DIR_LEFT
>794	Identifier	dir
>795	Condition	 
>796	CallExpression	obj -> isActing ( ACTION_MENULEFT )
>797	ArgumentList	ACTION_MENULEFT
>798	Argument	ACTION_MENULEFT
>799	Identifier	ACTION_MENULEFT
>800	Callee	obj -> isActing
>801	PtrMemberAccess	obj -> isActing
>802	Identifier	isActing
>803	Identifier	obj
>804	Condition	 
>805	Identifier	obj
>806	IdentifierDeclStatement	 
>807	IdentifierDecl	* obj = dsq -> getTopStateObject ( )
>808	AssignmentExpr	* obj = dsq -> getTopStateObject ( )
>809	CallExpression	dsq -> getTopStateObject ( )
>810	ArgumentList	 
>811	Callee	dsq -> getTopStateObject
>812	PtrMemberAccess	dsq -> getTopStateObject
>813	Identifier	getTopStateObject
>814	Identifier	dsq
>815	Identifier	obj
>816	Identifier	obj
>817	IdentifierDeclType	StateObject *
>818	CompoundStatement	 
>819	IfStatement	if ( fabsf ( p . x ) > fabsf ( p . y ) )
>820	ElseStatement	else
>821	CompoundStatement	 
>822	IfStatement	if ( p . y > 0 )
>823	ElseStatement	else
>824	ExpressionStatement	 
>825	AssignmentExpr	dir = DIR_UP
>826	Identifier	DIR_UP
>827	Identifier	dir
>828	ExpressionStatement	 
>829	AssignmentExpr	dir = DIR_DOWN
>830	Identifier	DIR_DOWN
>831	Identifier	dir
>832	Condition	 
>833	RelationalExpression	p . y > 0
>834	PrimaryExpression	0
>835	MemberAccess	p . y
>836	Identifier	y
>837	Identifier	p
>838	CompoundStatement	 
>839	IfStatement	if ( p . x > 0 )
>840	ElseStatement	else
>841	ExpressionStatement	 
>842	AssignmentExpr	dir = DIR_LEFT
>843	Identifier	DIR_LEFT
>844	Identifier	dir
>845	ExpressionStatement	 
>846	AssignmentExpr	dir = DIR_RIGHT
>847	Identifier	DIR_RIGHT
>848	Identifier	dir
>849	Condition	 
>850	RelationalExpression	p . x > 0
>851	PrimaryExpression	0
>852	MemberAccess	p . x
>853	Identifier	x
>854	Identifier	p
>855	Condition	 
>856	RelationalExpression	fabsf ( p . x ) > fabsf ( p . y )
>857	CallExpression	fabsf ( p . y )
>858	ArgumentList	p . y
>859	Argument	p . y
>860	MemberAccess	p . y
>861	Identifier	y
>862	Identifier	p
>863	Callee	fabsf
>864	Identifier	fabsf
>865	CallExpression	fabsf ( p . x )
>866	ArgumentList	p . x
>867	Argument	p . x
>868	MemberAccess	p . x
>869	Identifier	x
>870	Identifier	p
>871	Callee	fabsf
>872	Identifier	fabsf
>873	Condition	 
>874	UnaryOp	! p . isLength2DIn ( 0.4 )
>875	CallExpression	p . isLength2DIn ( 0.4 )
>876	ArgumentList	0.4
>877	Argument	0.4
>878	PrimaryExpression	0.4
>879	Callee	p . isLength2DIn
>880	MemberAccess	p . isLength2DIn
>881	Identifier	isLength2DIn
>882	Identifier	p
>883	UnaryOperator	!
>884	IdentifierDeclStatement	 
>885	IdentifierDecl	p = core -> joystick . position
>886	AssignmentExpr	p = core -> joystick . position
>887	MemberAccess	core -> joystick . position
>888	Identifier	position
>889	PtrMemberAccess	core -> joystick
>890	Identifier	joystick
>891	Identifier	core
>892	Identifier	p
>893	Identifier	p
>894	IdentifierDeclType	Vector
>895	IdentifierDeclStatement	 
>896	IdentifierDecl	dir = DIR_NONE
>897	AssignmentExpr	dir = DIR_NONE
>898	Identifier	DIR_NONE
>899	Identifier	DIR_NONE
>900	Identifier	dir
>901	IdentifierDeclType	Direction
>902	Condition	 
>903	EqualityExpression	guiMoveTimer == 0
>904	PrimaryExpression	0
>905	Identifier	guiMoveTimer
>906	IfStatement	if ( guiMoveTimer > 0 )
>907	CompoundStatement	 
>908	IfStatement	if ( guiMoveTimer < 0 )
>909	ExpressionStatement	 
>910	AssignmentExpr	guiMoveTimer = 0
>911	PrimaryExpression	0
>912	Identifier	guiMoveTimer
>913	Condition	 
>914	RelationalExpression	guiMoveTimer < 0
>915	PrimaryExpression	0
>916	Identifier	guiMoveTimer
>917	ExpressionStatement	 
>918	AssignmentExpr	guiMoveTimer -= dt
>919	Identifier	dt
>920	Identifier	guiMoveTimer
>921	Condition	 
>922	RelationalExpression	guiMoveTimer > 0
>923	PrimaryExpression	0
>924	Identifier	guiMoveTimer
>925	Condition	 
>926	AndExpression	hasFocus && isGuiVisible ( ) && canDirMove && canDirMoveGlobal && hasInput ( )
>927	AndExpression	isGuiVisible ( ) && canDirMove && canDirMoveGlobal && hasInput ( )
>928	AndExpression	canDirMove && canDirMoveGlobal && hasInput ( )
>929	AndExpression	canDirMoveGlobal && hasInput ( )
>930	CallExpression	hasInput ( )
>931	ArgumentList	 
>932	Callee	hasInput
>933	Identifier	hasInput
>934	Identifier	canDirMoveGlobal
>935	Identifier	canDirMove
>936	CallExpression	isGuiVisible ( )
>937	ArgumentList	 
>938	Callee	isGuiVisible
>939	Identifier	isGuiVisible
>940	Identifier	hasFocus
>1006	FunctionDef	AquariaGuiElement 
>1007	ParameterList	const Vector & pos
>1008	Parameter	 
>1009	Identifier	pos
>1010	ParameterType	const Vector &
>1011	ReturnType	AquariaGuiElement *
>1012	CompoundStatement	 
>1013	ReturnStatement	 
>1014	Identifier	closest
>1015	ForStatement	for ( GuiElements 
>1016	CompoundStatement	 
>1017	IfStatement	if ( gui -> isGuiVisible ( ) && gui -> hasInput ( ) )
>1018	CompoundStatement	 
>1019	IfStatement	if ( ! closest || len < minlen )
>1020	CompoundStatement	 
>1021	ExpressionStatement	 
>1022	AssignmentExpr	minlen = len
>1023	Identifier	len
>1024	Identifier	minlen
>1025	ExpressionStatement	 
>1026	AssignmentExpr	closest = gui
>1027	Identifier	gui
>1028	Identifier	closest
>1029	Condition	 
>1030	OrExpression	! closest || len < minlen
>1031	RelationalExpression	len < minlen
>1032	Identifier	minlen
>1033	Identifier	len
>1034	UnaryOp	! closest
>1035	Identifier	closest
>1036	UnaryOperator	!
>1037	IdentifierDeclStatement	 
>1038	IdentifierDecl	len = dist . getSquaredLength2D ( )
>1039	AssignmentExpr	len = dist . getSquaredLength2D ( )
>1040	CallExpression	dist . getSquaredLength2D ( )
>1041	ArgumentList	 
>1042	Callee	dist . getSquaredLength2D
>1043	MemberAccess	dist . getSquaredLength2D
>1044	Identifier	getSquaredLength2D
>1045	Identifier	dist
>1046	Identifier	len
>1047	Identifier	len
>1048	IdentifierDeclType	float
>1049	IdentifierDeclStatement	 
>1050	IdentifierDecl	dist = gui -> getGuiPosition ( ) - pos
>1051	AssignmentExpr	dist = gui -> getGuiPosition ( ) - pos
>1052	AdditiveExpression	gui -> getGuiPosition ( ) - pos
>1053	Identifier	pos
>1054	CallExpression	gui -> getGuiPosition ( )
>1055	ArgumentList	 
>1056	Callee	gui -> getGuiPosition
>1057	PtrMemberAccess	gui -> getGuiPosition
>1058	Identifier	getGuiPosition
>1059	Identifier	gui
>1060	Identifier	dist
>1061	Identifier	dist
>1062	IdentifierDeclType	Vector
>1063	Condition	 
>1064	AndExpression	gui -> isGuiVisible ( ) && gui -> hasInput ( )
>1065	CallExpression	gui -> hasInput ( )
>1066	ArgumentList	 
>1067	Callee	gui -> hasInput
>1068	PtrMemberAccess	gui -> hasInput
>1069	Identifier	hasInput
>1070	Identifier	gui
>1071	CallExpression	gui -> isGuiVisible ( )
>1072	ArgumentList	 
>1073	Callee	gui -> isGuiVisible
>1074	PtrMemberAccess	gui -> isGuiVisible
>1075	Identifier	isGuiVisible
>1076	Identifier	gui
>1077	ExpressionStatement	 
>1078	AssignmentExpr	gui = ( * i )
>1079	UnaryOp	* i
>1080	Identifier	i
>1081	UnaryOperator	*
>1082	Identifier	gui
>1083	IncDecOp	 
>1084	IncDec	++
>1085	Identifier	i
>1086	Condition	 
>1087	EqualityExpression	i != guiElements . end ( )
>1088	CallExpression	guiElements . end ( )
>1089	ArgumentList	 
>1090	Callee	guiElements . end
>1091	MemberAccess	guiElements . end
>1092	Identifier	end
>1093	Identifier	guiElements
>1094	Identifier	i
>1095	ForInit	 
>1096	IdentifierDeclStatement	GuiElements 
>1097	IdentifierDecl	i = guiElements . begin ( )
>1098	AssignmentExpr	i = guiElements . begin ( )
>1099	CallExpression	guiElements . begin ( )
>1100	ArgumentList	 
>1101	Callee	guiElements . begin
>1102	MemberAccess	guiElements . begin
>1103	Identifier	begin
>1104	Identifier	guiElements
>1105	Identifier	i
>1106	Identifier	i
>1107	IdentifierDeclType	GuiElements 
>1108	IdentifierDeclStatement	 
>1109	IdentifierDecl	minlen = 0
>1110	AssignmentExpr	minlen = 0
>1111	PrimaryExpression	0
>1112	Identifier	minlen
>1113	Identifier	minlen
>1114	IdentifierDeclType	float
>1115	IdentifierDeclStatement	 
>1116	IdentifierDecl	* closest = 0
>1117	AssignmentExpr	* closest = 0
>1118	PrimaryExpression	0
>1119	Identifier	closest
>1120	Identifier	closest
>1121	IdentifierDeclType	AquariaGuiElement *
>1122	IdentifierDecl	* gui = 0
>1123	AssignmentExpr	* gui = 0
>1124	PrimaryExpression	0
>1125	Identifier	gui
>1126	Identifier	gui
>1127	IdentifierDeclType	AquariaGuiElement *
>1147	FunctionDef	AquariaGuiQuad 
>1148	ParameterList	 
>1149	CompoundStatement	 
>1153	FunctionDef	AquariaGuiQuad 
>1154	ParameterList	 
>1155	ReturnType	void
>1156	CompoundStatement	 
>1157	ExpressionStatement	 
>1158	CallExpression	AquariaGuiElement 
>1159	ArgumentList	 
>1160	Callee	AquariaGuiElement 
>1161	Identifier	AquariaGuiElement 
>1162	ExpressionStatement	 
>1163	CallExpression	Quad 
>1164	ArgumentList	 
>1165	Callee	Quad 
>1166	Identifier	Quad 
>1170	FunctionDef	AquariaGuiQuad 
>1171	ParameterList	 
>1172	ReturnType	Vector
>1173	CompoundStatement	 
>1174	ReturnStatement	 
>1175	CallExpression	getWorldPosition ( )
>1176	ArgumentList	 
>1177	Callee	getWorldPosition
>1178	Identifier	getWorldPosition
>1183	FunctionDef	AquariaGuiQuad 
>1184	ParameterList	 
>1185	ReturnType	bool
>1186	CompoundStatement	 
>1187	ReturnStatement	 
>1188	AndExpression	! isHidden ( ) && alpha . x > 0 && alphaMod > 0 && renderQuad
>1189	AndExpression	alpha . x > 0 && alphaMod > 0 && renderQuad
>1190	AndExpression	alphaMod > 0 && renderQuad
>1191	Identifier	renderQuad
>1192	RelationalExpression	alphaMod > 0
>1193	PrimaryExpression	0
>1194	Identifier	alphaMod
>1195	RelationalExpression	alpha . x > 0
>1196	PrimaryExpression	0
>1197	MemberAccess	alpha . x
>1198	Identifier	x
>1199	Identifier	alpha
>1200	UnaryOp	! isHidden ( )
>1201	CallExpression	isHidden ( )
>1202	ArgumentList	 
>1203	Callee	isHidden
>1204	Identifier	isHidden
>1205	UnaryOperator	!
>1214	FunctionDef	AquariaGuiQuad 
>1215	ParameterList	float dt
>1216	Parameter	 
>1217	Identifier	dt
>1218	ParameterType	float
>1219	ReturnType	void
>1220	CompoundStatement	 
>1221	IfStatement	if ( hasInput ( ) )
>1222	ElseStatement	else
>1223	CompoundStatement	 
>1224	ExpressionStatement	 
>1225	CallExpression	Quad 
>1226	ArgumentList	dt
>1227	Argument	dt
>1228	Identifier	dt
>1229	Callee	Quad 
>1230	Identifier	Quad 
>1231	ExpressionStatement	 
>1232	CallExpression	updateMovement ( dt )
>1233	ArgumentList	dt
>1234	Argument	dt
>1235	Identifier	dt
>1236	Callee	updateMovement
>1237	Identifier	updateMovement
>1238	CompoundStatement	 
>1239	ExpressionStatement	 
>1240	CallExpression	Quad 
>1241	ArgumentList	dt
>1242	Argument	dt
>1243	Identifier	dt
>1244	Callee	Quad 
>1245	Identifier	Quad 
>1246	Condition	 
>1247	CallExpression	hasInput ( )
>1248	ArgumentList	 
>1249	Callee	hasInput
>1250	Identifier	hasInput
>1256	FunctionDef	AquariaGuiQuad 
>1257	ParameterList	float dt
>1258	Parameter	 
>1259	Identifier	dt
>1260	ParameterType	float
>1261	ReturnType	void
>1262	CompoundStatement	 
>1263	ExpressionStatement	 
>1264	CallExpression	Quad 
>1265	ArgumentList	dt
>1266	Argument	dt
>1267	Identifier	dt
>1268	Callee	Quad 
>1269	Identifier	Quad 
>1270	ExpressionStatement	 
>1271	CallExpression	updateMovement ( dt )
>1272	ArgumentList	dt
>1273	Argument	dt
>1274	Identifier	dt
>1275	Callee	updateMovement
>1276	Identifier	updateMovement
>1287	FunctionDef	AquariaSlider 
>1288	ParameterList	 
>1289	CompoundStatement	 
>1290	ExpressionStatement	 
>1291	AssignmentExpr	_hadInput = false
>1292	Identifier	false
>1293	Identifier	_hadInput
>1294	ExpressionStatement	 
>1295	AssignmentExpr	inputTimer = inputDelay = 0
>1296	AssignmentExpr	inputDelay = 0
>1297	PrimaryExpression	0
>1298	Identifier	inputDelay
>1299	Identifier	inputTimer
>1307	FunctionDef	AquariaSlider 
>1308	ParameterList	float dt
>1309	Parameter	 
>1310	Identifier	dt
>1311	ParameterType	float
>1312	ReturnType	void
>1313	CompoundStatement	 
>1314	IfStatement	if ( ! hasInput ( ) )
>1315	ElseStatement	else
>1316	CompoundStatement	 
>1317	ExpressionStatement	 
>1318	CallExpression	Slider 
>1319	ArgumentList	dt
>1320	Argument	dt
>1321	Identifier	dt
>1322	Callee	Slider 
>1323	Identifier	Slider 
>1324	IfStatement	if ( ! doSliderInput ( dt ) )
>1325	ExpressionStatement	 
>1326	CallExpression	AquariaGuiElement 
>1327	ArgumentList	dt
>1328	Argument	dt
>1329	Identifier	dt
>1330	Callee	AquariaGuiElement 
>1331	Identifier	AquariaGuiElement 
>1332	Condition	 
>1333	UnaryOp	! doSliderInput ( dt )
>1334	CallExpression	doSliderInput ( dt )
>1335	ArgumentList	dt
>1336	Argument	dt
>1337	Identifier	dt
>1338	Callee	doSliderInput
>1339	Identifier	doSliderInput
>1340	UnaryOperator	!
>1341	CompoundStatement	 
>1342	ExpressionStatement	 
>1343	CallExpression	RenderObject 
>1344	ArgumentList	dt
>1345	Argument	dt
>1346	Identifier	dt
>1347	Callee	RenderObject 
>1348	Identifier	RenderObject 
>1349	ExpressionStatement	 
>1350	CallExpression	AquariaGuiElement 
>1351	ArgumentList	dt
>1352	Argument	dt
>1353	Identifier	dt
>1354	Callee	AquariaGuiElement 
>1355	Identifier	AquariaGuiElement 
>1356	ExpressionStatement	 
>1357	AssignmentExpr	inputTimer = inputDelay = 0
>1358	AssignmentExpr	inputDelay = 0
>1359	PrimaryExpression	0
>1360	Identifier	inputDelay
>1361	Identifier	inputTimer
>1362	Condition	 
>1363	UnaryOp	! hasInput ( )
>1364	CallExpression	hasInput ( )
>1365	ArgumentList	 
>1366	Callee	hasInput
>1367	Identifier	hasInput
>1368	UnaryOperator	!
>1377	FunctionDef	AquariaSlider 
>1378	ParameterList	float dt
>1379	Parameter	 
>1380	Identifier	dt
>1381	ParameterType	float
>1382	ReturnType	bool
>1383	CompoundStatement	 
>1384	IfStatement	if ( inputAmount != 0 )
>1385	ElseStatement	else
>1386	CompoundStatement	 
>1387	ReturnStatement	 
>1388	Identifier	false
>1389	ExpressionStatement	 
>1390	AssignmentExpr	inputTimer = inputDelay = 0
>1391	AssignmentExpr	inputDelay = 0
>1392	PrimaryExpression	0
>1393	Identifier	inputDelay
>1394	Identifier	inputTimer
>1395	CompoundStatement	 
>1396	ReturnStatement	 
>1397	Identifier	true
>1398	IfStatement	if ( inputTimer >= inputDelay )
>1399	CompoundStatement	 
>1400	IfStatement	if ( inputDelay == 0 )
>1401	ElseStatement	else
>1402	ExpressionStatement	 
>1403	AssignmentExpr	inputDelay *= SLIDER_REPEAT_ACCEL
>1404	Identifier	SLIDER_REPEAT_ACCEL
>1405	Identifier	inputDelay
>1406	ExpressionStatement	 
>1407	AssignmentExpr	inputDelay = SLIDER_REPEAT_DELAY
>1408	Identifier	SLIDER_REPEAT_DELAY
>1409	Identifier	inputDelay
>1410	Condition	 
>1411	EqualityExpression	inputDelay == 0
>1412	PrimaryExpression	0
>1413	Identifier	inputDelay
>1414	ExpressionStatement	 
>1415	AssignmentExpr	inputTimer = 0
>1416	PrimaryExpression	0
>1417	Identifier	inputTimer
>1418	IfStatement	if ( value != oldValue )
>1419	ExpressionStatement	 
>1420	AssignmentExpr	_hadInput = true
>1421	Identifier	true
>1422	Identifier	_hadInput
>1423	Condition	 
>1424	EqualityExpression	value != oldValue
>1425	Identifier	oldValue
>1426	Identifier	value
>1427	ExpressionStatement	 
>1428	CallExpression	setValue ( value + inputAmount )
>1429	ArgumentList	value + inputAmount
>1430	Argument	value + inputAmount
>1431	AdditiveExpression	value + inputAmount
>1432	Identifier	inputAmount
>1433	Identifier	value
>1434	Callee	setValue
>1435	Identifier	setValue
>1436	IdentifierDeclStatement	 
>1437	IdentifierDecl	oldValue = value
>1438	AssignmentExpr	oldValue = value
>1439	Identifier	value
>1440	Identifier	value
>1441	Identifier	oldValue
>1442	IdentifierDeclType	float
>1443	Condition	 
>1444	RelationalExpression	inputTimer >= inputDelay
>1445	Identifier	inputDelay
>1446	Identifier	inputTimer
>1447	ExpressionStatement	 
>1448	AssignmentExpr	inputTimer += dt
>1449	Identifier	dt
>1450	Identifier	inputTimer
>1451	Condition	 
>1452	EqualityExpression	inputAmount != 0
>1453	PrimaryExpression	0
>1454	Identifier	inputAmount
>1455	IfStatement	if ( core -> joystick . position . x <= - SLIDER_JOY_THRESHOLD )
>1456	ElseStatement	else
>1457	IfStatement	if ( core -> joystick . position . x >= SLIDER_JOY_THRESHOLD )
>1458	ElseStatement	else
>1459	IfStatement	if ( core -> joystick . dpadLeft )
>1460	ElseStatement	else
>1461	IfStatement	if ( core -> joystick . dpadRight )
>1462	ElseStatement	else
>1463	IfStatement	if ( obj && obj -> isActing ( ACTION_MENULEFT ) )
>1464	ElseStatement	else
>1465	IfStatement	if ( obj && obj -> isActing ( ACTION_MENURIGHT ) )
>1466	ElseStatement	else
>1467	ExpressionStatement	 
>1468	AssignmentExpr	inputAmount = 0
>1469	PrimaryExpression	0
>1470	Identifier	inputAmount
>1471	ExpressionStatement	 
>1472	AssignmentExpr	inputAmount = + 0.1f
>1473	UnaryOp	+ 0.1f
>1474	PrimaryExpression	0.1f
>1475	UnaryOperator	+
>1476	Identifier	inputAmount
>1477	Condition	 
>1478	AndExpression	obj && obj -> isActing ( ACTION_MENURIGHT )
>1479	CallExpression	obj -> isActing ( ACTION_MENURIGHT )
>1480	ArgumentList	ACTION_MENURIGHT
>1481	Argument	ACTION_MENURIGHT
>1482	Identifier	ACTION_MENURIGHT
>1483	Callee	obj -> isActing
>1484	PtrMemberAccess	obj -> isActing
>1485	Identifier	isActing
>1486	Identifier	obj
>1487	Identifier	obj
>1488	ExpressionStatement	 
>1489	AssignmentExpr	inputAmount = - 0.1f
>1490	UnaryOp	- 0.1f
>1491	PrimaryExpression	0.1f
>1492	UnaryOperator	-
>1493	Identifier	inputAmount
>1494	Condition	 
>1495	AndExpression	obj && obj -> isActing ( ACTION_MENULEFT )
>1496	CallExpression	obj -> isActing ( ACTION_MENULEFT )
>1497	ArgumentList	ACTION_MENULEFT
>1498	Argument	ACTION_MENULEFT
>1499	Identifier	ACTION_MENULEFT
>1500	Callee	obj -> isActing
>1501	PtrMemberAccess	obj -> isActing
>1502	Identifier	isActing
>1503	Identifier	obj
>1504	Identifier	obj
>1505	ExpressionStatement	 
>1506	AssignmentExpr	inputAmount = + 0.1f
>1507	UnaryOp	+ 0.1f
>1508	PrimaryExpression	0.1f
>1509	UnaryOperator	+
>1510	Identifier	inputAmount
>1511	Condition	 
>1512	MemberAccess	core -> joystick . dpadRight
>1513	Identifier	dpadRight
>1514	PtrMemberAccess	core -> joystick
>1515	Identifier	joystick
>1516	Identifier	core
>1517	ExpressionStatement	 
>1518	AssignmentExpr	inputAmount = - 0.1f
>1519	UnaryOp	- 0.1f
>1520	PrimaryExpression	0.1f
>1521	UnaryOperator	-
>1522	Identifier	inputAmount
>1523	Condition	 
>1524	MemberAccess	core -> joystick . dpadLeft
>1525	Identifier	dpadLeft
>1526	PtrMemberAccess	core -> joystick
>1527	Identifier	joystick
>1528	Identifier	core
>1529	ExpressionStatement	 
>1530	AssignmentExpr	inputAmount = + 0.1f
>1531	UnaryOp	+ 0.1f
>1532	PrimaryExpression	0.1f
>1533	UnaryOperator	+
>1534	Identifier	inputAmount
>1535	Condition	 
>1536	RelationalExpression	core -> joystick . position . x >= SLIDER_JOY_THRESHOLD
>1537	Identifier	SLIDER_JOY_THRESHOLD
>1538	MemberAccess	core -> joystick . position . x
>1539	Identifier	x
>1540	MemberAccess	core -> joystick . position
>1541	Identifier	position
>1542	PtrMemberAccess	core -> joystick
>1543	Identifier	joystick
>1544	Identifier	core
>1545	ExpressionStatement	 
>1546	AssignmentExpr	inputAmount = - 0.1f
>1547	UnaryOp	- 0.1f
>1548	PrimaryExpression	0.1f
>1549	UnaryOperator	-
>1550	Identifier	inputAmount
>1551	Condition	 
>1552	RelationalExpression	core -> joystick . position . x <= - SLIDER_JOY_THRESHOLD
>1553	UnaryOp	- SLIDER_JOY_THRESHOLD
>1554	Identifier	SLIDER_JOY_THRESHOLD
>1555	UnaryOperator	-
>1556	MemberAccess	core -> joystick . position . x
>1557	Identifier	x
>1558	MemberAccess	core -> joystick . position
>1559	Identifier	position
>1560	PtrMemberAccess	core -> joystick
>1561	Identifier	joystick
>1562	Identifier	core
>1563	IdentifierDeclStatement	 
>1564	IdentifierDecl	* obj = dsq -> getTopStateObject ( )
>1565	AssignmentExpr	* obj = dsq -> getTopStateObject ( )
>1566	CallExpression	dsq -> getTopStateObject ( )
>1567	ArgumentList	 
>1568	Callee	dsq -> getTopStateObject
>1569	PtrMemberAccess	dsq -> getTopStateObject
>1570	Identifier	getTopStateObject
>1571	Identifier	dsq
>1572	Identifier	obj
>1573	Identifier	obj
>1574	IdentifierDeclType	StateObject *
>1575	IdentifierDeclStatement	 
>1576	IdentifierDecl	inputAmount
>1577	Identifier	inputAmount
>1578	IdentifierDeclType	float
>1579	IfStatement	if ( ! ( core -> mouse . position - this -> position ) . isLength2DIn ( 5 ) )
>1580	ReturnStatement	 
>1581	Identifier	false
>1582	Condition	 
>1583	UnaryOp	! ( core -> mouse . position - this -> position ) . isLength2DIn ( 5 )
>1584	CallExpression	( core -> mouse . position - this -> position ) . isLength2DIn ( 5 )
>1585	ArgumentList	5
>1586	Argument	5
>1587	PrimaryExpression	5
>1588	Callee	( core -> mouse . position - this -> position ) . isLength2DIn
>1589	MemberAccess	( core -> mouse . position - this -> position ) . isLength2DIn
>1590	Identifier	isLength2DIn
>1591	AdditiveExpression	core -> mouse . position - this -> position
>1592	PtrMemberAccess	this -> position
>1593	Identifier	position
>1594	Identifier	this
>1595	MemberAccess	core -> mouse . position
>1596	Identifier	position
>1597	PtrMemberAccess	core -> mouse
>1598	Identifier	mouse
>1599	Identifier	core
>1600	UnaryOperator	!
>1637	FunctionDef	AquariaSlider 
>1638	ParameterList	 
>1639	ReturnType	void
>1640	CompoundStatement	 
>1641	ExpressionStatement	 
>1642	CallExpression	AquariaGuiElement 
>1643	ArgumentList	 
>1644	Callee	AquariaGuiElement 
>1645	Identifier	AquariaGuiElement 
>1646	ExpressionStatement	 
>1647	CallExpression	Slider 
>1648	ArgumentList	 
>1649	Callee	Slider 
>1650	Identifier	Slider 
>1654	FunctionDef	AquariaSlider 
>1655	ParameterList	 
>1656	ReturnType	Vector
>1657	CompoundStatement	 
>1658	ReturnStatement	 
>1659	CallExpression	getWorldPosition ( )
>1660	ArgumentList	 
>1661	Callee	getWorldPosition
>1662	Identifier	getWorldPosition
>1667	FunctionDef	AquariaSlider 
>1668	ParameterList	 
>1669	ReturnType	bool
>1670	CompoundStatement	 
>1671	ReturnStatement	 
>1672	AndExpression	! isHidden ( ) && alpha . x > 0 && alphaMod > 0
>1673	AndExpression	alpha . x > 0 && alphaMod > 0
>1674	RelationalExpression	alphaMod > 0
>1675	PrimaryExpression	0
>1676	Identifier	alphaMod
>1677	RelationalExpression	alpha . x > 0
>1678	PrimaryExpression	0
>1679	MemberAccess	alpha . x
>1680	Identifier	x
>1681	Identifier	alpha
>1682	UnaryOp	! isHidden ( )
>1683	CallExpression	isHidden ( )
>1684	ArgumentList	 
>1685	Callee	isHidden
>1686	Identifier	isHidden
>1687	UnaryOperator	!
>1695	FunctionDef	AquariaCheckBox 
>1696	ParameterList	 
>1697	CompoundStatement	 
>1701	FunctionDef	AquariaCheckBox 
>1702	ParameterList	float dt
>1703	Parameter	 
>1704	Identifier	dt
>1705	ParameterType	float
>1706	ReturnType	void
>1707	CompoundStatement	 
>1708	IfStatement	if ( ! hasInput ( ) )
>1709	ElseStatement	else
>1710	CompoundStatement	 
>1711	ExpressionStatement	 
>1712	CallExpression	CheckBox 
>1713	ArgumentList	dt
>1714	Argument	dt
>1715	Identifier	dt
>1716	Callee	CheckBox 
>1717	Identifier	CheckBox 
>1718	CompoundStatement	 
>1719	ExpressionStatement	 
>1720	CallExpression	RenderObject 
>1721	ArgumentList	dt
>1722	Argument	dt
>1723	Identifier	dt
>1724	Callee	RenderObject 
>1725	Identifier	RenderObject 
>1726	Condition	 
>1727	UnaryOp	! hasInput ( )
>1728	CallExpression	hasInput ( )
>1729	ArgumentList	 
>1730	Callee	hasInput
>1731	Identifier	hasInput
>1732	UnaryOperator	!
>1733	ExpressionStatement	 
>1734	CallExpression	AquariaGuiElement 
>1735	ArgumentList	dt
>1736	Argument	dt
>1737	Identifier	dt
>1738	Callee	AquariaGuiElement 
>1739	Identifier	AquariaGuiElement 
>1745	FunctionDef	AquariaCheckBox 
>1746	ParameterList	 
>1747	ReturnType	void
>1748	CompoundStatement	 
>1749	ExpressionStatement	 
>1750	CallExpression	AquariaGuiElement 
>1751	ArgumentList	 
>1752	Callee	AquariaGuiElement 
>1753	Identifier	AquariaGuiElement 
>1754	ExpressionStatement	 
>1755	CallExpression	CheckBox 
>1756	ArgumentList	 
>1757	Callee	CheckBox 
>1758	Identifier	CheckBox 
>1762	FunctionDef	AquariaCheckBox 
>1763	ParameterList	 
>1764	ReturnType	Vector
>1765	CompoundStatement	 
>1766	ReturnStatement	 
>1767	CallExpression	getWorldPosition ( )
>1768	ArgumentList	 
>1769	Callee	getWorldPosition
>1770	Identifier	getWorldPosition
>1775	FunctionDef	AquariaCheckBox 
>1776	ParameterList	 
>1777	ReturnType	bool
>1778	CompoundStatement	 
>1779	ReturnStatement	 
>1780	AndExpression	! isHidden ( ) && alpha . x > 0 && alphaMod > 0
>1781	AndExpression	alpha . x > 0 && alphaMod > 0
>1782	RelationalExpression	alphaMod > 0
>1783	PrimaryExpression	0
>1784	Identifier	alphaMod
>1785	RelationalExpression	alpha . x > 0
>1786	PrimaryExpression	0
>1787	MemberAccess	alpha . x
>1788	Identifier	x
>1789	Identifier	alpha
>1790	UnaryOp	! isHidden ( )
>1791	CallExpression	isHidden ( )
>1792	ArgumentList	 
>1793	Callee	isHidden
>1794	Identifier	isHidden
>1795	UnaryOperator	!
>1805	FunctionDef	AquariaKeyConfig 
>1806	ParameterList	const std 
>1807	Parameter	 
>1808	Identifier	inputIdx
>1809	ParameterType	int
>1810	Parameter	 
>1811	Identifier	inputSetType
>1812	ParameterType	InputSetType
>1813	Parameter	 
>1814	Identifier	actionInputName
>1815	ParameterType	const std 
>1816	CompoundStatement	 
>1817	ExpressionStatement	 
>1818	CallExpression	toggleEnterKey ( false )
>1819	ArgumentList	false
>1820	Argument	false
>1821	Identifier	false
>1822	Callee	toggleEnterKey
>1823	Identifier	toggleEnterKey
>1824	ExpressionStatement	 
>1825	AssignmentExpr	locked = 0
>1826	PrimaryExpression	0
>1827	Identifier	locked
>1828	ExpressionStatement	 
>1829	AssignmentExpr	keyDown = false
>1830	Identifier	false
>1831	Identifier	keyDown
>1832	ExpressionStatement	 
>1833	CallExpression	addChild ( keyConfigFont , PM_POINTER )
>1834	ArgumentList	keyConfigFont
>1835	Argument	PM_POINTER
>1836	Identifier	PM_POINTER
>1837	Argument	keyConfigFont
>1838	Identifier	keyConfigFont
>1839	Callee	addChild
>1840	Identifier	addChild
>1841	ExpressionStatement	 
>1842	CallExpression	keyConfigFont -> setAlign ( ALIGN_CENTER )
>1843	ArgumentList	ALIGN_CENTER
>1844	Argument	ALIGN_CENTER
>1845	Identifier	ALIGN_CENTER
>1846	Callee	keyConfigFont -> setAlign
>1847	PtrMemberAccess	keyConfigFont -> setAlign
>1848	Identifier	setAlign
>1849	Identifier	keyConfigFont
>1850	ExpressionStatement	 
>1851	AssignmentExpr	keyConfigFont = new TTFText ( & dsq -> fontArialSmallest )
>1852	UnaryOp	& dsq -> fontArialSmallest
>1853	PtrMemberAccess	dsq -> fontArialSmallest
>1854	Identifier	fontArialSmallest
>1855	Identifier	dsq
>1856	UnaryOperator	&
>1857	Identifier	keyConfigFont
>1858	ExpressionStatement	 
>1859	CallExpression	addChild ( bg , PM_POINTER )
>1860	ArgumentList	bg
>1861	Argument	PM_POINTER
>1862	Identifier	PM_POINTER
>1863	Argument	bg
>1864	Identifier	bg
>1865	Callee	addChild
>1866	Identifier	addChild
>1867	ExpressionStatement	 
>1868	AssignmentExpr	bg -> alphaMod = 0
>1869	PrimaryExpression	0
>1870	PtrMemberAccess	bg -> alphaMod
>1871	Identifier	alphaMod
>1872	Identifier	bg
>1873	ExpressionStatement	 
>1874	AssignmentExpr	bg -> color = Vector ( 0.5 , 0.5 , 0.5 )
>1875	CallExpression	Vector ( 0.5 , 0.5 , 0.5 )
>1876	ArgumentList	0.5
>1877	Argument	0.5
>1878	PrimaryExpression	0.5
>1879	Argument	0.5
>1880	PrimaryExpression	0.5
>1881	Argument	0.5
>1882	PrimaryExpression	0.5
>1883	Callee	Vector
>1884	Identifier	Vector
>1885	PtrMemberAccess	bg -> color
>1886	Identifier	color
>1887	Identifier	bg
>1888	IfStatement	if ( inputSetType == INPUTSET_OTHER )
>1889	ElseStatement	else
>1890	ExpressionStatement	 
>1891	CallExpression	bg -> setWidthHeight ( 100 , 20 )
>1892	ArgumentList	100
>1893	Argument	20
>1894	PrimaryExpression	20
>1895	Argument	100
>1896	PrimaryExpression	100
>1897	Callee	bg -> setWidthHeight
>1898	PtrMemberAccess	bg -> setWidthHeight
>1899	Identifier	setWidthHeight
>1900	Identifier	bg
>1901	ExpressionStatement	 
>1902	CallExpression	bg -> setWidthHeight ( 40 , 20 )
>1903	ArgumentList	40
>1904	Argument	20
>1905	PrimaryExpression	20
>1906	Argument	40
>1907	PrimaryExpression	40
>1908	Callee	bg -> setWidthHeight
>1909	PtrMemberAccess	bg -> setWidthHeight
>1910	Identifier	setWidthHeight
>1911	Identifier	bg
>1912	Condition	 
>1913	EqualityExpression	inputSetType == INPUTSET_OTHER
>1914	Identifier	INPUTSET_OTHER
>1915	Identifier	inputSetType
>1916	ExpressionStatement	 
>1917	AssignmentExpr	bg = new Quad ( )
>1918	UnaryExpression	new Quad ( )
>1919	Identifier	bg
>1941	FunctionDef	AquariaKeyConfig 
>1942	ParameterList	 
>1943	ReturnType	void
>1944	CompoundStatement	 
>1945	IfStatement	if ( waitingForInput == this )
>1946	ExpressionStatement	 
>1947	AssignmentExpr	waitingForInput = 0
>1948	PrimaryExpression	0
>1949	Identifier	waitingForInput
>1950	Condition	 
>1951	EqualityExpression	waitingForInput == this
>1952	Identifier	this
>1953	Identifier	waitingForInput
>1954	ExpressionStatement	 
>1955	CallExpression	RenderObject 
>1956	ArgumentList	 
>1957	Callee	RenderObject 
>1958	Identifier	RenderObject 
>1959	ExpressionStatement	 
>1960	CallExpression	AquariaGuiElement 
>1961	ArgumentList	 
>1962	Callee	AquariaGuiElement 
>1963	Identifier	AquariaGuiElement 
>1969	FunctionDef	AquariaKeyConfig 
>1970	ParameterList	 
>1971	ReturnType	Vector
>1972	CompoundStatement	 
>1973	ReturnStatement	 
>1974	CallExpression	getWorldPosition ( )
>1975	ArgumentList	 
>1976	Callee	getWorldPosition
>1977	Identifier	getWorldPosition
>1982	FunctionDef	AquariaKeyConfig 
>1983	ParameterList	 
>1984	ReturnType	bool
>1985	CompoundStatement	 
>1986	ReturnStatement	 
>1987	AndExpression	! isHidden ( ) && alpha . x > 0 && alphaMod > 0
>1988	AndExpression	alpha . x > 0 && alphaMod > 0
>1989	RelationalExpression	alphaMod > 0
>1990	PrimaryExpression	0
>1991	Identifier	alphaMod
>1992	RelationalExpression	alpha . x > 0
>1993	PrimaryExpression	0
>1994	MemberAccess	alpha . x
>1995	Identifier	x
>1996	Identifier	alpha
>1997	UnaryOp	! isHidden ( )
>1998	CallExpression	isHidden ( )
>1999	ArgumentList	 
>2000	Callee	isHidden
>2001	Identifier	isHidden
>2002	UnaryOperator	!
>2010	FunctionDef	AquariaKeyConfig 
>2011	ParameterList	int on
>2012	Parameter	 
>2013	Identifier	on
>2014	ParameterType	int
>2015	ReturnType	void
>2016	CompoundStatement	 
>2017	IfStatement	if ( on == 1 )
>2018	ElseStatement	else
>2019	IfStatement	if ( on == 0 )
>2020	ElseStatement	else
>2021	CompoundStatement	 
>2022	ExpressionStatement	 
>2023	AssignmentExpr	bg -> color = Vector ( 0.5 , 0.5 , 0.5 )
>2024	CallExpression	Vector ( 0.5 , 0.5 , 0.5 )
>2025	ArgumentList	0.5
>2026	Argument	0.5
>2027	PrimaryExpression	0.5
>2028	Argument	0.5
>2029	PrimaryExpression	0.5
>2030	Argument	0.5
>2031	PrimaryExpression	0.5
>2032	Callee	Vector
>2033	Identifier	Vector
>2034	PtrMemberAccess	bg -> color
>2035	Identifier	color
>2036	Identifier	bg
>2037	ExpressionStatement	 
>2038	AssignmentExpr	bg -> alphaMod = 0.5
>2039	PrimaryExpression	0.5
>2040	PtrMemberAccess	bg -> alphaMod
>2041	Identifier	alphaMod
>2042	Identifier	bg
>2043	CompoundStatement	 
>2044	ExpressionStatement	 
>2045	AssignmentExpr	bg -> color = Vector ( 0.1 , 0.1 , 0.1 )
>2046	CallExpression	Vector ( 0.1 , 0.1 , 0.1 )
>2047	ArgumentList	0.1
>2048	Argument	0.1
>2049	PrimaryExpression	0.1
>2050	Argument	0.1
>2051	PrimaryExpression	0.1
>2052	Argument	0.1
>2053	PrimaryExpression	0.1
>2054	Callee	Vector
>2055	Identifier	Vector
>2056	PtrMemberAccess	bg -> color
>2057	Identifier	color
>2058	Identifier	bg
>2059	ExpressionStatement	 
>2060	AssignmentExpr	bg -> alphaMod = 0
>2061	PrimaryExpression	0
>2062	PtrMemberAccess	bg -> alphaMod
>2063	Identifier	alphaMod
>2064	Identifier	bg
>2065	Condition	 
>2066	EqualityExpression	on == 0
>2067	PrimaryExpression	0
>2068	Identifier	on
>2069	CompoundStatement	 
>2070	ExpressionStatement	 
>2071	AssignmentExpr	bg -> alphaMod = 0.25
>2072	PrimaryExpression	0.25
>2073	PtrMemberAccess	bg -> alphaMod
>2074	Identifier	alphaMod
>2075	Identifier	bg
>2076	ExpressionStatement	 
>2077	AssignmentExpr	bg -> color = Vector ( 0.75 , 0.75 , 0.75 )
>2078	CallExpression	Vector ( 0.75 , 0.75 , 0.75 )
>2079	ArgumentList	0.75
>2080	Argument	0.75
>2081	PrimaryExpression	0.75
>2082	Argument	0.75
>2083	PrimaryExpression	0.75
>2084	Argument	0.75
>2085	PrimaryExpression	0.75
>2086	Callee	Vector
>2087	Identifier	Vector
>2088	PtrMemberAccess	bg -> color
>2089	Identifier	color
>2090	Identifier	bg
>2091	Condition	 
>2092	EqualityExpression	on == 1
>2093	PrimaryExpression	1
>2094	Identifier	on
>2104	FunctionDef	AquariaKeyConfig 
>2105	ParameterList	int lock
>2106	Parameter	 
>2107	Identifier	lock
>2108	ParameterType	int
>2109	ReturnType	void
>2110	CompoundStatement	 
>2111	ExpressionStatement	 
>2112	AssignmentExpr	locked = lock
>2113	Identifier	lock
>2114	Identifier	locked
>2120	FunctionDef	AquariaKeyConfig 
>2121	ParameterList	float dt
>2122	Parameter	 
>2123	Identifier	dt
>2124	ParameterType	float
>2125	ReturnType	void
>2126	CompoundStatement	 
>2127	ExpressionStatement	 
>2128	AssignmentExpr	inLoop = false
>2129	Identifier	false
>2130	Identifier	inLoop
>2131	IfStatement	if ( waitingForInput == this || ( ! waitingForInput && ( core -> mouse . position . x > ( p . x - bg -> getWidth ( ) * \
>2132	ElseStatement	else
>2133	CompoundStatement	 
>2134	ExpressionStatement	 
>2135	AssignmentExpr	keyDown = false
>2136	Identifier	false
>2137	Identifier	keyDown
>2138	ExpressionStatement	 
>2139	CallExpression	toggleEnterKey ( 0 )
>2140	ArgumentList	0
>2141	Argument	0
>2142	PrimaryExpression	0
>2143	Callee	toggleEnterKey
>2144	Identifier	toggleEnterKey
>2145	CompoundStatement	 
>2146	IfStatement	if ( ! keyDown && ( core -> mouse . buttons . left || core -> mouse . buttons . right ) )
>2147	ElseStatement	else
>2148	IfStatement	if ( keyDown && ( ! core -> mouse . buttons . left && ! core -> mouse . buttons . right ) )
>2149	CompoundStatement	 
>2150	IfStatement	if ( ! locked )
>2151	ElseStatement	else
>2152	CompoundStatement	 
>2153	ExpressionStatement	 
>2154	CallExpression	dsq -> sound -> playSfx ( \"denied\" )
>2155	ArgumentList	\"denied\"
>2156	Argument	\"denied\"
>2157	PrimaryExpression	\"denied\"
>2158	Callee	dsq -> sound -> playSfx
>2159	PtrMemberAccess	dsq -> sound -> playSfx
>2160	Identifier	playSfx
>2161	PtrMemberAccess	dsq -> sound
>2162	Identifier	sound
>2163	Identifier	dsq
>2164	CompoundStatement	 
>2165	IfStatement	if ( waitingForInput == this )
>2166	ElseStatement	else
>2167	CompoundStatement	 
>2168	ExpressionStatement	 
>2169	AssignmentExpr	AquariaGuiElement 
>2170	Identifier	false
>2171	Identifier	AquariaGuiElement 
>2172	ExpressionStatement	 
>2173	CallExpression	toggleEnterKey ( 1 )
>2174	ArgumentList	1
>2175	Argument	1
>2176	PrimaryExpression	1
>2177	Callee	toggleEnterKey
>2178	Identifier	toggleEnterKey
>2179	ExpressionStatement	 
>2180	AssignmentExpr	waitingForInput = this
>2181	Identifier	this
>2182	Identifier	waitingForInput
>2183	CompoundStatement	 
>2184	ExpressionStatement	 
>2185	AssignmentExpr	AquariaGuiElement 
>2186	Identifier	true
>2187	Identifier	AquariaGuiElement 
>2188	ExpressionStatement	 
>2189	CallExpression	toggleEnterKey ( 0 )
>2190	ArgumentList	0
>2191	Argument	0
>2192	PrimaryExpression	0
>2193	Callee	toggleEnterKey
>2194	Identifier	toggleEnterKey
>2195	ExpressionStatement	 
>2196	AssignmentExpr	waitingForInput = 0
>2197	PrimaryExpression	0
>2198	Identifier	waitingForInput
>2199	Condition	 
>2200	EqualityExpression	waitingForInput == this
>2201	Identifier	this
>2202	Identifier	waitingForInput
>2203	Condition	 
>2204	UnaryOp	! locked
>2205	Identifier	locked
>2206	UnaryOperator	!
>2207	ExpressionStatement	 
>2208	AssignmentExpr	keyDown = false
>2209	Identifier	false
>2210	Identifier	keyDown
>2211	Condition	 
>2212	AndExpression	keyDown && ( ! core -> mouse . buttons . left && ! core -> mouse . buttons . right )
>2213	AndExpression	! core -> mouse . buttons . left && ! core -> mouse . buttons . right
>2214	UnaryOp	! core -> mouse . buttons . right
>2215	MemberAccess	core -> mouse . buttons . right
>2216	Identifier	right
>2217	MemberAccess	core -> mouse . buttons
>2218	Identifier	buttons
>2219	PtrMemberAccess	core -> mouse
>2220	Identifier	mouse
>2221	Identifier	core
>2222	UnaryOperator	!
>2223	UnaryOp	! core -> mouse . buttons . left
>2224	MemberAccess	core -> mouse . buttons . left
>2225	Identifier	left
>2226	MemberAccess	core -> mouse . buttons
>2227	Identifier	buttons
>2228	PtrMemberAccess	core -> mouse
>2229	Identifier	mouse
>2230	Identifier	core
>2231	UnaryOperator	!
>2232	Identifier	keyDown
>2233	CompoundStatement	 
>2234	ExpressionStatement	 
>2235	AssignmentExpr	keyDown = true
>2236	Identifier	true
>2237	Identifier	keyDown
>2238	Condition	 
>2239	AndExpression	! keyDown && ( core -> mouse . buttons . left || core -> mouse . buttons . right )
>2240	OrExpression	core -> mouse . buttons . left || core -> mouse . buttons . right
>2241	MemberAccess	core -> mouse . buttons . right
>2242	Identifier	right
>2243	MemberAccess	core -> mouse . buttons
>2244	Identifier	buttons
>2245	PtrMemberAccess	core -> mouse
>2246	Identifier	mouse
>2247	Identifier	core
>2248	MemberAccess	core -> mouse . buttons . left
>2249	Identifier	left
>2250	MemberAccess	core -> mouse . buttons
>2251	Identifier	buttons
>2252	PtrMemberAccess	core -> mouse
>2253	Identifier	mouse
>2254	Identifier	core
>2255	UnaryOp	! keyDown
>2256	Identifier	keyDown
>2257	UnaryOperator	!
>2258	IfStatement	if ( waitingForInput != this )
>2259	CompoundStatement	 
>2260	ExpressionStatement	 
>2261	CallExpression	toggleEnterKey ( - 1 )
>2262	ArgumentList	- 1
>2263	Argument	- 1
>2264	UnaryOp	- 1
>2265	PrimaryExpression	1
>2266	UnaryOperator	-
>2267	Callee	toggleEnterKey
>2268	Identifier	toggleEnterKey
>2269	Condition	 
>2270	EqualityExpression	waitingForInput != this
>2271	Identifier	this
>2272	Identifier	waitingForInput
>2273	Condition	 
>2274	OrExpression	waitingForInput == this || ( ! waitingForInput && ( core -> mouse . position . x > ( p . x - bg -> getWidth ( ) * \
>2275	AndExpression	! waitingForInput && ( core -> mouse . position . x > ( p . x - bg -> getWidth ( ) * 0.5f ) && core \
>2276	AndExpression	core -> mouse . position . x > ( p . x - bg -> getWidth ( ) * 0.5f ) && core -> mouse . position . x < ( \
>2277	AndExpression	core -> mouse . position . x < ( p . x + bg -> getWidth ( ) * 0.5f ) && core -> mouse . position . y > ( \
>2278	AndExpression	core -> mouse . position . y > ( p . y - bg -> getHeight ( ) * 0.5f ) && core -> mouse . position . \
>2279	RelationalExpression	core -> mouse . position . y < ( p . y + bg -> getHeight ( ) * 0.5f )
>2280	AdditiveExpression	p . y + bg -> getHeight ( ) * 0.5f
>2281	MultiplicativeExpression	bg -> getHeight ( ) * 0.5f
>2282	PrimaryExpression	0.5f
>2283	CallExpression	bg -> getHeight ( )
>2284	ArgumentList	 
>2285	Callee	bg -> getHeight
>2286	PtrMemberAccess	bg -> getHeight
>2287	Identifier	getHeight
>2288	Identifier	bg
>2289	MemberAccess	p . y
>2290	Identifier	y
>2291	Identifier	p
>2292	MemberAccess	core -> mouse . position . y
>2293	Identifier	y
>2294	MemberAccess	core -> mouse . position
>2295	Identifier	position
>2296	PtrMemberAccess	core -> mouse
>2297	Identifier	mouse
>2298	Identifier	core
>2299	RelationalExpression	core -> mouse . position . y > ( p . y - bg -> getHeight ( ) * 0.5f )
>2300	AdditiveExpression	p . y - bg -> getHeight ( ) * 0.5f
>2301	MultiplicativeExpression	bg -> getHeight ( ) * 0.5f
>2302	PrimaryExpression	0.5f
>2303	CallExpression	bg -> getHeight ( )
>2304	ArgumentList	 
>2305	Callee	bg -> getHeight
>2306	PtrMemberAccess	bg -> getHeight
>2307	Identifier	getHeight
>2308	Identifier	bg
>2309	MemberAccess	p . y
>2310	Identifier	y
>2311	Identifier	p
>2312	MemberAccess	core -> mouse . position . y
>2313	Identifier	y
>2314	MemberAccess	core -> mouse . position
>2315	Identifier	position
>2316	PtrMemberAccess	core -> mouse
>2317	Identifier	mouse
>2318	Identifier	core
>2319	RelationalExpression	core -> mouse . position . x < ( p . x + bg -> getWidth ( ) * 0.5f )
>2320	AdditiveExpression	p . x + bg -> getWidth ( ) * 0.5f
>2321	MultiplicativeExpression	bg -> getWidth ( ) * 0.5f
>2322	PrimaryExpression	0.5f
>2323	CallExpression	bg -> getWidth ( )
>2324	ArgumentList	 
>2325	Callee	bg -> getWidth
>2326	PtrMemberAccess	bg -> getWidth
>2327	Identifier	getWidth
>2328	Identifier	bg
>2329	MemberAccess	p . x
>2330	Identifier	x
>2331	Identifier	p
>2332	MemberAccess	core -> mouse . position . x
>2333	Identifier	x
>2334	MemberAccess	core -> mouse . position
>2335	Identifier	position
>2336	PtrMemberAccess	core -> mouse
>2337	Identifier	mouse
>2338	Identifier	core
>2339	RelationalExpression	core -> mouse . position . x > ( p . x - bg -> getWidth ( ) * 0.5f )
>2340	AdditiveExpression	p . x - bg -> getWidth ( ) * 0.5f
>2341	MultiplicativeExpression	bg -> getWidth ( ) * 0.5f
>2342	PrimaryExpression	0.5f
>2343	CallExpression	bg -> getWidth ( )
>2344	ArgumentList	 
>2345	Callee	bg -> getWidth
>2346	PtrMemberAccess	bg -> getWidth
>2347	Identifier	getWidth
>2348	Identifier	bg
>2349	MemberAccess	p . x
>2350	Identifier	x
>2351	Identifier	p
>2352	MemberAccess	core -> mouse . position . x
>2353	Identifier	x
>2354	MemberAccess	core -> mouse . position
>2355	Identifier	position
>2356	PtrMemberAccess	core -> mouse
>2357	Identifier	mouse
>2358	Identifier	core
>2359	UnaryOp	! waitingForInput
>2360	Identifier	waitingForInput
>2361	UnaryOperator	!
>2362	EqualityExpression	waitingForInput == this
>2363	Identifier	this
>2364	Identifier	waitingForInput
>2365	IdentifierDeclStatement	 
>2366	IdentifierDecl	p = getWorldPosition ( )
>2367	AssignmentExpr	p = getWorldPosition ( )
>2368	CallExpression	getWorldPosition ( )
>2369	ArgumentList	 
>2370	Callee	getWorldPosition
>2371	Identifier	getWorldPosition
>2372	Identifier	p
>2373	Identifier	p
>2374	IdentifierDeclType	Vector
>2375	IfStatement	if ( waitingForInput == this )
>2376	CompoundStatement	 
>2377	SwitchStatement	switch ( inputSetType )
>2378	CompoundStatement	 
>2379	BreakStatement	 
>2380	CompoundStatement	 
>2381	IfStatement	if ( core -> getKeyState ( KEY_DELETE ) || core -> getKeyState ( KEY_BACKSPACE ) )
>2382	ElseStatement	else
>2383	CompoundStatement	 
>2384	ForStatement	for ( int i = ActionMapper 
>2385	CompoundStatement	 
>2386	IfStatement	if ( dsq -> game -> getKeyState ( i ) )
>2387	CompoundStatement	 
>2388	BreakStatement	 
>2389	ExpressionStatement	 
>2390	AssignmentExpr	AquariaGuiElement 
>2391	Identifier	true
>2392	Identifier	AquariaGuiElement 
>2393	ExpressionStatement	 
>2394	AssignmentExpr	waitingForInput = 0
>2395	PrimaryExpression	0
>2396	Identifier	waitingForInput
>2397	ExpressionStatement	 
>2398	CallExpression	toggleEnterKey ( 0 )
>2399	ArgumentList	0
>2400	Argument	0
>2401	PrimaryExpression	0
>2402	Callee	toggleEnterKey
>2403	Identifier	toggleEnterKey
>2404	WhileStatement	while ( dsq -> game -> getKeyState ( i ) )
>2405	CompoundStatement	 
>2406	ExpressionStatement	 
>2407	CallExpression	dsq -> main ( 0.1 )
>2408	ArgumentList	0.1
>2409	Argument	0.1
>2410	PrimaryExpression	0.1
>2411	Callee	dsq -> main
>2412	PtrMemberAccess	dsq -> main
>2413	Identifier	main
>2414	Identifier	dsq
>2415	Condition	 
>2416	CallExpression	dsq -> game -> getKeyState ( i )
>2417	ArgumentList	i
>2418	Argument	i
>2419	Identifier	i
>2420	Callee	dsq -> game -> getKeyState
>2421	PtrMemberAccess	dsq -> game -> getKeyState
>2422	Identifier	getKeyState
>2423	PtrMemberAccess	dsq -> game
>2424	Identifier	game
>2425	Identifier	dsq
>2426	ExpressionStatement	 
>2427	AssignmentExpr	* k = i
>2428	Identifier	i
>2429	UnaryOp	* k
>2430	Identifier	k
>2431	UnaryOperator	*
>2432	Condition	 
>2433	CallExpression	dsq -> game -> getKeyState ( i )
>2434	ArgumentList	i
>2435	Argument	i
>2436	Identifier	i
>2437	Callee	dsq -> game -> getKeyState
>2438	PtrMemberAccess	dsq -> game -> getKeyState
>2439	Identifier	getKeyState
>2440	PtrMemberAccess	dsq -> game
>2441	Identifier	game
>2442	Identifier	dsq
>2443	IncDecOp	 
>2444	IncDec	++
>2445	Identifier	i
>2446	Condition	 
>2447	RelationalExpression	i <= ActionMapper 
>2448	Identifier	ActionMapper 
>2449	Identifier	i
>2450	ForInit	 
>2451	IdentifierDeclStatement	int i = ActionMapper 
>2452	IdentifierDecl	i = ActionMapper 
>2453	AssignmentExpr	i = ActionMapper 
>2454	Identifier	ActionMapper 
>2455	Identifier	ActionMapper 
>2456	Identifier	i
>2457	IdentifierDeclType	int
>2458	CompoundStatement	 
>2459	ExpressionStatement	 
>2460	AssignmentExpr	AquariaGuiElement 
>2461	Identifier	true
>2462	Identifier	AquariaGuiElement 
>2463	ExpressionStatement	 
>2464	AssignmentExpr	waitingForInput = 0
>2465	PrimaryExpression	0
>2466	Identifier	waitingForInput
>2467	ExpressionStatement	 
>2468	CallExpression	toggleEnterKey ( 0 )
>2469	ArgumentList	0
>2470	Argument	0
>2471	PrimaryExpression	0
>2472	Callee	toggleEnterKey
>2473	Identifier	toggleEnterKey
>2474	ExpressionStatement	 
>2475	AssignmentExpr	* k = 0
>2476	PrimaryExpression	0
>2477	UnaryOp	* k
>2478	Identifier	k
>2479	UnaryOperator	*
>2480	Condition	 
>2481	OrExpression	core -> getKeyState ( KEY_DELETE ) || core -> getKeyState ( KEY_BACKSPACE )
>2482	CallExpression	core -> getKeyState ( KEY_BACKSPACE )
>2483	ArgumentList	KEY_BACKSPACE
>2484	Argument	KEY_BACKSPACE
>2485	Identifier	KEY_BACKSPACE
>2486	Callee	core -> getKeyState
>2487	PtrMemberAccess	core -> getKeyState
>2488	Identifier	getKeyState
>2489	Identifier	core
>2490	CallExpression	core -> getKeyState ( KEY_DELETE )
>2491	ArgumentList	KEY_DELETE
>2492	Argument	KEY_DELETE
>2493	Identifier	KEY_DELETE
>2494	Callee	core -> getKeyState
>2495	PtrMemberAccess	core -> getKeyState
>2496	Identifier	getKeyState
>2497	Identifier	core
>2498	Label	 
>2499	Identifier	INPUTSET_JOY
>2500	BreakStatement	 
>2501	Label	 
>2502	Identifier	INPUTSET_MOUSE
>2503	BreakStatement	 
>2504	CompoundStatement	 
>2505	ForStatement	for ( int i = 0 ; i < KEY_MAXARRAY ; i ++ )
>2506	CompoundStatement	 
>2507	IfStatement	if ( core -> getKeyState ( i ) )
>2508	CompoundStatement	 
>2509	BreakStatement	 
>2510	ExpressionStatement	 
>2511	AssignmentExpr	AquariaGuiElement 
>2512	Identifier	true
>2513	Identifier	AquariaGuiElement 
>2514	ExpressionStatement	 
>2515	AssignmentExpr	waitingForInput = 0
>2516	PrimaryExpression	0
>2517	Identifier	waitingForInput
>2518	ExpressionStatement	 
>2519	CallExpression	toggleEnterKey ( 0 )
>2520	ArgumentList	0
>2521	Argument	0
>2522	PrimaryExpression	0
>2523	Callee	toggleEnterKey
>2524	Identifier	toggleEnterKey
>2525	WhileStatement	while ( dsq -> game -> getKeyState ( i ) )
>2526	CompoundStatement	 
>2527	ExpressionStatement	 
>2528	CallExpression	dsq -> main ( 0.1 )
>2529	ArgumentList	0.1
>2530	Argument	0.1
>2531	PrimaryExpression	0.1
>2532	Callee	dsq -> main
>2533	PtrMemberAccess	dsq -> main
>2534	Identifier	main
>2535	Identifier	dsq
>2536	Condition	 
>2537	CallExpression	dsq -> game -> getKeyState ( i )
>2538	ArgumentList	i
>2539	Argument	i
>2540	Identifier	i
>2541	Callee	dsq -> game -> getKeyState
>2542	PtrMemberAccess	dsq -> game -> getKeyState
>2543	Identifier	getKeyState
>2544	PtrMemberAccess	dsq -> game
>2545	Identifier	game
>2546	Identifier	dsq
>2547	IfStatement	if ( i != KEY_ESCAPE )
>2548	CompoundStatement	 
>2549	IfStatement	if ( i == KEY_DELETE || i == KEY_BACKSPACE )
>2550	ElseStatement	else
>2551	ExpressionStatement	 
>2552	AssignmentExpr	* k = i
>2553	Identifier	i
>2554	UnaryOp	* k
>2555	Identifier	k
>2556	UnaryOperator	*
>2557	ExpressionStatement	 
>2558	AssignmentExpr	* k = 0
>2559	PrimaryExpression	0
>2560	UnaryOp	* k
>2561	Identifier	k
>2562	UnaryOperator	*
>2563	Condition	 
>2564	OrExpression	i == KEY_DELETE || i == KEY_BACKSPACE
>2565	EqualityExpression	i == KEY_BACKSPACE
>2566	Identifier	KEY_BACKSPACE
>2567	Identifier	i
>2568	EqualityExpression	i == KEY_DELETE
>2569	Identifier	KEY_DELETE
>2570	Identifier	i
>2571	Condition	 
>2572	EqualityExpression	i != KEY_ESCAPE
>2573	Identifier	KEY_ESCAPE
>2574	Identifier	i
>2575	Condition	 
>2576	CallExpression	core -> getKeyState ( i )
>2577	ArgumentList	i
>2578	Argument	i
>2579	Identifier	i
>2580	Callee	core -> getKeyState
>2581	PtrMemberAccess	core -> getKeyState
>2582	Identifier	getKeyState
>2583	Identifier	core
>2584	IncDecOp	 
>2585	IncDec	++
>2586	Identifier	i
>2587	Condition	 
>2588	RelationalExpression	i < KEY_MAXARRAY
>2589	Identifier	KEY_MAXARRAY
>2590	Identifier	i
>2591	ForInit	 
>2592	IdentifierDeclStatement	int i = 0 ;
>2593	IdentifierDecl	i = 0
>2594	AssignmentExpr	i = 0
>2595	PrimaryExpression	0
>2596	Identifier	i
>2597	Identifier	i
>2598	IdentifierDeclType	int
>2599	Label	 
>2600	Identifier	INPUTSET_KEY
>2601	BreakStatement	 
>2602	CompoundStatement	 
>2603	IfStatement	if ( value )
>2604	CompoundStatement	 
>2605	ForStatement	for ( int i = 0 ; i < KEY_MAXARRAY ; i ++ )
>2606	CompoundStatement	 
>2607	IfStatement	if ( core -> getKeyState ( i ) )
>2608	CompoundStatement	 
>2609	BreakStatement	 
>2610	ExpressionStatement	 
>2611	AssignmentExpr	AquariaGuiElement 
>2612	Identifier	true
>2613	Identifier	AquariaGuiElement 
>2614	ExpressionStatement	 
>2615	AssignmentExpr	waitingForInput = 0
>2616	PrimaryExpression	0
>2617	Identifier	waitingForInput
>2618	ExpressionStatement	 
>2619	CallExpression	toggleEnterKey ( 0 )
>2620	ArgumentList	0
>2621	Argument	0
>2622	PrimaryExpression	0
>2623	Callee	toggleEnterKey
>2624	Identifier	toggleEnterKey
>2625	WhileStatement	while ( dsq -> game -> getKeyState ( i ) )
>2626	CompoundStatement	 
>2627	ExpressionStatement	 
>2628	CallExpression	dsq -> main ( 0.1 )
>2629	ArgumentList	0.1
>2630	Argument	0.1
>2631	PrimaryExpression	0.1
>2632	Callee	dsq -> main
>2633	PtrMemberAccess	dsq -> main
>2634	Identifier	main
>2635	Identifier	dsq
>2636	Condition	 
>2637	CallExpression	dsq -> game -> getKeyState ( i )
>2638	ArgumentList	i
>2639	Argument	i
>2640	Identifier	i
>2641	Callee	dsq -> game -> getKeyState
>2642	PtrMemberAccess	dsq -> game -> getKeyState
>2643	Identifier	getKeyState
>2644	PtrMemberAccess	dsq -> game
>2645	Identifier	game
>2646	Identifier	dsq
>2647	IfStatement	if ( i != KEY_ESCAPE )
>2648	CompoundStatement	 
>2649	IfStatement	if ( i >= KEY_0 && i <= KEY_9 )
>2650	CompoundStatement	 
>2651	ExpressionStatement	 
>2652	AssignmentExpr	* value = i - KEY_0
>2653	AdditiveExpression	i - KEY_0
>2654	Identifier	KEY_0
>2655	Identifier	i
>2656	UnaryOp	* value
>2657	Identifier	value
>2658	UnaryOperator	*
>2659	Condition	 
>2660	AndExpression	i >= KEY_0 && i <= KEY_9
>2661	RelationalExpression	i <= KEY_9
>2662	Identifier	KEY_9
>2663	Identifier	i
>2664	RelationalExpression	i >= KEY_0
>2665	Identifier	KEY_0
>2666	Identifier	i
>2667	Condition	 
>2668	EqualityExpression	i != KEY_ESCAPE
>2669	Identifier	KEY_ESCAPE
>2670	Identifier	i
>2671	Condition	 
>2672	CallExpression	core -> getKeyState ( i )
>2673	ArgumentList	i
>2674	Argument	i
>2675	Identifier	i
>2676	Callee	core -> getKeyState
>2677	PtrMemberAccess	core -> getKeyState
>2678	Identifier	getKeyState
>2679	Identifier	core
>2680	IncDecOp	 
>2681	IncDec	++
>2682	Identifier	i
>2683	Condition	 
>2684	RelationalExpression	i < KEY_MAXARRAY
>2685	Identifier	KEY_MAXARRAY
>2686	Identifier	i
>2687	ForInit	 
>2688	IdentifierDeclStatement	int i = 0 ;
>2689	IdentifierDecl	i = 0
>2690	AssignmentExpr	i = 0
>2691	PrimaryExpression	0
>2692	Identifier	i
>2693	Identifier	i
>2694	IdentifierDeclType	int
>2695	Condition	 
>2696	Identifier	value
>2697	Label	 
>2698	Identifier	INPUTSET_OTHER
>2699	Condition	 
>2700	Identifier	inputSetType
>2701	Condition	 
>2702	EqualityExpression	waitingForInput == this
>2703	Identifier	this
>2704	Identifier	waitingForInput
>2705	IfStatement	if ( waitingForInput == this )
>2706	ElseStatement	else
>2707	CompoundStatement	 
>2708	IfStatement	if ( k )
>2709	ElseStatement	else
>2710	IfStatement	if ( value )
>2711	CompoundStatement	 
>2712	ExpressionStatement	 
>2713	CallExpression	keyConfigFont -> setText ( os . str ( ) )
>2714	ArgumentList	os . str ( )
>2715	Argument	os . str ( )
>2716	CallExpression	os . str ( )
>2717	ArgumentList	 
>2718	Callee	os . str
>2719	MemberAccess	os . str
>2720	Identifier	str
>2721	Identifier	os
>2722	Callee	keyConfigFont -> setText
>2723	PtrMemberAccess	keyConfigFont -> setText
>2724	Identifier	setText
>2725	Identifier	keyConfigFont
>2726	ExpressionStatement	 
>2727	ShiftExpression	os << ( * value )
>2728	UnaryOp	* value
>2729	Identifier	value
>2730	UnaryOperator	*
>2731	Identifier	os
>2732	IdentifierDeclStatement	 
>2733	IdentifierDecl	os
>2734	Identifier	os
>2735	IdentifierDeclType	std 
>2736	Condition	 
>2737	Identifier	value
>2738	CompoundStatement	 
>2739	ExpressionStatement	 
>2740	CallExpression	keyConfigFont -> setText ( getInputCodeToString ( * k ) )
>2741	ArgumentList	getInputCodeToString ( * k )
>2742	Argument	getInputCodeToString ( * k )
>2743	CallExpression	getInputCodeToString ( * k )
>2744	ArgumentList	* k
>2745	Argument	* k
>2746	UnaryOp	* k
>2747	Identifier	k
>2748	UnaryOperator	*
>2749	Callee	getInputCodeToString
>2750	Identifier	getInputCodeToString
>2751	Callee	keyConfigFont -> setText
>2752	PtrMemberAccess	keyConfigFont -> setText
>2753	Identifier	setText
>2754	Identifier	keyConfigFont
>2755	Condition	 
>2756	Identifier	k
>2757	CompoundStatement	 
>2758	ExpressionStatement	 
>2759	CallExpression	keyConfigFont -> setText ( s )
>2760	ArgumentList	s
>2761	Argument	s
>2762	Identifier	s
>2763	Callee	keyConfigFont -> setText
>2764	PtrMemberAccess	keyConfigFont -> setText
>2765	Identifier	setText
>2766	Identifier	keyConfigFont
>2767	ForStatement	for ( int i = 0 ; i < int ( dsq -> game -> getTimer ( 5 ) ) ; i ++ )
>2768	CompoundStatement	 
>2769	ExpressionStatement	 
>2770	AssignmentExpr	s += \"_\"
>2771	PrimaryExpression	\"_\"
>2772	Identifier	s
>2773	IncDecOp	 
>2774	IncDec	++
>2775	Identifier	i
>2776	Condition	 
>2777	RelationalExpression	i < int ( dsq -> game -> getTimer ( 5 ) )
>2778	CallExpression	int ( dsq -> game -> getTimer ( 5 ) )
>2779	ArgumentList	dsq -> game -> getTimer ( 5 )
>2780	Argument	dsq -> game -> getTimer ( 5 )
>2781	CallExpression	dsq -> game -> getTimer ( 5 )
>2782	ArgumentList	5
>2783	Argument	5
>2784	PrimaryExpression	5
>2785	Callee	dsq -> game -> getTimer
>2786	PtrMemberAccess	dsq -> game -> getTimer
>2787	Identifier	getTimer
>2788	PtrMemberAccess	dsq -> game
>2789	Identifier	game
>2790	Identifier	dsq
>2791	Callee	int
>2792	Identifier	int
>2793	Identifier	i
>2794	ForInit	 
>2795	IdentifierDeclStatement	int i = 0 ;
>2796	IdentifierDecl	i = 0
>2797	AssignmentExpr	i = 0
>2798	PrimaryExpression	0
>2799	Identifier	i
>2800	Identifier	i
>2801	IdentifierDeclType	int
>2802	ExpressionStatement	 
>2803	AssignmentExpr	s = \"_\"
>2804	PrimaryExpression	\"_\"
>2805	Identifier	s
>2806	IdentifierDeclStatement	 
>2807	IdentifierDecl	s
>2808	Identifier	s
>2809	IdentifierDeclType	std 
>2810	Condition	 
>2811	EqualityExpression	waitingForInput == this
>2812	Identifier	this
>2813	Identifier	waitingForInput
>2814	IfStatement	if ( inputSetType == INPUTSET_OTHER )
>2815	CompoundStatement	 
>2816	IfStatement	if ( actionInputName == \"s1ax\" )
>2817	ElseStatement	else
>2818	IfStatement	if ( actionInputName == \"s1ay\" )
>2819	ElseStatement	else
>2820	IfStatement	if ( actionInputName == \"s2ax\" )
>2821	ElseStatement	else
>2822	IfStatement	if ( actionInputName == \"s2ay\" )
>2823	ExpressionStatement	 
>2824	AssignmentExpr	value = & dsq -> user . control . s2ay
>2825	UnaryOp	& dsq -> user . control . s2ay
>2826	MemberAccess	dsq -> user . control . s2ay
>2827	Identifier	s2ay
>2828	MemberAccess	dsq -> user . control
>2829	Identifier	control
>2830	PtrMemberAccess	dsq -> user
>2831	Identifier	user
>2832	Identifier	dsq
>2833	UnaryOperator	&
>2834	Identifier	value
>2835	Condition	 
>2836	EqualityExpression	actionInputName == \"s2ay\"
>2837	PrimaryExpression	\"s2ay\"
>2838	Identifier	actionInputName
>2839	ExpressionStatement	 
>2840	AssignmentExpr	value = & dsq -> user . control . s2ax
>2841	UnaryOp	& dsq -> user . control . s2ax
>2842	MemberAccess	dsq -> user . control . s2ax
>2843	Identifier	s2ax
>2844	MemberAccess	dsq -> user . control
>2845	Identifier	control
>2846	PtrMemberAccess	dsq -> user
>2847	Identifier	user
>2848	Identifier	dsq
>2849	UnaryOperator	&
>2850	Identifier	value
>2851	Condition	 
>2852	EqualityExpression	actionInputName == \"s2ax\"
>2853	PrimaryExpression	\"s2ax\"
>2854	Identifier	actionInputName
>2855	ExpressionStatement	 
>2856	AssignmentExpr	value = & dsq -> user . control . s1ay
>2857	UnaryOp	& dsq -> user . control . s1ay
>2858	MemberAccess	dsq -> user . control . s1ay
>2859	Identifier	s1ay
>2860	MemberAccess	dsq -> user . control
>2861	Identifier	control
>2862	PtrMemberAccess	dsq -> user
>2863	Identifier	user
>2864	Identifier	dsq
>2865	UnaryOperator	&
>2866	Identifier	value
>2867	Condition	 
>2868	EqualityExpression	actionInputName == \"s1ay\"
>2869	PrimaryExpression	\"s1ay\"
>2870	Identifier	actionInputName
>2871	ExpressionStatement	 
>2872	AssignmentExpr	value = & dsq -> user . control . s1ax
>2873	UnaryOp	& dsq -> user . control . s1ax
>2874	MemberAccess	dsq -> user . control . s1ax
>2875	Identifier	s1ax
>2876	MemberAccess	dsq -> user . control
>2877	Identifier	control
>2878	PtrMemberAccess	dsq -> user
>2879	Identifier	user
>2880	Identifier	dsq
>2881	UnaryOperator	&
>2882	Identifier	value
>2883	Condition	 
>2884	EqualityExpression	actionInputName == \"s1ax\"
>2885	PrimaryExpression	\"s1ax\"
>2886	Identifier	actionInputName
>2887	Condition	 
>2888	EqualityExpression	inputSetType == INPUTSET_OTHER
>2889	Identifier	INPUTSET_OTHER
>2890	Identifier	inputSetType
>2891	IdentifierDeclStatement	 
>2892	IdentifierDecl	* value = 0
>2893	AssignmentExpr	* value = 0
>2894	PrimaryExpression	0
>2895	Identifier	value
>2896	Identifier	value
>2897	IdentifierDeclType	int *
>2898	IfStatement	if ( inputSetType != INPUTSET_OTHER )
>2899	CompoundStatement	 
>2900	SwitchStatement	switch ( inputSetType )
>2901	CompoundStatement	 
>2902	BreakStatement	 
>2903	ExpressionStatement	 
>2904	AssignmentExpr	k = 0
>2905	PrimaryExpression	0
>2906	Identifier	k
>2907	Label	 
>2908	Identifier	default
>2909	BreakStatement	 
>2910	ExpressionStatement	 
>2911	AssignmentExpr	k = & ai -> joy [ inputIdx ]
>2912	UnaryOp	& ai -> joy [ inputIdx ]
>2913	ArrayIndexing	ai -> joy [ inputIdx ]
>2914	Identifier	inputIdx
>2915	PtrMemberAccess	ai -> joy
>2916	Identifier	joy
>2917	Identifier	ai
>2918	UnaryOperator	&
>2919	Identifier	k
>2920	Label	 
>2921	Identifier	INPUTSET_JOY
>2922	BreakStatement	 
>2923	ExpressionStatement	 
>2924	AssignmentExpr	k = & ai -> mse [ inputIdx ]
>2925	UnaryOp	& ai -> mse [ inputIdx ]
>2926	ArrayIndexing	ai -> mse [ inputIdx ]
>2927	Identifier	inputIdx
>2928	PtrMemberAccess	ai -> mse
>2929	Identifier	mse
>2930	Identifier	ai
>2931	UnaryOperator	&
>2932	Identifier	k
>2933	Label	 
>2934	Identifier	INPUTSET_MOUSE
>2935	BreakStatement	 
>2936	ExpressionStatement	 
>2937	AssignmentExpr	k = & ai -> key [ inputIdx ]
>2938	UnaryOp	& ai -> key [ inputIdx ]
>2939	ArrayIndexing	ai -> key [ inputIdx ]
>2940	Identifier	inputIdx
>2941	PtrMemberAccess	ai -> key
>2942	Identifier	key
>2943	Identifier	ai
>2944	UnaryOperator	&
>2945	Identifier	k
>2946	Label	 
>2947	Identifier	INPUTSET_KEY
>2948	Condition	 
>2949	Identifier	inputSetType
>2950	IfStatement	if ( ! ai )
>2951	CompoundStatement	 
>2952	ExpressionStatement	 
>2953	CallExpression	exit_error ( \"Could not find actionInput
>2954	ArgumentList	\"Could not find actionInput
>2955	Argument	\"Could not find actionInput
>2956	AdditiveExpression	\"Could not find actionInput
>2957	Identifier	actionInputName
>2958	PrimaryExpression	\"Could not find actionInput
>2959	Callee	exit_error
>2960	Identifier	exit_error
>2961	Condition	 
>2962	UnaryOp	! ai
>2963	Identifier	ai
>2964	UnaryOperator	!
>2965	ExpressionStatement	 
>2966	AssignmentExpr	ai = dsq -> user . control . actionSet . getActionInputByName ( actionInputName )
>2967	CallExpression	dsq -> user . control . actionSet . getActionInputByName ( actionInputName )
>2968	ArgumentList	actionInputName
>2969	Argument	actionInputName
>2970	Identifier	actionInputName
>2971	Callee	dsq -> user . control . actionSet . getActionInputByName
>2972	MemberAccess	dsq -> user . control . actionSet . getActionInputByName
>2973	Identifier	getActionInputByName
>2974	MemberAccess	dsq -> user . control . actionSet
>2975	Identifier	actionSet
>2976	MemberAccess	dsq -> user . control
>2977	Identifier	control
>2978	PtrMemberAccess	dsq -> user
>2979	Identifier	user
>2980	Identifier	dsq
>2981	Identifier	ai
>2982	Condition	 
>2983	EqualityExpression	inputSetType != INPUTSET_OTHER
>2984	Identifier	INPUTSET_OTHER
>2985	Identifier	inputSetType
>2986	IdentifierDeclStatement	 
>2987	IdentifierDecl	* ai = 0
>2988	AssignmentExpr	* ai = 0
>2989	PrimaryExpression	0
>2990	Identifier	ai
>2991	Identifier	ai
>2992	IdentifierDeclType	ActionInput *
>2993	IdentifierDeclStatement	 
>2994	IdentifierDecl	* k = 0
>2995	AssignmentExpr	* k = 0
>2996	PrimaryExpression	0
>2997	Identifier	k
>2998	Identifier	k
>2999	IdentifierDeclType	int *
>3000	ExpressionStatement	 
>3001	AssignmentExpr	inLoop = true
>3002	Identifier	true
>3003	Identifier	inLoop
>3004	IfStatement	if ( ! hasInput ( ) || alpha . x <= 0 )
>3005	ReturnStatement	 
>3006	Condition	 
>3007	OrExpression	! hasInput ( ) || alpha . x <= 0
>3008	RelationalExpression	alpha . x <= 0
>3009	PrimaryExpression	0
>3010	MemberAccess	alpha . x
>3011	Identifier	x
>3012	Identifier	alpha
>3013	UnaryOp	! hasInput ( )
>3014	CallExpression	hasInput ( )
>3015	ArgumentList	 
>3016	Callee	hasInput
>3017	Identifier	hasInput
>3018	UnaryOperator	!
>3019	ExpressionStatement	 
>3020	CallExpression	RenderObject 
>3021	ArgumentList	dt
>3022	Argument	dt
>3023	Identifier	dt
>3024	Callee	RenderObject 
>3025	Identifier	RenderObject 
>3026	ExpressionStatement	 
>3027	CallExpression	AquariaGuiElement 
>3028	ArgumentList	dt
>3029	Argument	dt
>3030	Identifier	dt
>3031	Callee	AquariaGuiElement 
>3032	Identifier	AquariaGuiElement 
>3033	IfStatement	if ( inLoop )
>3034	ReturnStatement	 
>3035	Condition	 
>3036	Identifier	inLoop
>3037	IdentifierDeclStatement	 
>3038	IdentifierDecl	inLoop = false
>3039	AssignmentExpr	inLoop = false
>3040	Identifier	false
>3041	Identifier	false
>3042	Identifier	inLoop
>3043	IdentifierDeclType	bool
>3044	Statement	 
>3130	FunctionDef	AquariaMenuItem 
>3131	ParameterList	 
>3132	CompoundStatement	 
>3133	ExpressionStatement	 
>3134	AssignmentExpr	renderQuad = false
>3135	Identifier	false
>3136	Identifier	renderQuad
>3137	ExpressionStatement	 
>3138	CallExpression	addAction ( MakeFunctionEvent ( AquariaMenuItem , onClick ) , ActionMapper 
>3139	ArgumentList	MakeFunctionEvent ( AquariaMenuItem , onClick )
>3140	Argument	0
>3141	PrimaryExpression	0
>3142	Argument	ActionMapper 
>3143	Identifier	ActionMapper 
>3144	Argument	MakeFunctionEvent ( AquariaMenuItem , onClick )
>3145	CallExpression	MakeFunctionEvent ( AquariaMenuItem , onClick )
>3146	ArgumentList	AquariaMenuItem
>3147	Argument	onClick
>3148	Identifier	onClick
>3149	Argument	AquariaMenuItem
>3150	Identifier	AquariaMenuItem
>3151	Callee	MakeFunctionEvent
>3152	Identifier	MakeFunctionEvent
>3153	Callee	addAction
>3154	Identifier	addAction
>3155	ExpressionStatement	 
>3156	CallExpression	addAction ( MakeFunctionEvent ( AquariaMenuItem , onClick ) , ActionMapper 
>3157	ArgumentList	MakeFunctionEvent ( AquariaMenuItem , onClick )
>3158	Argument	0
>3159	PrimaryExpression	0
>3160	Argument	ActionMapper 
>3161	Identifier	ActionMapper 
>3162	Argument	MakeFunctionEvent ( AquariaMenuItem , onClick )
>3163	CallExpression	MakeFunctionEvent ( AquariaMenuItem , onClick )
>3164	ArgumentList	AquariaMenuItem
>3165	Argument	onClick
>3166	Identifier	onClick
>3167	Argument	AquariaMenuItem
>3168	Identifier	AquariaMenuItem
>3169	Callee	MakeFunctionEvent
>3170	Identifier	MakeFunctionEvent
>3171	Callee	addAction
>3172	Identifier	addAction
>3173	ExpressionStatement	 
>3174	AssignmentExpr	followCamera = 1
>3175	PrimaryExpression	1
>3176	Identifier	followCamera
>3177	ExpressionStatement	 
>3178	AssignmentExpr	cull = false
>3179	Identifier	false
>3180	Identifier	cull
>3181	ExpressionStatement	 
>3182	AssignmentExpr	highlighted = false
>3183	Identifier	false
>3184	Identifier	highlighted
>3185	ExpressionStatement	 
>3186	AssignmentExpr	height = 0
>3187	PrimaryExpression	0
>3188	Identifier	height
>3189	ExpressionStatement	 
>3190	AssignmentExpr	width = 0
>3191	PrimaryExpression	0
>3192	Identifier	width
>3193	ExpressionStatement	 
>3194	CallExpression	addChild ( glowFont , PM_POINTER , RBP_OFF )
>3195	ArgumentList	glowFont
>3196	Argument	RBP_OFF
>3197	Identifier	RBP_OFF
>3198	Argument	PM_POINTER
>3199	Identifier	PM_POINTER
>3200	Argument	glowFont
>3201	Identifier	glowFont
>3202	Callee	addChild
>3203	Identifier	addChild
>3204	ExpressionStatement	 
>3205	AssignmentExpr	glowFont -> alpha = 0
>3206	PrimaryExpression	0
>3207	PtrMemberAccess	glowFont -> alpha
>3208	Identifier	alpha
>3209	Identifier	glowFont
>3210	ExpressionStatement	 
>3211	CallExpression	glowFont -> setBlendType ( BLEND_ADD )
>3212	ArgumentList	BLEND_ADD
>3213	Argument	BLEND_ADD
>3214	Identifier	BLEND_ADD
>3215	Callee	glowFont -> setBlendType
>3216	PtrMemberAccess	glowFont -> setBlendType
>3217	Identifier	setBlendType
>3218	Identifier	glowFont
>3219	ExpressionStatement	 
>3220	AssignmentExpr	glowFont -> position = Vector ( 0 , - sz / 2 , 0 )
>3221	CallExpression	Vector ( 0 , - sz / 2 , 0 )
>3222	ArgumentList	0
>3223	Argument	0
>3224	PrimaryExpression	0
>3225	Argument	- sz / 2
>3226	MultiplicativeExpression	- sz / 2
>3227	PrimaryExpression	2
>3228	UnaryOp	- sz
>3229	Identifier	sz
>3230	UnaryOperator	-
>3231	Argument	0
>3232	PrimaryExpression	0
>3233	Callee	Vector
>3234	Identifier	Vector
>3235	PtrMemberAccess	glowFont -> position
>3236	Identifier	position
>3237	Identifier	glowFont
>3238	ExpressionStatement	 
>3239	CallExpression	glowFont -> setFontSize ( sz )
>3240	ArgumentList	sz
>3241	Argument	sz
>3242	Identifier	sz
>3243	Callee	glowFont -> setFontSize
>3244	PtrMemberAccess	glowFont -> setFontSize
>3245	Identifier	setFontSize
>3246	Identifier	glowFont
>3247	ExpressionStatement	 
>3248	AssignmentExpr	glowFont = new BitmapText ( & dsq -> font )
>3249	UnaryOp	& dsq -> font
>3250	PtrMemberAccess	dsq -> font
>3251	Identifier	font
>3252	Identifier	dsq
>3253	UnaryOperator	&
>3254	Identifier	glowFont
>3255	ExpressionStatement	 
>3256	CallExpression	addChild ( font , PM_POINTER , RBP_ON )
>3257	ArgumentList	font
>3258	Argument	RBP_ON
>3259	Identifier	RBP_ON
>3260	Argument	PM_POINTER
>3261	Identifier	PM_POINTER
>3262	Argument	font
>3263	Identifier	font
>3264	Callee	addChild
>3265	Identifier	addChild
>3266	ExpressionStatement	 
>3267	AssignmentExpr	font -> position = Vector ( 0 , - sz / 2 , 0 )
>3268	CallExpression	Vector ( 0 , - sz / 2 , 0 )
>3269	ArgumentList	0
>3270	Argument	0
>3271	PrimaryExpression	0
>3272	Argument	- sz / 2
>3273	MultiplicativeExpression	- sz / 2
>3274	PrimaryExpression	2
>3275	UnaryOp	- sz
>3276	Identifier	sz
>3277	UnaryOperator	-
>3278	Argument	0
>3279	PrimaryExpression	0
>3280	Callee	Vector
>3281	Identifier	Vector
>3282	PtrMemberAccess	font -> position
>3283	Identifier	position
>3284	Identifier	font
>3285	ExpressionStatement	 
>3286	CallExpression	font -> setFontSize ( sz )
>3287	ArgumentList	sz
>3288	Argument	sz
>3289	Identifier	sz
>3290	Callee	font -> setFontSize
>3291	PtrMemberAccess	font -> setFontSize
>3292	Identifier	setFontSize
>3293	Identifier	font
>3294	ExpressionStatement	 
>3295	AssignmentExpr	font = new BitmapText ( & dsq -> font )
>3296	UnaryOp	& dsq -> font
>3297	PtrMemberAccess	dsq -> font
>3298	Identifier	font
>3299	Identifier	dsq
>3300	UnaryOperator	&
>3301	Identifier	font
>3302	ExpressionStatement	 
>3303	AssignmentExpr	font = 0
>3304	PrimaryExpression	0
>3305	Identifier	font
>3306	ExpressionStatement	 
>3307	AssignmentExpr	shareAlpha = 0
>3308	PrimaryExpression	0
>3309	Identifier	shareAlpha
>3310	IdentifierDeclStatement	 
>3311	IdentifierDecl	sz = 20
>3312	AssignmentExpr	sz = 20
>3313	PrimaryExpression	20
>3314	Identifier	sz
>3315	Identifier	sz
>3316	IdentifierDeclType	int
>3317	ExpressionStatement	 
>3318	AssignmentExpr	xmlItem = 0
>3319	PrimaryExpression	0
>3320	Identifier	xmlItem
>3321	ExpressionStatement	 
>3322	AssignmentExpr	ability = 0
>3323	PrimaryExpression	0
>3324	Identifier	ability
>3325	ExpressionStatement	 
>3326	AssignmentExpr	choice = - 1
>3327	UnaryOp	- 1
>3328	PrimaryExpression	1
>3329	UnaryOperator	-
>3330	Identifier	choice
>3331	ExpressionStatement	 
>3332	AssignmentExpr	quad = glow = 0
>3333	AssignmentExpr	glow = 0
>3334	PrimaryExpression	0
>3335	Identifier	glow
>3336	Identifier	quad
>3374	FunctionDef	AquariaMenuItem 
>3375	ParameterList	 
>3376	ReturnType	void
>3377	CompoundStatement	 
>3378	ExpressionStatement	 
>3379	CallExpression	AquariaGuiElement 
>3380	ArgumentList	 
>3381	Callee	AquariaGuiElement 
>3382	Identifier	AquariaGuiElement 
>3383	ExpressionStatement	 
>3384	CallExpression	Quad 
>3385	ArgumentList	 
>3386	Callee	Quad 
>3387	Identifier	Quad 
>3388	ExpressionStatement	 
>3389	CallExpression	setFocus ( false )
>3390	ArgumentList	false
>3391	Argument	false
>3392	Identifier	false
>3393	Callee	setFocus
>3394	Identifier	setFocus
>3399	FunctionDef	AquariaMenuItem 
>3400	ParameterList	 
>3401	ReturnType	Vector
>3402	CompoundStatement	 
>3403	ReturnStatement	 
>3404	CallExpression	getWorldPosition ( )
>3405	ArgumentList	 
>3406	Callee	getWorldPosition
>3407	Identifier	getWorldPosition
>3412	FunctionDef	AquariaMenuItem 
>3413	ParameterList	 
>3414	ReturnType	bool
>3415	CompoundStatement	 
>3416	ReturnStatement	 
>3417	AndExpression	! isHidden ( ) && alpha . x > 0 && alphaMod > 0
>3418	AndExpression	alpha . x > 0 && alphaMod > 0
>3419	RelationalExpression	alphaMod > 0
>3420	PrimaryExpression	0
>3421	Identifier	alphaMod
>3422	RelationalExpression	alpha . x > 0
>3423	PrimaryExpression	0
>3424	MemberAccess	alpha . x
>3425	Identifier	x
>3426	Identifier	alpha
>3427	UnaryOp	! isHidden ( )
>3428	CallExpression	isHidden ( )
>3429	ArgumentList	 
>3430	Callee	isHidden
>3431	Identifier	isHidden
>3432	UnaryOperator	!
>3440	FunctionDef	AquariaMenuItem 
>3441	ParameterList	const std 
>3442	Parameter	 
>3443	Identifier	tex
>3444	ParameterType	const std 
>3445	ReturnType	void
>3446	CompoundStatement	 
>3447	ExpressionStatement	 
>3448	AssignmentExpr	useSfx = tex
>3449	Identifier	tex
>3450	Identifier	useSfx
>3456	FunctionDef	AquariaMenuItem 
>3457	ParameterList	const std 
>3458	Parameter	 
>3459	Identifier	tex
>3460	ParameterType	const std 
>3461	ReturnType	bool
>3462	CompoundStatement	 
>3463	ReturnStatement	 
>3464	Identifier	good
>3465	ExpressionStatement	 
>3466	CallExpression	addChild ( quad , PM_POINTER )
>3467	ArgumentList	quad
>3468	Argument	PM_POINTER
>3469	Identifier	PM_POINTER
>3470	Argument	quad
>3471	Identifier	quad
>3472	Callee	addChild
>3473	Identifier	addChild
>3474	IdentifierDeclStatement	 
>3475	IdentifierDecl	good = quad -> setTexture ( tex )
>3476	AssignmentExpr	good = quad -> setTexture ( tex )
>3477	CallExpression	quad -> setTexture ( tex )
>3478	ArgumentList	tex
>3479	Argument	tex
>3480	Identifier	tex
>3481	Callee	quad -> setTexture
>3482	PtrMemberAccess	quad -> setTexture
>3483	Identifier	setTexture
>3484	Identifier	quad
>3485	Identifier	good
>3486	Identifier	good
>3487	IdentifierDeclType	bool
>3488	ExpressionStatement	 
>3489	Identifier	Quad
>3490	Statement	 
>3491	Statement	 
>3492	Statement	 
>3493	IfStatement	if ( quad )
>3494	CompoundStatement	 
>3495	ReturnStatement	 
>3496	Identifier	true
>3497	ExpressionStatement	 
>3498	CallExpression	debugLog ( \"trying to call useQuad twice on the same object\" )
>3499	ArgumentList	\"trying to call useQuad twice on the same object\"
>3500	Argument	\"trying to call useQuad twice on the same object\"
>3501	PrimaryExpression	\"trying to call useQuad twice on the same object\"
>3502	Callee	debugLog
>3503	Identifier	debugLog
>3504	Condition	 
>3505	Identifier	quad
>3516	FunctionDef	AquariaMenuItem 
>3517	ParameterList	const std 
>3518	Parameter	 
>3519	Identifier	h
>3520	ParameterType	int
>3521	Parameter	 
>3522	Identifier	w
>3523	ParameterType	int
>3524	Parameter	 
>3525	Identifier	tex
>3526	ParameterType	const std 
>3527	ReturnType	void
>3528	CompoundStatement	 
>3529	ExpressionStatement	 
>3530	CallExpression	addChild ( glow , PM_POINTER )
>3531	ArgumentList	glow
>3532	Argument	PM_POINTER
>3533	Identifier	PM_POINTER
>3534	Argument	glow
>3535	Identifier	glow
>3536	Callee	addChild
>3537	Identifier	addChild
>3538	ExpressionStatement	 
>3539	AssignmentExpr	glow -> alpha = 0
>3540	PrimaryExpression	0
>3541	PtrMemberAccess	glow -> alpha
>3542	Identifier	alpha
>3543	Identifier	glow
>3544	ExpressionStatement	 
>3545	CallExpression	glow -> setBlendType ( BLEND_ADD )
>3546	ArgumentList	BLEND_ADD
>3547	Argument	BLEND_ADD
>3548	Identifier	BLEND_ADD
>3549	Callee	glow -> setBlendType
>3550	PtrMemberAccess	glow -> setBlendType
>3551	Identifier	setBlendType
>3552	Identifier	glow
>3553	ExpressionStatement	 
>3554	CallExpression	glow -> setWidthHeight ( w , h )
>3555	ArgumentList	w
>3556	Argument	h
>3557	Identifier	h
>3558	Argument	w
>3559	Identifier	w
>3560	Callee	glow -> setWidthHeight
>3561	PtrMemberAccess	glow -> setWidthHeight
>3562	Identifier	setWidthHeight
>3563	Identifier	glow
>3564	ExpressionStatement	 
>3565	CallExpression	glow -> setTexture ( tex )
>3566	ArgumentList	tex
>3567	Argument	tex
>3568	Identifier	tex
>3569	Callee	glow -> setTexture
>3570	PtrMemberAccess	glow -> setTexture
>3571	Identifier	setTexture
>3572	Identifier	glow
>3573	ExpressionStatement	 
>3574	Identifier	Quad
>3575	Statement	 
>3576	Statement	 
>3577	Statement	 
>3578	IfStatement	if ( glow )
>3579	CompoundStatement	 
>3580	ReturnStatement	 
>3581	ExpressionStatement	 
>3582	CallExpression	debugLog ( \"trying to call useGlow twice on the same object\" )
>3583	ArgumentList	\"trying to call useGlow twice on the same object\"
>3584	Argument	\"trying to call useGlow twice on the same object\"
>3585	PrimaryExpression	\"trying to call useGlow twice on the same object\"
>3586	Callee	debugLog
>3587	Identifier	debugLog
>3588	Condition	 
>3589	Identifier	glow
>3601	FunctionDef	AquariaMenuItem 
>3602	ParameterList	 
>3603	ReturnType	void
>3604	CompoundStatement	 
>3605	IfStatement	if ( hasInput ( ) && highlighted && dsq -> menuSelectDelay == 0 )
>3606	CompoundStatement	 
>3607	ExpressionStatement	 
>3608	CallExpression	event . call ( )
>3609	ArgumentList	 
>3610	Callee	event . call
>3611	MemberAccess	event . call
>3612	Identifier	call
>3613	Identifier	event
>3614	IfStatement	if ( ! useSfx . empty ( ) )
>3615	ElseStatement	else
>3616	ExpressionStatement	 
>3617	CallExpression	dsq -> playMenuSelectSfx ( )
>3618	ArgumentList	 
>3619	Callee	dsq -> playMenuSelectSfx
>3620	PtrMemberAccess	dsq -> playMenuSelectSfx
>3621	Identifier	playMenuSelectSfx
>3622	Identifier	dsq
>3623	ExpressionStatement	 
>3624	CallExpression	dsq -> sound -> playSfx ( useSfx )
>3625	ArgumentList	useSfx
>3626	Argument	useSfx
>3627	Identifier	useSfx
>3628	Callee	dsq -> sound -> playSfx
>3629	PtrMemberAccess	dsq -> sound -> playSfx
>3630	Identifier	playSfx
>3631	PtrMemberAccess	dsq -> sound
>3632	Identifier	sound
>3633	Identifier	dsq
>3634	Condition	 
>3635	UnaryOp	! useSfx . empty ( )
>3636	CallExpression	useSfx . empty ( )
>3637	ArgumentList	 
>3638	Callee	useSfx . empty
>3639	MemberAccess	useSfx . empty
>3640	Identifier	empty
>3641	Identifier	useSfx
>3642	UnaryOperator	!
>3643	ExpressionStatement	 
>3644	AssignmentExpr	dsq -> menuSelectDelay = MENUSELECTDELAY
>3645	Identifier	MENUSELECTDELAY
>3646	PtrMemberAccess	dsq -> menuSelectDelay
>3647	Identifier	menuSelectDelay
>3648	Identifier	dsq
>3649	Condition	 
>3650	AndExpression	hasInput ( ) && highlighted && dsq -> menuSelectDelay == 0
>3651	AndExpression	highlighted && dsq -> menuSelectDelay == 0
>3652	EqualityExpression	dsq -> menuSelectDelay == 0
>3653	PrimaryExpression	0
>3654	PtrMemberAccess	dsq -> menuSelectDelay
>3655	Identifier	menuSelectDelay
>3656	Identifier	dsq
>3657	Identifier	highlighted
>3658	CallExpression	hasInput ( )
>3659	ArgumentList	 
>3660	Callee	hasInput
>3661	Identifier	hasInput
>3675	FunctionDef	AquariaMenuItem 
>3676	ParameterList	const std 
>3677	Parameter	 
>3678	Identifier	label
>3679	ParameterType	const std 
>3680	ReturnType	void
>3681	CompoundStatement	 
>3682	ExpressionStatement	 
>3683	CallExpression	glowFont -> setText ( label )
>3684	ArgumentList	label
>3685	Argument	label
>3686	Identifier	label
>3687	Callee	glowFont -> setText
>3688	PtrMemberAccess	glowFont -> setText
>3689	Identifier	setText
>3690	Identifier	glowFont
>3691	ExpressionStatement	 
>3692	CallExpression	font -> setText ( label )
>3693	ArgumentList	label
>3694	Argument	label
>3695	Identifier	label
>3696	Callee	font -> setText
>3697	PtrMemberAccess	font -> setText
>3698	Identifier	setText
>3699	Identifier	font
>3706	FunctionDef	AquariaMenuItem 
>3707	ParameterList	bool state
>3708	Parameter	 
>3709	Identifier	state
>3710	ParameterType	bool
>3711	ReturnType	void
>3712	CompoundStatement	 
>3713	IfStatement	if ( highlighted )
>3714	ElseStatement	else
>3715	CompoundStatement	 
>3716	IfStatement	if ( glow )
>3717	ElseStatement	else
>3718	ExpressionStatement	 
>3719	CallExpression	glowFont -> alpha . interpolateTo ( 0 , 0.2 )
>3720	ArgumentList	0
>3721	Argument	0.2
>3722	PrimaryExpression	0.2
>3723	Argument	0
>3724	PrimaryExpression	0
>3725	Callee	glowFont -> alpha . interpolateTo
>3726	MemberAccess	glowFont -> alpha . interpolateTo
>3727	Identifier	interpolateTo
>3728	PtrMemberAccess	glowFont -> alpha
>3729	Identifier	alpha
>3730	Identifier	glowFont
>3731	ExpressionStatement	 
>3732	CallExpression	glow -> alpha . interpolateTo ( 0 , 0.2 )
>3733	ArgumentList	0
>3734	Argument	0.2
>3735	PrimaryExpression	0.2
>3736	Argument	0
>3737	PrimaryExpression	0
>3738	Callee	glow -> alpha . interpolateTo
>3739	MemberAccess	glow -> alpha . interpolateTo
>3740	Identifier	interpolateTo
>3741	PtrMemberAccess	glow -> alpha
>3742	Identifier	alpha
>3743	Identifier	glow
>3744	Condition	 
>3745	Identifier	glow
>3746	CompoundStatement	 
>3747	IfStatement	if ( glow )
>3748	ElseStatement	else
>3749	CompoundStatement	 
>3750	ExpressionStatement	 
>3751	CallExpression	glowFont -> alpha . interpolateTo ( 0.3 , 0.2 )
>3752	ArgumentList	0.3
>3753	Argument	0.2
>3754	PrimaryExpression	0.2
>3755	Argument	0.3
>3756	PrimaryExpression	0.3
>3757	Callee	glowFont -> alpha . interpolateTo
>3758	MemberAccess	glowFont -> alpha . interpolateTo
>3759	Identifier	interpolateTo
>3760	PtrMemberAccess	glowFont -> alpha
>3761	Identifier	alpha
>3762	Identifier	glowFont
>3763	CompoundStatement	 
>3764	ExpressionStatement	 
>3765	CallExpression	glow -> alpha . interpolateTo ( 0.3 , 0.2 )
>3766	ArgumentList	0.3
>3767	Argument	0.2
>3768	PrimaryExpression	0.2
>3769	Argument	0.3
>3770	PrimaryExpression	0.3
>3771	Callee	glow -> alpha . interpolateTo
>3772	MemberAccess	glow -> alpha . interpolateTo
>3773	Identifier	interpolateTo
>3774	PtrMemberAccess	glow -> alpha
>3775	Identifier	alpha
>3776	Identifier	glow
>3777	Condition	 
>3778	Identifier	glow
>3779	Condition	 
>3780	Identifier	highlighted
>3781	ExpressionStatement	 
>3782	AssignmentExpr	highlighted = state
>3783	Identifier	state
>3784	Identifier	highlighted
>3796	FunctionDef	AquariaMenuItem 
>3797	ParameterList	float dt
>3798	Parameter	 
>3799	Identifier	dt
>3800	ParameterType	float
>3801	ReturnType	void
>3802	CompoundStatement	 
>3803	IfStatement	if ( hasInput ( ) )
>3804	CompoundStatement	 
>3805	IfStatement	if ( alpha . x == 1 )
>3806	ElseStatement	else
>3807	CompoundStatement	 
>3808	IfStatement	if ( highlighted )
>3809	ExpressionStatement	 
>3810	CallExpression	toggleHighlight ( false )
>3811	ArgumentList	false
>3812	Argument	false
>3813	Identifier	false
>3814	Callee	toggleHighlight
>3815	Identifier	toggleHighlight
>3816	Condition	 
>3817	Identifier	highlighted
>3818	CompoundStatement	 
>3819	IfStatement	if ( ! on && highlighted )
>3820	ExpressionStatement	 
>3821	CallExpression	toggleHighlight ( false )
>3822	ArgumentList	false
>3823	Argument	false
>3824	Identifier	false
>3825	Callee	toggleHighlight
>3826	Identifier	toggleHighlight
>3827	Condition	 
>3828	AndExpression	! on && highlighted
>3829	Identifier	highlighted
>3830	UnaryOp	! on
>3831	Identifier	on
>3832	UnaryOperator	!
>3833	IfStatement	if ( isCursorInMenuItem ( ) )
>3834	ElseStatement	else
>3835	ExpressionStatement	 
>3836	AssignmentExpr	on = false
>3837	Identifier	false
>3838	Identifier	on
>3839	CompoundStatement	 
>3840	IfStatement	if ( ! highlighted )
>3841	ExpressionStatement	 
>3842	CallExpression	toggleHighlight ( true )
>3843	ArgumentList	true
>3844	Argument	true
>3845	Identifier	true
>3846	Callee	toggleHighlight
>3847	Identifier	toggleHighlight
>3848	Condition	 
>3849	UnaryOp	! highlighted
>3850	Identifier	highlighted
>3851	UnaryOperator	!
>3852	Condition	 
>3853	CallExpression	isCursorInMenuItem ( )
>3854	ArgumentList	 
>3855	Callee	isCursorInMenuItem
>3856	Identifier	isCursorInMenuItem
>3857	IdentifierDeclStatement	 
>3858	IdentifierDecl	on = true
>3859	AssignmentExpr	on = true
>3860	Identifier	true
>3861	Identifier	true
>3862	Identifier	on
>3863	IdentifierDeclType	bool
>3864	Condition	 
>3865	EqualityExpression	alpha . x == 1
>3866	PrimaryExpression	1
>3867	MemberAccess	alpha . x
>3868	Identifier	x
>3869	Identifier	alpha
>3870	Condition	 
>3871	CallExpression	hasInput ( )
>3872	ArgumentList	 
>3873	Callee	hasInput
>3874	Identifier	hasInput
>3875	IfStatement	if ( quad )
>3876	CompoundStatement	 
>3877	ExpressionStatement	 
>3878	AssignmentExpr	quad -> alpha . x = alpha . x
>3879	MemberAccess	alpha . x
>3880	Identifier	x
>3881	Identifier	alpha
>3882	MemberAccess	quad -> alpha . x
>3883	Identifier	x
>3884	PtrMemberAccess	quad -> alpha
>3885	Identifier	alpha
>3886	Identifier	quad
>3887	Condition	 
>3888	Identifier	quad
>3889	IfStatement	if ( hasInput ( ) )
>3890	ExpressionStatement	 
>3891	CallExpression	ActionMapper 
>3892	ArgumentList	dt
>3893	Argument	dt
>3894	Identifier	dt
>3895	Callee	ActionMapper 
>3896	Identifier	ActionMapper 
>3897	Condition	 
>3898	CallExpression	hasInput ( )
>3899	ArgumentList	 
>3900	Callee	hasInput
>3901	Identifier	hasInput
>3902	IfStatement	if ( this -> alpha . x < 1.0 )
>3903	ReturnStatement	 
>3904	Condition	 
>3905	RelationalExpression	this -> alpha . x < 1.0
>3906	PrimaryExpression	1.0
>3907	MemberAccess	this -> alpha . x
>3908	Identifier	x
>3909	PtrMemberAccess	this -> alpha
>3910	Identifier	alpha
>3911	Identifier	this
>3912	IfStatement	if ( shareAlpha )
>3913	CompoundStatement	 
>3914	IfStatement	if ( glow )
>3915	ExpressionStatement	 
>3916	AssignmentExpr	glow -> alphaMod = alpha . x
>3917	MemberAccess	alpha . x
>3918	Identifier	x
>3919	Identifier	alpha
>3920	PtrMemberAccess	glow -> alphaMod
>3921	Identifier	alphaMod
>3922	Identifier	glow
>3923	Condition	 
>3924	Identifier	glow
>3925	IfStatement	if ( quad )
>3926	ExpressionStatement	 
>3927	AssignmentExpr	quad -> alphaMod = alpha . x
>3928	MemberAccess	alpha . x
>3929	Identifier	x
>3930	Identifier	alpha
>3931	PtrMemberAccess	quad -> alphaMod
>3932	Identifier	alphaMod
>3933	Identifier	quad
>3934	Condition	 
>3935	Identifier	quad
>3936	Condition	 
>3937	Identifier	shareAlpha
>3938	ExpressionStatement	 
>3939	CallExpression	Quad 
>3940	ArgumentList	dt
>3941	Argument	dt
>3942	Identifier	dt
>3943	Callee	Quad 
>3944	Identifier	Quad 
>3945	IfStatement	if ( font )
>3946	CompoundStatement	 
>3947	ExpressionStatement	 
>3948	AssignmentExpr	font -> alpha = this -> alpha
>3949	PtrMemberAccess	this -> alpha
>3950	Identifier	alpha
>3951	Identifier	this
>3952	PtrMemberAccess	font -> alpha
>3953	Identifier	alpha
>3954	Identifier	font
>3955	Condition	 
>3956	Identifier	font
>3957	ExpressionStatement	 
>3958	CallExpression	AquariaGuiElement 
>3959	ArgumentList	dt
>3960	Argument	dt
>3961	Identifier	dt
>3962	Callee	AquariaGuiElement 
>3963	Identifier	AquariaGuiElement 
>3992	FunctionDef	AquariaMenuItem 
>3993	ParameterList	 
>3994	ReturnType	bool
>3995	CompoundStatement	 
>3996	ReturnStatement	 
>3997	Identifier	false
>3998	IfStatement	if ( v . y > pos . y - hh && v . y < pos . y + hh )
>3999	CompoundStatement	 
>4000	IfStatement	if ( v . x > pos . x - hw && v . x < pos . x + hw )
>4001	CompoundStatement	 
>4002	ReturnStatement	 
>4003	Identifier	true
>4004	Condition	 
>4005	AndExpression	v . x > pos . x - hw && v . x < pos . x + hw
>4006	RelationalExpression	v . x < pos . x + hw
>4007	AdditiveExpression	pos . x + hw
>4008	Identifier	hw
>4009	MemberAccess	pos . x
>4010	Identifier	x
>4011	Identifier	pos
>4012	MemberAccess	v . x
>4013	Identifier	x
>4014	Identifier	v
>4015	RelationalExpression	v . x > pos . x - hw
>4016	AdditiveExpression	pos . x - hw
>4017	Identifier	hw
>4018	MemberAccess	pos . x
>4019	Identifier	x
>4020	Identifier	pos
>4021	MemberAccess	v . x
>4022	Identifier	x
>4023	Identifier	v
>4024	Condition	 
>4025	AndExpression	v . y > pos . y - hh && v . y < pos . y + hh
>4026	RelationalExpression	v . y < pos . y + hh
>4027	AdditiveExpression	pos . y + hh
>4028	Identifier	hh
>4029	MemberAccess	pos . y
>4030	Identifier	y
>4031	Identifier	pos
>4032	MemberAccess	v . y
>4033	Identifier	y
>4034	Identifier	v
>4035	RelationalExpression	v . y > pos . y - hh
>4036	AdditiveExpression	pos . y - hh
>4037	Identifier	hh
>4038	MemberAccess	pos . y
>4039	Identifier	y
>4040	Identifier	pos
>4041	MemberAccess	v . y
>4042	Identifier	y
>4043	Identifier	v
>4044	IdentifierDeclStatement	 
>4045	IdentifierDecl	pos = getWorldPosition ( )
>4046	AssignmentExpr	pos = getWorldPosition ( )
>4047	CallExpression	getWorldPosition ( )
>4048	ArgumentList	 
>4049	Callee	getWorldPosition
>4050	Identifier	getWorldPosition
>4051	Identifier	pos
>4052	Identifier	pos
>4053	IdentifierDeclType	Vector
>4054	IfStatement	if ( rotation . z == 90 )
>4055	CompoundStatement	 
>4056	ExpressionStatement	 
>4057	CallExpression	std 
>4058	ArgumentList	hw
>4059	Argument	hh
>4060	Identifier	hh
>4061	Argument	hw
>4062	Identifier	hw
>4063	Callee	std 
>4064	Identifier	std 
>4065	Condition	 
>4066	EqualityExpression	rotation . z == 90
>4067	PrimaryExpression	90
>4068	MemberAccess	rotation . z
>4069	Identifier	z
>4070	Identifier	rotation
>4071	IfStatement	if ( glow )
>4072	CompoundStatement	 
>4073	ExpressionStatement	 
>4074	AssignmentExpr	hh = glow -> getHeight ( ) / 2.0f
>4075	MultiplicativeExpression	glow -> getHeight ( ) / 2.0f
>4076	PrimaryExpression	2.0f
>4077	CallExpression	glow -> getHeight ( )
>4078	ArgumentList	 
>4079	Callee	glow -> getHeight
>4080	PtrMemberAccess	glow -> getHeight
>4081	Identifier	getHeight
>4082	Identifier	glow
>4083	Identifier	hh
>4084	ExpressionStatement	 
>4085	AssignmentExpr	hw = glow -> getWidth ( ) / 2.0f
>4086	MultiplicativeExpression	glow -> getWidth ( ) / 2.0f
>4087	PrimaryExpression	2.0f
>4088	CallExpression	glow -> getWidth ( )
>4089	ArgumentList	 
>4090	Callee	glow -> getWidth
>4091	PtrMemberAccess	glow -> getWidth
>4092	Identifier	getWidth
>4093	Identifier	glow
>4094	Identifier	hw
>4095	Condition	 
>4096	Identifier	glow
>4097	IfStatement	if ( hw < 64 )
>4098	ExpressionStatement	 
>4099	AssignmentExpr	hw = 64
>4100	PrimaryExpression	64
>4101	Identifier	hw
>4102	Condition	 
>4103	RelationalExpression	hw < 64
>4104	PrimaryExpression	64
>4105	Identifier	hw
>4106	IdentifierDeclStatement	 
>4107	IdentifierDecl	hh = 20
>4108	AssignmentExpr	hh = 20
>4109	PrimaryExpression	20
>4110	Identifier	hh
>4111	Identifier	hh
>4112	IdentifierDeclType	int
>4113	IdentifierDeclStatement	 
>4114	IdentifierDecl	hw = font -> getWidthOnScreen ( ) / 2
>4115	AssignmentExpr	hw = font -> getWidthOnScreen ( ) / 2
>4116	MultiplicativeExpression	font -> getWidthOnScreen ( ) / 2
>4117	PrimaryExpression	2
>4118	CallExpression	font -> getWidthOnScreen ( )
>4119	ArgumentList	 
>4120	Callee	font -> getWidthOnScreen
>4121	PtrMemberAccess	font -> getWidthOnScreen
>4122	Identifier	getWidthOnScreen
>4123	Identifier	font
>4124	Identifier	hw
>4125	Identifier	hw
>4126	IdentifierDeclType	int
>4127	IdentifierDeclStatement	 
>4128	IdentifierDecl	v = dsq -> mouse . position
>4129	AssignmentExpr	v = dsq -> mouse . position
>4130	MemberAccess	dsq -> mouse . position
>4131	Identifier	position
>4132	PtrMemberAccess	dsq -> mouse
>4133	Identifier	mouse
>4134	Identifier	dsq
>4135	Identifier	v
>4136	Identifier	v
>4137	IdentifierDeclType	Vector
<13=15,14
<15=41,37,33,24,20,16
<16=17
<17=19,18
<20=21
<21=23,22
<24=25
<25=29,26
<26=27
<27=28
<29=30
<30=32,31
<33=34
<34=36,35
<37=38
<38=40,39
<41=56,52,49,42
<42=43
<43=44
<44=46,45
<46=48,47
<49=51,50
<52=53
<53=55,54
<56=57
<57=58
<58=63,62,59
<59=61,60
<80=83,82,81
<83=86,84
<84=85
<86=90,87
<87=88
<88=89
<90=91
<91=93,92
<101=104,103,102
<104=105
<105=106
<106=110,107
<107=108
<108=109
<110=111
<111=113,112
<119=128,127,120
<120=124,121
<121=123,122
<124=126,125
<128=129
<129=137,130
<130=131
<131=132
<132=134,133
<134=136,135
<137=138
<138=142,139
<139=141,140
<142=144,143
<154=160,159,155
<155=156
<156=158,157
<160=161
<161=162
<162=164,163
<170=176,175,171
<171=172
<172=174,173
<176=279,177
<177=277,188,178
<178=179
<179=184,180
<180=181
<181=183,182
<184=185
<185=187,186
<188=273,254,239,189
<189=226,217,214,190
<190=208,191
<191=202,192
<192=193
<193=194
<194=198,195
<195=196
<196=197
<198=199
<199=201,200
<202=203
<203=207,204
<204=206,205
<208=209
<209=213,210
<210=212,211
<214=216,215
<217=218
<218=225,219
<219=221,220
<221=222
<222=224,223
<226=227
<227=228
<228=238,237,229
<229=236,230
<230=232,231
<232=233
<233=235,234
<239=248,240
<240=247,246,241
<241=245,242
<242=244,243
<248=253,252,249
<249=251,250
<254=267,255
<255=256
<256=263,257
<257=258
<258=259
<259=261,260
<261=262
<263=264
<264=266,265
<267=268
<268=270,269
<270=272,271
<273=274
<274=276,275
<277=278
<279=280
<280=282,281
<304=310,309,305
<305=306
<306=308,307
<310=311
<311=925,312
<312=906,313
<313=902,314
<314=895,884,740,734,727,720,687,315
<315=683,316
<316=676,661,648,641,334,317
<317=332,318
<318=323,319
<319=320
<320=322,321
<323=324
<324=328,325
<325=326
<326=327
<328=329
<329=331,330
<332=333
<334=628,619,616,335
<335=610,336
<336=595,337
<337=588,578,566,376,338
<338=374,342,339
<339=340
<340=341
<342=363,343
<343=353,344
<344=349,345
<345=346
<346=348,347
<349=350
<350=352,351
<353=354
<354=358,355
<355=357,356
<358=362,359
<359=361,360
<363=364
<364=373,365
<365=367,366
<367=368
<368=370,369
<370=372,371
<374=375
<376=562,521,377
<377=378
<378=517,476,379
<379=380
<380=472,431,381
<381=382
<382=427,386,383
<383=384
<384=385
<386=387
<387=412,388
<388=399,389
<389=390
<390=396,391
<391=393,392
<393=395,394
<396=398,397
<399=404,400
<400=401
<401=403,402
<404=405
<405=409,406
<406=408,407
<409=411,410
<412=413
<413=415,414
<415=425,416
<416=417
<417=418
<418=422,419
<419=421,420
<422=424,423
<425=426
<427=428
<428=430,429
<431=432
<432=457,433
<433=444,434
<434=435
<435=441,436
<436=438,437
<438=440,439
<441=443,442
<444=449,445
<445=446
<446=448,447
<449=450
<450=454,451
<451=453,452
<454=456,455
<457=458
<458=460,459
<460=470,461
<461=462
<462=463
<463=467,464
<464=466,465
<467=469,468
<470=471
<472=473
<473=475,474
<476=477
<477=502,478
<478=489,479
<479=480
<480=486,481
<481=483,482
<483=485,484
<486=488,487
<489=494,490
<490=491
<491=493,492
<494=495
<495=499,496
<496=498,497
<499=501,500
<502=503
<503=505,504
<505=515,506
<506=507
<507=508
<508=512,509
<509=511,510
<512=514,513
<515=516
<517=518
<518=520,519
<521=522
<522=547,523
<523=534,524
<524=525
<525=531,526
<526=528,527
<528=530,529
<531=533,532
<534=539,535
<535=536
<536=538,537
<539=540
<540=544,541
<541=543,542
<544=546,545
<547=548
<548=550,549
<550=560,551
<551=552
<552=553
<553=557,554
<554=556,555
<557=559,558
<560=561
<562=563
<563=565,564
<566=567
<567=577,576,568
<568=575,569
<569=571,570
<571=572
<572=574,573
<578=579
<579=587,586,580
<580=585,581
<581=583,582
<583=584
<588=589
<589=594,593,590
<590=592,591
<595=596
<596=607,597
<597=601,598
<598=600,599
<601=603,602
<603=604
<604=606,605
<607=609,608
<610=611
<611=615,612
<612=614,613
<616=618,617
<619=620
<620=627,621
<621=623,622
<623=624
<624=626,625
<628=629
<629=630
<630=640,639,631
<631=638,632
<632=634,633
<634=635
<635=637,636
<641=642
<642=647,646,643
<643=645,644
<648=655,649
<649=654,653,650
<650=652,651
<655=660,659,656
<656=658,657
<661=668,662
<662=667,666,663
<663=665,664
<668=675,674,669
<669=673,670
<670=672,671
<676=677
<677=681,678
<678=679
<679=680
<681=682
<683=684
<684=686,685
<687=712,688
<688=706,689
<689=704,690
<690=695,691
<691=692
<692=694,693
<695=696
<696=700,697
<697=698
<698=699
<700=701
<701=703,702
<704=705
<706=707
<707=711,708
<708=710,709
<712=713
<713=717,714
<714=716,715
<717=719,718
<720=721
<721=726,725,722
<722=724,723
<727=728
<728=733,732,729
<729=731,730
<734=736,735
<736=737
<737=739,738
<740=873,818,741
<741=742
<742=806,743
<743=804,744
<744=745
<745=795,791,746
<746=747
<747=782,778,748
<748=749
<749=769,765,750
<750=751
<751=756,752
<752=753
<753=755,754
<756=757
<757=761,758
<758=759
<759=760
<761=762
<762=764,763
<765=766
<766=768,767
<769=770
<770=774,771
<771=772
<772=773
<774=775
<775=777,776
<778=779
<779=781,780
<782=783
<783=787,784
<784=785
<785=786
<787=788
<788=790,789
<791=792
<792=794,793
<795=796
<796=800,797
<797=798
<798=799
<800=801
<801=803,802
<804=805
<806=807
<807=817,816,808
<808=815,809
<809=811,810
<811=812
<812=814,813
<818=819
<819=855,838,820
<820=821
<821=822
<822=832,828,823
<823=824
<824=825
<825=827,826
<828=829
<829=831,830
<832=833
<833=835,834
<835=837,836
<838=839
<839=849,845,840
<840=841
<841=842
<842=844,843
<845=846
<846=848,847
<849=850
<850=852,851
<852=854,853
<855=856
<856=865,857
<857=863,858
<858=859
<859=860
<860=862,861
<863=864
<865=871,866
<866=867
<867=868
<868=870,869
<871=872
<873=874
<874=883,875
<875=879,876
<876=877
<877=878
<879=880
<880=882,881
<884=885
<885=894,893,886
<886=892,887
<887=889,888
<889=891,890
<895=896
<896=901,900,897
<897=899,898
<902=903
<903=905,904
<906=921,907
<907=917,908
<908=913,909
<909=910
<910=912,911
<913=914
<914=916,915
<917=918
<918=920,919
<921=922
<922=924,923
<925=926
<926=940,927
<927=936,928
<928=935,929
<929=934,930
<930=932,931
<932=933
<936=938,937
<938=939
<1006=1012,1011,1007
<1007=1008
<1008=1010,1009
<1012=1115,1108,1015,1013
<1013=1014
<1015=1095,1086,1083,1016
<1016=1077,1017
<1017=1063,1018
<1018=1049,1037,1019
<1019=1029,1020
<1020=1025,1021
<1021=1022
<1022=1024,1023
<1025=1026
<1026=1028,1027
<1029=1030
<1030=1034,1031
<1031=1033,1032
<1034=1036,1035
<1037=1038
<1038=1048,1047,1039
<1039=1046,1040
<1040=1042,1041
<1042=1043
<1043=1045,1044
<1049=1050
<1050=1062,1061,1051
<1051=1060,1052
<1052=1054,1053
<1054=1056,1055
<1056=1057
<1057=1059,1058
<1063=1064
<1064=1071,1065
<1065=1067,1066
<1067=1068
<1068=1070,1069
<1071=1073,1072
<1073=1074
<1074=1076,1075
<1077=1078
<1078=1082,1079
<1079=1081,1080
<1083=1085,1084
<1086=1087
<1087=1094,1088
<1088=1090,1089
<1090=1091
<1091=1093,1092
<1095=1096
<1096=1097
<1097=1107,1106,1098
<1098=1105,1099
<1099=1101,1100
<1101=1102
<1102=1104,1103
<1108=1109
<1109=1114,1113,1110
<1110=1112,1111
<1115=1122,1116
<1116=1121,1120,1117
<1117=1119,1118
<1122=1127,1126,1123
<1123=1125,1124
<1147=1149,1148
<1153=1156,1155,1154
<1156=1162,1157
<1157=1158
<1158=1160,1159
<1160=1161
<1162=1163
<1163=1165,1164
<1165=1166
<1170=1173,1172,1171
<1173=1174
<1174=1175
<1175=1177,1176
<1177=1178
<1183=1186,1185,1184
<1186=1187
<1187=1188
<1188=1200,1189
<1189=1195,1190
<1190=1192,1191
<1192=1194,1193
<1195=1197,1196
<1197=1199,1198
<1200=1205,1201
<1201=1203,1202
<1203=1204
<1214=1220,1219,1215
<1215=1216
<1216=1218,1217
<1220=1221
<1221=1246,1238,1222
<1222=1223
<1223=1231,1224
<1224=1225
<1225=1229,1226
<1226=1227
<1227=1228
<1229=1230
<1231=1232
<1232=1236,1233
<1233=1234
<1234=1235
<1236=1237
<1238=1239
<1239=1240
<1240=1244,1241
<1241=1242
<1242=1243
<1244=1245
<1246=1247
<1247=1249,1248
<1249=1250
<1256=1262,1261,1257
<1257=1258
<1258=1260,1259
<1262=1270,1263
<1263=1264
<1264=1268,1265
<1265=1266
<1266=1267
<1268=1269
<1270=1271
<1271=1275,1272
<1272=1273
<1273=1274
<1275=1276
<1287=1289,1288
<1289=1294,1290
<1290=1291
<1291=1293,1292
<1294=1295
<1295=1299,1296
<1296=1298,1297
<1307=1313,1312,1308
<1308=1309
<1309=1311,1310
<1313=1314
<1314=1362,1341,1315
<1315=1316
<1316=1324,1317
<1317=1318
<1318=1322,1319
<1319=1320
<1320=1321
<1322=1323
<1324=1332,1325
<1325=1326
<1326=1330,1327
<1327=1328
<1328=1329
<1330=1331
<1332=1333
<1333=1340,1334
<1334=1338,1335
<1335=1336
<1336=1337
<1338=1339
<1341=1356,1349,1342
<1342=1343
<1343=1347,1344
<1344=1345
<1345=1346
<1347=1348
<1349=1350
<1350=1354,1351
<1351=1352
<1352=1353
<1354=1355
<1356=1357
<1357=1361,1358
<1358=1360,1359
<1362=1363
<1363=1368,1364
<1364=1366,1365
<1366=1367
<1377=1383,1382,1378
<1378=1379
<1379=1381,1380
<1383=1579,1575,1563,1455,1384
<1384=1451,1395,1385
<1385=1386
<1386=1389,1387
<1387=1388
<1389=1390
<1390=1394,1391
<1391=1393,1392
<1395=1447,1398,1396
<1396=1397
<1398=1443,1399
<1399=1436,1427,1418,1414,1400
<1400=1410,1406,1401
<1401=1402
<1402=1403
<1403=1405,1404
<1406=1407
<1407=1409,1408
<1410=1411
<1411=1413,1412
<1414=1415
<1415=1417,1416
<1418=1423,1419
<1419=1420
<1420=1422,1421
<1423=1424
<1424=1426,1425
<1427=1428
<1428=1434,1429
<1429=1430
<1430=1431
<1431=1433,1432
<1434=1435
<1436=1437
<1437=1442,1441,1438
<1438=1440,1439
<1443=1444
<1444=1446,1445
<1447=1448
<1448=1450,1449
<1451=1452
<1452=1454,1453
<1455=1551,1545,1456
<1456=1457
<1457=1535,1529,1458
<1458=1459
<1459=1523,1517,1460
<1460=1461
<1461=1511,1505,1462
<1462=1463
<1463=1494,1488,1464
<1464=1465
<1465=1477,1471,1466
<1466=1467
<1467=1468
<1468=1470,1469
<1471=1472
<1472=1476,1473
<1473=1475,1474
<1477=1478
<1478=1487,1479
<1479=1483,1480
<1480=1481
<1481=1482
<1483=1484
<1484=1486,1485
<1488=1489
<1489=1493,1490
<1490=1492,1491
<1494=1495
<1495=1504,1496
<1496=1500,1497
<1497=1498
<1498=1499
<1500=1501
<1501=1503,1502
<1505=1506
<1506=1510,1507
<1507=1509,1508
<1511=1512
<1512=1514,1513
<1514=1516,1515
<1517=1518
<1518=1522,1519
<1519=1521,1520
<1523=1524
<1524=1526,1525
<1526=1528,1527
<1529=1530
<1530=1534,1531
<1531=1533,1532
<1535=1536
<1536=1538,1537
<1538=1540,1539
<1540=1542,1541
<1542=1544,1543
<1545=1546
<1546=1550,1547
<1547=1549,1548
<1551=1552
<1552=1556,1553
<1553=1555,1554
<1556=1558,1557
<1558=1560,1559
<1560=1562,1561
<1563=1564
<1564=1574,1573,1565
<1565=1572,1566
<1566=1568,1567
<1568=1569
<1569=1571,1570
<1575=1576
<1576=1578,1577
<1579=1582,1580
<1580=1581
<1582=1583
<1583=1600,1584
<1584=1588,1585
<1585=1586
<1586=1587
<1588=1589
<1589=1591,1590
<1591=1595,1592
<1592=1594,1593
<1595=1597,1596
<1597=1599,1598
<1637=1640,1639,1638
<1640=1646,1641
<1641=1642
<1642=1644,1643
<1644=1645
<1646=1647
<1647=1649,1648
<1649=1650
<1654=1657,1656,1655
<1657=1658
<1658=1659
<1659=1661,1660
<1661=1662
<1667=1670,1669,1668
<1670=1671
<1671=1672
<1672=1682,1673
<1673=1677,1674
<1674=1676,1675
<1677=1679,1678
<1679=1681,1680
<1682=1687,1683
<1683=1685,1684
<1685=1686
<1695=1697,1696
<1701=1707,1706,1702
<1702=1703
<1703=1705,1704
<1707=1733,1708
<1708=1726,1718,1709
<1709=1710
<1710=1711
<1711=1712
<1712=1716,1713
<1713=1714
<1714=1715
<1716=1717
<1718=1719
<1719=1720
<1720=1724,1721
<1721=1722
<1722=1723
<1724=1725
<1726=1727
<1727=1732,1728
<1728=1730,1729
<1730=1731
<1733=1734
<1734=1738,1735
<1735=1736
<1736=1737
<1738=1739
<1745=1748,1747,1746
<1748=1754,1749
<1749=1750
<1750=1752,1751
<1752=1753
<1754=1755
<1755=1757,1756
<1757=1758
<1762=1765,1764,1763
<1765=1766
<1766=1767
<1767=1769,1768
<1769=1770
<1775=1778,1777,1776
<1778=1779
<1779=1780
<1780=1790,1781
<1781=1785,1782
<1782=1784,1783
<1785=1787,1786
<1787=1789,1788
<1790=1795,1791
<1791=1793,1792
<1793=1794
<1805=1816,1806
<1806=1813,1810,1807
<1807=1809,1808
<1810=1812,1811
<1813=1815,1814
<1816=1916,1888,1873,1867,1858,1850,1841,1832,1828,1824,1817
<1817=1818
<1818=1822,1819
<1819=1820
<1820=1821
<1822=1823
<1824=1825
<1825=1827,1826
<1828=1829
<1829=1831,1830
<1832=1833
<1833=1839,1834
<1834=1837,1835
<1835=1836
<1837=1838
<1839=1840
<1841=1842
<1842=1846,1843
<1843=1844
<1844=1845
<1846=1847
<1847=1849,1848
<1850=1851
<1851=1857,1852
<1852=1856,1853
<1853=1855,1854
<1858=1859
<1859=1865,1860
<1860=1863,1861
<1861=1862
<1863=1864
<1865=1866
<1867=1868
<1868=1870,1869
<1870=1872,1871
<1873=1874
<1874=1885,1875
<1875=1883,1876
<1876=1881,1879,1877
<1877=1878
<1879=1880
<1881=1882
<1883=1884
<1885=1887,1886
<1888=1912,1901,1889
<1889=1890
<1890=1891
<1891=1897,1892
<1892=1895,1893
<1893=1894
<1895=1896
<1897=1898
<1898=1900,1899
<1901=1902
<1902=1908,1903
<1903=1906,1904
<1904=1905
<1906=1907
<1908=1909
<1909=1911,1910
<1912=1913
<1913=1915,1914
<1916=1917
<1917=1919,1918
<1941=1944,1943,1942
<1944=1959,1954,1945
<1945=1950,1946
<1946=1947
<1947=1949,1948
<1950=1951
<1951=1953,1952
<1954=1955
<1955=1957,1956
<1957=1958
<1959=1960
<1960=1962,1961
<1962=1963
<1969=1972,1971,1970
<1972=1973
<1973=1974
<1974=1976,1975
<1976=1977
<1982=1985,1984,1983
<1985=1986
<1986=1987
<1987=1997,1988
<1988=1992,1989
<1989=1991,1990
<1992=1994,1993
<1994=1996,1995
<1997=2002,1998
<1998=2000,1999
<2000=2001
<2010=2016,2015,2011
<2011=2012
<2012=2014,2013
<2016=2017
<2017=2091,2069,2018
<2018=2019
<2019=2065,2043,2020
<2020=2021
<2021=2037,2022
<2022=2023
<2023=2034,2024
<2024=2032,2025
<2025=2030,2028,2026
<2026=2027
<2028=2029
<2030=2031
<2032=2033
<2034=2036,2035
<2037=2038
<2038=2040,2039
<2040=2042,2041
<2043=2059,2044
<2044=2045
<2045=2056,2046
<2046=2054,2047
<2047=2052,2050,2048
<2048=2049
<2050=2051
<2052=2053
<2054=2055
<2056=2058,2057
<2059=2060
<2060=2062,2061
<2062=2064,2063
<2065=2066
<2066=2068,2067
<2069=2076,2070
<2070=2071
<2071=2073,2072
<2073=2075,2074
<2076=2077
<2077=2088,2078
<2078=2086,2079
<2079=2084,2082,2080
<2080=2081
<2082=2083
<2084=2085
<2086=2087
<2088=2090,2089
<2091=2092
<2092=2094,2093
<2104=2110,2109,2105
<2105=2106
<2106=2108,2107
<2110=2111
<2111=2112
<2112=2114,2113
<2120=2126,2125,2121
<2121=2122
<2122=2124,2123
<2126=3044,3037,3033,3026,3019,3004,3000,2993,2986,2898,2891,2814,2705,2375,2365,2131,2127
<2127=2128
<2128=2130,2129
<2131=2273,2145,2132
<2132=2133
<2133=2138,2134
<2134=2135
<2135=2137,2136
<2138=2139
<2139=2143,2140
<2140=2141
<2141=2142
<2143=2144
<2145=2258,2146
<2146=2238,2233,2147
<2147=2148
<2148=2211,2149
<2149=2207,2150
<2150=2203,2164,2151
<2151=2152
<2152=2153
<2153=2154
<2154=2158,2155
<2155=2156
<2156=2157
<2158=2159
<2159=2161,2160
<2161=2163,2162
<2164=2165
<2165=2199,2183,2166
<2166=2167
<2167=2179,2172,2168
<2168=2169
<2169=2171,2170
<2172=2173
<2173=2177,2174
<2174=2175
<2175=2176
<2177=2178
<2179=2180
<2180=2182,2181
<2183=2195,2188,2184
<2184=2185
<2185=2187,2186
<2188=2189
<2189=2193,2190
<2190=2191
<2191=2192
<2193=2194
<2195=2196
<2196=2198,2197
<2199=2200
<2200=2202,2201
<2203=2204
<2204=2206,2205
<2207=2208
<2208=2210,2209
<2211=2212
<2212=2232,2213
<2213=2223,2214
<2214=2222,2215
<2215=2217,2216
<2217=2219,2218
<2219=2221,2220
<2223=2231,2224
<2224=2226,2225
<2226=2228,2227
<2228=2230,2229
<2233=2234
<2234=2235
<2235=2237,2236
<2238=2239
<2239=2255,2240
<2240=2248,2241
<2241=2243,2242
<2243=2245,2244
<2245=2247,2246
<2248=2250,2249
<2250=2252,2251
<2252=2254,2253
<2255=2257,2256
<2258=2269,2259
<2259=2260
<2260=2261
<2261=2267,2262
<2262=2263
<2263=2264
<2264=2266,2265
<2267=2268
<2269=2270
<2270=2272,2271
<2273=2274
<2274=2362,2275
<2275=2359,2276
<2276=2339,2277
<2277=2319,2278
<2278=2299,2279
<2279=2292,2280
<2280=2289,2281
<2281=2283,2282
<2283=2285,2284
<2285=2286
<2286=2288,2287
<2289=2291,2290
<2292=2294,2293
<2294=2296,2295
<2296=2298,2297
<2299=2312,2300
<2300=2309,2301
<2301=2303,2302
<2303=2305,2304
<2305=2306
<2306=2308,2307
<2309=2311,2310
<2312=2314,2313
<2314=2316,2315
<2316=2318,2317
<2319=2332,2320
<2320=2329,2321
<2321=2323,2322
<2323=2325,2324
<2325=2326
<2326=2328,2327
<2329=2331,2330
<2332=2334,2333
<2334=2336,2335
<2336=2338,2337
<2339=2352,2340
<2340=2349,2341
<2341=2343,2342
<2343=2345,2344
<2345=2346
<2346=2348,2347
<2349=2351,2350
<2352=2354,2353
<2354=2356,2355
<2356=2358,2357
<2359=2361,2360
<2362=2364,2363
<2365=2366
<2366=2374,2373,2367
<2367=2372,2368
<2368=2370,2369
<2370=2371
<2375=2701,2376
<2376=2377
<2377=2699,2378
<2378=2697,2602,2601,2599,2504,2503,2501,2500,2498,2380,2379
<2380=2381
<2381=2480,2458,2382
<2382=2383
<2383=2384
<2384=2450,2446,2443,2385
<2385=2386
<2386=2432,2387
<2387=2426,2404,2397,2393,2389,2388
<2389=2390
<2390=2392,2391
<2393=2394
<2394=2396,2395
<2397=2398
<2398=2402,2399
<2399=2400
<2400=2401
<2402=2403
<2404=2415,2405
<2405=2406
<2406=2407
<2407=2411,2408
<2408=2409
<2409=2410
<2411=2412
<2412=2414,2413
<2415=2416
<2416=2420,2417
<2417=2418
<2418=2419
<2420=2421
<2421=2423,2422
<2423=2425,2424
<2426=2427
<2427=2429,2428
<2429=2431,2430
<2432=2433
<2433=2437,2434
<2434=2435
<2435=2436
<2437=2438
<2438=2440,2439
<2440=2442,2441
<2443=2445,2444
<2446=2447
<2447=2449,2448
<2450=2451
<2451=2452
<2452=2457,2456,2453
<2453=2455,2454
<2458=2474,2467,2463,2459
<2459=2460
<2460=2462,2461
<2463=2464
<2464=2466,2465
<2467=2468
<2468=2472,2469
<2469=2470
<2470=2471
<2472=2473
<2474=2475
<2475=2477,2476
<2477=2479,2478
<2480=2481
<2481=2490,2482
<2482=2486,2483
<2483=2484
<2484=2485
<2486=2487
<2487=2489,2488
<2490=2494,2491
<2491=2492
<2492=2493
<2494=2495
<2495=2497,2496
<2498=2499
<2501=2502
<2504=2505
<2505=2591,2587,2584,2506
<2506=2507
<2507=2575,2508
<2508=2547,2525,2518,2514,2510,2509
<2510=2511
<2511=2513,2512
<2514=2515
<2515=2517,2516
<2518=2519
<2519=2523,2520
<2520=2521
<2521=2522
<2523=2524
<2525=2536,2526
<2526=2527
<2527=2528
<2528=2532,2529
<2529=2530
<2530=2531
<2532=2533
<2533=2535,2534
<2536=2537
<2537=2541,2538
<2538=2539
<2539=2540
<2541=2542
<2542=2544,2543
<2544=2546,2545
<2547=2571,2548
<2548=2549
<2549=2563,2557,2550
<2550=2551
<2551=2552
<2552=2554,2553
<2554=2556,2555
<2557=2558
<2558=2560,2559
<2560=2562,2561
<2563=2564
<2564=2568,2565
<2565=2567,2566
<2568=2570,2569
<2571=2572
<2572=2574,2573
<2575=2576
<2576=2580,2577
<2577=2578
<2578=2579
<2580=2581
<2581=2583,2582
<2584=2586,2585
<2587=2588
<2588=2590,2589
<2591=2592
<2592=2593
<2593=2598,2597,2594
<2594=2596,2595
<2599=2600
<2602=2603
<2603=2695,2604
<2604=2605
<2605=2687,2683,2680,2606
<2606=2607
<2607=2671,2608
<2608=2647,2625,2618,2614,2610,2609
<2610=2611
<2611=2613,2612
<2614=2615
<2615=2617,2616
<2618=2619
<2619=2623,2620
<2620=2621
<2621=2622
<2623=2624
<2625=2636,2626
<2626=2627
<2627=2628
<2628=2632,2629
<2629=2630
<2630=2631
<2632=2633
<2633=2635,2634
<2636=2637
<2637=2641,2638
<2638=2639
<2639=2640
<2641=2642
<2642=2644,2643
<2644=2646,2645
<2647=2667,2648
<2648=2649
<2649=2659,2650
<2650=2651
<2651=2652
<2652=2656,2653
<2653=2655,2654
<2656=2658,2657
<2659=2660
<2660=2664,2661
<2661=2663,2662
<2664=2666,2665
<2667=2668
<2668=2670,2669
<2671=2672
<2672=2676,2673
<2673=2674
<2674=2675
<2676=2677
<2677=2679,2678
<2680=2682,2681
<2683=2684
<2684=2686,2685
<2687=2688
<2688=2689
<2689=2694,2693,2690
<2690=2692,2691
<2695=2696
<2697=2698
<2699=2700
<2701=2702
<2702=2704,2703
<2705=2810,2757,2706
<2706=2707
<2707=2708
<2708=2755,2738,2709
<2709=2710
<2710=2736,2711
<2711=2732,2726,2712
<2712=2713
<2713=2722,2714
<2714=2715
<2715=2716
<2716=2718,2717
<2718=2719
<2719=2721,2720
<2722=2723
<2723=2725,2724
<2726=2727
<2727=2731,2728
<2728=2730,2729
<2732=2733
<2733=2735,2734
<2736=2737
<2738=2739
<2739=2740
<2740=2751,2741
<2741=2742
<2742=2743
<2743=2749,2744
<2744=2745
<2745=2746
<2746=2748,2747
<2749=2750
<2751=2752
<2752=2754,2753
<2755=2756
<2757=2806,2802,2767,2758
<2758=2759
<2759=2763,2760
<2760=2761
<2761=2762
<2763=2764
<2764=2766,2765
<2767=2794,2776,2773,2768
<2768=2769
<2769=2770
<2770=2772,2771
<2773=2775,2774
<2776=2777
<2777=2793,2778
<2778=2791,2779
<2779=2780
<2780=2781
<2781=2785,2782
<2782=2783
<2783=2784
<2785=2786
<2786=2788,2787
<2788=2790,2789
<2791=2792
<2794=2795
<2795=2796
<2796=2801,2800,2797
<2797=2799,2798
<2802=2803
<2803=2805,2804
<2806=2807
<2807=2809,2808
<2810=2811
<2811=2813,2812
<2814=2887,2815
<2815=2816
<2816=2883,2871,2817
<2817=2818
<2818=2867,2855,2819
<2819=2820
<2820=2851,2839,2821
<2821=2822
<2822=2835,2823
<2823=2824
<2824=2834,2825
<2825=2833,2826
<2826=2828,2827
<2828=2830,2829
<2830=2832,2831
<2835=2836
<2836=2838,2837
<2839=2840
<2840=2850,2841
<2841=2849,2842
<2842=2844,2843
<2844=2846,2845
<2846=2848,2847
<2851=2852
<2852=2854,2853
<2855=2856
<2856=2866,2857
<2857=2865,2858
<2858=2860,2859
<2860=2862,2861
<2862=2864,2863
<2867=2868
<2868=2870,2869
<2871=2872
<2872=2882,2873
<2873=2881,2874
<2874=2876,2875
<2876=2878,2877
<2878=2880,2879
<2883=2884
<2884=2886,2885
<2887=2888
<2888=2890,2889
<2891=2892
<2892=2897,2896,2893
<2893=2895,2894
<2898=2982,2899
<2899=2965,2950,2900
<2900=2948,2901
<2901=2946,2936,2935,2933,2923,2922,2920,2910,2909,2907,2903,2902
<2903=2904
<2904=2906,2905
<2907=2908
<2910=2911
<2911=2919,2912
<2912=2918,2913
<2913=2915,2914
<2915=2917,2916
<2920=2921
<2923=2924
<2924=2932,2925
<2925=2931,2926
<2926=2928,2927
<2928=2930,2929
<2933=2934
<2936=2937
<2937=2945,2938
<2938=2944,2939
<2939=2941,2940
<2941=2943,2942
<2946=2947
<2948=2949
<2950=2961,2951
<2951=2952
<2952=2953
<2953=2959,2954
<2954=2955
<2955=2956
<2956=2958,2957
<2959=2960
<2961=2962
<2962=2964,2963
<2965=2966
<2966=2981,2967
<2967=2971,2968
<2968=2969
<2969=2970
<2971=2972
<2972=2974,2973
<2974=2976,2975
<2976=2978,2977
<2978=2980,2979
<2982=2983
<2983=2985,2984
<2986=2987
<2987=2992,2991,2988
<2988=2990,2989
<2993=2994
<2994=2999,2998,2995
<2995=2997,2996
<3000=3001
<3001=3003,3002
<3004=3006,3005
<3006=3007
<3007=3013,3008
<3008=3010,3009
<3010=3012,3011
<3013=3018,3014
<3014=3016,3015
<3016=3017
<3019=3020
<3020=3024,3021
<3021=3022
<3022=3023
<3024=3025
<3026=3027
<3027=3031,3028
<3028=3029
<3029=3030
<3031=3032
<3033=3035,3034
<3035=3036
<3037=3038
<3038=3043,3042,3039
<3039=3041,3040
<3130=3132,3131
<3132=3331,3325,3321,3317,3310,3306,3302,3294,3285,3266,3255,3247,3238,3219,3210,3204,3193,3189,3185,3181,3177,3173,3155,3137,3133
<3133=3134
<3134=3136,3135
<3137=3138
<3138=3153,3139
<3139=3144,3142,3140
<3140=3141
<3142=3143
<3144=3145
<3145=3151,3146
<3146=3149,3147
<3147=3148
<3149=3150
<3151=3152
<3153=3154
<3155=3156
<3156=3171,3157
<3157=3162,3160,3158
<3158=3159
<3160=3161
<3162=3163
<3163=3169,3164
<3164=3167,3165
<3165=3166
<3167=3168
<3169=3170
<3171=3172
<3173=3174
<3174=3176,3175
<3177=3178
<3178=3180,3179
<3181=3182
<3182=3184,3183
<3185=3186
<3186=3188,3187
<3189=3190
<3190=3192,3191
<3193=3194
<3194=3202,3195
<3195=3200,3198,3196
<3196=3197
<3198=3199
<3200=3201
<3202=3203
<3204=3205
<3205=3207,3206
<3207=3209,3208
<3210=3211
<3211=3215,3212
<3212=3213
<3213=3214
<3215=3216
<3216=3218,3217
<3219=3220
<3220=3235,3221
<3221=3233,3222
<3222=3231,3225,3223
<3223=3224
<3225=3226
<3226=3228,3227
<3228=3230,3229
<3231=3232
<3233=3234
<3235=3237,3236
<3238=3239
<3239=3243,3240
<3240=3241
<3241=3242
<3243=3244
<3244=3246,3245
<3247=3248
<3248=3254,3249
<3249=3253,3250
<3250=3252,3251
<3255=3256
<3256=3264,3257
<3257=3262,3260,3258
<3258=3259
<3260=3261
<3262=3263
<3264=3265
<3266=3267
<3267=3282,3268
<3268=3280,3269
<3269=3278,3272,3270
<3270=3271
<3272=3273
<3273=3275,3274
<3275=3277,3276
<3278=3279
<3280=3281
<3282=3284,3283
<3285=3286
<3286=3290,3287
<3287=3288
<3288=3289
<3290=3291
<3291=3293,3292
<3294=3295
<3295=3301,3296
<3296=3300,3297
<3297=3299,3298
<3302=3303
<3303=3305,3304
<3306=3307
<3307=3309,3308
<3310=3311
<3311=3316,3315,3312
<3312=3314,3313
<3317=3318
<3318=3320,3319
<3321=3322
<3322=3324,3323
<3325=3326
<3326=3330,3327
<3327=3329,3328
<3331=3332
<3332=3336,3333
<3333=3335,3334
<3374=3377,3376,3375
<3377=3388,3383,3378
<3378=3379
<3379=3381,3380
<3381=3382
<3383=3384
<3384=3386,3385
<3386=3387
<3388=3389
<3389=3393,3390
<3390=3391
<3391=3392
<3393=3394
<3399=3402,3401,3400
<3402=3403
<3403=3404
<3404=3406,3405
<3406=3407
<3412=3415,3414,3413
<3415=3416
<3416=3417
<3417=3427,3418
<3418=3422,3419
<3419=3421,3420
<3422=3424,3423
<3424=3426,3425
<3427=3432,3428
<3428=3430,3429
<3430=3431
<3440=3446,3445,3441
<3441=3442
<3442=3444,3443
<3446=3447
<3447=3448
<3448=3450,3449
<3456=3462,3461,3457
<3457=3458
<3458=3460,3459
<3462=3493,3492,3491,3490,3488,3474,3465,3463
<3463=3464
<3465=3466
<3466=3472,3467
<3467=3470,3468
<3468=3469
<3470=3471
<3472=3473
<3474=3475
<3475=3487,3486,3476
<3476=3485,3477
<3477=3481,3478
<3478=3479
<3479=3480
<3481=3482
<3482=3484,3483
<3488=3489
<3493=3504,3494
<3494=3497,3495
<3495=3496
<3497=3498
<3498=3502,3499
<3499=3500
<3500=3501
<3502=3503
<3504=3505
<3516=3528,3527,3517
<3517=3524,3521,3518
<3518=3520,3519
<3521=3523,3522
<3524=3526,3525
<3528=3578,3577,3576,3575,3573,3564,3553,3544,3538,3529
<3529=3530
<3530=3536,3531
<3531=3534,3532
<3532=3533
<3534=3535
<3536=3537
<3538=3539
<3539=3541,3540
<3541=3543,3542
<3544=3545
<3545=3549,3546
<3546=3547
<3547=3548
<3549=3550
<3550=3552,3551
<3553=3554
<3554=3560,3555
<3555=3558,3556
<3556=3557
<3558=3559
<3560=3561
<3561=3563,3562
<3564=3565
<3565=3569,3566
<3566=3567
<3567=3568
<3569=3570
<3570=3572,3571
<3573=3574
<3578=3588,3579
<3579=3581,3580
<3581=3582
<3582=3586,3583
<3583=3584
<3584=3585
<3586=3587
<3588=3589
<3601=3604,3603,3602
<3604=3605
<3605=3649,3606
<3606=3643,3614,3607
<3607=3608
<3608=3610,3609
<3610=3611
<3611=3613,3612
<3614=3634,3623,3615
<3615=3616
<3616=3617
<3617=3619,3618
<3619=3620
<3620=3622,3621
<3623=3624
<3624=3628,3625
<3625=3626
<3626=3627
<3628=3629
<3629=3631,3630
<3631=3633,3632
<3634=3635
<3635=3642,3636
<3636=3638,3637
<3638=3639
<3639=3641,3640
<3643=3644
<3644=3646,3645
<3646=3648,3647
<3649=3650
<3650=3658,3651
<3651=3657,3652
<3652=3654,3653
<3654=3656,3655
<3658=3660,3659
<3660=3661
<3675=3681,3680,3676
<3676=3677
<3677=3679,3678
<3681=3691,3682
<3682=3683
<3683=3687,3684
<3684=3685
<3685=3686
<3687=3688
<3688=3690,3689
<3691=3692
<3692=3696,3693
<3693=3694
<3694=3695
<3696=3697
<3697=3699,3698
<3706=3712,3711,3707
<3707=3708
<3708=3710,3709
<3712=3781,3713
<3713=3779,3746,3714
<3714=3715
<3715=3716
<3716=3744,3731,3717
<3717=3718
<3718=3719
<3719=3725,3720
<3720=3723,3721
<3721=3722
<3723=3724
<3725=3726
<3726=3728,3727
<3728=3730,3729
<3731=3732
<3732=3738,3733
<3733=3736,3734
<3734=3735
<3736=3737
<3738=3739
<3739=3741,3740
<3741=3743,3742
<3744=3745
<3746=3747
<3747=3777,3763,3748
<3748=3749
<3749=3750
<3750=3751
<3751=3757,3752
<3752=3755,3753
<3753=3754
<3755=3756
<3757=3758
<3758=3760,3759
<3760=3762,3761
<3763=3764
<3764=3765
<3765=3771,3766
<3766=3769,3767
<3767=3768
<3769=3770
<3771=3772
<3772=3774,3773
<3774=3776,3775
<3777=3778
<3779=3780
<3781=3782
<3782=3784,3783
<3796=3802,3801,3797
<3797=3798
<3798=3800,3799
<3802=3957,3945,3938,3912,3902,3889,3875,3803
<3803=3870,3804
<3804=3805
<3805=3864,3818,3806
<3806=3807
<3807=3808
<3808=3816,3809
<3809=3810
<3810=3814,3811
<3811=3812
<3812=3813
<3814=3815
<3816=3817
<3818=3857,3833,3819
<3819=3827,3820
<3820=3821
<3821=3825,3822
<3822=3823
<3823=3824
<3825=3826
<3827=3828
<3828=3830,3829
<3830=3832,3831
<3833=3852,3839,3834
<3834=3835
<3835=3836
<3836=3838,3837
<3839=3840
<3840=3848,3841
<3841=3842
<3842=3846,3843
<3843=3844
<3844=3845
<3846=3847
<3848=3849
<3849=3851,3850
<3852=3853
<3853=3855,3854
<3855=3856
<3857=3858
<3858=3863,3862,3859
<3859=3861,3860
<3864=3865
<3865=3867,3866
<3867=3869,3868
<3870=3871
<3871=3873,3872
<3873=3874
<3875=3887,3876
<3876=3877
<3877=3878
<3878=3882,3879
<3879=3881,3880
<3882=3884,3883
<3884=3886,3885
<3887=3888
<3889=3897,3890
<3890=3891
<3891=3895,3892
<3892=3893
<3893=3894
<3895=3896
<3897=3898
<3898=3900,3899
<3900=3901
<3902=3904,3903
<3904=3905
<3905=3907,3906
<3907=3909,3908
<3909=3911,3910
<3912=3936,3913
<3913=3925,3914
<3914=3923,3915
<3915=3916
<3916=3920,3917
<3917=3919,3918
<3920=3922,3921
<3923=3924
<3925=3934,3926
<3926=3927
<3927=3931,3928
<3928=3930,3929
<3931=3933,3932
<3934=3935
<3936=3937
<3938=3939
<3939=3943,3940
<3940=3941
<3941=3942
<3943=3944
<3945=3955,3946
<3946=3947
<3947=3948
<3948=3952,3949
<3949=3951,3950
<3952=3954,3953
<3955=3956
<3957=3958
<3958=3962,3959
<3959=3960
<3960=3961
<3962=3963
<3992=3995,3994,3993
<3995=4127,4113,4106,4097,4071,4054,4044,3998,3996
<3996=3997
<3998=4024,3999
<3999=4000
<4000=4004,4001
<4001=4002
<4002=4003
<4004=4005
<4005=4015,4006
<4006=4012,4007
<4007=4009,4008
<4009=4011,4010
<4012=4014,4013
<4015=4021,4016
<4016=4018,4017
<4018=4020,4019
<4021=4023,4022
<4024=4025
<4025=4035,4026
<4026=4032,4027
<4027=4029,4028
<4029=4031,4030
<4032=4034,4033
<4035=4041,4036
<4036=4038,4037
<4038=4040,4039
<4041=4043,4042
<4044=4045
<4045=4053,4052,4046
<4046=4051,4047
<4047=4049,4048
<4049=4050
<4054=4065,4055
<4055=4056
<4056=4057
<4057=4063,4058
<4058=4061,4059
<4059=4060
<4061=4062
<4063=4064
<4065=4066
<4066=4068,4067
<4068=4070,4069
<4071=4095,4072
<4072=4084,4073
<4073=4074
<4074=4083,4075
<4075=4077,4076
<4077=4079,4078
<4079=4080
<4080=4082,4081
<4084=4085
<4085=4094,4086
<4086=4088,4087
<4088=4090,4089
<4090=4091
<4091=4093,4092
<4095=4096
<4097=4102,4098
<4098=4099
<4099=4101,4100
<4102=4103
<4103=4105,4104
<4106=4107
<4107=4112,4111,4108
<4108=4110,4109
<4113=4114
<4114=4126,4125,4115
<4115=4124,4116
<4116=4118,4117
<4118=4120,4119
<4120=4121
<4121=4123,4122
<4127=4128
<4128=4137,4136,4129
<4129=4135,4130
<4130=4132,4131
<4132=4134,4133
