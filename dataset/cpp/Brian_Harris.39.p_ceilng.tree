>3	FunctionDef	T_MoveCeiling (ceiling_t * ceiling)
>4	ParameterList	ceiling_t * ceiling
>5	Parameter	 
>6	Identifier	ceiling
>7	ParameterType	ceiling_t *
>8	ReturnType	void
>9	CompoundStatement	 
>10	SwitchStatement	switch ( ceiling -> direction )
>11	CompoundStatement	 
>12	BreakStatement	 
>13	IfStatement	if ( res == pastdest )
>14	ElseStatement	else
>15	CompoundStatement	 
>16	IfStatement	if ( res == crushed )
>17	CompoundStatement	 
>18	SwitchStatement	switch ( ceiling -> type )
>19	CompoundStatement	 
>20	BreakStatement	 
>21	Label	 
>22	Identifier	default
>23	BreakStatement	 
>24	ExpressionStatement	 
>25	AssignmentExpr	ceiling -> speed = CEILSPEED / 8
>26	MultiplicativeExpression	CEILSPEED / 8
>27	PrimaryExpression	8
>28	Identifier	CEILSPEED
>29	PtrMemberAccess	ceiling -> speed
>30	Identifier	speed
>31	Identifier	ceiling
>32	Label	 
>33	Identifier	lowerAndCrush
>34	Label	 
>35	Identifier	crushAndRaise
>36	Label	 
>37	Identifier	silentCrushAndRaise
>38	Condition	 
>39	PtrMemberAccess	ceiling -> type
>40	Identifier	type
>41	Identifier	ceiling
>42	Condition	 
>43	EqualityExpression	res == crushed
>44	Identifier	crushed
>45	Identifier	res
>46	CompoundStatement	 
>47	SwitchStatement	switch ( ceiling -> type )
>48	CompoundStatement	 
>49	BreakStatement	 
>50	Label	 
>51	Identifier	default
>52	BreakStatement	 
>53	ExpressionStatement	 
>54	CallExpression	P_RemoveActiveCeiling ( ceiling )
>55	ArgumentList	ceiling
>56	Argument	ceiling
>57	Identifier	ceiling
>58	Callee	P_RemoveActiveCeiling
>59	Identifier	P_RemoveActiveCeiling
>60	Label	 
>61	Identifier	lowerToFloor
>62	Label	 
>63	Identifier	lowerAndCrush
>64	BreakStatement	 
>65	ExpressionStatement	 
>66	AssignmentExpr	ceiling -> direction = 1
>67	PrimaryExpression	1
>68	PtrMemberAccess	ceiling -> direction
>69	Identifier	direction
>70	Identifier	ceiling
>71	Label	 
>72	Identifier	fastCrushAndRaise
>73	ExpressionStatement	 
>74	AssignmentExpr	ceiling -> speed = CEILSPEED
>75	Identifier	CEILSPEED
>76	PtrMemberAccess	ceiling -> speed
>77	Identifier	speed
>78	Identifier	ceiling
>79	Label	 
>80	Identifier	crushAndRaise
>81	ExpressionStatement	 
>82	CallExpression	S_StartSound ( & ceiling -> sector -> soundorg , sfx_pstop )
>83	ArgumentList	& ceiling -> sector -> soundorg
>84	Argument	sfx_pstop
>85	Identifier	sfx_pstop
>86	Argument	& ceiling -> sector -> soundorg
>87	UnaryOp	& ceiling -> sector -> soundorg
>88	PtrMemberAccess	ceiling -> sector -> soundorg
>89	Identifier	soundorg
>90	PtrMemberAccess	ceiling -> sector
>91	Identifier	sector
>92	Identifier	ceiling
>93	UnaryOperator	&
>94	Callee	S_StartSound
>95	Identifier	S_StartSound
>96	Label	 
>97	Identifier	silentCrushAndRaise
>98	Condition	 
>99	PtrMemberAccess	ceiling -> type
>100	Identifier	type
>101	Identifier	ceiling
>102	Condition	 
>103	EqualityExpression	res == pastdest
>104	Identifier	pastdest
>105	Identifier	res
>106	CompoundStatement	 
>107	SwitchStatement	switch ( ceiling -> type )
>108	CompoundStatement	 
>109	ExpressionStatement	 
>110	CallExpression	S_StartSound ( & ceiling -> sector -> soundorg , sfx_stnmov )
>111	ArgumentList	& ceiling -> sector -> soundorg
>112	Argument	sfx_stnmov
>113	Identifier	sfx_stnmov
>114	Argument	& ceiling -> sector -> soundorg
>115	UnaryOp	& ceiling -> sector -> soundorg
>116	PtrMemberAccess	ceiling -> sector -> soundorg
>117	Identifier	soundorg
>118	PtrMemberAccess	ceiling -> sector
>119	Identifier	sector
>120	Identifier	ceiling
>121	UnaryOperator	&
>122	Callee	S_StartSound
>123	Identifier	S_StartSound
>124	Label	 
>125	Identifier	default
>126	BreakStatement	 
>127	Label	 
>128	Identifier	silentCrushAndRaise
>129	Condition	 
>130	PtrMemberAccess	ceiling -> type
>131	Identifier	type
>132	Identifier	ceiling
>133	Statement	 
>134	Statement	 
>135	Statement	 
>136	Statement	 
>137	Statement	 
>138	Statement	 
>139	Statement	 
>140	Statement	 
>141	Statement	 
>142	Statement	 
>143	Statement	 
>144	Statement	 
>145	ExpressionStatement	 
>146	AssignmentExpr	res = T_MovePlane ( ceiling -> sector , ceiling -> speed , ceiling -> bottomheight , ceiling -> crush , \
>147	CallExpression	T_MovePlane ( ceiling -> sector , ceiling -> speed , ceiling -> bottomheight , ceiling -> crush , 1 , ceiling -> \
>148	ArgumentList	ceiling -> sector
>149	Argument	ceiling -> direction
>150	PtrMemberAccess	ceiling -> direction
>151	Identifier	direction
>152	Identifier	ceiling
>153	Argument	1
>154	PrimaryExpression	1
>155	Argument	ceiling -> crush
>156	PtrMemberAccess	ceiling -> crush
>157	Identifier	crush
>158	Identifier	ceiling
>159	Argument	ceiling -> bottomheight
>160	PtrMemberAccess	ceiling -> bottomheight
>161	Identifier	bottomheight
>162	Identifier	ceiling
>163	Argument	ceiling -> speed
>164	PtrMemberAccess	ceiling -> speed
>165	Identifier	speed
>166	Identifier	ceiling
>167	Argument	ceiling -> sector
>168	PtrMemberAccess	ceiling -> sector
>169	Identifier	sector
>170	Identifier	ceiling
>171	Callee	T_MovePlane
>172	Identifier	T_MovePlane
>173	Identifier	res
>174	Label	 
>175	Statement	 
>176	Statement	 
>177	BreakStatement	 
>178	IfStatement	if ( res == pastdest )
>179	CompoundStatement	 
>180	SwitchStatement	switch ( ceiling -> type )
>181	CompoundStatement	 
>182	BreakStatement	 
>183	Label	 
>184	Identifier	default
>185	BreakStatement	 
>186	ExpressionStatement	 
>187	AssignmentExpr	ceiling -> direction = - 1
>188	UnaryOp	- 1
>189	PrimaryExpression	1
>190	UnaryOperator	-
>191	PtrMemberAccess	ceiling -> direction
>192	Identifier	direction
>193	Identifier	ceiling
>194	Label	 
>195	Identifier	crushAndRaise
>196	Label	 
>197	Identifier	fastCrushAndRaise
>198	ExpressionStatement	 
>199	CallExpression	S_StartSound ( & ceiling -> sector -> soundorg , sfx_pstop )
>200	ArgumentList	& ceiling -> sector -> soundorg
>201	Argument	sfx_pstop
>202	Identifier	sfx_pstop
>203	Argument	& ceiling -> sector -> soundorg
>204	UnaryOp	& ceiling -> sector -> soundorg
>205	PtrMemberAccess	ceiling -> sector -> soundorg
>206	Identifier	soundorg
>207	PtrMemberAccess	ceiling -> sector
>208	Identifier	sector
>209	Identifier	ceiling
>210	UnaryOperator	&
>211	Callee	S_StartSound
>212	Identifier	S_StartSound
>213	Label	 
>214	Identifier	silentCrushAndRaise
>215	BreakStatement	 
>216	ExpressionStatement	 
>217	CallExpression	P_RemoveActiveCeiling ( ceiling )
>218	ArgumentList	ceiling
>219	Argument	ceiling
>220	Identifier	ceiling
>221	Callee	P_RemoveActiveCeiling
>222	Identifier	P_RemoveActiveCeiling
>223	Label	 
>224	Identifier	raiseToHighest
>225	Condition	 
>226	PtrMemberAccess	ceiling -> type
>227	Identifier	type
>228	Identifier	ceiling
>229	Condition	 
>230	EqualityExpression	res == pastdest
>231	Identifier	pastdest
>232	Identifier	res
>233	CompoundStatement	 
>234	SwitchStatement	switch ( ceiling -> type )
>235	CompoundStatement	 
>236	BreakStatement	 
>237	ExpressionStatement	 
>238	CallExpression	S_StartSound ( & ceiling -> sector -> soundorg , sfx_stnmov )
>239	ArgumentList	& ceiling -> sector -> soundorg
>240	Argument	sfx_stnmov
>241	Identifier	sfx_stnmov
>242	Argument	& ceiling -> sector -> soundorg
>243	UnaryOp	& ceiling -> sector -> soundorg
>244	PtrMemberAccess	ceiling -> sector -> soundorg
>245	Identifier	soundorg
>246	PtrMemberAccess	ceiling -> sector
>247	Identifier	sector
>248	Identifier	ceiling
>249	UnaryOperator	&
>250	Callee	S_StartSound
>251	Identifier	S_StartSound
>252	Label	 
>253	Identifier	default
>254	BreakStatement	 
>255	Label	 
>256	Identifier	silentCrushAndRaise
>257	Condition	 
>258	PtrMemberAccess	ceiling -> type
>259	Identifier	type
>260	Identifier	ceiling
>261	Statement	 
>262	Statement	 
>263	Statement	 
>264	Statement	 
>265	Statement	 
>266	Statement	 
>267	Statement	 
>268	Statement	 
>269	Statement	 
>270	Statement	 
>271	Statement	 
>272	Statement	 
>273	ExpressionStatement	 
>274	AssignmentExpr	res = T_MovePlane ( ceiling -> sector , ceiling -> speed , ceiling -> topheight , false , 1 , ceiling \
>275	CallExpression	T_MovePlane ( ceiling -> sector , ceiling -> speed , ceiling -> topheight , false , 1 , ceiling -> direction )
>276	ArgumentList	ceiling -> sector
>277	Argument	ceiling -> direction
>278	PtrMemberAccess	ceiling -> direction
>279	Identifier	direction
>280	Identifier	ceiling
>281	Argument	1
>282	PrimaryExpression	1
>283	Argument	false
>284	Identifier	false
>285	Argument	ceiling -> topheight
>286	PtrMemberAccess	ceiling -> topheight
>287	Identifier	topheight
>288	Identifier	ceiling
>289	Argument	ceiling -> speed
>290	PtrMemberAccess	ceiling -> speed
>291	Identifier	speed
>292	Identifier	ceiling
>293	Argument	ceiling -> sector
>294	PtrMemberAccess	ceiling -> sector
>295	Identifier	sector
>296	Identifier	ceiling
>297	Callee	T_MovePlane
>298	Identifier	T_MovePlane
>299	Identifier	res
>300	Label	 
>301	BreakStatement	 
>302	Label	 
>303	Condition	 
>304	PtrMemberAccess	ceiling -> direction
>305	Identifier	direction
>306	Identifier	ceiling
>307	IdentifierDeclStatement	 
>308	IdentifierDecl	res
>309	Identifier	res
>310	IdentifierDeclType	result_e
>334	FunctionDef	EV_DoCeiling (line_t * line , ceiling_e type)
>335	ParameterList	line_t * line , ceiling_e type
>336	Parameter	 
>337	Identifier	type
>338	ParameterType	ceiling_e
>339	Parameter	 
>340	Identifier	line
>341	ParameterType	line_t *
>342	ReturnType	int
>343	CompoundStatement	 
>344	ReturnStatement	 
>345	Identifier	rtn
>346	WhileStatement	while ( ( secnum = P_FindSectorFromLineTag ( line , secnum ) ) >= 0 )
>347	CompoundStatement	 
>348	ExpressionStatement	 
>349	CallExpression	P_AddActiveCeiling ( ceiling )
>350	ArgumentList	ceiling
>351	Argument	ceiling
>352	Identifier	ceiling
>353	Callee	P_AddActiveCeiling
>354	Identifier	P_AddActiveCeiling
>355	ExpressionStatement	 
>356	AssignmentExpr	ceiling -> type = type
>357	Identifier	type
>358	PtrMemberAccess	ceiling -> type
>359	Identifier	type
>360	Identifier	ceiling
>361	ExpressionStatement	 
>362	AssignmentExpr	ceiling -> tag = sec -> tag
>363	PtrMemberAccess	sec -> tag
>364	Identifier	tag
>365	Identifier	sec
>366	PtrMemberAccess	ceiling -> tag
>367	Identifier	tag
>368	Identifier	ceiling
>369	SwitchStatement	switch ( type )
>370	CompoundStatement	 
>371	BreakStatement	 
>372	ExpressionStatement	 
>373	AssignmentExpr	ceiling -> speed = CEILSPEED
>374	Identifier	CEILSPEED
>375	PtrMemberAccess	ceiling -> speed
>376	Identifier	speed
>377	Identifier	ceiling
>378	ExpressionStatement	 
>379	AssignmentExpr	ceiling -> direction = 1
>380	PrimaryExpression	1
>381	PtrMemberAccess	ceiling -> direction
>382	Identifier	direction
>383	Identifier	ceiling
>384	ExpressionStatement	 
>385	AssignmentExpr	ceiling -> topheight = P_FindHighestCeilingSurrounding ( sec )
>386	CallExpression	P_FindHighestCeilingSurrounding ( sec )
>387	ArgumentList	sec
>388	Argument	sec
>389	Identifier	sec
>390	Callee	P_FindHighestCeilingSurrounding
>391	Identifier	P_FindHighestCeilingSurrounding
>392	PtrMemberAccess	ceiling -> topheight
>393	Identifier	topheight
>394	Identifier	ceiling
>395	Label	 
>396	Identifier	raiseToHighest
>397	BreakStatement	 
>398	ExpressionStatement	 
>399	AssignmentExpr	ceiling -> speed = CEILSPEED
>400	Identifier	CEILSPEED
>401	PtrMemberAccess	ceiling -> speed
>402	Identifier	speed
>403	Identifier	ceiling
>404	ExpressionStatement	 
>405	AssignmentExpr	ceiling -> direction = - 1
>406	UnaryOp	- 1
>407	PrimaryExpression	1
>408	UnaryOperator	-
>409	PtrMemberAccess	ceiling -> direction
>410	Identifier	direction
>411	Identifier	ceiling
>412	IfStatement	if ( type != lowerToFloor )
>413	ExpressionStatement	 
>414	AssignmentExpr	ceiling -> bottomheight += 8 * FRACUNIT
>415	MultiplicativeExpression	8 * FRACUNIT
>416	Identifier	FRACUNIT
>417	PrimaryExpression	8
>418	PtrMemberAccess	ceiling -> bottomheight
>419	Identifier	bottomheight
>420	Identifier	ceiling
>421	Condition	 
>422	EqualityExpression	type != lowerToFloor
>423	Identifier	lowerToFloor
>424	Identifier	type
>425	ExpressionStatement	 
>426	AssignmentExpr	ceiling -> bottomheight = sec -> floorheight
>427	PtrMemberAccess	sec -> floorheight
>428	Identifier	floorheight
>429	Identifier	sec
>430	PtrMemberAccess	ceiling -> bottomheight
>431	Identifier	bottomheight
>432	Identifier	ceiling
>433	Label	 
>434	Identifier	lowerToFloor
>435	Label	 
>436	Identifier	lowerAndCrush
>437	ExpressionStatement	 
>438	AssignmentExpr	ceiling -> topheight = sec -> ceilingheight
>439	PtrMemberAccess	sec -> ceilingheight
>440	Identifier	ceilingheight
>441	Identifier	sec
>442	PtrMemberAccess	ceiling -> topheight
>443	Identifier	topheight
>444	Identifier	ceiling
>445	ExpressionStatement	 
>446	AssignmentExpr	ceiling -> crush = true
>447	Identifier	true
>448	PtrMemberAccess	ceiling -> crush
>449	Identifier	crush
>450	Identifier	ceiling
>451	Label	 
>452	Identifier	crushAndRaise
>453	Label	 
>454	Identifier	silentCrushAndRaise
>455	BreakStatement	 
>456	ExpressionStatement	 
>457	AssignmentExpr	ceiling -> speed = CEILSPEED * 2
>458	MultiplicativeExpression	CEILSPEED * 2
>459	PrimaryExpression	2
>460	Identifier	CEILSPEED
>461	PtrMemberAccess	ceiling -> speed
>462	Identifier	speed
>463	Identifier	ceiling
>464	ExpressionStatement	 
>465	AssignmentExpr	ceiling -> direction = - 1
>466	UnaryOp	- 1
>467	PrimaryExpression	1
>468	UnaryOperator	-
>469	PtrMemberAccess	ceiling -> direction
>470	Identifier	direction
>471	Identifier	ceiling
>472	ExpressionStatement	 
>473	AssignmentExpr	ceiling -> bottomheight = sec -> floorheight + ( 8 * FRACUNIT )
>474	AdditiveExpression	sec -> floorheight + ( 8 * FRACUNIT )
>475	MultiplicativeExpression	8 * FRACUNIT
>476	Identifier	FRACUNIT
>477	PrimaryExpression	8
>478	PtrMemberAccess	sec -> floorheight
>479	Identifier	floorheight
>480	Identifier	sec
>481	PtrMemberAccess	ceiling -> bottomheight
>482	Identifier	bottomheight
>483	Identifier	ceiling
>484	ExpressionStatement	 
>485	AssignmentExpr	ceiling -> topheight = sec -> ceilingheight
>486	PtrMemberAccess	sec -> ceilingheight
>487	Identifier	ceilingheight
>488	Identifier	sec
>489	PtrMemberAccess	ceiling -> topheight
>490	Identifier	topheight
>491	Identifier	ceiling
>492	ExpressionStatement	 
>493	AssignmentExpr	ceiling -> crush = true
>494	Identifier	true
>495	PtrMemberAccess	ceiling -> crush
>496	Identifier	crush
>497	Identifier	ceiling
>498	Label	 
>499	Identifier	fastCrushAndRaise
>500	Condition	 
>501	Identifier	type
>502	ExpressionStatement	 
>503	AssignmentExpr	ceiling -> crush = false
>504	Identifier	false
>505	PtrMemberAccess	ceiling -> crush
>506	Identifier	crush
>507	Identifier	ceiling
>508	ExpressionStatement	 
>509	AssignmentExpr	ceiling -> sector = sec
>510	Identifier	sec
>511	PtrMemberAccess	ceiling -> sector
>512	Identifier	sector
>513	Identifier	ceiling
>514	ExpressionStatement	 
>515	AssignmentExpr	ceiling -> thinker . function . acp1 = ( actionf_p1 ) T_MoveCeiling
>516	CastExpression	( actionf_p1 ) T_MoveCeiling
>517	Identifier	T_MoveCeiling
>518	CastTarget	actionf_p1
>519	MemberAccess	ceiling -> thinker . function . acp1
>520	Identifier	acp1
>521	MemberAccess	ceiling -> thinker . function
>522	Identifier	function
>523	PtrMemberAccess	ceiling -> thinker
>524	Identifier	thinker
>525	Identifier	ceiling
>526	ExpressionStatement	 
>527	AssignmentExpr	sec -> specialdata = ceiling
>528	Identifier	ceiling
>529	PtrMemberAccess	sec -> specialdata
>530	Identifier	specialdata
>531	Identifier	sec
>532	ExpressionStatement	 
>533	CallExpression	P_AddThinker ( & ceiling -> thinker )
>534	ArgumentList	& ceiling -> thinker
>535	Argument	& ceiling -> thinker
>536	UnaryOp	& ceiling -> thinker
>537	PtrMemberAccess	ceiling -> thinker
>538	Identifier	thinker
>539	Identifier	ceiling
>540	UnaryOperator	&
>541	Callee	P_AddThinker
>542	Identifier	P_AddThinker
>543	ExpressionStatement	 
>544	AssignmentExpr	ceiling = ( ceiling_t * ) DoomLib 
>545	CastExpression	( ceiling_t * ) DoomLib 
>546	CallExpression	DoomLib 
>547	ArgumentList	sizeof ( * ceiling )
>548	Argument	0
>549	PrimaryExpression	0
>550	Argument	PU_LEVEL
>551	Identifier	PU_LEVEL
>552	Argument	sizeof ( * ceiling )
>553	SizeofExpr	sizeof ( * ceiling )
>554	UnaryOp	* ceiling
>555	Identifier	ceiling
>556	UnaryOperator	*
>557	Sizeof	sizeof
>558	Callee	DoomLib 
>559	Identifier	DoomLib 
>560	CastTarget	ceiling_t *
>561	Identifier	ceiling
>562	ExpressionStatement	 
>563	AssignmentExpr	rtn = 1
>564	PrimaryExpression	1
>565	Identifier	rtn
>566	IfStatement	if ( sec -> specialdata )
>567	ContinueStatement	 
>568	Condition	 
>569	PtrMemberAccess	sec -> specialdata
>570	Identifier	specialdata
>571	Identifier	sec
>572	ExpressionStatement	 
>573	ArrayIndexing	g -> sectors [ secnum ]
>574	Identifier	secnum
>575	PtrMemberAccess	g -> sectors
>576	Identifier	sectors
>577	Identifier	g
>578	Statement	 
>579	Statement	 
>580	Statement	 
>581	Statement	 
>582	Condition	 
>583	RelationalExpression	( secnum = P_FindSectorFromLineTag ( line , secnum ) ) >= 0
>584	PrimaryExpression	0
>585	AssignmentExpr	secnum = P_FindSectorFromLineTag ( line , secnum )
>586	CallExpression	P_FindSectorFromLineTag ( line , secnum )
>587	ArgumentList	line
>588	Argument	secnum
>589	Identifier	secnum
>590	Argument	line
>591	Identifier	line
>592	Callee	P_FindSectorFromLineTag
>593	Identifier	P_FindSectorFromLineTag
>594	Identifier	secnum
>595	SwitchStatement	switch ( type )
>596	CompoundStatement	 
>597	BreakStatement	 
>598	Label	 
>599	Identifier	default
>600	ExpressionStatement	 
>601	CallExpression	P_ActivateInStasisCeiling ( line )
>602	ArgumentList	line
>603	Argument	line
>604	Identifier	line
>605	Callee	P_ActivateInStasisCeiling
>606	Identifier	P_ActivateInStasisCeiling
>607	Label	 
>608	Identifier	crushAndRaise
>609	Label	 
>610	Identifier	silentCrushAndRaise
>611	Label	 
>612	Identifier	fastCrushAndRaise
>613	Condition	 
>614	Identifier	type
>615	ExpressionStatement	 
>616	AssignmentExpr	rtn = 0
>617	PrimaryExpression	0
>618	Identifier	rtn
>619	ExpressionStatement	 
>620	AssignmentExpr	secnum = - 1
>621	UnaryOp	- 1
>622	PrimaryExpression	1
>623	UnaryOperator	-
>624	Identifier	secnum
>625	IdentifierDeclStatement	 
>626	IdentifierDecl	* ceiling
>627	Identifier	ceiling
>628	IdentifierDeclType	ceiling_t *
>629	IdentifierDeclStatement	 
>630	IdentifierDecl	* sec
>631	Identifier	sec
>632	IdentifierDeclType	sector_t *
>633	IdentifierDeclStatement	 
>634	IdentifierDecl	rtn
>635	Identifier	rtn
>636	IdentifierDeclType	int
>637	IdentifierDeclStatement	 
>638	IdentifierDecl	secnum
>639	Identifier	secnum
>640	IdentifierDeclType	int
>682	FunctionDef	P_AddActiveCeiling (ceiling_t * c)
>683	ParameterList	ceiling_t * c
>684	Parameter	 
>685	Identifier	c
>686	ParameterType	ceiling_t *
>687	ReturnType	void
>688	CompoundStatement	 
>689	ForStatement	for ( i = 0 ; i < MAXCEILINGS ; i ++ )
>690	CompoundStatement	 
>691	CompoundStatement	 
>692	ReturnStatement	 
>693	ExpressionStatement	 
>694	AssignmentExpr	g -> activeceilings [ i ] = c
>695	Identifier	c
>696	ArrayIndexing	g -> activeceilings [ i ]
>697	Identifier	i
>698	PtrMemberAccess	g -> activeceilings
>699	Identifier	activeceilings
>700	Identifier	g
>701	Statement	 
>702	Statement	 
>703	Statement	 
>704	Statement	 
>705	Statement	 
>706	Statement	 
>707	Statement	 
>708	Statement	 
>709	Statement	 
>710	Statement	 
>711	Statement	 
>712	Statement	 
>713	Statement	 
>714	IncDecOp	 
>715	IncDec	++
>716	Identifier	i
>717	Condition	 
>718	RelationalExpression	i < MAXCEILINGS
>719	Identifier	MAXCEILINGS
>720	Identifier	i
>721	ForInit	 
>722	AssignmentExpr	i = 0
>723	PrimaryExpression	0
>724	Identifier	i
>725	IdentifierDeclStatement	 
>726	IdentifierDecl	i
>727	Identifier	i
>728	IdentifierDeclType	int
>741	FunctionDef	P_RemoveActiveCeiling (ceiling_t * c)
>742	ParameterList	ceiling_t * c
>743	Parameter	 
>744	Identifier	c
>745	ParameterType	ceiling_t *
>746	ReturnType	void
>747	CompoundStatement	 
>748	ForStatement	for ( i = 0 ; i < MAXCEILINGS ; i ++ )
>749	CompoundStatement	 
>750	CompoundStatement	 
>751	BreakStatement	 
>752	ExpressionStatement	 
>753	AssignmentExpr	g -> activeceilings [ i ] = NULL
>754	Identifier	NULL
>755	ArrayIndexing	g -> activeceilings [ i ]
>756	Identifier	i
>757	PtrMemberAccess	g -> activeceilings
>758	Identifier	activeceilings
>759	Identifier	g
>760	Statement	 
>761	ExpressionStatement	 
>762	Statement	 
>763	Statement	 
>764	Statement	 
>765	Statement	 
>766	Statement	 
>767	Statement	 
>768	Statement	 
>769	Statement	 
>770	Statement	 
>771	Statement	 
>772	Statement	 
>773	Statement	 
>774	Statement	 
>775	ExpressionStatement	 
>776	AssignmentExpr	g -> activeceilings [ i ] -> sector -> specialdata = NULL
>777	Identifier	NULL
>778	PtrMemberAccess	g -> activeceilings [ i ] -> sector -> specialdata
>779	Identifier	specialdata
>780	PtrMemberAccess	g -> activeceilings [ i ] -> sector
>781	Identifier	sector
>782	ArrayIndexing	g -> activeceilings [ i ]
>783	Identifier	i
>784	PtrMemberAccess	g -> activeceilings
>785	Identifier	activeceilings
>786	Identifier	g
>787	Statement	 
>788	Statement	 
>789	Statement	 
>790	Statement	 
>791	Statement	 
>792	Statement	 
>793	Statement	 
>794	Statement	 
>795	Statement	 
>796	Statement	 
>797	Statement	 
>798	Statement	 
>799	Statement	 
>800	IncDecOp	 
>801	IncDec	++
>802	Identifier	i
>803	Condition	 
>804	RelationalExpression	i < MAXCEILINGS
>805	Identifier	MAXCEILINGS
>806	Identifier	i
>807	ForInit	 
>808	AssignmentExpr	i = 0
>809	PrimaryExpression	0
>810	Identifier	i
>811	IdentifierDeclStatement	 
>812	IdentifierDecl	i
>813	Identifier	i
>814	IdentifierDeclType	int
>837	FunctionDef	P_ActivateInStasisCeiling (line_t * line)
>838	ParameterList	line_t * line
>839	Parameter	 
>840	Identifier	line
>841	ParameterType	line_t *
>842	ReturnType	void
>843	CompoundStatement	 
>844	ForStatement	for ( i = 0 ; i < MAXCEILINGS ; i ++ )
>845	CompoundStatement	 
>846	CompoundStatement	 
>847	ExpressionStatement	 
>848	AssignmentExpr	g -> activeceilings [ i ] -> thinker . function . acp1 = ( actionf_p1 ) T_MoveCeiling
>849	CastExpression	( actionf_p1 ) T_MoveCeiling
>850	Identifier	T_MoveCeiling
>851	CastTarget	actionf_p1
>852	MemberAccess	g -> activeceilings [ i ] -> thinker . function . acp1
>853	Identifier	acp1
>854	MemberAccess	g -> activeceilings [ i ] -> thinker . function
>855	Identifier	function
>856	PtrMemberAccess	g -> activeceilings [ i ] -> thinker
>857	Identifier	thinker
>858	ArrayIndexing	g -> activeceilings [ i ]
>859	Identifier	i
>860	PtrMemberAccess	g -> activeceilings
>861	Identifier	activeceilings
>862	Identifier	g
>863	Statement	 
>864	ExpressionStatement	 
>865	PtrMemberAccess	g -> activeceilings [ i ] -> olddirection
>866	Identifier	olddirection
>867	ArrayIndexing	g -> activeceilings [ i ]
>868	Identifier	i
>869	PtrMemberAccess	g -> activeceilings
>870	Identifier	activeceilings
>871	Identifier	g
>872	Statement	 
>873	Statement	 
>874	Statement	 
>875	Statement	 
>876	Statement	 
>877	Statement	 
>878	Statement	 
>879	Statement	 
>880	Statement	 
>881	Statement	 
>882	Statement	 
>883	Statement	 
>884	Statement	 
>885	Statement	 
>886	Statement	 
>887	Statement	 
>888	Statement	 
>889	Statement	 
>890	Statement	 
>891	Statement	 
>892	Statement	 
>893	Statement	 
>894	Statement	 
>895	Statement	 
>896	Statement	 
>897	Statement	 
>898	Statement	 
>899	Statement	 
>900	Statement	 
>901	Statement	 
>902	Statement	 
>903	Statement	 
>904	Statement	 
>905	Statement	 
>906	Statement	 
>907	Statement	 
>908	Statement	 
>909	Statement	 
>910	Statement	 
>911	Statement	 
>912	Statement	 
>913	Statement	 
>914	Statement	 
>915	Statement	 
>916	Statement	 
>917	Statement	 
>918	Statement	 
>919	Statement	 
>920	Statement	 
>921	Statement	 
>922	Statement	 
>923	IncDecOp	 
>924	IncDec	++
>925	Identifier	i
>926	Condition	 
>927	RelationalExpression	i < MAXCEILINGS
>928	Identifier	MAXCEILINGS
>929	Identifier	i
>930	ForInit	 
>931	AssignmentExpr	i = 0
>932	PrimaryExpression	0
>933	Identifier	i
>934	IdentifierDeclStatement	 
>935	IdentifierDecl	i
>936	Identifier	i
>937	IdentifierDeclType	int
>957	FunctionDef	EV_CeilingCrushStop (line_t * line)
>958	ParameterList	line_t * line
>959	Parameter	 
>960	Identifier	line
>961	ParameterType	line_t *
>962	ReturnType	int
>963	CompoundStatement	 
>964	ReturnStatement	 
>965	Identifier	rtn
>966	ForStatement	for ( i = 0 ; i < MAXCEILINGS ; i ++ )
>967	CompoundStatement	 
>968	CompoundStatement	 
>969	ExpressionStatement	 
>970	AssignmentExpr	rtn = 1
>971	PrimaryExpression	1
>972	Identifier	rtn
>973	ExpressionStatement	 
>974	AssignmentExpr	g -> activeceilings [ i ] -> direction = 0
>975	PrimaryExpression	0
>976	PtrMemberAccess	g -> activeceilings [ i ] -> direction
>977	Identifier	direction
>978	ArrayIndexing	g -> activeceilings [ i ]
>979	Identifier	i
>980	PtrMemberAccess	g -> activeceilings
>981	Identifier	activeceilings
>982	Identifier	g
>983	Statement	 
>984	ExpressionStatement	 
>985	AssignmentExpr	g -> activeceilings [ i ] -> thinker . function . acv = ( actionf_v ) NULL
>986	CastExpression	( actionf_v ) NULL
>987	Identifier	NULL
>988	CastTarget	actionf_v
>989	MemberAccess	g -> activeceilings [ i ] -> thinker . function . acv
>990	Identifier	acv
>991	MemberAccess	g -> activeceilings [ i ] -> thinker . function
>992	Identifier	function
>993	PtrMemberAccess	g -> activeceilings [ i ] -> thinker
>994	Identifier	thinker
>995	ArrayIndexing	g -> activeceilings [ i ]
>996	Identifier	i
>997	PtrMemberAccess	g -> activeceilings
>998	Identifier	activeceilings
>999	Identifier	g
>1000	Statement	 
>1001	ExpressionStatement	 
>1002	PtrMemberAccess	g -> activeceilings [ i ] -> direction
>1003	Identifier	direction
>1004	ArrayIndexing	g -> activeceilings [ i ]
>1005	Identifier	i
>1006	PtrMemberAccess	g -> activeceilings
>1007	Identifier	activeceilings
>1008	Identifier	g
>1009	Statement	 
>1010	Statement	 
>1011	Statement	 
>1012	Statement	 
>1013	Statement	 
>1014	Statement	 
>1015	Statement	 
>1016	Statement	 
>1017	Statement	 
>1018	Statement	 
>1019	Statement	 
>1020	Statement	 
>1021	Statement	 
>1022	Statement	 
>1023	Statement	 
>1024	Statement	 
>1025	Statement	 
>1026	Statement	 
>1027	Statement	 
>1028	Statement	 
>1029	Statement	 
>1030	Statement	 
>1031	Statement	 
>1032	Statement	 
>1033	Statement	 
>1034	Statement	 
>1035	Statement	 
>1036	Statement	 
>1037	Statement	 
>1038	Statement	 
>1039	Statement	 
>1040	Statement	 
>1041	Statement	 
>1042	Statement	 
>1043	Statement	 
>1044	Statement	 
>1045	Statement	 
>1046	Statement	 
>1047	Statement	 
>1048	Statement	 
>1049	Statement	 
>1050	Statement	 
>1051	Statement	 
>1052	Statement	 
>1053	Statement	 
>1054	Statement	 
>1055	Statement	 
>1056	Statement	 
>1057	Statement	 
>1058	Statement	 
>1059	Statement	 
>1060	IncDecOp	 
>1061	IncDec	++
>1062	Identifier	i
>1063	Condition	 
>1064	RelationalExpression	i < MAXCEILINGS
>1065	Identifier	MAXCEILINGS
>1066	Identifier	i
>1067	ForInit	 
>1068	AssignmentExpr	i = 0
>1069	PrimaryExpression	0
>1070	Identifier	i
>1071	ExpressionStatement	 
>1072	AssignmentExpr	rtn = 0
>1073	PrimaryExpression	0
>1074	Identifier	rtn
>1075	IdentifierDeclStatement	 
>1076	IdentifierDecl	rtn
>1077	Identifier	rtn
>1078	IdentifierDeclType	int
>1079	IdentifierDeclStatement	 
>1080	IdentifierDecl	i
>1081	Identifier	i
>1082	IdentifierDeclType	int
<3=9,8,4
<4=5
<5=7,6
<9=307,10
<10=303,11
<11=302,301,300,273,272,271,270,269,268,267,266,265,264,263,262,261,233,178,177,176,175,174,145,144,143,142,141,140,139,138,137,136,135,134,133,106,13,12
<13=102,46,14
<14=15
<15=16
<16=42,17
<17=18
<18=38,19
<19=36,34,32,24,23,21,20
<21=22
<24=25
<25=29,26
<26=28,27
<29=31,30
<32=33
<34=35
<36=37
<38=39
<39=41,40
<42=43
<43=45,44
<46=47
<47=98,48
<48=96,81,79,73,71,65,64,62,60,53,52,50,49
<50=51
<53=54
<54=58,55
<55=56
<56=57
<58=59
<60=61
<62=63
<65=66
<66=68,67
<68=70,69
<71=72
<73=74
<74=76,75
<76=78,77
<79=80
<81=82
<82=94,83
<83=86,84
<84=85
<86=87
<87=93,88
<88=90,89
<90=92,91
<94=95
<96=97
<98=99
<99=101,100
<102=103
<103=105,104
<106=107
<107=129,108
<108=127,126,124,109
<109=110
<110=122,111
<111=114,112
<112=113
<114=115
<115=121,116
<116=118,117
<118=120,119
<122=123
<124=125
<127=128
<129=130
<130=132,131
<145=146
<146=173,147
<147=171,148
<148=167,163,159,155,153,149
<149=150
<150=152,151
<153=154
<155=156
<156=158,157
<159=160
<160=162,161
<163=164
<164=166,165
<167=168
<168=170,169
<171=172
<178=229,179
<179=180
<180=225,181
<181=223,216,215,213,198,196,194,186,185,183,182
<183=184
<186=187
<187=191,188
<188=190,189
<191=193,192
<194=195
<196=197
<198=199
<199=211,200
<200=203,201
<201=202
<203=204
<204=210,205
<205=207,206
<207=209,208
<211=212
<213=214
<216=217
<217=221,218
<218=219
<219=220
<221=222
<223=224
<225=226
<226=228,227
<229=230
<230=232,231
<233=234
<234=257,235
<235=255,254,252,237,236
<237=238
<238=250,239
<239=242,240
<240=241
<242=243
<243=249,244
<244=246,245
<246=248,247
<250=251
<252=253
<255=256
<257=258
<258=260,259
<273=274
<274=299,275
<275=297,276
<276=293,289,285,283,281,277
<277=278
<278=280,279
<281=282
<283=284
<285=286
<286=288,287
<289=290
<290=292,291
<293=294
<294=296,295
<297=298
<303=304
<304=306,305
<307=308
<308=310,309
<334=343,342,335
<335=339,336
<336=338,337
<339=341,340
<343=637,633,629,625,619,615,595,346,344
<344=345
<346=582,347
<347=581,580,579,578,572,566,562,543,532,526,514,508,502,369,361,355,348
<348=349
<349=353,350
<350=351
<351=352
<353=354
<355=356
<356=358,357
<358=360,359
<361=362
<362=366,363
<363=365,364
<366=368,367
<369=500,370
<370=498,492,484,472,464,456,455,453,451,445,437,435,433,425,412,404,398,397,395,384,378,372,371
<372=373
<373=375,374
<375=377,376
<378=379
<379=381,380
<381=383,382
<384=385
<385=392,386
<386=390,387
<387=388
<388=389
<390=391
<392=394,393
<395=396
<398=399
<399=401,400
<401=403,402
<404=405
<405=409,406
<406=408,407
<409=411,410
<412=421,413
<413=414
<414=418,415
<415=417,416
<418=420,419
<421=422
<422=424,423
<425=426
<426=430,427
<427=429,428
<430=432,431
<433=434
<435=436
<437=438
<438=442,439
<439=441,440
<442=444,443
<445=446
<446=448,447
<448=450,449
<451=452
<453=454
<456=457
<457=461,458
<458=460,459
<461=463,462
<464=465
<465=469,466
<466=468,467
<469=471,470
<472=473
<473=481,474
<474=478,475
<475=477,476
<478=480,479
<481=483,482
<484=485
<485=489,486
<486=488,487
<489=491,490
<492=493
<493=495,494
<495=497,496
<498=499
<500=501
<502=503
<503=505,504
<505=507,506
<508=509
<509=511,510
<511=513,512
<514=515
<515=519,516
<516=518,517
<519=521,520
<521=523,522
<523=525,524
<526=527
<527=529,528
<529=531,530
<532=533
<533=541,534
<534=535
<535=536
<536=540,537
<537=539,538
<541=542
<543=544
<544=561,545
<545=560,546
<546=558,547
<547=552,550,548
<548=549
<550=551
<552=553
<553=557,554
<554=556,555
<558=559
<562=563
<563=565,564
<566=568,567
<568=569
<569=571,570
<572=573
<573=575,574
<575=577,576
<582=583
<583=585,584
<585=594,586
<586=592,587
<587=590,588
<588=589
<590=591
<592=593
<595=613,596
<596=611,609,607,600,598,597
<598=599
<600=601
<601=605,602
<602=603
<603=604
<605=606
<607=608
<609=610
<611=612
<613=614
<615=616
<616=618,617
<619=620
<620=624,621
<621=623,622
<625=626
<626=628,627
<629=630
<630=632,631
<633=634
<634=636,635
<637=638
<638=640,639
<682=688,687,683
<683=684
<684=686,685
<688=725,689
<689=721,717,714,690
<690=713,712,711,710,709,708,707,706,705,704,703,702,691
<691=701,693,692
<693=694
<694=696,695
<696=698,697
<698=700,699
<714=716,715
<717=718
<718=720,719
<721=722
<722=724,723
<725=726
<726=728,727
<741=747,746,742
<742=743
<743=745,744
<747=811,748
<748=807,803,800,749
<749=799,798,797,796,795,794,793,792,791,790,789,788,750
<750=787,775,774,773,772,771,770,769,768,767,766,765,764,763,762,761,760,752,751
<752=753
<753=755,754
<755=757,756
<757=759,758
<775=776
<776=778,777
<778=780,779
<780=782,781
<782=784,783
<784=786,785
<800=802,801
<803=804
<804=806,805
<807=808
<808=810,809
<811=812
<812=814,813
<837=843,842,838
<838=839
<839=841,840
<843=934,844
<844=930,926,923,845
<845=922,921,920,919,918,917,916,915,914,913,912,911,910,909,908,907,906,905,904,903,902,901,900,899,898,897,896,895,894,893,892,891,890,889,888,887,886,885,884,883,846
<846=882,881,880,879,878,877,876,875,874,873,872,864,863,847
<847=848
<848=852,849
<849=851,850
<852=854,853
<854=856,855
<856=858,857
<858=860,859
<860=862,861
<864=865
<865=867,866
<867=869,868
<869=871,870
<923=925,924
<926=927
<927=929,928
<930=931
<931=933,932
<934=935
<935=937,936
<957=963,962,958
<958=959
<959=961,960
<963=1079,1075,1071,966,964
<964=965
<966=1067,1063,1060,967
<967=1059,1058,1057,1056,1055,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,1044,1043,1042,1041,1040,1039,1038,1037,1036,1035,1034,1033,1032,1031,1030,1029,1028,1027,1026,1025,1024,1023,1022,1021,1020,968
<968=1019,1018,1017,1016,1015,1014,1013,1012,1011,1010,1009,1001,1000,984,983,973,969
<969=970
<970=972,971
<973=974
<974=976,975
<976=978,977
<978=980,979
<980=982,981
<984=985
<985=989,986
<986=988,987
<989=991,990
<991=993,992
<993=995,994
<995=997,996
<997=999,998
<1001=1002
<1002=1004,1003
<1004=1006,1005
<1006=1008,1007
<1060=1062,1061
<1063=1064
<1064=1066,1065
<1067=1068
<1068=1070,1069
<1071=1072
<1072=1074,1073
<1075=1076
<1076=1078,1077
<1079=1080
<1080=1082,1081
