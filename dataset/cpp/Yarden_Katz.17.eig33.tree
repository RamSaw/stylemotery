>3	FunctionDef	computeRoots (const Matrix & m , Roots & roots)
>4	ParameterList	const Matrix & m , Roots & roots
>5	Parameter	 
>6	Identifier	roots
>7	ParameterType	Roots &
>8	Parameter	 
>9	Identifier	m
>10	ParameterType	const Matrix &
>11	ReturnType	inline void
>12	CompoundStatement	 
>13	IfStatement	if ( roots ( 1 ) >= roots ( 2 ) )
>14	CompoundStatement	 
>15	IfStatement	if ( roots ( 0 ) >= roots ( 1 ) )
>16	ExpressionStatement	 
>17	CallExpression	std 
>18	ArgumentList	roots ( 0 )
>19	Argument	roots ( 1 )
>20	CallExpression	roots ( 1 )
>21	ArgumentList	1
>22	Argument	1
>23	PrimaryExpression	1
>24	Callee	roots
>25	Identifier	roots
>26	Argument	roots ( 0 )
>27	CallExpression	roots ( 0 )
>28	ArgumentList	0
>29	Argument	0
>30	PrimaryExpression	0
>31	Callee	roots
>32	Identifier	roots
>33	Callee	std 
>34	Identifier	std 
>35	Condition	 
>36	RelationalExpression	roots ( 0 ) >= roots ( 1 )
>37	CallExpression	roots ( 1 )
>38	ArgumentList	1
>39	Argument	1
>40	PrimaryExpression	1
>41	Callee	roots
>42	Identifier	roots
>43	CallExpression	roots ( 0 )
>44	ArgumentList	0
>45	Argument	0
>46	PrimaryExpression	0
>47	Callee	roots
>48	Identifier	roots
>49	ExpressionStatement	 
>50	CallExpression	std 
>51	ArgumentList	roots ( 1 )
>52	Argument	roots ( 2 )
>53	CallExpression	roots ( 2 )
>54	ArgumentList	2
>55	Argument	2
>56	PrimaryExpression	2
>57	Callee	roots
>58	Identifier	roots
>59	Argument	roots ( 1 )
>60	CallExpression	roots ( 1 )
>61	ArgumentList	1
>62	Argument	1
>63	PrimaryExpression	1
>64	Callee	roots
>65	Identifier	roots
>66	Callee	std 
>67	Identifier	std 
>68	Condition	 
>69	RelationalExpression	roots ( 1 ) >= roots ( 2 )
>70	CallExpression	roots ( 2 )
>71	ArgumentList	2
>72	Argument	2
>73	PrimaryExpression	2
>74	Callee	roots
>75	Identifier	roots
>76	CallExpression	roots ( 1 )
>77	ArgumentList	1
>78	Argument	1
>79	PrimaryExpression	1
>80	Callee	roots
>81	Identifier	roots
>82	IfStatement	if ( roots ( 0 ) >= roots ( 1 ) )
>83	ExpressionStatement	 
>84	CallExpression	std 
>85	ArgumentList	roots ( 0 )
>86	Argument	roots ( 1 )
>87	CallExpression	roots ( 1 )
>88	ArgumentList	1
>89	Argument	1
>90	PrimaryExpression	1
>91	Callee	roots
>92	Identifier	roots
>93	Argument	roots ( 0 )
>94	CallExpression	roots ( 0 )
>95	ArgumentList	0
>96	Argument	0
>97	PrimaryExpression	0
>98	Callee	roots
>99	Identifier	roots
>100	Callee	std 
>101	Identifier	std 
>102	Condition	 
>103	RelationalExpression	roots ( 0 ) >= roots ( 1 )
>104	CallExpression	roots ( 1 )
>105	ArgumentList	1
>106	Argument	1
>107	PrimaryExpression	1
>108	Callee	roots
>109	Identifier	roots
>110	CallExpression	roots ( 0 )
>111	ArgumentList	0
>112	Argument	0
>113	PrimaryExpression	0
>114	Callee	roots
>115	Identifier	roots
>116	ExpressionStatement	 
>117	AssignmentExpr	roots ( 2 ) = c2_over_3 - rho * ( cos_theta - s_sqrt3 * sin_theta )
>118	AdditiveExpression	c2_over_3 - rho * ( cos_theta - s_sqrt3 * sin_theta )
>119	MultiplicativeExpression	rho * ( cos_theta - s_sqrt3 * sin_theta )
>120	AdditiveExpression	cos_theta - s_sqrt3 * sin_theta
>121	MultiplicativeExpression	s_sqrt3 * sin_theta
>122	Identifier	sin_theta
>123	Identifier	s_sqrt3
>124	Identifier	cos_theta
>125	Identifier	rho
>126	Identifier	c2_over_3
>127	CallExpression	roots ( 2 )
>128	ArgumentList	2
>129	Argument	2
>130	PrimaryExpression	2
>131	Callee	roots
>132	Identifier	roots
>133	ExpressionStatement	 
>134	AssignmentExpr	roots ( 1 ) = c2_over_3 - rho * ( cos_theta + s_sqrt3 * sin_theta )
>135	AdditiveExpression	c2_over_3 - rho * ( cos_theta + s_sqrt3 * sin_theta )
>136	MultiplicativeExpression	rho * ( cos_theta + s_sqrt3 * sin_theta )
>137	AdditiveExpression	cos_theta + s_sqrt3 * sin_theta
>138	MultiplicativeExpression	s_sqrt3 * sin_theta
>139	Identifier	sin_theta
>140	Identifier	s_sqrt3
>141	Identifier	cos_theta
>142	Identifier	rho
>143	Identifier	c2_over_3
>144	CallExpression	roots ( 1 )
>145	ArgumentList	1
>146	Argument	1
>147	PrimaryExpression	1
>148	Callee	roots
>149	Identifier	roots
>150	ExpressionStatement	 
>151	AssignmentExpr	roots ( 0 ) = c2_over_3 + Scalar ( 2 ) * rho * cos_theta
>152	AdditiveExpression	c2_over_3 + Scalar ( 2 ) * rho * cos_theta
>153	MultiplicativeExpression	Scalar ( 2 ) * rho * cos_theta
>154	MultiplicativeExpression	rho * cos_theta
>155	Identifier	cos_theta
>156	Identifier	rho
>157	CallExpression	Scalar ( 2 )
>158	ArgumentList	2
>159	Argument	2
>160	PrimaryExpression	2
>161	Callee	Scalar
>162	Identifier	Scalar
>163	Identifier	c2_over_3
>164	CallExpression	roots ( 0 )
>165	ArgumentList	0
>166	Argument	0
>167	PrimaryExpression	0
>168	Callee	roots
>169	Identifier	roots
>170	IdentifierDeclStatement	 
>171	IdentifierDecl	sin_theta = internal 
>172	AssignmentExpr	sin_theta = internal 
>173	CallExpression	internal 
>174	ArgumentList	theta
>175	Argument	theta
>176	Identifier	theta
>177	Callee	internal 
>178	Identifier	internal 
>179	Identifier	sin_theta
>180	Identifier	sin_theta
>181	IdentifierDeclType	Scalar
>182	IdentifierDeclStatement	 
>183	IdentifierDecl	cos_theta = internal 
>184	AssignmentExpr	cos_theta = internal 
>185	CallExpression	internal 
>186	ArgumentList	theta
>187	Argument	theta
>188	Identifier	theta
>189	Callee	internal 
>190	Identifier	internal 
>191	Identifier	cos_theta
>192	Identifier	cos_theta
>193	IdentifierDeclType	Scalar
>194	IdentifierDeclStatement	 
>195	IdentifierDecl	theta = std 
>196	AssignmentExpr	theta = std 
>197	MultiplicativeExpression	std 
>198	Identifier	s_inv3
>199	CallExpression	std 
>200	ArgumentList	internal 
>201	Argument	half_b
>202	Identifier	half_b
>203	Argument	internal 
>204	CallExpression	internal 
>205	ArgumentList	- q
>206	Argument	- q
>207	UnaryOp	- q
>208	Identifier	q
>209	UnaryOperator	-
>210	Callee	internal 
>211	Identifier	internal 
>212	Callee	std 
>213	Identifier	std 
>214	Identifier	theta
>215	Identifier	theta
>216	IdentifierDeclType	Scalar
>217	IdentifierDeclStatement	 
>218	IdentifierDecl	rho = internal 
>219	AssignmentExpr	rho = internal 
>220	CallExpression	internal 
>221	ArgumentList	- a_over_3
>222	Argument	- a_over_3
>223	UnaryOp	- a_over_3
>224	Identifier	a_over_3
>225	UnaryOperator	-
>226	Callee	internal 
>227	Identifier	internal 
>228	Identifier	rho
>229	Identifier	rho
>230	IdentifierDeclType	Scalar
>231	IfStatement	if ( q > Scalar ( 0 ) )
>232	ExpressionStatement	 
>233	AssignmentExpr	q = Scalar ( 0 )
>234	CallExpression	Scalar ( 0 )
>235	ArgumentList	0
>236	Argument	0
>237	PrimaryExpression	0
>238	Callee	Scalar
>239	Identifier	Scalar
>240	Identifier	q
>241	Condition	 
>242	RelationalExpression	q > Scalar ( 0 )
>243	CallExpression	Scalar ( 0 )
>244	ArgumentList	0
>245	Argument	0
>246	PrimaryExpression	0
>247	Callee	Scalar
>248	Identifier	Scalar
>249	Identifier	q
>250	IdentifierDeclStatement	 
>251	IdentifierDecl	q = half_b * half_b + a_over_3 * a_over_3 * a_over_3
>252	AssignmentExpr	q = half_b * half_b + a_over_3 * a_over_3 * a_over_3
>253	AdditiveExpression	half_b * half_b + a_over_3 * a_over_3 * a_over_3
>254	MultiplicativeExpression	a_over_3 * a_over_3 * a_over_3
>255	MultiplicativeExpression	a_over_3 * a_over_3
>256	Identifier	a_over_3
>257	Identifier	a_over_3
>258	Identifier	a_over_3
>259	MultiplicativeExpression	half_b * half_b
>260	Identifier	half_b
>261	Identifier	half_b
>262	Identifier	q
>263	Identifier	q
>264	IdentifierDeclType	Scalar
>265	IdentifierDeclStatement	 
>266	IdentifierDecl	half_b = Scalar ( 0.5 ) * ( c0 + c2_over_3 * ( Scalar ( 2 ) * c2_over_3 * c2_over_3 - c1 ) )
>267	AssignmentExpr	half_b = Scalar ( 0.5 ) * ( c0 + c2_over_3 * ( Scalar ( 2 ) * c2_over_3 * c2_over_3 - c1 ) )
>268	MultiplicativeExpression	Scalar ( 0.5 ) * ( c0 + c2_over_3 * ( Scalar ( 2 ) * c2_over_3 * c2_over_3 - c1 ) )
>269	AdditiveExpression	c0 + c2_over_3 * ( Scalar ( 2 ) * c2_over_3 * c2_over_3 - c1 )
>270	MultiplicativeExpression	c2_over_3 * ( Scalar ( 2 ) * c2_over_3 * c2_over_3 - c1 )
>271	AdditiveExpression	Scalar ( 2 ) * c2_over_3 * c2_over_3 - c1
>272	Identifier	c1
>273	MultiplicativeExpression	Scalar ( 2 ) * c2_over_3 * c2_over_3
>274	MultiplicativeExpression	c2_over_3 * c2_over_3
>275	Identifier	c2_over_3
>276	Identifier	c2_over_3
>277	CallExpression	Scalar ( 2 )
>278	ArgumentList	2
>279	Argument	2
>280	PrimaryExpression	2
>281	Callee	Scalar
>282	Identifier	Scalar
>283	Identifier	c2_over_3
>284	Identifier	c0
>285	CallExpression	Scalar ( 0.5 )
>286	ArgumentList	0.5
>287	Argument	0.5
>288	PrimaryExpression	0.5
>289	Callee	Scalar
>290	Identifier	Scalar
>291	Identifier	half_b
>292	Identifier	half_b
>293	IdentifierDeclType	Scalar
>294	IfStatement	if ( a_over_3 > Scalar ( 0 ) )
>295	ExpressionStatement	 
>296	AssignmentExpr	a_over_3 = Scalar ( 0 )
>297	CallExpression	Scalar ( 0 )
>298	ArgumentList	0
>299	Argument	0
>300	PrimaryExpression	0
>301	Callee	Scalar
>302	Identifier	Scalar
>303	Identifier	a_over_3
>304	Condition	 
>305	RelationalExpression	a_over_3 > Scalar ( 0 )
>306	CallExpression	Scalar ( 0 )
>307	ArgumentList	0
>308	Argument	0
>309	PrimaryExpression	0
>310	Callee	Scalar
>311	Identifier	Scalar
>312	Identifier	a_over_3
>313	IdentifierDeclStatement	 
>314	IdentifierDecl	a_over_3 = ( c1 - c2 * c2_over_3 ) * s_inv3
>315	AssignmentExpr	a_over_3 = ( c1 - c2 * c2_over_3 ) * s_inv3
>316	MultiplicativeExpression	( c1 - c2 * c2_over_3 ) * s_inv3
>317	Identifier	s_inv3
>318	AdditiveExpression	c1 - c2 * c2_over_3
>319	MultiplicativeExpression	c2 * c2_over_3
>320	Identifier	c2_over_3
>321	Identifier	c2
>322	Identifier	c1
>323	Identifier	a_over_3
>324	Identifier	a_over_3
>325	IdentifierDeclType	Scalar
>326	IdentifierDeclStatement	 
>327	IdentifierDecl	c2_over_3 = c2 * s_inv3
>328	AssignmentExpr	c2_over_3 = c2 * s_inv3
>329	MultiplicativeExpression	c2 * s_inv3
>330	Identifier	s_inv3
>331	Identifier	c2
>332	Identifier	c2_over_3
>333	Identifier	c2_over_3
>334	IdentifierDeclType	Scalar
>335	IdentifierDeclStatement	 
>336	IdentifierDecl	c2 = m ( 0 , 0 ) + m ( 1 , 1 ) + m ( 2 , 2 )
>337	AssignmentExpr	c2 = m ( 0 , 0 ) + m ( 1 , 1 ) + m ( 2 , 2 )
>338	AdditiveExpression	m ( 0 , 0 ) + m ( 1 , 1 ) + m ( 2 , 2 )
>339	AdditiveExpression	m ( 1 , 1 ) + m ( 2 , 2 )
>340	CallExpression	m ( 2 , 2 )
>341	ArgumentList	2
>342	Argument	2
>343	PrimaryExpression	2
>344	Argument	2
>345	PrimaryExpression	2
>346	Callee	m
>347	Identifier	m
>348	CallExpression	m ( 1 , 1 )
>349	ArgumentList	1
>350	Argument	1
>351	PrimaryExpression	1
>352	Argument	1
>353	PrimaryExpression	1
>354	Callee	m
>355	Identifier	m
>356	CallExpression	m ( 0 , 0 )
>357	ArgumentList	0
>358	Argument	0
>359	PrimaryExpression	0
>360	Argument	0
>361	PrimaryExpression	0
>362	Callee	m
>363	Identifier	m
>364	Identifier	c2
>365	Identifier	c2
>366	IdentifierDeclType	Scalar
>367	IdentifierDeclStatement	 
>368	IdentifierDecl	c1 = m ( 0 , 0 ) * m ( 1 , 1 ) - m ( 0 , 1 ) * m ( 0 , 1 ) + m ( 0 , 0 ) * m ( 2 , 2 ) - m ( 0 , 2 ) * m ( 0 , 2 ) + \
>369	AssignmentExpr	c1 = m ( 0 , 0 ) * m ( 1 , 1 ) - m ( 0 , 1 ) * m ( 0 , 1 ) + m ( 0 , 0 ) * m ( 2 , 2 ) - m ( 0 , 2 ) * \
>370	AdditiveExpression	m ( 0 , 0 ) * m ( 1 , 1 ) - m ( 0 , 1 ) * m ( 0 , 1 ) + m ( 0 , 0 ) * m ( 2 , 2 ) - m ( 0 , 2 ) * m ( \
>371	AdditiveExpression	m ( 0 , 1 ) * m ( 0 , 1 ) + m ( 0 , 0 ) * m ( 2 , 2 ) - m ( 0 , 2 ) * m ( 0 , 2 ) + m ( 1 , 1 ) * m ( \
>372	AdditiveExpression	m ( 0 , 0 ) * m ( 2 , 2 ) - m ( 0 , 2 ) * m ( 0 , 2 ) + m ( 1 , 1 ) * m ( 2 , 2 ) - m ( 1 , 2 ) * m ( \
>373	AdditiveExpression	m ( 0 , 2 ) * m ( 0 , 2 ) + m ( 1 , 1 ) * m ( 2 , 2 ) - m ( 1 , 2 ) * m ( 1 , 2 )
>374	AdditiveExpression	m ( 1 , 1 ) * m ( 2 , 2 ) - m ( 1 , 2 ) * m ( 1 , 2 )
>375	MultiplicativeExpression	m ( 1 , 2 ) * m ( 1 , 2 )
>376	CallExpression	m ( 1 , 2 )
>377	ArgumentList	1
>378	Argument	2
>379	PrimaryExpression	2
>380	Argument	1
>381	PrimaryExpression	1
>382	Callee	m
>383	Identifier	m
>384	CallExpression	m ( 1 , 2 )
>385	ArgumentList	1
>386	Argument	2
>387	PrimaryExpression	2
>388	Argument	1
>389	PrimaryExpression	1
>390	Callee	m
>391	Identifier	m
>392	MultiplicativeExpression	m ( 1 , 1 ) * m ( 2 , 2 )
>393	CallExpression	m ( 2 , 2 )
>394	ArgumentList	2
>395	Argument	2
>396	PrimaryExpression	2
>397	Argument	2
>398	PrimaryExpression	2
>399	Callee	m
>400	Identifier	m
>401	CallExpression	m ( 1 , 1 )
>402	ArgumentList	1
>403	Argument	1
>404	PrimaryExpression	1
>405	Argument	1
>406	PrimaryExpression	1
>407	Callee	m
>408	Identifier	m
>409	MultiplicativeExpression	m ( 0 , 2 ) * m ( 0 , 2 )
>410	CallExpression	m ( 0 , 2 )
>411	ArgumentList	0
>412	Argument	2
>413	PrimaryExpression	2
>414	Argument	0
>415	PrimaryExpression	0
>416	Callee	m
>417	Identifier	m
>418	CallExpression	m ( 0 , 2 )
>419	ArgumentList	0
>420	Argument	2
>421	PrimaryExpression	2
>422	Argument	0
>423	PrimaryExpression	0
>424	Callee	m
>425	Identifier	m
>426	MultiplicativeExpression	m ( 0 , 0 ) * m ( 2 , 2 )
>427	CallExpression	m ( 2 , 2 )
>428	ArgumentList	2
>429	Argument	2
>430	PrimaryExpression	2
>431	Argument	2
>432	PrimaryExpression	2
>433	Callee	m
>434	Identifier	m
>435	CallExpression	m ( 0 , 0 )
>436	ArgumentList	0
>437	Argument	0
>438	PrimaryExpression	0
>439	Argument	0
>440	PrimaryExpression	0
>441	Callee	m
>442	Identifier	m
>443	MultiplicativeExpression	m ( 0 , 1 ) * m ( 0 , 1 )
>444	CallExpression	m ( 0 , 1 )
>445	ArgumentList	0
>446	Argument	1
>447	PrimaryExpression	1
>448	Argument	0
>449	PrimaryExpression	0
>450	Callee	m
>451	Identifier	m
>452	CallExpression	m ( 0 , 1 )
>453	ArgumentList	0
>454	Argument	1
>455	PrimaryExpression	1
>456	Argument	0
>457	PrimaryExpression	0
>458	Callee	m
>459	Identifier	m
>460	MultiplicativeExpression	m ( 0 , 0 ) * m ( 1 , 1 )
>461	CallExpression	m ( 1 , 1 )
>462	ArgumentList	1
>463	Argument	1
>464	PrimaryExpression	1
>465	Argument	1
>466	PrimaryExpression	1
>467	Callee	m
>468	Identifier	m
>469	CallExpression	m ( 0 , 0 )
>470	ArgumentList	0
>471	Argument	0
>472	PrimaryExpression	0
>473	Argument	0
>474	PrimaryExpression	0
>475	Callee	m
>476	Identifier	m
>477	Identifier	c1
>478	Identifier	c1
>479	IdentifierDeclType	Scalar
>480	IdentifierDeclStatement	 
>481	IdentifierDecl	c0 = m ( 0 , 0 ) * m ( 1 , 1 ) * m ( 2 , 2 ) + Scalar ( 2 ) * m ( 0 , 1 ) * m ( 0 , 2 ) * m ( 1 , 2 ) - m ( 0 , \
>482	AssignmentExpr	c0 = m ( 0 , 0 ) * m ( 1 , 1 ) * m ( 2 , 2 ) + Scalar ( 2 ) * m ( 0 , 1 ) * m ( 0 , 2 ) * m ( 1 , 2 ) \
>483	AdditiveExpression	m ( 0 , 0 ) * m ( 1 , 1 ) * m ( 2 , 2 ) + Scalar ( 2 ) * m ( 0 , 1 ) * m ( 0 , 2 ) * m ( 1 , 2 ) - m ( \
>484	AdditiveExpression	Scalar ( 2 ) * m ( 0 , 1 ) * m ( 0 , 2 ) * m ( 1 , 2 ) - m ( 0 , 0 ) * m ( 1 , 2 ) * m ( 1 , 2 ) - m ( \
>485	AdditiveExpression	m ( 0 , 0 ) * m ( 1 , 2 ) * m ( 1 , 2 ) - m ( 1 , 1 ) * m ( 0 , 2 ) * m ( 0 , 2 ) - m ( 2 , 2 ) * m ( \
>486	AdditiveExpression	m ( 1 , 1 ) * m ( 0 , 2 ) * m ( 0 , 2 ) - m ( 2 , 2 ) * m ( 0 , 1 ) * m ( 0 , 1 )
>487	MultiplicativeExpression	m ( 2 , 2 ) * m ( 0 , 1 ) * m ( 0 , 1 )
>488	MultiplicativeExpression	m ( 0 , 1 ) * m ( 0 , 1 )
>489	CallExpression	m ( 0 , 1 )
>490	ArgumentList	0
>491	Argument	1
>492	PrimaryExpression	1
>493	Argument	0
>494	PrimaryExpression	0
>495	Callee	m
>496	Identifier	m
>497	CallExpression	m ( 0 , 1 )
>498	ArgumentList	0
>499	Argument	1
>500	PrimaryExpression	1
>501	Argument	0
>502	PrimaryExpression	0
>503	Callee	m
>504	Identifier	m
>505	CallExpression	m ( 2 , 2 )
>506	ArgumentList	2
>507	Argument	2
>508	PrimaryExpression	2
>509	Argument	2
>510	PrimaryExpression	2
>511	Callee	m
>512	Identifier	m
>513	MultiplicativeExpression	m ( 1 , 1 ) * m ( 0 , 2 ) * m ( 0 , 2 )
>514	MultiplicativeExpression	m ( 0 , 2 ) * m ( 0 , 2 )
>515	CallExpression	m ( 0 , 2 )
>516	ArgumentList	0
>517	Argument	2
>518	PrimaryExpression	2
>519	Argument	0
>520	PrimaryExpression	0
>521	Callee	m
>522	Identifier	m
>523	CallExpression	m ( 0 , 2 )
>524	ArgumentList	0
>525	Argument	2
>526	PrimaryExpression	2
>527	Argument	0
>528	PrimaryExpression	0
>529	Callee	m
>530	Identifier	m
>531	CallExpression	m ( 1 , 1 )
>532	ArgumentList	1
>533	Argument	1
>534	PrimaryExpression	1
>535	Argument	1
>536	PrimaryExpression	1
>537	Callee	m
>538	Identifier	m
>539	MultiplicativeExpression	m ( 0 , 0 ) * m ( 1 , 2 ) * m ( 1 , 2 )
>540	MultiplicativeExpression	m ( 1 , 2 ) * m ( 1 , 2 )
>541	CallExpression	m ( 1 , 2 )
>542	ArgumentList	1
>543	Argument	2
>544	PrimaryExpression	2
>545	Argument	1
>546	PrimaryExpression	1
>547	Callee	m
>548	Identifier	m
>549	CallExpression	m ( 1 , 2 )
>550	ArgumentList	1
>551	Argument	2
>552	PrimaryExpression	2
>553	Argument	1
>554	PrimaryExpression	1
>555	Callee	m
>556	Identifier	m
>557	CallExpression	m ( 0 , 0 )
>558	ArgumentList	0
>559	Argument	0
>560	PrimaryExpression	0
>561	Argument	0
>562	PrimaryExpression	0
>563	Callee	m
>564	Identifier	m
>565	MultiplicativeExpression	Scalar ( 2 ) * m ( 0 , 1 ) * m ( 0 , 2 ) * m ( 1 , 2 )
>566	MultiplicativeExpression	m ( 0 , 1 ) * m ( 0 , 2 ) * m ( 1 , 2 )
>567	MultiplicativeExpression	m ( 0 , 2 ) * m ( 1 , 2 )
>568	CallExpression	m ( 1 , 2 )
>569	ArgumentList	1
>570	Argument	2
>571	PrimaryExpression	2
>572	Argument	1
>573	PrimaryExpression	1
>574	Callee	m
>575	Identifier	m
>576	CallExpression	m ( 0 , 2 )
>577	ArgumentList	0
>578	Argument	2
>579	PrimaryExpression	2
>580	Argument	0
>581	PrimaryExpression	0
>582	Callee	m
>583	Identifier	m
>584	CallExpression	m ( 0 , 1 )
>585	ArgumentList	0
>586	Argument	1
>587	PrimaryExpression	1
>588	Argument	0
>589	PrimaryExpression	0
>590	Callee	m
>591	Identifier	m
>592	CallExpression	Scalar ( 2 )
>593	ArgumentList	2
>594	Argument	2
>595	PrimaryExpression	2
>596	Callee	Scalar
>597	Identifier	Scalar
>598	MultiplicativeExpression	m ( 0 , 0 ) * m ( 1 , 1 ) * m ( 2 , 2 )
>599	MultiplicativeExpression	m ( 1 , 1 ) * m ( 2 , 2 )
>600	CallExpression	m ( 2 , 2 )
>601	ArgumentList	2
>602	Argument	2
>603	PrimaryExpression	2
>604	Argument	2
>605	PrimaryExpression	2
>606	Callee	m
>607	Identifier	m
>608	CallExpression	m ( 1 , 1 )
>609	ArgumentList	1
>610	Argument	1
>611	PrimaryExpression	1
>612	Argument	1
>613	PrimaryExpression	1
>614	Callee	m
>615	Identifier	m
>616	CallExpression	m ( 0 , 0 )
>617	ArgumentList	0
>618	Argument	0
>619	PrimaryExpression	0
>620	Argument	0
>621	PrimaryExpression	0
>622	Callee	m
>623	Identifier	m
>624	Identifier	c0
>625	Identifier	c0
>626	IdentifierDeclType	Scalar
>627	IdentifierDeclStatement	 
>628	IdentifierDecl	s_sqrt3 = internal 
>629	AssignmentExpr	s_sqrt3 = internal 
>630	CallExpression	internal 
>631	ArgumentList	Scalar ( 3.0 )
>632	Argument	Scalar ( 3.0 )
>633	CallExpression	Scalar ( 3.0 )
>634	ArgumentList	3.0
>635	Argument	3.0
>636	PrimaryExpression	3.0
>637	Callee	Scalar
>638	Identifier	Scalar
>639	Callee	internal 
>640	Identifier	internal 
>641	Identifier	s_sqrt3
>642	Identifier	s_sqrt3
>643	IdentifierDeclType	const Scalar
>644	IdentifierDeclStatement	 
>645	IdentifierDecl	s_inv3 = 1.0 / 3.0
>646	AssignmentExpr	s_inv3 = 1.0 / 3.0
>647	MultiplicativeExpression	1.0 / 3.0
>648	PrimaryExpression	3.0
>649	PrimaryExpression	1.0
>650	Identifier	s_inv3
>651	Identifier	s_inv3
>652	IdentifierDeclType	const Scalar
>653	IdentifierDeclStatement	 
>654	IdentifierDecl	Scalar
>655	Identifier	Scalar
>656	IdentifierDeclType	typename Matrix 
>680	FunctionDef	eigen33 (const Matrix & mat , Matrix & evecs , Vector & evals)
>681	ParameterList	const Matrix & mat , Matrix & evecs , Vector & evals
>682	Parameter	 
>683	Identifier	evals
>684	ParameterType	Vector &
>685	Parameter	 
>686	Identifier	evecs
>687	ParameterType	Matrix &
>688	Parameter	 
>689	Identifier	mat
>690	ParameterType	const Matrix &
>691	ReturnType	void
>692	CompoundStatement	 
>693	CompoundStatement	 
>694	ExpressionStatement	 
>695	CallExpression	evecs . setIdentity ( )
>696	ArgumentList	 
>697	Callee	evecs . setIdentity
>698	MemberAccess	evecs . setIdentity
>699	Identifier	setIdentity
>700	Identifier	evecs
>701	Statement	 
>702	Statement	 
>703	Statement	 
>704	Statement	 
>705	Statement	 
>706	Statement	 
>707	Statement	 
>708	Statement	 
>709	Statement	 
>710	Statement	 
>711	Statement	 
>712	Statement	 
>713	Statement	 
>714	Statement	 
>715	Statement	 
>716	Statement	 
>717	Statement	 
>718	Statement	 
>719	Statement	 
>720	Statement	 
>721	Statement	 
>722	Statement	 
>723	Statement	 
>724	Statement	 
>725	Statement	 
>726	ExpressionStatement	 
>727	CallExpression	computeRoots ( scaledMat , evals )
>728	ArgumentList	scaledMat
>729	Argument	evals
>730	Identifier	evals
>731	Argument	scaledMat
>732	Identifier	scaledMat
>733	Callee	computeRoots
>734	Identifier	computeRoots
>735	IdentifierDeclStatement	 
>736	IdentifierDecl	scaledMat = mat / scale
>737	AssignmentExpr	scaledMat = mat / scale
>738	MultiplicativeExpression	mat / scale
>739	Identifier	scale
>740	Identifier	mat
>741	Identifier	scaledMat
>742	Identifier	scaledMat
>743	IdentifierDeclType	Matrix
>744	ExpressionStatement	 
>745	AssignmentExpr	scale = std 
>746	CallExpression	std 
>747	ArgumentList	scale
>748	Argument	Scalar ( 1 )
>749	CallExpression	Scalar ( 1 )
>750	ArgumentList	1
>751	Argument	1
>752	PrimaryExpression	1
>753	Callee	Scalar
>754	Identifier	Scalar
>755	Argument	scale
>756	Identifier	scale
>757	Callee	std 
>758	Identifier	std 
>759	Identifier	scale
>760	IdentifierDeclStatement	 
>761	IdentifierDecl	scale = mat . cwiseAbs ( ) . maxCoeff ( )
>762	AssignmentExpr	scale = mat . cwiseAbs ( ) . maxCoeff ( )
>763	CallExpression	mat . cwiseAbs ( ) . maxCoeff ( )
>764	ArgumentList	 
>765	Callee	mat . cwiseAbs ( ) . maxCoeff
>766	MemberAccess	mat . cwiseAbs ( ) . maxCoeff
>767	Identifier	maxCoeff
>768	CallExpression	mat . cwiseAbs ( )
>769	ArgumentList	 
>770	Callee	mat . cwiseAbs
>771	MemberAccess	mat . cwiseAbs
>772	Identifier	cwiseAbs
>773	Identifier	mat
>774	Identifier	scale
>775	Identifier	scale
>776	IdentifierDeclType	Scalar
>777	IdentifierDeclStatement	 
>778	IdentifierDecl	Scalar
>779	Identifier	Scalar
>780	IdentifierDeclType	typename Matrix 
>793	FunctionDef	main ()
>794	ParameterList	 
>795	ReturnType	int
>796	CompoundStatement	 
>797	ExpressionStatement	 
>798	ShiftExpression	std 
>799	ShiftExpression	evecs - eig . eigenvectors ( ) << \"\n\n\"
>800	PrimaryExpression	\"\n\n\"
>801	AdditiveExpression	evecs - eig . eigenvectors ( )
>802	CallExpression	eig . eigenvectors ( )
>803	ArgumentList	 
>804	Callee	eig . eigenvectors
>805	MemberAccess	eig . eigenvectors
>806	Identifier	eigenvectors
>807	Identifier	eig
>808	Identifier	evecs
>809	Identifier	std 
>810	ForStatement	for ( int k = 0 ; k < 3 ; ++ k )
>811	IfStatement	if ( evecs . col ( k ) . dot ( eig . eigenvectors ( ) . col ( k ) ) < 0 )
>812	ExpressionStatement	 
>813	AssignmentExpr	evecs . col ( k ) = - evecs . col ( k )
>814	UnaryOp	- evecs . col ( k )
>815	CallExpression	evecs . col ( k )
>816	ArgumentList	k
>817	Argument	k
>818	Identifier	k
>819	Callee	evecs . col
>820	MemberAccess	evecs . col
>821	Identifier	col
>822	Identifier	evecs
>823	UnaryOperator	-
>824	CallExpression	evecs . col ( k )
>825	ArgumentList	k
>826	Argument	k
>827	Identifier	k
>828	Callee	evecs . col
>829	MemberAccess	evecs . col
>830	Identifier	col
>831	Identifier	evecs
>832	Condition	 
>833	RelationalExpression	evecs . col ( k ) . dot ( eig . eigenvectors ( ) . col ( k ) ) < 0
>834	PrimaryExpression	0
>835	CallExpression	evecs . col ( k ) . dot ( eig . eigenvectors ( ) . col ( k ) )
>836	ArgumentList	eig . eigenvectors ( ) . col ( k )
>837	Argument	eig . eigenvectors ( ) . col ( k )
>838	CallExpression	eig . eigenvectors ( ) . col ( k )
>839	ArgumentList	k
>840	Argument	k
>841	Identifier	k
>842	Callee	eig . eigenvectors ( ) . col
>843	MemberAccess	eig . eigenvectors ( ) . col
>844	Identifier	col
>845	CallExpression	eig . eigenvectors ( )
>846	ArgumentList	 
>847	Callee	eig . eigenvectors
>848	MemberAccess	eig . eigenvectors
>849	Identifier	eigenvectors
>850	Identifier	eig
>851	Callee	evecs . col ( k ) . dot
>852	MemberAccess	evecs . col ( k ) . dot
>853	Identifier	dot
>854	CallExpression	evecs . col ( k )
>855	ArgumentList	k
>856	Argument	k
>857	Identifier	k
>858	Callee	evecs . col
>859	MemberAccess	evecs . col
>860	Identifier	col
>861	Identifier	evecs
>862	UnaryExpression	 
>863	Identifier	k
>864	IncDec	++
>865	Condition	 
>866	RelationalExpression	k < 3
>867	PrimaryExpression	3
>868	Identifier	k
>869	ForInit	 
>870	IdentifierDeclStatement	int k = 0 ;
>871	IdentifierDecl	k = 0
>872	AssignmentExpr	k = 0
>873	PrimaryExpression	0
>874	Identifier	k
>875	Identifier	k
>876	IdentifierDeclType	int
>877	ExpressionStatement	 
>878	ShiftExpression	std 
>879	ShiftExpression	( evals - eig . eigenvalues ( ) ) . transpose ( ) << \"\n\"
>880	PrimaryExpression	\"\n\"
>881	CallExpression	( evals - eig . eigenvalues ( ) ) . transpose ( )
>882	ArgumentList	 
>883	Callee	( evals - eig . eigenvalues ( ) ) . transpose
>884	MemberAccess	( evals - eig . eigenvalues ( ) ) . transpose
>885	Identifier	transpose
>886	AdditiveExpression	evals - eig . eigenvalues ( )
>887	CallExpression	eig . eigenvalues ( )
>888	ArgumentList	 
>889	Callee	eig . eigenvalues
>890	MemberAccess	eig . eigenvalues
>891	Identifier	eigenvalues
>892	Identifier	eig
>893	Identifier	evals
>894	Identifier	std 
>895	ExpressionStatement	 
>896	ShiftExpression	std 
>897	PrimaryExpression	\"Eigenvalue/eigenvector diffs
>898	Identifier	std 
>899	ExpressionStatement	 
>900	ShiftExpression	std 
>901	ShiftExpression	\"Direct
>902	ShiftExpression	t . best ( ) << \"s\n\n\"
>903	PrimaryExpression	\"s\n\n\"
>904	CallExpression	t . best ( )
>905	ArgumentList	 
>906	Callee	t . best
>907	MemberAccess	t . best
>908	Identifier	best
>909	Identifier	t
>910	PrimaryExpression	\"Direct
>911	Identifier	std 
>912	ExpressionStatement	 
>913	CallExpression	BENCH ( t , tries , rep , eigen33 ( A , evecs , evals ) )
>914	ArgumentList	t
>915	Argument	eigen33 ( A , evecs , evals )
>916	CallExpression	eigen33 ( A , evecs , evals )
>917	ArgumentList	A
>918	Argument	evals
>919	Identifier	evals
>920	Argument	evecs
>921	Identifier	evecs
>922	Argument	A
>923	Identifier	A
>924	Callee	eigen33
>925	Identifier	eigen33
>926	Argument	rep
>927	Identifier	rep
>928	Argument	tries
>929	Identifier	tries
>930	Argument	t
>931	Identifier	t
>932	Callee	BENCH
>933	Identifier	BENCH
>934	IdentifierDeclStatement	 
>935	IdentifierDecl	evals
>936	Identifier	evals
>937	IdentifierDeclType	Vec
>938	IdentifierDeclStatement	 
>939	IdentifierDecl	evecs
>940	Identifier	evecs
>941	IdentifierDeclType	Mat
>942	ExpressionStatement	 
>943	ShiftExpression	std 
>944	ShiftExpression	\"Eigen
>945	ShiftExpression	t . best ( ) << \"s\n\"
>946	PrimaryExpression	\"s\n\"
>947	CallExpression	t . best ( )
>948	ArgumentList	 
>949	Callee	t . best
>950	MemberAccess	t . best
>951	Identifier	best
>952	Identifier	t
>953	PrimaryExpression	\"Eigen
>954	Identifier	std 
>955	ExpressionStatement	 
>956	CallExpression	BENCH ( t , tries , rep , eig . compute ( A ) )
>957	ArgumentList	t
>958	Argument	eig . compute ( A )
>959	CallExpression	eig . compute ( A )
>960	ArgumentList	A
>961	Argument	A
>962	Identifier	A
>963	Callee	eig . compute
>964	MemberAccess	eig . compute
>965	Identifier	compute
>966	Identifier	eig
>967	Argument	rep
>968	Identifier	rep
>969	Argument	tries
>970	Identifier	tries
>971	Argument	t
>972	Identifier	t
>973	Callee	BENCH
>974	Identifier	BENCH
>975	IdentifierDeclStatement	 
>976	IdentifierDecl	eig ( A )
>977	Identifier	A
>978	Identifier	eig
>979	IdentifierDeclType	SelfAdjointEigenSolver < Mat >
>980	ExpressionStatement	 
>981	AssignmentExpr	A = A . adjoint ( ) * A
>982	MultiplicativeExpression	A . adjoint ( ) * A
>983	Identifier	A
>984	CallExpression	A . adjoint ( )
>985	ArgumentList	 
>986	Callee	A . adjoint
>987	MemberAccess	A . adjoint
>988	Identifier	adjoint
>989	Identifier	A
>990	Identifier	A
>991	IdentifierDeclStatement	 
>992	IdentifierDecl	A = Mat 
>993	AssignmentExpr	A = Mat 
>994	CallExpression	Mat 
>995	ArgumentList	3
>996	Argument	3
>997	PrimaryExpression	3
>998	Argument	3
>999	PrimaryExpression	3
>1000	Callee	Mat 
>1001	Identifier	Mat 
>1002	Identifier	A
>1003	Identifier	A
>1004	IdentifierDeclType	Mat
>1005	IdentifierDeclStatement	 
>1006	IdentifierDecl	Vec
>1007	Identifier	Vec
>1008	IdentifierDeclType	Vector3f
>1009	IdentifierDeclStatement	 
>1010	IdentifierDecl	Mat
>1011	Identifier	Mat
>1012	IdentifierDeclType	Matrix3f
>1013	IdentifierDeclStatement	 
>1014	IdentifierDecl	rep = 400000
>1015	AssignmentExpr	rep = 400000
>1016	PrimaryExpression	400000
>1017	Identifier	rep
>1018	Identifier	rep
>1019	IdentifierDeclType	int
>1020	IdentifierDeclStatement	 
>1021	IdentifierDecl	tries = 10
>1022	AssignmentExpr	tries = 10
>1023	PrimaryExpression	10
>1024	Identifier	tries
>1025	Identifier	tries
>1026	IdentifierDeclType	int
>1027	IdentifierDeclStatement	 
>1028	IdentifierDecl	t
>1029	Identifier	t
>1030	IdentifierDeclType	BenchTimer
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=653,644,627,480,367,335,326,313,294,265,250,231,217,194,182,170,150,133,116,82,13
<13=68,14
<14=49,15
<15=35,16
<16=17
<17=33,18
<18=26,19
<19=20
<20=24,21
<21=22
<22=23
<24=25
<26=27
<27=31,28
<28=29
<29=30
<31=32
<33=34
<35=36
<36=43,37
<37=41,38
<38=39
<39=40
<41=42
<43=47,44
<44=45
<45=46
<47=48
<49=50
<50=66,51
<51=59,52
<52=53
<53=57,54
<54=55
<55=56
<57=58
<59=60
<60=64,61
<61=62
<62=63
<64=65
<66=67
<68=69
<69=76,70
<70=74,71
<71=72
<72=73
<74=75
<76=80,77
<77=78
<78=79
<80=81
<82=102,83
<83=84
<84=100,85
<85=93,86
<86=87
<87=91,88
<88=89
<89=90
<91=92
<93=94
<94=98,95
<95=96
<96=97
<98=99
<100=101
<102=103
<103=110,104
<104=108,105
<105=106
<106=107
<108=109
<110=114,111
<111=112
<112=113
<114=115
<116=117
<117=127,118
<118=126,119
<119=125,120
<120=124,121
<121=123,122
<127=131,128
<128=129
<129=130
<131=132
<133=134
<134=144,135
<135=143,136
<136=142,137
<137=141,138
<138=140,139
<144=148,145
<145=146
<146=147
<148=149
<150=151
<151=164,152
<152=163,153
<153=157,154
<154=156,155
<157=161,158
<158=159
<159=160
<161=162
<164=168,165
<165=166
<166=167
<168=169
<170=171
<171=181,180,172
<172=179,173
<173=177,174
<174=175
<175=176
<177=178
<182=183
<183=193,192,184
<184=191,185
<185=189,186
<186=187
<187=188
<189=190
<194=195
<195=216,215,196
<196=214,197
<197=199,198
<199=212,200
<200=203,201
<201=202
<203=204
<204=210,205
<205=206
<206=207
<207=209,208
<210=211
<212=213
<217=218
<218=230,229,219
<219=228,220
<220=226,221
<221=222
<222=223
<223=225,224
<226=227
<231=241,232
<232=233
<233=240,234
<234=238,235
<235=236
<236=237
<238=239
<241=242
<242=249,243
<243=247,244
<244=245
<245=246
<247=248
<250=251
<251=264,263,252
<252=262,253
<253=259,254
<254=258,255
<255=257,256
<259=261,260
<265=266
<266=293,292,267
<267=291,268
<268=285,269
<269=284,270
<270=283,271
<271=273,272
<273=277,274
<274=276,275
<277=281,278
<278=279
<279=280
<281=282
<285=289,286
<286=287
<287=288
<289=290
<294=304,295
<295=296
<296=303,297
<297=301,298
<298=299
<299=300
<301=302
<304=305
<305=312,306
<306=310,307
<307=308
<308=309
<310=311
<313=314
<314=325,324,315
<315=323,316
<316=318,317
<318=322,319
<319=321,320
<326=327
<327=334,333,328
<328=332,329
<329=331,330
<335=336
<336=366,365,337
<337=364,338
<338=356,339
<339=348,340
<340=346,341
<341=344,342
<342=343
<344=345
<346=347
<348=354,349
<349=352,350
<350=351
<352=353
<354=355
<356=362,357
<357=360,358
<358=359
<360=361
<362=363
<367=368
<368=479,478,369
<369=477,370
<370=460,371
<371=443,372
<372=426,373
<373=409,374
<374=392,375
<375=384,376
<376=382,377
<377=380,378
<378=379
<380=381
<382=383
<384=390,385
<385=388,386
<386=387
<388=389
<390=391
<392=401,393
<393=399,394
<394=397,395
<395=396
<397=398
<399=400
<401=407,402
<402=405,403
<403=404
<405=406
<407=408
<409=418,410
<410=416,411
<411=414,412
<412=413
<414=415
<416=417
<418=424,419
<419=422,420
<420=421
<422=423
<424=425
<426=435,427
<427=433,428
<428=431,429
<429=430
<431=432
<433=434
<435=441,436
<436=439,437
<437=438
<439=440
<441=442
<443=452,444
<444=450,445
<445=448,446
<446=447
<448=449
<450=451
<452=458,453
<453=456,454
<454=455
<456=457
<458=459
<460=469,461
<461=467,462
<462=465,463
<463=464
<465=466
<467=468
<469=475,470
<470=473,471
<471=472
<473=474
<475=476
<480=481
<481=626,625,482
<482=624,483
<483=598,484
<484=565,485
<485=539,486
<486=513,487
<487=505,488
<488=497,489
<489=495,490
<490=493,491
<491=492
<493=494
<495=496
<497=503,498
<498=501,499
<499=500
<501=502
<503=504
<505=511,506
<506=509,507
<507=508
<509=510
<511=512
<513=531,514
<514=523,515
<515=521,516
<516=519,517
<517=518
<519=520
<521=522
<523=529,524
<524=527,525
<525=526
<527=528
<529=530
<531=537,532
<532=535,533
<533=534
<535=536
<537=538
<539=557,540
<540=549,541
<541=547,542
<542=545,543
<543=544
<545=546
<547=548
<549=555,550
<550=553,551
<551=552
<553=554
<555=556
<557=563,558
<558=561,559
<559=560
<561=562
<563=564
<565=592,566
<566=584,567
<567=576,568
<568=574,569
<569=572,570
<570=571
<572=573
<574=575
<576=582,577
<577=580,578
<578=579
<580=581
<582=583
<584=590,585
<585=588,586
<586=587
<588=589
<590=591
<592=596,593
<593=594
<594=595
<596=597
<598=616,599
<599=608,600
<600=606,601
<601=604,602
<602=603
<604=605
<606=607
<608=614,609
<609=612,610
<610=611
<612=613
<614=615
<616=622,617
<617=620,618
<618=619
<620=621
<622=623
<627=628
<628=643,642,629
<629=641,630
<630=639,631
<631=632
<632=633
<633=637,634
<634=635
<635=636
<637=638
<639=640
<644=645
<645=652,651,646
<646=650,647
<647=649,648
<653=654
<654=656,655
<680=692,691,681
<681=688,685,682
<682=684,683
<685=687,686
<688=690,689
<692=777,760,744,735,726,725,724,723,722,721,720,719,718,717,716,715,714,713,712,711,710,709,708,707,706,705,704,703,702,701,693
<693=694
<694=695
<695=697,696
<697=698
<698=700,699
<726=727
<727=733,728
<728=731,729
<729=730
<731=732
<733=734
<735=736
<736=743,742,737
<737=741,738
<738=740,739
<744=745
<745=759,746
<746=757,747
<747=755,748
<748=749
<749=753,750
<750=751
<751=752
<753=754
<755=756
<757=758
<760=761
<761=776,775,762
<762=774,763
<763=765,764
<765=766
<766=768,767
<768=770,769
<770=771
<771=773,772
<777=778
<778=780,779
<793=796,795,794
<796=1027,1020,1013,1009,1005,991,980,975,955,942,938,934,912,899,895,877,810,797
<797=798
<798=809,799
<799=801,800
<801=808,802
<802=804,803
<804=805
<805=807,806
<810=869,865,862,811
<811=832,812
<812=813
<813=824,814
<814=823,815
<815=819,816
<816=817
<817=818
<819=820
<820=822,821
<824=828,825
<825=826
<826=827
<828=829
<829=831,830
<832=833
<833=835,834
<835=851,836
<836=837
<837=838
<838=842,839
<839=840
<840=841
<842=843
<843=845,844
<845=847,846
<847=848
<848=850,849
<851=852
<852=854,853
<854=858,855
<855=856
<856=857
<858=859
<859=861,860
<862=864,863
<865=866
<866=868,867
<869=870
<870=871
<871=876,875,872
<872=874,873
<877=878
<878=894,879
<879=881,880
<881=883,882
<883=884
<884=886,885
<886=893,887
<887=889,888
<889=890
<890=892,891
<895=896
<896=898,897
<899=900
<900=911,901
<901=910,902
<902=904,903
<904=906,905
<906=907
<907=909,908
<912=913
<913=932,914
<914=930,928,926,915
<915=916
<916=924,917
<917=922,920,918
<918=919
<920=921
<922=923
<924=925
<926=927
<928=929
<930=931
<932=933
<934=935
<935=937,936
<938=939
<939=941,940
<942=943
<943=954,944
<944=953,945
<945=947,946
<947=949,948
<949=950
<950=952,951
<955=956
<956=973,957
<957=971,969,967,958
<958=959
<959=963,960
<960=961
<961=962
<963=964
<964=966,965
<967=968
<969=970
<971=972
<973=974
<975=976
<976=979,978,977
<980=981
<981=990,982
<982=984,983
<984=986,985
<986=987
<987=989,988
<991=992
<992=1004,1003,993
<993=1002,994
<994=1000,995
<995=998,996
<996=997
<998=999
<1000=1001
<1005=1006
<1006=1008,1007
<1009=1010
<1010=1012,1011
<1013=1014
<1014=1019,1018,1015
<1015=1017,1016
<1020=1021
<1021=1026,1025,1022
<1022=1024,1023
<1027=1028
<1028=1030,1029
