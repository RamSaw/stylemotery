>3	FunctionDef	TestNode 
>4	ParameterList	const ValueMap & params , Region * region
>5	Parameter	 
>6	Identifier	region
>7	ParameterType	Region *
>8	Parameter	 
>9	Identifier	params
>10	ParameterType	const ValueMap &
>11	CompoundStatement	 
>12	ExpressionStatement	 
>13	AssignmentExpr	iter_ = 0
>14	PrimaryExpression	0
>15	Identifier	iter_
>16	ExpressionStatement	 
>17	AssignmentExpr	delta_ = 1
>18	PrimaryExpression	1
>19	Identifier	delta_
>20	ExpressionStatement	 
>21	AssignmentExpr	outputElementCount_ = 2
>22	PrimaryExpression	2
>23	Identifier	outputElementCount_
>24	ExpressionStatement	 
>25	AssignmentExpr	unclonedInt64ArrayParam_ [ 0 ] = v
>26	Identifier	v
>27	ArrayIndexing	unclonedInt64ArrayParam_ [ 0 ]
>28	PrimaryExpression	0
>29	Identifier	unclonedInt64ArrayParam_
>30	IdentifierDeclStatement	 
>31	IdentifierDecl	v ( 4 , 0 )
>32	Expression	4 , 0
>33	PrimaryExpression	0
>34	PrimaryExpression	4
>35	Identifier	v
>36	IdentifierDeclType	std 
>37	ExpressionStatement	 
>38	CallExpression	unclonedInt64ArrayParam_ . resize ( nodeCount_ )
>39	ArgumentList	nodeCount_
>40	Argument	nodeCount_
>41	Identifier	nodeCount_
>42	Callee	unclonedInt64ArrayParam_ . resize
>43	MemberAccess	unclonedInt64ArrayParam_ . resize
>44	Identifier	resize
>45	Identifier	unclonedInt64ArrayParam_
>46	ExpressionStatement	 
>47	AssignmentExpr	possiblyUnclonedParam_ [ 0 ] = params . getScalarT < UInt32 > ( \"possiblyUnclonedParam\" , 0 )
>48	RelationalExpression	params . getScalarT < UInt32 > ( \"possiblyUnclonedParam\" , 0 )
>49	RelationalExpression	UInt32 > ( \"possiblyUnclonedParam\" , 0 )
>50	Expression	\"possiblyUnclonedParam\" , 0
>51	PrimaryExpression	0
>52	PrimaryExpression	\"possiblyUnclonedParam\"
>53	Identifier	UInt32
>54	MemberAccess	params . getScalarT
>55	Identifier	getScalarT
>56	Identifier	params
>57	ArrayIndexing	possiblyUnclonedParam_ [ 0 ]
>58	PrimaryExpression	0
>59	Identifier	possiblyUnclonedParam_
>60	ExpressionStatement	 
>61	CallExpression	possiblyUnclonedParam_ . resize ( nodeCount_ )
>62	ArgumentList	nodeCount_
>63	Argument	nodeCount_
>64	Identifier	nodeCount_
>65	Callee	possiblyUnclonedParam_ . resize
>66	MemberAccess	possiblyUnclonedParam_ . resize
>67	Identifier	resize
>68	Identifier	possiblyUnclonedParam_
>69	ExpressionStatement	 
>70	AssignmentExpr	unclonedParam_ [ 0 ] = params . getScalarT < UInt32 > ( \"unclonedParam\" , 0 )
>71	RelationalExpression	params . getScalarT < UInt32 > ( \"unclonedParam\" , 0 )
>72	RelationalExpression	UInt32 > ( \"unclonedParam\" , 0 )
>73	Expression	\"unclonedParam\" , 0
>74	PrimaryExpression	0
>75	PrimaryExpression	\"unclonedParam\"
>76	Identifier	UInt32
>77	MemberAccess	params . getScalarT
>78	Identifier	getScalarT
>79	Identifier	params
>80	ArrayIndexing	unclonedParam_ [ 0 ]
>81	PrimaryExpression	0
>82	Identifier	unclonedParam_
>83	ExpressionStatement	 
>84	CallExpression	unclonedParam_ . resize ( nodeCount_ )
>85	ArgumentList	nodeCount_
>86	Argument	nodeCount_
>87	Identifier	nodeCount_
>88	Callee	unclonedParam_ . resize
>89	MemberAccess	unclonedParam_ . resize
>90	Identifier	resize
>91	Identifier	unclonedParam_
>92	ForStatement	for ( size_t i = 0 ; i < 4 ; i ++ )
>93	CompoundStatement	 
>94	ExpressionStatement	 
>95	AssignmentExpr	int64ArrayParam_ [ i ] = i * 64
>96	MultiplicativeExpression	i * 64
>97	PrimaryExpression	64
>98	Identifier	i
>99	ArrayIndexing	int64ArrayParam_ [ i ]
>100	Identifier	i
>101	Identifier	int64ArrayParam_
>102	IncDecOp	 
>103	IncDec	++
>104	Identifier	i
>105	Condition	 
>106	RelationalExpression	i < 4
>107	PrimaryExpression	4
>108	Identifier	i
>109	ForInit	 
>110	IdentifierDeclStatement	size_t i = 0 ;
>111	IdentifierDecl	i = 0
>112	AssignmentExpr	i = 0
>113	PrimaryExpression	0
>114	Identifier	i
>115	Identifier	i
>116	IdentifierDeclType	size_t
>117	ExpressionStatement	 
>118	CallExpression	int64ArrayParam_ . resize ( 4 )
>119	ArgumentList	4
>120	Argument	4
>121	PrimaryExpression	4
>122	Callee	int64ArrayParam_ . resize
>123	MemberAccess	int64ArrayParam_ . resize
>124	Identifier	resize
>125	Identifier	int64ArrayParam_
>126	ForStatement	for ( size_t i = 0 ; i < 8 ; i ++ )
>127	CompoundStatement	 
>128	ExpressionStatement	 
>129	AssignmentExpr	real32ArrayParam_ [ i ] = float ( i * 32 )
>130	CallExpression	float ( i * 32 )
>131	ArgumentList	i * 32
>132	Argument	i * 32
>133	MultiplicativeExpression	i * 32
>134	PrimaryExpression	32
>135	Identifier	i
>136	Callee	float
>137	Identifier	float
>138	ArrayIndexing	real32ArrayParam_ [ i ]
>139	Identifier	i
>140	Identifier	real32ArrayParam_
>141	IncDecOp	 
>142	IncDec	++
>143	Identifier	i
>144	Condition	 
>145	RelationalExpression	i < 8
>146	PrimaryExpression	8
>147	Identifier	i
>148	ForInit	 
>149	IdentifierDeclStatement	size_t i = 0 ;
>150	IdentifierDecl	i = 0
>151	AssignmentExpr	i = 0
>152	PrimaryExpression	0
>153	Identifier	i
>154	Identifier	i
>155	IdentifierDeclType	size_t
>156	ExpressionStatement	 
>157	CallExpression	real32ArrayParam_ . resize ( 8 )
>158	ArgumentList	8
>159	Argument	8
>160	PrimaryExpression	8
>161	Callee	real32ArrayParam_ . resize
>162	MemberAccess	real32ArrayParam_ . resize
>163	Identifier	resize
>164	Identifier	real32ArrayParam_
>165	ExpressionStatement	 
>166	AssignmentExpr	computeCallback_ = NULL
>167	Identifier	NULL
>168	Identifier	computeCallback_
>169	ExpressionStatement	 
>170	AssignmentExpr	stringParam_ = * params . getString ( \"stringParam\" )
>171	UnaryOp	* params . getString ( \"stringParam\" )
>172	CallExpression	params . getString ( \"stringParam\" )
>173	ArgumentList	\"stringParam\"
>174	Argument	\"stringParam\"
>175	PrimaryExpression	\"stringParam\"
>176	Callee	params . getString
>177	MemberAccess	params . getString
>178	Identifier	getString
>179	Identifier	params
>180	UnaryOperator	*
>181	Identifier	stringParam_
>182	ExpressionStatement	 
>183	AssignmentExpr	shouldCloneParam_ = params . getScalarT < UInt32 > ( \"shouldCloneParam\" , 1 ) != 0
>184	EqualityExpression	params . getScalarT < UInt32 > ( \"shouldCloneParam\" , 1 ) != 0
>185	PrimaryExpression	0
>186	RelationalExpression	params . getScalarT < UInt32 > ( \"shouldCloneParam\" , 1 )
>187	RelationalExpression	UInt32 > ( \"shouldCloneParam\" , 1 )
>188	Expression	\"shouldCloneParam\" , 1
>189	PrimaryExpression	1
>190	PrimaryExpression	\"shouldCloneParam\"
>191	Identifier	UInt32
>192	MemberAccess	params . getScalarT
>193	Identifier	getScalarT
>194	Identifier	params
>195	Identifier	shouldCloneParam_
>196	ExpressionStatement	 
>197	AssignmentExpr	real64Param_ = params . getScalarT < Real64 > ( \"real64Param\" , 64.1 )
>198	RelationalExpression	params . getScalarT < Real64 > ( \"real64Param\" , 64.1 )
>199	RelationalExpression	Real64 > ( \"real64Param\" , 64.1 )
>200	Expression	\"real64Param\" , 64.1
>201	PrimaryExpression	64.1
>202	PrimaryExpression	\"real64Param\"
>203	Identifier	Real64
>204	MemberAccess	params . getScalarT
>205	Identifier	getScalarT
>206	Identifier	params
>207	Identifier	real64Param_
>208	ExpressionStatement	 
>209	AssignmentExpr	real32Param_ = params . getScalarT < Real32 > ( \"real32Param\" , 32.1 )
>210	RelationalExpression	params . getScalarT < Real32 > ( \"real32Param\" , 32.1 )
>211	RelationalExpression	Real32 > ( \"real32Param\" , 32.1 )
>212	Expression	\"real32Param\" , 32.1
>213	PrimaryExpression	32.1
>214	PrimaryExpression	\"real32Param\"
>215	Identifier	Real32
>216	MemberAccess	params . getScalarT
>217	Identifier	getScalarT
>218	Identifier	params
>219	Identifier	real32Param_
>220	ExpressionStatement	 
>221	AssignmentExpr	uint64Param_ = params . getScalarT < UInt64 > ( \"uint64Param\" , 65 )
>222	RelationalExpression	params . getScalarT < UInt64 > ( \"uint64Param\" , 65 )
>223	RelationalExpression	UInt64 > ( \"uint64Param\" , 65 )
>224	Expression	\"uint64Param\" , 65
>225	PrimaryExpression	65
>226	PrimaryExpression	\"uint64Param\"
>227	Identifier	UInt64
>228	MemberAccess	params . getScalarT
>229	Identifier	getScalarT
>230	Identifier	params
>231	Identifier	uint64Param_
>232	ExpressionStatement	 
>233	AssignmentExpr	int64Param_ = params . getScalarT < Int64 > ( \"int64Param\" , 64 )
>234	RelationalExpression	params . getScalarT < Int64 > ( \"int64Param\" , 64 )
>235	RelationalExpression	Int64 > ( \"int64Param\" , 64 )
>236	Expression	\"int64Param\" , 64
>237	PrimaryExpression	64
>238	PrimaryExpression	\"int64Param\"
>239	Identifier	Int64
>240	MemberAccess	params . getScalarT
>241	Identifier	getScalarT
>242	Identifier	params
>243	Identifier	int64Param_
>244	ExpressionStatement	 
>245	AssignmentExpr	uint32Param_ = params . getScalarT < UInt32 > ( \"uint32Param\" , 33 )
>246	RelationalExpression	params . getScalarT < UInt32 > ( \"uint32Param\" , 33 )
>247	RelationalExpression	UInt32 > ( \"uint32Param\" , 33 )
>248	Expression	\"uint32Param\" , 33
>249	PrimaryExpression	33
>250	PrimaryExpression	\"uint32Param\"
>251	Identifier	UInt32
>252	MemberAccess	params . getScalarT
>253	Identifier	getScalarT
>254	Identifier	params
>255	Identifier	uint32Param_
>256	ExpressionStatement	 
>257	AssignmentExpr	int32Param_ = params . getScalarT < Int32 > ( \"int32Param\" , 32 )
>258	RelationalExpression	params . getScalarT < Int32 > ( \"int32Param\" , 32 )
>259	RelationalExpression	Int32 > ( \"int32Param\" , 32 )
>260	Expression	\"int32Param\" , 32
>261	PrimaryExpression	32
>262	PrimaryExpression	\"int32Param\"
>263	Identifier	Int32
>264	MemberAccess	params . getScalarT
>265	Identifier	getScalarT
>266	Identifier	params
>267	Identifier	int32Param_
>312	FunctionDef	TestNode 
>313	ParameterList	BundleIO & bundle , Region * region
>314	Parameter	 
>315	Identifier	region
>316	ParameterType	Region *
>317	Parameter	 
>318	Identifier	bundle
>319	ParameterType	BundleIO &
>320	CompoundStatement	 
>321	ExpressionStatement	 
>322	CallExpression	deserialize ( bundle )
>323	ArgumentList	bundle
>324	Argument	bundle
>325	Identifier	bundle
>326	Callee	deserialize
>327	Identifier	deserialize
>333	FunctionDef	TestNode 
>334	ParameterList	 
>335	CompoundStatement	 
>339	FunctionDef	TestNode 
>340	ParameterList	 
>341	ReturnType	void
>342	CompoundStatement	 
>343	ExpressionStatement	 
>344	IncDecOp	iter_ ++
>345	IncDec	++
>346	Identifier	iter_
>347	ForStatement	for ( UInt32 node = 0 ; node < nodeCount_ ; node ++ )
>348	CompoundStatement	 
>349	ForStatement	for ( size_t i = 1 ; i < outputElementCount_ ; i ++ )
>350	ExpressionStatement	 
>351	AssignmentExpr	nodeOutputBuffer [ i ] = node + sum + ( i - 1 ) * delta_
>352	AdditiveExpression	node + sum + ( i - 1 ) * delta_
>353	AdditiveExpression	sum + ( i - 1 ) * delta_
>354	MultiplicativeExpression	( i - 1 ) * delta_
>355	Identifier	delta_
>356	AdditiveExpression	i - 1
>357	PrimaryExpression	1
>358	Identifier	i
>359	Identifier	sum
>360	Identifier	node
>361	ArrayIndexing	nodeOutputBuffer [ i ]
>362	Identifier	i
>363	Identifier	nodeOutputBuffer
>364	IncDecOp	 
>365	IncDec	++
>366	Identifier	i
>367	Condition	 
>368	RelationalExpression	i < outputElementCount_
>369	Identifier	outputElementCount_
>370	Identifier	i
>371	ForInit	 
>372	IdentifierDeclStatement	size_t i = 1 ;
>373	IdentifierDecl	i = 1
>374	AssignmentExpr	i = 1
>375	PrimaryExpression	1
>376	Identifier	i
>377	Identifier	i
>378	IdentifierDeclType	size_t
>379	IdentifierDeclStatement	 
>380	IdentifierDecl	sum = std 
>381	AssignmentExpr	sum = std 
>382	CallExpression	std 
>383	ArgumentList	nodeInput . begin ( )
>384	Argument	0.0
>385	PrimaryExpression	0.0
>386	Argument	nodeInput . end ( )
>387	CallExpression	nodeInput . end ( )
>388	ArgumentList	 
>389	Callee	nodeInput . end
>390	MemberAccess	nodeInput . end
>391	Identifier	end
>392	Identifier	nodeInput
>393	Argument	nodeInput . begin ( )
>394	CallExpression	nodeInput . begin ( )
>395	ArgumentList	 
>396	Callee	nodeInput . begin
>397	MemberAccess	nodeInput . begin
>398	Identifier	begin
>399	Identifier	nodeInput
>400	Callee	std 
>401	Identifier	std 
>402	Identifier	sum
>403	Identifier	sum
>404	IdentifierDeclType	Real64
>405	ExpressionStatement	 
>406	AssignmentExpr	nodeOutputBuffer [ 0 ] = nta 
>407	CallExpression	nta 
>408	ArgumentList	nodeInput . size ( ) + iter_
>409	Argument	nodeInput . size ( ) + iter_
>410	AdditiveExpression	nodeInput . size ( ) + iter_
>411	Identifier	iter_
>412	CallExpression	nodeInput . size ( )
>413	ArgumentList	 
>414	Callee	nodeInput . size
>415	MemberAccess	nodeInput . size
>416	Identifier	size
>417	Identifier	nodeInput
>418	Callee	nta 
>419	Identifier	nta 
>420	ArrayIndexing	nodeOutputBuffer [ 0 ]
>421	PrimaryExpression	0
>422	Identifier	nodeOutputBuffer
>423	ExpressionStatement	 
>424	CallExpression	bottomUpIn_ -> getInputForNode ( node , nodeInput )
>425	ArgumentList	node
>426	Argument	nodeInput
>427	Identifier	nodeInput
>428	Argument	node
>429	Identifier	node
>430	Callee	bottomUpIn_ -> getInputForNode
>431	PtrMemberAccess	bottomUpIn_ -> getInputForNode
>432	Identifier	getInputForNode
>433	Identifier	bottomUpIn_
>434	ExpressionStatement	 
>435	AssignmentExpr	nodeOutputBuffer = baseOutputBuffer + node * outputElementCount_
>436	AdditiveExpression	baseOutputBuffer + node * outputElementCount_
>437	MultiplicativeExpression	node * outputElementCount_
>438	Identifier	outputElementCount_
>439	Identifier	node
>440	Identifier	baseOutputBuffer
>441	Identifier	nodeOutputBuffer
>442	IncDecOp	 
>443	IncDec	++
>444	Identifier	node
>445	Condition	 
>446	RelationalExpression	node < nodeCount_
>447	Identifier	nodeCount_
>448	Identifier	node
>449	ForInit	 
>450	IdentifierDeclStatement	UInt32 node = 0 ;
>451	IdentifierDecl	node = 0
>452	AssignmentExpr	node = 0
>453	PrimaryExpression	0
>454	Identifier	node
>455	Identifier	node
>456	IdentifierDeclType	UInt32
>457	IdentifierDeclStatement	 
>458	IdentifierDecl	* nodeOutputBuffer
>459	Identifier	nodeOutputBuffer
>460	IdentifierDeclType	Real64 *
>461	IdentifierDeclStatement	 
>462	IdentifierDecl	nodeInput
>463	Identifier	nodeInput
>464	IdentifierDeclType	std 
>465	IdentifierDeclStatement	 
>466	IdentifierDecl	* baseOutputBuffer = ( Real64 * ) outputArray . getBuffer ( )
>467	AssignmentExpr	* baseOutputBuffer = ( Real64 * ) outputArray . getBuffer ( )
>468	CastExpression	( Real64 * ) outputArray . getBuffer ( )
>469	CallExpression	outputArray . getBuffer ( )
>470	ArgumentList	 
>471	Callee	outputArray . getBuffer
>472	MemberAccess	outputArray . getBuffer
>473	Identifier	getBuffer
>474	Identifier	outputArray
>475	CastTarget	Real64 *
>476	Identifier	baseOutputBuffer
>477	Identifier	baseOutputBuffer
>478	IdentifierDeclType	Real64 *
>479	ExpressionStatement	 
>480	CallExpression	NTA_CHECK ( outputArray . getType ( ) == NTA_BasicType_Real64 )
>481	ArgumentList	outputArray . getType ( ) == NTA_BasicType_Real64
>482	Argument	outputArray . getType ( ) == NTA_BasicType_Real64
>483	EqualityExpression	outputArray . getType ( ) == NTA_BasicType_Real64
>484	Identifier	NTA_BasicType_Real64
>485	CallExpression	outputArray . getType ( )
>486	ArgumentList	 
>487	Callee	outputArray . getType
>488	MemberAccess	outputArray . getType
>489	Identifier	getType
>490	Identifier	outputArray
>491	Callee	NTA_CHECK
>492	Identifier	NTA_CHECK
>493	ExpressionStatement	 
>494	CallExpression	NTA_CHECK ( outputArray . getCount ( ) == nodeCount_ * outputElementCount_ )
>495	ArgumentList	outputArray . getCount ( ) == nodeCount_ * outputElementCount_
>496	Argument	outputArray . getCount ( ) == nodeCount_ * outputElementCount_
>497	EqualityExpression	outputArray . getCount ( ) == nodeCount_ * outputElementCount_
>498	MultiplicativeExpression	nodeCount_ * outputElementCount_
>499	Identifier	outputElementCount_
>500	Identifier	nodeCount_
>501	CallExpression	outputArray . getCount ( )
>502	ArgumentList	 
>503	Callee	outputArray . getCount
>504	MemberAccess	outputArray . getCount
>505	Identifier	getCount
>506	Identifier	outputArray
>507	Callee	NTA_CHECK
>508	Identifier	NTA_CHECK
>509	IdentifierDeclStatement	 
>510	IdentifierDecl	& outputArray = bottomUpOut_ -> getData ( )
>511	AssignmentExpr	& outputArray = bottomUpOut_ -> getData ( )
>512	CallExpression	bottomUpOut_ -> getData ( )
>513	ArgumentList	 
>514	Callee	bottomUpOut_ -> getData
>515	PtrMemberAccess	bottomUpOut_ -> getData
>516	Identifier	getData
>517	Identifier	bottomUpOut_
>518	Identifier	outputArray
>519	Identifier	outputArray
>520	IdentifierDeclType	const Array &
>521	IfStatement	if ( computeCallback_ != NULL )
>522	ExpressionStatement	 
>523	CallExpression	computeCallback_ ( getName ( ) )
>524	ArgumentList	getName ( )
>525	Argument	getName ( )
>526	CallExpression	getName ( )
>527	ArgumentList	 
>528	Callee	getName
>529	Identifier	getName
>530	Callee	computeCallback_
>531	Identifier	computeCallback_
>532	Condition	 
>533	EqualityExpression	computeCallback_ != NULL
>534	Identifier	NULL
>535	Identifier	computeCallback_
>568	FunctionDef	TestNode 
>569	ParameterList	 
>570	ReturnType	Spec *
>571	CompoundStatement	 
>572	ReturnStatement	 
>573	Identifier	ns
>574	ExpressionStatement	 
>575	CallExpression	ns -> outputs . add ( \"bottomUpOut\" , OutputSpec ( \"Primary output for the node\" , NTA_BasicType_Real64 , 0 , false , \
>576	ArgumentList	\"bottomUpOut\"
>577	Argument	OutputSpec ( \"Primary output for the node\" , NTA_BasicType_Real64 , 0 , false , true )
>578	CallExpression	OutputSpec ( \"Primary output for the node\" , NTA_BasicType_Real64 , 0 , false , true )
>579	ArgumentList	\"Primary output for the node\"
>580	Argument	true
>581	Identifier	true
>582	Argument	false
>583	Identifier	false
>584	Argument	0
>585	PrimaryExpression	0
>586	Argument	NTA_BasicType_Real64
>587	Identifier	NTA_BasicType_Real64
>588	Argument	\"Primary output for the node\"
>589	PrimaryExpression	\"Primary output for the node\"
>590	Callee	OutputSpec
>591	Identifier	OutputSpec
>592	Argument	\"bottomUpOut\"
>593	PrimaryExpression	\"bottomUpOut\"
>594	Callee	ns -> outputs . add
>595	MemberAccess	ns -> outputs . add
>596	Identifier	add
>597	PtrMemberAccess	ns -> outputs
>598	Identifier	outputs
>599	Identifier	ns
>600	ExpressionStatement	 
>601	CallExpression	ns -> inputs . add ( \"bottomUpIn\" , InputSpec ( \"Primary input for the node\" , NTA_BasicType_Real64 , 0 , true , \
>602	ArgumentList	\"bottomUpIn\"
>603	Argument	InputSpec ( \"Primary input for the node\" , NTA_BasicType_Real64 , 0 , true , false , true )
>604	CallExpression	InputSpec ( \"Primary input for the node\" , NTA_BasicType_Real64 , 0 , true , false , true )
>605	ArgumentList	\"Primary input for the node\"
>606	Argument	true
>607	Identifier	true
>608	Argument	false
>609	Identifier	false
>610	Argument	true
>611	Identifier	true
>612	Argument	0
>613	PrimaryExpression	0
>614	Argument	NTA_BasicType_Real64
>615	Identifier	NTA_BasicType_Real64
>616	Argument	\"Primary input for the node\"
>617	PrimaryExpression	\"Primary input for the node\"
>618	Callee	InputSpec
>619	Identifier	InputSpec
>620	Argument	\"bottomUpIn\"
>621	PrimaryExpression	\"bottomUpIn\"
>622	Callee	ns -> inputs . add
>623	MemberAccess	ns -> inputs . add
>624	Identifier	add
>625	PtrMemberAccess	ns -> inputs
>626	Identifier	inputs
>627	Identifier	ns
>628	ExpressionStatement	 
>629	CallExpression	ns -> parameters . add ( \"unclonedInt64ArrayParam\" , ParameterSpec ( \"has a separate array for each node\" , NTA_\
>630	ArgumentList	\"unclonedInt64ArrayParam\"
>631	Argument	ParameterSpec ( \"has a separate array for each node\" , NTA_BasicType_Int64 , 0 , \"\" , \"\" , ParameterSpec 
>632	CallExpression	ParameterSpec ( \"has a separate array for each node\" , NTA_BasicType_Int64 , 0 , \"\" , \"\" , ParameterSpec 
>633	ArgumentList	\"has a separate array for each node\"
>634	Argument	ParameterSpec 
>635	Identifier	ParameterSpec 
>636	Argument	\"\"
>637	PrimaryExpression	\"\"
>638	Argument	\"\"
>639	PrimaryExpression	\"\"
>640	Argument	0
>641	PrimaryExpression	0
>642	Argument	NTA_BasicType_Int64
>643	Identifier	NTA_BasicType_Int64
>644	Argument	\"has a separate array for each node\"
>645	PrimaryExpression	\"has a separate array for each node\"
>646	Callee	ParameterSpec
>647	Identifier	ParameterSpec
>648	Argument	\"unclonedInt64ArrayParam\"
>649	PrimaryExpression	\"unclonedInt64ArrayParam\"
>650	Callee	ns -> parameters . add
>651	MemberAccess	ns -> parameters . add
>652	Identifier	add
>653	PtrMemberAccess	ns -> parameters
>654	Identifier	parameters
>655	Identifier	ns
>656	ExpressionStatement	 
>657	CallExpression	ns -> parameters . add ( \"possiblyUnclonedParam\" , ParameterSpec ( \"cloned if shouldCloneParam is true\" , NTA_BasicType_\
>658	ArgumentList	\"possiblyUnclonedParam\"
>659	Argument	ParameterSpec ( \"cloned if shouldCloneParam is true\" , NTA_BasicType_UInt32 , 1 , \"\" , \"\" , ParameterSpec 
>660	CallExpression	ParameterSpec ( \"cloned if shouldCloneParam is true\" , NTA_BasicType_UInt32 , 1 , \"\" , \"\" , ParameterSpec 
>661	ArgumentList	\"cloned if shouldCloneParam is true\"
>662	Argument	ParameterSpec 
>663	Identifier	ParameterSpec 
>664	Argument	\"\"
>665	PrimaryExpression	\"\"
>666	Argument	\"\"
>667	PrimaryExpression	\"\"
>668	Argument	1
>669	PrimaryExpression	1
>670	Argument	NTA_BasicType_UInt32
>671	Identifier	NTA_BasicType_UInt32
>672	Argument	\"cloned if shouldCloneParam is true\"
>673	PrimaryExpression	\"cloned if shouldCloneParam is true\"
>674	Callee	ParameterSpec
>675	Identifier	ParameterSpec
>676	Argument	\"possiblyUnclonedParam\"
>677	PrimaryExpression	\"possiblyUnclonedParam\"
>678	Callee	ns -> parameters . add
>679	MemberAccess	ns -> parameters . add
>680	Identifier	add
>681	PtrMemberAccess	ns -> parameters
>682	Identifier	parameters
>683	Identifier	ns
>684	ExpressionStatement	 
>685	CallExpression	ns -> parameters . add ( \"shouldCloneParam\" , ParameterSpec ( \"whether possiblyUnclonedParam should clone\" , NTA_\
>686	ArgumentList	\"shouldCloneParam\"
>687	Argument	ParameterSpec ( \"whether possiblyUnclonedParam should clone\" , NTA_BasicType_UInt32 , 1 , \"enum
>688	CallExpression	ParameterSpec ( \"whether possiblyUnclonedParam should clone\" , NTA_BasicType_UInt32 , 1 , \"enum
>689	ArgumentList	\"whether possiblyUnclonedParam should clone\"
>690	Argument	ParameterSpec 
>691	Identifier	ParameterSpec 
>692	Argument	\"1\"
>693	PrimaryExpression	\"1\"
>694	Argument	\"enum
>695	PrimaryExpression	\"enum
>696	Argument	1
>697	PrimaryExpression	1
>698	Argument	NTA_BasicType_UInt32
>699	Identifier	NTA_BasicType_UInt32
>700	Argument	\"whether possiblyUnclonedParam should clone\"
>701	PrimaryExpression	\"whether possiblyUnclonedParam should clone\"
>702	Callee	ParameterSpec
>703	Identifier	ParameterSpec
>704	Argument	\"shouldCloneParam\"
>705	PrimaryExpression	\"shouldCloneParam\"
>706	Callee	ns -> parameters . add
>707	MemberAccess	ns -> parameters . add
>708	Identifier	add
>709	PtrMemberAccess	ns -> parameters
>710	Identifier	parameters
>711	Identifier	ns
>712	ExpressionStatement	 
>713	CallExpression	ns -> parameters . add ( \"unclonedParam\" , ParameterSpec ( \"has a separate value for each node\" , NTA_BasicType_\
>714	ArgumentList	\"unclonedParam\"
>715	Argument	ParameterSpec ( \"has a separate value for each node\" , NTA_BasicType_UInt32 , 1 , \"\" , \"\" , ParameterSpec 
>716	CallExpression	ParameterSpec ( \"has a separate value for each node\" , NTA_BasicType_UInt32 , 1 , \"\" , \"\" , ParameterSpec 
>717	ArgumentList	\"has a separate value for each node\"
>718	Argument	ParameterSpec 
>719	Identifier	ParameterSpec 
>720	Argument	\"\"
>721	PrimaryExpression	\"\"
>722	Argument	\"\"
>723	PrimaryExpression	\"\"
>724	Argument	1
>725	PrimaryExpression	1
>726	Argument	NTA_BasicType_UInt32
>727	Identifier	NTA_BasicType_UInt32
>728	Argument	\"has a separate value for each node\"
>729	PrimaryExpression	\"has a separate value for each node\"
>730	Callee	ParameterSpec
>731	Identifier	ParameterSpec
>732	Argument	\"unclonedParam\"
>733	PrimaryExpression	\"unclonedParam\"
>734	Callee	ns -> parameters . add
>735	MemberAccess	ns -> parameters . add
>736	Identifier	add
>737	PtrMemberAccess	ns -> parameters
>738	Identifier	parameters
>739	Identifier	ns
>740	ExpressionStatement	 
>741	CallExpression	ns -> parameters . add ( \"stringParam\" , ParameterSpec ( \"string parameter\" , NTA_BasicType_Byte , 0 , \"\" , \"nodespec \
>742	ArgumentList	\"stringParam\"
>743	Argument	ParameterSpec ( \"string parameter\" , NTA_BasicType_Byte , 0 , \"\" , \"nodespec value\" , ParameterSpec 
>744	CallExpression	ParameterSpec ( \"string parameter\" , NTA_BasicType_Byte , 0 , \"\" , \"nodespec value\" , ParameterSpec 
>745	ArgumentList	\"string parameter\"
>746	Argument	ParameterSpec 
>747	Identifier	ParameterSpec 
>748	Argument	\"nodespec value\"
>749	PrimaryExpression	\"nodespec value\"
>750	Argument	\"\"
>751	PrimaryExpression	\"\"
>752	Argument	0
>753	PrimaryExpression	0
>754	Argument	NTA_BasicType_Byte
>755	Identifier	NTA_BasicType_Byte
>756	Argument	\"string parameter\"
>757	PrimaryExpression	\"string parameter\"
>758	Callee	ParameterSpec
>759	Identifier	ParameterSpec
>760	Argument	\"stringParam\"
>761	PrimaryExpression	\"stringParam\"
>762	Callee	ns -> parameters . add
>763	MemberAccess	ns -> parameters . add
>764	Identifier	add
>765	PtrMemberAccess	ns -> parameters
>766	Identifier	parameters
>767	Identifier	ns
>768	ExpressionStatement	 
>769	CallExpression	ns -> parameters . add ( \"computeCallback\" , ParameterSpec ( \"address of a function that is called at every compute()\" , \
>770	ArgumentList	\"computeCallback\"
>771	Argument	ParameterSpec ( \"address of a function that is called at every compute()\" , NTA_BasicType_Handle , 1 , \"\" , \"\" , \
>772	CallExpression	ParameterSpec ( \"address of a function that is called at every compute()\" , NTA_BasicType_Handle , 1 , \"\" , \"\" , \
>773	ArgumentList	\"address of a function that is called at every compute()\"
>774	Argument	ParameterSpec 
>775	Identifier	ParameterSpec 
>776	Argument	\"\"
>777	PrimaryExpression	\"\"
>778	Argument	\"\"
>779	PrimaryExpression	\"\"
>780	Argument	1
>781	PrimaryExpression	1
>782	Argument	NTA_BasicType_Handle
>783	Identifier	NTA_BasicType_Handle
>784	Argument	\"address of a function that is called at every compute()\"
>785	PrimaryExpression	\"address of a function that is called at every compute()\"
>786	Callee	ParameterSpec
>787	Identifier	ParameterSpec
>788	Argument	\"computeCallback\"
>789	PrimaryExpression	\"computeCallback\"
>790	Callee	ns -> parameters . add
>791	MemberAccess	ns -> parameters . add
>792	Identifier	add
>793	PtrMemberAccess	ns -> parameters
>794	Identifier	parameters
>795	Identifier	ns
>796	ExpressionStatement	 
>797	CallExpression	ns -> parameters . add ( \"int64ArrayParam\" , ParameterSpec ( \"int64 array parameter\" , NTA_BasicType_Int64 , 0 , \"\" , \"\" , \
>798	ArgumentList	\"int64ArrayParam\"
>799	Argument	ParameterSpec ( \"int64 array parameter\" , NTA_BasicType_Int64 , 0 , \"\" , \"\" , ParameterSpec 
>800	CallExpression	ParameterSpec ( \"int64 array parameter\" , NTA_BasicType_Int64 , 0 , \"\" , \"\" , ParameterSpec 
>801	ArgumentList	\"int64 array parameter\"
>802	Argument	ParameterSpec 
>803	Identifier	ParameterSpec 
>804	Argument	\"\"
>805	PrimaryExpression	\"\"
>806	Argument	\"\"
>807	PrimaryExpression	\"\"
>808	Argument	0
>809	PrimaryExpression	0
>810	Argument	NTA_BasicType_Int64
>811	Identifier	NTA_BasicType_Int64
>812	Argument	\"int64 array parameter\"
>813	PrimaryExpression	\"int64 array parameter\"
>814	Callee	ParameterSpec
>815	Identifier	ParameterSpec
>816	Argument	\"int64ArrayParam\"
>817	PrimaryExpression	\"int64ArrayParam\"
>818	Callee	ns -> parameters . add
>819	MemberAccess	ns -> parameters . add
>820	Identifier	add
>821	PtrMemberAccess	ns -> parameters
>822	Identifier	parameters
>823	Identifier	ns
>824	ExpressionStatement	 
>825	CallExpression	ns -> parameters . add ( \"real32ArrayParam\" , ParameterSpec ( \"int32 array parameter\" , NTA_BasicType_Real32 , 0 , \"\" , \"\" , \
>826	ArgumentList	\"real32ArrayParam\"
>827	Argument	ParameterSpec ( \"int32 array parameter\" , NTA_BasicType_Real32 , 0 , \"\" , \"\" , ParameterSpec 
>828	CallExpression	ParameterSpec ( \"int32 array parameter\" , NTA_BasicType_Real32 , 0 , \"\" , \"\" , ParameterSpec 
>829	ArgumentList	\"int32 array parameter\"
>830	Argument	ParameterSpec 
>831	Identifier	ParameterSpec 
>832	Argument	\"\"
>833	PrimaryExpression	\"\"
>834	Argument	\"\"
>835	PrimaryExpression	\"\"
>836	Argument	0
>837	PrimaryExpression	0
>838	Argument	NTA_BasicType_Real32
>839	Identifier	NTA_BasicType_Real32
>840	Argument	\"int32 array parameter\"
>841	PrimaryExpression	\"int32 array parameter\"
>842	Callee	ParameterSpec
>843	Identifier	ParameterSpec
>844	Argument	\"real32ArrayParam\"
>845	PrimaryExpression	\"real32ArrayParam\"
>846	Callee	ns -> parameters . add
>847	MemberAccess	ns -> parameters . add
>848	Identifier	add
>849	PtrMemberAccess	ns -> parameters
>850	Identifier	parameters
>851	Identifier	ns
>852	ExpressionStatement	 
>853	CallExpression	ns -> parameters . add ( \"real64Param\" , ParameterSpec ( \"Real64 scalar parameter\" , NTA_BasicType_Real64 , 1 , \"\" , \"\
>854	ArgumentList	\"real64Param\"
>855	Argument	ParameterSpec ( \"Real64 scalar parameter\" , NTA_BasicType_Real64 , 1 , \"\" , \"64.1\" , ParameterSpec 
>856	CallExpression	ParameterSpec ( \"Real64 scalar parameter\" , NTA_BasicType_Real64 , 1 , \"\" , \"64.1\" , ParameterSpec 
>857	ArgumentList	\"Real64 scalar parameter\"
>858	Argument	ParameterSpec 
>859	Identifier	ParameterSpec 
>860	Argument	\"64.1\"
>861	PrimaryExpression	\"64.1\"
>862	Argument	\"\"
>863	PrimaryExpression	\"\"
>864	Argument	1
>865	PrimaryExpression	1
>866	Argument	NTA_BasicType_Real64
>867	Identifier	NTA_BasicType_Real64
>868	Argument	\"Real64 scalar parameter\"
>869	PrimaryExpression	\"Real64 scalar parameter\"
>870	Callee	ParameterSpec
>871	Identifier	ParameterSpec
>872	Argument	\"real64Param\"
>873	PrimaryExpression	\"real64Param\"
>874	Callee	ns -> parameters . add
>875	MemberAccess	ns -> parameters . add
>876	Identifier	add
>877	PtrMemberAccess	ns -> parameters
>878	Identifier	parameters
>879	Identifier	ns
>880	ExpressionStatement	 
>881	CallExpression	ns -> parameters . add ( \"real32Param\" , ParameterSpec ( \"Real32 scalar parameter\" , NTA_BasicType_Real32 , 1 , \"\" , \"\
>882	ArgumentList	\"real32Param\"
>883	Argument	ParameterSpec ( \"Real32 scalar parameter\" , NTA_BasicType_Real32 , 1 , \"\" , \"32.1\" , ParameterSpec 
>884	CallExpression	ParameterSpec ( \"Real32 scalar parameter\" , NTA_BasicType_Real32 , 1 , \"\" , \"32.1\" , ParameterSpec 
>885	ArgumentList	\"Real32 scalar parameter\"
>886	Argument	ParameterSpec 
>887	Identifier	ParameterSpec 
>888	Argument	\"32.1\"
>889	PrimaryExpression	\"32.1\"
>890	Argument	\"\"
>891	PrimaryExpression	\"\"
>892	Argument	1
>893	PrimaryExpression	1
>894	Argument	NTA_BasicType_Real32
>895	Identifier	NTA_BasicType_Real32
>896	Argument	\"Real32 scalar parameter\"
>897	PrimaryExpression	\"Real32 scalar parameter\"
>898	Callee	ParameterSpec
>899	Identifier	ParameterSpec
>900	Argument	\"real32Param\"
>901	PrimaryExpression	\"real32Param\"
>902	Callee	ns -> parameters . add
>903	MemberAccess	ns -> parameters . add
>904	Identifier	add
>905	PtrMemberAccess	ns -> parameters
>906	Identifier	parameters
>907	Identifier	ns
>908	ExpressionStatement	 
>909	CallExpression	ns -> parameters . add ( \"uint64Param\" , ParameterSpec ( \"UInt64 scalar parameter\" , NTA_BasicType_UInt64 , 1 , \"\" , \"\
>910	ArgumentList	\"uint64Param\"
>911	Argument	ParameterSpec ( \"UInt64 scalar parameter\" , NTA_BasicType_UInt64 , 1 , \"\" , \"65\" , ParameterSpec 
>912	CallExpression	ParameterSpec ( \"UInt64 scalar parameter\" , NTA_BasicType_UInt64 , 1 , \"\" , \"65\" , ParameterSpec 
>913	ArgumentList	\"UInt64 scalar parameter\"
>914	Argument	ParameterSpec 
>915	Identifier	ParameterSpec 
>916	Argument	\"65\"
>917	PrimaryExpression	\"65\"
>918	Argument	\"\"
>919	PrimaryExpression	\"\"
>920	Argument	1
>921	PrimaryExpression	1
>922	Argument	NTA_BasicType_UInt64
>923	Identifier	NTA_BasicType_UInt64
>924	Argument	\"UInt64 scalar parameter\"
>925	PrimaryExpression	\"UInt64 scalar parameter\"
>926	Callee	ParameterSpec
>927	Identifier	ParameterSpec
>928	Argument	\"uint64Param\"
>929	PrimaryExpression	\"uint64Param\"
>930	Callee	ns -> parameters . add
>931	MemberAccess	ns -> parameters . add
>932	Identifier	add
>933	PtrMemberAccess	ns -> parameters
>934	Identifier	parameters
>935	Identifier	ns
>936	ExpressionStatement	 
>937	CallExpression	ns -> parameters . add ( \"int64Param\" , ParameterSpec ( \"Int64 scalar parameter\" , NTA_BasicType_Int64 , 1 , \"\" , \"\
>938	ArgumentList	\"int64Param\"
>939	Argument	ParameterSpec ( \"Int64 scalar parameter\" , NTA_BasicType_Int64 , 1 , \"\" , \"64\" , ParameterSpec 
>940	CallExpression	ParameterSpec ( \"Int64 scalar parameter\" , NTA_BasicType_Int64 , 1 , \"\" , \"64\" , ParameterSpec 
>941	ArgumentList	\"Int64 scalar parameter\"
>942	Argument	ParameterSpec 
>943	Identifier	ParameterSpec 
>944	Argument	\"64\"
>945	PrimaryExpression	\"64\"
>946	Argument	\"\"
>947	PrimaryExpression	\"\"
>948	Argument	1
>949	PrimaryExpression	1
>950	Argument	NTA_BasicType_Int64
>951	Identifier	NTA_BasicType_Int64
>952	Argument	\"Int64 scalar parameter\"
>953	PrimaryExpression	\"Int64 scalar parameter\"
>954	Callee	ParameterSpec
>955	Identifier	ParameterSpec
>956	Argument	\"int64Param\"
>957	PrimaryExpression	\"int64Param\"
>958	Callee	ns -> parameters . add
>959	MemberAccess	ns -> parameters . add
>960	Identifier	add
>961	PtrMemberAccess	ns -> parameters
>962	Identifier	parameters
>963	Identifier	ns
>964	ExpressionStatement	 
>965	CallExpression	ns -> parameters . add ( \"uint32Param\" , ParameterSpec ( \"UInt32 scalar parameter\" , NTA_BasicType_UInt32 , 1 , \"\" , \"\
>966	ArgumentList	\"uint32Param\"
>967	Argument	ParameterSpec ( \"UInt32 scalar parameter\" , NTA_BasicType_UInt32 , 1 , \"\" , \"33\" , ParameterSpec 
>968	CallExpression	ParameterSpec ( \"UInt32 scalar parameter\" , NTA_BasicType_UInt32 , 1 , \"\" , \"33\" , ParameterSpec 
>969	ArgumentList	\"UInt32 scalar parameter\"
>970	Argument	ParameterSpec 
>971	Identifier	ParameterSpec 
>972	Argument	\"33\"
>973	PrimaryExpression	\"33\"
>974	Argument	\"\"
>975	PrimaryExpression	\"\"
>976	Argument	1
>977	PrimaryExpression	1
>978	Argument	NTA_BasicType_UInt32
>979	Identifier	NTA_BasicType_UInt32
>980	Argument	\"UInt32 scalar parameter\"
>981	PrimaryExpression	\"UInt32 scalar parameter\"
>982	Callee	ParameterSpec
>983	Identifier	ParameterSpec
>984	Argument	\"uint32Param\"
>985	PrimaryExpression	\"uint32Param\"
>986	Callee	ns -> parameters . add
>987	MemberAccess	ns -> parameters . add
>988	Identifier	add
>989	PtrMemberAccess	ns -> parameters
>990	Identifier	parameters
>991	Identifier	ns
>992	ExpressionStatement	 
>993	CallExpression	ns -> parameters . add ( \"int32Param\" , ParameterSpec ( \"Int32 scalar parameter\" , NTA_BasicType_Int32 , 1 , \"\" , \"\
>994	ArgumentList	\"int32Param\"
>995	Argument	ParameterSpec ( \"Int32 scalar parameter\" , NTA_BasicType_Int32 , 1 , \"\" , \"32\" , ParameterSpec 
>996	CallExpression	ParameterSpec ( \"Int32 scalar parameter\" , NTA_BasicType_Int32 , 1 , \"\" , \"32\" , ParameterSpec 
>997	ArgumentList	\"Int32 scalar parameter\"
>998	Argument	ParameterSpec 
>999	Identifier	ParameterSpec 
>1000	Argument	\"32\"
>1001	PrimaryExpression	\"32\"
>1002	Argument	\"\"
>1003	PrimaryExpression	\"\"
>1004	Argument	1
>1005	PrimaryExpression	1
>1006	Argument	NTA_BasicType_Int32
>1007	Identifier	NTA_BasicType_Int32
>1008	Argument	\"Int32 scalar parameter\"
>1009	PrimaryExpression	\"Int32 scalar parameter\"
>1010	Callee	ParameterSpec
>1011	Identifier	ParameterSpec
>1012	Argument	\"int32Param\"
>1013	PrimaryExpression	\"int32Param\"
>1014	Callee	ns -> parameters . add
>1015	MemberAccess	ns -> parameters . add
>1016	Identifier	add
>1017	PtrMemberAccess	ns -> parameters
>1018	Identifier	parameters
>1019	Identifier	ns
>1020	ExpressionStatement	 
>1021	Identifier	Spec
>1022	Statement	 
>1023	Statement	 
>1024	Statement	 
>1025	Statement	 
>1026	Statement	 
>1049	FunctionDef	TestNode 
>1050	ParameterList	const std 
>1051	Parameter	 
>1052	Identifier	index
>1053	ParameterType	Int64
>1054	Parameter	 
>1055	Identifier	name
>1056	ParameterType	const std 
>1057	ReturnType	Real64
>1058	CompoundStatement	 
>1059	IfStatement	if ( name == \"real64Param\" )
>1060	ElseStatement	else
>1061	CompoundStatement	 
>1062	ExpressionStatement	 
>1063	ShiftExpression	NTA_THROW << \"TestNode
>1064	ShiftExpression	\"TestNode
>1065	Identifier	name
>1066	PrimaryExpression	\"TestNode
>1067	Identifier	NTA_THROW
>1068	CompoundStatement	 
>1069	ReturnStatement	 
>1070	Identifier	real64Param_
>1071	Condition	 
>1072	EqualityExpression	name == \"real64Param\"
>1073	PrimaryExpression	\"real64Param\"
>1074	Identifier	name
>1081	FunctionDef	TestNode 
>1082	ParameterList	const std 
>1083	Parameter	 
>1084	Identifier	value
>1085	ParameterType	Real64
>1086	Parameter	 
>1087	Identifier	index
>1088	ParameterType	Int64
>1089	Parameter	 
>1090	Identifier	name
>1091	ParameterType	const std 
>1092	ReturnType	void
>1093	CompoundStatement	 
>1094	IfStatement	if ( name == \"real64Param\" )
>1095	ElseStatement	else
>1096	CompoundStatement	 
>1097	ExpressionStatement	 
>1098	ShiftExpression	NTA_THROW << \"TestNode
>1099	ShiftExpression	\"TestNode
>1100	Identifier	name
>1101	PrimaryExpression	\"TestNode
>1102	Identifier	NTA_THROW
>1103	CompoundStatement	 
>1104	ExpressionStatement	 
>1105	AssignmentExpr	real64Param_ = value
>1106	Identifier	value
>1107	Identifier	real64Param_
>1108	Condition	 
>1109	EqualityExpression	name == \"real64Param\"
>1110	PrimaryExpression	\"real64Param\"
>1111	Identifier	name
>1119	FunctionDef	TestNode 
>1120	ParameterList	const std 
>1121	Parameter	 
>1122	Identifier	value
>1123	ParameterType	IWriteBuffer &
>1124	Parameter	 
>1125	Identifier	index
>1126	ParameterType	Int64
>1127	Parameter	 
>1128	Identifier	name
>1129	ParameterType	const std 
>1130	ReturnType	void
>1131	CompoundStatement	 
>1132	IfStatement	if ( name == \"int32Param\" )
>1133	ElseStatement	else
>1134	IfStatement	if ( name == \"uint32Param\" )
>1135	ElseStatement	else
>1136	IfStatement	if ( name == \"int64Param\" )
>1137	ElseStatement	else
>1138	IfStatement	if ( name == \"uint64Param\" )
>1139	ElseStatement	else
>1140	IfStatement	if ( name == \"real32Param\" )
>1141	ElseStatement	else
>1142	IfStatement	if ( name == \"real64Param\" )
>1143	ElseStatement	else
>1144	IfStatement	if ( name == \"stringParam\" )
>1145	ElseStatement	else
>1146	IfStatement	if ( name == \"int64ArrayParam\" )
>1147	ElseStatement	else
>1148	IfStatement	if ( name == \"real32ArrayParam\" )
>1149	ElseStatement	else
>1150	IfStatement	if ( name == \"unclonedParam\" )
>1151	ElseStatement	else
>1152	IfStatement	if ( name == \"shouldCloneParam\" )
>1153	ElseStatement	else
>1154	IfStatement	if ( name == \"possiblyUnclonedParam\" )
>1155	ElseStatement	else
>1156	IfStatement	if ( name == \"unclonedInt64ArrayParam\" )
>1157	ElseStatement	else
>1158	CompoundStatement	 
>1159	ExpressionStatement	 
>1160	ShiftExpression	NTA_THROW << \"TestNode
>1161	ShiftExpression	\"TestNode
>1162	Identifier	name
>1163	PrimaryExpression	\"TestNode
>1164	Identifier	NTA_THROW
>1165	CompoundStatement	 
>1166	ForStatement	for ( size_t i = 0 ; i < unclonedInt64ArrayParam_ [ nodeIndex ] . size ( ) ; i ++ )
>1167	CompoundStatement	 
>1168	ExpressionStatement	 
>1169	CallExpression	value . write ( unclonedInt64ArrayParam_ [ nodeIndex ] [ i ] )
>1170	ArgumentList	unclonedInt64ArrayParam_ [ nodeIndex ] [ i ]
>1171	Argument	unclonedInt64ArrayParam_ [ nodeIndex ] [ i ]
>1172	ArrayIndexing	unclonedInt64ArrayParam_ [ nodeIndex ] [ i ]
>1173	Identifier	i
>1174	ArrayIndexing	unclonedInt64ArrayParam_ [ nodeIndex ]
>1175	Identifier	nodeIndex
>1176	Identifier	unclonedInt64ArrayParam_
>1177	Callee	value . write
>1178	MemberAccess	value . write
>1179	Identifier	write
>1180	Identifier	value
>1181	IncDecOp	 
>1182	IncDec	++
>1183	Identifier	i
>1184	Condition	 
>1185	RelationalExpression	i < unclonedInt64ArrayParam_ [ nodeIndex ] . size ( )
>1186	CallExpression	unclonedInt64ArrayParam_ [ nodeIndex ] . size ( )
>1187	ArgumentList	 
>1188	Callee	unclonedInt64ArrayParam_ [ nodeIndex ] . size
>1189	MemberAccess	unclonedInt64ArrayParam_ [ nodeIndex ] . size
>1190	Identifier	size
>1191	ArrayIndexing	unclonedInt64ArrayParam_ [ nodeIndex ]
>1192	Identifier	nodeIndex
>1193	Identifier	unclonedInt64ArrayParam_
>1194	Identifier	i
>1195	ForInit	 
>1196	IdentifierDeclStatement	size_t i = 0 ;
>1197	IdentifierDecl	i = 0
>1198	AssignmentExpr	i = 0
>1199	PrimaryExpression	0
>1200	Identifier	i
>1201	Identifier	i
>1202	IdentifierDeclType	size_t
>1203	IdentifierDeclStatement	 
>1204	IdentifierDecl	nodeIndex = ( UInt ) index
>1205	AssignmentExpr	nodeIndex = ( UInt ) index
>1206	CastExpression	( UInt ) index
>1207	Identifier	index
>1208	CastTarget	UInt
>1209	Identifier	nodeIndex
>1210	Identifier	nodeIndex
>1211	IdentifierDeclType	UInt
>1212	IfStatement	if ( index < 0 )
>1213	CompoundStatement	 
>1214	ExpressionStatement	 
>1215	ShiftExpression	NTA_THROW << \"uncloned parameters cannot be accessed at region level\"
>1216	PrimaryExpression	\"uncloned parameters cannot be accessed at region level\"
>1217	Identifier	NTA_THROW
>1218	Condition	 
>1219	RelationalExpression	index < 0
>1220	PrimaryExpression	0
>1221	Identifier	index
>1222	Condition	 
>1223	EqualityExpression	name == \"unclonedInt64ArrayParam\"
>1224	PrimaryExpression	\"unclonedInt64ArrayParam\"
>1225	Identifier	name
>1226	CompoundStatement	 
>1227	IfStatement	if ( shouldCloneParam_ )
>1228	ElseStatement	else
>1229	CompoundStatement	 
>1230	ExpressionStatement	 
>1231	CallExpression	value . write ( possiblyUnclonedParam_ [ ( UInt ) index ] )
>1232	ArgumentList	possiblyUnclonedParam_ [ ( UInt ) index ]
>1233	Argument	possiblyUnclonedParam_ [ ( UInt ) index ]
>1234	ArrayIndexing	possiblyUnclonedParam_ [ ( UInt ) index ]
>1235	CastExpression	( UInt ) index
>1236	Identifier	index
>1237	CastTarget	UInt
>1238	Identifier	possiblyUnclonedParam_
>1239	Callee	value . write
>1240	MemberAccess	value . write
>1241	Identifier	write
>1242	Identifier	value
>1243	IfStatement	if ( index < 0 )
>1244	CompoundStatement	 
>1245	ExpressionStatement	 
>1246	ShiftExpression	NTA_THROW << \"uncloned parameters cannot be accessed at region level\"
>1247	PrimaryExpression	\"uncloned parameters cannot be accessed at region level\"
>1248	Identifier	NTA_THROW
>1249	Condition	 
>1250	RelationalExpression	index < 0
>1251	PrimaryExpression	0
>1252	Identifier	index
>1253	CompoundStatement	 
>1254	ExpressionStatement	 
>1255	CallExpression	value . write ( possiblyUnclonedParam_ [ 0 ] )
>1256	ArgumentList	possiblyUnclonedParam_ [ 0 ]
>1257	Argument	possiblyUnclonedParam_ [ 0 ]
>1258	ArrayIndexing	possiblyUnclonedParam_ [ 0 ]
>1259	PrimaryExpression	0
>1260	Identifier	possiblyUnclonedParam_
>1261	Callee	value . write
>1262	MemberAccess	value . write
>1263	Identifier	write
>1264	Identifier	value
>1265	Condition	 
>1266	Identifier	shouldCloneParam_
>1267	Condition	 
>1268	EqualityExpression	name == \"possiblyUnclonedParam\"
>1269	PrimaryExpression	\"possiblyUnclonedParam\"
>1270	Identifier	name
>1271	CompoundStatement	 
>1272	ExpressionStatement	 
>1273	CallExpression	value . write ( ( UInt32 ) ( shouldCloneParam_ ? 1 
>1274	ArgumentList	( UInt32 ) ( shouldCloneParam_ ? 1 
>1275	Argument	( UInt32 ) ( shouldCloneParam_ ? 1 
>1276	CastExpression	( UInt32 ) ( shouldCloneParam_ ? 1 
>1277	ConditionalExpression	shouldCloneParam_ ? 1 
>1278	PrimaryExpression	0
>1279	PrimaryExpression	1
>1280	Condition	shouldCloneParam_
>1281	Identifier	shouldCloneParam_
>1282	CastTarget	UInt32
>1283	Callee	value . write
>1284	MemberAccess	value . write
>1285	Identifier	write
>1286	Identifier	value
>1287	Condition	 
>1288	EqualityExpression	name == \"shouldCloneParam\"
>1289	PrimaryExpression	\"shouldCloneParam\"
>1290	Identifier	name
>1291	CompoundStatement	 
>1292	ExpressionStatement	 
>1293	CallExpression	value . write ( unclonedParam_ [ ( UInt ) index ] )
>1294	ArgumentList	unclonedParam_ [ ( UInt ) index ]
>1295	Argument	unclonedParam_ [ ( UInt ) index ]
>1296	ArrayIndexing	unclonedParam_ [ ( UInt ) index ]
>1297	CastExpression	( UInt ) index
>1298	Identifier	index
>1299	CastTarget	UInt
>1300	Identifier	unclonedParam_
>1301	Callee	value . write
>1302	MemberAccess	value . write
>1303	Identifier	write
>1304	Identifier	value
>1305	IfStatement	if ( index < 0 )
>1306	CompoundStatement	 
>1307	ExpressionStatement	 
>1308	ShiftExpression	NTA_THROW << \"uncloned parameters cannot be accessed at region level\"
>1309	PrimaryExpression	\"uncloned parameters cannot be accessed at region level\"
>1310	Identifier	NTA_THROW
>1311	Condition	 
>1312	RelationalExpression	index < 0
>1313	PrimaryExpression	0
>1314	Identifier	index
>1315	Condition	 
>1316	EqualityExpression	name == \"unclonedParam\"
>1317	PrimaryExpression	\"unclonedParam\"
>1318	Identifier	name
>1319	CompoundStatement	 
>1320	ForStatement	for ( size_t i = 0 ; i < real32ArrayParam_ . size ( ) ; i ++ )
>1321	CompoundStatement	 
>1322	ExpressionStatement	 
>1323	CallExpression	value . write ( real32ArrayParam_ [ i ] )
>1324	ArgumentList	real32ArrayParam_ [ i ]
>1325	Argument	real32ArrayParam_ [ i ]
>1326	ArrayIndexing	real32ArrayParam_ [ i ]
>1327	Identifier	i
>1328	Identifier	real32ArrayParam_
>1329	Callee	value . write
>1330	MemberAccess	value . write
>1331	Identifier	write
>1332	Identifier	value
>1333	IncDecOp	 
>1334	IncDec	++
>1335	Identifier	i
>1336	Condition	 
>1337	RelationalExpression	i < real32ArrayParam_ . size ( )
>1338	CallExpression	real32ArrayParam_ . size ( )
>1339	ArgumentList	 
>1340	Callee	real32ArrayParam_ . size
>1341	MemberAccess	real32ArrayParam_ . size
>1342	Identifier	size
>1343	Identifier	real32ArrayParam_
>1344	Identifier	i
>1345	ForInit	 
>1346	IdentifierDeclStatement	size_t i = 0 ;
>1347	IdentifierDecl	i = 0
>1348	AssignmentExpr	i = 0
>1349	PrimaryExpression	0
>1350	Identifier	i
>1351	Identifier	i
>1352	IdentifierDeclType	size_t
>1353	Condition	 
>1354	EqualityExpression	name == \"real32ArrayParam\"
>1355	PrimaryExpression	\"real32ArrayParam\"
>1356	Identifier	name
>1357	CompoundStatement	 
>1358	ForStatement	for ( size_t i = 0 ; i < int64ArrayParam_ . size ( ) ; i ++ )
>1359	CompoundStatement	 
>1360	ExpressionStatement	 
>1361	CallExpression	value . write ( int64ArrayParam_ [ i ] )
>1362	ArgumentList	int64ArrayParam_ [ i ]
>1363	Argument	int64ArrayParam_ [ i ]
>1364	ArrayIndexing	int64ArrayParam_ [ i ]
>1365	Identifier	i
>1366	Identifier	int64ArrayParam_
>1367	Callee	value . write
>1368	MemberAccess	value . write
>1369	Identifier	write
>1370	Identifier	value
>1371	IncDecOp	 
>1372	IncDec	++
>1373	Identifier	i
>1374	Condition	 
>1375	RelationalExpression	i < int64ArrayParam_ . size ( )
>1376	CallExpression	int64ArrayParam_ . size ( )
>1377	ArgumentList	 
>1378	Callee	int64ArrayParam_ . size
>1379	MemberAccess	int64ArrayParam_ . size
>1380	Identifier	size
>1381	Identifier	int64ArrayParam_
>1382	Identifier	i
>1383	ForInit	 
>1384	IdentifierDeclStatement	size_t i = 0 ;
>1385	IdentifierDecl	i = 0
>1386	AssignmentExpr	i = 0
>1387	PrimaryExpression	0
>1388	Identifier	i
>1389	Identifier	i
>1390	IdentifierDeclType	size_t
>1391	Condition	 
>1392	EqualityExpression	name == \"int64ArrayParam\"
>1393	PrimaryExpression	\"int64ArrayParam\"
>1394	Identifier	name
>1395	CompoundStatement	 
>1396	ExpressionStatement	 
>1397	CallExpression	value . write ( stringParam_ . c_str ( ) , stringParam_ . size ( ) )
>1398	ArgumentList	stringParam_ . c_str ( )
>1399	Argument	stringParam_ . size ( )
>1400	CallExpression	stringParam_ . size ( )
>1401	ArgumentList	 
>1402	Callee	stringParam_ . size
>1403	MemberAccess	stringParam_ . size
>1404	Identifier	size
>1405	Identifier	stringParam_
>1406	Argument	stringParam_ . c_str ( )
>1407	CallExpression	stringParam_ . c_str ( )
>1408	ArgumentList	 
>1409	Callee	stringParam_ . c_str
>1410	MemberAccess	stringParam_ . c_str
>1411	Identifier	c_str
>1412	Identifier	stringParam_
>1413	Callee	value . write
>1414	MemberAccess	value . write
>1415	Identifier	write
>1416	Identifier	value
>1417	Condition	 
>1418	EqualityExpression	name == \"stringParam\"
>1419	PrimaryExpression	\"stringParam\"
>1420	Identifier	name
>1421	CompoundStatement	 
>1422	ExpressionStatement	 
>1423	CallExpression	value . write ( real64Param_ )
>1424	ArgumentList	real64Param_
>1425	Argument	real64Param_
>1426	Identifier	real64Param_
>1427	Callee	value . write
>1428	MemberAccess	value . write
>1429	Identifier	write
>1430	Identifier	value
>1431	Condition	 
>1432	EqualityExpression	name == \"real64Param\"
>1433	PrimaryExpression	\"real64Param\"
>1434	Identifier	name
>1435	CompoundStatement	 
>1436	ExpressionStatement	 
>1437	CallExpression	value . write ( real32Param_ )
>1438	ArgumentList	real32Param_
>1439	Argument	real32Param_
>1440	Identifier	real32Param_
>1441	Callee	value . write
>1442	MemberAccess	value . write
>1443	Identifier	write
>1444	Identifier	value
>1445	Condition	 
>1446	EqualityExpression	name == \"real32Param\"
>1447	PrimaryExpression	\"real32Param\"
>1448	Identifier	name
>1449	CompoundStatement	 
>1450	ExpressionStatement	 
>1451	CallExpression	value . write ( uint64Param_ )
>1452	ArgumentList	uint64Param_
>1453	Argument	uint64Param_
>1454	Identifier	uint64Param_
>1455	Callee	value . write
>1456	MemberAccess	value . write
>1457	Identifier	write
>1458	Identifier	value
>1459	Condition	 
>1460	EqualityExpression	name == \"uint64Param\"
>1461	PrimaryExpression	\"uint64Param\"
>1462	Identifier	name
>1463	CompoundStatement	 
>1464	ExpressionStatement	 
>1465	CallExpression	value . write ( int64Param_ )
>1466	ArgumentList	int64Param_
>1467	Argument	int64Param_
>1468	Identifier	int64Param_
>1469	Callee	value . write
>1470	MemberAccess	value . write
>1471	Identifier	write
>1472	Identifier	value
>1473	Condition	 
>1474	EqualityExpression	name == \"int64Param\"
>1475	PrimaryExpression	\"int64Param\"
>1476	Identifier	name
>1477	CompoundStatement	 
>1478	ExpressionStatement	 
>1479	CallExpression	value . write ( uint32Param_ )
>1480	ArgumentList	uint32Param_
>1481	Argument	uint32Param_
>1482	Identifier	uint32Param_
>1483	Callee	value . write
>1484	MemberAccess	value . write
>1485	Identifier	write
>1486	Identifier	value
>1487	Condition	 
>1488	EqualityExpression	name == \"uint32Param\"
>1489	PrimaryExpression	\"uint32Param\"
>1490	Identifier	name
>1491	CompoundStatement	 
>1492	ExpressionStatement	 
>1493	CallExpression	value . write ( int32Param_ )
>1494	ArgumentList	int32Param_
>1495	Argument	int32Param_
>1496	Identifier	int32Param_
>1497	Callee	value . write
>1498	MemberAccess	value . write
>1499	Identifier	write
>1500	Identifier	value
>1501	Condition	 
>1502	EqualityExpression	name == \"int32Param\"
>1503	PrimaryExpression	\"int32Param\"
>1504	Identifier	name
>1541	FunctionDef	TestNode 
>1542	ParameterList	const std 
>1543	Parameter	 
>1544	Identifier	value
>1545	ParameterType	IReadBuffer &
>1546	Parameter	 
>1547	Identifier	index
>1548	ParameterType	Int64
>1549	Parameter	 
>1550	Identifier	name
>1551	ParameterType	const std 
>1552	ReturnType	void
>1553	CompoundStatement	 
>1554	IfStatement	if ( name == \"int32Param\" )
>1555	ElseStatement	else
>1556	IfStatement	if ( name == \"uint32Param\" )
>1557	ElseStatement	else
>1558	IfStatement	if ( name == \"int64Param\" )
>1559	ElseStatement	else
>1560	IfStatement	if ( name == \"uint64Param\" )
>1561	ElseStatement	else
>1562	IfStatement	if ( name == \"real32Param\" )
>1563	ElseStatement	else
>1564	IfStatement	if ( name == \"real64Param\" )
>1565	ElseStatement	else
>1566	IfStatement	if ( name == \"stringParam\" )
>1567	ElseStatement	else
>1568	IfStatement	if ( name == \"int64ArrayParam\" )
>1569	ElseStatement	else
>1570	IfStatement	if ( name == \"real32ArrayParam\" )
>1571	ElseStatement	else
>1572	IfStatement	if ( name == \"unclonedParam\" )
>1573	ElseStatement	else
>1574	IfStatement	if ( name == \"shouldCloneParam\" )
>1575	ElseStatement	else
>1576	IfStatement	if ( name == \"possiblyUnclonedParam\" )
>1577	ElseStatement	else
>1578	IfStatement	if ( name == \"unclonedInt64ArrayParam\" )
>1579	ElseStatement	else
>1580	IfStatement	if ( name == \"computeCallback\" )
>1581	ElseStatement	else
>1582	CompoundStatement	 
>1583	ExpressionStatement	 
>1584	ShiftExpression	NTA_THROW << \"TestNode
>1585	ShiftExpression	\"TestNode
>1586	Identifier	name
>1587	PrimaryExpression	\"TestNode
>1588	Identifier	NTA_THROW
>1589	CompoundStatement	 
>1590	ExpressionStatement	 
>1591	AssignmentExpr	computeCallback_ = ( computeCallbackFunc ) ival
>1592	CastExpression	( computeCallbackFunc ) ival
>1593	Identifier	ival
>1594	CastTarget	computeCallbackFunc
>1595	Identifier	computeCallback_
>1596	ExpressionStatement	 
>1597	CallExpression	value . read ( ival )
>1598	ArgumentList	ival
>1599	Argument	ival
>1600	Identifier	ival
>1601	Callee	value . read
>1602	MemberAccess	value . read
>1603	Identifier	read
>1604	Identifier	value
>1605	IdentifierDeclStatement	 
>1606	IdentifierDecl	ival
>1607	Identifier	ival
>1608	IdentifierDeclType	UInt64
>1609	Condition	 
>1610	EqualityExpression	name == \"computeCallback\"
>1611	PrimaryExpression	\"computeCallback\"
>1612	Identifier	name
>1613	CompoundStatement	 
>1614	ForStatement	for ( size_t i = 0 ; i < unclonedInt64ArrayParam_ [ nodeIndex ] . size ( ) ; i ++ )
>1615	CompoundStatement	 
>1616	ExpressionStatement	 
>1617	CallExpression	value . read ( unclonedInt64ArrayParam_ [ nodeIndex ] [ i ] )
>1618	ArgumentList	unclonedInt64ArrayParam_ [ nodeIndex ] [ i ]
>1619	Argument	unclonedInt64ArrayParam_ [ nodeIndex ] [ i ]
>1620	ArrayIndexing	unclonedInt64ArrayParam_ [ nodeIndex ] [ i ]
>1621	Identifier	i
>1622	ArrayIndexing	unclonedInt64ArrayParam_ [ nodeIndex ]
>1623	Identifier	nodeIndex
>1624	Identifier	unclonedInt64ArrayParam_
>1625	Callee	value . read
>1626	MemberAccess	value . read
>1627	Identifier	read
>1628	Identifier	value
>1629	IncDecOp	 
>1630	IncDec	++
>1631	Identifier	i
>1632	Condition	 
>1633	RelationalExpression	i < unclonedInt64ArrayParam_ [ nodeIndex ] . size ( )
>1634	CallExpression	unclonedInt64ArrayParam_ [ nodeIndex ] . size ( )
>1635	ArgumentList	 
>1636	Callee	unclonedInt64ArrayParam_ [ nodeIndex ] . size
>1637	MemberAccess	unclonedInt64ArrayParam_ [ nodeIndex ] . size
>1638	Identifier	size
>1639	ArrayIndexing	unclonedInt64ArrayParam_ [ nodeIndex ]
>1640	Identifier	nodeIndex
>1641	Identifier	unclonedInt64ArrayParam_
>1642	Identifier	i
>1643	ForInit	 
>1644	IdentifierDeclStatement	size_t i = 0 ;
>1645	IdentifierDecl	i = 0
>1646	AssignmentExpr	i = 0
>1647	PrimaryExpression	0
>1648	Identifier	i
>1649	Identifier	i
>1650	IdentifierDeclType	size_t
>1651	IdentifierDeclStatement	 
>1652	IdentifierDecl	nodeIndex = ( UInt ) index
>1653	AssignmentExpr	nodeIndex = ( UInt ) index
>1654	CastExpression	( UInt ) index
>1655	Identifier	index
>1656	CastTarget	UInt
>1657	Identifier	nodeIndex
>1658	Identifier	nodeIndex
>1659	IdentifierDeclType	UInt
>1660	IfStatement	if ( index < 0 )
>1661	CompoundStatement	 
>1662	ExpressionStatement	 
>1663	ShiftExpression	NTA_THROW << \"uncloned parameters cannot be accessed at region level\"
>1664	PrimaryExpression	\"uncloned parameters cannot be accessed at region level\"
>1665	Identifier	NTA_THROW
>1666	Condition	 
>1667	RelationalExpression	index < 0
>1668	PrimaryExpression	0
>1669	Identifier	index
>1670	Condition	 
>1671	EqualityExpression	name == \"unclonedInt64ArrayParam\"
>1672	PrimaryExpression	\"unclonedInt64ArrayParam\"
>1673	Identifier	name
>1674	CompoundStatement	 
>1675	IfStatement	if ( shouldCloneParam_ )
>1676	ElseStatement	else
>1677	CompoundStatement	 
>1678	ExpressionStatement	 
>1679	CallExpression	value . read ( possiblyUnclonedParam_ [ ( UInt ) index ] )
>1680	ArgumentList	possiblyUnclonedParam_ [ ( UInt ) index ]
>1681	Argument	possiblyUnclonedParam_ [ ( UInt ) index ]
>1682	ArrayIndexing	possiblyUnclonedParam_ [ ( UInt ) index ]
>1683	CastExpression	( UInt ) index
>1684	Identifier	index
>1685	CastTarget	UInt
>1686	Identifier	possiblyUnclonedParam_
>1687	Callee	value . read
>1688	MemberAccess	value . read
>1689	Identifier	read
>1690	Identifier	value
>1691	IfStatement	if ( index < 0 )
>1692	CompoundStatement	 
>1693	ExpressionStatement	 
>1694	ShiftExpression	NTA_THROW << \"uncloned parameters cannot be accessed at region level\"
>1695	PrimaryExpression	\"uncloned parameters cannot be accessed at region level\"
>1696	Identifier	NTA_THROW
>1697	Condition	 
>1698	RelationalExpression	index < 0
>1699	PrimaryExpression	0
>1700	Identifier	index
>1701	CompoundStatement	 
>1702	ExpressionStatement	 
>1703	CallExpression	value . read ( possiblyUnclonedParam_ [ 0 ] )
>1704	ArgumentList	possiblyUnclonedParam_ [ 0 ]
>1705	Argument	possiblyUnclonedParam_ [ 0 ]
>1706	ArrayIndexing	possiblyUnclonedParam_ [ 0 ]
>1707	PrimaryExpression	0
>1708	Identifier	possiblyUnclonedParam_
>1709	Callee	value . read
>1710	MemberAccess	value . read
>1711	Identifier	read
>1712	Identifier	value
>1713	Condition	 
>1714	Identifier	shouldCloneParam_
>1715	Condition	 
>1716	EqualityExpression	name == \"possiblyUnclonedParam\"
>1717	PrimaryExpression	\"possiblyUnclonedParam\"
>1718	Identifier	name
>1719	CompoundStatement	 
>1720	ExpressionStatement	 
>1721	AssignmentExpr	shouldCloneParam_ = ( ival ? 1 
>1722	ConditionalExpression	ival ? 1 
>1723	PrimaryExpression	0
>1724	PrimaryExpression	1
>1725	Condition	ival
>1726	Identifier	ival
>1727	Identifier	shouldCloneParam_
>1728	ExpressionStatement	 
>1729	CallExpression	value . read ( ival )
>1730	ArgumentList	ival
>1731	Argument	ival
>1732	Identifier	ival
>1733	Callee	value . read
>1734	MemberAccess	value . read
>1735	Identifier	read
>1736	Identifier	value
>1737	IdentifierDeclStatement	 
>1738	IdentifierDecl	ival
>1739	Identifier	ival
>1740	IdentifierDeclType	UInt64
>1741	Condition	 
>1742	EqualityExpression	name == \"shouldCloneParam\"
>1743	PrimaryExpression	\"shouldCloneParam\"
>1744	Identifier	name
>1745	CompoundStatement	 
>1746	ExpressionStatement	 
>1747	CallExpression	value . read ( unclonedParam_ [ ( UInt ) index ] )
>1748	ArgumentList	unclonedParam_ [ ( UInt ) index ]
>1749	Argument	unclonedParam_ [ ( UInt ) index ]
>1750	ArrayIndexing	unclonedParam_ [ ( UInt ) index ]
>1751	CastExpression	( UInt ) index
>1752	Identifier	index
>1753	CastTarget	UInt
>1754	Identifier	unclonedParam_
>1755	Callee	value . read
>1756	MemberAccess	value . read
>1757	Identifier	read
>1758	Identifier	value
>1759	IfStatement	if ( index < 0 )
>1760	CompoundStatement	 
>1761	ExpressionStatement	 
>1762	ShiftExpression	NTA_THROW << \"uncloned parameters cannot be accessed at region level\"
>1763	PrimaryExpression	\"uncloned parameters cannot be accessed at region level\"
>1764	Identifier	NTA_THROW
>1765	Condition	 
>1766	RelationalExpression	index < 0
>1767	PrimaryExpression	0
>1768	Identifier	index
>1769	Condition	 
>1770	EqualityExpression	name == \"unclonedParam\"
>1771	PrimaryExpression	\"unclonedParam\"
>1772	Identifier	name
>1773	CompoundStatement	 
>1774	ForStatement	for ( size_t i = 0 ; i < real32ArrayParam_ . size ( ) ; i ++ )
>1775	CompoundStatement	 
>1776	ExpressionStatement	 
>1777	CallExpression	value . read ( real32ArrayParam_ [ i ] )
>1778	ArgumentList	real32ArrayParam_ [ i ]
>1779	Argument	real32ArrayParam_ [ i ]
>1780	ArrayIndexing	real32ArrayParam_ [ i ]
>1781	Identifier	i
>1782	Identifier	real32ArrayParam_
>1783	Callee	value . read
>1784	MemberAccess	value . read
>1785	Identifier	read
>1786	Identifier	value
>1787	IncDecOp	 
>1788	IncDec	++
>1789	Identifier	i
>1790	Condition	 
>1791	RelationalExpression	i < real32ArrayParam_ . size ( )
>1792	CallExpression	real32ArrayParam_ . size ( )
>1793	ArgumentList	 
>1794	Callee	real32ArrayParam_ . size
>1795	MemberAccess	real32ArrayParam_ . size
>1796	Identifier	size
>1797	Identifier	real32ArrayParam_
>1798	Identifier	i
>1799	ForInit	 
>1800	IdentifierDeclStatement	size_t i = 0 ;
>1801	IdentifierDecl	i = 0
>1802	AssignmentExpr	i = 0
>1803	PrimaryExpression	0
>1804	Identifier	i
>1805	Identifier	i
>1806	IdentifierDeclType	size_t
>1807	Condition	 
>1808	EqualityExpression	name == \"real32ArrayParam\"
>1809	PrimaryExpression	\"real32ArrayParam\"
>1810	Identifier	name
>1811	CompoundStatement	 
>1812	ForStatement	for ( size_t i = 0 ; i < int64ArrayParam_ . size ( ) ; i ++ )
>1813	CompoundStatement	 
>1814	ExpressionStatement	 
>1815	CallExpression	value . read ( int64ArrayParam_ [ i ] )
>1816	ArgumentList	int64ArrayParam_ [ i ]
>1817	Argument	int64ArrayParam_ [ i ]
>1818	ArrayIndexing	int64ArrayParam_ [ i ]
>1819	Identifier	i
>1820	Identifier	int64ArrayParam_
>1821	Callee	value . read
>1822	MemberAccess	value . read
>1823	Identifier	read
>1824	Identifier	value
>1825	IncDecOp	 
>1826	IncDec	++
>1827	Identifier	i
>1828	Condition	 
>1829	RelationalExpression	i < int64ArrayParam_ . size ( )
>1830	CallExpression	int64ArrayParam_ . size ( )
>1831	ArgumentList	 
>1832	Callee	int64ArrayParam_ . size
>1833	MemberAccess	int64ArrayParam_ . size
>1834	Identifier	size
>1835	Identifier	int64ArrayParam_
>1836	Identifier	i
>1837	ForInit	 
>1838	IdentifierDeclStatement	size_t i = 0 ;
>1839	IdentifierDecl	i = 0
>1840	AssignmentExpr	i = 0
>1841	PrimaryExpression	0
>1842	Identifier	i
>1843	Identifier	i
>1844	IdentifierDeclType	size_t
>1845	Condition	 
>1846	EqualityExpression	name == \"int64ArrayParam\"
>1847	PrimaryExpression	\"int64ArrayParam\"
>1848	Identifier	name
>1849	CompoundStatement	 
>1850	ExpressionStatement	 
>1851	AssignmentExpr	stringParam_ = std 
>1852	CallExpression	std 
>1853	ArgumentList	value . getData ( )
>1854	Argument	value . getSize ( )
>1855	CallExpression	value . getSize ( )
>1856	ArgumentList	 
>1857	Callee	value . getSize
>1858	MemberAccess	value . getSize
>1859	Identifier	getSize
>1860	Identifier	value
>1861	Argument	value . getData ( )
>1862	CallExpression	value . getData ( )
>1863	ArgumentList	 
>1864	Callee	value . getData
>1865	MemberAccess	value . getData
>1866	Identifier	getData
>1867	Identifier	value
>1868	Callee	std 
>1869	Identifier	std 
>1870	Identifier	stringParam_
>1871	Condition	 
>1872	EqualityExpression	name == \"stringParam\"
>1873	PrimaryExpression	\"stringParam\"
>1874	Identifier	name
>1875	CompoundStatement	 
>1876	ExpressionStatement	 
>1877	CallExpression	value . read ( real64Param_ )
>1878	ArgumentList	real64Param_
>1879	Argument	real64Param_
>1880	Identifier	real64Param_
>1881	Callee	value . read
>1882	MemberAccess	value . read
>1883	Identifier	read
>1884	Identifier	value
>1885	Condition	 
>1886	EqualityExpression	name == \"real64Param\"
>1887	PrimaryExpression	\"real64Param\"
>1888	Identifier	name
>1889	CompoundStatement	 
>1890	ExpressionStatement	 
>1891	CallExpression	value . read ( real32Param_ )
>1892	ArgumentList	real32Param_
>1893	Argument	real32Param_
>1894	Identifier	real32Param_
>1895	Callee	value . read
>1896	MemberAccess	value . read
>1897	Identifier	read
>1898	Identifier	value
>1899	Condition	 
>1900	EqualityExpression	name == \"real32Param\"
>1901	PrimaryExpression	\"real32Param\"
>1902	Identifier	name
>1903	CompoundStatement	 
>1904	ExpressionStatement	 
>1905	CallExpression	value . read ( uint64Param_ )
>1906	ArgumentList	uint64Param_
>1907	Argument	uint64Param_
>1908	Identifier	uint64Param_
>1909	Callee	value . read
>1910	MemberAccess	value . read
>1911	Identifier	read
>1912	Identifier	value
>1913	Condition	 
>1914	EqualityExpression	name == \"uint64Param\"
>1915	PrimaryExpression	\"uint64Param\"
>1916	Identifier	name
>1917	CompoundStatement	 
>1918	ExpressionStatement	 
>1919	CallExpression	value . read ( int64Param_ )
>1920	ArgumentList	int64Param_
>1921	Argument	int64Param_
>1922	Identifier	int64Param_
>1923	Callee	value . read
>1924	MemberAccess	value . read
>1925	Identifier	read
>1926	Identifier	value
>1927	Condition	 
>1928	EqualityExpression	name == \"int64Param\"
>1929	PrimaryExpression	\"int64Param\"
>1930	Identifier	name
>1931	CompoundStatement	 
>1932	ExpressionStatement	 
>1933	CallExpression	value . read ( uint32Param_ )
>1934	ArgumentList	uint32Param_
>1935	Argument	uint32Param_
>1936	Identifier	uint32Param_
>1937	Callee	value . read
>1938	MemberAccess	value . read
>1939	Identifier	read
>1940	Identifier	value
>1941	Condition	 
>1942	EqualityExpression	name == \"uint32Param\"
>1943	PrimaryExpression	\"uint32Param\"
>1944	Identifier	name
>1945	CompoundStatement	 
>1946	ExpressionStatement	 
>1947	CallExpression	value . read ( int32Param_ )
>1948	ArgumentList	int32Param_
>1949	Argument	int32Param_
>1950	Identifier	int32Param_
>1951	Callee	value . read
>1952	MemberAccess	value . read
>1953	Identifier	read
>1954	Identifier	value
>1955	Condition	 
>1956	EqualityExpression	name == \"int32Param\"
>1957	PrimaryExpression	\"int32Param\"
>1958	Identifier	name
>1998	FunctionDef	TestNode 
>1999	ParameterList	const std 
>2000	Parameter	 
>2001	Identifier	index
>2002	ParameterType	Int64
>2003	Parameter	 
>2004	Identifier	name
>2005	ParameterType	const std 
>2006	ReturnType	size_t
>2007	CompoundStatement	 
>2008	IfStatement	if ( name == \"int64ArrayParam\" )
>2009	ElseStatement	else
>2010	IfStatement	if ( name == \"real32ArrayParam\" )
>2011	ElseStatement	else
>2012	IfStatement	if ( name == \"unclonedInt64ArrayParam\" )
>2013	ElseStatement	else
>2014	CompoundStatement	 
>2015	ExpressionStatement	 
>2016	ShiftExpression	NTA_THROW << \"TestNode
>2017	ShiftExpression	\"TestNode
>2018	Identifier	name
>2019	PrimaryExpression	\"TestNode
>2020	Identifier	NTA_THROW
>2021	CompoundStatement	 
>2022	ReturnStatement	 
>2023	CallExpression	unclonedInt64ArrayParam_ [ ( UInt ) index ] . size ( )
>2024	ArgumentList	 
>2025	Callee	unclonedInt64ArrayParam_ [ ( UInt ) index ] . size
>2026	MemberAccess	unclonedInt64ArrayParam_ [ ( UInt ) index ] . size
>2027	Identifier	size
>2028	ArrayIndexing	unclonedInt64ArrayParam_ [ ( UInt ) index ]
>2029	CastExpression	( UInt ) index
>2030	Identifier	index
>2031	CastTarget	UInt
>2032	Identifier	unclonedInt64ArrayParam_
>2033	IfStatement	if ( index < 0 )
>2034	CompoundStatement	 
>2035	ExpressionStatement	 
>2036	ShiftExpression	NTA_THROW << \"uncloned parameters cannot be accessed at region level\"
>2037	PrimaryExpression	\"uncloned parameters cannot be accessed at region level\"
>2038	Identifier	NTA_THROW
>2039	Condition	 
>2040	RelationalExpression	index < 0
>2041	PrimaryExpression	0
>2042	Identifier	index
>2043	Condition	 
>2044	EqualityExpression	name == \"unclonedInt64ArrayParam\"
>2045	PrimaryExpression	\"unclonedInt64ArrayParam\"
>2046	Identifier	name
>2047	CompoundStatement	 
>2048	ReturnStatement	 
>2049	CallExpression	real32ArrayParam_ . size ( )
>2050	ArgumentList	 
>2051	Callee	real32ArrayParam_ . size
>2052	MemberAccess	real32ArrayParam_ . size
>2053	Identifier	size
>2054	Identifier	real32ArrayParam_
>2055	Condition	 
>2056	EqualityExpression	name == \"real32ArrayParam\"
>2057	PrimaryExpression	\"real32ArrayParam\"
>2058	Identifier	name
>2059	CompoundStatement	 
>2060	ReturnStatement	 
>2061	CallExpression	int64ArrayParam_ . size ( )
>2062	ArgumentList	 
>2063	Callee	int64ArrayParam_ . size
>2064	MemberAccess	int64ArrayParam_ . size
>2065	Identifier	size
>2066	Identifier	int64ArrayParam_
>2067	Condition	 
>2068	EqualityExpression	name == \"int64ArrayParam\"
>2069	PrimaryExpression	\"int64ArrayParam\"
>2070	Identifier	name
>2084	FunctionDef	TestNode 
>2085	ParameterList	 
>2086	ReturnType	void
>2087	CompoundStatement	 
>2088	ForStatement	for ( unsigned int i = 1 ; i < nodeCount_ ; i ++ )
>2089	CompoundStatement	 
>2090	ExpressionStatement	 
>2091	AssignmentExpr	unclonedInt64ArrayParam_ [ i ] = v
>2092	Identifier	v
>2093	ArrayIndexing	unclonedInt64ArrayParam_ [ i ]
>2094	Identifier	i
>2095	Identifier	unclonedInt64ArrayParam_
>2096	IncDecOp	 
>2097	IncDec	++
>2098	Identifier	i
>2099	Condition	 
>2100	RelationalExpression	i < nodeCount_
>2101	Identifier	nodeCount_
>2102	Identifier	i
>2103	ForInit	 
>2104	IdentifierDeclStatement	unsigned int i = 1 ;
>2105	IdentifierDecl	i = 1
>2106	AssignmentExpr	i = 1
>2107	PrimaryExpression	1
>2108	Identifier	i
>2109	Identifier	i
>2110	IdentifierDeclType	unsigned int
>2111	IdentifierDeclStatement	 
>2112	IdentifierDecl	v ( 4 , 0 )
>2113	Expression	4 , 0
>2114	PrimaryExpression	0
>2115	PrimaryExpression	4
>2116	Identifier	v
>2117	IdentifierDeclType	std 
>2118	ExpressionStatement	 
>2119	CallExpression	unclonedInt64ArrayParam_ . resize ( nodeCount_ )
>2120	ArgumentList	nodeCount_
>2121	Argument	nodeCount_
>2122	Identifier	nodeCount_
>2123	Callee	unclonedInt64ArrayParam_ . resize
>2124	MemberAccess	unclonedInt64ArrayParam_ . resize
>2125	Identifier	resize
>2126	Identifier	unclonedInt64ArrayParam_
>2127	IfStatement	if ( ! shouldCloneParam_ )
>2128	CompoundStatement	 
>2129	ForStatement	for ( unsigned int i = 1 ; i < nodeCount_ ; i ++ )
>2130	CompoundStatement	 
>2131	ExpressionStatement	 
>2132	AssignmentExpr	possiblyUnclonedParam_ [ i ] = possiblyUnclonedParam_ [ 0 ]
>2133	ArrayIndexing	possiblyUnclonedParam_ [ 0 ]
>2134	PrimaryExpression	0
>2135	Identifier	possiblyUnclonedParam_
>2136	ArrayIndexing	possiblyUnclonedParam_ [ i ]
>2137	Identifier	i
>2138	Identifier	possiblyUnclonedParam_
>2139	IncDecOp	 
>2140	IncDec	++
>2141	Identifier	i
>2142	Condition	 
>2143	RelationalExpression	i < nodeCount_
>2144	Identifier	nodeCount_
>2145	Identifier	i
>2146	ForInit	 
>2147	IdentifierDeclStatement	unsigned int i = 1 ;
>2148	IdentifierDecl	i = 1
>2149	AssignmentExpr	i = 1
>2150	PrimaryExpression	1
>2151	Identifier	i
>2152	Identifier	i
>2153	IdentifierDeclType	unsigned int
>2154	ExpressionStatement	 
>2155	CallExpression	possiblyUnclonedParam_ . resize ( nodeCount_ )
>2156	ArgumentList	nodeCount_
>2157	Argument	nodeCount_
>2158	Identifier	nodeCount_
>2159	Callee	possiblyUnclonedParam_ . resize
>2160	MemberAccess	possiblyUnclonedParam_ . resize
>2161	Identifier	resize
>2162	Identifier	possiblyUnclonedParam_
>2163	Condition	 
>2164	UnaryOp	! shouldCloneParam_
>2165	Identifier	shouldCloneParam_
>2166	UnaryOperator	!
>2167	ForStatement	for ( unsigned int i = 1 ; i < nodeCount_ ; i ++ )
>2168	CompoundStatement	 
>2169	ExpressionStatement	 
>2170	AssignmentExpr	unclonedParam_ [ i ] = unclonedParam_ [ 0 ]
>2171	ArrayIndexing	unclonedParam_ [ 0 ]
>2172	PrimaryExpression	0
>2173	Identifier	unclonedParam_
>2174	ArrayIndexing	unclonedParam_ [ i ]
>2175	Identifier	i
>2176	Identifier	unclonedParam_
>2177	IncDecOp	 
>2178	IncDec	++
>2179	Identifier	i
>2180	Condition	 
>2181	RelationalExpression	i < nodeCount_
>2182	Identifier	nodeCount_
>2183	Identifier	i
>2184	ForInit	 
>2185	IdentifierDeclStatement	unsigned int i = 1 ;
>2186	IdentifierDecl	i = 1
>2187	AssignmentExpr	i = 1
>2188	PrimaryExpression	1
>2189	Identifier	i
>2190	Identifier	i
>2191	IdentifierDeclType	unsigned int
>2192	ExpressionStatement	 
>2193	CallExpression	unclonedParam_ . resize ( nodeCount_ )
>2194	ArgumentList	nodeCount_
>2195	Argument	nodeCount_
>2196	Identifier	nodeCount_
>2197	Callee	unclonedParam_ . resize
>2198	MemberAccess	unclonedParam_ . resize
>2199	Identifier	resize
>2200	Identifier	unclonedParam_
>2201	ExpressionStatement	 
>2202	AssignmentExpr	bottomUpIn_ = getInput ( \"bottomUpIn\" )
>2203	CallExpression	getInput ( \"bottomUpIn\" )
>2204	ArgumentList	\"bottomUpIn\"
>2205	Argument	\"bottomUpIn\"
>2206	PrimaryExpression	\"bottomUpIn\"
>2207	Callee	getInput
>2208	Identifier	getInput
>2209	Identifier	bottomUpIn_
>2210	ExpressionStatement	 
>2211	AssignmentExpr	bottomUpOut_ = getOutput ( \"bottomUpOut\" )
>2212	CallExpression	getOutput ( \"bottomUpOut\" )
>2213	ArgumentList	\"bottomUpOut\"
>2214	Argument	\"bottomUpOut\"
>2215	PrimaryExpression	\"bottomUpOut\"
>2216	Callee	getOutput
>2217	Identifier	getOutput
>2218	Identifier	bottomUpOut_
>2219	ExpressionStatement	 
>2220	AssignmentExpr	nodeCount_ = getDimensions ( ) . getCount ( )
>2221	CallExpression	getDimensions ( ) . getCount ( )
>2222	ArgumentList	 
>2223	Callee	getDimensions ( ) . getCount
>2224	MemberAccess	getDimensions ( ) . getCount
>2225	Identifier	getCount
>2226	CallExpression	getDimensions ( )
>2227	ArgumentList	 
>2228	Callee	getDimensions
>2229	Identifier	getDimensions
>2230	Identifier	nodeCount_
>2251	FunctionDef	TestNode 
>2252	ParameterList	const std 
>2253	Parameter	 
>2254	Identifier	outputName
>2255	ParameterType	const std 
>2256	ReturnType	size_t
>2257	CompoundStatement	 
>2258	ExpressionStatement	 
>2259	ShiftExpression	NTA_THROW << \"TestNode
>2260	ShiftExpression	\"TestNode
>2261	Identifier	outputName
>2262	PrimaryExpression	\"TestNode
>2263	Identifier	NTA_THROW
>2264	IfStatement	if ( outputName == \"bottomUpOut\" )
>2265	CompoundStatement	 
>2266	ReturnStatement	 
>2267	Identifier	outputElementCount_
>2268	Condition	 
>2269	EqualityExpression	outputName == \"bottomUpOut\"
>2270	PrimaryExpression	\"bottomUpOut\"
>2271	Identifier	outputName
>2277	FunctionDef	TestNode 
>2278	ParameterList	const std 
>2279	Parameter	 
>2280	Identifier	index
>2281	ParameterType	Int64
>2282	Parameter	 
>2283	Identifier	args
>2284	ParameterType	const std 
>2285	ReturnType	std 
>2286	CompoundStatement	 
>2287	ReturnStatement	 
>2288	PrimaryExpression	\"\"
>2294	FunctionDef	TestNode 
>2295	ParameterList	const std 
>2296	Parameter	 
>2297	Identifier	name
>2298	ParameterType	const std 
>2299	ReturnType	bool
>2300	CompoundStatement	 
>2301	IfStatement	if ( ( name == \"int32Param\" ) || ( name == \"uint32Param\" ) || ( name == \"int64Param\" ) || ( name == \"uint64Param\" ) || ( \
>2302	ElseStatement	else
>2303	IfStatement	if ( ( name == \"unclonedParam\" ) || ( name == \"unclonedInt64ArrayParam\" ) )
>2304	ElseStatement	else
>2305	IfStatement	if ( name == \"possiblyUnclonedParam\" )
>2306	ElseStatement	else
>2307	CompoundStatement	 
>2308	ExpressionStatement	 
>2309	ShiftExpression	NTA_THROW << \"TestNode
>2310	ShiftExpression	\"TestNode
>2311	Identifier	name
>2312	PrimaryExpression	\"TestNode
>2313	Identifier	NTA_THROW
>2314	CompoundStatement	 
>2315	ReturnStatement	 
>2316	Identifier	shouldCloneParam_
>2317	Condition	 
>2318	EqualityExpression	name == \"possiblyUnclonedParam\"
>2319	PrimaryExpression	\"possiblyUnclonedParam\"
>2320	Identifier	name
>2321	CompoundStatement	 
>2322	ReturnStatement	 
>2323	Identifier	false
>2324	Condition	 
>2325	OrExpression	( name == \"unclonedParam\" ) || ( name == \"unclonedInt64ArrayParam\" )
>2326	EqualityExpression	name == \"unclonedInt64ArrayParam\"
>2327	PrimaryExpression	\"unclonedInt64ArrayParam\"
>2328	Identifier	name
>2329	EqualityExpression	name == \"unclonedParam\"
>2330	PrimaryExpression	\"unclonedParam\"
>2331	Identifier	name
>2332	CompoundStatement	 
>2333	ReturnStatement	 
>2334	Identifier	true
>2335	Condition	 
>2336	OrExpression	( name == \"int32Param\" ) || ( name == \"uint32Param\" ) || ( name == \"int64Param\" ) || ( name == \"uint64Param\" ) || ( \
>2337	OrExpression	( name == \"uint32Param\" ) || ( name == \"int64Param\" ) || ( name == \"uint64Param\" ) || ( name == \"real32Param\" ) || ( \
>2338	OrExpression	( name == \"int64Param\" ) || ( name == \"uint64Param\" ) || ( name == \"real32Param\" ) || ( name == \"real64Param\" ) || ( \
>2339	OrExpression	( name == \"uint64Param\" ) || ( name == \"real32Param\" ) || ( name == \"real64Param\" ) || ( name == \"stringParam\" ) || ( \
>2340	OrExpression	( name == \"real32Param\" ) || ( name == \"real64Param\" ) || ( name == \"stringParam\" ) || ( name == \"int64ArrayParam\" ) || ( \
>2341	OrExpression	( name == \"real64Param\" ) || ( name == \"stringParam\" ) || ( name == \"int64ArrayParam\" ) || ( name == \"\
>2342	OrExpression	( name == \"stringParam\" ) || ( name == \"int64ArrayParam\" ) || ( name == \"real32ArrayParam\" ) || ( name == \"\
>2343	OrExpression	( name == \"int64ArrayParam\" ) || ( name == \"real32ArrayParam\" ) || ( name == \"shouldCloneParam\" )
>2344	OrExpression	( name == \"real32ArrayParam\" ) || ( name == \"shouldCloneParam\" )
>2345	EqualityExpression	name == \"shouldCloneParam\"
>2346	PrimaryExpression	\"shouldCloneParam\"
>2347	Identifier	name
>2348	EqualityExpression	name == \"real32ArrayParam\"
>2349	PrimaryExpression	\"real32ArrayParam\"
>2350	Identifier	name
>2351	EqualityExpression	name == \"int64ArrayParam\"
>2352	PrimaryExpression	\"int64ArrayParam\"
>2353	Identifier	name
>2354	EqualityExpression	name == \"stringParam\"
>2355	PrimaryExpression	\"stringParam\"
>2356	Identifier	name
>2357	EqualityExpression	name == \"real64Param\"
>2358	PrimaryExpression	\"real64Param\"
>2359	Identifier	name
>2360	EqualityExpression	name == \"real32Param\"
>2361	PrimaryExpression	\"real32Param\"
>2362	Identifier	name
>2363	EqualityExpression	name == \"uint64Param\"
>2364	PrimaryExpression	\"uint64Param\"
>2365	Identifier	name
>2366	EqualityExpression	name == \"int64Param\"
>2367	PrimaryExpression	\"int64Param\"
>2368	Identifier	name
>2369	EqualityExpression	name == \"uint32Param\"
>2370	PrimaryExpression	\"uint32Param\"
>2371	Identifier	name
>2372	EqualityExpression	name == \"int32Param\"
>2373	PrimaryExpression	\"int32Param\"
>2374	Identifier	name
>2382	FunctionDef	arrayOut (std 
>2383	ParameterList	std 
>2384	Parameter	 
>2385	Identifier	name
>2386	ParameterType	const std 
>2387	Parameter	 
>2388	Identifier	array
>2389	ParameterType	const std 
>2390	Parameter	 
>2391	Identifier	s
>2392	ParameterType	std 
>2393	ReturnType	static void
>2394	CompoundStatement	 
>2395	ForStatement	for ( size_t ix = 0 ; ix < array . size ( ) ; ix ++ )
>2396	CompoundStatement	 
>2397	ExpressionStatement	 
>2398	ShiftExpression	s << array [ ix ] << \" \"
>2399	ShiftExpression	array [ ix ] << \" \"
>2400	PrimaryExpression	\" \"
>2401	ArrayIndexing	array [ ix ]
>2402	Identifier	ix
>2403	Identifier	array
>2404	Identifier	s
>2405	IncDecOp	 
>2406	IncDec	++
>2407	Identifier	ix
>2408	Condition	 
>2409	RelationalExpression	ix < array . size ( )
>2410	CallExpression	array . size ( )
>2411	ArgumentList	 
>2412	Callee	array . size
>2413	MemberAccess	array . size
>2414	Identifier	size
>2415	Identifier	array
>2416	Identifier	ix
>2417	ForInit	 
>2418	IdentifierDeclStatement	size_t ix = 0 ;
>2419	IdentifierDecl	ix = 0
>2420	AssignmentExpr	ix = 0
>2421	PrimaryExpression	0
>2422	Identifier	ix
>2423	Identifier	ix
>2424	IdentifierDeclType	size_t
>2425	ExpressionStatement	 
>2426	ShiftExpression	s << array . size ( ) << \" \"
>2427	ShiftExpression	array . size ( ) << \" \"
>2428	PrimaryExpression	\" \"
>2429	CallExpression	array . size ( )
>2430	ArgumentList	 
>2431	Callee	array . size
>2432	MemberAccess	array . size
>2433	Identifier	size
>2434	Identifier	array
>2435	Identifier	s
>2436	ExpressionStatement	 
>2437	ShiftExpression	s << \"ARRAY_\" << name << \" \"
>2438	ShiftExpression	\"ARRAY_\" << name << \" \"
>2439	ShiftExpression	name << \" \"
>2440	PrimaryExpression	\" \"
>2441	Identifier	name
>2442	PrimaryExpression	\"ARRAY_\"
>2443	Identifier	s
>2452	FunctionDef	arrayIn (std 
>2453	ParameterList	std 
>2454	Parameter	 
>2455	Identifier	name
>2456	ParameterType	const std 
>2457	Parameter	 
>2458	Identifier	array
>2459	ParameterType	std 
>2460	Parameter	 
>2461	Identifier	s
>2462	ParameterType	std 
>2463	ReturnType	static void
>2464	CompoundStatement	 
>2465	ForStatement	for ( size_t ix = 0 ; ix < sz ; ix ++ )
>2466	CompoundStatement	 
>2467	ExpressionStatement	 
>2468	ShiftExpression	s >> array [ ix ]
>2469	ArrayIndexing	array [ ix ]
>2470	Identifier	ix
>2471	Identifier	array
>2472	Identifier	s
>2473	IncDecOp	 
>2474	IncDec	++
>2475	Identifier	ix
>2476	Condition	 
>2477	RelationalExpression	ix < sz
>2478	Identifier	sz
>2479	Identifier	ix
>2480	ForInit	 
>2481	IdentifierDeclStatement	size_t ix = 0 ;
>2482	IdentifierDecl	ix = 0
>2483	AssignmentExpr	ix = 0
>2484	PrimaryExpression	0
>2485	Identifier	ix
>2486	Identifier	ix
>2487	IdentifierDeclType	size_t
>2488	ExpressionStatement	 
>2489	CallExpression	array . resize ( sz )
>2490	ArgumentList	sz
>2491	Argument	sz
>2492	Identifier	sz
>2493	Callee	array . resize
>2494	MemberAccess	array . resize
>2495	Identifier	resize
>2496	Identifier	array
>2497	ExpressionStatement	 
>2498	ShiftExpression	s >> sz
>2499	Identifier	sz
>2500	Identifier	s
>2501	IdentifierDeclStatement	 
>2502	IdentifierDecl	sz
>2503	Identifier	sz
>2504	IdentifierDeclType	size_t
>2505	IfStatement	if ( cookie != expectedCookie )
>2506	ExpressionStatement	 
>2507	ShiftExpression	NTA_THROW << \"Bad cookie '\" << cookie << \"' for serialized array. Expected '\" << expectedCookie << \"'\"\
>2508	ShiftExpression	\"Bad cookie '\" << cookie << \"' for serialized array. Expected '\" << expectedCookie << \"'\"
>2509	ShiftExpression	cookie << \"' for serialized array. Expected '\" << expectedCookie << \"'\"
>2510	ShiftExpression	\"' for serialized array. Expected '\" << expectedCookie << \"'\"
>2511	ShiftExpression	expectedCookie << \"'\"
>2512	PrimaryExpression	\"'\"
>2513	Identifier	expectedCookie
>2514	PrimaryExpression	\"' for serialized array. Expected '\"
>2515	Identifier	cookie
>2516	PrimaryExpression	\"Bad cookie '\"
>2517	Identifier	NTA_THROW
>2518	Condition	 
>2519	EqualityExpression	cookie != expectedCookie
>2520	Identifier	expectedCookie
>2521	Identifier	cookie
>2522	ExpressionStatement	 
>2523	ShiftExpression	s >> cookie
>2524	Identifier	cookie
>2525	Identifier	s
>2526	IdentifierDeclStatement	 
>2527	IdentifierDecl	cookie
>2528	Identifier	cookie
>2529	IdentifierDeclType	std 
>2530	IdentifierDeclStatement	 
>2531	IdentifierDecl	expectedCookie = std 
>2532	AssignmentExpr	expectedCookie = std 
>2533	AdditiveExpression	std 
>2534	Identifier	name
>2535	CallExpression	std 
>2536	ArgumentList	\"ARRAY_\"
>2537	Argument	\"ARRAY_\"
>2538	PrimaryExpression	\"ARRAY_\"
>2539	Callee	std 
>2540	Identifier	std 
>2541	Identifier	expectedCookie
>2542	Identifier	expectedCookie
>2543	IdentifierDeclType	std 
>2555	FunctionDef	TestNode 
>2556	ParameterList	BundleIO & bundle
>2557	Parameter	 
>2558	Identifier	bundle
>2559	ParameterType	BundleIO &
>2560	ReturnType	void
>2561	CompoundStatement	 
>2562	CompoundStatement	 
>2563	ExpressionStatement	 
>2564	CallExpression	f . close ( )
>2565	ArgumentList	 
>2566	Callee	f . close
>2567	MemberAccess	f . close
>2568	Identifier	close
>2569	Identifier	f
>2570	ExpressionStatement	 
>2571	ShiftExpression	f << \"This is another auxilliary file!\n\"
>2572	PrimaryExpression	\"This is another auxilliary file!\n\"
>2573	Identifier	f
>2574	IdentifierDeclStatement	 
>2575	IdentifierDecl	f ( path . c_str ( ) )
>2576	CallExpression	path . c_str ( )
>2577	ArgumentList	 
>2578	Callee	path . c_str
>2579	MemberAccess	path . c_str
>2580	Identifier	c_str
>2581	Identifier	path
>2582	Identifier	f
>2583	IdentifierDeclType	std 
>2584	IdentifierDeclStatement	 
>2585	IdentifierDecl	path = bundle . getPath ( \"aux2\" )
>2586	AssignmentExpr	path = bundle . getPath ( \"aux2\" )
>2587	CallExpression	bundle . getPath ( \"aux2\" )
>2588	ArgumentList	\"aux2\"
>2589	Argument	\"aux2\"
>2590	PrimaryExpression	\"aux2\"
>2591	Callee	bundle . getPath
>2592	MemberAccess	bundle . getPath
>2593	Identifier	getPath
>2594	Identifier	bundle
>2595	Identifier	path
>2596	Identifier	path
>2597	IdentifierDeclType	std 
>2598	CompoundStatement	 
>2599	ExpressionStatement	 
>2600	CallExpression	f . close ( )
>2601	ArgumentList	 
>2602	Callee	f . close
>2603	MemberAccess	f . close
>2604	Identifier	close
>2605	Identifier	f
>2606	ExpressionStatement	 
>2607	ShiftExpression	f << \"This is an auxilliary file!\n\"
>2608	PrimaryExpression	\"This is an auxilliary file!\n\"
>2609	Identifier	f
>2610	IdentifierDeclStatement	 
>2611	IdentifierDecl	& f = bundle . getOutputStream ( \"aux\" )
>2612	AssignmentExpr	& f = bundle . getOutputStream ( \"aux\" )
>2613	CallExpression	bundle . getOutputStream ( \"aux\" )
>2614	ArgumentList	\"aux\"
>2615	Argument	\"aux\"
>2616	PrimaryExpression	\"aux\"
>2617	Callee	bundle . getOutputStream
>2618	MemberAccess	bundle . getOutputStream
>2619	Identifier	getOutputStream
>2620	Identifier	bundle
>2621	Identifier	f
>2622	Identifier	f
>2623	IdentifierDeclType	std 
>2624	CompoundStatement	 
>2625	ExpressionStatement	 
>2626	CallExpression	f . close ( )
>2627	ArgumentList	 
>2628	Callee	f . close
>2629	MemberAccess	f . close
>2630	Identifier	close
>2631	Identifier	f
>2632	ForStatement	for ( size_t i = 0 ; i < unclonedInt64ArrayParam_ . size ( ) ; i ++ )
>2633	CompoundStatement	 
>2634	ExpressionStatement	 
>2635	CallExpression	arrayOut ( f , unclonedInt64ArrayParam_ [ i ] , name . str ( ) )
>2636	ArgumentList	f
>2637	Argument	name . str ( )
>2638	CallExpression	name . str ( )
>2639	ArgumentList	 
>2640	Callee	name . str
>2641	MemberAccess	name . str
>2642	Identifier	str
>2643	Identifier	name
>2644	Argument	unclonedInt64ArrayParam_ [ i ]
>2645	ArrayIndexing	unclonedInt64ArrayParam_ [ i ]
>2646	Identifier	i
>2647	Identifier	unclonedInt64ArrayParam_
>2648	Argument	f
>2649	Identifier	f
>2650	Callee	arrayOut
>2651	Identifier	arrayOut
>2652	ExpressionStatement	 
>2653	ShiftExpression	name << \"unclonedInt64ArrayParam[\" << i << \"]\"
>2654	ShiftExpression	\"unclonedInt64ArrayParam[\" << i << \"]\"
>2655	ShiftExpression	i << \"]\"
>2656	PrimaryExpression	\"]\"
>2657	Identifier	i
>2658	PrimaryExpression	\"unclonedInt64ArrayParam[\"
>2659	Identifier	name
>2660	IdentifierDeclStatement	 
>2661	IdentifierDecl	name
>2662	Identifier	name
>2663	IdentifierDeclType	std 
>2664	IncDecOp	 
>2665	IncDec	++
>2666	Identifier	i
>2667	Condition	 
>2668	RelationalExpression	i < unclonedInt64ArrayParam_ . size ( )
>2669	CallExpression	unclonedInt64ArrayParam_ . size ( )
>2670	ArgumentList	 
>2671	Callee	unclonedInt64ArrayParam_ . size
>2672	MemberAccess	unclonedInt64ArrayParam_ . size
>2673	Identifier	size
>2674	Identifier	unclonedInt64ArrayParam_
>2675	Identifier	i
>2676	ForInit	 
>2677	IdentifierDeclStatement	size_t i = 0 ;
>2678	IdentifierDecl	i = 0
>2679	AssignmentExpr	i = 0
>2680	PrimaryExpression	0
>2681	Identifier	i
>2682	Identifier	i
>2683	IdentifierDeclType	size_t
>2684	ExpressionStatement	 
>2685	ShiftExpression	f << unclonedInt64ArrayParam_ . size ( ) << \" \"
>2686	ShiftExpression	unclonedInt64ArrayParam_ . size ( ) << \" \"
>2687	PrimaryExpression	\" \"
>2688	CallExpression	unclonedInt64ArrayParam_ . size ( )
>2689	ArgumentList	 
>2690	Callee	unclonedInt64ArrayParam_ . size
>2691	MemberAccess	unclonedInt64ArrayParam_ . size
>2692	Identifier	size
>2693	Identifier	unclonedInt64ArrayParam_
>2694	Identifier	f
>2695	ExpressionStatement	 
>2696	ShiftExpression	f << \"unclonedArray \"
>2697	PrimaryExpression	\"unclonedArray \"
>2698	Identifier	f
>2699	ExpressionStatement	 
>2700	ShiftExpression	f << shouldCloneParam_ << \" \"
>2701	ShiftExpression	shouldCloneParam_ << \" \"
>2702	PrimaryExpression	\" \"
>2703	Identifier	shouldCloneParam_
>2704	Identifier	f
>2705	ExpressionStatement	 
>2706	CallExpression	arrayOut ( f , unclonedParam_ , \"unclonedParam_\" )
>2707	ArgumentList	f
>2708	Argument	\"unclonedParam_\"
>2709	PrimaryExpression	\"unclonedParam_\"
>2710	Argument	unclonedParam_
>2711	Identifier	unclonedParam_
>2712	Argument	f
>2713	Identifier	f
>2714	Callee	arrayOut
>2715	Identifier	arrayOut
>2716	ExpressionStatement	 
>2717	CallExpression	arrayOut ( f , int64ArrayParam_ , \"int64ArrayParam_\" )
>2718	ArgumentList	f
>2719	Argument	\"int64ArrayParam_\"
>2720	PrimaryExpression	\"int64ArrayParam_\"
>2721	Argument	int64ArrayParam_
>2722	Identifier	int64ArrayParam_
>2723	Argument	f
>2724	Identifier	f
>2725	Callee	arrayOut
>2726	Identifier	arrayOut
>2727	ExpressionStatement	 
>2728	CallExpression	arrayOut ( f , real32ArrayParam_ , \"real32ArrayParam_\" )
>2729	ArgumentList	f
>2730	Argument	\"real32ArrayParam_\"
>2731	PrimaryExpression	\"real32ArrayParam_\"
>2732	Argument	real32ArrayParam_
>2733	Identifier	real32ArrayParam_
>2734	Argument	f
>2735	Identifier	f
>2736	Callee	arrayOut
>2737	Identifier	arrayOut
>2738	ExpressionStatement	 
>2739	ShiftExpression	f << \"TestNode-v1\" << \" \" << nodeCount_ << \" \" << int32Param_ << \" \" << uint32Param_ << \" \" << int64Param_ << \" \" << \
>2740	ShiftExpression	\"TestNode-v1\" << \" \" << nodeCount_ << \" \" << int32Param_ << \" \" << uint32Param_ << \" \" << int64Param_ << \" \" << \
>2741	ShiftExpression	\" \" << nodeCount_ << \" \" << int32Param_ << \" \" << uint32Param_ << \" \" << int64Param_ << \" \" << uint64Param_ << \" \" << \
>2742	ShiftExpression	nodeCount_ << \" \" << int32Param_ << \" \" << uint32Param_ << \" \" << int64Param_ << \" \" << uint64Param_ << \" \" << \
>2743	ShiftExpression	\" \" << int32Param_ << \" \" << uint32Param_ << \" \" << int64Param_ << \" \" << uint64Param_ << \" \" << real32Param_ << \" \" << \
>2744	ShiftExpression	int32Param_ << \" \" << uint32Param_ << \" \" << int64Param_ << \" \" << uint64Param_ << \" \" << real32Param_ << \" \" << \
>2745	ShiftExpression	\" \" << uint32Param_ << \" \" << int64Param_ << \" \" << uint64Param_ << \" \" << real32Param_ << \" \" << real64Param_ << \" \" << \
>2746	ShiftExpression	uint32Param_ << \" \" << int64Param_ << \" \" << uint64Param_ << \" \" << real32Param_ << \" \" << real64Param_ << \" \" << \
>2747	ShiftExpression	\" \" << int64Param_ << \" \" << uint64Param_ << \" \" << real32Param_ << \" \" << real64Param_ << \" \" << outputElementCount_ << \" \" << \
>2748	ShiftExpression	int64Param_ << \" \" << uint64Param_ << \" \" << real32Param_ << \" \" << real64Param_ << \" \" << outputElementCount_ << \" \" << \
>2749	ShiftExpression	\" \" << uint64Param_ << \" \" << real32Param_ << \" \" << real64Param_ << \" \" << outputElementCount_ << \" \" << \
>2750	ShiftExpression	uint64Param_ << \" \" << real32Param_ << \" \" << real64Param_ << \" \" << outputElementCount_ << \" \" << delta_ << \" \" << \
>2751	ShiftExpression	\" \" << real32Param_ << \" \" << real64Param_ << \" \" << outputElementCount_ << \" \" << delta_ << \" \" << \
>2752	ShiftExpression	real32Param_ << \" \" << real64Param_ << \" \" << outputElementCount_ << \" \" << delta_ << \" \" << iter_ << \" \"\
>2753	ShiftExpression	\" \" << real64Param_ << \" \" << outputElementCount_ << \" \" << delta_ << \" \" << iter_ << \" \"
>2754	ShiftExpression	real64Param_ << \" \" << outputElementCount_ << \" \" << delta_ << \" \" << iter_ << \" \"
>2755	ShiftExpression	\" \" << outputElementCount_ << \" \" << delta_ << \" \" << iter_ << \" \"
>2756	ShiftExpression	outputElementCount_ << \" \" << delta_ << \" \" << iter_ << \" \"
>2757	ShiftExpression	\" \" << delta_ << \" \" << iter_ << \" \"
>2758	ShiftExpression	delta_ << \" \" << iter_ << \" \"
>2759	ShiftExpression	\" \" << iter_ << \" \"
>2760	ShiftExpression	iter_ << \" \"
>2761	PrimaryExpression	\" \"
>2762	Identifier	iter_
>2763	PrimaryExpression	\" \"
>2764	Identifier	delta_
>2765	PrimaryExpression	\" \"
>2766	Identifier	outputElementCount_
>2767	PrimaryExpression	\" \"
>2768	Identifier	real64Param_
>2769	PrimaryExpression	\" \"
>2770	Identifier	real32Param_
>2771	PrimaryExpression	\" \"
>2772	Identifier	uint64Param_
>2773	PrimaryExpression	\" \"
>2774	Identifier	int64Param_
>2775	PrimaryExpression	\" \"
>2776	Identifier	uint32Param_
>2777	PrimaryExpression	\" \"
>2778	Identifier	int32Param_
>2779	PrimaryExpression	\" \"
>2780	Identifier	nodeCount_
>2781	PrimaryExpression	\" \"
>2782	PrimaryExpression	\"TestNode-v1\"
>2783	Identifier	f
>2784	IdentifierDeclStatement	 
>2785	IdentifierDecl	& f = bundle . getOutputStream ( \"main\" )
>2786	AssignmentExpr	& f = bundle . getOutputStream ( \"main\" )
>2787	CallExpression	bundle . getOutputStream ( \"main\" )
>2788	ArgumentList	\"main\"
>2789	Argument	\"main\"
>2790	PrimaryExpression	\"main\"
>2791	Callee	bundle . getOutputStream
>2792	MemberAccess	bundle . getOutputStream
>2793	Identifier	getOutputStream
>2794	Identifier	bundle
>2795	Identifier	f
>2796	Identifier	f
>2797	IdentifierDeclType	std 
>2816	FunctionDef	TestNode 
>2817	ParameterList	BundleIO & bundle
>2818	Parameter	 
>2819	Identifier	bundle
>2820	ParameterType	BundleIO &
>2821	ReturnType	void
>2822	CompoundStatement	 
>2823	CompoundStatement	 
>2824	ExpressionStatement	 
>2825	CallExpression	f . close ( )
>2826	ArgumentList	 
>2827	Callee	f . close
>2828	MemberAccess	f . close
>2829	Identifier	close
>2830	Identifier	f
>2831	IfStatement	if ( std 
>2832	CompoundStatement	 
>2833	ExpressionStatement	 
>2834	ShiftExpression	NTA_THROW << \"Invalid auxilliary2 serialization file for TestNode\"
>2835	PrimaryExpression	\"Invalid auxilliary2 serialization file for TestNode\"
>2836	Identifier	NTA_THROW
>2837	Condition	 
>2838	EqualityExpression	std 
>2839	PrimaryExpression	\"This is another auxilliary file!\n\"
>2840	CallExpression	std 
>2841	ArgumentList	line1
>2842	Argument	line1
>2843	Identifier	line1
>2844	Callee	std 
>2845	Identifier	std 
>2846	ExpressionStatement	 
>2847	AssignmentExpr	line1 [ f . gcount ( ) ] = '\0'
>2848	PrimaryExpression	'\0'
>2849	ArrayIndexing	line1 [ f . gcount ( ) ]
>2850	CallExpression	f . gcount ( )
>2851	ArgumentList	 
>2852	Callee	f . gcount
>2853	MemberAccess	f . gcount
>2854	Identifier	gcount
>2855	Identifier	f
>2856	Identifier	line1
>2857	ExpressionStatement	 
>2858	CallExpression	f . read ( line1 , 100 )
>2859	ArgumentList	line1
>2860	Argument	100
>2861	PrimaryExpression	100
>2862	Argument	line1
>2863	Identifier	line1
>2864	Callee	f . read
>2865	MemberAccess	f . read
>2866	Identifier	read
>2867	Identifier	f
>2868	IdentifierDeclStatement	 
>2869	IdentifierDecl	line1 [ 100 ]
>2870	PrimaryExpression	100
>2871	Identifier	line1
>2872	IdentifierDeclType	char [ 100 ]
>2873	IdentifierDeclStatement	 
>2874	IdentifierDecl	f ( path . c_str ( ) )
>2875	CallExpression	path . c_str ( )
>2876	ArgumentList	 
>2877	Callee	path . c_str
>2878	MemberAccess	path . c_str
>2879	Identifier	c_str
>2880	Identifier	path
>2881	Identifier	f
>2882	IdentifierDeclType	std 
>2883	IdentifierDeclStatement	 
>2884	IdentifierDecl	path = bundle . getPath ( \"aux2\" )
>2885	AssignmentExpr	path = bundle . getPath ( \"aux2\" )
>2886	CallExpression	bundle . getPath ( \"aux2\" )
>2887	ArgumentList	\"aux2\"
>2888	Argument	\"aux2\"
>2889	PrimaryExpression	\"aux2\"
>2890	Callee	bundle . getPath
>2891	MemberAccess	bundle . getPath
>2892	Identifier	getPath
>2893	Identifier	bundle
>2894	Identifier	path
>2895	Identifier	path
>2896	IdentifierDeclType	std 
>2897	CompoundStatement	 
>2898	ExpressionStatement	 
>2899	CallExpression	f . close ( )
>2900	ArgumentList	 
>2901	Callee	f . close
>2902	MemberAccess	f . close
>2903	Identifier	close
>2904	Identifier	f
>2905	IfStatement	if ( std 
>2906	CompoundStatement	 
>2907	ExpressionStatement	 
>2908	ShiftExpression	NTA_THROW << \"Invalid auxilliary serialization file for TestNode\"
>2909	PrimaryExpression	\"Invalid auxilliary serialization file for TestNode\"
>2910	Identifier	NTA_THROW
>2911	Condition	 
>2912	EqualityExpression	std 
>2913	PrimaryExpression	\"This is an auxilliary file!\n\"
>2914	CallExpression	std 
>2915	ArgumentList	line1
>2916	Argument	line1
>2917	Identifier	line1
>2918	Callee	std 
>2919	Identifier	std 
>2920	ExpressionStatement	 
>2921	AssignmentExpr	line1 [ f . gcount ( ) ] = '\0'
>2922	PrimaryExpression	'\0'
>2923	ArrayIndexing	line1 [ f . gcount ( ) ]
>2924	CallExpression	f . gcount ( )
>2925	ArgumentList	 
>2926	Callee	f . gcount
>2927	MemberAccess	f . gcount
>2928	Identifier	gcount
>2929	Identifier	f
>2930	Identifier	line1
>2931	ExpressionStatement	 
>2932	CallExpression	f . read ( line1 , 100 )
>2933	ArgumentList	line1
>2934	Argument	100
>2935	PrimaryExpression	100
>2936	Argument	line1
>2937	Identifier	line1
>2938	Callee	f . read
>2939	MemberAccess	f . read
>2940	Identifier	read
>2941	Identifier	f
>2942	IdentifierDeclStatement	 
>2943	IdentifierDecl	line1 [ 100 ]
>2944	PrimaryExpression	100
>2945	Identifier	line1
>2946	IdentifierDeclType	char [ 100 ]
>2947	IdentifierDeclStatement	 
>2948	IdentifierDecl	& f = bundle . getInputStream ( \"aux\" )
>2949	AssignmentExpr	& f = bundle . getInputStream ( \"aux\" )
>2950	CallExpression	bundle . getInputStream ( \"aux\" )
>2951	ArgumentList	\"aux\"
>2952	Argument	\"aux\"
>2953	PrimaryExpression	\"aux\"
>2954	Callee	bundle . getInputStream
>2955	MemberAccess	bundle . getInputStream
>2956	Identifier	getInputStream
>2957	Identifier	bundle
>2958	Identifier	f
>2959	Identifier	f
>2960	IdentifierDeclType	std 
>2961	CompoundStatement	 
>2962	ExpressionStatement	 
>2963	CallExpression	f . close ( )
>2964	ArgumentList	 
>2965	Callee	f . close
>2966	MemberAccess	f . close
>2967	Identifier	close
>2968	Identifier	f
>2969	ForStatement	for ( size_t i = 0 ; i < vecsize ; i ++ )
>2970	CompoundStatement	 
>2971	ExpressionStatement	 
>2972	CallExpression	arrayIn ( f , unclonedInt64ArrayParam_ [ i ] , name . str ( ) )
>2973	ArgumentList	f
>2974	Argument	name . str ( )
>2975	CallExpression	name . str ( )
>2976	ArgumentList	 
>2977	Callee	name . str
>2978	MemberAccess	name . str
>2979	Identifier	str
>2980	Identifier	name
>2981	Argument	unclonedInt64ArrayParam_ [ i ]
>2982	ArrayIndexing	unclonedInt64ArrayParam_ [ i ]
>2983	Identifier	i
>2984	Identifier	unclonedInt64ArrayParam_
>2985	Argument	f
>2986	Identifier	f
>2987	Callee	arrayIn
>2988	Identifier	arrayIn
>2989	ExpressionStatement	 
>2990	ShiftExpression	name << \"unclonedInt64ArrayParam[\" << i << \"]\"
>2991	ShiftExpression	\"unclonedInt64ArrayParam[\" << i << \"]\"
>2992	ShiftExpression	i << \"]\"
>2993	PrimaryExpression	\"]\"
>2994	Identifier	i
>2995	PrimaryExpression	\"unclonedInt64ArrayParam[\"
>2996	Identifier	name
>2997	IdentifierDeclStatement	 
>2998	IdentifierDecl	name
>2999	Identifier	name
>3000	IdentifierDeclType	std 
>3001	IncDecOp	 
>3002	IncDec	++
>3003	Identifier	i
>3004	Condition	 
>3005	RelationalExpression	i < vecsize
>3006	Identifier	vecsize
>3007	Identifier	i
>3008	ForInit	 
>3009	IdentifierDeclStatement	size_t i = 0 ;
>3010	IdentifierDecl	i = 0
>3011	AssignmentExpr	i = 0
>3012	PrimaryExpression	0
>3013	Identifier	i
>3014	Identifier	i
>3015	IdentifierDeclType	size_t
>3016	ExpressionStatement	 
>3017	CallExpression	unclonedInt64ArrayParam_ . resize ( vecsize )
>3018	ArgumentList	vecsize
>3019	Argument	vecsize
>3020	Identifier	vecsize
>3021	Callee	unclonedInt64ArrayParam_ . resize
>3022	MemberAccess	unclonedInt64ArrayParam_ . resize
>3023	Identifier	resize
>3024	Identifier	unclonedInt64ArrayParam_
>3025	ExpressionStatement	 
>3026	CallExpression	unclonedInt64ArrayParam_ . clear ( )
>3027	ArgumentList	 
>3028	Callee	unclonedInt64ArrayParam_ . clear
>3029	MemberAccess	unclonedInt64ArrayParam_ . clear
>3030	Identifier	clear
>3031	Identifier	unclonedInt64ArrayParam_
>3032	ExpressionStatement	 
>3033	ShiftExpression	f >> vecsize
>3034	Identifier	vecsize
>3035	Identifier	f
>3036	IdentifierDeclStatement	 
>3037	IdentifierDecl	vecsize
>3038	Identifier	vecsize
>3039	IdentifierDeclType	size_t
>3040	IfStatement	if ( label != \"unclonedArray\" )
>3041	ExpressionStatement	 
>3042	ShiftExpression	NTA_THROW << \"Missing label for uncloned array. Got '\" << label << \"'\"
>3043	ShiftExpression	\"Missing label for uncloned array. Got '\" << label << \"'\"
>3044	ShiftExpression	label << \"'\"
>3045	PrimaryExpression	\"'\"
>3046	Identifier	label
>3047	PrimaryExpression	\"Missing label for uncloned array. Got '\"
>3048	Identifier	NTA_THROW
>3049	Condition	 
>3050	EqualityExpression	label != \"unclonedArray\"
>3051	PrimaryExpression	\"unclonedArray\"
>3052	Identifier	label
>3053	ExpressionStatement	 
>3054	ShiftExpression	f >> label
>3055	Identifier	label
>3056	Identifier	f
>3057	IdentifierDeclStatement	 
>3058	IdentifierDecl	label
>3059	Identifier	label
>3060	IdentifierDeclType	std 
>3061	ExpressionStatement	 
>3062	ShiftExpression	f >> shouldCloneParam_
>3063	Identifier	shouldCloneParam_
>3064	Identifier	f
>3065	ExpressionStatement	 
>3066	CallExpression	arrayIn ( f , unclonedParam_ , \"unclonedParam_\" )
>3067	ArgumentList	f
>3068	Argument	\"unclonedParam_\"
>3069	PrimaryExpression	\"unclonedParam_\"
>3070	Argument	unclonedParam_
>3071	Identifier	unclonedParam_
>3072	Argument	f
>3073	Identifier	f
>3074	Callee	arrayIn
>3075	Identifier	arrayIn
>3076	ExpressionStatement	 
>3077	CallExpression	arrayIn ( f , int64ArrayParam_ , \"int64ArrayParam_\" )
>3078	ArgumentList	f
>3079	Argument	\"int64ArrayParam_\"
>3080	PrimaryExpression	\"int64ArrayParam_\"
>3081	Argument	int64ArrayParam_
>3082	Identifier	int64ArrayParam_
>3083	Argument	f
>3084	Identifier	f
>3085	Callee	arrayIn
>3086	Identifier	arrayIn
>3087	ExpressionStatement	 
>3088	CallExpression	arrayIn ( f , real32ArrayParam_ , \"real32ArrayParam_\" )
>3089	ArgumentList	f
>3090	Argument	\"real32ArrayParam_\"
>3091	PrimaryExpression	\"real32ArrayParam_\"
>3092	Argument	real32ArrayParam_
>3093	Identifier	real32ArrayParam_
>3094	Argument	f
>3095	Identifier	f
>3096	Callee	arrayIn
>3097	Identifier	arrayIn
>3098	ExpressionStatement	 
>3099	ShiftExpression	f >> iter_
>3100	Identifier	iter_
>3101	Identifier	f
>3102	ExpressionStatement	 
>3103	ShiftExpression	f >> delta_
>3104	Identifier	delta_
>3105	Identifier	f
>3106	ExpressionStatement	 
>3107	ShiftExpression	f >> outputElementCount_
>3108	Identifier	outputElementCount_
>3109	Identifier	f
>3110	ExpressionStatement	 
>3111	ShiftExpression	f >> real64Param_
>3112	Identifier	real64Param_
>3113	Identifier	f
>3114	ExpressionStatement	 
>3115	ShiftExpression	f >> real32Param_
>3116	Identifier	real32Param_
>3117	Identifier	f
>3118	ExpressionStatement	 
>3119	ShiftExpression	f >> uint64Param_
>3120	Identifier	uint64Param_
>3121	Identifier	f
>3122	ExpressionStatement	 
>3123	ShiftExpression	f >> int64Param_
>3124	Identifier	int64Param_
>3125	Identifier	f
>3126	ExpressionStatement	 
>3127	ShiftExpression	f >> uint32Param_
>3128	Identifier	uint32Param_
>3129	Identifier	f
>3130	ExpressionStatement	 
>3131	ShiftExpression	f >> int32Param_
>3132	Identifier	int32Param_
>3133	Identifier	f
>3134	ExpressionStatement	 
>3135	ShiftExpression	f >> nodeCount_
>3136	Identifier	nodeCount_
>3137	Identifier	f
>3138	IfStatement	if ( versionString != \"TestNode-v1\" )
>3139	CompoundStatement	 
>3140	ExpressionStatement	 
>3141	ShiftExpression	NTA_THROW << \"Bad serialization for region '\" << region_ -> getName ( ) << \"' of type TestNode. Main \
>3142	ShiftExpression	\"Bad serialization for region '\" << region_ -> getName ( ) << \"' of type TestNode. Main serialization \
>3143	ShiftExpression	region_ -> getName ( ) << \"' of type TestNode. Main serialization file must start \" << \"with \\"TestNode-v1\\" \
>3144	ShiftExpression	\"' of type TestNode. Main serialization file must start \" << \"with \\"TestNode-v1\\" but instead it starts \
>3145	ShiftExpression	\"with \\"TestNode-v1\\" but instead it starts with '\" << versionString << \"'\"
>3146	ShiftExpression	versionString << \"'\"
>3147	PrimaryExpression	\"'\"
>3148	Identifier	versionString
>3149	PrimaryExpression	\"with \\"TestNode-v1\\" but instead it starts with '\"
>3150	PrimaryExpression	\"' of type TestNode. Main serialization file must start \"
>3151	CallExpression	region_ -> getName ( )
>3152	ArgumentList	 
>3153	Callee	region_ -> getName
>3154	PtrMemberAccess	region_ -> getName
>3155	Identifier	getName
>3156	Identifier	region_
>3157	PrimaryExpression	\"Bad serialization for region '\"
>3158	Identifier	NTA_THROW
>3159	Condition	 
>3160	EqualityExpression	versionString != \"TestNode-v1\"
>3161	PrimaryExpression	\"TestNode-v1\"
>3162	Identifier	versionString
>3163	ExpressionStatement	 
>3164	ShiftExpression	f >> versionString
>3165	Identifier	versionString
>3166	Identifier	f
>3167	IdentifierDeclStatement	 
>3168	IdentifierDecl	versionString
>3169	Identifier	versionString
>3170	IdentifierDeclType	std 
>3171	IdentifierDeclStatement	 
>3172	IdentifierDecl	& f = bundle . getInputStream ( \"main\" )
>3173	AssignmentExpr	& f = bundle . getInputStream ( \"main\" )
>3174	CallExpression	bundle . getInputStream ( \"main\" )
>3175	ArgumentList	\"main\"
>3176	Argument	\"main\"
>3177	PrimaryExpression	\"main\"
>3178	Callee	bundle . getInputStream
>3179	MemberAccess	bundle . getInputStream
>3180	Identifier	getInputStream
>3181	Identifier	bundle
>3182	Identifier	f
>3183	Identifier	f
>3184	IdentifierDeclType	std 
<3=11,4
<4=8,5
<5=7,6
<8=10,9
<11=256,244,232,220,208,196,182,169,165,156,126,117,92,83,69,60,46,37,30,24,20,16,12
<12=13
<13=15,14
<16=17
<17=19,18
<20=21
<21=23,22
<24=25
<25=27,26
<27=29,28
<30=31
<31=36,35,32
<32=34,33
<37=38
<38=42,39
<39=40
<40=41
<42=43
<43=45,44
<46=47
<47=57,48
<48=54,49
<49=53,50
<50=52,51
<54=56,55
<57=59,58
<60=61
<61=65,62
<62=63
<63=64
<65=66
<66=68,67
<69=70
<70=80,71
<71=77,72
<72=76,73
<73=75,74
<77=79,78
<80=82,81
<83=84
<84=88,85
<85=86
<86=87
<88=89
<89=91,90
<92=109,105,102,93
<93=94
<94=95
<95=99,96
<96=98,97
<99=101,100
<102=104,103
<105=106
<106=108,107
<109=110
<110=111
<111=116,115,112
<112=114,113
<117=118
<118=122,119
<119=120
<120=121
<122=123
<123=125,124
<126=148,144,141,127
<127=128
<128=129
<129=138,130
<130=136,131
<131=132
<132=133
<133=135,134
<136=137
<138=140,139
<141=143,142
<144=145
<145=147,146
<148=149
<149=150
<150=155,154,151
<151=153,152
<156=157
<157=161,158
<158=159
<159=160
<161=162
<162=164,163
<165=166
<166=168,167
<169=170
<170=181,171
<171=180,172
<172=176,173
<173=174
<174=175
<176=177
<177=179,178
<182=183
<183=195,184
<184=186,185
<186=192,187
<187=191,188
<188=190,189
<192=194,193
<196=197
<197=207,198
<198=204,199
<199=203,200
<200=202,201
<204=206,205
<208=209
<209=219,210
<210=216,211
<211=215,212
<212=214,213
<216=218,217
<220=221
<221=231,222
<222=228,223
<223=227,224
<224=226,225
<228=230,229
<232=233
<233=243,234
<234=240,235
<235=239,236
<236=238,237
<240=242,241
<244=245
<245=255,246
<246=252,247
<247=251,248
<248=250,249
<252=254,253
<256=257
<257=267,258
<258=264,259
<259=263,260
<260=262,261
<264=266,265
<312=320,313
<313=317,314
<314=316,315
<317=319,318
<320=321
<321=322
<322=326,323
<323=324
<324=325
<326=327
<333=335,334
<339=342,341,340
<342=521,509,493,479,465,461,457,347,343
<343=344
<344=346,345
<347=449,445,442,348
<348=434,423,405,379,349
<349=371,367,364,350
<350=351
<351=361,352
<352=360,353
<353=359,354
<354=356,355
<356=358,357
<361=363,362
<364=366,365
<367=368
<368=370,369
<371=372
<372=373
<373=378,377,374
<374=376,375
<379=380
<380=404,403,381
<381=402,382
<382=400,383
<383=393,386,384
<384=385
<386=387
<387=389,388
<389=390
<390=392,391
<393=394
<394=396,395
<396=397
<397=399,398
<400=401
<405=406
<406=420,407
<407=418,408
<408=409
<409=410
<410=412,411
<412=414,413
<414=415
<415=417,416
<418=419
<420=422,421
<423=424
<424=430,425
<425=428,426
<426=427
<428=429
<430=431
<431=433,432
<434=435
<435=441,436
<436=440,437
<437=439,438
<442=444,443
<445=446
<446=448,447
<449=450
<450=451
<451=456,455,452
<452=454,453
<457=458
<458=460,459
<461=462
<462=464,463
<465=466
<466=478,477,467
<467=476,468
<468=475,469
<469=471,470
<471=472
<472=474,473
<479=480
<480=491,481
<481=482
<482=483
<483=485,484
<485=487,486
<487=488
<488=490,489
<491=492
<493=494
<494=507,495
<495=496
<496=497
<497=501,498
<498=500,499
<501=503,502
<503=504
<504=506,505
<507=508
<509=510
<510=520,519,511
<511=518,512
<512=514,513
<514=515
<515=517,516
<521=532,522
<522=523
<523=530,524
<524=525
<525=526
<526=528,527
<528=529
<530=531
<532=533
<533=535,534
<568=571,570,569
<571=1026,1025,1024,1023,1022,1020,992,964,936,908,880,852,824,796,768,740,712,684,656,628,600,574,572
<572=573
<574=575
<575=594,576
<576=592,577
<577=578
<578=590,579
<579=588,586,584,582,580
<580=581
<582=583
<584=585
<586=587
<588=589
<590=591
<592=593
<594=595
<595=597,596
<597=599,598
<600=601
<601=622,602
<602=620,603
<603=604
<604=618,605
<605=616,614,612,610,608,606
<606=607
<608=609
<610=611
<612=613
<614=615
<616=617
<618=619
<620=621
<622=623
<623=625,624
<625=627,626
<628=629
<629=650,630
<630=648,631
<631=632
<632=646,633
<633=644,642,640,638,636,634
<634=635
<636=637
<638=639
<640=641
<642=643
<644=645
<646=647
<648=649
<650=651
<651=653,652
<653=655,654
<656=657
<657=678,658
<658=676,659
<659=660
<660=674,661
<661=672,670,668,666,664,662
<662=663
<664=665
<666=667
<668=669
<670=671
<672=673
<674=675
<676=677
<678=679
<679=681,680
<681=683,682
<684=685
<685=706,686
<686=704,687
<687=688
<688=702,689
<689=700,698,696,694,692,690
<690=691
<692=693
<694=695
<696=697
<698=699
<700=701
<702=703
<704=705
<706=707
<707=709,708
<709=711,710
<712=713
<713=734,714
<714=732,715
<715=716
<716=730,717
<717=728,726,724,722,720,718
<718=719
<720=721
<722=723
<724=725
<726=727
<728=729
<730=731
<732=733
<734=735
<735=737,736
<737=739,738
<740=741
<741=762,742
<742=760,743
<743=744
<744=758,745
<745=756,754,752,750,748,746
<746=747
<748=749
<750=751
<752=753
<754=755
<756=757
<758=759
<760=761
<762=763
<763=765,764
<765=767,766
<768=769
<769=790,770
<770=788,771
<771=772
<772=786,773
<773=784,782,780,778,776,774
<774=775
<776=777
<778=779
<780=781
<782=783
<784=785
<786=787
<788=789
<790=791
<791=793,792
<793=795,794
<796=797
<797=818,798
<798=816,799
<799=800
<800=814,801
<801=812,810,808,806,804,802
<802=803
<804=805
<806=807
<808=809
<810=811
<812=813
<814=815
<816=817
<818=819
<819=821,820
<821=823,822
<824=825
<825=846,826
<826=844,827
<827=828
<828=842,829
<829=840,838,836,834,832,830
<830=831
<832=833
<834=835
<836=837
<838=839
<840=841
<842=843
<844=845
<846=847
<847=849,848
<849=851,850
<852=853
<853=874,854
<854=872,855
<855=856
<856=870,857
<857=868,866,864,862,860,858
<858=859
<860=861
<862=863
<864=865
<866=867
<868=869
<870=871
<872=873
<874=875
<875=877,876
<877=879,878
<880=881
<881=902,882
<882=900,883
<883=884
<884=898,885
<885=896,894,892,890,888,886
<886=887
<888=889
<890=891
<892=893
<894=895
<896=897
<898=899
<900=901
<902=903
<903=905,904
<905=907,906
<908=909
<909=930,910
<910=928,911
<911=912
<912=926,913
<913=924,922,920,918,916,914
<914=915
<916=917
<918=919
<920=921
<922=923
<924=925
<926=927
<928=929
<930=931
<931=933,932
<933=935,934
<936=937
<937=958,938
<938=956,939
<939=940
<940=954,941
<941=952,950,948,946,944,942
<942=943
<944=945
<946=947
<948=949
<950=951
<952=953
<954=955
<956=957
<958=959
<959=961,960
<961=963,962
<964=965
<965=986,966
<966=984,967
<967=968
<968=982,969
<969=980,978,976,974,972,970
<970=971
<972=973
<974=975
<976=977
<978=979
<980=981
<982=983
<984=985
<986=987
<987=989,988
<989=991,990
<992=993
<993=1014,994
<994=1012,995
<995=996
<996=1010,997
<997=1008,1006,1004,1002,1000,998
<998=999
<1000=1001
<1002=1003
<1004=1005
<1006=1007
<1008=1009
<1010=1011
<1012=1013
<1014=1015
<1015=1017,1016
<1017=1019,1018
<1020=1021
<1049=1058,1057,1050
<1050=1054,1051
<1051=1053,1052
<1054=1056,1055
<1058=1059
<1059=1071,1068,1060
<1060=1061
<1061=1062
<1062=1063
<1063=1067,1064
<1064=1066,1065
<1068=1069
<1069=1070
<1071=1072
<1072=1074,1073
<1081=1093,1092,1082
<1082=1089,1086,1083
<1083=1085,1084
<1086=1088,1087
<1089=1091,1090
<1093=1094
<1094=1108,1103,1095
<1095=1096
<1096=1097
<1097=1098
<1098=1102,1099
<1099=1101,1100
<1103=1104
<1104=1105
<1105=1107,1106
<1108=1109
<1109=1111,1110
<1119=1131,1130,1120
<1120=1127,1124,1121
<1121=1123,1122
<1124=1126,1125
<1127=1129,1128
<1131=1132
<1132=1501,1491,1133
<1133=1134
<1134=1487,1477,1135
<1135=1136
<1136=1473,1463,1137
<1137=1138
<1138=1459,1449,1139
<1139=1140
<1140=1445,1435,1141
<1141=1142
<1142=1431,1421,1143
<1143=1144
<1144=1417,1395,1145
<1145=1146
<1146=1391,1357,1147
<1147=1148
<1148=1353,1319,1149
<1149=1150
<1150=1315,1291,1151
<1151=1152
<1152=1287,1271,1153
<1153=1154
<1154=1267,1226,1155
<1155=1156
<1156=1222,1165,1157
<1157=1158
<1158=1159
<1159=1160
<1160=1164,1161
<1161=1163,1162
<1165=1212,1203,1166
<1166=1195,1184,1181,1167
<1167=1168
<1168=1169
<1169=1177,1170
<1170=1171
<1171=1172
<1172=1174,1173
<1174=1176,1175
<1177=1178
<1178=1180,1179
<1181=1183,1182
<1184=1185
<1185=1194,1186
<1186=1188,1187
<1188=1189
<1189=1191,1190
<1191=1193,1192
<1195=1196
<1196=1197
<1197=1202,1201,1198
<1198=1200,1199
<1203=1204
<1204=1211,1210,1205
<1205=1209,1206
<1206=1208,1207
<1212=1218,1213
<1213=1214
<1214=1215
<1215=1217,1216
<1218=1219
<1219=1221,1220
<1222=1223
<1223=1225,1224
<1226=1227
<1227=1265,1253,1228
<1228=1229
<1229=1243,1230
<1230=1231
<1231=1239,1232
<1232=1233
<1233=1234
<1234=1238,1235
<1235=1237,1236
<1239=1240
<1240=1242,1241
<1243=1249,1244
<1244=1245
<1245=1246
<1246=1248,1247
<1249=1250
<1250=1252,1251
<1253=1254
<1254=1255
<1255=1261,1256
<1256=1257
<1257=1258
<1258=1260,1259
<1261=1262
<1262=1264,1263
<1265=1266
<1267=1268
<1268=1270,1269
<1271=1272
<1272=1273
<1273=1283,1274
<1274=1275
<1275=1276
<1276=1282,1277
<1277=1280,1279,1278
<1280=1281
<1283=1284
<1284=1286,1285
<1287=1288
<1288=1290,1289
<1291=1305,1292
<1292=1293
<1293=1301,1294
<1294=1295
<1295=1296
<1296=1300,1297
<1297=1299,1298
<1301=1302
<1302=1304,1303
<1305=1311,1306
<1306=1307
<1307=1308
<1308=1310,1309
<1311=1312
<1312=1314,1313
<1315=1316
<1316=1318,1317
<1319=1320
<1320=1345,1336,1333,1321
<1321=1322
<1322=1323
<1323=1329,1324
<1324=1325
<1325=1326
<1326=1328,1327
<1329=1330
<1330=1332,1331
<1333=1335,1334
<1336=1337
<1337=1344,1338
<1338=1340,1339
<1340=1341
<1341=1343,1342
<1345=1346
<1346=1347
<1347=1352,1351,1348
<1348=1350,1349
<1353=1354
<1354=1356,1355
<1357=1358
<1358=1383,1374,1371,1359
<1359=1360
<1360=1361
<1361=1367,1362
<1362=1363
<1363=1364
<1364=1366,1365
<1367=1368
<1368=1370,1369
<1371=1373,1372
<1374=1375
<1375=1382,1376
<1376=1378,1377
<1378=1379
<1379=1381,1380
<1383=1384
<1384=1385
<1385=1390,1389,1386
<1386=1388,1387
<1391=1392
<1392=1394,1393
<1395=1396
<1396=1397
<1397=1413,1398
<1398=1406,1399
<1399=1400
<1400=1402,1401
<1402=1403
<1403=1405,1404
<1406=1407
<1407=1409,1408
<1409=1410
<1410=1412,1411
<1413=1414
<1414=1416,1415
<1417=1418
<1418=1420,1419
<1421=1422
<1422=1423
<1423=1427,1424
<1424=1425
<1425=1426
<1427=1428
<1428=1430,1429
<1431=1432
<1432=1434,1433
<1435=1436
<1436=1437
<1437=1441,1438
<1438=1439
<1439=1440
<1441=1442
<1442=1444,1443
<1445=1446
<1446=1448,1447
<1449=1450
<1450=1451
<1451=1455,1452
<1452=1453
<1453=1454
<1455=1456
<1456=1458,1457
<1459=1460
<1460=1462,1461
<1463=1464
<1464=1465
<1465=1469,1466
<1466=1467
<1467=1468
<1469=1470
<1470=1472,1471
<1473=1474
<1474=1476,1475
<1477=1478
<1478=1479
<1479=1483,1480
<1480=1481
<1481=1482
<1483=1484
<1484=1486,1485
<1487=1488
<1488=1490,1489
<1491=1492
<1492=1493
<1493=1497,1494
<1494=1495
<1495=1496
<1497=1498
<1498=1500,1499
<1501=1502
<1502=1504,1503
<1541=1553,1552,1542
<1542=1549,1546,1543
<1543=1545,1544
<1546=1548,1547
<1549=1551,1550
<1553=1554
<1554=1955,1945,1555
<1555=1556
<1556=1941,1931,1557
<1557=1558
<1558=1927,1917,1559
<1559=1560
<1560=1913,1903,1561
<1561=1562
<1562=1899,1889,1563
<1563=1564
<1564=1885,1875,1565
<1565=1566
<1566=1871,1849,1567
<1567=1568
<1568=1845,1811,1569
<1569=1570
<1570=1807,1773,1571
<1571=1572
<1572=1769,1745,1573
<1573=1574
<1574=1741,1719,1575
<1575=1576
<1576=1715,1674,1577
<1577=1578
<1578=1670,1613,1579
<1579=1580
<1580=1609,1589,1581
<1581=1582
<1582=1583
<1583=1584
<1584=1588,1585
<1585=1587,1586
<1589=1605,1596,1590
<1590=1591
<1591=1595,1592
<1592=1594,1593
<1596=1597
<1597=1601,1598
<1598=1599
<1599=1600
<1601=1602
<1602=1604,1603
<1605=1606
<1606=1608,1607
<1609=1610
<1610=1612,1611
<1613=1660,1651,1614
<1614=1643,1632,1629,1615
<1615=1616
<1616=1617
<1617=1625,1618
<1618=1619
<1619=1620
<1620=1622,1621
<1622=1624,1623
<1625=1626
<1626=1628,1627
<1629=1631,1630
<1632=1633
<1633=1642,1634
<1634=1636,1635
<1636=1637
<1637=1639,1638
<1639=1641,1640
<1643=1644
<1644=1645
<1645=1650,1649,1646
<1646=1648,1647
<1651=1652
<1652=1659,1658,1653
<1653=1657,1654
<1654=1656,1655
<1660=1666,1661
<1661=1662
<1662=1663
<1663=1665,1664
<1666=1667
<1667=1669,1668
<1670=1671
<1671=1673,1672
<1674=1675
<1675=1713,1701,1676
<1676=1677
<1677=1691,1678
<1678=1679
<1679=1687,1680
<1680=1681
<1681=1682
<1682=1686,1683
<1683=1685,1684
<1687=1688
<1688=1690,1689
<1691=1697,1692
<1692=1693
<1693=1694
<1694=1696,1695
<1697=1698
<1698=1700,1699
<1701=1702
<1702=1703
<1703=1709,1704
<1704=1705
<1705=1706
<1706=1708,1707
<1709=1710
<1710=1712,1711
<1713=1714
<1715=1716
<1716=1718,1717
<1719=1737,1728,1720
<1720=1721
<1721=1727,1722
<1722=1725,1724,1723
<1725=1726
<1728=1729
<1729=1733,1730
<1730=1731
<1731=1732
<1733=1734
<1734=1736,1735
<1737=1738
<1738=1740,1739
<1741=1742
<1742=1744,1743
<1745=1759,1746
<1746=1747
<1747=1755,1748
<1748=1749
<1749=1750
<1750=1754,1751
<1751=1753,1752
<1755=1756
<1756=1758,1757
<1759=1765,1760
<1760=1761
<1761=1762
<1762=1764,1763
<1765=1766
<1766=1768,1767
<1769=1770
<1770=1772,1771
<1773=1774
<1774=1799,1790,1787,1775
<1775=1776
<1776=1777
<1777=1783,1778
<1778=1779
<1779=1780
<1780=1782,1781
<1783=1784
<1784=1786,1785
<1787=1789,1788
<1790=1791
<1791=1798,1792
<1792=1794,1793
<1794=1795
<1795=1797,1796
<1799=1800
<1800=1801
<1801=1806,1805,1802
<1802=1804,1803
<1807=1808
<1808=1810,1809
<1811=1812
<1812=1837,1828,1825,1813
<1813=1814
<1814=1815
<1815=1821,1816
<1816=1817
<1817=1818
<1818=1820,1819
<1821=1822
<1822=1824,1823
<1825=1827,1826
<1828=1829
<1829=1836,1830
<1830=1832,1831
<1832=1833
<1833=1835,1834
<1837=1838
<1838=1839
<1839=1844,1843,1840
<1840=1842,1841
<1845=1846
<1846=1848,1847
<1849=1850
<1850=1851
<1851=1870,1852
<1852=1868,1853
<1853=1861,1854
<1854=1855
<1855=1857,1856
<1857=1858
<1858=1860,1859
<1861=1862
<1862=1864,1863
<1864=1865
<1865=1867,1866
<1868=1869
<1871=1872
<1872=1874,1873
<1875=1876
<1876=1877
<1877=1881,1878
<1878=1879
<1879=1880
<1881=1882
<1882=1884,1883
<1885=1886
<1886=1888,1887
<1889=1890
<1890=1891
<1891=1895,1892
<1892=1893
<1893=1894
<1895=1896
<1896=1898,1897
<1899=1900
<1900=1902,1901
<1903=1904
<1904=1905
<1905=1909,1906
<1906=1907
<1907=1908
<1909=1910
<1910=1912,1911
<1913=1914
<1914=1916,1915
<1917=1918
<1918=1919
<1919=1923,1920
<1920=1921
<1921=1922
<1923=1924
<1924=1926,1925
<1927=1928
<1928=1930,1929
<1931=1932
<1932=1933
<1933=1937,1934
<1934=1935
<1935=1936
<1937=1938
<1938=1940,1939
<1941=1942
<1942=1944,1943
<1945=1946
<1946=1947
<1947=1951,1948
<1948=1949
<1949=1950
<1951=1952
<1952=1954,1953
<1955=1956
<1956=1958,1957
<1998=2007,2006,1999
<1999=2003,2000
<2000=2002,2001
<2003=2005,2004
<2007=2008
<2008=2067,2059,2009
<2009=2010
<2010=2055,2047,2011
<2011=2012
<2012=2043,2021,2013
<2013=2014
<2014=2015
<2015=2016
<2016=2020,2017
<2017=2019,2018
<2021=2033,2022
<2022=2023
<2023=2025,2024
<2025=2026
<2026=2028,2027
<2028=2032,2029
<2029=2031,2030
<2033=2039,2034
<2034=2035
<2035=2036
<2036=2038,2037
<2039=2040
<2040=2042,2041
<2043=2044
<2044=2046,2045
<2047=2048
<2048=2049
<2049=2051,2050
<2051=2052
<2052=2054,2053
<2055=2056
<2056=2058,2057
<2059=2060
<2060=2061
<2061=2063,2062
<2063=2064
<2064=2066,2065
<2067=2068
<2068=2070,2069
<2084=2087,2086,2085
<2087=2219,2210,2201,2192,2167,2127,2118,2111,2088
<2088=2103,2099,2096,2089
<2089=2090
<2090=2091
<2091=2093,2092
<2093=2095,2094
<2096=2098,2097
<2099=2100
<2100=2102,2101
<2103=2104
<2104=2105
<2105=2110,2109,2106
<2106=2108,2107
<2111=2112
<2112=2117,2116,2113
<2113=2115,2114
<2118=2119
<2119=2123,2120
<2120=2121
<2121=2122
<2123=2124
<2124=2126,2125
<2127=2163,2128
<2128=2154,2129
<2129=2146,2142,2139,2130
<2130=2131
<2131=2132
<2132=2136,2133
<2133=2135,2134
<2136=2138,2137
<2139=2141,2140
<2142=2143
<2143=2145,2144
<2146=2147
<2147=2148
<2148=2153,2152,2149
<2149=2151,2150
<2154=2155
<2155=2159,2156
<2156=2157
<2157=2158
<2159=2160
<2160=2162,2161
<2163=2164
<2164=2166,2165
<2167=2184,2180,2177,2168
<2168=2169
<2169=2170
<2170=2174,2171
<2171=2173,2172
<2174=2176,2175
<2177=2179,2178
<2180=2181
<2181=2183,2182
<2184=2185
<2185=2186
<2186=2191,2190,2187
<2187=2189,2188
<2192=2193
<2193=2197,2194
<2194=2195
<2195=2196
<2197=2198
<2198=2200,2199
<2201=2202
<2202=2209,2203
<2203=2207,2204
<2204=2205
<2205=2206
<2207=2208
<2210=2211
<2211=2218,2212
<2212=2216,2213
<2213=2214
<2214=2215
<2216=2217
<2219=2220
<2220=2230,2221
<2221=2223,2222
<2223=2224
<2224=2226,2225
<2226=2228,2227
<2228=2229
<2251=2257,2256,2252
<2252=2253
<2253=2255,2254
<2257=2264,2258
<2258=2259
<2259=2263,2260
<2260=2262,2261
<2264=2268,2265
<2265=2266
<2266=2267
<2268=2269
<2269=2271,2270
<2277=2286,2285,2278
<2278=2282,2279
<2279=2281,2280
<2282=2284,2283
<2286=2287
<2287=2288
<2294=2300,2299,2295
<2295=2296
<2296=2298,2297
<2300=2301
<2301=2335,2332,2302
<2302=2303
<2303=2324,2321,2304
<2304=2305
<2305=2317,2314,2306
<2306=2307
<2307=2308
<2308=2309
<2309=2313,2310
<2310=2312,2311
<2314=2315
<2315=2316
<2317=2318
<2318=2320,2319
<2321=2322
<2322=2323
<2324=2325
<2325=2329,2326
<2326=2328,2327
<2329=2331,2330
<2332=2333
<2333=2334
<2335=2336
<2336=2372,2337
<2337=2369,2338
<2338=2366,2339
<2339=2363,2340
<2340=2360,2341
<2341=2357,2342
<2342=2354,2343
<2343=2351,2344
<2344=2348,2345
<2345=2347,2346
<2348=2350,2349
<2351=2353,2352
<2354=2356,2355
<2357=2359,2358
<2360=2362,2361
<2363=2365,2364
<2366=2368,2367
<2369=2371,2370
<2372=2374,2373
<2382=2394,2393,2383
<2383=2390,2387,2384
<2384=2386,2385
<2387=2389,2388
<2390=2392,2391
<2394=2436,2425,2395
<2395=2417,2408,2405,2396
<2396=2397
<2397=2398
<2398=2404,2399
<2399=2401,2400
<2401=2403,2402
<2405=2407,2406
<2408=2409
<2409=2416,2410
<2410=2412,2411
<2412=2413
<2413=2415,2414
<2417=2418
<2418=2419
<2419=2424,2423,2420
<2420=2422,2421
<2425=2426
<2426=2435,2427
<2427=2429,2428
<2429=2431,2430
<2431=2432
<2432=2434,2433
<2436=2437
<2437=2443,2438
<2438=2442,2439
<2439=2441,2440
<2452=2464,2463,2453
<2453=2460,2457,2454
<2454=2456,2455
<2457=2459,2458
<2460=2462,2461
<2464=2530,2526,2522,2505,2501,2497,2488,2465
<2465=2480,2476,2473,2466
<2466=2467
<2467=2468
<2468=2472,2469
<2469=2471,2470
<2473=2475,2474
<2476=2477
<2477=2479,2478
<2480=2481
<2481=2482
<2482=2487,2486,2483
<2483=2485,2484
<2488=2489
<2489=2493,2490
<2490=2491
<2491=2492
<2493=2494
<2494=2496,2495
<2497=2498
<2498=2500,2499
<2501=2502
<2502=2504,2503
<2505=2518,2506
<2506=2507
<2507=2517,2508
<2508=2516,2509
<2509=2515,2510
<2510=2514,2511
<2511=2513,2512
<2518=2519
<2519=2521,2520
<2522=2523
<2523=2525,2524
<2526=2527
<2527=2529,2528
<2530=2531
<2531=2543,2542,2532
<2532=2541,2533
<2533=2535,2534
<2535=2539,2536
<2536=2537
<2537=2538
<2539=2540
<2555=2561,2560,2556
<2556=2557
<2557=2559,2558
<2561=2624,2598,2562
<2562=2584,2574,2570,2563
<2563=2564
<2564=2566,2565
<2566=2567
<2567=2569,2568
<2570=2571
<2571=2573,2572
<2574=2575
<2575=2583,2582,2576
<2576=2578,2577
<2578=2579
<2579=2581,2580
<2584=2585
<2585=2597,2596,2586
<2586=2595,2587
<2587=2591,2588
<2588=2589
<2589=2590
<2591=2592
<2592=2594,2593
<2598=2610,2606,2599
<2599=2600
<2600=2602,2601
<2602=2603
<2603=2605,2604
<2606=2607
<2607=2609,2608
<2610=2611
<2611=2623,2622,2612
<2612=2621,2613
<2613=2617,2614
<2614=2615
<2615=2616
<2617=2618
<2618=2620,2619
<2624=2784,2738,2727,2716,2705,2699,2695,2684,2632,2625
<2625=2626
<2626=2628,2627
<2628=2629
<2629=2631,2630
<2632=2676,2667,2664,2633
<2633=2660,2652,2634
<2634=2635
<2635=2650,2636
<2636=2648,2644,2637
<2637=2638
<2638=2640,2639
<2640=2641
<2641=2643,2642
<2644=2645
<2645=2647,2646
<2648=2649
<2650=2651
<2652=2653
<2653=2659,2654
<2654=2658,2655
<2655=2657,2656
<2660=2661
<2661=2663,2662
<2664=2666,2665
<2667=2668
<2668=2675,2669
<2669=2671,2670
<2671=2672
<2672=2674,2673
<2676=2677
<2677=2678
<2678=2683,2682,2679
<2679=2681,2680
<2684=2685
<2685=2694,2686
<2686=2688,2687
<2688=2690,2689
<2690=2691
<2691=2693,2692
<2695=2696
<2696=2698,2697
<2699=2700
<2700=2704,2701
<2701=2703,2702
<2705=2706
<2706=2714,2707
<2707=2712,2710,2708
<2708=2709
<2710=2711
<2712=2713
<2714=2715
<2716=2717
<2717=2725,2718
<2718=2723,2721,2719
<2719=2720
<2721=2722
<2723=2724
<2725=2726
<2727=2728
<2728=2736,2729
<2729=2734,2732,2730
<2730=2731
<2732=2733
<2734=2735
<2736=2737
<2738=2739
<2739=2783,2740
<2740=2782,2741
<2741=2781,2742
<2742=2780,2743
<2743=2779,2744
<2744=2778,2745
<2745=2777,2746
<2746=2776,2747
<2747=2775,2748
<2748=2774,2749
<2749=2773,2750
<2750=2772,2751
<2751=2771,2752
<2752=2770,2753
<2753=2769,2754
<2754=2768,2755
<2755=2767,2756
<2756=2766,2757
<2757=2765,2758
<2758=2764,2759
<2759=2763,2760
<2760=2762,2761
<2784=2785
<2785=2797,2796,2786
<2786=2795,2787
<2787=2791,2788
<2788=2789
<2789=2790
<2791=2792
<2792=2794,2793
<2816=2822,2821,2817
<2817=2818
<2818=2820,2819
<2822=2961,2897,2823
<2823=2883,2873,2868,2857,2846,2831,2824
<2824=2825
<2825=2827,2826
<2827=2828
<2828=2830,2829
<2831=2837,2832
<2832=2833
<2833=2834
<2834=2836,2835
<2837=2838
<2838=2840,2839
<2840=2844,2841
<2841=2842
<2842=2843
<2844=2845
<2846=2847
<2847=2849,2848
<2849=2856,2850
<2850=2852,2851
<2852=2853
<2853=2855,2854
<2857=2858
<2858=2864,2859
<2859=2862,2860
<2860=2861
<2862=2863
<2864=2865
<2865=2867,2866
<2868=2869
<2869=2872,2871,2870
<2873=2874
<2874=2882,2881,2875
<2875=2877,2876
<2877=2878
<2878=2880,2879
<2883=2884
<2884=2896,2895,2885
<2885=2894,2886
<2886=2890,2887
<2887=2888
<2888=2889
<2890=2891
<2891=2893,2892
<2897=2947,2942,2931,2920,2905,2898
<2898=2899
<2899=2901,2900
<2901=2902
<2902=2904,2903
<2905=2911,2906
<2906=2907
<2907=2908
<2908=2910,2909
<2911=2912
<2912=2914,2913
<2914=2918,2915
<2915=2916
<2916=2917
<2918=2919
<2920=2921
<2921=2923,2922
<2923=2930,2924
<2924=2926,2925
<2926=2927
<2927=2929,2928
<2931=2932
<2932=2938,2933
<2933=2936,2934
<2934=2935
<2936=2937
<2938=2939
<2939=2941,2940
<2942=2943
<2943=2946,2945,2944
<2947=2948
<2948=2960,2959,2949
<2949=2958,2950
<2950=2954,2951
<2951=2952
<2952=2953
<2954=2955
<2955=2957,2956
<2961=3171,3167,3163,3138,3134,3130,3126,3122,3118,3114,3110,3106,3102,3098,3087,3076,3065,3061,3057,3053,3040,3036,3032,3025,3016,2969,2962
<2962=2963
<2963=2965,2964
<2965=2966
<2966=2968,2967
<2969=3008,3004,3001,2970
<2970=2997,2989,2971
<2971=2972
<2972=2987,2973
<2973=2985,2981,2974
<2974=2975
<2975=2977,2976
<2977=2978
<2978=2980,2979
<2981=2982
<2982=2984,2983
<2985=2986
<2987=2988
<2989=2990
<2990=2996,2991
<2991=2995,2992
<2992=2994,2993
<2997=2998
<2998=3000,2999
<3001=3003,3002
<3004=3005
<3005=3007,3006
<3008=3009
<3009=3010
<3010=3015,3014,3011
<3011=3013,3012
<3016=3017
<3017=3021,3018
<3018=3019
<3019=3020
<3021=3022
<3022=3024,3023
<3025=3026
<3026=3028,3027
<3028=3029
<3029=3031,3030
<3032=3033
<3033=3035,3034
<3036=3037
<3037=3039,3038
<3040=3049,3041
<3041=3042
<3042=3048,3043
<3043=3047,3044
<3044=3046,3045
<3049=3050
<3050=3052,3051
<3053=3054
<3054=3056,3055
<3057=3058
<3058=3060,3059
<3061=3062
<3062=3064,3063
<3065=3066
<3066=3074,3067
<3067=3072,3070,3068
<3068=3069
<3070=3071
<3072=3073
<3074=3075
<3076=3077
<3077=3085,3078
<3078=3083,3081,3079
<3079=3080
<3081=3082
<3083=3084
<3085=3086
<3087=3088
<3088=3096,3089
<3089=3094,3092,3090
<3090=3091
<3092=3093
<3094=3095
<3096=3097
<3098=3099
<3099=3101,3100
<3102=3103
<3103=3105,3104
<3106=3107
<3107=3109,3108
<3110=3111
<3111=3113,3112
<3114=3115
<3115=3117,3116
<3118=3119
<3119=3121,3120
<3122=3123
<3123=3125,3124
<3126=3127
<3127=3129,3128
<3130=3131
<3131=3133,3132
<3134=3135
<3135=3137,3136
<3138=3159,3139
<3139=3140
<3140=3141
<3141=3158,3142
<3142=3157,3143
<3143=3151,3144
<3144=3150,3145
<3145=3149,3146
<3146=3148,3147
<3151=3153,3152
<3153=3154
<3154=3156,3155
<3159=3160
<3160=3162,3161
<3163=3164
<3164=3166,3165
<3167=3168
<3168=3170,3169
<3171=3172
<3172=3184,3183,3173
<3173=3182,3174
<3174=3178,3175
<3175=3176
<3176=3177
<3178=3179
<3179=3181,3180
