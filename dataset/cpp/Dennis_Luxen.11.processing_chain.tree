>3	FunctionDef	Prepare 
>4	ParameterList	 
>5	ReturnType	include < vector >
>6	CompoundStatement	 
>10	FunctionDef	Prepare 
>11	ParameterList	 
>12	ReturnType	int
>13	CompoundStatement	 
>14	ReturnStatement	 
>15	PrimaryExpression	0
>16	ExpressionStatement	 
>17	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"finished preprocessing\"
>18	PrimaryExpression	\"finished preprocessing\"
>19	CallExpression	SimpleLogger ( ) . Write ( )
>20	ArgumentList	 
>21	Callee	SimpleLogger ( ) . Write
>22	MemberAccess	SimpleLogger ( ) . Write
>23	Identifier	Write
>24	CallExpression	SimpleLogger ( )
>25	ArgumentList	 
>26	Callee	SimpleLogger
>27	Identifier	SimpleLogger
>28	ExpressionStatement	 
>29	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"Contraction
>30	ShiftExpression	\"Contraction
>31	ShiftExpression	( number_of_edge_based_nodes / TIMER_SEC ( contraction ) ) << \" nodes/sec and \" << number_of_used_edges / \
>32	ShiftExpression	\" nodes/sec and \" << number_of_used_edges / TIMER_SEC ( contraction ) << \" edges/sec\"
>33	ShiftExpression	number_of_used_edges / TIMER_SEC ( contraction ) << \" edges/sec\"
>34	PrimaryExpression	\" edges/sec\"
>35	MultiplicativeExpression	number_of_used_edges / TIMER_SEC ( contraction )
>36	CallExpression	TIMER_SEC ( contraction )
>37	ArgumentList	contraction
>38	Argument	contraction
>39	Identifier	contraction
>40	Callee	TIMER_SEC
>41	Identifier	TIMER_SEC
>42	Identifier	number_of_used_edges
>43	PrimaryExpression	\" nodes/sec and \"
>44	MultiplicativeExpression	number_of_edge_based_nodes / TIMER_SEC ( contraction )
>45	CallExpression	TIMER_SEC ( contraction )
>46	ArgumentList	contraction
>47	Argument	contraction
>48	Identifier	contraction
>49	Callee	TIMER_SEC
>50	Identifier	TIMER_SEC
>51	Identifier	number_of_edge_based_nodes
>52	PrimaryExpression	\"Contraction
>53	CallExpression	SimpleLogger ( ) . Write ( )
>54	ArgumentList	 
>55	Callee	SimpleLogger ( ) . Write
>56	MemberAccess	SimpleLogger ( ) . Write
>57	Identifier	Write
>58	CallExpression	SimpleLogger ( )
>59	ArgumentList	 
>60	Callee	SimpleLogger
>61	Identifier	SimpleLogger
>62	ExpressionStatement	 
>63	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"Expansion  
>64	ShiftExpression	\"Expansion  
>65	ShiftExpression	( number_of_node_based_nodes / TIMER_SEC ( expansion ) ) << \" nodes/sec and \" << ( number_of_edge_based_\
>66	ShiftExpression	\" nodes/sec and \" << ( number_of_edge_based_nodes / TIMER_SEC ( expansion ) ) << \" edges/sec\"
>67	ShiftExpression	( number_of_edge_based_nodes / TIMER_SEC ( expansion ) ) << \" edges/sec\"
>68	PrimaryExpression	\" edges/sec\"
>69	MultiplicativeExpression	number_of_edge_based_nodes / TIMER_SEC ( expansion )
>70	CallExpression	TIMER_SEC ( expansion )
>71	ArgumentList	expansion
>72	Argument	expansion
>73	Identifier	expansion
>74	Callee	TIMER_SEC
>75	Identifier	TIMER_SEC
>76	Identifier	number_of_edge_based_nodes
>77	PrimaryExpression	\" nodes/sec and \"
>78	MultiplicativeExpression	number_of_node_based_nodes / TIMER_SEC ( expansion )
>79	CallExpression	TIMER_SEC ( expansion )
>80	ArgumentList	expansion
>81	Argument	expansion
>82	Identifier	expansion
>83	Callee	TIMER_SEC
>84	Identifier	TIMER_SEC
>85	Identifier	number_of_node_based_nodes
>86	PrimaryExpression	\"Expansion  
>87	CallExpression	SimpleLogger ( ) . Write ( )
>88	ArgumentList	 
>89	Callee	SimpleLogger ( ) . Write
>90	MemberAccess	SimpleLogger ( ) . Write
>91	Identifier	Write
>92	CallExpression	SimpleLogger ( )
>93	ArgumentList	 
>94	Callee	SimpleLogger
>95	Identifier	SimpleLogger
>96	ExpressionStatement	 
>97	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"Preprocessing 
>98	ShiftExpression	\"Preprocessing 
>99	ShiftExpression	TIMER_SEC ( preparing ) << \" seconds\"
>100	PrimaryExpression	\" seconds\"
>101	CallExpression	TIMER_SEC ( preparing )
>102	ArgumentList	preparing
>103	Argument	preparing
>104	Identifier	preparing
>105	Callee	TIMER_SEC
>106	Identifier	TIMER_SEC
>107	PrimaryExpression	\"Preprocessing 
>108	CallExpression	SimpleLogger ( ) . Write ( )
>109	ArgumentList	 
>110	Callee	SimpleLogger ( ) . Write
>111	MemberAccess	SimpleLogger ( ) . Write
>112	Identifier	Write
>113	CallExpression	SimpleLogger ( )
>114	ArgumentList	 
>115	Callee	SimpleLogger
>116	Identifier	SimpleLogger
>117	ExpressionStatement	 
>118	CallExpression	TIMER_STOP ( preparing )
>119	ArgumentList	preparing
>120	Argument	preparing
>121	Identifier	preparing
>122	Callee	TIMER_STOP
>123	Identifier	TIMER_STOP
>124	IdentifierDeclStatement	 
>125	IdentifierDecl	number_of_used_edges = WriteContractedGraph ( number_of_edge_based_nodes , std 
>126	AssignmentExpr	number_of_used_edges = WriteContractedGraph ( number_of_edge_based_nodes , std 
>127	CallExpression	WriteContractedGraph ( number_of_edge_based_nodes , std 
>128	ArgumentList	number_of_edge_based_nodes
>129	Argument	std 
>130	CallExpression	std 
>131	ArgumentList	contracted_edge_list
>132	Argument	contracted_edge_list
>133	Identifier	contracted_edge_list
>134	Callee	std 
>135	Identifier	std 
>136	Argument	std 
>137	CallExpression	std 
>138	ArgumentList	node_based_edge_list
>139	Argument	node_based_edge_list
>140	Identifier	node_based_edge_list
>141	Callee	std 
>142	Identifier	std 
>143	Argument	number_of_edge_based_nodes
>144	Identifier	number_of_edge_based_nodes
>145	Callee	WriteContractedGraph
>146	Identifier	WriteContractedGraph
>147	Identifier	number_of_used_edges
>148	Identifier	number_of_used_edges
>149	IdentifierDeclType	std 
>150	ExpressionStatement	 
>151	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"Contraction took \" << TIMER_SEC ( contraction ) << \" sec\"
>152	ShiftExpression	\"Contraction took \" << TIMER_SEC ( contraction ) << \" sec\"
>153	ShiftExpression	TIMER_SEC ( contraction ) << \" sec\"
>154	PrimaryExpression	\" sec\"
>155	CallExpression	TIMER_SEC ( contraction )
>156	ArgumentList	contraction
>157	Argument	contraction
>158	Identifier	contraction
>159	Callee	TIMER_SEC
>160	Identifier	TIMER_SEC
>161	PrimaryExpression	\"Contraction took \"
>162	CallExpression	SimpleLogger ( ) . Write ( )
>163	ArgumentList	 
>164	Callee	SimpleLogger ( ) . Write
>165	MemberAccess	SimpleLogger ( ) . Write
>166	Identifier	Write
>167	CallExpression	SimpleLogger ( )
>168	ArgumentList	 
>169	Callee	SimpleLogger
>170	Identifier	SimpleLogger
>171	ExpressionStatement	 
>172	CallExpression	TIMER_STOP ( contraction )
>173	ArgumentList	contraction
>174	Argument	contraction
>175	Identifier	contraction
>176	Callee	TIMER_STOP
>177	Identifier	TIMER_STOP
>178	ExpressionStatement	 
>179	CallExpression	ContractGraph ( number_of_edge_based_nodes , edge_based_edge_list , * contracted_edge_list )
>180	ArgumentList	number_of_edge_based_nodes
>181	Argument	* contracted_edge_list
>182	UnaryOp	* contracted_edge_list
>183	Identifier	contracted_edge_list
>184	UnaryOperator	*
>185	Argument	edge_based_edge_list
>186	Identifier	edge_based_edge_list
>187	Argument	number_of_edge_based_nodes
>188	Identifier	number_of_edge_based_nodes
>189	Callee	ContractGraph
>190	Identifier	ContractGraph
>191	ExpressionStatement	 
>192	Statement	 
>193	Statement	 
>194	Statement	 
>195	Statement	 
>196	Statement	 
>197	Statement	 
>198	Statement	 
>199	Statement	 
>200	Statement	 
>201	Statement	 
>202	Statement	 
>203	Statement	 
>204	Statement	 
>205	ExpressionStatement	 
>206	CallExpression	TIMER_START ( contraction )
>207	ArgumentList	contraction
>208	Argument	contraction
>209	Identifier	contraction
>210	Callee	TIMER_START
>211	Identifier	TIMER_START
>212	ExpressionStatement	 
>213	CallExpression	WriteNodeMapping ( std 
>214	ArgumentList	std 
>215	Argument	std 
>216	CallExpression	std 
>217	ArgumentList	internal_to_external_node_map
>218	Argument	internal_to_external_node_map
>219	Identifier	internal_to_external_node_map
>220	Callee	std 
>221	Identifier	std 
>222	Callee	WriteNodeMapping
>223	Identifier	WriteNodeMapping
>224	ExpressionStatement	 
>225	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"writing node map ...\"
>226	PrimaryExpression	\"writing node map ...\"
>227	CallExpression	SimpleLogger ( ) . Write ( )
>228	ArgumentList	 
>229	Callee	SimpleLogger ( ) . Write
>230	MemberAccess	SimpleLogger ( ) . Write
>231	Identifier	Write
>232	CallExpression	SimpleLogger ( )
>233	ArgumentList	 
>234	Callee	SimpleLogger
>235	Identifier	SimpleLogger
>236	ExpressionStatement	 
>237	CallExpression	TIMER_STOP ( rtree )
>238	ArgumentList	rtree
>239	Argument	rtree
>240	Identifier	rtree
>241	Callee	TIMER_STOP
>242	Identifier	TIMER_STOP
>243	ExpressionStatement	 
>244	CallExpression	BuildRTree ( * node_based_edge_list , * internal_to_external_node_map )
>245	ArgumentList	* node_based_edge_list
>246	Argument	* internal_to_external_node_map
>247	UnaryOp	* internal_to_external_node_map
>248	Identifier	internal_to_external_node_map
>249	UnaryOperator	*
>250	Argument	* node_based_edge_list
>251	UnaryOp	* node_based_edge_list
>252	Identifier	node_based_edge_list
>253	UnaryOperator	*
>254	Callee	BuildRTree
>255	Identifier	BuildRTree
>256	ExpressionStatement	 
>257	CallExpression	TIMER_START ( rtree )
>258	ArgumentList	rtree
>259	Argument	rtree
>260	Identifier	rtree
>261	Callee	TIMER_START
>262	Identifier	TIMER_START
>263	ExpressionStatement	 
>264	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"building r-tree ...\"
>265	PrimaryExpression	\"building r-tree ...\"
>266	CallExpression	SimpleLogger ( ) . Write ( )
>267	ArgumentList	 
>268	Callee	SimpleLogger ( ) . Write
>269	MemberAccess	SimpleLogger ( ) . Write
>270	Identifier	Write
>271	CallExpression	SimpleLogger ( )
>272	ArgumentList	 
>273	Callee	SimpleLogger
>274	Identifier	SimpleLogger
>275	ExpressionStatement	 
>276	CallExpression	TIMER_STOP ( expansion )
>277	ArgumentList	expansion
>278	Argument	expansion
>279	Identifier	expansion
>280	Callee	TIMER_STOP
>281	Identifier	TIMER_STOP
>282	ExpressionStatement	 
>283	AssignmentExpr	number_of_edge_based_nodes = graph_size . second
>284	MemberAccess	graph_size . second
>285	Identifier	second
>286	Identifier	graph_size
>287	Identifier	number_of_edge_based_nodes
>288	Statement	 
>289	ExpressionStatement	 
>290	AssignmentExpr	number_of_node_based_nodes = graph_size . first
>291	MemberAccess	graph_size . first
>292	Identifier	first
>293	Identifier	graph_size
>294	Identifier	number_of_node_based_nodes
>295	Statement	 
>296	ExpressionStatement	 
>297	AssignmentExpr	graph_size = BuildEdgeExpandedGraph ( * internal_to_external_node_map , * node_based_edge_list , edge_\
>298	CallExpression	BuildEdgeExpandedGraph ( * internal_to_external_node_map , * node_based_edge_list , edge_based_edge_list )
>299	ArgumentList	* internal_to_external_node_map
>300	Argument	edge_based_edge_list
>301	Identifier	edge_based_edge_list
>302	Argument	* node_based_edge_list
>303	UnaryOp	* node_based_edge_list
>304	Identifier	node_based_edge_list
>305	UnaryOperator	*
>306	Argument	* internal_to_external_node_map
>307	UnaryOp	* internal_to_external_node_map
>308	Identifier	internal_to_external_node_map
>309	UnaryOperator	*
>310	Callee	BuildEdgeExpandedGraph
>311	Identifier	BuildEdgeExpandedGraph
>312	Identifier	graph_size
>313	Statement	 
>314	ExpressionStatement	 
>315	Statement	 
>316	Statement	 
>317	Statement	 
>318	Statement	 
>319	Statement	 
>320	Statement	 
>321	Statement	 
>322	Statement	 
>323	Statement	 
>324	Statement	 
>325	Statement	 
>326	Statement	 
>327	Statement	 
>328	Statement	 
>329	Statement	 
>330	IdentifierDeclStatement	 
>331	IdentifierDecl	edge_based_edge_list
>332	Identifier	edge_based_edge_list
>333	IdentifierDeclType	DeallocatingVector < EdgeBasedEdge >
>334	ExpressionStatement	 
>335	ExpressionStatement	 
>336	Statement	 
>337	Statement	 
>338	Statement	 
>339	Statement	 
>340	Statement	 
>341	Statement	 
>342	Statement	 
>343	Statement	 
>344	Statement	 
>345	Statement	 
>346	Statement	 
>347	Statement	 
>348	Statement	 
>349	Statement	 
>350	Statement	 
>351	ExpressionStatement	 
>352	CallExpression	TIMER_START ( expansion )
>353	ArgumentList	expansion
>354	Argument	expansion
>355	Identifier	expansion
>356	Callee	TIMER_START
>357	Identifier	TIMER_START
>358	ExpressionStatement	 
>359	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"Generating edge-expanded graph representation\"
>360	PrimaryExpression	\"Generating edge-expanded graph representation\"
>361	CallExpression	SimpleLogger ( ) . Write ( )
>362	ArgumentList	 
>363	Callee	SimpleLogger ( ) . Write
>364	MemberAccess	SimpleLogger ( ) . Write
>365	Identifier	Write
>366	CallExpression	SimpleLogger ( )
>367	ArgumentList	 
>368	Callee	SimpleLogger
>369	Identifier	SimpleLogger
>370	ExpressionStatement	 
>371	CallExpression	TIMER_START ( preparing )
>372	ArgumentList	preparing
>373	Argument	preparing
>374	Identifier	preparing
>375	Callee	TIMER_START
>376	Identifier	TIMER_START
>377	Statement	 
>378	Statement	 
>379	Statement	 
>380	Statement	 
>381	Statement	 
>434	FunctionDef	Prepare 
>435	ParameterList	lua_State * lua_state , EdgeBasedGraphFactory 
>436	Parameter	 
>437	Identifier	speed_profile
>438	ParameterType	EdgeBasedGraphFactory 
>439	Parameter	 
>440	Identifier	lua_state
>441	ParameterType	lua_State *
>442	ReturnType	void
>443	CompoundStatement	 
>444	ExpressionStatement	 
>445	AssignmentExpr	speed_profile . has_turn_penalty_function = lua_function_exists ( lua_state , \"turn_function\" )
>446	CallExpression	lua_function_exists ( lua_state , \"turn_function\" )
>447	ArgumentList	lua_state
>448	Argument	\"turn_function\"
>449	PrimaryExpression	\"turn_function\"
>450	Argument	lua_state
>451	Identifier	lua_state
>452	Callee	lua_function_exists
>453	Identifier	lua_function_exists
>454	MemberAccess	speed_profile . has_turn_penalty_function
>455	Identifier	has_turn_penalty_function
>456	Identifier	speed_profile
>457	ExpressionStatement	 
>458	AssignmentExpr	speed_profile . u_turn_penalty = 10 * lua_tointeger ( lua_state , - 1 )
>459	MultiplicativeExpression	10 * lua_tointeger ( lua_state , - 1 )
>460	CallExpression	lua_tointeger ( lua_state , - 1 )
>461	ArgumentList	lua_state
>462	Argument	- 1
>463	UnaryOp	- 1
>464	PrimaryExpression	1
>465	UnaryOperator	-
>466	Argument	lua_state
>467	Identifier	lua_state
>468	Callee	lua_tointeger
>469	Identifier	lua_tointeger
>470	PrimaryExpression	10
>471	MemberAccess	speed_profile . u_turn_penalty
>472	Identifier	u_turn_penalty
>473	Identifier	speed_profile
>474	IfStatement	if ( 0 != luaL_dostring ( lua_state , \"return u_turn_penalty\n\" ) )
>475	CompoundStatement	 
>476	ExpressionStatement	 
>477	CallExpression	osrm 
>478	ArgumentList	msg . str ( )
>479	Argument	msg . str ( )
>480	CallExpression	msg . str ( )
>481	ArgumentList	 
>482	Callee	msg . str
>483	MemberAccess	msg . str
>484	Identifier	str
>485	Identifier	msg
>486	Callee	osrm 
>487	Identifier	osrm 
>488	Statement	 
>489	ExpressionStatement	 
>490	ShiftExpression	msg << lua_tostring ( lua_state , - 1 ) << \" occured in scripting block\"
>491	ShiftExpression	lua_tostring ( lua_state , - 1 ) << \" occured in scripting block\"
>492	PrimaryExpression	\" occured in scripting block\"
>493	CallExpression	lua_tostring ( lua_state , - 1 )
>494	ArgumentList	lua_state
>495	Argument	- 1
>496	UnaryOp	- 1
>497	PrimaryExpression	1
>498	UnaryOperator	-
>499	Argument	lua_state
>500	Identifier	lua_state
>501	Callee	lua_tostring
>502	Identifier	lua_tostring
>503	Identifier	msg
>504	IdentifierDeclStatement	 
>505	IdentifierDecl	msg
>506	Identifier	msg
>507	IdentifierDeclType	std 
>508	Condition	 
>509	EqualityExpression	0 != luaL_dostring ( lua_state , \"return u_turn_penalty\n\" )
>510	CallExpression	luaL_dostring ( lua_state , \"return u_turn_penalty\n\" )
>511	ArgumentList	lua_state
>512	Argument	\"return u_turn_penalty\n\"
>513	PrimaryExpression	\"return u_turn_penalty\n\"
>514	Argument	lua_state
>515	Identifier	lua_state
>516	Callee	luaL_dostring
>517	Identifier	luaL_dostring
>518	PrimaryExpression	0
>519	ExpressionStatement	 
>520	ShiftExpression	SimpleLogger ( ) . Write ( logDEBUG ) << \"traffic_signal_penalty
>521	ShiftExpression	\"traffic_signal_penalty
>522	MemberAccess	speed_profile . traffic_signal_penalty
>523	Identifier	traffic_signal_penalty
>524	Identifier	speed_profile
>525	PrimaryExpression	\"traffic_signal_penalty
>526	CallExpression	SimpleLogger ( ) . Write ( logDEBUG )
>527	ArgumentList	logDEBUG
>528	Argument	logDEBUG
>529	Identifier	logDEBUG
>530	Callee	SimpleLogger ( ) . Write
>531	MemberAccess	SimpleLogger ( ) . Write
>532	Identifier	Write
>533	CallExpression	SimpleLogger ( )
>534	ArgumentList	 
>535	Callee	SimpleLogger
>536	Identifier	SimpleLogger
>537	ExpressionStatement	 
>538	AssignmentExpr	speed_profile . traffic_signal_penalty = 10 * lua_tointeger ( lua_state , - 1 )
>539	MultiplicativeExpression	10 * lua_tointeger ( lua_state , - 1 )
>540	CallExpression	lua_tointeger ( lua_state , - 1 )
>541	ArgumentList	lua_state
>542	Argument	- 1
>543	UnaryOp	- 1
>544	PrimaryExpression	1
>545	UnaryOperator	-
>546	Argument	lua_state
>547	Identifier	lua_state
>548	Callee	lua_tointeger
>549	Identifier	lua_tointeger
>550	PrimaryExpression	10
>551	MemberAccess	speed_profile . traffic_signal_penalty
>552	Identifier	traffic_signal_penalty
>553	Identifier	speed_profile
>554	IfStatement	if ( 0 != luaL_dostring ( lua_state , \"return traffic_signal_penalty\n\" ) )
>555	CompoundStatement	 
>556	ExpressionStatement	 
>557	CallExpression	osrm 
>558	ArgumentList	msg . str ( )
>559	Argument	msg . str ( )
>560	CallExpression	msg . str ( )
>561	ArgumentList	 
>562	Callee	msg . str
>563	MemberAccess	msg . str
>564	Identifier	str
>565	Identifier	msg
>566	Callee	osrm 
>567	Identifier	osrm 
>568	Statement	 
>569	ExpressionStatement	 
>570	ShiftExpression	msg << lua_tostring ( lua_state , - 1 ) << \" occured in scripting block\"
>571	ShiftExpression	lua_tostring ( lua_state , - 1 ) << \" occured in scripting block\"
>572	PrimaryExpression	\" occured in scripting block\"
>573	CallExpression	lua_tostring ( lua_state , - 1 )
>574	ArgumentList	lua_state
>575	Argument	- 1
>576	UnaryOp	- 1
>577	PrimaryExpression	1
>578	UnaryOperator	-
>579	Argument	lua_state
>580	Identifier	lua_state
>581	Callee	lua_tostring
>582	Identifier	lua_tostring
>583	Identifier	msg
>584	IdentifierDeclStatement	 
>585	IdentifierDecl	msg
>586	Identifier	msg
>587	IdentifierDeclType	std 
>588	Condition	 
>589	EqualityExpression	0 != luaL_dostring ( lua_state , \"return traffic_signal_penalty\n\" )
>590	CallExpression	luaL_dostring ( lua_state , \"return traffic_signal_penalty\n\" )
>591	ArgumentList	lua_state
>592	Argument	\"return traffic_signal_penalty\n\"
>593	PrimaryExpression	\"return traffic_signal_penalty\n\"
>594	Argument	lua_state
>595	Identifier	lua_state
>596	Callee	luaL_dostring
>597	Identifier	luaL_dostring
>598	PrimaryExpression	0
>599	IfStatement	if ( 0 != luaL_dofile ( lua_state , config . profile_path . string ( ) . c_str ( ) ) )
>600	CompoundStatement	 
>601	ExpressionStatement	 
>602	CallExpression	osrm 
>603	ArgumentList	msg . str ( )
>604	Argument	msg . str ( )
>605	CallExpression	msg . str ( )
>606	ArgumentList	 
>607	Callee	msg . str
>608	MemberAccess	msg . str
>609	Identifier	str
>610	Identifier	msg
>611	Callee	osrm 
>612	Identifier	osrm 
>613	Statement	 
>614	ExpressionStatement	 
>615	ShiftExpression	msg << lua_tostring ( lua_state , - 1 ) << \" occured in scripting block\"
>616	ShiftExpression	lua_tostring ( lua_state , - 1 ) << \" occured in scripting block\"
>617	PrimaryExpression	\" occured in scripting block\"
>618	CallExpression	lua_tostring ( lua_state , - 1 )
>619	ArgumentList	lua_state
>620	Argument	- 1
>621	UnaryOp	- 1
>622	PrimaryExpression	1
>623	UnaryOperator	-
>624	Argument	lua_state
>625	Identifier	lua_state
>626	Callee	lua_tostring
>627	Identifier	lua_tostring
>628	Identifier	msg
>629	IdentifierDeclStatement	 
>630	IdentifierDecl	msg
>631	Identifier	msg
>632	IdentifierDeclType	std 
>633	Condition	 
>634	EqualityExpression	0 != luaL_dofile ( lua_state , config . profile_path . string ( ) . c_str ( ) )
>635	CallExpression	luaL_dofile ( lua_state , config . profile_path . string ( ) . c_str ( ) )
>636	ArgumentList	lua_state
>637	Argument	config . profile_path . string ( ) . c_str ( )
>638	CallExpression	config . profile_path . string ( ) . c_str ( )
>639	ArgumentList	 
>640	Callee	config . profile_path . string ( ) . c_str
>641	MemberAccess	config . profile_path . string ( ) . c_str
>642	Identifier	c_str
>643	CallExpression	config . profile_path . string ( )
>644	ArgumentList	 
>645	Callee	config . profile_path . string
>646	MemberAccess	config . profile_path . string
>647	Identifier	string
>648	MemberAccess	config . profile_path
>649	Identifier	profile_path
>650	Identifier	config
>651	Argument	lua_state
>652	Identifier	lua_state
>653	Callee	luaL_dofile
>654	Identifier	luaL_dofile
>655	PrimaryExpression	0
>656	ExpressionStatement	 
>657	CallExpression	luaAddScriptFolderToLoadPath ( lua_state , config . profile_path . string ( ) . c_str ( ) )
>658	ArgumentList	lua_state
>659	Argument	config . profile_path . string ( ) . c_str ( )
>660	CallExpression	config . profile_path . string ( ) . c_str ( )
>661	ArgumentList	 
>662	Callee	config . profile_path . string ( ) . c_str
>663	MemberAccess	config . profile_path . string ( ) . c_str
>664	Identifier	c_str
>665	CallExpression	config . profile_path . string ( )
>666	ArgumentList	 
>667	Callee	config . profile_path . string
>668	MemberAccess	config . profile_path . string
>669	Identifier	string
>670	MemberAccess	config . profile_path
>671	Identifier	profile_path
>672	Identifier	config
>673	Argument	lua_state
>674	Identifier	lua_state
>675	Callee	luaAddScriptFolderToLoadPath
>676	Identifier	luaAddScriptFolderToLoadPath
>677	ExpressionStatement	 
>678	CallExpression	luaL_openlibs ( lua_state )
>679	ArgumentList	lua_state
>680	Argument	lua_state
>681	Identifier	lua_state
>682	Callee	luaL_openlibs
>683	Identifier	luaL_openlibs
>704	FunctionDef	Prepare 
>705	ParameterList	 
>706	ReturnType	std 
>707	CompoundStatement	 
>708	ReturnStatement	 
>709	RelationalExpression	std 
>710	RelationalExpression	RestrictionMap > ( restriction_list )
>711	Identifier	restriction_list
>712	Identifier	RestrictionMap
>713	Identifier	std 
>714	ExpressionStatement	 
>715	ShiftExpression	SimpleLogger ( ) . Write ( ) << \" - \" << restriction_list . size ( ) << \" restrictions.\"
>716	ShiftExpression	\" - \" << restriction_list . size ( ) << \" restrictions.\"
>717	ShiftExpression	restriction_list . size ( ) << \" restrictions.\"
>718	PrimaryExpression	\" restrictions.\"
>719	CallExpression	restriction_list . size ( )
>720	ArgumentList	 
>721	Callee	restriction_list . size
>722	MemberAccess	restriction_list . size
>723	Identifier	size
>724	Identifier	restriction_list
>725	PrimaryExpression	\" - \"
>726	CallExpression	SimpleLogger ( ) . Write ( )
>727	ArgumentList	 
>728	Callee	SimpleLogger ( ) . Write
>729	MemberAccess	SimpleLogger ( ) . Write
>730	Identifier	Write
>731	CallExpression	SimpleLogger ( )
>732	ArgumentList	 
>733	Callee	SimpleLogger
>734	Identifier	SimpleLogger
>735	ExpressionStatement	 
>736	CallExpression	loadRestrictionsFromFile ( input_stream , restriction_list )
>737	ArgumentList	input_stream
>738	Argument	restriction_list
>739	Identifier	restriction_list
>740	Argument	input_stream
>741	Identifier	input_stream
>742	Callee	loadRestrictionsFromFile
>743	Identifier	loadRestrictionsFromFile
>744	IdentifierDeclStatement	 
>745	IdentifierDecl	restriction_list
>746	Identifier	restriction_list
>747	IdentifierDeclType	std 
>748	IdentifierDeclStatement	 
>749	IdentifierDecl	input_stream ( config . restrictions_path , std 
>750	Expression	config . restrictions_path , std 
>751	InclusiveOrExpression	std 
>752	Identifier	std 
>753	Identifier	std 
>754	MemberAccess	config . restrictions_path
>755	Identifier	restrictions_path
>756	Identifier	config
>757	Identifier	input_stream
>758	IdentifierDeclType	boost 
>768	FunctionDef	Prepare 
>769	ParameterList	std 
>770	Parameter	 
>771	Identifier	internal_to_external_node_map
>772	ParameterType	std 
>773	Parameter	 
>774	Identifier	traffic_light_list
>775	ParameterType	std 
>776	Parameter	 
>777	Identifier	barrier_node_list
>778	ParameterType	std 
>779	ReturnType	std 
>780	CompoundStatement	 
>781	ReturnStatement	 
>782	CallExpression	NodeBasedDynamicGraphFromImportEdges ( number_of_node_based_nodes , edge_list )
>783	ArgumentList	number_of_node_based_nodes
>784	Argument	edge_list
>785	Identifier	edge_list
>786	Argument	number_of_node_based_nodes
>787	Identifier	number_of_node_based_nodes
>788	Callee	NodeBasedDynamicGraphFromImportEdges
>789	Identifier	NodeBasedDynamicGraphFromImportEdges
>790	IfStatement	if ( edge_list . empty ( ) )
>791	CompoundStatement	 
>792	ExpressionStatement	 
>793	Statement	 
>794	Statement	 
>795	Statement	 
>796	Statement	 
>797	Statement	 
>798	Statement	 
>799	Statement	 
>800	Statement	 
>801	Statement	 
>802	ExpressionStatement	 
>803	ShiftExpression	SimpleLogger ( ) . Write ( logWARNING ) << \"The input data is empty, exiting.\"
>804	PrimaryExpression	\"The input data is empty, exiting.\"
>805	CallExpression	SimpleLogger ( ) . Write ( logWARNING )
>806	ArgumentList	logWARNING
>807	Argument	logWARNING
>808	Identifier	logWARNING
>809	Callee	SimpleLogger ( ) . Write
>810	MemberAccess	SimpleLogger ( ) . Write
>811	Identifier	Write
>812	CallExpression	SimpleLogger ( )
>813	ArgumentList	 
>814	Callee	SimpleLogger
>815	Identifier	SimpleLogger
>816	Condition	 
>817	CallExpression	edge_list . empty ( )
>818	ArgumentList	 
>819	Callee	edge_list . empty
>820	MemberAccess	edge_list . empty
>821	Identifier	empty
>822	Identifier	edge_list
>823	ExpressionStatement	 
>824	CallExpression	loadEdgesFromFile ( input_stream , edge_list )
>825	ArgumentList	input_stream
>826	Argument	edge_list
>827	Identifier	edge_list
>828	Argument	input_stream
>829	Identifier	input_stream
>830	Callee	loadEdgesFromFile
>831	Identifier	loadEdgesFromFile
>832	ExpressionStatement	 
>833	ShiftExpression	SimpleLogger ( ) . Write ( ) << \" - \" << barrier_node_list . size ( ) << \" bollard nodes, \" << traffic_\
>834	ShiftExpression	\" - \" << barrier_node_list . size ( ) << \" bollard nodes, \" << traffic_light_list . size ( ) << \" traffic \
>835	ShiftExpression	barrier_node_list . size ( ) << \" bollard nodes, \" << traffic_light_list . size ( ) << \" traffic lights\"\
>836	ShiftExpression	\" bollard nodes, \" << traffic_light_list . size ( ) << \" traffic lights\"
>837	ShiftExpression	traffic_light_list . size ( ) << \" traffic lights\"
>838	PrimaryExpression	\" traffic lights\"
>839	CallExpression	traffic_light_list . size ( )
>840	ArgumentList	 
>841	Callee	traffic_light_list . size
>842	MemberAccess	traffic_light_list . size
>843	Identifier	size
>844	Identifier	traffic_light_list
>845	PrimaryExpression	\" bollard nodes, \"
>846	CallExpression	barrier_node_list . size ( )
>847	ArgumentList	 
>848	Callee	barrier_node_list . size
>849	MemberAccess	barrier_node_list . size
>850	Identifier	size
>851	Identifier	barrier_node_list
>852	PrimaryExpression	\" - \"
>853	CallExpression	SimpleLogger ( ) . Write ( )
>854	ArgumentList	 
>855	Callee	SimpleLogger ( ) . Write
>856	MemberAccess	SimpleLogger ( ) . Write
>857	Identifier	Write
>858	CallExpression	SimpleLogger ( )
>859	ArgumentList	 
>860	Callee	SimpleLogger
>861	Identifier	SimpleLogger
>862	IdentifierDeclStatement	 
>863	IdentifierDecl	number_of_node_based_nodes = loadNodesFromFile ( input_stream , barrier_node_list , traffic_light_list , internal_\
>864	AssignmentExpr	number_of_node_based_nodes = loadNodesFromFile ( input_stream , barrier_node_list , traffic_light_list , \
>865	CallExpression	loadNodesFromFile ( input_stream , barrier_node_list , traffic_light_list , internal_to_external_node_map )
>866	ArgumentList	input_stream
>867	Argument	internal_to_external_node_map
>868	Identifier	internal_to_external_node_map
>869	Argument	traffic_light_list
>870	Identifier	traffic_light_list
>871	Argument	barrier_node_list
>872	Identifier	barrier_node_list
>873	Argument	input_stream
>874	Identifier	input_stream
>875	Callee	loadNodesFromFile
>876	Identifier	loadNodesFromFile
>877	Identifier	number_of_node_based_nodes
>878	Identifier	number_of_node_based_nodes
>879	IdentifierDeclType	NodeID
>880	IdentifierDeclStatement	 
>881	IdentifierDecl	input_stream ( config . osrm_input_path , std 
>882	Expression	config . osrm_input_path , std 
>883	InclusiveOrExpression	std 
>884	Identifier	std 
>885	Identifier	std 
>886	MemberAccess	config . osrm_input_path
>887	Identifier	osrm_input_path
>888	Identifier	config
>889	Identifier	input_stream
>890	IdentifierDeclType	boost 
>891	IdentifierDeclStatement	 
>892	IdentifierDecl	edge_list
>893	Identifier	edge_list
>894	IdentifierDeclType	std 
>910	FunctionDef	Prepare 
>911	ParameterList	std 
>912	Parameter	 
>913	Identifier	edge_based_edge_list
>914	ParameterType	DeallocatingVector < EdgeBasedEdge > &
>915	Parameter	 
>916	Identifier	node_based_edge_list
>917	ParameterType	std 
>918	Parameter	 
>919	Identifier	internal_to_external_node_map
>920	ParameterType	std 
>921	ReturnType	std 
>922	CompoundStatement	 
>923	ReturnStatement	 
>924	CallExpression	std 
>925	ArgumentList	number_of_node_based_nodes
>926	Argument	number_of_edge_based_nodes
>927	Identifier	number_of_edge_based_nodes
>928	Argument	number_of_node_based_nodes
>929	Identifier	number_of_node_based_nodes
>930	Callee	std 
>931	Identifier	std 
>932	ExpressionStatement	 
>933	CallExpression	edge_based_graph_factory . GetEdgeBasedNodes ( node_based_edge_list )
>934	ArgumentList	node_based_edge_list
>935	Argument	node_based_edge_list
>936	Identifier	node_based_edge_list
>937	Callee	edge_based_graph_factory . GetEdgeBasedNodes
>938	MemberAccess	edge_based_graph_factory . GetEdgeBasedNodes
>939	Identifier	GetEdgeBasedNodes
>940	Identifier	edge_based_graph_factory
>941	ExpressionStatement	 
>942	CallExpression	edge_based_graph_factory . GetEdgeBasedEdges ( edge_based_edge_list )
>943	ArgumentList	edge_based_edge_list
>944	Argument	edge_based_edge_list
>945	Identifier	edge_based_edge_list
>946	Callee	edge_based_graph_factory . GetEdgeBasedEdges
>947	MemberAccess	edge_based_graph_factory . GetEdgeBasedEdges
>948	Identifier	GetEdgeBasedEdges
>949	Identifier	edge_based_graph_factory
>950	ExpressionStatement	 
>951	Statement	 
>952	Statement	 
>953	Statement	 
>954	Statement	 
>955	Statement	 
>956	Statement	 
>957	Statement	 
>958	Statement	 
>959	Statement	 
>960	Statement	 
>961	Statement	 
>962	Statement	 
>963	Statement	 
>964	Statement	 
>965	Statement	 
>966	IdentifierDeclStatement	 
>967	IdentifierDecl	number_of_edge_based_nodes = edge_based_graph_factory . GetNumberOfEdgeBasedNodes ( )
>968	AssignmentExpr	number_of_edge_based_nodes = edge_based_graph_factory . GetNumberOfEdgeBasedNodes ( )
>969	CallExpression	edge_based_graph_factory . GetNumberOfEdgeBasedNodes ( )
>970	ArgumentList	 
>971	Callee	edge_based_graph_factory . GetNumberOfEdgeBasedNodes
>972	MemberAccess	edge_based_graph_factory . GetNumberOfEdgeBasedNodes
>973	Identifier	GetNumberOfEdgeBasedNodes
>974	Identifier	edge_based_graph_factory
>975	Identifier	number_of_edge_based_nodes
>976	Identifier	number_of_edge_based_nodes
>977	IdentifierDeclType	const std 
>978	ExpressionStatement	 
>979	CallExpression	lua_close ( lua_state )
>980	ArgumentList	lua_state
>981	Argument	lua_state
>982	Identifier	lua_state
>983	Callee	lua_close
>984	Identifier	lua_close
>985	ExpressionStatement	 
>986	CallExpression	edge_based_graph_factory . Run ( config . edge_output_path , config . geometry_output_path , lua_state )
>987	ArgumentList	config . edge_output_path
>988	Argument	lua_state
>989	Identifier	lua_state
>990	Argument	config . geometry_output_path
>991	MemberAccess	config . geometry_output_path
>992	Identifier	geometry_output_path
>993	Identifier	config
>994	Argument	config . edge_output_path
>995	MemberAccess	config . edge_output_path
>996	Identifier	edge_output_path
>997	Identifier	config
>998	Callee	edge_based_graph_factory . Run
>999	MemberAccess	edge_based_graph_factory . Run
>1000	Identifier	Run
>1001	Identifier	edge_based_graph_factory
>1002	IdentifierDeclStatement	 
>1003	IdentifierDecl	edge_based_graph_factory ( node_based_graph , restriction_map , std 
>1004	Expression	node_based_graph , restriction_map , std 
>1005	Expression	restriction_map , std 
>1006	Expression	std 
>1007	Expression	std 
>1008	Expression	internal_to_external_node_map , speed_profile
>1009	Identifier	speed_profile
>1010	Identifier	internal_to_external_node_map
>1011	CallExpression	std 
>1012	ArgumentList	traffic_light_list
>1013	Argument	traffic_light_list
>1014	Identifier	traffic_light_list
>1015	Callee	std 
>1016	Identifier	std 
>1017	CallExpression	std 
>1018	ArgumentList	barrier_node_list
>1019	Argument	barrier_node_list
>1020	Identifier	barrier_node_list
>1021	Callee	std 
>1022	Identifier	std 
>1023	Identifier	restriction_map
>1024	Identifier	node_based_graph
>1025	Identifier	edge_based_graph_factory
>1026	IdentifierDeclType	EdgeBasedGraphFactory
>1027	IdentifierDeclStatement	 
>1028	IdentifierDecl	number_of_node_based_nodes = node_based_graph -> GetNumberOfNodes ( )
>1029	AssignmentExpr	number_of_node_based_nodes = node_based_graph -> GetNumberOfNodes ( )
>1030	CallExpression	node_based_graph -> GetNumberOfNodes ( )
>1031	ArgumentList	 
>1032	Callee	node_based_graph -> GetNumberOfNodes
>1033	PtrMemberAccess	node_based_graph -> GetNumberOfNodes
>1034	Identifier	GetNumberOfNodes
>1035	Identifier	node_based_graph
>1036	Identifier	number_of_node_based_nodes
>1037	Identifier	number_of_node_based_nodes
>1038	IdentifierDeclType	const std 
>1039	ExpressionStatement	 
>1040	AssignmentExpr	node_based_graph = LoadNodeBasedGraph ( * barrier_node_list , * traffic_light_list , internal_to_external_\
>1041	CallExpression	LoadNodeBasedGraph ( * barrier_node_list , * traffic_light_list , internal_to_external_node_map )
>1042	ArgumentList	* barrier_node_list
>1043	Argument	internal_to_external_node_map
>1044	Identifier	internal_to_external_node_map
>1045	Argument	* traffic_light_list
>1046	UnaryOp	* traffic_light_list
>1047	Identifier	traffic_light_list
>1048	UnaryOperator	*
>1049	Argument	* barrier_node_list
>1050	UnaryOp	* barrier_node_list
>1051	Identifier	barrier_node_list
>1052	UnaryOperator	*
>1053	Callee	LoadNodeBasedGraph
>1054	Identifier	LoadNodeBasedGraph
>1055	Identifier	node_based_graph
>1056	Statement	 
>1057	ExpressionStatement	 
>1058	AssignmentExpr	restriction_map = LoadRestrictionMap ( )
>1059	CallExpression	LoadRestrictionMap ( )
>1060	ArgumentList	 
>1061	Callee	LoadRestrictionMap
>1062	Identifier	LoadRestrictionMap
>1063	Identifier	restriction_map
>1064	Statement	 
>1065	ExpressionStatement	 
>1066	Statement	 
>1067	Statement	 
>1068	Statement	 
>1069	Statement	 
>1070	Statement	 
>1071	Statement	 
>1072	Statement	 
>1073	Statement	 
>1074	Statement	 
>1075	Statement	 
>1076	Statement	 
>1077	Statement	 
>1078	Statement	 
>1079	Statement	 
>1080	Statement	 
>1081	ExpressionStatement	 
>1082	Statement	 
>1083	Statement	 
>1084	Statement	 
>1085	Statement	 
>1086	Statement	 
>1087	Statement	 
>1088	Statement	 
>1089	Statement	 
>1090	Statement	 
>1091	Statement	 
>1092	Statement	 
>1093	Statement	 
>1094	Statement	 
>1095	Statement	 
>1096	Statement	 
>1097	ExpressionStatement	 
>1098	CallExpression	SetupScriptingEnvironment ( lua_state , speed_profile )
>1099	ArgumentList	lua_state
>1100	Argument	speed_profile
>1101	Identifier	speed_profile
>1102	Argument	lua_state
>1103	Identifier	lua_state
>1104	Callee	SetupScriptingEnvironment
>1105	Identifier	SetupScriptingEnvironment
>1106	IdentifierDeclStatement	 
>1107	IdentifierDecl	speed_profile
>1108	Identifier	speed_profile
>1109	IdentifierDeclType	EdgeBasedGraphFactory 
>1110	ExpressionStatement	 
>1111	CallExpression	luabind 
>1112	ArgumentList	lua_state
>1113	Argument	lua_state
>1114	Identifier	lua_state
>1115	Callee	luabind 
>1116	Identifier	luabind 
>1117	IdentifierDeclStatement	 
>1118	IdentifierDecl	* lua_state = luaL_newstate ( )
>1119	AssignmentExpr	* lua_state = luaL_newstate ( )
>1120	CallExpression	luaL_newstate ( )
>1121	ArgumentList	 
>1122	Callee	luaL_newstate
>1123	Identifier	luaL_newstate
>1124	Identifier	lua_state
>1125	Identifier	lua_state
>1126	IdentifierDeclType	lua_State *
>1154	FunctionDef	Prepare 
>1155	ParameterList	const std 
>1156	Parameter	 
>1157	Identifier	contracted_edge_list
>1158	ParameterType	DeallocatingVector < QueryEdge > &
>1159	Parameter	 
>1160	Identifier	edge_based_edge_list
>1161	ParameterType	DeallocatingVector < EdgeBasedEdge > &
>1162	Parameter	 
>1163	Identifier	number_of_edge_based_nodes
>1164	ParameterType	const std 
>1165	ReturnType	void
>1166	CompoundStatement	 
>1167	ExpressionStatement	 
>1168	CallExpression	contractor . GetEdges ( contracted_edge_list )
>1169	ArgumentList	contracted_edge_list
>1170	Argument	contracted_edge_list
>1171	Identifier	contracted_edge_list
>1172	Callee	contractor . GetEdges
>1173	MemberAccess	contractor . GetEdges
>1174	Identifier	GetEdges
>1175	Identifier	contractor
>1176	ExpressionStatement	 
>1177	CallExpression	contractor . Run ( )
>1178	ArgumentList	 
>1179	Callee	contractor . Run
>1180	MemberAccess	contractor . Run
>1181	Identifier	Run
>1182	Identifier	contractor
>1183	IdentifierDeclStatement	 
>1184	IdentifierDecl	contractor ( number_of_edge_based_nodes , edge_based_edge_list )
>1185	Expression	number_of_edge_based_nodes , edge_based_edge_list
>1186	Identifier	edge_based_edge_list
>1187	Identifier	number_of_edge_based_nodes
>1188	Identifier	contractor
>1189	IdentifierDeclType	Contractor
>1201	FunctionDef	Prepare 
>1202	ParameterList	const std 
>1203	Parameter	 
>1204	Identifier	internal_to_external_node_map
>1205	ParameterType	const std 
>1206	Parameter	 
>1207	Identifier	node_based_edge_list
>1208	ParameterType	const std 
>1209	ReturnType	void
>1210	CompoundStatement	 
>1211	ExpressionStatement	 
>1212	RelationalExpression	StaticRTree < EdgeBasedNode > ( node_based_edge_list , config . rtree_nodes_output_path . c_str ( ) , \
>1213	RelationalExpression	EdgeBasedNode > ( node_based_edge_list , config . rtree_nodes_output_path . c_str ( ) , config . rtree_\
>1214	Expression	node_based_edge_list , config . rtree_nodes_output_path . c_str ( ) , config . rtree_leafs_output_path . c_str ( ) , \
>1215	Expression	config . rtree_nodes_output_path . c_str ( ) , config . rtree_leafs_output_path . c_str ( ) , internal_to_external_\
>1216	Expression	config . rtree_leafs_output_path . c_str ( ) , internal_to_external_node_map
>1217	Identifier	internal_to_external_node_map
>1218	CallExpression	config . rtree_leafs_output_path . c_str ( )
>1219	ArgumentList	 
>1220	Callee	config . rtree_leafs_output_path . c_str
>1221	MemberAccess	config . rtree_leafs_output_path . c_str
>1222	Identifier	c_str
>1223	MemberAccess	config . rtree_leafs_output_path
>1224	Identifier	rtree_leafs_output_path
>1225	Identifier	config
>1226	CallExpression	config . rtree_nodes_output_path . c_str ( )
>1227	ArgumentList	 
>1228	Callee	config . rtree_nodes_output_path . c_str
>1229	MemberAccess	config . rtree_nodes_output_path . c_str
>1230	Identifier	c_str
>1231	MemberAccess	config . rtree_nodes_output_path
>1232	Identifier	rtree_nodes_output_path
>1233	Identifier	config
>1234	Identifier	node_based_edge_list
>1235	Identifier	EdgeBasedNode
>1236	Identifier	StaticRTree
<3=6,5,4
<10=13,12,11
<13=381,380,379,378,377,370,358,351,350,349,348,347,346,345,344,343,342,341,340,339,338,337,336,335,334,330,329,328,327,326,14,16,28,62,96,117,124,150,171,178,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,212,224,236,243,256,263,275,282,288,289,295,296,313,314,315,316,317,318,319,320,321,322,323,324,325
<14=15
<16=17
<17=19,18
<19=21,20
<21=22
<22=24,23
<24=26,25
<26=27
<28=29
<29=53,30
<30=52,31
<31=44,32
<32=43,33
<33=35,34
<35=42,36
<36=40,37
<37=38
<38=39
<40=41
<44=51,45
<45=49,46
<46=47
<47=48
<49=50
<53=55,54
<55=56
<56=58,57
<58=60,59
<60=61
<62=63
<63=87,64
<64=86,65
<65=78,66
<66=77,67
<67=69,68
<69=76,70
<70=74,71
<71=72
<72=73
<74=75
<78=85,79
<79=83,80
<80=81
<81=82
<83=84
<87=89,88
<89=90
<90=92,91
<92=94,93
<94=95
<96=97
<97=108,98
<98=107,99
<99=101,100
<101=105,102
<102=103
<103=104
<105=106
<108=110,109
<110=111
<111=113,112
<113=115,114
<115=116
<117=118
<118=122,119
<119=120
<120=121
<122=123
<124=125
<125=149,148,126
<126=147,127
<127=145,128
<128=143,136,129
<129=130
<130=134,131
<131=132
<132=133
<134=135
<136=137
<137=141,138
<138=139
<139=140
<141=142
<143=144
<145=146
<150=151
<151=162,152
<152=161,153
<153=155,154
<155=159,156
<156=157
<157=158
<159=160
<162=164,163
<164=165
<165=167,166
<167=169,168
<169=170
<171=172
<172=176,173
<173=174
<174=175
<176=177
<178=179
<179=189,180
<180=187,185,181
<181=182
<182=184,183
<185=186
<187=188
<189=190
<205=206
<206=210,207
<207=208
<208=209
<210=211
<212=213
<213=222,214
<214=215
<215=216
<216=220,217
<217=218
<218=219
<220=221
<222=223
<224=225
<225=227,226
<227=229,228
<229=230
<230=232,231
<232=234,233
<234=235
<236=237
<237=241,238
<238=239
<239=240
<241=242
<243=244
<244=254,245
<245=250,246
<246=247
<247=249,248
<250=251
<251=253,252
<254=255
<256=257
<257=261,258
<258=259
<259=260
<261=262
<263=264
<264=266,265
<266=268,267
<268=269
<269=271,270
<271=273,272
<273=274
<275=276
<276=280,277
<277=278
<278=279
<280=281
<282=283
<283=287,284
<284=286,285
<289=290
<290=294,291
<291=293,292
<296=297
<297=312,298
<298=310,299
<299=306,302,300
<300=301
<302=303
<303=305,304
<306=307
<307=309,308
<310=311
<330=331
<331=333,332
<351=352
<352=356,353
<353=354
<354=355
<356=357
<358=359
<359=361,360
<361=363,362
<363=364
<364=366,365
<366=368,367
<368=369
<370=371
<371=375,372
<372=373
<373=374
<375=376
<434=443,442,435
<435=439,436
<436=438,437
<439=441,440
<443=677,656,599,554,537,519,474,457,444
<444=445
<445=454,446
<446=452,447
<447=450,448
<448=449
<450=451
<452=453
<454=456,455
<457=458
<458=471,459
<459=470,460
<460=468,461
<461=466,462
<462=463
<463=465,464
<466=467
<468=469
<471=473,472
<474=508,475
<475=504,489,488,476
<476=477
<477=486,478
<478=479
<479=480
<480=482,481
<482=483
<483=485,484
<486=487
<489=490
<490=503,491
<491=493,492
<493=501,494
<494=499,495
<495=496
<496=498,497
<499=500
<501=502
<504=505
<505=507,506
<508=509
<509=518,510
<510=516,511
<511=514,512
<512=513
<514=515
<516=517
<519=520
<520=526,521
<521=525,522
<522=524,523
<526=530,527
<527=528
<528=529
<530=531
<531=533,532
<533=535,534
<535=536
<537=538
<538=551,539
<539=550,540
<540=548,541
<541=546,542
<542=543
<543=545,544
<546=547
<548=549
<551=553,552
<554=588,555
<555=584,569,568,556
<556=557
<557=566,558
<558=559
<559=560
<560=562,561
<562=563
<563=565,564
<566=567
<569=570
<570=583,571
<571=573,572
<573=581,574
<574=579,575
<575=576
<576=578,577
<579=580
<581=582
<584=585
<585=587,586
<588=589
<589=598,590
<590=596,591
<591=594,592
<592=593
<594=595
<596=597
<599=633,600
<600=629,614,613,601
<601=602
<602=611,603
<603=604
<604=605
<605=607,606
<607=608
<608=610,609
<611=612
<614=615
<615=628,616
<616=618,617
<618=626,619
<619=624,620
<620=621
<621=623,622
<624=625
<626=627
<629=630
<630=632,631
<633=634
<634=655,635
<635=653,636
<636=651,637
<637=638
<638=640,639
<640=641
<641=643,642
<643=645,644
<645=646
<646=648,647
<648=650,649
<651=652
<653=654
<656=657
<657=675,658
<658=673,659
<659=660
<660=662,661
<662=663
<663=665,664
<665=667,666
<667=668
<668=670,669
<670=672,671
<673=674
<675=676
<677=678
<678=682,679
<679=680
<680=681
<682=683
<704=707,706,705
<707=748,744,735,714,708
<708=709
<709=713,710
<710=712,711
<714=715
<715=726,716
<716=725,717
<717=719,718
<719=721,720
<721=722
<722=724,723
<726=728,727
<728=729
<729=731,730
<731=733,732
<733=734
<735=736
<736=742,737
<737=740,738
<738=739
<740=741
<742=743
<744=745
<745=747,746
<748=749
<749=758,757,750
<750=754,751
<751=753,752
<754=756,755
<768=780,779,769
<769=776,773,770
<770=772,771
<773=775,774
<776=778,777
<780=891,880,862,832,823,790,781
<781=782
<782=788,783
<783=786,784
<784=785
<786=787
<788=789
<790=816,791
<791=802,801,800,799,798,797,796,795,794,793,792
<802=803
<803=805,804
<805=809,806
<806=807
<807=808
<809=810
<810=812,811
<812=814,813
<814=815
<816=817
<817=819,818
<819=820
<820=822,821
<823=824
<824=830,825
<825=828,826
<826=827
<828=829
<830=831
<832=833
<833=853,834
<834=852,835
<835=846,836
<836=845,837
<837=839,838
<839=841,840
<841=842
<842=844,843
<846=848,847
<848=849
<849=851,850
<853=855,854
<855=856
<856=858,857
<858=860,859
<860=861
<862=863
<863=879,878,864
<864=877,865
<865=875,866
<866=873,871,869,867
<867=868
<869=870
<871=872
<873=874
<875=876
<880=881
<881=890,889,882
<882=886,883
<883=885,884
<886=888,887
<891=892
<892=894,893
<910=922,921,911
<911=918,915,912
<912=914,913
<915=917,916
<918=920,919
<922=1117,1110,1106,1097,1096,1095,1094,1093,1092,1091,1090,1089,1088,1087,923,932,941,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,978,985,1002,1027,1039,1056,1057,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086
<923=924
<924=930,925
<925=928,926
<926=927
<928=929
<930=931
<932=933
<933=937,934
<934=935
<935=936
<937=938
<938=940,939
<941=942
<942=946,943
<943=944
<944=945
<946=947
<947=949,948
<966=967
<967=977,976,968
<968=975,969
<969=971,970
<971=972
<972=974,973
<978=979
<979=983,980
<980=981
<981=982
<983=984
<985=986
<986=998,987
<987=994,990,988
<988=989
<990=991
<991=993,992
<994=995
<995=997,996
<998=999
<999=1001,1000
<1002=1003
<1003=1026,1025,1004
<1004=1024,1005
<1005=1023,1006
<1006=1017,1007
<1007=1011,1008
<1008=1010,1009
<1011=1015,1012
<1012=1013
<1013=1014
<1015=1016
<1017=1021,1018
<1018=1019
<1019=1020
<1021=1022
<1027=1028
<1028=1038,1037,1029
<1029=1036,1030
<1030=1032,1031
<1032=1033
<1033=1035,1034
<1039=1040
<1040=1055,1041
<1041=1053,1042
<1042=1049,1045,1043
<1043=1044
<1045=1046
<1046=1048,1047
<1049=1050
<1050=1052,1051
<1053=1054
<1057=1058
<1058=1063,1059
<1059=1061,1060
<1061=1062
<1097=1098
<1098=1104,1099
<1099=1102,1100
<1100=1101
<1102=1103
<1104=1105
<1106=1107
<1107=1109,1108
<1110=1111
<1111=1115,1112
<1112=1113
<1113=1114
<1115=1116
<1117=1118
<1118=1126,1125,1119
<1119=1124,1120
<1120=1122,1121
<1122=1123
<1154=1166,1165,1155
<1155=1162,1159,1156
<1156=1158,1157
<1159=1161,1160
<1162=1164,1163
<1166=1183,1176,1167
<1167=1168
<1168=1172,1169
<1169=1170
<1170=1171
<1172=1173
<1173=1175,1174
<1176=1177
<1177=1179,1178
<1179=1180
<1180=1182,1181
<1183=1184
<1184=1189,1188,1185
<1185=1187,1186
<1201=1210,1209,1202
<1202=1206,1203
<1203=1205,1204
<1206=1208,1207
<1210=1211
<1211=1212
<1212=1236,1213
<1213=1235,1214
<1214=1234,1215
<1215=1226,1216
<1216=1218,1217
<1218=1220,1219
<1220=1221
<1221=1223,1222
<1223=1225,1224
<1226=1228,1227
<1228=1229
<1229=1231,1230
<1231=1233,1232
