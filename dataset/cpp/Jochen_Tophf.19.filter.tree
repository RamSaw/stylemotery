>3	FunctionDef	Filter 
>4	ParameterList	 
>5	ReturnType	void
>6	CompoundStatement	 
>7	ExpressionStatement	 
>8	CallExpression	all_filters . emplace_back ( new Filter ( ) )
>9	ArgumentList	new Filter ( )
>10	Argument	new Filter ( )
>11	UnaryExpression	new Filter ( )
>12	Callee	all_filters . emplace_back
>13	MemberAccess	all_filters . emplace_back
>14	Identifier	emplace_back
>15	Identifier	all_filters
>20	FunctionDef	Filter 
>21	ParameterList	const v8 
>22	Parameter	 
>23	Identifier	args
>24	ParameterType	const v8 
>25	ReturnType	v8 
>26	CompoundStatement	 
>27	ReturnStatement	 
>28	CallExpression	ThrowException ( v8 
>29	ArgumentList	v8 
>30	Argument	v8 
>31	CallExpression	v8 
>32	ArgumentList	v8 
>33	Argument	v8 
>34	CallExpression	v8 
>35	ArgumentList	\"registering filter failed\"
>36	Argument	\"registering filter failed\"
>37	PrimaryExpression	\"registering filter failed\"
>38	Callee	v8 
>39	Identifier	v8 
>40	Callee	v8 
>41	Identifier	v8 
>42	Callee	ThrowException
>43	Identifier	ThrowException
>44	IfStatement	if ( args . Length ( ) == 1 && args [ 0 ] -> IsObject ( ) )
>45	CompoundStatement	 
>46	ReturnStatement	 
>47	CallExpression	scope . Close ( v8 
>48	ArgumentList	v8 
>49	Argument	v8 
>50	CallExpression	v8 
>51	ArgumentList	static_cast < int32_t > ( Filter 
>52	Argument	static_cast < int32_t > ( Filter 
>53	RelationalExpression	static_cast < int32_t > ( Filter 
>54	RelationalExpression	int32_t > ( Filter 
>55	AdditiveExpression	Filter 
>56	PrimaryExpression	1
>57	CallExpression	Filter 
>58	ArgumentList	 
>59	Callee	Filter 
>60	MemberAccess	Filter 
>61	Identifier	size
>62	Identifier	Filter 
>63	Identifier	int32_t
>64	Identifier	static_cast
>65	Callee	v8 
>66	Identifier	v8 
>67	Callee	scope . Close
>68	MemberAccess	scope . Close
>69	Identifier	Close
>70	Identifier	scope
>71	ExpressionStatement	 
>72	Statement	 
>73	Statement	 
>74	Statement	 
>75	Statement	 
>76	Statement	 
>77	Statement	 
>78	Statement	 
>79	Statement	 
>80	Statement	 
>81	Statement	 
>82	Statement	 
>83	Statement	 
>84	Statement	 
>85	Statement	 
>86	Statement	 
>87	Statement	 
>88	Statement	 
>89	Statement	 
>90	Statement	 
>91	Statement	 
>92	Statement	 
>93	ExpressionStatement	 
>94	CallExpression	Filter 
>95	ArgumentList	object
>96	Argument	object
>97	Identifier	object
>98	Callee	Filter 
>99	MemberAccess	Filter 
>100	Identifier	emplace_back
>101	Identifier	Filter 
>102	ExpressionStatement	 
>103	AssignmentExpr	object = args [ 0 ] -> ToObject ( )
>104	CallExpression	args [ 0 ] -> ToObject ( )
>105	ArgumentList	 
>106	Callee	args [ 0 ] -> ToObject
>107	PtrMemberAccess	args [ 0 ] -> ToObject
>108	Identifier	ToObject
>109	ArrayIndexing	args [ 0 ]
>110	PrimaryExpression	0
>111	Identifier	args
>112	Identifier	object
>113	Statement	 
>114	Condition	 
>115	AndExpression	args . Length ( ) == 1 && args [ 0 ] -> IsObject ( )
>116	CallExpression	args [ 0 ] -> IsObject ( )
>117	ArgumentList	 
>118	Callee	args [ 0 ] -> IsObject
>119	PtrMemberAccess	args [ 0 ] -> IsObject
>120	Identifier	IsObject
>121	ArrayIndexing	args [ 0 ]
>122	PrimaryExpression	0
>123	Identifier	args
>124	EqualityExpression	args . Length ( ) == 1
>125	PrimaryExpression	1
>126	CallExpression	args . Length ( )
>127	ArgumentList	 
>128	Callee	args . Length
>129	MemberAccess	args . Length
>130	Identifier	Length
>131	Identifier	args
>132	IdentifierDeclStatement	 
>133	IdentifierDecl	scope
>134	Identifier	scope
>135	IdentifierDeclType	v8 
>156	FunctionDef	Filter 
>157	ParameterList	size_t id
>158	Parameter	 
>159	Identifier	id
>160	ParameterType	size_t
>161	ReturnType	const Filter &
>162	CompoundStatement	 
>163	ReturnStatement	 
>164	UnaryOp	* Filter 
>165	ArrayIndexing	Filter 
>166	Identifier	id
>167	Identifier	Filter 
>168	UnaryOperator	*
>169	ExpressionStatement	 
>170	CallExpression	assert ( Filter 
>171	ArgumentList	Filter 
>172	Argument	Filter 
>173	RelationalExpression	Filter 
>174	Identifier	id
>175	CallExpression	Filter 
>176	ArgumentList	 
>177	Callee	Filter 
>178	MemberAccess	Filter 
>179	Identifier	size
>180	Identifier	Filter 
>181	Callee	assert
>182	Identifier	assert
>183	IfStatement	if ( id >= Filter 
>184	CompoundStatement	 
>185	ExpressionStatement	 
>186	AssignmentExpr	id = 0
>187	PrimaryExpression	0
>188	Identifier	id
>189	Condition	 
>190	RelationalExpression	id >= Filter 
>191	CallExpression	Filter 
>192	ArgumentList	 
>193	Callee	Filter 
>194	MemberAccess	Filter 
>195	Identifier	size
>196	Identifier	Filter 
>197	Identifier	id
>209	FunctionDef	Filter 
>210	ParameterList	v8 
>211	Parameter	 
>212	Identifier	item_type
>213	ParameterType	osmium 
>214	Parameter	 
>215	Identifier	array
>216	ParameterType	v8 
>217	ReturnType	void
>218	CompoundStatement	 
>219	ForStatement	for ( uint32_t i = 0 ; i < array -> Length ( ) ; ++ i )
>220	CompoundStatement	 
>221	IfStatement	if ( key -> IsString ( ) )
>222	ElseStatement	else
>223	IfStatement	if ( key -> IsNull ( ) )
>224	CompoundStatement	 
>225	ExpressionStatement	 
>226	AssignmentExpr	m_tagged_entity_bits |= osmium 
>227	CallExpression	osmium 
>228	ArgumentList	item_type
>229	Argument	item_type
>230	Identifier	item_type
>231	Callee	osmium 
>232	Identifier	osmium 
>233	Identifier	m_tagged_entity_bits
>234	Condition	 
>235	CallExpression	key -> IsNull ( )
>236	ArgumentList	 
>237	Callee	key -> IsNull
>238	PtrMemberAccess	key -> IsNull
>239	Identifier	IsNull
>240	Identifier	key
>241	CompoundStatement	 
>242	IfStatement	if ( value -> IsString ( ) )
>243	ElseStatement	else
>244	CompoundStatement	 
>245	ExpressionStatement	 
>246	CallExpression	m_filters [ static_cast < uint16_t > ( item_type ) - 1 ] . add ( true , * key_string )
>247	ArgumentList	true
>248	Argument	* key_string
>249	UnaryOp	* key_string
>250	Identifier	key_string
>251	UnaryOperator	*
>252	Argument	true
>253	Identifier	true
>254	Callee	m_filters [ static_cast < uint16_t > ( item_type ) - 1 ] . add
>255	MemberAccess	m_filters [ static_cast < uint16_t > ( item_type ) - 1 ] . add
>256	Identifier	add
>257	ArrayIndexing	m_filters [ static_cast < uint16_t > ( item_type ) - 1 ]
>258	RelationalExpression	static_cast < uint16_t > ( item_type ) - 1
>259	RelationalExpression	uint16_t > ( item_type ) - 1
>260	CastExpression	( item_type ) - 1
>261	UnaryOp	- 1
>262	PrimaryExpression	1
>263	UnaryOperator	-
>264	CastTarget	item_type
>265	Identifier	uint16_t
>266	Identifier	static_cast
>267	Identifier	m_filters
>268	CompoundStatement	 
>269	ExpressionStatement	 
>270	CallExpression	m_filters [ static_cast < uint16_t > ( item_type ) - 1 ] . add ( true , * key_string , * value_string )
>271	ArgumentList	true
>272	Argument	* value_string
>273	UnaryOp	* value_string
>274	Identifier	value_string
>275	UnaryOperator	*
>276	Argument	* key_string
>277	UnaryOp	* key_string
>278	Identifier	key_string
>279	UnaryOperator	*
>280	Argument	true
>281	Identifier	true
>282	Callee	m_filters [ static_cast < uint16_t > ( item_type ) - 1 ] . add
>283	MemberAccess	m_filters [ static_cast < uint16_t > ( item_type ) - 1 ] . add
>284	Identifier	add
>285	ArrayIndexing	m_filters [ static_cast < uint16_t > ( item_type ) - 1 ]
>286	RelationalExpression	static_cast < uint16_t > ( item_type ) - 1
>287	RelationalExpression	uint16_t > ( item_type ) - 1
>288	CastExpression	( item_type ) - 1
>289	UnaryOp	- 1
>290	PrimaryExpression	1
>291	UnaryOperator	-
>292	CastTarget	item_type
>293	Identifier	uint16_t
>294	Identifier	static_cast
>295	Identifier	m_filters
>296	ExpressionStatement	 
>297	CompoundStatement	 
>298	Statement	 
>299	Statement	 
>300	Statement	 
>301	Statement	 
>302	Statement	 
>303	Statement	 
>304	Statement	 
>305	Condition	 
>306	CallExpression	value -> IsString ( )
>307	ArgumentList	 
>308	Callee	value -> IsString
>309	PtrMemberAccess	value -> IsString
>310	Identifier	IsString
>311	Identifier	value
>312	ExpressionStatement	 
>313	CompoundStatement	 
>314	Statement	 
>315	Statement	 
>316	Statement	 
>317	Statement	 
>318	Statement	 
>319	Statement	 
>320	Statement	 
>321	Condition	 
>322	CallExpression	key -> IsString ( )
>323	ArgumentList	 
>324	Callee	key -> IsString
>325	PtrMemberAccess	key -> IsString
>326	Identifier	IsString
>327	Identifier	key
>328	IdentifierDeclStatement	 
>329	IdentifierDecl	value = key_value -> Get ( 1 )
>330	AssignmentExpr	value = key_value -> Get ( 1 )
>331	CallExpression	key_value -> Get ( 1 )
>332	ArgumentList	1
>333	Argument	1
>334	PrimaryExpression	1
>335	Callee	key_value -> Get
>336	PtrMemberAccess	key_value -> Get
>337	Identifier	Get
>338	Identifier	key_value
>339	Identifier	value
>340	Identifier	value
>341	IdentifierDeclType	v8 
>342	IdentifierDeclStatement	 
>343	IdentifierDecl	key = key_value -> Get ( 0 )
>344	AssignmentExpr	key = key_value -> Get ( 0 )
>345	CallExpression	key_value -> Get ( 0 )
>346	ArgumentList	0
>347	Argument	0
>348	PrimaryExpression	0
>349	Callee	key_value -> Get
>350	PtrMemberAccess	key_value -> Get
>351	Identifier	Get
>352	Identifier	key_value
>353	Identifier	key
>354	Identifier	key
>355	IdentifierDeclType	v8 
>356	ExpressionStatement	 
>357	CallExpression	assert ( key_value -> Length ( ) == 2 )
>358	ArgumentList	key_value -> Length ( ) == 2
>359	Argument	key_value -> Length ( ) == 2
>360	EqualityExpression	key_value -> Length ( ) == 2
>361	PrimaryExpression	2
>362	CallExpression	key_value -> Length ( )
>363	ArgumentList	 
>364	Callee	key_value -> Length
>365	PtrMemberAccess	key_value -> Length
>366	Identifier	Length
>367	Identifier	key_value
>368	Callee	assert
>369	Identifier	assert
>370	ExpressionStatement	 
>371	AssignmentExpr	key_value = v8 
>372	CallExpression	v8 
>373	ArgumentList	* element
>374	Argument	* element
>375	UnaryOp	* element
>376	Identifier	element
>377	UnaryOperator	*
>378	Callee	v8 
>379	Identifier	v8 
>380	Identifier	key_value
>381	Statement	 
>382	ExpressionStatement	 
>383	CallExpression	assert ( element -> IsArray ( ) )
>384	ArgumentList	element -> IsArray ( )
>385	Argument	element -> IsArray ( )
>386	CallExpression	element -> IsArray ( )
>387	ArgumentList	 
>388	Callee	element -> IsArray
>389	PtrMemberAccess	element -> IsArray
>390	Identifier	IsArray
>391	Identifier	element
>392	Callee	assert
>393	Identifier	assert
>394	ExpressionStatement	 
>395	AssignmentExpr	element = array -> Get ( i )
>396	CallExpression	array -> Get ( i )
>397	ArgumentList	i
>398	Argument	i
>399	Identifier	i
>400	Callee	array -> Get
>401	PtrMemberAccess	array -> Get
>402	Identifier	Get
>403	Identifier	array
>404	Identifier	element
>405	Statement	 
>406	UnaryExpression	 
>407	Identifier	i
>408	IncDec	++
>409	Condition	 
>410	RelationalExpression	i < array -> Length ( )
>411	CallExpression	array -> Length ( )
>412	ArgumentList	 
>413	Callee	array -> Length
>414	PtrMemberAccess	array -> Length
>415	Identifier	Length
>416	Identifier	array
>417	Identifier	i
>418	ForInit	 
>419	IdentifierDeclStatement	uint32_t i = 0 ;
>420	IdentifierDecl	i = 0
>421	AssignmentExpr	i = 0
>422	PrimaryExpression	0
>423	Identifier	i
>424	Identifier	i
>425	IdentifierDeclType	uint32_t
>426	IfStatement	if ( array -> Length ( ) > 0 )
>427	CompoundStatement	 
>428	ExpressionStatement	 
>429	AssignmentExpr	m_entity_bits |= osmium 
>430	CallExpression	osmium 
>431	ArgumentList	item_type
>432	Argument	item_type
>433	Identifier	item_type
>434	Callee	osmium 
>435	Identifier	osmium 
>436	Identifier	m_entity_bits
>437	Condition	 
>438	RelationalExpression	array -> Length ( ) > 0
>439	PrimaryExpression	0
>440	CallExpression	array -> Length ( )
>441	ArgumentList	 
>442	Callee	array -> Length
>443	PtrMemberAccess	array -> Length
>444	Identifier	Length
>445	Identifier	array
>484	FunctionDef	Filter 
>485	ParameterList	 
>486	CompoundStatement	 
>490	FunctionDef	Filter 
>491	ParameterList	v8 
>492	Parameter	 
>493	Identifier	object
>494	ParameterType	v8 
>495	CompoundStatement	 
>496	ExpressionStatement	 
>497	CallExpression	setup_filter ( v8 
>498	ArgumentList	v8 
>499	Argument	osmium 
>500	Identifier	osmium 
>501	Argument	v8 
>502	CallExpression	v8 
>503	ArgumentList	* object -> Get ( NODE_PSYMBOL ( \"_area\" ) )
>504	Argument	* object -> Get ( NODE_PSYMBOL ( \"_area\" ) )
>505	UnaryOp	* object -> Get ( NODE_PSYMBOL ( \"_area\" ) )
>506	CallExpression	object -> Get ( NODE_PSYMBOL ( \"_area\" ) )
>507	ArgumentList	NODE_PSYMBOL ( \"_area\" )
>508	Argument	NODE_PSYMBOL ( \"_area\" )
>509	CallExpression	NODE_PSYMBOL ( \"_area\" )
>510	ArgumentList	\"_area\"
>511	Argument	\"_area\"
>512	PrimaryExpression	\"_area\"
>513	Callee	NODE_PSYMBOL
>514	Identifier	NODE_PSYMBOL
>515	Callee	object -> Get
>516	PtrMemberAccess	object -> Get
>517	Identifier	Get
>518	Identifier	object
>519	UnaryOperator	*
>520	Callee	v8 
>521	Identifier	v8 
>522	Callee	setup_filter
>523	Identifier	setup_filter
>524	ExpressionStatement	 
>525	CallExpression	setup_filter ( v8 
>526	ArgumentList	v8 
>527	Argument	osmium 
>528	Identifier	osmium 
>529	Argument	v8 
>530	CallExpression	v8 
>531	ArgumentList	* object -> Get ( NODE_PSYMBOL ( \"_changeset\" ) )
>532	Argument	* object -> Get ( NODE_PSYMBOL ( \"_changeset\" ) )
>533	UnaryOp	* object -> Get ( NODE_PSYMBOL ( \"_changeset\" ) )
>534	CallExpression	object -> Get ( NODE_PSYMBOL ( \"_changeset\" ) )
>535	ArgumentList	NODE_PSYMBOL ( \"_changeset\" )
>536	Argument	NODE_PSYMBOL ( \"_changeset\" )
>537	CallExpression	NODE_PSYMBOL ( \"_changeset\" )
>538	ArgumentList	\"_changeset\"
>539	Argument	\"_changeset\"
>540	PrimaryExpression	\"_changeset\"
>541	Callee	NODE_PSYMBOL
>542	Identifier	NODE_PSYMBOL
>543	Callee	object -> Get
>544	PtrMemberAccess	object -> Get
>545	Identifier	Get
>546	Identifier	object
>547	UnaryOperator	*
>548	Callee	v8 
>549	Identifier	v8 
>550	Callee	setup_filter
>551	Identifier	setup_filter
>552	ExpressionStatement	 
>553	CallExpression	setup_filter ( v8 
>554	ArgumentList	v8 
>555	Argument	osmium 
>556	Identifier	osmium 
>557	Argument	v8 
>558	CallExpression	v8 
>559	ArgumentList	* object -> Get ( NODE_PSYMBOL ( \"_relation\" ) )
>560	Argument	* object -> Get ( NODE_PSYMBOL ( \"_relation\" ) )
>561	UnaryOp	* object -> Get ( NODE_PSYMBOL ( \"_relation\" ) )
>562	CallExpression	object -> Get ( NODE_PSYMBOL ( \"_relation\" ) )
>563	ArgumentList	NODE_PSYMBOL ( \"_relation\" )
>564	Argument	NODE_PSYMBOL ( \"_relation\" )
>565	CallExpression	NODE_PSYMBOL ( \"_relation\" )
>566	ArgumentList	\"_relation\"
>567	Argument	\"_relation\"
>568	PrimaryExpression	\"_relation\"
>569	Callee	NODE_PSYMBOL
>570	Identifier	NODE_PSYMBOL
>571	Callee	object -> Get
>572	PtrMemberAccess	object -> Get
>573	Identifier	Get
>574	Identifier	object
>575	UnaryOperator	*
>576	Callee	v8 
>577	Identifier	v8 
>578	Callee	setup_filter
>579	Identifier	setup_filter
>580	ExpressionStatement	 
>581	CallExpression	setup_filter ( v8 
>582	ArgumentList	v8 
>583	Argument	osmium 
>584	Identifier	osmium 
>585	Argument	v8 
>586	CallExpression	v8 
>587	ArgumentList	* object -> Get ( NODE_PSYMBOL ( \"_way\" ) )
>588	Argument	* object -> Get ( NODE_PSYMBOL ( \"_way\" ) )
>589	UnaryOp	* object -> Get ( NODE_PSYMBOL ( \"_way\" ) )
>590	CallExpression	object -> Get ( NODE_PSYMBOL ( \"_way\" ) )
>591	ArgumentList	NODE_PSYMBOL ( \"_way\" )
>592	Argument	NODE_PSYMBOL ( \"_way\" )
>593	CallExpression	NODE_PSYMBOL ( \"_way\" )
>594	ArgumentList	\"_way\"
>595	Argument	\"_way\"
>596	PrimaryExpression	\"_way\"
>597	Callee	NODE_PSYMBOL
>598	Identifier	NODE_PSYMBOL
>599	Callee	object -> Get
>600	PtrMemberAccess	object -> Get
>601	Identifier	Get
>602	Identifier	object
>603	UnaryOperator	*
>604	Callee	v8 
>605	Identifier	v8 
>606	Callee	setup_filter
>607	Identifier	setup_filter
>608	ExpressionStatement	 
>609	CallExpression	setup_filter ( v8 
>610	ArgumentList	v8 
>611	Argument	osmium 
>612	Identifier	osmium 
>613	Argument	v8 
>614	CallExpression	v8 
>615	ArgumentList	* object -> Get ( NODE_PSYMBOL ( \"_node\" ) )
>616	Argument	* object -> Get ( NODE_PSYMBOL ( \"_node\" ) )
>617	UnaryOp	* object -> Get ( NODE_PSYMBOL ( \"_node\" ) )
>618	CallExpression	object -> Get ( NODE_PSYMBOL ( \"_node\" ) )
>619	ArgumentList	NODE_PSYMBOL ( \"_node\" )
>620	Argument	NODE_PSYMBOL ( \"_node\" )
>621	CallExpression	NODE_PSYMBOL ( \"_node\" )
>622	ArgumentList	\"_node\"
>623	Argument	\"_node\"
>624	PrimaryExpression	\"_node\"
>625	Callee	NODE_PSYMBOL
>626	Identifier	NODE_PSYMBOL
>627	Callee	object -> Get
>628	PtrMemberAccess	object -> Get
>629	Identifier	Get
>630	Identifier	object
>631	UnaryOperator	*
>632	Callee	v8 
>633	Identifier	v8 
>634	Callee	setup_filter
>635	Identifier	setup_filter
>656	FunctionDef	Filter 
>657	ParameterList	const osmium 
>658	Parameter	 
>659	Identifier	entity
>660	ParameterType	const osmium 
>661	ReturnType	bool
>662	CompoundStatement	 
>663	ReturnStatement	 
>664	CallExpression	osmium 
>665	ArgumentList	tags
>666	Argument	filter
>667	Identifier	filter
>668	Argument	tags
>669	Identifier	tags
>670	Callee	osmium 
>671	Identifier	osmium 
>672	IfStatement	if ( filter . empty ( ) )
>673	CompoundStatement	 
>674	ReturnStatement	 
>675	Identifier	true
>676	Condition	 
>677	CallExpression	filter . empty ( )
>678	ArgumentList	 
>679	Callee	filter . empty
>680	MemberAccess	filter . empty
>681	Identifier	empty
>682	Identifier	filter
>683	ExpressionStatement	 
>684	AssignmentExpr	& filter = m_filters [ static_cast < uint16_t > ( entity . type ( ) ) - 1 ]
>685	ArrayIndexing	m_filters [ static_cast < uint16_t > ( entity . type ( ) ) - 1 ]
>686	RelationalExpression	static_cast < uint16_t > ( entity . type ( ) ) - 1
>687	RelationalExpression	uint16_t > ( entity . type ( ) ) - 1
>688	AdditiveExpression	( entity . type ( ) ) - 1
>689	PrimaryExpression	1
>690	CallExpression	entity . type ( )
>691	ArgumentList	 
>692	Callee	entity . type
>693	MemberAccess	entity . type
>694	Identifier	type
>695	Identifier	entity
>696	Identifier	uint16_t
>697	Identifier	static_cast
>698	Identifier	m_filters
>699	UnaryOp	& filter
>700	Identifier	filter
>701	UnaryOperator	&
>702	Statement	 
>703	Statement	 
>704	IfStatement	if ( ( m_tagged_entity_bits & osmium 
>705	CompoundStatement	 
>706	ReturnStatement	 
>707	UnaryOp	! tags . empty ( )
>708	CallExpression	tags . empty ( )
>709	ArgumentList	 
>710	Callee	tags . empty
>711	MemberAccess	tags . empty
>712	Identifier	empty
>713	Identifier	tags
>714	UnaryOperator	!
>715	Condition	 
>716	EqualityExpression	( m_tagged_entity_bits & osmium 
>717	PrimaryExpression	0
>718	BitAndExpression	m_tagged_entity_bits & osmium 
>719	CallExpression	osmium 
>720	ArgumentList	entity . type ( )
>721	Argument	entity . type ( )
>722	CallExpression	entity . type ( )
>723	ArgumentList	 
>724	Callee	entity . type
>725	MemberAccess	entity . type
>726	Identifier	type
>727	Identifier	entity
>728	Callee	osmium 
>729	Identifier	osmium 
>730	Identifier	m_tagged_entity_bits
>731	ExpressionStatement	 
>732	CallExpression	( entity ) . tags ( )
>733	ArgumentList	 
>734	Callee	( entity ) . tags
>735	MemberAccess	( entity ) . tags
>736	Identifier	tags
>737	Identifier	entity
>738	Statement	 
>739	Statement	 
>740	Statement	 
>741	Statement	 
>742	Statement	 
>743	Statement	 
>744	Statement	 
>745	Statement	 
>746	Statement	 
>747	Statement	 
>748	Statement	 
>749	Statement	 
>750	Statement	 
>751	Statement	 
>752	Statement	 
>753	Statement	 
>754	Statement	 
>755	Statement	 
>756	Statement	 
>757	Statement	 
>758	Statement	 
>759	Statement	 
>760	Statement	 
>761	Statement	 
>762	Statement	 
>763	Statement	 
>764	Statement	 
>765	Statement	 
>766	Statement	 
>767	Statement	 
>768	Statement	 
>769	Statement	 
>770	Statement	 
>771	Statement	 
>772	Statement	 
>773	Statement	 
>774	Statement	 
>775	Statement	 
>776	Statement	 
>777	Statement	 
>778	Statement	 
>779	Statement	 
>780	Statement	 
>781	IfStatement	if ( ( m_entity_bits & osmium 
>782	CompoundStatement	 
>783	ReturnStatement	 
>784	Identifier	false
>785	Condition	 
>786	EqualityExpression	( m_entity_bits & osmium 
>787	PrimaryExpression	0
>788	BitAndExpression	m_entity_bits & osmium 
>789	CallExpression	osmium 
>790	ArgumentList	entity . type ( )
>791	Argument	entity . type ( )
>792	CallExpression	entity . type ( )
>793	ArgumentList	 
>794	Callee	entity . type
>795	MemberAccess	entity . type
>796	Identifier	type
>797	Identifier	entity
>798	Callee	osmium 
>799	Identifier	osmium 
>800	Identifier	m_entity_bits
<3=6,5,4
<6=7
<7=8
<8=12,9
<9=10
<10=11
<12=13
<13=15,14
<20=26,25,21
<21=22
<22=24,23
<26=132,44,27
<27=28
<28=42,29
<29=30
<30=31
<31=40,32
<32=33
<33=34
<34=38,35
<35=36
<36=37
<38=39
<40=41
<42=43
<44=114,45
<45=113,102,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,46
<46=47
<47=67,48
<48=49
<49=50
<50=65,51
<51=52
<52=53
<53=64,54
<54=63,55
<55=57,56
<57=59,58
<59=60
<60=62,61
<65=66
<67=68
<68=70,69
<93=94
<94=98,95
<95=96
<96=97
<98=99
<99=101,100
<102=103
<103=112,104
<104=106,105
<106=107
<107=109,108
<109=111,110
<114=115
<115=124,116
<116=118,117
<118=119
<119=121,120
<121=123,122
<124=126,125
<126=128,127
<128=129
<129=131,130
<132=133
<133=135,134
<156=162,161,157
<157=158
<158=160,159
<162=183,169,163
<163=164
<164=168,165
<165=167,166
<169=170
<170=181,171
<171=172
<172=173
<173=175,174
<175=177,176
<177=178
<178=180,179
<181=182
<183=189,184
<184=185
<185=186
<186=188,187
<189=190
<190=197,191
<191=193,192
<193=194
<194=196,195
<209=218,217,210
<210=214,211
<211=213,212
<214=216,215
<218=426,219
<219=418,409,406,220
<220=405,394,382,381,370,356,342,328,221
<221=321,241,222
<222=223
<223=234,224
<224=225
<225=226
<226=233,227
<227=231,228
<228=229
<229=230
<231=232
<234=235
<235=237,236
<237=238
<238=240,239
<241=320,319,318,317,316,315,313,312,242
<242=305,268,243
<243=244
<244=245
<245=246
<246=254,247
<247=252,248
<248=249
<249=251,250
<252=253
<254=255
<255=257,256
<257=267,258
<258=266,259
<259=265,260
<260=264,261
<261=263,262
<268=304,303,302,301,300,299,297,296,269
<269=270
<270=282,271
<271=280,276,272
<272=273
<273=275,274
<276=277
<277=279,278
<280=281
<282=283
<283=285,284
<285=295,286
<286=294,287
<287=293,288
<288=292,289
<289=291,290
<297=298
<305=306
<306=308,307
<308=309
<309=311,310
<313=314
<321=322
<322=324,323
<324=325
<325=327,326
<328=329
<329=341,340,330
<330=339,331
<331=335,332
<332=333
<333=334
<335=336
<336=338,337
<342=343
<343=355,354,344
<344=353,345
<345=349,346
<346=347
<347=348
<349=350
<350=352,351
<356=357
<357=368,358
<358=359
<359=360
<360=362,361
<362=364,363
<364=365
<365=367,366
<368=369
<370=371
<371=380,372
<372=378,373
<373=374
<374=375
<375=377,376
<378=379
<382=383
<383=392,384
<384=385
<385=386
<386=388,387
<388=389
<389=391,390
<392=393
<394=395
<395=404,396
<396=400,397
<397=398
<398=399
<400=401
<401=403,402
<406=408,407
<409=410
<410=417,411
<411=413,412
<413=414
<414=416,415
<418=419
<419=420
<420=425,424,421
<421=423,422
<426=437,427
<427=428
<428=429
<429=436,430
<430=434,431
<431=432
<432=433
<434=435
<437=438
<438=440,439
<440=442,441
<442=443
<443=445,444
<484=486,485
<490=495,491
<491=492
<492=494,493
<495=608,580,552,524,496
<496=497
<497=522,498
<498=501,499
<499=500
<501=502
<502=520,503
<503=504
<504=505
<505=519,506
<506=515,507
<507=508
<508=509
<509=513,510
<510=511
<511=512
<513=514
<515=516
<516=518,517
<520=521
<522=523
<524=525
<525=550,526
<526=529,527
<527=528
<529=530
<530=548,531
<531=532
<532=533
<533=547,534
<534=543,535
<535=536
<536=537
<537=541,538
<538=539
<539=540
<541=542
<543=544
<544=546,545
<548=549
<550=551
<552=553
<553=578,554
<554=557,555
<555=556
<557=558
<558=576,559
<559=560
<560=561
<561=575,562
<562=571,563
<563=564
<564=565
<565=569,566
<566=567
<567=568
<569=570
<571=572
<572=574,573
<576=577
<578=579
<580=581
<581=606,582
<582=585,583
<583=584
<585=586
<586=604,587
<587=588
<588=589
<589=603,590
<590=599,591
<591=592
<592=593
<593=597,594
<594=595
<595=596
<597=598
<599=600
<600=602,601
<604=605
<606=607
<608=609
<609=634,610
<610=613,611
<611=612
<613=614
<614=632,615
<615=616
<616=617
<617=631,618
<618=627,619
<619=620
<620=621
<621=625,622
<622=623
<623=624
<625=626
<627=628
<628=630,629
<632=633
<634=635
<656=662,661,657
<657=658
<658=660,659
<662=781,663,672,683,702,703,704,731,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780
<663=664
<664=670,665
<665=668,666
<666=667
<668=669
<670=671
<672=676,673
<673=674
<674=675
<676=677
<677=679,678
<679=680
<680=682,681
<683=684
<684=699,685
<685=698,686
<686=697,687
<687=696,688
<688=690,689
<690=692,691
<692=693
<693=695,694
<699=701,700
<704=715,705
<705=706
<706=707
<707=714,708
<708=710,709
<710=711
<711=713,712
<715=716
<716=718,717
<718=730,719
<719=728,720
<720=721
<721=722
<722=724,723
<724=725
<725=727,726
<728=729
<731=732
<732=734,733
<734=735
<735=737,736
<781=785,782
<782=783
<783=784
<785=786
<786=788,787
<788=800,789
<789=798,790
<790=791
<791=792
<792=794,793
<794=795
<795=797,796
<798=799
