>3	FunctionDef	PIT_StompThing (mobj_t * thing)
>4	ParameterList	mobj_t * thing
>5	Parameter	 
>6	Identifier	thing
>7	ParameterType	mobj_t *
>8	ReturnType	qboolean
>9	CompoundStatement	 
>10	ReturnStatement	 
>11	Identifier	true
>12	ExpressionStatement	 
>13	Statement	 
>14	Statement	 
>15	Statement	 
>16	Statement	 
>17	Statement	 
>18	Statement	 
>19	Statement	 
>20	Statement	 
>21	Statement	 
>22	Statement	 
>23	Statement	 
>24	Statement	 
>25	Statement	 
>26	Statement	 
>27	Statement	 
>28	Statement	 
>29	ReturnStatement	 
>30	Identifier	false
>31	Statement	 
>32	Statement	 
>33	Statement	 
>34	Statement	 
>35	Statement	 
>36	Statement	 
>37	Statement	 
>38	Statement	 
>39	Statement	 
>40	Statement	 
>41	Statement	 
>42	Statement	 
>43	Statement	 
>44	Statement	 
>45	Statement	 
>46	Statement	 
>47	Statement	 
>48	ReturnStatement	 
>49	Identifier	true
>50	Statement	 
>51	Statement	 
>52	Statement	 
>53	Statement	 
>54	Statement	 
>55	Statement	 
>56	Statement	 
>57	Statement	 
>58	Statement	 
>59	CompoundStatement	 
>60	ReturnStatement	 
>61	Identifier	true
>62	Statement	 
>63	Statement	 
>64	Statement	 
>65	Statement	 
>66	Statement	 
>67	Statement	 
>68	Statement	 
>69	Statement	 
>70	Statement	 
>71	Statement	 
>72	Statement	 
>73	Statement	 
>74	Statement	 
>75	Statement	 
>76	Statement	 
>77	Statement	 
>78	Statement	 
>79	Statement	 
>80	Statement	 
>81	Statement	 
>82	Statement	 
>83	Statement	 
>84	Statement	 
>85	Statement	 
>86	Statement	 
>87	Statement	 
>88	Statement	 
>89	Statement	 
>90	Statement	 
>91	Statement	 
>92	ExpressionStatement	 
>93	PtrMemberAccess	g -> tmthing -> radius
>94	Identifier	radius
>95	PtrMemberAccess	g -> tmthing
>96	Identifier	tmthing
>97	Identifier	g
>98	Statement	 
>99	Statement	 
>100	Statement	 
>101	Statement	 
>102	Statement	 
>103	Statement	 
>104	Statement	 
>105	IfStatement	if ( ! ( thing -> flags & MF_SHOOTABLE ) )
>106	ReturnStatement	 
>107	Identifier	true
>108	Condition	 
>109	UnaryOp	! ( thing -> flags & MF_SHOOTABLE )
>110	BitAndExpression	thing -> flags & MF_SHOOTABLE
>111	Identifier	MF_SHOOTABLE
>112	PtrMemberAccess	thing -> flags
>113	Identifier	flags
>114	Identifier	thing
>115	UnaryOperator	!
>116	IdentifierDeclStatement	 
>117	IdentifierDecl	blockdist
>118	Identifier	blockdist
>119	IdentifierDeclType	fixed_t
>133	FunctionDef	P_TeleportMove (mobj_t * thing , fixed_t x , fixed_t y)
>134	ParameterList	mobj_t * thing , fixed_t x , fixed_t y
>135	Parameter	 
>136	Identifier	y
>137	ParameterType	fixed_t
>138	Parameter	 
>139	Identifier	x
>140	ParameterType	fixed_t
>141	Parameter	 
>142	Identifier	thing
>143	ParameterType	mobj_t *
>144	ReturnType	qboolean
>145	CompoundStatement	 
>146	ReturnStatement	 
>147	Identifier	true
>148	ExpressionStatement	 
>149	CallExpression	P_SetThingPosition ( thing )
>150	ArgumentList	thing
>151	Argument	thing
>152	Identifier	thing
>153	Callee	P_SetThingPosition
>154	Identifier	P_SetThingPosition
>155	ExpressionStatement	 
>156	AssignmentExpr	thing -> y = y
>157	Identifier	y
>158	PtrMemberAccess	thing -> y
>159	Identifier	y
>160	Identifier	thing
>161	ExpressionStatement	 
>162	AssignmentExpr	thing -> x = x
>163	Identifier	x
>164	PtrMemberAccess	thing -> x
>165	Identifier	x
>166	Identifier	thing
>167	ExpressionStatement	 
>168	PtrMemberAccess	g -> tmceilingz
>169	Identifier	tmceilingz
>170	Identifier	g
>171	Statement	 
>172	Statement	 
>173	Statement	 
>174	Statement	 
>175	Statement	 
>176	ExpressionStatement	 
>177	PtrMemberAccess	g -> tmfloorz
>178	Identifier	tmfloorz
>179	Identifier	g
>180	Statement	 
>181	Statement	 
>182	Statement	 
>183	Statement	 
>184	Statement	 
>185	ExpressionStatement	 
>186	CallExpression	P_UnsetThingPosition ( thing )
>187	ArgumentList	thing
>188	Argument	thing
>189	Identifier	thing
>190	Callee	P_UnsetThingPosition
>191	Identifier	P_UnsetThingPosition
>192	ForStatement	for ( bx = xl ; bx <= xh ; bx ++ )
>193	ForStatement	for ( by = yl ; by <= yh ; by ++ )
>194	IfStatement	if ( ! P_BlockThingsIterator ( bx , by , PIT_StompThing ) )
>195	ReturnStatement	 
>196	Identifier	false
>197	Condition	 
>198	UnaryOp	! P_BlockThingsIterator ( bx , by , PIT_StompThing )
>199	CallExpression	P_BlockThingsIterator ( bx , by , PIT_StompThing )
>200	ArgumentList	bx
>201	Argument	PIT_StompThing
>202	Identifier	PIT_StompThing
>203	Argument	by
>204	Identifier	by
>205	Argument	bx
>206	Identifier	bx
>207	Callee	P_BlockThingsIterator
>208	Identifier	P_BlockThingsIterator
>209	UnaryOperator	!
>210	IncDecOp	 
>211	IncDec	++
>212	Identifier	by
>213	Condition	 
>214	RelationalExpression	by <= yh
>215	Identifier	yh
>216	Identifier	by
>217	ForInit	 
>218	AssignmentExpr	by = yl
>219	Identifier	yl
>220	Identifier	by
>221	IncDecOp	 
>222	IncDec	++
>223	Identifier	bx
>224	Condition	 
>225	RelationalExpression	bx <= xh
>226	Identifier	xh
>227	Identifier	bx
>228	ForInit	 
>229	AssignmentExpr	bx = xl
>230	Identifier	xl
>231	Identifier	bx
>232	ExpressionStatement	 
>233	Identifier	MAPBLOCKSHIFT
>234	Statement	 
>235	Statement	 
>236	Statement	 
>237	Statement	 
>238	Statement	 
>239	Statement	 
>240	Statement	 
>241	Statement	 
>242	Statement	 
>243	Statement	 
>244	Statement	 
>245	Statement	 
>246	Statement	 
>247	Statement	 
>248	Statement	 
>249	Statement	 
>250	Statement	 
>251	Statement	 
>252	Statement	 
>253	ExpressionStatement	 
>254	Identifier	MAPBLOCKSHIFT
>255	Statement	 
>256	Statement	 
>257	Statement	 
>258	Statement	 
>259	Statement	 
>260	Statement	 
>261	Statement	 
>262	Statement	 
>263	Statement	 
>264	Statement	 
>265	Statement	 
>266	Statement	 
>267	Statement	 
>268	Statement	 
>269	Statement	 
>270	Statement	 
>271	Statement	 
>272	Statement	 
>273	Statement	 
>274	ExpressionStatement	 
>275	Identifier	MAPBLOCKSHIFT
>276	Statement	 
>277	Statement	 
>278	Statement	 
>279	Statement	 
>280	Statement	 
>281	Statement	 
>282	Statement	 
>283	Statement	 
>284	Statement	 
>285	Statement	 
>286	Statement	 
>287	Statement	 
>288	Statement	 
>289	Statement	 
>290	Statement	 
>291	Statement	 
>292	Statement	 
>293	Statement	 
>294	Statement	 
>295	ExpressionStatement	 
>296	Identifier	MAPBLOCKSHIFT
>297	Statement	 
>298	Statement	 
>299	Statement	 
>300	Statement	 
>301	Statement	 
>302	Statement	 
>303	Statement	 
>304	Statement	 
>305	Statement	 
>306	Statement	 
>307	Statement	 
>308	Statement	 
>309	Statement	 
>310	Statement	 
>311	Statement	 
>312	Statement	 
>313	Statement	 
>314	Statement	 
>315	Statement	 
>316	ExpressionStatement	 
>317	AssignmentExpr	g -> numspechit = 0
>318	PrimaryExpression	0
>319	PtrMemberAccess	g -> numspechit
>320	Identifier	numspechit
>321	Identifier	g
>322	Statement	 
>323	ExpressionStatement	 
>324	IncDecOp	g -> validcount ++
>325	IncDec	++
>326	PtrMemberAccess	g -> validcount
>327	Identifier	validcount
>328	Identifier	g
>329	Statement	 
>330	ExpressionStatement	 
>331	AssignmentExpr	g -> tmceilingz = newsubsec -> sector -> ceilingheight
>332	PtrMemberAccess	newsubsec -> sector -> ceilingheight
>333	Identifier	ceilingheight
>334	PtrMemberAccess	newsubsec -> sector
>335	Identifier	sector
>336	Identifier	newsubsec
>337	PtrMemberAccess	g -> tmceilingz
>338	Identifier	tmceilingz
>339	Identifier	g
>340	Statement	 
>341	ExpressionStatement	 
>342	AssignmentExpr	g -> tmdropoffz = newsubsec -> sector -> floorheight
>343	PtrMemberAccess	newsubsec -> sector -> floorheight
>344	Identifier	floorheight
>345	PtrMemberAccess	newsubsec -> sector
>346	Identifier	sector
>347	Identifier	newsubsec
>348	PtrMemberAccess	g -> tmdropoffz
>349	Identifier	tmdropoffz
>350	Identifier	g
>351	Statement	 
>352	Statement	 
>353	Statement	 
>354	Statement	 
>355	Statement	 
>356	Statement	 
>357	ExpressionStatement	 
>358	AssignmentExpr	g -> ceilingline = NULL
>359	Identifier	NULL
>360	PtrMemberAccess	g -> ceilingline
>361	Identifier	ceilingline
>362	Identifier	g
>363	Statement	 
>364	ExpressionStatement	 
>365	AssignmentExpr	newsubsec = R_PointInSubsector ( x , y )
>366	CallExpression	R_PointInSubsector ( x , y )
>367	ArgumentList	x
>368	Argument	y
>369	Identifier	y
>370	Argument	x
>371	Identifier	x
>372	Callee	R_PointInSubsector
>373	Identifier	R_PointInSubsector
>374	Identifier	newsubsec
>375	ExpressionStatement	 
>376	PtrMemberAccess	g -> tmthing -> radius
>377	Identifier	radius
>378	PtrMemberAccess	g -> tmthing
>379	Identifier	tmthing
>380	Identifier	g
>381	Statement	 
>382	Statement	 
>383	Statement	 
>384	Statement	 
>385	Statement	 
>386	Statement	 
>387	Statement	 
>388	Statement	 
>389	Statement	 
>390	Statement	 
>391	Statement	 
>392	ExpressionStatement	 
>393	PtrMemberAccess	g -> tmthing -> radius
>394	Identifier	radius
>395	PtrMemberAccess	g -> tmthing
>396	Identifier	tmthing
>397	Identifier	g
>398	Statement	 
>399	Statement	 
>400	Statement	 
>401	Statement	 
>402	Statement	 
>403	Statement	 
>404	Statement	 
>405	Statement	 
>406	Statement	 
>407	Statement	 
>408	Statement	 
>409	ExpressionStatement	 
>410	PtrMemberAccess	g -> tmthing -> radius
>411	Identifier	radius
>412	PtrMemberAccess	g -> tmthing
>413	Identifier	tmthing
>414	Identifier	g
>415	Statement	 
>416	Statement	 
>417	Statement	 
>418	Statement	 
>419	Statement	 
>420	Statement	 
>421	Statement	 
>422	Statement	 
>423	Statement	 
>424	Statement	 
>425	Statement	 
>426	ExpressionStatement	 
>427	PtrMemberAccess	g -> tmthing -> radius
>428	Identifier	radius
>429	PtrMemberAccess	g -> tmthing
>430	Identifier	tmthing
>431	Identifier	g
>432	Statement	 
>433	Statement	 
>434	Statement	 
>435	Statement	 
>436	Statement	 
>437	Statement	 
>438	Statement	 
>439	Statement	 
>440	Statement	 
>441	Statement	 
>442	Statement	 
>443	ExpressionStatement	 
>444	AssignmentExpr	g -> tmy = y
>445	Identifier	y
>446	PtrMemberAccess	g -> tmy
>447	Identifier	tmy
>448	Identifier	g
>449	Statement	 
>450	ExpressionStatement	 
>451	AssignmentExpr	g -> tmx = x
>452	Identifier	x
>453	PtrMemberAccess	g -> tmx
>454	Identifier	tmx
>455	Identifier	g
>456	Statement	 
>457	ExpressionStatement	 
>458	AssignmentExpr	g -> tmflags = thing -> flags
>459	PtrMemberAccess	thing -> flags
>460	Identifier	flags
>461	Identifier	thing
>462	PtrMemberAccess	g -> tmflags
>463	Identifier	tmflags
>464	Identifier	g
>465	Statement	 
>466	ExpressionStatement	 
>467	AssignmentExpr	g -> tmthing = thing
>468	Identifier	thing
>469	PtrMemberAccess	g -> tmthing
>470	Identifier	tmthing
>471	Identifier	g
>472	Statement	 
>473	IdentifierDeclStatement	 
>474	IdentifierDecl	* newsubsec
>475	Identifier	newsubsec
>476	IdentifierDeclType	subsector_t *
>477	IdentifierDeclStatement	 
>478	IdentifierDecl	by
>479	Identifier	by
>480	IdentifierDeclType	int
>481	IdentifierDeclStatement	 
>482	IdentifierDecl	bx
>483	Identifier	bx
>484	IdentifierDeclType	int
>485	IdentifierDeclStatement	 
>486	IdentifierDecl	yh
>487	Identifier	yh
>488	IdentifierDeclType	int
>489	IdentifierDeclStatement	 
>490	IdentifierDecl	yl
>491	Identifier	yl
>492	IdentifierDeclType	int
>493	IdentifierDeclStatement	 
>494	IdentifierDecl	xh
>495	Identifier	xh
>496	IdentifierDeclType	int
>497	IdentifierDeclStatement	 
>498	IdentifierDecl	xl
>499	Identifier	xl
>500	IdentifierDeclType	int
>541	FunctionDef	PIT_CheckLine (line_t * ld)
>542	ParameterList	line_t * ld
>543	Parameter	 
>544	Identifier	ld
>545	ParameterType	line_t *
>546	ReturnType	qboolean
>547	CompoundStatement	 
>548	ReturnStatement	 
>549	Identifier	true
>550	CompoundStatement	 
>551	ExpressionStatement	 
>552	IncDecOp	g -> numspechit ++
>553	IncDec	++
>554	PtrMemberAccess	g -> numspechit
>555	Identifier	numspechit
>556	Identifier	g
>557	Statement	 
>558	ExpressionStatement	 
>559	Identifier	ld
>560	Statement	 
>561	Statement	 
>562	Statement	 
>563	Statement	 
>564	Statement	 
>565	Statement	 
>566	Statement	 
>567	Statement	 
>568	Statement	 
>569	Statement	 
>570	Statement	 
>571	Statement	 
>572	Statement	 
>573	Statement	 
>574	Statement	 
>575	Statement	 
>576	Statement	 
>577	Statement	 
>578	Statement	 
>579	Statement	 
>580	Statement	 
>581	Statement	 
>582	Statement	 
>583	Statement	 
>584	ExpressionStatement	 
>585	PtrMemberAccess	g -> lowfloor
>586	Identifier	lowfloor
>587	Identifier	g
>588	Statement	 
>589	Statement	 
>590	Statement	 
>591	Statement	 
>592	Statement	 
>593	Statement	 
>594	Statement	 
>595	Statement	 
>596	Statement	 
>597	Statement	 
>598	Statement	 
>599	Statement	 
>600	Statement	 
>601	Statement	 
>602	Statement	 
>603	Statement	 
>604	Statement	 
>605	Statement	 
>606	ExpressionStatement	 
>607	PtrMemberAccess	g -> openbottom
>608	Identifier	openbottom
>609	Identifier	g
>610	Statement	 
>611	Statement	 
>612	Statement	 
>613	Statement	 
>614	Statement	 
>615	Statement	 
>616	Statement	 
>617	Statement	 
>618	Statement	 
>619	Statement	 
>620	Statement	 
>621	Statement	 
>622	Statement	 
>623	Statement	 
>624	Statement	 
>625	Statement	 
>626	Statement	 
>627	Statement	 
>628	CompoundStatement	 
>629	ExpressionStatement	 
>630	AssignmentExpr	g -> ceilingline = ld
>631	Identifier	ld
>632	PtrMemberAccess	g -> ceilingline
>633	Identifier	ceilingline
>634	Identifier	g
>635	Statement	 
>636	ExpressionStatement	 
>637	PtrMemberAccess	g -> opentop
>638	Identifier	opentop
>639	Identifier	g
>640	Statement	 
>641	Statement	 
>642	Statement	 
>643	Statement	 
>644	Statement	 
>645	Statement	 
>646	Statement	 
>647	Statement	 
>648	Statement	 
>649	Statement	 
>650	Statement	 
>651	Statement	 
>652	Statement	 
>653	Statement	 
>654	Statement	 
>655	Statement	 
>656	Statement	 
>657	Statement	 
>658	ExpressionStatement	 
>659	CallExpression	P_LineOpening ( ld )
>660	ArgumentList	ld
>661	Argument	ld
>662	Identifier	ld
>663	Callee	P_LineOpening
>664	Identifier	P_LineOpening
>665	CompoundStatement	 
>666	ReturnStatement	 
>667	Identifier	false
>668	Statement	 
>669	Statement	 
>670	Statement	 
>671	Statement	 
>672	Statement	 
>673	Statement	 
>674	Statement	 
>675	Statement	 
>676	Statement	 
>677	Statement	 
>678	Statement	 
>679	Statement	 
>680	Statement	 
>681	Statement	 
>682	Statement	 
>683	Statement	 
>684	IfStatement	if ( ld -> flags & ML_BLOCKING )
>685	ReturnStatement	 
>686	Identifier	false
>687	Condition	 
>688	BitAndExpression	ld -> flags & ML_BLOCKING
>689	Identifier	ML_BLOCKING
>690	PtrMemberAccess	ld -> flags
>691	Identifier	flags
>692	Identifier	ld
>693	Statement	 
>694	Statement	 
>695	Statement	 
>696	Statement	 
>697	Statement	 
>698	Statement	 
>699	Statement	 
>700	Statement	 
>701	Statement	 
>702	Statement	 
>703	Statement	 
>704	Statement	 
>705	Statement	 
>706	Statement	 
>707	IfStatement	if ( ! ld -> backsector )
>708	ReturnStatement	 
>709	Identifier	false
>710	Condition	 
>711	UnaryOp	! ld -> backsector
>712	PtrMemberAccess	ld -> backsector
>713	Identifier	backsector
>714	Identifier	ld
>715	UnaryOperator	!
>716	ReturnStatement	 
>717	Identifier	true
>718	Statement	 
>719	Statement	 
>720	Statement	 
>721	Statement	 
>722	Statement	 
>723	Statement	 
>724	Statement	 
>725	Statement	 
>726	Statement	 
>727	Statement	 
>728	Statement	 
>729	Statement	 
>730	Statement	 
>731	Statement	 
>732	Statement	 
>733	ReturnStatement	 
>734	Identifier	true
>735	Statement	 
>736	Statement	 
>737	Statement	 
>738	Statement	 
>739	Statement	 
>740	Statement	 
>741	Statement	 
>742	Statement	 
>743	Statement	 
>744	Statement	 
>745	Statement	 
>746	Statement	 
>747	Statement	 
>748	Statement	 
>749	Statement	 
>750	Statement	 
>751	Statement	 
>752	Statement	 
>753	Statement	 
>754	Statement	 
>755	Statement	 
>756	Statement	 
>757	Statement	 
>758	Statement	 
>759	Statement	 
>760	Statement	 
>761	Statement	 
>762	Statement	 
>763	Statement	 
>764	Statement	 
>765	Statement	 
>766	Statement	 
>767	Statement	 
>768	Statement	 
>769	Statement	 
>770	Statement	 
>771	Statement	 
>772	Statement	 
>773	Statement	 
>774	Statement	 
>775	Statement	 
>776	Statement	 
>777	Statement	 
>778	Statement	 
>779	Statement	 
>780	Statement	 
>781	Statement	 
>782	Statement	 
>783	Statement	 
>784	Statement	 
>785	Statement	 
>786	Statement	 
>787	Statement	 
>788	Statement	 
>789	Statement	 
>790	Statement	 
>791	Statement	 
>792	Statement	 
>793	Statement	 
>794	Statement	 
>795	Statement	 
>796	Statement	 
>811	FunctionDef	PIT_CheckThing (mobj_t * thing)
>812	ParameterList	mobj_t * thing
>813	Parameter	 
>814	Identifier	thing
>815	ParameterType	mobj_t *
>816	ReturnType	qboolean
>817	CompoundStatement	 
>818	ReturnStatement	 
>819	UnaryOp	! ( thing -> flags & MF_SOLID )
>820	BitAndExpression	thing -> flags & MF_SOLID
>821	Identifier	MF_SOLID
>822	PtrMemberAccess	thing -> flags
>823	Identifier	flags
>824	Identifier	thing
>825	UnaryOperator	!
>826	IfStatement	if ( thing -> flags & MF_SPECIAL )
>827	CompoundStatement	 
>828	ReturnStatement	 
>829	UnaryOp	! solid
>830	Identifier	solid
>831	UnaryOperator	!
>832	CompoundStatement	 
>833	ExpressionStatement	 
>834	Statement	 
>835	Statement	 
>836	Statement	 
>837	Statement	 
>838	Statement	 
>839	Statement	 
>840	Statement	 
>841	Statement	 
>842	Statement	 
>843	Statement	 
>844	Statement	 
>845	Statement	 
>846	Statement	 
>847	Statement	 
>848	Statement	 
>849	Statement	 
>850	Statement	 
>851	Statement	 
>852	ExpressionStatement	 
>853	AssignmentExpr	solid = thing -> flags & MF_SOLID
>854	BitAndExpression	thing -> flags & MF_SOLID
>855	Identifier	MF_SOLID
>856	PtrMemberAccess	thing -> flags
>857	Identifier	flags
>858	Identifier	thing
>859	Identifier	solid
>860	Condition	 
>861	BitAndExpression	thing -> flags & MF_SPECIAL
>862	Identifier	MF_SPECIAL
>863	PtrMemberAccess	thing -> flags
>864	Identifier	flags
>865	Identifier	thing
>866	CompoundStatement	 
>867	ReturnStatement	 
>868	Identifier	false
>869	ExpressionStatement	 
>870	Statement	 
>871	Statement	 
>872	Statement	 
>873	Statement	 
>874	Statement	 
>875	Statement	 
>876	Statement	 
>877	Statement	 
>878	Statement	 
>879	Statement	 
>880	Statement	 
>881	Statement	 
>882	Statement	 
>883	Statement	 
>884	Statement	 
>885	Statement	 
>886	Statement	 
>887	Statement	 
>888	ExpressionStatement	 
>889	PtrMemberAccess	g -> tmthing -> info -> damage
>890	Identifier	damage
>891	PtrMemberAccess	g -> tmthing -> info
>892	Identifier	info
>893	PtrMemberAccess	g -> tmthing
>894	Identifier	tmthing
>895	Identifier	g
>896	Statement	 
>897	Statement	 
>898	Statement	 
>899	Statement	 
>900	Statement	 
>901	Statement	 
>902	Statement	 
>903	Statement	 
>904	Statement	 
>905	Statement	 
>906	Statement	 
>907	Statement	 
>908	Statement	 
>909	Statement	 
>910	Statement	 
>911	IfStatement	if ( ! ( thing -> flags & MF_SHOOTABLE ) )
>912	CompoundStatement	 
>913	ReturnStatement	 
>914	UnaryOp	! ( thing -> flags & MF_SOLID )
>915	BitAndExpression	thing -> flags & MF_SOLID
>916	Identifier	MF_SOLID
>917	PtrMemberAccess	thing -> flags
>918	Identifier	flags
>919	Identifier	thing
>920	UnaryOperator	!
>921	Condition	 
>922	UnaryOp	! ( thing -> flags & MF_SHOOTABLE )
>923	BitAndExpression	thing -> flags & MF_SHOOTABLE
>924	Identifier	MF_SHOOTABLE
>925	PtrMemberAccess	thing -> flags
>926	Identifier	flags
>927	Identifier	thing
>928	UnaryOperator	!
>929	CompoundStatement	 
>930	IfStatement	if ( thing -> type != MT_PLAYER )
>931	CompoundStatement	 
>932	ReturnStatement	 
>933	Identifier	false
>934	Condition	 
>935	EqualityExpression	thing -> type != MT_PLAYER
>936	Identifier	MT_PLAYER
>937	PtrMemberAccess	thing -> type
>938	Identifier	type
>939	Identifier	thing
>940	ReturnStatement	 
>941	Identifier	true
>942	Statement	 
>943	Statement	 
>944	Statement	 
>945	Statement	 
>946	Statement	 
>947	Statement	 
>948	Statement	 
>949	Statement	 
>950	Statement	 
>951	Statement	 
>952	Statement	 
>953	Statement	 
>954	Statement	 
>955	Statement	 
>956	Statement	 
>957	Statement	 
>958	Statement	 
>959	Statement	 
>960	Statement	 
>961	Statement	 
>962	Statement	 
>963	Statement	 
>964	Statement	 
>965	Statement	 
>966	Statement	 
>967	Statement	 
>968	Statement	 
>969	Statement	 
>970	Statement	 
>971	Statement	 
>972	Statement	 
>973	Statement	 
>974	Statement	 
>975	Statement	 
>976	Statement	 
>977	Statement	 
>978	Statement	 
>979	Statement	 
>980	Statement	 
>981	Statement	 
>982	Statement	 
>983	Statement	 
>984	Statement	 
>985	Statement	 
>986	Statement	 
>987	Statement	 
>988	Statement	 
>989	Statement	 
>990	Statement	 
>991	Statement	 
>992	Statement	 
>993	Statement	 
>994	Statement	 
>995	Statement	 
>996	Statement	 
>997	Statement	 
>998	Statement	 
>999	Statement	 
>1000	Statement	 
>1001	Statement	 
>1002	Statement	 
>1003	Statement	 
>1004	Statement	 
>1005	Statement	 
>1006	Statement	 
>1007	Statement	 
>1008	Statement	 
>1009	Statement	 
>1010	Statement	 
>1011	Statement	 
>1012	Statement	 
>1013	Statement	 
>1014	Statement	 
>1015	ReturnStatement	 
>1016	Identifier	true
>1017	Statement	 
>1018	Statement	 
>1019	Statement	 
>1020	Statement	 
>1021	Statement	 
>1022	Statement	 
>1023	Statement	 
>1024	Statement	 
>1025	Statement	 
>1026	Statement	 
>1027	Statement	 
>1028	Statement	 
>1029	Statement	 
>1030	Statement	 
>1031	Statement	 
>1032	Statement	 
>1033	Statement	 
>1034	Statement	 
>1035	Statement	 
>1036	Statement	 
>1037	ReturnStatement	 
>1038	Identifier	true
>1039	Statement	 
>1040	Statement	 
>1041	Statement	 
>1042	Statement	 
>1043	Statement	 
>1044	Statement	 
>1045	Statement	 
>1046	Statement	 
>1047	Statement	 
>1048	Statement	 
>1049	Statement	 
>1050	Statement	 
>1051	Statement	 
>1052	Statement	 
>1053	Statement	 
>1054	Statement	 
>1055	Statement	 
>1056	Statement	 
>1057	Statement	 
>1058	Statement	 
>1059	Statement	 
>1060	Statement	 
>1061	Statement	 
>1062	Statement	 
>1063	Statement	 
>1064	Statement	 
>1065	Statement	 
>1066	Statement	 
>1067	CompoundStatement	 
>1068	ReturnStatement	 
>1069	Identifier	false
>1070	ExpressionStatement	 
>1071	Statement	 
>1072	Statement	 
>1073	Statement	 
>1074	Statement	 
>1075	Statement	 
>1076	Statement	 
>1077	Statement	 
>1078	Statement	 
>1079	Statement	 
>1080	Statement	 
>1081	Statement	 
>1082	Statement	 
>1083	Statement	 
>1084	Statement	 
>1085	Statement	 
>1086	Statement	 
>1087	Statement	 
>1088	Statement	 
>1089	Statement	 
>1090	ExpressionStatement	 
>1091	AssignmentExpr	g -> tmthing -> momz = 0
>1092	PrimaryExpression	0
>1093	PtrMemberAccess	g -> tmthing -> momz
>1094	Identifier	momz
>1095	PtrMemberAccess	g -> tmthing
>1096	Identifier	tmthing
>1097	Identifier	g
>1098	Statement	 
>1099	Statement	 
>1100	Statement	 
>1101	Statement	 
>1102	Statement	 
>1103	Statement	 
>1104	Statement	 
>1105	Statement	 
>1106	Statement	 
>1107	Statement	 
>1108	Statement	 
>1109	Statement	 
>1110	Statement	 
>1111	Statement	 
>1112	Statement	 
>1113	ExpressionStatement	 
>1114	AssignmentExpr	g -> tmthing -> flags &= ~MF_SKULLFLY
>1115	Identifier	~MF_SKULLFLY
>1116	PtrMemberAccess	g -> tmthing -> flags
>1117	Identifier	flags
>1118	PtrMemberAccess	g -> tmthing
>1119	Identifier	tmthing
>1120	Identifier	g
>1121	Statement	 
>1122	ExpressionStatement	 
>1123	Statement	 
>1124	Statement	 
>1125	Statement	 
>1126	Statement	 
>1127	Statement	 
>1128	Statement	 
>1129	Statement	 
>1130	Statement	 
>1131	Statement	 
>1132	Statement	 
>1133	Statement	 
>1134	Statement	 
>1135	Statement	 
>1136	Statement	 
>1137	Statement	 
>1138	Statement	 
>1139	ExpressionStatement	 
>1140	PtrMemberAccess	g -> tmthing -> info -> damage
>1141	Identifier	damage
>1142	PtrMemberAccess	g -> tmthing -> info
>1143	Identifier	info
>1144	PtrMemberAccess	g -> tmthing
>1145	Identifier	tmthing
>1146	Identifier	g
>1147	Statement	 
>1148	Statement	 
>1149	Statement	 
>1150	Statement	 
>1151	Statement	 
>1152	Statement	 
>1153	Statement	 
>1154	Statement	 
>1155	Statement	 
>1156	Statement	 
>1157	Statement	 
>1158	Statement	 
>1159	Statement	 
>1160	Statement	 
>1161	Statement	 
>1162	Statement	 
>1163	Statement	 
>1164	Statement	 
>1165	Statement	 
>1166	Statement	 
>1167	Statement	 
>1168	Statement	 
>1169	Statement	 
>1170	Statement	 
>1171	Statement	 
>1172	Statement	 
>1173	ReturnStatement	 
>1174	Identifier	true
>1175	Statement	 
>1176	Statement	 
>1177	Statement	 
>1178	Statement	 
>1179	Statement	 
>1180	Statement	 
>1181	Statement	 
>1182	Statement	 
>1183	Statement	 
>1184	CompoundStatement	 
>1185	ReturnStatement	 
>1186	Identifier	true
>1187	Statement	 
>1188	Statement	 
>1189	Statement	 
>1190	Statement	 
>1191	Statement	 
>1192	Statement	 
>1193	Statement	 
>1194	Statement	 
>1195	Statement	 
>1196	Statement	 
>1197	Statement	 
>1198	Statement	 
>1199	Statement	 
>1200	Statement	 
>1201	Statement	 
>1202	Statement	 
>1203	Statement	 
>1204	Statement	 
>1205	Statement	 
>1206	Statement	 
>1207	Statement	 
>1208	Statement	 
>1209	Statement	 
>1210	Statement	 
>1211	Statement	 
>1212	Statement	 
>1213	Statement	 
>1214	Statement	 
>1215	Statement	 
>1216	Statement	 
>1217	ExpressionStatement	 
>1218	PtrMemberAccess	g -> tmthing -> radius
>1219	Identifier	radius
>1220	PtrMemberAccess	g -> tmthing
>1221	Identifier	tmthing
>1222	Identifier	g
>1223	Statement	 
>1224	Statement	 
>1225	Statement	 
>1226	Statement	 
>1227	Statement	 
>1228	Statement	 
>1229	Statement	 
>1230	IfStatement	if ( ! ( thing -> flags & ( MF_SOLID | MF_SPECIAL | MF_SHOOTABLE ) ) )
>1231	ReturnStatement	 
>1232	Identifier	true
>1233	Condition	 
>1234	UnaryOp	! ( thing -> flags & ( MF_SOLID | MF_SPECIAL | MF_SHOOTABLE ) )
>1235	BitAndExpression	thing -> flags & ( MF_SOLID | MF_SPECIAL | MF_SHOOTABLE )
>1236	InclusiveOrExpression	MF_SOLID | MF_SPECIAL | MF_SHOOTABLE
>1237	InclusiveOrExpression	MF_SPECIAL | MF_SHOOTABLE
>1238	Identifier	MF_SHOOTABLE
>1239	Identifier	MF_SPECIAL
>1240	Identifier	MF_SOLID
>1241	PtrMemberAccess	thing -> flags
>1242	Identifier	flags
>1243	Identifier	thing
>1244	UnaryOperator	!
>1245	IdentifierDeclStatement	 
>1246	IdentifierDecl	damage
>1247	Identifier	damage
>1248	IdentifierDeclType	int
>1249	IdentifierDeclStatement	 
>1250	IdentifierDecl	solid
>1251	Identifier	solid
>1252	IdentifierDeclType	qboolean
>1253	IdentifierDeclStatement	 
>1254	IdentifierDecl	blockdist
>1255	Identifier	blockdist
>1256	IdentifierDeclType	fixed_t
>1282	FunctionDef	P_CheckPosition (mobj_t * thing , fixed_t x , fixed_t y)
>1283	ParameterList	mobj_t * thing , fixed_t x , fixed_t y
>1284	Parameter	 
>1285	Identifier	y
>1286	ParameterType	fixed_t
>1287	Parameter	 
>1288	Identifier	x
>1289	ParameterType	fixed_t
>1290	Parameter	 
>1291	Identifier	thing
>1292	ParameterType	mobj_t *
>1293	ReturnType	qboolean
>1294	CompoundStatement	 
>1295	ReturnStatement	 
>1296	Identifier	true
>1297	ForStatement	for ( bx = xl ; bx <= xh ; bx ++ )
>1298	ForStatement	for ( by = yl ; by <= yh ; by ++ )
>1299	IfStatement	if ( ! P_BlockLinesIterator ( bx , by , PIT_CheckLine ) )
>1300	ReturnStatement	 
>1301	Identifier	false
>1302	Condition	 
>1303	UnaryOp	! P_BlockLinesIterator ( bx , by , PIT_CheckLine )
>1304	CallExpression	P_BlockLinesIterator ( bx , by , PIT_CheckLine )
>1305	ArgumentList	bx
>1306	Argument	PIT_CheckLine
>1307	Identifier	PIT_CheckLine
>1308	Argument	by
>1309	Identifier	by
>1310	Argument	bx
>1311	Identifier	bx
>1312	Callee	P_BlockLinesIterator
>1313	Identifier	P_BlockLinesIterator
>1314	UnaryOperator	!
>1315	IncDecOp	 
>1316	IncDec	++
>1317	Identifier	by
>1318	Condition	 
>1319	RelationalExpression	by <= yh
>1320	Identifier	yh
>1321	Identifier	by
>1322	ForInit	 
>1323	AssignmentExpr	by = yl
>1324	Identifier	yl
>1325	Identifier	by
>1326	IncDecOp	 
>1327	IncDec	++
>1328	Identifier	bx
>1329	Condition	 
>1330	RelationalExpression	bx <= xh
>1331	Identifier	xh
>1332	Identifier	bx
>1333	ForInit	 
>1334	AssignmentExpr	bx = xl
>1335	Identifier	xl
>1336	Identifier	bx
>1337	ExpressionStatement	 
>1338	Identifier	MAPBLOCKSHIFT
>1339	Statement	 
>1340	Statement	 
>1341	Statement	 
>1342	Statement	 
>1343	Statement	 
>1344	Statement	 
>1345	Statement	 
>1346	Statement	 
>1347	Statement	 
>1348	Statement	 
>1349	Statement	 
>1350	Statement	 
>1351	Statement	 
>1352	Statement	 
>1353	Statement	 
>1354	Statement	 
>1355	Statement	 
>1356	ExpressionStatement	 
>1357	Identifier	MAPBLOCKSHIFT
>1358	Statement	 
>1359	Statement	 
>1360	Statement	 
>1361	Statement	 
>1362	Statement	 
>1363	Statement	 
>1364	Statement	 
>1365	Statement	 
>1366	Statement	 
>1367	Statement	 
>1368	Statement	 
>1369	Statement	 
>1370	Statement	 
>1371	Statement	 
>1372	Statement	 
>1373	Statement	 
>1374	Statement	 
>1375	ExpressionStatement	 
>1376	Identifier	MAPBLOCKSHIFT
>1377	Statement	 
>1378	Statement	 
>1379	Statement	 
>1380	Statement	 
>1381	Statement	 
>1382	Statement	 
>1383	Statement	 
>1384	Statement	 
>1385	Statement	 
>1386	Statement	 
>1387	Statement	 
>1388	Statement	 
>1389	Statement	 
>1390	Statement	 
>1391	Statement	 
>1392	Statement	 
>1393	Statement	 
>1394	ExpressionStatement	 
>1395	Identifier	MAPBLOCKSHIFT
>1396	Statement	 
>1397	Statement	 
>1398	Statement	 
>1399	Statement	 
>1400	Statement	 
>1401	Statement	 
>1402	Statement	 
>1403	Statement	 
>1404	Statement	 
>1405	Statement	 
>1406	Statement	 
>1407	Statement	 
>1408	Statement	 
>1409	Statement	 
>1410	Statement	 
>1411	Statement	 
>1412	Statement	 
>1413	ForStatement	for ( bx = xl ; bx <= xh ; bx ++ )
>1414	ForStatement	for ( by = yl ; by <= yh ; by ++ )
>1415	IfStatement	if ( ! P_BlockThingsIterator ( bx , by , PIT_CheckThing ) )
>1416	ReturnStatement	 
>1417	Identifier	false
>1418	Condition	 
>1419	UnaryOp	! P_BlockThingsIterator ( bx , by , PIT_CheckThing )
>1420	CallExpression	P_BlockThingsIterator ( bx , by , PIT_CheckThing )
>1421	ArgumentList	bx
>1422	Argument	PIT_CheckThing
>1423	Identifier	PIT_CheckThing
>1424	Argument	by
>1425	Identifier	by
>1426	Argument	bx
>1427	Identifier	bx
>1428	Callee	P_BlockThingsIterator
>1429	Identifier	P_BlockThingsIterator
>1430	UnaryOperator	!
>1431	IncDecOp	 
>1432	IncDec	++
>1433	Identifier	by
>1434	Condition	 
>1435	RelationalExpression	by <= yh
>1436	Identifier	yh
>1437	Identifier	by
>1438	ForInit	 
>1439	AssignmentExpr	by = yl
>1440	Identifier	yl
>1441	Identifier	by
>1442	IncDecOp	 
>1443	IncDec	++
>1444	Identifier	bx
>1445	Condition	 
>1446	RelationalExpression	bx <= xh
>1447	Identifier	xh
>1448	Identifier	bx
>1449	ForInit	 
>1450	AssignmentExpr	bx = xl
>1451	Identifier	xl
>1452	Identifier	bx
>1453	ExpressionStatement	 
>1454	Identifier	MAPBLOCKSHIFT
>1455	Statement	 
>1456	Statement	 
>1457	Statement	 
>1458	Statement	 
>1459	Statement	 
>1460	Statement	 
>1461	Statement	 
>1462	Statement	 
>1463	Statement	 
>1464	Statement	 
>1465	Statement	 
>1466	Statement	 
>1467	Statement	 
>1468	Statement	 
>1469	Statement	 
>1470	Statement	 
>1471	Statement	 
>1472	Statement	 
>1473	Statement	 
>1474	ExpressionStatement	 
>1475	Identifier	MAPBLOCKSHIFT
>1476	Statement	 
>1477	Statement	 
>1478	Statement	 
>1479	Statement	 
>1480	Statement	 
>1481	Statement	 
>1482	Statement	 
>1483	Statement	 
>1484	Statement	 
>1485	Statement	 
>1486	Statement	 
>1487	Statement	 
>1488	Statement	 
>1489	Statement	 
>1490	Statement	 
>1491	Statement	 
>1492	Statement	 
>1493	Statement	 
>1494	Statement	 
>1495	ExpressionStatement	 
>1496	Identifier	MAPBLOCKSHIFT
>1497	Statement	 
>1498	Statement	 
>1499	Statement	 
>1500	Statement	 
>1501	Statement	 
>1502	Statement	 
>1503	Statement	 
>1504	Statement	 
>1505	Statement	 
>1506	Statement	 
>1507	Statement	 
>1508	Statement	 
>1509	Statement	 
>1510	Statement	 
>1511	Statement	 
>1512	Statement	 
>1513	Statement	 
>1514	Statement	 
>1515	Statement	 
>1516	ExpressionStatement	 
>1517	Identifier	MAPBLOCKSHIFT
>1518	Statement	 
>1519	Statement	 
>1520	Statement	 
>1521	Statement	 
>1522	Statement	 
>1523	Statement	 
>1524	Statement	 
>1525	Statement	 
>1526	Statement	 
>1527	Statement	 
>1528	Statement	 
>1529	Statement	 
>1530	Statement	 
>1531	Statement	 
>1532	Statement	 
>1533	Statement	 
>1534	Statement	 
>1535	Statement	 
>1536	Statement	 
>1537	ReturnStatement	 
>1538	Identifier	true
>1539	Statement	 
>1540	Statement	 
>1541	Statement	 
>1542	Statement	 
>1543	Statement	 
>1544	Statement	 
>1545	Statement	 
>1546	Statement	 
>1547	Statement	 
>1548	ExpressionStatement	 
>1549	AssignmentExpr	g -> numspechit = 0
>1550	PrimaryExpression	0
>1551	PtrMemberAccess	g -> numspechit
>1552	Identifier	numspechit
>1553	Identifier	g
>1554	Statement	 
>1555	ExpressionStatement	 
>1556	IncDecOp	g -> validcount ++
>1557	IncDec	++
>1558	PtrMemberAccess	g -> validcount
>1559	Identifier	validcount
>1560	Identifier	g
>1561	Statement	 
>1562	ExpressionStatement	 
>1563	AssignmentExpr	g -> tmceilingz = newsubsec -> sector -> ceilingheight
>1564	PtrMemberAccess	newsubsec -> sector -> ceilingheight
>1565	Identifier	ceilingheight
>1566	PtrMemberAccess	newsubsec -> sector
>1567	Identifier	sector
>1568	Identifier	newsubsec
>1569	PtrMemberAccess	g -> tmceilingz
>1570	Identifier	tmceilingz
>1571	Identifier	g
>1572	Statement	 
>1573	ExpressionStatement	 
>1574	AssignmentExpr	g -> tmdropoffz = newsubsec -> sector -> floorheight
>1575	PtrMemberAccess	newsubsec -> sector -> floorheight
>1576	Identifier	floorheight
>1577	PtrMemberAccess	newsubsec -> sector
>1578	Identifier	sector
>1579	Identifier	newsubsec
>1580	PtrMemberAccess	g -> tmdropoffz
>1581	Identifier	tmdropoffz
>1582	Identifier	g
>1583	Statement	 
>1584	Statement	 
>1585	Statement	 
>1586	Statement	 
>1587	Statement	 
>1588	Statement	 
>1589	ExpressionStatement	 
>1590	AssignmentExpr	g -> ceilingline = NULL
>1591	Identifier	NULL
>1592	PtrMemberAccess	g -> ceilingline
>1593	Identifier	ceilingline
>1594	Identifier	g
>1595	Statement	 
>1596	ExpressionStatement	 
>1597	AssignmentExpr	newsubsec = R_PointInSubsector ( x , y )
>1598	CallExpression	R_PointInSubsector ( x , y )
>1599	ArgumentList	x
>1600	Argument	y
>1601	Identifier	y
>1602	Argument	x
>1603	Identifier	x
>1604	Callee	R_PointInSubsector
>1605	Identifier	R_PointInSubsector
>1606	Identifier	newsubsec
>1607	ExpressionStatement	 
>1608	PtrMemberAccess	g -> tmthing -> radius
>1609	Identifier	radius
>1610	PtrMemberAccess	g -> tmthing
>1611	Identifier	tmthing
>1612	Identifier	g
>1613	Statement	 
>1614	Statement	 
>1615	Statement	 
>1616	Statement	 
>1617	Statement	 
>1618	Statement	 
>1619	Statement	 
>1620	Statement	 
>1621	Statement	 
>1622	Statement	 
>1623	Statement	 
>1624	ExpressionStatement	 
>1625	PtrMemberAccess	g -> tmthing -> radius
>1626	Identifier	radius
>1627	PtrMemberAccess	g -> tmthing
>1628	Identifier	tmthing
>1629	Identifier	g
>1630	Statement	 
>1631	Statement	 
>1632	Statement	 
>1633	Statement	 
>1634	Statement	 
>1635	Statement	 
>1636	Statement	 
>1637	Statement	 
>1638	Statement	 
>1639	Statement	 
>1640	Statement	 
>1641	ExpressionStatement	 
>1642	PtrMemberAccess	g -> tmthing -> radius
>1643	Identifier	radius
>1644	PtrMemberAccess	g -> tmthing
>1645	Identifier	tmthing
>1646	Identifier	g
>1647	Statement	 
>1648	Statement	 
>1649	Statement	 
>1650	Statement	 
>1651	Statement	 
>1652	Statement	 
>1653	Statement	 
>1654	Statement	 
>1655	Statement	 
>1656	Statement	 
>1657	Statement	 
>1658	ExpressionStatement	 
>1659	PtrMemberAccess	g -> tmthing -> radius
>1660	Identifier	radius
>1661	PtrMemberAccess	g -> tmthing
>1662	Identifier	tmthing
>1663	Identifier	g
>1664	Statement	 
>1665	Statement	 
>1666	Statement	 
>1667	Statement	 
>1668	Statement	 
>1669	Statement	 
>1670	Statement	 
>1671	Statement	 
>1672	Statement	 
>1673	Statement	 
>1674	Statement	 
>1675	ExpressionStatement	 
>1676	AssignmentExpr	g -> tmy = y
>1677	Identifier	y
>1678	PtrMemberAccess	g -> tmy
>1679	Identifier	tmy
>1680	Identifier	g
>1681	Statement	 
>1682	ExpressionStatement	 
>1683	AssignmentExpr	g -> tmx = x
>1684	Identifier	x
>1685	PtrMemberAccess	g -> tmx
>1686	Identifier	tmx
>1687	Identifier	g
>1688	Statement	 
>1689	ExpressionStatement	 
>1690	AssignmentExpr	g -> tmflags = thing -> flags
>1691	PtrMemberAccess	thing -> flags
>1692	Identifier	flags
>1693	Identifier	thing
>1694	PtrMemberAccess	g -> tmflags
>1695	Identifier	tmflags
>1696	Identifier	g
>1697	Statement	 
>1698	ExpressionStatement	 
>1699	AssignmentExpr	g -> tmthing = thing
>1700	Identifier	thing
>1701	PtrMemberAccess	g -> tmthing
>1702	Identifier	tmthing
>1703	Identifier	g
>1704	Statement	 
>1705	IdentifierDeclStatement	 
>1706	IdentifierDecl	* newsubsec
>1707	Identifier	newsubsec
>1708	IdentifierDeclType	subsector_t *
>1709	IdentifierDeclStatement	 
>1710	IdentifierDecl	by
>1711	Identifier	by
>1712	IdentifierDeclType	int
>1713	IdentifierDeclStatement	 
>1714	IdentifierDecl	bx
>1715	Identifier	bx
>1716	IdentifierDeclType	int
>1717	IdentifierDeclStatement	 
>1718	IdentifierDecl	yh
>1719	Identifier	yh
>1720	IdentifierDeclType	int
>1721	IdentifierDeclStatement	 
>1722	IdentifierDecl	yl
>1723	Identifier	yl
>1724	IdentifierDeclType	int
>1725	IdentifierDeclStatement	 
>1726	IdentifierDecl	xh
>1727	Identifier	xh
>1728	IdentifierDeclType	int
>1729	IdentifierDeclStatement	 
>1730	IdentifierDecl	xl
>1731	Identifier	xl
>1732	IdentifierDeclType	int
>1773	FunctionDef	P_TryMove (mobj_t * thing , fixed_t x , fixed_t y)
>1774	ParameterList	mobj_t * thing , fixed_t x , fixed_t y
>1775	Parameter	 
>1776	Identifier	y
>1777	ParameterType	fixed_t
>1778	Parameter	 
>1779	Identifier	x
>1780	ParameterType	fixed_t
>1781	Parameter	 
>1782	Identifier	thing
>1783	ParameterType	mobj_t *
>1784	ReturnType	qboolean
>1785	CompoundStatement	 
>1786	ReturnStatement	 
>1787	Identifier	true
>1788	IfStatement	if ( ! ( thing -> flags & ( MF_TELEPORT | MF_NOCLIP ) ) )
>1789	CompoundStatement	 
>1790	CompoundStatement	 
>1791	IfStatement	if ( side != oldside )
>1792	CompoundStatement	 
>1793	ExpressionStatement	 
>1794	Statement	 
>1795	Statement	 
>1796	Statement	 
>1797	Statement	 
>1798	Statement	 
>1799	Statement	 
>1800	Statement	 
>1801	Statement	 
>1802	Statement	 
>1803	Statement	 
>1804	Statement	 
>1805	Statement	 
>1806	IfStatement	if ( ld -> special )
>1807	Statement	 
>1808	Condition	 
>1809	PtrMemberAccess	ld -> special
>1810	Identifier	special
>1811	Identifier	ld
>1812	Condition	 
>1813	EqualityExpression	side != oldside
>1814	Identifier	oldside
>1815	Identifier	side
>1816	ExpressionStatement	 
>1817	AssignmentExpr	oldside = P_PointOnLineSide ( oldx , oldy , ld )
>1818	CallExpression	P_PointOnLineSide ( oldx , oldy , ld )
>1819	ArgumentList	oldx
>1820	Argument	ld
>1821	Identifier	ld
>1822	Argument	oldy
>1823	Identifier	oldy
>1824	Argument	oldx
>1825	Identifier	oldx
>1826	Callee	P_PointOnLineSide
>1827	Identifier	P_PointOnLineSide
>1828	Identifier	oldside
>1829	ExpressionStatement	 
>1830	AssignmentExpr	side = P_PointOnLineSide ( thing -> x , thing -> y , ld )
>1831	CallExpression	P_PointOnLineSide ( thing -> x , thing -> y , ld )
>1832	ArgumentList	thing -> x
>1833	Argument	ld
>1834	Identifier	ld
>1835	Argument	thing -> y
>1836	PtrMemberAccess	thing -> y
>1837	Identifier	y
>1838	Identifier	thing
>1839	Argument	thing -> x
>1840	PtrMemberAccess	thing -> x
>1841	Identifier	x
>1842	Identifier	thing
>1843	Callee	P_PointOnLineSide
>1844	Identifier	P_PointOnLineSide
>1845	Identifier	side
>1846	ExpressionStatement	 
>1847	Statement	 
>1848	Statement	 
>1849	Statement	 
>1850	Statement	 
>1851	Statement	 
>1852	Statement	 
>1853	Statement	 
>1854	Statement	 
>1855	Statement	 
>1856	Statement	 
>1857	Statement	 
>1858	Statement	 
>1859	Statement	 
>1860	Statement	 
>1861	Statement	 
>1862	Statement	 
>1863	Statement	 
>1864	Statement	 
>1865	Statement	 
>1866	Statement	 
>1867	Condition	 
>1868	UnaryOp	! ( thing -> flags & ( MF_TELEPORT | MF_NOCLIP ) )
>1869	BitAndExpression	thing -> flags & ( MF_TELEPORT | MF_NOCLIP )
>1870	InclusiveOrExpression	MF_TELEPORT | MF_NOCLIP
>1871	Identifier	MF_NOCLIP
>1872	Identifier	MF_TELEPORT
>1873	PtrMemberAccess	thing -> flags
>1874	Identifier	flags
>1875	Identifier	thing
>1876	UnaryOperator	!
>1877	ExpressionStatement	 
>1878	CallExpression	P_SetThingPosition ( thing )
>1879	ArgumentList	thing
>1880	Argument	thing
>1881	Identifier	thing
>1882	Callee	P_SetThingPosition
>1883	Identifier	P_SetThingPosition
>1884	ExpressionStatement	 
>1885	AssignmentExpr	thing -> y = y
>1886	Identifier	y
>1887	PtrMemberAccess	thing -> y
>1888	Identifier	y
>1889	Identifier	thing
>1890	ExpressionStatement	 
>1891	AssignmentExpr	thing -> x = x
>1892	Identifier	x
>1893	PtrMemberAccess	thing -> x
>1894	Identifier	x
>1895	Identifier	thing
>1896	ExpressionStatement	 
>1897	PtrMemberAccess	g -> tmceilingz
>1898	Identifier	tmceilingz
>1899	Identifier	g
>1900	Statement	 
>1901	Statement	 
>1902	Statement	 
>1903	Statement	 
>1904	Statement	 
>1905	ExpressionStatement	 
>1906	PtrMemberAccess	g -> tmfloorz
>1907	Identifier	tmfloorz
>1908	Identifier	g
>1909	Statement	 
>1910	Statement	 
>1911	Statement	 
>1912	Statement	 
>1913	Statement	 
>1914	ExpressionStatement	 
>1915	AssignmentExpr	oldy = thing -> y
>1916	PtrMemberAccess	thing -> y
>1917	Identifier	y
>1918	Identifier	thing
>1919	Identifier	oldy
>1920	ExpressionStatement	 
>1921	AssignmentExpr	oldx = thing -> x
>1922	PtrMemberAccess	thing -> x
>1923	Identifier	x
>1924	Identifier	thing
>1925	Identifier	oldx
>1926	ExpressionStatement	 
>1927	CallExpression	P_UnsetThingPosition ( thing )
>1928	ArgumentList	thing
>1929	Argument	thing
>1930	Identifier	thing
>1931	Callee	P_UnsetThingPosition
>1932	Identifier	P_UnsetThingPosition
>1933	IfStatement	if ( ! ( thing -> flags & MF_NOCLIP ) )
>1934	CompoundStatement	 
>1935	ReturnStatement	 
>1936	Identifier	false
>1937	Statement	 
>1938	Statement	 
>1939	Statement	 
>1940	Statement	 
>1941	Statement	 
>1942	Statement	 
>1943	Statement	 
>1944	Statement	 
>1945	Statement	 
>1946	Statement	 
>1947	Statement	 
>1948	Statement	 
>1949	Statement	 
>1950	Statement	 
>1951	Statement	 
>1952	Statement	 
>1953	Statement	 
>1954	Statement	 
>1955	Statement	 
>1956	Statement	 
>1957	Statement	 
>1958	Statement	 
>1959	Statement	 
>1960	Statement	 
>1961	Statement	 
>1962	Statement	 
>1963	Statement	 
>1964	Statement	 
>1965	Statement	 
>1966	ReturnStatement	 
>1967	Identifier	false
>1968	Statement	 
>1969	Statement	 
>1970	Statement	 
>1971	Statement	 
>1972	Statement	 
>1973	Statement	 
>1974	Statement	 
>1975	Statement	 
>1976	Statement	 
>1977	Statement	 
>1978	Statement	 
>1979	Statement	 
>1980	Statement	 
>1981	Statement	 
>1982	Statement	 
>1983	Statement	 
>1984	Statement	 
>1985	Statement	 
>1986	Statement	 
>1987	Statement	 
>1988	Statement	 
>1989	Statement	 
>1990	Statement	 
>1991	Statement	 
>1992	ReturnStatement	 
>1993	Identifier	false
>1994	Statement	 
>1995	Statement	 
>1996	Statement	 
>1997	Statement	 
>1998	Statement	 
>1999	Statement	 
>2000	Statement	 
>2001	Statement	 
>2002	Statement	 
>2003	Statement	 
>2004	Statement	 
>2005	Statement	 
>2006	Statement	 
>2007	Statement	 
>2008	Statement	 
>2009	Statement	 
>2010	Statement	 
>2011	Statement	 
>2012	Statement	 
>2013	Statement	 
>2014	Statement	 
>2015	Statement	 
>2016	Statement	 
>2017	Statement	 
>2018	ExpressionStatement	 
>2019	AssignmentExpr	g -> floatok = true
>2020	Identifier	true
>2021	PtrMemberAccess	g -> floatok
>2022	Identifier	floatok
>2023	Identifier	g
>2024	Statement	 
>2025	ReturnStatement	 
>2026	Identifier	false
>2027	Statement	 
>2028	Statement	 
>2029	Statement	 
>2030	Statement	 
>2031	Statement	 
>2032	Statement	 
>2033	Statement	 
>2034	Statement	 
>2035	Statement	 
>2036	Statement	 
>2037	Statement	 
>2038	Statement	 
>2039	Statement	 
>2040	Statement	 
>2041	Statement	 
>2042	Statement	 
>2043	Condition	 
>2044	UnaryOp	! ( thing -> flags & MF_NOCLIP )
>2045	BitAndExpression	thing -> flags & MF_NOCLIP
>2046	Identifier	MF_NOCLIP
>2047	PtrMemberAccess	thing -> flags
>2048	Identifier	flags
>2049	Identifier	thing
>2050	UnaryOperator	!
>2051	IfStatement	if ( ! P_CheckPosition ( thing , x , y ) )
>2052	ReturnStatement	 
>2053	Identifier	false
>2054	Condition	 
>2055	UnaryOp	! P_CheckPosition ( thing , x , y )
>2056	CallExpression	P_CheckPosition ( thing , x , y )
>2057	ArgumentList	thing
>2058	Argument	y
>2059	Identifier	y
>2060	Argument	x
>2061	Identifier	x
>2062	Argument	thing
>2063	Identifier	thing
>2064	Callee	P_CheckPosition
>2065	Identifier	P_CheckPosition
>2066	UnaryOperator	!
>2067	ExpressionStatement	 
>2068	AssignmentExpr	g -> floatok = false
>2069	Identifier	false
>2070	PtrMemberAccess	g -> floatok
>2071	Identifier	floatok
>2072	Identifier	g
>2073	Statement	 
>2074	IdentifierDeclStatement	 
>2075	IdentifierDecl	* ld
>2076	Identifier	ld
>2077	IdentifierDeclType	line_t *
>2078	IdentifierDeclStatement	 
>2079	IdentifierDecl	oldside
>2080	Identifier	oldside
>2081	IdentifierDeclType	int
>2082	IdentifierDeclStatement	 
>2083	IdentifierDecl	side
>2084	Identifier	side
>2085	IdentifierDeclType	int
>2086	IdentifierDeclStatement	 
>2087	IdentifierDecl	oldy
>2088	Identifier	oldy
>2089	IdentifierDeclType	fixed_t
>2090	IdentifierDeclStatement	 
>2091	IdentifierDecl	oldx
>2092	Identifier	oldx
>2093	IdentifierDeclType	fixed_t
>2120	FunctionDef	P_ThingHeightClip (mobj_t * thing)
>2121	ParameterList	mobj_t * thing
>2122	Parameter	 
>2123	Identifier	thing
>2124	ParameterType	mobj_t *
>2125	ReturnType	qboolean
>2126	CompoundStatement	 
>2127	ReturnStatement	 
>2128	Identifier	true
>2129	IfStatement	if ( thing -> ceilingz - thing -> floorz < thing -> height )
>2130	ReturnStatement	 
>2131	Identifier	false
>2132	Condition	 
>2133	RelationalExpression	thing -> ceilingz - thing -> floorz < thing -> height
>2134	PtrMemberAccess	thing -> height
>2135	Identifier	height
>2136	Identifier	thing
>2137	AdditiveExpression	thing -> ceilingz - thing -> floorz
>2138	PtrMemberAccess	thing -> floorz
>2139	Identifier	floorz
>2140	Identifier	thing
>2141	PtrMemberAccess	thing -> ceilingz
>2142	Identifier	ceilingz
>2143	Identifier	thing
>2144	IfStatement	if ( onfloor )
>2145	ElseStatement	else
>2146	CompoundStatement	 
>2147	IfStatement	if ( thing -> z + thing -> height > thing -> ceilingz )
>2148	ExpressionStatement	 
>2149	AssignmentExpr	thing -> z = thing -> ceilingz - thing -> height
>2150	AdditiveExpression	thing -> ceilingz - thing -> height
>2151	PtrMemberAccess	thing -> height
>2152	Identifier	height
>2153	Identifier	thing
>2154	PtrMemberAccess	thing -> ceilingz
>2155	Identifier	ceilingz
>2156	Identifier	thing
>2157	PtrMemberAccess	thing -> z
>2158	Identifier	z
>2159	Identifier	thing
>2160	Condition	 
>2161	RelationalExpression	thing -> z + thing -> height > thing -> ceilingz
>2162	PtrMemberAccess	thing -> ceilingz
>2163	Identifier	ceilingz
>2164	Identifier	thing
>2165	AdditiveExpression	thing -> z + thing -> height
>2166	PtrMemberAccess	thing -> height
>2167	Identifier	height
>2168	Identifier	thing
>2169	PtrMemberAccess	thing -> z
>2170	Identifier	z
>2171	Identifier	thing
>2172	CompoundStatement	 
>2173	ExpressionStatement	 
>2174	AssignmentExpr	thing -> z = thing -> floorz
>2175	PtrMemberAccess	thing -> floorz
>2176	Identifier	floorz
>2177	Identifier	thing
>2178	PtrMemberAccess	thing -> z
>2179	Identifier	z
>2180	Identifier	thing
>2181	Condition	 
>2182	Identifier	onfloor
>2183	ExpressionStatement	 
>2184	PtrMemberAccess	g -> tmceilingz
>2185	Identifier	tmceilingz
>2186	Identifier	g
>2187	Statement	 
>2188	Statement	 
>2189	Statement	 
>2190	Statement	 
>2191	Statement	 
>2192	ExpressionStatement	 
>2193	PtrMemberAccess	g -> tmfloorz
>2194	Identifier	tmfloorz
>2195	Identifier	g
>2196	Statement	 
>2197	Statement	 
>2198	Statement	 
>2199	Statement	 
>2200	Statement	 
>2201	ExpressionStatement	 
>2202	CallExpression	P_CheckPosition ( thing , thing -> x , thing -> y )
>2203	ArgumentList	thing
>2204	Argument	thing -> y
>2205	PtrMemberAccess	thing -> y
>2206	Identifier	y
>2207	Identifier	thing
>2208	Argument	thing -> x
>2209	PtrMemberAccess	thing -> x
>2210	Identifier	x
>2211	Identifier	thing
>2212	Argument	thing
>2213	Identifier	thing
>2214	Callee	P_CheckPosition
>2215	Identifier	P_CheckPosition
>2216	ExpressionStatement	 
>2217	AssignmentExpr	onfloor = ( thing -> z == thing -> floorz )
>2218	EqualityExpression	thing -> z == thing -> floorz
>2219	PtrMemberAccess	thing -> floorz
>2220	Identifier	floorz
>2221	Identifier	thing
>2222	PtrMemberAccess	thing -> z
>2223	Identifier	z
>2224	Identifier	thing
>2225	Identifier	onfloor
>2226	IdentifierDeclStatement	 
>2227	IdentifierDecl	onfloor
>2228	Identifier	onfloor
>2229	IdentifierDeclType	qboolean
>2245	FunctionDef	P_HitSlideLine (line_t * ld)
>2246	ParameterList	line_t * ld
>2247	Parameter	 
>2248	Identifier	ld
>2249	ParameterType	line_t *
>2250	ReturnType	void
>2251	CompoundStatement	 
>2252	ExpressionStatement	 
>2253	AssignmentExpr	g -> tmymove = FixedMul ( newlen , finesine [ lineangle ] )
>2254	CallExpression	FixedMul ( newlen , finesine [ lineangle ] )
>2255	ArgumentList	newlen
>2256	Argument	finesine [ lineangle ]
>2257	ArrayIndexing	finesine [ lineangle ]
>2258	Identifier	lineangle
>2259	Identifier	finesine
>2260	Argument	newlen
>2261	Identifier	newlen
>2262	Callee	FixedMul
>2263	Identifier	FixedMul
>2264	PtrMemberAccess	g -> tmymove
>2265	Identifier	tmymove
>2266	Identifier	g
>2267	Statement	 
>2268	ExpressionStatement	 
>2269	AssignmentExpr	g -> tmxmove = FixedMul ( newlen , finecosine [ lineangle ] )
>2270	CallExpression	FixedMul ( newlen , finecosine [ lineangle ] )
>2271	ArgumentList	newlen
>2272	Argument	finecosine [ lineangle ]
>2273	ArrayIndexing	finecosine [ lineangle ]
>2274	Identifier	lineangle
>2275	Identifier	finecosine
>2276	Argument	newlen
>2277	Identifier	newlen
>2278	Callee	FixedMul
>2279	Identifier	FixedMul
>2280	PtrMemberAccess	g -> tmxmove
>2281	Identifier	tmxmove
>2282	Identifier	g
>2283	Statement	 
>2284	ExpressionStatement	 
>2285	AssignmentExpr	newlen = FixedMul ( movelen , finecosine [ deltaangle ] )
>2286	CallExpression	FixedMul ( movelen , finecosine [ deltaangle ] )
>2287	ArgumentList	movelen
>2288	Argument	finecosine [ deltaangle ]
>2289	ArrayIndexing	finecosine [ deltaangle ]
>2290	Identifier	deltaangle
>2291	Identifier	finecosine
>2292	Argument	movelen
>2293	Identifier	movelen
>2294	Callee	FixedMul
>2295	Identifier	FixedMul
>2296	Identifier	newlen
>2297	ExpressionStatement	 
>2298	Statement	 
>2299	Statement	 
>2300	Statement	 
>2301	Statement	 
>2302	Statement	 
>2303	Statement	 
>2304	Statement	 
>2305	Statement	 
>2306	Statement	 
>2307	Statement	 
>2308	Statement	 
>2309	Statement	 
>2310	Statement	 
>2311	Statement	 
>2312	ExpressionStatement	 
>2313	AssignmentExpr	deltaangle >>= ANGLETOFINESHIFT
>2314	Identifier	ANGLETOFINESHIFT
>2315	Identifier	deltaangle
>2316	ExpressionStatement	 
>2317	AssignmentExpr	lineangle >>= ANGLETOFINESHIFT
>2318	Identifier	ANGLETOFINESHIFT
>2319	Identifier	lineangle
>2320	IfStatement	if ( deltaangle > ANG180 )
>2321	ExpressionStatement	 
>2322	AssignmentExpr	deltaangle += ANG180
>2323	Identifier	ANG180
>2324	Identifier	deltaangle
>2325	Condition	 
>2326	RelationalExpression	deltaangle > ANG180
>2327	Identifier	ANG180
>2328	Identifier	deltaangle
>2329	ExpressionStatement	 
>2330	AssignmentExpr	deltaangle = moveangle - lineangle
>2331	AdditiveExpression	moveangle - lineangle
>2332	Identifier	lineangle
>2333	Identifier	moveangle
>2334	Identifier	deltaangle
>2335	ExpressionStatement	 
>2336	Statement	 
>2337	Statement	 
>2338	Statement	 
>2339	Statement	 
>2340	Statement	 
>2341	Statement	 
>2342	Statement	 
>2343	Statement	 
>2344	Statement	 
>2345	Statement	 
>2346	Statement	 
>2347	Statement	 
>2348	Statement	 
>2349	Statement	 
>2350	Statement	 
>2351	Statement	 
>2352	Statement	 
>2353	Statement	 
>2354	IfStatement	if ( side == 1 )
>2355	ExpressionStatement	 
>2356	AssignmentExpr	lineangle += ANG180
>2357	Identifier	ANG180
>2358	Identifier	lineangle
>2359	Condition	 
>2360	EqualityExpression	side == 1
>2361	PrimaryExpression	1
>2362	Identifier	side
>2363	ExpressionStatement	 
>2364	AssignmentExpr	lineangle = R_PointToAngle2 ( 0 , 0 , ld -> dx , ld -> dy )
>2365	CallExpression	R_PointToAngle2 ( 0 , 0 , ld -> dx , ld -> dy )
>2366	ArgumentList	0
>2367	Argument	ld -> dy
>2368	PtrMemberAccess	ld -> dy
>2369	Identifier	dy
>2370	Identifier	ld
>2371	Argument	ld -> dx
>2372	PtrMemberAccess	ld -> dx
>2373	Identifier	dx
>2374	Identifier	ld
>2375	Argument	0
>2376	PrimaryExpression	0
>2377	Argument	0
>2378	PrimaryExpression	0
>2379	Callee	R_PointToAngle2
>2380	Identifier	R_PointToAngle2
>2381	Identifier	lineangle
>2382	ExpressionStatement	 
>2383	Statement	 
>2384	Statement	 
>2385	Statement	 
>2386	Statement	 
>2387	Statement	 
>2388	Statement	 
>2389	Statement	 
>2390	Statement	 
>2391	Statement	 
>2392	Statement	 
>2393	Statement	 
>2394	Statement	 
>2395	Statement	 
>2396	Statement	 
>2397	Statement	 
>2398	Statement	 
>2399	Statement	 
>2400	Statement	 
>2401	Statement	 
>2402	Statement	 
>2403	IfStatement	if ( ld -> slopetype == ST_VERTICAL )
>2404	CompoundStatement	 
>2405	ReturnStatement	 
>2406	ExpressionStatement	 
>2407	AssignmentExpr	g -> tmxmove = 0
>2408	PrimaryExpression	0
>2409	PtrMemberAccess	g -> tmxmove
>2410	Identifier	tmxmove
>2411	Identifier	g
>2412	Statement	 
>2413	Condition	 
>2414	EqualityExpression	ld -> slopetype == ST_VERTICAL
>2415	Identifier	ST_VERTICAL
>2416	PtrMemberAccess	ld -> slopetype
>2417	Identifier	slopetype
>2418	Identifier	ld
>2419	IfStatement	if ( ld -> slopetype == ST_HORIZONTAL )
>2420	CompoundStatement	 
>2421	ReturnStatement	 
>2422	ExpressionStatement	 
>2423	AssignmentExpr	g -> tmymove = 0
>2424	PrimaryExpression	0
>2425	PtrMemberAccess	g -> tmymove
>2426	Identifier	tmymove
>2427	Identifier	g
>2428	Statement	 
>2429	Condition	 
>2430	EqualityExpression	ld -> slopetype == ST_HORIZONTAL
>2431	Identifier	ST_HORIZONTAL
>2432	PtrMemberAccess	ld -> slopetype
>2433	Identifier	slopetype
>2434	Identifier	ld
>2435	IdentifierDeclStatement	 
>2436	IdentifierDecl	newlen
>2437	Identifier	newlen
>2438	IdentifierDeclType	fixed_t
>2439	IdentifierDeclStatement	 
>2440	IdentifierDecl	movelen
>2441	Identifier	movelen
>2442	IdentifierDeclType	fixed_t
>2443	IdentifierDeclStatement	 
>2444	IdentifierDecl	deltaangle
>2445	Identifier	deltaangle
>2446	IdentifierDeclType	angle_t
>2447	IdentifierDeclStatement	 
>2448	IdentifierDecl	moveangle
>2449	Identifier	moveangle
>2450	IdentifierDeclType	angle_t
>2451	IdentifierDeclStatement	 
>2452	IdentifierDecl	lineangle
>2453	Identifier	lineangle
>2454	IdentifierDeclType	angle_t
>2455	IdentifierDeclStatement	 
>2456	IdentifierDecl	side
>2457	Identifier	side
>2458	IdentifierDeclType	int
>2489	FunctionDef	PTR_SlideTraverse (intercept_t * in)
>2490	ParameterList	intercept_t * in
>2491	Parameter	 
>2492	Identifier	in
>2493	ParameterType	intercept_t *
>2494	ReturnType	qboolean
>2495	CompoundStatement	 
>2496	ReturnStatement	 
>2497	Identifier	false
>2498	CompoundStatement	 
>2499	ExpressionStatement	 
>2500	AssignmentExpr	g -> bestslideline = li
>2501	Identifier	li
>2502	PtrMemberAccess	g -> bestslideline
>2503	Identifier	bestslideline
>2504	Identifier	g
>2505	Statement	 
>2506	ExpressionStatement	 
>2507	AssignmentExpr	g -> bestslidefrac = in -> frac
>2508	PtrMemberAccess	in -> frac
>2509	Identifier	frac
>2510	Identifier	in
>2511	PtrMemberAccess	g -> bestslidefrac
>2512	Identifier	bestslidefrac
>2513	Identifier	g
>2514	Statement	 
>2515	ExpressionStatement	 
>2516	PtrMemberAccess	g -> bestslideline
>2517	Identifier	bestslideline
>2518	Identifier	g
>2519	Statement	 
>2520	Statement	 
>2521	Statement	 
>2522	Statement	 
>2523	Statement	 
>2524	Statement	 
>2525	ExpressionStatement	 
>2526	PtrMemberAccess	g -> bestslidefrac
>2527	Identifier	bestslidefrac
>2528	Identifier	g
>2529	Statement	 
>2530	Statement	 
>2531	Statement	 
>2532	Statement	 
>2533	Statement	 
>2534	Statement	 
>2535	Statement	 
>2536	Statement	 
>2537	Statement	 
>2538	Statement	 
>2539	Statement	 
>2540	Statement	 
>2541	Statement	 
>2542	Statement	 
>2543	Statement	 
>2544	Statement	 
>2545	Statement	 
>2546	Label	 
>2547	Identifier	isblocking
>2548	ReturnStatement	 
>2549	Identifier	true
>2550	GotoStatement	 
>2551	Identifier	isblocking
>2552	Statement	 
>2553	Statement	 
>2554	Statement	 
>2555	Statement	 
>2556	Statement	 
>2557	Statement	 
>2558	Statement	 
>2559	Statement	 
>2560	Statement	 
>2561	Statement	 
>2562	Statement	 
>2563	Statement	 
>2564	Statement	 
>2565	Statement	 
>2566	Statement	 
>2567	Statement	 
>2568	Statement	 
>2569	Statement	 
>2570	GotoStatement	 
>2571	Identifier	isblocking
>2572	Statement	 
>2573	Statement	 
>2574	Statement	 
>2575	Statement	 
>2576	Statement	 
>2577	Statement	 
>2578	Statement	 
>2579	Statement	 
>2580	Statement	 
>2581	Statement	 
>2582	Statement	 
>2583	Statement	 
>2584	Statement	 
>2585	Statement	 
>2586	Statement	 
>2587	Statement	 
>2588	Statement	 
>2589	Statement	 
>2590	Statement	 
>2591	Statement	 
>2592	Statement	 
>2593	GotoStatement	 
>2594	Identifier	isblocking
>2595	Statement	 
>2596	Statement	 
>2597	Statement	 
>2598	Statement	 
>2599	Statement	 
>2600	Statement	 
>2601	Statement	 
>2602	Statement	 
>2603	Statement	 
>2604	Statement	 
>2605	Statement	 
>2606	Statement	 
>2607	Statement	 
>2608	Statement	 
>2609	ExpressionStatement	 
>2610	CallExpression	P_LineOpening ( li )
>2611	ArgumentList	li
>2612	Argument	li
>2613	Identifier	li
>2614	Callee	P_LineOpening
>2615	Identifier	P_LineOpening
>2616	IfStatement	if ( ! ( li -> flags & ML_TWOSIDED ) )
>2617	CompoundStatement	 
>2618	GotoStatement	 
>2619	Identifier	isblocking
>2620	CompoundStatement	 
>2621	ReturnStatement	 
>2622	Identifier	true
>2623	Statement	 
>2624	Statement	 
>2625	Statement	 
>2626	Statement	 
>2627	Statement	 
>2628	Statement	 
>2629	Statement	 
>2630	Statement	 
>2631	Statement	 
>2632	Statement	 
>2633	Statement	 
>2634	Statement	 
>2635	Statement	 
>2636	Statement	 
>2637	Statement	 
>2638	Statement	 
>2639	Statement	 
>2640	Statement	 
>2641	Statement	 
>2642	Statement	 
>2643	Statement	 
>2644	Condition	 
>2645	UnaryOp	! ( li -> flags & ML_TWOSIDED )
>2646	BitAndExpression	li -> flags & ML_TWOSIDED
>2647	Identifier	ML_TWOSIDED
>2648	PtrMemberAccess	li -> flags
>2649	Identifier	flags
>2650	Identifier	li
>2651	UnaryOperator	!
>2652	ExpressionStatement	 
>2653	AssignmentExpr	li = in -> d . line
>2654	MemberAccess	in -> d . line
>2655	Identifier	line
>2656	PtrMemberAccess	in -> d
>2657	Identifier	d
>2658	Identifier	in
>2659	Identifier	li
>2660	IfStatement	if ( ! in -> isaline )
>2661	ExpressionStatement	 
>2662	CallExpression	I_Error ( \"PTR_SlideTraverse
>2663	ArgumentList	\"PTR_SlideTraverse
>2664	Argument	\"PTR_SlideTraverse
>2665	PrimaryExpression	\"PTR_SlideTraverse
>2666	Callee	I_Error
>2667	Identifier	I_Error
>2668	Condition	 
>2669	UnaryOp	! in -> isaline
>2670	PtrMemberAccess	in -> isaline
>2671	Identifier	isaline
>2672	Identifier	in
>2673	UnaryOperator	!
>2674	IdentifierDeclStatement	 
>2675	IdentifierDecl	* li
>2676	Identifier	li
>2677	IdentifierDeclType	line_t *
>2697	FunctionDef	P_SlideMove (mobj_t * mo)
>2698	ParameterList	mobj_t * mo
>2699	Parameter	 
>2700	Identifier	mo
>2701	ParameterType	mobj_t *
>2702	ReturnType	void
>2703	CompoundStatement	 
>2704	CompoundStatement	 
>2705	GotoStatement	 
>2706	Identifier	retry
>2707	Statement	 
>2708	Statement	 
>2709	Statement	 
>2710	Statement	 
>2711	Statement	 
>2712	Statement	 
>2713	Statement	 
>2714	Statement	 
>2715	Statement	 
>2716	Statement	 
>2717	Statement	 
>2718	Statement	 
>2719	Statement	 
>2720	Statement	 
>2721	Statement	 
>2722	Statement	 
>2723	Statement	 
>2724	Statement	 
>2725	Statement	 
>2726	Statement	 
>2727	Statement	 
>2728	Statement	 
>2729	Statement	 
>2730	Statement	 
>2731	Statement	 
>2732	Statement	 
>2733	ExpressionStatement	 
>2734	PtrMemberAccess	g -> tmymove
>2735	Identifier	tmymove
>2736	Identifier	g
>2737	Statement	 
>2738	Statement	 
>2739	Statement	 
>2740	Statement	 
>2741	Statement	 
>2742	ExpressionStatement	 
>2743	PtrMemberAccess	g -> tmxmove
>2744	Identifier	tmxmove
>2745	Identifier	g
>2746	Statement	 
>2747	Statement	 
>2748	Statement	 
>2749	Statement	 
>2750	Statement	 
>2751	ExpressionStatement	 
>2752	Statement	 
>2753	Statement	 
>2754	Statement	 
>2755	Statement	 
>2756	Statement	 
>2757	Statement	 
>2758	Statement	 
>2759	ExpressionStatement	 
>2760	Statement	 
>2761	Statement	 
>2762	Statement	 
>2763	Statement	 
>2764	Statement	 
>2765	Statement	 
>2766	Statement	 
>2767	Statement	 
>2768	Statement	 
>2769	Statement	 
>2770	Statement	 
>2771	Statement	 
>2772	Statement	 
>2773	Statement	 
>2774	Statement	 
>2775	Statement	 
>2776	ExpressionStatement	 
>2777	Statement	 
>2778	Statement	 
>2779	Statement	 
>2780	Statement	 
>2781	Statement	 
>2782	Statement	 
>2783	Statement	 
>2784	Statement	 
>2785	Statement	 
>2786	Statement	 
>2787	Statement	 
>2788	Statement	 
>2789	Statement	 
>2790	Statement	 
>2791	Statement	 
>2792	Statement	 
>2793	ReturnStatement	 
>2794	Statement	 
>2795	Statement	 
>2796	Statement	 
>2797	Statement	 
>2798	Statement	 
>2799	Statement	 
>2800	Statement	 
>2801	Statement	 
>2802	Statement	 
>2803	ExpressionStatement	 
>2804	AssignmentExpr	g -> bestslidefrac = FRACUNIT
>2805	Identifier	FRACUNIT
>2806	PtrMemberAccess	g -> bestslidefrac
>2807	Identifier	bestslidefrac
>2808	Identifier	g
>2809	Statement	 
>2810	Statement	 
>2811	Statement	 
>2812	Statement	 
>2813	Statement	 
>2814	Statement	 
>2815	Statement	 
>2816	Statement	 
>2817	Statement	 
>2818	Statement	 
>2819	ExpressionStatement	 
>2820	Statement	 
>2821	Statement	 
>2822	Statement	 
>2823	Statement	 
>2824	Statement	 
>2825	Statement	 
>2826	Statement	 
>2827	Statement	 
>2828	Statement	 
>2829	Statement	 
>2830	Statement	 
>2831	Statement	 
>2832	Statement	 
>2833	Statement	 
>2834	Statement	 
>2835	CompoundStatement	 
>2836	IfStatement	if ( ! P_TryMove ( mo , mo -> x + newx , mo -> y + newy ) )
>2837	GotoStatement	 
>2838	Identifier	stairstep
>2839	Condition	 
>2840	UnaryOp	! P_TryMove ( mo , mo -> x + newx , mo -> y + newy )
>2841	CallExpression	P_TryMove ( mo , mo -> x + newx , mo -> y + newy )
>2842	ArgumentList	mo
>2843	Argument	mo -> y + newy
>2844	AdditiveExpression	mo -> y + newy
>2845	Identifier	newy
>2846	PtrMemberAccess	mo -> y
>2847	Identifier	y
>2848	Identifier	mo
>2849	Argument	mo -> x + newx
>2850	AdditiveExpression	mo -> x + newx
>2851	Identifier	newx
>2852	PtrMemberAccess	mo -> x
>2853	Identifier	x
>2854	Identifier	mo
>2855	Argument	mo
>2856	Identifier	mo
>2857	Callee	P_TryMove
>2858	Identifier	P_TryMove
>2859	UnaryOperator	!
>2860	ExpressionStatement	 
>2861	Statement	 
>2862	Statement	 
>2863	Statement	 
>2864	Statement	 
>2865	Statement	 
>2866	Statement	 
>2867	Statement	 
>2868	Statement	 
>2869	Statement	 
>2870	Statement	 
>2871	Statement	 
>2872	Statement	 
>2873	Statement	 
>2874	ExpressionStatement	 
>2875	Statement	 
>2876	Statement	 
>2877	Statement	 
>2878	Statement	 
>2879	Statement	 
>2880	Statement	 
>2881	Statement	 
>2882	Statement	 
>2883	Statement	 
>2884	Statement	 
>2885	Statement	 
>2886	Statement	 
>2887	Statement	 
>2888	Statement	 
>2889	Statement	 
>2890	Statement	 
>2891	Statement	 
>2892	Statement	 
>2893	Statement	 
>2894	Statement	 
>2895	Statement	 
>2896	Statement	 
>2897	ExpressionStatement	 
>2898	AssignmentExpr	g -> bestslidefrac -= 0x800
>2899	PrimaryExpression	0x800
>2900	PtrMemberAccess	g -> bestslidefrac
>2901	Identifier	bestslidefrac
>2902	Identifier	g
>2903	Statement	 
>2904	CompoundStatement	 
>2905	ReturnStatement	 
>2906	IfStatement	if ( ! P_TryMove ( mo , mo -> x , mo -> y + mo -> momy ) )
>2907	ExpressionStatement	 
>2908	CallExpression	P_TryMove ( mo , mo -> x + mo -> momx , mo -> y )
>2909	ArgumentList	mo
>2910	Argument	mo -> y
>2911	PtrMemberAccess	mo -> y
>2912	Identifier	y
>2913	Identifier	mo
>2914	Argument	mo -> x + mo -> momx
>2915	AdditiveExpression	mo -> x + mo -> momx
>2916	PtrMemberAccess	mo -> momx
>2917	Identifier	momx
>2918	Identifier	mo
>2919	PtrMemberAccess	mo -> x
>2920	Identifier	x
>2921	Identifier	mo
>2922	Argument	mo
>2923	Identifier	mo
>2924	Callee	P_TryMove
>2925	Identifier	P_TryMove
>2926	Condition	 
>2927	UnaryOp	! P_TryMove ( mo , mo -> x , mo -> y + mo -> momy )
>2928	CallExpression	P_TryMove ( mo , mo -> x , mo -> y + mo -> momy )
>2929	ArgumentList	mo
>2930	Argument	mo -> y + mo -> momy
>2931	AdditiveExpression	mo -> y + mo -> momy
>2932	PtrMemberAccess	mo -> momy
>2933	Identifier	momy
>2934	Identifier	mo
>2935	PtrMemberAccess	mo -> y
>2936	Identifier	y
>2937	Identifier	mo
>2938	Argument	mo -> x
>2939	PtrMemberAccess	mo -> x
>2940	Identifier	x
>2941	Identifier	mo
>2942	Argument	mo
>2943	Identifier	mo
>2944	Callee	P_TryMove
>2945	Identifier	P_TryMove
>2946	UnaryOperator	!
>2947	Label	 
>2948	Identifier	stairstep
>2949	Statement	 
>2950	Statement	 
>2951	Statement	 
>2952	Statement	 
>2953	Statement	 
>2954	Statement	 
>2955	Statement	 
>2956	Statement	 
>2957	Statement	 
>2958	Statement	 
>2959	Statement	 
>2960	ExpressionStatement	 
>2961	CallExpression	P_PathTraverse ( leadx , traily , leadx + mo -> momx , traily + mo -> momy , PT_ADDLINES , PTR_SlideTraverse )
>2962	ArgumentList	leadx
>2963	Argument	PTR_SlideTraverse
>2964	Identifier	PTR_SlideTraverse
>2965	Argument	PT_ADDLINES
>2966	Identifier	PT_ADDLINES
>2967	Argument	traily + mo -> momy
>2968	AdditiveExpression	traily + mo -> momy
>2969	PtrMemberAccess	mo -> momy
>2970	Identifier	momy
>2971	Identifier	mo
>2972	Identifier	traily
>2973	Argument	leadx + mo -> momx
>2974	AdditiveExpression	leadx + mo -> momx
>2975	PtrMemberAccess	mo -> momx
>2976	Identifier	momx
>2977	Identifier	mo
>2978	Identifier	leadx
>2979	Argument	traily
>2980	Identifier	traily
>2981	Argument	leadx
>2982	Identifier	leadx
>2983	Callee	P_PathTraverse
>2984	Identifier	P_PathTraverse
>2985	ExpressionStatement	 
>2986	CallExpression	P_PathTraverse ( trailx , leady , trailx + mo -> momx , leady + mo -> momy , PT_ADDLINES , PTR_SlideTraverse )
>2987	ArgumentList	trailx
>2988	Argument	PTR_SlideTraverse
>2989	Identifier	PTR_SlideTraverse
>2990	Argument	PT_ADDLINES
>2991	Identifier	PT_ADDLINES
>2992	Argument	leady + mo -> momy
>2993	AdditiveExpression	leady + mo -> momy
>2994	PtrMemberAccess	mo -> momy
>2995	Identifier	momy
>2996	Identifier	mo
>2997	Identifier	leady
>2998	Argument	trailx + mo -> momx
>2999	AdditiveExpression	trailx + mo -> momx
>3000	PtrMemberAccess	mo -> momx
>3001	Identifier	momx
>3002	Identifier	mo
>3003	Identifier	trailx
>3004	Argument	leady
>3005	Identifier	leady
>3006	Argument	trailx
>3007	Identifier	trailx
>3008	Callee	P_PathTraverse
>3009	Identifier	P_PathTraverse
>3010	ExpressionStatement	 
>3011	CallExpression	P_PathTraverse ( leadx , leady , leadx + mo -> momx , leady + mo -> momy , PT_ADDLINES , PTR_SlideTraverse )
>3012	ArgumentList	leadx
>3013	Argument	PTR_SlideTraverse
>3014	Identifier	PTR_SlideTraverse
>3015	Argument	PT_ADDLINES
>3016	Identifier	PT_ADDLINES
>3017	Argument	leady + mo -> momy
>3018	AdditiveExpression	leady + mo -> momy
>3019	PtrMemberAccess	mo -> momy
>3020	Identifier	momy
>3021	Identifier	mo
>3022	Identifier	leady
>3023	Argument	leadx + mo -> momx
>3024	AdditiveExpression	leadx + mo -> momx
>3025	PtrMemberAccess	mo -> momx
>3026	Identifier	momx
>3027	Identifier	mo
>3028	Identifier	leadx
>3029	Argument	leady
>3030	Identifier	leady
>3031	Argument	leadx
>3032	Identifier	leadx
>3033	Callee	P_PathTraverse
>3034	Identifier	P_PathTraverse
>3035	ExpressionStatement	 
>3036	AssignmentExpr	g -> bestslidefrac = FRACUNIT + 1
>3037	AdditiveExpression	FRACUNIT + 1
>3038	PrimaryExpression	1
>3039	Identifier	FRACUNIT
>3040	PtrMemberAccess	g -> bestslidefrac
>3041	Identifier	bestslidefrac
>3042	Identifier	g
>3043	Statement	 
>3044	IfStatement	if ( mo -> momy > 0 )
>3045	ElseStatement	else
>3046	CompoundStatement	 
>3047	ExpressionStatement	 
>3048	AssignmentExpr	traily = mo -> y + mo -> radius
>3049	AdditiveExpression	mo -> y + mo -> radius
>3050	PtrMemberAccess	mo -> radius
>3051	Identifier	radius
>3052	Identifier	mo
>3053	PtrMemberAccess	mo -> y
>3054	Identifier	y
>3055	Identifier	mo
>3056	Identifier	traily
>3057	ExpressionStatement	 
>3058	AssignmentExpr	leady = mo -> y - mo -> radius
>3059	AdditiveExpression	mo -> y - mo -> radius
>3060	PtrMemberAccess	mo -> radius
>3061	Identifier	radius
>3062	Identifier	mo
>3063	PtrMemberAccess	mo -> y
>3064	Identifier	y
>3065	Identifier	mo
>3066	Identifier	leady
>3067	CompoundStatement	 
>3068	ExpressionStatement	 
>3069	AssignmentExpr	traily = mo -> y - mo -> radius
>3070	AdditiveExpression	mo -> y - mo -> radius
>3071	PtrMemberAccess	mo -> radius
>3072	Identifier	radius
>3073	Identifier	mo
>3074	PtrMemberAccess	mo -> y
>3075	Identifier	y
>3076	Identifier	mo
>3077	Identifier	traily
>3078	ExpressionStatement	 
>3079	AssignmentExpr	leady = mo -> y + mo -> radius
>3080	AdditiveExpression	mo -> y + mo -> radius
>3081	PtrMemberAccess	mo -> radius
>3082	Identifier	radius
>3083	Identifier	mo
>3084	PtrMemberAccess	mo -> y
>3085	Identifier	y
>3086	Identifier	mo
>3087	Identifier	leady
>3088	Condition	 
>3089	RelationalExpression	mo -> momy > 0
>3090	PrimaryExpression	0
>3091	PtrMemberAccess	mo -> momy
>3092	Identifier	momy
>3093	Identifier	mo
>3094	IfStatement	if ( mo -> momx > 0 )
>3095	ElseStatement	else
>3096	CompoundStatement	 
>3097	ExpressionStatement	 
>3098	AssignmentExpr	trailx = mo -> x + mo -> radius
>3099	AdditiveExpression	mo -> x + mo -> radius
>3100	PtrMemberAccess	mo -> radius
>3101	Identifier	radius
>3102	Identifier	mo
>3103	PtrMemberAccess	mo -> x
>3104	Identifier	x
>3105	Identifier	mo
>3106	Identifier	trailx
>3107	ExpressionStatement	 
>3108	AssignmentExpr	leadx = mo -> x - mo -> radius
>3109	AdditiveExpression	mo -> x - mo -> radius
>3110	PtrMemberAccess	mo -> radius
>3111	Identifier	radius
>3112	Identifier	mo
>3113	PtrMemberAccess	mo -> x
>3114	Identifier	x
>3115	Identifier	mo
>3116	Identifier	leadx
>3117	CompoundStatement	 
>3118	ExpressionStatement	 
>3119	AssignmentExpr	trailx = mo -> x - mo -> radius
>3120	AdditiveExpression	mo -> x - mo -> radius
>3121	PtrMemberAccess	mo -> radius
>3122	Identifier	radius
>3123	Identifier	mo
>3124	PtrMemberAccess	mo -> x
>3125	Identifier	x
>3126	Identifier	mo
>3127	Identifier	trailx
>3128	ExpressionStatement	 
>3129	AssignmentExpr	leadx = mo -> x + mo -> radius
>3130	AdditiveExpression	mo -> x + mo -> radius
>3131	PtrMemberAccess	mo -> radius
>3132	Identifier	radius
>3133	Identifier	mo
>3134	PtrMemberAccess	mo -> x
>3135	Identifier	x
>3136	Identifier	mo
>3137	Identifier	leadx
>3138	Condition	 
>3139	RelationalExpression	mo -> momx > 0
>3140	PrimaryExpression	0
>3141	PtrMemberAccess	mo -> momx
>3142	Identifier	momx
>3143	Identifier	mo
>3144	IfStatement	if ( ++ hitcount == 3 )
>3145	GotoStatement	 
>3146	Identifier	stairstep
>3147	Condition	 
>3148	EqualityExpression	++ hitcount == 3
>3149	PrimaryExpression	3
>3150	UnaryExpression	++ hitcount
>3151	Identifier	hitcount
>3152	IncDec	++
>3153	Label	 
>3154	Identifier	retry
>3155	ExpressionStatement	 
>3156	AssignmentExpr	hitcount = 0
>3157	PrimaryExpression	0
>3158	Identifier	hitcount
>3159	ExpressionStatement	 
>3160	AssignmentExpr	g -> slidemo = mo
>3161	Identifier	mo
>3162	PtrMemberAccess	g -> slidemo
>3163	Identifier	slidemo
>3164	Identifier	g
>3165	Statement	 
>3166	IdentifierDeclStatement	 
>3167	IdentifierDecl	hitcount
>3168	Identifier	hitcount
>3169	IdentifierDeclType	int
>3170	IdentifierDeclStatement	 
>3171	IdentifierDecl	newy
>3172	Identifier	newy
>3173	IdentifierDeclType	fixed_t
>3174	IdentifierDeclStatement	 
>3175	IdentifierDecl	newx
>3176	Identifier	newx
>3177	IdentifierDeclType	fixed_t
>3178	IdentifierDeclStatement	 
>3179	IdentifierDecl	traily
>3180	Identifier	traily
>3181	IdentifierDeclType	fixed_t
>3182	IdentifierDeclStatement	 
>3183	IdentifierDecl	trailx
>3184	Identifier	trailx
>3185	IdentifierDeclType	fixed_t
>3186	IdentifierDeclStatement	 
>3187	IdentifierDecl	leady
>3188	Identifier	leady
>3189	IdentifierDeclType	fixed_t
>3190	IdentifierDeclStatement	 
>3191	IdentifierDecl	leadx
>3192	Identifier	leadx
>3193	IdentifierDeclType	fixed_t
>3219	FunctionDef	PTR_AimTraverse (intercept_t * in)
>3220	ParameterList	intercept_t * in
>3221	Parameter	 
>3222	Identifier	in
>3223	ParameterType	intercept_t *
>3224	ReturnType	qboolean
>3225	CompoundStatement	 
>3226	ReturnStatement	 
>3227	Identifier	false
>3228	ExpressionStatement	 
>3229	AssignmentExpr	g -> linetarget = th
>3230	Identifier	th
>3231	PtrMemberAccess	g -> linetarget
>3232	Identifier	linetarget
>3233	Identifier	g
>3234	Statement	 
>3235	ExpressionStatement	 
>3236	AssignmentExpr	g -> aimslope = ( thingtopslope + thingbottomslope ) / 2
>3237	MultiplicativeExpression	( thingtopslope + thingbottomslope ) / 2
>3238	PrimaryExpression	2
>3239	AdditiveExpression	thingtopslope + thingbottomslope
>3240	Identifier	thingbottomslope
>3241	Identifier	thingtopslope
>3242	PtrMemberAccess	g -> aimslope
>3243	Identifier	aimslope
>3244	Identifier	g
>3245	Statement	 
>3246	ExpressionStatement	 
>3247	PtrMemberAccess	g -> bottomslope
>3248	Identifier	bottomslope
>3249	Identifier	g
>3250	Statement	 
>3251	Statement	 
>3252	Statement	 
>3253	Statement	 
>3254	Statement	 
>3255	Statement	 
>3256	Statement	 
>3257	Statement	 
>3258	Statement	 
>3259	Statement	 
>3260	Statement	 
>3261	Statement	 
>3262	ExpressionStatement	 
>3263	PtrMemberAccess	g -> topslope
>3264	Identifier	topslope
>3265	Identifier	g
>3266	Statement	 
>3267	Statement	 
>3268	Statement	 
>3269	Statement	 
>3270	Statement	 
>3271	Statement	 
>3272	Statement	 
>3273	Statement	 
>3274	Statement	 
>3275	Statement	 
>3276	Statement	 
>3277	Statement	 
>3278	ReturnStatement	 
>3279	Identifier	true
>3280	Statement	 
>3281	Statement	 
>3282	Statement	 
>3283	Statement	 
>3284	Statement	 
>3285	Statement	 
>3286	Statement	 
>3287	Statement	 
>3288	Statement	 
>3289	ExpressionStatement	 
>3290	Statement	 
>3291	Statement	 
>3292	Statement	 
>3293	Statement	 
>3294	Statement	 
>3295	Statement	 
>3296	Statement	 
>3297	Statement	 
>3298	Statement	 
>3299	Statement	 
>3300	Statement	 
>3301	Statement	 
>3302	Statement	 
>3303	Statement	 
>3304	Statement	 
>3305	ReturnStatement	 
>3306	Identifier	true
>3307	Statement	 
>3308	Statement	 
>3309	Statement	 
>3310	Statement	 
>3311	Statement	 
>3312	Statement	 
>3313	Statement	 
>3314	Statement	 
>3315	Statement	 
>3316	ExpressionStatement	 
>3317	Statement	 
>3318	Statement	 
>3319	Statement	 
>3320	Statement	 
>3321	Statement	 
>3322	Statement	 
>3323	Statement	 
>3324	Statement	 
>3325	Statement	 
>3326	Statement	 
>3327	Statement	 
>3328	Statement	 
>3329	Statement	 
>3330	Statement	 
>3331	Statement	 
>3332	Statement	 
>3333	Statement	 
>3334	Statement	 
>3335	Statement	 
>3336	ExpressionStatement	 
>3337	Statement	 
>3338	Statement	 
>3339	Statement	 
>3340	Statement	 
>3341	Statement	 
>3342	Statement	 
>3343	Statement	 
>3344	Statement	 
>3345	Statement	 
>3346	Statement	 
>3347	Statement	 
>3348	Statement	 
>3349	Statement	 
>3350	IfStatement	if ( ! ( th -> flags & MF_SHOOTABLE ) )
>3351	ReturnStatement	 
>3352	Identifier	true
>3353	Condition	 
>3354	UnaryOp	! ( th -> flags & MF_SHOOTABLE )
>3355	BitAndExpression	th -> flags & MF_SHOOTABLE
>3356	Identifier	MF_SHOOTABLE
>3357	PtrMemberAccess	th -> flags
>3358	Identifier	flags
>3359	Identifier	th
>3360	UnaryOperator	!
>3361	ReturnStatement	 
>3362	Identifier	true
>3363	Statement	 
>3364	Statement	 
>3365	Statement	 
>3366	Statement	 
>3367	Statement	 
>3368	Statement	 
>3369	Statement	 
>3370	Statement	 
>3371	Statement	 
>3372	ExpressionStatement	 
>3373	AssignmentExpr	th = in -> d . thing
>3374	MemberAccess	in -> d . thing
>3375	Identifier	thing
>3376	PtrMemberAccess	in -> d
>3377	Identifier	d
>3378	Identifier	in
>3379	Identifier	th
>3380	IfStatement	if ( in -> isaline )
>3381	CompoundStatement	 
>3382	ReturnStatement	 
>3383	Identifier	true
>3384	ReturnStatement	 
>3385	Identifier	false
>3386	Statement	 
>3387	Statement	 
>3388	Statement	 
>3389	Statement	 
>3390	Statement	 
>3391	Statement	 
>3392	Statement	 
>3393	Statement	 
>3394	Statement	 
>3395	Statement	 
>3396	Statement	 
>3397	Statement	 
>3398	IfStatement	if ( li -> frontsector -> ceilingheight != li -> backsector -> ceilingheight )
>3399	CompoundStatement	 
>3400	ExpressionStatement	 
>3401	AssignmentExpr	g -> topslope = slope
>3402	Identifier	slope
>3403	PtrMemberAccess	g -> topslope
>3404	Identifier	topslope
>3405	Identifier	g
>3406	Statement	 
>3407	Statement	 
>3408	Statement	 
>3409	Statement	 
>3410	Statement	 
>3411	Statement	 
>3412	Statement	 
>3413	Statement	 
>3414	Statement	 
>3415	Statement	 
>3416	ExpressionStatement	 
>3417	Statement	 
>3418	Statement	 
>3419	Statement	 
>3420	Statement	 
>3421	Statement	 
>3422	Statement	 
>3423	Statement	 
>3424	Statement	 
>3425	Statement	 
>3426	Statement	 
>3427	Statement	 
>3428	Statement	 
>3429	Statement	 
>3430	Statement	 
>3431	Statement	 
>3432	Statement	 
>3433	Condition	 
>3434	EqualityExpression	li -> frontsector -> ceilingheight != li -> backsector -> ceilingheight
>3435	PtrMemberAccess	li -> backsector -> ceilingheight
>3436	Identifier	ceilingheight
>3437	PtrMemberAccess	li -> backsector
>3438	Identifier	backsector
>3439	Identifier	li
>3440	PtrMemberAccess	li -> frontsector -> ceilingheight
>3441	Identifier	ceilingheight
>3442	PtrMemberAccess	li -> frontsector
>3443	Identifier	frontsector
>3444	Identifier	li
>3445	IfStatement	if ( li -> frontsector -> floorheight != li -> backsector -> floorheight )
>3446	CompoundStatement	 
>3447	ExpressionStatement	 
>3448	AssignmentExpr	g -> bottomslope = slope
>3449	Identifier	slope
>3450	PtrMemberAccess	g -> bottomslope
>3451	Identifier	bottomslope
>3452	Identifier	g
>3453	Statement	 
>3454	Statement	 
>3455	Statement	 
>3456	Statement	 
>3457	Statement	 
>3458	Statement	 
>3459	Statement	 
>3460	Statement	 
>3461	Statement	 
>3462	Statement	 
>3463	ExpressionStatement	 
>3464	Statement	 
>3465	Statement	 
>3466	Statement	 
>3467	Statement	 
>3468	Statement	 
>3469	Statement	 
>3470	Statement	 
>3471	Statement	 
>3472	Statement	 
>3473	Statement	 
>3474	Statement	 
>3475	Statement	 
>3476	Statement	 
>3477	Statement	 
>3478	Statement	 
>3479	Statement	 
>3480	Condition	 
>3481	EqualityExpression	li -> frontsector -> floorheight != li -> backsector -> floorheight
>3482	PtrMemberAccess	li -> backsector -> floorheight
>3483	Identifier	floorheight
>3484	PtrMemberAccess	li -> backsector
>3485	Identifier	backsector
>3486	Identifier	li
>3487	PtrMemberAccess	li -> frontsector -> floorheight
>3488	Identifier	floorheight
>3489	PtrMemberAccess	li -> frontsector
>3490	Identifier	frontsector
>3491	Identifier	li
>3492	ExpressionStatement	 
>3493	Statement	 
>3494	Statement	 
>3495	Statement	 
>3496	Statement	 
>3497	Statement	 
>3498	Statement	 
>3499	Statement	 
>3500	Statement	 
>3501	Statement	 
>3502	Statement	 
>3503	Statement	 
>3504	Statement	 
>3505	Statement	 
>3506	ReturnStatement	 
>3507	Identifier	false
>3508	Statement	 
>3509	Statement	 
>3510	Statement	 
>3511	Statement	 
>3512	Statement	 
>3513	Statement	 
>3514	Statement	 
>3515	Statement	 
>3516	Statement	 
>3517	Statement	 
>3518	Statement	 
>3519	Statement	 
>3520	ExpressionStatement	 
>3521	CallExpression	P_LineOpening ( li )
>3522	ArgumentList	li
>3523	Argument	li
>3524	Identifier	li
>3525	Callee	P_LineOpening
>3526	Identifier	P_LineOpening
>3527	IfStatement	if ( ! ( li -> flags & ML_TWOSIDED ) )
>3528	ReturnStatement	 
>3529	Identifier	false
>3530	Condition	 
>3531	UnaryOp	! ( li -> flags & ML_TWOSIDED )
>3532	BitAndExpression	li -> flags & ML_TWOSIDED
>3533	Identifier	ML_TWOSIDED
>3534	PtrMemberAccess	li -> flags
>3535	Identifier	flags
>3536	Identifier	li
>3537	UnaryOperator	!
>3538	ExpressionStatement	 
>3539	AssignmentExpr	li = in -> d . line
>3540	MemberAccess	in -> d . line
>3541	Identifier	line
>3542	PtrMemberAccess	in -> d
>3543	Identifier	d
>3544	Identifier	in
>3545	Identifier	li
>3546	Condition	 
>3547	PtrMemberAccess	in -> isaline
>3548	Identifier	isaline
>3549	Identifier	in
>3550	IdentifierDeclStatement	 
>3551	IdentifierDecl	dist
>3552	Identifier	dist
>3553	IdentifierDeclType	fixed_t
>3554	IdentifierDeclStatement	 
>3555	IdentifierDecl	thingbottomslope
>3556	Identifier	thingbottomslope
>3557	IdentifierDeclType	fixed_t
>3558	IdentifierDeclStatement	 
>3559	IdentifierDecl	thingtopslope
>3560	Identifier	thingtopslope
>3561	IdentifierDeclType	fixed_t
>3562	IdentifierDeclStatement	 
>3563	IdentifierDecl	slope
>3564	Identifier	slope
>3565	IdentifierDeclType	fixed_t
>3566	IdentifierDeclStatement	 
>3567	IdentifierDecl	* th
>3568	Identifier	th
>3569	IdentifierDeclType	mobj_t *
>3570	IdentifierDeclStatement	 
>3571	IdentifierDecl	* li
>3572	Identifier	li
>3573	IdentifierDeclType	line_t *
>3612	FunctionDef	PTR_ShootTraverse (intercept_t * in)
>3613	ParameterList	intercept_t * in
>3614	Parameter	 
>3615	Identifier	in
>3616	ParameterType	intercept_t *
>3617	ReturnType	qboolean
>3618	CompoundStatement	 
>3619	ReturnStatement	 
>3620	Identifier	false
>3621	ExpressionStatement	 
>3622	Statement	 
>3623	Statement	 
>3624	Statement	 
>3625	Statement	 
>3626	Statement	 
>3627	Statement	 
>3628	Statement	 
>3629	Statement	 
>3630	Statement	 
>3631	Statement	 
>3632	Statement	 
>3633	Statement	 
>3634	Statement	 
>3635	Statement	 
>3636	Statement	 
>3637	Statement	 
>3638	Statement	 
>3639	Statement	 
>3640	Statement	 
>3641	Statement	 
>3642	Statement	 
>3643	Statement	 
>3644	Statement	 
>3645	Statement	 
>3646	Statement	 
>3647	Statement	 
>3648	ExpressionStatement	 
>3649	Statement	 
>3650	Statement	 
>3651	Statement	 
>3652	Statement	 
>3653	Statement	 
>3654	Statement	 
>3655	Statement	 
>3656	Statement	 
>3657	Statement	 
>3658	Statement	 
>3659	Statement	 
>3660	Statement	 
>3661	IfStatement	if ( in -> d . thing -> flags & MF_NOBLOOD )
>3662	ElseStatement	else
>3663	Statement	 
>3664	ExpressionStatement	 
>3665	CallExpression	P_SpawnPuff ( x , y , z )
>3666	ArgumentList	x
>3667	Argument	z
>3668	Identifier	z
>3669	Argument	y
>3670	Identifier	y
>3671	Argument	x
>3672	Identifier	x
>3673	Callee	P_SpawnPuff
>3674	Identifier	P_SpawnPuff
>3675	Condition	 
>3676	BitAndExpression	in -> d . thing -> flags & MF_NOBLOOD
>3677	Identifier	MF_NOBLOOD
>3678	PtrMemberAccess	in -> d . thing -> flags
>3679	Identifier	flags
>3680	MemberAccess	in -> d . thing
>3681	Identifier	thing
>3682	PtrMemberAccess	in -> d
>3683	Identifier	d
>3684	Identifier	in
>3685	IfStatement	if ( sourceObject )
>3686	CompoundStatement	 
>3687	CompoundStatement	 
>3688	CompoundStatement	 
>3689	Statement	 
>3690	Statement	 
>3691	Statement	 
>3692	Statement	 
>3693	Statement	 
>3694	Statement	 
>3695	Statement	 
>3696	Statement	 
>3697	Statement	 
>3698	Statement	 
>3699	Statement	 
>3700	Statement	 
>3701	Statement	 
>3702	Statement	 
>3703	Statement	 
>3704	Statement	 
>3705	Statement	 
>3706	Statement	 
>3707	Statement	 
>3708	Statement	 
>3709	Statement	 
>3710	Statement	 
>3711	Statement	 
>3712	Statement	 
>3713	Statement	 
>3714	Statement	 
>3715	Statement	 
>3716	Statement	 
>3717	Statement	 
>3718	Statement	 
>3719	Statement	 
>3720	Statement	 
>3721	Condition	 
>3722	Identifier	sourceObject
>3723	ExpressionStatement	 
>3724	PtrMemberAccess	g -> shootthing
>3725	Identifier	shootthing
>3726	Identifier	g
>3727	Statement	 
>3728	Statement	 
>3729	Statement	 
>3730	Statement	 
>3731	Statement	 
>3732	IfStatement	if ( th && gameLocal -> GetMatchParms ( ) . GetGameType ( ) != GAME_TYPE_PVP )
>3733	CompoundStatement	 
>3734	IfStatement	if ( hitPlayer )
>3735	CompoundStatement	 
>3736	IfStatement	if ( sourceObject )
>3737	CompoundStatement	 
>3738	IfStatement	if ( sourcePlayer != NULL && sourcePlayer != hitPlayer && ! gameLocal -> GetMatchParms ( ) . AllowFriendlyFire ( ) )
>3739	CompoundStatement	 
>3740	ReturnStatement	 
>3741	Identifier	true
>3742	Condition	 
>3743	AndExpression	sourcePlayer != NULL && sourcePlayer != hitPlayer && ! gameLocal -> GetMatchParms ( ) . AllowFriendlyFire ( )
>3744	AndExpression	sourcePlayer != hitPlayer && ! gameLocal -> GetMatchParms ( ) . AllowFriendlyFire ( )
>3745	UnaryOp	! gameLocal -> GetMatchParms ( ) . AllowFriendlyFire ( )
>3746	CallExpression	gameLocal -> GetMatchParms ( ) . AllowFriendlyFire ( )
>3747	ArgumentList	 
>3748	Callee	gameLocal -> GetMatchParms ( ) . AllowFriendlyFire
>3749	MemberAccess	gameLocal -> GetMatchParms ( ) . AllowFriendlyFire
>3750	Identifier	AllowFriendlyFire
>3751	CallExpression	gameLocal -> GetMatchParms ( )
>3752	ArgumentList	 
>3753	Callee	gameLocal -> GetMatchParms
>3754	PtrMemberAccess	gameLocal -> GetMatchParms
>3755	Identifier	GetMatchParms
>3756	Identifier	gameLocal
>3757	UnaryOperator	!
>3758	EqualityExpression	sourcePlayer != hitPlayer
>3759	Identifier	hitPlayer
>3760	Identifier	sourcePlayer
>3761	EqualityExpression	sourcePlayer != NULL
>3762	Identifier	NULL
>3763	Identifier	sourcePlayer
>3764	IdentifierDeclStatement	 
>3765	IdentifierDecl	* sourcePlayer = sourceObject -> player
>3766	AssignmentExpr	* sourcePlayer = sourceObject -> player
>3767	PtrMemberAccess	sourceObject -> player
>3768	Identifier	player
>3769	Identifier	sourceObject
>3770	Identifier	sourcePlayer
>3771	Identifier	sourcePlayer
>3772	IdentifierDeclType	player_t *
>3773	Condition	 
>3774	Identifier	sourceObject
>3775	ExpressionStatement	 
>3776	PtrMemberAccess	g -> shootthing
>3777	Identifier	shootthing
>3778	Identifier	g
>3779	Statement	 
>3780	Statement	 
>3781	Statement	 
>3782	Statement	 
>3783	Statement	 
>3784	Condition	 
>3785	Identifier	hitPlayer
>3786	IdentifierDeclStatement	 
>3787	IdentifierDecl	* hitPlayer = th -> player
>3788	AssignmentExpr	* hitPlayer = th -> player
>3789	PtrMemberAccess	th -> player
>3790	Identifier	player
>3791	Identifier	th
>3792	Identifier	hitPlayer
>3793	Identifier	hitPlayer
>3794	IdentifierDeclType	player_t *
>3795	Condition	 
>3796	AndExpression	th && gameLocal -> GetMatchParms ( ) . GetGameType ( ) != GAME_TYPE_PVP
>3797	EqualityExpression	gameLocal -> GetMatchParms ( ) . GetGameType ( ) != GAME_TYPE_PVP
>3798	Identifier	GAME_TYPE_PVP
>3799	CallExpression	gameLocal -> GetMatchParms ( ) . GetGameType ( )
>3800	ArgumentList	 
>3801	Callee	gameLocal -> GetMatchParms ( ) . GetGameType
>3802	MemberAccess	gameLocal -> GetMatchParms ( ) . GetGameType
>3803	Identifier	GetGameType
>3804	CallExpression	gameLocal -> GetMatchParms ( )
>3805	ArgumentList	 
>3806	Callee	gameLocal -> GetMatchParms
>3807	PtrMemberAccess	gameLocal -> GetMatchParms
>3808	Identifier	GetMatchParms
>3809	Identifier	gameLocal
>3810	Identifier	th
>3811	ExpressionStatement	 
>3812	Statement	 
>3813	Statement	 
>3814	Statement	 
>3815	Statement	 
>3816	Statement	 
>3817	Statement	 
>3818	Statement	 
>3819	Statement	 
>3820	Statement	 
>3821	Statement	 
>3822	Statement	 
>3823	Statement	 
>3824	Statement	 
>3825	Statement	 
>3826	Statement	 
>3827	Statement	 
>3828	Statement	 
>3829	Statement	 
>3830	Statement	 
>3831	Statement	 
>3832	Statement	 
>3833	Statement	 
>3834	Statement	 
>3835	Statement	 
>3836	ExpressionStatement	 
>3837	Statement	 
>3838	Statement	 
>3839	Statement	 
>3840	Statement	 
>3841	Statement	 
>3842	Statement	 
>3843	Statement	 
>3844	Statement	 
>3845	Statement	 
>3846	Statement	 
>3847	Statement	 
>3848	Statement	 
>3849	Statement	 
>3850	Statement	 
>3851	Statement	 
>3852	Statement	 
>3853	Statement	 
>3854	Statement	 
>3855	Statement	 
>3856	Statement	 
>3857	ExpressionStatement	 
>3858	Statement	 
>3859	Statement	 
>3860	Statement	 
>3861	Statement	 
>3862	Statement	 
>3863	Statement	 
>3864	Statement	 
>3865	Statement	 
>3866	Statement	 
>3867	Statement	 
>3868	Statement	 
>3869	Statement	 
>3870	Statement	 
>3871	Statement	 
>3872	Statement	 
>3873	Statement	 
>3874	Statement	 
>3875	Statement	 
>3876	Statement	 
>3877	Statement	 
>3878	ExpressionStatement	 
>3879	Statement	 
>3880	Statement	 
>3881	Statement	 
>3882	Statement	 
>3883	Statement	 
>3884	Statement	 
>3885	Statement	 
>3886	Statement	 
>3887	Statement	 
>3888	Statement	 
>3889	Statement	 
>3890	Statement	 
>3891	Statement	 
>3892	Statement	 
>3893	Statement	 
>3894	Statement	 
>3895	Statement	 
>3896	ReturnStatement	 
>3897	Identifier	true
>3898	Statement	 
>3899	Statement	 
>3900	Statement	 
>3901	Statement	 
>3902	Statement	 
>3903	Statement	 
>3904	Statement	 
>3905	Statement	 
>3906	Statement	 
>3907	ExpressionStatement	 
>3908	Statement	 
>3909	Statement	 
>3910	Statement	 
>3911	Statement	 
>3912	Statement	 
>3913	Statement	 
>3914	Statement	 
>3915	Statement	 
>3916	Statement	 
>3917	Statement	 
>3918	Statement	 
>3919	Statement	 
>3920	Statement	 
>3921	Statement	 
>3922	Statement	 
>3923	ReturnStatement	 
>3924	Identifier	true
>3925	Statement	 
>3926	Statement	 
>3927	Statement	 
>3928	Statement	 
>3929	Statement	 
>3930	Statement	 
>3931	Statement	 
>3932	Statement	 
>3933	Statement	 
>3934	ExpressionStatement	 
>3935	Statement	 
>3936	Statement	 
>3937	Statement	 
>3938	Statement	 
>3939	Statement	 
>3940	Statement	 
>3941	Statement	 
>3942	Statement	 
>3943	Statement	 
>3944	Statement	 
>3945	Statement	 
>3946	Statement	 
>3947	Statement	 
>3948	Statement	 
>3949	Statement	 
>3950	Statement	 
>3951	Statement	 
>3952	Statement	 
>3953	Statement	 
>3954	ExpressionStatement	 
>3955	Statement	 
>3956	Statement	 
>3957	Statement	 
>3958	Statement	 
>3959	Statement	 
>3960	Statement	 
>3961	Statement	 
>3962	Statement	 
>3963	Statement	 
>3964	Statement	 
>3965	Statement	 
>3966	Statement	 
>3967	Statement	 
>3968	IfStatement	if ( ! ( th -> flags & MF_SHOOTABLE ) )
>3969	ReturnStatement	 
>3970	Identifier	true
>3971	Condition	 
>3972	UnaryOp	! ( th -> flags & MF_SHOOTABLE )
>3973	BitAndExpression	th -> flags & MF_SHOOTABLE
>3974	Identifier	MF_SHOOTABLE
>3975	PtrMemberAccess	th -> flags
>3976	Identifier	flags
>3977	Identifier	th
>3978	UnaryOperator	!
>3979	ReturnStatement	 
>3980	Identifier	true
>3981	Statement	 
>3982	Statement	 
>3983	Statement	 
>3984	Statement	 
>3985	Statement	 
>3986	Statement	 
>3987	Statement	 
>3988	Statement	 
>3989	Statement	 
>3990	ExpressionStatement	 
>3991	AssignmentExpr	th = in -> d . thing
>3992	MemberAccess	in -> d . thing
>3993	Identifier	thing
>3994	PtrMemberAccess	in -> d
>3995	Identifier	d
>3996	Identifier	in
>3997	Identifier	th
>3998	IfStatement	if ( in -> isaline )
>3999	CompoundStatement	 
>4000	ReturnStatement	 
>4001	Identifier	false
>4002	ExpressionStatement	 
>4003	CallExpression	P_SpawnPuff ( x , y , z )
>4004	ArgumentList	x
>4005	Argument	z
>4006	Identifier	z
>4007	Argument	y
>4008	Identifier	y
>4009	Argument	x
>4010	Identifier	x
>4011	Callee	P_SpawnPuff
>4012	Identifier	P_SpawnPuff
>4013	IfStatement	if ( sourceObject )
>4014	CompoundStatement	 
>4015	CompoundStatement	 
>4016	CompoundStatement	 
>4017	Statement	 
>4018	Statement	 
>4019	Statement	 
>4020	Statement	 
>4021	Statement	 
>4022	Statement	 
>4023	Statement	 
>4024	Statement	 
>4025	Statement	 
>4026	Statement	 
>4027	Statement	 
>4028	Statement	 
>4029	Statement	 
>4030	Statement	 
>4031	Statement	 
>4032	Statement	 
>4033	Statement	 
>4034	Statement	 
>4035	Statement	 
>4036	Statement	 
>4037	Statement	 
>4038	Statement	 
>4039	Statement	 
>4040	Statement	 
>4041	Statement	 
>4042	Statement	 
>4043	Statement	 
>4044	Statement	 
>4045	Statement	 
>4046	Statement	 
>4047	Statement	 
>4048	Statement	 
>4049	Condition	 
>4050	Identifier	sourceObject
>4051	ExpressionStatement	 
>4052	PtrMemberAccess	g -> shootthing
>4053	Identifier	shootthing
>4054	Identifier	g
>4055	Statement	 
>4056	Statement	 
>4057	Statement	 
>4058	Statement	 
>4059	Statement	 
>4060	CompoundStatement	 
>4061	ReturnStatement	 
>4062	Identifier	false
>4063	Statement	 
>4064	Statement	 
>4065	Statement	 
>4066	Statement	 
>4067	Statement	 
>4068	Statement	 
>4069	Statement	 
>4070	Statement	 
>4071	Statement	 
>4072	Statement	 
>4073	Statement	 
>4074	Statement	 
>4075	Statement	 
>4076	Statement	 
>4077	Statement	 
>4078	Statement	 
>4079	Statement	 
>4080	IfStatement	if ( z > li -> frontsector -> ceilingheight )
>4081	ReturnStatement	 
>4082	Identifier	false
>4083	Condition	 
>4084	RelationalExpression	z > li -> frontsector -> ceilingheight
>4085	PtrMemberAccess	li -> frontsector -> ceilingheight
>4086	Identifier	ceilingheight
>4087	PtrMemberAccess	li -> frontsector
>4088	Identifier	frontsector
>4089	Identifier	li
>4090	Identifier	z
>4091	Statement	 
>4092	Statement	 
>4093	Statement	 
>4094	Statement	 
>4095	Statement	 
>4096	Statement	 
>4097	Statement	 
>4098	Statement	 
>4099	Statement	 
>4100	Statement	 
>4101	Statement	 
>4102	Statement	 
>4103	Statement	 
>4104	ExpressionStatement	 
>4105	Statement	 
>4106	Statement	 
>4107	Statement	 
>4108	Statement	 
>4109	Statement	 
>4110	Statement	 
>4111	Statement	 
>4112	Statement	 
>4113	Statement	 
>4114	Statement	 
>4115	Statement	 
>4116	Statement	 
>4117	Statement	 
>4118	Statement	 
>4119	Statement	 
>4120	Statement	 
>4121	Statement	 
>4122	Statement	 
>4123	Statement	 
>4124	Statement	 
>4125	Statement	 
>4126	Statement	 
>4127	Statement	 
>4128	Statement	 
>4129	ExpressionStatement	 
>4130	Statement	 
>4131	Statement	 
>4132	Statement	 
>4133	Statement	 
>4134	Statement	 
>4135	Statement	 
>4136	Statement	 
>4137	Statement	 
>4138	Statement	 
>4139	Statement	 
>4140	Statement	 
>4141	Statement	 
>4142	Statement	 
>4143	Statement	 
>4144	Statement	 
>4145	Statement	 
>4146	Statement	 
>4147	Statement	 
>4148	Statement	 
>4149	Statement	 
>4150	ExpressionStatement	 
>4151	Statement	 
>4152	Statement	 
>4153	Statement	 
>4154	Statement	 
>4155	Statement	 
>4156	Statement	 
>4157	Statement	 
>4158	Statement	 
>4159	Statement	 
>4160	Statement	 
>4161	Statement	 
>4162	Statement	 
>4163	Statement	 
>4164	Statement	 
>4165	Statement	 
>4166	Statement	 
>4167	Statement	 
>4168	Statement	 
>4169	Statement	 
>4170	Statement	 
>4171	ExpressionStatement	 
>4172	Statement	 
>4173	Statement	 
>4174	Statement	 
>4175	Statement	 
>4176	Statement	 
>4177	Statement	 
>4178	Statement	 
>4179	Statement	 
>4180	Statement	 
>4181	Statement	 
>4182	Statement	 
>4183	Statement	 
>4184	Statement	 
>4185	Statement	 
>4186	Statement	 
>4187	Statement	 
>4188	Statement	 
>4189	Label	 
>4190	Identifier	hitline
>4191	ReturnStatement	 
>4192	Identifier	true
>4193	IfStatement	if ( li -> frontsector -> ceilingheight != li -> backsector -> ceilingheight )
>4194	CompoundStatement	 
>4195	GotoStatement	 
>4196	Identifier	hitline
>4197	Statement	 
>4198	Statement	 
>4199	Statement	 
>4200	Statement	 
>4201	Statement	 
>4202	Statement	 
>4203	Statement	 
>4204	Statement	 
>4205	Statement	 
>4206	ExpressionStatement	 
>4207	Statement	 
>4208	Statement	 
>4209	Statement	 
>4210	Statement	 
>4211	Statement	 
>4212	Statement	 
>4213	Statement	 
>4214	Statement	 
>4215	Statement	 
>4216	Statement	 
>4217	Statement	 
>4218	Statement	 
>4219	Statement	 
>4220	Statement	 
>4221	Statement	 
>4222	Statement	 
>4223	Condition	 
>4224	EqualityExpression	li -> frontsector -> ceilingheight != li -> backsector -> ceilingheight
>4225	PtrMemberAccess	li -> backsector -> ceilingheight
>4226	Identifier	ceilingheight
>4227	PtrMemberAccess	li -> backsector
>4228	Identifier	backsector
>4229	Identifier	li
>4230	PtrMemberAccess	li -> frontsector -> ceilingheight
>4231	Identifier	ceilingheight
>4232	PtrMemberAccess	li -> frontsector
>4233	Identifier	frontsector
>4234	Identifier	li
>4235	IfStatement	if ( li -> frontsector -> floorheight != li -> backsector -> floorheight )
>4236	CompoundStatement	 
>4237	GotoStatement	 
>4238	Identifier	hitline
>4239	Statement	 
>4240	Statement	 
>4241	Statement	 
>4242	Statement	 
>4243	Statement	 
>4244	Statement	 
>4245	Statement	 
>4246	Statement	 
>4247	Statement	 
>4248	ExpressionStatement	 
>4249	Statement	 
>4250	Statement	 
>4251	Statement	 
>4252	Statement	 
>4253	Statement	 
>4254	Statement	 
>4255	Statement	 
>4256	Statement	 
>4257	Statement	 
>4258	Statement	 
>4259	Statement	 
>4260	Statement	 
>4261	Statement	 
>4262	Statement	 
>4263	Statement	 
>4264	Statement	 
>4265	Condition	 
>4266	EqualityExpression	li -> frontsector -> floorheight != li -> backsector -> floorheight
>4267	PtrMemberAccess	li -> backsector -> floorheight
>4268	Identifier	floorheight
>4269	PtrMemberAccess	li -> backsector
>4270	Identifier	backsector
>4271	Identifier	li
>4272	PtrMemberAccess	li -> frontsector -> floorheight
>4273	Identifier	floorheight
>4274	PtrMemberAccess	li -> frontsector
>4275	Identifier	frontsector
>4276	Identifier	li
>4277	ExpressionStatement	 
>4278	Statement	 
>4279	Statement	 
>4280	Statement	 
>4281	Statement	 
>4282	Statement	 
>4283	Statement	 
>4284	Statement	 
>4285	Statement	 
>4286	Statement	 
>4287	Statement	 
>4288	Statement	 
>4289	Statement	 
>4290	Statement	 
>4291	ExpressionStatement	 
>4292	CallExpression	P_LineOpening ( li )
>4293	ArgumentList	li
>4294	Argument	li
>4295	Identifier	li
>4296	Callee	P_LineOpening
>4297	Identifier	P_LineOpening
>4298	IfStatement	if ( ! ( li -> flags & ML_TWOSIDED ) )
>4299	GotoStatement	 
>4300	Identifier	hitline
>4301	Condition	 
>4302	UnaryOp	! ( li -> flags & ML_TWOSIDED )
>4303	BitAndExpression	li -> flags & ML_TWOSIDED
>4304	Identifier	ML_TWOSIDED
>4305	PtrMemberAccess	li -> flags
>4306	Identifier	flags
>4307	Identifier	li
>4308	UnaryOperator	!
>4309	ExpressionStatement	 
>4310	Statement	 
>4311	Statement	 
>4312	Statement	 
>4313	Statement	 
>4314	Statement	 
>4315	Statement	 
>4316	Statement	 
>4317	Statement	 
>4318	IfStatement	if ( li -> special )
>4319	Statement	 
>4320	Condition	 
>4321	PtrMemberAccess	li -> special
>4322	Identifier	special
>4323	Identifier	li
>4324	ExpressionStatement	 
>4325	AssignmentExpr	li = in -> d . line
>4326	MemberAccess	in -> d . line
>4327	Identifier	line
>4328	PtrMemberAccess	in -> d
>4329	Identifier	d
>4330	Identifier	in
>4331	Identifier	li
>4332	Condition	 
>4333	PtrMemberAccess	in -> isaline
>4334	Identifier	isaline
>4335	Identifier	in
>4336	IdentifierDeclStatement	 
>4337	IdentifierDecl	thingbottomslope
>4338	Identifier	thingbottomslope
>4339	IdentifierDeclType	fixed_t
>4340	IdentifierDeclStatement	 
>4341	IdentifierDecl	thingtopslope
>4342	Identifier	thingtopslope
>4343	IdentifierDeclType	fixed_t
>4344	IdentifierDeclStatement	 
>4345	IdentifierDecl	dist
>4346	Identifier	dist
>4347	IdentifierDeclType	fixed_t
>4348	IdentifierDeclStatement	 
>4349	IdentifierDecl	slope
>4350	Identifier	slope
>4351	IdentifierDeclType	fixed_t
>4352	IdentifierDeclStatement	 
>4353	IdentifierDecl	* th
>4354	Identifier	th
>4355	IdentifierDeclType	mobj_t *
>4356	IdentifierDeclStatement	 
>4357	IdentifierDecl	* li
>4358	Identifier	li
>4359	IdentifierDeclType	line_t *
>4360	IdentifierDeclStatement	 
>4361	IdentifierDecl	frac
>4362	Identifier	frac
>4363	IdentifierDeclType	fixed_t
>4364	IdentifierDeclStatement	 
>4365	IdentifierDecl	z
>4366	Identifier	z
>4367	IdentifierDeclType	fixed_t
>4368	IdentifierDeclStatement	 
>4369	IdentifierDecl	y
>4370	Identifier	y
>4371	IdentifierDeclType	fixed_t
>4372	IdentifierDeclStatement	 
>4373	IdentifierDecl	x
>4374	Identifier	x
>4375	IdentifierDeclType	fixed_t
>4432	FunctionDef	P_AimLineAttack (mobj_t * t1 , angle_t angle , fixed_t distance)
>4433	ParameterList	mobj_t * t1 , angle_t angle , fixed_t distance
>4434	Parameter	 
>4435	Identifier	distance
>4436	ParameterType	fixed_t
>4437	Parameter	 
>4438	Identifier	angle
>4439	ParameterType	angle_t
>4440	Parameter	 
>4441	Identifier	t1
>4442	ParameterType	mobj_t *
>4443	ReturnType	fixed_t
>4444	CompoundStatement	 
>4445	ReturnStatement	 
>4446	PrimaryExpression	0
>4447	ExpressionStatement	 
>4448	PtrMemberAccess	g -> aimslope
>4449	Identifier	aimslope
>4450	Identifier	g
>4451	Statement	 
>4452	Statement	 
>4453	Statement	 
>4454	Statement	 
>4455	Statement	 
>4456	Statement	 
>4457	Statement	 
>4458	Statement	 
>4459	Statement	 
>4460	ExpressionStatement	 
>4461	CallExpression	P_PathTraverse ( t1 -> x , t1 -> y , x2 , y2 , PT_ADDLINES | PT_ADDTHINGS , PTR_AimTraverse )
>4462	ArgumentList	t1 -> x
>4463	Argument	PTR_AimTraverse
>4464	Identifier	PTR_AimTraverse
>4465	Argument	PT_ADDLINES | PT_ADDTHINGS
>4466	InclusiveOrExpression	PT_ADDLINES | PT_ADDTHINGS
>4467	Identifier	PT_ADDTHINGS
>4468	Identifier	PT_ADDLINES
>4469	Argument	y2
>4470	Identifier	y2
>4471	Argument	x2
>4472	Identifier	x2
>4473	Argument	t1 -> y
>4474	PtrMemberAccess	t1 -> y
>4475	Identifier	y
>4476	Identifier	t1
>4477	Argument	t1 -> x
>4478	PtrMemberAccess	t1 -> x
>4479	Identifier	x
>4480	Identifier	t1
>4481	Callee	P_PathTraverse
>4482	Identifier	P_PathTraverse
>4483	ExpressionStatement	 
>4484	AssignmentExpr	g -> linetarget = NULL
>4485	Identifier	NULL
>4486	PtrMemberAccess	g -> linetarget
>4487	Identifier	linetarget
>4488	Identifier	g
>4489	Statement	 
>4490	ExpressionStatement	 
>4491	AssignmentExpr	g -> attackrange = distance
>4492	Identifier	distance
>4493	PtrMemberAccess	g -> attackrange
>4494	Identifier	attackrange
>4495	Identifier	g
>4496	Statement	 
>4497	ExpressionStatement	 
>4498	AssignmentExpr	g -> bottomslope = - 100 * FRACUNIT / 160
>4499	MultiplicativeExpression	- 100 * FRACUNIT / 160
>4500	MultiplicativeExpression	FRACUNIT / 160
>4501	PrimaryExpression	160
>4502	Identifier	FRACUNIT
>4503	UnaryOp	- 100
>4504	PrimaryExpression	100
>4505	UnaryOperator	-
>4506	PtrMemberAccess	g -> bottomslope
>4507	Identifier	bottomslope
>4508	Identifier	g
>4509	Statement	 
>4510	ExpressionStatement	 
>4511	AssignmentExpr	g -> topslope = 100 * FRACUNIT / 160
>4512	MultiplicativeExpression	100 * FRACUNIT / 160
>4513	MultiplicativeExpression	FRACUNIT / 160
>4514	PrimaryExpression	160
>4515	Identifier	FRACUNIT
>4516	PrimaryExpression	100
>4517	PtrMemberAccess	g -> topslope
>4518	Identifier	topslope
>4519	Identifier	g
>4520	Statement	 
>4521	ExpressionStatement	 
>4522	AssignmentExpr	g -> shootz = t1 -> z + ( t1 -> height >> 1 ) + 8 * FRACUNIT
>4523	AdditiveExpression	t1 -> z + ( t1 -> height >> 1 ) + 8 * FRACUNIT
>4524	AdditiveExpression	( t1 -> height >> 1 ) + 8 * FRACUNIT
>4525	MultiplicativeExpression	8 * FRACUNIT
>4526	Identifier	FRACUNIT
>4527	PrimaryExpression	8
>4528	ShiftExpression	t1 -> height >> 1
>4529	PrimaryExpression	1
>4530	PtrMemberAccess	t1 -> height
>4531	Identifier	height
>4532	Identifier	t1
>4533	PtrMemberAccess	t1 -> z
>4534	Identifier	z
>4535	Identifier	t1
>4536	PtrMemberAccess	g -> shootz
>4537	Identifier	shootz
>4538	Identifier	g
>4539	Statement	 
>4540	ExpressionStatement	 
>4541	AssignmentExpr	y2 = t1 -> y + ( distance >> FRACBITS ) * finesine [ angle ]
>4542	AdditiveExpression	t1 -> y + ( distance >> FRACBITS ) * finesine [ angle ]
>4543	MultiplicativeExpression	( distance >> FRACBITS ) * finesine [ angle ]
>4544	ArrayIndexing	finesine [ angle ]
>4545	Identifier	angle
>4546	Identifier	finesine
>4547	ShiftExpression	distance >> FRACBITS
>4548	Identifier	FRACBITS
>4549	Identifier	distance
>4550	PtrMemberAccess	t1 -> y
>4551	Identifier	y
>4552	Identifier	t1
>4553	Identifier	y2
>4554	ExpressionStatement	 
>4555	AssignmentExpr	x2 = t1 -> x + ( distance >> FRACBITS ) * finecosine [ angle ]
>4556	AdditiveExpression	t1 -> x + ( distance >> FRACBITS ) * finecosine [ angle ]
>4557	MultiplicativeExpression	( distance >> FRACBITS ) * finecosine [ angle ]
>4558	ArrayIndexing	finecosine [ angle ]
>4559	Identifier	angle
>4560	Identifier	finecosine
>4561	ShiftExpression	distance >> FRACBITS
>4562	Identifier	FRACBITS
>4563	Identifier	distance
>4564	PtrMemberAccess	t1 -> x
>4565	Identifier	x
>4566	Identifier	t1
>4567	Identifier	x2
>4568	ExpressionStatement	 
>4569	AssignmentExpr	g -> shootthing = t1
>4570	Identifier	t1
>4571	PtrMemberAccess	g -> shootthing
>4572	Identifier	shootthing
>4573	Identifier	g
>4574	Statement	 
>4575	ExpressionStatement	 
>4576	AssignmentExpr	angle >>= ANGLETOFINESHIFT
>4577	Identifier	ANGLETOFINESHIFT
>4578	Identifier	angle
>4579	IdentifierDeclStatement	 
>4580	IdentifierDecl	y2
>4581	Identifier	y2
>4582	IdentifierDeclType	fixed_t
>4583	IdentifierDeclStatement	 
>4584	IdentifierDecl	x2
>4585	Identifier	x2
>4586	IdentifierDeclType	fixed_t
>4620	FunctionDef	P_LineAttack (mobj_t * t1 , angle_t angle , fixed_t distance , fixed_t slope , int damage)
>4621	ParameterList	mobj_t * t1 , angle_t angle , fixed_t distance , fixed_t slope , int damage
>4622	Parameter	 
>4623	Identifier	damage
>4624	ParameterType	int
>4625	Parameter	 
>4626	Identifier	slope
>4627	ParameterType	fixed_t
>4628	Parameter	 
>4629	Identifier	distance
>4630	ParameterType	fixed_t
>4631	Parameter	 
>4632	Identifier	angle
>4633	ParameterType	angle_t
>4634	Parameter	 
>4635	Identifier	t1
>4636	ParameterType	mobj_t *
>4637	ReturnType	void
>4638	CompoundStatement	 
>4639	ExpressionStatement	 
>4640	CallExpression	P_PathTraverse ( t1 -> x , t1 -> y , x2 , y2 , PT_ADDLINES | PT_ADDTHINGS , PTR_ShootTraverse )
>4641	ArgumentList	t1 -> x
>4642	Argument	PTR_ShootTraverse
>4643	Identifier	PTR_ShootTraverse
>4644	Argument	PT_ADDLINES | PT_ADDTHINGS
>4645	InclusiveOrExpression	PT_ADDLINES | PT_ADDTHINGS
>4646	Identifier	PT_ADDTHINGS
>4647	Identifier	PT_ADDLINES
>4648	Argument	y2
>4649	Identifier	y2
>4650	Argument	x2
>4651	Identifier	x2
>4652	Argument	t1 -> y
>4653	PtrMemberAccess	t1 -> y
>4654	Identifier	y
>4655	Identifier	t1
>4656	Argument	t1 -> x
>4657	PtrMemberAccess	t1 -> x
>4658	Identifier	x
>4659	Identifier	t1
>4660	Callee	P_PathTraverse
>4661	Identifier	P_PathTraverse
>4662	ExpressionStatement	 
>4663	AssignmentExpr	g -> aimslope = slope
>4664	Identifier	slope
>4665	PtrMemberAccess	g -> aimslope
>4666	Identifier	aimslope
>4667	Identifier	g
>4668	Statement	 
>4669	ExpressionStatement	 
>4670	AssignmentExpr	g -> attackrange = distance
>4671	Identifier	distance
>4672	PtrMemberAccess	g -> attackrange
>4673	Identifier	attackrange
>4674	Identifier	g
>4675	Statement	 
>4676	ExpressionStatement	 
>4677	AssignmentExpr	g -> shootz = t1 -> z + ( t1 -> height >> 1 ) + 8 * FRACUNIT
>4678	AdditiveExpression	t1 -> z + ( t1 -> height >> 1 ) + 8 * FRACUNIT
>4679	AdditiveExpression	( t1 -> height >> 1 ) + 8 * FRACUNIT
>4680	MultiplicativeExpression	8 * FRACUNIT
>4681	Identifier	FRACUNIT
>4682	PrimaryExpression	8
>4683	ShiftExpression	t1 -> height >> 1
>4684	PrimaryExpression	1
>4685	PtrMemberAccess	t1 -> height
>4686	Identifier	height
>4687	Identifier	t1
>4688	PtrMemberAccess	t1 -> z
>4689	Identifier	z
>4690	Identifier	t1
>4691	PtrMemberAccess	g -> shootz
>4692	Identifier	shootz
>4693	Identifier	g
>4694	Statement	 
>4695	ExpressionStatement	 
>4696	AssignmentExpr	y2 = t1 -> y + ( distance >> FRACBITS ) * finesine [ angle ]
>4697	AdditiveExpression	t1 -> y + ( distance >> FRACBITS ) * finesine [ angle ]
>4698	MultiplicativeExpression	( distance >> FRACBITS ) * finesine [ angle ]
>4699	ArrayIndexing	finesine [ angle ]
>4700	Identifier	angle
>4701	Identifier	finesine
>4702	ShiftExpression	distance >> FRACBITS
>4703	Identifier	FRACBITS
>4704	Identifier	distance
>4705	PtrMemberAccess	t1 -> y
>4706	Identifier	y
>4707	Identifier	t1
>4708	Identifier	y2
>4709	ExpressionStatement	 
>4710	AssignmentExpr	x2 = t1 -> x + ( distance >> FRACBITS ) * finecosine [ angle ]
>4711	AdditiveExpression	t1 -> x + ( distance >> FRACBITS ) * finecosine [ angle ]
>4712	MultiplicativeExpression	( distance >> FRACBITS ) * finecosine [ angle ]
>4713	ArrayIndexing	finecosine [ angle ]
>4714	Identifier	angle
>4715	Identifier	finecosine
>4716	ShiftExpression	distance >> FRACBITS
>4717	Identifier	FRACBITS
>4718	Identifier	distance
>4719	PtrMemberAccess	t1 -> x
>4720	Identifier	x
>4721	Identifier	t1
>4722	Identifier	x2
>4723	ExpressionStatement	 
>4724	AssignmentExpr	g -> la_damage = damage
>4725	Identifier	damage
>4726	PtrMemberAccess	g -> la_damage
>4727	Identifier	la_damage
>4728	Identifier	g
>4729	Statement	 
>4730	ExpressionStatement	 
>4731	AssignmentExpr	g -> shootthing = t1
>4732	Identifier	t1
>4733	PtrMemberAccess	g -> shootthing
>4734	Identifier	shootthing
>4735	Identifier	g
>4736	Statement	 
>4737	ExpressionStatement	 
>4738	AssignmentExpr	angle >>= ANGLETOFINESHIFT
>4739	Identifier	ANGLETOFINESHIFT
>4740	Identifier	angle
>4741	IdentifierDeclStatement	 
>4742	IdentifierDecl	y2
>4743	Identifier	y2
>4744	IdentifierDeclType	fixed_t
>4745	IdentifierDeclStatement	 
>4746	IdentifierDecl	x2
>4747	Identifier	x2
>4748	IdentifierDeclType	fixed_t
>4782	FunctionDef	PTR_UseTraverse (intercept_t * in)
>4783	ParameterList	intercept_t * in
>4784	Parameter	 
>4785	Identifier	in
>4786	ParameterType	intercept_t *
>4787	ReturnType	qboolean
>4788	CompoundStatement	 
>4789	ReturnStatement	 
>4790	Identifier	false
>4791	ExpressionStatement	 
>4792	Statement	 
>4793	Statement	 
>4794	Statement	 
>4795	Statement	 
>4796	Statement	 
>4797	Statement	 
>4798	Statement	 
>4799	Statement	 
>4800	Statement	 
>4801	Statement	 
>4802	Statement	 
>4803	Statement	 
>4804	Statement	 
>4805	Statement	 
>4806	Statement	 
>4807	ExpressionStatement	 
>4808	AssignmentExpr	side = 1
>4809	PrimaryExpression	1
>4810	Identifier	side
>4811	Statement	 
>4812	Statement	 
>4813	Statement	 
>4814	Statement	 
>4815	Statement	 
>4816	Statement	 
>4817	Statement	 
>4818	Statement	 
>4819	Statement	 
>4820	Statement	 
>4821	Statement	 
>4822	Statement	 
>4823	Statement	 
>4824	Statement	 
>4825	Statement	 
>4826	Statement	 
>4827	Statement	 
>4828	Statement	 
>4829	Statement	 
>4830	Statement	 
>4831	Statement	 
>4832	Statement	 
>4833	Statement	 
>4834	Statement	 
>4835	Statement	 
>4836	Statement	 
>4837	Statement	 
>4838	ExpressionStatement	 
>4839	AssignmentExpr	side = 0
>4840	PrimaryExpression	0
>4841	Identifier	side
>4842	IfStatement	if ( ! in -> d . line -> special )
>4843	CompoundStatement	 
>4844	ReturnStatement	 
>4845	Identifier	true
>4846	CompoundStatement	 
>4847	ReturnStatement	 
>4848	Identifier	false
>4849	ExpressionStatement	 
>4850	Statement	 
>4851	Statement	 
>4852	Statement	 
>4853	Statement	 
>4854	Statement	 
>4855	Statement	 
>4856	Statement	 
>4857	Statement	 
>4858	Statement	 
>4859	Statement	 
>4860	Statement	 
>4861	Statement	 
>4862	Statement	 
>4863	Statement	 
>4864	Statement	 
>4865	Statement	 
>4866	Statement	 
>4867	Statement	 
>4868	ExpressionStatement	 
>4869	CallExpression	P_LineOpening ( in -> d . line )
>4870	ArgumentList	in -> d . line
>4871	Argument	in -> d . line
>4872	MemberAccess	in -> d . line
>4873	Identifier	line
>4874	PtrMemberAccess	in -> d
>4875	Identifier	d
>4876	Identifier	in
>4877	Callee	P_LineOpening
>4878	Identifier	P_LineOpening
>4879	Condition	 
>4880	UnaryOp	! in -> d . line -> special
>4881	PtrMemberAccess	in -> d . line -> special
>4882	Identifier	special
>4883	MemberAccess	in -> d . line
>4884	Identifier	line
>4885	PtrMemberAccess	in -> d
>4886	Identifier	d
>4887	Identifier	in
>4888	UnaryOperator	!
>4889	IdentifierDeclStatement	 
>4890	IdentifierDecl	side
>4891	Identifier	side
>4892	IdentifierDeclType	int
>4907	FunctionDef	P_UseLines (player_t * player)
>4908	ParameterList	player_t * player
>4909	Parameter	 
>4910	Identifier	player
>4911	ParameterType	player_t *
>4912	ReturnType	void
>4913	CompoundStatement	 
>4914	ExpressionStatement	 
>4915	CallExpression	P_PathTraverse ( x1 , y1 , x2 , y2 , PT_ADDLINES , PTR_UseTraverse )
>4916	ArgumentList	x1
>4917	Argument	PTR_UseTraverse
>4918	Identifier	PTR_UseTraverse
>4919	Argument	PT_ADDLINES
>4920	Identifier	PT_ADDLINES
>4921	Argument	y2
>4922	Identifier	y2
>4923	Argument	x2
>4924	Identifier	x2
>4925	Argument	y1
>4926	Identifier	y1
>4927	Argument	x1
>4928	Identifier	x1
>4929	Callee	P_PathTraverse
>4930	Identifier	P_PathTraverse
>4931	ExpressionStatement	 
>4932	AssignmentExpr	y2 = y1 + ( USERANGE >> FRACBITS ) * finesine [ angle ]
>4933	AdditiveExpression	y1 + ( USERANGE >> FRACBITS ) * finesine [ angle ]
>4934	MultiplicativeExpression	( USERANGE >> FRACBITS ) * finesine [ angle ]
>4935	ArrayIndexing	finesine [ angle ]
>4936	Identifier	angle
>4937	Identifier	finesine
>4938	ShiftExpression	USERANGE >> FRACBITS
>4939	Identifier	FRACBITS
>4940	Identifier	USERANGE
>4941	Identifier	y1
>4942	Identifier	y2
>4943	ExpressionStatement	 
>4944	AssignmentExpr	x2 = x1 + ( USERANGE >> FRACBITS ) * finecosine [ angle ]
>4945	AdditiveExpression	x1 + ( USERANGE >> FRACBITS ) * finecosine [ angle ]
>4946	MultiplicativeExpression	( USERANGE >> FRACBITS ) * finecosine [ angle ]
>4947	ArrayIndexing	finecosine [ angle ]
>4948	Identifier	angle
>4949	Identifier	finecosine
>4950	ShiftExpression	USERANGE >> FRACBITS
>4951	Identifier	FRACBITS
>4952	Identifier	USERANGE
>4953	Identifier	x1
>4954	Identifier	x2
>4955	ExpressionStatement	 
>4956	AssignmentExpr	y1 = player -> mo -> y
>4957	PtrMemberAccess	player -> mo -> y
>4958	Identifier	y
>4959	PtrMemberAccess	player -> mo
>4960	Identifier	mo
>4961	Identifier	player
>4962	Identifier	y1
>4963	ExpressionStatement	 
>4964	AssignmentExpr	x1 = player -> mo -> x
>4965	PtrMemberAccess	player -> mo -> x
>4966	Identifier	x
>4967	PtrMemberAccess	player -> mo
>4968	Identifier	mo
>4969	Identifier	player
>4970	Identifier	x1
>4971	ExpressionStatement	 
>4972	AssignmentExpr	angle = player -> mo -> angle >> ANGLETOFINESHIFT
>4973	ShiftExpression	player -> mo -> angle >> ANGLETOFINESHIFT
>4974	Identifier	ANGLETOFINESHIFT
>4975	PtrMemberAccess	player -> mo -> angle
>4976	Identifier	angle
>4977	PtrMemberAccess	player -> mo
>4978	Identifier	mo
>4979	Identifier	player
>4980	Identifier	angle
>4981	ExpressionStatement	 
>4982	AssignmentExpr	g -> usething = player -> mo
>4983	PtrMemberAccess	player -> mo
>4984	Identifier	mo
>4985	Identifier	player
>4986	PtrMemberAccess	g -> usething
>4987	Identifier	usething
>4988	Identifier	g
>4989	Statement	 
>4990	IdentifierDeclStatement	 
>4991	IdentifierDecl	y2
>4992	Identifier	y2
>4993	IdentifierDeclType	fixed_t
>4994	IdentifierDeclStatement	 
>4995	IdentifierDecl	x2
>4996	Identifier	x2
>4997	IdentifierDeclType	fixed_t
>4998	IdentifierDeclStatement	 
>4999	IdentifierDecl	y1
>5000	Identifier	y1
>5001	IdentifierDeclType	fixed_t
>5002	IdentifierDeclStatement	 
>5003	IdentifierDecl	x1
>5004	Identifier	x1
>5005	IdentifierDeclType	fixed_t
>5006	IdentifierDeclStatement	 
>5007	IdentifierDecl	angle
>5008	Identifier	angle
>5009	IdentifierDeclType	int
>5039	FunctionDef	PIT_RadiusAttack (mobj_t * thing)
>5040	ParameterList	mobj_t * thing
>5041	Parameter	 
>5042	Identifier	thing
>5043	ParameterType	mobj_t *
>5044	ReturnType	qboolean
>5045	CompoundStatement	 
>5046	ReturnStatement	 
>5047	Identifier	true
>5048	CompoundStatement	 
>5049	ExpressionStatement	 
>5050	Statement	 
>5051	Statement	 
>5052	Statement	 
>5053	Statement	 
>5054	Statement	 
>5055	Statement	 
>5056	Statement	 
>5057	Statement	 
>5058	Statement	 
>5059	Statement	 
>5060	Statement	 
>5061	Statement	 
>5062	Statement	 
>5063	Statement	 
>5064	Statement	 
>5065	Statement	 
>5066	Statement	 
>5067	Statement	 
>5068	Statement	 
>5069	Statement	 
>5070	Statement	 
>5071	Statement	 
>5072	Statement	 
>5073	Statement	 
>5074	Statement	 
>5075	Statement	 
>5076	Statement	 
>5077	Statement	 
>5078	Statement	 
>5079	Statement	 
>5080	Statement	 
>5081	Statement	 
>5082	Statement	 
>5083	ReturnStatement	 
>5084	Identifier	true
>5085	Statement	 
>5086	Statement	 
>5087	Statement	 
>5088	Statement	 
>5089	Statement	 
>5090	Statement	 
>5091	Statement	 
>5092	Statement	 
>5093	Statement	 
>5094	IfStatement	if ( dist < 0 )
>5095	ExpressionStatement	 
>5096	AssignmentExpr	dist = 0
>5097	PrimaryExpression	0
>5098	Identifier	dist
>5099	Condition	 
>5100	RelationalExpression	dist < 0
>5101	PrimaryExpression	0
>5102	Identifier	dist
>5103	ExpressionStatement	 
>5104	AssignmentExpr	dist = ( dist - thing -> radius ) >> FRACBITS
>5105	ShiftExpression	( dist - thing -> radius ) >> FRACBITS
>5106	Identifier	FRACBITS
>5107	AdditiveExpression	dist - thing -> radius
>5108	PtrMemberAccess	thing -> radius
>5109	Identifier	radius
>5110	Identifier	thing
>5111	Identifier	dist
>5112	Identifier	dist
>5113	ExpressionStatement	 
>5114	AssignmentExpr	dist = dx > dy ? dx 
>5115	ConditionalExpression	dx > dy ? dx 
>5116	Identifier	dy
>5117	Identifier	dx
>5118	Condition	dx > dy
>5119	RelationalExpression	dx > dy
>5120	Identifier	dy
>5121	Identifier	dx
>5122	Identifier	dist
>5123	ExpressionStatement	 
>5124	Statement	 
>5125	Statement	 
>5126	Statement	 
>5127	Statement	 
>5128	Statement	 
>5129	Statement	 
>5130	Statement	 
>5131	Statement	 
>5132	Statement	 
>5133	Statement	 
>5134	Statement	 
>5135	Statement	 
>5136	Statement	 
>5137	Statement	 
>5138	Statement	 
>5139	ExpressionStatement	 
>5140	Statement	 
>5141	Statement	 
>5142	Statement	 
>5143	Statement	 
>5144	Statement	 
>5145	Statement	 
>5146	Statement	 
>5147	Statement	 
>5148	Statement	 
>5149	Statement	 
>5150	Statement	 
>5151	Statement	 
>5152	Statement	 
>5153	Statement	 
>5154	Statement	 
>5155	IfStatement	if ( thing -> type == MT_CYBORG || thing -> type == MT_SPIDER )
>5156	ReturnStatement	 
>5157	Identifier	true
>5158	Condition	 
>5159	OrExpression	thing -> type == MT_CYBORG || thing -> type == MT_SPIDER
>5160	EqualityExpression	thing -> type == MT_SPIDER
>5161	Identifier	MT_SPIDER
>5162	PtrMemberAccess	thing -> type
>5163	Identifier	type
>5164	Identifier	thing
>5165	EqualityExpression	thing -> type == MT_CYBORG
>5166	Identifier	MT_CYBORG
>5167	PtrMemberAccess	thing -> type
>5168	Identifier	type
>5169	Identifier	thing
>5170	IfStatement	if ( ! ( thing -> flags & MF_SHOOTABLE ) )
>5171	ReturnStatement	 
>5172	Identifier	true
>5173	Condition	 
>5174	UnaryOp	! ( thing -> flags & MF_SHOOTABLE )
>5175	BitAndExpression	thing -> flags & MF_SHOOTABLE
>5176	Identifier	MF_SHOOTABLE
>5177	PtrMemberAccess	thing -> flags
>5178	Identifier	flags
>5179	Identifier	thing
>5180	UnaryOperator	!
>5181	IdentifierDeclStatement	 
>5182	IdentifierDecl	dist
>5183	Identifier	dist
>5184	IdentifierDeclType	fixed_t
>5185	IdentifierDeclStatement	 
>5186	IdentifierDecl	dy
>5187	Identifier	dy
>5188	IdentifierDeclType	fixed_t
>5189	IdentifierDeclStatement	 
>5190	IdentifierDecl	dx
>5191	Identifier	dx
>5192	IdentifierDeclType	fixed_t
>5209	FunctionDef	P_RadiusAttack (mobj_t * spot , mobj_t * source , int damage)
>5210	ParameterList	mobj_t * spot , mobj_t * source , int damage
>5211	Parameter	 
>5212	Identifier	damage
>5213	ParameterType	int
>5214	Parameter	 
>5215	Identifier	source
>5216	ParameterType	mobj_t *
>5217	Parameter	 
>5218	Identifier	spot
>5219	ParameterType	mobj_t *
>5220	ReturnType	void
>5221	CompoundStatement	 
>5222	ForStatement	for ( y = yl ; y <= yh ; y ++ )
>5223	ForStatement	for ( x = xl ; x <= xh ; x ++ )
>5224	ExpressionStatement	 
>5225	CallExpression	P_BlockThingsIterator ( x , y , PIT_RadiusAttack )
>5226	ArgumentList	x
>5227	Argument	PIT_RadiusAttack
>5228	Identifier	PIT_RadiusAttack
>5229	Argument	y
>5230	Identifier	y
>5231	Argument	x
>5232	Identifier	x
>5233	Callee	P_BlockThingsIterator
>5234	Identifier	P_BlockThingsIterator
>5235	IncDecOp	 
>5236	IncDec	++
>5237	Identifier	x
>5238	Condition	 
>5239	RelationalExpression	x <= xh
>5240	Identifier	xh
>5241	Identifier	x
>5242	ForInit	 
>5243	AssignmentExpr	x = xl
>5244	Identifier	xl
>5245	Identifier	x
>5246	IncDecOp	 
>5247	IncDec	++
>5248	Identifier	y
>5249	Condition	 
>5250	RelationalExpression	y <= yh
>5251	Identifier	yh
>5252	Identifier	y
>5253	ForInit	 
>5254	AssignmentExpr	y = yl
>5255	Identifier	yl
>5256	Identifier	y
>5257	ExpressionStatement	 
>5258	AssignmentExpr	g -> bombdamage = damage
>5259	Identifier	damage
>5260	PtrMemberAccess	g -> bombdamage
>5261	Identifier	bombdamage
>5262	Identifier	g
>5263	Statement	 
>5264	ExpressionStatement	 
>5265	AssignmentExpr	g -> bombsource = source
>5266	Identifier	source
>5267	PtrMemberAccess	g -> bombsource
>5268	Identifier	bombsource
>5269	Identifier	g
>5270	Statement	 
>5271	ExpressionStatement	 
>5272	AssignmentExpr	g -> bombspot = spot
>5273	Identifier	spot
>5274	PtrMemberAccess	g -> bombspot
>5275	Identifier	bombspot
>5276	Identifier	g
>5277	Statement	 
>5278	ExpressionStatement	 
>5279	Identifier	MAPBLOCKSHIFT
>5280	Statement	 
>5281	Statement	 
>5282	Statement	 
>5283	Statement	 
>5284	Statement	 
>5285	Statement	 
>5286	Statement	 
>5287	Statement	 
>5288	Statement	 
>5289	Statement	 
>5290	Statement	 
>5291	Statement	 
>5292	Statement	 
>5293	Statement	 
>5294	Statement	 
>5295	ExpressionStatement	 
>5296	Identifier	MAPBLOCKSHIFT
>5297	Statement	 
>5298	Statement	 
>5299	Statement	 
>5300	Statement	 
>5301	Statement	 
>5302	Statement	 
>5303	Statement	 
>5304	Statement	 
>5305	Statement	 
>5306	Statement	 
>5307	Statement	 
>5308	Statement	 
>5309	Statement	 
>5310	Statement	 
>5311	Statement	 
>5312	ExpressionStatement	 
>5313	Identifier	MAPBLOCKSHIFT
>5314	Statement	 
>5315	Statement	 
>5316	Statement	 
>5317	Statement	 
>5318	Statement	 
>5319	Statement	 
>5320	Statement	 
>5321	Statement	 
>5322	Statement	 
>5323	Statement	 
>5324	Statement	 
>5325	Statement	 
>5326	Statement	 
>5327	Statement	 
>5328	Statement	 
>5329	ExpressionStatement	 
>5330	Identifier	MAPBLOCKSHIFT
>5331	Statement	 
>5332	Statement	 
>5333	Statement	 
>5334	Statement	 
>5335	Statement	 
>5336	Statement	 
>5337	Statement	 
>5338	Statement	 
>5339	Statement	 
>5340	Statement	 
>5341	Statement	 
>5342	Statement	 
>5343	Statement	 
>5344	Statement	 
>5345	Statement	 
>5346	ExpressionStatement	 
>5347	AssignmentExpr	dist = ( damage + MAXRADIUS ) << FRACBITS
>5348	ShiftExpression	( damage + MAXRADIUS ) << FRACBITS
>5349	Identifier	FRACBITS
>5350	AdditiveExpression	damage + MAXRADIUS
>5351	Identifier	MAXRADIUS
>5352	Identifier	damage
>5353	Identifier	dist
>5354	IdentifierDeclStatement	 
>5355	IdentifierDecl	dist
>5356	Identifier	dist
>5357	IdentifierDeclType	fixed_t
>5358	IdentifierDeclStatement	 
>5359	IdentifierDecl	yh
>5360	Identifier	yh
>5361	IdentifierDeclType	int
>5362	IdentifierDeclStatement	 
>5363	IdentifierDecl	yl
>5364	Identifier	yl
>5365	IdentifierDeclType	int
>5366	IdentifierDeclStatement	 
>5367	IdentifierDecl	xh
>5368	Identifier	xh
>5369	IdentifierDeclType	int
>5370	IdentifierDeclStatement	 
>5371	IdentifierDecl	xl
>5372	Identifier	xl
>5373	IdentifierDeclType	int
>5374	IdentifierDeclStatement	 
>5375	IdentifierDecl	y
>5376	Identifier	y
>5377	IdentifierDeclType	int
>5378	IdentifierDeclStatement	 
>5379	IdentifierDecl	x
>5380	Identifier	x
>5381	IdentifierDeclType	int
>5403	FunctionDef	PIT_ChangeSector (mobj_t * thing)
>5404	ParameterList	mobj_t * thing
>5405	Parameter	 
>5406	Identifier	thing
>5407	ParameterType	mobj_t *
>5408	ReturnType	qboolean
>5409	CompoundStatement	 
>5410	ReturnStatement	 
>5411	Identifier	true
>5412	CompoundStatement	 
>5413	ExpressionStatement	 
>5414	AssignmentExpr	mo -> momy = ( P_Random ( ) - P_Random ( ) ) << 12
>5415	ShiftExpression	( P_Random ( ) - P_Random ( ) ) << 12
>5416	PrimaryExpression	12
>5417	AdditiveExpression	P_Random ( ) - P_Random ( )
>5418	CallExpression	P_Random ( )
>5419	ArgumentList	 
>5420	Callee	P_Random
>5421	Identifier	P_Random
>5422	CallExpression	P_Random ( )
>5423	ArgumentList	 
>5424	Callee	P_Random
>5425	Identifier	P_Random
>5426	PtrMemberAccess	mo -> momy
>5427	Identifier	momy
>5428	Identifier	mo
>5429	ExpressionStatement	 
>5430	AssignmentExpr	mo -> momx = ( P_Random ( ) - P_Random ( ) ) << 12
>5431	ShiftExpression	( P_Random ( ) - P_Random ( ) ) << 12
>5432	PrimaryExpression	12
>5433	AdditiveExpression	P_Random ( ) - P_Random ( )
>5434	CallExpression	P_Random ( )
>5435	ArgumentList	 
>5436	Callee	P_Random
>5437	Identifier	P_Random
>5438	CallExpression	P_Random ( )
>5439	ArgumentList	 
>5440	Callee	P_Random
>5441	Identifier	P_Random
>5442	PtrMemberAccess	mo -> momx
>5443	Identifier	momx
>5444	Identifier	mo
>5445	ExpressionStatement	 
>5446	AssignmentExpr	mo = P_SpawnMobj ( thing -> x , thing -> y , thing -> z + thing -> height / 2 , MT_BLOOD )
>5447	CallExpression	P_SpawnMobj ( thing -> x , thing -> y , thing -> z + thing -> height / 2 , MT_BLOOD )
>5448	ArgumentList	thing -> x
>5449	Argument	MT_BLOOD
>5450	Identifier	MT_BLOOD
>5451	Argument	thing -> z + thing -> height / 2
>5452	AdditiveExpression	thing -> z + thing -> height / 2
>5453	MultiplicativeExpression	thing -> height / 2
>5454	PrimaryExpression	2
>5455	PtrMemberAccess	thing -> height
>5456	Identifier	height
>5457	Identifier	thing
>5458	PtrMemberAccess	thing -> z
>5459	Identifier	z
>5460	Identifier	thing
>5461	Argument	thing -> y
>5462	PtrMemberAccess	thing -> y
>5463	Identifier	y
>5464	Identifier	thing
>5465	Argument	thing -> x
>5466	PtrMemberAccess	thing -> x
>5467	Identifier	x
>5468	Identifier	thing
>5469	Callee	P_SpawnMobj
>5470	Identifier	P_SpawnMobj
>5471	Identifier	mo
>5472	ExpressionStatement	 
>5473	CallExpression	P_DamageMobj ( thing , NULL , NULL , 10 )
>5474	ArgumentList	thing
>5475	Argument	10
>5476	PrimaryExpression	10
>5477	Argument	NULL
>5478	Identifier	NULL
>5479	Argument	NULL
>5480	Identifier	NULL
>5481	Argument	thing
>5482	Identifier	thing
>5483	Callee	P_DamageMobj
>5484	Identifier	P_DamageMobj
>5485	Statement	 
>5486	Statement	 
>5487	Statement	 
>5488	Statement	 
>5489	Statement	 
>5490	Statement	 
>5491	Statement	 
>5492	Statement	 
>5493	Statement	 
>5494	Statement	 
>5495	Statement	 
>5496	Statement	 
>5497	Statement	 
>5498	Statement	 
>5499	Statement	 
>5500	Statement	 
>5501	Statement	 
>5502	ExpressionStatement	 
>5503	AssignmentExpr	g -> nofit = true
>5504	Identifier	true
>5505	PtrMemberAccess	g -> nofit
>5506	Identifier	nofit
>5507	Identifier	g
>5508	Statement	 
>5509	IfStatement	if ( ! ( thing -> flags & MF_SHOOTABLE ) )
>5510	CompoundStatement	 
>5511	ReturnStatement	 
>5512	Identifier	true
>5513	Condition	 
>5514	UnaryOp	! ( thing -> flags & MF_SHOOTABLE )
>5515	BitAndExpression	thing -> flags & MF_SHOOTABLE
>5516	Identifier	MF_SHOOTABLE
>5517	PtrMemberAccess	thing -> flags
>5518	Identifier	flags
>5519	Identifier	thing
>5520	UnaryOperator	!
>5521	IfStatement	if ( thing -> flags & MF_DROPPED )
>5522	CompoundStatement	 
>5523	ReturnStatement	 
>5524	Identifier	true
>5525	ExpressionStatement	 
>5526	CallExpression	P_RemoveMobj ( thing )
>5527	ArgumentList	thing
>5528	Argument	thing
>5529	Identifier	thing
>5530	Callee	P_RemoveMobj
>5531	Identifier	P_RemoveMobj
>5532	Condition	 
>5533	BitAndExpression	thing -> flags & MF_DROPPED
>5534	Identifier	MF_DROPPED
>5535	PtrMemberAccess	thing -> flags
>5536	Identifier	flags
>5537	Identifier	thing
>5538	IfStatement	if ( thing -> health <= 0 )
>5539	CompoundStatement	 
>5540	ReturnStatement	 
>5541	Identifier	true
>5542	ExpressionStatement	 
>5543	AssignmentExpr	thing -> radius = 0
>5544	PrimaryExpression	0
>5545	PtrMemberAccess	thing -> radius
>5546	Identifier	radius
>5547	Identifier	thing
>5548	ExpressionStatement	 
>5549	AssignmentExpr	thing -> height = 0
>5550	PrimaryExpression	0
>5551	PtrMemberAccess	thing -> height
>5552	Identifier	height
>5553	Identifier	thing
>5554	ExpressionStatement	 
>5555	AssignmentExpr	thing -> flags &= ~MF_SOLID
>5556	Identifier	~MF_SOLID
>5557	PtrMemberAccess	thing -> flags
>5558	Identifier	flags
>5559	Identifier	thing
>5560	ExpressionStatement	 
>5561	CallExpression	P_SetMobjState ( thing , S_GIBS )
>5562	ArgumentList	thing
>5563	Argument	S_GIBS
>5564	Identifier	S_GIBS
>5565	Argument	thing
>5566	Identifier	thing
>5567	Callee	P_SetMobjState
>5568	Identifier	P_SetMobjState
>5569	Condition	 
>5570	RelationalExpression	thing -> health <= 0
>5571	PrimaryExpression	0
>5572	PtrMemberAccess	thing -> health
>5573	Identifier	health
>5574	Identifier	thing
>5575	IfStatement	if ( P_ThingHeightClip ( thing ) )
>5576	CompoundStatement	 
>5577	ReturnStatement	 
>5578	Identifier	true
>5579	Condition	 
>5580	CallExpression	P_ThingHeightClip ( thing )
>5581	ArgumentList	thing
>5582	Argument	thing
>5583	Identifier	thing
>5584	Callee	P_ThingHeightClip
>5585	Identifier	P_ThingHeightClip
>5586	IdentifierDeclStatement	 
>5587	IdentifierDecl	* mo
>5588	Identifier	mo
>5589	IdentifierDeclType	mobj_t *
>5619	FunctionDef	P_ChangeSector (sector_t * sector , qboolean crunch)
>5620	ParameterList	sector_t * sector , qboolean crunch
>5621	Parameter	 
>5622	Identifier	crunch
>5623	ParameterType	qboolean
>5624	Parameter	 
>5625	Identifier	sector
>5626	ParameterType	sector_t *
>5627	ReturnType	qboolean
>5628	CompoundStatement	 
>5629	ExpressionStatement	 
>5630	PtrMemberAccess	g -> nofit
>5631	Identifier	nofit
>5632	Identifier	g
>5633	Statement	 
>5634	Statement	 
>5635	ForStatement	for ( x = sector -> blockbox [ BOXLEFT ] ; x <= sector -> blockbox [ BOXRIGHT ] ; x ++ )
>5636	ForStatement	for ( y = sector -> blockbox [ BOXBOTTOM ] ; y <= sector -> blockbox [ BOXTOP ] ; y ++ )
>5637	ExpressionStatement	 
>5638	CallExpression	P_BlockThingsIterator ( x , y , PIT_ChangeSector )
>5639	ArgumentList	x
>5640	Argument	PIT_ChangeSector
>5641	Identifier	PIT_ChangeSector
>5642	Argument	y
>5643	Identifier	y
>5644	Argument	x
>5645	Identifier	x
>5646	Callee	P_BlockThingsIterator
>5647	Identifier	P_BlockThingsIterator
>5648	IncDecOp	 
>5649	IncDec	++
>5650	Identifier	y
>5651	Condition	 
>5652	RelationalExpression	y <= sector -> blockbox [ BOXTOP ]
>5653	ArrayIndexing	sector -> blockbox [ BOXTOP ]
>5654	Identifier	BOXTOP
>5655	PtrMemberAccess	sector -> blockbox
>5656	Identifier	blockbox
>5657	Identifier	sector
>5658	Identifier	y
>5659	ForInit	 
>5660	AssignmentExpr	y = sector -> blockbox [ BOXBOTTOM ]
>5661	ArrayIndexing	sector -> blockbox [ BOXBOTTOM ]
>5662	Identifier	BOXBOTTOM
>5663	PtrMemberAccess	sector -> blockbox
>5664	Identifier	blockbox
>5665	Identifier	sector
>5666	Identifier	y
>5667	IncDecOp	 
>5668	IncDec	++
>5669	Identifier	x
>5670	Condition	 
>5671	RelationalExpression	x <= sector -> blockbox [ BOXRIGHT ]
>5672	ArrayIndexing	sector -> blockbox [ BOXRIGHT ]
>5673	Identifier	BOXRIGHT
>5674	PtrMemberAccess	sector -> blockbox
>5675	Identifier	blockbox
>5676	Identifier	sector
>5677	Identifier	x
>5678	ForInit	 
>5679	AssignmentExpr	x = sector -> blockbox [ BOXLEFT ]
>5680	ArrayIndexing	sector -> blockbox [ BOXLEFT ]
>5681	Identifier	BOXLEFT
>5682	PtrMemberAccess	sector -> blockbox
>5683	Identifier	blockbox
>5684	Identifier	sector
>5685	Identifier	x
>5686	ExpressionStatement	 
>5687	AssignmentExpr	g -> crushchange = crunch
>5688	Identifier	crunch
>5689	PtrMemberAccess	g -> crushchange
>5690	Identifier	crushchange
>5691	Identifier	g
>5692	Statement	 
>5693	ExpressionStatement	 
>5694	AssignmentExpr	g -> nofit = false
>5695	Identifier	false
>5696	PtrMemberAccess	g -> nofit
>5697	Identifier	nofit
>5698	Identifier	g
>5699	Statement	 
>5700	IdentifierDeclStatement	 
>5701	IdentifierDecl	y
>5702	Identifier	y
>5703	IdentifierDeclType	int
>5704	IdentifierDeclStatement	 
>5705	IdentifierDecl	x
>5706	Identifier	x
>5707	IdentifierDeclType	int
<3=9,8,4
<4=5
<5=7,6
<9=116,105,104,103,102,101,100,99,98,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,58,59,62,63,64
<10=11
<29=30
<48=49
<59=60
<60=61
<92=93
<93=95,94
<95=97,96
<105=108,106
<106=107
<108=109
<109=115,110
<110=112,111
<112=114,113
<116=117
<117=119,118
<133=145,144,134
<134=141,138,135
<135=137,136
<138=140,139
<141=143,142
<145=497,493,489,485,481,477,473,472,466,465,457,456,450,449,443,442,441,440,439,438,437,436,435,434,433,432,426,425,424,423,422,421,420,419,418,417,416,415,409,408,407,406,405,404,403,402,401,400,399,398,392,391,390,389,388,387,386,385,384,383,382,381,375,364,363,357,356,355,354,353,352,351,341,340,330,329,323,322,316,315,314,313,312,311,310,309,308,307,306,305,304,303,302,301,300,299,298,297,295,294,293,292,291,290,289,288,287,286,285,284,283,282,281,280,279,278,277,276,274,273,272,271,270,269,268,267,266,146,148,155,161,167,171,172,173,174,175,176,180,181,182,183,184,185,192,232,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,255,256,257,258,259,260,261,262,263,264,265
<146=147
<148=149
<149=153,150
<150=151
<151=152
<153=154
<155=156
<156=158,157
<158=160,159
<161=162
<162=164,163
<164=166,165
<167=168
<168=170,169
<176=177
<177=179,178
<185=186
<186=190,187
<187=188
<188=189
<190=191
<192=228,224,221,193
<193=217,213,210,194
<194=197,195
<195=196
<197=198
<198=209,199
<199=207,200
<200=205,203,201
<201=202
<203=204
<205=206
<207=208
<210=212,211
<213=214
<214=216,215
<217=218
<218=220,219
<221=223,222
<224=225
<225=227,226
<228=229
<229=231,230
<232=233
<253=254
<274=275
<295=296
<316=317
<317=319,318
<319=321,320
<323=324
<324=326,325
<326=328,327
<330=331
<331=337,332
<332=334,333
<334=336,335
<337=339,338
<341=342
<342=348,343
<343=345,344
<345=347,346
<348=350,349
<357=358
<358=360,359
<360=362,361
<364=365
<365=374,366
<366=372,367
<367=370,368
<368=369
<370=371
<372=373
<375=376
<376=378,377
<378=380,379
<392=393
<393=395,394
<395=397,396
<409=410
<410=412,411
<412=414,413
<426=427
<427=429,428
<429=431,430
<443=444
<444=446,445
<446=448,447
<450=451
<451=453,452
<453=455,454
<457=458
<458=462,459
<459=461,460
<462=464,463
<466=467
<467=469,468
<469=471,470
<473=474
<474=476,475
<477=478
<478=480,479
<481=482
<482=484,483
<485=486
<486=488,487
<489=490
<490=492,491
<493=494
<494=496,495
<497=498
<498=500,499
<541=547,546,542
<542=543
<543=545,544
<547=796,795,794,793,792,791,790,789,788,787,786,785,784,783,782,781,780,779,778,777,776,775,774,773,772,771,770,769,768,767,766,765,764,763,762,761,760,759,758,757,756,755,754,753,752,751,750,749,748,747,746,745,744,743,742,741,740,739,738,737,736,735,733,732,731,730,729,728,727,726,725,724,723,722,721,720,719,718,716,707,706,705,704,703,702,701,700,699,698,697,696,695,694,693,665,658,657,656,655,654,653,652,651,650,649,648,647,646,628,627,626,625,548,550,571,572,573,574,575,576,577,578,579,580,581,582,583,584,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624
<548=549
<550=570,569,568,567,566,565,564,563,562,561,560,558,557,551
<551=552
<552=554,553
<554=556,555
<558=559
<584=585
<585=587,586
<606=607
<607=609,608
<628=645,644,643,642,641,640,636,635,629
<629=630
<630=632,631
<632=634,633
<636=637
<637=639,638
<658=659
<659=663,660
<660=661
<661=662
<663=664
<665=684,683,682,681,680,679,678,677,676,675,674,673,672,671,670,669,668,666
<666=667
<684=687,685
<685=686
<687=688
<688=690,689
<690=692,691
<707=710,708
<708=709
<710=711
<711=715,712
<712=714,713
<716=717
<733=734
<811=817,816,812
<812=813
<813=815,814
<817=1253,1249,1245,1230,1229,1228,1227,1226,1225,1224,1223,1217,1216,1215,1214,1213,1212,1211,1210,1209,1208,1207,1206,1205,1204,1203,1202,1201,1200,818,826,866,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199
<818=819
<819=825,820
<820=822,821
<822=824,823
<826=860,827
<827=852,851,850,849,848,847,846,845,844,843,832,828
<828=829
<829=831,830
<832=842,841,840,839,838,837,836,835,834,833
<852=853
<853=859,854
<854=856,855
<856=858,857
<860=861
<861=863,862
<863=865,864
<866=1055,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,1044,1043,1042,1041,1040,1039,1037,1036,1035,1034,1033,1032,1031,1030,1029,1028,1027,1026,1025,1024,1023,1022,1021,1020,1019,1018,1017,1015,1014,1013,1012,1011,1010,1009,1008,1007,1006,1005,1004,1003,1002,1001,1000,999,998,997,996,995,994,993,992,991,990,989,988,987,986,985,984,983,982,981,980,979,978,977,976,975,974,973,972,971,970,969,968,967,966,965,867,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,929,953,954,955,956,957,958,959,960,961,962,963,964
<867=868
<888=889
<889=891,890
<891=893,892
<893=895,894
<911=921,912
<912=913
<913=914
<914=920,915
<915=917,916
<917=919,918
<921=922
<922=928,923
<923=925,924
<925=927,926
<929=952,951,950,949,948,947,946,945,944,943,942,940,930
<930=934,931
<931=932
<932=933
<934=935
<935=937,936
<937=939,938
<940=941
<1015=1016
<1037=1038
<1067=1161,1160,1159,1158,1157,1156,1155,1154,1153,1152,1151,1150,1149,1148,1147,1139,1138,1137,1136,1135,1134,1133,1068,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132
<1068=1069
<1090=1091
<1091=1093,1092
<1093=1095,1094
<1095=1097,1096
<1113=1114
<1114=1116,1115
<1116=1118,1117
<1118=1120,1119
<1139=1140
<1140=1142,1141
<1142=1144,1143
<1144=1146,1145
<1173=1174
<1184=1185
<1185=1186
<1217=1218
<1218=1220,1219
<1220=1222,1221
<1230=1233,1231
<1231=1232
<1233=1234
<1234=1244,1235
<1235=1241,1236
<1236=1240,1237
<1237=1239,1238
<1241=1243,1242
<1245=1246
<1246=1248,1247
<1249=1250
<1250=1252,1251
<1253=1254
<1254=1256,1255
<1282=1294,1293,1283
<1283=1290,1287,1284
<1284=1286,1285
<1287=1289,1288
<1290=1292,1291
<1294=1729,1725,1721,1717,1713,1709,1705,1704,1698,1697,1689,1688,1682,1681,1675,1674,1673,1672,1671,1670,1669,1668,1667,1666,1665,1664,1658,1657,1656,1655,1654,1653,1652,1651,1650,1649,1648,1647,1641,1640,1639,1638,1637,1636,1635,1634,1633,1632,1631,1630,1624,1623,1622,1621,1620,1619,1618,1617,1616,1615,1614,1613,1607,1596,1595,1589,1588,1587,1586,1585,1584,1583,1573,1572,1562,1561,1555,1554,1548,1547,1546,1545,1544,1543,1542,1541,1540,1539,1537,1536,1535,1534,1533,1532,1531,1530,1529,1528,1527,1526,1525,1524,1523,1522,1521,1520,1519,1518,1516,1515,1514,1513,1512,1511,1510,1509,1508,1507,1506,1505,1504,1503,1502,1501,1500,1499,1498,1497,1495,1494,1493,1492,1491,1490,1489,1488,1487,1486,1485,1484,1483,1482,1481,1480,1479,1478,1477,1476,1474,1473,1472,1471,1470,1469,1468,1467,1466,1465,1464,1463,1462,1461,1460,1459,1458,1457,1456,1455,1453,1413,1412,1411,1410,1409,1408,1407,1406,1405,1404,1403,1402,1401,1400,1399,1398,1397,1396,1394,1393,1392,1391,1390,1389,1388,1295,1297,1337,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387
<1295=1296
<1297=1333,1329,1326,1298
<1298=1322,1318,1315,1299
<1299=1302,1300
<1300=1301
<1302=1303
<1303=1314,1304
<1304=1312,1305
<1305=1310,1308,1306
<1306=1307
<1308=1309
<1310=1311
<1312=1313
<1315=1317,1316
<1318=1319
<1319=1321,1320
<1322=1323
<1323=1325,1324
<1326=1328,1327
<1329=1330
<1330=1332,1331
<1333=1334
<1334=1336,1335
<1337=1338
<1356=1357
<1375=1376
<1394=1395
<1413=1449,1445,1442,1414
<1414=1438,1434,1431,1415
<1415=1418,1416
<1416=1417
<1418=1419
<1419=1430,1420
<1420=1428,1421
<1421=1426,1424,1422
<1422=1423
<1424=1425
<1426=1427
<1428=1429
<1431=1433,1432
<1434=1435
<1435=1437,1436
<1438=1439
<1439=1441,1440
<1442=1444,1443
<1445=1446
<1446=1448,1447
<1449=1450
<1450=1452,1451
<1453=1454
<1474=1475
<1495=1496
<1516=1517
<1537=1538
<1548=1549
<1549=1551,1550
<1551=1553,1552
<1555=1556
<1556=1558,1557
<1558=1560,1559
<1562=1563
<1563=1569,1564
<1564=1566,1565
<1566=1568,1567
<1569=1571,1570
<1573=1574
<1574=1580,1575
<1575=1577,1576
<1577=1579,1578
<1580=1582,1581
<1589=1590
<1590=1592,1591
<1592=1594,1593
<1596=1597
<1597=1606,1598
<1598=1604,1599
<1599=1602,1600
<1600=1601
<1602=1603
<1604=1605
<1607=1608
<1608=1610,1609
<1610=1612,1611
<1624=1625
<1625=1627,1626
<1627=1629,1628
<1641=1642
<1642=1644,1643
<1644=1646,1645
<1658=1659
<1659=1661,1660
<1661=1663,1662
<1675=1676
<1676=1678,1677
<1678=1680,1679
<1682=1683
<1683=1685,1684
<1685=1687,1686
<1689=1690
<1690=1694,1691
<1691=1693,1692
<1694=1696,1695
<1698=1699
<1699=1701,1700
<1701=1703,1702
<1705=1706
<1706=1708,1707
<1709=1710
<1710=1712,1711
<1713=1714
<1714=1716,1715
<1717=1718
<1718=1720,1719
<1721=1722
<1722=1724,1723
<1725=1726
<1726=1728,1727
<1729=1730
<1730=1732,1731
<1773=1785,1784,1774
<1774=1781,1778,1775
<1775=1777,1776
<1778=1780,1779
<1781=1783,1782
<1785=2090,2086,2082,2078,2074,2073,2067,2051,1933,1926,1920,1914,1913,1912,1911,1910,1909,1905,1904,1903,1902,1901,1900,1896,1890,1884,1877,1788,1786
<1786=1787
<1788=1867,1789
<1789=1866,1865,1864,1863,1862,1861,1860,1859,1790
<1790=1858,1857,1856,1855,1854,1853,1852,1851,1850,1849,1848,1847,1846,1829,1816,1791
<1791=1812,1792
<1792=1806,1805,1804,1803,1802,1801,1800,1799,1798,1797,1796,1795,1794,1793
<1806=1808,1807
<1808=1809
<1809=1811,1810
<1812=1813
<1813=1815,1814
<1816=1817
<1817=1828,1818
<1818=1826,1819
<1819=1824,1822,1820
<1820=1821
<1822=1823
<1824=1825
<1826=1827
<1829=1830
<1830=1845,1831
<1831=1843,1832
<1832=1839,1835,1833
<1833=1834
<1835=1836
<1836=1838,1837
<1839=1840
<1840=1842,1841
<1843=1844
<1867=1868
<1868=1876,1869
<1869=1873,1870
<1870=1872,1871
<1873=1875,1874
<1877=1878
<1878=1882,1879
<1879=1880
<1880=1881
<1882=1883
<1884=1885
<1885=1887,1886
<1887=1889,1888
<1890=1891
<1891=1893,1892
<1893=1895,1894
<1896=1897
<1897=1899,1898
<1905=1906
<1906=1908,1907
<1914=1915
<1915=1919,1916
<1916=1918,1917
<1920=1921
<1921=1925,1922
<1922=1924,1923
<1926=1927
<1927=1931,1928
<1928=1929
<1929=1930
<1931=1932
<1933=2043,1934
<1934=2042,2041,2040,2039,2038,2037,2036,2035,2034,2033,2032,2031,2030,2029,2028,2027,2025,2024,2018,2017,2016,2015,2014,2013,2012,2011,2010,2009,2008,2007,2006,2005,2004,2003,2002,2001,2000,1999,1998,1997,1996,1995,1994,1992,1991,1990,1989,1988,1987,1935,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986
<1935=1936
<1966=1967
<1992=1993
<2018=2019
<2019=2021,2020
<2021=2023,2022
<2025=2026
<2043=2044
<2044=2050,2045
<2045=2047,2046
<2047=2049,2048
<2051=2054,2052
<2052=2053
<2054=2055
<2055=2066,2056
<2056=2064,2057
<2057=2062,2060,2058
<2058=2059
<2060=2061
<2062=2063
<2064=2065
<2067=2068
<2068=2070,2069
<2070=2072,2071
<2074=2075
<2075=2077,2076
<2078=2079
<2079=2081,2080
<2082=2083
<2083=2085,2084
<2086=2087
<2087=2089,2088
<2090=2091
<2091=2093,2092
<2120=2126,2125,2121
<2121=2122
<2122=2124,2123
<2126=2226,2216,2201,2200,2199,2198,2197,2196,2192,2191,2190,2189,2188,2187,2183,2144,2129,2127
<2127=2128
<2129=2132,2130
<2130=2131
<2132=2133
<2133=2137,2134
<2134=2136,2135
<2137=2141,2138
<2138=2140,2139
<2141=2143,2142
<2144=2181,2172,2145
<2145=2146
<2146=2147
<2147=2160,2148
<2148=2149
<2149=2157,2150
<2150=2154,2151
<2151=2153,2152
<2154=2156,2155
<2157=2159,2158
<2160=2161
<2161=2165,2162
<2162=2164,2163
<2165=2169,2166
<2166=2168,2167
<2169=2171,2170
<2172=2173
<2173=2174
<2174=2178,2175
<2175=2177,2176
<2178=2180,2179
<2181=2182
<2183=2184
<2184=2186,2185
<2192=2193
<2193=2195,2194
<2201=2202
<2202=2214,2203
<2203=2212,2208,2204
<2204=2205
<2205=2207,2206
<2208=2209
<2209=2211,2210
<2212=2213
<2214=2215
<2216=2217
<2217=2225,2218
<2218=2222,2219
<2219=2221,2220
<2222=2224,2223
<2226=2227
<2227=2229,2228
<2245=2251,2250,2246
<2246=2247
<2247=2249,2248
<2251=2455,2451,2447,2443,2439,2435,2419,2403,2402,2401,2400,2399,2398,2397,2396,2395,2394,2393,2392,2391,2390,2389,2388,2387,2252,2267,2268,2283,2284,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2316,2320,2329,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2363,2382,2383,2384,2385,2386
<2252=2253
<2253=2264,2254
<2254=2262,2255
<2255=2260,2256
<2256=2257
<2257=2259,2258
<2260=2261
<2262=2263
<2264=2266,2265
<2268=2269
<2269=2280,2270
<2270=2278,2271
<2271=2276,2272
<2272=2273
<2273=2275,2274
<2276=2277
<2278=2279
<2280=2282,2281
<2284=2285
<2285=2296,2286
<2286=2294,2287
<2287=2292,2288
<2288=2289
<2289=2291,2290
<2292=2293
<2294=2295
<2312=2313
<2313=2315,2314
<2316=2317
<2317=2319,2318
<2320=2325,2321
<2321=2322
<2322=2324,2323
<2325=2326
<2326=2328,2327
<2329=2330
<2330=2334,2331
<2331=2333,2332
<2354=2359,2355
<2355=2356
<2356=2358,2357
<2359=2360
<2360=2362,2361
<2363=2364
<2364=2381,2365
<2365=2379,2366
<2366=2377,2375,2371,2367
<2367=2368
<2368=2370,2369
<2371=2372
<2372=2374,2373
<2375=2376
<2377=2378
<2379=2380
<2403=2413,2404
<2404=2412,2406,2405
<2406=2407
<2407=2409,2408
<2409=2411,2410
<2413=2414
<2414=2416,2415
<2416=2418,2417
<2419=2429,2420
<2420=2428,2422,2421
<2422=2423
<2423=2425,2424
<2425=2427,2426
<2429=2430
<2430=2432,2431
<2432=2434,2433
<2435=2436
<2436=2438,2437
<2439=2440
<2440=2442,2441
<2443=2444
<2444=2446,2445
<2447=2448
<2448=2450,2449
<2451=2452
<2452=2454,2453
<2455=2456
<2456=2458,2457
<2489=2495,2494,2490
<2490=2491
<2491=2493,2492
<2495=2674,2660,2652,2616,2609,2608,2607,2606,2605,2604,2603,2602,2601,2600,2599,2598,2597,2596,2595,2593,2592,2591,2590,2589,2588,2587,2496,2498,2535,2536,2537,2538,2539,2540,2541,2542,2543,2544,2545,2546,2548,2550,2552,2553,2554,2555,2556,2557,2558,2559,2560,2561,2562,2563,2564,2565,2566,2567,2568,2569,2570,2572,2573,2574,2575,2576,2577,2578,2579,2580,2581,2582,2583,2584,2585,2586
<2496=2497
<2498=2534,2533,2532,2531,2530,2529,2525,2524,2523,2522,2521,2520,2519,2515,2514,2506,2505,2499
<2499=2500
<2500=2502,2501
<2502=2504,2503
<2506=2507
<2507=2511,2508
<2508=2510,2509
<2511=2513,2512
<2515=2516
<2516=2518,2517
<2525=2526
<2526=2528,2527
<2546=2547
<2548=2549
<2550=2551
<2570=2571
<2593=2594
<2609=2610
<2610=2614,2611
<2611=2612
<2612=2613
<2614=2615
<2616=2644,2617
<2617=2643,2642,2641,2640,2639,2638,2637,2636,2635,2634,2633,2632,2631,2630,2629,2628,2627,2626,2625,2624,2623,2620,2618
<2618=2619
<2620=2621
<2621=2622
<2644=2645
<2645=2651,2646
<2646=2648,2647
<2648=2650,2649
<2652=2653
<2653=2659,2654
<2654=2656,2655
<2656=2658,2657
<2660=2668,2661
<2661=2662
<2662=2666,2663
<2663=2664
<2664=2665
<2666=2667
<2668=2669
<2669=2673,2670
<2670=2672,2671
<2674=2675
<2675=2677,2676
<2697=2703,2702,2698
<2698=2699
<2699=2701,2700
<2703=3190,3186,3182,3178,3174,3170,3166,3165,3159,3155,3153,3144,3094,3044,3043,3035,3010,2985,2960,2959,2958,2957,2956,2955,2954,2953,2952,2951,2950,2949,2904,2903,2897,2896,2895,2894,2893,2892,2891,2890,2889,2888,2835,2834,2833,2832,2831,2830,2829,2828,2827,2826,2825,2824,2823,2822,2821,2820,2819,2818,2817,2816,2815,2814,2813,2812,2811,2810,2809,2803,2802,2801,2800,2799,2798,2797,2796,2795,2794,2793,2792,2791,2790,2789,2788,2787,2786,2785,2784,2783,2782,2781,2780,2779,2778,2777,2776,2775,2774,2773,2772,2771,2770,2769,2768,2767,2766,2765,2764,2763,2762,2704,2707,2708,2709,2710,2711,2712,2713,2714,2715,2716,2717,2718,2719,2720,2721,2722,2723,2724,2725,2726,2727,2728,2729,2730,2731,2732,2733,2737,2738,2739,2740,2741,2742,2746,2747,2748,2749,2750,2751,2752,2753,2754,2755,2756,2757,2758,2759,2760,2761
<2704=2705
<2705=2706
<2733=2734
<2734=2736,2735
<2742=2743
<2743=2745,2744
<2803=2804
<2804=2806,2805
<2806=2808,2807
<2835=2887,2886,2885,2884,2883,2882,2881,2880,2879,2878,2877,2876,2875,2874,2873,2872,2871,2870,2869,2868,2867,2866,2865,2864,2863,2862,2861,2860,2836
<2836=2839,2837
<2837=2838
<2839=2840
<2840=2859,2841
<2841=2857,2842
<2842=2855,2849,2843
<2843=2844
<2844=2846,2845
<2846=2848,2847
<2849=2850
<2850=2852,2851
<2852=2854,2853
<2855=2856
<2857=2858
<2897=2898
<2898=2900,2899
<2900=2902,2901
<2904=2947,2906,2905
<2906=2926,2907
<2907=2908
<2908=2924,2909
<2909=2922,2914,2910
<2910=2911
<2911=2913,2912
<2914=2915
<2915=2919,2916
<2916=2918,2917
<2919=2921,2920
<2922=2923
<2924=2925
<2926=2927
<2927=2946,2928
<2928=2944,2929
<2929=2942,2938,2930
<2930=2931
<2931=2935,2932
<2932=2934,2933
<2935=2937,2936
<2938=2939
<2939=2941,2940
<2942=2943
<2944=2945
<2947=2948
<2960=2961
<2961=2983,2962
<2962=2981,2979,2973,2967,2965,2963
<2963=2964
<2965=2966
<2967=2968
<2968=2972,2969
<2969=2971,2970
<2973=2974
<2974=2978,2975
<2975=2977,2976
<2979=2980
<2981=2982
<2983=2984
<2985=2986
<2986=3008,2987
<2987=3006,3004,2998,2992,2990,2988
<2988=2989
<2990=2991
<2992=2993
<2993=2997,2994
<2994=2996,2995
<2998=2999
<2999=3003,3000
<3000=3002,3001
<3004=3005
<3006=3007
<3008=3009
<3010=3011
<3011=3033,3012
<3012=3031,3029,3023,3017,3015,3013
<3013=3014
<3015=3016
<3017=3018
<3018=3022,3019
<3019=3021,3020
<3023=3024
<3024=3028,3025
<3025=3027,3026
<3029=3030
<3031=3032
<3033=3034
<3035=3036
<3036=3040,3037
<3037=3039,3038
<3040=3042,3041
<3044=3088,3067,3045
<3045=3046
<3046=3057,3047
<3047=3048
<3048=3056,3049
<3049=3053,3050
<3050=3052,3051
<3053=3055,3054
<3057=3058
<3058=3066,3059
<3059=3063,3060
<3060=3062,3061
<3063=3065,3064
<3067=3078,3068
<3068=3069
<3069=3077,3070
<3070=3074,3071
<3071=3073,3072
<3074=3076,3075
<3078=3079
<3079=3087,3080
<3080=3084,3081
<3081=3083,3082
<3084=3086,3085
<3088=3089
<3089=3091,3090
<3091=3093,3092
<3094=3138,3117,3095
<3095=3096
<3096=3107,3097
<3097=3098
<3098=3106,3099
<3099=3103,3100
<3100=3102,3101
<3103=3105,3104
<3107=3108
<3108=3116,3109
<3109=3113,3110
<3110=3112,3111
<3113=3115,3114
<3117=3128,3118
<3118=3119
<3119=3127,3120
<3120=3124,3121
<3121=3123,3122
<3124=3126,3125
<3128=3129
<3129=3137,3130
<3130=3134,3131
<3131=3133,3132
<3134=3136,3135
<3138=3139
<3139=3141,3140
<3141=3143,3142
<3144=3147,3145
<3145=3146
<3147=3148
<3148=3150,3149
<3150=3152,3151
<3153=3154
<3155=3156
<3156=3158,3157
<3159=3160
<3160=3162,3161
<3162=3164,3163
<3166=3167
<3167=3169,3168
<3170=3171
<3171=3173,3172
<3174=3175
<3175=3177,3176
<3178=3179
<3179=3181,3180
<3182=3183
<3183=3185,3184
<3186=3187
<3187=3189,3188
<3190=3191
<3191=3193,3192
<3219=3225,3224,3220
<3220=3221
<3221=3223,3222
<3225=3570,3566,3562,3558,3554,3550,3380,3372,3371,3370,3369,3368,3367,3366,3365,3364,3363,3361,3350,3349,3348,3347,3346,3345,3344,3343,3342,3341,3340,3339,3338,3337,3336,3335,3334,3333,3332,3331,3330,3329,3328,3327,3326,3325,3324,3323,3322,3321,3320,3319,3318,3317,3316,3315,3314,3313,3312,3311,3310,3309,3308,3307,3305,3304,3303,3302,3301,3300,3299,3298,3226,3228,3234,3235,3245,3246,3250,3251,3252,3253,3254,3255,3256,3257,3258,3259,3260,3261,3262,3266,3267,3268,3269,3270,3271,3272,3273,3274,3275,3276,3277,3278,3280,3281,3282,3283,3284,3285,3286,3287,3288,3289,3290,3291,3292,3293,3294,3295,3296,3297
<3226=3227
<3228=3229
<3229=3231,3230
<3231=3233,3232
<3235=3236
<3236=3242,3237
<3237=3239,3238
<3239=3241,3240
<3242=3244,3243
<3246=3247
<3247=3249,3248
<3262=3263
<3263=3265,3264
<3278=3279
<3305=3306
<3350=3353,3351
<3351=3352
<3353=3354
<3354=3360,3355
<3355=3357,3356
<3357=3359,3358
<3361=3362
<3372=3373
<3373=3379,3374
<3374=3376,3375
<3376=3378,3377
<3380=3546,3381
<3381=3538,3527,3520,3519,3518,3517,3516,3515,3514,3513,3512,3511,3510,3509,3508,3506,3505,3504,3503,3502,3501,3500,3499,3498,3497,3496,3495,3494,3493,3492,3445,3398,3397,3396,3395,3394,3393,3392,3391,3390,3389,3388,3387,3386,3384,3382
<3382=3383
<3384=3385
<3398=3433,3399
<3399=3432,3431,3430,3429,3428,3427,3426,3425,3424,3423,3422,3421,3420,3419,3418,3417,3416,3415,3414,3413,3412,3411,3410,3409,3408,3407,3406,3400
<3400=3401
<3401=3403,3402
<3403=3405,3404
<3433=3434
<3434=3440,3435
<3435=3437,3436
<3437=3439,3438
<3440=3442,3441
<3442=3444,3443
<3445=3480,3446
<3446=3479,3478,3477,3476,3475,3474,3473,3472,3471,3470,3469,3468,3467,3466,3465,3464,3463,3462,3461,3460,3459,3458,3457,3456,3455,3454,3453,3447
<3447=3448
<3448=3450,3449
<3450=3452,3451
<3480=3481
<3481=3487,3482
<3482=3484,3483
<3484=3486,3485
<3487=3489,3488
<3489=3491,3490
<3506=3507
<3520=3521
<3521=3525,3522
<3522=3523
<3523=3524
<3525=3526
<3527=3530,3528
<3528=3529
<3530=3531
<3531=3537,3532
<3532=3534,3533
<3534=3536,3535
<3538=3539
<3539=3545,3540
<3540=3542,3541
<3542=3544,3543
<3546=3547
<3547=3549,3548
<3550=3551
<3551=3553,3552
<3554=3555
<3555=3557,3556
<3558=3559
<3559=3561,3560
<3562=3563
<3563=3565,3564
<3566=3567
<3567=3569,3568
<3570=3571
<3571=3573,3572
<3612=3618,3617,3613
<3613=3614
<3614=3616,3615
<3618=4372,4368,4364,4360,4356,4352,4348,4344,4340,4336,3998,3990,3989,3988,3987,3986,3985,3984,3983,3982,3981,3979,3968,3967,3966,3965,3964,3963,3962,3961,3960,3959,3958,3957,3956,3955,3954,3953,3952,3951,3950,3949,3948,3947,3946,3945,3944,3943,3942,3941,3940,3939,3938,3937,3936,3935,3934,3933,3932,3931,3930,3929,3928,3927,3926,3925,3923,3922,3921,3920,3919,3918,3917,3916,3915,3914,3913,3912,3911,3910,3909,3908,3907,3906,3905,3904,3903,3902,3901,3900,3899,3898,3896,3895,3894,3893,3892,3891,3890,3889,3888,3887,3886,3885,3884,3883,3882,3881,3880,3879,3878,3877,3876,3875,3874,3873,3872,3871,3870,3869,3868,3867,3866,3865,3864,3863,3862,3861,3860,3859,3858,3857,3856,3855,3854,3853,3852,3851,3850,3849,3848,3847,3846,3845,3844,3843,3842,3841,3840,3839,3838,3837,3836,3835,3834,3833,3832,3831,3830,3829,3828,3827,3826,3825,3824,3823,3822,3821,3820,3819,3818,3817,3816,3815,3814,3813,3812,3811,3619,3621,3622,3623,3624,3625,3626,3627,3628,3629,3630,3631,3632,3633,3634,3635,3636,3637,3638,3639,3640,3641,3642,3643,3644,3645,3646,3647,3648,3649,3650,3651,3652,3653,3654,3655,3656,3657,3658,3659,3660,3661,3685,3723,3727,3728,3729,3730,3731,3732
<3619=3620
<3661=3675,3664,3662
<3662=3663
<3664=3665
<3665=3673,3666
<3666=3671,3669,3667
<3667=3668
<3669=3670
<3671=3672
<3673=3674
<3675=3676
<3676=3678,3677
<3678=3680,3679
<3680=3682,3681
<3682=3684,3683
<3685=3721,3686
<3686=3720,3719,3718,3717,3716,3715,3714,3713,3712,3711,3710,3709,3708,3707,3706,3705,3704,3703,3702,3701,3700,3699,3698,3687
<3687=3697,3696,3695,3694,3693,3692,3691,3690,3689,3688
<3721=3722
<3723=3724
<3724=3726,3725
<3732=3795,3733
<3733=3786,3734
<3734=3784,3735
<3735=3783,3782,3781,3780,3779,3775,3736
<3736=3773,3737
<3737=3764,3738
<3738=3742,3739
<3739=3740
<3740=3741
<3742=3743
<3743=3761,3744
<3744=3758,3745
<3745=3757,3746
<3746=3748,3747
<3748=3749
<3749=3751,3750
<3751=3753,3752
<3753=3754
<3754=3756,3755
<3758=3760,3759
<3761=3763,3762
<3764=3765
<3765=3772,3771,3766
<3766=3770,3767
<3767=3769,3768
<3773=3774
<3775=3776
<3776=3778,3777
<3784=3785
<3786=3787
<3787=3794,3793,3788
<3788=3792,3789
<3789=3791,3790
<3795=3796
<3796=3810,3797
<3797=3799,3798
<3799=3801,3800
<3801=3802
<3802=3804,3803
<3804=3806,3805
<3806=3807
<3807=3809,3808
<3896=3897
<3923=3924
<3968=3971,3969
<3969=3970
<3971=3972
<3972=3978,3973
<3973=3975,3974
<3975=3977,3976
<3979=3980
<3990=3991
<3991=3997,3992
<3992=3994,3993
<3994=3996,3995
<3998=4332,3999
<3999=4324,4318,4317,4316,4315,4314,4313,4312,4311,4310,4309,4298,4291,4290,4289,4288,4287,4286,4285,4284,4283,4282,4281,4280,4279,4278,4277,4235,4193,4191,4189,4188,4187,4186,4185,4184,4183,4182,4181,4180,4179,4178,4177,4176,4175,4174,4173,4172,4171,4170,4169,4168,4167,4166,4165,4164,4163,4162,4161,4160,4159,4158,4157,4156,4155,4154,4153,4152,4151,4150,4149,4148,4147,4146,4145,4144,4143,4142,4141,4140,4139,4138,4137,4136,4135,4134,4133,4132,4131,4000,4002,4013,4051,4055,4056,4057,4058,4059,4060,4091,4092,4093,4094,4095,4096,4097,4098,4099,4100,4101,4102,4103,4104,4105,4106,4107,4108,4109,4110,4111,4112,4113,4114,4115,4116,4117,4118,4119,4120,4121,4122,4123,4124,4125,4126,4127,4128,4129,4130
<4000=4001
<4002=4003
<4003=4011,4004
<4004=4009,4007,4005
<4005=4006
<4007=4008
<4009=4010
<4011=4012
<4013=4049,4014
<4014=4048,4047,4046,4045,4044,4043,4042,4041,4040,4039,4038,4037,4036,4035,4034,4033,4032,4031,4030,4029,4028,4027,4026,4015
<4015=4025,4024,4023,4022,4021,4020,4019,4018,4017,4016
<4049=4050
<4051=4052
<4052=4054,4053
<4060=4080,4079,4078,4077,4076,4075,4074,4073,4072,4071,4070,4069,4068,4067,4066,4065,4064,4063,4061
<4061=4062
<4080=4083,4081
<4081=4082
<4083=4084
<4084=4090,4085
<4085=4087,4086
<4087=4089,4088
<4189=4190
<4191=4192
<4193=4223,4194
<4194=4222,4221,4220,4219,4218,4217,4216,4215,4214,4213,4212,4211,4210,4209,4208,4207,4206,4205,4204,4203,4202,4201,4200,4199,4198,4197,4195
<4195=4196
<4223=4224
<4224=4230,4225
<4225=4227,4226
<4227=4229,4228
<4230=4232,4231
<4232=4234,4233
<4235=4265,4236
<4236=4264,4263,4262,4261,4260,4259,4258,4257,4256,4255,4254,4253,4252,4251,4250,4249,4248,4247,4246,4245,4244,4243,4242,4241,4240,4239,4237
<4237=4238
<4265=4266
<4266=4272,4267
<4267=4269,4268
<4269=4271,4270
<4272=4274,4273
<4274=4276,4275
<4291=4292
<4292=4296,4293
<4293=4294
<4294=4295
<4296=4297
<4298=4301,4299
<4299=4300
<4301=4302
<4302=4308,4303
<4303=4305,4304
<4305=4307,4306
<4318=4320,4319
<4320=4321
<4321=4323,4322
<4324=4325
<4325=4331,4326
<4326=4328,4327
<4328=4330,4329
<4332=4333
<4333=4335,4334
<4336=4337
<4337=4339,4338
<4340=4341
<4341=4343,4342
<4344=4345
<4345=4347,4346
<4348=4349
<4349=4351,4350
<4352=4353
<4353=4355,4354
<4356=4357
<4357=4359,4358
<4360=4361
<4361=4363,4362
<4364=4365
<4365=4367,4366
<4368=4369
<4369=4371,4370
<4372=4373
<4373=4375,4374
<4432=4444,4443,4433
<4433=4440,4437,4434
<4434=4436,4435
<4437=4439,4438
<4440=4442,4441
<4444=4583,4579,4575,4574,4568,4554,4540,4539,4521,4520,4510,4509,4497,4496,4490,4489,4483,4460,4459,4458,4457,4456,4455,4454,4453,4452,4451,4447,4445
<4445=4446
<4447=4448
<4448=4450,4449
<4460=4461
<4461=4481,4462
<4462=4477,4473,4471,4469,4465,4463
<4463=4464
<4465=4466
<4466=4468,4467
<4469=4470
<4471=4472
<4473=4474
<4474=4476,4475
<4477=4478
<4478=4480,4479
<4481=4482
<4483=4484
<4484=4486,4485
<4486=4488,4487
<4490=4491
<4491=4493,4492
<4493=4495,4494
<4497=4498
<4498=4506,4499
<4499=4503,4500
<4500=4502,4501
<4503=4505,4504
<4506=4508,4507
<4510=4511
<4511=4517,4512
<4512=4516,4513
<4513=4515,4514
<4517=4519,4518
<4521=4522
<4522=4536,4523
<4523=4533,4524
<4524=4528,4525
<4525=4527,4526
<4528=4530,4529
<4530=4532,4531
<4533=4535,4534
<4536=4538,4537
<4540=4541
<4541=4553,4542
<4542=4550,4543
<4543=4547,4544
<4544=4546,4545
<4547=4549,4548
<4550=4552,4551
<4554=4555
<4555=4567,4556
<4556=4564,4557
<4557=4561,4558
<4558=4560,4559
<4561=4563,4562
<4564=4566,4565
<4568=4569
<4569=4571,4570
<4571=4573,4572
<4575=4576
<4576=4578,4577
<4579=4580
<4580=4582,4581
<4583=4584
<4584=4586,4585
<4620=4638,4637,4621
<4621=4634,4631,4628,4625,4622
<4622=4624,4623
<4625=4627,4626
<4628=4630,4629
<4631=4633,4632
<4634=4636,4635
<4638=4745,4741,4737,4736,4730,4729,4723,4709,4695,4694,4676,4675,4669,4668,4662,4639
<4639=4640
<4640=4660,4641
<4641=4656,4652,4650,4648,4644,4642
<4642=4643
<4644=4645
<4645=4647,4646
<4648=4649
<4650=4651
<4652=4653
<4653=4655,4654
<4656=4657
<4657=4659,4658
<4660=4661
<4662=4663
<4663=4665,4664
<4665=4667,4666
<4669=4670
<4670=4672,4671
<4672=4674,4673
<4676=4677
<4677=4691,4678
<4678=4688,4679
<4679=4683,4680
<4680=4682,4681
<4683=4685,4684
<4685=4687,4686
<4688=4690,4689
<4691=4693,4692
<4695=4696
<4696=4708,4697
<4697=4705,4698
<4698=4702,4699
<4699=4701,4700
<4702=4704,4703
<4705=4707,4706
<4709=4710
<4710=4722,4711
<4711=4719,4712
<4712=4716,4713
<4713=4715,4714
<4716=4718,4717
<4719=4721,4720
<4723=4724
<4724=4726,4725
<4726=4728,4727
<4730=4731
<4731=4733,4732
<4733=4735,4734
<4737=4738
<4738=4740,4739
<4741=4742
<4742=4744,4743
<4745=4746
<4746=4748,4747
<4782=4788,4787,4783
<4783=4784
<4784=4786,4785
<4788=4889,4842,4838,4837,4836,4835,4834,4833,4832,4831,4830,4829,4828,4827,4826,4825,4824,4823,4822,4821,4820,4819,4818,4817,4816,4815,4814,4813,4812,4811,4807,4806,4805,4804,4803,4802,4801,4800,4799,4798,4797,4796,4795,4794,4793,4792,4791,4789
<4789=4790
<4807=4808
<4808=4810,4809
<4838=4839
<4839=4841,4840
<4842=4879,4843
<4843=4868,4867,4866,4865,4864,4863,4862,4861,4860,4859,4846,4844
<4844=4845
<4846=4858,4857,4856,4855,4854,4853,4852,4851,4850,4849,4847
<4847=4848
<4868=4869
<4869=4877,4870
<4870=4871
<4871=4872
<4872=4874,4873
<4874=4876,4875
<4877=4878
<4879=4880
<4880=4888,4881
<4881=4883,4882
<4883=4885,4884
<4885=4887,4886
<4889=4890
<4890=4892,4891
<4907=4913,4912,4908
<4908=4909
<4909=4911,4910
<4913=5006,5002,4998,4994,4990,4989,4981,4971,4963,4955,4943,4931,4914
<4914=4915
<4915=4929,4916
<4916=4927,4925,4923,4921,4919,4917
<4917=4918
<4919=4920
<4921=4922
<4923=4924
<4925=4926
<4927=4928
<4929=4930
<4931=4932
<4932=4942,4933
<4933=4941,4934
<4934=4938,4935
<4935=4937,4936
<4938=4940,4939
<4943=4944
<4944=4954,4945
<4945=4953,4946
<4946=4950,4947
<4947=4949,4948
<4950=4952,4951
<4955=4956
<4956=4962,4957
<4957=4959,4958
<4959=4961,4960
<4963=4964
<4964=4970,4965
<4965=4967,4966
<4967=4969,4968
<4971=4972
<4972=4980,4973
<4973=4975,4974
<4975=4977,4976
<4977=4979,4978
<4981=4982
<4982=4986,4983
<4983=4985,4984
<4986=4988,4987
<4990=4991
<4991=4993,4992
<4994=4995
<4995=4997,4996
<4998=4999
<4999=5001,5000
<5002=5003
<5003=5005,5004
<5006=5007
<5007=5009,5008
<5039=5045,5044,5040
<5040=5041
<5041=5043,5042
<5045=5189,5185,5181,5170,5155,5154,5153,5152,5151,5150,5149,5148,5147,5146,5046,5048,5071,5072,5073,5074,5075,5076,5077,5078,5079,5080,5081,5082,5083,5085,5086,5087,5088,5089,5090,5091,5092,5093,5094,5103,5113,5123,5124,5125,5126,5127,5128,5129,5130,5131,5132,5133,5134,5135,5136,5137,5138,5139,5140,5141,5142,5143,5144,5145
<5046=5047
<5048=5070,5069,5068,5067,5066,5065,5064,5063,5062,5061,5060,5059,5058,5057,5056,5055,5054,5053,5052,5051,5050,5049
<5083=5084
<5094=5099,5095
<5095=5096
<5096=5098,5097
<5099=5100
<5100=5102,5101
<5103=5104
<5104=5112,5105
<5105=5107,5106
<5107=5111,5108
<5108=5110,5109
<5113=5114
<5114=5122,5115
<5115=5118,5117,5116
<5118=5119
<5119=5121,5120
<5155=5158,5156
<5156=5157
<5158=5159
<5159=5165,5160
<5160=5162,5161
<5162=5164,5163
<5165=5167,5166
<5167=5169,5168
<5170=5173,5171
<5171=5172
<5173=5174
<5174=5180,5175
<5175=5177,5176
<5177=5179,5178
<5181=5182
<5182=5184,5183
<5185=5186
<5186=5188,5187
<5189=5190
<5190=5192,5191
<5209=5221,5220,5210
<5210=5217,5214,5211
<5211=5213,5212
<5214=5216,5215
<5217=5219,5218
<5221=5378,5374,5370,5366,5362,5358,5354,5346,5345,5344,5343,5342,5341,5340,5339,5338,5337,5336,5335,5334,5333,5332,5331,5329,5328,5327,5326,5325,5324,5222,5257,5263,5264,5270,5271,5277,5278,5280,5281,5282,5283,5284,5285,5286,5287,5288,5289,5290,5291,5292,5293,5294,5295,5297,5298,5299,5300,5301,5302,5303,5304,5305,5306,5307,5308,5309,5310,5311,5312,5314,5315,5316,5317,5318,5319,5320,5321,5322,5323
<5222=5253,5249,5246,5223
<5223=5242,5238,5235,5224
<5224=5225
<5225=5233,5226
<5226=5231,5229,5227
<5227=5228
<5229=5230
<5231=5232
<5233=5234
<5235=5237,5236
<5238=5239
<5239=5241,5240
<5242=5243
<5243=5245,5244
<5246=5248,5247
<5249=5250
<5250=5252,5251
<5253=5254
<5254=5256,5255
<5257=5258
<5258=5260,5259
<5260=5262,5261
<5264=5265
<5265=5267,5266
<5267=5269,5268
<5271=5272
<5272=5274,5273
<5274=5276,5275
<5278=5279
<5295=5296
<5312=5313
<5329=5330
<5346=5347
<5347=5353,5348
<5348=5350,5349
<5350=5352,5351
<5354=5355
<5355=5357,5356
<5358=5359
<5359=5361,5360
<5362=5363
<5363=5365,5364
<5366=5367
<5367=5369,5368
<5370=5371
<5371=5373,5372
<5374=5375
<5375=5377,5376
<5378=5379
<5379=5381,5380
<5403=5409,5408,5404
<5404=5405
<5405=5407,5406
<5409=5586,5575,5538,5521,5509,5508,5502,5501,5500,5499,5498,5497,5496,5495,5494,5493,5492,5491,5490,5489,5488,5487,5486,5485,5412,5410
<5410=5411
<5412=5472,5445,5429,5413
<5413=5414
<5414=5426,5415
<5415=5417,5416
<5417=5422,5418
<5418=5420,5419
<5420=5421
<5422=5424,5423
<5424=5425
<5426=5428,5427
<5429=5430
<5430=5442,5431
<5431=5433,5432
<5433=5438,5434
<5434=5436,5435
<5436=5437
<5438=5440,5439
<5440=5441
<5442=5444,5443
<5445=5446
<5446=5471,5447
<5447=5469,5448
<5448=5465,5461,5451,5449
<5449=5450
<5451=5452
<5452=5458,5453
<5453=5455,5454
<5455=5457,5456
<5458=5460,5459
<5461=5462
<5462=5464,5463
<5465=5466
<5466=5468,5467
<5469=5470
<5472=5473
<5473=5483,5474
<5474=5481,5479,5477,5475
<5475=5476
<5477=5478
<5479=5480
<5481=5482
<5483=5484
<5502=5503
<5503=5505,5504
<5505=5507,5506
<5509=5513,5510
<5510=5511
<5511=5512
<5513=5514
<5514=5520,5515
<5515=5517,5516
<5517=5519,5518
<5521=5532,5522
<5522=5525,5523
<5523=5524
<5525=5526
<5526=5530,5527
<5527=5528
<5528=5529
<5530=5531
<5532=5533
<5533=5535,5534
<5535=5537,5536
<5538=5569,5539
<5539=5560,5554,5548,5542,5540
<5540=5541
<5542=5543
<5543=5545,5544
<5545=5547,5546
<5548=5549
<5549=5551,5550
<5551=5553,5552
<5554=5555
<5555=5557,5556
<5557=5559,5558
<5560=5561
<5561=5567,5562
<5562=5565,5563
<5563=5564
<5565=5566
<5567=5568
<5569=5570
<5570=5572,5571
<5572=5574,5573
<5575=5579,5576
<5576=5577
<5577=5578
<5579=5580
<5580=5584,5581
<5581=5582
<5582=5583
<5584=5585
<5586=5587
<5587=5589,5588
<5619=5628,5627,5620
<5620=5624,5621
<5621=5623,5622
<5624=5626,5625
<5628=5704,5700,5699,5693,5692,5686,5635,5634,5633,5629
<5629=5630
<5630=5632,5631
<5635=5678,5670,5667,5636
<5636=5659,5651,5648,5637
<5637=5638
<5638=5646,5639
<5639=5644,5642,5640
<5640=5641
<5642=5643
<5644=5645
<5646=5647
<5648=5650,5649
<5651=5652
<5652=5658,5653
<5653=5655,5654
<5655=5657,5656
<5659=5660
<5660=5666,5661
<5661=5663,5662
<5663=5665,5664
<5667=5669,5668
<5670=5671
<5671=5677,5672
<5672=5674,5673
<5674=5676,5675
<5678=5679
<5679=5685,5680
<5680=5682,5681
<5682=5684,5683
<5686=5687
<5687=5689,5688
<5689=5691,5690
<5693=5694
<5694=5696,5695
<5696=5698,5697
<5700=5701
<5701=5703,5702
<5704=5705
<5705=5707,5706
