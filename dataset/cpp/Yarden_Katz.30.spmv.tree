>3	FunctionDef	main (int argc , char * argv [ ])
>4	ParameterList	int argc , char * argv [ ]
>5	Parameter	 
>6	Identifier	argv
>7	ParameterType	char * [ ]
>8	Parameter	 
>9	Identifier	argc
>10	ParameterType	int
>11	ReturnType	int
>12	CompoundStatement	 
>13	ReturnStatement	 
>14	PrimaryExpression	0
>15	WhileStatement	while ( nnzPerCol >= 4 )
>16	CompoundStatement	 
>17	ExpressionStatement	 
>18	AssignmentExpr	nnzPerCol -= nnzPerCol / 2
>19	MultiplicativeExpression	nnzPerCol / 2
>20	PrimaryExpression	2
>21	Identifier	nnzPerCol
>22	Identifier	nnzPerCol
>23	IfStatement	if ( nnzPerCol == 1 )
>24	BreakStatement	 
>25	Condition	 
>26	EqualityExpression	nnzPerCol == 1
>27	PrimaryExpression	1
>28	Identifier	nnzPerCol
>29	ExpressionStatement	 
>30	ShiftExpression	std 
>31	PrimaryExpression	\"\n\"
>32	Identifier	std 
>33	CompoundStatement	 
>34	ExpressionStatement	 
>35	ShiftExpression	std 
>36	ShiftExpression	t . value ( ) / repeats << endl
>37	Identifier	endl
>38	MultiplicativeExpression	t . value ( ) / repeats
>39	Identifier	repeats
>40	CallExpression	t . value ( )
>41	ArgumentList	 
>42	Callee	t . value
>43	MemberAccess	t . value
>44	Identifier	value
>45	Identifier	t
>46	Identifier	std 
>47	ExpressionStatement	 
>48	CallExpression	SPMV_BENCH ( mres = trans ( mm ) * mv )
>49	ArgumentList	mres = trans ( mm ) * mv
>50	Argument	mres = trans ( mm ) * mv
>51	AssignmentExpr	mres = trans ( mm ) * mv
>52	MultiplicativeExpression	trans ( mm ) * mv
>53	Identifier	mv
>54	CallExpression	trans ( mm )
>55	ArgumentList	mm
>56	Argument	mm
>57	Identifier	mm
>58	Callee	trans
>59	Identifier	trans
>60	Identifier	mres
>61	Callee	SPMV_BENCH
>62	Identifier	SPMV_BENCH
>63	ExpressionStatement	 
>64	ShiftExpression	std 
>65	ShiftExpression	\"MTL4        \" << t . value ( ) / repeats << \"\t\"
>66	ShiftExpression	t . value ( ) / repeats << \"\t\"
>67	PrimaryExpression	\"\t\"
>68	MultiplicativeExpression	t . value ( ) / repeats
>69	Identifier	repeats
>70	CallExpression	t . value ( )
>71	ArgumentList	 
>72	Callee	t . value
>73	MemberAccess	t . value
>74	Identifier	value
>75	Identifier	t
>76	PrimaryExpression	\"MTL4        \"
>77	Identifier	std 
>78	ExpressionStatement	 
>79	CallExpression	SPMV_BENCH ( mres = mm * mv )
>80	ArgumentList	mres = mm * mv
>81	Argument	mres = mm * mv
>82	AssignmentExpr	mres = mm * mv
>83	MultiplicativeExpression	mm * mv
>84	Identifier	mv
>85	Identifier	mm
>86	Identifier	mres
>87	Callee	SPMV_BENCH
>88	Identifier	SPMV_BENCH
>89	IdentifierDeclStatement	 
>90	IdentifierDecl	mres ( rows , 1.0 )
>91	Expression	rows , 1.0
>92	PrimaryExpression	1.0
>93	Identifier	rows
>94	Identifier	mres
>95	IdentifierDeclType	mtl 
>96	IdentifierDeclStatement	 
>97	IdentifierDecl	mv ( cols , 1.0 )
>98	Expression	cols , 1.0
>99	PrimaryExpression	1.0
>100	Identifier	cols
>101	Identifier	mv
>102	IdentifierDeclType	mtl 
>103	ExpressionStatement	 
>104	CallExpression	eiToMtl ( sm , mm )
>105	ArgumentList	sm
>106	Argument	mm
>107	Identifier	mm
>108	Argument	sm
>109	Identifier	sm
>110	Callee	eiToMtl
>111	Identifier	eiToMtl
>112	IdentifierDeclStatement	 
>113	IdentifierDecl	mm ( rows , cols )
>114	Expression	rows , cols
>115	Identifier	cols
>116	Identifier	rows
>117	Identifier	mm
>118	IdentifierDeclType	MtlSparse
>119	CompoundStatement	 
>120	ExpressionStatement	 
>121	ShiftExpression	std 
>122	ShiftExpression	t . value ( ) / repeats << endl
>123	Identifier	endl
>124	MultiplicativeExpression	t . value ( ) / repeats
>125	Identifier	repeats
>126	CallExpression	t . value ( )
>127	ArgumentList	 
>128	Callee	t . value
>129	MemberAccess	t . value
>130	Identifier	value
>131	Identifier	t
>132	Identifier	std 
>133	ExpressionStatement	 
>134	CallExpression	SPMV_BENCH ( gmm 
>135	ArgumentList	gmm 
>136	Argument	gmm 
>137	CallExpression	gmm 
>138	ArgumentList	gmm 
>139	Argument	gres
>140	Identifier	gres
>141	Argument	gv
>142	Identifier	gv
>143	Argument	gmm 
>144	CallExpression	gmm 
>145	ArgumentList	gm
>146	Argument	gm
>147	Identifier	gm
>148	Callee	gmm 
>149	Identifier	gmm 
>150	Callee	gmm 
>151	Identifier	gmm 
>152	Callee	SPMV_BENCH
>153	Identifier	SPMV_BENCH
>154	ExpressionStatement	 
>155	ShiftExpression	std 
>156	ShiftExpression	\"GMM++       \" << t . value ( ) / repeats << \"\t\"
>157	ShiftExpression	t . value ( ) / repeats << \"\t\"
>158	PrimaryExpression	\"\t\"
>159	MultiplicativeExpression	t . value ( ) / repeats
>160	Identifier	repeats
>161	CallExpression	t . value ( )
>162	ArgumentList	 
>163	Callee	t . value
>164	MemberAccess	t . value
>165	Identifier	value
>166	Identifier	t
>167	PrimaryExpression	\"GMM++       \"
>168	Identifier	std 
>169	ExpressionStatement	 
>170	CallExpression	SPMV_BENCH ( gmm 
>171	ArgumentList	gmm 
>172	Argument	gmm 
>173	CallExpression	gmm 
>174	ArgumentList	gm
>175	Argument	gres
>176	Identifier	gres
>177	Argument	gv
>178	Identifier	gv
>179	Argument	gm
>180	Identifier	gm
>181	Callee	gmm 
>182	Identifier	gmm 
>183	Callee	SPMV_BENCH
>184	Identifier	SPMV_BENCH
>185	ExpressionStatement	 
>186	AssignmentExpr	( & gres [ 0 ] , rows ) = res
>187	Identifier	res
>188	Expression	& gres [ 0 ] , rows
>189	Identifier	rows
>190	UnaryOp	& gres [ 0 ]
>191	ArrayIndexing	gres [ 0 ]
>192	PrimaryExpression	0
>193	Identifier	gres
>194	UnaryOperator	&
>195	Statement	 
>196	Statement	 
>197	Statement	 
>198	Statement	 
>199	Statement	 
>200	Statement	 
>201	Statement	 
>202	Statement	 
>203	Statement	 
>204	Statement	 
>205	Statement	 
>206	ExpressionStatement	 
>207	AssignmentExpr	( & gv [ 0 ] , cols ) = dv
>208	Identifier	dv
>209	Expression	& gv [ 0 ] , cols
>210	Identifier	cols
>211	UnaryOp	& gv [ 0 ]
>212	ArrayIndexing	gv [ 0 ]
>213	PrimaryExpression	0
>214	Identifier	gv
>215	UnaryOperator	&
>216	Statement	 
>217	Statement	 
>218	Statement	 
>219	Statement	 
>220	Statement	 
>221	Statement	 
>222	Statement	 
>223	Statement	 
>224	Statement	 
>225	Statement	 
>226	Statement	 
>227	IdentifierDeclStatement	 
>228	IdentifierDecl	gres ( rows )
>229	Identifier	rows
>230	Identifier	gres
>231	IdentifierDeclType	std 
>232	IdentifierDecl	gv ( cols )
>233	Identifier	cols
>234	Identifier	gv
>235	IdentifierDeclType	std 
>236	ExpressionStatement	 
>237	CallExpression	eiToGmm ( sm , gm )
>238	ArgumentList	sm
>239	Argument	gm
>240	Identifier	gm
>241	Argument	sm
>242	Identifier	sm
>243	Callee	eiToGmm
>244	Identifier	eiToGmm
>245	IdentifierDeclStatement	 
>246	IdentifierDecl	gm ( rows , cols )
>247	Expression	rows , cols
>248	Identifier	cols
>249	Identifier	rows
>250	Identifier	gm
>251	IdentifierDeclType	GmmSparse
>252	CompoundStatement	 
>253	ExpressionStatement	 
>254	ShiftExpression	std 
>255	ShiftExpression	t . value ( ) / repeats << endl
>256	Identifier	endl
>257	MultiplicativeExpression	t . value ( ) / repeats
>258	Identifier	repeats
>259	CallExpression	t . value ( )
>260	ArgumentList	 
>261	Callee	t . value
>262	MemberAccess	t . value
>263	Identifier	value
>264	Identifier	t
>265	Identifier	std 
>266	ExpressionStatement	 
>267	CallExpression	SPMV_BENCH ( ublas 
>268	ArgumentList	ublas 
>269	Argument	ublas 
>270	CallExpression	ublas 
>271	ArgumentList	boost 
>272	Argument	true
>273	Identifier	true
>274	Argument	ures
>275	Identifier	ures
>276	Argument	uv
>277	Identifier	uv
>278	Argument	boost 
>279	CallExpression	boost 
>280	ArgumentList	um
>281	Argument	um
>282	Identifier	um
>283	Callee	boost 
>284	Identifier	boost 
>285	Callee	ublas 
>286	Identifier	ublas 
>287	Callee	SPMV_BENCH
>288	Identifier	SPMV_BENCH
>289	ExpressionStatement	 
>290	ShiftExpression	std 
>291	ShiftExpression	\"ublas       \" << t . value ( ) / repeats << \"\t\"
>292	ShiftExpression	t . value ( ) / repeats << \"\t\"
>293	PrimaryExpression	\"\t\"
>294	MultiplicativeExpression	t . value ( ) / repeats
>295	Identifier	repeats
>296	CallExpression	t . value ( )
>297	ArgumentList	 
>298	Callee	t . value
>299	MemberAccess	t . value
>300	Identifier	value
>301	Identifier	t
>302	PrimaryExpression	\"ublas       \"
>303	Identifier	std 
>304	ExpressionStatement	 
>305	CallExpression	SPMV_BENCH ( ublas 
>306	ArgumentList	ublas 
>307	Argument	ublas 
>308	CallExpression	ublas 
>309	ArgumentList	um
>310	Argument	true
>311	Identifier	true
>312	Argument	ures
>313	Identifier	ures
>314	Argument	uv
>315	Identifier	uv
>316	Argument	um
>317	Identifier	um
>318	Callee	ublas 
>319	Identifier	ublas 
>320	Callee	SPMV_BENCH
>321	Identifier	SPMV_BENCH
>322	ExpressionStatement	 
>323	AssignmentExpr	( & ures [ 0 ] , rows ) = res
>324	Identifier	res
>325	Expression	& ures [ 0 ] , rows
>326	Identifier	rows
>327	UnaryOp	& ures [ 0 ]
>328	ArrayIndexing	ures [ 0 ]
>329	PrimaryExpression	0
>330	Identifier	ures
>331	UnaryOperator	&
>332	Statement	 
>333	Statement	 
>334	Statement	 
>335	Statement	 
>336	Statement	 
>337	Statement	 
>338	Statement	 
>339	Statement	 
>340	Statement	 
>341	Statement	 
>342	Statement	 
>343	ExpressionStatement	 
>344	AssignmentExpr	( & uv [ 0 ] , cols ) = dv
>345	Identifier	dv
>346	Expression	& uv [ 0 ] , cols
>347	Identifier	cols
>348	UnaryOp	& uv [ 0 ]
>349	ArrayIndexing	uv [ 0 ]
>350	PrimaryExpression	0
>351	Identifier	uv
>352	UnaryOperator	&
>353	Statement	 
>354	Statement	 
>355	Statement	 
>356	Statement	 
>357	Statement	 
>358	Statement	 
>359	Statement	 
>360	Statement	 
>361	Statement	 
>362	Statement	 
>363	Statement	 
>364	IdentifierDeclStatement	 
>365	IdentifierDecl	ures ( rows )
>366	Identifier	rows
>367	Identifier	ures
>368	IdentifierDeclType	boost 
>369	IdentifierDecl	uv ( cols )
>370	Identifier	cols
>371	Identifier	uv
>372	IdentifierDeclType	boost 
>373	ExpressionStatement	 
>374	CallExpression	eiToUblas ( sm , um )
>375	ArgumentList	sm
>376	Argument	um
>377	Identifier	um
>378	Argument	sm
>379	Identifier	sm
>380	Callee	eiToUblas
>381	Identifier	eiToUblas
>382	IdentifierDeclStatement	 
>383	IdentifierDecl	um ( rows , cols )
>384	Expression	rows , cols
>385	Identifier	cols
>386	Identifier	rows
>387	Identifier	um
>388	IdentifierDeclType	UblasMatrix
>389	ExpressionStatement	 
>390	Identifier	boost 
>391	Statement	 
>392	Statement	 
>393	CompoundStatement	 
>394	ExpressionStatement	 
>395	CallExpression	oski_Close ( )
>396	ArgumentList	 
>397	Callee	oski_Close
>398	Identifier	oski_Close
>399	ExpressionStatement	 
>400	CallExpression	oski_DestroyVecView ( ores )
>401	ArgumentList	ores
>402	Argument	ores
>403	Identifier	ores
>404	Callee	oski_DestroyVecView
>405	Identifier	oski_DestroyVecView
>406	ExpressionStatement	 
>407	CallExpression	oski_DestroyVecView ( ov )
>408	ArgumentList	ov
>409	Argument	ov
>410	Identifier	ov
>411	Callee	oski_DestroyVecView
>412	Identifier	oski_DestroyVecView
>413	ExpressionStatement	 
>414	CallExpression	oski_DestroyMat ( om )
>415	ArgumentList	om
>416	Argument	om
>417	Identifier	om
>418	Callee	oski_DestroyMat
>419	Identifier	oski_DestroyMat
>420	ExpressionStatement	 
>421	ShiftExpression	std 
>422	ShiftExpression	t . value ( ) / repeats << \"\t(\" << tuning << \")\n\"
>423	ShiftExpression	\"\t(\" << tuning << \")\n\"
>424	ShiftExpression	tuning << \")\n\"
>425	PrimaryExpression	\")\n\"
>426	Identifier	tuning
>427	PrimaryExpression	\"\t(\"
>428	MultiplicativeExpression	t . value ( ) / repeats
>429	Identifier	repeats
>430	CallExpression	t . value ( )
>431	ArgumentList	 
>432	Callee	t . value
>433	MemberAccess	t . value
>434	Identifier	value
>435	Identifier	t
>436	Identifier	std 
>437	ExpressionStatement	 
>438	CallExpression	SPMV_BENCH ( oski_MatMult ( om , OP_TRANS , 1 , ov , 0 , ores ) )
>439	ArgumentList	oski_MatMult ( om , OP_TRANS , 1 , ov , 0 , ores )
>440	Argument	oski_MatMult ( om , OP_TRANS , 1 , ov , 0 , ores )
>441	CallExpression	oski_MatMult ( om , OP_TRANS , 1 , ov , 0 , ores )
>442	ArgumentList	om
>443	Argument	ores
>444	Identifier	ores
>445	Argument	0
>446	PrimaryExpression	0
>447	Argument	ov
>448	Identifier	ov
>449	Argument	1
>450	PrimaryExpression	1
>451	Argument	OP_TRANS
>452	Identifier	OP_TRANS
>453	Argument	om
>454	Identifier	om
>455	Callee	oski_MatMult
>456	Identifier	oski_MatMult
>457	Callee	SPMV_BENCH
>458	Identifier	SPMV_BENCH
>459	ExpressionStatement	 
>460	ShiftExpression	std 
>461	ShiftExpression	\"OSKI tuned  \" << t . value ( ) / repeats << \"\t\"
>462	ShiftExpression	t . value ( ) / repeats << \"\t\"
>463	PrimaryExpression	\"\t\"
>464	MultiplicativeExpression	t . value ( ) / repeats
>465	Identifier	repeats
>466	CallExpression	t . value ( )
>467	ArgumentList	 
>468	Callee	t . value
>469	MemberAccess	t . value
>470	Identifier	value
>471	Identifier	t
>472	PrimaryExpression	\"OSKI tuned  \"
>473	Identifier	std 
>474	ExpressionStatement	 
>475	CallExpression	SPMV_BENCH ( oski_MatMult ( om , OP_NORMAL , 1 , ov , 0 , ores ) )
>476	ArgumentList	oski_MatMult ( om , OP_NORMAL , 1 , ov , 0 , ores )
>477	Argument	oski_MatMult ( om , OP_NORMAL , 1 , ov , 0 , ores )
>478	CallExpression	oski_MatMult ( om , OP_NORMAL , 1 , ov , 0 , ores )
>479	ArgumentList	om
>480	Argument	ores
>481	Identifier	ores
>482	Argument	0
>483	PrimaryExpression	0
>484	Argument	ov
>485	Identifier	ov
>486	Argument	1
>487	PrimaryExpression	1
>488	Argument	OP_NORMAL
>489	Identifier	OP_NORMAL
>490	Argument	om
>491	Identifier	om
>492	Callee	oski_MatMult
>493	Identifier	oski_MatMult
>494	Callee	SPMV_BENCH
>495	Identifier	SPMV_BENCH
>496	IdentifierDeclStatement	 
>497	IdentifierDecl	tuning = t . value ( )
>498	AssignmentExpr	tuning = t . value ( )
>499	CallExpression	t . value ( )
>500	ArgumentList	 
>501	Callee	t . value
>502	MemberAccess	t . value
>503	Identifier	value
>504	Identifier	t
>505	Identifier	tuning
>506	Identifier	tuning
>507	IdentifierDeclType	double
>508	ExpressionStatement	 
>509	CallExpression	t . stop ( )
>510	ArgumentList	 
>511	Callee	t . stop
>512	MemberAccess	t . stop
>513	Identifier	stop
>514	Identifier	t
>515	ExpressionStatement	 
>516	CallExpression	oski_TuneMat ( om )
>517	ArgumentList	om
>518	Argument	om
>519	Identifier	om
>520	Callee	oski_TuneMat
>521	Identifier	oski_TuneMat
>522	ExpressionStatement	 
>523	CallExpression	oski_SetHintMatMult ( om , OP_NORMAL , 1.0 , SYMBOLIC_VEC , 0.0 , SYMBOLIC_VEC , ALWAYS_TUNE_AGGRESSIVELY )
>524	ArgumentList	om
>525	Argument	ALWAYS_TUNE_AGGRESSIVELY
>526	Identifier	ALWAYS_TUNE_AGGRESSIVELY
>527	Argument	SYMBOLIC_VEC
>528	Identifier	SYMBOLIC_VEC
>529	Argument	0.0
>530	PrimaryExpression	0.0
>531	Argument	SYMBOLIC_VEC
>532	Identifier	SYMBOLIC_VEC
>533	Argument	1.0
>534	PrimaryExpression	1.0
>535	Argument	OP_NORMAL
>536	Identifier	OP_NORMAL
>537	Argument	om
>538	Identifier	om
>539	Callee	oski_SetHintMatMult
>540	Identifier	oski_SetHintMatMult
>541	ExpressionStatement	 
>542	CallExpression	t . start ( )
>543	ArgumentList	 
>544	Callee	t . start
>545	MemberAccess	t . start
>546	Identifier	start
>547	Identifier	t
>548	ExpressionStatement	 
>549	CallExpression	t . reset ( )
>550	ArgumentList	 
>551	Callee	t . reset
>552	MemberAccess	t . reset
>553	Identifier	reset
>554	Identifier	t
>555	ExpressionStatement	 
>556	ShiftExpression	std 
>557	ShiftExpression	t . value ( ) / repeats << \"\n\"
>558	PrimaryExpression	\"\n\"
>559	MultiplicativeExpression	t . value ( ) / repeats
>560	Identifier	repeats
>561	CallExpression	t . value ( )
>562	ArgumentList	 
>563	Callee	t . value
>564	MemberAccess	t . value
>565	Identifier	value
>566	Identifier	t
>567	Identifier	std 
>568	ExpressionStatement	 
>569	CallExpression	SPMV_BENCH ( oski_MatMult ( om , OP_TRANS , 1 , ov , 0 , ores ) )
>570	ArgumentList	oski_MatMult ( om , OP_TRANS , 1 , ov , 0 , ores )
>571	Argument	oski_MatMult ( om , OP_TRANS , 1 , ov , 0 , ores )
>572	CallExpression	oski_MatMult ( om , OP_TRANS , 1 , ov , 0 , ores )
>573	ArgumentList	om
>574	Argument	ores
>575	Identifier	ores
>576	Argument	0
>577	PrimaryExpression	0
>578	Argument	ov
>579	Identifier	ov
>580	Argument	1
>581	PrimaryExpression	1
>582	Argument	OP_TRANS
>583	Identifier	OP_TRANS
>584	Argument	om
>585	Identifier	om
>586	Callee	oski_MatMult
>587	Identifier	oski_MatMult
>588	Callee	SPMV_BENCH
>589	Identifier	SPMV_BENCH
>590	ExpressionStatement	 
>591	ShiftExpression	std 
>592	ShiftExpression	\"OSKI        \" << t . value ( ) / repeats << \"\t\"
>593	ShiftExpression	t . value ( ) / repeats << \"\t\"
>594	PrimaryExpression	\"\t\"
>595	MultiplicativeExpression	t . value ( ) / repeats
>596	Identifier	repeats
>597	CallExpression	t . value ( )
>598	ArgumentList	 
>599	Callee	t . value
>600	MemberAccess	t . value
>601	Identifier	value
>602	Identifier	t
>603	PrimaryExpression	\"OSKI        \"
>604	Identifier	std 
>605	ExpressionStatement	 
>606	CallExpression	SPMV_BENCH ( oski_MatMult ( om , OP_NORMAL , 1 , ov , 0 , ores ) )
>607	ArgumentList	oski_MatMult ( om , OP_NORMAL , 1 , ov , 0 , ores )
>608	Argument	oski_MatMult ( om , OP_NORMAL , 1 , ov , 0 , ores )
>609	CallExpression	oski_MatMult ( om , OP_NORMAL , 1 , ov , 0 , ores )
>610	ArgumentList	om
>611	Argument	ores
>612	Identifier	ores
>613	Argument	0
>614	PrimaryExpression	0
>615	Argument	ov
>616	Identifier	ov
>617	Argument	1
>618	PrimaryExpression	1
>619	Argument	OP_NORMAL
>620	Identifier	OP_NORMAL
>621	Argument	om
>622	Identifier	om
>623	Callee	oski_MatMult
>624	Identifier	oski_MatMult
>625	Callee	SPMV_BENCH
>626	Identifier	SPMV_BENCH
>627	ExpressionStatement	 
>628	AssignmentExpr	ores = oski_CreateVecView ( res . data ( ) , rows , STRIDE_UNIT )
>629	CallExpression	oski_CreateVecView ( res . data ( ) , rows , STRIDE_UNIT )
>630	ArgumentList	res . data ( )
>631	Argument	STRIDE_UNIT
>632	Identifier	STRIDE_UNIT
>633	Argument	rows
>634	Identifier	rows
>635	Argument	res . data ( )
>636	CallExpression	res . data ( )
>637	ArgumentList	 
>638	Callee	res . data
>639	MemberAccess	res . data
>640	Identifier	data
>641	Identifier	res
>642	Callee	oski_CreateVecView
>643	Identifier	oski_CreateVecView
>644	Identifier	ores
>645	ExpressionStatement	 
>646	AssignmentExpr	ov = oski_CreateVecView ( dv . data ( ) , cols , STRIDE_UNIT )
>647	CallExpression	oski_CreateVecView ( dv . data ( ) , cols , STRIDE_UNIT )
>648	ArgumentList	dv . data ( )
>649	Argument	STRIDE_UNIT
>650	Identifier	STRIDE_UNIT
>651	Argument	cols
>652	Identifier	cols
>653	Argument	dv . data ( )
>654	CallExpression	dv . data ( )
>655	ArgumentList	 
>656	Callee	dv . data
>657	MemberAccess	dv . data
>658	Identifier	data
>659	Identifier	dv
>660	Callee	oski_CreateVecView
>661	Identifier	oski_CreateVecView
>662	Identifier	ov
>663	ExpressionStatement	 
>664	AssignmentExpr	om = oski_CreateMatCSC ( sm . _outerIndexPtr ( ) , sm . _innerIndexPtr ( ) , sm . _valuePtr ( ) , rows , \
>665	CallExpression	oski_CreateMatCSC ( sm . _outerIndexPtr ( ) , sm . _innerIndexPtr ( ) , sm . _valuePtr ( ) , rows , cols , SHARE_\
>666	ArgumentList	sm . _outerIndexPtr ( )
>667	Argument	INDEX_ZERO_BASED
>668	Identifier	INDEX_ZERO_BASED
>669	Argument	1
>670	PrimaryExpression	1
>671	Argument	SHARE_INPUTMAT
>672	Identifier	SHARE_INPUTMAT
>673	Argument	cols
>674	Identifier	cols
>675	Argument	rows
>676	Identifier	rows
>677	Argument	sm . _valuePtr ( )
>678	CallExpression	sm . _valuePtr ( )
>679	ArgumentList	 
>680	Callee	sm . _valuePtr
>681	MemberAccess	sm . _valuePtr
>682	Identifier	_valuePtr
>683	Identifier	sm
>684	Argument	sm . _innerIndexPtr ( )
>685	CallExpression	sm . _innerIndexPtr ( )
>686	ArgumentList	 
>687	Callee	sm . _innerIndexPtr
>688	MemberAccess	sm . _innerIndexPtr
>689	Identifier	_innerIndexPtr
>690	Identifier	sm
>691	Argument	sm . _outerIndexPtr ( )
>692	CallExpression	sm . _outerIndexPtr ( )
>693	ArgumentList	 
>694	Callee	sm . _outerIndexPtr
>695	MemberAccess	sm . _outerIndexPtr
>696	Identifier	_outerIndexPtr
>697	Identifier	sm
>698	Callee	oski_CreateMatCSC
>699	Identifier	oski_CreateMatCSC
>700	Identifier	om
>701	ExpressionStatement	 
>702	CallExpression	oski_Init ( )
>703	ArgumentList	 
>704	Callee	oski_Init
>705	Identifier	oski_Init
>706	IdentifierDeclStatement	 
>707	IdentifierDecl	ores
>708	Identifier	ores
>709	IdentifierDeclType	oski_vecview_t
>710	IdentifierDecl	ov
>711	Identifier	ov
>712	IdentifierDeclType	oski_vecview_t
>713	IdentifierDeclStatement	 
>714	IdentifierDecl	om
>715	Identifier	om
>716	IdentifierDeclType	oski_matrix_t
>717	CompoundStatement	 
>718	ExpressionStatement	 
>719	CallExpression	eiToCSparse ( sm , csm )
>720	ArgumentList	sm
>721	Argument	csm
>722	Identifier	csm
>723	Argument	sm
>724	Identifier	sm
>725	Callee	eiToCSparse
>726	Identifier	eiToCSparse
>727	IdentifierDeclStatement	 
>728	IdentifierDecl	* csm
>729	Identifier	csm
>730	IdentifierDeclType	cs *
>731	ExpressionStatement	 
>732	ShiftExpression	std 
>733	PrimaryExpression	\"CSparse \n\"
>734	Identifier	std 
>735	CompoundStatement	 
>736	ExpressionStatement	 
>737	ShiftExpression	std 
>738	ShiftExpression	t . value ( ) / repeats << endl
>739	Identifier	endl
>740	MultiplicativeExpression	t . value ( ) / repeats
>741	Identifier	repeats
>742	CallExpression	t . value ( )
>743	ArgumentList	 
>744	Callee	t . value
>745	MemberAccess	t . value
>746	Identifier	value
>747	Identifier	t
>748	Identifier	std 
>749	Statement	 
>750	ExpressionStatement	 
>751	AssignmentExpr	res . noalias ( ) += sm . transpose ( ) * dv
>752	MultiplicativeExpression	sm . transpose ( ) * dv
>753	Identifier	dv
>754	CallExpression	sm . transpose ( )
>755	ArgumentList	 
>756	Callee	sm . transpose
>757	MemberAccess	sm . transpose
>758	Identifier	transpose
>759	Identifier	sm
>760	CallExpression	res . noalias ( )
>761	ArgumentList	 
>762	Callee	res . noalias
>763	MemberAccess	res . noalias
>764	Identifier	noalias
>765	Identifier	res
>766	Statement	 
>767	Statement	 
>768	ExpressionStatement	 
>769	ShiftExpression	std 
>770	ShiftExpression	\"Eigen       \" << t . value ( ) / repeats << \"\t\"
>771	ShiftExpression	t . value ( ) / repeats << \"\t\"
>772	PrimaryExpression	\"\t\"
>773	MultiplicativeExpression	t . value ( ) / repeats
>774	Identifier	repeats
>775	CallExpression	t . value ( )
>776	ArgumentList	 
>777	Callee	t . value
>778	MemberAccess	t . value
>779	Identifier	value
>780	Identifier	t
>781	PrimaryExpression	\"Eigen       \"
>782	Identifier	std 
>783	Statement	 
>784	ExpressionStatement	 
>785	AssignmentExpr	res . noalias ( ) += sm * dv
>786	MultiplicativeExpression	sm * dv
>787	Identifier	dv
>788	Identifier	sm
>789	CallExpression	res . noalias ( )
>790	ArgumentList	 
>791	Callee	res . noalias
>792	MemberAccess	res . noalias
>793	Identifier	noalias
>794	Identifier	res
>795	Statement	 
>796	Statement	 
>797	CompoundStatement	 
>798	ExpressionStatement	 
>799	ShiftExpression	std 
>800	ShiftExpression	t . value ( ) / repeats << endl
>801	Identifier	endl
>802	MultiplicativeExpression	t . value ( ) / repeats
>803	Identifier	repeats
>804	CallExpression	t . value ( )
>805	ArgumentList	 
>806	Callee	t . value
>807	MemberAccess	t . value
>808	Identifier	value
>809	Identifier	t
>810	Identifier	std 
>811	ExpressionStatement	 
>812	CallExpression	SPMV_BENCH ( res = dm . transpose ( ) * sm )
>813	ArgumentList	res = dm . transpose ( ) * sm
>814	Argument	res = dm . transpose ( ) * sm
>815	AssignmentExpr	res = dm . transpose ( ) * sm
>816	MultiplicativeExpression	dm . transpose ( ) * sm
>817	Identifier	sm
>818	CallExpression	dm . transpose ( )
>819	ArgumentList	 
>820	Callee	dm . transpose
>821	MemberAccess	dm . transpose
>822	Identifier	transpose
>823	Identifier	dm
>824	Identifier	res
>825	Callee	SPMV_BENCH
>826	Identifier	SPMV_BENCH
>827	ExpressionStatement	 
>828	ShiftExpression	std 
>829	ShiftExpression	\"Dense       \" << t . value ( ) / repeats << \"\t\"
>830	ShiftExpression	t . value ( ) / repeats << \"\t\"
>831	PrimaryExpression	\"\t\"
>832	MultiplicativeExpression	t . value ( ) / repeats
>833	Identifier	repeats
>834	CallExpression	t . value ( )
>835	ArgumentList	 
>836	Callee	t . value
>837	MemberAccess	t . value
>838	Identifier	value
>839	Identifier	t
>840	PrimaryExpression	\"Dense       \"
>841	Identifier	std 
>842	ExpressionStatement	 
>843	CallExpression	SPMV_BENCH ( res = dm * sm )
>844	ArgumentList	res = dm * sm
>845	Argument	res = dm * sm
>846	AssignmentExpr	res = dm * sm
>847	MultiplicativeExpression	dm * sm
>848	Identifier	sm
>849	Identifier	dm
>850	Identifier	res
>851	Callee	SPMV_BENCH
>852	Identifier	SPMV_BENCH
>853	ExpressionStatement	 
>854	CallExpression	eiToDense ( sm , dm )
>855	ArgumentList	sm
>856	Argument	dm
>857	Identifier	dm
>858	Argument	sm
>859	Identifier	sm
>860	Callee	eiToDense
>861	Identifier	eiToDense
>862	ExpressionStatement	 
>863	Expression	dm ( rows , cols ) , ( rows , cols )
>864	Expression	rows , cols
>865	Identifier	cols
>866	Identifier	rows
>867	CallExpression	dm ( rows , cols )
>868	ArgumentList	rows
>869	Argument	cols
>870	Identifier	cols
>871	Argument	rows
>872	Identifier	rows
>873	Callee	dm
>874	Identifier	dm
>875	Statement	 
>876	ExpressionStatement	 
>877	CallExpression	fillMatrix2 ( nnzPerCol , rows , cols , sm )
>878	ArgumentList	nnzPerCol
>879	Argument	sm
>880	Identifier	sm
>881	Argument	cols
>882	Identifier	cols
>883	Argument	rows
>884	Identifier	rows
>885	Argument	nnzPerCol
>886	Identifier	nnzPerCol
>887	Callee	fillMatrix2
>888	Identifier	fillMatrix2
>889	ExpressionStatement	 
>890	CallExpression	sm . setZero ( )
>891	ArgumentList	 
>892	Callee	sm . setZero
>893	MemberAccess	sm . setZero
>894	Identifier	setZero
>895	Identifier	sm
>896	ExpressionStatement	 
>897	ShiftExpression	std 
>898	ShiftExpression	\"nnz
>899	ShiftExpression	nnzPerCol << \"\n\"
>900	PrimaryExpression	\"\n\"
>901	Identifier	nnzPerCol
>902	PrimaryExpression	\"nnz
>903	Identifier	std 
>904	Condition	 
>905	RelationalExpression	nnzPerCol >= 4
>906	PrimaryExpression	4
>907	Identifier	nnzPerCol
>908	IdentifierDeclStatement	 
>909	IdentifierDecl	t
>910	Identifier	t
>911	IdentifierDeclType	BenchTimer
>912	ExpressionStatement	 
>913	CallExpression	dv . setRandom ( )
>914	ArgumentList	 
>915	Callee	dv . setRandom
>916	MemberAccess	dv . setRandom
>917	Identifier	setRandom
>918	Identifier	dv
>919	IdentifierDeclStatement	 
>920	IdentifierDecl	res ( rows )
>921	Identifier	rows
>922	Identifier	res
>923	IdentifierDeclType	DenseVector
>924	IdentifierDecl	dv ( cols )
>925	Identifier	cols
>926	Identifier	dv
>927	IdentifierDeclType	DenseVector
>928	IdentifierDeclStatement	 
>929	IdentifierDecl	sm ( rows , cols )
>930	Expression	rows , cols
>931	Identifier	cols
>932	Identifier	rows
>933	Identifier	sm
>934	IdentifierDeclType	EigenSparseMatrix
>935	ExpressionStatement	 
>936	ShiftExpression	std 
>937	ShiftExpression	\"SpMV \" << rows << \" x \" << cols << \" with \" << nnzPerCol << \" non zeros per column. (\" << repeats << \" \
>938	ShiftExpression	rows << \" x \" << cols << \" with \" << nnzPerCol << \" non zeros per column. (\" << repeats << \" repeats, \
>939	ShiftExpression	\" x \" << cols << \" with \" << nnzPerCol << \" non zeros per column. (\" << repeats << \" repeats, and \" << \
>940	ShiftExpression	cols << \" with \" << nnzPerCol << \" non zeros per column. (\" << repeats << \" repeats, and \" << tries << \" \
>941	ShiftExpression	\" with \" << nnzPerCol << \" non zeros per column. (\" << repeats << \" repeats, and \" << tries << \" tries)\n\n\"\
>942	ShiftExpression	nnzPerCol << \" non zeros per column. (\" << repeats << \" repeats, and \" << tries << \" tries)\n\n\"
>943	ShiftExpression	\" non zeros per column. (\" << repeats << \" repeats, and \" << tries << \" tries)\n\n\"
>944	ShiftExpression	repeats << \" repeats, and \" << tries << \" tries)\n\n\"
>945	ShiftExpression	\" repeats, and \" << tries << \" tries)\n\n\"
>946	ShiftExpression	tries << \" tries)\n\n\"
>947	PrimaryExpression	\" tries)\n\n\"
>948	Identifier	tries
>949	PrimaryExpression	\" repeats, and \"
>950	Identifier	repeats
>951	PrimaryExpression	\" non zeros per column. (\"
>952	Identifier	nnzPerCol
>953	PrimaryExpression	\" with \"
>954	Identifier	cols
>955	PrimaryExpression	\" x \"
>956	Identifier	rows
>957	PrimaryExpression	\"SpMV \"
>958	Identifier	std 
>959	IfStatement	if ( need_help )
>960	CompoundStatement	 
>961	ReturnStatement	 
>962	PrimaryExpression	1
>963	ExpressionStatement	 
>964	ShiftExpression	std 
>965	ShiftExpression	argv [ 0 ] << \" r<nb rows> c<nb columns> n<non zeros per column> t<nb tries> p<nb repeats>\n\"
>966	PrimaryExpression	\" r<nb rows> c<nb columns> n<non zeros per column> t<nb tries> p<nb repeats>\n\"
>967	ArrayIndexing	argv [ 0 ]
>968	PrimaryExpression	0
>969	Identifier	argv
>970	Identifier	std 
>971	Condition	 
>972	Identifier	need_help
>973	ForStatement	for ( int i = 1 ; i < argc ; i ++ )
>974	CompoundStatement	 
>975	IfStatement	if ( argv [ i ] [ 0 ] == 'r' )
>976	ElseStatement	else
>977	IfStatement	if ( argv [ i ] [ 0 ] == 'c' )
>978	ElseStatement	else
>979	IfStatement	if ( argv [ i ] [ 0 ] == 'n' )
>980	ElseStatement	else
>981	IfStatement	if ( argv [ i ] [ 0 ] == 't' )
>982	ElseStatement	else
>983	IfStatement	if ( argv [ i ] [ 0 ] == 'p' )
>984	ElseStatement	else
>985	CompoundStatement	 
>986	ExpressionStatement	 
>987	AssignmentExpr	need_help = true
>988	Identifier	true
>989	Identifier	need_help
>990	CompoundStatement	 
>991	ExpressionStatement	 
>992	AssignmentExpr	repeats = atoi ( argv [ i ] + 1 )
>993	CallExpression	atoi ( argv [ i ] + 1 )
>994	ArgumentList	argv [ i ] + 1
>995	Argument	argv [ i ] + 1
>996	AdditiveExpression	argv [ i ] + 1
>997	PrimaryExpression	1
>998	ArrayIndexing	argv [ i ]
>999	Identifier	i
>1000	Identifier	argv
>1001	Callee	atoi
>1002	Identifier	atoi
>1003	Identifier	repeats
>1004	Condition	 
>1005	EqualityExpression	argv [ i ] [ 0 ] == 'p'
>1006	PrimaryExpression	'p'
>1007	ArrayIndexing	argv [ i ] [ 0 ]
>1008	PrimaryExpression	0
>1009	ArrayIndexing	argv [ i ]
>1010	Identifier	i
>1011	Identifier	argv
>1012	CompoundStatement	 
>1013	ExpressionStatement	 
>1014	AssignmentExpr	tries = atoi ( argv [ i ] + 1 )
>1015	CallExpression	atoi ( argv [ i ] + 1 )
>1016	ArgumentList	argv [ i ] + 1
>1017	Argument	argv [ i ] + 1
>1018	AdditiveExpression	argv [ i ] + 1
>1019	PrimaryExpression	1
>1020	ArrayIndexing	argv [ i ]
>1021	Identifier	i
>1022	Identifier	argv
>1023	Callee	atoi
>1024	Identifier	atoi
>1025	Identifier	tries
>1026	Condition	 
>1027	EqualityExpression	argv [ i ] [ 0 ] == 't'
>1028	PrimaryExpression	't'
>1029	ArrayIndexing	argv [ i ] [ 0 ]
>1030	PrimaryExpression	0
>1031	ArrayIndexing	argv [ i ]
>1032	Identifier	i
>1033	Identifier	argv
>1034	CompoundStatement	 
>1035	ExpressionStatement	 
>1036	AssignmentExpr	nnzPerCol = atoi ( argv [ i ] + 1 )
>1037	CallExpression	atoi ( argv [ i ] + 1 )
>1038	ArgumentList	argv [ i ] + 1
>1039	Argument	argv [ i ] + 1
>1040	AdditiveExpression	argv [ i ] + 1
>1041	PrimaryExpression	1
>1042	ArrayIndexing	argv [ i ]
>1043	Identifier	i
>1044	Identifier	argv
>1045	Callee	atoi
>1046	Identifier	atoi
>1047	Identifier	nnzPerCol
>1048	Condition	 
>1049	EqualityExpression	argv [ i ] [ 0 ] == 'n'
>1050	PrimaryExpression	'n'
>1051	ArrayIndexing	argv [ i ] [ 0 ]
>1052	PrimaryExpression	0
>1053	ArrayIndexing	argv [ i ]
>1054	Identifier	i
>1055	Identifier	argv
>1056	CompoundStatement	 
>1057	ExpressionStatement	 
>1058	AssignmentExpr	cols = atoi ( argv [ i ] + 1 )
>1059	CallExpression	atoi ( argv [ i ] + 1 )
>1060	ArgumentList	argv [ i ] + 1
>1061	Argument	argv [ i ] + 1
>1062	AdditiveExpression	argv [ i ] + 1
>1063	PrimaryExpression	1
>1064	ArrayIndexing	argv [ i ]
>1065	Identifier	i
>1066	Identifier	argv
>1067	Callee	atoi
>1068	Identifier	atoi
>1069	Identifier	cols
>1070	Condition	 
>1071	EqualityExpression	argv [ i ] [ 0 ] == 'c'
>1072	PrimaryExpression	'c'
>1073	ArrayIndexing	argv [ i ] [ 0 ]
>1074	PrimaryExpression	0
>1075	ArrayIndexing	argv [ i ]
>1076	Identifier	i
>1077	Identifier	argv
>1078	CompoundStatement	 
>1079	ExpressionStatement	 
>1080	AssignmentExpr	rows = atoi ( argv [ i ] + 1 )
>1081	CallExpression	atoi ( argv [ i ] + 1 )
>1082	ArgumentList	argv [ i ] + 1
>1083	Argument	argv [ i ] + 1
>1084	AdditiveExpression	argv [ i ] + 1
>1085	PrimaryExpression	1
>1086	ArrayIndexing	argv [ i ]
>1087	Identifier	i
>1088	Identifier	argv
>1089	Callee	atoi
>1090	Identifier	atoi
>1091	Identifier	rows
>1092	Condition	 
>1093	EqualityExpression	argv [ i ] [ 0 ] == 'r'
>1094	PrimaryExpression	'r'
>1095	ArrayIndexing	argv [ i ] [ 0 ]
>1096	PrimaryExpression	0
>1097	ArrayIndexing	argv [ i ]
>1098	Identifier	i
>1099	Identifier	argv
>1100	IncDecOp	 
>1101	IncDec	++
>1102	Identifier	i
>1103	Condition	 
>1104	RelationalExpression	i < argc
>1105	Identifier	argc
>1106	Identifier	i
>1107	ForInit	 
>1108	IdentifierDeclStatement	int i = 1 ;
>1109	IdentifierDecl	i = 1
>1110	AssignmentExpr	i = 1
>1111	PrimaryExpression	1
>1112	Identifier	i
>1113	Identifier	i
>1114	IdentifierDeclType	int
>1115	IdentifierDeclStatement	 
>1116	IdentifierDecl	need_help = false
>1117	AssignmentExpr	need_help = false
>1118	Identifier	false
>1119	Identifier	false
>1120	Identifier	need_help
>1121	IdentifierDeclType	bool
>1122	IdentifierDeclStatement	 
>1123	IdentifierDecl	repeats = 2
>1124	AssignmentExpr	repeats = 2
>1125	PrimaryExpression	2
>1126	Identifier	repeats
>1127	Identifier	repeats
>1128	IdentifierDeclType	int
>1129	IdentifierDeclStatement	 
>1130	IdentifierDecl	tries = 2
>1131	AssignmentExpr	tries = 2
>1132	PrimaryExpression	2
>1133	Identifier	tries
>1134	Identifier	tries
>1135	IdentifierDeclType	int
>1136	IdentifierDeclStatement	 
>1137	IdentifierDecl	nnzPerCol = 40
>1138	AssignmentExpr	nnzPerCol = 40
>1139	PrimaryExpression	40
>1140	Identifier	nnzPerCol
>1141	Identifier	nnzPerCol
>1142	IdentifierDeclType	int
>1143	IdentifierDeclStatement	 
>1144	IdentifierDecl	cols = size
>1145	AssignmentExpr	cols = size
>1146	Identifier	size
>1147	Identifier	size
>1148	Identifier	cols
>1149	IdentifierDeclType	int
>1150	IdentifierDeclStatement	 
>1151	IdentifierDecl	rows = size
>1152	AssignmentExpr	rows = size
>1153	Identifier	size
>1154	Identifier	size
>1155	Identifier	rows
>1156	IdentifierDeclType	int
>1157	IdentifierDeclStatement	 
>1158	IdentifierDecl	size = 10000
>1159	AssignmentExpr	size = 10000
>1160	PrimaryExpression	10000
>1161	Identifier	size
>1162	Identifier	size
>1163	IdentifierDeclType	int
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=1157,1150,1143,1136,1129,1122,1115,973,959,935,928,919,912,908,15,13
<13=14
<15=904,16
<16=896,889,876,797,735,717,393,252,119,33,29,23,17
<17=18
<18=22,19
<19=21,20
<23=25,24
<25=26
<26=28,27
<29=30
<30=32,31
<33=112,103,96,89,78,63,47,34
<34=35
<35=46,36
<36=38,37
<38=40,39
<40=42,41
<42=43
<43=45,44
<47=48
<48=61,49
<49=50
<50=51
<51=60,52
<52=54,53
<54=58,55
<55=56
<56=57
<58=59
<61=62
<63=64
<64=77,65
<65=76,66
<66=68,67
<68=70,69
<70=72,71
<72=73
<73=75,74
<78=79
<79=87,80
<80=81
<81=82
<82=86,83
<83=85,84
<87=88
<89=90
<90=95,94,91
<91=93,92
<96=97
<97=102,101,98
<98=100,99
<103=104
<104=110,105
<105=108,106
<106=107
<108=109
<110=111
<112=113
<113=118,117,114
<114=116,115
<119=245,236,227,226,225,224,223,222,221,220,219,218,217,216,206,205,204,203,202,201,200,199,198,197,196,195,185,169,154,133,120
<120=121
<121=132,122
<122=124,123
<124=126,125
<126=128,127
<128=129
<129=131,130
<133=134
<134=152,135
<135=136
<136=137
<137=150,138
<138=143,141,139
<139=140
<141=142
<143=144
<144=148,145
<145=146
<146=147
<148=149
<150=151
<152=153
<154=155
<155=168,156
<156=167,157
<157=159,158
<159=161,160
<161=163,162
<163=164
<164=166,165
<169=170
<170=183,171
<171=172
<172=173
<173=181,174
<174=179,177,175
<175=176
<177=178
<179=180
<181=182
<183=184
<185=186
<186=188,187
<188=190,189
<190=194,191
<191=193,192
<206=207
<207=209,208
<209=211,210
<211=215,212
<212=214,213
<227=232,228
<228=231,230,229
<232=235,234,233
<236=237
<237=243,238
<238=241,239
<239=240
<241=242
<243=244
<245=246
<246=251,250,247
<247=249,248
<252=392,391,389,382,373,364,363,362,361,360,359,358,357,356,355,354,353,343,342,341,340,339,338,337,336,335,334,333,332,322,304,289,266,253
<253=254
<254=265,255
<255=257,256
<257=259,258
<259=261,260
<261=262
<262=264,263
<266=267
<267=287,268
<268=269
<269=270
<270=285,271
<271=278,276,274,272
<272=273
<274=275
<276=277
<278=279
<279=283,280
<280=281
<281=282
<283=284
<285=286
<287=288
<289=290
<290=303,291
<291=302,292
<292=294,293
<294=296,295
<296=298,297
<298=299
<299=301,300
<304=305
<305=320,306
<306=307
<307=308
<308=318,309
<309=316,314,312,310
<310=311
<312=313
<314=315
<316=317
<318=319
<320=321
<322=323
<323=325,324
<325=327,326
<327=331,328
<328=330,329
<343=344
<344=346,345
<346=348,347
<348=352,349
<349=351,350
<364=369,365
<365=368,367,366
<369=372,371,370
<373=374
<374=380,375
<375=378,376
<376=377
<378=379
<380=381
<382=383
<383=388,387,384
<384=386,385
<389=390
<393=713,706,701,663,645,627,605,590,568,555,548,541,522,515,508,496,474,459,437,420,413,406,399,394
<394=395
<395=397,396
<397=398
<399=400
<400=404,401
<401=402
<402=403
<404=405
<406=407
<407=411,408
<408=409
<409=410
<411=412
<413=414
<414=418,415
<415=416
<416=417
<418=419
<420=421
<421=436,422
<422=428,423
<423=427,424
<424=426,425
<428=430,429
<430=432,431
<432=433
<433=435,434
<437=438
<438=457,439
<439=440
<440=441
<441=455,442
<442=453,451,449,447,445,443
<443=444
<445=446
<447=448
<449=450
<451=452
<453=454
<455=456
<457=458
<459=460
<460=473,461
<461=472,462
<462=464,463
<464=466,465
<466=468,467
<468=469
<469=471,470
<474=475
<475=494,476
<476=477
<477=478
<478=492,479
<479=490,488,486,484,482,480
<480=481
<482=483
<484=485
<486=487
<488=489
<490=491
<492=493
<494=495
<496=497
<497=507,506,498
<498=505,499
<499=501,500
<501=502
<502=504,503
<508=509
<509=511,510
<511=512
<512=514,513
<515=516
<516=520,517
<517=518
<518=519
<520=521
<522=523
<523=539,524
<524=537,535,533,531,529,527,525
<525=526
<527=528
<529=530
<531=532
<533=534
<535=536
<537=538
<539=540
<541=542
<542=544,543
<544=545
<545=547,546
<548=549
<549=551,550
<551=552
<552=554,553
<555=556
<556=567,557
<557=559,558
<559=561,560
<561=563,562
<563=564
<564=566,565
<568=569
<569=588,570
<570=571
<571=572
<572=586,573
<573=584,582,580,578,576,574
<574=575
<576=577
<578=579
<580=581
<582=583
<584=585
<586=587
<588=589
<590=591
<591=604,592
<592=603,593
<593=595,594
<595=597,596
<597=599,598
<599=600
<600=602,601
<605=606
<606=625,607
<607=608
<608=609
<609=623,610
<610=621,619,617,615,613,611
<611=612
<613=614
<615=616
<617=618
<619=620
<621=622
<623=624
<625=626
<627=628
<628=644,629
<629=642,630
<630=635,633,631
<631=632
<633=634
<635=636
<636=638,637
<638=639
<639=641,640
<642=643
<645=646
<646=662,647
<647=660,648
<648=653,651,649
<649=650
<651=652
<653=654
<654=656,655
<656=657
<657=659,658
<660=661
<663=664
<664=700,665
<665=698,666
<666=691,684,677,675,673,671,669,667
<667=668
<669=670
<671=672
<673=674
<675=676
<677=678
<678=680,679
<680=681
<681=683,682
<684=685
<685=687,686
<687=688
<688=690,689
<691=692
<692=694,693
<694=695
<695=697,696
<698=699
<701=702
<702=704,703
<704=705
<706=710,707
<707=709,708
<710=712,711
<713=714
<714=716,715
<717=731,727,718
<718=719
<719=725,720
<720=723,721
<721=722
<723=724
<725=726
<727=728
<728=730,729
<731=732
<732=734,733
<735=796,795,784,783,768,767,766,750,749,736
<736=737
<737=748,738
<738=740,739
<740=742,741
<742=744,743
<744=745
<745=747,746
<750=751
<751=760,752
<752=754,753
<754=756,755
<756=757
<757=759,758
<760=762,761
<762=763
<763=765,764
<768=769
<769=782,770
<770=781,771
<771=773,772
<773=775,774
<775=777,776
<777=778
<778=780,779
<784=785
<785=789,786
<786=788,787
<789=791,790
<791=792
<792=794,793
<797=875,862,853,842,827,811,798
<798=799
<799=810,800
<800=802,801
<802=804,803
<804=806,805
<806=807
<807=809,808
<811=812
<812=825,813
<813=814
<814=815
<815=824,816
<816=818,817
<818=820,819
<820=821
<821=823,822
<825=826
<827=828
<828=841,829
<829=840,830
<830=832,831
<832=834,833
<834=836,835
<836=837
<837=839,838
<842=843
<843=851,844
<844=845
<845=846
<846=850,847
<847=849,848
<851=852
<853=854
<854=860,855
<855=858,856
<856=857
<858=859
<860=861
<862=863
<863=867,864
<864=866,865
<867=873,868
<868=871,869
<869=870
<871=872
<873=874
<876=877
<877=887,878
<878=885,883,881,879
<879=880
<881=882
<883=884
<885=886
<887=888
<889=890
<890=892,891
<892=893
<893=895,894
<896=897
<897=903,898
<898=902,899
<899=901,900
<904=905
<905=907,906
<908=909
<909=911,910
<912=913
<913=915,914
<915=916
<916=918,917
<919=924,920
<920=923,922,921
<924=927,926,925
<928=929
<929=934,933,930
<930=932,931
<935=936
<936=958,937
<937=957,938
<938=956,939
<939=955,940
<940=954,941
<941=953,942
<942=952,943
<943=951,944
<944=950,945
<945=949,946
<946=948,947
<959=971,960
<960=963,961
<961=962
<963=964
<964=970,965
<965=967,966
<967=969,968
<971=972
<973=1107,1103,1100,974
<974=975
<975=1092,1078,976
<976=977
<977=1070,1056,978
<978=979
<979=1048,1034,980
<980=981
<981=1026,1012,982
<982=983
<983=1004,990,984
<984=985
<985=986
<986=987
<987=989,988
<990=991
<991=992
<992=1003,993
<993=1001,994
<994=995
<995=996
<996=998,997
<998=1000,999
<1001=1002
<1004=1005
<1005=1007,1006
<1007=1009,1008
<1009=1011,1010
<1012=1013
<1013=1014
<1014=1025,1015
<1015=1023,1016
<1016=1017
<1017=1018
<1018=1020,1019
<1020=1022,1021
<1023=1024
<1026=1027
<1027=1029,1028
<1029=1031,1030
<1031=1033,1032
<1034=1035
<1035=1036
<1036=1047,1037
<1037=1045,1038
<1038=1039
<1039=1040
<1040=1042,1041
<1042=1044,1043
<1045=1046
<1048=1049
<1049=1051,1050
<1051=1053,1052
<1053=1055,1054
<1056=1057
<1057=1058
<1058=1069,1059
<1059=1067,1060
<1060=1061
<1061=1062
<1062=1064,1063
<1064=1066,1065
<1067=1068
<1070=1071
<1071=1073,1072
<1073=1075,1074
<1075=1077,1076
<1078=1079
<1079=1080
<1080=1091,1081
<1081=1089,1082
<1082=1083
<1083=1084
<1084=1086,1085
<1086=1088,1087
<1089=1090
<1092=1093
<1093=1095,1094
<1095=1097,1096
<1097=1099,1098
<1100=1102,1101
<1103=1104
<1104=1106,1105
<1107=1108
<1108=1109
<1109=1114,1113,1110
<1110=1112,1111
<1115=1116
<1116=1121,1120,1117
<1117=1119,1118
<1122=1123
<1123=1128,1127,1124
<1124=1126,1125
<1129=1130
<1130=1135,1134,1131
<1131=1133,1132
<1136=1137
<1137=1142,1141,1138
<1138=1140,1139
<1143=1144
<1144=1149,1148,1145
<1145=1147,1146
<1150=1151
<1151=1156,1155,1152
<1152=1154,1153
<1157=1158
<1158=1163,1162,1159
<1159=1161,1160
