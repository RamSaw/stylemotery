>8	FunctionDef	~poi ()
>9	ParameterList	 
>10	CompoundStatement	 
>11	ExpressionStatement	 
>12	Identifier	s_po
>13	Statement	 
>20	FunctionDef	execute ()
>21	ParameterList	 
>22	ReturnType	tbb 
>23	CompoundStatement	 
>24	ReturnStatement	 
>25	Identifier	NULL
>26	ExpressionStatement	 
>27	CallExpression	m_schedulable -> scheduler ( ) . do_execute ( m_schedulable )
>28	ArgumentList	m_schedulable
>29	Argument	m_schedulable
>30	Identifier	m_schedulable
>31	Callee	m_schedulable -> scheduler ( ) . do_execute
>32	MemberAccess	m_schedulable -> scheduler ( ) . do_execute
>33	Identifier	do_execute
>34	CallExpression	m_schedulable -> scheduler ( )
>35	ArgumentList	 
>36	Callee	m_schedulable -> scheduler
>37	PtrMemberAccess	m_schedulable -> scheduler
>38	Identifier	scheduler
>39	Identifier	m_schedulable
>40	ExpressionStatement	 
>41	CallExpression	CNC_ASSERT ( m_schedulable )
>42	ArgumentList	m_schedulable
>43	Argument	m_schedulable
>44	Identifier	m_schedulable
>45	Callee	CNC_ASSERT
>46	Identifier	CNC_ASSERT
>54	FunctionDef	TaskWrapper (schedulable * s)
>55	ParameterList	schedulable * s
>56	Parameter	 
>57	Identifier	s
>58	ParameterType	schedulable *
>59	CompoundStatement	 
>66	FunctionDef	simplest_scheduler 
>67	ParameterList	context_base & context , int numThreads , int htstride
>68	Parameter	 
>69	Identifier	htstride
>70	ParameterType	int
>71	Parameter	 
>72	Identifier	numThreads
>73	ParameterType	int
>74	Parameter	 
>75	Identifier	context
>76	ParameterType	context_base &
>77	CompoundStatement	 
>78	ExpressionStatement	 
>79	CallExpression	m_rootTask -> set_ref_count ( 1 )
>80	ArgumentList	1
>81	Argument	1
>82	PrimaryExpression	1
>83	Callee	m_rootTask -> set_ref_count
>84	PtrMemberAccess	m_rootTask -> set_ref_count
>85	Identifier	set_ref_count
>86	Identifier	m_rootTask
>87	ExpressionStatement	 
>88	Identifier	tbb 
>89	Statement	 
>90	Statement	 
>91	Statement	 
>92	Statement	 
>93	Statement	 
>94	Statement	 
>95	Statement	 
>96	Statement	 
>97	Statement	 
>98	Statement	 
>99	Statement	 
>100	Statement	 
>101	Statement	 
>102	ExpressionStatement	 
>103	AssignmentExpr	m_status = COMPLETED
>104	Identifier	COMPLETED
>105	Identifier	m_status
>106	IfStatement	if ( htstride && s_have_pinning_observer . compare_and_swap ( true , false ) == false )
>107	CompoundStatement	 
>108	ExpressionStatement	 
>109	AssignmentExpr	s_po = new pinning_observer ( htstride )
>110	Identifier	htstride
>111	Identifier	s_po
>112	Condition	 
>113	AndExpression	htstride && s_have_pinning_observer . compare_and_swap ( true , false ) == false
>114	EqualityExpression	s_have_pinning_observer . compare_and_swap ( true , false ) == false
>115	Identifier	false
>116	CallExpression	s_have_pinning_observer . compare_and_swap ( true , false )
>117	ArgumentList	true
>118	Argument	false
>119	Identifier	false
>120	Argument	true
>121	Identifier	true
>122	Callee	s_have_pinning_observer . compare_and_swap
>123	MemberAccess	s_have_pinning_observer . compare_and_swap
>124	Identifier	compare_and_swap
>125	Identifier	s_have_pinning_observer
>126	Identifier	htstride
>141	FunctionDef	simplest_scheduler 
>142	ParameterList	 
>143	CompoundStatement	 
>144	ExpressionStatement	 
>145	CallExpression	m_rootTask -> destroy ( * m_rootTask )
>146	ArgumentList	* m_rootTask
>147	Argument	* m_rootTask
>148	UnaryOp	* m_rootTask
>149	Identifier	m_rootTask
>150	UnaryOperator	*
>151	Callee	m_rootTask -> destroy
>152	PtrMemberAccess	m_rootTask -> destroy
>153	Identifier	destroy
>154	Identifier	m_rootTask
>155	ExpressionStatement	 
>156	CallExpression	m_rootTask -> decrement_ref_count ( )
>157	ArgumentList	 
>158	Callee	m_rootTask -> decrement_ref_count
>159	PtrMemberAccess	m_rootTask -> decrement_ref_count
>160	Identifier	decrement_ref_count
>161	Identifier	m_rootTask
>167	FunctionDef	simplest_scheduler 
>168	ParameterList	schedulable * stepInstance
>169	Parameter	 
>170	Identifier	stepInstance
>171	ParameterType	schedulable *
>172	ReturnType	void
>173	CompoundStatement	 
>174	ExpressionStatement	 
>175	CallExpression	tbb 
>176	ArgumentList	* newTask
>177	Argument	* newTask
>178	UnaryOp	* newTask
>179	Identifier	newTask
>180	UnaryOperator	*
>181	Callee	tbb 
>182	Identifier	tbb 
>183	ExpressionStatement	 
>184	CallExpression	TaskWrapper ( stepInstance )
>185	ArgumentList	stepInstance
>186	Argument	stepInstance
>187	Identifier	stepInstance
>188	Callee	TaskWrapper
>189	Identifier	TaskWrapper
>190	Statement	 
>191	Statement	 
>192	Statement	 
>193	Statement	 
>194	Statement	 
>195	Statement	 
>196	Statement	 
>197	Statement	 
>198	Statement	 
>199	Statement	 
>200	Statement	 
>201	Statement	 
>202	Statement	 
>203	Statement	 
>204	Statement	 
>205	Statement	 
>206	ExpressionStatement	 
>207	CallExpression	m_status . compare_and_swap ( RUNNING , COMPLETED )
>208	ArgumentList	RUNNING
>209	Argument	COMPLETED
>210	Identifier	COMPLETED
>211	Argument	RUNNING
>212	Identifier	RUNNING
>213	Callee	m_status . compare_and_swap
>214	MemberAccess	m_status . compare_and_swap
>215	Identifier	compare_and_swap
>216	Identifier	m_status
<8=10,9
<10=13,11
<11=12
<20=23,22,21
<23=40,26,24
<24=25
<26=27
<27=31,28
<28=29
<29=30
<31=32
<32=34,33
<34=36,35
<36=37
<37=39,38
<40=41
<41=45,42
<42=43
<43=44
<45=46
<54=59,55
<55=56
<56=58,57
<66=77,67
<67=74,71,68
<68=70,69
<71=73,72
<74=76,75
<77=106,102,101,100,99,98,97,96,95,94,93,92,91,90,89,87,78
<78=79
<79=83,80
<80=81
<81=82
<83=84
<84=86,85
<87=88
<102=103
<103=105,104
<106=112,107
<107=108
<108=109
<109=111,110
<112=113
<113=126,114
<114=116,115
<116=122,117
<117=120,118
<118=119
<120=121
<122=123
<123=125,124
<141=143,142
<143=155,144
<144=145
<145=151,146
<146=147
<147=148
<148=150,149
<151=152
<152=154,153
<155=156
<156=158,157
<158=159
<159=161,160
<167=173,172,168
<168=169
<169=171,170
<173=206,205,204,203,202,201,200,199,198,197,196,195,194,193,192,191,190,183,174
<174=175
<175=181,176
<176=177
<177=178
<178=180,179
<181=182
<183=184
<184=188,185
<185=186
<186=187
<188=189
<206=207
<207=213,208
<208=211,209
<209=210
<211=212
<213=214
<214=216,215
