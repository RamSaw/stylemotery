>9	FunctionDef	distributable_context 
>10	ParameterList	const std 
>11	Parameter	 
>12	Identifier	name
>13	ParameterType	const std 
>14	CompoundStatement	 
>19	FunctionDef	distributable_context 
>20	ParameterList	 
>21	CompoundStatement	 
>22	ExpressionStatement	 
>23	Identifier	m_statistics
>24	Statement	 
>28	FunctionDef	distributable_context 
>29	ParameterList	 
>30	ReturnType	void
>31	CompoundStatement	 
>35	FunctionDef	distributable_context 
>36	ParameterList	 
>37	ReturnType	void
>38	CompoundStatement	 
>39	IfStatement	if ( ! distributor 
>40	ElseStatement	else
>41	ExpressionStatement	 
>42	AssignmentExpr	m_distributionReady = true
>43	Identifier	true
>44	Identifier	m_distributionReady
>45	CompoundStatement	 
>46	IfStatement	if ( distributor 
>47	ElseStatement	else
>48	CompoundStatement	 
>49	ExpressionStatement	 
>50	CallExpression	send_msg ( _ser , 0 )
>51	ArgumentList	_ser
>52	Argument	0
>53	PrimaryExpression	0
>54	Argument	_ser
>55	Identifier	_ser
>56	Callee	send_msg
>57	Identifier	send_msg
>58	ExpressionStatement	 
>59	BitAndExpression	( * _ser ) & READY
>60	Identifier	READY
>61	UnaryOp	* _ser
>62	Identifier	_ser
>63	UnaryOperator	*
>64	IdentifierDeclStatement	 
>65	IdentifierDecl	* _ser = new_serializer ( this )
>66	AssignmentExpr	* _ser = new_serializer ( this )
>67	CallExpression	new_serializer ( this )
>68	ArgumentList	this
>69	Argument	this
>70	Identifier	this
>71	Callee	new_serializer
>72	Identifier	new_serializer
>73	Identifier	_ser
>74	Identifier	_ser
>75	IdentifierDeclType	serializer *
>76	ExpressionStatement	 
>77	AssignmentExpr	m_distributionReady = true
>78	Identifier	true
>79	Identifier	m_distributionReady
>80	CompoundStatement	 
>81	ExpressionStatement	 
>82	AssignmentExpr	m_distributionReady = true
>83	Identifier	true
>84	Identifier	m_distributionReady
>85	ForStatement	for ( int i = 1 ; i < n ; ++ i )
>86	ExpressionStatement	 
>87	CallExpression	m_barrier . pop ( _tmp )
>88	ArgumentList	_tmp
>89	Argument	_tmp
>90	Identifier	_tmp
>91	Callee	m_barrier . pop
>92	MemberAccess	m_barrier . pop
>93	Identifier	pop
>94	Identifier	m_barrier
>95	UnaryExpression	 
>96	Identifier	i
>97	IncDec	++
>98	Condition	 
>99	RelationalExpression	i < n
>100	Identifier	n
>101	Identifier	i
>102	ForInit	 
>103	IdentifierDeclStatement	int i = 1 ;
>104	IdentifierDecl	i = 1
>105	AssignmentExpr	i = 1
>106	PrimaryExpression	1
>107	Identifier	i
>108	Identifier	i
>109	IdentifierDeclType	int
>110	IdentifierDeclStatement	 
>111	IdentifierDecl	_tmp
>112	Identifier	_tmp
>113	IdentifierDeclType	int
>114	IdentifierDeclStatement	 
>115	IdentifierDecl	n = distributor 
>116	AssignmentExpr	n = distributor 
>117	CallExpression	distributor 
>118	ArgumentList	 
>119	Callee	distributor 
>120	Identifier	distributor 
>121	Identifier	n
>122	Identifier	n
>123	IdentifierDeclType	int
>124	Condition	 
>125	EqualityExpression	distributor 
>126	PrimaryExpression	0
>127	CallExpression	distributor 
>128	ArgumentList	 
>129	Callee	distributor 
>130	Identifier	distributor 
>131	Condition	 
>132	UnaryOp	! distributor 
>133	CallExpression	distributor 
>134	ArgumentList	 
>135	Callee	distributor 
>136	Identifier	distributor 
>137	UnaryOperator	!
>138	ExpressionStatement	 
>139	CallExpression	CNC_ASSERT ( ! dist_ready ( ) )
>140	ArgumentList	! dist_ready ( )
>141	Argument	! dist_ready ( )
>142	UnaryOp	! dist_ready ( )
>143	CallExpression	dist_ready ( )
>144	ArgumentList	 
>145	Callee	dist_ready
>146	Identifier	dist_ready
>147	UnaryOperator	!
>148	Callee	CNC_ASSERT
>149	Identifier	CNC_ASSERT
>166	FunctionDef	distributable_context 
>167	ParameterList	serializer * serlzr
>168	Parameter	 
>169	Identifier	serlzr
>170	ParameterType	serializer *
>171	ReturnType	void
>172	CompoundStatement	 
>173	ExpressionStatement	 
>174	CallExpression	LOG_STATS ( stats ( ) , msg_recvd ( ) )
>175	ArgumentList	stats ( )
>176	Argument	msg_recvd ( )
>177	CallExpression	msg_recvd ( )
>178	ArgumentList	 
>179	Callee	msg_recvd
>180	Identifier	msg_recvd
>181	Argument	stats ( )
>182	CallExpression	stats ( )
>183	ArgumentList	 
>184	Callee	stats
>185	Identifier	stats
>186	Callee	LOG_STATS
>187	Identifier	LOG_STATS
>188	IfStatement	if ( _did >= 0 )
>189	ElseStatement	else
>190	CompoundStatement	 
>191	SwitchStatement	switch ( _msg )
>192	CompoundStatement	 
>193	ExpressionStatement	 
>194	CallExpression	CNC_ASSERT_MSG ( false , \"Context received unexpected message tag\" )
>195	ArgumentList	false
>196	Argument	\"Context received unexpected message tag\"
>197	PrimaryExpression	\"Context received unexpected message tag\"
>198	Argument	false
>199	Identifier	false
>200	Callee	CNC_ASSERT_MSG
>201	Identifier	CNC_ASSERT_MSG
>202	Label	 
>203	Identifier	default
>204	BreakStatement	 
>205	ExpressionStatement	 
>206	CallExpression	m_barrier . push ( 1 )
>207	ArgumentList	1
>208	Argument	1
>209	PrimaryExpression	1
>210	Callee	m_barrier . push
>211	MemberAccess	m_barrier . push
>212	Identifier	push
>213	Identifier	m_barrier
>214	ExpressionStatement	 
>215	CallExpression	CNC_ASSERT ( distributor 
>216	ArgumentList	distributor 
>217	Argument	distributor 
>218	EqualityExpression	distributor 
>219	PrimaryExpression	0
>220	CallExpression	distributor 
>221	ArgumentList	 
>222	Callee	distributor 
>223	Identifier	distributor 
>224	Callee	CNC_ASSERT
>225	Identifier	CNC_ASSERT
>226	Label	 
>227	Identifier	READY
>228	BreakStatement	 
>229	ExpressionStatement	 
>230	CallExpression	spawn_cleanup ( )
>231	ArgumentList	 
>232	Callee	spawn_cleanup
>233	Identifier	spawn_cleanup
>234	Label	 
>235	Identifier	CLEANUP
>236	Condition	 
>237	Identifier	_msg
>238	ExpressionStatement	 
>239	BitAndExpression	( * serlzr ) & _msg
>240	Identifier	_msg
>241	UnaryOp	* serlzr
>242	Identifier	serlzr
>243	UnaryOperator	*
>244	IdentifierDeclStatement	 
>245	IdentifierDecl	_msg
>246	Identifier	_msg
>247	IdentifierDeclType	char
>248	CompoundStatement	 
>249	IfStatement	if ( _dist )
>250	ExpressionStatement	 
>251	CallExpression	_dist -> recv_msg ( serlzr )
>252	ArgumentList	serlzr
>253	Argument	serlzr
>254	Identifier	serlzr
>255	Callee	_dist -> recv_msg
>256	PtrMemberAccess	_dist -> recv_msg
>257	Identifier	recv_msg
>258	Identifier	_dist
>259	Condition	 
>260	Identifier	_dist
>261	ExpressionStatement	 
>262	CallExpression	_lock . release ( )
>263	ArgumentList	 
>264	Callee	_lock . release
>265	MemberAccess	_lock . release
>266	Identifier	release
>267	Identifier	_lock
>268	ExpressionStatement	 
>269	AssignmentExpr	_dist = m_distributables [ _did ]
>270	ArrayIndexing	m_distributables [ _did ]
>271	Identifier	_did
>272	Identifier	m_distributables
>273	Identifier	_dist
>274	ExpressionStatement	 
>275	CallExpression	CNC_ASSERT ( _did >= 0 && _did < ( int ) m_distributables . size ( ) )
>276	ArgumentList	_did >= 0 && _did < ( int ) m_distributables . size ( )
>277	Argument	_did >= 0 && _did < ( int ) m_distributables . size ( )
>278	AndExpression	_did >= 0 && _did < ( int ) m_distributables . size ( )
>279	RelationalExpression	_did < ( int ) m_distributables . size ( )
>280	CastExpression	( int ) m_distributables . size ( )
>281	CallExpression	m_distributables . size ( )
>282	ArgumentList	 
>283	Callee	m_distributables . size
>284	MemberAccess	m_distributables . size
>285	Identifier	size
>286	Identifier	m_distributables
>287	CastTarget	int
>288	Identifier	_did
>289	RelationalExpression	_did >= 0
>290	PrimaryExpression	0
>291	Identifier	_did
>292	Callee	CNC_ASSERT
>293	Identifier	CNC_ASSERT
>294	IdentifierDeclStatement	 
>295	IdentifierDecl	_lock ( m_mutex )
>296	Identifier	m_mutex
>297	Identifier	_lock
>298	IdentifierDeclType	mutex_type 
>299	IdentifierDeclStatement	 
>300	IdentifierDecl	* _dist = NULL
>301	AssignmentExpr	* _dist = NULL
>302	Identifier	NULL
>303	Identifier	NULL
>304	Identifier	_dist
>305	IdentifierDeclType	distributable *
>306	Condition	 
>307	RelationalExpression	_did >= 0
>308	PrimaryExpression	0
>309	Identifier	_did
>310	ExpressionStatement	 
>311	BitAndExpression	( * serlzr ) & _did
>312	Identifier	_did
>313	UnaryOp	* serlzr
>314	Identifier	serlzr
>315	UnaryOperator	*
>316	IdentifierDeclStatement	 
>317	IdentifierDecl	_did
>318	Identifier	_did
>319	IdentifierDeclType	int
>338	FunctionDef	distributable_context 
>339	ParameterList	const distributable * distbl
>340	Parameter	 
>341	Identifier	distbl
>342	ParameterType	const distributable *
>343	ReturnType	serializer *
>344	CompoundStatement	 
>345	ReturnStatement	 
>346	Identifier	_serlzr
>347	ExpressionStatement	 
>348	BitAndExpression	( * _serlzr ) & _did
>349	Identifier	_did
>350	UnaryOp	* _serlzr
>351	Identifier	_serlzr
>352	UnaryOperator	*
>353	ExpressionStatement	 
>354	CallExpression	CNC_ASSERT ( _did < ( int ) m_distributables . size ( ) )
>355	ArgumentList	_did < ( int ) m_distributables . size ( )
>356	Argument	_did < ( int ) m_distributables . size ( )
>357	RelationalExpression	_did < ( int ) m_distributables . size ( )
>358	CastExpression	( int ) m_distributables . size ( )
>359	CallExpression	m_distributables . size ( )
>360	ArgumentList	 
>361	Callee	m_distributables . size
>362	MemberAccess	m_distributables . size
>363	Identifier	size
>364	Identifier	m_distributables
>365	CastTarget	int
>366	Identifier	_did
>367	Callee	CNC_ASSERT
>368	Identifier	CNC_ASSERT
>369	IdentifierDeclStatement	 
>370	IdentifierDecl	_did = distbl != this ? distbl -> gid ( ) 
>371	AssignmentExpr	_did = distbl != this ? distbl -> gid ( ) 
>372	ConditionalExpression	distbl != this ? distbl -> gid ( ) 
>373	UnaryOp	- 1
>374	PrimaryExpression	1
>375	UnaryOperator	-
>376	CallExpression	distbl -> gid ( )
>377	ArgumentList	 
>378	Callee	distbl -> gid
>379	PtrMemberAccess	distbl -> gid
>380	Identifier	gid
>381	Identifier	distbl
>382	Condition	distbl != this
>383	EqualityExpression	distbl != this
>384	Identifier	this
>385	Identifier	distbl
>386	Identifier	_did
>387	Identifier	_did
>388	IdentifierDeclType	int
>389	IdentifierDeclStatement	 
>390	IdentifierDecl	* _serlzr = distributor 
>391	AssignmentExpr	* _serlzr = distributor 
>392	CallExpression	distributor 
>393	ArgumentList	this
>394	Argument	this
>395	Identifier	this
>396	Callee	distributor 
>397	Identifier	distributor 
>398	Identifier	_serlzr
>399	Identifier	_serlzr
>400	IdentifierDeclType	serializer *
>401	CompoundStatement	 
>402	ExpressionStatement	 
>403	CallExpression	CNC_ASSERT ( dist_ready ( ) )
>404	ArgumentList	dist_ready ( )
>405	Argument	dist_ready ( )
>406	CallExpression	dist_ready ( )
>407	ArgumentList	 
>408	Callee	dist_ready
>409	Identifier	dist_ready
>410	Callee	CNC_ASSERT
>411	Identifier	CNC_ASSERT
>412	IfStatement	if ( ! subscribed ( ) )
>413	CompoundStatement	 
>414	ExpressionStatement	 
>415	Statement	 
>416	Statement	 
>417	Statement	 
>418	Statement	 
>419	Statement	 
>420	Statement	 
>421	Statement	 
>422	Statement	 
>423	Statement	 
>424	Statement	 
>425	Statement	 
>426	Statement	 
>427	Statement	 
>428	ExpressionStatement	 
>429	CallExpression	CNC_ASSERT ( distributor 
>430	ArgumentList	distributor 
>431	Argument	distributor 
>432	EqualityExpression	distributor 
>433	PrimaryExpression	0
>434	CallExpression	distributor 
>435	ArgumentList	 
>436	Callee	distributor 
>437	Identifier	distributor 
>438	Callee	CNC_ASSERT
>439	Identifier	CNC_ASSERT
>440	Condition	 
>441	UnaryOp	! subscribed ( )
>442	CallExpression	subscribed ( )
>443	ArgumentList	 
>444	Callee	subscribed
>445	Identifier	subscribed
>446	UnaryOperator	!
>447	IdentifierDeclStatement	 
>448	IdentifierDecl	_lock ( * s_ser_mutex . begin ( ) )
>449	UnaryOp	* s_ser_mutex . begin ( )
>450	CallExpression	s_ser_mutex . begin ( )
>451	ArgumentList	 
>452	Callee	s_ser_mutex . begin
>453	MemberAccess	s_ser_mutex . begin
>454	Identifier	begin
>455	Identifier	s_ser_mutex
>456	UnaryOperator	*
>457	Identifier	_lock
>458	IdentifierDeclType	mutex_type 
>459	IdentifierDeclStatement	 
>460	IdentifierDecl	s_ser_mutex
>461	Identifier	s_ser_mutex
>462	IdentifierDeclType	tbb 
>463	Statement	 
>482	FunctionDef	distributable_context 
>483	ParameterList	serializer * serlzr , int rcver
>484	Parameter	 
>485	Identifier	rcver
>486	ParameterType	int
>487	Parameter	 
>488	Identifier	serlzr
>489	ParameterType	serializer *
>490	ReturnType	void
>491	CompoundStatement	 
>492	ExpressionStatement	 
>493	CallExpression	LOG_STATS ( stats ( ) , msg_sent ( ) )
>494	ArgumentList	stats ( )
>495	Argument	msg_sent ( )
>496	CallExpression	msg_sent ( )
>497	ArgumentList	 
>498	Callee	msg_sent
>499	Identifier	msg_sent
>500	Argument	stats ( )
>501	CallExpression	stats ( )
>502	ArgumentList	 
>503	Callee	stats
>504	Identifier	stats
>505	Callee	LOG_STATS
>506	Identifier	LOG_STATS
>507	ExpressionStatement	 
>508	CallExpression	distributor 
>509	ArgumentList	serlzr
>510	Argument	rcver
>511	Identifier	rcver
>512	Argument	serlzr
>513	Identifier	serlzr
>514	Callee	distributor 
>515	Identifier	distributor 
>523	FunctionDef	distributable_context 
>524	ParameterList	serializer * serlzr , const int * rv , int nrvs
>525	Parameter	 
>526	Identifier	nrvs
>527	ParameterType	int
>528	Parameter	 
>529	Identifier	rv
>530	ParameterType	const int *
>531	Parameter	 
>532	Identifier	serlzr
>533	ParameterType	serializer *
>534	ReturnType	bool
>535	CompoundStatement	 
>536	ExpressionStatement	 
>537	CallExpression	LOG_STATS ( stats ( ) , msg_sent ( nrvs ) )
>538	ArgumentList	stats ( )
>539	Argument	msg_sent ( nrvs )
>540	CallExpression	msg_sent ( nrvs )
>541	ArgumentList	nrvs
>542	Argument	nrvs
>543	Identifier	nrvs
>544	Callee	msg_sent
>545	Identifier	msg_sent
>546	Argument	stats ( )
>547	CallExpression	stats ( )
>548	ArgumentList	 
>549	Callee	stats
>550	Identifier	stats
>551	Callee	LOG_STATS
>552	Identifier	LOG_STATS
>553	ReturnStatement	 
>554	CallExpression	distributor 
>555	ArgumentList	serlzr
>556	Argument	nrvs
>557	Identifier	nrvs
>558	Argument	rv
>559	Identifier	rv
>560	Argument	serlzr
>561	Identifier	serlzr
>562	Callee	distributor 
>563	Identifier	distributor 
>573	FunctionDef	distributable_context 
>574	ParameterList	serializer * serlzr
>575	Parameter	 
>576	Identifier	serlzr
>577	ParameterType	serializer *
>578	ReturnType	void
>579	CompoundStatement	 
>580	ExpressionStatement	 
>581	CallExpression	LOG_STATS ( stats ( ) , bcast_sent ( ) )
>582	ArgumentList	stats ( )
>583	Argument	bcast_sent ( )
>584	CallExpression	bcast_sent ( )
>585	ArgumentList	 
>586	Callee	bcast_sent
>587	Identifier	bcast_sent
>588	Argument	stats ( )
>589	CallExpression	stats ( )
>590	ArgumentList	 
>591	Callee	stats
>592	Identifier	stats
>593	Callee	LOG_STATS
>594	Identifier	LOG_STATS
>595	ExpressionStatement	 
>596	CallExpression	distributor 
>597	ArgumentList	serlzr
>598	Argument	serlzr
>599	Identifier	serlzr
>600	Callee	distributor 
>601	Identifier	distributor 
>608	FunctionDef	distributable_context 
>609	ParameterList	distributable * distbl
>610	Parameter	 
>611	Identifier	distbl
>612	ParameterType	distributable *
>613	ReturnType	int
>614	CompoundStatement	 
>615	ReturnStatement	 
>616	Identifier	_gid
>617	ExpressionStatement	 
>618	CallExpression	distbl -> set_gid ( _gid )
>619	ArgumentList	_gid
>620	Argument	_gid
>621	Identifier	_gid
>622	Callee	distbl -> set_gid
>623	PtrMemberAccess	distbl -> set_gid
>624	Identifier	set_gid
>625	Identifier	distbl
>626	ExpressionStatement	 
>627	AssignmentExpr	_gid = m_distributables . size ( ) - 1
>628	AdditiveExpression	m_distributables . size ( ) - 1
>629	PrimaryExpression	1
>630	CallExpression	m_distributables . size ( )
>631	ArgumentList	 
>632	Callee	m_distributables . size
>633	MemberAccess	m_distributables . size
>634	Identifier	size
>635	Identifier	m_distributables
>636	Identifier	_gid
>637	ExpressionStatement	 
>638	CallExpression	m_distributables . push_back ( distbl )
>639	ArgumentList	distbl
>640	Argument	distbl
>641	Identifier	distbl
>642	Callee	m_distributables . push_back
>643	MemberAccess	m_distributables . push_back
>644	Identifier	push_back
>645	Identifier	m_distributables
>646	ForStatement	for ( distributable_container 
>647	CompoundStatement	 
>648	IfStatement	if ( * i == NULL )
>649	CompoundStatement	 
>650	ReturnStatement	 
>651	Identifier	_gid
>652	ExpressionStatement	 
>653	CallExpression	distbl -> set_gid ( _gid )
>654	ArgumentList	_gid
>655	Argument	_gid
>656	Identifier	_gid
>657	Callee	distbl -> set_gid
>658	PtrMemberAccess	distbl -> set_gid
>659	Identifier	set_gid
>660	Identifier	distbl
>661	ExpressionStatement	 
>662	AssignmentExpr	* i = distbl
>663	Identifier	distbl
>664	UnaryOp	* i
>665	Identifier	i
>666	UnaryOperator	*
>667	Condition	 
>668	EqualityExpression	* i == NULL
>669	Identifier	NULL
>670	UnaryOp	* i
>671	Identifier	i
>672	UnaryOperator	*
>673	Expression	 
>674	UnaryExpression	++ _gid
>675	Identifier	_gid
>676	IncDec	++
>677	UnaryExpression	++ i
>678	Identifier	i
>679	IncDec	++
>680	Condition	 
>681	EqualityExpression	i != m_distributables . end ( )
>682	CallExpression	m_distributables . end ( )
>683	ArgumentList	 
>684	Callee	m_distributables . end
>685	MemberAccess	m_distributables . end
>686	Identifier	end
>687	Identifier	m_distributables
>688	Identifier	i
>689	ForInit	 
>690	IdentifierDeclStatement	distributable_container 
>691	IdentifierDecl	i = m_distributables . begin ( )
>692	AssignmentExpr	i = m_distributables . begin ( )
>693	CallExpression	m_distributables . begin ( )
>694	ArgumentList	 
>695	Callee	m_distributables . begin
>696	MemberAccess	m_distributables . begin
>697	Identifier	begin
>698	Identifier	m_distributables
>699	Identifier	i
>700	Identifier	i
>701	IdentifierDeclType	distributable_container 
>702	IdentifierDeclStatement	 
>703	IdentifierDecl	_lock ( m_mutex )
>704	Identifier	m_mutex
>705	Identifier	_lock
>706	IdentifierDeclType	mutex_type 
>707	IdentifierDeclStatement	 
>708	IdentifierDecl	_gid = 0
>709	AssignmentExpr	_gid = 0
>710	PrimaryExpression	0
>711	Identifier	_gid
>712	Identifier	_gid
>713	IdentifierDeclType	int
>727	FunctionDef	distributable_context 
>728	ParameterList	distributable * distbl
>729	Parameter	 
>730	Identifier	distbl
>731	ParameterType	distributable *
>732	ReturnType	void
>733	CompoundStatement	 
>734	ForStatement	for ( distributable_container 
>735	CompoundStatement	 
>736	IfStatement	if ( ( * i ) == distbl )
>737	CompoundStatement	 
>738	ReturnStatement	 
>739	ExpressionStatement	 
>740	AssignmentExpr	( * i ) = NULL
>741	Identifier	NULL
>742	UnaryOp	* i
>743	Identifier	i
>744	UnaryOperator	*
>745	Condition	 
>746	EqualityExpression	( * i ) == distbl
>747	Identifier	distbl
>748	UnaryOp	* i
>749	Identifier	i
>750	UnaryOperator	*
>751	UnaryExpression	 
>752	Identifier	i
>753	IncDec	++
>754	Condition	 
>755	EqualityExpression	i != m_distributables . end ( )
>756	CallExpression	m_distributables . end ( )
>757	ArgumentList	 
>758	Callee	m_distributables . end
>759	MemberAccess	m_distributables . end
>760	Identifier	end
>761	Identifier	m_distributables
>762	Identifier	i
>763	ForInit	 
>764	IdentifierDeclStatement	distributable_container 
>765	IdentifierDecl	i = m_distributables . begin ( )
>766	AssignmentExpr	i = m_distributables . begin ( )
>767	CallExpression	m_distributables . begin ( )
>768	ArgumentList	 
>769	Callee	m_distributables . begin
>770	MemberAccess	m_distributables . begin
>771	Identifier	begin
>772	Identifier	m_distributables
>773	Identifier	i
>774	Identifier	i
>775	IdentifierDeclType	distributable_container 
>776	IdentifierDeclStatement	 
>777	IdentifierDecl	_lock ( m_mutex )
>778	Identifier	m_mutex
>779	Identifier	_lock
>780	IdentifierDeclType	mutex_type 
>792	FunctionDef	distributable_context 
>793	ParameterList	int level
>794	Parameter	 
>795	Identifier	level
>796	ParameterType	int
>797	ReturnType	void
>798	CompoundStatement	 
>799	ForStatement	for ( distributable_container 
>800	CompoundStatement	 
>801	IfStatement	if ( * i != NULL )
>802	CompoundStatement	 
>803	ExpressionStatement	 
>804	CallExpression	( * i ) -> set_tracing ( level )
>805	ArgumentList	level
>806	Argument	level
>807	Identifier	level
>808	Callee	( * i ) -> set_tracing
>809	PtrMemberAccess	( * i ) -> set_tracing
>810	Identifier	set_tracing
>811	UnaryOp	* i
>812	Identifier	i
>813	UnaryOperator	*
>814	Condition	 
>815	EqualityExpression	* i != NULL
>816	Identifier	NULL
>817	UnaryOp	* i
>818	Identifier	i
>819	UnaryOperator	*
>820	UnaryExpression	 
>821	Identifier	i
>822	IncDec	++
>823	Condition	 
>824	EqualityExpression	i != m_distributables . end ( )
>825	CallExpression	m_distributables . end ( )
>826	ArgumentList	 
>827	Callee	m_distributables . end
>828	MemberAccess	m_distributables . end
>829	Identifier	end
>830	Identifier	m_distributables
>831	Identifier	i
>832	ForInit	 
>833	IdentifierDeclStatement	distributable_container 
>834	IdentifierDecl	i = m_distributables . begin ( )
>835	AssignmentExpr	i = m_distributables . begin ( )
>836	CallExpression	m_distributables . begin ( )
>837	ArgumentList	 
>838	Callee	m_distributables . begin
>839	MemberAccess	m_distributables . begin
>840	Identifier	begin
>841	Identifier	m_distributables
>842	Identifier	i
>843	Identifier	i
>844	IdentifierDeclType	distributable_container 
>845	IdentifierDeclStatement	 
>846	IdentifierDecl	_lock ( m_mutex )
>847	Identifier	m_mutex
>848	Identifier	_lock
>849	IdentifierDeclType	mutex_type 
>850	ExpressionStatement	 
>851	CallExpression	traceable 
>852	ArgumentList	level
>853	Argument	level
>854	Identifier	level
>855	Callee	traceable 
>856	Identifier	traceable 
>868	FunctionDef	distributable_context 
>869	ParameterList	bool local_only
>870	Parameter	 
>871	Identifier	local_only
>872	ParameterType	bool
>873	ReturnType	void
>874	CompoundStatement	 
>875	ForStatement	for ( distributable_container 
>876	CompoundStatement	 
>877	IfStatement	if ( * i )
>878	ExpressionStatement	 
>879	CallExpression	( * i ) -> unsafe_reset ( _dist )
>880	ArgumentList	_dist
>881	Argument	_dist
>882	Identifier	_dist
>883	Callee	( * i ) -> unsafe_reset
>884	PtrMemberAccess	( * i ) -> unsafe_reset
>885	Identifier	unsafe_reset
>886	UnaryOp	* i
>887	Identifier	i
>888	UnaryOperator	*
>889	Condition	 
>890	UnaryOp	* i
>891	Identifier	i
>892	UnaryOperator	*
>893	UnaryExpression	 
>894	Identifier	i
>895	IncDec	++
>896	Condition	 
>897	EqualityExpression	i != m_distributables . end ( )
>898	CallExpression	m_distributables . end ( )
>899	ArgumentList	 
>900	Callee	m_distributables . end
>901	MemberAccess	m_distributables . end
>902	Identifier	end
>903	Identifier	m_distributables
>904	Identifier	i
>905	ForInit	 
>906	IdentifierDeclStatement	distributable_container 
>907	IdentifierDecl	i = m_distributables . begin ( )
>908	AssignmentExpr	i = m_distributables . begin ( )
>909	CallExpression	m_distributables . begin ( )
>910	ArgumentList	 
>911	Callee	m_distributables . begin
>912	MemberAccess	m_distributables . begin
>913	Identifier	begin
>914	Identifier	m_distributables
>915	Identifier	i
>916	Identifier	i
>917	IdentifierDeclType	distributable_container 
>918	IdentifierDeclStatement	 
>919	IdentifierDecl	_lock ( m_mutex )
>920	Identifier	m_mutex
>921	Identifier	_lock
>922	IdentifierDeclType	mutex_type 
>923	IdentifierDeclStatement	 
>924	IdentifierDecl	_dist = ! local_only && distributor 
>925	AssignmentExpr	_dist = ! local_only && distributor 
>926	AndExpression	! local_only && distributor 
>927	AndExpression	distributor 
>928	CallExpression	subscribed ( )
>929	ArgumentList	 
>930	Callee	subscribed
>931	Identifier	subscribed
>932	RelationalExpression	distributor 
>933	PrimaryExpression	1
>934	CallExpression	distributor 
>935	ArgumentList	 
>936	Callee	distributor 
>937	Identifier	distributor 
>938	UnaryOp	! local_only
>939	Identifier	local_only
>940	UnaryOperator	!
>941	Identifier	_dist
>942	Identifier	_dist
>943	IdentifierDeclType	bool
>957	FunctionDef	distributable_context 
>958	ParameterList	bool bcast
>959	Parameter	 
>960	Identifier	bcast
>961	ParameterType	bool
>962	ReturnType	void
>963	CompoundStatement	 
>964	IdentifierDeclStatement	 
>965	IdentifierDecl	i = 0
>966	AssignmentExpr	i = 0
>967	PrimaryExpression	0
>968	Identifier	i
>969	Identifier	i
>970	IdentifierDeclType	int
>971	IdentifierDeclStatement	 
>972	IdentifierDecl	done = false
>973	AssignmentExpr	done = false
>974	Identifier	false
>975	Identifier	false
>976	Identifier	done
>977	IdentifierDeclType	bool
>978	IfStatement	if ( bcast && distributor 
>979	CompoundStatement	 
>980	ExpressionStatement	 
>981	CallExpression	bcast_msg ( _ser )
>982	ArgumentList	_ser
>983	Argument	_ser
>984	Identifier	_ser
>985	Callee	bcast_msg
>986	Identifier	bcast_msg
>987	ExpressionStatement	 
>988	BitAndExpression	( * _ser ) & CLEANUP
>989	Identifier	CLEANUP
>990	UnaryOp	* _ser
>991	Identifier	_ser
>992	UnaryOperator	*
>993	IdentifierDeclStatement	 
>994	IdentifierDecl	* _ser = new_serializer ( this )
>995	AssignmentExpr	* _ser = new_serializer ( this )
>996	CallExpression	new_serializer ( this )
>997	ArgumentList	this
>998	Argument	this
>999	Identifier	this
>1000	Callee	new_serializer
>1001	Identifier	new_serializer
>1002	Identifier	_ser
>1003	Identifier	_ser
>1004	IdentifierDeclType	serializer *
>1005	Condition	 
>1006	AndExpression	bcast && distributor 
>1007	AndExpression	distributor 
>1008	CallExpression	subscribed ( )
>1009	ArgumentList	 
>1010	Callee	subscribed
>1011	Identifier	subscribed
>1012	RelationalExpression	distributor 
>1013	PrimaryExpression	1
>1014	CallExpression	distributor 
>1015	ArgumentList	 
>1016	Callee	distributor 
>1017	Identifier	distributor 
>1018	Identifier	bcast
>1031	FunctionDef	distributable_context 
>1032	ParameterList	 
>1033	ReturnType	void
>1034	CompoundStatement	 
>1035	IfStatement	if ( m_statistics == NULL )
>1036	CompoundStatement	 
>1037	ExpressionStatement	 
>1038	Identifier	statistics
>1039	Statement	 
>1040	Statement	 
>1041	Statement	 
>1042	Condition	 
>1043	EqualityExpression	m_statistics == NULL
>1044	Identifier	NULL
>1045	Identifier	m_statistics
>1051	FunctionDef	distributable_context 
>1052	ParameterList	 
>1053	ReturnType	void
>1054	CompoundStatement	 
>1055	ExpressionStatement	 
>1056	CallExpression	LOG_STATS ( m_statistics , print_statistics ( std 
>1057	ArgumentList	m_statistics
>1058	Argument	print_statistics ( std 
>1059	CallExpression	print_statistics ( std 
>1060	ArgumentList	std 
>1061	Argument	std 
>1062	Identifier	std 
>1063	Callee	print_statistics
>1064	Identifier	print_statistics
>1065	Argument	m_statistics
>1066	Identifier	m_statistics
>1067	Callee	LOG_STATS
>1068	Identifier	LOG_STATS
<9=14,10
<10=11
<11=13,12
<19=21,20
<21=24,22
<22=23
<28=31,30,29
<35=38,37,36
<38=138,39
<39=131,45,40
<40=41
<41=42
<42=44,43
<45=46
<46=124,80,47
<47=48
<48=76,64,58,49
<49=50
<50=56,51
<51=54,52
<52=53
<54=55
<56=57
<58=59
<59=61,60
<61=63,62
<64=65
<65=75,74,66
<66=73,67
<67=71,68
<68=69
<69=70
<71=72
<76=77
<77=79,78
<80=114,110,85,81
<81=82
<82=84,83
<85=102,98,95,86
<86=87
<87=91,88
<88=89
<89=90
<91=92
<92=94,93
<95=97,96
<98=99
<99=101,100
<102=103
<103=104
<104=109,108,105
<105=107,106
<110=111
<111=113,112
<114=115
<115=123,122,116
<116=121,117
<117=119,118
<119=120
<124=125
<125=127,126
<127=129,128
<129=130
<131=132
<132=137,133
<133=135,134
<135=136
<138=139
<139=148,140
<140=141
<141=142
<142=147,143
<143=145,144
<145=146
<148=149
<166=172,171,167
<167=168
<168=170,169
<172=316,310,188,173
<173=174
<174=186,175
<175=181,176
<176=177
<177=179,178
<179=180
<181=182
<182=184,183
<184=185
<186=187
<188=306,248,189
<189=190
<190=244,238,191
<191=236,192
<192=234,229,228,226,214,205,204,202,193
<193=194
<194=200,195
<195=198,196
<196=197
<198=199
<200=201
<202=203
<205=206
<206=210,207
<207=208
<208=209
<210=211
<211=213,212
<214=215
<215=224,216
<216=217
<217=218
<218=220,219
<220=222,221
<222=223
<224=225
<226=227
<229=230
<230=232,231
<232=233
<234=235
<236=237
<238=239
<239=241,240
<241=243,242
<244=245
<245=247,246
<248=299,294,274,268,261,249
<249=259,250
<250=251
<251=255,252
<252=253
<253=254
<255=256
<256=258,257
<259=260
<261=262
<262=264,263
<264=265
<265=267,266
<268=269
<269=273,270
<270=272,271
<274=275
<275=292,276
<276=277
<277=278
<278=289,279
<279=288,280
<280=287,281
<281=283,282
<283=284
<284=286,285
<289=291,290
<292=293
<294=295
<295=298,297,296
<299=300
<300=305,304,301
<301=303,302
<306=307
<307=309,308
<310=311
<311=313,312
<313=315,314
<316=317
<317=319,318
<338=344,343,339
<339=340
<340=342,341
<344=463,459,401,389,369,353,347,345
<345=346
<347=348
<348=350,349
<350=352,351
<353=354
<354=367,355
<355=356
<356=357
<357=366,358
<358=365,359
<359=361,360
<361=362
<362=364,363
<367=368
<369=370
<370=388,387,371
<371=386,372
<372=382,376,373
<373=375,374
<376=378,377
<378=379
<379=381,380
<382=383
<383=385,384
<389=390
<390=400,399,391
<391=398,392
<392=396,393
<393=394
<394=395
<396=397
<401=447,412,402
<402=403
<403=410,404
<404=405
<405=406
<406=408,407
<408=409
<410=411
<412=440,413
<413=428,427,426,425,424,423,422,421,420,419,418,417,416,415,414
<428=429
<429=438,430
<430=431
<431=432
<432=434,433
<434=436,435
<436=437
<438=439
<440=441
<441=446,442
<442=444,443
<444=445
<447=448
<448=458,457,449
<449=456,450
<450=452,451
<452=453
<453=455,454
<459=460
<460=462,461
<482=491,490,483
<483=487,484
<484=486,485
<487=489,488
<491=507,492
<492=493
<493=505,494
<494=500,495
<495=496
<496=498,497
<498=499
<500=501
<501=503,502
<503=504
<505=506
<507=508
<508=514,509
<509=512,510
<510=511
<512=513
<514=515
<523=535,534,524
<524=531,528,525
<525=527,526
<528=530,529
<531=533,532
<535=553,536
<536=537
<537=551,538
<538=546,539
<539=540
<540=544,541
<541=542
<542=543
<544=545
<546=547
<547=549,548
<549=550
<551=552
<553=554
<554=562,555
<555=560,558,556
<556=557
<558=559
<560=561
<562=563
<573=579,578,574
<574=575
<575=577,576
<579=595,580
<580=581
<581=593,582
<582=588,583
<583=584
<584=586,585
<586=587
<588=589
<589=591,590
<591=592
<593=594
<595=596
<596=600,597
<597=598
<598=599
<600=601
<608=614,613,609
<609=610
<610=612,611
<614=707,702,646,637,626,617,615
<615=616
<617=618
<618=622,619
<619=620
<620=621
<622=623
<623=625,624
<626=627
<627=636,628
<628=630,629
<630=632,631
<632=633
<633=635,634
<637=638
<638=642,639
<639=640
<640=641
<642=643
<643=645,644
<646=689,680,673,647
<647=648
<648=667,649
<649=661,652,650
<650=651
<652=653
<653=657,654
<654=655
<655=656
<657=658
<658=660,659
<661=662
<662=664,663
<664=666,665
<667=668
<668=670,669
<670=672,671
<673=677,674
<674=676,675
<677=679,678
<680=681
<681=688,682
<682=684,683
<684=685
<685=687,686
<689=690
<690=691
<691=701,700,692
<692=699,693
<693=695,694
<695=696
<696=698,697
<702=703
<703=706,705,704
<707=708
<708=713,712,709
<709=711,710
<727=733,732,728
<728=729
<729=731,730
<733=776,734
<734=763,754,751,735
<735=736
<736=745,737
<737=739,738
<739=740
<740=742,741
<742=744,743
<745=746
<746=748,747
<748=750,749
<751=753,752
<754=755
<755=762,756
<756=758,757
<758=759
<759=761,760
<763=764
<764=765
<765=775,774,766
<766=773,767
<767=769,768
<769=770
<770=772,771
<776=777
<777=780,779,778
<792=798,797,793
<793=794
<794=796,795
<798=850,845,799
<799=832,823,820,800
<800=801
<801=814,802
<802=803
<803=804
<804=808,805
<805=806
<806=807
<808=809
<809=811,810
<811=813,812
<814=815
<815=817,816
<817=819,818
<820=822,821
<823=824
<824=831,825
<825=827,826
<827=828
<828=830,829
<832=833
<833=834
<834=844,843,835
<835=842,836
<836=838,837
<838=839
<839=841,840
<845=846
<846=849,848,847
<850=851
<851=855,852
<852=853
<853=854
<855=856
<868=874,873,869
<869=870
<870=872,871
<874=923,918,875
<875=905,896,893,876
<876=877
<877=889,878
<878=879
<879=883,880
<880=881
<881=882
<883=884
<884=886,885
<886=888,887
<889=890
<890=892,891
<893=895,894
<896=897
<897=904,898
<898=900,899
<900=901
<901=903,902
<905=906
<906=907
<907=917,916,908
<908=915,909
<909=911,910
<911=912
<912=914,913
<918=919
<919=922,921,920
<923=924
<924=943,942,925
<925=941,926
<926=938,927
<927=932,928
<928=930,929
<930=931
<932=934,933
<934=936,935
<936=937
<938=940,939
<957=963,962,958
<958=959
<959=961,960
<963=978,971,964
<964=965
<965=970,969,966
<966=968,967
<971=972
<972=977,976,973
<973=975,974
<978=1005,979
<979=993,987,980
<980=981
<981=985,982
<982=983
<983=984
<985=986
<987=988
<988=990,989
<990=992,991
<993=994
<994=1004,1003,995
<995=1002,996
<996=1000,997
<997=998
<998=999
<1000=1001
<1005=1006
<1006=1018,1007
<1007=1012,1008
<1008=1010,1009
<1010=1011
<1012=1014,1013
<1014=1016,1015
<1016=1017
<1031=1034,1033,1032
<1034=1035
<1035=1042,1036
<1036=1041,1040,1039,1037
<1037=1038
<1042=1043
<1043=1045,1044
<1051=1054,1053,1052
<1054=1055
<1055=1056
<1056=1067,1057
<1057=1065,1058
<1058=1059
<1059=1063,1060
<1060=1061
<1061=1062
<1063=1064
<1065=1066
<1067=1068
