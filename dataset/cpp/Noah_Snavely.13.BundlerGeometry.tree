>5	FunctionDef	BundlerApp 
>6	ParameterList	 
>7	ReturnType	int
>8	CompoundStatement	 
>9	ReturnStatement	 
>10	Identifier	cnp
>11	IfStatement	if ( m_estimate_distortion )
>12	ExpressionStatement	 
>13	AssignmentExpr	cnp += 2
>14	PrimaryExpression	2
>15	Identifier	cnp
>16	Condition	 
>17	Identifier	m_estimate_distortion
>18	IfStatement	if ( ! m_fixed_focal_length )
>19	ExpressionStatement	 
>20	IncDecOp	cnp ++
>21	IncDec	++
>22	Identifier	cnp
>23	Condition	 
>24	UnaryOp	! m_fixed_focal_length
>25	Identifier	m_fixed_focal_length
>26	UnaryOperator	!
>27	IdentifierDeclStatement	 
>28	IdentifierDecl	cnp = 6
>29	AssignmentExpr	cnp = 6
>30	PrimaryExpression	6
>31	Identifier	cnp
>32	Identifier	cnp
>33	IdentifierDeclType	int
>40	FunctionDef	TransformInfo 
>41	ParameterList	FILE * f
>42	Parameter	 
>43	Identifier	f
>44	ParameterType	FILE *
>45	ReturnType	void
>46	CompoundStatement	 
>47	ExpressionStatement	 
>48	CallExpression	fscanf ( f , \"%d\n\" , & m_num_inliers )
>49	ArgumentList	f
>50	Argument	& m_num_inliers
>51	UnaryOp	& m_num_inliers
>52	Identifier	m_num_inliers
>53	UnaryOperator	&
>54	Argument	\"%d\n\"
>55	PrimaryExpression	\"%d\n\"
>56	Argument	f
>57	Identifier	f
>58	Callee	fscanf
>59	Identifier	fscanf
>60	ExpressionStatement	 
>61	CallExpression	fscanf ( f , \"%lf\n\" , & m_inlier_ratio )
>62	ArgumentList	f
>63	Argument	& m_inlier_ratio
>64	UnaryOp	& m_inlier_ratio
>65	Identifier	m_inlier_ratio
>66	UnaryOperator	&
>67	Argument	\"%lf\n\"
>68	PrimaryExpression	\"%lf\n\"
>69	Argument	f
>70	Identifier	f
>71	Callee	fscanf
>72	Identifier	fscanf
>73	ExpressionStatement	 
>74	Statement	 
>75	Statement	 
>76	Statement	 
>77	Statement	 
>78	Statement	 
>79	Statement	 
>80	Statement	 
>81	Statement	 
>82	Statement	 
>83	Statement	 
>84	Statement	 
>85	Statement	 
>86	Statement	 
>87	Statement	 
>88	Statement	 
>89	Statement	 
>90	Statement	 
>91	Statement	 
>92	Statement	 
>93	Statement	 
>94	Statement	 
>95	Statement	 
>96	Statement	 
>97	Statement	 
>98	Statement	 
>99	Statement	 
>100	Statement	 
>101	Statement	 
>102	Statement	 
>103	Statement	 
>104	Statement	 
>105	Statement	 
>106	Statement	 
>107	Statement	 
>108	Statement	 
>109	Statement	 
>110	Statement	 
>111	Statement	 
>112	Statement	 
>113	Statement	 
>114	Statement	 
>115	Statement	 
>116	Statement	 
>117	Statement	 
>118	ExpressionStatement	 
>119	Statement	 
>120	Statement	 
>121	Statement	 
>122	Statement	 
>123	Statement	 
>124	Statement	 
>125	Statement	 
>126	Statement	 
>127	Statement	 
>128	Statement	 
>129	Statement	 
>130	Statement	 
>131	Statement	 
>132	Statement	 
>133	Statement	 
>134	Statement	 
>135	Statement	 
>136	Statement	 
>137	Statement	 
>138	Statement	 
>139	Statement	 
>140	Statement	 
>141	Statement	 
>142	Statement	 
>143	Statement	 
>144	Statement	 
>145	Statement	 
>146	Statement	 
>147	Statement	 
>148	Statement	 
>149	Statement	 
>150	Statement	 
>151	Statement	 
>152	Statement	 
>153	Statement	 
>154	Statement	 
>155	Statement	 
>156	Statement	 
>157	Statement	 
>158	Statement	 
>159	Statement	 
>160	Statement	 
>161	Statement	 
>162	Statement	 
>169	FunctionDef	TransformInfo 
>170	ParameterList	FILE * f
>171	Parameter	 
>172	Identifier	f
>173	ParameterType	FILE *
>174	ReturnType	void
>175	CompoundStatement	 
>176	ExpressionStatement	 
>177	CallExpression	fprintf ( f , \"%d\n\" , m_num_inliers )
>178	ArgumentList	f
>179	Argument	m_num_inliers
>180	Identifier	m_num_inliers
>181	Argument	\"%d\n\"
>182	PrimaryExpression	\"%d\n\"
>183	Argument	f
>184	Identifier	f
>185	Callee	fprintf
>186	Identifier	fprintf
>187	ExpressionStatement	 
>188	CallExpression	fprintf ( f , \"%0.16le\n\" , m_inlier_ratio )
>189	ArgumentList	f
>190	Argument	m_inlier_ratio
>191	Identifier	m_inlier_ratio
>192	Argument	\"%0.16le\n\"
>193	PrimaryExpression	\"%0.16le\n\"
>194	Argument	f
>195	Identifier	f
>196	Callee	fprintf
>197	Identifier	fprintf
>198	ExpressionStatement	 
>199	Statement	 
>200	Statement	 
>201	Statement	 
>202	Statement	 
>203	Statement	 
>204	Statement	 
>205	Statement	 
>206	Statement	 
>207	Statement	 
>208	Statement	 
>209	Statement	 
>210	Statement	 
>211	Statement	 
>212	Statement	 
>213	Statement	 
>214	Statement	 
>215	Statement	 
>216	Statement	 
>217	Statement	 
>218	Statement	 
>219	Statement	 
>220	Statement	 
>221	Statement	 
>222	Statement	 
>223	Statement	 
>224	Statement	 
>225	Statement	 
>226	Statement	 
>227	Statement	 
>228	Statement	 
>229	Statement	 
>230	Statement	 
>231	Statement	 
>232	Statement	 
>233	Statement	 
>234	Statement	 
>235	Statement	 
>236	Statement	 
>237	Statement	 
>238	Statement	 
>239	Statement	 
>240	Statement	 
>241	Statement	 
>242	Statement	 
>243	Statement	 
>244	Statement	 
>245	Statement	 
>246	Statement	 
>247	Statement	 
>248	Statement	 
>249	Statement	 
>250	Statement	 
>251	Statement	 
>252	ExpressionStatement	 
>253	Statement	 
>254	Statement	 
>255	Statement	 
>256	Statement	 
>257	Statement	 
>258	Statement	 
>259	Statement	 
>260	Statement	 
>261	Statement	 
>262	Statement	 
>263	Statement	 
>264	Statement	 
>265	Statement	 
>266	Statement	 
>267	Statement	 
>268	Statement	 
>269	Statement	 
>270	Statement	 
>271	Statement	 
>272	Statement	 
>273	Statement	 
>274	Statement	 
>275	Statement	 
>276	Statement	 
>277	Statement	 
>278	Statement	 
>279	Statement	 
>280	Statement	 
>281	Statement	 
>282	Statement	 
>283	Statement	 
>284	Statement	 
>285	Statement	 
>286	Statement	 
>287	Statement	 
>288	Statement	 
>289	Statement	 
>290	Statement	 
>291	Statement	 
>292	Statement	 
>293	Statement	 
>294	Statement	 
>295	Statement	 
>296	Statement	 
>297	Statement	 
>298	Statement	 
>299	Statement	 
>300	Statement	 
>301	Statement	 
>302	Statement	 
>303	Statement	 
>304	Statement	 
>305	Statement	 
>312	FunctionDef	BundlerApp 
>313	ParameterList	bool overwrite , int new_image_start
>314	Parameter	 
>315	Identifier	new_image_start
>316	ParameterType	int
>317	Parameter	 
>318	Identifier	overwrite
>319	ParameterType	bool
>320	ReturnType	void
>321	CompoundStatement	 
>322	IfStatement	if ( ! overwrite && FileExists ( filename ) )
>323	ElseStatement	else
>324	CompoundStatement	 
>325	IfStatement	if ( num_images < 40000 )
>326	ExpressionStatement	 
>327	CallExpression	WriteMatchTable ( \".corresp\" )
>328	ArgumentList	\".corresp\"
>329	Argument	\".corresp\"
>330	PrimaryExpression	\".corresp\"
>331	Callee	WriteMatchTable
>332	Identifier	WriteMatchTable
>333	Condition	 
>334	RelationalExpression	num_images < 40000
>335	PrimaryExpression	40000
>336	Identifier	num_images
>337	ExpressionStatement	 
>338	CallExpression	WriteGeometricConstraints ( filename )
>339	ArgumentList	filename
>340	Argument	filename
>341	Identifier	filename
>342	Callee	WriteGeometricConstraints
>343	Identifier	WriteGeometricConstraints
>344	ForStatement	for ( int i = 0 ; i < num_tracks ; i ++ )
>345	CompoundStatement	 
>346	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>347	CompoundStatement	 
>348	ForStatement	for ( int k = j + 1 ; k < num_views ; k ++ )
>349	CompoundStatement	 
>350	ExpressionStatement	 
>351	CallExpression	SetMatch ( img2 , img1 )
>352	ArgumentList	img2
>353	Argument	img1
>354	Identifier	img1
>355	Argument	img2
>356	Identifier	img2
>357	Callee	SetMatch
>358	Identifier	SetMatch
>359	ExpressionStatement	 
>360	CallExpression	SetMatch ( img1 , img2 )
>361	ArgumentList	img1
>362	Argument	img2
>363	Identifier	img2
>364	Argument	img1
>365	Identifier	img1
>366	Callee	SetMatch
>367	Identifier	SetMatch
>368	ExpressionStatement	 
>369	CallExpression	assert ( img2 >= 0 && img2 < num_images )
>370	ArgumentList	img2 >= 0 && img2 < num_images
>371	Argument	img2 >= 0 && img2 < num_images
>372	AndExpression	img2 >= 0 && img2 < num_images
>373	RelationalExpression	img2 < num_images
>374	Identifier	num_images
>375	Identifier	img2
>376	RelationalExpression	img2 >= 0
>377	PrimaryExpression	0
>378	Identifier	img2
>379	Callee	assert
>380	Identifier	assert
>381	IdentifierDeclStatement	 
>382	IdentifierDecl	img2 = track . m_views [ k ] . first
>383	AssignmentExpr	img2 = track . m_views [ k ] . first
>384	MemberAccess	track . m_views [ k ] . first
>385	Identifier	first
>386	ArrayIndexing	track . m_views [ k ]
>387	Identifier	k
>388	MemberAccess	track . m_views
>389	Identifier	m_views
>390	Identifier	track
>391	Identifier	img2
>392	Identifier	img2
>393	IdentifierDeclType	int
>394	IncDecOp	 
>395	IncDec	++
>396	Identifier	k
>397	Condition	 
>398	RelationalExpression	k < num_views
>399	Identifier	num_views
>400	Identifier	k
>401	ForInit	 
>402	IdentifierDeclStatement	int k = j + 1 ;
>403	IdentifierDecl	k = j + 1
>404	AssignmentExpr	k = j + 1
>405	AdditiveExpression	j + 1
>406	PrimaryExpression	1
>407	Identifier	j
>408	Identifier	k
>409	Identifier	k
>410	IdentifierDeclType	int
>411	ExpressionStatement	 
>412	CallExpression	assert ( img1 >= 0 && img1 < num_images )
>413	ArgumentList	img1 >= 0 && img1 < num_images
>414	Argument	img1 >= 0 && img1 < num_images
>415	AndExpression	img1 >= 0 && img1 < num_images
>416	RelationalExpression	img1 < num_images
>417	Identifier	num_images
>418	Identifier	img1
>419	RelationalExpression	img1 >= 0
>420	PrimaryExpression	0
>421	Identifier	img1
>422	Callee	assert
>423	Identifier	assert
>424	IdentifierDeclStatement	 
>425	IdentifierDecl	img1 = track . m_views [ j ] . first
>426	AssignmentExpr	img1 = track . m_views [ j ] . first
>427	MemberAccess	track . m_views [ j ] . first
>428	Identifier	first
>429	ArrayIndexing	track . m_views [ j ]
>430	Identifier	j
>431	MemberAccess	track . m_views
>432	Identifier	m_views
>433	Identifier	track
>434	Identifier	img1
>435	Identifier	img1
>436	IdentifierDeclType	int
>437	IncDecOp	 
>438	IncDec	++
>439	Identifier	j
>440	Condition	 
>441	RelationalExpression	j < num_views
>442	Identifier	num_views
>443	Identifier	j
>444	ForInit	 
>445	IdentifierDeclStatement	int j = 0 ;
>446	IdentifierDecl	j = 0
>447	AssignmentExpr	j = 0
>448	PrimaryExpression	0
>449	Identifier	j
>450	Identifier	j
>451	IdentifierDeclType	int
>452	IdentifierDeclStatement	 
>453	IdentifierDecl	num_views = ( int ) track . m_views . size ( )
>454	AssignmentExpr	num_views = ( int ) track . m_views . size ( )
>455	CastExpression	( int ) track . m_views . size ( )
>456	CallExpression	track . m_views . size ( )
>457	ArgumentList	 
>458	Callee	track . m_views . size
>459	MemberAccess	track . m_views . size
>460	Identifier	size
>461	MemberAccess	track . m_views
>462	Identifier	m_views
>463	Identifier	track
>464	CastTarget	int
>465	Identifier	num_views
>466	Identifier	num_views
>467	IdentifierDeclType	int
>468	IdentifierDeclStatement	 
>469	IdentifierDecl	& track = m_track_data [ i ]
>470	AssignmentExpr	& track = m_track_data [ i ]
>471	ArrayIndexing	m_track_data [ i ]
>472	Identifier	i
>473	Identifier	m_track_data
>474	Identifier	track
>475	Identifier	track
>476	IdentifierDeclType	TrackData &
>477	IncDecOp	 
>478	IncDec	++
>479	Identifier	i
>480	Condition	 
>481	RelationalExpression	i < num_tracks
>482	Identifier	num_tracks
>483	Identifier	i
>484	ForInit	 
>485	IdentifierDeclStatement	int i = 0 ;
>486	IdentifierDecl	i = 0
>487	AssignmentExpr	i = 0
>488	PrimaryExpression	0
>489	Identifier	i
>490	Identifier	i
>491	IdentifierDeclType	int
>492	IdentifierDeclStatement	 
>493	IdentifierDecl	num_tracks = ( int ) m_track_data . size ( )
>494	AssignmentExpr	num_tracks = ( int ) m_track_data . size ( )
>495	CastExpression	( int ) m_track_data . size ( )
>496	CallExpression	m_track_data . size ( )
>497	ArgumentList	 
>498	Callee	m_track_data . size
>499	MemberAccess	m_track_data . size
>500	Identifier	size
>501	Identifier	m_track_data
>502	CastTarget	int
>503	Identifier	num_tracks
>504	Identifier	num_tracks
>505	IdentifierDeclType	int
>506	ExpressionStatement	 
>507	CallExpression	RemoveAllMatches ( )
>508	ArgumentList	 
>509	Callee	RemoveAllMatches
>510	Identifier	RemoveAllMatches
>511	ExpressionStatement	 
>512	CallExpression	ComputeTracks ( new_image_start )
>513	ArgumentList	new_image_start
>514	Argument	new_image_start
>515	Identifier	new_image_start
>516	Callee	ComputeTracks
>517	Identifier	ComputeTracks
>518	IfStatement	if ( num_images < 40000 )
>519	ExpressionStatement	 
>520	CallExpression	WriteMatchTable ( \".ransac\" )
>521	ArgumentList	\".ransac\"
>522	Argument	\".ransac\"
>523	PrimaryExpression	\".ransac\"
>524	Callee	WriteMatchTable
>525	Identifier	WriteMatchTable
>526	Condition	 
>527	RelationalExpression	num_images < 40000
>528	PrimaryExpression	40000
>529	Identifier	num_images
>530	ExpressionStatement	 
>531	CallExpression	MakeMatchListsSymmetric ( )
>532	ArgumentList	 
>533	Callee	MakeMatchListsSymmetric
>534	Identifier	MakeMatchListsSymmetric
>535	IfStatement	if ( ! m_skip_homographies )
>536	CompoundStatement	 
>537	ExpressionStatement	 
>538	CallExpression	ComputeTransforms ( false , new_image_start )
>539	ArgumentList	false
>540	Argument	new_image_start
>541	Identifier	new_image_start
>542	Argument	false
>543	Identifier	false
>544	Callee	ComputeTransforms
>545	Identifier	ComputeTransforms
>546	Condition	 
>547	UnaryOp	! m_skip_homographies
>548	Identifier	m_skip_homographies
>549	UnaryOperator	!
>550	IfStatement	if ( ! m_skip_fmatrix )
>551	CompoundStatement	 
>552	ExpressionStatement	 
>553	CallExpression	ComputeEpipolarGeometry ( true , new_image_start )
>554	ArgumentList	true
>555	Argument	new_image_start
>556	Identifier	new_image_start
>557	Argument	true
>558	Identifier	true
>559	Callee	ComputeEpipolarGeometry
>560	Identifier	ComputeEpipolarGeometry
>561	Condition	 
>562	UnaryOp	! m_skip_fmatrix
>563	Identifier	m_skip_fmatrix
>564	UnaryOperator	!
>565	IfStatement	if ( m_keypoint_border_bottom > 0 )
>566	CompoundStatement	 
>567	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>568	CompoundStatement	 
>569	ForStatement	for ( int j = i + 1 ; j < num_images ; j ++ )
>570	CompoundStatement	 
>571	ExpressionStatement	 
>572	CallExpression	RemoveMatchesNearBottom ( i , j , m_keypoint_border_bottom )
>573	ArgumentList	i
>574	Argument	m_keypoint_border_bottom
>575	Identifier	m_keypoint_border_bottom
>576	Argument	j
>577	Identifier	j
>578	Argument	i
>579	Identifier	i
>580	Callee	RemoveMatchesNearBottom
>581	Identifier	RemoveMatchesNearBottom
>582	IfStatement	if ( ! ImagesMatch ( i , j ) )
>583	ContinueStatement	 
>584	Condition	 
>585	UnaryOp	! ImagesMatch ( i , j )
>586	CallExpression	ImagesMatch ( i , j )
>587	ArgumentList	i
>588	Argument	j
>589	Identifier	j
>590	Argument	i
>591	Identifier	i
>592	Callee	ImagesMatch
>593	Identifier	ImagesMatch
>594	UnaryOperator	!
>595	IncDecOp	 
>596	IncDec	++
>597	Identifier	j
>598	Condition	 
>599	RelationalExpression	j < num_images
>600	Identifier	num_images
>601	Identifier	j
>602	ForInit	 
>603	IdentifierDeclStatement	int j = i + 1 ;
>604	IdentifierDecl	j = i + 1
>605	AssignmentExpr	j = i + 1
>606	AdditiveExpression	i + 1
>607	PrimaryExpression	1
>608	Identifier	i
>609	Identifier	j
>610	Identifier	j
>611	IdentifierDeclType	int
>612	IncDecOp	 
>613	IncDec	++
>614	Identifier	i
>615	Condition	 
>616	RelationalExpression	i < num_images
>617	Identifier	num_images
>618	Identifier	i
>619	ForInit	 
>620	IdentifierDeclStatement	int i = 0 ;
>621	IdentifierDecl	i = 0
>622	AssignmentExpr	i = 0
>623	PrimaryExpression	0
>624	Identifier	i
>625	Identifier	i
>626	IdentifierDeclType	int
>627	Condition	 
>628	RelationalExpression	m_keypoint_border_bottom > 0
>629	PrimaryExpression	0
>630	Identifier	m_keypoint_border_bottom
>631	IfStatement	if ( m_keypoint_border_width > 0 )
>632	CompoundStatement	 
>633	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>634	CompoundStatement	 
>635	ForStatement	for ( int j = i + 1 ; j < num_images ; j ++ )
>636	CompoundStatement	 
>637	ExpressionStatement	 
>638	CallExpression	RemoveMatchesNearBorder ( i , j , m_keypoint_border_width )
>639	ArgumentList	i
>640	Argument	m_keypoint_border_width
>641	Identifier	m_keypoint_border_width
>642	Argument	j
>643	Identifier	j
>644	Argument	i
>645	Identifier	i
>646	Callee	RemoveMatchesNearBorder
>647	Identifier	RemoveMatchesNearBorder
>648	IfStatement	if ( ! ImagesMatch ( i , j ) )
>649	ContinueStatement	 
>650	Condition	 
>651	UnaryOp	! ImagesMatch ( i , j )
>652	CallExpression	ImagesMatch ( i , j )
>653	ArgumentList	i
>654	Argument	j
>655	Identifier	j
>656	Argument	i
>657	Identifier	i
>658	Callee	ImagesMatch
>659	Identifier	ImagesMatch
>660	UnaryOperator	!
>661	IncDecOp	 
>662	IncDec	++
>663	Identifier	j
>664	Condition	 
>665	RelationalExpression	j < num_images
>666	Identifier	num_images
>667	Identifier	j
>668	ForInit	 
>669	IdentifierDeclStatement	int j = i + 1 ;
>670	IdentifierDecl	j = i + 1
>671	AssignmentExpr	j = i + 1
>672	AdditiveExpression	i + 1
>673	PrimaryExpression	1
>674	Identifier	i
>675	Identifier	j
>676	Identifier	j
>677	IdentifierDeclType	int
>678	IncDecOp	 
>679	IncDec	++
>680	Identifier	i
>681	Condition	 
>682	RelationalExpression	i < num_images
>683	Identifier	num_images
>684	Identifier	i
>685	ForInit	 
>686	IdentifierDeclStatement	int i = 0 ;
>687	IdentifierDecl	i = 0
>688	AssignmentExpr	i = 0
>689	PrimaryExpression	0
>690	Identifier	i
>691	Identifier	i
>692	IdentifierDeclType	int
>693	Condition	 
>694	RelationalExpression	m_keypoint_border_width > 0
>695	PrimaryExpression	0
>696	Identifier	m_keypoint_border_width
>697	IfStatement	if ( ! m_skip_fmatrix || ! m_skip_homographies || m_keypoint_border_width > 0 || m_keypoint_border_bottom > 0 )
>698	ExpressionStatement	 
>699	CallExpression	LoadKeys ( false )
>700	ArgumentList	false
>701	Argument	false
>702	Identifier	false
>703	Callee	LoadKeys
>704	Identifier	LoadKeys
>705	Condition	 
>706	OrExpression	! m_skip_fmatrix || ! m_skip_homographies || m_keypoint_border_width > 0 || m_keypoint_border_bottom > \
>707	OrExpression	! m_skip_homographies || m_keypoint_border_width > 0 || m_keypoint_border_bottom > 0
>708	OrExpression	m_keypoint_border_width > 0 || m_keypoint_border_bottom > 0
>709	RelationalExpression	m_keypoint_border_bottom > 0
>710	PrimaryExpression	0
>711	Identifier	m_keypoint_border_bottom
>712	RelationalExpression	m_keypoint_border_width > 0
>713	PrimaryExpression	0
>714	Identifier	m_keypoint_border_width
>715	UnaryOp	! m_skip_homographies
>716	Identifier	m_skip_homographies
>717	UnaryOperator	!
>718	UnaryOp	! m_skip_fmatrix
>719	Identifier	m_skip_fmatrix
>720	UnaryOperator	!
>721	IfStatement	if ( num_images < 40000 )
>722	ExpressionStatement	 
>723	CallExpression	WriteMatchTable ( \".prune\" )
>724	ArgumentList	\".prune\"
>725	Argument	\".prune\"
>726	PrimaryExpression	\".prune\"
>727	Callee	WriteMatchTable
>728	Identifier	WriteMatchTable
>729	Condition	 
>730	RelationalExpression	num_images < 40000
>731	PrimaryExpression	40000
>732	Identifier	num_images
>733	ExpressionStatement	 
>734	CallExpression	LoadMatches ( )
>735	ArgumentList	 
>736	Callee	LoadMatches
>737	Identifier	LoadMatches
>738	CompoundStatement	 
>739	ReturnStatement	 
>740	ExpressionStatement	 
>741	CallExpression	ReadGeometricConstraints ( filename )
>742	ArgumentList	filename
>743	Argument	filename
>744	Identifier	filename
>745	Callee	ReadGeometricConstraints
>746	Identifier	ReadGeometricConstraints
>747	Condition	 
>748	AndExpression	! overwrite && FileExists ( filename )
>749	CallExpression	FileExists ( filename )
>750	ArgumentList	filename
>751	Argument	filename
>752	Identifier	filename
>753	Callee	FileExists
>754	Identifier	FileExists
>755	UnaryOp	! overwrite
>756	Identifier	overwrite
>757	UnaryOperator	!
>758	IdentifierDeclStatement	 
>759	IdentifierDecl	* filename = \"constraints.txt\"
>760	AssignmentExpr	* filename = \"constraints.txt\"
>761	PrimaryExpression	\"constraints.txt\"
>762	Identifier	filename
>763	Identifier	filename
>764	IdentifierDeclType	const char *
>765	IdentifierDeclStatement	 
>766	IdentifierDecl	num_images = GetNumImages ( )
>767	AssignmentExpr	num_images = GetNumImages ( )
>768	CallExpression	GetNumImages ( )
>769	ArgumentList	 
>770	Callee	GetNumImages
>771	Identifier	GetNumImages
>772	Identifier	num_images
>773	Identifier	num_images
>774	IdentifierDeclType	int
>811	FunctionDef	BundlerApp 
>812	ParameterList	int idx1 , int idx2 , bool removeBadMatches
>813	Parameter	 
>814	Identifier	removeBadMatches
>815	ParameterType	bool
>816	Parameter	 
>817	Identifier	idx2
>818	ParameterType	int
>819	Parameter	 
>820	Identifier	idx1
>821	ParameterType	int
>822	ReturnType	bool
>823	CompoundStatement	 
>824	IfStatement	if ( num_inliers >= MIN_INLIERS )
>825	ElseStatement	else
>826	CompoundStatement	 
>827	ReturnStatement	 
>828	Identifier	false
>829	CompoundStatement	 
>830	ReturnStatement	 
>831	Identifier	true
>832	ExpressionStatement	 
>833	CallExpression	matrix_print ( 3 , 3 , m_transforms [ offset ] . m_H )
>834	ArgumentList	3
>835	Argument	m_transforms [ offset ] . m_H
>836	MemberAccess	m_transforms [ offset ] . m_H
>837	Identifier	m_H
>838	ArrayIndexing	m_transforms [ offset ]
>839	Identifier	offset
>840	Identifier	m_transforms
>841	Argument	3
>842	PrimaryExpression	3
>843	Argument	3
>844	PrimaryExpression	3
>845	Callee	matrix_print
>846	Identifier	matrix_print
>847	ExpressionStatement	 
>848	CallExpression	printf ( \"Ratio[%d,%d] = %0.3e\n\" , idx1 , idx2 , m_transforms [ offset ] . m_inlier_ratio )
>849	ArgumentList	\"Ratio[%d,%d] = %0.3e\n\"
>850	Argument	m_transforms [ offset ] . m_inlier_ratio
>851	MemberAccess	m_transforms [ offset ] . m_inlier_ratio
>852	Identifier	m_inlier_ratio
>853	ArrayIndexing	m_transforms [ offset ]
>854	Identifier	offset
>855	Identifier	m_transforms
>856	Argument	idx2
>857	Identifier	idx2
>858	Argument	idx1
>859	Identifier	idx1
>860	Argument	\"Ratio[%d,%d] = %0.3e\n\"
>861	PrimaryExpression	\"Ratio[%d,%d] = %0.3e\n\"
>862	Callee	printf
>863	Identifier	printf
>864	ExpressionStatement	 
>865	CallExpression	printf ( \"Inliers[%d,%d] = %d out of %d\n\" , idx1 , idx2 , num_inliers , ( int ) m_matches . GetNumMatches ( offset ) )
>866	ArgumentList	\"Inliers[%d,%d] = %d out of %d\n\"
>867	Argument	( int ) m_matches . GetNumMatches ( offset )
>868	CastExpression	( int ) m_matches . GetNumMatches ( offset )
>869	CallExpression	m_matches . GetNumMatches ( offset )
>870	ArgumentList	offset
>871	Argument	offset
>872	Identifier	offset
>873	Callee	m_matches . GetNumMatches
>874	MemberAccess	m_matches . GetNumMatches
>875	Identifier	GetNumMatches
>876	Identifier	m_matches
>877	CastTarget	int
>878	Argument	num_inliers
>879	Identifier	num_inliers
>880	Argument	idx2
>881	Identifier	idx2
>882	Argument	idx1
>883	Identifier	idx1
>884	Argument	\"Inliers[%d,%d] = %d out of %d\n\"
>885	PrimaryExpression	\"Inliers[%d,%d] = %d out of %d\n\"
>886	Callee	printf
>887	Identifier	printf
>888	ExpressionStatement	 
>889	CallExpression	memcpy ( m_transforms [ offset ] . m_H , M , 9 * sizeof ( double ) )
>890	ArgumentList	m_transforms [ offset ] . m_H
>891	Argument	9 * sizeof ( double )
>892	MultiplicativeExpression	9 * sizeof ( double )
>893	SizeofExpr	sizeof ( double )
>894	SizeofOperand	double
>895	Sizeof	sizeof
>896	PrimaryExpression	9
>897	Argument	M
>898	Identifier	M
>899	Argument	m_transforms [ offset ] . m_H
>900	MemberAccess	m_transforms [ offset ] . m_H
>901	Identifier	m_H
>902	ArrayIndexing	m_transforms [ offset ]
>903	Identifier	offset
>904	Identifier	m_transforms
>905	Callee	memcpy
>906	Identifier	memcpy
>907	ExpressionStatement	 
>908	AssignmentExpr	m_transforms [ offset ] . m_inlier_ratio = ( ( double ) num_inliers ) / ( ( double ) list . size ( ) )
>909	MultiplicativeExpression	( ( double ) num_inliers ) / ( ( double ) list . size ( ) )
>910	CastExpression	( double ) list . size ( )
>911	CallExpression	list . size ( )
>912	ArgumentList	 
>913	Callee	list . size
>914	MemberAccess	list . size
>915	Identifier	size
>916	Identifier	list
>917	CastTarget	double
>918	CastExpression	( double ) num_inliers
>919	Identifier	num_inliers
>920	CastTarget	double
>921	MemberAccess	m_transforms [ offset ] . m_inlier_ratio
>922	Identifier	m_inlier_ratio
>923	ArrayIndexing	m_transforms [ offset ]
>924	Identifier	offset
>925	Identifier	m_transforms
>926	ExpressionStatement	 
>927	AssignmentExpr	m_transforms [ offset ] . m_num_inliers = num_inliers
>928	Identifier	num_inliers
>929	MemberAccess	m_transforms [ offset ] . m_num_inliers
>930	Identifier	m_num_inliers
>931	ArrayIndexing	m_transforms [ offset ]
>932	Identifier	offset
>933	Identifier	m_transforms
>934	Condition	 
>935	RelationalExpression	num_inliers >= MIN_INLIERS
>936	Identifier	MIN_INLIERS
>937	Identifier	num_inliers
>938	Statement	 
>939	Statement	 
>940	Statement	 
>941	IfStatement	if ( removeBadMatches )
>942	CompoundStatement	 
>943	ExpressionStatement	 
>944	AssignmentExpr	list = new_match_list
>945	Identifier	new_match_list
>946	Identifier	list
>947	ExpressionStatement	 
>948	CallExpression	list . clear ( )
>949	ArgumentList	 
>950	Callee	list . clear
>951	MemberAccess	list . clear
>952	Identifier	clear
>953	Identifier	list
>954	ForStatement	for ( int i = 0 ; i < num_inliers ; i ++ )
>955	CompoundStatement	 
>956	ExpressionStatement	 
>957	CallExpression	new_match_list . push_back ( list [ inliers [ i ] ] )
>958	ArgumentList	list [ inliers [ i ] ]
>959	Argument	list [ inliers [ i ] ]
>960	ArrayIndexing	list [ inliers [ i ] ]
>961	ArrayIndexing	inliers [ i ]
>962	Identifier	i
>963	Identifier	inliers
>964	Identifier	list
>965	Callee	new_match_list . push_back
>966	MemberAccess	new_match_list . push_back
>967	Identifier	push_back
>968	Identifier	new_match_list
>969	IncDecOp	 
>970	IncDec	++
>971	Identifier	i
>972	Condition	 
>973	RelationalExpression	i < num_inliers
>974	Identifier	num_inliers
>975	Identifier	i
>976	ForInit	 
>977	IdentifierDeclStatement	int i = 0 ;
>978	IdentifierDecl	i = 0
>979	AssignmentExpr	i = 0
>980	PrimaryExpression	0
>981	Identifier	i
>982	Identifier	i
>983	IdentifierDeclType	int
>984	IdentifierDeclStatement	 
>985	IdentifierDecl	new_match_list
>986	Identifier	new_match_list
>987	IdentifierDeclType	std 
>988	Condition	 
>989	Identifier	removeBadMatches
>990	ExpressionStatement	 
>991	CallExpression	printf ( \"Inliers[%d,%d] = %d out of %d\n\" , idx1 , idx2 , num_inliers , ( int ) list . size ( ) )
>992	ArgumentList	\"Inliers[%d,%d] = %d out of %d\n\"
>993	Argument	( int ) list . size ( )
>994	CastExpression	( int ) list . size ( )
>995	CallExpression	list . size ( )
>996	ArgumentList	 
>997	Callee	list . size
>998	MemberAccess	list . size
>999	Identifier	size
>1000	Identifier	list
>1001	CastTarget	int
>1002	Argument	num_inliers
>1003	Identifier	num_inliers
>1004	Argument	idx2
>1005	Identifier	idx2
>1006	Argument	idx1
>1007	Identifier	idx1
>1008	Argument	\"Inliers[%d,%d] = %d out of %d\n\"
>1009	PrimaryExpression	\"Inliers[%d,%d] = %d out of %d\n\"
>1010	Callee	printf
>1011	Identifier	printf
>1012	IdentifierDeclStatement	 
>1013	IdentifierDecl	num_inliers = ( int ) inliers . size ( )
>1014	AssignmentExpr	num_inliers = ( int ) inliers . size ( )
>1015	CastExpression	( int ) inliers . size ( )
>1016	CallExpression	inliers . size ( )
>1017	ArgumentList	 
>1018	Callee	inliers . size
>1019	MemberAccess	inliers . size
>1020	Identifier	size
>1021	Identifier	inliers
>1022	CastTarget	int
>1023	Identifier	num_inliers
>1024	Identifier	num_inliers
>1025	IdentifierDeclType	int
>1026	IdentifierDeclStatement	 
>1027	IdentifierDecl	inliers = EstimateTransform ( m_image_data [ idx1 ] . m_keys , m_image_data [ idx2 ] . m_keys , list , MotionHomography , \
>1028	AssignmentExpr	inliers = EstimateTransform ( m_image_data [ idx1 ] . m_keys , m_image_data [ idx2 ] . m_keys , list , \
>1029	CallExpression	EstimateTransform ( m_image_data [ idx1 ] . m_keys , m_image_data [ idx2 ] . m_keys , list , MotionHomography , \
>1030	ArgumentList	m_image_data [ idx1 ] . m_keys
>1031	Argument	M
>1032	Identifier	M
>1033	Argument	m_homography_threshold
>1034	Identifier	m_homography_threshold
>1035	Argument	m_homography_rounds
>1036	Identifier	m_homography_rounds
>1037	Argument	MotionHomography
>1038	Identifier	MotionHomography
>1039	Argument	list
>1040	Identifier	list
>1041	Argument	m_image_data [ idx2 ] . m_keys
>1042	MemberAccess	m_image_data [ idx2 ] . m_keys
>1043	Identifier	m_keys
>1044	ArrayIndexing	m_image_data [ idx2 ]
>1045	Identifier	idx2
>1046	Identifier	m_image_data
>1047	Argument	m_image_data [ idx1 ] . m_keys
>1048	MemberAccess	m_image_data [ idx1 ] . m_keys
>1049	Identifier	m_keys
>1050	ArrayIndexing	m_image_data [ idx1 ]
>1051	Identifier	idx1
>1052	Identifier	m_image_data
>1053	Callee	EstimateTransform
>1054	Identifier	EstimateTransform
>1055	Identifier	inliers
>1056	Identifier	inliers
>1057	IdentifierDeclType	std 
>1058	IdentifierDeclStatement	 
>1059	IdentifierDecl	& list = m_matches . GetMatchList ( offset )
>1060	AssignmentExpr	& list = m_matches . GetMatchList ( offset )
>1061	CallExpression	m_matches . GetMatchList ( offset )
>1062	ArgumentList	offset
>1063	Argument	offset
>1064	Identifier	offset
>1065	Callee	m_matches . GetMatchList
>1066	MemberAccess	m_matches . GetMatchList
>1067	Identifier	GetMatchList
>1068	Identifier	m_matches
>1069	Identifier	list
>1070	Identifier	list
>1071	IdentifierDeclType	std 
>1072	IfStatement	if ( idx1 == idx2 )
>1073	CompoundStatement	 
>1074	ReturnStatement	 
>1075	Identifier	false
>1076	ExpressionStatement	 
>1077	Statement	 
>1078	Statement	 
>1079	Statement	 
>1080	Statement	 
>1081	Statement	 
>1082	Condition	 
>1083	EqualityExpression	idx1 == idx2
>1084	Identifier	idx2
>1085	Identifier	idx1
>1086	IdentifierDeclStatement	 
>1087	IdentifierDecl	M [ 9 ]
>1088	PrimaryExpression	9
>1089	Identifier	M
>1090	IdentifierDeclType	double [ 9 ]
>1091	IdentifierDeclStatement	 
>1092	IdentifierDecl	offset = GetMatchIndex ( idx1 , idx2 )
>1093	AssignmentExpr	offset = GetMatchIndex ( idx1 , idx2 )
>1094	CallExpression	GetMatchIndex ( idx1 , idx2 )
>1095	ArgumentList	idx1
>1096	Argument	idx2
>1097	Identifier	idx2
>1098	Argument	idx1
>1099	Identifier	idx1
>1100	Callee	GetMatchIndex
>1101	Identifier	GetMatchIndex
>1102	Identifier	offset
>1103	Identifier	offset
>1104	IdentifierDeclType	MatchIndex
>1105	ExpressionStatement	 
>1106	CallExpression	assert ( m_image_data [ idx2 ] . m_keys_loaded )
>1107	ArgumentList	m_image_data [ idx2 ] . m_keys_loaded
>1108	Argument	m_image_data [ idx2 ] . m_keys_loaded
>1109	MemberAccess	m_image_data [ idx2 ] . m_keys_loaded
>1110	Identifier	m_keys_loaded
>1111	ArrayIndexing	m_image_data [ idx2 ]
>1112	Identifier	idx2
>1113	Identifier	m_image_data
>1114	Callee	assert
>1115	Identifier	assert
>1116	ExpressionStatement	 
>1117	CallExpression	assert ( m_image_data [ idx1 ] . m_keys_loaded )
>1118	ArgumentList	m_image_data [ idx1 ] . m_keys_loaded
>1119	Argument	m_image_data [ idx1 ] . m_keys_loaded
>1120	MemberAccess	m_image_data [ idx1 ] . m_keys_loaded
>1121	Identifier	m_keys_loaded
>1122	ArrayIndexing	m_image_data [ idx1 ]
>1123	Identifier	idx1
>1124	Identifier	m_image_data
>1125	Callee	assert
>1126	Identifier	assert
>1172	FunctionDef	BundlerApp 
>1173	ParameterList	bool removeBadMatches , int new_image_start
>1174	Parameter	 
>1175	Identifier	new_image_start
>1176	ParameterType	int
>1177	Parameter	 
>1178	Identifier	removeBadMatches
>1179	ParameterType	bool
>1180	ReturnType	void
>1181	CompoundStatement	 
>1182	ExpressionStatement	 
>1183	CallExpression	fclose ( f )
>1184	ArgumentList	f
>1185	Argument	f
>1186	Identifier	f
>1187	Callee	fclose
>1188	Identifier	fclose
>1189	ForStatement	for ( unsigned int i = 0 ; i < num_images ; i ++ )
>1190	CompoundStatement	 
>1191	ForStatement	for ( iter = m_matches . Begin ( i ) ; iter != m_matches . End ( i ) ; iter ++ )
>1192	CompoundStatement	 
>1193	ExpressionStatement	 
>1194	CallExpression	fprintf ( f , \"%d %d %0.5f\n\" , i , j , m_transforms [ idx ] . m_inlier_ratio )
>1195	ArgumentList	f
>1196	Argument	m_transforms [ idx ] . m_inlier_ratio
>1197	MemberAccess	m_transforms [ idx ] . m_inlier_ratio
>1198	Identifier	m_inlier_ratio
>1199	ArrayIndexing	m_transforms [ idx ]
>1200	Identifier	idx
>1201	Identifier	m_transforms
>1202	Argument	j
>1203	Identifier	j
>1204	Argument	i
>1205	Identifier	i
>1206	Argument	\"%d %d %0.5f\n\"
>1207	PrimaryExpression	\"%d %d %0.5f\n\"
>1208	Argument	f
>1209	Identifier	f
>1210	Callee	fprintf
>1211	Identifier	fprintf
>1212	IdentifierDeclStatement	 
>1213	IdentifierDecl	idx = GetMatchIndex ( i , j )
>1214	AssignmentExpr	idx = GetMatchIndex ( i , j )
>1215	CallExpression	GetMatchIndex ( i , j )
>1216	ArgumentList	i
>1217	Argument	j
>1218	Identifier	j
>1219	Argument	i
>1220	Identifier	i
>1221	Callee	GetMatchIndex
>1222	Identifier	GetMatchIndex
>1223	Identifier	idx
>1224	Identifier	idx
>1225	IdentifierDeclType	MatchIndex
>1226	ExpressionStatement	 
>1227	CallExpression	assert ( ImagesMatch ( i , j ) )
>1228	ArgumentList	ImagesMatch ( i , j )
>1229	Argument	ImagesMatch ( i , j )
>1230	CallExpression	ImagesMatch ( i , j )
>1231	ArgumentList	i
>1232	Argument	j
>1233	Identifier	j
>1234	Argument	i
>1235	Identifier	i
>1236	Callee	ImagesMatch
>1237	Identifier	ImagesMatch
>1238	Callee	assert
>1239	Identifier	assert
>1240	IdentifierDeclStatement	 
>1241	IdentifierDecl	j = iter -> m_index
>1242	AssignmentExpr	j = iter -> m_index
>1243	PtrMemberAccess	iter -> m_index
>1244	Identifier	m_index
>1245	Identifier	iter
>1246	Identifier	j
>1247	Identifier	j
>1248	IdentifierDeclType	unsigned int
>1249	IncDecOp	 
>1250	IncDec	++
>1251	Identifier	iter
>1252	Condition	 
>1253	EqualityExpression	iter != m_matches . End ( i )
>1254	CallExpression	m_matches . End ( i )
>1255	ArgumentList	i
>1256	Argument	i
>1257	Identifier	i
>1258	Callee	m_matches . End
>1259	MemberAccess	m_matches . End
>1260	Identifier	End
>1261	Identifier	m_matches
>1262	Identifier	iter
>1263	ForInit	 
>1264	AssignmentExpr	iter = m_matches . Begin ( i )
>1265	CallExpression	m_matches . Begin ( i )
>1266	ArgumentList	i
>1267	Argument	i
>1268	Identifier	i
>1269	Callee	m_matches . Begin
>1270	MemberAccess	m_matches . Begin
>1271	Identifier	Begin
>1272	Identifier	m_matches
>1273	Identifier	iter
>1274	IdentifierDeclStatement	 
>1275	IdentifierDecl	iter
>1276	Identifier	iter
>1277	IdentifierDeclType	MatchAdjList 
>1278	IncDecOp	 
>1279	IncDec	++
>1280	Identifier	i
>1281	Condition	 
>1282	RelationalExpression	i < num_images
>1283	Identifier	num_images
>1284	Identifier	i
>1285	ForInit	 
>1286	IdentifierDeclStatement	unsigned int i = 0 ;
>1287	IdentifierDecl	i = 0
>1288	AssignmentExpr	i = 0
>1289	PrimaryExpression	0
>1290	Identifier	i
>1291	Identifier	i
>1292	IdentifierDeclType	unsigned int
>1293	IdentifierDeclStatement	 
>1294	IdentifierDecl	* f = fopen ( \"pairwise_scores.txt\" , \"w\" )
>1295	AssignmentExpr	* f = fopen ( \"pairwise_scores.txt\" , \"w\" )
>1296	CallExpression	fopen ( \"pairwise_scores.txt\" , \"w\" )
>1297	ArgumentList	\"pairwise_scores.txt\"
>1298	Argument	\"w\"
>1299	PrimaryExpression	\"w\"
>1300	Argument	\"pairwise_scores.txt\"
>1301	PrimaryExpression	\"pairwise_scores.txt\"
>1302	Callee	fopen
>1303	Identifier	fopen
>1304	Identifier	f
>1305	Identifier	f
>1306	IdentifierDeclType	FILE *
>1307	ForStatement	for ( unsigned int i = 0 ; i < num_images ; i ++ )
>1308	CompoundStatement	 
>1309	ForStatement	for ( iter = m_matches . Begin ( i ) ; iter != m_matches . End ( i ) ; iter ++ )
>1310	CompoundStatement	 
>1311	IfStatement	if ( ! connect12 )
>1312	ElseStatement	else
>1313	CompoundStatement	 
>1314	ExpressionStatement	 
>1315	CallExpression	matrix_invert ( 3 , m_transforms [ idx ] . m_H , m_transforms [ idx_rev ] . m_H )
>1316	ArgumentList	3
>1317	Argument	m_transforms [ idx_rev ] . m_H
>1318	MemberAccess	m_transforms [ idx_rev ] . m_H
>1319	Identifier	m_H
>1320	ArrayIndexing	m_transforms [ idx_rev ]
>1321	Identifier	idx_rev
>1322	Identifier	m_transforms
>1323	Argument	m_transforms [ idx ] . m_H
>1324	MemberAccess	m_transforms [ idx ] . m_H
>1325	Identifier	m_H
>1326	ArrayIndexing	m_transforms [ idx ]
>1327	Identifier	idx
>1328	Identifier	m_transforms
>1329	Argument	3
>1330	PrimaryExpression	3
>1331	Callee	matrix_invert
>1332	Identifier	matrix_invert
>1333	CompoundStatement	 
>1334	IfStatement	if ( removeBadMatches )
>1335	CompoundStatement	 
>1336	ExpressionStatement	 
>1337	CallExpression	m_transforms . erase ( idx_rev )
>1338	ArgumentList	idx_rev
>1339	Argument	idx_rev
>1340	Identifier	idx_rev
>1341	Callee	m_transforms . erase
>1342	MemberAccess	m_transforms . erase
>1343	Identifier	erase
>1344	Identifier	m_transforms
>1345	ExpressionStatement	 
>1346	CallExpression	m_transforms . erase ( idx )
>1347	ArgumentList	idx
>1348	Argument	idx
>1349	Identifier	idx
>1350	Callee	m_transforms . erase
>1351	MemberAccess	m_transforms . erase
>1352	Identifier	erase
>1353	Identifier	m_transforms
>1354	ExpressionStatement	 
>1355	CallExpression	m_matches . RemoveMatch ( idx_rev )
>1356	ArgumentList	idx_rev
>1357	Argument	idx_rev
>1358	Identifier	idx_rev
>1359	Callee	m_matches . RemoveMatch
>1360	MemberAccess	m_matches . RemoveMatch
>1361	Identifier	RemoveMatch
>1362	Identifier	m_matches
>1363	ExpressionStatement	 
>1364	CallExpression	m_matches . RemoveMatch ( idx )
>1365	ArgumentList	idx
>1366	Argument	idx
>1367	Identifier	idx
>1368	Callee	m_matches . RemoveMatch
>1369	MemberAccess	m_matches . RemoveMatch
>1370	Identifier	RemoveMatch
>1371	Identifier	m_matches
>1372	Condition	 
>1373	Identifier	removeBadMatches
>1374	Condition	 
>1375	UnaryOp	! connect12
>1376	Identifier	connect12
>1377	UnaryOperator	!
>1378	IdentifierDeclStatement	 
>1379	IdentifierDecl	connect12 = ComputeTransform ( i , j , removeBadMatches )
>1380	AssignmentExpr	connect12 = ComputeTransform ( i , j , removeBadMatches )
>1381	CallExpression	ComputeTransform ( i , j , removeBadMatches )
>1382	ArgumentList	i
>1383	Argument	removeBadMatches
>1384	Identifier	removeBadMatches
>1385	Argument	j
>1386	Identifier	j
>1387	Argument	i
>1388	Identifier	i
>1389	Callee	ComputeTransform
>1390	Identifier	ComputeTransform
>1391	Identifier	connect12
>1392	Identifier	connect12
>1393	IdentifierDeclType	bool
>1394	ExpressionStatement	 
>1395	AssignmentExpr	m_transforms [ idx_rev ] = TransformInfo ( )
>1396	CallExpression	TransformInfo ( )
>1397	ArgumentList	 
>1398	Callee	TransformInfo
>1399	Identifier	TransformInfo
>1400	ArrayIndexing	m_transforms [ idx_rev ]
>1401	Identifier	idx_rev
>1402	Identifier	m_transforms
>1403	ExpressionStatement	 
>1404	AssignmentExpr	m_transforms [ idx ] = TransformInfo ( )
>1405	CallExpression	TransformInfo ( )
>1406	ArgumentList	 
>1407	Callee	TransformInfo
>1408	Identifier	TransformInfo
>1409	ArrayIndexing	m_transforms [ idx ]
>1410	Identifier	idx
>1411	Identifier	m_transforms
>1412	IdentifierDeclStatement	 
>1413	IdentifierDecl	idx_rev = GetMatchIndex ( j , i )
>1414	AssignmentExpr	idx_rev = GetMatchIndex ( j , i )
>1415	CallExpression	GetMatchIndex ( j , i )
>1416	ArgumentList	j
>1417	Argument	i
>1418	Identifier	i
>1419	Argument	j
>1420	Identifier	j
>1421	Callee	GetMatchIndex
>1422	Identifier	GetMatchIndex
>1423	Identifier	idx_rev
>1424	Identifier	idx_rev
>1425	IdentifierDeclType	MatchIndex
>1426	IdentifierDeclStatement	 
>1427	IdentifierDecl	idx = GetMatchIndex ( i , j )
>1428	AssignmentExpr	idx = GetMatchIndex ( i , j )
>1429	CallExpression	GetMatchIndex ( i , j )
>1430	ArgumentList	i
>1431	Argument	j
>1432	Identifier	j
>1433	Argument	i
>1434	Identifier	i
>1435	Callee	GetMatchIndex
>1436	Identifier	GetMatchIndex
>1437	Identifier	idx
>1438	Identifier	idx
>1439	IdentifierDeclType	MatchIndex
>1440	ExpressionStatement	 
>1441	CallExpression	assert ( ImagesMatch ( i , j ) )
>1442	ArgumentList	ImagesMatch ( i , j )
>1443	Argument	ImagesMatch ( i , j )
>1444	CallExpression	ImagesMatch ( i , j )
>1445	ArgumentList	i
>1446	Argument	j
>1447	Identifier	j
>1448	Argument	i
>1449	Identifier	i
>1450	Callee	ImagesMatch
>1451	Identifier	ImagesMatch
>1452	Callee	assert
>1453	Identifier	assert
>1454	IdentifierDeclStatement	 
>1455	IdentifierDecl	j = iter -> m_index
>1456	AssignmentExpr	j = iter -> m_index
>1457	PtrMemberAccess	iter -> m_index
>1458	Identifier	m_index
>1459	Identifier	iter
>1460	Identifier	j
>1461	Identifier	j
>1462	IdentifierDeclType	unsigned int
>1463	IncDecOp	 
>1464	IncDec	++
>1465	Identifier	iter
>1466	Condition	 
>1467	EqualityExpression	iter != m_matches . End ( i )
>1468	CallExpression	m_matches . End ( i )
>1469	ArgumentList	i
>1470	Argument	i
>1471	Identifier	i
>1472	Callee	m_matches . End
>1473	MemberAccess	m_matches . End
>1474	Identifier	End
>1475	Identifier	m_matches
>1476	Identifier	iter
>1477	ForInit	 
>1478	AssignmentExpr	iter = m_matches . Begin ( i )
>1479	CallExpression	m_matches . Begin ( i )
>1480	ArgumentList	i
>1481	Argument	i
>1482	Identifier	i
>1483	Callee	m_matches . Begin
>1484	MemberAccess	m_matches . Begin
>1485	Identifier	Begin
>1486	Identifier	m_matches
>1487	Identifier	iter
>1488	IdentifierDeclStatement	 
>1489	IdentifierDecl	iter
>1490	Identifier	iter
>1491	IdentifierDeclType	MatchAdjList 
>1492	IncDecOp	 
>1493	IncDec	++
>1494	Identifier	i
>1495	Condition	 
>1496	RelationalExpression	i < num_images
>1497	Identifier	num_images
>1498	Identifier	i
>1499	ForInit	 
>1500	IdentifierDeclStatement	unsigned int i = 0 ;
>1501	IdentifierDecl	i = 0
>1502	AssignmentExpr	i = 0
>1503	PrimaryExpression	0
>1504	Identifier	i
>1505	Identifier	i
>1506	IdentifierDeclType	unsigned int
>1507	ExpressionStatement	 
>1508	CallExpression	m_transforms . clear ( )
>1509	ArgumentList	 
>1510	Callee	m_transforms . clear
>1511	MemberAccess	m_transforms . clear
>1512	Identifier	clear
>1513	Identifier	m_transforms
>1514	IdentifierDeclStatement	 
>1515	IdentifierDecl	num_images = GetNumImages ( )
>1516	AssignmentExpr	num_images = GetNumImages ( )
>1517	CallExpression	GetNumImages ( )
>1518	ArgumentList	 
>1519	Callee	GetNumImages
>1520	Identifier	GetNumImages
>1521	Identifier	num_images
>1522	Identifier	num_images
>1523	IdentifierDeclType	unsigned int
>1555	FunctionDef	BundlerApp 
>1556	ParameterList	int idx1 , int idx2 , bool removeBadMatches
>1557	Parameter	 
>1558	Identifier	removeBadMatches
>1559	ParameterType	bool
>1560	Parameter	 
>1561	Identifier	idx2
>1562	ParameterType	int
>1563	Parameter	 
>1564	Identifier	idx1
>1565	ParameterType	int
>1566	ReturnType	bool
>1567	CompoundStatement	 
>1568	IfStatement	if ( num_inliers >= m_min_num_feat_matches )
>1569	ElseStatement	else
>1570	CompoundStatement	 
>1571	ReturnStatement	 
>1572	Identifier	false
>1573	CompoundStatement	 
>1574	ReturnStatement	 
>1575	Identifier	true
>1576	ExpressionStatement	 
>1577	CallExpression	printf ( \"Inliers[%d,%d] = %d out of %lu\n\" , idx1 , idx2 , num_inliers , list . size ( ) )
>1578	ArgumentList	\"Inliers[%d,%d] = %d out of %lu\n\"
>1579	Argument	list . size ( )
>1580	CallExpression	list . size ( )
>1581	ArgumentList	 
>1582	Callee	list . size
>1583	MemberAccess	list . size
>1584	Identifier	size
>1585	Identifier	list
>1586	Argument	num_inliers
>1587	Identifier	num_inliers
>1588	Argument	idx2
>1589	Identifier	idx2
>1590	Argument	idx1
>1591	Identifier	idx1
>1592	Argument	\"Inliers[%d,%d] = %d out of %lu\n\"
>1593	PrimaryExpression	\"Inliers[%d,%d] = %d out of %lu\n\"
>1594	Callee	printf
>1595	Identifier	printf
>1596	ExpressionStatement	 
>1597	CallExpression	memcpy ( m_transforms [ offset ] . m_fmatrix , F , 9 * sizeof ( double ) )
>1598	ArgumentList	m_transforms [ offset ] . m_fmatrix
>1599	Argument	9 * sizeof ( double )
>1600	MultiplicativeExpression	9 * sizeof ( double )
>1601	SizeofExpr	sizeof ( double )
>1602	SizeofOperand	double
>1603	Sizeof	sizeof
>1604	PrimaryExpression	9
>1605	Argument	F
>1606	Identifier	F
>1607	Argument	m_transforms [ offset ] . m_fmatrix
>1608	MemberAccess	m_transforms [ offset ] . m_fmatrix
>1609	Identifier	m_fmatrix
>1610	ArrayIndexing	m_transforms [ offset ]
>1611	Identifier	offset
>1612	Identifier	m_transforms
>1613	Callee	memcpy
>1614	Identifier	memcpy
>1615	ExpressionStatement	 
>1616	AssignmentExpr	m_transforms [ offset_rev ] = TransformInfo ( )
>1617	CallExpression	TransformInfo ( )
>1618	ArgumentList	 
>1619	Callee	TransformInfo
>1620	Identifier	TransformInfo
>1621	ArrayIndexing	m_transforms [ offset_rev ]
>1622	Identifier	offset_rev
>1623	Identifier	m_transforms
>1624	ExpressionStatement	 
>1625	AssignmentExpr	m_transforms [ offset ] = TransformInfo ( )
>1626	CallExpression	TransformInfo ( )
>1627	ArgumentList	 
>1628	Callee	TransformInfo
>1629	Identifier	TransformInfo
>1630	ArrayIndexing	m_transforms [ offset ]
>1631	Identifier	offset
>1632	Identifier	m_transforms
>1633	Condition	 
>1634	RelationalExpression	num_inliers >= m_min_num_feat_matches
>1635	Identifier	m_min_num_feat_matches
>1636	Identifier	num_inliers
>1637	Statement	 
>1638	Statement	 
>1639	Statement	 
>1640	IfStatement	if ( removeBadMatches )
>1641	CompoundStatement	 
>1642	ExpressionStatement	 
>1643	AssignmentExpr	list = new_match_list
>1644	Identifier	new_match_list
>1645	Identifier	list
>1646	ExpressionStatement	 
>1647	CallExpression	list . clear ( )
>1648	ArgumentList	 
>1649	Callee	list . clear
>1650	MemberAccess	list . clear
>1651	Identifier	clear
>1652	Identifier	list
>1653	ForStatement	for ( int i = 0 ; i < num_inliers ; i ++ )
>1654	CompoundStatement	 
>1655	ExpressionStatement	 
>1656	CallExpression	new_match_list . push_back ( list [ inliers [ i ] ] )
>1657	ArgumentList	list [ inliers [ i ] ]
>1658	Argument	list [ inliers [ i ] ]
>1659	ArrayIndexing	list [ inliers [ i ] ]
>1660	ArrayIndexing	inliers [ i ]
>1661	Identifier	i
>1662	Identifier	inliers
>1663	Identifier	list
>1664	Callee	new_match_list . push_back
>1665	MemberAccess	new_match_list . push_back
>1666	Identifier	push_back
>1667	Identifier	new_match_list
>1668	IncDecOp	 
>1669	IncDec	++
>1670	Identifier	i
>1671	Condition	 
>1672	RelationalExpression	i < num_inliers
>1673	Identifier	num_inliers
>1674	Identifier	i
>1675	ForInit	 
>1676	IdentifierDeclStatement	int i = 0 ;
>1677	IdentifierDecl	i = 0
>1678	AssignmentExpr	i = 0
>1679	PrimaryExpression	0
>1680	Identifier	i
>1681	Identifier	i
>1682	IdentifierDeclType	int
>1683	IdentifierDeclStatement	 
>1684	IdentifierDecl	new_match_list
>1685	Identifier	new_match_list
>1686	IdentifierDeclType	std 
>1687	Condition	 
>1688	Identifier	removeBadMatches
>1689	ExpressionStatement	 
>1690	CallExpression	printf ( \"Inliers[%d,%d] = %d out of %d\n\" , idx1 , idx2 , num_inliers , ( int ) list . size ( ) )
>1691	ArgumentList	\"Inliers[%d,%d] = %d out of %d\n\"
>1692	Argument	( int ) list . size ( )
>1693	CastExpression	( int ) list . size ( )
>1694	CallExpression	list . size ( )
>1695	ArgumentList	 
>1696	Callee	list . size
>1697	MemberAccess	list . size
>1698	Identifier	size
>1699	Identifier	list
>1700	CastTarget	int
>1701	Argument	num_inliers
>1702	Identifier	num_inliers
>1703	Argument	idx2
>1704	Identifier	idx2
>1705	Argument	idx1
>1706	Identifier	idx1
>1707	Argument	\"Inliers[%d,%d] = %d out of %d\n\"
>1708	PrimaryExpression	\"Inliers[%d,%d] = %d out of %d\n\"
>1709	Callee	printf
>1710	Identifier	printf
>1711	IdentifierDeclStatement	 
>1712	IdentifierDecl	num_inliers = ( int ) inliers . size ( )
>1713	AssignmentExpr	num_inliers = ( int ) inliers . size ( )
>1714	CastExpression	( int ) inliers . size ( )
>1715	CallExpression	inliers . size ( )
>1716	ArgumentList	 
>1717	Callee	inliers . size
>1718	MemberAccess	inliers . size
>1719	Identifier	size
>1720	Identifier	inliers
>1721	CastTarget	int
>1722	Identifier	num_inliers
>1723	Identifier	num_inliers
>1724	IdentifierDeclType	int
>1725	IdentifierDeclStatement	 
>1726	IdentifierDecl	inliers = EstimateFMatrix ( m_image_data [ idx1 ] . m_keys , m_image_data [ idx2 ] . m_keys , list , m_fmatrix_rounds , \
>1727	AssignmentExpr	inliers = EstimateFMatrix ( m_image_data [ idx1 ] . m_keys , m_image_data [ idx2 ] . m_keys , list , \
>1728	CallExpression	EstimateFMatrix ( m_image_data [ idx1 ] . m_keys , m_image_data [ idx2 ] . m_keys , list , m_fmatrix_rounds , m_\
>1729	ArgumentList	m_image_data [ idx1 ] . m_keys
>1730	Argument	F
>1731	Identifier	F
>1732	Argument	m_fmatrix_threshold
>1733	Identifier	m_fmatrix_threshold
>1734	Argument	m_fmatrix_rounds
>1735	Identifier	m_fmatrix_rounds
>1736	Argument	list
>1737	Identifier	list
>1738	Argument	m_image_data [ idx2 ] . m_keys
>1739	MemberAccess	m_image_data [ idx2 ] . m_keys
>1740	Identifier	m_keys
>1741	ArrayIndexing	m_image_data [ idx2 ]
>1742	Identifier	idx2
>1743	Identifier	m_image_data
>1744	Argument	m_image_data [ idx1 ] . m_keys
>1745	MemberAccess	m_image_data [ idx1 ] . m_keys
>1746	Identifier	m_keys
>1747	ArrayIndexing	m_image_data [ idx1 ]
>1748	Identifier	idx1
>1749	Identifier	m_image_data
>1750	Callee	EstimateFMatrix
>1751	Identifier	EstimateFMatrix
>1752	Identifier	inliers
>1753	Identifier	inliers
>1754	IdentifierDeclType	std 
>1755	IdentifierDeclStatement	 
>1756	IdentifierDecl	F [ 9 ]
>1757	PrimaryExpression	9
>1758	Identifier	F
>1759	IdentifierDeclType	double [ 9 ]
>1760	IdentifierDeclStatement	 
>1761	IdentifierDecl	& list = m_matches . GetMatchList ( offset )
>1762	AssignmentExpr	& list = m_matches . GetMatchList ( offset )
>1763	CallExpression	m_matches . GetMatchList ( offset )
>1764	ArgumentList	offset
>1765	Argument	offset
>1766	Identifier	offset
>1767	Callee	m_matches . GetMatchList
>1768	MemberAccess	m_matches . GetMatchList
>1769	Identifier	GetMatchList
>1770	Identifier	m_matches
>1771	Identifier	list
>1772	Identifier	list
>1773	IdentifierDeclType	std 
>1774	IdentifierDeclStatement	 
>1775	IdentifierDecl	offset_rev = GetMatchIndex ( idx2 , idx1 )
>1776	AssignmentExpr	offset_rev = GetMatchIndex ( idx2 , idx1 )
>1777	CallExpression	GetMatchIndex ( idx2 , idx1 )
>1778	ArgumentList	idx2
>1779	Argument	idx1
>1780	Identifier	idx1
>1781	Argument	idx2
>1782	Identifier	idx2
>1783	Callee	GetMatchIndex
>1784	Identifier	GetMatchIndex
>1785	Identifier	offset_rev
>1786	Identifier	offset_rev
>1787	IdentifierDeclType	MatchIndex
>1788	IdentifierDeclStatement	 
>1789	IdentifierDecl	offset = GetMatchIndex ( idx1 , idx2 )
>1790	AssignmentExpr	offset = GetMatchIndex ( idx1 , idx2 )
>1791	CallExpression	GetMatchIndex ( idx1 , idx2 )
>1792	ArgumentList	idx1
>1793	Argument	idx2
>1794	Identifier	idx2
>1795	Argument	idx1
>1796	Identifier	idx1
>1797	Callee	GetMatchIndex
>1798	Identifier	GetMatchIndex
>1799	Identifier	offset
>1800	Identifier	offset
>1801	IdentifierDeclType	MatchIndex
>1802	ExpressionStatement	 
>1803	CallExpression	assert ( m_image_data [ idx2 ] . m_keys_loaded )
>1804	ArgumentList	m_image_data [ idx2 ] . m_keys_loaded
>1805	Argument	m_image_data [ idx2 ] . m_keys_loaded
>1806	MemberAccess	m_image_data [ idx2 ] . m_keys_loaded
>1807	Identifier	m_keys_loaded
>1808	ArrayIndexing	m_image_data [ idx2 ]
>1809	Identifier	idx2
>1810	Identifier	m_image_data
>1811	Callee	assert
>1812	Identifier	assert
>1813	ExpressionStatement	 
>1814	CallExpression	assert ( m_image_data [ idx1 ] . m_keys_loaded )
>1815	ArgumentList	m_image_data [ idx1 ] . m_keys_loaded
>1816	Argument	m_image_data [ idx1 ] . m_keys_loaded
>1817	MemberAccess	m_image_data [ idx1 ] . m_keys_loaded
>1818	Identifier	m_keys_loaded
>1819	ArrayIndexing	m_image_data [ idx1 ]
>1820	Identifier	idx1
>1821	Identifier	m_image_data
>1822	Callee	assert
>1823	Identifier	assert
>1868	FunctionDef	BundlerApp 
>1869	ParameterList	bool removeBadMatches , int new_image_start
>1870	Parameter	 
>1871	Identifier	new_image_start
>1872	ParameterType	int
>1873	Parameter	 
>1874	Identifier	removeBadMatches
>1875	ParameterType	bool
>1876	ReturnType	void
>1877	CompoundStatement	 
>1878	ForStatement	for ( int i = 0 ; i < num_removed ; i ++ )
>1879	CompoundStatement	 
>1880	ExpressionStatement	 
>1881	CallExpression	m_matches . RemoveMatch ( GetMatchIndex ( img1 , img2 ) )
>1882	ArgumentList	GetMatchIndex ( img1 , img2 )
>1883	Argument	GetMatchIndex ( img1 , img2 )
>1884	CallExpression	GetMatchIndex ( img1 , img2 )
>1885	ArgumentList	img1
>1886	Argument	img2
>1887	Identifier	img2
>1888	Argument	img1
>1889	Identifier	img1
>1890	Callee	GetMatchIndex
>1891	Identifier	GetMatchIndex
>1892	Callee	m_matches . RemoveMatch
>1893	MemberAccess	m_matches . RemoveMatch
>1894	Identifier	RemoveMatch
>1895	Identifier	m_matches
>1896	IdentifierDeclStatement	 
>1897	IdentifierDecl	img2 = remove [ i ] . second
>1898	AssignmentExpr	img2 = remove [ i ] . second
>1899	MemberAccess	remove [ i ] . second
>1900	Identifier	second
>1901	ArrayIndexing	remove [ i ]
>1902	Identifier	i
>1903	Identifier	remove
>1904	Identifier	img2
>1905	Identifier	img2
>1906	IdentifierDeclType	int
>1907	IdentifierDeclStatement	 
>1908	IdentifierDecl	img1 = remove [ i ] . first
>1909	AssignmentExpr	img1 = remove [ i ] . first
>1910	MemberAccess	remove [ i ] . first
>1911	Identifier	first
>1912	ArrayIndexing	remove [ i ]
>1913	Identifier	i
>1914	Identifier	remove
>1915	Identifier	img1
>1916	Identifier	img1
>1917	IdentifierDeclType	int
>1918	IncDecOp	 
>1919	IncDec	++
>1920	Identifier	i
>1921	Condition	 
>1922	RelationalExpression	i < num_removed
>1923	Identifier	num_removed
>1924	Identifier	i
>1925	ForInit	 
>1926	IdentifierDeclStatement	int i = 0 ;
>1927	IdentifierDecl	i = 0
>1928	AssignmentExpr	i = 0
>1929	PrimaryExpression	0
>1930	Identifier	i
>1931	Identifier	i
>1932	IdentifierDeclType	int
>1933	IdentifierDeclStatement	 
>1934	IdentifierDecl	num_removed = ( int ) remove . size ( )
>1935	AssignmentExpr	num_removed = ( int ) remove . size ( )
>1936	CastExpression	( int ) remove . size ( )
>1937	CallExpression	remove . size ( )
>1938	ArgumentList	 
>1939	Callee	remove . size
>1940	MemberAccess	remove . size
>1941	Identifier	size
>1942	Identifier	remove
>1943	CastTarget	int
>1944	Identifier	num_removed
>1945	Identifier	num_removed
>1946	IdentifierDeclType	int
>1947	ForStatement	for ( unsigned int i = 0 ; i < num_images ; i ++ )
>1948	CompoundStatement	 
>1949	ForStatement	for ( iter = m_matches . Begin ( i ) ; iter != m_matches . End ( i ) ; iter ++ )
>1950	CompoundStatement	 
>1951	IfStatement	if ( ! connect12 )
>1952	ElseStatement	else
>1953	CompoundStatement	 
>1954	ExpressionStatement	 
>1955	CallExpression	matrix_transpose ( 3 , 3 , m_transforms [ idx ] . m_fmatrix , m_transforms [ idx_rev ] . m_fmatrix )
>1956	ArgumentList	3
>1957	Argument	m_transforms [ idx_rev ] . m_fmatrix
>1958	MemberAccess	m_transforms [ idx_rev ] . m_fmatrix
>1959	Identifier	m_fmatrix
>1960	ArrayIndexing	m_transforms [ idx_rev ]
>1961	Identifier	idx_rev
>1962	Identifier	m_transforms
>1963	Argument	m_transforms [ idx ] . m_fmatrix
>1964	MemberAccess	m_transforms [ idx ] . m_fmatrix
>1965	Identifier	m_fmatrix
>1966	ArrayIndexing	m_transforms [ idx ]
>1967	Identifier	idx
>1968	Identifier	m_transforms
>1969	Argument	3
>1970	PrimaryExpression	3
>1971	Argument	3
>1972	PrimaryExpression	3
>1973	Callee	matrix_transpose
>1974	Identifier	matrix_transpose
>1975	CompoundStatement	 
>1976	IfStatement	if ( removeBadMatches )
>1977	CompoundStatement	 
>1978	ExpressionStatement	 
>1979	CallExpression	m_transforms . erase ( idx_rev )
>1980	ArgumentList	idx_rev
>1981	Argument	idx_rev
>1982	Identifier	idx_rev
>1983	Callee	m_transforms . erase
>1984	MemberAccess	m_transforms . erase
>1985	Identifier	erase
>1986	Identifier	m_transforms
>1987	ExpressionStatement	 
>1988	CallExpression	m_transforms . erase ( idx )
>1989	ArgumentList	idx
>1990	Argument	idx
>1991	Identifier	idx
>1992	Callee	m_transforms . erase
>1993	MemberAccess	m_transforms . erase
>1994	Identifier	erase
>1995	Identifier	m_transforms
>1996	ExpressionStatement	 
>1997	CallExpression	remove . push_back ( idx_rev )
>1998	ArgumentList	idx_rev
>1999	Argument	idx_rev
>2000	Identifier	idx_rev
>2001	Callee	remove . push_back
>2002	MemberAccess	remove . push_back
>2003	Identifier	push_back
>2004	Identifier	remove
>2005	ExpressionStatement	 
>2006	CallExpression	remove . push_back ( idx )
>2007	ArgumentList	idx
>2008	Argument	idx
>2009	Identifier	idx
>2010	Callee	remove . push_back
>2011	MemberAccess	remove . push_back
>2012	Identifier	push_back
>2013	Identifier	remove
>2014	Condition	 
>2015	Identifier	removeBadMatches
>2016	Condition	 
>2017	UnaryOp	! connect12
>2018	Identifier	connect12
>2019	UnaryOperator	!
>2020	IdentifierDeclStatement	 
>2021	IdentifierDecl	connect12 = ComputeEpipolarGeometry ( i , j , removeBadMatches )
>2022	AssignmentExpr	connect12 = ComputeEpipolarGeometry ( i , j , removeBadMatches )
>2023	CallExpression	ComputeEpipolarGeometry ( i , j , removeBadMatches )
>2024	ArgumentList	i
>2025	Argument	removeBadMatches
>2026	Identifier	removeBadMatches
>2027	Argument	j
>2028	Identifier	j
>2029	Argument	i
>2030	Identifier	i
>2031	Callee	ComputeEpipolarGeometry
>2032	Identifier	ComputeEpipolarGeometry
>2033	Identifier	connect12
>2034	Identifier	connect12
>2035	IdentifierDeclType	bool
>2036	IdentifierDeclStatement	 
>2037	IdentifierDecl	idx_rev = GetMatchIndex ( j , i )
>2038	AssignmentExpr	idx_rev = GetMatchIndex ( j , i )
>2039	CallExpression	GetMatchIndex ( j , i )
>2040	ArgumentList	j
>2041	Argument	i
>2042	Identifier	i
>2043	Argument	j
>2044	Identifier	j
>2045	Callee	GetMatchIndex
>2046	Identifier	GetMatchIndex
>2047	Identifier	idx_rev
>2048	Identifier	idx_rev
>2049	IdentifierDeclType	MatchIndex
>2050	IdentifierDeclStatement	 
>2051	IdentifierDecl	idx = GetMatchIndex ( i , j )
>2052	AssignmentExpr	idx = GetMatchIndex ( i , j )
>2053	CallExpression	GetMatchIndex ( i , j )
>2054	ArgumentList	i
>2055	Argument	j
>2056	Identifier	j
>2057	Argument	i
>2058	Identifier	i
>2059	Callee	GetMatchIndex
>2060	Identifier	GetMatchIndex
>2061	Identifier	idx
>2062	Identifier	idx
>2063	IdentifierDeclType	MatchIndex
>2064	ExpressionStatement	 
>2065	CallExpression	assert ( ImagesMatch ( i , j ) )
>2066	ArgumentList	ImagesMatch ( i , j )
>2067	Argument	ImagesMatch ( i , j )
>2068	CallExpression	ImagesMatch ( i , j )
>2069	ArgumentList	i
>2070	Argument	j
>2071	Identifier	j
>2072	Argument	i
>2073	Identifier	i
>2074	Callee	ImagesMatch
>2075	Identifier	ImagesMatch
>2076	Callee	assert
>2077	Identifier	assert
>2078	IdentifierDeclStatement	 
>2079	IdentifierDecl	j = iter -> m_index
>2080	AssignmentExpr	j = iter -> m_index
>2081	PtrMemberAccess	iter -> m_index
>2082	Identifier	m_index
>2083	Identifier	iter
>2084	Identifier	j
>2085	Identifier	j
>2086	IdentifierDeclType	unsigned int
>2087	IncDecOp	 
>2088	IncDec	++
>2089	Identifier	iter
>2090	Condition	 
>2091	EqualityExpression	iter != m_matches . End ( i )
>2092	CallExpression	m_matches . End ( i )
>2093	ArgumentList	i
>2094	Argument	i
>2095	Identifier	i
>2096	Callee	m_matches . End
>2097	MemberAccess	m_matches . End
>2098	Identifier	End
>2099	Identifier	m_matches
>2100	Identifier	iter
>2101	ForInit	 
>2102	AssignmentExpr	iter = m_matches . Begin ( i )
>2103	CallExpression	m_matches . Begin ( i )
>2104	ArgumentList	i
>2105	Argument	i
>2106	Identifier	i
>2107	Callee	m_matches . Begin
>2108	MemberAccess	m_matches . Begin
>2109	Identifier	Begin
>2110	Identifier	m_matches
>2111	Identifier	iter
>2112	IdentifierDeclStatement	 
>2113	IdentifierDecl	iter
>2114	Identifier	iter
>2115	IdentifierDeclType	MatchAdjList 
>2116	IncDecOp	 
>2117	IncDec	++
>2118	Identifier	i
>2119	Condition	 
>2120	RelationalExpression	i < num_images
>2121	Identifier	num_images
>2122	Identifier	i
>2123	ForInit	 
>2124	IdentifierDeclStatement	unsigned int i = 0 ;
>2125	IdentifierDecl	i = 0
>2126	AssignmentExpr	i = 0
>2127	PrimaryExpression	0
>2128	Identifier	i
>2129	Identifier	i
>2130	IdentifierDeclType	unsigned int
>2131	IdentifierDeclStatement	 
>2132	IdentifierDecl	remove
>2133	Identifier	remove
>2134	IdentifierDeclType	std 
>2135	ExpressionStatement	 
>2136	CallExpression	m_transforms . clear ( )
>2137	ArgumentList	 
>2138	Callee	m_transforms . clear
>2139	MemberAccess	m_transforms . clear
>2140	Identifier	clear
>2141	Identifier	m_transforms
>2142	IdentifierDeclStatement	 
>2143	IdentifierDecl	num_images = GetNumImages ( )
>2144	AssignmentExpr	num_images = GetNumImages ( )
>2145	CallExpression	GetNumImages ( )
>2146	ArgumentList	 
>2147	Callee	GetNumImages
>2148	Identifier	GetNumImages
>2149	Identifier	num_images
>2150	Identifier	num_images
>2151	IdentifierDeclType	unsigned int
>2188	FunctionDef	BundlerApp 
>2189	ParameterList	 
>2190	ReturnType	void
>2191	CompoundStatement	 
>2192	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>2193	CompoundStatement	 
>2194	IfStatement	if ( num_views <= 2 )
>2195	ElseStatement	else
>2196	CompoundStatement	 
>2197	ForStatement	for ( int k = 0 ; k < 128 ; k ++ )
>2198	CompoundStatement	 
>2199	ExpressionStatement	 
>2200	AssignmentExpr	m_point_data [ i ] . m_desc [ k ] = GetKeyWithDesc ( best_view , best_key ) . m_d [ k ]
>2201	ArrayIndexing	GetKeyWithDesc ( best_view , best_key ) . m_d [ k ]
>2202	Identifier	k
>2203	MemberAccess	GetKeyWithDesc ( best_view , best_key ) . m_d
>2204	Identifier	m_d
>2205	CallExpression	GetKeyWithDesc ( best_view , best_key )
>2206	ArgumentList	best_view
>2207	Argument	best_key
>2208	Identifier	best_key
>2209	Argument	best_view
>2210	Identifier	best_view
>2211	Callee	GetKeyWithDesc
>2212	Identifier	GetKeyWithDesc
>2213	ArrayIndexing	m_point_data [ i ] . m_desc [ k ]
>2214	Identifier	k
>2215	MemberAccess	m_point_data [ i ] . m_desc
>2216	Identifier	m_desc
>2217	ArrayIndexing	m_point_data [ i ]
>2218	Identifier	i
>2219	Identifier	m_point_data
>2220	IncDecOp	 
>2221	IncDec	++
>2222	Identifier	k
>2223	Condition	 
>2224	RelationalExpression	k < 128
>2225	PrimaryExpression	128
>2226	Identifier	k
>2227	ForInit	 
>2228	IdentifierDeclStatement	int k = 0 ;
>2229	IdentifierDecl	k = 0
>2230	AssignmentExpr	k = 0
>2231	PrimaryExpression	0
>2232	Identifier	k
>2233	Identifier	k
>2234	IdentifierDeclType	int
>2235	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>2236	CompoundStatement	 
>2237	IfStatement	if ( dist < min_dist )
>2238	CompoundStatement	 
>2239	ExpressionStatement	 
>2240	AssignmentExpr	best_key = k1
>2241	Identifier	k1
>2242	Identifier	best_key
>2243	ExpressionStatement	 
>2244	AssignmentExpr	best_view = v1
>2245	Identifier	v1
>2246	Identifier	best_view
>2247	ExpressionStatement	 
>2248	AssignmentExpr	min_dist = dist
>2249	Identifier	dist
>2250	Identifier	min_dist
>2251	Condition	 
>2252	RelationalExpression	dist < min_dist
>2253	Identifier	min_dist
>2254	Identifier	dist
>2255	ForStatement	for ( int k = 0 ; k < num_views ; k ++ )
>2256	CompoundStatement	 
>2257	ForStatement	for ( int l = 0 ; l < 128 ; l ++ )
>2258	CompoundStatement	 
>2259	ExpressionStatement	 
>2260	AssignmentExpr	dist += fabs ( ( double ) ( GetKeyWithDesc ( v1 , k1 ) . m_d [ l ] - GetKeyWithDesc ( v2 , k2 ) . m_\
>2261	CallExpression	fabs ( ( double ) ( GetKeyWithDesc ( v1 , k1 ) . m_d [ l ] - GetKeyWithDesc ( v2 , k2 ) . m_d [ l ] ) )
>2262	ArgumentList	( double ) ( GetKeyWithDesc ( v1 , k1 ) . m_d [ l ] - GetKeyWithDesc ( v2 , k2 ) . m_d [ l ] )
>2263	Argument	( double ) ( GetKeyWithDesc ( v1 , k1 ) . m_d [ l ] - GetKeyWithDesc ( v2 , k2 ) . m_d [ l ] )
>2264	CastExpression	( double ) ( GetKeyWithDesc ( v1 , k1 ) . m_d [ l ] - GetKeyWithDesc ( v2 , k2 ) . m_d [ l ] )
>2265	AdditiveExpression	GetKeyWithDesc ( v1 , k1 ) . m_d [ l ] - GetKeyWithDesc ( v2 , k2 ) . m_d [ l ]
>2266	ArrayIndexing	GetKeyWithDesc ( v2 , k2 ) . m_d [ l ]
>2267	Identifier	l
>2268	MemberAccess	GetKeyWithDesc ( v2 , k2 ) . m_d
>2269	Identifier	m_d
>2270	CallExpression	GetKeyWithDesc ( v2 , k2 )
>2271	ArgumentList	v2
>2272	Argument	k2
>2273	Identifier	k2
>2274	Argument	v2
>2275	Identifier	v2
>2276	Callee	GetKeyWithDesc
>2277	Identifier	GetKeyWithDesc
>2278	ArrayIndexing	GetKeyWithDesc ( v1 , k1 ) . m_d [ l ]
>2279	Identifier	l
>2280	MemberAccess	GetKeyWithDesc ( v1 , k1 ) . m_d
>2281	Identifier	m_d
>2282	CallExpression	GetKeyWithDesc ( v1 , k1 )
>2283	ArgumentList	v1
>2284	Argument	k1
>2285	Identifier	k1
>2286	Argument	v1
>2287	Identifier	v1
>2288	Callee	GetKeyWithDesc
>2289	Identifier	GetKeyWithDesc
>2290	CastTarget	double
>2291	Callee	fabs
>2292	Identifier	fabs
>2293	Identifier	dist
>2294	IncDecOp	 
>2295	IncDec	++
>2296	Identifier	l
>2297	Condition	 
>2298	RelationalExpression	l < 128
>2299	PrimaryExpression	128
>2300	Identifier	l
>2301	ForInit	 
>2302	IdentifierDeclStatement	int l = 0 ;
>2303	IdentifierDecl	l = 0
>2304	AssignmentExpr	l = 0
>2305	PrimaryExpression	0
>2306	Identifier	l
>2307	Identifier	l
>2308	IdentifierDeclType	int
>2309	IdentifierDeclStatement	 
>2310	IdentifierDecl	k2 = m_point_data [ i ] . m_views [ k ] . second
>2311	AssignmentExpr	k2 = m_point_data [ i ] . m_views [ k ] . second
>2312	MemberAccess	m_point_data [ i ] . m_views [ k ] . second
>2313	Identifier	second
>2314	ArrayIndexing	m_point_data [ i ] . m_views [ k ]
>2315	Identifier	k
>2316	MemberAccess	m_point_data [ i ] . m_views
>2317	Identifier	m_views
>2318	ArrayIndexing	m_point_data [ i ]
>2319	Identifier	i
>2320	Identifier	m_point_data
>2321	Identifier	k2
>2322	Identifier	k2
>2323	IdentifierDeclType	int
>2324	IdentifierDeclStatement	 
>2325	IdentifierDecl	v2 = m_point_data [ i ] . m_views [ k ] . first
>2326	AssignmentExpr	v2 = m_point_data [ i ] . m_views [ k ] . first
>2327	MemberAccess	m_point_data [ i ] . m_views [ k ] . first
>2328	Identifier	first
>2329	ArrayIndexing	m_point_data [ i ] . m_views [ k ]
>2330	Identifier	k
>2331	MemberAccess	m_point_data [ i ] . m_views
>2332	Identifier	m_views
>2333	ArrayIndexing	m_point_data [ i ]
>2334	Identifier	i
>2335	Identifier	m_point_data
>2336	Identifier	v2
>2337	Identifier	v2
>2338	IdentifierDeclType	int
>2339	IfStatement	if ( j == k )
>2340	ContinueStatement	 
>2341	Condition	 
>2342	EqualityExpression	j == k
>2343	Identifier	k
>2344	Identifier	j
>2345	IncDecOp	 
>2346	IncDec	++
>2347	Identifier	k
>2348	Condition	 
>2349	RelationalExpression	k < num_views
>2350	Identifier	num_views
>2351	Identifier	k
>2352	ForInit	 
>2353	IdentifierDeclStatement	int k = 0 ;
>2354	IdentifierDecl	k = 0
>2355	AssignmentExpr	k = 0
>2356	PrimaryExpression	0
>2357	Identifier	k
>2358	Identifier	k
>2359	IdentifierDeclType	int
>2360	IdentifierDeclStatement	 
>2361	IdentifierDecl	k1 = m_point_data [ i ] . m_views [ j ] . second
>2362	AssignmentExpr	k1 = m_point_data [ i ] . m_views [ j ] . second
>2363	MemberAccess	m_point_data [ i ] . m_views [ j ] . second
>2364	Identifier	second
>2365	ArrayIndexing	m_point_data [ i ] . m_views [ j ]
>2366	Identifier	j
>2367	MemberAccess	m_point_data [ i ] . m_views
>2368	Identifier	m_views
>2369	ArrayIndexing	m_point_data [ i ]
>2370	Identifier	i
>2371	Identifier	m_point_data
>2372	Identifier	k1
>2373	Identifier	k1
>2374	IdentifierDeclType	int
>2375	IdentifierDeclStatement	 
>2376	IdentifierDecl	v1 = m_point_data [ i ] . m_views [ j ] . first
>2377	AssignmentExpr	v1 = m_point_data [ i ] . m_views [ j ] . first
>2378	MemberAccess	m_point_data [ i ] . m_views [ j ] . first
>2379	Identifier	first
>2380	ArrayIndexing	m_point_data [ i ] . m_views [ j ]
>2381	Identifier	j
>2382	MemberAccess	m_point_data [ i ] . m_views
>2383	Identifier	m_views
>2384	ArrayIndexing	m_point_data [ i ]
>2385	Identifier	i
>2386	Identifier	m_point_data
>2387	Identifier	v1
>2388	Identifier	v1
>2389	IdentifierDeclType	int
>2390	IdentifierDeclStatement	 
>2391	IdentifierDecl	dist = 0.0
>2392	AssignmentExpr	dist = 0.0
>2393	PrimaryExpression	0.0
>2394	Identifier	dist
>2395	Identifier	dist
>2396	IdentifierDeclType	double
>2397	IncDecOp	 
>2398	IncDec	++
>2399	Identifier	j
>2400	Condition	 
>2401	RelationalExpression	j < num_views
>2402	Identifier	num_views
>2403	Identifier	j
>2404	ForInit	 
>2405	IdentifierDeclStatement	int j = 0 ;
>2406	IdentifierDecl	j = 0
>2407	AssignmentExpr	j = 0
>2408	PrimaryExpression	0
>2409	Identifier	j
>2410	Identifier	j
>2411	IdentifierDeclType	int
>2412	IdentifierDeclStatement	 
>2413	IdentifierDecl	best_key = - 1
>2414	AssignmentExpr	best_key = - 1
>2415	UnaryOp	- 1
>2416	PrimaryExpression	1
>2417	UnaryOperator	-
>2418	Identifier	best_key
>2419	Identifier	best_key
>2420	IdentifierDeclType	int
>2421	IdentifierDecl	best_view = - 1
>2422	AssignmentExpr	best_view = - 1
>2423	UnaryOp	- 1
>2424	PrimaryExpression	1
>2425	UnaryOperator	-
>2426	Identifier	best_view
>2427	Identifier	best_view
>2428	IdentifierDeclType	int
>2429	IdentifierDeclStatement	 
>2430	IdentifierDecl	min_dist = DBL_MAX
>2431	AssignmentExpr	min_dist = DBL_MAX
>2432	Identifier	DBL_MAX
>2433	Identifier	DBL_MAX
>2434	Identifier	min_dist
>2435	IdentifierDeclType	double
>2436	CompoundStatement	 
>2437	ForStatement	for ( int k = 0 ; k < 128 ; k ++ )
>2438	CompoundStatement	 
>2439	ExpressionStatement	 
>2440	AssignmentExpr	m_point_data [ i ] . m_desc [ k ] /= num_views
>2441	Identifier	num_views
>2442	ArrayIndexing	m_point_data [ i ] . m_desc [ k ]
>2443	Identifier	k
>2444	MemberAccess	m_point_data [ i ] . m_desc
>2445	Identifier	m_desc
>2446	ArrayIndexing	m_point_data [ i ]
>2447	Identifier	i
>2448	Identifier	m_point_data
>2449	IncDecOp	 
>2450	IncDec	++
>2451	Identifier	k
>2452	Condition	 
>2453	RelationalExpression	k < 128
>2454	PrimaryExpression	128
>2455	Identifier	k
>2456	ForInit	 
>2457	IdentifierDeclStatement	int k = 0 ;
>2458	IdentifierDecl	k = 0
>2459	AssignmentExpr	k = 0
>2460	PrimaryExpression	0
>2461	Identifier	k
>2462	Identifier	k
>2463	IdentifierDeclType	int
>2464	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>2465	CompoundStatement	 
>2466	ForStatement	for ( int k = 0 ; k < 128 ; k ++ )
>2467	CompoundStatement	 
>2468	ExpressionStatement	 
>2469	AssignmentExpr	m_point_data [ i ] . m_desc [ k ] += GetKeyWithDesc ( view , key ) . m_d [ k ]
>2470	ArrayIndexing	GetKeyWithDesc ( view , key ) . m_d [ k ]
>2471	Identifier	k
>2472	MemberAccess	GetKeyWithDesc ( view , key ) . m_d
>2473	Identifier	m_d
>2474	CallExpression	GetKeyWithDesc ( view , key )
>2475	ArgumentList	view
>2476	Argument	key
>2477	Identifier	key
>2478	Argument	view
>2479	Identifier	view
>2480	Callee	GetKeyWithDesc
>2481	Identifier	GetKeyWithDesc
>2482	ArrayIndexing	m_point_data [ i ] . m_desc [ k ]
>2483	Identifier	k
>2484	MemberAccess	m_point_data [ i ] . m_desc
>2485	Identifier	m_desc
>2486	ArrayIndexing	m_point_data [ i ]
>2487	Identifier	i
>2488	Identifier	m_point_data
>2489	IncDecOp	 
>2490	IncDec	++
>2491	Identifier	k
>2492	Condition	 
>2493	RelationalExpression	k < 128
>2494	PrimaryExpression	128
>2495	Identifier	k
>2496	ForInit	 
>2497	IdentifierDeclStatement	int k = 0 ;
>2498	IdentifierDecl	k = 0
>2499	AssignmentExpr	k = 0
>2500	PrimaryExpression	0
>2501	Identifier	k
>2502	Identifier	k
>2503	IdentifierDeclType	int
>2504	IdentifierDeclStatement	 
>2505	IdentifierDecl	key = m_point_data [ i ] . m_views [ j ] . second
>2506	AssignmentExpr	key = m_point_data [ i ] . m_views [ j ] . second
>2507	MemberAccess	m_point_data [ i ] . m_views [ j ] . second
>2508	Identifier	second
>2509	ArrayIndexing	m_point_data [ i ] . m_views [ j ]
>2510	Identifier	j
>2511	MemberAccess	m_point_data [ i ] . m_views
>2512	Identifier	m_views
>2513	ArrayIndexing	m_point_data [ i ]
>2514	Identifier	i
>2515	Identifier	m_point_data
>2516	Identifier	key
>2517	Identifier	key
>2518	IdentifierDeclType	int
>2519	IdentifierDeclStatement	 
>2520	IdentifierDecl	view = m_point_data [ i ] . m_views [ j ] . first
>2521	AssignmentExpr	view = m_point_data [ i ] . m_views [ j ] . first
>2522	MemberAccess	m_point_data [ i ] . m_views [ j ] . first
>2523	Identifier	first
>2524	ArrayIndexing	m_point_data [ i ] . m_views [ j ]
>2525	Identifier	j
>2526	MemberAccess	m_point_data [ i ] . m_views
>2527	Identifier	m_views
>2528	ArrayIndexing	m_point_data [ i ]
>2529	Identifier	i
>2530	Identifier	m_point_data
>2531	Identifier	view
>2532	Identifier	view
>2533	IdentifierDeclType	int
>2534	IncDecOp	 
>2535	IncDec	++
>2536	Identifier	j
>2537	Condition	 
>2538	RelationalExpression	j < num_views
>2539	Identifier	num_views
>2540	Identifier	j
>2541	ForInit	 
>2542	IdentifierDeclStatement	int j = 0 ;
>2543	IdentifierDecl	j = 0
>2544	AssignmentExpr	j = 0
>2545	PrimaryExpression	0
>2546	Identifier	j
>2547	Identifier	j
>2548	IdentifierDeclType	int
>2549	Condition	 
>2550	RelationalExpression	num_views <= 2
>2551	PrimaryExpression	2
>2552	Identifier	num_views
>2553	IfStatement	if ( num_views == 0 )
>2554	ContinueStatement	 
>2555	Condition	 
>2556	EqualityExpression	num_views == 0
>2557	PrimaryExpression	0
>2558	Identifier	num_views
>2559	IdentifierDeclStatement	 
>2560	IdentifierDecl	num_views = ( int ) m_point_data [ i ] . m_views . size ( )
>2561	AssignmentExpr	num_views = ( int ) m_point_data [ i ] . m_views . size ( )
>2562	CastExpression	( int ) m_point_data [ i ] . m_views . size ( )
>2563	CallExpression	m_point_data [ i ] . m_views . size ( )
>2564	ArgumentList	 
>2565	Callee	m_point_data [ i ] . m_views . size
>2566	MemberAccess	m_point_data [ i ] . m_views . size
>2567	Identifier	size
>2568	MemberAccess	m_point_data [ i ] . m_views
>2569	Identifier	m_views
>2570	ArrayIndexing	m_point_data [ i ]
>2571	Identifier	i
>2572	Identifier	m_point_data
>2573	CastTarget	int
>2574	Identifier	num_views
>2575	Identifier	num_views
>2576	IdentifierDeclType	int
>2577	IncDecOp	 
>2578	IncDec	++
>2579	Identifier	i
>2580	Condition	 
>2581	RelationalExpression	i < num_points
>2582	Identifier	num_points
>2583	Identifier	i
>2584	ForInit	 
>2585	IdentifierDeclStatement	int i = 0 ;
>2586	IdentifierDecl	i = 0
>2587	AssignmentExpr	i = 0
>2588	PrimaryExpression	0
>2589	Identifier	i
>2590	Identifier	i
>2591	IdentifierDeclType	int
>2592	ExpressionStatement	 
>2593	CallExpression	printf ( \"[CoalesceFeatureDescriptors] Coalescing features\n\" )
>2594	ArgumentList	\"[CoalesceFeatureDescriptors] Coalescing features\n\"
>2595	Argument	\"[CoalesceFeatureDescriptors] Coalescing features\n\"
>2596	PrimaryExpression	\"[CoalesceFeatureDescriptors] Coalescing features\n\"
>2597	Callee	printf
>2598	Identifier	printf
>2599	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>2600	CompoundStatement	 
>2601	ExpressionStatement	 
>2602	CallExpression	m_image_data [ i ] . LoadKeys ( true )
>2603	ArgumentList	true
>2604	Argument	true
>2605	Identifier	true
>2606	Callee	m_image_data [ i ] . LoadKeys
>2607	MemberAccess	m_image_data [ i ] . LoadKeys
>2608	Identifier	LoadKeys
>2609	ArrayIndexing	m_image_data [ i ]
>2610	Identifier	i
>2611	Identifier	m_image_data
>2612	IfStatement	if ( ! m_image_data [ i ] . m_camera . m_adjusted )
>2613	ContinueStatement	 
>2614	Condition	 
>2615	UnaryOp	! m_image_data [ i ] . m_camera . m_adjusted
>2616	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>2617	Identifier	m_adjusted
>2618	MemberAccess	m_image_data [ i ] . m_camera
>2619	Identifier	m_camera
>2620	ArrayIndexing	m_image_data [ i ]
>2621	Identifier	i
>2622	Identifier	m_image_data
>2623	UnaryOperator	!
>2624	IncDecOp	 
>2625	IncDec	++
>2626	Identifier	i
>2627	Condition	 
>2628	RelationalExpression	i < num_images
>2629	Identifier	num_images
>2630	Identifier	i
>2631	ForInit	 
>2632	IdentifierDeclStatement	int i = 0 ;
>2633	IdentifierDecl	i = 0
>2634	AssignmentExpr	i = 0
>2635	PrimaryExpression	0
>2636	Identifier	i
>2637	Identifier	i
>2638	IdentifierDeclType	int
>2639	IdentifierDeclStatement	 
>2640	IdentifierDecl	num_images = GetNumImages ( )
>2641	AssignmentExpr	num_images = GetNumImages ( )
>2642	CallExpression	GetNumImages ( )
>2643	ArgumentList	 
>2644	Callee	GetNumImages
>2645	Identifier	GetNumImages
>2646	Identifier	num_images
>2647	Identifier	num_images
>2648	IdentifierDeclType	int
>2649	ExpressionStatement	 
>2650	CallExpression	printf ( \"[CoalesceFeatureDescriptorsMedian] Loading keys\n\" )
>2651	ArgumentList	\"[CoalesceFeatureDescriptorsMedian] Loading keys\n\"
>2652	Argument	\"[CoalesceFeatureDescriptorsMedian] Loading keys\n\"
>2653	PrimaryExpression	\"[CoalesceFeatureDescriptorsMedian] Loading keys\n\"
>2654	Callee	printf
>2655	Identifier	printf
>2656	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>2657	CompoundStatement	 
>2658	ForStatement	for ( int j = 0 ; j < 128 ; j ++ )
>2659	ExpressionStatement	 
>2660	AssignmentExpr	m_point_data [ i ] . m_desc [ j ] = 0.0f
>2661	PrimaryExpression	0.0f
>2662	ArrayIndexing	m_point_data [ i ] . m_desc [ j ]
>2663	Identifier	j
>2664	MemberAccess	m_point_data [ i ] . m_desc
>2665	Identifier	m_desc
>2666	ArrayIndexing	m_point_data [ i ]
>2667	Identifier	i
>2668	Identifier	m_point_data
>2669	IncDecOp	 
>2670	IncDec	++
>2671	Identifier	j
>2672	Condition	 
>2673	RelationalExpression	j < 128
>2674	PrimaryExpression	128
>2675	Identifier	j
>2676	ForInit	 
>2677	IdentifierDeclStatement	int j = 0 ;
>2678	IdentifierDecl	j = 0
>2679	AssignmentExpr	j = 0
>2680	PrimaryExpression	0
>2681	Identifier	j
>2682	Identifier	j
>2683	IdentifierDeclType	int
>2684	ExpressionStatement	 
>2685	AssignmentExpr	m_point_data [ i ] . m_desc = new float [ 128 ]
>2686	PrimaryExpression	128
>2687	MemberAccess	m_point_data [ i ] . m_desc
>2688	Identifier	m_desc
>2689	ArrayIndexing	m_point_data [ i ]
>2690	Identifier	i
>2691	Identifier	m_point_data
>2692	IncDecOp	 
>2693	IncDec	++
>2694	Identifier	i
>2695	Condition	 
>2696	RelationalExpression	i < num_points
>2697	Identifier	num_points
>2698	Identifier	i
>2699	ForInit	 
>2700	IdentifierDeclStatement	int i = 0 ;
>2701	IdentifierDecl	i = 0
>2702	AssignmentExpr	i = 0
>2703	PrimaryExpression	0
>2704	Identifier	i
>2705	Identifier	i
>2706	IdentifierDeclType	int
>2707	IdentifierDeclStatement	 
>2708	IdentifierDecl	num_points = ( int ) m_point_data . size ( )
>2709	AssignmentExpr	num_points = ( int ) m_point_data . size ( )
>2710	CastExpression	( int ) m_point_data . size ( )
>2711	CallExpression	m_point_data . size ( )
>2712	ArgumentList	 
>2713	Callee	m_point_data . size
>2714	MemberAccess	m_point_data . size
>2715	Identifier	size
>2716	Identifier	m_point_data
>2717	CastTarget	int
>2718	Identifier	num_points
>2719	Identifier	num_points
>2720	IdentifierDeclType	int
>2777	FunctionDef	BundlerApp 
>2778	ParameterList	 
>2779	ReturnType	void
>2780	CompoundStatement	 
>2781	ExpressionStatement	 
>2782	AssignmentExpr	m_features_coalesced = true
>2783	Identifier	true
>2784	Identifier	m_features_coalesced
>2785	ExpressionStatement	 
>2786	Identifier	variance
>2787	Statement	 
>2788	Statement	 
>2789	Statement	 
>2790	ExpressionStatement	 
>2791	Identifier	xx
>2792	Statement	 
>2793	Statement	 
>2794	Statement	 
>2795	ExpressionStatement	 
>2796	Identifier	num_observations
>2797	Statement	 
>2798	Statement	 
>2799	Statement	 
>2800	ExpressionStatement	 
>2801	CallExpression	fflush ( stdout )
>2802	ArgumentList	stdout
>2803	Argument	stdout
>2804	Identifier	stdout
>2805	Callee	fflush
>2806	Identifier	fflush
>2807	ExpressionStatement	 
>2808	Statement	 
>2809	Statement	 
>2810	Statement	 
>2811	Statement	 
>2812	Statement	 
>2813	Statement	 
>2814	Statement	 
>2815	IdentifierDeclStatement	 
>2816	IdentifierDecl	median = kth_element ( num_points , iround ( 0.5 * num_points ) , variance )
>2817	AssignmentExpr	median = kth_element ( num_points , iround ( 0.5 * num_points ) , variance )
>2818	CallExpression	kth_element ( num_points , iround ( 0.5 * num_points ) , variance )
>2819	ArgumentList	num_points
>2820	Argument	variance
>2821	Identifier	variance
>2822	Argument	iround ( 0.5 * num_points )
>2823	CallExpression	iround ( 0.5 * num_points )
>2824	ArgumentList	0.5 * num_points
>2825	Argument	0.5 * num_points
>2826	MultiplicativeExpression	0.5 * num_points
>2827	Identifier	num_points
>2828	PrimaryExpression	0.5
>2829	Callee	iround
>2830	Identifier	iround
>2831	Argument	num_points
>2832	Identifier	num_points
>2833	Callee	kth_element
>2834	Identifier	kth_element
>2835	Identifier	median
>2836	Identifier	median
>2837	IdentifierDeclType	double
>2838	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>2839	CompoundStatement	 
>2840	ForStatement	for ( int j = 0 ; j < 128 ; j ++ )
>2841	CompoundStatement	 
>2842	ExpressionStatement	 
>2843	AssignmentExpr	variance [ i ] += xx [ 128 * i + j ] - x * x
>2844	AdditiveExpression	xx [ 128 * i + j ] - x * x
>2845	MultiplicativeExpression	x * x
>2846	Identifier	x
>2847	Identifier	x
>2848	ArrayIndexing	xx [ 128 * i + j ]
>2849	AdditiveExpression	128 * i + j
>2850	Identifier	j
>2851	MultiplicativeExpression	128 * i
>2852	Identifier	i
>2853	PrimaryExpression	128
>2854	Identifier	xx
>2855	ArrayIndexing	variance [ i ]
>2856	Identifier	i
>2857	Identifier	variance
>2858	IdentifierDeclStatement	 
>2859	IdentifierDecl	x = m_point_data [ i ] . m_desc [ j ]
>2860	AssignmentExpr	x = m_point_data [ i ] . m_desc [ j ]
>2861	ArrayIndexing	m_point_data [ i ] . m_desc [ j ]
>2862	Identifier	j
>2863	MemberAccess	m_point_data [ i ] . m_desc
>2864	Identifier	m_desc
>2865	ArrayIndexing	m_point_data [ i ]
>2866	Identifier	i
>2867	Identifier	m_point_data
>2868	Identifier	x
>2869	Identifier	x
>2870	IdentifierDeclType	double
>2871	IncDecOp	 
>2872	IncDec	++
>2873	Identifier	j
>2874	Condition	 
>2875	RelationalExpression	j < 128
>2876	PrimaryExpression	128
>2877	Identifier	j
>2878	ForInit	 
>2879	IdentifierDeclStatement	int j = 0 ;
>2880	IdentifierDecl	j = 0
>2881	AssignmentExpr	j = 0
>2882	PrimaryExpression	0
>2883	Identifier	j
>2884	Identifier	j
>2885	IdentifierDeclType	int
>2886	ExpressionStatement	 
>2887	AssignmentExpr	variance [ i ] = 0.0
>2888	PrimaryExpression	0.0
>2889	ArrayIndexing	variance [ i ]
>2890	Identifier	i
>2891	Identifier	variance
>2892	ForStatement	for ( int j = 0 ; j < 128 ; j ++ )
>2893	CompoundStatement	 
>2894	ExpressionStatement	 
>2895	AssignmentExpr	xx [ 128 * i + j ] /= num_observations [ i ]
>2896	ArrayIndexing	num_observations [ i ]
>2897	Identifier	i
>2898	Identifier	num_observations
>2899	ArrayIndexing	xx [ 128 * i + j ]
>2900	AdditiveExpression	128 * i + j
>2901	Identifier	j
>2902	MultiplicativeExpression	128 * i
>2903	Identifier	i
>2904	PrimaryExpression	128
>2905	Identifier	xx
>2906	ExpressionStatement	 
>2907	AssignmentExpr	m_point_data [ i ] . m_desc [ j ] /= num_observations [ i ]
>2908	ArrayIndexing	num_observations [ i ]
>2909	Identifier	i
>2910	Identifier	num_observations
>2911	ArrayIndexing	m_point_data [ i ] . m_desc [ j ]
>2912	Identifier	j
>2913	MemberAccess	m_point_data [ i ] . m_desc
>2914	Identifier	m_desc
>2915	ArrayIndexing	m_point_data [ i ]
>2916	Identifier	i
>2917	Identifier	m_point_data
>2918	IncDecOp	 
>2919	IncDec	++
>2920	Identifier	j
>2921	Condition	 
>2922	RelationalExpression	j < 128
>2923	PrimaryExpression	128
>2924	Identifier	j
>2925	ForInit	 
>2926	IdentifierDeclStatement	int j = 0 ;
>2927	IdentifierDecl	j = 0
>2928	AssignmentExpr	j = 0
>2929	PrimaryExpression	0
>2930	Identifier	j
>2931	Identifier	j
>2932	IdentifierDeclType	int
>2933	IfStatement	if ( num_observations [ i ] == 0 )
>2934	ContinueStatement	 
>2935	Condition	 
>2936	EqualityExpression	num_observations [ i ] == 0
>2937	PrimaryExpression	0
>2938	ArrayIndexing	num_observations [ i ]
>2939	Identifier	i
>2940	Identifier	num_observations
>2941	ExpressionStatement	 
>2942	Statement	 
>2943	Statement	 
>2944	Statement	 
>2945	Statement	 
>2946	IfStatement	if ( num_observations [ i ] != ( int ) m_point_data [ i ] . m_views . size ( ) )
>2947	Statement	 
>2948	Condition	 
>2949	EqualityExpression	num_observations [ i ] != ( int ) m_point_data [ i ] . m_views . size ( )
>2950	CastExpression	( int ) m_point_data [ i ] . m_views . size ( )
>2951	CallExpression	m_point_data [ i ] . m_views . size ( )
>2952	ArgumentList	 
>2953	Callee	m_point_data [ i ] . m_views . size
>2954	MemberAccess	m_point_data [ i ] . m_views . size
>2955	Identifier	size
>2956	MemberAccess	m_point_data [ i ] . m_views
>2957	Identifier	m_views
>2958	ArrayIndexing	m_point_data [ i ]
>2959	Identifier	i
>2960	Identifier	m_point_data
>2961	CastTarget	int
>2962	ArrayIndexing	num_observations [ i ]
>2963	Identifier	i
>2964	Identifier	num_observations
>2965	IncDecOp	 
>2966	IncDec	++
>2967	Identifier	i
>2968	Condition	 
>2969	RelationalExpression	i < num_points
>2970	Identifier	num_points
>2971	Identifier	i
>2972	ForInit	 
>2973	IdentifierDeclStatement	int i = 0 ;
>2974	IdentifierDecl	i = 0
>2975	AssignmentExpr	i = 0
>2976	PrimaryExpression	0
>2977	Identifier	i
>2978	Identifier	i
>2979	IdentifierDeclType	int
>2980	IdentifierDeclStatement	 
>2981	IdentifierDecl	* variance = new double [ num_points ]
>2982	AssignmentExpr	* variance = new double [ num_points ]
>2983	Identifier	num_points
>2984	Identifier	num_points
>2985	Identifier	variance
>2986	IdentifierDeclType	double *
>2987	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>2988	CompoundStatement	 
>2989	ExpressionStatement	 
>2990	CallExpression	m_image_data [ i ] . UnloadKeys ( )
>2991	ArgumentList	 
>2992	Callee	m_image_data [ i ] . UnloadKeys
>2993	MemberAccess	m_image_data [ i ] . UnloadKeys
>2994	Identifier	UnloadKeys
>2995	ArrayIndexing	m_image_data [ i ]
>2996	Identifier	i
>2997	Identifier	m_image_data
>2998	ForStatement	for ( int j = 0 ; j < num_points ; j ++ )
>2999	CompoundStatement	 
>3000	IfStatement	if ( key_seen >= 0 )
>3001	CompoundStatement	 
>3002	ExpressionStatement	 
>3003	IncDecOp	num_observations [ j ] ++
>3004	IncDec	++
>3005	ArrayIndexing	num_observations [ j ]
>3006	Identifier	j
>3007	Identifier	num_observations
>3008	ForStatement	for ( int k = 0 ; k < 128 ; k ++ )
>3009	CompoundStatement	 
>3010	ExpressionStatement	 
>3011	AssignmentExpr	xx [ 128 * j + k ] += x * x
>3012	MultiplicativeExpression	x * x
>3013	Identifier	x
>3014	Identifier	x
>3015	ArrayIndexing	xx [ 128 * j + k ]
>3016	AdditiveExpression	128 * j + k
>3017	Identifier	k
>3018	MultiplicativeExpression	128 * j
>3019	Identifier	j
>3020	PrimaryExpression	128
>3021	Identifier	xx
>3022	ExpressionStatement	 
>3023	AssignmentExpr	m_point_data [ j ] . m_desc [ k ] += key . m_d [ k ]
>3024	ArrayIndexing	key . m_d [ k ]
>3025	Identifier	k
>3026	MemberAccess	key . m_d
>3027	Identifier	m_d
>3028	Identifier	key
>3029	ArrayIndexing	m_point_data [ j ] . m_desc [ k ]
>3030	Identifier	k
>3031	MemberAccess	m_point_data [ j ] . m_desc
>3032	Identifier	m_desc
>3033	ArrayIndexing	m_point_data [ j ]
>3034	Identifier	j
>3035	Identifier	m_point_data
>3036	IdentifierDeclStatement	 
>3037	IdentifierDecl	x = ( float ) key . m_d [ k ]
>3038	AssignmentExpr	x = ( float ) key . m_d [ k ]
>3039	CastExpression	( float ) key . m_d [ k ]
>3040	ArrayIndexing	key . m_d [ k ]
>3041	Identifier	k
>3042	MemberAccess	key . m_d
>3043	Identifier	m_d
>3044	Identifier	key
>3045	CastTarget	float
>3046	Identifier	x
>3047	Identifier	x
>3048	IdentifierDeclType	float
>3049	IncDecOp	 
>3050	IncDec	++
>3051	Identifier	k
>3052	Condition	 
>3053	RelationalExpression	k < 128
>3054	PrimaryExpression	128
>3055	Identifier	k
>3056	ForInit	 
>3057	IdentifierDeclStatement	int k = 0 ;
>3058	IdentifierDecl	k = 0
>3059	AssignmentExpr	k = 0
>3060	PrimaryExpression	0
>3061	Identifier	k
>3062	Identifier	k
>3063	IdentifierDeclType	int
>3064	IdentifierDeclStatement	 
>3065	IdentifierDecl	& key = GetKeyWithDesc ( i , key_seen )
>3066	AssignmentExpr	& key = GetKeyWithDesc ( i , key_seen )
>3067	CallExpression	GetKeyWithDesc ( i , key_seen )
>3068	ArgumentList	i
>3069	Argument	key_seen
>3070	Identifier	key_seen
>3071	Argument	i
>3072	Identifier	i
>3073	Callee	GetKeyWithDesc
>3074	Identifier	GetKeyWithDesc
>3075	Identifier	key
>3076	Identifier	key
>3077	IdentifierDeclType	KeypointWithDesc &
>3078	Condition	 
>3079	RelationalExpression	key_seen >= 0
>3080	PrimaryExpression	0
>3081	Identifier	key_seen
>3082	ForStatement	for ( int k = 0 ; k < num_views ; k ++ )
>3083	CompoundStatement	 
>3084	IfStatement	if ( m_point_data [ j ] . m_views [ k ] . first == i )
>3085	CompoundStatement	 
>3086	BreakStatement	 
>3087	ExpressionStatement	 
>3088	AssignmentExpr	key_seen = m_point_data [ j ] . m_views [ k ] . second
>3089	MemberAccess	m_point_data [ j ] . m_views [ k ] . second
>3090	Identifier	second
>3091	ArrayIndexing	m_point_data [ j ] . m_views [ k ]
>3092	Identifier	k
>3093	MemberAccess	m_point_data [ j ] . m_views
>3094	Identifier	m_views
>3095	ArrayIndexing	m_point_data [ j ]
>3096	Identifier	j
>3097	Identifier	m_point_data
>3098	Identifier	key_seen
>3099	Condition	 
>3100	EqualityExpression	m_point_data [ j ] . m_views [ k ] . first == i
>3101	Identifier	i
>3102	MemberAccess	m_point_data [ j ] . m_views [ k ] . first
>3103	Identifier	first
>3104	ArrayIndexing	m_point_data [ j ] . m_views [ k ]
>3105	Identifier	k
>3106	MemberAccess	m_point_data [ j ] . m_views
>3107	Identifier	m_views
>3108	ArrayIndexing	m_point_data [ j ]
>3109	Identifier	j
>3110	Identifier	m_point_data
>3111	IncDecOp	 
>3112	IncDec	++
>3113	Identifier	k
>3114	Condition	 
>3115	RelationalExpression	k < num_views
>3116	Identifier	num_views
>3117	Identifier	k
>3118	ForInit	 
>3119	IdentifierDeclStatement	int k = 0 ;
>3120	IdentifierDecl	k = 0
>3121	AssignmentExpr	k = 0
>3122	PrimaryExpression	0
>3123	Identifier	k
>3124	Identifier	k
>3125	IdentifierDeclType	int
>3126	IfStatement	if ( num_views == 0 )
>3127	ContinueStatement	 
>3128	Condition	 
>3129	EqualityExpression	num_views == 0
>3130	PrimaryExpression	0
>3131	Identifier	num_views
>3132	IdentifierDeclStatement	 
>3133	IdentifierDecl	key_seen = - 1
>3134	AssignmentExpr	key_seen = - 1
>3135	UnaryOp	- 1
>3136	PrimaryExpression	1
>3137	UnaryOperator	-
>3138	Identifier	key_seen
>3139	Identifier	key_seen
>3140	IdentifierDeclType	int
>3141	IdentifierDeclStatement	 
>3142	IdentifierDecl	num_views = ( int ) m_point_data [ j ] . m_views . size ( )
>3143	AssignmentExpr	num_views = ( int ) m_point_data [ j ] . m_views . size ( )
>3144	CastExpression	( int ) m_point_data [ j ] . m_views . size ( )
>3145	CallExpression	m_point_data [ j ] . m_views . size ( )
>3146	ArgumentList	 
>3147	Callee	m_point_data [ j ] . m_views . size
>3148	MemberAccess	m_point_data [ j ] . m_views . size
>3149	Identifier	size
>3150	MemberAccess	m_point_data [ j ] . m_views
>3151	Identifier	m_views
>3152	ArrayIndexing	m_point_data [ j ]
>3153	Identifier	j
>3154	Identifier	m_point_data
>3155	CastTarget	int
>3156	Identifier	num_views
>3157	Identifier	num_views
>3158	IdentifierDeclType	int
>3159	IncDecOp	 
>3160	IncDec	++
>3161	Identifier	j
>3162	Condition	 
>3163	RelationalExpression	j < num_points
>3164	Identifier	num_points
>3165	Identifier	j
>3166	ForInit	 
>3167	IdentifierDeclStatement	int j = 0 ;
>3168	IdentifierDecl	j = 0
>3169	AssignmentExpr	j = 0
>3170	PrimaryExpression	0
>3171	Identifier	j
>3172	Identifier	j
>3173	IdentifierDeclType	int
>3174	ExpressionStatement	 
>3175	CallExpression	m_image_data [ i ] . LoadKeys ( true )
>3176	ArgumentList	true
>3177	Argument	true
>3178	Identifier	true
>3179	Callee	m_image_data [ i ] . LoadKeys
>3180	MemberAccess	m_image_data [ i ] . LoadKeys
>3181	Identifier	LoadKeys
>3182	ArrayIndexing	m_image_data [ i ]
>3183	Identifier	i
>3184	Identifier	m_image_data
>3185	ExpressionStatement	 
>3186	CallExpression	fflush ( stdout )
>3187	ArgumentList	stdout
>3188	Argument	stdout
>3189	Identifier	stdout
>3190	Callee	fflush
>3191	Identifier	fflush
>3192	ExpressionStatement	 
>3193	Statement	 
>3194	Statement	 
>3195	Statement	 
>3196	Statement	 
>3197	Statement	 
>3198	Statement	 
>3199	Statement	 
>3200	IfStatement	if ( ! m_image_data [ i ] . m_camera . m_adjusted )
>3201	ContinueStatement	 
>3202	Condition	 
>3203	UnaryOp	! m_image_data [ i ] . m_camera . m_adjusted
>3204	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>3205	Identifier	m_adjusted
>3206	MemberAccess	m_image_data [ i ] . m_camera
>3207	Identifier	m_camera
>3208	ArrayIndexing	m_image_data [ i ]
>3209	Identifier	i
>3210	Identifier	m_image_data
>3211	UnaryOperator	!
>3212	IncDecOp	 
>3213	IncDec	++
>3214	Identifier	i
>3215	Condition	 
>3216	RelationalExpression	i < num_images
>3217	Identifier	num_images
>3218	Identifier	i
>3219	ForInit	 
>3220	IdentifierDeclStatement	int i = 0 ;
>3221	IdentifierDecl	i = 0
>3222	AssignmentExpr	i = 0
>3223	PrimaryExpression	0
>3224	Identifier	i
>3225	Identifier	i
>3226	IdentifierDeclType	int
>3227	IdentifierDeclStatement	 
>3228	IdentifierDecl	num_images = GetNumImages ( )
>3229	AssignmentExpr	num_images = GetNumImages ( )
>3230	CallExpression	GetNumImages ( )
>3231	ArgumentList	 
>3232	Callee	GetNumImages
>3233	Identifier	GetNumImages
>3234	Identifier	num_images
>3235	Identifier	num_images
>3236	IdentifierDeclType	int
>3237	IdentifierDeclStatement	 
>3238	IdentifierDecl	* xx = new float [ num_points * 128 ]
>3239	AssignmentExpr	* xx = new float [ num_points * 128 ]
>3240	MultiplicativeExpression	num_points * 128
>3241	PrimaryExpression	128
>3242	Identifier	num_points
>3243	Identifier	xx
>3244	Identifier	xx
>3245	IdentifierDeclType	float *
>3246	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>3247	CompoundStatement	 
>3248	ForStatement	for ( int j = 0 ; j < 128 ; j ++ )
>3249	ExpressionStatement	 
>3250	AssignmentExpr	m_point_data [ i ] . m_desc [ j ] = 0.0f
>3251	PrimaryExpression	0.0f
>3252	ArrayIndexing	m_point_data [ i ] . m_desc [ j ]
>3253	Identifier	j
>3254	MemberAccess	m_point_data [ i ] . m_desc
>3255	Identifier	m_desc
>3256	ArrayIndexing	m_point_data [ i ]
>3257	Identifier	i
>3258	Identifier	m_point_data
>3259	IncDecOp	 
>3260	IncDec	++
>3261	Identifier	j
>3262	Condition	 
>3263	RelationalExpression	j < 128
>3264	PrimaryExpression	128
>3265	Identifier	j
>3266	ForInit	 
>3267	IdentifierDeclStatement	int j = 0 ;
>3268	IdentifierDecl	j = 0
>3269	AssignmentExpr	j = 0
>3270	PrimaryExpression	0
>3271	Identifier	j
>3272	Identifier	j
>3273	IdentifierDeclType	int
>3274	ExpressionStatement	 
>3275	AssignmentExpr	m_point_data [ i ] . m_desc = new float [ 128 ]
>3276	PrimaryExpression	128
>3277	MemberAccess	m_point_data [ i ] . m_desc
>3278	Identifier	m_desc
>3279	ArrayIndexing	m_point_data [ i ]
>3280	Identifier	i
>3281	Identifier	m_point_data
>3282	ExpressionStatement	 
>3283	AssignmentExpr	num_observations [ i ] = 0
>3284	PrimaryExpression	0
>3285	ArrayIndexing	num_observations [ i ]
>3286	Identifier	i
>3287	Identifier	num_observations
>3288	IncDecOp	 
>3289	IncDec	++
>3290	Identifier	i
>3291	Condition	 
>3292	RelationalExpression	i < num_points
>3293	Identifier	num_points
>3294	Identifier	i
>3295	ForInit	 
>3296	IdentifierDeclStatement	int i = 0 ;
>3297	IdentifierDecl	i = 0
>3298	AssignmentExpr	i = 0
>3299	PrimaryExpression	0
>3300	Identifier	i
>3301	Identifier	i
>3302	IdentifierDeclType	int
>3303	IdentifierDeclStatement	 
>3304	IdentifierDecl	* num_observations = new int [ num_points ]
>3305	AssignmentExpr	* num_observations = new int [ num_points ]
>3306	Identifier	num_points
>3307	Identifier	num_points
>3308	Identifier	num_observations
>3309	IdentifierDeclType	int *
>3310	IdentifierDeclStatement	 
>3311	IdentifierDecl	num_points = ( int ) m_point_data . size ( )
>3312	AssignmentExpr	num_points = ( int ) m_point_data . size ( )
>3313	CastExpression	( int ) m_point_data . size ( )
>3314	CallExpression	m_point_data . size ( )
>3315	ArgumentList	 
>3316	Callee	m_point_data . size
>3317	MemberAccess	m_point_data . size
>3318	Identifier	size
>3319	Identifier	m_point_data
>3320	CastTarget	int
>3321	Identifier	num_points
>3322	Identifier	num_points
>3323	IdentifierDeclType	int
>3324	IfStatement	if ( m_features_coalesced )
>3325	ReturnStatement	 
>3326	Condition	 
>3327	Identifier	m_features_coalesced
>3381	FunctionDef	BundlerApp 
>3382	ParameterList	const std 
>3383	Parameter	 
>3384	Identifier	ratio
>3385	ParameterType	double
>3386	Parameter	 
>3387	Identifier	k1
>3388	ParameterType	const std 
>3389	ReturnType	std 
>3390	CompoundStatement	 
>3391	ReturnStatement	 
>3392	Identifier	matches
>3393	ExpressionStatement	 
>3394	Identifier	tree
>3395	Statement	 
>3396	ExpressionStatement	 
>3397	CallExpression	ann_1_1_char 
>3398	ArgumentList	query
>3399	Argument	query
>3400	Identifier	query
>3401	Callee	ann_1_1_char 
>3402	Identifier	ann_1_1_char 
>3403	ExpressionStatement	 
>3404	CallExpression	ann_1_1_char 
>3405	ArgumentList	pts
>3406	Argument	pts
>3407	Identifier	pts
>3408	Callee	ann_1_1_char 
>3409	Identifier	ann_1_1_char 
>3410	ExpressionStatement	 
>3411	CallExpression	printf ( \"[MatchKeys] Found %d matches\n\" , num_matches )
>3412	ArgumentList	\"[MatchKeys] Found %d matches\n\"
>3413	Argument	num_matches
>3414	Identifier	num_matches
>3415	Argument	\"[MatchKeys] Found %d matches\n\"
>3416	PrimaryExpression	\"[MatchKeys] Found %d matches\n\"
>3417	Callee	printf
>3418	Identifier	printf
>3419	IdentifierDeclStatement	 
>3420	IdentifierDecl	num_matches = ( int ) matches . size ( )
>3421	AssignmentExpr	num_matches = ( int ) matches . size ( )
>3422	CastExpression	( int ) matches . size ( )
>3423	CallExpression	matches . size ( )
>3424	ArgumentList	 
>3425	Callee	matches . size
>3426	MemberAccess	matches . size
>3427	Identifier	size
>3428	Identifier	matches
>3429	CastTarget	int
>3430	Identifier	num_matches
>3431	Identifier	num_matches
>3432	IdentifierDeclType	int
>3433	ExpressionStatement	 
>3434	CallExpression	printf ( \"[MatchKeysToPoints] Searching tree took %0.3fs\n\" , ( end - start ) / ( ( double ) CLOCKS_PER_SEC ) )
>3435	ArgumentList	\"[MatchKeysToPoints] Searching tree took %0.3fs\n\"
>3436	Argument	( end - start ) / ( ( double ) CLOCKS_PER_SEC )
>3437	MultiplicativeExpression	( end - start ) / ( ( double ) CLOCKS_PER_SEC )
>3438	CastExpression	( double ) CLOCKS_PER_SEC
>3439	Identifier	CLOCKS_PER_SEC
>3440	CastTarget	double
>3441	AdditiveExpression	end - start
>3442	Identifier	start
>3443	Identifier	end
>3444	Argument	\"[MatchKeysToPoints] Searching tree took %0.3fs\n\"
>3445	PrimaryExpression	\"[MatchKeysToPoints] Searching tree took %0.3fs\n\"
>3446	Callee	printf
>3447	Identifier	printf
>3448	ExpressionStatement	 
>3449	AssignmentExpr	end = clock ( )
>3450	CallExpression	clock ( )
>3451	ArgumentList	 
>3452	Callee	clock
>3453	Identifier	clock
>3454	Identifier	end
>3455	ForStatement	for ( int i = 0 ; i < ( int ) k1 . size ( ) ; i ++ )
>3456	CompoundStatement	 
>3457	IfStatement	if ( sqrt ( ( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] ) ) < ratio )
>3458	CompoundStatement	 
>3459	ExpressionStatement	 
>3460	CallExpression	matches . push_back ( KeypointMatch ( i , nn_idx [ 0 ] ) )
>3461	ArgumentList	KeypointMatch ( i , nn_idx [ 0 ] )
>3462	Argument	KeypointMatch ( i , nn_idx [ 0 ] )
>3463	CallExpression	KeypointMatch ( i , nn_idx [ 0 ] )
>3464	ArgumentList	i
>3465	Argument	nn_idx [ 0 ]
>3466	ArrayIndexing	nn_idx [ 0 ]
>3467	PrimaryExpression	0
>3468	Identifier	nn_idx
>3469	Argument	i
>3470	Identifier	i
>3471	Callee	KeypointMatch
>3472	Identifier	KeypointMatch
>3473	Callee	matches . push_back
>3474	MemberAccess	matches . push_back
>3475	Identifier	push_back
>3476	Identifier	matches
>3477	Condition	 
>3478	RelationalExpression	sqrt ( ( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] ) ) < ratio
>3479	Identifier	ratio
>3480	CallExpression	sqrt ( ( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] ) )
>3481	ArgumentList	( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] )
>3482	Argument	( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] )
>3483	MultiplicativeExpression	( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] )
>3484	CastExpression	( double ) dist [ 1 ]
>3485	ArrayIndexing	dist [ 1 ]
>3486	PrimaryExpression	1
>3487	Identifier	dist
>3488	CastTarget	double
>3489	CastExpression	( double ) dist [ 0 ]
>3490	ArrayIndexing	dist [ 0 ]
>3491	PrimaryExpression	0
>3492	Identifier	dist
>3493	CastTarget	double
>3494	Callee	sqrt
>3495	Identifier	sqrt
>3496	ExpressionStatement	 
>3497	CallExpression	tree -> annkPriSearch ( query , 2 , nn_idx , dist , 0.0 )
>3498	ArgumentList	query
>3499	Argument	0.0
>3500	PrimaryExpression	0.0
>3501	Argument	dist
>3502	Identifier	dist
>3503	Argument	nn_idx
>3504	Identifier	nn_idx
>3505	Argument	2
>3506	PrimaryExpression	2
>3507	Argument	query
>3508	Identifier	query
>3509	Callee	tree -> annkPriSearch
>3510	PtrMemberAccess	tree -> annkPriSearch
>3511	Identifier	annkPriSearch
>3512	Identifier	tree
>3513	IdentifierDeclStatement	 
>3514	IdentifierDecl	dist [ 2 ]
>3515	PrimaryExpression	2
>3516	Identifier	dist
>3517	IdentifierDeclType	ann_1_1_char 
>3518	IdentifierDeclStatement	 
>3519	IdentifierDecl	nn_idx [ 2 ]
>3520	PrimaryExpression	2
>3521	Identifier	nn_idx
>3522	IdentifierDeclType	ann_1_1_char 
>3523	ForStatement	for ( j = 0 ; j < 128 ; j ++ )
>3524	CompoundStatement	 
>3525	ExpressionStatement	 
>3526	AssignmentExpr	query [ j ] = k1 [ i ] . m_d [ j ]
>3527	ArrayIndexing	k1 [ i ] . m_d [ j ]
>3528	Identifier	j
>3529	MemberAccess	k1 [ i ] . m_d
>3530	Identifier	m_d
>3531	ArrayIndexing	k1 [ i ]
>3532	Identifier	i
>3533	Identifier	k1
>3534	ArrayIndexing	query [ j ]
>3535	Identifier	j
>3536	Identifier	query
>3537	IncDecOp	 
>3538	IncDec	++
>3539	Identifier	j
>3540	Condition	 
>3541	RelationalExpression	j < 128
>3542	PrimaryExpression	128
>3543	Identifier	j
>3544	ForInit	 
>3545	AssignmentExpr	j = 0
>3546	PrimaryExpression	0
>3547	Identifier	j
>3548	IdentifierDeclStatement	 
>3549	IdentifierDecl	j
>3550	Identifier	j
>3551	IdentifierDeclType	int
>3552	IncDecOp	 
>3553	IncDec	++
>3554	Identifier	i
>3555	Condition	 
>3556	RelationalExpression	i < ( int ) k1 . size ( )
>3557	CastExpression	( int ) k1 . size ( )
>3558	CallExpression	k1 . size ( )
>3559	ArgumentList	 
>3560	Callee	k1 . size
>3561	MemberAccess	k1 . size
>3562	Identifier	size
>3563	Identifier	k1
>3564	CastTarget	int
>3565	Identifier	i
>3566	ForInit	 
>3567	IdentifierDeclStatement	int i = 0 ;
>3568	IdentifierDecl	i = 0
>3569	AssignmentExpr	i = 0
>3570	PrimaryExpression	0
>3571	Identifier	i
>3572	Identifier	i
>3573	IdentifierDeclType	int
>3574	ExpressionStatement	 
>3575	AssignmentExpr	start = clock ( )
>3576	CallExpression	clock ( )
>3577	ArgumentList	 
>3578	Callee	clock
>3579	Identifier	clock
>3580	Identifier	start
>3581	IdentifierDeclStatement	 
>3582	IdentifierDecl	query = ann_1_1_char 
>3583	AssignmentExpr	query = ann_1_1_char 
>3584	CallExpression	ann_1_1_char 
>3585	ArgumentList	128
>3586	Argument	128
>3587	PrimaryExpression	128
>3588	Callee	ann_1_1_char 
>3589	Identifier	ann_1_1_char 
>3590	Identifier	query
>3591	Identifier	query
>3592	IdentifierDeclType	ann_1_1_char 
>3593	ExpressionStatement	 
>3594	CallExpression	printf ( \"[MatchKeysToPoints] Building tree took %0.3fs\n\" , ( end - start ) / ( ( double ) CLOCKS_PER_SEC ) )
>3595	ArgumentList	\"[MatchKeysToPoints] Building tree took %0.3fs\n\"
>3596	Argument	( end - start ) / ( ( double ) CLOCKS_PER_SEC )
>3597	MultiplicativeExpression	( end - start ) / ( ( double ) CLOCKS_PER_SEC )
>3598	CastExpression	( double ) CLOCKS_PER_SEC
>3599	Identifier	CLOCKS_PER_SEC
>3600	CastTarget	double
>3601	AdditiveExpression	end - start
>3602	Identifier	start
>3603	Identifier	end
>3604	Argument	\"[MatchKeysToPoints] Building tree took %0.3fs\n\"
>3605	PrimaryExpression	\"[MatchKeysToPoints] Building tree took %0.3fs\n\"
>3606	Callee	printf
>3607	Identifier	printf
>3608	IdentifierDeclStatement	 
>3609	IdentifierDecl	end = clock ( )
>3610	AssignmentExpr	end = clock ( )
>3611	CallExpression	clock ( )
>3612	ArgumentList	 
>3613	Callee	clock
>3614	Identifier	clock
>3615	Identifier	end
>3616	Identifier	end
>3617	IdentifierDeclType	clock_t
>3618	IdentifierDeclStatement	 
>3619	IdentifierDecl	* tree = new ann_1_1_char 
>3620	AssignmentExpr	* tree = new ann_1_1_char 
>3621	Expression	pts , num_points , 128 , 4
>3622	Expression	num_points , 128 , 4
>3623	Expression	128 , 4
>3624	PrimaryExpression	4
>3625	PrimaryExpression	128
>3626	Identifier	num_points
>3627	Identifier	pts
>3628	Identifier	tree
>3629	Identifier	tree
>3630	IdentifierDeclType	ann_1_1_char 
>3631	IdentifierDeclStatement	 
>3632	IdentifierDecl	start = clock ( )
>3633	AssignmentExpr	start = clock ( )
>3634	CallExpression	clock ( )
>3635	ArgumentList	 
>3636	Callee	clock
>3637	Identifier	clock
>3638	Identifier	start
>3639	Identifier	start
>3640	IdentifierDeclType	clock_t
>3641	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>3642	CompoundStatement	 
>3643	ForStatement	for ( int j = 0 ; j < 128 ; j ++ )
>3644	CompoundStatement	 
>3645	ExpressionStatement	 
>3646	AssignmentExpr	pts [ i ] [ j ] = m_point_data [ i ] . m_desc [ j ]
>3647	ArrayIndexing	m_point_data [ i ] . m_desc [ j ]
>3648	Identifier	j
>3649	MemberAccess	m_point_data [ i ] . m_desc
>3650	Identifier	m_desc
>3651	ArrayIndexing	m_point_data [ i ]
>3652	Identifier	i
>3653	Identifier	m_point_data
>3654	ArrayIndexing	pts [ i ] [ j ]
>3655	Identifier	j
>3656	ArrayIndexing	pts [ i ]
>3657	Identifier	i
>3658	Identifier	pts
>3659	IncDecOp	 
>3660	IncDec	++
>3661	Identifier	j
>3662	Condition	 
>3663	RelationalExpression	j < 128
>3664	PrimaryExpression	128
>3665	Identifier	j
>3666	ForInit	 
>3667	IdentifierDeclStatement	int j = 0 ;
>3668	IdentifierDecl	j = 0
>3669	AssignmentExpr	j = 0
>3670	PrimaryExpression	0
>3671	Identifier	j
>3672	Identifier	j
>3673	IdentifierDeclType	int
>3674	IncDecOp	 
>3675	IncDec	++
>3676	Identifier	i
>3677	Condition	 
>3678	RelationalExpression	i < num_points
>3679	Identifier	num_points
>3680	Identifier	i
>3681	ForInit	 
>3682	IdentifierDeclStatement	int i = 0 ;
>3683	IdentifierDecl	i = 0
>3684	AssignmentExpr	i = 0
>3685	PrimaryExpression	0
>3686	Identifier	i
>3687	Identifier	i
>3688	IdentifierDeclType	int
>3689	IdentifierDeclStatement	 
>3690	IdentifierDecl	pts = ann_1_1_char 
>3691	AssignmentExpr	pts = ann_1_1_char 
>3692	CallExpression	ann_1_1_char 
>3693	ArgumentList	num_points
>3694	Argument	128
>3695	PrimaryExpression	128
>3696	Argument	num_points
>3697	Identifier	num_points
>3698	Callee	ann_1_1_char 
>3699	Identifier	ann_1_1_char 
>3700	Identifier	pts
>3701	Identifier	pts
>3702	IdentifierDeclType	ann_1_1_char 
>3703	IdentifierDeclStatement	 
>3704	IdentifierDecl	matches
>3705	Identifier	matches
>3706	IdentifierDeclType	std 
>3707	IdentifierDeclStatement	 
>3708	IdentifierDecl	num_points = ( int ) m_point_data . size ( )
>3709	AssignmentExpr	num_points = ( int ) m_point_data . size ( )
>3710	CastExpression	( int ) m_point_data . size ( )
>3711	CallExpression	m_point_data . size ( )
>3712	ArgumentList	 
>3713	Callee	m_point_data . size
>3714	MemberAccess	m_point_data . size
>3715	Identifier	size
>3716	Identifier	m_point_data
>3717	CastTarget	int
>3718	Identifier	num_points
>3719	Identifier	num_points
>3720	IdentifierDeclType	int
>3721	ExpressionStatement	 
>3722	CallExpression	ann_1_1_char 
>3723	ArgumentList	20000
>3724	Argument	20000
>3725	PrimaryExpression	20000
>3726	Callee	ann_1_1_char 
>3727	Identifier	ann_1_1_char 
>3771	FunctionDef	BundlerApp 
>3772	ParameterList	const std 
>3773	Parameter	 
>3774	Identifier	ratio
>3775	ParameterType	double
>3776	Parameter	 
>3777	Identifier	keys
>3778	ParameterType	const std 
>3779	ReturnType	std 
>3780	CompoundStatement	 
>3781	ReturnStatement	 
>3782	Identifier	matches
>3783	ExpressionStatement	 
>3784	Identifier	tree
>3785	Statement	 
>3786	ExpressionStatement	 
>3787	CallExpression	ann_1_1_char 
>3788	ArgumentList	query
>3789	Argument	query
>3790	Identifier	query
>3791	Callee	ann_1_1_char 
>3792	Identifier	ann_1_1_char 
>3793	ExpressionStatement	 
>3794	CallExpression	ann_1_1_char 
>3795	ArgumentList	pts
>3796	Argument	pts
>3797	Identifier	pts
>3798	Callee	ann_1_1_char 
>3799	Identifier	ann_1_1_char 
>3800	ExpressionStatement	 
>3801	CallExpression	fflush ( stdout )
>3802	ArgumentList	stdout
>3803	Argument	stdout
>3804	Identifier	stdout
>3805	Callee	fflush
>3806	Identifier	fflush
>3807	ExpressionStatement	 
>3808	CallExpression	printf ( \"[MatchPointsToKeys] Found %d matches\n\" , num_matches )
>3809	ArgumentList	\"[MatchPointsToKeys] Found %d matches\n\"
>3810	Argument	num_matches
>3811	Identifier	num_matches
>3812	Argument	\"[MatchPointsToKeys] Found %d matches\n\"
>3813	PrimaryExpression	\"[MatchPointsToKeys] Found %d matches\n\"
>3814	Callee	printf
>3815	Identifier	printf
>3816	IdentifierDeclStatement	 
>3817	IdentifierDecl	num_matches = ( int ) matches . size ( )
>3818	AssignmentExpr	num_matches = ( int ) matches . size ( )
>3819	CastExpression	( int ) matches . size ( )
>3820	CallExpression	matches . size ( )
>3821	ArgumentList	 
>3822	Callee	matches . size
>3823	MemberAccess	matches . size
>3824	Identifier	size
>3825	Identifier	matches
>3826	CastTarget	int
>3827	Identifier	num_matches
>3828	Identifier	num_matches
>3829	IdentifierDeclType	int
>3830	ExpressionStatement	 
>3831	CallExpression	printf ( \"[MatchPointsToKeys] Searching tree took %0.3fs\n\" , ( end - start ) / ( ( double ) CLOCKS_PER_SEC ) )
>3832	ArgumentList	\"[MatchPointsToKeys] Searching tree took %0.3fs\n\"
>3833	Argument	( end - start ) / ( ( double ) CLOCKS_PER_SEC )
>3834	MultiplicativeExpression	( end - start ) / ( ( double ) CLOCKS_PER_SEC )
>3835	CastExpression	( double ) CLOCKS_PER_SEC
>3836	Identifier	CLOCKS_PER_SEC
>3837	CastTarget	double
>3838	AdditiveExpression	end - start
>3839	Identifier	start
>3840	Identifier	end
>3841	Argument	\"[MatchPointsToKeys] Searching tree took %0.3fs\n\"
>3842	PrimaryExpression	\"[MatchPointsToKeys] Searching tree took %0.3fs\n\"
>3843	Callee	printf
>3844	Identifier	printf
>3845	ExpressionStatement	 
>3846	AssignmentExpr	end = clock ( )
>3847	CallExpression	clock ( )
>3848	ArgumentList	 
>3849	Callee	clock
>3850	Identifier	clock
>3851	Identifier	end
>3852	ForStatement	for ( int i = 0 ; i < ( int ) m_point_data . size ( ) ; i ++ )
>3853	CompoundStatement	 
>3854	IfStatement	if ( sqrt ( ( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] ) ) < ratio )
>3855	CompoundStatement	 
>3856	ExpressionStatement	 
>3857	CallExpression	matches . push_back ( KeypointMatch ( i , nn_idx [ 0 ] ) )
>3858	ArgumentList	KeypointMatch ( i , nn_idx [ 0 ] )
>3859	Argument	KeypointMatch ( i , nn_idx [ 0 ] )
>3860	CallExpression	KeypointMatch ( i , nn_idx [ 0 ] )
>3861	ArgumentList	i
>3862	Argument	nn_idx [ 0 ]
>3863	ArrayIndexing	nn_idx [ 0 ]
>3864	PrimaryExpression	0
>3865	Identifier	nn_idx
>3866	Argument	i
>3867	Identifier	i
>3868	Callee	KeypointMatch
>3869	Identifier	KeypointMatch
>3870	Callee	matches . push_back
>3871	MemberAccess	matches . push_back
>3872	Identifier	push_back
>3873	Identifier	matches
>3874	Condition	 
>3875	RelationalExpression	sqrt ( ( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] ) ) < ratio
>3876	Identifier	ratio
>3877	CallExpression	sqrt ( ( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] ) )
>3878	ArgumentList	( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] )
>3879	Argument	( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] )
>3880	MultiplicativeExpression	( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] )
>3881	CastExpression	( double ) dist [ 1 ]
>3882	ArrayIndexing	dist [ 1 ]
>3883	PrimaryExpression	1
>3884	Identifier	dist
>3885	CastTarget	double
>3886	CastExpression	( double ) dist [ 0 ]
>3887	ArrayIndexing	dist [ 0 ]
>3888	PrimaryExpression	0
>3889	Identifier	dist
>3890	CastTarget	double
>3891	Callee	sqrt
>3892	Identifier	sqrt
>3893	ExpressionStatement	 
>3894	CallExpression	tree -> annkPriSearch ( query , 2 , nn_idx , dist , 0.0 )
>3895	ArgumentList	query
>3896	Argument	0.0
>3897	PrimaryExpression	0.0
>3898	Argument	dist
>3899	Identifier	dist
>3900	Argument	nn_idx
>3901	Identifier	nn_idx
>3902	Argument	2
>3903	PrimaryExpression	2
>3904	Argument	query
>3905	Identifier	query
>3906	Callee	tree -> annkPriSearch
>3907	PtrMemberAccess	tree -> annkPriSearch
>3908	Identifier	annkPriSearch
>3909	Identifier	tree
>3910	IdentifierDeclStatement	 
>3911	IdentifierDecl	dist [ 2 ]
>3912	PrimaryExpression	2
>3913	Identifier	dist
>3914	IdentifierDeclType	ann_1_1_char 
>3915	IdentifierDeclStatement	 
>3916	IdentifierDecl	nn_idx [ 2 ]
>3917	PrimaryExpression	2
>3918	Identifier	nn_idx
>3919	IdentifierDeclType	ann_1_1_char 
>3920	ForStatement	for ( j = 0 ; j < 128 ; j ++ )
>3921	CompoundStatement	 
>3922	ExpressionStatement	 
>3923	AssignmentExpr	query [ j ] = m_point_data [ i ] . m_desc [ j ]
>3924	ArrayIndexing	m_point_data [ i ] . m_desc [ j ]
>3925	Identifier	j
>3926	MemberAccess	m_point_data [ i ] . m_desc
>3927	Identifier	m_desc
>3928	ArrayIndexing	m_point_data [ i ]
>3929	Identifier	i
>3930	Identifier	m_point_data
>3931	ArrayIndexing	query [ j ]
>3932	Identifier	j
>3933	Identifier	query
>3934	IncDecOp	 
>3935	IncDec	++
>3936	Identifier	j
>3937	Condition	 
>3938	RelationalExpression	j < 128
>3939	PrimaryExpression	128
>3940	Identifier	j
>3941	ForInit	 
>3942	AssignmentExpr	j = 0
>3943	PrimaryExpression	0
>3944	Identifier	j
>3945	IdentifierDeclStatement	 
>3946	IdentifierDecl	j
>3947	Identifier	j
>3948	IdentifierDeclType	int
>3949	IncDecOp	 
>3950	IncDec	++
>3951	Identifier	i
>3952	Condition	 
>3953	RelationalExpression	i < ( int ) m_point_data . size ( )
>3954	CastExpression	( int ) m_point_data . size ( )
>3955	CallExpression	m_point_data . size ( )
>3956	ArgumentList	 
>3957	Callee	m_point_data . size
>3958	MemberAccess	m_point_data . size
>3959	Identifier	size
>3960	Identifier	m_point_data
>3961	CastTarget	int
>3962	Identifier	i
>3963	ForInit	 
>3964	IdentifierDeclStatement	int i = 0 ;
>3965	IdentifierDecl	i = 0
>3966	AssignmentExpr	i = 0
>3967	PrimaryExpression	0
>3968	Identifier	i
>3969	Identifier	i
>3970	IdentifierDeclType	int
>3971	ExpressionStatement	 
>3972	AssignmentExpr	start = clock ( )
>3973	CallExpression	clock ( )
>3974	ArgumentList	 
>3975	Callee	clock
>3976	Identifier	clock
>3977	Identifier	start
>3978	IdentifierDeclStatement	 
>3979	IdentifierDecl	query = ann_1_1_char 
>3980	AssignmentExpr	query = ann_1_1_char 
>3981	CallExpression	ann_1_1_char 
>3982	ArgumentList	128
>3983	Argument	128
>3984	PrimaryExpression	128
>3985	Callee	ann_1_1_char 
>3986	Identifier	ann_1_1_char 
>3987	Identifier	query
>3988	Identifier	query
>3989	IdentifierDeclType	ann_1_1_char 
>3990	ExpressionStatement	 
>3991	CallExpression	printf ( \"[MatchPointsToKeys] Building tree took %0.3fs\n\" , ( end - start ) / ( ( double ) CLOCKS_PER_SEC ) )
>3992	ArgumentList	\"[MatchPointsToKeys] Building tree took %0.3fs\n\"
>3993	Argument	( end - start ) / ( ( double ) CLOCKS_PER_SEC )
>3994	MultiplicativeExpression	( end - start ) / ( ( double ) CLOCKS_PER_SEC )
>3995	CastExpression	( double ) CLOCKS_PER_SEC
>3996	Identifier	CLOCKS_PER_SEC
>3997	CastTarget	double
>3998	AdditiveExpression	end - start
>3999	Identifier	start
>4000	Identifier	end
>4001	Argument	\"[MatchPointsToKeys] Building tree took %0.3fs\n\"
>4002	PrimaryExpression	\"[MatchPointsToKeys] Building tree took %0.3fs\n\"
>4003	Callee	printf
>4004	Identifier	printf
>4005	IdentifierDeclStatement	 
>4006	IdentifierDecl	end = clock ( )
>4007	AssignmentExpr	end = clock ( )
>4008	CallExpression	clock ( )
>4009	ArgumentList	 
>4010	Callee	clock
>4011	Identifier	clock
>4012	Identifier	end
>4013	Identifier	end
>4014	IdentifierDeclType	clock_t
>4015	IdentifierDeclStatement	 
>4016	IdentifierDecl	* tree = new ann_1_1_char 
>4017	AssignmentExpr	* tree = new ann_1_1_char 
>4018	Expression	pts , num_points , 128 , 4
>4019	Expression	num_points , 128 , 4
>4020	Expression	128 , 4
>4021	PrimaryExpression	4
>4022	PrimaryExpression	128
>4023	Identifier	num_points
>4024	Identifier	pts
>4025	Identifier	tree
>4026	Identifier	tree
>4027	IdentifierDeclType	ann_1_1_char 
>4028	IdentifierDeclStatement	 
>4029	IdentifierDecl	start = clock ( )
>4030	AssignmentExpr	start = clock ( )
>4031	CallExpression	clock ( )
>4032	ArgumentList	 
>4033	Callee	clock
>4034	Identifier	clock
>4035	Identifier	start
>4036	Identifier	start
>4037	IdentifierDeclType	clock_t
>4038	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>4039	ForStatement	for ( int j = 0 ; j < 128 ; j ++ )
>4040	ExpressionStatement	 
>4041	AssignmentExpr	pts [ i ] [ j ] = keys [ i ] . m_d [ j ]
>4042	ArrayIndexing	keys [ i ] . m_d [ j ]
>4043	Identifier	j
>4044	MemberAccess	keys [ i ] . m_d
>4045	Identifier	m_d
>4046	ArrayIndexing	keys [ i ]
>4047	Identifier	i
>4048	Identifier	keys
>4049	ArrayIndexing	pts [ i ] [ j ]
>4050	Identifier	j
>4051	ArrayIndexing	pts [ i ]
>4052	Identifier	i
>4053	Identifier	pts
>4054	IncDecOp	 
>4055	IncDec	++
>4056	Identifier	j
>4057	Condition	 
>4058	RelationalExpression	j < 128
>4059	PrimaryExpression	128
>4060	Identifier	j
>4061	ForInit	 
>4062	IdentifierDeclStatement	int j = 0 ;
>4063	IdentifierDecl	j = 0
>4064	AssignmentExpr	j = 0
>4065	PrimaryExpression	0
>4066	Identifier	j
>4067	Identifier	j
>4068	IdentifierDeclType	int
>4069	IncDecOp	 
>4070	IncDec	++
>4071	Identifier	i
>4072	Condition	 
>4073	RelationalExpression	i < num_points
>4074	Identifier	num_points
>4075	Identifier	i
>4076	ForInit	 
>4077	IdentifierDeclStatement	int i = 0 ;
>4078	IdentifierDecl	i = 0
>4079	AssignmentExpr	i = 0
>4080	PrimaryExpression	0
>4081	Identifier	i
>4082	Identifier	i
>4083	IdentifierDeclType	int
>4084	IdentifierDeclStatement	 
>4085	IdentifierDecl	pts = ann_1_1_char 
>4086	AssignmentExpr	pts = ann_1_1_char 
>4087	CallExpression	ann_1_1_char 
>4088	ArgumentList	num_points
>4089	Argument	128
>4090	PrimaryExpression	128
>4091	Argument	num_points
>4092	Identifier	num_points
>4093	Callee	ann_1_1_char 
>4094	Identifier	ann_1_1_char 
>4095	Identifier	pts
>4096	Identifier	pts
>4097	IdentifierDeclType	ann_1_1_char 
>4098	IdentifierDeclStatement	 
>4099	IdentifierDecl	matches
>4100	Identifier	matches
>4101	IdentifierDeclType	std 
>4102	IdentifierDeclStatement	 
>4103	IdentifierDecl	num_points = ( int ) keys . size ( )
>4104	AssignmentExpr	num_points = ( int ) keys . size ( )
>4105	CastExpression	( int ) keys . size ( )
>4106	CallExpression	keys . size ( )
>4107	ArgumentList	 
>4108	Callee	keys . size
>4109	MemberAccess	keys . size
>4110	Identifier	size
>4111	Identifier	keys
>4112	CastTarget	int
>4113	Identifier	num_points
>4114	Identifier	num_points
>4115	IdentifierDeclType	int
>4116	ExpressionStatement	 
>4117	CallExpression	ann_1_1_char 
>4118	ArgumentList	200
>4119	Argument	200
>4120	PrimaryExpression	200
>4121	Callee	ann_1_1_char 
>4122	Identifier	ann_1_1_char 
>4167	FunctionDef	BundlerApp 
>4168	ParameterList	int i1 , int i2 , int border_width
>4169	Parameter	 
>4170	Identifier	border_width
>4171	ParameterType	int
>4172	Parameter	 
>4173	Identifier	i2
>4174	ParameterType	int
>4175	Parameter	 
>4176	Identifier	i1
>4177	ParameterType	int
>4178	ReturnType	void
>4179	CompoundStatement	 
>4180	ExpressionStatement	 
>4181	CallExpression	printf ( \"[RemoveMatchesNearBorder] Removed %d matches from pair (%d,%d)\n\" , num_removed , i1 , i2 )
>4182	ArgumentList	\"[RemoveMatchesNearBorder] Removed %d matches from pair (%d,%d)\n\"
>4183	Argument	i2
>4184	Identifier	i2
>4185	Argument	i1
>4186	Identifier	i1
>4187	Argument	num_removed
>4188	Identifier	num_removed
>4189	Argument	\"[RemoveMatchesNearBorder] Removed %d matches from pair (%d,%d)\n\"
>4190	PrimaryExpression	\"[RemoveMatchesNearBorder] Removed %d matches from pair (%d,%d)\n\"
>4191	Callee	printf
>4192	Identifier	printf
>4193	ForStatement	for ( int k = 0 ; k < num_matches ; k ++ )
>4194	CompoundStatement	 
>4195	IfStatement	if ( k1 . m_x < w1_min || k1 . m_x > w1_max || k1 . m_y < h1_min || k1 . m_y > h1_max || k2 . m_x < w2_min || k2 \
>4196	CompoundStatement	 
>4197	ExpressionStatement	 
>4198	IncDecOp	num_removed ++
>4199	IncDec	++
>4200	Identifier	num_removed
>4201	ExpressionStatement	 
>4202	IncDecOp	num_matches --
>4203	IncDec	--
>4204	Identifier	num_matches
>4205	ExpressionStatement	 
>4206	IncDecOp	k --
>4207	IncDec	--
>4208	Identifier	k
>4209	ExpressionStatement	 
>4210	CallExpression	list . erase ( list . begin ( ) + k )
>4211	ArgumentList	list . begin ( ) + k
>4212	Argument	list . begin ( ) + k
>4213	AdditiveExpression	list . begin ( ) + k
>4214	Identifier	k
>4215	CallExpression	list . begin ( )
>4216	ArgumentList	 
>4217	Callee	list . begin
>4218	MemberAccess	list . begin
>4219	Identifier	begin
>4220	Identifier	list
>4221	Callee	list . erase
>4222	MemberAccess	list . erase
>4223	Identifier	erase
>4224	Identifier	list
>4225	Condition	 
>4226	OrExpression	k1 . m_x < w1_min || k1 . m_x > w1_max || k1 . m_y < h1_min || k1 . m_y > h1_max || k2 . m_x < w2_min || \
>4227	OrExpression	k1 . m_x > w1_max || k1 . m_y < h1_min || k1 . m_y > h1_max || k2 . m_x < w2_min || k2 . m_x > w2_max || \
>4228	OrExpression	k1 . m_y < h1_min || k1 . m_y > h1_max || k2 . m_x < w2_min || k2 . m_x > w2_max || k2 . m_y < h2_min || \
>4229	OrExpression	k1 . m_y > h1_max || k2 . m_x < w2_min || k2 . m_x > w2_max || k2 . m_y < h2_min || k2 . m_y > h2_max
>4230	OrExpression	k2 . m_x < w2_min || k2 . m_x > w2_max || k2 . m_y < h2_min || k2 . m_y > h2_max
>4231	OrExpression	k2 . m_x > w2_max || k2 . m_y < h2_min || k2 . m_y > h2_max
>4232	OrExpression	k2 . m_y < h2_min || k2 . m_y > h2_max
>4233	RelationalExpression	k2 . m_y > h2_max
>4234	Identifier	h2_max
>4235	MemberAccess	k2 . m_y
>4236	Identifier	m_y
>4237	Identifier	k2
>4238	RelationalExpression	k2 . m_y < h2_min
>4239	Identifier	h2_min
>4240	MemberAccess	k2 . m_y
>4241	Identifier	m_y
>4242	Identifier	k2
>4243	RelationalExpression	k2 . m_x > w2_max
>4244	Identifier	w2_max
>4245	MemberAccess	k2 . m_x
>4246	Identifier	m_x
>4247	Identifier	k2
>4248	RelationalExpression	k2 . m_x < w2_min
>4249	Identifier	w2_min
>4250	MemberAccess	k2 . m_x
>4251	Identifier	m_x
>4252	Identifier	k2
>4253	RelationalExpression	k1 . m_y > h1_max
>4254	Identifier	h1_max
>4255	MemberAccess	k1 . m_y
>4256	Identifier	m_y
>4257	Identifier	k1
>4258	RelationalExpression	k1 . m_y < h1_min
>4259	Identifier	h1_min
>4260	MemberAccess	k1 . m_y
>4261	Identifier	m_y
>4262	Identifier	k1
>4263	RelationalExpression	k1 . m_x > w1_max
>4264	Identifier	w1_max
>4265	MemberAccess	k1 . m_x
>4266	Identifier	m_x
>4267	Identifier	k1
>4268	RelationalExpression	k1 . m_x < w1_min
>4269	Identifier	w1_min
>4270	MemberAccess	k1 . m_x
>4271	Identifier	m_x
>4272	Identifier	k1
>4273	IdentifierDeclStatement	 
>4274	IdentifierDecl	& k2 = m_image_data [ i2 ] . m_keys [ m . m_idx2 ]
>4275	AssignmentExpr	& k2 = m_image_data [ i2 ] . m_keys [ m . m_idx2 ]
>4276	ArrayIndexing	m_image_data [ i2 ] . m_keys [ m . m_idx2 ]
>4277	MemberAccess	m . m_idx2
>4278	Identifier	m_idx2
>4279	Identifier	m
>4280	MemberAccess	m_image_data [ i2 ] . m_keys
>4281	Identifier	m_keys
>4282	ArrayIndexing	m_image_data [ i2 ]
>4283	Identifier	i2
>4284	Identifier	m_image_data
>4285	Identifier	k2
>4286	Identifier	k2
>4287	IdentifierDeclType	const Keypoint &
>4288	IdentifierDeclStatement	 
>4289	IdentifierDecl	& k1 = m_image_data [ i1 ] . m_keys [ m . m_idx1 ]
>4290	AssignmentExpr	& k1 = m_image_data [ i1 ] . m_keys [ m . m_idx1 ]
>4291	ArrayIndexing	m_image_data [ i1 ] . m_keys [ m . m_idx1 ]
>4292	MemberAccess	m . m_idx1
>4293	Identifier	m_idx1
>4294	Identifier	m
>4295	MemberAccess	m_image_data [ i1 ] . m_keys
>4296	Identifier	m_keys
>4297	ArrayIndexing	m_image_data [ i1 ]
>4298	Identifier	i1
>4299	Identifier	m_image_data
>4300	Identifier	k1
>4301	Identifier	k1
>4302	IdentifierDeclType	const Keypoint &
>4303	IdentifierDeclStatement	 
>4304	IdentifierDecl	& m = list [ k ]
>4305	AssignmentExpr	& m = list [ k ]
>4306	ArrayIndexing	list [ k ]
>4307	Identifier	k
>4308	Identifier	list
>4309	Identifier	m
>4310	Identifier	m
>4311	IdentifierDeclType	KeypointMatch &
>4312	IncDecOp	 
>4313	IncDec	++
>4314	Identifier	k
>4315	Condition	 
>4316	RelationalExpression	k < num_matches
>4317	Identifier	num_matches
>4318	Identifier	k
>4319	ForInit	 
>4320	IdentifierDeclStatement	int k = 0 ;
>4321	IdentifierDecl	k = 0
>4322	AssignmentExpr	k = 0
>4323	PrimaryExpression	0
>4324	Identifier	k
>4325	Identifier	k
>4326	IdentifierDeclType	int
>4327	IdentifierDeclStatement	 
>4328	IdentifierDecl	num_removed = 0
>4329	AssignmentExpr	num_removed = 0
>4330	PrimaryExpression	0
>4331	Identifier	num_removed
>4332	Identifier	num_removed
>4333	IdentifierDeclType	int
>4334	IdentifierDeclStatement	 
>4335	IdentifierDecl	h2_max = 0.5 * h2 - border_width
>4336	AssignmentExpr	h2_max = 0.5 * h2 - border_width
>4337	AdditiveExpression	0.5 * h2 - border_width
>4338	Identifier	border_width
>4339	MultiplicativeExpression	0.5 * h2
>4340	Identifier	h2
>4341	PrimaryExpression	0.5
>4342	Identifier	h2_max
>4343	Identifier	h2_max
>4344	IdentifierDeclType	double
>4345	IdentifierDeclStatement	 
>4346	IdentifierDecl	h2_min = - 0.5 * h2 + border_width
>4347	AssignmentExpr	h2_min = - 0.5 * h2 + border_width
>4348	AdditiveExpression	- 0.5 * h2 + border_width
>4349	Identifier	border_width
>4350	MultiplicativeExpression	- 0.5 * h2
>4351	Identifier	h2
>4352	UnaryOp	- 0.5
>4353	PrimaryExpression	0.5
>4354	UnaryOperator	-
>4355	Identifier	h2_min
>4356	Identifier	h2_min
>4357	IdentifierDeclType	double
>4358	IdentifierDeclStatement	 
>4359	IdentifierDecl	w2_max = 0.5 * w2 - border_width
>4360	AssignmentExpr	w2_max = 0.5 * w2 - border_width
>4361	AdditiveExpression	0.5 * w2 - border_width
>4362	Identifier	border_width
>4363	MultiplicativeExpression	0.5 * w2
>4364	Identifier	w2
>4365	PrimaryExpression	0.5
>4366	Identifier	w2_max
>4367	Identifier	w2_max
>4368	IdentifierDeclType	double
>4369	IdentifierDeclStatement	 
>4370	IdentifierDecl	w2_min = - 0.5 * w2 + border_width
>4371	AssignmentExpr	w2_min = - 0.5 * w2 + border_width
>4372	AdditiveExpression	- 0.5 * w2 + border_width
>4373	Identifier	border_width
>4374	MultiplicativeExpression	- 0.5 * w2
>4375	Identifier	w2
>4376	UnaryOp	- 0.5
>4377	PrimaryExpression	0.5
>4378	UnaryOperator	-
>4379	Identifier	w2_min
>4380	Identifier	w2_min
>4381	IdentifierDeclType	double
>4382	IdentifierDeclStatement	 
>4383	IdentifierDecl	h1_max = 0.5 * h1 - border_width
>4384	AssignmentExpr	h1_max = 0.5 * h1 - border_width
>4385	AdditiveExpression	0.5 * h1 - border_width
>4386	Identifier	border_width
>4387	MultiplicativeExpression	0.5 * h1
>4388	Identifier	h1
>4389	PrimaryExpression	0.5
>4390	Identifier	h1_max
>4391	Identifier	h1_max
>4392	IdentifierDeclType	double
>4393	IdentifierDeclStatement	 
>4394	IdentifierDecl	h1_min = - 0.5 * h1 + border_width
>4395	AssignmentExpr	h1_min = - 0.5 * h1 + border_width
>4396	AdditiveExpression	- 0.5 * h1 + border_width
>4397	Identifier	border_width
>4398	MultiplicativeExpression	- 0.5 * h1
>4399	Identifier	h1
>4400	UnaryOp	- 0.5
>4401	PrimaryExpression	0.5
>4402	UnaryOperator	-
>4403	Identifier	h1_min
>4404	Identifier	h1_min
>4405	IdentifierDeclType	double
>4406	IdentifierDeclStatement	 
>4407	IdentifierDecl	w1_max = 0.5 * w1 - border_width
>4408	AssignmentExpr	w1_max = 0.5 * w1 - border_width
>4409	AdditiveExpression	0.5 * w1 - border_width
>4410	Identifier	border_width
>4411	MultiplicativeExpression	0.5 * w1
>4412	Identifier	w1
>4413	PrimaryExpression	0.5
>4414	Identifier	w1_max
>4415	Identifier	w1_max
>4416	IdentifierDeclType	double
>4417	IdentifierDeclStatement	 
>4418	IdentifierDecl	w1_min = - 0.5 * w1 + border_width
>4419	AssignmentExpr	w1_min = - 0.5 * w1 + border_width
>4420	AdditiveExpression	- 0.5 * w1 + border_width
>4421	Identifier	border_width
>4422	MultiplicativeExpression	- 0.5 * w1
>4423	Identifier	w1
>4424	UnaryOp	- 0.5
>4425	PrimaryExpression	0.5
>4426	UnaryOperator	-
>4427	Identifier	w1_min
>4428	Identifier	w1_min
>4429	IdentifierDeclType	double
>4430	IdentifierDeclStatement	 
>4431	IdentifierDecl	h2 = m_image_data [ i2 ] . GetHeight ( )
>4432	AssignmentExpr	h2 = m_image_data [ i2 ] . GetHeight ( )
>4433	CallExpression	m_image_data [ i2 ] . GetHeight ( )
>4434	ArgumentList	 
>4435	Callee	m_image_data [ i2 ] . GetHeight
>4436	MemberAccess	m_image_data [ i2 ] . GetHeight
>4437	Identifier	GetHeight
>4438	ArrayIndexing	m_image_data [ i2 ]
>4439	Identifier	i2
>4440	Identifier	m_image_data
>4441	Identifier	h2
>4442	Identifier	h2
>4443	IdentifierDeclType	int
>4444	IdentifierDeclStatement	 
>4445	IdentifierDecl	w2 = m_image_data [ i2 ] . GetWidth ( )
>4446	AssignmentExpr	w2 = m_image_data [ i2 ] . GetWidth ( )
>4447	CallExpression	m_image_data [ i2 ] . GetWidth ( )
>4448	ArgumentList	 
>4449	Callee	m_image_data [ i2 ] . GetWidth
>4450	MemberAccess	m_image_data [ i2 ] . GetWidth
>4451	Identifier	GetWidth
>4452	ArrayIndexing	m_image_data [ i2 ]
>4453	Identifier	i2
>4454	Identifier	m_image_data
>4455	Identifier	w2
>4456	Identifier	w2
>4457	IdentifierDeclType	int
>4458	IdentifierDeclStatement	 
>4459	IdentifierDecl	h1 = m_image_data [ i1 ] . GetHeight ( )
>4460	AssignmentExpr	h1 = m_image_data [ i1 ] . GetHeight ( )
>4461	CallExpression	m_image_data [ i1 ] . GetHeight ( )
>4462	ArgumentList	 
>4463	Callee	m_image_data [ i1 ] . GetHeight
>4464	MemberAccess	m_image_data [ i1 ] . GetHeight
>4465	Identifier	GetHeight
>4466	ArrayIndexing	m_image_data [ i1 ]
>4467	Identifier	i1
>4468	Identifier	m_image_data
>4469	Identifier	h1
>4470	Identifier	h1
>4471	IdentifierDeclType	int
>4472	IdentifierDeclStatement	 
>4473	IdentifierDecl	w1 = m_image_data [ i1 ] . GetWidth ( )
>4474	AssignmentExpr	w1 = m_image_data [ i1 ] . GetWidth ( )
>4475	CallExpression	m_image_data [ i1 ] . GetWidth ( )
>4476	ArgumentList	 
>4477	Callee	m_image_data [ i1 ] . GetWidth
>4478	MemberAccess	m_image_data [ i1 ] . GetWidth
>4479	Identifier	GetWidth
>4480	ArrayIndexing	m_image_data [ i1 ]
>4481	Identifier	i1
>4482	Identifier	m_image_data
>4483	Identifier	w1
>4484	Identifier	w1
>4485	IdentifierDeclType	int
>4486	IdentifierDeclStatement	 
>4487	IdentifierDecl	num_matches = ( int ) list . size ( )
>4488	AssignmentExpr	num_matches = ( int ) list . size ( )
>4489	CastExpression	( int ) list . size ( )
>4490	CallExpression	list . size ( )
>4491	ArgumentList	 
>4492	Callee	list . size
>4493	MemberAccess	list . size
>4494	Identifier	size
>4495	Identifier	list
>4496	CastTarget	int
>4497	Identifier	num_matches
>4498	Identifier	num_matches
>4499	IdentifierDeclType	int
>4500	IdentifierDeclStatement	 
>4501	IdentifierDecl	& list = m_matches . GetMatchList ( idx )
>4502	AssignmentExpr	& list = m_matches . GetMatchList ( idx )
>4503	CallExpression	m_matches . GetMatchList ( idx )
>4504	ArgumentList	idx
>4505	Argument	idx
>4506	Identifier	idx
>4507	Callee	m_matches . GetMatchList
>4508	MemberAccess	m_matches . GetMatchList
>4509	Identifier	GetMatchList
>4510	Identifier	m_matches
>4511	Identifier	list
>4512	Identifier	list
>4513	IdentifierDeclType	std 
>4514	ExpressionStatement	 
>4515	CallExpression	assert ( m_image_data [ i2 ] . m_keys_loaded )
>4516	ArgumentList	m_image_data [ i2 ] . m_keys_loaded
>4517	Argument	m_image_data [ i2 ] . m_keys_loaded
>4518	MemberAccess	m_image_data [ i2 ] . m_keys_loaded
>4519	Identifier	m_keys_loaded
>4520	ArrayIndexing	m_image_data [ i2 ]
>4521	Identifier	i2
>4522	Identifier	m_image_data
>4523	Callee	assert
>4524	Identifier	assert
>4525	ExpressionStatement	 
>4526	CallExpression	assert ( m_image_data [ i1 ] . m_keys_loaded )
>4527	ArgumentList	m_image_data [ i1 ] . m_keys_loaded
>4528	Argument	m_image_data [ i1 ] . m_keys_loaded
>4529	MemberAccess	m_image_data [ i1 ] . m_keys_loaded
>4530	Identifier	m_keys_loaded
>4531	ArrayIndexing	m_image_data [ i1 ]
>4532	Identifier	i1
>4533	Identifier	m_image_data
>4534	Callee	assert
>4535	Identifier	assert
>4536	ExpressionStatement	 
>4537	CallExpression	m_matches . Contains ( idx )
>4538	ArgumentList	idx
>4539	Argument	idx
>4540	Identifier	idx
>4541	Callee	m_matches . Contains
>4542	MemberAccess	m_matches . Contains
>4543	Identifier	Contains
>4544	Identifier	m_matches
>4545	IdentifierDeclStatement	 
>4546	IdentifierDecl	idx = GetMatchIndex ( i1 , i2 )
>4547	AssignmentExpr	idx = GetMatchIndex ( i1 , i2 )
>4548	CallExpression	GetMatchIndex ( i1 , i2 )
>4549	ArgumentList	i1
>4550	Argument	i2
>4551	Identifier	i2
>4552	Argument	i1
>4553	Identifier	i1
>4554	Callee	GetMatchIndex
>4555	Identifier	GetMatchIndex
>4556	Identifier	idx
>4557	Identifier	idx
>4558	IdentifierDeclType	MatchIndex
>4618	FunctionDef	BundlerApp 
>4619	ParameterList	int i1 , int i2 , int border_width
>4620	Parameter	 
>4621	Identifier	border_width
>4622	ParameterType	int
>4623	Parameter	 
>4624	Identifier	i2
>4625	ParameterType	int
>4626	Parameter	 
>4627	Identifier	i1
>4628	ParameterType	int
>4629	ReturnType	void
>4630	CompoundStatement	 
>4631	ExpressionStatement	 
>4632	CallExpression	printf ( \"[RemoveMatchesNearBottom] Removed %d matches from pair (%d,%d)\n\" , num_removed , i1 , i2 )
>4633	ArgumentList	\"[RemoveMatchesNearBottom] Removed %d matches from pair (%d,%d)\n\"
>4634	Argument	i2
>4635	Identifier	i2
>4636	Argument	i1
>4637	Identifier	i1
>4638	Argument	num_removed
>4639	Identifier	num_removed
>4640	Argument	\"[RemoveMatchesNearBottom] Removed %d matches from pair (%d,%d)\n\"
>4641	PrimaryExpression	\"[RemoveMatchesNearBottom] Removed %d matches from pair (%d,%d)\n\"
>4642	Callee	printf
>4643	Identifier	printf
>4644	ForStatement	for ( int k = 0 ; k < num_matches ; k ++ )
>4645	CompoundStatement	 
>4646	IfStatement	if ( k1 . m_y < h1_min || k2 . m_y < h2_min )
>4647	CompoundStatement	 
>4648	ExpressionStatement	 
>4649	IncDecOp	num_removed ++
>4650	IncDec	++
>4651	Identifier	num_removed
>4652	ExpressionStatement	 
>4653	IncDecOp	num_matches --
>4654	IncDec	--
>4655	Identifier	num_matches
>4656	ExpressionStatement	 
>4657	IncDecOp	k --
>4658	IncDec	--
>4659	Identifier	k
>4660	ExpressionStatement	 
>4661	CallExpression	list . erase ( list . begin ( ) + k )
>4662	ArgumentList	list . begin ( ) + k
>4663	Argument	list . begin ( ) + k
>4664	AdditiveExpression	list . begin ( ) + k
>4665	Identifier	k
>4666	CallExpression	list . begin ( )
>4667	ArgumentList	 
>4668	Callee	list . begin
>4669	MemberAccess	list . begin
>4670	Identifier	begin
>4671	Identifier	list
>4672	Callee	list . erase
>4673	MemberAccess	list . erase
>4674	Identifier	erase
>4675	Identifier	list
>4676	Condition	 
>4677	OrExpression	k1 . m_y < h1_min || k2 . m_y < h2_min
>4678	RelationalExpression	k2 . m_y < h2_min
>4679	Identifier	h2_min
>4680	MemberAccess	k2 . m_y
>4681	Identifier	m_y
>4682	Identifier	k2
>4683	RelationalExpression	k1 . m_y < h1_min
>4684	Identifier	h1_min
>4685	MemberAccess	k1 . m_y
>4686	Identifier	m_y
>4687	Identifier	k1
>4688	IdentifierDeclStatement	 
>4689	IdentifierDecl	& k2 = m_image_data [ i2 ] . m_keys [ m . m_idx2 ]
>4690	AssignmentExpr	& k2 = m_image_data [ i2 ] . m_keys [ m . m_idx2 ]
>4691	ArrayIndexing	m_image_data [ i2 ] . m_keys [ m . m_idx2 ]
>4692	MemberAccess	m . m_idx2
>4693	Identifier	m_idx2
>4694	Identifier	m
>4695	MemberAccess	m_image_data [ i2 ] . m_keys
>4696	Identifier	m_keys
>4697	ArrayIndexing	m_image_data [ i2 ]
>4698	Identifier	i2
>4699	Identifier	m_image_data
>4700	Identifier	k2
>4701	Identifier	k2
>4702	IdentifierDeclType	const Keypoint &
>4703	IdentifierDeclStatement	 
>4704	IdentifierDecl	& k1 = m_image_data [ i1 ] . m_keys [ m . m_idx1 ]
>4705	AssignmentExpr	& k1 = m_image_data [ i1 ] . m_keys [ m . m_idx1 ]
>4706	ArrayIndexing	m_image_data [ i1 ] . m_keys [ m . m_idx1 ]
>4707	MemberAccess	m . m_idx1
>4708	Identifier	m_idx1
>4709	Identifier	m
>4710	MemberAccess	m_image_data [ i1 ] . m_keys
>4711	Identifier	m_keys
>4712	ArrayIndexing	m_image_data [ i1 ]
>4713	Identifier	i1
>4714	Identifier	m_image_data
>4715	Identifier	k1
>4716	Identifier	k1
>4717	IdentifierDeclType	const Keypoint &
>4718	IdentifierDeclStatement	 
>4719	IdentifierDecl	& m = list [ k ]
>4720	AssignmentExpr	& m = list [ k ]
>4721	ArrayIndexing	list [ k ]
>4722	Identifier	k
>4723	Identifier	list
>4724	Identifier	m
>4725	Identifier	m
>4726	IdentifierDeclType	KeypointMatch &
>4727	IncDecOp	 
>4728	IncDec	++
>4729	Identifier	k
>4730	Condition	 
>4731	RelationalExpression	k < num_matches
>4732	Identifier	num_matches
>4733	Identifier	k
>4734	ForInit	 
>4735	IdentifierDeclStatement	int k = 0 ;
>4736	IdentifierDecl	k = 0
>4737	AssignmentExpr	k = 0
>4738	PrimaryExpression	0
>4739	Identifier	k
>4740	Identifier	k
>4741	IdentifierDeclType	int
>4742	IdentifierDeclStatement	 
>4743	IdentifierDecl	num_removed = 0
>4744	AssignmentExpr	num_removed = 0
>4745	PrimaryExpression	0
>4746	Identifier	num_removed
>4747	Identifier	num_removed
>4748	IdentifierDeclType	int
>4749	IdentifierDeclStatement	 
>4750	IdentifierDecl	h2_min = - 0.5 * h2 + border_width
>4751	AssignmentExpr	h2_min = - 0.5 * h2 + border_width
>4752	AdditiveExpression	- 0.5 * h2 + border_width
>4753	Identifier	border_width
>4754	MultiplicativeExpression	- 0.5 * h2
>4755	Identifier	h2
>4756	UnaryOp	- 0.5
>4757	PrimaryExpression	0.5
>4758	UnaryOperator	-
>4759	Identifier	h2_min
>4760	Identifier	h2_min
>4761	IdentifierDeclType	double
>4762	IdentifierDeclStatement	 
>4763	IdentifierDecl	h1_min = - 0.5 * h1 + border_width
>4764	AssignmentExpr	h1_min = - 0.5 * h1 + border_width
>4765	AdditiveExpression	- 0.5 * h1 + border_width
>4766	Identifier	border_width
>4767	MultiplicativeExpression	- 0.5 * h1
>4768	Identifier	h1
>4769	UnaryOp	- 0.5
>4770	PrimaryExpression	0.5
>4771	UnaryOperator	-
>4772	Identifier	h1_min
>4773	Identifier	h1_min
>4774	IdentifierDeclType	double
>4775	IdentifierDeclStatement	 
>4776	IdentifierDecl	h2 = m_image_data [ i2 ] . GetHeight ( )
>4777	AssignmentExpr	h2 = m_image_data [ i2 ] . GetHeight ( )
>4778	CallExpression	m_image_data [ i2 ] . GetHeight ( )
>4779	ArgumentList	 
>4780	Callee	m_image_data [ i2 ] . GetHeight
>4781	MemberAccess	m_image_data [ i2 ] . GetHeight
>4782	Identifier	GetHeight
>4783	ArrayIndexing	m_image_data [ i2 ]
>4784	Identifier	i2
>4785	Identifier	m_image_data
>4786	Identifier	h2
>4787	Identifier	h2
>4788	IdentifierDeclType	int
>4789	IdentifierDeclStatement	 
>4790	IdentifierDecl	h1 = m_image_data [ i1 ] . GetHeight ( )
>4791	AssignmentExpr	h1 = m_image_data [ i1 ] . GetHeight ( )
>4792	CallExpression	m_image_data [ i1 ] . GetHeight ( )
>4793	ArgumentList	 
>4794	Callee	m_image_data [ i1 ] . GetHeight
>4795	MemberAccess	m_image_data [ i1 ] . GetHeight
>4796	Identifier	GetHeight
>4797	ArrayIndexing	m_image_data [ i1 ]
>4798	Identifier	i1
>4799	Identifier	m_image_data
>4800	Identifier	h1
>4801	Identifier	h1
>4802	IdentifierDeclType	int
>4803	IdentifierDeclStatement	 
>4804	IdentifierDecl	num_matches = ( int ) list . size ( )
>4805	AssignmentExpr	num_matches = ( int ) list . size ( )
>4806	CastExpression	( int ) list . size ( )
>4807	CallExpression	list . size ( )
>4808	ArgumentList	 
>4809	Callee	list . size
>4810	MemberAccess	list . size
>4811	Identifier	size
>4812	Identifier	list
>4813	CastTarget	int
>4814	Identifier	num_matches
>4815	Identifier	num_matches
>4816	IdentifierDeclType	int
>4817	IdentifierDeclStatement	 
>4818	IdentifierDecl	& list = m_matches . GetMatchList ( idx )
>4819	AssignmentExpr	& list = m_matches . GetMatchList ( idx )
>4820	CallExpression	m_matches . GetMatchList ( idx )
>4821	ArgumentList	idx
>4822	Argument	idx
>4823	Identifier	idx
>4824	Callee	m_matches . GetMatchList
>4825	MemberAccess	m_matches . GetMatchList
>4826	Identifier	GetMatchList
>4827	Identifier	m_matches
>4828	Identifier	list
>4829	Identifier	list
>4830	IdentifierDeclType	std 
>4831	ExpressionStatement	 
>4832	CallExpression	assert ( m_image_data [ i2 ] . m_keys_loaded )
>4833	ArgumentList	m_image_data [ i2 ] . m_keys_loaded
>4834	Argument	m_image_data [ i2 ] . m_keys_loaded
>4835	MemberAccess	m_image_data [ i2 ] . m_keys_loaded
>4836	Identifier	m_keys_loaded
>4837	ArrayIndexing	m_image_data [ i2 ]
>4838	Identifier	i2
>4839	Identifier	m_image_data
>4840	Callee	assert
>4841	Identifier	assert
>4842	ExpressionStatement	 
>4843	CallExpression	assert ( m_image_data [ i1 ] . m_keys_loaded )
>4844	ArgumentList	m_image_data [ i1 ] . m_keys_loaded
>4845	Argument	m_image_data [ i1 ] . m_keys_loaded
>4846	MemberAccess	m_image_data [ i1 ] . m_keys_loaded
>4847	Identifier	m_keys_loaded
>4848	ArrayIndexing	m_image_data [ i1 ]
>4849	Identifier	i1
>4850	Identifier	m_image_data
>4851	Callee	assert
>4852	Identifier	assert
>4853	ExpressionStatement	 
>4854	CallExpression	assert ( m_matches . Contains ( idx ) )
>4855	ArgumentList	m_matches . Contains ( idx )
>4856	Argument	m_matches . Contains ( idx )
>4857	CallExpression	m_matches . Contains ( idx )
>4858	ArgumentList	idx
>4859	Argument	idx
>4860	Identifier	idx
>4861	Callee	m_matches . Contains
>4862	MemberAccess	m_matches . Contains
>4863	Identifier	Contains
>4864	Identifier	m_matches
>4865	Callee	assert
>4866	Identifier	assert
>4867	IdentifierDeclStatement	 
>4868	IdentifierDecl	idx = GetMatchIndex ( i1 , i2 )
>4869	AssignmentExpr	idx = GetMatchIndex ( i1 , i2 )
>4870	CallExpression	GetMatchIndex ( i1 , i2 )
>4871	ArgumentList	i1
>4872	Argument	i2
>4873	Identifier	i2
>4874	Argument	i1
>4875	Identifier	i1
>4876	Callee	GetMatchIndex
>4877	Identifier	GetMatchIndex
>4878	Identifier	idx
>4879	Identifier	idx
>4880	IdentifierDeclType	MatchIndex
<5=8,7,6
<8=27,18,11,9
<9=10
<11=16,12
<12=13
<13=15,14
<16=17
<18=23,19
<19=20
<20=22,21
<23=24
<24=26,25
<27=28
<28=33,32,29
<29=31,30
<40=46,45,41
<41=42
<42=44,43
<46=162,161,160,159,158,157,156,155,154,153,152,151,150,149,148,147,146,145,144,143,142,141,140,139,138,137,136,135,134,133,132,131,130,129,128,127,126,125,124,123,122,121,47,60,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120
<47=48
<48=58,49
<49=56,54,50
<50=51
<51=53,52
<54=55
<56=57
<58=59
<60=61
<61=71,62
<62=69,67,63
<63=64
<64=66,65
<67=68
<69=70
<71=72
<169=175,174,170
<170=171
<171=173,172
<175=305,304,303,302,301,300,299,298,297,296,295,294,293,292,291,290,289,288,287,286,285,284,283,282,281,280,279,278,277,276,275,274,273,272,271,270,269,268,267,266,265,264,263,262,261,260,259,258,257,256,255,254,253,252,251,250,249,248,247,246,176,187,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245
<176=177
<177=185,178
<178=183,181,179
<179=180
<181=182
<183=184
<185=186
<187=188
<188=196,189
<189=194,192,190
<190=191
<192=193
<194=195
<196=197
<312=321,320,313
<313=317,314
<314=316,315
<317=319,318
<321=765,758,322
<322=747,738,323
<323=324
<324=733,721,697,631,565,550,535,530,518,511,506,492,344,337,325
<325=333,326
<326=327
<327=331,328
<328=329
<329=330
<331=332
<333=334
<334=336,335
<337=338
<338=342,339
<339=340
<340=341
<342=343
<344=484,480,477,345
<345=468,452,346
<346=444,440,437,347
<347=424,411,348
<348=401,397,394,349
<349=381,368,359,350
<350=351
<351=357,352
<352=355,353
<353=354
<355=356
<357=358
<359=360
<360=366,361
<361=364,362
<362=363
<364=365
<366=367
<368=369
<369=379,370
<370=371
<371=372
<372=376,373
<373=375,374
<376=378,377
<379=380
<381=382
<382=393,392,383
<383=391,384
<384=386,385
<386=388,387
<388=390,389
<394=396,395
<397=398
<398=400,399
<401=402
<402=403
<403=410,409,404
<404=408,405
<405=407,406
<411=412
<412=422,413
<413=414
<414=415
<415=419,416
<416=418,417
<419=421,420
<422=423
<424=425
<425=436,435,426
<426=434,427
<427=429,428
<429=431,430
<431=433,432
<437=439,438
<440=441
<441=443,442
<444=445
<445=446
<446=451,450,447
<447=449,448
<452=453
<453=467,466,454
<454=465,455
<455=464,456
<456=458,457
<458=459
<459=461,460
<461=463,462
<468=469
<469=476,475,470
<470=474,471
<471=473,472
<477=479,478
<480=481
<481=483,482
<484=485
<485=486
<486=491,490,487
<487=489,488
<492=493
<493=505,504,494
<494=503,495
<495=502,496
<496=498,497
<498=499
<499=501,500
<506=507
<507=509,508
<509=510
<511=512
<512=516,513
<513=514
<514=515
<516=517
<518=526,519
<519=520
<520=524,521
<521=522
<522=523
<524=525
<526=527
<527=529,528
<530=531
<531=533,532
<533=534
<535=546,536
<536=537
<537=538
<538=544,539
<539=542,540
<540=541
<542=543
<544=545
<546=547
<547=549,548
<550=561,551
<551=552
<552=553
<553=559,554
<554=557,555
<555=556
<557=558
<559=560
<561=562
<562=564,563
<565=627,566
<566=567
<567=619,615,612,568
<568=569
<569=602,598,595,570
<570=582,571
<571=572
<572=580,573
<573=578,576,574
<574=575
<576=577
<578=579
<580=581
<582=584,583
<584=585
<585=594,586
<586=592,587
<587=590,588
<588=589
<590=591
<592=593
<595=597,596
<598=599
<599=601,600
<602=603
<603=604
<604=611,610,605
<605=609,606
<606=608,607
<612=614,613
<615=616
<616=618,617
<619=620
<620=621
<621=626,625,622
<622=624,623
<627=628
<628=630,629
<631=693,632
<632=633
<633=685,681,678,634
<634=635
<635=668,664,661,636
<636=648,637
<637=638
<638=646,639
<639=644,642,640
<640=641
<642=643
<644=645
<646=647
<648=650,649
<650=651
<651=660,652
<652=658,653
<653=656,654
<654=655
<656=657
<658=659
<661=663,662
<664=665
<665=667,666
<668=669
<669=670
<670=677,676,671
<671=675,672
<672=674,673
<678=680,679
<681=682
<682=684,683
<685=686
<686=687
<687=692,691,688
<688=690,689
<693=694
<694=696,695
<697=705,698
<698=699
<699=703,700
<700=701
<701=702
<703=704
<705=706
<706=718,707
<707=715,708
<708=712,709
<709=711,710
<712=714,713
<715=717,716
<718=720,719
<721=729,722
<722=723
<723=727,724
<724=725
<725=726
<727=728
<729=730
<730=732,731
<733=734
<734=736,735
<736=737
<738=740,739
<740=741
<741=745,742
<742=743
<743=744
<745=746
<747=748
<748=755,749
<749=753,750
<750=751
<751=752
<753=754
<755=757,756
<758=759
<759=764,763,760
<760=762,761
<765=766
<766=774,773,767
<767=772,768
<768=770,769
<770=771
<811=823,822,812
<812=819,816,813
<813=815,814
<816=818,817
<819=821,820
<823=1116,1105,1091,1086,1072,1058,1026,1012,990,941,940,939,938,824
<824=934,829,825
<825=826
<826=827
<827=828
<829=926,907,888,864,847,832,830
<830=831
<832=833
<833=845,834
<834=843,841,835
<835=836
<836=838,837
<838=840,839
<841=842
<843=844
<845=846
<847=848
<848=862,849
<849=860,858,856,850
<850=851
<851=853,852
<853=855,854
<856=857
<858=859
<860=861
<862=863
<864=865
<865=886,866
<866=884,882,880,878,867
<867=868
<868=877,869
<869=873,870
<870=871
<871=872
<873=874
<874=876,875
<878=879
<880=881
<882=883
<884=885
<886=887
<888=889
<889=905,890
<890=899,897,891
<891=892
<892=896,893
<893=895,894
<897=898
<899=900
<900=902,901
<902=904,903
<905=906
<907=908
<908=921,909
<909=918,910
<910=917,911
<911=913,912
<913=914
<914=916,915
<918=920,919
<921=923,922
<923=925,924
<926=927
<927=929,928
<929=931,930
<931=933,932
<934=935
<935=937,936
<941=988,942
<942=984,954,947,943
<943=944
<944=946,945
<947=948
<948=950,949
<950=951
<951=953,952
<954=976,972,969,955
<955=956
<956=957
<957=965,958
<958=959
<959=960
<960=964,961
<961=963,962
<965=966
<966=968,967
<969=971,970
<972=973
<973=975,974
<976=977
<977=978
<978=983,982,979
<979=981,980
<984=985
<985=987,986
<988=989
<990=991
<991=1010,992
<992=1008,1006,1004,1002,993
<993=994
<994=1001,995
<995=997,996
<997=998
<998=1000,999
<1002=1003
<1004=1005
<1006=1007
<1008=1009
<1010=1011
<1012=1013
<1013=1025,1024,1014
<1014=1023,1015
<1015=1022,1016
<1016=1018,1017
<1018=1019
<1019=1021,1020
<1026=1027
<1027=1057,1056,1028
<1028=1055,1029
<1029=1053,1030
<1030=1047,1041,1039,1037,1035,1033,1031
<1031=1032
<1033=1034
<1035=1036
<1037=1038
<1039=1040
<1041=1042
<1042=1044,1043
<1044=1046,1045
<1047=1048
<1048=1050,1049
<1050=1052,1051
<1053=1054
<1058=1059
<1059=1071,1070,1060
<1060=1069,1061
<1061=1065,1062
<1062=1063
<1063=1064
<1065=1066
<1066=1068,1067
<1072=1082,1073
<1073=1081,1080,1079,1078,1077,1076,1074
<1074=1075
<1082=1083
<1083=1085,1084
<1086=1087
<1087=1090,1089,1088
<1091=1092
<1092=1104,1103,1093
<1093=1102,1094
<1094=1100,1095
<1095=1098,1096
<1096=1097
<1098=1099
<1100=1101
<1105=1106
<1106=1114,1107
<1107=1108
<1108=1109
<1109=1111,1110
<1111=1113,1112
<1114=1115
<1116=1117
<1117=1125,1118
<1118=1119
<1119=1120
<1120=1122,1121
<1122=1124,1123
<1125=1126
<1172=1181,1180,1173
<1173=1177,1174
<1174=1176,1175
<1177=1179,1178
<1181=1514,1507,1307,1293,1189,1182
<1182=1183
<1183=1187,1184
<1184=1185
<1185=1186
<1187=1188
<1189=1285,1281,1278,1190
<1190=1274,1191
<1191=1263,1252,1249,1192
<1192=1240,1226,1212,1193
<1193=1194
<1194=1210,1195
<1195=1208,1206,1204,1202,1196
<1196=1197
<1197=1199,1198
<1199=1201,1200
<1202=1203
<1204=1205
<1206=1207
<1208=1209
<1210=1211
<1212=1213
<1213=1225,1224,1214
<1214=1223,1215
<1215=1221,1216
<1216=1219,1217
<1217=1218
<1219=1220
<1221=1222
<1226=1227
<1227=1238,1228
<1228=1229
<1229=1230
<1230=1236,1231
<1231=1234,1232
<1232=1233
<1234=1235
<1236=1237
<1238=1239
<1240=1241
<1241=1248,1247,1242
<1242=1246,1243
<1243=1245,1244
<1249=1251,1250
<1252=1253
<1253=1262,1254
<1254=1258,1255
<1255=1256
<1256=1257
<1258=1259
<1259=1261,1260
<1263=1264
<1264=1273,1265
<1265=1269,1266
<1266=1267
<1267=1268
<1269=1270
<1270=1272,1271
<1274=1275
<1275=1277,1276
<1278=1280,1279
<1281=1282
<1282=1284,1283
<1285=1286
<1286=1287
<1287=1292,1291,1288
<1288=1290,1289
<1293=1294
<1294=1306,1305,1295
<1295=1304,1296
<1296=1302,1297
<1297=1300,1298
<1298=1299
<1300=1301
<1302=1303
<1307=1499,1495,1492,1308
<1308=1488,1309
<1309=1477,1466,1463,1310
<1310=1454,1440,1426,1412,1403,1394,1378,1311
<1311=1374,1333,1312
<1312=1313
<1313=1314
<1314=1315
<1315=1331,1316
<1316=1329,1323,1317
<1317=1318
<1318=1320,1319
<1320=1322,1321
<1323=1324
<1324=1326,1325
<1326=1328,1327
<1329=1330
<1331=1332
<1333=1334
<1334=1372,1335
<1335=1363,1354,1345,1336
<1336=1337
<1337=1341,1338
<1338=1339
<1339=1340
<1341=1342
<1342=1344,1343
<1345=1346
<1346=1350,1347
<1347=1348
<1348=1349
<1350=1351
<1351=1353,1352
<1354=1355
<1355=1359,1356
<1356=1357
<1357=1358
<1359=1360
<1360=1362,1361
<1363=1364
<1364=1368,1365
<1365=1366
<1366=1367
<1368=1369
<1369=1371,1370
<1372=1373
<1374=1375
<1375=1377,1376
<1378=1379
<1379=1393,1392,1380
<1380=1391,1381
<1381=1389,1382
<1382=1387,1385,1383
<1383=1384
<1385=1386
<1387=1388
<1389=1390
<1394=1395
<1395=1400,1396
<1396=1398,1397
<1398=1399
<1400=1402,1401
<1403=1404
<1404=1409,1405
<1405=1407,1406
<1407=1408
<1409=1411,1410
<1412=1413
<1413=1425,1424,1414
<1414=1423,1415
<1415=1421,1416
<1416=1419,1417
<1417=1418
<1419=1420
<1421=1422
<1426=1427
<1427=1439,1438,1428
<1428=1437,1429
<1429=1435,1430
<1430=1433,1431
<1431=1432
<1433=1434
<1435=1436
<1440=1441
<1441=1452,1442
<1442=1443
<1443=1444
<1444=1450,1445
<1445=1448,1446
<1446=1447
<1448=1449
<1450=1451
<1452=1453
<1454=1455
<1455=1462,1461,1456
<1456=1460,1457
<1457=1459,1458
<1463=1465,1464
<1466=1467
<1467=1476,1468
<1468=1472,1469
<1469=1470
<1470=1471
<1472=1473
<1473=1475,1474
<1477=1478
<1478=1487,1479
<1479=1483,1480
<1480=1481
<1481=1482
<1483=1484
<1484=1486,1485
<1488=1489
<1489=1491,1490
<1492=1494,1493
<1495=1496
<1496=1498,1497
<1499=1500
<1500=1501
<1501=1506,1505,1502
<1502=1504,1503
<1507=1508
<1508=1510,1509
<1510=1511
<1511=1513,1512
<1514=1515
<1515=1523,1522,1516
<1516=1521,1517
<1517=1519,1518
<1519=1520
<1555=1567,1566,1556
<1556=1563,1560,1557
<1557=1559,1558
<1560=1562,1561
<1563=1565,1564
<1567=1813,1802,1788,1774,1760,1755,1725,1711,1689,1640,1639,1638,1637,1568
<1568=1633,1573,1569
<1569=1570
<1570=1571
<1571=1572
<1573=1624,1615,1596,1576,1574
<1574=1575
<1576=1577
<1577=1594,1578
<1578=1592,1590,1588,1586,1579
<1579=1580
<1580=1582,1581
<1582=1583
<1583=1585,1584
<1586=1587
<1588=1589
<1590=1591
<1592=1593
<1594=1595
<1596=1597
<1597=1613,1598
<1598=1607,1605,1599
<1599=1600
<1600=1604,1601
<1601=1603,1602
<1605=1606
<1607=1608
<1608=1610,1609
<1610=1612,1611
<1613=1614
<1615=1616
<1616=1621,1617
<1617=1619,1618
<1619=1620
<1621=1623,1622
<1624=1625
<1625=1630,1626
<1626=1628,1627
<1628=1629
<1630=1632,1631
<1633=1634
<1634=1636,1635
<1640=1687,1641
<1641=1683,1653,1646,1642
<1642=1643
<1643=1645,1644
<1646=1647
<1647=1649,1648
<1649=1650
<1650=1652,1651
<1653=1675,1671,1668,1654
<1654=1655
<1655=1656
<1656=1664,1657
<1657=1658
<1658=1659
<1659=1663,1660
<1660=1662,1661
<1664=1665
<1665=1667,1666
<1668=1670,1669
<1671=1672
<1672=1674,1673
<1675=1676
<1676=1677
<1677=1682,1681,1678
<1678=1680,1679
<1683=1684
<1684=1686,1685
<1687=1688
<1689=1690
<1690=1709,1691
<1691=1707,1705,1703,1701,1692
<1692=1693
<1693=1700,1694
<1694=1696,1695
<1696=1697
<1697=1699,1698
<1701=1702
<1703=1704
<1705=1706
<1707=1708
<1709=1710
<1711=1712
<1712=1724,1723,1713
<1713=1722,1714
<1714=1721,1715
<1715=1717,1716
<1717=1718
<1718=1720,1719
<1725=1726
<1726=1754,1753,1727
<1727=1752,1728
<1728=1750,1729
<1729=1744,1738,1736,1734,1732,1730
<1730=1731
<1732=1733
<1734=1735
<1736=1737
<1738=1739
<1739=1741,1740
<1741=1743,1742
<1744=1745
<1745=1747,1746
<1747=1749,1748
<1750=1751
<1755=1756
<1756=1759,1758,1757
<1760=1761
<1761=1773,1772,1762
<1762=1771,1763
<1763=1767,1764
<1764=1765
<1765=1766
<1767=1768
<1768=1770,1769
<1774=1775
<1775=1787,1786,1776
<1776=1785,1777
<1777=1783,1778
<1778=1781,1779
<1779=1780
<1781=1782
<1783=1784
<1788=1789
<1789=1801,1800,1790
<1790=1799,1791
<1791=1797,1792
<1792=1795,1793
<1793=1794
<1795=1796
<1797=1798
<1802=1803
<1803=1811,1804
<1804=1805
<1805=1806
<1806=1808,1807
<1808=1810,1809
<1811=1812
<1813=1814
<1814=1822,1815
<1815=1816
<1816=1817
<1817=1819,1818
<1819=1821,1820
<1822=1823
<1868=1877,1876,1869
<1869=1873,1870
<1870=1872,1871
<1873=1875,1874
<1877=2142,2135,2131,1947,1933,1878
<1878=1925,1921,1918,1879
<1879=1907,1896,1880
<1880=1881
<1881=1892,1882
<1882=1883
<1883=1884
<1884=1890,1885
<1885=1888,1886
<1886=1887
<1888=1889
<1890=1891
<1892=1893
<1893=1895,1894
<1896=1897
<1897=1906,1905,1898
<1898=1904,1899
<1899=1901,1900
<1901=1903,1902
<1907=1908
<1908=1917,1916,1909
<1909=1915,1910
<1910=1912,1911
<1912=1914,1913
<1918=1920,1919
<1921=1922
<1922=1924,1923
<1925=1926
<1926=1927
<1927=1932,1931,1928
<1928=1930,1929
<1933=1934
<1934=1946,1945,1935
<1935=1944,1936
<1936=1943,1937
<1937=1939,1938
<1939=1940
<1940=1942,1941
<1947=2123,2119,2116,1948
<1948=2112,1949
<1949=2101,2090,2087,1950
<1950=2078,2064,2050,2036,2020,1951
<1951=2016,1975,1952
<1952=1953
<1953=1954
<1954=1955
<1955=1973,1956
<1956=1971,1969,1963,1957
<1957=1958
<1958=1960,1959
<1960=1962,1961
<1963=1964
<1964=1966,1965
<1966=1968,1967
<1969=1970
<1971=1972
<1973=1974
<1975=1976
<1976=2014,1977
<1977=2005,1996,1987,1978
<1978=1979
<1979=1983,1980
<1980=1981
<1981=1982
<1983=1984
<1984=1986,1985
<1987=1988
<1988=1992,1989
<1989=1990
<1990=1991
<1992=1993
<1993=1995,1994
<1996=1997
<1997=2001,1998
<1998=1999
<1999=2000
<2001=2002
<2002=2004,2003
<2005=2006
<2006=2010,2007
<2007=2008
<2008=2009
<2010=2011
<2011=2013,2012
<2014=2015
<2016=2017
<2017=2019,2018
<2020=2021
<2021=2035,2034,2022
<2022=2033,2023
<2023=2031,2024
<2024=2029,2027,2025
<2025=2026
<2027=2028
<2029=2030
<2031=2032
<2036=2037
<2037=2049,2048,2038
<2038=2047,2039
<2039=2045,2040
<2040=2043,2041
<2041=2042
<2043=2044
<2045=2046
<2050=2051
<2051=2063,2062,2052
<2052=2061,2053
<2053=2059,2054
<2054=2057,2055
<2055=2056
<2057=2058
<2059=2060
<2064=2065
<2065=2076,2066
<2066=2067
<2067=2068
<2068=2074,2069
<2069=2072,2070
<2070=2071
<2072=2073
<2074=2075
<2076=2077
<2078=2079
<2079=2086,2085,2080
<2080=2084,2081
<2081=2083,2082
<2087=2089,2088
<2090=2091
<2091=2100,2092
<2092=2096,2093
<2093=2094
<2094=2095
<2096=2097
<2097=2099,2098
<2101=2102
<2102=2111,2103
<2103=2107,2104
<2104=2105
<2105=2106
<2107=2108
<2108=2110,2109
<2112=2113
<2113=2115,2114
<2116=2118,2117
<2119=2120
<2120=2122,2121
<2123=2124
<2124=2125
<2125=2130,2129,2126
<2126=2128,2127
<2131=2132
<2132=2134,2133
<2135=2136
<2136=2138,2137
<2138=2139
<2139=2141,2140
<2142=2143
<2143=2151,2150,2144
<2144=2149,2145
<2145=2147,2146
<2147=2148
<2188=2191,2190,2189
<2191=2707,2656,2649,2639,2599,2592,2192
<2192=2584,2580,2577,2193
<2193=2559,2553,2194
<2194=2549,2436,2195
<2195=2196
<2196=2429,2412,2235,2197
<2197=2227,2223,2220,2198
<2198=2199
<2199=2200
<2200=2213,2201
<2201=2203,2202
<2203=2205,2204
<2205=2211,2206
<2206=2209,2207
<2207=2208
<2209=2210
<2211=2212
<2213=2215,2214
<2215=2217,2216
<2217=2219,2218
<2220=2222,2221
<2223=2224
<2224=2226,2225
<2227=2228
<2228=2229
<2229=2234,2233,2230
<2230=2232,2231
<2235=2404,2400,2397,2236
<2236=2390,2375,2360,2255,2237
<2237=2251,2238
<2238=2247,2243,2239
<2239=2240
<2240=2242,2241
<2243=2244
<2244=2246,2245
<2247=2248
<2248=2250,2249
<2251=2252
<2252=2254,2253
<2255=2352,2348,2345,2256
<2256=2339,2324,2309,2257
<2257=2301,2297,2294,2258
<2258=2259
<2259=2260
<2260=2293,2261
<2261=2291,2262
<2262=2263
<2263=2264
<2264=2290,2265
<2265=2278,2266
<2266=2268,2267
<2268=2270,2269
<2270=2276,2271
<2271=2274,2272
<2272=2273
<2274=2275
<2276=2277
<2278=2280,2279
<2280=2282,2281
<2282=2288,2283
<2283=2286,2284
<2284=2285
<2286=2287
<2288=2289
<2291=2292
<2294=2296,2295
<2297=2298
<2298=2300,2299
<2301=2302
<2302=2303
<2303=2308,2307,2304
<2304=2306,2305
<2309=2310
<2310=2323,2322,2311
<2311=2321,2312
<2312=2314,2313
<2314=2316,2315
<2316=2318,2317
<2318=2320,2319
<2324=2325
<2325=2338,2337,2326
<2326=2336,2327
<2327=2329,2328
<2329=2331,2330
<2331=2333,2332
<2333=2335,2334
<2339=2341,2340
<2341=2342
<2342=2344,2343
<2345=2347,2346
<2348=2349
<2349=2351,2350
<2352=2353
<2353=2354
<2354=2359,2358,2355
<2355=2357,2356
<2360=2361
<2361=2374,2373,2362
<2362=2372,2363
<2363=2365,2364
<2365=2367,2366
<2367=2369,2368
<2369=2371,2370
<2375=2376
<2376=2389,2388,2377
<2377=2387,2378
<2378=2380,2379
<2380=2382,2381
<2382=2384,2383
<2384=2386,2385
<2390=2391
<2391=2396,2395,2392
<2392=2394,2393
<2397=2399,2398
<2400=2401
<2401=2403,2402
<2404=2405
<2405=2406
<2406=2411,2410,2407
<2407=2409,2408
<2412=2421,2413
<2413=2420,2419,2414
<2414=2418,2415
<2415=2417,2416
<2421=2428,2427,2422
<2422=2426,2423
<2423=2425,2424
<2429=2430
<2430=2435,2434,2431
<2431=2433,2432
<2436=2464,2437
<2437=2456,2452,2449,2438
<2438=2439
<2439=2440
<2440=2442,2441
<2442=2444,2443
<2444=2446,2445
<2446=2448,2447
<2449=2451,2450
<2452=2453
<2453=2455,2454
<2456=2457
<2457=2458
<2458=2463,2462,2459
<2459=2461,2460
<2464=2541,2537,2534,2465
<2465=2519,2504,2466
<2466=2496,2492,2489,2467
<2467=2468
<2468=2469
<2469=2482,2470
<2470=2472,2471
<2472=2474,2473
<2474=2480,2475
<2475=2478,2476
<2476=2477
<2478=2479
<2480=2481
<2482=2484,2483
<2484=2486,2485
<2486=2488,2487
<2489=2491,2490
<2492=2493
<2493=2495,2494
<2496=2497
<2497=2498
<2498=2503,2502,2499
<2499=2501,2500
<2504=2505
<2505=2518,2517,2506
<2506=2516,2507
<2507=2509,2508
<2509=2511,2510
<2511=2513,2512
<2513=2515,2514
<2519=2520
<2520=2533,2532,2521
<2521=2531,2522
<2522=2524,2523
<2524=2526,2525
<2526=2528,2527
<2528=2530,2529
<2534=2536,2535
<2537=2538
<2538=2540,2539
<2541=2542
<2542=2543
<2543=2548,2547,2544
<2544=2546,2545
<2549=2550
<2550=2552,2551
<2553=2555,2554
<2555=2556
<2556=2558,2557
<2559=2560
<2560=2576,2575,2561
<2561=2574,2562
<2562=2573,2563
<2563=2565,2564
<2565=2566
<2566=2568,2567
<2568=2570,2569
<2570=2572,2571
<2577=2579,2578
<2580=2581
<2581=2583,2582
<2584=2585
<2585=2586
<2586=2591,2590,2587
<2587=2589,2588
<2592=2593
<2593=2597,2594
<2594=2595
<2595=2596
<2597=2598
<2599=2631,2627,2624,2600
<2600=2612,2601
<2601=2602
<2602=2606,2603
<2603=2604
<2604=2605
<2606=2607
<2607=2609,2608
<2609=2611,2610
<2612=2614,2613
<2614=2615
<2615=2623,2616
<2616=2618,2617
<2618=2620,2619
<2620=2622,2621
<2624=2626,2625
<2627=2628
<2628=2630,2629
<2631=2632
<2632=2633
<2633=2638,2637,2634
<2634=2636,2635
<2639=2640
<2640=2648,2647,2641
<2641=2646,2642
<2642=2644,2643
<2644=2645
<2649=2650
<2650=2654,2651
<2651=2652
<2652=2653
<2654=2655
<2656=2699,2695,2692,2657
<2657=2684,2658
<2658=2676,2672,2669,2659
<2659=2660
<2660=2662,2661
<2662=2664,2663
<2664=2666,2665
<2666=2668,2667
<2669=2671,2670
<2672=2673
<2673=2675,2674
<2676=2677
<2677=2678
<2678=2683,2682,2679
<2679=2681,2680
<2684=2685
<2685=2687,2686
<2687=2689,2688
<2689=2691,2690
<2692=2694,2693
<2695=2696
<2696=2698,2697
<2699=2700
<2700=2701
<2701=2706,2705,2702
<2702=2704,2703
<2707=2708
<2708=2720,2719,2709
<2709=2718,2710
<2710=2717,2711
<2711=2713,2712
<2713=2714
<2714=2716,2715
<2777=2780,2779,2778
<2780=3324,3310,3303,3246,3237,3227,2987,2980,2838,2815,2814,2813,2812,2811,2810,2809,2808,2807,2800,2799,2798,2797,2795,2794,2793,2792,2790,2789,2788,2787,2785,2781
<2781=2782
<2782=2784,2783
<2785=2786
<2790=2791
<2795=2796
<2800=2801
<2801=2805,2802
<2802=2803
<2803=2804
<2805=2806
<2815=2816
<2816=2837,2836,2817
<2817=2835,2818
<2818=2833,2819
<2819=2831,2822,2820
<2820=2821
<2822=2823
<2823=2829,2824
<2824=2825
<2825=2826
<2826=2828,2827
<2829=2830
<2831=2832
<2833=2834
<2838=2972,2968,2965,2839
<2839=2946,2945,2944,2943,2942,2941,2933,2892,2886,2840
<2840=2878,2874,2871,2841
<2841=2858,2842
<2842=2843
<2843=2855,2844
<2844=2848,2845
<2845=2847,2846
<2848=2854,2849
<2849=2851,2850
<2851=2853,2852
<2855=2857,2856
<2858=2859
<2859=2870,2869,2860
<2860=2868,2861
<2861=2863,2862
<2863=2865,2864
<2865=2867,2866
<2871=2873,2872
<2874=2875
<2875=2877,2876
<2878=2879
<2879=2880
<2880=2885,2884,2881
<2881=2883,2882
<2886=2887
<2887=2889,2888
<2889=2891,2890
<2892=2925,2921,2918,2893
<2893=2906,2894
<2894=2895
<2895=2899,2896
<2896=2898,2897
<2899=2905,2900
<2900=2902,2901
<2902=2904,2903
<2906=2907
<2907=2911,2908
<2908=2910,2909
<2911=2913,2912
<2913=2915,2914
<2915=2917,2916
<2918=2920,2919
<2921=2922
<2922=2924,2923
<2925=2926
<2926=2927
<2927=2932,2931,2928
<2928=2930,2929
<2933=2935,2934
<2935=2936
<2936=2938,2937
<2938=2940,2939
<2946=2948,2947
<2948=2949
<2949=2962,2950
<2950=2961,2951
<2951=2953,2952
<2953=2954
<2954=2956,2955
<2956=2958,2957
<2958=2960,2959
<2962=2964,2963
<2965=2967,2966
<2968=2969
<2969=2971,2970
<2972=2973
<2973=2974
<2974=2979,2978,2975
<2975=2977,2976
<2980=2981
<2981=2986,2985,2982
<2982=2984,2983
<2987=3219,3215,3212,2988
<2988=3200,3199,3198,3197,3196,3195,3194,3193,3192,3185,3174,2998,2989
<2989=2990
<2990=2992,2991
<2992=2993
<2993=2995,2994
<2995=2997,2996
<2998=3166,3162,3159,2999
<2999=3141,3132,3126,3082,3000
<3000=3078,3001
<3001=3064,3008,3002
<3002=3003
<3003=3005,3004
<3005=3007,3006
<3008=3056,3052,3049,3009
<3009=3036,3022,3010
<3010=3011
<3011=3015,3012
<3012=3014,3013
<3015=3021,3016
<3016=3018,3017
<3018=3020,3019
<3022=3023
<3023=3029,3024
<3024=3026,3025
<3026=3028,3027
<3029=3031,3030
<3031=3033,3032
<3033=3035,3034
<3036=3037
<3037=3048,3047,3038
<3038=3046,3039
<3039=3045,3040
<3040=3042,3041
<3042=3044,3043
<3049=3051,3050
<3052=3053
<3053=3055,3054
<3056=3057
<3057=3058
<3058=3063,3062,3059
<3059=3061,3060
<3064=3065
<3065=3077,3076,3066
<3066=3075,3067
<3067=3073,3068
<3068=3071,3069
<3069=3070
<3071=3072
<3073=3074
<3078=3079
<3079=3081,3080
<3082=3118,3114,3111,3083
<3083=3084
<3084=3099,3085
<3085=3087,3086
<3087=3088
<3088=3098,3089
<3089=3091,3090
<3091=3093,3092
<3093=3095,3094
<3095=3097,3096
<3099=3100
<3100=3102,3101
<3102=3104,3103
<3104=3106,3105
<3106=3108,3107
<3108=3110,3109
<3111=3113,3112
<3114=3115
<3115=3117,3116
<3118=3119
<3119=3120
<3120=3125,3124,3121
<3121=3123,3122
<3126=3128,3127
<3128=3129
<3129=3131,3130
<3132=3133
<3133=3140,3139,3134
<3134=3138,3135
<3135=3137,3136
<3141=3142
<3142=3158,3157,3143
<3143=3156,3144
<3144=3155,3145
<3145=3147,3146
<3147=3148
<3148=3150,3149
<3150=3152,3151
<3152=3154,3153
<3159=3161,3160
<3162=3163
<3163=3165,3164
<3166=3167
<3167=3168
<3168=3173,3172,3169
<3169=3171,3170
<3174=3175
<3175=3179,3176
<3176=3177
<3177=3178
<3179=3180
<3180=3182,3181
<3182=3184,3183
<3185=3186
<3186=3190,3187
<3187=3188
<3188=3189
<3190=3191
<3200=3202,3201
<3202=3203
<3203=3211,3204
<3204=3206,3205
<3206=3208,3207
<3208=3210,3209
<3212=3214,3213
<3215=3216
<3216=3218,3217
<3219=3220
<3220=3221
<3221=3226,3225,3222
<3222=3224,3223
<3227=3228
<3228=3236,3235,3229
<3229=3234,3230
<3230=3232,3231
<3232=3233
<3237=3238
<3238=3245,3244,3239
<3239=3243,3240
<3240=3242,3241
<3246=3295,3291,3288,3247
<3247=3282,3274,3248
<3248=3266,3262,3259,3249
<3249=3250
<3250=3252,3251
<3252=3254,3253
<3254=3256,3255
<3256=3258,3257
<3259=3261,3260
<3262=3263
<3263=3265,3264
<3266=3267
<3267=3268
<3268=3273,3272,3269
<3269=3271,3270
<3274=3275
<3275=3277,3276
<3277=3279,3278
<3279=3281,3280
<3282=3283
<3283=3285,3284
<3285=3287,3286
<3288=3290,3289
<3291=3292
<3292=3294,3293
<3295=3296
<3296=3297
<3297=3302,3301,3298
<3298=3300,3299
<3303=3304
<3304=3309,3308,3305
<3305=3307,3306
<3310=3311
<3311=3323,3322,3312
<3312=3321,3313
<3313=3320,3314
<3314=3316,3315
<3316=3317
<3317=3319,3318
<3324=3326,3325
<3326=3327
<3381=3390,3389,3382
<3382=3386,3383
<3383=3385,3384
<3386=3388,3387
<3390=3721,3707,3703,3689,3641,3631,3618,3608,3593,3581,3574,3455,3448,3433,3419,3410,3403,3396,3395,3393,3391
<3391=3392
<3393=3394
<3396=3397
<3397=3401,3398
<3398=3399
<3399=3400
<3401=3402
<3403=3404
<3404=3408,3405
<3405=3406
<3406=3407
<3408=3409
<3410=3411
<3411=3417,3412
<3412=3415,3413
<3413=3414
<3415=3416
<3417=3418
<3419=3420
<3420=3432,3431,3421
<3421=3430,3422
<3422=3429,3423
<3423=3425,3424
<3425=3426
<3426=3428,3427
<3433=3434
<3434=3446,3435
<3435=3444,3436
<3436=3437
<3437=3441,3438
<3438=3440,3439
<3441=3443,3442
<3444=3445
<3446=3447
<3448=3449
<3449=3454,3450
<3450=3452,3451
<3452=3453
<3455=3566,3555,3552,3456
<3456=3548,3523,3518,3513,3496,3457
<3457=3477,3458
<3458=3459
<3459=3460
<3460=3473,3461
<3461=3462
<3462=3463
<3463=3471,3464
<3464=3469,3465
<3465=3466
<3466=3468,3467
<3469=3470
<3471=3472
<3473=3474
<3474=3476,3475
<3477=3478
<3478=3480,3479
<3480=3494,3481
<3481=3482
<3482=3483
<3483=3489,3484
<3484=3488,3485
<3485=3487,3486
<3489=3493,3490
<3490=3492,3491
<3494=3495
<3496=3497
<3497=3509,3498
<3498=3507,3505,3503,3501,3499
<3499=3500
<3501=3502
<3503=3504
<3505=3506
<3507=3508
<3509=3510
<3510=3512,3511
<3513=3514
<3514=3517,3516,3515
<3518=3519
<3519=3522,3521,3520
<3523=3544,3540,3537,3524
<3524=3525
<3525=3526
<3526=3534,3527
<3527=3529,3528
<3529=3531,3530
<3531=3533,3532
<3534=3536,3535
<3537=3539,3538
<3540=3541
<3541=3543,3542
<3544=3545
<3545=3547,3546
<3548=3549
<3549=3551,3550
<3552=3554,3553
<3555=3556
<3556=3565,3557
<3557=3564,3558
<3558=3560,3559
<3560=3561
<3561=3563,3562
<3566=3567
<3567=3568
<3568=3573,3572,3569
<3569=3571,3570
<3574=3575
<3575=3580,3576
<3576=3578,3577
<3578=3579
<3581=3582
<3582=3592,3591,3583
<3583=3590,3584
<3584=3588,3585
<3585=3586
<3586=3587
<3588=3589
<3593=3594
<3594=3606,3595
<3595=3604,3596
<3596=3597
<3597=3601,3598
<3598=3600,3599
<3601=3603,3602
<3604=3605
<3606=3607
<3608=3609
<3609=3617,3616,3610
<3610=3615,3611
<3611=3613,3612
<3613=3614
<3618=3619
<3619=3630,3629,3620
<3620=3628,3621
<3621=3627,3622
<3622=3626,3623
<3623=3625,3624
<3631=3632
<3632=3640,3639,3633
<3633=3638,3634
<3634=3636,3635
<3636=3637
<3641=3681,3677,3674,3642
<3642=3643
<3643=3666,3662,3659,3644
<3644=3645
<3645=3646
<3646=3654,3647
<3647=3649,3648
<3649=3651,3650
<3651=3653,3652
<3654=3656,3655
<3656=3658,3657
<3659=3661,3660
<3662=3663
<3663=3665,3664
<3666=3667
<3667=3668
<3668=3673,3672,3669
<3669=3671,3670
<3674=3676,3675
<3677=3678
<3678=3680,3679
<3681=3682
<3682=3683
<3683=3688,3687,3684
<3684=3686,3685
<3689=3690
<3690=3702,3701,3691
<3691=3700,3692
<3692=3698,3693
<3693=3696,3694
<3694=3695
<3696=3697
<3698=3699
<3703=3704
<3704=3706,3705
<3707=3708
<3708=3720,3719,3709
<3709=3718,3710
<3710=3717,3711
<3711=3713,3712
<3713=3714
<3714=3716,3715
<3721=3722
<3722=3726,3723
<3723=3724
<3724=3725
<3726=3727
<3771=3780,3779,3772
<3772=3776,3773
<3773=3775,3774
<3776=3778,3777
<3780=4116,4102,4098,4084,4038,4028,4015,4005,3990,3978,3971,3852,3845,3830,3816,3807,3800,3793,3786,3785,3783,3781
<3781=3782
<3783=3784
<3786=3787
<3787=3791,3788
<3788=3789
<3789=3790
<3791=3792
<3793=3794
<3794=3798,3795
<3795=3796
<3796=3797
<3798=3799
<3800=3801
<3801=3805,3802
<3802=3803
<3803=3804
<3805=3806
<3807=3808
<3808=3814,3809
<3809=3812,3810
<3810=3811
<3812=3813
<3814=3815
<3816=3817
<3817=3829,3828,3818
<3818=3827,3819
<3819=3826,3820
<3820=3822,3821
<3822=3823
<3823=3825,3824
<3830=3831
<3831=3843,3832
<3832=3841,3833
<3833=3834
<3834=3838,3835
<3835=3837,3836
<3838=3840,3839
<3841=3842
<3843=3844
<3845=3846
<3846=3851,3847
<3847=3849,3848
<3849=3850
<3852=3963,3952,3949,3853
<3853=3945,3920,3915,3910,3893,3854
<3854=3874,3855
<3855=3856
<3856=3857
<3857=3870,3858
<3858=3859
<3859=3860
<3860=3868,3861
<3861=3866,3862
<3862=3863
<3863=3865,3864
<3866=3867
<3868=3869
<3870=3871
<3871=3873,3872
<3874=3875
<3875=3877,3876
<3877=3891,3878
<3878=3879
<3879=3880
<3880=3886,3881
<3881=3885,3882
<3882=3884,3883
<3886=3890,3887
<3887=3889,3888
<3891=3892
<3893=3894
<3894=3906,3895
<3895=3904,3902,3900,3898,3896
<3896=3897
<3898=3899
<3900=3901
<3902=3903
<3904=3905
<3906=3907
<3907=3909,3908
<3910=3911
<3911=3914,3913,3912
<3915=3916
<3916=3919,3918,3917
<3920=3941,3937,3934,3921
<3921=3922
<3922=3923
<3923=3931,3924
<3924=3926,3925
<3926=3928,3927
<3928=3930,3929
<3931=3933,3932
<3934=3936,3935
<3937=3938
<3938=3940,3939
<3941=3942
<3942=3944,3943
<3945=3946
<3946=3948,3947
<3949=3951,3950
<3952=3953
<3953=3962,3954
<3954=3961,3955
<3955=3957,3956
<3957=3958
<3958=3960,3959
<3963=3964
<3964=3965
<3965=3970,3969,3966
<3966=3968,3967
<3971=3972
<3972=3977,3973
<3973=3975,3974
<3975=3976
<3978=3979
<3979=3989,3988,3980
<3980=3987,3981
<3981=3985,3982
<3982=3983
<3983=3984
<3985=3986
<3990=3991
<3991=4003,3992
<3992=4001,3993
<3993=3994
<3994=3998,3995
<3995=3997,3996
<3998=4000,3999
<4001=4002
<4003=4004
<4005=4006
<4006=4014,4013,4007
<4007=4012,4008
<4008=4010,4009
<4010=4011
<4015=4016
<4016=4027,4026,4017
<4017=4025,4018
<4018=4024,4019
<4019=4023,4020
<4020=4022,4021
<4028=4029
<4029=4037,4036,4030
<4030=4035,4031
<4031=4033,4032
<4033=4034
<4038=4076,4072,4069,4039
<4039=4061,4057,4054,4040
<4040=4041
<4041=4049,4042
<4042=4044,4043
<4044=4046,4045
<4046=4048,4047
<4049=4051,4050
<4051=4053,4052
<4054=4056,4055
<4057=4058
<4058=4060,4059
<4061=4062
<4062=4063
<4063=4068,4067,4064
<4064=4066,4065
<4069=4071,4070
<4072=4073
<4073=4075,4074
<4076=4077
<4077=4078
<4078=4083,4082,4079
<4079=4081,4080
<4084=4085
<4085=4097,4096,4086
<4086=4095,4087
<4087=4093,4088
<4088=4091,4089
<4089=4090
<4091=4092
<4093=4094
<4098=4099
<4099=4101,4100
<4102=4103
<4103=4115,4114,4104
<4104=4113,4105
<4105=4112,4106
<4106=4108,4107
<4108=4109
<4109=4111,4110
<4116=4117
<4117=4121,4118
<4118=4119
<4119=4120
<4121=4122
<4167=4179,4178,4168
<4168=4175,4172,4169
<4169=4171,4170
<4172=4174,4173
<4175=4177,4176
<4179=4545,4536,4525,4514,4500,4486,4472,4458,4444,4430,4417,4406,4393,4382,4369,4358,4345,4334,4327,4193,4180
<4180=4181
<4181=4191,4182
<4182=4189,4187,4185,4183
<4183=4184
<4185=4186
<4187=4188
<4189=4190
<4191=4192
<4193=4319,4315,4312,4194
<4194=4303,4288,4273,4195
<4195=4225,4196
<4196=4209,4205,4201,4197
<4197=4198
<4198=4200,4199
<4201=4202
<4202=4204,4203
<4205=4206
<4206=4208,4207
<4209=4210
<4210=4221,4211
<4211=4212
<4212=4213
<4213=4215,4214
<4215=4217,4216
<4217=4218
<4218=4220,4219
<4221=4222
<4222=4224,4223
<4225=4226
<4226=4268,4227
<4227=4263,4228
<4228=4258,4229
<4229=4253,4230
<4230=4248,4231
<4231=4243,4232
<4232=4238,4233
<4233=4235,4234
<4235=4237,4236
<4238=4240,4239
<4240=4242,4241
<4243=4245,4244
<4245=4247,4246
<4248=4250,4249
<4250=4252,4251
<4253=4255,4254
<4255=4257,4256
<4258=4260,4259
<4260=4262,4261
<4263=4265,4264
<4265=4267,4266
<4268=4270,4269
<4270=4272,4271
<4273=4274
<4274=4287,4286,4275
<4275=4285,4276
<4276=4280,4277
<4277=4279,4278
<4280=4282,4281
<4282=4284,4283
<4288=4289
<4289=4302,4301,4290
<4290=4300,4291
<4291=4295,4292
<4292=4294,4293
<4295=4297,4296
<4297=4299,4298
<4303=4304
<4304=4311,4310,4305
<4305=4309,4306
<4306=4308,4307
<4312=4314,4313
<4315=4316
<4316=4318,4317
<4319=4320
<4320=4321
<4321=4326,4325,4322
<4322=4324,4323
<4327=4328
<4328=4333,4332,4329
<4329=4331,4330
<4334=4335
<4335=4344,4343,4336
<4336=4342,4337
<4337=4339,4338
<4339=4341,4340
<4345=4346
<4346=4357,4356,4347
<4347=4355,4348
<4348=4350,4349
<4350=4352,4351
<4352=4354,4353
<4358=4359
<4359=4368,4367,4360
<4360=4366,4361
<4361=4363,4362
<4363=4365,4364
<4369=4370
<4370=4381,4380,4371
<4371=4379,4372
<4372=4374,4373
<4374=4376,4375
<4376=4378,4377
<4382=4383
<4383=4392,4391,4384
<4384=4390,4385
<4385=4387,4386
<4387=4389,4388
<4393=4394
<4394=4405,4404,4395
<4395=4403,4396
<4396=4398,4397
<4398=4400,4399
<4400=4402,4401
<4406=4407
<4407=4416,4415,4408
<4408=4414,4409
<4409=4411,4410
<4411=4413,4412
<4417=4418
<4418=4429,4428,4419
<4419=4427,4420
<4420=4422,4421
<4422=4424,4423
<4424=4426,4425
<4430=4431
<4431=4443,4442,4432
<4432=4441,4433
<4433=4435,4434
<4435=4436
<4436=4438,4437
<4438=4440,4439
<4444=4445
<4445=4457,4456,4446
<4446=4455,4447
<4447=4449,4448
<4449=4450
<4450=4452,4451
<4452=4454,4453
<4458=4459
<4459=4471,4470,4460
<4460=4469,4461
<4461=4463,4462
<4463=4464
<4464=4466,4465
<4466=4468,4467
<4472=4473
<4473=4485,4484,4474
<4474=4483,4475
<4475=4477,4476
<4477=4478
<4478=4480,4479
<4480=4482,4481
<4486=4487
<4487=4499,4498,4488
<4488=4497,4489
<4489=4496,4490
<4490=4492,4491
<4492=4493
<4493=4495,4494
<4500=4501
<4501=4513,4512,4502
<4502=4511,4503
<4503=4507,4504
<4504=4505
<4505=4506
<4507=4508
<4508=4510,4509
<4514=4515
<4515=4523,4516
<4516=4517
<4517=4518
<4518=4520,4519
<4520=4522,4521
<4523=4524
<4525=4526
<4526=4534,4527
<4527=4528
<4528=4529
<4529=4531,4530
<4531=4533,4532
<4534=4535
<4536=4537
<4537=4541,4538
<4538=4539
<4539=4540
<4541=4542
<4542=4544,4543
<4545=4546
<4546=4558,4557,4547
<4547=4556,4548
<4548=4554,4549
<4549=4552,4550
<4550=4551
<4552=4553
<4554=4555
<4618=4630,4629,4619
<4619=4626,4623,4620
<4620=4622,4621
<4623=4625,4624
<4626=4628,4627
<4630=4867,4853,4842,4831,4817,4803,4789,4775,4762,4749,4742,4644,4631
<4631=4632
<4632=4642,4633
<4633=4640,4638,4636,4634
<4634=4635
<4636=4637
<4638=4639
<4640=4641
<4642=4643
<4644=4734,4730,4727,4645
<4645=4718,4703,4688,4646
<4646=4676,4647
<4647=4660,4656,4652,4648
<4648=4649
<4649=4651,4650
<4652=4653
<4653=4655,4654
<4656=4657
<4657=4659,4658
<4660=4661
<4661=4672,4662
<4662=4663
<4663=4664
<4664=4666,4665
<4666=4668,4667
<4668=4669
<4669=4671,4670
<4672=4673
<4673=4675,4674
<4676=4677
<4677=4683,4678
<4678=4680,4679
<4680=4682,4681
<4683=4685,4684
<4685=4687,4686
<4688=4689
<4689=4702,4701,4690
<4690=4700,4691
<4691=4695,4692
<4692=4694,4693
<4695=4697,4696
<4697=4699,4698
<4703=4704
<4704=4717,4716,4705
<4705=4715,4706
<4706=4710,4707
<4707=4709,4708
<4710=4712,4711
<4712=4714,4713
<4718=4719
<4719=4726,4725,4720
<4720=4724,4721
<4721=4723,4722
<4727=4729,4728
<4730=4731
<4731=4733,4732
<4734=4735
<4735=4736
<4736=4741,4740,4737
<4737=4739,4738
<4742=4743
<4743=4748,4747,4744
<4744=4746,4745
<4749=4750
<4750=4761,4760,4751
<4751=4759,4752
<4752=4754,4753
<4754=4756,4755
<4756=4758,4757
<4762=4763
<4763=4774,4773,4764
<4764=4772,4765
<4765=4767,4766
<4767=4769,4768
<4769=4771,4770
<4775=4776
<4776=4788,4787,4777
<4777=4786,4778
<4778=4780,4779
<4780=4781
<4781=4783,4782
<4783=4785,4784
<4789=4790
<4790=4802,4801,4791
<4791=4800,4792
<4792=4794,4793
<4794=4795
<4795=4797,4796
<4797=4799,4798
<4803=4804
<4804=4816,4815,4805
<4805=4814,4806
<4806=4813,4807
<4807=4809,4808
<4809=4810
<4810=4812,4811
<4817=4818
<4818=4830,4829,4819
<4819=4828,4820
<4820=4824,4821
<4821=4822
<4822=4823
<4824=4825
<4825=4827,4826
<4831=4832
<4832=4840,4833
<4833=4834
<4834=4835
<4835=4837,4836
<4837=4839,4838
<4840=4841
<4842=4843
<4843=4851,4844
<4844=4845
<4845=4846
<4846=4848,4847
<4848=4850,4849
<4851=4852
<4853=4854
<4854=4865,4855
<4855=4856
<4856=4857
<4857=4861,4858
<4858=4859
<4859=4860
<4861=4862
<4862=4864,4863
<4865=4866
<4867=4868
<4868=4880,4879,4869
<4869=4878,4870
<4870=4876,4871
<4871=4874,4872
<4872=4873
<4874=4875
<4876=4877
