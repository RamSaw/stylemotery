>5	FunctionDef	CPlugInManager 
>6	ParameterList	 
>7	CompoundStatement	 
>8	ExpressionStatement	 
>9	AssignmentExpr	PatchesMode = EActivePatches
>10	Identifier	EActivePatches
>11	Identifier	PatchesMode
>12	ExpressionStatement	 
>13	AssignmentExpr	m_pSurfaceListPlug = NULL
>14	Identifier	NULL
>15	Identifier	m_pSurfaceListPlug
>16	ExpressionStatement	 
>17	AssignmentExpr	m_pTexturePlug = NULL
>18	Identifier	NULL
>19	Identifier	m_pTexturePlug
>28	FunctionDef	CPlugInManager 
>29	ParameterList	 
>30	CompoundStatement	 
>31	ExpressionStatement	 
>32	CallExpression	Cleanup ( )
>33	ArgumentList	 
>34	Callee	Cleanup
>35	Identifier	Cleanup
>39	FunctionDef	CPlugInManager 
>40	ParameterList	const char * pPath
>41	Parameter	 
>42	Identifier	pPath
>43	ParameterType	const char *
>44	ReturnType	void
>45	CompoundStatement	 
>46	IfStatement	if ( handle != - 1 )
>47	CompoundStatement	 
>48	ExpressionStatement	 
>49	CallExpression	_findclose ( handle )
>50	ArgumentList	handle
>51	Argument	handle
>52	Identifier	handle
>53	Callee	_findclose
>54	Identifier	_findclose
>55	DoStatement	do
>56	Condition	 
>57	EqualityExpression	_findnext ( handle , & fileinfo ) != - 1
>58	UnaryOp	- 1
>59	PrimaryExpression	1
>60	UnaryOperator	-
>61	CallExpression	_findnext ( handle , & fileinfo )
>62	ArgumentList	handle
>63	Argument	& fileinfo
>64	UnaryOp	& fileinfo
>65	Identifier	fileinfo
>66	UnaryOperator	&
>67	Argument	handle
>68	Identifier	handle
>69	Callee	_findnext
>70	Identifier	_findnext
>71	CompoundStatement	 
>72	IfStatement	if ( pPlug -> load ( strPath ) )
>73	ElseStatement	else
>74	CompoundStatement	 
>75	ExpressionStatement	 
>76	Identifier	pPlug
>77	Statement	 
>78	CompoundStatement	 
>79	IfStatement	if ( FillFuncTable ( pPlug ) )
>80	ElseStatement	else
>81	CompoundStatement	 
>82	ExpressionStatement	 
>83	Identifier	pPlug
>84	Statement	 
>85	CompoundStatement	 
>86	IfStatement	if ( pPlug -> getSurfaceFlags ( ) != NULL )
>87	CompoundStatement	 
>88	ExpressionStatement	 
>89	AssignmentExpr	this -> m_pSurfaceListPlug = pPlug
>90	Identifier	pPlug
>91	PtrMemberAccess	this -> m_pSurfaceListPlug
>92	Identifier	m_pSurfaceListPlug
>93	Identifier	this
>94	Condition	 
>95	EqualityExpression	pPlug -> getSurfaceFlags ( ) != NULL
>96	Identifier	NULL
>97	CallExpression	pPlug -> getSurfaceFlags ( )
>98	ArgumentList	 
>99	Callee	pPlug -> getSurfaceFlags
>100	PtrMemberAccess	pPlug -> getSurfaceFlags
>101	Identifier	getSurfaceFlags
>102	Identifier	pPlug
>103	IfStatement	if ( pPlug -> getTextureInfo ( ) != NULL )
>104	CompoundStatement	 
>105	IfStatement	if ( pPlug -> getTextureInfo ( ) -> m_bWadStyle )
>106	CompoundStatement	 
>107	ExpressionStatement	 
>108	CallExpression	pPlug -> loadTexture ( strPath )
>109	ArgumentList	strPath
>110	Argument	strPath
>111	Identifier	strPath
>112	Callee	pPlug -> loadTexture
>113	PtrMemberAccess	pPlug -> loadTexture
>114	Identifier	loadTexture
>115	Identifier	pPlug
>116	IdentifierDeclStatement	 
>117	IdentifierDecl	strPath = ValueForKey ( g_qeglobals . d_project_entity , \"texturepath\" )
>118	AssignmentExpr	strPath = ValueForKey ( g_qeglobals . d_project_entity , \"texturepath\" )
>119	CallExpression	ValueForKey ( g_qeglobals . d_project_entity , \"texturepath\" )
>120	ArgumentList	g_qeglobals . d_project_entity
>121	Argument	\"texturepath\"
>122	PrimaryExpression	\"texturepath\"
>123	Argument	g_qeglobals . d_project_entity
>124	MemberAccess	g_qeglobals . d_project_entity
>125	Identifier	d_project_entity
>126	Identifier	g_qeglobals
>127	Callee	ValueForKey
>128	Identifier	ValueForKey
>129	Identifier	strPath
>130	Identifier	strPath
>131	IdentifierDeclType	CString
>132	Condition	 
>133	PtrMemberAccess	pPlug -> getTextureInfo ( ) -> m_bWadStyle
>134	Identifier	m_bWadStyle
>135	CallExpression	pPlug -> getTextureInfo ( )
>136	ArgumentList	 
>137	Callee	pPlug -> getTextureInfo
>138	PtrMemberAccess	pPlug -> getTextureInfo
>139	Identifier	getTextureInfo
>140	Identifier	pPlug
>141	ExpressionStatement	 
>142	AssignmentExpr	this -> m_pTexturePlug = pPlug
>143	Identifier	pPlug
>144	PtrMemberAccess	this -> m_pTexturePlug
>145	Identifier	m_pTexturePlug
>146	Identifier	this
>147	Condition	 
>148	EqualityExpression	pPlug -> getTextureInfo ( ) != NULL
>149	Identifier	NULL
>150	CallExpression	pPlug -> getTextureInfo ( )
>151	ArgumentList	 
>152	Callee	pPlug -> getTextureInfo
>153	PtrMemberAccess	pPlug -> getTextureInfo
>154	Identifier	getTextureInfo
>155	Identifier	pPlug
>156	ExpressionStatement	 
>157	CallExpression	g_pParentWnd -> AddPlugInMenuItem ( pPlug )
>158	ArgumentList	pPlug
>159	Argument	pPlug
>160	Identifier	pPlug
>161	Callee	g_pParentWnd -> AddPlugInMenuItem
>162	PtrMemberAccess	g_pParentWnd -> AddPlugInMenuItem
>163	Identifier	AddPlugInMenuItem
>164	Identifier	g_pParentWnd
>165	ExpressionStatement	 
>166	CallExpression	pPlug -> InitBSPFrontendPlugin ( )
>167	ArgumentList	 
>168	Callee	pPlug -> InitBSPFrontendPlugin
>169	PtrMemberAccess	pPlug -> InitBSPFrontendPlugin
>170	Identifier	InitBSPFrontendPlugin
>171	Identifier	pPlug
>172	ExpressionStatement	 
>173	CallExpression	pPlug -> InitSurfacePlugin ( )
>174	ArgumentList	 
>175	Callee	pPlug -> InitSurfacePlugin
>176	PtrMemberAccess	pPlug -> InitSurfacePlugin
>177	Identifier	InitSurfacePlugin
>178	Identifier	pPlug
>179	ExpressionStatement	 
>180	CallExpression	pPlug -> RegisterPluginEntities ( )
>181	ArgumentList	 
>182	Callee	pPlug -> RegisterPluginEntities
>183	PtrMemberAccess	pPlug -> RegisterPluginEntities
>184	Identifier	RegisterPluginEntities
>185	Identifier	pPlug
>186	ExpressionStatement	 
>187	CallExpression	m_PlugIns . Add ( pPlug )
>188	ArgumentList	pPlug
>189	Argument	pPlug
>190	Identifier	pPlug
>191	Callee	m_PlugIns . Add
>192	MemberAccess	m_PlugIns . Add
>193	Identifier	Add
>194	Identifier	m_PlugIns
>195	Condition	 
>196	CallExpression	FillFuncTable ( pPlug )
>197	ArgumentList	pPlug
>198	Argument	pPlug
>199	Identifier	pPlug
>200	Callee	FillFuncTable
>201	Identifier	FillFuncTable
>202	Condition	 
>203	CallExpression	pPlug -> load ( strPath )
>204	ArgumentList	strPath
>205	Argument	strPath
>206	Identifier	strPath
>207	Callee	pPlug -> load
>208	PtrMemberAccess	pPlug -> load
>209	Identifier	load
>210	Identifier	pPlug
>211	IdentifierDeclStatement	 
>212	IdentifierDecl	* pPlug = new CPlugIn ( )
>213	AssignmentExpr	* pPlug = new CPlugIn ( )
>214	UnaryExpression	new CPlugIn ( )
>215	Identifier	pPlug
>216	Identifier	pPlug
>217	IdentifierDeclType	CPlugIn *
>218	ExpressionStatement	 
>219	CallExpression	strPath . Format ( \"%s\\%s\" , pPath , fileinfo . name )
>220	ArgumentList	\"%s\\%s\"
>221	Argument	fileinfo . name
>222	MemberAccess	fileinfo . name
>223	Identifier	name
>224	Identifier	fileinfo
>225	Argument	pPath
>226	Identifier	pPath
>227	Argument	\"%s\\%s\"
>228	PrimaryExpression	\"%s\\%s\"
>229	Callee	strPath . Format
>230	MemberAccess	strPath . Format
>231	Identifier	Format
>232	Identifier	strPath
>233	Condition	 
>234	EqualityExpression	handle != - 1
>235	UnaryOp	- 1
>236	PrimaryExpression	1
>237	UnaryOperator	-
>238	Identifier	handle
>239	IdentifierDeclStatement	 
>240	IdentifierDecl	handle = _findfirst ( strPath , & fileinfo )
>241	AssignmentExpr	handle = _findfirst ( strPath , & fileinfo )
>242	CallExpression	_findfirst ( strPath , & fileinfo )
>243	ArgumentList	strPath
>244	Argument	& fileinfo
>245	UnaryOp	& fileinfo
>246	Identifier	fileinfo
>247	UnaryOperator	&
>248	Argument	strPath
>249	Identifier	strPath
>250	Callee	_findfirst
>251	Identifier	_findfirst
>252	Identifier	handle
>253	Identifier	handle
>254	IdentifierDeclType	int
>255	IdentifierDeclStatement	 
>256	IdentifierDecl	fileinfo
>257	Identifier	fileinfo
>258	IdentifierDeclType	struct _finddata_t
>259	IdentifierDeclStatement	 
>260	IdentifierDecl	bGo = true
>261	AssignmentExpr	bGo = true
>262	Identifier	true
>263	Identifier	true
>264	Identifier	bGo
>265	IdentifierDeclType	bool
>266	ExpressionStatement	 
>267	AssignmentExpr	strPath += \"*.dll\"
>268	PrimaryExpression	\"*.dll\"
>269	Identifier	strPath
>270	IdentifierDeclStatement	 
>271	IdentifierDecl	strPath ( pPath )
>272	Identifier	pPath
>273	Identifier	strPath
>274	IdentifierDeclType	CString
>275	ExpressionStatement	 
>276	AssignmentExpr	g_qeglobals . bBSPFrontendPlugin = false
>277	Identifier	false
>278	MemberAccess	g_qeglobals . bBSPFrontendPlugin
>279	Identifier	bBSPFrontendPlugin
>280	Identifier	g_qeglobals
>281	ExpressionStatement	 
>282	AssignmentExpr	g_qeglobals . bSurfacePropertiesPlugin = false
>283	Identifier	false
>284	MemberAccess	g_qeglobals . bSurfacePropertiesPlugin
>285	Identifier	bSurfacePropertiesPlugin
>286	Identifier	g_qeglobals
>287	ExpressionStatement	 
>288	CallExpression	Cleanup ( )
>289	ArgumentList	 
>290	Callee	Cleanup
>291	Identifier	Cleanup
>327	FunctionDef	CPlugInManager 
>328	ParameterList	 
>329	ReturnType	void
>330	CompoundStatement	 
>331	IfStatement	if ( m_PluginPatches . GetSize ( ) != 0 )
>332	ExpressionStatement	 
>333	CallExpression	Sys_Printf ( \"WARNING
>334	ArgumentList	\"WARNING
>335	Argument	\"WARNING
>336	PrimaryExpression	\"WARNING
>337	Callee	Sys_Printf
>338	Identifier	Sys_Printf
>339	Condition	 
>340	EqualityExpression	m_PluginPatches . GetSize ( ) != 0
>341	PrimaryExpression	0
>342	CallExpression	m_PluginPatches . GetSize ( )
>343	ArgumentList	 
>344	Callee	m_PluginPatches . GetSize
>345	MemberAccess	m_PluginPatches . GetSize
>346	Identifier	GetSize
>347	Identifier	m_PluginPatches
>348	ExpressionStatement	 
>349	CallExpression	m_PatchesHandles . RemoveAll ( )
>350	ArgumentList	 
>351	Callee	m_PatchesHandles . RemoveAll
>352	MemberAccess	m_PatchesHandles . RemoveAll
>353	Identifier	RemoveAll
>354	Identifier	m_PatchesHandles
>355	ExpressionStatement	 
>356	CallExpression	m_EntityHandles . RemoveAll ( )
>357	ArgumentList	 
>358	Callee	m_EntityHandles . RemoveAll
>359	MemberAccess	m_EntityHandles . RemoveAll
>360	Identifier	RemoveAll
>361	Identifier	m_EntityHandles
>362	ForStatement	for ( i = 0 ; i < m_EntityHandles . GetSize ( ) ; i ++ )
>363	CompoundStatement	 
>364	ExpressionStatement	 
>365	CallExpression	Entity_Free ( pe )
>366	ArgumentList	pe
>367	Argument	pe
>368	Identifier	pe
>369	Callee	Entity_Free
>370	Identifier	Entity_Free
>371	ExpressionStatement	 
>372	CallExpression	m_EntityHandles . GetAt ( i )
>373	ArgumentList	i
>374	Argument	i
>375	Identifier	i
>376	Callee	m_EntityHandles . GetAt
>377	MemberAccess	m_EntityHandles . GetAt
>378	Identifier	GetAt
>379	Identifier	m_EntityHandles
>380	Statement	 
>381	Statement	 
>382	Statement	 
>383	Statement	 
>384	Statement	 
>385	Statement	 
>386	Statement	 
>387	Statement	 
>388	Statement	 
>389	IncDecOp	 
>390	IncDec	++
>391	Identifier	i
>392	Condition	 
>393	RelationalExpression	i < m_EntityHandles . GetSize ( )
>394	CallExpression	m_EntityHandles . GetSize ( )
>395	ArgumentList	 
>396	Callee	m_EntityHandles . GetSize
>397	MemberAccess	m_EntityHandles . GetSize
>398	Identifier	GetSize
>399	Identifier	m_EntityHandles
>400	Identifier	i
>401	ForInit	 
>402	AssignmentExpr	i = 0
>403	PrimaryExpression	0
>404	Identifier	i
>405	ExpressionStatement	 
>406	CallExpression	m_BrushHandles . RemoveAll ( )
>407	ArgumentList	 
>408	Callee	m_BrushHandles . RemoveAll
>409	MemberAccess	m_BrushHandles . RemoveAll
>410	Identifier	RemoveAll
>411	Identifier	m_BrushHandles
>412	ForStatement	for ( i = 0 ; i < m_BrushHandles . GetSize ( ) ; i ++ )
>413	CompoundStatement	 
>414	ExpressionStatement	 
>415	CallExpression	Brush_Free ( pb )
>416	ArgumentList	pb
>417	Argument	pb
>418	Identifier	pb
>419	Callee	Brush_Free
>420	Identifier	Brush_Free
>421	ExpressionStatement	 
>422	CallExpression	m_BrushHandles . GetAt ( i )
>423	ArgumentList	i
>424	Argument	i
>425	Identifier	i
>426	Callee	m_BrushHandles . GetAt
>427	MemberAccess	m_BrushHandles . GetAt
>428	Identifier	GetAt
>429	Identifier	m_BrushHandles
>430	Statement	 
>431	Statement	 
>432	Statement	 
>433	Statement	 
>434	Statement	 
>435	Statement	 
>436	Statement	 
>437	Statement	 
>438	Statement	 
>439	IncDecOp	 
>440	IncDec	++
>441	Identifier	i
>442	Condition	 
>443	RelationalExpression	i < m_BrushHandles . GetSize ( )
>444	CallExpression	m_BrushHandles . GetSize ( )
>445	ArgumentList	 
>446	Callee	m_BrushHandles . GetSize
>447	MemberAccess	m_BrushHandles . GetSize
>448	Identifier	GetSize
>449	Identifier	m_BrushHandles
>450	Identifier	i
>451	ForInit	 
>452	AssignmentExpr	i = 0
>453	PrimaryExpression	0
>454	Identifier	i
>455	ExpressionStatement	 
>456	CallExpression	m_PlugIns . RemoveAll ( )
>457	ArgumentList	 
>458	Callee	m_PlugIns . RemoveAll
>459	MemberAccess	m_PlugIns . RemoveAll
>460	Identifier	RemoveAll
>461	Identifier	m_PlugIns
>462	ForStatement	for ( i = 0 ; i < m_PlugIns . GetSize ( ) ; i ++ )
>463	CompoundStatement	 
>464	ExpressionStatement	 
>465	Identifier	plug
>466	Statement	 
>467	ExpressionStatement	 
>468	CallExpression	plug -> free ( )
>469	ArgumentList	 
>470	Callee	plug -> free
>471	PtrMemberAccess	plug -> free
>472	Identifier	free
>473	Identifier	plug
>474	ExpressionStatement	 
>475	CallExpression	m_PlugIns . GetAt ( i )
>476	ArgumentList	i
>477	Argument	i
>478	Identifier	i
>479	Callee	m_PlugIns . GetAt
>480	MemberAccess	m_PlugIns . GetAt
>481	Identifier	GetAt
>482	Identifier	m_PlugIns
>483	Statement	 
>484	Statement	 
>485	Statement	 
>486	Statement	 
>487	Statement	 
>488	Statement	 
>489	Statement	 
>490	Statement	 
>491	Statement	 
>492	IncDecOp	 
>493	IncDec	++
>494	Identifier	i
>495	Condition	 
>496	RelationalExpression	i < m_PlugIns . GetSize ( )
>497	CallExpression	m_PlugIns . GetSize ( )
>498	ArgumentList	 
>499	Callee	m_PlugIns . GetSize
>500	MemberAccess	m_PlugIns . GetSize
>501	Identifier	GetSize
>502	Identifier	m_PlugIns
>503	Identifier	i
>504	ForInit	 
>505	AssignmentExpr	i = 0
>506	PrimaryExpression	0
>507	Identifier	i
>508	IdentifierDeclStatement	 
>509	IdentifierDecl	i
>510	Identifier	i
>511	IdentifierDeclType	int
>528	FunctionDef	CPlugInManager 
>529	ParameterList	int n , const char * p
>530	Parameter	 
>531	Identifier	p
>532	ParameterType	const char *
>533	Parameter	 
>534	Identifier	n
>535	ParameterType	int
>536	ReturnType	void
>537	CompoundStatement	 
>538	ForStatement	for ( int i = 0 ; i < m_PlugIns . GetSize ( ) ; i ++ )
>539	CompoundStatement	 
>540	IfStatement	if ( plug -> ownsCommandID ( n ) )
>541	CompoundStatement	 
>542	BreakStatement	 
>543	ExpressionStatement	 
>544	CallExpression	plug -> dispatchCommand ( p , vMin , vMax , QE_SingleBrush ( true ) )
>545	ArgumentList	p
>546	Argument	QE_SingleBrush ( true )
>547	CallExpression	QE_SingleBrush ( true )
>548	ArgumentList	true
>549	Argument	true
>550	Identifier	true
>551	Callee	QE_SingleBrush
>552	Identifier	QE_SingleBrush
>553	Argument	vMax
>554	Identifier	vMax
>555	Argument	vMin
>556	Identifier	vMin
>557	Argument	p
>558	Identifier	p
>559	Callee	plug -> dispatchCommand
>560	PtrMemberAccess	plug -> dispatchCommand
>561	Identifier	dispatchCommand
>562	Identifier	plug
>563	IfStatement	if ( selected_brushes . next == & selected_brushes )
>564	ElseStatement	else
>565	CompoundStatement	 
>566	ExpressionStatement	 
>567	CallExpression	Select_GetBounds ( vMin , vMax )
>568	ArgumentList	vMin
>569	Argument	vMax
>570	Identifier	vMax
>571	Argument	vMin
>572	Identifier	vMin
>573	Callee	Select_GetBounds
>574	Identifier	Select_GetBounds
>575	CompoundStatement	 
>576	ExpressionStatement	 
>577	CallExpression	VectorCopy ( vMin , vMax )
>578	ArgumentList	vMin
>579	Argument	vMax
>580	Identifier	vMax
>581	Argument	vMin
>582	Identifier	vMin
>583	Callee	VectorCopy
>584	Identifier	VectorCopy
>585	ExpressionStatement	 
>586	AssignmentExpr	vMin [ 0 ] = vMin [ 1 ] = vMin [ 2 ] = 0
>587	AssignmentExpr	vMin [ 1 ] = vMin [ 2 ] = 0
>588	AssignmentExpr	vMin [ 2 ] = 0
>589	PrimaryExpression	0
>590	ArrayIndexing	vMin [ 2 ]
>591	PrimaryExpression	2
>592	Identifier	vMin
>593	ArrayIndexing	vMin [ 1 ]
>594	PrimaryExpression	1
>595	Identifier	vMin
>596	ArrayIndexing	vMin [ 0 ]
>597	PrimaryExpression	0
>598	Identifier	vMin
>599	Condition	 
>600	EqualityExpression	selected_brushes . next == & selected_brushes
>601	UnaryOp	& selected_brushes
>602	Identifier	selected_brushes
>603	UnaryOperator	&
>604	MemberAccess	selected_brushes . next
>605	Identifier	next
>606	Identifier	selected_brushes
>607	IdentifierDeclStatement	 
>608	IdentifierDecl	vMax
>609	Identifier	vMax
>610	IdentifierDeclType	vec3_t
>611	IdentifierDecl	vMin
>612	Identifier	vMin
>613	IdentifierDeclType	vec3_t
>614	Condition	 
>615	CallExpression	plug -> ownsCommandID ( n )
>616	ArgumentList	n
>617	Argument	n
>618	Identifier	n
>619	Callee	plug -> ownsCommandID
>620	PtrMemberAccess	plug -> ownsCommandID
>621	Identifier	ownsCommandID
>622	Identifier	plug
>623	ExpressionStatement	 
>624	CallExpression	m_PlugIns . GetAt ( i )
>625	ArgumentList	i
>626	Argument	i
>627	Identifier	i
>628	Callee	m_PlugIns . GetAt
>629	MemberAccess	m_PlugIns . GetAt
>630	Identifier	GetAt
>631	Identifier	m_PlugIns
>632	Statement	 
>633	Statement	 
>634	Statement	 
>635	Statement	 
>636	Statement	 
>637	Statement	 
>638	Statement	 
>639	Statement	 
>640	Statement	 
>641	IncDecOp	 
>642	IncDec	++
>643	Identifier	i
>644	Condition	 
>645	RelationalExpression	i < m_PlugIns . GetSize ( )
>646	CallExpression	m_PlugIns . GetSize ( )
>647	ArgumentList	 
>648	Callee	m_PlugIns . GetSize
>649	MemberAccess	m_PlugIns . GetSize
>650	Identifier	GetSize
>651	Identifier	m_PlugIns
>652	Identifier	i
>653	ForInit	 
>654	IdentifierDeclStatement	int i = 0 ;
>655	IdentifierDecl	i = 0
>656	AssignmentExpr	i = 0
>657	PrimaryExpression	0
>658	Identifier	i
>659	Identifier	i
>660	IdentifierDeclType	int
>680	FunctionDef	QERApp_CreateBrush (vec3_t vMin , vec3_t vMax)
>681	ParameterList	vec3_t vMin , vec3_t vMax
>682	Parameter	 
>683	Identifier	vMax
>684	ParameterType	vec3_t
>685	Parameter	 
>686	Identifier	vMin
>687	ParameterType	vec3_t
>688	ReturnType	void WINAPI
>689	CompoundStatement	 
>690	ExpressionStatement	 
>691	CallExpression	Sys_UpdateWindows ( W_ALL )
>692	ArgumentList	W_ALL
>693	Argument	W_ALL
>694	Identifier	W_ALL
>695	Callee	Sys_UpdateWindows
>696	Identifier	Sys_UpdateWindows
>697	ExpressionStatement	 
>698	CallExpression	Select_Brush ( pBrush )
>699	ArgumentList	pBrush
>700	Argument	pBrush
>701	Identifier	pBrush
>702	Callee	Select_Brush
>703	Identifier	Select_Brush
>704	ExpressionStatement	 
>705	CallExpression	Brush_AddToList ( pBrush , & active_brushes )
>706	ArgumentList	pBrush
>707	Argument	& active_brushes
>708	UnaryOp	& active_brushes
>709	Identifier	active_brushes
>710	UnaryOperator	&
>711	Argument	pBrush
>712	Identifier	pBrush
>713	Callee	Brush_AddToList
>714	Identifier	Brush_AddToList
>715	ExpressionStatement	 
>716	CallExpression	Brush_Build ( pBrush )
>717	ArgumentList	pBrush
>718	Argument	pBrush
>719	Identifier	pBrush
>720	Callee	Brush_Build
>721	Identifier	Brush_Build
>722	ExpressionStatement	 
>723	CallExpression	Entity_LinkBrush ( world_entity , pBrush )
>724	ArgumentList	world_entity
>725	Argument	pBrush
>726	Identifier	pBrush
>727	Argument	world_entity
>728	Identifier	world_entity
>729	Callee	Entity_LinkBrush
>730	Identifier	Entity_LinkBrush
>731	IdentifierDeclStatement	 
>732	IdentifierDecl	* pBrush = Brush_Create ( vMin , vMax , & g_qeglobals . d_texturewin . texdef )
>733	AssignmentExpr	* pBrush = Brush_Create ( vMin , vMax , & g_qeglobals . d_texturewin . texdef )
>734	CallExpression	Brush_Create ( vMin , vMax , & g_qeglobals . d_texturewin . texdef )
>735	ArgumentList	vMin
>736	Argument	& g_qeglobals . d_texturewin . texdef
>737	UnaryOp	& g_qeglobals . d_texturewin . texdef
>738	MemberAccess	g_qeglobals . d_texturewin . texdef
>739	Identifier	texdef
>740	MemberAccess	g_qeglobals . d_texturewin
>741	Identifier	d_texturewin
>742	Identifier	g_qeglobals
>743	UnaryOperator	&
>744	Argument	vMax
>745	Identifier	vMax
>746	Argument	vMin
>747	Identifier	vMin
>748	Callee	Brush_Create
>749	Identifier	Brush_Create
>750	Identifier	pBrush
>751	Identifier	pBrush
>752	IdentifierDeclType	brush_t *
>753	ExpressionStatement	 
>754	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>755	ArgumentList	AfxGetStaticModuleState ( )
>756	Argument	AfxGetStaticModuleState ( )
>757	CallExpression	AfxGetStaticModuleState ( )
>758	ArgumentList	 
>759	Callee	AfxGetStaticModuleState
>760	Identifier	AfxGetStaticModuleState
>761	Callee	AFX_MANAGE_STATE
>762	Identifier	AFX_MANAGE_STATE
>779	FunctionDef	CPlugInManager 
>780	ParameterList	 
>781	ReturnType	LPVOID
>782	CompoundStatement	 
>783	ReturnStatement	 
>784	CastExpression	( LPVOID ) pb
>785	Identifier	pb
>786	CastTarget	LPVOID
>787	ExpressionStatement	 
>788	CallExpression	m_BrushHandles . Add ( pb )
>789	ArgumentList	pb
>790	Argument	pb
>791	Identifier	pb
>792	Callee	m_BrushHandles . Add
>793	MemberAccess	m_BrushHandles . Add
>794	Identifier	Add
>795	Identifier	m_BrushHandles
>796	ExpressionStatement	 
>797	AssignmentExpr	pb -> numberId = g_nBrushId ++
>798	IncDecOp	g_nBrushId ++
>799	IncDec	++
>800	Identifier	g_nBrushId
>801	PtrMemberAccess	pb -> numberId
>802	Identifier	numberId
>803	Identifier	pb
>804	IdentifierDeclStatement	 
>805	IdentifierDecl	* pb = Brush_Alloc ( )
>806	AssignmentExpr	* pb = Brush_Alloc ( )
>807	CallExpression	Brush_Alloc ( )
>808	ArgumentList	 
>809	Callee	Brush_Alloc
>810	Identifier	Brush_Alloc
>811	Identifier	pb
>812	Identifier	pb
>813	IdentifierDeclType	brush_t *
>823	FunctionDef	CPlugInManager 
>824	ParameterList	void * vp
>825	Parameter	 
>826	Identifier	vp
>827	ParameterType	void *
>828	ReturnType	void
>829	CompoundStatement	 
>830	ForStatement	for ( int j = 0 ; j < 3 ; j ++ )
>831	CompoundStatement	 
>832	ForStatement	for ( int i = 0 ; i < pHandles [ j ] -> GetSize ( ) ; i ++ )
>833	CompoundStatement	 
>834	CompoundStatement	 
>835	ReturnStatement	 
>836	ExpressionStatement	 
>837	CallExpression	Sys_MarkMapModified ( )
>838	ArgumentList	 
>839	Callee	Sys_MarkMapModified
>840	Identifier	Sys_MarkMapModified
>841	ExpressionStatement	 
>842	CallExpression	Brush_Free ( pb )
>843	ArgumentList	pb
>844	Argument	pb
>845	Identifier	pb
>846	Callee	Brush_Free
>847	Identifier	Brush_Free
>848	IfStatement	if ( j == 2 )
>849	CompoundStatement	 
>850	ExpressionStatement	 
>851	CallExpression	pHandles [ j ] -> RemoveAt ( i )
>852	ArgumentList	i
>853	Argument	i
>854	Identifier	i
>855	Callee	pHandles [ j ] -> RemoveAt
>856	PtrMemberAccess	pHandles [ j ] -> RemoveAt
>857	Identifier	RemoveAt
>858	ArrayIndexing	pHandles [ j ]
>859	Identifier	j
>860	Identifier	pHandles
>861	Condition	 
>862	EqualityExpression	j == 2
>863	PrimaryExpression	2
>864	Identifier	j
>865	Statement	 
>866	Statement	 
>867	Statement	 
>868	Statement	 
>869	Statement	 
>870	Statement	 
>871	Statement	 
>872	Statement	 
>873	Statement	 
>874	Statement	 
>875	Statement	 
>876	Statement	 
>877	Statement	 
>878	ExpressionStatement	 
>879	CallExpression	pHandles [ j ] -> GetAt ( i )
>880	ArgumentList	i
>881	Argument	i
>882	Identifier	i
>883	Callee	pHandles [ j ] -> GetAt
>884	PtrMemberAccess	pHandles [ j ] -> GetAt
>885	Identifier	GetAt
>886	ArrayIndexing	pHandles [ j ]
>887	Identifier	j
>888	Identifier	pHandles
>889	Statement	 
>890	Statement	 
>891	Statement	 
>892	Statement	 
>893	Statement	 
>894	Statement	 
>895	Statement	 
>896	Statement	 
>897	Statement	 
>898	IncDecOp	 
>899	IncDec	++
>900	Identifier	i
>901	Condition	 
>902	RelationalExpression	i < pHandles [ j ] -> GetSize ( )
>903	CallExpression	pHandles [ j ] -> GetSize ( )
>904	ArgumentList	 
>905	Callee	pHandles [ j ] -> GetSize
>906	PtrMemberAccess	pHandles [ j ] -> GetSize
>907	Identifier	GetSize
>908	ArrayIndexing	pHandles [ j ]
>909	Identifier	j
>910	Identifier	pHandles
>911	Identifier	i
>912	ForInit	 
>913	IdentifierDeclStatement	int i = 0 ;
>914	IdentifierDecl	i = 0
>915	AssignmentExpr	i = 0
>916	PrimaryExpression	0
>917	Identifier	i
>918	Identifier	i
>919	IdentifierDeclType	int
>920	IncDecOp	 
>921	IncDec	++
>922	Identifier	j
>923	Condition	 
>924	RelationalExpression	j < 3
>925	PrimaryExpression	3
>926	Identifier	j
>927	ForInit	 
>928	IdentifierDeclStatement	int j = 0 ;
>929	IdentifierDecl	j = 0
>930	AssignmentExpr	j = 0
>931	PrimaryExpression	0
>932	Identifier	j
>933	Identifier	j
>934	IdentifierDeclType	int
>935	ExpressionStatement	 
>936	AssignmentExpr	pHandles [ 2 ] = & m_BrushHandles
>937	UnaryOp	& m_BrushHandles
>938	Identifier	m_BrushHandles
>939	UnaryOperator	&
>940	ArrayIndexing	pHandles [ 2 ]
>941	PrimaryExpression	2
>942	Identifier	pHandles
>943	ExpressionStatement	 
>944	AssignmentExpr	pHandles [ 1 ] = & m_ActiveBrushHandles
>945	UnaryOp	& m_ActiveBrushHandles
>946	Identifier	m_ActiveBrushHandles
>947	UnaryOperator	&
>948	ArrayIndexing	pHandles [ 1 ]
>949	PrimaryExpression	1
>950	Identifier	pHandles
>951	ExpressionStatement	 
>952	AssignmentExpr	pHandles [ 0 ] = & m_SelectedBrushHandles
>953	UnaryOp	& m_SelectedBrushHandles
>954	Identifier	m_SelectedBrushHandles
>955	UnaryOperator	&
>956	ArrayIndexing	pHandles [ 0 ]
>957	PrimaryExpression	0
>958	Identifier	pHandles
>959	IdentifierDeclStatement	 
>960	IdentifierDecl	* pHandles [ 3 ]
>961	PrimaryExpression	3
>962	Identifier	pHandles
>963	IdentifierDeclType	CPtrArray * [ 3 ]
>980	FunctionDef	CPlugInManager 
>981	ParameterList	void * vp
>982	Parameter	 
>983	Identifier	vp
>984	ParameterType	void *
>985	ReturnType	void
>986	CompoundStatement	 
>987	ExpressionStatement	 
>988	CallExpression	Sys_UpdateWindows ( W_ALL )
>989	ArgumentList	W_ALL
>990	Argument	W_ALL
>991	Identifier	W_ALL
>992	Callee	Sys_UpdateWindows
>993	Identifier	Sys_UpdateWindows
>994	ExpressionStatement	 
>995	AssignmentExpr	g_bScreenUpdates = true
>996	Identifier	true
>997	Identifier	g_bScreenUpdates
>998	ForStatement	for ( int i = 0 ; i < m_BrushHandles . GetSize ( ) ; i ++ )
>999	CompoundStatement	 
>1000	CompoundStatement	 
>1001	ExpressionStatement	 
>1002	CallExpression	Select_Brush ( pb )
>1003	ArgumentList	pb
>1004	Argument	pb
>1005	Identifier	pb
>1006	Callee	Select_Brush
>1007	Identifier	Select_Brush
>1008	ExpressionStatement	 
>1009	CallExpression	Brush_AddToList ( pb , & active_brushes )
>1010	ArgumentList	pb
>1011	Argument	& active_brushes
>1012	UnaryOp	& active_brushes
>1013	Identifier	active_brushes
>1014	UnaryOperator	&
>1015	Argument	pb
>1016	Identifier	pb
>1017	Callee	Brush_AddToList
>1018	Identifier	Brush_AddToList
>1019	ExpressionStatement	 
>1020	CallExpression	Brush_Build ( pb )
>1021	ArgumentList	pb
>1022	Argument	pb
>1023	Identifier	pb
>1024	Callee	Brush_Build
>1025	Identifier	Brush_Build
>1026	ExpressionStatement	 
>1027	CallExpression	Entity_LinkBrush ( world_entity , pb )
>1028	ArgumentList	world_entity
>1029	Argument	pb
>1030	Identifier	pb
>1031	Argument	world_entity
>1032	Identifier	world_entity
>1033	Callee	Entity_LinkBrush
>1034	Identifier	Entity_LinkBrush
>1035	ExpressionStatement	 
>1036	CallExpression	m_BrushHandles . RemoveAt ( i )
>1037	ArgumentList	i
>1038	Argument	i
>1039	Identifier	i
>1040	Callee	m_BrushHandles . RemoveAt
>1041	MemberAccess	m_BrushHandles . RemoveAt
>1042	Identifier	RemoveAt
>1043	Identifier	m_BrushHandles
>1044	Statement	 
>1045	Statement	 
>1046	Statement	 
>1047	Statement	 
>1048	Statement	 
>1049	Statement	 
>1050	Statement	 
>1051	Statement	 
>1052	Statement	 
>1053	Statement	 
>1054	Statement	 
>1055	Statement	 
>1056	Statement	 
>1057	ExpressionStatement	 
>1058	CallExpression	m_BrushHandles . GetAt ( i )
>1059	ArgumentList	i
>1060	Argument	i
>1061	Identifier	i
>1062	Callee	m_BrushHandles . GetAt
>1063	MemberAccess	m_BrushHandles . GetAt
>1064	Identifier	GetAt
>1065	Identifier	m_BrushHandles
>1066	Statement	 
>1067	Statement	 
>1068	Statement	 
>1069	Statement	 
>1070	Statement	 
>1071	Statement	 
>1072	Statement	 
>1073	Statement	 
>1074	Statement	 
>1075	IncDecOp	 
>1076	IncDec	++
>1077	Identifier	i
>1078	Condition	 
>1079	RelationalExpression	i < m_BrushHandles . GetSize ( )
>1080	CallExpression	m_BrushHandles . GetSize ( )
>1081	ArgumentList	 
>1082	Callee	m_BrushHandles . GetSize
>1083	MemberAccess	m_BrushHandles . GetSize
>1084	Identifier	GetSize
>1085	Identifier	m_BrushHandles
>1086	Identifier	i
>1087	ForInit	 
>1088	IdentifierDeclStatement	int i = 0 ;
>1089	IdentifierDecl	i = 0
>1090	AssignmentExpr	i = 0
>1091	PrimaryExpression	0
>1092	Identifier	i
>1093	Identifier	i
>1094	IdentifierDeclType	int
>1095	ExpressionStatement	 
>1096	AssignmentExpr	g_bScreenUpdates = false
>1097	Identifier	false
>1098	Identifier	g_bScreenUpdates
>1113	FunctionDef	CPlugInManager 
>1114	ParameterList	void * vp , vec3_t v1 , vec3_t v2 , vec3_t v3
>1115	Parameter	 
>1116	Identifier	v3
>1117	ParameterType	vec3_t
>1118	Parameter	 
>1119	Identifier	v2
>1120	ParameterType	vec3_t
>1121	Parameter	 
>1122	Identifier	v1
>1123	ParameterType	vec3_t
>1124	Parameter	 
>1125	Identifier	vp
>1126	ParameterType	void *
>1127	ReturnType	void
>1128	CompoundStatement	 
>1129	IfStatement	if ( bp != NULL )
>1130	CompoundStatement	 
>1131	ExpressionStatement	 
>1132	CallExpression	VectorCopy ( v3 , f -> planepts [ 2 ] )
>1133	ArgumentList	v3
>1134	Argument	f -> planepts [ 2 ]
>1135	ArrayIndexing	f -> planepts [ 2 ]
>1136	PrimaryExpression	2
>1137	PtrMemberAccess	f -> planepts
>1138	Identifier	planepts
>1139	Identifier	f
>1140	Argument	v3
>1141	Identifier	v3
>1142	Callee	VectorCopy
>1143	Identifier	VectorCopy
>1144	ExpressionStatement	 
>1145	CallExpression	VectorCopy ( v2 , f -> planepts [ 1 ] )
>1146	ArgumentList	v2
>1147	Argument	f -> planepts [ 1 ]
>1148	ArrayIndexing	f -> planepts [ 1 ]
>1149	PrimaryExpression	1
>1150	PtrMemberAccess	f -> planepts
>1151	Identifier	planepts
>1152	Identifier	f
>1153	Argument	v2
>1154	Identifier	v2
>1155	Callee	VectorCopy
>1156	Identifier	VectorCopy
>1157	ExpressionStatement	 
>1158	CallExpression	VectorCopy ( v1 , f -> planepts [ 0 ] )
>1159	ArgumentList	v1
>1160	Argument	f -> planepts [ 0 ]
>1161	ArrayIndexing	f -> planepts [ 0 ]
>1162	PrimaryExpression	0
>1163	PtrMemberAccess	f -> planepts
>1164	Identifier	planepts
>1165	Identifier	f
>1166	Argument	v1
>1167	Identifier	v1
>1168	Callee	VectorCopy
>1169	Identifier	VectorCopy
>1170	ExpressionStatement	 
>1171	AssignmentExpr	bp -> brush_faces = f
>1172	Identifier	f
>1173	PtrMemberAccess	bp -> brush_faces
>1174	Identifier	brush_faces
>1175	Identifier	bp
>1176	ExpressionStatement	 
>1177	AssignmentExpr	f -> next = bp -> brush_faces
>1178	PtrMemberAccess	bp -> brush_faces
>1179	Identifier	brush_faces
>1180	Identifier	bp
>1181	PtrMemberAccess	f -> next
>1182	Identifier	next
>1183	Identifier	f
>1184	ExpressionStatement	 
>1185	AssignmentExpr	f -> texdef . contents &= ~CONTENTS_KEEP
>1186	Identifier	~CONTENTS_KEEP
>1187	MemberAccess	f -> texdef . contents
>1188	Identifier	contents
>1189	PtrMemberAccess	f -> texdef
>1190	Identifier	texdef
>1191	Identifier	f
>1192	ExpressionStatement	 
>1193	AssignmentExpr	f -> texdef . flags &= ~SURF_KEEP
>1194	Identifier	~SURF_KEEP
>1195	MemberAccess	f -> texdef . flags
>1196	Identifier	flags
>1197	PtrMemberAccess	f -> texdef
>1198	Identifier	texdef
>1199	Identifier	f
>1200	ExpressionStatement	 
>1201	AssignmentExpr	f -> texdef = g_qeglobals . d_texturewin . texdef
>1202	MemberAccess	g_qeglobals . d_texturewin . texdef
>1203	Identifier	texdef
>1204	MemberAccess	g_qeglobals . d_texturewin
>1205	Identifier	d_texturewin
>1206	Identifier	g_qeglobals
>1207	PtrMemberAccess	f -> texdef
>1208	Identifier	texdef
>1209	Identifier	f
>1210	IdentifierDeclStatement	 
>1211	IdentifierDecl	* f = Face_Alloc ( )
>1212	AssignmentExpr	* f = Face_Alloc ( )
>1213	CallExpression	Face_Alloc ( )
>1214	ArgumentList	 
>1215	Callee	Face_Alloc
>1216	Identifier	Face_Alloc
>1217	Identifier	f
>1218	Identifier	f
>1219	IdentifierDeclType	face_t *
>1220	Condition	 
>1221	EqualityExpression	bp != NULL
>1222	Identifier	NULL
>1223	Identifier	bp
>1224	IdentifierDeclStatement	 
>1225	IdentifierDecl	* bp = FindBrushHandle ( vp )
>1226	AssignmentExpr	* bp = FindBrushHandle ( vp )
>1227	CallExpression	FindBrushHandle ( vp )
>1228	ArgumentList	vp
>1229	Argument	vp
>1230	Identifier	vp
>1231	Callee	FindBrushHandle
>1232	Identifier	FindBrushHandle
>1233	Identifier	bp
>1234	Identifier	bp
>1235	IdentifierDeclType	brush_t *
>1263	FunctionDef	CPlugInManager 
>1264	ParameterList	void * vp
>1265	Parameter	 
>1266	Identifier	vp
>1267	ParameterType	void *
>1268	ReturnType	brush_t *
>1269	CompoundStatement	 
>1270	ReturnStatement	 
>1271	Identifier	NULL
>1272	ForStatement	for ( int j = 0 ; j < 4 ; j ++ )
>1273	CompoundStatement	 
>1274	ForStatement	for ( int i = 0 ; i < pHandles [ j ] -> GetSize ( ) ; i ++ )
>1275	CompoundStatement	 
>1276	CompoundStatement	 
>1277	ReturnStatement	 
>1278	Identifier	pb
>1279	Statement	 
>1280	Statement	 
>1281	Statement	 
>1282	Statement	 
>1283	Statement	 
>1284	Statement	 
>1285	Statement	 
>1286	Statement	 
>1287	Statement	 
>1288	Statement	 
>1289	Statement	 
>1290	Statement	 
>1291	Statement	 
>1292	ExpressionStatement	 
>1293	CallExpression	pHandles [ j ] -> GetAt ( i )
>1294	ArgumentList	i
>1295	Argument	i
>1296	Identifier	i
>1297	Callee	pHandles [ j ] -> GetAt
>1298	PtrMemberAccess	pHandles [ j ] -> GetAt
>1299	Identifier	GetAt
>1300	ArrayIndexing	pHandles [ j ]
>1301	Identifier	j
>1302	Identifier	pHandles
>1303	Statement	 
>1304	Statement	 
>1305	Statement	 
>1306	Statement	 
>1307	Statement	 
>1308	Statement	 
>1309	Statement	 
>1310	Statement	 
>1311	Statement	 
>1312	IncDecOp	 
>1313	IncDec	++
>1314	Identifier	i
>1315	Condition	 
>1316	RelationalExpression	i < pHandles [ j ] -> GetSize ( )
>1317	CallExpression	pHandles [ j ] -> GetSize ( )
>1318	ArgumentList	 
>1319	Callee	pHandles [ j ] -> GetSize
>1320	PtrMemberAccess	pHandles [ j ] -> GetSize
>1321	Identifier	GetSize
>1322	ArrayIndexing	pHandles [ j ]
>1323	Identifier	j
>1324	Identifier	pHandles
>1325	Identifier	i
>1326	ForInit	 
>1327	IdentifierDeclStatement	int i = 0 ;
>1328	IdentifierDecl	i = 0
>1329	AssignmentExpr	i = 0
>1330	PrimaryExpression	0
>1331	Identifier	i
>1332	Identifier	i
>1333	IdentifierDeclType	int
>1334	IncDecOp	 
>1335	IncDec	++
>1336	Identifier	j
>1337	Condition	 
>1338	RelationalExpression	j < 4
>1339	PrimaryExpression	4
>1340	Identifier	j
>1341	ForInit	 
>1342	IdentifierDeclStatement	int j = 0 ;
>1343	IdentifierDecl	j = 0
>1344	AssignmentExpr	j = 0
>1345	PrimaryExpression	0
>1346	Identifier	j
>1347	Identifier	j
>1348	IdentifierDeclType	int
>1349	ExpressionStatement	 
>1350	AssignmentExpr	pHandles [ 3 ] = & m_EntityBrushHandles
>1351	UnaryOp	& m_EntityBrushHandles
>1352	Identifier	m_EntityBrushHandles
>1353	UnaryOperator	&
>1354	ArrayIndexing	pHandles [ 3 ]
>1355	PrimaryExpression	3
>1356	Identifier	pHandles
>1357	ExpressionStatement	 
>1358	AssignmentExpr	pHandles [ 2 ] = & m_BrushHandles
>1359	UnaryOp	& m_BrushHandles
>1360	Identifier	m_BrushHandles
>1361	UnaryOperator	&
>1362	ArrayIndexing	pHandles [ 2 ]
>1363	PrimaryExpression	2
>1364	Identifier	pHandles
>1365	ExpressionStatement	 
>1366	AssignmentExpr	pHandles [ 1 ] = & m_ActiveBrushHandles
>1367	UnaryOp	& m_ActiveBrushHandles
>1368	Identifier	m_ActiveBrushHandles
>1369	UnaryOperator	&
>1370	ArrayIndexing	pHandles [ 1 ]
>1371	PrimaryExpression	1
>1372	Identifier	pHandles
>1373	ExpressionStatement	 
>1374	AssignmentExpr	pHandles [ 0 ] = & m_SelectedBrushHandles
>1375	UnaryOp	& m_SelectedBrushHandles
>1376	Identifier	m_SelectedBrushHandles
>1377	UnaryOperator	&
>1378	ArrayIndexing	pHandles [ 0 ]
>1379	PrimaryExpression	0
>1380	Identifier	pHandles
>1381	IdentifierDeclStatement	 
>1382	IdentifierDecl	* pHandles [ 4 ]
>1383	PrimaryExpression	4
>1384	Identifier	pHandles
>1385	IdentifierDeclType	CPtrArray * [ 4 ]
>1404	FunctionDef	CPlugInManager 
>1405	ParameterList	int index
>1406	Parameter	 
>1407	Identifier	index
>1408	ParameterType	int
>1409	ReturnType	patchMesh_t *
>1410	CompoundStatement	 
>1411	ReturnStatement	 
>1412	Identifier	NULL
>1413	SwitchStatement	switch ( PatchesMode )
>1414	CompoundStatement	 
>1415	BreakStatement	 
>1416	ExpressionStatement	 
>1417	CallExpression	Sys_Printf ( \"WARNING
>1418	ArgumentList	\"WARNING
>1419	Argument	\"WARNING
>1420	PrimaryExpression	\"WARNING
>1421	Callee	Sys_Printf
>1422	Identifier	Sys_Printf
>1423	IfStatement	if ( index < m_PluginPatches . GetSize ( ) )
>1424	CompoundStatement	 
>1425	ReturnStatement	 
>1426	Identifier	pPatch
>1427	ExpressionStatement	 
>1428	CallExpression	m_PluginPatches . GetAt ( index )
>1429	ArgumentList	index
>1430	Argument	index
>1431	Identifier	index
>1432	Callee	m_PluginPatches . GetAt
>1433	MemberAccess	m_PluginPatches . GetAt
>1434	Identifier	GetAt
>1435	Identifier	m_PluginPatches
>1436	Statement	 
>1437	Statement	 
>1438	Statement	 
>1439	Statement	 
>1440	Statement	 
>1441	Statement	 
>1442	Statement	 
>1443	Statement	 
>1444	Statement	 
>1445	Condition	 
>1446	RelationalExpression	index < m_PluginPatches . GetSize ( )
>1447	CallExpression	m_PluginPatches . GetSize ( )
>1448	ArgumentList	 
>1449	Callee	m_PluginPatches . GetSize
>1450	MemberAccess	m_PluginPatches . GetSize
>1451	Identifier	GetSize
>1452	Identifier	m_PluginPatches
>1453	Identifier	index
>1454	Label	 
>1455	Identifier	EAllocatedPatches
>1456	BreakStatement	 
>1457	ExpressionStatement	 
>1458	CallExpression	Sys_Printf ( \"WARNING
>1459	ArgumentList	\"WARNING
>1460	Argument	\"WARNING
>1461	PrimaryExpression	\"WARNING
>1462	Callee	Sys_Printf
>1463	Identifier	Sys_Printf
>1464	IfStatement	if ( index < m_PatchesHandles . GetSize ( ) )
>1465	CompoundStatement	 
>1466	ReturnStatement	 
>1467	PtrMemberAccess	pb -> pPatch
>1468	Identifier	pPatch
>1469	Identifier	pb
>1470	ExpressionStatement	 
>1471	CallExpression	m_PatchesHandles . GetAt ( index )
>1472	ArgumentList	index
>1473	Argument	index
>1474	Identifier	index
>1475	Callee	m_PatchesHandles . GetAt
>1476	MemberAccess	m_PatchesHandles . GetAt
>1477	Identifier	GetAt
>1478	Identifier	m_PatchesHandles
>1479	Statement	 
>1480	Statement	 
>1481	Statement	 
>1482	Statement	 
>1483	Statement	 
>1484	Statement	 
>1485	Statement	 
>1486	Statement	 
>1487	Statement	 
>1488	Condition	 
>1489	RelationalExpression	index < m_PatchesHandles . GetSize ( )
>1490	CallExpression	m_PatchesHandles . GetSize ( )
>1491	ArgumentList	 
>1492	Callee	m_PatchesHandles . GetSize
>1493	MemberAccess	m_PatchesHandles . GetSize
>1494	Identifier	GetSize
>1495	Identifier	m_PatchesHandles
>1496	Identifier	index
>1497	Label	 
>1498	Identifier	ESelectedPatches
>1499	Label	 
>1500	Identifier	EActivePatches
>1501	Condition	 
>1502	Identifier	PatchesMode
>1517	FunctionDef	QERApp_CreateBrushHandle ()
>1518	ParameterList	 
>1519	ReturnType	LPVOID WINAPI
>1520	CompoundStatement	 
>1521	ReturnStatement	 
>1522	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . CreateBrushHandle ( )
>1523	ArgumentList	 
>1524	Callee	g_pParentWnd -> GetPlugInMgr ( ) . CreateBrushHandle
>1525	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . CreateBrushHandle
>1526	Identifier	CreateBrushHandle
>1527	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>1528	ArgumentList	 
>1529	Callee	g_pParentWnd -> GetPlugInMgr
>1530	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>1531	Identifier	GetPlugInMgr
>1532	Identifier	g_pParentWnd
>1533	ExpressionStatement	 
>1534	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>1535	ArgumentList	AfxGetStaticModuleState ( )
>1536	Argument	AfxGetStaticModuleState ( )
>1537	CallExpression	AfxGetStaticModuleState ( )
>1538	ArgumentList	 
>1539	Callee	AfxGetStaticModuleState
>1540	Identifier	AfxGetStaticModuleState
>1541	Callee	AFX_MANAGE_STATE
>1542	Identifier	AFX_MANAGE_STATE
>1551	FunctionDef	QERApp_DeleteBrushHandle (LPVOID vp)
>1552	ParameterList	LPVOID vp
>1553	Parameter	 
>1554	Identifier	vp
>1555	ParameterType	LPVOID
>1556	ReturnType	void WINAPI
>1557	CompoundStatement	 
>1558	ExpressionStatement	 
>1559	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . DeleteBrushHandle ( vp )
>1560	ArgumentList	vp
>1561	Argument	vp
>1562	Identifier	vp
>1563	Callee	g_pParentWnd -> GetPlugInMgr ( ) . DeleteBrushHandle
>1564	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . DeleteBrushHandle
>1565	Identifier	DeleteBrushHandle
>1566	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>1567	ArgumentList	 
>1568	Callee	g_pParentWnd -> GetPlugInMgr
>1569	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>1570	Identifier	GetPlugInMgr
>1571	Identifier	g_pParentWnd
>1572	ExpressionStatement	 
>1573	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>1574	ArgumentList	AfxGetStaticModuleState ( )
>1575	Argument	AfxGetStaticModuleState ( )
>1576	CallExpression	AfxGetStaticModuleState ( )
>1577	ArgumentList	 
>1578	Callee	AfxGetStaticModuleState
>1579	Identifier	AfxGetStaticModuleState
>1580	Callee	AFX_MANAGE_STATE
>1581	Identifier	AFX_MANAGE_STATE
>1590	FunctionDef	QERApp_CommitBrushHandleToMap (LPVOID vp)
>1591	ParameterList	LPVOID vp
>1592	Parameter	 
>1593	Identifier	vp
>1594	ParameterType	LPVOID
>1595	ReturnType	void WINAPI
>1596	CompoundStatement	 
>1597	ExpressionStatement	 
>1598	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . CommitBrushHandleToMap ( vp )
>1599	ArgumentList	vp
>1600	Argument	vp
>1601	Identifier	vp
>1602	Callee	g_pParentWnd -> GetPlugInMgr ( ) . CommitBrushHandleToMap
>1603	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . CommitBrushHandleToMap
>1604	Identifier	CommitBrushHandleToMap
>1605	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>1606	ArgumentList	 
>1607	Callee	g_pParentWnd -> GetPlugInMgr
>1608	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>1609	Identifier	GetPlugInMgr
>1610	Identifier	g_pParentWnd
>1611	ExpressionStatement	 
>1612	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>1613	ArgumentList	AfxGetStaticModuleState ( )
>1614	Argument	AfxGetStaticModuleState ( )
>1615	CallExpression	AfxGetStaticModuleState ( )
>1616	ArgumentList	 
>1617	Callee	AfxGetStaticModuleState
>1618	Identifier	AfxGetStaticModuleState
>1619	Callee	AFX_MANAGE_STATE
>1620	Identifier	AFX_MANAGE_STATE
>1629	FunctionDef	QERApp_AddFace (LPVOID vp , vec3_t v1 , vec3_t v2 , vec3_t v3)
>1630	ParameterList	LPVOID vp , vec3_t v1 , vec3_t v2 , vec3_t v3
>1631	Parameter	 
>1632	Identifier	v3
>1633	ParameterType	vec3_t
>1634	Parameter	 
>1635	Identifier	v2
>1636	ParameterType	vec3_t
>1637	Parameter	 
>1638	Identifier	v1
>1639	ParameterType	vec3_t
>1640	Parameter	 
>1641	Identifier	vp
>1642	ParameterType	LPVOID
>1643	ReturnType	void WINAPI
>1644	CompoundStatement	 
>1645	ExpressionStatement	 
>1646	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . AddFaceToBrushHandle ( vp , v1 , v2 , v3 )
>1647	ArgumentList	vp
>1648	Argument	v3
>1649	Identifier	v3
>1650	Argument	v2
>1651	Identifier	v2
>1652	Argument	v1
>1653	Identifier	v1
>1654	Argument	vp
>1655	Identifier	vp
>1656	Callee	g_pParentWnd -> GetPlugInMgr ( ) . AddFaceToBrushHandle
>1657	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . AddFaceToBrushHandle
>1658	Identifier	AddFaceToBrushHandle
>1659	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>1660	ArgumentList	 
>1661	Callee	g_pParentWnd -> GetPlugInMgr
>1662	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>1663	Identifier	GetPlugInMgr
>1664	Identifier	g_pParentWnd
>1665	ExpressionStatement	 
>1666	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>1667	ArgumentList	AfxGetStaticModuleState ( )
>1668	Argument	AfxGetStaticModuleState ( )
>1669	CallExpression	AfxGetStaticModuleState ( )
>1670	ArgumentList	 
>1671	Callee	AfxGetStaticModuleState
>1672	Identifier	AfxGetStaticModuleState
>1673	Callee	AFX_MANAGE_STATE
>1674	Identifier	AFX_MANAGE_STATE
>1686	FunctionDef	QERApp_DeleteSelection ()
>1687	ParameterList	 
>1688	ReturnType	void WINAPI
>1689	CompoundStatement	 
>1690	ExpressionStatement	 
>1691	CallExpression	Select_Delete ( )
>1692	ArgumentList	 
>1693	Callee	Select_Delete
>1694	Identifier	Select_Delete
>1695	ExpressionStatement	 
>1696	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>1697	ArgumentList	AfxGetStaticModuleState ( )
>1698	Argument	AfxGetStaticModuleState ( )
>1699	CallExpression	AfxGetStaticModuleState ( )
>1700	ArgumentList	 
>1701	Callee	AfxGetStaticModuleState
>1702	Identifier	AfxGetStaticModuleState
>1703	Callee	AFX_MANAGE_STATE
>1704	Identifier	AFX_MANAGE_STATE
>1709	FunctionDef	QERApp_SysMsg (LPCSTR pMsg)
>1710	ParameterList	LPCSTR pMsg
>1711	Parameter	 
>1712	Identifier	pMsg
>1713	ParameterType	LPCSTR
>1714	ReturnType	void WINAPI
>1715	CompoundStatement	 
>1716	ExpressionStatement	 
>1717	CallExpression	Sys_Printf ( str . GetBuffer ( 0 ) )
>1718	ArgumentList	str . GetBuffer ( 0 )
>1719	Argument	str . GetBuffer ( 0 )
>1720	CallExpression	str . GetBuffer ( 0 )
>1721	ArgumentList	0
>1722	Argument	0
>1723	PrimaryExpression	0
>1724	Callee	str . GetBuffer
>1725	MemberAccess	str . GetBuffer
>1726	Identifier	GetBuffer
>1727	Identifier	str
>1728	Callee	Sys_Printf
>1729	Identifier	Sys_Printf
>1730	IdentifierDeclStatement	 
>1731	IdentifierDecl	str = pMsg
>1732	AssignmentExpr	str = pMsg
>1733	Identifier	pMsg
>1734	Identifier	pMsg
>1735	Identifier	str
>1736	IdentifierDeclType	CString
>1737	ExpressionStatement	 
>1738	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>1739	ArgumentList	AfxGetStaticModuleState ( )
>1740	Argument	AfxGetStaticModuleState ( )
>1741	CallExpression	AfxGetStaticModuleState ( )
>1742	ArgumentList	 
>1743	Callee	AfxGetStaticModuleState
>1744	Identifier	AfxGetStaticModuleState
>1745	Callee	AFX_MANAGE_STATE
>1746	Identifier	AFX_MANAGE_STATE
>1754	FunctionDef	QERApp_ErrorMsg (LPCSTR pMsg)
>1755	ParameterList	LPCSTR pMsg
>1756	Parameter	 
>1757	Identifier	pMsg
>1758	ParameterType	LPCSTR
>1759	ReturnType	void WINAPI
>1760	CompoundStatement	 
>1761	ExpressionStatement	 
>1762	CallExpression	Error ( str . GetBuffer ( 0 ) )
>1763	ArgumentList	str . GetBuffer ( 0 )
>1764	Argument	str . GetBuffer ( 0 )
>1765	CallExpression	str . GetBuffer ( 0 )
>1766	ArgumentList	0
>1767	Argument	0
>1768	PrimaryExpression	0
>1769	Callee	str . GetBuffer
>1770	MemberAccess	str . GetBuffer
>1771	Identifier	GetBuffer
>1772	Identifier	str
>1773	Callee	Error
>1774	Identifier	Error
>1775	IdentifierDeclStatement	 
>1776	IdentifierDecl	str = pMsg
>1777	AssignmentExpr	str = pMsg
>1778	Identifier	pMsg
>1779	Identifier	pMsg
>1780	Identifier	str
>1781	IdentifierDeclType	CString
>1782	ExpressionStatement	 
>1783	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>1784	ArgumentList	AfxGetStaticModuleState ( )
>1785	Argument	AfxGetStaticModuleState ( )
>1786	CallExpression	AfxGetStaticModuleState ( )
>1787	ArgumentList	 
>1788	Callee	AfxGetStaticModuleState
>1789	Identifier	AfxGetStaticModuleState
>1790	Callee	AFX_MANAGE_STATE
>1791	Identifier	AFX_MANAGE_STATE
>1799	FunctionDef	QERApp_InfoMsg (LPCSTR pMsg)
>1800	ParameterList	LPCSTR pMsg
>1801	Parameter	 
>1802	Identifier	pMsg
>1803	ParameterType	LPCSTR
>1804	ReturnType	void WINAPI
>1805	CompoundStatement	 
>1806	ExpressionStatement	 
>1807	CallExpression	ShowInfoDialog ( pMsg )
>1808	ArgumentList	pMsg
>1809	Argument	pMsg
>1810	Identifier	pMsg
>1811	Callee	ShowInfoDialog
>1812	Identifier	ShowInfoDialog
>1813	ExpressionStatement	 
>1814	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>1815	ArgumentList	AfxGetStaticModuleState ( )
>1816	Argument	AfxGetStaticModuleState ( )
>1817	CallExpression	AfxGetStaticModuleState ( )
>1818	ArgumentList	 
>1819	Callee	AfxGetStaticModuleState
>1820	Identifier	AfxGetStaticModuleState
>1821	Callee	AFX_MANAGE_STATE
>1822	Identifier	AFX_MANAGE_STATE
>1828	FunctionDef	QERApp_HideInfoMsg ()
>1829	ParameterList	 
>1830	ReturnType	void WINAPI
>1831	CompoundStatement	 
>1832	ExpressionStatement	 
>1833	CallExpression	HideInfoDialog ( )
>1834	ArgumentList	 
>1835	Callee	HideInfoDialog
>1836	Identifier	HideInfoDialog
>1837	ExpressionStatement	 
>1838	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>1839	ArgumentList	AfxGetStaticModuleState ( )
>1840	Argument	AfxGetStaticModuleState ( )
>1841	CallExpression	AfxGetStaticModuleState ( )
>1842	ArgumentList	 
>1843	Callee	AfxGetStaticModuleState
>1844	Identifier	AfxGetStaticModuleState
>1845	Callee	AFX_MANAGE_STATE
>1846	Identifier	AFX_MANAGE_STATE
>1851	FunctionDef	QERApp_PositionView (vec3_t v1 , vec3_t v2)
>1852	ParameterList	vec3_t v1 , vec3_t v2
>1853	Parameter	 
>1854	Identifier	v2
>1855	ParameterType	vec3_t
>1856	Parameter	 
>1857	Identifier	v1
>1858	ParameterType	vec3_t
>1859	ReturnType	void WINAPI
>1860	CompoundStatement	 
>1861	ExpressionStatement	 
>1862	CallExpression	Sys_UpdateWindows ( W_ALL )
>1863	ArgumentList	W_ALL
>1864	Argument	W_ALL
>1865	Identifier	W_ALL
>1866	Callee	Sys_UpdateWindows
>1867	Identifier	Sys_UpdateWindows
>1868	ExpressionStatement	 
>1869	CallExpression	g_pParentWnd -> ActiveXY ( ) -> SetOrigin ( v1 )
>1870	ArgumentList	v1
>1871	Argument	v1
>1872	Identifier	v1
>1873	Callee	g_pParentWnd -> ActiveXY ( ) -> SetOrigin
>1874	PtrMemberAccess	g_pParentWnd -> ActiveXY ( ) -> SetOrigin
>1875	Identifier	SetOrigin
>1876	CallExpression	g_pParentWnd -> ActiveXY ( )
>1877	ArgumentList	 
>1878	Callee	g_pParentWnd -> ActiveXY
>1879	PtrMemberAccess	g_pParentWnd -> ActiveXY
>1880	Identifier	ActiveXY
>1881	Identifier	g_pParentWnd
>1882	ExpressionStatement	 
>1883	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>1884	ArgumentList	AfxGetStaticModuleState ( )
>1885	Argument	AfxGetStaticModuleState ( )
>1886	CallExpression	AfxGetStaticModuleState ( )
>1887	ArgumentList	 
>1888	Callee	AfxGetStaticModuleState
>1889	Identifier	AfxGetStaticModuleState
>1890	Callee	AFX_MANAGE_STATE
>1891	Identifier	AFX_MANAGE_STATE
>1908	FunctionDef	_PlugDone (bool b , int n)
>1909	ParameterList	bool b , int n
>1910	Parameter	 
>1911	Identifier	n
>1912	ParameterType	int
>1913	Parameter	 
>1914	Identifier	b
>1915	ParameterType	bool
>1916	ReturnType	void
>1917	CompoundStatement	 
>1918	ExpressionStatement	 
>1919	AssignmentExpr	g_nPlugCount = n
>1920	Identifier	n
>1921	Identifier	g_nPlugCount
>1922	ExpressionStatement	 
>1923	AssignmentExpr	g_bPlugOK = b
>1924	Identifier	b
>1925	Identifier	g_bPlugOK
>1926	ExpressionStatement	 
>1927	AssignmentExpr	g_bPlugWait = false
>1928	Identifier	false
>1929	Identifier	g_bPlugWait
>1939	FunctionDef	QERApp_GetPoints (int nMax , _QERPointData * pData , LPCSTR pMsg)
>1940	ParameterList	int nMax , _QERPointData * pData , LPCSTR pMsg
>1941	Parameter	 
>1942	Identifier	pMsg
>1943	ParameterType	LPCSTR
>1944	Parameter	 
>1945	Identifier	pData
>1946	ParameterType	_QERPointData *
>1947	Parameter	 
>1948	Identifier	nMax
>1949	ParameterType	int
>1950	ReturnType	void WINAPI
>1951	CompoundStatement	 
>1952	IfStatement	if ( g_bPlugOK && g_nPlugCount > 0 )
>1953	CompoundStatement	 
>1954	ForStatement	for ( int i = 0 ; i < g_nPlugCount ; i ++ )
>1955	CompoundStatement	 
>1956	ExpressionStatement	 
>1957	IncDecOp	pOut ++
>1958	IncDec	++
>1959	Identifier	pOut
>1960	ExpressionStatement	 
>1961	CallExpression	memcpy ( pOut , & g_PathPoints [ i ] , sizeof ( vec3_t ) )
>1962	ArgumentList	pOut
>1963	Argument	sizeof ( vec3_t )
>1964	SizeofExpr	sizeof ( vec3_t )
>1965	SizeofOperand	vec3_t
>1966	Sizeof	sizeof
>1967	Argument	& g_PathPoints [ i ]
>1968	UnaryOp	& g_PathPoints [ i ]
>1969	ArrayIndexing	g_PathPoints [ i ]
>1970	Identifier	i
>1971	Identifier	g_PathPoints
>1972	UnaryOperator	&
>1973	Argument	pOut
>1974	Identifier	pOut
>1975	Callee	memcpy
>1976	Identifier	memcpy
>1977	IncDecOp	 
>1978	IncDec	++
>1979	Identifier	i
>1980	Condition	 
>1981	RelationalExpression	i < g_nPlugCount
>1982	Identifier	g_nPlugCount
>1983	Identifier	i
>1984	ForInit	 
>1985	IdentifierDeclStatement	int i = 0 ;
>1986	IdentifierDecl	i = 0
>1987	AssignmentExpr	i = 0
>1988	PrimaryExpression	0
>1989	Identifier	i
>1990	Identifier	i
>1991	IdentifierDeclType	int
>1992	IdentifierDeclStatement	 
>1993	IdentifierDecl	* pOut = pData -> m_pVectors
>1994	AssignmentExpr	* pOut = pData -> m_pVectors
>1995	PtrMemberAccess	pData -> m_pVectors
>1996	Identifier	m_pVectors
>1997	Identifier	pData
>1998	Identifier	pOut
>1999	Identifier	pOut
>2000	IdentifierDeclType	vec3_t *
>2001	ExpressionStatement	 
>2002	CallExpression	qmalloc ( g_nPlugCount * sizeof ( vec3_t ) )
>2003	ArgumentList	g_nPlugCount * sizeof ( vec3_t )
>2004	Argument	g_nPlugCount * sizeof ( vec3_t )
>2005	MultiplicativeExpression	g_nPlugCount * sizeof ( vec3_t )
>2006	SizeofExpr	sizeof ( vec3_t )
>2007	SizeofOperand	vec3_t
>2008	Sizeof	sizeof
>2009	Identifier	g_nPlugCount
>2010	Callee	qmalloc
>2011	Identifier	qmalloc
>2012	Statement	 
>2013	Statement	 
>2014	Statement	 
>2015	Statement	 
>2016	Statement	 
>2017	Statement	 
>2018	Statement	 
>2019	Statement	 
>2020	Statement	 
>2021	ExpressionStatement	 
>2022	AssignmentExpr	pData -> m_nCount = g_nPlugCount
>2023	Identifier	g_nPlugCount
>2024	PtrMemberAccess	pData -> m_nCount
>2025	Identifier	m_nCount
>2026	Identifier	pData
>2027	Condition	 
>2028	AndExpression	g_bPlugOK && g_nPlugCount > 0
>2029	RelationalExpression	g_nPlugCount > 0
>2030	PrimaryExpression	0
>2031	Identifier	g_nPlugCount
>2032	Identifier	g_bPlugOK
>2033	ExpressionStatement	 
>2034	AssignmentExpr	pData -> m_pVectors = NULL
>2035	Identifier	NULL
>2036	PtrMemberAccess	pData -> m_pVectors
>2037	Identifier	m_pVectors
>2038	Identifier	pData
>2039	ExpressionStatement	 
>2040	AssignmentExpr	pData -> m_nCount = 0
>2041	PrimaryExpression	0
>2042	PtrMemberAccess	pData -> m_nCount
>2043	Identifier	m_nCount
>2044	Identifier	pData
>2045	ExpressionStatement	 
>2046	CallExpression	HideInfoDialog ( )
>2047	ArgumentList	 
>2048	Callee	HideInfoDialog
>2049	Identifier	HideInfoDialog
>2050	WhileStatement	while ( g_bPlugWait )
>2051	CompoundStatement	 
>2052	CompoundStatement	 
>2053	ExpressionStatement	 
>2054	CallExpression	DispatchMessage ( & msg )
>2055	ArgumentList	& msg
>2056	Argument	& msg
>2057	UnaryOp	& msg
>2058	Identifier	msg
>2059	UnaryOperator	&
>2060	Callee	DispatchMessage
>2061	Identifier	DispatchMessage
>2062	ExpressionStatement	 
>2063	CallExpression	TranslateMessage ( & msg )
>2064	ArgumentList	& msg
>2065	Argument	& msg
>2066	UnaryOp	& msg
>2067	Identifier	msg
>2068	UnaryOperator	&
>2069	Callee	TranslateMessage
>2070	Identifier	TranslateMessage
>2071	Statement	 
>2072	Statement	 
>2073	Statement	 
>2074	Statement	 
>2075	Statement	 
>2076	Statement	 
>2077	Statement	 
>2078	Statement	 
>2079	Statement	 
>2080	Statement	 
>2081	Statement	 
>2082	Statement	 
>2083	Statement	 
>2084	Statement	 
>2085	Statement	 
>2086	Statement	 
>2087	Statement	 
>2088	IdentifierDeclStatement	 
>2089	IdentifierDecl	msg
>2090	Identifier	msg
>2091	IdentifierDeclType	MSG
>2092	Condition	 
>2093	Identifier	g_bPlugWait
>2094	ExpressionStatement	 
>2095	CallExpression	AcquirePath ( nMax , & _PlugDone )
>2096	ArgumentList	nMax
>2097	Argument	& _PlugDone
>2098	UnaryOp	& _PlugDone
>2099	Identifier	_PlugDone
>2100	UnaryOperator	&
>2101	Argument	nMax
>2102	Identifier	nMax
>2103	Callee	AcquirePath
>2104	Identifier	AcquirePath
>2105	ExpressionStatement	 
>2106	AssignmentExpr	g_nPlugCount = 0
>2107	PrimaryExpression	0
>2108	Identifier	g_nPlugCount
>2109	ExpressionStatement	 
>2110	AssignmentExpr	g_bPlugOK = false
>2111	Identifier	false
>2112	Identifier	g_bPlugOK
>2113	ExpressionStatement	 
>2114	AssignmentExpr	g_bPlugWait = true
>2115	Identifier	true
>2116	Identifier	g_bPlugWait
>2117	ExpressionStatement	 
>2118	CallExpression	ShowInfoDialog ( pMsg )
>2119	ArgumentList	pMsg
>2120	Argument	pMsg
>2121	Identifier	pMsg
>2122	Callee	ShowInfoDialog
>2123	Identifier	ShowInfoDialog
>2124	ExpressionStatement	 
>2125	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>2126	ArgumentList	AfxGetStaticModuleState ( )
>2127	Argument	AfxGetStaticModuleState ( )
>2128	CallExpression	AfxGetStaticModuleState ( )
>2129	ArgumentList	 
>2130	Callee	AfxGetStaticModuleState
>2131	Identifier	AfxGetStaticModuleState
>2132	Callee	AFX_MANAGE_STATE
>2133	Identifier	AFX_MANAGE_STATE
>2158	FunctionDef	QERApp_AddFaceData (LPVOID pv , _QERFaceData * pData)
>2159	ParameterList	LPVOID pv , _QERFaceData * pData
>2160	Parameter	 
>2161	Identifier	pData
>2162	ParameterType	_QERFaceData *
>2163	Parameter	 
>2164	Identifier	pv
>2165	ParameterType	LPVOID
>2166	ReturnType	void WINAPI
>2167	CompoundStatement	 
>2168	IfStatement	if ( pBrush != NULL )
>2169	CompoundStatement	 
>2170	ExpressionStatement	 
>2171	CallExpression	Sys_MarkMapModified ( )
>2172	ArgumentList	 
>2173	Callee	Sys_MarkMapModified
>2174	Identifier	Sys_MarkMapModified
>2175	ExpressionStatement	 
>2176	CallExpression	VectorCopy ( pData -> m_v3 , f -> planepts [ 2 ] )
>2177	ArgumentList	pData -> m_v3
>2178	Argument	f -> planepts [ 2 ]
>2179	ArrayIndexing	f -> planepts [ 2 ]
>2180	PrimaryExpression	2
>2181	PtrMemberAccess	f -> planepts
>2182	Identifier	planepts
>2183	Identifier	f
>2184	Argument	pData -> m_v3
>2185	PtrMemberAccess	pData -> m_v3
>2186	Identifier	m_v3
>2187	Identifier	pData
>2188	Callee	VectorCopy
>2189	Identifier	VectorCopy
>2190	ExpressionStatement	 
>2191	CallExpression	VectorCopy ( pData -> m_v2 , f -> planepts [ 1 ] )
>2192	ArgumentList	pData -> m_v2
>2193	Argument	f -> planepts [ 1 ]
>2194	ArrayIndexing	f -> planepts [ 1 ]
>2195	PrimaryExpression	1
>2196	PtrMemberAccess	f -> planepts
>2197	Identifier	planepts
>2198	Identifier	f
>2199	Argument	pData -> m_v2
>2200	PtrMemberAccess	pData -> m_v2
>2201	Identifier	m_v2
>2202	Identifier	pData
>2203	Callee	VectorCopy
>2204	Identifier	VectorCopy
>2205	ExpressionStatement	 
>2206	CallExpression	VectorCopy ( pData -> m_v1 , f -> planepts [ 0 ] )
>2207	ArgumentList	pData -> m_v1
>2208	Argument	f -> planepts [ 0 ]
>2209	ArrayIndexing	f -> planepts [ 0 ]
>2210	PrimaryExpression	0
>2211	PtrMemberAccess	f -> planepts
>2212	Identifier	planepts
>2213	Identifier	f
>2214	Argument	pData -> m_v1
>2215	PtrMemberAccess	pData -> m_v1
>2216	Identifier	m_v1
>2217	Identifier	pData
>2218	Callee	VectorCopy
>2219	Identifier	VectorCopy
>2220	ExpressionStatement	 
>2221	AssignmentExpr	pBrush -> brush_faces = f
>2222	Identifier	f
>2223	PtrMemberAccess	pBrush -> brush_faces
>2224	Identifier	brush_faces
>2225	Identifier	pBrush
>2226	ExpressionStatement	 
>2227	AssignmentExpr	f -> next = pBrush -> brush_faces
>2228	PtrMemberAccess	pBrush -> brush_faces
>2229	Identifier	brush_faces
>2230	Identifier	pBrush
>2231	PtrMemberAccess	f -> next
>2232	Identifier	next
>2233	Identifier	f
>2234	ExpressionStatement	 
>2235	CallExpression	f -> texdef . SetName ( pData -> m_TextureName )
>2236	ArgumentList	pData -> m_TextureName
>2237	Argument	pData -> m_TextureName
>2238	PtrMemberAccess	pData -> m_TextureName
>2239	Identifier	m_TextureName
>2240	Identifier	pData
>2241	Callee	f -> texdef . SetName
>2242	MemberAccess	f -> texdef . SetName
>2243	Identifier	SetName
>2244	PtrMemberAccess	f -> texdef
>2245	Identifier	texdef
>2246	Identifier	f
>2247	ExpressionStatement	 
>2248	AssignmentExpr	f -> texdef . scale [ 1 ] = pData -> m_fScale [ 1 ]
>2249	ArrayIndexing	pData -> m_fScale [ 1 ]
>2250	PrimaryExpression	1
>2251	PtrMemberAccess	pData -> m_fScale
>2252	Identifier	m_fScale
>2253	Identifier	pData
>2254	ArrayIndexing	f -> texdef . scale [ 1 ]
>2255	PrimaryExpression	1
>2256	MemberAccess	f -> texdef . scale
>2257	Identifier	scale
>2258	PtrMemberAccess	f -> texdef
>2259	Identifier	texdef
>2260	Identifier	f
>2261	ExpressionStatement	 
>2262	AssignmentExpr	f -> texdef . scale [ 0 ] = pData -> m_fScale [ 0 ]
>2263	ArrayIndexing	pData -> m_fScale [ 0 ]
>2264	PrimaryExpression	0
>2265	PtrMemberAccess	pData -> m_fScale
>2266	Identifier	m_fScale
>2267	Identifier	pData
>2268	ArrayIndexing	f -> texdef . scale [ 0 ]
>2269	PrimaryExpression	0
>2270	MemberAccess	f -> texdef . scale
>2271	Identifier	scale
>2272	PtrMemberAccess	f -> texdef
>2273	Identifier	texdef
>2274	Identifier	f
>2275	ExpressionStatement	 
>2276	AssignmentExpr	f -> texdef . shift [ 1 ] = pData -> m_fShift [ 1 ]
>2277	ArrayIndexing	pData -> m_fShift [ 1 ]
>2278	PrimaryExpression	1
>2279	PtrMemberAccess	pData -> m_fShift
>2280	Identifier	m_fShift
>2281	Identifier	pData
>2282	ArrayIndexing	f -> texdef . shift [ 1 ]
>2283	PrimaryExpression	1
>2284	MemberAccess	f -> texdef . shift
>2285	Identifier	shift
>2286	PtrMemberAccess	f -> texdef
>2287	Identifier	texdef
>2288	Identifier	f
>2289	ExpressionStatement	 
>2290	AssignmentExpr	f -> texdef . shift [ 0 ] = pData -> m_fShift [ 0 ]
>2291	ArrayIndexing	pData -> m_fShift [ 0 ]
>2292	PrimaryExpression	0
>2293	PtrMemberAccess	pData -> m_fShift
>2294	Identifier	m_fShift
>2295	Identifier	pData
>2296	ArrayIndexing	f -> texdef . shift [ 0 ]
>2297	PrimaryExpression	0
>2298	MemberAccess	f -> texdef . shift
>2299	Identifier	shift
>2300	PtrMemberAccess	f -> texdef
>2301	Identifier	texdef
>2302	Identifier	f
>2303	ExpressionStatement	 
>2304	AssignmentExpr	f -> texdef . rotate = pData -> m_fRotate
>2305	PtrMemberAccess	pData -> m_fRotate
>2306	Identifier	m_fRotate
>2307	Identifier	pData
>2308	MemberAccess	f -> texdef . rotate
>2309	Identifier	rotate
>2310	PtrMemberAccess	f -> texdef
>2311	Identifier	texdef
>2312	Identifier	f
>2313	ExpressionStatement	 
>2314	AssignmentExpr	f -> texdef . value = pData -> m_nValue
>2315	PtrMemberAccess	pData -> m_nValue
>2316	Identifier	m_nValue
>2317	Identifier	pData
>2318	MemberAccess	f -> texdef . value
>2319	Identifier	value
>2320	PtrMemberAccess	f -> texdef
>2321	Identifier	texdef
>2322	Identifier	f
>2323	ExpressionStatement	 
>2324	AssignmentExpr	f -> texdef . contents = pData -> m_nContents
>2325	PtrMemberAccess	pData -> m_nContents
>2326	Identifier	m_nContents
>2327	Identifier	pData
>2328	MemberAccess	f -> texdef . contents
>2329	Identifier	contents
>2330	PtrMemberAccess	f -> texdef
>2331	Identifier	texdef
>2332	Identifier	f
>2333	ExpressionStatement	 
>2334	AssignmentExpr	f -> texdef . flags = pData -> m_nFlags
>2335	PtrMemberAccess	pData -> m_nFlags
>2336	Identifier	m_nFlags
>2337	Identifier	pData
>2338	MemberAccess	f -> texdef . flags
>2339	Identifier	flags
>2340	PtrMemberAccess	f -> texdef
>2341	Identifier	texdef
>2342	Identifier	f
>2343	ExpressionStatement	 
>2344	AssignmentExpr	f -> texdef = g_qeglobals . d_texturewin . texdef
>2345	MemberAccess	g_qeglobals . d_texturewin . texdef
>2346	Identifier	texdef
>2347	MemberAccess	g_qeglobals . d_texturewin
>2348	Identifier	d_texturewin
>2349	Identifier	g_qeglobals
>2350	PtrMemberAccess	f -> texdef
>2351	Identifier	texdef
>2352	Identifier	f
>2353	IdentifierDeclStatement	 
>2354	IdentifierDecl	* f = Face_Alloc ( )
>2355	AssignmentExpr	* f = Face_Alloc ( )
>2356	CallExpression	Face_Alloc ( )
>2357	ArgumentList	 
>2358	Callee	Face_Alloc
>2359	Identifier	Face_Alloc
>2360	Identifier	f
>2361	Identifier	f
>2362	IdentifierDeclType	face_t *
>2363	Condition	 
>2364	EqualityExpression	pBrush != NULL
>2365	Identifier	NULL
>2366	Identifier	pBrush
>2367	IdentifierDeclStatement	 
>2368	IdentifierDecl	* pBrush = g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle ( pv )
>2369	AssignmentExpr	* pBrush = g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle ( pv )
>2370	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle ( pv )
>2371	ArgumentList	pv
>2372	Argument	pv
>2373	Identifier	pv
>2374	Callee	g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle
>2375	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle
>2376	Identifier	FindBrushHandle
>2377	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>2378	ArgumentList	 
>2379	Callee	g_pParentWnd -> GetPlugInMgr
>2380	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>2381	Identifier	GetPlugInMgr
>2382	Identifier	g_pParentWnd
>2383	Identifier	pBrush
>2384	Identifier	pBrush
>2385	IdentifierDeclType	brush_t *
>2386	ExpressionStatement	 
>2387	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>2388	ArgumentList	AfxGetStaticModuleState ( )
>2389	Argument	AfxGetStaticModuleState ( )
>2390	CallExpression	AfxGetStaticModuleState ( )
>2391	ArgumentList	 
>2392	Callee	AfxGetStaticModuleState
>2393	Identifier	AfxGetStaticModuleState
>2394	Callee	AFX_MANAGE_STATE
>2395	Identifier	AFX_MANAGE_STATE
>2444	FunctionDef	QERApp_GetFaceCount (LPVOID pv)
>2445	ParameterList	LPVOID pv
>2446	Parameter	 
>2447	Identifier	pv
>2448	ParameterType	LPVOID
>2449	ReturnType	int WINAPI
>2450	CompoundStatement	 
>2451	ReturnStatement	 
>2452	Identifier	n
>2453	IfStatement	if ( pBrush != NULL )
>2454	CompoundStatement	 
>2455	ForStatement	for ( face_t * f = pBrush -> brush_faces ; f ; f = f -> next )
>2456	CompoundStatement	 
>2457	ExpressionStatement	 
>2458	IncDecOp	n ++
>2459	IncDec	++
>2460	Identifier	n
>2461	AssignmentExpr	 
>2462	PtrMemberAccess	f -> next
>2463	Identifier	next
>2464	Identifier	f
>2465	Identifier	f
>2466	Condition	 
>2467	Identifier	f
>2468	ForInit	 
>2469	IdentifierDeclStatement	face_t * f = pBrush -> brush_faces ;
>2470	IdentifierDecl	* f = pBrush -> brush_faces
>2471	AssignmentExpr	* f = pBrush -> brush_faces
>2472	PtrMemberAccess	pBrush -> brush_faces
>2473	Identifier	brush_faces
>2474	Identifier	pBrush
>2475	Identifier	f
>2476	Identifier	f
>2477	IdentifierDeclType	face_t *
>2478	Condition	 
>2479	EqualityExpression	pBrush != NULL
>2480	Identifier	NULL
>2481	Identifier	pBrush
>2482	IdentifierDeclStatement	 
>2483	IdentifierDecl	* pBrush = g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle ( pv )
>2484	AssignmentExpr	* pBrush = g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle ( pv )
>2485	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle ( pv )
>2486	ArgumentList	pv
>2487	Argument	pv
>2488	Identifier	pv
>2489	Callee	g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle
>2490	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle
>2491	Identifier	FindBrushHandle
>2492	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>2493	ArgumentList	 
>2494	Callee	g_pParentWnd -> GetPlugInMgr
>2495	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>2496	Identifier	GetPlugInMgr
>2497	Identifier	g_pParentWnd
>2498	Identifier	pBrush
>2499	Identifier	pBrush
>2500	IdentifierDeclType	brush_t *
>2501	IdentifierDeclStatement	 
>2502	IdentifierDecl	n = 0
>2503	AssignmentExpr	n = 0
>2504	PrimaryExpression	0
>2505	Identifier	n
>2506	Identifier	n
>2507	IdentifierDeclType	int
>2508	ExpressionStatement	 
>2509	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>2510	ArgumentList	AfxGetStaticModuleState ( )
>2511	Argument	AfxGetStaticModuleState ( )
>2512	CallExpression	AfxGetStaticModuleState ( )
>2513	ArgumentList	 
>2514	Callee	AfxGetStaticModuleState
>2515	Identifier	AfxGetStaticModuleState
>2516	Callee	AFX_MANAGE_STATE
>2517	Identifier	AFX_MANAGE_STATE
>2535	FunctionDef	QERApp_GetFaceData (LPVOID pv , int nFaceIndex)
>2536	ParameterList	LPVOID pv , int nFaceIndex
>2537	Parameter	 
>2538	Identifier	nFaceIndex
>2539	ParameterType	int
>2540	Parameter	 
>2541	Identifier	pv
>2542	ParameterType	LPVOID
>2543	ReturnType	WINAPI
>2544	CompoundStatement	 
>2545	ReturnStatement	 
>2546	Identifier	NULL
>2547	IfStatement	if ( pBrush != NULL )
>2548	CompoundStatement	 
>2549	ForStatement	for ( face_t * f = pBrush -> brush_faces ; f ; f = f -> next )
>2550	CompoundStatement	 
>2551	ExpressionStatement	 
>2552	IncDecOp	n ++
>2553	IncDec	++
>2554	Identifier	n
>2555	IfStatement	if ( n == nFaceIndex )
>2556	CompoundStatement	 
>2557	ReturnStatement	 
>2558	UnaryOp	& face
>2559	Identifier	face
>2560	UnaryOperator	&
>2561	ExpressionStatement	 
>2562	CallExpression	VectorCopy ( f -> planepts [ 2 ] , face . m_v3 )
>2563	ArgumentList	f -> planepts [ 2 ]
>2564	Argument	face . m_v3
>2565	MemberAccess	face . m_v3
>2566	Identifier	m_v3
>2567	Identifier	face
>2568	Argument	f -> planepts [ 2 ]
>2569	ArrayIndexing	f -> planepts [ 2 ]
>2570	PrimaryExpression	2
>2571	PtrMemberAccess	f -> planepts
>2572	Identifier	planepts
>2573	Identifier	f
>2574	Callee	VectorCopy
>2575	Identifier	VectorCopy
>2576	ExpressionStatement	 
>2577	CallExpression	VectorCopy ( f -> planepts [ 1 ] , face . m_v2 )
>2578	ArgumentList	f -> planepts [ 1 ]
>2579	Argument	face . m_v2
>2580	MemberAccess	face . m_v2
>2581	Identifier	m_v2
>2582	Identifier	face
>2583	Argument	f -> planepts [ 1 ]
>2584	ArrayIndexing	f -> planepts [ 1 ]
>2585	PrimaryExpression	1
>2586	PtrMemberAccess	f -> planepts
>2587	Identifier	planepts
>2588	Identifier	f
>2589	Callee	VectorCopy
>2590	Identifier	VectorCopy
>2591	ExpressionStatement	 
>2592	CallExpression	VectorCopy ( f -> planepts [ 0 ] , face . m_v1 )
>2593	ArgumentList	f -> planepts [ 0 ]
>2594	Argument	face . m_v1
>2595	MemberAccess	face . m_v1
>2596	Identifier	m_v1
>2597	Identifier	face
>2598	Argument	f -> planepts [ 0 ]
>2599	ArrayIndexing	f -> planepts [ 0 ]
>2600	PrimaryExpression	0
>2601	PtrMemberAccess	f -> planepts
>2602	Identifier	planepts
>2603	Identifier	f
>2604	Callee	VectorCopy
>2605	Identifier	VectorCopy
>2606	ExpressionStatement	 
>2607	CallExpression	strcpy ( face . m_TextureName , f -> texdef . name )
>2608	ArgumentList	face . m_TextureName
>2609	Argument	f -> texdef . name
>2610	MemberAccess	f -> texdef . name
>2611	Identifier	name
>2612	PtrMemberAccess	f -> texdef
>2613	Identifier	texdef
>2614	Identifier	f
>2615	Argument	face . m_TextureName
>2616	MemberAccess	face . m_TextureName
>2617	Identifier	m_TextureName
>2618	Identifier	face
>2619	Callee	strcpy
>2620	Identifier	strcpy
>2621	ExpressionStatement	 
>2622	AssignmentExpr	face . m_nValue = f -> texdef . value
>2623	MemberAccess	f -> texdef . value
>2624	Identifier	value
>2625	PtrMemberAccess	f -> texdef
>2626	Identifier	texdef
>2627	Identifier	f
>2628	MemberAccess	face . m_nValue
>2629	Identifier	m_nValue
>2630	Identifier	face
>2631	ExpressionStatement	 
>2632	AssignmentExpr	face . m_fShift [ 1 ] = f -> texdef . shift [ 1 ]
>2633	ArrayIndexing	f -> texdef . shift [ 1 ]
>2634	PrimaryExpression	1
>2635	MemberAccess	f -> texdef . shift
>2636	Identifier	shift
>2637	PtrMemberAccess	f -> texdef
>2638	Identifier	texdef
>2639	Identifier	f
>2640	ArrayIndexing	face . m_fShift [ 1 ]
>2641	PrimaryExpression	1
>2642	MemberAccess	face . m_fShift
>2643	Identifier	m_fShift
>2644	Identifier	face
>2645	ExpressionStatement	 
>2646	AssignmentExpr	face . m_fShift [ 0 ] = f -> texdef . shift [ 0 ]
>2647	ArrayIndexing	f -> texdef . shift [ 0 ]
>2648	PrimaryExpression	0
>2649	MemberAccess	f -> texdef . shift
>2650	Identifier	shift
>2651	PtrMemberAccess	f -> texdef
>2652	Identifier	texdef
>2653	Identifier	f
>2654	ArrayIndexing	face . m_fShift [ 0 ]
>2655	PrimaryExpression	0
>2656	MemberAccess	face . m_fShift
>2657	Identifier	m_fShift
>2658	Identifier	face
>2659	ExpressionStatement	 
>2660	AssignmentExpr	face . m_fScale [ 1 ] = f -> texdef . scale [ 1 ]
>2661	ArrayIndexing	f -> texdef . scale [ 1 ]
>2662	PrimaryExpression	1
>2663	MemberAccess	f -> texdef . scale
>2664	Identifier	scale
>2665	PtrMemberAccess	f -> texdef
>2666	Identifier	texdef
>2667	Identifier	f
>2668	ArrayIndexing	face . m_fScale [ 1 ]
>2669	PrimaryExpression	1
>2670	MemberAccess	face . m_fScale
>2671	Identifier	m_fScale
>2672	Identifier	face
>2673	ExpressionStatement	 
>2674	AssignmentExpr	face . m_fScale [ 0 ] = f -> texdef . scale [ 0 ]
>2675	ArrayIndexing	f -> texdef . scale [ 0 ]
>2676	PrimaryExpression	0
>2677	MemberAccess	f -> texdef . scale
>2678	Identifier	scale
>2679	PtrMemberAccess	f -> texdef
>2680	Identifier	texdef
>2681	Identifier	f
>2682	ArrayIndexing	face . m_fScale [ 0 ]
>2683	PrimaryExpression	0
>2684	MemberAccess	face . m_fScale
>2685	Identifier	m_fScale
>2686	Identifier	face
>2687	ExpressionStatement	 
>2688	AssignmentExpr	face . m_fRotate = f -> texdef . rotate
>2689	MemberAccess	f -> texdef . rotate
>2690	Identifier	rotate
>2691	PtrMemberAccess	f -> texdef
>2692	Identifier	texdef
>2693	Identifier	f
>2694	MemberAccess	face . m_fRotate
>2695	Identifier	m_fRotate
>2696	Identifier	face
>2697	ExpressionStatement	 
>2698	AssignmentExpr	face . m_nFlags = f -> texdef . flags
>2699	MemberAccess	f -> texdef . flags
>2700	Identifier	flags
>2701	PtrMemberAccess	f -> texdef
>2702	Identifier	texdef
>2703	Identifier	f
>2704	MemberAccess	face . m_nFlags
>2705	Identifier	m_nFlags
>2706	Identifier	face
>2707	ExpressionStatement	 
>2708	AssignmentExpr	face . m_nContents = f -> texdef . contents
>2709	MemberAccess	f -> texdef . contents
>2710	Identifier	contents
>2711	PtrMemberAccess	f -> texdef
>2712	Identifier	texdef
>2713	Identifier	f
>2714	MemberAccess	face . m_nContents
>2715	Identifier	m_nContents
>2716	Identifier	face
>2717	Condition	 
>2718	EqualityExpression	n == nFaceIndex
>2719	Identifier	nFaceIndex
>2720	Identifier	n
>2721	IfStatement	if ( ! pBrush -> brush_faces )
>2722	CompoundStatement	 
>2723	ReturnStatement	 
>2724	Identifier	NULL
>2725	ExpressionStatement	 
>2726	CallExpression	Sys_Printf ( \"Warning 
>2727	ArgumentList	\"Warning 
>2728	Argument	\"Warning 
>2729	PrimaryExpression	\"Warning 
>2730	Callee	Sys_Printf
>2731	Identifier	Sys_Printf
>2732	Condition	 
>2733	UnaryOp	! pBrush -> brush_faces
>2734	PtrMemberAccess	pBrush -> brush_faces
>2735	Identifier	brush_faces
>2736	Identifier	pBrush
>2737	UnaryOperator	!
>2738	AssignmentExpr	 
>2739	PtrMemberAccess	f -> next
>2740	Identifier	next
>2741	Identifier	f
>2742	Identifier	f
>2743	Condition	 
>2744	Identifier	f
>2745	ForInit	 
>2746	IdentifierDeclStatement	face_t * f = pBrush -> brush_faces ;
>2747	IdentifierDecl	* f = pBrush -> brush_faces
>2748	AssignmentExpr	* f = pBrush -> brush_faces
>2749	PtrMemberAccess	pBrush -> brush_faces
>2750	Identifier	brush_faces
>2751	Identifier	pBrush
>2752	Identifier	f
>2753	Identifier	f
>2754	IdentifierDeclType	face_t *
>2755	Condition	 
>2756	EqualityExpression	pBrush != NULL
>2757	Identifier	NULL
>2758	Identifier	pBrush
>2759	IdentifierDeclStatement	 
>2760	IdentifierDecl	* pBrush = g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle ( pv )
>2761	AssignmentExpr	* pBrush = g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle ( pv )
>2762	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle ( pv )
>2763	ArgumentList	pv
>2764	Argument	pv
>2765	Identifier	pv
>2766	Callee	g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle
>2767	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle
>2768	Identifier	FindBrushHandle
>2769	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>2770	ArgumentList	 
>2771	Callee	g_pParentWnd -> GetPlugInMgr
>2772	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>2773	Identifier	GetPlugInMgr
>2774	Identifier	g_pParentWnd
>2775	Identifier	pBrush
>2776	Identifier	pBrush
>2777	IdentifierDeclType	brush_t *
>2778	IdentifierDeclStatement	 
>2779	IdentifierDecl	n = 0
>2780	AssignmentExpr	n = 0
>2781	PrimaryExpression	0
>2782	Identifier	n
>2783	Identifier	n
>2784	IdentifierDeclType	int
>2785	IdentifierDeclStatement	 
>2786	IdentifierDecl	face
>2787	Identifier	face
>2788	IdentifierDeclType	_QERFaceData
>2789	Statement	 
>2790	ExpressionStatement	 
>2791	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>2792	ArgumentList	AfxGetStaticModuleState ( )
>2793	Argument	AfxGetStaticModuleState ( )
>2794	CallExpression	AfxGetStaticModuleState ( )
>2795	ArgumentList	 
>2796	Callee	AfxGetStaticModuleState
>2797	Identifier	AfxGetStaticModuleState
>2798	Callee	AFX_MANAGE_STATE
>2799	Identifier	AFX_MANAGE_STATE
>2847	FunctionDef	QERApp_SetFaceData (LPVOID pv , int nFaceIndex , _QERFaceData * pData)
>2848	ParameterList	LPVOID pv , int nFaceIndex , _QERFaceData * pData
>2849	Parameter	 
>2850	Identifier	pData
>2851	ParameterType	_QERFaceData *
>2852	Parameter	 
>2853	Identifier	nFaceIndex
>2854	ParameterType	int
>2855	Parameter	 
>2856	Identifier	pv
>2857	ParameterType	LPVOID
>2858	ReturnType	void WINAPI
>2859	CompoundStatement	 
>2860	IfStatement	if ( pBrush != NULL )
>2861	CompoundStatement	 
>2862	ForStatement	for ( face_t * f = pBrush -> brush_faces ; f ; f = f -> next )
>2863	CompoundStatement	 
>2864	ExpressionStatement	 
>2865	IncDecOp	n ++
>2866	IncDec	++
>2867	Identifier	n
>2868	IfStatement	if ( n == nFaceIndex )
>2869	CompoundStatement	 
>2870	ReturnStatement	 
>2871	ExpressionStatement	 
>2872	CallExpression	Sys_MarkMapModified ( )
>2873	ArgumentList	 
>2874	Callee	Sys_MarkMapModified
>2875	Identifier	Sys_MarkMapModified
>2876	ExpressionStatement	 
>2877	CallExpression	VectorCopy ( pData -> m_v3 , f -> planepts [ 2 ] )
>2878	ArgumentList	pData -> m_v3
>2879	Argument	f -> planepts [ 2 ]
>2880	ArrayIndexing	f -> planepts [ 2 ]
>2881	PrimaryExpression	2
>2882	PtrMemberAccess	f -> planepts
>2883	Identifier	planepts
>2884	Identifier	f
>2885	Argument	pData -> m_v3
>2886	PtrMemberAccess	pData -> m_v3
>2887	Identifier	m_v3
>2888	Identifier	pData
>2889	Callee	VectorCopy
>2890	Identifier	VectorCopy
>2891	ExpressionStatement	 
>2892	CallExpression	VectorCopy ( pData -> m_v2 , f -> planepts [ 1 ] )
>2893	ArgumentList	pData -> m_v2
>2894	Argument	f -> planepts [ 1 ]
>2895	ArrayIndexing	f -> planepts [ 1 ]
>2896	PrimaryExpression	1
>2897	PtrMemberAccess	f -> planepts
>2898	Identifier	planepts
>2899	Identifier	f
>2900	Argument	pData -> m_v2
>2901	PtrMemberAccess	pData -> m_v2
>2902	Identifier	m_v2
>2903	Identifier	pData
>2904	Callee	VectorCopy
>2905	Identifier	VectorCopy
>2906	ExpressionStatement	 
>2907	CallExpression	VectorCopy ( pData -> m_v1 , f -> planepts [ 0 ] )
>2908	ArgumentList	pData -> m_v1
>2909	Argument	f -> planepts [ 0 ]
>2910	ArrayIndexing	f -> planepts [ 0 ]
>2911	PrimaryExpression	0
>2912	PtrMemberAccess	f -> planepts
>2913	Identifier	planepts
>2914	Identifier	f
>2915	Argument	pData -> m_v1
>2916	PtrMemberAccess	pData -> m_v1
>2917	Identifier	m_v1
>2918	Identifier	pData
>2919	Callee	VectorCopy
>2920	Identifier	VectorCopy
>2921	ExpressionStatement	 
>2922	CallExpression	f -> texdef . SetName ( pData -> m_TextureName )
>2923	ArgumentList	pData -> m_TextureName
>2924	Argument	pData -> m_TextureName
>2925	PtrMemberAccess	pData -> m_TextureName
>2926	Identifier	m_TextureName
>2927	Identifier	pData
>2928	Callee	f -> texdef . SetName
>2929	MemberAccess	f -> texdef . SetName
>2930	Identifier	SetName
>2931	PtrMemberAccess	f -> texdef
>2932	Identifier	texdef
>2933	Identifier	f
>2934	ExpressionStatement	 
>2935	AssignmentExpr	f -> texdef . scale [ 1 ] = pData -> m_fScale [ 1 ]
>2936	ArrayIndexing	pData -> m_fScale [ 1 ]
>2937	PrimaryExpression	1
>2938	PtrMemberAccess	pData -> m_fScale
>2939	Identifier	m_fScale
>2940	Identifier	pData
>2941	ArrayIndexing	f -> texdef . scale [ 1 ]
>2942	PrimaryExpression	1
>2943	MemberAccess	f -> texdef . scale
>2944	Identifier	scale
>2945	PtrMemberAccess	f -> texdef
>2946	Identifier	texdef
>2947	Identifier	f
>2948	ExpressionStatement	 
>2949	AssignmentExpr	f -> texdef . scale [ 0 ] = pData -> m_fScale [ 0 ]
>2950	ArrayIndexing	pData -> m_fScale [ 0 ]
>2951	PrimaryExpression	0
>2952	PtrMemberAccess	pData -> m_fScale
>2953	Identifier	m_fScale
>2954	Identifier	pData
>2955	ArrayIndexing	f -> texdef . scale [ 0 ]
>2956	PrimaryExpression	0
>2957	MemberAccess	f -> texdef . scale
>2958	Identifier	scale
>2959	PtrMemberAccess	f -> texdef
>2960	Identifier	texdef
>2961	Identifier	f
>2962	ExpressionStatement	 
>2963	AssignmentExpr	f -> texdef . shift [ 1 ] = pData -> m_fShift [ 1 ]
>2964	ArrayIndexing	pData -> m_fShift [ 1 ]
>2965	PrimaryExpression	1
>2966	PtrMemberAccess	pData -> m_fShift
>2967	Identifier	m_fShift
>2968	Identifier	pData
>2969	ArrayIndexing	f -> texdef . shift [ 1 ]
>2970	PrimaryExpression	1
>2971	MemberAccess	f -> texdef . shift
>2972	Identifier	shift
>2973	PtrMemberAccess	f -> texdef
>2974	Identifier	texdef
>2975	Identifier	f
>2976	ExpressionStatement	 
>2977	AssignmentExpr	f -> texdef . shift [ 0 ] = pData -> m_fShift [ 0 ]
>2978	ArrayIndexing	pData -> m_fShift [ 0 ]
>2979	PrimaryExpression	0
>2980	PtrMemberAccess	pData -> m_fShift
>2981	Identifier	m_fShift
>2982	Identifier	pData
>2983	ArrayIndexing	f -> texdef . shift [ 0 ]
>2984	PrimaryExpression	0
>2985	MemberAccess	f -> texdef . shift
>2986	Identifier	shift
>2987	PtrMemberAccess	f -> texdef
>2988	Identifier	texdef
>2989	Identifier	f
>2990	ExpressionStatement	 
>2991	AssignmentExpr	f -> texdef . rotate = pData -> m_fRotate
>2992	PtrMemberAccess	pData -> m_fRotate
>2993	Identifier	m_fRotate
>2994	Identifier	pData
>2995	MemberAccess	f -> texdef . rotate
>2996	Identifier	rotate
>2997	PtrMemberAccess	f -> texdef
>2998	Identifier	texdef
>2999	Identifier	f
>3000	ExpressionStatement	 
>3001	AssignmentExpr	f -> texdef . value = pData -> m_nValue
>3002	PtrMemberAccess	pData -> m_nValue
>3003	Identifier	m_nValue
>3004	Identifier	pData
>3005	MemberAccess	f -> texdef . value
>3006	Identifier	value
>3007	PtrMemberAccess	f -> texdef
>3008	Identifier	texdef
>3009	Identifier	f
>3010	ExpressionStatement	 
>3011	AssignmentExpr	f -> texdef . contents = pData -> m_nContents
>3012	PtrMemberAccess	pData -> m_nContents
>3013	Identifier	m_nContents
>3014	Identifier	pData
>3015	MemberAccess	f -> texdef . contents
>3016	Identifier	contents
>3017	PtrMemberAccess	f -> texdef
>3018	Identifier	texdef
>3019	Identifier	f
>3020	ExpressionStatement	 
>3021	AssignmentExpr	f -> texdef . flags = pData -> m_nFlags
>3022	PtrMemberAccess	pData -> m_nFlags
>3023	Identifier	m_nFlags
>3024	Identifier	pData
>3025	MemberAccess	f -> texdef . flags
>3026	Identifier	flags
>3027	PtrMemberAccess	f -> texdef
>3028	Identifier	texdef
>3029	Identifier	f
>3030	Condition	 
>3031	EqualityExpression	n == nFaceIndex
>3032	Identifier	nFaceIndex
>3033	Identifier	n
>3034	AssignmentExpr	 
>3035	PtrMemberAccess	f -> next
>3036	Identifier	next
>3037	Identifier	f
>3038	Identifier	f
>3039	Condition	 
>3040	Identifier	f
>3041	ForInit	 
>3042	IdentifierDeclStatement	face_t * f = pBrush -> brush_faces ;
>3043	IdentifierDecl	* f = pBrush -> brush_faces
>3044	AssignmentExpr	* f = pBrush -> brush_faces
>3045	PtrMemberAccess	pBrush -> brush_faces
>3046	Identifier	brush_faces
>3047	Identifier	pBrush
>3048	Identifier	f
>3049	Identifier	f
>3050	IdentifierDeclType	face_t *
>3051	Condition	 
>3052	EqualityExpression	pBrush != NULL
>3053	Identifier	NULL
>3054	Identifier	pBrush
>3055	IdentifierDeclStatement	 
>3056	IdentifierDecl	* pBrush = g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle ( pv )
>3057	AssignmentExpr	* pBrush = g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle ( pv )
>3058	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle ( pv )
>3059	ArgumentList	pv
>3060	Argument	pv
>3061	Identifier	pv
>3062	Callee	g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle
>3063	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle
>3064	Identifier	FindBrushHandle
>3065	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>3066	ArgumentList	 
>3067	Callee	g_pParentWnd -> GetPlugInMgr
>3068	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>3069	Identifier	GetPlugInMgr
>3070	Identifier	g_pParentWnd
>3071	Identifier	pBrush
>3072	Identifier	pBrush
>3073	IdentifierDeclType	brush_t *
>3074	IdentifierDeclStatement	 
>3075	IdentifierDecl	n = 0
>3076	AssignmentExpr	n = 0
>3077	PrimaryExpression	0
>3078	Identifier	n
>3079	Identifier	n
>3080	IdentifierDeclType	int
>3081	ExpressionStatement	 
>3082	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>3083	ArgumentList	AfxGetStaticModuleState ( )
>3084	Argument	AfxGetStaticModuleState ( )
>3085	CallExpression	AfxGetStaticModuleState ( )
>3086	ArgumentList	 
>3087	Callee	AfxGetStaticModuleState
>3088	Identifier	AfxGetStaticModuleState
>3089	Callee	AFX_MANAGE_STATE
>3090	Identifier	AFX_MANAGE_STATE
>3137	FunctionDef	QERApp_DeleteFace (LPVOID pv , int nFaceIndex)
>3138	ParameterList	LPVOID pv , int nFaceIndex
>3139	Parameter	 
>3140	Identifier	nFaceIndex
>3141	ParameterType	int
>3142	Parameter	 
>3143	Identifier	pv
>3144	ParameterType	LPVOID
>3145	ReturnType	void WINAPI
>3146	CompoundStatement	 
>3147	IfStatement	if ( pBrush != NULL )
>3148	CompoundStatement	 
>3149	ForStatement	for ( face_t * f = pBrush -> brush_faces ; f ; f = f -> next )
>3150	CompoundStatement	 
>3151	ExpressionStatement	 
>3152	AssignmentExpr	pPrev = f
>3153	Identifier	f
>3154	Identifier	pPrev
>3155	ExpressionStatement	 
>3156	IncDecOp	n ++
>3157	IncDec	++
>3158	Identifier	n
>3159	IfStatement	if ( n == nFaceIndex )
>3160	CompoundStatement	 
>3161	ReturnStatement	 
>3162	ExpressionStatement	 
>3163	CallExpression	Sys_MarkMapModified ( )
>3164	ArgumentList	 
>3165	Callee	Sys_MarkMapModified
>3166	Identifier	Sys_MarkMapModified
>3167	ExpressionStatement	 
>3168	CallExpression	Face_Free ( f )
>3169	ArgumentList	f
>3170	Argument	f
>3171	Identifier	f
>3172	Callee	Face_Free
>3173	Identifier	Face_Free
>3174	ExpressionStatement	 
>3175	AssignmentExpr	pPrev -> next = f -> next
>3176	PtrMemberAccess	f -> next
>3177	Identifier	next
>3178	Identifier	f
>3179	PtrMemberAccess	pPrev -> next
>3180	Identifier	next
>3181	Identifier	pPrev
>3182	Condition	 
>3183	EqualityExpression	n == nFaceIndex
>3184	Identifier	nFaceIndex
>3185	Identifier	n
>3186	AssignmentExpr	 
>3187	PtrMemberAccess	f -> next
>3188	Identifier	next
>3189	Identifier	f
>3190	Identifier	f
>3191	Condition	 
>3192	Identifier	f
>3193	ForInit	 
>3194	IdentifierDeclStatement	face_t * f = pBrush -> brush_faces ;
>3195	IdentifierDecl	* f = pBrush -> brush_faces
>3196	AssignmentExpr	* f = pBrush -> brush_faces
>3197	PtrMemberAccess	pBrush -> brush_faces
>3198	Identifier	brush_faces
>3199	Identifier	pBrush
>3200	Identifier	f
>3201	Identifier	f
>3202	IdentifierDeclType	face_t *
>3203	IdentifierDeclStatement	 
>3204	IdentifierDecl	* pPrev = pBrush -> brush_faces
>3205	AssignmentExpr	* pPrev = pBrush -> brush_faces
>3206	PtrMemberAccess	pBrush -> brush_faces
>3207	Identifier	brush_faces
>3208	Identifier	pBrush
>3209	Identifier	pPrev
>3210	Identifier	pPrev
>3211	IdentifierDeclType	face_t *
>3212	Condition	 
>3213	EqualityExpression	pBrush != NULL
>3214	Identifier	NULL
>3215	Identifier	pBrush
>3216	IdentifierDeclStatement	 
>3217	IdentifierDecl	* pBrush = g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle ( pv )
>3218	AssignmentExpr	* pBrush = g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle ( pv )
>3219	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle ( pv )
>3220	ArgumentList	pv
>3221	Argument	pv
>3222	Identifier	pv
>3223	Callee	g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle
>3224	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle
>3225	Identifier	FindBrushHandle
>3226	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>3227	ArgumentList	 
>3228	Callee	g_pParentWnd -> GetPlugInMgr
>3229	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>3230	Identifier	GetPlugInMgr
>3231	Identifier	g_pParentWnd
>3232	Identifier	pBrush
>3233	Identifier	pBrush
>3234	IdentifierDeclType	brush_t *
>3235	IdentifierDeclStatement	 
>3236	IdentifierDecl	n = 0
>3237	AssignmentExpr	n = 0
>3238	PrimaryExpression	0
>3239	Identifier	n
>3240	Identifier	n
>3241	IdentifierDeclType	int
>3242	ExpressionStatement	 
>3243	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>3244	ArgumentList	AfxGetStaticModuleState ( )
>3245	Argument	AfxGetStaticModuleState ( )
>3246	CallExpression	AfxGetStaticModuleState ( )
>3247	ArgumentList	 
>3248	Callee	AfxGetStaticModuleState
>3249	Identifier	AfxGetStaticModuleState
>3250	Callee	AFX_MANAGE_STATE
>3251	Identifier	AFX_MANAGE_STATE
>3273	FunctionDef	QERApp_BuildBrush (LPVOID pv)
>3274	ParameterList	LPVOID pv
>3275	Parameter	 
>3276	Identifier	pv
>3277	ParameterType	LPVOID
>3278	ReturnType	void WINAPI
>3279	CompoundStatement	 
>3280	IfStatement	if ( pBrush != NULL )
>3281	CompoundStatement	 
>3282	ExpressionStatement	 
>3283	CallExpression	Sys_UpdateWindows ( W_ALL )
>3284	ArgumentList	W_ALL
>3285	Argument	W_ALL
>3286	Identifier	W_ALL
>3287	Callee	Sys_UpdateWindows
>3288	Identifier	Sys_UpdateWindows
>3289	ExpressionStatement	 
>3290	CallExpression	Brush_Build ( pBrush )
>3291	ArgumentList	pBrush
>3292	Argument	pBrush
>3293	Identifier	pBrush
>3294	Callee	Brush_Build
>3295	Identifier	Brush_Build
>3296	Condition	 
>3297	EqualityExpression	pBrush != NULL
>3298	Identifier	NULL
>3299	Identifier	pBrush
>3300	IdentifierDeclStatement	 
>3301	IdentifierDecl	* pBrush = g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle ( pv )
>3302	AssignmentExpr	* pBrush = g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle ( pv )
>3303	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle ( pv )
>3304	ArgumentList	pv
>3305	Argument	pv
>3306	Identifier	pv
>3307	Callee	g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle
>3308	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle
>3309	Identifier	FindBrushHandle
>3310	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>3311	ArgumentList	 
>3312	Callee	g_pParentWnd -> GetPlugInMgr
>3313	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>3314	Identifier	GetPlugInMgr
>3315	Identifier	g_pParentWnd
>3316	Identifier	pBrush
>3317	Identifier	pBrush
>3318	IdentifierDeclType	brush_t *
>3319	ExpressionStatement	 
>3320	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>3321	ArgumentList	AfxGetStaticModuleState ( )
>3322	Argument	AfxGetStaticModuleState ( )
>3323	CallExpression	AfxGetStaticModuleState ( )
>3324	ArgumentList	 
>3325	Callee	AfxGetStaticModuleState
>3326	Identifier	AfxGetStaticModuleState
>3327	Callee	AFX_MANAGE_STATE
>3328	Identifier	AFX_MANAGE_STATE
>3341	FunctionDef	QERApp_BuildBrush2 (LPVOID pv , int bConvert)
>3342	ParameterList	LPVOID pv , int bConvert
>3343	Parameter	 
>3344	Identifier	bConvert
>3345	ParameterType	int
>3346	Parameter	 
>3347	Identifier	pv
>3348	ParameterType	LPVOID
>3349	ReturnType	void WINAPI
>3350	CompoundStatement	 
>3351	IfStatement	if ( pBrush != NULL )
>3352	CompoundStatement	 
>3353	ExpressionStatement	 
>3354	CallExpression	Sys_UpdateWindows ( W_ALL )
>3355	ArgumentList	W_ALL
>3356	Argument	W_ALL
>3357	Identifier	W_ALL
>3358	Callee	Sys_UpdateWindows
>3359	Identifier	Sys_UpdateWindows
>3360	ExpressionStatement	 
>3361	CallExpression	Brush_Build ( pBrush , true , true , bConvert )
>3362	ArgumentList	pBrush
>3363	Argument	bConvert
>3364	Identifier	bConvert
>3365	Argument	true
>3366	Identifier	true
>3367	Argument	true
>3368	Identifier	true
>3369	Argument	pBrush
>3370	Identifier	pBrush
>3371	Callee	Brush_Build
>3372	Identifier	Brush_Build
>3373	Condition	 
>3374	EqualityExpression	pBrush != NULL
>3375	Identifier	NULL
>3376	Identifier	pBrush
>3377	IdentifierDeclStatement	 
>3378	IdentifierDecl	* pBrush = g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle ( pv )
>3379	AssignmentExpr	* pBrush = g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle ( pv )
>3380	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle ( pv )
>3381	ArgumentList	pv
>3382	Argument	pv
>3383	Identifier	pv
>3384	Callee	g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle
>3385	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle
>3386	Identifier	FindBrushHandle
>3387	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>3388	ArgumentList	 
>3389	Callee	g_pParentWnd -> GetPlugInMgr
>3390	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>3391	Identifier	GetPlugInMgr
>3392	Identifier	g_pParentWnd
>3393	Identifier	pBrush
>3394	Identifier	pBrush
>3395	IdentifierDeclType	brush_t *
>3396	ExpressionStatement	 
>3397	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>3398	ArgumentList	AfxGetStaticModuleState ( )
>3399	Argument	AfxGetStaticModuleState ( )
>3400	CallExpression	AfxGetStaticModuleState ( )
>3401	ArgumentList	 
>3402	Callee	AfxGetStaticModuleState
>3403	Identifier	AfxGetStaticModuleState
>3404	Callee	AFX_MANAGE_STATE
>3405	Identifier	AFX_MANAGE_STATE
>3420	FunctionDef	QERApp_SelectBrush (LPVOID pv)
>3421	ParameterList	LPVOID pv
>3422	Parameter	 
>3423	Identifier	pv
>3424	ParameterType	LPVOID
>3425	ReturnType	void WINAPI
>3426	CompoundStatement	 
>3427	IfStatement	if ( pBrush != NULL )
>3428	CompoundStatement	 
>3429	ExpressionStatement	 
>3430	CallExpression	Sys_UpdateWindows ( W_ALL )
>3431	ArgumentList	W_ALL
>3432	Argument	W_ALL
>3433	Identifier	W_ALL
>3434	Callee	Sys_UpdateWindows
>3435	Identifier	Sys_UpdateWindows
>3436	ExpressionStatement	 
>3437	CallExpression	Select_Brush ( pBrush , false )
>3438	ArgumentList	pBrush
>3439	Argument	false
>3440	Identifier	false
>3441	Argument	pBrush
>3442	Identifier	pBrush
>3443	Callee	Select_Brush
>3444	Identifier	Select_Brush
>3445	Condition	 
>3446	EqualityExpression	pBrush != NULL
>3447	Identifier	NULL
>3448	Identifier	pBrush
>3449	IdentifierDeclStatement	 
>3450	IdentifierDecl	* pBrush = g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle ( pv )
>3451	AssignmentExpr	* pBrush = g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle ( pv )
>3452	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle ( pv )
>3453	ArgumentList	pv
>3454	Argument	pv
>3455	Identifier	pv
>3456	Callee	g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle
>3457	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle
>3458	Identifier	FindBrushHandle
>3459	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>3460	ArgumentList	 
>3461	Callee	g_pParentWnd -> GetPlugInMgr
>3462	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>3463	Identifier	GetPlugInMgr
>3464	Identifier	g_pParentWnd
>3465	Identifier	pBrush
>3466	Identifier	pBrush
>3467	IdentifierDeclType	brush_t *
>3468	ExpressionStatement	 
>3469	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>3470	ArgumentList	AfxGetStaticModuleState ( )
>3471	Argument	AfxGetStaticModuleState ( )
>3472	CallExpression	AfxGetStaticModuleState ( )
>3473	ArgumentList	 
>3474	Callee	AfxGetStaticModuleState
>3475	Identifier	AfxGetStaticModuleState
>3476	Callee	AFX_MANAGE_STATE
>3477	Identifier	AFX_MANAGE_STATE
>3491	FunctionDef	QERApp_DeselectBrush (LPVOID pv)
>3492	ParameterList	LPVOID pv
>3493	Parameter	 
>3494	Identifier	pv
>3495	ParameterType	LPVOID
>3496	ReturnType	void WINAPI
>3497	CompoundStatement	 
>3498	ExpressionStatement	 
>3499	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>3500	ArgumentList	AfxGetStaticModuleState ( )
>3501	Argument	AfxGetStaticModuleState ( )
>3502	CallExpression	AfxGetStaticModuleState ( )
>3503	ArgumentList	 
>3504	Callee	AfxGetStaticModuleState
>3505	Identifier	AfxGetStaticModuleState
>3506	Callee	AFX_MANAGE_STATE
>3507	Identifier	AFX_MANAGE_STATE
>3513	FunctionDef	QERApp_ResetPlugins ()
>3514	ParameterList	 
>3515	ReturnType	void WINAPI
>3516	CompoundStatement	 
>3517	ExpressionStatement	 
>3518	CallExpression	g_pParentWnd -> OnPluginsRefresh ( )
>3519	ArgumentList	 
>3520	Callee	g_pParentWnd -> OnPluginsRefresh
>3521	PtrMemberAccess	g_pParentWnd -> OnPluginsRefresh
>3522	Identifier	OnPluginsRefresh
>3523	Identifier	g_pParentWnd
>3524	ExpressionStatement	 
>3525	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>3526	ArgumentList	AfxGetStaticModuleState ( )
>3527	Argument	AfxGetStaticModuleState ( )
>3528	CallExpression	AfxGetStaticModuleState ( )
>3529	ArgumentList	 
>3530	Callee	AfxGetStaticModuleState
>3531	Identifier	AfxGetStaticModuleState
>3532	Callee	AFX_MANAGE_STATE
>3533	Identifier	AFX_MANAGE_STATE
>3539	FunctionDef	QERApp_DeselectAllBrushes ()
>3540	ParameterList	 
>3541	ReturnType	void WINAPI
>3542	CompoundStatement	 
>3543	ExpressionStatement	 
>3544	CallExpression	Sys_UpdateWindows ( W_ALL )
>3545	ArgumentList	W_ALL
>3546	Argument	W_ALL
>3547	Identifier	W_ALL
>3548	Callee	Sys_UpdateWindows
>3549	Identifier	Sys_UpdateWindows
>3550	ExpressionStatement	 
>3551	CallExpression	Select_Deselect ( )
>3552	ArgumentList	 
>3553	Callee	Select_Deselect
>3554	Identifier	Select_Deselect
>3555	ExpressionStatement	 
>3556	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>3557	ArgumentList	AfxGetStaticModuleState ( )
>3558	Argument	AfxGetStaticModuleState ( )
>3559	CallExpression	AfxGetStaticModuleState ( )
>3560	ArgumentList	 
>3561	Callee	AfxGetStaticModuleState
>3562	Identifier	AfxGetStaticModuleState
>3563	Callee	AFX_MANAGE_STATE
>3564	Identifier	AFX_MANAGE_STATE
>3570	FunctionDef	QERApp_TextureBrush (LPVOID pv , LPCSTR pName)
>3571	ParameterList	LPVOID pv , LPCSTR pName
>3572	Parameter	 
>3573	Identifier	pName
>3574	ParameterType	LPCSTR
>3575	Parameter	 
>3576	Identifier	pv
>3577	ParameterType	LPVOID
>3578	ReturnType	void WINAPI
>3579	CompoundStatement	 
>3580	IfStatement	if ( pBrush != NULL )
>3581	CompoundStatement	 
>3582	ExpressionStatement	 
>3583	CallExpression	Sys_MarkMapModified ( )
>3584	ArgumentList	 
>3585	Callee	Sys_MarkMapModified
>3586	Identifier	Sys_MarkMapModified
>3587	ForStatement	for ( face_t * f = pBrush -> brush_faces ; f ; f = f -> next )
>3588	CompoundStatement	 
>3589	ExpressionStatement	 
>3590	CallExpression	f -> texdef . SetName ( pName )
>3591	ArgumentList	pName
>3592	Argument	pName
>3593	Identifier	pName
>3594	Callee	f -> texdef . SetName
>3595	MemberAccess	f -> texdef . SetName
>3596	Identifier	SetName
>3597	PtrMemberAccess	f -> texdef
>3598	Identifier	texdef
>3599	Identifier	f
>3600	AssignmentExpr	 
>3601	PtrMemberAccess	f -> next
>3602	Identifier	next
>3603	Identifier	f
>3604	Identifier	f
>3605	Condition	 
>3606	Identifier	f
>3607	ForInit	 
>3608	IdentifierDeclStatement	face_t * f = pBrush -> brush_faces ;
>3609	IdentifierDecl	* f = pBrush -> brush_faces
>3610	AssignmentExpr	* f = pBrush -> brush_faces
>3611	PtrMemberAccess	pBrush -> brush_faces
>3612	Identifier	brush_faces
>3613	Identifier	pBrush
>3614	Identifier	f
>3615	Identifier	f
>3616	IdentifierDeclType	face_t *
>3617	Condition	 
>3618	EqualityExpression	pBrush != NULL
>3619	Identifier	NULL
>3620	Identifier	pBrush
>3621	IdentifierDeclStatement	 
>3622	IdentifierDecl	* pBrush = g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle ( pv )
>3623	AssignmentExpr	* pBrush = g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle ( pv )
>3624	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle ( pv )
>3625	ArgumentList	pv
>3626	Argument	pv
>3627	Identifier	pv
>3628	Callee	g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle
>3629	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . FindBrushHandle
>3630	Identifier	FindBrushHandle
>3631	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>3632	ArgumentList	 
>3633	Callee	g_pParentWnd -> GetPlugInMgr
>3634	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>3635	Identifier	GetPlugInMgr
>3636	Identifier	g_pParentWnd
>3637	Identifier	pBrush
>3638	Identifier	pBrush
>3639	IdentifierDeclType	brush_t *
>3640	ExpressionStatement	 
>3641	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>3642	ArgumentList	AfxGetStaticModuleState ( )
>3643	Argument	AfxGetStaticModuleState ( )
>3644	CallExpression	AfxGetStaticModuleState ( )
>3645	ArgumentList	 
>3646	Callee	AfxGetStaticModuleState
>3647	Identifier	AfxGetStaticModuleState
>3648	Callee	AFX_MANAGE_STATE
>3649	Identifier	AFX_MANAGE_STATE
>3668	FunctionDef	QERApp_SelectedBrushCount ()
>3669	ParameterList	 
>3670	ReturnType	int WINAPI
>3671	CompoundStatement	 
>3672	ReturnStatement	 
>3673	Identifier	n
>3674	ForStatement	for ( brush_t * pb = selected_brushes . next ; pb != & selected_brushes ; pb = pb -> next )
>3675	CompoundStatement	 
>3676	ExpressionStatement	 
>3677	IncDecOp	n ++
>3678	IncDec	++
>3679	Identifier	n
>3680	AssignmentExpr	 
>3681	PtrMemberAccess	pb -> next
>3682	Identifier	next
>3683	Identifier	pb
>3684	Identifier	pb
>3685	Condition	 
>3686	EqualityExpression	pb != & selected_brushes
>3687	UnaryOp	& selected_brushes
>3688	Identifier	selected_brushes
>3689	UnaryOperator	&
>3690	Identifier	pb
>3691	ForInit	 
>3692	IdentifierDeclStatement	brush_t * pb = selected_brushes . next ;
>3693	IdentifierDecl	* pb = selected_brushes . next
>3694	AssignmentExpr	* pb = selected_brushes . next
>3695	MemberAccess	selected_brushes . next
>3696	Identifier	next
>3697	Identifier	selected_brushes
>3698	Identifier	pb
>3699	Identifier	pb
>3700	IdentifierDeclType	brush_t *
>3701	IdentifierDeclStatement	 
>3702	IdentifierDecl	n = 0
>3703	AssignmentExpr	n = 0
>3704	PrimaryExpression	0
>3705	Identifier	n
>3706	Identifier	n
>3707	IdentifierDeclType	int
>3708	ExpressionStatement	 
>3709	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>3710	ArgumentList	AfxGetStaticModuleState ( )
>3711	Argument	AfxGetStaticModuleState ( )
>3712	CallExpression	AfxGetStaticModuleState ( )
>3713	ArgumentList	 
>3714	Callee	AfxGetStaticModuleState
>3715	Identifier	AfxGetStaticModuleState
>3716	Callee	AFX_MANAGE_STATE
>3717	Identifier	AFX_MANAGE_STATE
>3729	FunctionDef	QERApp_ActiveBrushCount ()
>3730	ParameterList	 
>3731	ReturnType	int WINAPI
>3732	CompoundStatement	 
>3733	ReturnStatement	 
>3734	Identifier	n
>3735	ForStatement	for ( brush_t * pb = active_brushes . next ; pb != & active_brushes ; pb = pb -> next )
>3736	CompoundStatement	 
>3737	ExpressionStatement	 
>3738	IncDecOp	n ++
>3739	IncDec	++
>3740	Identifier	n
>3741	AssignmentExpr	 
>3742	PtrMemberAccess	pb -> next
>3743	Identifier	next
>3744	Identifier	pb
>3745	Identifier	pb
>3746	Condition	 
>3747	EqualityExpression	pb != & active_brushes
>3748	UnaryOp	& active_brushes
>3749	Identifier	active_brushes
>3750	UnaryOperator	&
>3751	Identifier	pb
>3752	ForInit	 
>3753	IdentifierDeclStatement	brush_t * pb = active_brushes . next ;
>3754	IdentifierDecl	* pb = active_brushes . next
>3755	AssignmentExpr	* pb = active_brushes . next
>3756	MemberAccess	active_brushes . next
>3757	Identifier	next
>3758	Identifier	active_brushes
>3759	Identifier	pb
>3760	Identifier	pb
>3761	IdentifierDeclType	brush_t *
>3762	IdentifierDeclStatement	 
>3763	IdentifierDecl	n = 0
>3764	AssignmentExpr	n = 0
>3765	PrimaryExpression	0
>3766	Identifier	n
>3767	Identifier	n
>3768	IdentifierDeclType	int
>3769	ExpressionStatement	 
>3770	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>3771	ArgumentList	AfxGetStaticModuleState ( )
>3772	Argument	AfxGetStaticModuleState ( )
>3773	CallExpression	AfxGetStaticModuleState ( )
>3774	ArgumentList	 
>3775	Callee	AfxGetStaticModuleState
>3776	Identifier	AfxGetStaticModuleState
>3777	Callee	AFX_MANAGE_STATE
>3778	Identifier	AFX_MANAGE_STATE
>3790	FunctionDef	QERApp_AllocateSelectedBrushHandles ()
>3791	ParameterList	 
>3792	ReturnType	int WINAPI
>3793	CompoundStatement	 
>3794	ReturnStatement	 
>3795	Identifier	n
>3796	ForStatement	for ( brush_t * pb = selected_brushes . next ; pb != & selected_brushes ; pb = pb -> next )
>3797	CompoundStatement	 
>3798	ExpressionStatement	 
>3799	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . GetSelectedHandles ( ) . Add ( pb )
>3800	ArgumentList	pb
>3801	Argument	pb
>3802	Identifier	pb
>3803	Callee	g_pParentWnd -> GetPlugInMgr ( ) . GetSelectedHandles ( ) . Add
>3804	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . GetSelectedHandles ( ) . Add
>3805	Identifier	Add
>3806	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . GetSelectedHandles ( )
>3807	ArgumentList	 
>3808	Callee	g_pParentWnd -> GetPlugInMgr ( ) . GetSelectedHandles
>3809	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . GetSelectedHandles
>3810	Identifier	GetSelectedHandles
>3811	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>3812	ArgumentList	 
>3813	Callee	g_pParentWnd -> GetPlugInMgr
>3814	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>3815	Identifier	GetPlugInMgr
>3816	Identifier	g_pParentWnd
>3817	ExpressionStatement	 
>3818	IncDecOp	n ++
>3819	IncDec	++
>3820	Identifier	n
>3821	AssignmentExpr	 
>3822	PtrMemberAccess	pb -> next
>3823	Identifier	next
>3824	Identifier	pb
>3825	Identifier	pb
>3826	Condition	 
>3827	EqualityExpression	pb != & selected_brushes
>3828	UnaryOp	& selected_brushes
>3829	Identifier	selected_brushes
>3830	UnaryOperator	&
>3831	Identifier	pb
>3832	ForInit	 
>3833	IdentifierDeclStatement	brush_t * pb = selected_brushes . next ;
>3834	IdentifierDecl	* pb = selected_brushes . next
>3835	AssignmentExpr	* pb = selected_brushes . next
>3836	MemberAccess	selected_brushes . next
>3837	Identifier	next
>3838	Identifier	selected_brushes
>3839	Identifier	pb
>3840	Identifier	pb
>3841	IdentifierDeclType	brush_t *
>3842	IdentifierDeclStatement	 
>3843	IdentifierDecl	n = 0
>3844	AssignmentExpr	n = 0
>3845	PrimaryExpression	0
>3846	Identifier	n
>3847	Identifier	n
>3848	IdentifierDeclType	int
>3849	ExpressionStatement	 
>3850	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>3851	ArgumentList	AfxGetStaticModuleState ( )
>3852	Argument	AfxGetStaticModuleState ( )
>3853	CallExpression	AfxGetStaticModuleState ( )
>3854	ArgumentList	 
>3855	Callee	AfxGetStaticModuleState
>3856	Identifier	AfxGetStaticModuleState
>3857	Callee	AFX_MANAGE_STATE
>3858	Identifier	AFX_MANAGE_STATE
>3874	FunctionDef	QERApp_AllocateActiveBrushHandles ()
>3875	ParameterList	 
>3876	ReturnType	int WINAPI
>3877	CompoundStatement	 
>3878	ReturnStatement	 
>3879	Identifier	n
>3880	ForStatement	for ( brush_t * pb = active_brushes . next ; pb != & active_brushes ; pb = pb -> next )
>3881	CompoundStatement	 
>3882	ExpressionStatement	 
>3883	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . GetActiveHandles ( ) . Add ( pb )
>3884	ArgumentList	pb
>3885	Argument	pb
>3886	Identifier	pb
>3887	Callee	g_pParentWnd -> GetPlugInMgr ( ) . GetActiveHandles ( ) . Add
>3888	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . GetActiveHandles ( ) . Add
>3889	Identifier	Add
>3890	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . GetActiveHandles ( )
>3891	ArgumentList	 
>3892	Callee	g_pParentWnd -> GetPlugInMgr ( ) . GetActiveHandles
>3893	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . GetActiveHandles
>3894	Identifier	GetActiveHandles
>3895	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>3896	ArgumentList	 
>3897	Callee	g_pParentWnd -> GetPlugInMgr
>3898	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>3899	Identifier	GetPlugInMgr
>3900	Identifier	g_pParentWnd
>3901	ExpressionStatement	 
>3902	IncDecOp	n ++
>3903	IncDec	++
>3904	Identifier	n
>3905	AssignmentExpr	 
>3906	PtrMemberAccess	pb -> next
>3907	Identifier	next
>3908	Identifier	pb
>3909	Identifier	pb
>3910	Condition	 
>3911	EqualityExpression	pb != & active_brushes
>3912	UnaryOp	& active_brushes
>3913	Identifier	active_brushes
>3914	UnaryOperator	&
>3915	Identifier	pb
>3916	ForInit	 
>3917	IdentifierDeclStatement	brush_t * pb = active_brushes . next ;
>3918	IdentifierDecl	* pb = active_brushes . next
>3919	AssignmentExpr	* pb = active_brushes . next
>3920	MemberAccess	active_brushes . next
>3921	Identifier	next
>3922	Identifier	active_brushes
>3923	Identifier	pb
>3924	Identifier	pb
>3925	IdentifierDeclType	brush_t *
>3926	IdentifierDeclStatement	 
>3927	IdentifierDecl	n = 0
>3928	AssignmentExpr	n = 0
>3929	PrimaryExpression	0
>3930	Identifier	n
>3931	Identifier	n
>3932	IdentifierDeclType	int
>3933	ExpressionStatement	 
>3934	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>3935	ArgumentList	AfxGetStaticModuleState ( )
>3936	Argument	AfxGetStaticModuleState ( )
>3937	CallExpression	AfxGetStaticModuleState ( )
>3938	ArgumentList	 
>3939	Callee	AfxGetStaticModuleState
>3940	Identifier	AfxGetStaticModuleState
>3941	Callee	AFX_MANAGE_STATE
>3942	Identifier	AFX_MANAGE_STATE
>3958	FunctionDef	QERApp_ReleaseSelectedBrushHandles ()
>3959	ParameterList	 
>3960	ReturnType	void WINAPI
>3961	CompoundStatement	 
>3962	ExpressionStatement	 
>3963	CallExpression	Sys_UpdateWindows ( W_ALL )
>3964	ArgumentList	W_ALL
>3965	Argument	W_ALL
>3966	Identifier	W_ALL
>3967	Callee	Sys_UpdateWindows
>3968	Identifier	Sys_UpdateWindows
>3969	ExpressionStatement	 
>3970	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . GetSelectedHandles ( ) . RemoveAll ( )
>3971	ArgumentList	 
>3972	Callee	g_pParentWnd -> GetPlugInMgr ( ) . GetSelectedHandles ( ) . RemoveAll
>3973	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . GetSelectedHandles ( ) . RemoveAll
>3974	Identifier	RemoveAll
>3975	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . GetSelectedHandles ( )
>3976	ArgumentList	 
>3977	Callee	g_pParentWnd -> GetPlugInMgr ( ) . GetSelectedHandles
>3978	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . GetSelectedHandles
>3979	Identifier	GetSelectedHandles
>3980	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>3981	ArgumentList	 
>3982	Callee	g_pParentWnd -> GetPlugInMgr
>3983	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>3984	Identifier	GetPlugInMgr
>3985	Identifier	g_pParentWnd
>3986	ExpressionStatement	 
>3987	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>3988	ArgumentList	AfxGetStaticModuleState ( )
>3989	Argument	AfxGetStaticModuleState ( )
>3990	CallExpression	AfxGetStaticModuleState ( )
>3991	ArgumentList	 
>3992	Callee	AfxGetStaticModuleState
>3993	Identifier	AfxGetStaticModuleState
>3994	Callee	AFX_MANAGE_STATE
>3995	Identifier	AFX_MANAGE_STATE
>4005	FunctionDef	QERApp_ReleaseActiveBrushHandles ()
>4006	ParameterList	 
>4007	ReturnType	void WINAPI
>4008	CompoundStatement	 
>4009	ExpressionStatement	 
>4010	CallExpression	Sys_UpdateWindows ( W_ALL )
>4011	ArgumentList	W_ALL
>4012	Argument	W_ALL
>4013	Identifier	W_ALL
>4014	Callee	Sys_UpdateWindows
>4015	Identifier	Sys_UpdateWindows
>4016	ExpressionStatement	 
>4017	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . GetActiveHandles ( ) . RemoveAll ( )
>4018	ArgumentList	 
>4019	Callee	g_pParentWnd -> GetPlugInMgr ( ) . GetActiveHandles ( ) . RemoveAll
>4020	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . GetActiveHandles ( ) . RemoveAll
>4021	Identifier	RemoveAll
>4022	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . GetActiveHandles ( )
>4023	ArgumentList	 
>4024	Callee	g_pParentWnd -> GetPlugInMgr ( ) . GetActiveHandles
>4025	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . GetActiveHandles
>4026	Identifier	GetActiveHandles
>4027	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>4028	ArgumentList	 
>4029	Callee	g_pParentWnd -> GetPlugInMgr
>4030	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>4031	Identifier	GetPlugInMgr
>4032	Identifier	g_pParentWnd
>4033	ExpressionStatement	 
>4034	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>4035	ArgumentList	AfxGetStaticModuleState ( )
>4036	Argument	AfxGetStaticModuleState ( )
>4037	CallExpression	AfxGetStaticModuleState ( )
>4038	ArgumentList	 
>4039	Callee	AfxGetStaticModuleState
>4040	Identifier	AfxGetStaticModuleState
>4041	Callee	AFX_MANAGE_STATE
>4042	Identifier	AFX_MANAGE_STATE
>4052	FunctionDef	QERApp_GetActiveBrushHandle (int nIndex)
>4053	ParameterList	int nIndex
>4054	Parameter	 
>4055	Identifier	nIndex
>4056	ParameterType	int
>4057	ReturnType	LPVOID WINAPI
>4058	CompoundStatement	 
>4059	ReturnStatement	 
>4060	Identifier	NULL
>4061	IfStatement	if ( nIndex < g_pParentWnd -> GetPlugInMgr ( ) . GetActiveHandles ( ) . GetSize ( ) )
>4062	CompoundStatement	 
>4063	ReturnStatement	 
>4064	RelationalExpression	reinterpret_cast < LPVOID > ( g_pParentWnd -> GetPlugInMgr ( ) . GetActiveHandles ( ) . GetAt ( nIndex ) )
>4065	RelationalExpression	LPVOID > ( g_pParentWnd -> GetPlugInMgr ( ) . GetActiveHandles ( ) . GetAt ( nIndex ) )
>4066	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . GetActiveHandles ( ) . GetAt ( nIndex )
>4067	ArgumentList	nIndex
>4068	Argument	nIndex
>4069	Identifier	nIndex
>4070	Callee	g_pParentWnd -> GetPlugInMgr ( ) . GetActiveHandles ( ) . GetAt
>4071	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . GetActiveHandles ( ) . GetAt
>4072	Identifier	GetAt
>4073	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . GetActiveHandles ( )
>4074	ArgumentList	 
>4075	Callee	g_pParentWnd -> GetPlugInMgr ( ) . GetActiveHandles
>4076	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . GetActiveHandles
>4077	Identifier	GetActiveHandles
>4078	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>4079	ArgumentList	 
>4080	Callee	g_pParentWnd -> GetPlugInMgr
>4081	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>4082	Identifier	GetPlugInMgr
>4083	Identifier	g_pParentWnd
>4084	Identifier	LPVOID
>4085	Identifier	reinterpret_cast
>4086	Condition	 
>4087	RelationalExpression	nIndex < g_pParentWnd -> GetPlugInMgr ( ) . GetActiveHandles ( ) . GetSize ( )
>4088	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . GetActiveHandles ( ) . GetSize ( )
>4089	ArgumentList	 
>4090	Callee	g_pParentWnd -> GetPlugInMgr ( ) . GetActiveHandles ( ) . GetSize
>4091	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . GetActiveHandles ( ) . GetSize
>4092	Identifier	GetSize
>4093	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . GetActiveHandles ( )
>4094	ArgumentList	 
>4095	Callee	g_pParentWnd -> GetPlugInMgr ( ) . GetActiveHandles
>4096	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . GetActiveHandles
>4097	Identifier	GetActiveHandles
>4098	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>4099	ArgumentList	 
>4100	Callee	g_pParentWnd -> GetPlugInMgr
>4101	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>4102	Identifier	GetPlugInMgr
>4103	Identifier	g_pParentWnd
>4104	Identifier	nIndex
>4105	ExpressionStatement	 
>4106	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>4107	ArgumentList	AfxGetStaticModuleState ( )
>4108	Argument	AfxGetStaticModuleState ( )
>4109	CallExpression	AfxGetStaticModuleState ( )
>4110	ArgumentList	 
>4111	Callee	AfxGetStaticModuleState
>4112	Identifier	AfxGetStaticModuleState
>4113	Callee	AFX_MANAGE_STATE
>4114	Identifier	AFX_MANAGE_STATE
>4129	FunctionDef	QERApp_GetSelectedBrushHandle (int nIndex)
>4130	ParameterList	int nIndex
>4131	Parameter	 
>4132	Identifier	nIndex
>4133	ParameterType	int
>4134	ReturnType	LPVOID WINAPI
>4135	CompoundStatement	 
>4136	ReturnStatement	 
>4137	Identifier	NULL
>4138	IfStatement	if ( nIndex < g_pParentWnd -> GetPlugInMgr ( ) . GetSelectedHandles ( ) . GetSize ( ) )
>4139	CompoundStatement	 
>4140	ReturnStatement	 
>4141	RelationalExpression	reinterpret_cast < LPVOID > ( g_pParentWnd -> GetPlugInMgr ( ) . GetSelectedHandles ( ) . GetAt ( nIndex ) )
>4142	RelationalExpression	LPVOID > ( g_pParentWnd -> GetPlugInMgr ( ) . GetSelectedHandles ( ) . GetAt ( nIndex ) )
>4143	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . GetSelectedHandles ( ) . GetAt ( nIndex )
>4144	ArgumentList	nIndex
>4145	Argument	nIndex
>4146	Identifier	nIndex
>4147	Callee	g_pParentWnd -> GetPlugInMgr ( ) . GetSelectedHandles ( ) . GetAt
>4148	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . GetSelectedHandles ( ) . GetAt
>4149	Identifier	GetAt
>4150	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . GetSelectedHandles ( )
>4151	ArgumentList	 
>4152	Callee	g_pParentWnd -> GetPlugInMgr ( ) . GetSelectedHandles
>4153	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . GetSelectedHandles
>4154	Identifier	GetSelectedHandles
>4155	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>4156	ArgumentList	 
>4157	Callee	g_pParentWnd -> GetPlugInMgr
>4158	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>4159	Identifier	GetPlugInMgr
>4160	Identifier	g_pParentWnd
>4161	Identifier	LPVOID
>4162	Identifier	reinterpret_cast
>4163	Condition	 
>4164	RelationalExpression	nIndex < g_pParentWnd -> GetPlugInMgr ( ) . GetSelectedHandles ( ) . GetSize ( )
>4165	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . GetSelectedHandles ( ) . GetSize ( )
>4166	ArgumentList	 
>4167	Callee	g_pParentWnd -> GetPlugInMgr ( ) . GetSelectedHandles ( ) . GetSize
>4168	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . GetSelectedHandles ( ) . GetSize
>4169	Identifier	GetSize
>4170	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . GetSelectedHandles ( )
>4171	ArgumentList	 
>4172	Callee	g_pParentWnd -> GetPlugInMgr ( ) . GetSelectedHandles
>4173	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . GetSelectedHandles
>4174	Identifier	GetSelectedHandles
>4175	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>4176	ArgumentList	 
>4177	Callee	g_pParentWnd -> GetPlugInMgr
>4178	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>4179	Identifier	GetPlugInMgr
>4180	Identifier	g_pParentWnd
>4181	Identifier	nIndex
>4182	ExpressionStatement	 
>4183	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>4184	ArgumentList	AfxGetStaticModuleState ( )
>4185	Argument	AfxGetStaticModuleState ( )
>4186	CallExpression	AfxGetStaticModuleState ( )
>4187	ArgumentList	 
>4188	Callee	AfxGetStaticModuleState
>4189	Identifier	AfxGetStaticModuleState
>4190	Callee	AFX_MANAGE_STATE
>4191	Identifier	AFX_MANAGE_STATE
>4206	FunctionDef	QERApp_TextureCount ()
>4207	ParameterList	 
>4208	ReturnType	int WINAPI
>4209	CompoundStatement	 
>4210	ReturnStatement	 
>4211	Identifier	n
>4212	WhileStatement	while ( 1 )
>4213	CompoundStatement	 
>4214	ExpressionStatement	 
>4215	IncDecOp	n ++
>4216	IncDec	++
>4217	Identifier	n
>4218	IfStatement	if ( ! q )
>4219	BreakStatement	 
>4220	Condition	 
>4221	UnaryOp	! q
>4222	Identifier	q
>4223	UnaryOperator	!
>4224	IdentifierDeclStatement	 
>4225	IdentifierDecl	* q = Texture_NextPos ( & x , & y )
>4226	AssignmentExpr	* q = Texture_NextPos ( & x , & y )
>4227	CallExpression	Texture_NextPos ( & x , & y )
>4228	ArgumentList	& x
>4229	Argument	& y
>4230	UnaryOp	& y
>4231	Identifier	y
>4232	UnaryOperator	&
>4233	Argument	& x
>4234	UnaryOp	& x
>4235	Identifier	x
>4236	UnaryOperator	&
>4237	Callee	Texture_NextPos
>4238	Identifier	Texture_NextPos
>4239	Identifier	q
>4240	Identifier	q
>4241	IdentifierDeclType	qtexture_t *
>4242	Condition	 
>4243	PrimaryExpression	1
>4244	IdentifierDeclStatement	 
>4245	IdentifierDecl	n = 0
>4246	AssignmentExpr	n = 0
>4247	PrimaryExpression	0
>4248	Identifier	n
>4249	Identifier	n
>4250	IdentifierDeclType	int
>4251	IdentifierDeclStatement	 
>4252	IdentifierDecl	y
>4253	Identifier	y
>4254	IdentifierDeclType	int
>4255	IdentifierDecl	x
>4256	Identifier	x
>4257	IdentifierDeclType	int
>4258	ExpressionStatement	 
>4259	CallExpression	Texture_StartPos ( )
>4260	ArgumentList	 
>4261	Callee	Texture_StartPos
>4262	Identifier	Texture_StartPos
>4263	ExpressionStatement	 
>4264	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>4265	ArgumentList	AfxGetStaticModuleState ( )
>4266	Argument	AfxGetStaticModuleState ( )
>4267	CallExpression	AfxGetStaticModuleState ( )
>4268	ArgumentList	 
>4269	Callee	AfxGetStaticModuleState
>4270	Identifier	AfxGetStaticModuleState
>4271	Callee	AFX_MANAGE_STATE
>4272	Identifier	AFX_MANAGE_STATE
>4284	FunctionDef	QERApp_GetTexture (int nIndex)
>4285	ParameterList	int nIndex
>4286	Parameter	 
>4287	Identifier	nIndex
>4288	ParameterType	int
>4289	ReturnType	LPCSTR WINAPI
>4290	CompoundStatement	 
>4291	ReturnStatement	 
>4292	Identifier	NULL
>4293	WhileStatement	while ( 1 )
>4294	CompoundStatement	 
>4295	ExpressionStatement	 
>4296	IncDecOp	n ++
>4297	IncDec	++
>4298	Identifier	n
>4299	IfStatement	if ( n == nIndex )
>4300	CompoundStatement	 
>4301	ReturnStatement	 
>4302	Identifier	name
>4303	ExpressionStatement	 
>4304	CallExpression	strcpy ( name , q -> name )
>4305	ArgumentList	name
>4306	Argument	q -> name
>4307	PtrMemberAccess	q -> name
>4308	Identifier	name
>4309	Identifier	q
>4310	Argument	name
>4311	Identifier	name
>4312	Callee	strcpy
>4313	Identifier	strcpy
>4314	Condition	 
>4315	EqualityExpression	n == nIndex
>4316	Identifier	nIndex
>4317	Identifier	n
>4318	IfStatement	if ( ! q )
>4319	BreakStatement	 
>4320	Condition	 
>4321	UnaryOp	! q
>4322	Identifier	q
>4323	UnaryOperator	!
>4324	IdentifierDeclStatement	 
>4325	IdentifierDecl	* q = Texture_NextPos ( & x , & y )
>4326	AssignmentExpr	* q = Texture_NextPos ( & x , & y )
>4327	CallExpression	Texture_NextPos ( & x , & y )
>4328	ArgumentList	& x
>4329	Argument	& y
>4330	UnaryOp	& y
>4331	Identifier	y
>4332	UnaryOperator	&
>4333	Argument	& x
>4334	UnaryOp	& x
>4335	Identifier	x
>4336	UnaryOperator	&
>4337	Callee	Texture_NextPos
>4338	Identifier	Texture_NextPos
>4339	Identifier	q
>4340	Identifier	q
>4341	IdentifierDeclType	qtexture_t *
>4342	Condition	 
>4343	PrimaryExpression	1
>4344	IdentifierDeclStatement	 
>4345	IdentifierDecl	n = 0
>4346	AssignmentExpr	n = 0
>4347	PrimaryExpression	0
>4348	Identifier	n
>4349	Identifier	n
>4350	IdentifierDeclType	int
>4351	IdentifierDeclStatement	 
>4352	IdentifierDecl	y
>4353	Identifier	y
>4354	IdentifierDeclType	int
>4355	IdentifierDecl	x
>4356	Identifier	x
>4357	IdentifierDeclType	int
>4358	ExpressionStatement	 
>4359	CallExpression	Texture_StartPos ( )
>4360	ArgumentList	 
>4361	Callee	Texture_StartPos
>4362	Identifier	Texture_StartPos
>4363	IdentifierDeclStatement	 
>4364	IdentifierDecl	name [ QER_MAX_NAMELEN ]
>4365	Identifier	QER_MAX_NAMELEN
>4366	Identifier	name
>4367	IdentifierDeclType	char [ QER_MAX_NAMELEN ]
>4368	Statement	 
>4369	ExpressionStatement	 
>4370	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>4371	ArgumentList	AfxGetStaticModuleState ( )
>4372	Argument	AfxGetStaticModuleState ( )
>4373	CallExpression	AfxGetStaticModuleState ( )
>4374	ArgumentList	 
>4375	Callee	AfxGetStaticModuleState
>4376	Identifier	AfxGetStaticModuleState
>4377	Callee	AFX_MANAGE_STATE
>4378	Identifier	AFX_MANAGE_STATE
>4395	FunctionDef	QERApp_GetCurrentTexture ()
>4396	ParameterList	 
>4397	ReturnType	LPCSTR WINAPI
>4398	CompoundStatement	 
>4399	ReturnStatement	 
>4400	MemberAccess	g_qeglobals . d_texturewin . texdef . name
>4401	Identifier	name
>4402	MemberAccess	g_qeglobals . d_texturewin . texdef
>4403	Identifier	texdef
>4404	MemberAccess	g_qeglobals . d_texturewin
>4405	Identifier	d_texturewin
>4406	Identifier	g_qeglobals
>4407	ExpressionStatement	 
>4408	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>4409	ArgumentList	AfxGetStaticModuleState ( )
>4410	Argument	AfxGetStaticModuleState ( )
>4411	CallExpression	AfxGetStaticModuleState ( )
>4412	ArgumentList	 
>4413	Callee	AfxGetStaticModuleState
>4414	Identifier	AfxGetStaticModuleState
>4415	Callee	AFX_MANAGE_STATE
>4416	Identifier	AFX_MANAGE_STATE
>4425	FunctionDef	QERApp_SetCurrentTexture (LPCSTR strName)
>4426	ParameterList	LPCSTR strName
>4427	Parameter	 
>4428	Identifier	strName
>4429	ParameterType	LPCSTR
>4430	ReturnType	void WINAPI
>4431	CompoundStatement	 
>4432	ExpressionStatement	 
>4433	CallExpression	Texture_SetTexture ( & tex , & brushprimit_tex )
>4434	ArgumentList	& tex
>4435	Argument	& brushprimit_tex
>4436	UnaryOp	& brushprimit_tex
>4437	Identifier	brushprimit_tex
>4438	UnaryOperator	&
>4439	Argument	& tex
>4440	UnaryOp	& tex
>4441	Identifier	tex
>4442	UnaryOperator	&
>4443	Callee	Texture_SetTexture
>4444	Identifier	Texture_SetTexture
>4445	ExpressionStatement	 
>4446	CallExpression	tex . SetName ( strName )
>4447	ArgumentList	strName
>4448	Argument	strName
>4449	Identifier	strName
>4450	Callee	tex . SetName
>4451	MemberAccess	tex . SetName
>4452	Identifier	SetName
>4453	Identifier	tex
>4454	IdentifierDeclStatement	 
>4455	IdentifierDecl	brushprimit_tex
>4456	Identifier	brushprimit_tex
>4457	IdentifierDeclType	brushprimit_texdef_t
>4458	IdentifierDeclStatement	 
>4459	IdentifierDecl	tex
>4460	Identifier	tex
>4461	IdentifierDeclType	texdef_t
>4462	ExpressionStatement	 
>4463	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>4464	ArgumentList	AfxGetStaticModuleState ( )
>4465	Argument	AfxGetStaticModuleState ( )
>4466	CallExpression	AfxGetStaticModuleState ( )
>4467	ArgumentList	 
>4468	Callee	AfxGetStaticModuleState
>4469	Identifier	AfxGetStaticModuleState
>4470	Callee	AFX_MANAGE_STATE
>4471	Identifier	AFX_MANAGE_STATE
>4481	FunctionDef	QERApp_GetEClassCount ()
>4482	ParameterList	 
>4483	ReturnType	int WINAPI
>4484	CompoundStatement	 
>4485	ReturnStatement	 
>4486	Identifier	n
>4487	ForStatement	for ( eclass_t * e = eclass ; e ; e = e -> next )
>4488	CompoundStatement	 
>4489	ExpressionStatement	 
>4490	IncDecOp	n ++
>4491	IncDec	++
>4492	Identifier	n
>4493	AssignmentExpr	 
>4494	PtrMemberAccess	e -> next
>4495	Identifier	next
>4496	Identifier	e
>4497	Identifier	e
>4498	Condition	 
>4499	Identifier	e
>4500	ForInit	 
>4501	IdentifierDeclStatement	eclass_t * e = eclass ;
>4502	IdentifierDecl	* e = eclass
>4503	AssignmentExpr	* e = eclass
>4504	Identifier	eclass
>4505	Identifier	eclass
>4506	Identifier	e
>4507	IdentifierDeclType	eclass_t *
>4508	IdentifierDeclStatement	 
>4509	IdentifierDecl	n = 0
>4510	AssignmentExpr	n = 0
>4511	PrimaryExpression	0
>4512	Identifier	n
>4513	Identifier	n
>4514	IdentifierDeclType	int
>4515	ExpressionStatement	 
>4516	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>4517	ArgumentList	AfxGetStaticModuleState ( )
>4518	Argument	AfxGetStaticModuleState ( )
>4519	CallExpression	AfxGetStaticModuleState ( )
>4520	ArgumentList	 
>4521	Callee	AfxGetStaticModuleState
>4522	Identifier	AfxGetStaticModuleState
>4523	Callee	AFX_MANAGE_STATE
>4524	Identifier	AFX_MANAGE_STATE
>4534	FunctionDef	QERApp_GetEClass (int nIndex)
>4535	ParameterList	int nIndex
>4536	Parameter	 
>4537	Identifier	nIndex
>4538	ParameterType	int
>4539	ReturnType	LPCSTR WINAPI
>4540	CompoundStatement	 
>4541	ReturnStatement	 
>4542	Identifier	NULL
>4543	ForStatement	for ( eclass_t * e = eclass ; e ; e = e -> next )
>4544	CompoundStatement	 
>4545	IfStatement	if ( n == nIndex )
>4546	CompoundStatement	 
>4547	ReturnStatement	 
>4548	PtrMemberAccess	e -> name
>4549	Identifier	name
>4550	Identifier	e
>4551	Condition	 
>4552	EqualityExpression	n == nIndex
>4553	Identifier	nIndex
>4554	Identifier	n
>4555	AssignmentExpr	 
>4556	PtrMemberAccess	e -> next
>4557	Identifier	next
>4558	Identifier	e
>4559	Identifier	e
>4560	Condition	 
>4561	Identifier	e
>4562	ForInit	 
>4563	IdentifierDeclStatement	eclass_t * e = eclass ;
>4564	IdentifierDecl	* e = eclass
>4565	AssignmentExpr	* e = eclass
>4566	Identifier	eclass
>4567	Identifier	eclass
>4568	Identifier	e
>4569	IdentifierDeclType	eclass_t *
>4570	IdentifierDeclStatement	 
>4571	IdentifierDecl	n = 0
>4572	AssignmentExpr	n = 0
>4573	PrimaryExpression	0
>4574	Identifier	n
>4575	Identifier	n
>4576	IdentifierDeclType	int
>4577	ExpressionStatement	 
>4578	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>4579	ArgumentList	AfxGetStaticModuleState ( )
>4580	Argument	AfxGetStaticModuleState ( )
>4581	CallExpression	AfxGetStaticModuleState ( )
>4582	ArgumentList	 
>4583	Callee	AfxGetStaticModuleState
>4584	Identifier	AfxGetStaticModuleState
>4585	Callee	AFX_MANAGE_STATE
>4586	Identifier	AFX_MANAGE_STATE
>4599	FunctionDef	QERApp_LoadTextureRGBA (LPVOID vp)
>4600	ParameterList	LPVOID vp
>4601	Parameter	 
>4602	Identifier	vp
>4603	ParameterType	LPVOID
>4604	ReturnType	void WINAPI
>4605	CompoundStatement	 
>4606	ExpressionStatement	 
>4607	CallExpression	Texture_LoadFromPlugIn ( vp )
>4608	ArgumentList	vp
>4609	Argument	vp
>4610	Identifier	vp
>4611	Callee	Texture_LoadFromPlugIn
>4612	Identifier	Texture_LoadFromPlugIn
>4617	FunctionDef	QERApp_GetEntityCount ()
>4618	ParameterList	 
>4619	ReturnType	int WINAPI
>4620	CompoundStatement	 
>4621	ReturnStatement	 
>4622	Identifier	n
>4623	ForStatement	for ( entity_t * pe = entities . next ; pe != & entities ; pe = pe -> next )
>4624	CompoundStatement	 
>4625	ExpressionStatement	 
>4626	IncDecOp	n ++
>4627	IncDec	++
>4628	Identifier	n
>4629	AssignmentExpr	 
>4630	PtrMemberAccess	pe -> next
>4631	Identifier	next
>4632	Identifier	pe
>4633	Identifier	pe
>4634	Condition	 
>4635	EqualityExpression	pe != & entities
>4636	UnaryOp	& entities
>4637	Identifier	entities
>4638	UnaryOperator	&
>4639	Identifier	pe
>4640	ForInit	 
>4641	IdentifierDeclStatement	entity_t * pe = entities . next ;
>4642	IdentifierDecl	* pe = entities . next
>4643	AssignmentExpr	* pe = entities . next
>4644	MemberAccess	entities . next
>4645	Identifier	next
>4646	Identifier	entities
>4647	Identifier	pe
>4648	Identifier	pe
>4649	IdentifierDeclType	entity_t *
>4650	IdentifierDeclStatement	 
>4651	IdentifierDecl	n = 1
>4652	AssignmentExpr	n = 1
>4653	PrimaryExpression	1
>4654	Identifier	n
>4655	Identifier	n
>4656	IdentifierDeclType	int
>4657	ExpressionStatement	 
>4658	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>4659	ArgumentList	AfxGetStaticModuleState ( )
>4660	Argument	AfxGetStaticModuleState ( )
>4661	CallExpression	AfxGetStaticModuleState ( )
>4662	ArgumentList	 
>4663	Callee	AfxGetStaticModuleState
>4664	Identifier	AfxGetStaticModuleState
>4665	Callee	AFX_MANAGE_STATE
>4666	Identifier	AFX_MANAGE_STATE
>4678	FunctionDef	QERApp_GetEntityHandle (int nIndex)
>4679	ParameterList	int nIndex
>4680	Parameter	 
>4681	Identifier	nIndex
>4682	ParameterType	int
>4683	ReturnType	LPVOID WINAPI
>4684	CompoundStatement	 
>4685	ReturnStatement	 
>4686	RelationalExpression	static_cast < LPVOID > ( pe )
>4687	RelationalExpression	LPVOID > ( pe )
>4688	Identifier	pe
>4689	Identifier	LPVOID
>4690	Identifier	static_cast
>4691	WhileStatement	while ( n < nIndex )
>4692	CompoundStatement	 
>4693	ExpressionStatement	 
>4694	IncDecOp	n ++
>4695	IncDec	++
>4696	Identifier	n
>4697	ExpressionStatement	 
>4698	AssignmentExpr	pe = pe -> next
>4699	PtrMemberAccess	pe -> next
>4700	Identifier	next
>4701	Identifier	pe
>4702	Identifier	pe
>4703	Condition	 
>4704	RelationalExpression	n < nIndex
>4705	Identifier	nIndex
>4706	Identifier	n
>4707	IdentifierDeclStatement	 
>4708	IdentifierDecl	n = 0
>4709	AssignmentExpr	n = 0
>4710	PrimaryExpression	0
>4711	Identifier	n
>4712	Identifier	n
>4713	IdentifierDeclType	int
>4714	IdentifierDeclStatement	 
>4715	IdentifierDecl	* pe = & entities
>4716	AssignmentExpr	* pe = & entities
>4717	UnaryOp	& entities
>4718	Identifier	entities
>4719	UnaryOperator	&
>4720	Identifier	pe
>4721	Identifier	pe
>4722	IdentifierDeclType	entity_t *
>4723	IfStatement	if ( nIndex == 0 )
>4724	ReturnStatement	 
>4725	RelationalExpression	static_cast < LPVOID > ( world_entity )
>4726	RelationalExpression	LPVOID > ( world_entity )
>4727	Identifier	world_entity
>4728	Identifier	LPVOID
>4729	Identifier	static_cast
>4730	Condition	 
>4731	EqualityExpression	nIndex == 0
>4732	PrimaryExpression	0
>4733	Identifier	nIndex
>4734	ExpressionStatement	 
>4735	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>4736	ArgumentList	AfxGetStaticModuleState ( )
>4737	Argument	AfxGetStaticModuleState ( )
>4738	CallExpression	AfxGetStaticModuleState ( )
>4739	ArgumentList	 
>4740	Callee	AfxGetStaticModuleState
>4741	Identifier	AfxGetStaticModuleState
>4742	Callee	AFX_MANAGE_STATE
>4743	Identifier	AFX_MANAGE_STATE
>4757	FunctionDef	QERApp_GetEntityKeyValList (LPVOID vp)
>4758	ParameterList	LPVOID vp
>4759	Parameter	 
>4760	Identifier	vp
>4761	ParameterType	LPVOID
>4762	ReturnType	WINAPI
>4763	CompoundStatement	 
>4764	ReturnStatement	 
>4765	UnaryOp	& pe -> epairs
>4766	PtrMemberAccess	pe -> epairs
>4767	Identifier	epairs
>4768	Identifier	pe
>4769	UnaryOperator	&
>4770	ExpressionStatement	 
>4771	Identifier	vp
>4772	Statement	 
>4773	Statement	 
>4774	Statement	 
>4775	Statement	 
>4776	Statement	 
>4777	Statement	 
>4778	Statement	 
>4779	Statement	 
>4780	Statement	 
>4781	ExpressionStatement	 
>4782	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>4783	ArgumentList	AfxGetStaticModuleState ( )
>4784	Argument	AfxGetStaticModuleState ( )
>4785	CallExpression	AfxGetStaticModuleState ( )
>4786	ArgumentList	 
>4787	Callee	AfxGetStaticModuleState
>4788	Identifier	AfxGetStaticModuleState
>4789	Callee	AFX_MANAGE_STATE
>4790	Identifier	AFX_MANAGE_STATE
>4799	FunctionDef	QERApp_AllocateEpair (char * key , char * val)
>4800	ParameterList	char * key , char * val
>4801	Parameter	 
>4802	Identifier	val
>4803	ParameterType	char *
>4804	Parameter	 
>4805	Identifier	key
>4806	ParameterType	char *
>4807	ReturnType	WINAPI
>4808	CompoundStatement	 
>4809	ReturnStatement	 
>4810	Identifier	e
>4811	ExpressionStatement	 
>4812	CallExpression	strcpy ( e -> value , val )
>4813	ArgumentList	e -> value
>4814	Argument	val
>4815	Identifier	val
>4816	Argument	e -> value
>4817	PtrMemberAccess	e -> value
>4818	Identifier	value
>4819	Identifier	e
>4820	Callee	strcpy
>4821	Identifier	strcpy
>4822	ExpressionStatement	 
>4823	AssignmentExpr	e -> value = ( char * ) qmalloc ( strlen ( val ) + 1 )
>4824	CastExpression	( char * ) qmalloc ( strlen ( val ) + 1 )
>4825	CallExpression	qmalloc ( strlen ( val ) + 1 )
>4826	ArgumentList	strlen ( val ) + 1
>4827	Argument	strlen ( val ) + 1
>4828	AdditiveExpression	strlen ( val ) + 1
>4829	PrimaryExpression	1
>4830	CallExpression	strlen ( val )
>4831	ArgumentList	val
>4832	Argument	val
>4833	Identifier	val
>4834	Callee	strlen
>4835	Identifier	strlen
>4836	Callee	qmalloc
>4837	Identifier	qmalloc
>4838	CastTarget	char *
>4839	PtrMemberAccess	e -> value
>4840	Identifier	value
>4841	Identifier	e
>4842	ExpressionStatement	 
>4843	CallExpression	strcpy ( e -> key , key )
>4844	ArgumentList	e -> key
>4845	Argument	key
>4846	Identifier	key
>4847	Argument	e -> key
>4848	PtrMemberAccess	e -> key
>4849	Identifier	key
>4850	Identifier	e
>4851	Callee	strcpy
>4852	Identifier	strcpy
>4853	ExpressionStatement	 
>4854	AssignmentExpr	e -> key = ( char * ) qmalloc ( strlen ( key ) + 1 )
>4855	CastExpression	( char * ) qmalloc ( strlen ( key ) + 1 )
>4856	CallExpression	qmalloc ( strlen ( key ) + 1 )
>4857	ArgumentList	strlen ( key ) + 1
>4858	Argument	strlen ( key ) + 1
>4859	AdditiveExpression	strlen ( key ) + 1
>4860	PrimaryExpression	1
>4861	CallExpression	strlen ( key )
>4862	ArgumentList	key
>4863	Argument	key
>4864	Identifier	key
>4865	Callee	strlen
>4866	Identifier	strlen
>4867	Callee	qmalloc
>4868	Identifier	qmalloc
>4869	CastTarget	char *
>4870	PtrMemberAccess	e -> key
>4871	Identifier	key
>4872	Identifier	e
>4873	IdentifierDeclStatement	 
>4874	IdentifierDecl	* e = ( epair_t * ) qmalloc ( sizeof ( * e ) )
>4875	AssignmentExpr	* e = ( epair_t * ) qmalloc ( sizeof ( * e ) )
>4876	CastExpression	( epair_t * ) qmalloc ( sizeof ( * e ) )
>4877	CallExpression	qmalloc ( sizeof ( * e ) )
>4878	ArgumentList	sizeof ( * e )
>4879	Argument	sizeof ( * e )
>4880	SizeofExpr	sizeof ( * e )
>4881	UnaryOp	* e
>4882	Identifier	e
>4883	UnaryOperator	*
>4884	Sizeof	sizeof
>4885	Callee	qmalloc
>4886	Identifier	qmalloc
>4887	CastTarget	epair_t *
>4888	Identifier	e
>4889	Identifier	e
>4890	IdentifierDeclType	epair_t *
>4891	ExpressionStatement	 
>4892	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>4893	ArgumentList	AfxGetStaticModuleState ( )
>4894	Argument	AfxGetStaticModuleState ( )
>4895	CallExpression	AfxGetStaticModuleState ( )
>4896	ArgumentList	 
>4897	Callee	AfxGetStaticModuleState
>4898	Identifier	AfxGetStaticModuleState
>4899	Callee	AFX_MANAGE_STATE
>4900	Identifier	AFX_MANAGE_STATE
>4913	FunctionDef	QERApp_SetEntityKeyValList (LPVOID vp , epair_t * ep)
>4914	ParameterList	LPVOID vp , epair_t * ep
>4915	Parameter	 
>4916	Identifier	ep
>4917	ParameterType	epair_t *
>4918	Parameter	 
>4919	Identifier	vp
>4920	ParameterType	LPVOID
>4921	ReturnType	void WINAPI
>4922	CompoundStatement	 
>4923	IfStatement	if ( pe -> epairs )
>4924	ElseStatement	else
>4925	ExpressionStatement	 
>4926	AssignmentExpr	pe -> epairs = ep
>4927	Identifier	ep
>4928	PtrMemberAccess	pe -> epairs
>4929	Identifier	epairs
>4930	Identifier	pe
>4931	ExpressionStatement	 
>4932	CallExpression	Sys_Printf ( \"Warning 
>4933	ArgumentList	\"Warning 
>4934	Argument	\"Warning 
>4935	PrimaryExpression	\"Warning 
>4936	Callee	Sys_Printf
>4937	Identifier	Sys_Printf
>4938	Condition	 
>4939	PtrMemberAccess	pe -> epairs
>4940	Identifier	epairs
>4941	Identifier	pe
>4942	ExpressionStatement	 
>4943	Identifier	vp
>4944	Statement	 
>4945	Statement	 
>4946	Statement	 
>4947	Statement	 
>4948	Statement	 
>4949	Statement	 
>4950	Statement	 
>4951	Statement	 
>4952	Statement	 
>4953	ExpressionStatement	 
>4954	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>4955	ArgumentList	AfxGetStaticModuleState ( )
>4956	Argument	AfxGetStaticModuleState ( )
>4957	CallExpression	AfxGetStaticModuleState ( )
>4958	ArgumentList	 
>4959	Callee	AfxGetStaticModuleState
>4960	Identifier	AfxGetStaticModuleState
>4961	Callee	AFX_MANAGE_STATE
>4962	Identifier	AFX_MANAGE_STATE
>4972	FunctionDef	QERApp_AllocateEntityBrushHandles (LPVOID vp)
>4973	ParameterList	LPVOID vp
>4974	Parameter	 
>4975	Identifier	vp
>4976	ParameterType	LPVOID
>4977	ReturnType	int WINAPI
>4978	CompoundStatement	 
>4979	ReturnStatement	 
>4980	Identifier	n
>4981	ForStatement	for ( brush_t * pb = pe -> brushes . onext ; pb != & pe -> brushes ; pb = pb -> onext )
>4982	CompoundStatement	 
>4983	ExpressionStatement	 
>4984	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles ( ) . Add ( pb )
>4985	ArgumentList	pb
>4986	Argument	pb
>4987	Identifier	pb
>4988	Callee	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles ( ) . Add
>4989	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles ( ) . Add
>4990	Identifier	Add
>4991	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles ( )
>4992	ArgumentList	 
>4993	Callee	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles
>4994	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles
>4995	Identifier	GetEntityBrushHandles
>4996	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>4997	ArgumentList	 
>4998	Callee	g_pParentWnd -> GetPlugInMgr
>4999	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>5000	Identifier	GetPlugInMgr
>5001	Identifier	g_pParentWnd
>5002	ExpressionStatement	 
>5003	IncDecOp	n ++
>5004	IncDec	++
>5005	Identifier	n
>5006	AssignmentExpr	 
>5007	PtrMemberAccess	pb -> onext
>5008	Identifier	onext
>5009	Identifier	pb
>5010	Identifier	pb
>5011	Condition	 
>5012	EqualityExpression	pb != & pe -> brushes
>5013	UnaryOp	& pe -> brushes
>5014	PtrMemberAccess	pe -> brushes
>5015	Identifier	brushes
>5016	Identifier	pe
>5017	UnaryOperator	&
>5018	Identifier	pb
>5019	ForInit	 
>5020	IdentifierDeclStatement	brush_t * pb = pe -> brushes . onext ;
>5021	IdentifierDecl	* pb = pe -> brushes . onext
>5022	AssignmentExpr	* pb = pe -> brushes . onext
>5023	MemberAccess	pe -> brushes . onext
>5024	Identifier	onext
>5025	PtrMemberAccess	pe -> brushes
>5026	Identifier	brushes
>5027	Identifier	pe
>5028	Identifier	pb
>5029	Identifier	pb
>5030	IdentifierDeclType	brush_t *
>5031	ExpressionStatement	 
>5032	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles ( ) . RemoveAll ( )
>5033	ArgumentList	 
>5034	Callee	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles ( ) . RemoveAll
>5035	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles ( ) . RemoveAll
>5036	Identifier	RemoveAll
>5037	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles ( )
>5038	ArgumentList	 
>5039	Callee	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles
>5040	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles
>5041	Identifier	GetEntityBrushHandles
>5042	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>5043	ArgumentList	 
>5044	Callee	g_pParentWnd -> GetPlugInMgr
>5045	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>5046	Identifier	GetPlugInMgr
>5047	Identifier	g_pParentWnd
>5048	IfStatement	if ( ! pe -> brushes . onext )
>5049	ReturnStatement	 
>5050	PrimaryExpression	0
>5051	Condition	 
>5052	UnaryOp	! pe -> brushes . onext
>5053	MemberAccess	pe -> brushes . onext
>5054	Identifier	onext
>5055	PtrMemberAccess	pe -> brushes
>5056	Identifier	brushes
>5057	Identifier	pe
>5058	UnaryOperator	!
>5059	IdentifierDeclStatement	 
>5060	IdentifierDecl	n = 0
>5061	AssignmentExpr	n = 0
>5062	PrimaryExpression	0
>5063	Identifier	n
>5064	Identifier	n
>5065	IdentifierDeclType	int
>5066	ExpressionStatement	 
>5067	Identifier	vp
>5068	Statement	 
>5069	Statement	 
>5070	Statement	 
>5071	Statement	 
>5072	Statement	 
>5073	Statement	 
>5074	Statement	 
>5075	Statement	 
>5076	Statement	 
>5077	ExpressionStatement	 
>5078	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>5079	ArgumentList	AfxGetStaticModuleState ( )
>5080	Argument	AfxGetStaticModuleState ( )
>5081	CallExpression	AfxGetStaticModuleState ( )
>5082	ArgumentList	 
>5083	Callee	AfxGetStaticModuleState
>5084	Identifier	AfxGetStaticModuleState
>5085	Callee	AFX_MANAGE_STATE
>5086	Identifier	AFX_MANAGE_STATE
>5106	FunctionDef	QERApp_ReleaseEntityBrushHandles ()
>5107	ParameterList	 
>5108	ReturnType	void WINAPI
>5109	CompoundStatement	 
>5110	ExpressionStatement	 
>5111	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles ( ) . RemoveAll ( )
>5112	ArgumentList	 
>5113	Callee	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles ( ) . RemoveAll
>5114	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles ( ) . RemoveAll
>5115	Identifier	RemoveAll
>5116	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles ( )
>5117	ArgumentList	 
>5118	Callee	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles
>5119	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles
>5120	Identifier	GetEntityBrushHandles
>5121	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>5122	ArgumentList	 
>5123	Callee	g_pParentWnd -> GetPlugInMgr
>5124	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>5125	Identifier	GetPlugInMgr
>5126	Identifier	g_pParentWnd
>5127	ExpressionStatement	 
>5128	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>5129	ArgumentList	AfxGetStaticModuleState ( )
>5130	Argument	AfxGetStaticModuleState ( )
>5131	CallExpression	AfxGetStaticModuleState ( )
>5132	ArgumentList	 
>5133	Callee	AfxGetStaticModuleState
>5134	Identifier	AfxGetStaticModuleState
>5135	Callee	AFX_MANAGE_STATE
>5136	Identifier	AFX_MANAGE_STATE
>5145	FunctionDef	QERApp_GetEntityBrushHandle (int nIndex)
>5146	ParameterList	int nIndex
>5147	Parameter	 
>5148	Identifier	nIndex
>5149	ParameterType	int
>5150	ReturnType	LPVOID WINAPI
>5151	CompoundStatement	 
>5152	ReturnStatement	 
>5153	Identifier	NULL
>5154	IfStatement	if ( nIndex < g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles ( ) . GetSize ( ) )
>5155	ReturnStatement	 
>5156	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles ( ) . GetAt ( nIndex )
>5157	ArgumentList	nIndex
>5158	Argument	nIndex
>5159	Identifier	nIndex
>5160	Callee	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles ( ) . GetAt
>5161	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles ( ) . GetAt
>5162	Identifier	GetAt
>5163	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles ( )
>5164	ArgumentList	 
>5165	Callee	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles
>5166	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles
>5167	Identifier	GetEntityBrushHandles
>5168	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>5169	ArgumentList	 
>5170	Callee	g_pParentWnd -> GetPlugInMgr
>5171	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>5172	Identifier	GetPlugInMgr
>5173	Identifier	g_pParentWnd
>5174	Condition	 
>5175	RelationalExpression	nIndex < g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles ( ) . GetSize ( )
>5176	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles ( ) . GetSize ( )
>5177	ArgumentList	 
>5178	Callee	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles ( ) . GetSize
>5179	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles ( ) . GetSize
>5180	Identifier	GetSize
>5181	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles ( )
>5182	ArgumentList	 
>5183	Callee	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles
>5184	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityBrushHandles
>5185	Identifier	GetEntityBrushHandles
>5186	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>5187	ArgumentList	 
>5188	Callee	g_pParentWnd -> GetPlugInMgr
>5189	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>5190	Identifier	GetPlugInMgr
>5191	Identifier	g_pParentWnd
>5192	Identifier	nIndex
>5193	ExpressionStatement	 
>5194	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>5195	ArgumentList	AfxGetStaticModuleState ( )
>5196	Argument	AfxGetStaticModuleState ( )
>5197	CallExpression	AfxGetStaticModuleState ( )
>5198	ArgumentList	 
>5199	Callee	AfxGetStaticModuleState
>5200	Identifier	AfxGetStaticModuleState
>5201	Callee	AFX_MANAGE_STATE
>5202	Identifier	AFX_MANAGE_STATE
>5215	FunctionDef	QERApp_CreateEntityHandle ()
>5216	ParameterList	 
>5217	ReturnType	LPVOID WINAPI
>5218	CompoundStatement	 
>5219	ReturnStatement	 
>5220	RelationalExpression	static_cast < LPVOID > ( pe )
>5221	RelationalExpression	LPVOID > ( pe )
>5222	Identifier	pe
>5223	Identifier	LPVOID
>5224	Identifier	static_cast
>5225	ExpressionStatement	 
>5226	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityHandles ( ) . Add ( static_cast < LPVOID > ( pe ) )
>5227	ArgumentList	static_cast < LPVOID > ( pe )
>5228	Argument	static_cast < LPVOID > ( pe )
>5229	RelationalExpression	static_cast < LPVOID > ( pe )
>5230	RelationalExpression	LPVOID > ( pe )
>5231	Identifier	pe
>5232	Identifier	LPVOID
>5233	Identifier	static_cast
>5234	Callee	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityHandles ( ) . Add
>5235	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityHandles ( ) . Add
>5236	Identifier	Add
>5237	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityHandles ( )
>5238	ArgumentList	 
>5239	Callee	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityHandles
>5240	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . GetEntityHandles
>5241	Identifier	GetEntityHandles
>5242	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>5243	ArgumentList	 
>5244	Callee	g_pParentWnd -> GetPlugInMgr
>5245	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>5246	Identifier	GetPlugInMgr
>5247	Identifier	g_pParentWnd
>5248	ExpressionStatement	 
>5249	AssignmentExpr	pe -> brushes . onext = pe -> brushes . oprev = & pe -> brushes
>5250	AssignmentExpr	pe -> brushes . oprev = & pe -> brushes
>5251	UnaryOp	& pe -> brushes
>5252	PtrMemberAccess	pe -> brushes
>5253	Identifier	brushes
>5254	Identifier	pe
>5255	UnaryOperator	&
>5256	MemberAccess	pe -> brushes . oprev
>5257	Identifier	oprev
>5258	PtrMemberAccess	pe -> brushes
>5259	Identifier	brushes
>5260	Identifier	pe
>5261	MemberAccess	pe -> brushes . onext
>5262	Identifier	onext
>5263	PtrMemberAccess	pe -> brushes
>5264	Identifier	brushes
>5265	Identifier	pe
>5266	ExpressionStatement	 
>5267	CallExpression	qmalloc ( sizeof ( entity_t ) )
>5268	ArgumentList	sizeof ( entity_t )
>5269	Argument	sizeof ( entity_t )
>5270	SizeofExpr	sizeof ( entity_t )
>5271	SizeofOperand	entity_t
>5272	Sizeof	sizeof
>5273	Callee	qmalloc
>5274	Identifier	qmalloc
>5275	Statement	 
>5276	Statement	 
>5277	Statement	 
>5278	Statement	 
>5279	Statement	 
>5280	Statement	 
>5281	Statement	 
>5282	Statement	 
>5283	Statement	 
>5284	ExpressionStatement	 
>5285	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>5286	ArgumentList	AfxGetStaticModuleState ( )
>5287	Argument	AfxGetStaticModuleState ( )
>5288	CallExpression	AfxGetStaticModuleState ( )
>5289	ArgumentList	 
>5290	Callee	AfxGetStaticModuleState
>5291	Identifier	AfxGetStaticModuleState
>5292	Callee	AFX_MANAGE_STATE
>5293	Identifier	AFX_MANAGE_STATE
>5311	FunctionDef	QERApp_CommitBrushHandleToEntity (LPVOID vpBrush , LPVOID vpEntity)
>5312	ParameterList	LPVOID vpBrush , LPVOID vpEntity
>5313	Parameter	 
>5314	Identifier	vpEntity
>5315	ParameterType	LPVOID
>5316	Parameter	 
>5317	Identifier	vpBrush
>5318	ParameterType	LPVOID
>5319	ReturnType	void WINAPI
>5320	CompoundStatement	 
>5321	ReturnStatement	 
>5322	ExpressionStatement	 
>5323	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . CommitBrushHandleToEntity ( vpBrush , vpEntity )
>5324	ArgumentList	vpBrush
>5325	Argument	vpEntity
>5326	Identifier	vpEntity
>5327	Argument	vpBrush
>5328	Identifier	vpBrush
>5329	Callee	g_pParentWnd -> GetPlugInMgr ( ) . CommitBrushHandleToEntity
>5330	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . CommitBrushHandleToEntity
>5331	Identifier	CommitBrushHandleToEntity
>5332	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>5333	ArgumentList	 
>5334	Callee	g_pParentWnd -> GetPlugInMgr
>5335	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>5336	Identifier	GetPlugInMgr
>5337	Identifier	g_pParentWnd
>5338	ExpressionStatement	 
>5339	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>5340	ArgumentList	AfxGetStaticModuleState ( )
>5341	Argument	AfxGetStaticModuleState ( )
>5342	CallExpression	AfxGetStaticModuleState ( )
>5343	ArgumentList	 
>5344	Callee	AfxGetStaticModuleState
>5345	Identifier	AfxGetStaticModuleState
>5346	Callee	AFX_MANAGE_STATE
>5347	Identifier	AFX_MANAGE_STATE
>5357	FunctionDef	QERApp_ReadProjectKey (char * key)
>5358	ParameterList	char * key
>5359	Parameter	 
>5360	Identifier	key
>5361	ParameterType	char *
>5362	ReturnType	WINAPI
>5363	CompoundStatement	 
>5364	ReturnStatement	 
>5365	CallExpression	ValueForKey ( g_qeglobals . d_project_entity , key )
>5366	ArgumentList	g_qeglobals . d_project_entity
>5367	Argument	key
>5368	Identifier	key
>5369	Argument	g_qeglobals . d_project_entity
>5370	MemberAccess	g_qeglobals . d_project_entity
>5371	Identifier	d_project_entity
>5372	Identifier	g_qeglobals
>5373	Callee	ValueForKey
>5374	Identifier	ValueForKey
>5382	FunctionDef	QERApp_ScanFileForEClass (char * filename)
>5383	ParameterList	char * filename
>5384	Parameter	 
>5385	Identifier	filename
>5386	ParameterType	char *
>5387	ReturnType	int WINAPI
>5388	CompoundStatement	 
>5389	ReturnStatement	 
>5390	PrimaryExpression	0
>5391	IfStatement	if ( eclass_found )
>5392	CompoundStatement	 
>5393	ReturnStatement	 
>5394	PrimaryExpression	1
>5395	ExpressionStatement	 
>5396	AssignmentExpr	eclass_e -> nShowFlags |= ECLASS_PLUGINENTITY
>5397	Identifier	ECLASS_PLUGINENTITY
>5398	PtrMemberAccess	eclass_e -> nShowFlags
>5399	Identifier	nShowFlags
>5400	Identifier	eclass_e
>5401	Condition	 
>5402	Identifier	eclass_found
>5403	ExpressionStatement	 
>5404	CallExpression	Eclass_ScanFile ( filename )
>5405	ArgumentList	filename
>5406	Argument	filename
>5407	Identifier	filename
>5408	Callee	Eclass_ScanFile
>5409	Identifier	Eclass_ScanFile
>5410	ExpressionStatement	 
>5411	AssignmentExpr	parsing_single = true
>5412	Identifier	true
>5413	Identifier	parsing_single
>5425	FunctionDef	CPlugInManager 
>5426	ParameterList	LPVOID vpBrush , LPVOID vpEntity
>5427	Parameter	 
>5428	Identifier	vpEntity
>5429	ParameterType	LPVOID
>5430	Parameter	 
>5431	Identifier	vpBrush
>5432	ParameterType	LPVOID
>5433	ReturnType	void
>5434	CompoundStatement	 
>5435	ExpressionStatement	 
>5436	CallExpression	Sys_UpdateWindows ( W_ALL )
>5437	ArgumentList	W_ALL
>5438	Argument	W_ALL
>5439	Identifier	W_ALL
>5440	Callee	Sys_UpdateWindows
>5441	Identifier	Sys_UpdateWindows
>5442	ForStatement	for ( int i = 0 ; i < m_BrushHandles . GetSize ( ) ; i ++ )
>5443	CompoundStatement	 
>5444	IfStatement	if ( vpBrush == m_BrushHandles . GetAt ( i ) )
>5445	CompoundStatement	 
>5446	ExpressionStatement	 
>5447	CallExpression	Entity_LinkBrush ( pe , pb )
>5448	ArgumentList	pe
>5449	Argument	pb
>5450	Identifier	pb
>5451	Argument	pe
>5452	Identifier	pe
>5453	Callee	Entity_LinkBrush
>5454	Identifier	Entity_LinkBrush
>5455	ExpressionStatement	 
>5456	Identifier	vpEntity
>5457	Statement	 
>5458	Statement	 
>5459	Statement	 
>5460	Statement	 
>5461	Statement	 
>5462	Statement	 
>5463	Statement	 
>5464	ExpressionStatement	 
>5465	Identifier	vpBrush
>5466	Statement	 
>5467	Statement	 
>5468	Statement	 
>5469	Statement	 
>5470	Statement	 
>5471	Statement	 
>5472	Statement	 
>5473	ExpressionStatement	 
>5474	CallExpression	m_BrushHandles . RemoveAt ( i )
>5475	ArgumentList	i
>5476	Argument	i
>5477	Identifier	i
>5478	Callee	m_BrushHandles . RemoveAt
>5479	MemberAccess	m_BrushHandles . RemoveAt
>5480	Identifier	RemoveAt
>5481	Identifier	m_BrushHandles
>5482	Condition	 
>5483	EqualityExpression	vpBrush == m_BrushHandles . GetAt ( i )
>5484	CallExpression	m_BrushHandles . GetAt ( i )
>5485	ArgumentList	i
>5486	Argument	i
>5487	Identifier	i
>5488	Callee	m_BrushHandles . GetAt
>5489	MemberAccess	m_BrushHandles . GetAt
>5490	Identifier	GetAt
>5491	Identifier	m_BrushHandles
>5492	Identifier	vpBrush
>5493	IncDecOp	 
>5494	IncDec	++
>5495	Identifier	i
>5496	Condition	 
>5497	RelationalExpression	i < m_BrushHandles . GetSize ( )
>5498	CallExpression	m_BrushHandles . GetSize ( )
>5499	ArgumentList	 
>5500	Callee	m_BrushHandles . GetSize
>5501	MemberAccess	m_BrushHandles . GetSize
>5502	Identifier	GetSize
>5503	Identifier	m_BrushHandles
>5504	Identifier	i
>5505	ForInit	 
>5506	IdentifierDeclStatement	int i = 0 ;
>5507	IdentifierDecl	i = 0
>5508	AssignmentExpr	i = 0
>5509	PrimaryExpression	0
>5510	Identifier	i
>5511	Identifier	i
>5512	IdentifierDeclType	int
>5513	IdentifierDeclStatement	 
>5514	IdentifierDecl	* pe
>5515	Identifier	pe
>5516	IdentifierDeclType	entity_t *
>5517	IdentifierDeclStatement	 
>5518	IdentifierDecl	* pb
>5519	Identifier	pb
>5520	IdentifierDeclType	brush_t *
>5533	FunctionDef	QERApp_CommitEntityHandleToMap (LPVOID vpEntity)
>5534	ParameterList	LPVOID vpEntity
>5535	Parameter	 
>5536	Identifier	vpEntity
>5537	ParameterType	LPVOID
>5538	ReturnType	void WINAPI
>5539	CompoundStatement	 
>5540	ReturnStatement	 
>5541	ExpressionStatement	 
>5542	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . CommitEntityHandleToMap ( vpEntity )
>5543	ArgumentList	vpEntity
>5544	Argument	vpEntity
>5545	Identifier	vpEntity
>5546	Callee	g_pParentWnd -> GetPlugInMgr ( ) . CommitEntityHandleToMap
>5547	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . CommitEntityHandleToMap
>5548	Identifier	CommitEntityHandleToMap
>5549	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>5550	ArgumentList	 
>5551	Callee	g_pParentWnd -> GetPlugInMgr
>5552	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>5553	Identifier	GetPlugInMgr
>5554	Identifier	g_pParentWnd
>5555	ExpressionStatement	 
>5556	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>5557	ArgumentList	AfxGetStaticModuleState ( )
>5558	Argument	AfxGetStaticModuleState ( )
>5559	CallExpression	AfxGetStaticModuleState ( )
>5560	ArgumentList	 
>5561	Callee	AfxGetStaticModuleState
>5562	Identifier	AfxGetStaticModuleState
>5563	Callee	AFX_MANAGE_STATE
>5564	Identifier	AFX_MANAGE_STATE
>5573	FunctionDef	QERApp_LoadFile (const char * pLocation , void * * buffer)
>5574	ParameterList	const char * pLocation , void * * buffer
>5575	Parameter	 
>5576	Identifier	buffer
>5577	ParameterType	void * *
>5578	Parameter	 
>5579	Identifier	pLocation
>5580	ParameterType	const char *
>5581	ReturnType	int WINAPI
>5582	CompoundStatement	 
>5583	ReturnStatement	 
>5584	Identifier	nSize
>5585	IfStatement	if ( nSize == - 1 )
>5586	CompoundStatement	 
>5587	ExpressionStatement	 
>5588	AssignmentExpr	nSize = PakLoadAnyFile ( cPath , buffer )
>5589	CallExpression	PakLoadAnyFile ( cPath , buffer )
>5590	ArgumentList	cPath
>5591	Argument	buffer
>5592	Identifier	buffer
>5593	Argument	cPath
>5594	Identifier	cPath
>5595	Callee	PakLoadAnyFile
>5596	Identifier	PakLoadAnyFile
>5597	Identifier	nSize
>5598	Condition	 
>5599	EqualityExpression	nSize == - 1
>5600	UnaryOp	- 1
>5601	PrimaryExpression	1
>5602	UnaryOperator	-
>5603	Identifier	nSize
>5604	IdentifierDeclStatement	 
>5605	IdentifierDecl	nSize = LoadFile ( cPath , buffer )
>5606	AssignmentExpr	nSize = LoadFile ( cPath , buffer )
>5607	CallExpression	LoadFile ( cPath , buffer )
>5608	ArgumentList	cPath
>5609	Argument	buffer
>5610	Identifier	buffer
>5611	Argument	cPath
>5612	Identifier	cPath
>5613	Callee	LoadFile
>5614	Identifier	LoadFile
>5615	Identifier	nSize
>5616	Identifier	nSize
>5617	IdentifierDeclType	int
>5618	ExpressionStatement	 
>5619	CallExpression	sprintf ( cPath , \"%s/%s\" , ValueForKey ( g_qeglobals . d_project_entity , \"basepath\" ) , pLocation )
>5620	ArgumentList	cPath
>5621	Argument	pLocation
>5622	Identifier	pLocation
>5623	Argument	ValueForKey ( g_qeglobals . d_project_entity , \"basepath\" )
>5624	CallExpression	ValueForKey ( g_qeglobals . d_project_entity , \"basepath\" )
>5625	ArgumentList	g_qeglobals . d_project_entity
>5626	Argument	\"basepath\"
>5627	PrimaryExpression	\"basepath\"
>5628	Argument	g_qeglobals . d_project_entity
>5629	MemberAccess	g_qeglobals . d_project_entity
>5630	Identifier	d_project_entity
>5631	Identifier	g_qeglobals
>5632	Callee	ValueForKey
>5633	Identifier	ValueForKey
>5634	Argument	\"%s/%s\"
>5635	PrimaryExpression	\"%s/%s\"
>5636	Argument	cPath
>5637	Identifier	cPath
>5638	Callee	sprintf
>5639	Identifier	sprintf
>5640	IdentifierDeclStatement	 
>5641	IdentifierDecl	cPath [ 1024 ]
>5642	PrimaryExpression	1024
>5643	Identifier	cPath
>5644	IdentifierDeclType	char [ 1024 ]
>5657	FunctionDef	QERApp_ExpandReletivePath (char * p)
>5658	ParameterList	char * p
>5659	Parameter	 
>5660	Identifier	p
>5661	ParameterType	char *
>5662	ReturnType	WINAPI
>5663	CompoundStatement	 
>5664	ReturnStatement	 
>5665	CallExpression	ExpandReletivePath ( p )
>5666	ArgumentList	p
>5667	Argument	p
>5668	Identifier	p
>5669	Callee	ExpandReletivePath
>5670	Identifier	ExpandReletivePath
>5676	FunctionDef	QERApp_HasShader (const char * pName)
>5677	ParameterList	const char * pName
>5678	Parameter	 
>5679	Identifier	pName
>5680	ParameterType	const char *
>5681	ReturnType	int WINAPI
>5682	CompoundStatement	 
>5683	ReturnStatement	 
>5684	PrimaryExpression	0
>5685	IfStatement	if ( pInfo )
>5686	ReturnStatement	 
>5687	PrimaryExpression	1
>5688	Condition	 
>5689	Identifier	pInfo
>5690	IdentifierDeclStatement	 
>5691	IdentifierDecl	* pInfo = hasShader ( pName )
>5692	AssignmentExpr	* pInfo = hasShader ( pName )
>5693	CallExpression	hasShader ( pName )
>5694	ArgumentList	pName
>5695	Argument	pName
>5696	Identifier	pName
>5697	Callee	hasShader
>5698	Identifier	hasShader
>5699	Identifier	pInfo
>5700	Identifier	pInfo
>5701	IdentifierDeclType	CShaderInfo *
>5708	FunctionDef	QERApp_Texture_ForName (const char * name)
>5709	ParameterList	const char * name
>5710	Parameter	 
>5711	Identifier	name
>5712	ParameterType	const char *
>5713	ReturnType	WINAPI
>5714	CompoundStatement	 
>5715	ExpressionStatement	 
>5716	CallExpression	qwglMakeCurrent ( pluginHDC , pluginHGLRC )
>5717	ArgumentList	pluginHDC
>5718	Argument	pluginHGLRC
>5719	Identifier	pluginHGLRC
>5720	Argument	pluginHDC
>5721	Identifier	pluginHDC
>5722	Callee	qwglMakeCurrent
>5723	Identifier	qwglMakeCurrent
>5724	ReturnStatement	 
>5725	Identifier	qtex
>5726	IdentifierDeclStatement	 
>5727	IdentifierDecl	* qtex = Texture_ForName ( name )
>5728	AssignmentExpr	* qtex = Texture_ForName ( name )
>5729	CallExpression	Texture_ForName ( name )
>5730	ArgumentList	name
>5731	Argument	name
>5732	Identifier	name
>5733	Callee	Texture_ForName
>5734	Identifier	Texture_ForName
>5735	Identifier	qtex
>5736	Identifier	qtex
>5737	IdentifierDeclType	qtexture_t *
>5738	ExpressionStatement	 
>5739	CallExpression	qwglMakeCurrent ( g_qeglobals . d_hdcBase , g_qeglobals . d_hglrcBase )
>5740	ArgumentList	g_qeglobals . d_hdcBase
>5741	Argument	g_qeglobals . d_hglrcBase
>5742	MemberAccess	g_qeglobals . d_hglrcBase
>5743	Identifier	d_hglrcBase
>5744	Identifier	g_qeglobals
>5745	Argument	g_qeglobals . d_hdcBase
>5746	MemberAccess	g_qeglobals . d_hdcBase
>5747	Identifier	d_hdcBase
>5748	Identifier	g_qeglobals
>5749	Callee	qwglMakeCurrent
>5750	Identifier	qwglMakeCurrent
>5751	IdentifierDeclStatement	 
>5752	IdentifierDecl	pluginHGLRC = qwglGetCurrentContext ( )
>5753	AssignmentExpr	pluginHGLRC = qwglGetCurrentContext ( )
>5754	CallExpression	qwglGetCurrentContext ( )
>5755	ArgumentList	 
>5756	Callee	qwglGetCurrentContext
>5757	Identifier	qwglGetCurrentContext
>5758	Identifier	pluginHGLRC
>5759	Identifier	pluginHGLRC
>5760	IdentifierDeclType	HGLRC
>5761	IdentifierDeclStatement	 
>5762	IdentifierDecl	pluginHDC = qwglGetCurrentDC ( )
>5763	AssignmentExpr	pluginHDC = qwglGetCurrentDC ( )
>5764	CallExpression	qwglGetCurrentDC ( )
>5765	ArgumentList	 
>5766	Callee	qwglGetCurrentDC
>5767	Identifier	qwglGetCurrentDC
>5768	Identifier	pluginHDC
>5769	Identifier	pluginHDC
>5770	IdentifierDeclType	HDC
>5784	FunctionDef	QERApp_RadiantFree (void * buf)
>5785	ParameterList	void * buf
>5786	Parameter	 
>5787	Identifier	buf
>5788	ParameterType	void *
>5789	ReturnType	void WINAPI
>5790	CompoundStatement	 
>5791	ExpressionStatement	 
>5792	CallExpression	free ( buf )
>5793	ArgumentList	buf
>5794	Argument	buf
>5795	Identifier	buf
>5796	Callee	free
>5797	Identifier	free
>5802	FunctionDef	QERApp_Token ()
>5803	ParameterList	 
>5804	ReturnType	WINAPI
>5805	CompoundStatement	 
>5806	ReturnStatement	 
>5807	Identifier	token
>5812	FunctionDef	QERApp_GetMapName ()
>5813	ParameterList	 
>5814	ReturnType	WINAPI
>5815	CompoundStatement	 
>5816	ReturnStatement	 
>5817	Identifier	currentmap
>5822	FunctionDef	CPlugInManager 
>5823	ParameterList	LPVOID vpEntity
>5824	Parameter	 
>5825	Identifier	vpEntity
>5826	ParameterType	LPVOID
>5827	ReturnType	void
>5828	CompoundStatement	 
>5829	ForStatement	for ( int i = 0 ; i < m_EntityHandles . GetSize ( ) ; i ++ )
>5830	CompoundStatement	 
>5831	IfStatement	if ( vpEntity == m_EntityHandles . GetAt ( i ) )
>5832	CompoundStatement	 
>5833	IfStatement	if ( ! strcmp ( ValueForKey ( pe , \"classname\" ) , \"worldspawn\" ) )
>5834	ElseStatement	else
>5835	CompoundStatement	 
>5836	ExpressionStatement	 
>5837	IncDecOp	g_qeglobals . d_num_entities ++
>5838	IncDec	++
>5839	MemberAccess	g_qeglobals . d_num_entities
>5840	Identifier	d_num_entities
>5841	Identifier	g_qeglobals
>5842	ExpressionStatement	 
>5843	AssignmentExpr	entities . prev = pe
>5844	Identifier	pe
>5845	MemberAccess	entities . prev
>5846	Identifier	prev
>5847	Identifier	entities
>5848	ExpressionStatement	 
>5849	AssignmentExpr	entities . prev -> next = pe
>5850	Identifier	pe
>5851	PtrMemberAccess	entities . prev -> next
>5852	Identifier	next
>5853	MemberAccess	entities . prev
>5854	Identifier	prev
>5855	Identifier	entities
>5856	ExpressionStatement	 
>5857	AssignmentExpr	pe -> prev = entities . prev
>5858	MemberAccess	entities . prev
>5859	Identifier	prev
>5860	Identifier	entities
>5861	PtrMemberAccess	pe -> prev
>5862	Identifier	prev
>5863	Identifier	pe
>5864	ExpressionStatement	 
>5865	AssignmentExpr	pe -> next = & entities
>5866	UnaryOp	& entities
>5867	Identifier	entities
>5868	UnaryOperator	&
>5869	PtrMemberAccess	pe -> next
>5870	Identifier	next
>5871	Identifier	pe
>5872	CompoundStatement	 
>5873	IfStatement	if ( world_entity && ( world_entity -> brushes . onext != & world_entity -> brushes ) )
>5874	ElseStatement	else
>5875	CompoundStatement	 
>5876	IfStatement	if ( world_entity )
>5877	ElseStatement	else
>5878	ExpressionStatement	 
>5879	CallExpression	Sys_Printf ( \"Warning 
>5880	ArgumentList	\"Warning 
>5881	Argument	\"Warning 
>5882	PrimaryExpression	\"Warning 
>5883	Callee	Sys_Printf
>5884	Identifier	Sys_Printf
>5885	CompoundStatement	 
>5886	ExpressionStatement	 
>5887	AssignmentExpr	world_entity = pe
>5888	Identifier	pe
>5889	Identifier	world_entity
>5890	ExpressionStatement	 
>5891	CallExpression	Entity_Free ( world_entity )
>5892	ArgumentList	world_entity
>5893	Argument	world_entity
>5894	Identifier	world_entity
>5895	Callee	Entity_Free
>5896	Identifier	Entity_Free
>5897	Condition	 
>5898	Identifier	world_entity
>5899	CompoundStatement	 
>5900	ExpressionStatement	 
>5901	IncDecOp	g_qeglobals . d_num_entities ++
>5902	IncDec	++
>5903	MemberAccess	g_qeglobals . d_num_entities
>5904	Identifier	d_num_entities
>5905	Identifier	g_qeglobals
>5906	ExpressionStatement	 
>5907	AssignmentExpr	entities . prev = pe
>5908	Identifier	pe
>5909	MemberAccess	entities . prev
>5910	Identifier	prev
>5911	Identifier	entities
>5912	ExpressionStatement	 
>5913	AssignmentExpr	entities . prev -> next = pe
>5914	Identifier	pe
>5915	PtrMemberAccess	entities . prev -> next
>5916	Identifier	next
>5917	MemberAccess	entities . prev
>5918	Identifier	prev
>5919	Identifier	entities
>5920	ExpressionStatement	 
>5921	AssignmentExpr	pe -> prev = entities . prev
>5922	MemberAccess	entities . prev
>5923	Identifier	prev
>5924	Identifier	entities
>5925	PtrMemberAccess	pe -> prev
>5926	Identifier	prev
>5927	Identifier	pe
>5928	ExpressionStatement	 
>5929	AssignmentExpr	pe -> next = & entities
>5930	UnaryOp	& entities
>5931	Identifier	entities
>5932	UnaryOperator	&
>5933	PtrMemberAccess	pe -> next
>5934	Identifier	next
>5935	Identifier	pe
>5936	ExpressionStatement	 
>5937	CallExpression	SetKeyValue ( pe , \"classname\" , \"func_group\" )
>5938	ArgumentList	pe
>5939	Argument	\"func_group\"
>5940	PrimaryExpression	\"func_group\"
>5941	Argument	\"classname\"
>5942	PrimaryExpression	\"classname\"
>5943	Argument	pe
>5944	Identifier	pe
>5945	Callee	SetKeyValue
>5946	Identifier	SetKeyValue
>5947	ExpressionStatement	 
>5948	CallExpression	Sys_Printf ( \"Commiting worldspawn as func_group\n\" )
>5949	ArgumentList	\"Commiting worldspawn as func_group\n\"
>5950	Argument	\"Commiting worldspawn as func_group\n\"
>5951	PrimaryExpression	\"Commiting worldspawn as func_group\n\"
>5952	Callee	Sys_Printf
>5953	Identifier	Sys_Printf
>5954	Condition	 
>5955	AndExpression	world_entity && ( world_entity -> brushes . onext != & world_entity -> brushes )
>5956	EqualityExpression	world_entity -> brushes . onext != & world_entity -> brushes
>5957	UnaryOp	& world_entity -> brushes
>5958	PtrMemberAccess	world_entity -> brushes
>5959	Identifier	brushes
>5960	Identifier	world_entity
>5961	UnaryOperator	&
>5962	MemberAccess	world_entity -> brushes . onext
>5963	Identifier	onext
>5964	PtrMemberAccess	world_entity -> brushes
>5965	Identifier	brushes
>5966	Identifier	world_entity
>5967	Identifier	world_entity
>5968	Condition	 
>5969	UnaryOp	! strcmp ( ValueForKey ( pe , \"classname\" ) , \"worldspawn\" )
>5970	CallExpression	strcmp ( ValueForKey ( pe , \"classname\" ) , \"worldspawn\" )
>5971	ArgumentList	ValueForKey ( pe , \"classname\" )
>5972	Argument	\"worldspawn\"
>5973	PrimaryExpression	\"worldspawn\"
>5974	Argument	ValueForKey ( pe , \"classname\" )
>5975	CallExpression	ValueForKey ( pe , \"classname\" )
>5976	ArgumentList	pe
>5977	Argument	\"classname\"
>5978	PrimaryExpression	\"classname\"
>5979	Argument	pe
>5980	Identifier	pe
>5981	Callee	ValueForKey
>5982	Identifier	ValueForKey
>5983	Callee	strcmp
>5984	Identifier	strcmp
>5985	UnaryOperator	!
>5986	ForStatement	for ( b = pe -> brushes . onext ; b != & pe -> brushes ; b = b -> onext )
>5987	CompoundStatement	 
>5988	ExpressionStatement	 
>5989	AssignmentExpr	active_brushes . next = b
>5990	Identifier	b
>5991	MemberAccess	active_brushes . next
>5992	Identifier	next
>5993	Identifier	active_brushes
>5994	ExpressionStatement	 
>5995	AssignmentExpr	b -> prev = & active_brushes
>5996	UnaryOp	& active_brushes
>5997	Identifier	active_brushes
>5998	UnaryOperator	&
>5999	PtrMemberAccess	b -> prev
>6000	Identifier	prev
>6001	Identifier	b
>6002	ExpressionStatement	 
>6003	AssignmentExpr	active_brushes . next -> prev = b
>6004	Identifier	b
>6005	PtrMemberAccess	active_brushes . next -> prev
>6006	Identifier	prev
>6007	MemberAccess	active_brushes . next
>6008	Identifier	next
>6009	Identifier	active_brushes
>6010	ExpressionStatement	 
>6011	AssignmentExpr	b -> next = active_brushes . next
>6012	MemberAccess	active_brushes . next
>6013	Identifier	next
>6014	Identifier	active_brushes
>6015	PtrMemberAccess	b -> next
>6016	Identifier	next
>6017	Identifier	b
>6018	IfStatement	if ( g_qeglobals . m_bBrushPrimitMode )
>6019	ElseStatement	else
>6020	CompoundStatement	 
>6021	ExpressionStatement	 
>6022	CallExpression	Brush_Build ( b )
>6023	ArgumentList	b
>6024	Argument	b
>6025	Identifier	b
>6026	Callee	Brush_Build
>6027	Identifier	Brush_Build
>6028	CompoundStatement	 
>6029	ExpressionStatement	 
>6030	CallExpression	Brush_Build ( b , true , true , true )
>6031	ArgumentList	b
>6032	Argument	true
>6033	Identifier	true
>6034	Argument	true
>6035	Identifier	true
>6036	Argument	true
>6037	Identifier	true
>6038	Argument	b
>6039	Identifier	b
>6040	Callee	Brush_Build
>6041	Identifier	Brush_Build
>6042	Condition	 
>6043	MemberAccess	g_qeglobals . m_bBrushPrimitMode
>6044	Identifier	m_bBrushPrimitMode
>6045	Identifier	g_qeglobals
>6046	AssignmentExpr	 
>6047	PtrMemberAccess	b -> onext
>6048	Identifier	onext
>6049	Identifier	b
>6050	Identifier	b
>6051	Condition	 
>6052	EqualityExpression	b != & pe -> brushes
>6053	UnaryOp	& pe -> brushes
>6054	PtrMemberAccess	pe -> brushes
>6055	Identifier	brushes
>6056	Identifier	pe
>6057	UnaryOperator	&
>6058	Identifier	b
>6059	ForInit	 
>6060	AssignmentExpr	b = pe -> brushes . onext
>6061	MemberAccess	pe -> brushes . onext
>6062	Identifier	onext
>6063	PtrMemberAccess	pe -> brushes
>6064	Identifier	brushes
>6065	Identifier	pe
>6066	Identifier	b
>6067	IfStatement	if ( e -> fixedsize )
>6068	ElseStatement	else
>6069	CompoundStatement	 
>6070	IfStatement	if ( pe -> brushes . next == & pe -> brushes )
>6071	ExpressionStatement	 
>6072	CallExpression	Sys_Printf ( \"Warning
>6073	ArgumentList	\"Warning
>6074	Argument	\"Warning
>6075	PrimaryExpression	\"Warning
>6076	Callee	Sys_Printf
>6077	Identifier	Sys_Printf
>6078	Condition	 
>6079	EqualityExpression	pe -> brushes . next == & pe -> brushes
>6080	UnaryOp	& pe -> brushes
>6081	PtrMemberAccess	pe -> brushes
>6082	Identifier	brushes
>6083	Identifier	pe
>6084	UnaryOperator	&
>6085	MemberAccess	pe -> brushes . next
>6086	Identifier	next
>6087	PtrMemberAccess	pe -> brushes
>6088	Identifier	brushes
>6089	Identifier	pe
>6090	CompoundStatement	 
>6091	ExpressionStatement	 
>6092	AssignmentExpr	pe -> brushes . onext = b
>6093	Identifier	b
>6094	MemberAccess	pe -> brushes . onext
>6095	Identifier	onext
>6096	PtrMemberAccess	pe -> brushes
>6097	Identifier	brushes
>6098	Identifier	pe
>6099	ExpressionStatement	 
>6100	AssignmentExpr	pe -> brushes . onext -> oprev = b
>6101	Identifier	b
>6102	PtrMemberAccess	pe -> brushes . onext -> oprev
>6103	Identifier	oprev
>6104	MemberAccess	pe -> brushes . onext
>6105	Identifier	onext
>6106	PtrMemberAccess	pe -> brushes
>6107	Identifier	brushes
>6108	Identifier	pe
>6109	ExpressionStatement	 
>6110	AssignmentExpr	b -> oprev = & pe -> brushes
>6111	UnaryOp	& pe -> brushes
>6112	PtrMemberAccess	pe -> brushes
>6113	Identifier	brushes
>6114	Identifier	pe
>6115	UnaryOperator	&
>6116	PtrMemberAccess	b -> oprev
>6117	Identifier	oprev
>6118	Identifier	b
>6119	ExpressionStatement	 
>6120	AssignmentExpr	b -> onext = pe -> brushes . onext
>6121	MemberAccess	pe -> brushes . onext
>6122	Identifier	onext
>6123	PtrMemberAccess	pe -> brushes
>6124	Identifier	brushes
>6125	Identifier	pe
>6126	PtrMemberAccess	b -> onext
>6127	Identifier	onext
>6128	Identifier	b
>6129	ExpressionStatement	 
>6130	AssignmentExpr	b -> owner = pe
>6131	Identifier	pe
>6132	PtrMemberAccess	b -> owner
>6133	Identifier	owner
>6134	Identifier	b
>6135	IfStatement	if ( a )
>6136	CompoundStatement	 
>6137	ExpressionStatement	 
>6138	CallExpression	Brush_Rotate ( b , vAngle , pe -> origin , false )
>6139	ArgumentList	b
>6140	Argument	false
>6141	Identifier	false
>6142	Argument	pe -> origin
>6143	PtrMemberAccess	pe -> origin
>6144	Identifier	origin
>6145	Identifier	pe
>6146	Argument	vAngle
>6147	Identifier	vAngle
>6148	Argument	b
>6149	Identifier	b
>6150	Callee	Brush_Rotate
>6151	Identifier	Brush_Rotate
>6152	ExpressionStatement	 
>6153	AssignmentExpr	vAngle [ 2 ] = a
>6154	Identifier	a
>6155	ArrayIndexing	vAngle [ 2 ]
>6156	PrimaryExpression	2
>6157	Identifier	vAngle
>6158	ExpressionStatement	 
>6159	AssignmentExpr	vAngle [ 0 ] = vAngle [ 1 ] = 0
>6160	AssignmentExpr	vAngle [ 1 ] = 0
>6161	PrimaryExpression	0
>6162	ArrayIndexing	vAngle [ 1 ]
>6163	PrimaryExpression	1
>6164	Identifier	vAngle
>6165	ArrayIndexing	vAngle [ 0 ]
>6166	PrimaryExpression	0
>6167	Identifier	vAngle
>6168	IdentifierDeclStatement	 
>6169	IdentifierDecl	vAngle
>6170	Identifier	vAngle
>6171	IdentifierDeclType	vec3_t
>6172	Condition	 
>6173	Identifier	a
>6174	ExpressionStatement	 
>6175	AssignmentExpr	b = Brush_Create ( mins , maxs , & e -> texdef )
>6176	CallExpression	Brush_Create ( mins , maxs , & e -> texdef )
>6177	ArgumentList	mins
>6178	Argument	& e -> texdef
>6179	UnaryOp	& e -> texdef
>6180	PtrMemberAccess	e -> texdef
>6181	Identifier	texdef
>6182	Identifier	e
>6183	UnaryOperator	&
>6184	Argument	maxs
>6185	Identifier	maxs
>6186	Argument	mins
>6187	Identifier	mins
>6188	Callee	Brush_Create
>6189	Identifier	Brush_Create
>6190	Identifier	b
>6191	IfStatement	if ( e -> nShowFlags & ECLASS_MISCMODEL )
>6192	CompoundStatement	 
>6193	IfStatement	if ( p != NULL && strlen ( p ) > 0 )
>6194	CompoundStatement	 
>6195	IfStatement	if ( GetCachedModel ( pe , p , vMin , vMax ) )
>6196	CompoundStatement	 
>6197	ExpressionStatement	 
>6198	CallExpression	VectorAdd ( pe -> md3Class -> maxs , pe -> origin , maxs )
>6199	ArgumentList	pe -> md3Class -> maxs
>6200	Argument	maxs
>6201	Identifier	maxs
>6202	Argument	pe -> origin
>6203	PtrMemberAccess	pe -> origin
>6204	Identifier	origin
>6205	Identifier	pe
>6206	Argument	pe -> md3Class -> maxs
>6207	PtrMemberAccess	pe -> md3Class -> maxs
>6208	Identifier	maxs
>6209	PtrMemberAccess	pe -> md3Class
>6210	Identifier	md3Class
>6211	Identifier	pe
>6212	Callee	VectorAdd
>6213	Identifier	VectorAdd
>6214	ExpressionStatement	 
>6215	CallExpression	VectorAdd ( pe -> md3Class -> mins , pe -> origin , mins )
>6216	ArgumentList	pe -> md3Class -> mins
>6217	Argument	mins
>6218	Identifier	mins
>6219	Argument	pe -> origin
>6220	PtrMemberAccess	pe -> origin
>6221	Identifier	origin
>6222	Identifier	pe
>6223	Argument	pe -> md3Class -> mins
>6224	PtrMemberAccess	pe -> md3Class -> mins
>6225	Identifier	mins
>6226	PtrMemberAccess	pe -> md3Class
>6227	Identifier	md3Class
>6228	Identifier	pe
>6229	Callee	VectorAdd
>6230	Identifier	VectorAdd
>6231	Condition	 
>6232	CallExpression	GetCachedModel ( pe , p , vMin , vMax )
>6233	ArgumentList	pe
>6234	Argument	vMax
>6235	Identifier	vMax
>6236	Argument	vMin
>6237	Identifier	vMin
>6238	Argument	p
>6239	Identifier	p
>6240	Argument	pe
>6241	Identifier	pe
>6242	Callee	GetCachedModel
>6243	Identifier	GetCachedModel
>6244	ExpressionStatement	 
>6245	AssignmentExpr	a = FloatForKey ( pe , \"angle\" )
>6246	CallExpression	FloatForKey ( pe , \"angle\" )
>6247	ArgumentList	pe
>6248	Argument	\"angle\"
>6249	PrimaryExpression	\"angle\"
>6250	Argument	pe
>6251	Identifier	pe
>6252	Callee	FloatForKey
>6253	Identifier	FloatForKey
>6254	Identifier	a
>6255	IdentifierDeclStatement	 
>6256	IdentifierDecl	vMax
>6257	Identifier	vMax
>6258	IdentifierDeclType	vec3_t
>6259	IdentifierDecl	vMin
>6260	Identifier	vMin
>6261	IdentifierDeclType	vec3_t
>6262	Condition	 
>6263	AndExpression	p != NULL && strlen ( p ) > 0
>6264	RelationalExpression	strlen ( p ) > 0
>6265	PrimaryExpression	0
>6266	CallExpression	strlen ( p )
>6267	ArgumentList	p
>6268	Argument	p
>6269	Identifier	p
>6270	Callee	strlen
>6271	Identifier	strlen
>6272	EqualityExpression	p != NULL
>6273	Identifier	NULL
>6274	Identifier	p
>6275	IdentifierDeclStatement	 
>6276	IdentifierDecl	* p = ValueForKey ( pe , \"model\" )
>6277	AssignmentExpr	* p = ValueForKey ( pe , \"model\" )
>6278	CallExpression	ValueForKey ( pe , \"model\" )
>6279	ArgumentList	pe
>6280	Argument	\"model\"
>6281	PrimaryExpression	\"model\"
>6282	Argument	pe
>6283	Identifier	pe
>6284	Callee	ValueForKey
>6285	Identifier	ValueForKey
>6286	Identifier	p
>6287	Identifier	p
>6288	IdentifierDeclType	char *
>6289	Condition	 
>6290	BitAndExpression	e -> nShowFlags & ECLASS_MISCMODEL
>6291	Identifier	ECLASS_MISCMODEL
>6292	PtrMemberAccess	e -> nShowFlags
>6293	Identifier	nShowFlags
>6294	Identifier	e
>6295	IdentifierDeclStatement	 
>6296	IdentifierDecl	a = 0
>6297	AssignmentExpr	a = 0
>6298	PrimaryExpression	0
>6299	Identifier	a
>6300	Identifier	a
>6301	IdentifierDeclType	float
>6302	ExpressionStatement	 
>6303	CallExpression	VectorAdd ( e -> maxs , pe -> origin , maxs )
>6304	ArgumentList	e -> maxs
>6305	Argument	maxs
>6306	Identifier	maxs
>6307	Argument	pe -> origin
>6308	PtrMemberAccess	pe -> origin
>6309	Identifier	origin
>6310	Identifier	pe
>6311	Argument	e -> maxs
>6312	PtrMemberAccess	e -> maxs
>6313	Identifier	maxs
>6314	Identifier	e
>6315	Callee	VectorAdd
>6316	Identifier	VectorAdd
>6317	ExpressionStatement	 
>6318	CallExpression	VectorAdd ( e -> mins , pe -> origin , mins )
>6319	ArgumentList	e -> mins
>6320	Argument	mins
>6321	Identifier	mins
>6322	Argument	pe -> origin
>6323	PtrMemberAccess	pe -> origin
>6324	Identifier	origin
>6325	Identifier	pe
>6326	Argument	e -> mins
>6327	PtrMemberAccess	e -> mins
>6328	Identifier	mins
>6329	Identifier	e
>6330	Callee	VectorAdd
>6331	Identifier	VectorAdd
>6332	IfStatement	if ( pe -> brushes . onext != & pe -> brushes )
>6333	CompoundStatement	 
>6334	ExpressionStatement	 
>6335	CallExpression	Sys_Printf ( \"Warning 
>6336	ArgumentList	\"Warning 
>6337	Argument	\"Warning 
>6338	PrimaryExpression	\"Warning 
>6339	Callee	Sys_Printf
>6340	Identifier	Sys_Printf
>6341	Condition	 
>6342	EqualityExpression	pe -> brushes . onext != & pe -> brushes
>6343	UnaryOp	& pe -> brushes
>6344	PtrMemberAccess	pe -> brushes
>6345	Identifier	brushes
>6346	Identifier	pe
>6347	UnaryOperator	&
>6348	MemberAccess	pe -> brushes . onext
>6349	Identifier	onext
>6350	PtrMemberAccess	pe -> brushes
>6351	Identifier	brushes
>6352	Identifier	pe
>6353	Condition	 
>6354	PtrMemberAccess	e -> fixedsize
>6355	Identifier	fixedsize
>6356	Identifier	e
>6357	ExpressionStatement	 
>6358	AssignmentExpr	pe -> eclass = e
>6359	Identifier	e
>6360	PtrMemberAccess	pe -> eclass
>6361	Identifier	eclass
>6362	Identifier	pe
>6363	ExpressionStatement	 
>6364	AssignmentExpr	e = Eclass_ForName ( ValueForKey ( pe , \"classname\" ) , has_brushes )
>6365	CallExpression	Eclass_ForName ( ValueForKey ( pe , \"classname\" ) , has_brushes )
>6366	ArgumentList	ValueForKey ( pe , \"classname\" )
>6367	Argument	has_brushes
>6368	Identifier	has_brushes
>6369	Argument	ValueForKey ( pe , \"classname\" )
>6370	CallExpression	ValueForKey ( pe , \"classname\" )
>6371	ArgumentList	pe
>6372	Argument	\"classname\"
>6373	PrimaryExpression	\"classname\"
>6374	Argument	pe
>6375	Identifier	pe
>6376	Callee	ValueForKey
>6377	Identifier	ValueForKey
>6378	Callee	Eclass_ForName
>6379	Identifier	Eclass_ForName
>6380	Identifier	e
>6381	IfStatement	if ( pe -> brushes . onext == & pe -> brushes )
>6382	ElseStatement	else
>6383	ExpressionStatement	 
>6384	AssignmentExpr	has_brushes = true
>6385	Identifier	true
>6386	Identifier	has_brushes
>6387	ExpressionStatement	 
>6388	AssignmentExpr	has_brushes = false
>6389	Identifier	false
>6390	Identifier	has_brushes
>6391	Condition	 
>6392	EqualityExpression	pe -> brushes . onext == & pe -> brushes
>6393	UnaryOp	& pe -> brushes
>6394	PtrMemberAccess	pe -> brushes
>6395	Identifier	brushes
>6396	Identifier	pe
>6397	UnaryOperator	&
>6398	MemberAccess	pe -> brushes . onext
>6399	Identifier	onext
>6400	PtrMemberAccess	pe -> brushes
>6401	Identifier	brushes
>6402	Identifier	pe
>6403	ExpressionStatement	 
>6404	CallExpression	GetVectorForKey ( pe , \"origin\" , pe -> origin )
>6405	ArgumentList	pe
>6406	Argument	pe -> origin
>6407	PtrMemberAccess	pe -> origin
>6408	Identifier	origin
>6409	Identifier	pe
>6410	Argument	\"origin\"
>6411	PrimaryExpression	\"origin\"
>6412	Argument	pe
>6413	Identifier	pe
>6414	Callee	GetVectorForKey
>6415	Identifier	GetVectorForKey
>6416	ExpressionStatement	 
>6417	Identifier	vpEntity
>6418	Statement	 
>6419	Statement	 
>6420	Statement	 
>6421	Statement	 
>6422	Statement	 
>6423	Statement	 
>6424	Statement	 
>6425	ExpressionStatement	 
>6426	CallExpression	m_EntityHandles . RemoveAt ( i )
>6427	ArgumentList	i
>6428	Argument	i
>6429	Identifier	i
>6430	Callee	m_EntityHandles . RemoveAt
>6431	MemberAccess	m_EntityHandles . RemoveAt
>6432	Identifier	RemoveAt
>6433	Identifier	m_EntityHandles
>6434	Condition	 
>6435	EqualityExpression	vpEntity == m_EntityHandles . GetAt ( i )
>6436	CallExpression	m_EntityHandles . GetAt ( i )
>6437	ArgumentList	i
>6438	Argument	i
>6439	Identifier	i
>6440	Callee	m_EntityHandles . GetAt
>6441	MemberAccess	m_EntityHandles . GetAt
>6442	Identifier	GetAt
>6443	Identifier	m_EntityHandles
>6444	Identifier	vpEntity
>6445	IncDecOp	 
>6446	IncDec	++
>6447	Identifier	i
>6448	Condition	 
>6449	RelationalExpression	i < m_EntityHandles . GetSize ( )
>6450	CallExpression	m_EntityHandles . GetSize ( )
>6451	ArgumentList	 
>6452	Callee	m_EntityHandles . GetSize
>6453	MemberAccess	m_EntityHandles . GetSize
>6454	Identifier	GetSize
>6455	Identifier	m_EntityHandles
>6456	Identifier	i
>6457	ForInit	 
>6458	IdentifierDeclStatement	int i = 0 ;
>6459	IdentifierDecl	i = 0
>6460	AssignmentExpr	i = 0
>6461	PrimaryExpression	0
>6462	Identifier	i
>6463	Identifier	i
>6464	IdentifierDeclType	int
>6465	IdentifierDeclStatement	 
>6466	IdentifierDecl	has_brushes
>6467	Identifier	has_brushes
>6468	IdentifierDeclType	bool
>6469	IdentifierDeclStatement	 
>6470	IdentifierDecl	maxs
>6471	Identifier	maxs
>6472	IdentifierDeclType	vec3_t
>6473	IdentifierDecl	mins
>6474	Identifier	mins
>6475	IdentifierDeclType	vec3_t
>6476	IdentifierDeclStatement	 
>6477	IdentifierDecl	* b
>6478	Identifier	b
>6479	IdentifierDeclType	brush_t *
>6480	IdentifierDeclStatement	 
>6481	IdentifierDecl	* e
>6482	Identifier	e
>6483	IdentifierDeclType	eclass_t *
>6484	IdentifierDeclStatement	 
>6485	IdentifierDecl	* pe
>6486	Identifier	pe
>6487	IdentifierDeclType	entity_t *
>6571	FunctionDef	QERApp_SetScreenUpdate (int bScreenUpdates)
>6572	ParameterList	int bScreenUpdates
>6573	Parameter	 
>6574	Identifier	bScreenUpdates
>6575	ParameterType	int
>6576	ReturnType	void WINAPI
>6577	CompoundStatement	 
>6578	ExpressionStatement	 
>6579	AssignmentExpr	g_bScreenUpdates = bScreenUpdates
>6580	Identifier	bScreenUpdates
>6581	Identifier	g_bScreenUpdates
>6587	FunctionDef	QERApp_QeglobalsTexturewin ()
>6588	ParameterList	 
>6589	ReturnType	WINAPI
>6590	CompoundStatement	 
>6591	ReturnStatement	 
>6592	UnaryOp	& g_qeglobals . d_texturewin
>6593	MemberAccess	g_qeglobals . d_texturewin
>6594	Identifier	d_texturewin
>6595	Identifier	g_qeglobals
>6596	UnaryOperator	&
>6603	FunctionDef	CPlugInManager 
>6604	ParameterList	 
>6605	ReturnType	_QERTextureInfo *
>6606	CompoundStatement	 
>6607	IfStatement	if ( m_pTexturePlug != NULL )
>6608	ElseStatement	else
>6609	CompoundStatement	 
>6610	ReturnStatement	 
>6611	Identifier	NULL
>6612	CompoundStatement	 
>6613	ReturnStatement	 
>6614	CallExpression	m_pTexturePlug -> getTextureInfo ( )
>6615	ArgumentList	 
>6616	Callee	m_pTexturePlug -> getTextureInfo
>6617	PtrMemberAccess	m_pTexturePlug -> getTextureInfo
>6618	Identifier	getTextureInfo
>6619	Identifier	m_pTexturePlug
>6620	Condition	 
>6621	EqualityExpression	m_pTexturePlug != NULL
>6622	Identifier	NULL
>6623	Identifier	m_pTexturePlug
>6631	FunctionDef	CPlugInManager 
>6632	ParameterList	 
>6633	ReturnType	LPVOID
>6634	CompoundStatement	 
>6635	IfStatement	if ( m_pSurfaceListPlug != NULL )
>6636	ElseStatement	else
>6637	CompoundStatement	 
>6638	ReturnStatement	 
>6639	Identifier	NULL
>6640	CompoundStatement	 
>6641	ReturnStatement	 
>6642	CallExpression	m_pSurfaceListPlug -> getSurfaceFlags ( )
>6643	ArgumentList	 
>6644	Callee	m_pSurfaceListPlug -> getSurfaceFlags
>6645	PtrMemberAccess	m_pSurfaceListPlug -> getSurfaceFlags
>6646	Identifier	getSurfaceFlags
>6647	Identifier	m_pSurfaceListPlug
>6648	Condition	 
>6649	EqualityExpression	m_pSurfaceListPlug != NULL
>6650	Identifier	NULL
>6651	Identifier	m_pSurfaceListPlug
>6659	FunctionDef	CPlugInManager 
>6660	ParameterList	const char * pFilename
>6661	Parameter	 
>6662	Identifier	pFilename
>6663	ParameterType	const char *
>6664	ReturnType	void
>6665	CompoundStatement	 
>6666	IfStatement	if ( m_pTexturePlug != NULL )
>6667	CompoundStatement	 
>6668	ExpressionStatement	 
>6669	CallExpression	m_pTexturePlug -> loadTexture ( pFilename )
>6670	ArgumentList	pFilename
>6671	Argument	pFilename
>6672	Identifier	pFilename
>6673	Callee	m_pTexturePlug -> loadTexture
>6674	PtrMemberAccess	m_pTexturePlug -> loadTexture
>6675	Identifier	loadTexture
>6676	Identifier	m_pTexturePlug
>6677	Condition	 
>6678	EqualityExpression	m_pTexturePlug != NULL
>6679	Identifier	NULL
>6680	Identifier	m_pTexturePlug
>6687	FunctionDef	QERApp_GetSelectedPatch ()
>6688	ParameterList	 
>6689	ReturnType	WINAPI
>6690	CompoundStatement	 
>6691	ReturnStatement	 
>6692	Identifier	NULL
>6693	ExpressionStatement	 
>6694	CallExpression	Sys_Printf ( \"WARNING
>6695	ArgumentList	\"WARNING
>6696	Argument	\"WARNING
>6697	PrimaryExpression	\"WARNING
>6698	Callee	Sys_Printf
>6699	Identifier	Sys_Printf
>6700	ForStatement	for ( brush_t * pb = selected_brushes . next ; pb != & selected_brushes ; pb = pb -> next )
>6701	CompoundStatement	 
>6702	IfStatement	if ( pb -> patchBrush )
>6703	CompoundStatement	 
>6704	ReturnStatement	 
>6705	PtrMemberAccess	pb -> pPatch
>6706	Identifier	pPatch
>6707	Identifier	pb
>6708	Condition	 
>6709	PtrMemberAccess	pb -> patchBrush
>6710	Identifier	patchBrush
>6711	Identifier	pb
>6712	AssignmentExpr	 
>6713	PtrMemberAccess	pb -> next
>6714	Identifier	next
>6715	Identifier	pb
>6716	Identifier	pb
>6717	Condition	 
>6718	EqualityExpression	pb != & selected_brushes
>6719	UnaryOp	& selected_brushes
>6720	Identifier	selected_brushes
>6721	UnaryOperator	&
>6722	Identifier	pb
>6723	ForInit	 
>6724	IdentifierDeclStatement	brush_t * pb = selected_brushes . next ;
>6725	IdentifierDecl	* pb = selected_brushes . next
>6726	AssignmentExpr	* pb = selected_brushes . next
>6727	MemberAccess	selected_brushes . next
>6728	Identifier	next
>6729	Identifier	selected_brushes
>6730	Identifier	pb
>6731	Identifier	pb
>6732	IdentifierDeclType	brush_t *
>6745	FunctionDef	QERApp_GetGamePath ()
>6746	ParameterList	 
>6747	ReturnType	WINAPI
>6748	CompoundStatement	 
>6749	ReturnStatement	 
>6750	CallExpression	g_PrefsDlg . m_strQuake2 . GetBuffer ( 0 )
>6751	ArgumentList	0
>6752	Argument	0
>6753	PrimaryExpression	0
>6754	Callee	g_PrefsDlg . m_strQuake2 . GetBuffer
>6755	MemberAccess	g_PrefsDlg . m_strQuake2 . GetBuffer
>6756	Identifier	GetBuffer
>6757	MemberAccess	g_PrefsDlg . m_strQuake2
>6758	Identifier	m_strQuake2
>6759	Identifier	g_PrefsDlg
>6766	FunctionDef	QERApp_GetQERPath ()
>6767	ParameterList	 
>6768	ReturnType	WINAPI
>6769	CompoundStatement	 
>6770	ReturnStatement	 
>6771	CallExpression	g_strAppPath . GetBuffer ( 0 )
>6772	ArgumentList	0
>6773	Argument	0
>6774	PrimaryExpression	0
>6775	Callee	g_strAppPath . GetBuffer
>6776	MemberAccess	g_strAppPath . GetBuffer
>6777	Identifier	GetBuffer
>6778	Identifier	g_strAppPath
>6784	FunctionDef	QERApp_AllocateActivePatchHandles ()
>6785	ParameterList	 
>6786	ReturnType	int WINAPI
>6787	CompoundStatement	 
>6788	ReturnStatement	 
>6789	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . AllocateActivePatchHandles ( )
>6790	ArgumentList	 
>6791	Callee	g_pParentWnd -> GetPlugInMgr ( ) . AllocateActivePatchHandles
>6792	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . AllocateActivePatchHandles
>6793	Identifier	AllocateActivePatchHandles
>6794	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>6795	ArgumentList	 
>6796	Callee	g_pParentWnd -> GetPlugInMgr
>6797	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>6798	Identifier	GetPlugInMgr
>6799	Identifier	g_pParentWnd
>6800	ExpressionStatement	 
>6801	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>6802	ArgumentList	AfxGetStaticModuleState ( )
>6803	Argument	AfxGetStaticModuleState ( )
>6804	CallExpression	AfxGetStaticModuleState ( )
>6805	ArgumentList	 
>6806	Callee	AfxGetStaticModuleState
>6807	Identifier	AfxGetStaticModuleState
>6808	Callee	AFX_MANAGE_STATE
>6809	Identifier	AFX_MANAGE_STATE
>6818	FunctionDef	CPlugInManager 
>6819	ParameterList	 
>6820	ReturnType	int
>6821	CompoundStatement	 
>6822	ReturnStatement	 
>6823	Identifier	n
>6824	ForStatement	for ( brush_t * pb = active_brushes . next ; pb != & active_brushes ; pb = pb -> next )
>6825	CompoundStatement	 
>6826	IfStatement	if ( pb -> patchBrush )
>6827	CompoundStatement	 
>6828	ExpressionStatement	 
>6829	CallExpression	m_PatchesHandles . Add ( pb )
>6830	ArgumentList	pb
>6831	Argument	pb
>6832	Identifier	pb
>6833	Callee	m_PatchesHandles . Add
>6834	MemberAccess	m_PatchesHandles . Add
>6835	Identifier	Add
>6836	Identifier	m_PatchesHandles
>6837	ExpressionStatement	 
>6838	IncDecOp	n ++
>6839	IncDec	++
>6840	Identifier	n
>6841	Condition	 
>6842	PtrMemberAccess	pb -> patchBrush
>6843	Identifier	patchBrush
>6844	Identifier	pb
>6845	AssignmentExpr	 
>6846	PtrMemberAccess	pb -> next
>6847	Identifier	next
>6848	Identifier	pb
>6849	Identifier	pb
>6850	Condition	 
>6851	EqualityExpression	pb != & active_brushes
>6852	UnaryOp	& active_brushes
>6853	Identifier	active_brushes
>6854	UnaryOperator	&
>6855	Identifier	pb
>6856	ForInit	 
>6857	IdentifierDeclStatement	brush_t * pb = active_brushes . next ;
>6858	IdentifierDecl	* pb = active_brushes . next
>6859	AssignmentExpr	* pb = active_brushes . next
>6860	MemberAccess	active_brushes . next
>6861	Identifier	next
>6862	Identifier	active_brushes
>6863	Identifier	pb
>6864	Identifier	pb
>6865	IdentifierDeclType	brush_t *
>6866	IdentifierDeclStatement	 
>6867	IdentifierDecl	n = 0
>6868	AssignmentExpr	n = 0
>6869	PrimaryExpression	0
>6870	Identifier	n
>6871	Identifier	n
>6872	IdentifierDeclType	int
>6885	FunctionDef	QERApp_AllocateSelectedPatchHandles ()
>6886	ParameterList	 
>6887	ReturnType	int WINAPI
>6888	CompoundStatement	 
>6889	ReturnStatement	 
>6890	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . AllocateSelectedPatchHandles ( )
>6891	ArgumentList	 
>6892	Callee	g_pParentWnd -> GetPlugInMgr ( ) . AllocateSelectedPatchHandles
>6893	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . AllocateSelectedPatchHandles
>6894	Identifier	AllocateSelectedPatchHandles
>6895	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>6896	ArgumentList	 
>6897	Callee	g_pParentWnd -> GetPlugInMgr
>6898	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>6899	Identifier	GetPlugInMgr
>6900	Identifier	g_pParentWnd
>6901	ExpressionStatement	 
>6902	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>6903	ArgumentList	AfxGetStaticModuleState ( )
>6904	Argument	AfxGetStaticModuleState ( )
>6905	CallExpression	AfxGetStaticModuleState ( )
>6906	ArgumentList	 
>6907	Callee	AfxGetStaticModuleState
>6908	Identifier	AfxGetStaticModuleState
>6909	Callee	AFX_MANAGE_STATE
>6910	Identifier	AFX_MANAGE_STATE
>6919	FunctionDef	CPlugInManager 
>6920	ParameterList	 
>6921	ReturnType	int
>6922	CompoundStatement	 
>6923	ReturnStatement	 
>6924	Identifier	n
>6925	ForStatement	for ( brush_t * pb = selected_brushes . next ; pb != & selected_brushes ; pb = pb -> next )
>6926	CompoundStatement	 
>6927	IfStatement	if ( pb -> patchBrush )
>6928	CompoundStatement	 
>6929	ExpressionStatement	 
>6930	CallExpression	m_PatchesHandles . Add ( pb )
>6931	ArgumentList	pb
>6932	Argument	pb
>6933	Identifier	pb
>6934	Callee	m_PatchesHandles . Add
>6935	MemberAccess	m_PatchesHandles . Add
>6936	Identifier	Add
>6937	Identifier	m_PatchesHandles
>6938	ExpressionStatement	 
>6939	IncDecOp	n ++
>6940	IncDec	++
>6941	Identifier	n
>6942	Condition	 
>6943	PtrMemberAccess	pb -> patchBrush
>6944	Identifier	patchBrush
>6945	Identifier	pb
>6946	AssignmentExpr	 
>6947	PtrMemberAccess	pb -> next
>6948	Identifier	next
>6949	Identifier	pb
>6950	Identifier	pb
>6951	Condition	 
>6952	EqualityExpression	pb != & selected_brushes
>6953	UnaryOp	& selected_brushes
>6954	Identifier	selected_brushes
>6955	UnaryOperator	&
>6956	Identifier	pb
>6957	ForInit	 
>6958	IdentifierDeclStatement	brush_t * pb = selected_brushes . next ;
>6959	IdentifierDecl	* pb = selected_brushes . next
>6960	AssignmentExpr	* pb = selected_brushes . next
>6961	MemberAccess	selected_brushes . next
>6962	Identifier	next
>6963	Identifier	selected_brushes
>6964	Identifier	pb
>6965	Identifier	pb
>6966	IdentifierDeclType	brush_t *
>6967	IdentifierDeclStatement	 
>6968	IdentifierDecl	n = 0
>6969	AssignmentExpr	n = 0
>6970	PrimaryExpression	0
>6971	Identifier	n
>6972	Identifier	n
>6973	IdentifierDeclType	int
>6986	FunctionDef	QERApp_ReleasePatchHandles ()
>6987	ParameterList	 
>6988	ReturnType	void WINAPI
>6989	CompoundStatement	 
>6990	ExpressionStatement	 
>6991	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . ReleasePatchesHandles ( )
>6992	ArgumentList	 
>6993	Callee	g_pParentWnd -> GetPlugInMgr ( ) . ReleasePatchesHandles
>6994	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . ReleasePatchesHandles
>6995	Identifier	ReleasePatchesHandles
>6996	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>6997	ArgumentList	 
>6998	Callee	g_pParentWnd -> GetPlugInMgr
>6999	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>7000	Identifier	GetPlugInMgr
>7001	Identifier	g_pParentWnd
>7002	ExpressionStatement	 
>7003	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>7004	ArgumentList	AfxGetStaticModuleState ( )
>7005	Argument	AfxGetStaticModuleState ( )
>7006	CallExpression	AfxGetStaticModuleState ( )
>7007	ArgumentList	 
>7008	Callee	AfxGetStaticModuleState
>7009	Identifier	AfxGetStaticModuleState
>7010	Callee	AFX_MANAGE_STATE
>7011	Identifier	AFX_MANAGE_STATE
>7019	FunctionDef	QERApp_GetPatchData (int index)
>7020	ParameterList	int index
>7021	Parameter	 
>7022	Identifier	index
>7023	ParameterType	int
>7024	ReturnType	WINAPI
>7025	CompoundStatement	 
>7026	ReturnStatement	 
>7027	Identifier	NULL
>7028	IfStatement	if ( pPatch )
>7029	CompoundStatement	 
>7030	ReturnStatement	 
>7031	UnaryOp	& patch
>7032	Identifier	patch
>7033	UnaryOperator	&
>7034	ExpressionStatement	 
>7035	CallExpression	memcpy ( & patch , pPatch , sizeof ( patchMesh_t ) )
>7036	ArgumentList	& patch
>7037	Argument	sizeof ( patchMesh_t )
>7038	SizeofExpr	sizeof ( patchMesh_t )
>7039	SizeofOperand	patchMesh_t
>7040	Sizeof	sizeof
>7041	Argument	pPatch
>7042	Identifier	pPatch
>7043	Argument	& patch
>7044	UnaryOp	& patch
>7045	Identifier	patch
>7046	UnaryOperator	&
>7047	Callee	memcpy
>7048	Identifier	memcpy
>7049	Condition	 
>7050	Identifier	pPatch
>7051	IdentifierDeclStatement	 
>7052	IdentifierDecl	* pPatch = g_pParentWnd -> GetPlugInMgr ( ) . FindPatchHandle ( index )
>7053	AssignmentExpr	* pPatch = g_pParentWnd -> GetPlugInMgr ( ) . FindPatchHandle ( index )
>7054	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . FindPatchHandle ( index )
>7055	ArgumentList	index
>7056	Argument	index
>7057	Identifier	index
>7058	Callee	g_pParentWnd -> GetPlugInMgr ( ) . FindPatchHandle
>7059	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . FindPatchHandle
>7060	Identifier	FindPatchHandle
>7061	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>7062	ArgumentList	 
>7063	Callee	g_pParentWnd -> GetPlugInMgr
>7064	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>7065	Identifier	GetPlugInMgr
>7066	Identifier	g_pParentWnd
>7067	Identifier	pPatch
>7068	Identifier	pPatch
>7069	IdentifierDeclType	patchMesh_t *
>7070	IdentifierDeclStatement	 
>7071	IdentifierDecl	patch
>7072	Identifier	patch
>7073	IdentifierDeclType	patchMesh_t
>7074	Statement	 
>7075	ExpressionStatement	 
>7076	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>7077	ArgumentList	AfxGetStaticModuleState ( )
>7078	Argument	AfxGetStaticModuleState ( )
>7079	CallExpression	AfxGetStaticModuleState ( )
>7080	ArgumentList	 
>7081	Callee	AfxGetStaticModuleState
>7082	Identifier	AfxGetStaticModuleState
>7083	Callee	AFX_MANAGE_STATE
>7084	Identifier	AFX_MANAGE_STATE
>7098	FunctionDef	QERApp_DeletePatch (int index)
>7099	ParameterList	int index
>7100	Parameter	 
>7101	Identifier	index
>7102	ParameterType	int
>7103	ReturnType	void WINAPI
>7104	CompoundStatement	 
>7105	ExpressionStatement	 
>7106	CallExpression	Sys_Printf ( \"Warning
>7107	ArgumentList	\"Warning
>7108	Argument	\"Warning
>7109	PrimaryExpression	\"Warning
>7110	Callee	Sys_Printf
>7111	Identifier	Sys_Printf
>7112	IfStatement	if ( pPatch )
>7113	CompoundStatement	 
>7114	IfStatement	if ( pb )
>7115	ExpressionStatement	 
>7116	CallExpression	Brush_Free ( pb )
>7117	ArgumentList	pb
>7118	Argument	pb
>7119	Identifier	pb
>7120	Callee	Brush_Free
>7121	Identifier	Brush_Free
>7122	Condition	 
>7123	Identifier	pb
>7124	ExpressionStatement	 
>7125	CallExpression	Patch_Delete ( pPatch )
>7126	ArgumentList	pPatch
>7127	Argument	pPatch
>7128	Identifier	pPatch
>7129	Callee	Patch_Delete
>7130	Identifier	Patch_Delete
>7131	IdentifierDeclStatement	 
>7132	IdentifierDecl	* pb = pPatch -> pSymbiot
>7133	AssignmentExpr	* pb = pPatch -> pSymbiot
>7134	PtrMemberAccess	pPatch -> pSymbiot
>7135	Identifier	pSymbiot
>7136	Identifier	pPatch
>7137	Identifier	pb
>7138	Identifier	pb
>7139	IdentifierDeclType	brush_t *
>7140	Condition	 
>7141	Identifier	pPatch
>7142	IdentifierDeclStatement	 
>7143	IdentifierDecl	* pPatch = g_pParentWnd -> GetPlugInMgr ( ) . FindPatchHandle ( index )
>7144	AssignmentExpr	* pPatch = g_pParentWnd -> GetPlugInMgr ( ) . FindPatchHandle ( index )
>7145	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . FindPatchHandle ( index )
>7146	ArgumentList	index
>7147	Argument	index
>7148	Identifier	index
>7149	Callee	g_pParentWnd -> GetPlugInMgr ( ) . FindPatchHandle
>7150	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . FindPatchHandle
>7151	Identifier	FindPatchHandle
>7152	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>7153	ArgumentList	 
>7154	Callee	g_pParentWnd -> GetPlugInMgr
>7155	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>7156	Identifier	GetPlugInMgr
>7157	Identifier	g_pParentWnd
>7158	Identifier	pPatch
>7159	Identifier	pPatch
>7160	IdentifierDeclType	patchMesh_t *
>7161	ExpressionStatement	 
>7162	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>7163	ArgumentList	AfxGetStaticModuleState ( )
>7164	Argument	AfxGetStaticModuleState ( )
>7165	CallExpression	AfxGetStaticModuleState ( )
>7166	ArgumentList	 
>7167	Callee	AfxGetStaticModuleState
>7168	Identifier	AfxGetStaticModuleState
>7169	Callee	AFX_MANAGE_STATE
>7170	Identifier	AFX_MANAGE_STATE
>7184	FunctionDef	QERApp_CreatePatchHandle ()
>7185	ParameterList	 
>7186	ReturnType	int WINAPI
>7187	CompoundStatement	 
>7188	ReturnStatement	 
>7189	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . CreatePatchHandle ( )
>7190	ArgumentList	 
>7191	Callee	g_pParentWnd -> GetPlugInMgr ( ) . CreatePatchHandle
>7192	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . CreatePatchHandle
>7193	Identifier	CreatePatchHandle
>7194	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>7195	ArgumentList	 
>7196	Callee	g_pParentWnd -> GetPlugInMgr
>7197	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>7198	Identifier	GetPlugInMgr
>7199	Identifier	g_pParentWnd
>7200	ExpressionStatement	 
>7201	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>7202	ArgumentList	AfxGetStaticModuleState ( )
>7203	Argument	AfxGetStaticModuleState ( )
>7204	CallExpression	AfxGetStaticModuleState ( )
>7205	ArgumentList	 
>7206	Callee	AfxGetStaticModuleState
>7207	Identifier	AfxGetStaticModuleState
>7208	Callee	AFX_MANAGE_STATE
>7209	Identifier	AFX_MANAGE_STATE
>7218	FunctionDef	CPlugInManager 
>7219	ParameterList	 
>7220	ReturnType	int
>7221	CompoundStatement	 
>7222	ReturnStatement	 
>7223	AdditiveExpression	m_PluginPatches . GetSize ( ) - 1
>7224	PrimaryExpression	1
>7225	CallExpression	m_PluginPatches . GetSize ( )
>7226	ArgumentList	 
>7227	Callee	m_PluginPatches . GetSize
>7228	MemberAccess	m_PluginPatches . GetSize
>7229	Identifier	GetSize
>7230	Identifier	m_PluginPatches
>7231	ExpressionStatement	 
>7232	AssignmentExpr	PatchesMode = EAllocatedPatches
>7233	Identifier	EAllocatedPatches
>7234	Identifier	PatchesMode
>7235	ExpressionStatement	 
>7236	CallExpression	m_PluginPatches . Add ( pPatch )
>7237	ArgumentList	pPatch
>7238	Argument	pPatch
>7239	Identifier	pPatch
>7240	Callee	m_PluginPatches . Add
>7241	MemberAccess	m_PluginPatches . Add
>7242	Identifier	Add
>7243	Identifier	m_PluginPatches
>7244	IdentifierDeclStatement	 
>7245	IdentifierDecl	* pPatch = MakeNewPatch ( )
>7246	AssignmentExpr	* pPatch = MakeNewPatch ( )
>7247	CallExpression	MakeNewPatch ( )
>7248	ArgumentList	 
>7249	Callee	MakeNewPatch
>7250	Identifier	MakeNewPatch
>7251	Identifier	pPatch
>7252	Identifier	pPatch
>7253	IdentifierDeclType	patchMesh_t *
>7263	FunctionDef	QERApp_CommitPatchHandleToMap (int index , patchMesh_t * pMesh , char * texName)
>7264	ParameterList	int index , patchMesh_t * pMesh , char * texName
>7265	Parameter	 
>7266	Identifier	texName
>7267	ParameterType	char *
>7268	Parameter	 
>7269	Identifier	pMesh
>7270	ParameterType	patchMesh_t *
>7271	Parameter	 
>7272	Identifier	index
>7273	ParameterType	int
>7274	ReturnType	void WINAPI
>7275	CompoundStatement	 
>7276	ExpressionStatement	 
>7277	CallExpression	g_pParentWnd -> GetPlugInMgr ( ) . CommitPatchHandleToMap ( index , pMesh , texName )
>7278	ArgumentList	index
>7279	Argument	texName
>7280	Identifier	texName
>7281	Argument	pMesh
>7282	Identifier	pMesh
>7283	Argument	index
>7284	Identifier	index
>7285	Callee	g_pParentWnd -> GetPlugInMgr ( ) . CommitPatchHandleToMap
>7286	MemberAccess	g_pParentWnd -> GetPlugInMgr ( ) . CommitPatchHandleToMap
>7287	Identifier	CommitPatchHandleToMap
>7288	CallExpression	g_pParentWnd -> GetPlugInMgr ( )
>7289	ArgumentList	 
>7290	Callee	g_pParentWnd -> GetPlugInMgr
>7291	PtrMemberAccess	g_pParentWnd -> GetPlugInMgr
>7292	Identifier	GetPlugInMgr
>7293	Identifier	g_pParentWnd
>7294	ExpressionStatement	 
>7295	CallExpression	AFX_MANAGE_STATE ( AfxGetStaticModuleState ( ) )
>7296	ArgumentList	AfxGetStaticModuleState ( )
>7297	Argument	AfxGetStaticModuleState ( )
>7298	CallExpression	AfxGetStaticModuleState ( )
>7299	ArgumentList	 
>7300	Callee	AfxGetStaticModuleState
>7301	Identifier	AfxGetStaticModuleState
>7302	Callee	AFX_MANAGE_STATE
>7303	Identifier	AFX_MANAGE_STATE
>7314	FunctionDef	CPlugInManager 
>7315	ParameterList	int index , patchMesh_t * pMesh , char * texName
>7316	Parameter	 
>7317	Identifier	texName
>7318	ParameterType	char *
>7319	Parameter	 
>7320	Identifier	pMesh
>7321	ParameterType	patchMesh_t *
>7322	Parameter	 
>7323	Identifier	index
>7324	ParameterType	int
>7325	ReturnType	void
>7326	CompoundStatement	 
>7327	IfStatement	if ( PatchesMode == EAllocatedPatches )
>7328	ElseStatement	else
>7329	CompoundStatement	 
>7330	ExpressionStatement	 
>7331	AssignmentExpr	pPatch -> bDirty = true
>7332	Identifier	true
>7333	PtrMemberAccess	pPatch -> bDirty
>7334	Identifier	bDirty
>7335	Identifier	pPatch
>7336	ExpressionStatement	 
>7337	CallExpression	memcpy ( pPatch -> ctrl , pMesh -> ctrl , sizeof ( drawVert_t ) * MAX_PATCH_HEIGHT * MAX_PATCH_WIDTH )
>7338	ArgumentList	pPatch -> ctrl
>7339	Argument	sizeof ( drawVert_t ) * MAX_PATCH_HEIGHT * MAX_PATCH_WIDTH
>7340	MultiplicativeExpression	sizeof ( drawVert_t ) * MAX_PATCH_HEIGHT * MAX_PATCH_WIDTH
>7341	MultiplicativeExpression	MAX_PATCH_HEIGHT * MAX_PATCH_WIDTH
>7342	Identifier	MAX_PATCH_WIDTH
>7343	Identifier	MAX_PATCH_HEIGHT
>7344	SizeofExpr	sizeof ( drawVert_t )
>7345	SizeofOperand	drawVert_t
>7346	Sizeof	sizeof
>7347	Argument	pMesh -> ctrl
>7348	PtrMemberAccess	pMesh -> ctrl
>7349	Identifier	ctrl
>7350	Identifier	pMesh
>7351	Argument	pPatch -> ctrl
>7352	PtrMemberAccess	pPatch -> ctrl
>7353	Identifier	ctrl
>7354	Identifier	pPatch
>7355	Callee	memcpy
>7356	Identifier	memcpy
>7357	ExpressionStatement	 
>7358	AssignmentExpr	pPatch -> type = pMesh -> type
>7359	PtrMemberAccess	pMesh -> type
>7360	Identifier	type
>7361	Identifier	pMesh
>7362	PtrMemberAccess	pPatch -> type
>7363	Identifier	type
>7364	Identifier	pPatch
>7365	ExpressionStatement	 
>7366	AssignmentExpr	pPatch -> value = pMesh -> value
>7367	PtrMemberAccess	pMesh -> value
>7368	Identifier	value
>7369	Identifier	pMesh
>7370	PtrMemberAccess	pPatch -> value
>7371	Identifier	value
>7372	Identifier	pPatch
>7373	ExpressionStatement	 
>7374	AssignmentExpr	pPatch -> flags = pMesh -> flags
>7375	PtrMemberAccess	pMesh -> flags
>7376	Identifier	flags
>7377	Identifier	pMesh
>7378	PtrMemberAccess	pPatch -> flags
>7379	Identifier	flags
>7380	Identifier	pPatch
>7381	ExpressionStatement	 
>7382	AssignmentExpr	pPatch -> contents = pMesh -> contents
>7383	PtrMemberAccess	pMesh -> contents
>7384	Identifier	contents
>7385	Identifier	pMesh
>7386	PtrMemberAccess	pPatch -> contents
>7387	Identifier	contents
>7388	Identifier	pPatch
>7389	ExpressionStatement	 
>7390	AssignmentExpr	pPatch -> height = pMesh -> height
>7391	PtrMemberAccess	pMesh -> height
>7392	Identifier	height
>7393	Identifier	pMesh
>7394	PtrMemberAccess	pPatch -> height
>7395	Identifier	height
>7396	Identifier	pPatch
>7397	ExpressionStatement	 
>7398	AssignmentExpr	pPatch -> width = pMesh -> width
>7399	PtrMemberAccess	pMesh -> width
>7400	Identifier	width
>7401	Identifier	pMesh
>7402	PtrMemberAccess	pPatch -> width
>7403	Identifier	width
>7404	Identifier	pPatch
>7405	IdentifierDeclStatement	 
>7406	IdentifierDecl	* pPatch = pBrush -> pPatch
>7407	AssignmentExpr	* pPatch = pBrush -> pPatch
>7408	PtrMemberAccess	pBrush -> pPatch
>7409	Identifier	pPatch
>7410	Identifier	pBrush
>7411	Identifier	pPatch
>7412	Identifier	pPatch
>7413	IdentifierDeclType	patchMesh_t *
>7414	ExpressionStatement	 
>7415	CallExpression	m_PatchesHandles . GetAt ( index )
>7416	ArgumentList	index
>7417	Argument	index
>7418	Identifier	index
>7419	Callee	m_PatchesHandles . GetAt
>7420	MemberAccess	m_PatchesHandles . GetAt
>7421	Identifier	GetAt
>7422	Identifier	m_PatchesHandles
>7423	Statement	 
>7424	Statement	 
>7425	Statement	 
>7426	Statement	 
>7427	Statement	 
>7428	Statement	 
>7429	Statement	 
>7430	Statement	 
>7431	Statement	 
>7432	CompoundStatement	 
>7433	ExpressionStatement	 
>7434	CallExpression	Sys_UpdateWindows ( W_ALL )
>7435	ArgumentList	W_ALL
>7436	Argument	W_ALL
>7437	Identifier	W_ALL
>7438	Callee	Sys_UpdateWindows
>7439	Identifier	Sys_UpdateWindows
>7440	ExpressionStatement	 
>7441	AssignmentExpr	g_bScreenUpdates = true
>7442	Identifier	true
>7443	Identifier	g_bScreenUpdates
>7444	ExpressionStatement	 
>7445	CallExpression	Select_Brush ( pb )
>7446	ArgumentList	pb
>7447	Argument	pb
>7448	Identifier	pb
>7449	Callee	Select_Brush
>7450	Identifier	Select_Brush
>7451	IdentifierDeclStatement	 
>7452	IdentifierDecl	* pb = AddBrushForPatch ( pPatch , true )
>7453	AssignmentExpr	* pb = AddBrushForPatch ( pPatch , true )
>7454	CallExpression	AddBrushForPatch ( pPatch , true )
>7455	ArgumentList	pPatch
>7456	Argument	true
>7457	Identifier	true
>7458	Argument	pPatch
>7459	Identifier	pPatch
>7460	Callee	AddBrushForPatch
>7461	Identifier	AddBrushForPatch
>7462	Identifier	pb
>7463	Identifier	pb
>7464	IdentifierDeclType	brush_t *
>7465	ExpressionStatement	 
>7466	AssignmentExpr	g_bScreenUpdates = false
>7467	Identifier	false
>7468	Identifier	g_bScreenUpdates
>7469	IfStatement	if ( ! pPatch -> d_texture )
>7470	CompoundStatement	 
>7471	IfStatement	if ( ! pPatch -> d_texture )
>7472	CompoundStatement	 
>7473	ExpressionStatement	 
>7474	AssignmentExpr	pPatch -> d_texture = notexture
>7475	Identifier	notexture
>7476	PtrMemberAccess	pPatch -> d_texture
>7477	Identifier	d_texture
>7478	Identifier	pPatch
>7479	ExpressionStatement	 
>7480	CallExpression	Sys_Printf ( \"WARNING
>7481	ArgumentList	\"WARNING
>7482	Argument	\"WARNING
>7483	PrimaryExpression	\"WARNING
>7484	Callee	Sys_Printf
>7485	Identifier	Sys_Printf
>7486	Condition	 
>7487	UnaryOp	! pPatch -> d_texture
>7488	PtrMemberAccess	pPatch -> d_texture
>7489	Identifier	d_texture
>7490	Identifier	pPatch
>7491	UnaryOperator	!
>7492	ExpressionStatement	 
>7493	AssignmentExpr	pPatch -> d_texture = Texture_ForName ( g_qeglobals . d_texturewin . texdef . name )
>7494	CallExpression	Texture_ForName ( g_qeglobals . d_texturewin . texdef . name )
>7495	ArgumentList	g_qeglobals . d_texturewin . texdef . name
>7496	Argument	g_qeglobals . d_texturewin . texdef . name
>7497	MemberAccess	g_qeglobals . d_texturewin . texdef . name
>7498	Identifier	name
>7499	MemberAccess	g_qeglobals . d_texturewin . texdef
>7500	Identifier	texdef
>7501	MemberAccess	g_qeglobals . d_texturewin
>7502	Identifier	d_texturewin
>7503	Identifier	g_qeglobals
>7504	Callee	Texture_ForName
>7505	Identifier	Texture_ForName
>7506	PtrMemberAccess	pPatch -> d_texture
>7507	Identifier	d_texture
>7508	Identifier	pPatch
>7509	Condition	 
>7510	UnaryOp	! pPatch -> d_texture
>7511	PtrMemberAccess	pPatch -> d_texture
>7512	Identifier	d_texture
>7513	Identifier	pPatch
>7514	UnaryOperator	!
>7515	IfStatement	if ( texName )
>7516	ExpressionStatement	 
>7517	AssignmentExpr	pPatch -> d_texture = Texture_ForName ( texName )
>7518	CallExpression	Texture_ForName ( texName )
>7519	ArgumentList	texName
>7520	Argument	texName
>7521	Identifier	texName
>7522	Callee	Texture_ForName
>7523	Identifier	Texture_ForName
>7524	PtrMemberAccess	pPatch -> d_texture
>7525	Identifier	d_texture
>7526	Identifier	pPatch
>7527	Condition	 
>7528	Identifier	texName
>7529	ExpressionStatement	 
>7530	CallExpression	memcpy ( pPatch , pMesh , sizeof ( patchMesh_t ) )
>7531	ArgumentList	pPatch
>7532	Argument	sizeof ( patchMesh_t )
>7533	SizeofExpr	sizeof ( patchMesh_t )
>7534	SizeofOperand	patchMesh_t
>7535	Sizeof	sizeof
>7536	Argument	pMesh
>7537	Identifier	pMesh
>7538	Argument	pPatch
>7539	Identifier	pPatch
>7540	Callee	memcpy
>7541	Identifier	memcpy
>7542	ExpressionStatement	 
>7543	CallExpression	m_PluginPatches . GetAt ( index )
>7544	ArgumentList	index
>7545	Argument	index
>7546	Identifier	index
>7547	Callee	m_PluginPatches . GetAt
>7548	MemberAccess	m_PluginPatches . GetAt
>7549	Identifier	GetAt
>7550	Identifier	m_PluginPatches
>7551	Statement	 
>7552	Statement	 
>7553	Statement	 
>7554	Statement	 
>7555	Statement	 
>7556	Statement	 
>7557	Statement	 
>7558	Statement	 
>7559	Statement	 
>7560	Condition	 
>7561	EqualityExpression	PatchesMode == EAllocatedPatches
>7562	Identifier	EAllocatedPatches
>7563	Identifier	PatchesMode
>7610	FunctionDef	QERApp_RequestInterface (REFGUID refGUID , LPVOID pInterface)
>7611	ParameterList	REFGUID refGUID , LPVOID pInterface
>7612	Parameter	 
>7613	Identifier	pInterface
>7614	ParameterType	LPVOID
>7615	Parameter	 
>7616	Identifier	refGUID
>7617	ParameterType	REFGUID
>7618	ReturnType	int WINAPI
>7619	CompoundStatement	 
>7620	ReturnStatement	 
>7621	PrimaryExpression	0
>7622	IfStatement	if ( IsEqualGUID ( refGUID , QERQglTable_GUID ) )
>7623	ElseStatement	else
>7624	IfStatement	if ( IsEqualGUID ( refGUID , QERSelectedFaceTable_GUID ) )
>7625	ElseStatement	else
>7626	IfStatement	if ( IsEqualGUID ( refGUID , QERPluginEntitiesTable_GUID ) )
>7627	ElseStatement	else
>7628	IfStatement	if ( IsEqualGUID ( refGUID , QERScripLibTable_GUID ) )
>7629	ElseStatement	else
>7630	IfStatement	if ( IsEqualGUID ( refGUID , QERAppSurfaceTable_GUID ) )
>7631	ElseStatement	else
>7632	IfStatement	if ( IsEqualGUID ( refGUID , QERAppBSPFrontendTable_GUID ) )
>7633	ElseStatement	else
>7634	IfStatement	if ( IsEqualGUID ( refGUID , QERMessaging_GUID ) )
>7635	ElseStatement	else
>7636	IfStatement	if ( IsEqualGUID ( refGUID , QERShadersTable_GUID ) )
>7637	CompoundStatement	 
>7638	ReturnStatement	 
>7639	PrimaryExpression	1
>7640	ExpressionStatement	 
>7641	AssignmentExpr	pShadersTable -> m_pfnTryTextureForName = QERApp_TryTextureForName
>7642	Identifier	QERApp_TryTextureForName
>7643	PtrMemberAccess	pShadersTable -> m_pfnTryTextureForName
>7644	Identifier	m_pfnTryTextureForName
>7645	Identifier	pShadersTable
>7646	IfStatement	if ( pShadersTable -> m_nSize != sizeof ( _QERShadersTable ) )
>7647	CompoundStatement	 
>7648	ReturnStatement	 
>7649	PrimaryExpression	0
>7650	ExpressionStatement	 
>7651	CallExpression	Sys_Printf ( \"wring m_nSize in plugin-requested _QERShadersTable\n\" )
>7652	ArgumentList	\"wring m_nSize in plugin-requested _QERShadersTable\n\"
>7653	Argument	\"wring m_nSize in plugin-requested _QERShadersTable\n\"
>7654	PrimaryExpression	\"wring m_nSize in plugin-requested _QERShadersTable\n\"
>7655	Callee	Sys_Printf
>7656	Identifier	Sys_Printf
>7657	Condition	 
>7658	EqualityExpression	pShadersTable -> m_nSize != sizeof ( _QERShadersTable )
>7659	SizeofExpr	sizeof ( _QERShadersTable )
>7660	SizeofOperand	_QERShadersTable
>7661	Sizeof	sizeof
>7662	PtrMemberAccess	pShadersTable -> m_nSize
>7663	Identifier	m_nSize
>7664	Identifier	pShadersTable
>7665	ExpressionStatement	 
>7666	Identifier	pInterface
>7667	Statement	 
>7668	Statement	 
>7669	Statement	 
>7670	Statement	 
>7671	Statement	 
>7672	Statement	 
>7673	Statement	 
>7674	Statement	 
>7675	Statement	 
>7676	Condition	 
>7677	CallExpression	IsEqualGUID ( refGUID , QERShadersTable_GUID )
>7678	ArgumentList	refGUID
>7679	Argument	QERShadersTable_GUID
>7680	Identifier	QERShadersTable_GUID
>7681	Argument	refGUID
>7682	Identifier	refGUID
>7683	Callee	IsEqualGUID
>7684	Identifier	IsEqualGUID
>7685	CompoundStatement	 
>7686	ReturnStatement	 
>7687	PrimaryExpression	1
>7688	ExpressionStatement	 
>7689	AssignmentExpr	pMessagingTable -> m_pfnUnHookListener = QERApp_UnHookListener
>7690	Identifier	QERApp_UnHookListener
>7691	PtrMemberAccess	pMessagingTable -> m_pfnUnHookListener
>7692	Identifier	m_pfnUnHookListener
>7693	Identifier	pMessagingTable
>7694	ExpressionStatement	 
>7695	AssignmentExpr	pMessagingTable -> m_pfnHookListener = QERApp_HookListener
>7696	Identifier	QERApp_HookListener
>7697	PtrMemberAccess	pMessagingTable -> m_pfnHookListener
>7698	Identifier	m_pfnHookListener
>7699	Identifier	pMessagingTable
>7700	ExpressionStatement	 
>7701	AssignmentExpr	pMessagingTable -> m_pfnGetXYWndWrapper = QERApp_GetXYWndWrapper
>7702	Identifier	QERApp_GetXYWndWrapper
>7703	PtrMemberAccess	pMessagingTable -> m_pfnGetXYWndWrapper
>7704	Identifier	m_pfnGetXYWndWrapper
>7705	Identifier	pMessagingTable
>7706	ExpressionStatement	 
>7707	AssignmentExpr	pMessagingTable -> m_pfnUnHookWindow = QERApp_UnHookWindow
>7708	Identifier	QERApp_UnHookWindow
>7709	PtrMemberAccess	pMessagingTable -> m_pfnUnHookWindow
>7710	Identifier	m_pfnUnHookWindow
>7711	Identifier	pMessagingTable
>7712	ExpressionStatement	 
>7713	AssignmentExpr	pMessagingTable -> m_pfnHookWindow = QERApp_HookWindow
>7714	Identifier	QERApp_HookWindow
>7715	PtrMemberAccess	pMessagingTable -> m_pfnHookWindow
>7716	Identifier	m_pfnHookWindow
>7717	Identifier	pMessagingTable
>7718	IfStatement	if ( pMessagingTable -> m_nSize != sizeof ( _QERMessagingTable ) )
>7719	CompoundStatement	 
>7720	ReturnStatement	 
>7721	PrimaryExpression	0
>7722	ExpressionStatement	 
>7723	CallExpression	Sys_Printf ( \"wrong m_nSize in plugin-requested _QERMessagingTable\n\" )
>7724	ArgumentList	\"wrong m_nSize in plugin-requested _QERMessagingTable\n\"
>7725	Argument	\"wrong m_nSize in plugin-requested _QERMessagingTable\n\"
>7726	PrimaryExpression	\"wrong m_nSize in plugin-requested _QERMessagingTable\n\"
>7727	Callee	Sys_Printf
>7728	Identifier	Sys_Printf
>7729	Condition	 
>7730	EqualityExpression	pMessagingTable -> m_nSize != sizeof ( _QERMessagingTable )
>7731	SizeofExpr	sizeof ( _QERMessagingTable )
>7732	SizeofOperand	_QERMessagingTable
>7733	Sizeof	sizeof
>7734	PtrMemberAccess	pMessagingTable -> m_nSize
>7735	Identifier	m_nSize
>7736	Identifier	pMessagingTable
>7737	ExpressionStatement	 
>7738	Identifier	pInterface
>7739	Statement	 
>7740	Statement	 
>7741	Statement	 
>7742	Statement	 
>7743	Statement	 
>7744	Statement	 
>7745	Statement	 
>7746	Statement	 
>7747	Statement	 
>7748	Condition	 
>7749	CallExpression	IsEqualGUID ( refGUID , QERMessaging_GUID )
>7750	ArgumentList	refGUID
>7751	Argument	QERMessaging_GUID
>7752	Identifier	QERMessaging_GUID
>7753	Argument	refGUID
>7754	Identifier	refGUID
>7755	Callee	IsEqualGUID
>7756	Identifier	IsEqualGUID
>7757	CompoundStatement	 
>7758	ReturnStatement	 
>7759	PrimaryExpression	1
>7760	ExpressionStatement	 
>7761	AssignmentExpr	pBSPFrontendTable -> m_pfnLoadPointFile = & Pointfile_Check
>7762	UnaryOp	& Pointfile_Check
>7763	Identifier	Pointfile_Check
>7764	UnaryOperator	&
>7765	PtrMemberAccess	pBSPFrontendTable -> m_pfnLoadPointFile
>7766	Identifier	m_pfnLoadPointFile
>7767	Identifier	pBSPFrontendTable
>7768	ExpressionStatement	 
>7769	AssignmentExpr	pBSPFrontendTable -> m_pfnGetMapName = & QERApp_GetMapName
>7770	UnaryOp	& QERApp_GetMapName
>7771	Identifier	QERApp_GetMapName
>7772	UnaryOperator	&
>7773	PtrMemberAccess	pBSPFrontendTable -> m_pfnGetMapName
>7774	Identifier	m_pfnGetMapName
>7775	Identifier	pBSPFrontendTable
>7776	IfStatement	if ( pBSPFrontendTable -> m_nSize != sizeof ( _QERAppBSPFrontendTable ) )
>7777	CompoundStatement	 
>7778	ReturnStatement	 
>7779	PrimaryExpression	0
>7780	ExpressionStatement	 
>7781	CallExpression	Sys_Printf ( \"wrong m_nSize in plugin-requested _QERAppBSPFrontendTable\n\" )
>7782	ArgumentList	\"wrong m_nSize in plugin-requested _QERAppBSPFrontendTable\n\"
>7783	Argument	\"wrong m_nSize in plugin-requested _QERAppBSPFrontendTable\n\"
>7784	PrimaryExpression	\"wrong m_nSize in plugin-requested _QERAppBSPFrontendTable\n\"
>7785	Callee	Sys_Printf
>7786	Identifier	Sys_Printf
>7787	Condition	 
>7788	EqualityExpression	pBSPFrontendTable -> m_nSize != sizeof ( _QERAppBSPFrontendTable )
>7789	SizeofExpr	sizeof ( _QERAppBSPFrontendTable )
>7790	SizeofOperand	_QERAppBSPFrontendTable
>7791	Sizeof	sizeof
>7792	PtrMemberAccess	pBSPFrontendTable -> m_nSize
>7793	Identifier	m_nSize
>7794	Identifier	pBSPFrontendTable
>7795	ExpressionStatement	 
>7796	Identifier	pInterface
>7797	Statement	 
>7798	Statement	 
>7799	Statement	 
>7800	Statement	 
>7801	Statement	 
>7802	Statement	 
>7803	Statement	 
>7804	Statement	 
>7805	Statement	 
>7806	Condition	 
>7807	CallExpression	IsEqualGUID ( refGUID , QERAppBSPFrontendTable_GUID )
>7808	ArgumentList	refGUID
>7809	Argument	QERAppBSPFrontendTable_GUID
>7810	Identifier	QERAppBSPFrontendTable_GUID
>7811	Argument	refGUID
>7812	Identifier	refGUID
>7813	Callee	IsEqualGUID
>7814	Identifier	IsEqualGUID
>7815	CompoundStatement	 
>7816	ReturnStatement	 
>7817	PrimaryExpression	1
>7818	ExpressionStatement	 
>7819	AssignmentExpr	pSurfaceTable -> m_pfnGetTwoSelectedPatch = & QERApp_GetTwoSelectedPatch
>7820	UnaryOp	& QERApp_GetTwoSelectedPatch
>7821	Identifier	QERApp_GetTwoSelectedPatch
>7822	UnaryOperator	&
>7823	PtrMemberAccess	pSurfaceTable -> m_pfnGetTwoSelectedPatch
>7824	Identifier	m_pfnGetTwoSelectedPatch
>7825	Identifier	pSurfaceTable
>7826	ExpressionStatement	 
>7827	AssignmentExpr	pSurfaceTable -> m_pfnPatchRebuild = & Patch_Rebuild
>7828	UnaryOp	& Patch_Rebuild
>7829	Identifier	Patch_Rebuild
>7830	UnaryOperator	&
>7831	PtrMemberAccess	pSurfaceTable -> m_pfnPatchRebuild
>7832	Identifier	m_pfnPatchRebuild
>7833	Identifier	pSurfaceTable
>7834	ExpressionStatement	 
>7835	AssignmentExpr	pSurfaceTable -> m_pfnGetSelectedPatch = & QERApp_GetSelectedPatch
>7836	UnaryOp	& QERApp_GetSelectedPatch
>7837	Identifier	QERApp_GetSelectedPatch
>7838	UnaryOperator	&
>7839	PtrMemberAccess	pSurfaceTable -> m_pfnGetSelectedPatch
>7840	Identifier	m_pfnGetSelectedPatch
>7841	Identifier	pSurfaceTable
>7842	ExpressionStatement	 
>7843	AssignmentExpr	pSurfaceTable -> m_pfnQeglobalsTexturewin = & QERApp_QeglobalsTexturewin
>7844	UnaryOp	& QERApp_QeglobalsTexturewin
>7845	Identifier	QERApp_QeglobalsTexturewin
>7846	UnaryOperator	&
>7847	PtrMemberAccess	pSurfaceTable -> m_pfnQeglobalsTexturewin
>7848	Identifier	m_pfnQeglobalsTexturewin
>7849	Identifier	pSurfaceTable
>7850	ExpressionStatement	 
>7851	AssignmentExpr	pSurfaceTable -> m_pfnOnlyPatchesSelected = & OnlyPatchesSelected
>7852	UnaryOp	& OnlyPatchesSelected
>7853	Identifier	OnlyPatchesSelected
>7854	UnaryOperator	&
>7855	PtrMemberAccess	pSurfaceTable -> m_pfnOnlyPatchesSelected
>7856	Identifier	m_pfnOnlyPatchesSelected
>7857	Identifier	pSurfaceTable
>7858	ExpressionStatement	 
>7859	AssignmentExpr	pSurfaceTable -> m_pfnAnyPatchesSelected = & AnyPatchesSelected
>7860	UnaryOp	& AnyPatchesSelected
>7861	Identifier	AnyPatchesSelected
>7862	UnaryOperator	&
>7863	PtrMemberAccess	pSurfaceTable -> m_pfnAnyPatchesSelected
>7864	Identifier	m_pfnAnyPatchesSelected
>7865	Identifier	pSurfaceTable
>7866	IfStatement	if ( pSurfaceTable -> m_nSize != sizeof ( _QERAppSurfaceTable ) )
>7867	CompoundStatement	 
>7868	ReturnStatement	 
>7869	PrimaryExpression	0
>7870	ExpressionStatement	 
>7871	CallExpression	Sys_Printf ( \"wrong m_nSize in plugin-requested _QERAppSurfaceTable\n\" )
>7872	ArgumentList	\"wrong m_nSize in plugin-requested _QERAppSurfaceTable\n\"
>7873	Argument	\"wrong m_nSize in plugin-requested _QERAppSurfaceTable\n\"
>7874	PrimaryExpression	\"wrong m_nSize in plugin-requested _QERAppSurfaceTable\n\"
>7875	Callee	Sys_Printf
>7876	Identifier	Sys_Printf
>7877	Condition	 
>7878	EqualityExpression	pSurfaceTable -> m_nSize != sizeof ( _QERAppSurfaceTable )
>7879	SizeofExpr	sizeof ( _QERAppSurfaceTable )
>7880	SizeofOperand	_QERAppSurfaceTable
>7881	Sizeof	sizeof
>7882	PtrMemberAccess	pSurfaceTable -> m_nSize
>7883	Identifier	m_nSize
>7884	Identifier	pSurfaceTable
>7885	ExpressionStatement	 
>7886	Identifier	pInterface
>7887	Statement	 
>7888	Statement	 
>7889	Statement	 
>7890	Statement	 
>7891	Statement	 
>7892	Statement	 
>7893	Statement	 
>7894	Statement	 
>7895	Statement	 
>7896	Condition	 
>7897	CallExpression	IsEqualGUID ( refGUID , QERAppSurfaceTable_GUID )
>7898	ArgumentList	refGUID
>7899	Argument	QERAppSurfaceTable_GUID
>7900	Identifier	QERAppSurfaceTable_GUID
>7901	Argument	refGUID
>7902	Identifier	refGUID
>7903	Callee	IsEqualGUID
>7904	Identifier	IsEqualGUID
>7905	CompoundStatement	 
>7906	ReturnStatement	 
>7907	PrimaryExpression	1
>7908	ExpressionStatement	 
>7909	AssignmentExpr	pScripLibTable -> m_pfnUnGetToken = & UngetToken
>7910	UnaryOp	& UngetToken
>7911	Identifier	UngetToken
>7912	UnaryOperator	&
>7913	PtrMemberAccess	pScripLibTable -> m_pfnUnGetToken
>7914	Identifier	m_pfnUnGetToken
>7915	Identifier	pScripLibTable
>7916	ExpressionStatement	 
>7917	AssignmentExpr	pScripLibTable -> m_pfnToken = & QERApp_Token
>7918	UnaryOp	& QERApp_Token
>7919	Identifier	QERApp_Token
>7920	UnaryOperator	&
>7921	PtrMemberAccess	pScripLibTable -> m_pfnToken
>7922	Identifier	m_pfnToken
>7923	Identifier	pScripLibTable
>7924	ExpressionStatement	 
>7925	AssignmentExpr	pScripLibTable -> m_pfnGetToken = & GetToken
>7926	UnaryOp	& GetToken
>7927	Identifier	GetToken
>7928	UnaryOperator	&
>7929	PtrMemberAccess	pScripLibTable -> m_pfnGetToken
>7930	Identifier	m_pfnGetToken
>7931	Identifier	pScripLibTable
>7932	IfStatement	if ( pScripLibTable -> m_nSize != sizeof ( _QERScripLibTable ) )
>7933	CompoundStatement	 
>7934	ReturnStatement	 
>7935	PrimaryExpression	0
>7936	ExpressionStatement	 
>7937	CallExpression	Sys_Printf ( \"wrong m_nSize in plugin-requested _QERScripLibTable\n\" )
>7938	ArgumentList	\"wrong m_nSize in plugin-requested _QERScripLibTable\n\"
>7939	Argument	\"wrong m_nSize in plugin-requested _QERScripLibTable\n\"
>7940	PrimaryExpression	\"wrong m_nSize in plugin-requested _QERScripLibTable\n\"
>7941	Callee	Sys_Printf
>7942	Identifier	Sys_Printf
>7943	Condition	 
>7944	EqualityExpression	pScripLibTable -> m_nSize != sizeof ( _QERScripLibTable )
>7945	SizeofExpr	sizeof ( _QERScripLibTable )
>7946	SizeofOperand	_QERScripLibTable
>7947	Sizeof	sizeof
>7948	PtrMemberAccess	pScripLibTable -> m_nSize
>7949	Identifier	m_nSize
>7950	Identifier	pScripLibTable
>7951	ExpressionStatement	 
>7952	Identifier	pInterface
>7953	Statement	 
>7954	Statement	 
>7955	Statement	 
>7956	Statement	 
>7957	Statement	 
>7958	Statement	 
>7959	Statement	 
>7960	Statement	 
>7961	Statement	 
>7962	Condition	 
>7963	CallExpression	IsEqualGUID ( refGUID , QERScripLibTable_GUID )
>7964	ArgumentList	refGUID
>7965	Argument	QERScripLibTable_GUID
>7966	Identifier	QERScripLibTable_GUID
>7967	Argument	refGUID
>7968	Identifier	refGUID
>7969	Callee	IsEqualGUID
>7970	Identifier	IsEqualGUID
>7971	CompoundStatement	 
>7972	ReturnStatement	 
>7973	PrimaryExpression	1
>7974	ExpressionStatement	 
>7975	AssignmentExpr	pPluginEntitiesTable -> m_pfnEClassScanDir = & QERApp_EClassScanDir
>7976	UnaryOp	& QERApp_EClassScanDir
>7977	Identifier	QERApp_EClassScanDir
>7978	UnaryOperator	&
>7979	PtrMemberAccess	pPluginEntitiesTable -> m_pfnEClassScanDir
>7980	Identifier	m_pfnEClassScanDir
>7981	Identifier	pPluginEntitiesTable
>7982	IfStatement	if ( pPluginEntitiesTable -> m_nSize != sizeof ( _QERPluginEntitiesTable ) )
>7983	CompoundStatement	 
>7984	ReturnStatement	 
>7985	PrimaryExpression	0
>7986	ExpressionStatement	 
>7987	CallExpression	Sys_Printf ( \"wrong m_nSize in plugin-requested _QERPluginEntitiesTable interface\n\" )
>7988	ArgumentList	\"wrong m_nSize in plugin-requested _QERPluginEntitiesTable interface\n\"
>7989	Argument	\"wrong m_nSize in plugin-requested _QERPluginEntitiesTable interface\n\"
>7990	PrimaryExpression	\"wrong m_nSize in plugin-requested _QERPluginEntitiesTable interface\n\"
>7991	Callee	Sys_Printf
>7992	Identifier	Sys_Printf
>7993	Condition	 
>7994	EqualityExpression	pPluginEntitiesTable -> m_nSize != sizeof ( _QERPluginEntitiesTable )
>7995	SizeofExpr	sizeof ( _QERPluginEntitiesTable )
>7996	SizeofOperand	_QERPluginEntitiesTable
>7997	Sizeof	sizeof
>7998	PtrMemberAccess	pPluginEntitiesTable -> m_nSize
>7999	Identifier	m_nSize
>8000	Identifier	pPluginEntitiesTable
>8001	ExpressionStatement	 
>8002	Identifier	pInterface
>8003	Statement	 
>8004	Statement	 
>8005	Statement	 
>8006	Statement	 
>8007	Statement	 
>8008	Statement	 
>8009	Statement	 
>8010	Statement	 
>8011	Statement	 
>8012	Condition	 
>8013	CallExpression	IsEqualGUID ( refGUID , QERPluginEntitiesTable_GUID )
>8014	ArgumentList	refGUID
>8015	Argument	QERPluginEntitiesTable_GUID
>8016	Identifier	QERPluginEntitiesTable_GUID
>8017	Argument	refGUID
>8018	Identifier	refGUID
>8019	Callee	IsEqualGUID
>8020	Identifier	IsEqualGUID
>8021	CompoundStatement	 
>8022	ReturnStatement	 
>8023	PrimaryExpression	1
>8024	ExpressionStatement	 
>8025	AssignmentExpr	pSelectedFaceTable -> m_pfnSelect_SetTexture = & Select_SetTexture
>8026	UnaryOp	& Select_SetTexture
>8027	Identifier	Select_SetTexture
>8028	UnaryOperator	&
>8029	PtrMemberAccess	pSelectedFaceTable -> m_pfnSelect_SetTexture
>8030	Identifier	m_pfnSelect_SetTexture
>8031	Identifier	pSelectedFaceTable
>8032	ExpressionStatement	 
>8033	AssignmentExpr	pSelectedFaceTable -> m_pfnTextureForName = & QERApp_Texture_ForName
>8034	UnaryOp	& QERApp_Texture_ForName
>8035	Identifier	QERApp_Texture_ForName
>8036	UnaryOperator	&
>8037	PtrMemberAccess	pSelectedFaceTable -> m_pfnTextureForName
>8038	Identifier	m_pfnTextureForName
>8039	Identifier	pSelectedFaceTable
>8040	ExpressionStatement	 
>8041	AssignmentExpr	pSelectedFaceTable -> m_pfnGetTextureSize = & QERApp_GetTextureSize
>8042	UnaryOp	& QERApp_GetTextureSize
>8043	Identifier	QERApp_GetTextureSize
>8044	UnaryOperator	&
>8045	PtrMemberAccess	pSelectedFaceTable -> m_pfnGetTextureSize
>8046	Identifier	m_pfnGetTextureSize
>8047	Identifier	pSelectedFaceTable
>8048	ExpressionStatement	 
>8049	AssignmentExpr	pSelectedFaceTable -> m_pfnSetFaceInfo = & QERApp_SetFaceInfo
>8050	UnaryOp	& QERApp_SetFaceInfo
>8051	Identifier	QERApp_SetFaceInfo
>8052	UnaryOperator	&
>8053	PtrMemberAccess	pSelectedFaceTable -> m_pfnSetFaceInfo
>8054	Identifier	m_pfnSetFaceInfo
>8055	Identifier	pSelectedFaceTable
>8056	ExpressionStatement	 
>8057	AssignmentExpr	pSelectedFaceTable -> m_pfnGetFaceInfo = & QERApp_GetFaceInfo
>8058	UnaryOp	& QERApp_GetFaceInfo
>8059	Identifier	QERApp_GetFaceInfo
>8060	UnaryOperator	&
>8061	PtrMemberAccess	pSelectedFaceTable -> m_pfnGetFaceInfo
>8062	Identifier	m_pfnGetFaceInfo
>8063	Identifier	pSelectedFaceTable
>8064	ExpressionStatement	 
>8065	AssignmentExpr	pSelectedFaceTable -> m_pfnGetTextureNumber = & QERApp_ISelectedFace_GetTextureNumber
>8066	UnaryOp	& QERApp_ISelectedFace_GetTextureNumber
>8067	Identifier	QERApp_ISelectedFace_GetTextureNumber
>8068	UnaryOperator	&
>8069	PtrMemberAccess	pSelectedFaceTable -> m_pfnGetTextureNumber
>8070	Identifier	m_pfnGetTextureNumber
>8071	Identifier	pSelectedFaceTable
>8072	IfStatement	if ( pSelectedFaceTable -> m_nSize != sizeof ( _QERSelectedFaceTable ) )
>8073	CompoundStatement	 
>8074	ReturnStatement	 
>8075	PrimaryExpression	0
>8076	ExpressionStatement	 
>8077	CallExpression	Sys_Printf ( \"wrong m_nSize in plugin-requested _QERSelectedFaceTable interface\n\" )
>8078	ArgumentList	\"wrong m_nSize in plugin-requested _QERSelectedFaceTable interface\n\"
>8079	Argument	\"wrong m_nSize in plugin-requested _QERSelectedFaceTable interface\n\"
>8080	PrimaryExpression	\"wrong m_nSize in plugin-requested _QERSelectedFaceTable interface\n\"
>8081	Callee	Sys_Printf
>8082	Identifier	Sys_Printf
>8083	Condition	 
>8084	EqualityExpression	pSelectedFaceTable -> m_nSize != sizeof ( _QERSelectedFaceTable )
>8085	SizeofExpr	sizeof ( _QERSelectedFaceTable )
>8086	SizeofOperand	_QERSelectedFaceTable
>8087	Sizeof	sizeof
>8088	PtrMemberAccess	pSelectedFaceTable -> m_nSize
>8089	Identifier	m_nSize
>8090	Identifier	pSelectedFaceTable
>8091	ExpressionStatement	 
>8092	Identifier	pInterface
>8093	Statement	 
>8094	Statement	 
>8095	Statement	 
>8096	Statement	 
>8097	Statement	 
>8098	Statement	 
>8099	Statement	 
>8100	Statement	 
>8101	Statement	 
>8102	Condition	 
>8103	CallExpression	IsEqualGUID ( refGUID , QERSelectedFaceTable_GUID )
>8104	ArgumentList	refGUID
>8105	Argument	QERSelectedFaceTable_GUID
>8106	Identifier	QERSelectedFaceTable_GUID
>8107	Argument	refGUID
>8108	Identifier	refGUID
>8109	Callee	IsEqualGUID
>8110	Identifier	IsEqualGUID
>8111	CompoundStatement	 
>8112	ReturnStatement	 
>8113	PrimaryExpression	1
>8114	ExpressionStatement	 
>8115	AssignmentExpr	pQglTable -> m_pfnUnHookGLWindow = QERApp_UnHookGLWindow
>8116	Identifier	QERApp_UnHookGLWindow
>8117	PtrMemberAccess	pQglTable -> m_pfnUnHookGLWindow
>8118	Identifier	m_pfnUnHookGLWindow
>8119	Identifier	pQglTable
>8120	ExpressionStatement	 
>8121	AssignmentExpr	pQglTable -> m_pfnHookXYGLWindow = QERApp_HookXYGLWindow
>8122	Identifier	QERApp_HookXYGLWindow
>8123	PtrMemberAccess	pQglTable -> m_pfnHookXYGLWindow
>8124	Identifier	m_pfnHookXYGLWindow
>8125	Identifier	pQglTable
>8126	ExpressionStatement	 
>8127	AssignmentExpr	pQglTable -> m_pfn_qgluLookAt = qgluLookAt
>8128	Identifier	qgluLookAt
>8129	PtrMemberAccess	pQglTable -> m_pfn_qgluLookAt
>8130	Identifier	m_pfn_qgluLookAt
>8131	Identifier	pQglTable
>8132	ExpressionStatement	 
>8133	AssignmentExpr	pQglTable -> m_pfn_qgluPerspective = qgluPerspective
>8134	Identifier	qgluPerspective
>8135	PtrMemberAccess	pQglTable -> m_pfn_qgluPerspective
>8136	Identifier	m_pfn_qgluPerspective
>8137	Identifier	pQglTable
>8138	ExpressionStatement	 
>8139	AssignmentExpr	pQglTable -> m_pfnGetQeglobalsHGLRC = & QERApp_GetQeglobalsHGLRC
>8140	UnaryOp	& QERApp_GetQeglobalsHGLRC
>8141	Identifier	QERApp_GetQeglobalsHGLRC
>8142	UnaryOperator	&
>8143	PtrMemberAccess	pQglTable -> m_pfnGetQeglobalsHGLRC
>8144	Identifier	m_pfnGetQeglobalsHGLRC
>8145	Identifier	pQglTable
>8146	ExpressionStatement	 
>8147	AssignmentExpr	pQglTable -> m_pfn_qwglUseFontBitmaps = qwglUseFontBitmaps
>8148	Identifier	qwglUseFontBitmaps
>8149	PtrMemberAccess	pQglTable -> m_pfn_qwglUseFontBitmaps
>8150	Identifier	m_pfn_qwglUseFontBitmaps
>8151	Identifier	pQglTable
>8152	ExpressionStatement	 
>8153	AssignmentExpr	pQglTable -> m_pfn_qwglSwapBuffers = qwglSwapBuffers
>8154	Identifier	qwglSwapBuffers
>8155	PtrMemberAccess	pQglTable -> m_pfn_qwglSwapBuffers
>8156	Identifier	m_pfn_qwglSwapBuffers
>8157	Identifier	pQglTable
>8158	ExpressionStatement	 
>8159	AssignmentExpr	pQglTable -> m_pfn_qwglShareLists = qwglShareLists
>8160	Identifier	qwglShareLists
>8161	PtrMemberAccess	pQglTable -> m_pfn_qwglShareLists
>8162	Identifier	m_pfn_qwglShareLists
>8163	Identifier	pQglTable
>8164	ExpressionStatement	 
>8165	AssignmentExpr	pQglTable -> m_pfn_qwglMakeCurrent = qwglMakeCurrent
>8166	Identifier	qwglMakeCurrent
>8167	PtrMemberAccess	pQglTable -> m_pfn_qwglMakeCurrent
>8168	Identifier	m_pfn_qwglMakeCurrent
>8169	Identifier	pQglTable
>8170	ExpressionStatement	 
>8171	AssignmentExpr	pQglTable -> m_pfn_qwglDeleteContext = qwglDeleteContext
>8172	Identifier	qwglDeleteContext
>8173	PtrMemberAccess	pQglTable -> m_pfn_qwglDeleteContext
>8174	Identifier	m_pfn_qwglDeleteContext
>8175	Identifier	pQglTable
>8176	ExpressionStatement	 
>8177	AssignmentExpr	pQglTable -> m_pfn_qwglCreateContext = qwglCreateContext
>8178	Identifier	qwglCreateContext
>8179	PtrMemberAccess	pQglTable -> m_pfn_qwglCreateContext
>8180	Identifier	m_pfn_qwglCreateContext
>8181	Identifier	pQglTable
>8182	ExpressionStatement	 
>8183	AssignmentExpr	pQglTable -> m_pfn_QEW_SetupPixelFormat = & QEW_SetupPixelFormat
>8184	UnaryOp	& QEW_SetupPixelFormat
>8185	Identifier	QEW_SetupPixelFormat
>8186	UnaryOperator	&
>8187	PtrMemberAccess	pQglTable -> m_pfn_QEW_SetupPixelFormat
>8188	Identifier	m_pfn_QEW_SetupPixelFormat
>8189	Identifier	pQglTable
>8190	ExpressionStatement	 
>8191	AssignmentExpr	pQglTable -> m_pfn_QE_CheckOpenGLForErrors = & QE_CheckOpenGLForErrors
>8192	UnaryOp	& QE_CheckOpenGLForErrors
>8193	Identifier	QE_CheckOpenGLForErrors
>8194	UnaryOperator	&
>8195	PtrMemberAccess	pQglTable -> m_pfn_QE_CheckOpenGLForErrors
>8196	Identifier	m_pfn_QE_CheckOpenGLForErrors
>8197	Identifier	pQglTable
>8198	ExpressionStatement	 
>8199	AssignmentExpr	pQglTable -> m_pfn_qglViewport = qglViewport
>8200	Identifier	qglViewport
>8201	PtrMemberAccess	pQglTable -> m_pfn_qglViewport
>8202	Identifier	m_pfn_qglViewport
>8203	Identifier	pQglTable
>8204	ExpressionStatement	 
>8205	AssignmentExpr	pQglTable -> m_pfn_qglVertex3f = qglVertex3f
>8206	Identifier	qglVertex3f
>8207	PtrMemberAccess	pQglTable -> m_pfn_qglVertex3f
>8208	Identifier	m_pfn_qglVertex3f
>8209	Identifier	pQglTable
>8210	ExpressionStatement	 
>8211	AssignmentExpr	pQglTable -> m_pfn_qglVertex2f = qglVertex2f
>8212	Identifier	qglVertex2f
>8213	PtrMemberAccess	pQglTable -> m_pfn_qglVertex2f
>8214	Identifier	m_pfn_qglVertex2f
>8215	Identifier	pQglTable
>8216	ExpressionStatement	 
>8217	AssignmentExpr	pQglTable -> m_pfn_qglTranslatef = qglTranslatef
>8218	Identifier	qglTranslatef
>8219	PtrMemberAccess	pQglTable -> m_pfn_qglTranslatef
>8220	Identifier	m_pfn_qglTranslatef
>8221	Identifier	pQglTable
>8222	ExpressionStatement	 
>8223	AssignmentExpr	pQglTable -> m_pfn_qglTranslated = qglTranslated
>8224	Identifier	qglTranslated
>8225	PtrMemberAccess	pQglTable -> m_pfn_qglTranslated
>8226	Identifier	m_pfn_qglTranslated
>8227	Identifier	pQglTable
>8228	ExpressionStatement	 
>8229	AssignmentExpr	pQglTable -> m_pfn_qglTexParameterf = qglTexParameterf
>8230	Identifier	qglTexParameterf
>8231	PtrMemberAccess	pQglTable -> m_pfn_qglTexParameterf
>8232	Identifier	m_pfn_qglTexParameterf
>8233	Identifier	pQglTable
>8234	ExpressionStatement	 
>8235	AssignmentExpr	pQglTable -> m_pfn_qglTexGenf = qglTexGenf
>8236	Identifier	qglTexGenf
>8237	PtrMemberAccess	pQglTable -> m_pfn_qglTexGenf
>8238	Identifier	m_pfn_qglTexGenf
>8239	Identifier	pQglTable
>8240	ExpressionStatement	 
>8241	AssignmentExpr	pQglTable -> m_pfn_qglTexEnvf = qglTexEnvf
>8242	Identifier	qglTexEnvf
>8243	PtrMemberAccess	pQglTable -> m_pfn_qglTexEnvf
>8244	Identifier	m_pfn_qglTexEnvf
>8245	Identifier	pQglTable
>8246	ExpressionStatement	 
>8247	AssignmentExpr	pQglTable -> m_pfn_qglTexCoord2f = qglTexCoord2f
>8248	Identifier	qglTexCoord2f
>8249	PtrMemberAccess	pQglTable -> m_pfn_qglTexCoord2f
>8250	Identifier	m_pfn_qglTexCoord2f
>8251	Identifier	pQglTable
>8252	ExpressionStatement	 
>8253	AssignmentExpr	pQglTable -> m_pfn_qglScalef = qglScalef
>8254	Identifier	qglScalef
>8255	PtrMemberAccess	pQglTable -> m_pfn_qglScalef
>8256	Identifier	m_pfn_qglScalef
>8257	Identifier	pQglTable
>8258	ExpressionStatement	 
>8259	AssignmentExpr	pQglTable -> m_pfn_qglRotatef = qglRotatef
>8260	Identifier	qglRotatef
>8261	PtrMemberAccess	pQglTable -> m_pfn_qglRotatef
>8262	Identifier	m_pfn_qglRotatef
>8263	Identifier	pQglTable
>8264	ExpressionStatement	 
>8265	AssignmentExpr	pQglTable -> m_pfn_qglRotated = qglRotated
>8266	Identifier	qglRotated
>8267	PtrMemberAccess	pQglTable -> m_pfn_qglRotated
>8268	Identifier	m_pfn_qglRotated
>8269	Identifier	pQglTable
>8270	ExpressionStatement	 
>8271	AssignmentExpr	pQglTable -> m_pfn_qglPushMatrix = qglPushMatrix
>8272	Identifier	qglPushMatrix
>8273	PtrMemberAccess	pQglTable -> m_pfn_qglPushMatrix
>8274	Identifier	m_pfn_qglPushMatrix
>8275	Identifier	pQglTable
>8276	ExpressionStatement	 
>8277	AssignmentExpr	pQglTable -> m_pfn_qglPopMatrix = qglPopMatrix
>8278	Identifier	qglPopMatrix
>8279	PtrMemberAccess	pQglTable -> m_pfn_qglPopMatrix
>8280	Identifier	m_pfn_qglPopMatrix
>8281	Identifier	pQglTable
>8282	ExpressionStatement	 
>8283	AssignmentExpr	pQglTable -> m_pfn_qglPolygonMode = qglPolygonMode
>8284	Identifier	qglPolygonMode
>8285	PtrMemberAccess	pQglTable -> m_pfn_qglPolygonMode
>8286	Identifier	m_pfn_qglPolygonMode
>8287	Identifier	pQglTable
>8288	ExpressionStatement	 
>8289	AssignmentExpr	pQglTable -> m_pfn_qglPointSize = qglPointSize
>8290	Identifier	qglPointSize
>8291	PtrMemberAccess	pQglTable -> m_pfn_qglPointSize
>8292	Identifier	m_pfn_qglPointSize
>8293	Identifier	pQglTable
>8294	ExpressionStatement	 
>8295	AssignmentExpr	pQglTable -> m_pfn_qglOrtho = qglOrtho
>8296	Identifier	qglOrtho
>8297	PtrMemberAccess	pQglTable -> m_pfn_qglOrtho
>8298	Identifier	m_pfn_qglOrtho
>8299	Identifier	pQglTable
>8300	ExpressionStatement	 
>8301	AssignmentExpr	pQglTable -> m_pfn_qglNormal3f = qglNormal3f
>8302	Identifier	qglNormal3f
>8303	PtrMemberAccess	pQglTable -> m_pfn_qglNormal3f
>8304	Identifier	m_pfn_qglNormal3f
>8305	Identifier	pQglTable
>8306	ExpressionStatement	 
>8307	AssignmentExpr	pQglTable -> m_pfn_qglNewList = qglNewList
>8308	Identifier	qglNewList
>8309	PtrMemberAccess	pQglTable -> m_pfn_qglNewList
>8310	Identifier	m_pfn_qglNewList
>8311	Identifier	pQglTable
>8312	ExpressionStatement	 
>8313	AssignmentExpr	pQglTable -> m_pfn_qglMatrixMode = qglMatrixMode
>8314	Identifier	qglMatrixMode
>8315	PtrMemberAccess	pQglTable -> m_pfn_qglMatrixMode
>8316	Identifier	m_pfn_qglMatrixMode
>8317	Identifier	pQglTable
>8318	ExpressionStatement	 
>8319	AssignmentExpr	pQglTable -> m_pfn_qglLoadIdentity = qglLoadIdentity
>8320	Identifier	qglLoadIdentity
>8321	PtrMemberAccess	pQglTable -> m_pfn_qglLoadIdentity
>8322	Identifier	m_pfn_qglLoadIdentity
>8323	Identifier	pQglTable
>8324	ExpressionStatement	 
>8325	AssignmentExpr	pQglTable -> m_pfn_qglListBase = qglListBase
>8326	Identifier	qglListBase
>8327	PtrMemberAccess	pQglTable -> m_pfn_qglListBase
>8328	Identifier	m_pfn_qglListBase
>8329	Identifier	pQglTable
>8330	ExpressionStatement	 
>8331	AssignmentExpr	pQglTable -> m_pfn_qglGenLists = qglGenLists
>8332	Identifier	qglGenLists
>8333	PtrMemberAccess	pQglTable -> m_pfn_qglGenLists
>8334	Identifier	m_pfn_qglGenLists
>8335	Identifier	pQglTable
>8336	ExpressionStatement	 
>8337	AssignmentExpr	pQglTable -> m_pfn_qglEndList = qglEndList
>8338	Identifier	qglEndList
>8339	PtrMemberAccess	pQglTable -> m_pfn_qglEndList
>8340	Identifier	m_pfn_qglEndList
>8341	Identifier	pQglTable
>8342	ExpressionStatement	 
>8343	AssignmentExpr	pQglTable -> m_pfn_qglEnd = qglEnd
>8344	Identifier	qglEnd
>8345	PtrMemberAccess	pQglTable -> m_pfn_qglEnd
>8346	Identifier	m_pfn_qglEnd
>8347	Identifier	pQglTable
>8348	ExpressionStatement	 
>8349	AssignmentExpr	pQglTable -> m_pfn_qglEnable = qglEnable
>8350	Identifier	qglEnable
>8351	PtrMemberAccess	pQglTable -> m_pfn_qglEnable
>8352	Identifier	m_pfn_qglEnable
>8353	Identifier	pQglTable
>8354	ExpressionStatement	 
>8355	AssignmentExpr	pQglTable -> m_pfn_qglDeleteLists = qglDeleteLists
>8356	Identifier	qglDeleteLists
>8357	PtrMemberAccess	pQglTable -> m_pfn_qglDeleteLists
>8358	Identifier	m_pfn_qglDeleteLists
>8359	Identifier	pQglTable
>8360	ExpressionStatement	 
>8361	AssignmentExpr	pQglTable -> m_pfn_qglDisable = qglDisable
>8362	Identifier	qglDisable
>8363	PtrMemberAccess	pQglTable -> m_pfn_qglDisable
>8364	Identifier	m_pfn_qglDisable
>8365	Identifier	pQglTable
>8366	ExpressionStatement	 
>8367	AssignmentExpr	pQglTable -> m_pfn_qglCullFace = qglCullFace
>8368	Identifier	qglCullFace
>8369	PtrMemberAccess	pQglTable -> m_pfn_qglCullFace
>8370	Identifier	m_pfn_qglCullFace
>8371	Identifier	pQglTable
>8372	ExpressionStatement	 
>8373	AssignmentExpr	pQglTable -> m_pfn_qglColor4f = qglColor4f
>8374	Identifier	qglColor4f
>8375	PtrMemberAccess	pQglTable -> m_pfn_qglColor4f
>8376	Identifier	m_pfn_qglColor4f
>8377	Identifier	pQglTable
>8378	ExpressionStatement	 
>8379	AssignmentExpr	pQglTable -> m_pfn_qglColor3f = qglColor3f
>8380	Identifier	qglColor3f
>8381	PtrMemberAccess	pQglTable -> m_pfn_qglColor3f
>8382	Identifier	m_pfn_qglColor3f
>8383	Identifier	pQglTable
>8384	ExpressionStatement	 
>8385	AssignmentExpr	pQglTable -> m_pfn_qglClearDepth = qglClearDepth
>8386	Identifier	qglClearDepth
>8387	PtrMemberAccess	pQglTable -> m_pfn_qglClearDepth
>8388	Identifier	m_pfn_qglClearDepth
>8389	Identifier	pQglTable
>8390	ExpressionStatement	 
>8391	AssignmentExpr	pQglTable -> m_pfn_qglClearColor = qglClearColor
>8392	Identifier	qglClearColor
>8393	PtrMemberAccess	pQglTable -> m_pfn_qglClearColor
>8394	Identifier	m_pfn_qglClearColor
>8395	Identifier	pQglTable
>8396	ExpressionStatement	 
>8397	AssignmentExpr	pQglTable -> m_pfn_qglClear = qglClear
>8398	Identifier	qglClear
>8399	PtrMemberAccess	pQglTable -> m_pfn_qglClear
>8400	Identifier	m_pfn_qglClear
>8401	Identifier	pQglTable
>8402	ExpressionStatement	 
>8403	AssignmentExpr	pQglTable -> m_pfn_qglCallLists = qglCallLists
>8404	Identifier	qglCallLists
>8405	PtrMemberAccess	pQglTable -> m_pfn_qglCallLists
>8406	Identifier	m_pfn_qglCallLists
>8407	Identifier	pQglTable
>8408	ExpressionStatement	 
>8409	AssignmentExpr	pQglTable -> m_pfn_qglCallList = qglCallList
>8410	Identifier	qglCallList
>8411	PtrMemberAccess	pQglTable -> m_pfn_qglCallList
>8412	Identifier	m_pfn_qglCallList
>8413	Identifier	pQglTable
>8414	ExpressionStatement	 
>8415	AssignmentExpr	pQglTable -> m_pfn_qglBlendFunc = qglBlendFunc
>8416	Identifier	qglBlendFunc
>8417	PtrMemberAccess	pQglTable -> m_pfn_qglBlendFunc
>8418	Identifier	m_pfn_qglBlendFunc
>8419	Identifier	pQglTable
>8420	ExpressionStatement	 
>8421	AssignmentExpr	pQglTable -> m_pfn_qglBindTexture = qglBindTexture
>8422	Identifier	qglBindTexture
>8423	PtrMemberAccess	pQglTable -> m_pfn_qglBindTexture
>8424	Identifier	m_pfn_qglBindTexture
>8425	Identifier	pQglTable
>8426	ExpressionStatement	 
>8427	AssignmentExpr	pQglTable -> m_pfn_qglBegin = qglBegin
>8428	Identifier	qglBegin
>8429	PtrMemberAccess	pQglTable -> m_pfn_qglBegin
>8430	Identifier	m_pfn_qglBegin
>8431	Identifier	pQglTable
>8432	ExpressionStatement	 
>8433	AssignmentExpr	pQglTable -> m_pfn_qglAlphaFunc = qglAlphaFunc
>8434	Identifier	qglAlphaFunc
>8435	PtrMemberAccess	pQglTable -> m_pfn_qglAlphaFunc
>8436	Identifier	m_pfn_qglAlphaFunc
>8437	Identifier	pQglTable
>8438	IfStatement	if ( pQglTable -> m_nSize != sizeof ( _QERQglTable ) )
>8439	CompoundStatement	 
>8440	ReturnStatement	 
>8441	PrimaryExpression	0
>8442	ExpressionStatement	 
>8443	CallExpression	Sys_Printf ( \"wrong m_nSize in plugin-requested _QERQglTable interface\n\" )
>8444	ArgumentList	\"wrong m_nSize in plugin-requested _QERQglTable interface\n\"
>8445	Argument	\"wrong m_nSize in plugin-requested _QERQglTable interface\n\"
>8446	PrimaryExpression	\"wrong m_nSize in plugin-requested _QERQglTable interface\n\"
>8447	Callee	Sys_Printf
>8448	Identifier	Sys_Printf
>8449	Condition	 
>8450	EqualityExpression	pQglTable -> m_nSize != sizeof ( _QERQglTable )
>8451	SizeofExpr	sizeof ( _QERQglTable )
>8452	SizeofOperand	_QERQglTable
>8453	Sizeof	sizeof
>8454	PtrMemberAccess	pQglTable -> m_nSize
>8455	Identifier	m_nSize
>8456	Identifier	pQglTable
>8457	ExpressionStatement	 
>8458	Identifier	pInterface
>8459	Statement	 
>8460	Statement	 
>8461	Statement	 
>8462	Statement	 
>8463	Statement	 
>8464	Statement	 
>8465	Statement	 
>8466	Statement	 
>8467	Statement	 
>8468	Condition	 
>8469	CallExpression	IsEqualGUID ( refGUID , QERQglTable_GUID )
>8470	ArgumentList	refGUID
>8471	Argument	QERQglTable_GUID
>8472	Identifier	QERQglTable_GUID
>8473	Argument	refGUID
>8474	Identifier	refGUID
>8475	Callee	IsEqualGUID
>8476	Identifier	IsEqualGUID
>8669	FunctionDef	CPlugInManager 
>8670	ParameterList	CPlugIn * pPlug
>8671	Parameter	 
>8672	Identifier	pPlug
>8673	ParameterType	CPlugIn *
>8674	ReturnType	int
>8675	CompoundStatement	 
>8676	ReturnStatement	 
>8677	Identifier	false
>8678	IfStatement	if ( pTable != NULL )
>8679	ElseStatement	else
>8680	CompoundStatement	 
>8681	ExpressionStatement	 
>8682	CallExpression	Sys_Printf ( \"Unable to load %s because the function tables are not the same size\n\" , pPlug -> getVersionStr ( ) )
>8683	ArgumentList	\"Unable to load %s because the function tables are not the same size\n\"
>8684	Argument	pPlug -> getVersionStr ( )
>8685	CallExpression	pPlug -> getVersionStr ( )
>8686	ArgumentList	 
>8687	Callee	pPlug -> getVersionStr
>8688	PtrMemberAccess	pPlug -> getVersionStr
>8689	Identifier	getVersionStr
>8690	Identifier	pPlug
>8691	Argument	\"Unable to load %s because the function tables are not the same size\n\"
>8692	PrimaryExpression	\"Unable to load %s because the function tables are not the same size\n\"
>8693	Callee	Sys_Printf
>8694	Identifier	Sys_Printf
>8695	CompoundStatement	 
>8696	ReturnStatement	 
>8697	Identifier	true
>8698	IfStatement	if ( pTable -> m_fVersion >= 1.7f )
>8699	CompoundStatement	 
>8700	ExpressionStatement	 
>8701	AssignmentExpr	pTable -> m_pfnCommitPatchHandleToMap = & QERApp_CommitPatchHandleToMap
>8702	UnaryOp	& QERApp_CommitPatchHandleToMap
>8703	Identifier	QERApp_CommitPatchHandleToMap
>8704	UnaryOperator	&
>8705	PtrMemberAccess	pTable -> m_pfnCommitPatchHandleToMap
>8706	Identifier	m_pfnCommitPatchHandleToMap
>8707	Identifier	pTable
>8708	ExpressionStatement	 
>8709	AssignmentExpr	pTable -> m_pfnCreatePatchHandle = & QERApp_CreatePatchHandle
>8710	UnaryOp	& QERApp_CreatePatchHandle
>8711	Identifier	QERApp_CreatePatchHandle
>8712	UnaryOperator	&
>8713	PtrMemberAccess	pTable -> m_pfnCreatePatchHandle
>8714	Identifier	m_pfnCreatePatchHandle
>8715	Identifier	pTable
>8716	ExpressionStatement	 
>8717	AssignmentExpr	pTable -> m_pfnDeletePatch = & QERApp_DeletePatch
>8718	UnaryOp	& QERApp_DeletePatch
>8719	Identifier	QERApp_DeletePatch
>8720	UnaryOperator	&
>8721	PtrMemberAccess	pTable -> m_pfnDeletePatch
>8722	Identifier	m_pfnDeletePatch
>8723	Identifier	pTable
>8724	ExpressionStatement	 
>8725	AssignmentExpr	pTable -> m_pfnGetPatchData = & QERApp_GetPatchData
>8726	UnaryOp	& QERApp_GetPatchData
>8727	Identifier	QERApp_GetPatchData
>8728	UnaryOperator	&
>8729	PtrMemberAccess	pTable -> m_pfnGetPatchData
>8730	Identifier	m_pfnGetPatchData
>8731	Identifier	pTable
>8732	ExpressionStatement	 
>8733	AssignmentExpr	pTable -> m_pfnReleasePatchHandles = & QERApp_ReleasePatchHandles
>8734	UnaryOp	& QERApp_ReleasePatchHandles
>8735	Identifier	QERApp_ReleasePatchHandles
>8736	UnaryOperator	&
>8737	PtrMemberAccess	pTable -> m_pfnReleasePatchHandles
>8738	Identifier	m_pfnReleasePatchHandles
>8739	Identifier	pTable
>8740	ExpressionStatement	 
>8741	AssignmentExpr	pTable -> m_pfnAllocateSelectedPatchHandles = & QERApp_AllocateSelectedPatchHandles
>8742	UnaryOp	& QERApp_AllocateSelectedPatchHandles
>8743	Identifier	QERApp_AllocateSelectedPatchHandles
>8744	UnaryOperator	&
>8745	PtrMemberAccess	pTable -> m_pfnAllocateSelectedPatchHandles
>8746	Identifier	m_pfnAllocateSelectedPatchHandles
>8747	Identifier	pTable
>8748	ExpressionStatement	 
>8749	AssignmentExpr	pTable -> m_pfnAllocateActivePatchHandles = & QERApp_AllocateActivePatchHandles
>8750	UnaryOp	& QERApp_AllocateActivePatchHandles
>8751	Identifier	QERApp_AllocateActivePatchHandles
>8752	UnaryOperator	&
>8753	PtrMemberAccess	pTable -> m_pfnAllocateActivePatchHandles
>8754	Identifier	m_pfnAllocateActivePatchHandles
>8755	Identifier	pTable
>8756	ExpressionStatement	 
>8757	AssignmentExpr	pTable -> m_pfnGetQERPath = & QERApp_GetQERPath
>8758	UnaryOp	& QERApp_GetQERPath
>8759	Identifier	QERApp_GetQERPath
>8760	UnaryOperator	&
>8761	PtrMemberAccess	pTable -> m_pfnGetQERPath
>8762	Identifier	m_pfnGetQERPath
>8763	Identifier	pTable
>8764	ExpressionStatement	 
>8765	AssignmentExpr	pTable -> m_pfnGetGamePath = & QERApp_GetGamePath
>8766	UnaryOp	& QERApp_GetGamePath
>8767	Identifier	QERApp_GetGamePath
>8768	UnaryOperator	&
>8769	PtrMemberAccess	pTable -> m_pfnGetGamePath
>8770	Identifier	m_pfnGetGamePath
>8771	Identifier	pTable
>8772	ExpressionStatement	 
>8773	AssignmentExpr	pTable -> m_pfnRadiantFree = & QERApp_RadiantFree
>8774	UnaryOp	& QERApp_RadiantFree
>8775	Identifier	QERApp_RadiantFree
>8776	UnaryOperator	&
>8777	PtrMemberAccess	pTable -> m_pfnRadiantFree
>8778	Identifier	m_pfnRadiantFree
>8779	Identifier	pTable
>8780	ExpressionStatement	 
>8781	AssignmentExpr	pTable -> m_pfnTexture_LoadSkin = & Texture_LoadSkin
>8782	UnaryOp	& Texture_LoadSkin
>8783	Identifier	Texture_LoadSkin
>8784	UnaryOperator	&
>8785	PtrMemberAccess	pTable -> m_pfnTexture_LoadSkin
>8786	Identifier	m_pfnTexture_LoadSkin
>8787	Identifier	pTable
>8788	ExpressionStatement	 
>8789	AssignmentExpr	pTable -> m_pfnHasShader = & QERApp_HasShader
>8790	UnaryOp	& QERApp_HasShader
>8791	Identifier	QERApp_HasShader
>8792	UnaryOperator	&
>8793	PtrMemberAccess	pTable -> m_pfnHasShader
>8794	Identifier	m_pfnHasShader
>8795	Identifier	pTable
>8796	ExpressionStatement	 
>8797	AssignmentExpr	pTable -> m_pfnQE_ConvertDOSToUnixName = & QE_ConvertDOSToUnixName
>8798	UnaryOp	& QE_ConvertDOSToUnixName
>8799	Identifier	QE_ConvertDOSToUnixName
>8800	UnaryOperator	&
>8801	PtrMemberAccess	pTable -> m_pfnQE_ConvertDOSToUnixName
>8802	Identifier	m_pfnQE_ConvertDOSToUnixName
>8803	Identifier	pTable
>8804	ExpressionStatement	 
>8805	AssignmentExpr	pTable -> m_pfnExpandReletivePath = & QERApp_ExpandReletivePath
>8806	UnaryOp	& QERApp_ExpandReletivePath
>8807	Identifier	QERApp_ExpandReletivePath
>8808	UnaryOperator	&
>8809	PtrMemberAccess	pTable -> m_pfnExpandReletivePath
>8810	Identifier	m_pfnExpandReletivePath
>8811	Identifier	pTable
>8812	ExpressionStatement	 
>8813	AssignmentExpr	pTable -> m_pfnLoadFile = & QERApp_LoadFile
>8814	UnaryOp	& QERApp_LoadFile
>8815	Identifier	QERApp_LoadFile
>8816	UnaryOperator	&
>8817	PtrMemberAccess	pTable -> m_pfnLoadFile
>8818	Identifier	m_pfnLoadFile
>8819	Identifier	pTable
>8820	ExpressionStatement	 
>8821	AssignmentExpr	pTable -> m_pfnErrorMsg = & QERApp_ErrorMsg
>8822	UnaryOp	& QERApp_ErrorMsg
>8823	Identifier	QERApp_ErrorMsg
>8824	UnaryOperator	&
>8825	PtrMemberAccess	pTable -> m_pfnErrorMsg
>8826	Identifier	m_pfnErrorMsg
>8827	Identifier	pTable
>8828	ExpressionStatement	 
>8829	AssignmentExpr	pTable -> m_pfnRequestInterface = & QERApp_RequestInterface
>8830	UnaryOp	& QERApp_RequestInterface
>8831	Identifier	QERApp_RequestInterface
>8832	UnaryOperator	&
>8833	PtrMemberAccess	pTable -> m_pfnRequestInterface
>8834	Identifier	m_pfnRequestInterface
>8835	Identifier	pTable
>8836	ExpressionStatement	 
>8837	AssignmentExpr	pTable -> m_pfnScanFileForEClass = & QERApp_ScanFileForEClass
>8838	UnaryOp	& QERApp_ScanFileForEClass
>8839	Identifier	QERApp_ScanFileForEClass
>8840	UnaryOperator	&
>8841	PtrMemberAccess	pTable -> m_pfnScanFileForEClass
>8842	Identifier	m_pfnScanFileForEClass
>8843	Identifier	pTable
>8844	ExpressionStatement	 
>8845	AssignmentExpr	pTable -> m_pfnReadProjectKey = & QERApp_ReadProjectKey
>8846	UnaryOp	& QERApp_ReadProjectKey
>8847	Identifier	QERApp_ReadProjectKey
>8848	UnaryOperator	&
>8849	PtrMemberAccess	pTable -> m_pfnReadProjectKey
>8850	Identifier	m_pfnReadProjectKey
>8851	Identifier	pTable
>8852	ExpressionStatement	 
>8853	AssignmentExpr	pTable -> m_pfnBuildBrush2 = & QERApp_BuildBrush2
>8854	UnaryOp	& QERApp_BuildBrush2
>8855	Identifier	QERApp_BuildBrush2
>8856	UnaryOperator	&
>8857	PtrMemberAccess	pTable -> m_pfnBuildBrush2
>8858	Identifier	m_pfnBuildBrush2
>8859	Identifier	pTable
>8860	ExpressionStatement	 
>8861	AssignmentExpr	pTable -> m_pfnSysUpdateWindows = & Sys_UpdateWindows
>8862	UnaryOp	& Sys_UpdateWindows
>8863	Identifier	Sys_UpdateWindows
>8864	UnaryOperator	&
>8865	PtrMemberAccess	pTable -> m_pfnSysUpdateWindows
>8866	Identifier	m_pfnSysUpdateWindows
>8867	Identifier	pTable
>8868	ExpressionStatement	 
>8869	AssignmentExpr	pTable -> m_pfnSetScreenUpdate = & QERApp_SetScreenUpdate
>8870	UnaryOp	& QERApp_SetScreenUpdate
>8871	Identifier	QERApp_SetScreenUpdate
>8872	UnaryOperator	&
>8873	PtrMemberAccess	pTable -> m_pfnSetScreenUpdate
>8874	Identifier	m_pfnSetScreenUpdate
>8875	Identifier	pTable
>8876	ExpressionStatement	 
>8877	AssignmentExpr	pTable -> m_pfnCommitEntityHandleToMap = & QERApp_CommitEntityHandleToMap
>8878	UnaryOp	& QERApp_CommitEntityHandleToMap
>8879	Identifier	QERApp_CommitEntityHandleToMap
>8880	UnaryOperator	&
>8881	PtrMemberAccess	pTable -> m_pfnCommitEntityHandleToMap
>8882	Identifier	m_pfnCommitEntityHandleToMap
>8883	Identifier	pTable
>8884	ExpressionStatement	 
>8885	AssignmentExpr	pTable -> m_pfnCommitBrushHandleToEntity = & QERApp_CommitBrushHandleToEntity
>8886	UnaryOp	& QERApp_CommitBrushHandleToEntity
>8887	Identifier	QERApp_CommitBrushHandleToEntity
>8888	UnaryOperator	&
>8889	PtrMemberAccess	pTable -> m_pfnCommitBrushHandleToEntity
>8890	Identifier	m_pfnCommitBrushHandleToEntity
>8891	Identifier	pTable
>8892	ExpressionStatement	 
>8893	AssignmentExpr	pTable -> m_pfnCreateEntityHandle = & QERApp_CreateEntityHandle
>8894	UnaryOp	& QERApp_CreateEntityHandle
>8895	Identifier	QERApp_CreateEntityHandle
>8896	UnaryOperator	&
>8897	PtrMemberAccess	pTable -> m_pfnCreateEntityHandle
>8898	Identifier	m_pfnCreateEntityHandle
>8899	Identifier	pTable
>8900	ExpressionStatement	 
>8901	AssignmentExpr	pTable -> m_pfnGetEntityBrushHandle = & QERApp_GetEntityBrushHandle
>8902	UnaryOp	& QERApp_GetEntityBrushHandle
>8903	Identifier	QERApp_GetEntityBrushHandle
>8904	UnaryOperator	&
>8905	PtrMemberAccess	pTable -> m_pfnGetEntityBrushHandle
>8906	Identifier	m_pfnGetEntityBrushHandle
>8907	Identifier	pTable
>8908	ExpressionStatement	 
>8909	AssignmentExpr	pTable -> m_pfnReleaseEntityBrushHandles = & QERApp_ReleaseEntityBrushHandles
>8910	UnaryOp	& QERApp_ReleaseEntityBrushHandles
>8911	Identifier	QERApp_ReleaseEntityBrushHandles
>8912	UnaryOperator	&
>8913	PtrMemberAccess	pTable -> m_pfnReleaseEntityBrushHandles
>8914	Identifier	m_pfnReleaseEntityBrushHandles
>8915	Identifier	pTable
>8916	ExpressionStatement	 
>8917	AssignmentExpr	pTable -> m_pfnAllocateEntityBrushHandles = & QERApp_AllocateEntityBrushHandles
>8918	UnaryOp	& QERApp_AllocateEntityBrushHandles
>8919	Identifier	QERApp_AllocateEntityBrushHandles
>8920	UnaryOperator	&
>8921	PtrMemberAccess	pTable -> m_pfnAllocateEntityBrushHandles
>8922	Identifier	m_pfnAllocateEntityBrushHandles
>8923	Identifier	pTable
>8924	ExpressionStatement	 
>8925	AssignmentExpr	pTable -> m_pfnSetEntityKeyValList = & QERApp_SetEntityKeyValList
>8926	UnaryOp	& QERApp_SetEntityKeyValList
>8927	Identifier	QERApp_SetEntityKeyValList
>8928	UnaryOperator	&
>8929	PtrMemberAccess	pTable -> m_pfnSetEntityKeyValList
>8930	Identifier	m_pfnSetEntityKeyValList
>8931	Identifier	pTable
>8932	ExpressionStatement	 
>8933	AssignmentExpr	pTable -> m_pfnAllocateEpair = & QERApp_AllocateEpair
>8934	UnaryOp	& QERApp_AllocateEpair
>8935	Identifier	QERApp_AllocateEpair
>8936	UnaryOperator	&
>8937	PtrMemberAccess	pTable -> m_pfnAllocateEpair
>8938	Identifier	m_pfnAllocateEpair
>8939	Identifier	pTable
>8940	ExpressionStatement	 
>8941	AssignmentExpr	pTable -> m_pfnGetEntityKeyValList = & QERApp_GetEntityKeyValList
>8942	UnaryOp	& QERApp_GetEntityKeyValList
>8943	Identifier	QERApp_GetEntityKeyValList
>8944	UnaryOperator	&
>8945	PtrMemberAccess	pTable -> m_pfnGetEntityKeyValList
>8946	Identifier	m_pfnGetEntityKeyValList
>8947	Identifier	pTable
>8948	ExpressionStatement	 
>8949	AssignmentExpr	pTable -> m_pfnGetEntityHandle = & QERApp_GetEntityHandle
>8950	UnaryOp	& QERApp_GetEntityHandle
>8951	Identifier	QERApp_GetEntityHandle
>8952	UnaryOperator	&
>8953	PtrMemberAccess	pTable -> m_pfnGetEntityHandle
>8954	Identifier	m_pfnGetEntityHandle
>8955	Identifier	pTable
>8956	ExpressionStatement	 
>8957	AssignmentExpr	pTable -> m_pfnGetEntityCount = & QERApp_GetEntityCount
>8958	UnaryOp	& QERApp_GetEntityCount
>8959	Identifier	QERApp_GetEntityCount
>8960	UnaryOperator	&
>8961	PtrMemberAccess	pTable -> m_pfnGetEntityCount
>8962	Identifier	m_pfnGetEntityCount
>8963	Identifier	pTable
>8964	Condition	 
>8965	RelationalExpression	pTable -> m_fVersion >= 1.7f
>8966	PrimaryExpression	1.7f
>8967	PtrMemberAccess	pTable -> m_fVersion
>8968	Identifier	m_fVersion
>8969	Identifier	pTable
>8970	IfStatement	if ( pTable -> m_fVersion >= 1.5f )
>8971	CompoundStatement	 
>8972	ExpressionStatement	 
>8973	AssignmentExpr	pTable -> m_pfnLoadTextureRGBA = & QERApp_LoadTextureRGBA
>8974	UnaryOp	& QERApp_LoadTextureRGBA
>8975	Identifier	QERApp_LoadTextureRGBA
>8976	UnaryOperator	&
>8977	PtrMemberAccess	pTable -> m_pfnLoadTextureRGBA
>8978	Identifier	m_pfnLoadTextureRGBA
>8979	Identifier	pTable
>8980	Condition	 
>8981	RelationalExpression	pTable -> m_fVersion >= 1.5f
>8982	PrimaryExpression	1.5f
>8983	PtrMemberAccess	pTable -> m_fVersion
>8984	Identifier	m_fVersion
>8985	Identifier	pTable
>8986	IfStatement	if ( pTable -> m_fVersion >= QER_PLUG_VERSION_1 )
>8987	CompoundStatement	 
>8988	ExpressionStatement	 
>8989	AssignmentExpr	pTable -> m_pfnResetPlugins = & QERApp_ResetPlugins
>8990	UnaryOp	& QERApp_ResetPlugins
>8991	Identifier	QERApp_ResetPlugins
>8992	UnaryOperator	&
>8993	PtrMemberAccess	pTable -> m_pfnResetPlugins
>8994	Identifier	m_pfnResetPlugins
>8995	Identifier	pTable
>8996	ExpressionStatement	 
>8997	AssignmentExpr	pTable -> m_pfnGetEClass = & QERApp_GetEClass
>8998	UnaryOp	& QERApp_GetEClass
>8999	Identifier	QERApp_GetEClass
>9000	UnaryOperator	&
>9001	PtrMemberAccess	pTable -> m_pfnGetEClass
>9002	Identifier	m_pfnGetEClass
>9003	Identifier	pTable
>9004	ExpressionStatement	 
>9005	AssignmentExpr	pTable -> m_pfnGetEClassCount = & QERApp_GetEClassCount
>9006	UnaryOp	& QERApp_GetEClassCount
>9007	Identifier	QERApp_GetEClassCount
>9008	UnaryOperator	&
>9009	PtrMemberAccess	pTable -> m_pfnGetEClassCount
>9010	Identifier	m_pfnGetEClassCount
>9011	Identifier	pTable
>9012	ExpressionStatement	 
>9013	AssignmentExpr	pTable -> m_pfnSetCurrentTexture = & QERApp_SetCurrentTexture
>9014	UnaryOp	& QERApp_SetCurrentTexture
>9015	Identifier	QERApp_SetCurrentTexture
>9016	UnaryOperator	&
>9017	PtrMemberAccess	pTable -> m_pfnSetCurrentTexture
>9018	Identifier	m_pfnSetCurrentTexture
>9019	Identifier	pTable
>9020	ExpressionStatement	 
>9021	AssignmentExpr	pTable -> m_pfnGetCurrentTexture = & QERApp_GetCurrentTexture
>9022	UnaryOp	& QERApp_GetCurrentTexture
>9023	Identifier	QERApp_GetCurrentTexture
>9024	UnaryOperator	&
>9025	PtrMemberAccess	pTable -> m_pfnGetCurrentTexture
>9026	Identifier	m_pfnGetCurrentTexture
>9027	Identifier	pTable
>9028	ExpressionStatement	 
>9029	AssignmentExpr	pTable -> m_pfnGetTexture = & QERApp_GetTexture
>9030	UnaryOp	& QERApp_GetTexture
>9031	Identifier	QERApp_GetTexture
>9032	UnaryOperator	&
>9033	PtrMemberAccess	pTable -> m_pfnGetTexture
>9034	Identifier	m_pfnGetTexture
>9035	Identifier	pTable
>9036	ExpressionStatement	 
>9037	AssignmentExpr	pTable -> m_pfnTextureCount = & QERApp_TextureCount
>9038	UnaryOp	& QERApp_TextureCount
>9039	Identifier	QERApp_TextureCount
>9040	UnaryOperator	&
>9041	PtrMemberAccess	pTable -> m_pfnTextureCount
>9042	Identifier	m_pfnTextureCount
>9043	Identifier	pTable
>9044	ExpressionStatement	 
>9045	AssignmentExpr	pTable -> m_pfnGetActiveBrushHandle = & QERApp_GetActiveBrushHandle
>9046	UnaryOp	& QERApp_GetActiveBrushHandle
>9047	Identifier	QERApp_GetActiveBrushHandle
>9048	UnaryOperator	&
>9049	PtrMemberAccess	pTable -> m_pfnGetActiveBrushHandle
>9050	Identifier	m_pfnGetActiveBrushHandle
>9051	Identifier	pTable
>9052	ExpressionStatement	 
>9053	AssignmentExpr	pTable -> m_pfnReleaseActiveBrushHandles = & QERApp_ReleaseActiveBrushHandles
>9054	UnaryOp	& QERApp_ReleaseActiveBrushHandles
>9055	Identifier	QERApp_ReleaseActiveBrushHandles
>9056	UnaryOperator	&
>9057	PtrMemberAccess	pTable -> m_pfnReleaseActiveBrushHandles
>9058	Identifier	m_pfnReleaseActiveBrushHandles
>9059	Identifier	pTable
>9060	ExpressionStatement	 
>9061	AssignmentExpr	pTable -> m_pfnAllocateActiveBrushHandles = & QERApp_AllocateActiveBrushHandles
>9062	UnaryOp	& QERApp_AllocateActiveBrushHandles
>9063	Identifier	QERApp_AllocateActiveBrushHandles
>9064	UnaryOperator	&
>9065	PtrMemberAccess	pTable -> m_pfnAllocateActiveBrushHandles
>9066	Identifier	m_pfnAllocateActiveBrushHandles
>9067	Identifier	pTable
>9068	ExpressionStatement	 
>9069	AssignmentExpr	pTable -> m_pfnActiveBrushCount = & QERApp_ActiveBrushCount
>9070	UnaryOp	& QERApp_ActiveBrushCount
>9071	Identifier	QERApp_ActiveBrushCount
>9072	UnaryOperator	&
>9073	PtrMemberAccess	pTable -> m_pfnActiveBrushCount
>9074	Identifier	m_pfnActiveBrushCount
>9075	Identifier	pTable
>9076	ExpressionStatement	 
>9077	AssignmentExpr	pTable -> m_pfnGetSelectedBrushHandle = & QERApp_GetSelectedBrushHandle
>9078	UnaryOp	& QERApp_GetSelectedBrushHandle
>9079	Identifier	QERApp_GetSelectedBrushHandle
>9080	UnaryOperator	&
>9081	PtrMemberAccess	pTable -> m_pfnGetSelectedBrushHandle
>9082	Identifier	m_pfnGetSelectedBrushHandle
>9083	Identifier	pTable
>9084	ExpressionStatement	 
>9085	AssignmentExpr	pTable -> m_pfnReleaseSelectedBrushHandles = & QERApp_ReleaseSelectedBrushHandles
>9086	UnaryOp	& QERApp_ReleaseSelectedBrushHandles
>9087	Identifier	QERApp_ReleaseSelectedBrushHandles
>9088	UnaryOperator	&
>9089	PtrMemberAccess	pTable -> m_pfnReleaseSelectedBrushHandles
>9090	Identifier	m_pfnReleaseSelectedBrushHandles
>9091	Identifier	pTable
>9092	ExpressionStatement	 
>9093	AssignmentExpr	pTable -> m_pfnAllocateSelectedBrushHandles = & QERApp_AllocateSelectedBrushHandles
>9094	UnaryOp	& QERApp_AllocateSelectedBrushHandles
>9095	Identifier	QERApp_AllocateSelectedBrushHandles
>9096	UnaryOperator	&
>9097	PtrMemberAccess	pTable -> m_pfnAllocateSelectedBrushHandles
>9098	Identifier	m_pfnAllocateSelectedBrushHandles
>9099	Identifier	pTable
>9100	ExpressionStatement	 
>9101	AssignmentExpr	pTable -> m_pfnSelectedBrushCount = & QERApp_SelectedBrushCount
>9102	UnaryOp	& QERApp_SelectedBrushCount
>9103	Identifier	QERApp_SelectedBrushCount
>9104	UnaryOperator	&
>9105	PtrMemberAccess	pTable -> m_pfnSelectedBrushCount
>9106	Identifier	m_pfnSelectedBrushCount
>9107	Identifier	pTable
>9108	ExpressionStatement	 
>9109	AssignmentExpr	pTable -> m_pfnPositionView = & QERApp_PositionView
>9110	UnaryOp	& QERApp_PositionView
>9111	Identifier	QERApp_PositionView
>9112	UnaryOperator	&
>9113	PtrMemberAccess	pTable -> m_pfnPositionView
>9114	Identifier	m_pfnPositionView
>9115	Identifier	pTable
>9116	ExpressionStatement	 
>9117	AssignmentExpr	pTable -> m_pfnHideInfoMsg = & QERApp_HideInfoMsg
>9118	UnaryOp	& QERApp_HideInfoMsg
>9119	Identifier	QERApp_HideInfoMsg
>9120	UnaryOperator	&
>9121	PtrMemberAccess	pTable -> m_pfnHideInfoMsg
>9122	Identifier	m_pfnHideInfoMsg
>9123	Identifier	pTable
>9124	ExpressionStatement	 
>9125	AssignmentExpr	pTable -> m_pfnInfoMsg = & QERApp_InfoMsg
>9126	UnaryOp	& QERApp_InfoMsg
>9127	Identifier	QERApp_InfoMsg
>9128	UnaryOperator	&
>9129	PtrMemberAccess	pTable -> m_pfnInfoMsg
>9130	Identifier	m_pfnInfoMsg
>9131	Identifier	pTable
>9132	ExpressionStatement	 
>9133	AssignmentExpr	pTable -> m_pfnSysMsg = & QERApp_SysMsg
>9134	UnaryOp	& QERApp_SysMsg
>9135	Identifier	QERApp_SysMsg
>9136	UnaryOperator	&
>9137	PtrMemberAccess	pTable -> m_pfnSysMsg
>9138	Identifier	m_pfnSysMsg
>9139	Identifier	pTable
>9140	ExpressionStatement	 
>9141	AssignmentExpr	pTable -> m_pfnGetPoints = & QERApp_GetPoints
>9142	UnaryOp	& QERApp_GetPoints
>9143	Identifier	QERApp_GetPoints
>9144	UnaryOperator	&
>9145	PtrMemberAccess	pTable -> m_pfnGetPoints
>9146	Identifier	m_pfnGetPoints
>9147	Identifier	pTable
>9148	ExpressionStatement	 
>9149	AssignmentExpr	pTable -> m_pfnDeleteSelection = & QERApp_DeleteSelection
>9150	UnaryOp	& QERApp_DeleteSelection
>9151	Identifier	QERApp_DeleteSelection
>9152	UnaryOperator	&
>9153	PtrMemberAccess	pTable -> m_pfnDeleteSelection
>9154	Identifier	m_pfnDeleteSelection
>9155	Identifier	pTable
>9156	ExpressionStatement	 
>9157	AssignmentExpr	pTable -> m_pfnDeselectAllBrushes = & QERApp_DeselectAllBrushes
>9158	UnaryOp	& QERApp_DeselectAllBrushes
>9159	Identifier	QERApp_DeselectAllBrushes
>9160	UnaryOperator	&
>9161	PtrMemberAccess	pTable -> m_pfnDeselectAllBrushes
>9162	Identifier	m_pfnDeselectAllBrushes
>9163	Identifier	pTable
>9164	ExpressionStatement	 
>9165	AssignmentExpr	pTable -> m_pfnDeselectBrush = & QERApp_DeselectBrush
>9166	UnaryOp	& QERApp_DeselectBrush
>9167	Identifier	QERApp_DeselectBrush
>9168	UnaryOperator	&
>9169	PtrMemberAccess	pTable -> m_pfnDeselectBrush
>9170	Identifier	m_pfnDeselectBrush
>9171	Identifier	pTable
>9172	ExpressionStatement	 
>9173	AssignmentExpr	pTable -> m_pfnSelectBrush = & QERApp_SelectBrush
>9174	UnaryOp	& QERApp_SelectBrush
>9175	Identifier	QERApp_SelectBrush
>9176	UnaryOperator	&
>9177	PtrMemberAccess	pTable -> m_pfnSelectBrush
>9178	Identifier	m_pfnSelectBrush
>9179	Identifier	pTable
>9180	ExpressionStatement	 
>9181	AssignmentExpr	pTable -> m_pfnBuildBrush = & QERApp_BuildBrush
>9182	UnaryOp	& QERApp_BuildBrush
>9183	Identifier	QERApp_BuildBrush
>9184	UnaryOperator	&
>9185	PtrMemberAccess	pTable -> m_pfnBuildBrush
>9186	Identifier	m_pfnBuildBrush
>9187	Identifier	pTable
>9188	ExpressionStatement	 
>9189	AssignmentExpr	pTable -> m_pfnTextureBrush = & QERApp_TextureBrush
>9190	UnaryOp	& QERApp_TextureBrush
>9191	Identifier	QERApp_TextureBrush
>9192	UnaryOperator	&
>9193	PtrMemberAccess	pTable -> m_pfnTextureBrush
>9194	Identifier	m_pfnTextureBrush
>9195	Identifier	pTable
>9196	ExpressionStatement	 
>9197	AssignmentExpr	pTable -> m_pfnDeleteFace = & QERApp_DeleteFace
>9198	UnaryOp	& QERApp_DeleteFace
>9199	Identifier	QERApp_DeleteFace
>9200	UnaryOperator	&
>9201	PtrMemberAccess	pTable -> m_pfnDeleteFace
>9202	Identifier	m_pfnDeleteFace
>9203	Identifier	pTable
>9204	ExpressionStatement	 
>9205	AssignmentExpr	pTable -> m_pfnSetFaceData = & QERApp_SetFaceData
>9206	UnaryOp	& QERApp_SetFaceData
>9207	Identifier	QERApp_SetFaceData
>9208	UnaryOperator	&
>9209	PtrMemberAccess	pTable -> m_pfnSetFaceData
>9210	Identifier	m_pfnSetFaceData
>9211	Identifier	pTable
>9212	ExpressionStatement	 
>9213	AssignmentExpr	pTable -> m_pfnGetFaceCount = & QERApp_GetFaceCount
>9214	UnaryOp	& QERApp_GetFaceCount
>9215	Identifier	QERApp_GetFaceCount
>9216	UnaryOperator	&
>9217	PtrMemberAccess	pTable -> m_pfnGetFaceCount
>9218	Identifier	m_pfnGetFaceCount
>9219	Identifier	pTable
>9220	ExpressionStatement	 
>9221	AssignmentExpr	pTable -> m_pfnGetFaceData = & QERApp_GetFaceData
>9222	UnaryOp	& QERApp_GetFaceData
>9223	Identifier	QERApp_GetFaceData
>9224	UnaryOperator	&
>9225	PtrMemberAccess	pTable -> m_pfnGetFaceData
>9226	Identifier	m_pfnGetFaceData
>9227	Identifier	pTable
>9228	ExpressionStatement	 
>9229	AssignmentExpr	pTable -> m_pfnAddFaceData = & QERApp_AddFaceData
>9230	UnaryOp	& QERApp_AddFaceData
>9231	Identifier	QERApp_AddFaceData
>9232	UnaryOperator	&
>9233	PtrMemberAccess	pTable -> m_pfnAddFaceData
>9234	Identifier	m_pfnAddFaceData
>9235	Identifier	pTable
>9236	ExpressionStatement	 
>9237	AssignmentExpr	pTable -> m_pfnAddFace = & QERApp_AddFace
>9238	UnaryOp	& QERApp_AddFace
>9239	Identifier	QERApp_AddFace
>9240	UnaryOperator	&
>9241	PtrMemberAccess	pTable -> m_pfnAddFace
>9242	Identifier	m_pfnAddFace
>9243	Identifier	pTable
>9244	ExpressionStatement	 
>9245	AssignmentExpr	pTable -> m_pfnCommitBrushHandle = & QERApp_CommitBrushHandleToMap
>9246	UnaryOp	& QERApp_CommitBrushHandleToMap
>9247	Identifier	QERApp_CommitBrushHandleToMap
>9248	UnaryOperator	&
>9249	PtrMemberAccess	pTable -> m_pfnCommitBrushHandle
>9250	Identifier	m_pfnCommitBrushHandle
>9251	Identifier	pTable
>9252	ExpressionStatement	 
>9253	AssignmentExpr	pTable -> m_pfnDeleteBrushHandle = & QERApp_DeleteBrushHandle
>9254	UnaryOp	& QERApp_DeleteBrushHandle
>9255	Identifier	QERApp_DeleteBrushHandle
>9256	UnaryOperator	&
>9257	PtrMemberAccess	pTable -> m_pfnDeleteBrushHandle
>9258	Identifier	m_pfnDeleteBrushHandle
>9259	Identifier	pTable
>9260	ExpressionStatement	 
>9261	AssignmentExpr	pTable -> m_pfnCreateBrushHandle = & QERApp_CreateBrushHandle
>9262	UnaryOp	& QERApp_CreateBrushHandle
>9263	Identifier	QERApp_CreateBrushHandle
>9264	UnaryOperator	&
>9265	PtrMemberAccess	pTable -> m_pfnCreateBrushHandle
>9266	Identifier	m_pfnCreateBrushHandle
>9267	Identifier	pTable
>9268	ExpressionStatement	 
>9269	AssignmentExpr	pTable -> m_pfnCreateBrush = & QERApp_CreateBrush
>9270	UnaryOp	& QERApp_CreateBrush
>9271	Identifier	QERApp_CreateBrush
>9272	UnaryOperator	&
>9273	PtrMemberAccess	pTable -> m_pfnCreateBrush
>9274	Identifier	m_pfnCreateBrush
>9275	Identifier	pTable
>9276	Condition	 
>9277	RelationalExpression	pTable -> m_fVersion >= QER_PLUG_VERSION_1
>9278	Identifier	QER_PLUG_VERSION_1
>9279	PtrMemberAccess	pTable -> m_fVersion
>9280	Identifier	m_fVersion
>9281	Identifier	pTable
>9282	IfStatement	if ( pTable -> m_fVersion != QER_PLUG_VERSION )
>9283	CompoundStatement	 
>9284	ExpressionStatement	 
>9285	CallExpression	Sys_Printf ( \"Radiant plugin manager was built with version %.2f, Plugin %s is version %.2f\n\" , QER_PLUG_VERSION , \
>9286	ArgumentList	\"Radiant plugin manager was built with version %.2f, Plugin %s is version %.2f\n\"
>9287	Argument	pTable -> m_fVersion
>9288	PtrMemberAccess	pTable -> m_fVersion
>9289	Identifier	m_fVersion
>9290	Identifier	pTable
>9291	Argument	pPlug -> getVersionStr ( )
>9292	CallExpression	pPlug -> getVersionStr ( )
>9293	ArgumentList	 
>9294	Callee	pPlug -> getVersionStr
>9295	PtrMemberAccess	pPlug -> getVersionStr
>9296	Identifier	getVersionStr
>9297	Identifier	pPlug
>9298	Argument	QER_PLUG_VERSION
>9299	Identifier	QER_PLUG_VERSION
>9300	Argument	\"Radiant plugin manager was built with version %.2f, Plugin %s is version %.2f\n\"
>9301	PrimaryExpression	\"Radiant plugin manager was built with version %.2f, Plugin %s is version %.2f\n\"
>9302	Callee	Sys_Printf
>9303	Identifier	Sys_Printf
>9304	Condition	 
>9305	EqualityExpression	pTable -> m_fVersion != QER_PLUG_VERSION
>9306	Identifier	QER_PLUG_VERSION
>9307	PtrMemberAccess	pTable -> m_fVersion
>9308	Identifier	m_fVersion
>9309	Identifier	pTable
>9310	Condition	 
>9311	EqualityExpression	pTable != NULL
>9312	Identifier	NULL
>9313	Identifier	pTable
>9314	ExpressionStatement	 
>9315	CallExpression	pPlug -> getFuncTable ( )
>9316	ArgumentList	 
>9317	Callee	pPlug -> getFuncTable
>9318	PtrMemberAccess	pPlug -> getFuncTable
>9319	Identifier	getFuncTable
>9320	Identifier	pPlug
>9321	Statement	 
>9322	Statement	 
>9323	Statement	 
>9324	Statement	 
>9325	Statement	 
>9326	Statement	 
>9327	Statement	 
>9328	Statement	 
>9329	Statement	 
>9484	FunctionDef	CPlugInManager 
>9485	ParameterList	HMODULE hPlug
>9486	Parameter	 
>9487	Identifier	hPlug
>9488	ParameterType	HMODULE
>9489	ReturnType	CPlugIn *
>9490	CompoundStatement	 
>9491	ReturnStatement	 
>9492	Identifier	NULL
>9493	ForStatement	for ( i = 0 ; i != m_PlugIns . GetSize ( ) ; i ++ )
>9494	CompoundStatement	 
>9495	ExpressionStatement	 
>9496	ArrayIndexing	m_PlugIns [ i ]
>9497	Identifier	i
>9498	Identifier	m_PlugIns
>9499	Statement	 
>9500	Statement	 
>9501	Statement	 
>9502	Statement	 
>9503	Statement	 
>9504	Statement	 
>9505	Statement	 
>9506	Statement	 
>9507	Statement	 
>9508	Statement	 
>9509	Statement	 
>9510	Statement	 
>9511	Statement	 
>9512	Statement	 
>9513	Statement	 
>9514	Statement	 
>9515	Statement	 
>9516	Statement	 
>9517	Statement	 
>9518	Statement	 
>9519	Statement	 
>9520	Statement	 
>9521	Statement	 
>9522	Statement	 
>9523	Statement	 
>9524	Statement	 
>9525	IncDecOp	 
>9526	IncDec	++
>9527	Identifier	i
>9528	Condition	 
>9529	EqualityExpression	i != m_PlugIns . GetSize ( )
>9530	CallExpression	m_PlugIns . GetSize ( )
>9531	ArgumentList	 
>9532	Callee	m_PlugIns . GetSize
>9533	MemberAccess	m_PlugIns . GetSize
>9534	Identifier	GetSize
>9535	Identifier	m_PlugIns
>9536	Identifier	i
>9537	ForInit	 
>9538	AssignmentExpr	i = 0
>9539	PrimaryExpression	0
>9540	Identifier	i
>9541	IdentifierDeclStatement	 
>9542	IdentifierDecl	i
>9543	Identifier	i
>9544	IdentifierDeclType	int
<5=7,6
<7=16,12,8
<8=9
<9=11,10
<12=13
<13=15,14
<16=17
<17=19,18
<28=30,29
<30=31
<31=32
<32=34,33
<34=35
<39=45,44,40
<40=41
<41=43,42
<45=287,281,275,270,266,259,255,239,46
<46=233,47
<47=55,48
<48=49
<49=53,50
<50=51
<51=52
<53=54
<55=71,56
<56=57
<57=61,58
<58=60,59
<61=69,62
<62=67,63
<63=64
<64=66,65
<67=68
<69=70
<71=218,211,72
<72=202,78,73
<73=74
<74=77,75
<75=76
<78=79
<79=195,85,80
<80=81
<81=84,82
<82=83
<85=186,179,172,165,156,103,86
<86=94,87
<87=88
<88=89
<89=91,90
<91=93,92
<94=95
<95=97,96
<97=99,98
<99=100
<100=102,101
<103=147,104
<104=141,105
<105=132,106
<106=116,107
<107=108
<108=112,109
<109=110
<110=111
<112=113
<113=115,114
<116=117
<117=131,130,118
<118=129,119
<119=127,120
<120=123,121
<121=122
<123=124
<124=126,125
<127=128
<132=133
<133=135,134
<135=137,136
<137=138
<138=140,139
<141=142
<142=144,143
<144=146,145
<147=148
<148=150,149
<150=152,151
<152=153
<153=155,154
<156=157
<157=161,158
<158=159
<159=160
<161=162
<162=164,163
<165=166
<166=168,167
<168=169
<169=171,170
<172=173
<173=175,174
<175=176
<176=178,177
<179=180
<180=182,181
<182=183
<183=185,184
<186=187
<187=191,188
<188=189
<189=190
<191=192
<192=194,193
<195=196
<196=200,197
<197=198
<198=199
<200=201
<202=203
<203=207,204
<204=205
<205=206
<207=208
<208=210,209
<211=212
<212=217,216,213
<213=215,214
<218=219
<219=229,220
<220=227,225,221
<221=222
<222=224,223
<225=226
<227=228
<229=230
<230=232,231
<233=234
<234=238,235
<235=237,236
<239=240
<240=254,253,241
<241=252,242
<242=250,243
<243=248,244
<244=245
<245=247,246
<248=249
<250=251
<255=256
<256=258,257
<259=260
<260=265,264,261
<261=263,262
<266=267
<267=269,268
<270=271
<271=274,273,272
<275=276
<276=278,277
<278=280,279
<281=282
<282=284,283
<284=286,285
<287=288
<288=290,289
<290=291
<327=330,329,328
<330=508,462,455,412,405,362,355,348,331
<331=339,332
<332=333
<333=337,334
<334=335
<335=336
<337=338
<339=340
<340=342,341
<342=344,343
<344=345
<345=347,346
<348=349
<349=351,350
<351=352
<352=354,353
<355=356
<356=358,357
<358=359
<359=361,360
<362=401,392,389,363
<363=388,387,386,385,384,383,382,381,380,371,364
<364=365
<365=369,366
<366=367
<367=368
<369=370
<371=372
<372=376,373
<373=374
<374=375
<376=377
<377=379,378
<389=391,390
<392=393
<393=400,394
<394=396,395
<396=397
<397=399,398
<401=402
<402=404,403
<405=406
<406=408,407
<408=409
<409=411,410
<412=451,442,439,413
<413=438,437,436,435,434,433,432,431,430,421,414
<414=415
<415=419,416
<416=417
<417=418
<419=420
<421=422
<422=426,423
<423=424
<424=425
<426=427
<427=429,428
<439=441,440
<442=443
<443=450,444
<444=446,445
<446=447
<447=449,448
<451=452
<452=454,453
<455=456
<456=458,457
<458=459
<459=461,460
<462=504,495,492,463
<463=491,490,489,488,487,486,485,484,483,474,467,466,464
<464=465
<467=468
<468=470,469
<470=471
<471=473,472
<474=475
<475=479,476
<476=477
<477=478
<479=480
<480=482,481
<492=494,493
<495=496
<496=503,497
<497=499,498
<499=500
<500=502,501
<504=505
<505=507,506
<508=509
<509=511,510
<528=537,536,529
<529=533,530
<530=532,531
<533=535,534
<537=538
<538=653,644,641,539
<539=640,639,638,637,636,635,634,633,632,623,540
<540=614,541
<541=607,563,543,542
<543=544
<544=559,545
<545=557,555,553,546
<546=547
<547=551,548
<548=549
<549=550
<551=552
<553=554
<555=556
<557=558
<559=560
<560=562,561
<563=599,575,564
<564=565
<565=566
<566=567
<567=573,568
<568=571,569
<569=570
<571=572
<573=574
<575=585,576
<576=577
<577=583,578
<578=581,579
<579=580
<581=582
<583=584
<585=586
<586=596,587
<587=593,588
<588=590,589
<590=592,591
<593=595,594
<596=598,597
<599=600
<600=604,601
<601=603,602
<604=606,605
<607=611,608
<608=610,609
<611=613,612
<614=615
<615=619,616
<616=617
<617=618
<619=620
<620=622,621
<623=624
<624=628,625
<625=626
<626=627
<628=629
<629=631,630
<641=643,642
<644=645
<645=652,646
<646=648,647
<648=649
<649=651,650
<653=654
<654=655
<655=660,659,656
<656=658,657
<680=689,688,681
<681=685,682
<682=684,683
<685=687,686
<689=753,731,722,715,704,697,690
<690=691
<691=695,692
<692=693
<693=694
<695=696
<697=698
<698=702,699
<699=700
<700=701
<702=703
<704=705
<705=713,706
<706=711,707
<707=708
<708=710,709
<711=712
<713=714
<715=716
<716=720,717
<717=718
<718=719
<720=721
<722=723
<723=729,724
<724=727,725
<725=726
<727=728
<729=730
<731=732
<732=752,751,733
<733=750,734
<734=748,735
<735=746,744,736
<736=737
<737=743,738
<738=740,739
<740=742,741
<744=745
<746=747
<748=749
<753=754
<754=761,755
<755=756
<756=757
<757=759,758
<759=760
<761=762
<779=782,781,780
<782=804,796,787,783
<783=784
<784=786,785
<787=788
<788=792,789
<789=790
<790=791
<792=793
<793=795,794
<796=797
<797=801,798
<798=800,799
<801=803,802
<804=805
<805=813,812,806
<806=811,807
<807=809,808
<809=810
<823=829,828,824
<824=825
<825=827,826
<829=959,951,943,935,830
<830=927,923,920,831
<831=832
<832=912,901,898,833
<833=897,896,895,894,893,892,891,890,889,878,877,876,875,874,873,872,871,870,869,868,867,866,865,834
<834=848,841,836,835
<836=837
<837=839,838
<839=840
<841=842
<842=846,843
<843=844
<844=845
<846=847
<848=861,849
<849=850
<850=851
<851=855,852
<852=853
<853=854
<855=856
<856=858,857
<858=860,859
<861=862
<862=864,863
<878=879
<879=883,880
<880=881
<881=882
<883=884
<884=886,885
<886=888,887
<898=900,899
<901=902
<902=911,903
<903=905,904
<905=906
<906=908,907
<908=910,909
<912=913
<913=914
<914=919,918,915
<915=917,916
<920=922,921
<923=924
<924=926,925
<927=928
<928=929
<929=934,933,930
<930=932,931
<935=936
<936=940,937
<937=939,938
<940=942,941
<943=944
<944=948,945
<945=947,946
<948=950,949
<951=952
<952=956,953
<953=955,954
<956=958,957
<959=960
<960=963,962,961
<980=986,985,981
<981=982
<982=984,983
<986=1095,998,994,987
<987=988
<988=992,989
<989=990
<990=991
<992=993
<994=995
<995=997,996
<998=1087,1078,1075,999
<999=1074,1073,1072,1071,1070,1069,1068,1067,1066,1057,1056,1055,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,1044,1000
<1000=1035,1026,1019,1008,1001
<1001=1002
<1002=1006,1003
<1003=1004
<1004=1005
<1006=1007
<1008=1009
<1009=1017,1010
<1010=1015,1011
<1011=1012
<1012=1014,1013
<1015=1016
<1017=1018
<1019=1020
<1020=1024,1021
<1021=1022
<1022=1023
<1024=1025
<1026=1027
<1027=1033,1028
<1028=1031,1029
<1029=1030
<1031=1032
<1033=1034
<1035=1036
<1036=1040,1037
<1037=1038
<1038=1039
<1040=1041
<1041=1043,1042
<1057=1058
<1058=1062,1059
<1059=1060
<1060=1061
<1062=1063
<1063=1065,1064
<1075=1077,1076
<1078=1079
<1079=1086,1080
<1080=1082,1081
<1082=1083
<1083=1085,1084
<1087=1088
<1088=1089
<1089=1094,1093,1090
<1090=1092,1091
<1095=1096
<1096=1098,1097
<1113=1128,1127,1114
<1114=1124,1121,1118,1115
<1115=1117,1116
<1118=1120,1119
<1121=1123,1122
<1124=1126,1125
<1128=1224,1129
<1129=1220,1130
<1130=1210,1200,1192,1184,1176,1170,1157,1144,1131
<1131=1132
<1132=1142,1133
<1133=1140,1134
<1134=1135
<1135=1137,1136
<1137=1139,1138
<1140=1141
<1142=1143
<1144=1145
<1145=1155,1146
<1146=1153,1147
<1147=1148
<1148=1150,1149
<1150=1152,1151
<1153=1154
<1155=1156
<1157=1158
<1158=1168,1159
<1159=1166,1160
<1160=1161
<1161=1163,1162
<1163=1165,1164
<1166=1167
<1168=1169
<1170=1171
<1171=1173,1172
<1173=1175,1174
<1176=1177
<1177=1181,1178
<1178=1180,1179
<1181=1183,1182
<1184=1185
<1185=1187,1186
<1187=1189,1188
<1189=1191,1190
<1192=1193
<1193=1195,1194
<1195=1197,1196
<1197=1199,1198
<1200=1201
<1201=1207,1202
<1202=1204,1203
<1204=1206,1205
<1207=1209,1208
<1210=1211
<1211=1219,1218,1212
<1212=1217,1213
<1213=1215,1214
<1215=1216
<1220=1221
<1221=1223,1222
<1224=1225
<1225=1235,1234,1226
<1226=1233,1227
<1227=1231,1228
<1228=1229
<1229=1230
<1231=1232
<1263=1269,1268,1264
<1264=1265
<1265=1267,1266
<1269=1381,1373,1365,1357,1349,1272,1270
<1270=1271
<1272=1341,1337,1334,1273
<1273=1274
<1274=1326,1315,1312,1275
<1275=1311,1310,1309,1308,1307,1306,1305,1304,1303,1292,1291,1290,1289,1288,1287,1286,1285,1284,1283,1282,1281,1280,1279,1276
<1276=1277
<1277=1278
<1292=1293
<1293=1297,1294
<1294=1295
<1295=1296
<1297=1298
<1298=1300,1299
<1300=1302,1301
<1312=1314,1313
<1315=1316
<1316=1325,1317
<1317=1319,1318
<1319=1320
<1320=1322,1321
<1322=1324,1323
<1326=1327
<1327=1328
<1328=1333,1332,1329
<1329=1331,1330
<1334=1336,1335
<1337=1338
<1338=1340,1339
<1341=1342
<1342=1343
<1343=1348,1347,1344
<1344=1346,1345
<1349=1350
<1350=1354,1351
<1351=1353,1352
<1354=1356,1355
<1357=1358
<1358=1362,1359
<1359=1361,1360
<1362=1364,1363
<1365=1366
<1366=1370,1367
<1367=1369,1368
<1370=1372,1371
<1373=1374
<1374=1378,1375
<1375=1377,1376
<1378=1380,1379
<1381=1382
<1382=1385,1384,1383
<1404=1410,1409,1405
<1405=1406
<1406=1408,1407
<1410=1413,1411
<1411=1412
<1413=1501,1414
<1414=1499,1497,1464,1457,1456,1454,1423,1416,1415
<1416=1417
<1417=1421,1418
<1418=1419
<1419=1420
<1421=1422
<1423=1445,1424
<1424=1444,1443,1442,1441,1440,1439,1438,1437,1436,1427,1425
<1425=1426
<1427=1428
<1428=1432,1429
<1429=1430
<1430=1431
<1432=1433
<1433=1435,1434
<1445=1446
<1446=1453,1447
<1447=1449,1448
<1449=1450
<1450=1452,1451
<1454=1455
<1457=1458
<1458=1462,1459
<1459=1460
<1460=1461
<1462=1463
<1464=1488,1465
<1465=1487,1486,1485,1484,1483,1482,1481,1480,1479,1470,1466
<1466=1467
<1467=1469,1468
<1470=1471
<1471=1475,1472
<1472=1473
<1473=1474
<1475=1476
<1476=1478,1477
<1488=1489
<1489=1496,1490
<1490=1492,1491
<1492=1493
<1493=1495,1494
<1497=1498
<1499=1500
<1501=1502
<1517=1520,1519,1518
<1520=1533,1521
<1521=1522
<1522=1524,1523
<1524=1525
<1525=1527,1526
<1527=1529,1528
<1529=1530
<1530=1532,1531
<1533=1534
<1534=1541,1535
<1535=1536
<1536=1537
<1537=1539,1538
<1539=1540
<1541=1542
<1551=1557,1556,1552
<1552=1553
<1553=1555,1554
<1557=1572,1558
<1558=1559
<1559=1563,1560
<1560=1561
<1561=1562
<1563=1564
<1564=1566,1565
<1566=1568,1567
<1568=1569
<1569=1571,1570
<1572=1573
<1573=1580,1574
<1574=1575
<1575=1576
<1576=1578,1577
<1578=1579
<1580=1581
<1590=1596,1595,1591
<1591=1592
<1592=1594,1593
<1596=1611,1597
<1597=1598
<1598=1602,1599
<1599=1600
<1600=1601
<1602=1603
<1603=1605,1604
<1605=1607,1606
<1607=1608
<1608=1610,1609
<1611=1612
<1612=1619,1613
<1613=1614
<1614=1615
<1615=1617,1616
<1617=1618
<1619=1620
<1629=1644,1643,1630
<1630=1640,1637,1634,1631
<1631=1633,1632
<1634=1636,1635
<1637=1639,1638
<1640=1642,1641
<1644=1665,1645
<1645=1646
<1646=1656,1647
<1647=1654,1652,1650,1648
<1648=1649
<1650=1651
<1652=1653
<1654=1655
<1656=1657
<1657=1659,1658
<1659=1661,1660
<1661=1662
<1662=1664,1663
<1665=1666
<1666=1673,1667
<1667=1668
<1668=1669
<1669=1671,1670
<1671=1672
<1673=1674
<1686=1689,1688,1687
<1689=1695,1690
<1690=1691
<1691=1693,1692
<1693=1694
<1695=1696
<1696=1703,1697
<1697=1698
<1698=1699
<1699=1701,1700
<1701=1702
<1703=1704
<1709=1715,1714,1710
<1710=1711
<1711=1713,1712
<1715=1737,1730,1716
<1716=1717
<1717=1728,1718
<1718=1719
<1719=1720
<1720=1724,1721
<1721=1722
<1722=1723
<1724=1725
<1725=1727,1726
<1728=1729
<1730=1731
<1731=1736,1735,1732
<1732=1734,1733
<1737=1738
<1738=1745,1739
<1739=1740
<1740=1741
<1741=1743,1742
<1743=1744
<1745=1746
<1754=1760,1759,1755
<1755=1756
<1756=1758,1757
<1760=1782,1775,1761
<1761=1762
<1762=1773,1763
<1763=1764
<1764=1765
<1765=1769,1766
<1766=1767
<1767=1768
<1769=1770
<1770=1772,1771
<1773=1774
<1775=1776
<1776=1781,1780,1777
<1777=1779,1778
<1782=1783
<1783=1790,1784
<1784=1785
<1785=1786
<1786=1788,1787
<1788=1789
<1790=1791
<1799=1805,1804,1800
<1800=1801
<1801=1803,1802
<1805=1813,1806
<1806=1807
<1807=1811,1808
<1808=1809
<1809=1810
<1811=1812
<1813=1814
<1814=1821,1815
<1815=1816
<1816=1817
<1817=1819,1818
<1819=1820
<1821=1822
<1828=1831,1830,1829
<1831=1837,1832
<1832=1833
<1833=1835,1834
<1835=1836
<1837=1838
<1838=1845,1839
<1839=1840
<1840=1841
<1841=1843,1842
<1843=1844
<1845=1846
<1851=1860,1859,1852
<1852=1856,1853
<1853=1855,1854
<1856=1858,1857
<1860=1882,1868,1861
<1861=1862
<1862=1866,1863
<1863=1864
<1864=1865
<1866=1867
<1868=1869
<1869=1873,1870
<1870=1871
<1871=1872
<1873=1874
<1874=1876,1875
<1876=1878,1877
<1878=1879
<1879=1881,1880
<1882=1883
<1883=1890,1884
<1884=1885
<1885=1886
<1886=1888,1887
<1888=1889
<1890=1891
<1908=1917,1916,1909
<1909=1913,1910
<1910=1912,1911
<1913=1915,1914
<1917=1926,1922,1918
<1918=1919
<1919=1921,1920
<1922=1923
<1923=1925,1924
<1926=1927
<1927=1929,1928
<1939=1951,1950,1940
<1940=1947,1944,1941
<1941=1943,1942
<1944=1946,1945
<1947=1949,1948
<1951=2124,2117,2113,2109,2105,2094,2050,2045,2039,2033,1952
<1952=2027,1953
<1953=2021,2020,2019,2018,2017,2016,2015,2014,2013,2012,2001,1992,1954
<1954=1984,1980,1977,1955
<1955=1960,1956
<1956=1957
<1957=1959,1958
<1960=1961
<1961=1975,1962
<1962=1973,1967,1963
<1963=1964
<1964=1966,1965
<1967=1968
<1968=1972,1969
<1969=1971,1970
<1973=1974
<1975=1976
<1977=1979,1978
<1980=1981
<1981=1983,1982
<1984=1985
<1985=1986
<1986=1991,1990,1987
<1987=1989,1988
<1992=1993
<1993=2000,1999,1994
<1994=1998,1995
<1995=1997,1996
<2001=2002
<2002=2010,2003
<2003=2004
<2004=2005
<2005=2009,2006
<2006=2008,2007
<2010=2011
<2021=2022
<2022=2024,2023
<2024=2026,2025
<2027=2028
<2028=2032,2029
<2029=2031,2030
<2033=2034
<2034=2036,2035
<2036=2038,2037
<2039=2040
<2040=2042,2041
<2042=2044,2043
<2045=2046
<2046=2048,2047
<2048=2049
<2050=2092,2051
<2051=2088,2087,2086,2085,2084,2083,2082,2081,2080,2079,2078,2077,2076,2075,2074,2073,2072,2071,2052
<2052=2062,2053
<2053=2054
<2054=2060,2055
<2055=2056
<2056=2057
<2057=2059,2058
<2060=2061
<2062=2063
<2063=2069,2064
<2064=2065
<2065=2066
<2066=2068,2067
<2069=2070
<2088=2089
<2089=2091,2090
<2092=2093
<2094=2095
<2095=2103,2096
<2096=2101,2097
<2097=2098
<2098=2100,2099
<2101=2102
<2103=2104
<2105=2106
<2106=2108,2107
<2109=2110
<2110=2112,2111
<2113=2114
<2114=2116,2115
<2117=2118
<2118=2122,2119
<2119=2120
<2120=2121
<2122=2123
<2124=2125
<2125=2132,2126
<2126=2127
<2127=2128
<2128=2130,2129
<2130=2131
<2132=2133
<2158=2167,2166,2159
<2159=2163,2160
<2160=2162,2161
<2163=2165,2164
<2167=2386,2367,2168
<2168=2363,2169
<2169=2353,2343,2333,2323,2313,2303,2289,2275,2261,2247,2234,2226,2220,2205,2190,2175,2170
<2170=2171
<2171=2173,2172
<2173=2174
<2175=2176
<2176=2188,2177
<2177=2184,2178
<2178=2179
<2179=2181,2180
<2181=2183,2182
<2184=2185
<2185=2187,2186
<2188=2189
<2190=2191
<2191=2203,2192
<2192=2199,2193
<2193=2194
<2194=2196,2195
<2196=2198,2197
<2199=2200
<2200=2202,2201
<2203=2204
<2205=2206
<2206=2218,2207
<2207=2214,2208
<2208=2209
<2209=2211,2210
<2211=2213,2212
<2214=2215
<2215=2217,2216
<2218=2219
<2220=2221
<2221=2223,2222
<2223=2225,2224
<2226=2227
<2227=2231,2228
<2228=2230,2229
<2231=2233,2232
<2234=2235
<2235=2241,2236
<2236=2237
<2237=2238
<2238=2240,2239
<2241=2242
<2242=2244,2243
<2244=2246,2245
<2247=2248
<2248=2254,2249
<2249=2251,2250
<2251=2253,2252
<2254=2256,2255
<2256=2258,2257
<2258=2260,2259
<2261=2262
<2262=2268,2263
<2263=2265,2264
<2265=2267,2266
<2268=2270,2269
<2270=2272,2271
<2272=2274,2273
<2275=2276
<2276=2282,2277
<2277=2279,2278
<2279=2281,2280
<2282=2284,2283
<2284=2286,2285
<2286=2288,2287
<2289=2290
<2290=2296,2291
<2291=2293,2292
<2293=2295,2294
<2296=2298,2297
<2298=2300,2299
<2300=2302,2301
<2303=2304
<2304=2308,2305
<2305=2307,2306
<2308=2310,2309
<2310=2312,2311
<2313=2314
<2314=2318,2315
<2315=2317,2316
<2318=2320,2319
<2320=2322,2321
<2323=2324
<2324=2328,2325
<2325=2327,2326
<2328=2330,2329
<2330=2332,2331
<2333=2334
<2334=2338,2335
<2335=2337,2336
<2338=2340,2339
<2340=2342,2341
<2343=2344
<2344=2350,2345
<2345=2347,2346
<2347=2349,2348
<2350=2352,2351
<2353=2354
<2354=2362,2361,2355
<2355=2360,2356
<2356=2358,2357
<2358=2359
<2363=2364
<2364=2366,2365
<2367=2368
<2368=2385,2384,2369
<2369=2383,2370
<2370=2374,2371
<2371=2372
<2372=2373
<2374=2375
<2375=2377,2376
<2377=2379,2378
<2379=2380
<2380=2382,2381
<2386=2387
<2387=2394,2388
<2388=2389
<2389=2390
<2390=2392,2391
<2392=2393
<2394=2395
<2444=2450,2449,2445
<2445=2446
<2446=2448,2447
<2450=2508,2501,2482,2453,2451
<2451=2452
<2453=2478,2454
<2454=2455
<2455=2468,2466,2461,2456
<2456=2457
<2457=2458
<2458=2460,2459
<2461=2465,2462
<2462=2464,2463
<2466=2467
<2468=2469
<2469=2470
<2470=2477,2476,2471
<2471=2475,2472
<2472=2474,2473
<2478=2479
<2479=2481,2480
<2482=2483
<2483=2500,2499,2484
<2484=2498,2485
<2485=2489,2486
<2486=2487
<2487=2488
<2489=2490
<2490=2492,2491
<2492=2494,2493
<2494=2495
<2495=2497,2496
<2501=2502
<2502=2507,2506,2503
<2503=2505,2504
<2508=2509
<2509=2516,2510
<2510=2511
<2511=2512
<2512=2514,2513
<2514=2515
<2516=2517
<2535=2544,2543,2536
<2536=2540,2537
<2537=2539,2538
<2540=2542,2541
<2544=2790,2789,2785,2778,2759,2547,2545
<2545=2546
<2547=2755,2548
<2548=2549
<2549=2745,2743,2738,2550
<2550=2721,2555,2551
<2551=2552
<2552=2554,2553
<2555=2717,2556
<2556=2707,2697,2687,2673,2659,2645,2631,2621,2606,2591,2576,2561,2557
<2557=2558
<2558=2560,2559
<2561=2562
<2562=2574,2563
<2563=2568,2564
<2564=2565
<2565=2567,2566
<2568=2569
<2569=2571,2570
<2571=2573,2572
<2574=2575
<2576=2577
<2577=2589,2578
<2578=2583,2579
<2579=2580
<2580=2582,2581
<2583=2584
<2584=2586,2585
<2586=2588,2587
<2589=2590
<2591=2592
<2592=2604,2593
<2593=2598,2594
<2594=2595
<2595=2597,2596
<2598=2599
<2599=2601,2600
<2601=2603,2602
<2604=2605
<2606=2607
<2607=2619,2608
<2608=2615,2609
<2609=2610
<2610=2612,2611
<2612=2614,2613
<2615=2616
<2616=2618,2617
<2619=2620
<2621=2622
<2622=2628,2623
<2623=2625,2624
<2625=2627,2626
<2628=2630,2629
<2631=2632
<2632=2640,2633
<2633=2635,2634
<2635=2637,2636
<2637=2639,2638
<2640=2642,2641
<2642=2644,2643
<2645=2646
<2646=2654,2647
<2647=2649,2648
<2649=2651,2650
<2651=2653,2652
<2654=2656,2655
<2656=2658,2657
<2659=2660
<2660=2668,2661
<2661=2663,2662
<2663=2665,2664
<2665=2667,2666
<2668=2670,2669
<2670=2672,2671
<2673=2674
<2674=2682,2675
<2675=2677,2676
<2677=2679,2678
<2679=2681,2680
<2682=2684,2683
<2684=2686,2685
<2687=2688
<2688=2694,2689
<2689=2691,2690
<2691=2693,2692
<2694=2696,2695
<2697=2698
<2698=2704,2699
<2699=2701,2700
<2701=2703,2702
<2704=2706,2705
<2707=2708
<2708=2714,2709
<2709=2711,2710
<2711=2713,2712
<2714=2716,2715
<2717=2718
<2718=2720,2719
<2721=2732,2722
<2722=2725,2723
<2723=2724
<2725=2726
<2726=2730,2727
<2727=2728
<2728=2729
<2730=2731
<2732=2733
<2733=2737,2734
<2734=2736,2735
<2738=2742,2739
<2739=2741,2740
<2743=2744
<2745=2746
<2746=2747
<2747=2754,2753,2748
<2748=2752,2749
<2749=2751,2750
<2755=2756
<2756=2758,2757
<2759=2760
<2760=2777,2776,2761
<2761=2775,2762
<2762=2766,2763
<2763=2764
<2764=2765
<2766=2767
<2767=2769,2768
<2769=2771,2770
<2771=2772
<2772=2774,2773
<2778=2779
<2779=2784,2783,2780
<2780=2782,2781
<2785=2786
<2786=2788,2787
<2790=2791
<2791=2798,2792
<2792=2793
<2793=2794
<2794=2796,2795
<2796=2797
<2798=2799
<2847=2859,2858,2848
<2848=2855,2852,2849
<2849=2851,2850
<2852=2854,2853
<2855=2857,2856
<2859=3081,3074,3055,2860
<2860=3051,2861
<2861=2862
<2862=3041,3039,3034,2863
<2863=2868,2864
<2864=2865
<2865=2867,2866
<2868=3030,2869
<2869=3020,3010,3000,2990,2976,2962,2948,2934,2921,2906,2891,2876,2871,2870
<2871=2872
<2872=2874,2873
<2874=2875
<2876=2877
<2877=2889,2878
<2878=2885,2879
<2879=2880
<2880=2882,2881
<2882=2884,2883
<2885=2886
<2886=2888,2887
<2889=2890
<2891=2892
<2892=2904,2893
<2893=2900,2894
<2894=2895
<2895=2897,2896
<2897=2899,2898
<2900=2901
<2901=2903,2902
<2904=2905
<2906=2907
<2907=2919,2908
<2908=2915,2909
<2909=2910
<2910=2912,2911
<2912=2914,2913
<2915=2916
<2916=2918,2917
<2919=2920
<2921=2922
<2922=2928,2923
<2923=2924
<2924=2925
<2925=2927,2926
<2928=2929
<2929=2931,2930
<2931=2933,2932
<2934=2935
<2935=2941,2936
<2936=2938,2937
<2938=2940,2939
<2941=2943,2942
<2943=2945,2944
<2945=2947,2946
<2948=2949
<2949=2955,2950
<2950=2952,2951
<2952=2954,2953
<2955=2957,2956
<2957=2959,2958
<2959=2961,2960
<2962=2963
<2963=2969,2964
<2964=2966,2965
<2966=2968,2967
<2969=2971,2970
<2971=2973,2972
<2973=2975,2974
<2976=2977
<2977=2983,2978
<2978=2980,2979
<2980=2982,2981
<2983=2985,2984
<2985=2987,2986
<2987=2989,2988
<2990=2991
<2991=2995,2992
<2992=2994,2993
<2995=2997,2996
<2997=2999,2998
<3000=3001
<3001=3005,3002
<3002=3004,3003
<3005=3007,3006
<3007=3009,3008
<3010=3011
<3011=3015,3012
<3012=3014,3013
<3015=3017,3016
<3017=3019,3018
<3020=3021
<3021=3025,3022
<3022=3024,3023
<3025=3027,3026
<3027=3029,3028
<3030=3031
<3031=3033,3032
<3034=3038,3035
<3035=3037,3036
<3039=3040
<3041=3042
<3042=3043
<3043=3050,3049,3044
<3044=3048,3045
<3045=3047,3046
<3051=3052
<3052=3054,3053
<3055=3056
<3056=3073,3072,3057
<3057=3071,3058
<3058=3062,3059
<3059=3060
<3060=3061
<3062=3063
<3063=3065,3064
<3065=3067,3066
<3067=3068
<3068=3070,3069
<3074=3075
<3075=3080,3079,3076
<3076=3078,3077
<3081=3082
<3082=3089,3083
<3083=3084
<3084=3085
<3085=3087,3086
<3087=3088
<3089=3090
<3137=3146,3145,3138
<3138=3142,3139
<3139=3141,3140
<3142=3144,3143
<3146=3242,3235,3216,3147
<3147=3212,3148
<3148=3203,3149
<3149=3193,3191,3186,3150
<3150=3159,3155,3151
<3151=3152
<3152=3154,3153
<3155=3156
<3156=3158,3157
<3159=3182,3160
<3160=3174,3167,3162,3161
<3162=3163
<3163=3165,3164
<3165=3166
<3167=3168
<3168=3172,3169
<3169=3170
<3170=3171
<3172=3173
<3174=3175
<3175=3179,3176
<3176=3178,3177
<3179=3181,3180
<3182=3183
<3183=3185,3184
<3186=3190,3187
<3187=3189,3188
<3191=3192
<3193=3194
<3194=3195
<3195=3202,3201,3196
<3196=3200,3197
<3197=3199,3198
<3203=3204
<3204=3211,3210,3205
<3205=3209,3206
<3206=3208,3207
<3212=3213
<3213=3215,3214
<3216=3217
<3217=3234,3233,3218
<3218=3232,3219
<3219=3223,3220
<3220=3221
<3221=3222
<3223=3224
<3224=3226,3225
<3226=3228,3227
<3228=3229
<3229=3231,3230
<3235=3236
<3236=3241,3240,3237
<3237=3239,3238
<3242=3243
<3243=3250,3244
<3244=3245
<3245=3246
<3246=3248,3247
<3248=3249
<3250=3251
<3273=3279,3278,3274
<3274=3275
<3275=3277,3276
<3279=3319,3300,3280
<3280=3296,3281
<3281=3289,3282
<3282=3283
<3283=3287,3284
<3284=3285
<3285=3286
<3287=3288
<3289=3290
<3290=3294,3291
<3291=3292
<3292=3293
<3294=3295
<3296=3297
<3297=3299,3298
<3300=3301
<3301=3318,3317,3302
<3302=3316,3303
<3303=3307,3304
<3304=3305
<3305=3306
<3307=3308
<3308=3310,3309
<3310=3312,3311
<3312=3313
<3313=3315,3314
<3319=3320
<3320=3327,3321
<3321=3322
<3322=3323
<3323=3325,3324
<3325=3326
<3327=3328
<3341=3350,3349,3342
<3342=3346,3343
<3343=3345,3344
<3346=3348,3347
<3350=3396,3377,3351
<3351=3373,3352
<3352=3360,3353
<3353=3354
<3354=3358,3355
<3355=3356
<3356=3357
<3358=3359
<3360=3361
<3361=3371,3362
<3362=3369,3367,3365,3363
<3363=3364
<3365=3366
<3367=3368
<3369=3370
<3371=3372
<3373=3374
<3374=3376,3375
<3377=3378
<3378=3395,3394,3379
<3379=3393,3380
<3380=3384,3381
<3381=3382
<3382=3383
<3384=3385
<3385=3387,3386
<3387=3389,3388
<3389=3390
<3390=3392,3391
<3396=3397
<3397=3404,3398
<3398=3399
<3399=3400
<3400=3402,3401
<3402=3403
<3404=3405
<3420=3426,3425,3421
<3421=3422
<3422=3424,3423
<3426=3468,3449,3427
<3427=3445,3428
<3428=3436,3429
<3429=3430
<3430=3434,3431
<3431=3432
<3432=3433
<3434=3435
<3436=3437
<3437=3443,3438
<3438=3441,3439
<3439=3440
<3441=3442
<3443=3444
<3445=3446
<3446=3448,3447
<3449=3450
<3450=3467,3466,3451
<3451=3465,3452
<3452=3456,3453
<3453=3454
<3454=3455
<3456=3457
<3457=3459,3458
<3459=3461,3460
<3461=3462
<3462=3464,3463
<3468=3469
<3469=3476,3470
<3470=3471
<3471=3472
<3472=3474,3473
<3474=3475
<3476=3477
<3491=3497,3496,3492
<3492=3493
<3493=3495,3494
<3497=3498
<3498=3499
<3499=3506,3500
<3500=3501
<3501=3502
<3502=3504,3503
<3504=3505
<3506=3507
<3513=3516,3515,3514
<3516=3524,3517
<3517=3518
<3518=3520,3519
<3520=3521
<3521=3523,3522
<3524=3525
<3525=3532,3526
<3526=3527
<3527=3528
<3528=3530,3529
<3530=3531
<3532=3533
<3539=3542,3541,3540
<3542=3555,3550,3543
<3543=3544
<3544=3548,3545
<3545=3546
<3546=3547
<3548=3549
<3550=3551
<3551=3553,3552
<3553=3554
<3555=3556
<3556=3563,3557
<3557=3558
<3558=3559
<3559=3561,3560
<3561=3562
<3563=3564
<3570=3579,3578,3571
<3571=3575,3572
<3572=3574,3573
<3575=3577,3576
<3579=3640,3621,3580
<3580=3617,3581
<3581=3587,3582
<3582=3583
<3583=3585,3584
<3585=3586
<3587=3607,3605,3600,3588
<3588=3589
<3589=3590
<3590=3594,3591
<3591=3592
<3592=3593
<3594=3595
<3595=3597,3596
<3597=3599,3598
<3600=3604,3601
<3601=3603,3602
<3605=3606
<3607=3608
<3608=3609
<3609=3616,3615,3610
<3610=3614,3611
<3611=3613,3612
<3617=3618
<3618=3620,3619
<3621=3622
<3622=3639,3638,3623
<3623=3637,3624
<3624=3628,3625
<3625=3626
<3626=3627
<3628=3629
<3629=3631,3630
<3631=3633,3632
<3633=3634
<3634=3636,3635
<3640=3641
<3641=3648,3642
<3642=3643
<3643=3644
<3644=3646,3645
<3646=3647
<3648=3649
<3668=3671,3670,3669
<3671=3708,3701,3674,3672
<3672=3673
<3674=3691,3685,3680,3675
<3675=3676
<3676=3677
<3677=3679,3678
<3680=3684,3681
<3681=3683,3682
<3685=3686
<3686=3690,3687
<3687=3689,3688
<3691=3692
<3692=3693
<3693=3700,3699,3694
<3694=3698,3695
<3695=3697,3696
<3701=3702
<3702=3707,3706,3703
<3703=3705,3704
<3708=3709
<3709=3716,3710
<3710=3711
<3711=3712
<3712=3714,3713
<3714=3715
<3716=3717
<3729=3732,3731,3730
<3732=3769,3762,3735,3733
<3733=3734
<3735=3752,3746,3741,3736
<3736=3737
<3737=3738
<3738=3740,3739
<3741=3745,3742
<3742=3744,3743
<3746=3747
<3747=3751,3748
<3748=3750,3749
<3752=3753
<3753=3754
<3754=3761,3760,3755
<3755=3759,3756
<3756=3758,3757
<3762=3763
<3763=3768,3767,3764
<3764=3766,3765
<3769=3770
<3770=3777,3771
<3771=3772
<3772=3773
<3773=3775,3774
<3775=3776
<3777=3778
<3790=3793,3792,3791
<3793=3849,3842,3796,3794
<3794=3795
<3796=3832,3826,3821,3797
<3797=3817,3798
<3798=3799
<3799=3803,3800
<3800=3801
<3801=3802
<3803=3804
<3804=3806,3805
<3806=3808,3807
<3808=3809
<3809=3811,3810
<3811=3813,3812
<3813=3814
<3814=3816,3815
<3817=3818
<3818=3820,3819
<3821=3825,3822
<3822=3824,3823
<3826=3827
<3827=3831,3828
<3828=3830,3829
<3832=3833
<3833=3834
<3834=3841,3840,3835
<3835=3839,3836
<3836=3838,3837
<3842=3843
<3843=3848,3847,3844
<3844=3846,3845
<3849=3850
<3850=3857,3851
<3851=3852
<3852=3853
<3853=3855,3854
<3855=3856
<3857=3858
<3874=3877,3876,3875
<3877=3933,3926,3880,3878
<3878=3879
<3880=3916,3910,3905,3881
<3881=3901,3882
<3882=3883
<3883=3887,3884
<3884=3885
<3885=3886
<3887=3888
<3888=3890,3889
<3890=3892,3891
<3892=3893
<3893=3895,3894
<3895=3897,3896
<3897=3898
<3898=3900,3899
<3901=3902
<3902=3904,3903
<3905=3909,3906
<3906=3908,3907
<3910=3911
<3911=3915,3912
<3912=3914,3913
<3916=3917
<3917=3918
<3918=3925,3924,3919
<3919=3923,3920
<3920=3922,3921
<3926=3927
<3927=3932,3931,3928
<3928=3930,3929
<3933=3934
<3934=3941,3935
<3935=3936
<3936=3937
<3937=3939,3938
<3939=3940
<3941=3942
<3958=3961,3960,3959
<3961=3986,3969,3962
<3962=3963
<3963=3967,3964
<3964=3965
<3965=3966
<3967=3968
<3969=3970
<3970=3972,3971
<3972=3973
<3973=3975,3974
<3975=3977,3976
<3977=3978
<3978=3980,3979
<3980=3982,3981
<3982=3983
<3983=3985,3984
<3986=3987
<3987=3994,3988
<3988=3989
<3989=3990
<3990=3992,3991
<3992=3993
<3994=3995
<4005=4008,4007,4006
<4008=4033,4016,4009
<4009=4010
<4010=4014,4011
<4011=4012
<4012=4013
<4014=4015
<4016=4017
<4017=4019,4018
<4019=4020
<4020=4022,4021
<4022=4024,4023
<4024=4025
<4025=4027,4026
<4027=4029,4028
<4029=4030
<4030=4032,4031
<4033=4034
<4034=4041,4035
<4035=4036
<4036=4037
<4037=4039,4038
<4039=4040
<4041=4042
<4052=4058,4057,4053
<4053=4054
<4054=4056,4055
<4058=4105,4061,4059
<4059=4060
<4061=4086,4062
<4062=4063
<4063=4064
<4064=4085,4065
<4065=4084,4066
<4066=4070,4067
<4067=4068
<4068=4069
<4070=4071
<4071=4073,4072
<4073=4075,4074
<4075=4076
<4076=4078,4077
<4078=4080,4079
<4080=4081
<4081=4083,4082
<4086=4087
<4087=4104,4088
<4088=4090,4089
<4090=4091
<4091=4093,4092
<4093=4095,4094
<4095=4096
<4096=4098,4097
<4098=4100,4099
<4100=4101
<4101=4103,4102
<4105=4106
<4106=4113,4107
<4107=4108
<4108=4109
<4109=4111,4110
<4111=4112
<4113=4114
<4129=4135,4134,4130
<4130=4131
<4131=4133,4132
<4135=4182,4138,4136
<4136=4137
<4138=4163,4139
<4139=4140
<4140=4141
<4141=4162,4142
<4142=4161,4143
<4143=4147,4144
<4144=4145
<4145=4146
<4147=4148
<4148=4150,4149
<4150=4152,4151
<4152=4153
<4153=4155,4154
<4155=4157,4156
<4157=4158
<4158=4160,4159
<4163=4164
<4164=4181,4165
<4165=4167,4166
<4167=4168
<4168=4170,4169
<4170=4172,4171
<4172=4173
<4173=4175,4174
<4175=4177,4176
<4177=4178
<4178=4180,4179
<4182=4183
<4183=4190,4184
<4184=4185
<4185=4186
<4186=4188,4187
<4188=4189
<4190=4191
<4206=4209,4208,4207
<4209=4263,4258,4251,4244,4212,4210
<4210=4211
<4212=4242,4213
<4213=4224,4218,4214
<4214=4215
<4215=4217,4216
<4218=4220,4219
<4220=4221
<4221=4223,4222
<4224=4225
<4225=4241,4240,4226
<4226=4239,4227
<4227=4237,4228
<4228=4233,4229
<4229=4230
<4230=4232,4231
<4233=4234
<4234=4236,4235
<4237=4238
<4242=4243
<4244=4245
<4245=4250,4249,4246
<4246=4248,4247
<4251=4255,4252
<4252=4254,4253
<4255=4257,4256
<4258=4259
<4259=4261,4260
<4261=4262
<4263=4264
<4264=4271,4265
<4265=4266
<4266=4267
<4267=4269,4268
<4269=4270
<4271=4272
<4284=4290,4289,4285
<4285=4286
<4286=4288,4287
<4290=4369,4368,4363,4358,4351,4344,4293,4291
<4291=4292
<4293=4342,4294
<4294=4324,4318,4299,4295
<4295=4296
<4296=4298,4297
<4299=4314,4300
<4300=4303,4301
<4301=4302
<4303=4304
<4304=4312,4305
<4305=4310,4306
<4306=4307
<4307=4309,4308
<4310=4311
<4312=4313
<4314=4315
<4315=4317,4316
<4318=4320,4319
<4320=4321
<4321=4323,4322
<4324=4325
<4325=4341,4340,4326
<4326=4339,4327
<4327=4337,4328
<4328=4333,4329
<4329=4330
<4330=4332,4331
<4333=4334
<4334=4336,4335
<4337=4338
<4342=4343
<4344=4345
<4345=4350,4349,4346
<4346=4348,4347
<4351=4355,4352
<4352=4354,4353
<4355=4357,4356
<4358=4359
<4359=4361,4360
<4361=4362
<4363=4364
<4364=4367,4366,4365
<4369=4370
<4370=4377,4371
<4371=4372
<4372=4373
<4373=4375,4374
<4375=4376
<4377=4378
<4395=4398,4397,4396
<4398=4407,4399
<4399=4400
<4400=4402,4401
<4402=4404,4403
<4404=4406,4405
<4407=4408
<4408=4415,4409
<4409=4410
<4410=4411
<4411=4413,4412
<4413=4414
<4415=4416
<4425=4431,4430,4426
<4426=4427
<4427=4429,4428
<4431=4462,4458,4454,4445,4432
<4432=4433
<4433=4443,4434
<4434=4439,4435
<4435=4436
<4436=4438,4437
<4439=4440
<4440=4442,4441
<4443=4444
<4445=4446
<4446=4450,4447
<4447=4448
<4448=4449
<4450=4451
<4451=4453,4452
<4454=4455
<4455=4457,4456
<4458=4459
<4459=4461,4460
<4462=4463
<4463=4470,4464
<4464=4465
<4465=4466
<4466=4468,4467
<4468=4469
<4470=4471
<4481=4484,4483,4482
<4484=4515,4508,4487,4485
<4485=4486
<4487=4500,4498,4493,4488
<4488=4489
<4489=4490
<4490=4492,4491
<4493=4497,4494
<4494=4496,4495
<4498=4499
<4500=4501
<4501=4502
<4502=4507,4506,4503
<4503=4505,4504
<4508=4509
<4509=4514,4513,4510
<4510=4512,4511
<4515=4516
<4516=4523,4517
<4517=4518
<4518=4519
<4519=4521,4520
<4521=4522
<4523=4524
<4534=4540,4539,4535
<4535=4536
<4536=4538,4537
<4540=4577,4570,4543,4541
<4541=4542
<4543=4562,4560,4555,4544
<4544=4545
<4545=4551,4546
<4546=4547
<4547=4548
<4548=4550,4549
<4551=4552
<4552=4554,4553
<4555=4559,4556
<4556=4558,4557
<4560=4561
<4562=4563
<4563=4564
<4564=4569,4568,4565
<4565=4567,4566
<4570=4571
<4571=4576,4575,4572
<4572=4574,4573
<4577=4578
<4578=4585,4579
<4579=4580
<4580=4581
<4581=4583,4582
<4583=4584
<4585=4586
<4599=4605,4604,4600
<4600=4601
<4601=4603,4602
<4605=4606
<4606=4607
<4607=4611,4608
<4608=4609
<4609=4610
<4611=4612
<4617=4620,4619,4618
<4620=4657,4650,4623,4621
<4621=4622
<4623=4640,4634,4629,4624
<4624=4625
<4625=4626
<4626=4628,4627
<4629=4633,4630
<4630=4632,4631
<4634=4635
<4635=4639,4636
<4636=4638,4637
<4640=4641
<4641=4642
<4642=4649,4648,4643
<4643=4647,4644
<4644=4646,4645
<4650=4651
<4651=4656,4655,4652
<4652=4654,4653
<4657=4658
<4658=4665,4659
<4659=4660
<4660=4661
<4661=4663,4662
<4663=4664
<4665=4666
<4678=4684,4683,4679
<4679=4680
<4680=4682,4681
<4684=4734,4723,4714,4707,4691,4685
<4685=4686
<4686=4690,4687
<4687=4689,4688
<4691=4703,4692
<4692=4697,4693
<4693=4694
<4694=4696,4695
<4697=4698
<4698=4702,4699
<4699=4701,4700
<4703=4704
<4704=4706,4705
<4707=4708
<4708=4713,4712,4709
<4709=4711,4710
<4714=4715
<4715=4722,4721,4716
<4716=4720,4717
<4717=4719,4718
<4723=4730,4724
<4724=4725
<4725=4729,4726
<4726=4728,4727
<4730=4731
<4731=4733,4732
<4734=4735
<4735=4742,4736
<4736=4737
<4737=4738
<4738=4740,4739
<4740=4741
<4742=4743
<4757=4763,4762,4758
<4758=4759
<4759=4761,4760
<4763=4781,4780,4779,4778,4777,4776,4775,4774,4773,4772,4770,4764
<4764=4765
<4765=4769,4766
<4766=4768,4767
<4770=4771
<4781=4782
<4782=4789,4783
<4783=4784
<4784=4785
<4785=4787,4786
<4787=4788
<4789=4790
<4799=4808,4807,4800
<4800=4804,4801
<4801=4803,4802
<4804=4806,4805
<4808=4891,4873,4853,4842,4822,4811,4809
<4809=4810
<4811=4812
<4812=4820,4813
<4813=4816,4814
<4814=4815
<4816=4817
<4817=4819,4818
<4820=4821
<4822=4823
<4823=4839,4824
<4824=4838,4825
<4825=4836,4826
<4826=4827
<4827=4828
<4828=4830,4829
<4830=4834,4831
<4831=4832
<4832=4833
<4834=4835
<4836=4837
<4839=4841,4840
<4842=4843
<4843=4851,4844
<4844=4847,4845
<4845=4846
<4847=4848
<4848=4850,4849
<4851=4852
<4853=4854
<4854=4870,4855
<4855=4869,4856
<4856=4867,4857
<4857=4858
<4858=4859
<4859=4861,4860
<4861=4865,4862
<4862=4863
<4863=4864
<4865=4866
<4867=4868
<4870=4872,4871
<4873=4874
<4874=4890,4889,4875
<4875=4888,4876
<4876=4887,4877
<4877=4885,4878
<4878=4879
<4879=4880
<4880=4884,4881
<4881=4883,4882
<4885=4886
<4891=4892
<4892=4899,4893
<4893=4894
<4894=4895
<4895=4897,4896
<4897=4898
<4899=4900
<4913=4922,4921,4914
<4914=4918,4915
<4915=4917,4916
<4918=4920,4919
<4922=4953,4952,4951,4950,4949,4948,4947,4946,4945,4944,4942,4923
<4923=4938,4931,4924
<4924=4925
<4925=4926
<4926=4928,4927
<4928=4930,4929
<4931=4932
<4932=4936,4933
<4933=4934
<4934=4935
<4936=4937
<4938=4939
<4939=4941,4940
<4942=4943
<4953=4954
<4954=4961,4955
<4955=4956
<4956=4957
<4957=4959,4958
<4959=4960
<4961=4962
<4972=4978,4977,4973
<4973=4974
<4974=4976,4975
<4978=5077,5076,5075,5074,5073,5072,5071,5070,5069,5068,5066,5059,5048,5031,4981,4979
<4979=4980
<4981=5019,5011,5006,4982
<4982=5002,4983
<4983=4984
<4984=4988,4985
<4985=4986
<4986=4987
<4988=4989
<4989=4991,4990
<4991=4993,4992
<4993=4994
<4994=4996,4995
<4996=4998,4997
<4998=4999
<4999=5001,5000
<5002=5003
<5003=5005,5004
<5006=5010,5007
<5007=5009,5008
<5011=5012
<5012=5018,5013
<5013=5017,5014
<5014=5016,5015
<5019=5020
<5020=5021
<5021=5030,5029,5022
<5022=5028,5023
<5023=5025,5024
<5025=5027,5026
<5031=5032
<5032=5034,5033
<5034=5035
<5035=5037,5036
<5037=5039,5038
<5039=5040
<5040=5042,5041
<5042=5044,5043
<5044=5045
<5045=5047,5046
<5048=5051,5049
<5049=5050
<5051=5052
<5052=5058,5053
<5053=5055,5054
<5055=5057,5056
<5059=5060
<5060=5065,5064,5061
<5061=5063,5062
<5066=5067
<5077=5078
<5078=5085,5079
<5079=5080
<5080=5081
<5081=5083,5082
<5083=5084
<5085=5086
<5106=5109,5108,5107
<5109=5127,5110
<5110=5111
<5111=5113,5112
<5113=5114
<5114=5116,5115
<5116=5118,5117
<5118=5119
<5119=5121,5120
<5121=5123,5122
<5123=5124
<5124=5126,5125
<5127=5128
<5128=5135,5129
<5129=5130
<5130=5131
<5131=5133,5132
<5133=5134
<5135=5136
<5145=5151,5150,5146
<5146=5147
<5147=5149,5148
<5151=5193,5154,5152
<5152=5153
<5154=5174,5155
<5155=5156
<5156=5160,5157
<5157=5158
<5158=5159
<5160=5161
<5161=5163,5162
<5163=5165,5164
<5165=5166
<5166=5168,5167
<5168=5170,5169
<5170=5171
<5171=5173,5172
<5174=5175
<5175=5192,5176
<5176=5178,5177
<5178=5179
<5179=5181,5180
<5181=5183,5182
<5183=5184
<5184=5186,5185
<5186=5188,5187
<5188=5189
<5189=5191,5190
<5193=5194
<5194=5201,5195
<5195=5196
<5196=5197
<5197=5199,5198
<5199=5200
<5201=5202
<5215=5218,5217,5216
<5218=5284,5283,5282,5281,5280,5279,5278,5277,5276,5275,5266,5248,5225,5219
<5219=5220
<5220=5224,5221
<5221=5223,5222
<5225=5226
<5226=5234,5227
<5227=5228
<5228=5229
<5229=5233,5230
<5230=5232,5231
<5234=5235
<5235=5237,5236
<5237=5239,5238
<5239=5240
<5240=5242,5241
<5242=5244,5243
<5244=5245
<5245=5247,5246
<5248=5249
<5249=5261,5250
<5250=5256,5251
<5251=5255,5252
<5252=5254,5253
<5256=5258,5257
<5258=5260,5259
<5261=5263,5262
<5263=5265,5264
<5266=5267
<5267=5273,5268
<5268=5269
<5269=5270
<5270=5272,5271
<5273=5274
<5284=5285
<5285=5292,5286
<5286=5287
<5287=5288
<5288=5290,5289
<5290=5291
<5292=5293
<5311=5320,5319,5312
<5312=5316,5313
<5313=5315,5314
<5316=5318,5317
<5320=5338,5322,5321
<5322=5323
<5323=5329,5324
<5324=5327,5325
<5325=5326
<5327=5328
<5329=5330
<5330=5332,5331
<5332=5334,5333
<5334=5335
<5335=5337,5336
<5338=5339
<5339=5346,5340
<5340=5341
<5341=5342
<5342=5344,5343
<5344=5345
<5346=5347
<5357=5363,5362,5358
<5358=5359
<5359=5361,5360
<5363=5364
<5364=5365
<5365=5373,5366
<5366=5369,5367
<5367=5368
<5369=5370
<5370=5372,5371
<5373=5374
<5382=5388,5387,5383
<5383=5384
<5384=5386,5385
<5388=5410,5403,5391,5389
<5389=5390
<5391=5401,5392
<5392=5395,5393
<5393=5394
<5395=5396
<5396=5398,5397
<5398=5400,5399
<5401=5402
<5403=5404
<5404=5408,5405
<5405=5406
<5406=5407
<5408=5409
<5410=5411
<5411=5413,5412
<5425=5434,5433,5426
<5426=5430,5427
<5427=5429,5428
<5430=5432,5431
<5434=5517,5513,5442,5435
<5435=5436
<5436=5440,5437
<5437=5438
<5438=5439
<5440=5441
<5442=5505,5496,5493,5443
<5443=5444
<5444=5482,5445
<5445=5473,5472,5471,5470,5469,5468,5467,5466,5464,5463,5462,5461,5460,5459,5458,5457,5455,5446
<5446=5447
<5447=5453,5448
<5448=5451,5449
<5449=5450
<5451=5452
<5453=5454
<5455=5456
<5464=5465
<5473=5474
<5474=5478,5475
<5475=5476
<5476=5477
<5478=5479
<5479=5481,5480
<5482=5483
<5483=5492,5484
<5484=5488,5485
<5485=5486
<5486=5487
<5488=5489
<5489=5491,5490
<5493=5495,5494
<5496=5497
<5497=5504,5498
<5498=5500,5499
<5500=5501
<5501=5503,5502
<5505=5506
<5506=5507
<5507=5512,5511,5508
<5508=5510,5509
<5513=5514
<5514=5516,5515
<5517=5518
<5518=5520,5519
<5533=5539,5538,5534
<5534=5535
<5535=5537,5536
<5539=5555,5541,5540
<5541=5542
<5542=5546,5543
<5543=5544
<5544=5545
<5546=5547
<5547=5549,5548
<5549=5551,5550
<5551=5552
<5552=5554,5553
<5555=5556
<5556=5563,5557
<5557=5558
<5558=5559
<5559=5561,5560
<5561=5562
<5563=5564
<5573=5582,5581,5574
<5574=5578,5575
<5575=5577,5576
<5578=5580,5579
<5582=5640,5618,5604,5585,5583
<5583=5584
<5585=5598,5586
<5586=5587
<5587=5588
<5588=5597,5589
<5589=5595,5590
<5590=5593,5591
<5591=5592
<5593=5594
<5595=5596
<5598=5599
<5599=5603,5600
<5600=5602,5601
<5604=5605
<5605=5617,5616,5606
<5606=5615,5607
<5607=5613,5608
<5608=5611,5609
<5609=5610
<5611=5612
<5613=5614
<5618=5619
<5619=5638,5620
<5620=5636,5634,5623,5621
<5621=5622
<5623=5624
<5624=5632,5625
<5625=5628,5626
<5626=5627
<5628=5629
<5629=5631,5630
<5632=5633
<5634=5635
<5636=5637
<5638=5639
<5640=5641
<5641=5644,5643,5642
<5657=5663,5662,5658
<5658=5659
<5659=5661,5660
<5663=5664
<5664=5665
<5665=5669,5666
<5666=5667
<5667=5668
<5669=5670
<5676=5682,5681,5677
<5677=5678
<5678=5680,5679
<5682=5690,5685,5683
<5683=5684
<5685=5688,5686
<5686=5687
<5688=5689
<5690=5691
<5691=5701,5700,5692
<5692=5699,5693
<5693=5697,5694
<5694=5695
<5695=5696
<5697=5698
<5708=5714,5713,5709
<5709=5710
<5710=5712,5711
<5714=5761,5751,5738,5726,5724,5715
<5715=5716
<5716=5722,5717
<5717=5720,5718
<5718=5719
<5720=5721
<5722=5723
<5724=5725
<5726=5727
<5727=5737,5736,5728
<5728=5735,5729
<5729=5733,5730
<5730=5731
<5731=5732
<5733=5734
<5738=5739
<5739=5749,5740
<5740=5745,5741
<5741=5742
<5742=5744,5743
<5745=5746
<5746=5748,5747
<5749=5750
<5751=5752
<5752=5760,5759,5753
<5753=5758,5754
<5754=5756,5755
<5756=5757
<5761=5762
<5762=5770,5769,5763
<5763=5768,5764
<5764=5766,5765
<5766=5767
<5784=5790,5789,5785
<5785=5786
<5786=5788,5787
<5790=5791
<5791=5792
<5792=5796,5793
<5793=5794
<5794=5795
<5796=5797
<5802=5805,5804,5803
<5805=5806
<5806=5807
<5812=5815,5814,5813
<5815=5816
<5816=5817
<5822=5828,5827,5823
<5823=5824
<5824=5826,5825
<5828=6484,6480,6476,6469,6465,5829
<5829=6457,6448,6445,5830
<5830=5831
<5831=6434,5832
<5832=6425,6424,6423,6422,6421,6420,6419,6418,6416,6403,6381,6363,6357,6067,5986,5833
<5833=5968,5872,5834
<5834=5835
<5835=5864,5856,5848,5842,5836
<5836=5837
<5837=5839,5838
<5839=5841,5840
<5842=5843
<5843=5845,5844
<5845=5847,5846
<5848=5849
<5849=5851,5850
<5851=5853,5852
<5853=5855,5854
<5856=5857
<5857=5861,5858
<5858=5860,5859
<5861=5863,5862
<5864=5865
<5865=5869,5866
<5866=5868,5867
<5869=5871,5870
<5872=5873
<5873=5954,5899,5874
<5874=5875
<5875=5876
<5876=5897,5885,5877
<5877=5878
<5878=5879
<5879=5883,5880
<5880=5881
<5881=5882
<5883=5884
<5885=5890,5886
<5886=5887
<5887=5889,5888
<5890=5891
<5891=5895,5892
<5892=5893
<5893=5894
<5895=5896
<5897=5898
<5899=5947,5936,5928,5920,5912,5906,5900
<5900=5901
<5901=5903,5902
<5903=5905,5904
<5906=5907
<5907=5909,5908
<5909=5911,5910
<5912=5913
<5913=5915,5914
<5915=5917,5916
<5917=5919,5918
<5920=5921
<5921=5925,5922
<5922=5924,5923
<5925=5927,5926
<5928=5929
<5929=5933,5930
<5930=5932,5931
<5933=5935,5934
<5936=5937
<5937=5945,5938
<5938=5943,5941,5939
<5939=5940
<5941=5942
<5943=5944
<5945=5946
<5947=5948
<5948=5952,5949
<5949=5950
<5950=5951
<5952=5953
<5954=5955
<5955=5967,5956
<5956=5962,5957
<5957=5961,5958
<5958=5960,5959
<5962=5964,5963
<5964=5966,5965
<5968=5969
<5969=5985,5970
<5970=5983,5971
<5971=5974,5972
<5972=5973
<5974=5975
<5975=5981,5976
<5976=5979,5977
<5977=5978
<5979=5980
<5981=5982
<5983=5984
<5986=6059,6051,6046,5987
<5987=6018,6010,6002,5994,5988
<5988=5989
<5989=5991,5990
<5991=5993,5992
<5994=5995
<5995=5999,5996
<5996=5998,5997
<5999=6001,6000
<6002=6003
<6003=6005,6004
<6005=6007,6006
<6007=6009,6008
<6010=6011
<6011=6015,6012
<6012=6014,6013
<6015=6017,6016
<6018=6042,6028,6019
<6019=6020
<6020=6021
<6021=6022
<6022=6026,6023
<6023=6024
<6024=6025
<6026=6027
<6028=6029
<6029=6030
<6030=6040,6031
<6031=6038,6036,6034,6032
<6032=6033
<6034=6035
<6036=6037
<6038=6039
<6040=6041
<6042=6043
<6043=6045,6044
<6046=6050,6047
<6047=6049,6048
<6051=6052
<6052=6058,6053
<6053=6057,6054
<6054=6056,6055
<6059=6060
<6060=6066,6061
<6061=6063,6062
<6063=6065,6064
<6067=6353,6090,6068
<6068=6069
<6069=6070
<6070=6078,6071
<6071=6072
<6072=6076,6073
<6073=6074
<6074=6075
<6076=6077
<6078=6079
<6079=6085,6080
<6080=6084,6081
<6081=6083,6082
<6085=6087,6086
<6087=6089,6088
<6090=6332,6317,6302,6295,6191,6174,6135,6129,6119,6109,6099,6091
<6091=6092
<6092=6094,6093
<6094=6096,6095
<6096=6098,6097
<6099=6100
<6100=6102,6101
<6102=6104,6103
<6104=6106,6105
<6106=6108,6107
<6109=6110
<6110=6116,6111
<6111=6115,6112
<6112=6114,6113
<6116=6118,6117
<6119=6120
<6120=6126,6121
<6121=6123,6122
<6123=6125,6124
<6126=6128,6127
<6129=6130
<6130=6132,6131
<6132=6134,6133
<6135=6172,6136
<6136=6168,6158,6152,6137
<6137=6138
<6138=6150,6139
<6139=6148,6146,6142,6140
<6140=6141
<6142=6143
<6143=6145,6144
<6146=6147
<6148=6149
<6150=6151
<6152=6153
<6153=6155,6154
<6155=6157,6156
<6158=6159
<6159=6165,6160
<6160=6162,6161
<6162=6164,6163
<6165=6167,6166
<6168=6169
<6169=6171,6170
<6172=6173
<6174=6175
<6175=6190,6176
<6176=6188,6177
<6177=6186,6184,6178
<6178=6179
<6179=6183,6180
<6180=6182,6181
<6184=6185
<6186=6187
<6188=6189
<6191=6289,6192
<6192=6275,6193
<6193=6262,6194
<6194=6255,6244,6195
<6195=6231,6196
<6196=6214,6197
<6197=6198
<6198=6212,6199
<6199=6206,6202,6200
<6200=6201
<6202=6203
<6203=6205,6204
<6206=6207
<6207=6209,6208
<6209=6211,6210
<6212=6213
<6214=6215
<6215=6229,6216
<6216=6223,6219,6217
<6217=6218
<6219=6220
<6220=6222,6221
<6223=6224
<6224=6226,6225
<6226=6228,6227
<6229=6230
<6231=6232
<6232=6242,6233
<6233=6240,6238,6236,6234
<6234=6235
<6236=6237
<6238=6239
<6240=6241
<6242=6243
<6244=6245
<6245=6254,6246
<6246=6252,6247
<6247=6250,6248
<6248=6249
<6250=6251
<6252=6253
<6255=6259,6256
<6256=6258,6257
<6259=6261,6260
<6262=6263
<6263=6272,6264
<6264=6266,6265
<6266=6270,6267
<6267=6268
<6268=6269
<6270=6271
<6272=6274,6273
<6275=6276
<6276=6288,6287,6277
<6277=6286,6278
<6278=6284,6279
<6279=6282,6280
<6280=6281
<6282=6283
<6284=6285
<6289=6290
<6290=6292,6291
<6292=6294,6293
<6295=6296
<6296=6301,6300,6297
<6297=6299,6298
<6302=6303
<6303=6315,6304
<6304=6311,6307,6305
<6305=6306
<6307=6308
<6308=6310,6309
<6311=6312
<6312=6314,6313
<6315=6316
<6317=6318
<6318=6330,6319
<6319=6326,6322,6320
<6320=6321
<6322=6323
<6323=6325,6324
<6326=6327
<6327=6329,6328
<6330=6331
<6332=6341,6333
<6333=6334
<6334=6335
<6335=6339,6336
<6336=6337
<6337=6338
<6339=6340
<6341=6342
<6342=6348,6343
<6343=6347,6344
<6344=6346,6345
<6348=6350,6349
<6350=6352,6351
<6353=6354
<6354=6356,6355
<6357=6358
<6358=6360,6359
<6360=6362,6361
<6363=6364
<6364=6380,6365
<6365=6378,6366
<6366=6369,6367
<6367=6368
<6369=6370
<6370=6376,6371
<6371=6374,6372
<6372=6373
<6374=6375
<6376=6377
<6378=6379
<6381=6391,6387,6382
<6382=6383
<6383=6384
<6384=6386,6385
<6387=6388
<6388=6390,6389
<6391=6392
<6392=6398,6393
<6393=6397,6394
<6394=6396,6395
<6398=6400,6399
<6400=6402,6401
<6403=6404
<6404=6414,6405
<6405=6412,6410,6406
<6406=6407
<6407=6409,6408
<6410=6411
<6412=6413
<6414=6415
<6416=6417
<6425=6426
<6426=6430,6427
<6427=6428
<6428=6429
<6430=6431
<6431=6433,6432
<6434=6435
<6435=6444,6436
<6436=6440,6437
<6437=6438
<6438=6439
<6440=6441
<6441=6443,6442
<6445=6447,6446
<6448=6449
<6449=6456,6450
<6450=6452,6451
<6452=6453
<6453=6455,6454
<6457=6458
<6458=6459
<6459=6464,6463,6460
<6460=6462,6461
<6465=6466
<6466=6468,6467
<6469=6473,6470
<6470=6472,6471
<6473=6475,6474
<6476=6477
<6477=6479,6478
<6480=6481
<6481=6483,6482
<6484=6485
<6485=6487,6486
<6571=6577,6576,6572
<6572=6573
<6573=6575,6574
<6577=6578
<6578=6579
<6579=6581,6580
<6587=6590,6589,6588
<6590=6591
<6591=6592
<6592=6596,6593
<6593=6595,6594
<6603=6606,6605,6604
<6606=6607
<6607=6620,6612,6608
<6608=6609
<6609=6610
<6610=6611
<6612=6613
<6613=6614
<6614=6616,6615
<6616=6617
<6617=6619,6618
<6620=6621
<6621=6623,6622
<6631=6634,6633,6632
<6634=6635
<6635=6648,6640,6636
<6636=6637
<6637=6638
<6638=6639
<6640=6641
<6641=6642
<6642=6644,6643
<6644=6645
<6645=6647,6646
<6648=6649
<6649=6651,6650
<6659=6665,6664,6660
<6660=6661
<6661=6663,6662
<6665=6666
<6666=6677,6667
<6667=6668
<6668=6669
<6669=6673,6670
<6670=6671
<6671=6672
<6673=6674
<6674=6676,6675
<6677=6678
<6678=6680,6679
<6687=6690,6689,6688
<6690=6700,6693,6691
<6691=6692
<6693=6694
<6694=6698,6695
<6695=6696
<6696=6697
<6698=6699
<6700=6723,6717,6712,6701
<6701=6702
<6702=6708,6703
<6703=6704
<6704=6705
<6705=6707,6706
<6708=6709
<6709=6711,6710
<6712=6716,6713
<6713=6715,6714
<6717=6718
<6718=6722,6719
<6719=6721,6720
<6723=6724
<6724=6725
<6725=6732,6731,6726
<6726=6730,6727
<6727=6729,6728
<6745=6748,6747,6746
<6748=6749
<6749=6750
<6750=6754,6751
<6751=6752
<6752=6753
<6754=6755
<6755=6757,6756
<6757=6759,6758
<6766=6769,6768,6767
<6769=6770
<6770=6771
<6771=6775,6772
<6772=6773
<6773=6774
<6775=6776
<6776=6778,6777
<6784=6787,6786,6785
<6787=6800,6788
<6788=6789
<6789=6791,6790
<6791=6792
<6792=6794,6793
<6794=6796,6795
<6796=6797
<6797=6799,6798
<6800=6801
<6801=6808,6802
<6802=6803
<6803=6804
<6804=6806,6805
<6806=6807
<6808=6809
<6818=6821,6820,6819
<6821=6866,6824,6822
<6822=6823
<6824=6856,6850,6845,6825
<6825=6826
<6826=6841,6827
<6827=6837,6828
<6828=6829
<6829=6833,6830
<6830=6831
<6831=6832
<6833=6834
<6834=6836,6835
<6837=6838
<6838=6840,6839
<6841=6842
<6842=6844,6843
<6845=6849,6846
<6846=6848,6847
<6850=6851
<6851=6855,6852
<6852=6854,6853
<6856=6857
<6857=6858
<6858=6865,6864,6859
<6859=6863,6860
<6860=6862,6861
<6866=6867
<6867=6872,6871,6868
<6868=6870,6869
<6885=6888,6887,6886
<6888=6901,6889
<6889=6890
<6890=6892,6891
<6892=6893
<6893=6895,6894
<6895=6897,6896
<6897=6898
<6898=6900,6899
<6901=6902
<6902=6909,6903
<6903=6904
<6904=6905
<6905=6907,6906
<6907=6908
<6909=6910
<6919=6922,6921,6920
<6922=6967,6925,6923
<6923=6924
<6925=6957,6951,6946,6926
<6926=6927
<6927=6942,6928
<6928=6938,6929
<6929=6930
<6930=6934,6931
<6931=6932
<6932=6933
<6934=6935
<6935=6937,6936
<6938=6939
<6939=6941,6940
<6942=6943
<6943=6945,6944
<6946=6950,6947
<6947=6949,6948
<6951=6952
<6952=6956,6953
<6953=6955,6954
<6957=6958
<6958=6959
<6959=6966,6965,6960
<6960=6964,6961
<6961=6963,6962
<6967=6968
<6968=6973,6972,6969
<6969=6971,6970
<6986=6989,6988,6987
<6989=7002,6990
<6990=6991
<6991=6993,6992
<6993=6994
<6994=6996,6995
<6996=6998,6997
<6998=6999
<6999=7001,7000
<7002=7003
<7003=7010,7004
<7004=7005
<7005=7006
<7006=7008,7007
<7008=7009
<7010=7011
<7019=7025,7024,7020
<7020=7021
<7021=7023,7022
<7025=7075,7074,7070,7051,7028,7026
<7026=7027
<7028=7049,7029
<7029=7034,7030
<7030=7031
<7031=7033,7032
<7034=7035
<7035=7047,7036
<7036=7043,7041,7037
<7037=7038
<7038=7040,7039
<7041=7042
<7043=7044
<7044=7046,7045
<7047=7048
<7049=7050
<7051=7052
<7052=7069,7068,7053
<7053=7067,7054
<7054=7058,7055
<7055=7056
<7056=7057
<7058=7059
<7059=7061,7060
<7061=7063,7062
<7063=7064
<7064=7066,7065
<7070=7071
<7071=7073,7072
<7075=7076
<7076=7083,7077
<7077=7078
<7078=7079
<7079=7081,7080
<7081=7082
<7083=7084
<7098=7104,7103,7099
<7099=7100
<7100=7102,7101
<7104=7161,7142,7112,7105
<7105=7106
<7106=7110,7107
<7107=7108
<7108=7109
<7110=7111
<7112=7140,7113
<7113=7131,7124,7114
<7114=7122,7115
<7115=7116
<7116=7120,7117
<7117=7118
<7118=7119
<7120=7121
<7122=7123
<7124=7125
<7125=7129,7126
<7126=7127
<7127=7128
<7129=7130
<7131=7132
<7132=7139,7138,7133
<7133=7137,7134
<7134=7136,7135
<7140=7141
<7142=7143
<7143=7160,7159,7144
<7144=7158,7145
<7145=7149,7146
<7146=7147
<7147=7148
<7149=7150
<7150=7152,7151
<7152=7154,7153
<7154=7155
<7155=7157,7156
<7161=7162
<7162=7169,7163
<7163=7164
<7164=7165
<7165=7167,7166
<7167=7168
<7169=7170
<7184=7187,7186,7185
<7187=7200,7188
<7188=7189
<7189=7191,7190
<7191=7192
<7192=7194,7193
<7194=7196,7195
<7196=7197
<7197=7199,7198
<7200=7201
<7201=7208,7202
<7202=7203
<7203=7204
<7204=7206,7205
<7206=7207
<7208=7209
<7218=7221,7220,7219
<7221=7244,7235,7231,7222
<7222=7223
<7223=7225,7224
<7225=7227,7226
<7227=7228
<7228=7230,7229
<7231=7232
<7232=7234,7233
<7235=7236
<7236=7240,7237
<7237=7238
<7238=7239
<7240=7241
<7241=7243,7242
<7244=7245
<7245=7253,7252,7246
<7246=7251,7247
<7247=7249,7248
<7249=7250
<7263=7275,7274,7264
<7264=7271,7268,7265
<7265=7267,7266
<7268=7270,7269
<7271=7273,7272
<7275=7294,7276
<7276=7277
<7277=7285,7278
<7278=7283,7281,7279
<7279=7280
<7281=7282
<7283=7284
<7285=7286
<7286=7288,7287
<7288=7290,7289
<7290=7291
<7291=7293,7292
<7294=7295
<7295=7302,7296
<7296=7297
<7297=7298
<7298=7300,7299
<7300=7301
<7302=7303
<7314=7326,7325,7315
<7315=7322,7319,7316
<7316=7318,7317
<7319=7321,7320
<7322=7324,7323
<7326=7327
<7327=7560,7432,7328
<7328=7329
<7329=7431,7430,7429,7428,7427,7426,7425,7424,7423,7414,7405,7397,7389,7381,7373,7365,7357,7336,7330
<7330=7331
<7331=7333,7332
<7333=7335,7334
<7336=7337
<7337=7355,7338
<7338=7351,7347,7339
<7339=7340
<7340=7344,7341
<7341=7343,7342
<7344=7346,7345
<7347=7348
<7348=7350,7349
<7351=7352
<7352=7354,7353
<7355=7356
<7357=7358
<7358=7362,7359
<7359=7361,7360
<7362=7364,7363
<7365=7366
<7366=7370,7367
<7367=7369,7368
<7370=7372,7371
<7373=7374
<7374=7378,7375
<7375=7377,7376
<7378=7380,7379
<7381=7382
<7382=7386,7383
<7383=7385,7384
<7386=7388,7387
<7389=7390
<7390=7394,7391
<7391=7393,7392
<7394=7396,7395
<7397=7398
<7398=7402,7399
<7399=7401,7400
<7402=7404,7403
<7405=7406
<7406=7413,7412,7407
<7407=7411,7408
<7408=7410,7409
<7414=7415
<7415=7419,7416
<7416=7417
<7417=7418
<7419=7420
<7420=7422,7421
<7432=7559,7558,7557,7556,7555,7554,7553,7552,7551,7542,7529,7515,7469,7465,7451,7444,7440,7433
<7433=7434
<7434=7438,7435
<7435=7436
<7436=7437
<7438=7439
<7440=7441
<7441=7443,7442
<7444=7445
<7445=7449,7446
<7446=7447
<7447=7448
<7449=7450
<7451=7452
<7452=7464,7463,7453
<7453=7462,7454
<7454=7460,7455
<7455=7458,7456
<7456=7457
<7458=7459
<7460=7461
<7465=7466
<7466=7468,7467
<7469=7509,7470
<7470=7492,7471
<7471=7486,7472
<7472=7479,7473
<7473=7474
<7474=7476,7475
<7476=7478,7477
<7479=7480
<7480=7484,7481
<7481=7482
<7482=7483
<7484=7485
<7486=7487
<7487=7491,7488
<7488=7490,7489
<7492=7493
<7493=7506,7494
<7494=7504,7495
<7495=7496
<7496=7497
<7497=7499,7498
<7499=7501,7500
<7501=7503,7502
<7504=7505
<7506=7508,7507
<7509=7510
<7510=7514,7511
<7511=7513,7512
<7515=7527,7516
<7516=7517
<7517=7524,7518
<7518=7522,7519
<7519=7520
<7520=7521
<7522=7523
<7524=7526,7525
<7527=7528
<7529=7530
<7530=7540,7531
<7531=7538,7536,7532
<7532=7533
<7533=7535,7534
<7536=7537
<7538=7539
<7540=7541
<7542=7543
<7543=7547,7544
<7544=7545
<7545=7546
<7547=7548
<7548=7550,7549
<7560=7561
<7561=7563,7562
<7610=7619,7618,7611
<7611=7615,7612
<7612=7614,7613
<7615=7617,7616
<7619=7622,7620
<7620=7621
<7622=8468,8111,7623
<7623=7624
<7624=8102,8021,7625
<7625=7626
<7626=8012,7971,7627
<7627=7628
<7628=7962,7905,7629
<7629=7630
<7630=7896,7815,7631
<7631=7632
<7632=7806,7757,7633
<7633=7634
<7634=7748,7685,7635
<7635=7636
<7636=7676,7637
<7637=7675,7674,7673,7672,7671,7670,7669,7668,7667,7665,7646,7640,7638
<7638=7639
<7640=7641
<7641=7643,7642
<7643=7645,7644
<7646=7657,7647
<7647=7650,7648
<7648=7649
<7650=7651
<7651=7655,7652
<7652=7653
<7653=7654
<7655=7656
<7657=7658
<7658=7662,7659
<7659=7661,7660
<7662=7664,7663
<7665=7666
<7676=7677
<7677=7683,7678
<7678=7681,7679
<7679=7680
<7681=7682
<7683=7684
<7685=7747,7746,7745,7744,7743,7742,7741,7740,7739,7737,7718,7712,7706,7700,7694,7688,7686
<7686=7687
<7688=7689
<7689=7691,7690
<7691=7693,7692
<7694=7695
<7695=7697,7696
<7697=7699,7698
<7700=7701
<7701=7703,7702
<7703=7705,7704
<7706=7707
<7707=7709,7708
<7709=7711,7710
<7712=7713
<7713=7715,7714
<7715=7717,7716
<7718=7729,7719
<7719=7722,7720
<7720=7721
<7722=7723
<7723=7727,7724
<7724=7725
<7725=7726
<7727=7728
<7729=7730
<7730=7734,7731
<7731=7733,7732
<7734=7736,7735
<7737=7738
<7748=7749
<7749=7755,7750
<7750=7753,7751
<7751=7752
<7753=7754
<7755=7756
<7757=7805,7804,7803,7802,7801,7800,7799,7798,7797,7795,7776,7768,7760,7758
<7758=7759
<7760=7761
<7761=7765,7762
<7762=7764,7763
<7765=7767,7766
<7768=7769
<7769=7773,7770
<7770=7772,7771
<7773=7775,7774
<7776=7787,7777
<7777=7780,7778
<7778=7779
<7780=7781
<7781=7785,7782
<7782=7783
<7783=7784
<7785=7786
<7787=7788
<7788=7792,7789
<7789=7791,7790
<7792=7794,7793
<7795=7796
<7806=7807
<7807=7813,7808
<7808=7811,7809
<7809=7810
<7811=7812
<7813=7814
<7815=7895,7894,7893,7892,7891,7890,7889,7888,7887,7885,7866,7858,7850,7842,7834,7826,7818,7816
<7816=7817
<7818=7819
<7819=7823,7820
<7820=7822,7821
<7823=7825,7824
<7826=7827
<7827=7831,7828
<7828=7830,7829
<7831=7833,7832
<7834=7835
<7835=7839,7836
<7836=7838,7837
<7839=7841,7840
<7842=7843
<7843=7847,7844
<7844=7846,7845
<7847=7849,7848
<7850=7851
<7851=7855,7852
<7852=7854,7853
<7855=7857,7856
<7858=7859
<7859=7863,7860
<7860=7862,7861
<7863=7865,7864
<7866=7877,7867
<7867=7870,7868
<7868=7869
<7870=7871
<7871=7875,7872
<7872=7873
<7873=7874
<7875=7876
<7877=7878
<7878=7882,7879
<7879=7881,7880
<7882=7884,7883
<7885=7886
<7896=7897
<7897=7903,7898
<7898=7901,7899
<7899=7900
<7901=7902
<7903=7904
<7905=7961,7960,7959,7958,7957,7956,7955,7954,7953,7951,7932,7924,7916,7908,7906
<7906=7907
<7908=7909
<7909=7913,7910
<7910=7912,7911
<7913=7915,7914
<7916=7917
<7917=7921,7918
<7918=7920,7919
<7921=7923,7922
<7924=7925
<7925=7929,7926
<7926=7928,7927
<7929=7931,7930
<7932=7943,7933
<7933=7936,7934
<7934=7935
<7936=7937
<7937=7941,7938
<7938=7939
<7939=7940
<7941=7942
<7943=7944
<7944=7948,7945
<7945=7947,7946
<7948=7950,7949
<7951=7952
<7962=7963
<7963=7969,7964
<7964=7967,7965
<7965=7966
<7967=7968
<7969=7970
<7971=8011,8010,8009,8008,8007,8006,8005,8004,8003,8001,7982,7974,7972
<7972=7973
<7974=7975
<7975=7979,7976
<7976=7978,7977
<7979=7981,7980
<7982=7993,7983
<7983=7986,7984
<7984=7985
<7986=7987
<7987=7991,7988
<7988=7989
<7989=7990
<7991=7992
<7993=7994
<7994=7998,7995
<7995=7997,7996
<7998=8000,7999
<8001=8002
<8012=8013
<8013=8019,8014
<8014=8017,8015
<8015=8016
<8017=8018
<8019=8020
<8021=8101,8100,8099,8098,8097,8096,8095,8094,8093,8091,8072,8064,8056,8048,8040,8032,8024,8022
<8022=8023
<8024=8025
<8025=8029,8026
<8026=8028,8027
<8029=8031,8030
<8032=8033
<8033=8037,8034
<8034=8036,8035
<8037=8039,8038
<8040=8041
<8041=8045,8042
<8042=8044,8043
<8045=8047,8046
<8048=8049
<8049=8053,8050
<8050=8052,8051
<8053=8055,8054
<8056=8057
<8057=8061,8058
<8058=8060,8059
<8061=8063,8062
<8064=8065
<8065=8069,8066
<8066=8068,8067
<8069=8071,8070
<8072=8083,8073
<8073=8076,8074
<8074=8075
<8076=8077
<8077=8081,8078
<8078=8079
<8079=8080
<8081=8082
<8083=8084
<8084=8088,8085
<8085=8087,8086
<8088=8090,8089
<8091=8092
<8102=8103
<8103=8109,8104
<8104=8107,8105
<8105=8106
<8107=8108
<8109=8110
<8111=8467,8466,8465,8464,8463,8462,8461,8460,8459,8457,8438,8432,8426,8420,8414,8112,8114,8120,8126,8132,8138,8146,8152,8158,8164,8170,8176,8182,8190,8198,8204,8210,8216,8222,8228,8234,8240,8246,8252,8258,8264,8270,8276,8282,8288,8294,8300,8306,8312,8318,8324,8330,8336,8342,8348,8354,8360,8366,8372,8378,8384,8390,8396,8402,8408
<8112=8113
<8114=8115
<8115=8117,8116
<8117=8119,8118
<8120=8121
<8121=8123,8122
<8123=8125,8124
<8126=8127
<8127=8129,8128
<8129=8131,8130
<8132=8133
<8133=8135,8134
<8135=8137,8136
<8138=8139
<8139=8143,8140
<8140=8142,8141
<8143=8145,8144
<8146=8147
<8147=8149,8148
<8149=8151,8150
<8152=8153
<8153=8155,8154
<8155=8157,8156
<8158=8159
<8159=8161,8160
<8161=8163,8162
<8164=8165
<8165=8167,8166
<8167=8169,8168
<8170=8171
<8171=8173,8172
<8173=8175,8174
<8176=8177
<8177=8179,8178
<8179=8181,8180
<8182=8183
<8183=8187,8184
<8184=8186,8185
<8187=8189,8188
<8190=8191
<8191=8195,8192
<8192=8194,8193
<8195=8197,8196
<8198=8199
<8199=8201,8200
<8201=8203,8202
<8204=8205
<8205=8207,8206
<8207=8209,8208
<8210=8211
<8211=8213,8212
<8213=8215,8214
<8216=8217
<8217=8219,8218
<8219=8221,8220
<8222=8223
<8223=8225,8224
<8225=8227,8226
<8228=8229
<8229=8231,8230
<8231=8233,8232
<8234=8235
<8235=8237,8236
<8237=8239,8238
<8240=8241
<8241=8243,8242
<8243=8245,8244
<8246=8247
<8247=8249,8248
<8249=8251,8250
<8252=8253
<8253=8255,8254
<8255=8257,8256
<8258=8259
<8259=8261,8260
<8261=8263,8262
<8264=8265
<8265=8267,8266
<8267=8269,8268
<8270=8271
<8271=8273,8272
<8273=8275,8274
<8276=8277
<8277=8279,8278
<8279=8281,8280
<8282=8283
<8283=8285,8284
<8285=8287,8286
<8288=8289
<8289=8291,8290
<8291=8293,8292
<8294=8295
<8295=8297,8296
<8297=8299,8298
<8300=8301
<8301=8303,8302
<8303=8305,8304
<8306=8307
<8307=8309,8308
<8309=8311,8310
<8312=8313
<8313=8315,8314
<8315=8317,8316
<8318=8319
<8319=8321,8320
<8321=8323,8322
<8324=8325
<8325=8327,8326
<8327=8329,8328
<8330=8331
<8331=8333,8332
<8333=8335,8334
<8336=8337
<8337=8339,8338
<8339=8341,8340
<8342=8343
<8343=8345,8344
<8345=8347,8346
<8348=8349
<8349=8351,8350
<8351=8353,8352
<8354=8355
<8355=8357,8356
<8357=8359,8358
<8360=8361
<8361=8363,8362
<8363=8365,8364
<8366=8367
<8367=8369,8368
<8369=8371,8370
<8372=8373
<8373=8375,8374
<8375=8377,8376
<8378=8379
<8379=8381,8380
<8381=8383,8382
<8384=8385
<8385=8387,8386
<8387=8389,8388
<8390=8391
<8391=8393,8392
<8393=8395,8394
<8396=8397
<8397=8399,8398
<8399=8401,8400
<8402=8403
<8403=8405,8404
<8405=8407,8406
<8408=8409
<8409=8411,8410
<8411=8413,8412
<8414=8415
<8415=8417,8416
<8417=8419,8418
<8420=8421
<8421=8423,8422
<8423=8425,8424
<8426=8427
<8427=8429,8428
<8429=8431,8430
<8432=8433
<8433=8435,8434
<8435=8437,8436
<8438=8449,8439
<8439=8442,8440
<8440=8441
<8442=8443
<8443=8447,8444
<8444=8445
<8445=8446
<8447=8448
<8449=8450
<8450=8454,8451
<8451=8453,8452
<8454=8456,8455
<8457=8458
<8468=8469
<8469=8475,8470
<8470=8473,8471
<8471=8472
<8473=8474
<8475=8476
<8669=8675,8674,8670
<8670=8671
<8671=8673,8672
<8675=9329,9328,9327,9326,9325,9324,9323,9322,9321,9314,8678,8676
<8676=8677
<8678=9310,8695,8679
<8679=8680
<8680=8681
<8681=8682
<8682=8693,8683
<8683=8691,8684
<8684=8685
<8685=8687,8686
<8687=8688
<8688=8690,8689
<8691=8692
<8693=8694
<8695=9282,8986,8970,8698,8696
<8696=8697
<8698=8964,8699
<8699=8956,8948,8940,8932,8924,8916,8908,8900,8892,8884,8876,8868,8860,8852,8844,8836,8828,8820,8812,8804,8796,8788,8780,8772,8764,8756,8748,8740,8732,8724,8716,8708,8700
<8700=8701
<8701=8705,8702
<8702=8704,8703
<8705=8707,8706
<8708=8709
<8709=8713,8710
<8710=8712,8711
<8713=8715,8714
<8716=8717
<8717=8721,8718
<8718=8720,8719
<8721=8723,8722
<8724=8725
<8725=8729,8726
<8726=8728,8727
<8729=8731,8730
<8732=8733
<8733=8737,8734
<8734=8736,8735
<8737=8739,8738
<8740=8741
<8741=8745,8742
<8742=8744,8743
<8745=8747,8746
<8748=8749
<8749=8753,8750
<8750=8752,8751
<8753=8755,8754
<8756=8757
<8757=8761,8758
<8758=8760,8759
<8761=8763,8762
<8764=8765
<8765=8769,8766
<8766=8768,8767
<8769=8771,8770
<8772=8773
<8773=8777,8774
<8774=8776,8775
<8777=8779,8778
<8780=8781
<8781=8785,8782
<8782=8784,8783
<8785=8787,8786
<8788=8789
<8789=8793,8790
<8790=8792,8791
<8793=8795,8794
<8796=8797
<8797=8801,8798
<8798=8800,8799
<8801=8803,8802
<8804=8805
<8805=8809,8806
<8806=8808,8807
<8809=8811,8810
<8812=8813
<8813=8817,8814
<8814=8816,8815
<8817=8819,8818
<8820=8821
<8821=8825,8822
<8822=8824,8823
<8825=8827,8826
<8828=8829
<8829=8833,8830
<8830=8832,8831
<8833=8835,8834
<8836=8837
<8837=8841,8838
<8838=8840,8839
<8841=8843,8842
<8844=8845
<8845=8849,8846
<8846=8848,8847
<8849=8851,8850
<8852=8853
<8853=8857,8854
<8854=8856,8855
<8857=8859,8858
<8860=8861
<8861=8865,8862
<8862=8864,8863
<8865=8867,8866
<8868=8869
<8869=8873,8870
<8870=8872,8871
<8873=8875,8874
<8876=8877
<8877=8881,8878
<8878=8880,8879
<8881=8883,8882
<8884=8885
<8885=8889,8886
<8886=8888,8887
<8889=8891,8890
<8892=8893
<8893=8897,8894
<8894=8896,8895
<8897=8899,8898
<8900=8901
<8901=8905,8902
<8902=8904,8903
<8905=8907,8906
<8908=8909
<8909=8913,8910
<8910=8912,8911
<8913=8915,8914
<8916=8917
<8917=8921,8918
<8918=8920,8919
<8921=8923,8922
<8924=8925
<8925=8929,8926
<8926=8928,8927
<8929=8931,8930
<8932=8933
<8933=8937,8934
<8934=8936,8935
<8937=8939,8938
<8940=8941
<8941=8945,8942
<8942=8944,8943
<8945=8947,8946
<8948=8949
<8949=8953,8950
<8950=8952,8951
<8953=8955,8954
<8956=8957
<8957=8961,8958
<8958=8960,8959
<8961=8963,8962
<8964=8965
<8965=8967,8966
<8967=8969,8968
<8970=8980,8971
<8971=8972
<8972=8973
<8973=8977,8974
<8974=8976,8975
<8977=8979,8978
<8980=8981
<8981=8983,8982
<8983=8985,8984
<8986=9276,8987
<8987=9268,9260,9252,9244,9236,9228,9220,9212,9204,9196,9188,9180,9172,9164,9156,9148,9140,9132,9124,9116,9108,9100,9092,9084,9076,9068,9060,9052,9044,9036,9028,9020,9012,9004,8996,8988
<8988=8989
<8989=8993,8990
<8990=8992,8991
<8993=8995,8994
<8996=8997
<8997=9001,8998
<8998=9000,8999
<9001=9003,9002
<9004=9005
<9005=9009,9006
<9006=9008,9007
<9009=9011,9010
<9012=9013
<9013=9017,9014
<9014=9016,9015
<9017=9019,9018
<9020=9021
<9021=9025,9022
<9022=9024,9023
<9025=9027,9026
<9028=9029
<9029=9033,9030
<9030=9032,9031
<9033=9035,9034
<9036=9037
<9037=9041,9038
<9038=9040,9039
<9041=9043,9042
<9044=9045
<9045=9049,9046
<9046=9048,9047
<9049=9051,9050
<9052=9053
<9053=9057,9054
<9054=9056,9055
<9057=9059,9058
<9060=9061
<9061=9065,9062
<9062=9064,9063
<9065=9067,9066
<9068=9069
<9069=9073,9070
<9070=9072,9071
<9073=9075,9074
<9076=9077
<9077=9081,9078
<9078=9080,9079
<9081=9083,9082
<9084=9085
<9085=9089,9086
<9086=9088,9087
<9089=9091,9090
<9092=9093
<9093=9097,9094
<9094=9096,9095
<9097=9099,9098
<9100=9101
<9101=9105,9102
<9102=9104,9103
<9105=9107,9106
<9108=9109
<9109=9113,9110
<9110=9112,9111
<9113=9115,9114
<9116=9117
<9117=9121,9118
<9118=9120,9119
<9121=9123,9122
<9124=9125
<9125=9129,9126
<9126=9128,9127
<9129=9131,9130
<9132=9133
<9133=9137,9134
<9134=9136,9135
<9137=9139,9138
<9140=9141
<9141=9145,9142
<9142=9144,9143
<9145=9147,9146
<9148=9149
<9149=9153,9150
<9150=9152,9151
<9153=9155,9154
<9156=9157
<9157=9161,9158
<9158=9160,9159
<9161=9163,9162
<9164=9165
<9165=9169,9166
<9166=9168,9167
<9169=9171,9170
<9172=9173
<9173=9177,9174
<9174=9176,9175
<9177=9179,9178
<9180=9181
<9181=9185,9182
<9182=9184,9183
<9185=9187,9186
<9188=9189
<9189=9193,9190
<9190=9192,9191
<9193=9195,9194
<9196=9197
<9197=9201,9198
<9198=9200,9199
<9201=9203,9202
<9204=9205
<9205=9209,9206
<9206=9208,9207
<9209=9211,9210
<9212=9213
<9213=9217,9214
<9214=9216,9215
<9217=9219,9218
<9220=9221
<9221=9225,9222
<9222=9224,9223
<9225=9227,9226
<9228=9229
<9229=9233,9230
<9230=9232,9231
<9233=9235,9234
<9236=9237
<9237=9241,9238
<9238=9240,9239
<9241=9243,9242
<9244=9245
<9245=9249,9246
<9246=9248,9247
<9249=9251,9250
<9252=9253
<9253=9257,9254
<9254=9256,9255
<9257=9259,9258
<9260=9261
<9261=9265,9262
<9262=9264,9263
<9265=9267,9266
<9268=9269
<9269=9273,9270
<9270=9272,9271
<9273=9275,9274
<9276=9277
<9277=9279,9278
<9279=9281,9280
<9282=9304,9283
<9283=9284
<9284=9285
<9285=9302,9286
<9286=9300,9298,9291,9287
<9287=9288
<9288=9290,9289
<9291=9292
<9292=9294,9293
<9294=9295
<9295=9297,9296
<9298=9299
<9300=9301
<9302=9303
<9304=9305
<9305=9307,9306
<9307=9309,9308
<9310=9311
<9311=9313,9312
<9314=9315
<9315=9317,9316
<9317=9318
<9318=9320,9319
<9484=9490,9489,9485
<9485=9486
<9486=9488,9487
<9490=9541,9493,9491
<9491=9492
<9493=9537,9528,9525,9494
<9494=9524,9523,9522,9521,9520,9519,9518,9517,9516,9515,9514,9513,9512,9511,9510,9509,9508,9507,9506,9505,9504,9503,9502,9501,9500,9499,9495
<9495=9496
<9496=9498,9497
<9525=9527,9526
<9528=9529
<9529=9536,9530
<9530=9532,9531
<9532=9533
<9533=9535,9534
<9537=9538
<9538=9540,9539
<9541=9542
<9542=9544,9543
