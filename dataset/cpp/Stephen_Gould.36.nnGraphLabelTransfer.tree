>12	FunctionDef	loadDataJob (drwnNNGraphLabelDistributions & labelDistributions , const drwnNNGraph & graph , unsigned imgIndx)
>13	ParameterList	drwnNNGraphLabelDistributions & labelDistributions , const drwnNNGraph & graph , unsigned imgIndx
>14	Parameter	 
>15	Identifier	imgIndx
>16	ParameterType	unsigned
>17	Parameter	 
>18	Identifier	graph
>19	ParameterType	const drwnNNGraph &
>20	Parameter	 
>21	Identifier	labelDistributions
>22	ParameterType	drwnNNGraphLabelDistributions &
>23	CompoundStatement	 
>30	FunctionDef	~loadDataJob ()
>31	ParameterList	 
>32	CompoundStatement	 
>36	FunctionDef	operator ( ) ()
>37	ParameterList	 
>38	ReturnType	void
>39	CompoundStatement	 
>40	ExpressionStatement	 
>41	CallExpression	unlock ( )
>42	ArgumentList	 
>43	Callee	unlock
>44	Identifier	unlock
>45	ExpressionStatement	 
>46	AssignmentExpr	_labelDistributions [ _imgIndx ] = data . getSegmentLabelMarginals ( nLabels )
>47	CallExpression	data . getSegmentLabelMarginals ( nLabels )
>48	ArgumentList	nLabels
>49	Argument	nLabels
>50	Identifier	nLabels
>51	Callee	data . getSegmentLabelMarginals
>52	MemberAccess	data . getSegmentLabelMarginals
>53	Identifier	getSegmentLabelMarginals
>54	Identifier	data
>55	ArrayIndexing	_labelDistributions [ _imgIndx ]
>56	Identifier	_imgIndx
>57	Identifier	_labelDistributions
>58	ExpressionStatement	 
>59	CallExpression	lock ( )
>60	ArgumentList	 
>61	Callee	lock
>62	Identifier	lock
>63	ExpressionStatement	 
>64	CallExpression	DRWN_ASSERT ( data . numSegments ( ) == _graph [ _imgIndx ] . numNodes ( ) )
>65	ArgumentList	data . numSegments ( ) == _graph [ _imgIndx ] . numNodes ( )
>66	Argument	data . numSegments ( ) == _graph [ _imgIndx ] . numNodes ( )
>67	EqualityExpression	data . numSegments ( ) == _graph [ _imgIndx ] . numNodes ( )
>68	CallExpression	_graph [ _imgIndx ] . numNodes ( )
>69	ArgumentList	 
>70	Callee	_graph [ _imgIndx ] . numNodes
>71	MemberAccess	_graph [ _imgIndx ] . numNodes
>72	Identifier	numNodes
>73	ArrayIndexing	_graph [ _imgIndx ]
>74	Identifier	_imgIndx
>75	Identifier	_graph
>76	CallExpression	data . numSegments ( )
>77	ArgumentList	 
>78	Callee	data . numSegments
>79	MemberAccess	data . numSegments
>80	Identifier	numSegments
>81	Identifier	data
>82	Callee	DRWN_ASSERT
>83	Identifier	DRWN_ASSERT
>84	IdentifierDeclStatement	 
>85	IdentifierDecl	data ( _graph [ _imgIndx ] . name ( ) )
>86	CallExpression	_graph [ _imgIndx ] . name ( )
>87	ArgumentList	 
>88	Callee	_graph [ _imgIndx ] . name
>89	MemberAccess	_graph [ _imgIndx ] . name
>90	Identifier	name
>91	ArrayIndexing	_graph [ _imgIndx ]
>92	Identifier	_imgIndx
>93	Identifier	_graph
>94	Identifier	data
>95	IdentifierDeclType	drwnNNGraphImageData
>96	IdentifierDeclStatement	 
>97	IdentifierDecl	nLabels = gMultiSegRegionDefs . maxKey ( ) + 1
>98	AssignmentExpr	nLabels = gMultiSegRegionDefs . maxKey ( ) + 1
>99	AdditiveExpression	gMultiSegRegionDefs . maxKey ( ) + 1
>100	PrimaryExpression	1
>101	CallExpression	gMultiSegRegionDefs . maxKey ( )
>102	ArgumentList	 
>103	Callee	gMultiSegRegionDefs . maxKey
>104	MemberAccess	gMultiSegRegionDefs . maxKey
>105	Identifier	maxKey
>106	Identifier	gMultiSegRegionDefs
>107	Identifier	nLabels
>108	Identifier	nLabels
>109	IdentifierDeclType	const int
>141	FunctionDef	labelTransferJob ()
>142	ParameterList	 
>143	CompoundStatement	 
>147	FunctionDef	~labelTransferJob ()
>148	ParameterList	 
>149	CompoundStatement	 
>153	FunctionDef	operator ( ) ()
>154	ParameterList	 
>155	ReturnType	void
>156	CompoundStatement	 
>157	IfStatement	if ( bVisualize || ( outImageExt != NULL ) )
>158	CompoundStatement	 
>159	IfStatement	if ( outImageExt != NULL )
>160	CompoundStatement	 
>161	ExpressionStatement	 
>162	CallExpression	cv 
>163	ArgumentList	filename . c_str ( )
>164	Argument	canvas
>165	Identifier	canvas
>166	Argument	filename . c_str ( )
>167	CallExpression	filename . c_str ( )
>168	ArgumentList	 
>169	Callee	filename . c_str
>170	MemberAccess	filename . c_str
>171	Identifier	c_str
>172	Identifier	filename
>173	Callee	cv 
>174	Identifier	cv 
>175	IdentifierDeclStatement	 
>176	IdentifierDecl	filename = gMultiSegConfig . filebase ( \"outputDir\" , baseName ) + string ( outImageExt )
>177	AssignmentExpr	filename = gMultiSegConfig . filebase ( \"outputDir\" , baseName ) + string ( outImageExt )
>178	AdditiveExpression	gMultiSegConfig . filebase ( \"outputDir\" , baseName ) + string ( outImageExt )
>179	CallExpression	string ( outImageExt )
>180	ArgumentList	outImageExt
>181	Argument	outImageExt
>182	Identifier	outImageExt
>183	Callee	string
>184	Identifier	string
>185	CallExpression	gMultiSegConfig . filebase ( \"outputDir\" , baseName )
>186	ArgumentList	\"outputDir\"
>187	Argument	baseName
>188	Identifier	baseName
>189	Argument	\"outputDir\"
>190	PrimaryExpression	\"outputDir\"
>191	Callee	gMultiSegConfig . filebase
>192	MemberAccess	gMultiSegConfig . filebase
>193	Identifier	filebase
>194	Identifier	gMultiSegConfig
>195	Identifier	filename
>196	Identifier	filename
>197	IdentifierDeclType	string
>198	Condition	 
>199	EqualityExpression	outImageExt != NULL
>200	Identifier	NULL
>201	Identifier	outImageExt
>202	IfStatement	if ( bVisualize )
>203	CompoundStatement	 
>204	ExpressionStatement	 
>205	CallExpression	unlock ( )
>206	ArgumentList	 
>207	Callee	unlock
>208	Identifier	unlock
>209	ExpressionStatement	 
>210	CallExpression	drwnShowDebuggingImage ( canvas , wndName , false )
>211	ArgumentList	canvas
>212	Argument	false
>213	Identifier	false
>214	Argument	wndName
>215	Identifier	wndName
>216	Argument	canvas
>217	Identifier	canvas
>218	Callee	drwnShowDebuggingImage
>219	Identifier	drwnShowDebuggingImage
>220	IdentifierDeclStatement	 
>221	IdentifierDecl	wndName = string ( \"predicted labels (thread
>222	AssignmentExpr	wndName = string ( \"predicted labels (thread
>223	AdditiveExpression	string ( \"predicted labels (thread
>224	AdditiveExpression	toString ( threadId ( ) ) + string ( \")\" )
>225	CallExpression	string ( \")\" )
>226	ArgumentList	\")\"
>227	Argument	\")\"
>228	PrimaryExpression	\")\"
>229	Callee	string
>230	Identifier	string
>231	CallExpression	toString ( threadId ( ) )
>232	ArgumentList	threadId ( )
>233	Argument	threadId ( )
>234	CallExpression	threadId ( )
>235	ArgumentList	 
>236	Callee	threadId
>237	Identifier	threadId
>238	Callee	toString
>239	Identifier	toString
>240	CallExpression	string ( \"predicted labels (thread
>241	ArgumentList	\"predicted labels (thread
>242	Argument	\"predicted labels (thread
>243	PrimaryExpression	\"predicted labels (thread
>244	Callee	string
>245	Identifier	string
>246	Identifier	wndName
>247	Identifier	wndName
>248	IdentifierDeclType	string
>249	ExpressionStatement	 
>250	CallExpression	lock ( )
>251	ArgumentList	 
>252	Callee	lock
>253	Identifier	lock
>254	Condition	 
>255	Identifier	bVisualize
>256	IdentifierDeclStatement	 
>257	IdentifierDecl	canvas = drwnMultiSegVis 
>258	AssignmentExpr	canvas = drwnMultiSegVis 
>259	CallExpression	drwnMultiSegVis 
>260	ArgumentList	instance
>261	Argument	instance
>262	Identifier	instance
>263	Callee	drwnMultiSegVis 
>264	Identifier	drwnMultiSegVis 
>265	Identifier	canvas
>266	Identifier	canvas
>267	IdentifierDeclType	cv 
>268	Condition	 
>269	OrExpression	bVisualize || ( outImageExt != NULL )
>270	EqualityExpression	outImageExt != NULL
>271	Identifier	NULL
>272	Identifier	outImageExt
>273	Identifier	bVisualize
>274	IfStatement	if ( outLabelExt != NULL )
>275	CompoundStatement	 
>276	ExpressionStatement	 
>277	CallExpression	ofs . close ( )
>278	ArgumentList	 
>279	Callee	ofs . close
>280	MemberAccess	ofs . close
>281	Identifier	close
>282	Identifier	ofs
>283	ExpressionStatement	 
>284	ShiftExpression	ofs << instance . pixelLabels << \"\n\"
>285	ShiftExpression	instance . pixelLabels << \"\n\"
>286	PrimaryExpression	\"\n\"
>287	MemberAccess	instance . pixelLabels
>288	Identifier	pixelLabels
>289	Identifier	instance
>290	Identifier	ofs
>291	IdentifierDeclStatement	 
>292	IdentifierDecl	ofs ( filename . c_str ( ) )
>293	CallExpression	filename . c_str ( )
>294	ArgumentList	 
>295	Callee	filename . c_str
>296	MemberAccess	filename . c_str
>297	Identifier	c_str
>298	Identifier	filename
>299	Identifier	ofs
>300	IdentifierDeclType	ofstream
>301	IdentifierDeclStatement	 
>302	IdentifierDecl	filename = gMultiSegConfig . filebase ( \"outputDir\" , baseName ) + string ( outLabelExt )
>303	AssignmentExpr	filename = gMultiSegConfig . filebase ( \"outputDir\" , baseName ) + string ( outLabelExt )
>304	AdditiveExpression	gMultiSegConfig . filebase ( \"outputDir\" , baseName ) + string ( outLabelExt )
>305	CallExpression	string ( outLabelExt )
>306	ArgumentList	outLabelExt
>307	Argument	outLabelExt
>308	Identifier	outLabelExt
>309	Callee	string
>310	Identifier	string
>311	CallExpression	gMultiSegConfig . filebase ( \"outputDir\" , baseName )
>312	ArgumentList	\"outputDir\"
>313	Argument	baseName
>314	Identifier	baseName
>315	Argument	\"outputDir\"
>316	PrimaryExpression	\"outputDir\"
>317	Callee	gMultiSegConfig . filebase
>318	MemberAccess	gMultiSegConfig . filebase
>319	Identifier	filebase
>320	Identifier	gMultiSegConfig
>321	Identifier	filename
>322	Identifier	filename
>323	IdentifierDeclType	string
>324	Condition	 
>325	EqualityExpression	outLabelExt != NULL
>326	Identifier	NULL
>327	Identifier	outLabelExt
>328	ExpressionStatement	 
>329	CallExpression	inf . alphaExpansion ( & instance , pairwiseSmoothness )
>330	ArgumentList	& instance
>331	Argument	pairwiseSmoothness
>332	Identifier	pairwiseSmoothness
>333	Argument	& instance
>334	UnaryOp	& instance
>335	Identifier	instance
>336	UnaryOperator	&
>337	Callee	inf . alphaExpansion
>338	MemberAccess	inf . alphaExpansion
>339	Identifier	alphaExpansion
>340	Identifier	inf
>341	IdentifierDeclStatement	 
>342	IdentifierDecl	inf
>343	Identifier	inf
>344	IdentifierDeclType	drwnPixelSegCRFInference
>345	ForStatement	for ( int y = 0 ; y < instance . pixelLabels . rows ( ) ; y ++ )
>346	CompoundStatement	 
>347	ForStatement	for ( int x = 0 ; x < instance . pixelLabels . cols ( ) ; x ++ )
>348	CompoundStatement	 
>349	ExpressionStatement	 
>350	AssignmentExpr	Eigen 
>351	MultiplicativeExpression	- 1.0 * marginals . array ( ) . log ( )
>352	CallExpression	marginals . array ( ) . log ( )
>353	ArgumentList	 
>354	Callee	marginals . array ( ) . log
>355	MemberAccess	marginals . array ( ) . log
>356	Identifier	log
>357	CallExpression	marginals . array ( )
>358	ArgumentList	 
>359	Callee	marginals . array
>360	MemberAccess	marginals . array
>361	Identifier	array
>362	Identifier	marginals
>363	UnaryOp	- 1.0
>364	PrimaryExpression	1.0
>365	UnaryOperator	-
>366	RelationalExpression	Eigen 
>367	RelationalExpression	VectorXd > ( & instance . unaries [ instance . pixel2Indx ( x , y ) ] [ 0 ] , nLabels )
>368	Expression	& instance . unaries [ instance . pixel2Indx ( x , y ) ] [ 0 ] , nLabels
>369	Identifier	nLabels
>370	UnaryOp	& instance . unaries [ instance . pixel2Indx ( x , y ) ] [ 0 ]
>371	ArrayIndexing	instance . unaries [ instance . pixel2Indx ( x , y ) ] [ 0 ]
>372	PrimaryExpression	0
>373	ArrayIndexing	instance . unaries [ instance . pixel2Indx ( x , y ) ]
>374	CallExpression	instance . pixel2Indx ( x , y )
>375	ArgumentList	x
>376	Argument	y
>377	Identifier	y
>378	Argument	x
>379	Identifier	x
>380	Callee	instance . pixel2Indx
>381	MemberAccess	instance . pixel2Indx
>382	Identifier	pixel2Indx
>383	Identifier	instance
>384	MemberAccess	instance . unaries
>385	Identifier	unaries
>386	Identifier	instance
>387	UnaryOperator	&
>388	Identifier	VectorXd
>389	Identifier	Eigen 
>390	ForStatement	for ( int c = 0 ; c < data . segments ( ) . channels ( ) ; c ++ )
>391	CompoundStatement	 
>392	ForStatement	for ( drwnNNGraphEdgeList 
>393	CompoundStatement	 
>394	ExpressionStatement	 
>395	AssignmentExpr	rank += 1.0
>396	PrimaryExpression	1.0
>397	Identifier	rank
>398	ExpressionStatement	 
>399	AssignmentExpr	marginals += w * ( * labelDistributions ) [ kt -> targetNode ]
>400	MultiplicativeExpression	w * ( * labelDistributions ) [ kt -> targetNode ]
>401	ArrayIndexing	( * labelDistributions ) [ kt -> targetNode ]
>402	PtrMemberAccess	kt -> targetNode
>403	Identifier	targetNode
>404	Identifier	kt
>405	UnaryOp	* labelDistributions
>406	Identifier	labelDistributions
>407	UnaryOperator	*
>408	Identifier	w
>409	Identifier	marginals
>410	IdentifierDeclStatement	 
>411	IdentifierDecl	w = 1.0 / rank
>412	AssignmentExpr	w = 1.0 / rank
>413	MultiplicativeExpression	1.0 / rank
>414	Identifier	rank
>415	PrimaryExpression	1.0
>416	Identifier	w
>417	Identifier	w
>418	IdentifierDeclType	const double
>419	IfStatement	if ( ( * labelDistributions ) [ kt -> targetNode . imgIndx ] . empty ( ) )
>420	ContinueStatement	 
>421	Condition	 
>422	CallExpression	( * labelDistributions ) [ kt -> targetNode . imgIndx ] . empty ( )
>423	ArgumentList	 
>424	Callee	( * labelDistributions ) [ kt -> targetNode . imgIndx ] . empty
>425	MemberAccess	( * labelDistributions ) [ kt -> targetNode . imgIndx ] . empty
>426	Identifier	empty
>427	ArrayIndexing	( * labelDistributions ) [ kt -> targetNode . imgIndx ]
>428	MemberAccess	kt -> targetNode . imgIndx
>429	Identifier	imgIndx
>430	PtrMemberAccess	kt -> targetNode
>431	Identifier	targetNode
>432	Identifier	kt
>433	UnaryOp	* labelDistributions
>434	Identifier	labelDistributions
>435	UnaryOperator	*
>436	UnaryExpression	 
>437	Identifier	kt
>438	IncDec	++
>439	Condition	 
>440	EqualityExpression	kt != e . end ( )
>441	CallExpression	e . end ( )
>442	ArgumentList	 
>443	Callee	e . end
>444	MemberAccess	e . end
>445	Identifier	end
>446	Identifier	e
>447	Identifier	kt
>448	ForInit	 
>449	IdentifierDeclStatement	drwnNNGraphEdgeList 
>450	IdentifierDecl	kt = e . begin ( )
>451	AssignmentExpr	kt = e . begin ( )
>452	CallExpression	e . begin ( )
>453	ArgumentList	 
>454	Callee	e . begin
>455	MemberAccess	e . begin
>456	Identifier	begin
>457	Identifier	e
>458	Identifier	kt
>459	Identifier	kt
>460	IdentifierDeclType	drwnNNGraphEdgeList 
>461	IdentifierDeclStatement	 
>462	IdentifierDecl	rank = 1.0
>463	AssignmentExpr	rank = 1.0
>464	PrimaryExpression	1.0
>465	Identifier	rank
>466	Identifier	rank
>467	IdentifierDeclType	double
>468	IfStatement	if ( e . empty ( ) )
>469	ContinueStatement	 
>470	Condition	 
>471	CallExpression	e . empty ( )
>472	ArgumentList	 
>473	Callee	e . empty
>474	MemberAccess	e . empty
>475	Identifier	empty
>476	Identifier	e
>477	IdentifierDeclStatement	 
>478	IdentifierDecl	& e = ( * graph ) [ imgIndx ] [ segId ] . edges
>479	AssignmentExpr	& e = ( * graph ) [ imgIndx ] [ segId ] . edges
>480	MemberAccess	( * graph ) [ imgIndx ] [ segId ] . edges
>481	Identifier	edges
>482	ArrayIndexing	( * graph ) [ imgIndx ] [ segId ]
>483	Identifier	segId
>484	ArrayIndexing	( * graph ) [ imgIndx ]
>485	Identifier	imgIndx
>486	UnaryOp	* graph
>487	Identifier	graph
>488	UnaryOperator	*
>489	Identifier	e
>490	Identifier	e
>491	IdentifierDeclType	const drwnNNGraphEdgeList &
>492	IfStatement	if ( segId < 0 )
>493	ContinueStatement	 
>494	Condition	 
>495	RelationalExpression	segId < 0
>496	PrimaryExpression	0
>497	Identifier	segId
>498	IdentifierDeclStatement	 
>499	IdentifierDecl	segId = data . segments ( ) [ c ] . at < int > ( y , x )
>500	AssignmentExpr	segId = data . segments ( ) [ c ] . at < int > ( y , x )
>501	RelationalExpression	data . segments ( ) [ c ] . at < int > ( y , x )
>502	RelationalExpression	int > ( y , x )
>503	Expression	y , x
>504	Identifier	x
>505	Identifier	y
>506	Identifier	int
>507	MemberAccess	data . segments ( ) [ c ] . at
>508	Identifier	at
>509	ArrayIndexing	data . segments ( ) [ c ]
>510	Identifier	c
>511	CallExpression	data . segments ( )
>512	ArgumentList	 
>513	Callee	data . segments
>514	MemberAccess	data . segments
>515	Identifier	segments
>516	Identifier	data
>517	Identifier	segId
>518	Identifier	segId
>519	IdentifierDeclType	const int
>520	IncDecOp	 
>521	IncDec	++
>522	Identifier	c
>523	Condition	 
>524	RelationalExpression	c < data . segments ( ) . channels ( )
>525	CallExpression	data . segments ( ) . channels ( )
>526	ArgumentList	 
>527	Callee	data . segments ( ) . channels
>528	MemberAccess	data . segments ( ) . channels
>529	Identifier	channels
>530	CallExpression	data . segments ( )
>531	ArgumentList	 
>532	Callee	data . segments
>533	MemberAccess	data . segments
>534	Identifier	segments
>535	Identifier	data
>536	Identifier	c
>537	ForInit	 
>538	IdentifierDeclStatement	int c = 0 ;
>539	IdentifierDecl	c = 0
>540	AssignmentExpr	c = 0
>541	PrimaryExpression	0
>542	Identifier	c
>543	Identifier	c
>544	IdentifierDeclType	int
>545	IdentifierDeclStatement	 
>546	IdentifierDecl	marginals = VectorXd 
>547	AssignmentExpr	marginals = VectorXd 
>548	CallExpression	VectorXd 
>549	ArgumentList	nLabels
>550	Argument	DRWN_EPSILON
>551	Identifier	DRWN_EPSILON
>552	Argument	nLabels
>553	Identifier	nLabels
>554	Callee	VectorXd 
>555	Identifier	VectorXd 
>556	Identifier	marginals
>557	Identifier	marginals
>558	IdentifierDeclType	VectorXd
>559	IncDecOp	 
>560	IncDec	++
>561	Identifier	x
>562	Condition	 
>563	RelationalExpression	x < instance . pixelLabels . cols ( )
>564	CallExpression	instance . pixelLabels . cols ( )
>565	ArgumentList	 
>566	Callee	instance . pixelLabels . cols
>567	MemberAccess	instance . pixelLabels . cols
>568	Identifier	cols
>569	MemberAccess	instance . pixelLabels
>570	Identifier	pixelLabels
>571	Identifier	instance
>572	Identifier	x
>573	ForInit	 
>574	IdentifierDeclStatement	int x = 0 ;
>575	IdentifierDecl	x = 0
>576	AssignmentExpr	x = 0
>577	PrimaryExpression	0
>578	Identifier	x
>579	Identifier	x
>580	IdentifierDeclType	int
>581	IncDecOp	 
>582	IncDec	++
>583	Identifier	y
>584	Condition	 
>585	RelationalExpression	y < instance . pixelLabels . rows ( )
>586	CallExpression	instance . pixelLabels . rows ( )
>587	ArgumentList	 
>588	Callee	instance . pixelLabels . rows
>589	MemberAccess	instance . pixelLabels . rows
>590	Identifier	rows
>591	MemberAccess	instance . pixelLabels
>592	Identifier	pixelLabels
>593	Identifier	instance
>594	Identifier	y
>595	ForInit	 
>596	IdentifierDeclStatement	int y = 0 ;
>597	IdentifierDecl	y = 0
>598	AssignmentExpr	y = 0
>599	PrimaryExpression	0
>600	Identifier	y
>601	Identifier	y
>602	IdentifierDeclType	int
>603	ExpressionStatement	 
>604	CallExpression	instance . unaries . resize ( instance . size ( ) , vector < double > ( nLabels , 0.0 ) )
>605	ArgumentList	instance . size ( )
>606	Argument	vector < double > ( nLabels , 0.0 )
>607	RelationalExpression	vector < double > ( nLabels , 0.0 )
>608	RelationalExpression	double > ( nLabels , 0.0 )
>609	Expression	nLabels , 0.0
>610	PrimaryExpression	0.0
>611	Identifier	nLabels
>612	Identifier	double
>613	Identifier	vector
>614	Argument	instance . size ( )
>615	CallExpression	instance . size ( )
>616	ArgumentList	 
>617	Callee	instance . size
>618	MemberAccess	instance . size
>619	Identifier	size
>620	Identifier	instance
>621	Callee	instance . unaries . resize
>622	MemberAccess	instance . unaries . resize
>623	Identifier	resize
>624	MemberAccess	instance . unaries
>625	Identifier	unaries
>626	Identifier	instance
>627	IdentifierDeclStatement	 
>628	IdentifierDecl	instance ( data . image ( ) , baseName . c_str ( ) )
>629	Expression	data . image ( ) , baseName . c_str ( )
>630	CallExpression	baseName . c_str ( )
>631	ArgumentList	 
>632	Callee	baseName . c_str
>633	MemberAccess	baseName . c_str
>634	Identifier	c_str
>635	Identifier	baseName
>636	CallExpression	data . image ( )
>637	ArgumentList	 
>638	Callee	data . image
>639	MemberAccess	data . image
>640	Identifier	image
>641	Identifier	data
>642	Identifier	instance
>643	IdentifierDeclType	drwnSegImageInstance
>644	ExpressionStatement	 
>645	CallExpression	DRWN_ASSERT_MSG ( data . numSegments ( ) == ( * graph ) [ imgIndx ] . numNodes ( ) , data . numSegments ( ) << \" != \" << ( * \
>646	ArgumentList	data . numSegments ( ) == ( * graph ) [ imgIndx ] . numNodes ( )
>647	Argument	data . numSegments ( ) << \" != \" << ( * graph ) [ imgIndx ] . numNodes ( )
>648	ShiftExpression	data . numSegments ( ) << \" != \" << ( * graph ) [ imgIndx ] . numNodes ( )
>649	ShiftExpression	\" != \" << ( * graph ) [ imgIndx ] . numNodes ( )
>650	CallExpression	( * graph ) [ imgIndx ] . numNodes ( )
>651	ArgumentList	 
>652	Callee	( * graph ) [ imgIndx ] . numNodes
>653	MemberAccess	( * graph ) [ imgIndx ] . numNodes
>654	Identifier	numNodes
>655	ArrayIndexing	( * graph ) [ imgIndx ]
>656	Identifier	imgIndx
>657	UnaryOp	* graph
>658	Identifier	graph
>659	UnaryOperator	*
>660	PrimaryExpression	\" != \"
>661	CallExpression	data . numSegments ( )
>662	ArgumentList	 
>663	Callee	data . numSegments
>664	MemberAccess	data . numSegments
>665	Identifier	numSegments
>666	Identifier	data
>667	Argument	data . numSegments ( ) == ( * graph ) [ imgIndx ] . numNodes ( )
>668	EqualityExpression	data . numSegments ( ) == ( * graph ) [ imgIndx ] . numNodes ( )
>669	CallExpression	( * graph ) [ imgIndx ] . numNodes ( )
>670	ArgumentList	 
>671	Callee	( * graph ) [ imgIndx ] . numNodes
>672	MemberAccess	( * graph ) [ imgIndx ] . numNodes
>673	Identifier	numNodes
>674	ArrayIndexing	( * graph ) [ imgIndx ]
>675	Identifier	imgIndx
>676	UnaryOp	* graph
>677	Identifier	graph
>678	UnaryOperator	*
>679	CallExpression	data . numSegments ( )
>680	ArgumentList	 
>681	Callee	data . numSegments
>682	MemberAccess	data . numSegments
>683	Identifier	numSegments
>684	Identifier	data
>685	Callee	DRWN_ASSERT_MSG
>686	Identifier	DRWN_ASSERT_MSG
>687	ExpressionStatement	 
>688	CallExpression	unlock ( )
>689	ArgumentList	 
>690	Callee	unlock
>691	Identifier	unlock
>692	ExpressionStatement	 
>693	CallExpression	DRWN_LOG_STATUS ( \"processing \" << data . width ( ) << \"-by-\" << data . height ( ) << \" image \" << baseName << \"\
>694	ArgumentList	\"processing \" << data . width ( ) << \"-by-\" << data . height ( ) << \" image \" << baseName << \"...\"
>695	Argument	\"processing \" << data . width ( ) << \"-by-\" << data . height ( ) << \" image \" << baseName << \"...\"
>696	ShiftExpression	\"processing \" << data . width ( ) << \"-by-\" << data . height ( ) << \" image \" << baseName << \"...\"
>697	ShiftExpression	data . width ( ) << \"-by-\" << data . height ( ) << \" image \" << baseName << \"...\"
>698	ShiftExpression	\"-by-\" << data . height ( ) << \" image \" << baseName << \"...\"
>699	ShiftExpression	data . height ( ) << \" image \" << baseName << \"...\"
>700	ShiftExpression	\" image \" << baseName << \"...\"
>701	ShiftExpression	baseName << \"...\"
>702	PrimaryExpression	\"...\"
>703	Identifier	baseName
>704	PrimaryExpression	\" image \"
>705	CallExpression	data . height ( )
>706	ArgumentList	 
>707	Callee	data . height
>708	MemberAccess	data . height
>709	Identifier	height
>710	Identifier	data
>711	PrimaryExpression	\"-by-\"
>712	CallExpression	data . width ( )
>713	ArgumentList	 
>714	Callee	data . width
>715	MemberAccess	data . width
>716	Identifier	width
>717	Identifier	data
>718	PrimaryExpression	\"processing \"
>719	Callee	DRWN_LOG_STATUS
>720	Identifier	DRWN_LOG_STATUS
>721	ExpressionStatement	 
>722	CallExpression	lock ( )
>723	ArgumentList	 
>724	Callee	lock
>725	Identifier	lock
>726	IdentifierDeclStatement	 
>727	IdentifierDecl	data ( baseName )
>728	Identifier	baseName
>729	Identifier	data
>730	IdentifierDeclType	drwnNNGraphImageData
>731	ExpressionStatement	 
>732	CallExpression	DRWN_ASSERT_MSG ( imgIndx >= 0 , baseName )
>733	ArgumentList	imgIndx >= 0
>734	Argument	baseName
>735	Identifier	baseName
>736	Argument	imgIndx >= 0
>737	RelationalExpression	imgIndx >= 0
>738	PrimaryExpression	0
>739	Identifier	imgIndx
>740	Callee	DRWN_ASSERT_MSG
>741	Identifier	DRWN_ASSERT_MSG
>742	IdentifierDeclStatement	 
>743	IdentifierDecl	imgIndx = graph -> findImage ( baseName )
>744	AssignmentExpr	imgIndx = graph -> findImage ( baseName )
>745	CallExpression	graph -> findImage ( baseName )
>746	ArgumentList	baseName
>747	Argument	baseName
>748	Identifier	baseName
>749	Callee	graph -> findImage
>750	PtrMemberAccess	graph -> findImage
>751	Identifier	findImage
>752	Identifier	graph
>753	Identifier	imgIndx
>754	Identifier	imgIndx
>755	IdentifierDeclType	const int
>756	IdentifierDeclStatement	 
>757	IdentifierDecl	nLabels = gMultiSegRegionDefs . maxKey ( ) + 1
>758	AssignmentExpr	nLabels = gMultiSegRegionDefs . maxKey ( ) + 1
>759	AdditiveExpression	gMultiSegRegionDefs . maxKey ( ) + 1
>760	PrimaryExpression	1
>761	CallExpression	gMultiSegRegionDefs . maxKey ( )
>762	ArgumentList	 
>763	Callee	gMultiSegRegionDefs . maxKey
>764	MemberAccess	gMultiSegRegionDefs . maxKey
>765	Identifier	maxKey
>766	Identifier	gMultiSegRegionDefs
>767	Identifier	nLabels
>768	Identifier	nLabels
>769	IdentifierDeclType	const int
>770	ExpressionStatement	 
>771	CallExpression	DRWN_ASSERT ( ( graph != NULL ) && ( labelDistributions != NULL ) )
>772	ArgumentList	( graph != NULL ) && ( labelDistributions != NULL )
>773	Argument	( graph != NULL ) && ( labelDistributions != NULL )
>774	AndExpression	( graph != NULL ) && ( labelDistributions != NULL )
>775	EqualityExpression	labelDistributions != NULL
>776	Identifier	NULL
>777	Identifier	labelDistributions
>778	EqualityExpression	graph != NULL
>779	Identifier	NULL
>780	Identifier	graph
>781	Callee	DRWN_ASSERT
>782	Identifier	DRWN_ASSERT
>874	FunctionDef	usage ()
>875	ParameterList	 
>876	ReturnType	void
>877	CompoundStatement	 
>878	ExpressionStatement	 
>879	ShiftExpression	cerr << \"OPTIONS
>880	ShiftExpression	\"OPTIONS
>881	ShiftExpression	\"  -pairwise <p>     
>882	ShiftExpression	\"  -outLabels <ext>  
>883	ShiftExpression	\"  -outImages <ext>  
>884	ShiftExpression	\"  -x                
>885	ShiftExpression	DRWN_STANDARD_OPTIONS_USAGE << endl
>886	Identifier	endl
>887	Identifier	DRWN_STANDARD_OPTIONS_USAGE
>888	PrimaryExpression	\"  -x                
>889	PrimaryExpression	\"  -outImages <ext>  
>890	PrimaryExpression	\"  -outLabels <ext>  
>891	PrimaryExpression	\"  -pairwise <p>     
>892	PrimaryExpression	\"OPTIONS
>893	Identifier	cerr
>894	ExpressionStatement	 
>895	ShiftExpression	cerr << \"USAGE
>896	PrimaryExpression	\"USAGE
>897	Identifier	cerr
>898	ExpressionStatement	 
>899	ShiftExpression	cerr << DRWN_USAGE_HEADER << endl
>900	ShiftExpression	DRWN_USAGE_HEADER << endl
>901	Identifier	endl
>902	Identifier	DRWN_USAGE_HEADER
>903	Identifier	cerr
>907	FunctionDef	main (int argc , char * argv [ ])
>908	ParameterList	int argc , char * argv [ ]
>909	Parameter	 
>910	Identifier	argv
>911	ParameterType	char * [ ]
>912	Parameter	 
>913	Identifier	argc
>914	ParameterType	int
>915	ReturnType	int
>916	CompoundStatement	 
>917	ReturnStatement	 
>918	PrimaryExpression	0
>919	ExpressionStatement	 
>920	CallExpression	drwnCodeProfiler 
>921	ArgumentList	 
>922	Callee	drwnCodeProfiler 
>923	Identifier	drwnCodeProfiler 
>924	ExpressionStatement	 
>925	CallExpression	drwnCodeProfiler 
>926	ArgumentList	hMain
>927	Argument	hMain
>928	Identifier	hMain
>929	Callee	drwnCodeProfiler 
>930	Identifier	drwnCodeProfiler 
>931	IfStatement	if ( bVisualize )
>932	ExpressionStatement	 
>933	CallExpression	cv 
>934	ArgumentList	 
>935	Callee	cv 
>936	Identifier	cv 
>937	Condition	 
>938	Identifier	bVisualize
>939	IfStatement	if ( ( bVisualize ) && ( baseNames . size ( ) == 1 ) )
>940	CompoundStatement	 
>941	ExpressionStatement	 
>942	CallExpression	cv 
>943	ArgumentList	- 1
>944	Argument	- 1
>945	UnaryOp	- 1
>946	PrimaryExpression	1
>947	UnaryOperator	-
>948	Callee	cv 
>949	Identifier	cv 
>950	Condition	 
>951	AndExpression	( bVisualize ) && ( baseNames . size ( ) == 1 )
>952	EqualityExpression	baseNames . size ( ) == 1
>953	PrimaryExpression	1
>954	CallExpression	baseNames . size ( )
>955	ArgumentList	 
>956	Callee	baseNames . size
>957	MemberAccess	baseNames . size
>958	Identifier	size
>959	Identifier	baseNames
>960	Identifier	bVisualize
>961	ForStatement	for ( unsigned i = 0 ; i < jobs . size ( ) ; i ++ )
>962	CompoundStatement	 
>963	ExpressionStatement	 
>964	ArrayIndexing	jobs [ i ]
>965	Identifier	i
>966	Identifier	jobs
>967	Statement	 
>968	IncDecOp	 
>969	IncDec	++
>970	Identifier	i
>971	Condition	 
>972	RelationalExpression	i < jobs . size ( )
>973	CallExpression	jobs . size ( )
>974	ArgumentList	 
>975	Callee	jobs . size
>976	MemberAccess	jobs . size
>977	Identifier	size
>978	Identifier	jobs
>979	Identifier	i
>980	ForInit	 
>981	IdentifierDeclStatement	unsigned i = 0 ;
>982	IdentifierDecl	i = 0
>983	AssignmentExpr	i = 0
>984	PrimaryExpression	0
>985	Identifier	i
>986	Identifier	i
>987	IdentifierDeclType	unsigned
>988	ExpressionStatement	 
>989	CallExpression	threadPool . finish ( )
>990	ArgumentList	 
>991	Callee	threadPool . finish
>992	MemberAccess	threadPool . finish
>993	Identifier	finish
>994	Identifier	threadPool
>995	ForStatement	for ( unsigned i = 0 ; i < baseNames . size ( ) ; i ++ )
>996	CompoundStatement	 
>997	ExpressionStatement	 
>998	CallExpression	threadPool . addJob ( jobs . back ( ) )
>999	ArgumentList	jobs . back ( )
>1000	Argument	jobs . back ( )
>1001	CallExpression	jobs . back ( )
>1002	ArgumentList	 
>1003	Callee	jobs . back
>1004	MemberAccess	jobs . back
>1005	Identifier	back
>1006	Identifier	jobs
>1007	Callee	threadPool . addJob
>1008	MemberAccess	threadPool . addJob
>1009	Identifier	addJob
>1010	Identifier	threadPool
>1011	ExpressionStatement	 
>1012	AssignmentExpr	jobs . back ( ) -> baseName = baseNames [ i ]
>1013	ArrayIndexing	baseNames [ i ]
>1014	Identifier	i
>1015	Identifier	baseNames
>1016	PtrMemberAccess	jobs . back ( ) -> baseName
>1017	Identifier	baseName
>1018	CallExpression	jobs . back ( )
>1019	ArgumentList	 
>1020	Callee	jobs . back
>1021	MemberAccess	jobs . back
>1022	Identifier	back
>1023	Identifier	jobs
>1024	ExpressionStatement	 
>1025	AssignmentExpr	jobs . back ( ) -> bVisualize = bVisualize
>1026	Identifier	bVisualize
>1027	PtrMemberAccess	jobs . back ( ) -> bVisualize
>1028	Identifier	bVisualize
>1029	CallExpression	jobs . back ( )
>1030	ArgumentList	 
>1031	Callee	jobs . back
>1032	MemberAccess	jobs . back
>1033	Identifier	back
>1034	Identifier	jobs
>1035	ExpressionStatement	 
>1036	AssignmentExpr	jobs . back ( ) -> outImageExt = outImageExt
>1037	Identifier	outImageExt
>1038	PtrMemberAccess	jobs . back ( ) -> outImageExt
>1039	Identifier	outImageExt
>1040	CallExpression	jobs . back ( )
>1041	ArgumentList	 
>1042	Callee	jobs . back
>1043	MemberAccess	jobs . back
>1044	Identifier	back
>1045	Identifier	jobs
>1046	ExpressionStatement	 
>1047	AssignmentExpr	jobs . back ( ) -> outLabelExt = outLabelExt
>1048	Identifier	outLabelExt
>1049	PtrMemberAccess	jobs . back ( ) -> outLabelExt
>1050	Identifier	outLabelExt
>1051	CallExpression	jobs . back ( )
>1052	ArgumentList	 
>1053	Callee	jobs . back
>1054	MemberAccess	jobs . back
>1055	Identifier	back
>1056	Identifier	jobs
>1057	ExpressionStatement	 
>1058	AssignmentExpr	jobs . back ( ) -> pairwiseSmoothness = pairwiseSmoothness
>1059	Identifier	pairwiseSmoothness
>1060	PtrMemberAccess	jobs . back ( ) -> pairwiseSmoothness
>1061	Identifier	pairwiseSmoothness
>1062	CallExpression	jobs . back ( )
>1063	ArgumentList	 
>1064	Callee	jobs . back
>1065	MemberAccess	jobs . back
>1066	Identifier	back
>1067	Identifier	jobs
>1068	ExpressionStatement	 
>1069	AssignmentExpr	jobs . back ( ) -> labelDistributions = & labelDistributions
>1070	UnaryOp	& labelDistributions
>1071	Identifier	labelDistributions
>1072	UnaryOperator	&
>1073	PtrMemberAccess	jobs . back ( ) -> labelDistributions
>1074	Identifier	labelDistributions
>1075	CallExpression	jobs . back ( )
>1076	ArgumentList	 
>1077	Callee	jobs . back
>1078	MemberAccess	jobs . back
>1079	Identifier	back
>1080	Identifier	jobs
>1081	ExpressionStatement	 
>1082	AssignmentExpr	jobs . back ( ) -> graph = & graph
>1083	UnaryOp	& graph
>1084	Identifier	graph
>1085	UnaryOperator	&
>1086	PtrMemberAccess	jobs . back ( ) -> graph
>1087	Identifier	graph
>1088	CallExpression	jobs . back ( )
>1089	ArgumentList	 
>1090	Callee	jobs . back
>1091	MemberAccess	jobs . back
>1092	Identifier	back
>1093	Identifier	jobs
>1094	ExpressionStatement	 
>1095	CallExpression	jobs . push_back ( new labelTransferJob ( ) )
>1096	ArgumentList	new labelTransferJob ( )
>1097	Argument	new labelTransferJob ( )
>1098	UnaryExpression	new labelTransferJob ( )
>1099	Callee	jobs . push_back
>1100	MemberAccess	jobs . push_back
>1101	Identifier	push_back
>1102	Identifier	jobs
>1103	IfStatement	if ( imgIndx < 0 )
>1104	CompoundStatement	 
>1105	ContinueStatement	 
>1106	ExpressionStatement	 
>1107	CallExpression	DRWN_LOG_ERROR ( \"could not find image \" << baseNames [ i ] << \" in the graph\" )
>1108	ArgumentList	\"could not find image \" << baseNames [ i ] << \" in the graph\"
>1109	Argument	\"could not find image \" << baseNames [ i ] << \" in the graph\"
>1110	ShiftExpression	\"could not find image \" << baseNames [ i ] << \" in the graph\"
>1111	ShiftExpression	baseNames [ i ] << \" in the graph\"
>1112	PrimaryExpression	\" in the graph\"
>1113	ArrayIndexing	baseNames [ i ]
>1114	Identifier	i
>1115	Identifier	baseNames
>1116	PrimaryExpression	\"could not find image \"
>1117	Callee	DRWN_LOG_ERROR
>1118	Identifier	DRWN_LOG_ERROR
>1119	Condition	 
>1120	RelationalExpression	imgIndx < 0
>1121	PrimaryExpression	0
>1122	Identifier	imgIndx
>1123	IdentifierDeclStatement	 
>1124	IdentifierDecl	imgIndx = graph . findImage ( baseNames [ i ] )
>1125	AssignmentExpr	imgIndx = graph . findImage ( baseNames [ i ] )
>1126	CallExpression	graph . findImage ( baseNames [ i ] )
>1127	ArgumentList	baseNames [ i ]
>1128	Argument	baseNames [ i ]
>1129	ArrayIndexing	baseNames [ i ]
>1130	Identifier	i
>1131	Identifier	baseNames
>1132	Callee	graph . findImage
>1133	MemberAccess	graph . findImage
>1134	Identifier	findImage
>1135	Identifier	graph
>1136	Identifier	imgIndx
>1137	Identifier	imgIndx
>1138	IdentifierDeclType	const int
>1139	IncDecOp	 
>1140	IncDec	++
>1141	Identifier	i
>1142	Condition	 
>1143	RelationalExpression	i < baseNames . size ( )
>1144	CallExpression	baseNames . size ( )
>1145	ArgumentList	 
>1146	Callee	baseNames . size
>1147	MemberAccess	baseNames . size
>1148	Identifier	size
>1149	Identifier	baseNames
>1150	Identifier	i
>1151	ForInit	 
>1152	IdentifierDeclStatement	unsigned i = 0 ;
>1153	IdentifierDecl	i = 0
>1154	AssignmentExpr	i = 0
>1155	PrimaryExpression	0
>1156	Identifier	i
>1157	Identifier	i
>1158	IdentifierDeclType	unsigned
>1159	IdentifierDeclStatement	 
>1160	IdentifierDecl	jobs
>1161	Identifier	jobs
>1162	IdentifierDeclType	vector < labelTransferJob * >
>1163	ExpressionStatement	 
>1164	CallExpression	threadPool . start ( )
>1165	ArgumentList	 
>1166	Callee	threadPool . start
>1167	MemberAccess	threadPool . start
>1168	Identifier	start
>1169	Identifier	threadPool
>1170	ForStatement	for ( unsigned i = 0 ; i < loadJobs . size ( ) ; i ++ )
>1171	CompoundStatement	 
>1172	ExpressionStatement	 
>1173	ArrayIndexing	loadJobs [ i ]
>1174	Identifier	i
>1175	Identifier	loadJobs
>1176	Statement	 
>1177	IncDecOp	 
>1178	IncDec	++
>1179	Identifier	i
>1180	Condition	 
>1181	RelationalExpression	i < loadJobs . size ( )
>1182	CallExpression	loadJobs . size ( )
>1183	ArgumentList	 
>1184	Callee	loadJobs . size
>1185	MemberAccess	loadJobs . size
>1186	Identifier	size
>1187	Identifier	loadJobs
>1188	Identifier	i
>1189	ForInit	 
>1190	IdentifierDeclStatement	unsigned i = 0 ;
>1191	IdentifierDecl	i = 0
>1192	AssignmentExpr	i = 0
>1193	PrimaryExpression	0
>1194	Identifier	i
>1195	Identifier	i
>1196	IdentifierDeclType	unsigned
>1197	ExpressionStatement	 
>1198	CallExpression	threadPool . finish ( )
>1199	ArgumentList	 
>1200	Callee	threadPool . finish
>1201	MemberAccess	threadPool . finish
>1202	Identifier	finish
>1203	Identifier	threadPool
>1204	ForStatement	for ( unsigned i = 0 ; i < graph . numImages ( ) ; i ++ )
>1205	CompoundStatement	 
>1206	ExpressionStatement	 
>1207	CallExpression	threadPool . addJob ( loadJobs . back ( ) )
>1208	ArgumentList	loadJobs . back ( )
>1209	Argument	loadJobs . back ( )
>1210	CallExpression	loadJobs . back ( )
>1211	ArgumentList	 
>1212	Callee	loadJobs . back
>1213	MemberAccess	loadJobs . back
>1214	Identifier	back
>1215	Identifier	loadJobs
>1216	Callee	threadPool . addJob
>1217	MemberAccess	threadPool . addJob
>1218	Identifier	addJob
>1219	Identifier	threadPool
>1220	ExpressionStatement	 
>1221	CallExpression	loadJobs . push_back ( new loadDataJob ( labelDistributions , graph , i ) )
>1222	ArgumentList	labelDistributions , graph , i
>1223	Argument	labelDistributions , graph , i
>1224	Expression	labelDistributions , graph , i
>1225	Expression	graph , i
>1226	Identifier	i
>1227	Identifier	graph
>1228	Identifier	labelDistributions
>1229	Callee	loadJobs . push_back
>1230	MemberAccess	loadJobs . push_back
>1231	Identifier	push_back
>1232	Identifier	loadJobs
>1233	IncDecOp	 
>1234	IncDec	++
>1235	Identifier	i
>1236	Condition	 
>1237	RelationalExpression	i < graph . numImages ( )
>1238	CallExpression	graph . numImages ( )
>1239	ArgumentList	 
>1240	Callee	graph . numImages
>1241	MemberAccess	graph . numImages
>1242	Identifier	numImages
>1243	Identifier	graph
>1244	Identifier	i
>1245	ForInit	 
>1246	IdentifierDeclStatement	unsigned i = 0 ;
>1247	IdentifierDecl	i = 0
>1248	AssignmentExpr	i = 0
>1249	PrimaryExpression	0
>1250	Identifier	i
>1251	Identifier	i
>1252	IdentifierDeclType	unsigned
>1253	ExpressionStatement	 
>1254	CallExpression	threadPool . start ( )
>1255	ArgumentList	 
>1256	Callee	threadPool . start
>1257	MemberAccess	threadPool . start
>1258	Identifier	start
>1259	Identifier	threadPool
>1260	IdentifierDeclStatement	 
>1261	IdentifierDecl	loadJobs
>1262	Identifier	loadJobs
>1263	IdentifierDeclType	vector < loadDataJob * >
>1264	IdentifierDeclStatement	 
>1265	IdentifierDecl	threadPool
>1266	Identifier	threadPool
>1267	IdentifierDeclType	drwnThreadPool
>1268	IdentifierDeclStatement	 
>1269	IdentifierDecl	labelDistributions ( graph , VectorXd ( ) )
>1270	Expression	graph , VectorXd ( )
>1271	CallExpression	VectorXd ( )
>1272	ArgumentList	 
>1273	Callee	VectorXd
>1274	Identifier	VectorXd
>1275	Identifier	graph
>1276	Identifier	labelDistributions
>1277	IdentifierDeclType	drwnNNGraphLabelDistributions
>1278	ExpressionStatement	 
>1279	CallExpression	DRWN_LOG_MESSAGE ( \"Loading image data...\" )
>1280	ArgumentList	\"Loading image data...\"
>1281	Argument	\"Loading image data...\"
>1282	PrimaryExpression	\"Loading image data...\"
>1283	Callee	DRWN_LOG_MESSAGE
>1284	Identifier	DRWN_LOG_MESSAGE
>1285	ExpressionStatement	 
>1286	CallExpression	DRWN_LOG_VERBOSE ( \"...transferring \" << nLabels << \" labels\" )
>1287	ArgumentList	\"...transferring \" << nLabels << \" labels\"
>1288	Argument	\"...transferring \" << nLabels << \" labels\"
>1289	ShiftExpression	\"...transferring \" << nLabels << \" labels\"
>1290	ShiftExpression	nLabels << \" labels\"
>1291	PrimaryExpression	\" labels\"
>1292	Identifier	nLabels
>1293	PrimaryExpression	\"...transferring \"
>1294	Callee	DRWN_LOG_VERBOSE
>1295	Identifier	DRWN_LOG_VERBOSE
>1296	IdentifierDeclStatement	 
>1297	IdentifierDecl	nLabels = gMultiSegRegionDefs . maxKey ( ) + 1
>1298	AssignmentExpr	nLabels = gMultiSegRegionDefs . maxKey ( ) + 1
>1299	AdditiveExpression	gMultiSegRegionDefs . maxKey ( ) + 1
>1300	PrimaryExpression	1
>1301	CallExpression	gMultiSegRegionDefs . maxKey ( )
>1302	ArgumentList	 
>1303	Callee	gMultiSegRegionDefs . maxKey
>1304	MemberAccess	gMultiSegRegionDefs . maxKey
>1305	Identifier	maxKey
>1306	Identifier	gMultiSegRegionDefs
>1307	Identifier	nLabels
>1308	Identifier	nLabels
>1309	IdentifierDeclType	const int
>1310	ExpressionStatement	 
>1311	CallExpression	DRWN_LOG_VERBOSE ( \"...graph has \" << graph . numEdges ( ) << \" edges\" )
>1312	ArgumentList	\"...graph has \" << graph . numEdges ( ) << \" edges\"
>1313	Argument	\"...graph has \" << graph . numEdges ( ) << \" edges\"
>1314	ShiftExpression	\"...graph has \" << graph . numEdges ( ) << \" edges\"
>1315	ShiftExpression	graph . numEdges ( ) << \" edges\"
>1316	PrimaryExpression	\" edges\"
>1317	CallExpression	graph . numEdges ( )
>1318	ArgumentList	 
>1319	Callee	graph . numEdges
>1320	MemberAccess	graph . numEdges
>1321	Identifier	numEdges
>1322	Identifier	graph
>1323	PrimaryExpression	\"...graph has \"
>1324	Callee	DRWN_LOG_VERBOSE
>1325	Identifier	DRWN_LOG_VERBOSE
>1326	ExpressionStatement	 
>1327	CallExpression	DRWN_LOG_VERBOSE ( \"...graph has \" << graph . numNodes ( ) << \" nodes\" )
>1328	ArgumentList	\"...graph has \" << graph . numNodes ( ) << \" nodes\"
>1329	Argument	\"...graph has \" << graph . numNodes ( ) << \" nodes\"
>1330	ShiftExpression	\"...graph has \" << graph . numNodes ( ) << \" nodes\"
>1331	ShiftExpression	graph . numNodes ( ) << \" nodes\"
>1332	PrimaryExpression	\" nodes\"
>1333	CallExpression	graph . numNodes ( )
>1334	ArgumentList	 
>1335	Callee	graph . numNodes
>1336	MemberAccess	graph . numNodes
>1337	Identifier	numNodes
>1338	Identifier	graph
>1339	PrimaryExpression	\"...graph has \"
>1340	Callee	DRWN_LOG_VERBOSE
>1341	Identifier	DRWN_LOG_VERBOSE
>1342	ExpressionStatement	 
>1343	CallExpression	DRWN_LOG_MESSAGE ( \"...graph has \" << graph . numImages ( ) << \" images\" )
>1344	ArgumentList	\"...graph has \" << graph . numImages ( ) << \" images\"
>1345	Argument	\"...graph has \" << graph . numImages ( ) << \" images\"
>1346	ShiftExpression	\"...graph has \" << graph . numImages ( ) << \" images\"
>1347	ShiftExpression	graph . numImages ( ) << \" images\"
>1348	PrimaryExpression	\" images\"
>1349	CallExpression	graph . numImages ( )
>1350	ArgumentList	 
>1351	Callee	graph . numImages
>1352	MemberAccess	graph . numImages
>1353	Identifier	numImages
>1354	Identifier	graph
>1355	PrimaryExpression	\"...graph has \"
>1356	Callee	DRWN_LOG_MESSAGE
>1357	Identifier	DRWN_LOG_MESSAGE
>1358	ExpressionStatement	 
>1359	CallExpression	graph . read ( graphFile )
>1360	ArgumentList	graphFile
>1361	Argument	graphFile
>1362	Identifier	graphFile
>1363	Callee	graph . read
>1364	MemberAccess	graph . read
>1365	Identifier	read
>1366	Identifier	graph
>1367	IdentifierDeclStatement	 
>1368	IdentifierDecl	graph
>1369	Identifier	graph
>1370	IdentifierDeclType	drwnNNGraph
>1371	ExpressionStatement	 
>1372	CallExpression	DRWN_LOG_MESSAGE ( \"Loading drwnNNGraph from \" << graphFile << \"...\" )
>1373	ArgumentList	\"Loading drwnNNGraph from \" << graphFile << \"...\"
>1374	Argument	\"Loading drwnNNGraph from \" << graphFile << \"...\"
>1375	ShiftExpression	\"Loading drwnNNGraph from \" << graphFile << \"...\"
>1376	ShiftExpression	graphFile << \"...\"
>1377	PrimaryExpression	\"...\"
>1378	Identifier	graphFile
>1379	PrimaryExpression	\"Loading drwnNNGraph from \"
>1380	Callee	DRWN_LOG_MESSAGE
>1381	Identifier	DRWN_LOG_MESSAGE
>1382	IfStatement	if ( drwnFileExists ( evalList ) )
>1383	ElseStatement	else
>1384	CompoundStatement	 
>1385	ExpressionStatement	 
>1386	CallExpression	baseNames . push_back ( string ( evalList ) )
>1387	ArgumentList	string ( evalList )
>1388	Argument	string ( evalList )
>1389	CallExpression	string ( evalList )
>1390	ArgumentList	evalList
>1391	Argument	evalList
>1392	Identifier	evalList
>1393	Callee	string
>1394	Identifier	string
>1395	Callee	baseNames . push_back
>1396	MemberAccess	baseNames . push_back
>1397	Identifier	push_back
>1398	Identifier	baseNames
>1399	ExpressionStatement	 
>1400	CallExpression	DRWN_LOG_MESSAGE ( \"Processing single image \" << evalList << \"...\" )
>1401	ArgumentList	\"Processing single image \" << evalList << \"...\"
>1402	Argument	\"Processing single image \" << evalList << \"...\"
>1403	ShiftExpression	\"Processing single image \" << evalList << \"...\"
>1404	ShiftExpression	evalList << \"...\"
>1405	PrimaryExpression	\"...\"
>1406	Identifier	evalList
>1407	PrimaryExpression	\"Processing single image \"
>1408	Callee	DRWN_LOG_MESSAGE
>1409	Identifier	DRWN_LOG_MESSAGE
>1410	CompoundStatement	 
>1411	ExpressionStatement	 
>1412	CallExpression	DRWN_LOG_MESSAGE ( \"...read \" << baseNames . size ( ) << \" images\" )
>1413	ArgumentList	\"...read \" << baseNames . size ( ) << \" images\"
>1414	Argument	\"...read \" << baseNames . size ( ) << \" images\"
>1415	ShiftExpression	\"...read \" << baseNames . size ( ) << \" images\"
>1416	ShiftExpression	baseNames . size ( ) << \" images\"
>1417	PrimaryExpression	\" images\"
>1418	CallExpression	baseNames . size ( )
>1419	ArgumentList	 
>1420	Callee	baseNames . size
>1421	MemberAccess	baseNames . size
>1422	Identifier	size
>1423	Identifier	baseNames
>1424	PrimaryExpression	\"...read \"
>1425	Callee	DRWN_LOG_MESSAGE
>1426	Identifier	DRWN_LOG_MESSAGE
>1427	ExpressionStatement	 
>1428	AssignmentExpr	baseNames = drwnReadFile ( evalList )
>1429	CallExpression	drwnReadFile ( evalList )
>1430	ArgumentList	evalList
>1431	Argument	evalList
>1432	Identifier	evalList
>1433	Callee	drwnReadFile
>1434	Identifier	drwnReadFile
>1435	Identifier	baseNames
>1436	ExpressionStatement	 
>1437	CallExpression	DRWN_LOG_MESSAGE ( \"Reading evaluation list from \" << evalList << \"...\" )
>1438	ArgumentList	\"Reading evaluation list from \" << evalList << \"...\"
>1439	Argument	\"Reading evaluation list from \" << evalList << \"...\"
>1440	ShiftExpression	\"Reading evaluation list from \" << evalList << \"...\"
>1441	ShiftExpression	evalList << \"...\"
>1442	PrimaryExpression	\"...\"
>1443	Identifier	evalList
>1444	PrimaryExpression	\"Reading evaluation list from \"
>1445	Callee	DRWN_LOG_MESSAGE
>1446	Identifier	DRWN_LOG_MESSAGE
>1447	Condition	 
>1448	CallExpression	drwnFileExists ( evalList )
>1449	ArgumentList	evalList
>1450	Argument	evalList
>1451	Identifier	evalList
>1452	Callee	drwnFileExists
>1453	Identifier	drwnFileExists
>1454	IdentifierDeclStatement	 
>1455	IdentifierDecl	baseNames
>1456	Identifier	baseNames
>1457	IdentifierDeclType	vector < string >
>1458	IdentifierDeclStatement	 
>1459	IdentifierDecl	* evalList = DRWN_CMDLINE_ARGV [ 1 ]
>1460	AssignmentExpr	* evalList = DRWN_CMDLINE_ARGV [ 1 ]
>1461	ArrayIndexing	DRWN_CMDLINE_ARGV [ 1 ]
>1462	PrimaryExpression	1
>1463	Identifier	DRWN_CMDLINE_ARGV
>1464	Identifier	evalList
>1465	Identifier	evalList
>1466	IdentifierDeclType	const char *
>1467	IdentifierDeclStatement	 
>1468	IdentifierDecl	* graphFile = DRWN_CMDLINE_ARGV [ 0 ]
>1469	AssignmentExpr	* graphFile = DRWN_CMDLINE_ARGV [ 0 ]
>1470	ArrayIndexing	DRWN_CMDLINE_ARGV [ 0 ]
>1471	PrimaryExpression	0
>1472	Identifier	DRWN_CMDLINE_ARGV
>1473	Identifier	graphFile
>1474	Identifier	graphFile
>1475	IdentifierDeclType	const char *
>1476	ExpressionStatement	 
>1477	CallExpression	drwnCodeProfiler 
>1478	ArgumentList	hMain
>1479	Argument	hMain
>1480	Identifier	hMain
>1481	Callee	drwnCodeProfiler 
>1482	Identifier	drwnCodeProfiler 
>1483	IdentifierDeclStatement	 
>1484	IdentifierDecl	hMain = drwnCodeProfiler 
>1485	AssignmentExpr	hMain = drwnCodeProfiler 
>1486	CallExpression	drwnCodeProfiler 
>1487	ArgumentList	\"main\"
>1488	Argument	\"main\"
>1489	PrimaryExpression	\"main\"
>1490	Callee	drwnCodeProfiler 
>1491	Identifier	drwnCodeProfiler 
>1492	Identifier	hMain
>1493	Identifier	hMain
>1494	IdentifierDeclType	const int
>1495	IfStatement	if ( DRWN_CMDLINE_ARGC != 2 )
>1496	CompoundStatement	 
>1497	ReturnStatement	 
>1498	UnaryOp	- 1
>1499	PrimaryExpression	1
>1500	UnaryOperator	-
>1501	ExpressionStatement	 
>1502	CallExpression	usage ( )
>1503	ArgumentList	 
>1504	Callee	usage
>1505	Identifier	usage
>1506	Condition	 
>1507	EqualityExpression	DRWN_CMDLINE_ARGC != 2
>1508	PrimaryExpression	2
>1509	Identifier	DRWN_CMDLINE_ARGC
>1510	ExpressionStatement	 
>1511	CallExpression	DRWN_END_CMDLINE_PROCESSING ( usage ( ) )
>1512	ArgumentList	usage ( )
>1513	Argument	usage ( )
>1514	CallExpression	usage ( )
>1515	ArgumentList	 
>1516	Callee	usage
>1517	Identifier	usage
>1518	Callee	DRWN_END_CMDLINE_PROCESSING
>1519	Identifier	DRWN_END_CMDLINE_PROCESSING
>1520	Statement	 
>1521	Statement	 
>1522	Statement	 
>1523	Statement	 
>1524	Statement	 
>1525	Statement	 
>1526	Statement	 
>1527	Statement	 
>1528	Statement	 
>1529	Statement	 
>1530	Statement	 
>1531	Statement	 
>1532	Statement	 
>1533	Statement	 
>1534	Statement	 
>1535	Statement	 
>1536	Statement	 
>1537	Statement	 
>1538	Statement	 
>1539	Statement	 
>1540	Statement	 
>1541	Statement	 
>1542	Statement	 
>1543	Statement	 
>1544	Statement	 
>1545	Statement	 
>1546	Statement	 
>1547	Statement	 
>1548	Statement	 
>1549	Statement	 
>1550	IdentifierDeclStatement	 
>1551	IdentifierDecl	bVisualize = false
>1552	AssignmentExpr	bVisualize = false
>1553	Identifier	false
>1554	Identifier	false
>1555	Identifier	bVisualize
>1556	IdentifierDeclType	bool
>1557	IdentifierDeclStatement	 
>1558	IdentifierDecl	* outImageExt = NULL
>1559	AssignmentExpr	* outImageExt = NULL
>1560	Identifier	NULL
>1561	Identifier	NULL
>1562	Identifier	outImageExt
>1563	IdentifierDeclType	const char *
>1564	IdentifierDeclStatement	 
>1565	IdentifierDecl	* outLabelExt = NULL
>1566	AssignmentExpr	* outLabelExt = NULL
>1567	Identifier	NULL
>1568	Identifier	NULL
>1569	Identifier	outLabelExt
>1570	IdentifierDeclType	const char *
>1571	IdentifierDeclStatement	 
>1572	IdentifierDecl	pairwiseSmoothness = 0.0
>1573	AssignmentExpr	pairwiseSmoothness = 0.0
>1574	PrimaryExpression	0.0
>1575	Identifier	pairwiseSmoothness
>1576	Identifier	pairwiseSmoothness
>1577	IdentifierDeclType	double
<12=23,13
<13=20,17,14
<14=16,15
<17=19,18
<20=22,21
<30=32,31
<36=39,38,37
<39=96,84,63,58,45,40
<40=41
<41=43,42
<43=44
<45=46
<46=55,47
<47=51,48
<48=49
<49=50
<51=52
<52=54,53
<55=57,56
<58=59
<59=61,60
<61=62
<63=64
<64=82,65
<65=66
<66=67
<67=76,68
<68=70,69
<70=71
<71=73,72
<73=75,74
<76=78,77
<78=79
<79=81,80
<82=83
<84=85
<85=95,94,86
<86=88,87
<88=89
<89=91,90
<91=93,92
<96=97
<97=109,108,98
<98=107,99
<99=101,100
<101=103,102
<103=104
<104=106,105
<141=143,142
<147=149,148
<153=156,155,154
<156=770,756,742,731,726,721,692,687,644,627,603,345,341,328,274,157
<157=268,158
<158=256,202,159
<159=198,160
<160=175,161
<161=162
<162=173,163
<163=166,164
<164=165
<166=167
<167=169,168
<169=170
<170=172,171
<173=174
<175=176
<176=197,196,177
<177=195,178
<178=185,179
<179=183,180
<180=181
<181=182
<183=184
<185=191,186
<186=189,187
<187=188
<189=190
<191=192
<192=194,193
<198=199
<199=201,200
<202=254,203
<203=249,220,209,204
<204=205
<205=207,206
<207=208
<209=210
<210=218,211
<211=216,214,212
<212=213
<214=215
<216=217
<218=219
<220=221
<221=248,247,222
<222=246,223
<223=240,224
<224=231,225
<225=229,226
<226=227
<227=228
<229=230
<231=238,232
<232=233
<233=234
<234=236,235
<236=237
<238=239
<240=244,241
<241=242
<242=243
<244=245
<249=250
<250=252,251
<252=253
<254=255
<256=257
<257=267,266,258
<258=265,259
<259=263,260
<260=261
<261=262
<263=264
<268=269
<269=273,270
<270=272,271
<274=324,275
<275=301,291,283,276
<276=277
<277=279,278
<279=280
<280=282,281
<283=284
<284=290,285
<285=287,286
<287=289,288
<291=292
<292=300,299,293
<293=295,294
<295=296
<296=298,297
<301=302
<302=323,322,303
<303=321,304
<304=311,305
<305=309,306
<306=307
<307=308
<309=310
<311=317,312
<312=315,313
<313=314
<315=316
<317=318
<318=320,319
<324=325
<325=327,326
<328=329
<329=337,330
<330=333,331
<331=332
<333=334
<334=336,335
<337=338
<338=340,339
<341=342
<342=344,343
<345=595,584,581,346
<346=347
<347=573,562,559,348
<348=545,390,349
<349=350
<350=366,351
<351=363,352
<352=354,353
<354=355
<355=357,356
<357=359,358
<359=360
<360=362,361
<363=365,364
<366=389,367
<367=388,368
<368=370,369
<370=387,371
<371=373,372
<373=384,374
<374=380,375
<375=378,376
<376=377
<378=379
<380=381
<381=383,382
<384=386,385
<390=537,523,520,391
<391=498,492,477,468,461,392
<392=448,439,436,393
<393=419,410,398,394
<394=395
<395=397,396
<398=399
<399=409,400
<400=408,401
<401=405,402
<402=404,403
<405=407,406
<410=411
<411=418,417,412
<412=416,413
<413=415,414
<419=421,420
<421=422
<422=424,423
<424=425
<425=427,426
<427=433,428
<428=430,429
<430=432,431
<433=435,434
<436=438,437
<439=440
<440=447,441
<441=443,442
<443=444
<444=446,445
<448=449
<449=450
<450=460,459,451
<451=458,452
<452=454,453
<454=455
<455=457,456
<461=462
<462=467,466,463
<463=465,464
<468=470,469
<470=471
<471=473,472
<473=474
<474=476,475
<477=478
<478=491,490,479
<479=489,480
<480=482,481
<482=484,483
<484=486,485
<486=488,487
<492=494,493
<494=495
<495=497,496
<498=499
<499=519,518,500
<500=517,501
<501=507,502
<502=506,503
<503=505,504
<507=509,508
<509=511,510
<511=513,512
<513=514
<514=516,515
<520=522,521
<523=524
<524=536,525
<525=527,526
<527=528
<528=530,529
<530=532,531
<532=533
<533=535,534
<537=538
<538=539
<539=544,543,540
<540=542,541
<545=546
<546=558,557,547
<547=556,548
<548=554,549
<549=552,550
<550=551
<552=553
<554=555
<559=561,560
<562=563
<563=572,564
<564=566,565
<566=567
<567=569,568
<569=571,570
<573=574
<574=575
<575=580,579,576
<576=578,577
<581=583,582
<584=585
<585=594,586
<586=588,587
<588=589
<589=591,590
<591=593,592
<595=596
<596=597
<597=602,601,598
<598=600,599
<603=604
<604=621,605
<605=614,606
<606=607
<607=613,608
<608=612,609
<609=611,610
<614=615
<615=617,616
<617=618
<618=620,619
<621=622
<622=624,623
<624=626,625
<627=628
<628=643,642,629
<629=636,630
<630=632,631
<632=633
<633=635,634
<636=638,637
<638=639
<639=641,640
<644=645
<645=685,646
<646=667,647
<647=648
<648=661,649
<649=660,650
<650=652,651
<652=653
<653=655,654
<655=657,656
<657=659,658
<661=663,662
<663=664
<664=666,665
<667=668
<668=679,669
<669=671,670
<671=672
<672=674,673
<674=676,675
<676=678,677
<679=681,680
<681=682
<682=684,683
<685=686
<687=688
<688=690,689
<690=691
<692=693
<693=719,694
<694=695
<695=696
<696=718,697
<697=712,698
<698=711,699
<699=705,700
<700=704,701
<701=703,702
<705=707,706
<707=708
<708=710,709
<712=714,713
<714=715
<715=717,716
<719=720
<721=722
<722=724,723
<724=725
<726=727
<727=730,729,728
<731=732
<732=740,733
<733=736,734
<734=735
<736=737
<737=739,738
<740=741
<742=743
<743=755,754,744
<744=753,745
<745=749,746
<746=747
<747=748
<749=750
<750=752,751
<756=757
<757=769,768,758
<758=767,759
<759=761,760
<761=763,762
<763=764
<764=766,765
<770=771
<771=781,772
<772=773
<773=774
<774=778,775
<775=777,776
<778=780,779
<781=782
<874=877,876,875
<877=898,894,878
<878=879
<879=893,880
<880=892,881
<881=891,882
<882=890,883
<883=889,884
<884=888,885
<885=887,886
<894=895
<895=897,896
<898=899
<899=903,900
<900=902,901
<907=916,915,908
<908=912,909
<909=911,910
<912=914,913
<916=1571,1564,1557,1550,1549,1548,1547,1546,1545,1544,1543,1542,1541,1540,1539,1538,1537,1536,917,919,924,931,939,961,988,995,1159,1163,1170,1197,1204,1253,1260,1264,1268,1278,1285,1296,1310,1326,1342,1358,1367,1371,1382,1454,1458,1467,1476,1483,1495,1510,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535
<917=918
<919=920
<920=922,921
<922=923
<924=925
<925=929,926
<926=927
<927=928
<929=930
<931=937,932
<932=933
<933=935,934
<935=936
<937=938
<939=950,940
<940=941
<941=942
<942=948,943
<943=944
<944=945
<945=947,946
<948=949
<950=951
<951=960,952
<952=954,953
<954=956,955
<956=957
<957=959,958
<961=980,971,968,962
<962=967,963
<963=964
<964=966,965
<968=970,969
<971=972
<972=979,973
<973=975,974
<975=976
<976=978,977
<980=981
<981=982
<982=987,986,983
<983=985,984
<988=989
<989=991,990
<991=992
<992=994,993
<995=1151,1142,1139,996
<996=1123,1103,1094,1081,1068,1057,1046,1035,1024,1011,997
<997=998
<998=1007,999
<999=1000
<1000=1001
<1001=1003,1002
<1003=1004
<1004=1006,1005
<1007=1008
<1008=1010,1009
<1011=1012
<1012=1016,1013
<1013=1015,1014
<1016=1018,1017
<1018=1020,1019
<1020=1021
<1021=1023,1022
<1024=1025
<1025=1027,1026
<1027=1029,1028
<1029=1031,1030
<1031=1032
<1032=1034,1033
<1035=1036
<1036=1038,1037
<1038=1040,1039
<1040=1042,1041
<1042=1043
<1043=1045,1044
<1046=1047
<1047=1049,1048
<1049=1051,1050
<1051=1053,1052
<1053=1054
<1054=1056,1055
<1057=1058
<1058=1060,1059
<1060=1062,1061
<1062=1064,1063
<1064=1065
<1065=1067,1066
<1068=1069
<1069=1073,1070
<1070=1072,1071
<1073=1075,1074
<1075=1077,1076
<1077=1078
<1078=1080,1079
<1081=1082
<1082=1086,1083
<1083=1085,1084
<1086=1088,1087
<1088=1090,1089
<1090=1091
<1091=1093,1092
<1094=1095
<1095=1099,1096
<1096=1097
<1097=1098
<1099=1100
<1100=1102,1101
<1103=1119,1104
<1104=1106,1105
<1106=1107
<1107=1117,1108
<1108=1109
<1109=1110
<1110=1116,1111
<1111=1113,1112
<1113=1115,1114
<1117=1118
<1119=1120
<1120=1122,1121
<1123=1124
<1124=1138,1137,1125
<1125=1136,1126
<1126=1132,1127
<1127=1128
<1128=1129
<1129=1131,1130
<1132=1133
<1133=1135,1134
<1139=1141,1140
<1142=1143
<1143=1150,1144
<1144=1146,1145
<1146=1147
<1147=1149,1148
<1151=1152
<1152=1153
<1153=1158,1157,1154
<1154=1156,1155
<1159=1160
<1160=1162,1161
<1163=1164
<1164=1166,1165
<1166=1167
<1167=1169,1168
<1170=1189,1180,1177,1171
<1171=1176,1172
<1172=1173
<1173=1175,1174
<1177=1179,1178
<1180=1181
<1181=1188,1182
<1182=1184,1183
<1184=1185
<1185=1187,1186
<1189=1190
<1190=1191
<1191=1196,1195,1192
<1192=1194,1193
<1197=1198
<1198=1200,1199
<1200=1201
<1201=1203,1202
<1204=1245,1236,1233,1205
<1205=1220,1206
<1206=1207
<1207=1216,1208
<1208=1209
<1209=1210
<1210=1212,1211
<1212=1213
<1213=1215,1214
<1216=1217
<1217=1219,1218
<1220=1221
<1221=1229,1222
<1222=1223
<1223=1224
<1224=1228,1225
<1225=1227,1226
<1229=1230
<1230=1232,1231
<1233=1235,1234
<1236=1237
<1237=1244,1238
<1238=1240,1239
<1240=1241
<1241=1243,1242
<1245=1246
<1246=1247
<1247=1252,1251,1248
<1248=1250,1249
<1253=1254
<1254=1256,1255
<1256=1257
<1257=1259,1258
<1260=1261
<1261=1263,1262
<1264=1265
<1265=1267,1266
<1268=1269
<1269=1277,1276,1270
<1270=1275,1271
<1271=1273,1272
<1273=1274
<1278=1279
<1279=1283,1280
<1280=1281
<1281=1282
<1283=1284
<1285=1286
<1286=1294,1287
<1287=1288
<1288=1289
<1289=1293,1290
<1290=1292,1291
<1294=1295
<1296=1297
<1297=1309,1308,1298
<1298=1307,1299
<1299=1301,1300
<1301=1303,1302
<1303=1304
<1304=1306,1305
<1310=1311
<1311=1324,1312
<1312=1313
<1313=1314
<1314=1323,1315
<1315=1317,1316
<1317=1319,1318
<1319=1320
<1320=1322,1321
<1324=1325
<1326=1327
<1327=1340,1328
<1328=1329
<1329=1330
<1330=1339,1331
<1331=1333,1332
<1333=1335,1334
<1335=1336
<1336=1338,1337
<1340=1341
<1342=1343
<1343=1356,1344
<1344=1345
<1345=1346
<1346=1355,1347
<1347=1349,1348
<1349=1351,1350
<1351=1352
<1352=1354,1353
<1356=1357
<1358=1359
<1359=1363,1360
<1360=1361
<1361=1362
<1363=1364
<1364=1366,1365
<1367=1368
<1368=1370,1369
<1371=1372
<1372=1380,1373
<1373=1374
<1374=1375
<1375=1379,1376
<1376=1378,1377
<1380=1381
<1382=1447,1410,1383
<1383=1384
<1384=1399,1385
<1385=1386
<1386=1395,1387
<1387=1388
<1388=1389
<1389=1393,1390
<1390=1391
<1391=1392
<1393=1394
<1395=1396
<1396=1398,1397
<1399=1400
<1400=1408,1401
<1401=1402
<1402=1403
<1403=1407,1404
<1404=1406,1405
<1408=1409
<1410=1436,1427,1411
<1411=1412
<1412=1425,1413
<1413=1414
<1414=1415
<1415=1424,1416
<1416=1418,1417
<1418=1420,1419
<1420=1421
<1421=1423,1422
<1425=1426
<1427=1428
<1428=1435,1429
<1429=1433,1430
<1430=1431
<1431=1432
<1433=1434
<1436=1437
<1437=1445,1438
<1438=1439
<1439=1440
<1440=1444,1441
<1441=1443,1442
<1445=1446
<1447=1448
<1448=1452,1449
<1449=1450
<1450=1451
<1452=1453
<1454=1455
<1455=1457,1456
<1458=1459
<1459=1466,1465,1460
<1460=1464,1461
<1461=1463,1462
<1467=1468
<1468=1475,1474,1469
<1469=1473,1470
<1470=1472,1471
<1476=1477
<1477=1481,1478
<1478=1479
<1479=1480
<1481=1482
<1483=1484
<1484=1494,1493,1485
<1485=1492,1486
<1486=1490,1487
<1487=1488
<1488=1489
<1490=1491
<1495=1506,1496
<1496=1501,1497
<1497=1498
<1498=1500,1499
<1501=1502
<1502=1504,1503
<1504=1505
<1506=1507
<1507=1509,1508
<1510=1511
<1511=1518,1512
<1512=1513
<1513=1514
<1514=1516,1515
<1516=1517
<1518=1519
<1550=1551
<1551=1556,1555,1552
<1552=1554,1553
<1557=1558
<1558=1563,1562,1559
<1559=1561,1560
<1564=1565
<1565=1570,1569,1566
<1566=1568,1567
<1571=1572
<1572=1577,1576,1573
<1573=1575,1574
