>3	FunctionDef	callFunction (mxArray * plhs [ ] , const mxArray * prhs [ ])
>4	ParameterList	mxArray * plhs [ ] , const mxArray * prhs [ ]
>5	Parameter	 
>6	Identifier	prhs
>7	ParameterType	const mxArray * [ ]
>8	Parameter	 
>9	Identifier	plhs
>10	ParameterType	mxArray * [ ]
>11	ReturnType	inline void
>12	CompoundStatement	 
>13	ExpressionStatement	 
>14	AssignmentExpr	( * pr_out ) = static_cast < T > ( num )
>15	RelationalExpression	static_cast < T > ( num )
>16	RelationalExpression	T > ( num )
>17	Identifier	num
>18	Identifier	T
>19	Identifier	static_cast
>20	UnaryOp	* pr_out
>21	Identifier	pr_out
>22	UnaryOperator	*
>23	ExpressionStatement	 
>24	CallExpression	mxGetPr ( plhs [ 0 ] )
>25	ArgumentList	plhs [ 0 ]
>26	Argument	plhs [ 0 ]
>27	ArrayIndexing	plhs [ 0 ]
>28	PrimaryExpression	0
>29	Identifier	plhs
>30	Callee	mxGetPr
>31	Identifier	mxGetPr
>32	Statement	 
>33	Statement	 
>34	Statement	 
>35	Statement	 
>36	Statement	 
>37	Statement	 
>38	Statement	 
>39	Statement	 
>40	Statement	 
>41	ExpressionStatement	 
>42	AssignmentExpr	plhs [ 0 ] = createMatrix < T > ( 1 , 1 )
>43	RelationalExpression	createMatrix < T > ( 1 , 1 )
>44	RelationalExpression	T > ( 1 , 1 )
>45	Expression	1 , 1
>46	PrimaryExpression	1
>47	PrimaryExpression	1
>48	Identifier	T
>49	Identifier	createMatrix
>50	ArrayIndexing	plhs [ 0 ]
>51	PrimaryExpression	0
>52	Identifier	plhs
>53	ExpressionStatement	 
>54	RelationalExpression	deleteCopySparse < T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r )
>55	RelationalExpression	T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r )
>56	Expression	D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r
>57	Expression	D_r2 , D_pB2 , D_pE2 , D_v , D_r
>58	Expression	D_pB2 , D_pE2 , D_v , D_r
>59	Expression	D_pE2 , D_v , D_r
>60	Expression	D_v , D_r
>61	Identifier	D_r
>62	Identifier	D_v
>63	Identifier	D_pE2
>64	Identifier	D_pB2
>65	Identifier	D_r2
>66	Identifier	D_v2
>67	Identifier	T
>68	Identifier	deleteCopySparse
>69	IdentifierDeclStatement	 
>70	IdentifierDecl	num = count_paths_dags ( G )
>71	AssignmentExpr	num = count_paths_dags ( G )
>72	CallExpression	count_paths_dags ( G )
>73	ArgumentList	G
>74	Argument	G
>75	Identifier	G
>76	Callee	count_paths_dags
>77	Identifier	count_paths_dags
>78	Identifier	num
>79	Identifier	num
>80	IdentifierDeclType	T
>81	IdentifierDeclStatement	 
>82	IdentifierDecl	G ( D_v2 , D_r2 , D_pB2 , D_pE2 , mD , p , D_pB2 [ p ] )
>83	Expression	D_v2 , D_r2 , D_pB2 , D_pE2 , mD , p , D_pB2 [ p ]
>84	Expression	D_r2 , D_pB2 , D_pE2 , mD , p , D_pB2 [ p ]
>85	Expression	D_pB2 , D_pE2 , mD , p , D_pB2 [ p ]
>86	Expression	D_pE2 , mD , p , D_pB2 [ p ]
>87	Expression	mD , p , D_pB2 [ p ]
>88	Expression	p , D_pB2 [ p ]
>89	ArrayIndexing	D_pB2 [ p ]
>90	Identifier	p
>91	Identifier	D_pB2
>92	Identifier	p
>93	Identifier	mD
>94	Identifier	D_pE2
>95	Identifier	D_pB2
>96	Identifier	D_r2
>97	Identifier	D_v2
>98	Identifier	G
>99	IdentifierDeclType	SpMatrix < T >
>100	ExpressionStatement	 
>101	RelationalExpression	createCopySparse < T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p )
>102	RelationalExpression	T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p )
>103	Expression	D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p
>104	Expression	D_r2 , D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p
>105	Expression	D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p
>106	Expression	D_pE2 , D_v , D_r , D_pB , D_pE , p
>107	Expression	D_v , D_r , D_pB , D_pE , p
>108	Expression	D_r , D_pB , D_pE , p
>109	Expression	D_pB , D_pE , p
>110	Expression	D_pE , p
>111	Identifier	p
>112	Identifier	D_pE
>113	Identifier	D_pB
>114	Identifier	D_r
>115	Identifier	D_v
>116	Identifier	D_pE2
>117	Identifier	D_pB2
>118	Identifier	D_r2
>119	Identifier	D_v2
>120	Identifier	T
>121	Identifier	createCopySparse
>122	ExpressionStatement	 
>123	AssignmentExpr	D_pE = D_pB + 1
>124	AdditiveExpression	D_pB + 1
>125	PrimaryExpression	1
>126	Identifier	D_pB
>127	Identifier	D_pE
>128	ExpressionStatement	 
>129	AssignmentExpr	D_pB = mxGetJc ( prhs [ 0 ] )
>130	CallExpression	mxGetJc ( prhs [ 0 ] )
>131	ArgumentList	prhs [ 0 ]
>132	Argument	prhs [ 0 ]
>133	ArrayIndexing	prhs [ 0 ]
>134	PrimaryExpression	0
>135	Identifier	prhs
>136	Callee	mxGetJc
>137	Identifier	mxGetJc
>138	Identifier	D_pB
>139	ExpressionStatement	 
>140	AssignmentExpr	D_r = mxGetIr ( prhs [ 0 ] )
>141	CallExpression	mxGetIr ( prhs [ 0 ] )
>142	ArgumentList	prhs [ 0 ]
>143	Argument	prhs [ 0 ]
>144	ArrayIndexing	prhs [ 0 ]
>145	PrimaryExpression	0
>146	Identifier	prhs
>147	Callee	mxGetIr
>148	Identifier	mxGetIr
>149	Identifier	D_r
>150	ExpressionStatement	 
>151	CallExpression	mxGetPr ( prhs [ 0 ] )
>152	ArgumentList	prhs [ 0 ]
>153	Argument	prhs [ 0 ]
>154	ArrayIndexing	prhs [ 0 ]
>155	PrimaryExpression	0
>156	Identifier	prhs
>157	Callee	mxGetPr
>158	Identifier	mxGetPr
>159	Statement	 
>160	Statement	 
>161	Statement	 
>162	Statement	 
>163	Statement	 
>164	Statement	 
>165	Statement	 
>166	IdentifierDeclStatement	 
>167	IdentifierDecl	* D_v2
>168	Identifier	D_v2
>169	IdentifierDeclType	T *
>170	IdentifierDeclStatement	 
>171	IdentifierDecl	* D_pE2
>172	Identifier	D_pE2
>173	IdentifierDeclType	long *
>174	IdentifierDecl	* D_pB2
>175	Identifier	D_pB2
>176	IdentifierDeclType	long *
>177	IdentifierDecl	* D_r2
>178	Identifier	D_r2
>179	IdentifierDeclType	long *
>180	IdentifierDeclStatement	 
>181	IdentifierDecl	* D_pE
>182	Identifier	D_pE
>183	IdentifierDeclType	mwSize *
>184	IdentifierDecl	* D_pB
>185	Identifier	D_pB
>186	IdentifierDeclType	mwSize *
>187	IdentifierDecl	* D_r
>188	Identifier	D_r
>189	IdentifierDeclType	mwSize *
>190	IdentifierDeclStatement	 
>191	IdentifierDecl	* D_v
>192	Identifier	D_v
>193	IdentifierDeclType	double *
>194	IdentifierDeclStatement	 
>195	IdentifierDecl	n = p
>196	AssignmentExpr	n = p
>197	Identifier	p
>198	Identifier	p
>199	Identifier	n
>200	IdentifierDeclType	const long
>201	ExpressionStatement	 
>202	ArrayIndexing	dimsD [ 1 ]
>203	PrimaryExpression	1
>204	Identifier	dimsD
>205	Statement	 
>206	Statement	 
>207	Statement	 
>208	Statement	 
>209	Statement	 
>210	Statement	 
>211	Statement	 
>212	ExpressionStatement	 
>213	ArrayIndexing	dimsD [ 0 ]
>214	PrimaryExpression	0
>215	Identifier	dimsD
>216	Statement	 
>217	Statement	 
>218	Statement	 
>219	Statement	 
>220	Statement	 
>221	Statement	 
>222	Statement	 
>223	IdentifierDeclStatement	 
>224	IdentifierDecl	* dimsD = mxGetDimensions ( prhs [ 0 ] )
>225	AssignmentExpr	* dimsD = mxGetDimensions ( prhs [ 0 ] )
>226	CallExpression	mxGetDimensions ( prhs [ 0 ] )
>227	ArgumentList	prhs [ 0 ]
>228	Argument	prhs [ 0 ]
>229	ArrayIndexing	prhs [ 0 ]
>230	PrimaryExpression	0
>231	Identifier	prhs
>232	Callee	mxGetDimensions
>233	Identifier	mxGetDimensions
>234	Identifier	dimsD
>235	Identifier	dimsD
>236	IdentifierDeclType	const mwSize *
>237	IfStatement	if ( ! mxIsSparse ( prhs [ 0 ] ) )
>238	ExpressionStatement	 
>239	CallExpression	mexErrMsgTxt ( \"argument 1 should be sparse\" )
>240	ArgumentList	\"argument 1 should be sparse\"
>241	Argument	\"argument 1 should be sparse\"
>242	PrimaryExpression	\"argument 1 should be sparse\"
>243	Callee	mexErrMsgTxt
>244	Identifier	mexErrMsgTxt
>245	Condition	 
>246	UnaryOp	! mxIsSparse ( prhs [ 0 ] )
>247	CallExpression	mxIsSparse ( prhs [ 0 ] )
>248	ArgumentList	prhs [ 0 ]
>249	Argument	prhs [ 0 ]
>250	ArrayIndexing	prhs [ 0 ]
>251	PrimaryExpression	0
>252	Identifier	prhs
>253	Callee	mxIsSparse
>254	Identifier	mxIsSparse
>255	UnaryOperator	!
>256	IfStatement	if ( ! mexCheckType < T > ( prhs [ 0 ] ) )
>257	ExpressionStatement	 
>258	CallExpression	mexErrMsgTxt ( \"type of argument 1 is not consistent\" )
>259	ArgumentList	\"type of argument 1 is not consistent\"
>260	Argument	\"type of argument 1 is not consistent\"
>261	PrimaryExpression	\"type of argument 1 is not consistent\"
>262	Callee	mexErrMsgTxt
>263	Identifier	mexErrMsgTxt
>264	Condition	 
>265	RelationalExpression	! mexCheckType < T > ( prhs [ 0 ] )
>266	RelationalExpression	T > ( prhs [ 0 ] )
>267	ArrayIndexing	prhs [ 0 ]
>268	PrimaryExpression	0
>269	Identifier	prhs
>270	Identifier	T
>271	UnaryOp	! mexCheckType
>272	Identifier	mexCheckType
>273	UnaryOperator	!
>305	FunctionDef	mexFunction (int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ])
>306	ParameterList	int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ]
>307	Parameter	 
>308	Identifier	prhs
>309	ParameterType	const mxArray * [ ]
>310	Parameter	 
>311	Identifier	nrhs
>312	ParameterType	int
>313	Parameter	 
>314	Identifier	plhs
>315	ParameterType	mxArray * [ ]
>316	Parameter	 
>317	Identifier	nlhs
>318	ParameterType	int
>319	ReturnType	void
>320	CompoundStatement	 
>321	IfStatement	if ( mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS )
>322	ElseStatement	else
>323	CompoundStatement	 
>324	ExpressionStatement	 
>325	RelationalExpression	callFunction < float > ( plhs , prhs )
>326	RelationalExpression	float > ( plhs , prhs )
>327	Expression	plhs , prhs
>328	Identifier	prhs
>329	Identifier	plhs
>330	Identifier	float
>331	Identifier	callFunction
>332	CompoundStatement	 
>333	ExpressionStatement	 
>334	RelationalExpression	callFunction < double > ( plhs , prhs )
>335	RelationalExpression	double > ( plhs , prhs )
>336	Expression	plhs , prhs
>337	Identifier	prhs
>338	Identifier	plhs
>339	Identifier	double
>340	Identifier	callFunction
>341	Condition	 
>342	EqualityExpression	mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS
>343	Identifier	mxDOUBLE_CLASS
>344	CallExpression	mxGetClassID ( prhs [ 0 ] )
>345	ArgumentList	prhs [ 0 ]
>346	Argument	prhs [ 0 ]
>347	ArrayIndexing	prhs [ 0 ]
>348	PrimaryExpression	0
>349	Identifier	prhs
>350	Callee	mxGetClassID
>351	Identifier	mxGetClassID
>352	IfStatement	if ( nlhs != 1 )
>353	ExpressionStatement	 
>354	CallExpression	mexErrMsgTxt ( \"Bad number of output arguments\" )
>355	ArgumentList	\"Bad number of output arguments\"
>356	Argument	\"Bad number of output arguments\"
>357	PrimaryExpression	\"Bad number of output arguments\"
>358	Callee	mexErrMsgTxt
>359	Identifier	mexErrMsgTxt
>360	Condition	 
>361	EqualityExpression	nlhs != 1
>362	PrimaryExpression	1
>363	Identifier	nlhs
>364	IfStatement	if ( nrhs != 1 )
>365	ExpressionStatement	 
>366	CallExpression	mexErrMsgTxt ( \"Bad number of inputs arguments\" )
>367	ArgumentList	\"Bad number of inputs arguments\"
>368	Argument	\"Bad number of inputs arguments\"
>369	PrimaryExpression	\"Bad number of inputs arguments\"
>370	Callee	mexErrMsgTxt
>371	Identifier	mexErrMsgTxt
>372	Condition	 
>373	EqualityExpression	nrhs != 1
>374	PrimaryExpression	1
>375	Identifier	nrhs
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=256,13,23,32,33,34,35,36,37,38,39,40,41,53,69,81,100,122,128,139,150,159,160,161,162,163,164,165,166,170,180,190,194,201,205,206,207,208,209,210,211,212,216,217,218,219,220,221,222,223,237
<13=14
<14=20,15
<15=19,16
<16=18,17
<20=22,21
<23=24
<24=30,25
<25=26
<26=27
<27=29,28
<30=31
<41=42
<42=50,43
<43=49,44
<44=48,45
<45=47,46
<50=52,51
<53=54
<54=68,55
<55=67,56
<56=66,57
<57=65,58
<58=64,59
<59=63,60
<60=62,61
<69=70
<70=80,79,71
<71=78,72
<72=76,73
<73=74
<74=75
<76=77
<81=82
<82=99,98,83
<83=97,84
<84=96,85
<85=95,86
<86=94,87
<87=93,88
<88=92,89
<89=91,90
<100=101
<101=121,102
<102=120,103
<103=119,104
<104=118,105
<105=117,106
<106=116,107
<107=115,108
<108=114,109
<109=113,110
<110=112,111
<122=123
<123=127,124
<124=126,125
<128=129
<129=138,130
<130=136,131
<131=132
<132=133
<133=135,134
<136=137
<139=140
<140=149,141
<141=147,142
<142=143
<143=144
<144=146,145
<147=148
<150=151
<151=157,152
<152=153
<153=154
<154=156,155
<157=158
<166=167
<167=169,168
<170=177,174,171
<171=173,172
<174=176,175
<177=179,178
<180=187,184,181
<181=183,182
<184=186,185
<187=189,188
<190=191
<191=193,192
<194=195
<195=200,199,196
<196=198,197
<201=202
<202=204,203
<212=213
<213=215,214
<223=224
<224=236,235,225
<225=234,226
<226=232,227
<227=228
<228=229
<229=231,230
<232=233
<237=245,238
<238=239
<239=243,240
<240=241
<241=242
<243=244
<245=246
<246=255,247
<247=253,248
<248=249
<249=250
<250=252,251
<253=254
<256=264,257
<257=258
<258=262,259
<259=260
<260=261
<262=263
<264=265
<265=271,266
<266=270,267
<267=269,268
<271=273,272
<305=320,319,306
<306=316,313,310,307
<307=309,308
<310=312,311
<313=315,314
<316=318,317
<320=364,352,321
<321=341,332,322
<322=323
<323=324
<324=325
<325=331,326
<326=330,327
<327=329,328
<332=333
<333=334
<334=340,335
<335=339,336
<336=338,337
<341=342
<342=344,343
<344=350,345
<345=346
<346=347
<347=349,348
<350=351
<352=360,353
<353=354
<354=358,355
<355=356
<356=357
<358=359
<360=361
<361=363,362
<364=372,365
<365=366
<366=370,367
<367=368
<368=369
<370=371
<372=373
<373=375,374
