>3	FunctionDef	Cell 
>4	ParameterList	 
>5	CompoundStatement	 
>11	FunctionDef	Cell 
>12	ParameterList	bool matchPythonOrder
>13	Parameter	 
>14	Identifier	matchPythonOrder
>15	ParameterType	bool
>16	ReturnType	void
>17	CompoundStatement	 
>18	ExpressionStatement	 
>19	AssignmentExpr	cellMatchPythonSegOrder = matchPythonOrder
>20	Identifier	matchPythonOrder
>21	Identifier	cellMatchPythonSegOrder
>22	IfStatement	if ( matchPythonOrder )
>23	CompoundStatement	 
>24	ExpressionStatement	 
>25	ShiftExpression	std 
>26	PrimaryExpression	\"*** Python segment match turned on for Cells4\n\"
>27	Identifier	std 
>28	Condition	 
>29	Identifier	matchPythonOrder
>35	FunctionDef	Cell 
>36	ParameterList	const Segment 
>37	Parameter	 
>38	Identifier	iteration
>39	ParameterType	UInt
>40	Parameter	 
>41	Identifier	permConnected
>42	ParameterType	Real
>43	Parameter	 
>44	Identifier	sequenceSegmentFlag
>45	ParameterType	bool
>46	Parameter	 
>47	Identifier	initFrequency
>48	ParameterType	Real
>49	Parameter	 
>50	Identifier	synapses
>51	ParameterType	const Segment 
>52	ReturnType	UInt
>53	CompoundStatement	 
>54	ReturnStatement	 
>55	Identifier	segIdx
>56	ExpressionStatement	 
>57	AssignmentExpr	_segments [ segIdx ] = Segment ( synapses , initFrequency , sequenceSegmentFlag , permConnected , iteration )
>58	CallExpression	Segment ( synapses , initFrequency , sequenceSegmentFlag , permConnected , iteration )
>59	ArgumentList	synapses
>60	Argument	iteration
>61	Identifier	iteration
>62	Argument	permConnected
>63	Identifier	permConnected
>64	Argument	sequenceSegmentFlag
>65	Identifier	sequenceSegmentFlag
>66	Argument	initFrequency
>67	Identifier	initFrequency
>68	Argument	synapses
>69	Identifier	synapses
>70	Callee	Segment
>71	Identifier	Segment
>72	ArrayIndexing	_segments [ segIdx ]
>73	Identifier	segIdx
>74	Identifier	_segments
>75	ExpressionStatement	 
>76	CallExpression	NTA_ASSERT ( _segments [ segIdx ] . empty ( ) )
>77	ArgumentList	_segments [ segIdx ] . empty ( )
>78	Argument	_segments [ segIdx ] . empty ( )
>79	CallExpression	_segments [ segIdx ] . empty ( )
>80	ArgumentList	 
>81	Callee	_segments [ segIdx ] . empty
>82	MemberAccess	_segments [ segIdx ] . empty
>83	Identifier	empty
>84	ArrayIndexing	_segments [ segIdx ]
>85	Identifier	segIdx
>86	Identifier	_segments
>87	Callee	NTA_ASSERT
>88	Identifier	NTA_ASSERT
>89	ExpressionStatement	 
>90	CallExpression	NTA_ASSERT ( not_in ( segIdx , _freeSegments ) )
>91	ArgumentList	not_in ( segIdx , _freeSegments )
>92	Argument	not_in ( segIdx , _freeSegments )
>93	CallExpression	not_in ( segIdx , _freeSegments )
>94	ArgumentList	segIdx
>95	Argument	_freeSegments
>96	Identifier	_freeSegments
>97	Argument	segIdx
>98	Identifier	segIdx
>99	Callee	not_in
>100	Identifier	not_in
>101	Callee	NTA_ASSERT
>102	Identifier	NTA_ASSERT
>103	ExpressionStatement	 
>104	CallExpression	NTA_ASSERT ( segIdx < _segments . size ( ) )
>105	ArgumentList	segIdx < _segments . size ( )
>106	Argument	segIdx < _segments . size ( )
>107	RelationalExpression	segIdx < _segments . size ( )
>108	CallExpression	_segments . size ( )
>109	ArgumentList	 
>110	Callee	_segments . size
>111	MemberAccess	_segments . size
>112	Identifier	size
>113	Identifier	_segments
>114	Identifier	segIdx
>115	Callee	NTA_ASSERT
>116	Identifier	NTA_ASSERT
>117	IfStatement	if ( cellMatchPythonSegOrder )
>118	ElseStatement	else
>119	CompoundStatement	 
>120	IfStatement	if ( _freeSegments . empty ( ) )
>121	ElseStatement	else
>122	CompoundStatement	 
>123	ExpressionStatement	 
>124	CallExpression	_freeSegments . pop_back ( )
>125	ArgumentList	 
>126	Callee	_freeSegments . pop_back
>127	MemberAccess	_freeSegments . pop_back
>128	Identifier	pop_back
>129	Identifier	_freeSegments
>130	ExpressionStatement	 
>131	AssignmentExpr	segIdx = _freeSegments . back ( )
>132	CallExpression	_freeSegments . back ( )
>133	ArgumentList	 
>134	Callee	_freeSegments . back
>135	MemberAccess	_freeSegments . back
>136	Identifier	back
>137	Identifier	_freeSegments
>138	Identifier	segIdx
>139	CompoundStatement	 
>140	ExpressionStatement	 
>141	CallExpression	_segments . resize ( _segments . size ( ) + 1 )
>142	ArgumentList	_segments . size ( ) + 1
>143	Argument	_segments . size ( ) + 1
>144	AdditiveExpression	_segments . size ( ) + 1
>145	PrimaryExpression	1
>146	CallExpression	_segments . size ( )
>147	ArgumentList	 
>148	Callee	_segments . size
>149	MemberAccess	_segments . size
>150	Identifier	size
>151	Identifier	_segments
>152	Callee	_segments . resize
>153	MemberAccess	_segments . resize
>154	Identifier	resize
>155	Identifier	_segments
>156	ExpressionStatement	 
>157	AssignmentExpr	segIdx = _segments . size ( )
>158	CallExpression	_segments . size ( )
>159	ArgumentList	 
>160	Callee	_segments . size
>161	MemberAccess	_segments . size
>162	Identifier	size
>163	Identifier	_segments
>164	Identifier	segIdx
>165	Condition	 
>166	CallExpression	_freeSegments . empty ( )
>167	ArgumentList	 
>168	Callee	_freeSegments . empty
>169	MemberAccess	_freeSegments . empty
>170	Identifier	empty
>171	Identifier	_freeSegments
>172	CompoundStatement	 
>173	ExpressionStatement	 
>174	CallExpression	_segments . resize ( _segments . size ( ) + 1 )
>175	ArgumentList	_segments . size ( ) + 1
>176	Argument	_segments . size ( ) + 1
>177	AdditiveExpression	_segments . size ( ) + 1
>178	PrimaryExpression	1
>179	CallExpression	_segments . size ( )
>180	ArgumentList	 
>181	Callee	_segments . size
>182	MemberAccess	_segments . size
>183	Identifier	size
>184	Identifier	_segments
>185	Callee	_segments . resize
>186	MemberAccess	_segments . resize
>187	Identifier	resize
>188	Identifier	_segments
>189	ExpressionStatement	 
>190	AssignmentExpr	segIdx = _segments . size ( )
>191	CallExpression	_segments . size ( )
>192	ArgumentList	 
>193	Callee	_segments . size
>194	MemberAccess	_segments . size
>195	Identifier	size
>196	Identifier	_segments
>197	Identifier	segIdx
>198	Condition	 
>199	Identifier	cellMatchPythonSegOrder
>200	IdentifierDeclStatement	 
>201	IdentifierDecl	segIdx = 0
>202	AssignmentExpr	segIdx = 0
>203	PrimaryExpression	0
>204	Identifier	segIdx
>205	Identifier	segIdx
>206	IdentifierDeclType	UInt
>207	ExpressionStatement	 
>208	CallExpression	NTA_ASSERT ( ! synapses . empty ( ) )
>209	ArgumentList	! synapses . empty ( )
>210	Argument	! synapses . empty ( )
>211	UnaryOp	! synapses . empty ( )
>212	CallExpression	synapses . empty ( )
>213	ArgumentList	 
>214	Callee	synapses . empty
>215	MemberAccess	synapses . empty
>216	Identifier	empty
>217	Identifier	synapses
>218	UnaryOperator	!
>219	Callee	NTA_ASSERT
>220	Identifier	NTA_ASSERT
>242	FunctionDef	Cell 
>243	ParameterList	UInt iterations
>244	Parameter	 
>245	Identifier	iterations
>246	ParameterType	UInt
>247	ReturnType	void
>248	CompoundStatement	 
>249	ForStatement	for ( UInt i = 0 ; i != _segments . size ( ) ; ++ i )
>250	CompoundStatement	 
>251	IfStatement	if ( ! _segments [ i ] . empty ( ) )
>252	CompoundStatement	 
>253	ExpressionStatement	 
>254	CallExpression	_segments [ i ] . dutyCycle ( iterations , false , false )
>255	ArgumentList	iterations
>256	Argument	false
>257	Identifier	false
>258	Argument	false
>259	Identifier	false
>260	Argument	iterations
>261	Identifier	iterations
>262	Callee	_segments [ i ] . dutyCycle
>263	MemberAccess	_segments [ i ] . dutyCycle
>264	Identifier	dutyCycle
>265	ArrayIndexing	_segments [ i ]
>266	Identifier	i
>267	Identifier	_segments
>268	Condition	 
>269	UnaryOp	! _segments [ i ] . empty ( )
>270	CallExpression	_segments [ i ] . empty ( )
>271	ArgumentList	 
>272	Callee	_segments [ i ] . empty
>273	MemberAccess	_segments [ i ] . empty
>274	Identifier	empty
>275	ArrayIndexing	_segments [ i ]
>276	Identifier	i
>277	Identifier	_segments
>278	UnaryOperator	!
>279	UnaryExpression	 
>280	Identifier	i
>281	IncDec	++
>282	Condition	 
>283	EqualityExpression	i != _segments . size ( )
>284	CallExpression	_segments . size ( )
>285	ArgumentList	 
>286	Callee	_segments . size
>287	MemberAccess	_segments . size
>288	Identifier	size
>289	Identifier	_segments
>290	Identifier	i
>291	ForInit	 
>292	IdentifierDeclStatement	UInt i = 0 ;
>293	IdentifierDecl	i = 0
>294	AssignmentExpr	i = 0
>295	PrimaryExpression	0
>296	Identifier	i
>297	Identifier	i
>298	IdentifierDeclType	UInt
>310	FunctionDef	Cell 
>311	ParameterList	std 
>312	Parameter	 
>313	Identifier	outStream
>314	ParameterType	std 
>315	ReturnType	void
>316	CompoundStatement	 
>317	ForStatement	for ( UInt i = 0 ; i != _segments . size ( ) ; ++ i )
>318	CompoundStatement	 
>319	ExpressionStatement	 
>320	ShiftExpression	outStream << ' '
>321	PrimaryExpression	' '
>322	Identifier	outStream
>323	ExpressionStatement	 
>324	CallExpression	_segments [ i ] . save ( outStream )
>325	ArgumentList	outStream
>326	Argument	outStream
>327	Identifier	outStream
>328	Callee	_segments [ i ] . save
>329	MemberAccess	_segments [ i ] . save
>330	Identifier	save
>331	ArrayIndexing	_segments [ i ]
>332	Identifier	i
>333	Identifier	_segments
>334	UnaryExpression	 
>335	Identifier	i
>336	IncDec	++
>337	Condition	 
>338	EqualityExpression	i != _segments . size ( )
>339	CallExpression	_segments . size ( )
>340	ArgumentList	 
>341	Callee	_segments . size
>342	MemberAccess	_segments . size
>343	Identifier	size
>344	Identifier	_segments
>345	Identifier	i
>346	ForInit	 
>347	IdentifierDeclStatement	UInt i = 0 ;
>348	IdentifierDecl	i = 0
>349	AssignmentExpr	i = 0
>350	PrimaryExpression	0
>351	Identifier	i
>352	Identifier	i
>353	IdentifierDeclType	UInt
>354	ExpressionStatement	 
>355	ShiftExpression	outStream << _segments . size ( ) << ' '
>356	ShiftExpression	_segments . size ( ) << ' '
>357	PrimaryExpression	' '
>358	CallExpression	_segments . size ( )
>359	ArgumentList	 
>360	Callee	_segments . size
>361	MemberAccess	_segments . size
>362	Identifier	size
>363	Identifier	_segments
>364	Identifier	outStream
>374	FunctionDef	Cell 
>375	ParameterList	std 
>376	Parameter	 
>377	Identifier	inStream
>378	ParameterType	std 
>379	ReturnType	void
>380	CompoundStatement	 
>381	ForStatement	for ( UInt i = 0 ; i != ( UInt ) n ; ++ i )
>382	CompoundStatement	 
>383	IfStatement	if ( _segments [ i ] . empty ( ) )
>384	ExpressionStatement	 
>385	CallExpression	_freeSegments . push_back ( i )
>386	ArgumentList	i
>387	Argument	i
>388	Identifier	i
>389	Callee	_freeSegments . push_back
>390	MemberAccess	_freeSegments . push_back
>391	Identifier	push_back
>392	Identifier	_freeSegments
>393	Condition	 
>394	CallExpression	_segments [ i ] . empty ( )
>395	ArgumentList	 
>396	Callee	_segments [ i ] . empty
>397	MemberAccess	_segments [ i ] . empty
>398	Identifier	empty
>399	ArrayIndexing	_segments [ i ]
>400	Identifier	i
>401	Identifier	_segments
>402	ExpressionStatement	 
>403	CallExpression	_segments [ i ] . load ( inStream )
>404	ArgumentList	inStream
>405	Argument	inStream
>406	Identifier	inStream
>407	Callee	_segments [ i ] . load
>408	MemberAccess	_segments [ i ] . load
>409	Identifier	load
>410	ArrayIndexing	_segments [ i ]
>411	Identifier	i
>412	Identifier	_segments
>413	UnaryExpression	 
>414	Identifier	i
>415	IncDec	++
>416	Condition	 
>417	EqualityExpression	i != ( UInt ) n
>418	CastExpression	( UInt ) n
>419	Identifier	n
>420	CastTarget	UInt
>421	Identifier	i
>422	ForInit	 
>423	IdentifierDeclStatement	UInt i = 0 ;
>424	IdentifierDecl	i = 0
>425	AssignmentExpr	i = 0
>426	PrimaryExpression	0
>427	Identifier	i
>428	Identifier	i
>429	IdentifierDeclType	UInt
>430	ExpressionStatement	 
>431	CallExpression	_freeSegments . resize ( 0 )
>432	ArgumentList	0
>433	Argument	0
>434	PrimaryExpression	0
>435	Callee	_freeSegments . resize
>436	MemberAccess	_freeSegments . resize
>437	Identifier	resize
>438	Identifier	_freeSegments
>439	ExpressionStatement	 
>440	CallExpression	_segments . resize ( n )
>441	ArgumentList	n
>442	Argument	n
>443	Identifier	n
>444	Callee	_segments . resize
>445	MemberAccess	_segments . resize
>446	Identifier	resize
>447	Identifier	_segments
>448	ExpressionStatement	 
>449	ShiftExpression	inStream >> n
>450	Identifier	n
>451	Identifier	inStream
>452	IdentifierDeclStatement	 
>453	IdentifierDecl	n = 0
>454	AssignmentExpr	n = 0
>455	PrimaryExpression	0
>456	Identifier	n
>457	Identifier	n
>458	IdentifierDeclType	UInt
<3=5,4
<11=17,16,12
<12=13
<13=15,14
<17=22,18
<18=19
<19=21,20
<22=28,23
<23=24
<24=25
<25=27,26
<28=29
<35=53,52,36
<36=49,46,43,40,37
<37=39,38
<40=42,41
<43=45,44
<46=48,47
<49=51,50
<53=207,200,117,103,89,75,56,54
<54=55
<56=57
<57=72,58
<58=70,59
<59=68,66,64,62,60
<60=61
<62=63
<64=65
<66=67
<68=69
<70=71
<72=74,73
<75=76
<76=87,77
<77=78
<78=79
<79=81,80
<81=82
<82=84,83
<84=86,85
<87=88
<89=90
<90=101,91
<91=92
<92=93
<93=99,94
<94=97,95
<95=96
<97=98
<99=100
<101=102
<103=104
<104=115,105
<105=106
<106=107
<107=114,108
<108=110,109
<110=111
<111=113,112
<115=116
<117=198,172,118
<118=119
<119=120
<120=165,139,121
<121=122
<122=130,123
<123=124
<124=126,125
<126=127
<127=129,128
<130=131
<131=138,132
<132=134,133
<134=135
<135=137,136
<139=156,140
<140=141
<141=152,142
<142=143
<143=144
<144=146,145
<146=148,147
<148=149
<149=151,150
<152=153
<153=155,154
<156=157
<157=164,158
<158=160,159
<160=161
<161=163,162
<165=166
<166=168,167
<168=169
<169=171,170
<172=189,173
<173=174
<174=185,175
<175=176
<176=177
<177=179,178
<179=181,180
<181=182
<182=184,183
<185=186
<186=188,187
<189=190
<190=197,191
<191=193,192
<193=194
<194=196,195
<198=199
<200=201
<201=206,205,202
<202=204,203
<207=208
<208=219,209
<209=210
<210=211
<211=218,212
<212=214,213
<214=215
<215=217,216
<219=220
<242=248,247,243
<243=244
<244=246,245
<248=249
<249=291,282,279,250
<250=251
<251=268,252
<252=253
<253=254
<254=262,255
<255=260,258,256
<256=257
<258=259
<260=261
<262=263
<263=265,264
<265=267,266
<268=269
<269=278,270
<270=272,271
<272=273
<273=275,274
<275=277,276
<279=281,280
<282=283
<283=290,284
<284=286,285
<286=287
<287=289,288
<291=292
<292=293
<293=298,297,294
<294=296,295
<310=316,315,311
<311=312
<312=314,313
<316=354,317
<317=346,337,334,318
<318=323,319
<319=320
<320=322,321
<323=324
<324=328,325
<325=326
<326=327
<328=329
<329=331,330
<331=333,332
<334=336,335
<337=338
<338=345,339
<339=341,340
<341=342
<342=344,343
<346=347
<347=348
<348=353,352,349
<349=351,350
<354=355
<355=364,356
<356=358,357
<358=360,359
<360=361
<361=363,362
<374=380,379,375
<375=376
<376=378,377
<380=452,448,439,430,381
<381=422,416,413,382
<382=402,383
<383=393,384
<384=385
<385=389,386
<386=387
<387=388
<389=390
<390=392,391
<393=394
<394=396,395
<396=397
<397=399,398
<399=401,400
<402=403
<403=407,404
<404=405
<405=406
<407=408
<408=410,409
<410=412,411
<413=415,414
<416=417
<417=421,418
<418=420,419
<422=423
<423=424
<424=429,428,425
<425=427,426
<430=431
<431=435,432
<432=433
<433=434
<435=436
<436=438,437
<439=440
<440=444,441
<441=442
<442=443
<444=445
<445=447,446
<448=449
<449=451,450
<452=453
<453=458,457,454
<454=456,455
