>3	FunctionDef	TTFFont 
>4	ParameterList	 
>5	CompoundStatement	 
>6	ExpressionStatement	 
>7	AssignmentExpr	font = 0
>8	PrimaryExpression	0
>9	Identifier	font
>14	FunctionDef	TTFFont 
>15	ParameterList	 
>16	CompoundStatement	 
>17	IfStatement	if ( font )
>18	CompoundStatement	 
>19	ExpressionStatement	 
>20	AssignmentExpr	font = 0
>21	PrimaryExpression	0
>22	Identifier	font
>23	ExpressionStatement	 
>24	Identifier	font
>25	Statement	 
>26	Condition	 
>27	Identifier	font
>32	FunctionDef	TTFFont 
>33	ParameterList	 
>34	ReturnType	void
>35	CompoundStatement	 
>36	IfStatement	if ( font )
>37	CompoundStatement	 
>38	ExpressionStatement	 
>39	AssignmentExpr	font = 0
>40	PrimaryExpression	0
>41	Identifier	font
>42	ExpressionStatement	 
>43	Identifier	font
>44	Statement	 
>45	Condition	 
>46	Identifier	font
>51	FunctionDef	TTFFont 
>52	ParameterList	const std 
>53	Parameter	 
>54	Identifier	sz
>55	ParameterType	int
>56	Parameter	 
>57	Identifier	str
>58	ParameterType	const std 
>59	ReturnType	void
>60	CompoundStatement	 
>61	ExpressionStatement	 
>62	CallExpression	font -> FaceSize ( sz )
>63	ArgumentList	sz
>64	Argument	sz
>65	Identifier	sz
>66	Callee	font -> FaceSize
>67	PtrMemberAccess	font -> FaceSize
>68	Identifier	FaceSize
>69	Identifier	font
>70	ExpressionStatement	 
>71	AssignmentExpr	font = new FTGLTextureFont ( str . c_str ( ) )
>72	CallExpression	str . c_str ( )
>73	ArgumentList	 
>74	Callee	str . c_str
>75	MemberAccess	str . c_str
>76	Identifier	c_str
>77	Identifier	str
>78	Identifier	font
>86	FunctionDef	TTFFont 
>87	ParameterList	const unsigned char * data , unsigned long datalen , int sz
>88	Parameter	 
>89	Identifier	sz
>90	ParameterType	int
>91	Parameter	 
>92	Identifier	datalen
>93	ParameterType	unsigned long
>94	Parameter	 
>95	Identifier	data
>96	ParameterType	const unsigned char *
>97	ReturnType	void
>98	CompoundStatement	 
>99	ExpressionStatement	 
>100	CallExpression	font -> FaceSize ( sz )
>101	ArgumentList	sz
>102	Argument	sz
>103	Identifier	sz
>104	Callee	font -> FaceSize
>105	PtrMemberAccess	font -> FaceSize
>106	Identifier	FaceSize
>107	Identifier	font
>108	ExpressionStatement	 
>109	AssignmentExpr	font = new FTGLTextureFont ( data , datalen )
>110	Expression	data , datalen
>111	Identifier	datalen
>112	Identifier	data
>113	Identifier	font
>121	FunctionDef	TTFText 
>122	ParameterList	TTFFont * f
>123	Parameter	 
>124	Identifier	f
>125	ParameterType	TTFFont *
>126	CompoundStatement	 
>127	ExpressionStatement	 
>128	AssignmentExpr	shadow = false
>129	Identifier	false
>130	Identifier	shadow
>131	ExpressionStatement	 
>132	AssignmentExpr	width = 0
>133	PrimaryExpression	0
>134	Identifier	width
>135	ExpressionStatement	 
>136	AssignmentExpr	h = 0
>137	PrimaryExpression	0
>138	Identifier	h
>139	ExpressionStatement	 
>140	AssignmentExpr	hw = 0
>141	PrimaryExpression	0
>142	Identifier	hw
>143	ExpressionStatement	 
>144	AssignmentExpr	align = ALIGN_LEFT
>145	Identifier	ALIGN_LEFT
>146	Identifier	align
>158	FunctionDef	TTFText 
>159	ParameterList	const std 
>160	Parameter	 
>161	Identifier	txt
>162	ParameterType	const std 
>163	ReturnType	void
>164	CompoundStatement	 
>165	ExpressionStatement	 
>166	CallExpression	updateFormatting ( )
>167	ArgumentList	 
>168	Callee	updateFormatting
>169	Identifier	updateFormatting
>170	ExpressionStatement	 
>171	CallExpression	updateAlign ( )
>172	ArgumentList	 
>173	Callee	updateAlign
>174	Identifier	updateAlign
>175	ExpressionStatement	 
>176	AssignmentExpr	originalText = txt
>177	Identifier	txt
>178	Identifier	originalText
>184	FunctionDef	TTFText 
>185	ParameterList	Align align
>186	Parameter	 
>187	Identifier	align
>188	ParameterType	Align
>189	ReturnType	void
>190	CompoundStatement	 
>191	ExpressionStatement	 
>192	CallExpression	updateFormatting ( )
>193	ArgumentList	 
>194	Callee	updateFormatting
>195	Identifier	updateFormatting
>196	ExpressionStatement	 
>197	CallExpression	updateAlign ( )
>198	ArgumentList	 
>199	Callee	updateAlign
>200	Identifier	updateAlign
>201	ExpressionStatement	 
>202	AssignmentExpr	this -> align = align
>203	Identifier	align
>204	PtrMemberAccess	this -> align
>205	Identifier	align
>206	Identifier	this
>214	FunctionDef	TTFText 
>215	ParameterList	 
>216	ReturnType	void
>217	CompoundStatement	 
>218	IfStatement	if ( align == ALIGN_CENTER )
>219	ElseStatement	else
>220	CompoundStatement	 
>221	ExpressionStatement	 
>222	AssignmentExpr	hw = 0
>223	PrimaryExpression	0
>224	Identifier	hw
>225	CompoundStatement	 
>226	ExpressionStatement	 
>227	AssignmentExpr	h = ury - lly
>228	AdditiveExpression	ury - lly
>229	Identifier	lly
>230	Identifier	ury
>231	Identifier	h
>232	ExpressionStatement	 
>233	AssignmentExpr	hw = w / 2
>234	MultiplicativeExpression	w / 2
>235	PrimaryExpression	2
>236	Identifier	w
>237	Identifier	hw
>238	IdentifierDeclStatement	 
>239	IdentifierDecl	w = urx - llx
>240	AssignmentExpr	w = urx - llx
>241	AdditiveExpression	urx - llx
>242	Identifier	llx
>243	Identifier	urx
>244	Identifier	w
>245	Identifier	w
>246	IdentifierDeclType	float
>247	Condition	 
>248	EqualityExpression	align == ALIGN_CENTER
>249	Identifier	ALIGN_CENTER
>250	Identifier	align
>251	ExpressionStatement	 
>252	CallExpression	font -> font -> BBox ( originalText . c_str ( ) , llx , lly , llz , urx , ury , urz )
>253	ArgumentList	originalText . c_str ( )
>254	Argument	urz
>255	Identifier	urz
>256	Argument	ury
>257	Identifier	ury
>258	Argument	urx
>259	Identifier	urx
>260	Argument	llz
>261	Identifier	llz
>262	Argument	lly
>263	Identifier	lly
>264	Argument	llx
>265	Identifier	llx
>266	Argument	originalText . c_str ( )
>267	CallExpression	originalText . c_str ( )
>268	ArgumentList	 
>269	Callee	originalText . c_str
>270	MemberAccess	originalText . c_str
>271	Identifier	c_str
>272	Identifier	originalText
>273	Callee	font -> font -> BBox
>274	PtrMemberAccess	font -> font -> BBox
>275	Identifier	BBox
>276	PtrMemberAccess	font -> font
>277	Identifier	font
>278	Identifier	font
>279	IdentifierDeclStatement	 
>280	IdentifierDecl	urz
>281	Identifier	urz
>282	IdentifierDeclType	float
>283	IdentifierDecl	ury
>284	Identifier	ury
>285	IdentifierDeclType	float
>286	IdentifierDecl	urx
>287	Identifier	urx
>288	IdentifierDeclType	float
>289	IdentifierDecl	llz
>290	Identifier	llz
>291	IdentifierDeclType	float
>292	IdentifierDecl	lly
>293	Identifier	lly
>294	IdentifierDeclType	float
>295	IdentifierDecl	llx
>296	Identifier	llx
>297	IdentifierDeclType	float
>317	FunctionDef	TTFText 
>318	ParameterList	 
>319	ReturnType	float
>320	CompoundStatement	 
>321	ReturnStatement	 
>322	CallExpression	getStringWidth ( originalText )
>323	ArgumentList	originalText
>324	Argument	originalText
>325	Identifier	originalText
>326	Callee	getStringWidth
>327	Identifier	getStringWidth
>333	FunctionDef	TTFText 
>334	ParameterList	 
>335	ReturnType	float
>336	CompoundStatement	 
>337	ReturnStatement	 
>338	AdditiveExpression	ury - lly
>339	Identifier	lly
>340	Identifier	ury
>341	ExpressionStatement	 
>342	CallExpression	font -> font -> BBox ( originalText . c_str ( ) , llx , lly , llz , urx , ury , urz )
>343	ArgumentList	originalText . c_str ( )
>344	Argument	urz
>345	Identifier	urz
>346	Argument	ury
>347	Identifier	ury
>348	Argument	urx
>349	Identifier	urx
>350	Argument	llz
>351	Identifier	llz
>352	Argument	lly
>353	Identifier	lly
>354	Argument	llx
>355	Identifier	llx
>356	Argument	originalText . c_str ( )
>357	CallExpression	originalText . c_str ( )
>358	ArgumentList	 
>359	Callee	originalText . c_str
>360	MemberAccess	originalText . c_str
>361	Identifier	c_str
>362	Identifier	originalText
>363	Callee	font -> font -> BBox
>364	PtrMemberAccess	font -> font -> BBox
>365	Identifier	BBox
>366	PtrMemberAccess	font -> font
>367	Identifier	font
>368	Identifier	font
>369	IdentifierDeclStatement	 
>370	IdentifierDecl	urz
>371	Identifier	urz
>372	IdentifierDeclType	float
>373	IdentifierDecl	ury
>374	Identifier	ury
>375	IdentifierDeclType	float
>376	IdentifierDecl	urx
>377	Identifier	urx
>378	IdentifierDeclType	float
>379	IdentifierDecl	llz
>380	Identifier	llz
>381	IdentifierDeclType	float
>382	IdentifierDecl	lly
>383	Identifier	lly
>384	IdentifierDeclType	float
>385	IdentifierDecl	llx
>386	Identifier	llx
>387	IdentifierDeclType	float
>402	FunctionDef	TTFText 
>403	ParameterList	const std 
>404	Parameter	 
>405	Identifier	s
>406	ParameterType	const std 
>407	ReturnType	float
>408	CompoundStatement	 
>409	ReturnStatement	 
>410	AdditiveExpression	urx - llx
>411	Identifier	llx
>412	Identifier	urx
>413	ExpressionStatement	 
>414	CallExpression	font -> font -> BBox ( s . c_str ( ) , llx , lly , llz , urx , ury , urz )
>415	ArgumentList	s . c_str ( )
>416	Argument	urz
>417	Identifier	urz
>418	Argument	ury
>419	Identifier	ury
>420	Argument	urx
>421	Identifier	urx
>422	Argument	llz
>423	Identifier	llz
>424	Argument	lly
>425	Identifier	lly
>426	Argument	llx
>427	Identifier	llx
>428	Argument	s . c_str ( )
>429	CallExpression	s . c_str ( )
>430	ArgumentList	 
>431	Callee	s . c_str
>432	MemberAccess	s . c_str
>433	Identifier	c_str
>434	Identifier	s
>435	Callee	font -> font -> BBox
>436	PtrMemberAccess	font -> font -> BBox
>437	Identifier	BBox
>438	PtrMemberAccess	font -> font
>439	Identifier	font
>440	Identifier	font
>441	IdentifierDeclStatement	 
>442	IdentifierDecl	urz
>443	Identifier	urz
>444	IdentifierDeclType	float
>445	IdentifierDecl	ury
>446	Identifier	ury
>447	IdentifierDeclType	float
>448	IdentifierDecl	urx
>449	Identifier	urx
>450	IdentifierDeclType	float
>451	IdentifierDecl	llz
>452	Identifier	llz
>453	IdentifierDeclType	float
>454	IdentifierDecl	lly
>455	Identifier	lly
>456	IdentifierDeclType	float
>457	IdentifierDecl	llx
>458	Identifier	llx
>459	IdentifierDeclType	float
>474	FunctionDef	TTFText 
>475	ParameterList	 
>476	ReturnType	float
>477	CompoundStatement	 
>478	ReturnStatement	 
>479	MultiplicativeExpression	text . size ( ) * lineHeight
>480	Identifier	lineHeight
>481	CallExpression	text . size ( )
>482	ArgumentList	 
>483	Callee	text . size
>484	MemberAccess	text . size
>485	Identifier	size
>486	Identifier	text
>493	FunctionDef	TTFText 
>494	ParameterList	int width
>495	Parameter	 
>496	Identifier	width
>497	ParameterType	int
>498	ReturnType	void
>499	CompoundStatement	 
>500	ExpressionStatement	 
>501	CallExpression	updateFormatting ( )
>502	ArgumentList	 
>503	Callee	updateFormatting
>504	Identifier	updateFormatting
>505	ExpressionStatement	 
>506	CallExpression	updateAlign ( )
>507	ArgumentList	 
>508	Callee	updateAlign
>509	Identifier	updateAlign
>510	ExpressionStatement	 
>511	AssignmentExpr	this -> width = width
>512	Identifier	width
>513	PtrMemberAccess	this -> width
>514	Identifier	width
>515	Identifier	this
>523	FunctionDef	TTFText 
>524	ParameterList	 
>525	ReturnType	void
>526	CompoundStatement	 
>527	ExpressionStatement	 
>528	AssignmentExpr	lineHeight = font -> font -> LineHeight ( )
>529	CallExpression	font -> font -> LineHeight ( )
>530	ArgumentList	 
>531	Callee	font -> font -> LineHeight
>532	PtrMemberAccess	font -> font -> LineHeight
>533	Identifier	LineHeight
>534	PtrMemberAccess	font -> font
>535	Identifier	font
>536	Identifier	font
>537	Identifier	lineHeight
>538	IfStatement	if ( i == sz )
>539	CompoundStatement	 
>540	ExpressionStatement	 
>541	CallExpression	text . push_back ( originalText . substr ( start , i - start ) )
>542	ArgumentList	originalText . substr ( start , i - start )
>543	Argument	originalText . substr ( start , i - start )
>544	CallExpression	originalText . substr ( start , i - start )
>545	ArgumentList	start
>546	Argument	i - start
>547	AdditiveExpression	i - start
>548	Identifier	start
>549	Identifier	i
>550	Argument	start
>551	Identifier	start
>552	Callee	originalText . substr
>553	MemberAccess	originalText . substr
>554	Identifier	substr
>555	Identifier	originalText
>556	Callee	text . push_back
>557	MemberAccess	text . push_back
>558	Identifier	push_back
>559	Identifier	text
>560	Condition	 
>561	EqualityExpression	i == sz
>562	Identifier	sz
>563	Identifier	i
>564	ForStatement	for ( i = 0 ; i < sz ; i ++ )
>565	CompoundStatement	 
>566	IfStatement	if ( originalText [ i ] == '\n' )
>567	ElseStatement	else
>568	CompoundStatement	 
>569	IfStatement	if ( width != 0 && w >= width )
>570	CompoundStatement	 
>571	IfStatement	if ( lastSpace != - 1 )
>572	ElseStatement	else
>573	CompoundStatement	 
>574	ExpressionStatement	 
>575	CallExpression	text . push_back ( originalText . substr ( start , i - start ) )
>576	ArgumentList	originalText . substr ( start , i - start )
>577	Argument	originalText . substr ( start , i - start )
>578	CallExpression	originalText . substr ( start , i - start )
>579	ArgumentList	start
>580	Argument	i - start
>581	AdditiveExpression	i - start
>582	Identifier	start
>583	Identifier	i
>584	Argument	start
>585	Identifier	start
>586	Callee	originalText . substr
>587	MemberAccess	originalText . substr
>588	Identifier	substr
>589	Identifier	originalText
>590	Callee	text . push_back
>591	MemberAccess	text . push_back
>592	Identifier	push_back
>593	Identifier	text
>594	CompoundStatement	 
>595	ExpressionStatement	 
>596	AssignmentExpr	start = i
>597	Identifier	i
>598	Identifier	start
>599	ExpressionStatement	 
>600	AssignmentExpr	lastSpace = - 1
>601	UnaryOp	- 1
>602	PrimaryExpression	1
>603	UnaryOperator	-
>604	Identifier	lastSpace
>605	ExpressionStatement	 
>606	AssignmentExpr	i = lastSpace + 1
>607	AdditiveExpression	lastSpace + 1
>608	PrimaryExpression	1
>609	Identifier	lastSpace
>610	Identifier	i
>611	ExpressionStatement	 
>612	CallExpression	text . push_back ( originalText . substr ( start , lastSpace - start ) )
>613	ArgumentList	originalText . substr ( start , lastSpace - start )
>614	Argument	originalText . substr ( start , lastSpace - start )
>615	CallExpression	originalText . substr ( start , lastSpace - start )
>616	ArgumentList	start
>617	Argument	lastSpace - start
>618	AdditiveExpression	lastSpace - start
>619	Identifier	start
>620	Identifier	lastSpace
>621	Argument	start
>622	Identifier	start
>623	Callee	originalText . substr
>624	MemberAccess	originalText . substr
>625	Identifier	substr
>626	Identifier	originalText
>627	Callee	text . push_back
>628	MemberAccess	text . push_back
>629	Identifier	push_back
>630	Identifier	text
>631	Condition	 
>632	EqualityExpression	lastSpace != - 1
>633	UnaryOp	- 1
>634	PrimaryExpression	1
>635	UnaryOperator	-
>636	Identifier	lastSpace
>637	Condition	 
>638	AndExpression	width != 0 && w >= width
>639	RelationalExpression	w >= width
>640	Identifier	width
>641	Identifier	w
>642	EqualityExpression	width != 0
>643	PrimaryExpression	0
>644	Identifier	width
>645	IdentifierDeclStatement	 
>646	IdentifierDecl	w = urx - llx
>647	AssignmentExpr	w = urx - llx
>648	AdditiveExpression	urx - llx
>649	Identifier	llx
>650	Identifier	urx
>651	Identifier	w
>652	Identifier	w
>653	IdentifierDeclType	int
>654	ExpressionStatement	 
>655	CallExpression	font -> font -> BBox ( originalText . substr ( start , i - start ) . c_str ( ) , llx , lly , llz , urx , ury , urz )
>656	ArgumentList	originalText . substr ( start , i - start ) . c_str ( )
>657	Argument	urz
>658	Identifier	urz
>659	Argument	ury
>660	Identifier	ury
>661	Argument	urx
>662	Identifier	urx
>663	Argument	llz
>664	Identifier	llz
>665	Argument	lly
>666	Identifier	lly
>667	Argument	llx
>668	Identifier	llx
>669	Argument	originalText . substr ( start , i - start ) . c_str ( )
>670	CallExpression	originalText . substr ( start , i - start ) . c_str ( )
>671	ArgumentList	 
>672	Callee	originalText . substr ( start , i - start ) . c_str
>673	MemberAccess	originalText . substr ( start , i - start ) . c_str
>674	Identifier	c_str
>675	CallExpression	originalText . substr ( start , i - start )
>676	ArgumentList	start
>677	Argument	i - start
>678	AdditiveExpression	i - start
>679	Identifier	start
>680	Identifier	i
>681	Argument	start
>682	Identifier	start
>683	Callee	originalText . substr
>684	MemberAccess	originalText . substr
>685	Identifier	substr
>686	Identifier	originalText
>687	Callee	font -> font -> BBox
>688	PtrMemberAccess	font -> font -> BBox
>689	Identifier	BBox
>690	PtrMemberAccess	font -> font
>691	Identifier	font
>692	Identifier	font
>693	IdentifierDeclStatement	 
>694	IdentifierDecl	urz
>695	Identifier	urz
>696	IdentifierDeclType	float
>697	IdentifierDecl	ury
>698	Identifier	ury
>699	IdentifierDeclType	float
>700	IdentifierDecl	urx
>701	Identifier	urx
>702	IdentifierDeclType	float
>703	IdentifierDecl	llz
>704	Identifier	llz
>705	IdentifierDeclType	float
>706	IdentifierDecl	lly
>707	Identifier	lly
>708	IdentifierDeclType	float
>709	IdentifierDecl	llx
>710	Identifier	llx
>711	IdentifierDeclType	float
>712	IfStatement	if ( originalText [ i ] == ' ' )
>713	CompoundStatement	 
>714	ExpressionStatement	 
>715	AssignmentExpr	lastSpace = i
>716	Identifier	i
>717	Identifier	lastSpace
>718	Condition	 
>719	EqualityExpression	originalText [ i ] == ' '
>720	PrimaryExpression	' '
>721	ArrayIndexing	originalText [ i ]
>722	Identifier	i
>723	Identifier	originalText
>724	CompoundStatement	 
>725	ExpressionStatement	 
>726	AssignmentExpr	start = i + 1
>727	AdditiveExpression	i + 1
>728	PrimaryExpression	1
>729	Identifier	i
>730	Identifier	start
>731	ExpressionStatement	 
>732	CallExpression	text . push_back ( originalText . substr ( start , i - start ) )
>733	ArgumentList	originalText . substr ( start , i - start )
>734	Argument	originalText . substr ( start , i - start )
>735	CallExpression	originalText . substr ( start , i - start )
>736	ArgumentList	start
>737	Argument	i - start
>738	AdditiveExpression	i - start
>739	Identifier	start
>740	Identifier	i
>741	Argument	start
>742	Identifier	start
>743	Callee	originalText . substr
>744	MemberAccess	originalText . substr
>745	Identifier	substr
>746	Identifier	originalText
>747	Callee	text . push_back
>748	MemberAccess	text . push_back
>749	Identifier	push_back
>750	Identifier	text
>751	Condition	 
>752	EqualityExpression	originalText [ i ] == '\n'
>753	PrimaryExpression	'\n'
>754	ArrayIndexing	originalText [ i ]
>755	Identifier	i
>756	Identifier	originalText
>757	IncDecOp	 
>758	IncDec	++
>759	Identifier	i
>760	Condition	 
>761	RelationalExpression	i < sz
>762	Identifier	sz
>763	Identifier	i
>764	ForInit	 
>765	AssignmentExpr	i = 0
>766	PrimaryExpression	0
>767	Identifier	i
>768	IdentifierDeclStatement	 
>769	IdentifierDecl	sz = originalText . size ( )
>770	AssignmentExpr	sz = originalText . size ( )
>771	CallExpression	originalText . size ( )
>772	ArgumentList	 
>773	Callee	originalText . size
>774	MemberAccess	originalText . size
>775	Identifier	size
>776	Identifier	originalText
>777	Identifier	sz
>778	Identifier	sz
>779	IdentifierDeclType	int
>780	IdentifierDeclStatement	 
>781	IdentifierDecl	i = 0
>782	AssignmentExpr	i = 0
>783	PrimaryExpression	0
>784	Identifier	i
>785	Identifier	i
>786	IdentifierDeclType	int
>787	ExpressionStatement	 
>788	CallExpression	text . clear ( )
>789	ArgumentList	 
>790	Callee	text . clear
>791	MemberAccess	text . clear
>792	Identifier	clear
>793	Identifier	text
>794	IdentifierDeclStatement	 
>795	IdentifierDecl	lastSpace = - 1
>796	AssignmentExpr	lastSpace = - 1
>797	UnaryOp	- 1
>798	PrimaryExpression	1
>799	UnaryOperator	-
>800	Identifier	lastSpace
>801	Identifier	lastSpace
>802	IdentifierDeclType	int
>803	IdentifierDecl	start = 0
>804	AssignmentExpr	start = 0
>805	PrimaryExpression	0
>806	Identifier	start
>807	Identifier	start
>808	IdentifierDeclType	int
>838	FunctionDef	TTFText 
>839	ParameterList	float dt
>840	Parameter	 
>841	Identifier	dt
>842	ParameterType	float
>843	ReturnType	void
>844	CompoundStatement	 
>845	ExpressionStatement	 
>846	CallExpression	RenderObject 
>847	ArgumentList	dt
>848	Argument	dt
>849	Identifier	dt
>850	Callee	RenderObject 
>851	Identifier	RenderObject 
>856	FunctionDef	TTFText 
>857	ParameterList	 
>858	ReturnType	int
>859	CompoundStatement	 
>860	ReturnStatement	 
>861	Identifier	lineHeight
>866	FunctionDef	TTFText 
>867	ParameterList	const std 
>868	Parameter	 
>869	Identifier	label
>870	ParameterType	const std 
>871	ReturnType	int
>872	CompoundStatement	 
>873	ReturnStatement	 
>874	PrimaryExpression	0
>875	ForStatement	for ( int i = 0 ; i < text . size ( ) ; i ++ )
>876	CompoundStatement	 
>877	IfStatement	if ( text [ i ] . find ( label ) != std 
>878	CompoundStatement	 
>879	ReturnStatement	 
>880	Identifier	i
>881	Condition	 
>882	EqualityExpression	text [ i ] . find ( label ) != std 
>883	Identifier	std 
>884	CallExpression	text [ i ] . find ( label )
>885	ArgumentList	label
>886	Argument	label
>887	Identifier	label
>888	Callee	text [ i ] . find
>889	MemberAccess	text [ i ] . find
>890	Identifier	find
>891	ArrayIndexing	text [ i ]
>892	Identifier	i
>893	Identifier	text
>894	IncDecOp	 
>895	IncDec	++
>896	Identifier	i
>897	Condition	 
>898	RelationalExpression	i < text . size ( )
>899	CallExpression	text . size ( )
>900	ArgumentList	 
>901	Callee	text . size
>902	MemberAccess	text . size
>903	Identifier	size
>904	Identifier	text
>905	Identifier	i
>906	ForInit	 
>907	IdentifierDeclStatement	int i = 0 ;
>908	IdentifierDecl	i = 0
>909	AssignmentExpr	i = 0
>910	PrimaryExpression	0
>911	Identifier	i
>912	Identifier	i
>913	IdentifierDeclType	int
>925	FunctionDef	TTFText 
>926	ParameterList	 
>927	ReturnType	void
>928	CompoundStatement	 
>929	ExpressionStatement	 
>930	AssignmentExpr	RenderObject 
>931	PrimaryExpression	0
>932	Identifier	RenderObject 
>933	ExpressionStatement	 
>934	CallExpression	glBindTexture ( GL_TEXTURE_2D , 0 )
>935	ArgumentList	GL_TEXTURE_2D
>936	Argument	0
>937	PrimaryExpression	0
>938	Argument	GL_TEXTURE_2D
>939	Identifier	GL_TEXTURE_2D
>940	Callee	glBindTexture
>941	Identifier	glBindTexture
>942	ForStatement	for ( int i = 0 ; i < text . size ( ) ; i ++ )
>943	CompoundStatement	 
>944	ExpressionStatement	 
>945	CallExpression	glPopMatrix ( )
>946	ArgumentList	 
>947	Callee	glPopMatrix
>948	Identifier	glPopMatrix
>949	ExpressionStatement	 
>950	CallExpression	font -> font -> Render ( text [ i ] . c_str ( ) )
>951	ArgumentList	text [ i ] . c_str ( )
>952	Argument	text [ i ] . c_str ( )
>953	CallExpression	text [ i ] . c_str ( )
>954	ArgumentList	 
>955	Callee	text [ i ] . c_str
>956	MemberAccess	text [ i ] . c_str
>957	Identifier	c_str
>958	ArrayIndexing	text [ i ]
>959	Identifier	i
>960	Identifier	text
>961	Callee	font -> font -> Render
>962	PtrMemberAccess	font -> font -> Render
>963	Identifier	Render
>964	PtrMemberAccess	font -> font
>965	Identifier	font
>966	Identifier	font
>967	ExpressionStatement	 
>968	CallExpression	glTranslatef ( - hw , 0 + ( i * - lineHeight ) , 0 )
>969	ArgumentList	- hw
>970	Argument	0
>971	PrimaryExpression	0
>972	Argument	0 + ( i * - lineHeight )
>973	AdditiveExpression	0 + ( i * - lineHeight )
>974	MultiplicativeExpression	i * - lineHeight
>975	UnaryOp	- lineHeight
>976	Identifier	lineHeight
>977	UnaryOperator	-
>978	Identifier	i
>979	PrimaryExpression	0
>980	Argument	- hw
>981	UnaryOp	- hw
>982	Identifier	hw
>983	UnaryOperator	-
>984	Callee	glTranslatef
>985	Identifier	glTranslatef
>986	ExpressionStatement	 
>987	CallExpression	glScalef ( 1 , - 1 , 0 )
>988	ArgumentList	1
>989	Argument	0
>990	PrimaryExpression	0
>991	Argument	- 1
>992	UnaryOp	- 1
>993	PrimaryExpression	1
>994	UnaryOperator	-
>995	Argument	1
>996	PrimaryExpression	1
>997	Callee	glScalef
>998	Identifier	glScalef
>999	ExpressionStatement	 
>1000	CallExpression	glPushMatrix ( )
>1001	ArgumentList	 
>1002	Callee	glPushMatrix
>1003	Identifier	glPushMatrix
>1004	ExpressionStatement	 
>1005	CallExpression	glColor4f ( color . x , color . y , color . z , alpha . x * alphaMod )
>1006	ArgumentList	color . x
>1007	Argument	alpha . x * alphaMod
>1008	MultiplicativeExpression	alpha . x * alphaMod
>1009	Identifier	alphaMod
>1010	MemberAccess	alpha . x
>1011	Identifier	x
>1012	Identifier	alpha
>1013	Argument	color . z
>1014	MemberAccess	color . z
>1015	Identifier	z
>1016	Identifier	color
>1017	Argument	color . y
>1018	MemberAccess	color . y
>1019	Identifier	y
>1020	Identifier	color
>1021	Argument	color . x
>1022	MemberAccess	color . x
>1023	Identifier	x
>1024	Identifier	color
>1025	Callee	glColor4f
>1026	Identifier	glColor4f
>1027	IfStatement	if ( shadow )
>1028	CompoundStatement	 
>1029	ExpressionStatement	 
>1030	CallExpression	glPopMatrix ( )
>1031	ArgumentList	 
>1032	Callee	glPopMatrix
>1033	Identifier	glPopMatrix
>1034	ExpressionStatement	 
>1035	CallExpression	font -> font -> Render ( text [ i ] . c_str ( ) )
>1036	ArgumentList	text [ i ] . c_str ( )
>1037	Argument	text [ i ] . c_str ( )
>1038	CallExpression	text [ i ] . c_str ( )
>1039	ArgumentList	 
>1040	Callee	text [ i ] . c_str
>1041	MemberAccess	text [ i ] . c_str
>1042	Identifier	c_str
>1043	ArrayIndexing	text [ i ]
>1044	Identifier	i
>1045	Identifier	text
>1046	Callee	font -> font -> Render
>1047	PtrMemberAccess	font -> font -> Render
>1048	Identifier	Render
>1049	PtrMemberAccess	font -> font
>1050	Identifier	font
>1051	Identifier	font
>1052	ExpressionStatement	 
>1053	CallExpression	glTranslatef ( 1 - hw , - 1 + ( i * - lineHeight ) , 0 )
>1054	ArgumentList	1 - hw
>1055	Argument	0
>1056	PrimaryExpression	0
>1057	Argument	- 1 + ( i * - lineHeight )
>1058	AdditiveExpression	- 1 + ( i * - lineHeight )
>1059	MultiplicativeExpression	i * - lineHeight
>1060	UnaryOp	- lineHeight
>1061	Identifier	lineHeight
>1062	UnaryOperator	-
>1063	Identifier	i
>1064	UnaryOp	- 1
>1065	PrimaryExpression	1
>1066	UnaryOperator	-
>1067	Argument	1 - hw
>1068	AdditiveExpression	1 - hw
>1069	Identifier	hw
>1070	PrimaryExpression	1
>1071	Callee	glTranslatef
>1072	Identifier	glTranslatef
>1073	ExpressionStatement	 
>1074	CallExpression	glScalef ( 1 , - 1 , 0 )
>1075	ArgumentList	1
>1076	Argument	0
>1077	PrimaryExpression	0
>1078	Argument	- 1
>1079	UnaryOp	- 1
>1080	PrimaryExpression	1
>1081	UnaryOperator	-
>1082	Argument	1
>1083	PrimaryExpression	1
>1084	Callee	glScalef
>1085	Identifier	glScalef
>1086	ExpressionStatement	 
>1087	CallExpression	glPushMatrix ( )
>1088	ArgumentList	 
>1089	Callee	glPushMatrix
>1090	Identifier	glPushMatrix
>1091	ExpressionStatement	 
>1092	CallExpression	glColor4f ( 0 , 0 , 0 , 0.75f * alpha . x * alphaMod )
>1093	ArgumentList	0
>1094	Argument	0.75f * alpha . x * alphaMod
>1095	MultiplicativeExpression	0.75f * alpha . x * alphaMod
>1096	MultiplicativeExpression	alpha . x * alphaMod
>1097	Identifier	alphaMod
>1098	MemberAccess	alpha . x
>1099	Identifier	x
>1100	Identifier	alpha
>1101	PrimaryExpression	0.75f
>1102	Argument	0
>1103	PrimaryExpression	0
>1104	Argument	0
>1105	PrimaryExpression	0
>1106	Argument	0
>1107	PrimaryExpression	0
>1108	Callee	glColor4f
>1109	Identifier	glColor4f
>1110	Condition	 
>1111	Identifier	shadow
>1112	IncDecOp	 
>1113	IncDec	++
>1114	Identifier	i
>1115	Condition	 
>1116	RelationalExpression	i < text . size ( )
>1117	CallExpression	text . size ( )
>1118	ArgumentList	 
>1119	Callee	text . size
>1120	MemberAccess	text . size
>1121	Identifier	size
>1122	Identifier	text
>1123	Identifier	i
>1124	ForInit	 
>1125	IdentifierDeclStatement	int i = 0 ;
>1126	IdentifierDecl	i = 0
>1127	AssignmentExpr	i = 0
>1128	PrimaryExpression	0
>1129	Identifier	i
>1130	Identifier	i
>1131	IdentifierDeclType	int
<3=5,4
<5=6
<6=7
<7=9,8
<14=16,15
<16=17
<17=26,18
<18=25,23,19
<19=20
<20=22,21
<23=24
<26=27
<32=35,34,33
<35=36
<36=45,37
<37=44,42,38
<38=39
<39=41,40
<42=43
<45=46
<51=60,59,52
<52=56,53
<53=55,54
<56=58,57
<60=70,61
<61=62
<62=66,63
<63=64
<64=65
<66=67
<67=69,68
<70=71
<71=78,72
<72=74,73
<74=75
<75=77,76
<86=98,97,87
<87=94,91,88
<88=90,89
<91=93,92
<94=96,95
<98=108,99
<99=100
<100=104,101
<101=102
<102=103
<104=105
<105=107,106
<108=109
<109=113,110
<110=112,111
<121=126,122
<122=123
<123=125,124
<126=143,139,135,131,127
<127=128
<128=130,129
<131=132
<132=134,133
<135=136
<136=138,137
<139=140
<140=142,141
<143=144
<144=146,145
<158=164,163,159
<159=160
<160=162,161
<164=175,170,165
<165=166
<166=168,167
<168=169
<170=171
<171=173,172
<173=174
<175=176
<176=178,177
<184=190,189,185
<185=186
<186=188,187
<190=201,196,191
<191=192
<192=194,193
<194=195
<196=197
<197=199,198
<199=200
<201=202
<202=204,203
<204=206,205
<214=217,216,215
<217=279,251,218
<218=247,225,219
<219=220
<220=221
<221=222
<222=224,223
<225=238,232,226
<226=227
<227=231,228
<228=230,229
<232=233
<233=237,234
<234=236,235
<238=239
<239=246,245,240
<240=244,241
<241=243,242
<247=248
<248=250,249
<251=252
<252=273,253
<253=266,264,262,260,258,256,254
<254=255
<256=257
<258=259
<260=261
<262=263
<264=265
<266=267
<267=269,268
<269=270
<270=272,271
<273=274
<274=276,275
<276=278,277
<279=295,292,289,286,283,280
<280=282,281
<283=285,284
<286=288,287
<289=291,290
<292=294,293
<295=297,296
<317=320,319,318
<320=321
<321=322
<322=326,323
<323=324
<324=325
<326=327
<333=336,335,334
<336=369,341,337
<337=338
<338=340,339
<341=342
<342=363,343
<343=356,354,352,350,348,346,344
<344=345
<346=347
<348=349
<350=351
<352=353
<354=355
<356=357
<357=359,358
<359=360
<360=362,361
<363=364
<364=366,365
<366=368,367
<369=385,382,379,376,373,370
<370=372,371
<373=375,374
<376=378,377
<379=381,380
<382=384,383
<385=387,386
<402=408,407,403
<403=404
<404=406,405
<408=441,413,409
<409=410
<410=412,411
<413=414
<414=435,415
<415=428,426,424,422,420,418,416
<416=417
<418=419
<420=421
<422=423
<424=425
<426=427
<428=429
<429=431,430
<431=432
<432=434,433
<435=436
<436=438,437
<438=440,439
<441=457,454,451,448,445,442
<442=444,443
<445=447,446
<448=450,449
<451=453,452
<454=456,455
<457=459,458
<474=477,476,475
<477=478
<478=479
<479=481,480
<481=483,482
<483=484
<484=486,485
<493=499,498,494
<494=495
<495=497,496
<499=510,505,500
<500=501
<501=503,502
<503=504
<505=506
<506=508,507
<508=509
<510=511
<511=513,512
<513=515,514
<523=526,525,524
<526=794,787,780,768,564,538,527
<527=528
<528=537,529
<529=531,530
<531=532
<532=534,533
<534=536,535
<538=560,539
<539=540
<540=541
<541=556,542
<542=543
<543=544
<544=552,545
<545=550,546
<546=547
<547=549,548
<550=551
<552=553
<553=555,554
<556=557
<557=559,558
<560=561
<561=563,562
<564=764,760,757,565
<565=566
<566=751,724,567
<567=568
<568=712,693,654,645,569
<569=637,570
<570=571
<571=631,594,572
<572=573
<573=574
<574=575
<575=590,576
<576=577
<577=578
<578=586,579
<579=584,580
<580=581
<581=583,582
<584=585
<586=587
<587=589,588
<590=591
<591=593,592
<594=611,605,599,595
<595=596
<596=598,597
<599=600
<600=604,601
<601=603,602
<605=606
<606=610,607
<607=609,608
<611=612
<612=627,613
<613=614
<614=615
<615=623,616
<616=621,617
<617=618
<618=620,619
<621=622
<623=624
<624=626,625
<627=628
<628=630,629
<631=632
<632=636,633
<633=635,634
<637=638
<638=642,639
<639=641,640
<642=644,643
<645=646
<646=653,652,647
<647=651,648
<648=650,649
<654=655
<655=687,656
<656=669,667,665,663,661,659,657
<657=658
<659=660
<661=662
<663=664
<665=666
<667=668
<669=670
<670=672,671
<672=673
<673=675,674
<675=683,676
<676=681,677
<677=678
<678=680,679
<681=682
<683=684
<684=686,685
<687=688
<688=690,689
<690=692,691
<693=709,706,703,700,697,694
<694=696,695
<697=699,698
<700=702,701
<703=705,704
<706=708,707
<709=711,710
<712=718,713
<713=714
<714=715
<715=717,716
<718=719
<719=721,720
<721=723,722
<724=731,725
<725=726
<726=730,727
<727=729,728
<731=732
<732=747,733
<733=734
<734=735
<735=743,736
<736=741,737
<737=738
<738=740,739
<741=742
<743=744
<744=746,745
<747=748
<748=750,749
<751=752
<752=754,753
<754=756,755
<757=759,758
<760=761
<761=763,762
<764=765
<765=767,766
<768=769
<769=779,778,770
<770=777,771
<771=773,772
<773=774
<774=776,775
<780=781
<781=786,785,782
<782=784,783
<787=788
<788=790,789
<790=791
<791=793,792
<794=803,795
<795=802,801,796
<796=800,797
<797=799,798
<803=808,807,804
<804=806,805
<838=844,843,839
<839=840
<840=842,841
<844=845
<845=846
<846=850,847
<847=848
<848=849
<850=851
<856=859,858,857
<859=860
<860=861
<866=872,871,867
<867=868
<868=870,869
<872=875,873
<873=874
<875=906,897,894,876
<876=877
<877=881,878
<878=879
<879=880
<881=882
<882=884,883
<884=888,885
<885=886
<886=887
<888=889
<889=891,890
<891=893,892
<894=896,895
<897=898
<898=905,899
<899=901,900
<901=902
<902=904,903
<906=907
<907=908
<908=913,912,909
<909=911,910
<925=928,927,926
<928=942,933,929
<929=930
<930=932,931
<933=934
<934=940,935
<935=938,936
<936=937
<938=939
<940=941
<942=1124,1115,1112,943
<943=1027,1004,999,986,967,949,944
<944=945
<945=947,946
<947=948
<949=950
<950=961,951
<951=952
<952=953
<953=955,954
<955=956
<956=958,957
<958=960,959
<961=962
<962=964,963
<964=966,965
<967=968
<968=984,969
<969=980,972,970
<970=971
<972=973
<973=979,974
<974=978,975
<975=977,976
<980=981
<981=983,982
<984=985
<986=987
<987=997,988
<988=995,991,989
<989=990
<991=992
<992=994,993
<995=996
<997=998
<999=1000
<1000=1002,1001
<1002=1003
<1004=1005
<1005=1025,1006
<1006=1021,1017,1013,1007
<1007=1008
<1008=1010,1009
<1010=1012,1011
<1013=1014
<1014=1016,1015
<1017=1018
<1018=1020,1019
<1021=1022
<1022=1024,1023
<1025=1026
<1027=1110,1028
<1028=1091,1086,1073,1052,1034,1029
<1029=1030
<1030=1032,1031
<1032=1033
<1034=1035
<1035=1046,1036
<1036=1037
<1037=1038
<1038=1040,1039
<1040=1041
<1041=1043,1042
<1043=1045,1044
<1046=1047
<1047=1049,1048
<1049=1051,1050
<1052=1053
<1053=1071,1054
<1054=1067,1057,1055
<1055=1056
<1057=1058
<1058=1064,1059
<1059=1063,1060
<1060=1062,1061
<1064=1066,1065
<1067=1068
<1068=1070,1069
<1071=1072
<1073=1074
<1074=1084,1075
<1075=1082,1078,1076
<1076=1077
<1078=1079
<1079=1081,1080
<1082=1083
<1084=1085
<1086=1087
<1087=1089,1088
<1089=1090
<1091=1092
<1092=1108,1093
<1093=1106,1104,1102,1094
<1094=1095
<1095=1101,1096
<1096=1098,1097
<1098=1100,1099
<1102=1103
<1104=1105
<1106=1107
<1108=1109
<1110=1111
<1112=1114,1113
<1115=1116
<1116=1123,1117
<1117=1119,1118
<1119=1120
<1120=1122,1121
<1124=1125
<1125=1126
<1126=1131,1130,1127
<1127=1129,1128
