>9	FunctionDef	VizGeorefSpline2D 
>10	ParameterList	 
>11	ReturnType	void
>12	CompoundStatement	 
>13	ExpressionStatement	 
>14	AssignmentExpr	_max_nof_points = new_max - 3
>15	AdditiveExpression	new_max - 3
>16	PrimaryExpression	3
>17	Identifier	new_max
>18	Identifier	_max_nof_points
>19	IfStatement	if ( _max_nof_points == 0 )
>20	ElseStatement	else
>21	CompoundStatement	 
>22	ForStatement	for ( i = 0 ; i < VIZGEOREF_MAX_VARS ; i ++ )
>23	CompoundStatement	 
>24	ExpressionStatement	 
>25	AssignmentExpr	coef [ i ] = ( double * ) VSIRealloc ( coef [ i ] , sizeof ( double ) * new_max )
>26	CastExpression	( double * ) VSIRealloc ( coef [ i ] , sizeof ( double ) * new_max )
>27	CallExpression	VSIRealloc ( coef [ i ] , sizeof ( double ) * new_max )
>28	ArgumentList	coef [ i ]
>29	Argument	sizeof ( double ) * new_max
>30	MultiplicativeExpression	sizeof ( double ) * new_max
>31	Identifier	new_max
>32	SizeofExpr	sizeof ( double )
>33	SizeofOperand	double
>34	Sizeof	sizeof
>35	Argument	coef [ i ]
>36	ArrayIndexing	coef [ i ]
>37	Identifier	i
>38	Identifier	coef
>39	Callee	VSIRealloc
>40	Identifier	VSIRealloc
>41	CastTarget	double *
>42	ArrayIndexing	coef [ i ]
>43	Identifier	i
>44	Identifier	coef
>45	ExpressionStatement	 
>46	AssignmentExpr	rhs [ i ] = ( double * ) VSIRealloc ( rhs [ i ] , sizeof ( double ) * new_max )
>47	CastExpression	( double * ) VSIRealloc ( rhs [ i ] , sizeof ( double ) * new_max )
>48	CallExpression	VSIRealloc ( rhs [ i ] , sizeof ( double ) * new_max )
>49	ArgumentList	rhs [ i ]
>50	Argument	sizeof ( double ) * new_max
>51	MultiplicativeExpression	sizeof ( double ) * new_max
>52	Identifier	new_max
>53	SizeofExpr	sizeof ( double )
>54	SizeofOperand	double
>55	Sizeof	sizeof
>56	Argument	rhs [ i ]
>57	ArrayIndexing	rhs [ i ]
>58	Identifier	i
>59	Identifier	rhs
>60	Callee	VSIRealloc
>61	Identifier	VSIRealloc
>62	CastTarget	double *
>63	ArrayIndexing	rhs [ i ]
>64	Identifier	i
>65	Identifier	rhs
>66	IncDecOp	 
>67	IncDec	++
>68	Identifier	i
>69	Condition	 
>70	RelationalExpression	i < VIZGEOREF_MAX_VARS
>71	Identifier	VIZGEOREF_MAX_VARS
>72	Identifier	i
>73	ForInit	 
>74	AssignmentExpr	i = 0
>75	PrimaryExpression	0
>76	Identifier	i
>77	ExpressionStatement	 
>78	AssignmentExpr	index = ( int * ) VSIRealloc ( index , sizeof ( int ) * new_max )
>79	CastExpression	( int * ) VSIRealloc ( index , sizeof ( int ) * new_max )
>80	CallExpression	VSIRealloc ( index , sizeof ( int ) * new_max )
>81	ArgumentList	index
>82	Argument	sizeof ( int ) * new_max
>83	MultiplicativeExpression	sizeof ( int ) * new_max
>84	Identifier	new_max
>85	SizeofExpr	sizeof ( int )
>86	SizeofOperand	int
>87	Sizeof	sizeof
>88	Argument	index
>89	Identifier	index
>90	Callee	VSIRealloc
>91	Identifier	VSIRealloc
>92	CastTarget	int *
>93	Identifier	index
>94	ExpressionStatement	 
>95	AssignmentExpr	unused = ( int * ) VSIRealloc ( unused , sizeof ( int ) * new_max )
>96	CastExpression	( int * ) VSIRealloc ( unused , sizeof ( int ) * new_max )
>97	CallExpression	VSIRealloc ( unused , sizeof ( int ) * new_max )
>98	ArgumentList	unused
>99	Argument	sizeof ( int ) * new_max
>100	MultiplicativeExpression	sizeof ( int ) * new_max
>101	Identifier	new_max
>102	SizeofExpr	sizeof ( int )
>103	SizeofOperand	int
>104	Sizeof	sizeof
>105	Argument	unused
>106	Identifier	unused
>107	Callee	VSIRealloc
>108	Identifier	VSIRealloc
>109	CastTarget	int *
>110	Identifier	unused
>111	ExpressionStatement	 
>112	AssignmentExpr	u = ( double * ) VSIRealloc ( u , sizeof ( double ) * new_max )
>113	CastExpression	( double * ) VSIRealloc ( u , sizeof ( double ) * new_max )
>114	CallExpression	VSIRealloc ( u , sizeof ( double ) * new_max )
>115	ArgumentList	u
>116	Argument	sizeof ( double ) * new_max
>117	MultiplicativeExpression	sizeof ( double ) * new_max
>118	Identifier	new_max
>119	SizeofExpr	sizeof ( double )
>120	SizeofOperand	double
>121	Sizeof	sizeof
>122	Argument	u
>123	Identifier	u
>124	Callee	VSIRealloc
>125	Identifier	VSIRealloc
>126	CastTarget	double *
>127	Identifier	u
>128	ExpressionStatement	 
>129	AssignmentExpr	y = ( double * ) VSIRealloc ( y , sizeof ( double ) * new_max )
>130	CastExpression	( double * ) VSIRealloc ( y , sizeof ( double ) * new_max )
>131	CallExpression	VSIRealloc ( y , sizeof ( double ) * new_max )
>132	ArgumentList	y
>133	Argument	sizeof ( double ) * new_max
>134	MultiplicativeExpression	sizeof ( double ) * new_max
>135	Identifier	new_max
>136	SizeofExpr	sizeof ( double )
>137	SizeofOperand	double
>138	Sizeof	sizeof
>139	Argument	y
>140	Identifier	y
>141	Callee	VSIRealloc
>142	Identifier	VSIRealloc
>143	CastTarget	double *
>144	Identifier	y
>145	ExpressionStatement	 
>146	AssignmentExpr	x = ( double * ) VSIRealloc ( x , sizeof ( double ) * new_max )
>147	CastExpression	( double * ) VSIRealloc ( x , sizeof ( double ) * new_max )
>148	CallExpression	VSIRealloc ( x , sizeof ( double ) * new_max )
>149	ArgumentList	x
>150	Argument	sizeof ( double ) * new_max
>151	MultiplicativeExpression	sizeof ( double ) * new_max
>152	Identifier	new_max
>153	SizeofExpr	sizeof ( double )
>154	SizeofOperand	double
>155	Sizeof	sizeof
>156	Argument	x
>157	Identifier	x
>158	Callee	VSIRealloc
>159	Identifier	VSIRealloc
>160	CastTarget	double *
>161	Identifier	x
>162	CompoundStatement	 
>163	ForStatement	for ( i = 0 ; i < VIZGEOREF_MAX_VARS ; i ++ )
>164	CompoundStatement	 
>165	ExpressionStatement	 
>166	AssignmentExpr	coef [ i ] = ( double * ) VSICalloc ( sizeof ( double ) , new_max )
>167	CastExpression	( double * ) VSICalloc ( sizeof ( double ) , new_max )
>168	CallExpression	VSICalloc ( sizeof ( double ) , new_max )
>169	ArgumentList	sizeof ( double )
>170	Argument	new_max
>171	Identifier	new_max
>172	Argument	sizeof ( double )
>173	SizeofExpr	sizeof ( double )
>174	SizeofOperand	double
>175	Sizeof	sizeof
>176	Callee	VSICalloc
>177	Identifier	VSICalloc
>178	CastTarget	double *
>179	ArrayIndexing	coef [ i ]
>180	Identifier	i
>181	Identifier	coef
>182	ExpressionStatement	 
>183	AssignmentExpr	rhs [ i ] = ( double * ) VSICalloc ( sizeof ( double ) , new_max )
>184	CastExpression	( double * ) VSICalloc ( sizeof ( double ) , new_max )
>185	CallExpression	VSICalloc ( sizeof ( double ) , new_max )
>186	ArgumentList	sizeof ( double )
>187	Argument	new_max
>188	Identifier	new_max
>189	Argument	sizeof ( double )
>190	SizeofExpr	sizeof ( double )
>191	SizeofOperand	double
>192	Sizeof	sizeof
>193	Callee	VSICalloc
>194	Identifier	VSICalloc
>195	CastTarget	double *
>196	ArrayIndexing	rhs [ i ]
>197	Identifier	i
>198	Identifier	rhs
>199	IncDecOp	 
>200	IncDec	++
>201	Identifier	i
>202	Condition	 
>203	RelationalExpression	i < VIZGEOREF_MAX_VARS
>204	Identifier	VIZGEOREF_MAX_VARS
>205	Identifier	i
>206	ForInit	 
>207	AssignmentExpr	i = 0
>208	PrimaryExpression	0
>209	Identifier	i
>210	ExpressionStatement	 
>211	AssignmentExpr	index = ( int * ) VSIMalloc ( sizeof ( int ) * new_max )
>212	CastExpression	( int * ) VSIMalloc ( sizeof ( int ) * new_max )
>213	CallExpression	VSIMalloc ( sizeof ( int ) * new_max )
>214	ArgumentList	sizeof ( int ) * new_max
>215	Argument	sizeof ( int ) * new_max
>216	MultiplicativeExpression	sizeof ( int ) * new_max
>217	Identifier	new_max
>218	SizeofExpr	sizeof ( int )
>219	SizeofOperand	int
>220	Sizeof	sizeof
>221	Callee	VSIMalloc
>222	Identifier	VSIMalloc
>223	CastTarget	int *
>224	Identifier	index
>225	ExpressionStatement	 
>226	AssignmentExpr	unused = ( int * ) VSIMalloc ( sizeof ( int ) * new_max )
>227	CastExpression	( int * ) VSIMalloc ( sizeof ( int ) * new_max )
>228	CallExpression	VSIMalloc ( sizeof ( int ) * new_max )
>229	ArgumentList	sizeof ( int ) * new_max
>230	Argument	sizeof ( int ) * new_max
>231	MultiplicativeExpression	sizeof ( int ) * new_max
>232	Identifier	new_max
>233	SizeofExpr	sizeof ( int )
>234	SizeofOperand	int
>235	Sizeof	sizeof
>236	Callee	VSIMalloc
>237	Identifier	VSIMalloc
>238	CastTarget	int *
>239	Identifier	unused
>240	ExpressionStatement	 
>241	AssignmentExpr	u = ( double * ) VSIMalloc ( sizeof ( double ) * new_max )
>242	CastExpression	( double * ) VSIMalloc ( sizeof ( double ) * new_max )
>243	CallExpression	VSIMalloc ( sizeof ( double ) * new_max )
>244	ArgumentList	sizeof ( double ) * new_max
>245	Argument	sizeof ( double ) * new_max
>246	MultiplicativeExpression	sizeof ( double ) * new_max
>247	Identifier	new_max
>248	SizeofExpr	sizeof ( double )
>249	SizeofOperand	double
>250	Sizeof	sizeof
>251	Callee	VSIMalloc
>252	Identifier	VSIMalloc
>253	CastTarget	double *
>254	Identifier	u
>255	ExpressionStatement	 
>256	AssignmentExpr	y = ( double * ) VSIMalloc ( sizeof ( double ) * new_max )
>257	CastExpression	( double * ) VSIMalloc ( sizeof ( double ) * new_max )
>258	CallExpression	VSIMalloc ( sizeof ( double ) * new_max )
>259	ArgumentList	sizeof ( double ) * new_max
>260	Argument	sizeof ( double ) * new_max
>261	MultiplicativeExpression	sizeof ( double ) * new_max
>262	Identifier	new_max
>263	SizeofExpr	sizeof ( double )
>264	SizeofOperand	double
>265	Sizeof	sizeof
>266	Callee	VSIMalloc
>267	Identifier	VSIMalloc
>268	CastTarget	double *
>269	Identifier	y
>270	ExpressionStatement	 
>271	AssignmentExpr	x = ( double * ) VSIMalloc ( sizeof ( double ) * new_max )
>272	CastExpression	( double * ) VSIMalloc ( sizeof ( double ) * new_max )
>273	CallExpression	VSIMalloc ( sizeof ( double ) * new_max )
>274	ArgumentList	sizeof ( double ) * new_max
>275	Argument	sizeof ( double ) * new_max
>276	MultiplicativeExpression	sizeof ( double ) * new_max
>277	Identifier	new_max
>278	SizeofExpr	sizeof ( double )
>279	SizeofOperand	double
>280	Sizeof	sizeof
>281	Callee	VSIMalloc
>282	Identifier	VSIMalloc
>283	CastTarget	double *
>284	Identifier	x
>285	Condition	 
>286	EqualityExpression	_max_nof_points == 0
>287	PrimaryExpression	0
>288	Identifier	_max_nof_points
>289	IdentifierDeclStatement	 
>290	IdentifierDecl	i
>291	Identifier	i
>292	IdentifierDeclType	int
>293	IdentifierDeclStatement	 
>294	IdentifierDecl	new_max = _max_nof_points * 2 + 2 + 3
>295	AssignmentExpr	new_max = _max_nof_points * 2 + 2 + 3
>296	AdditiveExpression	_max_nof_points * 2 + 2 + 3
>297	AdditiveExpression	2 + 3
>298	PrimaryExpression	3
>299	PrimaryExpression	2
>300	MultiplicativeExpression	_max_nof_points * 2
>301	PrimaryExpression	2
>302	Identifier	_max_nof_points
>303	Identifier	new_max
>304	Identifier	new_max
>305	IdentifierDeclType	int
>326	FunctionDef	VizGeorefSpline2D 
>327	ParameterList	const double Px , const double Py , const double * Pvars
>328	Parameter	 
>329	Identifier	Pvars
>330	ParameterType	const double *
>331	Parameter	 
>332	Identifier	Py
>333	ParameterType	const double
>334	Parameter	 
>335	Identifier	Px
>336	ParameterType	const double
>337	ReturnType	int
>338	CompoundStatement	 
>339	ReturnStatement	 
>340	PrimaryExpression	1
>341	ExpressionStatement	 
>342	IncDecOp	_nof_points ++
>343	IncDec	++
>344	Identifier	_nof_points
>345	ForStatement	for ( int j = 0 ; j < _nof_vars ; j ++ )
>346	ExpressionStatement	 
>347	AssignmentExpr	rhs [ j ] [ i + 3 ] = Pvars [ j ]
>348	ArrayIndexing	Pvars [ j ]
>349	Identifier	j
>350	Identifier	Pvars
>351	ArrayIndexing	rhs [ j ] [ i + 3 ]
>352	AdditiveExpression	i + 3
>353	PrimaryExpression	3
>354	Identifier	i
>355	ArrayIndexing	rhs [ j ]
>356	Identifier	j
>357	Identifier	rhs
>358	IncDecOp	 
>359	IncDec	++
>360	Identifier	j
>361	Condition	 
>362	RelationalExpression	j < _nof_vars
>363	Identifier	_nof_vars
>364	Identifier	j
>365	ForInit	 
>366	IdentifierDeclStatement	int j = 0 ;
>367	IdentifierDecl	j = 0
>368	AssignmentExpr	j = 0
>369	PrimaryExpression	0
>370	Identifier	j
>371	Identifier	j
>372	IdentifierDeclType	int
>373	ExpressionStatement	 
>374	AssignmentExpr	y [ i ] = Py
>375	Identifier	Py
>376	ArrayIndexing	y [ i ]
>377	Identifier	i
>378	Identifier	y
>379	ExpressionStatement	 
>380	AssignmentExpr	x [ i ] = Px
>381	Identifier	Px
>382	ArrayIndexing	x [ i ]
>383	Identifier	i
>384	Identifier	x
>385	ExpressionStatement	 
>386	AssignmentExpr	i = _nof_points
>387	Identifier	_nof_points
>388	Identifier	i
>389	IfStatement	if ( _nof_points == _max_nof_points )
>390	ExpressionStatement	 
>391	CallExpression	grow_points ( )
>392	ArgumentList	 
>393	Callee	grow_points
>394	Identifier	grow_points
>395	Condition	 
>396	EqualityExpression	_nof_points == _max_nof_points
>397	Identifier	_max_nof_points
>398	Identifier	_nof_points
>399	IdentifierDeclStatement	 
>400	IdentifierDecl	i
>401	Identifier	i
>402	IdentifierDeclType	int
>403	ExpressionStatement	 
>404	AssignmentExpr	type = VIZ_GEOREF_SPLINE_POINT_WAS_ADDED
>405	Identifier	VIZ_GEOREF_SPLINE_POINT_WAS_ADDED
>406	Identifier	type
>431	FunctionDef	VizGeorefSpline2D 
>432	ParameterList	int index , double Px , double Py , double * Pvars
>433	Parameter	 
>434	Identifier	Pvars
>435	ParameterType	double *
>436	Parameter	 
>437	Identifier	Py
>438	ParameterType	double
>439	Parameter	 
>440	Identifier	Px
>441	ParameterType	double
>442	Parameter	 
>443	Identifier	index
>444	ParameterType	int
>445	ReturnType	bool
>446	CompoundStatement	 
>447	ReturnStatement	 
>448	Identifier	true
>449	IfStatement	if ( index < _nof_points )
>450	CompoundStatement	 
>451	ForStatement	for ( int j = 0 ; j < _nof_vars ; j ++ )
>452	ExpressionStatement	 
>453	AssignmentExpr	rhs [ j ] [ i + 3 ] = Pvars [ j ]
>454	ArrayIndexing	Pvars [ j ]
>455	Identifier	j
>456	Identifier	Pvars
>457	ArrayIndexing	rhs [ j ] [ i + 3 ]
>458	AdditiveExpression	i + 3
>459	PrimaryExpression	3
>460	Identifier	i
>461	ArrayIndexing	rhs [ j ]
>462	Identifier	j
>463	Identifier	rhs
>464	IncDecOp	 
>465	IncDec	++
>466	Identifier	j
>467	Condition	 
>468	RelationalExpression	j < _nof_vars
>469	Identifier	_nof_vars
>470	Identifier	j
>471	ForInit	 
>472	IdentifierDeclStatement	int j = 0 ;
>473	IdentifierDecl	j = 0
>474	AssignmentExpr	j = 0
>475	PrimaryExpression	0
>476	Identifier	j
>477	Identifier	j
>478	IdentifierDeclType	int
>479	ExpressionStatement	 
>480	AssignmentExpr	y [ i ] = Py
>481	Identifier	Py
>482	ArrayIndexing	y [ i ]
>483	Identifier	i
>484	Identifier	y
>485	ExpressionStatement	 
>486	AssignmentExpr	x [ i ] = Px
>487	Identifier	Px
>488	ArrayIndexing	x [ i ]
>489	Identifier	i
>490	Identifier	x
>491	IdentifierDeclStatement	 
>492	IdentifierDecl	i = index
>493	AssignmentExpr	i = index
>494	Identifier	index
>495	Identifier	index
>496	Identifier	i
>497	IdentifierDeclType	int
>498	Condition	 
>499	RelationalExpression	index < _nof_points
>500	Identifier	_nof_points
>501	Identifier	index
>525	FunctionDef	VizGeorefSpline2D 
>526	ParameterList	int index , double & outX , double & outY
>527	Parameter	 
>528	Identifier	outY
>529	ParameterType	double &
>530	Parameter	 
>531	Identifier	outX
>532	ParameterType	double &
>533	Parameter	 
>534	Identifier	index
>535	ParameterType	int
>536	ReturnType	bool
>537	CompoundStatement	 
>538	ReturnStatement	 
>539	Identifier	ok
>540	IfStatement	if ( index < _nof_points )
>541	ElseStatement	else
>542	CompoundStatement	 
>543	ExpressionStatement	 
>544	AssignmentExpr	outX = outY = 0.0f
>545	AssignmentExpr	outY = 0.0f
>546	PrimaryExpression	0.0f
>547	Identifier	outY
>548	Identifier	outX
>549	ExpressionStatement	 
>550	AssignmentExpr	ok = false
>551	Identifier	false
>552	Identifier	ok
>553	CompoundStatement	 
>554	ExpressionStatement	 
>555	AssignmentExpr	outY = y [ index ]
>556	ArrayIndexing	y [ index ]
>557	Identifier	index
>558	Identifier	y
>559	Identifier	outY
>560	ExpressionStatement	 
>561	AssignmentExpr	outX = x [ index ]
>562	ArrayIndexing	x [ index ]
>563	Identifier	index
>564	Identifier	x
>565	Identifier	outX
>566	ExpressionStatement	 
>567	AssignmentExpr	ok = true
>568	Identifier	true
>569	Identifier	ok
>570	Condition	 
>571	RelationalExpression	index < _nof_points
>572	Identifier	_nof_points
>573	Identifier	index
>574	IdentifierDeclStatement	 
>575	IdentifierDecl	ok
>576	Identifier	ok
>577	IdentifierDeclType	bool
>593	FunctionDef	VizGeorefSpline2D 
>594	ParameterList	const double Px , const double Py
>595	Parameter	 
>596	Identifier	Py
>597	ParameterType	const double
>598	Parameter	 
>599	Identifier	Px
>600	ParameterType	const double
>601	ReturnType	int
>602	CompoundStatement	 
>603	ReturnStatement	 
>604	PrimaryExpression	0
>605	ForStatement	for ( int i = 0 ; i < _nof_points ; i ++ )
>606	CompoundStatement	 
>607	IfStatement	if ( ( fabs ( Px - x [ i ] ) <= _tx ) && ( fabs ( Py - y [ i ] ) <= _ty ) )
>608	CompoundStatement	 
>609	ReturnStatement	 
>610	PrimaryExpression	1
>611	ExpressionStatement	 
>612	AssignmentExpr	type = VIZ_GEOREF_SPLINE_POINT_WAS_DELETED
>613	Identifier	VIZ_GEOREF_SPLINE_POINT_WAS_DELETED
>614	Identifier	type
>615	ExpressionStatement	 
>616	IncDecOp	_nof_points --
>617	IncDec	--
>618	Identifier	_nof_points
>619	ForStatement	for ( int j = i ; j < _nof_points - 1 ; j ++ )
>620	CompoundStatement	 
>621	ForStatement	for ( int k = 0 ; k < _nof_vars ; k ++ )
>622	ExpressionStatement	 
>623	AssignmentExpr	rhs [ k ] [ j + 3 ] = rhs [ k ] [ j + 3 + 1 ]
>624	ArrayIndexing	rhs [ k ] [ j + 3 + 1 ]
>625	AdditiveExpression	j + 3 + 1
>626	AdditiveExpression	3 + 1
>627	PrimaryExpression	1
>628	PrimaryExpression	3
>629	Identifier	j
>630	ArrayIndexing	rhs [ k ]
>631	Identifier	k
>632	Identifier	rhs
>633	ArrayIndexing	rhs [ k ] [ j + 3 ]
>634	AdditiveExpression	j + 3
>635	PrimaryExpression	3
>636	Identifier	j
>637	ArrayIndexing	rhs [ k ]
>638	Identifier	k
>639	Identifier	rhs
>640	IncDecOp	 
>641	IncDec	++
>642	Identifier	k
>643	Condition	 
>644	RelationalExpression	k < _nof_vars
>645	Identifier	_nof_vars
>646	Identifier	k
>647	ForInit	 
>648	IdentifierDeclStatement	int k = 0 ;
>649	IdentifierDecl	k = 0
>650	AssignmentExpr	k = 0
>651	PrimaryExpression	0
>652	Identifier	k
>653	Identifier	k
>654	IdentifierDeclType	int
>655	ExpressionStatement	 
>656	AssignmentExpr	y [ j ] = y [ j + 1 ]
>657	ArrayIndexing	y [ j + 1 ]
>658	AdditiveExpression	j + 1
>659	PrimaryExpression	1
>660	Identifier	j
>661	Identifier	y
>662	ArrayIndexing	y [ j ]
>663	Identifier	j
>664	Identifier	y
>665	ExpressionStatement	 
>666	AssignmentExpr	x [ j ] = x [ j + 1 ]
>667	ArrayIndexing	x [ j + 1 ]
>668	AdditiveExpression	j + 1
>669	PrimaryExpression	1
>670	Identifier	j
>671	Identifier	x
>672	ArrayIndexing	x [ j ]
>673	Identifier	j
>674	Identifier	x
>675	IncDecOp	 
>676	IncDec	++
>677	Identifier	j
>678	Condition	 
>679	RelationalExpression	j < _nof_points - 1
>680	AdditiveExpression	_nof_points - 1
>681	PrimaryExpression	1
>682	Identifier	_nof_points
>683	Identifier	j
>684	ForInit	 
>685	IdentifierDeclStatement	int j = i ;
>686	IdentifierDecl	j = i
>687	AssignmentExpr	j = i
>688	Identifier	i
>689	Identifier	i
>690	Identifier	j
>691	IdentifierDeclType	int
>692	Condition	 
>693	AndExpression	( fabs ( Px - x [ i ] ) <= _tx ) && ( fabs ( Py - y [ i ] ) <= _ty )
>694	RelationalExpression	fabs ( Py - y [ i ] ) <= _ty
>695	Identifier	_ty
>696	CallExpression	fabs ( Py - y [ i ] )
>697	ArgumentList	Py - y [ i ]
>698	Argument	Py - y [ i ]
>699	AdditiveExpression	Py - y [ i ]
>700	ArrayIndexing	y [ i ]
>701	Identifier	i
>702	Identifier	y
>703	Identifier	Py
>704	Callee	fabs
>705	Identifier	fabs
>706	RelationalExpression	fabs ( Px - x [ i ] ) <= _tx
>707	Identifier	_tx
>708	CallExpression	fabs ( Px - x [ i ] )
>709	ArgumentList	Px - x [ i ]
>710	Argument	Px - x [ i ]
>711	AdditiveExpression	Px - x [ i ]
>712	ArrayIndexing	x [ i ]
>713	Identifier	i
>714	Identifier	x
>715	Identifier	Px
>716	Callee	fabs
>717	Identifier	fabs
>718	IncDecOp	 
>719	IncDec	++
>720	Identifier	i
>721	Condition	 
>722	RelationalExpression	i < _nof_points
>723	Identifier	_nof_points
>724	Identifier	i
>725	ForInit	 
>726	IdentifierDeclStatement	int i = 0 ;
>727	IdentifierDecl	i = 0
>728	AssignmentExpr	i = 0
>729	PrimaryExpression	0
>730	Identifier	i
>731	Identifier	i
>732	IdentifierDeclType	int
>759	FunctionDef	VizGeorefSpline2D 
>760	ParameterList	 
>761	ReturnType	int
>762	CompoundStatement	 
>763	ReturnStatement	 
>764	PrimaryExpression	4
>765	ForStatement	for ( v = 0 ; v < _nof_vars ; v ++ )
>766	ForStatement	for ( r = 0 ; r < _nof_eqs ; r ++ )
>767	CompoundStatement	 
>768	ForStatement	for ( c = 0 ; c < _nof_eqs ; c ++ )
>769	ExpressionStatement	 
>770	AssignmentExpr	coef [ v ] [ r ] += Ainv ( r , c ) * rhs [ v ] [ c ]
>771	MultiplicativeExpression	Ainv ( r , c ) * rhs [ v ] [ c ]
>772	ArrayIndexing	rhs [ v ] [ c ]
>773	Identifier	c
>774	ArrayIndexing	rhs [ v ]
>775	Identifier	v
>776	Identifier	rhs
>777	CallExpression	Ainv ( r , c )
>778	ArgumentList	r
>779	Argument	c
>780	Identifier	c
>781	Argument	r
>782	Identifier	r
>783	Callee	Ainv
>784	Identifier	Ainv
>785	ArrayIndexing	coef [ v ] [ r ]
>786	Identifier	r
>787	ArrayIndexing	coef [ v ]
>788	Identifier	v
>789	Identifier	coef
>790	IncDecOp	 
>791	IncDec	++
>792	Identifier	c
>793	Condition	 
>794	RelationalExpression	c < _nof_eqs
>795	Identifier	_nof_eqs
>796	Identifier	c
>797	ForInit	 
>798	AssignmentExpr	c = 0
>799	PrimaryExpression	0
>800	Identifier	c
>801	ExpressionStatement	 
>802	AssignmentExpr	coef [ v ] [ r ] = 0.0
>803	PrimaryExpression	0.0
>804	ArrayIndexing	coef [ v ] [ r ]
>805	Identifier	r
>806	ArrayIndexing	coef [ v ]
>807	Identifier	v
>808	Identifier	coef
>809	IncDecOp	 
>810	IncDec	++
>811	Identifier	r
>812	Condition	 
>813	RelationalExpression	r < _nof_eqs
>814	Identifier	_nof_eqs
>815	Identifier	r
>816	ForInit	 
>817	AssignmentExpr	r = 0
>818	PrimaryExpression	0
>819	Identifier	r
>820	IncDecOp	 
>821	IncDec	++
>822	Identifier	v
>823	Condition	 
>824	RelationalExpression	v < _nof_vars
>825	Identifier	_nof_vars
>826	Identifier	v
>827	ForInit	 
>828	AssignmentExpr	v = 0
>829	PrimaryExpression	0
>830	Identifier	v
>831	IfStatement	if ( ! status )
>832	CompoundStatement	 
>833	ReturnStatement	 
>834	PrimaryExpression	0
>835	ExpressionStatement	 
>836	CallExpression	fprintf ( stderr , \" There is a problem to invert the interpolation matrix\n\" )
>837	ArgumentList	stderr
>838	Argument	\" There is a problem to invert the interpolation matrix\n\"
>839	PrimaryExpression	\" There is a problem to invert the interpolation matrix\n\"
>840	Argument	stderr
>841	Identifier	stderr
>842	Callee	fprintf
>843	Identifier	fprintf
>844	Condition	 
>845	UnaryOp	! status
>846	Identifier	status
>847	UnaryOperator	!
>848	IdentifierDeclStatement	 
>849	IdentifierDecl	status = matrixInvert ( _nof_eqs , _AA , _Ainv )
>850	AssignmentExpr	status = matrixInvert ( _nof_eqs , _AA , _Ainv )
>851	CallExpression	matrixInvert ( _nof_eqs , _AA , _Ainv )
>852	ArgumentList	_nof_eqs
>853	Argument	_Ainv
>854	Identifier	_Ainv
>855	Argument	_AA
>856	Identifier	_AA
>857	Argument	_nof_eqs
>858	Identifier	_nof_eqs
>859	Callee	matrixInvert
>860	Identifier	matrixInvert
>861	Identifier	status
>862	Identifier	status
>863	IdentifierDeclType	int
>864	ForStatement	for ( r = 0 ; r < _nof_eqs ; r ++ )
>865	CompoundStatement	 
>866	ExpressionStatement	 
>867	CallExpression	fprintf ( stderr , \"\n\" )
>868	ArgumentList	stderr
>869	Argument	\"\n\"
>870	PrimaryExpression	\"\n\"
>871	Argument	stderr
>872	Identifier	stderr
>873	Callee	fprintf
>874	Identifier	fprintf
>875	ForStatement	for ( c = 0 ; c < _nof_eqs ; c ++ )
>876	ExpressionStatement	 
>877	CallExpression	fprintf ( stderr , \"%f\" , A ( r , c ) )
>878	ArgumentList	stderr
>879	Argument	A ( r , c )
>880	CallExpression	A ( r , c )
>881	ArgumentList	r
>882	Argument	c
>883	Identifier	c
>884	Argument	r
>885	Identifier	r
>886	Callee	A
>887	Identifier	A
>888	Argument	\"%f\"
>889	PrimaryExpression	\"%f\"
>890	Argument	stderr
>891	Identifier	stderr
>892	Callee	fprintf
>893	Identifier	fprintf
>894	IncDecOp	 
>895	IncDec	++
>896	Identifier	c
>897	Condition	 
>898	RelationalExpression	c < _nof_eqs
>899	Identifier	_nof_eqs
>900	Identifier	c
>901	ForInit	 
>902	AssignmentExpr	c = 0
>903	PrimaryExpression	0
>904	Identifier	c
>905	IncDecOp	 
>906	IncDec	++
>907	Identifier	r
>908	Condition	 
>909	RelationalExpression	r < _nof_eqs
>910	Identifier	_nof_eqs
>911	Identifier	r
>912	ForInit	 
>913	AssignmentExpr	r = 0
>914	PrimaryExpression	0
>915	Identifier	r
>916	ForStatement	for ( r = 0 ; r < _nof_points ; r ++ )
>917	ForStatement	for ( c = r ; c < _nof_points ; c ++ )
>918	CompoundStatement	 
>919	IfStatement	if ( r != c )
>920	ExpressionStatement	 
>921	AssignmentExpr	A ( c + 3 , r + 3 ) = A ( r + 3 , c + 3 )
>922	CallExpression	A ( r + 3 , c + 3 )
>923	ArgumentList	r + 3
>924	Argument	c + 3
>925	AdditiveExpression	c + 3
>926	PrimaryExpression	3
>927	Identifier	c
>928	Argument	r + 3
>929	AdditiveExpression	r + 3
>930	PrimaryExpression	3
>931	Identifier	r
>932	Callee	A
>933	Identifier	A
>934	CallExpression	A ( c + 3 , r + 3 )
>935	ArgumentList	c + 3
>936	Argument	r + 3
>937	AdditiveExpression	r + 3
>938	PrimaryExpression	3
>939	Identifier	r
>940	Argument	c + 3
>941	AdditiveExpression	c + 3
>942	PrimaryExpression	3
>943	Identifier	c
>944	Callee	A
>945	Identifier	A
>946	Condition	 
>947	EqualityExpression	r != c
>948	Identifier	c
>949	Identifier	r
>950	ExpressionStatement	 
>951	AssignmentExpr	A ( r + 3 , c + 3 ) = base_func ( x [ r ] , y [ r ] , x [ c ] , y [ c ] )
>952	CallExpression	base_func ( x [ r ] , y [ r ] , x [ c ] , y [ c ] )
>953	ArgumentList	x [ r ]
>954	Argument	y [ c ]
>955	ArrayIndexing	y [ c ]
>956	Identifier	c
>957	Identifier	y
>958	Argument	x [ c ]
>959	ArrayIndexing	x [ c ]
>960	Identifier	c
>961	Identifier	x
>962	Argument	y [ r ]
>963	ArrayIndexing	y [ r ]
>964	Identifier	r
>965	Identifier	y
>966	Argument	x [ r ]
>967	ArrayIndexing	x [ r ]
>968	Identifier	r
>969	Identifier	x
>970	Callee	base_func
>971	Identifier	base_func
>972	CallExpression	A ( r + 3 , c + 3 )
>973	ArgumentList	r + 3
>974	Argument	c + 3
>975	AdditiveExpression	c + 3
>976	PrimaryExpression	3
>977	Identifier	c
>978	Argument	r + 3
>979	AdditiveExpression	r + 3
>980	PrimaryExpression	3
>981	Identifier	r
>982	Callee	A
>983	Identifier	A
>984	IncDecOp	 
>985	IncDec	++
>986	Identifier	c
>987	Condition	 
>988	RelationalExpression	c < _nof_points
>989	Identifier	_nof_points
>990	Identifier	c
>991	ForInit	 
>992	AssignmentExpr	c = r
>993	Identifier	r
>994	Identifier	c
>995	IncDecOp	 
>996	IncDec	++
>997	Identifier	r
>998	Condition	 
>999	RelationalExpression	r < _nof_points
>1000	Identifier	_nof_points
>1001	Identifier	r
>1002	ForInit	 
>1003	AssignmentExpr	r = 0
>1004	PrimaryExpression	0
>1005	Identifier	r
>1006	ForStatement	for ( c = 0 ; c < _nof_points ; c ++ )
>1007	CompoundStatement	 
>1008	ExpressionStatement	 
>1009	AssignmentExpr	A ( c + 3 , 2 ) = y [ c ]
>1010	ArrayIndexing	y [ c ]
>1011	Identifier	c
>1012	Identifier	y
>1013	CallExpression	A ( c + 3 , 2 )
>1014	ArgumentList	c + 3
>1015	Argument	2
>1016	PrimaryExpression	2
>1017	Argument	c + 3
>1018	AdditiveExpression	c + 3
>1019	PrimaryExpression	3
>1020	Identifier	c
>1021	Callee	A
>1022	Identifier	A
>1023	ExpressionStatement	 
>1024	AssignmentExpr	A ( c + 3 , 1 ) = x [ c ]
>1025	ArrayIndexing	x [ c ]
>1026	Identifier	c
>1027	Identifier	x
>1028	CallExpression	A ( c + 3 , 1 )
>1029	ArgumentList	c + 3
>1030	Argument	1
>1031	PrimaryExpression	1
>1032	Argument	c + 3
>1033	AdditiveExpression	c + 3
>1034	PrimaryExpression	3
>1035	Identifier	c
>1036	Callee	A
>1037	Identifier	A
>1038	ExpressionStatement	 
>1039	AssignmentExpr	A ( c + 3 , 0 ) = 1.0
>1040	PrimaryExpression	1.0
>1041	CallExpression	A ( c + 3 , 0 )
>1042	ArgumentList	c + 3
>1043	Argument	0
>1044	PrimaryExpression	0
>1045	Argument	c + 3
>1046	AdditiveExpression	c + 3
>1047	PrimaryExpression	3
>1048	Identifier	c
>1049	Callee	A
>1050	Identifier	A
>1051	ExpressionStatement	 
>1052	AssignmentExpr	A ( 2 , c + 3 ) = y [ c ]
>1053	ArrayIndexing	y [ c ]
>1054	Identifier	c
>1055	Identifier	y
>1056	CallExpression	A ( 2 , c + 3 )
>1057	ArgumentList	2
>1058	Argument	c + 3
>1059	AdditiveExpression	c + 3
>1060	PrimaryExpression	3
>1061	Identifier	c
>1062	Argument	2
>1063	PrimaryExpression	2
>1064	Callee	A
>1065	Identifier	A
>1066	ExpressionStatement	 
>1067	AssignmentExpr	A ( 1 , c + 3 ) = x [ c ]
>1068	ArrayIndexing	x [ c ]
>1069	Identifier	c
>1070	Identifier	x
>1071	CallExpression	A ( 1 , c + 3 )
>1072	ArgumentList	1
>1073	Argument	c + 3
>1074	AdditiveExpression	c + 3
>1075	PrimaryExpression	3
>1076	Identifier	c
>1077	Argument	1
>1078	PrimaryExpression	1
>1079	Callee	A
>1080	Identifier	A
>1081	ExpressionStatement	 
>1082	AssignmentExpr	A ( 0 , c + 3 ) = 1.0
>1083	PrimaryExpression	1.0
>1084	CallExpression	A ( 0 , c + 3 )
>1085	ArgumentList	0
>1086	Argument	c + 3
>1087	AdditiveExpression	c + 3
>1088	PrimaryExpression	3
>1089	Identifier	c
>1090	Argument	0
>1091	PrimaryExpression	0
>1092	Callee	A
>1093	Identifier	A
>1094	IncDecOp	 
>1095	IncDec	++
>1096	Identifier	c
>1097	Condition	 
>1098	RelationalExpression	c < _nof_points
>1099	Identifier	_nof_points
>1100	Identifier	c
>1101	ForInit	 
>1102	AssignmentExpr	c = 0
>1103	PrimaryExpression	0
>1104	Identifier	c
>1105	ForStatement	for ( r = 0 ; r < 3 ; r ++ )
>1106	ForStatement	for ( c = 0 ; c < 3 ; c ++ )
>1107	ExpressionStatement	 
>1108	AssignmentExpr	A ( r , c ) = 0.0
>1109	PrimaryExpression	0.0
>1110	CallExpression	A ( r , c )
>1111	ArgumentList	r
>1112	Argument	c
>1113	Identifier	c
>1114	Argument	r
>1115	Identifier	r
>1116	Callee	A
>1117	Identifier	A
>1118	IncDecOp	 
>1119	IncDec	++
>1120	Identifier	c
>1121	Condition	 
>1122	RelationalExpression	c < 3
>1123	PrimaryExpression	3
>1124	Identifier	c
>1125	ForInit	 
>1126	AssignmentExpr	c = 0
>1127	PrimaryExpression	0
>1128	Identifier	c
>1129	IncDecOp	 
>1130	IncDec	++
>1131	Identifier	r
>1132	Condition	 
>1133	RelationalExpression	r < 3
>1134	PrimaryExpression	3
>1135	Identifier	r
>1136	ForInit	 
>1137	AssignmentExpr	r = 0
>1138	PrimaryExpression	0
>1139	Identifier	r
>1140	IfStatement	if ( _AA == NULL || _Ainv == NULL )
>1141	CompoundStatement	 
>1142	ReturnStatement	 
>1143	PrimaryExpression	0
>1144	ExpressionStatement	 
>1145	CallExpression	fprintf ( stderr , \"Out-of-memory while allocating temporary arrays. Computation aborted.\n\" )
>1146	ArgumentList	stderr
>1147	Argument	\"Out-of-memory while allocating temporary arrays. Computation aborted.\n\"
>1148	PrimaryExpression	\"Out-of-memory while allocating temporary arrays. Computation aborted.\n\"
>1149	Argument	stderr
>1150	Identifier	stderr
>1151	Callee	fprintf
>1152	Identifier	fprintf
>1153	Condition	 
>1154	OrExpression	_AA == NULL || _Ainv == NULL
>1155	EqualityExpression	_Ainv == NULL
>1156	Identifier	NULL
>1157	Identifier	_Ainv
>1158	EqualityExpression	_AA == NULL
>1159	Identifier	NULL
>1160	Identifier	_AA
>1161	ExpressionStatement	 
>1162	AssignmentExpr	_Ainv = ( double * ) VSICalloc ( _nof_eqs * _nof_eqs , sizeof ( double ) )
>1163	CastExpression	( double * ) VSICalloc ( _nof_eqs * _nof_eqs , sizeof ( double ) )
>1164	CallExpression	VSICalloc ( _nof_eqs * _nof_eqs , sizeof ( double ) )
>1165	ArgumentList	_nof_eqs * _nof_eqs
>1166	Argument	sizeof ( double )
>1167	SizeofExpr	sizeof ( double )
>1168	SizeofOperand	double
>1169	Sizeof	sizeof
>1170	Argument	_nof_eqs * _nof_eqs
>1171	MultiplicativeExpression	_nof_eqs * _nof_eqs
>1172	Identifier	_nof_eqs
>1173	Identifier	_nof_eqs
>1174	Callee	VSICalloc
>1175	Identifier	VSICalloc
>1176	CastTarget	double *
>1177	Identifier	_Ainv
>1178	ExpressionStatement	 
>1179	AssignmentExpr	_AA = ( double * ) VSICalloc ( _nof_eqs * _nof_eqs , sizeof ( double ) )
>1180	CastExpression	( double * ) VSICalloc ( _nof_eqs * _nof_eqs , sizeof ( double ) )
>1181	CallExpression	VSICalloc ( _nof_eqs * _nof_eqs , sizeof ( double ) )
>1182	ArgumentList	_nof_eqs * _nof_eqs
>1183	Argument	sizeof ( double )
>1184	SizeofExpr	sizeof ( double )
>1185	SizeofOperand	double
>1186	Sizeof	sizeof
>1187	Argument	_nof_eqs * _nof_eqs
>1188	MultiplicativeExpression	_nof_eqs * _nof_eqs
>1189	Identifier	_nof_eqs
>1190	Identifier	_nof_eqs
>1191	Callee	VSICalloc
>1192	Identifier	VSICalloc
>1193	CastTarget	double *
>1194	Identifier	_AA
>1195	IfStatement	if ( _nof_eqs > INT_MAX / _nof_eqs )
>1196	CompoundStatement	 
>1197	ReturnStatement	 
>1198	PrimaryExpression	0
>1199	ExpressionStatement	 
>1200	CallExpression	fprintf ( stderr , \"Too many coefficients. Computation aborted.\n\" )
>1201	ArgumentList	stderr
>1202	Argument	\"Too many coefficients. Computation aborted.\n\"
>1203	PrimaryExpression	\"Too many coefficients. Computation aborted.\n\"
>1204	Argument	stderr
>1205	Identifier	stderr
>1206	Callee	fprintf
>1207	Identifier	fprintf
>1208	Condition	 
>1209	RelationalExpression	_nof_eqs > INT_MAX / _nof_eqs
>1210	MultiplicativeExpression	INT_MAX / _nof_eqs
>1211	Identifier	_nof_eqs
>1212	Identifier	INT_MAX
>1213	Identifier	_nof_eqs
>1214	ExpressionStatement	 
>1215	AssignmentExpr	_nof_eqs = _nof_points + 3
>1216	AdditiveExpression	_nof_points + 3
>1217	PrimaryExpression	3
>1218	Identifier	_nof_points
>1219	Identifier	_nof_eqs
>1220	IfStatement	if ( _Ainv )
>1221	ExpressionStatement	 
>1222	CallExpression	CPLFree ( _Ainv )
>1223	ArgumentList	_Ainv
>1224	Argument	_Ainv
>1225	Identifier	_Ainv
>1226	Callee	CPLFree
>1227	Identifier	CPLFree
>1228	Condition	 
>1229	Identifier	_Ainv
>1230	IfStatement	if ( _AA )
>1231	ExpressionStatement	 
>1232	CallExpression	CPLFree ( _AA )
>1233	ArgumentList	_AA
>1234	Argument	_AA
>1235	Identifier	_AA
>1236	Callee	CPLFree
>1237	Identifier	CPLFree
>1238	Condition	 
>1239	Identifier	_AA
>1240	ExpressionStatement	 
>1241	AssignmentExpr	type = VIZ_GEOREF_SPLINE_FULL
>1242	Identifier	VIZ_GEOREF_SPLINE_FULL
>1243	Identifier	type
>1244	IfStatement	if ( delx < 0.001 * dely || dely < 0.001 * delx || fabs ( SSxy * SSxy / ( SSxx * SSyy ) ) > 0.99 )
>1245	CompoundStatement	 
>1246	ReturnStatement	 
>1247	PrimaryExpression	3
>1248	ForStatement	for ( p = 0 ; p < _nof_points ; p ++ )
>1249	CompoundStatement	 
>1250	ExpressionStatement	 
>1251	AssignmentExpr	unused [ min_index ] = 0
>1252	PrimaryExpression	0
>1253	ArrayIndexing	unused [ min_index ]
>1254	Identifier	min_index
>1255	Identifier	unused
>1256	ExpressionStatement	 
>1257	AssignmentExpr	index [ p ] = min_index
>1258	Identifier	min_index
>1259	ArrayIndexing	index [ p ]
>1260	Identifier	p
>1261	Identifier	index
>1262	ForStatement	for ( p1 = 0 ; p1 < _nof_points ; p1 ++ )
>1263	CompoundStatement	 
>1264	IfStatement	if ( unused [ p1 ] )
>1265	CompoundStatement	 
>1266	IfStatement	if ( min_index < 0 || u [ p1 ] < min_u )
>1267	CompoundStatement	 
>1268	ExpressionStatement	 
>1269	AssignmentExpr	min_u = u [ p1 ]
>1270	ArrayIndexing	u [ p1 ]
>1271	Identifier	p1
>1272	Identifier	u
>1273	Identifier	min_u
>1274	ExpressionStatement	 
>1275	AssignmentExpr	min_index = p1
>1276	Identifier	p1
>1277	Identifier	min_index
>1278	Condition	 
>1279	OrExpression	min_index < 0 || u [ p1 ] < min_u
>1280	RelationalExpression	u [ p1 ] < min_u
>1281	Identifier	min_u
>1282	ArrayIndexing	u [ p1 ]
>1283	Identifier	p1
>1284	Identifier	u
>1285	RelationalExpression	min_index < 0
>1286	PrimaryExpression	0
>1287	Identifier	min_index
>1288	Condition	 
>1289	ArrayIndexing	unused [ p1 ]
>1290	Identifier	p1
>1291	Identifier	unused
>1292	IncDecOp	 
>1293	IncDec	++
>1294	Identifier	p1
>1295	Condition	 
>1296	RelationalExpression	p1 < _nof_points
>1297	Identifier	_nof_points
>1298	Identifier	p1
>1299	ForInit	 
>1300	AssignmentExpr	p1 = 0
>1301	PrimaryExpression	0
>1302	Identifier	p1
>1303	IdentifierDeclStatement	 
>1304	IdentifierDecl	min_u = 0
>1305	AssignmentExpr	min_u = 0
>1306	PrimaryExpression	0
>1307	Identifier	min_u
>1308	Identifier	min_u
>1309	IdentifierDeclType	double
>1310	IdentifierDeclStatement	 
>1311	IdentifierDecl	min_index = - 1
>1312	AssignmentExpr	min_index = - 1
>1313	UnaryOp	- 1
>1314	PrimaryExpression	1
>1315	UnaryOperator	-
>1316	Identifier	min_index
>1317	Identifier	min_index
>1318	IdentifierDeclType	int
>1319	IncDecOp	 
>1320	IncDec	++
>1321	Identifier	p
>1322	Condition	 
>1323	RelationalExpression	p < _nof_points
>1324	Identifier	_nof_points
>1325	Identifier	p
>1326	ForInit	 
>1327	AssignmentExpr	p = 0
>1328	PrimaryExpression	0
>1329	Identifier	p
>1330	ForStatement	for ( p = 0 ; p < _nof_points ; p ++ )
>1331	CompoundStatement	 
>1332	ExpressionStatement	 
>1333	AssignmentExpr	unused [ p ] = 1
>1334	PrimaryExpression	1
>1335	ArrayIndexing	unused [ p ]
>1336	Identifier	p
>1337	Identifier	unused
>1338	ExpressionStatement	 
>1339	AssignmentExpr	u [ p ] = _dx * dxp + _dy * dyp
>1340	AdditiveExpression	_dx * dxp + _dy * dyp
>1341	MultiplicativeExpression	_dy * dyp
>1342	Identifier	dyp
>1343	Identifier	_dy
>1344	MultiplicativeExpression	_dx * dxp
>1345	Identifier	dxp
>1346	Identifier	_dx
>1347	ArrayIndexing	u [ p ]
>1348	Identifier	p
>1349	Identifier	u
>1350	IdentifierDeclStatement	 
>1351	IdentifierDecl	dyp = y [ p ] - y [ 0 ]
>1352	AssignmentExpr	dyp = y [ p ] - y [ 0 ]
>1353	AdditiveExpression	y [ p ] - y [ 0 ]
>1354	ArrayIndexing	y [ 0 ]
>1355	PrimaryExpression	0
>1356	Identifier	y
>1357	ArrayIndexing	y [ p ]
>1358	Identifier	p
>1359	Identifier	y
>1360	Identifier	dyp
>1361	Identifier	dyp
>1362	IdentifierDeclType	double
>1363	IdentifierDeclStatement	 
>1364	IdentifierDecl	dxp = x [ p ] - x [ 0 ]
>1365	AssignmentExpr	dxp = x [ p ] - x [ 0 ]
>1366	AdditiveExpression	x [ p ] - x [ 0 ]
>1367	ArrayIndexing	x [ 0 ]
>1368	PrimaryExpression	0
>1369	Identifier	x
>1370	ArrayIndexing	x [ p ]
>1371	Identifier	p
>1372	Identifier	x
>1373	Identifier	dxp
>1374	Identifier	dxp
>1375	IdentifierDeclType	double
>1376	IncDecOp	 
>1377	IncDec	++
>1378	Identifier	p
>1379	Condition	 
>1380	RelationalExpression	p < _nof_points
>1381	Identifier	_nof_points
>1382	Identifier	p
>1383	ForInit	 
>1384	AssignmentExpr	p = 0
>1385	PrimaryExpression	0
>1386	Identifier	p
>1387	ExpressionStatement	 
>1388	AssignmentExpr	_dy *= fact
>1389	Identifier	fact
>1390	Identifier	_dy
>1391	ExpressionStatement	 
>1392	AssignmentExpr	_dx *= fact
>1393	Identifier	fact
>1394	Identifier	_dx
>1395	IdentifierDeclStatement	 
>1396	IdentifierDecl	fact = 1.0 / sqrt ( _dx * _dx + _dy * _dy )
>1397	AssignmentExpr	fact = 1.0 / sqrt ( _dx * _dx + _dy * _dy )
>1398	MultiplicativeExpression	1.0 / sqrt ( _dx * _dx + _dy * _dy )
>1399	CallExpression	sqrt ( _dx * _dx + _dy * _dy )
>1400	ArgumentList	_dx * _dx + _dy * _dy
>1401	Argument	_dx * _dx + _dy * _dy
>1402	AdditiveExpression	_dx * _dx + _dy * _dy
>1403	MultiplicativeExpression	_dy * _dy
>1404	Identifier	_dy
>1405	Identifier	_dy
>1406	MultiplicativeExpression	_dx * _dx
>1407	Identifier	_dx
>1408	Identifier	_dx
>1409	Callee	sqrt
>1410	Identifier	sqrt
>1411	PrimaryExpression	1.0
>1412	Identifier	fact
>1413	Identifier	fact
>1414	IdentifierDeclType	double
>1415	ExpressionStatement	 
>1416	AssignmentExpr	_dy = _nof_points * sumy2 - sumy * sumy
>1417	AdditiveExpression	_nof_points * sumy2 - sumy * sumy
>1418	MultiplicativeExpression	sumy * sumy
>1419	Identifier	sumy
>1420	Identifier	sumy
>1421	MultiplicativeExpression	_nof_points * sumy2
>1422	Identifier	sumy2
>1423	Identifier	_nof_points
>1424	Identifier	_dy
>1425	ExpressionStatement	 
>1426	AssignmentExpr	_dx = _nof_points * sumx2 - sumx * sumx
>1427	AdditiveExpression	_nof_points * sumx2 - sumx * sumx
>1428	MultiplicativeExpression	sumx * sumx
>1429	Identifier	sumx
>1430	Identifier	sumx
>1431	MultiplicativeExpression	_nof_points * sumx2
>1432	Identifier	sumx2
>1433	Identifier	_nof_points
>1434	Identifier	_dx
>1435	ExpressionStatement	 
>1436	AssignmentExpr	type = VIZ_GEOREF_SPLINE_ONE_DIMENSIONAL
>1437	Identifier	VIZ_GEOREF_SPLINE_ONE_DIMENSIONAL
>1438	Identifier	type
>1439	IdentifierDeclStatement	 
>1440	IdentifierDecl	p1
>1441	Identifier	p1
>1442	IdentifierDeclType	int
>1443	Condition	 
>1444	OrExpression	delx < 0.001 * dely || dely < 0.001 * delx || fabs ( SSxy * SSxy / ( SSxx * SSyy ) ) > 0.99
>1445	OrExpression	dely < 0.001 * delx || fabs ( SSxy * SSxy / ( SSxx * SSyy ) ) > 0.99
>1446	RelationalExpression	fabs ( SSxy * SSxy / ( SSxx * SSyy ) ) > 0.99
>1447	PrimaryExpression	0.99
>1448	CallExpression	fabs ( SSxy * SSxy / ( SSxx * SSyy ) )
>1449	ArgumentList	SSxy * SSxy / ( SSxx * SSyy )
>1450	Argument	SSxy * SSxy / ( SSxx * SSyy )
>1451	MultiplicativeExpression	SSxy * SSxy / ( SSxx * SSyy )
>1452	MultiplicativeExpression	SSxy / ( SSxx * SSyy )
>1453	MultiplicativeExpression	SSxx * SSyy
>1454	Identifier	SSyy
>1455	Identifier	SSxx
>1456	Identifier	SSxy
>1457	Identifier	SSxy
>1458	Callee	fabs
>1459	Identifier	fabs
>1460	RelationalExpression	dely < 0.001 * delx
>1461	MultiplicativeExpression	0.001 * delx
>1462	Identifier	delx
>1463	PrimaryExpression	0.001
>1464	Identifier	dely
>1465	RelationalExpression	delx < 0.001 * dely
>1466	MultiplicativeExpression	0.001 * dely
>1467	Identifier	dely
>1468	PrimaryExpression	0.001
>1469	Identifier	delx
>1470	ExpressionStatement	 
>1471	AssignmentExpr	SSxy = sumxy - sumx * sumy / _nof_points
>1472	AdditiveExpression	sumxy - sumx * sumy / _nof_points
>1473	MultiplicativeExpression	sumx * sumy / _nof_points
>1474	MultiplicativeExpression	sumy / _nof_points
>1475	Identifier	_nof_points
>1476	Identifier	sumy
>1477	Identifier	sumx
>1478	Identifier	sumxy
>1479	Identifier	SSxy
>1480	ExpressionStatement	 
>1481	AssignmentExpr	SSyy = sumy2 - sumy * sumy / _nof_points
>1482	AdditiveExpression	sumy2 - sumy * sumy / _nof_points
>1483	MultiplicativeExpression	sumy * sumy / _nof_points
>1484	MultiplicativeExpression	sumy / _nof_points
>1485	Identifier	_nof_points
>1486	Identifier	sumy
>1487	Identifier	sumy
>1488	Identifier	sumy2
>1489	Identifier	SSyy
>1490	ExpressionStatement	 
>1491	AssignmentExpr	SSxx = sumx2 - sumx * sumx / _nof_points
>1492	AdditiveExpression	sumx2 - sumx * sumx / _nof_points
>1493	MultiplicativeExpression	sumx * sumx / _nof_points
>1494	MultiplicativeExpression	sumx / _nof_points
>1495	Identifier	_nof_points
>1496	Identifier	sumx
>1497	Identifier	sumx
>1498	Identifier	sumx2
>1499	Identifier	SSxx
>1500	ExpressionStatement	 
>1501	AssignmentExpr	dely = ymax - ymin
>1502	AdditiveExpression	ymax - ymin
>1503	Identifier	ymin
>1504	Identifier	ymax
>1505	Identifier	dely
>1506	ExpressionStatement	 
>1507	AssignmentExpr	delx = xmax - xmin
>1508	AdditiveExpression	xmax - xmin
>1509	Identifier	xmin
>1510	Identifier	xmax
>1511	Identifier	delx
>1512	ForStatement	for ( p = 0 ; p < _nof_points ; p ++ )
>1513	CompoundStatement	 
>1514	ExpressionStatement	 
>1515	AssignmentExpr	sumxy += xx * yy
>1516	MultiplicativeExpression	xx * yy
>1517	Identifier	yy
>1518	Identifier	xx
>1519	Identifier	sumxy
>1520	ExpressionStatement	 
>1521	AssignmentExpr	sumy2 += yy * yy
>1522	MultiplicativeExpression	yy * yy
>1523	Identifier	yy
>1524	Identifier	yy
>1525	Identifier	sumy2
>1526	ExpressionStatement	 
>1527	AssignmentExpr	sumy += yy
>1528	Identifier	yy
>1529	Identifier	sumy
>1530	ExpressionStatement	 
>1531	AssignmentExpr	sumx2 += xx * xx
>1532	MultiplicativeExpression	xx * xx
>1533	Identifier	xx
>1534	Identifier	xx
>1535	Identifier	sumx2
>1536	ExpressionStatement	 
>1537	AssignmentExpr	sumx += xx
>1538	Identifier	xx
>1539	Identifier	sumx
>1540	ExpressionStatement	 
>1541	AssignmentExpr	ymin = MIN ( ymin , yy )
>1542	CallExpression	MIN ( ymin , yy )
>1543	ArgumentList	ymin
>1544	Argument	yy
>1545	Identifier	yy
>1546	Argument	ymin
>1547	Identifier	ymin
>1548	Callee	MIN
>1549	Identifier	MIN
>1550	Identifier	ymin
>1551	ExpressionStatement	 
>1552	AssignmentExpr	ymax = MAX ( ymax , yy )
>1553	CallExpression	MAX ( ymax , yy )
>1554	ArgumentList	ymax
>1555	Argument	yy
>1556	Identifier	yy
>1557	Argument	ymax
>1558	Identifier	ymax
>1559	Callee	MAX
>1560	Identifier	MAX
>1561	Identifier	ymax
>1562	ExpressionStatement	 
>1563	AssignmentExpr	xmin = MIN ( xmin , xx )
>1564	CallExpression	MIN ( xmin , xx )
>1565	ArgumentList	xmin
>1566	Argument	xx
>1567	Identifier	xx
>1568	Argument	xmin
>1569	Identifier	xmin
>1570	Callee	MIN
>1571	Identifier	MIN
>1572	Identifier	xmin
>1573	ExpressionStatement	 
>1574	AssignmentExpr	xmax = MAX ( xmax , xx )
>1575	CallExpression	MAX ( xmax , xx )
>1576	ArgumentList	xmax
>1577	Argument	xx
>1578	Identifier	xx
>1579	Argument	xmax
>1580	Identifier	xmax
>1581	Callee	MAX
>1582	Identifier	MAX
>1583	Identifier	xmax
>1584	ExpressionStatement	 
>1585	AssignmentExpr	yy = y [ p ]
>1586	ArrayIndexing	y [ p ]
>1587	Identifier	p
>1588	Identifier	y
>1589	Identifier	yy
>1590	ExpressionStatement	 
>1591	AssignmentExpr	xx = x [ p ]
>1592	ArrayIndexing	x [ p ]
>1593	Identifier	p
>1594	Identifier	x
>1595	Identifier	xx
>1596	IncDecOp	 
>1597	IncDec	++
>1598	Identifier	p
>1599	Condition	 
>1600	RelationalExpression	p < _nof_points
>1601	Identifier	_nof_points
>1602	Identifier	p
>1603	ForInit	 
>1604	AssignmentExpr	p = 0
>1605	PrimaryExpression	0
>1606	Identifier	p
>1607	IdentifierDeclStatement	 
>1608	IdentifierDecl	SSxy
>1609	Identifier	SSxy
>1610	IdentifierDeclType	double
>1611	IdentifierDecl	SSyy
>1612	Identifier	SSyy
>1613	IdentifierDeclType	double
>1614	IdentifierDecl	SSxx
>1615	Identifier	SSxx
>1616	IdentifierDeclType	double
>1617	IdentifierDeclStatement	 
>1618	IdentifierDecl	sumxy = 0.0f
>1619	AssignmentExpr	sumxy = 0.0f
>1620	PrimaryExpression	0.0f
>1621	Identifier	sumxy
>1622	Identifier	sumxy
>1623	IdentifierDeclType	double
>1624	IdentifierDecl	sumy2 = 0.0f
>1625	AssignmentExpr	sumy2 = 0.0f
>1626	PrimaryExpression	0.0f
>1627	Identifier	sumy2
>1628	Identifier	sumy2
>1629	IdentifierDeclType	double
>1630	IdentifierDecl	sumx2 = 0.0f
>1631	AssignmentExpr	sumx2 = 0.0f
>1632	PrimaryExpression	0.0f
>1633	Identifier	sumx2
>1634	Identifier	sumx2
>1635	IdentifierDeclType	double
>1636	IdentifierDecl	sumy = 0.0f
>1637	AssignmentExpr	sumy = 0.0f
>1638	PrimaryExpression	0.0f
>1639	Identifier	sumy
>1640	Identifier	sumy
>1641	IdentifierDeclType	double
>1642	IdentifierDecl	sumx = 0.0f
>1643	AssignmentExpr	sumx = 0.0f
>1644	PrimaryExpression	0.0f
>1645	Identifier	sumx
>1646	Identifier	sumx
>1647	IdentifierDeclType	double
>1648	IdentifierDeclStatement	 
>1649	IdentifierDecl	yy
>1650	Identifier	yy
>1651	IdentifierDeclType	double
>1652	IdentifierDecl	xx
>1653	Identifier	xx
>1654	IdentifierDeclType	double
>1655	IdentifierDeclStatement	 
>1656	IdentifierDecl	dely
>1657	Identifier	dely
>1658	IdentifierDeclType	double
>1659	IdentifierDecl	delx
>1660	Identifier	delx
>1661	IdentifierDeclType	double
>1662	IdentifierDeclStatement	 
>1663	IdentifierDecl	ymin = y [ 0 ]
>1664	AssignmentExpr	ymin = y [ 0 ]
>1665	ArrayIndexing	y [ 0 ]
>1666	PrimaryExpression	0
>1667	Identifier	y
>1668	Identifier	ymin
>1669	Identifier	ymin
>1670	IdentifierDeclType	double
>1671	IdentifierDecl	ymax = y [ 0 ]
>1672	AssignmentExpr	ymax = y [ 0 ]
>1673	ArrayIndexing	y [ 0 ]
>1674	PrimaryExpression	0
>1675	Identifier	y
>1676	Identifier	ymax
>1677	Identifier	ymax
>1678	IdentifierDeclType	double
>1679	IdentifierDecl	xmin = x [ 0 ]
>1680	AssignmentExpr	xmin = x [ 0 ]
>1681	ArrayIndexing	x [ 0 ]
>1682	PrimaryExpression	0
>1683	Identifier	x
>1684	Identifier	xmin
>1685	Identifier	xmin
>1686	IdentifierDeclType	double
>1687	IdentifierDecl	xmax = x [ 0 ]
>1688	AssignmentExpr	xmax = x [ 0 ]
>1689	ArrayIndexing	x [ 0 ]
>1690	PrimaryExpression	0
>1691	Identifier	x
>1692	Identifier	xmax
>1693	Identifier	xmax
>1694	IdentifierDeclType	double
>1695	IfStatement	if ( _nof_points == 2 )
>1696	CompoundStatement	 
>1697	ReturnStatement	 
>1698	PrimaryExpression	2
>1699	ExpressionStatement	 
>1700	AssignmentExpr	type = VIZ_GEOREF_SPLINE_TWO_POINTS
>1701	Identifier	VIZ_GEOREF_SPLINE_TWO_POINTS
>1702	Identifier	type
>1703	ExpressionStatement	 
>1704	AssignmentExpr	_dy *= fact
>1705	Identifier	fact
>1706	Identifier	_dy
>1707	ExpressionStatement	 
>1708	AssignmentExpr	_dx *= fact
>1709	Identifier	fact
>1710	Identifier	_dx
>1711	IdentifierDeclStatement	 
>1712	IdentifierDecl	fact = 1.0 / ( _dx * _dx + _dy * _dy )
>1713	AssignmentExpr	fact = 1.0 / ( _dx * _dx + _dy * _dy )
>1714	MultiplicativeExpression	1.0 / ( _dx * _dx + _dy * _dy )
>1715	AdditiveExpression	_dx * _dx + _dy * _dy
>1716	MultiplicativeExpression	_dy * _dy
>1717	Identifier	_dy
>1718	Identifier	_dy
>1719	MultiplicativeExpression	_dx * _dx
>1720	Identifier	_dx
>1721	Identifier	_dx
>1722	PrimaryExpression	1.0
>1723	Identifier	fact
>1724	Identifier	fact
>1725	IdentifierDeclType	double
>1726	ExpressionStatement	 
>1727	AssignmentExpr	_dy = y [ 1 ] - y [ 0 ]
>1728	AdditiveExpression	y [ 1 ] - y [ 0 ]
>1729	ArrayIndexing	y [ 0 ]
>1730	PrimaryExpression	0
>1731	Identifier	y
>1732	ArrayIndexing	y [ 1 ]
>1733	PrimaryExpression	1
>1734	Identifier	y
>1735	Identifier	_dy
>1736	ExpressionStatement	 
>1737	AssignmentExpr	_dx = x [ 1 ] - x [ 0 ]
>1738	AdditiveExpression	x [ 1 ] - x [ 0 ]
>1739	ArrayIndexing	x [ 0 ]
>1740	PrimaryExpression	0
>1741	Identifier	x
>1742	ArrayIndexing	x [ 1 ]
>1743	PrimaryExpression	1
>1744	Identifier	x
>1745	Identifier	_dx
>1746	Condition	 
>1747	EqualityExpression	_nof_points == 2
>1748	PrimaryExpression	2
>1749	Identifier	_nof_points
>1750	IfStatement	if ( _nof_points == 1 )
>1751	CompoundStatement	 
>1752	ReturnStatement	 
>1753	PrimaryExpression	1
>1754	ExpressionStatement	 
>1755	AssignmentExpr	type = VIZ_GEOREF_SPLINE_ONE_POINT
>1756	Identifier	VIZ_GEOREF_SPLINE_ONE_POINT
>1757	Identifier	type
>1758	Condition	 
>1759	EqualityExpression	_nof_points == 1
>1760	PrimaryExpression	1
>1761	Identifier	_nof_points
>1762	IfStatement	if ( _nof_points < 1 )
>1763	CompoundStatement	 
>1764	ReturnStatement	 
>1765	PrimaryExpression	0
>1766	ExpressionStatement	 
>1767	AssignmentExpr	type = VIZ_GEOREF_SPLINE_ZERO_POINTS
>1768	Identifier	VIZ_GEOREF_SPLINE_ZERO_POINTS
>1769	Identifier	type
>1770	Condition	 
>1771	RelationalExpression	_nof_points < 1
>1772	PrimaryExpression	1
>1773	Identifier	_nof_points
>1774	IdentifierDeclStatement	 
>1775	IdentifierDecl	p
>1776	Identifier	p
>1777	IdentifierDeclType	int
>1778	IdentifierDeclStatement	 
>1779	IdentifierDecl	v
>1780	Identifier	v
>1781	IdentifierDeclType	int
>1782	IdentifierDecl	c
>1783	Identifier	c
>1784	IdentifierDeclType	int
>1785	IdentifierDecl	r
>1786	Identifier	r
>1787	IdentifierDeclType	int
>1866	FunctionDef	VizGeorefSpline2D 
>1867	ParameterList	const double Px , const double Py , double * vars
>1868	Parameter	 
>1869	Identifier	vars
>1870	ParameterType	double *
>1871	Parameter	 
>1872	Identifier	Py
>1873	ParameterType	const double
>1874	Parameter	 
>1875	Identifier	Px
>1876	ParameterType	const double
>1877	ReturnType	int
>1878	CompoundStatement	 
>1879	ReturnStatement	 
>1880	PrimaryExpression	1
>1881	SwitchStatement	switch ( type )
>1882	CompoundStatement	 
>1883	BreakStatement	 
>1884	ReturnStatement	 
>1885	PrimaryExpression	0
>1886	Label	 
>1887	Identifier	default
>1888	BreakStatement	 
>1889	ReturnStatement	 
>1890	PrimaryExpression	0
>1891	ForStatement	for ( v = 0 ; v < _nof_vars ; v ++ )
>1892	ExpressionStatement	 
>1893	AssignmentExpr	vars [ v ] = 0.0
>1894	PrimaryExpression	0.0
>1895	ArrayIndexing	vars [ v ]
>1896	Identifier	v
>1897	Identifier	vars
>1898	IncDecOp	 
>1899	IncDec	++
>1900	Identifier	v
>1901	Condition	 
>1902	RelationalExpression	v < _nof_vars
>1903	Identifier	_nof_vars
>1904	Identifier	v
>1905	ForInit	 
>1906	AssignmentExpr	v = 0
>1907	PrimaryExpression	0
>1908	Identifier	v
>1909	ExpressionStatement	 
>1910	CallExpression	fprintf ( stderr , \" NO interpolation - return values are zero\n\" )
>1911	ArgumentList	stderr
>1912	Argument	\" NO interpolation - return values are zero\n\"
>1913	PrimaryExpression	\" NO interpolation - return values are zero\n\"
>1914	Argument	stderr
>1915	Identifier	stderr
>1916	Callee	fprintf
>1917	Identifier	fprintf
>1918	ExpressionStatement	 
>1919	CallExpression	fprintf ( stderr , \" A point was deleted after the last solve\n\" )
>1920	ArgumentList	stderr
>1921	Argument	\" A point was deleted after the last solve\n\"
>1922	PrimaryExpression	\" A point was deleted after the last solve\n\"
>1923	Argument	stderr
>1924	Identifier	stderr
>1925	Callee	fprintf
>1926	Identifier	fprintf
>1927	Label	 
>1928	Identifier	VIZ_GEOREF_SPLINE_POINT_WAS_DELETED
>1929	BreakStatement	 
>1930	ReturnStatement	 
>1931	PrimaryExpression	0
>1932	ForStatement	for ( v = 0 ; v < _nof_vars ; v ++ )
>1933	ExpressionStatement	 
>1934	AssignmentExpr	vars [ v ] = 0.0
>1935	PrimaryExpression	0.0
>1936	ArrayIndexing	vars [ v ]
>1937	Identifier	v
>1938	Identifier	vars
>1939	IncDecOp	 
>1940	IncDec	++
>1941	Identifier	v
>1942	Condition	 
>1943	RelationalExpression	v < _nof_vars
>1944	Identifier	_nof_vars
>1945	Identifier	v
>1946	ForInit	 
>1947	AssignmentExpr	v = 0
>1948	PrimaryExpression	0
>1949	Identifier	v
>1950	ExpressionStatement	 
>1951	CallExpression	fprintf ( stderr , \" NO interpolation - return values are zero\n\" )
>1952	ArgumentList	stderr
>1953	Argument	\" NO interpolation - return values are zero\n\"
>1954	PrimaryExpression	\" NO interpolation - return values are zero\n\"
>1955	Argument	stderr
>1956	Identifier	stderr
>1957	Callee	fprintf
>1958	Identifier	fprintf
>1959	ExpressionStatement	 
>1960	CallExpression	fprintf ( stderr , \" A point was added after the last solve\n\" )
>1961	ArgumentList	stderr
>1962	Argument	\" A point was added after the last solve\n\"
>1963	PrimaryExpression	\" A point was added after the last solve\n\"
>1964	Argument	stderr
>1965	Identifier	stderr
>1966	Callee	fprintf
>1967	Identifier	fprintf
>1968	Label	 
>1969	Identifier	VIZ_GEOREF_SPLINE_POINT_WAS_ADDED
>1970	BreakStatement	 
>1971	ForStatement	for ( r = 0 ; r < _nof_points ; r ++ )
>1972	CompoundStatement	 
>1973	ForStatement	for ( v = 0 ; v < _nof_vars ; v ++ )
>1974	ExpressionStatement	 
>1975	AssignmentExpr	vars [ v ] += coef [ v ] [ r + 3 ] * tmp
>1976	MultiplicativeExpression	coef [ v ] [ r + 3 ] * tmp
>1977	Identifier	tmp
>1978	ArrayIndexing	coef [ v ] [ r + 3 ]
>1979	AdditiveExpression	r + 3
>1980	PrimaryExpression	3
>1981	Identifier	r
>1982	ArrayIndexing	coef [ v ]
>1983	Identifier	v
>1984	Identifier	coef
>1985	ArrayIndexing	vars [ v ]
>1986	Identifier	v
>1987	Identifier	vars
>1988	IncDecOp	 
>1989	IncDec	++
>1990	Identifier	v
>1991	Condition	 
>1992	RelationalExpression	v < _nof_vars
>1993	Identifier	_nof_vars
>1994	Identifier	v
>1995	ForInit	 
>1996	AssignmentExpr	v = 0
>1997	PrimaryExpression	0
>1998	Identifier	v
>1999	ExpressionStatement	 
>2000	AssignmentExpr	tmp = base_func ( Px , Py , x [ r ] , y [ r ] )
>2001	CallExpression	base_func ( Px , Py , x [ r ] , y [ r ] )
>2002	ArgumentList	Px
>2003	Argument	y [ r ]
>2004	ArrayIndexing	y [ r ]
>2005	Identifier	r
>2006	Identifier	y
>2007	Argument	x [ r ]
>2008	ArrayIndexing	x [ r ]
>2009	Identifier	r
>2010	Identifier	x
>2011	Argument	Py
>2012	Identifier	Py
>2013	Argument	Px
>2014	Identifier	Px
>2015	Callee	base_func
>2016	Identifier	base_func
>2017	Identifier	tmp
>2018	IncDecOp	 
>2019	IncDec	++
>2020	Identifier	r
>2021	Condition	 
>2022	RelationalExpression	r < _nof_points
>2023	Identifier	_nof_points
>2024	Identifier	r
>2025	ForInit	 
>2026	AssignmentExpr	r = 0
>2027	PrimaryExpression	0
>2028	Identifier	r
>2029	ForStatement	for ( v = 0 ; v < _nof_vars ; v ++ )
>2030	ExpressionStatement	 
>2031	AssignmentExpr	vars [ v ] = coef [ v ] [ 0 ] + coef [ v ] [ 1 ] * Px + coef [ v ] [ 2 ] * Py
>2032	AdditiveExpression	coef [ v ] [ 0 ] + coef [ v ] [ 1 ] * Px + coef [ v ] [ 2 ] * Py
>2033	AdditiveExpression	coef [ v ] [ 1 ] * Px + coef [ v ] [ 2 ] * Py
>2034	MultiplicativeExpression	coef [ v ] [ 2 ] * Py
>2035	Identifier	Py
>2036	ArrayIndexing	coef [ v ] [ 2 ]
>2037	PrimaryExpression	2
>2038	ArrayIndexing	coef [ v ]
>2039	Identifier	v
>2040	Identifier	coef
>2041	MultiplicativeExpression	coef [ v ] [ 1 ] * Px
>2042	Identifier	Px
>2043	ArrayIndexing	coef [ v ] [ 1 ]
>2044	PrimaryExpression	1
>2045	ArrayIndexing	coef [ v ]
>2046	Identifier	v
>2047	Identifier	coef
>2048	ArrayIndexing	coef [ v ] [ 0 ]
>2049	PrimaryExpression	0
>2050	ArrayIndexing	coef [ v ]
>2051	Identifier	v
>2052	Identifier	coef
>2053	ArrayIndexing	vars [ v ]
>2054	Identifier	v
>2055	Identifier	vars
>2056	IncDecOp	 
>2057	IncDec	++
>2058	Identifier	v
>2059	Condition	 
>2060	RelationalExpression	v < _nof_vars
>2061	Identifier	_nof_vars
>2062	Identifier	v
>2063	ForInit	 
>2064	AssignmentExpr	v = 0
>2065	PrimaryExpression	0
>2066	Identifier	v
>2067	Label	 
>2068	Identifier	VIZ_GEOREF_SPLINE_FULL
>2069	BreakStatement	 
>2070	ForStatement	for ( v = 0 ; v < _nof_vars ; v ++ )
>2071	ExpressionStatement	 
>2072	AssignmentExpr	vars [ v ] = ( 1.0 - fact ) * rhs [ v ] [ leftP + 3 ] + fact * rhs [ v ] [ rightP + 3 ]
>2073	AdditiveExpression	( 1.0 - fact ) * rhs [ v ] [ leftP + 3 ] + fact * rhs [ v ] [ rightP + 3 ]
>2074	MultiplicativeExpression	fact * rhs [ v ] [ rightP + 3 ]
>2075	ArrayIndexing	rhs [ v ] [ rightP + 3 ]
>2076	AdditiveExpression	rightP + 3
>2077	PrimaryExpression	3
>2078	Identifier	rightP
>2079	ArrayIndexing	rhs [ v ]
>2080	Identifier	v
>2081	Identifier	rhs
>2082	Identifier	fact
>2083	MultiplicativeExpression	( 1.0 - fact ) * rhs [ v ] [ leftP + 3 ]
>2084	ArrayIndexing	rhs [ v ] [ leftP + 3 ]
>2085	AdditiveExpression	leftP + 3
>2086	PrimaryExpression	3
>2087	Identifier	leftP
>2088	ArrayIndexing	rhs [ v ]
>2089	Identifier	v
>2090	Identifier	rhs
>2091	AdditiveExpression	1.0 - fact
>2092	Identifier	fact
>2093	PrimaryExpression	1.0
>2094	ArrayIndexing	vars [ v ]
>2095	Identifier	v
>2096	Identifier	vars
>2097	IncDecOp	 
>2098	IncDec	++
>2099	Identifier	v
>2100	Condition	 
>2101	RelationalExpression	v < _nof_vars
>2102	Identifier	_nof_vars
>2103	Identifier	v
>2104	ForInit	 
>2105	AssignmentExpr	v = 0
>2106	PrimaryExpression	0
>2107	Identifier	v
>2108	ExpressionStatement	 
>2109	AssignmentExpr	fact = ( Pu - u [ leftP ] ) / ( u [ rightP ] - u [ leftP ] )
>2110	MultiplicativeExpression	( Pu - u [ leftP ] ) / ( u [ rightP ] - u [ leftP ] )
>2111	AdditiveExpression	u [ rightP ] - u [ leftP ]
>2112	ArrayIndexing	u [ leftP ]
>2113	Identifier	leftP
>2114	Identifier	u
>2115	ArrayIndexing	u [ rightP ]
>2116	Identifier	rightP
>2117	Identifier	u
>2118	AdditiveExpression	Pu - u [ leftP ]
>2119	ArrayIndexing	u [ leftP ]
>2120	Identifier	leftP
>2121	Identifier	u
>2122	Identifier	Pu
>2123	Identifier	fact
>2124	IfStatement	if ( Pu <= u [ index [ 0 ] ] )
>2125	ElseStatement	else
>2126	IfStatement	if ( Pu >= u [ index [ _nof_points - 1 ] ] )
>2127	ElseStatement	else
>2128	CompoundStatement	 
>2129	ForStatement	for ( r = 1 ; ! found && r < _nof_points ; r ++ )
>2130	CompoundStatement	 
>2131	IfStatement	if ( Pu >= u [ leftP ] && Pu <= u [ rightP ] )
>2132	ExpressionStatement	 
>2133	AssignmentExpr	found = 1
>2134	PrimaryExpression	1
>2135	Identifier	found
>2136	Condition	 
>2137	AndExpression	Pu >= u [ leftP ] && Pu <= u [ rightP ]
>2138	RelationalExpression	Pu <= u [ rightP ]
>2139	ArrayIndexing	u [ rightP ]
>2140	Identifier	rightP
>2141	Identifier	u
>2142	Identifier	Pu
>2143	RelationalExpression	Pu >= u [ leftP ]
>2144	ArrayIndexing	u [ leftP ]
>2145	Identifier	leftP
>2146	Identifier	u
>2147	Identifier	Pu
>2148	ExpressionStatement	 
>2149	AssignmentExpr	rightP = index [ r ]
>2150	ArrayIndexing	index [ r ]
>2151	Identifier	r
>2152	Identifier	index
>2153	Identifier	rightP
>2154	ExpressionStatement	 
>2155	AssignmentExpr	leftP = index [ r - 1 ]
>2156	ArrayIndexing	index [ r - 1 ]
>2157	AdditiveExpression	r - 1
>2158	PrimaryExpression	1
>2159	Identifier	r
>2160	Identifier	index
>2161	Identifier	leftP
>2162	IncDecOp	 
>2163	IncDec	++
>2164	Identifier	r
>2165	Condition	 
>2166	AndExpression	! found && r < _nof_points
>2167	RelationalExpression	r < _nof_points
>2168	Identifier	_nof_points
>2169	Identifier	r
>2170	UnaryOp	! found
>2171	Identifier	found
>2172	UnaryOperator	!
>2173	ForInit	 
>2174	AssignmentExpr	r = 1
>2175	PrimaryExpression	1
>2176	Identifier	r
>2177	CompoundStatement	 
>2178	ExpressionStatement	 
>2179	AssignmentExpr	rightP = index [ _nof_points - 1 ]
>2180	ArrayIndexing	index [ _nof_points - 1 ]
>2181	AdditiveExpression	_nof_points - 1
>2182	PrimaryExpression	1
>2183	Identifier	_nof_points
>2184	Identifier	index
>2185	Identifier	rightP
>2186	ExpressionStatement	 
>2187	AssignmentExpr	leftP = index [ _nof_points - 2 ]
>2188	ArrayIndexing	index [ _nof_points - 2 ]
>2189	AdditiveExpression	_nof_points - 2
>2190	PrimaryExpression	2
>2191	Identifier	_nof_points
>2192	Identifier	index
>2193	Identifier	leftP
>2194	Condition	 
>2195	RelationalExpression	Pu >= u [ index [ _nof_points - 1 ] ]
>2196	ArrayIndexing	u [ index [ _nof_points - 1 ] ]
>2197	ArrayIndexing	index [ _nof_points - 1 ]
>2198	AdditiveExpression	_nof_points - 1
>2199	PrimaryExpression	1
>2200	Identifier	_nof_points
>2201	Identifier	index
>2202	Identifier	u
>2203	Identifier	Pu
>2204	CompoundStatement	 
>2205	ExpressionStatement	 
>2206	AssignmentExpr	rightP = index [ 1 ]
>2207	ArrayIndexing	index [ 1 ]
>2208	PrimaryExpression	1
>2209	Identifier	index
>2210	Identifier	rightP
>2211	ExpressionStatement	 
>2212	AssignmentExpr	leftP = index [ 0 ]
>2213	ArrayIndexing	index [ 0 ]
>2214	PrimaryExpression	0
>2215	Identifier	index
>2216	Identifier	leftP
>2217	Condition	 
>2218	RelationalExpression	Pu <= u [ index [ 0 ] ]
>2219	ArrayIndexing	u [ index [ 0 ] ]
>2220	ArrayIndexing	index [ 0 ]
>2221	PrimaryExpression	0
>2222	Identifier	index
>2223	Identifier	u
>2224	Identifier	Pu
>2225	ExpressionStatement	 
>2226	AssignmentExpr	Pu = _dx * ( Px - x [ 0 ] ) + _dy * ( Py - y [ 0 ] )
>2227	AdditiveExpression	_dx * ( Px - x [ 0 ] ) + _dy * ( Py - y [ 0 ] )
>2228	MultiplicativeExpression	_dy * ( Py - y [ 0 ] )
>2229	AdditiveExpression	Py - y [ 0 ]
>2230	ArrayIndexing	y [ 0 ]
>2231	PrimaryExpression	0
>2232	Identifier	y
>2233	Identifier	Py
>2234	Identifier	_dy
>2235	MultiplicativeExpression	_dx * ( Px - x [ 0 ] )
>2236	AdditiveExpression	Px - x [ 0 ]
>2237	ArrayIndexing	x [ 0 ]
>2238	PrimaryExpression	0
>2239	Identifier	x
>2240	Identifier	Px
>2241	Identifier	_dx
>2242	Identifier	Pu
>2243	Label	 
>2244	Identifier	VIZ_GEOREF_SPLINE_ONE_DIMENSIONAL
>2245	BreakStatement	 
>2246	ForStatement	for ( v = 0 ; v < _nof_vars ; v ++ )
>2247	ExpressionStatement	 
>2248	AssignmentExpr	vars [ v ] = ( 1 - fact ) * rhs [ v ] [ 3 ] + fact * rhs [ v ] [ 4 ]
>2249	AdditiveExpression	( 1 - fact ) * rhs [ v ] [ 3 ] + fact * rhs [ v ] [ 4 ]
>2250	MultiplicativeExpression	fact * rhs [ v ] [ 4 ]
>2251	ArrayIndexing	rhs [ v ] [ 4 ]
>2252	PrimaryExpression	4
>2253	ArrayIndexing	rhs [ v ]
>2254	Identifier	v
>2255	Identifier	rhs
>2256	Identifier	fact
>2257	MultiplicativeExpression	( 1 - fact ) * rhs [ v ] [ 3 ]
>2258	ArrayIndexing	rhs [ v ] [ 3 ]
>2259	PrimaryExpression	3
>2260	ArrayIndexing	rhs [ v ]
>2261	Identifier	v
>2262	Identifier	rhs
>2263	AdditiveExpression	1 - fact
>2264	Identifier	fact
>2265	PrimaryExpression	1
>2266	ArrayIndexing	vars [ v ]
>2267	Identifier	v
>2268	Identifier	vars
>2269	IncDecOp	 
>2270	IncDec	++
>2271	Identifier	v
>2272	Condition	 
>2273	RelationalExpression	v < _nof_vars
>2274	Identifier	_nof_vars
>2275	Identifier	v
>2276	ForInit	 
>2277	AssignmentExpr	v = 0
>2278	PrimaryExpression	0
>2279	Identifier	v
>2280	ExpressionStatement	 
>2281	AssignmentExpr	fact = _dx * ( Px - x [ 0 ] ) + _dy * ( Py - y [ 0 ] )
>2282	AdditiveExpression	_dx * ( Px - x [ 0 ] ) + _dy * ( Py - y [ 0 ] )
>2283	MultiplicativeExpression	_dy * ( Py - y [ 0 ] )
>2284	AdditiveExpression	Py - y [ 0 ]
>2285	ArrayIndexing	y [ 0 ]
>2286	PrimaryExpression	0
>2287	Identifier	y
>2288	Identifier	Py
>2289	Identifier	_dy
>2290	MultiplicativeExpression	_dx * ( Px - x [ 0 ] )
>2291	AdditiveExpression	Px - x [ 0 ]
>2292	ArrayIndexing	x [ 0 ]
>2293	PrimaryExpression	0
>2294	Identifier	x
>2295	Identifier	Px
>2296	Identifier	_dx
>2297	Identifier	fact
>2298	Label	 
>2299	Identifier	VIZ_GEOREF_SPLINE_TWO_POINTS
>2300	BreakStatement	 
>2301	ForStatement	for ( v = 0 ; v < _nof_vars ; v ++ )
>2302	ExpressionStatement	 
>2303	AssignmentExpr	vars [ v ] = rhs [ v ] [ 3 ]
>2304	ArrayIndexing	rhs [ v ] [ 3 ]
>2305	PrimaryExpression	3
>2306	ArrayIndexing	rhs [ v ]
>2307	Identifier	v
>2308	Identifier	rhs
>2309	ArrayIndexing	vars [ v ]
>2310	Identifier	v
>2311	Identifier	vars
>2312	IncDecOp	 
>2313	IncDec	++
>2314	Identifier	v
>2315	Condition	 
>2316	RelationalExpression	v < _nof_vars
>2317	Identifier	_nof_vars
>2318	Identifier	v
>2319	ForInit	 
>2320	AssignmentExpr	v = 0
>2321	PrimaryExpression	0
>2322	Identifier	v
>2323	Label	 
>2324	Identifier	VIZ_GEOREF_SPLINE_ONE_POINT
>2325	BreakStatement	 
>2326	ForStatement	for ( v = 0 ; v < _nof_vars ; v ++ )
>2327	ExpressionStatement	 
>2328	AssignmentExpr	vars [ v ] = 0.0
>2329	PrimaryExpression	0.0
>2330	ArrayIndexing	vars [ v ]
>2331	Identifier	v
>2332	Identifier	vars
>2333	IncDecOp	 
>2334	IncDec	++
>2335	Identifier	v
>2336	Condition	 
>2337	RelationalExpression	v < _nof_vars
>2338	Identifier	_nof_vars
>2339	Identifier	v
>2340	ForInit	 
>2341	AssignmentExpr	v = 0
>2342	PrimaryExpression	0
>2343	Identifier	v
>2344	Label	 
>2345	Identifier	VIZ_GEOREF_SPLINE_ZERO_POINTS
>2346	Condition	 
>2347	Identifier	type
>2348	IdentifierDeclStatement	 
>2349	IdentifierDecl	found = 0
>2350	AssignmentExpr	found = 0
>2351	PrimaryExpression	0
>2352	Identifier	found
>2353	Identifier	found
>2354	IdentifierDeclType	int
>2355	IdentifierDecl	rightP = 0
>2356	AssignmentExpr	rightP = 0
>2357	PrimaryExpression	0
>2358	Identifier	rightP
>2359	Identifier	rightP
>2360	IdentifierDeclType	int
>2361	IdentifierDecl	leftP = 0
>2362	AssignmentExpr	leftP = 0
>2363	PrimaryExpression	0
>2364	Identifier	leftP
>2365	Identifier	leftP
>2366	IdentifierDeclType	int
>2367	IdentifierDeclStatement	 
>2368	IdentifierDecl	fact
>2369	Identifier	fact
>2370	IdentifierDeclType	double
>2371	IdentifierDeclStatement	 
>2372	IdentifierDecl	Pu
>2373	Identifier	Pu
>2374	IdentifierDeclType	double
>2375	IdentifierDecl	tmp
>2376	Identifier	tmp
>2377	IdentifierDeclType	double
>2378	IdentifierDeclStatement	 
>2379	IdentifierDecl	r
>2380	Identifier	r
>2381	IdentifierDeclType	int
>2382	IdentifierDecl	v
>2383	Identifier	v
>2384	IdentifierDeclType	int
>2429	FunctionDef	VizGeorefSpline2D 
>2430	ParameterList	const double x1 , const double y1 , const double x2 , const double y2
>2431	Parameter	 
>2432	Identifier	y2
>2433	ParameterType	const double
>2434	Parameter	 
>2435	Identifier	x2
>2436	ParameterType	const double
>2437	Parameter	 
>2438	Identifier	y1
>2439	ParameterType	const double
>2440	Parameter	 
>2441	Identifier	x1
>2442	ParameterType	const double
>2443	ReturnType	double
>2444	CompoundStatement	 
>2445	ReturnStatement	 
>2446	MultiplicativeExpression	dist * log ( dist )
>2447	CallExpression	log ( dist )
>2448	ArgumentList	dist
>2449	Argument	dist
>2450	Identifier	dist
>2451	Callee	log
>2452	Identifier	log
>2453	Identifier	dist
>2454	IdentifierDeclStatement	 
>2455	IdentifierDecl	dist = ( x2 - x1 ) * ( x2 - x1 ) + ( y2 - y1 ) * ( y2 - y1 )
>2456	AssignmentExpr	dist = ( x2 - x1 ) * ( x2 - x1 ) + ( y2 - y1 ) * ( y2 - y1 )
>2457	AdditiveExpression	( x2 - x1 ) * ( x2 - x1 ) + ( y2 - y1 ) * ( y2 - y1 )
>2458	MultiplicativeExpression	( y2 - y1 ) * ( y2 - y1 )
>2459	AdditiveExpression	y2 - y1
>2460	Identifier	y1
>2461	Identifier	y2
>2462	AdditiveExpression	y2 - y1
>2463	Identifier	y1
>2464	Identifier	y2
>2465	MultiplicativeExpression	( x2 - x1 ) * ( x2 - x1 )
>2466	AdditiveExpression	x2 - x1
>2467	Identifier	x1
>2468	Identifier	x2
>2469	AdditiveExpression	x2 - x1
>2470	Identifier	x1
>2471	Identifier	x2
>2472	Identifier	dist
>2473	Identifier	dist
>2474	IdentifierDeclType	double
>2475	IfStatement	if ( ( x1 == x2 ) && ( y1 == y2 ) )
>2476	ReturnStatement	 
>2477	PrimaryExpression	0.0
>2478	Condition	 
>2479	AndExpression	( x1 == x2 ) && ( y1 == y2 )
>2480	EqualityExpression	y1 == y2
>2481	Identifier	y2
>2482	Identifier	y1
>2483	EqualityExpression	x1 == x2
>2484	Identifier	x2
>2485	Identifier	x1
>2495	FunctionDef	matrixInvert (int N , double input [ ] , double output [ ])
>2496	ParameterList	int N , double input [ ] , double output [ ]
>2497	Parameter	 
>2498	Identifier	output
>2499	ParameterType	double [ ]
>2500	Parameter	 
>2501	Identifier	input
>2502	ParameterType	double [ ]
>2503	Parameter	 
>2504	Identifier	N
>2505	ParameterType	int
>2506	ReturnType	static int
>2507	CompoundStatement	 
>2508	CompoundStatement	 
>2509	ReturnStatement	 
>2510	Identifier	false
>2511	ExpressionStatement	 
>2512	CallExpression	fprintf ( stderr , \"matrixInvert()
>2513	ArgumentList	stderr
>2514	Argument	\"matrixInvert()
>2515	PrimaryExpression	\"matrixInvert()
>2516	Argument	stderr
>2517	Identifier	stderr
>2518	Callee	fprintf
>2519	Identifier	fprintf
>2520	Statement	 
>2521	Statement	 
>2522	Statement	 
>2523	Statement	 
>2524	Statement	 
>2525	Statement	 
>2526	BlockStarter	 
>2527	CompoundStatement	 
>2528	ReturnStatement	return true ;
>2529	Identifier	true
>2530	ForStatement	for ( row = 0 ; row < N ; row ++ )
>2531	ForStatement	for ( col = 0 ; col < N ; col ++ )
>2532	ExpressionStatement	output [ row * N + col ] = matInv . at ( row , col )
>2533	AssignmentExpr	output [ row * N + col ] = matInv . at ( row , col )
>2534	CallExpression	matInv . at ( row , col )
>2535	ArgumentList	row
>2536	Argument	col
>2537	Identifier	col
>2538	Argument	row
>2539	Identifier	row
>2540	Callee	matInv . at
>2541	MemberAccess	matInv . at
>2542	Identifier	at
>2543	Identifier	matInv
>2544	ArrayIndexing	output [ row * N + col ]
>2545	AdditiveExpression	row * N + col
>2546	Identifier	col
>2547	MultiplicativeExpression	row * N
>2548	Identifier	N
>2549	Identifier	row
>2550	Identifier	output
>2551	IncDecOp	col ++
>2552	IncDec	++
>2553	Identifier	col
>2554	Condition	col < N
>2555	RelationalExpression	col < N
>2556	Identifier	N
>2557	Identifier	col
>2558	ForInit	col = 0 ;
>2559	AssignmentExpr	col = 0
>2560	PrimaryExpression	0
>2561	Identifier	col
>2562	IncDecOp	row ++
>2563	IncDec	++
>2564	Identifier	row
>2565	Condition	row < N
>2566	RelationalExpression	row < N
>2567	Identifier	N
>2568	Identifier	row
>2569	ForInit	row = 0 ;
>2570	AssignmentExpr	row = 0
>2571	PrimaryExpression	0
>2572	Identifier	row
>2573	IdentifierDeclStatement	int row , col ;
>2574	IdentifierDecl	col
>2575	Identifier	col
>2576	IdentifierDeclType	int
>2577	IdentifierDecl	row
>2578	Identifier	row
>2579	IdentifierDeclType	int
>2580	IdentifierDeclStatement	const arma 
>2581	IdentifierDecl	& matInv = arma 
>2582	AssignmentExpr	& matInv = arma 
>2583	CallExpression	arma 
>2584	ArgumentList	matInput
>2585	Argument	matInput
>2586	Identifier	matInput
>2587	Callee	arma 
>2588	Identifier	arma 
>2589	Identifier	matInv
>2590	Identifier	matInv
>2591	IdentifierDeclType	const arma 
>2592	IdentifierDeclStatement	arma 
>2593	IdentifierDecl	matInput ( input , N , N , false )
>2594	Expression	input , N , N , false
>2595	Expression	N , N , false
>2596	Expression	N , false
>2597	Identifier	false
>2598	Identifier	N
>2599	Identifier	N
>2600	Identifier	input
>2601	Identifier	matInput
>2602	IdentifierDeclType	arma 
>2622	FunctionDef	matrixInvert (int N , double input [ ] , double output [ ])
>2623	ParameterList	int N , double input [ ] , double output [ ]
>2624	Parameter	 
>2625	Identifier	output
>2626	ParameterType	double [ ]
>2627	Parameter	 
>2628	Identifier	input
>2629	ParameterType	double [ ]
>2630	Parameter	 
>2631	Identifier	N
>2632	ParameterType	int
>2633	ReturnType	static int
>2634	CompoundStatement	 
>2635	ReturnStatement	 
>2636	Identifier	true
>2637	ExpressionStatement	 
>2638	Identifier	temp
>2639	Statement	 
>2640	Statement	 
>2641	Statement	 
>2642	ForStatement	for ( row = 0 ; row < N ; row ++ )
>2643	CompoundStatement	 
>2644	ExpressionStatement	 
>2645	CallExpression	fprintf ( stderr , \"\n\" )
>2646	ArgumentList	stderr
>2647	Argument	\"\n\"
>2648	PrimaryExpression	\"\n\"
>2649	Argument	stderr
>2650	Identifier	stderr
>2651	Callee	fprintf
>2652	Identifier	fprintf
>2653	ForStatement	for ( col = 0 ; col < N ; col ++ )
>2654	CompoundStatement	 
>2655	ExpressionStatement	 
>2656	CallExpression	fprintf ( stderr , \"%5.2f \" , output [ row * N + col ] )
>2657	ArgumentList	stderr
>2658	Argument	output [ row * N + col ]
>2659	ArrayIndexing	output [ row * N + col ]
>2660	AdditiveExpression	row * N + col
>2661	Identifier	col
>2662	MultiplicativeExpression	row * N
>2663	Identifier	N
>2664	Identifier	row
>2665	Identifier	output
>2666	Argument	\"%5.2f \"
>2667	PrimaryExpression	\"%5.2f \"
>2668	Argument	stderr
>2669	Identifier	stderr
>2670	Callee	fprintf
>2671	Identifier	fprintf
>2672	IncDecOp	 
>2673	IncDec	++
>2674	Identifier	col
>2675	Condition	 
>2676	RelationalExpression	col < N
>2677	Identifier	N
>2678	Identifier	col
>2679	ForInit	 
>2680	AssignmentExpr	col = 0
>2681	PrimaryExpression	0
>2682	Identifier	col
>2683	IncDecOp	 
>2684	IncDec	++
>2685	Identifier	row
>2686	Condition	 
>2687	RelationalExpression	row < N
>2688	Identifier	N
>2689	Identifier	row
>2690	ForInit	 
>2691	AssignmentExpr	row = 0
>2692	PrimaryExpression	0
>2693	Identifier	row
>2694	ExpressionStatement	 
>2695	CallExpression	fprintf ( stderr , \"Matrix Inversion result matrix
>2696	ArgumentList	stderr
>2697	Argument	\"Matrix Inversion result matrix
>2698	PrimaryExpression	\"Matrix Inversion result matrix
>2699	Argument	stderr
>2700	Identifier	stderr
>2701	Callee	fprintf
>2702	Identifier	fprintf
>2703	ForStatement	for ( row = 0 ; row < N ; row ++ )
>2704	CompoundStatement	 
>2705	ForStatement	for ( col = 0 ; col < N ; col ++ )
>2706	CompoundStatement	 
>2707	ExpressionStatement	 
>2708	AssignmentExpr	output [ row * N + col ] = temp [ row * 2 * N + col + N ]
>2709	ArrayIndexing	temp [ row * 2 * N + col + N ]
>2710	AdditiveExpression	row * 2 * N + col + N
>2711	AdditiveExpression	col + N
>2712	Identifier	N
>2713	Identifier	col
>2714	MultiplicativeExpression	row * 2 * N
>2715	MultiplicativeExpression	2 * N
>2716	Identifier	N
>2717	PrimaryExpression	2
>2718	Identifier	row
>2719	Identifier	temp
>2720	ArrayIndexing	output [ row * N + col ]
>2721	AdditiveExpression	row * N + col
>2722	Identifier	col
>2723	MultiplicativeExpression	row * N
>2724	Identifier	N
>2725	Identifier	row
>2726	Identifier	output
>2727	IncDecOp	 
>2728	IncDec	++
>2729	Identifier	col
>2730	Condition	 
>2731	RelationalExpression	col < N
>2732	Identifier	N
>2733	Identifier	col
>2734	ForInit	 
>2735	AssignmentExpr	col = 0
>2736	PrimaryExpression	0
>2737	Identifier	col
>2738	IncDecOp	 
>2739	IncDec	++
>2740	Identifier	row
>2741	Condition	 
>2742	RelationalExpression	row < N
>2743	Identifier	N
>2744	Identifier	row
>2745	ForInit	 
>2746	AssignmentExpr	row = 0
>2747	PrimaryExpression	0
>2748	Identifier	row
>2749	ForStatement	for ( k = 0 ; k < N ; k ++ )
>2750	CompoundStatement	 
>2751	ForStatement	for ( row = 0 ; row < N ; row ++ )
>2752	CompoundStatement	 
>2753	IfStatement	if ( row != k )
>2754	CompoundStatement	 
>2755	ForStatement	for ( col = k ; col < 2 * N ; col ++ )
>2756	CompoundStatement	 
>2757	ExpressionStatement	 
>2758	AssignmentExpr	temp [ i1 + col ] -= ftemp * temp [ i2 + col ]
>2759	MultiplicativeExpression	ftemp * temp [ i2 + col ]
>2760	ArrayIndexing	temp [ i2 + col ]
>2761	AdditiveExpression	i2 + col
>2762	Identifier	col
>2763	Identifier	i2
>2764	Identifier	temp
>2765	Identifier	ftemp
>2766	ArrayIndexing	temp [ i1 + col ]
>2767	AdditiveExpression	i1 + col
>2768	Identifier	col
>2769	Identifier	i1
>2770	Identifier	temp
>2771	IncDecOp	 
>2772	IncDec	++
>2773	Identifier	col
>2774	Condition	 
>2775	RelationalExpression	col < 2 * N
>2776	MultiplicativeExpression	2 * N
>2777	Identifier	N
>2778	PrimaryExpression	2
>2779	Identifier	col
>2780	ForInit	 
>2781	AssignmentExpr	col = k
>2782	Identifier	k
>2783	Identifier	col
>2784	ExpressionStatement	 
>2785	AssignmentExpr	ftemp = temp [ i1 + k ]
>2786	ArrayIndexing	temp [ i1 + k ]
>2787	AdditiveExpression	i1 + k
>2788	Identifier	k
>2789	Identifier	i1
>2790	Identifier	temp
>2791	Identifier	ftemp
>2792	IdentifierDeclStatement	 
>2793	IdentifierDecl	i1 = row * 2 * N
>2794	AssignmentExpr	i1 = row * 2 * N
>2795	MultiplicativeExpression	row * 2 * N
>2796	MultiplicativeExpression	2 * N
>2797	Identifier	N
>2798	PrimaryExpression	2
>2799	Identifier	row
>2800	Identifier	i1
>2801	Identifier	i1
>2802	IdentifierDeclType	int
>2803	Condition	 
>2804	EqualityExpression	row != k
>2805	Identifier	k
>2806	Identifier	row
>2807	IncDecOp	 
>2808	IncDec	++
>2809	Identifier	row
>2810	Condition	 
>2811	RelationalExpression	row < N
>2812	Identifier	N
>2813	Identifier	row
>2814	ForInit	 
>2815	AssignmentExpr	row = 0
>2816	PrimaryExpression	0
>2817	Identifier	row
>2818	IdentifierDeclStatement	 
>2819	IdentifierDecl	i2 = k * 2 * N
>2820	AssignmentExpr	i2 = k * 2 * N
>2821	MultiplicativeExpression	k * 2 * N
>2822	MultiplicativeExpression	2 * N
>2823	Identifier	N
>2824	PrimaryExpression	2
>2825	Identifier	k
>2826	Identifier	i2
>2827	Identifier	i2
>2828	IdentifierDeclType	int
>2829	ForStatement	for ( col = k ; col < 2 * N ; col ++ )
>2830	CompoundStatement	 
>2831	ExpressionStatement	 
>2832	AssignmentExpr	temp [ k * 2 * N + col ] /= ftemp
>2833	Identifier	ftemp
>2834	ArrayIndexing	temp [ k * 2 * N + col ]
>2835	AdditiveExpression	k * 2 * N + col
>2836	Identifier	col
>2837	MultiplicativeExpression	k * 2 * N
>2838	MultiplicativeExpression	2 * N
>2839	Identifier	N
>2840	PrimaryExpression	2
>2841	Identifier	k
>2842	Identifier	temp
>2843	IncDecOp	 
>2844	IncDec	++
>2845	Identifier	col
>2846	Condition	 
>2847	RelationalExpression	col < 2 * N
>2848	MultiplicativeExpression	2 * N
>2849	Identifier	N
>2850	PrimaryExpression	2
>2851	Identifier	col
>2852	ForInit	 
>2853	AssignmentExpr	col = k
>2854	Identifier	k
>2855	Identifier	col
>2856	IfStatement	if ( ftemp == 0.0f )
>2857	CompoundStatement	 
>2858	ReturnStatement	 
>2859	Identifier	false
>2860	ExpressionStatement	 
>2861	Identifier	temp
>2862	Statement	 
>2863	Statement	 
>2864	Statement	 
>2865	Condition	 
>2866	EqualityExpression	ftemp == 0.0f
>2867	PrimaryExpression	0.0f
>2868	Identifier	ftemp
>2869	ExpressionStatement	 
>2870	AssignmentExpr	ftemp = temp [ k * 2 * N + k ]
>2871	ArrayIndexing	temp [ k * 2 * N + k ]
>2872	AdditiveExpression	k * 2 * N + k
>2873	Identifier	k
>2874	MultiplicativeExpression	k * 2 * N
>2875	MultiplicativeExpression	2 * N
>2876	Identifier	N
>2877	PrimaryExpression	2
>2878	Identifier	k
>2879	Identifier	temp
>2880	Identifier	ftemp
>2881	IfStatement	if ( k + 1 < N )
>2882	CompoundStatement	 
>2883	IfStatement	if ( max != k )
>2884	CompoundStatement	 
>2885	ForStatement	for ( col = k ; col < 2 * N ; col ++ )
>2886	CompoundStatement	 
>2887	ExpressionStatement	 
>2888	AssignmentExpr	temp [ max * 2 * N + col ] = ftemp
>2889	Identifier	ftemp
>2890	ArrayIndexing	temp [ max * 2 * N + col ]
>2891	AdditiveExpression	max * 2 * N + col
>2892	Identifier	col
>2893	MultiplicativeExpression	max * 2 * N
>2894	MultiplicativeExpression	2 * N
>2895	Identifier	N
>2896	PrimaryExpression	2
>2897	Identifier	max
>2898	Identifier	temp
>2899	ExpressionStatement	 
>2900	AssignmentExpr	temp [ k * 2 * N + col ] = temp [ max * 2 * N + col ]
>2901	ArrayIndexing	temp [ max * 2 * N + col ]
>2902	AdditiveExpression	max * 2 * N + col
>2903	Identifier	col
>2904	MultiplicativeExpression	max * 2 * N
>2905	MultiplicativeExpression	2 * N
>2906	Identifier	N
>2907	PrimaryExpression	2
>2908	Identifier	max
>2909	Identifier	temp
>2910	ArrayIndexing	temp [ k * 2 * N + col ]
>2911	AdditiveExpression	k * 2 * N + col
>2912	Identifier	col
>2913	MultiplicativeExpression	k * 2 * N
>2914	MultiplicativeExpression	2 * N
>2915	Identifier	N
>2916	PrimaryExpression	2
>2917	Identifier	k
>2918	Identifier	temp
>2919	ExpressionStatement	 
>2920	AssignmentExpr	ftemp = temp [ k * 2 * N + col ]
>2921	ArrayIndexing	temp [ k * 2 * N + col ]
>2922	AdditiveExpression	k * 2 * N + col
>2923	Identifier	col
>2924	MultiplicativeExpression	k * 2 * N
>2925	MultiplicativeExpression	2 * N
>2926	Identifier	N
>2927	PrimaryExpression	2
>2928	Identifier	k
>2929	Identifier	temp
>2930	Identifier	ftemp
>2931	IncDecOp	 
>2932	IncDec	++
>2933	Identifier	col
>2934	Condition	 
>2935	RelationalExpression	col < 2 * N
>2936	MultiplicativeExpression	2 * N
>2937	Identifier	N
>2938	PrimaryExpression	2
>2939	Identifier	col
>2940	ForInit	 
>2941	AssignmentExpr	col = k
>2942	Identifier	k
>2943	Identifier	col
>2944	Condition	 
>2945	EqualityExpression	max != k
>2946	Identifier	k
>2947	Identifier	max
>2948	ForStatement	for ( row = k + 1 ; row < N ; row ++ )
>2949	CompoundStatement	 
>2950	IfStatement	if ( fabs ( temp [ row * 2 * N + k ] ) > fabs ( temp [ max * 2 * N + k ] ) )
>2951	CompoundStatement	 
>2952	ExpressionStatement	 
>2953	AssignmentExpr	max = row
>2954	Identifier	row
>2955	Identifier	max
>2956	Condition	 
>2957	RelationalExpression	fabs ( temp [ row * 2 * N + k ] ) > fabs ( temp [ max * 2 * N + k ] )
>2958	CallExpression	fabs ( temp [ max * 2 * N + k ] )
>2959	ArgumentList	temp [ max * 2 * N + k ]
>2960	Argument	temp [ max * 2 * N + k ]
>2961	ArrayIndexing	temp [ max * 2 * N + k ]
>2962	AdditiveExpression	max * 2 * N + k
>2963	Identifier	k
>2964	MultiplicativeExpression	max * 2 * N
>2965	MultiplicativeExpression	2 * N
>2966	Identifier	N
>2967	PrimaryExpression	2
>2968	Identifier	max
>2969	Identifier	temp
>2970	Callee	fabs
>2971	Identifier	fabs
>2972	CallExpression	fabs ( temp [ row * 2 * N + k ] )
>2973	ArgumentList	temp [ row * 2 * N + k ]
>2974	Argument	temp [ row * 2 * N + k ]
>2975	ArrayIndexing	temp [ row * 2 * N + k ]
>2976	AdditiveExpression	row * 2 * N + k
>2977	Identifier	k
>2978	MultiplicativeExpression	row * 2 * N
>2979	MultiplicativeExpression	2 * N
>2980	Identifier	N
>2981	PrimaryExpression	2
>2982	Identifier	row
>2983	Identifier	temp
>2984	Callee	fabs
>2985	Identifier	fabs
>2986	IncDecOp	 
>2987	IncDec	++
>2988	Identifier	row
>2989	Condition	 
>2990	RelationalExpression	row < N
>2991	Identifier	N
>2992	Identifier	row
>2993	ForInit	 
>2994	AssignmentExpr	row = k + 1
>2995	AdditiveExpression	k + 1
>2996	PrimaryExpression	1
>2997	Identifier	k
>2998	Identifier	row
>2999	ExpressionStatement	 
>3000	AssignmentExpr	max = k
>3001	Identifier	k
>3002	Identifier	max
>3003	Condition	 
>3004	RelationalExpression	k + 1 < N
>3005	Identifier	N
>3006	AdditiveExpression	k + 1
>3007	PrimaryExpression	1
>3008	Identifier	k
>3009	IncDecOp	 
>3010	IncDec	++
>3011	Identifier	k
>3012	Condition	 
>3013	RelationalExpression	k < N
>3014	Identifier	N
>3015	Identifier	k
>3016	ForInit	 
>3017	AssignmentExpr	k = 0
>3018	PrimaryExpression	0
>3019	Identifier	k
>3020	IdentifierDeclStatement	 
>3021	IdentifierDecl	k = 0
>3022	AssignmentExpr	k = 0
>3023	PrimaryExpression	0
>3024	Identifier	k
>3025	Identifier	k
>3026	IdentifierDeclType	int
>3027	IdentifierDeclStatement	 
>3028	IdentifierDecl	max
>3029	Identifier	max
>3030	IdentifierDeclType	int
>3031	ForStatement	for ( row = 0 ; row < N ; row ++ )
>3032	CompoundStatement	 
>3033	ExpressionStatement	 
>3034	AssignmentExpr	temp [ 2 * row * N + row + N ] = 1.0f
>3035	PrimaryExpression	1.0f
>3036	ArrayIndexing	temp [ 2 * row * N + row + N ]
>3037	AdditiveExpression	2 * row * N + row + N
>3038	AdditiveExpression	row + N
>3039	Identifier	N
>3040	Identifier	row
>3041	MultiplicativeExpression	2 * row * N
>3042	MultiplicativeExpression	row * N
>3043	Identifier	N
>3044	Identifier	row
>3045	PrimaryExpression	2
>3046	Identifier	temp
>3047	ForStatement	for ( col = 0 ; col < N ; col ++ )
>3048	CompoundStatement	 
>3049	ExpressionStatement	 
>3050	AssignmentExpr	temp [ 2 * row * N + col + N ] = 0.0f
>3051	PrimaryExpression	0.0f
>3052	ArrayIndexing	temp [ 2 * row * N + col + N ]
>3053	AdditiveExpression	2 * row * N + col + N
>3054	AdditiveExpression	col + N
>3055	Identifier	N
>3056	Identifier	col
>3057	MultiplicativeExpression	2 * row * N
>3058	MultiplicativeExpression	row * N
>3059	Identifier	N
>3060	Identifier	row
>3061	PrimaryExpression	2
>3062	Identifier	temp
>3063	ExpressionStatement	 
>3064	AssignmentExpr	temp [ 2 * row * N + col ] = input [ row * N + col ]
>3065	ArrayIndexing	input [ row * N + col ]
>3066	AdditiveExpression	row * N + col
>3067	Identifier	col
>3068	MultiplicativeExpression	row * N
>3069	Identifier	N
>3070	Identifier	row
>3071	Identifier	input
>3072	ArrayIndexing	temp [ 2 * row * N + col ]
>3073	AdditiveExpression	2 * row * N + col
>3074	Identifier	col
>3075	MultiplicativeExpression	2 * row * N
>3076	MultiplicativeExpression	row * N
>3077	Identifier	N
>3078	Identifier	row
>3079	PrimaryExpression	2
>3080	Identifier	temp
>3081	IncDecOp	 
>3082	IncDec	++
>3083	Identifier	col
>3084	Condition	 
>3085	RelationalExpression	col < N
>3086	Identifier	N
>3087	Identifier	col
>3088	ForInit	 
>3089	AssignmentExpr	col = 0
>3090	PrimaryExpression	0
>3091	Identifier	col
>3092	IncDecOp	 
>3093	IncDec	++
>3094	Identifier	row
>3095	Condition	 
>3096	RelationalExpression	row < N
>3097	Identifier	N
>3098	Identifier	row
>3099	ForInit	 
>3100	AssignmentExpr	row = 0
>3101	PrimaryExpression	0
>3102	Identifier	row
>3103	IfStatement	if ( temp == 0 )
>3104	CompoundStatement	 
>3105	ReturnStatement	 
>3106	Identifier	false
>3107	ExpressionStatement	 
>3108	CallExpression	fprintf ( stderr , \"matrixInvert()
>3109	ArgumentList	stderr
>3110	Argument	\"matrixInvert()
>3111	PrimaryExpression	\"matrixInvert()
>3112	Argument	stderr
>3113	Identifier	stderr
>3114	Callee	fprintf
>3115	Identifier	fprintf
>3116	Condition	 
>3117	EqualityExpression	temp == 0
>3118	PrimaryExpression	0
>3119	Identifier	temp
>3120	IdentifierDeclStatement	 
>3121	IdentifierDecl	ftemp
>3122	Identifier	ftemp
>3123	IdentifierDeclType	double
>3124	IdentifierDeclStatement	 
>3125	IdentifierDecl	* temp = ( double * ) new double [ tempSize ]
>3126	AssignmentExpr	* temp = ( double * ) new double [ tempSize ]
>3127	CastExpression	( double * ) new double [ tempSize ]
>3128	Identifier	tempSize
>3129	CastTarget	double *
>3130	Identifier	temp
>3131	Identifier	temp
>3132	IdentifierDeclType	double *
>3133	IdentifierDeclStatement	 
>3134	IdentifierDecl	tempSize = 2 * N * N
>3135	AssignmentExpr	tempSize = 2 * N * N
>3136	MultiplicativeExpression	2 * N * N
>3137	MultiplicativeExpression	N * N
>3138	Identifier	N
>3139	Identifier	N
>3140	PrimaryExpression	2
>3141	Identifier	tempSize
>3142	Identifier	tempSize
>3143	IdentifierDeclType	int
>3144	ForStatement	for ( row = 0 ; row < N ; row ++ )
>3145	CompoundStatement	 
>3146	ExpressionStatement	 
>3147	CallExpression	fprintf ( stderr , \"\n\" )
>3148	ArgumentList	stderr
>3149	Argument	\"\n\"
>3150	PrimaryExpression	\"\n\"
>3151	Argument	stderr
>3152	Identifier	stderr
>3153	Callee	fprintf
>3154	Identifier	fprintf
>3155	ForStatement	for ( col = 0 ; col < N ; col ++ )
>3156	CompoundStatement	 
>3157	ExpressionStatement	 
>3158	CallExpression	fprintf ( stderr , \"%5.2f \" , input [ row * N + col ] )
>3159	ArgumentList	stderr
>3160	Argument	input [ row * N + col ]
>3161	ArrayIndexing	input [ row * N + col ]
>3162	AdditiveExpression	row * N + col
>3163	Identifier	col
>3164	MultiplicativeExpression	row * N
>3165	Identifier	N
>3166	Identifier	row
>3167	Identifier	input
>3168	Argument	\"%5.2f \"
>3169	PrimaryExpression	\"%5.2f \"
>3170	Argument	stderr
>3171	Identifier	stderr
>3172	Callee	fprintf
>3173	Identifier	fprintf
>3174	IncDecOp	 
>3175	IncDec	++
>3176	Identifier	col
>3177	Condition	 
>3178	RelationalExpression	col < N
>3179	Identifier	N
>3180	Identifier	col
>3181	ForInit	 
>3182	AssignmentExpr	col = 0
>3183	PrimaryExpression	0
>3184	Identifier	col
>3185	IncDecOp	 
>3186	IncDec	++
>3187	Identifier	row
>3188	Condition	 
>3189	RelationalExpression	row < N
>3190	Identifier	N
>3191	Identifier	row
>3192	ForInit	 
>3193	AssignmentExpr	row = 0
>3194	PrimaryExpression	0
>3195	Identifier	row
>3196	ExpressionStatement	 
>3197	CallExpression	fprintf ( stderr , \"Matrix Inversion input matrix (N=%d)\n\" , N )
>3198	ArgumentList	stderr
>3199	Argument	N
>3200	Identifier	N
>3201	Argument	\"Matrix Inversion input matrix (N=%d)\n\"
>3202	PrimaryExpression	\"Matrix Inversion input matrix (N=%d)\n\"
>3203	Argument	stderr
>3204	Identifier	stderr
>3205	Callee	fprintf
>3206	Identifier	fprintf
>3207	IdentifierDeclStatement	 
>3208	IdentifierDecl	col
>3209	Identifier	col
>3210	IdentifierDeclType	int
>3211	IdentifierDecl	row
>3212	Identifier	row
>3213	IdentifierDeclType	int
<9=12,11,10
<12=293,289,19,13
<13=14
<14=18,15
<15=17,16
<19=285,162,20
<20=21
<21=145,128,111,94,77,22
<22=73,69,66,23
<23=45,24
<24=25
<25=42,26
<26=41,27
<27=39,28
<28=35,29
<29=30
<30=32,31
<32=34,33
<35=36
<36=38,37
<39=40
<42=44,43
<45=46
<46=63,47
<47=62,48
<48=60,49
<49=56,50
<50=51
<51=53,52
<53=55,54
<56=57
<57=59,58
<60=61
<63=65,64
<66=68,67
<69=70
<70=72,71
<73=74
<74=76,75
<77=78
<78=93,79
<79=92,80
<80=90,81
<81=88,82
<82=83
<83=85,84
<85=87,86
<88=89
<90=91
<94=95
<95=110,96
<96=109,97
<97=107,98
<98=105,99
<99=100
<100=102,101
<102=104,103
<105=106
<107=108
<111=112
<112=127,113
<113=126,114
<114=124,115
<115=122,116
<116=117
<117=119,118
<119=121,120
<122=123
<124=125
<128=129
<129=144,130
<130=143,131
<131=141,132
<132=139,133
<133=134
<134=136,135
<136=138,137
<139=140
<141=142
<145=146
<146=161,147
<147=160,148
<148=158,149
<149=156,150
<150=151
<151=153,152
<153=155,154
<156=157
<158=159
<162=270,255,240,225,210,163
<163=206,202,199,164
<164=182,165
<165=166
<166=179,167
<167=178,168
<168=176,169
<169=172,170
<170=171
<172=173
<173=175,174
<176=177
<179=181,180
<182=183
<183=196,184
<184=195,185
<185=193,186
<186=189,187
<187=188
<189=190
<190=192,191
<193=194
<196=198,197
<199=201,200
<202=203
<203=205,204
<206=207
<207=209,208
<210=211
<211=224,212
<212=223,213
<213=221,214
<214=215
<215=216
<216=218,217
<218=220,219
<221=222
<225=226
<226=239,227
<227=238,228
<228=236,229
<229=230
<230=231
<231=233,232
<233=235,234
<236=237
<240=241
<241=254,242
<242=253,243
<243=251,244
<244=245
<245=246
<246=248,247
<248=250,249
<251=252
<255=256
<256=269,257
<257=268,258
<258=266,259
<259=260
<260=261
<261=263,262
<263=265,264
<266=267
<270=271
<271=284,272
<272=283,273
<273=281,274
<274=275
<275=276
<276=278,277
<278=280,279
<281=282
<285=286
<286=288,287
<289=290
<290=292,291
<293=294
<294=305,304,295
<295=303,296
<296=300,297
<297=299,298
<300=302,301
<326=338,337,327
<327=334,331,328
<328=330,329
<331=333,332
<334=336,335
<338=403,399,389,385,379,373,345,341,339
<339=340
<341=342
<342=344,343
<345=365,361,358,346
<346=347
<347=351,348
<348=350,349
<351=355,352
<352=354,353
<355=357,356
<358=360,359
<361=362
<362=364,363
<365=366
<366=367
<367=372,371,368
<368=370,369
<373=374
<374=376,375
<376=378,377
<379=380
<380=382,381
<382=384,383
<385=386
<386=388,387
<389=395,390
<390=391
<391=393,392
<393=394
<395=396
<396=398,397
<399=400
<400=402,401
<403=404
<404=406,405
<431=446,445,432
<432=442,439,436,433
<433=435,434
<436=438,437
<439=441,440
<442=444,443
<446=449,447
<447=448
<449=498,450
<450=491,485,479,451
<451=471,467,464,452
<452=453
<453=457,454
<454=456,455
<457=461,458
<458=460,459
<461=463,462
<464=466,465
<467=468
<468=470,469
<471=472
<472=473
<473=478,477,474
<474=476,475
<479=480
<480=482,481
<482=484,483
<485=486
<486=488,487
<488=490,489
<491=492
<492=497,496,493
<493=495,494
<498=499
<499=501,500
<525=537,536,526
<526=533,530,527
<527=529,528
<530=532,531
<533=535,534
<537=574,540,538
<538=539
<540=570,553,541
<541=542
<542=549,543
<543=544
<544=548,545
<545=547,546
<549=550
<550=552,551
<553=566,560,554
<554=555
<555=559,556
<556=558,557
<560=561
<561=565,562
<562=564,563
<566=567
<567=569,568
<570=571
<571=573,572
<574=575
<575=577,576
<593=602,601,594
<594=598,595
<595=597,596
<598=600,599
<602=605,603
<603=604
<605=725,721,718,606
<606=607
<607=692,608
<608=619,615,611,609
<609=610
<611=612
<612=614,613
<615=616
<616=618,617
<619=684,678,675,620
<620=665,655,621
<621=647,643,640,622
<622=623
<623=633,624
<624=630,625
<625=629,626
<626=628,627
<630=632,631
<633=637,634
<634=636,635
<637=639,638
<640=642,641
<643=644
<644=646,645
<647=648
<648=649
<649=654,653,650
<650=652,651
<655=656
<656=662,657
<657=661,658
<658=660,659
<662=664,663
<665=666
<666=672,667
<667=671,668
<668=670,669
<672=674,673
<675=677,676
<678=679
<679=683,680
<680=682,681
<684=685
<685=686
<686=691,690,687
<687=689,688
<692=693
<693=706,694
<694=696,695
<696=704,697
<697=698
<698=699
<699=703,700
<700=702,701
<704=705
<706=708,707
<708=716,709
<709=710
<710=711
<711=715,712
<712=714,713
<716=717
<718=720,719
<721=722
<722=724,723
<725=726
<726=727
<727=732,731,728
<728=730,729
<759=762,761,760
<762=1778,1774,1762,1750,1695,1662,1655,1648,1617,1607,1512,1506,1500,1490,1480,1470,1244,1240,1230,1220,1214,1195,1178,1161,1140,1105,1006,916,864,848,831,765,763
<763=764
<765=827,823,820,766
<766=816,812,809,767
<767=801,768
<768=797,793,790,769
<769=770
<770=785,771
<771=777,772
<772=774,773
<774=776,775
<777=783,778
<778=781,779
<779=780
<781=782
<783=784
<785=787,786
<787=789,788
<790=792,791
<793=794
<794=796,795
<797=798
<798=800,799
<801=802
<802=804,803
<804=806,805
<806=808,807
<809=811,810
<812=813
<813=815,814
<816=817
<817=819,818
<820=822,821
<823=824
<824=826,825
<827=828
<828=830,829
<831=844,832
<832=835,833
<833=834
<835=836
<836=842,837
<837=840,838
<838=839
<840=841
<842=843
<844=845
<845=847,846
<848=849
<849=863,862,850
<850=861,851
<851=859,852
<852=857,855,853
<853=854
<855=856
<857=858
<859=860
<864=912,908,905,865
<865=875,866
<866=867
<867=873,868
<868=871,869
<869=870
<871=872
<873=874
<875=901,897,894,876
<876=877
<877=892,878
<878=890,888,879
<879=880
<880=886,881
<881=884,882
<882=883
<884=885
<886=887
<888=889
<890=891
<892=893
<894=896,895
<897=898
<898=900,899
<901=902
<902=904,903
<905=907,906
<908=909
<909=911,910
<912=913
<913=915,914
<916=1002,998,995,917
<917=991,987,984,918
<918=950,919
<919=946,920
<920=921
<921=934,922
<922=932,923
<923=928,924
<924=925
<925=927,926
<928=929
<929=931,930
<932=933
<934=944,935
<935=940,936
<936=937
<937=939,938
<940=941
<941=943,942
<944=945
<946=947
<947=949,948
<950=951
<951=972,952
<952=970,953
<953=966,962,958,954
<954=955
<955=957,956
<958=959
<959=961,960
<962=963
<963=965,964
<966=967
<967=969,968
<970=971
<972=982,973
<973=978,974
<974=975
<975=977,976
<978=979
<979=981,980
<982=983
<984=986,985
<987=988
<988=990,989
<991=992
<992=994,993
<995=997,996
<998=999
<999=1001,1000
<1002=1003
<1003=1005,1004
<1006=1101,1097,1094,1007
<1007=1081,1066,1051,1038,1023,1008
<1008=1009
<1009=1013,1010
<1010=1012,1011
<1013=1021,1014
<1014=1017,1015
<1015=1016
<1017=1018
<1018=1020,1019
<1021=1022
<1023=1024
<1024=1028,1025
<1025=1027,1026
<1028=1036,1029
<1029=1032,1030
<1030=1031
<1032=1033
<1033=1035,1034
<1036=1037
<1038=1039
<1039=1041,1040
<1041=1049,1042
<1042=1045,1043
<1043=1044
<1045=1046
<1046=1048,1047
<1049=1050
<1051=1052
<1052=1056,1053
<1053=1055,1054
<1056=1064,1057
<1057=1062,1058
<1058=1059
<1059=1061,1060
<1062=1063
<1064=1065
<1066=1067
<1067=1071,1068
<1068=1070,1069
<1071=1079,1072
<1072=1077,1073
<1073=1074
<1074=1076,1075
<1077=1078
<1079=1080
<1081=1082
<1082=1084,1083
<1084=1092,1085
<1085=1090,1086
<1086=1087
<1087=1089,1088
<1090=1091
<1092=1093
<1094=1096,1095
<1097=1098
<1098=1100,1099
<1101=1102
<1102=1104,1103
<1105=1136,1132,1129,1106
<1106=1125,1121,1118,1107
<1107=1108
<1108=1110,1109
<1110=1116,1111
<1111=1114,1112
<1112=1113
<1114=1115
<1116=1117
<1118=1120,1119
<1121=1122
<1122=1124,1123
<1125=1126
<1126=1128,1127
<1129=1131,1130
<1132=1133
<1133=1135,1134
<1136=1137
<1137=1139,1138
<1140=1153,1141
<1141=1144,1142
<1142=1143
<1144=1145
<1145=1151,1146
<1146=1149,1147
<1147=1148
<1149=1150
<1151=1152
<1153=1154
<1154=1158,1155
<1155=1157,1156
<1158=1160,1159
<1161=1162
<1162=1177,1163
<1163=1176,1164
<1164=1174,1165
<1165=1170,1166
<1166=1167
<1167=1169,1168
<1170=1171
<1171=1173,1172
<1174=1175
<1178=1179
<1179=1194,1180
<1180=1193,1181
<1181=1191,1182
<1182=1187,1183
<1183=1184
<1184=1186,1185
<1187=1188
<1188=1190,1189
<1191=1192
<1195=1208,1196
<1196=1199,1197
<1197=1198
<1199=1200
<1200=1206,1201
<1201=1204,1202
<1202=1203
<1204=1205
<1206=1207
<1208=1209
<1209=1213,1210
<1210=1212,1211
<1214=1215
<1215=1219,1216
<1216=1218,1217
<1220=1228,1221
<1221=1222
<1222=1226,1223
<1223=1224
<1224=1225
<1226=1227
<1228=1229
<1230=1238,1231
<1231=1232
<1232=1236,1233
<1233=1234
<1234=1235
<1236=1237
<1238=1239
<1240=1241
<1241=1243,1242
<1244=1443,1245
<1245=1439,1435,1425,1415,1395,1391,1387,1330,1248,1246
<1246=1247
<1248=1326,1322,1319,1249
<1249=1310,1303,1262,1256,1250
<1250=1251
<1251=1253,1252
<1253=1255,1254
<1256=1257
<1257=1259,1258
<1259=1261,1260
<1262=1299,1295,1292,1263
<1263=1264
<1264=1288,1265
<1265=1266
<1266=1278,1267
<1267=1274,1268
<1268=1269
<1269=1273,1270
<1270=1272,1271
<1274=1275
<1275=1277,1276
<1278=1279
<1279=1285,1280
<1280=1282,1281
<1282=1284,1283
<1285=1287,1286
<1288=1289
<1289=1291,1290
<1292=1294,1293
<1295=1296
<1296=1298,1297
<1299=1300
<1300=1302,1301
<1303=1304
<1304=1309,1308,1305
<1305=1307,1306
<1310=1311
<1311=1318,1317,1312
<1312=1316,1313
<1313=1315,1314
<1319=1321,1320
<1322=1323
<1323=1325,1324
<1326=1327
<1327=1329,1328
<1330=1383,1379,1376,1331
<1331=1363,1350,1338,1332
<1332=1333
<1333=1335,1334
<1335=1337,1336
<1338=1339
<1339=1347,1340
<1340=1344,1341
<1341=1343,1342
<1344=1346,1345
<1347=1349,1348
<1350=1351
<1351=1362,1361,1352
<1352=1360,1353
<1353=1357,1354
<1354=1356,1355
<1357=1359,1358
<1363=1364
<1364=1375,1374,1365
<1365=1373,1366
<1366=1370,1367
<1367=1369,1368
<1370=1372,1371
<1376=1378,1377
<1379=1380
<1380=1382,1381
<1383=1384
<1384=1386,1385
<1387=1388
<1388=1390,1389
<1391=1392
<1392=1394,1393
<1395=1396
<1396=1414,1413,1397
<1397=1412,1398
<1398=1411,1399
<1399=1409,1400
<1400=1401
<1401=1402
<1402=1406,1403
<1403=1405,1404
<1406=1408,1407
<1409=1410
<1415=1416
<1416=1424,1417
<1417=1421,1418
<1418=1420,1419
<1421=1423,1422
<1425=1426
<1426=1434,1427
<1427=1431,1428
<1428=1430,1429
<1431=1433,1432
<1435=1436
<1436=1438,1437
<1439=1440
<1440=1442,1441
<1443=1444
<1444=1465,1445
<1445=1460,1446
<1446=1448,1447
<1448=1458,1449
<1449=1450
<1450=1451
<1451=1457,1452
<1452=1456,1453
<1453=1455,1454
<1458=1459
<1460=1464,1461
<1461=1463,1462
<1465=1469,1466
<1466=1468,1467
<1470=1471
<1471=1479,1472
<1472=1478,1473
<1473=1477,1474
<1474=1476,1475
<1480=1481
<1481=1489,1482
<1482=1488,1483
<1483=1487,1484
<1484=1486,1485
<1490=1491
<1491=1499,1492
<1492=1498,1493
<1493=1497,1494
<1494=1496,1495
<1500=1501
<1501=1505,1502
<1502=1504,1503
<1506=1507
<1507=1511,1508
<1508=1510,1509
<1512=1603,1599,1596,1513
<1513=1590,1584,1573,1562,1551,1540,1536,1530,1526,1520,1514
<1514=1515
<1515=1519,1516
<1516=1518,1517
<1520=1521
<1521=1525,1522
<1522=1524,1523
<1526=1527
<1527=1529,1528
<1530=1531
<1531=1535,1532
<1532=1534,1533
<1536=1537
<1537=1539,1538
<1540=1541
<1541=1550,1542
<1542=1548,1543
<1543=1546,1544
<1544=1545
<1546=1547
<1548=1549
<1551=1552
<1552=1561,1553
<1553=1559,1554
<1554=1557,1555
<1555=1556
<1557=1558
<1559=1560
<1562=1563
<1563=1572,1564
<1564=1570,1565
<1565=1568,1566
<1566=1567
<1568=1569
<1570=1571
<1573=1574
<1574=1583,1575
<1575=1581,1576
<1576=1579,1577
<1577=1578
<1579=1580
<1581=1582
<1584=1585
<1585=1589,1586
<1586=1588,1587
<1590=1591
<1591=1595,1592
<1592=1594,1593
<1596=1598,1597
<1599=1600
<1600=1602,1601
<1603=1604
<1604=1606,1605
<1607=1614,1611,1608
<1608=1610,1609
<1611=1613,1612
<1614=1616,1615
<1617=1642,1636,1630,1624,1618
<1618=1623,1622,1619
<1619=1621,1620
<1624=1629,1628,1625
<1625=1627,1626
<1630=1635,1634,1631
<1631=1633,1632
<1636=1641,1640,1637
<1637=1639,1638
<1642=1647,1646,1643
<1643=1645,1644
<1648=1652,1649
<1649=1651,1650
<1652=1654,1653
<1655=1659,1656
<1656=1658,1657
<1659=1661,1660
<1662=1687,1679,1671,1663
<1663=1670,1669,1664
<1664=1668,1665
<1665=1667,1666
<1671=1678,1677,1672
<1672=1676,1673
<1673=1675,1674
<1679=1686,1685,1680
<1680=1684,1681
<1681=1683,1682
<1687=1694,1693,1688
<1688=1692,1689
<1689=1691,1690
<1695=1746,1696
<1696=1736,1726,1711,1707,1703,1699,1697
<1697=1698
<1699=1700
<1700=1702,1701
<1703=1704
<1704=1706,1705
<1707=1708
<1708=1710,1709
<1711=1712
<1712=1725,1724,1713
<1713=1723,1714
<1714=1722,1715
<1715=1719,1716
<1716=1718,1717
<1719=1721,1720
<1726=1727
<1727=1735,1728
<1728=1732,1729
<1729=1731,1730
<1732=1734,1733
<1736=1737
<1737=1745,1738
<1738=1742,1739
<1739=1741,1740
<1742=1744,1743
<1746=1747
<1747=1749,1748
<1750=1758,1751
<1751=1754,1752
<1752=1753
<1754=1755
<1755=1757,1756
<1758=1759
<1759=1761,1760
<1762=1770,1763
<1763=1766,1764
<1764=1765
<1766=1767
<1767=1769,1768
<1770=1771
<1771=1773,1772
<1774=1775
<1775=1777,1776
<1778=1785,1782,1779
<1779=1781,1780
<1782=1784,1783
<1785=1787,1786
<1866=1878,1877,1867
<1867=1874,1871,1868
<1868=1870,1869
<1871=1873,1872
<1874=1876,1875
<1878=2378,2371,2367,2348,1881,1879
<1879=1880
<1881=2346,1882
<1882=2344,2326,2325,2323,2301,2300,2298,2280,2246,2245,2243,2225,2124,2108,2070,2069,2067,2029,1971,1970,1968,1959,1950,1932,1930,1929,1927,1918,1909,1891,1889,1888,1886,1884,1883
<1884=1885
<1886=1887
<1889=1890
<1891=1905,1901,1898,1892
<1892=1893
<1893=1895,1894
<1895=1897,1896
<1898=1900,1899
<1901=1902
<1902=1904,1903
<1905=1906
<1906=1908,1907
<1909=1910
<1910=1916,1911
<1911=1914,1912
<1912=1913
<1914=1915
<1916=1917
<1918=1919
<1919=1925,1920
<1920=1923,1921
<1921=1922
<1923=1924
<1925=1926
<1927=1928
<1930=1931
<1932=1946,1942,1939,1933
<1933=1934
<1934=1936,1935
<1936=1938,1937
<1939=1941,1940
<1942=1943
<1943=1945,1944
<1946=1947
<1947=1949,1948
<1950=1951
<1951=1957,1952
<1952=1955,1953
<1953=1954
<1955=1956
<1957=1958
<1959=1960
<1960=1966,1961
<1961=1964,1962
<1962=1963
<1964=1965
<1966=1967
<1968=1969
<1971=2025,2021,2018,1972
<1972=1999,1973
<1973=1995,1991,1988,1974
<1974=1975
<1975=1985,1976
<1976=1978,1977
<1978=1982,1979
<1979=1981,1980
<1982=1984,1983
<1985=1987,1986
<1988=1990,1989
<1991=1992
<1992=1994,1993
<1995=1996
<1996=1998,1997
<1999=2000
<2000=2017,2001
<2001=2015,2002
<2002=2013,2011,2007,2003
<2003=2004
<2004=2006,2005
<2007=2008
<2008=2010,2009
<2011=2012
<2013=2014
<2015=2016
<2018=2020,2019
<2021=2022
<2022=2024,2023
<2025=2026
<2026=2028,2027
<2029=2063,2059,2056,2030
<2030=2031
<2031=2053,2032
<2032=2048,2033
<2033=2041,2034
<2034=2036,2035
<2036=2038,2037
<2038=2040,2039
<2041=2043,2042
<2043=2045,2044
<2045=2047,2046
<2048=2050,2049
<2050=2052,2051
<2053=2055,2054
<2056=2058,2057
<2059=2060
<2060=2062,2061
<2063=2064
<2064=2066,2065
<2067=2068
<2070=2104,2100,2097,2071
<2071=2072
<2072=2094,2073
<2073=2083,2074
<2074=2082,2075
<2075=2079,2076
<2076=2078,2077
<2079=2081,2080
<2083=2091,2084
<2084=2088,2085
<2085=2087,2086
<2088=2090,2089
<2091=2093,2092
<2094=2096,2095
<2097=2099,2098
<2100=2101
<2101=2103,2102
<2104=2105
<2105=2107,2106
<2108=2109
<2109=2123,2110
<2110=2118,2111
<2111=2115,2112
<2112=2114,2113
<2115=2117,2116
<2118=2122,2119
<2119=2121,2120
<2124=2217,2204,2125
<2125=2126
<2126=2194,2177,2127
<2127=2128
<2128=2129
<2129=2173,2165,2162,2130
<2130=2154,2148,2131
<2131=2136,2132
<2132=2133
<2133=2135,2134
<2136=2137
<2137=2143,2138
<2138=2142,2139
<2139=2141,2140
<2143=2147,2144
<2144=2146,2145
<2148=2149
<2149=2153,2150
<2150=2152,2151
<2154=2155
<2155=2161,2156
<2156=2160,2157
<2157=2159,2158
<2162=2164,2163
<2165=2166
<2166=2170,2167
<2167=2169,2168
<2170=2172,2171
<2173=2174
<2174=2176,2175
<2177=2186,2178
<2178=2179
<2179=2185,2180
<2180=2184,2181
<2181=2183,2182
<2186=2187
<2187=2193,2188
<2188=2192,2189
<2189=2191,2190
<2194=2195
<2195=2203,2196
<2196=2202,2197
<2197=2201,2198
<2198=2200,2199
<2204=2211,2205
<2205=2206
<2206=2210,2207
<2207=2209,2208
<2211=2212
<2212=2216,2213
<2213=2215,2214
<2217=2218
<2218=2224,2219
<2219=2223,2220
<2220=2222,2221
<2225=2226
<2226=2242,2227
<2227=2235,2228
<2228=2234,2229
<2229=2233,2230
<2230=2232,2231
<2235=2241,2236
<2236=2240,2237
<2237=2239,2238
<2243=2244
<2246=2276,2272,2269,2247
<2247=2248
<2248=2266,2249
<2249=2257,2250
<2250=2256,2251
<2251=2253,2252
<2253=2255,2254
<2257=2263,2258
<2258=2260,2259
<2260=2262,2261
<2263=2265,2264
<2266=2268,2267
<2269=2271,2270
<2272=2273
<2273=2275,2274
<2276=2277
<2277=2279,2278
<2280=2281
<2281=2297,2282
<2282=2290,2283
<2283=2289,2284
<2284=2288,2285
<2285=2287,2286
<2290=2296,2291
<2291=2295,2292
<2292=2294,2293
<2298=2299
<2301=2319,2315,2312,2302
<2302=2303
<2303=2309,2304
<2304=2306,2305
<2306=2308,2307
<2309=2311,2310
<2312=2314,2313
<2315=2316
<2316=2318,2317
<2319=2320
<2320=2322,2321
<2323=2324
<2326=2340,2336,2333,2327
<2327=2328
<2328=2330,2329
<2330=2332,2331
<2333=2335,2334
<2336=2337
<2337=2339,2338
<2340=2341
<2341=2343,2342
<2344=2345
<2346=2347
<2348=2361,2355,2349
<2349=2354,2353,2350
<2350=2352,2351
<2355=2360,2359,2356
<2356=2358,2357
<2361=2366,2365,2362
<2362=2364,2363
<2367=2368
<2368=2370,2369
<2371=2375,2372
<2372=2374,2373
<2375=2377,2376
<2378=2382,2379
<2379=2381,2380
<2382=2384,2383
<2429=2444,2443,2430
<2430=2440,2437,2434,2431
<2431=2433,2432
<2434=2436,2435
<2437=2439,2438
<2440=2442,2441
<2444=2475,2454,2445
<2445=2446
<2446=2453,2447
<2447=2451,2448
<2448=2449
<2449=2450
<2451=2452
<2454=2455
<2455=2474,2473,2456
<2456=2472,2457
<2457=2465,2458
<2458=2462,2459
<2459=2461,2460
<2462=2464,2463
<2465=2469,2466
<2466=2468,2467
<2469=2471,2470
<2475=2478,2476
<2476=2477
<2478=2479
<2479=2483,2480
<2480=2482,2481
<2483=2485,2484
<2495=2507,2506,2496
<2496=2503,2500,2497
<2497=2499,2498
<2500=2502,2501
<2503=2505,2504
<2507=2526,2525,2524,2523,2522,2521,2520,2508
<2508=2511,2509
<2509=2510
<2511=2512
<2512=2518,2513
<2513=2516,2514
<2514=2515
<2516=2517
<2518=2519
<2526=2527
<2527=2592,2580,2573,2530,2528
<2528=2529
<2530=2569,2565,2562,2531
<2531=2558,2554,2551,2532
<2532=2533
<2533=2544,2534
<2534=2540,2535
<2535=2538,2536
<2536=2537
<2538=2539
<2540=2541
<2541=2543,2542
<2544=2550,2545
<2545=2547,2546
<2547=2549,2548
<2551=2553,2552
<2554=2555
<2555=2557,2556
<2558=2559
<2559=2561,2560
<2562=2564,2563
<2565=2566
<2566=2568,2567
<2569=2570
<2570=2572,2571
<2573=2577,2574
<2574=2576,2575
<2577=2579,2578
<2580=2581
<2581=2591,2590,2582
<2582=2589,2583
<2583=2587,2584
<2584=2585
<2585=2586
<2587=2588
<2592=2593
<2593=2602,2601,2594
<2594=2600,2595
<2595=2599,2596
<2596=2598,2597
<2622=2634,2633,2623
<2623=2630,2627,2624
<2624=2626,2625
<2627=2629,2628
<2630=2632,2631
<2634=3207,3196,3144,3133,3124,3120,3103,3031,3027,3020,2749,2703,2694,2642,2641,2640,2639,2637,2635
<2635=2636
<2637=2638
<2642=2690,2686,2683,2643
<2643=2653,2644
<2644=2645
<2645=2651,2646
<2646=2649,2647
<2647=2648
<2649=2650
<2651=2652
<2653=2679,2675,2672,2654
<2654=2655
<2655=2656
<2656=2670,2657
<2657=2668,2666,2658
<2658=2659
<2659=2665,2660
<2660=2662,2661
<2662=2664,2663
<2666=2667
<2668=2669
<2670=2671
<2672=2674,2673
<2675=2676
<2676=2678,2677
<2679=2680
<2680=2682,2681
<2683=2685,2684
<2686=2687
<2687=2689,2688
<2690=2691
<2691=2693,2692
<2694=2695
<2695=2701,2696
<2696=2699,2697
<2697=2698
<2699=2700
<2701=2702
<2703=2745,2741,2738,2704
<2704=2705
<2705=2734,2730,2727,2706
<2706=2707
<2707=2708
<2708=2720,2709
<2709=2719,2710
<2710=2714,2711
<2711=2713,2712
<2714=2718,2715
<2715=2717,2716
<2720=2726,2721
<2721=2723,2722
<2723=2725,2724
<2727=2729,2728
<2730=2731
<2731=2733,2732
<2734=2735
<2735=2737,2736
<2738=2740,2739
<2741=2742
<2742=2744,2743
<2745=2746
<2746=2748,2747
<2749=3016,3012,3009,2750
<2750=2881,2869,2856,2829,2818,2751
<2751=2814,2810,2807,2752
<2752=2753
<2753=2803,2754
<2754=2792,2784,2755
<2755=2780,2774,2771,2756
<2756=2757
<2757=2758
<2758=2766,2759
<2759=2765,2760
<2760=2764,2761
<2761=2763,2762
<2766=2770,2767
<2767=2769,2768
<2771=2773,2772
<2774=2775
<2775=2779,2776
<2776=2778,2777
<2780=2781
<2781=2783,2782
<2784=2785
<2785=2791,2786
<2786=2790,2787
<2787=2789,2788
<2792=2793
<2793=2802,2801,2794
<2794=2800,2795
<2795=2799,2796
<2796=2798,2797
<2803=2804
<2804=2806,2805
<2807=2809,2808
<2810=2811
<2811=2813,2812
<2814=2815
<2815=2817,2816
<2818=2819
<2819=2828,2827,2820
<2820=2826,2821
<2821=2825,2822
<2822=2824,2823
<2829=2852,2846,2843,2830
<2830=2831
<2831=2832
<2832=2834,2833
<2834=2842,2835
<2835=2837,2836
<2837=2841,2838
<2838=2840,2839
<2843=2845,2844
<2846=2847
<2847=2851,2848
<2848=2850,2849
<2852=2853
<2853=2855,2854
<2856=2865,2857
<2857=2864,2863,2862,2860,2858
<2858=2859
<2860=2861
<2865=2866
<2866=2868,2867
<2869=2870
<2870=2880,2871
<2871=2879,2872
<2872=2874,2873
<2874=2878,2875
<2875=2877,2876
<2881=3003,2882
<2882=2999,2948,2883
<2883=2944,2884
<2884=2885
<2885=2940,2934,2931,2886
<2886=2919,2899,2887
<2887=2888
<2888=2890,2889
<2890=2898,2891
<2891=2893,2892
<2893=2897,2894
<2894=2896,2895
<2899=2900
<2900=2910,2901
<2901=2909,2902
<2902=2904,2903
<2904=2908,2905
<2905=2907,2906
<2910=2918,2911
<2911=2913,2912
<2913=2917,2914
<2914=2916,2915
<2919=2920
<2920=2930,2921
<2921=2929,2922
<2922=2924,2923
<2924=2928,2925
<2925=2927,2926
<2931=2933,2932
<2934=2935
<2935=2939,2936
<2936=2938,2937
<2940=2941
<2941=2943,2942
<2944=2945
<2945=2947,2946
<2948=2993,2989,2986,2949
<2949=2950
<2950=2956,2951
<2951=2952
<2952=2953
<2953=2955,2954
<2956=2957
<2957=2972,2958
<2958=2970,2959
<2959=2960
<2960=2961
<2961=2969,2962
<2962=2964,2963
<2964=2968,2965
<2965=2967,2966
<2970=2971
<2972=2984,2973
<2973=2974
<2974=2975
<2975=2983,2976
<2976=2978,2977
<2978=2982,2979
<2979=2981,2980
<2984=2985
<2986=2988,2987
<2989=2990
<2990=2992,2991
<2993=2994
<2994=2998,2995
<2995=2997,2996
<2999=3000
<3000=3002,3001
<3003=3004
<3004=3006,3005
<3006=3008,3007
<3009=3011,3010
<3012=3013
<3013=3015,3014
<3016=3017
<3017=3019,3018
<3020=3021
<3021=3026,3025,3022
<3022=3024,3023
<3027=3028
<3028=3030,3029
<3031=3099,3095,3092,3032
<3032=3047,3033
<3033=3034
<3034=3036,3035
<3036=3046,3037
<3037=3041,3038
<3038=3040,3039
<3041=3045,3042
<3042=3044,3043
<3047=3088,3084,3081,3048
<3048=3063,3049
<3049=3050
<3050=3052,3051
<3052=3062,3053
<3053=3057,3054
<3054=3056,3055
<3057=3061,3058
<3058=3060,3059
<3063=3064
<3064=3072,3065
<3065=3071,3066
<3066=3068,3067
<3068=3070,3069
<3072=3080,3073
<3073=3075,3074
<3075=3079,3076
<3076=3078,3077
<3081=3083,3082
<3084=3085
<3085=3087,3086
<3088=3089
<3089=3091,3090
<3092=3094,3093
<3095=3096
<3096=3098,3097
<3099=3100
<3100=3102,3101
<3103=3116,3104
<3104=3107,3105
<3105=3106
<3107=3108
<3108=3114,3109
<3109=3112,3110
<3110=3111
<3112=3113
<3114=3115
<3116=3117
<3117=3119,3118
<3120=3121
<3121=3123,3122
<3124=3125
<3125=3132,3131,3126
<3126=3130,3127
<3127=3129,3128
<3133=3134
<3134=3143,3142,3135
<3135=3141,3136
<3136=3140,3137
<3137=3139,3138
<3144=3192,3188,3185,3145
<3145=3155,3146
<3146=3147
<3147=3153,3148
<3148=3151,3149
<3149=3150
<3151=3152
<3153=3154
<3155=3181,3177,3174,3156
<3156=3157
<3157=3158
<3158=3172,3159
<3159=3170,3168,3160
<3160=3161
<3161=3167,3162
<3162=3164,3163
<3164=3166,3165
<3168=3169
<3170=3171
<3172=3173
<3174=3176,3175
<3177=3178
<3178=3180,3179
<3181=3182
<3182=3184,3183
<3185=3187,3186
<3188=3189
<3189=3191,3190
<3192=3193
<3193=3195,3194
<3196=3197
<3197=3205,3198
<3198=3203,3201,3199
<3199=3200
<3201=3202
<3203=3204
<3205=3206
<3207=3211,3208
<3208=3210,3209
<3211=3213,3212
