>24	FunctionDef	T__updateExtpat_struct_t ()
>25	ParameterList	 
>26	CompoundStatement	 
>27	ExpressionStatement	 
>28	AssignmentExpr	this -> length = 0
>29	PrimaryExpression	0
>30	PtrMemberAccess	this -> length
>31	Identifier	length
>32	Identifier	this
>33	ExpressionStatement	 
>34	AssignmentExpr	this -> buf_int = NULL
>35	Identifier	NULL
>36	PtrMemberAccess	this -> buf_int
>37	Identifier	buf_int
>38	Identifier	this
>39	ExpressionStatement	 
>40	AssignmentExpr	this -> buf_double = NULL
>41	Identifier	NULL
>42	PtrMemberAccess	this -> buf_double
>43	Identifier	buf_double
>44	Identifier	this
>54	FunctionDef	~T__updateExtpat_struct_t ()
>55	ParameterList	 
>56	CompoundStatement	 
>57	ExpressionStatement	 
>58	CallExpression	NyAR_SAFE_DELETE ( this -> buf_int )
>59	ArgumentList	this -> buf_int
>60	Argument	this -> buf_int
>61	PtrMemberAccess	this -> buf_int
>62	Identifier	buf_int
>63	Identifier	this
>64	Callee	NyAR_SAFE_DELETE
>65	Identifier	NyAR_SAFE_DELETE
>66	ExpressionStatement	 
>67	CallExpression	NyAR_SAFE_DELETE ( this -> buf_double )
>68	ArgumentList	this -> buf_double
>69	Argument	this -> buf_double
>70	PtrMemberAccess	this -> buf_double
>71	Identifier	buf_double
>72	Identifier	this
>73	Callee	NyAR_SAFE_DELETE
>74	Identifier	NyAR_SAFE_DELETE
>82	FunctionDef	reservWorkBuffers (int i_xdiv2)
>83	ParameterList	int i_xdiv2
>84	Parameter	 
>85	Identifier	i_xdiv2
>86	ParameterType	int
>87	ReturnType	void
>88	CompoundStatement	 
>89	ReturnStatement	 
>90	ExpressionStatement	 
>91	AssignmentExpr	this -> length = i_xdiv2
>92	Identifier	i_xdiv2
>93	PtrMemberAccess	this -> length
>94	Identifier	length
>95	Identifier	this
>96	ExpressionStatement	 
>97	AssignmentExpr	this -> rgb_buf = this -> i_rgb_index + i_xdiv2
>98	AdditiveExpression	this -> i_rgb_index + i_xdiv2
>99	Identifier	i_xdiv2
>100	PtrMemberAccess	this -> i_rgb_index
>101	Identifier	i_rgb_index
>102	Identifier	this
>103	PtrMemberAccess	this -> rgb_buf
>104	Identifier	rgb_buf
>105	Identifier	this
>106	ExpressionStatement	 
>107	AssignmentExpr	this -> i_rgb_index = this -> y_rgb_index + i_xdiv2
>108	AdditiveExpression	this -> y_rgb_index + i_xdiv2
>109	Identifier	i_xdiv2
>110	PtrMemberAccess	this -> y_rgb_index
>111	Identifier	y_rgb_index
>112	Identifier	this
>113	PtrMemberAccess	this -> i_rgb_index
>114	Identifier	i_rgb_index
>115	Identifier	this
>116	ExpressionStatement	 
>117	AssignmentExpr	this -> y_rgb_index = this -> x_rgb_index + i_xdiv2
>118	AdditiveExpression	this -> x_rgb_index + i_xdiv2
>119	Identifier	i_xdiv2
>120	PtrMemberAccess	this -> x_rgb_index
>121	Identifier	x_rgb_index
>122	Identifier	this
>123	PtrMemberAccess	this -> y_rgb_index
>124	Identifier	y_rgb_index
>125	Identifier	this
>126	ExpressionStatement	 
>127	AssignmentExpr	this -> x_rgb_index = this -> buf_int
>128	PtrMemberAccess	this -> buf_int
>129	Identifier	buf_int
>130	Identifier	this
>131	PtrMemberAccess	this -> x_rgb_index
>132	Identifier	x_rgb_index
>133	Identifier	this
>134	ExpressionStatement	 
>135	AssignmentExpr	this -> para20_xw = this -> para10_xw + i_xdiv2
>136	AdditiveExpression	this -> para10_xw + i_xdiv2
>137	Identifier	i_xdiv2
>138	PtrMemberAccess	this -> para10_xw
>139	Identifier	para10_xw
>140	Identifier	this
>141	PtrMemberAccess	this -> para20_xw
>142	Identifier	para20_xw
>143	Identifier	this
>144	ExpressionStatement	 
>145	AssignmentExpr	this -> para10_xw = this -> para00_xw + i_xdiv2
>146	AdditiveExpression	this -> para00_xw + i_xdiv2
>147	Identifier	i_xdiv2
>148	PtrMemberAccess	this -> para00_xw
>149	Identifier	para00_xw
>150	Identifier	this
>151	PtrMemberAccess	this -> para10_xw
>152	Identifier	para10_xw
>153	Identifier	this
>154	ExpressionStatement	 
>155	AssignmentExpr	this -> para00_xw = this -> buf_double
>156	PtrMemberAccess	this -> buf_double
>157	Identifier	buf_double
>158	Identifier	this
>159	PtrMemberAccess	this -> para00_xw
>160	Identifier	para00_xw
>161	Identifier	this
>162	IfStatement	if ( this -> length < i_xdiv2 )
>163	CompoundStatement	 
>164	ExpressionStatement	 
>165	AssignmentExpr	this -> buf_int = new_int
>166	Identifier	new_int
>167	PtrMemberAccess	this -> buf_int
>168	Identifier	buf_int
>169	Identifier	this
>170	ExpressionStatement	 
>171	AssignmentExpr	this -> buf_double = new_double
>172	Identifier	new_double
>173	PtrMemberAccess	this -> buf_double
>174	Identifier	buf_double
>175	Identifier	this
>176	ExpressionStatement	 
>177	CallExpression	NyAR_SAFE_DELETE ( this -> buf_int )
>178	ArgumentList	this -> buf_int
>179	Argument	this -> buf_int
>180	PtrMemberAccess	this -> buf_int
>181	Identifier	buf_int
>182	Identifier	this
>183	Callee	NyAR_SAFE_DELETE
>184	Identifier	NyAR_SAFE_DELETE
>185	ExpressionStatement	 
>186	CallExpression	NyAR_SAFE_DELETE ( this -> buf_double )
>187	ArgumentList	this -> buf_double
>188	Argument	this -> buf_double
>189	PtrMemberAccess	this -> buf_double
>190	Identifier	buf_double
>191	Identifier	this
>192	Callee	NyAR_SAFE_DELETE
>193	Identifier	NyAR_SAFE_DELETE
>194	ExpressionStatement	 
>195	AssignmentExpr	new_int = new int [ i_xdiv2 * ( 3 + 1 + 1 + 1 ) ]
>196	MultiplicativeExpression	i_xdiv2 * ( 3 + 1 + 1 + 1 )
>197	AdditiveExpression	3 + 1 + 1 + 1
>198	AdditiveExpression	1 + 1 + 1
>199	AdditiveExpression	1 + 1
>200	PrimaryExpression	1
>201	PrimaryExpression	1
>202	PrimaryExpression	1
>203	PrimaryExpression	3
>204	Identifier	i_xdiv2
>205	Identifier	new_int
>206	ExpressionStatement	 
>207	AssignmentExpr	new_double = new double [ i_xdiv2 * 3 ]
>208	MultiplicativeExpression	i_xdiv2 * 3
>209	PrimaryExpression	3
>210	Identifier	i_xdiv2
>211	Identifier	new_double
>212	Condition	 
>213	RelationalExpression	this -> length < i_xdiv2
>214	Identifier	i_xdiv2
>215	PtrMemberAccess	this -> length
>216	Identifier	length
>217	Identifier	this
>218	IdentifierDeclStatement	 
>219	IdentifierDecl	* new_double
>220	Identifier	new_double
>221	IdentifierDeclType	double *
>222	IdentifierDeclStatement	 
>223	IdentifierDecl	* new_int
>224	Identifier	new_int
>225	IdentifierDeclType	int *
>244	FunctionDef	NyARColorPatt_O3 
>245	ParameterList	int i_width , int i_height
>246	Parameter	 
>247	Identifier	i_height
>248	ParameterType	int
>249	Parameter	 
>250	Identifier	i_width
>251	ParameterType	int
>252	CompoundStatement	 
>253	ExpressionStatement	 
>254	AssignmentExpr	this -> __updateExtpat = new T__updateExtpat_struct_t ( )
>255	UnaryExpression	new T__updateExtpat_struct_t ( )
>256	PtrMemberAccess	this -> __updateExtpat
>257	Identifier	__updateExtpat
>258	Identifier	this
>259	ExpressionStatement	 
>260	AssignmentExpr	this -> __pickFromRaster_cpara = new NyARMat ( 8 , 1 )
>261	Expression	8 , 1
>262	PrimaryExpression	1
>263	PrimaryExpression	8
>264	PtrMemberAccess	this -> __pickFromRaster_cpara
>265	Identifier	__pickFromRaster_cpara
>266	Identifier	this
>267	ExpressionStatement	 
>268	AssignmentExpr	this -> __get_cpara_b = new NyARMat ( 8 , 1 )
>269	Expression	8 , 1
>270	PrimaryExpression	1
>271	PrimaryExpression	8
>272	PtrMemberAccess	this -> __get_cpara_b
>273	Identifier	__get_cpara_b
>274	Identifier	this
>275	ExpressionStatement	 
>276	AssignmentExpr	this -> __get_cpara_a = new NyARMat ( 8 , 8 )
>277	Expression	8 , 8
>278	PrimaryExpression	8
>279	PrimaryExpression	8
>280	PtrMemberAccess	this -> __get_cpara_a
>281	Identifier	__get_cpara_a
>282	Identifier	this
>283	ExpressionStatement	 
>284	AssignmentExpr	this -> _extpat = new int [ i_height * i_width * 3 ]
>285	MultiplicativeExpression	i_height * i_width * 3
>286	MultiplicativeExpression	i_width * 3
>287	PrimaryExpression	3
>288	Identifier	i_width
>289	Identifier	i_height
>290	PtrMemberAccess	this -> _extpat
>291	Identifier	_extpat
>292	Identifier	this
>293	ExpressionStatement	 
>294	AssignmentExpr	this -> _height = i_height
>295	Identifier	i_height
>296	PtrMemberAccess	this -> _height
>297	Identifier	_height
>298	Identifier	this
>299	ExpressionStatement	 
>300	AssignmentExpr	this -> _width = i_width
>301	Identifier	i_width
>302	PtrMemberAccess	this -> _width
>303	Identifier	_width
>304	Identifier	this
>319	FunctionDef	NyARColorPatt_O3 
>320	ParameterList	 
>321	CompoundStatement	 
>322	ReturnStatement	 
>323	ExpressionStatement	 
>324	CallExpression	NyAR_SAFE_DELETE ( this -> __updateExtpat )
>325	ArgumentList	this -> __updateExtpat
>326	Argument	this -> __updateExtpat
>327	PtrMemberAccess	this -> __updateExtpat
>328	Identifier	__updateExtpat
>329	Identifier	this
>330	Callee	NyAR_SAFE_DELETE
>331	Identifier	NyAR_SAFE_DELETE
>332	ExpressionStatement	 
>333	CallExpression	NyAR_SAFE_DELETE ( this -> __pickFromRaster_cpara )
>334	ArgumentList	this -> __pickFromRaster_cpara
>335	Argument	this -> __pickFromRaster_cpara
>336	PtrMemberAccess	this -> __pickFromRaster_cpara
>337	Identifier	__pickFromRaster_cpara
>338	Identifier	this
>339	Callee	NyAR_SAFE_DELETE
>340	Identifier	NyAR_SAFE_DELETE
>341	ExpressionStatement	 
>342	CallExpression	NyAR_SAFE_DELETE ( this -> __get_cpara_b )
>343	ArgumentList	this -> __get_cpara_b
>344	Argument	this -> __get_cpara_b
>345	PtrMemberAccess	this -> __get_cpara_b
>346	Identifier	__get_cpara_b
>347	Identifier	this
>348	Callee	NyAR_SAFE_DELETE
>349	Identifier	NyAR_SAFE_DELETE
>350	ExpressionStatement	 
>351	CallExpression	NyAR_SAFE_DELETE ( this -> __get_cpara_a )
>352	ArgumentList	this -> __get_cpara_a
>353	Argument	this -> __get_cpara_a
>354	PtrMemberAccess	this -> __get_cpara_a
>355	Identifier	__get_cpara_a
>356	Identifier	this
>357	Callee	NyAR_SAFE_DELETE
>358	Identifier	NyAR_SAFE_DELETE
>359	ExpressionStatement	 
>360	CallExpression	NyAR_SAFE_DELETE ( this -> _extpat )
>361	ArgumentList	this -> _extpat
>362	Argument	this -> _extpat
>363	PtrMemberAccess	this -> _extpat
>364	Identifier	_extpat
>365	Identifier	this
>366	Callee	NyAR_SAFE_DELETE
>367	Identifier	NyAR_SAFE_DELETE
>378	FunctionDef	NyARColorPatt_O3 
>379	ParameterList	 
>380	ReturnType	const int *
>381	CompoundStatement	 
>382	ReturnStatement	 
>383	PtrMemberAccess	this -> _extpat
>384	Identifier	_extpat
>385	Identifier	this
>392	FunctionDef	NyARColorPatt_O3 
>393	ParameterList	 
>394	ReturnType	int
>395	CompoundStatement	 
>396	ReturnStatement	 
>397	PtrMemberAccess	this -> _width
>398	Identifier	_width
>399	Identifier	this
>406	FunctionDef	NyARColorPatt_O3 
>407	ParameterList	 
>408	ReturnType	int
>409	CompoundStatement	 
>410	ReturnStatement	 
>411	PtrMemberAccess	this -> _height
>412	Identifier	_height
>413	Identifier	this
>420	FunctionDef	NyARColorPatt_O3 
>421	ParameterList	const TNyARIntPoint i_vertex [ ] , NyARMat & o_para
>422	Parameter	 
>423	Identifier	o_para
>424	ParameterType	NyARMat &
>425	Parameter	 
>426	Identifier	i_vertex
>427	ParameterType	const TNyARIntPoint [ ]
>428	ReturnType	bool
>429	CompoundStatement	 
>430	ReturnStatement	 
>431	Identifier	true
>432	ExpressionStatement	 
>433	CallExpression	o_para . matrixMul ( * a , * b )
>434	ArgumentList	* a
>435	Argument	* b
>436	UnaryOp	* b
>437	Identifier	b
>438	UnaryOperator	*
>439	Argument	* a
>440	UnaryOp	* a
>441	Identifier	a
>442	UnaryOperator	*
>443	Callee	o_para . matrixMul
>444	MemberAccess	o_para . matrixMul
>445	Identifier	matrixMul
>446	Identifier	o_para
>447	IfStatement	if ( ! a -> matrixSelfInv ( ) )
>448	CompoundStatement	 
>449	ReturnStatement	 
>450	Identifier	false
>451	Condition	 
>452	UnaryOp	! a -> matrixSelfInv ( )
>453	CallExpression	a -> matrixSelfInv ( )
>454	ArgumentList	 
>455	Callee	a -> matrixSelfInv
>456	PtrMemberAccess	a -> matrixSelfInv
>457	Identifier	matrixSelfInv
>458	Identifier	a
>459	UnaryOperator	!
>460	ForStatement	for ( int i = 0 ; i < 4 ; i ++ )
>461	CompoundStatement	 
>462	ExpressionStatement	 
>463	AssignmentExpr	b_array [ ( i * 2 + 1 ) * 1 + 0 ] = ( double ) i_vertex [ i ] . y
>464	CastExpression	( double ) i_vertex [ i ] . y
>465	MemberAccess	i_vertex [ i ] . y
>466	Identifier	y
>467	ArrayIndexing	i_vertex [ i ]
>468	Identifier	i
>469	Identifier	i_vertex
>470	CastTarget	double
>471	ArrayIndexing	b_array [ ( i * 2 + 1 ) * 1 + 0 ]
>472	AdditiveExpression	( i * 2 + 1 ) * 1 + 0
>473	PrimaryExpression	0
>474	MultiplicativeExpression	( i * 2 + 1 ) * 1
>475	PrimaryExpression	1
>476	AdditiveExpression	i * 2 + 1
>477	PrimaryExpression	1
>478	MultiplicativeExpression	i * 2
>479	PrimaryExpression	2
>480	Identifier	i
>481	Identifier	b_array
>482	ExpressionStatement	 
>483	AssignmentExpr	b_array [ ( i * 2 + 0 ) * 1 + 0 ] = ( double ) i_vertex [ i ] . x
>484	CastExpression	( double ) i_vertex [ i ] . x
>485	MemberAccess	i_vertex [ i ] . x
>486	Identifier	x
>487	ArrayIndexing	i_vertex [ i ]
>488	Identifier	i
>489	Identifier	i_vertex
>490	CastTarget	double
>491	ArrayIndexing	b_array [ ( i * 2 + 0 ) * 1 + 0 ]
>492	AdditiveExpression	( i * 2 + 0 ) * 1 + 0
>493	PrimaryExpression	0
>494	MultiplicativeExpression	( i * 2 + 0 ) * 1
>495	PrimaryExpression	1
>496	AdditiveExpression	i * 2 + 0
>497	PrimaryExpression	0
>498	MultiplicativeExpression	i * 2
>499	PrimaryExpression	2
>500	Identifier	i
>501	Identifier	b_array
>502	ExpressionStatement	 
>503	AssignmentExpr	a_pt1 [ 7 ] = ( double ) ( - world_pti [ 1 ] * i_vertex [ i ] . y )
>504	CastExpression	( double ) ( - world_pti [ 1 ] * i_vertex [ i ] . y )
>505	MultiplicativeExpression	- world_pti [ 1 ] * i_vertex [ i ] . y
>506	MemberAccess	i_vertex [ i ] . y
>507	Identifier	y
>508	ArrayIndexing	i_vertex [ i ]
>509	Identifier	i
>510	Identifier	i_vertex
>511	UnaryOp	- world_pti [ 1 ]
>512	ArrayIndexing	world_pti [ 1 ]
>513	PrimaryExpression	1
>514	Identifier	world_pti
>515	UnaryOperator	-
>516	CastTarget	double
>517	ArrayIndexing	a_pt1 [ 7 ]
>518	PrimaryExpression	7
>519	Identifier	a_pt1
>520	ExpressionStatement	 
>521	AssignmentExpr	a_pt1 [ 6 ] = ( double ) ( - world_pti [ 0 ] * i_vertex [ i ] . y )
>522	CastExpression	( double ) ( - world_pti [ 0 ] * i_vertex [ i ] . y )
>523	MultiplicativeExpression	- world_pti [ 0 ] * i_vertex [ i ] . y
>524	MemberAccess	i_vertex [ i ] . y
>525	Identifier	y
>526	ArrayIndexing	i_vertex [ i ]
>527	Identifier	i
>528	Identifier	i_vertex
>529	UnaryOp	- world_pti [ 0 ]
>530	ArrayIndexing	world_pti [ 0 ]
>531	PrimaryExpression	0
>532	Identifier	world_pti
>533	UnaryOperator	-
>534	CastTarget	double
>535	ArrayIndexing	a_pt1 [ 6 ]
>536	PrimaryExpression	6
>537	Identifier	a_pt1
>538	ExpressionStatement	 
>539	AssignmentExpr	a_pt1 [ 5 ] = 1.0
>540	PrimaryExpression	1.0
>541	ArrayIndexing	a_pt1 [ 5 ]
>542	PrimaryExpression	5
>543	Identifier	a_pt1
>544	ExpressionStatement	 
>545	AssignmentExpr	a_pt1 [ 4 ] = ( double ) world_pti [ 1 ]
>546	CastExpression	( double ) world_pti [ 1 ]
>547	ArrayIndexing	world_pti [ 1 ]
>548	PrimaryExpression	1
>549	Identifier	world_pti
>550	CastTarget	double
>551	ArrayIndexing	a_pt1 [ 4 ]
>552	PrimaryExpression	4
>553	Identifier	a_pt1
>554	ExpressionStatement	 
>555	AssignmentExpr	a_pt1 [ 3 ] = ( double ) world_pti [ 0 ]
>556	CastExpression	( double ) world_pti [ 0 ]
>557	ArrayIndexing	world_pti [ 0 ]
>558	PrimaryExpression	0
>559	Identifier	world_pti
>560	CastTarget	double
>561	ArrayIndexing	a_pt1 [ 3 ]
>562	PrimaryExpression	3
>563	Identifier	a_pt1
>564	ExpressionStatement	 
>565	AssignmentExpr	a_pt1 [ 2 ] = 0.0
>566	PrimaryExpression	0.0
>567	ArrayIndexing	a_pt1 [ 2 ]
>568	PrimaryExpression	2
>569	Identifier	a_pt1
>570	ExpressionStatement	 
>571	AssignmentExpr	a_pt1 [ 1 ] = 0.0
>572	PrimaryExpression	0.0
>573	ArrayIndexing	a_pt1 [ 1 ]
>574	PrimaryExpression	1
>575	Identifier	a_pt1
>576	ExpressionStatement	 
>577	AssignmentExpr	a_pt1 [ 0 ] = 0.0
>578	PrimaryExpression	0.0
>579	ArrayIndexing	a_pt1 [ 0 ]
>580	PrimaryExpression	0
>581	Identifier	a_pt1
>582	ExpressionStatement	 
>583	AssignmentExpr	a_pt0 [ 7 ] = ( double ) ( - world_pti [ 1 ] * i_vertex [ i ] . x )
>584	CastExpression	( double ) ( - world_pti [ 1 ] * i_vertex [ i ] . x )
>585	MultiplicativeExpression	- world_pti [ 1 ] * i_vertex [ i ] . x
>586	MemberAccess	i_vertex [ i ] . x
>587	Identifier	x
>588	ArrayIndexing	i_vertex [ i ]
>589	Identifier	i
>590	Identifier	i_vertex
>591	UnaryOp	- world_pti [ 1 ]
>592	ArrayIndexing	world_pti [ 1 ]
>593	PrimaryExpression	1
>594	Identifier	world_pti
>595	UnaryOperator	-
>596	CastTarget	double
>597	ArrayIndexing	a_pt0 [ 7 ]
>598	PrimaryExpression	7
>599	Identifier	a_pt0
>600	ExpressionStatement	 
>601	AssignmentExpr	a_pt0 [ 6 ] = ( double ) ( - world_pti [ 0 ] * i_vertex [ i ] . x )
>602	CastExpression	( double ) ( - world_pti [ 0 ] * i_vertex [ i ] . x )
>603	MultiplicativeExpression	- world_pti [ 0 ] * i_vertex [ i ] . x
>604	MemberAccess	i_vertex [ i ] . x
>605	Identifier	x
>606	ArrayIndexing	i_vertex [ i ]
>607	Identifier	i
>608	Identifier	i_vertex
>609	UnaryOp	- world_pti [ 0 ]
>610	ArrayIndexing	world_pti [ 0 ]
>611	PrimaryExpression	0
>612	Identifier	world_pti
>613	UnaryOperator	-
>614	CastTarget	double
>615	ArrayIndexing	a_pt0 [ 6 ]
>616	PrimaryExpression	6
>617	Identifier	a_pt0
>618	ExpressionStatement	 
>619	AssignmentExpr	a_pt0 [ 5 ] = 0.0
>620	PrimaryExpression	0.0
>621	ArrayIndexing	a_pt0 [ 5 ]
>622	PrimaryExpression	5
>623	Identifier	a_pt0
>624	ExpressionStatement	 
>625	AssignmentExpr	a_pt0 [ 4 ] = 0.0
>626	PrimaryExpression	0.0
>627	ArrayIndexing	a_pt0 [ 4 ]
>628	PrimaryExpression	4
>629	Identifier	a_pt0
>630	ExpressionStatement	 
>631	AssignmentExpr	a_pt0 [ 3 ] = 0.0
>632	PrimaryExpression	0.0
>633	ArrayIndexing	a_pt0 [ 3 ]
>634	PrimaryExpression	3
>635	Identifier	a_pt0
>636	ExpressionStatement	 
>637	AssignmentExpr	a_pt0 [ 2 ] = 1.0
>638	PrimaryExpression	1.0
>639	ArrayIndexing	a_pt0 [ 2 ]
>640	PrimaryExpression	2
>641	Identifier	a_pt0
>642	ExpressionStatement	 
>643	AssignmentExpr	a_pt0 [ 1 ] = ( double ) world_pti [ 1 ]
>644	CastExpression	( double ) world_pti [ 1 ]
>645	ArrayIndexing	world_pti [ 1 ]
>646	PrimaryExpression	1
>647	Identifier	world_pti
>648	CastTarget	double
>649	ArrayIndexing	a_pt0 [ 1 ]
>650	PrimaryExpression	1
>651	Identifier	a_pt0
>652	ExpressionStatement	 
>653	AssignmentExpr	a_pt0 [ 0 ] = ( double ) world_pti [ 0 ]
>654	CastExpression	( double ) world_pti [ 0 ]
>655	ArrayIndexing	world_pti [ 0 ]
>656	PrimaryExpression	0
>657	Identifier	world_pti
>658	CastTarget	double
>659	ArrayIndexing	a_pt0 [ 0 ]
>660	PrimaryExpression	0
>661	Identifier	a_pt0
>662	ExpressionStatement	 
>663	AssignmentExpr	world_pti = world [ i ]
>664	ArrayIndexing	world [ i ]
>665	Identifier	i
>666	Identifier	world
>667	Identifier	world_pti
>668	ExpressionStatement	 
>669	AssignmentExpr	a_pt1 = a_array + ( ( i * 2 + 1 ) * 8 )
>670	AdditiveExpression	a_array + ( ( i * 2 + 1 ) * 8 )
>671	MultiplicativeExpression	( i * 2 + 1 ) * 8
>672	PrimaryExpression	8
>673	AdditiveExpression	i * 2 + 1
>674	PrimaryExpression	1
>675	MultiplicativeExpression	i * 2
>676	PrimaryExpression	2
>677	Identifier	i
>678	Identifier	a_array
>679	Identifier	a_pt1
>680	ExpressionStatement	 
>681	AssignmentExpr	a_pt0 = a_array + ( ( i * 2 ) * 8 )
>682	AdditiveExpression	a_array + ( ( i * 2 ) * 8 )
>683	MultiplicativeExpression	( i * 2 ) * 8
>684	PrimaryExpression	8
>685	MultiplicativeExpression	i * 2
>686	PrimaryExpression	2
>687	Identifier	i
>688	Identifier	a_array
>689	Identifier	a_pt0
>690	IncDecOp	 
>691	IncDec	++
>692	Identifier	i
>693	Condition	 
>694	RelationalExpression	i < 4
>695	PrimaryExpression	4
>696	Identifier	i
>697	ForInit	 
>698	IdentifierDeclStatement	int i = 0 ;
>699	IdentifierDecl	i = 0
>700	AssignmentExpr	i = 0
>701	PrimaryExpression	0
>702	Identifier	i
>703	Identifier	i
>704	IdentifierDeclType	int
>705	IdentifierDeclStatement	 
>706	IdentifierDecl	* world_pti
>707	Identifier	world_pti
>708	IdentifierDeclType	const int *
>709	IdentifierDeclStatement	 
>710	IdentifierDecl	* a_pt1
>711	Identifier	a_pt1
>712	IdentifierDeclType	double *
>713	IdentifierDecl	* a_pt0
>714	Identifier	a_pt0
>715	IdentifierDeclType	double *
>716	IdentifierDeclStatement	 
>717	IdentifierDecl	* b_array = b -> getArray ( )
>718	AssignmentExpr	* b_array = b -> getArray ( )
>719	CallExpression	b -> getArray ( )
>720	ArgumentList	 
>721	Callee	b -> getArray
>722	PtrMemberAccess	b -> getArray
>723	Identifier	getArray
>724	Identifier	b
>725	Identifier	b_array
>726	Identifier	b_array
>727	IdentifierDeclType	double *
>728	IdentifierDeclStatement	 
>729	IdentifierDecl	* b = this -> __get_cpara_b
>730	AssignmentExpr	* b = this -> __get_cpara_b
>731	PtrMemberAccess	this -> __get_cpara_b
>732	Identifier	__get_cpara_b
>733	Identifier	this
>734	Identifier	b
>735	Identifier	b
>736	IdentifierDeclType	NyARMat *
>737	IdentifierDeclStatement	 
>738	IdentifierDecl	* a_array = a -> getArray ( )
>739	AssignmentExpr	* a_array = a -> getArray ( )
>740	CallExpression	a -> getArray ( )
>741	ArgumentList	 
>742	Callee	a -> getArray
>743	PtrMemberAccess	a -> getArray
>744	Identifier	getArray
>745	Identifier	a
>746	Identifier	a_array
>747	Identifier	a_array
>748	IdentifierDeclType	double *
>749	IdentifierDeclStatement	 
>750	IdentifierDecl	* a = this -> __get_cpara_a
>751	AssignmentExpr	* a = this -> __get_cpara_a
>752	PtrMemberAccess	this -> __get_cpara_a
>753	Identifier	__get_cpara_a
>754	Identifier	this
>755	Identifier	a
>756	Identifier	a
>757	IdentifierDeclType	NyARMat *
>758	ExpressionStatement	 
>759	CompoundStatement	 
>760	CompoundStatement	 
>761	Statement	 
>762	Statement	 
>763	Statement	 
>764	Statement	 
>765	Statement	 
>766	Statement	 
>767	CompoundStatement	 
>768	Statement	 
>769	Statement	 
>770	Statement	 
>771	Statement	 
>772	Statement	 
>773	Statement	 
>774	Statement	 
>775	Statement	 
>776	CompoundStatement	 
>777	Statement	 
>778	Statement	 
>779	Statement	 
>780	Statement	 
>781	Statement	 
>782	Statement	 
>783	CompoundStatement	 
>784	Statement	 
>785	Statement	 
>786	Statement	 
>787	Statement	 
>788	Statement	 
>789	Statement	 
>790	Statement	 
>791	Statement	 
>792	Statement	 
>793	Statement	 
>794	Statement	 
>795	Statement	 
>796	Statement	 
>797	Statement	 
>832	FunctionDef	NyARColorPatt_O3 
>833	ParameterList	int * i_ext_pat2 , int i_width , int i_height
>834	Parameter	 
>835	Identifier	i_height
>836	ParameterType	int
>837	Parameter	 
>838	Identifier	i_width
>839	ParameterType	int
>840	Parameter	 
>841	Identifier	i_ext_pat2
>842	ParameterType	int *
>843	ReturnType	void
>844	CompoundStatement	 
>845	ReturnStatement	 
>846	ExpressionStatement	 
>847	CallExpression	memset ( i_ext_pat2 , 0 , i_height * i_width * 3 * sizeof ( int ) )
>848	ArgumentList	i_ext_pat2
>849	Argument	i_height * i_width * 3 * sizeof ( int )
>850	MultiplicativeExpression	i_height * i_width * 3 * sizeof ( int )
>851	MultiplicativeExpression	i_width * 3 * sizeof ( int )
>852	MultiplicativeExpression	3 * sizeof ( int )
>853	SizeofExpr	sizeof ( int )
>854	SizeofOperand	int
>855	Sizeof	sizeof
>856	PrimaryExpression	3
>857	Identifier	i_width
>858	Identifier	i_height
>859	Argument	0
>860	PrimaryExpression	0
>861	Argument	i_ext_pat2
>862	Identifier	i_ext_pat2
>863	Callee	memset
>864	Identifier	memset
>871	FunctionDef	NyARColorPatt_O3 
>872	ParameterList	const INyARRgbRaster & image , const NyARSquare & i_square
>873	Parameter	 
>874	Identifier	i_square
>875	ParameterType	const NyARSquare &
>876	Parameter	 
>877	Identifier	image
>878	ParameterType	const INyARRgbRaster &
>879	ReturnType	bool
>880	CompoundStatement	 
>881	ReturnStatement	 
>882	Identifier	true
>883	ExpressionStatement	 
>884	CallExpression	updateExtpat ( image , cpara , xdiv2 , ydiv2 )
>885	ArgumentList	image
>886	Argument	ydiv2
>887	Identifier	ydiv2
>888	Argument	xdiv2
>889	Identifier	xdiv2
>890	Argument	cpara
>891	Identifier	cpara
>892	Argument	image
>893	Identifier	image
>894	Callee	updateExtpat
>895	Identifier	updateExtpat
>896	IfStatement	if ( ! get_cpara ( local , cpara ) )
>897	CompoundStatement	 
>898	ReturnStatement	 
>899	Identifier	false
>900	Condition	 
>901	UnaryOp	! get_cpara ( local , cpara )
>902	CallExpression	get_cpara ( local , cpara )
>903	ArgumentList	local
>904	Argument	cpara
>905	Identifier	cpara
>906	Argument	local
>907	Identifier	local
>908	Callee	get_cpara
>909	Identifier	get_cpara
>910	UnaryOperator	!
>911	IfStatement	if ( ydiv2 > AR_PATT_SAMPLE_NUM )
>912	CompoundStatement	 
>913	ExpressionStatement	 
>914	AssignmentExpr	ydiv2 = AR_PATT_SAMPLE_NUM
>915	Identifier	AR_PATT_SAMPLE_NUM
>916	Identifier	ydiv2
>917	Condition	 
>918	RelationalExpression	ydiv2 > AR_PATT_SAMPLE_NUM
>919	Identifier	AR_PATT_SAMPLE_NUM
>920	Identifier	ydiv2
>921	WhileStatement	while ( ydiv2 * ydiv2 < l1 )
>922	CompoundStatement	 
>923	ExpressionStatement	 
>924	AssignmentExpr	ydiv2 *= 2
>925	PrimaryExpression	2
>926	Identifier	ydiv2
>927	Condition	 
>928	RelationalExpression	ydiv2 * ydiv2 < l1
>929	Identifier	l1
>930	MultiplicativeExpression	ydiv2 * ydiv2
>931	Identifier	ydiv2
>932	Identifier	ydiv2
>933	ExpressionStatement	 
>934	AssignmentExpr	l1 = l1 / 4
>935	MultiplicativeExpression	l1 / 4
>936	PrimaryExpression	4
>937	Identifier	l1
>938	Identifier	l1
>939	ExpressionStatement	 
>940	AssignmentExpr	ydiv2 = this -> _height
>941	PtrMemberAccess	this -> _height
>942	Identifier	_height
>943	Identifier	this
>944	Identifier	ydiv2
>945	IfStatement	if ( l2 > l1 )
>946	CompoundStatement	 
>947	ExpressionStatement	 
>948	AssignmentExpr	l1 = l2
>949	Identifier	l2
>950	Identifier	l1
>951	Condition	 
>952	RelationalExpression	l2 > l1
>953	Identifier	l1
>954	Identifier	l2
>955	ExpressionStatement	 
>956	AssignmentExpr	l2 = ( w1 * w1 + w2 * w2 )
>957	AdditiveExpression	w1 * w1 + w2 * w2
>958	MultiplicativeExpression	w2 * w2
>959	Identifier	w2
>960	Identifier	w2
>961	MultiplicativeExpression	w1 * w1
>962	Identifier	w1
>963	Identifier	w1
>964	Identifier	l2
>965	ExpressionStatement	 
>966	AssignmentExpr	w2 = local [ 3 ] . y - local [ 0 ] . y
>967	AdditiveExpression	local [ 3 ] . y - local [ 0 ] . y
>968	MemberAccess	local [ 0 ] . y
>969	Identifier	y
>970	ArrayIndexing	local [ 0 ]
>971	PrimaryExpression	0
>972	Identifier	local
>973	MemberAccess	local [ 3 ] . y
>974	Identifier	y
>975	ArrayIndexing	local [ 3 ]
>976	PrimaryExpression	3
>977	Identifier	local
>978	Identifier	w2
>979	ExpressionStatement	 
>980	AssignmentExpr	w1 = local [ 3 ] . x - local [ 0 ] . x
>981	AdditiveExpression	local [ 3 ] . x - local [ 0 ] . x
>982	MemberAccess	local [ 0 ] . x
>983	Identifier	x
>984	ArrayIndexing	local [ 0 ]
>985	PrimaryExpression	0
>986	Identifier	local
>987	MemberAccess	local [ 3 ] . x
>988	Identifier	x
>989	ArrayIndexing	local [ 3 ]
>990	PrimaryExpression	3
>991	Identifier	local
>992	Identifier	w1
>993	ExpressionStatement	 
>994	AssignmentExpr	l1 = ( w1 * w1 + w2 * w2 )
>995	AdditiveExpression	w1 * w1 + w2 * w2
>996	MultiplicativeExpression	w2 * w2
>997	Identifier	w2
>998	Identifier	w2
>999	MultiplicativeExpression	w1 * w1
>1000	Identifier	w1
>1001	Identifier	w1
>1002	Identifier	l1
>1003	ExpressionStatement	 
>1004	AssignmentExpr	w2 = local [ 1 ] . y - local [ 2 ] . y
>1005	AdditiveExpression	local [ 1 ] . y - local [ 2 ] . y
>1006	MemberAccess	local [ 2 ] . y
>1007	Identifier	y
>1008	ArrayIndexing	local [ 2 ]
>1009	PrimaryExpression	2
>1010	Identifier	local
>1011	MemberAccess	local [ 1 ] . y
>1012	Identifier	y
>1013	ArrayIndexing	local [ 1 ]
>1014	PrimaryExpression	1
>1015	Identifier	local
>1016	Identifier	w2
>1017	ExpressionStatement	 
>1018	AssignmentExpr	w1 = local [ 1 ] . x - local [ 2 ] . x
>1019	AdditiveExpression	local [ 1 ] . x - local [ 2 ] . x
>1020	MemberAccess	local [ 2 ] . x
>1021	Identifier	x
>1022	ArrayIndexing	local [ 2 ]
>1023	PrimaryExpression	2
>1024	Identifier	local
>1025	MemberAccess	local [ 1 ] . x
>1026	Identifier	x
>1027	ArrayIndexing	local [ 1 ]
>1028	PrimaryExpression	1
>1029	Identifier	local
>1030	Identifier	w1
>1031	IfStatement	if ( xdiv2 > AR_PATT_SAMPLE_NUM )
>1032	CompoundStatement	 
>1033	ExpressionStatement	 
>1034	AssignmentExpr	xdiv2 = AR_PATT_SAMPLE_NUM
>1035	Identifier	AR_PATT_SAMPLE_NUM
>1036	Identifier	xdiv2
>1037	Condition	 
>1038	RelationalExpression	xdiv2 > AR_PATT_SAMPLE_NUM
>1039	Identifier	AR_PATT_SAMPLE_NUM
>1040	Identifier	xdiv2
>1041	WhileStatement	while ( xdiv2 * xdiv2 < l1 )
>1042	CompoundStatement	 
>1043	ExpressionStatement	 
>1044	AssignmentExpr	xdiv2 *= 2
>1045	PrimaryExpression	2
>1046	Identifier	xdiv2
>1047	Condition	 
>1048	RelationalExpression	xdiv2 * xdiv2 < l1
>1049	Identifier	l1
>1050	MultiplicativeExpression	xdiv2 * xdiv2
>1051	Identifier	xdiv2
>1052	Identifier	xdiv2
>1053	ExpressionStatement	 
>1054	AssignmentExpr	xdiv2 = this -> _width
>1055	PtrMemberAccess	this -> _width
>1056	Identifier	_width
>1057	Identifier	this
>1058	Identifier	xdiv2
>1059	ExpressionStatement	 
>1060	AssignmentExpr	l1 = l1 / 4
>1061	MultiplicativeExpression	l1 / 4
>1062	PrimaryExpression	4
>1063	Identifier	l1
>1064	Identifier	l1
>1065	IfStatement	if ( l2 > l1 )
>1066	CompoundStatement	 
>1067	ExpressionStatement	 
>1068	AssignmentExpr	l1 = l2
>1069	Identifier	l2
>1070	Identifier	l1
>1071	Condition	 
>1072	RelationalExpression	l2 > l1
>1073	Identifier	l1
>1074	Identifier	l2
>1075	ExpressionStatement	 
>1076	AssignmentExpr	l2 = ( w1 * w1 + w2 * w2 )
>1077	AdditiveExpression	w1 * w1 + w2 * w2
>1078	MultiplicativeExpression	w2 * w2
>1079	Identifier	w2
>1080	Identifier	w2
>1081	MultiplicativeExpression	w1 * w1
>1082	Identifier	w1
>1083	Identifier	w1
>1084	Identifier	l2
>1085	ExpressionStatement	 
>1086	AssignmentExpr	w2 = local [ 2 ] . y - local [ 3 ] . y
>1087	AdditiveExpression	local [ 2 ] . y - local [ 3 ] . y
>1088	MemberAccess	local [ 3 ] . y
>1089	Identifier	y
>1090	ArrayIndexing	local [ 3 ]
>1091	PrimaryExpression	3
>1092	Identifier	local
>1093	MemberAccess	local [ 2 ] . y
>1094	Identifier	y
>1095	ArrayIndexing	local [ 2 ]
>1096	PrimaryExpression	2
>1097	Identifier	local
>1098	Identifier	w2
>1099	ExpressionStatement	 
>1100	AssignmentExpr	w1 = local [ 2 ] . x - local [ 3 ] . x
>1101	AdditiveExpression	local [ 2 ] . x - local [ 3 ] . x
>1102	MemberAccess	local [ 3 ] . x
>1103	Identifier	x
>1104	ArrayIndexing	local [ 3 ]
>1105	PrimaryExpression	3
>1106	Identifier	local
>1107	MemberAccess	local [ 2 ] . x
>1108	Identifier	x
>1109	ArrayIndexing	local [ 2 ]
>1110	PrimaryExpression	2
>1111	Identifier	local
>1112	Identifier	w1
>1113	ExpressionStatement	 
>1114	AssignmentExpr	l1 = ( w1 * w1 + w2 * w2 )
>1115	AdditiveExpression	w1 * w1 + w2 * w2
>1116	MultiplicativeExpression	w2 * w2
>1117	Identifier	w2
>1118	Identifier	w2
>1119	MultiplicativeExpression	w1 * w1
>1120	Identifier	w1
>1121	Identifier	w1
>1122	Identifier	l1
>1123	ExpressionStatement	 
>1124	AssignmentExpr	w2 = local [ 0 ] . y - local [ 1 ] . y
>1125	AdditiveExpression	local [ 0 ] . y - local [ 1 ] . y
>1126	MemberAccess	local [ 1 ] . y
>1127	Identifier	y
>1128	ArrayIndexing	local [ 1 ]
>1129	PrimaryExpression	1
>1130	Identifier	local
>1131	MemberAccess	local [ 0 ] . y
>1132	Identifier	y
>1133	ArrayIndexing	local [ 0 ]
>1134	PrimaryExpression	0
>1135	Identifier	local
>1136	Identifier	w2
>1137	ExpressionStatement	 
>1138	AssignmentExpr	w1 = local [ 0 ] . x - local [ 1 ] . x
>1139	AdditiveExpression	local [ 0 ] . x - local [ 1 ] . x
>1140	MemberAccess	local [ 1 ] . x
>1141	Identifier	x
>1142	ArrayIndexing	local [ 1 ]
>1143	PrimaryExpression	1
>1144	Identifier	local
>1145	MemberAccess	local [ 0 ] . x
>1146	Identifier	x
>1147	ArrayIndexing	local [ 0 ]
>1148	PrimaryExpression	0
>1149	Identifier	local
>1150	Identifier	w1
>1151	IdentifierDeclStatement	 
>1152	IdentifierDecl	w2
>1153	Identifier	w2
>1154	IdentifierDeclType	int
>1155	IdentifierDecl	w1
>1156	Identifier	w1
>1157	IdentifierDeclType	int
>1158	IdentifierDeclStatement	 
>1159	IdentifierDecl	l2
>1160	Identifier	l2
>1161	IdentifierDeclType	int
>1162	IdentifierDecl	l1
>1163	Identifier	l1
>1164	IdentifierDeclType	int
>1165	IdentifierDeclStatement	 
>1166	IdentifierDecl	ydiv2
>1167	Identifier	ydiv2
>1168	IdentifierDeclType	int
>1169	IdentifierDecl	xdiv2
>1170	Identifier	xdiv2
>1171	IdentifierDeclType	int
>1172	IdentifierDeclStatement	 
>1173	IdentifierDecl	* local = i_square . imvertex
>1174	AssignmentExpr	* local = i_square . imvertex
>1175	MemberAccess	i_square . imvertex
>1176	Identifier	imvertex
>1177	Identifier	i_square
>1178	Identifier	local
>1179	Identifier	local
>1180	IdentifierDeclType	const TNyARIntPoint *
>1181	IdentifierDeclStatement	 
>1182	IdentifierDecl	& cpara = * this -> __pickFromRaster_cpara
>1183	AssignmentExpr	& cpara = * this -> __pickFromRaster_cpara
>1184	UnaryOp	* this -> __pickFromRaster_cpara
>1185	PtrMemberAccess	this -> __pickFromRaster_cpara
>1186	Identifier	__pickFromRaster_cpara
>1187	Identifier	this
>1188	UnaryOperator	*
>1189	Identifier	cpara
>1190	Identifier	cpara
>1191	IdentifierDeclType	NyARMat &
>1226	FunctionDef	NyARColorPatt_O3 
>1227	ParameterList	const INyARRgbRaster & image , const NyARMat & i_cpara , int i_xdiv2 , int i_ydiv2
>1228	Parameter	 
>1229	Identifier	i_ydiv2
>1230	ParameterType	int
>1231	Parameter	 
>1232	Identifier	i_xdiv2
>1233	ParameterType	int
>1234	Parameter	 
>1235	Identifier	i_cpara
>1236	ParameterType	const NyARMat &
>1237	Parameter	 
>1238	Identifier	image
>1239	ParameterType	const INyARRgbRaster &
>1240	ReturnType	void
>1241	CompoundStatement	 
>1242	ReturnStatement	 
>1243	ForStatement	for ( j = L_HEIGHT * L_WIDTH - 1 ; j >= 0 ; j -- )
>1244	CompoundStatement	 
>1245	ExpressionStatement	 
>1246	AssignmentExpr	* ( extpat_ptr ++ ) /= ( xdiv_x_ydiv )
>1247	Identifier	xdiv_x_ydiv
>1248	UnaryOp	* ( extpat_ptr ++ )
>1249	IncDecOp	extpat_ptr ++
>1250	IncDec	++
>1251	Identifier	extpat_ptr
>1252	UnaryOperator	*
>1253	ExpressionStatement	 
>1254	AssignmentExpr	* ( extpat_ptr ++ ) /= ( xdiv_x_ydiv )
>1255	Identifier	xdiv_x_ydiv
>1256	UnaryOp	* ( extpat_ptr ++ )
>1257	IncDecOp	extpat_ptr ++
>1258	IncDec	++
>1259	Identifier	extpat_ptr
>1260	UnaryOperator	*
>1261	ExpressionStatement	 
>1262	AssignmentExpr	* ( extpat_ptr ++ ) /= ( xdiv_x_ydiv )
>1263	Identifier	xdiv_x_ydiv
>1264	UnaryOp	* ( extpat_ptr ++ )
>1265	IncDecOp	extpat_ptr ++
>1266	IncDec	++
>1267	Identifier	extpat_ptr
>1268	UnaryOperator	*
>1269	IncDecOp	 
>1270	IncDec	--
>1271	Identifier	j
>1272	Condition	 
>1273	RelationalExpression	j >= 0
>1274	PrimaryExpression	0
>1275	Identifier	j
>1276	ForInit	 
>1277	AssignmentExpr	j = L_HEIGHT * L_WIDTH - 1
>1278	AdditiveExpression	L_HEIGHT * L_WIDTH - 1
>1279	PrimaryExpression	1
>1280	MultiplicativeExpression	L_HEIGHT * L_WIDTH
>1281	Identifier	L_WIDTH
>1282	Identifier	L_HEIGHT
>1283	Identifier	j
>1284	ExpressionStatement	 
>1285	AssignmentExpr	extpat_ptr = L_extpat
>1286	Identifier	L_extpat
>1287	Identifier	extpat_ptr
>1288	IdentifierDeclStatement	 
>1289	IdentifierDecl	xdiv_x_ydiv = xdiv * ydiv
>1290	AssignmentExpr	xdiv_x_ydiv = xdiv * ydiv
>1291	MultiplicativeExpression	xdiv * ydiv
>1292	Identifier	ydiv
>1293	Identifier	xdiv
>1294	Identifier	xdiv_x_ydiv
>1295	Identifier	xdiv_x_ydiv
>1296	IdentifierDeclType	const int
>1297	ForStatement	for ( j = 0 ; j < i_ydiv2 ; j ++ )
>1298	CompoundStatement	 
>1299	ForStatement	for ( i = index_num - 1 ; i >= 0 ; i -- )
>1300	CompoundStatement	 
>1301	ExpressionStatement	 
>1302	AssignmentExpr	extpat_ptr [ 2 ] += rgb_buf [ i * 3 + 2 ]
>1303	ArrayIndexing	rgb_buf [ i * 3 + 2 ]
>1304	AdditiveExpression	i * 3 + 2
>1305	PrimaryExpression	2
>1306	MultiplicativeExpression	i * 3
>1307	PrimaryExpression	3
>1308	Identifier	i
>1309	Identifier	rgb_buf
>1310	ArrayIndexing	extpat_ptr [ 2 ]
>1311	PrimaryExpression	2
>1312	Identifier	extpat_ptr
>1313	ExpressionStatement	 
>1314	AssignmentExpr	extpat_ptr [ 1 ] += rgb_buf [ i * 3 + 1 ]
>1315	ArrayIndexing	rgb_buf [ i * 3 + 1 ]
>1316	AdditiveExpression	i * 3 + 1
>1317	PrimaryExpression	1
>1318	MultiplicativeExpression	i * 3
>1319	PrimaryExpression	3
>1320	Identifier	i
>1321	Identifier	rgb_buf
>1322	ArrayIndexing	extpat_ptr [ 1 ]
>1323	PrimaryExpression	1
>1324	Identifier	extpat_ptr
>1325	ExpressionStatement	 
>1326	AssignmentExpr	extpat_ptr [ 0 ] += rgb_buf [ i * 3 + 0 ]
>1327	ArrayIndexing	rgb_buf [ i * 3 + 0 ]
>1328	AdditiveExpression	i * 3 + 0
>1329	PrimaryExpression	0
>1330	MultiplicativeExpression	i * 3
>1331	PrimaryExpression	3
>1332	Identifier	i
>1333	Identifier	rgb_buf
>1334	ArrayIndexing	extpat_ptr [ 0 ]
>1335	PrimaryExpression	0
>1336	Identifier	extpat_ptr
>1337	ExpressionStatement	 
>1338	AssignmentExpr	extpat_ptr = extpat_j + ( i_rgb_index [ i ] * 3 )
>1339	AdditiveExpression	extpat_j + ( i_rgb_index [ i ] * 3 )
>1340	MultiplicativeExpression	i_rgb_index [ i ] * 3
>1341	PrimaryExpression	3
>1342	ArrayIndexing	i_rgb_index [ i ]
>1343	Identifier	i
>1344	Identifier	i_rgb_index
>1345	Identifier	extpat_j
>1346	Identifier	extpat_ptr
>1347	IncDecOp	 
>1348	IncDec	--
>1349	Identifier	i
>1350	Condition	 
>1351	RelationalExpression	i >= 0
>1352	PrimaryExpression	0
>1353	Identifier	i
>1354	ForInit	 
>1355	AssignmentExpr	i = index_num - 1
>1356	AdditiveExpression	index_num - 1
>1357	PrimaryExpression	1
>1358	Identifier	index_num
>1359	Identifier	i
>1360	ExpressionStatement	 
>1361	CallExpression	reader -> getPixelSet ( x_rgb_index , y_rgb_index , index_num , rgb_buf )
>1362	ArgumentList	x_rgb_index
>1363	Argument	rgb_buf
>1364	Identifier	rgb_buf
>1365	Argument	index_num
>1366	Identifier	index_num
>1367	Argument	y_rgb_index
>1368	Identifier	y_rgb_index
>1369	Argument	x_rgb_index
>1370	Identifier	x_rgb_index
>1371	Callee	reader -> getPixelSet
>1372	PtrMemberAccess	reader -> getPixelSet
>1373	Identifier	getPixelSet
>1374	Identifier	reader
>1375	ForStatement	for ( i = 0 ; i < i_xdiv2 ; i ++ )
>1376	CompoundStatement	 
>1377	ExpressionStatement	 
>1378	IncDecOp	index_num ++
>1379	IncDec	++
>1380	Identifier	index_num
>1381	ExpressionStatement	 
>1382	AssignmentExpr	i_rgb_index [ index_num ] = i / xdiv
>1383	MultiplicativeExpression	i / xdiv
>1384	Identifier	xdiv
>1385	Identifier	i
>1386	ArrayIndexing	i_rgb_index [ index_num ]
>1387	Identifier	index_num
>1388	Identifier	i_rgb_index
>1389	ExpressionStatement	 
>1390	AssignmentExpr	y_rgb_index [ index_num ] = yc
>1391	Identifier	yc
>1392	ArrayIndexing	y_rgb_index [ index_num ]
>1393	Identifier	index_num
>1394	Identifier	y_rgb_index
>1395	ExpressionStatement	 
>1396	AssignmentExpr	x_rgb_index [ index_num ] = xc
>1397	Identifier	xc
>1398	ArrayIndexing	x_rgb_index [ index_num ]
>1399	Identifier	index_num
>1400	Identifier	x_rgb_index
>1401	IfStatement	if ( xc < 0 || xc >= img_x || yc < 0 || yc >= img_y )
>1402	CompoundStatement	 
>1403	ContinueStatement	 
>1404	Condition	 
>1405	OrExpression	xc < 0 || xc >= img_x || yc < 0 || yc >= img_y
>1406	OrExpression	xc >= img_x || yc < 0 || yc >= img_y
>1407	OrExpression	yc < 0 || yc >= img_y
>1408	RelationalExpression	yc >= img_y
>1409	Identifier	img_y
>1410	Identifier	yc
>1411	RelationalExpression	yc < 0
>1412	PrimaryExpression	0
>1413	Identifier	yc
>1414	RelationalExpression	xc >= img_x
>1415	Identifier	img_x
>1416	Identifier	xc
>1417	RelationalExpression	xc < 0
>1418	PrimaryExpression	0
>1419	Identifier	xc
>1420	ExpressionStatement	 
>1421	AssignmentExpr	yc = ( int ) ( ( para10_xw [ i ] + para11_x_yw ) / d )
>1422	CastExpression	( int ) ( ( para10_xw [ i ] + para11_x_yw ) / d )
>1423	MultiplicativeExpression	( para10_xw [ i ] + para11_x_yw ) / d
>1424	Identifier	d
>1425	AdditiveExpression	para10_xw [ i ] + para11_x_yw
>1426	Identifier	para11_x_yw
>1427	ArrayIndexing	para10_xw [ i ]
>1428	Identifier	i
>1429	Identifier	para10_xw
>1430	CastTarget	int
>1431	Identifier	yc
>1432	ExpressionStatement	 
>1433	AssignmentExpr	xc = ( int ) ( ( para00_xw [ i ] + para01_x_yw ) / d )
>1434	CastExpression	( int ) ( ( para00_xw [ i ] + para01_x_yw ) / d )
>1435	MultiplicativeExpression	( para00_xw [ i ] + para01_x_yw ) / d
>1436	Identifier	d
>1437	AdditiveExpression	para00_xw [ i ] + para01_x_yw
>1438	Identifier	para01_x_yw
>1439	ArrayIndexing	para00_xw [ i ]
>1440	Identifier	i
>1441	Identifier	para00_xw
>1442	CastTarget	int
>1443	Identifier	xc
>1444	IfStatement	if ( d == 0 )
>1445	CompoundStatement	 
>1446	ExpressionStatement	 
>1447	CallExpression	NyARException ( )
>1448	ArgumentList	 
>1449	Callee	NyARException
>1450	Identifier	NyARException
>1451	Statement	 
>1452	Condition	 
>1453	EqualityExpression	d == 0
>1454	PrimaryExpression	0
>1455	Identifier	d
>1456	ExpressionStatement	 
>1457	AssignmentExpr	d = para20_xw [ i ] + para21_x_yw
>1458	AdditiveExpression	para20_xw [ i ] + para21_x_yw
>1459	Identifier	para21_x_yw
>1460	ArrayIndexing	para20_xw [ i ]
>1461	Identifier	i
>1462	Identifier	para20_xw
>1463	Identifier	d
>1464	IncDecOp	 
>1465	IncDec	++
>1466	Identifier	i
>1467	Condition	 
>1468	RelationalExpression	i < i_xdiv2
>1469	Identifier	i_xdiv2
>1470	Identifier	i
>1471	ForInit	 
>1472	AssignmentExpr	i = 0
>1473	PrimaryExpression	0
>1474	Identifier	i
>1475	ExpressionStatement	 
>1476	AssignmentExpr	index_num = 0
>1477	PrimaryExpression	0
>1478	Identifier	index_num
>1479	ExpressionStatement	 
>1480	AssignmentExpr	extpat_j = L_extpat + ( ( j / ydiv ) * this -> _width * 3 )
>1481	AdditiveExpression	L_extpat + ( ( j / ydiv ) * this -> _width * 3 )
>1482	MultiplicativeExpression	( j / ydiv ) * this -> _width * 3
>1483	MultiplicativeExpression	this -> _width * 3
>1484	PrimaryExpression	3
>1485	PtrMemberAccess	this -> _width
>1486	Identifier	_width
>1487	Identifier	this
>1488	MultiplicativeExpression	j / ydiv
>1489	Identifier	ydiv
>1490	Identifier	j
>1491	Identifier	L_extpat
>1492	Identifier	extpat_j
>1493	ExpressionStatement	 
>1494	AssignmentExpr	para01_x_yw = para01 * yw + para02
>1495	AdditiveExpression	para01 * yw + para02
>1496	Identifier	para02
>1497	MultiplicativeExpression	para01 * yw
>1498	Identifier	yw
>1499	Identifier	para01
>1500	Identifier	para01_x_yw
>1501	ExpressionStatement	 
>1502	AssignmentExpr	para11_x_yw = para11 * yw + para12
>1503	AdditiveExpression	para11 * yw + para12
>1504	Identifier	para12
>1505	MultiplicativeExpression	para11 * yw
>1506	Identifier	yw
>1507	Identifier	para11
>1508	Identifier	para11_x_yw
>1509	ExpressionStatement	 
>1510	AssignmentExpr	para21_x_yw = para21 * yw + 1.0
>1511	AdditiveExpression	para21 * yw + 1.0
>1512	PrimaryExpression	1.0
>1513	MultiplicativeExpression	para21 * yw
>1514	Identifier	yw
>1515	Identifier	para21
>1516	Identifier	para21_x_yw
>1517	ExpressionStatement	 
>1518	AssignmentExpr	yw = 102.5 + 5.0 * ( ( double ) j + 0.5 ) / i_ydiv2
>1519	AdditiveExpression	102.5 + 5.0 * ( ( double ) j + 0.5 ) / i_ydiv2
>1520	MultiplicativeExpression	5.0 * ( ( double ) j + 0.5 ) / i_ydiv2
>1521	MultiplicativeExpression	( ( double ) j + 0.5 ) / i_ydiv2
>1522	Identifier	i_ydiv2
>1523	AdditiveExpression	( double ) j + 0.5
>1524	PrimaryExpression	0.5
>1525	CastExpression	( double ) j
>1526	Identifier	j
>1527	CastTarget	double
>1528	PrimaryExpression	5.0
>1529	PrimaryExpression	102.5
>1530	Identifier	yw
>1531	IncDecOp	 
>1532	IncDec	++
>1533	Identifier	j
>1534	Condition	 
>1535	RelationalExpression	j < i_ydiv2
>1536	Identifier	i_ydiv2
>1537	Identifier	j
>1538	ForInit	 
>1539	AssignmentExpr	j = 0
>1540	PrimaryExpression	0
>1541	Identifier	j
>1542	IdentifierDeclStatement	 
>1543	IdentifierDecl	* reader = image . getRgbPixelReader ( )
>1544	AssignmentExpr	* reader = image . getRgbPixelReader ( )
>1545	CallExpression	image . getRgbPixelReader ( )
>1546	ArgumentList	 
>1547	Callee	image . getRgbPixelReader
>1548	MemberAccess	image . getRgbPixelReader
>1549	Identifier	getRgbPixelReader
>1550	Identifier	image
>1551	Identifier	reader
>1552	Identifier	reader
>1553	IdentifierDeclType	const INyARRgbPixelReader *
>1554	IdentifierDeclStatement	 
>1555	IdentifierDecl	* extpat_j
>1556	Identifier	extpat_j
>1557	IdentifierDeclType	int *
>1558	IdentifierDeclStatement	 
>1559	IdentifierDecl	index_num
>1560	Identifier	index_num
>1561	IdentifierDeclType	int
>1562	IdentifierDeclStatement	 
>1563	IdentifierDecl	* extpat_ptr
>1564	Identifier	extpat_ptr
>1565	IdentifierDeclType	int *
>1566	CompoundStatement	 
>1567	ForStatement	for ( i = 0 ; i < i_xdiv2 ; i ++ )
>1568	CompoundStatement	 
>1569	ExpressionStatement	 
>1570	AssignmentExpr	para10_xw [ i ] = para10 * xw
>1571	MultiplicativeExpression	para10 * xw
>1572	Identifier	xw
>1573	Identifier	para10
>1574	ArrayIndexing	para10_xw [ i ]
>1575	Identifier	i
>1576	Identifier	para10_xw
>1577	ExpressionStatement	 
>1578	AssignmentExpr	para00_xw [ i ] = para00 * xw
>1579	MultiplicativeExpression	para00 * xw
>1580	Identifier	xw
>1581	Identifier	para00
>1582	ArrayIndexing	para00_xw [ i ]
>1583	Identifier	i
>1584	Identifier	para00_xw
>1585	ExpressionStatement	 
>1586	AssignmentExpr	para20_xw [ i ] = para20 * xw
>1587	MultiplicativeExpression	para20 * xw
>1588	Identifier	xw
>1589	Identifier	para20
>1590	ArrayIndexing	para20_xw [ i ]
>1591	Identifier	i
>1592	Identifier	para20_xw
>1593	IdentifierDeclStatement	 
>1594	IdentifierDecl	xw = 102.5 + 5.0 * ( ( double ) i + 0.5 ) / i_xdiv2
>1595	AssignmentExpr	xw = 102.5 + 5.0 * ( ( double ) i + 0.5 ) / i_xdiv2
>1596	AdditiveExpression	102.5 + 5.0 * ( ( double ) i + 0.5 ) / i_xdiv2
>1597	MultiplicativeExpression	5.0 * ( ( double ) i + 0.5 ) / i_xdiv2
>1598	MultiplicativeExpression	( ( double ) i + 0.5 ) / i_xdiv2
>1599	Identifier	i_xdiv2
>1600	AdditiveExpression	( double ) i + 0.5
>1601	PrimaryExpression	0.5
>1602	CastExpression	( double ) i
>1603	Identifier	i
>1604	CastTarget	double
>1605	PrimaryExpression	5.0
>1606	PrimaryExpression	102.5
>1607	Identifier	xw
>1608	Identifier	xw
>1609	IdentifierDeclType	const double
>1610	IncDecOp	 
>1611	IncDec	++
>1612	Identifier	i
>1613	Condition	 
>1614	RelationalExpression	i < i_xdiv2
>1615	Identifier	i_xdiv2
>1616	Identifier	i
>1617	ForInit	 
>1618	AssignmentExpr	i = 0
>1619	PrimaryExpression	0
>1620	Identifier	i
>1621	ExpressionStatement	 
>1622	AssignmentExpr	rgb_buf = up_ptr . rgb_buf
>1623	MemberAccess	up_ptr . rgb_buf
>1624	Identifier	rgb_buf
>1625	Identifier	up_ptr
>1626	Identifier	rgb_buf
>1627	ExpressionStatement	 
>1628	AssignmentExpr	i_rgb_index = up_ptr . i_rgb_index
>1629	MemberAccess	up_ptr . i_rgb_index
>1630	Identifier	i_rgb_index
>1631	Identifier	up_ptr
>1632	Identifier	i_rgb_index
>1633	ExpressionStatement	 
>1634	AssignmentExpr	y_rgb_index = up_ptr . y_rgb_index
>1635	MemberAccess	up_ptr . y_rgb_index
>1636	Identifier	y_rgb_index
>1637	Identifier	up_ptr
>1638	Identifier	y_rgb_index
>1639	ExpressionStatement	 
>1640	AssignmentExpr	x_rgb_index = up_ptr . x_rgb_index
>1641	MemberAccess	up_ptr . x_rgb_index
>1642	Identifier	x_rgb_index
>1643	Identifier	up_ptr
>1644	Identifier	x_rgb_index
>1645	ExpressionStatement	 
>1646	AssignmentExpr	para20_xw = up_ptr . para20_xw
>1647	MemberAccess	up_ptr . para20_xw
>1648	Identifier	para20_xw
>1649	Identifier	up_ptr
>1650	Identifier	para20_xw
>1651	ExpressionStatement	 
>1652	AssignmentExpr	para10_xw = up_ptr . para10_xw
>1653	MemberAccess	up_ptr . para10_xw
>1654	Identifier	para10_xw
>1655	Identifier	up_ptr
>1656	Identifier	para10_xw
>1657	ExpressionStatement	 
>1658	AssignmentExpr	para00_xw = up_ptr . para00_xw
>1659	MemberAccess	up_ptr . para00_xw
>1660	Identifier	para00_xw
>1661	Identifier	up_ptr
>1662	Identifier	para00_xw
>1663	ExpressionStatement	 
>1664	CallExpression	up_ptr . reservWorkBuffers ( i_xdiv2 )
>1665	ArgumentList	i_xdiv2
>1666	Argument	i_xdiv2
>1667	Identifier	i_xdiv2
>1668	Callee	up_ptr . reservWorkBuffers
>1669	MemberAccess	up_ptr . reservWorkBuffers
>1670	Identifier	reservWorkBuffers
>1671	Identifier	up_ptr
>1672	IdentifierDeclStatement	 
>1673	IdentifierDecl	& up_ptr = * this -> __updateExtpat
>1674	AssignmentExpr	& up_ptr = * this -> __updateExtpat
>1675	UnaryOp	* this -> __updateExtpat
>1676	PtrMemberAccess	this -> __updateExtpat
>1677	Identifier	__updateExtpat
>1678	Identifier	this
>1679	UnaryOperator	*
>1680	Identifier	up_ptr
>1681	Identifier	up_ptr
>1682	IdentifierDeclType	T__updateExtpat_struct_t &
>1683	IdentifierDeclStatement	 
>1684	IdentifierDecl	* rgb_buf
>1685	Identifier	rgb_buf
>1686	IdentifierDeclType	int *
>1687	IdentifierDecl	* i_rgb_index
>1688	Identifier	i_rgb_index
>1689	IdentifierDeclType	int *
>1690	IdentifierDecl	* y_rgb_index
>1691	Identifier	y_rgb_index
>1692	IdentifierDeclType	int *
>1693	IdentifierDecl	* x_rgb_index
>1694	Identifier	x_rgb_index
>1695	IdentifierDeclType	int *
>1696	IdentifierDeclStatement	 
>1697	IdentifierDecl	* para20_xw
>1698	Identifier	para20_xw
>1699	IdentifierDeclType	double *
>1700	IdentifierDecl	* para10_xw
>1701	Identifier	para10_xw
>1702	IdentifierDeclType	double *
>1703	IdentifierDecl	* para00_xw
>1704	Identifier	para00_xw
>1705	IdentifierDeclType	double *
>1706	IdentifierDeclStatement	 
>1707	IdentifierDecl	ydiv = i_ydiv2 / L_HEIGHT
>1708	AssignmentExpr	ydiv = i_ydiv2 / L_HEIGHT
>1709	MultiplicativeExpression	i_ydiv2 / L_HEIGHT
>1710	Identifier	L_HEIGHT
>1711	Identifier	i_ydiv2
>1712	Identifier	ydiv
>1713	Identifier	ydiv
>1714	IdentifierDeclType	int
>1715	IdentifierDeclStatement	 
>1716	IdentifierDecl	xdiv = i_xdiv2 / L_WIDTH
>1717	AssignmentExpr	xdiv = i_xdiv2 / L_WIDTH
>1718	MultiplicativeExpression	i_xdiv2 / L_WIDTH
>1719	Identifier	L_WIDTH
>1720	Identifier	i_xdiv2
>1721	Identifier	xdiv
>1722	Identifier	xdiv
>1723	IdentifierDeclType	int
>1724	IdentifierDeclStatement	 
>1725	IdentifierDecl	j
>1726	Identifier	j
>1727	IdentifierDeclType	int
>1728	IdentifierDecl	i
>1729	Identifier	i
>1730	IdentifierDeclType	int
>1731	IdentifierDeclStatement	 
>1732	IdentifierDecl	yc
>1733	Identifier	yc
>1734	IdentifierDeclType	int
>1735	IdentifierDecl	xc
>1736	Identifier	xc
>1737	IdentifierDeclType	int
>1738	IdentifierDeclStatement	 
>1739	IdentifierDecl	yw
>1740	Identifier	yw
>1741	IdentifierDeclType	double
>1742	IdentifierDecl	d
>1743	Identifier	d
>1744	IdentifierDeclType	double
>1745	ExpressionStatement	 
>1746	AssignmentExpr	para21 = cpara_array [ ( 2 * 3 + 1 ) * 1 + 0 ]
>1747	ArrayIndexing	cpara_array [ ( 2 * 3 + 1 ) * 1 + 0 ]
>1748	AdditiveExpression	( 2 * 3 + 1 ) * 1 + 0
>1749	PrimaryExpression	0
>1750	MultiplicativeExpression	( 2 * 3 + 1 ) * 1
>1751	PrimaryExpression	1
>1752	AdditiveExpression	2 * 3 + 1
>1753	PrimaryExpression	1
>1754	MultiplicativeExpression	2 * 3
>1755	PrimaryExpression	3
>1756	PrimaryExpression	2
>1757	Identifier	cpara_array
>1758	Identifier	para21
>1759	ExpressionStatement	 
>1760	AssignmentExpr	para20 = cpara_array [ ( 2 * 3 + 0 ) * 1 + 0 ]
>1761	ArrayIndexing	cpara_array [ ( 2 * 3 + 0 ) * 1 + 0 ]
>1762	AdditiveExpression	( 2 * 3 + 0 ) * 1 + 0
>1763	PrimaryExpression	0
>1764	MultiplicativeExpression	( 2 * 3 + 0 ) * 1
>1765	PrimaryExpression	1
>1766	AdditiveExpression	2 * 3 + 0
>1767	PrimaryExpression	0
>1768	MultiplicativeExpression	2 * 3
>1769	PrimaryExpression	3
>1770	PrimaryExpression	2
>1771	Identifier	cpara_array
>1772	Identifier	para20
>1773	ExpressionStatement	 
>1774	AssignmentExpr	para12 = cpara_array [ ( 1 * 3 + 2 ) * 1 + 0 ]
>1775	ArrayIndexing	cpara_array [ ( 1 * 3 + 2 ) * 1 + 0 ]
>1776	AdditiveExpression	( 1 * 3 + 2 ) * 1 + 0
>1777	PrimaryExpression	0
>1778	MultiplicativeExpression	( 1 * 3 + 2 ) * 1
>1779	PrimaryExpression	1
>1780	AdditiveExpression	1 * 3 + 2
>1781	PrimaryExpression	2
>1782	MultiplicativeExpression	1 * 3
>1783	PrimaryExpression	3
>1784	PrimaryExpression	1
>1785	Identifier	cpara_array
>1786	Identifier	para12
>1787	ExpressionStatement	 
>1788	AssignmentExpr	para11 = cpara_array [ ( 1 * 3 + 1 ) * 1 + 0 ]
>1789	ArrayIndexing	cpara_array [ ( 1 * 3 + 1 ) * 1 + 0 ]
>1790	AdditiveExpression	( 1 * 3 + 1 ) * 1 + 0
>1791	PrimaryExpression	0
>1792	MultiplicativeExpression	( 1 * 3 + 1 ) * 1
>1793	PrimaryExpression	1
>1794	AdditiveExpression	1 * 3 + 1
>1795	PrimaryExpression	1
>1796	MultiplicativeExpression	1 * 3
>1797	PrimaryExpression	3
>1798	PrimaryExpression	1
>1799	Identifier	cpara_array
>1800	Identifier	para11
>1801	ExpressionStatement	 
>1802	AssignmentExpr	para10 = cpara_array [ ( 1 * 3 + 0 ) * 1 + 0 ]
>1803	ArrayIndexing	cpara_array [ ( 1 * 3 + 0 ) * 1 + 0 ]
>1804	AdditiveExpression	( 1 * 3 + 0 ) * 1 + 0
>1805	PrimaryExpression	0
>1806	MultiplicativeExpression	( 1 * 3 + 0 ) * 1
>1807	PrimaryExpression	1
>1808	AdditiveExpression	1 * 3 + 0
>1809	PrimaryExpression	0
>1810	MultiplicativeExpression	1 * 3
>1811	PrimaryExpression	3
>1812	PrimaryExpression	1
>1813	Identifier	cpara_array
>1814	Identifier	para10
>1815	ExpressionStatement	 
>1816	AssignmentExpr	para02 = cpara_array [ ( 0 * 3 + 2 ) * 1 + 0 ]
>1817	ArrayIndexing	cpara_array [ ( 0 * 3 + 2 ) * 1 + 0 ]
>1818	AdditiveExpression	( 0 * 3 + 2 ) * 1 + 0
>1819	PrimaryExpression	0
>1820	MultiplicativeExpression	( 0 * 3 + 2 ) * 1
>1821	PrimaryExpression	1
>1822	AdditiveExpression	0 * 3 + 2
>1823	PrimaryExpression	2
>1824	MultiplicativeExpression	0 * 3
>1825	PrimaryExpression	3
>1826	PrimaryExpression	0
>1827	Identifier	cpara_array
>1828	Identifier	para02
>1829	ExpressionStatement	 
>1830	AssignmentExpr	para01 = cpara_array [ ( 0 * 3 + 1 ) * 1 + 0 ]
>1831	ArrayIndexing	cpara_array [ ( 0 * 3 + 1 ) * 1 + 0 ]
>1832	AdditiveExpression	( 0 * 3 + 1 ) * 1 + 0
>1833	PrimaryExpression	0
>1834	MultiplicativeExpression	( 0 * 3 + 1 ) * 1
>1835	PrimaryExpression	1
>1836	AdditiveExpression	0 * 3 + 1
>1837	PrimaryExpression	1
>1838	MultiplicativeExpression	0 * 3
>1839	PrimaryExpression	3
>1840	PrimaryExpression	0
>1841	Identifier	cpara_array
>1842	Identifier	para01
>1843	ExpressionStatement	 
>1844	AssignmentExpr	para00 = cpara_array [ ( 0 * 3 + 0 ) * 1 + 0 ]
>1845	ArrayIndexing	cpara_array [ ( 0 * 3 + 0 ) * 1 + 0 ]
>1846	AdditiveExpression	( 0 * 3 + 0 ) * 1 + 0
>1847	PrimaryExpression	0
>1848	MultiplicativeExpression	( 0 * 3 + 0 ) * 1
>1849	PrimaryExpression	1
>1850	AdditiveExpression	0 * 3 + 0
>1851	PrimaryExpression	0
>1852	MultiplicativeExpression	0 * 3
>1853	PrimaryExpression	3
>1854	PrimaryExpression	0
>1855	Identifier	cpara_array
>1856	Identifier	para00
>1857	IdentifierDeclStatement	 
>1858	IdentifierDecl	para21
>1859	Identifier	para21
>1860	IdentifierDeclType	double
>1861	IdentifierDecl	para20
>1862	Identifier	para20
>1863	IdentifierDeclType	double
>1864	IdentifierDecl	para12
>1865	Identifier	para12
>1866	IdentifierDeclType	double
>1867	IdentifierDecl	para11
>1868	Identifier	para11
>1869	IdentifierDeclType	double
>1870	IdentifierDecl	para10
>1871	Identifier	para10
>1872	IdentifierDeclType	double
>1873	IdentifierDecl	para02
>1874	Identifier	para02
>1875	IdentifierDeclType	double
>1876	IdentifierDecl	para01
>1877	Identifier	para01
>1878	IdentifierDeclType	double
>1879	IdentifierDecl	para00
>1880	Identifier	para00
>1881	IdentifierDeclType	double
>1882	IdentifierDeclStatement	 
>1883	IdentifierDecl	para11_x_yw
>1884	Identifier	para11_x_yw
>1885	IdentifierDeclType	double
>1886	IdentifierDecl	para01_x_yw
>1887	Identifier	para01_x_yw
>1888	IdentifierDeclType	double
>1889	IdentifierDecl	para21_x_yw
>1890	Identifier	para21_x_yw
>1891	IdentifierDeclType	double
>1892	IdentifierDeclStatement	 
>1893	IdentifierDecl	* cpara_array = i_cpara . getArray ( )
>1894	AssignmentExpr	* cpara_array = i_cpara . getArray ( )
>1895	CallExpression	i_cpara . getArray ( )
>1896	ArgumentList	 
>1897	Callee	i_cpara . getArray
>1898	MemberAccess	i_cpara . getArray
>1899	Identifier	getArray
>1900	Identifier	i_cpara
>1901	Identifier	cpara_array
>1902	Identifier	cpara_array
>1903	IdentifierDeclType	const double *
>1904	ExpressionStatement	 
>1905	CallExpression	initValue_wk_pickFromRaster_ext_pat2 ( L_extpat , L_WIDTH , L_HEIGHT )
>1906	ArgumentList	L_extpat
>1907	Argument	L_HEIGHT
>1908	Identifier	L_HEIGHT
>1909	Argument	L_WIDTH
>1910	Identifier	L_WIDTH
>1911	Argument	L_extpat
>1912	Identifier	L_extpat
>1913	Callee	initValue_wk_pickFromRaster_ext_pat2
>1914	Identifier	initValue_wk_pickFromRaster_ext_pat2
>1915	IdentifierDeclStatement	 
>1916	IdentifierDecl	L_HEIGHT = this -> _height
>1917	AssignmentExpr	L_HEIGHT = this -> _height
>1918	PtrMemberAccess	this -> _height
>1919	Identifier	_height
>1920	Identifier	this
>1921	Identifier	L_HEIGHT
>1922	Identifier	L_HEIGHT
>1923	IdentifierDeclType	const int
>1924	IdentifierDeclStatement	 
>1925	IdentifierDecl	L_WIDTH = this -> _width
>1926	AssignmentExpr	L_WIDTH = this -> _width
>1927	PtrMemberAccess	this -> _width
>1928	Identifier	_width
>1929	Identifier	this
>1930	Identifier	L_WIDTH
>1931	Identifier	L_WIDTH
>1932	IdentifierDeclType	const int
>1933	IdentifierDeclStatement	 
>1934	IdentifierDecl	* L_extpat = this -> _extpat
>1935	AssignmentExpr	* L_extpat = this -> _extpat
>1936	PtrMemberAccess	this -> _extpat
>1937	Identifier	_extpat
>1938	Identifier	this
>1939	Identifier	L_extpat
>1940	Identifier	L_extpat
>1941	IdentifierDeclType	int *
>1942	IdentifierDeclStatement	 
>1943	IdentifierDecl	img_y = image . getHeight ( )
>1944	AssignmentExpr	img_y = image . getHeight ( )
>1945	CallExpression	image . getHeight ( )
>1946	ArgumentList	 
>1947	Callee	image . getHeight
>1948	MemberAccess	image . getHeight
>1949	Identifier	getHeight
>1950	Identifier	image
>1951	Identifier	img_y
>1952	Identifier	img_y
>1953	IdentifierDeclType	const int
>1954	IdentifierDeclStatement	 
>1955	IdentifierDecl	img_x = image . getWidth ( )
>1956	AssignmentExpr	img_x = image . getWidth ( )
>1957	CallExpression	image . getWidth ( )
>1958	ArgumentList	 
>1959	Callee	image . getWidth
>1960	MemberAccess	image . getWidth
>1961	Identifier	getWidth
>1962	Identifier	image
>1963	Identifier	img_x
>1964	Identifier	img_x
>1965	IdentifierDeclType	const int
<24=26,25
<26=39,33,27
<27=28
<28=30,29
<30=32,31
<33=34
<34=36,35
<36=38,37
<39=40
<40=42,41
<42=44,43
<54=56,55
<56=66,57
<57=58
<58=64,59
<59=60
<60=61
<61=63,62
<64=65
<66=67
<67=73,68
<68=69
<69=70
<70=72,71
<73=74
<82=88,87,83
<83=84
<84=86,85
<88=222,218,162,154,144,134,126,116,106,96,90,89
<90=91
<91=93,92
<93=95,94
<96=97
<97=103,98
<98=100,99
<100=102,101
<103=105,104
<106=107
<107=113,108
<108=110,109
<110=112,111
<113=115,114
<116=117
<117=123,118
<118=120,119
<120=122,121
<123=125,124
<126=127
<127=131,128
<128=130,129
<131=133,132
<134=135
<135=141,136
<136=138,137
<138=140,139
<141=143,142
<144=145
<145=151,146
<146=148,147
<148=150,149
<151=153,152
<154=155
<155=159,156
<156=158,157
<159=161,160
<162=212,163
<163=206,194,185,176,170,164
<164=165
<165=167,166
<167=169,168
<170=171
<171=173,172
<173=175,174
<176=177
<177=183,178
<178=179
<179=180
<180=182,181
<183=184
<185=186
<186=192,187
<187=188
<188=189
<189=191,190
<192=193
<194=195
<195=205,196
<196=204,197
<197=203,198
<198=202,199
<199=201,200
<206=207
<207=211,208
<208=210,209
<212=213
<213=215,214
<215=217,216
<218=219
<219=221,220
<222=223
<223=225,224
<244=252,245
<245=249,246
<246=248,247
<249=251,250
<252=299,293,283,275,267,259,253
<253=254
<254=256,255
<256=258,257
<259=260
<260=264,261
<261=263,262
<264=266,265
<267=268
<268=272,269
<269=271,270
<272=274,273
<275=276
<276=280,277
<277=279,278
<280=282,281
<283=284
<284=290,285
<285=289,286
<286=288,287
<290=292,291
<293=294
<294=296,295
<296=298,297
<299=300
<300=302,301
<302=304,303
<319=321,320
<321=359,350,341,332,323,322
<323=324
<324=330,325
<325=326
<326=327
<327=329,328
<330=331
<332=333
<333=339,334
<334=335
<335=336
<336=338,337
<339=340
<341=342
<342=348,343
<343=344
<344=345
<345=347,346
<348=349
<350=351
<351=357,352
<352=353
<353=354
<354=356,355
<357=358
<359=360
<360=366,361
<361=362
<362=363
<363=365,364
<366=367
<378=381,380,379
<381=382
<382=383
<383=385,384
<392=395,394,393
<395=396
<396=397
<397=399,398
<406=409,408,407
<409=410
<410=411
<411=413,412
<420=429,428,421
<421=425,422
<422=424,423
<425=427,426
<429=797,796,795,794,793,792,791,790,789,788,787,759,758,749,737,728,716,709,705,460,447,432,430
<430=431
<432=433
<433=443,434
<434=439,435
<435=436
<436=438,437
<439=440
<440=442,441
<443=444
<444=446,445
<447=451,448
<448=449
<449=450
<451=452
<452=459,453
<453=455,454
<455=456
<456=458,457
<460=697,693,690,461
<461=680,668,662,652,642,636,630,624,618,600,582,576,570,564,554,544,538,520,502,482,462
<462=463
<463=471,464
<464=470,465
<465=467,466
<467=469,468
<471=481,472
<472=474,473
<474=476,475
<476=478,477
<478=480,479
<482=483
<483=491,484
<484=490,485
<485=487,486
<487=489,488
<491=501,492
<492=494,493
<494=496,495
<496=498,497
<498=500,499
<502=503
<503=517,504
<504=516,505
<505=511,506
<506=508,507
<508=510,509
<511=515,512
<512=514,513
<517=519,518
<520=521
<521=535,522
<522=534,523
<523=529,524
<524=526,525
<526=528,527
<529=533,530
<530=532,531
<535=537,536
<538=539
<539=541,540
<541=543,542
<544=545
<545=551,546
<546=550,547
<547=549,548
<551=553,552
<554=555
<555=561,556
<556=560,557
<557=559,558
<561=563,562
<564=565
<565=567,566
<567=569,568
<570=571
<571=573,572
<573=575,574
<576=577
<577=579,578
<579=581,580
<582=583
<583=597,584
<584=596,585
<585=591,586
<586=588,587
<588=590,589
<591=595,592
<592=594,593
<597=599,598
<600=601
<601=615,602
<602=614,603
<603=609,604
<604=606,605
<606=608,607
<609=613,610
<610=612,611
<615=617,616
<618=619
<619=621,620
<621=623,622
<624=625
<625=627,626
<627=629,628
<630=631
<631=633,632
<633=635,634
<636=637
<637=639,638
<639=641,640
<642=643
<643=649,644
<644=648,645
<645=647,646
<649=651,650
<652=653
<653=659,654
<654=658,655
<655=657,656
<659=661,660
<662=663
<663=667,664
<664=666,665
<668=669
<669=679,670
<670=678,671
<671=673,672
<673=675,674
<675=677,676
<680=681
<681=689,682
<682=688,683
<683=685,684
<685=687,686
<690=692,691
<693=694
<694=696,695
<697=698
<698=699
<699=704,703,700
<700=702,701
<705=706
<706=708,707
<709=713,710
<710=712,711
<713=715,714
<716=717
<717=727,726,718
<718=725,719
<719=721,720
<721=722
<722=724,723
<728=729
<729=736,735,730
<730=734,731
<731=733,732
<737=738
<738=748,747,739
<739=746,740
<740=742,741
<742=743
<743=745,744
<749=750
<750=757,756,751
<751=755,752
<752=754,753
<759=783,782,776,775,767,766,760
<760=765,764,763,762,761
<767=774,773,772,771,770,769,768
<776=781,780,779,778,777
<783=786,785,784
<832=844,843,833
<833=840,837,834
<834=836,835
<837=839,838
<840=842,841
<844=846,845
<846=847
<847=863,848
<848=861,859,849
<849=850
<850=858,851
<851=857,852
<852=856,853
<853=855,854
<859=860
<861=862
<863=864
<871=880,879,872
<872=876,873
<873=875,874
<876=878,877
<880=1181,1172,1165,1158,1151,1137,1123,1113,1099,1085,1075,1065,1059,1053,1041,1031,1017,1003,993,979,965,955,945,939,933,921,911,896,883,881
<881=882
<883=884
<884=894,885
<885=892,890,888,886
<886=887
<888=889
<890=891
<892=893
<894=895
<896=900,897
<897=898
<898=899
<900=901
<901=910,902
<902=908,903
<903=906,904
<904=905
<906=907
<908=909
<911=917,912
<912=913
<913=914
<914=916,915
<917=918
<918=920,919
<921=927,922
<922=923
<923=924
<924=926,925
<927=928
<928=930,929
<930=932,931
<933=934
<934=938,935
<935=937,936
<939=940
<940=944,941
<941=943,942
<945=951,946
<946=947
<947=948
<948=950,949
<951=952
<952=954,953
<955=956
<956=964,957
<957=961,958
<958=960,959
<961=963,962
<965=966
<966=978,967
<967=973,968
<968=970,969
<970=972,971
<973=975,974
<975=977,976
<979=980
<980=992,981
<981=987,982
<982=984,983
<984=986,985
<987=989,988
<989=991,990
<993=994
<994=1002,995
<995=999,996
<996=998,997
<999=1001,1000
<1003=1004
<1004=1016,1005
<1005=1011,1006
<1006=1008,1007
<1008=1010,1009
<1011=1013,1012
<1013=1015,1014
<1017=1018
<1018=1030,1019
<1019=1025,1020
<1020=1022,1021
<1022=1024,1023
<1025=1027,1026
<1027=1029,1028
<1031=1037,1032
<1032=1033
<1033=1034
<1034=1036,1035
<1037=1038
<1038=1040,1039
<1041=1047,1042
<1042=1043
<1043=1044
<1044=1046,1045
<1047=1048
<1048=1050,1049
<1050=1052,1051
<1053=1054
<1054=1058,1055
<1055=1057,1056
<1059=1060
<1060=1064,1061
<1061=1063,1062
<1065=1071,1066
<1066=1067
<1067=1068
<1068=1070,1069
<1071=1072
<1072=1074,1073
<1075=1076
<1076=1084,1077
<1077=1081,1078
<1078=1080,1079
<1081=1083,1082
<1085=1086
<1086=1098,1087
<1087=1093,1088
<1088=1090,1089
<1090=1092,1091
<1093=1095,1094
<1095=1097,1096
<1099=1100
<1100=1112,1101
<1101=1107,1102
<1102=1104,1103
<1104=1106,1105
<1107=1109,1108
<1109=1111,1110
<1113=1114
<1114=1122,1115
<1115=1119,1116
<1116=1118,1117
<1119=1121,1120
<1123=1124
<1124=1136,1125
<1125=1131,1126
<1126=1128,1127
<1128=1130,1129
<1131=1133,1132
<1133=1135,1134
<1137=1138
<1138=1150,1139
<1139=1145,1140
<1140=1142,1141
<1142=1144,1143
<1145=1147,1146
<1147=1149,1148
<1151=1155,1152
<1152=1154,1153
<1155=1157,1156
<1158=1162,1159
<1159=1161,1160
<1162=1164,1163
<1165=1169,1166
<1166=1168,1167
<1169=1171,1170
<1172=1173
<1173=1180,1179,1174
<1174=1178,1175
<1175=1177,1176
<1181=1182
<1182=1191,1190,1183
<1183=1189,1184
<1184=1188,1185
<1185=1187,1186
<1226=1241,1240,1227
<1227=1237,1234,1231,1228
<1228=1230,1229
<1231=1233,1232
<1234=1236,1235
<1237=1239,1238
<1241=1954,1942,1933,1924,1915,1904,1892,1882,1857,1843,1829,1815,1801,1787,1773,1759,1745,1738,1731,1724,1715,1706,1696,1683,1566,1562,1558,1554,1542,1297,1288,1284,1243,1242
<1243=1276,1272,1269,1244
<1244=1261,1253,1245
<1245=1246
<1246=1248,1247
<1248=1252,1249
<1249=1251,1250
<1253=1254
<1254=1256,1255
<1256=1260,1257
<1257=1259,1258
<1261=1262
<1262=1264,1263
<1264=1268,1265
<1265=1267,1266
<1269=1271,1270
<1272=1273
<1273=1275,1274
<1276=1277
<1277=1283,1278
<1278=1280,1279
<1280=1282,1281
<1284=1285
<1285=1287,1286
<1288=1289
<1289=1296,1295,1290
<1290=1294,1291
<1291=1293,1292
<1297=1538,1534,1531,1298
<1298=1517,1509,1501,1493,1479,1475,1375,1360,1299
<1299=1354,1350,1347,1300
<1300=1337,1325,1313,1301
<1301=1302
<1302=1310,1303
<1303=1309,1304
<1304=1306,1305
<1306=1308,1307
<1310=1312,1311
<1313=1314
<1314=1322,1315
<1315=1321,1316
<1316=1318,1317
<1318=1320,1319
<1322=1324,1323
<1325=1326
<1326=1334,1327
<1327=1333,1328
<1328=1330,1329
<1330=1332,1331
<1334=1336,1335
<1337=1338
<1338=1346,1339
<1339=1345,1340
<1340=1342,1341
<1342=1344,1343
<1347=1349,1348
<1350=1351
<1351=1353,1352
<1354=1355
<1355=1359,1356
<1356=1358,1357
<1360=1361
<1361=1371,1362
<1362=1369,1367,1365,1363
<1363=1364
<1365=1366
<1367=1368
<1369=1370
<1371=1372
<1372=1374,1373
<1375=1471,1467,1464,1376
<1376=1456,1444,1432,1420,1401,1395,1389,1381,1377
<1377=1378
<1378=1380,1379
<1381=1382
<1382=1386,1383
<1383=1385,1384
<1386=1388,1387
<1389=1390
<1390=1392,1391
<1392=1394,1393
<1395=1396
<1396=1398,1397
<1398=1400,1399
<1401=1404,1402
<1402=1403
<1404=1405
<1405=1417,1406
<1406=1414,1407
<1407=1411,1408
<1408=1410,1409
<1411=1413,1412
<1414=1416,1415
<1417=1419,1418
<1420=1421
<1421=1431,1422
<1422=1430,1423
<1423=1425,1424
<1425=1427,1426
<1427=1429,1428
<1432=1433
<1433=1443,1434
<1434=1442,1435
<1435=1437,1436
<1437=1439,1438
<1439=1441,1440
<1444=1452,1445
<1445=1451,1446
<1446=1447
<1447=1449,1448
<1449=1450
<1452=1453
<1453=1455,1454
<1456=1457
<1457=1463,1458
<1458=1460,1459
<1460=1462,1461
<1464=1466,1465
<1467=1468
<1468=1470,1469
<1471=1472
<1472=1474,1473
<1475=1476
<1476=1478,1477
<1479=1480
<1480=1492,1481
<1481=1491,1482
<1482=1488,1483
<1483=1485,1484
<1485=1487,1486
<1488=1490,1489
<1493=1494
<1494=1500,1495
<1495=1497,1496
<1497=1499,1498
<1501=1502
<1502=1508,1503
<1503=1505,1504
<1505=1507,1506
<1509=1510
<1510=1516,1511
<1511=1513,1512
<1513=1515,1514
<1517=1518
<1518=1530,1519
<1519=1529,1520
<1520=1528,1521
<1521=1523,1522
<1523=1525,1524
<1525=1527,1526
<1531=1533,1532
<1534=1535
<1535=1537,1536
<1538=1539
<1539=1541,1540
<1542=1543
<1543=1553,1552,1544
<1544=1551,1545
<1545=1547,1546
<1547=1548
<1548=1550,1549
<1554=1555
<1555=1557,1556
<1558=1559
<1559=1561,1560
<1562=1563
<1563=1565,1564
<1566=1672,1663,1657,1651,1645,1639,1633,1627,1621,1567
<1567=1617,1613,1610,1568
<1568=1593,1585,1577,1569
<1569=1570
<1570=1574,1571
<1571=1573,1572
<1574=1576,1575
<1577=1578
<1578=1582,1579
<1579=1581,1580
<1582=1584,1583
<1585=1586
<1586=1590,1587
<1587=1589,1588
<1590=1592,1591
<1593=1594
<1594=1609,1608,1595
<1595=1607,1596
<1596=1606,1597
<1597=1605,1598
<1598=1600,1599
<1600=1602,1601
<1602=1604,1603
<1610=1612,1611
<1613=1614
<1614=1616,1615
<1617=1618
<1618=1620,1619
<1621=1622
<1622=1626,1623
<1623=1625,1624
<1627=1628
<1628=1632,1629
<1629=1631,1630
<1633=1634
<1634=1638,1635
<1635=1637,1636
<1639=1640
<1640=1644,1641
<1641=1643,1642
<1645=1646
<1646=1650,1647
<1647=1649,1648
<1651=1652
<1652=1656,1653
<1653=1655,1654
<1657=1658
<1658=1662,1659
<1659=1661,1660
<1663=1664
<1664=1668,1665
<1665=1666
<1666=1667
<1668=1669
<1669=1671,1670
<1672=1673
<1673=1682,1681,1674
<1674=1680,1675
<1675=1679,1676
<1676=1678,1677
<1683=1693,1690,1687,1684
<1684=1686,1685
<1687=1689,1688
<1690=1692,1691
<1693=1695,1694
<1696=1703,1700,1697
<1697=1699,1698
<1700=1702,1701
<1703=1705,1704
<1706=1707
<1707=1714,1713,1708
<1708=1712,1709
<1709=1711,1710
<1715=1716
<1716=1723,1722,1717
<1717=1721,1718
<1718=1720,1719
<1724=1728,1725
<1725=1727,1726
<1728=1730,1729
<1731=1735,1732
<1732=1734,1733
<1735=1737,1736
<1738=1742,1739
<1739=1741,1740
<1742=1744,1743
<1745=1746
<1746=1758,1747
<1747=1757,1748
<1748=1750,1749
<1750=1752,1751
<1752=1754,1753
<1754=1756,1755
<1759=1760
<1760=1772,1761
<1761=1771,1762
<1762=1764,1763
<1764=1766,1765
<1766=1768,1767
<1768=1770,1769
<1773=1774
<1774=1786,1775
<1775=1785,1776
<1776=1778,1777
<1778=1780,1779
<1780=1782,1781
<1782=1784,1783
<1787=1788
<1788=1800,1789
<1789=1799,1790
<1790=1792,1791
<1792=1794,1793
<1794=1796,1795
<1796=1798,1797
<1801=1802
<1802=1814,1803
<1803=1813,1804
<1804=1806,1805
<1806=1808,1807
<1808=1810,1809
<1810=1812,1811
<1815=1816
<1816=1828,1817
<1817=1827,1818
<1818=1820,1819
<1820=1822,1821
<1822=1824,1823
<1824=1826,1825
<1829=1830
<1830=1842,1831
<1831=1841,1832
<1832=1834,1833
<1834=1836,1835
<1836=1838,1837
<1838=1840,1839
<1843=1844
<1844=1856,1845
<1845=1855,1846
<1846=1848,1847
<1848=1850,1849
<1850=1852,1851
<1852=1854,1853
<1857=1879,1876,1873,1870,1867,1864,1861,1858
<1858=1860,1859
<1861=1863,1862
<1864=1866,1865
<1867=1869,1868
<1870=1872,1871
<1873=1875,1874
<1876=1878,1877
<1879=1881,1880
<1882=1889,1886,1883
<1883=1885,1884
<1886=1888,1887
<1889=1891,1890
<1892=1893
<1893=1903,1902,1894
<1894=1901,1895
<1895=1897,1896
<1897=1898
<1898=1900,1899
<1904=1905
<1905=1913,1906
<1906=1911,1909,1907
<1907=1908
<1909=1910
<1911=1912
<1913=1914
<1915=1916
<1916=1923,1922,1917
<1917=1921,1918
<1918=1920,1919
<1924=1925
<1925=1932,1931,1926
<1926=1930,1927
<1927=1929,1928
<1933=1934
<1934=1941,1940,1935
<1935=1939,1936
<1936=1938,1937
<1942=1943
<1943=1953,1952,1944
<1944=1951,1945
<1945=1947,1946
<1947=1948
<1948=1950,1949
<1954=1955
<1955=1965,1964,1956
<1956=1963,1957
<1957=1959,1958
<1959=1960
<1960=1962,1961
