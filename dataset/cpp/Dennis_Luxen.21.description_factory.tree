>3	FunctionDef	DescriptionFactory 
>4	ParameterList	 
>5	CompoundStatement	 
>6	ExpressionStatement	 
>7	CallExpression	via_indices . push_back ( 0 )
>8	ArgumentList	0
>9	Argument	0
>10	PrimaryExpression	0
>11	Callee	via_indices . push_back
>12	MemberAccess	via_indices . push_back
>13	Identifier	push_back
>14	Identifier	via_indices
>19	FunctionDef	DescriptionFactory 
>20	ParameterList	 
>21	ReturnType	std 
>22	CompoundStatement	 
>23	ReturnStatement	 
>24	Identifier	via_indices
>29	FunctionDef	DescriptionFactory 
>30	ParameterList	const PhantomNode & source , const bool traversed_in_reverse
>31	Parameter	 
>32	Identifier	traversed_in_reverse
>33	ParameterType	const bool
>34	Parameter	 
>35	Identifier	source
>36	ParameterType	const PhantomNode &
>37	ReturnType	void
>38	CompoundStatement	 
>39	ExpressionStatement	 
>40	CallExpression	BOOST_ASSERT ( path_description . back ( ) . duration == segment_duration )
>41	ArgumentList	path_description . back ( ) . duration == segment_duration
>42	Argument	path_description . back ( ) . duration == segment_duration
>43	EqualityExpression	path_description . back ( ) . duration == segment_duration
>44	Identifier	segment_duration
>45	MemberAccess	path_description . back ( ) . duration
>46	Identifier	duration
>47	CallExpression	path_description . back ( )
>48	ArgumentList	 
>49	Callee	path_description . back
>50	MemberAccess	path_description . back
>51	Identifier	back
>52	Identifier	path_description
>53	Callee	BOOST_ASSERT
>54	Identifier	BOOST_ASSERT
>55	ExpressionStatement	 
>56	CallExpression	AppendSegment ( source . location , PathData ( 0 , source . name_id , TurnInstruction 
>57	ArgumentList	source . location
>58	Argument	PathData ( 0 , source . name_id , TurnInstruction 
>59	CallExpression	PathData ( 0 , source . name_id , TurnInstruction 
>60	ArgumentList	0
>61	Argument	travel_mode
>62	Identifier	travel_mode
>63	Argument	segment_duration
>64	Identifier	segment_duration
>65	Argument	TurnInstruction 
>66	Identifier	TurnInstruction 
>67	Argument	source . name_id
>68	MemberAccess	source . name_id
>69	Identifier	name_id
>70	Identifier	source
>71	Argument	0
>72	PrimaryExpression	0
>73	Callee	PathData
>74	Identifier	PathData
>75	Argument	source . location
>76	MemberAccess	source . location
>77	Identifier	location
>78	Identifier	source
>79	Callee	AppendSegment
>80	Identifier	AppendSegment
>81	IdentifierDeclStatement	 
>82	IdentifierDecl	travel_mode = ( traversed_in_reverse ? source . backward_travel_mode 
>83	AssignmentExpr	travel_mode = ( traversed_in_reverse ? source . backward_travel_mode 
>84	ConditionalExpression	traversed_in_reverse ? source . backward_travel_mode 
>85	MemberAccess	source . forward_travel_mode
>86	Identifier	forward_travel_mode
>87	Identifier	source
>88	MemberAccess	source . backward_travel_mode
>89	Identifier	backward_travel_mode
>90	Identifier	source
>91	Condition	traversed_in_reverse
>92	Identifier	traversed_in_reverse
>93	Identifier	travel_mode
>94	Identifier	travel_mode
>95	IdentifierDeclType	const TravelMode
>96	IdentifierDeclStatement	 
>97	IdentifierDecl	segment_duration = ( traversed_in_reverse ? source . reverse_weight 
>98	AssignmentExpr	segment_duration = ( traversed_in_reverse ? source . reverse_weight 
>99	ConditionalExpression	traversed_in_reverse ? source . reverse_weight 
>100	MemberAccess	source . forward_weight
>101	Identifier	forward_weight
>102	Identifier	source
>103	MemberAccess	source . reverse_weight
>104	Identifier	reverse_weight
>105	Identifier	source
>106	Condition	traversed_in_reverse
>107	Identifier	traversed_in_reverse
>108	Identifier	segment_duration
>109	Identifier	segment_duration
>110	IdentifierDeclType	const EdgeWeight
>111	ExpressionStatement	 
>112	AssignmentExpr	start_phantom = source
>113	Identifier	source
>114	Identifier	start_phantom
>134	FunctionDef	DescriptionFactory 
>135	ParameterList	const PhantomNode & target , const bool traversed_in_reverse , const bool is_via_location
>136	Parameter	 
>137	Identifier	is_via_location
>138	ParameterType	const bool
>139	Parameter	 
>140	Identifier	traversed_in_reverse
>141	ParameterType	const bool
>142	Parameter	 
>143	Identifier	target
>144	ParameterType	const PhantomNode &
>145	ReturnType	void
>146	CompoundStatement	 
>147	ExpressionStatement	 
>148	CallExpression	BOOST_ASSERT ( path_description . back ( ) . duration == segment_duration )
>149	ArgumentList	path_description . back ( ) . duration == segment_duration
>150	Argument	path_description . back ( ) . duration == segment_duration
>151	EqualityExpression	path_description . back ( ) . duration == segment_duration
>152	Identifier	segment_duration
>153	MemberAccess	path_description . back ( ) . duration
>154	Identifier	duration
>155	CallExpression	path_description . back ( )
>156	ArgumentList	 
>157	Callee	path_description . back
>158	MemberAccess	path_description . back
>159	Identifier	back
>160	Identifier	path_description
>161	Callee	BOOST_ASSERT
>162	Identifier	BOOST_ASSERT
>163	ExpressionStatement	 
>164	CallExpression	path_description . emplace_back ( target . location , target . name_id , segment_duration , 0.f , is_via_location ? \
>165	ArgumentList	target . location
>166	Argument	travel_mode
>167	Identifier	travel_mode
>168	Argument	true
>169	Identifier	true
>170	Argument	true
>171	Identifier	true
>172	Argument	is_via_location ? TurnInstruction 
>173	ConditionalExpression	is_via_location ? TurnInstruction 
>174	Identifier	TurnInstruction 
>175	Identifier	TurnInstruction 
>176	Condition	is_via_location
>177	Identifier	is_via_location
>178	Argument	0.f
>179	PrimaryExpression	0.f
>180	Argument	segment_duration
>181	Identifier	segment_duration
>182	Argument	target . name_id
>183	MemberAccess	target . name_id
>184	Identifier	name_id
>185	Identifier	target
>186	Argument	target . location
>187	MemberAccess	target . location
>188	Identifier	location
>189	Identifier	target
>190	Callee	path_description . emplace_back
>191	MemberAccess	path_description . emplace_back
>192	Identifier	emplace_back
>193	Identifier	path_description
>194	IdentifierDeclStatement	 
>195	IdentifierDecl	travel_mode = ( traversed_in_reverse ? target . backward_travel_mode 
>196	AssignmentExpr	travel_mode = ( traversed_in_reverse ? target . backward_travel_mode 
>197	ConditionalExpression	traversed_in_reverse ? target . backward_travel_mode 
>198	MemberAccess	target . forward_travel_mode
>199	Identifier	forward_travel_mode
>200	Identifier	target
>201	MemberAccess	target . backward_travel_mode
>202	Identifier	backward_travel_mode
>203	Identifier	target
>204	Condition	traversed_in_reverse
>205	Identifier	traversed_in_reverse
>206	Identifier	travel_mode
>207	Identifier	travel_mode
>208	IdentifierDeclType	const TravelMode
>209	IdentifierDeclStatement	 
>210	IdentifierDecl	segment_duration = ( traversed_in_reverse ? target . reverse_weight 
>211	AssignmentExpr	segment_duration = ( traversed_in_reverse ? target . reverse_weight 
>212	ConditionalExpression	traversed_in_reverse ? target . reverse_weight 
>213	MemberAccess	target . forward_weight
>214	Identifier	forward_weight
>215	Identifier	target
>216	MemberAccess	target . reverse_weight
>217	Identifier	reverse_weight
>218	Identifier	target
>219	Condition	traversed_in_reverse
>220	Identifier	traversed_in_reverse
>221	Identifier	segment_duration
>222	Identifier	segment_duration
>223	IdentifierDeclType	const EdgeWeight
>224	ExpressionStatement	 
>225	AssignmentExpr	target_phantom = target
>226	Identifier	target
>227	Identifier	target_phantom
>249	FunctionDef	DescriptionFactory 
>250	ParameterList	const FixedPointCoordinate & coordinate , const PathData & path_point
>251	Parameter	 
>252	Identifier	path_point
>253	ParameterType	const PathData &
>254	Parameter	 
>255	Identifier	coordinate
>256	ParameterType	const FixedPointCoordinate &
>257	ReturnType	void
>258	CompoundStatement	 
>259	ExpressionStatement	 
>260	CallExpression	path_description . emplace_back ( coordinate , path_point . name_id , path_point . segment_duration , 0.f , turn , \
>261	ArgumentList	coordinate
>262	Argument	path_point . travel_mode
>263	MemberAccess	path_point . travel_mode
>264	Identifier	travel_mode
>265	Identifier	path_point
>266	Argument	turn
>267	Identifier	turn
>268	Argument	0.f
>269	PrimaryExpression	0.f
>270	Argument	path_point . segment_duration
>271	MemberAccess	path_point . segment_duration
>272	Identifier	segment_duration
>273	Identifier	path_point
>274	Argument	path_point . name_id
>275	MemberAccess	path_point . name_id
>276	Identifier	name_id
>277	Identifier	path_point
>278	Argument	coordinate
>279	Identifier	coordinate
>280	Callee	path_description . emplace_back
>281	MemberAccess	path_description . emplace_back
>282	Identifier	emplace_back
>283	Identifier	path_description
>284	ExpressionStatement	 
>285	Statement	 
>286	Statement	 
>287	CompoundStatement	 
>288	ReturnStatement	 
>289	MemberAccess	path_point . turn_instruction
>290	Identifier	turn_instruction
>291	Identifier	path_point
>292	IfStatement	if ( TurnInstruction 
>293	CompoundStatement	 
>294	ReturnStatement	 
>295	Identifier	TurnInstruction 
>296	Condition	 
>297	AndExpression	TurnInstruction 
>298	AndExpression	path_description . front ( ) . travel_mode != path_point . travel_mode && path_point . segment_duration > \
>299	RelationalExpression	path_point . segment_duration > 0
>300	PrimaryExpression	0
>301	MemberAccess	path_point . segment_duration
>302	Identifier	segment_duration
>303	Identifier	path_point
>304	EqualityExpression	path_description . front ( ) . travel_mode != path_point . travel_mode
>305	MemberAccess	path_point . travel_mode
>306	Identifier	travel_mode
>307	Identifier	path_point
>308	MemberAccess	path_description . front ( ) . travel_mode
>309	Identifier	travel_mode
>310	CallExpression	path_description . front ( )
>311	ArgumentList	 
>312	Callee	path_description . front
>313	MemberAccess	path_description . front
>314	Identifier	front
>315	Identifier	path_description
>316	EqualityExpression	TurnInstruction 
>317	MemberAccess	path_point . turn_instruction
>318	Identifier	turn_instruction
>319	Identifier	path_point
>320	Identifier	TurnInstruction 
>321	Statement	 
>322	Statement	 
>323	Statement	 
>324	Statement	 
>325	Statement	 
>326	Statement	 
>327	Statement	 
>328	Statement	 
>329	Statement	 
>330	Statement	 
>331	Statement	 
>332	IfStatement	if ( ( 1 == path_description . size ( ) ) && ( path_description . front ( ) . location == coordinate ) )
>333	CompoundStatement	 
>334	ReturnStatement	 
>335	IfStatement	if ( path_point . segment_duration > 0 )
>336	CompoundStatement	 
>337	ExpressionStatement	 
>338	AssignmentExpr	path_description . front ( ) . travel_mode = path_point . travel_mode
>339	MemberAccess	path_point . travel_mode
>340	Identifier	travel_mode
>341	Identifier	path_point
>342	MemberAccess	path_description . front ( ) . travel_mode
>343	Identifier	travel_mode
>344	CallExpression	path_description . front ( )
>345	ArgumentList	 
>346	Callee	path_description . front
>347	MemberAccess	path_description . front
>348	Identifier	front
>349	Identifier	path_description
>350	ExpressionStatement	 
>351	AssignmentExpr	path_description . front ( ) . name_id = path_point . name_id
>352	MemberAccess	path_point . name_id
>353	Identifier	name_id
>354	Identifier	path_point
>355	MemberAccess	path_description . front ( ) . name_id
>356	Identifier	name_id
>357	CallExpression	path_description . front ( )
>358	ArgumentList	 
>359	Callee	path_description . front
>360	MemberAccess	path_description . front
>361	Identifier	front
>362	Identifier	path_description
>363	Condition	 
>364	RelationalExpression	path_point . segment_duration > 0
>365	PrimaryExpression	0
>366	MemberAccess	path_point . segment_duration
>367	Identifier	segment_duration
>368	Identifier	path_point
>369	Condition	 
>370	AndExpression	( 1 == path_description . size ( ) ) && ( path_description . front ( ) . location == coordinate )
>371	EqualityExpression	path_description . front ( ) . location == coordinate
>372	Identifier	coordinate
>373	MemberAccess	path_description . front ( ) . location
>374	Identifier	location
>375	CallExpression	path_description . front ( )
>376	ArgumentList	 
>377	Callee	path_description . front
>378	MemberAccess	path_description . front
>379	Identifier	front
>380	Identifier	path_description
>381	EqualityExpression	1 == path_description . size ( )
>382	CallExpression	path_description . size ( )
>383	ArgumentList	 
>384	Callee	path_description . size
>385	MemberAccess	path_description . size
>386	Identifier	size
>387	Identifier	path_description
>388	PrimaryExpression	1
>407	FunctionDef	DescriptionFactory 
>408	ParameterList	const bool return_encoded
>409	Parameter	 
>410	Identifier	return_encoded
>411	ParameterType	const bool
>412	ReturnType	osrm 
>413	CompoundStatement	 
>414	ReturnStatement	 
>415	CallExpression	PolylineFormatter ( ) . printUnencodedString ( path_description )
>416	ArgumentList	path_description
>417	Argument	path_description
>418	Identifier	path_description
>419	Callee	PolylineFormatter ( ) . printUnencodedString
>420	MemberAccess	PolylineFormatter ( ) . printUnencodedString
>421	Identifier	printUnencodedString
>422	CallExpression	PolylineFormatter ( )
>423	ArgumentList	 
>424	Callee	PolylineFormatter
>425	Identifier	PolylineFormatter
>426	IfStatement	if ( return_encoded )
>427	CompoundStatement	 
>428	ReturnStatement	 
>429	CallExpression	PolylineFormatter ( ) . printEncodedString ( path_description )
>430	ArgumentList	path_description
>431	Argument	path_description
>432	Identifier	path_description
>433	Callee	PolylineFormatter ( ) . printEncodedString
>434	MemberAccess	PolylineFormatter ( ) . printEncodedString
>435	Identifier	printEncodedString
>436	CallExpression	PolylineFormatter ( )
>437	ArgumentList	 
>438	Callee	PolylineFormatter
>439	Identifier	PolylineFormatter
>440	Condition	 
>441	Identifier	return_encoded
<3=5,4
<5=6
<6=7
<7=11,8
<8=9
<9=10
<11=12
<12=14,13
<19=22,21,20
<22=23
<23=24
<29=38,37,30
<30=34,31
<31=33,32
<34=36,35
<38=111,96,81,55,39
<39=40
<40=53,41
<41=42
<42=43
<43=45,44
<45=47,46
<47=49,48
<49=50
<50=52,51
<53=54
<55=56
<56=79,57
<57=75,58
<58=59
<59=73,60
<60=71,67,65,63,61
<61=62
<63=64
<65=66
<67=68
<68=70,69
<71=72
<73=74
<75=76
<76=78,77
<79=80
<81=82
<82=95,94,83
<83=93,84
<84=91,88,85
<85=87,86
<88=90,89
<91=92
<96=97
<97=110,109,98
<98=108,99
<99=106,103,100
<100=102,101
<103=105,104
<106=107
<111=112
<112=114,113
<134=146,145,135
<135=142,139,136
<136=138,137
<139=141,140
<142=144,143
<146=224,209,194,163,147
<147=148
<148=161,149
<149=150
<150=151
<151=153,152
<153=155,154
<155=157,156
<157=158
<158=160,159
<161=162
<163=164
<164=190,165
<165=186,182,180,178,172,170,168,166
<166=167
<168=169
<170=171
<172=173
<173=176,175,174
<176=177
<178=179
<180=181
<182=183
<183=185,184
<186=187
<187=189,188
<190=191
<191=193,192
<194=195
<195=208,207,196
<196=206,197
<197=204,201,198
<198=200,199
<201=203,202
<204=205
<209=210
<210=223,222,211
<211=221,212
<212=219,216,213
<213=215,214
<216=218,217
<219=220
<224=225
<225=227,226
<249=258,257,250
<250=254,251
<251=253,252
<254=256,255
<258=332,331,330,329,328,327,326,325,324,323,322,321,287,286,285,284,259
<259=260
<260=280,261
<261=278,274,270,268,266,262
<262=263
<263=265,264
<266=267
<268=269
<270=271
<271=273,272
<274=275
<275=277,276
<278=279
<280=281
<281=283,282
<287=292,288
<288=289
<289=291,290
<292=296,293
<293=294
<294=295
<296=297
<297=316,298
<298=304,299
<299=301,300
<301=303,302
<304=308,305
<305=307,306
<308=310,309
<310=312,311
<312=313
<313=315,314
<316=320,317
<317=319,318
<332=369,333
<333=335,334
<335=363,336
<336=350,337
<337=338
<338=342,339
<339=341,340
<342=344,343
<344=346,345
<346=347
<347=349,348
<350=351
<351=355,352
<352=354,353
<355=357,356
<357=359,358
<359=360
<360=362,361
<363=364
<364=366,365
<366=368,367
<369=370
<370=381,371
<371=373,372
<373=375,374
<375=377,376
<377=378
<378=380,379
<381=388,382
<382=384,383
<384=385
<385=387,386
<407=413,412,408
<408=409
<409=411,410
<413=426,414
<414=415
<415=419,416
<416=417
<417=418
<419=420
<420=422,421
<422=424,423
<424=425
<426=440,427
<427=428
<428=429
<429=433,430
<430=431
<431=432
<433=434
<434=436,435
<436=438,437
<438=439
<440=441
