>3	FunctionDef	callFunction (mxArray * plhs [ ] , const mxArray * prhs [ ])
>4	ParameterList	mxArray * plhs [ ] , const mxArray * prhs [ ]
>5	Parameter	 
>6	Identifier	prhs
>7	ParameterType	const mxArray * [ ]
>8	Parameter	 
>9	Identifier	plhs
>10	ParameterType	mxArray * [ ]
>11	ReturnType	inline void
>12	CompoundStatement	 
>13	ExpressionStatement	 
>14	CallExpression	XY . invSym ( )
>15	ArgumentList	 
>16	Callee	XY . invSym
>17	MemberAccess	XY . invSym
>18	Identifier	invSym
>19	Identifier	XY
>20	ExpressionStatement	 
>21	CallExpression	XY . copy ( X )
>22	ArgumentList	X
>23	Argument	X
>24	Identifier	X
>25	Callee	XY . copy
>26	MemberAccess	XY . copy
>27	Identifier	copy
>28	Identifier	XY
>29	IdentifierDeclStatement	 
>30	IdentifierDecl	XY ( prXY , n , M )
>31	Expression	prXY , n , M
>32	Expression	n , M
>33	Identifier	M
>34	Identifier	n
>35	Identifier	prXY
>36	Identifier	XY
>37	IdentifierDeclType	Matrix < T >
>38	IdentifierDeclStatement	 
>39	IdentifierDecl	X ( prX , n , M )
>40	Expression	prX , n , M
>41	Expression	n , M
>42	Identifier	M
>43	Identifier	n
>44	Identifier	prX
>45	Identifier	X
>46	IdentifierDeclType	Matrix < T >
>47	ExpressionStatement	 
>48	CallExpression	mxGetPr ( plhs [ 0 ] )
>49	ArgumentList	plhs [ 0 ]
>50	Argument	plhs [ 0 ]
>51	ArrayIndexing	plhs [ 0 ]
>52	PrimaryExpression	0
>53	Identifier	plhs
>54	Callee	mxGetPr
>55	Identifier	mxGetPr
>56	Statement	 
>57	Statement	 
>58	Statement	 
>59	Statement	 
>60	Statement	 
>61	Statement	 
>62	Statement	 
>63	Statement	 
>64	Statement	 
>65	ExpressionStatement	 
>66	AssignmentExpr	plhs [ 0 ] = createMatrix < T > ( n , M )
>67	RelationalExpression	createMatrix < T > ( n , M )
>68	RelationalExpression	T > ( n , M )
>69	Expression	n , M
>70	Identifier	M
>71	Identifier	n
>72	Identifier	T
>73	Identifier	createMatrix
>74	ArrayIndexing	plhs [ 0 ]
>75	PrimaryExpression	0
>76	Identifier	plhs
>77	ExpressionStatement	 
>78	ArrayIndexing	dimsX [ 1 ]
>79	PrimaryExpression	1
>80	Identifier	dimsX
>81	Statement	 
>82	Statement	 
>83	Statement	 
>84	Statement	 
>85	Statement	 
>86	Statement	 
>87	Statement	 
>88	ExpressionStatement	 
>89	ArrayIndexing	dimsX [ 0 ]
>90	PrimaryExpression	0
>91	Identifier	dimsX
>92	Statement	 
>93	Statement	 
>94	Statement	 
>95	Statement	 
>96	Statement	 
>97	Statement	 
>98	Statement	 
>99	IdentifierDeclStatement	 
>100	IdentifierDecl	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>101	AssignmentExpr	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>102	CallExpression	mxGetDimensions ( prhs [ 0 ] )
>103	ArgumentList	prhs [ 0 ]
>104	Argument	prhs [ 0 ]
>105	ArrayIndexing	prhs [ 0 ]
>106	PrimaryExpression	0
>107	Identifier	prhs
>108	Callee	mxGetDimensions
>109	Identifier	mxGetDimensions
>110	Identifier	dimsX
>111	Identifier	dimsX
>112	IdentifierDeclType	const mwSize *
>113	ExpressionStatement	 
>114	CallExpression	mxGetPr ( prhs [ 0 ] )
>115	ArgumentList	prhs [ 0 ]
>116	Argument	prhs [ 0 ]
>117	ArrayIndexing	prhs [ 0 ]
>118	PrimaryExpression	0
>119	Identifier	prhs
>120	Callee	mxGetPr
>121	Identifier	mxGetPr
>122	Statement	 
>123	Statement	 
>124	Statement	 
>125	Statement	 
>126	Statement	 
>127	Statement	 
>128	Statement	 
>129	Statement	 
>130	Statement	 
>131	IfStatement	if ( mxIsSparse ( prhs [ 0 ] ) )
>132	ExpressionStatement	 
>133	CallExpression	mexErrMsgTxt ( \"argument 1 should be full\" )
>134	ArgumentList	\"argument 1 should be full\"
>135	Argument	\"argument 1 should be full\"
>136	PrimaryExpression	\"argument 1 should be full\"
>137	Callee	mexErrMsgTxt
>138	Identifier	mexErrMsgTxt
>139	Condition	 
>140	CallExpression	mxIsSparse ( prhs [ 0 ] )
>141	ArgumentList	prhs [ 0 ]
>142	Argument	prhs [ 0 ]
>143	ArrayIndexing	prhs [ 0 ]
>144	PrimaryExpression	0
>145	Identifier	prhs
>146	Callee	mxIsSparse
>147	Identifier	mxIsSparse
>148	IfStatement	if ( ! mexCheckType < T > ( prhs [ 0 ] ) )
>149	ExpressionStatement	 
>150	CallExpression	mexErrMsgTxt ( \"type of argument 1 is not consistent\" )
>151	ArgumentList	\"type of argument 1 is not consistent\"
>152	Argument	\"type of argument 1 is not consistent\"
>153	PrimaryExpression	\"type of argument 1 is not consistent\"
>154	Callee	mexErrMsgTxt
>155	Identifier	mexErrMsgTxt
>156	Condition	 
>157	RelationalExpression	! mexCheckType < T > ( prhs [ 0 ] )
>158	RelationalExpression	T > ( prhs [ 0 ] )
>159	ArrayIndexing	prhs [ 0 ]
>160	PrimaryExpression	0
>161	Identifier	prhs
>162	Identifier	T
>163	UnaryOp	! mexCheckType
>164	Identifier	mexCheckType
>165	UnaryOperator	!
>183	FunctionDef	mexFunction (int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ])
>184	ParameterList	int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ]
>185	Parameter	 
>186	Identifier	prhs
>187	ParameterType	const mxArray * [ ]
>188	Parameter	 
>189	Identifier	nrhs
>190	ParameterType	int
>191	Parameter	 
>192	Identifier	plhs
>193	ParameterType	mxArray * [ ]
>194	Parameter	 
>195	Identifier	nlhs
>196	ParameterType	int
>197	ReturnType	void
>198	CompoundStatement	 
>199	IfStatement	if ( mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS )
>200	ElseStatement	else
>201	CompoundStatement	 
>202	ExpressionStatement	 
>203	RelationalExpression	callFunction < float > ( plhs , prhs )
>204	RelationalExpression	float > ( plhs , prhs )
>205	Expression	plhs , prhs
>206	Identifier	prhs
>207	Identifier	plhs
>208	Identifier	float
>209	Identifier	callFunction
>210	CompoundStatement	 
>211	ExpressionStatement	 
>212	RelationalExpression	callFunction < double > ( plhs , prhs )
>213	RelationalExpression	double > ( plhs , prhs )
>214	Expression	plhs , prhs
>215	Identifier	prhs
>216	Identifier	plhs
>217	Identifier	double
>218	Identifier	callFunction
>219	Condition	 
>220	EqualityExpression	mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS
>221	Identifier	mxDOUBLE_CLASS
>222	CallExpression	mxGetClassID ( prhs [ 0 ] )
>223	ArgumentList	prhs [ 0 ]
>224	Argument	prhs [ 0 ]
>225	ArrayIndexing	prhs [ 0 ]
>226	PrimaryExpression	0
>227	Identifier	prhs
>228	Callee	mxGetClassID
>229	Identifier	mxGetClassID
>230	IfStatement	if ( nlhs != 1 )
>231	ExpressionStatement	 
>232	CallExpression	mexErrMsgTxt ( \"Bad number of output arguments\" )
>233	ArgumentList	\"Bad number of output arguments\"
>234	Argument	\"Bad number of output arguments\"
>235	PrimaryExpression	\"Bad number of output arguments\"
>236	Callee	mexErrMsgTxt
>237	Identifier	mexErrMsgTxt
>238	Condition	 
>239	EqualityExpression	nlhs != 1
>240	PrimaryExpression	1
>241	Identifier	nlhs
>242	IfStatement	if ( nrhs != 1 )
>243	ExpressionStatement	 
>244	CallExpression	mexErrMsgTxt ( \"Bad number of inputs arguments\" )
>245	ArgumentList	\"Bad number of inputs arguments\"
>246	Argument	\"Bad number of inputs arguments\"
>247	PrimaryExpression	\"Bad number of inputs arguments\"
>248	Callee	mexErrMsgTxt
>249	Identifier	mexErrMsgTxt
>250	Condition	 
>251	EqualityExpression	nrhs != 1
>252	PrimaryExpression	1
>253	Identifier	nrhs
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=148,131,130,129,128,127,126,125,124,123,122,113,99,98,97,96,95,94,93,92,88,87,86,85,84,83,82,81,77,65,64,63,62,61,60,59,58,57,56,47,38,29,20,13
<13=14
<14=16,15
<16=17
<17=19,18
<20=21
<21=25,22
<22=23
<23=24
<25=26
<26=28,27
<29=30
<30=37,36,31
<31=35,32
<32=34,33
<38=39
<39=46,45,40
<40=44,41
<41=43,42
<47=48
<48=54,49
<49=50
<50=51
<51=53,52
<54=55
<65=66
<66=74,67
<67=73,68
<68=72,69
<69=71,70
<74=76,75
<77=78
<78=80,79
<88=89
<89=91,90
<99=100
<100=112,111,101
<101=110,102
<102=108,103
<103=104
<104=105
<105=107,106
<108=109
<113=114
<114=120,115
<115=116
<116=117
<117=119,118
<120=121
<131=139,132
<132=133
<133=137,134
<134=135
<135=136
<137=138
<139=140
<140=146,141
<141=142
<142=143
<143=145,144
<146=147
<148=156,149
<149=150
<150=154,151
<151=152
<152=153
<154=155
<156=157
<157=163,158
<158=162,159
<159=161,160
<163=165,164
<183=198,197,184
<184=194,191,188,185
<185=187,186
<188=190,189
<191=193,192
<194=196,195
<198=242,230,199
<199=219,210,200
<200=201
<201=202
<202=203
<203=209,204
<204=208,205
<205=207,206
<210=211
<211=212
<212=218,213
<213=217,214
<214=216,215
<219=220
<220=222,221
<222=228,223
<223=224
<224=225
<225=227,226
<228=229
<230=238,231
<231=232
<232=236,233
<233=234
<234=235
<236=237
<238=239
<239=241,240
<242=250,243
<243=244
<244=248,245
<245=246
<246=247
<248=249
<250=251
<251=253,252
