>3	FunctionDef	Dimensions 
>4	ParameterList	 
>5	CompoundStatement	 
>9	FunctionDef	Dimensions 
>10	ParameterList	size_t x
>11	Parameter	 
>12	Identifier	x
>13	ParameterType	size_t
>14	CompoundStatement	 
>15	ExpressionStatement	 
>16	CallExpression	push_back ( x )
>17	ArgumentList	x
>18	Argument	x
>19	Identifier	x
>20	Callee	push_back
>21	Identifier	push_back
>26	FunctionDef	Dimensions 
>27	ParameterList	size_t x , size_t y
>28	Parameter	 
>29	Identifier	y
>30	ParameterType	size_t
>31	Parameter	 
>32	Identifier	x
>33	ParameterType	size_t
>34	CompoundStatement	 
>35	ExpressionStatement	 
>36	CallExpression	push_back ( y )
>37	ArgumentList	y
>38	Argument	y
>39	Identifier	y
>40	Callee	push_back
>41	Identifier	push_back
>42	ExpressionStatement	 
>43	CallExpression	push_back ( x )
>44	ArgumentList	x
>45	Argument	x
>46	Identifier	x
>47	Callee	push_back
>48	Identifier	push_back
>54	FunctionDef	Dimensions 
>55	ParameterList	size_t x , size_t y , size_t z
>56	Parameter	 
>57	Identifier	z
>58	ParameterType	size_t
>59	Parameter	 
>60	Identifier	y
>61	ParameterType	size_t
>62	Parameter	 
>63	Identifier	x
>64	ParameterType	size_t
>65	CompoundStatement	 
>66	ExpressionStatement	 
>67	CallExpression	push_back ( z )
>68	ArgumentList	z
>69	Argument	z
>70	Identifier	z
>71	Callee	push_back
>72	Identifier	push_back
>73	ExpressionStatement	 
>74	CallExpression	push_back ( y )
>75	ArgumentList	y
>76	Argument	y
>77	Identifier	y
>78	Callee	push_back
>79	Identifier	push_back
>80	ExpressionStatement	 
>81	CallExpression	push_back ( x )
>82	ArgumentList	x
>83	Argument	x
>84	Identifier	x
>85	Callee	push_back
>86	Identifier	push_back
>93	FunctionDef	Dimensions 
>94	ParameterList	 
>95	ReturnType	size_t
>96	CompoundStatement	 
>97	ReturnStatement	 
>98	Identifier	count
>99	IfStatement	if ( count == 0 )
>100	ExpressionStatement	 
>101	ShiftExpression	NTA_THROW << \"Attempt to get count from invalid dimensions \" << toString ( )
>102	ShiftExpression	\"Attempt to get count from invalid dimensions \" << toString ( )
>103	CallExpression	toString ( )
>104	ArgumentList	 
>105	Callee	toString
>106	Identifier	toString
>107	PrimaryExpression	\"Attempt to get count from invalid dimensions \"
>108	Identifier	NTA_THROW
>109	Condition	 
>110	EqualityExpression	count == 0
>111	PrimaryExpression	0
>112	Identifier	count
>113	ForStatement	for ( size_t i = 0 ; i < size ( ) ; i ++ )
>114	ExpressionStatement	 
>115	AssignmentExpr	count *= at ( i )
>116	CallExpression	at ( i )
>117	ArgumentList	i
>118	Argument	i
>119	Identifier	i
>120	Callee	at
>121	Identifier	at
>122	Identifier	count
>123	IncDecOp	 
>124	IncDec	++
>125	Identifier	i
>126	Condition	 
>127	RelationalExpression	i < size ( )
>128	CallExpression	size ( )
>129	ArgumentList	 
>130	Callee	size
>131	Identifier	size
>132	Identifier	i
>133	ForInit	 
>134	IdentifierDeclStatement	size_t i = 0 ;
>135	IdentifierDecl	i = 0
>136	AssignmentExpr	i = 0
>137	PrimaryExpression	0
>138	Identifier	i
>139	Identifier	i
>140	IdentifierDeclType	size_t
>141	IdentifierDeclStatement	 
>142	IdentifierDecl	count = 1
>143	AssignmentExpr	count = 1
>144	PrimaryExpression	1
>145	Identifier	count
>146	Identifier	count
>147	IdentifierDeclType	size_t
>148	IfStatement	if ( isUnspecified ( ) || isDontcare ( ) )
>149	ExpressionStatement	 
>150	ShiftExpression	NTA_THROW << \"Attempt to get count from dimensions \" << toString ( )
>151	ShiftExpression	\"Attempt to get count from dimensions \" << toString ( )
>152	CallExpression	toString ( )
>153	ArgumentList	 
>154	Callee	toString
>155	Identifier	toString
>156	PrimaryExpression	\"Attempt to get count from dimensions \"
>157	Identifier	NTA_THROW
>158	Condition	 
>159	OrExpression	isUnspecified ( ) || isDontcare ( )
>160	CallExpression	isDontcare ( )
>161	ArgumentList	 
>162	Callee	isDontcare
>163	Identifier	isDontcare
>164	CallExpression	isUnspecified ( )
>165	ArgumentList	 
>166	Callee	isUnspecified
>167	Identifier	isUnspecified
>177	FunctionDef	Dimensions 
>178	ParameterList	 
>179	ReturnType	size_t
>180	CompoundStatement	 
>181	ReturnStatement	 
>182	CallExpression	size ( )
>183	ArgumentList	 
>184	Callee	size
>185	Identifier	size
>190	FunctionDef	Dimensions 
>191	ParameterList	size_t index
>192	Parameter	 
>193	Identifier	index
>194	ParameterType	size_t
>195	ReturnType	size_t
>196	CompoundStatement	 
>197	ReturnStatement	 
>198	CallExpression	at ( index )
>199	ArgumentList	index
>200	Argument	index
>201	Identifier	index
>202	Callee	at
>203	Identifier	at
>204	IfStatement	if ( index >= size ( ) )
>205	CompoundStatement	 
>206	ExpressionStatement	 
>207	ShiftExpression	NTA_THROW << \"Bad request for dimension \" << index << \" on \" << toString ( )
>208	ShiftExpression	\"Bad request for dimension \" << index << \" on \" << toString ( )
>209	ShiftExpression	index << \" on \" << toString ( )
>210	ShiftExpression	\" on \" << toString ( )
>211	CallExpression	toString ( )
>212	ArgumentList	 
>213	Callee	toString
>214	Identifier	toString
>215	PrimaryExpression	\" on \"
>216	Identifier	index
>217	PrimaryExpression	\"Bad request for dimension \"
>218	Identifier	NTA_THROW
>219	Condition	 
>220	RelationalExpression	index >= size ( )
>221	CallExpression	size ( )
>222	ArgumentList	 
>223	Callee	size
>224	Identifier	size
>225	Identifier	index
>232	FunctionDef	Dimensions 
>233	ParameterList	 
>234	ReturnType	bool
>235	CompoundStatement	 
>236	ReturnStatement	 
>237	AndExpression	size ( ) == 1 && at ( 0 ) == 0
>238	EqualityExpression	at ( 0 ) == 0
>239	PrimaryExpression	0
>240	CallExpression	at ( 0 )
>241	ArgumentList	0
>242	Argument	0
>243	PrimaryExpression	0
>244	Callee	at
>245	Identifier	at
>246	EqualityExpression	size ( ) == 1
>247	PrimaryExpression	1
>248	CallExpression	size ( )
>249	ArgumentList	 
>250	Callee	size
>251	Identifier	size
>257	FunctionDef	Dimensions 
>258	ParameterList	 
>259	ReturnType	bool
>260	CompoundStatement	 
>261	ReturnStatement	 
>262	EqualityExpression	size ( ) == 0
>263	PrimaryExpression	0
>264	CallExpression	size ( )
>265	ArgumentList	 
>266	Callee	size
>267	Identifier	size
>272	FunctionDef	Dimensions 
>273	ParameterList	 
>274	ReturnType	bool
>275	CompoundStatement	 
>276	ReturnStatement	 
>277	Identifier	true
>278	ForStatement	for ( size_t i = 0 ; i < size ( ) ; i ++ )
>279	CompoundStatement	 
>280	IfStatement	if ( at ( i ) != 1 )
>281	ReturnStatement	 
>282	Identifier	false
>283	Condition	 
>284	EqualityExpression	at ( i ) != 1
>285	PrimaryExpression	1
>286	CallExpression	at ( i )
>287	ArgumentList	i
>288	Argument	i
>289	Identifier	i
>290	Callee	at
>291	Identifier	at
>292	IncDecOp	 
>293	IncDec	++
>294	Identifier	i
>295	Condition	 
>296	RelationalExpression	i < size ( )
>297	CallExpression	size ( )
>298	ArgumentList	 
>299	Callee	size
>300	Identifier	size
>301	Identifier	i
>302	ForInit	 
>303	IdentifierDeclStatement	size_t i = 0 ;
>304	IdentifierDecl	i = 0
>305	AssignmentExpr	i = 0
>306	PrimaryExpression	0
>307	Identifier	i
>308	Identifier	i
>309	IdentifierDeclType	size_t
>310	IfStatement	if ( size ( ) == 0 )
>311	ReturnStatement	 
>312	Identifier	false
>313	Condition	 
>314	EqualityExpression	size ( ) == 0
>315	PrimaryExpression	0
>316	CallExpression	size ( )
>317	ArgumentList	 
>318	Callee	size
>319	Identifier	size
>328	FunctionDef	Dimensions 
>329	ParameterList	 
>330	ReturnType	bool
>331	CompoundStatement	 
>332	ReturnStatement	 
>333	Identifier	true
>334	ForStatement	for ( size_t i = 0 ; i < size ( ) ; i ++ )
>335	IfStatement	if ( at ( i ) == 0 )
>336	ReturnStatement	 
>337	Identifier	false
>338	Condition	 
>339	EqualityExpression	at ( i ) == 0
>340	PrimaryExpression	0
>341	CallExpression	at ( i )
>342	ArgumentList	i
>343	Argument	i
>344	Identifier	i
>345	Callee	at
>346	Identifier	at
>347	IncDecOp	 
>348	IncDec	++
>349	Identifier	i
>350	Condition	 
>351	RelationalExpression	i < size ( )
>352	CallExpression	size ( )
>353	ArgumentList	 
>354	Callee	size
>355	Identifier	size
>356	Identifier	i
>357	ForInit	 
>358	IdentifierDeclStatement	size_t i = 0 ;
>359	IdentifierDecl	i = 0
>360	AssignmentExpr	i = 0
>361	PrimaryExpression	0
>362	Identifier	i
>363	Identifier	i
>364	IdentifierDeclType	size_t
>365	IfStatement	if ( isDontcare ( ) || isUnspecified ( ) )
>366	ReturnStatement	 
>367	Identifier	true
>368	Condition	 
>369	OrExpression	isDontcare ( ) || isUnspecified ( )
>370	CallExpression	isUnspecified ( )
>371	ArgumentList	 
>372	Callee	isUnspecified
>373	Identifier	isUnspecified
>374	CallExpression	isDontcare ( )
>375	ArgumentList	 
>376	Callee	isDontcare
>377	Identifier	isDontcare
>388	FunctionDef	Dimensions 
>389	ParameterList	 
>390	ReturnType	bool
>391	CompoundStatement	 
>392	ReturnStatement	 
>393	AndExpression	isValid ( ) && ! isUnspecified ( ) && ! isDontcare ( )
>394	AndExpression	! isUnspecified ( ) && ! isDontcare ( )
>395	UnaryOp	! isDontcare ( )
>396	CallExpression	isDontcare ( )
>397	ArgumentList	 
>398	Callee	isDontcare
>399	Identifier	isDontcare
>400	UnaryOperator	!
>401	UnaryOp	! isUnspecified ( )
>402	CallExpression	isUnspecified ( )
>403	ArgumentList	 
>404	Callee	isUnspecified
>405	Identifier	isUnspecified
>406	UnaryOperator	!
>407	CallExpression	isValid ( )
>408	ArgumentList	 
>409	Callee	isValid
>410	Identifier	isValid
>417	FunctionDef	vecToString (std 
>418	ParameterList	std 
>419	Parameter	 
>420	Identifier	vec
>421	ParameterType	std 
>422	ReturnType	static std 
>423	CompoundStatement	 
>424	ReturnStatement	 
>425	CallExpression	ss . str ( )
>426	ArgumentList	 
>427	Callee	ss . str
>428	MemberAccess	ss . str
>429	Identifier	str
>430	Identifier	ss
>431	ForStatement	for ( size_t i = 0 ; i < vec . size ( ) ; i ++ )
>432	CompoundStatement	 
>433	IfStatement	if ( i != vec . size ( ) - 1 )
>434	ExpressionStatement	 
>435	ShiftExpression	ss << \" \"
>436	PrimaryExpression	\" \"
>437	Identifier	ss
>438	Condition	 
>439	EqualityExpression	i != vec . size ( ) - 1
>440	AdditiveExpression	vec . size ( ) - 1
>441	PrimaryExpression	1
>442	CallExpression	vec . size ( )
>443	ArgumentList	 
>444	Callee	vec . size
>445	MemberAccess	vec . size
>446	Identifier	size
>447	Identifier	vec
>448	Identifier	i
>449	ExpressionStatement	 
>450	ShiftExpression	ss << vec [ i ]
>451	ArrayIndexing	vec [ i ]
>452	Identifier	i
>453	Identifier	vec
>454	Identifier	ss
>455	IncDecOp	 
>456	IncDec	++
>457	Identifier	i
>458	Condition	 
>459	RelationalExpression	i < vec . size ( )
>460	CallExpression	vec . size ( )
>461	ArgumentList	 
>462	Callee	vec . size
>463	MemberAccess	vec . size
>464	Identifier	size
>465	Identifier	vec
>466	Identifier	i
>467	ForInit	 
>468	IdentifierDeclStatement	size_t i = 0 ;
>469	IdentifierDecl	i = 0
>470	AssignmentExpr	i = 0
>471	PrimaryExpression	0
>472	Identifier	i
>473	Identifier	i
>474	IdentifierDeclType	size_t
>475	IdentifierDeclStatement	 
>476	IdentifierDecl	ss
>477	Identifier	ss
>478	IdentifierDeclType	std 
>487	FunctionDef	Dimensions 
>488	ParameterList	bool humanReadable
>489	Parameter	 
>490	Identifier	humanReadable
>491	ParameterType	bool
>492	ReturnType	std 
>493	CompoundStatement	 
>494	ReturnStatement	 
>495	Identifier	s
>496	IfStatement	if ( humanReadable && ! isValid ( ) )
>497	ExpressionStatement	 
>498	AssignmentExpr	s += \" (invalid)\"
>499	PrimaryExpression	\" (invalid)\"
>500	Identifier	s
>501	Condition	 
>502	AndExpression	humanReadable && ! isValid ( )
>503	UnaryOp	! isValid ( )
>504	CallExpression	isValid ( )
>505	ArgumentList	 
>506	Callee	isValid
>507	Identifier	isValid
>508	UnaryOperator	!
>509	Identifier	humanReadable
>510	ExpressionStatement	 
>511	AssignmentExpr	s += \"]\"
>512	PrimaryExpression	\"]\"
>513	Identifier	s
>514	ExpressionStatement	 
>515	AssignmentExpr	s += vecToString ( * this )
>516	CallExpression	vecToString ( * this )
>517	ArgumentList	* this
>518	Argument	* this
>519	UnaryOp	* this
>520	Identifier	this
>521	UnaryOperator	*
>522	Callee	vecToString
>523	Identifier	vecToString
>524	Identifier	s
>525	IdentifierDeclStatement	 
>526	IdentifierDecl	s = \"[\"
>527	AssignmentExpr	s = \"[\"
>528	PrimaryExpression	\"[\"
>529	Identifier	s
>530	Identifier	s
>531	IdentifierDeclType	std 
>532	IfStatement	if ( humanReadable )
>533	CompoundStatement	 
>534	IfStatement	if ( isDontcare ( ) )
>535	ReturnStatement	 
>536	PrimaryExpression	\"[dontcare]\"
>537	Condition	 
>538	CallExpression	isDontcare ( )
>539	ArgumentList	 
>540	Callee	isDontcare
>541	Identifier	isDontcare
>542	IfStatement	if ( isUnspecified ( ) )
>543	ReturnStatement	 
>544	PrimaryExpression	\"[unspecified]\"
>545	Condition	 
>546	CallExpression	isUnspecified ( )
>547	ArgumentList	 
>548	Callee	isUnspecified
>549	Identifier	isUnspecified
>550	Condition	 
>551	Identifier	humanReadable
>563	FunctionDef	Dimensions 
>564	ParameterList	const Coordinate & coordinate
>565	Parameter	 
>566	Identifier	coordinate
>567	ParameterType	const Coordinate &
>568	ReturnType	size_t
>569	CompoundStatement	 
>570	ReturnStatement	 
>571	Identifier	index
>572	ForStatement	for ( Coordinate 
>573	CompoundStatement	 
>574	ExpressionStatement	 
>575	AssignmentExpr	factor *= thisdim
>576	Identifier	thisdim
>577	Identifier	factor
>578	ExpressionStatement	 
>579	AssignmentExpr	index += factor * coordinate [ dim ]
>580	MultiplicativeExpression	factor * coordinate [ dim ]
>581	ArrayIndexing	coordinate [ dim ]
>582	Identifier	dim
>583	Identifier	coordinate
>584	Identifier	factor
>585	Identifier	index
>586	IfStatement	if ( coordinate [ dim ] >= thisdim )
>587	CompoundStatement	 
>588	ExpressionStatement	 
>589	ShiftExpression	NTA_THROW << \"Invalid coordinate index \" << dim << \" of \" << coordinate [ dim ] << \" is too large for \
>590	ShiftExpression	\"Invalid coordinate index \" << dim << \" of \" << coordinate [ dim ] << \" is too large for region dimensions \" << \
>591	ShiftExpression	dim << \" of \" << coordinate [ dim ] << \" is too large for region dimensions \" << toString ( )
>592	ShiftExpression	\" of \" << coordinate [ dim ] << \" is too large for region dimensions \" << toString ( )
>593	ShiftExpression	coordinate [ dim ] << \" is too large for region dimensions \" << toString ( )
>594	ShiftExpression	\" is too large for region dimensions \" << toString ( )
>595	CallExpression	toString ( )
>596	ArgumentList	 
>597	Callee	toString
>598	Identifier	toString
>599	PrimaryExpression	\" is too large for region dimensions \"
>600	ArrayIndexing	coordinate [ dim ]
>601	Identifier	dim
>602	Identifier	coordinate
>603	PrimaryExpression	\" of \"
>604	Identifier	dim
>605	PrimaryExpression	\"Invalid coordinate index \"
>606	Identifier	NTA_THROW
>607	Condition	 
>608	RelationalExpression	coordinate [ dim ] >= thisdim
>609	Identifier	thisdim
>610	ArrayIndexing	coordinate [ dim ]
>611	Identifier	dim
>612	Identifier	coordinate
>613	IdentifierDeclStatement	 
>614	IdentifierDecl	thisdim = at ( dim )
>615	AssignmentExpr	thisdim = at ( dim )
>616	CallExpression	at ( dim )
>617	ArgumentList	dim
>618	Argument	dim
>619	Identifier	dim
>620	Callee	at
>621	Identifier	at
>622	Identifier	thisdim
>623	Identifier	thisdim
>624	IdentifierDeclType	size_t
>625	IncDecOp	 
>626	IncDec	++
>627	Identifier	dim
>628	Condition	 
>629	EqualityExpression	dim != coordinate . size ( )
>630	CallExpression	coordinate . size ( )
>631	ArgumentList	 
>632	Callee	coordinate . size
>633	MemberAccess	coordinate . size
>634	Identifier	size
>635	Identifier	coordinate
>636	Identifier	dim
>637	ForInit	 
>638	IdentifierDeclStatement	Coordinate 
>639	IdentifierDecl	dim = 0
>640	AssignmentExpr	dim = 0
>641	PrimaryExpression	0
>642	Identifier	dim
>643	Identifier	dim
>644	IdentifierDeclType	Coordinate 
>645	IdentifierDeclStatement	 
>646	IdentifierDecl	index = 0
>647	AssignmentExpr	index = 0
>648	PrimaryExpression	0
>649	Identifier	index
>650	Identifier	index
>651	IdentifierDeclType	size_t
>652	IdentifierDeclStatement	 
>653	IdentifierDecl	factor = 1
>654	AssignmentExpr	factor = 1
>655	PrimaryExpression	1
>656	Identifier	factor
>657	Identifier	factor
>658	IdentifierDeclType	size_t
>659	IfStatement	if ( coordinate . size ( ) != size ( ) )
>660	CompoundStatement	 
>661	ExpressionStatement	 
>662	ShiftExpression	NTA_THROW << \"Invalid coordinate [\" << vecToString ( coordinate ) << \"] for Dimensions \" << toString ( )
>663	ShiftExpression	\"Invalid coordinate [\" << vecToString ( coordinate ) << \"] for Dimensions \" << toString ( )
>664	ShiftExpression	vecToString ( coordinate ) << \"] for Dimensions \" << toString ( )
>665	ShiftExpression	\"] for Dimensions \" << toString ( )
>666	CallExpression	toString ( )
>667	ArgumentList	 
>668	Callee	toString
>669	Identifier	toString
>670	PrimaryExpression	\"] for Dimensions \"
>671	CallExpression	vecToString ( coordinate )
>672	ArgumentList	coordinate
>673	Argument	coordinate
>674	Identifier	coordinate
>675	Callee	vecToString
>676	Identifier	vecToString
>677	PrimaryExpression	\"Invalid coordinate [\"
>678	Identifier	NTA_THROW
>679	Condition	 
>680	EqualityExpression	coordinate . size ( ) != size ( )
>681	CallExpression	size ( )
>682	ArgumentList	 
>683	Callee	size
>684	Identifier	size
>685	CallExpression	coordinate . size ( )
>686	ArgumentList	 
>687	Callee	coordinate . size
>688	MemberAccess	coordinate . size
>689	Identifier	size
>690	Identifier	coordinate
>704	FunctionDef	Dimensions 
>705	ParameterList	const size_t index
>706	Parameter	 
>707	Identifier	index
>708	ParameterType	const size_t
>709	ReturnType	Coordinate
>710	CompoundStatement	 
>711	ReturnStatement	 
>712	Identifier	coordinate
>713	ForStatement	for ( size_type i = size ( ) - 1 ; i != ( size_type ) - 1 ; i -- )
>714	CompoundStatement	 
>715	ExpressionStatement	 
>716	AssignmentExpr	x %= product
>717	Identifier	product
>718	Identifier	x
>719	ExpressionStatement	 
>720	CallExpression	coordinate . insert ( coordinate . begin ( ) , x / product )
>721	ArgumentList	coordinate . begin ( )
>722	Argument	x / product
>723	MultiplicativeExpression	x / product
>724	Identifier	product
>725	Identifier	x
>726	Argument	coordinate . begin ( )
>727	CallExpression	coordinate . begin ( )
>728	ArgumentList	 
>729	Callee	coordinate . begin
>730	MemberAccess	coordinate . begin
>731	Identifier	begin
>732	Identifier	coordinate
>733	Callee	coordinate . insert
>734	MemberAccess	coordinate . insert
>735	Identifier	insert
>736	Identifier	coordinate
>737	ExpressionStatement	 
>738	AssignmentExpr	product /= at ( i )
>739	CallExpression	at ( i )
>740	ArgumentList	i
>741	Argument	i
>742	Identifier	i
>743	Callee	at
>744	Identifier	at
>745	Identifier	product
>746	IncDecOp	 
>747	IncDec	--
>748	Identifier	i
>749	Condition	 
>750	EqualityExpression	i != ( size_type ) - 1
>751	CastExpression	( size_type ) - 1
>752	UnaryOp	- 1
>753	PrimaryExpression	1
>754	UnaryOperator	-
>755	CastTarget	size_type
>756	Identifier	i
>757	ForInit	 
>758	IdentifierDeclStatement	size_type i = size ( ) - 1 ;
>759	IdentifierDecl	i = size ( ) - 1
>760	AssignmentExpr	i = size ( ) - 1
>761	AdditiveExpression	size ( ) - 1
>762	PrimaryExpression	1
>763	CallExpression	size ( )
>764	ArgumentList	 
>765	Callee	size
>766	Identifier	size
>767	Identifier	i
>768	Identifier	i
>769	IdentifierDeclType	size_type
>770	ForStatement	for ( size_type i = 0 ; i < size ( ) ; i ++ )
>771	CompoundStatement	 
>772	ExpressionStatement	 
>773	AssignmentExpr	product *= at ( i )
>774	CallExpression	at ( i )
>775	ArgumentList	i
>776	Argument	i
>777	Identifier	i
>778	Callee	at
>779	Identifier	at
>780	Identifier	product
>781	IncDecOp	 
>782	IncDec	++
>783	Identifier	i
>784	Condition	 
>785	RelationalExpression	i < size ( )
>786	CallExpression	size ( )
>787	ArgumentList	 
>788	Callee	size
>789	Identifier	size
>790	Identifier	i
>791	ForInit	 
>792	IdentifierDeclStatement	size_type i = 0 ;
>793	IdentifierDecl	i = 0
>794	AssignmentExpr	i = 0
>795	PrimaryExpression	0
>796	Identifier	i
>797	Identifier	i
>798	IdentifierDeclType	size_type
>799	IdentifierDeclStatement	 
>800	IdentifierDecl	product = 1
>801	AssignmentExpr	product = 1
>802	PrimaryExpression	1
>803	Identifier	product
>804	Identifier	product
>805	IdentifierDeclType	size_t
>806	IdentifierDeclStatement	 
>807	IdentifierDecl	x = index
>808	AssignmentExpr	x = index
>809	Identifier	index
>810	Identifier	index
>811	Identifier	x
>812	IdentifierDeclType	size_t
>813	IdentifierDeclStatement	 
>814	IdentifierDecl	coordinate
>815	Identifier	coordinate
>816	IdentifierDeclType	Coordinate
>828	FunctionDef	Dimensions 
>829	ParameterList	size_t newDimensionality
>830	Parameter	 
>831	Identifier	newDimensionality
>832	ParameterType	size_t
>833	ReturnType	void
>834	CompoundStatement	 
>835	ForStatement	for ( size_t i = size ( ) ; i < newDimensionality ; i ++ )
>836	ExpressionStatement	 
>837	CallExpression	push_back ( 1 )
>838	ArgumentList	1
>839	Argument	1
>840	PrimaryExpression	1
>841	Callee	push_back
>842	Identifier	push_back
>843	IncDecOp	 
>844	IncDec	++
>845	Identifier	i
>846	Condition	 
>847	RelationalExpression	i < newDimensionality
>848	Identifier	newDimensionality
>849	Identifier	i
>850	ForInit	 
>851	IdentifierDeclStatement	size_t i = size ( ) ;
>852	IdentifierDecl	i = size ( )
>853	AssignmentExpr	i = size ( )
>854	CallExpression	size ( )
>855	ArgumentList	 
>856	Callee	size
>857	Identifier	size
>858	Identifier	i
>859	Identifier	i
>860	IdentifierDeclType	size_t
>861	IfStatement	if ( size ( ) > newDimensionality )
>862	ExpressionStatement	 
>863	CallExpression	resize ( newDimensionality )
>864	ArgumentList	newDimensionality
>865	Argument	newDimensionality
>866	Identifier	newDimensionality
>867	Callee	resize
>868	Identifier	resize
>869	Condition	 
>870	RelationalExpression	size ( ) > newDimensionality
>871	Identifier	newDimensionality
>872	CallExpression	size ( )
>873	ArgumentList	 
>874	Callee	size
>875	Identifier	size
>876	IfStatement	if ( size ( ) == newDimensionality )
>877	ReturnStatement	 
>878	Condition	 
>879	EqualityExpression	size ( ) == newDimensionality
>880	Identifier	newDimensionality
>881	CallExpression	size ( )
>882	ArgumentList	 
>883	Callee	size
>884	Identifier	size
>885	IfStatement	if ( ! isOnes ( ) )
>886	CompoundStatement	 
>887	ExpressionStatement	 
>888	ShiftExpression	NTA_THROW << \"Dimensions
>889	ShiftExpression	\"Dimensions
>890	CallExpression	toString ( )
>891	ArgumentList	 
>892	Callee	toString
>893	Identifier	toString
>894	PrimaryExpression	\"Dimensions
>895	Identifier	NTA_THROW
>896	Condition	 
>897	UnaryOp	! isOnes ( )
>898	CallExpression	isOnes ( )
>899	ArgumentList	 
>900	Callee	isOnes
>901	Identifier	isOnes
>902	UnaryOperator	!
>910	FunctionDef	operator == (const Dimensions & dims2)
>911	ParameterList	const Dimensions & dims2
>912	Parameter	 
>913	Identifier	dims2
>914	ParameterType	const Dimensions &
>915	CompoundStatement	 
>916	ReturnStatement	 
>917	Identifier	false
>918	IfStatement	if ( isOnes ( ) && dims2 . isOnes ( ) )
>919	ReturnStatement	 
>920	Identifier	true
>921	Condition	 
>922	AndExpression	isOnes ( ) && dims2 . isOnes ( )
>923	CallExpression	dims2 . isOnes ( )
>924	ArgumentList	 
>925	Callee	dims2 . isOnes
>926	MemberAccess	dims2 . isOnes
>927	Identifier	isOnes
>928	Identifier	dims2
>929	CallExpression	isOnes ( )
>930	ArgumentList	 
>931	Callee	isOnes
>932	Identifier	isOnes
>933	IfStatement	if ( ( std 
>934	ReturnStatement	 
>935	Identifier	true
>936	Condition	 
>937	EqualityExpression	( std 
>938	CastExpression	( std 
>939	Identifier	dims2
>940	CastTarget	std 
>941	CastExpression	( std 
>942	UnaryOp	* this
>943	Identifier	this
>944	UnaryOperator	*
>945	CastTarget	std 
>956	FunctionDef	operator != (const Dimensions & dims2)
>957	ParameterList	const Dimensions & dims2
>958	Parameter	 
>959	Identifier	dims2
>960	ParameterType	const Dimensions &
>961	CompoundStatement	 
>962	ExpressionStatement	 
>963	Identifier	dims2
>964	Statement	 
>965	Statement	 
>966	Statement	 
>967	Statement	 
>972	FunctionDef	operator << (std 
>973	ParameterList	std 
>974	Parameter	 
>975	Identifier	d
>976	ParameterType	const Dimensions &
>977	Parameter	 
>978	Identifier	f
>979	ParameterType	std 
>980	ReturnType	std 
>981	CompoundStatement	 
>982	ReturnStatement	 
>983	Identifier	f
>984	ExpressionStatement	 
>985	ShiftExpression	f << d . toString ( false )
>986	CallExpression	d . toString ( false )
>987	ArgumentList	false
>988	Argument	false
>989	Identifier	false
>990	Callee	d . toString
>991	MemberAccess	d . toString
>992	Identifier	toString
>993	Identifier	d
>994	Identifier	f
<3=5,4
<9=14,10
<10=11
<11=13,12
<14=15
<15=16
<16=20,17
<17=18
<18=19
<20=21
<26=34,27
<27=31,28
<28=30,29
<31=33,32
<34=42,35
<35=36
<36=40,37
<37=38
<38=39
<40=41
<42=43
<43=47,44
<44=45
<45=46
<47=48
<54=65,55
<55=62,59,56
<56=58,57
<59=61,60
<62=64,63
<65=80,73,66
<66=67
<67=71,68
<68=69
<69=70
<71=72
<73=74
<74=78,75
<75=76
<76=77
<78=79
<80=81
<81=85,82
<82=83
<83=84
<85=86
<93=96,95,94
<96=148,141,113,99,97
<97=98
<99=109,100
<100=101
<101=108,102
<102=107,103
<103=105,104
<105=106
<109=110
<110=112,111
<113=133,126,123,114
<114=115
<115=122,116
<116=120,117
<117=118
<118=119
<120=121
<123=125,124
<126=127
<127=132,128
<128=130,129
<130=131
<133=134
<134=135
<135=140,139,136
<136=138,137
<141=142
<142=147,146,143
<143=145,144
<148=158,149
<149=150
<150=157,151
<151=156,152
<152=154,153
<154=155
<158=159
<159=164,160
<160=162,161
<162=163
<164=166,165
<166=167
<177=180,179,178
<180=181
<181=182
<182=184,183
<184=185
<190=196,195,191
<191=192
<192=194,193
<196=204,197
<197=198
<198=202,199
<199=200
<200=201
<202=203
<204=219,205
<205=206
<206=207
<207=218,208
<208=217,209
<209=216,210
<210=215,211
<211=213,212
<213=214
<219=220
<220=225,221
<221=223,222
<223=224
<232=235,234,233
<235=236
<236=237
<237=246,238
<238=240,239
<240=244,241
<241=242
<242=243
<244=245
<246=248,247
<248=250,249
<250=251
<257=260,259,258
<260=261
<261=262
<262=264,263
<264=266,265
<266=267
<272=275,274,273
<275=310,278,276
<276=277
<278=302,295,292,279
<279=280
<280=283,281
<281=282
<283=284
<284=286,285
<286=290,287
<287=288
<288=289
<290=291
<292=294,293
<295=296
<296=301,297
<297=299,298
<299=300
<302=303
<303=304
<304=309,308,305
<305=307,306
<310=313,311
<311=312
<313=314
<314=316,315
<316=318,317
<318=319
<328=331,330,329
<331=365,334,332
<332=333
<334=357,350,347,335
<335=338,336
<336=337
<338=339
<339=341,340
<341=345,342
<342=343
<343=344
<345=346
<347=349,348
<350=351
<351=356,352
<352=354,353
<354=355
<357=358
<358=359
<359=364,363,360
<360=362,361
<365=368,366
<366=367
<368=369
<369=374,370
<370=372,371
<372=373
<374=376,375
<376=377
<388=391,390,389
<391=392
<392=393
<393=407,394
<394=401,395
<395=400,396
<396=398,397
<398=399
<401=406,402
<402=404,403
<404=405
<407=409,408
<409=410
<417=423,422,418
<418=419
<419=421,420
<423=475,431,424
<424=425
<425=427,426
<427=428
<428=430,429
<431=467,458,455,432
<432=449,433
<433=438,434
<434=435
<435=437,436
<438=439
<439=448,440
<440=442,441
<442=444,443
<444=445
<445=447,446
<449=450
<450=454,451
<451=453,452
<455=457,456
<458=459
<459=466,460
<460=462,461
<462=463
<463=465,464
<467=468
<468=469
<469=474,473,470
<470=472,471
<475=476
<476=478,477
<487=493,492,488
<488=489
<489=491,490
<493=532,525,514,510,496,494
<494=495
<496=501,497
<497=498
<498=500,499
<501=502
<502=509,503
<503=508,504
<504=506,505
<506=507
<510=511
<511=513,512
<514=515
<515=524,516
<516=522,517
<517=518
<518=519
<519=521,520
<522=523
<525=526
<526=531,530,527
<527=529,528
<532=550,533
<533=542,534
<534=537,535
<535=536
<537=538
<538=540,539
<540=541
<542=545,543
<543=544
<545=546
<546=548,547
<548=549
<550=551
<563=569,568,564
<564=565
<565=567,566
<569=659,652,645,572,570
<570=571
<572=637,628,625,573
<573=613,586,578,574
<574=575
<575=577,576
<578=579
<579=585,580
<580=584,581
<581=583,582
<586=607,587
<587=588
<588=589
<589=606,590
<590=605,591
<591=604,592
<592=603,593
<593=600,594
<594=599,595
<595=597,596
<597=598
<600=602,601
<607=608
<608=610,609
<610=612,611
<613=614
<614=624,623,615
<615=622,616
<616=620,617
<617=618
<618=619
<620=621
<625=627,626
<628=629
<629=636,630
<630=632,631
<632=633
<633=635,634
<637=638
<638=639
<639=644,643,640
<640=642,641
<645=646
<646=651,650,647
<647=649,648
<652=653
<653=658,657,654
<654=656,655
<659=679,660
<660=661
<661=662
<662=678,663
<663=677,664
<664=671,665
<665=670,666
<666=668,667
<668=669
<671=675,672
<672=673
<673=674
<675=676
<679=680
<680=685,681
<681=683,682
<683=684
<685=687,686
<687=688
<688=690,689
<704=710,709,705
<705=706
<706=708,707
<710=813,806,799,770,713,711
<711=712
<713=757,749,746,714
<714=737,719,715
<715=716
<716=718,717
<719=720
<720=733,721
<721=726,722
<722=723
<723=725,724
<726=727
<727=729,728
<729=730
<730=732,731
<733=734
<734=736,735
<737=738
<738=745,739
<739=743,740
<740=741
<741=742
<743=744
<746=748,747
<749=750
<750=756,751
<751=755,752
<752=754,753
<757=758
<758=759
<759=769,768,760
<760=767,761
<761=763,762
<763=765,764
<765=766
<770=791,784,781,771
<771=772
<772=773
<773=780,774
<774=778,775
<775=776
<776=777
<778=779
<781=783,782
<784=785
<785=790,786
<786=788,787
<788=789
<791=792
<792=793
<793=798,797,794
<794=796,795
<799=800
<800=805,804,801
<801=803,802
<806=807
<807=812,811,808
<808=810,809
<813=814
<814=816,815
<828=834,833,829
<829=830
<830=832,831
<834=885,876,861,835
<835=850,846,843,836
<836=837
<837=841,838
<838=839
<839=840
<841=842
<843=845,844
<846=847
<847=849,848
<850=851
<851=852
<852=860,859,853
<853=858,854
<854=856,855
<856=857
<861=869,862
<862=863
<863=867,864
<864=865
<865=866
<867=868
<869=870
<870=872,871
<872=874,873
<874=875
<876=878,877
<878=879
<879=881,880
<881=883,882
<883=884
<885=896,886
<886=887
<887=888
<888=895,889
<889=894,890
<890=892,891
<892=893
<896=897
<897=902,898
<898=900,899
<900=901
<910=915,911
<911=912
<912=914,913
<915=933,918,916
<916=917
<918=921,919
<919=920
<921=922
<922=929,923
<923=925,924
<925=926
<926=928,927
<929=931,930
<931=932
<933=936,934
<934=935
<936=937
<937=941,938
<938=940,939
<941=945,942
<942=944,943
<956=961,957
<957=958
<958=960,959
<961=967,966,965,964,962
<962=963
<972=981,980,973
<973=977,974
<974=976,975
<977=979,978
<981=984,982
<982=983
<984=985
<985=994,986
<986=990,987
<987=988
<988=989
<990=991
<991=993,992
