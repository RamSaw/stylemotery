>3	FunctionDef	GetNumberOfKeysNormal (FILE * fp)
>4	ParameterList	FILE * fp
>5	Parameter	 
>6	Identifier	fp
>7	ParameterType	FILE *
>8	ReturnType	int
>9	CompoundStatement	 
>10	ReturnStatement	 
>11	Identifier	num
>12	IfStatement	if ( fscanf ( fp , \"%d %d\" , & num , & len ) != 2 )
>13	CompoundStatement	 
>14	ReturnStatement	 
>15	PrimaryExpression	0
>16	ExpressionStatement	 
>17	CallExpression	printf ( \"Invalid keypoint file.\n\" )
>18	ArgumentList	\"Invalid keypoint file.\n\"
>19	Argument	\"Invalid keypoint file.\n\"
>20	PrimaryExpression	\"Invalid keypoint file.\n\"
>21	Callee	printf
>22	Identifier	printf
>23	Condition	 
>24	EqualityExpression	fscanf ( fp , \"%d %d\" , & num , & len ) != 2
>25	PrimaryExpression	2
>26	CallExpression	fscanf ( fp , \"%d %d\" , & num , & len )
>27	ArgumentList	fp
>28	Argument	& len
>29	UnaryOp	& len
>30	Identifier	len
>31	UnaryOperator	&
>32	Argument	& num
>33	UnaryOp	& num
>34	Identifier	num
>35	UnaryOperator	&
>36	Argument	\"%d %d\"
>37	PrimaryExpression	\"%d %d\"
>38	Argument	fp
>39	Identifier	fp
>40	Callee	fscanf
>41	Identifier	fscanf
>42	IdentifierDeclStatement	 
>43	IdentifierDecl	len
>44	Identifier	len
>45	IdentifierDeclType	int
>46	IdentifierDecl	num
>47	Identifier	num
>48	IdentifierDeclType	int
>58	FunctionDef	GetNumberOfKeysGzip (gzFile fp)
>59	ParameterList	gzFile fp
>60	Parameter	 
>61	Identifier	fp
>62	ParameterType	gzFile
>63	ReturnType	int
>64	CompoundStatement	 
>65	ReturnStatement	 
>66	Identifier	num
>67	IfStatement	if ( sscanf ( header , \"%d %d\" , & num , & len ) != 2 )
>68	CompoundStatement	 
>69	ReturnStatement	 
>70	PrimaryExpression	0
>71	ExpressionStatement	 
>72	CallExpression	printf ( \"Invalid keypoint file.\n\" )
>73	ArgumentList	\"Invalid keypoint file.\n\"
>74	Argument	\"Invalid keypoint file.\n\"
>75	PrimaryExpression	\"Invalid keypoint file.\n\"
>76	Callee	printf
>77	Identifier	printf
>78	Condition	 
>79	EqualityExpression	sscanf ( header , \"%d %d\" , & num , & len ) != 2
>80	PrimaryExpression	2
>81	CallExpression	sscanf ( header , \"%d %d\" , & num , & len )
>82	ArgumentList	header
>83	Argument	& len
>84	UnaryOp	& len
>85	Identifier	len
>86	UnaryOperator	&
>87	Argument	& num
>88	UnaryOp	& num
>89	Identifier	num
>90	UnaryOperator	&
>91	Argument	\"%d %d\"
>92	PrimaryExpression	\"%d %d\"
>93	Argument	header
>94	Identifier	header
>95	Callee	sscanf
>96	Identifier	sscanf
>97	ExpressionStatement	 
>98	CallExpression	gzgets ( fp , header , 256 )
>99	ArgumentList	fp
>100	Argument	256
>101	PrimaryExpression	256
>102	Argument	header
>103	Identifier	header
>104	Argument	fp
>105	Identifier	fp
>106	Callee	gzgets
>107	Identifier	gzgets
>108	IdentifierDeclStatement	 
>109	IdentifierDecl	header [ 256 ]
>110	PrimaryExpression	256
>111	Identifier	header
>112	IdentifierDeclType	char [ 256 ]
>113	IdentifierDeclStatement	 
>114	IdentifierDecl	len
>115	Identifier	len
>116	IdentifierDeclType	int
>117	IdentifierDecl	num
>118	Identifier	num
>119	IdentifierDeclType	int
>130	FunctionDef	GetNumberOfKeys (const char * filename)
>131	ParameterList	const char * filename
>132	Parameter	 
>133	Identifier	filename
>134	ParameterType	const char *
>135	ReturnType	int
>136	CompoundStatement	 
>137	ReturnStatement	 
>138	Identifier	n
>139	ExpressionStatement	 
>140	CallExpression	fclose ( file )
>141	ArgumentList	file
>142	Argument	file
>143	Identifier	file
>144	Callee	fclose
>145	Identifier	fclose
>146	IdentifierDeclStatement	 
>147	IdentifierDecl	n = GetNumberOfKeysNormal ( file )
>148	AssignmentExpr	n = GetNumberOfKeysNormal ( file )
>149	CallExpression	GetNumberOfKeysNormal ( file )
>150	ArgumentList	file
>151	Argument	file
>152	Identifier	file
>153	Callee	GetNumberOfKeysNormal
>154	Identifier	GetNumberOfKeysNormal
>155	Identifier	n
>156	Identifier	n
>157	IdentifierDeclType	int
>158	IfStatement	if ( ! file )
>159	CompoundStatement	 
>160	IfStatement	if ( gzf == NULL )
>161	ElseStatement	else
>162	CompoundStatement	 
>163	ReturnStatement	 
>164	Identifier	n
>165	ExpressionStatement	 
>166	CallExpression	gzclose ( gzf )
>167	ArgumentList	gzf
>168	Argument	gzf
>169	Identifier	gzf
>170	Callee	gzclose
>171	Identifier	gzclose
>172	IdentifierDeclStatement	 
>173	IdentifierDecl	n = GetNumberOfKeysGzip ( gzf )
>174	AssignmentExpr	n = GetNumberOfKeysGzip ( gzf )
>175	CallExpression	GetNumberOfKeysGzip ( gzf )
>176	ArgumentList	gzf
>177	Argument	gzf
>178	Identifier	gzf
>179	Callee	GetNumberOfKeysGzip
>180	Identifier	GetNumberOfKeysGzip
>181	Identifier	n
>182	Identifier	n
>183	IdentifierDeclType	int
>184	CompoundStatement	 
>185	ReturnStatement	 
>186	PrimaryExpression	0
>187	ExpressionStatement	 
>188	CallExpression	printf ( \"Could not open file
>189	ArgumentList	\"Could not open file
>190	Argument	filename
>191	Identifier	filename
>192	Argument	\"Could not open file
>193	PrimaryExpression	\"Could not open file
>194	Callee	printf
>195	Identifier	printf
>196	Condition	 
>197	EqualityExpression	gzf == NULL
>198	Identifier	NULL
>199	Identifier	gzf
>200	IdentifierDeclStatement	 
>201	IdentifierDecl	gzf = gzopen ( buf , \"rb\" )
>202	AssignmentExpr	gzf = gzopen ( buf , \"rb\" )
>203	CallExpression	gzopen ( buf , \"rb\" )
>204	ArgumentList	buf
>205	Argument	\"rb\"
>206	PrimaryExpression	\"rb\"
>207	Argument	buf
>208	Identifier	buf
>209	Callee	gzopen
>210	Identifier	gzopen
>211	Identifier	gzf
>212	Identifier	gzf
>213	IdentifierDeclType	gzFile
>214	ExpressionStatement	 
>215	CallExpression	sprintf ( buf , \"%s.gz\" , filename )
>216	ArgumentList	buf
>217	Argument	filename
>218	Identifier	filename
>219	Argument	\"%s.gz\"
>220	PrimaryExpression	\"%s.gz\"
>221	Argument	buf
>222	Identifier	buf
>223	Callee	sprintf
>224	Identifier	sprintf
>225	IdentifierDeclStatement	 
>226	IdentifierDecl	buf [ 1024 ]
>227	PrimaryExpression	1024
>228	Identifier	buf
>229	IdentifierDeclType	char [ 1024 ]
>230	Condition	 
>231	UnaryOp	! file
>232	Identifier	file
>233	UnaryOperator	!
>234	ExpressionStatement	 
>235	AssignmentExpr	file = fopen ( filename , \"r\" )
>236	CallExpression	fopen ( filename , \"r\" )
>237	ArgumentList	filename
>238	Argument	\"r\"
>239	PrimaryExpression	\"r\"
>240	Argument	filename
>241	Identifier	filename
>242	Callee	fopen
>243	Identifier	fopen
>244	Identifier	file
>245	IdentifierDeclStatement	 
>246	IdentifierDecl	* file
>247	Identifier	file
>248	IdentifierDeclType	FILE *
>262	FunctionDef	ReadKeyFile (const char * filename , unsigned char * * keys , keypt_t * * info)
>263	ParameterList	const char * filename , unsigned char * * keys , keypt_t * * info
>264	Parameter	 
>265	Identifier	info
>266	ParameterType	keypt_t * *
>267	Parameter	 
>268	Identifier	keys
>269	ParameterType	unsigned char * *
>270	Parameter	 
>271	Identifier	filename
>272	ParameterType	const char *
>273	ReturnType	int
>274	CompoundStatement	 
>275	ReturnStatement	 
>276	Identifier	n
>277	ExpressionStatement	 
>278	CallExpression	fclose ( file )
>279	ArgumentList	file
>280	Argument	file
>281	Identifier	file
>282	Callee	fclose
>283	Identifier	fclose
>284	IdentifierDeclStatement	 
>285	IdentifierDecl	n = ReadKeys ( file , keys , info )
>286	AssignmentExpr	n = ReadKeys ( file , keys , info )
>287	CallExpression	ReadKeys ( file , keys , info )
>288	ArgumentList	file
>289	Argument	info
>290	Identifier	info
>291	Argument	keys
>292	Identifier	keys
>293	Argument	file
>294	Identifier	file
>295	Callee	ReadKeys
>296	Identifier	ReadKeys
>297	Identifier	n
>298	Identifier	n
>299	IdentifierDeclType	int
>300	IfStatement	if ( ! file )
>301	CompoundStatement	 
>302	IfStatement	if ( gzf == NULL )
>303	ElseStatement	else
>304	CompoundStatement	 
>305	ReturnStatement	 
>306	Identifier	n
>307	ExpressionStatement	 
>308	CallExpression	gzclose ( gzf )
>309	ArgumentList	gzf
>310	Argument	gzf
>311	Identifier	gzf
>312	Callee	gzclose
>313	Identifier	gzclose
>314	IdentifierDeclStatement	 
>315	IdentifierDecl	n = ReadKeysGzip ( gzf , keys , info )
>316	AssignmentExpr	n = ReadKeysGzip ( gzf , keys , info )
>317	CallExpression	ReadKeysGzip ( gzf , keys , info )
>318	ArgumentList	gzf
>319	Argument	info
>320	Identifier	info
>321	Argument	keys
>322	Identifier	keys
>323	Argument	gzf
>324	Identifier	gzf
>325	Callee	ReadKeysGzip
>326	Identifier	ReadKeysGzip
>327	Identifier	n
>328	Identifier	n
>329	IdentifierDeclType	int
>330	CompoundStatement	 
>331	ReturnStatement	 
>332	PrimaryExpression	0
>333	ExpressionStatement	 
>334	CallExpression	printf ( \"Could not open file
>335	ArgumentList	\"Could not open file
>336	Argument	filename
>337	Identifier	filename
>338	Argument	\"Could not open file
>339	PrimaryExpression	\"Could not open file
>340	Callee	printf
>341	Identifier	printf
>342	Condition	 
>343	EqualityExpression	gzf == NULL
>344	Identifier	NULL
>345	Identifier	gzf
>346	IdentifierDeclStatement	 
>347	IdentifierDecl	gzf = gzopen ( buf , \"rb\" )
>348	AssignmentExpr	gzf = gzopen ( buf , \"rb\" )
>349	CallExpression	gzopen ( buf , \"rb\" )
>350	ArgumentList	buf
>351	Argument	\"rb\"
>352	PrimaryExpression	\"rb\"
>353	Argument	buf
>354	Identifier	buf
>355	Callee	gzopen
>356	Identifier	gzopen
>357	Identifier	gzf
>358	Identifier	gzf
>359	IdentifierDeclType	gzFile
>360	ExpressionStatement	 
>361	CallExpression	sprintf ( buf , \"%s.gz\" , filename )
>362	ArgumentList	buf
>363	Argument	filename
>364	Identifier	filename
>365	Argument	\"%s.gz\"
>366	PrimaryExpression	\"%s.gz\"
>367	Argument	buf
>368	Identifier	buf
>369	Callee	sprintf
>370	Identifier	sprintf
>371	IdentifierDeclStatement	 
>372	IdentifierDecl	buf [ 1024 ]
>373	PrimaryExpression	1024
>374	Identifier	buf
>375	IdentifierDeclType	char [ 1024 ]
>376	Condition	 
>377	UnaryOp	! file
>378	Identifier	file
>379	UnaryOperator	!
>380	ExpressionStatement	 
>381	AssignmentExpr	file = fopen ( filename , \"r\" )
>382	CallExpression	fopen ( filename , \"r\" )
>383	ArgumentList	filename
>384	Argument	\"r\"
>385	PrimaryExpression	\"r\"
>386	Argument	filename
>387	Identifier	filename
>388	Callee	fopen
>389	Identifier	fopen
>390	Identifier	file
>391	IdentifierDeclStatement	 
>392	IdentifierDecl	* file
>393	Identifier	file
>394	IdentifierDeclType	FILE *
>410	FunctionDef	ReadKeysMMAP (FILE * fp)
>411	ParameterList	FILE * fp
>412	Parameter	 
>413	Identifier	fp
>414	ParameterType	FILE *
>415	ReturnType	std 
>416	CompoundStatement	 
>417	ReturnStatement	 
>418	Identifier	kps
>419	IfStatement	if ( munmap ( file_start , sb . st_size ) < 0 )
>420	CompoundStatement	 
>421	ReturnStatement	 
>422	Identifier	kps
>423	ExpressionStatement	 
>424	CallExpression	printf ( \"[ReadKeysMMAP] Error
>425	ArgumentList	\"[ReadKeysMMAP] Error
>426	Argument	\"[ReadKeysMMAP] Error
>427	PrimaryExpression	\"[ReadKeysMMAP] Error
>428	Callee	printf
>429	Identifier	printf
>430	Condition	 
>431	RelationalExpression	munmap ( file_start , sb . st_size ) < 0
>432	PrimaryExpression	0
>433	CallExpression	munmap ( file_start , sb . st_size )
>434	ArgumentList	file_start
>435	Argument	sb . st_size
>436	MemberAccess	sb . st_size
>437	Identifier	st_size
>438	Identifier	sb
>439	Argument	file_start
>440	Identifier	file_start
>441	Callee	munmap
>442	Identifier	munmap
>443	ForStatement	for ( i = 0 ; i < num ; i ++ )
>444	CompoundStatement	 
>445	ExpressionStatement	 
>446	CallExpression	kps . push_back ( new Keypoint ( x , y , scale , ori , d ) )
>447	ArgumentList	x , y , scale , ori , d
>448	Argument	x , y , scale , ori , d
>449	Expression	x , y , scale , ori , d
>450	Expression	y , scale , ori , d
>451	Expression	scale , ori , d
>452	Expression	ori , d
>453	Identifier	d
>454	Identifier	ori
>455	Identifier	scale
>456	Identifier	y
>457	Identifier	x
>458	Callee	kps . push_back
>459	MemberAccess	kps . push_back
>460	Identifier	push_back
>461	Identifier	kps
>462	ForStatement	for ( j = 0 ; j < len ; j ++ )
>463	CompoundStatement	 
>464	ExpressionStatement	 
>465	AssignmentExpr	file += n
>466	Identifier	n
>467	Identifier	file
>468	ExpressionStatement	 
>469	AssignmentExpr	d [ j ] = ( unsigned char ) val
>470	CastExpression	( unsigned char ) val
>471	Identifier	val
>472	CastTarget	unsigned char
>473	ArrayIndexing	d [ j ]
>474	Identifier	j
>475	Identifier	d
>476	IfStatement	if ( sscanf ( file , \"%d%n\" , & val , & n ) != 1 || val < 0 || val > 255 )
>477	CompoundStatement	 
>478	ReturnStatement	 
>479	Identifier	kps
>480	ExpressionStatement	 
>481	CallExpression	printf ( \"[ReadKeysMMAP] Invalid keypoint file value.\" )
>482	ArgumentList	\"[ReadKeysMMAP] Invalid keypoint file value.\"
>483	Argument	\"[ReadKeysMMAP] Invalid keypoint file value.\"
>484	PrimaryExpression	\"[ReadKeysMMAP] Invalid keypoint file value.\"
>485	Callee	printf
>486	Identifier	printf
>487	Condition	 
>488	OrExpression	sscanf ( file , \"%d%n\" , & val , & n ) != 1 || val < 0 || val > 255
>489	OrExpression	val < 0 || val > 255
>490	RelationalExpression	val > 255
>491	PrimaryExpression	255
>492	Identifier	val
>493	RelationalExpression	val < 0
>494	PrimaryExpression	0
>495	Identifier	val
>496	EqualityExpression	sscanf ( file , \"%d%n\" , & val , & n ) != 1
>497	PrimaryExpression	1
>498	CallExpression	sscanf ( file , \"%d%n\" , & val , & n )
>499	ArgumentList	file
>500	Argument	& n
>501	UnaryOp	& n
>502	Identifier	n
>503	UnaryOperator	&
>504	Argument	& val
>505	UnaryOp	& val
>506	Identifier	val
>507	UnaryOperator	&
>508	Argument	\"%d%n\"
>509	PrimaryExpression	\"%d%n\"
>510	Argument	file
>511	Identifier	file
>512	Callee	sscanf
>513	Identifier	sscanf
>514	IncDecOp	 
>515	IncDec	++
>516	Identifier	j
>517	Condition	 
>518	RelationalExpression	j < len
>519	Identifier	len
>520	Identifier	j
>521	ForInit	 
>522	AssignmentExpr	j = 0
>523	PrimaryExpression	0
>524	Identifier	j
>525	ExpressionStatement	 
>526	AssignmentExpr	file += n
>527	Identifier	n
>528	Identifier	file
>529	IfStatement	if ( sscanf ( file , \"%f %f %f %f%n\" , & y , & x , & scale , & ori , & n ) != 4 )
>530	CompoundStatement	 
>531	ReturnStatement	 
>532	Identifier	kps
>533	ExpressionStatement	 
>534	CallExpression	printf ( \"[ReadKeysMMAP] Invalid keypoint file format.\" )
>535	ArgumentList	\"[ReadKeysMMAP] Invalid keypoint file format.\"
>536	Argument	\"[ReadKeysMMAP] Invalid keypoint file format.\"
>537	PrimaryExpression	\"[ReadKeysMMAP] Invalid keypoint file format.\"
>538	Callee	printf
>539	Identifier	printf
>540	Condition	 
>541	EqualityExpression	sscanf ( file , \"%f %f %f %f%n\" , & y , & x , & scale , & ori , & n ) != 4
>542	PrimaryExpression	4
>543	CallExpression	sscanf ( file , \"%f %f %f %f%n\" , & y , & x , & scale , & ori , & n )
>544	ArgumentList	file
>545	Argument	& n
>546	UnaryOp	& n
>547	Identifier	n
>548	UnaryOperator	&
>549	Argument	& ori
>550	UnaryOp	& ori
>551	Identifier	ori
>552	UnaryOperator	&
>553	Argument	& scale
>554	UnaryOp	& scale
>555	Identifier	scale
>556	UnaryOperator	&
>557	Argument	& x
>558	UnaryOp	& x
>559	Identifier	x
>560	UnaryOperator	&
>561	Argument	& y
>562	UnaryOp	& y
>563	Identifier	y
>564	UnaryOperator	&
>565	Argument	\"%f %f %f %f%n\"
>566	PrimaryExpression	\"%f %f %f %f%n\"
>567	Argument	file
>568	Identifier	file
>569	Callee	sscanf
>570	Identifier	sscanf
>571	IdentifierDeclStatement	 
>572	IdentifierDecl	ori
>573	Identifier	ori
>574	IdentifierDeclType	float
>575	IdentifierDecl	scale
>576	Identifier	scale
>577	IdentifierDeclType	float
>578	IdentifierDecl	y
>579	Identifier	y
>580	IdentifierDeclType	float
>581	IdentifierDecl	x
>582	Identifier	x
>583	IdentifierDeclType	float
>584	IdentifierDeclStatement	 
>585	IdentifierDecl	* d = new unsigned char [ len ]
>586	AssignmentExpr	* d = new unsigned char [ len ]
>587	Identifier	len
>588	Identifier	len
>589	Identifier	d
>590	IdentifierDeclType	unsigned char *
>591	IncDecOp	 
>592	IncDec	++
>593	Identifier	i
>594	Condition	 
>595	RelationalExpression	i < num
>596	Identifier	num
>597	Identifier	i
>598	ForInit	 
>599	AssignmentExpr	i = 0
>600	PrimaryExpression	0
>601	Identifier	i
>602	IfStatement	if ( len != 128 )
>603	CompoundStatement	 
>604	ReturnStatement	 
>605	Identifier	kps
>606	ExpressionStatement	 
>607	Statement	 
>608	Statement	 
>609	Statement	 
>610	Statement	 
>611	Statement	 
>612	Condition	 
>613	EqualityExpression	len != 128
>614	PrimaryExpression	128
>615	Identifier	len
>616	ExpressionStatement	 
>617	AssignmentExpr	file += n
>618	Identifier	n
>619	Identifier	file
>620	IfStatement	if ( sscanf ( file , \"%d %d%n\" , & num , & len , & n ) != 2 )
>621	CompoundStatement	 
>622	ReturnStatement	 
>623	Identifier	kps
>624	ExpressionStatement	 
>625	CallExpression	printf ( \"[ReadKeysMMAP] Invalid keypoint file beginning.\" )
>626	ArgumentList	\"[ReadKeysMMAP] Invalid keypoint file beginning.\"
>627	Argument	\"[ReadKeysMMAP] Invalid keypoint file beginning.\"
>628	PrimaryExpression	\"[ReadKeysMMAP] Invalid keypoint file beginning.\"
>629	Callee	printf
>630	Identifier	printf
>631	Condition	 
>632	EqualityExpression	sscanf ( file , \"%d %d%n\" , & num , & len , & n ) != 2
>633	PrimaryExpression	2
>634	CallExpression	sscanf ( file , \"%d %d%n\" , & num , & len , & n )
>635	ArgumentList	file
>636	Argument	& n
>637	UnaryOp	& n
>638	Identifier	n
>639	UnaryOperator	&
>640	Argument	& len
>641	UnaryOp	& len
>642	Identifier	len
>643	UnaryOperator	&
>644	Argument	& num
>645	UnaryOp	& num
>646	Identifier	num
>647	UnaryOperator	&
>648	Argument	\"%d %d%n\"
>649	PrimaryExpression	\"%d %d%n\"
>650	Argument	file
>651	Identifier	file
>652	Callee	sscanf
>653	Identifier	sscanf
>654	IdentifierDeclStatement	 
>655	IdentifierDecl	* file_start = file
>656	AssignmentExpr	* file_start = file
>657	Identifier	file
>658	Identifier	file
>659	Identifier	file_start
>660	IdentifierDeclType	char *
>661	IdentifierDeclStatement	 
>662	IdentifierDecl	* file = ( char * ) mmap ( NULL , sb . st_size , PROT_READ , MAP_SHARED , fileno ( fp ) , 0 )
>663	AssignmentExpr	* file = ( char * ) mmap ( NULL , sb . st_size , PROT_READ , MAP_SHARED , fileno ( fp ) , 0 )
>664	CastExpression	( char * ) mmap ( NULL , sb . st_size , PROT_READ , MAP_SHARED , fileno ( fp ) , 0 )
>665	CallExpression	mmap ( NULL , sb . st_size , PROT_READ , MAP_SHARED , fileno ( fp ) , 0 )
>666	ArgumentList	NULL
>667	Argument	0
>668	PrimaryExpression	0
>669	Argument	fileno ( fp )
>670	CallExpression	fileno ( fp )
>671	ArgumentList	fp
>672	Argument	fp
>673	Identifier	fp
>674	Callee	fileno
>675	Identifier	fileno
>676	Argument	MAP_SHARED
>677	Identifier	MAP_SHARED
>678	Argument	PROT_READ
>679	Identifier	PROT_READ
>680	Argument	sb . st_size
>681	MemberAccess	sb . st_size
>682	Identifier	st_size
>683	Identifier	sb
>684	Argument	NULL
>685	Identifier	NULL
>686	Callee	mmap
>687	Identifier	mmap
>688	CastTarget	char *
>689	Identifier	file
>690	Identifier	file
>691	IdentifierDeclType	char *
>692	IfStatement	if ( fstat ( fileno ( fp ) , & sb ) < 0 )
>693	CompoundStatement	 
>694	ReturnStatement	 
>695	Identifier	kps
>696	ExpressionStatement	 
>697	CallExpression	printf ( \"[ReadKeysMMAP] Error
>698	ArgumentList	\"[ReadKeysMMAP] Error
>699	Argument	\"[ReadKeysMMAP] Error
>700	PrimaryExpression	\"[ReadKeysMMAP] Error
>701	Callee	printf
>702	Identifier	printf
>703	Condition	 
>704	RelationalExpression	fstat ( fileno ( fp ) , & sb ) < 0
>705	PrimaryExpression	0
>706	CallExpression	fstat ( fileno ( fp ) , & sb )
>707	ArgumentList	fileno ( fp )
>708	Argument	& sb
>709	UnaryOp	& sb
>710	Identifier	sb
>711	UnaryOperator	&
>712	Argument	fileno ( fp )
>713	CallExpression	fileno ( fp )
>714	ArgumentList	fp
>715	Argument	fp
>716	Identifier	fp
>717	Callee	fileno
>718	Identifier	fileno
>719	Callee	fstat
>720	Identifier	fstat
>721	IdentifierDeclStatement	 
>722	IdentifierDecl	sb
>723	Identifier	sb
>724	IdentifierDeclType	struct stat
>725	IdentifierDeclStatement	 
>726	IdentifierDecl	kps
>727	Identifier	kps
>728	IdentifierDeclType	std 
>729	IdentifierDeclStatement	 
>730	IdentifierDecl	n
>731	Identifier	n
>732	IdentifierDeclType	int
>733	IdentifierDecl	val
>734	Identifier	val
>735	IdentifierDeclType	int
>736	IdentifierDecl	len
>737	Identifier	len
>738	IdentifierDeclType	int
>739	IdentifierDecl	num
>740	Identifier	num
>741	IdentifierDeclType	int
>742	IdentifierDecl	j
>743	Identifier	j
>744	IdentifierDeclType	int
>745	IdentifierDecl	i
>746	Identifier	i
>747	IdentifierDeclType	int
>787	FunctionDef	ReadKeys (FILE * fp , unsigned char * * keys , keypt_t * * info)
>788	ParameterList	FILE * fp , unsigned char * * keys , keypt_t * * info
>789	Parameter	 
>790	Identifier	info
>791	ParameterType	keypt_t * *
>792	Parameter	 
>793	Identifier	keys
>794	ParameterType	unsigned char * *
>795	Parameter	 
>796	Identifier	fp
>797	ParameterType	FILE *
>798	ReturnType	int
>799	CompoundStatement	 
>800	ReturnStatement	 
>801	Identifier	num
>802	ForStatement	for ( i = 0 ; i < num ; i ++ )
>803	CompoundStatement	 
>804	ForStatement	for ( int line = 0 ; line < 7 ; line ++ )
>805	CompoundStatement	 
>806	IfStatement	if ( line < 6 )
>807	ElseStatement	else
>808	CompoundStatement	 
>809	ExpressionStatement	 
>810	AssignmentExpr	p += 8
>811	PrimaryExpression	8
>812	Identifier	p
>813	ExpressionStatement	 
>814	CallExpression	sscanf ( buf , \"%hhu %hhu %hhu %hhu %hhu %hhu %hhu %hhu\" , p + 0 , p + 1 , p + 2 , p + 3 , p + 4 , p + 5 , p + 6 , \
>815	ArgumentList	buf
>816	Argument	p + 7
>817	AdditiveExpression	p + 7
>818	PrimaryExpression	7
>819	Identifier	p
>820	Argument	p + 6
>821	AdditiveExpression	p + 6
>822	PrimaryExpression	6
>823	Identifier	p
>824	Argument	p + 5
>825	AdditiveExpression	p + 5
>826	PrimaryExpression	5
>827	Identifier	p
>828	Argument	p + 4
>829	AdditiveExpression	p + 4
>830	PrimaryExpression	4
>831	Identifier	p
>832	Argument	p + 3
>833	AdditiveExpression	p + 3
>834	PrimaryExpression	3
>835	Identifier	p
>836	Argument	p + 2
>837	AdditiveExpression	p + 2
>838	PrimaryExpression	2
>839	Identifier	p
>840	Argument	p + 1
>841	AdditiveExpression	p + 1
>842	PrimaryExpression	1
>843	Identifier	p
>844	Argument	p + 0
>845	AdditiveExpression	p + 0
>846	PrimaryExpression	0
>847	Identifier	p
>848	Argument	\"%hhu %hhu %hhu %hhu %hhu %hhu %hhu %hhu\"
>849	PrimaryExpression	\"%hhu %hhu %hhu %hhu %hhu %hhu %hhu %hhu\"
>850	Argument	buf
>851	Identifier	buf
>852	Callee	sscanf
>853	Identifier	sscanf
>854	CompoundStatement	 
>855	ExpressionStatement	 
>856	AssignmentExpr	p += 20
>857	PrimaryExpression	20
>858	Identifier	p
>859	ExpressionStatement	 
>860	Statement	 
>861	Statement	 
>862	Statement	 
>863	Statement	 
>864	Statement	 
>865	Statement	 
>866	Statement	 
>867	Statement	 
>868	Statement	 
>869	Statement	 
>870	Statement	 
>871	Statement	 
>872	Statement	 
>873	Statement	 
>874	Statement	 
>875	Statement	 
>876	Statement	 
>877	Statement	 
>878	Statement	 
>879	Statement	 
>880	Statement	 
>881	Statement	 
>882	Statement	 
>883	Statement	 
>884	Statement	 
>885	Statement	 
>886	Statement	 
>887	Statement	 
>888	Statement	 
>889	Statement	 
>890	Statement	 
>891	Statement	 
>892	Statement	 
>893	Statement	 
>894	Statement	 
>895	Statement	 
>896	Statement	 
>897	Statement	 
>898	Statement	 
>899	Statement	 
>900	Statement	 
>901	Statement	 
>902	Statement	 
>903	Statement	 
>904	Statement	 
>905	Statement	 
>906	Statement	 
>907	Statement	 
>908	Statement	 
>909	Statement	 
>910	Statement	 
>911	Statement	 
>912	Statement	 
>913	Statement	 
>914	Statement	 
>915	Statement	 
>916	Statement	 
>917	Statement	 
>918	Statement	 
>919	Statement	 
>920	Statement	 
>921	Statement	 
>922	Statement	 
>923	Statement	 
>924	Statement	 
>925	Statement	 
>926	Statement	 
>927	Statement	 
>928	Statement	 
>929	Statement	 
>930	Statement	 
>931	Statement	 
>932	Statement	 
>933	Statement	 
>934	Statement	 
>935	Statement	 
>936	Statement	 
>937	Statement	 
>938	Statement	 
>939	Statement	 
>940	Statement	 
>941	Statement	 
>942	Statement	 
>943	Statement	 
>944	Statement	 
>945	Statement	 
>946	Statement	 
>947	Condition	 
>948	RelationalExpression	line < 6
>949	PrimaryExpression	6
>950	Identifier	line
>951	ExpressionStatement	 
>952	CallExpression	fgets ( buf , 1024 , fp )
>953	ArgumentList	buf
>954	Argument	fp
>955	Identifier	fp
>956	Argument	1024
>957	PrimaryExpression	1024
>958	Argument	buf
>959	Identifier	buf
>960	Callee	fgets
>961	Identifier	fgets
>962	IncDecOp	 
>963	IncDec	++
>964	Identifier	line
>965	Condition	 
>966	RelationalExpression	line < 7
>967	PrimaryExpression	7
>968	Identifier	line
>969	ForInit	 
>970	IdentifierDeclStatement	int line = 0 ;
>971	IdentifierDecl	line = 0
>972	AssignmentExpr	line = 0
>973	PrimaryExpression	0
>974	Identifier	line
>975	Identifier	line
>976	IdentifierDeclType	int
>977	IdentifierDeclStatement	 
>978	IdentifierDecl	buf [ 1024 ]
>979	PrimaryExpression	1024
>980	Identifier	buf
>981	IdentifierDeclType	char [ 1024 ]
>982	IfStatement	if ( info != NULL )
>983	CompoundStatement	 
>984	ExpressionStatement	 
>985	AssignmentExpr	( * info ) [ i ] . orient = ori
>986	Identifier	ori
>987	MemberAccess	( * info ) [ i ] . orient
>988	Identifier	orient
>989	ArrayIndexing	( * info ) [ i ]
>990	Identifier	i
>991	UnaryOp	* info
>992	Identifier	info
>993	UnaryOperator	*
>994	ExpressionStatement	 
>995	AssignmentExpr	( * info ) [ i ] . scale = scale
>996	Identifier	scale
>997	MemberAccess	( * info ) [ i ] . scale
>998	Identifier	scale
>999	ArrayIndexing	( * info ) [ i ]
>1000	Identifier	i
>1001	UnaryOp	* info
>1002	Identifier	info
>1003	UnaryOperator	*
>1004	ExpressionStatement	 
>1005	AssignmentExpr	( * info ) [ i ] . y = y
>1006	Identifier	y
>1007	MemberAccess	( * info ) [ i ] . y
>1008	Identifier	y
>1009	ArrayIndexing	( * info ) [ i ]
>1010	Identifier	i
>1011	UnaryOp	* info
>1012	Identifier	info
>1013	UnaryOperator	*
>1014	ExpressionStatement	 
>1015	AssignmentExpr	( * info ) [ i ] . x = x
>1016	Identifier	x
>1017	MemberAccess	( * info ) [ i ] . x
>1018	Identifier	x
>1019	ArrayIndexing	( * info ) [ i ]
>1020	Identifier	i
>1021	UnaryOp	* info
>1022	Identifier	info
>1023	UnaryOperator	*
>1024	Condition	 
>1025	EqualityExpression	info != NULL
>1026	Identifier	NULL
>1027	Identifier	info
>1028	IfStatement	if ( fscanf ( fp , \"%f %f %f %f\n\" , & y , & x , & scale , & ori ) != 4 )
>1029	CompoundStatement	 
>1030	ReturnStatement	 
>1031	PrimaryExpression	0
>1032	ExpressionStatement	 
>1033	CallExpression	printf ( \"Invalid keypoint file format.\" )
>1034	ArgumentList	\"Invalid keypoint file format.\"
>1035	Argument	\"Invalid keypoint file format.\"
>1036	PrimaryExpression	\"Invalid keypoint file format.\"
>1037	Callee	printf
>1038	Identifier	printf
>1039	Condition	 
>1040	EqualityExpression	fscanf ( fp , \"%f %f %f %f\n\" , & y , & x , & scale , & ori ) != 4
>1041	PrimaryExpression	4
>1042	CallExpression	fscanf ( fp , \"%f %f %f %f\n\" , & y , & x , & scale , & ori )
>1043	ArgumentList	fp
>1044	Argument	& ori
>1045	UnaryOp	& ori
>1046	Identifier	ori
>1047	UnaryOperator	&
>1048	Argument	& scale
>1049	UnaryOp	& scale
>1050	Identifier	scale
>1051	UnaryOperator	&
>1052	Argument	& x
>1053	UnaryOp	& x
>1054	Identifier	x
>1055	UnaryOperator	&
>1056	Argument	& y
>1057	UnaryOp	& y
>1058	Identifier	y
>1059	UnaryOperator	&
>1060	Argument	\"%f %f %f %f\n\"
>1061	PrimaryExpression	\"%f %f %f %f\n\"
>1062	Argument	fp
>1063	Identifier	fp
>1064	Callee	fscanf
>1065	Identifier	fscanf
>1066	IdentifierDeclStatement	 
>1067	IdentifierDecl	ori
>1068	Identifier	ori
>1069	IdentifierDeclType	float
>1070	IdentifierDecl	scale
>1071	Identifier	scale
>1072	IdentifierDeclType	float
>1073	IdentifierDecl	y
>1074	Identifier	y
>1075	IdentifierDeclType	float
>1076	IdentifierDecl	x
>1077	Identifier	x
>1078	IdentifierDeclType	float
>1079	IncDecOp	 
>1080	IncDec	++
>1081	Identifier	i
>1082	Condition	 
>1083	RelationalExpression	i < num
>1084	Identifier	num
>1085	Identifier	i
>1086	ForInit	 
>1087	AssignmentExpr	i = 0
>1088	PrimaryExpression	0
>1089	Identifier	i
>1090	IdentifierDeclStatement	 
>1091	IdentifierDecl	* p = * keys
>1092	AssignmentExpr	* p = * keys
>1093	UnaryOp	* keys
>1094	Identifier	keys
>1095	UnaryOperator	*
>1096	Identifier	p
>1097	Identifier	p
>1098	IdentifierDeclType	unsigned char *
>1099	IfStatement	if ( info != NULL )
>1100	ExpressionStatement	 
>1101	AssignmentExpr	* info = new keypt_t [ num ]
>1102	Identifier	num
>1103	UnaryOp	* info
>1104	Identifier	info
>1105	UnaryOperator	*
>1106	Condition	 
>1107	EqualityExpression	info != NULL
>1108	Identifier	NULL
>1109	Identifier	info
>1110	ExpressionStatement	 
>1111	AssignmentExpr	* keys = new unsigned char [ 128 * num + 8 ]
>1112	AdditiveExpression	128 * num + 8
>1113	PrimaryExpression	8
>1114	MultiplicativeExpression	128 * num
>1115	Identifier	num
>1116	PrimaryExpression	128
>1117	UnaryOp	* keys
>1118	Identifier	keys
>1119	UnaryOperator	*
>1120	IfStatement	if ( len != 128 )
>1121	CompoundStatement	 
>1122	ReturnStatement	 
>1123	PrimaryExpression	0
>1124	ExpressionStatement	 
>1125	CallExpression	printf ( \"Keypoint descriptor length invalid (should be 128).\" )
>1126	ArgumentList	\"Keypoint descriptor length invalid (should be 128).\"
>1127	Argument	\"Keypoint descriptor length invalid (should be 128).\"
>1128	PrimaryExpression	\"Keypoint descriptor length invalid (should be 128).\"
>1129	Callee	printf
>1130	Identifier	printf
>1131	Condition	 
>1132	EqualityExpression	len != 128
>1133	PrimaryExpression	128
>1134	Identifier	len
>1135	IfStatement	if ( fscanf ( fp , \"%d %d\" , & num , & len ) != 2 )
>1136	CompoundStatement	 
>1137	ReturnStatement	 
>1138	PrimaryExpression	0
>1139	ExpressionStatement	 
>1140	CallExpression	printf ( \"Invalid keypoint file\n\" )
>1141	ArgumentList	\"Invalid keypoint file\n\"
>1142	Argument	\"Invalid keypoint file\n\"
>1143	PrimaryExpression	\"Invalid keypoint file\n\"
>1144	Callee	printf
>1145	Identifier	printf
>1146	Condition	 
>1147	EqualityExpression	fscanf ( fp , \"%d %d\" , & num , & len ) != 2
>1148	PrimaryExpression	2
>1149	CallExpression	fscanf ( fp , \"%d %d\" , & num , & len )
>1150	ArgumentList	fp
>1151	Argument	& len
>1152	UnaryOp	& len
>1153	Identifier	len
>1154	UnaryOperator	&
>1155	Argument	& num
>1156	UnaryOp	& num
>1157	Identifier	num
>1158	UnaryOperator	&
>1159	Argument	\"%d %d\"
>1160	PrimaryExpression	\"%d %d\"
>1161	Argument	fp
>1162	Identifier	fp
>1163	Callee	fscanf
>1164	Identifier	fscanf
>1165	IdentifierDeclStatement	 
>1166	IdentifierDecl	kps
>1167	Identifier	kps
>1168	IdentifierDeclType	std 
>1169	IdentifierDeclStatement	 
>1170	IdentifierDecl	len
>1171	Identifier	len
>1172	IdentifierDeclType	int
>1173	IdentifierDecl	num
>1174	Identifier	num
>1175	IdentifierDeclType	int
>1176	IdentifierDecl	i
>1177	Identifier	i
>1178	IdentifierDeclType	int
>1212	FunctionDef	ReadKeysGzip (gzFile fp , unsigned char * * keys , keypt_t * * info)
>1213	ParameterList	gzFile fp , unsigned char * * keys , keypt_t * * info
>1214	Parameter	 
>1215	Identifier	info
>1216	ParameterType	keypt_t * *
>1217	Parameter	 
>1218	Identifier	keys
>1219	ParameterType	unsigned char * *
>1220	Parameter	 
>1221	Identifier	fp
>1222	ParameterType	gzFile
>1223	ReturnType	int
>1224	CompoundStatement	 
>1225	ReturnStatement	 
>1226	Identifier	num
>1227	ExpressionStatement	 
>1228	CallExpression	assert ( p == * keys + 128 * num )
>1229	ArgumentList	p == * keys + 128 * num
>1230	Argument	p == * keys + 128 * num
>1231	EqualityExpression	p == * keys + 128 * num
>1232	AdditiveExpression	* keys + 128 * num
>1233	MultiplicativeExpression	128 * num
>1234	Identifier	num
>1235	PrimaryExpression	128
>1236	UnaryOp	* keys
>1237	Identifier	keys
>1238	UnaryOperator	*
>1239	Identifier	p
>1240	Callee	assert
>1241	Identifier	assert
>1242	ForStatement	for ( i = 0 ; i < num ; i ++ )
>1243	CompoundStatement	 
>1244	ForStatement	for ( int line = 0 ; line < 7 ; line ++ )
>1245	CompoundStatement	 
>1246	IfStatement	if ( line < 6 )
>1247	ElseStatement	else
>1248	CompoundStatement	 
>1249	ExpressionStatement	 
>1250	AssignmentExpr	p += 8
>1251	PrimaryExpression	8
>1252	Identifier	p
>1253	ExpressionStatement	 
>1254	CallExpression	sscanf ( buf , \"%hhu %hhu %hhu %hhu %hhu %hhu %hhu %hhu\" , p + 0 , p + 1 , p + 2 , p + 3 , p + 4 , p + 5 , p + 6 , \
>1255	ArgumentList	buf
>1256	Argument	p + 7
>1257	AdditiveExpression	p + 7
>1258	PrimaryExpression	7
>1259	Identifier	p
>1260	Argument	p + 6
>1261	AdditiveExpression	p + 6
>1262	PrimaryExpression	6
>1263	Identifier	p
>1264	Argument	p + 5
>1265	AdditiveExpression	p + 5
>1266	PrimaryExpression	5
>1267	Identifier	p
>1268	Argument	p + 4
>1269	AdditiveExpression	p + 4
>1270	PrimaryExpression	4
>1271	Identifier	p
>1272	Argument	p + 3
>1273	AdditiveExpression	p + 3
>1274	PrimaryExpression	3
>1275	Identifier	p
>1276	Argument	p + 2
>1277	AdditiveExpression	p + 2
>1278	PrimaryExpression	2
>1279	Identifier	p
>1280	Argument	p + 1
>1281	AdditiveExpression	p + 1
>1282	PrimaryExpression	1
>1283	Identifier	p
>1284	Argument	p + 0
>1285	AdditiveExpression	p + 0
>1286	PrimaryExpression	0
>1287	Identifier	p
>1288	Argument	\"%hhu %hhu %hhu %hhu %hhu %hhu %hhu %hhu\"
>1289	PrimaryExpression	\"%hhu %hhu %hhu %hhu %hhu %hhu %hhu %hhu\"
>1290	Argument	buf
>1291	Identifier	buf
>1292	Callee	sscanf
>1293	Identifier	sscanf
>1294	CompoundStatement	 
>1295	ExpressionStatement	 
>1296	AssignmentExpr	p += 20
>1297	PrimaryExpression	20
>1298	Identifier	p
>1299	ExpressionStatement	 
>1300	Statement	 
>1301	Statement	 
>1302	Statement	 
>1303	Statement	 
>1304	Statement	 
>1305	Statement	 
>1306	Statement	 
>1307	Statement	 
>1308	Statement	 
>1309	Statement	 
>1310	Statement	 
>1311	Statement	 
>1312	Statement	 
>1313	Statement	 
>1314	Statement	 
>1315	Statement	 
>1316	Statement	 
>1317	Statement	 
>1318	Statement	 
>1319	Statement	 
>1320	Statement	 
>1321	Statement	 
>1322	Statement	 
>1323	Statement	 
>1324	Statement	 
>1325	Statement	 
>1326	Statement	 
>1327	Statement	 
>1328	Statement	 
>1329	Statement	 
>1330	Statement	 
>1331	Statement	 
>1332	Statement	 
>1333	Statement	 
>1334	Statement	 
>1335	Statement	 
>1336	Statement	 
>1337	Statement	 
>1338	Statement	 
>1339	Statement	 
>1340	Statement	 
>1341	Statement	 
>1342	Statement	 
>1343	Statement	 
>1344	Statement	 
>1345	Statement	 
>1346	Statement	 
>1347	Statement	 
>1348	Statement	 
>1349	Statement	 
>1350	Statement	 
>1351	Statement	 
>1352	Statement	 
>1353	Statement	 
>1354	Statement	 
>1355	Statement	 
>1356	Statement	 
>1357	Statement	 
>1358	Statement	 
>1359	Statement	 
>1360	Statement	 
>1361	Statement	 
>1362	Statement	 
>1363	Statement	 
>1364	Statement	 
>1365	Statement	 
>1366	Statement	 
>1367	Statement	 
>1368	Statement	 
>1369	Statement	 
>1370	Statement	 
>1371	Statement	 
>1372	Statement	 
>1373	Statement	 
>1374	Statement	 
>1375	Statement	 
>1376	Statement	 
>1377	Statement	 
>1378	Statement	 
>1379	Statement	 
>1380	Statement	 
>1381	Statement	 
>1382	Statement	 
>1383	Statement	 
>1384	Statement	 
>1385	Statement	 
>1386	Statement	 
>1387	Condition	 
>1388	RelationalExpression	line < 6
>1389	PrimaryExpression	6
>1390	Identifier	line
>1391	ExpressionStatement	 
>1392	CallExpression	assert ( str != Z_NULL )
>1393	ArgumentList	str != Z_NULL
>1394	Argument	str != Z_NULL
>1395	EqualityExpression	str != Z_NULL
>1396	Identifier	Z_NULL
>1397	Identifier	str
>1398	Callee	assert
>1399	Identifier	assert
>1400	IdentifierDeclStatement	 
>1401	IdentifierDecl	* str = gzgets ( fp , buf , 1024 )
>1402	AssignmentExpr	* str = gzgets ( fp , buf , 1024 )
>1403	CallExpression	gzgets ( fp , buf , 1024 )
>1404	ArgumentList	fp
>1405	Argument	1024
>1406	PrimaryExpression	1024
>1407	Argument	buf
>1408	Identifier	buf
>1409	Argument	fp
>1410	Identifier	fp
>1411	Callee	gzgets
>1412	Identifier	gzgets
>1413	Identifier	str
>1414	Identifier	str
>1415	IdentifierDeclType	char *
>1416	IncDecOp	 
>1417	IncDec	++
>1418	Identifier	line
>1419	Condition	 
>1420	RelationalExpression	line < 7
>1421	PrimaryExpression	7
>1422	Identifier	line
>1423	ForInit	 
>1424	IdentifierDeclStatement	int line = 0 ;
>1425	IdentifierDecl	line = 0
>1426	AssignmentExpr	line = 0
>1427	PrimaryExpression	0
>1428	Identifier	line
>1429	Identifier	line
>1430	IdentifierDeclType	int
>1431	IfStatement	if ( info != NULL )
>1432	CompoundStatement	 
>1433	ExpressionStatement	 
>1434	AssignmentExpr	( * info ) [ i ] . orient = ori
>1435	Identifier	ori
>1436	MemberAccess	( * info ) [ i ] . orient
>1437	Identifier	orient
>1438	ArrayIndexing	( * info ) [ i ]
>1439	Identifier	i
>1440	UnaryOp	* info
>1441	Identifier	info
>1442	UnaryOperator	*
>1443	ExpressionStatement	 
>1444	AssignmentExpr	( * info ) [ i ] . scale = scale
>1445	Identifier	scale
>1446	MemberAccess	( * info ) [ i ] . scale
>1447	Identifier	scale
>1448	ArrayIndexing	( * info ) [ i ]
>1449	Identifier	i
>1450	UnaryOp	* info
>1451	Identifier	info
>1452	UnaryOperator	*
>1453	ExpressionStatement	 
>1454	AssignmentExpr	( * info ) [ i ] . y = y
>1455	Identifier	y
>1456	MemberAccess	( * info ) [ i ] . y
>1457	Identifier	y
>1458	ArrayIndexing	( * info ) [ i ]
>1459	Identifier	i
>1460	UnaryOp	* info
>1461	Identifier	info
>1462	UnaryOperator	*
>1463	ExpressionStatement	 
>1464	AssignmentExpr	( * info ) [ i ] . x = x
>1465	Identifier	x
>1466	MemberAccess	( * info ) [ i ] . x
>1467	Identifier	x
>1468	ArrayIndexing	( * info ) [ i ]
>1469	Identifier	i
>1470	UnaryOp	* info
>1471	Identifier	info
>1472	UnaryOperator	*
>1473	Condition	 
>1474	EqualityExpression	info != NULL
>1475	Identifier	NULL
>1476	Identifier	info
>1477	IfStatement	if ( sscanf ( buf , \"%f %f %f %f\n\" , & y , & x , & scale , & ori ) != 4 )
>1478	CompoundStatement	 
>1479	ReturnStatement	 
>1480	PrimaryExpression	0
>1481	ExpressionStatement	 
>1482	CallExpression	printf ( \"Invalid keypoint file format.\" )
>1483	ArgumentList	\"Invalid keypoint file format.\"
>1484	Argument	\"Invalid keypoint file format.\"
>1485	PrimaryExpression	\"Invalid keypoint file format.\"
>1486	Callee	printf
>1487	Identifier	printf
>1488	Condition	 
>1489	EqualityExpression	sscanf ( buf , \"%f %f %f %f\n\" , & y , & x , & scale , & ori ) != 4
>1490	PrimaryExpression	4
>1491	CallExpression	sscanf ( buf , \"%f %f %f %f\n\" , & y , & x , & scale , & ori )
>1492	ArgumentList	buf
>1493	Argument	& ori
>1494	UnaryOp	& ori
>1495	Identifier	ori
>1496	UnaryOperator	&
>1497	Argument	& scale
>1498	UnaryOp	& scale
>1499	Identifier	scale
>1500	UnaryOperator	&
>1501	Argument	& x
>1502	UnaryOp	& x
>1503	Identifier	x
>1504	UnaryOperator	&
>1505	Argument	& y
>1506	UnaryOp	& y
>1507	Identifier	y
>1508	UnaryOperator	&
>1509	Argument	\"%f %f %f %f\n\"
>1510	PrimaryExpression	\"%f %f %f %f\n\"
>1511	Argument	buf
>1512	Identifier	buf
>1513	Callee	sscanf
>1514	Identifier	sscanf
>1515	ExpressionStatement	 
>1516	CallExpression	gzgets ( fp , buf , 1024 )
>1517	ArgumentList	fp
>1518	Argument	1024
>1519	PrimaryExpression	1024
>1520	Argument	buf
>1521	Identifier	buf
>1522	Argument	fp
>1523	Identifier	fp
>1524	Callee	gzgets
>1525	Identifier	gzgets
>1526	IdentifierDeclStatement	 
>1527	IdentifierDecl	buf [ 1024 ]
>1528	PrimaryExpression	1024
>1529	Identifier	buf
>1530	IdentifierDeclType	char [ 1024 ]
>1531	IdentifierDeclStatement	 
>1532	IdentifierDecl	ori
>1533	Identifier	ori
>1534	IdentifierDeclType	float
>1535	IdentifierDecl	scale
>1536	Identifier	scale
>1537	IdentifierDeclType	float
>1538	IdentifierDecl	y
>1539	Identifier	y
>1540	IdentifierDeclType	float
>1541	IdentifierDecl	x
>1542	Identifier	x
>1543	IdentifierDeclType	float
>1544	IncDecOp	 
>1545	IncDec	++
>1546	Identifier	i
>1547	Condition	 
>1548	RelationalExpression	i < num
>1549	Identifier	num
>1550	Identifier	i
>1551	ForInit	 
>1552	AssignmentExpr	i = 0
>1553	PrimaryExpression	0
>1554	Identifier	i
>1555	IdentifierDeclStatement	 
>1556	IdentifierDecl	* p = * keys
>1557	AssignmentExpr	* p = * keys
>1558	UnaryOp	* keys
>1559	Identifier	keys
>1560	UnaryOperator	*
>1561	Identifier	p
>1562	Identifier	p
>1563	IdentifierDeclType	unsigned char *
>1564	IfStatement	if ( info != NULL )
>1565	ExpressionStatement	 
>1566	AssignmentExpr	* info = new keypt_t [ num ]
>1567	Identifier	num
>1568	UnaryOp	* info
>1569	Identifier	info
>1570	UnaryOperator	*
>1571	Condition	 
>1572	EqualityExpression	info != NULL
>1573	Identifier	NULL
>1574	Identifier	info
>1575	ExpressionStatement	 
>1576	AssignmentExpr	* keys = new unsigned char [ 128 * num + 8 ]
>1577	AdditiveExpression	128 * num + 8
>1578	PrimaryExpression	8
>1579	MultiplicativeExpression	128 * num
>1580	Identifier	num
>1581	PrimaryExpression	128
>1582	UnaryOp	* keys
>1583	Identifier	keys
>1584	UnaryOperator	*
>1585	IfStatement	if ( len != 128 )
>1586	CompoundStatement	 
>1587	ReturnStatement	 
>1588	PrimaryExpression	0
>1589	ExpressionStatement	 
>1590	CallExpression	printf ( \"Keypoint descriptor length invalid (should be 128).\" )
>1591	ArgumentList	\"Keypoint descriptor length invalid (should be 128).\"
>1592	Argument	\"Keypoint descriptor length invalid (should be 128).\"
>1593	PrimaryExpression	\"Keypoint descriptor length invalid (should be 128).\"
>1594	Callee	printf
>1595	Identifier	printf
>1596	Condition	 
>1597	EqualityExpression	len != 128
>1598	PrimaryExpression	128
>1599	Identifier	len
>1600	IfStatement	if ( sscanf ( header , \"%d %d\" , & num , & len ) != 2 )
>1601	CompoundStatement	 
>1602	ReturnStatement	 
>1603	PrimaryExpression	0
>1604	ExpressionStatement	 
>1605	CallExpression	printf ( \"Invalid keypoint file.\n\" )
>1606	ArgumentList	\"Invalid keypoint file.\n\"
>1607	Argument	\"Invalid keypoint file.\n\"
>1608	PrimaryExpression	\"Invalid keypoint file.\n\"
>1609	Callee	printf
>1610	Identifier	printf
>1611	Condition	 
>1612	EqualityExpression	sscanf ( header , \"%d %d\" , & num , & len ) != 2
>1613	PrimaryExpression	2
>1614	CallExpression	sscanf ( header , \"%d %d\" , & num , & len )
>1615	ArgumentList	header
>1616	Argument	& len
>1617	UnaryOp	& len
>1618	Identifier	len
>1619	UnaryOperator	&
>1620	Argument	& num
>1621	UnaryOp	& num
>1622	Identifier	num
>1623	UnaryOperator	&
>1624	Argument	\"%d %d\"
>1625	PrimaryExpression	\"%d %d\"
>1626	Argument	header
>1627	Identifier	header
>1628	Callee	sscanf
>1629	Identifier	sscanf
>1630	ExpressionStatement	 
>1631	CallExpression	gzgets ( fp , header , 256 )
>1632	ArgumentList	fp
>1633	Argument	256
>1634	PrimaryExpression	256
>1635	Argument	header
>1636	Identifier	header
>1637	Argument	fp
>1638	Identifier	fp
>1639	Callee	gzgets
>1640	Identifier	gzgets
>1641	IdentifierDeclStatement	 
>1642	IdentifierDecl	header [ 256 ]
>1643	PrimaryExpression	256
>1644	Identifier	header
>1645	IdentifierDeclType	char [ 256 ]
>1646	IdentifierDeclStatement	 
>1647	IdentifierDecl	kps
>1648	Identifier	kps
>1649	IdentifierDeclType	std 
>1650	IdentifierDeclStatement	 
>1651	IdentifierDecl	len
>1652	Identifier	len
>1653	IdentifierDeclType	int
>1654	IdentifierDecl	num
>1655	Identifier	num
>1656	IdentifierDeclType	int
>1657	IdentifierDecl	i
>1658	Identifier	i
>1659	IdentifierDeclType	int
>1697	FunctionDef	CreateSearchTree (int num_keys , unsigned char * keys)
>1698	ParameterList	int num_keys , unsigned char * keys
>1699	Parameter	 
>1700	Identifier	keys
>1701	ParameterType	unsigned char *
>1702	Parameter	 
>1703	Identifier	num_keys
>1704	ParameterType	int
>1705	ReturnType	ANNkd_tree *
>1706	CompoundStatement	 
>1707	ReturnStatement	 
>1708	Identifier	tree
>1709	IdentifierDeclStatement	 
>1710	IdentifierDecl	* tree = new ANNkd_tree ( pts , num_keys , 128 , 16 )
>1711	AssignmentExpr	* tree = new ANNkd_tree ( pts , num_keys , 128 , 16 )
>1712	Expression	pts , num_keys , 128 , 16
>1713	Expression	num_keys , 128 , 16
>1714	Expression	128 , 16
>1715	PrimaryExpression	16
>1716	PrimaryExpression	128
>1717	Identifier	num_keys
>1718	Identifier	pts
>1719	Identifier	tree
>1720	Identifier	tree
>1721	IdentifierDeclType	ANNkd_tree *
>1722	ForStatement	for ( int i = 0 ; i < num_keys ; i ++ )
>1723	CompoundStatement	 
>1724	ExpressionStatement	 
>1725	CallExpression	memcpy ( pts [ i ] , keys + 128 * i , sizeof ( unsigned char ) * 128 )
>1726	ArgumentList	pts [ i ]
>1727	Argument	sizeof ( unsigned char ) * 128
>1728	MultiplicativeExpression	sizeof ( unsigned char ) * 128
>1729	PrimaryExpression	128
>1730	SizeofExpr	sizeof ( unsigned char )
>1731	SizeofOperand	unsigned char
>1732	Sizeof	sizeof
>1733	Argument	keys + 128 * i
>1734	AdditiveExpression	keys + 128 * i
>1735	MultiplicativeExpression	128 * i
>1736	Identifier	i
>1737	PrimaryExpression	128
>1738	Identifier	keys
>1739	Argument	pts [ i ]
>1740	ArrayIndexing	pts [ i ]
>1741	Identifier	i
>1742	Identifier	pts
>1743	Callee	memcpy
>1744	Identifier	memcpy
>1745	IncDecOp	 
>1746	IncDec	++
>1747	Identifier	i
>1748	Condition	 
>1749	RelationalExpression	i < num_keys
>1750	Identifier	num_keys
>1751	Identifier	i
>1752	ForInit	 
>1753	IdentifierDeclStatement	int i = 0 ;
>1754	IdentifierDecl	i = 0
>1755	AssignmentExpr	i = 0
>1756	PrimaryExpression	0
>1757	Identifier	i
>1758	Identifier	i
>1759	IdentifierDeclType	int
>1760	IdentifierDeclStatement	 
>1761	IdentifierDecl	pts = annAllocPts ( num_keys , 128 )
>1762	AssignmentExpr	pts = annAllocPts ( num_keys , 128 )
>1763	CallExpression	annAllocPts ( num_keys , 128 )
>1764	ArgumentList	num_keys
>1765	Argument	128
>1766	PrimaryExpression	128
>1767	Argument	num_keys
>1768	Identifier	num_keys
>1769	Callee	annAllocPts
>1770	Identifier	annAllocPts
>1771	Identifier	pts
>1772	Identifier	pts
>1773	IdentifierDeclType	ANNpointArray
>1785	FunctionDef	MatchKeys (int num_keys1 , unsigned char * k1 , ANNkd_tree * tree2 , double ratio , int max_pts_visit)
>1786	ParameterList	int num_keys1 , unsigned char * k1 , ANNkd_tree * tree2 , double ratio , int max_pts_visit
>1787	Parameter	 
>1788	Identifier	max_pts_visit
>1789	ParameterType	int
>1790	Parameter	 
>1791	Identifier	ratio
>1792	ParameterType	double
>1793	Parameter	 
>1794	Identifier	tree2
>1795	ParameterType	ANNkd_tree *
>1796	Parameter	 
>1797	Identifier	k1
>1798	ParameterType	unsigned char *
>1799	Parameter	 
>1800	Identifier	num_keys1
>1801	ParameterType	int
>1802	ReturnType	std 
>1803	CompoundStatement	 
>1804	ReturnStatement	 
>1805	Identifier	matches
>1806	ForStatement	for ( int i = 0 ; i < num_keys1 ; i ++ )
>1807	CompoundStatement	 
>1808	IfStatement	if ( ( ( double ) dist [ 0 ] ) < ratio * ratio * ( ( double ) dist [ 1 ] ) )
>1809	CompoundStatement	 
>1810	ExpressionStatement	 
>1811	CallExpression	matches . push_back ( KeypointMatch ( i , nn_idx [ 0 ] ) )
>1812	ArgumentList	KeypointMatch ( i , nn_idx [ 0 ] )
>1813	Argument	KeypointMatch ( i , nn_idx [ 0 ] )
>1814	CallExpression	KeypointMatch ( i , nn_idx [ 0 ] )
>1815	ArgumentList	i
>1816	Argument	nn_idx [ 0 ]
>1817	ArrayIndexing	nn_idx [ 0 ]
>1818	PrimaryExpression	0
>1819	Identifier	nn_idx
>1820	Argument	i
>1821	Identifier	i
>1822	Callee	KeypointMatch
>1823	Identifier	KeypointMatch
>1824	Callee	matches . push_back
>1825	MemberAccess	matches . push_back
>1826	Identifier	push_back
>1827	Identifier	matches
>1828	Condition	 
>1829	RelationalExpression	( ( double ) dist [ 0 ] ) < ratio * ratio * ( ( double ) dist [ 1 ] )
>1830	MultiplicativeExpression	ratio * ratio * ( ( double ) dist [ 1 ] )
>1831	MultiplicativeExpression	ratio * ( ( double ) dist [ 1 ] )
>1832	CastExpression	( double ) dist [ 1 ]
>1833	ArrayIndexing	dist [ 1 ]
>1834	PrimaryExpression	1
>1835	Identifier	dist
>1836	CastTarget	double
>1837	Identifier	ratio
>1838	Identifier	ratio
>1839	CastExpression	( double ) dist [ 0 ]
>1840	ArrayIndexing	dist [ 0 ]
>1841	PrimaryExpression	0
>1842	Identifier	dist
>1843	CastTarget	double
>1844	ExpressionStatement	 
>1845	CallExpression	tree2 -> annkPriSearch ( k1 + 128 * i , 2 , nn_idx , dist , 0.0 )
>1846	ArgumentList	k1 + 128 * i
>1847	Argument	0.0
>1848	PrimaryExpression	0.0
>1849	Argument	dist
>1850	Identifier	dist
>1851	Argument	nn_idx
>1852	Identifier	nn_idx
>1853	Argument	2
>1854	PrimaryExpression	2
>1855	Argument	k1 + 128 * i
>1856	AdditiveExpression	k1 + 128 * i
>1857	MultiplicativeExpression	128 * i
>1858	Identifier	i
>1859	PrimaryExpression	128
>1860	Identifier	k1
>1861	Callee	tree2 -> annkPriSearch
>1862	PtrMemberAccess	tree2 -> annkPriSearch
>1863	Identifier	annkPriSearch
>1864	Identifier	tree2
>1865	IdentifierDeclStatement	 
>1866	IdentifierDecl	dist [ 2 ]
>1867	PrimaryExpression	2
>1868	Identifier	dist
>1869	IdentifierDeclType	ANNdist [ 2 ]
>1870	IdentifierDeclStatement	 
>1871	IdentifierDecl	nn_idx [ 2 ]
>1872	PrimaryExpression	2
>1873	Identifier	nn_idx
>1874	IdentifierDeclType	ANNidx [ 2 ]
>1875	IncDecOp	 
>1876	IncDec	++
>1877	Identifier	i
>1878	Condition	 
>1879	RelationalExpression	i < num_keys1
>1880	Identifier	num_keys1
>1881	Identifier	i
>1882	ForInit	 
>1883	IdentifierDeclStatement	int i = 0 ;
>1884	IdentifierDecl	i = 0
>1885	AssignmentExpr	i = 0
>1886	PrimaryExpression	0
>1887	Identifier	i
>1888	Identifier	i
>1889	IdentifierDeclType	int
>1890	IdentifierDeclStatement	 
>1891	IdentifierDecl	matches
>1892	Identifier	matches
>1893	IdentifierDeclType	std 
>1894	ExpressionStatement	 
>1895	CallExpression	annMaxPtsVisit ( max_pts_visit )
>1896	ArgumentList	max_pts_visit
>1897	Argument	max_pts_visit
>1898	Identifier	max_pts_visit
>1899	Callee	annMaxPtsVisit
>1900	Identifier	annMaxPtsVisit
>1916	FunctionDef	MatchKeys (int num_keys1 , unsigned char * k1 , int num_keys2 , unsigned char * k2 , double ratio , int max_pts_\
>1917	ParameterList	int num_keys1 , unsigned char * k1 , int num_keys2 , unsigned char * k2 , double ratio , int max_pts_visit
>1918	Parameter	 
>1919	Identifier	max_pts_visit
>1920	ParameterType	int
>1921	Parameter	 
>1922	Identifier	ratio
>1923	ParameterType	double
>1924	Parameter	 
>1925	Identifier	k2
>1926	ParameterType	unsigned char *
>1927	Parameter	 
>1928	Identifier	num_keys2
>1929	ParameterType	int
>1930	Parameter	 
>1931	Identifier	k1
>1932	ParameterType	unsigned char *
>1933	Parameter	 
>1934	Identifier	num_keys1
>1935	ParameterType	int
>1936	ReturnType	std 
>1937	CompoundStatement	 
>1938	ReturnStatement	 
>1939	Identifier	matches
>1940	ExpressionStatement	 
>1941	Identifier	tree
>1942	Statement	 
>1943	ExpressionStatement	 
>1944	CallExpression	annDeallocPts ( pts )
>1945	ArgumentList	pts
>1946	Argument	pts
>1947	Identifier	pts
>1948	Callee	annDeallocPts
>1949	Identifier	annDeallocPts
>1950	ExpressionStatement	 
>1951	AssignmentExpr	end = clock ( )
>1952	CallExpression	clock ( )
>1953	ArgumentList	 
>1954	Callee	clock
>1955	Identifier	clock
>1956	Identifier	end
>1957	ForStatement	for ( int i = 0 ; i < num_keys1 ; i ++ )
>1958	CompoundStatement	 
>1959	IfStatement	if ( ( ( double ) dist [ 0 ] ) < ratio * ratio * ( ( double ) dist [ 1 ] ) )
>1960	CompoundStatement	 
>1961	ExpressionStatement	 
>1962	CallExpression	matches . push_back ( KeypointMatch ( i , nn_idx [ 0 ] ) )
>1963	ArgumentList	KeypointMatch ( i , nn_idx [ 0 ] )
>1964	Argument	KeypointMatch ( i , nn_idx [ 0 ] )
>1965	CallExpression	KeypointMatch ( i , nn_idx [ 0 ] )
>1966	ArgumentList	i
>1967	Argument	nn_idx [ 0 ]
>1968	ArrayIndexing	nn_idx [ 0 ]
>1969	PrimaryExpression	0
>1970	Identifier	nn_idx
>1971	Argument	i
>1972	Identifier	i
>1973	Callee	KeypointMatch
>1974	Identifier	KeypointMatch
>1975	Callee	matches . push_back
>1976	MemberAccess	matches . push_back
>1977	Identifier	push_back
>1978	Identifier	matches
>1979	Condition	 
>1980	RelationalExpression	( ( double ) dist [ 0 ] ) < ratio * ratio * ( ( double ) dist [ 1 ] )
>1981	MultiplicativeExpression	ratio * ratio * ( ( double ) dist [ 1 ] )
>1982	MultiplicativeExpression	ratio * ( ( double ) dist [ 1 ] )
>1983	CastExpression	( double ) dist [ 1 ]
>1984	ArrayIndexing	dist [ 1 ]
>1985	PrimaryExpression	1
>1986	Identifier	dist
>1987	CastTarget	double
>1988	Identifier	ratio
>1989	Identifier	ratio
>1990	CastExpression	( double ) dist [ 0 ]
>1991	ArrayIndexing	dist [ 0 ]
>1992	PrimaryExpression	0
>1993	Identifier	dist
>1994	CastTarget	double
>1995	ExpressionStatement	 
>1996	CallExpression	tree -> annkPriSearch ( k1 + 128 * i , 2 , nn_idx , dist , 0.0 )
>1997	ArgumentList	k1 + 128 * i
>1998	Argument	0.0
>1999	PrimaryExpression	0.0
>2000	Argument	dist
>2001	Identifier	dist
>2002	Argument	nn_idx
>2003	Identifier	nn_idx
>2004	Argument	2
>2005	PrimaryExpression	2
>2006	Argument	k1 + 128 * i
>2007	AdditiveExpression	k1 + 128 * i
>2008	MultiplicativeExpression	128 * i
>2009	Identifier	i
>2010	PrimaryExpression	128
>2011	Identifier	k1
>2012	Callee	tree -> annkPriSearch
>2013	PtrMemberAccess	tree -> annkPriSearch
>2014	Identifier	annkPriSearch
>2015	Identifier	tree
>2016	IdentifierDeclStatement	 
>2017	IdentifierDecl	dist [ 2 ]
>2018	PrimaryExpression	2
>2019	Identifier	dist
>2020	IdentifierDeclType	ANNdist [ 2 ]
>2021	IdentifierDeclStatement	 
>2022	IdentifierDecl	nn_idx [ 2 ]
>2023	PrimaryExpression	2
>2024	Identifier	nn_idx
>2025	IdentifierDeclType	ANNidx [ 2 ]
>2026	IncDecOp	 
>2027	IncDec	++
>2028	Identifier	i
>2029	Condition	 
>2030	RelationalExpression	i < num_keys1
>2031	Identifier	num_keys1
>2032	Identifier	i
>2033	ForInit	 
>2034	IdentifierDeclStatement	int i = 0 ;
>2035	IdentifierDecl	i = 0
>2036	AssignmentExpr	i = 0
>2037	PrimaryExpression	0
>2038	Identifier	i
>2039	Identifier	i
>2040	IdentifierDeclType	int
>2041	ExpressionStatement	 
>2042	AssignmentExpr	start = clock ( )
>2043	CallExpression	clock ( )
>2044	ArgumentList	 
>2045	Callee	clock
>2046	Identifier	clock
>2047	Identifier	start
>2048	IdentifierDeclStatement	 
>2049	IdentifierDecl	end = clock ( )
>2050	AssignmentExpr	end = clock ( )
>2051	CallExpression	clock ( )
>2052	ArgumentList	 
>2053	Callee	clock
>2054	Identifier	clock
>2055	Identifier	end
>2056	Identifier	end
>2057	IdentifierDeclType	clock_t
>2058	IdentifierDeclStatement	 
>2059	IdentifierDecl	* tree = new ANNkd_tree ( pts , num_pts , 128 , 16 )
>2060	AssignmentExpr	* tree = new ANNkd_tree ( pts , num_pts , 128 , 16 )
>2061	Expression	pts , num_pts , 128 , 16
>2062	Expression	num_pts , 128 , 16
>2063	Expression	128 , 16
>2064	PrimaryExpression	16
>2065	PrimaryExpression	128
>2066	Identifier	num_pts
>2067	Identifier	pts
>2068	Identifier	tree
>2069	Identifier	tree
>2070	IdentifierDeclType	ANNkd_tree *
>2071	ForStatement	for ( int i = 0 ; i < num_pts ; i ++ )
>2072	CompoundStatement	 
>2073	ExpressionStatement	 
>2074	CallExpression	memcpy ( pts [ i ] , k2 + 128 * i , sizeof ( unsigned char ) * 128 )
>2075	ArgumentList	pts [ i ]
>2076	Argument	sizeof ( unsigned char ) * 128
>2077	MultiplicativeExpression	sizeof ( unsigned char ) * 128
>2078	PrimaryExpression	128
>2079	SizeofExpr	sizeof ( unsigned char )
>2080	SizeofOperand	unsigned char
>2081	Sizeof	sizeof
>2082	Argument	k2 + 128 * i
>2083	AdditiveExpression	k2 + 128 * i
>2084	MultiplicativeExpression	128 * i
>2085	Identifier	i
>2086	PrimaryExpression	128
>2087	Identifier	k2
>2088	Argument	pts [ i ]
>2089	ArrayIndexing	pts [ i ]
>2090	Identifier	i
>2091	Identifier	pts
>2092	Callee	memcpy
>2093	Identifier	memcpy
>2094	IncDecOp	 
>2095	IncDec	++
>2096	Identifier	i
>2097	Condition	 
>2098	RelationalExpression	i < num_pts
>2099	Identifier	num_pts
>2100	Identifier	i
>2101	ForInit	 
>2102	IdentifierDeclStatement	int i = 0 ;
>2103	IdentifierDecl	i = 0
>2104	AssignmentExpr	i = 0
>2105	PrimaryExpression	0
>2106	Identifier	i
>2107	Identifier	i
>2108	IdentifierDeclType	int
>2109	IdentifierDeclStatement	 
>2110	IdentifierDecl	pts = annAllocPts ( num_pts , 128 )
>2111	AssignmentExpr	pts = annAllocPts ( num_pts , 128 )
>2112	CallExpression	annAllocPts ( num_pts , 128 )
>2113	ArgumentList	num_pts
>2114	Argument	128
>2115	PrimaryExpression	128
>2116	Argument	num_pts
>2117	Identifier	num_pts
>2118	Callee	annAllocPts
>2119	Identifier	annAllocPts
>2120	Identifier	pts
>2121	Identifier	pts
>2122	IdentifierDeclType	ANNpointArray
>2123	IdentifierDeclStatement	 
>2124	IdentifierDecl	start = clock ( )
>2125	AssignmentExpr	start = clock ( )
>2126	CallExpression	clock ( )
>2127	ArgumentList	 
>2128	Callee	clock
>2129	Identifier	clock
>2130	Identifier	start
>2131	Identifier	start
>2132	IdentifierDeclType	clock_t
>2133	ExpressionStatement	 
>2134	AssignmentExpr	num_pts = num_keys2
>2135	Identifier	num_keys2
>2136	Identifier	num_pts
>2137	IdentifierDeclStatement	 
>2138	IdentifierDecl	matches
>2139	Identifier	matches
>2140	IdentifierDeclType	std 
>2141	IdentifierDeclStatement	 
>2142	IdentifierDecl	num_pts = 0
>2143	AssignmentExpr	num_pts = 0
>2144	PrimaryExpression	0
>2145	Identifier	num_pts
>2146	Identifier	num_pts
>2147	IdentifierDeclType	int
>2148	ExpressionStatement	 
>2149	CallExpression	annMaxPtsVisit ( max_pts_visit )
>2150	ArgumentList	max_pts_visit
>2151	Argument	max_pts_visit
>2152	Identifier	max_pts_visit
>2153	Callee	annMaxPtsVisit
>2154	Identifier	annMaxPtsVisit
<3=9,8,4
<4=5
<5=7,6
<9=42,12,10
<10=11
<12=23,13
<13=16,14
<14=15
<16=17
<17=21,18
<18=19
<19=20
<21=22
<23=24
<24=26,25
<26=40,27
<27=38,36,32,28
<28=29
<29=31,30
<32=33
<33=35,34
<36=37
<38=39
<40=41
<42=46,43
<43=45,44
<46=48,47
<58=64,63,59
<59=60
<60=62,61
<64=113,108,97,67,65
<65=66
<67=78,68
<68=71,69
<69=70
<71=72
<72=76,73
<73=74
<74=75
<76=77
<78=79
<79=81,80
<81=95,82
<82=93,91,87,83
<83=84
<84=86,85
<87=88
<88=90,89
<91=92
<93=94
<95=96
<97=98
<98=106,99
<99=104,102,100
<100=101
<102=103
<104=105
<106=107
<108=109
<109=112,111,110
<113=117,114
<114=116,115
<117=119,118
<130=136,135,131
<131=132
<132=134,133
<136=245,234,158,146,139,137
<137=138
<139=140
<140=144,141
<141=142
<142=143
<144=145
<146=147
<147=157,156,148
<148=155,149
<149=153,150
<150=151
<151=152
<153=154
<158=230,159
<159=225,214,200,160
<160=196,184,161
<161=162
<162=172,165,163
<163=164
<165=166
<166=170,167
<167=168
<168=169
<170=171
<172=173
<173=183,182,174
<174=181,175
<175=179,176
<176=177
<177=178
<179=180
<184=187,185
<185=186
<187=188
<188=194,189
<189=192,190
<190=191
<192=193
<194=195
<196=197
<197=199,198
<200=201
<201=213,212,202
<202=211,203
<203=209,204
<204=207,205
<205=206
<207=208
<209=210
<214=215
<215=223,216
<216=221,219,217
<217=218
<219=220
<221=222
<223=224
<225=226
<226=229,228,227
<230=231
<231=233,232
<234=235
<235=244,236
<236=242,237
<237=240,238
<238=239
<240=241
<242=243
<245=246
<246=248,247
<262=274,273,263
<263=270,267,264
<264=266,265
<267=269,268
<270=272,271
<274=391,380,300,284,277,275
<275=276
<277=278
<278=282,279
<279=280
<280=281
<282=283
<284=285
<285=299,298,286
<286=297,287
<287=295,288
<288=293,291,289
<289=290
<291=292
<293=294
<295=296
<300=376,301
<301=371,360,346,302
<302=342,330,303
<303=304
<304=314,307,305
<305=306
<307=308
<308=312,309
<309=310
<310=311
<312=313
<314=315
<315=329,328,316
<316=327,317
<317=325,318
<318=323,321,319
<319=320
<321=322
<323=324
<325=326
<330=333,331
<331=332
<333=334
<334=340,335
<335=338,336
<336=337
<338=339
<340=341
<342=343
<343=345,344
<346=347
<347=359,358,348
<348=357,349
<349=355,350
<350=353,351
<351=352
<353=354
<355=356
<360=361
<361=369,362
<362=367,365,363
<363=364
<365=366
<367=368
<369=370
<371=372
<372=375,374,373
<376=377
<377=379,378
<380=381
<381=390,382
<382=388,383
<383=386,384
<384=385
<386=387
<388=389
<391=392
<392=394,393
<410=416,415,411
<411=412
<412=414,413
<416=729,725,721,692,661,654,620,616,602,443,419,417
<417=418
<419=430,420
<420=423,421
<421=422
<423=424
<424=428,425
<425=426
<426=427
<428=429
<430=431
<431=433,432
<433=441,434
<434=439,435
<435=436
<436=438,437
<439=440
<441=442
<443=598,594,591,444
<444=584,571,529,525,462,445
<445=446
<446=458,447
<447=448
<448=449
<449=457,450
<450=456,451
<451=455,452
<452=454,453
<458=459
<459=461,460
<462=521,517,514,463
<463=476,468,464
<464=465
<465=467,466
<468=469
<469=473,470
<470=472,471
<473=475,474
<476=487,477
<477=480,478
<478=479
<480=481
<481=485,482
<482=483
<483=484
<485=486
<487=488
<488=496,489
<489=493,490
<490=492,491
<493=495,494
<496=498,497
<498=512,499
<499=510,508,504,500
<500=501
<501=503,502
<504=505
<505=507,506
<508=509
<510=511
<512=513
<514=516,515
<517=518
<518=520,519
<521=522
<522=524,523
<525=526
<526=528,527
<529=540,530
<530=533,531
<531=532
<533=534
<534=538,535
<535=536
<536=537
<538=539
<540=541
<541=543,542
<543=569,544
<544=567,565,561,557,553,549,545
<545=546
<546=548,547
<549=550
<550=552,551
<553=554
<554=556,555
<557=558
<558=560,559
<561=562
<562=564,563
<565=566
<567=568
<569=570
<571=581,578,575,572
<572=574,573
<575=577,576
<578=580,579
<581=583,582
<584=585
<585=590,589,586
<586=588,587
<591=593,592
<594=595
<595=597,596
<598=599
<599=601,600
<602=612,603
<603=611,610,609,608,607,606,604
<604=605
<612=613
<613=615,614
<616=617
<617=619,618
<620=631,621
<621=624,622
<622=623
<624=625
<625=629,626
<626=627
<627=628
<629=630
<631=632
<632=634,633
<634=652,635
<635=650,648,644,640,636
<636=637
<637=639,638
<640=641
<641=643,642
<644=645
<645=647,646
<648=649
<650=651
<652=653
<654=655
<655=660,659,656
<656=658,657
<661=662
<662=691,690,663
<663=689,664
<664=688,665
<665=686,666
<666=684,680,678,676,669,667
<667=668
<669=670
<670=674,671
<671=672
<672=673
<674=675
<676=677
<678=679
<680=681
<681=683,682
<684=685
<686=687
<692=703,693
<693=696,694
<694=695
<696=697
<697=701,698
<698=699
<699=700
<701=702
<703=704
<704=706,705
<706=719,707
<707=712,708
<708=709
<709=711,710
<712=713
<713=717,714
<714=715
<715=716
<717=718
<719=720
<721=722
<722=724,723
<725=726
<726=728,727
<729=745,742,739,736,733,730
<730=732,731
<733=735,734
<736=738,737
<739=741,740
<742=744,743
<745=747,746
<787=799,798,788
<788=795,792,789
<789=791,790
<792=794,793
<795=797,796
<799=1169,1165,1135,1120,1110,1099,1090,802,800
<800=801
<802=1086,1082,1079,803
<803=1066,1028,982,977,804
<804=969,965,962,805
<805=951,806
<806=947,854,807
<807=808
<808=813,809
<809=810
<810=812,811
<813=814
<814=852,815
<815=850,848,844,840,836,832,828,824,820,816
<816=817
<817=819,818
<820=821
<821=823,822
<824=825
<825=827,826
<828=829
<829=831,830
<832=833
<833=835,834
<836=837
<837=839,838
<840=841
<841=843,842
<844=845
<845=847,846
<848=849
<850=851
<852=853
<854=946,945,944,943,942,941,940,939,938,937,936,935,934,933,932,931,930,929,928,927,926,925,924,923,922,921,920,919,918,917,916,915,914,913,912,911,910,909,908,855,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907
<855=856
<856=858,857
<947=948
<948=950,949
<951=952
<952=960,953
<953=958,956,954
<954=955
<956=957
<958=959
<960=961
<962=964,963
<965=966
<966=968,967
<969=970
<970=971
<971=976,975,972
<972=974,973
<977=978
<978=981,980,979
<982=1024,983
<983=1014,1004,994,984
<984=985
<985=987,986
<987=989,988
<989=991,990
<991=993,992
<994=995
<995=997,996
<997=999,998
<999=1001,1000
<1001=1003,1002
<1004=1005
<1005=1007,1006
<1007=1009,1008
<1009=1011,1010
<1011=1013,1012
<1014=1015
<1015=1017,1016
<1017=1019,1018
<1019=1021,1020
<1021=1023,1022
<1024=1025
<1025=1027,1026
<1028=1039,1029
<1029=1032,1030
<1030=1031
<1032=1033
<1033=1037,1034
<1034=1035
<1035=1036
<1037=1038
<1039=1040
<1040=1042,1041
<1042=1064,1043
<1043=1062,1060,1056,1052,1048,1044
<1044=1045
<1045=1047,1046
<1048=1049
<1049=1051,1050
<1052=1053
<1053=1055,1054
<1056=1057
<1057=1059,1058
<1060=1061
<1062=1063
<1064=1065
<1066=1076,1073,1070,1067
<1067=1069,1068
<1070=1072,1071
<1073=1075,1074
<1076=1078,1077
<1079=1081,1080
<1082=1083
<1083=1085,1084
<1086=1087
<1087=1089,1088
<1090=1091
<1091=1098,1097,1092
<1092=1096,1093
<1093=1095,1094
<1099=1106,1100
<1100=1101
<1101=1103,1102
<1103=1105,1104
<1106=1107
<1107=1109,1108
<1110=1111
<1111=1117,1112
<1112=1114,1113
<1114=1116,1115
<1117=1119,1118
<1120=1131,1121
<1121=1124,1122
<1122=1123
<1124=1125
<1125=1129,1126
<1126=1127
<1127=1128
<1129=1130
<1131=1132
<1132=1134,1133
<1135=1146,1136
<1136=1139,1137
<1137=1138
<1139=1140
<1140=1144,1141
<1141=1142
<1142=1143
<1144=1145
<1146=1147
<1147=1149,1148
<1149=1163,1150
<1150=1161,1159,1155,1151
<1151=1152
<1152=1154,1153
<1155=1156
<1156=1158,1157
<1159=1160
<1161=1162
<1163=1164
<1165=1166
<1166=1168,1167
<1169=1176,1173,1170
<1170=1172,1171
<1173=1175,1174
<1176=1178,1177
<1212=1224,1223,1213
<1213=1220,1217,1214
<1214=1216,1215
<1217=1219,1218
<1220=1222,1221
<1224=1650,1646,1641,1630,1600,1585,1575,1564,1555,1242,1227,1225
<1225=1226
<1227=1228
<1228=1240,1229
<1229=1230
<1230=1231
<1231=1239,1232
<1232=1236,1233
<1233=1235,1234
<1236=1238,1237
<1240=1241
<1242=1551,1547,1544,1243
<1243=1531,1526,1515,1477,1431,1244
<1244=1423,1419,1416,1245
<1245=1400,1391,1246
<1246=1387,1294,1247
<1247=1248
<1248=1253,1249
<1249=1250
<1250=1252,1251
<1253=1254
<1254=1292,1255
<1255=1290,1288,1284,1280,1276,1272,1268,1264,1260,1256
<1256=1257
<1257=1259,1258
<1260=1261
<1261=1263,1262
<1264=1265
<1265=1267,1266
<1268=1269
<1269=1271,1270
<1272=1273
<1273=1275,1274
<1276=1277
<1277=1279,1278
<1280=1281
<1281=1283,1282
<1284=1285
<1285=1287,1286
<1288=1289
<1290=1291
<1292=1293
<1294=1386,1385,1384,1383,1382,1381,1380,1379,1378,1377,1376,1375,1374,1373,1372,1371,1370,1369,1368,1367,1366,1365,1364,1363,1362,1361,1360,1359,1358,1357,1356,1355,1354,1353,1352,1351,1350,1349,1348,1295,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347
<1295=1296
<1296=1298,1297
<1387=1388
<1388=1390,1389
<1391=1392
<1392=1398,1393
<1393=1394
<1394=1395
<1395=1397,1396
<1398=1399
<1400=1401
<1401=1415,1414,1402
<1402=1413,1403
<1403=1411,1404
<1404=1409,1407,1405
<1405=1406
<1407=1408
<1409=1410
<1411=1412
<1416=1418,1417
<1419=1420
<1420=1422,1421
<1423=1424
<1424=1425
<1425=1430,1429,1426
<1426=1428,1427
<1431=1473,1432
<1432=1463,1453,1443,1433
<1433=1434
<1434=1436,1435
<1436=1438,1437
<1438=1440,1439
<1440=1442,1441
<1443=1444
<1444=1446,1445
<1446=1448,1447
<1448=1450,1449
<1450=1452,1451
<1453=1454
<1454=1456,1455
<1456=1458,1457
<1458=1460,1459
<1460=1462,1461
<1463=1464
<1464=1466,1465
<1466=1468,1467
<1468=1470,1469
<1470=1472,1471
<1473=1474
<1474=1476,1475
<1477=1488,1478
<1478=1481,1479
<1479=1480
<1481=1482
<1482=1486,1483
<1483=1484
<1484=1485
<1486=1487
<1488=1489
<1489=1491,1490
<1491=1513,1492
<1492=1511,1509,1505,1501,1497,1493
<1493=1494
<1494=1496,1495
<1497=1498
<1498=1500,1499
<1501=1502
<1502=1504,1503
<1505=1506
<1506=1508,1507
<1509=1510
<1511=1512
<1513=1514
<1515=1516
<1516=1524,1517
<1517=1522,1520,1518
<1518=1519
<1520=1521
<1522=1523
<1524=1525
<1526=1527
<1527=1530,1529,1528
<1531=1541,1538,1535,1532
<1532=1534,1533
<1535=1537,1536
<1538=1540,1539
<1541=1543,1542
<1544=1546,1545
<1547=1548
<1548=1550,1549
<1551=1552
<1552=1554,1553
<1555=1556
<1556=1563,1562,1557
<1557=1561,1558
<1558=1560,1559
<1564=1571,1565
<1565=1566
<1566=1568,1567
<1568=1570,1569
<1571=1572
<1572=1574,1573
<1575=1576
<1576=1582,1577
<1577=1579,1578
<1579=1581,1580
<1582=1584,1583
<1585=1596,1586
<1586=1589,1587
<1587=1588
<1589=1590
<1590=1594,1591
<1591=1592
<1592=1593
<1594=1595
<1596=1597
<1597=1599,1598
<1600=1611,1601
<1601=1604,1602
<1602=1603
<1604=1605
<1605=1609,1606
<1606=1607
<1607=1608
<1609=1610
<1611=1612
<1612=1614,1613
<1614=1628,1615
<1615=1626,1624,1620,1616
<1616=1617
<1617=1619,1618
<1620=1621
<1621=1623,1622
<1624=1625
<1626=1627
<1628=1629
<1630=1631
<1631=1639,1632
<1632=1637,1635,1633
<1633=1634
<1635=1636
<1637=1638
<1639=1640
<1641=1642
<1642=1645,1644,1643
<1646=1647
<1647=1649,1648
<1650=1657,1654,1651
<1651=1653,1652
<1654=1656,1655
<1657=1659,1658
<1697=1706,1705,1698
<1698=1702,1699
<1699=1701,1700
<1702=1704,1703
<1706=1760,1722,1709,1707
<1707=1708
<1709=1710
<1710=1721,1720,1711
<1711=1719,1712
<1712=1718,1713
<1713=1717,1714
<1714=1716,1715
<1722=1752,1748,1745,1723
<1723=1724
<1724=1725
<1725=1743,1726
<1726=1739,1733,1727
<1727=1728
<1728=1730,1729
<1730=1732,1731
<1733=1734
<1734=1738,1735
<1735=1737,1736
<1739=1740
<1740=1742,1741
<1743=1744
<1745=1747,1746
<1748=1749
<1749=1751,1750
<1752=1753
<1753=1754
<1754=1759,1758,1755
<1755=1757,1756
<1760=1761
<1761=1773,1772,1762
<1762=1771,1763
<1763=1769,1764
<1764=1767,1765
<1765=1766
<1767=1768
<1769=1770
<1785=1803,1802,1786
<1786=1799,1796,1793,1790,1787
<1787=1789,1788
<1790=1792,1791
<1793=1795,1794
<1796=1798,1797
<1799=1801,1800
<1803=1894,1890,1806,1804
<1804=1805
<1806=1882,1878,1875,1807
<1807=1870,1865,1844,1808
<1808=1828,1809
<1809=1810
<1810=1811
<1811=1824,1812
<1812=1813
<1813=1814
<1814=1822,1815
<1815=1820,1816
<1816=1817
<1817=1819,1818
<1820=1821
<1822=1823
<1824=1825
<1825=1827,1826
<1828=1829
<1829=1839,1830
<1830=1838,1831
<1831=1837,1832
<1832=1836,1833
<1833=1835,1834
<1839=1843,1840
<1840=1842,1841
<1844=1845
<1845=1861,1846
<1846=1855,1853,1851,1849,1847
<1847=1848
<1849=1850
<1851=1852
<1853=1854
<1855=1856
<1856=1860,1857
<1857=1859,1858
<1861=1862
<1862=1864,1863
<1865=1866
<1866=1869,1868,1867
<1870=1871
<1871=1874,1873,1872
<1875=1877,1876
<1878=1879
<1879=1881,1880
<1882=1883
<1883=1884
<1884=1889,1888,1885
<1885=1887,1886
<1890=1891
<1891=1893,1892
<1894=1895
<1895=1899,1896
<1896=1897
<1897=1898
<1899=1900
<1916=1937,1936,1917
<1917=1933,1930,1927,1924,1921,1918
<1918=1920,1919
<1921=1923,1922
<1924=1926,1925
<1927=1929,1928
<1930=1932,1931
<1933=1935,1934
<1937=2148,2141,2137,2133,2123,2109,2071,2058,2048,2041,1957,1950,1943,1942,1940,1938
<1938=1939
<1940=1941
<1943=1944
<1944=1948,1945
<1945=1946
<1946=1947
<1948=1949
<1950=1951
<1951=1956,1952
<1952=1954,1953
<1954=1955
<1957=2033,2029,2026,1958
<1958=2021,2016,1995,1959
<1959=1979,1960
<1960=1961
<1961=1962
<1962=1975,1963
<1963=1964
<1964=1965
<1965=1973,1966
<1966=1971,1967
<1967=1968
<1968=1970,1969
<1971=1972
<1973=1974
<1975=1976
<1976=1978,1977
<1979=1980
<1980=1990,1981
<1981=1989,1982
<1982=1988,1983
<1983=1987,1984
<1984=1986,1985
<1990=1994,1991
<1991=1993,1992
<1995=1996
<1996=2012,1997
<1997=2006,2004,2002,2000,1998
<1998=1999
<2000=2001
<2002=2003
<2004=2005
<2006=2007
<2007=2011,2008
<2008=2010,2009
<2012=2013
<2013=2015,2014
<2016=2017
<2017=2020,2019,2018
<2021=2022
<2022=2025,2024,2023
<2026=2028,2027
<2029=2030
<2030=2032,2031
<2033=2034
<2034=2035
<2035=2040,2039,2036
<2036=2038,2037
<2041=2042
<2042=2047,2043
<2043=2045,2044
<2045=2046
<2048=2049
<2049=2057,2056,2050
<2050=2055,2051
<2051=2053,2052
<2053=2054
<2058=2059
<2059=2070,2069,2060
<2060=2068,2061
<2061=2067,2062
<2062=2066,2063
<2063=2065,2064
<2071=2101,2097,2094,2072
<2072=2073
<2073=2074
<2074=2092,2075
<2075=2088,2082,2076
<2076=2077
<2077=2079,2078
<2079=2081,2080
<2082=2083
<2083=2087,2084
<2084=2086,2085
<2088=2089
<2089=2091,2090
<2092=2093
<2094=2096,2095
<2097=2098
<2098=2100,2099
<2101=2102
<2102=2103
<2103=2108,2107,2104
<2104=2106,2105
<2109=2110
<2110=2122,2121,2111
<2111=2120,2112
<2112=2118,2113
<2113=2116,2114
<2114=2115
<2116=2117
<2118=2119
<2123=2124
<2124=2132,2131,2125
<2125=2130,2126
<2126=2128,2127
<2128=2129
<2133=2134
<2134=2136,2135
<2137=2138
<2138=2140,2139
<2141=2142
<2142=2147,2146,2143
<2143=2145,2144
<2148=2149
<2149=2153,2150
<2150=2151
<2151=2152
<2153=2154
