>7	FunctionDef	cs_sorted_multiply (const cs * a , const cs * b)
>8	ParameterList	const cs * a , const cs * b
>9	Parameter	 
>10	Identifier	b
>11	ParameterType	const cs *
>12	Parameter	 
>13	Identifier	a
>14	ParameterType	const cs *
>15	ReturnType	cs *
>16	CompoundStatement	 
>17	ReturnStatement	 
>18	Identifier	C
>19	ExpressionStatement	 
>20	CallExpression	cs_spfree ( D )
>21	ArgumentList	D
>22	Argument	D
>23	Identifier	D
>24	Callee	cs_spfree
>25	Identifier	cs_spfree
>26	IdentifierDeclStatement	 
>27	IdentifierDecl	* C = cs_transpose ( D , 1 )
>28	AssignmentExpr	* C = cs_transpose ( D , 1 )
>29	CallExpression	cs_transpose ( D , 1 )
>30	ArgumentList	D
>31	Argument	1
>32	PrimaryExpression	1
>33	Argument	D
>34	Identifier	D
>35	Callee	cs_transpose
>36	Identifier	cs_transpose
>37	Identifier	C
>38	Identifier	C
>39	IdentifierDeclType	cs *
>40	ExpressionStatement	 
>41	CallExpression	cs_dropzeros ( D )
>42	ArgumentList	D
>43	Argument	D
>44	Identifier	D
>45	Callee	cs_dropzeros
>46	Identifier	cs_dropzeros
>47	ExpressionStatement	 
>48	CallExpression	cs_spfree ( B )
>49	ArgumentList	B
>50	Argument	B
>51	Identifier	B
>52	Callee	cs_spfree
>53	Identifier	cs_spfree
>54	ExpressionStatement	 
>55	CallExpression	cs_spfree ( A )
>56	ArgumentList	A
>57	Argument	A
>58	Identifier	A
>59	Callee	cs_spfree
>60	Identifier	cs_spfree
>61	IdentifierDeclStatement	 
>62	IdentifierDecl	* D = cs_multiply ( B , A )
>63	AssignmentExpr	* D = cs_multiply ( B , A )
>64	CallExpression	cs_multiply ( B , A )
>65	ArgumentList	B
>66	Argument	A
>67	Identifier	A
>68	Argument	B
>69	Identifier	B
>70	Callee	cs_multiply
>71	Identifier	cs_multiply
>72	Identifier	D
>73	Identifier	D
>74	IdentifierDeclType	cs *
>75	IdentifierDeclStatement	 
>76	IdentifierDecl	* B = cs_transpose ( b , 1 )
>77	AssignmentExpr	* B = cs_transpose ( b , 1 )
>78	CallExpression	cs_transpose ( b , 1 )
>79	ArgumentList	b
>80	Argument	1
>81	PrimaryExpression	1
>82	Argument	b
>83	Identifier	b
>84	Callee	cs_transpose
>85	Identifier	cs_transpose
>86	Identifier	B
>87	Identifier	B
>88	IdentifierDeclType	cs *
>89	IdentifierDeclStatement	 
>90	IdentifierDecl	* A = cs_transpose ( a , 1 )
>91	AssignmentExpr	* A = cs_transpose ( a , 1 )
>92	CallExpression	cs_transpose ( a , 1 )
>93	ArgumentList	a
>94	Argument	1
>95	PrimaryExpression	1
>96	Argument	a
>97	Identifier	a
>98	Callee	cs_transpose
>99	Identifier	cs_transpose
>100	Identifier	A
>101	Identifier	A
>102	IdentifierDeclType	cs *
>114	FunctionDef	main (int argc , char * argv [ ])
>115	ParameterList	int argc , char * argv [ ]
>116	Parameter	 
>117	Identifier	argv
>118	ParameterType	char * [ ]
>119	Parameter	 
>120	Identifier	argc
>121	ParameterType	int
>122	ReturnType	int
>123	CompoundStatement	 
>124	ReturnStatement	 
>125	PrimaryExpression	0
>126	ForStatement	for ( float density = DENSITY ; density >= MINDENSITY ; density *= 0.5 )
>127	CompoundStatement	 
>128	ExpressionStatement	 
>129	ShiftExpression	std 
>130	PrimaryExpression	\"\n\n\"
>131	Identifier	std 
>132	CompoundStatement	 
>133	ExpressionStatement	 
>134	ShiftExpression	std 
>135	ShiftExpression	\"   a' * v
>136	ShiftExpression	timer . value ( ) << endl
>137	Identifier	endl
>138	CallExpression	timer . value ( )
>139	ArgumentList	 
>140	Callee	timer . value
>141	MemberAccess	timer . value
>142	Identifier	value
>143	Identifier	timer
>144	PrimaryExpression	\"   a' * v
>145	Identifier	std 
>146	ExpressionStatement	 
>147	CallExpression	timer . stop ( )
>148	ArgumentList	 
>149	Callee	timer . stop
>150	MemberAccess	timer . stop
>151	Identifier	stop
>152	Identifier	timer
>153	ForStatement	for ( int k = 0 ; k < REPEAT ; ++ k )
>154	ExpressionStatement	 
>155	AssignmentExpr	mtlV2 = trans ( m1 ) * mtlV1
>156	MultiplicativeExpression	trans ( m1 ) * mtlV1
>157	Identifier	mtlV1
>158	CallExpression	trans ( m1 )
>159	ArgumentList	m1
>160	Argument	m1
>161	Identifier	m1
>162	Callee	trans
>163	Identifier	trans
>164	Identifier	mtlV2
>165	UnaryExpression	 
>166	Identifier	k
>167	IncDec	++
>168	Condition	 
>169	RelationalExpression	k < REPEAT
>170	Identifier	REPEAT
>171	Identifier	k
>172	ForInit	 
>173	IdentifierDeclStatement	int k = 0 ;
>174	IdentifierDecl	k = 0
>175	AssignmentExpr	k = 0
>176	PrimaryExpression	0
>177	Identifier	k
>178	Identifier	k
>179	IdentifierDeclType	int
>180	ExpressionStatement	 
>181	CallExpression	timer . start ( )
>182	ArgumentList	 
>183	Callee	timer . start
>184	MemberAccess	timer . start
>185	Identifier	start
>186	Identifier	timer
>187	ExpressionStatement	 
>188	CallExpression	timer . reset ( )
>189	ArgumentList	 
>190	Callee	timer . reset
>191	MemberAccess	timer . reset
>192	Identifier	reset
>193	Identifier	timer
>194	ExpressionStatement	 
>195	ShiftExpression	std 
>196	ShiftExpression	\"   a * v
>197	ShiftExpression	timer . value ( ) << endl
>198	Identifier	endl
>199	CallExpression	timer . value ( )
>200	ArgumentList	 
>201	Callee	timer . value
>202	MemberAccess	timer . value
>203	Identifier	value
>204	Identifier	timer
>205	PrimaryExpression	\"   a * v
>206	Identifier	std 
>207	ExpressionStatement	 
>208	CallExpression	timer . stop ( )
>209	ArgumentList	 
>210	Callee	timer . stop
>211	MemberAccess	timer . stop
>212	Identifier	stop
>213	Identifier	timer
>214	ForStatement	for ( int k = 0 ; k < REPEAT ; ++ k )
>215	ExpressionStatement	 
>216	AssignmentExpr	mtlV2 = m1 * mtlV1
>217	MultiplicativeExpression	m1 * mtlV1
>218	Identifier	mtlV1
>219	Identifier	m1
>220	Identifier	mtlV2
>221	UnaryExpression	 
>222	Identifier	k
>223	IncDec	++
>224	Condition	 
>225	RelationalExpression	k < REPEAT
>226	Identifier	REPEAT
>227	Identifier	k
>228	ForInit	 
>229	IdentifierDeclStatement	int k = 0 ;
>230	IdentifierDecl	k = 0
>231	AssignmentExpr	k = 0
>232	PrimaryExpression	0
>233	Identifier	k
>234	Identifier	k
>235	IdentifierDeclType	int
>236	ExpressionStatement	 
>237	CallExpression	timer . start ( )
>238	ArgumentList	 
>239	Callee	timer . start
>240	MemberAccess	timer . start
>241	Identifier	start
>242	Identifier	timer
>243	ExpressionStatement	 
>244	CallExpression	timer . reset ( )
>245	ArgumentList	 
>246	Callee	timer . reset
>247	MemberAccess	timer . reset
>248	Identifier	reset
>249	Identifier	timer
>250	IdentifierDeclStatement	 
>251	IdentifierDecl	mtlV2 ( cols , 1.0 )
>252	Expression	cols , 1.0
>253	PrimaryExpression	1.0
>254	Identifier	cols
>255	Identifier	mtlV2
>256	IdentifierDeclType	mtl 
>257	IdentifierDeclStatement	 
>258	IdentifierDecl	mtlV1 ( cols , 1.0 )
>259	Expression	cols , 1.0
>260	PrimaryExpression	1.0
>261	Identifier	cols
>262	Identifier	mtlV1
>263	IdentifierDeclType	mtl 
>264	ExpressionStatement	 
>265	CallExpression	eiToMtl ( sm1 , m1 )
>266	ArgumentList	sm1
>267	Argument	m1
>268	Identifier	m1
>269	Argument	sm1
>270	Identifier	sm1
>271	Callee	eiToMtl
>272	Identifier	eiToMtl
>273	IdentifierDeclStatement	 
>274	IdentifierDecl	m1 ( rows , cols )
>275	Expression	rows , cols
>276	Identifier	cols
>277	Identifier	rows
>278	Identifier	m1
>279	IdentifierDeclType	MtlSparse
>280	ExpressionStatement	 
>281	ShiftExpression	std 
>282	ShiftExpression	\"MTL4\t\" << density * 100 << \"%\n\"
>283	ShiftExpression	density * 100 << \"%\n\"
>284	PrimaryExpression	\"%\n\"
>285	MultiplicativeExpression	density * 100
>286	PrimaryExpression	100
>287	Identifier	density
>288	PrimaryExpression	\"MTL4\t\"
>289	Identifier	std 
>290	CompoundStatement	 
>291	ExpressionStatement	 
>292	ShiftExpression	std 
>293	ShiftExpression	\"   a * v
>294	ShiftExpression	timer . value ( ) << endl
>295	Identifier	endl
>296	CallExpression	timer . value ( )
>297	ArgumentList	 
>298	Callee	timer . value
>299	MemberAccess	timer . value
>300	Identifier	value
>301	Identifier	timer
>302	PrimaryExpression	\"   a * v
>303	Identifier	std 
>304	Statement	 
>305	ExpressionStatement	 
>306	AssignmentExpr	uv2 = boost 
>307	CallExpression	boost 
>308	ArgumentList	m1
>309	Argument	uv1
>310	Identifier	uv1
>311	Argument	m1
>312	Identifier	m1
>313	Callee	boost 
>314	Identifier	boost 
>315	Identifier	uv2
>316	Statement	 
>317	Statement	 
>318	ExpressionStatement	 
>319	CallExpression	eiToUblasVec ( v2 , uv2 )
>320	ArgumentList	v2
>321	Argument	uv2
>322	Identifier	uv2
>323	Argument	v2
>324	Identifier	v2
>325	Callee	eiToUblasVec
>326	Identifier	eiToUblasVec
>327	ExpressionStatement	 
>328	CallExpression	eiToUblasVec ( v1 , uv1 )
>329	ArgumentList	v1
>330	Argument	uv1
>331	Identifier	uv1
>332	Argument	v1
>333	Identifier	v1
>334	Callee	eiToUblasVec
>335	Identifier	eiToUblasVec
>336	IdentifierDeclStatement	 
>337	IdentifierDecl	uv2
>338	Identifier	uv2
>339	IdentifierDeclType	boost 
>340	IdentifierDecl	uv1
>341	Identifier	uv1
>342	IdentifierDeclType	boost 
>343	ExpressionStatement	 
>344	CallExpression	eiToUblas ( sm1 , m1 )
>345	ArgumentList	sm1
>346	Argument	m1
>347	Identifier	m1
>348	Argument	sm1
>349	Identifier	sm1
>350	Callee	eiToUblas
>351	Identifier	eiToUblas
>352	IdentifierDeclStatement	 
>353	IdentifierDecl	m1 ( rows , cols )
>354	Expression	rows , cols
>355	Identifier	cols
>356	Identifier	rows
>357	Identifier	m1
>358	IdentifierDeclType	UBlasSparse
>359	ExpressionStatement	 
>360	ShiftExpression	std 
>361	ShiftExpression	\"ublas sparse\t\" << density * 100 << \"%\n\"
>362	ShiftExpression	density * 100 << \"%\n\"
>363	PrimaryExpression	\"%\n\"
>364	MultiplicativeExpression	density * 100
>365	PrimaryExpression	100
>366	Identifier	density
>367	PrimaryExpression	\"ublas sparse\t\"
>368	Identifier	std 
>369	CompoundStatement	 
>370	ExpressionStatement	 
>371	ShiftExpression	std 
>372	ShiftExpression	\"   a' * v
>373	ShiftExpression	timer . value ( ) << endl
>374	Identifier	endl
>375	CallExpression	timer . value ( )
>376	ArgumentList	 
>377	Callee	timer . value
>378	MemberAccess	timer . value
>379	Identifier	value
>380	Identifier	timer
>381	PrimaryExpression	\"   a' * v
>382	Identifier	std 
>383	Statement	 
>384	ExpressionStatement	 
>385	CallExpression	gmm 
>386	ArgumentList	gmm 
>387	Argument	gmmV2
>388	Identifier	gmmV2
>389	Argument	gmmV1
>390	Identifier	gmmV1
>391	Argument	gmm 
>392	CallExpression	gmm 
>393	ArgumentList	m1
>394	Argument	m1
>395	Identifier	m1
>396	Callee	gmm 
>397	Identifier	gmm 
>398	Callee	gmm 
>399	Identifier	gmm 
>400	Statement	 
>401	Statement	 
>402	ExpressionStatement	 
>403	ShiftExpression	std 
>404	ShiftExpression	\"   a * v
>405	ShiftExpression	timer . value ( ) << endl
>406	Identifier	endl
>407	CallExpression	timer . value ( )
>408	ArgumentList	 
>409	Callee	timer . value
>410	MemberAccess	timer . value
>411	Identifier	value
>412	Identifier	timer
>413	PrimaryExpression	\"   a * v
>414	Identifier	std 
>415	Statement	 
>416	ExpressionStatement	 
>417	CallExpression	asm ( \"#myy\" )
>418	ArgumentList	\"#myy\"
>419	Argument	\"#myy\"
>420	PrimaryExpression	\"#myy\"
>421	Callee	asm
>422	Identifier	asm
>423	ExpressionStatement	 
>424	CallExpression	gmm 
>425	ArgumentList	m1
>426	Argument	gmmV2
>427	Identifier	gmmV2
>428	Argument	gmmV1
>429	Identifier	gmmV1
>430	Argument	m1
>431	Identifier	m1
>432	Callee	gmm 
>433	Identifier	gmm 
>434	ExpressionStatement	 
>435	CallExpression	asm ( \"#myx\" )
>436	ArgumentList	\"#myx\"
>437	Argument	\"#myx\"
>438	PrimaryExpression	\"#myx\"
>439	Callee	asm
>440	Identifier	asm
>441	Statement	 
>442	Statement	 
>443	ExpressionStatement	 
>444	AssignmentExpr	( & gmmV2 [ 0 ] , cols ) = v2
>445	Identifier	v2
>446	Expression	& gmmV2 [ 0 ] , cols
>447	Identifier	cols
>448	UnaryOp	& gmmV2 [ 0 ]
>449	ArrayIndexing	gmmV2 [ 0 ]
>450	PrimaryExpression	0
>451	Identifier	gmmV2
>452	UnaryOperator	&
>453	Statement	 
>454	Statement	 
>455	Statement	 
>456	Statement	 
>457	Statement	 
>458	Statement	 
>459	Statement	 
>460	Statement	 
>461	Statement	 
>462	Statement	 
>463	Statement	 
>464	ExpressionStatement	 
>465	AssignmentExpr	( & gmmV1 [ 0 ] , cols ) = v1
>466	Identifier	v1
>467	Expression	& gmmV1 [ 0 ] , cols
>468	Identifier	cols
>469	UnaryOp	& gmmV1 [ 0 ]
>470	ArrayIndexing	gmmV1 [ 0 ]
>471	PrimaryExpression	0
>472	Identifier	gmmV1
>473	UnaryOperator	&
>474	Statement	 
>475	Statement	 
>476	Statement	 
>477	Statement	 
>478	Statement	 
>479	Statement	 
>480	Statement	 
>481	Statement	 
>482	Statement	 
>483	Statement	 
>484	Statement	 
>485	IdentifierDeclStatement	 
>486	IdentifierDecl	gmmV2 ( cols )
>487	Identifier	cols
>488	Identifier	gmmV2
>489	IdentifierDeclType	std 
>490	IdentifierDecl	gmmV1 ( cols )
>491	Identifier	cols
>492	Identifier	gmmV1
>493	IdentifierDeclType	std 
>494	ExpressionStatement	 
>495	CallExpression	eiToGmm ( sm1 , m1 )
>496	ArgumentList	sm1
>497	Argument	m1
>498	Identifier	m1
>499	Argument	sm1
>500	Identifier	sm1
>501	Callee	eiToGmm
>502	Identifier	eiToGmm
>503	IdentifierDeclStatement	 
>504	IdentifierDecl	m1 ( rows , cols )
>505	Expression	rows , cols
>506	Identifier	cols
>507	Identifier	rows
>508	Identifier	m1
>509	IdentifierDeclType	GmmSparse
>510	ExpressionStatement	 
>511	ShiftExpression	std 
>512	ShiftExpression	\"GMM++ sparse\t\" << density * 100 << \"%\n\"
>513	ShiftExpression	density * 100 << \"%\n\"
>514	PrimaryExpression	\"%\n\"
>515	MultiplicativeExpression	density * 100
>516	PrimaryExpression	100
>517	Identifier	density
>518	PrimaryExpression	\"GMM++ sparse\t\"
>519	Identifier	std 
>520	CompoundStatement	 
>521	ExpressionStatement	 
>522	ShiftExpression	std 
>523	ShiftExpression	\"   a' * v
>524	ShiftExpression	timer . best ( ) / REPEAT << endl
>525	Identifier	endl
>526	MultiplicativeExpression	timer . best ( ) / REPEAT
>527	Identifier	REPEAT
>528	CallExpression	timer . best ( )
>529	ArgumentList	 
>530	Callee	timer . best
>531	MemberAccess	timer . best
>532	Identifier	best
>533	Identifier	timer
>534	PrimaryExpression	\"   a' * v
>535	Identifier	std 
>536	Statement	 
>537	CompoundStatement	 
>538	ExpressionStatement	 
>539	CallExpression	asm ( \"#myb\" )
>540	ArgumentList	\"#myb\"
>541	Argument	\"#myb\"
>542	PrimaryExpression	\"#myb\"
>543	Callee	asm
>544	Identifier	asm
>545	ExpressionStatement	 
>546	AssignmentExpr	v2 = sm1 . transpose ( ) * v1
>547	MultiplicativeExpression	sm1 . transpose ( ) * v1
>548	Identifier	v1
>549	CallExpression	sm1 . transpose ( )
>550	ArgumentList	 
>551	Callee	sm1 . transpose
>552	MemberAccess	sm1 . transpose
>553	Identifier	transpose
>554	Identifier	sm1
>555	Identifier	v2
>556	ExpressionStatement	 
>557	CallExpression	asm ( \"#mya\" )
>558	ArgumentList	\"#mya\"
>559	Argument	\"#mya\"
>560	PrimaryExpression	\"#mya\"
>561	Callee	asm
>562	Identifier	asm
>563	Statement	 
>564	Statement	 
>565	ExpressionStatement	 
>566	ShiftExpression	std 
>567	ShiftExpression	\"   a * v
>568	ShiftExpression	timer . best ( ) / REPEAT << \"  \" << double ( REPEAT ) / timer . best ( REAL_TIMER ) << \" * / sec \" << \
>569	ShiftExpression	\"  \" << double ( REPEAT ) / timer . best ( REAL_TIMER ) << \" * / sec \" << endl
>570	ShiftExpression	double ( REPEAT ) / timer . best ( REAL_TIMER ) << \" * / sec \" << endl
>571	ShiftExpression	\" * / sec \" << endl
>572	Identifier	endl
>573	PrimaryExpression	\" * / sec \"
>574	MultiplicativeExpression	double ( REPEAT ) / timer . best ( REAL_TIMER )
>575	CallExpression	timer . best ( REAL_TIMER )
>576	ArgumentList	REAL_TIMER
>577	Argument	REAL_TIMER
>578	Identifier	REAL_TIMER
>579	Callee	timer . best
>580	MemberAccess	timer . best
>581	Identifier	best
>582	Identifier	timer
>583	CallExpression	double ( REPEAT )
>584	ArgumentList	REPEAT
>585	Argument	REPEAT
>586	Identifier	REPEAT
>587	Callee	double
>588	Identifier	double
>589	PrimaryExpression	\"  \"
>590	MultiplicativeExpression	timer . best ( ) / REPEAT
>591	Identifier	REPEAT
>592	CallExpression	timer . best ( )
>593	ArgumentList	 
>594	Callee	timer . best
>595	MemberAccess	timer . best
>596	Identifier	best
>597	Identifier	timer
>598	PrimaryExpression	\"   a * v
>599	Identifier	std 
>600	Statement	 
>601	ExpressionStatement	 
>602	CallExpression	asm ( \"#myd\" )
>603	ArgumentList	\"#myd\"
>604	Argument	\"#myd\"
>605	PrimaryExpression	\"#myd\"
>606	Callee	asm
>607	Identifier	asm
>608	ExpressionStatement	 
>609	AssignmentExpr	v2 = sm1 * v1
>610	MultiplicativeExpression	sm1 * v1
>611	Identifier	v1
>612	Identifier	sm1
>613	Identifier	v2
>614	ExpressionStatement	 
>615	CallExpression	asm ( \"#myc\" )
>616	ArgumentList	\"#myc\"
>617	Argument	\"#myc\"
>618	PrimaryExpression	\"#myc\"
>619	Callee	asm
>620	Identifier	asm
>621	Statement	 
>622	Statement	 
>623	ExpressionStatement	 
>624	ShiftExpression	std 
>625	ShiftExpression	\"Eigen sparse\t\" << sm1 . nonZeros ( ) / float ( sm1 . rows ( ) * sm1 . cols ( ) ) * 100 << \"%\n\"
>626	ShiftExpression	sm1 . nonZeros ( ) / float ( sm1 . rows ( ) * sm1 . cols ( ) ) * 100 << \"%\n\"
>627	PrimaryExpression	\"%\n\"
>628	MultiplicativeExpression	sm1 . nonZeros ( ) / float ( sm1 . rows ( ) * sm1 . cols ( ) ) * 100
>629	MultiplicativeExpression	float ( sm1 . rows ( ) * sm1 . cols ( ) ) * 100
>630	PrimaryExpression	100
>631	CallExpression	float ( sm1 . rows ( ) * sm1 . cols ( ) )
>632	ArgumentList	sm1 . rows ( ) * sm1 . cols ( )
>633	Argument	sm1 . rows ( ) * sm1 . cols ( )
>634	MultiplicativeExpression	sm1 . rows ( ) * sm1 . cols ( )
>635	CallExpression	sm1 . cols ( )
>636	ArgumentList	 
>637	Callee	sm1 . cols
>638	MemberAccess	sm1 . cols
>639	Identifier	cols
>640	Identifier	sm1
>641	CallExpression	sm1 . rows ( )
>642	ArgumentList	 
>643	Callee	sm1 . rows
>644	MemberAccess	sm1 . rows
>645	Identifier	rows
>646	Identifier	sm1
>647	Callee	float
>648	Identifier	float
>649	CallExpression	sm1 . nonZeros ( )
>650	ArgumentList	 
>651	Callee	sm1 . nonZeros
>652	MemberAccess	sm1 . nonZeros
>653	Identifier	nonZeros
>654	Identifier	sm1
>655	PrimaryExpression	\"Eigen sparse\t\"
>656	Identifier	std 
>657	CompoundStatement	 
>658	ExpressionStatement	 
>659	ShiftExpression	std 
>660	ShiftExpression	\"   a' * v
>661	ShiftExpression	timer . best ( ) << endl
>662	Identifier	endl
>663	CallExpression	timer . best ( )
>664	ArgumentList	 
>665	Callee	timer . best
>666	MemberAccess	timer . best
>667	Identifier	best
>668	Identifier	timer
>669	PrimaryExpression	\"   a' * v
>670	Identifier	std 
>671	ExpressionStatement	 
>672	CallExpression	timer . stop ( )
>673	ArgumentList	 
>674	Callee	timer . stop
>675	MemberAccess	timer . stop
>676	Identifier	stop
>677	Identifier	timer
>678	ForStatement	for ( int k = 0 ; k < REPEAT ; ++ k )
>679	ExpressionStatement	 
>680	AssignmentExpr	v2 = m1 . transpose ( ) * v1
>681	MultiplicativeExpression	m1 . transpose ( ) * v1
>682	Identifier	v1
>683	CallExpression	m1 . transpose ( )
>684	ArgumentList	 
>685	Callee	m1 . transpose
>686	MemberAccess	m1 . transpose
>687	Identifier	transpose
>688	Identifier	m1
>689	Identifier	v2
>690	UnaryExpression	 
>691	Identifier	k
>692	IncDec	++
>693	Condition	 
>694	RelationalExpression	k < REPEAT
>695	Identifier	REPEAT
>696	Identifier	k
>697	ForInit	 
>698	IdentifierDeclStatement	int k = 0 ;
>699	IdentifierDecl	k = 0
>700	AssignmentExpr	k = 0
>701	PrimaryExpression	0
>702	Identifier	k
>703	Identifier	k
>704	IdentifierDeclType	int
>705	ExpressionStatement	 
>706	CallExpression	timer . start ( )
>707	ArgumentList	 
>708	Callee	timer . start
>709	MemberAccess	timer . start
>710	Identifier	start
>711	Identifier	timer
>712	ExpressionStatement	 
>713	CallExpression	timer . reset ( )
>714	ArgumentList	 
>715	Callee	timer . reset
>716	MemberAccess	timer . reset
>717	Identifier	reset
>718	Identifier	timer
>719	ExpressionStatement	 
>720	ShiftExpression	std 
>721	ShiftExpression	\"   a * v
>722	ShiftExpression	timer . best ( ) << \"  \" << double ( REPEAT ) / timer . best ( ) << \" * / sec \" << endl
>723	ShiftExpression	\"  \" << double ( REPEAT ) / timer . best ( ) << \" * / sec \" << endl
>724	ShiftExpression	double ( REPEAT ) / timer . best ( ) << \" * / sec \" << endl
>725	ShiftExpression	\" * / sec \" << endl
>726	Identifier	endl
>727	PrimaryExpression	\" * / sec \"
>728	MultiplicativeExpression	double ( REPEAT ) / timer . best ( )
>729	CallExpression	timer . best ( )
>730	ArgumentList	 
>731	Callee	timer . best
>732	MemberAccess	timer . best
>733	Identifier	best
>734	Identifier	timer
>735	CallExpression	double ( REPEAT )
>736	ArgumentList	REPEAT
>737	Argument	REPEAT
>738	Identifier	REPEAT
>739	Callee	double
>740	Identifier	double
>741	PrimaryExpression	\"  \"
>742	CallExpression	timer . best ( )
>743	ArgumentList	 
>744	Callee	timer . best
>745	MemberAccess	timer . best
>746	Identifier	best
>747	Identifier	timer
>748	PrimaryExpression	\"   a * v
>749	Identifier	std 
>750	ExpressionStatement	 
>751	CallExpression	timer . stop ( )
>752	ArgumentList	 
>753	Callee	timer . stop
>754	MemberAccess	timer . stop
>755	Identifier	stop
>756	Identifier	timer
>757	ForStatement	for ( int k = 0 ; k < REPEAT ; ++ k )
>758	ExpressionStatement	 
>759	AssignmentExpr	v2 = m1 * v1
>760	MultiplicativeExpression	m1 * v1
>761	Identifier	v1
>762	Identifier	m1
>763	Identifier	v2
>764	UnaryExpression	 
>765	Identifier	k
>766	IncDec	++
>767	Condition	 
>768	RelationalExpression	k < REPEAT
>769	Identifier	REPEAT
>770	Identifier	k
>771	ForInit	 
>772	IdentifierDeclStatement	int k = 0 ;
>773	IdentifierDecl	k = 0
>774	AssignmentExpr	k = 0
>775	PrimaryExpression	0
>776	Identifier	k
>777	Identifier	k
>778	IdentifierDeclType	int
>779	ExpressionStatement	 
>780	CallExpression	timer . start ( )
>781	ArgumentList	 
>782	Callee	timer . start
>783	MemberAccess	timer . start
>784	Identifier	start
>785	Identifier	timer
>786	ExpressionStatement	 
>787	CallExpression	timer . reset ( )
>788	ArgumentList	 
>789	Callee	timer . reset
>790	MemberAccess	timer . reset
>791	Identifier	reset
>792	Identifier	timer
>793	ExpressionStatement	 
>794	CallExpression	eiToDense ( sm1 , m1 )
>795	ArgumentList	sm1
>796	Argument	m1
>797	Identifier	m1
>798	Argument	sm1
>799	Identifier	sm1
>800	Callee	eiToDense
>801	Identifier	eiToDense
>802	IdentifierDeclStatement	 
>803	IdentifierDecl	m1 ( rows , cols )
>804	Expression	rows , cols
>805	Identifier	cols
>806	Identifier	rows
>807	Identifier	m1
>808	IdentifierDeclType	DenseMatrix
>809	ExpressionStatement	 
>810	ShiftExpression	std 
>811	ShiftExpression	\"Eigen Dense\t\" << density * 100 << \"%\n\"
>812	ShiftExpression	density * 100 << \"%\n\"
>813	PrimaryExpression	\"%\n\"
>814	MultiplicativeExpression	density * 100
>815	PrimaryExpression	100
>816	Identifier	density
>817	PrimaryExpression	\"Eigen Dense\t\"
>818	Identifier	std 
>819	ExpressionStatement	 
>820	CallExpression	fillMatrix2 ( 7 , rows , cols , sm1 )
>821	ArgumentList	7
>822	Argument	sm1
>823	Identifier	sm1
>824	Argument	cols
>825	Identifier	cols
>826	Argument	rows
>827	Identifier	rows
>828	Argument	7
>829	PrimaryExpression	7
>830	Callee	fillMatrix2
>831	Identifier	fillMatrix2
>832	AssignmentExpr	 
>833	PrimaryExpression	0.5
>834	Identifier	density
>835	Condition	 
>836	RelationalExpression	density >= MINDENSITY
>837	Identifier	MINDENSITY
>838	Identifier	density
>839	ForInit	 
>840	IdentifierDeclStatement	float density = DENSITY ;
>841	IdentifierDecl	density = DENSITY
>842	AssignmentExpr	density = DENSITY
>843	Identifier	DENSITY
>844	Identifier	DENSITY
>845	Identifier	density
>846	IdentifierDeclType	float
>847	IdentifierDeclStatement	 
>848	IdentifierDecl	timer
>849	Identifier	timer
>850	IdentifierDeclType	BenchTimer
>851	ExpressionStatement	 
>852	CallExpression	v1 . setRandom ( )
>853	ArgumentList	 
>854	Callee	v1 . setRandom
>855	MemberAccess	v1 . setRandom
>856	Identifier	setRandom
>857	Identifier	v1
>858	IdentifierDeclStatement	 
>859	IdentifierDecl	v2 ( cols )
>860	Identifier	cols
>861	Identifier	v2
>862	IdentifierDeclType	DenseVector
>863	IdentifierDecl	v1 ( cols )
>864	Identifier	cols
>865	Identifier	v1
>866	IdentifierDeclType	DenseVector
>867	IdentifierDeclStatement	 
>868	IdentifierDecl	sm1 ( rows , cols )
>869	Expression	rows , cols
>870	Identifier	cols
>871	Identifier	rows
>872	Identifier	sm1
>873	IdentifierDeclType	EigenSparseMatrix
>874	IdentifierDeclStatement	 
>875	IdentifierDecl	density = DENSITY
>876	AssignmentExpr	density = DENSITY
>877	Identifier	DENSITY
>878	Identifier	DENSITY
>879	Identifier	density
>880	IdentifierDeclType	float
>881	IdentifierDeclStatement	 
>882	IdentifierDecl	cols = SIZE
>883	AssignmentExpr	cols = SIZE
>884	Identifier	SIZE
>885	Identifier	SIZE
>886	Identifier	cols
>887	IdentifierDeclType	int
>888	IdentifierDeclStatement	 
>889	IdentifierDecl	rows = SIZE
>890	AssignmentExpr	rows = SIZE
>891	Identifier	SIZE
>892	Identifier	SIZE
>893	Identifier	rows
>894	IdentifierDeclType	int
<7=16,15,8
<8=12,9
<9=11,10
<12=14,13
<16=89,75,61,54,47,40,26,19,17
<17=18
<19=20
<20=24,21
<21=22
<22=23
<24=25
<26=27
<27=39,38,28
<28=37,29
<29=35,30
<30=33,31
<31=32
<33=34
<35=36
<40=41
<41=45,42
<42=43
<43=44
<45=46
<47=48
<48=52,49
<49=50
<50=51
<52=53
<54=55
<55=59,56
<56=57
<57=58
<59=60
<61=62
<62=74,73,63
<63=72,64
<64=70,65
<65=68,66
<66=67
<68=69
<70=71
<75=76
<76=88,87,77
<77=86,78
<78=84,79
<79=82,80
<80=81
<82=83
<84=85
<89=90
<90=102,101,91
<91=100,92
<92=98,93
<93=96,94
<94=95
<96=97
<98=99
<114=123,122,115
<115=119,116
<116=118,117
<119=121,120
<123=888,881,874,867,858,851,847,126,124
<124=125
<126=839,835,832,127
<127=819,657,520,369,290,132,128
<128=129
<129=131,130
<132=280,273,264,257,250,243,236,214,207,194,187,180,153,146,133
<133=134
<134=145,135
<135=144,136
<136=138,137
<138=140,139
<140=141
<141=143,142
<146=147
<147=149,148
<149=150
<150=152,151
<153=172,168,165,154
<154=155
<155=164,156
<156=158,157
<158=162,159
<159=160
<160=161
<162=163
<165=167,166
<168=169
<169=171,170
<172=173
<173=174
<174=179,178,175
<175=177,176
<180=181
<181=183,182
<183=184
<184=186,185
<187=188
<188=190,189
<190=191
<191=193,192
<194=195
<195=206,196
<196=205,197
<197=199,198
<199=201,200
<201=202
<202=204,203
<207=208
<208=210,209
<210=211
<211=213,212
<214=228,224,221,215
<215=216
<216=220,217
<217=219,218
<221=223,222
<224=225
<225=227,226
<228=229
<229=230
<230=235,234,231
<231=233,232
<236=237
<237=239,238
<239=240
<240=242,241
<243=244
<244=246,245
<246=247
<247=249,248
<250=251
<251=256,255,252
<252=254,253
<257=258
<258=263,262,259
<259=261,260
<264=265
<265=271,266
<266=269,267
<267=268
<269=270
<271=272
<273=274
<274=279,278,275
<275=277,276
<280=281
<281=289,282
<282=288,283
<283=285,284
<285=287,286
<290=359,352,343,336,327,318,317,316,305,304,291
<291=292
<292=303,293
<293=302,294
<294=296,295
<296=298,297
<298=299
<299=301,300
<305=306
<306=315,307
<307=313,308
<308=311,309
<309=310
<311=312
<313=314
<318=319
<319=325,320
<320=323,321
<321=322
<323=324
<325=326
<327=328
<328=334,329
<329=332,330
<330=331
<332=333
<334=335
<336=340,337
<337=339,338
<340=342,341
<343=344
<344=350,345
<345=348,346
<346=347
<348=349
<350=351
<352=353
<353=358,357,354
<354=356,355
<359=360
<360=368,361
<361=367,362
<362=364,363
<364=366,365
<369=510,503,494,485,484,483,482,481,480,479,478,477,476,475,474,464,463,462,461,460,459,458,457,456,455,454,453,443,442,441,434,423,416,415,402,401,400,384,383,370
<370=371
<371=382,372
<372=381,373
<373=375,374
<375=377,376
<377=378
<378=380,379
<384=385
<385=398,386
<386=391,389,387
<387=388
<389=390
<391=392
<392=396,393
<393=394
<394=395
<396=397
<398=399
<402=403
<403=414,404
<404=413,405
<405=407,406
<407=409,408
<409=410
<410=412,411
<416=417
<417=421,418
<418=419
<419=420
<421=422
<423=424
<424=432,425
<425=430,428,426
<426=427
<428=429
<430=431
<432=433
<434=435
<435=439,436
<436=437
<437=438
<439=440
<443=444
<444=446,445
<446=448,447
<448=452,449
<449=451,450
<464=465
<465=467,466
<467=469,468
<469=473,470
<470=472,471
<485=490,486
<486=489,488,487
<490=493,492,491
<494=495
<495=501,496
<496=499,497
<497=498
<499=500
<501=502
<503=504
<504=509,508,505
<505=507,506
<510=511
<511=519,512
<512=518,513
<513=515,514
<515=517,516
<520=623,622,621,614,608,601,600,565,564,563,537,536,521
<521=522
<522=535,523
<523=534,524
<524=526,525
<526=528,527
<528=530,529
<530=531
<531=533,532
<537=556,545,538
<538=539
<539=543,540
<540=541
<541=542
<543=544
<545=546
<546=555,547
<547=549,548
<549=551,550
<551=552
<552=554,553
<556=557
<557=561,558
<558=559
<559=560
<561=562
<565=566
<566=599,567
<567=598,568
<568=590,569
<569=589,570
<570=574,571
<571=573,572
<574=583,575
<575=579,576
<576=577
<577=578
<579=580
<580=582,581
<583=587,584
<584=585
<585=586
<587=588
<590=592,591
<592=594,593
<594=595
<595=597,596
<601=602
<602=606,603
<603=604
<604=605
<606=607
<608=609
<609=613,610
<610=612,611
<614=615
<615=619,616
<616=617
<617=618
<619=620
<623=624
<624=656,625
<625=655,626
<626=628,627
<628=649,629
<629=631,630
<631=647,632
<632=633
<633=634
<634=641,635
<635=637,636
<637=638
<638=640,639
<641=643,642
<643=644
<644=646,645
<647=648
<649=651,650
<651=652
<652=654,653
<657=809,802,793,786,779,757,750,719,712,705,678,671,658
<658=659
<659=670,660
<660=669,661
<661=663,662
<663=665,664
<665=666
<666=668,667
<671=672
<672=674,673
<674=675
<675=677,676
<678=697,693,690,679
<679=680
<680=689,681
<681=683,682
<683=685,684
<685=686
<686=688,687
<690=692,691
<693=694
<694=696,695
<697=698
<698=699
<699=704,703,700
<700=702,701
<705=706
<706=708,707
<708=709
<709=711,710
<712=713
<713=715,714
<715=716
<716=718,717
<719=720
<720=749,721
<721=748,722
<722=742,723
<723=741,724
<724=728,725
<725=727,726
<728=735,729
<729=731,730
<731=732
<732=734,733
<735=739,736
<736=737
<737=738
<739=740
<742=744,743
<744=745
<745=747,746
<750=751
<751=753,752
<753=754
<754=756,755
<757=771,767,764,758
<758=759
<759=763,760
<760=762,761
<764=766,765
<767=768
<768=770,769
<771=772
<772=773
<773=778,777,774
<774=776,775
<779=780
<780=782,781
<782=783
<783=785,784
<786=787
<787=789,788
<789=790
<790=792,791
<793=794
<794=800,795
<795=798,796
<796=797
<798=799
<800=801
<802=803
<803=808,807,804
<804=806,805
<809=810
<810=818,811
<811=817,812
<812=814,813
<814=816,815
<819=820
<820=830,821
<821=828,826,824,822
<822=823
<824=825
<826=827
<828=829
<830=831
<832=834,833
<835=836
<836=838,837
<839=840
<840=841
<841=846,845,842
<842=844,843
<847=848
<848=850,849
<851=852
<852=854,853
<854=855
<855=857,856
<858=863,859
<859=862,861,860
<863=866,865,864
<867=868
<868=873,872,869
<869=871,870
<874=875
<875=880,879,876
<876=878,877
<881=882
<882=887,886,883
<883=885,884
<888=889
<889=894,893,890
<890=892,891
