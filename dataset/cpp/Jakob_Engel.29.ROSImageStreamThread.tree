>3	FunctionDef	ROSImageStreamThread 
>4	ParameterList	 
>5	CompoundStatement	 
>6	ExpressionStatement	 
>7	AssignmentExpr	haveCalib = false
>8	Identifier	false
>9	Identifier	haveCalib
>10	ExpressionStatement	 
>11	AssignmentExpr	lastSEQ = 0
>12	PrimaryExpression	0
>13	Identifier	lastSEQ
>14	ExpressionStatement	 
>15	AssignmentExpr	undistorter = 0
>16	PrimaryExpression	0
>17	Identifier	undistorter
>18	ExpressionStatement	 
>19	AssignmentExpr	imageBuffer = new NotifyBuffer < TimestampedMat > ( 8 )
>20	PrimaryExpression	8
>21	Identifier	imageBuffer
>22	ExpressionStatement	 
>23	AssignmentExpr	width_ = height_ = 0
>24	AssignmentExpr	height_ = 0
>25	PrimaryExpression	0
>26	Identifier	height_
>27	Identifier	width_
>28	ExpressionStatement	 
>29	AssignmentExpr	vid_sub = nh_ . subscribe ( vid_channel , 1 , & ROSImageStreamThread 
>30	CallExpression	nh_ . subscribe ( vid_channel , 1 , & ROSImageStreamThread 
>31	ArgumentList	vid_channel
>32	Argument	this
>33	Identifier	this
>34	Argument	& ROSImageStreamThread 
>35	UnaryOp	& ROSImageStreamThread 
>36	Identifier	ROSImageStreamThread 
>37	UnaryOperator	&
>38	Argument	1
>39	PrimaryExpression	1
>40	Argument	vid_channel
>41	Identifier	vid_channel
>42	Callee	nh_ . subscribe
>43	MemberAccess	nh_ . subscribe
>44	Identifier	subscribe
>45	Identifier	nh_
>46	Identifier	vid_sub
>47	ExpressionStatement	 
>48	AssignmentExpr	vid_channel = nh_ . resolveName ( \"image\" )
>49	CallExpression	nh_ . resolveName ( \"image\" )
>50	ArgumentList	\"image\"
>51	Argument	\"image\"
>52	PrimaryExpression	\"image\"
>53	Callee	nh_ . resolveName
>54	MemberAccess	nh_ . resolveName
>55	Identifier	resolveName
>56	Identifier	nh_
>57	Identifier	vid_channel
>75	FunctionDef	ROSImageStreamThread 
>76	ParameterList	 
>77	CompoundStatement	 
>78	ExpressionStatement	 
>79	Identifier	imageBuffer
>80	Statement	 
>84	FunctionDef	ROSImageStreamThread 
>85	ParameterList	std 
>86	Parameter	 
>87	Identifier	file
>88	ParameterType	std 
>89	ReturnType	void
>90	CompoundStatement	 
>91	ExpressionStatement	 
>92	AssignmentExpr	haveCalib = true
>93	Identifier	true
>94	Identifier	haveCalib
>95	IfStatement	if ( file == \"\" )
>96	ElseStatement	else
>97	CompoundStatement	 
>98	ExpressionStatement	 
>99	AssignmentExpr	height_ = undistorter -> getOutputHeight ( )
>100	CallExpression	undistorter -> getOutputHeight ( )
>101	ArgumentList	 
>102	Callee	undistorter -> getOutputHeight
>103	PtrMemberAccess	undistorter -> getOutputHeight
>104	Identifier	getOutputHeight
>105	Identifier	undistorter
>106	Identifier	height_
>107	ExpressionStatement	 
>108	AssignmentExpr	width_ = undistorter -> getOutputWidth ( )
>109	CallExpression	undistorter -> getOutputWidth ( )
>110	ArgumentList	 
>111	Callee	undistorter -> getOutputWidth
>112	PtrMemberAccess	undistorter -> getOutputWidth
>113	Identifier	getOutputWidth
>114	Identifier	undistorter
>115	Identifier	width_
>116	ExpressionStatement	 
>117	AssignmentExpr	cy_ = undistorter -> getK ( ) . at < double > ( 2 , 1 )
>118	RelationalExpression	undistorter -> getK ( ) . at < double > ( 2 , 1 )
>119	RelationalExpression	double > ( 2 , 1 )
>120	Expression	2 , 1
>121	PrimaryExpression	1
>122	PrimaryExpression	2
>123	Identifier	double
>124	MemberAccess	undistorter -> getK ( ) . at
>125	Identifier	at
>126	CallExpression	undistorter -> getK ( )
>127	ArgumentList	 
>128	Callee	undistorter -> getK
>129	PtrMemberAccess	undistorter -> getK
>130	Identifier	getK
>131	Identifier	undistorter
>132	Identifier	cy_
>133	ExpressionStatement	 
>134	AssignmentExpr	cx_ = undistorter -> getK ( ) . at < double > ( 2 , 0 )
>135	RelationalExpression	undistorter -> getK ( ) . at < double > ( 2 , 0 )
>136	RelationalExpression	double > ( 2 , 0 )
>137	Expression	2 , 0
>138	PrimaryExpression	0
>139	PrimaryExpression	2
>140	Identifier	double
>141	MemberAccess	undistorter -> getK ( ) . at
>142	Identifier	at
>143	CallExpression	undistorter -> getK ( )
>144	ArgumentList	 
>145	Callee	undistorter -> getK
>146	PtrMemberAccess	undistorter -> getK
>147	Identifier	getK
>148	Identifier	undistorter
>149	Identifier	cx_
>150	ExpressionStatement	 
>151	AssignmentExpr	fy_ = undistorter -> getK ( ) . at < double > ( 1 , 1 )
>152	RelationalExpression	undistorter -> getK ( ) . at < double > ( 1 , 1 )
>153	RelationalExpression	double > ( 1 , 1 )
>154	Expression	1 , 1
>155	PrimaryExpression	1
>156	PrimaryExpression	1
>157	Identifier	double
>158	MemberAccess	undistorter -> getK ( ) . at
>159	Identifier	at
>160	CallExpression	undistorter -> getK ( )
>161	ArgumentList	 
>162	Callee	undistorter -> getK
>163	PtrMemberAccess	undistorter -> getK
>164	Identifier	getK
>165	Identifier	undistorter
>166	Identifier	fy_
>167	ExpressionStatement	 
>168	AssignmentExpr	fx_ = undistorter -> getK ( ) . at < double > ( 0 , 0 )
>169	RelationalExpression	undistorter -> getK ( ) . at < double > ( 0 , 0 )
>170	RelationalExpression	double > ( 0 , 0 )
>171	Expression	0 , 0
>172	PrimaryExpression	0
>173	PrimaryExpression	0
>174	Identifier	double
>175	MemberAccess	undistorter -> getK ( ) . at
>176	Identifier	at
>177	CallExpression	undistorter -> getK ( )
>178	ArgumentList	 
>179	Callee	undistorter -> getK
>180	PtrMemberAccess	undistorter -> getK
>181	Identifier	getK
>182	Identifier	undistorter
>183	Identifier	fx_
>184	IfStatement	if ( undistorter == 0 )
>185	CompoundStatement	 
>186	ExpressionStatement	 
>187	CallExpression	exit ( 0 )
>188	ArgumentList	0
>189	Argument	0
>190	PrimaryExpression	0
>191	Callee	exit
>192	Identifier	exit
>193	ExpressionStatement	 
>194	CallExpression	printf ( \"Failed to read camera calibration from file... wrong syntax?\n\" )
>195	ArgumentList	\"Failed to read camera calibration from file... wrong syntax?\n\"
>196	Argument	\"Failed to read camera calibration from file... wrong syntax?\n\"
>197	PrimaryExpression	\"Failed to read camera calibration from file... wrong syntax?\n\"
>198	Callee	printf
>199	Identifier	printf
>200	Condition	 
>201	EqualityExpression	undistorter == 0
>202	PrimaryExpression	0
>203	Identifier	undistorter
>204	ExpressionStatement	 
>205	AssignmentExpr	undistorter = Undistorter 
>206	CallExpression	Undistorter 
>207	ArgumentList	file . c_str ( )
>208	Argument	file . c_str ( )
>209	CallExpression	file . c_str ( )
>210	ArgumentList	 
>211	Callee	file . c_str
>212	MemberAccess	file . c_str
>213	Identifier	c_str
>214	Identifier	file
>215	Callee	Undistorter 
>216	Identifier	Undistorter 
>217	Identifier	undistorter
>218	CompoundStatement	 
>219	ExpressionStatement	 
>220	CallExpression	info_sub . shutdown ( )
>221	ArgumentList	 
>222	Callee	info_sub . shutdown
>223	MemberAccess	info_sub . shutdown
>224	Identifier	shutdown
>225	Identifier	info_sub
>226	ExpressionStatement	 
>227	CallExpression	printf ( \"RECEIVED ROS camera calibration!\n\" )
>228	ArgumentList	\"RECEIVED ROS camera calibration!\n\"
>229	Argument	\"RECEIVED ROS camera calibration!\n\"
>230	PrimaryExpression	\"RECEIVED ROS camera calibration!\n\"
>231	Callee	printf
>232	Identifier	printf
>233	WhileStatement	while ( width_ == 0 )
>234	CompoundStatement	 
>235	ExpressionStatement	 
>236	CallExpression	ros 
>237	ArgumentList	ros 
>238	Argument	ros 
>239	CallExpression	ros 
>240	ArgumentList	0.03
>241	Argument	0.03
>242	PrimaryExpression	0.03
>243	Callee	ros 
>244	Identifier	ros 
>245	Callee	ros 
>246	PtrMemberAccess	ros 
>247	Identifier	callAvailable
>248	CallExpression	ros 
>249	ArgumentList	 
>250	Callee	ros 
>251	Identifier	ros 
>252	Condition	 
>253	EqualityExpression	width_ == 0
>254	PrimaryExpression	0
>255	Identifier	width_
>256	ExpressionStatement	 
>257	CallExpression	printf ( \"WAITING for ROS camera calibration!\n\" )
>258	ArgumentList	\"WAITING for ROS camera calibration!\n\"
>259	Argument	\"WAITING for ROS camera calibration!\n\"
>260	PrimaryExpression	\"WAITING for ROS camera calibration!\n\"
>261	Callee	printf
>262	Identifier	printf
>263	IdentifierDeclStatement	 
>264	IdentifierDecl	info_sub = nh_ . subscribe ( nh_ . resolveName ( \"camera_info\" ) , 1 , & ROSImageStreamThread 
>265	AssignmentExpr	info_sub = nh_ . subscribe ( nh_ . resolveName ( \"camera_info\" ) , 1 , & ROSImageStreamThread 
>266	CallExpression	nh_ . subscribe ( nh_ . resolveName ( \"camera_info\" ) , 1 , & ROSImageStreamThread 
>267	ArgumentList	nh_ . resolveName ( \"camera_info\" )
>268	Argument	this
>269	Identifier	this
>270	Argument	& ROSImageStreamThread 
>271	UnaryOp	& ROSImageStreamThread 
>272	Identifier	ROSImageStreamThread 
>273	UnaryOperator	&
>274	Argument	1
>275	PrimaryExpression	1
>276	Argument	nh_ . resolveName ( \"camera_info\" )
>277	CallExpression	nh_ . resolveName ( \"camera_info\" )
>278	ArgumentList	\"camera_info\"
>279	Argument	\"camera_info\"
>280	PrimaryExpression	\"camera_info\"
>281	Callee	nh_ . resolveName
>282	MemberAccess	nh_ . resolveName
>283	Identifier	resolveName
>284	Identifier	nh_
>285	Callee	nh_ . subscribe
>286	MemberAccess	nh_ . subscribe
>287	Identifier	subscribe
>288	Identifier	nh_
>289	Identifier	info_sub
>290	Identifier	info_sub
>291	IdentifierDeclType	ros 
>292	Condition	 
>293	EqualityExpression	file == \"\"
>294	PrimaryExpression	\"\"
>295	Identifier	file
>325	FunctionDef	ROSImageStreamThread 
>326	ParameterList	 
>327	ReturnType	void
>328	CompoundStatement	 
>329	IdentifierDeclStatement	 
>330	IdentifierDecl	thread ( boost 
>331	CallExpression	boost 
>332	ArgumentList	* this
>333	Argument	* this
>334	UnaryOp	* this
>335	Identifier	this
>336	UnaryOperator	*
>337	Callee	boost 
>338	Identifier	boost 
>339	Identifier	thread
>340	IdentifierDeclType	boost 
>347	FunctionDef	operator ( ) ()
>348	ParameterList	 
>349	CompoundStatement	 
>350	ExpressionStatement	 
>351	CallExpression	exit ( 0 )
>352	ArgumentList	0
>353	Argument	0
>354	PrimaryExpression	0
>355	Callee	exit
>356	Identifier	exit
>357	ExpressionStatement	 
>358	CallExpression	ros 
>359	ArgumentList	 
>360	Callee	ros 
>361	Identifier	ros 
>365	FunctionDef	ROSImageStreamThread 
>366	ParameterList	const sensor_msgs 
>367	Parameter	 
>368	Identifier	img
>369	ParameterType	const sensor_msgs 
>370	ReturnType	void
>371	CompoundStatement	 
>372	ExpressionStatement	 
>373	CallExpression	imageBuffer -> pushBack ( bufferItem )
>374	ArgumentList	bufferItem
>375	Argument	bufferItem
>376	Identifier	bufferItem
>377	Callee	imageBuffer -> pushBack
>378	PtrMemberAccess	imageBuffer -> pushBack
>379	Identifier	pushBack
>380	Identifier	imageBuffer
>381	IfStatement	if ( undistorter != 0 )
>382	ElseStatement	else
>383	CompoundStatement	 
>384	ExpressionStatement	 
>385	AssignmentExpr	bufferItem . data = cv_ptr -> image
>386	PtrMemberAccess	cv_ptr -> image
>387	Identifier	image
>388	Identifier	cv_ptr
>389	MemberAccess	bufferItem . data
>390	Identifier	data
>391	Identifier	bufferItem
>392	CompoundStatement	 
>393	ExpressionStatement	 
>394	CallExpression	undistorter -> undistort ( cv_ptr -> image , bufferItem . data )
>395	ArgumentList	cv_ptr -> image
>396	Argument	bufferItem . data
>397	MemberAccess	bufferItem . data
>398	Identifier	data
>399	Identifier	bufferItem
>400	Argument	cv_ptr -> image
>401	PtrMemberAccess	cv_ptr -> image
>402	Identifier	image
>403	Identifier	cv_ptr
>404	Callee	undistorter -> undistort
>405	PtrMemberAccess	undistorter -> undistort
>406	Identifier	undistort
>407	Identifier	undistorter
>408	ExpressionStatement	 
>409	CallExpression	assert ( undistorter -> isValid ( ) )
>410	ArgumentList	undistorter -> isValid ( )
>411	Argument	undistorter -> isValid ( )
>412	CallExpression	undistorter -> isValid ( )
>413	ArgumentList	 
>414	Callee	undistorter -> isValid
>415	PtrMemberAccess	undistorter -> isValid
>416	Identifier	isValid
>417	Identifier	undistorter
>418	Callee	assert
>419	Identifier	assert
>420	Condition	 
>421	EqualityExpression	undistorter != 0
>422	PrimaryExpression	0
>423	Identifier	undistorter
>424	IfStatement	if ( img -> header . stamp . toSec ( ) != 0 )
>425	ElseStatement	else
>426	ExpressionStatement	 
>427	AssignmentExpr	bufferItem . timestamp = Timestamp ( ros 
>428	CallExpression	Timestamp ( ros 
>429	ArgumentList	ros 
>430	Argument	ros 
>431	CallExpression	ros 
>432	ArgumentList	 
>433	Callee	ros 
>434	MemberAccess	ros 
>435	Identifier	toSec
>436	CallExpression	ros 
>437	ArgumentList	 
>438	Callee	ros 
>439	Identifier	ros 
>440	Callee	Timestamp
>441	Identifier	Timestamp
>442	MemberAccess	bufferItem . timestamp
>443	Identifier	timestamp
>444	Identifier	bufferItem
>445	ExpressionStatement	 
>446	AssignmentExpr	bufferItem . timestamp = Timestamp ( img -> header . stamp . toSec ( ) )
>447	CallExpression	Timestamp ( img -> header . stamp . toSec ( ) )
>448	ArgumentList	img -> header . stamp . toSec ( )
>449	Argument	img -> header . stamp . toSec ( )
>450	CallExpression	img -> header . stamp . toSec ( )
>451	ArgumentList	 
>452	Callee	img -> header . stamp . toSec
>453	MemberAccess	img -> header . stamp . toSec
>454	Identifier	toSec
>455	MemberAccess	img -> header . stamp
>456	Identifier	stamp
>457	PtrMemberAccess	img -> header
>458	Identifier	header
>459	Identifier	img
>460	Callee	Timestamp
>461	Identifier	Timestamp
>462	MemberAccess	bufferItem . timestamp
>463	Identifier	timestamp
>464	Identifier	bufferItem
>465	Condition	 
>466	EqualityExpression	img -> header . stamp . toSec ( ) != 0
>467	PrimaryExpression	0
>468	CallExpression	img -> header . stamp . toSec ( )
>469	ArgumentList	 
>470	Callee	img -> header . stamp . toSec
>471	MemberAccess	img -> header . stamp . toSec
>472	Identifier	toSec
>473	MemberAccess	img -> header . stamp
>474	Identifier	stamp
>475	PtrMemberAccess	img -> header
>476	Identifier	header
>477	Identifier	img
>478	IdentifierDeclStatement	 
>479	IdentifierDecl	bufferItem
>480	Identifier	bufferItem
>481	IdentifierDeclType	TimestampedMat
>482	ExpressionStatement	 
>483	AssignmentExpr	lastSEQ = img -> header . seq
>484	MemberAccess	img -> header . seq
>485	Identifier	seq
>486	PtrMemberAccess	img -> header
>487	Identifier	header
>488	Identifier	img
>489	Identifier	lastSEQ
>490	IfStatement	if ( img -> header . seq < ( unsigned int ) lastSEQ )
>491	CompoundStatement	 
>492	ReturnStatement	 
>493	ExpressionStatement	 
>494	AssignmentExpr	lastSEQ = 0
>495	PrimaryExpression	0
>496	Identifier	lastSEQ
>497	ExpressionStatement	 
>498	CallExpression	printf ( \"Backward-Jump in SEQ detected, but ignoring for now.\n\" )
>499	ArgumentList	\"Backward-Jump in SEQ detected, but ignoring for now.\n\"
>500	Argument	\"Backward-Jump in SEQ detected, but ignoring for now.\n\"
>501	PrimaryExpression	\"Backward-Jump in SEQ detected, but ignoring for now.\n\"
>502	Callee	printf
>503	Identifier	printf
>504	Condition	 
>505	RelationalExpression	img -> header . seq < ( unsigned int ) lastSEQ
>506	CastExpression	( unsigned int ) lastSEQ
>507	Identifier	lastSEQ
>508	CastTarget	unsigned int
>509	MemberAccess	img -> header . seq
>510	Identifier	seq
>511	PtrMemberAccess	img -> header
>512	Identifier	header
>513	Identifier	img
>514	IdentifierDeclStatement	 
>515	IdentifierDecl	cv_ptr = cv_bridge 
>516	AssignmentExpr	cv_ptr = cv_bridge 
>517	CallExpression	cv_bridge 
>518	ArgumentList	img
>519	Argument	sensor_msgs 
>520	Identifier	sensor_msgs 
>521	Argument	img
>522	Identifier	img
>523	Callee	cv_bridge 
>524	Identifier	cv_bridge 
>525	Identifier	cv_ptr
>526	Identifier	cv_ptr
>527	IdentifierDeclType	cv_bridge 
>528	IfStatement	if ( ! haveCalib )
>529	ReturnStatement	 
>530	Condition	 
>531	UnaryOp	! haveCalib
>532	Identifier	haveCalib
>533	UnaryOperator	!
>560	FunctionDef	ROSImageStreamThread 
>561	ParameterList	const sensor_msgs 
>562	Parameter	 
>563	Identifier	info
>564	ParameterType	const sensor_msgs 
>565	ReturnType	void
>566	CompoundStatement	 
>567	IfStatement	if ( ! haveCalib )
>568	CompoundStatement	 
>569	ExpressionStatement	 
>570	CallExpression	printf ( \"Received ROS Camera Calibration
>571	ArgumentList	\"Received ROS Camera Calibration
>572	Argument	height_
>573	Identifier	height_
>574	Argument	width_
>575	Identifier	width_
>576	Argument	cy_
>577	Identifier	cy_
>578	Argument	cx_
>579	Identifier	cx_
>580	Argument	fy_
>581	Identifier	fy_
>582	Argument	fx_
>583	Identifier	fx_
>584	Argument	\"Received ROS Camera Calibration
>585	PrimaryExpression	\"Received ROS Camera Calibration
>586	Callee	printf
>587	Identifier	printf
>588	ExpressionStatement	 
>589	AssignmentExpr	height_ = info -> height
>590	PtrMemberAccess	info -> height
>591	Identifier	height
>592	Identifier	info
>593	Identifier	height_
>594	ExpressionStatement	 
>595	AssignmentExpr	width_ = info -> width
>596	PtrMemberAccess	info -> width
>597	Identifier	width
>598	Identifier	info
>599	Identifier	width_
>600	IfStatement	if ( fx_ == 0 || fy_ == 0 )
>601	CompoundStatement	 
>602	ExpressionStatement	 
>603	AssignmentExpr	cy_ = info -> K [ 5 ]
>604	ArrayIndexing	info -> K [ 5 ]
>605	PrimaryExpression	5
>606	PtrMemberAccess	info -> K
>607	Identifier	K
>608	Identifier	info
>609	Identifier	cy_
>610	ExpressionStatement	 
>611	AssignmentExpr	cx_ = info -> K [ 2 ]
>612	ArrayIndexing	info -> K [ 2 ]
>613	PrimaryExpression	2
>614	PtrMemberAccess	info -> K
>615	Identifier	K
>616	Identifier	info
>617	Identifier	cx_
>618	ExpressionStatement	 
>619	AssignmentExpr	fy_ = info -> K [ 4 ]
>620	ArrayIndexing	info -> K [ 4 ]
>621	PrimaryExpression	4
>622	PtrMemberAccess	info -> K
>623	Identifier	K
>624	Identifier	info
>625	Identifier	fy_
>626	ExpressionStatement	 
>627	AssignmentExpr	fx_ = info -> K [ 0 ]
>628	ArrayIndexing	info -> K [ 0 ]
>629	PrimaryExpression	0
>630	PtrMemberAccess	info -> K
>631	Identifier	K
>632	Identifier	info
>633	Identifier	fx_
>634	ExpressionStatement	 
>635	CallExpression	printf ( \"camera calib from P seems wrong, trying calib from K\n\" )
>636	ArgumentList	\"camera calib from P seems wrong, trying calib from K\n\"
>637	Argument	\"camera calib from P seems wrong, trying calib from K\n\"
>638	PrimaryExpression	\"camera calib from P seems wrong, trying calib from K\n\"
>639	Callee	printf
>640	Identifier	printf
>641	Condition	 
>642	OrExpression	fx_ == 0 || fy_ == 0
>643	EqualityExpression	fy_ == 0
>644	PrimaryExpression	0
>645	Identifier	fy_
>646	EqualityExpression	fx_ == 0
>647	PrimaryExpression	0
>648	Identifier	fx_
>649	ExpressionStatement	 
>650	AssignmentExpr	cy_ = info -> P [ 6 ]
>651	ArrayIndexing	info -> P [ 6 ]
>652	PrimaryExpression	6
>653	PtrMemberAccess	info -> P
>654	Identifier	P
>655	Identifier	info
>656	Identifier	cy_
>657	ExpressionStatement	 
>658	AssignmentExpr	cx_ = info -> P [ 2 ]
>659	ArrayIndexing	info -> P [ 2 ]
>660	PrimaryExpression	2
>661	PtrMemberAccess	info -> P
>662	Identifier	P
>663	Identifier	info
>664	Identifier	cx_
>665	ExpressionStatement	 
>666	AssignmentExpr	fy_ = info -> P [ 5 ]
>667	ArrayIndexing	info -> P [ 5 ]
>668	PrimaryExpression	5
>669	PtrMemberAccess	info -> P
>670	Identifier	P
>671	Identifier	info
>672	Identifier	fy_
>673	ExpressionStatement	 
>674	AssignmentExpr	fx_ = info -> P [ 0 ]
>675	ArrayIndexing	info -> P [ 0 ]
>676	PrimaryExpression	0
>677	PtrMemberAccess	info -> P
>678	Identifier	P
>679	Identifier	info
>680	Identifier	fx_
>681	Condition	 
>682	UnaryOp	! haveCalib
>683	Identifier	haveCalib
>684	UnaryOperator	!
<3=5,4
<5=47,28,22,18,14,10,6
<6=7
<7=9,8
<10=11
<11=13,12
<14=15
<15=17,16
<18=19
<19=21,20
<22=23
<23=27,24
<24=26,25
<28=29
<29=46,30
<30=42,31
<31=40,38,34,32
<32=33
<34=35
<35=37,36
<38=39
<40=41
<42=43
<43=45,44
<47=48
<48=57,49
<49=53,50
<50=51
<51=52
<53=54
<54=56,55
<75=77,76
<77=80,78
<78=79
<84=90,89,85
<85=86
<86=88,87
<90=95,91
<91=92
<92=94,93
<95=292,218,96
<96=97
<97=204,184,167,150,133,116,107,98
<98=99
<99=106,100
<100=102,101
<102=103
<103=105,104
<107=108
<108=115,109
<109=111,110
<111=112
<112=114,113
<116=117
<117=132,118
<118=124,119
<119=123,120
<120=122,121
<124=126,125
<126=128,127
<128=129
<129=131,130
<133=134
<134=149,135
<135=141,136
<136=140,137
<137=139,138
<141=143,142
<143=145,144
<145=146
<146=148,147
<150=151
<151=166,152
<152=158,153
<153=157,154
<154=156,155
<158=160,159
<160=162,161
<162=163
<163=165,164
<167=168
<168=183,169
<169=175,170
<170=174,171
<171=173,172
<175=177,176
<177=179,178
<179=180
<180=182,181
<184=200,185
<185=193,186
<186=187
<187=191,188
<188=189
<189=190
<191=192
<193=194
<194=198,195
<195=196
<196=197
<198=199
<200=201
<201=203,202
<204=205
<205=217,206
<206=215,207
<207=208
<208=209
<209=211,210
<211=212
<212=214,213
<215=216
<218=263,256,233,226,219
<219=220
<220=222,221
<222=223
<223=225,224
<226=227
<227=231,228
<228=229
<229=230
<231=232
<233=252,234
<234=235
<235=236
<236=245,237
<237=238
<238=239
<239=243,240
<240=241
<241=242
<243=244
<245=246
<246=248,247
<248=250,249
<250=251
<252=253
<253=255,254
<256=257
<257=261,258
<258=259
<259=260
<261=262
<263=264
<264=291,290,265
<265=289,266
<266=285,267
<267=276,274,270,268
<268=269
<270=271
<271=273,272
<274=275
<276=277
<277=281,278
<278=279
<279=280
<281=282
<282=284,283
<285=286
<286=288,287
<292=293
<293=295,294
<325=328,327,326
<328=329
<329=330
<330=340,339,331
<331=337,332
<332=333
<333=334
<334=336,335
<337=338
<347=349,348
<349=357,350
<350=351
<351=355,352
<352=353
<353=354
<355=356
<357=358
<358=360,359
<360=361
<365=371,370,366
<366=367
<367=369,368
<371=528,514,490,482,478,424,381,372
<372=373
<373=377,374
<374=375
<375=376
<377=378
<378=380,379
<381=420,392,382
<382=383
<383=384
<384=385
<385=389,386
<386=388,387
<389=391,390
<392=408,393
<393=394
<394=404,395
<395=400,396
<396=397
<397=399,398
<400=401
<401=403,402
<404=405
<405=407,406
<408=409
<409=418,410
<410=411
<411=412
<412=414,413
<414=415
<415=417,416
<418=419
<420=421
<421=423,422
<424=465,445,425
<425=426
<426=427
<427=442,428
<428=440,429
<429=430
<430=431
<431=433,432
<433=434
<434=436,435
<436=438,437
<438=439
<440=441
<442=444,443
<445=446
<446=462,447
<447=460,448
<448=449
<449=450
<450=452,451
<452=453
<453=455,454
<455=457,456
<457=459,458
<460=461
<462=464,463
<465=466
<466=468,467
<468=470,469
<470=471
<471=473,472
<473=475,474
<475=477,476
<478=479
<479=481,480
<482=483
<483=489,484
<484=486,485
<486=488,487
<490=504,491
<491=497,493,492
<493=494
<494=496,495
<497=498
<498=502,499
<499=500
<500=501
<502=503
<504=505
<505=509,506
<506=508,507
<509=511,510
<511=513,512
<514=515
<515=527,526,516
<516=525,517
<517=523,518
<518=521,519
<519=520
<521=522
<523=524
<528=530,529
<530=531
<531=533,532
<560=566,565,561
<561=562
<562=564,563
<566=567
<567=681,568
<568=673,665,657,649,600,594,588,569
<569=570
<570=586,571
<571=584,582,580,578,576,574,572
<572=573
<574=575
<576=577
<578=579
<580=581
<582=583
<584=585
<586=587
<588=589
<589=593,590
<590=592,591
<594=595
<595=599,596
<596=598,597
<600=641,601
<601=634,626,618,610,602
<602=603
<603=609,604
<604=606,605
<606=608,607
<610=611
<611=617,612
<612=614,613
<614=616,615
<618=619
<619=625,620
<620=622,621
<622=624,623
<626=627
<627=633,628
<628=630,629
<630=632,631
<634=635
<635=639,636
<636=637
<637=638
<639=640
<641=642
<642=646,643
<643=645,644
<646=648,647
<649=650
<650=656,651
<651=653,652
<653=655,654
<657=658
<658=664,659
<659=661,660
<661=663,662
<665=666
<666=672,667
<667=669,668
<669=671,670
<673=674
<674=680,675
<675=677,676
<677=679,678
<681=682
<682=684,683
