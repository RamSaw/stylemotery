>3	FunctionDef	nlerp (const Q & a , const Q & b , typename Q 
>4	ParameterList	const Q & a , const Q & b , typename Q 
>5	Parameter	 
>6	Identifier	t
>7	ParameterType	typename Q 
>8	Parameter	 
>9	Identifier	b
>10	ParameterType	const Q &
>11	Parameter	 
>12	Identifier	a
>13	ParameterType	const Q &
>14	ReturnType	EIGEN_DONT_INLINE Q
>15	CompoundStatement	 
>16	ReturnStatement	 
>17	CallExpression	Q ( ( a . coeffs ( ) * ( 1.0 - t ) + b . coeffs ( ) * t ) . normalized ( ) )
>18	ArgumentList	( a . coeffs ( ) * ( 1.0 - t ) + b . coeffs ( ) * t ) . normalized ( )
>19	Argument	( a . coeffs ( ) * ( 1.0 - t ) + b . coeffs ( ) * t ) . normalized ( )
>20	CallExpression	( a . coeffs ( ) * ( 1.0 - t ) + b . coeffs ( ) * t ) . normalized ( )
>21	ArgumentList	 
>22	Callee	( a . coeffs ( ) * ( 1.0 - t ) + b . coeffs ( ) * t ) . normalized
>23	MemberAccess	( a . coeffs ( ) * ( 1.0 - t ) + b . coeffs ( ) * t ) . normalized
>24	Identifier	normalized
>25	AdditiveExpression	a . coeffs ( ) * ( 1.0 - t ) + b . coeffs ( ) * t
>26	MultiplicativeExpression	b . coeffs ( ) * t
>27	Identifier	t
>28	CallExpression	b . coeffs ( )
>29	ArgumentList	 
>30	Callee	b . coeffs
>31	MemberAccess	b . coeffs
>32	Identifier	coeffs
>33	Identifier	b
>34	MultiplicativeExpression	a . coeffs ( ) * ( 1.0 - t )
>35	AdditiveExpression	1.0 - t
>36	Identifier	t
>37	PrimaryExpression	1.0
>38	CallExpression	a . coeffs ( )
>39	ArgumentList	 
>40	Callee	a . coeffs
>41	MemberAccess	a . coeffs
>42	Identifier	coeffs
>43	Identifier	a
>44	Callee	Q
>45	Identifier	Q
>56	FunctionDef	slerp_eigen (const Q & a , const Q & b , typename Q 
>57	ParameterList	const Q & a , const Q & b , typename Q 
>58	Parameter	 
>59	Identifier	t
>60	ParameterType	typename Q 
>61	Parameter	 
>62	Identifier	b
>63	ParameterType	const Q &
>64	Parameter	 
>65	Identifier	a
>66	ParameterType	const Q &
>67	ReturnType	EIGEN_DONT_INLINE Q
>68	CompoundStatement	 
>69	ReturnStatement	 
>70	CallExpression	a . slerp ( t , b )
>71	ArgumentList	t
>72	Argument	b
>73	Identifier	b
>74	Argument	t
>75	Identifier	t
>76	Callee	a . slerp
>77	MemberAccess	a . slerp
>78	Identifier	slerp
>79	Identifier	a
>87	FunctionDef	slerp_legacy (const Q & a , const Q & b , typename Q 
>88	ParameterList	const Q & a , const Q & b , typename Q 
>89	Parameter	 
>90	Identifier	t
>91	ParameterType	typename Q 
>92	Parameter	 
>93	Identifier	b
>94	ParameterType	const Q &
>95	Parameter	 
>96	Identifier	a
>97	ParameterType	const Q &
>98	ReturnType	EIGEN_DONT_INLINE Q
>99	CompoundStatement	 
>100	ReturnStatement	 
>101	CallExpression	Q ( scale0 * a . coeffs ( ) + scale1 * b . coeffs ( ) )
>102	ArgumentList	scale0 * a . coeffs ( ) + scale1 * b . coeffs ( )
>103	Argument	scale0 * a . coeffs ( ) + scale1 * b . coeffs ( )
>104	AdditiveExpression	scale0 * a . coeffs ( ) + scale1 * b . coeffs ( )
>105	MultiplicativeExpression	scale1 * b . coeffs ( )
>106	CallExpression	b . coeffs ( )
>107	ArgumentList	 
>108	Callee	b . coeffs
>109	MemberAccess	b . coeffs
>110	Identifier	coeffs
>111	Identifier	b
>112	Identifier	scale1
>113	MultiplicativeExpression	scale0 * a . coeffs ( )
>114	CallExpression	a . coeffs ( )
>115	ArgumentList	 
>116	Callee	a . coeffs
>117	MemberAccess	a . coeffs
>118	Identifier	coeffs
>119	Identifier	a
>120	Identifier	scale0
>121	Callee	Q
>122	Identifier	Q
>123	IfStatement	if ( d < 0 )
>124	ExpressionStatement	 
>125	AssignmentExpr	scale1 = - scale1
>126	UnaryOp	- scale1
>127	Identifier	scale1
>128	UnaryOperator	-
>129	Identifier	scale1
>130	Condition	 
>131	RelationalExpression	d < 0
>132	PrimaryExpression	0
>133	Identifier	d
>134	IdentifierDeclStatement	 
>135	IdentifierDecl	scale1 = internal 
>136	AssignmentExpr	scale1 = internal 
>137	MultiplicativeExpression	internal 
>138	Identifier	sinTheta
>139	CallExpression	internal 
>140	ArgumentList	t * theta
>141	Argument	t * theta
>142	MultiplicativeExpression	t * theta
>143	Identifier	theta
>144	Identifier	t
>145	Callee	internal 
>146	Identifier	internal 
>147	Identifier	scale1
>148	Identifier	scale1
>149	IdentifierDeclType	Scalar
>150	IdentifierDeclStatement	 
>151	IdentifierDecl	scale0 = internal 
>152	AssignmentExpr	scale0 = internal 
>153	MultiplicativeExpression	internal 
>154	Identifier	sinTheta
>155	CallExpression	internal 
>156	ArgumentList	( Scalar ( 1 ) - t ) * theta
>157	Argument	( Scalar ( 1 ) - t ) * theta
>158	MultiplicativeExpression	( Scalar ( 1 ) - t ) * theta
>159	Identifier	theta
>160	AdditiveExpression	Scalar ( 1 ) - t
>161	Identifier	t
>162	CallExpression	Scalar ( 1 )
>163	ArgumentList	1
>164	Argument	1
>165	PrimaryExpression	1
>166	Callee	Scalar
>167	Identifier	Scalar
>168	Callee	internal 
>169	Identifier	internal 
>170	Identifier	scale0
>171	Identifier	scale0
>172	IdentifierDeclType	Scalar
>173	IdentifierDeclStatement	 
>174	IdentifierDecl	sinTheta = internal 
>175	AssignmentExpr	sinTheta = internal 
>176	CallExpression	internal 
>177	ArgumentList	theta
>178	Argument	theta
>179	Identifier	theta
>180	Callee	internal 
>181	Identifier	internal 
>182	Identifier	sinTheta
>183	Identifier	sinTheta
>184	IdentifierDeclType	Scalar
>185	IdentifierDeclStatement	 
>186	IdentifierDecl	theta = std 
>187	AssignmentExpr	theta = std 
>188	CallExpression	std 
>189	ArgumentList	absD
>190	Argument	absD
>191	Identifier	absD
>192	Callee	std 
>193	Identifier	std 
>194	Identifier	theta
>195	Identifier	theta
>196	IdentifierDeclType	Scalar
>197	IfStatement	if ( absD >= one )
>198	ReturnStatement	 
>199	Identifier	a
>200	Condition	 
>201	RelationalExpression	absD >= one
>202	Identifier	one
>203	Identifier	absD
>204	IdentifierDeclStatement	 
>205	IdentifierDecl	absD = internal 
>206	AssignmentExpr	absD = internal 
>207	CallExpression	internal 
>208	ArgumentList	d
>209	Argument	d
>210	Identifier	d
>211	Callee	internal 
>212	Identifier	internal 
>213	Identifier	absD
>214	Identifier	absD
>215	IdentifierDeclType	Scalar
>216	IdentifierDeclStatement	 
>217	IdentifierDecl	d = a . dot ( b )
>218	AssignmentExpr	d = a . dot ( b )
>219	CallExpression	a . dot ( b )
>220	ArgumentList	b
>221	Argument	b
>222	Identifier	b
>223	Callee	a . dot
>224	MemberAccess	a . dot
>225	Identifier	dot
>226	Identifier	a
>227	Identifier	d
>228	Identifier	d
>229	IdentifierDeclType	Scalar
>230	ExpressionStatement	 
>231	Statement	 
>232	Statement	 
>233	Statement	 
>234	Statement	 
>235	Statement	 
>236	Statement	 
>237	Statement	 
>238	Statement	 
>239	Statement	 
>240	Statement	 
>241	Statement	 
>242	Statement	 
>243	Statement	 
>244	Statement	 
>245	Statement	 
>246	Statement	 
>247	IdentifierDeclStatement	 
>248	IdentifierDecl	Scalar
>249	Identifier	Scalar
>250	IdentifierDeclType	typename Q 
>272	FunctionDef	slerp_legacy_nlerp (const Q & a , const Q & b , typename Q 
>273	ParameterList	const Q & a , const Q & b , typename Q 
>274	Parameter	 
>275	Identifier	t
>276	ParameterType	typename Q 
>277	Parameter	 
>278	Identifier	b
>279	ParameterType	const Q &
>280	Parameter	 
>281	Identifier	a
>282	ParameterType	const Q &
>283	ReturnType	EIGEN_DONT_INLINE Q
>284	CompoundStatement	 
>285	ReturnStatement	 
>286	CallExpression	Q ( scale0 * a . coeffs ( ) + scale1 * b . coeffs ( ) )
>287	ArgumentList	scale0 * a . coeffs ( ) + scale1 * b . coeffs ( )
>288	Argument	scale0 * a . coeffs ( ) + scale1 * b . coeffs ( )
>289	AdditiveExpression	scale0 * a . coeffs ( ) + scale1 * b . coeffs ( )
>290	MultiplicativeExpression	scale1 * b . coeffs ( )
>291	CallExpression	b . coeffs ( )
>292	ArgumentList	 
>293	Callee	b . coeffs
>294	MemberAccess	b . coeffs
>295	Identifier	coeffs
>296	Identifier	b
>297	Identifier	scale1
>298	MultiplicativeExpression	scale0 * a . coeffs ( )
>299	CallExpression	a . coeffs ( )
>300	ArgumentList	 
>301	Callee	a . coeffs
>302	MemberAccess	a . coeffs
>303	Identifier	coeffs
>304	Identifier	a
>305	Identifier	scale0
>306	Callee	Q
>307	Identifier	Q
>308	IfStatement	if ( absD >= one )
>309	ElseStatement	else
>310	CompoundStatement	 
>311	IfStatement	if ( d < 0 )
>312	ExpressionStatement	 
>313	AssignmentExpr	scale1 = - scale1
>314	UnaryOp	- scale1
>315	Identifier	scale1
>316	UnaryOperator	-
>317	Identifier	scale1
>318	Condition	 
>319	RelationalExpression	d < 0
>320	PrimaryExpression	0
>321	Identifier	d
>322	ExpressionStatement	 
>323	AssignmentExpr	scale1 = internal 
>324	MultiplicativeExpression	internal 
>325	Identifier	sinTheta
>326	CallExpression	internal 
>327	ArgumentList	t * theta
>328	Argument	t * theta
>329	MultiplicativeExpression	t * theta
>330	Identifier	theta
>331	Identifier	t
>332	Callee	internal 
>333	Identifier	internal 
>334	Identifier	scale1
>335	ExpressionStatement	 
>336	AssignmentExpr	scale0 = internal 
>337	MultiplicativeExpression	internal 
>338	Identifier	sinTheta
>339	CallExpression	internal 
>340	ArgumentList	( Scalar ( 1 ) - t ) * theta
>341	Argument	( Scalar ( 1 ) - t ) * theta
>342	MultiplicativeExpression	( Scalar ( 1 ) - t ) * theta
>343	Identifier	theta
>344	AdditiveExpression	Scalar ( 1 ) - t
>345	Identifier	t
>346	CallExpression	Scalar ( 1 )
>347	ArgumentList	1
>348	Argument	1
>349	PrimaryExpression	1
>350	Callee	Scalar
>351	Identifier	Scalar
>352	Callee	internal 
>353	Identifier	internal 
>354	Identifier	scale0
>355	IdentifierDeclStatement	 
>356	IdentifierDecl	sinTheta = internal 
>357	AssignmentExpr	sinTheta = internal 
>358	CallExpression	internal 
>359	ArgumentList	theta
>360	Argument	theta
>361	Identifier	theta
>362	Callee	internal 
>363	Identifier	internal 
>364	Identifier	sinTheta
>365	Identifier	sinTheta
>366	IdentifierDeclType	Scalar
>367	IdentifierDeclStatement	 
>368	IdentifierDecl	theta = std 
>369	AssignmentExpr	theta = std 
>370	CallExpression	std 
>371	ArgumentList	absD
>372	Argument	absD
>373	Identifier	absD
>374	Callee	std 
>375	Identifier	std 
>376	Identifier	theta
>377	Identifier	theta
>378	IdentifierDeclType	Scalar
>379	CompoundStatement	 
>380	ExpressionStatement	 
>381	AssignmentExpr	scale1 = t
>382	Identifier	t
>383	Identifier	scale1
>384	ExpressionStatement	 
>385	AssignmentExpr	scale0 = Scalar ( 1 ) - t
>386	AdditiveExpression	Scalar ( 1 ) - t
>387	Identifier	t
>388	CallExpression	Scalar ( 1 )
>389	ArgumentList	1
>390	Argument	1
>391	PrimaryExpression	1
>392	Callee	Scalar
>393	Identifier	Scalar
>394	Identifier	scale0
>395	Condition	 
>396	RelationalExpression	absD >= one
>397	Identifier	one
>398	Identifier	absD
>399	IdentifierDeclStatement	 
>400	IdentifierDecl	scale1
>401	Identifier	scale1
>402	IdentifierDeclType	Scalar
>403	IdentifierDeclStatement	 
>404	IdentifierDecl	scale0
>405	Identifier	scale0
>406	IdentifierDeclType	Scalar
>407	IdentifierDeclStatement	 
>408	IdentifierDecl	absD = internal 
>409	AssignmentExpr	absD = internal 
>410	CallExpression	internal 
>411	ArgumentList	d
>412	Argument	d
>413	Identifier	d
>414	Callee	internal 
>415	Identifier	internal 
>416	Identifier	absD
>417	Identifier	absD
>418	IdentifierDeclType	Scalar
>419	IdentifierDeclStatement	 
>420	IdentifierDecl	d = a . dot ( b )
>421	AssignmentExpr	d = a . dot ( b )
>422	CallExpression	a . dot ( b )
>423	ArgumentList	b
>424	Argument	b
>425	Identifier	b
>426	Callee	a . dot
>427	MemberAccess	a . dot
>428	Identifier	dot
>429	Identifier	a
>430	Identifier	d
>431	Identifier	d
>432	IdentifierDeclType	Scalar
>433	ExpressionStatement	 
>434	Statement	 
>435	Statement	 
>436	Statement	 
>437	Statement	 
>438	Statement	 
>439	Statement	 
>440	Statement	 
>441	Statement	 
>442	Statement	 
>443	Statement	 
>444	Statement	 
>445	Statement	 
>446	Statement	 
>447	Statement	 
>448	Statement	 
>449	Statement	 
>450	IdentifierDeclStatement	 
>451	IdentifierDecl	Scalar
>452	Identifier	Scalar
>453	IdentifierDeclType	typename Q 
>475	FunctionDef	sin_over_x (T x)
>476	ParameterList	T x
>477	Parameter	 
>478	Identifier	x
>479	ParameterType	T
>480	ReturnType	inline T
>481	CompoundStatement	 
>482	IfStatement	if ( T ( 1 ) + x * x == T ( 1 ) )
>483	ElseStatement	else
>484	ReturnStatement	 
>485	MultiplicativeExpression	std 
>486	Identifier	x
>487	CallExpression	std 
>488	ArgumentList	x
>489	Argument	x
>490	Identifier	x
>491	Callee	std 
>492	Identifier	std 
>493	ReturnStatement	 
>494	CallExpression	T ( 1 )
>495	ArgumentList	1
>496	Argument	1
>497	PrimaryExpression	1
>498	Callee	T
>499	Identifier	T
>500	Condition	 
>501	EqualityExpression	T ( 1 ) + x * x == T ( 1 )
>502	CallExpression	T ( 1 )
>503	ArgumentList	1
>504	Argument	1
>505	PrimaryExpression	1
>506	Callee	T
>507	Identifier	T
>508	AdditiveExpression	T ( 1 ) + x * x
>509	MultiplicativeExpression	x * x
>510	Identifier	x
>511	Identifier	x
>512	CallExpression	T ( 1 )
>513	ArgumentList	1
>514	Argument	1
>515	PrimaryExpression	1
>516	Callee	T
>517	Identifier	T
>524	FunctionDef	slerp_rw (const Q & a , const Q & b , typename Q 
>525	ParameterList	const Q & a , const Q & b , typename Q 
>526	Parameter	 
>527	Identifier	t
>528	ParameterType	typename Q 
>529	Parameter	 
>530	Identifier	b
>531	ParameterType	const Q &
>532	Parameter	 
>533	Identifier	a
>534	ParameterType	const Q &
>535	ReturnType	EIGEN_DONT_INLINE Q
>536	CompoundStatement	 
>537	ReturnStatement	 
>538	RelationalExpression	Quaternion < Scalar > ( scale0 * a . coeffs ( ) + scale1 * b . coeffs ( ) )
>539	RelationalExpression	Scalar > ( scale0 * a . coeffs ( ) + scale1 * b . coeffs ( ) )
>540	AdditiveExpression	scale0 * a . coeffs ( ) + scale1 * b . coeffs ( )
>541	MultiplicativeExpression	scale1 * b . coeffs ( )
>542	CallExpression	b . coeffs ( )
>543	ArgumentList	 
>544	Callee	b . coeffs
>545	MemberAccess	b . coeffs
>546	Identifier	coeffs
>547	Identifier	b
>548	Identifier	scale1
>549	MultiplicativeExpression	scale0 * a . coeffs ( )
>550	CallExpression	a . coeffs ( )
>551	ArgumentList	 
>552	Callee	a . coeffs
>553	MemberAccess	a . coeffs
>554	Identifier	coeffs
>555	Identifier	a
>556	Identifier	scale0
>557	Identifier	Scalar
>558	Identifier	Quaternion
>559	IfStatement	if ( d < 0 )
>560	ExpressionStatement	 
>561	AssignmentExpr	scale1 = - scale1
>562	UnaryOp	- scale1
>563	Identifier	scale1
>564	UnaryOperator	-
>565	Identifier	scale1
>566	Condition	 
>567	RelationalExpression	d < 0
>568	PrimaryExpression	0
>569	Identifier	d
>570	IdentifierDeclStatement	 
>571	IdentifierDecl	scale1 = t * sin_over_x ( ( t * theta ) ) / sinOverTheta
>572	AssignmentExpr	scale1 = t * sin_over_x ( ( t * theta ) ) / sinOverTheta
>573	MultiplicativeExpression	t * sin_over_x ( ( t * theta ) ) / sinOverTheta
>574	MultiplicativeExpression	sin_over_x ( ( t * theta ) ) / sinOverTheta
>575	Identifier	sinOverTheta
>576	CallExpression	sin_over_x ( ( t * theta ) )
>577	ArgumentList	t * theta
>578	Argument	t * theta
>579	MultiplicativeExpression	t * theta
>580	Identifier	theta
>581	Identifier	t
>582	Callee	sin_over_x
>583	Identifier	sin_over_x
>584	Identifier	t
>585	Identifier	scale1
>586	Identifier	scale1
>587	IdentifierDeclType	Scalar
>588	IdentifierDeclStatement	 
>589	IdentifierDecl	scale0 = ( Scalar ( 1 ) - t ) * sin_over_x ( ( Scalar ( 1 ) - t ) * theta ) / sinOverTheta
>590	AssignmentExpr	scale0 = ( Scalar ( 1 ) - t ) * sin_over_x ( ( Scalar ( 1 ) - t ) * theta ) / sinOverTheta
>591	MultiplicativeExpression	( Scalar ( 1 ) - t ) * sin_over_x ( ( Scalar ( 1 ) - t ) * theta ) / sinOverTheta
>592	MultiplicativeExpression	sin_over_x ( ( Scalar ( 1 ) - t ) * theta ) / sinOverTheta
>593	Identifier	sinOverTheta
>594	CallExpression	sin_over_x ( ( Scalar ( 1 ) - t ) * theta )
>595	ArgumentList	( Scalar ( 1 ) - t ) * theta
>596	Argument	( Scalar ( 1 ) - t ) * theta
>597	MultiplicativeExpression	( Scalar ( 1 ) - t ) * theta
>598	Identifier	theta
>599	AdditiveExpression	Scalar ( 1 ) - t
>600	Identifier	t
>601	CallExpression	Scalar ( 1 )
>602	ArgumentList	1
>603	Argument	1
>604	PrimaryExpression	1
>605	Callee	Scalar
>606	Identifier	Scalar
>607	Callee	sin_over_x
>608	Identifier	sin_over_x
>609	AdditiveExpression	Scalar ( 1 ) - t
>610	Identifier	t
>611	CallExpression	Scalar ( 1 )
>612	ArgumentList	1
>613	Argument	1
>614	PrimaryExpression	1
>615	Callee	Scalar
>616	Identifier	Scalar
>617	Identifier	scale0
>618	Identifier	scale0
>619	IdentifierDeclType	Scalar
>620	IdentifierDeclStatement	 
>621	IdentifierDecl	sinOverTheta = sin_over_x ( theta )
>622	AssignmentExpr	sinOverTheta = sin_over_x ( theta )
>623	CallExpression	sin_over_x ( theta )
>624	ArgumentList	theta
>625	Argument	theta
>626	Identifier	theta
>627	Callee	sin_over_x
>628	Identifier	sin_over_x
>629	Identifier	sinOverTheta
>630	Identifier	sinOverTheta
>631	IdentifierDeclType	Scalar
>632	IfStatement	if ( d < 0.0 )
>633	ElseStatement	else
>634	ExpressionStatement	 
>635	AssignmentExpr	theta = Scalar ( 2 ) * std 
>636	MultiplicativeExpression	Scalar ( 2 ) * std 
>637	CallExpression	std 
>638	ArgumentList	( a . coeffs ( ) - b . coeffs ( ) ) . norm ( ) / 2
>639	Argument	( a . coeffs ( ) - b . coeffs ( ) ) . norm ( ) / 2
>640	MultiplicativeExpression	( a . coeffs ( ) - b . coeffs ( ) ) . norm ( ) / 2
>641	PrimaryExpression	2
>642	CallExpression	( a . coeffs ( ) - b . coeffs ( ) ) . norm ( )
>643	ArgumentList	 
>644	Callee	( a . coeffs ( ) - b . coeffs ( ) ) . norm
>645	MemberAccess	( a . coeffs ( ) - b . coeffs ( ) ) . norm
>646	Identifier	norm
>647	AdditiveExpression	a . coeffs ( ) - b . coeffs ( )
>648	CallExpression	b . coeffs ( )
>649	ArgumentList	 
>650	Callee	b . coeffs
>651	MemberAccess	b . coeffs
>652	Identifier	coeffs
>653	Identifier	b
>654	CallExpression	a . coeffs ( )
>655	ArgumentList	 
>656	Callee	a . coeffs
>657	MemberAccess	a . coeffs
>658	Identifier	coeffs
>659	Identifier	a
>660	Callee	std 
>661	Identifier	std 
>662	CallExpression	Scalar ( 2 )
>663	ArgumentList	2
>664	Argument	2
>665	PrimaryExpression	2
>666	Callee	Scalar
>667	Identifier	Scalar
>668	Identifier	theta
>669	ExpressionStatement	 
>670	AssignmentExpr	theta = Scalar ( 2 ) * std 
>671	MultiplicativeExpression	Scalar ( 2 ) * std 
>672	CallExpression	std 
>673	ArgumentList	( a . coeffs ( ) + b . coeffs ( ) ) . norm ( ) / 2
>674	Argument	( a . coeffs ( ) + b . coeffs ( ) ) . norm ( ) / 2
>675	MultiplicativeExpression	( a . coeffs ( ) + b . coeffs ( ) ) . norm ( ) / 2
>676	PrimaryExpression	2
>677	CallExpression	( a . coeffs ( ) + b . coeffs ( ) ) . norm ( )
>678	ArgumentList	 
>679	Callee	( a . coeffs ( ) + b . coeffs ( ) ) . norm
>680	MemberAccess	( a . coeffs ( ) + b . coeffs ( ) ) . norm
>681	Identifier	norm
>682	AdditiveExpression	a . coeffs ( ) + b . coeffs ( )
>683	CallExpression	b . coeffs ( )
>684	ArgumentList	 
>685	Callee	b . coeffs
>686	MemberAccess	b . coeffs
>687	Identifier	coeffs
>688	Identifier	b
>689	CallExpression	a . coeffs ( )
>690	ArgumentList	 
>691	Callee	a . coeffs
>692	MemberAccess	a . coeffs
>693	Identifier	coeffs
>694	Identifier	a
>695	Callee	std 
>696	Identifier	std 
>697	CallExpression	Scalar ( 2 )
>698	ArgumentList	2
>699	Argument	2
>700	PrimaryExpression	2
>701	Callee	Scalar
>702	Identifier	Scalar
>703	Identifier	theta
>704	Condition	 
>705	RelationalExpression	d < 0.0
>706	PrimaryExpression	0.0
>707	Identifier	d
>708	IdentifierDeclStatement	 
>709	IdentifierDecl	theta
>710	Identifier	theta
>711	IdentifierDeclType	Scalar
>712	IdentifierDeclStatement	 
>713	IdentifierDecl	d = a . dot ( b )
>714	AssignmentExpr	d = a . dot ( b )
>715	CallExpression	a . dot ( b )
>716	ArgumentList	b
>717	Argument	b
>718	Identifier	b
>719	Callee	a . dot
>720	MemberAccess	a . dot
>721	Identifier	dot
>722	Identifier	a
>723	Identifier	d
>724	Identifier	d
>725	IdentifierDeclType	Scalar
>726	IdentifierDeclStatement	 
>727	IdentifierDecl	Scalar
>728	Identifier	Scalar
>729	IdentifierDeclType	typename Q 
>750	FunctionDef	slerp_gael (const Q & a , const Q & b , typename Q 
>751	ParameterList	const Q & a , const Q & b , typename Q 
>752	Parameter	 
>753	Identifier	t
>754	ParameterType	typename Q 
>755	Parameter	 
>756	Identifier	b
>757	ParameterType	const Q &
>758	Parameter	 
>759	Identifier	a
>760	ParameterType	const Q &
>761	ReturnType	EIGEN_DONT_INLINE Q
>762	CompoundStatement	 
>763	ReturnStatement	 
>764	RelationalExpression	Quaternion < Scalar > ( scale0 * a . coeffs ( ) + scale1 * b . coeffs ( ) )
>765	RelationalExpression	Scalar > ( scale0 * a . coeffs ( ) + scale1 * b . coeffs ( ) )
>766	AdditiveExpression	scale0 * a . coeffs ( ) + scale1 * b . coeffs ( )
>767	MultiplicativeExpression	scale1 * b . coeffs ( )
>768	CallExpression	b . coeffs ( )
>769	ArgumentList	 
>770	Callee	b . coeffs
>771	MemberAccess	b . coeffs
>772	Identifier	coeffs
>773	Identifier	b
>774	Identifier	scale1
>775	MultiplicativeExpression	scale0 * a . coeffs ( )
>776	CallExpression	a . coeffs ( )
>777	ArgumentList	 
>778	Callee	a . coeffs
>779	MemberAccess	a . coeffs
>780	Identifier	coeffs
>781	Identifier	a
>782	Identifier	scale0
>783	Identifier	Scalar
>784	Identifier	Quaternion
>785	IfStatement	if ( theta * theta - Scalar ( 6 ) == - Scalar ( 6 ) )
>786	ElseStatement	else
>787	CompoundStatement	 
>788	IfStatement	if ( d < 0 )
>789	ExpressionStatement	 
>790	AssignmentExpr	scale1 = - scale1
>791	UnaryOp	- scale1
>792	Identifier	scale1
>793	UnaryOperator	-
>794	Identifier	scale1
>795	Condition	 
>796	RelationalExpression	d < 0
>797	PrimaryExpression	0
>798	Identifier	d
>799	ExpressionStatement	 
>800	AssignmentExpr	scale1 = internal 
>801	MultiplicativeExpression	internal 
>802	Identifier	sinTheta
>803	CallExpression	internal 
>804	ArgumentList	t * theta
>805	Argument	t * theta
>806	MultiplicativeExpression	t * theta
>807	Identifier	theta
>808	Identifier	t
>809	Callee	internal 
>810	Identifier	internal 
>811	Identifier	scale1
>812	ExpressionStatement	 
>813	AssignmentExpr	scale0 = internal 
>814	MultiplicativeExpression	internal 
>815	Identifier	sinTheta
>816	CallExpression	internal 
>817	ArgumentList	( Scalar ( 1 ) - t ) * theta
>818	Argument	( Scalar ( 1 ) - t ) * theta
>819	MultiplicativeExpression	( Scalar ( 1 ) - t ) * theta
>820	Identifier	theta
>821	AdditiveExpression	Scalar ( 1 ) - t
>822	Identifier	t
>823	CallExpression	Scalar ( 1 )
>824	ArgumentList	1
>825	Argument	1
>826	PrimaryExpression	1
>827	Callee	Scalar
>828	Identifier	Scalar
>829	Callee	internal 
>830	Identifier	internal 
>831	Identifier	scale0
>832	IdentifierDeclStatement	 
>833	IdentifierDecl	sinTheta = std 
>834	AssignmentExpr	sinTheta = std 
>835	CallExpression	std 
>836	ArgumentList	theta
>837	Argument	theta
>838	Identifier	theta
>839	Callee	std 
>840	Identifier	std 
>841	Identifier	sinTheta
>842	Identifier	sinTheta
>843	IdentifierDeclType	Scalar
>844	CompoundStatement	 
>845	ExpressionStatement	 
>846	AssignmentExpr	scale1 = t
>847	Identifier	t
>848	Identifier	scale1
>849	ExpressionStatement	 
>850	AssignmentExpr	scale0 = Scalar ( 1 ) - t
>851	AdditiveExpression	Scalar ( 1 ) - t
>852	Identifier	t
>853	CallExpression	Scalar ( 1 )
>854	ArgumentList	1
>855	Argument	1
>856	PrimaryExpression	1
>857	Callee	Scalar
>858	Identifier	Scalar
>859	Identifier	scale0
>860	Condition	 
>861	EqualityExpression	theta * theta - Scalar ( 6 ) == - Scalar ( 6 )
>862	UnaryOp	- Scalar ( 6 )
>863	CallExpression	Scalar ( 6 )
>864	ArgumentList	6
>865	Argument	6
>866	PrimaryExpression	6
>867	Callee	Scalar
>868	Identifier	Scalar
>869	UnaryOperator	-
>870	AdditiveExpression	theta * theta - Scalar ( 6 )
>871	CallExpression	Scalar ( 6 )
>872	ArgumentList	6
>873	Argument	6
>874	PrimaryExpression	6
>875	Callee	Scalar
>876	Identifier	Scalar
>877	MultiplicativeExpression	theta * theta
>878	Identifier	theta
>879	Identifier	theta
>880	IdentifierDeclStatement	 
>881	IdentifierDecl	scale1
>882	Identifier	scale1
>883	IdentifierDeclType	Scalar
>884	IdentifierDeclStatement	 
>885	IdentifierDecl	scale0
>886	Identifier	scale0
>887	IdentifierDeclType	Scalar
>888	IfStatement	if ( d < 0.0 )
>889	ElseStatement	else
>890	ExpressionStatement	 
>891	AssignmentExpr	theta = Scalar ( 2 ) * std 
>892	MultiplicativeExpression	Scalar ( 2 ) * std 
>893	CallExpression	std 
>894	ArgumentList	( a . coeffs ( ) - b . coeffs ( ) ) . norm ( ) / 2
>895	Argument	( a . coeffs ( ) - b . coeffs ( ) ) . norm ( ) / 2
>896	MultiplicativeExpression	( a . coeffs ( ) - b . coeffs ( ) ) . norm ( ) / 2
>897	PrimaryExpression	2
>898	CallExpression	( a . coeffs ( ) - b . coeffs ( ) ) . norm ( )
>899	ArgumentList	 
>900	Callee	( a . coeffs ( ) - b . coeffs ( ) ) . norm
>901	MemberAccess	( a . coeffs ( ) - b . coeffs ( ) ) . norm
>902	Identifier	norm
>903	AdditiveExpression	a . coeffs ( ) - b . coeffs ( )
>904	CallExpression	b . coeffs ( )
>905	ArgumentList	 
>906	Callee	b . coeffs
>907	MemberAccess	b . coeffs
>908	Identifier	coeffs
>909	Identifier	b
>910	CallExpression	a . coeffs ( )
>911	ArgumentList	 
>912	Callee	a . coeffs
>913	MemberAccess	a . coeffs
>914	Identifier	coeffs
>915	Identifier	a
>916	Callee	std 
>917	Identifier	std 
>918	CallExpression	Scalar ( 2 )
>919	ArgumentList	2
>920	Argument	2
>921	PrimaryExpression	2
>922	Callee	Scalar
>923	Identifier	Scalar
>924	Identifier	theta
>925	ExpressionStatement	 
>926	AssignmentExpr	theta = Scalar ( 2 ) * std 
>927	MultiplicativeExpression	Scalar ( 2 ) * std 
>928	CallExpression	std 
>929	ArgumentList	( - a . coeffs ( ) - b . coeffs ( ) ) . norm ( ) / 2
>930	Argument	( - a . coeffs ( ) - b . coeffs ( ) ) . norm ( ) / 2
>931	MultiplicativeExpression	( - a . coeffs ( ) - b . coeffs ( ) ) . norm ( ) / 2
>932	PrimaryExpression	2
>933	CallExpression	( - a . coeffs ( ) - b . coeffs ( ) ) . norm ( )
>934	ArgumentList	 
>935	Callee	( - a . coeffs ( ) - b . coeffs ( ) ) . norm
>936	MemberAccess	( - a . coeffs ( ) - b . coeffs ( ) ) . norm
>937	Identifier	norm
>938	AdditiveExpression	- a . coeffs ( ) - b . coeffs ( )
>939	CallExpression	b . coeffs ( )
>940	ArgumentList	 
>941	Callee	b . coeffs
>942	MemberAccess	b . coeffs
>943	Identifier	coeffs
>944	Identifier	b
>945	UnaryOp	- a . coeffs ( )
>946	CallExpression	a . coeffs ( )
>947	ArgumentList	 
>948	Callee	a . coeffs
>949	MemberAccess	a . coeffs
>950	Identifier	coeffs
>951	Identifier	a
>952	UnaryOperator	-
>953	Callee	std 
>954	Identifier	std 
>955	CallExpression	Scalar ( 2 )
>956	ArgumentList	2
>957	Argument	2
>958	PrimaryExpression	2
>959	Callee	Scalar
>960	Identifier	Scalar
>961	Identifier	theta
>962	Condition	 
>963	RelationalExpression	d < 0.0
>964	PrimaryExpression	0.0
>965	Identifier	d
>966	IdentifierDeclStatement	 
>967	IdentifierDecl	theta
>968	Identifier	theta
>969	IdentifierDeclType	Scalar
>970	IdentifierDeclStatement	 
>971	IdentifierDecl	d = a . dot ( b )
>972	AssignmentExpr	d = a . dot ( b )
>973	CallExpression	a . dot ( b )
>974	ArgumentList	b
>975	Argument	b
>976	Identifier	b
>977	Callee	a . dot
>978	MemberAccess	a . dot
>979	Identifier	dot
>980	Identifier	a
>981	Identifier	d
>982	Identifier	d
>983	IdentifierDeclType	Scalar
>984	IdentifierDeclStatement	 
>985	IdentifierDecl	Scalar
>986	Identifier	Scalar
>987	IdentifierDeclType	typename Q 
>1009	FunctionDef	main ()
>1010	ParameterList	 
>1011	ReturnType	int
>1012	CompoundStatement	 
>1013	ExpressionStatement	 
>1014	CallExpression	BENCH ( slerp_gael )
>1015	ArgumentList	slerp_gael
>1016	Argument	slerp_gael
>1017	Identifier	slerp_gael
>1018	Callee	BENCH
>1019	Identifier	BENCH
>1020	ExpressionStatement	 
>1021	CallExpression	BENCH ( slerp_rw )
>1022	ArgumentList	slerp_rw
>1023	Argument	slerp_rw
>1024	Identifier	slerp_rw
>1025	Callee	BENCH
>1026	Identifier	BENCH
>1027	ExpressionStatement	 
>1028	CallExpression	BENCH ( slerp_legacy_nlerp )
>1029	ArgumentList	slerp_legacy_nlerp
>1030	Argument	slerp_legacy_nlerp
>1031	Identifier	slerp_legacy_nlerp
>1032	Callee	BENCH
>1033	Identifier	BENCH
>1034	ExpressionStatement	 
>1035	CallExpression	BENCH ( slerp_legacy )
>1036	ArgumentList	slerp_legacy
>1037	Argument	slerp_legacy
>1038	Identifier	slerp_legacy
>1039	Callee	BENCH
>1040	Identifier	BENCH
>1041	ExpressionStatement	 
>1042	CallExpression	BENCH ( slerp_eigen )
>1043	ArgumentList	slerp_eigen
>1044	Argument	slerp_eigen
>1045	Identifier	slerp_eigen
>1046	Callee	BENCH
>1047	Identifier	BENCH
>1048	ExpressionStatement	 
>1049	CallExpression	BENCH ( nlerp )
>1050	ArgumentList	nlerp
>1051	Argument	nlerp
>1052	Identifier	nlerp
>1053	Callee	BENCH
>1054	Identifier	BENCH
>1055	ExpressionStatement	 
>1056	ShiftExpression	cout << \"\nSpeed
>1057	ShiftExpression	\"\nSpeed
>1058	Identifier	std 
>1059	PrimaryExpression	\"\nSpeed
>1060	Identifier	cout
>1061	CompoundStatement	 
>1062	ExpressionStatement	 
>1063	ShiftExpression	cout << \"  \" << FUNC << \" => \t \" << t . value ( ) << \"s\n\"
>1064	ShiftExpression	\"  \" << FUNC << \" => \t \" << t . value ( ) << \"s\n\"
>1065	ShiftExpression	FUNC << \" => \t \" << t . value ( ) << \"s\n\"
>1066	ShiftExpression	\" => \t \" << t . value ( ) << \"s\n\"
>1067	ShiftExpression	t . value ( ) << \"s\n\"
>1068	PrimaryExpression	\"s\n\"
>1069	CallExpression	t . value ( )
>1070	ArgumentList	 
>1071	Callee	t . value
>1072	MemberAccess	t . value
>1073	Identifier	value
>1074	Identifier	t
>1075	PrimaryExpression	\" => \t \"
>1076	Identifier	FUNC
>1077	PrimaryExpression	\"  \"
>1078	Identifier	cout
>1079	ForStatement	for ( int k = 0 ; k < 2 ; ++ k )
>1080	CompoundStatement	 
>1081	ExpressionStatement	 
>1082	CallExpression	t . stop ( )
>1083	ArgumentList	 
>1084	Callee	t . stop
>1085	MemberAccess	t . stop
>1086	Identifier	stop
>1087	Identifier	t
>1088	ForStatement	for ( int i = 0 ; i < 1000000 ; ++ i )
>1089	ExpressionStatement	 
>1090	CallExpression	FUNC ( a , b , s )
>1091	ArgumentList	a
>1092	Argument	s
>1093	Identifier	s
>1094	Argument	b
>1095	Identifier	b
>1096	Argument	a
>1097	Identifier	a
>1098	Callee	FUNC
>1099	Identifier	FUNC
>1100	UnaryExpression	 
>1101	Identifier	i
>1102	IncDec	++
>1103	Condition	 
>1104	RelationalExpression	i < 1000000
>1105	PrimaryExpression	1000000
>1106	Identifier	i
>1107	ForInit	 
>1108	IdentifierDeclStatement	int i = 0 ;
>1109	IdentifierDecl	i = 0
>1110	AssignmentExpr	i = 0
>1111	PrimaryExpression	0
>1112	Identifier	i
>1113	Identifier	i
>1114	IdentifierDeclType	int
>1115	ExpressionStatement	 
>1116	CallExpression	t . start ( )
>1117	ArgumentList	 
>1118	Callee	t . start
>1119	MemberAccess	t . start
>1120	Identifier	start
>1121	Identifier	t
>1122	UnaryExpression	 
>1123	Identifier	k
>1124	IncDec	++
>1125	Condition	 
>1126	RelationalExpression	k < 2
>1127	PrimaryExpression	2
>1128	Identifier	k
>1129	ForInit	 
>1130	IdentifierDeclStatement	int k = 0 ;
>1131	IdentifierDecl	k = 0
>1132	AssignmentExpr	k = 0
>1133	PrimaryExpression	0
>1134	Identifier	k
>1135	Identifier	k
>1136	IdentifierDeclType	int
>1137	IdentifierDeclStatement	 
>1138	IdentifierDecl	t
>1139	Identifier	t
>1140	IdentifierDeclType	BenchTimer
>1141	Statement	 
>1142	Statement	 
>1143	Statement	 
>1144	Statement	 
>1145	Statement	 
>1146	IdentifierDeclStatement	 
>1147	IdentifierDecl	s = 0.65
>1148	AssignmentExpr	s = 0.65
>1149	PrimaryExpression	0.65
>1150	Identifier	s
>1151	Identifier	s
>1152	IdentifierDeclType	float
>1153	ExpressionStatement	 
>1154	CallExpression	b . normalize ( )
>1155	ArgumentList	 
>1156	Callee	b . normalize
>1157	MemberAccess	b . normalize
>1158	Identifier	normalize
>1159	Identifier	b
>1160	ExpressionStatement	 
>1161	CallExpression	b . coeffs ( ) . setRandom ( )
>1162	ArgumentList	 
>1163	Callee	b . coeffs ( ) . setRandom
>1164	MemberAccess	b . coeffs ( ) . setRandom
>1165	Identifier	setRandom
>1166	CallExpression	b . coeffs ( )
>1167	ArgumentList	 
>1168	Callee	b . coeffs
>1169	MemberAccess	b . coeffs
>1170	Identifier	coeffs
>1171	Identifier	b
>1172	ExpressionStatement	 
>1173	CallExpression	a . normalize ( )
>1174	ArgumentList	 
>1175	Callee	a . normalize
>1176	MemberAccess	a . normalize
>1177	Identifier	normalize
>1178	Identifier	a
>1179	ExpressionStatement	 
>1180	CallExpression	a . coeffs ( ) . setRandom ( )
>1181	ArgumentList	 
>1182	Callee	a . coeffs ( ) . setRandom
>1183	MemberAccess	a . coeffs ( ) . setRandom
>1184	Identifier	setRandom
>1185	CallExpression	a . coeffs ( )
>1186	ArgumentList	 
>1187	Callee	a . coeffs
>1188	MemberAccess	a . coeffs
>1189	Identifier	coeffs
>1190	Identifier	a
>1191	IdentifierDeclStatement	 
>1192	IdentifierDecl	b
>1193	Identifier	b
>1194	IdentifierDeclType	Quaternionf
>1195	IdentifierDecl	a
>1196	Identifier	a
>1197	IdentifierDeclType	Quaternionf
>1198	ExpressionStatement	 
>1199	ShiftExpression	cout << \"  avg
>1200	ShiftExpression	\"  avg
>1201	ShiftExpression	avgerr . transpose ( ) << \"\n\"
>1202	PrimaryExpression	\"\n\"
>1203	CallExpression	avgerr . transpose ( )
>1204	ArgumentList	 
>1205	Callee	avgerr . transpose
>1206	MemberAccess	avgerr . transpose
>1207	Identifier	transpose
>1208	Identifier	avgerr
>1209	PrimaryExpression	\"  avg
>1210	Identifier	cout
>1211	ExpressionStatement	 
>1212	ShiftExpression	cout << \"\n\nAccuracy
>1213	ShiftExpression	\"\n\nAccuracy
>1214	ShiftExpression	\"  max
>1215	ShiftExpression	maxerr . transpose ( ) << \"\n\"
>1216	PrimaryExpression	\"\n\"
>1217	CallExpression	maxerr . transpose ( )
>1218	ArgumentList	 
>1219	Callee	maxerr . transpose
>1220	MemberAccess	maxerr . transpose
>1221	Identifier	transpose
>1222	Identifier	maxerr
>1223	PrimaryExpression	\"  max
>1224	PrimaryExpression	\"\n\nAccuracy
>1225	Identifier	cout
>1226	ExpressionStatement	 
>1227	AssignmentExpr	avgerr /= RefScalar ( rep * iters )
>1228	CallExpression	RefScalar ( rep * iters )
>1229	ArgumentList	rep * iters
>1230	Argument	rep * iters
>1231	MultiplicativeExpression	rep * iters
>1232	Identifier	iters
>1233	Identifier	rep
>1234	Callee	RefScalar
>1235	Identifier	RefScalar
>1236	Identifier	avgerr
>1237	ForStatement	for ( int w = 0 ; w < rep ; ++ w )
>1238	CompoundStatement	 
>1239	ForStatement	for ( int i = 0 ; i < iters ; ++ i )
>1240	CompoundStatement	 
>1241	ExpressionStatement	 
>1242	AssignmentExpr	br = cr
>1243	Identifier	cr
>1244	Identifier	br
>1245	ExpressionStatement	 
>1246	Statement	 
>1247	Statement	 
>1248	Statement	 
>1249	Statement	 
>1250	Statement	 
>1251	Statement	 
>1252	Statement	 
>1253	Statement	 
>1254	Statement	 
>1255	Statement	 
>1256	ExpressionStatement	 
>1257	AssignmentExpr	avgerr += err
>1258	Identifier	err
>1259	Identifier	avgerr
>1260	ExpressionStatement	 
>1261	AssignmentExpr	maxerr = maxerr . cwise ( ) . max ( err )
>1262	CallExpression	maxerr . cwise ( ) . max ( err )
>1263	ArgumentList	err
>1264	Argument	err
>1265	Identifier	err
>1266	Callee	maxerr . cwise ( ) . max
>1267	MemberAccess	maxerr . cwise ( ) . max
>1268	Identifier	max
>1269	CallExpression	maxerr . cwise ( )
>1270	ArgumentList	 
>1271	Callee	maxerr . cwise
>1272	MemberAccess	maxerr . cwise
>1273	Identifier	cwise
>1274	Identifier	maxerr
>1275	Identifier	maxerr
>1276	ForStatement	for ( int k = 0 ; k < 6 ; ++ k )
>1277	CompoundStatement	 
>1278	ExpressionStatement	 
>1279	AssignmentExpr	err [ k + 1 ] = ( c [ k ] . coeffs ( ) - refc . coeffs ( ) ) . norm ( )
>1280	CallExpression	( c [ k ] . coeffs ( ) - refc . coeffs ( ) ) . norm ( )
>1281	ArgumentList	 
>1282	Callee	( c [ k ] . coeffs ( ) - refc . coeffs ( ) ) . norm
>1283	MemberAccess	( c [ k ] . coeffs ( ) - refc . coeffs ( ) ) . norm
>1284	Identifier	norm
>1285	AdditiveExpression	c [ k ] . coeffs ( ) - refc . coeffs ( )
>1286	CallExpression	refc . coeffs ( )
>1287	ArgumentList	 
>1288	Callee	refc . coeffs
>1289	MemberAccess	refc . coeffs
>1290	Identifier	coeffs
>1291	Identifier	refc
>1292	CallExpression	c [ k ] . coeffs ( )
>1293	ArgumentList	 
>1294	Callee	c [ k ] . coeffs
>1295	MemberAccess	c [ k ] . coeffs
>1296	Identifier	coeffs
>1297	ArrayIndexing	c [ k ]
>1298	Identifier	k
>1299	Identifier	c
>1300	ArrayIndexing	err [ k + 1 ]
>1301	AdditiveExpression	k + 1
>1302	PrimaryExpression	1
>1303	Identifier	k
>1304	Identifier	err
>1305	UnaryExpression	 
>1306	Identifier	k
>1307	IncDec	++
>1308	Condition	 
>1309	RelationalExpression	k < 6
>1310	PrimaryExpression	6
>1311	Identifier	k
>1312	ForInit	 
>1313	IdentifierDeclStatement	int k = 0 ;
>1314	IdentifierDecl	k = 0
>1315	AssignmentExpr	k = 0
>1316	PrimaryExpression	0
>1317	Identifier	k
>1318	Identifier	k
>1319	IdentifierDeclType	int
>1320	ExpressionStatement	 
>1321	CallExpression	norm ( )
>1322	ArgumentList	 
>1323	Callee	norm
>1324	Identifier	norm
>1325	Statement	 
>1326	Statement	 
>1327	Statement	 
>1328	Statement	 
>1329	Statement	 
>1330	Statement	 
>1331	Statement	 
>1332	Statement	 
>1333	Statement	 
>1334	Statement	 
>1335	Statement	 
>1336	Statement	 
>1337	Statement	 
>1338	Statement	 
>1339	Statement	 
>1340	Statement	 
>1341	Statement	 
>1342	Statement	 
>1343	Statement	 
>1344	Statement	 
>1345	Statement	 
>1346	Statement	 
>1347	Statement	 
>1348	Statement	 
>1349	Statement	 
>1350	Statement	 
>1351	IdentifierDeclStatement	 
>1352	IdentifierDecl	err ( 7 )
>1353	PrimaryExpression	7
>1354	Identifier	err
>1355	IdentifierDeclType	VectorXd
>1356	ExpressionStatement	 
>1357	AssignmentExpr	c [ 5 ] = slerp_gael ( a , b , t )
>1358	CallExpression	slerp_gael ( a , b , t )
>1359	ArgumentList	a
>1360	Argument	t
>1361	Identifier	t
>1362	Argument	b
>1363	Identifier	b
>1364	Argument	a
>1365	Identifier	a
>1366	Callee	slerp_gael
>1367	Identifier	slerp_gael
>1368	ArrayIndexing	c [ 5 ]
>1369	PrimaryExpression	5
>1370	Identifier	c
>1371	ExpressionStatement	 
>1372	AssignmentExpr	c [ 4 ] = slerp_rw ( a , b , t )
>1373	CallExpression	slerp_rw ( a , b , t )
>1374	ArgumentList	a
>1375	Argument	t
>1376	Identifier	t
>1377	Argument	b
>1378	Identifier	b
>1379	Argument	a
>1380	Identifier	a
>1381	Callee	slerp_rw
>1382	Identifier	slerp_rw
>1383	ArrayIndexing	c [ 4 ]
>1384	PrimaryExpression	4
>1385	Identifier	c
>1386	ExpressionStatement	 
>1387	AssignmentExpr	c [ 3 ] = slerp_legacy_nlerp ( a , b , t )
>1388	CallExpression	slerp_legacy_nlerp ( a , b , t )
>1389	ArgumentList	a
>1390	Argument	t
>1391	Identifier	t
>1392	Argument	b
>1393	Identifier	b
>1394	Argument	a
>1395	Identifier	a
>1396	Callee	slerp_legacy_nlerp
>1397	Identifier	slerp_legacy_nlerp
>1398	ArrayIndexing	c [ 3 ]
>1399	PrimaryExpression	3
>1400	Identifier	c
>1401	ExpressionStatement	 
>1402	AssignmentExpr	c [ 2 ] = slerp_legacy ( a , b , t )
>1403	CallExpression	slerp_legacy ( a , b , t )
>1404	ArgumentList	a
>1405	Argument	t
>1406	Identifier	t
>1407	Argument	b
>1408	Identifier	b
>1409	Argument	a
>1410	Identifier	a
>1411	Callee	slerp_legacy
>1412	Identifier	slerp_legacy
>1413	ArrayIndexing	c [ 2 ]
>1414	PrimaryExpression	2
>1415	Identifier	c
>1416	ExpressionStatement	 
>1417	AssignmentExpr	c [ 1 ] = slerp_eigen ( a , b , t )
>1418	CallExpression	slerp_eigen ( a , b , t )
>1419	ArgumentList	a
>1420	Argument	t
>1421	Identifier	t
>1422	Argument	b
>1423	Identifier	b
>1424	Argument	a
>1425	Identifier	a
>1426	Callee	slerp_eigen
>1427	Identifier	slerp_eigen
>1428	ArrayIndexing	c [ 1 ]
>1429	PrimaryExpression	1
>1430	Identifier	c
>1431	ExpressionStatement	 
>1432	AssignmentExpr	c [ 0 ] = nlerp ( a , b , t )
>1433	CallExpression	nlerp ( a , b , t )
>1434	ArgumentList	a
>1435	Argument	t
>1436	Identifier	t
>1437	Argument	b
>1438	Identifier	b
>1439	Argument	a
>1440	Identifier	a
>1441	Callee	nlerp
>1442	Identifier	nlerp
>1443	ArrayIndexing	c [ 0 ]
>1444	PrimaryExpression	0
>1445	Identifier	c
>1446	ExpressionStatement	 
>1447	Statement	 
>1448	Statement	 
>1449	Statement	 
>1450	Statement	 
>1451	Statement	 
>1452	Statement	 
>1453	Statement	 
>1454	Statement	 
>1455	Statement	 
>1456	Statement	 
>1457	Statement	 
>1458	ExpressionStatement	 
>1459	AssignmentExpr	cr = slerp_rw ( ar , br , t )
>1460	CallExpression	slerp_rw ( ar , br , t )
>1461	ArgumentList	ar
>1462	Argument	t
>1463	Identifier	t
>1464	Argument	br
>1465	Identifier	br
>1466	Argument	ar
>1467	Identifier	ar
>1468	Callee	slerp_rw
>1469	Identifier	slerp_rw
>1470	Identifier	cr
>1471	IdentifierDeclStatement	 
>1472	IdentifierDecl	t = 0.65
>1473	AssignmentExpr	t = 0.65
>1474	PrimaryExpression	0.65
>1475	Identifier	t
>1476	Identifier	t
>1477	IdentifierDeclType	RefScalar
>1478	UnaryExpression	 
>1479	Identifier	i
>1480	IncDec	++
>1481	Condition	 
>1482	RelationalExpression	i < iters
>1483	Identifier	iters
>1484	Identifier	i
>1485	ForInit	 
>1486	IdentifierDeclStatement	int i = 0 ;
>1487	IdentifierDecl	i = 0
>1488	AssignmentExpr	i = 0
>1489	PrimaryExpression	0
>1490	Identifier	i
>1491	Identifier	i
>1492	IdentifierDeclType	int
>1493	ExpressionStatement	 
>1494	ShiftExpression	cout << std 
>1495	Identifier	std 
>1496	Identifier	cout
>1497	ExpressionStatement	 
>1498	CallExpression	cout . precision ( 8 )
>1499	ArgumentList	8
>1500	Argument	8
>1501	PrimaryExpression	8
>1502	Callee	cout . precision
>1503	MemberAccess	cout . precision
>1504	Identifier	precision
>1505	Identifier	cout
>1506	IdentifierDeclStatement	 
>1507	IdentifierDecl	cr
>1508	Identifier	cr
>1509	IdentifierDeclType	Qd
>1510	ExpressionStatement	 
>1511	Statement	 
>1512	Statement	 
>1513	Statement	 
>1514	Statement	 
>1515	Statement	 
>1516	Statement	 
>1517	Statement	 
>1518	Statement	 
>1519	Statement	 
>1520	Statement	 
>1521	Statement	 
>1522	Statement	 
>1523	ExpressionStatement	 
>1524	Statement	 
>1525	Statement	 
>1526	Statement	 
>1527	Statement	 
>1528	Statement	 
>1529	Statement	 
>1530	Statement	 
>1531	Statement	 
>1532	Statement	 
>1533	Statement	 
>1534	Statement	 
>1535	Statement	 
>1536	IdentifierDeclStatement	 
>1537	IdentifierDecl	c [ 6 ]
>1538	PrimaryExpression	6
>1539	Identifier	c
>1540	IdentifierDeclType	Qf [ 6 ]
>1541	ExpressionStatement	 
>1542	CallExpression	b . normalize ( )
>1543	ArgumentList	 
>1544	Callee	b . normalize
>1545	MemberAccess	b . normalize
>1546	Identifier	normalize
>1547	Identifier	b
>1548	ExpressionStatement	 
>1549	CallExpression	b . coeffs ( ) . setRandom ( )
>1550	ArgumentList	 
>1551	Callee	b . coeffs ( ) . setRandom
>1552	MemberAccess	b . coeffs ( ) . setRandom
>1553	Identifier	setRandom
>1554	CallExpression	b . coeffs ( )
>1555	ArgumentList	 
>1556	Callee	b . coeffs
>1557	MemberAccess	b . coeffs
>1558	Identifier	coeffs
>1559	Identifier	b
>1560	ExpressionStatement	 
>1561	CallExpression	a . normalize ( )
>1562	ArgumentList	 
>1563	Callee	a . normalize
>1564	MemberAccess	a . normalize
>1565	Identifier	normalize
>1566	Identifier	a
>1567	ExpressionStatement	 
>1568	CallExpression	a . coeffs ( ) . setRandom ( )
>1569	ArgumentList	 
>1570	Callee	a . coeffs ( ) . setRandom
>1571	MemberAccess	a . coeffs ( ) . setRandom
>1572	Identifier	setRandom
>1573	CallExpression	a . coeffs ( )
>1574	ArgumentList	 
>1575	Callee	a . coeffs
>1576	MemberAccess	a . coeffs
>1577	Identifier	coeffs
>1578	Identifier	a
>1579	IdentifierDeclStatement	 
>1580	IdentifierDecl	b
>1581	Identifier	b
>1582	IdentifierDeclType	Qf
>1583	IdentifierDecl	a
>1584	Identifier	a
>1585	IdentifierDeclType	Qf
>1586	UnaryExpression	 
>1587	Identifier	w
>1588	IncDec	++
>1589	Condition	 
>1590	RelationalExpression	w < rep
>1591	Identifier	rep
>1592	Identifier	w
>1593	ForInit	 
>1594	IdentifierDeclStatement	int w = 0 ;
>1595	IdentifierDecl	w = 0
>1596	AssignmentExpr	w = 0
>1597	PrimaryExpression	0
>1598	Identifier	w
>1599	Identifier	w
>1600	IdentifierDeclType	int
>1601	IdentifierDeclStatement	 
>1602	IdentifierDecl	iters = 40
>1603	AssignmentExpr	iters = 40
>1604	PrimaryExpression	40
>1605	Identifier	iters
>1606	Identifier	iters
>1607	IdentifierDeclType	int
>1608	IdentifierDeclStatement	 
>1609	IdentifierDecl	rep = 100
>1610	AssignmentExpr	rep = 100
>1611	PrimaryExpression	100
>1612	Identifier	rep
>1613	Identifier	rep
>1614	IdentifierDeclType	int
>1615	ExpressionStatement	 
>1616	ShiftExpression	cout << \"double=>float=>double       nlerp        eigen        legacy(snap)         legacy(nlerp)        \
>1617	PrimaryExpression	\"double=>float=>double       nlerp        eigen        legacy(snap)         legacy(nlerp)        rightway         \
>1618	Identifier	cout
>1619	ExpressionStatement	 
>1620	CallExpression	avgerr . setZero ( )
>1621	ArgumentList	 
>1622	Callee	avgerr . setZero
>1623	MemberAccess	avgerr . setZero
>1624	Identifier	setZero
>1625	Identifier	avgerr
>1626	IdentifierDeclStatement	 
>1627	IdentifierDecl	avgerr ( 7 )
>1628	PrimaryExpression	7
>1629	Identifier	avgerr
>1630	IdentifierDeclType	Matrix < RefScalar , Dynamic , 1 >
>1631	ExpressionStatement	 
>1632	CallExpression	maxerr . setZero ( )
>1633	ArgumentList	 
>1634	Callee	maxerr . setZero
>1635	MemberAccess	maxerr . setZero
>1636	Identifier	setZero
>1637	Identifier	maxerr
>1638	IdentifierDeclStatement	 
>1639	IdentifierDecl	maxerr ( 7 )
>1640	PrimaryExpression	7
>1641	Identifier	maxerr
>1642	IdentifierDeclType	Matrix < RefScalar , Dynamic , 1 >
>1643	ExpressionStatement	 
>1644	CallExpression	srand ( g_seed )
>1645	ArgumentList	g_seed
>1646	Argument	g_seed
>1647	Identifier	g_seed
>1648	Callee	srand
>1649	Identifier	srand
>1650	ExpressionStatement	 
>1651	ShiftExpression	std 
>1652	ShiftExpression	g_seed << \"\n\"
>1653	PrimaryExpression	\"\n\"
>1654	Identifier	g_seed
>1655	Identifier	std 
>1656	IdentifierDeclStatement	 
>1657	IdentifierDecl	g_seed = ( unsigned int ) time ( NULL )
>1658	AssignmentExpr	g_seed = ( unsigned int ) time ( NULL )
>1659	CastExpression	( unsigned int ) time ( NULL )
>1660	CallExpression	time ( NULL )
>1661	ArgumentList	NULL
>1662	Argument	NULL
>1663	Identifier	NULL
>1664	Callee	time
>1665	Identifier	time
>1666	CastTarget	unsigned int
>1667	Identifier	g_seed
>1668	Identifier	g_seed
>1669	IdentifierDeclType	unsigned int
>1670	IdentifierDeclStatement	 
>1671	IdentifierDecl	Qf
>1672	Identifier	Qf
>1673	IdentifierDeclType	Quaternion < TestScalar >
>1674	IdentifierDeclStatement	 
>1675	IdentifierDecl	Qd
>1676	Identifier	Qd
>1677	IdentifierDeclType	Quaternion < RefScalar >
>1678	IdentifierDeclStatement	 
>1679	IdentifierDecl	TestScalar
>1680	Identifier	TestScalar
>1681	IdentifierDeclType	float
>1682	IdentifierDeclStatement	 
>1683	IdentifierDecl	RefScalar
>1684	Identifier	RefScalar
>1685	IdentifierDeclType	double
<3=15,14,4
<4=11,8,5
<5=7,6
<8=10,9
<11=13,12
<15=16
<16=17
<17=44,18
<18=19
<19=20
<20=22,21
<22=23
<23=25,24
<25=34,26
<26=28,27
<28=30,29
<30=31
<31=33,32
<34=38,35
<35=37,36
<38=40,39
<40=41
<41=43,42
<44=45
<56=68,67,57
<57=64,61,58
<58=60,59
<61=63,62
<64=66,65
<68=69
<69=70
<70=76,71
<71=74,72
<72=73
<74=75
<76=77
<77=79,78
<87=99,98,88
<88=95,92,89
<89=91,90
<92=94,93
<95=97,96
<99=247,246,245,244,243,242,241,240,239,238,237,236,235,234,233,232,231,230,216,204,197,185,173,150,134,123,100
<100=101
<101=121,102
<102=103
<103=104
<104=113,105
<105=112,106
<106=108,107
<108=109
<109=111,110
<113=120,114
<114=116,115
<116=117
<117=119,118
<121=122
<123=130,124
<124=125
<125=129,126
<126=128,127
<130=131
<131=133,132
<134=135
<135=149,148,136
<136=147,137
<137=139,138
<139=145,140
<140=141
<141=142
<142=144,143
<145=146
<150=151
<151=172,171,152
<152=170,153
<153=155,154
<155=168,156
<156=157
<157=158
<158=160,159
<160=162,161
<162=166,163
<163=164
<164=165
<166=167
<168=169
<173=174
<174=184,183,175
<175=182,176
<176=180,177
<177=178
<178=179
<180=181
<185=186
<186=196,195,187
<187=194,188
<188=192,189
<189=190
<190=191
<192=193
<197=200,198
<198=199
<200=201
<201=203,202
<204=205
<205=215,214,206
<206=213,207
<207=211,208
<208=209
<209=210
<211=212
<216=217
<217=229,228,218
<218=227,219
<219=223,220
<220=221
<221=222
<223=224
<224=226,225
<247=248
<248=250,249
<272=284,283,273
<273=280,277,274
<274=276,275
<277=279,278
<280=282,281
<284=450,449,448,447,446,445,444,443,442,441,440,439,438,437,436,435,434,433,419,407,403,399,308,285
<285=286
<286=306,287
<287=288
<288=289
<289=298,290
<290=297,291
<291=293,292
<293=294
<294=296,295
<298=305,299
<299=301,300
<301=302
<302=304,303
<306=307
<308=395,379,309
<309=310
<310=367,355,335,322,311
<311=318,312
<312=313
<313=317,314
<314=316,315
<318=319
<319=321,320
<322=323
<323=334,324
<324=326,325
<326=332,327
<327=328
<328=329
<329=331,330
<332=333
<335=336
<336=354,337
<337=339,338
<339=352,340
<340=341
<341=342
<342=344,343
<344=346,345
<346=350,347
<347=348
<348=349
<350=351
<352=353
<355=356
<356=366,365,357
<357=364,358
<358=362,359
<359=360
<360=361
<362=363
<367=368
<368=378,377,369
<369=376,370
<370=374,371
<371=372
<372=373
<374=375
<379=384,380
<380=381
<381=383,382
<384=385
<385=394,386
<386=388,387
<388=392,389
<389=390
<390=391
<392=393
<395=396
<396=398,397
<399=400
<400=402,401
<403=404
<404=406,405
<407=408
<408=418,417,409
<409=416,410
<410=414,411
<411=412
<412=413
<414=415
<419=420
<420=432,431,421
<421=430,422
<422=426,423
<423=424
<424=425
<426=427
<427=429,428
<450=451
<451=453,452
<475=481,480,476
<476=477
<477=479,478
<481=482
<482=500,493,483
<483=484
<484=485
<485=487,486
<487=491,488
<488=489
<489=490
<491=492
<493=494
<494=498,495
<495=496
<496=497
<498=499
<500=501
<501=508,502
<502=506,503
<503=504
<504=505
<506=507
<508=512,509
<509=511,510
<512=516,513
<513=514
<514=515
<516=517
<524=536,535,525
<525=532,529,526
<526=528,527
<529=531,530
<532=534,533
<536=726,712,708,632,620,588,570,559,537
<537=538
<538=558,539
<539=557,540
<540=549,541
<541=548,542
<542=544,543
<544=545
<545=547,546
<549=556,550
<550=552,551
<552=553
<553=555,554
<559=566,560
<560=561
<561=565,562
<562=564,563
<566=567
<567=569,568
<570=571
<571=587,586,572
<572=585,573
<573=584,574
<574=576,575
<576=582,577
<577=578
<578=579
<579=581,580
<582=583
<588=589
<589=619,618,590
<590=617,591
<591=609,592
<592=594,593
<594=607,595
<595=596
<596=597
<597=599,598
<599=601,600
<601=605,602
<602=603
<603=604
<605=606
<607=608
<609=611,610
<611=615,612
<612=613
<613=614
<615=616
<620=621
<621=631,630,622
<622=629,623
<623=627,624
<624=625
<625=626
<627=628
<632=704,669,633
<633=634
<634=635
<635=668,636
<636=662,637
<637=660,638
<638=639
<639=640
<640=642,641
<642=644,643
<644=645
<645=647,646
<647=654,648
<648=650,649
<650=651
<651=653,652
<654=656,655
<656=657
<657=659,658
<660=661
<662=666,663
<663=664
<664=665
<666=667
<669=670
<670=703,671
<671=697,672
<672=695,673
<673=674
<674=675
<675=677,676
<677=679,678
<679=680
<680=682,681
<682=689,683
<683=685,684
<685=686
<686=688,687
<689=691,690
<691=692
<692=694,693
<695=696
<697=701,698
<698=699
<699=700
<701=702
<704=705
<705=707,706
<708=709
<709=711,710
<712=713
<713=725,724,714
<714=723,715
<715=719,716
<716=717
<717=718
<719=720
<720=722,721
<726=727
<727=729,728
<750=762,761,751
<751=758,755,752
<752=754,753
<755=757,756
<758=760,759
<762=984,970,966,888,884,880,785,763
<763=764
<764=784,765
<765=783,766
<766=775,767
<767=774,768
<768=770,769
<770=771
<771=773,772
<775=782,776
<776=778,777
<778=779
<779=781,780
<785=860,844,786
<786=787
<787=832,812,799,788
<788=795,789
<789=790
<790=794,791
<791=793,792
<795=796
<796=798,797
<799=800
<800=811,801
<801=803,802
<803=809,804
<804=805
<805=806
<806=808,807
<809=810
<812=813
<813=831,814
<814=816,815
<816=829,817
<817=818
<818=819
<819=821,820
<821=823,822
<823=827,824
<824=825
<825=826
<827=828
<829=830
<832=833
<833=843,842,834
<834=841,835
<835=839,836
<836=837
<837=838
<839=840
<844=849,845
<845=846
<846=848,847
<849=850
<850=859,851
<851=853,852
<853=857,854
<854=855
<855=856
<857=858
<860=861
<861=870,862
<862=869,863
<863=867,864
<864=865
<865=866
<867=868
<870=877,871
<871=875,872
<872=873
<873=874
<875=876
<877=879,878
<880=881
<881=883,882
<884=885
<885=887,886
<888=962,925,889
<889=890
<890=891
<891=924,892
<892=918,893
<893=916,894
<894=895
<895=896
<896=898,897
<898=900,899
<900=901
<901=903,902
<903=910,904
<904=906,905
<906=907
<907=909,908
<910=912,911
<912=913
<913=915,914
<916=917
<918=922,919
<919=920
<920=921
<922=923
<925=926
<926=961,927
<927=955,928
<928=953,929
<929=930
<930=931
<931=933,932
<933=935,934
<935=936
<936=938,937
<938=945,939
<939=941,940
<941=942
<942=944,943
<945=952,946
<946=948,947
<948=949
<949=951,950
<953=954
<955=959,956
<956=957
<957=958
<959=960
<962=963
<963=965,964
<966=967
<967=969,968
<970=971
<971=983,982,972
<972=981,973
<973=977,974
<974=975
<975=976
<977=978
<978=980,979
<984=985
<985=987,986
<1009=1012,1011,1010
<1012=1682,1678,1674,1670,1656,1650,1643,1638,1631,1626,1619,1615,1608,1601,1237,1226,1211,1198,1191,1179,1172,1160,1153,1146,1145,1144,1143,1142,1141,1061,1055,1048,1041,1034,1027,1020,1013
<1013=1014
<1014=1018,1015
<1015=1016
<1016=1017
<1018=1019
<1020=1021
<1021=1025,1022
<1022=1023
<1023=1024
<1025=1026
<1027=1028
<1028=1032,1029
<1029=1030
<1030=1031
<1032=1033
<1034=1035
<1035=1039,1036
<1036=1037
<1037=1038
<1039=1040
<1041=1042
<1042=1046,1043
<1043=1044
<1044=1045
<1046=1047
<1048=1049
<1049=1053,1050
<1050=1051
<1051=1052
<1053=1054
<1055=1056
<1056=1060,1057
<1057=1059,1058
<1061=1137,1079,1062
<1062=1063
<1063=1078,1064
<1064=1077,1065
<1065=1076,1066
<1066=1075,1067
<1067=1069,1068
<1069=1071,1070
<1071=1072
<1072=1074,1073
<1079=1129,1125,1122,1080
<1080=1115,1088,1081
<1081=1082
<1082=1084,1083
<1084=1085
<1085=1087,1086
<1088=1107,1103,1100,1089
<1089=1090
<1090=1098,1091
<1091=1096,1094,1092
<1092=1093
<1094=1095
<1096=1097
<1098=1099
<1100=1102,1101
<1103=1104
<1104=1106,1105
<1107=1108
<1108=1109
<1109=1114,1113,1110
<1110=1112,1111
<1115=1116
<1116=1118,1117
<1118=1119
<1119=1121,1120
<1122=1124,1123
<1125=1126
<1126=1128,1127
<1129=1130
<1130=1131
<1131=1136,1135,1132
<1132=1134,1133
<1137=1138
<1138=1140,1139
<1146=1147
<1147=1152,1151,1148
<1148=1150,1149
<1153=1154
<1154=1156,1155
<1156=1157
<1157=1159,1158
<1160=1161
<1161=1163,1162
<1163=1164
<1164=1166,1165
<1166=1168,1167
<1168=1169
<1169=1171,1170
<1172=1173
<1173=1175,1174
<1175=1176
<1176=1178,1177
<1179=1180
<1180=1182,1181
<1182=1183
<1183=1185,1184
<1185=1187,1186
<1187=1188
<1188=1190,1189
<1191=1195,1192
<1192=1194,1193
<1195=1197,1196
<1198=1199
<1199=1210,1200
<1200=1209,1201
<1201=1203,1202
<1203=1205,1204
<1205=1206
<1206=1208,1207
<1211=1212
<1212=1225,1213
<1213=1224,1214
<1214=1223,1215
<1215=1217,1216
<1217=1219,1218
<1219=1220
<1220=1222,1221
<1226=1227
<1227=1236,1228
<1228=1234,1229
<1229=1230
<1230=1231
<1231=1233,1232
<1234=1235
<1237=1593,1589,1586,1238
<1238=1579,1567,1560,1548,1541,1536,1535,1534,1533,1532,1531,1530,1529,1528,1527,1526,1525,1524,1523,1522,1521,1520,1519,1518,1517,1516,1515,1514,1513,1512,1511,1510,1506,1497,1493,1239
<1239=1485,1481,1478,1240
<1240=1471,1458,1457,1456,1455,1454,1453,1452,1451,1450,1449,1448,1447,1241,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1260,1276,1320,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1356,1371,1386,1401,1416,1431,1446
<1241=1242
<1242=1244,1243
<1256=1257
<1257=1259,1258
<1260=1261
<1261=1275,1262
<1262=1266,1263
<1263=1264
<1264=1265
<1266=1267
<1267=1269,1268
<1269=1271,1270
<1271=1272
<1272=1274,1273
<1276=1312,1308,1305,1277
<1277=1278
<1278=1279
<1279=1300,1280
<1280=1282,1281
<1282=1283
<1283=1285,1284
<1285=1292,1286
<1286=1288,1287
<1288=1289
<1289=1291,1290
<1292=1294,1293
<1294=1295
<1295=1297,1296
<1297=1299,1298
<1300=1304,1301
<1301=1303,1302
<1305=1307,1306
<1308=1309
<1309=1311,1310
<1312=1313
<1313=1314
<1314=1319,1318,1315
<1315=1317,1316
<1320=1321
<1321=1323,1322
<1323=1324
<1351=1352
<1352=1355,1354,1353
<1356=1357
<1357=1368,1358
<1358=1366,1359
<1359=1364,1362,1360
<1360=1361
<1362=1363
<1364=1365
<1366=1367
<1368=1370,1369
<1371=1372
<1372=1383,1373
<1373=1381,1374
<1374=1379,1377,1375
<1375=1376
<1377=1378
<1379=1380
<1381=1382
<1383=1385,1384
<1386=1387
<1387=1398,1388
<1388=1396,1389
<1389=1394,1392,1390
<1390=1391
<1392=1393
<1394=1395
<1396=1397
<1398=1400,1399
<1401=1402
<1402=1413,1403
<1403=1411,1404
<1404=1409,1407,1405
<1405=1406
<1407=1408
<1409=1410
<1411=1412
<1413=1415,1414
<1416=1417
<1417=1428,1418
<1418=1426,1419
<1419=1424,1422,1420
<1420=1421
<1422=1423
<1424=1425
<1426=1427
<1428=1430,1429
<1431=1432
<1432=1443,1433
<1433=1441,1434
<1434=1439,1437,1435
<1435=1436
<1437=1438
<1439=1440
<1441=1442
<1443=1445,1444
<1458=1459
<1459=1470,1460
<1460=1468,1461
<1461=1466,1464,1462
<1462=1463
<1464=1465
<1466=1467
<1468=1469
<1471=1472
<1472=1477,1476,1473
<1473=1475,1474
<1478=1480,1479
<1481=1482
<1482=1484,1483
<1485=1486
<1486=1487
<1487=1492,1491,1488
<1488=1490,1489
<1493=1494
<1494=1496,1495
<1497=1498
<1498=1502,1499
<1499=1500
<1500=1501
<1502=1503
<1503=1505,1504
<1506=1507
<1507=1509,1508
<1536=1537
<1537=1540,1539,1538
<1541=1542
<1542=1544,1543
<1544=1545
<1545=1547,1546
<1548=1549
<1549=1551,1550
<1551=1552
<1552=1554,1553
<1554=1556,1555
<1556=1557
<1557=1559,1558
<1560=1561
<1561=1563,1562
<1563=1564
<1564=1566,1565
<1567=1568
<1568=1570,1569
<1570=1571
<1571=1573,1572
<1573=1575,1574
<1575=1576
<1576=1578,1577
<1579=1583,1580
<1580=1582,1581
<1583=1585,1584
<1586=1588,1587
<1589=1590
<1590=1592,1591
<1593=1594
<1594=1595
<1595=1600,1599,1596
<1596=1598,1597
<1601=1602
<1602=1607,1606,1603
<1603=1605,1604
<1608=1609
<1609=1614,1613,1610
<1610=1612,1611
<1615=1616
<1616=1618,1617
<1619=1620
<1620=1622,1621
<1622=1623
<1623=1625,1624
<1626=1627
<1627=1630,1629,1628
<1631=1632
<1632=1634,1633
<1634=1635
<1635=1637,1636
<1638=1639
<1639=1642,1641,1640
<1643=1644
<1644=1648,1645
<1645=1646
<1646=1647
<1648=1649
<1650=1651
<1651=1655,1652
<1652=1654,1653
<1656=1657
<1657=1669,1668,1658
<1658=1667,1659
<1659=1666,1660
<1660=1664,1661
<1661=1662
<1662=1663
<1664=1665
<1670=1671
<1671=1673,1672
<1674=1675
<1675=1677,1676
<1678=1679
<1679=1681,1680
<1682=1683
<1683=1685,1684
