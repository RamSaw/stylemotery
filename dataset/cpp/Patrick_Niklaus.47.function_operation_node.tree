>3	FunctionDef	FunctionOperationNode 
>4	ParameterList	const node_ptr & enclosed
>5	Parameter	 
>6	Identifier	enclosed
>7	ParameterType	const node_ptr &
>8	CompoundStatement	 
>9	ExpressionStatement	 
>10	CallExpression	this -> enclosed . push_back ( enclosed )
>11	ArgumentList	enclosed
>12	Argument	enclosed
>13	Identifier	enclosed
>14	Callee	this -> enclosed . push_back
>15	MemberAccess	this -> enclosed . push_back
>16	Identifier	push_back
>17	PtrMemberAccess	this -> enclosed
>18	Identifier	enclosed
>19	Identifier	this
>27	FunctionDef	FunctionOperationNode 
>28	ParameterList	op 
>29	Parameter	 
>30	Identifier	enclosed
>31	ParameterType	const std 
>32	Parameter	 
>33	Identifier	operation
>34	ParameterType	op 
>35	CompoundStatement	 
>36	ExpressionStatement	 
>37	CallExpression	assert ( enclosed . size ( ) )
>38	ArgumentList	enclosed . size ( )
>39	Argument	enclosed . size ( )
>40	CallExpression	enclosed . size ( )
>41	ArgumentList	 
>42	Callee	enclosed . size
>43	MemberAccess	enclosed . size
>44	Identifier	size
>45	Identifier	enclosed
>46	Callee	assert
>47	Identifier	assert
>54	FunctionDef	FunctionOperationNode 
>55	ParameterList	GeoObject * obj
>56	Parameter	 
>57	Identifier	obj
>58	ParameterType	GeoObject *
>59	ReturnType	string
>60	CompoundStatement	 
>61	ReturnStatement	 
>62	PrimaryExpression	\"\"
>63	ExpressionStatement	 
>64	CallExpression	assert ( ! \"Unknown operation executed\" )
>65	ArgumentList	! \"Unknown operation executed\"
>66	Argument	! \"Unknown operation executed\"
>67	UnaryOp	! \"Unknown operation executed\"
>68	PrimaryExpression	\"Unknown operation executed\"
>69	UnaryOperator	!
>70	Callee	assert
>71	Identifier	assert
>72	SwitchStatement	switch ( operation )
>73	CompoundStatement	 
>74	BreakStatement	 
>75	ExpressionStatement	 
>76	CallExpression	assert ( false )
>77	ArgumentList	false
>78	Argument	false
>79	Identifier	false
>80	Callee	assert
>81	Identifier	assert
>82	Label	 
>83	Identifier	default
>84	CompoundStatement	 
>85	ReturnStatement	 
>86	CallExpression	os . str ( )
>87	ArgumentList	 
>88	Callee	os . str
>89	MemberAccess	os . str
>90	Identifier	str
>91	Identifier	os
>92	ExpressionStatement	 
>93	ShiftExpression	os << std 
>94	ShiftExpression	std 
>95	ShiftExpression	std 
>96	ShiftExpression	std 
>97	ShiftExpression	col >> 24
>98	PrimaryExpression	24
>99	Identifier	col
>100	CallExpression	std 
>101	ArgumentList	'0'
>102	Argument	'0'
>103	PrimaryExpression	'0'
>104	Callee	std 
>105	Identifier	std 
>106	CallExpression	std 
>107	ArgumentList	2
>108	Argument	2
>109	PrimaryExpression	2
>110	Callee	std 
>111	Identifier	std 
>112	Identifier	std 
>113	Identifier	os
>114	ExpressionStatement	 
>115	ShiftExpression	os << '#' << std 
>116	ShiftExpression	'#' << std 
>117	ShiftExpression	std 
>118	ShiftExpression	std 
>119	ShiftExpression	std 
>120	BitAndExpression	col & 0xFFFFFF
>121	PrimaryExpression	0xFFFFFF
>122	Identifier	col
>123	CallExpression	std 
>124	ArgumentList	'0'
>125	Argument	'0'
>126	PrimaryExpression	'0'
>127	Callee	std 
>128	Identifier	std 
>129	CallExpression	std 
>130	ArgumentList	6
>131	Argument	6
>132	PrimaryExpression	6
>133	Callee	std 
>134	Identifier	std 
>135	Identifier	std 
>136	PrimaryExpression	'#'
>137	Identifier	os
>138	IdentifierDeclStatement	 
>139	IdentifierDecl	col = result
>140	AssignmentExpr	col = result
>141	Identifier	result
>142	Identifier	result
>143	Identifier	col
>144	IdentifierDeclType	uint32
>145	IdentifierDeclStatement	 
>146	IdentifierDecl	os
>147	Identifier	os
>148	IdentifierDeclType	std 
>149	SwitchStatement	switch ( operation )
>150	CompoundStatement	 
>151	ReturnStatement	 
>152	PrimaryExpression	\"\"
>153	Label	 
>154	Identifier	default
>155	BreakStatement	 
>156	ExpressionStatement	 
>157	AssignmentExpr	result = base + randColor * ( top - base ) . max ( Color ( uint32 ( 0x00000000 ) ) )
>158	AdditiveExpression	base + randColor * ( top - base ) . max ( Color ( uint32 ( 0x00000000 ) ) )
>159	MultiplicativeExpression	randColor * ( top - base ) . max ( Color ( uint32 ( 0x00000000 ) ) )
>160	CallExpression	( top - base ) . max ( Color ( uint32 ( 0x00000000 ) ) )
>161	ArgumentList	Color ( uint32 ( 0x00000000 ) )
>162	Argument	Color ( uint32 ( 0x00000000 ) )
>163	CallExpression	Color ( uint32 ( 0x00000000 ) )
>164	ArgumentList	uint32 ( 0x00000000 )
>165	Argument	uint32 ( 0x00000000 )
>166	CallExpression	uint32 ( 0x00000000 )
>167	ArgumentList	0x00000000
>168	Argument	0x00000000
>169	PrimaryExpression	0x00000000
>170	Callee	uint32
>171	Identifier	uint32
>172	Callee	Color
>173	Identifier	Color
>174	Callee	( top - base ) . max
>175	MemberAccess	( top - base ) . max
>176	Identifier	max
>177	AdditiveExpression	top - base
>178	Identifier	base
>179	Identifier	top
>180	Identifier	randColor
>181	Identifier	base
>182	Identifier	result
>183	Label	 
>184	BreakStatement	 
>185	ExpressionStatement	 
>186	AssignmentExpr	result . a = base . a
>187	MemberAccess	base . a
>188	Identifier	a
>189	Identifier	base
>190	MemberAccess	result . a
>191	Identifier	a
>192	Identifier	result
>193	ExpressionStatement	 
>194	AssignmentExpr	result = base * randColor
>195	MultiplicativeExpression	base * randColor
>196	Identifier	randColor
>197	Identifier	base
>198	Identifier	result
>199	Label	 
>200	BreakStatement	 
>201	ExpressionStatement	 
>202	AssignmentExpr	result . a = 0.3f
>203	PrimaryExpression	0.3f
>204	MemberAccess	result . a
>205	Identifier	a
>206	Identifier	result
>207	ExpressionStatement	 
>208	AssignmentExpr	result = randColor
>209	Identifier	randColor
>210	Identifier	result
>211	Label	 
>212	Condition	 
>213	Identifier	operation
>214	IdentifierDeclStatement	 
>215	IdentifierDecl	randColor ( ( uint8 ) rand . rand ( 255 ) , ( uint8 ) rand . rand ( 255 ) , ( uint8 ) rand . rand ( 255 ) , ( uint8 ) \
>216	Expression	( uint8 ) rand . rand ( 255 ) , ( uint8 ) rand . rand ( 255 ) , ( uint8 ) rand . rand ( 255 ) , ( uint8 ) rand . \
>217	Expression	( uint8 ) rand . rand ( 255 ) , ( uint8 ) rand . rand ( 255 ) , ( uint8 ) rand . rand ( 255 )
>218	Expression	( uint8 ) rand . rand ( 255 ) , ( uint8 ) rand . rand ( 255 )
>219	CastExpression	( uint8 ) rand . rand ( 255 )
>220	CallExpression	rand . rand ( 255 )
>221	ArgumentList	255
>222	Argument	255
>223	PrimaryExpression	255
>224	Callee	rand . rand
>225	MemberAccess	rand . rand
>226	Identifier	rand
>227	Identifier	rand
>228	CastTarget	uint8
>229	CastExpression	( uint8 ) rand . rand ( 255 )
>230	CallExpression	rand . rand ( 255 )
>231	ArgumentList	255
>232	Argument	255
>233	PrimaryExpression	255
>234	Callee	rand . rand
>235	MemberAccess	rand . rand
>236	Identifier	rand
>237	Identifier	rand
>238	CastTarget	uint8
>239	CastExpression	( uint8 ) rand . rand ( 255 )
>240	CallExpression	rand . rand ( 255 )
>241	ArgumentList	255
>242	Argument	255
>243	PrimaryExpression	255
>244	Callee	rand . rand
>245	MemberAccess	rand . rand
>246	Identifier	rand
>247	Identifier	rand
>248	CastTarget	uint8
>249	CastExpression	( uint8 ) rand . rand ( 255 )
>250	CallExpression	rand . rand ( 255 )
>251	ArgumentList	255
>252	Argument	255
>253	PrimaryExpression	255
>254	Callee	rand . rand
>255	MemberAccess	rand . rand
>256	Identifier	rand
>257	Identifier	rand
>258	CastTarget	uint8
>259	Identifier	randColor
>260	IdentifierDeclType	Color
>261	IdentifierDeclStatement	 
>262	IdentifierDecl	rand ( boost 
>263	CallExpression	boost 
>264	ArgumentList	first
>265	Argument	first
>266	Identifier	first
>267	Callee	boost 
>268	Identifier	boost 
>269	Identifier	rand
>270	IdentifierDeclType	Random
>271	IdentifierDeclStatement	 
>272	IdentifierDecl	result
>273	Identifier	result
>274	IdentifierDeclType	Color
>275	IfStatement	if ( enclosed . size ( ) >= 2 )
>276	CompoundStatement	 
>277	IfStatement	if ( Conv ( enclosed [ 1 ] -> eval ( obj ) , & base ) )
>278	CompoundStatement	 
>279	IfStatement	if ( enclosed . size ( ) >= 3 )
>280	CompoundStatement	 
>281	IfStatement	if ( Conv ( enclosed [ 2 ] -> eval ( obj ) , & top ) )
>282	ExpressionStatement	 
>283	UnaryExpression	++ operation
>284	Identifier	operation
>285	IncDec	++
>286	Condition	 
>287	CallExpression	Conv ( enclosed [ 2 ] -> eval ( obj ) , & top )
>288	ArgumentList	enclosed [ 2 ] -> eval ( obj )
>289	Argument	& top
>290	UnaryOp	& top
>291	Identifier	top
>292	UnaryOperator	&
>293	Argument	enclosed [ 2 ] -> eval ( obj )
>294	CallExpression	enclosed [ 2 ] -> eval ( obj )
>295	ArgumentList	obj
>296	Argument	obj
>297	Identifier	obj
>298	Callee	enclosed [ 2 ] -> eval
>299	PtrMemberAccess	enclosed [ 2 ] -> eval
>300	Identifier	eval
>301	ArrayIndexing	enclosed [ 2 ]
>302	PrimaryExpression	2
>303	Identifier	enclosed
>304	Callee	Conv
>305	Identifier	Conv
>306	Condition	 
>307	RelationalExpression	enclosed . size ( ) >= 3
>308	PrimaryExpression	3
>309	CallExpression	enclosed . size ( )
>310	ArgumentList	 
>311	Callee	enclosed . size
>312	MemberAccess	enclosed . size
>313	Identifier	size
>314	Identifier	enclosed
>315	ExpressionStatement	 
>316	UnaryExpression	++ operation
>317	Identifier	operation
>318	IncDec	++
>319	Condition	 
>320	CallExpression	Conv ( enclosed [ 1 ] -> eval ( obj ) , & base )
>321	ArgumentList	enclosed [ 1 ] -> eval ( obj )
>322	Argument	& base
>323	UnaryOp	& base
>324	Identifier	base
>325	UnaryOperator	&
>326	Argument	enclosed [ 1 ] -> eval ( obj )
>327	CallExpression	enclosed [ 1 ] -> eval ( obj )
>328	ArgumentList	obj
>329	Argument	obj
>330	Identifier	obj
>331	Callee	enclosed [ 1 ] -> eval
>332	PtrMemberAccess	enclosed [ 1 ] -> eval
>333	Identifier	eval
>334	ArrayIndexing	enclosed [ 1 ]
>335	PrimaryExpression	1
>336	Identifier	enclosed
>337	Callee	Conv
>338	Identifier	Conv
>339	Condition	 
>340	RelationalExpression	enclosed . size ( ) >= 2
>341	PrimaryExpression	2
>342	CallExpression	enclosed . size ( )
>343	ArgumentList	 
>344	Callee	enclosed . size
>345	MemberAccess	enclosed . size
>346	Identifier	size
>347	Identifier	enclosed
>348	IdentifierDeclStatement	 
>349	IdentifierDecl	operation = 0
>350	AssignmentExpr	operation = 0
>351	PrimaryExpression	0
>352	Identifier	operation
>353	Identifier	operation
>354	IdentifierDeclType	int
>355	IfStatement	if ( enclosed . size ( ) > 3 )
>356	ReturnStatement	 
>357	PrimaryExpression	\"\"
>358	Condition	 
>359	RelationalExpression	enclosed . size ( ) > 3
>360	PrimaryExpression	3
>361	CallExpression	enclosed . size ( )
>362	ArgumentList	 
>363	Callee	enclosed . size
>364	MemberAccess	enclosed . size
>365	Identifier	size
>366	Identifier	enclosed
>367	IdentifierDeclStatement	 
>368	IdentifierDecl	top ( 0xFFFFFFFF )
>369	PrimaryExpression	0xFFFFFFFF
>370	Identifier	top
>371	IdentifierDeclType	Color
>372	IdentifierDeclStatement	 
>373	IdentifierDecl	base ( 0xFFFFFFFF )
>374	PrimaryExpression	0xFFFFFFFF
>375	Identifier	base
>376	IdentifierDeclType	Color
>377	Label	 
>378	Identifier	op 
>379	CompoundStatement	 
>380	IfStatement	if ( condition )
>381	ElseStatement	else
>382	CompoundStatement	 
>383	ReturnStatement	 
>384	CallExpression	enclosed [ 2 ] -> eval ( obj )
>385	ArgumentList	obj
>386	Argument	obj
>387	Identifier	obj
>388	Callee	enclosed [ 2 ] -> eval
>389	PtrMemberAccess	enclosed [ 2 ] -> eval
>390	Identifier	eval
>391	ArrayIndexing	enclosed [ 2 ]
>392	PrimaryExpression	2
>393	Identifier	enclosed
>394	CompoundStatement	 
>395	ReturnStatement	 
>396	CallExpression	enclosed [ 1 ] -> eval ( obj )
>397	ArgumentList	obj
>398	Argument	obj
>399	Identifier	obj
>400	Callee	enclosed [ 1 ] -> eval
>401	PtrMemberAccess	enclosed [ 1 ] -> eval
>402	Identifier	eval
>403	ArrayIndexing	enclosed [ 1 ]
>404	PrimaryExpression	1
>405	Identifier	enclosed
>406	Condition	 
>407	Identifier	condition
>408	ExpressionStatement	 
>409	RelationalExpression	Conv < bool > ( first , & condition )
>410	RelationalExpression	bool > ( first , & condition )
>411	Expression	first , & condition
>412	UnaryOp	& condition
>413	Identifier	condition
>414	UnaryOperator	&
>415	Identifier	first
>416	Identifier	bool
>417	Identifier	Conv
>418	IdentifierDeclStatement	 
>419	IdentifierDecl	condition
>420	Identifier	condition
>421	IdentifierDeclType	bool
>422	IfStatement	if ( enclosed . size ( ) != 3 )
>423	ReturnStatement	 
>424	PrimaryExpression	\"\"
>425	Condition	 
>426	EqualityExpression	enclosed . size ( ) != 3
>427	PrimaryExpression	3
>428	CallExpression	enclosed . size ( )
>429	ArgumentList	 
>430	Callee	enclosed . size
>431	MemberAccess	enclosed . size
>432	Identifier	size
>433	Identifier	enclosed
>434	Label	 
>435	Identifier	op 
>436	CompoundStatement	 
>437	IfStatement	if ( it != obj -> getTags ( ) . cend ( ) )
>438	ElseStatement	else
>439	CompoundStatement	 
>440	ReturnStatement	 
>441	PrimaryExpression	\"\"
>442	CompoundStatement	 
>443	ReturnStatement	 
>444	CallExpression	it -> second . str ( )
>445	ArgumentList	 
>446	Callee	it -> second . str
>447	MemberAccess	it -> second . str
>448	Identifier	str
>449	PtrMemberAccess	it -> second
>450	Identifier	second
>451	Identifier	it
>452	Condition	 
>453	EqualityExpression	it != obj -> getTags ( ) . cend ( )
>454	CallExpression	obj -> getTags ( ) . cend ( )
>455	ArgumentList	 
>456	Callee	obj -> getTags ( ) . cend
>457	MemberAccess	obj -> getTags ( ) . cend
>458	Identifier	cend
>459	CallExpression	obj -> getTags ( )
>460	ArgumentList	 
>461	Callee	obj -> getTags
>462	PtrMemberAccess	obj -> getTags
>463	Identifier	getTags
>464	Identifier	obj
>465	Identifier	it
>466	ExpressionStatement	 
>467	Statement	 
>468	Statement	 
>469	Statement	 
>470	Statement	 
>471	Statement	 
>472	Statement	 
>473	Statement	 
>474	Statement	 
>475	Statement	 
>476	Statement	 
>477	Statement	 
>478	Statement	 
>479	Statement	 
>480	Statement	 
>481	Statement	 
>482	Statement	 
>483	Statement	 
>484	Statement	 
>485	Statement	 
>486	Statement	 
>487	Statement	 
>488	Statement	 
>489	Statement	 
>490	Statement	 
>491	Statement	 
>492	Statement	 
>493	IdentifierDeclStatement	 
>494	IdentifierDecl	first_uncached ( first )
>495	Identifier	first
>496	Identifier	first_uncached
>497	IdentifierDeclType	MaybeCachedString
>498	Label	 
>499	Identifier	op 
>500	CompoundStatement	 
>501	ReturnStatement	 
>502	CallExpression	ToString ( ! b )
>503	ArgumentList	! b
>504	Argument	! b
>505	UnaryOp	! b
>506	Identifier	b
>507	UnaryOperator	!
>508	Callee	ToString
>509	Identifier	ToString
>510	ExpressionStatement	 
>511	CallExpression	Conv ( first , & b )
>512	ArgumentList	first
>513	Argument	& b
>514	UnaryOp	& b
>515	Identifier	b
>516	UnaryOperator	&
>517	Argument	first
>518	Identifier	first
>519	Callee	Conv
>520	Identifier	Conv
>521	IdentifierDeclStatement	 
>522	IdentifierDecl	b
>523	Identifier	b
>524	IdentifierDeclType	bool
>525	Label	 
>526	Identifier	op 
>527	CompoundStatement	 
>528	ReturnStatement	 
>529	PrimaryExpression	\"\"
>530	IfStatement	if ( Conv ( first , & f ) )
>531	CompoundStatement	 
>532	ReturnStatement	 
>533	CallExpression	ToString ( ( int ) floor ( f ) )
>534	ArgumentList	( int ) floor ( f )
>535	Argument	( int ) floor ( f )
>536	CastExpression	( int ) floor ( f )
>537	CallExpression	floor ( f )
>538	ArgumentList	f
>539	Argument	f
>540	Identifier	f
>541	Callee	floor
>542	Identifier	floor
>543	CastTarget	int
>544	Callee	ToString
>545	Identifier	ToString
>546	Condition	 
>547	CallExpression	Conv ( first , & f )
>548	ArgumentList	first
>549	Argument	& f
>550	UnaryOp	& f
>551	Identifier	f
>552	UnaryOperator	&
>553	Argument	first
>554	Identifier	first
>555	Callee	Conv
>556	Identifier	Conv
>557	IdentifierDeclStatement	 
>558	IdentifierDecl	f
>559	Identifier	f
>560	IdentifierDeclType	float
>561	Label	 
>562	Identifier	op 
>563	CompoundStatement	 
>564	ReturnStatement	 
>565	PrimaryExpression	\"\"
>566	IfStatement	if ( Conv ( first , & f ) )
>567	CompoundStatement	 
>568	ReturnStatement	 
>569	CallExpression	ToString ( sqrt ( f ) )
>570	ArgumentList	sqrt ( f )
>571	Argument	sqrt ( f )
>572	CallExpression	sqrt ( f )
>573	ArgumentList	f
>574	Argument	f
>575	Identifier	f
>576	Callee	sqrt
>577	Identifier	sqrt
>578	Callee	ToString
>579	Identifier	ToString
>580	Condition	 
>581	CallExpression	Conv ( first , & f )
>582	ArgumentList	first
>583	Argument	& f
>584	UnaryOp	& f
>585	Identifier	f
>586	UnaryOperator	&
>587	Argument	first
>588	Identifier	first
>589	Callee	Conv
>590	Identifier	Conv
>591	IdentifierDeclStatement	 
>592	IdentifierDecl	f
>593	Identifier	f
>594	IdentifierDeclType	float
>595	Label	 
>596	Identifier	op 
>597	CompoundStatement	 
>598	ReturnStatement	 
>599	PrimaryExpression	\"\"
>600	IfStatement	if ( Conv ( first , & f ) )
>601	CompoundStatement	 
>602	ReturnStatement	 
>603	Identifier	first
>604	Condition	 
>605	CallExpression	Conv ( first , & f )
>606	ArgumentList	first
>607	Argument	& f
>608	UnaryOp	& f
>609	Identifier	f
>610	UnaryOperator	&
>611	Argument	first
>612	Identifier	first
>613	Callee	Conv
>614	Identifier	Conv
>615	IdentifierDeclStatement	 
>616	IdentifierDecl	f
>617	Identifier	f
>618	IdentifierDeclType	float
>619	Label	 
>620	Identifier	op 
>621	ReturnStatement	 
>622	Identifier	first
>623	CompoundStatement	 
>624	ReturnStatement	 
>625	CallExpression	ToString ( b )
>626	ArgumentList	b
>627	Argument	b
>628	Identifier	b
>629	Callee	ToString
>630	Identifier	ToString
>631	ExpressionStatement	 
>632	RelationalExpression	Conv < bool > ( first , & b )
>633	RelationalExpression	bool > ( first , & b )
>634	Expression	first , & b
>635	UnaryOp	& b
>636	Identifier	b
>637	UnaryOperator	&
>638	Identifier	first
>639	Identifier	bool
>640	Identifier	Conv
>641	IdentifierDeclStatement	 
>642	IdentifierDecl	b
>643	Identifier	b
>644	IdentifierDeclType	bool
>645	Label	 
>646	Identifier	op 
>647	ReturnStatement	 
>648	Identifier	first
>649	Label	 
>650	Identifier	op 
>651	Label	 
>652	Identifier	op 
>653	Condition	 
>654	Identifier	operation
>655	IdentifierDeclStatement	 
>656	IdentifierDecl	first = enclosed . front ( ) -> eval ( obj )
>657	AssignmentExpr	first = enclosed . front ( ) -> eval ( obj )
>658	CallExpression	enclosed . front ( ) -> eval ( obj )
>659	ArgumentList	obj
>660	Argument	obj
>661	Identifier	obj
>662	Callee	enclosed . front ( ) -> eval
>663	PtrMemberAccess	enclosed . front ( ) -> eval
>664	Identifier	eval
>665	CallExpression	enclosed . front ( )
>666	ArgumentList	 
>667	Callee	enclosed . front
>668	MemberAccess	enclosed . front
>669	Identifier	front
>670	Identifier	enclosed
>671	Identifier	first
>672	Identifier	first
>673	IdentifierDeclType	string
<3=8,4
<4=5
<5=7,6
<8=9
<9=10
<10=14,11
<11=12
<12=13
<14=15
<15=17,16
<17=19,18
<27=35,28
<28=32,29
<29=31,30
<32=34,33
<35=36
<36=37
<37=46,38
<38=39
<39=40
<40=42,41
<42=43
<43=45,44
<46=47
<54=60,59,55
<55=56
<56=58,57
<60=655,72,63,61
<61=62
<63=64
<64=70,65
<65=66
<66=67
<67=69,68
<70=71
<72=653,73
<73=651,649,647,645,623,621,619,597,595,563,561,527,525,500,498,436,434,379,377,84,82,75,74
<75=76
<76=80,77
<77=78
<78=79
<80=81
<82=83
<84=372,367,355,348,275,271,261,214,149,145,138,114,92,85
<85=86
<86=88,87
<88=89
<89=91,90
<92=93
<93=113,94
<94=112,95
<95=106,96
<96=100,97
<97=99,98
<100=104,101
<101=102
<102=103
<104=105
<106=110,107
<107=108
<108=109
<110=111
<114=115
<115=137,116
<116=136,117
<117=135,118
<118=129,119
<119=123,120
<120=122,121
<123=127,124
<124=125
<125=126
<127=128
<129=133,130
<130=131
<131=132
<133=134
<138=139
<139=144,143,140
<140=142,141
<145=146
<146=148,147
<149=212,150
<150=211,207,201,200,199,193,185,184,183,156,155,153,151
<151=152
<153=154
<156=157
<157=182,158
<158=181,159
<159=180,160
<160=174,161
<161=162
<162=163
<163=172,164
<164=165
<165=166
<166=170,167
<167=168
<168=169
<170=171
<172=173
<174=175
<175=177,176
<177=179,178
<185=186
<186=190,187
<187=189,188
<190=192,191
<193=194
<194=198,195
<195=197,196
<201=202
<202=204,203
<204=206,205
<207=208
<208=210,209
<212=213
<214=215
<215=260,259,216
<216=249,217
<217=239,218
<218=229,219
<219=228,220
<220=224,221
<221=222
<222=223
<224=225
<225=227,226
<229=238,230
<230=234,231
<231=232
<232=233
<234=235
<235=237,236
<239=248,240
<240=244,241
<241=242
<242=243
<244=245
<245=247,246
<249=258,250
<250=254,251
<251=252
<252=253
<254=255
<255=257,256
<261=262
<262=270,269,263
<263=267,264
<264=265
<265=266
<267=268
<271=272
<272=274,273
<275=339,276
<276=277
<277=319,278
<278=315,279
<279=306,280
<280=281
<281=286,282
<282=283
<283=285,284
<286=287
<287=304,288
<288=293,289
<289=290
<290=292,291
<293=294
<294=298,295
<295=296
<296=297
<298=299
<299=301,300
<301=303,302
<304=305
<306=307
<307=309,308
<309=311,310
<311=312
<312=314,313
<315=316
<316=318,317
<319=320
<320=337,321
<321=326,322
<322=323
<323=325,324
<326=327
<327=331,328
<328=329
<329=330
<331=332
<332=334,333
<334=336,335
<337=338
<339=340
<340=342,341
<342=344,343
<344=345
<345=347,346
<348=349
<349=354,353,350
<350=352,351
<355=358,356
<356=357
<358=359
<359=361,360
<361=363,362
<363=364
<364=366,365
<367=368
<368=371,370,369
<372=373
<373=376,375,374
<377=378
<379=422,418,408,380
<380=406,394,381
<381=382
<382=383
<383=384
<384=388,385
<385=386
<386=387
<388=389
<389=391,390
<391=393,392
<394=395
<395=396
<396=400,397
<397=398
<398=399
<400=401
<401=403,402
<403=405,404
<406=407
<408=409
<409=417,410
<410=416,411
<411=415,412
<412=414,413
<418=419
<419=421,420
<422=425,423
<423=424
<425=426
<426=428,427
<428=430,429
<430=431
<431=433,432
<434=435
<436=493,492,491,490,489,488,487,486,485,484,483,482,481,480,479,478,477,476,475,474,473,472,471,470,469,468,467,466,437
<437=452,442,438
<438=439
<439=440
<440=441
<442=443
<443=444
<444=446,445
<446=447
<447=449,448
<449=451,450
<452=453
<453=465,454
<454=456,455
<456=457
<457=459,458
<459=461,460
<461=462
<462=464,463
<493=494
<494=497,496,495
<498=499
<500=521,510,501
<501=502
<502=508,503
<503=504
<504=505
<505=507,506
<508=509
<510=511
<511=519,512
<512=517,513
<513=514
<514=516,515
<517=518
<519=520
<521=522
<522=524,523
<525=526
<527=557,530,528
<528=529
<530=546,531
<531=532
<532=533
<533=544,534
<534=535
<535=536
<536=543,537
<537=541,538
<538=539
<539=540
<541=542
<544=545
<546=547
<547=555,548
<548=553,549
<549=550
<550=552,551
<553=554
<555=556
<557=558
<558=560,559
<561=562
<563=591,566,564
<564=565
<566=580,567
<567=568
<568=569
<569=578,570
<570=571
<571=572
<572=576,573
<573=574
<574=575
<576=577
<578=579
<580=581
<581=589,582
<582=587,583
<583=584
<584=586,585
<587=588
<589=590
<591=592
<592=594,593
<595=596
<597=615,600,598
<598=599
<600=604,601
<601=602
<602=603
<604=605
<605=613,606
<606=611,607
<607=608
<608=610,609
<611=612
<613=614
<615=616
<616=618,617
<619=620
<621=622
<623=641,631,624
<624=625
<625=629,626
<626=627
<627=628
<629=630
<631=632
<632=640,633
<633=639,634
<634=638,635
<635=637,636
<641=642
<642=644,643
<645=646
<647=648
<649=650
<651=652
<653=654
<655=656
<656=673,672,657
<657=671,658
<658=662,659
<659=660
<660=661
<662=663
<663=665,664
<665=667,666
<667=668
<668=670,669
