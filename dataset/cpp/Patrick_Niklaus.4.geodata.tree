>3	FunctionDef	Geodata 
>4	ParameterList	 
>5	CompoundStatement	 
>9	FunctionDef	Geodata 
>10	ParameterList	 
>11	CompoundStatement	 
>15	FunctionDef	Geodata 
>16	ParameterList	const string & nodePath , const string & wayPath , const string & relationPath
>17	Parameter	 
>18	Identifier	relationPath
>19	ParameterType	const string &
>20	Parameter	 
>21	Identifier	wayPath
>22	ParameterType	const string &
>23	Parameter	 
>24	Identifier	nodePath
>25	ParameterType	const string &
>26	ReturnType	void
>27	CompoundStatement	 
>28	IfStatement	if ( relations -> size ( ) > 0 )
>29	CompoundStatement	 
>30	ExpressionStatement	 
>31	CallExpression	relTree -> build ( rects , relationPath )
>32	ArgumentList	rects
>33	Argument	relationPath
>34	Identifier	relationPath
>35	Argument	rects
>36	Identifier	rects
>37	Callee	relTree -> build
>38	PtrMemberAccess	relTree -> build
>39	Identifier	build
>40	Identifier	relTree
>41	ExpressionStatement	 
>42	CallExpression	rects . push_back ( calculateBoundingBox ( r ) )
>43	ArgumentList	calculateBoundingBox ( r )
>44	Argument	calculateBoundingBox ( r )
>45	CallExpression	calculateBoundingBox ( r )
>46	ArgumentList	r
>47	Argument	r
>48	Identifier	r
>49	Callee	calculateBoundingBox
>50	Identifier	calculateBoundingBox
>51	Callee	rects . push_back
>52	MemberAccess	rects . push_back
>53	Identifier	push_back
>54	Identifier	rects
>55	Statement	 
>56	Statement	 
>57	Statement	 
>58	Label	 
>59	Identifier	r
>60	Statement	 
>61	Statement	 
>62	Statement	 
>63	Statement	 
>64	IdentifierDeclStatement	 
>65	IdentifierDecl	rects
>66	Identifier	rects
>67	IdentifierDeclType	std 
>68	Condition	 
>69	RelationalExpression	relations -> size ( ) > 0
>70	PrimaryExpression	0
>71	CallExpression	relations -> size ( )
>72	ArgumentList	 
>73	Callee	relations -> size
>74	PtrMemberAccess	relations -> size
>75	Identifier	size
>76	Identifier	relations
>77	IfStatement	if ( ways -> size ( ) > 0 )
>78	CompoundStatement	 
>79	ExpressionStatement	 
>80	CallExpression	waysTree -> build ( rects , wayPath )
>81	ArgumentList	rects
>82	Argument	wayPath
>83	Identifier	wayPath
>84	Argument	rects
>85	Identifier	rects
>86	Callee	waysTree -> build
>87	PtrMemberAccess	waysTree -> build
>88	Identifier	build
>89	Identifier	waysTree
>90	ExpressionStatement	 
>91	CallExpression	rects . push_back ( calculateBoundingBox ( w ) )
>92	ArgumentList	calculateBoundingBox ( w )
>93	Argument	calculateBoundingBox ( w )
>94	CallExpression	calculateBoundingBox ( w )
>95	ArgumentList	w
>96	Argument	w
>97	Identifier	w
>98	Callee	calculateBoundingBox
>99	Identifier	calculateBoundingBox
>100	Callee	rects . push_back
>101	MemberAccess	rects . push_back
>102	Identifier	push_back
>103	Identifier	rects
>104	Statement	 
>105	Statement	 
>106	Statement	 
>107	Label	 
>108	Identifier	w
>109	Statement	 
>110	Statement	 
>111	Statement	 
>112	Statement	 
>113	IdentifierDeclStatement	 
>114	IdentifierDecl	rects
>115	Identifier	rects
>116	IdentifierDeclType	std 
>117	Condition	 
>118	RelationalExpression	ways -> size ( ) > 0
>119	PrimaryExpression	0
>120	CallExpression	ways -> size ( )
>121	ArgumentList	 
>122	Callee	ways -> size
>123	PtrMemberAccess	ways -> size
>124	Identifier	size
>125	Identifier	ways
>126	IfStatement	if ( nodes -> size ( ) > 0 )
>127	CompoundStatement	 
>128	ExpressionStatement	 
>129	CallExpression	nodesTree -> build ( points , nodePath )
>130	ArgumentList	points
>131	Argument	nodePath
>132	Identifier	nodePath
>133	Argument	points
>134	Identifier	points
>135	Callee	nodesTree -> build
>136	PtrMemberAccess	nodesTree -> build
>137	Identifier	build
>138	Identifier	nodesTree
>139	ExpressionStatement	 
>140	CallExpression	points . push_back ( n . getLocation ( ) )
>141	ArgumentList	n . getLocation ( )
>142	Argument	n . getLocation ( )
>143	CallExpression	n . getLocation ( )
>144	ArgumentList	 
>145	Callee	n . getLocation
>146	MemberAccess	n . getLocation
>147	Identifier	getLocation
>148	Identifier	n
>149	Callee	points . push_back
>150	MemberAccess	points . push_back
>151	Identifier	push_back
>152	Identifier	points
>153	Statement	 
>154	Statement	 
>155	Statement	 
>156	Label	 
>157	Identifier	n
>158	Statement	 
>159	Statement	 
>160	Statement	 
>161	Statement	 
>162	ExpressionStatement	 
>163	IdentifierDeclStatement	 
>164	IdentifierDecl	points
>165	Identifier	points
>166	IdentifierDeclType	std 
>167	Condition	 
>168	RelationalExpression	nodes -> size ( ) > 0
>169	PrimaryExpression	0
>170	CallExpression	nodes -> size ( )
>171	ArgumentList	 
>172	Callee	nodes -> size
>173	PtrMemberAccess	nodes -> size
>174	Identifier	size
>175	Identifier	nodes
>201	FunctionDef	Geodata 
>202	ParameterList	const shared_ptr < std 
>203	Parameter	 
>204	Identifier	nodes
>205	ParameterType	const shared_ptr < std 
>206	ReturnType	void
>207	CompoundStatement	 
>208	ExpressionStatement	 
>209	Statement	 
>210	Statement	 
>211	Statement	 
>212	Statement	 
>213	Statement	 
>214	Statement	 
>215	Statement	 
>216	Statement	 
>217	Statement	 
>218	Statement	 
>219	Statement	 
>220	Statement	 
>221	Statement	 
>222	Statement	 
>223	Statement	 
>224	Statement	 
>225	IfStatement	if ( nodes -> size ( ) > 0 )
>226	Statement	 
>227	Condition	 
>228	RelationalExpression	nodes -> size ( ) > 0
>229	PrimaryExpression	0
>230	CallExpression	nodes -> size ( )
>231	ArgumentList	 
>232	Callee	nodes -> size
>233	PtrMemberAccess	nodes -> size
>234	Identifier	size
>235	Identifier	nodes
>236	ExpressionStatement	 
>237	AssignmentExpr	this -> nodes = nodes
>238	Identifier	nodes
>239	PtrMemberAccess	this -> nodes
>240	Identifier	nodes
>241	Identifier	this
>251	FunctionDef	Geodata 
>252	ParameterList	const shared_ptr < std 
>253	Parameter	 
>254	Identifier	ways
>255	ParameterType	const shared_ptr < std 
>256	ReturnType	void
>257	CompoundStatement	 
>258	ExpressionStatement	 
>259	Statement	 
>260	Statement	 
>261	Statement	 
>262	Statement	 
>263	Statement	 
>264	Statement	 
>265	Statement	 
>266	Statement	 
>267	Statement	 
>268	Statement	 
>269	Statement	 
>270	Statement	 
>271	Statement	 
>272	Statement	 
>273	Statement	 
>274	Statement	 
>275	IfStatement	if ( ways -> size ( ) > 0 )
>276	Statement	 
>277	Condition	 
>278	RelationalExpression	ways -> size ( ) > 0
>279	PrimaryExpression	0
>280	CallExpression	ways -> size ( )
>281	ArgumentList	 
>282	Callee	ways -> size
>283	PtrMemberAccess	ways -> size
>284	Identifier	size
>285	Identifier	ways
>286	ExpressionStatement	 
>287	AssignmentExpr	this -> ways = ways
>288	Identifier	ways
>289	PtrMemberAccess	this -> ways
>290	Identifier	ways
>291	Identifier	this
>301	FunctionDef	Geodata 
>302	ParameterList	const shared_ptr < std 
>303	Parameter	 
>304	Identifier	relations
>305	ParameterType	const shared_ptr < std 
>306	ReturnType	void
>307	CompoundStatement	 
>308	ExpressionStatement	 
>309	Statement	 
>310	Statement	 
>311	Statement	 
>312	Statement	 
>313	Statement	 
>314	Statement	 
>315	Statement	 
>316	Statement	 
>317	Statement	 
>318	Statement	 
>319	Statement	 
>320	Statement	 
>321	Statement	 
>322	Statement	 
>323	Statement	 
>324	IfStatement	if ( relations -> size ( ) > 0 )
>325	Statement	 
>326	Condition	 
>327	RelationalExpression	relations -> size ( ) > 0
>328	PrimaryExpression	0
>329	CallExpression	relations -> size ( )
>330	ArgumentList	 
>331	Callee	relations -> size
>332	PtrMemberAccess	relations -> size
>333	Identifier	size
>334	Identifier	relations
>335	ExpressionStatement	 
>336	AssignmentExpr	this -> relations = relations
>337	Identifier	relations
>338	PtrMemberAccess	this -> relations
>339	Identifier	relations
>340	Identifier	this
>350	FunctionDef	Geodata 
>351	ParameterList	const FixedRect & rect
>352	Parameter	 
>353	Identifier	rect
>354	ParameterType	const FixedRect &
>355	ReturnType	bool
>356	CompoundStatement	 
>357	ReturnStatement	 
>358	OrExpression	( nodesTree && nodesTree -> contains ( rect ) ) || ( waysTree && waysTree -> contains ( rect ) ) || ( \
>359	OrExpression	( waysTree && waysTree -> contains ( rect ) ) || ( relTree && relTree -> contains ( rect ) )
>360	AndExpression	relTree && relTree -> contains ( rect )
>361	CallExpression	relTree -> contains ( rect )
>362	ArgumentList	rect
>363	Argument	rect
>364	Identifier	rect
>365	Callee	relTree -> contains
>366	PtrMemberAccess	relTree -> contains
>367	Identifier	contains
>368	Identifier	relTree
>369	Identifier	relTree
>370	AndExpression	waysTree && waysTree -> contains ( rect )
>371	CallExpression	waysTree -> contains ( rect )
>372	ArgumentList	rect
>373	Argument	rect
>374	Identifier	rect
>375	Callee	waysTree -> contains
>376	PtrMemberAccess	waysTree -> contains
>377	Identifier	contains
>378	Identifier	waysTree
>379	Identifier	waysTree
>380	AndExpression	nodesTree && nodesTree -> contains ( rect )
>381	CallExpression	nodesTree -> contains ( rect )
>382	ArgumentList	rect
>383	Argument	rect
>384	Identifier	rect
>385	Callee	nodesTree -> contains
>386	PtrMemberAccess	nodesTree -> contains
>387	Identifier	contains
>388	Identifier	nodesTree
>389	Identifier	nodesTree
>403	FunctionDef	Geodata 
>404	ParameterList	const FixedRect & rect
>405	Parameter	 
>406	Identifier	rect
>407	ParameterType	const FixedRect &
>408	ReturnType	shared_ptr < std 
>409	CompoundStatement	 
>410	ReturnStatement	 
>411	Identifier	nodeIDs
>412	IfStatement	if ( nodesTree )
>413	ExpressionStatement	 
>414	CallExpression	nodesTree -> search ( nodeIDs , rect )
>415	ArgumentList	nodeIDs
>416	Argument	rect
>417	Identifier	rect
>418	Argument	nodeIDs
>419	Identifier	nodeIDs
>420	Callee	nodesTree -> search
>421	PtrMemberAccess	nodesTree -> search
>422	Identifier	search
>423	Identifier	nodesTree
>424	Condition	 
>425	Identifier	nodesTree
>426	ExpressionStatement	 
>427	Statement	 
>428	Statement	 
>429	Statement	 
>430	Statement	 
>431	Statement	 
>432	Statement	 
>433	Statement	 
>434	Statement	 
>435	Statement	 
>436	Statement	 
>437	Statement	 
>438	Statement	 
>439	Statement	 
>440	Statement	 
>441	Statement	 
>442	Statement	 
>443	Statement	 
>444	Statement	 
>445	Statement	 
>446	Statement	 
>447	Statement	 
>448	Statement	 
>449	Statement	 
>450	Statement	 
>457	FunctionDef	Geodata 
>458	ParameterList	const FixedRect & rect
>459	Parameter	 
>460	Identifier	rect
>461	ParameterType	const FixedRect &
>462	ReturnType	shared_ptr < std 
>463	CompoundStatement	 
>464	ReturnStatement	 
>465	Identifier	wayIDs
>466	IfStatement	if ( waysTree )
>467	ExpressionStatement	 
>468	CallExpression	waysTree -> search ( wayIDs , rect )
>469	ArgumentList	wayIDs
>470	Argument	rect
>471	Identifier	rect
>472	Argument	wayIDs
>473	Identifier	wayIDs
>474	Callee	waysTree -> search
>475	PtrMemberAccess	waysTree -> search
>476	Identifier	search
>477	Identifier	waysTree
>478	Condition	 
>479	Identifier	waysTree
>480	ExpressionStatement	 
>481	Statement	 
>482	Statement	 
>483	Statement	 
>484	Statement	 
>485	Statement	 
>486	Statement	 
>487	Statement	 
>488	Statement	 
>489	Statement	 
>490	Statement	 
>491	Statement	 
>492	Statement	 
>493	Statement	 
>494	Statement	 
>495	Statement	 
>496	Statement	 
>497	Statement	 
>498	Statement	 
>499	Statement	 
>500	Statement	 
>501	Statement	 
>502	Statement	 
>503	Statement	 
>504	Statement	 
>511	FunctionDef	Geodata 
>512	ParameterList	const FixedRect & rect
>513	Parameter	 
>514	Identifier	rect
>515	ParameterType	const FixedRect &
>516	ReturnType	shared_ptr < std 
>517	CompoundStatement	 
>518	ReturnStatement	 
>519	Identifier	relationIDs
>520	IfStatement	if ( relTree )
>521	ExpressionStatement	 
>522	CallExpression	relTree -> search ( relationIDs , rect )
>523	ArgumentList	relationIDs
>524	Argument	rect
>525	Identifier	rect
>526	Argument	relationIDs
>527	Identifier	relationIDs
>528	Callee	relTree -> search
>529	PtrMemberAccess	relTree -> search
>530	Identifier	search
>531	Identifier	relTree
>532	Condition	 
>533	Identifier	relTree
>534	ExpressionStatement	 
>535	Statement	 
>536	Statement	 
>537	Statement	 
>538	Statement	 
>539	Statement	 
>540	Statement	 
>541	Statement	 
>542	Statement	 
>543	Statement	 
>544	Statement	 
>545	Statement	 
>546	Statement	 
>547	Statement	 
>548	Statement	 
>549	Statement	 
>550	Statement	 
>551	Statement	 
>552	Statement	 
>553	Statement	 
>554	Statement	 
>555	Statement	 
>556	Statement	 
>557	Statement	 
>558	Statement	 
>565	FunctionDef	Geodata 
>566	ParameterList	NodeId id
>567	Parameter	 
>568	Identifier	id
>569	ParameterType	NodeId
>570	ReturnType	Node *
>571	CompoundStatement	 
>572	ReturnStatement	 
>573	UnaryOp	& nodes -> at ( id . getRaw ( ) )
>574	CallExpression	nodes -> at ( id . getRaw ( ) )
>575	ArgumentList	id . getRaw ( )
>576	Argument	id . getRaw ( )
>577	CallExpression	id . getRaw ( )
>578	ArgumentList	 
>579	Callee	id . getRaw
>580	MemberAccess	id . getRaw
>581	Identifier	getRaw
>582	Identifier	id
>583	Callee	nodes -> at
>584	PtrMemberAccess	nodes -> at
>585	Identifier	at
>586	Identifier	nodes
>587	UnaryOperator	&
>596	FunctionDef	Geodata 
>597	ParameterList	WayId id
>598	Parameter	 
>599	Identifier	id
>600	ParameterType	WayId
>601	ReturnType	Way *
>602	CompoundStatement	 
>603	ReturnStatement	 
>604	UnaryOp	& ways -> at ( id . getRaw ( ) )
>605	CallExpression	ways -> at ( id . getRaw ( ) )
>606	ArgumentList	id . getRaw ( )
>607	Argument	id . getRaw ( )
>608	CallExpression	id . getRaw ( )
>609	ArgumentList	 
>610	Callee	id . getRaw
>611	MemberAccess	id . getRaw
>612	Identifier	getRaw
>613	Identifier	id
>614	Callee	ways -> at
>615	PtrMemberAccess	ways -> at
>616	Identifier	at
>617	Identifier	ways
>618	UnaryOperator	&
>627	FunctionDef	Geodata 
>628	ParameterList	RelId id
>629	Parameter	 
>630	Identifier	id
>631	ParameterType	RelId
>632	ReturnType	Relation *
>633	CompoundStatement	 
>634	ReturnStatement	 
>635	UnaryOp	& relations -> at ( id . getRaw ( ) )
>636	CallExpression	relations -> at ( id . getRaw ( ) )
>637	ArgumentList	id . getRaw ( )
>638	Argument	id . getRaw ( )
>639	CallExpression	id . getRaw ( )
>640	ArgumentList	 
>641	Callee	id . getRaw
>642	MemberAccess	id . getRaw
>643	Identifier	getRaw
>644	Identifier	id
>645	Callee	relations -> at
>646	PtrMemberAccess	relations -> at
>647	Identifier	at
>648	Identifier	relations
>649	UnaryOperator	&
>658	FunctionDef	Geodata 
>659	ParameterList	const string & path
>660	Parameter	 
>661	Identifier	path
>662	ParameterType	const string &
>663	ReturnType	void
>664	CompoundStatement	 
>665	IfStatement	if ( relTree )
>666	CompoundStatement	 
>667	ExpressionStatement	 
>668	IncDecOp	i ++
>669	IncDec	++
>670	Identifier	i
>671	ExpressionStatement	 
>672	CallExpression	relTree -> setLeafFile ( path , entries [ i ] . offset , entries [ i ] . length )
>673	ArgumentList	path
>674	Argument	entries [ i ] . length
>675	MemberAccess	entries [ i ] . length
>676	Identifier	length
>677	ArrayIndexing	entries [ i ]
>678	Identifier	i
>679	Identifier	entries
>680	Argument	entries [ i ] . offset
>681	MemberAccess	entries [ i ] . offset
>682	Identifier	offset
>683	ArrayIndexing	entries [ i ]
>684	Identifier	i
>685	Identifier	entries
>686	Argument	path
>687	Identifier	path
>688	Callee	relTree -> setLeafFile
>689	PtrMemberAccess	relTree -> setLeafFile
>690	Identifier	setLeafFile
>691	Identifier	relTree
>692	Condition	 
>693	Identifier	relTree
>694	IfStatement	if ( waysTree )
>695	CompoundStatement	 
>696	ExpressionStatement	 
>697	IncDecOp	i ++
>698	IncDec	++
>699	Identifier	i
>700	ExpressionStatement	 
>701	CallExpression	waysTree -> setLeafFile ( path , entries [ i ] . offset , entries [ i ] . length )
>702	ArgumentList	path
>703	Argument	entries [ i ] . length
>704	MemberAccess	entries [ i ] . length
>705	Identifier	length
>706	ArrayIndexing	entries [ i ]
>707	Identifier	i
>708	Identifier	entries
>709	Argument	entries [ i ] . offset
>710	MemberAccess	entries [ i ] . offset
>711	Identifier	offset
>712	ArrayIndexing	entries [ i ]
>713	Identifier	i
>714	Identifier	entries
>715	Argument	path
>716	Identifier	path
>717	Callee	waysTree -> setLeafFile
>718	PtrMemberAccess	waysTree -> setLeafFile
>719	Identifier	setLeafFile
>720	Identifier	waysTree
>721	Condition	 
>722	Identifier	waysTree
>723	IfStatement	if ( nodesTree )
>724	CompoundStatement	 
>725	ExpressionStatement	 
>726	IncDecOp	i ++
>727	IncDec	++
>728	Identifier	i
>729	ExpressionStatement	 
>730	CallExpression	nodesTree -> setLeafFile ( path , entries [ i ] . offset , entries [ i ] . length )
>731	ArgumentList	path
>732	Argument	entries [ i ] . length
>733	MemberAccess	entries [ i ] . length
>734	Identifier	length
>735	ArrayIndexing	entries [ i ]
>736	Identifier	i
>737	Identifier	entries
>738	Argument	entries [ i ] . offset
>739	MemberAccess	entries [ i ] . offset
>740	Identifier	offset
>741	ArrayIndexing	entries [ i ]
>742	Identifier	i
>743	Identifier	entries
>744	Argument	path
>745	Identifier	path
>746	Callee	nodesTree -> setLeafFile
>747	PtrMemberAccess	nodesTree -> setLeafFile
>748	Identifier	setLeafFile
>749	Identifier	nodesTree
>750	Condition	 
>751	Identifier	nodesTree
>752	ExpressionStatement	 
>753	ShiftExpression	ia >> * this
>754	UnaryOp	* this
>755	Identifier	this
>756	UnaryOperator	*
>757	Identifier	ia
>758	IdentifierDeclStatement	 
>759	IdentifierDecl	ia ( ifs )
>760	Identifier	ifs
>761	Identifier	ia
>762	IdentifierDeclType	boost 
>763	ExpressionStatement	 
>764	CallExpression	ifs . seekg ( entries [ i ++ ] . offset )
>765	ArgumentList	entries [ i ++ ] . offset
>766	Argument	entries [ i ++ ] . offset
>767	MemberAccess	entries [ i ++ ] . offset
>768	Identifier	offset
>769	ArrayIndexing	entries [ i ++ ]
>770	IncDecOp	i ++
>771	IncDec	++
>772	Identifier	i
>773	Identifier	entries
>774	Callee	ifs . seekg
>775	MemberAccess	ifs . seekg
>776	Identifier	seekg
>777	Identifier	ifs
>778	IdentifierDeclStatement	 
>779	IdentifierDecl	ifs ( path , std 
>780	Expression	path , std 
>781	InclusiveOrExpression	std 
>782	Identifier	std 
>783	Identifier	std 
>784	Identifier	path
>785	Identifier	ifs
>786	IdentifierDeclType	std 
>787	IdentifierDeclStatement	 
>788	IdentifierDecl	i = 0
>789	AssignmentExpr	i = 0
>790	PrimaryExpression	0
>791	Identifier	i
>792	Identifier	i
>793	IdentifierDeclType	int
>794	ExpressionStatement	 
>795	CallExpression	a . getEntries ( entries )
>796	ArgumentList	entries
>797	Argument	entries
>798	Identifier	entries
>799	Callee	a . getEntries
>800	MemberAccess	a . getEntries
>801	Identifier	getEntries
>802	Identifier	a
>803	IdentifierDeclStatement	 
>804	IdentifierDecl	entries
>805	Identifier	entries
>806	IdentifierDeclType	std 
>807	IdentifierDeclStatement	 
>808	IdentifierDecl	a ( path )
>809	Identifier	path
>810	Identifier	a
>811	IdentifierDeclType	Archive
>812	ExpressionStatement	 
>813	ShiftExpression	log . infoStream ( ) << \"Load geodata from \\"\" << path << \"\\"\"
>814	ShiftExpression	\"Load geodata from \\"\" << path << \"\\"\"
>815	ShiftExpression	path << \"\\"\"
>816	PrimaryExpression	\"\\"\"
>817	Identifier	path
>818	PrimaryExpression	\"Load geodata from \\"\"
>819	CallExpression	log . infoStream ( )
>820	ArgumentList	 
>821	Callee	log . infoStream
>822	MemberAccess	log . infoStream
>823	Identifier	infoStream
>824	Identifier	log
>825	IdentifierDeclStatement	 
>826	IdentifierDecl	& log = log4cpp 
>827	AssignmentExpr	& log = log4cpp 
>828	CallExpression	log4cpp 
>829	ArgumentList	\"Geodata\"
>830	Argument	\"Geodata\"
>831	PrimaryExpression	\"Geodata\"
>832	Callee	log4cpp 
>833	Identifier	log4cpp 
>834	Identifier	log
>835	Identifier	log
>836	IdentifierDeclType	log4cpp 
>857	FunctionDef	Geodata 
>858	ParameterList	const string & serPath
>859	Parameter	 
>860	Identifier	serPath
>861	ParameterType	const string &
>862	ReturnType	void
>863	CompoundStatement	 
>864	ExpressionStatement	 
>865	ShiftExpression	oa << * this
>866	UnaryOp	* this
>867	Identifier	this
>868	UnaryOperator	*
>869	Identifier	oa
>870	IdentifierDeclStatement	 
>871	IdentifierDecl	oa ( ofs )
>872	Identifier	ofs
>873	Identifier	oa
>874	IdentifierDeclType	boost 
>875	IdentifierDeclStatement	 
>876	IdentifierDecl	ofs ( serPath , std 
>877	Expression	serPath , std 
>878	InclusiveOrExpression	std 
>879	Identifier	std 
>880	Identifier	std 
>881	Identifier	serPath
>882	Identifier	ofs
>883	IdentifierDeclType	std 
>884	ExpressionStatement	 
>885	ShiftExpression	log . infoStream ( ) << \"Serialize to \\"\" << serPath << \"\\"\"
>886	ShiftExpression	\"Serialize to \\"\" << serPath << \"\\"\"
>887	ShiftExpression	serPath << \"\\"\"
>888	PrimaryExpression	\"\\"\"
>889	Identifier	serPath
>890	PrimaryExpression	\"Serialize to \\"\"
>891	CallExpression	log . infoStream ( )
>892	ArgumentList	 
>893	Callee	log . infoStream
>894	MemberAccess	log . infoStream
>895	Identifier	infoStream
>896	Identifier	log
>897	IdentifierDeclStatement	 
>898	IdentifierDecl	& log = log4cpp 
>899	AssignmentExpr	& log = log4cpp 
>900	CallExpression	log4cpp 
>901	ArgumentList	\"Geodata\"
>902	Argument	\"Geodata\"
>903	PrimaryExpression	\"Geodata\"
>904	Callee	log4cpp 
>905	Identifier	log4cpp 
>906	Identifier	log
>907	Identifier	log
>908	IdentifierDeclType	log4cpp 
>918	FunctionDef	Geodata 
>919	ParameterList	const string & outPath
>920	Parameter	 
>921	Identifier	outPath
>922	ParameterType	const string &
>923	ReturnType	void
>924	CompoundStatement	 
>925	IfStatement	if ( relTree )
>926	ExpressionStatement	 
>927	CallExpression	remove ( relationsPath . c_str ( ) )
>928	ArgumentList	relationsPath . c_str ( )
>929	Argument	relationsPath . c_str ( )
>930	CallExpression	relationsPath . c_str ( )
>931	ArgumentList	 
>932	Callee	relationsPath . c_str
>933	MemberAccess	relationsPath . c_str
>934	Identifier	c_str
>935	Identifier	relationsPath
>936	Callee	remove
>937	Identifier	remove
>938	Condition	 
>939	Identifier	relTree
>940	IfStatement	if ( waysTree )
>941	ExpressionStatement	 
>942	CallExpression	remove ( waysPath . c_str ( ) )
>943	ArgumentList	waysPath . c_str ( )
>944	Argument	waysPath . c_str ( )
>945	CallExpression	waysPath . c_str ( )
>946	ArgumentList	 
>947	Callee	waysPath . c_str
>948	MemberAccess	waysPath . c_str
>949	Identifier	c_str
>950	Identifier	waysPath
>951	Callee	remove
>952	Identifier	remove
>953	Condition	 
>954	Identifier	waysTree
>955	IfStatement	if ( nodesTree )
>956	ExpressionStatement	 
>957	CallExpression	remove ( nodesPath . c_str ( ) )
>958	ArgumentList	nodesPath . c_str ( )
>959	Argument	nodesPath . c_str ( )
>960	CallExpression	nodesPath . c_str ( )
>961	ArgumentList	 
>962	Callee	nodesPath . c_str
>963	MemberAccess	nodesPath . c_str
>964	Identifier	c_str
>965	Identifier	nodesPath
>966	Callee	remove
>967	Identifier	remove
>968	Condition	 
>969	Identifier	nodesTree
>970	ExpressionStatement	 
>971	CallExpression	remove ( serPath . c_str ( ) )
>972	ArgumentList	serPath . c_str ( )
>973	Argument	serPath . c_str ( )
>974	CallExpression	serPath . c_str ( )
>975	ArgumentList	 
>976	Callee	serPath . c_str
>977	MemberAccess	serPath . c_str
>978	Identifier	c_str
>979	Identifier	serPath
>980	Callee	remove
>981	Identifier	remove
>982	ExpressionStatement	 
>983	CallExpression	a . write ( )
>984	ArgumentList	 
>985	Callee	a . write
>986	MemberAccess	a . write
>987	Identifier	write
>988	Identifier	a
>989	IfStatement	if ( relTree )
>990	ExpressionStatement	 
>991	CallExpression	a . addFile ( relationsPath )
>992	ArgumentList	relationsPath
>993	Argument	relationsPath
>994	Identifier	relationsPath
>995	Callee	a . addFile
>996	MemberAccess	a . addFile
>997	Identifier	addFile
>998	Identifier	a
>999	Condition	 
>1000	Identifier	relTree
>1001	IfStatement	if ( waysTree )
>1002	ExpressionStatement	 
>1003	CallExpression	a . addFile ( waysPath )
>1004	ArgumentList	waysPath
>1005	Argument	waysPath
>1006	Identifier	waysPath
>1007	Callee	a . addFile
>1008	MemberAccess	a . addFile
>1009	Identifier	addFile
>1010	Identifier	a
>1011	Condition	 
>1012	Identifier	waysTree
>1013	IfStatement	if ( nodesTree )
>1014	ExpressionStatement	 
>1015	CallExpression	a . addFile ( nodesPath )
>1016	ArgumentList	nodesPath
>1017	Argument	nodesPath
>1018	Identifier	nodesPath
>1019	Callee	a . addFile
>1020	MemberAccess	a . addFile
>1021	Identifier	addFile
>1022	Identifier	a
>1023	Condition	 
>1024	Identifier	nodesTree
>1025	ExpressionStatement	 
>1026	CallExpression	a . addFile ( serPath )
>1027	ArgumentList	serPath
>1028	Argument	serPath
>1029	Identifier	serPath
>1030	Callee	a . addFile
>1031	MemberAccess	a . addFile
>1032	Identifier	addFile
>1033	Identifier	a
>1034	IdentifierDeclStatement	 
>1035	IdentifierDecl	a ( outPath )
>1036	Identifier	outPath
>1037	Identifier	a
>1038	IdentifierDeclType	Archive
>1039	ExpressionStatement	 
>1040	ShiftExpression	log . infoStream ( ) << \"Save geodata to \\"\" << outPath << \"\\"\"
>1041	ShiftExpression	\"Save geodata to \\"\" << outPath << \"\\"\"
>1042	ShiftExpression	outPath << \"\\"\"
>1043	PrimaryExpression	\"\\"\"
>1044	Identifier	outPath
>1045	PrimaryExpression	\"Save geodata to \\"\"
>1046	CallExpression	log . infoStream ( )
>1047	ArgumentList	 
>1048	Callee	log . infoStream
>1049	MemberAccess	log . infoStream
>1050	Identifier	infoStream
>1051	Identifier	log
>1052	IdentifierDeclStatement	 
>1053	IdentifierDecl	& log = log4cpp 
>1054	AssignmentExpr	& log = log4cpp 
>1055	CallExpression	log4cpp 
>1056	ArgumentList	\"Geodata\"
>1057	Argument	\"Geodata\"
>1058	PrimaryExpression	\"Geodata\"
>1059	Callee	log4cpp 
>1060	Identifier	log4cpp 
>1061	Identifier	log
>1062	Identifier	log
>1063	IdentifierDeclType	log4cpp 
>1064	ExpressionStatement	 
>1065	CallExpression	serialize ( serPath )
>1066	ArgumentList	serPath
>1067	Argument	serPath
>1068	Identifier	serPath
>1069	Callee	serialize
>1070	Identifier	serialize
>1071	ExpressionStatement	 
>1072	CallExpression	buildTrees ( nodesPath , waysPath , relationsPath )
>1073	ArgumentList	nodesPath
>1074	Argument	relationsPath
>1075	Identifier	relationsPath
>1076	Argument	waysPath
>1077	Identifier	waysPath
>1078	Argument	nodesPath
>1079	Identifier	nodesPath
>1080	Callee	buildTrees
>1081	Identifier	buildTrees
>1082	IdentifierDeclStatement	 
>1083	IdentifierDecl	relationsPath = ( base / \"relations.bin\" ) . string ( )
>1084	AssignmentExpr	relationsPath = ( base / \"relations.bin\" ) . string ( )
>1085	CallExpression	( base / \"relations.bin\" ) . string ( )
>1086	ArgumentList	 
>1087	Callee	( base / \"relations.bin\" ) . string
>1088	MemberAccess	( base / \"relations.bin\" ) . string
>1089	Identifier	string
>1090	MultiplicativeExpression	base / \"relations.bin\"
>1091	PrimaryExpression	\"relations.bin\"
>1092	Identifier	base
>1093	Identifier	relationsPath
>1094	Identifier	relationsPath
>1095	IdentifierDeclType	string
>1096	IdentifierDeclStatement	 
>1097	IdentifierDecl	waysPath = ( base / \"ways.bin\" ) . string ( )
>1098	AssignmentExpr	waysPath = ( base / \"ways.bin\" ) . string ( )
>1099	CallExpression	( base / \"ways.bin\" ) . string ( )
>1100	ArgumentList	 
>1101	Callee	( base / \"ways.bin\" ) . string
>1102	MemberAccess	( base / \"ways.bin\" ) . string
>1103	Identifier	string
>1104	MultiplicativeExpression	base / \"ways.bin\"
>1105	PrimaryExpression	\"ways.bin\"
>1106	Identifier	base
>1107	Identifier	waysPath
>1108	Identifier	waysPath
>1109	IdentifierDeclType	string
>1110	IdentifierDeclStatement	 
>1111	IdentifierDecl	nodesPath = ( base / \"nodes.bin\" ) . string ( )
>1112	AssignmentExpr	nodesPath = ( base / \"nodes.bin\" ) . string ( )
>1113	CallExpression	( base / \"nodes.bin\" ) . string ( )
>1114	ArgumentList	 
>1115	Callee	( base / \"nodes.bin\" ) . string
>1116	MemberAccess	( base / \"nodes.bin\" ) . string
>1117	Identifier	string
>1118	MultiplicativeExpression	base / \"nodes.bin\"
>1119	PrimaryExpression	\"nodes.bin\"
>1120	Identifier	base
>1121	Identifier	nodesPath
>1122	Identifier	nodesPath
>1123	IdentifierDeclType	string
>1124	IdentifierDeclStatement	 
>1125	IdentifierDecl	serPath = ( base / \"data.ser\" ) . string ( )
>1126	AssignmentExpr	serPath = ( base / \"data.ser\" ) . string ( )
>1127	CallExpression	( base / \"data.ser\" ) . string ( )
>1128	ArgumentList	 
>1129	Callee	( base / \"data.ser\" ) . string
>1130	MemberAccess	( base / \"data.ser\" ) . string
>1131	Identifier	string
>1132	MultiplicativeExpression	base / \"data.ser\"
>1133	PrimaryExpression	\"data.ser\"
>1134	Identifier	base
>1135	Identifier	serPath
>1136	Identifier	serPath
>1137	IdentifierDeclType	string
>1138	IdentifierDeclStatement	 
>1139	IdentifierDecl	base = out . parent_path ( )
>1140	AssignmentExpr	base = out . parent_path ( )
>1141	CallExpression	out . parent_path ( )
>1142	ArgumentList	 
>1143	Callee	out . parent_path
>1144	MemberAccess	out . parent_path
>1145	Identifier	parent_path
>1146	Identifier	out
>1147	Identifier	base
>1148	Identifier	base
>1149	IdentifierDeclType	boost 
>1150	IdentifierDeclStatement	 
>1151	IdentifierDecl	out = boost 
>1152	AssignmentExpr	out = boost 
>1153	CallExpression	boost 
>1154	ArgumentList	boost 
>1155	Argument	boost 
>1156	CallExpression	boost 
>1157	ArgumentList	outPath
>1158	Argument	outPath
>1159	Identifier	outPath
>1160	Callee	boost 
>1161	Identifier	boost 
>1162	Callee	boost 
>1163	Identifier	boost 
>1164	Identifier	out
>1165	Identifier	out
>1166	IdentifierDeclType	boost 
>1194	FunctionDef	Geodata 
>1195	ParameterList	const Way & way
>1196	Parameter	 
>1197	Identifier	way
>1198	ParameterType	const Way &
>1199	ReturnType	FixedRect
>1200	CompoundStatement	 
>1201	ReturnStatement	 
>1202	CallExpression	calculateBoundingBox ( way . getNodeIDs ( ) )
>1203	ArgumentList	way . getNodeIDs ( )
>1204	Argument	way . getNodeIDs ( )
>1205	CallExpression	way . getNodeIDs ( )
>1206	ArgumentList	 
>1207	Callee	way . getNodeIDs
>1208	MemberAccess	way . getNodeIDs
>1209	Identifier	getNodeIDs
>1210	Identifier	way
>1211	Callee	calculateBoundingBox
>1212	Identifier	calculateBoundingBox
>1219	FunctionDef	Geodata 
>1220	ParameterList	const Relation & relation
>1221	Parameter	 
>1222	Identifier	relation
>1223	ParameterType	const Relation &
>1224	ReturnType	FixedRect
>1225	CompoundStatement	 
>1226	ReturnStatement	 
>1227	CallExpression	FixedRect ( minX , minY , maxX , maxY )
>1228	ArgumentList	minX
>1229	Argument	maxY
>1230	Identifier	maxY
>1231	Argument	maxX
>1232	Identifier	maxX
>1233	Argument	minY
>1234	Identifier	minY
>1235	Argument	minX
>1236	Identifier	minX
>1237	Callee	FixedRect
>1238	Identifier	FixedRect
>1239	IfStatement	if ( maxX < minX || maxY < minY )
>1240	ReturnStatement	 
>1241	CallExpression	FixedRect ( 0 , 0 , 0 , 0 )
>1242	ArgumentList	0
>1243	Argument	0
>1244	PrimaryExpression	0
>1245	Argument	0
>1246	PrimaryExpression	0
>1247	Argument	0
>1248	PrimaryExpression	0
>1249	Argument	0
>1250	PrimaryExpression	0
>1251	Callee	FixedRect
>1252	Identifier	FixedRect
>1253	Condition	 
>1254	OrExpression	maxX < minX || maxY < minY
>1255	RelationalExpression	maxY < minY
>1256	Identifier	minY
>1257	Identifier	maxY
>1258	RelationalExpression	maxX < minX
>1259	Identifier	minX
>1260	Identifier	maxX
>1261	IfStatement	if ( wayIDs . size ( ) > 0 )
>1262	CompoundStatement	 
>1263	ExpressionStatement	 
>1264	AssignmentExpr	maxY = std 
>1265	CallExpression	std 
>1266	ArgumentList	maxY
>1267	Argument	result . maxY
>1268	MemberAccess	result . maxY
>1269	Identifier	maxY
>1270	Identifier	result
>1271	Argument	maxY
>1272	Identifier	maxY
>1273	Callee	std 
>1274	Identifier	std 
>1275	Identifier	maxY
>1276	ExpressionStatement	 
>1277	AssignmentExpr	maxX = std 
>1278	CallExpression	std 
>1279	ArgumentList	maxX
>1280	Argument	result . maxX
>1281	MemberAccess	result . maxX
>1282	Identifier	maxX
>1283	Identifier	result
>1284	Argument	maxX
>1285	Identifier	maxX
>1286	Callee	std 
>1287	Identifier	std 
>1288	Identifier	maxX
>1289	ExpressionStatement	 
>1290	AssignmentExpr	minY = std 
>1291	CallExpression	std 
>1292	ArgumentList	minY
>1293	Argument	result . minY
>1294	MemberAccess	result . minY
>1295	Identifier	minY
>1296	Identifier	result
>1297	Argument	minY
>1298	Identifier	minY
>1299	Callee	std 
>1300	Identifier	std 
>1301	Identifier	minY
>1302	ExpressionStatement	 
>1303	AssignmentExpr	minX = std 
>1304	CallExpression	std 
>1305	ArgumentList	minX
>1306	Argument	result . minX
>1307	MemberAccess	result . minX
>1308	Identifier	minX
>1309	Identifier	result
>1310	Argument	minX
>1311	Identifier	minX
>1312	Callee	std 
>1313	Identifier	std 
>1314	Identifier	minX
>1315	IdentifierDeclStatement	 
>1316	IdentifierDecl	result = calculateBoundingBox ( wayIDs )
>1317	AssignmentExpr	result = calculateBoundingBox ( wayIDs )
>1318	CallExpression	calculateBoundingBox ( wayIDs )
>1319	ArgumentList	wayIDs
>1320	Argument	wayIDs
>1321	Identifier	wayIDs
>1322	Callee	calculateBoundingBox
>1323	Identifier	calculateBoundingBox
>1324	Identifier	result
>1325	Identifier	result
>1326	IdentifierDeclType	FixedRect
>1327	Condition	 
>1328	RelationalExpression	wayIDs . size ( ) > 0
>1329	PrimaryExpression	0
>1330	CallExpression	wayIDs . size ( )
>1331	ArgumentList	 
>1332	Callee	wayIDs . size
>1333	MemberAccess	wayIDs . size
>1334	Identifier	size
>1335	Identifier	wayIDs
>1336	IdentifierDeclStatement	 
>1337	IdentifierDecl	& wayIDs = relation . getWayIDs ( )
>1338	AssignmentExpr	& wayIDs = relation . getWayIDs ( )
>1339	CallExpression	relation . getWayIDs ( )
>1340	ArgumentList	 
>1341	Callee	relation . getWayIDs
>1342	MemberAccess	relation . getWayIDs
>1343	Identifier	getWayIDs
>1344	Identifier	relation
>1345	Identifier	wayIDs
>1346	Identifier	wayIDs
>1347	IdentifierDeclType	const std 
>1348	IfStatement	if ( nodeIDs . size ( ) > 0 )
>1349	CompoundStatement	 
>1350	ExpressionStatement	 
>1351	AssignmentExpr	maxY = result . maxY
>1352	MemberAccess	result . maxY
>1353	Identifier	maxY
>1354	Identifier	result
>1355	Identifier	maxY
>1356	ExpressionStatement	 
>1357	AssignmentExpr	maxX = result . maxX
>1358	MemberAccess	result . maxX
>1359	Identifier	maxX
>1360	Identifier	result
>1361	Identifier	maxX
>1362	ExpressionStatement	 
>1363	AssignmentExpr	minY = result . minY
>1364	MemberAccess	result . minY
>1365	Identifier	minY
>1366	Identifier	result
>1367	Identifier	minY
>1368	ExpressionStatement	 
>1369	AssignmentExpr	minX = result . minX
>1370	MemberAccess	result . minX
>1371	Identifier	minX
>1372	Identifier	result
>1373	Identifier	minX
>1374	IdentifierDeclStatement	 
>1375	IdentifierDecl	result = calculateBoundingBox ( nodeIDs )
>1376	AssignmentExpr	result = calculateBoundingBox ( nodeIDs )
>1377	CallExpression	calculateBoundingBox ( nodeIDs )
>1378	ArgumentList	nodeIDs
>1379	Argument	nodeIDs
>1380	Identifier	nodeIDs
>1381	Callee	calculateBoundingBox
>1382	Identifier	calculateBoundingBox
>1383	Identifier	result
>1384	Identifier	result
>1385	IdentifierDeclType	FixedRect
>1386	Condition	 
>1387	RelationalExpression	nodeIDs . size ( ) > 0
>1388	PrimaryExpression	0
>1389	CallExpression	nodeIDs . size ( )
>1390	ArgumentList	 
>1391	Callee	nodeIDs . size
>1392	MemberAccess	nodeIDs . size
>1393	Identifier	size
>1394	Identifier	nodeIDs
>1395	IdentifierDeclStatement	 
>1396	IdentifierDecl	& nodeIDs = relation . getNodeIDs ( )
>1397	AssignmentExpr	& nodeIDs = relation . getNodeIDs ( )
>1398	CallExpression	relation . getNodeIDs ( )
>1399	ArgumentList	 
>1400	Callee	relation . getNodeIDs
>1401	MemberAccess	relation . getNodeIDs
>1402	Identifier	getNodeIDs
>1403	Identifier	relation
>1404	Identifier	nodeIDs
>1405	Identifier	nodeIDs
>1406	IdentifierDeclType	const std 
>1407	ExpressionStatement	 
>1408	CallExpression	max ( )
>1409	ArgumentList	 
>1410	Callee	max
>1411	Identifier	max
>1412	Statement	 
>1413	Statement	 
>1414	Statement	 
>1415	Statement	 
>1416	Statement	 
>1417	Statement	 
>1418	Statement	 
>1419	Statement	 
>1420	Statement	 
>1421	Statement	 
>1422	ExpressionStatement	 
>1423	CallExpression	max ( )
>1424	ArgumentList	 
>1425	Callee	max
>1426	Identifier	max
>1427	Statement	 
>1428	Statement	 
>1429	Statement	 
>1430	Statement	 
>1431	Statement	 
>1432	Statement	 
>1433	Statement	 
>1434	Statement	 
>1435	Statement	 
>1436	Statement	 
>1437	ExpressionStatement	 
>1438	CallExpression	min ( )
>1439	ArgumentList	 
>1440	Callee	min
>1441	Identifier	min
>1442	Statement	 
>1443	Statement	 
>1444	Statement	 
>1445	Statement	 
>1446	Statement	 
>1447	Statement	 
>1448	Statement	 
>1449	Statement	 
>1450	Statement	 
>1451	Statement	 
>1452	ExpressionStatement	 
>1453	CallExpression	min ( )
>1454	ArgumentList	 
>1455	Callee	min
>1456	Identifier	min
>1457	Statement	 
>1458	Statement	 
>1459	Statement	 
>1460	Statement	 
>1461	Statement	 
>1462	Statement	 
>1463	Statement	 
>1464	Statement	 
>1465	Statement	 
>1466	Statement	 
>1490	FunctionDef	Geodata 
>1491	ParameterList	const std 
>1492	Parameter	 
>1493	Identifier	nodeIDs
>1494	ParameterType	const std 
>1495	ReturnType	FixedRect
>1496	CompoundStatement	 
>1497	ReturnStatement	 
>1498	CallExpression	FixedRect ( minX , minY , maxX , maxY )
>1499	ArgumentList	minX
>1500	Argument	maxY
>1501	Identifier	maxY
>1502	Argument	maxX
>1503	Identifier	maxX
>1504	Argument	minY
>1505	Identifier	minY
>1506	Argument	minX
>1507	Identifier	minX
>1508	Callee	FixedRect
>1509	Identifier	FixedRect
>1510	IfStatement	if ( maxX < minX || maxY < minY )
>1511	ReturnStatement	 
>1512	CallExpression	FixedRect ( 0 , 0 , 0 , 0.0 )
>1513	ArgumentList	0
>1514	Argument	0.0
>1515	PrimaryExpression	0.0
>1516	Argument	0
>1517	PrimaryExpression	0
>1518	Argument	0
>1519	PrimaryExpression	0
>1520	Argument	0
>1521	PrimaryExpression	0
>1522	Callee	FixedRect
>1523	Identifier	FixedRect
>1524	Condition	 
>1525	OrExpression	maxX < minX || maxY < minY
>1526	RelationalExpression	maxY < minY
>1527	Identifier	minY
>1528	Identifier	maxY
>1529	RelationalExpression	maxX < minX
>1530	Identifier	minX
>1531	Identifier	maxX
>1532	CompoundStatement	 
>1533	ExpressionStatement	 
>1534	AssignmentExpr	minY = std 
>1535	CallExpression	std 
>1536	ArgumentList	minY
>1537	Argument	help . y
>1538	MemberAccess	help . y
>1539	Identifier	y
>1540	Identifier	help
>1541	Argument	minY
>1542	Identifier	minY
>1543	Callee	std 
>1544	Identifier	std 
>1545	Identifier	minY
>1546	ExpressionStatement	 
>1547	AssignmentExpr	minX = std 
>1548	CallExpression	std 
>1549	ArgumentList	minX
>1550	Argument	help . x
>1551	MemberAccess	help . x
>1552	Identifier	x
>1553	Identifier	help
>1554	Argument	minX
>1555	Identifier	minX
>1556	Callee	std 
>1557	Identifier	std 
>1558	Identifier	minX
>1559	ExpressionStatement	 
>1560	AssignmentExpr	maxY = std 
>1561	CallExpression	std 
>1562	ArgumentList	maxY
>1563	Argument	help . y
>1564	MemberAccess	help . y
>1565	Identifier	y
>1566	Identifier	help
>1567	Argument	maxY
>1568	Identifier	maxY
>1569	Callee	std 
>1570	Identifier	std 
>1571	Identifier	maxY
>1572	ExpressionStatement	 
>1573	AssignmentExpr	maxX = std 
>1574	CallExpression	std 
>1575	ArgumentList	maxX
>1576	Argument	help . x
>1577	MemberAccess	help . x
>1578	Identifier	x
>1579	Identifier	help
>1580	Argument	maxX
>1581	Identifier	maxX
>1582	Callee	std 
>1583	Identifier	std 
>1584	Identifier	maxX
>1585	ExpressionStatement	 
>1586	AssignmentExpr	help = nodes -> at ( i . getRaw ( ) ) . getLocation ( )
>1587	CallExpression	nodes -> at ( i . getRaw ( ) ) . getLocation ( )
>1588	ArgumentList	 
>1589	Callee	nodes -> at ( i . getRaw ( ) ) . getLocation
>1590	MemberAccess	nodes -> at ( i . getRaw ( ) ) . getLocation
>1591	Identifier	getLocation
>1592	CallExpression	nodes -> at ( i . getRaw ( ) )
>1593	ArgumentList	i . getRaw ( )
>1594	Argument	i . getRaw ( )
>1595	CallExpression	i . getRaw ( )
>1596	ArgumentList	 
>1597	Callee	i . getRaw
>1598	MemberAccess	i . getRaw
>1599	Identifier	getRaw
>1600	Identifier	i
>1601	Callee	nodes -> at
>1602	PtrMemberAccess	nodes -> at
>1603	Identifier	at
>1604	Identifier	nodes
>1605	Identifier	help
>1606	Statement	 
>1607	Statement	 
>1608	Label	 
>1609	Identifier	i
>1610	Statement	 
>1611	Statement	 
>1612	Statement	 
>1613	ExpressionStatement	 
>1614	CallExpression	max ( )
>1615	ArgumentList	 
>1616	Callee	max
>1617	Identifier	max
>1618	Statement	 
>1619	Statement	 
>1620	Statement	 
>1621	Statement	 
>1622	Statement	 
>1623	Statement	 
>1624	Statement	 
>1625	Statement	 
>1626	Statement	 
>1627	Statement	 
>1628	ExpressionStatement	 
>1629	CallExpression	max ( )
>1630	ArgumentList	 
>1631	Callee	max
>1632	Identifier	max
>1633	Statement	 
>1634	Statement	 
>1635	Statement	 
>1636	Statement	 
>1637	Statement	 
>1638	Statement	 
>1639	Statement	 
>1640	Statement	 
>1641	Statement	 
>1642	Statement	 
>1643	ExpressionStatement	 
>1644	CallExpression	min ( )
>1645	ArgumentList	 
>1646	Callee	min
>1647	Identifier	min
>1648	Statement	 
>1649	Statement	 
>1650	Statement	 
>1651	Statement	 
>1652	Statement	 
>1653	Statement	 
>1654	Statement	 
>1655	Statement	 
>1656	Statement	 
>1657	Statement	 
>1658	ExpressionStatement	 
>1659	CallExpression	min ( )
>1660	ArgumentList	 
>1661	Callee	min
>1662	Identifier	min
>1663	Statement	 
>1664	Statement	 
>1665	Statement	 
>1666	Statement	 
>1667	Statement	 
>1668	Statement	 
>1669	Statement	 
>1670	Statement	 
>1671	Statement	 
>1672	Statement	 
>1673	IdentifierDeclStatement	 
>1674	IdentifierDecl	help
>1675	Identifier	help
>1676	IdentifierDeclType	FixedPoint
>1697	FunctionDef	Geodata 
>1698	ParameterList	const std 
>1699	Parameter	 
>1700	Identifier	wayIDs
>1701	ParameterType	const std 
>1702	ReturnType	FixedRect
>1703	CompoundStatement	 
>1704	ReturnStatement	 
>1705	CallExpression	FixedRect ( minX , minY , maxX , maxY )
>1706	ArgumentList	minX
>1707	Argument	maxY
>1708	Identifier	maxY
>1709	Argument	maxX
>1710	Identifier	maxX
>1711	Argument	minY
>1712	Identifier	minY
>1713	Argument	minX
>1714	Identifier	minX
>1715	Callee	FixedRect
>1716	Identifier	FixedRect
>1717	IfStatement	if ( maxX < minX || maxY < minY )
>1718	ReturnStatement	 
>1719	CallExpression	FixedRect ( 0 , 0 , 0 , 0.0 )
>1720	ArgumentList	0
>1721	Argument	0.0
>1722	PrimaryExpression	0.0
>1723	Argument	0
>1724	PrimaryExpression	0
>1725	Argument	0
>1726	PrimaryExpression	0
>1727	Argument	0
>1728	PrimaryExpression	0
>1729	Callee	FixedRect
>1730	Identifier	FixedRect
>1731	Condition	 
>1732	OrExpression	maxX < minX || maxY < minY
>1733	RelationalExpression	maxY < minY
>1734	Identifier	minY
>1735	Identifier	maxY
>1736	RelationalExpression	maxX < minX
>1737	Identifier	minX
>1738	Identifier	maxX
>1739	CompoundStatement	 
>1740	ExpressionStatement	 
>1741	AssignmentExpr	maxY = std 
>1742	CallExpression	std 
>1743	ArgumentList	maxY
>1744	Argument	bounds . maxY
>1745	MemberAccess	bounds . maxY
>1746	Identifier	maxY
>1747	Identifier	bounds
>1748	Argument	maxY
>1749	Identifier	maxY
>1750	Callee	std 
>1751	Identifier	std 
>1752	Identifier	maxY
>1753	ExpressionStatement	 
>1754	AssignmentExpr	maxX = std 
>1755	CallExpression	std 
>1756	ArgumentList	maxX
>1757	Argument	bounds . maxX
>1758	MemberAccess	bounds . maxX
>1759	Identifier	maxX
>1760	Identifier	bounds
>1761	Argument	maxX
>1762	Identifier	maxX
>1763	Callee	std 
>1764	Identifier	std 
>1765	Identifier	maxX
>1766	ExpressionStatement	 
>1767	AssignmentExpr	minY = std 
>1768	CallExpression	std 
>1769	ArgumentList	minY
>1770	Argument	bounds . minY
>1771	MemberAccess	bounds . minY
>1772	Identifier	minY
>1773	Identifier	bounds
>1774	Argument	minY
>1775	Identifier	minY
>1776	Callee	std 
>1777	Identifier	std 
>1778	Identifier	minY
>1779	ExpressionStatement	 
>1780	AssignmentExpr	minX = std 
>1781	CallExpression	std 
>1782	ArgumentList	minX
>1783	Argument	bounds . minX
>1784	MemberAccess	bounds . minX
>1785	Identifier	minX
>1786	Identifier	bounds
>1787	Argument	minX
>1788	Identifier	minX
>1789	Callee	std 
>1790	Identifier	std 
>1791	Identifier	minX
>1792	IdentifierDeclStatement	 
>1793	IdentifierDecl	bounds = calculateBoundingBox ( ways -> at ( i . getRaw ( ) ) )
>1794	AssignmentExpr	bounds = calculateBoundingBox ( ways -> at ( i . getRaw ( ) ) )
>1795	CallExpression	calculateBoundingBox ( ways -> at ( i . getRaw ( ) ) )
>1796	ArgumentList	ways -> at ( i . getRaw ( ) )
>1797	Argument	ways -> at ( i . getRaw ( ) )
>1798	CallExpression	ways -> at ( i . getRaw ( ) )
>1799	ArgumentList	i . getRaw ( )
>1800	Argument	i . getRaw ( )
>1801	CallExpression	i . getRaw ( )
>1802	ArgumentList	 
>1803	Callee	i . getRaw
>1804	MemberAccess	i . getRaw
>1805	Identifier	getRaw
>1806	Identifier	i
>1807	Callee	ways -> at
>1808	PtrMemberAccess	ways -> at
>1809	Identifier	at
>1810	Identifier	ways
>1811	Callee	calculateBoundingBox
>1812	Identifier	calculateBoundingBox
>1813	Identifier	bounds
>1814	Identifier	bounds
>1815	IdentifierDeclType	FixedRect
>1816	Statement	 
>1817	Statement	 
>1818	Label	 
>1819	Identifier	i
>1820	Statement	 
>1821	Statement	 
>1822	Statement	 
>1823	ExpressionStatement	 
>1824	CallExpression	max ( )
>1825	ArgumentList	 
>1826	Callee	max
>1827	Identifier	max
>1828	Statement	 
>1829	Statement	 
>1830	Statement	 
>1831	Statement	 
>1832	Statement	 
>1833	Statement	 
>1834	Statement	 
>1835	Statement	 
>1836	Statement	 
>1837	Statement	 
>1838	ExpressionStatement	 
>1839	CallExpression	max ( )
>1840	ArgumentList	 
>1841	Callee	max
>1842	Identifier	max
>1843	Statement	 
>1844	Statement	 
>1845	Statement	 
>1846	Statement	 
>1847	Statement	 
>1848	Statement	 
>1849	Statement	 
>1850	Statement	 
>1851	Statement	 
>1852	Statement	 
>1853	ExpressionStatement	 
>1854	CallExpression	min ( )
>1855	ArgumentList	 
>1856	Callee	min
>1857	Identifier	min
>1858	Statement	 
>1859	Statement	 
>1860	Statement	 
>1861	Statement	 
>1862	Statement	 
>1863	Statement	 
>1864	Statement	 
>1865	Statement	 
>1866	Statement	 
>1867	Statement	 
>1868	ExpressionStatement	 
>1869	CallExpression	min ( )
>1870	ArgumentList	 
>1871	Callee	min
>1872	Identifier	min
>1873	Statement	 
>1874	Statement	 
>1875	Statement	 
>1876	Statement	 
>1877	Statement	 
>1878	Statement	 
>1879	Statement	 
>1880	Statement	 
>1881	Statement	 
>1882	Statement	 
<3=5,4
<9=11,10
<15=27,26,16
<16=23,20,17
<17=19,18
<20=22,21
<23=25,24
<27=126,77,28
<28=68,29
<29=64,63,62,61,60,58,57,56,55,41,30
<30=31
<31=37,32
<32=35,33
<33=34
<35=36
<37=38
<38=40,39
<41=42
<42=51,43
<43=44
<44=45
<45=49,46
<46=47
<47=48
<49=50
<51=52
<52=54,53
<58=59
<64=65
<65=67,66
<68=69
<69=71,70
<71=73,72
<73=74
<74=76,75
<77=117,78
<78=113,112,111,110,109,107,106,105,104,90,79
<79=80
<80=86,81
<81=84,82
<82=83
<84=85
<86=87
<87=89,88
<90=91
<91=100,92
<92=93
<93=94
<94=98,95
<95=96
<96=97
<98=99
<100=101
<101=103,102
<107=108
<113=114
<114=116,115
<117=118
<118=120,119
<120=122,121
<122=123
<123=125,124
<126=167,127
<127=163,162,161,160,159,158,156,155,154,153,139,128
<128=129
<129=135,130
<130=133,131
<131=132
<133=134
<135=136
<136=138,137
<139=140
<140=149,141
<141=142
<142=143
<143=145,144
<145=146
<146=148,147
<149=150
<150=152,151
<156=157
<163=164
<164=166,165
<167=168
<168=170,169
<170=172,171
<172=173
<173=175,174
<201=207,206,202
<202=203
<203=205,204
<207=236,225,224,223,222,221,220,219,218,217,216,215,214,213,212,211,210,209,208
<225=227,226
<227=228
<228=230,229
<230=232,231
<232=233
<233=235,234
<236=237
<237=239,238
<239=241,240
<251=257,256,252
<252=253
<253=255,254
<257=286,275,274,273,272,271,270,269,268,267,266,265,264,263,262,261,260,259,258
<275=277,276
<277=278
<278=280,279
<280=282,281
<282=283
<283=285,284
<286=287
<287=289,288
<289=291,290
<301=307,306,302
<302=303
<303=305,304
<307=335,324,323,322,321,320,319,318,317,316,315,314,313,312,311,310,309,308
<324=326,325
<326=327
<327=329,328
<329=331,330
<331=332
<332=334,333
<335=336
<336=338,337
<338=340,339
<350=356,355,351
<351=352
<352=354,353
<356=357
<357=358
<358=380,359
<359=370,360
<360=369,361
<361=365,362
<362=363
<363=364
<365=366
<366=368,367
<370=379,371
<371=375,372
<372=373
<373=374
<375=376
<376=378,377
<380=389,381
<381=385,382
<382=383
<383=384
<385=386
<386=388,387
<403=409,408,404
<404=405
<405=407,406
<409=450,449,448,447,446,445,444,443,442,441,440,439,438,437,436,435,434,433,432,431,430,429,428,427,426,412,410
<410=411
<412=424,413
<413=414
<414=420,415
<415=418,416
<416=417
<418=419
<420=421
<421=423,422
<424=425
<457=463,462,458
<458=459
<459=461,460
<463=504,503,502,501,500,499,498,497,496,495,494,493,492,491,490,489,488,487,486,485,484,483,482,481,480,466,464
<464=465
<466=478,467
<467=468
<468=474,469
<469=472,470
<470=471
<472=473
<474=475
<475=477,476
<478=479
<511=517,516,512
<512=513
<513=515,514
<517=558,557,556,555,554,553,552,551,550,549,548,547,546,545,544,543,542,541,540,539,538,537,536,535,534,520,518
<518=519
<520=532,521
<521=522
<522=528,523
<523=526,524
<524=525
<526=527
<528=529
<529=531,530
<532=533
<565=571,570,566
<566=567
<567=569,568
<571=572
<572=573
<573=587,574
<574=583,575
<575=576
<576=577
<577=579,578
<579=580
<580=582,581
<583=584
<584=586,585
<596=602,601,597
<597=598
<598=600,599
<602=603
<603=604
<604=618,605
<605=614,606
<606=607
<607=608
<608=610,609
<610=611
<611=613,612
<614=615
<615=617,616
<627=633,632,628
<628=629
<629=631,630
<633=634
<634=635
<635=649,636
<636=645,637
<637=638
<638=639
<639=641,640
<641=642
<642=644,643
<645=646
<646=648,647
<658=664,663,659
<659=660
<660=662,661
<664=825,812,807,803,794,787,778,763,758,752,723,694,665
<665=692,666
<666=671,667
<667=668
<668=670,669
<671=672
<672=688,673
<673=686,680,674
<674=675
<675=677,676
<677=679,678
<680=681
<681=683,682
<683=685,684
<686=687
<688=689
<689=691,690
<692=693
<694=721,695
<695=700,696
<696=697
<697=699,698
<700=701
<701=717,702
<702=715,709,703
<703=704
<704=706,705
<706=708,707
<709=710
<710=712,711
<712=714,713
<715=716
<717=718
<718=720,719
<721=722
<723=750,724
<724=729,725
<725=726
<726=728,727
<729=730
<730=746,731
<731=744,738,732
<732=733
<733=735,734
<735=737,736
<738=739
<739=741,740
<741=743,742
<744=745
<746=747
<747=749,748
<750=751
<752=753
<753=757,754
<754=756,755
<758=759
<759=762,761,760
<763=764
<764=774,765
<765=766
<766=767
<767=769,768
<769=773,770
<770=772,771
<774=775
<775=777,776
<778=779
<779=786,785,780
<780=784,781
<781=783,782
<787=788
<788=793,792,789
<789=791,790
<794=795
<795=799,796
<796=797
<797=798
<799=800
<800=802,801
<803=804
<804=806,805
<807=808
<808=811,810,809
<812=813
<813=819,814
<814=818,815
<815=817,816
<819=821,820
<821=822
<822=824,823
<825=826
<826=836,835,827
<827=834,828
<828=832,829
<829=830
<830=831
<832=833
<857=863,862,858
<858=859
<859=861,860
<863=897,884,875,870,864
<864=865
<865=869,866
<866=868,867
<870=871
<871=874,873,872
<875=876
<876=883,882,877
<877=881,878
<878=880,879
<884=885
<885=891,886
<886=890,887
<887=889,888
<891=893,892
<893=894
<894=896,895
<897=898
<898=908,907,899
<899=906,900
<900=904,901
<901=902
<902=903
<904=905
<918=924,923,919
<919=920
<920=922,921
<924=1150,1138,1124,1110,1096,1082,1071,1064,1052,1039,1034,1025,1013,1001,989,982,970,955,940,925
<925=938,926
<926=927
<927=936,928
<928=929
<929=930
<930=932,931
<932=933
<933=935,934
<936=937
<938=939
<940=953,941
<941=942
<942=951,943
<943=944
<944=945
<945=947,946
<947=948
<948=950,949
<951=952
<953=954
<955=968,956
<956=957
<957=966,958
<958=959
<959=960
<960=962,961
<962=963
<963=965,964
<966=967
<968=969
<970=971
<971=980,972
<972=973
<973=974
<974=976,975
<976=977
<977=979,978
<980=981
<982=983
<983=985,984
<985=986
<986=988,987
<989=999,990
<990=991
<991=995,992
<992=993
<993=994
<995=996
<996=998,997
<999=1000
<1001=1011,1002
<1002=1003
<1003=1007,1004
<1004=1005
<1005=1006
<1007=1008
<1008=1010,1009
<1011=1012
<1013=1023,1014
<1014=1015
<1015=1019,1016
<1016=1017
<1017=1018
<1019=1020
<1020=1022,1021
<1023=1024
<1025=1026
<1026=1030,1027
<1027=1028
<1028=1029
<1030=1031
<1031=1033,1032
<1034=1035
<1035=1038,1037,1036
<1039=1040
<1040=1046,1041
<1041=1045,1042
<1042=1044,1043
<1046=1048,1047
<1048=1049
<1049=1051,1050
<1052=1053
<1053=1063,1062,1054
<1054=1061,1055
<1055=1059,1056
<1056=1057
<1057=1058
<1059=1060
<1064=1065
<1065=1069,1066
<1066=1067
<1067=1068
<1069=1070
<1071=1072
<1072=1080,1073
<1073=1078,1076,1074
<1074=1075
<1076=1077
<1078=1079
<1080=1081
<1082=1083
<1083=1095,1094,1084
<1084=1093,1085
<1085=1087,1086
<1087=1088
<1088=1090,1089
<1090=1092,1091
<1096=1097
<1097=1109,1108,1098
<1098=1107,1099
<1099=1101,1100
<1101=1102
<1102=1104,1103
<1104=1106,1105
<1110=1111
<1111=1123,1122,1112
<1112=1121,1113
<1113=1115,1114
<1115=1116
<1116=1118,1117
<1118=1120,1119
<1124=1125
<1125=1137,1136,1126
<1126=1135,1127
<1127=1129,1128
<1129=1130
<1130=1132,1131
<1132=1134,1133
<1138=1139
<1139=1149,1148,1140
<1140=1147,1141
<1141=1143,1142
<1143=1144
<1144=1146,1145
<1150=1151
<1151=1166,1165,1152
<1152=1164,1153
<1153=1162,1154
<1154=1155
<1155=1156
<1156=1160,1157
<1157=1158
<1158=1159
<1160=1161
<1162=1163
<1194=1200,1199,1195
<1195=1196
<1196=1198,1197
<1200=1201
<1201=1202
<1202=1211,1203
<1203=1204
<1204=1205
<1205=1207,1206
<1207=1208
<1208=1210,1209
<1211=1212
<1219=1225,1224,1220
<1220=1221
<1221=1223,1222
<1225=1226,1239,1261,1336,1348,1395,1407,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466
<1226=1227
<1227=1237,1228
<1228=1235,1233,1231,1229
<1229=1230
<1231=1232
<1233=1234
<1235=1236
<1237=1238
<1239=1253,1240
<1240=1241
<1241=1251,1242
<1242=1249,1247,1245,1243
<1243=1244
<1245=1246
<1247=1248
<1249=1250
<1251=1252
<1253=1254
<1254=1258,1255
<1255=1257,1256
<1258=1260,1259
<1261=1327,1262
<1262=1315,1302,1289,1276,1263
<1263=1264
<1264=1275,1265
<1265=1273,1266
<1266=1271,1267
<1267=1268
<1268=1270,1269
<1271=1272
<1273=1274
<1276=1277
<1277=1288,1278
<1278=1286,1279
<1279=1284,1280
<1280=1281
<1281=1283,1282
<1284=1285
<1286=1287
<1289=1290
<1290=1301,1291
<1291=1299,1292
<1292=1297,1293
<1293=1294
<1294=1296,1295
<1297=1298
<1299=1300
<1302=1303
<1303=1314,1304
<1304=1312,1305
<1305=1310,1306
<1306=1307
<1307=1309,1308
<1310=1311
<1312=1313
<1315=1316
<1316=1326,1325,1317
<1317=1324,1318
<1318=1322,1319
<1319=1320
<1320=1321
<1322=1323
<1327=1328
<1328=1330,1329
<1330=1332,1331
<1332=1333
<1333=1335,1334
<1336=1337
<1337=1347,1346,1338
<1338=1345,1339
<1339=1341,1340
<1341=1342
<1342=1344,1343
<1348=1386,1349
<1349=1374,1368,1362,1356,1350
<1350=1351
<1351=1355,1352
<1352=1354,1353
<1356=1357
<1357=1361,1358
<1358=1360,1359
<1362=1363
<1363=1367,1364
<1364=1366,1365
<1368=1369
<1369=1373,1370
<1370=1372,1371
<1374=1375
<1375=1385,1384,1376
<1376=1383,1377
<1377=1381,1378
<1378=1379
<1379=1380
<1381=1382
<1386=1387
<1387=1389,1388
<1389=1391,1390
<1391=1392
<1392=1394,1393
<1395=1396
<1396=1406,1405,1397
<1397=1404,1398
<1398=1400,1399
<1400=1401
<1401=1403,1402
<1407=1408
<1408=1410,1409
<1410=1411
<1422=1423
<1423=1425,1424
<1425=1426
<1437=1438
<1438=1440,1439
<1440=1441
<1452=1453
<1453=1455,1454
<1455=1456
<1490=1496,1495,1491
<1491=1492
<1492=1494,1493
<1496=1673,1672,1671,1670,1497,1510,1532,1606,1607,1608,1610,1611,1612,1613,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1663,1664,1665,1666,1667,1668,1669
<1497=1498
<1498=1508,1499
<1499=1506,1504,1502,1500
<1500=1501
<1502=1503
<1504=1505
<1506=1507
<1508=1509
<1510=1524,1511
<1511=1512
<1512=1522,1513
<1513=1520,1518,1516,1514
<1514=1515
<1516=1517
<1518=1519
<1520=1521
<1522=1523
<1524=1525
<1525=1529,1526
<1526=1528,1527
<1529=1531,1530
<1532=1585,1572,1559,1546,1533
<1533=1534
<1534=1545,1535
<1535=1543,1536
<1536=1541,1537
<1537=1538
<1538=1540,1539
<1541=1542
<1543=1544
<1546=1547
<1547=1558,1548
<1548=1556,1549
<1549=1554,1550
<1550=1551
<1551=1553,1552
<1554=1555
<1556=1557
<1559=1560
<1560=1571,1561
<1561=1569,1562
<1562=1567,1563
<1563=1564
<1564=1566,1565
<1567=1568
<1569=1570
<1572=1573
<1573=1584,1574
<1574=1582,1575
<1575=1580,1576
<1576=1577
<1577=1579,1578
<1580=1581
<1582=1583
<1585=1586
<1586=1605,1587
<1587=1589,1588
<1589=1590
<1590=1592,1591
<1592=1601,1593
<1593=1594
<1594=1595
<1595=1597,1596
<1597=1598
<1598=1600,1599
<1601=1602
<1602=1604,1603
<1608=1609
<1613=1614
<1614=1616,1615
<1616=1617
<1628=1629
<1629=1631,1630
<1631=1632
<1643=1644
<1644=1646,1645
<1646=1647
<1658=1659
<1659=1661,1660
<1661=1662
<1673=1674
<1674=1676,1675
<1697=1703,1702,1698
<1698=1699
<1699=1701,1700
<1703=1882,1881,1880,1704,1717,1739,1816,1817,1818,1820,1821,1822,1823,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1873,1874,1875,1876,1877,1878,1879
<1704=1705
<1705=1715,1706
<1706=1713,1711,1709,1707
<1707=1708
<1709=1710
<1711=1712
<1713=1714
<1715=1716
<1717=1731,1718
<1718=1719
<1719=1729,1720
<1720=1727,1725,1723,1721
<1721=1722
<1723=1724
<1725=1726
<1727=1728
<1729=1730
<1731=1732
<1732=1736,1733
<1733=1735,1734
<1736=1738,1737
<1739=1792,1779,1766,1753,1740
<1740=1741
<1741=1752,1742
<1742=1750,1743
<1743=1748,1744
<1744=1745
<1745=1747,1746
<1748=1749
<1750=1751
<1753=1754
<1754=1765,1755
<1755=1763,1756
<1756=1761,1757
<1757=1758
<1758=1760,1759
<1761=1762
<1763=1764
<1766=1767
<1767=1778,1768
<1768=1776,1769
<1769=1774,1770
<1770=1771
<1771=1773,1772
<1774=1775
<1776=1777
<1779=1780
<1780=1791,1781
<1781=1789,1782
<1782=1787,1783
<1783=1784
<1784=1786,1785
<1787=1788
<1789=1790
<1792=1793
<1793=1815,1814,1794
<1794=1813,1795
<1795=1811,1796
<1796=1797
<1797=1798
<1798=1807,1799
<1799=1800
<1800=1801
<1801=1803,1802
<1803=1804
<1804=1806,1805
<1807=1808
<1808=1810,1809
<1811=1812
<1818=1819
<1823=1824
<1824=1826,1825
<1826=1827
<1838=1839
<1839=1841,1840
<1841=1842
<1853=1854
<1854=1856,1855
<1856=1857
<1868=1869
<1869=1871,1870
<1871=1872
