>5	FunctionDef	BitHistory 
>6	ParameterList	UInt bitNum , int nSteps , Real64 alpha , UInt verbosity
>7	Parameter	 
>8	Identifier	verbosity
>9	ParameterType	UInt
>10	Parameter	 
>11	Identifier	alpha
>12	ParameterType	Real64
>13	Parameter	 
>14	Identifier	nSteps
>15	ParameterType	int
>16	Parameter	 
>17	Identifier	bitNum
>18	ParameterType	UInt
>19	CompoundStatement	 
>20	ExpressionStatement	 
>21	AssignmentExpr	id_ = ss . str ( )
>22	CallExpression	ss . str ( )
>23	ArgumentList	 
>24	Callee	ss . str
>25	MemberAccess	ss . str
>26	Identifier	str
>27	Identifier	ss
>28	Identifier	id_
>29	ExpressionStatement	 
>30	ShiftExpression	ss << bitNum << \"[\" << nSteps << \"]\"
>31	ShiftExpression	bitNum << \"[\" << nSteps << \"]\"
>32	ShiftExpression	\"[\" << nSteps << \"]\"
>33	ShiftExpression	nSteps << \"]\"
>34	PrimaryExpression	\"]\"
>35	Identifier	nSteps
>36	PrimaryExpression	\"[\"
>37	Identifier	bitNum
>38	Identifier	ss
>39	IdentifierDeclStatement	 
>40	IdentifierDecl	ss
>41	Identifier	ss
>42	IdentifierDeclType	stringstream
>53	FunctionDef	BitHistory 
>54	ParameterList	int iteration , int bucketIdx
>55	Parameter	 
>56	Identifier	bucketIdx
>57	ParameterType	int
>58	Parameter	 
>59	Identifier	iteration
>60	ParameterType	int
>61	ReturnType	void
>62	CompoundStatement	 
>63	ExpressionStatement	 
>64	AssignmentExpr	stats_ [ bucketIdx ] = dc
>65	Identifier	dc
>66	ArrayIndexing	stats_ [ bucketIdx ]
>67	Identifier	bucketIdx
>68	Identifier	stats_
>69	CompoundStatement	 
>70	ExpressionStatement	 
>71	AssignmentExpr	dc = stats_ [ bucketIdx ] + alpha_
>72	AdditiveExpression	stats_ [ bucketIdx ] + alpha_
>73	Identifier	alpha_
>74	ArrayIndexing	stats_ [ bucketIdx ]
>75	Identifier	bucketIdx
>76	Identifier	stats_
>77	Identifier	dc
>78	ExpressionStatement	 
>79	AssignmentExpr	lastTotalUpdate_ = iteration
>80	Identifier	iteration
>81	Identifier	lastTotalUpdate_
>82	ForStatement	for ( map < int , Real64 > 
>83	CompoundStatement	 
>84	ExpressionStatement	 
>85	AssignmentExpr	stats_ [ i -> first ] = i -> second * exp
>86	MultiplicativeExpression	i -> second * exp
>87	Identifier	exp
>88	PtrMemberAccess	i -> second
>89	Identifier	second
>90	Identifier	i
>91	ArrayIndexing	stats_ [ i -> first ]
>92	PtrMemberAccess	i -> first
>93	Identifier	first
>94	Identifier	i
>95	Identifier	stats_
>96	UnaryExpression	 
>97	Identifier	i
>98	IncDec	++
>99	Condition	 
>100	EqualityExpression	i != stats_ . end ( )
>101	CallExpression	stats_ . end ( )
>102	ArgumentList	 
>103	Callee	stats_ . end
>104	MemberAccess	stats_ . end
>105	Identifier	end
>106	Identifier	stats_
>107	Identifier	i
>108	ForInit	 
>109	IdentifierDeclStatement	map < int , Real64 > 
>110	IdentifierDecl	i = stats_ . begin ( )
>111	AssignmentExpr	i = stats_ . begin ( )
>112	CallExpression	stats_ . begin ( )
>113	ArgumentList	 
>114	Callee	stats_ . begin
>115	MemberAccess	stats_ . begin
>116	Identifier	begin
>117	Identifier	stats_
>118	Identifier	i
>119	Identifier	i
>120	IdentifierDeclType	map < int , Real64 > 
>121	IdentifierDeclStatement	 
>122	IdentifierDecl	exp = pow ( 1.0 - alpha_ , iteration - lastTotalUpdate_ )
>123	AssignmentExpr	exp = pow ( 1.0 - alpha_ , iteration - lastTotalUpdate_ )
>124	CallExpression	pow ( 1.0 - alpha_ , iteration - lastTotalUpdate_ )
>125	ArgumentList	1.0 - alpha_
>126	Argument	iteration - lastTotalUpdate_
>127	AdditiveExpression	iteration - lastTotalUpdate_
>128	Identifier	lastTotalUpdate_
>129	Identifier	iteration
>130	Argument	1.0 - alpha_
>131	AdditiveExpression	1.0 - alpha_
>132	Identifier	alpha_
>133	PrimaryExpression	1.0
>134	Callee	pow
>135	Identifier	pow
>136	Identifier	exp
>137	Identifier	exp
>138	IdentifierDeclType	Real64
>139	Statement	 
>140	Statement	 
>141	Statement	 
>142	Statement	 
>143	Statement	 
>144	Statement	 
>145	Statement	 
>146	Statement	 
>147	Statement	 
>148	Statement	 
>149	IfStatement	if ( denom > 0.0 )
>150	ElseStatement	else
>151	CompoundStatement	 
>152	ExpressionStatement	 
>153	AssignmentExpr	dc = dcNew
>154	Identifier	dcNew
>155	Identifier	dc
>156	CompoundStatement	 
>157	ExpressionStatement	 
>158	AssignmentExpr	dcNew = dc + ( alpha_ / denom )
>159	AdditiveExpression	dc + ( alpha_ / denom )
>160	MultiplicativeExpression	alpha_ / denom
>161	Identifier	denom
>162	Identifier	alpha_
>163	Identifier	dc
>164	Identifier	dcNew
>165	Condition	 
>166	RelationalExpression	denom > 0.0
>167	PrimaryExpression	0.0
>168	Identifier	denom
>169	IdentifierDeclStatement	 
>170	IdentifierDecl	dcNew = - 1.0
>171	AssignmentExpr	dcNew = - 1.0
>172	UnaryOp	- 1.0
>173	PrimaryExpression	1.0
>174	UnaryOperator	-
>175	Identifier	dcNew
>176	Identifier	dcNew
>177	IdentifierDeclType	Real64
>178	IdentifierDeclStatement	 
>179	IdentifierDecl	denom = pow ( 1.0 - alpha_ , iteration - lastTotalUpdate_ )
>180	AssignmentExpr	denom = pow ( 1.0 - alpha_ , iteration - lastTotalUpdate_ )
>181	CallExpression	pow ( 1.0 - alpha_ , iteration - lastTotalUpdate_ )
>182	ArgumentList	1.0 - alpha_
>183	Argument	iteration - lastTotalUpdate_
>184	AdditiveExpression	iteration - lastTotalUpdate_
>185	Identifier	lastTotalUpdate_
>186	Identifier	iteration
>187	Argument	1.0 - alpha_
>188	AdditiveExpression	1.0 - alpha_
>189	Identifier	alpha_
>190	PrimaryExpression	1.0
>191	Callee	pow
>192	Identifier	pow
>193	Identifier	denom
>194	Identifier	denom
>195	IdentifierDeclType	Real64
>196	IfStatement	if ( it != stats_ . end ( ) )
>197	CompoundStatement	 
>198	ExpressionStatement	 
>199	AssignmentExpr	dc = it -> second
>200	PtrMemberAccess	it -> second
>201	Identifier	second
>202	Identifier	it
>203	Identifier	dc
>204	Condition	 
>205	EqualityExpression	it != stats_ . end ( )
>206	CallExpression	stats_ . end ( )
>207	ArgumentList	 
>208	Callee	stats_ . end
>209	MemberAccess	stats_ . end
>210	Identifier	end
>211	Identifier	stats_
>212	Identifier	it
>213	IdentifierDeclStatement	 
>214	IdentifierDecl	dc = 0.0
>215	AssignmentExpr	dc = 0.0
>216	PrimaryExpression	0.0
>217	Identifier	dc
>218	Identifier	dc
>219	IdentifierDeclType	Real64
>220	IdentifierDeclStatement	 
>221	IdentifierDecl	it = stats_ . find ( bucketIdx )
>222	AssignmentExpr	it = stats_ . find ( bucketIdx )
>223	CallExpression	stats_ . find ( bucketIdx )
>224	ArgumentList	bucketIdx
>225	Argument	bucketIdx
>226	Identifier	bucketIdx
>227	Callee	stats_ . find
>228	MemberAccess	stats_ . find
>229	Identifier	find
>230	Identifier	stats_
>231	Identifier	it
>232	Identifier	it
>233	IdentifierDeclType	map < int , Real64 > 
>234	IfStatement	if ( lastTotalUpdate_ == - 1 )
>235	CompoundStatement	 
>236	ExpressionStatement	 
>237	AssignmentExpr	lastTotalUpdate_ = iteration
>238	Identifier	iteration
>239	Identifier	lastTotalUpdate_
>240	Condition	 
>241	EqualityExpression	lastTotalUpdate_ == - 1
>242	UnaryOp	- 1
>243	PrimaryExpression	1
>244	UnaryOperator	-
>245	Identifier	lastTotalUpdate_
>273	FunctionDef	BitHistory 
>274	ParameterList	int iteration , vector < Real64 > * votes
>275	Parameter	 
>276	Identifier	votes
>277	ParameterType	vector < Real64 > *
>278	Parameter	 
>279	Identifier	iteration
>280	ParameterType	int
>281	ReturnType	void
>282	CompoundStatement	 
>283	IfStatement	if ( total > 0.0 )
>284	CompoundStatement	 
>285	ForStatement	for ( UInt i = 0 ; i < votes -> size ( ) ; ++ i )
>286	CompoundStatement	 
>287	ExpressionStatement	 
>288	AssignmentExpr	( * votes ) [ i ] = ( * votes ) [ i ] / total
>289	MultiplicativeExpression	( * votes ) [ i ] / total
>290	Identifier	total
>291	ArrayIndexing	( * votes ) [ i ]
>292	Identifier	i
>293	UnaryOp	* votes
>294	Identifier	votes
>295	UnaryOperator	*
>296	ArrayIndexing	( * votes ) [ i ]
>297	Identifier	i
>298	UnaryOp	* votes
>299	Identifier	votes
>300	UnaryOperator	*
>301	UnaryExpression	 
>302	Identifier	i
>303	IncDec	++
>304	Condition	 
>305	RelationalExpression	i < votes -> size ( )
>306	CallExpression	votes -> size ( )
>307	ArgumentList	 
>308	Callee	votes -> size
>309	PtrMemberAccess	votes -> size
>310	Identifier	size
>311	Identifier	votes
>312	Identifier	i
>313	ForInit	 
>314	IdentifierDeclStatement	UInt i = 0 ;
>315	IdentifierDecl	i = 0
>316	AssignmentExpr	i = 0
>317	PrimaryExpression	0
>318	Identifier	i
>319	Identifier	i
>320	IdentifierDeclType	UInt
>321	Condition	 
>322	RelationalExpression	total > 0.0
>323	PrimaryExpression	0.0
>324	Identifier	total
>325	ForStatement	for ( map < int , Real64 > 
>326	CompoundStatement	 
>327	IfStatement	if ( it -> second > 0.0 )
>328	CompoundStatement	 
>329	ExpressionStatement	 
>330	AssignmentExpr	total += it -> second
>331	PtrMemberAccess	it -> second
>332	Identifier	second
>333	Identifier	it
>334	Identifier	total
>335	ExpressionStatement	 
>336	AssignmentExpr	( * votes ) [ it -> first ] = it -> second
>337	PtrMemberAccess	it -> second
>338	Identifier	second
>339	Identifier	it
>340	ArrayIndexing	( * votes ) [ it -> first ]
>341	PtrMemberAccess	it -> first
>342	Identifier	first
>343	Identifier	it
>344	UnaryOp	* votes
>345	Identifier	votes
>346	UnaryOperator	*
>347	Condition	 
>348	RelationalExpression	it -> second > 0.0
>349	PrimaryExpression	0.0
>350	PtrMemberAccess	it -> second
>351	Identifier	second
>352	Identifier	it
>353	UnaryExpression	 
>354	Identifier	it
>355	IncDec	++
>356	Condition	 
>357	EqualityExpression	it != stats_ . end ( )
>358	CallExpression	stats_ . end ( )
>359	ArgumentList	 
>360	Callee	stats_ . end
>361	MemberAccess	stats_ . end
>362	Identifier	end
>363	Identifier	stats_
>364	Identifier	it
>365	ForInit	 
>366	IdentifierDeclStatement	map < int , Real64 > 
>367	IdentifierDecl	it = stats_ . begin ( )
>368	AssignmentExpr	it = stats_ . begin ( )
>369	CallExpression	stats_ . begin ( )
>370	ArgumentList	 
>371	Callee	stats_ . begin
>372	MemberAccess	stats_ . begin
>373	Identifier	begin
>374	Identifier	stats_
>375	Identifier	it
>376	Identifier	it
>377	IdentifierDeclType	map < int , Real64 > 
>378	IdentifierDeclStatement	 
>379	IdentifierDecl	total = 0.0
>380	AssignmentExpr	total = 0.0
>381	PrimaryExpression	0.0
>382	Identifier	total
>383	Identifier	total
>384	IdentifierDeclType	Real64
>405	FunctionDef	BitHistory 
>406	ParameterList	ostream & outStream
>407	Parameter	 
>408	Identifier	outStream
>409	ParameterType	ostream &
>410	ReturnType	void
>411	CompoundStatement	 
>412	ExpressionStatement	 
>413	ShiftExpression	outStream << \"~BitHistory\" << endl
>414	ShiftExpression	\"~BitHistory\" << endl
>415	Identifier	endl
>416	PrimaryExpression	\"~BitHistory\"
>417	Identifier	outStream
>418	ExpressionStatement	 
>419	ShiftExpression	outStream << endl
>420	Identifier	endl
>421	Identifier	outStream
>422	ForStatement	for ( map < int , Real64 > 
>423	CompoundStatement	 
>424	ExpressionStatement	 
>425	ShiftExpression	outStream << it -> first << \" \" << it -> second << \" \"
>426	ShiftExpression	it -> first << \" \" << it -> second << \" \"
>427	ShiftExpression	\" \" << it -> second << \" \"
>428	ShiftExpression	it -> second << \" \"
>429	PrimaryExpression	\" \"
>430	PtrMemberAccess	it -> second
>431	Identifier	second
>432	Identifier	it
>433	PrimaryExpression	\" \"
>434	PtrMemberAccess	it -> first
>435	Identifier	first
>436	Identifier	it
>437	Identifier	outStream
>438	UnaryExpression	 
>439	Identifier	it
>440	IncDec	++
>441	Condition	 
>442	EqualityExpression	it != stats_ . end ( )
>443	CallExpression	stats_ . end ( )
>444	ArgumentList	 
>445	Callee	stats_ . end
>446	MemberAccess	stats_ . end
>447	Identifier	end
>448	Identifier	stats_
>449	Identifier	it
>450	ForInit	 
>451	IdentifierDeclStatement	map < int , Real64 > 
>452	IdentifierDecl	it = stats_ . begin ( )
>453	AssignmentExpr	it = stats_ . begin ( )
>454	CallExpression	stats_ . begin ( )
>455	ArgumentList	 
>456	Callee	stats_ . begin
>457	MemberAccess	stats_ . begin
>458	Identifier	begin
>459	Identifier	stats_
>460	Identifier	it
>461	Identifier	it
>462	IdentifierDeclType	map < int , Real64 > 
>463	ExpressionStatement	 
>464	ShiftExpression	outStream << stats_ . size ( ) << \" \"
>465	ShiftExpression	stats_ . size ( ) << \" \"
>466	PrimaryExpression	\" \"
>467	CallExpression	stats_ . size ( )
>468	ArgumentList	 
>469	Callee	stats_ . size
>470	MemberAccess	stats_ . size
>471	Identifier	size
>472	Identifier	stats_
>473	Identifier	outStream
>474	ExpressionStatement	 
>475	ShiftExpression	outStream << id_ << \" \" << lastTotalUpdate_ << \" \" << learnIteration_ << \" \" << alpha_ << \" \" << verbosity_ << \" \" << \
>476	ShiftExpression	id_ << \" \" << lastTotalUpdate_ << \" \" << learnIteration_ << \" \" << alpha_ << \" \" << verbosity_ << \" \" << \
>477	ShiftExpression	\" \" << lastTotalUpdate_ << \" \" << learnIteration_ << \" \" << alpha_ << \" \" << verbosity_ << \" \" << endl
>478	ShiftExpression	lastTotalUpdate_ << \" \" << learnIteration_ << \" \" << alpha_ << \" \" << verbosity_ << \" \" << endl
>479	ShiftExpression	\" \" << learnIteration_ << \" \" << alpha_ << \" \" << verbosity_ << \" \" << endl
>480	ShiftExpression	learnIteration_ << \" \" << alpha_ << \" \" << verbosity_ << \" \" << endl
>481	ShiftExpression	\" \" << alpha_ << \" \" << verbosity_ << \" \" << endl
>482	ShiftExpression	alpha_ << \" \" << verbosity_ << \" \" << endl
>483	ShiftExpression	\" \" << verbosity_ << \" \" << endl
>484	ShiftExpression	verbosity_ << \" \" << endl
>485	ShiftExpression	\" \" << endl
>486	Identifier	endl
>487	PrimaryExpression	\" \"
>488	Identifier	verbosity_
>489	PrimaryExpression	\" \"
>490	Identifier	alpha_
>491	PrimaryExpression	\" \"
>492	Identifier	learnIteration_
>493	PrimaryExpression	\" \"
>494	Identifier	lastTotalUpdate_
>495	PrimaryExpression	\" \"
>496	Identifier	id_
>497	Identifier	outStream
>498	ExpressionStatement	 
>499	ShiftExpression	outStream << \"BitHistory\" << endl
>500	ShiftExpression	\"BitHistory\" << endl
>501	Identifier	endl
>502	PrimaryExpression	\"BitHistory\"
>503	Identifier	outStream
>512	FunctionDef	BitHistory 
>513	ParameterList	istream & inStream
>514	Parameter	 
>515	Identifier	inStream
>516	ParameterType	istream &
>517	ReturnType	void
>518	CompoundStatement	 
>519	ExpressionStatement	 
>520	CallExpression	NTA_CHECK ( marker == \"~BitHistory\" )
>521	ArgumentList	marker == \"~BitHistory\"
>522	Argument	marker == \"~BitHistory\"
>523	EqualityExpression	marker == \"~BitHistory\"
>524	PrimaryExpression	\"~BitHistory\"
>525	Identifier	marker
>526	Callee	NTA_CHECK
>527	Identifier	NTA_CHECK
>528	ExpressionStatement	 
>529	ShiftExpression	inStream >> marker
>530	Identifier	marker
>531	Identifier	inStream
>532	ForStatement	for ( UInt i = 0 ; i < numBuckets ; ++ i )
>533	CompoundStatement	 
>534	ExpressionStatement	 
>535	CallExpression	stats_ . insert ( pair < int , Real64 > ( bucketIdx , dutyCycle ) )
>536	ArgumentList	pair < int
>537	Argument	Real64 > ( bucketIdx , dutyCycle )
>538	RelationalExpression	Real64 > ( bucketIdx , dutyCycle )
>539	Expression	bucketIdx , dutyCycle
>540	Identifier	dutyCycle
>541	Identifier	bucketIdx
>542	Identifier	Real64
>543	Argument	pair < int
>544	RelationalExpression	pair < int
>545	Identifier	int
>546	Identifier	pair
>547	Callee	stats_ . insert
>548	MemberAccess	stats_ . insert
>549	Identifier	insert
>550	Identifier	stats_
>551	ExpressionStatement	 
>552	ShiftExpression	inStream >> bucketIdx >> dutyCycle
>553	ShiftExpression	bucketIdx >> dutyCycle
>554	Identifier	dutyCycle
>555	Identifier	bucketIdx
>556	Identifier	inStream
>557	UnaryExpression	 
>558	Identifier	i
>559	IncDec	++
>560	Condition	 
>561	RelationalExpression	i < numBuckets
>562	Identifier	numBuckets
>563	Identifier	i
>564	ForInit	 
>565	IdentifierDeclStatement	UInt i = 0 ;
>566	IdentifierDecl	i = 0
>567	AssignmentExpr	i = 0
>568	PrimaryExpression	0
>569	Identifier	i
>570	Identifier	i
>571	IdentifierDeclType	UInt
>572	ExpressionStatement	 
>573	ShiftExpression	inStream >> numBuckets
>574	Identifier	numBuckets
>575	Identifier	inStream
>576	IdentifierDeclStatement	 
>577	IdentifierDecl	dutyCycle
>578	Identifier	dutyCycle
>579	IdentifierDeclType	Real64
>580	IdentifierDeclStatement	 
>581	IdentifierDecl	bucketIdx
>582	Identifier	bucketIdx
>583	IdentifierDeclType	int
>584	IdentifierDeclStatement	 
>585	IdentifierDecl	numBuckets
>586	Identifier	numBuckets
>587	IdentifierDeclType	UInt
>588	ExpressionStatement	 
>589	ShiftExpression	inStream >> id_ >> lastTotalUpdate_ >> learnIteration_ >> alpha_ >> verbosity_
>590	ShiftExpression	id_ >> lastTotalUpdate_ >> learnIteration_ >> alpha_ >> verbosity_
>591	ShiftExpression	lastTotalUpdate_ >> learnIteration_ >> alpha_ >> verbosity_
>592	ShiftExpression	learnIteration_ >> alpha_ >> verbosity_
>593	ShiftExpression	alpha_ >> verbosity_
>594	Identifier	verbosity_
>595	Identifier	alpha_
>596	Identifier	learnIteration_
>597	Identifier	lastTotalUpdate_
>598	Identifier	id_
>599	Identifier	inStream
>600	ExpressionStatement	 
>601	CallExpression	NTA_CHECK ( marker == \"BitHistory\" )
>602	ArgumentList	marker == \"BitHistory\"
>603	Argument	marker == \"BitHistory\"
>604	EqualityExpression	marker == \"BitHistory\"
>605	PrimaryExpression	\"BitHistory\"
>606	Identifier	marker
>607	Callee	NTA_CHECK
>608	Identifier	NTA_CHECK
>609	ExpressionStatement	 
>610	ShiftExpression	inStream >> marker
>611	Identifier	marker
>612	Identifier	inStream
>613	IdentifierDeclStatement	 
>614	IdentifierDecl	marker
>615	Identifier	marker
>616	IdentifierDeclType	string
<5=19,6
<6=16,13,10,7
<7=9,8
<10=12,11
<13=15,14
<16=18,17
<19=39,29,20
<20=21
<21=28,22
<22=24,23
<24=25
<25=27,26
<29=30
<30=38,31
<31=37,32
<32=36,33
<33=35,34
<39=40
<40=42,41
<53=62,61,54
<54=58,55
<55=57,56
<58=60,59
<62=234,220,213,196,178,169,149,148,147,146,145,144,143,142,141,140,139,69,63
<63=64
<64=66,65
<66=68,67
<69=121,82,78,70
<70=71
<71=77,72
<72=74,73
<74=76,75
<78=79
<79=81,80
<82=108,99,96,83
<83=84
<84=85
<85=91,86
<86=88,87
<88=90,89
<91=95,92
<92=94,93
<96=98,97
<99=100
<100=107,101
<101=103,102
<103=104
<104=106,105
<108=109
<109=110
<110=120,119,111
<111=118,112
<112=114,113
<114=115
<115=117,116
<121=122
<122=138,137,123
<123=136,124
<124=134,125
<125=130,126
<126=127
<127=129,128
<130=131
<131=133,132
<134=135
<149=165,156,150
<150=151
<151=152
<152=153
<153=155,154
<156=157
<157=158
<158=164,159
<159=163,160
<160=162,161
<165=166
<166=168,167
<169=170
<170=177,176,171
<171=175,172
<172=174,173
<178=179
<179=195,194,180
<180=193,181
<181=191,182
<182=187,183
<183=184
<184=186,185
<187=188
<188=190,189
<191=192
<196=204,197
<197=198
<198=199
<199=203,200
<200=202,201
<204=205
<205=212,206
<206=208,207
<208=209
<209=211,210
<213=214
<214=219,218,215
<215=217,216
<220=221
<221=233,232,222
<222=231,223
<223=227,224
<224=225
<225=226
<227=228
<228=230,229
<234=240,235
<235=236
<236=237
<237=239,238
<240=241
<241=245,242
<242=244,243
<273=282,281,274
<274=278,275
<275=277,276
<278=280,279
<282=378,325,283
<283=321,284
<284=285
<285=313,304,301,286
<286=287
<287=288
<288=296,289
<289=291,290
<291=293,292
<293=295,294
<296=298,297
<298=300,299
<301=303,302
<304=305
<305=312,306
<306=308,307
<308=309
<309=311,310
<313=314
<314=315
<315=320,319,316
<316=318,317
<321=322
<322=324,323
<325=365,356,353,326
<326=327
<327=347,328
<328=335,329
<329=330
<330=334,331
<331=333,332
<335=336
<336=340,337
<337=339,338
<340=344,341
<341=343,342
<344=346,345
<347=348
<348=350,349
<350=352,351
<353=355,354
<356=357
<357=364,358
<358=360,359
<360=361
<361=363,362
<365=366
<366=367
<367=377,376,368
<368=375,369
<369=371,370
<371=372
<372=374,373
<378=379
<379=384,383,380
<380=382,381
<405=411,410,406
<406=407
<407=409,408
<411=498,474,463,422,418,412
<412=413
<413=417,414
<414=416,415
<418=419
<419=421,420
<422=450,441,438,423
<423=424
<424=425
<425=437,426
<426=434,427
<427=433,428
<428=430,429
<430=432,431
<434=436,435
<438=440,439
<441=442
<442=449,443
<443=445,444
<445=446
<446=448,447
<450=451
<451=452
<452=462,461,453
<453=460,454
<454=456,455
<456=457
<457=459,458
<463=464
<464=473,465
<465=467,466
<467=469,468
<469=470
<470=472,471
<474=475
<475=497,476
<476=496,477
<477=495,478
<478=494,479
<479=493,480
<480=492,481
<481=491,482
<482=490,483
<483=489,484
<484=488,485
<485=487,486
<498=499
<499=503,500
<500=502,501
<512=518,517,513
<513=514
<514=516,515
<518=613,609,600,588,584,580,576,572,532,528,519
<519=520
<520=526,521
<521=522
<522=523
<523=525,524
<526=527
<528=529
<529=531,530
<532=564,560,557,533
<533=551,534
<534=535
<535=547,536
<536=543,537
<537=538
<538=542,539
<539=541,540
<543=544
<544=546,545
<547=548
<548=550,549
<551=552
<552=556,553
<553=555,554
<557=559,558
<560=561
<561=563,562
<564=565
<565=566
<566=571,570,567
<567=569,568
<572=573
<573=575,574
<576=577
<577=579,578
<580=581
<581=583,582
<584=585
<585=587,586
<588=589
<589=599,590
<590=598,591
<591=597,592
<592=596,593
<593=595,594
<600=601
<601=607,602
<602=603
<603=604
<604=606,605
<607=608
<609=610
<610=612,611
<613=614
<614=616,615
