>3	FunctionDef	Options 
>4	ParameterList	std 
>5	Parameter	 
>6	Identifier	t
>7	ParameterType	std 
>8	ReturnType	osmium 
>9	CompoundStatement	 
>10	BlockStarter	 
>11	CompoundStatement	 
>12	ExpressionStatement	exit ( return_code 
>13	CallExpression	exit ( return_code 
>14	ArgumentList	return_code 
>15	Argument	return_code 
>16	Identifier	return_code 
>17	Callee	exit
>18	Identifier	exit
>19	ExpressionStatement	std 
>20	ShiftExpression	std 
>21	PrimaryExpression	\"Can't understand the date, format should be YYYY-MM-DD.\n\"
>22	Identifier	std 
>23	BlockStarter	 
>24	CompoundStatement	 
>25	ReturnStatement	return ts ;
>26	Identifier	ts
>27	IfStatement	if ( ts < osmium 
>28	CompoundStatement	 
>29	ExpressionStatement	exit ( return_code 
>30	CallExpression	exit ( return_code 
>31	ArgumentList	return_code 
>32	Argument	return_code 
>33	Identifier	return_code 
>34	Callee	exit
>35	Identifier	exit
>36	ExpressionStatement	std 
>37	ShiftExpression	std 
>38	PrimaryExpression	\"Dates before 2005 don't make sense, because OSM didn't exist then.\n\"
>39	Identifier	std 
>40	Condition	ts < osmium 
>41	RelationalExpression	ts < osmium 
>42	CallExpression	osmium 
>43	ArgumentList	\"2005-01-01T00
>44	Argument	\"2005-01-01T00
>45	PrimaryExpression	\"2005-01-01T00
>46	Callee	osmium 
>47	Identifier	osmium 
>48	Identifier	ts
>49	IdentifierDeclStatement	osmium 
>50	IdentifierDecl	ts ( t . c_str ( ) )
>51	CallExpression	t . c_str ( )
>52	ArgumentList	 
>53	Callee	t . c_str
>54	MemberAccess	t . c_str
>55	Identifier	c_str
>56	Identifier	t
>57	Identifier	ts
>58	IdentifierDeclType	osmium 
>59	ExpressionStatement	t . append ( \"T00
>60	CallExpression	t . append ( \"T00
>61	ArgumentList	\"T00
>62	Argument	\"T00
>63	PrimaryExpression	\"T00
>64	Callee	t . append
>65	MemberAccess	t . append
>66	Identifier	append
>67	Identifier	t
>75	FunctionDef	Options 
>76	ParameterList	int argc , char * argv [ ]
>77	Parameter	 
>78	Identifier	argv
>79	ParameterType	char * [ ]
>80	Parameter	 
>81	Identifier	argc
>82	ParameterType	int
>83	CompoundStatement	 
>84	BlockStarter	 
>85	CompoundStatement	 
>86	ExpressionStatement	exit ( return_code 
>87	CallExpression	exit ( return_code 
>88	ArgumentList	return_code 
>89	Argument	return_code 
>90	Identifier	return_code 
>91	Callee	exit
>92	Identifier	exit
>93	ExpressionStatement	std 
>94	ShiftExpression	std 
>95	ShiftExpression	\"Error parsing command line
>96	ShiftExpression	e . what ( ) << std 
>97	Identifier	std 
>98	CallExpression	e . what ( )
>99	ArgumentList	 
>100	Callee	e . what
>101	MemberAccess	e . what
>102	Identifier	what
>103	Identifier	e
>104	PrimaryExpression	\"Error parsing command line
>105	Identifier	std 
>106	Identifier	e
>107	BlockStarter	 
>108	CompoundStatement	 
>109	IfStatement	if ( vm . count ( \"time-step\" ) )
>110	CompoundStatement	 
>111	ExpressionStatement	 
>112	Statement	)
>113	Statement	(
>114	Statement	>
>115	Statement	int
>116	Statement	<
>117	Statement	as
>118	Statement	.
>119	Statement	]
>120	Statement	\"time-step\"
>121	Statement	[
>122	Statement	vm
>123	Statement	=
>124	Statement	time_step
>125	Condition	vm . count ( \"time-step\" )
>126	CallExpression	vm . count ( \"time-step\" )
>127	ArgumentList	\"time-step\"
>128	Argument	\"time-step\"
>129	PrimaryExpression	\"time-step\"
>130	Callee	vm . count
>131	MemberAccess	vm . count
>132	Identifier	count
>133	Identifier	vm
>134	IfStatement	if ( vm . count ( \"end-time\" ) )
>135	CompoundStatement	 
>136	ExpressionStatement	 
>137	Statement	)
>138	Statement	)
>139	Statement	(
>140	Statement	>
>141	Statement	string
>142	Statement	 
>143	Statement	std
>144	Statement	<
>145	Statement	as
>146	Statement	.
>147	Statement	]
>148	Statement	\"end-time\"
>149	Statement	[
>150	Statement	vm
>151	Statement	(
>152	Statement	parse_time
>153	Statement	=
>154	Statement	end_time
>155	Condition	vm . count ( \"end-time\" )
>156	CallExpression	vm . count ( \"end-time\" )
>157	ArgumentList	\"end-time\"
>158	Argument	\"end-time\"
>159	PrimaryExpression	\"end-time\"
>160	Callee	vm . count
>161	MemberAccess	vm . count
>162	Identifier	count
>163	Identifier	vm
>164	IfStatement	if ( vm . count ( \"start-time\" ) )
>165	CompoundStatement	 
>166	ExpressionStatement	 
>167	Statement	)
>168	Statement	)
>169	Statement	(
>170	Statement	>
>171	Statement	string
>172	Statement	 
>173	Statement	std
>174	Statement	<
>175	Statement	as
>176	Statement	.
>177	Statement	]
>178	Statement	\"start-time\"
>179	Statement	[
>180	Statement	vm
>181	Statement	(
>182	Statement	parse_time
>183	Statement	=
>184	Statement	start_time
>185	Condition	vm . count ( \"start-time\" )
>186	CallExpression	vm . count ( \"start-time\" )
>187	ArgumentList	\"start-time\"
>188	Argument	\"start-time\"
>189	PrimaryExpression	\"start-time\"
>190	Callee	vm . count
>191	MemberAccess	vm . count
>192	Identifier	count
>193	Identifier	vm
>194	IfStatement	if ( vm . count ( \"crs\" ) )
>195	CompoundStatement	 
>196	ExpressionStatement	 
>197	Statement	)
>198	Statement	(
>199	Statement	>
>200	Statement	int
>201	Statement	<
>202	Statement	as
>203	Statement	.
>204	Statement	]
>205	Statement	\"crs\"
>206	Statement	[
>207	Statement	vm
>208	Statement	=
>209	Statement	epsg
>210	Condition	vm . count ( \"crs\" )
>211	CallExpression	vm . count ( \"crs\" )
>212	ArgumentList	\"crs\"
>213	Argument	\"crs\"
>214	PrimaryExpression	\"crs\"
>215	Callee	vm . count
>216	MemberAccess	vm . count
>217	Identifier	count
>218	Identifier	vm
>219	IfStatement	if ( vm . count ( \"output-format\" ) )
>220	CompoundStatement	 
>221	ExpressionStatement	 
>222	Statement	)
>223	Statement	(
>224	Statement	>
>225	Statement	string
>226	Statement	 
>227	Statement	std
>228	Statement	<
>229	Statement	as
>230	Statement	.
>231	Statement	]
>232	Statement	\"output-format\"
>233	Statement	[
>234	Statement	vm
>235	Statement	=
>236	Statement	output_format
>237	Condition	vm . count ( \"output-format\" )
>238	CallExpression	vm . count ( \"output-format\" )
>239	ArgumentList	\"output-format\"
>240	Argument	\"output-format\"
>241	PrimaryExpression	\"output-format\"
>242	Callee	vm . count
>243	MemberAccess	vm . count
>244	Identifier	count
>245	Identifier	vm
>246	IfStatement	if ( vm . count ( \"input-format\" ) )
>247	CompoundStatement	 
>248	ExpressionStatement	 
>249	Statement	)
>250	Statement	(
>251	Statement	>
>252	Statement	string
>253	Statement	 
>254	Statement	std
>255	Statement	<
>256	Statement	as
>257	Statement	.
>258	Statement	]
>259	Statement	\"input-format\"
>260	Statement	[
>261	Statement	vm
>262	Statement	=
>263	Statement	input_format
>264	Condition	vm . count ( \"input-format\" )
>265	CallExpression	vm . count ( \"input-format\" )
>266	ArgumentList	\"input-format\"
>267	Argument	\"input-format\"
>268	PrimaryExpression	\"input-format\"
>269	Callee	vm . count
>270	MemberAccess	vm . count
>271	Identifier	count
>272	Identifier	vm
>273	IfStatement	if ( vm . count ( \"input-filename\" ) )
>274	CompoundStatement	 
>275	ExpressionStatement	 
>276	Statement	)
>277	Statement	(
>278	Statement	>
>279	Statement	string
>280	Statement	 
>281	Statement	std
>282	Statement	<
>283	Statement	as
>284	Statement	.
>285	Statement	]
>286	Statement	\"input-filename\"
>287	Statement	[
>288	Statement	vm
>289	Statement	=
>290	Statement	input_filename
>291	Condition	vm . count ( \"input-filename\" )
>292	CallExpression	vm . count ( \"input-filename\" )
>293	ArgumentList	\"input-filename\"
>294	Argument	\"input-filename\"
>295	PrimaryExpression	\"input-filename\"
>296	Callee	vm . count
>297	MemberAccess	vm . count
>298	Identifier	count
>299	Identifier	vm
>300	IfStatement	if ( vm . count ( \"output\" ) )
>301	CompoundStatement	 
>302	ExpressionStatement	 
>303	Statement	)
>304	Statement	(
>305	Statement	>
>306	Statement	string
>307	Statement	 
>308	Statement	std
>309	Statement	<
>310	Statement	as
>311	Statement	.
>312	Statement	]
>313	Statement	\"output\"
>314	Statement	[
>315	Statement	vm
>316	Statement	=
>317	Statement	output_directory
>318	Condition	vm . count ( \"output\" )
>319	CallExpression	vm . count ( \"output\" )
>320	ArgumentList	\"output\"
>321	Argument	\"output\"
>322	PrimaryExpression	\"output\"
>323	Callee	vm . count
>324	MemberAccess	vm . count
>325	Identifier	count
>326	Identifier	vm
>327	IfStatement	if ( vm . count ( \"quiet\" ) )
>328	CompoundStatement	 
>329	ExpressionStatement	vout . verbose ( false )
>330	CallExpression	vout . verbose ( false )
>331	ArgumentList	false
>332	Argument	false
>333	Identifier	false
>334	Callee	vout . verbose
>335	MemberAccess	vout . verbose
>336	Identifier	verbose
>337	Identifier	vout
>338	Condition	vm . count ( \"quiet\" )
>339	CallExpression	vm . count ( \"quiet\" )
>340	ArgumentList	\"quiet\"
>341	Argument	\"quiet\"
>342	PrimaryExpression	\"quiet\"
>343	Callee	vm . count
>344	MemberAccess	vm . count
>345	Identifier	count
>346	Identifier	vm
>347	IfStatement	if ( vm . count ( \"help\" ) )
>348	CompoundStatement	 
>349	ExpressionStatement	exit ( 0 )
>350	CallExpression	exit ( 0 )
>351	ArgumentList	0
>352	Argument	0
>353	PrimaryExpression	0
>354	Callee	exit
>355	Identifier	exit
>356	ExpressionStatement	std 
>357	ShiftExpression	std 
>358	ShiftExpression	desc << \"\n\"
>359	PrimaryExpression	\"\n\"
>360	Identifier	desc
>361	Identifier	std 
>362	Condition	vm . count ( \"help\" )
>363	CallExpression	vm . count ( \"help\" )
>364	ArgumentList	\"help\"
>365	Argument	\"help\"
>366	PrimaryExpression	\"help\"
>367	Callee	vm . count
>368	MemberAccess	vm . count
>369	Identifier	count
>370	Identifier	vm
>371	ExpressionStatement	po 
>372	CallExpression	po 
>373	ArgumentList	vm
>374	Argument	vm
>375	Identifier	vm
>376	Callee	po 
>377	Identifier	po 
>378	ExpressionStatement	po 
>379	CallExpression	po 
>380	ArgumentList	po 
>381	Argument	vm
>382	Identifier	vm
>383	Argument	po 
>384	CallExpression	po 
>385	ArgumentList	 
>386	Callee	po 
>387	MemberAccess	po 
>388	Identifier	run
>389	CallExpression	po 
>390	ArgumentList	positional
>391	Argument	positional
>392	Identifier	positional
>393	Callee	po 
>394	MemberAccess	po 
>395	Identifier	positional
>396	CallExpression	po 
>397	ArgumentList	all
>398	Argument	all
>399	Identifier	all
>400	Callee	po 
>401	MemberAccess	po 
>402	Identifier	options
>403	CallExpression	po 
>404	ArgumentList	argc
>405	Argument	argv
>406	Identifier	argv
>407	Argument	argc
>408	Identifier	argc
>409	Callee	po 
>410	Identifier	po 
>411	Callee	po 
>412	Identifier	po 
>413	ExpressionStatement	positional . add ( \"input-filename\" , 1 )
>414	CallExpression	positional . add ( \"input-filename\" , 1 )
>415	ArgumentList	\"input-filename\"
>416	Argument	1
>417	PrimaryExpression	1
>418	Argument	\"input-filename\"
>419	PrimaryExpression	\"input-filename\"
>420	Callee	positional . add
>421	MemberAccess	positional . add
>422	Identifier	add
>423	Identifier	positional
>424	IdentifierDeclStatement	po 
>425	IdentifierDecl	positional
>426	Identifier	positional
>427	IdentifierDeclType	po 
>428	ExpressionStatement	all . add ( cmdline ) . add ( hidden )
>429	CallExpression	all . add ( cmdline ) . add ( hidden )
>430	ArgumentList	hidden
>431	Argument	hidden
>432	Identifier	hidden
>433	Callee	all . add ( cmdline ) . add
>434	MemberAccess	all . add ( cmdline ) . add
>435	Identifier	add
>436	CallExpression	all . add ( cmdline )
>437	ArgumentList	cmdline
>438	Argument	cmdline
>439	Identifier	cmdline
>440	Callee	all . add
>441	MemberAccess	all . add
>442	Identifier	add
>443	Identifier	all
>444	IdentifierDeclStatement	po 
>445	IdentifierDecl	all
>446	Identifier	all
>447	IdentifierDeclType	po 
>448	ExpressionStatement	desc . add ( cmdline )
>449	CallExpression	desc . add ( cmdline )
>450	ArgumentList	cmdline
>451	Argument	cmdline
>452	Identifier	cmdline
>453	Callee	desc . add
>454	MemberAccess	desc . add
>455	Identifier	add
>456	Identifier	desc
>457	IdentifierDeclStatement	po 
>458	IdentifierDecl	desc ( \"Usage
>459	PrimaryExpression	\"Usage
>460	Identifier	desc
>461	IdentifierDeclType	po 
>462	ExpressionStatement	 
>463	Statement	)
>464	Statement	\"Input file\"
>465	Statement	,
>466	Statement	)
>467	Statement	(
>468	Statement	>
>469	Statement	string
>470	Statement	 
>471	Statement	std
>472	Statement	<
>473	Statement	value
>474	Statement	 
>475	Statement	po
>476	Statement	,
>477	Statement	\"input-filename\"
>478	Statement	(
>479	Statement	)
>480	Statement	(
>481	Statement	add_options
>482	Statement	.
>483	Statement	hidden
>484	IdentifierDeclStatement	po 
>485	IdentifierDecl	hidden ( \"Hidden options\" )
>486	PrimaryExpression	\"Hidden options\"
>487	Identifier	hidden
>488	IdentifierDeclType	po 
>489	ExpressionStatement	 
>490	Statement	)
>491	Statement	\"Time step in days (default
>492	Statement	,
>493	Statement	)
>494	Statement	(
>495	Statement	>
>496	Statement	int
>497	Statement	<
>498	Statement	value
>499	Statement	 
>500	Statement	po
>501	Statement	,
>502	Statement	\"time-step,S\"
>503	Statement	(
>504	Statement	)
>505	Statement	\"End time (yyyy-mm-dd)\"
>506	Statement	,
>507	Statement	)
>508	Statement	(
>509	Statement	>
>510	Statement	string
>511	Statement	 
>512	Statement	std
>513	Statement	<
>514	Statement	value
>515	Statement	 
>516	Statement	po
>517	Statement	,
>518	Statement	\"end-time,e\"
>519	Statement	(
>520	Statement	)
>521	Statement	\"Start time (yyyy-mm-dd)\"
>522	Statement	,
>523	Statement	)
>524	Statement	(
>525	Statement	>
>526	Statement	string
>527	Statement	 
>528	Statement	std
>529	Statement	<
>530	Statement	value
>531	Statement	 
>532	Statement	po
>533	Statement	,
>534	Statement	\"start-time,s\"
>535	Statement	(
>536	Statement	)
>537	Statement	\"EPSG code of Coordinate Reference System\"
>538	Statement	,
>539	Statement	)
>540	Statement	(
>541	Statement	>
>542	Statement	int
>543	Statement	<
>544	Statement	value
>545	Statement	 
>546	Statement	po
>547	Statement	,
>548	Statement	\"crs,c\"
>549	Statement	(
>550	Statement	)
>551	Statement	\"Format of input file\"
>552	Statement	,
>553	Statement	)
>554	Statement	(
>555	Statement	>
>556	Statement	string
>557	Statement	 
>558	Statement	std
>559	Statement	<
>560	Statement	value
>561	Statement	 
>562	Statement	po
>563	Statement	,
>564	Statement	\"input-format,F\"
>565	Statement	(
>566	Statement	)
>567	Statement	\"OGR format of output files\"
>568	Statement	,
>569	Statement	)
>570	Statement	(
>571	Statement	>
>572	Statement	string
>573	Statement	 
>574	Statement	std
>575	Statement	<
>576	Statement	value
>577	Statement	 
>578	Statement	po
>579	Statement	,
>580	Statement	\"output-format,f\"
>581	Statement	(
>582	Statement	)
>583	Statement	\"Output directory\"
>584	Statement	,
>585	Statement	)
>586	Statement	(
>587	Statement	>
>588	Statement	string
>589	Statement	 
>590	Statement	std
>591	Statement	<
>592	Statement	value
>593	Statement	 
>594	Statement	po
>595	Statement	,
>596	Statement	\"output,o\"
>597	Statement	(
>598	Statement	)
>599	Statement	\"Suppress verbose output messages\"
>600	Statement	,
>601	Statement	\"quiet,q\"
>602	Statement	(
>603	Statement	)
>604	Statement	\"Print this help message\"
>605	Statement	,
>606	Statement	\"help,h\"
>607	Statement	(
>608	Statement	)
>609	Statement	(
>610	Statement	add_options
>611	Statement	.
>612	Statement	cmdline
>613	IdentifierDeclStatement	po 
>614	IdentifierDecl	cmdline ( \"Allowed options\" )
>615	PrimaryExpression	\"Allowed options\"
>616	Identifier	cmdline
>617	IdentifierDeclType	po 
>618	IdentifierDeclStatement	 
>619	IdentifierDecl	vm
>620	Identifier	vm
>621	IdentifierDeclType	po 
>622	ExpressionStatement	 
>623	AssignmentExpr	po = boost 
>624	Identifier	boost 
>625	Identifier	po
>626	Statement	 
<3=9,8,4
<4=5
<5=7,6
<9=23,10
<10=11
<11=19,12
<12=13
<13=17,14
<14=15
<15=16
<17=18
<19=20
<20=22,21
<23=24
<24=59,49,27,25
<25=26
<27=40,28
<28=36,29
<29=30
<30=34,31
<31=32
<32=33
<34=35
<36=37
<37=39,38
<40=41
<41=48,42
<42=46,43
<43=44
<44=45
<46=47
<49=50
<50=58,57,51
<51=53,52
<53=54
<54=56,55
<59=60
<60=64,61
<61=62
<62=63
<64=65
<65=67,66
<75=83,76
<76=80,77
<77=79,78
<80=82,81
<83=626,622,618,107,84
<84=106,85
<85=93,86
<86=87
<87=91,88
<88=89
<89=90
<91=92
<93=94
<94=105,95
<95=104,96
<96=98,97
<98=100,99
<100=101
<101=103,102
<107=108
<108=613,612,611,610,609,608,607,606,605,604,603,602,601,600,599,598,597,596,595,594,593,592,591,590,589,588,587,586,585,584,583,582,581,580,579,578,577,576,575,574,573,572,571,570,569,568,567,566,565,564,563,562,561,560,559,558,557,556,555,554,553,552,551,550,549,548,547,546,545,544,543,542,541,540,539,538,537,536,535,534,533,532,531,530,529,528,527,526,525,524,523,522,521,520,519,518,517,516,515,514,513,512,511,510,509,508,507,506,505,504,503,502,501,500,499,498,109,134,164,194,219,246,273,300,327,347,371,378,413,424,428,444,448,457,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,489,490,491,492,493,494,495,496,497
<109=125,110
<110=124,123,122,121,120,119,118,117,116,115,114,113,112,111
<125=126
<126=130,127
<127=128
<128=129
<130=131
<131=133,132
<134=155,135
<135=154,153,152,151,150,149,148,147,146,145,144,143,142,141,140,139,138,137,136
<155=156
<156=160,157
<157=158
<158=159
<160=161
<161=163,162
<164=185,165
<165=184,183,182,181,180,179,178,177,176,175,174,173,172,171,170,169,168,167,166
<185=186
<186=190,187
<187=188
<188=189
<190=191
<191=193,192
<194=210,195
<195=209,208,207,206,205,204,203,202,201,200,199,198,197,196
<210=211
<211=215,212
<212=213
<213=214
<215=216
<216=218,217
<219=237,220
<220=236,235,234,233,232,231,230,229,228,227,226,225,224,223,222,221
<237=238
<238=242,239
<239=240
<240=241
<242=243
<243=245,244
<246=264,247
<247=263,262,261,260,259,258,257,256,255,254,253,252,251,250,249,248
<264=265
<265=269,266
<266=267
<267=268
<269=270
<270=272,271
<273=291,274
<274=290,289,288,287,286,285,284,283,282,281,280,279,278,277,276,275
<291=292
<292=296,293
<293=294
<294=295
<296=297
<297=299,298
<300=318,301
<301=317,316,315,314,313,312,311,310,309,308,307,306,305,304,303,302
<318=319
<319=323,320
<320=321
<321=322
<323=324
<324=326,325
<327=338,328
<328=329
<329=330
<330=334,331
<331=332
<332=333
<334=335
<335=337,336
<338=339
<339=343,340
<340=341
<341=342
<343=344
<344=346,345
<347=362,348
<348=356,349
<349=350
<350=354,351
<351=352
<352=353
<354=355
<356=357
<357=361,358
<358=360,359
<362=363
<363=367,364
<364=365
<365=366
<367=368
<368=370,369
<371=372
<372=376,373
<373=374
<374=375
<376=377
<378=379
<379=411,380
<380=383,381
<381=382
<383=384
<384=386,385
<386=387
<387=389,388
<389=393,390
<390=391
<391=392
<393=394
<394=396,395
<396=400,397
<397=398
<398=399
<400=401
<401=403,402
<403=409,404
<404=407,405
<405=406
<407=408
<409=410
<411=412
<413=414
<414=420,415
<415=418,416
<416=417
<418=419
<420=421
<421=423,422
<424=425
<425=427,426
<428=429
<429=433,430
<430=431
<431=432
<433=434
<434=436,435
<436=440,437
<437=438
<438=439
<440=441
<441=443,442
<444=445
<445=447,446
<448=449
<449=453,450
<450=451
<451=452
<453=454
<454=456,455
<457=458
<458=461,460,459
<484=485
<485=488,487,486
<613=614
<614=617,616,615
<618=619
<619=621,620
<622=623
<623=625,624
