>3	FunctionDef	ReadFileList (char * list_in , std 
>4	ParameterList	char * list_in , std 
>5	Parameter	 
>6	Identifier	key_files
>7	ParameterType	std 
>8	Parameter	 
>9	Identifier	list_in
>10	ParameterType	char *
>11	ReturnType	int
>12	CompoundStatement	 
>13	ReturnStatement	 
>14	PrimaryExpression	0
>15	IfStatement	if ( key_files . size ( ) == 0 )
>16	CompoundStatement	 
>17	ReturnStatement	 
>18	PrimaryExpression	1
>19	ExpressionStatement	 
>20	CallExpression	printf ( \"No input files found in %s.\n\" , list_in )
>21	ArgumentList	\"No input files found in %s.\n\"
>22	Argument	list_in
>23	Identifier	list_in
>24	Argument	\"No input files found in %s.\n\"
>25	PrimaryExpression	\"No input files found in %s.\n\"
>26	Callee	printf
>27	Identifier	printf
>28	Condition	 
>29	EqualityExpression	key_files . size ( ) == 0
>30	PrimaryExpression	0
>31	CallExpression	key_files . size ( )
>32	ArgumentList	 
>33	Callee	key_files . size
>34	MemberAccess	key_files . size
>35	Identifier	size
>36	Identifier	key_files
>37	WhileStatement	while ( fgets ( buf , 512 , fp ) )
>38	CompoundStatement	 
>39	ExpressionStatement	 
>40	CallExpression	key_files . push_back ( std 
>41	ArgumentList	std 
>42	Argument	std 
>43	CallExpression	std 
>44	ArgumentList	buf
>45	Argument	buf
>46	Identifier	buf
>47	Callee	std 
>48	Identifier	std 
>49	Callee	key_files . push_back
>50	MemberAccess	key_files . push_back
>51	Identifier	push_back
>52	Identifier	key_files
>53	IfStatement	if ( strlen ( start ) == 0 )
>54	ContinueStatement	 
>55	Condition	 
>56	EqualityExpression	strlen ( start ) == 0
>57	PrimaryExpression	0
>58	CallExpression	strlen ( start )
>59	ArgumentList	start
>60	Argument	start
>61	Identifier	start
>62	Callee	strlen
>63	Identifier	strlen
>64	WhileStatement	while ( isspace ( * start ) )
>65	ExpressionStatement	 
>66	IncDecOp	start ++
>67	IncDec	++
>68	Identifier	start
>69	Condition	 
>70	CallExpression	isspace ( * start )
>71	ArgumentList	* start
>72	Argument	* start
>73	UnaryOp	* start
>74	Identifier	start
>75	UnaryOperator	*
>76	Callee	isspace
>77	Identifier	isspace
>78	ExpressionStatement	 
>79	AssignmentExpr	start = buf
>80	Identifier	buf
>81	Identifier	start
>82	IfStatement	if ( buf [ strlen ( buf ) - 1 ] == '\n' )
>83	ExpressionStatement	 
>84	AssignmentExpr	buf [ strlen ( buf ) - 1 ] = '\0'
>85	PrimaryExpression	'\0'
>86	ArrayIndexing	buf [ strlen ( buf ) - 1 ]
>87	AdditiveExpression	strlen ( buf ) - 1
>88	PrimaryExpression	1
>89	CallExpression	strlen ( buf )
>90	ArgumentList	buf
>91	Argument	buf
>92	Identifier	buf
>93	Callee	strlen
>94	Identifier	strlen
>95	Identifier	buf
>96	Condition	 
>97	EqualityExpression	buf [ strlen ( buf ) - 1 ] == '\n'
>98	PrimaryExpression	'\n'
>99	ArrayIndexing	buf [ strlen ( buf ) - 1 ]
>100	AdditiveExpression	strlen ( buf ) - 1
>101	PrimaryExpression	1
>102	CallExpression	strlen ( buf )
>103	ArgumentList	buf
>104	Argument	buf
>105	Identifier	buf
>106	Callee	strlen
>107	Identifier	strlen
>108	Identifier	buf
>109	Condition	 
>110	CallExpression	fgets ( buf , 512 , fp )
>111	ArgumentList	buf
>112	Argument	fp
>113	Identifier	fp
>114	Argument	512
>115	PrimaryExpression	512
>116	Argument	buf
>117	Identifier	buf
>118	Callee	fgets
>119	Identifier	fgets
>120	IdentifierDeclStatement	 
>121	IdentifierDecl	* start
>122	Identifier	start
>123	IdentifierDeclType	char *
>124	IdentifierDecl	buf [ 512 ]
>125	PrimaryExpression	512
>126	Identifier	buf
>127	IdentifierDeclType	char [ 512 ]
>128	IfStatement	if ( ( fp = fopen ( list_in , \"r\" ) ) == NULL )
>129	CompoundStatement	 
>130	ReturnStatement	 
>131	PrimaryExpression	1
>132	ExpressionStatement	 
>133	CallExpression	printf ( \"Error opening file %s for reading.\n\" , list_in )
>134	ArgumentList	\"Error opening file %s for reading.\n\"
>135	Argument	list_in
>136	Identifier	list_in
>137	Argument	\"Error opening file %s for reading.\n\"
>138	PrimaryExpression	\"Error opening file %s for reading.\n\"
>139	Callee	printf
>140	Identifier	printf
>141	Condition	 
>142	EqualityExpression	( fp = fopen ( list_in , \"r\" ) ) == NULL
>143	Identifier	NULL
>144	AssignmentExpr	fp = fopen ( list_in , \"r\" )
>145	CallExpression	fopen ( list_in , \"r\" )
>146	ArgumentList	list_in
>147	Argument	\"r\"
>148	PrimaryExpression	\"r\"
>149	Argument	list_in
>150	Identifier	list_in
>151	Callee	fopen
>152	Identifier	fopen
>153	Identifier	fp
>154	IdentifierDeclStatement	 
>155	IdentifierDecl	* fp
>156	Identifier	fp
>157	IdentifierDeclType	FILE *
>176	FunctionDef	main (int argc , char * * argv)
>177	ParameterList	int argc , char * * argv
>178	Parameter	 
>179	Identifier	argv
>180	ParameterType	char * *
>181	Parameter	 
>182	Identifier	argc
>183	ParameterType	int
>184	ReturnType	int
>185	CompoundStatement	 
>186	ReturnStatement	 
>187	Identifier	EXIT_SUCCESS
>188	ExpressionStatement	 
>189	CallExpression	fclose ( f )
>190	ArgumentList	f
>191	Argument	f
>192	Identifier	f
>193	Callee	fclose
>194	Identifier	fclose
>195	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>196	CompoundStatement	 
>197	ExpressionStatement	 
>198	ArrayIndexing	keys [ i ]
>199	Identifier	i
>200	Identifier	keys
>201	Statement	 
>202	Statement	 
>203	IfStatement	if ( keys [ i ] != NULL )
>204	Statement	 
>205	Condition	 
>206	EqualityExpression	keys [ i ] != NULL
>207	Identifier	NULL
>208	ArrayIndexing	keys [ i ]
>209	Identifier	i
>210	Identifier	keys
>211	IncDecOp	 
>212	IncDec	++
>213	Identifier	i
>214	Condition	 
>215	RelationalExpression	i < num_images
>216	Identifier	num_images
>217	Identifier	i
>218	ForInit	 
>219	IdentifierDeclStatement	int i = 0 ;
>220	IdentifierDecl	i = 0
>221	AssignmentExpr	i = 0
>222	PrimaryExpression	0
>223	Identifier	i
>224	Identifier	i
>225	IdentifierDeclType	int
>226	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>227	CompoundStatement	 
>228	ExpressionStatement	 
>229	Identifier	tree
>230	Statement	 
>231	ExpressionStatement	 
>232	CallExpression	fflush ( stdout )
>233	ArgumentList	stdout
>234	Argument	stdout
>235	Identifier	stdout
>236	Callee	fflush
>237	Identifier	fflush
>238	ExpressionStatement	 
>239	CallExpression	printf ( \"[KeyMatchFull] Matching took %0.3fs\n\" , ( end - start ) / ( ( double ) CLOCKS_PER_SEC ) )
>240	ArgumentList	\"[KeyMatchFull] Matching took %0.3fs\n\"
>241	Argument	( end - start ) / ( ( double ) CLOCKS_PER_SEC )
>242	MultiplicativeExpression	( end - start ) / ( ( double ) CLOCKS_PER_SEC )
>243	CastExpression	( double ) CLOCKS_PER_SEC
>244	Identifier	CLOCKS_PER_SEC
>245	CastTarget	double
>246	AdditiveExpression	end - start
>247	Identifier	start
>248	Identifier	end
>249	Argument	\"[KeyMatchFull] Matching took %0.3fs\n\"
>250	PrimaryExpression	\"[KeyMatchFull] Matching took %0.3fs\n\"
>251	Callee	printf
>252	Identifier	printf
>253	ExpressionStatement	 
>254	AssignmentExpr	end = clock ( )
>255	CallExpression	clock ( )
>256	ArgumentList	 
>257	Callee	clock
>258	Identifier	clock
>259	Identifier	end
>260	ForStatement	for ( int j = start_idx ; j < i ; j ++ )
>261	CompoundStatement	 
>262	IfStatement	if ( num_matches >= 16 )
>263	CompoundStatement	 
>264	ForStatement	for ( int i = 0 ; i < num_matches ; i ++ )
>265	CompoundStatement	 
>266	ExpressionStatement	 
>267	CallExpression	fprintf ( f , \"%d %d\n\" , matches [ i ] . m_idx1 , matches [ i ] . m_idx2 )
>268	ArgumentList	f
>269	Argument	matches [ i ] . m_idx2
>270	MemberAccess	matches [ i ] . m_idx2
>271	Identifier	m_idx2
>272	ArrayIndexing	matches [ i ]
>273	Identifier	i
>274	Identifier	matches
>275	Argument	matches [ i ] . m_idx1
>276	MemberAccess	matches [ i ] . m_idx1
>277	Identifier	m_idx1
>278	ArrayIndexing	matches [ i ]
>279	Identifier	i
>280	Identifier	matches
>281	Argument	\"%d %d\n\"
>282	PrimaryExpression	\"%d %d\n\"
>283	Argument	f
>284	Identifier	f
>285	Callee	fprintf
>286	Identifier	fprintf
>287	IncDecOp	 
>288	IncDec	++
>289	Identifier	i
>290	Condition	 
>291	RelationalExpression	i < num_matches
>292	Identifier	num_matches
>293	Identifier	i
>294	ForInit	 
>295	IdentifierDeclStatement	int i = 0 ;
>296	IdentifierDecl	i = 0
>297	AssignmentExpr	i = 0
>298	PrimaryExpression	0
>299	Identifier	i
>300	Identifier	i
>301	IdentifierDeclType	int
>302	ExpressionStatement	 
>303	CallExpression	fprintf ( f , \"%d\n\" , ( int ) matches . size ( ) )
>304	ArgumentList	f
>305	Argument	( int ) matches . size ( )
>306	CastExpression	( int ) matches . size ( )
>307	CallExpression	matches . size ( )
>308	ArgumentList	 
>309	Callee	matches . size
>310	MemberAccess	matches . size
>311	Identifier	size
>312	Identifier	matches
>313	CastTarget	int
>314	Argument	\"%d\n\"
>315	PrimaryExpression	\"%d\n\"
>316	Argument	f
>317	Identifier	f
>318	Callee	fprintf
>319	Identifier	fprintf
>320	ExpressionStatement	 
>321	CallExpression	fprintf ( f , \"%d %d\n\" , j , i )
>322	ArgumentList	f
>323	Argument	i
>324	Identifier	i
>325	Argument	j
>326	Identifier	j
>327	Argument	\"%d %d\n\"
>328	PrimaryExpression	\"%d %d\n\"
>329	Argument	f
>330	Identifier	f
>331	Callee	fprintf
>332	Identifier	fprintf
>333	Condition	 
>334	RelationalExpression	num_matches >= 16
>335	PrimaryExpression	16
>336	Identifier	num_matches
>337	IdentifierDeclStatement	 
>338	IdentifierDecl	num_matches = ( int ) matches . size ( )
>339	AssignmentExpr	num_matches = ( int ) matches . size ( )
>340	CastExpression	( int ) matches . size ( )
>341	CallExpression	matches . size ( )
>342	ArgumentList	 
>343	Callee	matches . size
>344	MemberAccess	matches . size
>345	Identifier	size
>346	Identifier	matches
>347	CastTarget	int
>348	Identifier	num_matches
>349	Identifier	num_matches
>350	IdentifierDeclType	int
>351	IdentifierDeclStatement	 
>352	IdentifierDecl	matches = MatchKeys ( num_keys [ j ] , keys [ j ] , tree , ratio )
>353	AssignmentExpr	matches = MatchKeys ( num_keys [ j ] , keys [ j ] , tree , ratio )
>354	CallExpression	MatchKeys ( num_keys [ j ] , keys [ j ] , tree , ratio )
>355	ArgumentList	num_keys [ j ]
>356	Argument	ratio
>357	Identifier	ratio
>358	Argument	tree
>359	Identifier	tree
>360	Argument	keys [ j ]
>361	ArrayIndexing	keys [ j ]
>362	Identifier	j
>363	Identifier	keys
>364	Argument	num_keys [ j ]
>365	ArrayIndexing	num_keys [ j ]
>366	Identifier	j
>367	Identifier	num_keys
>368	Callee	MatchKeys
>369	Identifier	MatchKeys
>370	Identifier	matches
>371	Identifier	matches
>372	IdentifierDeclType	std 
>373	IfStatement	if ( num_keys [ j ] == 0 )
>374	ContinueStatement	 
>375	Condition	 
>376	EqualityExpression	num_keys [ j ] == 0
>377	PrimaryExpression	0
>378	ArrayIndexing	num_keys [ j ]
>379	Identifier	j
>380	Identifier	num_keys
>381	IncDecOp	 
>382	IncDec	++
>383	Identifier	j
>384	Condition	 
>385	RelationalExpression	j < i
>386	Identifier	i
>387	Identifier	j
>388	ForInit	 
>389	IdentifierDeclStatement	int j = start_idx ;
>390	IdentifierDecl	j = start_idx
>391	AssignmentExpr	j = start_idx
>392	Identifier	start_idx
>393	Identifier	start_idx
>394	Identifier	j
>395	IdentifierDeclType	int
>396	IfStatement	if ( window_radius > 0 )
>397	ExpressionStatement	 
>398	AssignmentExpr	start_idx = std 
>399	CallExpression	std 
>400	ArgumentList	i - window_radius
>401	Argument	0
>402	PrimaryExpression	0
>403	Argument	i - window_radius
>404	AdditiveExpression	i - window_radius
>405	Identifier	window_radius
>406	Identifier	i
>407	Callee	std 
>408	Identifier	std 
>409	Identifier	start_idx
>410	Condition	 
>411	RelationalExpression	window_radius > 0
>412	PrimaryExpression	0
>413	Identifier	window_radius
>414	IdentifierDeclStatement	 
>415	IdentifierDecl	start_idx = 0
>416	AssignmentExpr	start_idx = 0
>417	PrimaryExpression	0
>418	Identifier	start_idx
>419	Identifier	start_idx
>420	IdentifierDeclType	int
>421	IdentifierDeclStatement	 
>422	IdentifierDecl	* tree = CreateSearchTree ( num_keys [ i ] , keys [ i ] )
>423	AssignmentExpr	* tree = CreateSearchTree ( num_keys [ i ] , keys [ i ] )
>424	CallExpression	CreateSearchTree ( num_keys [ i ] , keys [ i ] )
>425	ArgumentList	num_keys [ i ]
>426	Argument	keys [ i ]
>427	ArrayIndexing	keys [ i ]
>428	Identifier	i
>429	Identifier	keys
>430	Argument	num_keys [ i ]
>431	ArrayIndexing	num_keys [ i ]
>432	Identifier	i
>433	Identifier	num_keys
>434	Callee	CreateSearchTree
>435	Identifier	CreateSearchTree
>436	Identifier	tree
>437	Identifier	tree
>438	IdentifierDeclType	ANNkd_tree *
>439	ExpressionStatement	 
>440	AssignmentExpr	start = clock ( )
>441	CallExpression	clock ( )
>442	ArgumentList	 
>443	Callee	clock
>444	Identifier	clock
>445	Identifier	start
>446	ExpressionStatement	 
>447	CallExpression	printf ( \"[KeyMatchFull] Matching to image %d\n\" , i )
>448	ArgumentList	\"[KeyMatchFull] Matching to image %d\n\"
>449	Argument	i
>450	Identifier	i
>451	Argument	\"[KeyMatchFull] Matching to image %d\n\"
>452	PrimaryExpression	\"[KeyMatchFull] Matching to image %d\n\"
>453	Callee	printf
>454	Identifier	printf
>455	IfStatement	if ( num_keys [ i ] == 0 )
>456	ContinueStatement	 
>457	Condition	 
>458	EqualityExpression	num_keys [ i ] == 0
>459	PrimaryExpression	0
>460	ArrayIndexing	num_keys [ i ]
>461	Identifier	i
>462	Identifier	num_keys
>463	IncDecOp	 
>464	IncDec	++
>465	Identifier	i
>466	Condition	 
>467	RelationalExpression	i < num_images
>468	Identifier	num_images
>469	Identifier	i
>470	ForInit	 
>471	IdentifierDeclStatement	int i = 0 ;
>472	IdentifierDecl	i = 0
>473	AssignmentExpr	i = 0
>474	PrimaryExpression	0
>475	Identifier	i
>476	Identifier	i
>477	IdentifierDeclType	int
>478	ExpressionStatement	 
>479	CallExpression	printf ( \"[KeyMatchFull] Reading keys took %0.3fs\n\" , ( end - start ) / ( ( double ) CLOCKS_PER_SEC ) )
>480	ArgumentList	\"[KeyMatchFull] Reading keys took %0.3fs\n\"
>481	Argument	( end - start ) / ( ( double ) CLOCKS_PER_SEC )
>482	MultiplicativeExpression	( end - start ) / ( ( double ) CLOCKS_PER_SEC )
>483	CastExpression	( double ) CLOCKS_PER_SEC
>484	Identifier	CLOCKS_PER_SEC
>485	CastTarget	double
>486	AdditiveExpression	end - start
>487	Identifier	start
>488	Identifier	end
>489	Argument	\"[KeyMatchFull] Reading keys took %0.3fs\n\"
>490	PrimaryExpression	\"[KeyMatchFull] Reading keys took %0.3fs\n\"
>491	Callee	printf
>492	Identifier	printf
>493	IdentifierDeclStatement	 
>494	IdentifierDecl	end = clock ( )
>495	AssignmentExpr	end = clock ( )
>496	CallExpression	clock ( )
>497	ArgumentList	 
>498	Callee	clock
>499	Identifier	clock
>500	Identifier	end
>501	Identifier	end
>502	IdentifierDeclType	clock_t
>503	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>504	CompoundStatement	 
>505	ExpressionStatement	 
>506	AssignmentExpr	num_keys [ i ] = ReadKeyFile ( key_files [ i ] . c_str ( ) , & keys [ i ] )
>507	CallExpression	ReadKeyFile ( key_files [ i ] . c_str ( ) , & keys [ i ] )
>508	ArgumentList	key_files [ i ] . c_str ( )
>509	Argument	& keys [ i ]
>510	UnaryOp	& keys [ i ]
>511	ArrayIndexing	keys [ i ]
>512	Identifier	i
>513	Identifier	keys
>514	UnaryOperator	&
>515	Argument	key_files [ i ] . c_str ( )
>516	CallExpression	key_files [ i ] . c_str ( )
>517	ArgumentList	 
>518	Callee	key_files [ i ] . c_str
>519	MemberAccess	key_files [ i ] . c_str
>520	Identifier	c_str
>521	ArrayIndexing	key_files [ i ]
>522	Identifier	i
>523	Identifier	key_files
>524	Callee	ReadKeyFile
>525	Identifier	ReadKeyFile
>526	ArrayIndexing	num_keys [ i ]
>527	Identifier	i
>528	Identifier	num_keys
>529	ExpressionStatement	 
>530	AssignmentExpr	keys [ i ] = NULL
>531	Identifier	NULL
>532	ArrayIndexing	keys [ i ]
>533	Identifier	i
>534	Identifier	keys
>535	IncDecOp	 
>536	IncDec	++
>537	Identifier	i
>538	Condition	 
>539	RelationalExpression	i < num_images
>540	Identifier	num_images
>541	Identifier	i
>542	ForInit	 
>543	IdentifierDeclStatement	int i = 0 ;
>544	IdentifierDecl	i = 0
>545	AssignmentExpr	i = 0
>546	PrimaryExpression	0
>547	Identifier	i
>548	Identifier	i
>549	IdentifierDeclType	int
>550	IdentifierDeclStatement	 
>551	IdentifierDecl	num_keys ( num_images )
>552	Identifier	num_images
>553	Identifier	num_keys
>554	IdentifierDeclType	std 
>555	IdentifierDeclStatement	 
>556	IdentifierDecl	keys ( num_images )
>557	Identifier	num_images
>558	Identifier	keys
>559	IdentifierDeclType	std 
>560	IdentifierDeclStatement	 
>561	IdentifierDecl	num_images = ( int ) key_files . size ( )
>562	AssignmentExpr	num_images = ( int ) key_files . size ( )
>563	CastExpression	( int ) key_files . size ( )
>564	CallExpression	key_files . size ( )
>565	ArgumentList	 
>566	Callee	key_files . size
>567	MemberAccess	key_files . size
>568	Identifier	size
>569	Identifier	key_files
>570	CastTarget	int
>571	Identifier	num_images
>572	Identifier	num_images
>573	IdentifierDeclType	int
>574	IfStatement	if ( ( f = fopen ( file_out , \"w\" ) ) == NULL )
>575	CompoundStatement	 
>576	ReturnStatement	 
>577	Identifier	EXIT_FAILURE
>578	ExpressionStatement	 
>579	CallExpression	printf ( \"Could not open %s for writing.\n\" , file_out )
>580	ArgumentList	\"Could not open %s for writing.\n\"
>581	Argument	file_out
>582	Identifier	file_out
>583	Argument	\"Could not open %s for writing.\n\"
>584	PrimaryExpression	\"Could not open %s for writing.\n\"
>585	Callee	printf
>586	Identifier	printf
>587	Condition	 
>588	EqualityExpression	( f = fopen ( file_out , \"w\" ) ) == NULL
>589	Identifier	NULL
>590	AssignmentExpr	f = fopen ( file_out , \"w\" )
>591	CallExpression	fopen ( file_out , \"w\" )
>592	ArgumentList	file_out
>593	Argument	\"w\"
>594	PrimaryExpression	\"w\"
>595	Argument	file_out
>596	Identifier	file_out
>597	Callee	fopen
>598	Identifier	fopen
>599	Identifier	f
>600	IdentifierDeclStatement	 
>601	IdentifierDecl	* f
>602	Identifier	f
>603	IdentifierDeclType	FILE *
>604	IfStatement	if ( ReadFileList ( list_in , key_files ) != 0 )
>605	ReturnStatement	 
>606	Identifier	EXIT_FAILURE
>607	Condition	 
>608	EqualityExpression	ReadFileList ( list_in , key_files ) != 0
>609	PrimaryExpression	0
>610	CallExpression	ReadFileList ( list_in , key_files )
>611	ArgumentList	list_in
>612	Argument	key_files
>613	Identifier	key_files
>614	Argument	list_in
>615	Identifier	list_in
>616	Callee	ReadFileList
>617	Identifier	ReadFileList
>618	IdentifierDeclStatement	 
>619	IdentifierDecl	key_files
>620	Identifier	key_files
>621	IdentifierDeclType	std 
>622	IdentifierDeclStatement	 
>623	IdentifierDecl	start = clock ( )
>624	AssignmentExpr	start = clock ( )
>625	CallExpression	clock ( )
>626	ArgumentList	 
>627	Callee	clock
>628	Identifier	clock
>629	Identifier	start
>630	Identifier	start
>631	IdentifierDeclType	clock_t
>632	IfStatement	if ( argc == 4 )
>633	CompoundStatement	 
>634	ExpressionStatement	 
>635	AssignmentExpr	window_radius = atoi ( argv [ 3 ] )
>636	CallExpression	atoi ( argv [ 3 ] )
>637	ArgumentList	argv [ 3 ]
>638	Argument	argv [ 3 ]
>639	ArrayIndexing	argv [ 3 ]
>640	PrimaryExpression	3
>641	Identifier	argv
>642	Callee	atoi
>643	Identifier	atoi
>644	Identifier	window_radius
>645	Condition	 
>646	EqualityExpression	argc == 4
>647	PrimaryExpression	4
>648	Identifier	argc
>649	IdentifierDeclStatement	 
>650	IdentifierDecl	window_radius = - 1
>651	AssignmentExpr	window_radius = - 1
>652	UnaryOp	- 1
>653	PrimaryExpression	1
>654	UnaryOperator	-
>655	Identifier	window_radius
>656	Identifier	window_radius
>657	IdentifierDeclType	int
>658	ExpressionStatement	 
>659	AssignmentExpr	file_out = argv [ 2 ]
>660	ArrayIndexing	argv [ 2 ]
>661	PrimaryExpression	2
>662	Identifier	argv
>663	Identifier	file_out
>664	ExpressionStatement	 
>665	AssignmentExpr	ratio = 0.6
>666	PrimaryExpression	0.6
>667	Identifier	ratio
>668	ExpressionStatement	 
>669	AssignmentExpr	list_in = argv [ 1 ]
>670	ArrayIndexing	argv [ 1 ]
>671	PrimaryExpression	1
>672	Identifier	argv
>673	Identifier	list_in
>674	IfStatement	if ( argc != 3 && argc != 4 )
>675	CompoundStatement	 
>676	ReturnStatement	 
>677	Identifier	EXIT_FAILURE
>678	ExpressionStatement	 
>679	CallExpression	printf ( \"Usage
>680	ArgumentList	\"Usage
>681	Argument	argv [ 0 ]
>682	ArrayIndexing	argv [ 0 ]
>683	PrimaryExpression	0
>684	Identifier	argv
>685	Argument	\"Usage
>686	PrimaryExpression	\"Usage
>687	Callee	printf
>688	Identifier	printf
>689	Condition	 
>690	AndExpression	argc != 3 && argc != 4
>691	EqualityExpression	argc != 4
>692	PrimaryExpression	4
>693	Identifier	argc
>694	EqualityExpression	argc != 3
>695	PrimaryExpression	3
>696	Identifier	argc
>697	IdentifierDeclStatement	 
>698	IdentifierDecl	ratio
>699	Identifier	ratio
>700	IdentifierDeclType	double
>701	IdentifierDeclStatement	 
>702	IdentifierDecl	* file_out
>703	Identifier	file_out
>704	IdentifierDeclType	char *
>705	IdentifierDeclStatement	 
>706	IdentifierDecl	* list_in
>707	Identifier	list_in
>708	IdentifierDeclType	char *
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=154,128,120,37,15,13
<13=14
<15=28,16
<16=19,17
<17=18
<19=20
<20=26,21
<21=24,22
<22=23
<24=25
<26=27
<28=29
<29=31,30
<31=33,32
<33=34
<34=36,35
<37=109,38
<38=82,78,64,53,39
<39=40
<40=49,41
<41=42
<42=43
<43=47,44
<44=45
<45=46
<47=48
<49=50
<50=52,51
<53=55,54
<55=56
<56=58,57
<58=62,59
<59=60
<60=61
<62=63
<64=69,65
<65=66
<66=68,67
<69=70
<70=76,71
<71=72
<72=73
<73=75,74
<76=77
<78=79
<79=81,80
<82=96,83
<83=84
<84=86,85
<86=95,87
<87=89,88
<89=93,90
<90=91
<91=92
<93=94
<96=97
<97=99,98
<99=108,100
<100=102,101
<102=106,103
<103=104
<104=105
<106=107
<109=110
<110=118,111
<111=116,114,112
<112=113
<114=115
<116=117
<118=119
<120=124,121
<121=123,122
<124=127,126,125
<128=141,129
<129=132,130
<130=131
<132=133
<133=139,134
<134=137,135
<135=136
<137=138
<139=140
<141=142
<142=144,143
<144=153,145
<145=151,146
<146=149,147
<147=148
<149=150
<151=152
<154=155
<155=157,156
<176=185,184,177
<177=181,178
<178=180,179
<181=183,182
<185=705,701,697,674,668,664,658,649,632,622,618,604,600,574,560,555,550,503,493,478,226,195,188,186
<186=187
<188=189
<189=193,190
<190=191
<191=192
<193=194
<195=218,214,211,196
<196=203,202,201,197
<197=198
<198=200,199
<203=205,204
<205=206
<206=208,207
<208=210,209
<211=213,212
<214=215
<215=217,216
<218=219
<219=220
<220=225,224,221
<221=223,222
<226=470,466,463,227
<227=455,446,439,421,414,396,260,253,238,231,230,228
<228=229
<231=232
<232=236,233
<233=234
<234=235
<236=237
<238=239
<239=251,240
<240=249,241
<241=242
<242=246,243
<243=245,244
<246=248,247
<249=250
<251=252
<253=254
<254=259,255
<255=257,256
<257=258
<260=388,384,381,261
<261=373,351,337,262
<262=333,263
<263=320,302,264
<264=294,290,287,265
<265=266
<266=267
<267=285,268
<268=283,281,275,269
<269=270
<270=272,271
<272=274,273
<275=276
<276=278,277
<278=280,279
<281=282
<283=284
<285=286
<287=289,288
<290=291
<291=293,292
<294=295
<295=296
<296=301,300,297
<297=299,298
<302=303
<303=318,304
<304=316,314,305
<305=306
<306=313,307
<307=309,308
<309=310
<310=312,311
<314=315
<316=317
<318=319
<320=321
<321=331,322
<322=329,327,325,323
<323=324
<325=326
<327=328
<329=330
<331=332
<333=334
<334=336,335
<337=338
<338=350,349,339
<339=348,340
<340=347,341
<341=343,342
<343=344
<344=346,345
<351=352
<352=372,371,353
<353=370,354
<354=368,355
<355=364,360,358,356
<356=357
<358=359
<360=361
<361=363,362
<364=365
<365=367,366
<368=369
<373=375,374
<375=376
<376=378,377
<378=380,379
<381=383,382
<384=385
<385=387,386
<388=389
<389=390
<390=395,394,391
<391=393,392
<396=410,397
<397=398
<398=409,399
<399=407,400
<400=403,401
<401=402
<403=404
<404=406,405
<407=408
<410=411
<411=413,412
<414=415
<415=420,419,416
<416=418,417
<421=422
<422=438,437,423
<423=436,424
<424=434,425
<425=430,426
<426=427
<427=429,428
<430=431
<431=433,432
<434=435
<439=440
<440=445,441
<441=443,442
<443=444
<446=447
<447=453,448
<448=451,449
<449=450
<451=452
<453=454
<455=457,456
<457=458
<458=460,459
<460=462,461
<463=465,464
<466=467
<467=469,468
<470=471
<471=472
<472=477,476,473
<473=475,474
<478=479
<479=491,480
<480=489,481
<481=482
<482=486,483
<483=485,484
<486=488,487
<489=490
<491=492
<493=494
<494=502,501,495
<495=500,496
<496=498,497
<498=499
<503=542,538,535,504
<504=529,505
<505=506
<506=526,507
<507=524,508
<508=515,509
<509=510
<510=514,511
<511=513,512
<515=516
<516=518,517
<518=519
<519=521,520
<521=523,522
<524=525
<526=528,527
<529=530
<530=532,531
<532=534,533
<535=537,536
<538=539
<539=541,540
<542=543
<543=544
<544=549,548,545
<545=547,546
<550=551
<551=554,553,552
<555=556
<556=559,558,557
<560=561
<561=573,572,562
<562=571,563
<563=570,564
<564=566,565
<566=567
<567=569,568
<574=587,575
<575=578,576
<576=577
<578=579
<579=585,580
<580=583,581
<581=582
<583=584
<585=586
<587=588
<588=590,589
<590=599,591
<591=597,592
<592=595,593
<593=594
<595=596
<597=598
<600=601
<601=603,602
<604=607,605
<605=606
<607=608
<608=610,609
<610=616,611
<611=614,612
<612=613
<614=615
<616=617
<618=619
<619=621,620
<622=623
<623=631,630,624
<624=629,625
<625=627,626
<627=628
<632=645,633
<633=634
<634=635
<635=644,636
<636=642,637
<637=638
<638=639
<639=641,640
<642=643
<645=646
<646=648,647
<649=650
<650=657,656,651
<651=655,652
<652=654,653
<658=659
<659=663,660
<660=662,661
<664=665
<665=667,666
<668=669
<669=673,670
<670=672,671
<674=689,675
<675=678,676
<676=677
<678=679
<679=687,680
<680=685,681
<681=682
<682=684,683
<685=686
<687=688
<689=690
<690=694,691
<691=693,692
<694=696,695
<697=698
<698=700,699
<701=702
<702=704,703
<705=706
<706=708,707
