>8	FunctionDef	DynamicPythonLibrary ()
>9	ParameterList	 
>10	CompoundStatement	 
>11	ExpressionStatement	 
>12	CallExpression	( * initPython_ ) ( )
>13	ArgumentList	 
>14	Callee	* initPython_
>15	UnaryOp	* initPython_
>16	Identifier	initPython_
>17	UnaryOperator	*
>18	ExpressionStatement	 
>19	ShiftExpression	NTA_CHECK ( destroySpec_ ) << \"Unable to find NTA_destroySpec symbol in \" << filename
>20	ShiftExpression	\"Unable to find NTA_destroySpec symbol in \" << filename
>21	Identifier	filename
>22	PrimaryExpression	\"Unable to find NTA_destroySpec symbol in \"
>23	CallExpression	NTA_CHECK ( destroySpec_ )
>24	ArgumentList	destroySpec_
>25	Argument	destroySpec_
>26	Identifier	destroySpec_
>27	Callee	NTA_CHECK
>28	Identifier	NTA_CHECK
>29	ExpressionStatement	 
>30	AssignmentExpr	destroySpec_ = ( destroySpecFunc ) pynodeLibrary_ -> getSymbol ( \"NTA_destroySpec\" )
>31	CastExpression	( destroySpecFunc ) pynodeLibrary_ -> getSymbol ( \"NTA_destroySpec\" )
>32	CallExpression	pynodeLibrary_ -> getSymbol ( \"NTA_destroySpec\" )
>33	ArgumentList	\"NTA_destroySpec\"
>34	Argument	\"NTA_destroySpec\"
>35	PrimaryExpression	\"NTA_destroySpec\"
>36	Callee	pynodeLibrary_ -> getSymbol
>37	PtrMemberAccess	pynodeLibrary_ -> getSymbol
>38	Identifier	getSymbol
>39	Identifier	pynodeLibrary_
>40	CastTarget	destroySpecFunc
>41	Identifier	destroySpec_
>42	ExpressionStatement	 
>43	ShiftExpression	NTA_CHECK ( createSpec_ ) << \"Unable to find NTA_createSpec symbol in \" << filename
>44	ShiftExpression	\"Unable to find NTA_createSpec symbol in \" << filename
>45	Identifier	filename
>46	PrimaryExpression	\"Unable to find NTA_createSpec symbol in \"
>47	CallExpression	NTA_CHECK ( createSpec_ )
>48	ArgumentList	createSpec_
>49	Argument	createSpec_
>50	Identifier	createSpec_
>51	Callee	NTA_CHECK
>52	Identifier	NTA_CHECK
>53	ExpressionStatement	 
>54	AssignmentExpr	createSpec_ = ( createSpecFunc ) pynodeLibrary_ -> getSymbol ( \"NTA_createSpec\" )
>55	CastExpression	( createSpecFunc ) pynodeLibrary_ -> getSymbol ( \"NTA_createSpec\" )
>56	CallExpression	pynodeLibrary_ -> getSymbol ( \"NTA_createSpec\" )
>57	ArgumentList	\"NTA_createSpec\"
>58	Argument	\"NTA_createSpec\"
>59	PrimaryExpression	\"NTA_createSpec\"
>60	Callee	pynodeLibrary_ -> getSymbol
>61	PtrMemberAccess	pynodeLibrary_ -> getSymbol
>62	Identifier	getSymbol
>63	Identifier	pynodeLibrary_
>64	CastTarget	createSpecFunc
>65	Identifier	createSpec_
>66	ExpressionStatement	 
>67	ShiftExpression	NTA_CHECK ( createPyNode_ ) << \"Unable to find NTA_createPyNode symbol in \" << filename
>68	ShiftExpression	\"Unable to find NTA_createPyNode symbol in \" << filename
>69	Identifier	filename
>70	PrimaryExpression	\"Unable to find NTA_createPyNode symbol in \"
>71	CallExpression	NTA_CHECK ( createPyNode_ )
>72	ArgumentList	createPyNode_
>73	Argument	createPyNode_
>74	Identifier	createPyNode_
>75	Callee	NTA_CHECK
>76	Identifier	NTA_CHECK
>77	ExpressionStatement	 
>78	AssignmentExpr	deserializePyNode_ = ( deserializePyNodeFunc ) pynodeLibrary_ -> getSymbol ( \"NTA_deserializePyNode\" )
>79	CastExpression	( deserializePyNodeFunc ) pynodeLibrary_ -> getSymbol ( \"NTA_deserializePyNode\" )
>80	CallExpression	pynodeLibrary_ -> getSymbol ( \"NTA_deserializePyNode\" )
>81	ArgumentList	\"NTA_deserializePyNode\"
>82	Argument	\"NTA_deserializePyNode\"
>83	PrimaryExpression	\"NTA_deserializePyNode\"
>84	Callee	pynodeLibrary_ -> getSymbol
>85	PtrMemberAccess	pynodeLibrary_ -> getSymbol
>86	Identifier	getSymbol
>87	Identifier	pynodeLibrary_
>88	CastTarget	deserializePyNodeFunc
>89	Identifier	deserializePyNode_
>90	ExpressionStatement	 
>91	ShiftExpression	NTA_CHECK ( createPyNode_ ) << \"Unable to find NTA_createPyNode symbol in \" << filename
>92	ShiftExpression	\"Unable to find NTA_createPyNode symbol in \" << filename
>93	Identifier	filename
>94	PrimaryExpression	\"Unable to find NTA_createPyNode symbol in \"
>95	CallExpression	NTA_CHECK ( createPyNode_ )
>96	ArgumentList	createPyNode_
>97	Argument	createPyNode_
>98	Identifier	createPyNode_
>99	Callee	NTA_CHECK
>100	Identifier	NTA_CHECK
>101	ExpressionStatement	 
>102	AssignmentExpr	createPyNode_ = ( createPyNodeFunc ) pynodeLibrary_ -> getSymbol ( \"NTA_createPyNode\" )
>103	CastExpression	( createPyNodeFunc ) pynodeLibrary_ -> getSymbol ( \"NTA_createPyNode\" )
>104	CallExpression	pynodeLibrary_ -> getSymbol ( \"NTA_createPyNode\" )
>105	ArgumentList	\"NTA_createPyNode\"
>106	Argument	\"NTA_createPyNode\"
>107	PrimaryExpression	\"NTA_createPyNode\"
>108	Callee	pynodeLibrary_ -> getSymbol
>109	PtrMemberAccess	pynodeLibrary_ -> getSymbol
>110	Identifier	getSymbol
>111	Identifier	pynodeLibrary_
>112	CastTarget	createPyNodeFunc
>113	Identifier	createPyNode_
>114	ExpressionStatement	 
>115	ShiftExpression	NTA_CHECK ( finalizePython_ ) << \"Unable to find NTA_finalizePython symbol in \" << filename
>116	ShiftExpression	\"Unable to find NTA_finalizePython symbol in \" << filename
>117	Identifier	filename
>118	PrimaryExpression	\"Unable to find NTA_finalizePython symbol in \"
>119	CallExpression	NTA_CHECK ( finalizePython_ )
>120	ArgumentList	finalizePython_
>121	Argument	finalizePython_
>122	Identifier	finalizePython_
>123	Callee	NTA_CHECK
>124	Identifier	NTA_CHECK
>125	ExpressionStatement	 
>126	AssignmentExpr	finalizePython_ = ( finalizePythonFunc ) pynodeLibrary_ -> getSymbol ( \"NTA_finalizePython\" )
>127	CastExpression	( finalizePythonFunc ) pynodeLibrary_ -> getSymbol ( \"NTA_finalizePython\" )
>128	CallExpression	pynodeLibrary_ -> getSymbol ( \"NTA_finalizePython\" )
>129	ArgumentList	\"NTA_finalizePython\"
>130	Argument	\"NTA_finalizePython\"
>131	PrimaryExpression	\"NTA_finalizePython\"
>132	Callee	pynodeLibrary_ -> getSymbol
>133	PtrMemberAccess	pynodeLibrary_ -> getSymbol
>134	Identifier	getSymbol
>135	Identifier	pynodeLibrary_
>136	CastTarget	finalizePythonFunc
>137	Identifier	finalizePython_
>138	ExpressionStatement	 
>139	ShiftExpression	NTA_CHECK ( initPython_ ) << \"Unable to find NTA_initPython symbol in \" << filename
>140	ShiftExpression	\"Unable to find NTA_initPython symbol in \" << filename
>141	Identifier	filename
>142	PrimaryExpression	\"Unable to find NTA_initPython symbol in \"
>143	CallExpression	NTA_CHECK ( initPython_ )
>144	ArgumentList	initPython_
>145	Argument	initPython_
>146	Identifier	initPython_
>147	Callee	NTA_CHECK
>148	Identifier	NTA_CHECK
>149	ExpressionStatement	 
>150	AssignmentExpr	initPython_ = ( initPythonFunc ) pynodeLibrary_ -> getSymbol ( \"NTA_initPython\" )
>151	CastExpression	( initPythonFunc ) pynodeLibrary_ -> getSymbol ( \"NTA_initPython\" )
>152	CallExpression	pynodeLibrary_ -> getSymbol ( \"NTA_initPython\" )
>153	ArgumentList	\"NTA_initPython\"
>154	Argument	\"NTA_initPython\"
>155	PrimaryExpression	\"NTA_initPython\"
>156	Callee	pynodeLibrary_ -> getSymbol
>157	PtrMemberAccess	pynodeLibrary_ -> getSymbol
>158	Identifier	getSymbol
>159	Identifier	pynodeLibrary_
>160	CastTarget	initPythonFunc
>161	Identifier	initPython_
>162	ExpressionStatement	 
>163	AssignmentExpr	pynodeLibrary_ = boost 
>164	RelationalExpression	boost 
>165	RelationalExpression	DynamicLibrary > ( p )
>166	Identifier	p
>167	Identifier	DynamicLibrary
>168	Identifier	boost 
>169	Identifier	pynodeLibrary_
>170	ExpressionStatement	 
>171	ShiftExpression	NTA_CHECK ( p ) << \"Unable to load the pynode library
>172	ShiftExpression	\"Unable to load the pynode library
>173	Identifier	errorString
>174	PrimaryExpression	\"Unable to load the pynode library
>175	CallExpression	NTA_CHECK ( p )
>176	ArgumentList	p
>177	Argument	p
>178	Identifier	p
>179	Callee	NTA_CHECK
>180	Identifier	NTA_CHECK
>181	IdentifierDeclStatement	 
>182	IdentifierDecl	* p = DynamicLibrary 
>183	AssignmentExpr	* p = DynamicLibrary 
>184	CallExpression	DynamicLibrary 
>185	ArgumentList	libName
>186	Argument	errorString
>187	Identifier	errorString
>188	Argument	DynamicLibrary 
>189	InclusiveOrExpression	DynamicLibrary 
>190	Identifier	DynamicLibrary 
>191	Identifier	DynamicLibrary 
>192	Argument	libName
>193	Identifier	libName
>194	Callee	DynamicLibrary 
>195	Identifier	DynamicLibrary 
>196	Identifier	p
>197	Identifier	p
>198	IdentifierDeclType	DynamicLibrary *
>199	IdentifierDeclStatement	 
>200	IdentifierDecl	errorString
>201	Identifier	errorString
>202	IdentifierDeclType	std 
>203	IfStatement	if ( ! Path 
>204	ExpressionStatement	 
>205	ShiftExpression	NTA_THROW << \"Unable to find library \" << filename << \" in NuPIC installation folder '\" << rootDir_ << \"'\"\
>206	ShiftExpression	\"Unable to find library \" << filename << \" in NuPIC installation folder '\" << rootDir_ << \"'\"
>207	ShiftExpression	filename << \" in NuPIC installation folder '\" << rootDir_ << \"'\"
>208	ShiftExpression	\" in NuPIC installation folder '\" << rootDir_ << \"'\"
>209	ShiftExpression	rootDir_ << \"'\"
>210	PrimaryExpression	\"'\"
>211	Identifier	rootDir_
>212	PrimaryExpression	\" in NuPIC installation folder '\"
>213	Identifier	filename
>214	PrimaryExpression	\"Unable to find library \"
>215	Identifier	NTA_THROW
>216	Condition	 
>217	UnaryOp	! Path 
>218	CallExpression	Path 
>219	ArgumentList	libName
>220	Argument	libName
>221	Identifier	libName
>222	Callee	Path 
>223	Identifier	Path 
>224	UnaryOperator	!
>225	IdentifierDeclStatement	 
>226	IdentifierDecl	libName = Path 
>227	AssignmentExpr	libName = Path 
>228	CallExpression	Path 
>229	ArgumentList	rootDir_
>230	Argument	filename
>231	Identifier	filename
>232	Argument	\"lib\"
>233	PrimaryExpression	\"lib\"
>234	Argument	rootDir_
>235	Identifier	rootDir_
>236	Callee	Path 
>237	Identifier	Path 
>238	Identifier	libName
>239	Identifier	libName
>240	IdentifierDeclType	std 
>241	IdentifierDeclStatement	 
>242	IdentifierDecl	* filename = \"libcpp_region.dylib\"
>243	AssignmentExpr	* filename = \"libcpp_region.dylib\"
>244	PrimaryExpression	\"libcpp_region.dylib\"
>245	Identifier	filename
>246	Identifier	filename
>247	IdentifierDeclType	const char *
>248	IfStatement	if ( ! found )
>249	ExpressionStatement	 
>250	ShiftExpression	NTA_THROW << \"Unable to find NuPIC installation dir from NTA_ROOTDIR or PYTHONPATH\"
>251	PrimaryExpression	\"Unable to find NuPIC installation dir from NTA_ROOTDIR or PYTHONPATH\"
>252	Identifier	NTA_THROW
>253	Condition	 
>254	UnaryOp	! found
>255	Identifier	found
>256	UnaryOperator	!
>257	IfStatement	if ( ! found )
>258	CompoundStatement	 
>259	IfStatement	if ( found )
>260	CompoundStatement	 
>261	ExpressionStatement	 
>262	AssignmentExpr	rootDir_ = Path 
>263	CallExpression	Path 
>264	ArgumentList	Path 
>265	Argument	Path 
>266	CallExpression	Path 
>267	ArgumentList	Path 
>268	Argument	Path 
>269	CallExpression	Path 
>270	ArgumentList	path
>271	Argument	\"../../../..\"
>272	PrimaryExpression	\"../../../..\"
>273	Argument	path
>274	Identifier	path
>275	Callee	Path 
>276	Identifier	Path 
>277	Callee	Path 
>278	Identifier	Path 
>279	Callee	Path 
>280	Identifier	Path 
>281	Identifier	rootDir_
>282	Condition	 
>283	Identifier	found
>284	WhileStatement	while ( len > 0 )
>285	CompoundStatement	 
>286	IfStatement	if ( end == std 
>287	ElseStatement	else
>288	ExpressionStatement	 
>289	AssignmentExpr	len = end - start
>290	AdditiveExpression	end - start
>291	Identifier	start
>292	Identifier	end
>293	Identifier	len
>294	ExpressionStatement	 
>295	AssignmentExpr	len = sz - start
>296	AdditiveExpression	sz - start
>297	Identifier	start
>298	Identifier	sz
>299	Identifier	len
>300	Condition	 
>301	EqualityExpression	end == std 
>302	Identifier	std 
>303	Identifier	end
>304	IdentifierDeclStatement	 
>305	IdentifierDecl	end = pythonPath . find ( sep , start )
>306	AssignmentExpr	end = pythonPath . find ( sep , start )
>307	CallExpression	pythonPath . find ( sep , start )
>308	ArgumentList	sep
>309	Argument	start
>310	Identifier	start
>311	Argument	sep
>312	Identifier	sep
>313	Callee	pythonPath . find
>314	MemberAccess	pythonPath . find
>315	Identifier	find
>316	Identifier	pythonPath
>317	Identifier	end
>318	Identifier	end
>319	IdentifierDeclType	std 
>320	IfStatement	if ( start >= sz )
>321	BreakStatement	 
>322	Condition	 
>323	RelationalExpression	start >= sz
>324	Identifier	sz
>325	Identifier	start
>326	ExpressionStatement	 
>327	AssignmentExpr	start = start + len + 1
>328	AdditiveExpression	start + len + 1
>329	AdditiveExpression	len + 1
>330	PrimaryExpression	1
>331	Identifier	len
>332	Identifier	start
>333	Identifier	start
>334	IfStatement	if ( Path 
>335	CompoundStatement	 
>336	BreakStatement	 
>337	ExpressionStatement	 
>338	AssignmentExpr	found = true
>339	Identifier	true
>340	Identifier	found
>341	Condition	 
>342	AndExpression	Path 
>343	CallExpression	Path 
>344	ArgumentList	path
>345	Argument	path
>346	Identifier	path
>347	Callee	Path 
>348	Identifier	Path 
>349	CallExpression	Path 
>350	ArgumentList	path
>351	Argument	path
>352	Identifier	path
>353	Callee	Path 
>354	Identifier	Path 
>355	ExpressionStatement	 
>356	AssignmentExpr	path = Path 
>357	CallExpression	Path 
>358	ArgumentList	component
>359	Argument	\"nupic\"
>360	PrimaryExpression	\"nupic\"
>361	Argument	component
>362	Identifier	component
>363	Callee	Path 
>364	Identifier	Path 
>365	Identifier	path
>366	IdentifierDeclStatement	 
>367	IdentifierDecl	component = pythonPath . substr ( start , len )
>368	AssignmentExpr	component = pythonPath . substr ( start , len )
>369	CallExpression	pythonPath . substr ( start , len )
>370	ArgumentList	start
>371	Argument	len
>372	Identifier	len
>373	Argument	start
>374	Identifier	start
>375	Callee	pythonPath . substr
>376	MemberAccess	pythonPath . substr
>377	Identifier	substr
>378	Identifier	pythonPath
>379	Identifier	component
>380	Identifier	component
>381	IdentifierDeclType	std 
>382	Condition	 
>383	RelationalExpression	len > 0
>384	PrimaryExpression	0
>385	Identifier	len
>386	IdentifierDeclStatement	 
>387	IdentifierDecl	path
>388	Identifier	path
>389	IdentifierDeclType	std 
>390	IfStatement	if ( end == std 
>391	ElseStatement	else
>392	ExpressionStatement	 
>393	AssignmentExpr	len = end - start
>394	AdditiveExpression	end - start
>395	Identifier	start
>396	Identifier	end
>397	Identifier	len
>398	ExpressionStatement	 
>399	AssignmentExpr	len = sz - start
>400	AdditiveExpression	sz - start
>401	Identifier	start
>402	Identifier	sz
>403	Identifier	len
>404	Condition	 
>405	EqualityExpression	end == std 
>406	Identifier	std 
>407	Identifier	end
>408	IdentifierDeclStatement	 
>409	IdentifierDecl	end = pythonPath . find ( sep )
>410	AssignmentExpr	end = pythonPath . find ( sep )
>411	CallExpression	pythonPath . find ( sep )
>412	ArgumentList	sep
>413	Argument	sep
>414	Identifier	sep
>415	Callee	pythonPath . find
>416	MemberAccess	pythonPath . find
>417	Identifier	find
>418	Identifier	pythonPath
>419	Identifier	end
>420	Identifier	end
>421	IdentifierDeclType	std 
>422	IdentifierDeclStatement	 
>423	IdentifierDecl	len
>424	Identifier	len
>425	IdentifierDeclType	std 
>426	IdentifierDeclStatement	 
>427	IdentifierDecl	sz = pythonPath . size ( )
>428	AssignmentExpr	sz = pythonPath . size ( )
>429	CallExpression	pythonPath . size ( )
>430	ArgumentList	 
>431	Callee	pythonPath . size
>432	MemberAccess	pythonPath . size
>433	Identifier	size
>434	Identifier	pythonPath
>435	Identifier	sz
>436	Identifier	sz
>437	IdentifierDeclType	std 
>438	IdentifierDeclStatement	 
>439	IdentifierDecl	start = 0
>440	AssignmentExpr	start = 0
>441	PrimaryExpression	0
>442	Identifier	start
>443	Identifier	start
>444	IdentifierDeclType	std 
>445	IdentifierDeclStatement	 
>446	IdentifierDecl	* sep = \";\"
>447	AssignmentExpr	* sep = \";\"
>448	PrimaryExpression	\";\"
>449	Identifier	sep
>450	Identifier	sep
>451	IdentifierDeclType	const char *
>452	ExpressionStatement	 
>453	AssignmentExpr	found = false
>454	Identifier	false
>455	Identifier	found
>456	IfStatement	if ( ! found )
>457	CompoundStatement	 
>458	ExpressionStatement	 
>459	ShiftExpression	NTA_THROW << \"Unable to find the pynode dynamic library because neither NTA_ROOTDIR not PYTHONPATH is \
>460	PrimaryExpression	\"Unable to find the pynode dynamic library because neither NTA_ROOTDIR not PYTHONPATH is set\"
>461	Identifier	NTA_THROW
>462	Condition	 
>463	UnaryOp	! found
>464	Identifier	found
>465	UnaryOperator	!
>466	ExpressionStatement	 
>467	AssignmentExpr	found = Env 
>468	CallExpression	Env 
>469	ArgumentList	\"PYTHONPATH\"
>470	Argument	pythonPath
>471	Identifier	pythonPath
>472	Argument	\"PYTHONPATH\"
>473	PrimaryExpression	\"PYTHONPATH\"
>474	Callee	Env 
>475	Identifier	Env 
>476	Identifier	found
>477	IdentifierDeclStatement	 
>478	IdentifierDecl	pythonPath
>479	Identifier	pythonPath
>480	IdentifierDeclType	std 
>481	Condition	 
>482	UnaryOp	! found
>483	Identifier	found
>484	UnaryOperator	!
>485	IdentifierDeclStatement	 
>486	IdentifierDecl	found = Env 
>487	AssignmentExpr	found = Env 
>488	CallExpression	Env 
>489	ArgumentList	\"NTA_ROOTDIR\"
>490	Argument	rootDir_
>491	Identifier	rootDir_
>492	Argument	\"NTA_ROOTDIR\"
>493	PrimaryExpression	\"NTA_ROOTDIR\"
>494	Callee	Env 
>495	Identifier	Env 
>496	Identifier	found
>497	Identifier	found
>498	IdentifierDeclType	bool
>542	FunctionDef	~DynamicPythonLibrary ()
>543	ParameterList	 
>544	CompoundStatement	 
>545	IfStatement	if ( finalizePython_ )
>546	ExpressionStatement	 
>547	CallExpression	finalizePython_ ( )
>548	ArgumentList	 
>549	Callee	finalizePython_
>550	Identifier	finalizePython_
>551	Condition	 
>552	Identifier	finalizePython_
>557	FunctionDef	createSpec (std 
>558	ParameterList	std 
>559	Parameter	 
>560	Identifier	exception
>561	ParameterType	void * *
>562	Parameter	 
>563	Identifier	nodeType
>564	ParameterType	std 
>565	ReturnType	void *
>566	CompoundStatement	 
>567	ReturnStatement	 
>568	CallExpression	( * createSpec_ ) ( nodeType . c_str ( ) , exception )
>569	ArgumentList	nodeType . c_str ( )
>570	Argument	exception
>571	Identifier	exception
>572	Argument	nodeType . c_str ( )
>573	CallExpression	nodeType . c_str ( )
>574	ArgumentList	 
>575	Callee	nodeType . c_str
>576	MemberAccess	nodeType . c_str
>577	Identifier	c_str
>578	Identifier	nodeType
>579	Callee	* createSpec_
>580	UnaryOp	* createSpec_
>581	Identifier	createSpec_
>582	UnaryOperator	*
>591	FunctionDef	destroySpec (std 
>592	ParameterList	std 
>593	Parameter	 
>594	Identifier	nodeType
>595	ParameterType	std 
>596	ReturnType	int
>597	CompoundStatement	 
>598	ReturnStatement	 
>599	CallExpression	( * destroySpec_ ) ( nodeType . c_str ( ) )
>600	ArgumentList	nodeType . c_str ( )
>601	Argument	nodeType . c_str ( )
>602	CallExpression	nodeType . c_str ( )
>603	ArgumentList	 
>604	Callee	nodeType . c_str
>605	MemberAccess	nodeType . c_str
>606	Identifier	c_str
>607	Identifier	nodeType
>608	Callee	* destroySpec_
>609	UnaryOp	* destroySpec_
>610	Identifier	destroySpec_
>611	UnaryOperator	*
>612	ExpressionStatement	 
>613	ShiftExpression	NTA_INFO << \"destroySpec(\" << nodeType << \")\"
>614	ShiftExpression	\"destroySpec(\" << nodeType << \")\"
>615	ShiftExpression	nodeType << \")\"
>616	PrimaryExpression	\")\"
>617	Identifier	nodeType
>618	PrimaryExpression	\"destroySpec(\"
>619	Identifier	NTA_INFO
>627	FunctionDef	createPyNode (const std 
>628	ParameterList	const std 
>629	Parameter	 
>630	Identifier	exception
>631	ParameterType	void * *
>632	Parameter	 
>633	Identifier	region
>634	ParameterType	Region *
>635	Parameter	 
>636	Identifier	nodeParams
>637	ParameterType	ValueMap *
>638	Parameter	 
>639	Identifier	nodeType
>640	ParameterType	const std 
>641	ReturnType	void *
>642	CompoundStatement	 
>643	ExpressionStatement	 
>644	Statement	 
>645	Statement	 
>646	Statement	 
>647	Statement	 
>648	Statement	 
>649	Statement	 
>650	Statement	 
>651	Statement	 
>652	Statement	 
>653	Statement	 
>654	Statement	 
>655	Statement	 
>656	Statement	 
>657	Statement	 
>658	Statement	 
>659	Statement	 
>660	Statement	 
>661	Statement	 
>662	Statement	 
>663	Statement	 
>664	Statement	 
>665	Statement	 
>666	Statement	 
>667	Statement	 
>668	Statement	 
>669	Statement	 
>670	Statement	 
>671	Statement	 
>672	Statement	 
>673	Statement	 
>674	Statement	 
>675	Statement	 
>683	FunctionDef	deserializePyNode (const std 
>684	ParameterList	const std 
>685	Parameter	 
>686	Identifier	exception
>687	ParameterType	void * *
>688	Parameter	 
>689	Identifier	region
>690	ParameterType	Region *
>691	Parameter	 
>692	Identifier	bundle
>693	ParameterType	BundleIO *
>694	Parameter	 
>695	Identifier	nodeType
>696	ParameterType	const std 
>697	ReturnType	void *
>698	CompoundStatement	 
>699	ExpressionStatement	 
>700	Statement	 
>701	Statement	 
>702	Statement	 
>703	Statement	 
>704	Statement	 
>705	Statement	 
>706	Statement	 
>707	Statement	 
>708	Statement	 
>709	Statement	 
>710	Statement	 
>711	Statement	 
>712	Statement	 
>713	Statement	 
>714	Statement	 
>715	Statement	 
>716	Statement	 
>717	Statement	 
>718	Statement	 
>719	Statement	 
>720	Statement	 
>721	Statement	 
>722	Statement	 
>723	Statement	 
>724	Statement	 
>725	Statement	 
>726	Statement	 
>727	Statement	 
>728	Statement	 
>729	Statement	 
>730	Statement	 
>731	Statement	 
>739	FunctionDef	getRootDir ()
>740	ParameterList	 
>741	ReturnType	const std 
>742	CompoundStatement	 
>743	ReturnStatement	 
>744	Identifier	rootDir_
>765	FunctionDef	RegionImplFactory 
>766	ParameterList	 
>767	ReturnType	RegionImplFactory &
>768	CompoundStatement	 
>769	ReturnStatement	 
>770	Identifier	instance
>771	IdentifierDeclStatement	 
>772	IdentifierDecl	instance
>773	Identifier	instance
>774	IdentifierDeclType	RegionImplFactory
>775	Statement	 
>780	FunctionDef	getPackageDir (const std 
>781	ParameterList	const std 
>782	Parameter	 
>783	Identifier	package
>784	ParameterType	const std 
>785	Parameter	 
>786	Identifier	rootDir
>787	ParameterType	const std 
>788	ReturnType	static std 
>789	CompoundStatement	 
>790	ReturnStatement	 
>791	CallExpression	Path 
>792	ArgumentList	rootDir
>793	Argument	p
>794	Identifier	p
>795	Argument	\"lib/python2.6/site-packages\"
>796	PrimaryExpression	\"lib/python2.6/site-packages\"
>797	Argument	rootDir
>798	Identifier	rootDir
>799	Callee	Path 
>800	Identifier	Path 
>801	IfStatement	if ( pos != std 
>802	ExpressionStatement	 
>803	CallExpression	p . replace ( p . find ( \".\" ) , 1 , \"/\" )
>804	ArgumentList	p . find ( \".\" )
>805	Argument	\"/\"
>806	PrimaryExpression	\"/\"
>807	Argument	1
>808	PrimaryExpression	1
>809	Argument	p . find ( \".\" )
>810	CallExpression	p . find ( \".\" )
>811	ArgumentList	\".\"
>812	Argument	\".\"
>813	PrimaryExpression	\".\"
>814	Callee	p . find
>815	MemberAccess	p . find
>816	Identifier	find
>817	Identifier	p
>818	Callee	p . replace
>819	MemberAccess	p . replace
>820	Identifier	replace
>821	Identifier	p
>822	Condition	 
>823	EqualityExpression	pos != std 
>824	Identifier	std 
>825	Identifier	pos
>826	IdentifierDeclStatement	 
>827	IdentifierDecl	pos = p . find ( \".\" )
>828	AssignmentExpr	pos = p . find ( \".\" )
>829	CallExpression	p . find ( \".\" )
>830	ArgumentList	\".\"
>831	Argument	\".\"
>832	PrimaryExpression	\".\"
>833	Callee	p . find
>834	MemberAccess	p . find
>835	Identifier	find
>836	Identifier	p
>837	Identifier	pos
>838	Identifier	pos
>839	IdentifierDeclType	size_t
>840	ExpressionStatement	 
>841	CallExpression	p . replace ( p . find ( \".\" ) , 1 , \"/\" )
>842	ArgumentList	p . find ( \".\" )
>843	Argument	\"/\"
>844	PrimaryExpression	\"/\"
>845	Argument	1
>846	PrimaryExpression	1
>847	Argument	p . find ( \".\" )
>848	CallExpression	p . find ( \".\" )
>849	ArgumentList	\".\"
>850	Argument	\".\"
>851	PrimaryExpression	\".\"
>852	Callee	p . find
>853	MemberAccess	p . find
>854	Identifier	find
>855	Identifier	p
>856	Callee	p . replace
>857	MemberAccess	p . replace
>858	Identifier	replace
>859	Identifier	p
>860	IdentifierDeclStatement	 
>861	IdentifierDecl	p ( package )
>862	Identifier	package
>863	Identifier	p
>864	IdentifierDeclType	std 
>875	FunctionDef	createPyNode (DynamicPythonLibrary * pyLib , const std 
>876	ParameterList	DynamicPythonLibrary * pyLib , const std 
>877	Parameter	 
>878	Identifier	region
>879	ParameterType	Region *
>880	Parameter	 
>881	Identifier	nodeParams
>882	ParameterType	ValueMap *
>883	Parameter	 
>884	Identifier	nodeType
>885	ParameterType	const std 
>886	Parameter	 
>887	Identifier	pyLib
>888	ParameterType	DynamicPythonLibrary *
>889	ReturnType	static RegionImpl *
>890	CompoundStatement	 
>891	ReturnStatement	 
>892	Identifier	NULL
>893	ExpressionStatement	 
>894	ShiftExpression	NTA_THROW << \"Unable to create region \" << region -> getName ( ) << \" of type \" << nodeType
>895	ShiftExpression	\"Unable to create region \" << region -> getName ( ) << \" of type \" << nodeType
>896	ShiftExpression	region -> getName ( ) << \" of type \" << nodeType
>897	ShiftExpression	\" of type \" << nodeType
>898	Identifier	nodeType
>899	PrimaryExpression	\" of type \"
>900	CallExpression	region -> getName ( )
>901	ArgumentList	 
>902	Callee	region -> getName
>903	PtrMemberAccess	region -> getName
>904	Identifier	getName
>905	Identifier	region
>906	PrimaryExpression	\"Unable to create region \"
>907	Identifier	NTA_THROW
>908	ForStatement	for ( size_t i = 0 ; i < packages_length ; ++ i )
>909	CompoundStatement	 
>910	IfStatement	if ( exception )
>911	CompoundStatement	 
>912	ExpressionStatement	 
>913	Identifier	e
>914	Statement	 
>915	ExpressionStatement	 
>916	CallExpression	nta 
>917	ArgumentList	* e
>918	Argument	* e
>919	UnaryOp	* e
>920	Identifier	e
>921	UnaryOperator	*
>922	Callee	nta 
>923	Identifier	nta 
>924	Statement	 
>925	IdentifierDeclStatement	 
>926	IdentifierDecl	* e = ( nta 
>927	AssignmentExpr	* e = ( nta 
>928	CastExpression	( nta 
>929	Identifier	exception
>930	CastTarget	nta 
>931	Identifier	e
>932	Identifier	e
>933	IdentifierDeclType	nta 
>934	Condition	 
>935	Identifier	exception
>936	ExpressionStatement	 
>937	Identifier	node
>938	Statement	 
>939	Statement	 
>940	Statement	 
>941	Statement	 
>942	Statement	 
>943	IfStatement	if ( node )
>944	Statement	 
>945	Condition	 
>946	Identifier	node
>947	IdentifierDeclStatement	 
>948	IdentifierDecl	* node = pyLib -> createPyNode ( fullNodeType , nodeParams , region , & exception )
>949	AssignmentExpr	* node = pyLib -> createPyNode ( fullNodeType , nodeParams , region , & exception )
>950	CallExpression	pyLib -> createPyNode ( fullNodeType , nodeParams , region , & exception )
>951	ArgumentList	fullNodeType
>952	Argument	& exception
>953	UnaryOp	& exception
>954	Identifier	exception
>955	UnaryOperator	&
>956	Argument	region
>957	Identifier	region
>958	Argument	nodeParams
>959	Identifier	nodeParams
>960	Argument	fullNodeType
>961	Identifier	fullNodeType
>962	Callee	pyLib -> createPyNode
>963	PtrMemberAccess	pyLib -> createPyNode
>964	Identifier	createPyNode
>965	Identifier	pyLib
>966	Identifier	node
>967	Identifier	node
>968	IdentifierDeclType	void *
>969	IdentifierDeclStatement	 
>970	IdentifierDecl	* exception = NULL
>971	AssignmentExpr	* exception = NULL
>972	Identifier	NULL
>973	Identifier	NULL
>974	Identifier	exception
>975	IdentifierDeclType	void *
>976	IfStatement	if ( ! Path 
>977	ContinueStatement	 
>978	Condition	 
>979	UnaryOp	! Path 
>980	CallExpression	Path 
>981	ArgumentList	nodePath
>982	Argument	nodePath
>983	Identifier	nodePath
>984	Callee	Path 
>985	Identifier	Path 
>986	UnaryOperator	!
>987	IdentifierDeclStatement	 
>988	IdentifierDecl	nodePath = Path 
>989	AssignmentExpr	nodePath = Path 
>990	CallExpression	Path 
>991	ArgumentList	getPackageDir ( pyLib -> getRootDir ( ) , package )
>992	Argument	std 
>993	AdditiveExpression	std 
>994	CallExpression	std 
>995	ArgumentList	\".py\"
>996	Argument	\".py\"
>997	PrimaryExpression	\".py\"
>998	Callee	std 
>999	Identifier	std 
>1000	CallExpression	std 
>1001	ArgumentList	nodeType . c_str ( ) + 3
>1002	Argument	nodeType . c_str ( ) + 3
>1003	AdditiveExpression	nodeType . c_str ( ) + 3
>1004	PrimaryExpression	3
>1005	CallExpression	nodeType . c_str ( )
>1006	ArgumentList	 
>1007	Callee	nodeType . c_str
>1008	MemberAccess	nodeType . c_str
>1009	Identifier	c_str
>1010	Identifier	nodeType
>1011	Callee	std 
>1012	Identifier	std 
>1013	Argument	getPackageDir ( pyLib -> getRootDir ( ) , package )
>1014	CallExpression	getPackageDir ( pyLib -> getRootDir ( ) , package )
>1015	ArgumentList	pyLib -> getRootDir ( )
>1016	Argument	package
>1017	Identifier	package
>1018	Argument	pyLib -> getRootDir ( )
>1019	CallExpression	pyLib -> getRootDir ( )
>1020	ArgumentList	 
>1021	Callee	pyLib -> getRootDir
>1022	PtrMemberAccess	pyLib -> getRootDir
>1023	Identifier	getRootDir
>1024	Identifier	pyLib
>1025	Callee	getPackageDir
>1026	Identifier	getPackageDir
>1027	Callee	Path 
>1028	Identifier	Path 
>1029	Identifier	nodePath
>1030	Identifier	nodePath
>1031	IdentifierDeclType	std 
>1032	IdentifierDeclStatement	 
>1033	IdentifierDecl	fullNodeType = std 
>1034	AssignmentExpr	fullNodeType = std 
>1035	AdditiveExpression	std 
>1036	AdditiveExpression	std 
>1037	CallExpression	std 
>1038	ArgumentList	nodeType . c_str ( ) + 3
>1039	Argument	nodeType . c_str ( ) + 3
>1040	AdditiveExpression	nodeType . c_str ( ) + 3
>1041	PrimaryExpression	3
>1042	CallExpression	nodeType . c_str ( )
>1043	ArgumentList	 
>1044	Callee	nodeType . c_str
>1045	MemberAccess	nodeType . c_str
>1046	Identifier	c_str
>1047	Identifier	nodeType
>1048	Callee	std 
>1049	Identifier	std 
>1050	CallExpression	std 
>1051	ArgumentList	\".\"
>1052	Argument	\".\"
>1053	PrimaryExpression	\".\"
>1054	Callee	std 
>1055	Identifier	std 
>1056	CallExpression	std 
>1057	ArgumentList	package
>1058	Argument	package
>1059	Identifier	package
>1060	Callee	std 
>1061	Identifier	std 
>1062	Identifier	fullNodeType
>1063	Identifier	fullNodeType
>1064	IdentifierDeclType	std 
>1065	IdentifierDeclStatement	 
>1066	IdentifierDecl	* package = packages [ i ]
>1067	AssignmentExpr	* package = packages [ i ]
>1068	ArrayIndexing	packages [ i ]
>1069	Identifier	i
>1070	Identifier	packages
>1071	Identifier	package
>1072	Identifier	package
>1073	IdentifierDeclType	const char *
>1074	UnaryExpression	 
>1075	Identifier	i
>1076	IncDec	++
>1077	Condition	 
>1078	RelationalExpression	i < packages_length
>1079	Identifier	packages_length
>1080	Identifier	i
>1081	ForInit	 
>1082	IdentifierDeclStatement	size_t i = 0 ;
>1083	IdentifierDecl	i = 0
>1084	AssignmentExpr	i = 0
>1085	PrimaryExpression	0
>1086	Identifier	i
>1087	Identifier	i
>1088	IdentifierDeclType	size_t
>1118	FunctionDef	deserializePyNode (DynamicPythonLibrary * pyLib , const std 
>1119	ParameterList	DynamicPythonLibrary * pyLib , const std 
>1120	Parameter	 
>1121	Identifier	region
>1122	ParameterType	Region *
>1123	Parameter	 
>1124	Identifier	bundle
>1125	ParameterType	BundleIO &
>1126	Parameter	 
>1127	Identifier	nodeType
>1128	ParameterType	const std 
>1129	Parameter	 
>1130	Identifier	pyLib
>1131	ParameterType	DynamicPythonLibrary *
>1132	ReturnType	static RegionImpl *
>1133	CompoundStatement	 
>1134	ReturnStatement	 
>1135	Identifier	NULL
>1136	ExpressionStatement	 
>1137	ShiftExpression	NTA_THROW << \"Unable to deserialize region \" << region -> getName ( ) << \" of type \" << nodeType
>1138	ShiftExpression	\"Unable to deserialize region \" << region -> getName ( ) << \" of type \" << nodeType
>1139	ShiftExpression	region -> getName ( ) << \" of type \" << nodeType
>1140	ShiftExpression	\" of type \" << nodeType
>1141	Identifier	nodeType
>1142	PrimaryExpression	\" of type \"
>1143	CallExpression	region -> getName ( )
>1144	ArgumentList	 
>1145	Callee	region -> getName
>1146	PtrMemberAccess	region -> getName
>1147	Identifier	getName
>1148	Identifier	region
>1149	PrimaryExpression	\"Unable to deserialize region \"
>1150	Identifier	NTA_THROW
>1151	ForStatement	for ( size_t i = 0 ; i < packages_length ; ++ i )
>1152	CompoundStatement	 
>1153	IfStatement	if ( exception )
>1154	CompoundStatement	 
>1155	ExpressionStatement	 
>1156	Identifier	e
>1157	Statement	 
>1158	ExpressionStatement	 
>1159	CallExpression	nta 
>1160	ArgumentList	* e
>1161	Argument	* e
>1162	UnaryOp	* e
>1163	Identifier	e
>1164	UnaryOperator	*
>1165	Callee	nta 
>1166	Identifier	nta 
>1167	Statement	 
>1168	IdentifierDeclStatement	 
>1169	IdentifierDecl	* e = ( nta 
>1170	AssignmentExpr	* e = ( nta 
>1171	CastExpression	( nta 
>1172	Identifier	exception
>1173	CastTarget	nta 
>1174	Identifier	e
>1175	Identifier	e
>1176	IdentifierDeclType	nta 
>1177	Condition	 
>1178	Identifier	exception
>1179	ExpressionStatement	 
>1180	Identifier	node
>1181	Statement	 
>1182	Statement	 
>1183	Statement	 
>1184	Statement	 
>1185	Statement	 
>1186	IfStatement	if ( node )
>1187	Statement	 
>1188	Condition	 
>1189	Identifier	node
>1190	IdentifierDeclStatement	 
>1191	IdentifierDecl	* node = pyLib -> deserializePyNode ( fullNodeType , & bundle , region , & exception )
>1192	AssignmentExpr	* node = pyLib -> deserializePyNode ( fullNodeType , & bundle , region , & exception )
>1193	CallExpression	pyLib -> deserializePyNode ( fullNodeType , & bundle , region , & exception )
>1194	ArgumentList	fullNodeType
>1195	Argument	& exception
>1196	UnaryOp	& exception
>1197	Identifier	exception
>1198	UnaryOperator	&
>1199	Argument	region
>1200	Identifier	region
>1201	Argument	& bundle
>1202	UnaryOp	& bundle
>1203	Identifier	bundle
>1204	UnaryOperator	&
>1205	Argument	fullNodeType
>1206	Identifier	fullNodeType
>1207	Callee	pyLib -> deserializePyNode
>1208	PtrMemberAccess	pyLib -> deserializePyNode
>1209	Identifier	deserializePyNode
>1210	Identifier	pyLib
>1211	Identifier	node
>1212	Identifier	node
>1213	IdentifierDeclType	void *
>1214	IdentifierDeclStatement	 
>1215	IdentifierDecl	* exception = NULL
>1216	AssignmentExpr	* exception = NULL
>1217	Identifier	NULL
>1218	Identifier	NULL
>1219	Identifier	exception
>1220	IdentifierDeclType	void *
>1221	IfStatement	if ( ! Path 
>1222	ContinueStatement	 
>1223	Condition	 
>1224	UnaryOp	! Path 
>1225	CallExpression	Path 
>1226	ArgumentList	nodePath
>1227	Argument	nodePath
>1228	Identifier	nodePath
>1229	Callee	Path 
>1230	Identifier	Path 
>1231	UnaryOperator	!
>1232	IdentifierDeclStatement	 
>1233	IdentifierDecl	nodePath = Path 
>1234	AssignmentExpr	nodePath = Path 
>1235	CallExpression	Path 
>1236	ArgumentList	getPackageDir ( pyLib -> getRootDir ( ) , package )
>1237	Argument	std 
>1238	AdditiveExpression	std 
>1239	CallExpression	std 
>1240	ArgumentList	\".py\"
>1241	Argument	\".py\"
>1242	PrimaryExpression	\".py\"
>1243	Callee	std 
>1244	Identifier	std 
>1245	CallExpression	std 
>1246	ArgumentList	nodeType . c_str ( ) + 3
>1247	Argument	nodeType . c_str ( ) + 3
>1248	AdditiveExpression	nodeType . c_str ( ) + 3
>1249	PrimaryExpression	3
>1250	CallExpression	nodeType . c_str ( )
>1251	ArgumentList	 
>1252	Callee	nodeType . c_str
>1253	MemberAccess	nodeType . c_str
>1254	Identifier	c_str
>1255	Identifier	nodeType
>1256	Callee	std 
>1257	Identifier	std 
>1258	Argument	getPackageDir ( pyLib -> getRootDir ( ) , package )
>1259	CallExpression	getPackageDir ( pyLib -> getRootDir ( ) , package )
>1260	ArgumentList	pyLib -> getRootDir ( )
>1261	Argument	package
>1262	Identifier	package
>1263	Argument	pyLib -> getRootDir ( )
>1264	CallExpression	pyLib -> getRootDir ( )
>1265	ArgumentList	 
>1266	Callee	pyLib -> getRootDir
>1267	PtrMemberAccess	pyLib -> getRootDir
>1268	Identifier	getRootDir
>1269	Identifier	pyLib
>1270	Callee	getPackageDir
>1271	Identifier	getPackageDir
>1272	Callee	Path 
>1273	Identifier	Path 
>1274	Identifier	nodePath
>1275	Identifier	nodePath
>1276	IdentifierDeclType	std 
>1277	IdentifierDeclStatement	 
>1278	IdentifierDecl	fullNodeType = std 
>1279	AssignmentExpr	fullNodeType = std 
>1280	AdditiveExpression	std 
>1281	AdditiveExpression	std 
>1282	CallExpression	std 
>1283	ArgumentList	nodeType . c_str ( ) + 3
>1284	Argument	nodeType . c_str ( ) + 3
>1285	AdditiveExpression	nodeType . c_str ( ) + 3
>1286	PrimaryExpression	3
>1287	CallExpression	nodeType . c_str ( )
>1288	ArgumentList	 
>1289	Callee	nodeType . c_str
>1290	MemberAccess	nodeType . c_str
>1291	Identifier	c_str
>1292	Identifier	nodeType
>1293	Callee	std 
>1294	Identifier	std 
>1295	CallExpression	std 
>1296	ArgumentList	\".\"
>1297	Argument	\".\"
>1298	PrimaryExpression	\".\"
>1299	Callee	std 
>1300	Identifier	std 
>1301	CallExpression	std 
>1302	ArgumentList	package
>1303	Argument	package
>1304	Identifier	package
>1305	Callee	std 
>1306	Identifier	std 
>1307	Identifier	fullNodeType
>1308	Identifier	fullNodeType
>1309	IdentifierDeclType	std 
>1310	IdentifierDeclStatement	 
>1311	IdentifierDecl	* package = packages [ i ]
>1312	AssignmentExpr	* package = packages [ i ]
>1313	ArrayIndexing	packages [ i ]
>1314	Identifier	i
>1315	Identifier	packages
>1316	Identifier	package
>1317	Identifier	package
>1318	IdentifierDeclType	const char *
>1319	UnaryExpression	 
>1320	Identifier	i
>1321	IncDec	++
>1322	Condition	 
>1323	RelationalExpression	i < packages_length
>1324	Identifier	packages_length
>1325	Identifier	i
>1326	ForInit	 
>1327	IdentifierDeclStatement	size_t i = 0 ;
>1328	IdentifierDecl	i = 0
>1329	AssignmentExpr	i = 0
>1330	PrimaryExpression	0
>1331	Identifier	i
>1332	Identifier	i
>1333	IdentifierDeclType	size_t
>1364	FunctionDef	RegionImplFactory 
>1365	ParameterList	const std 
>1366	Parameter	 
>1367	Identifier	region
>1368	ParameterType	Region *
>1369	Parameter	 
>1370	Identifier	nodeParams
>1371	ParameterType	const std 
>1372	Parameter	 
>1373	Identifier	nodeType
>1374	ParameterType	const std 
>1375	ReturnType	RegionImpl *
>1376	CompoundStatement	 
>1377	ReturnStatement	 
>1378	Identifier	mn
>1379	IfStatement	if ( nodeType == \"TestNode\" )
>1380	ElseStatement	else
>1381	IfStatement	if ( nodeType == \"SpatialPoolerNode\" )
>1382	ElseStatement	else
>1383	IfStatement	if ( nodeType == \"TemporalPoolerNode\" )
>1384	ElseStatement	else
>1385	IfStatement	if ( nodeType == \"VectorFileEffector\" )
>1386	ElseStatement	else
>1387	IfStatement	if ( nodeType == \"VectorFileSensor\" )
>1388	ElseStatement	else
>1389	IfStatement	if ( ( nodeType . find ( std 
>1390	ElseStatement	else
>1391	CompoundStatement	 
>1392	ExpressionStatement	 
>1393	ShiftExpression	NTA_THROW << \"Unsupported node type '\" << nodeType << \"'\"
>1394	ShiftExpression	\"Unsupported node type '\" << nodeType << \"'\"
>1395	ShiftExpression	nodeType << \"'\"
>1396	PrimaryExpression	\"'\"
>1397	Identifier	nodeType
>1398	PrimaryExpression	\"Unsupported node type '\"
>1399	Identifier	NTA_THROW
>1400	CompoundStatement	 
>1401	ExpressionStatement	 
>1402	AssignmentExpr	mn = createPyNode ( pyLib_ . get ( ) , nodeType , & vm , region )
>1403	CallExpression	createPyNode ( pyLib_ . get ( ) , nodeType , & vm , region )
>1404	ArgumentList	pyLib_ . get ( )
>1405	Argument	region
>1406	Identifier	region
>1407	Argument	& vm
>1408	UnaryOp	& vm
>1409	Identifier	vm
>1410	UnaryOperator	&
>1411	Argument	nodeType
>1412	Identifier	nodeType
>1413	Argument	pyLib_ . get ( )
>1414	CallExpression	pyLib_ . get ( )
>1415	ArgumentList	 
>1416	Callee	pyLib_ . get
>1417	MemberAccess	pyLib_ . get
>1418	Identifier	get
>1419	Identifier	pyLib_
>1420	Callee	createPyNode
>1421	Identifier	createPyNode
>1422	Identifier	mn
>1423	IfStatement	if ( ! pyLib_ )
>1424	ExpressionStatement	 
>1425	AssignmentExpr	pyLib_ = boost 
>1426	RelationalExpression	boost 
>1427	RelationalExpression	DynamicPythonLibrary > ( new DynamicPythonLibrary ( ) )
>1428	UnaryExpression	new DynamicPythonLibrary ( )
>1429	Identifier	DynamicPythonLibrary
>1430	Identifier	boost 
>1431	Identifier	pyLib_
>1432	Condition	 
>1433	UnaryOp	! pyLib_
>1434	Identifier	pyLib_
>1435	UnaryOperator	!
>1436	Condition	 
>1437	EqualityExpression	nodeType . find ( std 
>1438	PrimaryExpression	0
>1439	CallExpression	nodeType . find ( std 
>1440	ArgumentList	std 
>1441	Argument	std 
>1442	CallExpression	std 
>1443	ArgumentList	\"py.\"
>1444	Argument	\"py.\"
>1445	PrimaryExpression	\"py.\"
>1446	Callee	std 
>1447	Identifier	std 
>1448	Callee	nodeType . find
>1449	MemberAccess	nodeType . find
>1450	Identifier	find
>1451	Identifier	nodeType
>1452	CompoundStatement	 
>1453	ExpressionStatement	 
>1454	AssignmentExpr	mn = new VectorFileSensor ( vm , region )
>1455	Expression	vm , region
>1456	Identifier	region
>1457	Identifier	vm
>1458	Identifier	mn
>1459	Condition	 
>1460	EqualityExpression	nodeType == \"VectorFileSensor\"
>1461	PrimaryExpression	\"VectorFileSensor\"
>1462	Identifier	nodeType
>1463	CompoundStatement	 
>1464	ExpressionStatement	 
>1465	AssignmentExpr	mn = new VectorFileEffector ( vm , region )
>1466	Expression	vm , region
>1467	Identifier	region
>1468	Identifier	vm
>1469	Identifier	mn
>1470	Condition	 
>1471	EqualityExpression	nodeType == \"VectorFileEffector\"
>1472	PrimaryExpression	\"VectorFileEffector\"
>1473	Identifier	nodeType
>1474	CompoundStatement	 
>1475	ExpressionStatement	 
>1476	AssignmentExpr	mn = new TemporalPoolerNode ( vm , region )
>1477	Expression	vm , region
>1478	Identifier	region
>1479	Identifier	vm
>1480	Identifier	mn
>1481	Condition	 
>1482	EqualityExpression	nodeType == \"TemporalPoolerNode\"
>1483	PrimaryExpression	\"TemporalPoolerNode\"
>1484	Identifier	nodeType
>1485	CompoundStatement	 
>1486	ExpressionStatement	 
>1487	AssignmentExpr	mn = new SpatialPoolerNode ( vm , region )
>1488	Expression	vm , region
>1489	Identifier	region
>1490	Identifier	vm
>1491	Identifier	mn
>1492	Condition	 
>1493	EqualityExpression	nodeType == \"SpatialPoolerNode\"
>1494	PrimaryExpression	\"SpatialPoolerNode\"
>1495	Identifier	nodeType
>1496	CompoundStatement	 
>1497	ExpressionStatement	 
>1498	AssignmentExpr	mn = new TestNode ( vm , region )
>1499	Expression	vm , region
>1500	Identifier	region
>1501	Identifier	vm
>1502	Identifier	mn
>1503	Condition	 
>1504	EqualityExpression	nodeType == \"TestNode\"
>1505	PrimaryExpression	\"TestNode\"
>1506	Identifier	nodeType
>1507	IdentifierDeclStatement	 
>1508	IdentifierDecl	vm = YAMLUtils 
>1509	AssignmentExpr	vm = YAMLUtils 
>1510	CallExpression	YAMLUtils 
>1511	ArgumentList	nodeParams . c_str ( )
>1512	Argument	region -> getName ( )
>1513	CallExpression	region -> getName ( )
>1514	ArgumentList	 
>1515	Callee	region -> getName
>1516	PtrMemberAccess	region -> getName
>1517	Identifier	getName
>1518	Identifier	region
>1519	Argument	nodeType
>1520	Identifier	nodeType
>1521	Argument	ns -> parameters
>1522	PtrMemberAccess	ns -> parameters
>1523	Identifier	parameters
>1524	Identifier	ns
>1525	Argument	nodeParams . c_str ( )
>1526	CallExpression	nodeParams . c_str ( )
>1527	ArgumentList	 
>1528	Callee	nodeParams . c_str
>1529	MemberAccess	nodeParams . c_str
>1530	Identifier	c_str
>1531	Identifier	nodeParams
>1532	Callee	YAMLUtils 
>1533	Identifier	YAMLUtils 
>1534	Identifier	vm
>1535	Identifier	vm
>1536	IdentifierDeclType	ValueMap
>1537	IdentifierDeclStatement	 
>1538	IdentifierDecl	* ns = getSpec ( nodeType )
>1539	AssignmentExpr	* ns = getSpec ( nodeType )
>1540	CallExpression	getSpec ( nodeType )
>1541	ArgumentList	nodeType
>1542	Argument	nodeType
>1543	Identifier	nodeType
>1544	Callee	getSpec
>1545	Identifier	getSpec
>1546	Identifier	ns
>1547	Identifier	ns
>1548	IdentifierDeclType	Spec *
>1549	IdentifierDeclStatement	 
>1550	IdentifierDecl	* mn = NULL
>1551	AssignmentExpr	* mn = NULL
>1552	Identifier	NULL
>1553	Identifier	NULL
>1554	Identifier	mn
>1555	IdentifierDeclType	RegionImpl *
>1581	FunctionDef	RegionImplFactory 
>1582	ParameterList	const std 
>1583	Parameter	 
>1584	Identifier	region
>1585	ParameterType	Region *
>1586	Parameter	 
>1587	Identifier	bundle
>1588	ParameterType	BundleIO &
>1589	Parameter	 
>1590	Identifier	nodeType
>1591	ParameterType	const std 
>1592	ReturnType	RegionImpl *
>1593	CompoundStatement	 
>1594	ReturnStatement	 
>1595	Identifier	mn
>1596	IfStatement	if ( nodeType == \"TestNode\" )
>1597	ElseStatement	else
>1598	IfStatement	if ( nodeType == \"SpatialPoolerNode\" )
>1599	ElseStatement	else
>1600	IfStatement	if ( nodeType == \"TemporalPoolerNode\" )
>1601	ElseStatement	else
>1602	IfStatement	if ( nodeType == \"VectorFileEffector\" )
>1603	ElseStatement	else
>1604	IfStatement	if ( nodeType == \"VectorFileSensor\" )
>1605	ElseStatement	else
>1606	IfStatement	if ( StringUtils 
>1607	ElseStatement	else
>1608	CompoundStatement	 
>1609	ExpressionStatement	 
>1610	ShiftExpression	NTA_THROW << \"Unsupported node type '\" << nodeType << \"'\"
>1611	ShiftExpression	\"Unsupported node type '\" << nodeType << \"'\"
>1612	ShiftExpression	nodeType << \"'\"
>1613	PrimaryExpression	\"'\"
>1614	Identifier	nodeType
>1615	PrimaryExpression	\"Unsupported node type '\"
>1616	Identifier	NTA_THROW
>1617	CompoundStatement	 
>1618	ExpressionStatement	 
>1619	AssignmentExpr	mn = deserializePyNode ( pyLib_ . get ( ) , nodeType , bundle , region )
>1620	CallExpression	deserializePyNode ( pyLib_ . get ( ) , nodeType , bundle , region )
>1621	ArgumentList	pyLib_ . get ( )
>1622	Argument	region
>1623	Identifier	region
>1624	Argument	bundle
>1625	Identifier	bundle
>1626	Argument	nodeType
>1627	Identifier	nodeType
>1628	Argument	pyLib_ . get ( )
>1629	CallExpression	pyLib_ . get ( )
>1630	ArgumentList	 
>1631	Callee	pyLib_ . get
>1632	MemberAccess	pyLib_ . get
>1633	Identifier	get
>1634	Identifier	pyLib_
>1635	Callee	deserializePyNode
>1636	Identifier	deserializePyNode
>1637	Identifier	mn
>1638	IfStatement	if ( ! pyLib_ )
>1639	ExpressionStatement	 
>1640	AssignmentExpr	pyLib_ = boost 
>1641	RelationalExpression	boost 
>1642	RelationalExpression	DynamicPythonLibrary > ( new DynamicPythonLibrary ( ) )
>1643	UnaryExpression	new DynamicPythonLibrary ( )
>1644	Identifier	DynamicPythonLibrary
>1645	Identifier	boost 
>1646	Identifier	pyLib_
>1647	Condition	 
>1648	UnaryOp	! pyLib_
>1649	Identifier	pyLib_
>1650	UnaryOperator	!
>1651	Condition	 
>1652	CallExpression	StringUtils 
>1653	ArgumentList	nodeType
>1654	Argument	\"py.\"
>1655	PrimaryExpression	\"py.\"
>1656	Argument	nodeType
>1657	Identifier	nodeType
>1658	Callee	StringUtils 
>1659	Identifier	StringUtils 
>1660	CompoundStatement	 
>1661	ExpressionStatement	 
>1662	AssignmentExpr	mn = new VectorFileSensor ( bundle , region )
>1663	Expression	bundle , region
>1664	Identifier	region
>1665	Identifier	bundle
>1666	Identifier	mn
>1667	Condition	 
>1668	EqualityExpression	nodeType == \"VectorFileSensor\"
>1669	PrimaryExpression	\"VectorFileSensor\"
>1670	Identifier	nodeType
>1671	CompoundStatement	 
>1672	ExpressionStatement	 
>1673	AssignmentExpr	mn = new VectorFileEffector ( bundle , region )
>1674	Expression	bundle , region
>1675	Identifier	region
>1676	Identifier	bundle
>1677	Identifier	mn
>1678	Condition	 
>1679	EqualityExpression	nodeType == \"VectorFileEffector\"
>1680	PrimaryExpression	\"VectorFileEffector\"
>1681	Identifier	nodeType
>1682	CompoundStatement	 
>1683	ExpressionStatement	 
>1684	AssignmentExpr	mn = new TemporalPoolerNode ( bundle , region )
>1685	Expression	bundle , region
>1686	Identifier	region
>1687	Identifier	bundle
>1688	Identifier	mn
>1689	Condition	 
>1690	EqualityExpression	nodeType == \"TemporalPoolerNode\"
>1691	PrimaryExpression	\"TemporalPoolerNode\"
>1692	Identifier	nodeType
>1693	CompoundStatement	 
>1694	ExpressionStatement	 
>1695	AssignmentExpr	mn = new SpatialPoolerNode ( bundle , region )
>1696	Expression	bundle , region
>1697	Identifier	region
>1698	Identifier	bundle
>1699	Identifier	mn
>1700	Condition	 
>1701	EqualityExpression	nodeType == \"SpatialPoolerNode\"
>1702	PrimaryExpression	\"SpatialPoolerNode\"
>1703	Identifier	nodeType
>1704	CompoundStatement	 
>1705	ExpressionStatement	 
>1706	AssignmentExpr	mn = new TestNode ( bundle , region )
>1707	Expression	bundle , region
>1708	Identifier	region
>1709	Identifier	bundle
>1710	Identifier	mn
>1711	Condition	 
>1712	EqualityExpression	nodeType == \"TestNode\"
>1713	PrimaryExpression	\"TestNode\"
>1714	Identifier	nodeType
>1715	IdentifierDeclStatement	 
>1716	IdentifierDecl	* mn = NULL
>1717	AssignmentExpr	* mn = NULL
>1718	Identifier	NULL
>1719	Identifier	NULL
>1720	Identifier	mn
>1721	IdentifierDeclType	RegionImpl *
>1736	FunctionDef	getPySpec (DynamicPythonLibrary * pyLib , const std 
>1737	ParameterList	DynamicPythonLibrary * pyLib , const std 
>1738	Parameter	 
>1739	Identifier	nodeType
>1740	ParameterType	const std 
>1741	Parameter	 
>1742	Identifier	pyLib
>1743	ParameterType	DynamicPythonLibrary *
>1744	ReturnType	static Spec *
>1745	CompoundStatement	 
>1746	ExpressionStatement	 
>1747	ShiftExpression	NTA_THROW << \"Matching Python module for \" << nodeType << \" not found.\"
>1748	ShiftExpression	\"Matching Python module for \" << nodeType << \" not found.\"
>1749	ShiftExpression	nodeType << \" not found.\"
>1750	PrimaryExpression	\" not found.\"
>1751	Identifier	nodeType
>1752	PrimaryExpression	\"Matching Python module for \"
>1753	Identifier	NTA_THROW
>1754	ForStatement	for ( size_t i = 0 ; i < packages_length ; ++ i )
>1755	CompoundStatement	 
>1756	IfStatement	if ( exception )
>1757	CompoundStatement	 
>1758	ExpressionStatement	 
>1759	ShiftExpression	NTA_THROW << \"Could not get valid spec for Region
>1760	ShiftExpression	\"Could not get valid spec for Region
>1761	Identifier	nodeType
>1762	PrimaryExpression	\"Could not get valid spec for Region
>1763	Identifier	NTA_THROW
>1764	ExpressionStatement	 
>1765	Identifier	e
>1766	Statement	 
>1767	IdentifierDeclStatement	 
>1768	IdentifierDecl	* e = ( nta 
>1769	AssignmentExpr	* e = ( nta 
>1770	CastExpression	( nta 
>1771	Identifier	exception
>1772	CastTarget	nta 
>1773	Identifier	e
>1774	Identifier	e
>1775	IdentifierDeclType	nta 
>1776	Condition	 
>1777	Identifier	exception
>1778	IfStatement	if ( ns )
>1779	CompoundStatement	 
>1780	ReturnStatement	 
>1781	CastExpression	( Spec * ) ns
>1782	Identifier	ns
>1783	CastTarget	Spec *
>1784	Condition	 
>1785	Identifier	ns
>1786	IdentifierDeclStatement	 
>1787	IdentifierDecl	* ns = pyLib -> createSpec ( fullNodeType , & exception )
>1788	AssignmentExpr	* ns = pyLib -> createSpec ( fullNodeType , & exception )
>1789	CallExpression	pyLib -> createSpec ( fullNodeType , & exception )
>1790	ArgumentList	fullNodeType
>1791	Argument	& exception
>1792	UnaryOp	& exception
>1793	Identifier	exception
>1794	UnaryOperator	&
>1795	Argument	fullNodeType
>1796	Identifier	fullNodeType
>1797	Callee	pyLib -> createSpec
>1798	PtrMemberAccess	pyLib -> createSpec
>1799	Identifier	createSpec
>1800	Identifier	pyLib
>1801	Identifier	ns
>1802	Identifier	ns
>1803	IdentifierDeclType	void *
>1804	IdentifierDeclStatement	 
>1805	IdentifierDecl	* exception = NULL
>1806	AssignmentExpr	* exception = NULL
>1807	Identifier	NULL
>1808	Identifier	NULL
>1809	Identifier	exception
>1810	IdentifierDeclType	void *
>1811	IfStatement	if ( ! Path 
>1812	ContinueStatement	 
>1813	Condition	 
>1814	UnaryOp	! Path 
>1815	CallExpression	Path 
>1816	ArgumentList	nodePath
>1817	Argument	nodePath
>1818	Identifier	nodePath
>1819	Callee	Path 
>1820	Identifier	Path 
>1821	UnaryOperator	!
>1822	IdentifierDeclStatement	 
>1823	IdentifierDecl	nodePath = Path 
>1824	AssignmentExpr	nodePath = Path 
>1825	CallExpression	Path 
>1826	ArgumentList	getPackageDir ( pyLib -> getRootDir ( ) , package )
>1827	Argument	std 
>1828	AdditiveExpression	std 
>1829	CallExpression	std 
>1830	ArgumentList	\".py\"
>1831	Argument	\".py\"
>1832	PrimaryExpression	\".py\"
>1833	Callee	std 
>1834	Identifier	std 
>1835	CallExpression	std 
>1836	ArgumentList	nodeType . c_str ( ) + 3
>1837	Argument	nodeType . c_str ( ) + 3
>1838	AdditiveExpression	nodeType . c_str ( ) + 3
>1839	PrimaryExpression	3
>1840	CallExpression	nodeType . c_str ( )
>1841	ArgumentList	 
>1842	Callee	nodeType . c_str
>1843	MemberAccess	nodeType . c_str
>1844	Identifier	c_str
>1845	Identifier	nodeType
>1846	Callee	std 
>1847	Identifier	std 
>1848	Argument	getPackageDir ( pyLib -> getRootDir ( ) , package )
>1849	CallExpression	getPackageDir ( pyLib -> getRootDir ( ) , package )
>1850	ArgumentList	pyLib -> getRootDir ( )
>1851	Argument	package
>1852	Identifier	package
>1853	Argument	pyLib -> getRootDir ( )
>1854	CallExpression	pyLib -> getRootDir ( )
>1855	ArgumentList	 
>1856	Callee	pyLib -> getRootDir
>1857	PtrMemberAccess	pyLib -> getRootDir
>1858	Identifier	getRootDir
>1859	Identifier	pyLib
>1860	Callee	getPackageDir
>1861	Identifier	getPackageDir
>1862	Callee	Path 
>1863	Identifier	Path 
>1864	Identifier	nodePath
>1865	Identifier	nodePath
>1866	IdentifierDeclType	std 
>1867	IdentifierDeclStatement	 
>1868	IdentifierDecl	fullNodeType = std 
>1869	AssignmentExpr	fullNodeType = std 
>1870	AdditiveExpression	std 
>1871	AdditiveExpression	std 
>1872	CallExpression	std 
>1873	ArgumentList	nodeType . c_str ( ) + 3
>1874	Argument	nodeType . c_str ( ) + 3
>1875	AdditiveExpression	nodeType . c_str ( ) + 3
>1876	PrimaryExpression	3
>1877	CallExpression	nodeType . c_str ( )
>1878	ArgumentList	 
>1879	Callee	nodeType . c_str
>1880	MemberAccess	nodeType . c_str
>1881	Identifier	c_str
>1882	Identifier	nodeType
>1883	Callee	std 
>1884	Identifier	std 
>1885	CallExpression	std 
>1886	ArgumentList	\".\"
>1887	Argument	\".\"
>1888	PrimaryExpression	\".\"
>1889	Callee	std 
>1890	Identifier	std 
>1891	CallExpression	std 
>1892	ArgumentList	package
>1893	Argument	package
>1894	Identifier	package
>1895	Callee	std 
>1896	Identifier	std 
>1897	Identifier	fullNodeType
>1898	Identifier	fullNodeType
>1899	IdentifierDeclType	std 
>1900	IdentifierDeclStatement	 
>1901	IdentifierDecl	* package = packages [ i ]
>1902	AssignmentExpr	* package = packages [ i ]
>1903	ArrayIndexing	packages [ i ]
>1904	Identifier	i
>1905	Identifier	packages
>1906	Identifier	package
>1907	Identifier	package
>1908	IdentifierDeclType	const char *
>1909	UnaryExpression	 
>1910	Identifier	i
>1911	IncDec	++
>1912	Condition	 
>1913	RelationalExpression	i < packages_length
>1914	Identifier	packages_length
>1915	Identifier	i
>1916	ForInit	 
>1917	IdentifierDeclStatement	size_t i = 0 ;
>1918	IdentifierDecl	i = 0
>1919	AssignmentExpr	i = 0
>1920	PrimaryExpression	0
>1921	Identifier	i
>1922	Identifier	i
>1923	IdentifierDeclType	size_t
>1950	FunctionDef	RegionImplFactory 
>1951	ParameterList	const std 
>1952	Parameter	 
>1953	Identifier	nodeType
>1954	ParameterType	const std 
>1955	ReturnType	Spec *
>1956	CompoundStatement	 
>1957	ReturnStatement	 
>1958	Identifier	ns
>1959	ExpressionStatement	 
>1960	AssignmentExpr	nodespecCache_ [ nodeType ] = ns
>1961	Identifier	ns
>1962	ArrayIndexing	nodespecCache_ [ nodeType ]
>1963	Identifier	nodeType
>1964	Identifier	nodespecCache_
>1965	IfStatement	if ( ! ns )
>1966	ExpressionStatement	 
>1967	ShiftExpression	NTA_THROW << \"Unable to get node spec for
>1968	ShiftExpression	\"Unable to get node spec for
>1969	Identifier	nodeType
>1970	PrimaryExpression	\"Unable to get node spec for
>1971	Identifier	NTA_THROW
>1972	Condition	 
>1973	UnaryOp	! ns
>1974	Identifier	ns
>1975	UnaryOperator	!
>1976	IfStatement	if ( nodeType == \"TestNode\" )
>1977	ElseStatement	else
>1978	IfStatement	if ( nodeType == \"SpatialPoolerNode\" )
>1979	ElseStatement	else
>1980	IfStatement	if ( nodeType == \"TemporalPoolerNode\" )
>1981	ElseStatement	else
>1982	IfStatement	if ( nodeType == \"VectorFileEffector\" )
>1983	ElseStatement	else
>1984	IfStatement	if ( nodeType == \"VectorFileSensor\" )
>1985	ElseStatement	else
>1986	IfStatement	if ( nodeType . find ( std 
>1987	ElseStatement	else
>1988	CompoundStatement	 
>1989	ExpressionStatement	 
>1990	ShiftExpression	NTA_THROW << \"getSpec() -- Unsupported node type '\" << nodeType << \"'\"
>1991	ShiftExpression	\"getSpec() -- Unsupported node type '\" << nodeType << \"'\"
>1992	ShiftExpression	nodeType << \"'\"
>1993	PrimaryExpression	\"'\"
>1994	Identifier	nodeType
>1995	PrimaryExpression	\"getSpec() -- Unsupported node type '\"
>1996	Identifier	NTA_THROW
>1997	CompoundStatement	 
>1998	ExpressionStatement	 
>1999	AssignmentExpr	ns = getPySpec ( pyLib_ . get ( ) , nodeType )
>2000	CallExpression	getPySpec ( pyLib_ . get ( ) , nodeType )
>2001	ArgumentList	pyLib_ . get ( )
>2002	Argument	nodeType
>2003	Identifier	nodeType
>2004	Argument	pyLib_ . get ( )
>2005	CallExpression	pyLib_ . get ( )
>2006	ArgumentList	 
>2007	Callee	pyLib_ . get
>2008	MemberAccess	pyLib_ . get
>2009	Identifier	get
>2010	Identifier	pyLib_
>2011	Callee	getPySpec
>2012	Identifier	getPySpec
>2013	Identifier	ns
>2014	IfStatement	if ( ! pyLib_ )
>2015	ExpressionStatement	 
>2016	AssignmentExpr	pyLib_ = boost 
>2017	RelationalExpression	boost 
>2018	RelationalExpression	DynamicPythonLibrary > ( new DynamicPythonLibrary ( ) )
>2019	UnaryExpression	new DynamicPythonLibrary ( )
>2020	Identifier	DynamicPythonLibrary
>2021	Identifier	boost 
>2022	Identifier	pyLib_
>2023	Condition	 
>2024	UnaryOp	! pyLib_
>2025	Identifier	pyLib_
>2026	UnaryOperator	!
>2027	Condition	 
>2028	EqualityExpression	nodeType . find ( std 
>2029	PrimaryExpression	0
>2030	CallExpression	nodeType . find ( std 
>2031	ArgumentList	std 
>2032	Argument	std 
>2033	CallExpression	std 
>2034	ArgumentList	\"py.\"
>2035	Argument	\"py.\"
>2036	PrimaryExpression	\"py.\"
>2037	Callee	std 
>2038	Identifier	std 
>2039	Callee	nodeType . find
>2040	MemberAccess	nodeType . find
>2041	Identifier	find
>2042	Identifier	nodeType
>2043	CompoundStatement	 
>2044	ExpressionStatement	 
>2045	AssignmentExpr	ns = VectorFileSensor 
>2046	CallExpression	VectorFileSensor 
>2047	ArgumentList	 
>2048	Callee	VectorFileSensor 
>2049	Identifier	VectorFileSensor 
>2050	Identifier	ns
>2051	Condition	 
>2052	EqualityExpression	nodeType == \"VectorFileSensor\"
>2053	PrimaryExpression	\"VectorFileSensor\"
>2054	Identifier	nodeType
>2055	CompoundStatement	 
>2056	ExpressionStatement	 
>2057	AssignmentExpr	ns = VectorFileEffector 
>2058	CallExpression	VectorFileEffector 
>2059	ArgumentList	 
>2060	Callee	VectorFileEffector 
>2061	Identifier	VectorFileEffector 
>2062	Identifier	ns
>2063	Condition	 
>2064	EqualityExpression	nodeType == \"VectorFileEffector\"
>2065	PrimaryExpression	\"VectorFileEffector\"
>2066	Identifier	nodeType
>2067	CompoundStatement	 
>2068	ExpressionStatement	 
>2069	AssignmentExpr	ns = TemporalPoolerNode 
>2070	CallExpression	TemporalPoolerNode 
>2071	ArgumentList	 
>2072	Callee	TemporalPoolerNode 
>2073	Identifier	TemporalPoolerNode 
>2074	Identifier	ns
>2075	Condition	 
>2076	EqualityExpression	nodeType == \"TemporalPoolerNode\"
>2077	PrimaryExpression	\"TemporalPoolerNode\"
>2078	Identifier	nodeType
>2079	CompoundStatement	 
>2080	ExpressionStatement	 
>2081	AssignmentExpr	ns = SpatialPoolerNode 
>2082	CallExpression	SpatialPoolerNode 
>2083	ArgumentList	 
>2084	Callee	SpatialPoolerNode 
>2085	Identifier	SpatialPoolerNode 
>2086	Identifier	ns
>2087	Condition	 
>2088	EqualityExpression	nodeType == \"SpatialPoolerNode\"
>2089	PrimaryExpression	\"SpatialPoolerNode\"
>2090	Identifier	nodeType
>2091	CompoundStatement	 
>2092	ExpressionStatement	 
>2093	AssignmentExpr	ns = TestNode 
>2094	CallExpression	TestNode 
>2095	ArgumentList	 
>2096	Callee	TestNode 
>2097	Identifier	TestNode 
>2098	Identifier	ns
>2099	Condition	 
>2100	EqualityExpression	nodeType == \"TestNode\"
>2101	PrimaryExpression	\"TestNode\"
>2102	Identifier	nodeType
>2103	IdentifierDeclStatement	 
>2104	IdentifierDecl	* ns = NULL
>2105	AssignmentExpr	* ns = NULL
>2106	Identifier	NULL
>2107	Identifier	NULL
>2108	Identifier	ns
>2109	IdentifierDeclType	Spec *
>2110	IfStatement	if ( it != nodespecCache_ . end ( ) )
>2111	ReturnStatement	 
>2112	PtrMemberAccess	it -> second
>2113	Identifier	second
>2114	Identifier	it
>2115	Condition	 
>2116	EqualityExpression	it != nodespecCache_ . end ( )
>2117	CallExpression	nodespecCache_ . end ( )
>2118	ArgumentList	 
>2119	Callee	nodespecCache_ . end
>2120	MemberAccess	nodespecCache_ . end
>2121	Identifier	end
>2122	Identifier	nodespecCache_
>2123	Identifier	it
>2124	ExpressionStatement	 
>2125	AssignmentExpr	it = nodespecCache_ . find ( nodeType )
>2126	CallExpression	nodespecCache_ . find ( nodeType )
>2127	ArgumentList	nodeType
>2128	Argument	nodeType
>2129	Identifier	nodeType
>2130	Callee	nodespecCache_ . find
>2131	MemberAccess	nodespecCache_ . find
>2132	Identifier	find
>2133	Identifier	nodespecCache_
>2134	Identifier	it
>2135	IdentifierDeclStatement	 
>2136	IdentifierDecl	it
>2137	Identifier	it
>2138	IdentifierDeclType	std 
>2165	FunctionDef	RegionImplFactory 
>2166	ParameterList	 
>2167	ReturnType	void
>2168	CompoundStatement	 
>2169	ExpressionStatement	 
>2170	CallExpression	nodespecCache_ . clear ( )
>2171	ArgumentList	 
>2172	Callee	nodespecCache_ . clear
>2173	MemberAccess	nodespecCache_ . clear
>2174	Identifier	clear
>2175	Identifier	nodespecCache_
>2176	ForStatement	for ( ns = nodespecCache_ . begin ( ) ; ns != nodespecCache_ . end ( ) ; ns ++ )
>2177	CompoundStatement	 
>2178	ExpressionStatement	 
>2179	AssignmentExpr	ns -> second = NULL
>2180	Identifier	NULL
>2181	PtrMemberAccess	ns -> second
>2182	Identifier	second
>2183	Identifier	ns
>2184	IfStatement	if ( ns -> first . substr ( 0 , 3 ) == \"py.\" )
>2185	ElseStatement	else
>2186	CompoundStatement	 
>2187	ExpressionStatement	 
>2188	PtrMemberAccess	ns -> second
>2189	Identifier	second
>2190	Identifier	ns
>2191	Statement	 
>2192	CompoundStatement	 
>2193	ExpressionStatement	 
>2194	CallExpression	pyLib_ -> destroySpec ( ns -> first )
>2195	ArgumentList	ns -> first
>2196	Argument	ns -> first
>2197	PtrMemberAccess	ns -> first
>2198	Identifier	first
>2199	Identifier	ns
>2200	Callee	pyLib_ -> destroySpec
>2201	PtrMemberAccess	pyLib_ -> destroySpec
>2202	Identifier	destroySpec
>2203	Identifier	pyLib_
>2204	Condition	 
>2205	EqualityExpression	ns -> first . substr ( 0 , 3 ) == \"py.\"
>2206	PrimaryExpression	\"py.\"
>2207	CallExpression	ns -> first . substr ( 0 , 3 )
>2208	ArgumentList	0
>2209	Argument	3
>2210	PrimaryExpression	3
>2211	Argument	0
>2212	PrimaryExpression	0
>2213	Callee	ns -> first . substr
>2214	MemberAccess	ns -> first . substr
>2215	Identifier	substr
>2216	PtrMemberAccess	ns -> first
>2217	Identifier	first
>2218	Identifier	ns
>2219	ExpressionStatement	 
>2220	CallExpression	assert ( ns -> second != NULL )
>2221	ArgumentList	ns -> second != NULL
>2222	Argument	ns -> second != NULL
>2223	EqualityExpression	ns -> second != NULL
>2224	Identifier	NULL
>2225	PtrMemberAccess	ns -> second
>2226	Identifier	second
>2227	Identifier	ns
>2228	Callee	assert
>2229	Identifier	assert
>2230	IncDecOp	 
>2231	IncDec	++
>2232	Identifier	ns
>2233	Condition	 
>2234	EqualityExpression	ns != nodespecCache_ . end ( )
>2235	CallExpression	nodespecCache_ . end ( )
>2236	ArgumentList	 
>2237	Callee	nodespecCache_ . end
>2238	MemberAccess	nodespecCache_ . end
>2239	Identifier	end
>2240	Identifier	nodespecCache_
>2241	Identifier	ns
>2242	ForInit	 
>2243	AssignmentExpr	ns = nodespecCache_ . begin ( )
>2244	CallExpression	nodespecCache_ . begin ( )
>2245	ArgumentList	 
>2246	Callee	nodespecCache_ . begin
>2247	MemberAccess	nodespecCache_ . begin
>2248	Identifier	begin
>2249	Identifier	nodespecCache_
>2250	Identifier	ns
>2251	IdentifierDeclStatement	 
>2252	IdentifierDecl	ns
>2253	Identifier	ns
>2254	IdentifierDeclType	std 
<8=10,9
<10=485,257,248,241,225,203,199,181,170,162,149,138,125,114,101,90,77,66,53,42,29,18,11
<11=12
<12=14,13
<14=15
<15=17,16
<18=19
<19=23,20
<20=22,21
<23=27,24
<24=25
<25=26
<27=28
<29=30
<30=41,31
<31=40,32
<32=36,33
<33=34
<34=35
<36=37
<37=39,38
<42=43
<43=47,44
<44=46,45
<47=51,48
<48=49
<49=50
<51=52
<53=54
<54=65,55
<55=64,56
<56=60,57
<57=58
<58=59
<60=61
<61=63,62
<66=67
<67=71,68
<68=70,69
<71=75,72
<72=73
<73=74
<75=76
<77=78
<78=89,79
<79=88,80
<80=84,81
<81=82
<82=83
<84=85
<85=87,86
<90=91
<91=95,92
<92=94,93
<95=99,96
<96=97
<97=98
<99=100
<101=102
<102=113,103
<103=112,104
<104=108,105
<105=106
<106=107
<108=109
<109=111,110
<114=115
<115=119,116
<116=118,117
<119=123,120
<120=121
<121=122
<123=124
<125=126
<126=137,127
<127=136,128
<128=132,129
<129=130
<130=131
<132=133
<133=135,134
<138=139
<139=143,140
<140=142,141
<143=147,144
<144=145
<145=146
<147=148
<149=150
<150=161,151
<151=160,152
<152=156,153
<153=154
<154=155
<156=157
<157=159,158
<162=163
<163=169,164
<164=168,165
<165=167,166
<170=171
<171=175,172
<172=174,173
<175=179,176
<176=177
<177=178
<179=180
<181=182
<182=198,197,183
<183=196,184
<184=194,185
<185=192,188,186
<186=187
<188=189
<189=191,190
<192=193
<194=195
<199=200
<200=202,201
<203=216,204
<204=205
<205=215,206
<206=214,207
<207=213,208
<208=212,209
<209=211,210
<216=217
<217=224,218
<218=222,219
<219=220
<220=221
<222=223
<225=226
<226=240,239,227
<227=238,228
<228=236,229
<229=234,232,230
<230=231
<232=233
<234=235
<236=237
<241=242
<242=247,246,243
<243=245,244
<248=253,249
<249=250
<250=252,251
<253=254
<254=256,255
<257=481,258
<258=477,466,456,452,445,438,426,422,408,390,386,284,259
<259=282,260
<260=261
<261=262
<262=281,263
<263=279,264
<264=265
<265=266
<266=277,267
<267=268
<268=269
<269=275,270
<270=273,271
<271=272
<273=274
<275=276
<277=278
<279=280
<282=283
<284=382,285
<285=366,355,334,326,320,304,286
<286=300,294,287
<287=288
<288=289
<289=293,290
<290=292,291
<294=295
<295=299,296
<296=298,297
<300=301
<301=303,302
<304=305
<305=319,318,306
<306=317,307
<307=313,308
<308=311,309
<309=310
<311=312
<313=314
<314=316,315
<320=322,321
<322=323
<323=325,324
<326=327
<327=333,328
<328=332,329
<329=331,330
<334=341,335
<335=337,336
<337=338
<338=340,339
<341=342
<342=349,343
<343=347,344
<344=345
<345=346
<347=348
<349=353,350
<350=351
<351=352
<353=354
<355=356
<356=365,357
<357=363,358
<358=361,359
<359=360
<361=362
<363=364
<366=367
<367=381,380,368
<368=379,369
<369=375,370
<370=373,371
<371=372
<373=374
<375=376
<376=378,377
<382=383
<383=385,384
<386=387
<387=389,388
<390=404,398,391
<391=392
<392=393
<393=397,394
<394=396,395
<398=399
<399=403,400
<400=402,401
<404=405
<405=407,406
<408=409
<409=421,420,410
<410=419,411
<411=415,412
<412=413
<413=414
<415=416
<416=418,417
<422=423
<423=425,424
<426=427
<427=437,436,428
<428=435,429
<429=431,430
<431=432
<432=434,433
<438=439
<439=444,443,440
<440=442,441
<445=446
<446=451,450,447
<447=449,448
<452=453
<453=455,454
<456=462,457
<457=458
<458=459
<459=461,460
<462=463
<463=465,464
<466=467
<467=476,468
<468=474,469
<469=472,470
<470=471
<472=473
<474=475
<477=478
<478=480,479
<481=482
<482=484,483
<485=486
<486=498,497,487
<487=496,488
<488=494,489
<489=492,490
<490=491
<492=493
<494=495
<542=544,543
<544=545
<545=551,546
<546=547
<547=549,548
<549=550
<551=552
<557=566,565,558
<558=562,559
<559=561,560
<562=564,563
<566=567
<567=568
<568=579,569
<569=572,570
<570=571
<572=573
<573=575,574
<575=576
<576=578,577
<579=580
<580=582,581
<591=597,596,592
<592=593
<593=595,594
<597=612,598
<598=599
<599=608,600
<600=601
<601=602
<602=604,603
<604=605
<605=607,606
<608=609
<609=611,610
<612=613
<613=619,614
<614=618,615
<615=617,616
<627=642,641,628
<628=638,635,632,629
<629=631,630
<632=634,633
<635=637,636
<638=640,639
<642=675,674,673,672,671,670,669,668,667,666,665,664,663,662,661,660,659,658,657,656,655,654,653,652,651,650,649,648,647,646,645,644,643
<683=698,697,684
<684=694,691,688,685
<685=687,686
<688=690,689
<691=693,692
<694=696,695
<698=731,730,729,728,727,726,725,724,723,722,721,720,719,718,717,716,715,714,713,712,711,710,709,708,707,706,705,704,703,702,701,700,699
<739=742,741,740
<742=743
<743=744
<765=768,767,766
<768=775,771,769
<769=770
<771=772
<772=774,773
<780=789,788,781
<781=785,782
<782=784,783
<785=787,786
<789=860,840,826,801,790
<790=791
<791=799,792
<792=797,795,793
<793=794
<795=796
<797=798
<799=800
<801=822,802
<802=803
<803=818,804
<804=809,807,805
<805=806
<807=808
<809=810
<810=814,811
<811=812
<812=813
<814=815
<815=817,816
<818=819
<819=821,820
<822=823
<823=825,824
<826=827
<827=839,838,828
<828=837,829
<829=833,830
<830=831
<831=832
<833=834
<834=836,835
<840=841
<841=856,842
<842=847,845,843
<843=844
<845=846
<847=848
<848=852,849
<849=850
<850=851
<852=853
<853=855,854
<856=857
<857=859,858
<860=861
<861=864,863,862
<875=890,889,876
<876=886,883,880,877
<877=879,878
<880=882,881
<883=885,884
<886=888,887
<890=908,893,891
<891=892
<893=894
<894=907,895
<895=906,896
<896=900,897
<897=899,898
<900=902,901
<902=903
<903=905,904
<908=1081,1077,1074,909
<909=1065,1032,987,976,969,947,943,942,941,940,939,938,936,910
<910=934,911
<911=925,924,915,914,912
<912=913
<915=916
<916=922,917
<917=918
<918=919
<919=921,920
<922=923
<925=926
<926=933,932,927
<927=931,928
<928=930,929
<934=935
<936=937
<943=945,944
<945=946
<947=948
<948=968,967,949
<949=966,950
<950=962,951
<951=960,958,956,952
<952=953
<953=955,954
<956=957
<958=959
<960=961
<962=963
<963=965,964
<969=970
<970=975,974,971
<971=973,972
<976=978,977
<978=979
<979=986,980
<980=984,981
<981=982
<982=983
<984=985
<987=988
<988=1031,1030,989
<989=1029,990
<990=1027,991
<991=1013,992
<992=993
<993=1000,994
<994=998,995
<995=996
<996=997
<998=999
<1000=1011,1001
<1001=1002
<1002=1003
<1003=1005,1004
<1005=1007,1006
<1007=1008
<1008=1010,1009
<1011=1012
<1013=1014
<1014=1025,1015
<1015=1018,1016
<1016=1017
<1018=1019
<1019=1021,1020
<1021=1022
<1022=1024,1023
<1025=1026
<1027=1028
<1032=1033
<1033=1064,1063,1034
<1034=1062,1035
<1035=1056,1036
<1036=1050,1037
<1037=1048,1038
<1038=1039
<1039=1040
<1040=1042,1041
<1042=1044,1043
<1044=1045
<1045=1047,1046
<1048=1049
<1050=1054,1051
<1051=1052
<1052=1053
<1054=1055
<1056=1060,1057
<1057=1058
<1058=1059
<1060=1061
<1065=1066
<1066=1073,1072,1067
<1067=1071,1068
<1068=1070,1069
<1074=1076,1075
<1077=1078
<1078=1080,1079
<1081=1082
<1082=1083
<1083=1088,1087,1084
<1084=1086,1085
<1118=1133,1132,1119
<1119=1129,1126,1123,1120
<1120=1122,1121
<1123=1125,1124
<1126=1128,1127
<1129=1131,1130
<1133=1151,1136,1134
<1134=1135
<1136=1137
<1137=1150,1138
<1138=1149,1139
<1139=1143,1140
<1140=1142,1141
<1143=1145,1144
<1145=1146
<1146=1148,1147
<1151=1326,1322,1319,1152
<1152=1310,1277,1232,1221,1214,1190,1186,1185,1184,1183,1182,1181,1179,1153
<1153=1177,1154
<1154=1168,1167,1158,1157,1155
<1155=1156
<1158=1159
<1159=1165,1160
<1160=1161
<1161=1162
<1162=1164,1163
<1165=1166
<1168=1169
<1169=1176,1175,1170
<1170=1174,1171
<1171=1173,1172
<1177=1178
<1179=1180
<1186=1188,1187
<1188=1189
<1190=1191
<1191=1213,1212,1192
<1192=1211,1193
<1193=1207,1194
<1194=1205,1201,1199,1195
<1195=1196
<1196=1198,1197
<1199=1200
<1201=1202
<1202=1204,1203
<1205=1206
<1207=1208
<1208=1210,1209
<1214=1215
<1215=1220,1219,1216
<1216=1218,1217
<1221=1223,1222
<1223=1224
<1224=1231,1225
<1225=1229,1226
<1226=1227
<1227=1228
<1229=1230
<1232=1233
<1233=1276,1275,1234
<1234=1274,1235
<1235=1272,1236
<1236=1258,1237
<1237=1238
<1238=1245,1239
<1239=1243,1240
<1240=1241
<1241=1242
<1243=1244
<1245=1256,1246
<1246=1247
<1247=1248
<1248=1250,1249
<1250=1252,1251
<1252=1253
<1253=1255,1254
<1256=1257
<1258=1259
<1259=1270,1260
<1260=1263,1261
<1261=1262
<1263=1264
<1264=1266,1265
<1266=1267
<1267=1269,1268
<1270=1271
<1272=1273
<1277=1278
<1278=1309,1308,1279
<1279=1307,1280
<1280=1301,1281
<1281=1295,1282
<1282=1293,1283
<1283=1284
<1284=1285
<1285=1287,1286
<1287=1289,1288
<1289=1290
<1290=1292,1291
<1293=1294
<1295=1299,1296
<1296=1297
<1297=1298
<1299=1300
<1301=1305,1302
<1302=1303
<1303=1304
<1305=1306
<1310=1311
<1311=1318,1317,1312
<1312=1316,1313
<1313=1315,1314
<1319=1321,1320
<1322=1323
<1323=1325,1324
<1326=1327
<1327=1328
<1328=1333,1332,1329
<1329=1331,1330
<1364=1376,1375,1365
<1365=1372,1369,1366
<1366=1368,1367
<1369=1371,1370
<1372=1374,1373
<1376=1549,1537,1507,1379,1377
<1377=1378
<1379=1503,1496,1380
<1380=1381
<1381=1492,1485,1382
<1382=1383
<1383=1481,1474,1384
<1384=1385
<1385=1470,1463,1386
<1386=1387
<1387=1459,1452,1388
<1388=1389
<1389=1436,1400,1390
<1390=1391
<1391=1392
<1392=1393
<1393=1399,1394
<1394=1398,1395
<1395=1397,1396
<1400=1423,1401
<1401=1402
<1402=1422,1403
<1403=1420,1404
<1404=1413,1411,1407,1405
<1405=1406
<1407=1408
<1408=1410,1409
<1411=1412
<1413=1414
<1414=1416,1415
<1416=1417
<1417=1419,1418
<1420=1421
<1423=1432,1424
<1424=1425
<1425=1431,1426
<1426=1430,1427
<1427=1429,1428
<1432=1433
<1433=1435,1434
<1436=1437
<1437=1439,1438
<1439=1448,1440
<1440=1441
<1441=1442
<1442=1446,1443
<1443=1444
<1444=1445
<1446=1447
<1448=1449
<1449=1451,1450
<1452=1453
<1453=1454
<1454=1458,1455
<1455=1457,1456
<1459=1460
<1460=1462,1461
<1463=1464
<1464=1465
<1465=1469,1466
<1466=1468,1467
<1470=1471
<1471=1473,1472
<1474=1475
<1475=1476
<1476=1480,1477
<1477=1479,1478
<1481=1482
<1482=1484,1483
<1485=1486
<1486=1487
<1487=1491,1488
<1488=1490,1489
<1492=1493
<1493=1495,1494
<1496=1497
<1497=1498
<1498=1502,1499
<1499=1501,1500
<1503=1504
<1504=1506,1505
<1507=1508
<1508=1536,1535,1509
<1509=1534,1510
<1510=1532,1511
<1511=1525,1521,1519,1512
<1512=1513
<1513=1515,1514
<1515=1516
<1516=1518,1517
<1519=1520
<1521=1522
<1522=1524,1523
<1525=1526
<1526=1528,1527
<1528=1529
<1529=1531,1530
<1532=1533
<1537=1538
<1538=1548,1547,1539
<1539=1546,1540
<1540=1544,1541
<1541=1542
<1542=1543
<1544=1545
<1549=1550
<1550=1555,1554,1551
<1551=1553,1552
<1581=1593,1592,1582
<1582=1589,1586,1583
<1583=1585,1584
<1586=1588,1587
<1589=1591,1590
<1593=1715,1596,1594
<1594=1595
<1596=1711,1704,1597
<1597=1598
<1598=1700,1693,1599
<1599=1600
<1600=1689,1682,1601
<1601=1602
<1602=1678,1671,1603
<1603=1604
<1604=1667,1660,1605
<1605=1606
<1606=1651,1617,1607
<1607=1608
<1608=1609
<1609=1610
<1610=1616,1611
<1611=1615,1612
<1612=1614,1613
<1617=1638,1618
<1618=1619
<1619=1637,1620
<1620=1635,1621
<1621=1628,1626,1624,1622
<1622=1623
<1624=1625
<1626=1627
<1628=1629
<1629=1631,1630
<1631=1632
<1632=1634,1633
<1635=1636
<1638=1647,1639
<1639=1640
<1640=1646,1641
<1641=1645,1642
<1642=1644,1643
<1647=1648
<1648=1650,1649
<1651=1652
<1652=1658,1653
<1653=1656,1654
<1654=1655
<1656=1657
<1658=1659
<1660=1661
<1661=1662
<1662=1666,1663
<1663=1665,1664
<1667=1668
<1668=1670,1669
<1671=1672
<1672=1673
<1673=1677,1674
<1674=1676,1675
<1678=1679
<1679=1681,1680
<1682=1683
<1683=1684
<1684=1688,1685
<1685=1687,1686
<1689=1690
<1690=1692,1691
<1693=1694
<1694=1695
<1695=1699,1696
<1696=1698,1697
<1700=1701
<1701=1703,1702
<1704=1705
<1705=1706
<1706=1710,1707
<1707=1709,1708
<1711=1712
<1712=1714,1713
<1715=1716
<1716=1721,1720,1717
<1717=1719,1718
<1736=1745,1744,1737
<1737=1741,1738
<1738=1740,1739
<1741=1743,1742
<1745=1754,1746
<1746=1747
<1747=1753,1748
<1748=1752,1749
<1749=1751,1750
<1754=1916,1912,1909,1755
<1755=1900,1867,1822,1811,1804,1786,1778,1756
<1756=1776,1757
<1757=1767,1766,1764,1758
<1758=1759
<1759=1763,1760
<1760=1762,1761
<1764=1765
<1767=1768
<1768=1775,1774,1769
<1769=1773,1770
<1770=1772,1771
<1776=1777
<1778=1784,1779
<1779=1780
<1780=1781
<1781=1783,1782
<1784=1785
<1786=1787
<1787=1803,1802,1788
<1788=1801,1789
<1789=1797,1790
<1790=1795,1791
<1791=1792
<1792=1794,1793
<1795=1796
<1797=1798
<1798=1800,1799
<1804=1805
<1805=1810,1809,1806
<1806=1808,1807
<1811=1813,1812
<1813=1814
<1814=1821,1815
<1815=1819,1816
<1816=1817
<1817=1818
<1819=1820
<1822=1823
<1823=1866,1865,1824
<1824=1864,1825
<1825=1862,1826
<1826=1848,1827
<1827=1828
<1828=1835,1829
<1829=1833,1830
<1830=1831
<1831=1832
<1833=1834
<1835=1846,1836
<1836=1837
<1837=1838
<1838=1840,1839
<1840=1842,1841
<1842=1843
<1843=1845,1844
<1846=1847
<1848=1849
<1849=1860,1850
<1850=1853,1851
<1851=1852
<1853=1854
<1854=1856,1855
<1856=1857
<1857=1859,1858
<1860=1861
<1862=1863
<1867=1868
<1868=1899,1898,1869
<1869=1897,1870
<1870=1891,1871
<1871=1885,1872
<1872=1883,1873
<1873=1874
<1874=1875
<1875=1877,1876
<1877=1879,1878
<1879=1880
<1880=1882,1881
<1883=1884
<1885=1889,1886
<1886=1887
<1887=1888
<1889=1890
<1891=1895,1892
<1892=1893
<1893=1894
<1895=1896
<1900=1901
<1901=1908,1907,1902
<1902=1906,1903
<1903=1905,1904
<1909=1911,1910
<1912=1913
<1913=1915,1914
<1916=1917
<1917=1918
<1918=1923,1922,1919
<1919=1921,1920
<1950=1956,1955,1951
<1951=1952
<1952=1954,1953
<1956=2135,2124,2110,2103,1976,1965,1959,1957
<1957=1958
<1959=1960
<1960=1962,1961
<1962=1964,1963
<1965=1972,1966
<1966=1967
<1967=1971,1968
<1968=1970,1969
<1972=1973
<1973=1975,1974
<1976=2099,2091,1977
<1977=1978
<1978=2087,2079,1979
<1979=1980
<1980=2075,2067,1981
<1981=1982
<1982=2063,2055,1983
<1983=1984
<1984=2051,2043,1985
<1985=1986
<1986=2027,1997,1987
<1987=1988
<1988=1989
<1989=1990
<1990=1996,1991
<1991=1995,1992
<1992=1994,1993
<1997=2014,1998
<1998=1999
<1999=2013,2000
<2000=2011,2001
<2001=2004,2002
<2002=2003
<2004=2005
<2005=2007,2006
<2007=2008
<2008=2010,2009
<2011=2012
<2014=2023,2015
<2015=2016
<2016=2022,2017
<2017=2021,2018
<2018=2020,2019
<2023=2024
<2024=2026,2025
<2027=2028
<2028=2030,2029
<2030=2039,2031
<2031=2032
<2032=2033
<2033=2037,2034
<2034=2035
<2035=2036
<2037=2038
<2039=2040
<2040=2042,2041
<2043=2044
<2044=2045
<2045=2050,2046
<2046=2048,2047
<2048=2049
<2051=2052
<2052=2054,2053
<2055=2056
<2056=2057
<2057=2062,2058
<2058=2060,2059
<2060=2061
<2063=2064
<2064=2066,2065
<2067=2068
<2068=2069
<2069=2074,2070
<2070=2072,2071
<2072=2073
<2075=2076
<2076=2078,2077
<2079=2080
<2080=2081
<2081=2086,2082
<2082=2084,2083
<2084=2085
<2087=2088
<2088=2090,2089
<2091=2092
<2092=2093
<2093=2098,2094
<2094=2096,2095
<2096=2097
<2099=2100
<2100=2102,2101
<2103=2104
<2104=2109,2108,2105
<2105=2107,2106
<2110=2115,2111
<2111=2112
<2112=2114,2113
<2115=2116
<2116=2123,2117
<2117=2119,2118
<2119=2120
<2120=2122,2121
<2124=2125
<2125=2134,2126
<2126=2130,2127
<2127=2128
<2128=2129
<2130=2131
<2131=2133,2132
<2135=2136
<2136=2138,2137
<2165=2168,2167,2166
<2168=2251,2176,2169
<2169=2170
<2170=2172,2171
<2172=2173
<2173=2175,2174
<2176=2242,2233,2230,2177
<2177=2219,2184,2178
<2178=2179
<2179=2181,2180
<2181=2183,2182
<2184=2204,2192,2185
<2185=2186
<2186=2191,2187
<2187=2188
<2188=2190,2189
<2192=2193
<2193=2194
<2194=2200,2195
<2195=2196
<2196=2197
<2197=2199,2198
<2200=2201
<2201=2203,2202
<2204=2205
<2205=2207,2206
<2207=2213,2208
<2208=2211,2209
<2209=2210
<2211=2212
<2213=2214
<2214=2216,2215
<2216=2218,2217
<2219=2220
<2220=2228,2221
<2221=2222
<2222=2223
<2223=2225,2224
<2225=2227,2226
<2228=2229
<2230=2232,2231
<2233=2234
<2234=2241,2235
<2235=2237,2236
<2237=2238
<2238=2240,2239
<2242=2243
<2243=2250,2244
<2244=2246,2245
<2246=2247
<2247=2249,2248
<2251=2252
<2252=2254,2253
