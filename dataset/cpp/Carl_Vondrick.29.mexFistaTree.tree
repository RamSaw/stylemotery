>3	FunctionDef	callFunction (mxArray * plhs [ ] , const mxArray * prhs [ ] , const long nlhs)
>4	ParameterList	mxArray * plhs [ ] , const mxArray * prhs [ ] , const long nlhs
>5	Parameter	 
>6	Identifier	nlhs
>7	ParameterType	const long
>8	Parameter	 
>9	Identifier	prhs
>10	ParameterType	const mxArray * [ ]
>11	Parameter	 
>12	Identifier	plhs
>13	ParameterType	mxArray * [ ]
>14	ReturnType	inline void
>15	CompoundStatement	 
>16	ExpressionStatement	 
>17	Identifier	D
>18	Statement	 
>19	IfStatement	if ( mxIsSparse ( prhs [ 1 ] ) )
>20	CompoundStatement	 
>21	ExpressionStatement	 
>22	RelationalExpression	deleteCopySparse < T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r )
>23	RelationalExpression	T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r )
>24	Expression	D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r
>25	Expression	D_r2 , D_pB2 , D_pE2 , D_v , D_r
>26	Expression	D_pB2 , D_pE2 , D_v , D_r
>27	Expression	D_pE2 , D_v , D_r
>28	Expression	D_v , D_r
>29	Identifier	D_r
>30	Identifier	D_v
>31	Identifier	D_pE2
>32	Identifier	D_pB2
>33	Identifier	D_r2
>34	Identifier	D_v2
>35	Identifier	T
>36	Identifier	deleteCopySparse
>37	Condition	 
>38	CallExpression	mxIsSparse ( prhs [ 1 ] )
>39	ArgumentList	prhs [ 1 ]
>40	Argument	prhs [ 1 ]
>41	ArrayIndexing	prhs [ 1 ]
>42	PrimaryExpression	1
>43	Identifier	prhs
>44	Callee	mxIsSparse
>45	Identifier	mxIsSparse
>46	ExpressionStatement	 
>47	MemberAccess	param . logName
>48	Identifier	logName
>49	Identifier	param
>50	Statement	 
>51	Statement	 
>52	IfStatement	if ( param . logName )
>53	Statement	 
>54	Condition	 
>55	MemberAccess	param . logName
>56	Identifier	logName
>57	Identifier	param
>58	IfStatement	if ( nlhs == 2 )
>59	CompoundStatement	 
>60	ForStatement	for ( long i = 0 ; i < duality_gap . n ( ) * duality_gap . m ( ) ; ++ i )
>61	ExpressionStatement	 
>62	AssignmentExpr	pr_dualitygap [ i ] = duality_gap [ i ]
>63	ArrayIndexing	duality_gap [ i ]
>64	Identifier	i
>65	Identifier	duality_gap
>66	ArrayIndexing	pr_dualitygap [ i ]
>67	Identifier	i
>68	Identifier	pr_dualitygap
>69	UnaryExpression	 
>70	Identifier	i
>71	IncDec	++
>72	Condition	 
>73	RelationalExpression	i < duality_gap . n ( ) * duality_gap . m ( )
>74	MultiplicativeExpression	duality_gap . n ( ) * duality_gap . m ( )
>75	CallExpression	duality_gap . m ( )
>76	ArgumentList	 
>77	Callee	duality_gap . m
>78	MemberAccess	duality_gap . m
>79	Identifier	m
>80	Identifier	duality_gap
>81	CallExpression	duality_gap . n ( )
>82	ArgumentList	 
>83	Callee	duality_gap . n
>84	MemberAccess	duality_gap . n
>85	Identifier	n
>86	Identifier	duality_gap
>87	Identifier	i
>88	ForInit	 
>89	IdentifierDeclStatement	long i = 0 ;
>90	IdentifierDecl	i = 0
>91	AssignmentExpr	i = 0
>92	PrimaryExpression	0
>93	Identifier	i
>94	Identifier	i
>95	IdentifierDeclType	long
>96	ExpressionStatement	 
>97	CallExpression	mxGetPr ( plhs [ 1 ] )
>98	ArgumentList	plhs [ 1 ]
>99	Argument	plhs [ 1 ]
>100	ArrayIndexing	plhs [ 1 ]
>101	PrimaryExpression	1
>102	Identifier	plhs
>103	Callee	mxGetPr
>104	Identifier	mxGetPr
>105	Statement	 
>106	Statement	 
>107	Statement	 
>108	Statement	 
>109	Statement	 
>110	Statement	 
>111	Statement	 
>112	Statement	 
>113	Statement	 
>114	ExpressionStatement	 
>115	AssignmentExpr	plhs [ 1 ] = createMatrix < T > ( duality_gap . m ( ) , duality_gap . n ( ) )
>116	RelationalExpression	createMatrix < T > ( duality_gap . m ( ) , duality_gap . n ( ) )
>117	RelationalExpression	T > ( duality_gap . m ( ) , duality_gap . n ( ) )
>118	Expression	duality_gap . m ( ) , duality_gap . n ( )
>119	CallExpression	duality_gap . n ( )
>120	ArgumentList	 
>121	Callee	duality_gap . n
>122	MemberAccess	duality_gap . n
>123	Identifier	n
>124	Identifier	duality_gap
>125	CallExpression	duality_gap . m ( )
>126	ArgumentList	 
>127	Callee	duality_gap . m
>128	MemberAccess	duality_gap . m
>129	Identifier	m
>130	Identifier	duality_gap
>131	Identifier	T
>132	Identifier	createMatrix
>133	ArrayIndexing	plhs [ 1 ]
>134	PrimaryExpression	1
>135	Identifier	plhs
>136	Condition	 
>137	EqualityExpression	nlhs == 2
>138	PrimaryExpression	2
>139	Identifier	nlhs
>140	ExpressionStatement	 
>141	RelationalExpression	FISTA 
>142	RelationalExpression	T > ( X , * D , alpha0 , alpha , param , duality_gap , NULL , & tree )
>143	Expression	X , * D , alpha0 , alpha , param , duality_gap , NULL , & tree
>144	Expression	* D , alpha0 , alpha , param , duality_gap , NULL , & tree
>145	Expression	alpha0 , alpha , param , duality_gap , NULL , & tree
>146	Expression	alpha , param , duality_gap , NULL , & tree
>147	Expression	param , duality_gap , NULL , & tree
>148	Expression	duality_gap , NULL , & tree
>149	Expression	NULL , & tree
>150	UnaryOp	& tree
>151	Identifier	tree
>152	UnaryOperator	&
>153	Identifier	NULL
>154	Identifier	duality_gap
>155	Identifier	param
>156	Identifier	alpha
>157	Identifier	alpha0
>158	UnaryOp	* D
>159	Identifier	D
>160	UnaryOperator	*
>161	Identifier	X
>162	Identifier	T
>163	Identifier	FISTA 
>164	IdentifierDeclStatement	 
>165	IdentifierDecl	duality_gap
>166	Identifier	duality_gap
>167	IdentifierDeclType	Matrix < T >
>168	ExpressionStatement	 
>169	AssignmentExpr	tree . groups_jc = pr_groups_jc
>170	Identifier	pr_groups_jc
>171	MemberAccess	tree . groups_jc
>172	Identifier	groups_jc
>173	Identifier	tree
>174	ExpressionStatement	 
>175	AssignmentExpr	tree . groups_ir = pr_groups_ir
>176	Identifier	pr_groups_ir
>177	MemberAccess	tree . groups_ir
>178	Identifier	groups_ir
>179	Identifier	tree
>180	ExpressionStatement	 
>181	AssignmentExpr	tree . N_own_variables = pr_N_own_variables
>182	Identifier	pr_N_own_variables
>183	MemberAccess	tree . N_own_variables
>184	Identifier	N_own_variables
>185	Identifier	tree
>186	ExpressionStatement	 
>187	AssignmentExpr	tree . own_variables = pr_own_variables
>188	Identifier	pr_own_variables
>189	MemberAccess	tree . own_variables
>190	Identifier	own_variables
>191	Identifier	tree
>192	ExpressionStatement	 
>193	AssignmentExpr	tree . weights = pr_lambda_g
>194	Identifier	pr_lambda_g
>195	MemberAccess	tree . weights
>196	Identifier	weights
>197	Identifier	tree
>198	ExpressionStatement	 
>199	AssignmentExpr	tree . Ng = num_groups
>200	Identifier	num_groups
>201	MemberAccess	tree . Ng
>202	Identifier	Ng
>203	Identifier	tree
>204	ForStatement	for ( long i = 0 ; i < num_groups ; ++ i )
>205	ExpressionStatement	 
>206	AssignmentExpr	tree . Nv += pr_N_own_variables [ i ]
>207	ArrayIndexing	pr_N_own_variables [ i ]
>208	Identifier	i
>209	Identifier	pr_N_own_variables
>210	MemberAccess	tree . Nv
>211	Identifier	Nv
>212	Identifier	tree
>213	UnaryExpression	 
>214	Identifier	i
>215	IncDec	++
>216	Condition	 
>217	RelationalExpression	i < num_groups
>218	Identifier	num_groups
>219	Identifier	i
>220	ForInit	 
>221	IdentifierDeclStatement	long i = 0 ;
>222	IdentifierDecl	i = 0
>223	AssignmentExpr	i = 0
>224	PrimaryExpression	0
>225	Identifier	i
>226	Identifier	i
>227	IdentifierDeclType	long
>228	ExpressionStatement	 
>229	AssignmentExpr	tree . Nv = 0
>230	PrimaryExpression	0
>231	MemberAccess	tree . Nv
>232	Identifier	Nv
>233	Identifier	tree
>234	IdentifierDeclStatement	 
>235	IdentifierDecl	tree
>236	Identifier	tree
>237	IdentifierDeclType	TreeStruct < T >
>238	IfStatement	if ( param . num_threads == - 1 )
>239	CompoundStatement	 
>240	ExpressionStatement	 
>241	AssignmentExpr	param . num_threads = MIN ( MAX_THREADS , omp_get_num_procs ( ) )
>242	CallExpression	MIN ( MAX_THREADS , omp_get_num_procs ( ) )
>243	ArgumentList	MAX_THREADS
>244	Argument	omp_get_num_procs ( )
>245	CallExpression	omp_get_num_procs ( )
>246	ArgumentList	 
>247	Callee	omp_get_num_procs
>248	Identifier	omp_get_num_procs
>249	Argument	MAX_THREADS
>250	Identifier	MAX_THREADS
>251	Callee	MIN
>252	Identifier	MIN
>253	MemberAccess	param . num_threads
>254	Identifier	num_threads
>255	Identifier	param
>256	ExpressionStatement	 
>257	AssignmentExpr	param . num_threads = 1
>258	PrimaryExpression	1
>259	MemberAccess	param . num_threads
>260	Identifier	num_threads
>261	Identifier	param
>262	Condition	 
>263	EqualityExpression	param . num_threads == - 1
>264	UnaryOp	- 1
>265	PrimaryExpression	1
>266	UnaryOperator	-
>267	MemberAccess	param . num_threads
>268	Identifier	num_threads
>269	Identifier	param
>270	IfStatement	if ( param . regul == TREEMULT && abs < T > ( param . lambda2 - 0 ) < 1e-20 )
>271	CompoundStatement	 
>272	ExpressionStatement	 
>273	CallExpression	mexErrMsgTxt ( \"Error
>274	ArgumentList	\"Error
>275	Argument	\"Error
>276	PrimaryExpression	\"Error
>277	Callee	mexErrMsgTxt
>278	Identifier	mexErrMsgTxt
>279	Condition	 
>280	AndExpression	param . regul == TREEMULT && abs < T > ( param . lambda2 - 0 ) < 1e-20
>281	RelationalExpression	abs < T > ( param . lambda2 - 0 ) < 1e-20
>282	RelationalExpression	T > ( param . lambda2 - 0 ) < 1e-20
>283	RelationalExpression	( param . lambda2 - 0 ) < 1e-20
>284	PrimaryExpression	1e-20
>285	AdditiveExpression	param . lambda2 - 0
>286	PrimaryExpression	0
>287	MemberAccess	param . lambda2
>288	Identifier	lambda2
>289	Identifier	param
>290	Identifier	T
>291	Identifier	abs
>292	EqualityExpression	param . regul == TREEMULT
>293	Identifier	TREEMULT
>294	MemberAccess	param . regul
>295	Identifier	regul
>296	Identifier	param
>297	IfStatement	if ( param . regul == GRAPH || param . regul == GRAPHMULT )
>298	ExpressionStatement	 
>299	CallExpression	mexErrMsgTxt ( \"Error
>300	ArgumentList	\"Error
>301	Argument	\"Error
>302	PrimaryExpression	\"Error
>303	Callee	mexErrMsgTxt
>304	Identifier	mexErrMsgTxt
>305	Condition	 
>306	OrExpression	param . regul == GRAPH || param . regul == GRAPHMULT
>307	EqualityExpression	param . regul == GRAPHMULT
>308	Identifier	GRAPHMULT
>309	MemberAccess	param . regul
>310	Identifier	regul
>311	Identifier	param
>312	EqualityExpression	param . regul == GRAPH
>313	Identifier	GRAPH
>314	MemberAccess	param . regul
>315	Identifier	regul
>316	Identifier	param
>317	IfStatement	if ( ( param . loss != CUR && param . loss != MULTILOG ) && ( pAlpha != p || nAlpha != n || mD != m ) )
>318	ElseStatement	else
>319	IfStatement	if ( param . loss == MULTILOG )
>320	ElseStatement	else
>321	IfStatement	if ( param . loss == CUR && ( pAlpha != D -> n ( ) || nAlpha != D -> m ( ) ) )
>322	CompoundStatement	 
>323	ExpressionStatement	 
>324	CallExpression	mexErrMsgTxt ( \"Argument sizes are not consistent\" )
>325	ArgumentList	\"Argument sizes are not consistent\"
>326	Argument	\"Argument sizes are not consistent\"
>327	PrimaryExpression	\"Argument sizes are not consistent\"
>328	Callee	mexErrMsgTxt
>329	Identifier	mexErrMsgTxt
>330	Condition	 
>331	AndExpression	param . loss == CUR && ( pAlpha != D -> n ( ) || nAlpha != D -> m ( ) )
>332	OrExpression	pAlpha != D -> n ( ) || nAlpha != D -> m ( )
>333	EqualityExpression	nAlpha != D -> m ( )
>334	CallExpression	D -> m ( )
>335	ArgumentList	 
>336	Callee	D -> m
>337	PtrMemberAccess	D -> m
>338	Identifier	m
>339	Identifier	D
>340	Identifier	nAlpha
>341	EqualityExpression	pAlpha != D -> n ( )
>342	CallExpression	D -> n ( )
>343	ArgumentList	 
>344	Callee	D -> n
>345	PtrMemberAccess	D -> n
>346	Identifier	n
>347	Identifier	D
>348	Identifier	pAlpha
>349	EqualityExpression	param . loss == CUR
>350	Identifier	CUR
>351	MemberAccess	param . loss
>352	Identifier	loss
>353	Identifier	param
>354	CompoundStatement	 
>355	IfStatement	if ( maxval * X . n ( ) > nAlpha || mD != m )
>356	CompoundStatement	 
>357	ExpressionStatement	 
>358	CallExpression	mexErrMsgTxt ( \"Argument sizes are not consistent\" )
>359	ArgumentList	\"Argument sizes are not consistent\"
>360	Argument	\"Argument sizes are not consistent\"
>361	PrimaryExpression	\"Argument sizes are not consistent\"
>362	Callee	mexErrMsgTxt
>363	Identifier	mexErrMsgTxt
>364	ExpressionStatement	 
>365	ShiftExpression	cerr << \"Number of classes
>366	ShiftExpression	\"Number of classes
>367	ShiftExpression	maxval << endl
>368	Identifier	endl
>369	Identifier	maxval
>370	PrimaryExpression	\"Number of classes
>371	Identifier	cerr
>372	Condition	 
>373	OrExpression	maxval * X . n ( ) > nAlpha || mD != m
>374	EqualityExpression	mD != m
>375	Identifier	m
>376	Identifier	mD
>377	RelationalExpression	maxval * X . n ( ) > nAlpha
>378	Identifier	nAlpha
>379	MultiplicativeExpression	maxval * X . n ( )
>380	CallExpression	X . n ( )
>381	ArgumentList	 
>382	Callee	X . n
>383	MemberAccess	X . n
>384	Identifier	n
>385	Identifier	X
>386	Identifier	maxval
>387	IfStatement	if ( minval != 0 )
>388	ExpressionStatement	 
>389	CallExpression	mexErrMsgTxt ( \"smallest class should be 0\" )
>390	ArgumentList	\"smallest class should be 0\"
>391	Argument	\"smallest class should be 0\"
>392	PrimaryExpression	\"smallest class should be 0\"
>393	Callee	mexErrMsgTxt
>394	Identifier	mexErrMsgTxt
>395	Condition	 
>396	EqualityExpression	minval != 0
>397	PrimaryExpression	0
>398	Identifier	minval
>399	ExpressionStatement	 
>400	CallExpression	Xv . minval ( )
>401	ArgumentList	 
>402	Callee	Xv . minval
>403	MemberAccess	Xv . minval
>404	Identifier	minval
>405	Identifier	Xv
>406	Statement	 
>407	Statement	 
>408	Statement	 
>409	Statement	 
>410	Statement	 
>411	Statement	 
>412	Statement	 
>413	ExpressionStatement	 
>414	CallExpression	Xv . maxval ( )
>415	ArgumentList	 
>416	Callee	Xv . maxval
>417	MemberAccess	Xv . maxval
>418	Identifier	maxval
>419	Identifier	Xv
>420	Statement	 
>421	Statement	 
>422	Statement	 
>423	Statement	 
>424	Statement	 
>425	Statement	 
>426	Statement	 
>427	ExpressionStatement	 
>428	CallExpression	X . toVect ( Xv )
>429	ArgumentList	Xv
>430	Argument	Xv
>431	Identifier	Xv
>432	Callee	X . toVect
>433	MemberAccess	X . toVect
>434	Identifier	toVect
>435	Identifier	X
>436	IdentifierDeclStatement	 
>437	IdentifierDecl	Xv
>438	Identifier	Xv
>439	IdentifierDeclType	Vector < T >
>440	Condition	 
>441	EqualityExpression	param . loss == MULTILOG
>442	Identifier	MULTILOG
>443	MemberAccess	param . loss
>444	Identifier	loss
>445	Identifier	param
>446	CompoundStatement	 
>447	ExpressionStatement	 
>448	CallExpression	mexErrMsgTxt ( \"Argument sizes are not consistent\" )
>449	ArgumentList	\"Argument sizes are not consistent\"
>450	Argument	\"Argument sizes are not consistent\"
>451	PrimaryExpression	\"Argument sizes are not consistent\"
>452	Callee	mexErrMsgTxt
>453	Identifier	mexErrMsgTxt
>454	Condition	 
>455	AndExpression	( param . loss != CUR && param . loss != MULTILOG ) && ( pAlpha != p || nAlpha != n || mD != m )
>456	OrExpression	pAlpha != p || nAlpha != n || mD != m
>457	OrExpression	nAlpha != n || mD != m
>458	EqualityExpression	mD != m
>459	Identifier	m
>460	Identifier	mD
>461	EqualityExpression	nAlpha != n
>462	Identifier	n
>463	Identifier	nAlpha
>464	EqualityExpression	pAlpha != p
>465	Identifier	p
>466	Identifier	pAlpha
>467	AndExpression	param . loss != CUR && param . loss != MULTILOG
>468	EqualityExpression	param . loss != MULTILOG
>469	Identifier	MULTILOG
>470	MemberAccess	param . loss
>471	Identifier	loss
>472	Identifier	param
>473	EqualityExpression	param . loss != CUR
>474	Identifier	CUR
>475	MemberAccess	param . loss
>476	Identifier	loss
>477	Identifier	param
>478	IfStatement	if ( param . log )
>479	CompoundStatement	 
>480	ExpressionStatement	 
>481	CallExpression	mxGetString ( stringData , param . logName , stringLength )
>482	ArgumentList	stringData
>483	Argument	stringLength
>484	Identifier	stringLength
>485	Argument	param . logName
>486	MemberAccess	param . logName
>487	Identifier	logName
>488	Identifier	param
>489	Argument	stringData
>490	Identifier	stringData
>491	Callee	mxGetString
>492	Identifier	mxGetString
>493	ExpressionStatement	 
>494	AssignmentExpr	param . logName = new char [ stringLength ]
>495	Identifier	stringLength
>496	MemberAccess	param . logName
>497	Identifier	logName
>498	Identifier	param
>499	IdentifierDeclStatement	 
>500	IdentifierDecl	stringLength = mxGetN ( stringData ) + 1
>501	AssignmentExpr	stringLength = mxGetN ( stringData ) + 1
>502	AdditiveExpression	mxGetN ( stringData ) + 1
>503	PrimaryExpression	1
>504	CallExpression	mxGetN ( stringData )
>505	ArgumentList	stringData
>506	Argument	stringData
>507	Identifier	stringData
>508	Callee	mxGetN
>509	Identifier	mxGetN
>510	Identifier	stringLength
>511	Identifier	stringLength
>512	IdentifierDeclType	long
>513	IfStatement	if ( ! stringData )
>514	ExpressionStatement	 
>515	CallExpression	mexErrMsgTxt ( \"Missing field logName\" )
>516	ArgumentList	\"Missing field logName\"
>517	Argument	\"Missing field logName\"
>518	PrimaryExpression	\"Missing field logName\"
>519	Callee	mexErrMsgTxt
>520	Identifier	mexErrMsgTxt
>521	Condition	 
>522	UnaryOp	! stringData
>523	Identifier	stringData
>524	UnaryOperator	!
>525	IdentifierDeclStatement	 
>526	IdentifierDecl	* stringData = mxGetField ( prhs [ 4 ] , 0 , \"logName\" )
>527	AssignmentExpr	* stringData = mxGetField ( prhs [ 4 ] , 0 , \"logName\" )
>528	CallExpression	mxGetField ( prhs [ 4 ] , 0 , \"logName\" )
>529	ArgumentList	prhs [ 4 ]
>530	Argument	\"logName\"
>531	PrimaryExpression	\"logName\"
>532	Argument	0
>533	PrimaryExpression	0
>534	Argument	prhs [ 4 ]
>535	ArrayIndexing	prhs [ 4 ]
>536	PrimaryExpression	4
>537	Identifier	prhs
>538	Callee	mxGetField
>539	Identifier	mxGetField
>540	Identifier	stringData
>541	Identifier	stringData
>542	IdentifierDeclType	mxArray *
>543	Condition	 
>544	MemberAccess	param . log
>545	Identifier	log
>546	Identifier	param
>547	ExpressionStatement	 
>548	AssignmentExpr	param . b = getScalarStructDef < T > ( prhs [ 4 ] , \"b\" , 0 )
>549	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"b\" , 0 )
>550	RelationalExpression	T > ( prhs [ 4 ] , \"b\" , 0 )
>551	Expression	prhs [ 4 ] , \"b\" , 0
>552	Expression	\"b\" , 0
>553	PrimaryExpression	0
>554	PrimaryExpression	\"b\"
>555	ArrayIndexing	prhs [ 4 ]
>556	PrimaryExpression	4
>557	Identifier	prhs
>558	Identifier	T
>559	Identifier	getScalarStructDef
>560	MemberAccess	param . b
>561	Identifier	b
>562	Identifier	param
>563	ExpressionStatement	 
>564	AssignmentExpr	param . a = getScalarStructDef < T > ( prhs [ 4 ] , \"a\" , T ( 1.0 ) )
>565	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"a\" , T ( 1.0 ) )
>566	RelationalExpression	T > ( prhs [ 4 ] , \"a\" , T ( 1.0 ) )
>567	Expression	prhs [ 4 ] , \"a\" , T ( 1.0 )
>568	Expression	\"a\" , T ( 1.0 )
>569	CallExpression	T ( 1.0 )
>570	ArgumentList	1.0
>571	Argument	1.0
>572	PrimaryExpression	1.0
>573	Callee	T
>574	Identifier	T
>575	PrimaryExpression	\"a\"
>576	ArrayIndexing	prhs [ 4 ]
>577	PrimaryExpression	4
>578	Identifier	prhs
>579	Identifier	T
>580	Identifier	getScalarStructDef
>581	MemberAccess	param . a
>582	Identifier	a
>583	Identifier	param
>584	ExpressionStatement	 
>585	AssignmentExpr	param . log = getScalarStructDef < bool > ( prhs [ 4 ] , \"log\" , false )
>586	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"log\" , false )
>587	RelationalExpression	bool > ( prhs [ 4 ] , \"log\" , false )
>588	Expression	prhs [ 4 ] , \"log\" , false
>589	Expression	\"log\" , false
>590	Identifier	false
>591	PrimaryExpression	\"log\"
>592	ArrayIndexing	prhs [ 4 ]
>593	PrimaryExpression	4
>594	Identifier	prhs
>595	Identifier	bool
>596	Identifier	getScalarStructDef
>597	MemberAccess	param . log
>598	Identifier	log
>599	Identifier	param
>600	ExpressionStatement	 
>601	AssignmentExpr	param . subgrad = getScalarStructDef < bool > ( prhs [ 4 ] , \"subgrad\" , false )
>602	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"subgrad\" , false )
>603	RelationalExpression	bool > ( prhs [ 4 ] , \"subgrad\" , false )
>604	Expression	prhs [ 4 ] , \"subgrad\" , false
>605	Expression	\"subgrad\" , false
>606	Identifier	false
>607	PrimaryExpression	\"subgrad\"
>608	ArrayIndexing	prhs [ 4 ]
>609	PrimaryExpression	4
>610	Identifier	prhs
>611	Identifier	bool
>612	Identifier	getScalarStructDef
>613	MemberAccess	param . subgrad
>614	Identifier	subgrad
>615	Identifier	param
>616	ExpressionStatement	 
>617	AssignmentExpr	param . ista = getScalarStructDef < bool > ( prhs [ 4 ] , \"ista\" , false )
>618	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"ista\" , false )
>619	RelationalExpression	bool > ( prhs [ 4 ] , \"ista\" , false )
>620	Expression	prhs [ 4 ] , \"ista\" , false
>621	Expression	\"ista\" , false
>622	Identifier	false
>623	PrimaryExpression	\"ista\"
>624	ArrayIndexing	prhs [ 4 ]
>625	PrimaryExpression	4
>626	Identifier	prhs
>627	Identifier	bool
>628	Identifier	getScalarStructDef
>629	MemberAccess	param . ista
>630	Identifier	ista
>631	Identifier	param
>632	ExpressionStatement	 
>633	AssignmentExpr	param . clever = getScalarStructDef < bool > ( prhs [ 4 ] , \"clever\" , false )
>634	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"clever\" , false )
>635	RelationalExpression	bool > ( prhs [ 4 ] , \"clever\" , false )
>636	Expression	prhs [ 4 ] , \"clever\" , false
>637	Expression	\"clever\" , false
>638	Identifier	false
>639	PrimaryExpression	\"clever\"
>640	ArrayIndexing	prhs [ 4 ]
>641	PrimaryExpression	4
>642	Identifier	prhs
>643	Identifier	bool
>644	Identifier	getScalarStructDef
>645	MemberAccess	param . clever
>646	Identifier	clever
>647	Identifier	param
>648	ExpressionStatement	 
>649	AssignmentExpr	param . verbose = getScalarStructDef < bool > ( prhs [ 4 ] , \"verbose\" , false )
>650	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"verbose\" , false )
>651	RelationalExpression	bool > ( prhs [ 4 ] , \"verbose\" , false )
>652	Expression	prhs [ 4 ] , \"verbose\" , false
>653	Expression	\"verbose\" , false
>654	Identifier	false
>655	PrimaryExpression	\"verbose\"
>656	ArrayIndexing	prhs [ 4 ]
>657	PrimaryExpression	4
>658	Identifier	prhs
>659	Identifier	bool
>660	Identifier	getScalarStructDef
>661	MemberAccess	param . verbose
>662	Identifier	verbose
>663	Identifier	param
>664	ExpressionStatement	 
>665	AssignmentExpr	param . resetflow = getScalarStructDef < bool > ( prhs [ 4 ] , \"resetflow\" , false )
>666	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"resetflow\" , false )
>667	RelationalExpression	bool > ( prhs [ 4 ] , \"resetflow\" , false )
>668	Expression	prhs [ 4 ] , \"resetflow\" , false
>669	Expression	\"resetflow\" , false
>670	Identifier	false
>671	PrimaryExpression	\"resetflow\"
>672	ArrayIndexing	prhs [ 4 ]
>673	PrimaryExpression	4
>674	Identifier	prhs
>675	Identifier	bool
>676	Identifier	getScalarStructDef
>677	MemberAccess	param . resetflow
>678	Identifier	resetflow
>679	Identifier	param
>680	ExpressionStatement	 
>681	AssignmentExpr	param . intercept = getScalarStructDef < bool > ( prhs [ 4 ] , \"intercept\" , false )
>682	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"intercept\" , false )
>683	RelationalExpression	bool > ( prhs [ 4 ] , \"intercept\" , false )
>684	Expression	prhs [ 4 ] , \"intercept\" , false
>685	Expression	\"intercept\" , false
>686	Identifier	false
>687	PrimaryExpression	\"intercept\"
>688	ArrayIndexing	prhs [ 4 ]
>689	PrimaryExpression	4
>690	Identifier	prhs
>691	Identifier	bool
>692	Identifier	getScalarStructDef
>693	MemberAccess	param . intercept
>694	Identifier	intercept
>695	Identifier	param
>696	IfStatement	if ( param . loss == INCORRECT_LOSS )
>697	ExpressionStatement	 
>698	CallExpression	mexErrMsgTxt ( \"Unknown loss\" )
>699	ArgumentList	\"Unknown loss\"
>700	Argument	\"Unknown loss\"
>701	PrimaryExpression	\"Unknown loss\"
>702	Callee	mexErrMsgTxt
>703	Identifier	mexErrMsgTxt
>704	Condition	 
>705	EqualityExpression	param . loss == INCORRECT_LOSS
>706	Identifier	INCORRECT_LOSS
>707	MemberAccess	param . loss
>708	Identifier	loss
>709	Identifier	param
>710	ExpressionStatement	 
>711	AssignmentExpr	param . loss = loss_from_string ( param . name_loss )
>712	CallExpression	loss_from_string ( param . name_loss )
>713	ArgumentList	param . name_loss
>714	Argument	param . name_loss
>715	MemberAccess	param . name_loss
>716	Identifier	name_loss
>717	Identifier	param
>718	Callee	loss_from_string
>719	Identifier	loss_from_string
>720	MemberAccess	param . loss
>721	Identifier	loss
>722	Identifier	param
>723	ExpressionStatement	 
>724	CallExpression	getStringStruct ( prhs [ 4 ] , \"loss\" , param . name_loss , param . length_names )
>725	ArgumentList	prhs [ 4 ]
>726	Argument	param . length_names
>727	MemberAccess	param . length_names
>728	Identifier	length_names
>729	Identifier	param
>730	Argument	param . name_loss
>731	MemberAccess	param . name_loss
>732	Identifier	name_loss
>733	Identifier	param
>734	Argument	\"loss\"
>735	PrimaryExpression	\"loss\"
>736	Argument	prhs [ 4 ]
>737	ArrayIndexing	prhs [ 4 ]
>738	PrimaryExpression	4
>739	Identifier	prhs
>740	Callee	getStringStruct
>741	Identifier	getStringStruct
>742	IfStatement	if ( param . regul == INCORRECT_REG )
>743	ExpressionStatement	 
>744	CallExpression	mexErrMsgTxt ( \"Unknown regularization\" )
>745	ArgumentList	\"Unknown regularization\"
>746	Argument	\"Unknown regularization\"
>747	PrimaryExpression	\"Unknown regularization\"
>748	Callee	mexErrMsgTxt
>749	Identifier	mexErrMsgTxt
>750	Condition	 
>751	EqualityExpression	param . regul == INCORRECT_REG
>752	Identifier	INCORRECT_REG
>753	MemberAccess	param . regul
>754	Identifier	regul
>755	Identifier	param
>756	ExpressionStatement	 
>757	AssignmentExpr	param . regul = regul_from_string ( param . name_regul )
>758	CallExpression	regul_from_string ( param . name_regul )
>759	ArgumentList	param . name_regul
>760	Argument	param . name_regul
>761	MemberAccess	param . name_regul
>762	Identifier	name_regul
>763	Identifier	param
>764	Callee	regul_from_string
>765	Identifier	regul_from_string
>766	MemberAccess	param . regul
>767	Identifier	regul
>768	Identifier	param
>769	IfStatement	if ( param . is_inner_weights )
>770	CompoundStatement	 
>771	ExpressionStatement	 
>772	CallExpression	mxGetPr ( ppr_inner_weights )
>773	ArgumentList	ppr_inner_weights
>774	Argument	ppr_inner_weights
>775	Identifier	ppr_inner_weights
>776	Callee	mxGetPr
>777	Identifier	mxGetPr
>778	Statement	 
>779	Statement	 
>780	Statement	 
>781	Statement	 
>782	Statement	 
>783	Statement	 
>784	Statement	 
>785	Statement	 
>786	Statement	 
>787	IfStatement	if ( ! mexCheckType < T > ( ppr_inner_weights ) )
>788	ExpressionStatement	 
>789	CallExpression	mexErrMsgTxt ( \"type of inner_weights is not correct\" )
>790	ArgumentList	\"type of inner_weights is not correct\"
>791	Argument	\"type of inner_weights is not correct\"
>792	PrimaryExpression	\"type of inner_weights is not correct\"
>793	Callee	mexErrMsgTxt
>794	Identifier	mexErrMsgTxt
>795	Condition	 
>796	RelationalExpression	! mexCheckType < T > ( ppr_inner_weights )
>797	RelationalExpression	T > ( ppr_inner_weights )
>798	Identifier	ppr_inner_weights
>799	Identifier	T
>800	UnaryOp	! mexCheckType
>801	Identifier	mexCheckType
>802	UnaryOperator	!
>803	IfStatement	if ( ! ppr_inner_weights )
>804	ExpressionStatement	 
>805	CallExpression	mexErrMsgTxt ( \"field inner_weights is not provided\" )
>806	ArgumentList	\"field inner_weights is not provided\"
>807	Argument	\"field inner_weights is not provided\"
>808	PrimaryExpression	\"field inner_weights is not provided\"
>809	Callee	mexErrMsgTxt
>810	Identifier	mexErrMsgTxt
>811	Condition	 
>812	UnaryOp	! ppr_inner_weights
>813	Identifier	ppr_inner_weights
>814	UnaryOperator	!
>815	IdentifierDeclStatement	 
>816	IdentifierDecl	* ppr_inner_weights = mxGetField ( prhs [ 4 ] , 0 , \"inner_weights\" )
>817	AssignmentExpr	* ppr_inner_weights = mxGetField ( prhs [ 4 ] , 0 , \"inner_weights\" )
>818	CallExpression	mxGetField ( prhs [ 4 ] , 0 , \"inner_weights\" )
>819	ArgumentList	prhs [ 4 ]
>820	Argument	\"inner_weights\"
>821	PrimaryExpression	\"inner_weights\"
>822	Argument	0
>823	PrimaryExpression	0
>824	Argument	prhs [ 4 ]
>825	ArrayIndexing	prhs [ 4 ]
>826	PrimaryExpression	4
>827	Identifier	prhs
>828	Callee	mxGetField
>829	Identifier	mxGetField
>830	Identifier	ppr_inner_weights
>831	Identifier	ppr_inner_weights
>832	IdentifierDeclType	mxArray *
>833	Condition	 
>834	MemberAccess	param . is_inner_weights
>835	Identifier	is_inner_weights
>836	Identifier	param
>837	ExpressionStatement	 
>838	AssignmentExpr	param . transpose = getScalarStructDef < bool > ( prhs [ 4 ] , \"transpose\" , false )
>839	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"transpose\" , false )
>840	RelationalExpression	bool > ( prhs [ 4 ] , \"transpose\" , false )
>841	Expression	prhs [ 4 ] , \"transpose\" , false
>842	Expression	\"transpose\" , false
>843	Identifier	false
>844	PrimaryExpression	\"transpose\"
>845	ArrayIndexing	prhs [ 4 ]
>846	PrimaryExpression	4
>847	Identifier	prhs
>848	Identifier	bool
>849	Identifier	getScalarStructDef
>850	MemberAccess	param . transpose
>851	Identifier	transpose
>852	Identifier	param
>853	ExpressionStatement	 
>854	AssignmentExpr	param . is_inner_weights = getScalarStructDef < bool > ( prhs [ 4 ] , \"is_inner_weights\" , false )
>855	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"is_inner_weights\" , false )
>856	RelationalExpression	bool > ( prhs [ 4 ] , \"is_inner_weights\" , false )
>857	Expression	prhs [ 4 ] , \"is_inner_weights\" , false
>858	Expression	\"is_inner_weights\" , false
>859	Identifier	false
>860	PrimaryExpression	\"is_inner_weights\"
>861	ArrayIndexing	prhs [ 4 ]
>862	PrimaryExpression	4
>863	Identifier	prhs
>864	Identifier	bool
>865	Identifier	getScalarStructDef
>866	MemberAccess	param . is_inner_weights
>867	Identifier	is_inner_weights
>868	Identifier	param
>869	ExpressionStatement	 
>870	CallExpression	getStringStruct ( prhs [ 4 ] , \"regul\" , param . name_regul , param . length_names )
>871	ArgumentList	prhs [ 4 ]
>872	Argument	param . length_names
>873	MemberAccess	param . length_names
>874	Identifier	length_names
>875	Identifier	param
>876	Argument	param . name_regul
>877	MemberAccess	param . name_regul
>878	Identifier	name_regul
>879	Identifier	param
>880	Argument	\"regul\"
>881	PrimaryExpression	\"regul\"
>882	Argument	prhs [ 4 ]
>883	ArrayIndexing	prhs [ 4 ]
>884	PrimaryExpression	4
>885	Identifier	prhs
>886	Callee	getStringStruct
>887	Identifier	getStringStruct
>888	ExpressionStatement	 
>889	AssignmentExpr	param . sqrt_step = getScalarStructDef < bool > ( prhs [ 4 ] , \"sqrt_step\" , true )
>890	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"sqrt_step\" , true )
>891	RelationalExpression	bool > ( prhs [ 4 ] , \"sqrt_step\" , true )
>892	Expression	prhs [ 4 ] , \"sqrt_step\" , true
>893	Expression	\"sqrt_step\" , true
>894	Identifier	true
>895	PrimaryExpression	\"sqrt_step\"
>896	ArrayIndexing	prhs [ 4 ]
>897	PrimaryExpression	4
>898	Identifier	prhs
>899	Identifier	bool
>900	Identifier	getScalarStructDef
>901	MemberAccess	param . sqrt_step
>902	Identifier	sqrt_step
>903	Identifier	param
>904	ExpressionStatement	 
>905	AssignmentExpr	param . lin_admm = getScalarStructDef < bool > ( prhs [ 4 ] , \"lin_admm\" , false )
>906	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"lin_admm\" , false )
>907	RelationalExpression	bool > ( prhs [ 4 ] , \"lin_admm\" , false )
>908	Expression	prhs [ 4 ] , \"lin_admm\" , false
>909	Expression	\"lin_admm\" , false
>910	Identifier	false
>911	PrimaryExpression	\"lin_admm\"
>912	ArrayIndexing	prhs [ 4 ]
>913	PrimaryExpression	4
>914	Identifier	prhs
>915	Identifier	bool
>916	Identifier	getScalarStructDef
>917	MemberAccess	param . lin_admm
>918	Identifier	lin_admm
>919	Identifier	param
>920	ExpressionStatement	 
>921	AssignmentExpr	param . admm = getScalarStructDef < bool > ( prhs [ 4 ] , \"admm\" , false )
>922	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"admm\" , false )
>923	RelationalExpression	bool > ( prhs [ 4 ] , \"admm\" , false )
>924	Expression	prhs [ 4 ] , \"admm\" , false
>925	Expression	\"admm\" , false
>926	Identifier	false
>927	PrimaryExpression	\"admm\"
>928	ArrayIndexing	prhs [ 4 ]
>929	PrimaryExpression	4
>930	Identifier	prhs
>931	Identifier	bool
>932	Identifier	getScalarStructDef
>933	MemberAccess	param . admm
>934	Identifier	admm
>935	Identifier	param
>936	ExpressionStatement	 
>937	AssignmentExpr	param . delta = getScalarStructDef < T > ( prhs [ 4 ] , \"delta\" , 1.0 )
>938	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"delta\" , 1.0 )
>939	RelationalExpression	T > ( prhs [ 4 ] , \"delta\" , 1.0 )
>940	Expression	prhs [ 4 ] , \"delta\" , 1.0
>941	Expression	\"delta\" , 1.0
>942	PrimaryExpression	1.0
>943	PrimaryExpression	\"delta\"
>944	ArrayIndexing	prhs [ 4 ]
>945	PrimaryExpression	4
>946	Identifier	prhs
>947	Identifier	T
>948	Identifier	getScalarStructDef
>949	MemberAccess	param . delta
>950	Identifier	delta
>951	Identifier	param
>952	ExpressionStatement	 
>953	Expression	prhs [ 4 ] , \"size_group\" , 1
>954	Expression	\"size_group\" , 1
>955	PrimaryExpression	1
>956	PrimaryExpression	\"size_group\"
>957	ArrayIndexing	prhs [ 4 ]
>958	PrimaryExpression	4
>959	Identifier	prhs
>960	Statement	 
>961	Statement	 
>962	Statement	 
>963	Statement	 
>964	Statement	 
>965	Statement	 
>966	Statement	 
>967	Statement	 
>968	ExpressionStatement	 
>969	AssignmentExpr	param . lambda3 = getScalarStructDef < T > ( prhs [ 4 ] , \"lambda3\" , 0.0 )
>970	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"lambda3\" , 0.0 )
>971	RelationalExpression	T > ( prhs [ 4 ] , \"lambda3\" , 0.0 )
>972	Expression	prhs [ 4 ] , \"lambda3\" , 0.0
>973	Expression	\"lambda3\" , 0.0
>974	PrimaryExpression	0.0
>975	PrimaryExpression	\"lambda3\"
>976	ArrayIndexing	prhs [ 4 ]
>977	PrimaryExpression	4
>978	Identifier	prhs
>979	Identifier	T
>980	Identifier	getScalarStructDef
>981	MemberAccess	param . lambda3
>982	Identifier	lambda3
>983	Identifier	param
>984	ExpressionStatement	 
>985	AssignmentExpr	param . lambda2 = getScalarStructDef < T > ( prhs [ 4 ] , \"lambda2\" , 0.0 )
>986	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"lambda2\" , 0.0 )
>987	RelationalExpression	T > ( prhs [ 4 ] , \"lambda2\" , 0.0 )
>988	Expression	prhs [ 4 ] , \"lambda2\" , 0.0
>989	Expression	\"lambda2\" , 0.0
>990	PrimaryExpression	0.0
>991	PrimaryExpression	\"lambda2\"
>992	ArrayIndexing	prhs [ 4 ]
>993	PrimaryExpression	4
>994	Identifier	prhs
>995	Identifier	T
>996	Identifier	getScalarStructDef
>997	MemberAccess	param . lambda2
>998	Identifier	lambda2
>999	Identifier	param
>1000	ExpressionStatement	 
>1001	AssignmentExpr	param . lambda = getScalarStructDef < T > ( prhs [ 4 ] , \"lambda\" , 1.0 )
>1002	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"lambda\" , 1.0 )
>1003	RelationalExpression	T > ( prhs [ 4 ] , \"lambda\" , 1.0 )
>1004	Expression	prhs [ 4 ] , \"lambda\" , 1.0
>1005	Expression	\"lambda\" , 1.0
>1006	PrimaryExpression	1.0
>1007	PrimaryExpression	\"lambda\"
>1008	ArrayIndexing	prhs [ 4 ]
>1009	PrimaryExpression	4
>1010	Identifier	prhs
>1011	Identifier	T
>1012	Identifier	getScalarStructDef
>1013	MemberAccess	param . lambda
>1014	Identifier	lambda
>1015	Identifier	param
>1016	ExpressionStatement	 
>1017	AssignmentExpr	param . c = getScalarStructDef < T > ( prhs [ 4 ] , \"c\" , 1.0 )
>1018	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"c\" , 1.0 )
>1019	RelationalExpression	T > ( prhs [ 4 ] , \"c\" , 1.0 )
>1020	Expression	prhs [ 4 ] , \"c\" , 1.0
>1021	Expression	\"c\" , 1.0
>1022	PrimaryExpression	1.0
>1023	PrimaryExpression	\"c\"
>1024	ArrayIndexing	prhs [ 4 ]
>1025	PrimaryExpression	4
>1026	Identifier	prhs
>1027	Identifier	T
>1028	Identifier	getScalarStructDef
>1029	MemberAccess	param . c
>1030	Identifier	c
>1031	Identifier	param
>1032	ExpressionStatement	 
>1033	AssignmentExpr	param . gamma = MAX ( 1.01 , getScalarStructDef < T > ( prhs [ 4 ] , \"gamma\" , 1.5 ) )
>1034	CallExpression	MAX ( 1.01 , getScalarStructDef < T > ( prhs [ 4 ] , \"gamma\" , 1.5 ) )
>1035	ArgumentList	1.01
>1036	Argument	getScalarStructDef < T > ( prhs [ 4 ] , \"gamma\" , 1.5 )
>1037	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"gamma\" , 1.5 )
>1038	RelationalExpression	T > ( prhs [ 4 ] , \"gamma\" , 1.5 )
>1039	Expression	prhs [ 4 ] , \"gamma\" , 1.5
>1040	Expression	\"gamma\" , 1.5
>1041	PrimaryExpression	1.5
>1042	PrimaryExpression	\"gamma\"
>1043	ArrayIndexing	prhs [ 4 ]
>1044	PrimaryExpression	4
>1045	Identifier	prhs
>1046	Identifier	T
>1047	Identifier	getScalarStructDef
>1048	Argument	1.01
>1049	PrimaryExpression	1.01
>1050	Callee	MAX
>1051	Identifier	MAX
>1052	MemberAccess	param . gamma
>1053	Identifier	gamma
>1054	Identifier	param
>1055	ExpressionStatement	 
>1056	AssignmentExpr	param . fixed_step = getScalarStructDef < T > ( prhs [ 4 ] , \"fixed_step\" , false )
>1057	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"fixed_step\" , false )
>1058	RelationalExpression	T > ( prhs [ 4 ] , \"fixed_step\" , false )
>1059	Expression	prhs [ 4 ] , \"fixed_step\" , false
>1060	Expression	\"fixed_step\" , false
>1061	Identifier	false
>1062	PrimaryExpression	\"fixed_step\"
>1063	ArrayIndexing	prhs [ 4 ]
>1064	PrimaryExpression	4
>1065	Identifier	prhs
>1066	Identifier	T
>1067	Identifier	getScalarStructDef
>1068	MemberAccess	param . fixed_step
>1069	Identifier	fixed_step
>1070	Identifier	param
>1071	ExpressionStatement	 
>1072	AssignmentExpr	param . L0 = getScalarStructDef < T > ( prhs [ 4 ] , \"L0\" , 1.0 )
>1073	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"L0\" , 1.0 )
>1074	RelationalExpression	T > ( prhs [ 4 ] , \"L0\" , 1.0 )
>1075	Expression	prhs [ 4 ] , \"L0\" , 1.0
>1076	Expression	\"L0\" , 1.0
>1077	PrimaryExpression	1.0
>1078	PrimaryExpression	\"L0\"
>1079	ArrayIndexing	prhs [ 4 ]
>1080	PrimaryExpression	4
>1081	Identifier	prhs
>1082	Identifier	T
>1083	Identifier	getScalarStructDef
>1084	MemberAccess	param . L0
>1085	Identifier	L0
>1086	Identifier	param
>1087	ExpressionStatement	 
>1088	Expression	prhs [ 4 ] , \"max_iter_backtracking\" , 1000
>1089	Expression	\"max_iter_backtracking\" , 1000
>1090	PrimaryExpression	1000
>1091	PrimaryExpression	\"max_iter_backtracking\"
>1092	ArrayIndexing	prhs [ 4 ]
>1093	PrimaryExpression	4
>1094	Identifier	prhs
>1095	Statement	 
>1096	Statement	 
>1097	Statement	 
>1098	Statement	 
>1099	Statement	 
>1100	Statement	 
>1101	Statement	 
>1102	Statement	 
>1103	ExpressionStatement	 
>1104	AssignmentExpr	param . compute_gram = getScalarStructDef < bool > ( prhs [ 4 ] , \"compute_gram\" , false )
>1105	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"compute_gram\" , false )
>1106	RelationalExpression	bool > ( prhs [ 4 ] , \"compute_gram\" , false )
>1107	Expression	prhs [ 4 ] , \"compute_gram\" , false
>1108	Expression	\"compute_gram\" , false
>1109	Identifier	false
>1110	PrimaryExpression	\"compute_gram\"
>1111	ArrayIndexing	prhs [ 4 ]
>1112	PrimaryExpression	4
>1113	Identifier	prhs
>1114	Identifier	bool
>1115	Identifier	getScalarStructDef
>1116	MemberAccess	param . compute_gram
>1117	Identifier	compute_gram
>1118	Identifier	param
>1119	ExpressionStatement	 
>1120	AssignmentExpr	param . pos = getScalarStructDef < bool > ( prhs [ 4 ] , \"pos\" , false )
>1121	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"pos\" , false )
>1122	RelationalExpression	bool > ( prhs [ 4 ] , \"pos\" , false )
>1123	Expression	prhs [ 4 ] , \"pos\" , false
>1124	Expression	\"pos\" , false
>1125	Identifier	false
>1126	PrimaryExpression	\"pos\"
>1127	ArrayIndexing	prhs [ 4 ]
>1128	PrimaryExpression	4
>1129	Identifier	prhs
>1130	Identifier	bool
>1131	Identifier	getScalarStructDef
>1132	MemberAccess	param . pos
>1133	Identifier	pos
>1134	Identifier	param
>1135	ExpressionStatement	 
>1136	Expression	prhs [ 4 ] , \"it0\" , 100
>1137	Expression	\"it0\" , 100
>1138	PrimaryExpression	100
>1139	PrimaryExpression	\"it0\"
>1140	ArrayIndexing	prhs [ 4 ]
>1141	PrimaryExpression	4
>1142	Identifier	prhs
>1143	Statement	 
>1144	Statement	 
>1145	Statement	 
>1146	Statement	 
>1147	Statement	 
>1148	Statement	 
>1149	Statement	 
>1150	Statement	 
>1151	ExpressionStatement	 
>1152	AssignmentExpr	param . tol = getScalarStructDef < T > ( prhs [ 4 ] , \"tol\" , 0.000001 )
>1153	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"tol\" , 0.000001 )
>1154	RelationalExpression	T > ( prhs [ 4 ] , \"tol\" , 0.000001 )
>1155	Expression	prhs [ 4 ] , \"tol\" , 0.000001
>1156	Expression	\"tol\" , 0.000001
>1157	PrimaryExpression	0.000001
>1158	PrimaryExpression	\"tol\"
>1159	ArrayIndexing	prhs [ 4 ]
>1160	PrimaryExpression	4
>1161	Identifier	prhs
>1162	Identifier	T
>1163	Identifier	getScalarStructDef
>1164	MemberAccess	param . tol
>1165	Identifier	tol
>1166	Identifier	param
>1167	ExpressionStatement	 
>1168	Expression	prhs [ 4 ] , \"max_it\" , 1000
>1169	Expression	\"max_it\" , 1000
>1170	PrimaryExpression	1000
>1171	PrimaryExpression	\"max_it\"
>1172	ArrayIndexing	prhs [ 4 ]
>1173	PrimaryExpression	4
>1174	Identifier	prhs
>1175	Statement	 
>1176	Statement	 
>1177	Statement	 
>1178	Statement	 
>1179	Statement	 
>1180	Statement	 
>1181	Statement	 
>1182	Statement	 
>1183	ExpressionStatement	 
>1184	Expression	prhs [ 4 ] , \"numThreads\" , - 1
>1185	Expression	\"numThreads\" , - 1
>1186	UnaryOp	- 1
>1187	PrimaryExpression	1
>1188	UnaryOperator	-
>1189	PrimaryExpression	\"numThreads\"
>1190	ArrayIndexing	prhs [ 4 ]
>1191	PrimaryExpression	4
>1192	Identifier	prhs
>1193	Statement	 
>1194	Statement	 
>1195	Statement	 
>1196	Statement	 
>1197	Statement	 
>1198	Statement	 
>1199	Statement	 
>1200	Statement	 
>1201	IdentifierDeclStatement	 
>1202	IdentifierDecl	param
>1203	Identifier	param
>1204	IdentifierDeclType	FISTA 
>1205	IdentifierDeclStatement	 
>1206	IdentifierDecl	alpha ( pr_alpha , pAlpha , nAlpha )
>1207	Expression	pr_alpha , pAlpha , nAlpha
>1208	Expression	pAlpha , nAlpha
>1209	Identifier	nAlpha
>1210	Identifier	pAlpha
>1211	Identifier	pr_alpha
>1212	Identifier	alpha
>1213	IdentifierDeclType	Matrix < T >
>1214	ExpressionStatement	 
>1215	CallExpression	mxGetPr ( plhs [ 0 ] )
>1216	ArgumentList	plhs [ 0 ]
>1217	Argument	plhs [ 0 ]
>1218	ArrayIndexing	plhs [ 0 ]
>1219	PrimaryExpression	0
>1220	Identifier	plhs
>1221	Callee	mxGetPr
>1222	Identifier	mxGetPr
>1223	Statement	 
>1224	Statement	 
>1225	Statement	 
>1226	Statement	 
>1227	Statement	 
>1228	Statement	 
>1229	Statement	 
>1230	Statement	 
>1231	Statement	 
>1232	ExpressionStatement	 
>1233	AssignmentExpr	plhs [ 0 ] = createMatrix < T > ( pAlpha , nAlpha )
>1234	RelationalExpression	createMatrix < T > ( pAlpha , nAlpha )
>1235	RelationalExpression	T > ( pAlpha , nAlpha )
>1236	Expression	pAlpha , nAlpha
>1237	Identifier	nAlpha
>1238	Identifier	pAlpha
>1239	Identifier	T
>1240	Identifier	createMatrix
>1241	ArrayIndexing	plhs [ 0 ]
>1242	PrimaryExpression	0
>1243	Identifier	plhs
>1244	ExpressionStatement	 
>1245	CallExpression	mxGetJc ( ppr_groups )
>1246	ArgumentList	ppr_groups
>1247	Argument	ppr_groups
>1248	Identifier	ppr_groups
>1249	Callee	mxGetJc
>1250	Identifier	mxGetJc
>1251	Statement	 
>1252	Statement	 
>1253	Statement	 
>1254	Statement	 
>1255	Statement	 
>1256	Statement	 
>1257	Statement	 
>1258	Statement	 
>1259	Statement	 
>1260	ExpressionStatement	 
>1261	CallExpression	mxGetIr ( ppr_groups )
>1262	ArgumentList	ppr_groups
>1263	Argument	ppr_groups
>1264	Identifier	ppr_groups
>1265	Callee	mxGetIr
>1266	Identifier	mxGetIr
>1267	Statement	 
>1268	Statement	 
>1269	Statement	 
>1270	Statement	 
>1271	Statement	 
>1272	Statement	 
>1273	Statement	 
>1274	Statement	 
>1275	Statement	 
>1276	IfStatement	if ( ! ppr_groups )
>1277	ExpressionStatement	 
>1278	CallExpression	mexErrMsgTxt ( \"field groups is not provided\" )
>1279	ArgumentList	\"field groups is not provided\"
>1280	Argument	\"field groups is not provided\"
>1281	PrimaryExpression	\"field groups is not provided\"
>1282	Callee	mexErrMsgTxt
>1283	Identifier	mexErrMsgTxt
>1284	Condition	 
>1285	UnaryOp	! ppr_groups
>1286	Identifier	ppr_groups
>1287	UnaryOperator	!
>1288	ExpressionStatement	 
>1289	CallExpression	mexErrMsgTxt ( \"Error in tree definition\" )
>1290	ArgumentList	\"Error in tree definition\"
>1291	Argument	\"Error in tree definition\"
>1292	PrimaryExpression	\"Error in tree definition\"
>1293	Callee	mexErrMsgTxt
>1294	Identifier	mexErrMsgTxt
>1295	Statement	 
>1296	Statement	 
>1297	Statement	 
>1298	Statement	 
>1299	Statement	 
>1300	Statement	 
>1301	Statement	 
>1302	Statement	 
>1303	Statement	 
>1304	Statement	 
>1305	Statement	 
>1306	Statement	 
>1307	Statement	 
>1308	Statement	 
>1309	Statement	 
>1310	Statement	 
>1311	Statement	 
>1312	Statement	 
>1313	Statement	 
>1314	Statement	 
>1315	Statement	 
>1316	Statement	 
>1317	Statement	 
>1318	Statement	 
>1319	Statement	 
>1320	Statement	 
>1321	Statement	 
>1322	Statement	 
>1323	Statement	 
>1324	Statement	 
>1325	Statement	 
>1326	Statement	 
>1327	IdentifierDeclStatement	 
>1328	IdentifierDecl	* dims_gg = mxGetDimensions ( ppr_groups )
>1329	AssignmentExpr	* dims_gg = mxGetDimensions ( ppr_groups )
>1330	CallExpression	mxGetDimensions ( ppr_groups )
>1331	ArgumentList	ppr_groups
>1332	Argument	ppr_groups
>1333	Identifier	ppr_groups
>1334	Callee	mxGetDimensions
>1335	Identifier	mxGetDimensions
>1336	Identifier	dims_gg
>1337	Identifier	dims_gg
>1338	IdentifierDeclType	const mwSize *
>1339	IdentifierDeclStatement	 
>1340	IdentifierDecl	* ppr_groups = mxGetField ( prhs [ 3 ] , 0 , \"groups\" )
>1341	AssignmentExpr	* ppr_groups = mxGetField ( prhs [ 3 ] , 0 , \"groups\" )
>1342	CallExpression	mxGetField ( prhs [ 3 ] , 0 , \"groups\" )
>1343	ArgumentList	prhs [ 3 ]
>1344	Argument	\"groups\"
>1345	PrimaryExpression	\"groups\"
>1346	Argument	0
>1347	PrimaryExpression	0
>1348	Argument	prhs [ 3 ]
>1349	ArrayIndexing	prhs [ 3 ]
>1350	PrimaryExpression	3
>1351	Identifier	prhs
>1352	Callee	mxGetField
>1353	Identifier	mxGetField
>1354	Identifier	ppr_groups
>1355	Identifier	ppr_groups
>1356	IdentifierDeclType	mxArray *
>1357	ExpressionStatement	 
>1358	CallExpression	mxGetPr ( ppr_lambda_g )
>1359	ArgumentList	ppr_lambda_g
>1360	Argument	ppr_lambda_g
>1361	Identifier	ppr_lambda_g
>1362	Callee	mxGetPr
>1363	Identifier	mxGetPr
>1364	Statement	 
>1365	Statement	 
>1366	Statement	 
>1367	Statement	 
>1368	Statement	 
>1369	Statement	 
>1370	Statement	 
>1371	Statement	 
>1372	Statement	 
>1373	IfStatement	if ( num_groups != num_groups3 )
>1374	ExpressionStatement	 
>1375	CallExpression	mexErrMsgTxt ( \"Error in tree definition\" )
>1376	ArgumentList	\"Error in tree definition\"
>1377	Argument	\"Error in tree definition\"
>1378	PrimaryExpression	\"Error in tree definition\"
>1379	Callee	mexErrMsgTxt
>1380	Identifier	mexErrMsgTxt
>1381	Condition	 
>1382	EqualityExpression	num_groups != num_groups3
>1383	Identifier	num_groups3
>1384	Identifier	num_groups
>1385	ExpressionStatement	 
>1386	ArrayIndexing	dims_weights [ 1 ]
>1387	PrimaryExpression	1
>1388	Identifier	dims_weights
>1389	Statement	 
>1390	Statement	 
>1391	Statement	 
>1392	Statement	 
>1393	Statement	 
>1394	Statement	 
>1395	Statement	 
>1396	Statement	 
>1397	Statement	 
>1398	Statement	 
>1399	Statement	 
>1400	Statement	 
>1401	Statement	 
>1402	Statement	 
>1403	Statement	 
>1404	Statement	 
>1405	Statement	 
>1406	Statement	 
>1407	IdentifierDeclStatement	 
>1408	IdentifierDecl	* dims_weights = mxGetDimensions ( ppr_lambda_g )
>1409	AssignmentExpr	* dims_weights = mxGetDimensions ( ppr_lambda_g )
>1410	CallExpression	mxGetDimensions ( ppr_lambda_g )
>1411	ArgumentList	ppr_lambda_g
>1412	Argument	ppr_lambda_g
>1413	Identifier	ppr_lambda_g
>1414	Callee	mxGetDimensions
>1415	Identifier	mxGetDimensions
>1416	Identifier	dims_weights
>1417	Identifier	dims_weights
>1418	IdentifierDeclType	const mwSize *
>1419	IfStatement	if ( ! ppr_lambda_g )
>1420	ExpressionStatement	 
>1421	CallExpression	mexErrMsgTxt ( \"field eta_g is not provided\" )
>1422	ArgumentList	\"field eta_g is not provided\"
>1423	Argument	\"field eta_g is not provided\"
>1424	PrimaryExpression	\"field eta_g is not provided\"
>1425	Callee	mexErrMsgTxt
>1426	Identifier	mexErrMsgTxt
>1427	Condition	 
>1428	UnaryOp	! ppr_lambda_g
>1429	Identifier	ppr_lambda_g
>1430	UnaryOperator	!
>1431	IdentifierDeclStatement	 
>1432	IdentifierDecl	* ppr_lambda_g = mxGetField ( prhs [ 3 ] , 0 , \"eta_g\" )
>1433	AssignmentExpr	* ppr_lambda_g = mxGetField ( prhs [ 3 ] , 0 , \"eta_g\" )
>1434	CallExpression	mxGetField ( prhs [ 3 ] , 0 , \"eta_g\" )
>1435	ArgumentList	prhs [ 3 ]
>1436	Argument	\"eta_g\"
>1437	PrimaryExpression	\"eta_g\"
>1438	Argument	0
>1439	PrimaryExpression	0
>1440	Argument	prhs [ 3 ]
>1441	ArrayIndexing	prhs [ 3 ]
>1442	PrimaryExpression	3
>1443	Identifier	prhs
>1444	Callee	mxGetField
>1445	Identifier	mxGetField
>1446	Identifier	ppr_lambda_g
>1447	Identifier	ppr_lambda_g
>1448	IdentifierDeclType	mxArray *
>1449	IfStatement	if ( pAlpha < num_var )
>1450	ExpressionStatement	 
>1451	CallExpression	mexErrMsgTxt ( \"Input alpha is too small\" )
>1452	ArgumentList	\"Input alpha is too small\"
>1453	Argument	\"Input alpha is too small\"
>1454	PrimaryExpression	\"Input alpha is too small\"
>1455	Callee	mexErrMsgTxt
>1456	Identifier	mexErrMsgTxt
>1457	Condition	 
>1458	RelationalExpression	pAlpha < num_var
>1459	Identifier	num_var
>1460	Identifier	pAlpha
>1461	ForStatement	for ( long i = 0 ; i < num_groups ; ++ i )
>1462	ExpressionStatement	 
>1463	AssignmentExpr	num_var += pr_N_own_variables [ i ]
>1464	ArrayIndexing	pr_N_own_variables [ i ]
>1465	Identifier	i
>1466	Identifier	pr_N_own_variables
>1467	Identifier	num_var
>1468	UnaryExpression	 
>1469	Identifier	i
>1470	IncDec	++
>1471	Condition	 
>1472	RelationalExpression	i < num_groups
>1473	Identifier	num_groups
>1474	Identifier	i
>1475	ForInit	 
>1476	IdentifierDeclStatement	long i = 0 ;
>1477	IdentifierDecl	i = 0
>1478	AssignmentExpr	i = 0
>1479	PrimaryExpression	0
>1480	Identifier	i
>1481	Identifier	i
>1482	IdentifierDeclType	long
>1483	IdentifierDeclStatement	 
>1484	IdentifierDecl	num_var = 0
>1485	AssignmentExpr	num_var = 0
>1486	PrimaryExpression	0
>1487	Identifier	num_var
>1488	Identifier	num_var
>1489	IdentifierDeclType	long
>1490	ExpressionStatement	 
>1491	CallExpression	mxGetPr ( ppr_N_own_variables )
>1492	ArgumentList	ppr_N_own_variables
>1493	Argument	ppr_N_own_variables
>1494	Identifier	ppr_N_own_variables
>1495	Callee	mxGetPr
>1496	Identifier	mxGetPr
>1497	Statement	 
>1498	Statement	 
>1499	Statement	 
>1500	Statement	 
>1501	Statement	 
>1502	Statement	 
>1503	Statement	 
>1504	Statement	 
>1505	Statement	 
>1506	IfStatement	if ( num_groups != num_groups2 )
>1507	ExpressionStatement	 
>1508	CallExpression	mexErrMsgTxt ( \"Error in tree definition\" )
>1509	ArgumentList	\"Error in tree definition\"
>1510	Argument	\"Error in tree definition\"
>1511	PrimaryExpression	\"Error in tree definition\"
>1512	Callee	mexErrMsgTxt
>1513	Identifier	mexErrMsgTxt
>1514	Condition	 
>1515	EqualityExpression	num_groups != num_groups2
>1516	Identifier	num_groups2
>1517	Identifier	num_groups
>1518	ExpressionStatement	 
>1519	ArrayIndexing	dims_var [ 1 ]
>1520	PrimaryExpression	1
>1521	Identifier	dims_var
>1522	Statement	 
>1523	Statement	 
>1524	Statement	 
>1525	Statement	 
>1526	Statement	 
>1527	Statement	 
>1528	Statement	 
>1529	Statement	 
>1530	Statement	 
>1531	Statement	 
>1532	Statement	 
>1533	Statement	 
>1534	Statement	 
>1535	Statement	 
>1536	Statement	 
>1537	Statement	 
>1538	Statement	 
>1539	Statement	 
>1540	IdentifierDeclStatement	 
>1541	IdentifierDecl	* dims_var = mxGetDimensions ( ppr_N_own_variables )
>1542	AssignmentExpr	* dims_var = mxGetDimensions ( ppr_N_own_variables )
>1543	CallExpression	mxGetDimensions ( ppr_N_own_variables )
>1544	ArgumentList	ppr_N_own_variables
>1545	Argument	ppr_N_own_variables
>1546	Identifier	ppr_N_own_variables
>1547	Callee	mxGetDimensions
>1548	Identifier	mxGetDimensions
>1549	Identifier	dims_var
>1550	Identifier	dims_var
>1551	IdentifierDeclType	const mwSize *
>1552	ExpressionStatement	 
>1553	CallExpression	mexErrMsgTxt ( \"N_own_variables field should be int32\" )
>1554	ArgumentList	\"N_own_variables field should be int32\"
>1555	Argument	\"N_own_variables field should be int32\"
>1556	PrimaryExpression	\"N_own_variables field should be int32\"
>1557	Callee	mexErrMsgTxt
>1558	Identifier	mexErrMsgTxt
>1559	Statement	 
>1560	Statement	 
>1561	Statement	 
>1562	Statement	 
>1563	Statement	 
>1564	Statement	 
>1565	Statement	 
>1566	Statement	 
>1567	Statement	 
>1568	Statement	 
>1569	Statement	 
>1570	IfStatement	if ( ! ppr_N_own_variables )
>1571	ExpressionStatement	 
>1572	CallExpression	mexErrMsgTxt ( \"field N_own_variables is not provided\" )
>1573	ArgumentList	\"field N_own_variables is not provided\"
>1574	Argument	\"field N_own_variables is not provided\"
>1575	PrimaryExpression	\"field N_own_variables is not provided\"
>1576	Callee	mexErrMsgTxt
>1577	Identifier	mexErrMsgTxt
>1578	Condition	 
>1579	UnaryOp	! ppr_N_own_variables
>1580	Identifier	ppr_N_own_variables
>1581	UnaryOperator	!
>1582	IdentifierDeclStatement	 
>1583	IdentifierDecl	* ppr_N_own_variables = mxGetField ( prhs [ 3 ] , 0 , \"N_own_variables\" )
>1584	AssignmentExpr	* ppr_N_own_variables = mxGetField ( prhs [ 3 ] , 0 , \"N_own_variables\" )
>1585	CallExpression	mxGetField ( prhs [ 3 ] , 0 , \"N_own_variables\" )
>1586	ArgumentList	prhs [ 3 ]
>1587	Argument	\"N_own_variables\"
>1588	PrimaryExpression	\"N_own_variables\"
>1589	Argument	0
>1590	PrimaryExpression	0
>1591	Argument	prhs [ 3 ]
>1592	ArrayIndexing	prhs [ 3 ]
>1593	PrimaryExpression	3
>1594	Identifier	prhs
>1595	Callee	mxGetField
>1596	Identifier	mxGetField
>1597	Identifier	ppr_N_own_variables
>1598	Identifier	ppr_N_own_variables
>1599	IdentifierDeclType	mxArray *
>1600	ExpressionStatement	 
>1601	ArrayIndexing	dims_groups [ 1 ]
>1602	PrimaryExpression	1
>1603	Identifier	dims_groups
>1604	Statement	 
>1605	Statement	 
>1606	Statement	 
>1607	Statement	 
>1608	Statement	 
>1609	Statement	 
>1610	Statement	 
>1611	Statement	 
>1612	Statement	 
>1613	Statement	 
>1614	Statement	 
>1615	Statement	 
>1616	Statement	 
>1617	Statement	 
>1618	Statement	 
>1619	Statement	 
>1620	Statement	 
>1621	Statement	 
>1622	IdentifierDeclStatement	 
>1623	IdentifierDecl	* dims_groups = mxGetDimensions ( ppr_own_variables )
>1624	AssignmentExpr	* dims_groups = mxGetDimensions ( ppr_own_variables )
>1625	CallExpression	mxGetDimensions ( ppr_own_variables )
>1626	ArgumentList	ppr_own_variables
>1627	Argument	ppr_own_variables
>1628	Identifier	ppr_own_variables
>1629	Callee	mxGetDimensions
>1630	Identifier	mxGetDimensions
>1631	Identifier	dims_groups
>1632	Identifier	dims_groups
>1633	IdentifierDeclType	const mwSize *
>1634	ExpressionStatement	 
>1635	CallExpression	mxGetPr ( ppr_own_variables )
>1636	ArgumentList	ppr_own_variables
>1637	Argument	ppr_own_variables
>1638	Identifier	ppr_own_variables
>1639	Callee	mxGetPr
>1640	Identifier	mxGetPr
>1641	Statement	 
>1642	Statement	 
>1643	Statement	 
>1644	Statement	 
>1645	Statement	 
>1646	Statement	 
>1647	Statement	 
>1648	Statement	 
>1649	Statement	 
>1650	IfStatement	if ( ! ppr_own_variables )
>1651	ExpressionStatement	 
>1652	CallExpression	mexErrMsgTxt ( \"field own_variables is not provided\" )
>1653	ArgumentList	\"field own_variables is not provided\"
>1654	Argument	\"field own_variables is not provided\"
>1655	PrimaryExpression	\"field own_variables is not provided\"
>1656	Callee	mexErrMsgTxt
>1657	Identifier	mexErrMsgTxt
>1658	Condition	 
>1659	UnaryOp	! ppr_own_variables
>1660	Identifier	ppr_own_variables
>1661	UnaryOperator	!
>1662	ExpressionStatement	 
>1663	CallExpression	mexErrMsgTxt ( \"own_variables field should be int32\" )
>1664	ArgumentList	\"own_variables field should be int32\"
>1665	Argument	\"own_variables field should be int32\"
>1666	PrimaryExpression	\"own_variables field should be int32\"
>1667	Callee	mexErrMsgTxt
>1668	Identifier	mexErrMsgTxt
>1669	Statement	 
>1670	Statement	 
>1671	Statement	 
>1672	Statement	 
>1673	Statement	 
>1674	Statement	 
>1675	Statement	 
>1676	Statement	 
>1677	Statement	 
>1678	Statement	 
>1679	Statement	 
>1680	IdentifierDeclStatement	 
>1681	IdentifierDecl	* ppr_own_variables = mxGetField ( prhs [ 3 ] , 0 , \"own_variables\" )
>1682	AssignmentExpr	* ppr_own_variables = mxGetField ( prhs [ 3 ] , 0 , \"own_variables\" )
>1683	CallExpression	mxGetField ( prhs [ 3 ] , 0 , \"own_variables\" )
>1684	ArgumentList	prhs [ 3 ]
>1685	Argument	\"own_variables\"
>1686	PrimaryExpression	\"own_variables\"
>1687	Argument	0
>1688	PrimaryExpression	0
>1689	Argument	prhs [ 3 ]
>1690	ArrayIndexing	prhs [ 3 ]
>1691	PrimaryExpression	3
>1692	Identifier	prhs
>1693	Callee	mxGetField
>1694	Identifier	mxGetField
>1695	Identifier	ppr_own_variables
>1696	Identifier	ppr_own_variables
>1697	IdentifierDeclType	mxArray *
>1698	IdentifierDeclStatement	 
>1699	IdentifierDecl	alpha0 ( pr_alpha0 , pAlpha , nAlpha )
>1700	Expression	pr_alpha0 , pAlpha , nAlpha
>1701	Expression	pAlpha , nAlpha
>1702	Identifier	nAlpha
>1703	Identifier	pAlpha
>1704	Identifier	pr_alpha0
>1705	Identifier	alpha0
>1706	IdentifierDeclType	Matrix < T >
>1707	ExpressionStatement	 
>1708	ArrayIndexing	dimsAlpha [ 1 ]
>1709	PrimaryExpression	1
>1710	Identifier	dimsAlpha
>1711	Statement	 
>1712	Statement	 
>1713	Statement	 
>1714	Statement	 
>1715	Statement	 
>1716	Statement	 
>1717	Statement	 
>1718	ExpressionStatement	 
>1719	ArrayIndexing	dimsAlpha [ 0 ]
>1720	PrimaryExpression	0
>1721	Identifier	dimsAlpha
>1722	Statement	 
>1723	Statement	 
>1724	Statement	 
>1725	Statement	 
>1726	Statement	 
>1727	Statement	 
>1728	Statement	 
>1729	IdentifierDeclStatement	 
>1730	IdentifierDecl	* dimsAlpha = mxGetDimensions ( prhs [ 2 ] )
>1731	AssignmentExpr	* dimsAlpha = mxGetDimensions ( prhs [ 2 ] )
>1732	CallExpression	mxGetDimensions ( prhs [ 2 ] )
>1733	ArgumentList	prhs [ 2 ]
>1734	Argument	prhs [ 2 ]
>1735	ArrayIndexing	prhs [ 2 ]
>1736	PrimaryExpression	2
>1737	Identifier	prhs
>1738	Callee	mxGetDimensions
>1739	Identifier	mxGetDimensions
>1740	Identifier	dimsAlpha
>1741	Identifier	dimsAlpha
>1742	IdentifierDeclType	const mwSize *
>1743	ExpressionStatement	 
>1744	CallExpression	mxGetPr ( prhs [ 2 ] )
>1745	ArgumentList	prhs [ 2 ]
>1746	Argument	prhs [ 2 ]
>1747	ArrayIndexing	prhs [ 2 ]
>1748	PrimaryExpression	2
>1749	Identifier	prhs
>1750	Callee	mxGetPr
>1751	Identifier	mxGetPr
>1752	Statement	 
>1753	Statement	 
>1754	Statement	 
>1755	Statement	 
>1756	Statement	 
>1757	Statement	 
>1758	Statement	 
>1759	Statement	 
>1760	Statement	 
>1761	IfStatement	if ( mxIsSparse ( prhs [ 1 ] ) )
>1762	ElseStatement	else
>1763	CompoundStatement	 
>1764	ExpressionStatement	 
>1765	AssignmentExpr	D = new Matrix < T > ( prD , m , p )
>1766	Expression	prD , m , p
>1767	Expression	m , p
>1768	Identifier	p
>1769	Identifier	m
>1770	Identifier	prD
>1771	Identifier	D
>1772	ExpressionStatement	 
>1773	CallExpression	mxGetPr ( prhs [ 1 ] )
>1774	ArgumentList	prhs [ 1 ]
>1775	Argument	prhs [ 1 ]
>1776	ArrayIndexing	prhs [ 1 ]
>1777	PrimaryExpression	1
>1778	Identifier	prhs
>1779	Callee	mxGetPr
>1780	Identifier	mxGetPr
>1781	Statement	 
>1782	Statement	 
>1783	Statement	 
>1784	Statement	 
>1785	Statement	 
>1786	Statement	 
>1787	Statement	 
>1788	Statement	 
>1789	Statement	 
>1790	CompoundStatement	 
>1791	ExpressionStatement	 
>1792	AssignmentExpr	D = new SpMatrix < T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , mD , p , D_pB2 [ p ] )
>1793	Expression	D_v2 , D_r2 , D_pB2 , D_pE2 , mD , p , D_pB2 [ p ]
>1794	Expression	D_r2 , D_pB2 , D_pE2 , mD , p , D_pB2 [ p ]
>1795	Expression	D_pB2 , D_pE2 , mD , p , D_pB2 [ p ]
>1796	Expression	D_pE2 , mD , p , D_pB2 [ p ]
>1797	Expression	mD , p , D_pB2 [ p ]
>1798	Expression	p , D_pB2 [ p ]
>1799	ArrayIndexing	D_pB2 [ p ]
>1800	Identifier	p
>1801	Identifier	D_pB2
>1802	Identifier	p
>1803	Identifier	mD
>1804	Identifier	D_pE2
>1805	Identifier	D_pB2
>1806	Identifier	D_r2
>1807	Identifier	D_v2
>1808	Identifier	D
>1809	ExpressionStatement	 
>1810	RelationalExpression	createCopySparse < T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p )
>1811	RelationalExpression	T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p )
>1812	Expression	D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p
>1813	Expression	D_r2 , D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p
>1814	Expression	D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p
>1815	Expression	D_pE2 , D_v , D_r , D_pB , D_pE , p
>1816	Expression	D_v , D_r , D_pB , D_pE , p
>1817	Expression	D_r , D_pB , D_pE , p
>1818	Expression	D_pB , D_pE , p
>1819	Expression	D_pE , p
>1820	Identifier	p
>1821	Identifier	D_pE
>1822	Identifier	D_pB
>1823	Identifier	D_r
>1824	Identifier	D_v
>1825	Identifier	D_pE2
>1826	Identifier	D_pB2
>1827	Identifier	D_r2
>1828	Identifier	D_v2
>1829	Identifier	T
>1830	Identifier	createCopySparse
>1831	ExpressionStatement	 
>1832	AssignmentExpr	D_pE = D_pB + 1
>1833	AdditiveExpression	D_pB + 1
>1834	PrimaryExpression	1
>1835	Identifier	D_pB
>1836	Identifier	D_pE
>1837	ExpressionStatement	 
>1838	AssignmentExpr	D_pB = mxGetJc ( prhs [ 1 ] )
>1839	CallExpression	mxGetJc ( prhs [ 1 ] )
>1840	ArgumentList	prhs [ 1 ]
>1841	Argument	prhs [ 1 ]
>1842	ArrayIndexing	prhs [ 1 ]
>1843	PrimaryExpression	1
>1844	Identifier	prhs
>1845	Callee	mxGetJc
>1846	Identifier	mxGetJc
>1847	Identifier	D_pB
>1848	ExpressionStatement	 
>1849	AssignmentExpr	D_r = mxGetIr ( prhs [ 1 ] )
>1850	CallExpression	mxGetIr ( prhs [ 1 ] )
>1851	ArgumentList	prhs [ 1 ]
>1852	Argument	prhs [ 1 ]
>1853	ArrayIndexing	prhs [ 1 ]
>1854	PrimaryExpression	1
>1855	Identifier	prhs
>1856	Callee	mxGetIr
>1857	Identifier	mxGetIr
>1858	Identifier	D_r
>1859	ExpressionStatement	 
>1860	CallExpression	mxGetPr ( prhs [ 1 ] )
>1861	ArgumentList	prhs [ 1 ]
>1862	Argument	prhs [ 1 ]
>1863	ArrayIndexing	prhs [ 1 ]
>1864	PrimaryExpression	1
>1865	Identifier	prhs
>1866	Callee	mxGetPr
>1867	Identifier	mxGetPr
>1868	Statement	 
>1869	Statement	 
>1870	Statement	 
>1871	Statement	 
>1872	Statement	 
>1873	Statement	 
>1874	Statement	 
>1875	Condition	 
>1876	CallExpression	mxIsSparse ( prhs [ 1 ] )
>1877	ArgumentList	prhs [ 1 ]
>1878	Argument	prhs [ 1 ]
>1879	ArrayIndexing	prhs [ 1 ]
>1880	PrimaryExpression	1
>1881	Identifier	prhs
>1882	Callee	mxIsSparse
>1883	Identifier	mxIsSparse
>1884	IdentifierDeclStatement	 
>1885	IdentifierDecl	* D_v2
>1886	Identifier	D_v2
>1887	IdentifierDeclType	T *
>1888	IdentifierDeclStatement	 
>1889	IdentifierDecl	* D_pE2
>1890	Identifier	D_pE2
>1891	IdentifierDeclType	long *
>1892	IdentifierDecl	* D_pB2
>1893	Identifier	D_pB2
>1894	IdentifierDeclType	long *
>1895	IdentifierDecl	* D_r2
>1896	Identifier	D_r2
>1897	IdentifierDeclType	long *
>1898	IdentifierDeclStatement	 
>1899	IdentifierDecl	* D_pE
>1900	Identifier	D_pE
>1901	IdentifierDeclType	mwSize *
>1902	IdentifierDecl	* D_pB
>1903	Identifier	D_pB
>1904	IdentifierDeclType	mwSize *
>1905	IdentifierDecl	* D_r
>1906	Identifier	D_r
>1907	IdentifierDeclType	mwSize *
>1908	IdentifierDeclStatement	 
>1909	IdentifierDecl	* D_v
>1910	Identifier	D_v
>1911	IdentifierDeclType	double *
>1912	IdentifierDeclStatement	 
>1913	IdentifierDecl	* D
>1914	Identifier	D
>1915	IdentifierDeclType	AbstractMatrixB < T > *
>1916	ExpressionStatement	 
>1917	ArrayIndexing	dimsD [ 1 ]
>1918	PrimaryExpression	1
>1919	Identifier	dimsD
>1920	Statement	 
>1921	Statement	 
>1922	Statement	 
>1923	Statement	 
>1924	Statement	 
>1925	Statement	 
>1926	Statement	 
>1927	ExpressionStatement	 
>1928	ArrayIndexing	dimsD [ 0 ]
>1929	PrimaryExpression	0
>1930	Identifier	dimsD
>1931	Statement	 
>1932	Statement	 
>1933	Statement	 
>1934	Statement	 
>1935	Statement	 
>1936	Statement	 
>1937	Statement	 
>1938	IdentifierDeclStatement	 
>1939	IdentifierDecl	* dimsD = mxGetDimensions ( prhs [ 1 ] )
>1940	AssignmentExpr	* dimsD = mxGetDimensions ( prhs [ 1 ] )
>1941	CallExpression	mxGetDimensions ( prhs [ 1 ] )
>1942	ArgumentList	prhs [ 1 ]
>1943	Argument	prhs [ 1 ]
>1944	ArrayIndexing	prhs [ 1 ]
>1945	PrimaryExpression	1
>1946	Identifier	prhs
>1947	Callee	mxGetDimensions
>1948	Identifier	mxGetDimensions
>1949	Identifier	dimsD
>1950	Identifier	dimsD
>1951	IdentifierDeclType	const mwSize *
>1952	IdentifierDeclStatement	 
>1953	IdentifierDecl	X ( prX , m , n )
>1954	Expression	prX , m , n
>1955	Expression	m , n
>1956	Identifier	n
>1957	Identifier	m
>1958	Identifier	prX
>1959	Identifier	X
>1960	IdentifierDeclType	Matrix < T >
>1961	ExpressionStatement	 
>1962	ArrayIndexing	dimsX [ 1 ]
>1963	PrimaryExpression	1
>1964	Identifier	dimsX
>1965	Statement	 
>1966	Statement	 
>1967	Statement	 
>1968	Statement	 
>1969	Statement	 
>1970	Statement	 
>1971	Statement	 
>1972	ExpressionStatement	 
>1973	ArrayIndexing	dimsX [ 0 ]
>1974	PrimaryExpression	0
>1975	Identifier	dimsX
>1976	Statement	 
>1977	Statement	 
>1978	Statement	 
>1979	Statement	 
>1980	Statement	 
>1981	Statement	 
>1982	Statement	 
>1983	IdentifierDeclStatement	 
>1984	IdentifierDecl	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>1985	AssignmentExpr	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>1986	CallExpression	mxGetDimensions ( prhs [ 0 ] )
>1987	ArgumentList	prhs [ 0 ]
>1988	Argument	prhs [ 0 ]
>1989	ArrayIndexing	prhs [ 0 ]
>1990	PrimaryExpression	0
>1991	Identifier	prhs
>1992	Callee	mxGetDimensions
>1993	Identifier	mxGetDimensions
>1994	Identifier	dimsX
>1995	Identifier	dimsX
>1996	IdentifierDeclType	const mwSize *
>1997	ExpressionStatement	 
>1998	CallExpression	mxGetPr ( prhs [ 0 ] )
>1999	ArgumentList	prhs [ 0 ]
>2000	Argument	prhs [ 0 ]
>2001	ArrayIndexing	prhs [ 0 ]
>2002	PrimaryExpression	0
>2003	Identifier	prhs
>2004	Callee	mxGetPr
>2005	Identifier	mxGetPr
>2006	Statement	 
>2007	Statement	 
>2008	Statement	 
>2009	Statement	 
>2010	Statement	 
>2011	Statement	 
>2012	Statement	 
>2013	Statement	 
>2014	Statement	 
>2015	IfStatement	if ( ! mxIsStruct ( prhs [ 4 ] ) )
>2016	ExpressionStatement	 
>2017	CallExpression	mexErrMsgTxt ( \"argument 5 should be struct\" )
>2018	ArgumentList	\"argument 5 should be struct\"
>2019	Argument	\"argument 5 should be struct\"
>2020	PrimaryExpression	\"argument 5 should be struct\"
>2021	Callee	mexErrMsgTxt
>2022	Identifier	mexErrMsgTxt
>2023	Condition	 
>2024	UnaryOp	! mxIsStruct ( prhs [ 4 ] )
>2025	CallExpression	mxIsStruct ( prhs [ 4 ] )
>2026	ArgumentList	prhs [ 4 ]
>2027	Argument	prhs [ 4 ]
>2028	ArrayIndexing	prhs [ 4 ]
>2029	PrimaryExpression	4
>2030	Identifier	prhs
>2031	Callee	mxIsStruct
>2032	Identifier	mxIsStruct
>2033	UnaryOperator	!
>2034	IfStatement	if ( ! mxIsStruct ( prhs [ 3 ] ) )
>2035	ExpressionStatement	 
>2036	CallExpression	mexErrMsgTxt ( \"argument 4 should be struct\" )
>2037	ArgumentList	\"argument 4 should be struct\"
>2038	Argument	\"argument 4 should be struct\"
>2039	PrimaryExpression	\"argument 4 should be struct\"
>2040	Callee	mexErrMsgTxt
>2041	Identifier	mexErrMsgTxt
>2042	Condition	 
>2043	UnaryOp	! mxIsStruct ( prhs [ 3 ] )
>2044	CallExpression	mxIsStruct ( prhs [ 3 ] )
>2045	ArgumentList	prhs [ 3 ]
>2046	Argument	prhs [ 3 ]
>2047	ArrayIndexing	prhs [ 3 ]
>2048	PrimaryExpression	3
>2049	Identifier	prhs
>2050	Callee	mxIsStruct
>2051	Identifier	mxIsStruct
>2052	UnaryOperator	!
>2053	IfStatement	if ( mxIsSparse ( prhs [ 2 ] ) )
>2054	ExpressionStatement	 
>2055	CallExpression	mexErrMsgTxt ( \"argument 3 should not be sparse\" )
>2056	ArgumentList	\"argument 3 should not be sparse\"
>2057	Argument	\"argument 3 should not be sparse\"
>2058	PrimaryExpression	\"argument 3 should not be sparse\"
>2059	Callee	mexErrMsgTxt
>2060	Identifier	mexErrMsgTxt
>2061	Condition	 
>2062	CallExpression	mxIsSparse ( prhs [ 2 ] )
>2063	ArgumentList	prhs [ 2 ]
>2064	Argument	prhs [ 2 ]
>2065	ArrayIndexing	prhs [ 2 ]
>2066	PrimaryExpression	2
>2067	Identifier	prhs
>2068	Callee	mxIsSparse
>2069	Identifier	mxIsSparse
>2070	IfStatement	if ( ! mexCheckType < T > ( prhs [ 2 ] ) )
>2071	ExpressionStatement	 
>2072	CallExpression	mexErrMsgTxt ( \"type of argument 3 is not consistent\" )
>2073	ArgumentList	\"type of argument 3 is not consistent\"
>2074	Argument	\"type of argument 3 is not consistent\"
>2075	PrimaryExpression	\"type of argument 3 is not consistent\"
>2076	Callee	mexErrMsgTxt
>2077	Identifier	mexErrMsgTxt
>2078	Condition	 
>2079	RelationalExpression	! mexCheckType < T > ( prhs [ 2 ] )
>2080	RelationalExpression	T > ( prhs [ 2 ] )
>2081	ArrayIndexing	prhs [ 2 ]
>2082	PrimaryExpression	2
>2083	Identifier	prhs
>2084	Identifier	T
>2085	UnaryOp	! mexCheckType
>2086	Identifier	mexCheckType
>2087	UnaryOperator	!
>2088	IfStatement	if ( ! mexCheckType < T > ( prhs [ 1 ] ) )
>2089	ExpressionStatement	 
>2090	CallExpression	mexErrMsgTxt ( \"type of argument 2 is not consistent\" )
>2091	ArgumentList	\"type of argument 2 is not consistent\"
>2092	Argument	\"type of argument 2 is not consistent\"
>2093	PrimaryExpression	\"type of argument 2 is not consistent\"
>2094	Callee	mexErrMsgTxt
>2095	Identifier	mexErrMsgTxt
>2096	Condition	 
>2097	RelationalExpression	! mexCheckType < T > ( prhs [ 1 ] )
>2098	RelationalExpression	T > ( prhs [ 1 ] )
>2099	ArrayIndexing	prhs [ 1 ]
>2100	PrimaryExpression	1
>2101	Identifier	prhs
>2102	Identifier	T
>2103	UnaryOp	! mexCheckType
>2104	Identifier	mexCheckType
>2105	UnaryOperator	!
>2106	IfStatement	if ( mxIsSparse ( prhs [ 0 ] ) )
>2107	ExpressionStatement	 
>2108	CallExpression	mexErrMsgTxt ( \"argument 1 should not be sparse\" )
>2109	ArgumentList	\"argument 1 should not be sparse\"
>2110	Argument	\"argument 1 should not be sparse\"
>2111	PrimaryExpression	\"argument 1 should not be sparse\"
>2112	Callee	mexErrMsgTxt
>2113	Identifier	mexErrMsgTxt
>2114	Condition	 
>2115	CallExpression	mxIsSparse ( prhs [ 0 ] )
>2116	ArgumentList	prhs [ 0 ]
>2117	Argument	prhs [ 0 ]
>2118	ArrayIndexing	prhs [ 0 ]
>2119	PrimaryExpression	0
>2120	Identifier	prhs
>2121	Callee	mxIsSparse
>2122	Identifier	mxIsSparse
>2123	IfStatement	if ( ! mexCheckType < T > ( prhs [ 0 ] ) )
>2124	ExpressionStatement	 
>2125	CallExpression	mexErrMsgTxt ( \"type of argument 1 is not consistent\" )
>2126	ArgumentList	\"type of argument 1 is not consistent\"
>2127	Argument	\"type of argument 1 is not consistent\"
>2128	PrimaryExpression	\"type of argument 1 is not consistent\"
>2129	Callee	mexErrMsgTxt
>2130	Identifier	mexErrMsgTxt
>2131	Condition	 
>2132	RelationalExpression	! mexCheckType < T > ( prhs [ 0 ] )
>2133	RelationalExpression	T > ( prhs [ 0 ] )
>2134	ArrayIndexing	prhs [ 0 ]
>2135	PrimaryExpression	0
>2136	Identifier	prhs
>2137	Identifier	T
>2138	UnaryOp	! mexCheckType
>2139	Identifier	mexCheckType
>2140	UnaryOperator	!
>2278	FunctionDef	mexFunction (int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ])
>2279	ParameterList	int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ]
>2280	Parameter	 
>2281	Identifier	prhs
>2282	ParameterType	const mxArray * [ ]
>2283	Parameter	 
>2284	Identifier	nrhs
>2285	ParameterType	int
>2286	Parameter	 
>2287	Identifier	plhs
>2288	ParameterType	mxArray * [ ]
>2289	Parameter	 
>2290	Identifier	nlhs
>2291	ParameterType	int
>2292	ReturnType	void
>2293	CompoundStatement	 
>2294	IfStatement	if ( mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS )
>2295	ElseStatement	else
>2296	CompoundStatement	 
>2297	ExpressionStatement	 
>2298	RelationalExpression	callFunction < float > ( plhs , prhs , nlhs )
>2299	RelationalExpression	float > ( plhs , prhs , nlhs )
>2300	Expression	plhs , prhs , nlhs
>2301	Expression	prhs , nlhs
>2302	Identifier	nlhs
>2303	Identifier	prhs
>2304	Identifier	plhs
>2305	Identifier	float
>2306	Identifier	callFunction
>2307	CompoundStatement	 
>2308	ExpressionStatement	 
>2309	RelationalExpression	callFunction < double > ( plhs , prhs , nlhs )
>2310	RelationalExpression	double > ( plhs , prhs , nlhs )
>2311	Expression	plhs , prhs , nlhs
>2312	Expression	prhs , nlhs
>2313	Identifier	nlhs
>2314	Identifier	prhs
>2315	Identifier	plhs
>2316	Identifier	double
>2317	Identifier	callFunction
>2318	Condition	 
>2319	EqualityExpression	mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS
>2320	Identifier	mxDOUBLE_CLASS
>2321	CallExpression	mxGetClassID ( prhs [ 0 ] )
>2322	ArgumentList	prhs [ 0 ]
>2323	Argument	prhs [ 0 ]
>2324	ArrayIndexing	prhs [ 0 ]
>2325	PrimaryExpression	0
>2326	Identifier	prhs
>2327	Callee	mxGetClassID
>2328	Identifier	mxGetClassID
>2329	IfStatement	if ( nlhs != 1 && nlhs != 2 )
>2330	ExpressionStatement	 
>2331	CallExpression	mexErrMsgTxt ( \"Bad number of output arguments\" )
>2332	ArgumentList	\"Bad number of output arguments\"
>2333	Argument	\"Bad number of output arguments\"
>2334	PrimaryExpression	\"Bad number of output arguments\"
>2335	Callee	mexErrMsgTxt
>2336	Identifier	mexErrMsgTxt
>2337	Condition	 
>2338	AndExpression	nlhs != 1 && nlhs != 2
>2339	EqualityExpression	nlhs != 2
>2340	PrimaryExpression	2
>2341	Identifier	nlhs
>2342	EqualityExpression	nlhs != 1
>2343	PrimaryExpression	1
>2344	Identifier	nlhs
>2345	IfStatement	if ( nrhs != 5 )
>2346	ExpressionStatement	 
>2347	CallExpression	mexErrMsgTxt ( \"Bad number of inputs arguments\" )
>2348	ArgumentList	\"Bad number of inputs arguments\"
>2349	Argument	\"Bad number of inputs arguments\"
>2350	PrimaryExpression	\"Bad number of inputs arguments\"
>2351	Callee	mexErrMsgTxt
>2352	Identifier	mexErrMsgTxt
>2353	Condition	 
>2354	EqualityExpression	nrhs != 5
>2355	PrimaryExpression	5
>2356	Identifier	nrhs
<3=15,14,4
<4=11,8,5
<5=7,6
<8=9,10
<11=13,12
<15=2123,2106,2088,2070,2053,2034,2015,2014,2013,2012,2011,2010,2009,2008,2007,2006,1997,1983,1982,1981,1980,1979,1978,1977,1976,1972,1971,1970,1969,1968,1967,1966,1965,1961,1952,1938,1937,1936,1935,1934,1933,1932,1931,1927,1926,1925,1924,1923,1922,1921,1920,1916,1912,1908,1898,1888,1884,1761,1760,1759,1758,1757,1756,1755,1754,1753,1752,1743,1729,1728,1727,1726,1725,1724,1723,1722,1718,1717,1716,1715,1714,1713,1712,1711,1707,1698,1680,1679,1678,1677,1676,1675,1674,1673,1672,1671,1670,1669,1662,1650,1649,1648,1647,1646,1645,1644,1643,1642,1641,1634,1622,1621,1620,1619,1618,1617,1616,1615,1614,1613,1612,1611,1610,1609,1608,1607,1606,1605,1604,1600,1582,1570,1569,1568,1567,1566,1565,1564,1563,1562,1561,1560,1559,1552,1540,1539,1538,1537,1536,1535,1534,1533,1532,1531,1530,1529,1528,1527,1526,1525,1524,1523,1522,1518,1506,1505,1504,1503,1502,1501,1500,1499,1498,1497,1490,1483,1461,1449,1431,1419,1407,1406,1405,1404,1403,1402,1401,1400,1399,1398,1397,1396,1395,1394,1393,1392,1391,1390,1389,1385,1373,1372,1371,1370,1369,1368,1367,1366,1365,1364,1357,1339,1327,1326,1325,1324,1323,1322,1321,1320,1319,1318,1317,1316,1315,1314,1313,1312,1311,1310,1309,1308,1307,1306,1305,1304,1303,1302,1301,1300,1299,1298,1297,1296,1295,1288,1276,1275,1274,1273,1272,1271,1270,1269,1268,1267,1260,1259,1258,1257,1256,1255,1254,1253,1252,1251,1244,1232,1231,1230,1229,1228,1227,1226,1225,1224,1223,1214,1205,1201,1200,1199,1198,1197,1196,1195,1194,1193,1183,1182,1181,1180,1179,1178,1177,1176,1175,1167,1151,1150,1149,1148,1147,1146,1145,1144,1143,1135,1119,1103,1102,1101,1100,1099,1098,1097,1096,1095,1087,1071,1055,1032,1016,1000,984,968,967,966,965,964,963,16,18,19,46,50,51,52,58,140,164,168,174,180,186,192,198,204,228,234,238,270,297,317,478,547,563,584,600,616,632,648,664,680,696,710,723,742,756,769,837,853,869,888,904,920,936,952,960,961,962
<16=17
<19=37,20
<20=21
<21=22
<22=36,23
<23=35,24
<24=34,25
<25=33,26
<26=32,27
<27=31,28
<28=30,29
<37=38
<38=44,39
<39=40
<40=41
<41=43,42
<44=45
<46=47
<47=49,48
<52=54,53
<54=55
<55=57,56
<58=136,59
<59=114,113,112,111,110,109,108,107,106,105,96,60
<60=88,72,69,61
<61=62
<62=66,63
<63=65,64
<66=68,67
<69=71,70
<72=73
<73=87,74
<74=81,75
<75=77,76
<77=78
<78=80,79
<81=83,82
<83=84
<84=86,85
<88=89
<89=90
<90=95,94,91
<91=93,92
<96=97
<97=103,98
<98=99
<99=100
<100=102,101
<103=104
<114=115
<115=133,116
<116=132,117
<117=131,118
<118=125,119
<119=121,120
<121=122
<122=124,123
<125=127,126
<127=128
<128=130,129
<133=135,134
<136=137
<137=139,138
<140=141
<141=163,142
<142=162,143
<143=161,144
<144=158,145
<145=157,146
<146=156,147
<147=155,148
<148=154,149
<149=153,150
<150=152,151
<158=160,159
<164=165
<165=167,166
<168=169
<169=171,170
<171=173,172
<174=175
<175=177,176
<177=179,178
<180=181
<181=183,182
<183=185,184
<186=187
<187=189,188
<189=191,190
<192=193
<193=195,194
<195=197,196
<198=199
<199=201,200
<201=203,202
<204=220,216,213,205
<205=206
<206=210,207
<207=209,208
<210=212,211
<213=215,214
<216=217
<217=219,218
<220=221
<221=222
<222=227,226,223
<223=225,224
<228=229
<229=231,230
<231=233,232
<234=235
<235=237,236
<238=262,239
<239=256,240
<240=241
<241=253,242
<242=251,243
<243=249,244
<244=245
<245=247,246
<247=248
<249=250
<251=252
<253=255,254
<256=257
<257=259,258
<259=261,260
<262=263
<263=267,264
<264=266,265
<267=269,268
<270=279,271
<271=272
<272=273
<273=277,274
<274=275
<275=276
<277=278
<279=280
<280=292,281
<281=291,282
<282=290,283
<283=285,284
<285=287,286
<287=289,288
<292=294,293
<294=296,295
<297=305,298
<298=299
<299=303,300
<300=301
<301=302
<303=304
<305=306
<306=312,307
<307=309,308
<309=311,310
<312=314,313
<314=316,315
<317=454,446,318
<318=319
<319=440,354,320
<320=321
<321=330,322
<322=323
<323=324
<324=328,325
<325=326
<326=327
<328=329
<330=331
<331=349,332
<332=341,333
<333=340,334
<334=336,335
<336=337
<337=339,338
<341=348,342
<342=344,343
<344=345
<345=347,346
<349=351,350
<351=353,352
<354=436,427,426,425,424,423,422,421,420,413,412,411,410,409,408,407,406,399,387,355
<355=372,356
<356=364,357
<357=358
<358=362,359
<359=360
<360=361
<362=363
<364=365
<365=371,366
<366=370,367
<367=369,368
<372=373
<373=377,374
<374=376,375
<377=379,378
<379=386,380
<380=382,381
<382=383
<383=385,384
<387=395,388
<388=389
<389=393,390
<390=391
<391=392
<393=394
<395=396
<396=398,397
<399=400
<400=402,401
<402=403
<403=405,404
<413=414
<414=416,415
<416=417
<417=419,418
<427=428
<428=432,429
<429=430
<430=431
<432=433
<433=435,434
<436=437
<437=439,438
<440=441
<441=443,442
<443=445,444
<446=447
<447=448
<448=452,449
<449=450
<450=451
<452=453
<454=455
<455=467,456
<456=464,457
<457=461,458
<458=460,459
<461=463,462
<464=466,465
<467=473,468
<468=470,469
<470=472,471
<473=475,474
<475=477,476
<478=543,479
<479=525,513,499,493,480
<480=481
<481=491,482
<482=489,485,483
<483=484
<485=486
<486=488,487
<489=490
<491=492
<493=494
<494=496,495
<496=498,497
<499=500
<500=512,511,501
<501=510,502
<502=504,503
<504=508,505
<505=506
<506=507
<508=509
<513=521,514
<514=515
<515=519,516
<516=517
<517=518
<519=520
<521=522
<522=524,523
<525=526
<526=542,541,527
<527=540,528
<528=538,529
<529=534,532,530
<530=531
<532=533
<534=535
<535=537,536
<538=539
<543=544
<544=546,545
<547=548
<548=560,549
<549=559,550
<550=558,551
<551=555,552
<552=554,553
<555=557,556
<560=562,561
<563=564
<564=581,565
<565=580,566
<566=579,567
<567=576,568
<568=575,569
<569=573,570
<570=571
<571=572
<573=574
<576=578,577
<581=583,582
<584=585
<585=597,586
<586=596,587
<587=595,588
<588=592,589
<589=591,590
<592=594,593
<597=599,598
<600=601
<601=613,602
<602=612,603
<603=611,604
<604=608,605
<605=607,606
<608=610,609
<613=615,614
<616=617
<617=629,618
<618=628,619
<619=627,620
<620=624,621
<621=623,622
<624=626,625
<629=631,630
<632=633
<633=645,634
<634=644,635
<635=643,636
<636=640,637
<637=639,638
<640=642,641
<645=647,646
<648=649
<649=661,650
<650=660,651
<651=659,652
<652=656,653
<653=655,654
<656=658,657
<661=663,662
<664=665
<665=677,666
<666=676,667
<667=675,668
<668=672,669
<669=671,670
<672=674,673
<677=679,678
<680=681
<681=693,682
<682=692,683
<683=691,684
<684=688,685
<685=687,686
<688=690,689
<693=695,694
<696=704,697
<697=698
<698=702,699
<699=700
<700=701
<702=703
<704=705
<705=707,706
<707=709,708
<710=711
<711=720,712
<712=718,713
<713=714
<714=715
<715=717,716
<718=719
<720=722,721
<723=724
<724=740,725
<725=736,734,730,726
<726=727
<727=729,728
<730=731
<731=733,732
<734=735
<736=737
<737=739,738
<740=741
<742=750,743
<743=744
<744=748,745
<745=746
<746=747
<748=749
<750=751
<751=753,752
<753=755,754
<756=757
<757=766,758
<758=764,759
<759=760
<760=761
<761=763,762
<764=765
<766=768,767
<769=833,770
<770=815,803,787,786,785,784,783,782,781,780,779,778,771
<771=772
<772=776,773
<773=774
<774=775
<776=777
<787=795,788
<788=789
<789=793,790
<790=791
<791=792
<793=794
<795=796
<796=800,797
<797=799,798
<800=802,801
<803=811,804
<804=805
<805=809,806
<806=807
<807=808
<809=810
<811=812
<812=814,813
<815=816
<816=832,831,817
<817=830,818
<818=828,819
<819=824,822,820
<820=821
<822=823
<824=825
<825=827,826
<828=829
<833=834
<834=836,835
<837=838
<838=850,839
<839=849,840
<840=848,841
<841=845,842
<842=844,843
<845=847,846
<850=852,851
<853=854
<854=866,855
<855=865,856
<856=864,857
<857=861,858
<858=860,859
<861=863,862
<866=868,867
<869=870
<870=886,871
<871=882,880,876,872
<872=873
<873=875,874
<876=877
<877=879,878
<880=881
<882=883
<883=885,884
<886=887
<888=889
<889=901,890
<890=900,891
<891=899,892
<892=896,893
<893=895,894
<896=898,897
<901=903,902
<904=905
<905=917,906
<906=916,907
<907=915,908
<908=912,909
<909=911,910
<912=914,913
<917=919,918
<920=921
<921=933,922
<922=932,923
<923=931,924
<924=928,925
<925=927,926
<928=930,929
<933=935,934
<936=937
<937=949,938
<938=948,939
<939=947,940
<940=944,941
<941=943,942
<944=946,945
<949=951,950
<952=953
<953=957,954
<954=956,955
<957=959,958
<968=969
<969=981,970
<970=980,971
<971=979,972
<972=976,973
<973=975,974
<976=978,977
<981=983,982
<984=985
<985=997,986
<986=996,987
<987=995,988
<988=992,989
<989=991,990
<992=994,993
<997=999,998
<1000=1001
<1001=1013,1002
<1002=1012,1003
<1003=1011,1004
<1004=1008,1005
<1005=1007,1006
<1008=1010,1009
<1013=1015,1014
<1016=1017
<1017=1029,1018
<1018=1028,1019
<1019=1027,1020
<1020=1024,1021
<1021=1023,1022
<1024=1026,1025
<1029=1031,1030
<1032=1033
<1033=1052,1034
<1034=1050,1035
<1035=1048,1036
<1036=1037
<1037=1047,1038
<1038=1046,1039
<1039=1043,1040
<1040=1042,1041
<1043=1045,1044
<1048=1049
<1050=1051
<1052=1054,1053
<1055=1056
<1056=1068,1057
<1057=1067,1058
<1058=1066,1059
<1059=1063,1060
<1060=1062,1061
<1063=1065,1064
<1068=1070,1069
<1071=1072
<1072=1084,1073
<1073=1083,1074
<1074=1082,1075
<1075=1079,1076
<1076=1078,1077
<1079=1081,1080
<1084=1086,1085
<1087=1088
<1088=1092,1089
<1089=1091,1090
<1092=1094,1093
<1103=1104
<1104=1116,1105
<1105=1115,1106
<1106=1114,1107
<1107=1111,1108
<1108=1110,1109
<1111=1113,1112
<1116=1118,1117
<1119=1120
<1120=1132,1121
<1121=1131,1122
<1122=1130,1123
<1123=1127,1124
<1124=1126,1125
<1127=1129,1128
<1132=1134,1133
<1135=1136
<1136=1140,1137
<1137=1139,1138
<1140=1142,1141
<1151=1152
<1152=1164,1153
<1153=1163,1154
<1154=1162,1155
<1155=1159,1156
<1156=1158,1157
<1159=1161,1160
<1164=1166,1165
<1167=1168
<1168=1172,1169
<1169=1171,1170
<1172=1174,1173
<1183=1184
<1184=1190,1185
<1185=1189,1186
<1186=1188,1187
<1190=1192,1191
<1201=1202
<1202=1204,1203
<1205=1206
<1206=1213,1212,1207
<1207=1211,1208
<1208=1210,1209
<1214=1215
<1215=1221,1216
<1216=1217
<1217=1218
<1218=1220,1219
<1221=1222
<1232=1233
<1233=1241,1234
<1234=1240,1235
<1235=1239,1236
<1236=1238,1237
<1241=1243,1242
<1244=1245
<1245=1249,1246
<1246=1247
<1247=1248
<1249=1250
<1260=1261
<1261=1265,1262
<1262=1263
<1263=1264
<1265=1266
<1276=1284,1277
<1277=1278
<1278=1282,1279
<1279=1280
<1280=1281
<1282=1283
<1284=1285
<1285=1287,1286
<1288=1289
<1289=1293,1290
<1290=1291
<1291=1292
<1293=1294
<1327=1328
<1328=1338,1337,1329
<1329=1336,1330
<1330=1334,1331
<1331=1332
<1332=1333
<1334=1335
<1339=1340
<1340=1356,1355,1341
<1341=1354,1342
<1342=1352,1343
<1343=1348,1346,1344
<1344=1345
<1346=1347
<1348=1349
<1349=1351,1350
<1352=1353
<1357=1358
<1358=1362,1359
<1359=1360
<1360=1361
<1362=1363
<1373=1381,1374
<1374=1375
<1375=1379,1376
<1376=1377
<1377=1378
<1379=1380
<1381=1382
<1382=1384,1383
<1385=1386
<1386=1388,1387
<1407=1408
<1408=1418,1417,1409
<1409=1416,1410
<1410=1414,1411
<1411=1412
<1412=1413
<1414=1415
<1419=1427,1420
<1420=1421
<1421=1425,1422
<1422=1423
<1423=1424
<1425=1426
<1427=1428
<1428=1430,1429
<1431=1432
<1432=1448,1447,1433
<1433=1446,1434
<1434=1444,1435
<1435=1440,1438,1436
<1436=1437
<1438=1439
<1440=1441
<1441=1443,1442
<1444=1445
<1449=1457,1450
<1450=1451
<1451=1455,1452
<1452=1453
<1453=1454
<1455=1456
<1457=1458
<1458=1460,1459
<1461=1475,1471,1468,1462
<1462=1463
<1463=1467,1464
<1464=1466,1465
<1468=1470,1469
<1471=1472
<1472=1474,1473
<1475=1476
<1476=1477
<1477=1482,1481,1478
<1478=1480,1479
<1483=1484
<1484=1489,1488,1485
<1485=1487,1486
<1490=1491
<1491=1495,1492
<1492=1493
<1493=1494
<1495=1496
<1506=1514,1507
<1507=1508
<1508=1512,1509
<1509=1510
<1510=1511
<1512=1513
<1514=1515
<1515=1517,1516
<1518=1519
<1519=1521,1520
<1540=1541
<1541=1551,1550,1542
<1542=1549,1543
<1543=1547,1544
<1544=1545
<1545=1546
<1547=1548
<1552=1553
<1553=1557,1554
<1554=1555
<1555=1556
<1557=1558
<1570=1578,1571
<1571=1572
<1572=1576,1573
<1573=1574
<1574=1575
<1576=1577
<1578=1579
<1579=1581,1580
<1582=1583
<1583=1599,1598,1584
<1584=1597,1585
<1585=1595,1586
<1586=1591,1589,1587
<1587=1588
<1589=1590
<1591=1592
<1592=1594,1593
<1595=1596
<1600=1601
<1601=1603,1602
<1622=1623
<1623=1633,1632,1624
<1624=1631,1625
<1625=1629,1626
<1626=1627
<1627=1628
<1629=1630
<1634=1635
<1635=1639,1636
<1636=1637
<1637=1638
<1639=1640
<1650=1658,1651
<1651=1652
<1652=1656,1653
<1653=1654
<1654=1655
<1656=1657
<1658=1659
<1659=1661,1660
<1662=1663
<1663=1667,1664
<1664=1665
<1665=1666
<1667=1668
<1680=1681
<1681=1697,1696,1682
<1682=1695,1683
<1683=1693,1684
<1684=1689,1687,1685
<1685=1686
<1687=1688
<1689=1690
<1690=1692,1691
<1693=1694
<1698=1699
<1699=1706,1705,1700
<1700=1704,1701
<1701=1703,1702
<1707=1708
<1708=1710,1709
<1718=1719
<1719=1721,1720
<1729=1730
<1730=1742,1741,1731
<1731=1740,1732
<1732=1738,1733
<1733=1734
<1734=1735
<1735=1737,1736
<1738=1739
<1743=1744
<1744=1750,1745
<1745=1746
<1746=1747
<1747=1749,1748
<1750=1751
<1761=1875,1790,1762
<1762=1763
<1763=1789,1788,1787,1786,1785,1784,1783,1782,1781,1772,1764
<1764=1765
<1765=1771,1766
<1766=1770,1767
<1767=1769,1768
<1772=1773
<1773=1779,1774
<1774=1775
<1775=1776
<1776=1778,1777
<1779=1780
<1790=1874,1873,1872,1871,1870,1869,1868,1859,1848,1837,1831,1809,1791
<1791=1792
<1792=1808,1793
<1793=1807,1794
<1794=1806,1795
<1795=1805,1796
<1796=1804,1797
<1797=1803,1798
<1798=1802,1799
<1799=1801,1800
<1809=1810
<1810=1830,1811
<1811=1829,1812
<1812=1828,1813
<1813=1827,1814
<1814=1826,1815
<1815=1825,1816
<1816=1824,1817
<1817=1823,1818
<1818=1822,1819
<1819=1821,1820
<1831=1832
<1832=1836,1833
<1833=1835,1834
<1837=1838
<1838=1847,1839
<1839=1845,1840
<1840=1841
<1841=1842
<1842=1844,1843
<1845=1846
<1848=1849
<1849=1858,1850
<1850=1856,1851
<1851=1852
<1852=1853
<1853=1855,1854
<1856=1857
<1859=1860
<1860=1866,1861
<1861=1862
<1862=1863
<1863=1865,1864
<1866=1867
<1875=1876
<1876=1882,1877
<1877=1878
<1878=1879
<1879=1881,1880
<1882=1883
<1884=1885
<1885=1887,1886
<1888=1895,1892,1889
<1889=1891,1890
<1892=1894,1893
<1895=1897,1896
<1898=1905,1902,1899
<1899=1901,1900
<1902=1904,1903
<1905=1907,1906
<1908=1909
<1909=1911,1910
<1912=1913
<1913=1915,1914
<1916=1917
<1917=1919,1918
<1927=1928
<1928=1930,1929
<1938=1939
<1939=1951,1950,1940
<1940=1949,1941
<1941=1947,1942
<1942=1943
<1943=1944
<1944=1946,1945
<1947=1948
<1952=1953
<1953=1960,1959,1954
<1954=1958,1955
<1955=1957,1956
<1961=1962
<1962=1964,1963
<1972=1973
<1973=1975,1974
<1983=1984
<1984=1996,1995,1985
<1985=1994,1986
<1986=1992,1987
<1987=1988
<1988=1989
<1989=1991,1990
<1992=1993
<1997=1998
<1998=2004,1999
<1999=2000
<2000=2001
<2001=2003,2002
<2004=2005
<2015=2023,2016
<2016=2017
<2017=2021,2018
<2018=2019
<2019=2020
<2021=2022
<2023=2024
<2024=2033,2025
<2025=2031,2026
<2026=2027
<2027=2028
<2028=2030,2029
<2031=2032
<2034=2042,2035
<2035=2036
<2036=2040,2037
<2037=2038
<2038=2039
<2040=2041
<2042=2043
<2043=2052,2044
<2044=2050,2045
<2045=2046
<2046=2047
<2047=2049,2048
<2050=2051
<2053=2061,2054
<2054=2055
<2055=2059,2056
<2056=2057
<2057=2058
<2059=2060
<2061=2062
<2062=2068,2063
<2063=2064
<2064=2065
<2065=2067,2066
<2068=2069
<2070=2078,2071
<2071=2072
<2072=2076,2073
<2073=2074
<2074=2075
<2076=2077
<2078=2079
<2079=2085,2080
<2080=2084,2081
<2081=2083,2082
<2085=2087,2086
<2088=2096,2089
<2089=2090
<2090=2094,2091
<2091=2092
<2092=2093
<2094=2095
<2096=2097
<2097=2103,2098
<2098=2102,2099
<2099=2101,2100
<2103=2105,2104
<2106=2114,2107
<2107=2108
<2108=2112,2109
<2109=2110
<2110=2111
<2112=2113
<2114=2115
<2115=2121,2116
<2116=2117
<2117=2118
<2118=2120,2119
<2121=2122
<2123=2131,2124
<2124=2125
<2125=2129,2126
<2126=2127
<2127=2128
<2129=2130
<2131=2132
<2132=2138,2133
<2133=2137,2134
<2134=2136,2135
<2138=2140,2139
<2278=2293,2292,2279
<2279=2289,2286,2283,2280
<2280=2282,2281
<2283=2285,2284
<2286=2288,2287
<2289=2291,2290
<2293=2345,2329,2294
<2294=2318,2307,2295
<2295=2296
<2296=2297
<2297=2298
<2298=2306,2299
<2299=2305,2300
<2300=2304,2301
<2301=2303,2302
<2307=2308
<2308=2309
<2309=2317,2310
<2310=2316,2311
<2311=2315,2312
<2312=2314,2313
<2318=2319
<2319=2321,2320
<2321=2327,2322
<2322=2323
<2323=2324
<2324=2326,2325
<2327=2328
<2329=2337,2330
<2330=2331
<2331=2335,2332
<2332=2333
<2333=2334
<2335=2336
<2337=2338
<2338=2342,2339
<2339=2341,2340
<2342=2344,2343
<2345=2353,2346
<2346=2347
<2347=2351,2348
<2348=2349
<2349=2350
<2351=2352
<2353=2354
<2354=2356,2355
