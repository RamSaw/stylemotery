>3	FunctionDef	pyrDownMeanSmooth (const cv 
>4	ParameterList	const cv 
>5	Parameter	 
>6	Identifier	out
>7	ParameterType	cv 
>8	Parameter	 
>9	Identifier	in
>10	ParameterType	const cv 
>11	ReturnType	static void
>12	CompoundStatement	 
>13	ForStatement	for ( int y = 0 ; y < out . rows ; ++ y )
>14	CompoundStatement	 
>15	ForStatement	for ( int x = 0 ; x < out . cols ; ++ x )
>16	CompoundStatement	 
>17	ExpressionStatement	 
>18	AssignmentExpr	out . at < T > ( y , x ) = ( T ) ( ( in . at < T > ( y0 , x0 ) + in . at < T > ( y0 , x1 ) + in . at < \
>19	CastExpression	( T ) ( ( in . at < T > ( y0 , x0 ) + in . at < T > ( y0 , x1 ) + in . at < T > ( y1 , x0 ) + in . at < T > ( y1 , \
>20	MultiplicativeExpression	( in . at < T > ( y0 , x0 ) + in . at < T > ( y0 , x1 ) + in . at < T > ( y1 , x0 ) + in . at < T > ( \
>21	PrimaryExpression	4.0f
>22	RelationalExpression	in . at < T > ( y0 , x0 ) + in . at < T > ( y0 , x1 ) + in . at < T > ( y1 , x0 ) + in . at < T > ( y1 , \
>23	RelationalExpression	T > ( y0 , x0 ) + in . at < T > ( y0 , x1 ) + in . at < T > ( y1 , x0 ) + in . at < T > ( y1 , x1 )
>24	RelationalExpression	( y0 , x0 ) + in . at < T > ( y0 , x1 ) + in . at < T > ( y1 , x0 ) + in . at < T > ( y1 , x1 )
>25	RelationalExpression	T > ( y0 , x1 ) + in . at < T > ( y1 , x0 ) + in . at < T > ( y1 , x1 )
>26	RelationalExpression	( y0 , x1 ) + in . at < T > ( y1 , x0 ) + in . at < T > ( y1 , x1 )
>27	RelationalExpression	T > ( y1 , x0 ) + in . at < T > ( y1 , x1 )
>28	RelationalExpression	( y1 , x0 ) + in . at < T > ( y1 , x1 )
>29	RelationalExpression	T > ( y1 , x1 )
>30	Expression	y1 , x1
>31	Identifier	x1
>32	Identifier	y1
>33	Identifier	T
>34	AdditiveExpression	( y1 , x0 ) + in . at
>35	MemberAccess	in . at
>36	Identifier	at
>37	Identifier	in
>38	Expression	y1 , x0
>39	Identifier	x0
>40	Identifier	y1
>41	Identifier	T
>42	AdditiveExpression	( y0 , x1 ) + in . at
>43	MemberAccess	in . at
>44	Identifier	at
>45	Identifier	in
>46	Expression	y0 , x1
>47	Identifier	x1
>48	Identifier	y0
>49	Identifier	T
>50	AdditiveExpression	( y0 , x0 ) + in . at
>51	MemberAccess	in . at
>52	Identifier	at
>53	Identifier	in
>54	Expression	y0 , x0
>55	Identifier	x0
>56	Identifier	y0
>57	Identifier	T
>58	MemberAccess	in . at
>59	Identifier	at
>60	Identifier	in
>61	CastTarget	T
>62	RelationalExpression	out . at < T > ( y , x )
>63	RelationalExpression	T > ( y , x )
>64	Expression	y , x
>65	Identifier	x
>66	Identifier	y
>67	Identifier	T
>68	MemberAccess	out . at
>69	Identifier	at
>70	Identifier	out
>71	IdentifierDeclStatement	 
>72	IdentifierDecl	y1 = y0 + 1
>73	AssignmentExpr	y1 = y0 + 1
>74	AdditiveExpression	y0 + 1
>75	PrimaryExpression	1
>76	Identifier	y0
>77	Identifier	y1
>78	Identifier	y1
>79	IdentifierDeclType	int
>80	IdentifierDeclStatement	 
>81	IdentifierDecl	y0 = y * 2
>82	AssignmentExpr	y0 = y * 2
>83	MultiplicativeExpression	y * 2
>84	PrimaryExpression	2
>85	Identifier	y
>86	Identifier	y0
>87	Identifier	y0
>88	IdentifierDeclType	int
>89	IdentifierDeclStatement	 
>90	IdentifierDecl	x1 = x0 + 1
>91	AssignmentExpr	x1 = x0 + 1
>92	AdditiveExpression	x0 + 1
>93	PrimaryExpression	1
>94	Identifier	x0
>95	Identifier	x1
>96	Identifier	x1
>97	IdentifierDeclType	int
>98	IdentifierDeclStatement	 
>99	IdentifierDecl	x0 = x * 2
>100	AssignmentExpr	x0 = x * 2
>101	MultiplicativeExpression	x * 2
>102	PrimaryExpression	2
>103	Identifier	x
>104	Identifier	x0
>105	Identifier	x0
>106	IdentifierDeclType	int
>107	UnaryExpression	 
>108	Identifier	x
>109	IncDec	++
>110	Condition	 
>111	RelationalExpression	x < out . cols
>112	MemberAccess	out . cols
>113	Identifier	cols
>114	Identifier	out
>115	Identifier	x
>116	ForInit	 
>117	IdentifierDeclStatement	int x = 0 ;
>118	IdentifierDecl	x = 0
>119	AssignmentExpr	x = 0
>120	PrimaryExpression	0
>121	Identifier	x
>122	Identifier	x
>123	IdentifierDeclType	int
>124	UnaryExpression	 
>125	Identifier	y
>126	IncDec	++
>127	Condition	 
>128	RelationalExpression	y < out . rows
>129	MemberAccess	out . rows
>130	Identifier	rows
>131	Identifier	out
>132	Identifier	y
>133	ForInit	 
>134	IdentifierDeclStatement	int y = 0 ;
>135	IdentifierDecl	y = 0
>136	AssignmentExpr	y = 0
>137	PrimaryExpression	0
>138	Identifier	y
>139	Identifier	y
>140	IdentifierDeclType	int
>141	ExpressionStatement	 
>142	CallExpression	out . create ( cv 
>143	ArgumentList	cv 
>144	Argument	in . type ( )
>145	CallExpression	in . type ( )
>146	ArgumentList	 
>147	Callee	in . type
>148	MemberAccess	in . type
>149	Identifier	type
>150	Identifier	in
>151	Argument	cv 
>152	CallExpression	cv 
>153	ArgumentList	in . size ( ) . width / 2
>154	Argument	in . size ( ) . height / 2
>155	MultiplicativeExpression	in . size ( ) . height / 2
>156	PrimaryExpression	2
>157	MemberAccess	in . size ( ) . height
>158	Identifier	height
>159	CallExpression	in . size ( )
>160	ArgumentList	 
>161	Callee	in . size
>162	MemberAccess	in . size
>163	Identifier	size
>164	Identifier	in
>165	Argument	in . size ( ) . width / 2
>166	MultiplicativeExpression	in . size ( ) . width / 2
>167	PrimaryExpression	2
>168	MemberAccess	in . size ( ) . width
>169	Identifier	width
>170	CallExpression	in . size ( )
>171	ArgumentList	 
>172	Callee	in . size
>173	MemberAccess	in . size
>174	Identifier	size
>175	Identifier	in
>176	Callee	cv 
>177	Identifier	cv 
>178	Callee	out . create
>179	MemberAccess	out . create
>180	Identifier	create
>181	Identifier	out
>203	FunctionDef	pyrDownMeanSmoothIgnoreInvalid (const cv 
>204	ParameterList	const cv 
>205	Parameter	 
>206	Identifier	out
>207	ParameterType	cv 
>208	Parameter	 
>209	Identifier	in
>210	ParameterType	const cv 
>211	ReturnType	static void
>212	CompoundStatement	 
>213	ForStatement	for ( int y = 0 ; y < out . rows ; ++ y )
>214	CompoundStatement	 
>215	ForStatement	for ( int x = 0 ; x < out . cols ; ++ x )
>216	CompoundStatement	 
>217	IfStatement	if ( cnt > 0 )
>218	ElseStatement	else
>219	CompoundStatement	 
>220	ExpressionStatement	 
>221	AssignmentExpr	out . at < T > ( y , x ) = InvalidDepth
>222	Identifier	InvalidDepth
>223	RelationalExpression	out . at < T > ( y , x )
>224	RelationalExpression	T > ( y , x )
>225	Expression	y , x
>226	Identifier	x
>227	Identifier	y
>228	Identifier	T
>229	MemberAccess	out . at
>230	Identifier	at
>231	Identifier	out
>232	CompoundStatement	 
>233	ExpressionStatement	 
>234	AssignmentExpr	out . at < T > ( y , x ) = ( T ) ( total / cnt )
>235	CastExpression	( T ) ( total / cnt )
>236	MultiplicativeExpression	total / cnt
>237	Identifier	cnt
>238	Identifier	total
>239	CastTarget	T
>240	RelationalExpression	out . at < T > ( y , x )
>241	RelationalExpression	T > ( y , x )
>242	Expression	y , x
>243	Identifier	x
>244	Identifier	y
>245	Identifier	T
>246	MemberAccess	out . at
>247	Identifier	at
>248	Identifier	out
>249	Condition	 
>250	RelationalExpression	cnt > 0
>251	PrimaryExpression	0
>252	Identifier	cnt
>253	IfStatement	if ( std 
>254	CompoundStatement	 
>255	ExpressionStatement	 
>256	IncDecOp	cnt ++
>257	IncDec	++
>258	Identifier	cnt
>259	ExpressionStatement	 
>260	AssignmentExpr	total += in . at < T > ( y1 , x1 )
>261	RelationalExpression	in . at < T > ( y1 , x1 )
>262	RelationalExpression	T > ( y1 , x1 )
>263	Expression	y1 , x1
>264	Identifier	x1
>265	Identifier	y1
>266	Identifier	T
>267	MemberAccess	in . at
>268	Identifier	at
>269	Identifier	in
>270	Identifier	total
>271	Condition	 
>272	CallExpression	std 
>273	ArgumentList	in . at < T > ( y1 , x1 )
>274	Argument	in . at < T > ( y1 , x1 )
>275	RelationalExpression	in . at < T > ( y1 , x1 )
>276	RelationalExpression	T > ( y1 , x1 )
>277	Expression	y1 , x1
>278	Identifier	x1
>279	Identifier	y1
>280	Identifier	T
>281	MemberAccess	in . at
>282	Identifier	at
>283	Identifier	in
>284	Callee	std 
>285	Identifier	std 
>286	IfStatement	if ( std 
>287	CompoundStatement	 
>288	ExpressionStatement	 
>289	IncDecOp	cnt ++
>290	IncDec	++
>291	Identifier	cnt
>292	ExpressionStatement	 
>293	AssignmentExpr	total += in . at < T > ( y1 , x0 )
>294	RelationalExpression	in . at < T > ( y1 , x0 )
>295	RelationalExpression	T > ( y1 , x0 )
>296	Expression	y1 , x0
>297	Identifier	x0
>298	Identifier	y1
>299	Identifier	T
>300	MemberAccess	in . at
>301	Identifier	at
>302	Identifier	in
>303	Identifier	total
>304	Condition	 
>305	CallExpression	std 
>306	ArgumentList	in . at < T > ( y1 , x0 )
>307	Argument	in . at < T > ( y1 , x0 )
>308	RelationalExpression	in . at < T > ( y1 , x0 )
>309	RelationalExpression	T > ( y1 , x0 )
>310	Expression	y1 , x0
>311	Identifier	x0
>312	Identifier	y1
>313	Identifier	T
>314	MemberAccess	in . at
>315	Identifier	at
>316	Identifier	in
>317	Callee	std 
>318	Identifier	std 
>319	IfStatement	if ( std 
>320	CompoundStatement	 
>321	ExpressionStatement	 
>322	IncDecOp	cnt ++
>323	IncDec	++
>324	Identifier	cnt
>325	ExpressionStatement	 
>326	AssignmentExpr	total += in . at < T > ( y0 , x1 )
>327	RelationalExpression	in . at < T > ( y0 , x1 )
>328	RelationalExpression	T > ( y0 , x1 )
>329	Expression	y0 , x1
>330	Identifier	x1
>331	Identifier	y0
>332	Identifier	T
>333	MemberAccess	in . at
>334	Identifier	at
>335	Identifier	in
>336	Identifier	total
>337	Condition	 
>338	CallExpression	std 
>339	ArgumentList	in . at < T > ( y0 , x1 )
>340	Argument	in . at < T > ( y0 , x1 )
>341	RelationalExpression	in . at < T > ( y0 , x1 )
>342	RelationalExpression	T > ( y0 , x1 )
>343	Expression	y0 , x1
>344	Identifier	x1
>345	Identifier	y0
>346	Identifier	T
>347	MemberAccess	in . at
>348	Identifier	at
>349	Identifier	in
>350	Callee	std 
>351	Identifier	std 
>352	IfStatement	if ( std 
>353	CompoundStatement	 
>354	ExpressionStatement	 
>355	IncDecOp	cnt ++
>356	IncDec	++
>357	Identifier	cnt
>358	ExpressionStatement	 
>359	AssignmentExpr	total += in . at < T > ( y0 , x0 )
>360	RelationalExpression	in . at < T > ( y0 , x0 )
>361	RelationalExpression	T > ( y0 , x0 )
>362	Expression	y0 , x0
>363	Identifier	x0
>364	Identifier	y0
>365	Identifier	T
>366	MemberAccess	in . at
>367	Identifier	at
>368	Identifier	in
>369	Identifier	total
>370	Condition	 
>371	CallExpression	std 
>372	ArgumentList	in . at < T > ( y0 , x0 )
>373	Argument	in . at < T > ( y0 , x0 )
>374	RelationalExpression	in . at < T > ( y0 , x0 )
>375	RelationalExpression	T > ( y0 , x0 )
>376	Expression	y0 , x0
>377	Identifier	x0
>378	Identifier	y0
>379	Identifier	T
>380	MemberAccess	in . at
>381	Identifier	at
>382	Identifier	in
>383	Callee	std 
>384	Identifier	std 
>385	IdentifierDeclStatement	 
>386	IdentifierDecl	cnt = 0
>387	AssignmentExpr	cnt = 0
>388	PrimaryExpression	0
>389	Identifier	cnt
>390	Identifier	cnt
>391	IdentifierDeclType	int
>392	IdentifierDeclStatement	 
>393	IdentifierDecl	total = 0
>394	AssignmentExpr	total = 0
>395	PrimaryExpression	0
>396	Identifier	total
>397	Identifier	total
>398	IdentifierDeclType	T
>399	IdentifierDeclStatement	 
>400	IdentifierDecl	y1 = y0 + 1
>401	AssignmentExpr	y1 = y0 + 1
>402	AdditiveExpression	y0 + 1
>403	PrimaryExpression	1
>404	Identifier	y0
>405	Identifier	y1
>406	Identifier	y1
>407	IdentifierDeclType	int
>408	IdentifierDeclStatement	 
>409	IdentifierDecl	y0 = y * 2
>410	AssignmentExpr	y0 = y * 2
>411	MultiplicativeExpression	y * 2
>412	PrimaryExpression	2
>413	Identifier	y
>414	Identifier	y0
>415	Identifier	y0
>416	IdentifierDeclType	int
>417	IdentifierDeclStatement	 
>418	IdentifierDecl	x1 = x0 + 1
>419	AssignmentExpr	x1 = x0 + 1
>420	AdditiveExpression	x0 + 1
>421	PrimaryExpression	1
>422	Identifier	x0
>423	Identifier	x1
>424	Identifier	x1
>425	IdentifierDeclType	int
>426	IdentifierDeclStatement	 
>427	IdentifierDecl	x0 = x * 2
>428	AssignmentExpr	x0 = x * 2
>429	MultiplicativeExpression	x * 2
>430	PrimaryExpression	2
>431	Identifier	x
>432	Identifier	x0
>433	Identifier	x0
>434	IdentifierDeclType	int
>435	UnaryExpression	 
>436	Identifier	x
>437	IncDec	++
>438	Condition	 
>439	RelationalExpression	x < out . cols
>440	MemberAccess	out . cols
>441	Identifier	cols
>442	Identifier	out
>443	Identifier	x
>444	ForInit	 
>445	IdentifierDeclStatement	int x = 0 ;
>446	IdentifierDecl	x = 0
>447	AssignmentExpr	x = 0
>448	PrimaryExpression	0
>449	Identifier	x
>450	Identifier	x
>451	IdentifierDeclType	int
>452	UnaryExpression	 
>453	Identifier	y
>454	IncDec	++
>455	Condition	 
>456	RelationalExpression	y < out . rows
>457	MemberAccess	out . rows
>458	Identifier	rows
>459	Identifier	out
>460	Identifier	y
>461	ForInit	 
>462	IdentifierDeclStatement	int y = 0 ;
>463	IdentifierDecl	y = 0
>464	AssignmentExpr	y = 0
>465	PrimaryExpression	0
>466	Identifier	y
>467	Identifier	y
>468	IdentifierDeclType	int
>469	ExpressionStatement	 
>470	CallExpression	out . create ( cv 
>471	ArgumentList	cv 
>472	Argument	in . type ( )
>473	CallExpression	in . type ( )
>474	ArgumentList	 
>475	Callee	in . type
>476	MemberAccess	in . type
>477	Identifier	type
>478	Identifier	in
>479	Argument	cv 
>480	CallExpression	cv 
>481	ArgumentList	in . size ( ) . width / 2
>482	Argument	in . size ( ) . height / 2
>483	MultiplicativeExpression	in . size ( ) . height / 2
>484	PrimaryExpression	2
>485	MemberAccess	in . size ( ) . height
>486	Identifier	height
>487	CallExpression	in . size ( )
>488	ArgumentList	 
>489	Callee	in . size
>490	MemberAccess	in . size
>491	Identifier	size
>492	Identifier	in
>493	Argument	in . size ( ) . width / 2
>494	MultiplicativeExpression	in . size ( ) . width / 2
>495	PrimaryExpression	2
>496	MemberAccess	in . size ( ) . width
>497	Identifier	width
>498	CallExpression	in . size ( )
>499	ArgumentList	 
>500	Callee	in . size
>501	MemberAccess	in . size
>502	Identifier	size
>503	Identifier	in
>504	Callee	cv 
>505	Identifier	cv 
>506	Callee	out . create
>507	MemberAccess	out . create
>508	Identifier	create
>509	Identifier	out
>535	FunctionDef	pyrDownMedianSmooth (const cv 
>536	ParameterList	const cv 
>537	Parameter	 
>538	Identifier	out
>539	ParameterType	cv 
>540	Parameter	 
>541	Identifier	in
>542	ParameterType	const cv 
>543	ReturnType	static void
>544	CompoundStatement	 
>545	ForStatement	for ( int y = 0 ; y < out . rows ; ++ y )
>546	CompoundStatement	 
>547	ForStatement	for ( int x = 0 ; x < out . cols ; ++ x )
>548	CompoundStatement	 
>549	ExpressionStatement	 
>550	AssignmentExpr	out . at < T > ( y , x ) = in_smoothed . at < T > ( y * 2 , x * 2 )
>551	RelationalExpression	in_smoothed . at < T > ( y * 2 , x * 2 )
>552	RelationalExpression	T > ( y * 2 , x * 2 )
>553	Expression	y * 2 , x * 2
>554	MultiplicativeExpression	x * 2
>555	PrimaryExpression	2
>556	Identifier	x
>557	MultiplicativeExpression	y * 2
>558	PrimaryExpression	2
>559	Identifier	y
>560	Identifier	T
>561	MemberAccess	in_smoothed . at
>562	Identifier	at
>563	Identifier	in_smoothed
>564	RelationalExpression	out . at < T > ( y , x )
>565	RelationalExpression	T > ( y , x )
>566	Expression	y , x
>567	Identifier	x
>568	Identifier	y
>569	Identifier	T
>570	MemberAccess	out . at
>571	Identifier	at
>572	Identifier	out
>573	UnaryExpression	 
>574	Identifier	x
>575	IncDec	++
>576	Condition	 
>577	RelationalExpression	x < out . cols
>578	MemberAccess	out . cols
>579	Identifier	cols
>580	Identifier	out
>581	Identifier	x
>582	ForInit	 
>583	IdentifierDeclStatement	int x = 0 ;
>584	IdentifierDecl	x = 0
>585	AssignmentExpr	x = 0
>586	PrimaryExpression	0
>587	Identifier	x
>588	Identifier	x
>589	IdentifierDeclType	int
>590	UnaryExpression	 
>591	Identifier	y
>592	IncDec	++
>593	Condition	 
>594	RelationalExpression	y < out . rows
>595	MemberAccess	out . rows
>596	Identifier	rows
>597	Identifier	out
>598	Identifier	y
>599	ForInit	 
>600	IdentifierDeclStatement	int y = 0 ;
>601	IdentifierDecl	y = 0
>602	AssignmentExpr	y = 0
>603	PrimaryExpression	0
>604	Identifier	y
>605	Identifier	y
>606	IdentifierDeclType	int
>607	ExpressionStatement	 
>608	CallExpression	cv 
>609	ArgumentList	in
>610	Argument	3
>611	PrimaryExpression	3
>612	Argument	in_smoothed
>613	Identifier	in_smoothed
>614	Argument	in
>615	Identifier	in
>616	Callee	cv 
>617	Identifier	cv 
>618	IdentifierDeclStatement	 
>619	IdentifierDecl	in_smoothed
>620	Identifier	in_smoothed
>621	IdentifierDeclType	cv 
>622	ExpressionStatement	 
>623	CallExpression	out . create ( cv 
>624	ArgumentList	cv 
>625	Argument	in . type ( )
>626	CallExpression	in . type ( )
>627	ArgumentList	 
>628	Callee	in . type
>629	MemberAccess	in . type
>630	Identifier	type
>631	Identifier	in
>632	Argument	cv 
>633	CallExpression	cv 
>634	ArgumentList	in . size ( ) . width / 2
>635	Argument	in . size ( ) . height / 2
>636	MultiplicativeExpression	in . size ( ) . height / 2
>637	PrimaryExpression	2
>638	MemberAccess	in . size ( ) . height
>639	Identifier	height
>640	CallExpression	in . size ( )
>641	ArgumentList	 
>642	Callee	in . size
>643	MemberAccess	in . size
>644	Identifier	size
>645	Identifier	in
>646	Argument	in . size ( ) . width / 2
>647	MultiplicativeExpression	in . size ( ) . width / 2
>648	PrimaryExpression	2
>649	MemberAccess	in . size ( ) . width
>650	Identifier	width
>651	CallExpression	in . size ( )
>652	ArgumentList	 
>653	Callee	in . size
>654	MemberAccess	in . size
>655	Identifier	size
>656	Identifier	in
>657	Callee	cv 
>658	Identifier	cv 
>659	Callee	out . create
>660	MemberAccess	out . create
>661	Identifier	create
>662	Identifier	out
>681	FunctionDef	pyrDownSubsample (const cv 
>682	ParameterList	const cv 
>683	Parameter	 
>684	Identifier	out
>685	ParameterType	cv 
>686	Parameter	 
>687	Identifier	in
>688	ParameterType	const cv 
>689	ReturnType	static void
>690	CompoundStatement	 
>691	ForStatement	for ( int y = 0 ; y < out . rows ; ++ y )
>692	CompoundStatement	 
>693	ForStatement	for ( int x = 0 ; x < out . cols ; ++ x )
>694	CompoundStatement	 
>695	ExpressionStatement	 
>696	AssignmentExpr	out . at < T > ( y , x ) = in . at < T > ( y * 2 , x * 2 )
>697	RelationalExpression	in . at < T > ( y * 2 , x * 2 )
>698	RelationalExpression	T > ( y * 2 , x * 2 )
>699	Expression	y * 2 , x * 2
>700	MultiplicativeExpression	x * 2
>701	PrimaryExpression	2
>702	Identifier	x
>703	MultiplicativeExpression	y * 2
>704	PrimaryExpression	2
>705	Identifier	y
>706	Identifier	T
>707	MemberAccess	in . at
>708	Identifier	at
>709	Identifier	in
>710	RelationalExpression	out . at < T > ( y , x )
>711	RelationalExpression	T > ( y , x )
>712	Expression	y , x
>713	Identifier	x
>714	Identifier	y
>715	Identifier	T
>716	MemberAccess	out . at
>717	Identifier	at
>718	Identifier	out
>719	UnaryExpression	 
>720	Identifier	x
>721	IncDec	++
>722	Condition	 
>723	RelationalExpression	x < out . cols
>724	MemberAccess	out . cols
>725	Identifier	cols
>726	Identifier	out
>727	Identifier	x
>728	ForInit	 
>729	IdentifierDeclStatement	int x = 0 ;
>730	IdentifierDecl	x = 0
>731	AssignmentExpr	x = 0
>732	PrimaryExpression	0
>733	Identifier	x
>734	Identifier	x
>735	IdentifierDeclType	int
>736	UnaryExpression	 
>737	Identifier	y
>738	IncDec	++
>739	Condition	 
>740	RelationalExpression	y < out . rows
>741	MemberAccess	out . rows
>742	Identifier	rows
>743	Identifier	out
>744	Identifier	y
>745	ForInit	 
>746	IdentifierDeclStatement	int y = 0 ;
>747	IdentifierDecl	y = 0
>748	AssignmentExpr	y = 0
>749	PrimaryExpression	0
>750	Identifier	y
>751	Identifier	y
>752	IdentifierDeclType	int
>753	ExpressionStatement	 
>754	CallExpression	out . create ( cv 
>755	ArgumentList	cv 
>756	Argument	in . type ( )
>757	CallExpression	in . type ( )
>758	ArgumentList	 
>759	Callee	in . type
>760	MemberAccess	in . type
>761	Identifier	type
>762	Identifier	in
>763	Argument	cv 
>764	CallExpression	cv 
>765	ArgumentList	in . size ( ) . width / 2
>766	Argument	in . size ( ) . height / 2
>767	MultiplicativeExpression	in . size ( ) . height / 2
>768	PrimaryExpression	2
>769	MemberAccess	in . size ( ) . height
>770	Identifier	height
>771	CallExpression	in . size ( )
>772	ArgumentList	 
>773	Callee	in . size
>774	MemberAccess	in . size
>775	Identifier	size
>776	Identifier	in
>777	Argument	in . size ( ) . width / 2
>778	MultiplicativeExpression	in . size ( ) . width / 2
>779	PrimaryExpression	2
>780	MemberAccess	in . size ( ) . width
>781	Identifier	width
>782	CallExpression	in . size ( )
>783	ArgumentList	 
>784	Callee	in . size
>785	MemberAccess	in . size
>786	Identifier	size
>787	Identifier	in
>788	Callee	cv 
>789	Identifier	cv 
>790	Callee	out . create
>791	MemberAccess	out . create
>792	Identifier	create
>793	Identifier	out
>811	FunctionDef	RgbdImagePyramid 
>812	ParameterList	RgbdCameraPyramid & camera , const cv 
>813	Parameter	 
>814	Identifier	depth
>815	ParameterType	const cv 
>816	Parameter	 
>817	Identifier	intensity
>818	ParameterType	const cv 
>819	Parameter	 
>820	Identifier	camera
>821	ParameterType	RgbdCameraPyramid &
>822	CompoundStatement	 
>823	ExpressionStatement	 
>824	CallExpression	levels_ . push_back ( camera_ . level ( 0 ) . create ( intensity , depth ) )
>825	ArgumentList	camera_ . level ( 0 ) . create ( intensity , depth )
>826	Argument	camera_ . level ( 0 ) . create ( intensity , depth )
>827	CallExpression	camera_ . level ( 0 ) . create ( intensity , depth )
>828	ArgumentList	intensity
>829	Argument	depth
>830	Identifier	depth
>831	Argument	intensity
>832	Identifier	intensity
>833	Callee	camera_ . level ( 0 ) . create
>834	MemberAccess	camera_ . level ( 0 ) . create
>835	Identifier	create
>836	CallExpression	camera_ . level ( 0 )
>837	ArgumentList	0
>838	Argument	0
>839	PrimaryExpression	0
>840	Callee	camera_ . level
>841	MemberAccess	camera_ . level
>842	Identifier	level
>843	Identifier	camera_
>844	Callee	levels_ . push_back
>845	MemberAccess	levels_ . push_back
>846	Identifier	push_back
>847	Identifier	levels_
>858	FunctionDef	RgbdImagePyramid 
>859	ParameterList	 
>860	CompoundStatement	 
>864	FunctionDef	RgbdImagePyramid 
>865	ParameterList	const size_t num_levels
>866	Parameter	 
>867	Identifier	num_levels
>868	ParameterType	const size_t
>869	ReturnType	void
>870	CompoundStatement	 
>871	ExpressionStatement	 
>872	CallExpression	build ( num_levels )
>873	ArgumentList	num_levels
>874	Argument	num_levels
>875	Identifier	num_levels
>876	Callee	build
>877	Identifier	build
>882	FunctionDef	RgbdImagePyramid 
>883	ParameterList	const size_t num_levels
>884	Parameter	 
>885	Identifier	num_levels
>886	ParameterType	const size_t
>887	ReturnType	void
>888	CompoundStatement	 
>889	ForStatement	for ( size_t idx = first ; idx < num_levels ; ++ idx )
>890	CompoundStatement	 
>891	ExpressionStatement	 
>892	CallExpression	levels_ [ idx ] -> initialize ( )
>893	ArgumentList	 
>894	Callee	levels_ [ idx ] -> initialize
>895	PtrMemberAccess	levels_ [ idx ] -> initialize
>896	Identifier	initialize
>897	ArrayIndexing	levels_ [ idx ]
>898	Identifier	idx
>899	Identifier	levels_
>900	ExpressionStatement	 
>901	RelationalExpression	pyrDownSubsample < float > ( levels_ [ idx - 1 ] -> depth , levels_ [ idx ] -> depth )
>902	RelationalExpression	float > ( levels_ [ idx - 1 ] -> depth , levels_ [ idx ] -> depth )
>903	Expression	levels_ [ idx - 1 ] -> depth , levels_ [ idx ] -> depth
>904	PtrMemberAccess	levels_ [ idx ] -> depth
>905	Identifier	depth
>906	ArrayIndexing	levels_ [ idx ]
>907	Identifier	idx
>908	Identifier	levels_
>909	PtrMemberAccess	levels_ [ idx - 1 ] -> depth
>910	Identifier	depth
>911	ArrayIndexing	levels_ [ idx - 1 ]
>912	AdditiveExpression	idx - 1
>913	PrimaryExpression	1
>914	Identifier	idx
>915	Identifier	levels_
>916	Identifier	float
>917	Identifier	pyrDownSubsample
>918	ExpressionStatement	 
>919	RelationalExpression	pyrDownMeanSmooth < IntensityType > ( levels_ [ idx - 1 ] -> intensity , levels_ [ idx ] -> intensity )
>920	RelationalExpression	IntensityType > ( levels_ [ idx - 1 ] -> intensity , levels_ [ idx ] -> intensity )
>921	Expression	levels_ [ idx - 1 ] -> intensity , levels_ [ idx ] -> intensity
>922	PtrMemberAccess	levels_ [ idx ] -> intensity
>923	Identifier	intensity
>924	ArrayIndexing	levels_ [ idx ]
>925	Identifier	idx
>926	Identifier	levels_
>927	PtrMemberAccess	levels_ [ idx - 1 ] -> intensity
>928	Identifier	intensity
>929	ArrayIndexing	levels_ [ idx - 1 ]
>930	AdditiveExpression	idx - 1
>931	PrimaryExpression	1
>932	Identifier	idx
>933	Identifier	levels_
>934	Identifier	IntensityType
>935	Identifier	pyrDownMeanSmooth
>936	ExpressionStatement	 
>937	CallExpression	levels_ . push_back ( camera_ . level ( idx ) . create ( ) )
>938	ArgumentList	camera_ . level ( idx ) . create ( )
>939	Argument	camera_ . level ( idx ) . create ( )
>940	CallExpression	camera_ . level ( idx ) . create ( )
>941	ArgumentList	 
>942	Callee	camera_ . level ( idx ) . create
>943	MemberAccess	camera_ . level ( idx ) . create
>944	Identifier	create
>945	CallExpression	camera_ . level ( idx )
>946	ArgumentList	idx
>947	Argument	idx
>948	Identifier	idx
>949	Callee	camera_ . level
>950	MemberAccess	camera_ . level
>951	Identifier	level
>952	Identifier	camera_
>953	Callee	levels_ . push_back
>954	MemberAccess	levels_ . push_back
>955	Identifier	push_back
>956	Identifier	levels_
>957	UnaryExpression	 
>958	Identifier	idx
>959	IncDec	++
>960	Condition	 
>961	RelationalExpression	idx < num_levels
>962	Identifier	num_levels
>963	Identifier	idx
>964	ForInit	 
>965	IdentifierDeclStatement	size_t idx = first ;
>966	IdentifierDecl	idx = first
>967	AssignmentExpr	idx = first
>968	Identifier	first
>969	Identifier	first
>970	Identifier	idx
>971	IdentifierDeclType	size_t
>972	IdentifierDeclStatement	 
>973	IdentifierDecl	first = levels_ . size ( )
>974	AssignmentExpr	first = levels_ . size ( )
>975	CallExpression	levels_ . size ( )
>976	ArgumentList	 
>977	Callee	levels_ . size
>978	MemberAccess	levels_ . size
>979	Identifier	size
>980	Identifier	levels_
>981	Identifier	first
>982	Identifier	first
>983	IdentifierDeclType	size_t
>984	IfStatement	if ( levels_ . size ( ) >= num_levels )
>985	ReturnStatement	 
>986	Condition	 
>987	RelationalExpression	levels_ . size ( ) >= num_levels
>988	Identifier	num_levels
>989	CallExpression	levels_ . size ( )
>990	ArgumentList	 
>991	Callee	levels_ . size
>992	MemberAccess	levels_ . size
>993	Identifier	size
>994	Identifier	levels_
>1008	FunctionDef	RgbdImagePyramid 
>1009	ParameterList	size_t idx
>1010	Parameter	 
>1011	Identifier	idx
>1012	ParameterType	size_t
>1013	ReturnType	RgbdImage &
>1014	CompoundStatement	 
>1015	ReturnStatement	 
>1016	UnaryOp	* levels_ [ idx ]
>1017	ArrayIndexing	levels_ [ idx ]
>1018	Identifier	idx
>1019	Identifier	levels_
>1020	UnaryOperator	*
>1021	ExpressionStatement	 
>1022	CallExpression	assert ( idx < levels_ . size ( ) )
>1023	ArgumentList	idx < levels_ . size ( )
>1024	Argument	idx < levels_ . size ( )
>1025	RelationalExpression	idx < levels_ . size ( )
>1026	CallExpression	levels_ . size ( )
>1027	ArgumentList	 
>1028	Callee	levels_ . size
>1029	MemberAccess	levels_ . size
>1030	Identifier	size
>1031	Identifier	levels_
>1032	Identifier	idx
>1033	Callee	assert
>1034	Identifier	assert
>1046	FunctionDef	RgbdImagePyramid 
>1047	ParameterList	 
>1048	ReturnType	double
>1049	CompoundStatement	 
>1050	ReturnStatement	 
>1051	ConditionalExpression	! levels_ . empty ( ) ? levels_ [ 0 ] -> timestamp 
>1052	PrimaryExpression	0.0
>1053	PtrMemberAccess	levels_ [ 0 ] -> timestamp
>1054	Identifier	timestamp
>1055	ArrayIndexing	levels_ [ 0 ]
>1056	PrimaryExpression	0
>1057	Identifier	levels_
>1058	Condition	! levels_ . empty ( )
>1059	UnaryOp	! levels_ . empty ( )
>1060	CallExpression	levels_ . empty ( )
>1061	ArgumentList	 
>1062	Callee	levels_ . empty
>1063	MemberAccess	levels_ . empty
>1064	Identifier	empty
>1065	Identifier	levels_
>1066	UnaryOperator	!
>1075	FunctionDef	RgbdCamera 
>1076	ParameterList	size_t width , size_t height , const IntrinsicMatrix & intrinsics
>1077	Parameter	 
>1078	Identifier	intrinsics
>1079	ParameterType	const IntrinsicMatrix &
>1080	Parameter	 
>1081	Identifier	height
>1082	ParameterType	size_t
>1083	Parameter	 
>1084	Identifier	width
>1085	ParameterType	size_t
>1086	CompoundStatement	 
>1087	ForStatement	for ( size_t y = 0 ; y < height_ ; ++ y )
>1088	CompoundStatement	 
>1089	ForStatement	for ( size_t x = 0 ; x < width_ ; ++ x , ++ idx )
>1090	CompoundStatement	 
>1091	ExpressionStatement	 
>1092	AssignmentExpr	pointcloud_template_ ( 3 , idx ) = 0.0
>1093	PrimaryExpression	0.0
>1094	CallExpression	pointcloud_template_ ( 3 , idx )
>1095	ArgumentList	3
>1096	Argument	idx
>1097	Identifier	idx
>1098	Argument	3
>1099	PrimaryExpression	3
>1100	Callee	pointcloud_template_
>1101	Identifier	pointcloud_template_
>1102	ExpressionStatement	 
>1103	AssignmentExpr	pointcloud_template_ ( 2 , idx ) = 1.0
>1104	PrimaryExpression	1.0
>1105	CallExpression	pointcloud_template_ ( 2 , idx )
>1106	ArgumentList	2
>1107	Argument	idx
>1108	Identifier	idx
>1109	Argument	2
>1110	PrimaryExpression	2
>1111	Callee	pointcloud_template_
>1112	Identifier	pointcloud_template_
>1113	ExpressionStatement	 
>1114	AssignmentExpr	pointcloud_template_ ( 1 , idx ) = ( y - intrinsics_ . oy ( ) ) / intrinsics_ . fy ( )
>1115	MultiplicativeExpression	( y - intrinsics_ . oy ( ) ) / intrinsics_ . fy ( )
>1116	CallExpression	intrinsics_ . fy ( )
>1117	ArgumentList	 
>1118	Callee	intrinsics_ . fy
>1119	MemberAccess	intrinsics_ . fy
>1120	Identifier	fy
>1121	Identifier	intrinsics_
>1122	AdditiveExpression	y - intrinsics_ . oy ( )
>1123	CallExpression	intrinsics_ . oy ( )
>1124	ArgumentList	 
>1125	Callee	intrinsics_ . oy
>1126	MemberAccess	intrinsics_ . oy
>1127	Identifier	oy
>1128	Identifier	intrinsics_
>1129	Identifier	y
>1130	CallExpression	pointcloud_template_ ( 1 , idx )
>1131	ArgumentList	1
>1132	Argument	idx
>1133	Identifier	idx
>1134	Argument	1
>1135	PrimaryExpression	1
>1136	Callee	pointcloud_template_
>1137	Identifier	pointcloud_template_
>1138	ExpressionStatement	 
>1139	AssignmentExpr	pointcloud_template_ ( 0 , idx ) = ( x - intrinsics_ . ox ( ) ) / intrinsics_ . fx ( )
>1140	MultiplicativeExpression	( x - intrinsics_ . ox ( ) ) / intrinsics_ . fx ( )
>1141	CallExpression	intrinsics_ . fx ( )
>1142	ArgumentList	 
>1143	Callee	intrinsics_ . fx
>1144	MemberAccess	intrinsics_ . fx
>1145	Identifier	fx
>1146	Identifier	intrinsics_
>1147	AdditiveExpression	x - intrinsics_ . ox ( )
>1148	CallExpression	intrinsics_ . ox ( )
>1149	ArgumentList	 
>1150	Callee	intrinsics_ . ox
>1151	MemberAccess	intrinsics_ . ox
>1152	Identifier	ox
>1153	Identifier	intrinsics_
>1154	Identifier	x
>1155	CallExpression	pointcloud_template_ ( 0 , idx )
>1156	ArgumentList	0
>1157	Argument	idx
>1158	Identifier	idx
>1159	Argument	0
>1160	PrimaryExpression	0
>1161	Callee	pointcloud_template_
>1162	Identifier	pointcloud_template_
>1163	Expression	 
>1164	UnaryExpression	++ idx
>1165	Identifier	idx
>1166	IncDec	++
>1167	UnaryExpression	++ x
>1168	Identifier	x
>1169	IncDec	++
>1170	Condition	 
>1171	RelationalExpression	x < width_
>1172	Identifier	width_
>1173	Identifier	x
>1174	ForInit	 
>1175	IdentifierDeclStatement	size_t x = 0 ;
>1176	IdentifierDecl	x = 0
>1177	AssignmentExpr	x = 0
>1178	PrimaryExpression	0
>1179	Identifier	x
>1180	Identifier	x
>1181	IdentifierDeclType	size_t
>1182	UnaryExpression	 
>1183	Identifier	y
>1184	IncDec	++
>1185	Condition	 
>1186	RelationalExpression	y < height_
>1187	Identifier	height_
>1188	Identifier	y
>1189	ForInit	 
>1190	IdentifierDeclStatement	size_t y = 0 ;
>1191	IdentifierDecl	y = 0
>1192	AssignmentExpr	y = 0
>1193	PrimaryExpression	0
>1194	Identifier	y
>1195	Identifier	y
>1196	IdentifierDeclType	size_t
>1197	IdentifierDeclStatement	 
>1198	IdentifierDecl	idx = 0
>1199	AssignmentExpr	idx = 0
>1200	PrimaryExpression	0
>1201	Identifier	idx
>1202	Identifier	idx
>1203	IdentifierDeclType	int
>1204	ExpressionStatement	 
>1205	CallExpression	pointcloud_template_ . resize ( Eigen 
>1206	ArgumentList	Eigen 
>1207	Argument	width_ * height_
>1208	MultiplicativeExpression	width_ * height_
>1209	Identifier	height_
>1210	Identifier	width_
>1211	Argument	Eigen 
>1212	Identifier	Eigen 
>1213	Callee	pointcloud_template_ . resize
>1214	MemberAccess	pointcloud_template_ . resize
>1215	Identifier	resize
>1216	Identifier	pointcloud_template_
>1235	FunctionDef	RgbdCamera 
>1236	ParameterList	 
>1237	CompoundStatement	 
>1241	FunctionDef	RgbdCamera 
>1242	ParameterList	 
>1243	ReturnType	size_t
>1244	CompoundStatement	 
>1245	ReturnStatement	 
>1246	Identifier	width_
>1251	FunctionDef	RgbdCamera 
>1252	ParameterList	 
>1253	ReturnType	size_t
>1254	CompoundStatement	 
>1255	ReturnStatement	 
>1256	Identifier	height_
>1261	FunctionDef	RgbdCamera 
>1262	ParameterList	 
>1263	ReturnType	const dvo 
>1264	CompoundStatement	 
>1265	ReturnStatement	 
>1266	Identifier	intrinsics_
>1271	FunctionDef	RgbdCamera 
>1272	ParameterList	const cv 
>1273	Parameter	 
>1274	Identifier	depth
>1275	ParameterType	const cv 
>1276	Parameter	 
>1277	Identifier	intensity
>1278	ParameterType	const cv 
>1279	ReturnType	RgbdImagePtr
>1280	CompoundStatement	 
>1281	ReturnStatement	 
>1282	Identifier	result
>1283	ExpressionStatement	 
>1284	CallExpression	result -> initialize ( )
>1285	ArgumentList	 
>1286	Callee	result -> initialize
>1287	PtrMemberAccess	result -> initialize
>1288	Identifier	initialize
>1289	Identifier	result
>1290	ExpressionStatement	 
>1291	AssignmentExpr	result -> depth = depth
>1292	Identifier	depth
>1293	PtrMemberAccess	result -> depth
>1294	Identifier	depth
>1295	Identifier	result
>1296	ExpressionStatement	 
>1297	AssignmentExpr	result -> intensity = intensity
>1298	Identifier	intensity
>1299	PtrMemberAccess	result -> intensity
>1300	Identifier	intensity
>1301	Identifier	result
>1302	IdentifierDeclStatement	 
>1303	IdentifierDecl	result ( new RgbdImage ( * this ) )
>1304	UnaryOp	* this
>1305	Identifier	this
>1306	UnaryOperator	*
>1307	Identifier	result
>1308	IdentifierDeclType	RgbdImagePtr
>1319	FunctionDef	RgbdCamera 
>1320	ParameterList	 
>1321	ReturnType	RgbdImagePtr
>1322	CompoundStatement	 
>1323	ReturnStatement	 
>1324	RelationalExpression	boost 
>1325	RelationalExpression	RgbdImage > ( * this )
>1326	UnaryOp	* this
>1327	Identifier	this
>1328	UnaryOperator	*
>1329	Identifier	RgbdImage
>1330	Identifier	boost 
>1338	FunctionDef	RgbdCamera 
>1339	ParameterList	const cv 
>1340	Parameter	 
>1341	Identifier	img
>1342	ParameterType	const cv 
>1343	ReturnType	bool
>1344	CompoundStatement	 
>1345	ReturnStatement	 
>1346	AndExpression	img . cols == width_ && img . rows == height_
>1347	EqualityExpression	img . rows == height_
>1348	Identifier	height_
>1349	MemberAccess	img . rows
>1350	Identifier	rows
>1351	Identifier	img
>1352	EqualityExpression	img . cols == width_
>1353	Identifier	width_
>1354	MemberAccess	img . cols
>1355	Identifier	cols
>1356	Identifier	img
>1365	FunctionDef	RgbdCamera 
>1366	ParameterList	const cv 
>1367	Parameter	 
>1368	Identifier	pointcloud
>1369	ParameterType	PointCloud &
>1370	Parameter	 
>1371	Identifier	depth
>1372	ParameterType	const cv 
>1373	ReturnType	void
>1374	CompoundStatement	 
>1375	ForStatement	for ( size_t y = 0 ; y < height_ ; ++ y )
>1376	CompoundStatement	 
>1377	ForStatement	for ( size_t x = 0 ; x < width_ ; ++ x , ++ depth_ptr , ++ idx )
>1378	CompoundStatement	 
>1379	ExpressionStatement	 
>1380	AssignmentExpr	pointcloud ( 3 , idx ) = 1.0
>1381	PrimaryExpression	1.0
>1382	CallExpression	pointcloud ( 3 , idx )
>1383	ArgumentList	3
>1384	Argument	idx
>1385	Identifier	idx
>1386	Argument	3
>1387	PrimaryExpression	3
>1388	Callee	pointcloud
>1389	Identifier	pointcloud
>1390	ExpressionStatement	 
>1391	AssignmentExpr	pointcloud . col ( idx ) = pointcloud_template_ . col ( idx ) * ( * depth_ptr )
>1392	MultiplicativeExpression	pointcloud_template_ . col ( idx ) * ( * depth_ptr )
>1393	UnaryOp	* depth_ptr
>1394	Identifier	depth_ptr
>1395	UnaryOperator	*
>1396	CallExpression	pointcloud_template_ . col ( idx )
>1397	ArgumentList	idx
>1398	Argument	idx
>1399	Identifier	idx
>1400	Callee	pointcloud_template_ . col
>1401	MemberAccess	pointcloud_template_ . col
>1402	Identifier	col
>1403	Identifier	pointcloud_template_
>1404	CallExpression	pointcloud . col ( idx )
>1405	ArgumentList	idx
>1406	Argument	idx
>1407	Identifier	idx
>1408	Callee	pointcloud . col
>1409	MemberAccess	pointcloud . col
>1410	Identifier	col
>1411	Identifier	pointcloud
>1412	Expression	 
>1413	Expression	++ depth_ptr , ++ idx
>1414	UnaryExpression	++ idx
>1415	Identifier	idx
>1416	IncDec	++
>1417	UnaryExpression	++ depth_ptr
>1418	Identifier	depth_ptr
>1419	IncDec	++
>1420	UnaryExpression	++ x
>1421	Identifier	x
>1422	IncDec	++
>1423	Condition	 
>1424	RelationalExpression	x < width_
>1425	Identifier	width_
>1426	Identifier	x
>1427	ForInit	 
>1428	IdentifierDeclStatement	size_t x = 0 ;
>1429	IdentifierDecl	x = 0
>1430	AssignmentExpr	x = 0
>1431	PrimaryExpression	0
>1432	Identifier	x
>1433	Identifier	x
>1434	IdentifierDeclType	size_t
>1435	UnaryExpression	 
>1436	Identifier	y
>1437	IncDec	++
>1438	Condition	 
>1439	RelationalExpression	y < height_
>1440	Identifier	height_
>1441	Identifier	y
>1442	ForInit	 
>1443	IdentifierDeclStatement	size_t y = 0 ;
>1444	IdentifierDecl	y = 0
>1445	AssignmentExpr	y = 0
>1446	PrimaryExpression	0
>1447	Identifier	y
>1448	Identifier	y
>1449	IdentifierDeclType	size_t
>1450	IdentifierDeclStatement	 
>1451	IdentifierDecl	idx = 0
>1452	AssignmentExpr	idx = 0
>1453	PrimaryExpression	0
>1454	Identifier	idx
>1455	Identifier	idx
>1456	IdentifierDeclType	int
>1457	ExpressionStatement	 
>1458	Statement	 
>1459	Statement	 
>1460	Statement	 
>1461	Statement	 
>1462	Statement	 
>1463	Statement	 
>1464	Statement	 
>1465	Statement	 
>1466	Statement	 
>1467	Statement	 
>1468	Statement	 
>1469	Statement	 
>1470	Statement	 
>1471	ExpressionStatement	 
>1472	CallExpression	pointcloud . resize ( Eigen 
>1473	ArgumentList	Eigen 
>1474	Argument	width_ * height_
>1475	MultiplicativeExpression	width_ * height_
>1476	Identifier	height_
>1477	Identifier	width_
>1478	Argument	Eigen 
>1479	Identifier	Eigen 
>1480	Callee	pointcloud . resize
>1481	MemberAccess	pointcloud . resize
>1482	Identifier	resize
>1483	Identifier	pointcloud
>1484	ExpressionStatement	 
>1485	CallExpression	assert ( hasSameSize ( depth ) )
>1486	ArgumentList	hasSameSize ( depth )
>1487	Argument	hasSameSize ( depth )
>1488	CallExpression	hasSameSize ( depth )
>1489	ArgumentList	depth
>1490	Argument	depth
>1491	Identifier	depth
>1492	Callee	hasSameSize
>1493	Identifier	hasSameSize
>1494	Callee	assert
>1495	Identifier	assert
>1513	FunctionDef	RgbdCameraPyramid 
>1514	ParameterList	const RgbdCamera & base
>1515	Parameter	 
>1516	Identifier	base
>1517	ParameterType	const RgbdCamera &
>1518	CompoundStatement	 
>1519	ExpressionStatement	 
>1520	CallExpression	levels_ . push_back ( boost 
>1521	ArgumentList	boost 
>1522	Argument	boost 
>1523	RelationalExpression	boost 
>1524	RelationalExpression	RgbdCamera > ( base )
>1525	Identifier	base
>1526	Identifier	RgbdCamera
>1527	Identifier	boost 
>1528	Callee	levels_ . push_back
>1529	MemberAccess	levels_ . push_back
>1530	Identifier	push_back
>1531	Identifier	levels_
>1539	FunctionDef	RgbdCameraPyramid 
>1540	ParameterList	size_t base_width , size_t base_height , const dvo 
>1541	Parameter	 
>1542	Identifier	base_intrinsics
>1543	ParameterType	const dvo 
>1544	Parameter	 
>1545	Identifier	base_height
>1546	ParameterType	size_t
>1547	Parameter	 
>1548	Identifier	base_width
>1549	ParameterType	size_t
>1550	CompoundStatement	 
>1551	ExpressionStatement	 
>1552	CallExpression	levels_ . push_back ( boost 
>1553	ArgumentList	boost 
>1554	Argument	boost 
>1555	RelationalExpression	boost 
>1556	RelationalExpression	RgbdCamera > ( base_width , base_height , base_intrinsics )
>1557	Expression	base_width , base_height , base_intrinsics
>1558	Expression	base_height , base_intrinsics
>1559	Identifier	base_intrinsics
>1560	Identifier	base_height
>1561	Identifier	base_width
>1562	Identifier	RgbdCamera
>1563	Identifier	boost 
>1564	Callee	levels_ . push_back
>1565	MemberAccess	levels_ . push_back
>1566	Identifier	push_back
>1567	Identifier	levels_
>1577	FunctionDef	RgbdCameraPyramid 
>1578	ParameterList	 
>1579	CompoundStatement	 
>1583	FunctionDef	RgbdCameraPyramid 
>1584	ParameterList	const cv 
>1585	Parameter	 
>1586	Identifier	base_depth
>1587	ParameterType	const cv 
>1588	Parameter	 
>1589	Identifier	base_intensity
>1590	ParameterType	const cv 
>1591	ReturnType	RgbdImagePyramidPtr
>1592	CompoundStatement	 
>1593	ReturnStatement	 
>1594	CallExpression	RgbdImagePyramidPtr ( new RgbdImagePyramid ( * this , base_intensity , base_depth ) )
>1595	ArgumentList	* this , base_intensity , base_depth
>1596	Argument	* this , base_intensity , base_depth
>1597	Expression	* this , base_intensity , base_depth
>1598	Expression	base_intensity , base_depth
>1599	Identifier	base_depth
>1600	Identifier	base_intensity
>1601	UnaryOp	* this
>1602	Identifier	this
>1603	UnaryOperator	*
>1604	Callee	RgbdImagePyramidPtr
>1605	Identifier	RgbdImagePyramidPtr
>1614	FunctionDef	RgbdCameraPyramid 
>1615	ParameterList	size_t levels
>1616	Parameter	 
>1617	Identifier	levels
>1618	ParameterType	size_t
>1619	ReturnType	void
>1620	CompoundStatement	 
>1621	ForStatement	for ( size_t idx = start ; idx < levels ; ++ idx )
>1622	CompoundStatement	 
>1623	ExpressionStatement	 
>1624	CallExpression	levels_ . push_back ( boost 
>1625	ArgumentList	boost 
>1626	Argument	boost 
>1627	RelationalExpression	boost 
>1628	RelationalExpression	RgbdCamera > ( previous -> width ( ) / 2 , previous -> height ( ) / 2 , intrinsics )
>1629	Expression	previous -> width ( ) / 2 , previous -> height ( ) / 2 , intrinsics
>1630	Expression	previous -> height ( ) / 2 , intrinsics
>1631	Identifier	intrinsics
>1632	MultiplicativeExpression	previous -> height ( ) / 2
>1633	PrimaryExpression	2
>1634	CallExpression	previous -> height ( )
>1635	ArgumentList	 
>1636	Callee	previous -> height
>1637	PtrMemberAccess	previous -> height
>1638	Identifier	height
>1639	Identifier	previous
>1640	MultiplicativeExpression	previous -> width ( ) / 2
>1641	PrimaryExpression	2
>1642	CallExpression	previous -> width ( )
>1643	ArgumentList	 
>1644	Callee	previous -> width
>1645	PtrMemberAccess	previous -> width
>1646	Identifier	width
>1647	Identifier	previous
>1648	Identifier	RgbdCamera
>1649	Identifier	boost 
>1650	Callee	levels_ . push_back
>1651	MemberAccess	levels_ . push_back
>1652	Identifier	push_back
>1653	Identifier	levels_
>1654	ExpressionStatement	 
>1655	CallExpression	intrinsics . scale ( 0.5f )
>1656	ArgumentList	0.5f
>1657	Argument	0.5f
>1658	PrimaryExpression	0.5f
>1659	Callee	intrinsics . scale
>1660	MemberAccess	intrinsics . scale
>1661	Identifier	scale
>1662	Identifier	intrinsics
>1663	IdentifierDeclStatement	 
>1664	IdentifierDecl	intrinsics ( previous -> intrinsics ( ) )
>1665	CallExpression	previous -> intrinsics ( )
>1666	ArgumentList	 
>1667	Callee	previous -> intrinsics
>1668	PtrMemberAccess	previous -> intrinsics
>1669	Identifier	intrinsics
>1670	Identifier	previous
>1671	Identifier	intrinsics
>1672	IdentifierDeclType	dvo 
>1673	IdentifierDeclStatement	 
>1674	IdentifierDecl	& previous = levels_ [ idx - 1 ]
>1675	AssignmentExpr	& previous = levels_ [ idx - 1 ]
>1676	ArrayIndexing	levels_ [ idx - 1 ]
>1677	AdditiveExpression	idx - 1
>1678	PrimaryExpression	1
>1679	Identifier	idx
>1680	Identifier	levels_
>1681	Identifier	previous
>1682	Identifier	previous
>1683	IdentifierDeclType	RgbdCameraPtr &
>1684	UnaryExpression	 
>1685	Identifier	idx
>1686	IncDec	++
>1687	Condition	 
>1688	RelationalExpression	idx < levels
>1689	Identifier	levels
>1690	Identifier	idx
>1691	ForInit	 
>1692	IdentifierDeclStatement	size_t idx = start ;
>1693	IdentifierDecl	idx = start
>1694	AssignmentExpr	idx = start
>1695	Identifier	start
>1696	Identifier	start
>1697	Identifier	idx
>1698	IdentifierDeclType	size_t
>1699	IdentifierDeclStatement	 
>1700	IdentifierDecl	start = levels_ . size ( )
>1701	AssignmentExpr	start = levels_ . size ( )
>1702	CallExpression	levels_ . size ( )
>1703	ArgumentList	 
>1704	Callee	levels_ . size
>1705	MemberAccess	levels_ . size
>1706	Identifier	size
>1707	Identifier	levels_
>1708	Identifier	start
>1709	Identifier	start
>1710	IdentifierDeclType	size_t
>1728	FunctionDef	RgbdCameraPyramid 
>1729	ParameterList	size_t level
>1730	Parameter	 
>1731	Identifier	level
>1732	ParameterType	size_t
>1733	ReturnType	const RgbdCamera &
>1734	CompoundStatement	 
>1735	ReturnStatement	 
>1736	UnaryOp	* levels_ [ level ]
>1737	ArrayIndexing	levels_ [ level ]
>1738	Identifier	level
>1739	Identifier	levels_
>1740	UnaryOperator	*
>1741	ExpressionStatement	 
>1742	CallExpression	build ( level + 1 )
>1743	ArgumentList	level + 1
>1744	Argument	level + 1
>1745	AdditiveExpression	level + 1
>1746	PrimaryExpression	1
>1747	Identifier	level
>1748	Callee	build
>1749	Identifier	build
>1760	FunctionDef	RgbdCameraPyramid 
>1761	ParameterList	size_t level
>1762	Parameter	 
>1763	Identifier	level
>1764	ParameterType	size_t
>1765	ReturnType	const RgbdCamera &
>1766	CompoundStatement	 
>1767	ReturnStatement	 
>1768	UnaryOp	* levels_ [ level ]
>1769	ArrayIndexing	levels_ [ level ]
>1770	Identifier	level
>1771	Identifier	levels_
>1772	UnaryOperator	*
>1783	FunctionDef	RgbdImage 
>1784	ParameterList	const RgbdCamera & camera
>1785	Parameter	 
>1786	Identifier	camera
>1787	ParameterType	const RgbdCamera &
>1788	CompoundStatement	 
>1793	FunctionDef	RgbdImage 
>1794	ParameterList	 
>1795	CompoundStatement	 
>1799	FunctionDef	RgbdImage 
>1800	ParameterList	 
>1801	ReturnType	const RgbdCamera &
>1802	CompoundStatement	 
>1803	ReturnStatement	 
>1804	Identifier	camera_
>1809	FunctionDef	RgbdImage 
>1810	ParameterList	 
>1811	ReturnType	void
>1812	CompoundStatement	 
>1813	ExpressionStatement	 
>1814	AssignmentExpr	pointcloud_requires_build_ = true
>1815	Identifier	true
>1816	Identifier	pointcloud_requires_build_
>1817	ExpressionStatement	 
>1818	AssignmentExpr	depth_requires_calculation_ = true
>1819	Identifier	true
>1820	Identifier	depth_requires_calculation_
>1821	ExpressionStatement	 
>1822	AssignmentExpr	intensity_requires_calculation_ = true
>1823	Identifier	true
>1824	Identifier	intensity_requires_calculation_
>1825	IfStatement	if ( hasDepth ( ) )
>1826	CompoundStatement	 
>1827	ExpressionStatement	 
>1828	AssignmentExpr	height = depth . rows
>1829	MemberAccess	depth . rows
>1830	Identifier	rows
>1831	Identifier	depth
>1832	Identifier	height
>1833	ExpressionStatement	 
>1834	AssignmentExpr	width = depth . cols
>1835	MemberAccess	depth . cols
>1836	Identifier	cols
>1837	Identifier	depth
>1838	Identifier	width
>1839	ExpressionStatement	 
>1840	Statement	 
>1841	Statement	 
>1842	Statement	 
>1843	Statement	 
>1844	Statement	 
>1845	Statement	 
>1846	Statement	 
>1847	Statement	 
>1848	Statement	 
>1849	Statement	 
>1850	Statement	 
>1851	Statement	 
>1852	Statement	 
>1853	Statement	 
>1854	Statement	 
>1855	Statement	 
>1856	Statement	 
>1857	Statement	 
>1858	Statement	 
>1859	Statement	 
>1860	Statement	 
>1861	Statement	 
>1862	Statement	 
>1863	Statement	 
>1864	Statement	 
>1865	Condition	 
>1866	CallExpression	hasDepth ( )
>1867	ArgumentList	 
>1868	Callee	hasDepth
>1869	Identifier	hasDepth
>1870	IfStatement	if ( hasIntensity ( ) )
>1871	CompoundStatement	 
>1872	ExpressionStatement	 
>1873	AssignmentExpr	height = intensity . rows
>1874	MemberAccess	intensity . rows
>1875	Identifier	rows
>1876	Identifier	intensity
>1877	Identifier	height
>1878	ExpressionStatement	 
>1879	AssignmentExpr	width = intensity . cols
>1880	MemberAccess	intensity . cols
>1881	Identifier	cols
>1882	Identifier	intensity
>1883	Identifier	width
>1884	ExpressionStatement	 
>1885	Statement	 
>1886	Statement	 
>1887	Statement	 
>1888	Statement	 
>1889	Statement	 
>1890	Statement	 
>1891	Statement	 
>1892	Statement	 
>1893	Statement	 
>1894	Statement	 
>1895	Statement	 
>1896	Statement	 
>1897	Statement	 
>1898	Statement	 
>1899	Statement	 
>1900	Statement	 
>1901	Statement	 
>1902	Statement	 
>1903	Statement	 
>1904	Statement	 
>1905	Statement	 
>1906	Statement	 
>1907	Statement	 
>1908	Statement	 
>1909	Statement	 
>1910	Condition	 
>1911	CallExpression	hasIntensity ( )
>1912	ArgumentList	 
>1913	Callee	hasIntensity
>1914	Identifier	hasIntensity
>1915	IfStatement	if ( hasIntensity ( ) && hasDepth ( ) )
>1916	CompoundStatement	 
>1917	ExpressionStatement	 
>1918	CallExpression	assert ( intensity . size ( ) == depth . size ( ) )
>1919	ArgumentList	intensity . size ( ) == depth . size ( )
>1920	Argument	intensity . size ( ) == depth . size ( )
>1921	EqualityExpression	intensity . size ( ) == depth . size ( )
>1922	CallExpression	depth . size ( )
>1923	ArgumentList	 
>1924	Callee	depth . size
>1925	MemberAccess	depth . size
>1926	Identifier	size
>1927	Identifier	depth
>1928	CallExpression	intensity . size ( )
>1929	ArgumentList	 
>1930	Callee	intensity . size
>1931	MemberAccess	intensity . size
>1932	Identifier	size
>1933	Identifier	intensity
>1934	Callee	assert
>1935	Identifier	assert
>1936	Condition	 
>1937	AndExpression	hasIntensity ( ) && hasDepth ( )
>1938	CallExpression	hasDepth ( )
>1939	ArgumentList	 
>1940	Callee	hasDepth
>1941	Identifier	hasDepth
>1942	CallExpression	hasIntensity ( )
>1943	ArgumentList	 
>1944	Callee	hasIntensity
>1945	Identifier	hasIntensity
>1946	ExpressionStatement	 
>1947	CallExpression	assert ( hasIntensity ( ) || hasDepth ( ) )
>1948	ArgumentList	hasIntensity ( ) || hasDepth ( )
>1949	Argument	hasIntensity ( ) || hasDepth ( )
>1950	OrExpression	hasIntensity ( ) || hasDepth ( )
>1951	CallExpression	hasDepth ( )
>1952	ArgumentList	 
>1953	Callee	hasDepth
>1954	Identifier	hasDepth
>1955	CallExpression	hasIntensity ( )
>1956	ArgumentList	 
>1957	Callee	hasIntensity
>1958	Identifier	hasIntensity
>1959	Callee	assert
>1960	Identifier	assert
>1980	FunctionDef	RgbdImage 
>1981	ParameterList	 
>1982	ReturnType	bool
>1983	CompoundStatement	 
>1984	ReturnStatement	 
>1985	UnaryOp	! intensity . empty ( )
>1986	CallExpression	intensity . empty ( )
>1987	ArgumentList	 
>1988	Callee	intensity . empty
>1989	MemberAccess	intensity . empty
>1990	Identifier	empty
>1991	Identifier	intensity
>1992	UnaryOperator	!
>1998	FunctionDef	RgbdImage 
>1999	ParameterList	 
>2000	ReturnType	bool
>2001	CompoundStatement	 
>2002	ReturnStatement	 
>2003	UnaryOp	! rgb . empty ( )
>2004	CallExpression	rgb . empty ( )
>2005	ArgumentList	 
>2006	Callee	rgb . empty
>2007	MemberAccess	rgb . empty
>2008	Identifier	empty
>2009	Identifier	rgb
>2010	UnaryOperator	!
>2016	FunctionDef	RgbdImage 
>2017	ParameterList	 
>2018	ReturnType	bool
>2019	CompoundStatement	 
>2020	ReturnStatement	 
>2021	UnaryOp	! depth . empty ( )
>2022	CallExpression	depth . empty ( )
>2023	ArgumentList	 
>2024	Callee	depth . empty
>2025	MemberAccess	depth . empty
>2026	Identifier	empty
>2027	Identifier	depth
>2028	UnaryOperator	!
>2034	FunctionDef	RgbdImage 
>2035	ParameterList	 
>2036	ReturnType	void
>2037	CompoundStatement	 
>2038	ExpressionStatement	 
>2039	CallExpression	calculateDepthDerivatives ( )
>2040	ArgumentList	 
>2041	Callee	calculateDepthDerivatives
>2042	Identifier	calculateDepthDerivatives
>2043	ExpressionStatement	 
>2044	CallExpression	calculateIntensityDerivatives ( )
>2045	ArgumentList	 
>2046	Callee	calculateIntensityDerivatives
>2047	Identifier	calculateIntensityDerivatives
>2051	FunctionDef	RgbdImage 
>2052	ParameterList	 
>2053	ReturnType	bool
>2054	CompoundStatement	 
>2055	ReturnStatement	 
>2056	Identifier	true
>2057	ExpressionStatement	 
>2058	AssignmentExpr	intensity_requires_calculation_ = false
>2059	Identifier	false
>2060	Identifier	intensity_requires_calculation_
>2061	ExpressionStatement	 
>2062	CallExpression	calculateDerivativeYSseFloat ( intensity , intensity_dy )
>2063	ArgumentList	intensity
>2064	Argument	intensity_dy
>2065	Identifier	intensity_dy
>2066	Argument	intensity
>2067	Identifier	intensity
>2068	Callee	calculateDerivativeYSseFloat
>2069	Identifier	calculateDerivativeYSseFloat
>2070	ExpressionStatement	 
>2071	RelationalExpression	calculateDerivativeX < IntensityType > ( intensity , intensity_dx )
>2072	RelationalExpression	IntensityType > ( intensity , intensity_dx )
>2073	Expression	intensity , intensity_dx
>2074	Identifier	intensity_dx
>2075	Identifier	intensity
>2076	Identifier	IntensityType
>2077	Identifier	calculateDerivativeX
>2078	ExpressionStatement	 
>2079	CallExpression	assert ( hasIntensity ( ) )
>2080	ArgumentList	hasIntensity ( )
>2081	Argument	hasIntensity ( )
>2082	CallExpression	hasIntensity ( )
>2083	ArgumentList	 
>2084	Callee	hasIntensity
>2085	Identifier	hasIntensity
>2086	Callee	assert
>2087	Identifier	assert
>2088	IfStatement	if ( ! intensity_requires_calculation_ )
>2089	ReturnStatement	 
>2090	Identifier	false
>2091	Condition	 
>2092	UnaryOp	! intensity_requires_calculation_
>2093	Identifier	intensity_requires_calculation_
>2094	UnaryOperator	!
>2104	FunctionDef	RgbdImage 
>2105	ParameterList	 
>2106	ReturnType	void
>2107	CompoundStatement	 
>2108	ExpressionStatement	 
>2109	AssignmentExpr	depth_requires_calculation_ = false
>2110	Identifier	false
>2111	Identifier	depth_requires_calculation_
>2112	ExpressionStatement	 
>2113	RelationalExpression	calculateDerivativeY < DepthType > ( depth , depth_dy )
>2114	RelationalExpression	DepthType > ( depth , depth_dy )
>2115	Expression	depth , depth_dy
>2116	Identifier	depth_dy
>2117	Identifier	depth
>2118	Identifier	DepthType
>2119	Identifier	calculateDerivativeY
>2120	ExpressionStatement	 
>2121	RelationalExpression	calculateDerivativeX < DepthType > ( depth , depth_dx )
>2122	RelationalExpression	DepthType > ( depth , depth_dx )
>2123	Expression	depth , depth_dx
>2124	Identifier	depth_dx
>2125	Identifier	depth
>2126	Identifier	DepthType
>2127	Identifier	calculateDerivativeX
>2128	ExpressionStatement	 
>2129	CallExpression	assert ( hasDepth ( ) )
>2130	ArgumentList	hasDepth ( )
>2131	Argument	hasDepth ( )
>2132	CallExpression	hasDepth ( )
>2133	ArgumentList	 
>2134	Callee	hasDepth
>2135	Identifier	hasDepth
>2136	Callee	assert
>2137	Identifier	assert
>2138	IfStatement	if ( ! depth_requires_calculation_ )
>2139	ReturnStatement	 
>2140	Condition	 
>2141	UnaryOp	! depth_requires_calculation_
>2142	Identifier	depth_requires_calculation_
>2143	UnaryOperator	!
>2150	FunctionDef	RgbdImage 
>2151	ParameterList	const cv 
>2152	Parameter	 
>2153	Identifier	result
>2154	ParameterType	cv 
>2155	Parameter	 
>2156	Identifier	img
>2157	ParameterType	const cv 
>2158	ReturnType	void
>2159	CompoundStatement	 
>2160	ForStatement	for ( int y = 0 ; y < img . rows ; ++ y )
>2161	CompoundStatement	 
>2162	ForStatement	for ( int x = 0 ; x < img . cols ; ++ x )
>2163	CompoundStatement	 
>2164	ExpressionStatement	 
>2165	AssignmentExpr	result . at < T > ( y , x ) = ( T ) ( img . at < T > ( y , next ) - img . at < T > ( y , prev ) ) * 0.5f
>2166	MultiplicativeExpression	( T ) ( img . at < T > ( y , next ) - img . at < T > ( y , prev ) ) * 0.5f
>2167	PrimaryExpression	0.5f
>2168	CastExpression	( T ) ( img . at < T > ( y , next ) - img . at < T > ( y , prev ) )
>2169	RelationalExpression	img . at < T > ( y , next ) - img . at < T > ( y , prev )
>2170	RelationalExpression	T > ( y , next ) - img . at < T > ( y , prev )
>2171	RelationalExpression	( y , next ) - img . at < T > ( y , prev )
>2172	RelationalExpression	T > ( y , prev )
>2173	Expression	y , prev
>2174	Identifier	prev
>2175	Identifier	y
>2176	Identifier	T
>2177	AdditiveExpression	( y , next ) - img . at
>2178	MemberAccess	img . at
>2179	Identifier	at
>2180	Identifier	img
>2181	Expression	y , next
>2182	Identifier	next
>2183	Identifier	y
>2184	Identifier	T
>2185	MemberAccess	img . at
>2186	Identifier	at
>2187	Identifier	img
>2188	CastTarget	T
>2189	RelationalExpression	result . at < T > ( y , x )
>2190	RelationalExpression	T > ( y , x )
>2191	Expression	y , x
>2192	Identifier	x
>2193	Identifier	y
>2194	Identifier	T
>2195	MemberAccess	result . at
>2196	Identifier	at
>2197	Identifier	result
>2198	IdentifierDeclStatement	 
>2199	IdentifierDecl	next = std 
>2200	AssignmentExpr	next = std 
>2201	CallExpression	std 
>2202	ArgumentList	x + 1
>2203	Argument	img . cols - 1
>2204	AdditiveExpression	img . cols - 1
>2205	PrimaryExpression	1
>2206	MemberAccess	img . cols
>2207	Identifier	cols
>2208	Identifier	img
>2209	Argument	x + 1
>2210	AdditiveExpression	x + 1
>2211	PrimaryExpression	1
>2212	Identifier	x
>2213	Callee	std 
>2214	Identifier	std 
>2215	Identifier	next
>2216	Identifier	next
>2217	IdentifierDeclType	int
>2218	IdentifierDeclStatement	 
>2219	IdentifierDecl	prev = std 
>2220	AssignmentExpr	prev = std 
>2221	CallExpression	std 
>2222	ArgumentList	x - 1
>2223	Argument	0
>2224	PrimaryExpression	0
>2225	Argument	x - 1
>2226	AdditiveExpression	x - 1
>2227	PrimaryExpression	1
>2228	Identifier	x
>2229	Callee	std 
>2230	Identifier	std 
>2231	Identifier	prev
>2232	Identifier	prev
>2233	IdentifierDeclType	int
>2234	UnaryExpression	 
>2235	Identifier	x
>2236	IncDec	++
>2237	Condition	 
>2238	RelationalExpression	x < img . cols
>2239	MemberAccess	img . cols
>2240	Identifier	cols
>2241	Identifier	img
>2242	Identifier	x
>2243	ForInit	 
>2244	IdentifierDeclStatement	int x = 0 ;
>2245	IdentifierDecl	x = 0
>2246	AssignmentExpr	x = 0
>2247	PrimaryExpression	0
>2248	Identifier	x
>2249	Identifier	x
>2250	IdentifierDeclType	int
>2251	UnaryExpression	 
>2252	Identifier	y
>2253	IncDec	++
>2254	Condition	 
>2255	RelationalExpression	y < img . rows
>2256	MemberAccess	img . rows
>2257	Identifier	rows
>2258	Identifier	img
>2259	Identifier	y
>2260	ForInit	 
>2261	IdentifierDeclStatement	int y = 0 ;
>2262	IdentifierDecl	y = 0
>2263	AssignmentExpr	y = 0
>2264	PrimaryExpression	0
>2265	Identifier	y
>2266	Identifier	y
>2267	IdentifierDeclType	int
>2268	ExpressionStatement	 
>2269	CallExpression	result . create ( img . size ( ) , img . type ( ) )
>2270	ArgumentList	img . size ( )
>2271	Argument	img . type ( )
>2272	CallExpression	img . type ( )
>2273	ArgumentList	 
>2274	Callee	img . type
>2275	MemberAccess	img . type
>2276	Identifier	type
>2277	Identifier	img
>2278	Argument	img . size ( )
>2279	CallExpression	img . size ( )
>2280	ArgumentList	 
>2281	Callee	img . size
>2282	MemberAccess	img . size
>2283	Identifier	size
>2284	Identifier	img
>2285	Callee	result . create
>2286	MemberAccess	result . create
>2287	Identifier	create
>2288	Identifier	result
>2307	FunctionDef	RgbdImage 
>2308	ParameterList	const cv 
>2309	Parameter	 
>2310	Identifier	result
>2311	ParameterType	cv 
>2312	Parameter	 
>2313	Identifier	img
>2314	ParameterType	const cv 
>2315	ReturnType	void
>2316	CompoundStatement	 
>2317	ForStatement	for ( int y = 0 ; y < img . rows ; ++ y )
>2318	CompoundStatement	 
>2319	ForStatement	for ( int x = 0 ; x < img . cols ; ++ x )
>2320	CompoundStatement	 
>2321	ExpressionStatement	 
>2322	AssignmentExpr	result . at < T > ( y , x ) = ( T ) ( img . at < T > ( next , x ) - img . at < T > ( prev , x ) ) * 0.5f
>2323	MultiplicativeExpression	( T ) ( img . at < T > ( next , x ) - img . at < T > ( prev , x ) ) * 0.5f
>2324	PrimaryExpression	0.5f
>2325	CastExpression	( T ) ( img . at < T > ( next , x ) - img . at < T > ( prev , x ) )
>2326	RelationalExpression	img . at < T > ( next , x ) - img . at < T > ( prev , x )
>2327	RelationalExpression	T > ( next , x ) - img . at < T > ( prev , x )
>2328	RelationalExpression	( next , x ) - img . at < T > ( prev , x )
>2329	RelationalExpression	T > ( prev , x )
>2330	Expression	prev , x
>2331	Identifier	x
>2332	Identifier	prev
>2333	Identifier	T
>2334	AdditiveExpression	( next , x ) - img . at
>2335	MemberAccess	img . at
>2336	Identifier	at
>2337	Identifier	img
>2338	Expression	next , x
>2339	Identifier	x
>2340	Identifier	next
>2341	Identifier	T
>2342	MemberAccess	img . at
>2343	Identifier	at
>2344	Identifier	img
>2345	CastTarget	T
>2346	RelationalExpression	result . at < T > ( y , x )
>2347	RelationalExpression	T > ( y , x )
>2348	Expression	y , x
>2349	Identifier	x
>2350	Identifier	y
>2351	Identifier	T
>2352	MemberAccess	result . at
>2353	Identifier	at
>2354	Identifier	result
>2355	IdentifierDeclStatement	 
>2356	IdentifierDecl	next = std 
>2357	AssignmentExpr	next = std 
>2358	CallExpression	std 
>2359	ArgumentList	y + 1
>2360	Argument	img . rows - 1
>2361	AdditiveExpression	img . rows - 1
>2362	PrimaryExpression	1
>2363	MemberAccess	img . rows
>2364	Identifier	rows
>2365	Identifier	img
>2366	Argument	y + 1
>2367	AdditiveExpression	y + 1
>2368	PrimaryExpression	1
>2369	Identifier	y
>2370	Callee	std 
>2371	Identifier	std 
>2372	Identifier	next
>2373	Identifier	next
>2374	IdentifierDeclType	int
>2375	IdentifierDeclStatement	 
>2376	IdentifierDecl	prev = std 
>2377	AssignmentExpr	prev = std 
>2378	CallExpression	std 
>2379	ArgumentList	y - 1
>2380	Argument	0
>2381	PrimaryExpression	0
>2382	Argument	y - 1
>2383	AdditiveExpression	y - 1
>2384	PrimaryExpression	1
>2385	Identifier	y
>2386	Callee	std 
>2387	Identifier	std 
>2388	Identifier	prev
>2389	Identifier	prev
>2390	IdentifierDeclType	int
>2391	UnaryExpression	 
>2392	Identifier	x
>2393	IncDec	++
>2394	Condition	 
>2395	RelationalExpression	x < img . cols
>2396	MemberAccess	img . cols
>2397	Identifier	cols
>2398	Identifier	img
>2399	Identifier	x
>2400	ForInit	 
>2401	IdentifierDeclStatement	int x = 0 ;
>2402	IdentifierDecl	x = 0
>2403	AssignmentExpr	x = 0
>2404	PrimaryExpression	0
>2405	Identifier	x
>2406	Identifier	x
>2407	IdentifierDeclType	int
>2408	UnaryExpression	 
>2409	Identifier	y
>2410	IncDec	++
>2411	Condition	 
>2412	RelationalExpression	y < img . rows
>2413	MemberAccess	img . rows
>2414	Identifier	rows
>2415	Identifier	img
>2416	Identifier	y
>2417	ForInit	 
>2418	IdentifierDeclStatement	int y = 0 ;
>2419	IdentifierDecl	y = 0
>2420	AssignmentExpr	y = 0
>2421	PrimaryExpression	0
>2422	Identifier	y
>2423	Identifier	y
>2424	IdentifierDeclType	int
>2425	ExpressionStatement	 
>2426	CallExpression	result . create ( img . size ( ) , img . type ( ) )
>2427	ArgumentList	img . size ( )
>2428	Argument	img . type ( )
>2429	CallExpression	img . type ( )
>2430	ArgumentList	 
>2431	Callee	img . type
>2432	MemberAccess	img . type
>2433	Identifier	type
>2434	Identifier	img
>2435	Argument	img . size ( )
>2436	CallExpression	img . size ( )
>2437	ArgumentList	 
>2438	Callee	img . size
>2439	MemberAccess	img . size
>2440	Identifier	size
>2441	Identifier	img
>2442	Callee	result . create
>2443	MemberAccess	result . create
>2444	Identifier	create
>2445	Identifier	result
>2464	FunctionDef	RgbdImage 
>2465	ParameterList	 
>2466	ReturnType	void
>2467	CompoundStatement	 
>2468	ExpressionStatement	 
>2469	AssignmentExpr	pointcloud_requires_build_ = false
>2470	Identifier	false
>2471	Identifier	pointcloud_requires_build_
>2472	ExpressionStatement	 
>2473	CallExpression	camera_ . buildPointCloud ( depth , pointcloud )
>2474	ArgumentList	depth
>2475	Argument	pointcloud
>2476	Identifier	pointcloud
>2477	Argument	depth
>2478	Identifier	depth
>2479	Callee	camera_ . buildPointCloud
>2480	MemberAccess	camera_ . buildPointCloud
>2481	Identifier	buildPointCloud
>2482	Identifier	camera_
>2483	ExpressionStatement	 
>2484	CallExpression	assert ( hasDepth ( ) )
>2485	ArgumentList	hasDepth ( )
>2486	Argument	hasDepth ( )
>2487	CallExpression	hasDepth ( )
>2488	ArgumentList	 
>2489	Callee	hasDepth
>2490	Identifier	hasDepth
>2491	Callee	assert
>2492	Identifier	assert
>2493	IfStatement	if ( ! pointcloud_requires_build_ )
>2494	ReturnStatement	 
>2495	Condition	 
>2496	UnaryOp	! pointcloud_requires_build_
>2497	Identifier	pointcloud_requires_build_
>2498	UnaryOperator	!
>2508	FunctionDef	RgbdImage 
>2509	ParameterList	 
>2510	ReturnType	void
>2511	CompoundStatement	 
>2512	IfStatement	if ( angles . total ( ) == 0 )
>2513	CompoundStatement	 
>2514	ForStatement	for ( int y = 0 ; y < depth . rows ; ++ y )
>2515	CompoundStatement	 
>2516	ForStatement	for ( int x = 0 ; x < depth . cols ; ++ x , ++ angle_ptr , ++ normal_ptr )
>2517	CompoundStatement	 
>2518	ExpressionStatement	 
>2519	AssignmentExpr	* angle_ptr = std 
>2520	CallExpression	std 
>2521	ArgumentList	n ( 2 )
>2522	Argument	n ( 2 )
>2523	CallExpression	n ( 2 )
>2524	ArgumentList	2
>2525	Argument	2
>2526	PrimaryExpression	2
>2527	Callee	n
>2528	Identifier	n
>2529	Callee	std 
>2530	Identifier	std 
>2531	UnaryOp	* angle_ptr
>2532	Identifier	angle_ptr
>2533	UnaryOperator	*
>2534	ExpressionStatement	 
>2535	CallExpression	n . normalize ( )
>2536	ArgumentList	 
>2537	Callee	n . normalize
>2538	MemberAccess	n . normalize
>2539	Identifier	normalize
>2540	Identifier	n
>2541	ExpressionStatement	 
>2542	AssignmentExpr	n = ( pointcloud . col ( idx2 ) - pointcloud . col ( idx1 ) ) . cross3 ( pointcloud . col ( idx4 ) - \
>2543	CallExpression	( pointcloud . col ( idx2 ) - pointcloud . col ( idx1 ) ) . cross3 ( pointcloud . col ( idx4 ) - pointcloud . col ( \
>2544	ArgumentList	pointcloud . col ( idx4 ) - pointcloud . col ( idx3 )
>2545	Argument	pointcloud . col ( idx4 ) - pointcloud . col ( idx3 )
>2546	AdditiveExpression	pointcloud . col ( idx4 ) - pointcloud . col ( idx3 )
>2547	CallExpression	pointcloud . col ( idx3 )
>2548	ArgumentList	idx3
>2549	Argument	idx3
>2550	Identifier	idx3
>2551	Callee	pointcloud . col
>2552	MemberAccess	pointcloud . col
>2553	Identifier	col
>2554	Identifier	pointcloud
>2555	CallExpression	pointcloud . col ( idx4 )
>2556	ArgumentList	idx4
>2557	Argument	idx4
>2558	Identifier	idx4
>2559	Callee	pointcloud . col
>2560	MemberAccess	pointcloud . col
>2561	Identifier	col
>2562	Identifier	pointcloud
>2563	Callee	( pointcloud . col ( idx2 ) - pointcloud . col ( idx1 ) ) . cross3
>2564	MemberAccess	( pointcloud . col ( idx2 ) - pointcloud . col ( idx1 ) ) . cross3
>2565	Identifier	cross3
>2566	AdditiveExpression	pointcloud . col ( idx2 ) - pointcloud . col ( idx1 )
>2567	CallExpression	pointcloud . col ( idx1 )
>2568	ArgumentList	idx1
>2569	Argument	idx1
>2570	Identifier	idx1
>2571	Callee	pointcloud . col
>2572	MemberAccess	pointcloud . col
>2573	Identifier	col
>2574	Identifier	pointcloud
>2575	CallExpression	pointcloud . col ( idx2 )
>2576	ArgumentList	idx2
>2577	Argument	idx2
>2578	Identifier	idx2
>2579	Callee	pointcloud . col
>2580	MemberAccess	pointcloud . col
>2581	Identifier	col
>2582	Identifier	pointcloud
>2583	Identifier	n
>2584	IdentifierDeclStatement	 
>2585	IdentifierDecl	n ( normal_ptr -> val )
>2586	PtrMemberAccess	normal_ptr -> val
>2587	Identifier	val
>2588	Identifier	normal_ptr
>2589	Identifier	n
>2590	IdentifierDeclType	Eigen 
>2591	IdentifierDeclStatement	 
>2592	IdentifierDecl	idx4 = std 
>2593	AssignmentExpr	idx4 = std 
>2594	AdditiveExpression	std 
>2595	Identifier	x
>2596	MultiplicativeExpression	std 
>2597	MemberAccess	depth . cols
>2598	Identifier	cols
>2599	Identifier	depth
>2600	CallExpression	std 
>2601	ArgumentList	y + 1
>2602	Argument	y_max
>2603	Identifier	y_max
>2604	Argument	y + 1
>2605	AdditiveExpression	y + 1
>2606	PrimaryExpression	1
>2607	Identifier	y
>2608	Callee	std 
>2609	Identifier	std 
>2610	Identifier	idx4
>2611	Identifier	idx4
>2612	IdentifierDeclType	int
>2613	IdentifierDeclStatement	 
>2614	IdentifierDecl	idx3 = std 
>2615	AssignmentExpr	idx3 = std 
>2616	AdditiveExpression	std 
>2617	Identifier	x
>2618	MultiplicativeExpression	std 
>2619	MemberAccess	depth . cols
>2620	Identifier	cols
>2621	Identifier	depth
>2622	CallExpression	std 
>2623	ArgumentList	y - 1
>2624	Argument	0
>2625	PrimaryExpression	0
>2626	Argument	y - 1
>2627	AdditiveExpression	y - 1
>2628	PrimaryExpression	1
>2629	Identifier	y
>2630	Callee	std 
>2631	Identifier	std 
>2632	Identifier	idx3
>2633	Identifier	idx3
>2634	IdentifierDeclType	int
>2635	IdentifierDeclStatement	 
>2636	IdentifierDecl	idx2 = y * depth . cols + std 
>2637	AssignmentExpr	idx2 = y * depth . cols + std 
>2638	AdditiveExpression	y * depth . cols + std 
>2639	CallExpression	std 
>2640	ArgumentList	x + 1
>2641	Argument	x_max
>2642	Identifier	x_max
>2643	Argument	x + 1
>2644	AdditiveExpression	x + 1
>2645	PrimaryExpression	1
>2646	Identifier	x
>2647	Callee	std 
>2648	Identifier	std 
>2649	MultiplicativeExpression	y * depth . cols
>2650	MemberAccess	depth . cols
>2651	Identifier	cols
>2652	Identifier	depth
>2653	Identifier	y
>2654	Identifier	idx2
>2655	Identifier	idx2
>2656	IdentifierDeclType	int
>2657	IdentifierDeclStatement	 
>2658	IdentifierDecl	idx1 = y * depth . cols + std 
>2659	AssignmentExpr	idx1 = y * depth . cols + std 
>2660	AdditiveExpression	y * depth . cols + std 
>2661	CallExpression	std 
>2662	ArgumentList	x - 1
>2663	Argument	0
>2664	PrimaryExpression	0
>2665	Argument	x - 1
>2666	AdditiveExpression	x - 1
>2667	PrimaryExpression	1
>2668	Identifier	x
>2669	Callee	std 
>2670	Identifier	std 
>2671	MultiplicativeExpression	y * depth . cols
>2672	MemberAccess	depth . cols
>2673	Identifier	cols
>2674	Identifier	depth
>2675	Identifier	y
>2676	Identifier	idx1
>2677	Identifier	idx1
>2678	IdentifierDeclType	int
>2679	Expression	 
>2680	Expression	++ angle_ptr , ++ normal_ptr
>2681	UnaryExpression	++ normal_ptr
>2682	Identifier	normal_ptr
>2683	IncDec	++
>2684	UnaryExpression	++ angle_ptr
>2685	Identifier	angle_ptr
>2686	IncDec	++
>2687	UnaryExpression	++ x
>2688	Identifier	x
>2689	IncDec	++
>2690	Condition	 
>2691	RelationalExpression	x < depth . cols
>2692	MemberAccess	depth . cols
>2693	Identifier	cols
>2694	Identifier	depth
>2695	Identifier	x
>2696	ForInit	 
>2697	IdentifierDeclStatement	int x = 0 ;
>2698	IdentifierDecl	x = 0
>2699	AssignmentExpr	x = 0
>2700	PrimaryExpression	0
>2701	Identifier	x
>2702	Identifier	x
>2703	IdentifierDeclType	int
>2704	UnaryExpression	 
>2705	Identifier	y
>2706	IncDec	++
>2707	Condition	 
>2708	RelationalExpression	y < depth . rows
>2709	MemberAccess	depth . rows
>2710	Identifier	rows
>2711	Identifier	depth
>2712	Identifier	y
>2713	ForInit	 
>2714	IdentifierDeclStatement	int y = 0 ;
>2715	IdentifierDecl	y = 0
>2716	AssignmentExpr	y = 0
>2717	PrimaryExpression	0
>2718	Identifier	y
>2719	Identifier	y
>2720	IdentifierDeclType	int
>2721	IdentifierDeclStatement	 
>2722	IdentifierDecl	y_max = depth . rows - 1
>2723	AssignmentExpr	y_max = depth . rows - 1
>2724	AdditiveExpression	depth . rows - 1
>2725	PrimaryExpression	1
>2726	MemberAccess	depth . rows
>2727	Identifier	rows
>2728	Identifier	depth
>2729	Identifier	y_max
>2730	Identifier	y_max
>2731	IdentifierDeclType	int
>2732	IdentifierDeclStatement	 
>2733	IdentifierDecl	x_max = depth . cols - 1
>2734	AssignmentExpr	x_max = depth . cols - 1
>2735	AdditiveExpression	depth . cols - 1
>2736	PrimaryExpression	1
>2737	MemberAccess	depth . cols
>2738	Identifier	cols
>2739	Identifier	depth
>2740	Identifier	x_max
>2741	Identifier	x_max
>2742	IdentifierDeclType	int
>2743	ExpressionStatement	 
>2744	Statement	 
>2745	Statement	 
>2746	Statement	 
>2747	Statement	 
>2748	Statement	 
>2749	Statement	 
>2750	Statement	 
>2751	Statement	 
>2752	Statement	 
>2753	Statement	 
>2754	Statement	 
>2755	Statement	 
>2756	Statement	 
>2757	Statement	 
>2758	Statement	 
>2759	Statement	 
>2760	ExpressionStatement	 
>2761	Statement	 
>2762	Statement	 
>2763	Statement	 
>2764	Statement	 
>2765	Statement	 
>2766	Statement	 
>2767	Statement	 
>2768	Statement	 
>2769	Statement	 
>2770	Statement	 
>2771	Statement	 
>2772	Statement	 
>2773	ExpressionStatement	 
>2774	CallExpression	angles . create ( depth . size ( ) , CV_32FC1 )
>2775	ArgumentList	depth . size ( )
>2776	Argument	CV_32FC1
>2777	Identifier	CV_32FC1
>2778	Argument	depth . size ( )
>2779	CallExpression	depth . size ( )
>2780	ArgumentList	 
>2781	Callee	depth . size
>2782	MemberAccess	depth . size
>2783	Identifier	size
>2784	Identifier	depth
>2785	Callee	angles . create
>2786	MemberAccess	angles . create
>2787	Identifier	create
>2788	Identifier	angles
>2789	ExpressionStatement	 
>2790	AssignmentExpr	normals = cv 
>2791	CallExpression	cv 
>2792	ArgumentList	depth . size ( )
>2793	Argument	CV_32FC4
>2794	Identifier	CV_32FC4
>2795	Argument	depth . size ( )
>2796	CallExpression	depth . size ( )
>2797	ArgumentList	 
>2798	Callee	depth . size
>2799	MemberAccess	depth . size
>2800	Identifier	size
>2801	Identifier	depth
>2802	Callee	cv 
>2803	Identifier	cv 
>2804	Identifier	normals
>2805	Condition	 
>2806	EqualityExpression	angles . total ( ) == 0
>2807	PrimaryExpression	0
>2808	CallExpression	angles . total ( )
>2809	ArgumentList	 
>2810	Callee	angles . total
>2811	MemberAccess	angles . total
>2812	Identifier	total
>2813	Identifier	angles
>2845	FunctionDef	RgbdImage 
>2846	ParameterList	 
>2847	ReturnType	void
>2848	CompoundStatement	 
>2849	IfStatement	if ( acceleration . total ( ) == 0 )
>2850	CompoundStatement	 
>2851	ExpressionStatement	 
>2852	CallExpression	cv 
>2853	ArgumentList	channels
>2854	Argument	acceleration
>2855	Identifier	acceleration
>2856	Argument	8
>2857	PrimaryExpression	8
>2858	Argument	channels
>2859	Identifier	channels
>2860	Callee	cv 
>2861	Identifier	cv 
>2862	IdentifierDeclStatement	 
>2863	IdentifierDecl	channels [ 8 ] = { intensity , depth , intensity_dx , intensity_dy , depth_dx , depth_dy , zeros , zeros }
>2864	AssignmentExpr	channels [ 8 ] = { intensity , depth , intensity_dx , intensity_dy , depth_dx , depth_dy , zeros , zeros }
>2865	InitializerList	intensity
>2866	Identifier	zeros
>2867	Identifier	zeros
>2868	Identifier	depth_dy
>2869	Identifier	depth_dx
>2870	Identifier	intensity_dy
>2871	Identifier	intensity_dx
>2872	Identifier	depth
>2873	Identifier	intensity
>2874	Identifier	channels
>2875	PrimaryExpression	8
>2876	Identifier	channels
>2877	IdentifierDeclType	cv 
>2878	IdentifierDeclStatement	 
>2879	IdentifierDecl	zeros = cv 
>2880	AssignmentExpr	zeros = cv 
>2881	CallExpression	cv 
>2882	ArgumentList	intensity . size ( )
>2883	Argument	intensity . type ( )
>2884	CallExpression	intensity . type ( )
>2885	ArgumentList	 
>2886	Callee	intensity . type
>2887	MemberAccess	intensity . type
>2888	Identifier	type
>2889	Identifier	intensity
>2890	Argument	intensity . size ( )
>2891	CallExpression	intensity . size ( )
>2892	ArgumentList	 
>2893	Callee	intensity . size
>2894	MemberAccess	intensity . size
>2895	Identifier	size
>2896	Identifier	intensity
>2897	Callee	cv 
>2898	Identifier	cv 
>2899	Identifier	zeros
>2900	Identifier	zeros
>2901	IdentifierDeclType	cv 
>2902	ExpressionStatement	 
>2903	CallExpression	calculateDerivatives ( )
>2904	ArgumentList	 
>2905	Callee	calculateDerivatives
>2906	Identifier	calculateDerivatives
>2907	Condition	 
>2908	EqualityExpression	acceleration . total ( ) == 0
>2909	PrimaryExpression	0
>2910	CallExpression	acceleration . total ( )
>2911	ArgumentList	 
>2912	Callee	acceleration . total
>2913	MemberAccess	acceleration . total
>2914	Identifier	total
>2915	Identifier	acceleration
>2932	FunctionDef	RgbdImage 
>2933	ParameterList	const AffineTransform & transformationd , const PointCloud & reference_pointcloud , const IntrinsicMatrix & intrinsics , \
>2934	Parameter	 
>2935	Identifier	transformed_pointcloud
>2936	ParameterType	PointCloud &
>2937	Parameter	 
>2938	Identifier	result
>2939	ParameterType	RgbdImage &
>2940	Parameter	 
>2941	Identifier	intrinsics
>2942	ParameterType	const IntrinsicMatrix &
>2943	Parameter	 
>2944	Identifier	reference_pointcloud
>2945	ParameterType	const PointCloud &
>2946	Parameter	 
>2947	Identifier	transformationd
>2948	ParameterType	const AffineTransform &
>2949	ReturnType	void
>2950	CompoundStatement	 
>2951	ExpressionStatement	 
>2952	CallExpression	result . initialize ( )
>2953	ArgumentList	 
>2954	Callee	result . initialize
>2955	MemberAccess	result . initialize
>2956	Identifier	initialize
>2957	Identifier	result
>2958	ExpressionStatement	 
>2959	AssignmentExpr	result . depth = warped_depth
>2960	Identifier	warped_depth
>2961	MemberAccess	result . depth
>2962	Identifier	depth
>2963	Identifier	result
>2964	ExpressionStatement	 
>2965	AssignmentExpr	result . intensity = warped_image
>2966	Identifier	warped_image
>2967	MemberAccess	result . intensity
>2968	Identifier	intensity
>2969	Identifier	result
>2970	ForStatement	for ( size_t y = 0 ; y < height ; ++ y )
>2971	CompoundStatement	 
>2972	ForStatement	for ( size_t x = 0 ; x < width ; ++ x , ++ idx , ++ warped_intensity_ptr , ++ warped_depth_ptr )
>2973	CompoundStatement	 
>2974	IfStatement	if ( inImage ( x_projected , y_projected ) )
>2975	ElseStatement	else
>2976	CompoundStatement	 
>2977	ExpressionStatement	 
>2978	AssignmentExpr	* warped_depth_ptr = InvalidDepth
>2979	Identifier	InvalidDepth
>2980	UnaryOp	* warped_depth_ptr
>2981	Identifier	warped_depth_ptr
>2982	UnaryOperator	*
>2983	ExpressionStatement	 
>2984	AssignmentExpr	* warped_intensity_ptr = Invalid
>2985	Identifier	Invalid
>2986	UnaryOp	* warped_intensity_ptr
>2987	Identifier	warped_intensity_ptr
>2988	UnaryOperator	*
>2989	CompoundStatement	 
>2990	ExpressionStatement	 
>2991	AssignmentExpr	* warped_depth_ptr = z
>2992	Identifier	z
>2993	UnaryOp	* warped_depth_ptr
>2994	Identifier	warped_depth_ptr
>2995	UnaryOperator	*
>2996	ExpressionStatement	 
>2997	AssignmentExpr	* warped_intensity_ptr = Interpolation 
>2998	CallExpression	Interpolation 
>2999	ArgumentList	this -> intensity
>3000	Argument	z
>3001	Identifier	z
>3002	Argument	y_projected
>3003	Identifier	y_projected
>3004	Argument	x_projected
>3005	Identifier	x_projected
>3006	Argument	this -> depth
>3007	PtrMemberAccess	this -> depth
>3008	Identifier	depth
>3009	Identifier	this
>3010	Argument	this -> intensity
>3011	PtrMemberAccess	this -> intensity
>3012	Identifier	intensity
>3013	Identifier	this
>3014	Callee	Interpolation 
>3015	Identifier	Interpolation 
>3016	UnaryOp	* warped_intensity_ptr
>3017	Identifier	warped_intensity_ptr
>3018	UnaryOperator	*
>3019	IdentifierDeclStatement	 
>3020	IdentifierDecl	z = ( float ) p3d ( 2 )
>3021	AssignmentExpr	z = ( float ) p3d ( 2 )
>3022	CastExpression	( float ) p3d ( 2 )
>3023	CallExpression	p3d ( 2 )
>3024	ArgumentList	2
>3025	Argument	2
>3026	PrimaryExpression	2
>3027	Callee	p3d
>3028	Identifier	p3d
>3029	CastTarget	float
>3030	Identifier	z
>3031	Identifier	z
>3032	IdentifierDeclType	float
>3033	Condition	 
>3034	CallExpression	inImage ( x_projected , y_projected )
>3035	ArgumentList	x_projected
>3036	Argument	y_projected
>3037	Identifier	y_projected
>3038	Argument	x_projected
>3039	Identifier	x_projected
>3040	Callee	inImage
>3041	Identifier	inImage
>3042	IdentifierDeclStatement	 
>3043	IdentifierDecl	y_projected = ( float ) ( p3d ( 1 ) * intrinsics . fy ( ) / p3d ( 2 ) + oy )
>3044	AssignmentExpr	y_projected = ( float ) ( p3d ( 1 ) * intrinsics . fy ( ) / p3d ( 2 ) + oy )
>3045	CastExpression	( float ) ( p3d ( 1 ) * intrinsics . fy ( ) / p3d ( 2 ) + oy )
>3046	AdditiveExpression	p3d ( 1 ) * intrinsics . fy ( ) / p3d ( 2 ) + oy
>3047	Identifier	oy
>3048	MultiplicativeExpression	p3d ( 1 ) * intrinsics . fy ( ) / p3d ( 2 )
>3049	MultiplicativeExpression	intrinsics . fy ( ) / p3d ( 2 )
>3050	CallExpression	p3d ( 2 )
>3051	ArgumentList	2
>3052	Argument	2
>3053	PrimaryExpression	2
>3054	Callee	p3d
>3055	Identifier	p3d
>3056	CallExpression	intrinsics . fy ( )
>3057	ArgumentList	 
>3058	Callee	intrinsics . fy
>3059	MemberAccess	intrinsics . fy
>3060	Identifier	fy
>3061	Identifier	intrinsics
>3062	CallExpression	p3d ( 1 )
>3063	ArgumentList	1
>3064	Argument	1
>3065	PrimaryExpression	1
>3066	Callee	p3d
>3067	Identifier	p3d
>3068	CastTarget	float
>3069	Identifier	y_projected
>3070	Identifier	y_projected
>3071	IdentifierDeclType	float
>3072	IdentifierDeclStatement	 
>3073	IdentifierDecl	x_projected = ( float ) ( p3d ( 0 ) * intrinsics . fx ( ) / p3d ( 2 ) + ox )
>3074	AssignmentExpr	x_projected = ( float ) ( p3d ( 0 ) * intrinsics . fx ( ) / p3d ( 2 ) + ox )
>3075	CastExpression	( float ) ( p3d ( 0 ) * intrinsics . fx ( ) / p3d ( 2 ) + ox )
>3076	AdditiveExpression	p3d ( 0 ) * intrinsics . fx ( ) / p3d ( 2 ) + ox
>3077	Identifier	ox
>3078	MultiplicativeExpression	p3d ( 0 ) * intrinsics . fx ( ) / p3d ( 2 )
>3079	MultiplicativeExpression	intrinsics . fx ( ) / p3d ( 2 )
>3080	CallExpression	p3d ( 2 )
>3081	ArgumentList	2
>3082	Argument	2
>3083	PrimaryExpression	2
>3084	Callee	p3d
>3085	Identifier	p3d
>3086	CallExpression	intrinsics . fx ( )
>3087	ArgumentList	 
>3088	Callee	intrinsics . fx
>3089	MemberAccess	intrinsics . fx
>3090	Identifier	fx
>3091	Identifier	intrinsics
>3092	CallExpression	p3d ( 0 )
>3093	ArgumentList	0
>3094	Argument	0
>3095	PrimaryExpression	0
>3096	Callee	p3d
>3097	Identifier	p3d
>3098	CastTarget	float
>3099	Identifier	x_projected
>3100	Identifier	x_projected
>3101	IdentifierDeclType	float
>3102	IfStatement	if ( ! std 
>3103	CompoundStatement	 
>3104	ContinueStatement	 
>3105	ExpressionStatement	 
>3106	AssignmentExpr	* warped_depth_ptr = InvalidDepth
>3107	Identifier	InvalidDepth
>3108	UnaryOp	* warped_depth_ptr
>3109	Identifier	warped_depth_ptr
>3110	UnaryOperator	*
>3111	ExpressionStatement	 
>3112	AssignmentExpr	* warped_intensity_ptr = Invalid
>3113	Identifier	Invalid
>3114	UnaryOp	* warped_intensity_ptr
>3115	Identifier	warped_intensity_ptr
>3116	UnaryOperator	*
>3117	Condition	 
>3118	UnaryOp	! std 
>3119	CallExpression	std 
>3120	ArgumentList	p3d ( 2 )
>3121	Argument	p3d ( 2 )
>3122	CallExpression	p3d ( 2 )
>3123	ArgumentList	2
>3124	Argument	2
>3125	PrimaryExpression	2
>3126	Callee	p3d
>3127	Identifier	p3d
>3128	Callee	std 
>3129	Identifier	std 
>3130	UnaryOperator	!
>3131	IdentifierDeclStatement	 
>3132	IdentifierDecl	& p3d = transformed_pointcloud . col ( idx )
>3133	AssignmentExpr	& p3d = transformed_pointcloud . col ( idx )
>3134	CallExpression	transformed_pointcloud . col ( idx )
>3135	ArgumentList	idx
>3136	Argument	idx
>3137	Identifier	idx
>3138	Callee	transformed_pointcloud . col
>3139	MemberAccess	transformed_pointcloud . col
>3140	Identifier	col
>3141	Identifier	transformed_pointcloud
>3142	Identifier	p3d
>3143	Identifier	p3d
>3144	IdentifierDeclType	const Eigen 
>3145	Expression	 
>3146	Expression	++ idx , ++ warped_intensity_ptr , ++ warped_depth_ptr
>3147	Expression	++ warped_intensity_ptr , ++ warped_depth_ptr
>3148	UnaryExpression	++ warped_depth_ptr
>3149	Identifier	warped_depth_ptr
>3150	IncDec	++
>3151	UnaryExpression	++ warped_intensity_ptr
>3152	Identifier	warped_intensity_ptr
>3153	IncDec	++
>3154	UnaryExpression	++ idx
>3155	Identifier	idx
>3156	IncDec	++
>3157	UnaryExpression	++ x
>3158	Identifier	x
>3159	IncDec	++
>3160	Condition	 
>3161	RelationalExpression	x < width
>3162	Identifier	width
>3163	Identifier	x
>3164	ForInit	 
>3165	IdentifierDeclStatement	size_t x = 0 ;
>3166	IdentifierDecl	x = 0
>3167	AssignmentExpr	x = 0
>3168	PrimaryExpression	0
>3169	Identifier	x
>3170	Identifier	x
>3171	IdentifierDeclType	size_t
>3172	UnaryExpression	 
>3173	Identifier	y
>3174	IncDec	++
>3175	Condition	 
>3176	RelationalExpression	y < height
>3177	Identifier	height
>3178	Identifier	y
>3179	ForInit	 
>3180	IdentifierDeclStatement	size_t y = 0 ;
>3181	IdentifierDecl	y = 0
>3182	AssignmentExpr	y = 0
>3183	PrimaryExpression	0
>3184	Identifier	y
>3185	Identifier	y
>3186	IdentifierDeclType	size_t
>3187	ExpressionStatement	 
>3188	AssignmentExpr	transformed_pointcloud = transformation * reference_pointcloud
>3189	MultiplicativeExpression	transformation * reference_pointcloud
>3190	Identifier	reference_pointcloud
>3191	Identifier	transformation
>3192	Identifier	transformed_pointcloud
>3193	IdentifierDeclStatement	 
>3194	IdentifierDecl	idx = 0
>3195	AssignmentExpr	idx = 0
>3196	PrimaryExpression	0
>3197	Identifier	idx
>3198	Identifier	idx
>3199	IdentifierDeclType	int
>3200	IdentifierDeclStatement	 
>3201	IdentifierDecl	total = 0
>3202	AssignmentExpr	total = 0
>3203	PrimaryExpression	0
>3204	Identifier	total
>3205	Identifier	total
>3206	IdentifierDeclType	int
>3207	IdentifierDeclStatement	 
>3208	IdentifierDecl	outliers = 0
>3209	AssignmentExpr	outliers = 0
>3210	PrimaryExpression	0
>3211	Identifier	outliers
>3212	Identifier	outliers
>3213	IdentifierDeclType	int
>3214	ExpressionStatement	 
>3215	Statement	 
>3216	Statement	 
>3217	Statement	 
>3218	Statement	 
>3219	Statement	 
>3220	Statement	 
>3221	Statement	 
>3222	Statement	 
>3223	Statement	 
>3224	Statement	 
>3225	Statement	 
>3226	Statement	 
>3227	ExpressionStatement	 
>3228	Statement	 
>3229	Statement	 
>3230	Statement	 
>3231	Statement	 
>3232	Statement	 
>3233	Statement	 
>3234	Statement	 
>3235	Statement	 
>3236	Statement	 
>3237	Statement	 
>3238	Statement	 
>3239	Statement	 
>3240	IdentifierDeclStatement	 
>3241	IdentifierDecl	oy = intrinsics . oy ( )
>3242	AssignmentExpr	oy = intrinsics . oy ( )
>3243	CallExpression	intrinsics . oy ( )
>3244	ArgumentList	 
>3245	Callee	intrinsics . oy
>3246	MemberAccess	intrinsics . oy
>3247	Identifier	oy
>3248	Identifier	intrinsics
>3249	Identifier	oy
>3250	Identifier	oy
>3251	IdentifierDeclType	float
>3252	IdentifierDeclStatement	 
>3253	IdentifierDecl	ox = intrinsics . ox ( )
>3254	AssignmentExpr	ox = intrinsics . ox ( )
>3255	CallExpression	intrinsics . ox ( )
>3256	ArgumentList	 
>3257	Callee	intrinsics . ox
>3258	MemberAccess	intrinsics . ox
>3259	Identifier	ox
>3260	Identifier	intrinsics
>3261	Identifier	ox
>3262	Identifier	ox
>3263	IdentifierDeclType	float
>3264	IdentifierDeclStatement	 
>3265	IdentifierDecl	warped_depth ( depth . size ( ) , depth . type ( ) )
>3266	Expression	depth . size ( ) , depth . type ( )
>3267	CallExpression	depth . type ( )
>3268	ArgumentList	 
>3269	Callee	depth . type
>3270	MemberAccess	depth . type
>3271	Identifier	type
>3272	Identifier	depth
>3273	CallExpression	depth . size ( )
>3274	ArgumentList	 
>3275	Callee	depth . size
>3276	MemberAccess	depth . size
>3277	Identifier	size
>3278	Identifier	depth
>3279	Identifier	warped_depth
>3280	IdentifierDeclType	cv 
>3281	IdentifierDeclStatement	 
>3282	IdentifierDecl	warped_image ( intensity . size ( ) , intensity . type ( ) )
>3283	Expression	intensity . size ( ) , intensity . type ( )
>3284	CallExpression	intensity . type ( )
>3285	ArgumentList	 
>3286	Callee	intensity . type
>3287	MemberAccess	intensity . type
>3288	Identifier	type
>3289	Identifier	intensity
>3290	CallExpression	intensity . size ( )
>3291	ArgumentList	 
>3292	Callee	intensity . size
>3293	MemberAccess	intensity . size
>3294	Identifier	size
>3295	Identifier	intensity
>3296	Identifier	warped_image
>3297	IdentifierDeclType	cv 
>3298	ExpressionStatement	 
>3299	Statement	 
>3300	Statement	 
>3301	Statement	 
>3302	Statement	 
>3303	Statement	 
>3304	Statement	 
>3305	Statement	 
>3306	Statement	 
>3307	Statement	 
>3308	Statement	 
>3309	Statement	 
>3310	Statement	 
>3311	Statement	 
>3358	FunctionDef	RgbdImage 
>3359	ParameterList	const AffineTransform & transformationx , const IntrinsicMatrix & intrinsics , RgbdImage & result , cv 
>3360	Parameter	 
>3361	Identifier	cloud
>3362	ParameterType	cv 
>3363	Parameter	 
>3364	Identifier	result
>3365	ParameterType	RgbdImage &
>3366	Parameter	 
>3367	Identifier	intrinsics
>3368	ParameterType	const IntrinsicMatrix &
>3369	Parameter	 
>3370	Identifier	transformationx
>3371	ParameterType	const AffineTransform &
>3372	ReturnType	void
>3373	CompoundStatement	 
>3374	ExpressionStatement	 
>3375	CallExpression	result . initialize ( )
>3376	ArgumentList	 
>3377	Callee	result . initialize
>3378	MemberAccess	result . initialize
>3379	Identifier	initialize
>3380	Identifier	result
>3381	ExpressionStatement	 
>3382	AssignmentExpr	result . depth = warped_depth
>3383	Identifier	warped_depth
>3384	MemberAccess	result . depth
>3385	Identifier	depth
>3386	Identifier	result
>3387	ForStatement	for ( size_t y = 0 ; y < height ; ++ y )
>3388	CompoundStatement	 
>3389	ForStatement	for ( size_t x = 0 ; x < width ; ++ x , ++ depth_ptr )
>3390	CompoundStatement	 
>3391	ExpressionStatement	 
>3392	AssignmentExpr	cloud ( y , x ) = cv 
>3393	CallExpression	cv 
>3394	ArgumentList	p3d ( 0 )
>3395	Argument	p3d ( 2 )
>3396	CallExpression	p3d ( 2 )
>3397	ArgumentList	2
>3398	Argument	2
>3399	PrimaryExpression	2
>3400	Callee	p3d
>3401	Identifier	p3d
>3402	Argument	p3d ( 1 )
>3403	CallExpression	p3d ( 1 )
>3404	ArgumentList	1
>3405	Argument	1
>3406	PrimaryExpression	1
>3407	Callee	p3d
>3408	Identifier	p3d
>3409	Argument	p3d ( 0 )
>3410	CallExpression	p3d ( 0 )
>3411	ArgumentList	0
>3412	Argument	0
>3413	PrimaryExpression	0
>3414	Callee	p3d
>3415	Identifier	p3d
>3416	Callee	cv 
>3417	Identifier	cv 
>3418	CallExpression	cloud ( y , x )
>3419	ArgumentList	y
>3420	Argument	x
>3421	Identifier	x
>3422	Argument	y
>3423	Identifier	y
>3424	Callee	cloud
>3425	Identifier	cloud
>3426	ExpressionStatement	 
>3427	IncDecOp	total ++
>3428	IncDec	++
>3429	Identifier	total
>3430	ExpressionStatement	 
>3431	AssignmentExpr	p3d = p3d_transformed
>3432	Identifier	p3d_transformed
>3433	Identifier	p3d
>3434	IfStatement	if ( inImage ( x_projected , y_projected ) )
>3435	CompoundStatement	 
>3436	IfStatement	if ( ! std 
>3437	ExpressionStatement	 
>3438	AssignmentExpr	warped_depth . at < DepthType > ( yi , xi ) = depth
>3439	Identifier	depth
>3440	RelationalExpression	warped_depth . at < DepthType > ( yi , xi )
>3441	RelationalExpression	DepthType > ( yi , xi )
>3442	Expression	yi , xi
>3443	Identifier	xi
>3444	Identifier	yi
>3445	Identifier	DepthType
>3446	MemberAccess	warped_depth . at
>3447	Identifier	at
>3448	Identifier	warped_depth
>3449	Condition	 
>3450	OrExpression	! std 
>3451	RelationalExpression	( warped_depth . at < DepthType > ( yi , xi ) - 0.05 ) > depth
>3452	Identifier	depth
>3453	RelationalExpression	warped_depth . at < DepthType > ( yi , xi ) - 0.05
>3454	RelationalExpression	DepthType > ( yi , xi ) - 0.05
>3455	AdditiveExpression	( yi , xi ) - 0.05
>3456	PrimaryExpression	0.05
>3457	Expression	yi , xi
>3458	Identifier	xi
>3459	Identifier	yi
>3460	Identifier	DepthType
>3461	MemberAccess	warped_depth . at
>3462	Identifier	at
>3463	Identifier	warped_depth
>3464	UnaryOp	! std 
>3465	CallExpression	std 
>3466	ArgumentList	warped_depth . at < DepthType > ( yi , xi )
>3467	Argument	warped_depth . at < DepthType > ( yi , xi )
>3468	RelationalExpression	warped_depth . at < DepthType > ( yi , xi )
>3469	RelationalExpression	DepthType > ( yi , xi )
>3470	Expression	yi , xi
>3471	Identifier	xi
>3472	Identifier	yi
>3473	Identifier	DepthType
>3474	MemberAccess	warped_depth . at
>3475	Identifier	at
>3476	Identifier	warped_depth
>3477	Callee	std 
>3478	Identifier	std 
>3479	UnaryOperator	!
>3480	IdentifierDeclStatement	 
>3481	IdentifierDecl	xi = ( int ) x_projected
>3482	AssignmentExpr	xi = ( int ) x_projected
>3483	CastExpression	( int ) x_projected
>3484	Identifier	x_projected
>3485	CastTarget	int
>3486	Identifier	xi
>3487	Identifier	xi
>3488	IdentifierDeclType	int
>3489	IdentifierDecl	yi = ( int ) y_projected
>3490	AssignmentExpr	yi = ( int ) y_projected
>3491	CastExpression	( int ) y_projected
>3492	Identifier	y_projected
>3493	CastTarget	int
>3494	Identifier	yi
>3495	Identifier	yi
>3496	IdentifierDeclType	int
>3497	Condition	 
>3498	CallExpression	inImage ( x_projected , y_projected )
>3499	ArgumentList	x_projected
>3500	Argument	y_projected
>3501	Identifier	y_projected
>3502	Argument	x_projected
>3503	Identifier	x_projected
>3504	Callee	inImage
>3505	Identifier	inImage
>3506	IdentifierDeclStatement	 
>3507	IdentifierDecl	y_projected = ( float ) ( p3d_transformed ( 1 ) * intrinsics . fy ( ) / p3d_transformed ( 2 ) + oy )
>3508	AssignmentExpr	y_projected = ( float ) ( p3d_transformed ( 1 ) * intrinsics . fy ( ) / p3d_transformed ( 2 ) + oy )
>3509	CastExpression	( float ) ( p3d_transformed ( 1 ) * intrinsics . fy ( ) / p3d_transformed ( 2 ) + oy )
>3510	AdditiveExpression	p3d_transformed ( 1 ) * intrinsics . fy ( ) / p3d_transformed ( 2 ) + oy
>3511	Identifier	oy
>3512	MultiplicativeExpression	p3d_transformed ( 1 ) * intrinsics . fy ( ) / p3d_transformed ( 2 )
>3513	MultiplicativeExpression	intrinsics . fy ( ) / p3d_transformed ( 2 )
>3514	CallExpression	p3d_transformed ( 2 )
>3515	ArgumentList	2
>3516	Argument	2
>3517	PrimaryExpression	2
>3518	Callee	p3d_transformed
>3519	Identifier	p3d_transformed
>3520	CallExpression	intrinsics . fy ( )
>3521	ArgumentList	 
>3522	Callee	intrinsics . fy
>3523	MemberAccess	intrinsics . fy
>3524	Identifier	fy
>3525	Identifier	intrinsics
>3526	CallExpression	p3d_transformed ( 1 )
>3527	ArgumentList	1
>3528	Argument	1
>3529	PrimaryExpression	1
>3530	Callee	p3d_transformed
>3531	Identifier	p3d_transformed
>3532	CastTarget	float
>3533	Identifier	y_projected
>3534	Identifier	y_projected
>3535	IdentifierDeclType	float
>3536	IdentifierDeclStatement	 
>3537	IdentifierDecl	x_projected = ( float ) ( p3d_transformed ( 0 ) * intrinsics . fx ( ) / p3d_transformed ( 2 ) + ox )
>3538	AssignmentExpr	x_projected = ( float ) ( p3d_transformed ( 0 ) * intrinsics . fx ( ) / p3d_transformed ( 2 ) + ox )
>3539	CastExpression	( float ) ( p3d_transformed ( 0 ) * intrinsics . fx ( ) / p3d_transformed ( 2 ) + ox )
>3540	AdditiveExpression	p3d_transformed ( 0 ) * intrinsics . fx ( ) / p3d_transformed ( 2 ) + ox
>3541	Identifier	ox
>3542	MultiplicativeExpression	p3d_transformed ( 0 ) * intrinsics . fx ( ) / p3d_transformed ( 2 )
>3543	MultiplicativeExpression	intrinsics . fx ( ) / p3d_transformed ( 2 )
>3544	CallExpression	p3d_transformed ( 2 )
>3545	ArgumentList	2
>3546	Argument	2
>3547	PrimaryExpression	2
>3548	Callee	p3d_transformed
>3549	Identifier	p3d_transformed
>3550	CallExpression	intrinsics . fx ( )
>3551	ArgumentList	 
>3552	Callee	intrinsics . fx
>3553	MemberAccess	intrinsics . fx
>3554	Identifier	fx
>3555	Identifier	intrinsics
>3556	CallExpression	p3d_transformed ( 0 )
>3557	ArgumentList	0
>3558	Argument	0
>3559	PrimaryExpression	0
>3560	Callee	p3d_transformed
>3561	Identifier	p3d_transformed
>3562	CastTarget	float
>3563	Identifier	x_projected
>3564	Identifier	x_projected
>3565	IdentifierDeclType	float
>3566	IdentifierDeclStatement	 
>3567	IdentifierDecl	p3d_transformed = transformation * p3d
>3568	AssignmentExpr	p3d_transformed = transformation * p3d
>3569	MultiplicativeExpression	transformation * p3d
>3570	Identifier	p3d
>3571	Identifier	transformation
>3572	Identifier	p3d_transformed
>3573	Identifier	p3d_transformed
>3574	IdentifierDeclType	Eigen 
>3575	IdentifierDeclStatement	 
>3576	IdentifierDecl	p3d ( ( x - ox ) * depth / intrinsics . fx ( ) , ( y - oy ) * depth / intrinsics . fy ( ) , depth )
>3577	Expression	( x - ox ) * depth / intrinsics . fx ( ) , ( y - oy ) * depth / intrinsics . fy ( ) , depth
>3578	Expression	( y - oy ) * depth / intrinsics . fy ( ) , depth
>3579	Identifier	depth
>3580	MultiplicativeExpression	( y - oy ) * depth / intrinsics . fy ( )
>3581	MultiplicativeExpression	depth / intrinsics . fy ( )
>3582	CallExpression	intrinsics . fy ( )
>3583	ArgumentList	 
>3584	Callee	intrinsics . fy
>3585	MemberAccess	intrinsics . fy
>3586	Identifier	fy
>3587	Identifier	intrinsics
>3588	Identifier	depth
>3589	AdditiveExpression	y - oy
>3590	Identifier	oy
>3591	Identifier	y
>3592	MultiplicativeExpression	( x - ox ) * depth / intrinsics . fx ( )
>3593	MultiplicativeExpression	depth / intrinsics . fx ( )
>3594	CallExpression	intrinsics . fx ( )
>3595	ArgumentList	 
>3596	Callee	intrinsics . fx
>3597	MemberAccess	intrinsics . fx
>3598	Identifier	fx
>3599	Identifier	intrinsics
>3600	Identifier	depth
>3601	AdditiveExpression	x - ox
>3602	Identifier	ox
>3603	Identifier	x
>3604	Identifier	p3d
>3605	IdentifierDeclType	Eigen 
>3606	IdentifierDeclStatement	 
>3607	IdentifierDecl	depth = * depth_ptr
>3608	AssignmentExpr	depth = * depth_ptr
>3609	UnaryOp	* depth_ptr
>3610	Identifier	depth_ptr
>3611	UnaryOperator	*
>3612	Identifier	depth
>3613	Identifier	depth
>3614	IdentifierDeclType	float
>3615	IfStatement	if ( ! std 
>3616	CompoundStatement	 
>3617	ContinueStatement	 
>3618	Condition	 
>3619	UnaryOp	! std 
>3620	CallExpression	std 
>3621	ArgumentList	* depth_ptr
>3622	Argument	* depth_ptr
>3623	UnaryOp	* depth_ptr
>3624	Identifier	depth_ptr
>3625	UnaryOperator	*
>3626	Callee	std 
>3627	Identifier	std 
>3628	UnaryOperator	!
>3629	Expression	 
>3630	UnaryExpression	++ depth_ptr
>3631	Identifier	depth_ptr
>3632	IncDec	++
>3633	UnaryExpression	++ x
>3634	Identifier	x
>3635	IncDec	++
>3636	Condition	 
>3637	RelationalExpression	x < width
>3638	Identifier	width
>3639	Identifier	x
>3640	ForInit	 
>3641	IdentifierDeclStatement	size_t x = 0 ;
>3642	IdentifierDecl	x = 0
>3643	AssignmentExpr	x = 0
>3644	PrimaryExpression	0
>3645	Identifier	x
>3646	Identifier	x
>3647	IdentifierDeclType	size_t
>3648	UnaryExpression	 
>3649	Identifier	y
>3650	IncDec	++
>3651	Condition	 
>3652	RelationalExpression	y < height
>3653	Identifier	height
>3654	Identifier	y
>3655	ForInit	 
>3656	IdentifierDeclStatement	size_t y = 0 ;
>3657	IdentifierDecl	y = 0
>3658	AssignmentExpr	y = 0
>3659	PrimaryExpression	0
>3660	Identifier	y
>3661	Identifier	y
>3662	IdentifierDeclType	size_t
>3663	IdentifierDeclStatement	 
>3664	IdentifierDecl	total = 0
>3665	AssignmentExpr	total = 0
>3666	PrimaryExpression	0
>3667	Identifier	total
>3668	Identifier	total
>3669	IdentifierDeclType	int
>3670	IdentifierDeclStatement	 
>3671	IdentifierDecl	outliers = 0
>3672	AssignmentExpr	outliers = 0
>3673	PrimaryExpression	0
>3674	Identifier	outliers
>3675	Identifier	outliers
>3676	IdentifierDeclType	int
>3677	ExpressionStatement	 
>3678	Statement	 
>3679	Statement	 
>3680	Statement	 
>3681	Statement	 
>3682	Statement	 
>3683	Statement	 
>3684	Statement	 
>3685	Statement	 
>3686	Statement	 
>3687	Statement	 
>3688	Statement	 
>3689	Statement	 
>3690	Statement	 
>3691	IdentifierDeclStatement	 
>3692	IdentifierDecl	oy = intrinsics . oy ( )
>3693	AssignmentExpr	oy = intrinsics . oy ( )
>3694	CallExpression	intrinsics . oy ( )
>3695	ArgumentList	 
>3696	Callee	intrinsics . oy
>3697	MemberAccess	intrinsics . oy
>3698	Identifier	oy
>3699	Identifier	intrinsics
>3700	Identifier	oy
>3701	Identifier	oy
>3702	IdentifierDeclType	float
>3703	IdentifierDeclStatement	 
>3704	IdentifierDecl	ox = intrinsics . ox ( )
>3705	AssignmentExpr	ox = intrinsics . ox ( )
>3706	CallExpression	intrinsics . ox ( )
>3707	ArgumentList	 
>3708	Callee	intrinsics . ox
>3709	MemberAccess	intrinsics . ox
>3710	Identifier	ox
>3711	Identifier	intrinsics
>3712	Identifier	ox
>3713	Identifier	ox
>3714	IdentifierDeclType	float
>3715	ExpressionStatement	 
>3716	CallExpression	warped_depth . setTo ( InvalidDepth )
>3717	ArgumentList	InvalidDepth
>3718	Argument	InvalidDepth
>3719	Identifier	InvalidDepth
>3720	Callee	warped_depth . setTo
>3721	MemberAccess	warped_depth . setTo
>3722	Identifier	setTo
>3723	Identifier	warped_depth
>3724	IdentifierDeclStatement	 
>3725	IdentifierDecl	warped_depth = cv 
>3726	AssignmentExpr	warped_depth = cv 
>3727	CallExpression	cv 
>3728	ArgumentList	depth . size ( )
>3729	Argument	depth . type ( )
>3730	CallExpression	depth . type ( )
>3731	ArgumentList	 
>3732	Callee	depth . type
>3733	MemberAccess	depth . type
>3734	Identifier	type
>3735	Identifier	depth
>3736	Argument	depth . size ( )
>3737	CallExpression	depth . size ( )
>3738	ArgumentList	 
>3739	Callee	depth . size
>3740	MemberAccess	depth . size
>3741	Identifier	size
>3742	Identifier	depth
>3743	Callee	cv 
>3744	Identifier	cv 
>3745	Identifier	warped_depth
>3746	Identifier	warped_depth
>3747	IdentifierDeclType	cv 
>3748	ExpressionStatement	 
>3749	AssignmentExpr	cloud = cv 
>3750	RelationalExpression	cv 
>3751	RelationalExpression	cv 
>3752	Expression	depth . size ( ) , cv 
>3753	CallExpression	cv 
>3754	ArgumentList	0
>3755	Argument	0
>3756	PrimaryExpression	0
>3757	Argument	0
>3758	PrimaryExpression	0
>3759	Argument	0
>3760	PrimaryExpression	0
>3761	Callee	cv 
>3762	Identifier	cv 
>3763	CallExpression	depth . size ( )
>3764	ArgumentList	 
>3765	Callee	depth . size
>3766	MemberAccess	depth . size
>3767	Identifier	size
>3768	Identifier	depth
>3769	Identifier	cv 
>3770	Identifier	cv 
>3771	Identifier	cloud
>3772	ExpressionStatement	 
>3773	Statement	 
>3774	Statement	 
>3775	Statement	 
>3776	Statement	 
>3777	Statement	 
>3778	Statement	 
>3779	Statement	 
>3780	Statement	 
>3781	Statement	 
>3782	Statement	 
>3783	Statement	 
>3784	Statement	 
>3785	Statement	 
>3827	FunctionDef	RgbdImage 
>3828	ParameterList	const AffineTransform & transformationx , const IntrinsicMatrix & intrinsics , RgbdImage & result , cv 
>3829	Parameter	 
>3830	Identifier	cloud
>3831	ParameterType	cv 
>3832	Parameter	 
>3833	Identifier	result
>3834	ParameterType	RgbdImage &
>3835	Parameter	 
>3836	Identifier	intrinsics
>3837	ParameterType	const IntrinsicMatrix &
>3838	Parameter	 
>3839	Identifier	transformationx
>3840	ParameterType	const AffineTransform &
>3841	ReturnType	void
>3842	CompoundStatement	 
>3843	ExpressionStatement	 
>3844	CallExpression	result . initialize ( )
>3845	ArgumentList	 
>3846	Callee	result . initialize
>3847	MemberAccess	result . initialize
>3848	Identifier	initialize
>3849	Identifier	result
>3850	ExpressionStatement	 
>3851	AssignmentExpr	result . depth = depth
>3852	Identifier	depth
>3853	MemberAccess	result . depth
>3854	Identifier	depth
>3855	Identifier	result
>3856	ExpressionStatement	 
>3857	AssignmentExpr	result . intensity = warped_image
>3858	Identifier	warped_image
>3859	MemberAccess	result . intensity
>3860	Identifier	intensity
>3861	Identifier	result
>3862	IfStatement	if ( identity )
>3863	ElseStatement	else
>3864	CompoundStatement	 
>3865	CompoundStatement	 
>3866	ExpressionStatement	 
>3867	AssignmentExpr	warped_image = intensity
>3868	Identifier	intensity
>3869	Identifier	warped_image
>3870	Condition	 
>3871	Identifier	identity
>3872	ForStatement	for ( size_t y = 0 ; y < height ; ++ y )
>3873	CompoundStatement	 
>3874	ForStatement	for ( size_t x = 0 ; x < width ; ++ x , ++ depth_ptr )
>3875	CompoundStatement	 
>3876	ExpressionStatement	 
>3877	AssignmentExpr	cloud ( y , x ) = cv 
>3878	CallExpression	cv 
>3879	ArgumentList	p3d ( 0 )
>3880	Argument	p3d ( 2 )
>3881	CallExpression	p3d ( 2 )
>3882	ArgumentList	2
>3883	Argument	2
>3884	PrimaryExpression	2
>3885	Callee	p3d
>3886	Identifier	p3d
>3887	Argument	p3d ( 1 )
>3888	CallExpression	p3d ( 1 )
>3889	ArgumentList	1
>3890	Argument	1
>3891	PrimaryExpression	1
>3892	Callee	p3d
>3893	Identifier	p3d
>3894	Argument	p3d ( 0 )
>3895	CallExpression	p3d ( 0 )
>3896	ArgumentList	0
>3897	Argument	0
>3898	PrimaryExpression	0
>3899	Callee	p3d
>3900	Identifier	p3d
>3901	Callee	cv 
>3902	Identifier	cv 
>3903	CallExpression	cloud ( y , x )
>3904	ArgumentList	y
>3905	Argument	x
>3906	Identifier	x
>3907	Argument	y
>3908	Identifier	y
>3909	Callee	cloud
>3910	Identifier	cloud
>3911	ExpressionStatement	 
>3912	IncDecOp	total ++
>3913	IncDec	++
>3914	Identifier	total
>3915	IfStatement	if ( ! identity )
>3916	CompoundStatement	 
>3917	ExpressionStatement	 
>3918	AssignmentExpr	p3d = p3d_transformed
>3919	Identifier	p3d_transformed
>3920	Identifier	p3d
>3921	IfStatement	if ( inImage ( x_projected , y_projected ) )
>3922	ElseStatement	else
>3923	CompoundStatement	 
>3924	ExpressionStatement	 
>3925	IncDecOp	outliers ++
>3926	IncDec	++
>3927	Identifier	outliers
>3928	CompoundStatement	 
>3929	ExpressionStatement	 
>3930	AssignmentExpr	warped_image . at < IntensityType > ( yp , xp ) = intensity . at < IntensityType > ( y , x )
>3931	RelationalExpression	intensity . at < IntensityType > ( y , x )
>3932	RelationalExpression	IntensityType > ( y , x )
>3933	Expression	y , x
>3934	Identifier	x
>3935	Identifier	y
>3936	Identifier	IntensityType
>3937	MemberAccess	intensity . at
>3938	Identifier	at
>3939	Identifier	intensity
>3940	RelationalExpression	warped_image . at < IntensityType > ( yp , xp )
>3941	RelationalExpression	IntensityType > ( yp , xp )
>3942	Expression	yp , xp
>3943	Identifier	xp
>3944	Identifier	yp
>3945	Identifier	IntensityType
>3946	MemberAccess	warped_image . at
>3947	Identifier	at
>3948	Identifier	warped_image
>3949	ExpressionStatement	 
>3950	AssignmentExpr	yp = ( int ) std 
>3951	CastExpression	( int ) std 
>3952	CallExpression	std 
>3953	ArgumentList	y_projected
>3954	Argument	y_projected
>3955	Identifier	y_projected
>3956	Callee	std 
>3957	Identifier	std 
>3958	CastTarget	int
>3959	Identifier	yp
>3960	ExpressionStatement	 
>3961	AssignmentExpr	xp = ( int ) std 
>3962	CastExpression	( int ) std 
>3963	CallExpression	std 
>3964	ArgumentList	x_projected
>3965	Argument	x_projected
>3966	Identifier	x_projected
>3967	Callee	std 
>3968	Identifier	std 
>3969	CastTarget	int
>3970	Identifier	xp
>3971	IdentifierDeclStatement	 
>3972	IdentifierDecl	yp
>3973	Identifier	yp
>3974	IdentifierDeclType	int
>3975	IdentifierDecl	xp
>3976	Identifier	xp
>3977	IdentifierDeclType	int
>3978	Condition	 
>3979	CallExpression	inImage ( x_projected , y_projected )
>3980	ArgumentList	x_projected
>3981	Argument	y_projected
>3982	Identifier	y_projected
>3983	Argument	x_projected
>3984	Identifier	x_projected
>3985	Callee	inImage
>3986	Identifier	inImage
>3987	IdentifierDeclStatement	 
>3988	IdentifierDecl	y_projected = ( float ) ( p3d_transformed ( 1 ) * intrinsics . fy ( ) / p3d_transformed ( 2 ) + oy )
>3989	AssignmentExpr	y_projected = ( float ) ( p3d_transformed ( 1 ) * intrinsics . fy ( ) / p3d_transformed ( 2 ) + oy )
>3990	CastExpression	( float ) ( p3d_transformed ( 1 ) * intrinsics . fy ( ) / p3d_transformed ( 2 ) + oy )
>3991	AdditiveExpression	p3d_transformed ( 1 ) * intrinsics . fy ( ) / p3d_transformed ( 2 ) + oy
>3992	Identifier	oy
>3993	MultiplicativeExpression	p3d_transformed ( 1 ) * intrinsics . fy ( ) / p3d_transformed ( 2 )
>3994	MultiplicativeExpression	intrinsics . fy ( ) / p3d_transformed ( 2 )
>3995	CallExpression	p3d_transformed ( 2 )
>3996	ArgumentList	2
>3997	Argument	2
>3998	PrimaryExpression	2
>3999	Callee	p3d_transformed
>4000	Identifier	p3d_transformed
>4001	CallExpression	intrinsics . fy ( )
>4002	ArgumentList	 
>4003	Callee	intrinsics . fy
>4004	MemberAccess	intrinsics . fy
>4005	Identifier	fy
>4006	Identifier	intrinsics
>4007	CallExpression	p3d_transformed ( 1 )
>4008	ArgumentList	1
>4009	Argument	1
>4010	PrimaryExpression	1
>4011	Callee	p3d_transformed
>4012	Identifier	p3d_transformed
>4013	CastTarget	float
>4014	Identifier	y_projected
>4015	Identifier	y_projected
>4016	IdentifierDeclType	float
>4017	IdentifierDeclStatement	 
>4018	IdentifierDecl	x_projected = ( float ) ( p3d_transformed ( 0 ) * intrinsics . fx ( ) / p3d_transformed ( 2 ) + ox )
>4019	AssignmentExpr	x_projected = ( float ) ( p3d_transformed ( 0 ) * intrinsics . fx ( ) / p3d_transformed ( 2 ) + ox )
>4020	CastExpression	( float ) ( p3d_transformed ( 0 ) * intrinsics . fx ( ) / p3d_transformed ( 2 ) + ox )
>4021	AdditiveExpression	p3d_transformed ( 0 ) * intrinsics . fx ( ) / p3d_transformed ( 2 ) + ox
>4022	Identifier	ox
>4023	MultiplicativeExpression	p3d_transformed ( 0 ) * intrinsics . fx ( ) / p3d_transformed ( 2 )
>4024	MultiplicativeExpression	intrinsics . fx ( ) / p3d_transformed ( 2 )
>4025	CallExpression	p3d_transformed ( 2 )
>4026	ArgumentList	2
>4027	Argument	2
>4028	PrimaryExpression	2
>4029	Callee	p3d_transformed
>4030	Identifier	p3d_transformed
>4031	CallExpression	intrinsics . fx ( )
>4032	ArgumentList	 
>4033	Callee	intrinsics . fx
>4034	MemberAccess	intrinsics . fx
>4035	Identifier	fx
>4036	Identifier	intrinsics
>4037	CallExpression	p3d_transformed ( 0 )
>4038	ArgumentList	0
>4039	Argument	0
>4040	PrimaryExpression	0
>4041	Callee	p3d_transformed
>4042	Identifier	p3d_transformed
>4043	CastTarget	float
>4044	Identifier	x_projected
>4045	Identifier	x_projected
>4046	IdentifierDeclType	float
>4047	IdentifierDeclStatement	 
>4048	IdentifierDecl	p3d_transformed = transformation * p3d
>4049	AssignmentExpr	p3d_transformed = transformation * p3d
>4050	MultiplicativeExpression	transformation * p3d
>4051	Identifier	p3d
>4052	Identifier	transformation
>4053	Identifier	p3d_transformed
>4054	Identifier	p3d_transformed
>4055	IdentifierDeclType	Eigen 
>4056	Condition	 
>4057	UnaryOp	! identity
>4058	Identifier	identity
>4059	UnaryOperator	!
>4060	IdentifierDeclStatement	 
>4061	IdentifierDecl	p3d ( ( x - ox ) * depth / intrinsics . fx ( ) , ( y - oy ) * depth / intrinsics . fy ( ) , depth )
>4062	Expression	( x - ox ) * depth / intrinsics . fx ( ) , ( y - oy ) * depth / intrinsics . fy ( ) , depth
>4063	Expression	( y - oy ) * depth / intrinsics . fy ( ) , depth
>4064	Identifier	depth
>4065	MultiplicativeExpression	( y - oy ) * depth / intrinsics . fy ( )
>4066	MultiplicativeExpression	depth / intrinsics . fy ( )
>4067	CallExpression	intrinsics . fy ( )
>4068	ArgumentList	 
>4069	Callee	intrinsics . fy
>4070	MemberAccess	intrinsics . fy
>4071	Identifier	fy
>4072	Identifier	intrinsics
>4073	Identifier	depth
>4074	AdditiveExpression	y - oy
>4075	Identifier	oy
>4076	Identifier	y
>4077	MultiplicativeExpression	( x - ox ) * depth / intrinsics . fx ( )
>4078	MultiplicativeExpression	depth / intrinsics . fx ( )
>4079	CallExpression	intrinsics . fx ( )
>4080	ArgumentList	 
>4081	Callee	intrinsics . fx
>4082	MemberAccess	intrinsics . fx
>4083	Identifier	fx
>4084	Identifier	intrinsics
>4085	Identifier	depth
>4086	AdditiveExpression	x - ox
>4087	Identifier	ox
>4088	Identifier	x
>4089	Identifier	p3d
>4090	IdentifierDeclType	Eigen 
>4091	IdentifierDeclStatement	 
>4092	IdentifierDecl	depth = * depth_ptr
>4093	AssignmentExpr	depth = * depth_ptr
>4094	UnaryOp	* depth_ptr
>4095	Identifier	depth_ptr
>4096	UnaryOperator	*
>4097	Identifier	depth
>4098	Identifier	depth
>4099	IdentifierDeclType	float
>4100	IfStatement	if ( * depth_ptr <= 1e-6f )
>4101	ContinueStatement	 
>4102	Condition	 
>4103	RelationalExpression	* depth_ptr <= 1e-6f
>4104	PrimaryExpression	1e-6f
>4105	UnaryOp	* depth_ptr
>4106	Identifier	depth_ptr
>4107	UnaryOperator	*
>4108	Expression	 
>4109	UnaryExpression	++ depth_ptr
>4110	Identifier	depth_ptr
>4111	IncDec	++
>4112	UnaryExpression	++ x
>4113	Identifier	x
>4114	IncDec	++
>4115	Condition	 
>4116	RelationalExpression	x < width
>4117	Identifier	width
>4118	Identifier	x
>4119	ForInit	 
>4120	IdentifierDeclStatement	size_t x = 0 ;
>4121	IdentifierDecl	x = 0
>4122	AssignmentExpr	x = 0
>4123	PrimaryExpression	0
>4124	Identifier	x
>4125	Identifier	x
>4126	IdentifierDeclType	size_t
>4127	UnaryExpression	 
>4128	Identifier	y
>4129	IncDec	++
>4130	Condition	 
>4131	RelationalExpression	y < height
>4132	Identifier	height
>4133	Identifier	y
>4134	ForInit	 
>4135	IdentifierDeclStatement	size_t y = 0 ;
>4136	IdentifierDecl	y = 0
>4137	AssignmentExpr	y = 0
>4138	PrimaryExpression	0
>4139	Identifier	y
>4140	Identifier	y
>4141	IdentifierDeclType	size_t
>4142	IdentifierDeclStatement	 
>4143	IdentifierDecl	total = 0
>4144	AssignmentExpr	total = 0
>4145	PrimaryExpression	0
>4146	Identifier	total
>4147	Identifier	total
>4148	IdentifierDeclType	int
>4149	IdentifierDeclStatement	 
>4150	IdentifierDecl	outliers = 0
>4151	AssignmentExpr	outliers = 0
>4152	PrimaryExpression	0
>4153	Identifier	outliers
>4154	Identifier	outliers
>4155	IdentifierDeclType	int
>4156	ExpressionStatement	 
>4157	Statement	 
>4158	Statement	 
>4159	Statement	 
>4160	Statement	 
>4161	Statement	 
>4162	Statement	 
>4163	Statement	 
>4164	Statement	 
>4165	Statement	 
>4166	Statement	 
>4167	Statement	 
>4168	Statement	 
>4169	Statement	 
>4170	IdentifierDeclStatement	 
>4171	IdentifierDecl	oy = intrinsics . oy ( )
>4172	AssignmentExpr	oy = intrinsics . oy ( )
>4173	CallExpression	intrinsics . oy ( )
>4174	ArgumentList	 
>4175	Callee	intrinsics . oy
>4176	MemberAccess	intrinsics . oy
>4177	Identifier	oy
>4178	Identifier	intrinsics
>4179	Identifier	oy
>4180	Identifier	oy
>4181	IdentifierDeclType	float
>4182	IdentifierDeclStatement	 
>4183	IdentifierDecl	ox = intrinsics . ox ( )
>4184	AssignmentExpr	ox = intrinsics . ox ( )
>4185	CallExpression	intrinsics . ox ( )
>4186	ArgumentList	 
>4187	Callee	intrinsics . ox
>4188	MemberAccess	intrinsics . ox
>4189	Identifier	ox
>4190	Identifier	intrinsics
>4191	Identifier	ox
>4192	Identifier	ox
>4193	IdentifierDeclType	float
>4194	IdentifierDeclStatement	 
>4195	IdentifierDecl	warped_image = cv 
>4196	AssignmentExpr	warped_image = cv 
>4197	CallExpression	cv 
>4198	ArgumentList	intensity . size ( )
>4199	Argument	intensity . type ( )
>4200	CallExpression	intensity . type ( )
>4201	ArgumentList	 
>4202	Callee	intensity . type
>4203	MemberAccess	intensity . type
>4204	Identifier	type
>4205	Identifier	intensity
>4206	Argument	intensity . size ( )
>4207	CallExpression	intensity . size ( )
>4208	ArgumentList	 
>4209	Callee	intensity . size
>4210	MemberAccess	intensity . size
>4211	Identifier	size
>4212	Identifier	intensity
>4213	Callee	cv 
>4214	Identifier	cv 
>4215	Identifier	warped_image
>4216	Identifier	warped_image
>4217	IdentifierDeclType	cv 
>4218	ExpressionStatement	 
>4219	AssignmentExpr	cloud = cv 
>4220	RelationalExpression	cv 
>4221	RelationalExpression	cv 
>4222	Expression	intensity . size ( ) , cv 
>4223	CallExpression	cv 
>4224	ArgumentList	0
>4225	Argument	0
>4226	PrimaryExpression	0
>4227	Argument	0
>4228	PrimaryExpression	0
>4229	Argument	0
>4230	PrimaryExpression	0
>4231	Callee	cv 
>4232	Identifier	cv 
>4233	CallExpression	intensity . size ( )
>4234	ArgumentList	 
>4235	Callee	intensity . size
>4236	MemberAccess	intensity . size
>4237	Identifier	size
>4238	Identifier	intensity
>4239	Identifier	cv 
>4240	Identifier	cv 
>4241	Identifier	cloud
>4242	IdentifierDeclStatement	 
>4243	IdentifierDecl	identity = transformation . affine ( ) . isIdentity ( 1e-6 )
>4244	AssignmentExpr	identity = transformation . affine ( ) . isIdentity ( 1e-6 )
>4245	CallExpression	transformation . affine ( ) . isIdentity ( 1e-6 )
>4246	ArgumentList	1e-6
>4247	Argument	1e-6
>4248	PrimaryExpression	1e-6
>4249	Callee	transformation . affine ( ) . isIdentity
>4250	MemberAccess	transformation . affine ( ) . isIdentity
>4251	Identifier	isIdentity
>4252	CallExpression	transformation . affine ( )
>4253	ArgumentList	 
>4254	Callee	transformation . affine
>4255	MemberAccess	transformation . affine
>4256	Identifier	affine
>4257	Identifier	transformation
>4258	Identifier	identity
>4259	Identifier	identity
>4260	IdentifierDeclType	bool
>4261	ExpressionStatement	 
>4262	Statement	 
>4263	Statement	 
>4264	Statement	 
>4265	Statement	 
>4266	Statement	 
>4267	Statement	 
>4268	Statement	 
>4269	Statement	 
>4270	Statement	 
>4271	Statement	 
>4272	Statement	 
>4273	Statement	 
>4274	Statement	 
>4321	FunctionDef	RgbdImage 
>4322	ParameterList	const AffineTransform & transformation , const IntrinsicMatrix & intrinsics , RgbdImage & result
>4323	Parameter	 
>4324	Identifier	result
>4325	ParameterType	RgbdImage &
>4326	Parameter	 
>4327	Identifier	intrinsics
>4328	ParameterType	const IntrinsicMatrix &
>4329	Parameter	 
>4330	Identifier	transformation
>4331	ParameterType	const AffineTransform &
>4332	ReturnType	void
>4333	CompoundStatement	 
>4334	ExpressionStatement	 
>4335	CallExpression	result . initialize ( )
>4336	ArgumentList	 
>4337	Callee	result . initialize
>4338	MemberAccess	result . initialize
>4339	Identifier	initialize
>4340	Identifier	result
>4341	ExpressionStatement	 
>4342	AssignmentExpr	result . depth = warped_depth
>4343	Identifier	warped_depth
>4344	MemberAccess	result . depth
>4345	Identifier	depth
>4346	Identifier	result
>4347	ForStatement	for ( int idx = 0 ; idx < height * width ; ++ idx )
>4348	CompoundStatement	 
>4349	ForStatement	for ( int y = y_begin ; y < y_end ; ++ y )
>4350	CompoundStatement	 
>4351	ForStatement	for ( int x = x_begin ; x < x_end ; ++ x , ++ v )
>4352	CompoundStatement	 
>4353	IfStatement	if ( ! std 
>4354	CompoundStatement	 
>4355	ExpressionStatement	 
>4356	AssignmentExpr	( * v ) = ( DepthType ) z_transformed
>4357	CastExpression	( DepthType ) z_transformed
>4358	Identifier	z_transformed
>4359	CastTarget	DepthType
>4360	UnaryOp	* v
>4361	Identifier	v
>4362	UnaryOperator	*
>4363	Condition	 
>4364	OrExpression	! std 
>4365	RelationalExpression	( * v ) > z_transformed
>4366	Identifier	z_transformed
>4367	UnaryOp	* v
>4368	Identifier	v
>4369	UnaryOperator	*
>4370	UnaryOp	! std 
>4371	CallExpression	std 
>4372	ArgumentList	* v
>4373	Argument	* v
>4374	UnaryOp	* v
>4375	Identifier	v
>4376	UnaryOperator	*
>4377	Callee	std 
>4378	Identifier	std 
>4379	UnaryOperator	!
>4380	Expression	 
>4381	UnaryExpression	++ v
>4382	Identifier	v
>4383	IncDec	++
>4384	UnaryExpression	++ x
>4385	Identifier	x
>4386	IncDec	++
>4387	Condition	 
>4388	RelationalExpression	x < x_end
>4389	Identifier	x_end
>4390	Identifier	x
>4391	ForInit	 
>4392	IdentifierDeclStatement	int x = x_begin ;
>4393	IdentifierDecl	x = x_begin
>4394	AssignmentExpr	x = x_begin
>4395	Identifier	x_begin
>4396	Identifier	x_begin
>4397	Identifier	x
>4398	IdentifierDeclType	int
>4399	IdentifierDeclStatement	 
>4400	IdentifierDecl	* v = warped_depth . ptr < DepthType > ( y , x_begin )
>4401	AssignmentExpr	* v = warped_depth . ptr < DepthType > ( y , x_begin )
>4402	RelationalExpression	warped_depth . ptr < DepthType > ( y , x_begin )
>4403	RelationalExpression	DepthType > ( y , x_begin )
>4404	Expression	y , x_begin
>4405	Identifier	x_begin
>4406	Identifier	y
>4407	Identifier	DepthType
>4408	MemberAccess	warped_depth . ptr
>4409	Identifier	ptr
>4410	Identifier	warped_depth
>4411	Identifier	v
>4412	Identifier	v
>4413	IdentifierDeclType	DepthType *
>4414	UnaryExpression	 
>4415	Identifier	y
>4416	IncDec	++
>4417	Condition	 
>4418	RelationalExpression	y < y_end
>4419	Identifier	y_end
>4420	Identifier	y
>4421	ForInit	 
>4422	IdentifierDeclStatement	int y = y_begin ;
>4423	IdentifierDecl	y = y_begin
>4424	AssignmentExpr	y = y_begin
>4425	Identifier	y_begin
>4426	Identifier	y_begin
>4427	Identifier	y
>4428	IdentifierDeclType	int
>4429	IdentifierDeclStatement	 
>4430	IdentifierDecl	y_end = std 
>4431	AssignmentExpr	y_end = std 
>4432	CallExpression	std 
>4433	ArgumentList	y_projected + y_length
>4434	Argument	( int ) height
>4435	CastExpression	( int ) height
>4436	Identifier	height
>4437	CastTarget	int
>4438	Argument	y_projected + y_length
>4439	AdditiveExpression	y_projected + y_length
>4440	Identifier	y_length
>4441	Identifier	y_projected
>4442	Callee	std 
>4443	Identifier	std 
>4444	Identifier	y_end
>4445	Identifier	y_end
>4446	IdentifierDeclType	int
>4447	IdentifierDeclStatement	 
>4448	IdentifierDecl	x_end = std 
>4449	AssignmentExpr	x_end = std 
>4450	CallExpression	std 
>4451	ArgumentList	x_projected + x_length
>4452	Argument	( int ) width
>4453	CastExpression	( int ) width
>4454	Identifier	width
>4455	CastTarget	int
>4456	Argument	x_projected + x_length
>4457	AdditiveExpression	x_projected + x_length
>4458	Identifier	x_length
>4459	Identifier	x_projected
>4460	Callee	std 
>4461	Identifier	std 
>4462	Identifier	x_end
>4463	Identifier	x_end
>4464	IdentifierDeclType	int
>4465	IdentifierDeclStatement	 
>4466	IdentifierDecl	y_begin = std 
>4467	AssignmentExpr	y_begin = std 
>4468	CallExpression	std 
>4469	ArgumentList	y_projected
>4470	Argument	0
>4471	PrimaryExpression	0
>4472	Argument	y_projected
>4473	Identifier	y_projected
>4474	Callee	std 
>4475	Identifier	std 
>4476	Identifier	y_begin
>4477	Identifier	y_begin
>4478	IdentifierDeclType	int
>4479	IdentifierDeclStatement	 
>4480	IdentifierDecl	x_begin = std 
>4481	AssignmentExpr	x_begin = std 
>4482	CallExpression	std 
>4483	ArgumentList	x_projected
>4484	Argument	0
>4485	PrimaryExpression	0
>4486	Argument	x_projected
>4487	Identifier	x_projected
>4488	Callee	std 
>4489	Identifier	std 
>4490	Identifier	x_begin
>4491	Identifier	x_begin
>4492	IdentifierDeclType	int
>4493	IdentifierDeclStatement	 
>4494	IdentifierDecl	y_projected = ( int ) std 
>4495	AssignmentExpr	y_projected = ( int ) std 
>4496	CastExpression	( int ) std 
>4497	CallExpression	std 
>4498	ArgumentList	p3d_transformed ( 1 ) * intrinsics . fy ( ) / z_transformed + intrinsics . oy ( )
>4499	Argument	p3d_transformed ( 1 ) * intrinsics . fy ( ) / z_transformed + intrinsics . oy ( )
>4500	AdditiveExpression	p3d_transformed ( 1 ) * intrinsics . fy ( ) / z_transformed + intrinsics . oy ( )
>4501	CallExpression	intrinsics . oy ( )
>4502	ArgumentList	 
>4503	Callee	intrinsics . oy
>4504	MemberAccess	intrinsics . oy
>4505	Identifier	oy
>4506	Identifier	intrinsics
>4507	MultiplicativeExpression	p3d_transformed ( 1 ) * intrinsics . fy ( ) / z_transformed
>4508	MultiplicativeExpression	intrinsics . fy ( ) / z_transformed
>4509	Identifier	z_transformed
>4510	CallExpression	intrinsics . fy ( )
>4511	ArgumentList	 
>4512	Callee	intrinsics . fy
>4513	MemberAccess	intrinsics . fy
>4514	Identifier	fy
>4515	Identifier	intrinsics
>4516	CallExpression	p3d_transformed ( 1 )
>4517	ArgumentList	1
>4518	Argument	1
>4519	PrimaryExpression	1
>4520	Callee	p3d_transformed
>4521	Identifier	p3d_transformed
>4522	Callee	std 
>4523	Identifier	std 
>4524	CastTarget	int
>4525	Identifier	y_projected
>4526	Identifier	y_projected
>4527	IdentifierDeclType	int
>4528	IdentifierDeclStatement	 
>4529	IdentifierDecl	x_projected = ( int ) std 
>4530	AssignmentExpr	x_projected = ( int ) std 
>4531	CastExpression	( int ) std 
>4532	CallExpression	std 
>4533	ArgumentList	p3d_transformed ( 0 ) * intrinsics . fx ( ) / z_transformed + intrinsics . ox ( )
>4534	Argument	p3d_transformed ( 0 ) * intrinsics . fx ( ) / z_transformed + intrinsics . ox ( )
>4535	AdditiveExpression	p3d_transformed ( 0 ) * intrinsics . fx ( ) / z_transformed + intrinsics . ox ( )
>4536	CallExpression	intrinsics . ox ( )
>4537	ArgumentList	 
>4538	Callee	intrinsics . ox
>4539	MemberAccess	intrinsics . ox
>4540	Identifier	ox
>4541	Identifier	intrinsics
>4542	MultiplicativeExpression	p3d_transformed ( 0 ) * intrinsics . fx ( ) / z_transformed
>4543	MultiplicativeExpression	intrinsics . fx ( ) / z_transformed
>4544	Identifier	z_transformed
>4545	CallExpression	intrinsics . fx ( )
>4546	ArgumentList	 
>4547	Callee	intrinsics . fx
>4548	MemberAccess	intrinsics . fx
>4549	Identifier	fx
>4550	Identifier	intrinsics
>4551	CallExpression	p3d_transformed ( 0 )
>4552	ArgumentList	0
>4553	Argument	0
>4554	PrimaryExpression	0
>4555	Callee	p3d_transformed
>4556	Identifier	p3d_transformed
>4557	Callee	std 
>4558	Identifier	std 
>4559	CastTarget	int
>4560	Identifier	x_projected
>4561	Identifier	x_projected
>4562	IdentifierDeclType	int
>4563	IdentifierDeclStatement	 
>4564	IdentifierDecl	z_transformed = p3d_transformed ( 2 )
>4565	AssignmentExpr	z_transformed = p3d_transformed ( 2 )
>4566	CallExpression	p3d_transformed ( 2 )
>4567	ArgumentList	2
>4568	Argument	2
>4569	PrimaryExpression	2
>4570	Callee	p3d_transformed
>4571	Identifier	p3d_transformed
>4572	Identifier	z_transformed
>4573	Identifier	z_transformed
>4574	IdentifierDeclType	NumType
>4575	IdentifierDeclStatement	 
>4576	IdentifierDecl	p3d_transformed = transformed_pointcloud . col ( idx )
>4577	AssignmentExpr	p3d_transformed = transformed_pointcloud . col ( idx )
>4578	CallExpression	transformed_pointcloud . col ( idx )
>4579	ArgumentList	idx
>4580	Argument	idx
>4581	Identifier	idx
>4582	Callee	transformed_pointcloud . col
>4583	MemberAccess	transformed_pointcloud . col
>4584	Identifier	col
>4585	Identifier	transformed_pointcloud
>4586	Identifier	p3d_transformed
>4587	Identifier	p3d_transformed
>4588	IdentifierDeclType	Vector4
>4589	IdentifierDeclStatement	 
>4590	IdentifierDecl	y_length = ( int ) std 
>4591	AssignmentExpr	y_length = ( int ) std 
>4592	AdditiveExpression	( int ) std 
>4593	PrimaryExpression	1
>4594	CastExpression	( int ) std 
>4595	CallExpression	std 
>4596	ArgumentList	z_factor2 + y_factor2 * p3d ( 1 ) / z
>4597	Argument	z_factor2 + y_factor2 * p3d ( 1 ) / z
>4598	AdditiveExpression	z_factor2 + y_factor2 * p3d ( 1 ) / z
>4599	MultiplicativeExpression	y_factor2 * p3d ( 1 ) / z
>4600	MultiplicativeExpression	p3d ( 1 ) / z
>4601	Identifier	z
>4602	CallExpression	p3d ( 1 )
>4603	ArgumentList	1
>4604	Argument	1
>4605	PrimaryExpression	1
>4606	Callee	p3d
>4607	Identifier	p3d
>4608	Identifier	y_factor2
>4609	Identifier	z_factor2
>4610	Callee	std 
>4611	Identifier	std 
>4612	CastTarget	int
>4613	Identifier	y_length
>4614	Identifier	y_length
>4615	IdentifierDeclType	int
>4616	IdentifierDeclStatement	 
>4617	IdentifierDecl	x_length = ( int ) std 
>4618	AssignmentExpr	x_length = ( int ) std 
>4619	AdditiveExpression	( int ) std 
>4620	PrimaryExpression	1
>4621	CastExpression	( int ) std 
>4622	CallExpression	std 
>4623	ArgumentList	z_factor1 + x_factor1 * p3d ( 0 ) / z
>4624	Argument	z_factor1 + x_factor1 * p3d ( 0 ) / z
>4625	AdditiveExpression	z_factor1 + x_factor1 * p3d ( 0 ) / z
>4626	MultiplicativeExpression	x_factor1 * p3d ( 0 ) / z
>4627	MultiplicativeExpression	p3d ( 0 ) / z
>4628	Identifier	z
>4629	CallExpression	p3d ( 0 )
>4630	ArgumentList	0
>4631	Argument	0
>4632	PrimaryExpression	0
>4633	Callee	p3d
>4634	Identifier	p3d
>4635	Identifier	x_factor1
>4636	Identifier	z_factor1
>4637	Callee	std 
>4638	Identifier	std 
>4639	CastTarget	int
>4640	Identifier	x_length
>4641	Identifier	x_length
>4642	IdentifierDeclType	int
>4643	IfStatement	if ( ! std 
>4644	ContinueStatement	 
>4645	Condition	 
>4646	UnaryOp	! std 
>4647	CallExpression	std 
>4648	ArgumentList	z
>4649	Argument	z
>4650	Identifier	z
>4651	Callee	std 
>4652	Identifier	std 
>4653	UnaryOperator	!
>4654	IdentifierDeclStatement	 
>4655	IdentifierDecl	z = p3d ( 2 )
>4656	AssignmentExpr	z = p3d ( 2 )
>4657	CallExpression	p3d ( 2 )
>4658	ArgumentList	2
>4659	Argument	2
>4660	PrimaryExpression	2
>4661	Callee	p3d
>4662	Identifier	p3d
>4663	Identifier	z
>4664	Identifier	z
>4665	IdentifierDeclType	NumType
>4666	IdentifierDeclStatement	 
>4667	IdentifierDecl	p3d = pointcloud . col ( idx )
>4668	AssignmentExpr	p3d = pointcloud . col ( idx )
>4669	CallExpression	pointcloud . col ( idx )
>4670	ArgumentList	idx
>4671	Argument	idx
>4672	Identifier	idx
>4673	Callee	pointcloud . col
>4674	MemberAccess	pointcloud . col
>4675	Identifier	col
>4676	Identifier	pointcloud
>4677	Identifier	p3d
>4678	Identifier	p3d
>4679	IdentifierDeclType	Vector4
>4680	UnaryExpression	 
>4681	Identifier	idx
>4682	IncDec	++
>4683	Condition	 
>4684	RelationalExpression	idx < height * width
>4685	MultiplicativeExpression	height * width
>4686	Identifier	width
>4687	Identifier	height
>4688	Identifier	idx
>4689	ForInit	 
>4690	IdentifierDeclStatement	int idx = 0 ;
>4691	IdentifierDecl	idx = 0
>4692	AssignmentExpr	idx = 0
>4693	PrimaryExpression	0
>4694	Identifier	idx
>4695	Identifier	idx
>4696	IdentifierDeclType	int
>4697	IdentifierDeclStatement	 
>4698	IdentifierDecl	y_factor2 = - transformation . rotation ( ) ( 2 , 1 ) - transformation . rotation ( ) ( 2 , 0 ) * ( intrinsics . \
>4699	AssignmentExpr	y_factor2 = - transformation . rotation ( ) ( 2 , 1 ) - transformation . rotation ( ) ( 2 , 0 ) * ( intrinsics \
>4700	AdditiveExpression	- transformation . rotation ( ) ( 2 , 1 ) - transformation . rotation ( ) ( 2 , 0 ) * ( intrinsics . \
>4701	MultiplicativeExpression	transformation . rotation ( ) ( 2 , 0 ) * ( intrinsics . fy ( ) / intrinsics . fx ( ) )
>4702	MultiplicativeExpression	intrinsics . fy ( ) / intrinsics . fx ( )
>4703	CallExpression	intrinsics . fx ( )
>4704	ArgumentList	 
>4705	Callee	intrinsics . fx
>4706	MemberAccess	intrinsics . fx
>4707	Identifier	fx
>4708	Identifier	intrinsics
>4709	CallExpression	intrinsics . fy ( )
>4710	ArgumentList	 
>4711	Callee	intrinsics . fy
>4712	MemberAccess	intrinsics . fy
>4713	Identifier	fy
>4714	Identifier	intrinsics
>4715	CallExpression	transformation . rotation ( ) ( 2 , 0 )
>4716	ArgumentList	2
>4717	Argument	0
>4718	PrimaryExpression	0
>4719	Argument	2
>4720	PrimaryExpression	2
>4721	Callee	transformation . rotation ( )
>4722	CallExpression	transformation . rotation ( )
>4723	ArgumentList	 
>4724	Callee	transformation . rotation
>4725	MemberAccess	transformation . rotation
>4726	Identifier	rotation
>4727	Identifier	transformation
>4728	UnaryOp	- transformation . rotation ( ) ( 2 , 1 )
>4729	CallExpression	transformation . rotation ( ) ( 2 , 1 )
>4730	ArgumentList	2
>4731	Argument	1
>4732	PrimaryExpression	1
>4733	Argument	2
>4734	PrimaryExpression	2
>4735	Callee	transformation . rotation ( )
>4736	CallExpression	transformation . rotation ( )
>4737	ArgumentList	 
>4738	Callee	transformation . rotation
>4739	MemberAccess	transformation . rotation
>4740	Identifier	rotation
>4741	Identifier	transformation
>4742	UnaryOperator	-
>4743	Identifier	y_factor2
>4744	Identifier	y_factor2
>4745	IdentifierDeclType	float
>4746	IdentifierDeclStatement	 
>4747	IdentifierDecl	z_factor2 = transformation . rotation ( ) ( 1 , 1 ) + transformation . rotation ( ) ( 1 , 0 ) * ( intrinsics . fy ( ) / \
>4748	AssignmentExpr	z_factor2 = transformation . rotation ( ) ( 1 , 1 ) + transformation . rotation ( ) ( 1 , 0 ) * ( intrinsics \
>4749	AdditiveExpression	transformation . rotation ( ) ( 1 , 1 ) + transformation . rotation ( ) ( 1 , 0 ) * ( intrinsics . fy ( ) / \
>4750	MultiplicativeExpression	transformation . rotation ( ) ( 1 , 0 ) * ( intrinsics . fy ( ) / intrinsics . fx ( ) )
>4751	MultiplicativeExpression	intrinsics . fy ( ) / intrinsics . fx ( )
>4752	CallExpression	intrinsics . fx ( )
>4753	ArgumentList	 
>4754	Callee	intrinsics . fx
>4755	MemberAccess	intrinsics . fx
>4756	Identifier	fx
>4757	Identifier	intrinsics
>4758	CallExpression	intrinsics . fy ( )
>4759	ArgumentList	 
>4760	Callee	intrinsics . fy
>4761	MemberAccess	intrinsics . fy
>4762	Identifier	fy
>4763	Identifier	intrinsics
>4764	CallExpression	transformation . rotation ( ) ( 1 , 0 )
>4765	ArgumentList	1
>4766	Argument	0
>4767	PrimaryExpression	0
>4768	Argument	1
>4769	PrimaryExpression	1
>4770	Callee	transformation . rotation ( )
>4771	CallExpression	transformation . rotation ( )
>4772	ArgumentList	 
>4773	Callee	transformation . rotation
>4774	MemberAccess	transformation . rotation
>4775	Identifier	rotation
>4776	Identifier	transformation
>4777	CallExpression	transformation . rotation ( ) ( 1 , 1 )
>4778	ArgumentList	1
>4779	Argument	1
>4780	PrimaryExpression	1
>4781	Argument	1
>4782	PrimaryExpression	1
>4783	Callee	transformation . rotation ( )
>4784	CallExpression	transformation . rotation ( )
>4785	ArgumentList	 
>4786	Callee	transformation . rotation
>4787	MemberAccess	transformation . rotation
>4788	Identifier	rotation
>4789	Identifier	transformation
>4790	Identifier	z_factor2
>4791	Identifier	z_factor2
>4792	IdentifierDeclType	float
>4793	IdentifierDeclStatement	 
>4794	IdentifierDecl	x_factor1 = - transformation . rotation ( ) ( 2 , 0 ) - transformation . rotation ( ) ( 2 , 1 ) * ( intrinsics . \
>4795	AssignmentExpr	x_factor1 = - transformation . rotation ( ) ( 2 , 0 ) - transformation . rotation ( ) ( 2 , 1 ) * ( intrinsics \
>4796	AdditiveExpression	- transformation . rotation ( ) ( 2 , 0 ) - transformation . rotation ( ) ( 2 , 1 ) * ( intrinsics . \
>4797	MultiplicativeExpression	transformation . rotation ( ) ( 2 , 1 ) * ( intrinsics . fx ( ) / intrinsics . fy ( ) )
>4798	MultiplicativeExpression	intrinsics . fx ( ) / intrinsics . fy ( )
>4799	CallExpression	intrinsics . fy ( )
>4800	ArgumentList	 
>4801	Callee	intrinsics . fy
>4802	MemberAccess	intrinsics . fy
>4803	Identifier	fy
>4804	Identifier	intrinsics
>4805	CallExpression	intrinsics . fx ( )
>4806	ArgumentList	 
>4807	Callee	intrinsics . fx
>4808	MemberAccess	intrinsics . fx
>4809	Identifier	fx
>4810	Identifier	intrinsics
>4811	CallExpression	transformation . rotation ( ) ( 2 , 1 )
>4812	ArgumentList	2
>4813	Argument	1
>4814	PrimaryExpression	1
>4815	Argument	2
>4816	PrimaryExpression	2
>4817	Callee	transformation . rotation ( )
>4818	CallExpression	transformation . rotation ( )
>4819	ArgumentList	 
>4820	Callee	transformation . rotation
>4821	MemberAccess	transformation . rotation
>4822	Identifier	rotation
>4823	Identifier	transformation
>4824	UnaryOp	- transformation . rotation ( ) ( 2 , 0 )
>4825	CallExpression	transformation . rotation ( ) ( 2 , 0 )
>4826	ArgumentList	2
>4827	Argument	0
>4828	PrimaryExpression	0
>4829	Argument	2
>4830	PrimaryExpression	2
>4831	Callee	transformation . rotation ( )
>4832	CallExpression	transformation . rotation ( )
>4833	ArgumentList	 
>4834	Callee	transformation . rotation
>4835	MemberAccess	transformation . rotation
>4836	Identifier	rotation
>4837	Identifier	transformation
>4838	UnaryOperator	-
>4839	Identifier	x_factor1
>4840	Identifier	x_factor1
>4841	IdentifierDeclType	float
>4842	IdentifierDeclStatement	 
>4843	IdentifierDecl	z_factor1 = transformation . rotation ( ) ( 0 , 0 ) + transformation . rotation ( ) ( 0 , 1 ) * ( intrinsics . fx ( ) / \
>4844	AssignmentExpr	z_factor1 = transformation . rotation ( ) ( 0 , 0 ) + transformation . rotation ( ) ( 0 , 1 ) * ( intrinsics \
>4845	AdditiveExpression	transformation . rotation ( ) ( 0 , 0 ) + transformation . rotation ( ) ( 0 , 1 ) * ( intrinsics . fx ( ) / \
>4846	MultiplicativeExpression	transformation . rotation ( ) ( 0 , 1 ) * ( intrinsics . fx ( ) / intrinsics . fy ( ) )
>4847	MultiplicativeExpression	intrinsics . fx ( ) / intrinsics . fy ( )
>4848	CallExpression	intrinsics . fy ( )
>4849	ArgumentList	 
>4850	Callee	intrinsics . fy
>4851	MemberAccess	intrinsics . fy
>4852	Identifier	fy
>4853	Identifier	intrinsics
>4854	CallExpression	intrinsics . fx ( )
>4855	ArgumentList	 
>4856	Callee	intrinsics . fx
>4857	MemberAccess	intrinsics . fx
>4858	Identifier	fx
>4859	Identifier	intrinsics
>4860	CallExpression	transformation . rotation ( ) ( 0 , 1 )
>4861	ArgumentList	0
>4862	Argument	1
>4863	PrimaryExpression	1
>4864	Argument	0
>4865	PrimaryExpression	0
>4866	Callee	transformation . rotation ( )
>4867	CallExpression	transformation . rotation ( )
>4868	ArgumentList	 
>4869	Callee	transformation . rotation
>4870	MemberAccess	transformation . rotation
>4871	Identifier	rotation
>4872	Identifier	transformation
>4873	CallExpression	transformation . rotation ( ) ( 0 , 0 )
>4874	ArgumentList	0
>4875	Argument	0
>4876	PrimaryExpression	0
>4877	Argument	0
>4878	PrimaryExpression	0
>4879	Callee	transformation . rotation ( )
>4880	CallExpression	transformation . rotation ( )
>4881	ArgumentList	 
>4882	Callee	transformation . rotation
>4883	MemberAccess	transformation . rotation
>4884	Identifier	rotation
>4885	Identifier	transformation
>4886	Identifier	z_factor1
>4887	Identifier	z_factor1
>4888	IdentifierDeclType	float
>4889	ExpressionStatement	 
>4890	CallExpression	warped_depth . setTo ( InvalidDepth )
>4891	ArgumentList	InvalidDepth
>4892	Argument	InvalidDepth
>4893	Identifier	InvalidDepth
>4894	Callee	warped_depth . setTo
>4895	MemberAccess	warped_depth . setTo
>4896	Identifier	setTo
>4897	Identifier	warped_depth
>4898	IdentifierDeclStatement	 
>4899	IdentifierDecl	warped_depth ( depth . size ( ) , depth . type ( ) )
>4900	Expression	depth . size ( ) , depth . type ( )
>4901	CallExpression	depth . type ( )
>4902	ArgumentList	 
>4903	Callee	depth . type
>4904	MemberAccess	depth . type
>4905	Identifier	type
>4906	Identifier	depth
>4907	CallExpression	depth . size ( )
>4908	ArgumentList	 
>4909	Callee	depth . size
>4910	MemberAccess	depth . size
>4911	Identifier	size
>4912	Identifier	depth
>4913	Identifier	warped_depth
>4914	IdentifierDeclType	cv 
>4915	ExpressionStatement	 
>4916	UnaryOp	* pointcloud
>4917	Identifier	pointcloud
>4918	UnaryOperator	*
>4919	Statement	 
>4920	Statement	 
>4921	Statement	 
>4922	Statement	 
>4923	Statement	 
>4924	Statement	 
>4925	Statement	 
>4926	Statement	 
>4927	Statement	 
>4928	Statement	 
>4929	Statement	 
>4930	ExpressionStatement	 
>4931	CallExpression	this -> buildPointCloud ( )
>4932	ArgumentList	 
>4933	Callee	this -> buildPointCloud
>4934	PtrMemberAccess	this -> buildPointCloud
>4935	Identifier	buildPointCloud
>4936	Identifier	this
>4937	ExpressionStatement	 
>4938	CallExpression	assert ( hasDepth ( ) )
>4939	ArgumentList	hasDepth ( )
>4940	Argument	hasDepth ( )
>4941	CallExpression	hasDepth ( )
>4942	ArgumentList	 
>4943	Callee	hasDepth
>4944	Identifier	hasDepth
>4945	Callee	assert
>4946	Identifier	assert
>4998	FunctionDef	RgbdImage 
>4999	ParameterList	const float & x , const float & y
>5000	Parameter	 
>5001	Identifier	y
>5002	ParameterType	const float &
>5003	Parameter	 
>5004	Identifier	x
>5005	ParameterType	const float &
>5006	ReturnType	bool
>5007	CompoundStatement	 
>5008	ReturnStatement	 
>5009	AndExpression	x >= 0 && x < width && y >= 0 && y < height
>5010	AndExpression	x < width && y >= 0 && y < height
>5011	AndExpression	y >= 0 && y < height
>5012	RelationalExpression	y < height
>5013	Identifier	height
>5014	Identifier	y
>5015	RelationalExpression	y >= 0
>5016	PrimaryExpression	0
>5017	Identifier	y
>5018	RelationalExpression	x < width
>5019	Identifier	width
>5020	Identifier	x
>5021	RelationalExpression	x >= 0
>5022	PrimaryExpression	0
>5023	Identifier	x
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=141,13
<13=133,127,124,14
<14=15
<15=116,110,107,16
<16=98,89,80,71,17
<17=18
<18=62,19
<19=61,20
<20=22,21
<22=58,23
<23=57,24
<24=50,25
<25=49,26
<26=42,27
<27=41,28
<28=34,29
<29=33,30
<30=32,31
<34=38,35
<35=37,36
<38=40,39
<42=46,43
<43=45,44
<46=48,47
<50=54,51
<51=53,52
<54=56,55
<58=60,59
<62=68,63
<63=67,64
<64=66,65
<68=70,69
<71=72
<72=79,78,73
<73=77,74
<74=76,75
<80=81
<81=88,87,82
<82=86,83
<83=85,84
<89=90
<90=97,96,91
<91=95,92
<92=94,93
<98=99
<99=106,105,100
<100=104,101
<101=103,102
<107=109,108
<110=111
<111=115,112
<112=114,113
<116=117
<117=118
<118=123,122,119
<119=121,120
<124=126,125
<127=128
<128=132,129
<129=131,130
<133=134
<134=135
<135=140,139,136
<136=138,137
<141=142
<142=178,143
<143=151,144
<144=145
<145=147,146
<147=148
<148=150,149
<151=152
<152=176,153
<153=165,154
<154=155
<155=157,156
<157=159,158
<159=161,160
<161=162
<162=164,163
<165=166
<166=168,167
<168=170,169
<170=172,171
<172=173
<173=175,174
<176=177
<178=179
<179=181,180
<203=212,211,204
<204=208,205
<205=207,206
<208=210,209
<212=469,213
<213=461,455,452,214
<214=215
<215=444,438,435,216
<216=426,417,408,399,392,385,352,319,286,253,217
<217=249,232,218
<218=219
<219=220
<220=221
<221=223,222
<223=229,224
<224=228,225
<225=227,226
<229=231,230
<232=233
<233=234
<234=240,235
<235=239,236
<236=238,237
<240=246,241
<241=245,242
<242=244,243
<246=248,247
<249=250
<250=252,251
<253=271,254
<254=259,255
<255=256
<256=258,257
<259=260
<260=270,261
<261=267,262
<262=266,263
<263=265,264
<267=269,268
<271=272
<272=284,273
<273=274
<274=275
<275=281,276
<276=280,277
<277=279,278
<281=283,282
<284=285
<286=304,287
<287=292,288
<288=289
<289=291,290
<292=293
<293=303,294
<294=300,295
<295=299,296
<296=298,297
<300=302,301
<304=305
<305=317,306
<306=307
<307=308
<308=314,309
<309=313,310
<310=312,311
<314=316,315
<317=318
<319=337,320
<320=325,321
<321=322
<322=324,323
<325=326
<326=336,327
<327=333,328
<328=332,329
<329=331,330
<333=335,334
<337=338
<338=350,339
<339=340
<340=341
<341=347,342
<342=346,343
<343=345,344
<347=349,348
<350=351
<352=370,353
<353=358,354
<354=355
<355=357,356
<358=359
<359=369,360
<360=366,361
<361=365,362
<362=364,363
<366=368,367
<370=371
<371=383,372
<372=373
<373=374
<374=380,375
<375=379,376
<376=378,377
<380=382,381
<383=384
<385=386
<386=391,390,387
<387=389,388
<392=393
<393=398,397,394
<394=396,395
<399=400
<400=407,406,401
<401=405,402
<402=404,403
<408=409
<409=416,415,410
<410=414,411
<411=413,412
<417=418
<418=425,424,419
<419=423,420
<420=422,421
<426=427
<427=434,433,428
<428=432,429
<429=431,430
<435=437,436
<438=439
<439=443,440
<440=442,441
<444=445
<445=446
<446=451,450,447
<447=449,448
<452=454,453
<455=456
<456=460,457
<457=459,458
<461=462
<462=463
<463=468,467,464
<464=466,465
<469=470
<470=506,471
<471=479,472
<472=473
<473=475,474
<475=476
<476=478,477
<479=480
<480=504,481
<481=493,482
<482=483
<483=485,484
<485=487,486
<487=489,488
<489=490
<490=492,491
<493=494
<494=496,495
<496=498,497
<498=500,499
<500=501
<501=503,502
<504=505
<506=507
<507=509,508
<535=544,543,536
<536=540,537
<537=539,538
<540=542,541
<544=622,618,607,545
<545=599,593,590,546
<546=547
<547=582,576,573,548
<548=549
<549=550
<550=564,551
<551=561,552
<552=560,553
<553=557,554
<554=556,555
<557=559,558
<561=563,562
<564=570,565
<565=569,566
<566=568,567
<570=572,571
<573=575,574
<576=577
<577=581,578
<578=580,579
<582=583
<583=584
<584=589,588,585
<585=587,586
<590=592,591
<593=594
<594=598,595
<595=597,596
<599=600
<600=601
<601=606,605,602
<602=604,603
<607=608
<608=616,609
<609=614,612,610
<610=611
<612=613
<614=615
<616=617
<618=619
<619=621,620
<622=623
<623=659,624
<624=632,625
<625=626
<626=628,627
<628=629
<629=631,630
<632=633
<633=657,634
<634=646,635
<635=636
<636=638,637
<638=640,639
<640=642,641
<642=643
<643=645,644
<646=647
<647=649,648
<649=651,650
<651=653,652
<653=654
<654=656,655
<657=658
<659=660
<660=662,661
<681=690,689,682
<682=686,683
<683=685,684
<686=688,687
<690=753,691
<691=745,739,736,692
<692=693
<693=728,722,719,694
<694=695
<695=696
<696=710,697
<697=707,698
<698=706,699
<699=703,700
<700=702,701
<703=705,704
<707=709,708
<710=716,711
<711=715,712
<712=714,713
<716=718,717
<719=721,720
<722=723
<723=727,724
<724=726,725
<728=729
<729=730
<730=735,734,731
<731=733,732
<736=738,737
<739=740
<740=744,741
<741=743,742
<745=746
<746=747
<747=752,751,748
<748=750,749
<753=754
<754=790,755
<755=763,756
<756=757
<757=759,758
<759=760
<760=762,761
<763=764
<764=788,765
<765=777,766
<766=767
<767=769,768
<769=771,770
<771=773,772
<773=774
<774=776,775
<777=778
<778=780,779
<780=782,781
<782=784,783
<784=785
<785=787,786
<788=789
<790=791
<791=793,792
<811=822,812
<812=819,816,813
<813=815,814
<816=818,817
<819=821,820
<822=823
<823=824
<824=844,825
<825=826
<826=827
<827=833,828
<828=831,829
<829=830
<831=832
<833=834
<834=836,835
<836=840,837
<837=838
<838=839
<840=841
<841=843,842
<844=845
<845=847,846
<858=860,859
<864=870,869,865
<865=866
<866=868,867
<870=871
<871=872
<872=876,873
<873=874
<874=875
<876=877
<882=888,887,883
<883=884
<884=886,885
<888=984,972,889
<889=964,960,957,890
<890=936,918,900,891
<891=892
<892=894,893
<894=895
<895=897,896
<897=899,898
<900=901
<901=917,902
<902=916,903
<903=909,904
<904=906,905
<906=908,907
<909=911,910
<911=915,912
<912=914,913
<918=919
<919=935,920
<920=934,921
<921=927,922
<922=924,923
<924=926,925
<927=929,928
<929=933,930
<930=932,931
<936=937
<937=953,938
<938=939
<939=940
<940=942,941
<942=943
<943=945,944
<945=949,946
<946=947
<947=948
<949=950
<950=952,951
<953=954
<954=956,955
<957=959,958
<960=961
<961=963,962
<964=965
<965=966
<966=971,970,967
<967=969,968
<972=973
<973=983,982,974
<974=981,975
<975=977,976
<977=978
<978=980,979
<984=986,985
<986=987
<987=989,988
<989=991,990
<991=992
<992=994,993
<1008=1014,1013,1009
<1009=1010
<1010=1012,1011
<1014=1021,1015
<1015=1016
<1016=1020,1017
<1017=1019,1018
<1021=1022
<1022=1033,1023
<1023=1024
<1024=1025
<1025=1032,1026
<1026=1028,1027
<1028=1029
<1029=1031,1030
<1033=1034
<1046=1049,1048,1047
<1049=1050
<1050=1051
<1051=1058,1053,1052
<1053=1055,1054
<1055=1057,1056
<1058=1059
<1059=1066,1060
<1060=1062,1061
<1062=1063
<1063=1065,1064
<1075=1086,1076
<1076=1083,1080,1077
<1077=1079,1078
<1080=1082,1081
<1083=1085,1084
<1086=1204,1197,1087
<1087=1189,1185,1182,1088
<1088=1089
<1089=1174,1170,1163,1090
<1090=1138,1113,1102,1091
<1091=1092
<1092=1094,1093
<1094=1100,1095
<1095=1098,1096
<1096=1097
<1098=1099
<1100=1101
<1102=1103
<1103=1105,1104
<1105=1111,1106
<1106=1109,1107
<1107=1108
<1109=1110
<1111=1112
<1113=1114
<1114=1130,1115
<1115=1122,1116
<1116=1118,1117
<1118=1119
<1119=1121,1120
<1122=1129,1123
<1123=1125,1124
<1125=1126
<1126=1128,1127
<1130=1136,1131
<1131=1134,1132
<1132=1133
<1134=1135
<1136=1137
<1138=1139
<1139=1155,1140
<1140=1147,1141
<1141=1143,1142
<1143=1144
<1144=1146,1145
<1147=1154,1148
<1148=1150,1149
<1150=1151
<1151=1153,1152
<1155=1161,1156
<1156=1159,1157
<1157=1158
<1159=1160
<1161=1162
<1163=1167,1164
<1164=1166,1165
<1167=1169,1168
<1170=1171
<1171=1173,1172
<1174=1175
<1175=1176
<1176=1181,1180,1177
<1177=1179,1178
<1182=1184,1183
<1185=1186
<1186=1188,1187
<1189=1190
<1190=1191
<1191=1196,1195,1192
<1192=1194,1193
<1197=1198
<1198=1203,1202,1199
<1199=1201,1200
<1204=1205
<1205=1213,1206
<1206=1211,1207
<1207=1208
<1208=1210,1209
<1211=1212
<1213=1214
<1214=1216,1215
<1235=1237,1236
<1241=1244,1243,1242
<1244=1245
<1245=1246
<1251=1254,1253,1252
<1254=1255
<1255=1256
<1261=1264,1263,1262
<1264=1265
<1265=1266
<1271=1280,1279,1272
<1272=1276,1273
<1273=1275,1274
<1276=1278,1277
<1280=1302,1296,1290,1283,1281
<1281=1282
<1283=1284
<1284=1286,1285
<1286=1287
<1287=1289,1288
<1290=1291
<1291=1293,1292
<1293=1295,1294
<1296=1297
<1297=1299,1298
<1299=1301,1300
<1302=1303
<1303=1308,1307,1304
<1304=1306,1305
<1319=1322,1321,1320
<1322=1323
<1323=1324
<1324=1330,1325
<1325=1329,1326
<1326=1328,1327
<1338=1344,1343,1339
<1339=1340
<1340=1342,1341
<1344=1345
<1345=1346
<1346=1352,1347
<1347=1349,1348
<1349=1351,1350
<1352=1354,1353
<1354=1356,1355
<1365=1374,1373,1366
<1366=1370,1367
<1367=1369,1368
<1370=1372,1371
<1374=1484,1471,1470,1469,1468,1467,1466,1465,1464,1463,1462,1461,1460,1459,1458,1457,1450,1375
<1375=1442,1438,1435,1376
<1376=1377
<1377=1427,1423,1412,1378
<1378=1390,1379
<1379=1380
<1380=1382,1381
<1382=1388,1383
<1383=1386,1384
<1384=1385
<1386=1387
<1388=1389
<1390=1391
<1391=1404,1392
<1392=1396,1393
<1393=1395,1394
<1396=1400,1397
<1397=1398
<1398=1399
<1400=1401
<1401=1403,1402
<1404=1408,1405
<1405=1406
<1406=1407
<1408=1409
<1409=1411,1410
<1412=1420,1413
<1413=1417,1414
<1414=1416,1415
<1417=1419,1418
<1420=1422,1421
<1423=1424
<1424=1426,1425
<1427=1428
<1428=1429
<1429=1434,1433,1430
<1430=1432,1431
<1435=1437,1436
<1438=1439
<1439=1441,1440
<1442=1443
<1443=1444
<1444=1449,1448,1445
<1445=1447,1446
<1450=1451
<1451=1456,1455,1452
<1452=1454,1453
<1471=1472
<1472=1480,1473
<1473=1478,1474
<1474=1475
<1475=1477,1476
<1478=1479
<1480=1481
<1481=1483,1482
<1484=1485
<1485=1494,1486
<1486=1487
<1487=1488
<1488=1492,1489
<1489=1490
<1490=1491
<1492=1493
<1494=1495
<1513=1518,1514
<1514=1515
<1515=1517,1516
<1518=1519
<1519=1520
<1520=1528,1521
<1521=1522
<1522=1523
<1523=1527,1524
<1524=1526,1525
<1528=1529
<1529=1531,1530
<1539=1550,1540
<1540=1547,1544,1541
<1541=1543,1542
<1544=1546,1545
<1547=1549,1548
<1550=1551
<1551=1552
<1552=1564,1553
<1553=1554
<1554=1555
<1555=1563,1556
<1556=1562,1557
<1557=1561,1558
<1558=1560,1559
<1564=1565
<1565=1567,1566
<1577=1579,1578
<1583=1592,1591,1584
<1584=1588,1585
<1585=1587,1586
<1588=1590,1589
<1592=1593
<1593=1594
<1594=1604,1595
<1595=1596
<1596=1597
<1597=1601,1598
<1598=1600,1599
<1601=1603,1602
<1604=1605
<1614=1620,1619,1615
<1615=1616
<1616=1618,1617
<1620=1699,1621
<1621=1691,1687,1684,1622
<1622=1673,1663,1654,1623
<1623=1624
<1624=1650,1625
<1625=1626
<1626=1627
<1627=1649,1628
<1628=1648,1629
<1629=1640,1630
<1630=1632,1631
<1632=1634,1633
<1634=1636,1635
<1636=1637
<1637=1639,1638
<1640=1642,1641
<1642=1644,1643
<1644=1645
<1645=1647,1646
<1650=1651
<1651=1653,1652
<1654=1655
<1655=1659,1656
<1656=1657
<1657=1658
<1659=1660
<1660=1662,1661
<1663=1664
<1664=1672,1671,1665
<1665=1667,1666
<1667=1668
<1668=1670,1669
<1673=1674
<1674=1683,1682,1675
<1675=1681,1676
<1676=1680,1677
<1677=1679,1678
<1684=1686,1685
<1687=1688
<1688=1690,1689
<1691=1692
<1692=1693
<1693=1698,1697,1694
<1694=1696,1695
<1699=1700
<1700=1710,1709,1701
<1701=1708,1702
<1702=1704,1703
<1704=1705
<1705=1707,1706
<1728=1734,1733,1729
<1729=1730
<1730=1732,1731
<1734=1741,1735
<1735=1736
<1736=1740,1737
<1737=1739,1738
<1741=1742
<1742=1748,1743
<1743=1744
<1744=1745
<1745=1747,1746
<1748=1749
<1760=1766,1765,1761
<1761=1762
<1762=1764,1763
<1766=1767
<1767=1768
<1768=1772,1769
<1769=1771,1770
<1783=1788,1784
<1784=1785
<1785=1787,1786
<1793=1795,1794
<1799=1802,1801,1800
<1802=1803
<1803=1804
<1809=1812,1811,1810
<1812=1946,1915,1870,1825,1821,1817,1813
<1813=1814
<1814=1816,1815
<1817=1818
<1818=1820,1819
<1821=1822
<1822=1824,1823
<1825=1865,1826
<1826=1864,1863,1862,1861,1860,1859,1858,1857,1856,1855,1854,1853,1852,1851,1850,1849,1848,1847,1846,1845,1844,1843,1842,1841,1840,1839,1833,1827
<1827=1828
<1828=1832,1829
<1829=1831,1830
<1833=1834
<1834=1838,1835
<1835=1837,1836
<1865=1866
<1866=1868,1867
<1868=1869
<1870=1910,1871
<1871=1909,1908,1907,1906,1905,1904,1903,1902,1901,1900,1899,1898,1897,1896,1895,1894,1893,1892,1891,1890,1889,1888,1887,1886,1885,1884,1878,1872
<1872=1873
<1873=1877,1874
<1874=1876,1875
<1878=1879
<1879=1883,1880
<1880=1882,1881
<1910=1911
<1911=1913,1912
<1913=1914
<1915=1936,1916
<1916=1917
<1917=1918
<1918=1934,1919
<1919=1920
<1920=1921
<1921=1928,1922
<1922=1924,1923
<1924=1925
<1925=1927,1926
<1928=1930,1929
<1930=1931
<1931=1933,1932
<1934=1935
<1936=1937
<1937=1942,1938
<1938=1940,1939
<1940=1941
<1942=1944,1943
<1944=1945
<1946=1947
<1947=1959,1948
<1948=1949
<1949=1950
<1950=1955,1951
<1951=1953,1952
<1953=1954
<1955=1957,1956
<1957=1958
<1959=1960
<1980=1983,1982,1981
<1983=1984
<1984=1985
<1985=1992,1986
<1986=1988,1987
<1988=1989
<1989=1991,1990
<1998=2001,2000,1999
<2001=2002
<2002=2003
<2003=2010,2004
<2004=2006,2005
<2006=2007
<2007=2009,2008
<2016=2019,2018,2017
<2019=2020
<2020=2021
<2021=2028,2022
<2022=2024,2023
<2024=2025
<2025=2027,2026
<2034=2037,2036,2035
<2037=2043,2038
<2038=2039
<2039=2041,2040
<2041=2042
<2043=2044
<2044=2046,2045
<2046=2047
<2051=2054,2053,2052
<2054=2088,2078,2070,2061,2057,2055
<2055=2056
<2057=2058
<2058=2060,2059
<2061=2062
<2062=2068,2063
<2063=2066,2064
<2064=2065
<2066=2067
<2068=2069
<2070=2071
<2071=2077,2072
<2072=2076,2073
<2073=2075,2074
<2078=2079
<2079=2086,2080
<2080=2081
<2081=2082
<2082=2084,2083
<2084=2085
<2086=2087
<2088=2091,2089
<2089=2090
<2091=2092
<2092=2094,2093
<2104=2107,2106,2105
<2107=2138,2128,2120,2112,2108
<2108=2109
<2109=2111,2110
<2112=2113
<2113=2119,2114
<2114=2118,2115
<2115=2117,2116
<2120=2121
<2121=2127,2122
<2122=2126,2123
<2123=2125,2124
<2128=2129
<2129=2136,2130
<2130=2131
<2131=2132
<2132=2134,2133
<2134=2135
<2136=2137
<2138=2140,2139
<2140=2141
<2141=2143,2142
<2150=2159,2158,2151
<2151=2155,2152
<2152=2154,2153
<2155=2157,2156
<2159=2268,2160
<2160=2260,2254,2251,2161
<2161=2162
<2162=2243,2237,2234,2163
<2163=2218,2198,2164
<2164=2165
<2165=2189,2166
<2166=2168,2167
<2168=2188,2169
<2169=2185,2170
<2170=2184,2171
<2171=2177,2172
<2172=2176,2173
<2173=2175,2174
<2177=2181,2178
<2178=2180,2179
<2181=2183,2182
<2185=2187,2186
<2189=2195,2190
<2190=2194,2191
<2191=2193,2192
<2195=2197,2196
<2198=2199
<2199=2217,2216,2200
<2200=2215,2201
<2201=2213,2202
<2202=2209,2203
<2203=2204
<2204=2206,2205
<2206=2208,2207
<2209=2210
<2210=2212,2211
<2213=2214
<2218=2219
<2219=2233,2232,2220
<2220=2231,2221
<2221=2229,2222
<2222=2225,2223
<2223=2224
<2225=2226
<2226=2228,2227
<2229=2230
<2234=2236,2235
<2237=2238
<2238=2242,2239
<2239=2241,2240
<2243=2244
<2244=2245
<2245=2250,2249,2246
<2246=2248,2247
<2251=2253,2252
<2254=2255
<2255=2259,2256
<2256=2258,2257
<2260=2261
<2261=2262
<2262=2267,2266,2263
<2263=2265,2264
<2268=2269
<2269=2285,2270
<2270=2278,2271
<2271=2272
<2272=2274,2273
<2274=2275
<2275=2277,2276
<2278=2279
<2279=2281,2280
<2281=2282
<2282=2284,2283
<2285=2286
<2286=2288,2287
<2307=2316,2315,2308
<2308=2312,2309
<2309=2311,2310
<2312=2314,2313
<2316=2425,2317
<2317=2417,2411,2408,2318
<2318=2319
<2319=2400,2394,2391,2320
<2320=2375,2355,2321
<2321=2322
<2322=2346,2323
<2323=2325,2324
<2325=2345,2326
<2326=2342,2327
<2327=2341,2328
<2328=2334,2329
<2329=2333,2330
<2330=2332,2331
<2334=2338,2335
<2335=2337,2336
<2338=2340,2339
<2342=2344,2343
<2346=2352,2347
<2347=2351,2348
<2348=2350,2349
<2352=2354,2353
<2355=2356
<2356=2374,2373,2357
<2357=2372,2358
<2358=2370,2359
<2359=2366,2360
<2360=2361
<2361=2363,2362
<2363=2365,2364
<2366=2367
<2367=2369,2368
<2370=2371
<2375=2376
<2376=2390,2389,2377
<2377=2388,2378
<2378=2386,2379
<2379=2382,2380
<2380=2381
<2382=2383
<2383=2385,2384
<2386=2387
<2391=2393,2392
<2394=2395
<2395=2399,2396
<2396=2398,2397
<2400=2401
<2401=2402
<2402=2407,2406,2403
<2403=2405,2404
<2408=2410,2409
<2411=2412
<2412=2416,2413
<2413=2415,2414
<2417=2418
<2418=2419
<2419=2424,2423,2420
<2420=2422,2421
<2425=2426
<2426=2442,2427
<2427=2435,2428
<2428=2429
<2429=2431,2430
<2431=2432
<2432=2434,2433
<2435=2436
<2436=2438,2437
<2438=2439
<2439=2441,2440
<2442=2443
<2443=2445,2444
<2464=2467,2466,2465
<2467=2493,2483,2472,2468
<2468=2469
<2469=2471,2470
<2472=2473
<2473=2479,2474
<2474=2477,2475
<2475=2476
<2477=2478
<2479=2480
<2480=2482,2481
<2483=2484
<2484=2491,2485
<2485=2486
<2486=2487
<2487=2489,2488
<2489=2490
<2491=2492
<2493=2495,2494
<2495=2496
<2496=2498,2497
<2508=2511,2510,2509
<2511=2512
<2512=2805,2513
<2513=2789,2773,2772,2771,2770,2769,2768,2767,2766,2765,2764,2763,2762,2761,2760,2759,2758,2757,2756,2755,2754,2753,2752,2751,2750,2749,2748,2747,2746,2745,2744,2743,2732,2721,2514
<2514=2713,2707,2704,2515
<2515=2516
<2516=2696,2690,2679,2517
<2517=2657,2635,2613,2591,2584,2541,2534,2518
<2518=2519
<2519=2531,2520
<2520=2529,2521
<2521=2522
<2522=2523
<2523=2527,2524
<2524=2525
<2525=2526
<2527=2528
<2529=2530
<2531=2533,2532
<2534=2535
<2535=2537,2536
<2537=2538
<2538=2540,2539
<2541=2542
<2542=2583,2543
<2543=2563,2544
<2544=2545
<2545=2546
<2546=2555,2547
<2547=2551,2548
<2548=2549
<2549=2550
<2551=2552
<2552=2554,2553
<2555=2559,2556
<2556=2557
<2557=2558
<2559=2560
<2560=2562,2561
<2563=2564
<2564=2566,2565
<2566=2575,2567
<2567=2571,2568
<2568=2569
<2569=2570
<2571=2572
<2572=2574,2573
<2575=2579,2576
<2576=2577
<2577=2578
<2579=2580
<2580=2582,2581
<2584=2585
<2585=2590,2589,2586
<2586=2588,2587
<2591=2592
<2592=2612,2611,2593
<2593=2610,2594
<2594=2596,2595
<2596=2600,2597
<2597=2599,2598
<2600=2608,2601
<2601=2604,2602
<2602=2603
<2604=2605
<2605=2607,2606
<2608=2609
<2613=2614
<2614=2634,2633,2615
<2615=2632,2616
<2616=2618,2617
<2618=2622,2619
<2619=2621,2620
<2622=2630,2623
<2623=2626,2624
<2624=2625
<2626=2627
<2627=2629,2628
<2630=2631
<2635=2636
<2636=2656,2655,2637
<2637=2654,2638
<2638=2649,2639
<2639=2647,2640
<2640=2643,2641
<2641=2642
<2643=2644
<2644=2646,2645
<2647=2648
<2649=2653,2650
<2650=2652,2651
<2657=2658
<2658=2678,2677,2659
<2659=2676,2660
<2660=2671,2661
<2661=2669,2662
<2662=2665,2663
<2663=2664
<2665=2666
<2666=2668,2667
<2669=2670
<2671=2675,2672
<2672=2674,2673
<2679=2687,2680
<2680=2684,2681
<2681=2683,2682
<2684=2686,2685
<2687=2689,2688
<2690=2691
<2691=2695,2692
<2692=2694,2693
<2696=2697
<2697=2698
<2698=2703,2702,2699
<2699=2701,2700
<2704=2706,2705
<2707=2708
<2708=2712,2709
<2709=2711,2710
<2713=2714
<2714=2715
<2715=2720,2719,2716
<2716=2718,2717
<2721=2722
<2722=2731,2730,2723
<2723=2729,2724
<2724=2726,2725
<2726=2728,2727
<2732=2733
<2733=2742,2741,2734
<2734=2740,2735
<2735=2737,2736
<2737=2739,2738
<2773=2774
<2774=2785,2775
<2775=2778,2776
<2776=2777
<2778=2779
<2779=2781,2780
<2781=2782
<2782=2784,2783
<2785=2786
<2786=2788,2787
<2789=2790
<2790=2804,2791
<2791=2802,2792
<2792=2795,2793
<2793=2794
<2795=2796
<2796=2798,2797
<2798=2799
<2799=2801,2800
<2802=2803
<2805=2806
<2806=2808,2807
<2808=2810,2809
<2810=2811
<2811=2813,2812
<2845=2848,2847,2846
<2848=2849
<2849=2907,2850
<2850=2902,2878,2862,2851
<2851=2852
<2852=2860,2853
<2853=2858,2856,2854
<2854=2855
<2856=2857
<2858=2859
<2860=2861
<2862=2863
<2863=2877,2876,2875,2864
<2864=2874,2865
<2865=2873,2872,2871,2870,2869,2868,2867,2866
<2878=2879
<2879=2901,2900,2880
<2880=2899,2881
<2881=2897,2882
<2882=2890,2883
<2883=2884
<2884=2886,2885
<2886=2887
<2887=2889,2888
<2890=2891
<2891=2893,2892
<2893=2894
<2894=2896,2895
<2897=2898
<2902=2903
<2903=2905,2904
<2905=2906
<2907=2908
<2908=2910,2909
<2910=2912,2911
<2912=2913
<2913=2915,2914
<2932=2950,2949,2933
<2933=2946,2943,2940,2937,2934
<2934=2936,2935
<2937=2939,2938
<2940=2942,2941
<2943=2945,2944
<2946=2948,2947
<2950=3311,3310,2951,2958,2964,2970,3187,3193,3200,3207,3214,3215,3216,3217,3218,3219,3220,3221,3222,3223,3224,3225,3226,3227,3228,3229,3230,3231,3232,3233,3234,3235,3236,3237,3238,3239,3240,3252,3264,3281,3298,3299,3300,3301,3302,3303,3304,3305,3306,3307,3308,3309
<2951=2952
<2952=2954,2953
<2954=2955
<2955=2957,2956
<2958=2959
<2959=2961,2960
<2961=2963,2962
<2964=2965
<2965=2967,2966
<2967=2969,2968
<2970=3179,3175,3172,2971
<2971=2972
<2972=3164,3160,3145,2973
<2973=3131,3102,3072,3042,2974
<2974=3033,2989,2975
<2975=2976
<2976=2983,2977
<2977=2978
<2978=2980,2979
<2980=2982,2981
<2983=2984
<2984=2986,2985
<2986=2988,2987
<2989=3019,2996,2990
<2990=2991
<2991=2993,2992
<2993=2995,2994
<2996=2997
<2997=3016,2998
<2998=3014,2999
<2999=3010,3006,3004,3002,3000
<3000=3001
<3002=3003
<3004=3005
<3006=3007
<3007=3009,3008
<3010=3011
<3011=3013,3012
<3014=3015
<3016=3018,3017
<3019=3020
<3020=3032,3031,3021
<3021=3030,3022
<3022=3029,3023
<3023=3027,3024
<3024=3025
<3025=3026
<3027=3028
<3033=3034
<3034=3040,3035
<3035=3038,3036
<3036=3037
<3038=3039
<3040=3041
<3042=3043
<3043=3071,3070,3044
<3044=3069,3045
<3045=3068,3046
<3046=3048,3047
<3048=3062,3049
<3049=3056,3050
<3050=3054,3051
<3051=3052
<3052=3053
<3054=3055
<3056=3058,3057
<3058=3059
<3059=3061,3060
<3062=3066,3063
<3063=3064
<3064=3065
<3066=3067
<3072=3073
<3073=3101,3100,3074
<3074=3099,3075
<3075=3098,3076
<3076=3078,3077
<3078=3092,3079
<3079=3086,3080
<3080=3084,3081
<3081=3082
<3082=3083
<3084=3085
<3086=3088,3087
<3088=3089
<3089=3091,3090
<3092=3096,3093
<3093=3094
<3094=3095
<3096=3097
<3102=3117,3103
<3103=3111,3105,3104
<3105=3106
<3106=3108,3107
<3108=3110,3109
<3111=3112
<3112=3114,3113
<3114=3116,3115
<3117=3118
<3118=3130,3119
<3119=3128,3120
<3120=3121
<3121=3122
<3122=3126,3123
<3123=3124
<3124=3125
<3126=3127
<3128=3129
<3131=3132
<3132=3144,3143,3133
<3133=3142,3134
<3134=3138,3135
<3135=3136
<3136=3137
<3138=3139
<3139=3141,3140
<3145=3157,3146
<3146=3154,3147
<3147=3151,3148
<3148=3150,3149
<3151=3153,3152
<3154=3156,3155
<3157=3159,3158
<3160=3161
<3161=3163,3162
<3164=3165
<3165=3166
<3166=3171,3170,3167
<3167=3169,3168
<3172=3174,3173
<3175=3176
<3176=3178,3177
<3179=3180
<3180=3181
<3181=3186,3185,3182
<3182=3184,3183
<3187=3188
<3188=3192,3189
<3189=3191,3190
<3193=3194
<3194=3199,3198,3195
<3195=3197,3196
<3200=3201
<3201=3206,3205,3202
<3202=3204,3203
<3207=3208
<3208=3213,3212,3209
<3209=3211,3210
<3240=3241
<3241=3251,3250,3242
<3242=3249,3243
<3243=3245,3244
<3245=3246
<3246=3248,3247
<3252=3253
<3253=3263,3262,3254
<3254=3261,3255
<3255=3257,3256
<3257=3258
<3258=3260,3259
<3264=3265
<3265=3280,3279,3266
<3266=3273,3267
<3267=3269,3268
<3269=3270
<3270=3272,3271
<3273=3275,3274
<3275=3276
<3276=3278,3277
<3281=3282
<3282=3297,3296,3283
<3283=3290,3284
<3284=3286,3285
<3286=3287
<3287=3289,3288
<3290=3292,3291
<3292=3293
<3293=3295,3294
<3358=3373,3372,3359
<3359=3369,3366,3363,3360
<3360=3362,3361
<3363=3365,3364
<3366=3368,3367
<3369=3371,3370
<3373=3785,3784,3783,3782,3781,3780,3779,3778,3777,3776,3775,3774,3773,3772,3748,3724,3715,3703,3691,3690,3689,3688,3687,3686,3685,3684,3683,3682,3681,3680,3679,3678,3677,3670,3663,3387,3381,3374
<3374=3375
<3375=3377,3376
<3377=3378
<3378=3380,3379
<3381=3382
<3382=3384,3383
<3384=3386,3385
<3387=3655,3651,3648,3388
<3388=3389
<3389=3640,3636,3629,3390
<3390=3615,3606,3575,3566,3536,3506,3434,3430,3426,3391
<3391=3392
<3392=3418,3393
<3393=3416,3394
<3394=3409,3402,3395
<3395=3396
<3396=3400,3397
<3397=3398
<3398=3399
<3400=3401
<3402=3403
<3403=3407,3404
<3404=3405
<3405=3406
<3407=3408
<3409=3410
<3410=3414,3411
<3411=3412
<3412=3413
<3414=3415
<3416=3417
<3418=3424,3419
<3419=3422,3420
<3420=3421
<3422=3423
<3424=3425
<3426=3427
<3427=3429,3428
<3430=3431
<3431=3433,3432
<3434=3497,3435
<3435=3480,3436
<3436=3449,3437
<3437=3438
<3438=3440,3439
<3440=3446,3441
<3441=3445,3442
<3442=3444,3443
<3446=3448,3447
<3449=3450
<3450=3464,3451
<3451=3453,3452
<3453=3461,3454
<3454=3460,3455
<3455=3457,3456
<3457=3459,3458
<3461=3463,3462
<3464=3479,3465
<3465=3477,3466
<3466=3467
<3467=3468
<3468=3474,3469
<3469=3473,3470
<3470=3472,3471
<3474=3476,3475
<3477=3478
<3480=3489,3481
<3481=3488,3487,3482
<3482=3486,3483
<3483=3485,3484
<3489=3496,3495,3490
<3490=3494,3491
<3491=3493,3492
<3497=3498
<3498=3504,3499
<3499=3502,3500
<3500=3501
<3502=3503
<3504=3505
<3506=3507
<3507=3535,3534,3508
<3508=3533,3509
<3509=3532,3510
<3510=3512,3511
<3512=3526,3513
<3513=3520,3514
<3514=3518,3515
<3515=3516
<3516=3517
<3518=3519
<3520=3522,3521
<3522=3523
<3523=3525,3524
<3526=3530,3527
<3527=3528
<3528=3529
<3530=3531
<3536=3537
<3537=3565,3564,3538
<3538=3563,3539
<3539=3562,3540
<3540=3542,3541
<3542=3556,3543
<3543=3550,3544
<3544=3548,3545
<3545=3546
<3546=3547
<3548=3549
<3550=3552,3551
<3552=3553
<3553=3555,3554
<3556=3560,3557
<3557=3558
<3558=3559
<3560=3561
<3566=3567
<3567=3574,3573,3568
<3568=3572,3569
<3569=3571,3570
<3575=3576
<3576=3605,3604,3577
<3577=3592,3578
<3578=3580,3579
<3580=3589,3581
<3581=3588,3582
<3582=3584,3583
<3584=3585
<3585=3587,3586
<3589=3591,3590
<3592=3601,3593
<3593=3600,3594
<3594=3596,3595
<3596=3597
<3597=3599,3598
<3601=3603,3602
<3606=3607
<3607=3614,3613,3608
<3608=3612,3609
<3609=3611,3610
<3615=3618,3616
<3616=3617
<3618=3619
<3619=3628,3620
<3620=3626,3621
<3621=3622
<3622=3623
<3623=3625,3624
<3626=3627
<3629=3633,3630
<3630=3632,3631
<3633=3635,3634
<3636=3637
<3637=3639,3638
<3640=3641
<3641=3642
<3642=3647,3646,3643
<3643=3645,3644
<3648=3650,3649
<3651=3652
<3652=3654,3653
<3655=3656
<3656=3657
<3657=3662,3661,3658
<3658=3660,3659
<3663=3664
<3664=3669,3668,3665
<3665=3667,3666
<3670=3671
<3671=3676,3675,3672
<3672=3674,3673
<3691=3692
<3692=3702,3701,3693
<3693=3700,3694
<3694=3696,3695
<3696=3697
<3697=3699,3698
<3703=3704
<3704=3714,3713,3705
<3705=3712,3706
<3706=3708,3707
<3708=3709
<3709=3711,3710
<3715=3716
<3716=3720,3717
<3717=3718
<3718=3719
<3720=3721
<3721=3723,3722
<3724=3725
<3725=3747,3746,3726
<3726=3745,3727
<3727=3743,3728
<3728=3736,3729
<3729=3730
<3730=3732,3731
<3732=3733
<3733=3735,3734
<3736=3737
<3737=3739,3738
<3739=3740
<3740=3742,3741
<3743=3744
<3748=3749
<3749=3771,3750
<3750=3770,3751
<3751=3769,3752
<3752=3763,3753
<3753=3761,3754
<3754=3759,3757,3755
<3755=3756
<3757=3758
<3759=3760
<3761=3762
<3763=3765,3764
<3765=3766
<3766=3768,3767
<3827=3842,3841,3828
<3828=3838,3835,3832,3829
<3829=3831,3830
<3832=3834,3833
<3835=3837,3836
<3838=3840,3839
<3842=4274,4273,4272,4271,4270,4269,4268,4267,4266,4265,4264,4263,4262,4261,4242,4218,4194,4182,4170,4169,4168,4167,4166,4165,4164,4163,4162,4161,4160,4159,4158,4157,4156,4149,4142,3872,3862,3856,3850,3843
<3843=3844
<3844=3846,3845
<3846=3847
<3847=3849,3848
<3850=3851
<3851=3853,3852
<3853=3855,3854
<3856=3857
<3857=3859,3858
<3859=3861,3860
<3862=3870,3865,3863
<3863=3864
<3865=3866
<3866=3867
<3867=3869,3868
<3870=3871
<3872=4134,4130,4127,3873
<3873=3874
<3874=4119,4115,4108,3875
<3875=4100,4091,4060,3915,3911,3876
<3876=3877
<3877=3903,3878
<3878=3901,3879
<3879=3894,3887,3880
<3880=3881
<3881=3885,3882
<3882=3883
<3883=3884
<3885=3886
<3887=3888
<3888=3892,3889
<3889=3890
<3890=3891
<3892=3893
<3894=3895
<3895=3899,3896
<3896=3897
<3897=3898
<3899=3900
<3901=3902
<3903=3909,3904
<3904=3907,3905
<3905=3906
<3907=3908
<3909=3910
<3911=3912
<3912=3914,3913
<3915=4056,3916
<3916=4047,4017,3987,3921,3917
<3917=3918
<3918=3920,3919
<3921=3978,3928,3922
<3922=3923
<3923=3924
<3924=3925
<3925=3927,3926
<3928=3971,3960,3949,3929
<3929=3930
<3930=3940,3931
<3931=3937,3932
<3932=3936,3933
<3933=3935,3934
<3937=3939,3938
<3940=3946,3941
<3941=3945,3942
<3942=3944,3943
<3946=3948,3947
<3949=3950
<3950=3959,3951
<3951=3958,3952
<3952=3956,3953
<3953=3954
<3954=3955
<3956=3957
<3960=3961
<3961=3970,3962
<3962=3969,3963
<3963=3967,3964
<3964=3965
<3965=3966
<3967=3968
<3971=3975,3972
<3972=3974,3973
<3975=3977,3976
<3978=3979
<3979=3985,3980
<3980=3983,3981
<3981=3982
<3983=3984
<3985=3986
<3987=3988
<3988=4016,4015,3989
<3989=4014,3990
<3990=4013,3991
<3991=3993,3992
<3993=4007,3994
<3994=4001,3995
<3995=3999,3996
<3996=3997
<3997=3998
<3999=4000
<4001=4003,4002
<4003=4004
<4004=4006,4005
<4007=4011,4008
<4008=4009
<4009=4010
<4011=4012
<4017=4018
<4018=4046,4045,4019
<4019=4044,4020
<4020=4043,4021
<4021=4023,4022
<4023=4037,4024
<4024=4031,4025
<4025=4029,4026
<4026=4027
<4027=4028
<4029=4030
<4031=4033,4032
<4033=4034
<4034=4036,4035
<4037=4041,4038
<4038=4039
<4039=4040
<4041=4042
<4047=4048
<4048=4055,4054,4049
<4049=4053,4050
<4050=4052,4051
<4056=4057
<4057=4059,4058
<4060=4061
<4061=4090,4089,4062
<4062=4077,4063
<4063=4065,4064
<4065=4074,4066
<4066=4073,4067
<4067=4069,4068
<4069=4070
<4070=4072,4071
<4074=4076,4075
<4077=4086,4078
<4078=4085,4079
<4079=4081,4080
<4081=4082
<4082=4084,4083
<4086=4088,4087
<4091=4092
<4092=4099,4098,4093
<4093=4097,4094
<4094=4096,4095
<4100=4102,4101
<4102=4103
<4103=4105,4104
<4105=4107,4106
<4108=4112,4109
<4109=4111,4110
<4112=4114,4113
<4115=4116
<4116=4118,4117
<4119=4120
<4120=4121
<4121=4126,4125,4122
<4122=4124,4123
<4127=4129,4128
<4130=4131
<4131=4133,4132
<4134=4135
<4135=4136
<4136=4141,4140,4137
<4137=4139,4138
<4142=4143
<4143=4148,4147,4144
<4144=4146,4145
<4149=4150
<4150=4155,4154,4151
<4151=4153,4152
<4170=4171
<4171=4181,4180,4172
<4172=4179,4173
<4173=4175,4174
<4175=4176
<4176=4178,4177
<4182=4183
<4183=4193,4192,4184
<4184=4191,4185
<4185=4187,4186
<4187=4188
<4188=4190,4189
<4194=4195
<4195=4217,4216,4196
<4196=4215,4197
<4197=4213,4198
<4198=4206,4199
<4199=4200
<4200=4202,4201
<4202=4203
<4203=4205,4204
<4206=4207
<4207=4209,4208
<4209=4210
<4210=4212,4211
<4213=4214
<4218=4219
<4219=4241,4220
<4220=4240,4221
<4221=4239,4222
<4222=4233,4223
<4223=4231,4224
<4224=4229,4227,4225
<4225=4226
<4227=4228
<4229=4230
<4231=4232
<4233=4235,4234
<4235=4236
<4236=4238,4237
<4242=4243
<4243=4260,4259,4244
<4244=4258,4245
<4245=4249,4246
<4246=4247
<4247=4248
<4249=4250
<4250=4252,4251
<4252=4254,4253
<4254=4255
<4255=4257,4256
<4321=4333,4332,4322
<4322=4329,4326,4323
<4323=4325,4324
<4326=4328,4327
<4329=4331,4330
<4333=4937,4930,4929,4928,4927,4926,4925,4924,4923,4922,4921,4920,4919,4915,4898,4889,4842,4793,4746,4697,4347,4341,4334
<4334=4335
<4335=4337,4336
<4337=4338
<4338=4340,4339
<4341=4342
<4342=4344,4343
<4344=4346,4345
<4347=4689,4683,4680,4348
<4348=4666,4654,4643,4616,4589,4575,4563,4528,4493,4479,4465,4447,4429,4349
<4349=4421,4417,4414,4350
<4350=4399,4351
<4351=4391,4387,4380,4352
<4352=4353
<4353=4363,4354
<4354=4355
<4355=4356
<4356=4360,4357
<4357=4359,4358
<4360=4362,4361
<4363=4364
<4364=4370,4365
<4365=4367,4366
<4367=4369,4368
<4370=4379,4371
<4371=4377,4372
<4372=4373
<4373=4374
<4374=4376,4375
<4377=4378
<4380=4384,4381
<4381=4383,4382
<4384=4386,4385
<4387=4388
<4388=4390,4389
<4391=4392
<4392=4393
<4393=4398,4397,4394
<4394=4396,4395
<4399=4400
<4400=4413,4412,4401
<4401=4411,4402
<4402=4408,4403
<4403=4407,4404
<4404=4406,4405
<4408=4410,4409
<4414=4416,4415
<4417=4418
<4418=4420,4419
<4421=4422
<4422=4423
<4423=4428,4427,4424
<4424=4426,4425
<4429=4430
<4430=4446,4445,4431
<4431=4444,4432
<4432=4442,4433
<4433=4438,4434
<4434=4435
<4435=4437,4436
<4438=4439
<4439=4441,4440
<4442=4443
<4447=4448
<4448=4464,4463,4449
<4449=4462,4450
<4450=4460,4451
<4451=4456,4452
<4452=4453
<4453=4455,4454
<4456=4457
<4457=4459,4458
<4460=4461
<4465=4466
<4466=4478,4477,4467
<4467=4476,4468
<4468=4474,4469
<4469=4472,4470
<4470=4471
<4472=4473
<4474=4475
<4479=4480
<4480=4492,4491,4481
<4481=4490,4482
<4482=4488,4483
<4483=4486,4484
<4484=4485
<4486=4487
<4488=4489
<4493=4494
<4494=4527,4526,4495
<4495=4525,4496
<4496=4524,4497
<4497=4522,4498
<4498=4499
<4499=4500
<4500=4507,4501
<4501=4503,4502
<4503=4504
<4504=4506,4505
<4507=4516,4508
<4508=4510,4509
<4510=4512,4511
<4512=4513
<4513=4515,4514
<4516=4520,4517
<4517=4518
<4518=4519
<4520=4521
<4522=4523
<4528=4529
<4529=4562,4561,4530
<4530=4560,4531
<4531=4559,4532
<4532=4557,4533
<4533=4534
<4534=4535
<4535=4542,4536
<4536=4538,4537
<4538=4539
<4539=4541,4540
<4542=4551,4543
<4543=4545,4544
<4545=4547,4546
<4547=4548
<4548=4550,4549
<4551=4555,4552
<4552=4553
<4553=4554
<4555=4556
<4557=4558
<4563=4564
<4564=4574,4573,4565
<4565=4572,4566
<4566=4570,4567
<4567=4568
<4568=4569
<4570=4571
<4575=4576
<4576=4588,4587,4577
<4577=4586,4578
<4578=4582,4579
<4579=4580
<4580=4581
<4582=4583
<4583=4585,4584
<4589=4590
<4590=4615,4614,4591
<4591=4613,4592
<4592=4594,4593
<4594=4612,4595
<4595=4610,4596
<4596=4597
<4597=4598
<4598=4609,4599
<4599=4608,4600
<4600=4602,4601
<4602=4606,4603
<4603=4604
<4604=4605
<4606=4607
<4610=4611
<4616=4617
<4617=4642,4641,4618
<4618=4640,4619
<4619=4621,4620
<4621=4639,4622
<4622=4637,4623
<4623=4624
<4624=4625
<4625=4636,4626
<4626=4635,4627
<4627=4629,4628
<4629=4633,4630
<4630=4631
<4631=4632
<4633=4634
<4637=4638
<4643=4645,4644
<4645=4646
<4646=4653,4647
<4647=4651,4648
<4648=4649
<4649=4650
<4651=4652
<4654=4655
<4655=4665,4664,4656
<4656=4663,4657
<4657=4661,4658
<4658=4659
<4659=4660
<4661=4662
<4666=4667
<4667=4679,4678,4668
<4668=4677,4669
<4669=4673,4670
<4670=4671
<4671=4672
<4673=4674
<4674=4676,4675
<4680=4682,4681
<4683=4684
<4684=4688,4685
<4685=4687,4686
<4689=4690
<4690=4691
<4691=4696,4695,4692
<4692=4694,4693
<4697=4698
<4698=4745,4744,4699
<4699=4743,4700
<4700=4728,4701
<4701=4715,4702
<4702=4709,4703
<4703=4705,4704
<4705=4706
<4706=4708,4707
<4709=4711,4710
<4711=4712
<4712=4714,4713
<4715=4721,4716
<4716=4719,4717
<4717=4718
<4719=4720
<4721=4722
<4722=4724,4723
<4724=4725
<4725=4727,4726
<4728=4742,4729
<4729=4735,4730
<4730=4733,4731
<4731=4732
<4733=4734
<4735=4736
<4736=4738,4737
<4738=4739
<4739=4741,4740
<4746=4747
<4747=4792,4791,4748
<4748=4790,4749
<4749=4777,4750
<4750=4764,4751
<4751=4758,4752
<4752=4754,4753
<4754=4755
<4755=4757,4756
<4758=4760,4759
<4760=4761
<4761=4763,4762
<4764=4770,4765
<4765=4768,4766
<4766=4767
<4768=4769
<4770=4771
<4771=4773,4772
<4773=4774
<4774=4776,4775
<4777=4783,4778
<4778=4781,4779
<4779=4780
<4781=4782
<4783=4784
<4784=4786,4785
<4786=4787
<4787=4789,4788
<4793=4794
<4794=4841,4840,4795
<4795=4839,4796
<4796=4824,4797
<4797=4811,4798
<4798=4805,4799
<4799=4801,4800
<4801=4802
<4802=4804,4803
<4805=4807,4806
<4807=4808
<4808=4810,4809
<4811=4817,4812
<4812=4815,4813
<4813=4814
<4815=4816
<4817=4818
<4818=4820,4819
<4820=4821
<4821=4823,4822
<4824=4838,4825
<4825=4831,4826
<4826=4829,4827
<4827=4828
<4829=4830
<4831=4832
<4832=4834,4833
<4834=4835
<4835=4837,4836
<4842=4843
<4843=4888,4887,4844
<4844=4886,4845
<4845=4873,4846
<4846=4860,4847
<4847=4854,4848
<4848=4850,4849
<4850=4851
<4851=4853,4852
<4854=4856,4855
<4856=4857
<4857=4859,4858
<4860=4866,4861
<4861=4864,4862
<4862=4863
<4864=4865
<4866=4867
<4867=4869,4868
<4869=4870
<4870=4872,4871
<4873=4879,4874
<4874=4877,4875
<4875=4876
<4877=4878
<4879=4880
<4880=4882,4881
<4882=4883
<4883=4885,4884
<4889=4890
<4890=4894,4891
<4891=4892
<4892=4893
<4894=4895
<4895=4897,4896
<4898=4899
<4899=4914,4913,4900
<4900=4907,4901
<4901=4903,4902
<4903=4904
<4904=4906,4905
<4907=4909,4908
<4909=4910
<4910=4912,4911
<4915=4916
<4916=4918,4917
<4930=4931
<4931=4933,4932
<4933=4934
<4934=4936,4935
<4937=4938
<4938=4945,4939
<4939=4940
<4940=4941
<4941=4943,4942
<4943=4944
<4945=4946
<4998=5007,5006,4999
<4999=5003,5000
<5000=5002,5001
<5003=5005,5004
<5007=5008
<5008=5009
<5009=5021,5010
<5010=5018,5011
<5011=5015,5012
<5012=5014,5013
<5015=5017,5016
<5018=5020,5019
<5021=5023,5022
