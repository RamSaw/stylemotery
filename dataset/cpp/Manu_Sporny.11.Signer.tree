>3	FunctionDef	Signer 
>4	ParameterList	ProfileRef & p , string & content , string & signature
>5	Parameter	 
>6	Identifier	signature
>7	ParameterType	string &
>8	Parameter	 
>9	Identifier	content
>10	ParameterType	string &
>11	Parameter	 
>12	Identifier	p
>13	ParameterType	ProfileRef &
>14	ReturnType	bool
>15	CompoundStatement	 
>16	ReturnStatement	 
>17	Identifier	rval
>18	IfStatement	if ( ds != NULL )
>19	ElseStatement	else
>20	CompoundStatement	 
>21	ExpressionStatement	 
>22	AssignmentExpr	rval = false
>23	Identifier	false
>24	Identifier	rval
>25	ExpressionStatement	 
>26	CallExpression	Exception 
>27	ArgumentList	e
>28	Argument	e
>29	Identifier	e
>30	Callee	Exception 
>31	Identifier	Exception 
>32	IdentifierDeclStatement	 
>33	IdentifierDecl	e = new Exception ( \"Could not sign data. Profile has no private key.\" , \"bitmunk.common.MissingPrivateKey\" )
>34	AssignmentExpr	e = new Exception ( \"Could not sign data. Profile has no private key.\" , \"bitmunk.common.MissingPrivateKey\" )
>35	Expression	\"Could not sign data. Profile has no private key.\" , \"bitmunk.common.MissingPrivateKey\"
>36	PrimaryExpression	\"bitmunk.common.MissingPrivateKey\"
>37	PrimaryExpression	\"Could not sign data. Profile has no private key.\"
>38	Identifier	e
>39	Identifier	e
>40	IdentifierDeclType	ExceptionRef
>41	CompoundStatement	 
>42	ExpressionStatement	 
>43	AssignmentExpr	rval = true
>44	Identifier	true
>45	Identifier	rval
>46	ExpressionStatement	 
>47	AssignmentExpr	signature = Convert 
>48	CallExpression	Convert 
>49	ArgumentList	sig
>50	Argument	length
>51	Identifier	length
>52	Argument	sig
>53	Identifier	sig
>54	Callee	Convert 
>55	Identifier	Convert 
>56	Identifier	signature
>57	ExpressionStatement	 
>58	Identifier	ds
>59	Statement	 
>60	ExpressionStatement	 
>61	CallExpression	ds -> getValue ( sig , length )
>62	ArgumentList	sig
>63	Argument	length
>64	Identifier	length
>65	Argument	sig
>66	Identifier	sig
>67	Callee	ds -> getValue
>68	PtrMemberAccess	ds -> getValue
>69	Identifier	getValue
>70	Identifier	ds
>71	IdentifierDeclStatement	 
>72	IdentifierDecl	sig [ length ]
>73	Identifier	length
>74	Identifier	sig
>75	IdentifierDeclType	char [ length ]
>76	IdentifierDeclStatement	 
>77	IdentifierDecl	length = ds -> getValueLength ( )
>78	AssignmentExpr	length = ds -> getValueLength ( )
>79	CallExpression	ds -> getValueLength ( )
>80	ArgumentList	 
>81	Callee	ds -> getValueLength
>82	PtrMemberAccess	ds -> getValueLength
>83	Identifier	getValueLength
>84	Identifier	ds
>85	Identifier	length
>86	Identifier	length
>87	IdentifierDeclType	unsigned int
>88	ExpressionStatement	 
>89	CallExpression	ds -> update ( content . c_str ( ) , content . length ( ) )
>90	ArgumentList	content . c_str ( )
>91	Argument	content . length ( )
>92	CallExpression	content . length ( )
>93	ArgumentList	 
>94	Callee	content . length
>95	MemberAccess	content . length
>96	Identifier	length
>97	Identifier	content
>98	Argument	content . c_str ( )
>99	CallExpression	content . c_str ( )
>100	ArgumentList	 
>101	Callee	content . c_str
>102	MemberAccess	content . c_str
>103	Identifier	c_str
>104	Identifier	content
>105	Callee	ds -> update
>106	PtrMemberAccess	ds -> update
>107	Identifier	update
>108	Identifier	ds
>109	Condition	 
>110	EqualityExpression	ds != NULL
>111	Identifier	NULL
>112	Identifier	ds
>113	IdentifierDeclStatement	 
>114	IdentifierDecl	* ds = p -> createSignature ( )
>115	AssignmentExpr	* ds = p -> createSignature ( )
>116	CallExpression	p -> createSignature ( )
>117	ArgumentList	 
>118	Callee	p -> createSignature
>119	PtrMemberAccess	p -> createSignature
>120	Identifier	createSignature
>121	Identifier	p
>122	Identifier	ds
>123	Identifier	ds
>124	IdentifierDeclType	DigitalSignature *
>125	IdentifierDeclStatement	 
>126	IdentifierDecl	rval
>127	Identifier	rval
>128	IdentifierDeclType	bool
>150	FunctionDef	Signer 
>151	ParameterList	PublicKeyRef & pkey , string & content , const char * signature
>152	Parameter	 
>153	Identifier	signature
>154	ParameterType	const char *
>155	Parameter	 
>156	Identifier	content
>157	ParameterType	string &
>158	Parameter	 
>159	Identifier	pkey
>160	ParameterType	PublicKeyRef &
>161	ReturnType	bool
>162	CompoundStatement	 
>163	ReturnStatement	 
>164	Identifier	rval
>165	IfStatement	if ( ! ( rval = ds . verify ( data , length ) ) )
>166	CompoundStatement	 
>167	ExpressionStatement	 
>168	CallExpression	Exception 
>169	ArgumentList	e
>170	Argument	e
>171	Identifier	e
>172	Callee	Exception 
>173	Identifier	Exception 
>174	IdentifierDeclStatement	 
>175	IdentifierDecl	e = new Exception ( \"Could not verify data. DigitalSignature could not be created.\" , \"bitmunk.common.BadPublicKey\" )
>176	AssignmentExpr	e = new Exception ( \"Could not verify data. DigitalSignature could not be created.\" , \"bitmunk.common.BadPublicKey\" )
>177	Expression	\"Could not verify data. DigitalSignature could not be created.\" , \"bitmunk.common.BadPublicKey\"
>178	PrimaryExpression	\"bitmunk.common.BadPublicKey\"
>179	PrimaryExpression	\"Could not verify data. DigitalSignature could not be created.\"
>180	Identifier	e
>181	Identifier	e
>182	IdentifierDeclType	ExceptionRef
>183	Condition	 
>184	UnaryOp	! ( rval = ds . verify ( data , length ) )
>185	AssignmentExpr	rval = ds . verify ( data , length )
>186	CallExpression	ds . verify ( data , length )
>187	ArgumentList	data
>188	Argument	length
>189	Identifier	length
>190	Argument	data
>191	Identifier	data
>192	Callee	ds . verify
>193	MemberAccess	ds . verify
>194	Identifier	verify
>195	Identifier	ds
>196	Identifier	rval
>197	UnaryOperator	!
>198	ExpressionStatement	 
>199	CallExpression	Convert 
>200	ArgumentList	signature
>201	Argument	length
>202	Identifier	length
>203	Argument	data
>204	Identifier	data
>205	Argument	length
>206	Identifier	length
>207	Argument	signature
>208	Identifier	signature
>209	Callee	Convert 
>210	Identifier	Convert 
>211	IdentifierDeclStatement	 
>212	IdentifierDecl	data [ length ]
>213	Identifier	length
>214	Identifier	data
>215	IdentifierDeclType	char [ length ]
>216	IdentifierDeclStatement	 
>217	IdentifierDecl	length = strlen ( signature )
>218	AssignmentExpr	length = strlen ( signature )
>219	CallExpression	strlen ( signature )
>220	ArgumentList	signature
>221	Argument	signature
>222	Identifier	signature
>223	Callee	strlen
>224	Identifier	strlen
>225	Identifier	length
>226	Identifier	length
>227	IdentifierDeclType	unsigned int
>228	ExpressionStatement	 
>229	CallExpression	ds . update ( content . c_str ( ) , content . length ( ) )
>230	ArgumentList	content . c_str ( )
>231	Argument	content . length ( )
>232	CallExpression	content . length ( )
>233	ArgumentList	 
>234	Callee	content . length
>235	MemberAccess	content . length
>236	Identifier	length
>237	Identifier	content
>238	Argument	content . c_str ( )
>239	CallExpression	content . c_str ( )
>240	ArgumentList	 
>241	Callee	content . c_str
>242	MemberAccess	content . c_str
>243	Identifier	c_str
>244	Identifier	content
>245	Callee	ds . update
>246	MemberAccess	ds . update
>247	Identifier	update
>248	Identifier	ds
>249	IdentifierDeclStatement	 
>250	IdentifierDecl	ds ( pkey )
>251	Identifier	pkey
>252	Identifier	ds
>253	IdentifierDeclType	DigitalSignature
>254	IdentifierDeclStatement	 
>255	IdentifierDecl	rval
>256	Identifier	rval
>257	IdentifierDeclType	bool
>273	FunctionDef	Signer 
>274	ParameterList	Media & m , string & str
>275	Parameter	 
>276	Identifier	str
>277	ParameterType	string &
>278	Parameter	 
>279	Identifier	m
>280	ParameterType	Media &
>281	ReturnType	void
>282	CompoundStatement	 
>283	ExpressionStatement	 
>284	CallExpression	appendContributorsContent ( m [ \"contributors\" ] , str )
>285	ArgumentList	m [ \"contributors\" ]
>286	Argument	str
>287	Identifier	str
>288	Argument	m [ \"contributors\" ]
>289	ArrayIndexing	m [ \"contributors\" ]
>290	PrimaryExpression	\"contributors\"
>291	Identifier	m
>292	Callee	appendContributorsContent
>293	Identifier	appendContributorsContent
>294	ExpressionStatement	 
>295	CallExpression	m [ \"contributors\" ] -> setType ( Map )
>296	ArgumentList	Map
>297	Argument	Map
>298	Identifier	Map
>299	Callee	m [ \"contributors\" ] -> setType
>300	PtrMemberAccess	m [ \"contributors\" ] -> setType
>301	Identifier	setType
>302	ArrayIndexing	m [ \"contributors\" ]
>303	PrimaryExpression	\"contributors\"
>304	Identifier	m
>305	ExpressionStatement	 
>306	CallExpression	str . append ( m [ \"distribution\" ] -> getString ( ) )
>307	ArgumentList	m [ \"distribution\" ] -> getString ( )
>308	Argument	m [ \"distribution\" ] -> getString ( )
>309	CallExpression	m [ \"distribution\" ] -> getString ( )
>310	ArgumentList	 
>311	Callee	m [ \"distribution\" ] -> getString
>312	PtrMemberAccess	m [ \"distribution\" ] -> getString
>313	Identifier	getString
>314	ArrayIndexing	m [ \"distribution\" ]
>315	PrimaryExpression	\"distribution\"
>316	Identifier	m
>317	Callee	str . append
>318	MemberAccess	str . append
>319	Identifier	append
>320	Identifier	str
>321	ExpressionStatement	 
>322	CallExpression	str . append ( m [ \"ccLicenses\" ] -> getString ( ) )
>323	ArgumentList	m [ \"ccLicenses\" ] -> getString ( )
>324	Argument	m [ \"ccLicenses\" ] -> getString ( )
>325	CallExpression	m [ \"ccLicenses\" ] -> getString ( )
>326	ArgumentList	 
>327	Callee	m [ \"ccLicenses\" ] -> getString
>328	PtrMemberAccess	m [ \"ccLicenses\" ] -> getString
>329	Identifier	getString
>330	ArrayIndexing	m [ \"ccLicenses\" ]
>331	PrimaryExpression	\"ccLicenses\"
>332	Identifier	m
>333	Callee	str . append
>334	MemberAccess	str . append
>335	Identifier	append
>336	Identifier	str
>337	ExpressionStatement	 
>338	CallExpression	str . append ( m [ \"publicDomain\" ] -> getString ( ) )
>339	ArgumentList	m [ \"publicDomain\" ] -> getString ( )
>340	Argument	m [ \"publicDomain\" ] -> getString ( )
>341	CallExpression	m [ \"publicDomain\" ] -> getString ( )
>342	ArgumentList	 
>343	Callee	m [ \"publicDomain\" ] -> getString
>344	PtrMemberAccess	m [ \"publicDomain\" ] -> getString
>345	Identifier	getString
>346	ArrayIndexing	m [ \"publicDomain\" ]
>347	PrimaryExpression	\"publicDomain\"
>348	Identifier	m
>349	Callee	str . append
>350	MemberAccess	str . append
>351	Identifier	append
>352	Identifier	str
>353	ExpressionStatement	 
>354	CallExpression	str . append ( m [ \"releaseDate\" ] -> getString ( ) )
>355	ArgumentList	m [ \"releaseDate\" ] -> getString ( )
>356	Argument	m [ \"releaseDate\" ] -> getString ( )
>357	CallExpression	m [ \"releaseDate\" ] -> getString ( )
>358	ArgumentList	 
>359	Callee	m [ \"releaseDate\" ] -> getString
>360	PtrMemberAccess	m [ \"releaseDate\" ] -> getString
>361	Identifier	getString
>362	ArrayIndexing	m [ \"releaseDate\" ]
>363	PrimaryExpression	\"releaseDate\"
>364	Identifier	m
>365	Callee	str . append
>366	MemberAccess	str . append
>367	Identifier	append
>368	Identifier	str
>369	ExpressionStatement	 
>370	CallExpression	str . append ( m [ \"title\" ] -> getString ( ) )
>371	ArgumentList	m [ \"title\" ] -> getString ( )
>372	Argument	m [ \"title\" ] -> getString ( )
>373	CallExpression	m [ \"title\" ] -> getString ( )
>374	ArgumentList	 
>375	Callee	m [ \"title\" ] -> getString
>376	PtrMemberAccess	m [ \"title\" ] -> getString
>377	Identifier	getString
>378	ArrayIndexing	m [ \"title\" ]
>379	PrimaryExpression	\"title\"
>380	Identifier	m
>381	Callee	str . append
>382	MemberAccess	str . append
>383	Identifier	append
>384	Identifier	str
>385	ExpressionStatement	 
>386	CallExpression	str . append ( m [ \"ownerId\" ] -> getString ( ) )
>387	ArgumentList	m [ \"ownerId\" ] -> getString ( )
>388	Argument	m [ \"ownerId\" ] -> getString ( )
>389	CallExpression	m [ \"ownerId\" ] -> getString ( )
>390	ArgumentList	 
>391	Callee	m [ \"ownerId\" ] -> getString
>392	PtrMemberAccess	m [ \"ownerId\" ] -> getString
>393	Identifier	getString
>394	ArrayIndexing	m [ \"ownerId\" ]
>395	PrimaryExpression	\"ownerId\"
>396	Identifier	m
>397	Callee	str . append
>398	MemberAccess	str . append
>399	Identifier	append
>400	Identifier	str
>401	ExpressionStatement	 
>402	CallExpression	str . append ( m [ \"type\" ] -> getString ( ) )
>403	ArgumentList	m [ \"type\" ] -> getString ( )
>404	Argument	m [ \"type\" ] -> getString ( )
>405	CallExpression	m [ \"type\" ] -> getString ( )
>406	ArgumentList	 
>407	Callee	m [ \"type\" ] -> getString
>408	PtrMemberAccess	m [ \"type\" ] -> getString
>409	Identifier	getString
>410	ArrayIndexing	m [ \"type\" ]
>411	PrimaryExpression	\"type\"
>412	Identifier	m
>413	Callee	str . append
>414	MemberAccess	str . append
>415	Identifier	append
>416	Identifier	str
>417	ExpressionStatement	 
>418	CallExpression	str . append ( m [ \"expiration\" ] -> getString ( ) )
>419	ArgumentList	m [ \"expiration\" ] -> getString ( )
>420	Argument	m [ \"expiration\" ] -> getString ( )
>421	CallExpression	m [ \"expiration\" ] -> getString ( )
>422	ArgumentList	 
>423	Callee	m [ \"expiration\" ] -> getString
>424	PtrMemberAccess	m [ \"expiration\" ] -> getString
>425	Identifier	getString
>426	ArrayIndexing	m [ \"expiration\" ]
>427	PrimaryExpression	\"expiration\"
>428	Identifier	m
>429	Callee	str . append
>430	MemberAccess	str . append
>431	Identifier	append
>432	Identifier	str
>433	ExpressionStatement	 
>434	CallExpression	str . append ( m [ \"buyerId\" ] -> getString ( ) )
>435	ArgumentList	m [ \"buyerId\" ] -> getString ( )
>436	Argument	m [ \"buyerId\" ] -> getString ( )
>437	CallExpression	m [ \"buyerId\" ] -> getString ( )
>438	ArgumentList	 
>439	Callee	m [ \"buyerId\" ] -> getString
>440	PtrMemberAccess	m [ \"buyerId\" ] -> getString
>441	Identifier	getString
>442	ArrayIndexing	m [ \"buyerId\" ]
>443	PrimaryExpression	\"buyerId\"
>444	Identifier	m
>445	Callee	str . append
>446	MemberAccess	str . append
>447	Identifier	append
>448	Identifier	str
>449	ExpressionStatement	 
>450	CallExpression	str . append ( m [ \"id\" ] -> getString ( ) )
>451	ArgumentList	m [ \"id\" ] -> getString ( )
>452	Argument	m [ \"id\" ] -> getString ( )
>453	CallExpression	m [ \"id\" ] -> getString ( )
>454	ArgumentList	 
>455	Callee	m [ \"id\" ] -> getString
>456	PtrMemberAccess	m [ \"id\" ] -> getString
>457	Identifier	getString
>458	ArrayIndexing	m [ \"id\" ]
>459	PrimaryExpression	\"id\"
>460	Identifier	m
>461	Callee	str . append
>462	MemberAccess	str . append
>463	Identifier	append
>464	Identifier	str
>483	FunctionDef	Signer 
>484	ParameterList	Media & m , string & str
>485	Parameter	 
>486	Identifier	str
>487	ParameterType	string &
>488	Parameter	 
>489	Identifier	m
>490	ParameterType	Media &
>491	ReturnType	void
>492	CompoundStatement	 
>493	CompoundStatement	 
>494	WhileStatement	while ( pi -> hasNext ( ) )
>495	CompoundStatement	 
>496	ExpressionStatement	 
>497	CallExpression	appendPayeeContent ( p , str )
>498	ArgumentList	p
>499	Argument	str
>500	Identifier	str
>501	Argument	p
>502	Identifier	p
>503	Callee	appendPayeeContent
>504	Identifier	appendPayeeContent
>505	IdentifierDeclStatement	 
>506	IdentifierDecl	& p = pi -> next ( )
>507	AssignmentExpr	& p = pi -> next ( )
>508	CallExpression	pi -> next ( )
>509	ArgumentList	 
>510	Callee	pi -> next
>511	PtrMemberAccess	pi -> next
>512	Identifier	next
>513	Identifier	pi
>514	Identifier	p
>515	Identifier	p
>516	IdentifierDeclType	Payee &
>517	Condition	 
>518	CallExpression	pi -> hasNext ( )
>519	ArgumentList	 
>520	Callee	pi -> hasNext
>521	PtrMemberAccess	pi -> hasNext
>522	Identifier	hasNext
>523	Identifier	pi
>524	ExpressionStatement	 
>525	AssignmentExpr	pi = m [ \"piecePayees\" ] . getIterator ( )
>526	CallExpression	m [ \"piecePayees\" ] . getIterator ( )
>527	ArgumentList	 
>528	Callee	m [ \"piecePayees\" ] . getIterator
>529	MemberAccess	m [ \"piecePayees\" ] . getIterator
>530	Identifier	getIterator
>531	ArrayIndexing	m [ \"piecePayees\" ]
>532	PrimaryExpression	\"piecePayees\"
>533	Identifier	m
>534	Identifier	pi
>535	ExpressionStatement	 
>536	CallExpression	m [ \"piecePayees\" ] -> setType ( Array )
>537	ArgumentList	Array
>538	Argument	Array
>539	Identifier	Array
>540	Callee	m [ \"piecePayees\" ] -> setType
>541	PtrMemberAccess	m [ \"piecePayees\" ] -> setType
>542	Identifier	setType
>543	ArrayIndexing	m [ \"piecePayees\" ]
>544	PrimaryExpression	\"piecePayees\"
>545	Identifier	m
>546	ExpressionStatement	 
>547	CallExpression	str . append ( m [ \"licenseAmount\" ] -> getString ( ) )
>548	ArgumentList	m [ \"licenseAmount\" ] -> getString ( )
>549	Argument	m [ \"licenseAmount\" ] -> getString ( )
>550	CallExpression	m [ \"licenseAmount\" ] -> getString ( )
>551	ArgumentList	 
>552	Callee	m [ \"licenseAmount\" ] -> getString
>553	PtrMemberAccess	m [ \"licenseAmount\" ] -> getString
>554	Identifier	getString
>555	ArrayIndexing	m [ \"licenseAmount\" ]
>556	PrimaryExpression	\"licenseAmount\"
>557	Identifier	m
>558	Callee	str . append
>559	MemberAccess	str . append
>560	Identifier	append
>561	Identifier	str
>562	WhileStatement	while ( pi -> hasNext ( ) )
>563	CompoundStatement	 
>564	ExpressionStatement	 
>565	CallExpression	appendPayeeRuleContent ( pr , str )
>566	ArgumentList	pr
>567	Argument	str
>568	Identifier	str
>569	Argument	pr
>570	Identifier	pr
>571	Callee	appendPayeeRuleContent
>572	Identifier	appendPayeeRuleContent
>573	IdentifierDeclStatement	 
>574	IdentifierDecl	& pr = pi -> next ( )
>575	AssignmentExpr	& pr = pi -> next ( )
>576	CallExpression	pi -> next ( )
>577	ArgumentList	 
>578	Callee	pi -> next
>579	PtrMemberAccess	pi -> next
>580	Identifier	next
>581	Identifier	pi
>582	Identifier	pr
>583	Identifier	pr
>584	IdentifierDeclType	PayeeRule &
>585	Condition	 
>586	CallExpression	pi -> hasNext ( )
>587	ArgumentList	 
>588	Callee	pi -> hasNext
>589	PtrMemberAccess	pi -> hasNext
>590	Identifier	hasNext
>591	Identifier	pi
>592	ExpressionStatement	 
>593	AssignmentExpr	pi = m [ \"payeeRules\" ] . getIterator ( )
>594	CallExpression	m [ \"payeeRules\" ] . getIterator ( )
>595	ArgumentList	 
>596	Callee	m [ \"payeeRules\" ] . getIterator
>597	MemberAccess	m [ \"payeeRules\" ] . getIterator
>598	Identifier	getIterator
>599	ArrayIndexing	m [ \"payeeRules\" ]
>600	PrimaryExpression	\"payeeRules\"
>601	Identifier	m
>602	Identifier	pi
>603	ExpressionStatement	 
>604	CallExpression	m [ \"payeeRules\" ] -> setType ( Array )
>605	ArgumentList	Array
>606	Argument	Array
>607	Identifier	Array
>608	Callee	m [ \"payeeRules\" ] -> setType
>609	PtrMemberAccess	m [ \"payeeRules\" ] -> setType
>610	Identifier	setType
>611	ArrayIndexing	m [ \"payeeRules\" ]
>612	PrimaryExpression	\"payeeRules\"
>613	Identifier	m
>614	WhileStatement	while ( pi -> hasNext ( ) )
>615	CompoundStatement	 
>616	ExpressionStatement	 
>617	CallExpression	appendPayeeContent ( p , str )
>618	ArgumentList	p
>619	Argument	str
>620	Identifier	str
>621	Argument	p
>622	Identifier	p
>623	Callee	appendPayeeContent
>624	Identifier	appendPayeeContent
>625	IdentifierDeclStatement	 
>626	IdentifierDecl	& p = pi -> next ( )
>627	AssignmentExpr	& p = pi -> next ( )
>628	CallExpression	pi -> next ( )
>629	ArgumentList	 
>630	Callee	pi -> next
>631	PtrMemberAccess	pi -> next
>632	Identifier	next
>633	Identifier	pi
>634	Identifier	p
>635	Identifier	p
>636	IdentifierDeclType	Payee &
>637	Condition	 
>638	CallExpression	pi -> hasNext ( )
>639	ArgumentList	 
>640	Callee	pi -> hasNext
>641	PtrMemberAccess	pi -> hasNext
>642	Identifier	hasNext
>643	Identifier	pi
>644	IdentifierDeclStatement	 
>645	IdentifierDecl	pi = m [ \"payees\" ] . getIterator ( )
>646	AssignmentExpr	pi = m [ \"payees\" ] . getIterator ( )
>647	CallExpression	m [ \"payees\" ] . getIterator ( )
>648	ArgumentList	 
>649	Callee	m [ \"payees\" ] . getIterator
>650	MemberAccess	m [ \"payees\" ] . getIterator
>651	Identifier	getIterator
>652	ArrayIndexing	m [ \"payees\" ]
>653	PrimaryExpression	\"payees\"
>654	Identifier	m
>655	Identifier	pi
>656	Identifier	pi
>657	IdentifierDeclType	PayeeIterator
>658	ExpressionStatement	 
>659	CallExpression	m [ \"payees\" ] -> setType ( Array )
>660	ArgumentList	Array
>661	Argument	Array
>662	Identifier	Array
>663	Callee	m [ \"payees\" ] -> setType
>664	PtrMemberAccess	m [ \"payees\" ] -> setType
>665	Identifier	setType
>666	ArrayIndexing	m [ \"payees\" ]
>667	PrimaryExpression	\"payees\"
>668	Identifier	m
>669	IfStatement	if ( strcmp ( m [ \"type\" ] -> getString ( ) , \"collection\" ) == 0 )
>670	CompoundStatement	 
>671	WhileStatement	while ( gi -> hasNext ( ) )
>672	CompoundStatement	 
>673	WhileStatement	while ( mi -> hasNext ( ) )
>674	CompoundStatement	 
>675	ExpressionStatement	 
>676	CallExpression	appendBasicMediaContent ( media , str )
>677	ArgumentList	media
>678	Argument	str
>679	Identifier	str
>680	Argument	media
>681	Identifier	media
>682	Callee	appendBasicMediaContent
>683	Identifier	appendBasicMediaContent
>684	IdentifierDeclStatement	 
>685	IdentifierDecl	& media = mi -> next ( )
>686	AssignmentExpr	& media = mi -> next ( )
>687	CallExpression	mi -> next ( )
>688	ArgumentList	 
>689	Callee	mi -> next
>690	PtrMemberAccess	mi -> next
>691	Identifier	next
>692	Identifier	mi
>693	Identifier	media
>694	Identifier	media
>695	IdentifierDeclType	Media &
>696	Condition	 
>697	CallExpression	mi -> hasNext ( )
>698	ArgumentList	 
>699	Callee	mi -> hasNext
>700	PtrMemberAccess	mi -> hasNext
>701	Identifier	hasNext
>702	Identifier	mi
>703	IdentifierDeclStatement	 
>704	IdentifierDecl	mi = group . getIterator ( )
>705	AssignmentExpr	mi = group . getIterator ( )
>706	CallExpression	group . getIterator ( )
>707	ArgumentList	 
>708	Callee	group . getIterator
>709	MemberAccess	group . getIterator
>710	Identifier	getIterator
>711	Identifier	group
>712	Identifier	mi
>713	Identifier	mi
>714	IdentifierDeclType	MediaIterator
>715	IdentifierDeclStatement	 
>716	IdentifierDecl	& group = gi -> next ( )
>717	AssignmentExpr	& group = gi -> next ( )
>718	CallExpression	gi -> next ( )
>719	ArgumentList	 
>720	Callee	gi -> next
>721	PtrMemberAccess	gi -> next
>722	Identifier	next
>723	Identifier	gi
>724	Identifier	group
>725	Identifier	group
>726	IdentifierDeclType	DynamicObject &
>727	Condition	 
>728	CallExpression	gi -> hasNext ( )
>729	ArgumentList	 
>730	Callee	gi -> hasNext
>731	PtrMemberAccess	gi -> hasNext
>732	Identifier	hasNext
>733	Identifier	gi
>734	IdentifierDeclStatement	 
>735	IdentifierDecl	gi = m [ \"contents\" ] . getIterator ( )
>736	AssignmentExpr	gi = m [ \"contents\" ] . getIterator ( )
>737	CallExpression	m [ \"contents\" ] . getIterator ( )
>738	ArgumentList	 
>739	Callee	m [ \"contents\" ] . getIterator
>740	MemberAccess	m [ \"contents\" ] . getIterator
>741	Identifier	getIterator
>742	ArrayIndexing	m [ \"contents\" ]
>743	PrimaryExpression	\"contents\"
>744	Identifier	m
>745	Identifier	gi
>746	Identifier	gi
>747	IdentifierDeclType	DynamicObjectIterator
>748	Condition	 
>749	EqualityExpression	strcmp ( m [ \"type\" ] -> getString ( ) , \"collection\" ) == 0
>750	PrimaryExpression	0
>751	CallExpression	strcmp ( m [ \"type\" ] -> getString ( ) , \"collection\" )
>752	ArgumentList	m [ \"type\" ] -> getString ( )
>753	Argument	\"collection\"
>754	PrimaryExpression	\"collection\"
>755	Argument	m [ \"type\" ] -> getString ( )
>756	CallExpression	m [ \"type\" ] -> getString ( )
>757	ArgumentList	 
>758	Callee	m [ \"type\" ] -> getString
>759	PtrMemberAccess	m [ \"type\" ] -> getString
>760	Identifier	getString
>761	ArrayIndexing	m [ \"type\" ]
>762	PrimaryExpression	\"type\"
>763	Identifier	m
>764	Callee	strcmp
>765	Identifier	strcmp
>766	ExpressionStatement	 
>767	CallExpression	appendBasicMediaContent ( m , str )
>768	ArgumentList	m
>769	Argument	str
>770	Identifier	str
>771	Argument	m
>772	Identifier	m
>773	Callee	appendBasicMediaContent
>774	Identifier	appendBasicMediaContent
>807	FunctionDef	Signer 
>808	ParameterList	Payee & p , string & str
>809	Parameter	 
>810	Identifier	str
>811	ParameterType	string &
>812	Parameter	 
>813	Identifier	p
>814	ParameterType	Payee &
>815	ReturnType	void
>816	CompoundStatement	 
>817	IfStatement	if ( p -> hasMember ( \"description\" ) )
>818	CompoundStatement	 
>819	ExpressionStatement	 
>820	CallExpression	str . append ( p [ \"description\" ] -> getString ( ) )
>821	ArgumentList	p [ \"description\" ] -> getString ( )
>822	Argument	p [ \"description\" ] -> getString ( )
>823	CallExpression	p [ \"description\" ] -> getString ( )
>824	ArgumentList	 
>825	Callee	p [ \"description\" ] -> getString
>826	PtrMemberAccess	p [ \"description\" ] -> getString
>827	Identifier	getString
>828	ArrayIndexing	p [ \"description\" ]
>829	PrimaryExpression	\"description\"
>830	Identifier	p
>831	Callee	str . append
>832	MemberAccess	str . append
>833	Identifier	append
>834	Identifier	str
>835	Condition	 
>836	CallExpression	p -> hasMember ( \"description\" )
>837	ArgumentList	\"description\"
>838	Argument	\"description\"
>839	PrimaryExpression	\"description\"
>840	Callee	p -> hasMember
>841	PtrMemberAccess	p -> hasMember
>842	Identifier	hasMember
>843	Identifier	p
>844	ExpressionStatement	 
>845	CallExpression	str . push_back ( p [ \"taxExempt\" ] -> getBoolean ( ) ? '1' 
>846	ArgumentList	p [ \"taxExempt\" ] -> getBoolean ( ) ? '1' 
>847	Argument	p [ \"taxExempt\" ] -> getBoolean ( ) ? '1' 
>848	ConditionalExpression	p [ \"taxExempt\" ] -> getBoolean ( ) ? '1' 
>849	PrimaryExpression	'0'
>850	PrimaryExpression	'1'
>851	Condition	p [ \"taxExempt\" ] -> getBoolean ( )
>852	CallExpression	p [ \"taxExempt\" ] -> getBoolean ( )
>853	ArgumentList	 
>854	Callee	p [ \"taxExempt\" ] -> getBoolean
>855	PtrMemberAccess	p [ \"taxExempt\" ] -> getBoolean
>856	Identifier	getBoolean
>857	ArrayIndexing	p [ \"taxExempt\" ]
>858	PrimaryExpression	\"taxExempt\"
>859	Identifier	p
>860	Callee	str . push_back
>861	MemberAccess	str . push_back
>862	Identifier	push_back
>863	Identifier	str
>864	IfStatement	if ( p -> hasMember ( \"nontaxable\" ) )
>865	CompoundStatement	 
>866	ExpressionStatement	 
>867	AssignmentExpr	p [ \"taxExempt\" ] = p [ \"nontaxable\" ]
>868	ArrayIndexing	p [ \"nontaxable\" ]
>869	PrimaryExpression	\"nontaxable\"
>870	Identifier	p
>871	ArrayIndexing	p [ \"taxExempt\" ]
>872	PrimaryExpression	\"taxExempt\"
>873	Identifier	p
>874	Condition	 
>875	CallExpression	p -> hasMember ( \"nontaxable\" )
>876	ArgumentList	\"nontaxable\"
>877	Argument	\"nontaxable\"
>878	PrimaryExpression	\"nontaxable\"
>879	Callee	p -> hasMember
>880	PtrMemberAccess	p -> hasMember
>881	Identifier	hasMember
>882	Identifier	p
>883	IfStatement	if ( strcmp ( amountType , PAYEE_AMOUNT_TYPE_FLATFEE ) == 0 )
>884	ElseStatement	else
>885	CompoundStatement	 
>886	ExpressionStatement	 
>887	CallExpression	str . append ( p [ \"percentage\" ] -> getString ( ) )
>888	ArgumentList	p [ \"percentage\" ] -> getString ( )
>889	Argument	p [ \"percentage\" ] -> getString ( )
>890	CallExpression	p [ \"percentage\" ] -> getString ( )
>891	ArgumentList	 
>892	Callee	p [ \"percentage\" ] -> getString
>893	PtrMemberAccess	p [ \"percentage\" ] -> getString
>894	Identifier	getString
>895	ArrayIndexing	p [ \"percentage\" ]
>896	PrimaryExpression	\"percentage\"
>897	Identifier	p
>898	Callee	str . append
>899	MemberAccess	str . append
>900	Identifier	append
>901	Identifier	str
>902	IfStatement	if ( p [ \"amountResolved\" ] -> getBoolean ( ) )
>903	ElseStatement	else
>904	CompoundStatement	 
>905	ExpressionStatement	 
>906	CallExpression	str . push_back ( '0' )
>907	ArgumentList	'0'
>908	Argument	'0'
>909	PrimaryExpression	'0'
>910	Callee	str . push_back
>911	MemberAccess	str . push_back
>912	Identifier	push_back
>913	Identifier	str
>914	CompoundStatement	 
>915	ExpressionStatement	 
>916	CallExpression	str . append ( p [ \"amount\" ] -> getString ( ) )
>917	ArgumentList	p [ \"amount\" ] -> getString ( )
>918	Argument	p [ \"amount\" ] -> getString ( )
>919	CallExpression	p [ \"amount\" ] -> getString ( )
>920	ArgumentList	 
>921	Callee	p [ \"amount\" ] -> getString
>922	PtrMemberAccess	p [ \"amount\" ] -> getString
>923	Identifier	getString
>924	ArrayIndexing	p [ \"amount\" ]
>925	PrimaryExpression	\"amount\"
>926	Identifier	p
>927	Callee	str . append
>928	MemberAccess	str . append
>929	Identifier	append
>930	Identifier	str
>931	ExpressionStatement	 
>932	CallExpression	str . push_back ( '1' )
>933	ArgumentList	'1'
>934	Argument	'1'
>935	PrimaryExpression	'1'
>936	Callee	str . push_back
>937	MemberAccess	str . push_back
>938	Identifier	push_back
>939	Identifier	str
>940	Condition	 
>941	CallExpression	p [ \"amountResolved\" ] -> getBoolean ( )
>942	ArgumentList	 
>943	Callee	p [ \"amountResolved\" ] -> getBoolean
>944	PtrMemberAccess	p [ \"amountResolved\" ] -> getBoolean
>945	Identifier	getBoolean
>946	ArrayIndexing	p [ \"amountResolved\" ]
>947	PrimaryExpression	\"amountResolved\"
>948	Identifier	p
>949	CompoundStatement	 
>950	ExpressionStatement	 
>951	CallExpression	str . append ( p [ \"amount\" ] -> getString ( ) )
>952	ArgumentList	p [ \"amount\" ] -> getString ( )
>953	Argument	p [ \"amount\" ] -> getString ( )
>954	CallExpression	p [ \"amount\" ] -> getString ( )
>955	ArgumentList	 
>956	Callee	p [ \"amount\" ] -> getString
>957	PtrMemberAccess	p [ \"amount\" ] -> getString
>958	Identifier	getString
>959	ArrayIndexing	p [ \"amount\" ]
>960	PrimaryExpression	\"amount\"
>961	Identifier	p
>962	Callee	str . append
>963	MemberAccess	str . append
>964	Identifier	append
>965	Identifier	str
>966	Condition	 
>967	EqualityExpression	strcmp ( amountType , PAYEE_AMOUNT_TYPE_FLATFEE ) == 0
>968	PrimaryExpression	0
>969	CallExpression	strcmp ( amountType , PAYEE_AMOUNT_TYPE_FLATFEE )
>970	ArgumentList	amountType
>971	Argument	PAYEE_AMOUNT_TYPE_FLATFEE
>972	Identifier	PAYEE_AMOUNT_TYPE_FLATFEE
>973	Argument	amountType
>974	Identifier	amountType
>975	Callee	strcmp
>976	Identifier	strcmp
>977	ExpressionStatement	 
>978	CallExpression	str . append ( amountType )
>979	ArgumentList	amountType
>980	Argument	amountType
>981	Identifier	amountType
>982	Callee	str . append
>983	MemberAccess	str . append
>984	Identifier	append
>985	Identifier	str
>986	IdentifierDeclStatement	 
>987	IdentifierDecl	* amountType = p [ \"amountType\" ] -> getString ( )
>988	AssignmentExpr	* amountType = p [ \"amountType\" ] -> getString ( )
>989	CallExpression	p [ \"amountType\" ] -> getString ( )
>990	ArgumentList	 
>991	Callee	p [ \"amountType\" ] -> getString
>992	PtrMemberAccess	p [ \"amountType\" ] -> getString
>993	Identifier	getString
>994	ArrayIndexing	p [ \"amountType\" ]
>995	PrimaryExpression	\"amountType\"
>996	Identifier	p
>997	Identifier	amountType
>998	Identifier	amountType
>999	IdentifierDeclType	const char *
>1000	ExpressionStatement	 
>1001	CallExpression	str . append ( p [ \"id\" ] -> getString ( ) )
>1002	ArgumentList	p [ \"id\" ] -> getString ( )
>1003	Argument	p [ \"id\" ] -> getString ( )
>1004	CallExpression	p [ \"id\" ] -> getString ( )
>1005	ArgumentList	 
>1006	Callee	p [ \"id\" ] -> getString
>1007	PtrMemberAccess	p [ \"id\" ] -> getString
>1008	Identifier	getString
>1009	ArrayIndexing	p [ \"id\" ]
>1010	PrimaryExpression	\"id\"
>1011	Identifier	p
>1012	Callee	str . append
>1013	MemberAccess	str . append
>1014	Identifier	append
>1015	Identifier	str
>1034	FunctionDef	Signer 
>1035	ParameterList	PayeeRule & pr , string & str
>1036	Parameter	 
>1037	Identifier	str
>1038	ParameterType	string &
>1039	Parameter	 
>1040	Identifier	pr
>1041	ParameterType	PayeeRule &
>1042	ReturnType	void
>1043	CompoundStatement	 
>1044	ExpressionStatement	 
>1045	CallExpression	str . append ( pr [ \"value\" ] -> getString ( ) )
>1046	ArgumentList	pr [ \"value\" ] -> getString ( )
>1047	Argument	pr [ \"value\" ] -> getString ( )
>1048	CallExpression	pr [ \"value\" ] -> getString ( )
>1049	ArgumentList	 
>1050	Callee	pr [ \"value\" ] -> getString
>1051	PtrMemberAccess	pr [ \"value\" ] -> getString
>1052	Identifier	getString
>1053	ArrayIndexing	pr [ \"value\" ]
>1054	PrimaryExpression	\"value\"
>1055	Identifier	pr
>1056	Callee	str . append
>1057	MemberAccess	str . append
>1058	Identifier	append
>1059	Identifier	str
>1060	ExpressionStatement	 
>1061	CallExpression	str . append ( pr [ \"type\" ] -> getString ( ) )
>1062	ArgumentList	pr [ \"type\" ] -> getString ( )
>1063	Argument	pr [ \"type\" ] -> getString ( )
>1064	CallExpression	pr [ \"type\" ] -> getString ( )
>1065	ArgumentList	 
>1066	Callee	pr [ \"type\" ] -> getString
>1067	PtrMemberAccess	pr [ \"type\" ] -> getString
>1068	Identifier	getString
>1069	ArrayIndexing	pr [ \"type\" ]
>1070	PrimaryExpression	\"type\"
>1071	Identifier	pr
>1072	Callee	str . append
>1073	MemberAccess	str . append
>1074	Identifier	append
>1075	Identifier	str
>1076	ExpressionStatement	 
>1077	CallExpression	str . append ( pr [ \"mediaId\" ] -> getString ( ) )
>1078	ArgumentList	pr [ \"mediaId\" ] -> getString ( )
>1079	Argument	pr [ \"mediaId\" ] -> getString ( )
>1080	CallExpression	pr [ \"mediaId\" ] -> getString ( )
>1081	ArgumentList	 
>1082	Callee	pr [ \"mediaId\" ] -> getString
>1083	PtrMemberAccess	pr [ \"mediaId\" ] -> getString
>1084	Identifier	getString
>1085	ArrayIndexing	pr [ \"mediaId\" ]
>1086	PrimaryExpression	\"mediaId\"
>1087	Identifier	pr
>1088	Callee	str . append
>1089	MemberAccess	str . append
>1090	Identifier	append
>1091	Identifier	str
>1102	FunctionDef	Signer 
>1103	ParameterList	DynamicObject & contributors , string & str
>1104	Parameter	 
>1105	Identifier	str
>1106	ParameterType	string &
>1107	Parameter	 
>1108	Identifier	contributors
>1109	ParameterType	DynamicObject &
>1110	ReturnType	void
>1111	CompoundStatement	 
>1112	WhileStatement	while ( ti -> hasNext ( ) )
>1113	CompoundStatement	 
>1114	WhileStatement	while ( ci -> hasNext ( ) )
>1115	CompoundStatement	 
>1116	ExpressionStatement	 
>1117	CallExpression	str . append ( c [ \"type\" ] -> getString ( ) )
>1118	ArgumentList	c [ \"type\" ] -> getString ( )
>1119	Argument	c [ \"type\" ] -> getString ( )
>1120	CallExpression	c [ \"type\" ] -> getString ( )
>1121	ArgumentList	 
>1122	Callee	c [ \"type\" ] -> getString
>1123	PtrMemberAccess	c [ \"type\" ] -> getString
>1124	Identifier	getString
>1125	ArrayIndexing	c [ \"type\" ]
>1126	PrimaryExpression	\"type\"
>1127	Identifier	c
>1128	Callee	str . append
>1129	MemberAccess	str . append
>1130	Identifier	append
>1131	Identifier	str
>1132	ExpressionStatement	 
>1133	CallExpression	str . append ( c [ \"description\" ] -> getString ( ) )
>1134	ArgumentList	c [ \"description\" ] -> getString ( )
>1135	Argument	c [ \"description\" ] -> getString ( )
>1136	CallExpression	c [ \"description\" ] -> getString ( )
>1137	ArgumentList	 
>1138	Callee	c [ \"description\" ] -> getString
>1139	PtrMemberAccess	c [ \"description\" ] -> getString
>1140	Identifier	getString
>1141	ArrayIndexing	c [ \"description\" ]
>1142	PrimaryExpression	\"description\"
>1143	Identifier	c
>1144	Callee	str . append
>1145	MemberAccess	str . append
>1146	Identifier	append
>1147	Identifier	str
>1148	ExpressionStatement	 
>1149	CallExpression	str . append ( c [ \"roleId\" ] -> getString ( ) )
>1150	ArgumentList	c [ \"roleId\" ] -> getString ( )
>1151	Argument	c [ \"roleId\" ] -> getString ( )
>1152	CallExpression	c [ \"roleId\" ] -> getString ( )
>1153	ArgumentList	 
>1154	Callee	c [ \"roleId\" ] -> getString
>1155	PtrMemberAccess	c [ \"roleId\" ] -> getString
>1156	Identifier	getString
>1157	ArrayIndexing	c [ \"roleId\" ]
>1158	PrimaryExpression	\"roleId\"
>1159	Identifier	c
>1160	Callee	str . append
>1161	MemberAccess	str . append
>1162	Identifier	append
>1163	Identifier	str
>1164	ExpressionStatement	 
>1165	CallExpression	str . append ( c [ \"role\" ] -> getString ( ) )
>1166	ArgumentList	c [ \"role\" ] -> getString ( )
>1167	Argument	c [ \"role\" ] -> getString ( )
>1168	CallExpression	c [ \"role\" ] -> getString ( )
>1169	ArgumentList	 
>1170	Callee	c [ \"role\" ] -> getString
>1171	PtrMemberAccess	c [ \"role\" ] -> getString
>1172	Identifier	getString
>1173	ArrayIndexing	c [ \"role\" ]
>1174	PrimaryExpression	\"role\"
>1175	Identifier	c
>1176	Callee	str . append
>1177	MemberAccess	str . append
>1178	Identifier	append
>1179	Identifier	str
>1180	ExpressionStatement	 
>1181	CallExpression	str . append ( c [ \"ownerId\" ] -> getString ( ) )
>1182	ArgumentList	c [ \"ownerId\" ] -> getString ( )
>1183	Argument	c [ \"ownerId\" ] -> getString ( )
>1184	CallExpression	c [ \"ownerId\" ] -> getString ( )
>1185	ArgumentList	 
>1186	Callee	c [ \"ownerId\" ] -> getString
>1187	PtrMemberAccess	c [ \"ownerId\" ] -> getString
>1188	Identifier	getString
>1189	ArrayIndexing	c [ \"ownerId\" ]
>1190	PrimaryExpression	\"ownerId\"
>1191	Identifier	c
>1192	Callee	str . append
>1193	MemberAccess	str . append
>1194	Identifier	append
>1195	Identifier	str
>1196	ExpressionStatement	 
>1197	CallExpression	str . append ( c [ \"name\" ] -> getString ( ) )
>1198	ArgumentList	c [ \"name\" ] -> getString ( )
>1199	Argument	c [ \"name\" ] -> getString ( )
>1200	CallExpression	c [ \"name\" ] -> getString ( )
>1201	ArgumentList	 
>1202	Callee	c [ \"name\" ] -> getString
>1203	PtrMemberAccess	c [ \"name\" ] -> getString
>1204	Identifier	getString
>1205	ArrayIndexing	c [ \"name\" ]
>1206	PrimaryExpression	\"name\"
>1207	Identifier	c
>1208	Callee	str . append
>1209	MemberAccess	str . append
>1210	Identifier	append
>1211	Identifier	str
>1212	ExpressionStatement	 
>1213	CallExpression	str . append ( c [ \"id\" ] -> getString ( ) )
>1214	ArgumentList	c [ \"id\" ] -> getString ( )
>1215	Argument	c [ \"id\" ] -> getString ( )
>1216	CallExpression	c [ \"id\" ] -> getString ( )
>1217	ArgumentList	 
>1218	Callee	c [ \"id\" ] -> getString
>1219	PtrMemberAccess	c [ \"id\" ] -> getString
>1220	Identifier	getString
>1221	ArrayIndexing	c [ \"id\" ]
>1222	PrimaryExpression	\"id\"
>1223	Identifier	c
>1224	Callee	str . append
>1225	MemberAccess	str . append
>1226	Identifier	append
>1227	Identifier	str
>1228	IdentifierDeclStatement	 
>1229	IdentifierDecl	& c = ci -> next ( )
>1230	AssignmentExpr	& c = ci -> next ( )
>1231	CallExpression	ci -> next ( )
>1232	ArgumentList	 
>1233	Callee	ci -> next
>1234	PtrMemberAccess	ci -> next
>1235	Identifier	next
>1236	Identifier	ci
>1237	Identifier	c
>1238	Identifier	c
>1239	IdentifierDeclType	DynamicObject &
>1240	Condition	 
>1241	CallExpression	ci -> hasNext ( )
>1242	ArgumentList	 
>1243	Callee	ci -> hasNext
>1244	PtrMemberAccess	ci -> hasNext
>1245	Identifier	hasNext
>1246	Identifier	ci
>1247	IdentifierDeclStatement	 
>1248	IdentifierDecl	ci = type . getIterator ( )
>1249	AssignmentExpr	ci = type . getIterator ( )
>1250	CallExpression	type . getIterator ( )
>1251	ArgumentList	 
>1252	Callee	type . getIterator
>1253	MemberAccess	type . getIterator
>1254	Identifier	getIterator
>1255	Identifier	type
>1256	Identifier	ci
>1257	Identifier	ci
>1258	IdentifierDeclType	DynamicObjectIterator
>1259	ExpressionStatement	 
>1260	CallExpression	str . append ( ti -> getName ( ) )
>1261	ArgumentList	ti -> getName ( )
>1262	Argument	ti -> getName ( )
>1263	CallExpression	ti -> getName ( )
>1264	ArgumentList	 
>1265	Callee	ti -> getName
>1266	PtrMemberAccess	ti -> getName
>1267	Identifier	getName
>1268	Identifier	ti
>1269	Callee	str . append
>1270	MemberAccess	str . append
>1271	Identifier	append
>1272	Identifier	str
>1273	IdentifierDeclStatement	 
>1274	IdentifierDecl	& type = ti -> next ( )
>1275	AssignmentExpr	& type = ti -> next ( )
>1276	CallExpression	ti -> next ( )
>1277	ArgumentList	 
>1278	Callee	ti -> next
>1279	PtrMemberAccess	ti -> next
>1280	Identifier	next
>1281	Identifier	ti
>1282	Identifier	type
>1283	Identifier	type
>1284	IdentifierDeclType	DynamicObject &
>1285	Condition	 
>1286	CallExpression	ti -> hasNext ( )
>1287	ArgumentList	 
>1288	Callee	ti -> hasNext
>1289	PtrMemberAccess	ti -> hasNext
>1290	Identifier	hasNext
>1291	Identifier	ti
>1292	IdentifierDeclStatement	 
>1293	IdentifierDecl	ti = contributors . getIterator ( )
>1294	AssignmentExpr	ti = contributors . getIterator ( )
>1295	CallExpression	contributors . getIterator ( )
>1296	ArgumentList	 
>1297	Callee	contributors . getIterator
>1298	MemberAccess	contributors . getIterator
>1299	Identifier	getIterator
>1300	Identifier	contributors
>1301	Identifier	ti
>1302	Identifier	ti
>1303	IdentifierDeclType	DynamicObjectIterator
>1331	FunctionDef	Signer 
>1332	ParameterList	ContractSection & cs , string & str
>1333	Parameter	 
>1334	Identifier	str
>1335	ParameterType	string &
>1336	Parameter	 
>1337	Identifier	cs
>1338	ParameterType	ContractSection &
>1339	ReturnType	void
>1340	CompoundStatement	 
>1341	ExpressionStatement	 
>1342	CallExpression	appendWareContent ( cs [ \"ware\" ] , str )
>1343	ArgumentList	cs [ \"ware\" ]
>1344	Argument	str
>1345	Identifier	str
>1346	Argument	cs [ \"ware\" ]
>1347	ArrayIndexing	cs [ \"ware\" ]
>1348	PrimaryExpression	\"ware\"
>1349	Identifier	cs
>1350	Callee	appendWareContent
>1351	Identifier	appendWareContent
>1352	WhileStatement	while ( i -> hasNext ( ) )
>1353	CompoundStatement	 
>1354	ExpressionStatement	 
>1355	CallExpression	str . append ( next -> getString ( ) )
>1356	ArgumentList	next -> getString ( )
>1357	Argument	next -> getString ( )
>1358	CallExpression	next -> getString ( )
>1359	ArgumentList	 
>1360	Callee	next -> getString
>1361	PtrMemberAccess	next -> getString
>1362	Identifier	getString
>1363	Identifier	next
>1364	Callee	str . append
>1365	MemberAccess	str . append
>1366	Identifier	append
>1367	Identifier	str
>1368	IdentifierDeclStatement	 
>1369	IdentifierDecl	& next = i -> next ( )
>1370	AssignmentExpr	& next = i -> next ( )
>1371	CallExpression	i -> next ( )
>1372	ArgumentList	 
>1373	Callee	i -> next
>1374	PtrMemberAccess	i -> next
>1375	Identifier	next
>1376	Identifier	i
>1377	Identifier	next
>1378	Identifier	next
>1379	IdentifierDeclType	DynamicObject &
>1380	Condition	 
>1381	CallExpression	i -> hasNext ( )
>1382	ArgumentList	 
>1383	Callee	i -> hasNext
>1384	PtrMemberAccess	i -> hasNext
>1385	Identifier	hasNext
>1386	Identifier	i
>1387	IdentifierDeclStatement	 
>1388	IdentifierDecl	i = cs [ \"negotiationTerms\" ] . getIterator ( )
>1389	AssignmentExpr	i = cs [ \"negotiationTerms\" ] . getIterator ( )
>1390	CallExpression	cs [ \"negotiationTerms\" ] . getIterator ( )
>1391	ArgumentList	 
>1392	Callee	cs [ \"negotiationTerms\" ] . getIterator
>1393	MemberAccess	cs [ \"negotiationTerms\" ] . getIterator
>1394	Identifier	getIterator
>1395	ArrayIndexing	cs [ \"negotiationTerms\" ]
>1396	PrimaryExpression	\"negotiationTerms\"
>1397	Identifier	cs
>1398	Identifier	i
>1399	Identifier	i
>1400	IdentifierDeclType	DynamicObjectIterator
>1401	ExpressionStatement	 
>1402	CallExpression	cs [ \"negotiationTerms\" ] -> setType ( Map )
>1403	ArgumentList	Map
>1404	Argument	Map
>1405	Identifier	Map
>1406	Callee	cs [ \"negotiationTerms\" ] -> setType
>1407	PtrMemberAccess	cs [ \"negotiationTerms\" ] -> setType
>1408	Identifier	setType
>1409	ArrayIndexing	cs [ \"negotiationTerms\" ]
>1410	PrimaryExpression	\"negotiationTerms\"
>1411	Identifier	cs
>1412	ExpressionStatement	 
>1413	CallExpression	str . append ( cs [ \"seller\" ] [ \"username\" ] -> getString ( ) )
>1414	ArgumentList	cs [ \"seller\" ] [ \"username\" ] -> getString ( )
>1415	Argument	cs [ \"seller\" ] [ \"username\" ] -> getString ( )
>1416	CallExpression	cs [ \"seller\" ] [ \"username\" ] -> getString ( )
>1417	ArgumentList	 
>1418	Callee	cs [ \"seller\" ] [ \"username\" ] -> getString
>1419	PtrMemberAccess	cs [ \"seller\" ] [ \"username\" ] -> getString
>1420	Identifier	getString
>1421	ArrayIndexing	cs [ \"seller\" ] [ \"username\" ]
>1422	PrimaryExpression	\"username\"
>1423	ArrayIndexing	cs [ \"seller\" ]
>1424	PrimaryExpression	\"seller\"
>1425	Identifier	cs
>1426	Callee	str . append
>1427	MemberAccess	str . append
>1428	Identifier	append
>1429	Identifier	str
>1430	ExpressionStatement	 
>1431	CallExpression	str . append ( cs [ \"seller\" ] [ \"userId\" ] -> getString ( ) )
>1432	ArgumentList	cs [ \"seller\" ] [ \"userId\" ] -> getString ( )
>1433	Argument	cs [ \"seller\" ] [ \"userId\" ] -> getString ( )
>1434	CallExpression	cs [ \"seller\" ] [ \"userId\" ] -> getString ( )
>1435	ArgumentList	 
>1436	Callee	cs [ \"seller\" ] [ \"userId\" ] -> getString
>1437	PtrMemberAccess	cs [ \"seller\" ] [ \"userId\" ] -> getString
>1438	Identifier	getString
>1439	ArrayIndexing	cs [ \"seller\" ] [ \"userId\" ]
>1440	PrimaryExpression	\"userId\"
>1441	ArrayIndexing	cs [ \"seller\" ]
>1442	PrimaryExpression	\"seller\"
>1443	Identifier	cs
>1444	Callee	str . append
>1445	MemberAccess	str . append
>1446	Identifier	append
>1447	Identifier	str
>1448	ExpressionStatement	 
>1449	CallExpression	str . append ( cs [ \"seller\" ] [ \"url\" ] -> getString ( ) )
>1450	ArgumentList	cs [ \"seller\" ] [ \"url\" ] -> getString ( )
>1451	Argument	cs [ \"seller\" ] [ \"url\" ] -> getString ( )
>1452	CallExpression	cs [ \"seller\" ] [ \"url\" ] -> getString ( )
>1453	ArgumentList	 
>1454	Callee	cs [ \"seller\" ] [ \"url\" ] -> getString
>1455	PtrMemberAccess	cs [ \"seller\" ] [ \"url\" ] -> getString
>1456	Identifier	getString
>1457	ArrayIndexing	cs [ \"seller\" ] [ \"url\" ]
>1458	PrimaryExpression	\"url\"
>1459	ArrayIndexing	cs [ \"seller\" ]
>1460	PrimaryExpression	\"seller\"
>1461	Identifier	cs
>1462	Callee	str . append
>1463	MemberAccess	str . append
>1464	Identifier	append
>1465	Identifier	str
>1466	ExpressionStatement	 
>1467	CallExpression	str . append ( cs [ \"seller\" ] [ \"serverId\" ] -> getString ( ) )
>1468	ArgumentList	cs [ \"seller\" ] [ \"serverId\" ] -> getString ( )
>1469	Argument	cs [ \"seller\" ] [ \"serverId\" ] -> getString ( )
>1470	CallExpression	cs [ \"seller\" ] [ \"serverId\" ] -> getString ( )
>1471	ArgumentList	 
>1472	Callee	cs [ \"seller\" ] [ \"serverId\" ] -> getString
>1473	PtrMemberAccess	cs [ \"seller\" ] [ \"serverId\" ] -> getString
>1474	Identifier	getString
>1475	ArrayIndexing	cs [ \"seller\" ] [ \"serverId\" ]
>1476	PrimaryExpression	\"serverId\"
>1477	ArrayIndexing	cs [ \"seller\" ]
>1478	PrimaryExpression	\"seller\"
>1479	Identifier	cs
>1480	Callee	str . append
>1481	MemberAccess	str . append
>1482	Identifier	append
>1483	Identifier	str
>1484	ExpressionStatement	 
>1485	CallExpression	str . append ( cs [ \"seller\" ] [ \"profileId\" ] -> getString ( ) )
>1486	ArgumentList	cs [ \"seller\" ] [ \"profileId\" ] -> getString ( )
>1487	Argument	cs [ \"seller\" ] [ \"profileId\" ] -> getString ( )
>1488	CallExpression	cs [ \"seller\" ] [ \"profileId\" ] -> getString ( )
>1489	ArgumentList	 
>1490	Callee	cs [ \"seller\" ] [ \"profileId\" ] -> getString
>1491	PtrMemberAccess	cs [ \"seller\" ] [ \"profileId\" ] -> getString
>1492	Identifier	getString
>1493	ArrayIndexing	cs [ \"seller\" ] [ \"profileId\" ]
>1494	PrimaryExpression	\"profileId\"
>1495	ArrayIndexing	cs [ \"seller\" ]
>1496	PrimaryExpression	\"seller\"
>1497	Identifier	cs
>1498	Callee	str . append
>1499	MemberAccess	str . append
>1500	Identifier	append
>1501	Identifier	str
>1502	ExpressionStatement	 
>1503	CallExpression	str . append ( cs [ \"buyer\" ] [ \"username\" ] -> getString ( ) )
>1504	ArgumentList	cs [ \"buyer\" ] [ \"username\" ] -> getString ( )
>1505	Argument	cs [ \"buyer\" ] [ \"username\" ] -> getString ( )
>1506	CallExpression	cs [ \"buyer\" ] [ \"username\" ] -> getString ( )
>1507	ArgumentList	 
>1508	Callee	cs [ \"buyer\" ] [ \"username\" ] -> getString
>1509	PtrMemberAccess	cs [ \"buyer\" ] [ \"username\" ] -> getString
>1510	Identifier	getString
>1511	ArrayIndexing	cs [ \"buyer\" ] [ \"username\" ]
>1512	PrimaryExpression	\"username\"
>1513	ArrayIndexing	cs [ \"buyer\" ]
>1514	PrimaryExpression	\"buyer\"
>1515	Identifier	cs
>1516	Callee	str . append
>1517	MemberAccess	str . append
>1518	Identifier	append
>1519	Identifier	str
>1520	ExpressionStatement	 
>1521	CallExpression	str . append ( cs [ \"buyer\" ] [ \"userId\" ] -> getString ( ) )
>1522	ArgumentList	cs [ \"buyer\" ] [ \"userId\" ] -> getString ( )
>1523	Argument	cs [ \"buyer\" ] [ \"userId\" ] -> getString ( )
>1524	CallExpression	cs [ \"buyer\" ] [ \"userId\" ] -> getString ( )
>1525	ArgumentList	 
>1526	Callee	cs [ \"buyer\" ] [ \"userId\" ] -> getString
>1527	PtrMemberAccess	cs [ \"buyer\" ] [ \"userId\" ] -> getString
>1528	Identifier	getString
>1529	ArrayIndexing	cs [ \"buyer\" ] [ \"userId\" ]
>1530	PrimaryExpression	\"userId\"
>1531	ArrayIndexing	cs [ \"buyer\" ]
>1532	PrimaryExpression	\"buyer\"
>1533	Identifier	cs
>1534	Callee	str . append
>1535	MemberAccess	str . append
>1536	Identifier	append
>1537	Identifier	str
>1538	ExpressionStatement	 
>1539	CallExpression	str . append ( cs [ \"buyer\" ] [ \"profileId\" ] -> getString ( ) )
>1540	ArgumentList	cs [ \"buyer\" ] [ \"profileId\" ] -> getString ( )
>1541	Argument	cs [ \"buyer\" ] [ \"profileId\" ] -> getString ( )
>1542	CallExpression	cs [ \"buyer\" ] [ \"profileId\" ] -> getString ( )
>1543	ArgumentList	 
>1544	Callee	cs [ \"buyer\" ] [ \"profileId\" ] -> getString
>1545	PtrMemberAccess	cs [ \"buyer\" ] [ \"profileId\" ] -> getString
>1546	Identifier	getString
>1547	ArrayIndexing	cs [ \"buyer\" ] [ \"profileId\" ]
>1548	PrimaryExpression	\"profileId\"
>1549	ArrayIndexing	cs [ \"buyer\" ]
>1550	PrimaryExpression	\"buyer\"
>1551	Identifier	cs
>1552	Callee	str . append
>1553	MemberAccess	str . append
>1554	Identifier	append
>1555	Identifier	str
>1556	IfStatement	if ( cs [ \"buyer\" ] -> hasMember ( \"delegateId\" ) )
>1557	CompoundStatement	 
>1558	ExpressionStatement	 
>1559	CallExpression	str . append ( cs [ \"buyer\" ] [ \"delegateId\" ] -> getString ( ) )
>1560	ArgumentList	cs [ \"buyer\" ] [ \"delegateId\" ] -> getString ( )
>1561	Argument	cs [ \"buyer\" ] [ \"delegateId\" ] -> getString ( )
>1562	CallExpression	cs [ \"buyer\" ] [ \"delegateId\" ] -> getString ( )
>1563	ArgumentList	 
>1564	Callee	cs [ \"buyer\" ] [ \"delegateId\" ] -> getString
>1565	PtrMemberAccess	cs [ \"buyer\" ] [ \"delegateId\" ] -> getString
>1566	Identifier	getString
>1567	ArrayIndexing	cs [ \"buyer\" ] [ \"delegateId\" ]
>1568	PrimaryExpression	\"delegateId\"
>1569	ArrayIndexing	cs [ \"buyer\" ]
>1570	PrimaryExpression	\"buyer\"
>1571	Identifier	cs
>1572	Callee	str . append
>1573	MemberAccess	str . append
>1574	Identifier	append
>1575	Identifier	str
>1576	Condition	 
>1577	CallExpression	cs [ \"buyer\" ] -> hasMember ( \"delegateId\" )
>1578	ArgumentList	\"delegateId\"
>1579	Argument	\"delegateId\"
>1580	PrimaryExpression	\"delegateId\"
>1581	Callee	cs [ \"buyer\" ] -> hasMember
>1582	PtrMemberAccess	cs [ \"buyer\" ] -> hasMember
>1583	Identifier	hasMember
>1584	ArrayIndexing	cs [ \"buyer\" ]
>1585	PrimaryExpression	\"buyer\"
>1586	Identifier	cs
>1614	FunctionDef	Signer 
>1615	ParameterList	Ware & w , string & str
>1616	Parameter	 
>1617	Identifier	str
>1618	ParameterType	string &
>1619	Parameter	 
>1620	Identifier	w
>1621	ParameterType	Ware &
>1622	ReturnType	void
>1623	CompoundStatement	 
>1624	WhileStatement	while ( i -> hasNext ( ) )
>1625	CompoundStatement	 
>1626	ExpressionStatement	 
>1627	CallExpression	appendPayeeContent ( p , str )
>1628	ArgumentList	p
>1629	Argument	str
>1630	Identifier	str
>1631	Argument	p
>1632	Identifier	p
>1633	Callee	appendPayeeContent
>1634	Identifier	appendPayeeContent
>1635	IdentifierDeclStatement	 
>1636	IdentifierDecl	& p = i -> next ( )
>1637	AssignmentExpr	& p = i -> next ( )
>1638	CallExpression	i -> next ( )
>1639	ArgumentList	 
>1640	Callee	i -> next
>1641	PtrMemberAccess	i -> next
>1642	Identifier	next
>1643	Identifier	i
>1644	Identifier	p
>1645	Identifier	p
>1646	IdentifierDeclType	Payee &
>1647	Condition	 
>1648	CallExpression	i -> hasNext ( )
>1649	ArgumentList	 
>1650	Callee	i -> hasNext
>1651	PtrMemberAccess	i -> hasNext
>1652	Identifier	hasNext
>1653	Identifier	i
>1654	ExpressionStatement	 
>1655	AssignmentExpr	i = w [ \"payees\" ] . getIterator ( )
>1656	CallExpression	w [ \"payees\" ] . getIterator ( )
>1657	ArgumentList	 
>1658	Callee	w [ \"payees\" ] . getIterator
>1659	MemberAccess	w [ \"payees\" ] . getIterator
>1660	Identifier	getIterator
>1661	ArrayIndexing	w [ \"payees\" ]
>1662	PrimaryExpression	\"payees\"
>1663	Identifier	w
>1664	Identifier	i
>1665	ExpressionStatement	 
>1666	CallExpression	w [ \"payees\" ] -> setType ( Array )
>1667	ArgumentList	Array
>1668	Argument	Array
>1669	Identifier	Array
>1670	Callee	w [ \"payees\" ] -> setType
>1671	PtrMemberAccess	w [ \"payees\" ] -> setType
>1672	Identifier	setType
>1673	ArrayIndexing	w [ \"payees\" ]
>1674	PrimaryExpression	\"payees\"
>1675	Identifier	w
>1676	WhileStatement	while ( i -> hasNext ( ) )
>1677	CompoundStatement	 
>1678	ExpressionStatement	 
>1679	CallExpression	appendFileInfoContent ( fi , str )
>1680	ArgumentList	fi
>1681	Argument	str
>1682	Identifier	str
>1683	Argument	fi
>1684	Identifier	fi
>1685	Callee	appendFileInfoContent
>1686	Identifier	appendFileInfoContent
>1687	IdentifierDeclStatement	 
>1688	IdentifierDecl	& fi = i -> next ( )
>1689	AssignmentExpr	& fi = i -> next ( )
>1690	CallExpression	i -> next ( )
>1691	ArgumentList	 
>1692	Callee	i -> next
>1693	PtrMemberAccess	i -> next
>1694	Identifier	next
>1695	Identifier	i
>1696	Identifier	fi
>1697	Identifier	fi
>1698	IdentifierDeclType	FileInfo &
>1699	Condition	 
>1700	CallExpression	i -> hasNext ( )
>1701	ArgumentList	 
>1702	Callee	i -> hasNext
>1703	PtrMemberAccess	i -> hasNext
>1704	Identifier	hasNext
>1705	Identifier	i
>1706	IdentifierDeclStatement	 
>1707	IdentifierDecl	i = w [ \"fileInfos\" ] . getIterator ( )
>1708	AssignmentExpr	i = w [ \"fileInfos\" ] . getIterator ( )
>1709	CallExpression	w [ \"fileInfos\" ] . getIterator ( )
>1710	ArgumentList	 
>1711	Callee	w [ \"fileInfos\" ] . getIterator
>1712	MemberAccess	w [ \"fileInfos\" ] . getIterator
>1713	Identifier	getIterator
>1714	ArrayIndexing	w [ \"fileInfos\" ]
>1715	PrimaryExpression	\"fileInfos\"
>1716	Identifier	w
>1717	Identifier	i
>1718	Identifier	i
>1719	IdentifierDeclType	DynamicObjectIterator
>1720	ExpressionStatement	 
>1721	CallExpression	w [ \"fileInfos\" ] -> setType ( Array )
>1722	ArgumentList	Array
>1723	Argument	Array
>1724	Identifier	Array
>1725	Callee	w [ \"fileInfos\" ] -> setType
>1726	PtrMemberAccess	w [ \"fileInfos\" ] -> setType
>1727	Identifier	setType
>1728	ArrayIndexing	w [ \"fileInfos\" ]
>1729	PrimaryExpression	\"fileInfos\"
>1730	Identifier	w
>1731	ExpressionStatement	 
>1732	CallExpression	str . append ( w [ \"mediaId\" ] -> getString ( ) )
>1733	ArgumentList	w [ \"mediaId\" ] -> getString ( )
>1734	Argument	w [ \"mediaId\" ] -> getString ( )
>1735	CallExpression	w [ \"mediaId\" ] -> getString ( )
>1736	ArgumentList	 
>1737	Callee	w [ \"mediaId\" ] -> getString
>1738	PtrMemberAccess	w [ \"mediaId\" ] -> getString
>1739	Identifier	getString
>1740	ArrayIndexing	w [ \"mediaId\" ]
>1741	PrimaryExpression	\"mediaId\"
>1742	Identifier	w
>1743	Callee	str . append
>1744	MemberAccess	str . append
>1745	Identifier	append
>1746	Identifier	str
>1747	ExpressionStatement	 
>1748	CallExpression	str . append ( w [ \"id\" ] -> getString ( ) )
>1749	ArgumentList	w [ \"id\" ] -> getString ( )
>1750	Argument	w [ \"id\" ] -> getString ( )
>1751	CallExpression	w [ \"id\" ] -> getString ( )
>1752	ArgumentList	 
>1753	Callee	w [ \"id\" ] -> getString
>1754	PtrMemberAccess	w [ \"id\" ] -> getString
>1755	Identifier	getString
>1756	ArrayIndexing	w [ \"id\" ]
>1757	PrimaryExpression	\"id\"
>1758	Identifier	w
>1759	Callee	str . append
>1760	MemberAccess	str . append
>1761	Identifier	append
>1762	Identifier	str
>1781	FunctionDef	Signer 
>1782	ParameterList	FileInfo & fi , string & str
>1783	Parameter	 
>1784	Identifier	str
>1785	ParameterType	string &
>1786	Parameter	 
>1787	Identifier	fi
>1788	ParameterType	FileInfo &
>1789	ReturnType	void
>1790	CompoundStatement	 
>1791	ExpressionStatement	 
>1792	CallExpression	str . append ( fi [ \"mediaId\" ] -> getString ( ) )
>1793	ArgumentList	fi [ \"mediaId\" ] -> getString ( )
>1794	Argument	fi [ \"mediaId\" ] -> getString ( )
>1795	CallExpression	fi [ \"mediaId\" ] -> getString ( )
>1796	ArgumentList	 
>1797	Callee	fi [ \"mediaId\" ] -> getString
>1798	PtrMemberAccess	fi [ \"mediaId\" ] -> getString
>1799	Identifier	getString
>1800	ArrayIndexing	fi [ \"mediaId\" ]
>1801	PrimaryExpression	\"mediaId\"
>1802	Identifier	fi
>1803	Callee	str . append
>1804	MemberAccess	str . append
>1805	Identifier	append
>1806	Identifier	str
>1807	ExpressionStatement	 
>1808	CallExpression	str . append ( fi [ \"contentSize\" ] -> getString ( ) )
>1809	ArgumentList	fi [ \"contentSize\" ] -> getString ( )
>1810	Argument	fi [ \"contentSize\" ] -> getString ( )
>1811	CallExpression	fi [ \"contentSize\" ] -> getString ( )
>1812	ArgumentList	 
>1813	Callee	fi [ \"contentSize\" ] -> getString
>1814	PtrMemberAccess	fi [ \"contentSize\" ] -> getString
>1815	Identifier	getString
>1816	ArrayIndexing	fi [ \"contentSize\" ]
>1817	PrimaryExpression	\"contentSize\"
>1818	Identifier	fi
>1819	Callee	str . append
>1820	MemberAccess	str . append
>1821	Identifier	append
>1822	Identifier	str
>1823	ExpressionStatement	 
>1824	CallExpression	str . append ( fi [ \"id\" ] -> getString ( ) )
>1825	ArgumentList	fi [ \"id\" ] -> getString ( )
>1826	Argument	fi [ \"id\" ] -> getString ( )
>1827	CallExpression	fi [ \"id\" ] -> getString ( )
>1828	ArgumentList	 
>1829	Callee	fi [ \"id\" ] -> getString
>1830	PtrMemberAccess	fi [ \"id\" ] -> getString
>1831	Identifier	getString
>1832	ArrayIndexing	fi [ \"id\" ]
>1833	PrimaryExpression	\"id\"
>1834	Identifier	fi
>1835	Callee	str . append
>1836	MemberAccess	str . append
>1837	Identifier	append
>1838	Identifier	str
>1849	FunctionDef	Signer 
>1850	ParameterList	const char * csHash , FileId fileId , FilePiece & fp , string & str
>1851	Parameter	 
>1852	Identifier	str
>1853	ParameterType	string &
>1854	Parameter	 
>1855	Identifier	fp
>1856	ParameterType	FilePiece &
>1857	Parameter	 
>1858	Identifier	fileId
>1859	ParameterType	FileId
>1860	Parameter	 
>1861	Identifier	csHash
>1862	ParameterType	const char *
>1863	ReturnType	void
>1864	CompoundStatement	 
>1865	IfStatement	if ( fp [ \"ciphered\" ] -> getBoolean ( ) )
>1866	CompoundStatement	 
>1867	ExpressionStatement	 
>1868	CallExpression	str . append ( fp [ \"pieceKey\" ] [ \"data\" ] -> getString ( ) )
>1869	ArgumentList	fp [ \"pieceKey\" ] [ \"data\" ] -> getString ( )
>1870	Argument	fp [ \"pieceKey\" ] [ \"data\" ] -> getString ( )
>1871	CallExpression	fp [ \"pieceKey\" ] [ \"data\" ] -> getString ( )
>1872	ArgumentList	 
>1873	Callee	fp [ \"pieceKey\" ] [ \"data\" ] -> getString
>1874	PtrMemberAccess	fp [ \"pieceKey\" ] [ \"data\" ] -> getString
>1875	Identifier	getString
>1876	ArrayIndexing	fp [ \"pieceKey\" ] [ \"data\" ]
>1877	PrimaryExpression	\"data\"
>1878	ArrayIndexing	fp [ \"pieceKey\" ]
>1879	PrimaryExpression	\"pieceKey\"
>1880	Identifier	fp
>1881	Callee	str . append
>1882	MemberAccess	str . append
>1883	Identifier	append
>1884	Identifier	str
>1885	ExpressionStatement	 
>1886	CallExpression	str . append ( fp [ \"openKey\" ] [ \"data\" ] -> getString ( ) )
>1887	ArgumentList	fp [ \"openKey\" ] [ \"data\" ] -> getString ( )
>1888	Argument	fp [ \"openKey\" ] [ \"data\" ] -> getString ( )
>1889	CallExpression	fp [ \"openKey\" ] [ \"data\" ] -> getString ( )
>1890	ArgumentList	 
>1891	Callee	fp [ \"openKey\" ] [ \"data\" ] -> getString
>1892	PtrMemberAccess	fp [ \"openKey\" ] [ \"data\" ] -> getString
>1893	Identifier	getString
>1894	ArrayIndexing	fp [ \"openKey\" ] [ \"data\" ]
>1895	PrimaryExpression	\"data\"
>1896	ArrayIndexing	fp [ \"openKey\" ]
>1897	PrimaryExpression	\"openKey\"
>1898	Identifier	fp
>1899	Callee	str . append
>1900	MemberAccess	str . append
>1901	Identifier	append
>1902	Identifier	str
>1903	Condition	 
>1904	CallExpression	fp [ \"ciphered\" ] -> getBoolean ( )
>1905	ArgumentList	 
>1906	Callee	fp [ \"ciphered\" ] -> getBoolean
>1907	PtrMemberAccess	fp [ \"ciphered\" ] -> getBoolean
>1908	Identifier	getBoolean
>1909	ArrayIndexing	fp [ \"ciphered\" ]
>1910	PrimaryExpression	\"ciphered\"
>1911	Identifier	fp
>1912	ExpressionStatement	 
>1913	CallExpression	str . append ( fp [ \"size\" ] -> getString ( ) )
>1914	ArgumentList	fp [ \"size\" ] -> getString ( )
>1915	Argument	fp [ \"size\" ] -> getString ( )
>1916	CallExpression	fp [ \"size\" ] -> getString ( )
>1917	ArgumentList	 
>1918	Callee	fp [ \"size\" ] -> getString
>1919	PtrMemberAccess	fp [ \"size\" ] -> getString
>1920	Identifier	getString
>1921	ArrayIndexing	fp [ \"size\" ]
>1922	PrimaryExpression	\"size\"
>1923	Identifier	fp
>1924	Callee	str . append
>1925	MemberAccess	str . append
>1926	Identifier	append
>1927	Identifier	str
>1928	ExpressionStatement	 
>1929	CallExpression	str . append ( fp [ \"index\" ] -> getString ( ) )
>1930	ArgumentList	fp [ \"index\" ] -> getString ( )
>1931	Argument	fp [ \"index\" ] -> getString ( )
>1932	CallExpression	fp [ \"index\" ] -> getString ( )
>1933	ArgumentList	 
>1934	Callee	fp [ \"index\" ] -> getString
>1935	PtrMemberAccess	fp [ \"index\" ] -> getString
>1936	Identifier	getString
>1937	ArrayIndexing	fp [ \"index\" ]
>1938	PrimaryExpression	\"index\"
>1939	Identifier	fp
>1940	Callee	str . append
>1941	MemberAccess	str . append
>1942	Identifier	append
>1943	Identifier	str
>1944	ExpressionStatement	 
>1945	CallExpression	str . append ( fp [ \"ciphered\" ] -> getString ( ) )
>1946	ArgumentList	fp [ \"ciphered\" ] -> getString ( )
>1947	Argument	fp [ \"ciphered\" ] -> getString ( )
>1948	CallExpression	fp [ \"ciphered\" ] -> getString ( )
>1949	ArgumentList	 
>1950	Callee	fp [ \"ciphered\" ] -> getString
>1951	PtrMemberAccess	fp [ \"ciphered\" ] -> getString
>1952	Identifier	getString
>1953	ArrayIndexing	fp [ \"ciphered\" ]
>1954	PrimaryExpression	\"ciphered\"
>1955	Identifier	fp
>1956	Callee	str . append
>1957	MemberAccess	str . append
>1958	Identifier	append
>1959	Identifier	str
>1960	ExpressionStatement	 
>1961	CallExpression	str . append ( fileId )
>1962	ArgumentList	fileId
>1963	Argument	fileId
>1964	Identifier	fileId
>1965	Callee	str . append
>1966	MemberAccess	str . append
>1967	Identifier	append
>1968	Identifier	str
>1969	ExpressionStatement	 
>1970	CallExpression	str . append ( csHash )
>1971	ArgumentList	csHash
>1972	Argument	csHash
>1973	Identifier	csHash
>1974	Callee	str . append
>1975	MemberAccess	str . append
>1976	Identifier	append
>1977	Identifier	str
>1994	FunctionDef	Signer 
>1995	ParameterList	Address & a , string & str
>1996	Parameter	 
>1997	Identifier	str
>1998	ParameterType	string &
>1999	Parameter	 
>2000	Identifier	a
>2001	ParameterType	Address &
>2002	ReturnType	void
>2003	CompoundStatement	 
>2004	ExpressionStatement	 
>2005	CallExpression	str . append ( a [ \"countryCode\" ] -> getString ( ) )
>2006	ArgumentList	a [ \"countryCode\" ] -> getString ( )
>2007	Argument	a [ \"countryCode\" ] -> getString ( )
>2008	CallExpression	a [ \"countryCode\" ] -> getString ( )
>2009	ArgumentList	 
>2010	Callee	a [ \"countryCode\" ] -> getString
>2011	PtrMemberAccess	a [ \"countryCode\" ] -> getString
>2012	Identifier	getString
>2013	ArrayIndexing	a [ \"countryCode\" ]
>2014	PrimaryExpression	\"countryCode\"
>2015	Identifier	a
>2016	Callee	str . append
>2017	MemberAccess	str . append
>2018	Identifier	append
>2019	Identifier	str
>2020	ExpressionStatement	 
>2021	CallExpression	str . append ( a [ \"postalCode\" ] -> getString ( ) )
>2022	ArgumentList	a [ \"postalCode\" ] -> getString ( )
>2023	Argument	a [ \"postalCode\" ] -> getString ( )
>2024	CallExpression	a [ \"postalCode\" ] -> getString ( )
>2025	ArgumentList	 
>2026	Callee	a [ \"postalCode\" ] -> getString
>2027	PtrMemberAccess	a [ \"postalCode\" ] -> getString
>2028	Identifier	getString
>2029	ArrayIndexing	a [ \"postalCode\" ]
>2030	PrimaryExpression	\"postalCode\"
>2031	Identifier	a
>2032	Callee	str . append
>2033	MemberAccess	str . append
>2034	Identifier	append
>2035	Identifier	str
>2036	ExpressionStatement	 
>2037	CallExpression	str . append ( a [ \"region\" ] -> getString ( ) )
>2038	ArgumentList	a [ \"region\" ] -> getString ( )
>2039	Argument	a [ \"region\" ] -> getString ( )
>2040	CallExpression	a [ \"region\" ] -> getString ( )
>2041	ArgumentList	 
>2042	Callee	a [ \"region\" ] -> getString
>2043	PtrMemberAccess	a [ \"region\" ] -> getString
>2044	Identifier	getString
>2045	ArrayIndexing	a [ \"region\" ]
>2046	PrimaryExpression	\"region\"
>2047	Identifier	a
>2048	Callee	str . append
>2049	MemberAccess	str . append
>2050	Identifier	append
>2051	Identifier	str
>2052	ExpressionStatement	 
>2053	CallExpression	str . append ( a [ \"locality\" ] -> getString ( ) )
>2054	ArgumentList	a [ \"locality\" ] -> getString ( )
>2055	Argument	a [ \"locality\" ] -> getString ( )
>2056	CallExpression	a [ \"locality\" ] -> getString ( )
>2057	ArgumentList	 
>2058	Callee	a [ \"locality\" ] -> getString
>2059	PtrMemberAccess	a [ \"locality\" ] -> getString
>2060	Identifier	getString
>2061	ArrayIndexing	a [ \"locality\" ]
>2062	PrimaryExpression	\"locality\"
>2063	Identifier	a
>2064	Callee	str . append
>2065	MemberAccess	str . append
>2066	Identifier	append
>2067	Identifier	str
>2068	ExpressionStatement	 
>2069	CallExpression	str . append ( a [ \"street\" ] -> getString ( ) )
>2070	ArgumentList	a [ \"street\" ] -> getString ( )
>2071	Argument	a [ \"street\" ] -> getString ( )
>2072	CallExpression	a [ \"street\" ] -> getString ( )
>2073	ArgumentList	 
>2074	Callee	a [ \"street\" ] -> getString
>2075	PtrMemberAccess	a [ \"street\" ] -> getString
>2076	Identifier	getString
>2077	ArrayIndexing	a [ \"street\" ]
>2078	PrimaryExpression	\"street\"
>2079	Identifier	a
>2080	Callee	str . append
>2081	MemberAccess	str . append
>2082	Identifier	append
>2083	Identifier	str
>2096	FunctionDef	Signer 
>2097	ParameterList	CreditCard & c , string & str
>2098	Parameter	 
>2099	Identifier	str
>2100	ParameterType	string &
>2101	Parameter	 
>2102	Identifier	c
>2103	ParameterType	CreditCard &
>2104	ReturnType	void
>2105	CompoundStatement	 
>2106	ExpressionStatement	 
>2107	CallExpression	appendAddressContent ( c [ \"address\" ] , str )
>2108	ArgumentList	c [ \"address\" ]
>2109	Argument	str
>2110	Identifier	str
>2111	Argument	c [ \"address\" ]
>2112	ArrayIndexing	c [ \"address\" ]
>2113	PrimaryExpression	\"address\"
>2114	Identifier	c
>2115	Callee	appendAddressContent
>2116	Identifier	appendAddressContent
>2117	ExpressionStatement	 
>2118	CallExpression	str . append ( c [ \"cvm\" ] -> getString ( ) )
>2119	ArgumentList	c [ \"cvm\" ] -> getString ( )
>2120	Argument	c [ \"cvm\" ] -> getString ( )
>2121	CallExpression	c [ \"cvm\" ] -> getString ( )
>2122	ArgumentList	 
>2123	Callee	c [ \"cvm\" ] -> getString
>2124	PtrMemberAccess	c [ \"cvm\" ] -> getString
>2125	Identifier	getString
>2126	ArrayIndexing	c [ \"cvm\" ]
>2127	PrimaryExpression	\"cvm\"
>2128	Identifier	c
>2129	Callee	str . append
>2130	MemberAccess	str . append
>2131	Identifier	append
>2132	Identifier	str
>2133	ExpressionStatement	 
>2134	CallExpression	str . append ( c [ \"expMonth\" ] -> getString ( ) )
>2135	ArgumentList	c [ \"expMonth\" ] -> getString ( )
>2136	Argument	c [ \"expMonth\" ] -> getString ( )
>2137	CallExpression	c [ \"expMonth\" ] -> getString ( )
>2138	ArgumentList	 
>2139	Callee	c [ \"expMonth\" ] -> getString
>2140	PtrMemberAccess	c [ \"expMonth\" ] -> getString
>2141	Identifier	getString
>2142	ArrayIndexing	c [ \"expMonth\" ]
>2143	PrimaryExpression	\"expMonth\"
>2144	Identifier	c
>2145	Callee	str . append
>2146	MemberAccess	str . append
>2147	Identifier	append
>2148	Identifier	str
>2149	ExpressionStatement	 
>2150	CallExpression	str . append ( c [ \"expMonth\" ] -> getString ( ) )
>2151	ArgumentList	c [ \"expMonth\" ] -> getString ( )
>2152	Argument	c [ \"expMonth\" ] -> getString ( )
>2153	CallExpression	c [ \"expMonth\" ] -> getString ( )
>2154	ArgumentList	 
>2155	Callee	c [ \"expMonth\" ] -> getString
>2156	PtrMemberAccess	c [ \"expMonth\" ] -> getString
>2157	Identifier	getString
>2158	ArrayIndexing	c [ \"expMonth\" ]
>2159	PrimaryExpression	\"expMonth\"
>2160	Identifier	c
>2161	Callee	str . append
>2162	MemberAccess	str . append
>2163	Identifier	append
>2164	Identifier	str
>2165	ExpressionStatement	 
>2166	CallExpression	str . append ( c [ \"number\" ] -> getString ( ) )
>2167	ArgumentList	c [ \"number\" ] -> getString ( )
>2168	Argument	c [ \"number\" ] -> getString ( )
>2169	CallExpression	c [ \"number\" ] -> getString ( )
>2170	ArgumentList	 
>2171	Callee	c [ \"number\" ] -> getString
>2172	PtrMemberAccess	c [ \"number\" ] -> getString
>2173	Identifier	getString
>2174	ArrayIndexing	c [ \"number\" ]
>2175	PrimaryExpression	\"number\"
>2176	Identifier	c
>2177	Callee	str . append
>2178	MemberAccess	str . append
>2179	Identifier	append
>2180	Identifier	str
>2181	ExpressionStatement	 
>2182	CallExpression	str . append ( c [ \"type\" ] -> getString ( ) )
>2183	ArgumentList	c [ \"type\" ] -> getString ( )
>2184	Argument	c [ \"type\" ] -> getString ( )
>2185	CallExpression	c [ \"type\" ] -> getString ( )
>2186	ArgumentList	 
>2187	Callee	c [ \"type\" ] -> getString
>2188	PtrMemberAccess	c [ \"type\" ] -> getString
>2189	Identifier	getString
>2190	ArrayIndexing	c [ \"type\" ]
>2191	PrimaryExpression	\"type\"
>2192	Identifier	c
>2193	Callee	str . append
>2194	MemberAccess	str . append
>2195	Identifier	append
>2196	Identifier	str
>2208	FunctionDef	Signer 
>2209	ParameterList	Deposit & d , string & str
>2210	Parameter	 
>2211	Identifier	str
>2212	ParameterType	string &
>2213	Parameter	 
>2214	Identifier	d
>2215	ParameterType	Deposit &
>2216	ReturnType	void
>2217	CompoundStatement	 
>2218	ExpressionStatement	 
>2219	CallExpression	str . append ( d [ \"total\" ] -> getString ( ) )
>2220	ArgumentList	d [ \"total\" ] -> getString ( )
>2221	Argument	d [ \"total\" ] -> getString ( )
>2222	CallExpression	d [ \"total\" ] -> getString ( )
>2223	ArgumentList	 
>2224	Callee	d [ \"total\" ] -> getString
>2225	PtrMemberAccess	d [ \"total\" ] -> getString
>2226	Identifier	getString
>2227	ArrayIndexing	d [ \"total\" ]
>2228	PrimaryExpression	\"total\"
>2229	Identifier	d
>2230	Callee	str . append
>2231	MemberAccess	str . append
>2232	Identifier	append
>2233	Identifier	str
>2234	WhileStatement	while ( i -> hasNext ( ) )
>2235	CompoundStatement	 
>2236	ExpressionStatement	 
>2237	CallExpression	appendPayeeContent ( p , str )
>2238	ArgumentList	p
>2239	Argument	str
>2240	Identifier	str
>2241	Argument	p
>2242	Identifier	p
>2243	Callee	appendPayeeContent
>2244	Identifier	appendPayeeContent
>2245	IdentifierDeclStatement	 
>2246	IdentifierDecl	& p = i -> next ( )
>2247	AssignmentExpr	& p = i -> next ( )
>2248	CallExpression	i -> next ( )
>2249	ArgumentList	 
>2250	Callee	i -> next
>2251	PtrMemberAccess	i -> next
>2252	Identifier	next
>2253	Identifier	i
>2254	Identifier	p
>2255	Identifier	p
>2256	IdentifierDeclType	Payee &
>2257	Condition	 
>2258	CallExpression	i -> hasNext ( )
>2259	ArgumentList	 
>2260	Callee	i -> hasNext
>2261	PtrMemberAccess	i -> hasNext
>2262	Identifier	hasNext
>2263	Identifier	i
>2264	IdentifierDeclStatement	 
>2265	IdentifierDecl	i = d [ \"payees\" ] . getIterator ( )
>2266	AssignmentExpr	i = d [ \"payees\" ] . getIterator ( )
>2267	CallExpression	d [ \"payees\" ] . getIterator ( )
>2268	ArgumentList	 
>2269	Callee	d [ \"payees\" ] . getIterator
>2270	MemberAccess	d [ \"payees\" ] . getIterator
>2271	Identifier	getIterator
>2272	ArrayIndexing	d [ \"payees\" ]
>2273	PrimaryExpression	\"payees\"
>2274	Identifier	d
>2275	Identifier	i
>2276	Identifier	i
>2277	IdentifierDeclType	PayeeIterator
>2278	ExpressionStatement	 
>2279	CallExpression	d [ \"payees\" ] -> setType ( Array )
>2280	ArgumentList	Array
>2281	Argument	Array
>2282	Identifier	Array
>2283	Callee	d [ \"payees\" ] -> setType
>2284	PtrMemberAccess	d [ \"payees\" ] -> setType
>2285	Identifier	setType
>2286	ArrayIndexing	d [ \"payees\" ]
>2287	PrimaryExpression	\"payees\"
>2288	Identifier	d
>2289	IfStatement	if ( strcmp ( d [ \"type\" ] -> getString ( ) , \"creditcard\" ) == 0 )
>2290	CompoundStatement	 
>2291	ExpressionStatement	 
>2292	CallExpression	appendCreditCardContent ( d [ \"source\" ] , str )
>2293	ArgumentList	d [ \"source\" ]
>2294	Argument	str
>2295	Identifier	str
>2296	Argument	d [ \"source\" ]
>2297	ArrayIndexing	d [ \"source\" ]
>2298	PrimaryExpression	\"source\"
>2299	Identifier	d
>2300	Callee	appendCreditCardContent
>2301	Identifier	appendCreditCardContent
>2302	Condition	 
>2303	EqualityExpression	strcmp ( d [ \"type\" ] -> getString ( ) , \"creditcard\" ) == 0
>2304	PrimaryExpression	0
>2305	CallExpression	strcmp ( d [ \"type\" ] -> getString ( ) , \"creditcard\" )
>2306	ArgumentList	d [ \"type\" ] -> getString ( )
>2307	Argument	\"creditcard\"
>2308	PrimaryExpression	\"creditcard\"
>2309	Argument	d [ \"type\" ] -> getString ( )
>2310	CallExpression	d [ \"type\" ] -> getString ( )
>2311	ArgumentList	 
>2312	Callee	d [ \"type\" ] -> getString
>2313	PtrMemberAccess	d [ \"type\" ] -> getString
>2314	Identifier	getString
>2315	ArrayIndexing	d [ \"type\" ]
>2316	PrimaryExpression	\"type\"
>2317	Identifier	d
>2318	Callee	strcmp
>2319	Identifier	strcmp
>2320	IfStatement	if ( d -> hasMember ( \"signatureVersion\" ) )
>2321	CompoundStatement	 
>2322	IfStatement	if ( version == 2 )
>2323	CompoundStatement	 
>2324	ExpressionStatement	 
>2325	CallExpression	str . append ( d [ \"gateway\" ] -> getString ( ) )
>2326	ArgumentList	d [ \"gateway\" ] -> getString ( )
>2327	Argument	d [ \"gateway\" ] -> getString ( )
>2328	CallExpression	d [ \"gateway\" ] -> getString ( )
>2329	ArgumentList	 
>2330	Callee	d [ \"gateway\" ] -> getString
>2331	PtrMemberAccess	d [ \"gateway\" ] -> getString
>2332	Identifier	getString
>2333	ArrayIndexing	d [ \"gateway\" ]
>2334	PrimaryExpression	\"gateway\"
>2335	Identifier	d
>2336	Callee	str . append
>2337	MemberAccess	str . append
>2338	Identifier	append
>2339	Identifier	str
>2340	Condition	 
>2341	EqualityExpression	version == 2
>2342	PrimaryExpression	2
>2343	Identifier	version
>2344	IdentifierDeclStatement	 
>2345	IdentifierDecl	version = d [ \"signatureVersion\" ] -> getUInt32 ( )
>2346	AssignmentExpr	version = d [ \"signatureVersion\" ] -> getUInt32 ( )
>2347	CallExpression	d [ \"signatureVersion\" ] -> getUInt32 ( )
>2348	ArgumentList	 
>2349	Callee	d [ \"signatureVersion\" ] -> getUInt32
>2350	PtrMemberAccess	d [ \"signatureVersion\" ] -> getUInt32
>2351	Identifier	getUInt32
>2352	ArrayIndexing	d [ \"signatureVersion\" ]
>2353	PrimaryExpression	\"signatureVersion\"
>2354	Identifier	d
>2355	Identifier	version
>2356	Identifier	version
>2357	IdentifierDeclType	uint32_t
>2358	Condition	 
>2359	CallExpression	d -> hasMember ( \"signatureVersion\" )
>2360	ArgumentList	\"signatureVersion\"
>2361	Argument	\"signatureVersion\"
>2362	PrimaryExpression	\"signatureVersion\"
>2363	Callee	d -> hasMember
>2364	PtrMemberAccess	d -> hasMember
>2365	Identifier	hasMember
>2366	Identifier	d
>2367	ExpressionStatement	 
>2368	CallExpression	str . append ( d [ \"date\" ] -> getString ( ) )
>2369	ArgumentList	d [ \"date\" ] -> getString ( )
>2370	Argument	d [ \"date\" ] -> getString ( )
>2371	CallExpression	d [ \"date\" ] -> getString ( )
>2372	ArgumentList	 
>2373	Callee	d [ \"date\" ] -> getString
>2374	PtrMemberAccess	d [ \"date\" ] -> getString
>2375	Identifier	getString
>2376	ArrayIndexing	d [ \"date\" ]
>2377	PrimaryExpression	\"date\"
>2378	Identifier	d
>2379	Callee	str . append
>2380	MemberAccess	str . append
>2381	Identifier	append
>2382	Identifier	str
>2383	ExpressionStatement	 
>2384	CallExpression	str . append ( d [ \"type\" ] -> getString ( ) )
>2385	ArgumentList	d [ \"type\" ] -> getString ( )
>2386	Argument	d [ \"type\" ] -> getString ( )
>2387	CallExpression	d [ \"type\" ] -> getString ( )
>2388	ArgumentList	 
>2389	Callee	d [ \"type\" ] -> getString
>2390	PtrMemberAccess	d [ \"type\" ] -> getString
>2391	Identifier	getString
>2392	ArrayIndexing	d [ \"type\" ]
>2393	PrimaryExpression	\"type\"
>2394	Identifier	d
>2395	Callee	str . append
>2396	MemberAccess	str . append
>2397	Identifier	append
>2398	Identifier	str
>2421	FunctionDef	Signer 
>2422	ParameterList	Media & m , ProfileRef & p
>2423	Parameter	 
>2424	Identifier	p
>2425	ParameterType	ProfileRef &
>2426	Parameter	 
>2427	Identifier	m
>2428	ParameterType	Media &
>2429	ReturnType	bool
>2430	CompoundStatement	 
>2431	ReturnStatement	 
>2432	Identifier	rval
>2433	IfStatement	if ( ( rval = sign ( p , content , signature ) ) )
>2434	CompoundStatement	 
>2435	ExpressionStatement	 
>2436	AssignmentExpr	m [ \"signer\" ] [ \"profileId\" ] = p -> getId ( )
>2437	CallExpression	p -> getId ( )
>2438	ArgumentList	 
>2439	Callee	p -> getId
>2440	PtrMemberAccess	p -> getId
>2441	Identifier	getId
>2442	Identifier	p
>2443	ArrayIndexing	m [ \"signer\" ] [ \"profileId\" ]
>2444	PrimaryExpression	\"profileId\"
>2445	ArrayIndexing	m [ \"signer\" ]
>2446	PrimaryExpression	\"signer\"
>2447	Identifier	m
>2448	ExpressionStatement	 
>2449	AssignmentExpr	m [ \"signer\" ] [ \"userId\" ] = p -> getUserId ( )
>2450	CallExpression	p -> getUserId ( )
>2451	ArgumentList	 
>2452	Callee	p -> getUserId
>2453	PtrMemberAccess	p -> getUserId
>2454	Identifier	getUserId
>2455	Identifier	p
>2456	ArrayIndexing	m [ \"signer\" ] [ \"userId\" ]
>2457	PrimaryExpression	\"userId\"
>2458	ArrayIndexing	m [ \"signer\" ]
>2459	PrimaryExpression	\"signer\"
>2460	Identifier	m
>2461	ExpressionStatement	 
>2462	AssignmentExpr	m [ \"signature\" ] = signature . c_str ( )
>2463	CallExpression	signature . c_str ( )
>2464	ArgumentList	 
>2465	Callee	signature . c_str
>2466	MemberAccess	signature . c_str
>2467	Identifier	c_str
>2468	Identifier	signature
>2469	ArrayIndexing	m [ \"signature\" ]
>2470	PrimaryExpression	\"signature\"
>2471	Identifier	m
>2472	Condition	 
>2473	AssignmentExpr	rval = sign ( p , content , signature )
>2474	CallExpression	sign ( p , content , signature )
>2475	ArgumentList	p
>2476	Argument	signature
>2477	Identifier	signature
>2478	Argument	content
>2479	Identifier	content
>2480	Argument	p
>2481	Identifier	p
>2482	Callee	sign
>2483	Identifier	sign
>2484	Identifier	rval
>2485	IdentifierDeclStatement	 
>2486	IdentifierDecl	signature
>2487	Identifier	signature
>2488	IdentifierDeclType	string
>2489	ExpressionStatement	 
>2490	CallExpression	appendMediaContent ( m , content )
>2491	ArgumentList	m
>2492	Argument	content
>2493	Identifier	content
>2494	Argument	m
>2495	Identifier	m
>2496	Callee	appendMediaContent
>2497	Identifier	appendMediaContent
>2498	IdentifierDeclStatement	 
>2499	IdentifierDecl	content
>2500	Identifier	content
>2501	IdentifierDeclType	string
>2502	IdentifierDeclStatement	 
>2503	IdentifierDecl	rval
>2504	Identifier	rval
>2505	IdentifierDeclType	bool
>2521	FunctionDef	Signer 
>2522	ParameterList	Media & m , PublicKeyRef & pkey
>2523	Parameter	 
>2524	Identifier	pkey
>2525	ParameterType	PublicKeyRef &
>2526	Parameter	 
>2527	Identifier	m
>2528	ParameterType	Media &
>2529	ReturnType	bool
>2530	CompoundStatement	 
>2531	ReturnStatement	 
>2532	Identifier	rval
>2533	IfStatement	if ( ! m -> hasMember ( \"signature\" ) )
>2534	ElseStatement	else
>2535	CompoundStatement	 
>2536	IfStatement	if ( ! verify ( pkey , content , m [ \"signature\" ] -> getString ( ) ) )
>2537	CompoundStatement	 
>2538	ExpressionStatement	 
>2539	AssignmentExpr	rval = false
>2540	Identifier	false
>2541	Identifier	rval
>2542	ExpressionStatement	 
>2543	CallExpression	Exception 
>2544	ArgumentList	e
>2545	Argument	e
>2546	Identifier	e
>2547	Callee	Exception 
>2548	Identifier	Exception 
>2549	IdentifierDeclStatement	 
>2550	IdentifierDecl	e = new Exception ( \"Could not verify Media, the signature did not match.\" , \"bitmunk.common.VerifyMedia\" )
>2551	AssignmentExpr	e = new Exception ( \"Could not verify Media, the signature did not match.\" , \"bitmunk.common.VerifyMedia\" )
>2552	Expression	\"Could not verify Media, the signature did not match.\" , \"bitmunk.common.VerifyMedia\"
>2553	PrimaryExpression	\"bitmunk.common.VerifyMedia\"
>2554	PrimaryExpression	\"Could not verify Media, the signature did not match.\"
>2555	Identifier	e
>2556	Identifier	e
>2557	IdentifierDeclType	ExceptionRef
>2558	Condition	 
>2559	UnaryOp	! verify ( pkey , content , m [ \"signature\" ] -> getString ( ) )
>2560	CallExpression	verify ( pkey , content , m [ \"signature\" ] -> getString ( ) )
>2561	ArgumentList	pkey
>2562	Argument	m [ \"signature\" ] -> getString ( )
>2563	CallExpression	m [ \"signature\" ] -> getString ( )
>2564	ArgumentList	 
>2565	Callee	m [ \"signature\" ] -> getString
>2566	PtrMemberAccess	m [ \"signature\" ] -> getString
>2567	Identifier	getString
>2568	ArrayIndexing	m [ \"signature\" ]
>2569	PrimaryExpression	\"signature\"
>2570	Identifier	m
>2571	Argument	content
>2572	Identifier	content
>2573	Argument	pkey
>2574	Identifier	pkey
>2575	Callee	verify
>2576	Identifier	verify
>2577	UnaryOperator	!
>2578	ExpressionStatement	 
>2579	CallExpression	appendMediaContent ( m , content )
>2580	ArgumentList	m
>2581	Argument	content
>2582	Identifier	content
>2583	Argument	m
>2584	Identifier	m
>2585	Callee	appendMediaContent
>2586	Identifier	appendMediaContent
>2587	IdentifierDeclStatement	 
>2588	IdentifierDecl	content
>2589	Identifier	content
>2590	IdentifierDeclType	string
>2591	CompoundStatement	 
>2592	ExpressionStatement	 
>2593	AssignmentExpr	rval = false
>2594	Identifier	false
>2595	Identifier	rval
>2596	ExpressionStatement	 
>2597	CallExpression	Exception 
>2598	ArgumentList	e
>2599	Argument	e
>2600	Identifier	e
>2601	Callee	Exception 
>2602	Identifier	Exception 
>2603	IdentifierDeclStatement	 
>2604	IdentifierDecl	e = new Exception ( \"Could not verify Media, it has no signature.\" , \"bitmunk.common.VerifyMedia\" )
>2605	AssignmentExpr	e = new Exception ( \"Could not verify Media, it has no signature.\" , \"bitmunk.common.VerifyMedia\" )
>2606	Expression	\"Could not verify Media, it has no signature.\" , \"bitmunk.common.VerifyMedia\"
>2607	PrimaryExpression	\"bitmunk.common.VerifyMedia\"
>2608	PrimaryExpression	\"Could not verify Media, it has no signature.\"
>2609	Identifier	e
>2610	Identifier	e
>2611	IdentifierDeclType	ExceptionRef
>2612	Condition	 
>2613	UnaryOp	! m -> hasMember ( \"signature\" )
>2614	CallExpression	m -> hasMember ( \"signature\" )
>2615	ArgumentList	\"signature\"
>2616	Argument	\"signature\"
>2617	PrimaryExpression	\"signature\"
>2618	Callee	m -> hasMember
>2619	PtrMemberAccess	m -> hasMember
>2620	Identifier	hasMember
>2621	Identifier	m
>2622	UnaryOperator	!
>2623	IdentifierDeclStatement	 
>2624	IdentifierDecl	rval = true
>2625	AssignmentExpr	rval = true
>2626	Identifier	true
>2627	Identifier	true
>2628	Identifier	rval
>2629	IdentifierDeclType	bool
>2645	FunctionDef	Signer 
>2646	ParameterList	Contract & c , ProfileRef & p
>2647	Parameter	 
>2648	Identifier	p
>2649	ParameterType	ProfileRef &
>2650	Parameter	 
>2651	Identifier	c
>2652	ParameterType	Contract &
>2653	ReturnType	bool
>2654	CompoundStatement	 
>2655	ReturnStatement	 
>2656	Identifier	rval
>2657	IfStatement	if ( ( rval = sign ( p , content , signature ) ) )
>2658	CompoundStatement	 
>2659	ExpressionStatement	 
>2660	AssignmentExpr	c [ \"signature\" ] = signature . c_str ( )
>2661	CallExpression	signature . c_str ( )
>2662	ArgumentList	 
>2663	Callee	signature . c_str
>2664	MemberAccess	signature . c_str
>2665	Identifier	c_str
>2666	Identifier	signature
>2667	ArrayIndexing	c [ \"signature\" ]
>2668	PrimaryExpression	\"signature\"
>2669	Identifier	c
>2670	Condition	 
>2671	AssignmentExpr	rval = sign ( p , content , signature )
>2672	CallExpression	sign ( p , content , signature )
>2673	ArgumentList	p
>2674	Argument	signature
>2675	Identifier	signature
>2676	Argument	content
>2677	Identifier	content
>2678	Argument	p
>2679	Identifier	p
>2680	Callee	sign
>2681	Identifier	sign
>2682	Identifier	rval
>2683	IdentifierDeclStatement	 
>2684	IdentifierDecl	signature
>2685	Identifier	signature
>2686	IdentifierDeclType	string
>2687	IdentifierDeclStatement	 
>2688	IdentifierDecl	content = c [ \"media\" ] [ \"signature\" ] -> getString ( )
>2689	AssignmentExpr	content = c [ \"media\" ] [ \"signature\" ] -> getString ( )
>2690	CallExpression	c [ \"media\" ] [ \"signature\" ] -> getString ( )
>2691	ArgumentList	 
>2692	Callee	c [ \"media\" ] [ \"signature\" ] -> getString
>2693	PtrMemberAccess	c [ \"media\" ] [ \"signature\" ] -> getString
>2694	Identifier	getString
>2695	ArrayIndexing	c [ \"media\" ] [ \"signature\" ]
>2696	PrimaryExpression	\"signature\"
>2697	ArrayIndexing	c [ \"media\" ]
>2698	PrimaryExpression	\"media\"
>2699	Identifier	c
>2700	Identifier	content
>2701	Identifier	content
>2702	IdentifierDeclType	string
>2703	IdentifierDeclStatement	 
>2704	IdentifierDecl	rval
>2705	Identifier	rval
>2706	IdentifierDeclType	bool
>2721	FunctionDef	Signer 
>2722	ParameterList	Contract & c , PublicKeyRef & pkey
>2723	Parameter	 
>2724	Identifier	pkey
>2725	ParameterType	PublicKeyRef &
>2726	Parameter	 
>2727	Identifier	c
>2728	ParameterType	Contract &
>2729	ReturnType	bool
>2730	CompoundStatement	 
>2731	ReturnStatement	 
>2732	Identifier	rval
>2733	IfStatement	if ( ! c -> hasMember ( \"signature\" ) )
>2734	ElseStatement	else
>2735	CompoundStatement	 
>2736	IfStatement	if ( ! verify ( pkey , content , c [ \"signature\" ] -> getString ( ) ) )
>2737	CompoundStatement	 
>2738	ExpressionStatement	 
>2739	AssignmentExpr	rval = false
>2740	Identifier	false
>2741	Identifier	rval
>2742	ExpressionStatement	 
>2743	CallExpression	Exception 
>2744	ArgumentList	e
>2745	Argument	e
>2746	Identifier	e
>2747	Callee	Exception 
>2748	Identifier	Exception 
>2749	IdentifierDeclStatement	 
>2750	IdentifierDecl	e = new Exception ( \"Could not verify Contract, the signature did not match.\" , \"bitmunk.common.VerifyContract\" )
>2751	AssignmentExpr	e = new Exception ( \"Could not verify Contract, the signature did not match.\" , \"bitmunk.common.VerifyContract\" )
>2752	Expression	\"Could not verify Contract, the signature did not match.\" , \"bitmunk.common.VerifyContract\"
>2753	PrimaryExpression	\"bitmunk.common.VerifyContract\"
>2754	PrimaryExpression	\"Could not verify Contract, the signature did not match.\"
>2755	Identifier	e
>2756	Identifier	e
>2757	IdentifierDeclType	ExceptionRef
>2758	Condition	 
>2759	UnaryOp	! verify ( pkey , content , c [ \"signature\" ] -> getString ( ) )
>2760	CallExpression	verify ( pkey , content , c [ \"signature\" ] -> getString ( ) )
>2761	ArgumentList	pkey
>2762	Argument	c [ \"signature\" ] -> getString ( )
>2763	CallExpression	c [ \"signature\" ] -> getString ( )
>2764	ArgumentList	 
>2765	Callee	c [ \"signature\" ] -> getString
>2766	PtrMemberAccess	c [ \"signature\" ] -> getString
>2767	Identifier	getString
>2768	ArrayIndexing	c [ \"signature\" ]
>2769	PrimaryExpression	\"signature\"
>2770	Identifier	c
>2771	Argument	content
>2772	Identifier	content
>2773	Argument	pkey
>2774	Identifier	pkey
>2775	Callee	verify
>2776	Identifier	verify
>2777	UnaryOperator	!
>2778	IdentifierDeclStatement	 
>2779	IdentifierDecl	content = c [ \"media\" ] [ \"signature\" ] -> getString ( )
>2780	AssignmentExpr	content = c [ \"media\" ] [ \"signature\" ] -> getString ( )
>2781	CallExpression	c [ \"media\" ] [ \"signature\" ] -> getString ( )
>2782	ArgumentList	 
>2783	Callee	c [ \"media\" ] [ \"signature\" ] -> getString
>2784	PtrMemberAccess	c [ \"media\" ] [ \"signature\" ] -> getString
>2785	Identifier	getString
>2786	ArrayIndexing	c [ \"media\" ] [ \"signature\" ]
>2787	PrimaryExpression	\"signature\"
>2788	ArrayIndexing	c [ \"media\" ]
>2789	PrimaryExpression	\"media\"
>2790	Identifier	c
>2791	Identifier	content
>2792	Identifier	content
>2793	IdentifierDeclType	string
>2794	CompoundStatement	 
>2795	ExpressionStatement	 
>2796	AssignmentExpr	rval = false
>2797	Identifier	false
>2798	Identifier	rval
>2799	ExpressionStatement	 
>2800	CallExpression	Exception 
>2801	ArgumentList	e
>2802	Argument	e
>2803	Identifier	e
>2804	Callee	Exception 
>2805	Identifier	Exception 
>2806	IdentifierDeclStatement	 
>2807	IdentifierDecl	e = new Exception ( \"Could not verify Contract, it has no signature.\" , \"bitmunk.common.VerifyContract\" )
>2808	AssignmentExpr	e = new Exception ( \"Could not verify Contract, it has no signature.\" , \"bitmunk.common.VerifyContract\" )
>2809	Expression	\"Could not verify Contract, it has no signature.\" , \"bitmunk.common.VerifyContract\"
>2810	PrimaryExpression	\"bitmunk.common.VerifyContract\"
>2811	PrimaryExpression	\"Could not verify Contract, it has no signature.\"
>2812	Identifier	e
>2813	Identifier	e
>2814	IdentifierDeclType	ExceptionRef
>2815	Condition	 
>2816	UnaryOp	! c -> hasMember ( \"signature\" )
>2817	CallExpression	c -> hasMember ( \"signature\" )
>2818	ArgumentList	\"signature\"
>2819	Argument	\"signature\"
>2820	PrimaryExpression	\"signature\"
>2821	Callee	c -> hasMember
>2822	PtrMemberAccess	c -> hasMember
>2823	Identifier	hasMember
>2824	Identifier	c
>2825	UnaryOperator	!
>2826	IdentifierDeclStatement	 
>2827	IdentifierDecl	rval = true
>2828	AssignmentExpr	rval = true
>2829	Identifier	true
>2830	Identifier	true
>2831	Identifier	rval
>2832	IdentifierDeclType	bool
>2850	FunctionDef	Signer 
>2851	ParameterList	ContractSection & cs , ProfileRef & p , bool seller
>2852	Parameter	 
>2853	Identifier	seller
>2854	ParameterType	bool
>2855	Parameter	 
>2856	Identifier	p
>2857	ParameterType	ProfileRef &
>2858	Parameter	 
>2859	Identifier	cs
>2860	ParameterType	ContractSection &
>2861	ReturnType	bool
>2862	CompoundStatement	 
>2863	ReturnStatement	 
>2864	Identifier	rval
>2865	IfStatement	if ( ( rval = sign ( p , content , signature ) ) )
>2866	CompoundStatement	 
>2867	IfStatement	if ( seller )
>2868	ElseStatement	else
>2869	CompoundStatement	 
>2870	ExpressionStatement	 
>2871	AssignmentExpr	cs [ \"buyerProfileId\" ] = p -> getId ( )
>2872	CallExpression	p -> getId ( )
>2873	ArgumentList	 
>2874	Callee	p -> getId
>2875	PtrMemberAccess	p -> getId
>2876	Identifier	getId
>2877	Identifier	p
>2878	ArrayIndexing	cs [ \"buyerProfileId\" ]
>2879	PrimaryExpression	\"buyerProfileId\"
>2880	Identifier	cs
>2881	ExpressionStatement	 
>2882	AssignmentExpr	cs [ \"buyerSignature\" ] = signature . c_str ( )
>2883	CallExpression	signature . c_str ( )
>2884	ArgumentList	 
>2885	Callee	signature . c_str
>2886	MemberAccess	signature . c_str
>2887	Identifier	c_str
>2888	Identifier	signature
>2889	ArrayIndexing	cs [ \"buyerSignature\" ]
>2890	PrimaryExpression	\"buyerSignature\"
>2891	Identifier	cs
>2892	CompoundStatement	 
>2893	ExpressionStatement	 
>2894	AssignmentExpr	cs [ \"sellerProfileId\" ] = p -> getId ( )
>2895	CallExpression	p -> getId ( )
>2896	ArgumentList	 
>2897	Callee	p -> getId
>2898	PtrMemberAccess	p -> getId
>2899	Identifier	getId
>2900	Identifier	p
>2901	ArrayIndexing	cs [ \"sellerProfileId\" ]
>2902	PrimaryExpression	\"sellerProfileId\"
>2903	Identifier	cs
>2904	ExpressionStatement	 
>2905	AssignmentExpr	cs [ \"sellerSignature\" ] = signature . c_str ( )
>2906	CallExpression	signature . c_str ( )
>2907	ArgumentList	 
>2908	Callee	signature . c_str
>2909	MemberAccess	signature . c_str
>2910	Identifier	c_str
>2911	Identifier	signature
>2912	ArrayIndexing	cs [ \"sellerSignature\" ]
>2913	PrimaryExpression	\"sellerSignature\"
>2914	Identifier	cs
>2915	Condition	 
>2916	Identifier	seller
>2917	Condition	 
>2918	AssignmentExpr	rval = sign ( p , content , signature )
>2919	CallExpression	sign ( p , content , signature )
>2920	ArgumentList	p
>2921	Argument	signature
>2922	Identifier	signature
>2923	Argument	content
>2924	Identifier	content
>2925	Argument	p
>2926	Identifier	p
>2927	Callee	sign
>2928	Identifier	sign
>2929	Identifier	rval
>2930	IdentifierDeclStatement	 
>2931	IdentifierDecl	signature
>2932	Identifier	signature
>2933	IdentifierDeclType	string
>2934	ExpressionStatement	 
>2935	CallExpression	appendContractSectionContent ( cs , content )
>2936	ArgumentList	cs
>2937	Argument	content
>2938	Identifier	content
>2939	Argument	cs
>2940	Identifier	cs
>2941	Callee	appendContractSectionContent
>2942	Identifier	appendContractSectionContent
>2943	IdentifierDeclStatement	 
>2944	IdentifierDecl	content
>2945	Identifier	content
>2946	IdentifierDeclType	string
>2947	IdentifierDeclStatement	 
>2948	IdentifierDecl	rval
>2949	Identifier	rval
>2950	IdentifierDeclType	bool
>2965	FunctionDef	Signer 
>2966	ParameterList	ContractSection & cs , PublicKeyRef & sellerKey , PublicKeyRef * buyerKey
>2967	Parameter	 
>2968	Identifier	buyerKey
>2969	ParameterType	PublicKeyRef *
>2970	Parameter	 
>2971	Identifier	sellerKey
>2972	ParameterType	PublicKeyRef &
>2973	Parameter	 
>2974	Identifier	cs
>2975	ParameterType	ContractSection &
>2976	ReturnType	bool
>2977	CompoundStatement	 
>2978	ReturnStatement	 
>2979	Identifier	rval
>2980	IfStatement	if ( rval )
>2981	CompoundStatement	 
>2982	IfStatement	if ( buyerKey != NULL )
>2983	CompoundStatement	 
>2984	IfStatement	if ( ! verify ( * buyerKey , content , cs [ \"buyerSignature\" ] -> getString ( ) ) )
>2985	CompoundStatement	 
>2986	ExpressionStatement	 
>2987	AssignmentExpr	rval = false
>2988	Identifier	false
>2989	Identifier	rval
>2990	ExpressionStatement	 
>2991	CallExpression	Exception 
>2992	ArgumentList	e
>2993	Argument	e
>2994	Identifier	e
>2995	Callee	Exception 
>2996	Identifier	Exception 
>2997	ExpressionStatement	 
>2998	Statement	 
>2999	Statement	 
>3000	Statement	 
>3001	Statement	 
>3002	Statement	 
>3003	Statement	 
>3004	Statement	 
>3005	Statement	 
>3006	Statement	 
>3007	Statement	 
>3008	Statement	 
>3009	Statement	 
>3010	Statement	 
>3011	Condition	 
>3012	UnaryOp	! verify ( * buyerKey , content , cs [ \"buyerSignature\" ] -> getString ( ) )
>3013	CallExpression	verify ( * buyerKey , content , cs [ \"buyerSignature\" ] -> getString ( ) )
>3014	ArgumentList	* buyerKey
>3015	Argument	cs [ \"buyerSignature\" ] -> getString ( )
>3016	CallExpression	cs [ \"buyerSignature\" ] -> getString ( )
>3017	ArgumentList	 
>3018	Callee	cs [ \"buyerSignature\" ] -> getString
>3019	PtrMemberAccess	cs [ \"buyerSignature\" ] -> getString
>3020	Identifier	getString
>3021	ArrayIndexing	cs [ \"buyerSignature\" ]
>3022	PrimaryExpression	\"buyerSignature\"
>3023	Identifier	cs
>3024	Argument	content
>3025	Identifier	content
>3026	Argument	* buyerKey
>3027	UnaryOp	* buyerKey
>3028	Identifier	buyerKey
>3029	UnaryOperator	*
>3030	Callee	verify
>3031	Identifier	verify
>3032	UnaryOperator	!
>3033	Condition	 
>3034	EqualityExpression	buyerKey != NULL
>3035	Identifier	NULL
>3036	Identifier	buyerKey
>3037	IfStatement	if ( ! verify ( sellerKey , content , cs [ \"sellerSignature\" ] -> getString ( ) ) )
>3038	CompoundStatement	 
>3039	ExpressionStatement	 
>3040	AssignmentExpr	rval = false
>3041	Identifier	false
>3042	Identifier	rval
>3043	ExpressionStatement	 
>3044	CallExpression	Exception 
>3045	ArgumentList	e
>3046	Argument	e
>3047	Identifier	e
>3048	Callee	Exception 
>3049	Identifier	Exception 
>3050	ExpressionStatement	 
>3051	Statement	 
>3052	Statement	 
>3053	Statement	 
>3054	Statement	 
>3055	Statement	 
>3056	Statement	 
>3057	Statement	 
>3058	Statement	 
>3059	Statement	 
>3060	Statement	 
>3061	Statement	 
>3062	Statement	 
>3063	Statement	 
>3064	Condition	 
>3065	UnaryOp	! verify ( sellerKey , content , cs [ \"sellerSignature\" ] -> getString ( ) )
>3066	CallExpression	verify ( sellerKey , content , cs [ \"sellerSignature\" ] -> getString ( ) )
>3067	ArgumentList	sellerKey
>3068	Argument	cs [ \"sellerSignature\" ] -> getString ( )
>3069	CallExpression	cs [ \"sellerSignature\" ] -> getString ( )
>3070	ArgumentList	 
>3071	Callee	cs [ \"sellerSignature\" ] -> getString
>3072	PtrMemberAccess	cs [ \"sellerSignature\" ] -> getString
>3073	Identifier	getString
>3074	ArrayIndexing	cs [ \"sellerSignature\" ]
>3075	PrimaryExpression	\"sellerSignature\"
>3076	Identifier	cs
>3077	Argument	content
>3078	Identifier	content
>3079	Argument	sellerKey
>3080	Identifier	sellerKey
>3081	Callee	verify
>3082	Identifier	verify
>3083	UnaryOperator	!
>3084	ExpressionStatement	 
>3085	CallExpression	appendContractSectionContent ( cs , content )
>3086	ArgumentList	cs
>3087	Argument	content
>3088	Identifier	content
>3089	Argument	cs
>3090	Identifier	cs
>3091	Callee	appendContractSectionContent
>3092	Identifier	appendContractSectionContent
>3093	IdentifierDeclStatement	 
>3094	IdentifierDecl	content
>3095	Identifier	content
>3096	IdentifierDeclType	string
>3097	Condition	 
>3098	Identifier	rval
>3099	IfStatement	if ( ! cs -> hasMember ( \"sellerSignature\" ) )
>3100	ElseStatement	else
>3101	IfStatement	if ( buyerKey != NULL )
>3102	CompoundStatement	 
>3103	IfStatement	if ( ! cs -> hasMember ( \"buyerSignature\" ) )
>3104	CompoundStatement	 
>3105	ExpressionStatement	 
>3106	AssignmentExpr	rval = false
>3107	Identifier	false
>3108	Identifier	rval
>3109	ExpressionStatement	 
>3110	CallExpression	Exception 
>3111	ArgumentList	e
>3112	Argument	e
>3113	Identifier	e
>3114	Callee	Exception 
>3115	Identifier	Exception 
>3116	IdentifierDeclStatement	 
>3117	IdentifierDecl	e = new Exception ( \"Could not verify ContractSection, it has no buyer signature.\" , \"bitmunk.common.VerifyContractSection\" )
>3118	AssignmentExpr	e = new Exception ( \"Could not verify ContractSection, it has no buyer signature.\" , \"bitmunk.common.VerifyContractSection\" )
>3119	Expression	\"Could not verify ContractSection, it has no buyer signature.\" , \"bitmunk.common.VerifyContractSection\"
>3120	PrimaryExpression	\"bitmunk.common.VerifyContractSection\"
>3121	PrimaryExpression	\"Could not verify ContractSection, it has no buyer signature.\"
>3122	Identifier	e
>3123	Identifier	e
>3124	IdentifierDeclType	ExceptionRef
>3125	Condition	 
>3126	UnaryOp	! cs -> hasMember ( \"buyerSignature\" )
>3127	CallExpression	cs -> hasMember ( \"buyerSignature\" )
>3128	ArgumentList	\"buyerSignature\"
>3129	Argument	\"buyerSignature\"
>3130	PrimaryExpression	\"buyerSignature\"
>3131	Callee	cs -> hasMember
>3132	PtrMemberAccess	cs -> hasMember
>3133	Identifier	hasMember
>3134	Identifier	cs
>3135	UnaryOperator	!
>3136	Condition	 
>3137	EqualityExpression	buyerKey != NULL
>3138	Identifier	NULL
>3139	Identifier	buyerKey
>3140	CompoundStatement	 
>3141	ExpressionStatement	 
>3142	AssignmentExpr	rval = false
>3143	Identifier	false
>3144	Identifier	rval
>3145	ExpressionStatement	 
>3146	CallExpression	Exception 
>3147	ArgumentList	e
>3148	Argument	e
>3149	Identifier	e
>3150	Callee	Exception 
>3151	Identifier	Exception 
>3152	IdentifierDeclStatement	 
>3153	IdentifierDecl	e = new Exception ( \"Could not verify ContractSection, it has no seller signature.\" , \"bitmunk.common.VerifyContractSection\" )
>3154	AssignmentExpr	e = new Exception ( \"Could not verify ContractSection, it has no seller signature.\" , \"bitmunk.common.VerifyContractSection\" )
>3155	Expression	\"Could not verify ContractSection, it has no seller signature.\" , \"bitmunk.common.VerifyContractSection\"
>3156	PrimaryExpression	\"bitmunk.common.VerifyContractSection\"
>3157	PrimaryExpression	\"Could not verify ContractSection, it has no seller signature.\"
>3158	Identifier	e
>3159	Identifier	e
>3160	IdentifierDeclType	ExceptionRef
>3161	Condition	 
>3162	UnaryOp	! cs -> hasMember ( \"sellerSignature\" )
>3163	CallExpression	cs -> hasMember ( \"sellerSignature\" )
>3164	ArgumentList	\"sellerSignature\"
>3165	Argument	\"sellerSignature\"
>3166	PrimaryExpression	\"sellerSignature\"
>3167	Callee	cs -> hasMember
>3168	PtrMemberAccess	cs -> hasMember
>3169	Identifier	hasMember
>3170	Identifier	cs
>3171	UnaryOperator	!
>3172	IdentifierDeclStatement	 
>3173	IdentifierDecl	rval = true
>3174	AssignmentExpr	rval = true
>3175	Identifier	true
>3176	Identifier	true
>3177	Identifier	rval
>3178	IdentifierDeclType	bool
>3198	FunctionDef	Signer 
>3199	ParameterList	const char * csHash , FileId fileId , FilePiece & fp , ProfileRef & p , bool seller
>3200	Parameter	 
>3201	Identifier	seller
>3202	ParameterType	bool
>3203	Parameter	 
>3204	Identifier	p
>3205	ParameterType	ProfileRef &
>3206	Parameter	 
>3207	Identifier	fp
>3208	ParameterType	FilePiece &
>3209	Parameter	 
>3210	Identifier	fileId
>3211	ParameterType	FileId
>3212	Parameter	 
>3213	Identifier	csHash
>3214	ParameterType	const char *
>3215	ReturnType	bool
>3216	CompoundStatement	 
>3217	ReturnStatement	 
>3218	Identifier	rval
>3219	IfStatement	if ( ( rval = sign ( p , content , signature ) ) )
>3220	CompoundStatement	 
>3221	IfStatement	if ( seller )
>3222	ElseStatement	else
>3223	CompoundStatement	 
>3224	ExpressionStatement	 
>3225	AssignmentExpr	fp [ \"bfpId\" ] = p -> getId ( )
>3226	CallExpression	p -> getId ( )
>3227	ArgumentList	 
>3228	Callee	p -> getId
>3229	PtrMemberAccess	p -> getId
>3230	Identifier	getId
>3231	Identifier	p
>3232	ArrayIndexing	fp [ \"bfpId\" ]
>3233	PrimaryExpression	\"bfpId\"
>3234	Identifier	fp
>3235	ExpressionStatement	 
>3236	AssignmentExpr	fp [ \"bfpSignature\" ] = signature . c_str ( )
>3237	CallExpression	signature . c_str ( )
>3238	ArgumentList	 
>3239	Callee	signature . c_str
>3240	MemberAccess	signature . c_str
>3241	Identifier	c_str
>3242	Identifier	signature
>3243	ArrayIndexing	fp [ \"bfpSignature\" ]
>3244	PrimaryExpression	\"bfpSignature\"
>3245	Identifier	fp
>3246	CompoundStatement	 
>3247	ExpressionStatement	 
>3248	AssignmentExpr	fp [ \"sellerProfileId\" ] = p -> getId ( )
>3249	CallExpression	p -> getId ( )
>3250	ArgumentList	 
>3251	Callee	p -> getId
>3252	PtrMemberAccess	p -> getId
>3253	Identifier	getId
>3254	Identifier	p
>3255	ArrayIndexing	fp [ \"sellerProfileId\" ]
>3256	PrimaryExpression	\"sellerProfileId\"
>3257	Identifier	fp
>3258	ExpressionStatement	 
>3259	AssignmentExpr	fp [ \"sellerSignature\" ] = signature . c_str ( )
>3260	CallExpression	signature . c_str ( )
>3261	ArgumentList	 
>3262	Callee	signature . c_str
>3263	MemberAccess	signature . c_str
>3264	Identifier	c_str
>3265	Identifier	signature
>3266	ArrayIndexing	fp [ \"sellerSignature\" ]
>3267	PrimaryExpression	\"sellerSignature\"
>3268	Identifier	fp
>3269	Condition	 
>3270	Identifier	seller
>3271	Condition	 
>3272	AssignmentExpr	rval = sign ( p , content , signature )
>3273	CallExpression	sign ( p , content , signature )
>3274	ArgumentList	p
>3275	Argument	signature
>3276	Identifier	signature
>3277	Argument	content
>3278	Identifier	content
>3279	Argument	p
>3280	Identifier	p
>3281	Callee	sign
>3282	Identifier	sign
>3283	Identifier	rval
>3284	IdentifierDeclStatement	 
>3285	IdentifierDecl	signature
>3286	Identifier	signature
>3287	IdentifierDeclType	string
>3288	ExpressionStatement	 
>3289	CallExpression	appendFilePieceContent ( csHash , fileId , fp , content )
>3290	ArgumentList	csHash
>3291	Argument	content
>3292	Identifier	content
>3293	Argument	fp
>3294	Identifier	fp
>3295	Argument	fileId
>3296	Identifier	fileId
>3297	Argument	csHash
>3298	Identifier	csHash
>3299	Callee	appendFilePieceContent
>3300	Identifier	appendFilePieceContent
>3301	IdentifierDeclStatement	 
>3302	IdentifierDecl	content
>3303	Identifier	content
>3304	IdentifierDeclType	string
>3305	IdentifierDeclStatement	 
>3306	IdentifierDecl	rval
>3307	Identifier	rval
>3308	IdentifierDeclType	bool
>3325	FunctionDef	Signer 
>3326	ParameterList	const char * csHash , FileId fileId , FilePiece & fp , PublicKeyRef & pkey , bool seller
>3327	Parameter	 
>3328	Identifier	seller
>3329	ParameterType	bool
>3330	Parameter	 
>3331	Identifier	pkey
>3332	ParameterType	PublicKeyRef &
>3333	Parameter	 
>3334	Identifier	fp
>3335	ParameterType	FilePiece &
>3336	Parameter	 
>3337	Identifier	fileId
>3338	ParameterType	FileId
>3339	Parameter	 
>3340	Identifier	csHash
>3341	ParameterType	const char *
>3342	ReturnType	bool
>3343	CompoundStatement	 
>3344	ReturnStatement	 
>3345	Identifier	rval
>3346	IfStatement	if ( ! fp -> hasMember ( sigKey ) )
>3347	ElseStatement	else
>3348	CompoundStatement	 
>3349	IfStatement	if ( ! verify ( pkey , content , fp [ sigKey ] -> getString ( ) ) )
>3350	CompoundStatement	 
>3351	ExpressionStatement	 
>3352	AssignmentExpr	rval = false
>3353	Identifier	false
>3354	Identifier	rval
>3355	ExpressionStatement	 
>3356	CallExpression	Exception 
>3357	ArgumentList	e
>3358	Argument	e
>3359	Identifier	e
>3360	Callee	Exception 
>3361	Identifier	Exception 
>3362	ExpressionStatement	 
>3363	AssignmentExpr	e -> getDetails ( ) [ \"bfp\" ] = ! seller
>3364	UnaryOp	! seller
>3365	Identifier	seller
>3366	UnaryOperator	!
>3367	ArrayIndexing	e -> getDetails ( ) [ \"bfp\" ]
>3368	PrimaryExpression	\"bfp\"
>3369	CallExpression	e -> getDetails ( )
>3370	ArgumentList	 
>3371	Callee	e -> getDetails
>3372	PtrMemberAccess	e -> getDetails
>3373	Identifier	getDetails
>3374	Identifier	e
>3375	ExpressionStatement	 
>3376	AssignmentExpr	e -> getDetails ( ) [ \"seller\" ] = seller
>3377	Identifier	seller
>3378	ArrayIndexing	e -> getDetails ( ) [ \"seller\" ]
>3379	PrimaryExpression	\"seller\"
>3380	CallExpression	e -> getDetails ( )
>3381	ArgumentList	 
>3382	Callee	e -> getDetails
>3383	PtrMemberAccess	e -> getDetails
>3384	Identifier	getDetails
>3385	Identifier	e
>3386	IdentifierDeclStatement	 
>3387	IdentifierDecl	e = new Exception ( \"Could not verify FilePiece, the signature did not match.\" , \"bitmunk.common.VerifyFilePiece\" )
>3388	AssignmentExpr	e = new Exception ( \"Could not verify FilePiece, the signature did not match.\" , \"bitmunk.common.VerifyFilePiece\" )
>3389	Expression	\"Could not verify FilePiece, the signature did not match.\" , \"bitmunk.common.VerifyFilePiece\"
>3390	PrimaryExpression	\"bitmunk.common.VerifyFilePiece\"
>3391	PrimaryExpression	\"Could not verify FilePiece, the signature did not match.\"
>3392	Identifier	e
>3393	Identifier	e
>3394	IdentifierDeclType	ExceptionRef
>3395	Condition	 
>3396	UnaryOp	! verify ( pkey , content , fp [ sigKey ] -> getString ( ) )
>3397	CallExpression	verify ( pkey , content , fp [ sigKey ] -> getString ( ) )
>3398	ArgumentList	pkey
>3399	Argument	fp [ sigKey ] -> getString ( )
>3400	CallExpression	fp [ sigKey ] -> getString ( )
>3401	ArgumentList	 
>3402	Callee	fp [ sigKey ] -> getString
>3403	PtrMemberAccess	fp [ sigKey ] -> getString
>3404	Identifier	getString
>3405	ArrayIndexing	fp [ sigKey ]
>3406	Identifier	sigKey
>3407	Identifier	fp
>3408	Argument	content
>3409	Identifier	content
>3410	Argument	pkey
>3411	Identifier	pkey
>3412	Callee	verify
>3413	Identifier	verify
>3414	UnaryOperator	!
>3415	ExpressionStatement	 
>3416	CallExpression	appendFilePieceContent ( csHash , fileId , fp , content )
>3417	ArgumentList	csHash
>3418	Argument	content
>3419	Identifier	content
>3420	Argument	fp
>3421	Identifier	fp
>3422	Argument	fileId
>3423	Identifier	fileId
>3424	Argument	csHash
>3425	Identifier	csHash
>3426	Callee	appendFilePieceContent
>3427	Identifier	appendFilePieceContent
>3428	IdentifierDeclStatement	 
>3429	IdentifierDecl	content
>3430	Identifier	content
>3431	IdentifierDeclType	string
>3432	CompoundStatement	 
>3433	ExpressionStatement	 
>3434	AssignmentExpr	rval = false
>3435	Identifier	false
>3436	Identifier	rval
>3437	ExpressionStatement	 
>3438	CallExpression	Exception 
>3439	ArgumentList	e
>3440	Argument	e
>3441	Identifier	e
>3442	Callee	Exception 
>3443	Identifier	Exception 
>3444	ExpressionStatement	 
>3445	AssignmentExpr	e -> getDetails ( ) [ \"bfp\" ] = ! seller
>3446	UnaryOp	! seller
>3447	Identifier	seller
>3448	UnaryOperator	!
>3449	ArrayIndexing	e -> getDetails ( ) [ \"bfp\" ]
>3450	PrimaryExpression	\"bfp\"
>3451	CallExpression	e -> getDetails ( )
>3452	ArgumentList	 
>3453	Callee	e -> getDetails
>3454	PtrMemberAccess	e -> getDetails
>3455	Identifier	getDetails
>3456	Identifier	e
>3457	ExpressionStatement	 
>3458	AssignmentExpr	e -> getDetails ( ) [ \"seller\" ] = seller
>3459	Identifier	seller
>3460	ArrayIndexing	e -> getDetails ( ) [ \"seller\" ]
>3461	PrimaryExpression	\"seller\"
>3462	CallExpression	e -> getDetails ( )
>3463	ArgumentList	 
>3464	Callee	e -> getDetails
>3465	PtrMemberAccess	e -> getDetails
>3466	Identifier	getDetails
>3467	Identifier	e
>3468	IdentifierDeclStatement	 
>3469	IdentifierDecl	e = new Exception ( \"Could not verify FilePiece, it has no signature.\" , \"bitmunk.common.VerifyFilePiece\" )
>3470	AssignmentExpr	e = new Exception ( \"Could not verify FilePiece, it has no signature.\" , \"bitmunk.common.VerifyFilePiece\" )
>3471	Expression	\"Could not verify FilePiece, it has no signature.\" , \"bitmunk.common.VerifyFilePiece\"
>3472	PrimaryExpression	\"bitmunk.common.VerifyFilePiece\"
>3473	PrimaryExpression	\"Could not verify FilePiece, it has no signature.\"
>3474	Identifier	e
>3475	Identifier	e
>3476	IdentifierDeclType	ExceptionRef
>3477	Condition	 
>3478	UnaryOp	! fp -> hasMember ( sigKey )
>3479	CallExpression	fp -> hasMember ( sigKey )
>3480	ArgumentList	sigKey
>3481	Argument	sigKey
>3482	Identifier	sigKey
>3483	Callee	fp -> hasMember
>3484	PtrMemberAccess	fp -> hasMember
>3485	Identifier	hasMember
>3486	Identifier	fp
>3487	UnaryOperator	!
>3488	IdentifierDeclStatement	 
>3489	IdentifierDecl	* sigKey = ( seller ) ? \"sellerSignature\" 
>3490	AssignmentExpr	* sigKey = ( seller ) ? \"sellerSignature\" 
>3491	ConditionalExpression	( seller ) ? \"sellerSignature\" 
>3492	PrimaryExpression	\"bfpSignature\"
>3493	PrimaryExpression	\"sellerSignature\"
>3494	Condition	seller
>3495	Identifier	seller
>3496	Identifier	sigKey
>3497	Identifier	sigKey
>3498	IdentifierDeclType	const char *
>3499	IdentifierDeclStatement	 
>3500	IdentifierDecl	rval = true
>3501	AssignmentExpr	rval = true
>3502	Identifier	true
>3503	Identifier	true
>3504	Identifier	rval
>3505	IdentifierDeclType	bool
>3531	FunctionDef	Signer 
>3532	ParameterList	Deposit & d , ProfileRef & p
>3533	Parameter	 
>3534	Identifier	p
>3535	ParameterType	ProfileRef &
>3536	Parameter	 
>3537	Identifier	d
>3538	ParameterType	Deposit &
>3539	ReturnType	bool
>3540	CompoundStatement	 
>3541	ReturnStatement	 
>3542	Identifier	rval
>3543	IfStatement	if ( ( rval = sign ( p , content , signature ) ) )
>3544	ElseStatement	else
>3545	CompoundStatement	 
>3546	ExpressionStatement	 
>3547	CallExpression	d -> removeMember ( \"signatureVersion\" )
>3548	ArgumentList	\"signatureVersion\"
>3549	Argument	\"signatureVersion\"
>3550	PrimaryExpression	\"signatureVersion\"
>3551	Callee	d -> removeMember
>3552	PtrMemberAccess	d -> removeMember
>3553	Identifier	removeMember
>3554	Identifier	d
>3555	CompoundStatement	 
>3556	ExpressionStatement	 
>3557	AssignmentExpr	d [ \"signer\" ] [ \"profileId\" ] = p -> getId ( )
>3558	CallExpression	p -> getId ( )
>3559	ArgumentList	 
>3560	Callee	p -> getId
>3561	PtrMemberAccess	p -> getId
>3562	Identifier	getId
>3563	Identifier	p
>3564	ArrayIndexing	d [ \"signer\" ] [ \"profileId\" ]
>3565	PrimaryExpression	\"profileId\"
>3566	ArrayIndexing	d [ \"signer\" ]
>3567	PrimaryExpression	\"signer\"
>3568	Identifier	d
>3569	ExpressionStatement	 
>3570	AssignmentExpr	d [ \"signer\" ] [ \"userId\" ] = p -> getUserId ( )
>3571	CallExpression	p -> getUserId ( )
>3572	ArgumentList	 
>3573	Callee	p -> getUserId
>3574	PtrMemberAccess	p -> getUserId
>3575	Identifier	getUserId
>3576	Identifier	p
>3577	ArrayIndexing	d [ \"signer\" ] [ \"userId\" ]
>3578	PrimaryExpression	\"userId\"
>3579	ArrayIndexing	d [ \"signer\" ]
>3580	PrimaryExpression	\"signer\"
>3581	Identifier	d
>3582	ExpressionStatement	 
>3583	AssignmentExpr	d [ \"signature\" ] = signature . c_str ( )
>3584	CallExpression	signature . c_str ( )
>3585	ArgumentList	 
>3586	Callee	signature . c_str
>3587	MemberAccess	signature . c_str
>3588	Identifier	c_str
>3589	Identifier	signature
>3590	ArrayIndexing	d [ \"signature\" ]
>3591	PrimaryExpression	\"signature\"
>3592	Identifier	d
>3593	Condition	 
>3594	AssignmentExpr	rval = sign ( p , content , signature )
>3595	CallExpression	sign ( p , content , signature )
>3596	ArgumentList	p
>3597	Argument	signature
>3598	Identifier	signature
>3599	Argument	content
>3600	Identifier	content
>3601	Argument	p
>3602	Identifier	p
>3603	Callee	sign
>3604	Identifier	sign
>3605	Identifier	rval
>3606	IdentifierDeclStatement	 
>3607	IdentifierDecl	signature
>3608	Identifier	signature
>3609	IdentifierDeclType	string
>3610	ExpressionStatement	 
>3611	CallExpression	appendDepositContent ( d , content )
>3612	ArgumentList	d
>3613	Argument	content
>3614	Identifier	content
>3615	Argument	d
>3616	Identifier	d
>3617	Callee	appendDepositContent
>3618	Identifier	appendDepositContent
>3619	IdentifierDeclStatement	 
>3620	IdentifierDecl	content
>3621	Identifier	content
>3622	IdentifierDeclType	string
>3623	ExpressionStatement	 
>3624	AssignmentExpr	d [ \"signatureVersion\" ] = 2
>3625	PrimaryExpression	2
>3626	ArrayIndexing	d [ \"signatureVersion\" ]
>3627	PrimaryExpression	\"signatureVersion\"
>3628	Identifier	d
>3629	IdentifierDeclStatement	 
>3630	IdentifierDecl	rval
>3631	Identifier	rval
>3632	IdentifierDeclType	bool
>3648	FunctionDef	Signer 
>3649	ParameterList	Deposit & d , PublicKeyRef & pkey
>3650	Parameter	 
>3651	Identifier	pkey
>3652	ParameterType	PublicKeyRef &
>3653	Parameter	 
>3654	Identifier	d
>3655	ParameterType	Deposit &
>3656	ReturnType	bool
>3657	CompoundStatement	 
>3658	ReturnStatement	 
>3659	Identifier	rval
>3660	IfStatement	if ( ! d -> hasMember ( \"signature\" ) )
>3661	ElseStatement	else
>3662	CompoundStatement	 
>3663	IfStatement	if ( ! verify ( pkey , content , d [ \"signature\" ] -> getString ( ) ) )
>3664	CompoundStatement	 
>3665	ExpressionStatement	 
>3666	AssignmentExpr	rval = false
>3667	Identifier	false
>3668	Identifier	rval
>3669	ExpressionStatement	 
>3670	CallExpression	Exception 
>3671	ArgumentList	e
>3672	Argument	e
>3673	Identifier	e
>3674	Callee	Exception 
>3675	Identifier	Exception 
>3676	IdentifierDeclStatement	 
>3677	IdentifierDecl	e = new Exception ( \"Could not verify Deposit, the signature did not match.\" , \"bitmunk.common.VerifyDeposit\" )
>3678	AssignmentExpr	e = new Exception ( \"Could not verify Deposit, the signature did not match.\" , \"bitmunk.common.VerifyDeposit\" )
>3679	Expression	\"Could not verify Deposit, the signature did not match.\" , \"bitmunk.common.VerifyDeposit\"
>3680	PrimaryExpression	\"bitmunk.common.VerifyDeposit\"
>3681	PrimaryExpression	\"Could not verify Deposit, the signature did not match.\"
>3682	Identifier	e
>3683	Identifier	e
>3684	IdentifierDeclType	ExceptionRef
>3685	Condition	 
>3686	UnaryOp	! verify ( pkey , content , d [ \"signature\" ] -> getString ( ) )
>3687	CallExpression	verify ( pkey , content , d [ \"signature\" ] -> getString ( ) )
>3688	ArgumentList	pkey
>3689	Argument	d [ \"signature\" ] -> getString ( )
>3690	CallExpression	d [ \"signature\" ] -> getString ( )
>3691	ArgumentList	 
>3692	Callee	d [ \"signature\" ] -> getString
>3693	PtrMemberAccess	d [ \"signature\" ] -> getString
>3694	Identifier	getString
>3695	ArrayIndexing	d [ \"signature\" ]
>3696	PrimaryExpression	\"signature\"
>3697	Identifier	d
>3698	Argument	content
>3699	Identifier	content
>3700	Argument	pkey
>3701	Identifier	pkey
>3702	Callee	verify
>3703	Identifier	verify
>3704	UnaryOperator	!
>3705	ExpressionStatement	 
>3706	CallExpression	appendDepositContent ( d , content )
>3707	ArgumentList	d
>3708	Argument	content
>3709	Identifier	content
>3710	Argument	d
>3711	Identifier	d
>3712	Callee	appendDepositContent
>3713	Identifier	appendDepositContent
>3714	IdentifierDeclStatement	 
>3715	IdentifierDecl	content
>3716	Identifier	content
>3717	IdentifierDeclType	string
>3718	CompoundStatement	 
>3719	ExpressionStatement	 
>3720	AssignmentExpr	rval = false
>3721	Identifier	false
>3722	Identifier	rval
>3723	ExpressionStatement	 
>3724	CallExpression	Exception 
>3725	ArgumentList	e
>3726	Argument	e
>3727	Identifier	e
>3728	Callee	Exception 
>3729	Identifier	Exception 
>3730	IdentifierDeclStatement	 
>3731	IdentifierDecl	e = new Exception ( \"Could not verify Deposit, it has no signature.\" , \"bitmunk.common.VerifyDeposit\" )
>3732	AssignmentExpr	e = new Exception ( \"Could not verify Deposit, it has no signature.\" , \"bitmunk.common.VerifyDeposit\" )
>3733	Expression	\"Could not verify Deposit, it has no signature.\" , \"bitmunk.common.VerifyDeposit\"
>3734	PrimaryExpression	\"bitmunk.common.VerifyDeposit\"
>3735	PrimaryExpression	\"Could not verify Deposit, it has no signature.\"
>3736	Identifier	e
>3737	Identifier	e
>3738	IdentifierDeclType	ExceptionRef
>3739	Condition	 
>3740	UnaryOp	! d -> hasMember ( \"signature\" )
>3741	CallExpression	d -> hasMember ( \"signature\" )
>3742	ArgumentList	\"signature\"
>3743	Argument	\"signature\"
>3744	PrimaryExpression	\"signature\"
>3745	Callee	d -> hasMember
>3746	PtrMemberAccess	d -> hasMember
>3747	Identifier	hasMember
>3748	Identifier	d
>3749	UnaryOperator	!
>3750	IdentifierDeclStatement	 
>3751	IdentifierDecl	rval = true
>3752	AssignmentExpr	rval = true
>3753	Identifier	true
>3754	Identifier	true
>3755	Identifier	rval
>3756	IdentifierDeclType	bool
<3=15,14,4
<4=11,8,5
<5=7,6
<8=10,9
<11=13,12
<15=125,113,18,16
<16=17
<18=109,41,19
<19=20
<20=32,25,21
<21=22
<22=24,23
<25=26
<26=30,27
<27=28
<28=29
<30=31
<32=33
<33=40,39,34
<34=38,35
<35=37,36
<41=88,76,71,60,59,57,46,42
<42=43
<43=45,44
<46=47
<47=56,48
<48=54,49
<49=52,50
<50=51
<52=53
<54=55
<57=58
<60=61
<61=67,62
<62=65,63
<63=64
<65=66
<67=68
<68=70,69
<71=72
<72=75,74,73
<76=77
<77=87,86,78
<78=85,79
<79=81,80
<81=82
<82=84,83
<88=89
<89=105,90
<90=98,91
<91=92
<92=94,93
<94=95
<95=97,96
<98=99
<99=101,100
<101=102
<102=104,103
<105=106
<106=108,107
<109=110
<110=112,111
<113=114
<114=124,123,115
<115=122,116
<116=118,117
<118=119
<119=121,120
<125=126
<126=128,127
<150=162,161,151
<151=158,155,152
<152=154,153
<155=157,156
<158=160,159
<162=254,249,228,216,211,198,165,163
<163=164
<165=183,166
<166=174,167
<167=168
<168=172,169
<169=170
<170=171
<172=173
<174=175
<175=182,181,176
<176=180,177
<177=179,178
<183=184
<184=197,185
<185=196,186
<186=192,187
<187=190,188
<188=189
<190=191
<192=193
<193=195,194
<198=199
<199=209,200
<200=207,205,203,201
<201=202
<203=204
<205=206
<207=208
<209=210
<211=212
<212=215,214,213
<216=217
<217=227,226,218
<218=225,219
<219=223,220
<220=221
<221=222
<223=224
<228=229
<229=245,230
<230=238,231
<231=232
<232=234,233
<234=235
<235=237,236
<238=239
<239=241,240
<241=242
<242=244,243
<245=246
<246=248,247
<249=250
<250=253,252,251
<254=255
<255=257,256
<273=282,281,274
<274=278,275
<275=277,276
<278=280,279
<282=449,433,417,401,385,369,353,337,321,305,294,283
<283=284
<284=292,285
<285=288,286
<286=287
<288=289
<289=291,290
<292=293
<294=295
<295=299,296
<296=297
<297=298
<299=300
<300=302,301
<302=304,303
<305=306
<306=317,307
<307=308
<308=309
<309=311,310
<311=312
<312=314,313
<314=316,315
<317=318
<318=320,319
<321=322
<322=333,323
<323=324
<324=325
<325=327,326
<327=328
<328=330,329
<330=332,331
<333=334
<334=336,335
<337=338
<338=349,339
<339=340
<340=341
<341=343,342
<343=344
<344=346,345
<346=348,347
<349=350
<350=352,351
<353=354
<354=365,355
<355=356
<356=357
<357=359,358
<359=360
<360=362,361
<362=364,363
<365=366
<366=368,367
<369=370
<370=381,371
<371=372
<372=373
<373=375,374
<375=376
<376=378,377
<378=380,379
<381=382
<382=384,383
<385=386
<386=397,387
<387=388
<388=389
<389=391,390
<391=392
<392=394,393
<394=396,395
<397=398
<398=400,399
<401=402
<402=413,403
<403=404
<404=405
<405=407,406
<407=408
<408=410,409
<410=412,411
<413=414
<414=416,415
<417=418
<418=429,419
<419=420
<420=421
<421=423,422
<423=424
<424=426,425
<426=428,427
<429=430
<430=432,431
<433=434
<434=445,435
<435=436
<436=437
<437=439,438
<439=440
<440=442,441
<442=444,443
<445=446
<446=448,447
<449=450
<450=461,451
<451=452
<452=453
<453=455,454
<455=456
<456=458,457
<458=460,459
<461=462
<462=464,463
<483=492,491,484
<484=488,485
<485=487,486
<488=490,489
<492=766,669,493
<493=658,644,614,603,592,562,546,535,524,494
<494=517,495
<495=505,496
<496=497
<497=503,498
<498=501,499
<499=500
<501=502
<503=504
<505=506
<506=516,515,507
<507=514,508
<508=510,509
<510=511
<511=513,512
<517=518
<518=520,519
<520=521
<521=523,522
<524=525
<525=534,526
<526=528,527
<528=529
<529=531,530
<531=533,532
<535=536
<536=540,537
<537=538
<538=539
<540=541
<541=543,542
<543=545,544
<546=547
<547=558,548
<548=549
<549=550
<550=552,551
<552=553
<553=555,554
<555=557,556
<558=559
<559=561,560
<562=585,563
<563=573,564
<564=565
<565=571,566
<566=569,567
<567=568
<569=570
<571=572
<573=574
<574=584,583,575
<575=582,576
<576=578,577
<578=579
<579=581,580
<585=586
<586=588,587
<588=589
<589=591,590
<592=593
<593=602,594
<594=596,595
<596=597
<597=599,598
<599=601,600
<603=604
<604=608,605
<605=606
<606=607
<608=609
<609=611,610
<611=613,612
<614=637,615
<615=625,616
<616=617
<617=623,618
<618=621,619
<619=620
<621=622
<623=624
<625=626
<626=636,635,627
<627=634,628
<628=630,629
<630=631
<631=633,632
<637=638
<638=640,639
<640=641
<641=643,642
<644=645
<645=657,656,646
<646=655,647
<647=649,648
<649=650
<650=652,651
<652=654,653
<658=659
<659=663,660
<660=661
<661=662
<663=664
<664=666,665
<666=668,667
<669=748,670
<670=734,671
<671=727,672
<672=715,703,673
<673=696,674
<674=684,675
<675=676
<676=682,677
<677=680,678
<678=679
<680=681
<682=683
<684=685
<685=695,694,686
<686=693,687
<687=689,688
<689=690
<690=692,691
<696=697
<697=699,698
<699=700
<700=702,701
<703=704
<704=714,713,705
<705=712,706
<706=708,707
<708=709
<709=711,710
<715=716
<716=726,725,717
<717=724,718
<718=720,719
<720=721
<721=723,722
<727=728
<728=730,729
<730=731
<731=733,732
<734=735
<735=747,746,736
<736=745,737
<737=739,738
<739=740
<740=742,741
<742=744,743
<748=749
<749=751,750
<751=764,752
<752=755,753
<753=754
<755=756
<756=758,757
<758=759
<759=761,760
<761=763,762
<764=765
<766=767
<767=773,768
<768=771,769
<769=770
<771=772
<773=774
<807=816,815,808
<808=812,809
<809=811,810
<812=814,813
<816=1000,986,977,883,864,844,817
<817=835,818
<818=819
<819=820
<820=831,821
<821=822
<822=823
<823=825,824
<825=826
<826=828,827
<828=830,829
<831=832
<832=834,833
<835=836
<836=840,837
<837=838
<838=839
<840=841
<841=843,842
<844=845
<845=860,846
<846=847
<847=848
<848=851,850,849
<851=852
<852=854,853
<854=855
<855=857,856
<857=859,858
<860=861
<861=863,862
<864=874,865
<865=866
<866=867
<867=871,868
<868=870,869
<871=873,872
<874=875
<875=879,876
<876=877
<877=878
<879=880
<880=882,881
<883=966,949,884
<884=885
<885=902,886
<886=887
<887=898,888
<888=889
<889=890
<890=892,891
<892=893
<893=895,894
<895=897,896
<898=899
<899=901,900
<902=940,914,903
<903=904
<904=905
<905=906
<906=910,907
<907=908
<908=909
<910=911
<911=913,912
<914=931,915
<915=916
<916=927,917
<917=918
<918=919
<919=921,920
<921=922
<922=924,923
<924=926,925
<927=928
<928=930,929
<931=932
<932=936,933
<933=934
<934=935
<936=937
<937=939,938
<940=941
<941=943,942
<943=944
<944=946,945
<946=948,947
<949=950
<950=951
<951=962,952
<952=953
<953=954
<954=956,955
<956=957
<957=959,958
<959=961,960
<962=963
<963=965,964
<966=967
<967=969,968
<969=975,970
<970=973,971
<971=972
<973=974
<975=976
<977=978
<978=982,979
<979=980
<980=981
<982=983
<983=985,984
<986=987
<987=999,998,988
<988=997,989
<989=991,990
<991=992
<992=994,993
<994=996,995
<1000=1001
<1001=1012,1002
<1002=1003
<1003=1004
<1004=1006,1005
<1006=1007
<1007=1009,1008
<1009=1011,1010
<1012=1013
<1013=1015,1014
<1034=1043,1042,1035
<1035=1039,1036
<1036=1038,1037
<1039=1041,1040
<1043=1076,1060,1044
<1044=1045
<1045=1056,1046
<1046=1047
<1047=1048
<1048=1050,1049
<1050=1051
<1051=1053,1052
<1053=1055,1054
<1056=1057
<1057=1059,1058
<1060=1061
<1061=1072,1062
<1062=1063
<1063=1064
<1064=1066,1065
<1066=1067
<1067=1069,1068
<1069=1071,1070
<1072=1073
<1073=1075,1074
<1076=1077
<1077=1088,1078
<1078=1079
<1079=1080
<1080=1082,1081
<1082=1083
<1083=1085,1084
<1085=1087,1086
<1088=1089
<1089=1091,1090
<1102=1111,1110,1103
<1103=1107,1104
<1104=1106,1105
<1107=1109,1108
<1111=1292,1112
<1112=1285,1113
<1113=1273,1259,1247,1114
<1114=1240,1115
<1115=1228,1212,1196,1180,1164,1148,1132,1116
<1116=1117
<1117=1128,1118
<1118=1119
<1119=1120
<1120=1122,1121
<1122=1123
<1123=1125,1124
<1125=1127,1126
<1128=1129
<1129=1131,1130
<1132=1133
<1133=1144,1134
<1134=1135
<1135=1136
<1136=1138,1137
<1138=1139
<1139=1141,1140
<1141=1143,1142
<1144=1145
<1145=1147,1146
<1148=1149
<1149=1160,1150
<1150=1151
<1151=1152
<1152=1154,1153
<1154=1155
<1155=1157,1156
<1157=1159,1158
<1160=1161
<1161=1163,1162
<1164=1165
<1165=1176,1166
<1166=1167
<1167=1168
<1168=1170,1169
<1170=1171
<1171=1173,1172
<1173=1175,1174
<1176=1177
<1177=1179,1178
<1180=1181
<1181=1192,1182
<1182=1183
<1183=1184
<1184=1186,1185
<1186=1187
<1187=1189,1188
<1189=1191,1190
<1192=1193
<1193=1195,1194
<1196=1197
<1197=1208,1198
<1198=1199
<1199=1200
<1200=1202,1201
<1202=1203
<1203=1205,1204
<1205=1207,1206
<1208=1209
<1209=1211,1210
<1212=1213
<1213=1224,1214
<1214=1215
<1215=1216
<1216=1218,1217
<1218=1219
<1219=1221,1220
<1221=1223,1222
<1224=1225
<1225=1227,1226
<1228=1229
<1229=1239,1238,1230
<1230=1237,1231
<1231=1233,1232
<1233=1234
<1234=1236,1235
<1240=1241
<1241=1243,1242
<1243=1244
<1244=1246,1245
<1247=1248
<1248=1258,1257,1249
<1249=1256,1250
<1250=1252,1251
<1252=1253
<1253=1255,1254
<1259=1260
<1260=1269,1261
<1261=1262
<1262=1263
<1263=1265,1264
<1265=1266
<1266=1268,1267
<1269=1270
<1270=1272,1271
<1273=1274
<1274=1284,1283,1275
<1275=1282,1276
<1276=1278,1277
<1278=1279
<1279=1281,1280
<1285=1286
<1286=1288,1287
<1288=1289
<1289=1291,1290
<1292=1293
<1293=1303,1302,1294
<1294=1301,1295
<1295=1297,1296
<1297=1298
<1298=1300,1299
<1331=1340,1339,1332
<1332=1336,1333
<1333=1335,1334
<1336=1338,1337
<1340=1556,1538,1520,1502,1484,1466,1448,1430,1412,1401,1387,1352,1341
<1341=1342
<1342=1350,1343
<1343=1346,1344
<1344=1345
<1346=1347
<1347=1349,1348
<1350=1351
<1352=1380,1353
<1353=1368,1354
<1354=1355
<1355=1364,1356
<1356=1357
<1357=1358
<1358=1360,1359
<1360=1361
<1361=1363,1362
<1364=1365
<1365=1367,1366
<1368=1369
<1369=1379,1378,1370
<1370=1377,1371
<1371=1373,1372
<1373=1374
<1374=1376,1375
<1380=1381
<1381=1383,1382
<1383=1384
<1384=1386,1385
<1387=1388
<1388=1400,1399,1389
<1389=1398,1390
<1390=1392,1391
<1392=1393
<1393=1395,1394
<1395=1397,1396
<1401=1402
<1402=1406,1403
<1403=1404
<1404=1405
<1406=1407
<1407=1409,1408
<1409=1411,1410
<1412=1413
<1413=1426,1414
<1414=1415
<1415=1416
<1416=1418,1417
<1418=1419
<1419=1421,1420
<1421=1423,1422
<1423=1425,1424
<1426=1427
<1427=1429,1428
<1430=1431
<1431=1444,1432
<1432=1433
<1433=1434
<1434=1436,1435
<1436=1437
<1437=1439,1438
<1439=1441,1440
<1441=1443,1442
<1444=1445
<1445=1447,1446
<1448=1449
<1449=1462,1450
<1450=1451
<1451=1452
<1452=1454,1453
<1454=1455
<1455=1457,1456
<1457=1459,1458
<1459=1461,1460
<1462=1463
<1463=1465,1464
<1466=1467
<1467=1480,1468
<1468=1469
<1469=1470
<1470=1472,1471
<1472=1473
<1473=1475,1474
<1475=1477,1476
<1477=1479,1478
<1480=1481
<1481=1483,1482
<1484=1485
<1485=1498,1486
<1486=1487
<1487=1488
<1488=1490,1489
<1490=1491
<1491=1493,1492
<1493=1495,1494
<1495=1497,1496
<1498=1499
<1499=1501,1500
<1502=1503
<1503=1516,1504
<1504=1505
<1505=1506
<1506=1508,1507
<1508=1509
<1509=1511,1510
<1511=1513,1512
<1513=1515,1514
<1516=1517
<1517=1519,1518
<1520=1521
<1521=1534,1522
<1522=1523
<1523=1524
<1524=1526,1525
<1526=1527
<1527=1529,1528
<1529=1531,1530
<1531=1533,1532
<1534=1535
<1535=1537,1536
<1538=1539
<1539=1552,1540
<1540=1541
<1541=1542
<1542=1544,1543
<1544=1545
<1545=1547,1546
<1547=1549,1548
<1549=1551,1550
<1552=1553
<1553=1555,1554
<1556=1576,1557
<1557=1558
<1558=1559
<1559=1572,1560
<1560=1561
<1561=1562
<1562=1564,1563
<1564=1565
<1565=1567,1566
<1567=1569,1568
<1569=1571,1570
<1572=1573
<1573=1575,1574
<1576=1577
<1577=1581,1578
<1578=1579
<1579=1580
<1581=1582
<1582=1584,1583
<1584=1586,1585
<1614=1623,1622,1615
<1615=1619,1616
<1616=1618,1617
<1619=1621,1620
<1623=1747,1731,1720,1706,1676,1665,1654,1624
<1624=1647,1625
<1625=1635,1626
<1626=1627
<1627=1633,1628
<1628=1631,1629
<1629=1630
<1631=1632
<1633=1634
<1635=1636
<1636=1646,1645,1637
<1637=1644,1638
<1638=1640,1639
<1640=1641
<1641=1643,1642
<1647=1648
<1648=1650,1649
<1650=1651
<1651=1653,1652
<1654=1655
<1655=1664,1656
<1656=1658,1657
<1658=1659
<1659=1661,1660
<1661=1663,1662
<1665=1666
<1666=1670,1667
<1667=1668
<1668=1669
<1670=1671
<1671=1673,1672
<1673=1675,1674
<1676=1699,1677
<1677=1687,1678
<1678=1679
<1679=1685,1680
<1680=1683,1681
<1681=1682
<1683=1684
<1685=1686
<1687=1688
<1688=1698,1697,1689
<1689=1696,1690
<1690=1692,1691
<1692=1693
<1693=1695,1694
<1699=1700
<1700=1702,1701
<1702=1703
<1703=1705,1704
<1706=1707
<1707=1719,1718,1708
<1708=1717,1709
<1709=1711,1710
<1711=1712
<1712=1714,1713
<1714=1716,1715
<1720=1721
<1721=1725,1722
<1722=1723
<1723=1724
<1725=1726
<1726=1728,1727
<1728=1730,1729
<1731=1732
<1732=1743,1733
<1733=1734
<1734=1735
<1735=1737,1736
<1737=1738
<1738=1740,1739
<1740=1742,1741
<1743=1744
<1744=1746,1745
<1747=1748
<1748=1759,1749
<1749=1750
<1750=1751
<1751=1753,1752
<1753=1754
<1754=1756,1755
<1756=1758,1757
<1759=1760
<1760=1762,1761
<1781=1790,1789,1782
<1782=1786,1783
<1783=1785,1784
<1786=1788,1787
<1790=1823,1807,1791
<1791=1792
<1792=1803,1793
<1793=1794
<1794=1795
<1795=1797,1796
<1797=1798
<1798=1800,1799
<1800=1802,1801
<1803=1804
<1804=1806,1805
<1807=1808
<1808=1819,1809
<1809=1810
<1810=1811
<1811=1813,1812
<1813=1814
<1814=1816,1815
<1816=1818,1817
<1819=1820
<1820=1822,1821
<1823=1824
<1824=1835,1825
<1825=1826
<1826=1827
<1827=1829,1828
<1829=1830
<1830=1832,1831
<1832=1834,1833
<1835=1836
<1836=1838,1837
<1849=1864,1863,1850
<1850=1860,1857,1854,1851
<1851=1853,1852
<1854=1856,1855
<1857=1859,1858
<1860=1862,1861
<1864=1969,1960,1944,1928,1912,1865
<1865=1903,1866
<1866=1885,1867
<1867=1868
<1868=1881,1869
<1869=1870
<1870=1871
<1871=1873,1872
<1873=1874
<1874=1876,1875
<1876=1878,1877
<1878=1880,1879
<1881=1882
<1882=1884,1883
<1885=1886
<1886=1899,1887
<1887=1888
<1888=1889
<1889=1891,1890
<1891=1892
<1892=1894,1893
<1894=1896,1895
<1896=1898,1897
<1899=1900
<1900=1902,1901
<1903=1904
<1904=1906,1905
<1906=1907
<1907=1909,1908
<1909=1911,1910
<1912=1913
<1913=1924,1914
<1914=1915
<1915=1916
<1916=1918,1917
<1918=1919
<1919=1921,1920
<1921=1923,1922
<1924=1925
<1925=1927,1926
<1928=1929
<1929=1940,1930
<1930=1931
<1931=1932
<1932=1934,1933
<1934=1935
<1935=1937,1936
<1937=1939,1938
<1940=1941
<1941=1943,1942
<1944=1945
<1945=1956,1946
<1946=1947
<1947=1948
<1948=1950,1949
<1950=1951
<1951=1953,1952
<1953=1955,1954
<1956=1957
<1957=1959,1958
<1960=1961
<1961=1965,1962
<1962=1963
<1963=1964
<1965=1966
<1966=1968,1967
<1969=1970
<1970=1974,1971
<1971=1972
<1972=1973
<1974=1975
<1975=1977,1976
<1994=2003,2002,1995
<1995=1999,1996
<1996=1998,1997
<1999=2001,2000
<2003=2068,2052,2036,2020,2004
<2004=2005
<2005=2016,2006
<2006=2007
<2007=2008
<2008=2010,2009
<2010=2011
<2011=2013,2012
<2013=2015,2014
<2016=2017
<2017=2019,2018
<2020=2021
<2021=2032,2022
<2022=2023
<2023=2024
<2024=2026,2025
<2026=2027
<2027=2029,2028
<2029=2031,2030
<2032=2033
<2033=2035,2034
<2036=2037
<2037=2048,2038
<2038=2039
<2039=2040
<2040=2042,2041
<2042=2043
<2043=2045,2044
<2045=2047,2046
<2048=2049
<2049=2051,2050
<2052=2053
<2053=2064,2054
<2054=2055
<2055=2056
<2056=2058,2057
<2058=2059
<2059=2061,2060
<2061=2063,2062
<2064=2065
<2065=2067,2066
<2068=2069
<2069=2080,2070
<2070=2071
<2071=2072
<2072=2074,2073
<2074=2075
<2075=2077,2076
<2077=2079,2078
<2080=2081
<2081=2083,2082
<2096=2105,2104,2097
<2097=2101,2098
<2098=2100,2099
<2101=2103,2102
<2105=2181,2165,2149,2133,2117,2106
<2106=2107
<2107=2115,2108
<2108=2111,2109
<2109=2110
<2111=2112
<2112=2114,2113
<2115=2116
<2117=2118
<2118=2129,2119
<2119=2120
<2120=2121
<2121=2123,2122
<2123=2124
<2124=2126,2125
<2126=2128,2127
<2129=2130
<2130=2132,2131
<2133=2134
<2134=2145,2135
<2135=2136
<2136=2137
<2137=2139,2138
<2139=2140
<2140=2142,2141
<2142=2144,2143
<2145=2146
<2146=2148,2147
<2149=2150
<2150=2161,2151
<2151=2152
<2152=2153
<2153=2155,2154
<2155=2156
<2156=2158,2157
<2158=2160,2159
<2161=2162
<2162=2164,2163
<2165=2166
<2166=2177,2167
<2167=2168
<2168=2169
<2169=2171,2170
<2171=2172
<2172=2174,2173
<2174=2176,2175
<2177=2178
<2178=2180,2179
<2181=2182
<2182=2193,2183
<2183=2184
<2184=2185
<2185=2187,2186
<2187=2188
<2188=2190,2189
<2190=2192,2191
<2193=2194
<2194=2196,2195
<2208=2217,2216,2209
<2209=2213,2210
<2210=2212,2211
<2213=2215,2214
<2217=2383,2367,2320,2289,2278,2264,2234,2218
<2218=2219
<2219=2230,2220
<2220=2221
<2221=2222
<2222=2224,2223
<2224=2225
<2225=2227,2226
<2227=2229,2228
<2230=2231
<2231=2233,2232
<2234=2257,2235
<2235=2245,2236
<2236=2237
<2237=2243,2238
<2238=2241,2239
<2239=2240
<2241=2242
<2243=2244
<2245=2246
<2246=2256,2255,2247
<2247=2254,2248
<2248=2250,2249
<2250=2251
<2251=2253,2252
<2257=2258
<2258=2260,2259
<2260=2261
<2261=2263,2262
<2264=2265
<2265=2277,2276,2266
<2266=2275,2267
<2267=2269,2268
<2269=2270
<2270=2272,2271
<2272=2274,2273
<2278=2279
<2279=2283,2280
<2280=2281
<2281=2282
<2283=2284
<2284=2286,2285
<2286=2288,2287
<2289=2302,2290
<2290=2291
<2291=2292
<2292=2300,2293
<2293=2296,2294
<2294=2295
<2296=2297
<2297=2299,2298
<2300=2301
<2302=2303
<2303=2305,2304
<2305=2318,2306
<2306=2309,2307
<2307=2308
<2309=2310
<2310=2312,2311
<2312=2313
<2313=2315,2314
<2315=2317,2316
<2318=2319
<2320=2358,2321
<2321=2344,2322
<2322=2340,2323
<2323=2324
<2324=2325
<2325=2336,2326
<2326=2327
<2327=2328
<2328=2330,2329
<2330=2331
<2331=2333,2332
<2333=2335,2334
<2336=2337
<2337=2339,2338
<2340=2341
<2341=2343,2342
<2344=2345
<2345=2357,2356,2346
<2346=2355,2347
<2347=2349,2348
<2349=2350
<2350=2352,2351
<2352=2354,2353
<2358=2359
<2359=2363,2360
<2360=2361
<2361=2362
<2363=2364
<2364=2366,2365
<2367=2368
<2368=2379,2369
<2369=2370
<2370=2371
<2371=2373,2372
<2373=2374
<2374=2376,2375
<2376=2378,2377
<2379=2380
<2380=2382,2381
<2383=2384
<2384=2395,2385
<2385=2386
<2386=2387
<2387=2389,2388
<2389=2390
<2390=2392,2391
<2392=2394,2393
<2395=2396
<2396=2398,2397
<2421=2430,2429,2422
<2422=2426,2423
<2423=2425,2424
<2426=2428,2427
<2430=2502,2498,2489,2485,2433,2431
<2431=2432
<2433=2472,2434
<2434=2461,2448,2435
<2435=2436
<2436=2443,2437
<2437=2439,2438
<2439=2440
<2440=2442,2441
<2443=2445,2444
<2445=2447,2446
<2448=2449
<2449=2456,2450
<2450=2452,2451
<2452=2453
<2453=2455,2454
<2456=2458,2457
<2458=2460,2459
<2461=2462
<2462=2469,2463
<2463=2465,2464
<2465=2466
<2466=2468,2467
<2469=2471,2470
<2472=2473
<2473=2484,2474
<2474=2482,2475
<2475=2480,2478,2476
<2476=2477
<2478=2479
<2480=2481
<2482=2483
<2485=2486
<2486=2488,2487
<2489=2490
<2490=2496,2491
<2491=2494,2492
<2492=2493
<2494=2495
<2496=2497
<2498=2499
<2499=2501,2500
<2502=2503
<2503=2505,2504
<2521=2530,2529,2522
<2522=2526,2523
<2523=2525,2524
<2526=2528,2527
<2530=2623,2533,2531
<2531=2532
<2533=2612,2591,2534
<2534=2535
<2535=2587,2578,2536
<2536=2558,2537
<2537=2549,2542,2538
<2538=2539
<2539=2541,2540
<2542=2543
<2543=2547,2544
<2544=2545
<2545=2546
<2547=2548
<2549=2550
<2550=2557,2556,2551
<2551=2555,2552
<2552=2554,2553
<2558=2559
<2559=2577,2560
<2560=2575,2561
<2561=2573,2571,2562
<2562=2563
<2563=2565,2564
<2565=2566
<2566=2568,2567
<2568=2570,2569
<2571=2572
<2573=2574
<2575=2576
<2578=2579
<2579=2585,2580
<2580=2583,2581
<2581=2582
<2583=2584
<2585=2586
<2587=2588
<2588=2590,2589
<2591=2603,2596,2592
<2592=2593
<2593=2595,2594
<2596=2597
<2597=2601,2598
<2598=2599
<2599=2600
<2601=2602
<2603=2604
<2604=2611,2610,2605
<2605=2609,2606
<2606=2608,2607
<2612=2613
<2613=2622,2614
<2614=2618,2615
<2615=2616
<2616=2617
<2618=2619
<2619=2621,2620
<2623=2624
<2624=2629,2628,2625
<2625=2627,2626
<2645=2654,2653,2646
<2646=2650,2647
<2647=2649,2648
<2650=2652,2651
<2654=2703,2687,2683,2657,2655
<2655=2656
<2657=2670,2658
<2658=2659
<2659=2660
<2660=2667,2661
<2661=2663,2662
<2663=2664
<2664=2666,2665
<2667=2669,2668
<2670=2671
<2671=2682,2672
<2672=2680,2673
<2673=2678,2676,2674
<2674=2675
<2676=2677
<2678=2679
<2680=2681
<2683=2684
<2684=2686,2685
<2687=2688
<2688=2702,2701,2689
<2689=2700,2690
<2690=2692,2691
<2692=2693
<2693=2695,2694
<2695=2697,2696
<2697=2699,2698
<2703=2704
<2704=2706,2705
<2721=2730,2729,2722
<2722=2726,2723
<2723=2725,2724
<2726=2728,2727
<2730=2826,2733,2731
<2731=2732
<2733=2815,2794,2734
<2734=2735
<2735=2778,2736
<2736=2758,2737
<2737=2749,2742,2738
<2738=2739
<2739=2741,2740
<2742=2743
<2743=2747,2744
<2744=2745
<2745=2746
<2747=2748
<2749=2750
<2750=2757,2756,2751
<2751=2755,2752
<2752=2754,2753
<2758=2759
<2759=2777,2760
<2760=2775,2761
<2761=2773,2771,2762
<2762=2763
<2763=2765,2764
<2765=2766
<2766=2768,2767
<2768=2770,2769
<2771=2772
<2773=2774
<2775=2776
<2778=2779
<2779=2793,2792,2780
<2780=2791,2781
<2781=2783,2782
<2783=2784
<2784=2786,2785
<2786=2788,2787
<2788=2790,2789
<2794=2806,2799,2795
<2795=2796
<2796=2798,2797
<2799=2800
<2800=2804,2801
<2801=2802
<2802=2803
<2804=2805
<2806=2807
<2807=2814,2813,2808
<2808=2812,2809
<2809=2811,2810
<2815=2816
<2816=2825,2817
<2817=2821,2818
<2818=2819
<2819=2820
<2821=2822
<2822=2824,2823
<2826=2827
<2827=2832,2831,2828
<2828=2830,2829
<2850=2862,2861,2851
<2851=2858,2855,2852
<2852=2854,2853
<2855=2857,2856
<2858=2860,2859
<2862=2947,2943,2934,2930,2865,2863
<2863=2864
<2865=2917,2866
<2866=2867
<2867=2915,2892,2868
<2868=2869
<2869=2881,2870
<2870=2871
<2871=2878,2872
<2872=2874,2873
<2874=2875
<2875=2877,2876
<2878=2880,2879
<2881=2882
<2882=2889,2883
<2883=2885,2884
<2885=2886
<2886=2888,2887
<2889=2891,2890
<2892=2904,2893
<2893=2894
<2894=2901,2895
<2895=2897,2896
<2897=2898
<2898=2900,2899
<2901=2903,2902
<2904=2905
<2905=2912,2906
<2906=2908,2907
<2908=2909
<2909=2911,2910
<2912=2914,2913
<2915=2916
<2917=2918
<2918=2929,2919
<2919=2927,2920
<2920=2925,2923,2921
<2921=2922
<2923=2924
<2925=2926
<2927=2928
<2930=2931
<2931=2933,2932
<2934=2935
<2935=2941,2936
<2936=2939,2937
<2937=2938
<2939=2940
<2941=2942
<2943=2944
<2944=2946,2945
<2947=2948
<2948=2950,2949
<2965=2977,2976,2966
<2966=2973,2970,2967
<2967=2969,2968
<2970=2972,2971
<2973=2975,2974
<2977=3172,3099,2980,2978
<2978=2979
<2980=3097,2981
<2981=3093,3084,3037,2982
<2982=3033,2983
<2983=2984
<2984=3011,2985
<2985=3010,3009,3008,3007,3006,3005,3004,3003,3002,3001,3000,2999,2998,2997,2990,2986
<2986=2987
<2987=2989,2988
<2990=2991
<2991=2995,2992
<2992=2993
<2993=2994
<2995=2996
<3011=3012
<3012=3032,3013
<3013=3030,3014
<3014=3026,3024,3015
<3015=3016
<3016=3018,3017
<3018=3019
<3019=3021,3020
<3021=3023,3022
<3024=3025
<3026=3027
<3027=3029,3028
<3030=3031
<3033=3034
<3034=3036,3035
<3037=3064,3038
<3038=3063,3062,3061,3060,3059,3058,3057,3056,3055,3054,3053,3052,3051,3050,3043,3039
<3039=3040
<3040=3042,3041
<3043=3044
<3044=3048,3045
<3045=3046
<3046=3047
<3048=3049
<3064=3065
<3065=3083,3066
<3066=3081,3067
<3067=3079,3077,3068
<3068=3069
<3069=3071,3070
<3071=3072
<3072=3074,3073
<3074=3076,3075
<3077=3078
<3079=3080
<3081=3082
<3084=3085
<3085=3091,3086
<3086=3089,3087
<3087=3088
<3089=3090
<3091=3092
<3093=3094
<3094=3096,3095
<3097=3098
<3099=3161,3140,3100
<3100=3101
<3101=3136,3102
<3102=3103
<3103=3125,3104
<3104=3116,3109,3105
<3105=3106
<3106=3108,3107
<3109=3110
<3110=3114,3111
<3111=3112
<3112=3113
<3114=3115
<3116=3117
<3117=3124,3123,3118
<3118=3122,3119
<3119=3121,3120
<3125=3126
<3126=3135,3127
<3127=3131,3128
<3128=3129
<3129=3130
<3131=3132
<3132=3134,3133
<3136=3137
<3137=3139,3138
<3140=3152,3145,3141
<3141=3142
<3142=3144,3143
<3145=3146
<3146=3150,3147
<3147=3148
<3148=3149
<3150=3151
<3152=3153
<3153=3160,3159,3154
<3154=3158,3155
<3155=3157,3156
<3161=3162
<3162=3171,3163
<3163=3167,3164
<3164=3165
<3165=3166
<3167=3168
<3168=3170,3169
<3172=3173
<3173=3178,3177,3174
<3174=3176,3175
<3198=3216,3215,3199
<3199=3212,3209,3206,3203,3200
<3200=3202,3201
<3203=3205,3204
<3206=3208,3207
<3209=3211,3210
<3212=3214,3213
<3216=3305,3301,3288,3284,3219,3217
<3217=3218
<3219=3271,3220
<3220=3221
<3221=3269,3246,3222
<3222=3223
<3223=3235,3224
<3224=3225
<3225=3232,3226
<3226=3228,3227
<3228=3229
<3229=3231,3230
<3232=3234,3233
<3235=3236
<3236=3243,3237
<3237=3239,3238
<3239=3240
<3240=3242,3241
<3243=3245,3244
<3246=3258,3247
<3247=3248
<3248=3255,3249
<3249=3251,3250
<3251=3252
<3252=3254,3253
<3255=3257,3256
<3258=3259
<3259=3266,3260
<3260=3262,3261
<3262=3263
<3263=3265,3264
<3266=3268,3267
<3269=3270
<3271=3272
<3272=3283,3273
<3273=3281,3274
<3274=3279,3277,3275
<3275=3276
<3277=3278
<3279=3280
<3281=3282
<3284=3285
<3285=3287,3286
<3288=3289
<3289=3299,3290
<3290=3297,3295,3293,3291
<3291=3292
<3293=3294
<3295=3296
<3297=3298
<3299=3300
<3301=3302
<3302=3304,3303
<3305=3306
<3306=3308,3307
<3325=3343,3342,3326
<3326=3339,3336,3333,3330,3327
<3327=3329,3328
<3330=3332,3331
<3333=3335,3334
<3336=3338,3337
<3339=3341,3340
<3343=3499,3488,3346,3344
<3344=3345
<3346=3477,3432,3347
<3347=3348
<3348=3428,3415,3349
<3349=3395,3350
<3350=3386,3375,3362,3355,3351
<3351=3352
<3352=3354,3353
<3355=3356
<3356=3360,3357
<3357=3358
<3358=3359
<3360=3361
<3362=3363
<3363=3367,3364
<3364=3366,3365
<3367=3369,3368
<3369=3371,3370
<3371=3372
<3372=3374,3373
<3375=3376
<3376=3378,3377
<3378=3380,3379
<3380=3382,3381
<3382=3383
<3383=3385,3384
<3386=3387
<3387=3394,3393,3388
<3388=3392,3389
<3389=3391,3390
<3395=3396
<3396=3414,3397
<3397=3412,3398
<3398=3410,3408,3399
<3399=3400
<3400=3402,3401
<3402=3403
<3403=3405,3404
<3405=3407,3406
<3408=3409
<3410=3411
<3412=3413
<3415=3416
<3416=3426,3417
<3417=3424,3422,3420,3418
<3418=3419
<3420=3421
<3422=3423
<3424=3425
<3426=3427
<3428=3429
<3429=3431,3430
<3432=3468,3457,3444,3437,3433
<3433=3434
<3434=3436,3435
<3437=3438
<3438=3442,3439
<3439=3440
<3440=3441
<3442=3443
<3444=3445
<3445=3449,3446
<3446=3448,3447
<3449=3451,3450
<3451=3453,3452
<3453=3454
<3454=3456,3455
<3457=3458
<3458=3460,3459
<3460=3462,3461
<3462=3464,3463
<3464=3465
<3465=3467,3466
<3468=3469
<3469=3476,3475,3470
<3470=3474,3471
<3471=3473,3472
<3477=3478
<3478=3487,3479
<3479=3483,3480
<3480=3481
<3481=3482
<3483=3484
<3484=3486,3485
<3488=3489
<3489=3498,3497,3490
<3490=3496,3491
<3491=3494,3493,3492
<3494=3495
<3499=3500
<3500=3505,3504,3501
<3501=3503,3502
<3531=3540,3539,3532
<3532=3536,3533
<3533=3535,3534
<3536=3538,3537
<3540=3629,3623,3619,3610,3606,3543,3541
<3541=3542
<3543=3593,3555,3544
<3544=3545
<3545=3546
<3546=3547
<3547=3551,3548
<3548=3549
<3549=3550
<3551=3552
<3552=3554,3553
<3555=3582,3569,3556
<3556=3557
<3557=3564,3558
<3558=3560,3559
<3560=3561
<3561=3563,3562
<3564=3566,3565
<3566=3568,3567
<3569=3570
<3570=3577,3571
<3571=3573,3572
<3573=3574
<3574=3576,3575
<3577=3579,3578
<3579=3581,3580
<3582=3583
<3583=3590,3584
<3584=3586,3585
<3586=3587
<3587=3589,3588
<3590=3592,3591
<3593=3594
<3594=3605,3595
<3595=3603,3596
<3596=3601,3599,3597
<3597=3598
<3599=3600
<3601=3602
<3603=3604
<3606=3607
<3607=3609,3608
<3610=3611
<3611=3617,3612
<3612=3615,3613
<3613=3614
<3615=3616
<3617=3618
<3619=3620
<3620=3622,3621
<3623=3624
<3624=3626,3625
<3626=3628,3627
<3629=3630
<3630=3632,3631
<3648=3657,3656,3649
<3649=3653,3650
<3650=3652,3651
<3653=3655,3654
<3657=3750,3660,3658
<3658=3659
<3660=3739,3718,3661
<3661=3662
<3662=3714,3705,3663
<3663=3685,3664
<3664=3676,3669,3665
<3665=3666
<3666=3668,3667
<3669=3670
<3670=3674,3671
<3671=3672
<3672=3673
<3674=3675
<3676=3677
<3677=3684,3683,3678
<3678=3682,3679
<3679=3681,3680
<3685=3686
<3686=3704,3687
<3687=3702,3688
<3688=3700,3698,3689
<3689=3690
<3690=3692,3691
<3692=3693
<3693=3695,3694
<3695=3697,3696
<3698=3699
<3700=3701
<3702=3703
<3705=3706
<3706=3712,3707
<3707=3710,3708
<3708=3709
<3710=3711
<3712=3713
<3714=3715
<3715=3717,3716
<3718=3730,3723,3719
<3719=3720
<3720=3722,3721
<3723=3724
<3724=3728,3725
<3725=3726
<3726=3727
<3728=3729
<3730=3731
<3731=3738,3737,3732
<3732=3736,3733
<3733=3735,3734
<3739=3740
<3740=3749,3741
<3741=3745,3742
<3742=3743
<3743=3744
<3745=3746
<3746=3748,3747
<3750=3751
<3751=3756,3755,3752
<3752=3754,3753
