>3	FunctionDef	dlz_findzonedb (void * dbdata , const char * name , dns_clientinfomethods_t * methods , dns_clientinfo_t * clientinfo)
>4	ParameterList	void * dbdata , const char * name , dns_clientinfomethods_t * methods , dns_clientinfo_t * clientinfo
>5	Parameter	 
>6	Identifier	clientinfo
>7	ParameterType	dns_clientinfo_t *
>8	Parameter	 
>9	Identifier	methods
>10	ParameterType	dns_clientinfomethods_t *
>11	Parameter	 
>12	Identifier	name
>13	ParameterType	const char *
>14	Parameter	 
>15	Identifier	dbdata
>16	ParameterType	void *
>17	ReturnType	isc_result_t
>18	CompoundStatement	 
>19	ReturnStatement	 
>20	Identifier	ISC_R_UNEXPECTED
>21	BlockStarter	 
>22	CompoundStatement	 
>23	ReturnStatement	return ISC_R_FAILURE ;
>24	Identifier	ISC_R_FAILURE
>25	ExpressionStatement	mm -> f . log ( ISC_LOG_ERROR , \"Failed finding zone
>26	CallExpression	mm -> f . log ( ISC_LOG_ERROR , \"Failed finding zone
>27	ArgumentList	ISC_LOG_ERROR
>28	Argument	e . what ( )
>29	CallExpression	e . what ( )
>30	ArgumentList	 
>31	Callee	e . what
>32	MemberAccess	e . what
>33	Identifier	what
>34	Identifier	e
>35	Argument	\"Failed finding zone
>36	PrimaryExpression	\"Failed finding zone
>37	Argument	ISC_LOG_ERROR
>38	Identifier	ISC_LOG_ERROR
>39	Callee	mm -> f . log
>40	MemberAccess	mm -> f . log
>41	Identifier	log
>42	PtrMemberAccess	mm -> f
>43	Identifier	f
>44	Identifier	mm
>45	Identifier	e
>46	BlockStarter	 
>47	CompoundStatement	 
>48	ReturnStatement	return ISC_R_NOTFOUND ;
>49	Identifier	ISC_R_NOTFOUND
>50	IfStatement	if ( mm -> findzonedb ( name ) )
>51	CompoundStatement	 
>52	ReturnStatement	return ISC_R_SUCCESS ;
>53	Identifier	ISC_R_SUCCESS
>54	IfStatement	if ( mm -> hasCountzone ( ) )
>55	CompoundStatement	 
>56	ExpressionStatement	mm -> countzone ( name )
>57	CallExpression	mm -> countzone ( name )
>58	ArgumentList	name
>59	Argument	name
>60	Identifier	name
>61	Callee	mm -> countzone
>62	PtrMemberAccess	mm -> countzone
>63	Identifier	countzone
>64	Identifier	mm
>65	Condition	mm -> hasCountzone ( )
>66	CallExpression	mm -> hasCountzone ( )
>67	ArgumentList	 
>68	Callee	mm -> hasCountzone
>69	PtrMemberAccess	mm -> hasCountzone
>70	Identifier	hasCountzone
>71	Identifier	mm
>72	Condition	mm -> findzonedb ( name )
>73	CallExpression	mm -> findzonedb ( name )
>74	ArgumentList	name
>75	Argument	name
>76	Identifier	name
>77	Callee	mm -> findzonedb
>78	PtrMemberAccess	mm -> findzonedb
>79	Identifier	findzonedb
>80	Identifier	mm
>81	IdentifierDeclStatement	 
>82	IdentifierDecl	* mm = ( MySQLMMManager * ) dbdata
>83	AssignmentExpr	* mm = ( MySQLMMManager * ) dbdata
>84	CastExpression	( MySQLMMManager * ) dbdata
>85	Identifier	dbdata
>86	CastTarget	MySQLMMManager *
>87	Identifier	mm
>88	Identifier	mm
>89	IdentifierDeclType	MySQLMMManager *
>90	ExpressionStatement	 
>91	CallExpression	MM_UNUSED ( clientinfo )
>92	ArgumentList	clientinfo
>93	Argument	clientinfo
>94	Identifier	clientinfo
>95	Callee	MM_UNUSED
>96	Identifier	MM_UNUSED
>97	ExpressionStatement	 
>98	CallExpression	MM_UNUSED ( methods )
>99	ArgumentList	methods
>100	Argument	methods
>101	Identifier	methods
>102	Callee	MM_UNUSED
>103	Identifier	MM_UNUSED
>123	FunctionDef	dlz_lookup (const char * zone , const char * name , void * dbdata , dns_sdlzlookup_t * lookup , dns_clientinfomethods_\
>124	ParameterList	const char * zone , const char * name , void * dbdata , dns_sdlzlookup_t * lookup , dns_clientinfomethods_t * methods , \
>125	Parameter	 
>126	Identifier	clientinfo
>127	ParameterType	dns_clientinfo_t *
>128	Parameter	 
>129	Identifier	methods
>130	ParameterType	dns_clientinfomethods_t *
>131	Parameter	 
>132	Identifier	lookup
>133	ParameterType	dns_sdlzlookup_t *
>134	Parameter	 
>135	Identifier	dbdata
>136	ParameterType	void *
>137	Parameter	 
>138	Identifier	name
>139	ParameterType	const char *
>140	Parameter	 
>141	Identifier	zone
>142	ParameterType	const char *
>143	ReturnType	isc_result_t
>144	CompoundStatement	 
>145	ReturnStatement	 
>146	Identifier	ISC_R_UNEXPECTED
>147	BlockStarter	 
>148	CompoundStatement	 
>149	ReturnStatement	return ISC_R_FAILURE ;
>150	Identifier	ISC_R_FAILURE
>151	ExpressionStatement	mm -> f . log ( ISC_LOG_ERROR , \"Failed looking up zone %s\" , e . what ( ) )
>152	CallExpression	mm -> f . log ( ISC_LOG_ERROR , \"Failed looking up zone %s\" , e . what ( ) )
>153	ArgumentList	ISC_LOG_ERROR
>154	Argument	e . what ( )
>155	CallExpression	e . what ( )
>156	ArgumentList	 
>157	Callee	e . what
>158	MemberAccess	e . what
>159	Identifier	what
>160	Identifier	e
>161	Argument	\"Failed looking up zone %s\"
>162	PrimaryExpression	\"Failed looking up zone %s\"
>163	Argument	ISC_LOG_ERROR
>164	Identifier	ISC_LOG_ERROR
>165	Callee	mm -> f . log
>166	MemberAccess	mm -> f . log
>167	Identifier	log
>168	PtrMemberAccess	mm -> f
>169	Identifier	f
>170	Identifier	mm
>171	Identifier	e
>172	BlockStarter	 
>173	CompoundStatement	 
>174	ReturnStatement	return ISC_R_SUCCESS ;
>175	Identifier	ISC_R_SUCCESS
>176	IfStatement	if ( ! mm -> lookup ( zone , name , lookup ) )
>177	ReturnStatement	return ISC_R_NOTFOUND ;
>178	Identifier	ISC_R_NOTFOUND
>179	Condition	! mm -> lookup ( zone , name , lookup )
>180	UnaryOp	! mm -> lookup ( zone , name , lookup )
>181	CallExpression	mm -> lookup ( zone , name , lookup )
>182	ArgumentList	zone
>183	Argument	lookup
>184	Identifier	lookup
>185	Argument	name
>186	Identifier	name
>187	Argument	zone
>188	Identifier	zone
>189	Callee	mm -> lookup
>190	PtrMemberAccess	mm -> lookup
>191	Identifier	lookup
>192	Identifier	mm
>193	UnaryOperator	!
>194	IdentifierDeclStatement	 
>195	IdentifierDecl	* mm = ( MySQLMMManager * ) dbdata
>196	AssignmentExpr	* mm = ( MySQLMMManager * ) dbdata
>197	CastExpression	( MySQLMMManager * ) dbdata
>198	Identifier	dbdata
>199	CastTarget	MySQLMMManager *
>200	Identifier	mm
>201	Identifier	mm
>202	IdentifierDeclType	MySQLMMManager *
>203	ExpressionStatement	 
>204	CallExpression	MM_UNUSED ( clientinfo )
>205	ArgumentList	clientinfo
>206	Argument	clientinfo
>207	Identifier	clientinfo
>208	Callee	MM_UNUSED
>209	Identifier	MM_UNUSED
>210	ExpressionStatement	 
>211	CallExpression	MM_UNUSED ( methods )
>212	ArgumentList	methods
>213	Argument	methods
>214	Identifier	methods
>215	Callee	MM_UNUSED
>216	Identifier	MM_UNUSED
>237	FunctionDef	dlz_authority (const char * zone , void * dbdata , dns_sdlzlookup_t * lookup)
>238	ParameterList	const char * zone , void * dbdata , dns_sdlzlookup_t * lookup
>239	Parameter	 
>240	Identifier	lookup
>241	ParameterType	dns_sdlzlookup_t *
>242	Parameter	 
>243	Identifier	dbdata
>244	ParameterType	void *
>245	Parameter	 
>246	Identifier	zone
>247	ParameterType	const char *
>248	ReturnType	isc_result_t
>249	CompoundStatement	 
>250	ReturnStatement	 
>251	Identifier	ISC_R_UNEXPECTED
>252	BlockStarter	 
>253	CompoundStatement	 
>254	ReturnStatement	return ISC_R_FAILURE ;
>255	Identifier	ISC_R_FAILURE
>256	ExpressionStatement	mm -> f . log ( ISC_LOG_ERROR , \"Failed looking up authority of zone %s\" , e . what ( ) )
>257	CallExpression	mm -> f . log ( ISC_LOG_ERROR , \"Failed looking up authority of zone %s\" , e . what ( ) )
>258	ArgumentList	ISC_LOG_ERROR
>259	Argument	e . what ( )
>260	CallExpression	e . what ( )
>261	ArgumentList	 
>262	Callee	e . what
>263	MemberAccess	e . what
>264	Identifier	what
>265	Identifier	e
>266	Argument	\"Failed looking up authority of zone %s\"
>267	PrimaryExpression	\"Failed looking up authority of zone %s\"
>268	Argument	ISC_LOG_ERROR
>269	Identifier	ISC_LOG_ERROR
>270	Callee	mm -> f . log
>271	MemberAccess	mm -> f . log
>272	Identifier	log
>273	PtrMemberAccess	mm -> f
>274	Identifier	f
>275	Identifier	mm
>276	Identifier	e
>277	BlockStarter	 
>278	CompoundStatement	 
>279	ReturnStatement	return ISC_R_SUCCESS ;
>280	Identifier	ISC_R_SUCCESS
>281	IfStatement	if ( ! mm -> authority ( zone , lookup ) )
>282	ReturnStatement	return ISC_R_NOTFOUND ;
>283	Identifier	ISC_R_NOTFOUND
>284	Condition	! mm -> authority ( zone , lookup )
>285	UnaryOp	! mm -> authority ( zone , lookup )
>286	CallExpression	mm -> authority ( zone , lookup )
>287	ArgumentList	zone
>288	Argument	lookup
>289	Identifier	lookup
>290	Argument	zone
>291	Identifier	zone
>292	Callee	mm -> authority
>293	PtrMemberAccess	mm -> authority
>294	Identifier	authority
>295	Identifier	mm
>296	UnaryOperator	!
>297	IfStatement	if ( ! mm -> hasAuthority ( ) )
>298	ReturnStatement	return ISC_R_NOTIMPLEMENTED ;
>299	Identifier	ISC_R_NOTIMPLEMENTED
>300	Condition	! mm -> hasAuthority ( )
>301	UnaryOp	! mm -> hasAuthority ( )
>302	CallExpression	mm -> hasAuthority ( )
>303	ArgumentList	 
>304	Callee	mm -> hasAuthority
>305	PtrMemberAccess	mm -> hasAuthority
>306	Identifier	hasAuthority
>307	Identifier	mm
>308	UnaryOperator	!
>309	IdentifierDeclStatement	 
>310	IdentifierDecl	* mm = ( MySQLMMManager * ) dbdata
>311	AssignmentExpr	* mm = ( MySQLMMManager * ) dbdata
>312	CastExpression	( MySQLMMManager * ) dbdata
>313	Identifier	dbdata
>314	CastTarget	MySQLMMManager *
>315	Identifier	mm
>316	Identifier	mm
>317	IdentifierDeclType	MySQLMMManager *
>337	FunctionDef	dlz_allnodes (const char * zone , void * dbdata , dns_sdlzallnodes_t * allnodes)
>338	ParameterList	const char * zone , void * dbdata , dns_sdlzallnodes_t * allnodes
>339	Parameter	 
>340	Identifier	allnodes
>341	ParameterType	dns_sdlzallnodes_t *
>342	Parameter	 
>343	Identifier	dbdata
>344	ParameterType	void *
>345	Parameter	 
>346	Identifier	zone
>347	ParameterType	const char *
>348	ReturnType	isc_result_t
>349	CompoundStatement	 
>350	ReturnStatement	 
>351	Identifier	ISC_R_UNEXPECTED
>352	BlockStarter	 
>353	CompoundStatement	 
>354	ReturnStatement	return ISC_R_FAILURE ;
>355	Identifier	ISC_R_FAILURE
>356	ExpressionStatement	mm -> f . log ( ISC_LOG_ERROR , \"Failed looking up authority of zone %s\" , e . what ( ) )
>357	CallExpression	mm -> f . log ( ISC_LOG_ERROR , \"Failed looking up authority of zone %s\" , e . what ( ) )
>358	ArgumentList	ISC_LOG_ERROR
>359	Argument	e . what ( )
>360	CallExpression	e . what ( )
>361	ArgumentList	 
>362	Callee	e . what
>363	MemberAccess	e . what
>364	Identifier	what
>365	Identifier	e
>366	Argument	\"Failed looking up authority of zone %s\"
>367	PrimaryExpression	\"Failed looking up authority of zone %s\"
>368	Argument	ISC_LOG_ERROR
>369	Identifier	ISC_LOG_ERROR
>370	Callee	mm -> f . log
>371	MemberAccess	mm -> f . log
>372	Identifier	log
>373	PtrMemberAccess	mm -> f
>374	Identifier	f
>375	Identifier	mm
>376	Identifier	e
>377	BlockStarter	 
>378	CompoundStatement	 
>379	ReturnStatement	return ISC_R_SUCCESS ;
>380	Identifier	ISC_R_SUCCESS
>381	IfStatement	if ( ! mm -> allnodes ( zone , allnodes ) )
>382	ReturnStatement	return ISC_R_NOTFOUND ;
>383	Identifier	ISC_R_NOTFOUND
>384	Condition	! mm -> allnodes ( zone , allnodes )
>385	UnaryOp	! mm -> allnodes ( zone , allnodes )
>386	CallExpression	mm -> allnodes ( zone , allnodes )
>387	ArgumentList	zone
>388	Argument	allnodes
>389	Identifier	allnodes
>390	Argument	zone
>391	Identifier	zone
>392	Callee	mm -> allnodes
>393	PtrMemberAccess	mm -> allnodes
>394	Identifier	allnodes
>395	Identifier	mm
>396	UnaryOperator	!
>397	IfStatement	if ( ! mm -> hasAllnodes ( ) )
>398	ReturnStatement	return ISC_R_NOTIMPLEMENTED ;
>399	Identifier	ISC_R_NOTIMPLEMENTED
>400	Condition	! mm -> hasAllnodes ( )
>401	UnaryOp	! mm -> hasAllnodes ( )
>402	CallExpression	mm -> hasAllnodes ( )
>403	ArgumentList	 
>404	Callee	mm -> hasAllnodes
>405	PtrMemberAccess	mm -> hasAllnodes
>406	Identifier	hasAllnodes
>407	Identifier	mm
>408	UnaryOperator	!
>409	IdentifierDeclStatement	 
>410	IdentifierDecl	* mm = ( MySQLMMManager * ) dbdata
>411	AssignmentExpr	* mm = ( MySQLMMManager * ) dbdata
>412	CastExpression	( MySQLMMManager * ) dbdata
>413	Identifier	dbdata
>414	CastTarget	MySQLMMManager *
>415	Identifier	mm
>416	Identifier	mm
>417	IdentifierDeclType	MySQLMMManager *
>437	FunctionDef	dlz_allowzonexfr (void * dbdata , const char * name , const char * client)
>438	ParameterList	void * dbdata , const char * name , const char * client
>439	Parameter	 
>440	Identifier	client
>441	ParameterType	const char *
>442	Parameter	 
>443	Identifier	name
>444	ParameterType	const char *
>445	Parameter	 
>446	Identifier	dbdata
>447	ParameterType	void *
>448	ReturnType	isc_result_t
>449	CompoundStatement	 
>450	ReturnStatement	 
>451	Identifier	ISC_R_UNEXPECTED
>452	BlockStarter	 
>453	CompoundStatement	 
>454	ReturnStatement	return ISC_R_FAILURE ;
>455	Identifier	ISC_R_FAILURE
>456	ExpressionStatement	mm -> f . log ( ISC_LOG_ERROR , \"Failed checking xfr
>457	CallExpression	mm -> f . log ( ISC_LOG_ERROR , \"Failed checking xfr
>458	ArgumentList	ISC_LOG_ERROR
>459	Argument	e . what ( )
>460	CallExpression	e . what ( )
>461	ArgumentList	 
>462	Callee	e . what
>463	MemberAccess	e . what
>464	Identifier	what
>465	Identifier	e
>466	Argument	\"Failed checking xfr
>467	PrimaryExpression	\"Failed checking xfr
>468	Argument	ISC_LOG_ERROR
>469	Identifier	ISC_LOG_ERROR
>470	Callee	mm -> f . log
>471	MemberAccess	mm -> f . log
>472	Identifier	log
>473	PtrMemberAccess	mm -> f
>474	Identifier	f
>475	Identifier	mm
>476	Identifier	e
>477	BlockStarter	 
>478	CompoundStatement	 
>479	ReturnStatement	return ISC_R_SUCCESS ;
>480	Identifier	ISC_R_SUCCESS
>481	IfStatement	if ( ! mm -> allowxfr ( name , client ) )
>482	ReturnStatement	return ISC_R_NOPERM ;
>483	Identifier	ISC_R_NOPERM
>484	Condition	! mm -> allowxfr ( name , client )
>485	UnaryOp	! mm -> allowxfr ( name , client )
>486	CallExpression	mm -> allowxfr ( name , client )
>487	ArgumentList	name
>488	Argument	client
>489	Identifier	client
>490	Argument	name
>491	Identifier	name
>492	Callee	mm -> allowxfr
>493	PtrMemberAccess	mm -> allowxfr
>494	Identifier	allowxfr
>495	Identifier	mm
>496	UnaryOperator	!
>497	IfStatement	if ( ! mm -> findzonedb ( name ) )
>498	ReturnStatement	return ISC_R_NOTFOUND ;
>499	Identifier	ISC_R_NOTFOUND
>500	Condition	! mm -> findzonedb ( name )
>501	UnaryOp	! mm -> findzonedb ( name )
>502	CallExpression	mm -> findzonedb ( name )
>503	ArgumentList	name
>504	Argument	name
>505	Identifier	name
>506	Callee	mm -> findzonedb
>507	PtrMemberAccess	mm -> findzonedb
>508	Identifier	findzonedb
>509	Identifier	mm
>510	UnaryOperator	!
>511	IfStatement	if ( ! mm -> hasAllowxfr ( ) )
>512	ReturnStatement	return ISC_R_NOTIMPLEMENTED ;
>513	Identifier	ISC_R_NOTIMPLEMENTED
>514	Condition	! mm -> hasAllowxfr ( )
>515	UnaryOp	! mm -> hasAllowxfr ( )
>516	CallExpression	mm -> hasAllowxfr ( )
>517	ArgumentList	 
>518	Callee	mm -> hasAllowxfr
>519	PtrMemberAccess	mm -> hasAllowxfr
>520	Identifier	hasAllowxfr
>521	Identifier	mm
>522	UnaryOperator	!
>523	IdentifierDeclStatement	 
>524	IdentifierDecl	* mm = ( MySQLMMManager * ) dbdata
>525	AssignmentExpr	* mm = ( MySQLMMManager * ) dbdata
>526	CastExpression	( MySQLMMManager * ) dbdata
>527	Identifier	dbdata
>528	CastTarget	MySQLMMManager *
>529	Identifier	mm
>530	Identifier	mm
>531	IdentifierDeclType	MySQLMMManager *
>553	FunctionDef	dlz_create (const char * dlzname , unsigned int argc , char * argv [ ] , void * * dbdata)
>554	ParameterList	const char * dlzname , unsigned int argc , char * argv [ ] , void * * dbdata
>555	Parameter	 
>556	Identifier	dbdata
>557	ParameterType	void * *
>558	Parameter	 
>559	Identifier	argv
>560	ParameterType	char * [ ]
>561	Parameter	 
>562	Identifier	argc
>563	ParameterType	unsigned int
>564	Parameter	 
>565	Identifier	dlzname
>566	ParameterType	const char *
>567	ReturnType	isc_result_t
>568	CompoundStatement	 
>569	ReturnStatement	 
>570	Identifier	ISC_R_SUCCESS
>571	BlockStarter	 
>572	CompoundStatement	 
>573	ReturnStatement	return ISC_R_UNEXPECTED ;
>574	Identifier	ISC_R_UNEXPECTED
>575	ExpressionStatement	b9funcs . log ( ISC_LOG_ERROR , \"Creating MysqlMMManager failed
>576	CallExpression	b9funcs . log ( ISC_LOG_ERROR , \"Creating MysqlMMManager failed
>577	ArgumentList	ISC_LOG_ERROR
>578	Argument	e . what ( )
>579	CallExpression	e . what ( )
>580	ArgumentList	 
>581	Callee	e . what
>582	MemberAccess	e . what
>583	Identifier	what
>584	Identifier	e
>585	Argument	\"Creating MysqlMMManager failed
>586	PrimaryExpression	\"Creating MysqlMMManager failed
>587	Argument	ISC_LOG_ERROR
>588	Identifier	ISC_LOG_ERROR
>589	Callee	b9funcs . log
>590	MemberAccess	b9funcs . log
>591	Identifier	log
>592	Identifier	b9funcs
>593	Identifier	e
>594	BlockStarter	 
>595	CompoundStatement	 
>596	ExpressionStatement	* dbdata = res
>597	AssignmentExpr	* dbdata = res
>598	Identifier	res
>599	UnaryOp	* dbdata
>600	Identifier	dbdata
>601	UnaryOperator	*
>602	IdentifierDeclStatement	MySQLMMManager * res = new MySQLMMManager ( dlzname , b9funcs , args ) ;
>603	IdentifierDecl	* res = new MySQLMMManager ( dlzname , b9funcs , args )
>604	AssignmentExpr	* res = new MySQLMMManager ( dlzname , b9funcs , args )
>605	Expression	dlzname , b9funcs , args
>606	Expression	b9funcs , args
>607	Identifier	args
>608	Identifier	b9funcs
>609	Identifier	dlzname
>610	Identifier	res
>611	Identifier	res
>612	IdentifierDeclType	MySQLMMManager *
>613	ForStatement	for ( unsigned int i = 0 ; i < argc ; ++ i )
>614	ExpressionStatement	 
>615	AssignmentExpr	args [ i ] = argv [ i ]
>616	ArrayIndexing	argv [ i ]
>617	Identifier	i
>618	Identifier	argv
>619	ArrayIndexing	args [ i ]
>620	Identifier	i
>621	Identifier	args
>622	UnaryExpression	 
>623	Identifier	i
>624	IncDec	++
>625	Condition	 
>626	RelationalExpression	i < argc
>627	Identifier	argc
>628	Identifier	i
>629	ForInit	 
>630	IdentifierDeclStatement	unsigned int i = 0 ;
>631	IdentifierDecl	i = 0
>632	AssignmentExpr	i = 0
>633	PrimaryExpression	0
>634	Identifier	i
>635	Identifier	i
>636	IdentifierDeclType	unsigned int
>637	ExpressionStatement	 
>638	CallExpression	args . resize ( argc )
>639	ArgumentList	argc
>640	Argument	argc
>641	Identifier	argc
>642	Callee	args . resize
>643	MemberAccess	args . resize
>644	Identifier	resize
>645	Identifier	args
>646	IdentifierDeclStatement	 
>647	IdentifierDecl	args
>648	Identifier	args
>649	IdentifierDeclType	std 
>650	ExpressionStatement	 
>651	CallExpression	va_end ( ap )
>652	ArgumentList	ap
>653	Argument	ap
>654	Identifier	ap
>655	Callee	va_end
>656	Identifier	va_end
>657	WhileStatement	while ( helper_name = va_arg ( ap , decltype ( helper_name ) ) )
>658	CompoundStatement	 
>659	IfStatement	if ( strcmp ( \"log\" , helper_name ) == 0 )
>660	ElseStatement	else
>661	IfStatement	if ( strcmp ( \"putrr\" , helper_name ) == 0 )
>662	ElseStatement	else
>663	IfStatement	if ( strcmp ( \"putnamedrr\" , helper_name ) == 0 )
>664	ElseStatement	else
>665	IfStatement	if ( strcmp ( \"writeable_zone\" , helper_name ) == 0 )
>666	ElseStatement	else
>667	CompoundStatement	 
>668	ExpressionStatement	 
>669	Statement	 
>670	Statement	 
>671	Statement	 
>672	Statement	 
>673	Statement	 
>674	Statement	 
>675	Statement	 
>676	CompoundStatement	 
>677	ExpressionStatement	 
>678	AssignmentExpr	b9funcs . writeable_zone_f = va_arg ( ap , decltype ( b9funcs . writeable_zone_f ) )
>679	CallExpression	va_arg ( ap , decltype ( b9funcs . writeable_zone_f ) )
>680	ArgumentList	ap
>681	Argument	decltype ( b9funcs . writeable_zone_f )
>682	CallExpression	decltype ( b9funcs . writeable_zone_f )
>683	ArgumentList	b9funcs . writeable_zone_f
>684	Argument	b9funcs . writeable_zone_f
>685	MemberAccess	b9funcs . writeable_zone_f
>686	Identifier	writeable_zone_f
>687	Identifier	b9funcs
>688	Callee	decltype
>689	Identifier	decltype
>690	Argument	ap
>691	Identifier	ap
>692	Callee	va_arg
>693	Identifier	va_arg
>694	MemberAccess	b9funcs . writeable_zone_f
>695	Identifier	writeable_zone_f
>696	Identifier	b9funcs
>697	Condition	 
>698	EqualityExpression	strcmp ( \"writeable_zone\" , helper_name ) == 0
>699	PrimaryExpression	0
>700	CallExpression	strcmp ( \"writeable_zone\" , helper_name )
>701	ArgumentList	\"writeable_zone\"
>702	Argument	helper_name
>703	Identifier	helper_name
>704	Argument	\"writeable_zone\"
>705	PrimaryExpression	\"writeable_zone\"
>706	Callee	strcmp
>707	Identifier	strcmp
>708	CompoundStatement	 
>709	ExpressionStatement	 
>710	AssignmentExpr	b9funcs . putnamedrr_f = va_arg ( ap , decltype ( b9funcs . putnamedrr_f ) )
>711	CallExpression	va_arg ( ap , decltype ( b9funcs . putnamedrr_f ) )
>712	ArgumentList	ap
>713	Argument	decltype ( b9funcs . putnamedrr_f )
>714	CallExpression	decltype ( b9funcs . putnamedrr_f )
>715	ArgumentList	b9funcs . putnamedrr_f
>716	Argument	b9funcs . putnamedrr_f
>717	MemberAccess	b9funcs . putnamedrr_f
>718	Identifier	putnamedrr_f
>719	Identifier	b9funcs
>720	Callee	decltype
>721	Identifier	decltype
>722	Argument	ap
>723	Identifier	ap
>724	Callee	va_arg
>725	Identifier	va_arg
>726	MemberAccess	b9funcs . putnamedrr_f
>727	Identifier	putnamedrr_f
>728	Identifier	b9funcs
>729	Condition	 
>730	EqualityExpression	strcmp ( \"putnamedrr\" , helper_name ) == 0
>731	PrimaryExpression	0
>732	CallExpression	strcmp ( \"putnamedrr\" , helper_name )
>733	ArgumentList	\"putnamedrr\"
>734	Argument	helper_name
>735	Identifier	helper_name
>736	Argument	\"putnamedrr\"
>737	PrimaryExpression	\"putnamedrr\"
>738	Callee	strcmp
>739	Identifier	strcmp
>740	CompoundStatement	 
>741	ExpressionStatement	 
>742	AssignmentExpr	b9funcs . putrr_f = va_arg ( ap , decltype ( b9funcs . putrr_f ) )
>743	CallExpression	va_arg ( ap , decltype ( b9funcs . putrr_f ) )
>744	ArgumentList	ap
>745	Argument	decltype ( b9funcs . putrr_f )
>746	CallExpression	decltype ( b9funcs . putrr_f )
>747	ArgumentList	b9funcs . putrr_f
>748	Argument	b9funcs . putrr_f
>749	MemberAccess	b9funcs . putrr_f
>750	Identifier	putrr_f
>751	Identifier	b9funcs
>752	Callee	decltype
>753	Identifier	decltype
>754	Argument	ap
>755	Identifier	ap
>756	Callee	va_arg
>757	Identifier	va_arg
>758	MemberAccess	b9funcs . putrr_f
>759	Identifier	putrr_f
>760	Identifier	b9funcs
>761	Condition	 
>762	EqualityExpression	strcmp ( \"putrr\" , helper_name ) == 0
>763	PrimaryExpression	0
>764	CallExpression	strcmp ( \"putrr\" , helper_name )
>765	ArgumentList	\"putrr\"
>766	Argument	helper_name
>767	Identifier	helper_name
>768	Argument	\"putrr\"
>769	PrimaryExpression	\"putrr\"
>770	Callee	strcmp
>771	Identifier	strcmp
>772	CompoundStatement	 
>773	ExpressionStatement	 
>774	AssignmentExpr	b9funcs . log_f = va_arg ( ap , decltype ( b9funcs . log_f ) )
>775	CallExpression	va_arg ( ap , decltype ( b9funcs . log_f ) )
>776	ArgumentList	ap
>777	Argument	decltype ( b9funcs . log_f )
>778	CallExpression	decltype ( b9funcs . log_f )
>779	ArgumentList	b9funcs . log_f
>780	Argument	b9funcs . log_f
>781	MemberAccess	b9funcs . log_f
>782	Identifier	log_f
>783	Identifier	b9funcs
>784	Callee	decltype
>785	Identifier	decltype
>786	Argument	ap
>787	Identifier	ap
>788	Callee	va_arg
>789	Identifier	va_arg
>790	MemberAccess	b9funcs . log_f
>791	Identifier	log_f
>792	Identifier	b9funcs
>793	Condition	 
>794	EqualityExpression	strcmp ( \"log\" , helper_name ) == 0
>795	PrimaryExpression	0
>796	CallExpression	strcmp ( \"log\" , helper_name )
>797	ArgumentList	\"log\"
>798	Argument	helper_name
>799	Identifier	helper_name
>800	Argument	\"log\"
>801	PrimaryExpression	\"log\"
>802	Callee	strcmp
>803	Identifier	strcmp
>804	Condition	 
>805	AssignmentExpr	helper_name = va_arg ( ap , decltype ( helper_name ) )
>806	CallExpression	va_arg ( ap , decltype ( helper_name ) )
>807	ArgumentList	ap
>808	Argument	decltype ( helper_name )
>809	CallExpression	decltype ( helper_name )
>810	ArgumentList	helper_name
>811	Argument	helper_name
>812	Identifier	helper_name
>813	Callee	decltype
>814	Identifier	decltype
>815	Argument	ap
>816	Identifier	ap
>817	Callee	va_arg
>818	Identifier	va_arg
>819	Identifier	helper_name
>820	ExpressionStatement	 
>821	CallExpression	va_start ( ap , dbdata )
>822	ArgumentList	ap
>823	Argument	dbdata
>824	Identifier	dbdata
>825	Argument	ap
>826	Identifier	ap
>827	Callee	va_start
>828	Identifier	va_start
>829	IdentifierDeclStatement	 
>830	IdentifierDecl	b9funcs = { 0 , 0 , 0 , 0 }
>831	AssignmentExpr	b9funcs = { 0 , 0 , 0 , 0 }
>832	InitializerList	0
>833	PrimaryExpression	0
>834	PrimaryExpression	0
>835	PrimaryExpression	0
>836	PrimaryExpression	0
>837	Identifier	b9funcs
>838	Identifier	b9funcs
>839	IdentifierDeclType	bind9_functions
>840	IdentifierDeclStatement	 
>841	IdentifierDecl	* helper_name = nullptr
>842	AssignmentExpr	* helper_name = nullptr
>843	Identifier	nullptr
>844	Identifier	nullptr
>845	Identifier	helper_name
>846	IdentifierDeclType	const char *
>847	IdentifierDeclStatement	 
>848	IdentifierDecl	ap
>849	Identifier	ap
>850	IdentifierDeclType	va_list
>881	FunctionDef	dlz_destroy (void * dbdata)
>882	ParameterList	void * dbdata
>883	Parameter	 
>884	Identifier	dbdata
>885	ParameterType	void *
>886	ReturnType	void
>887	CompoundStatement	 
>888	ExpressionStatement	 
>889	Identifier	mm
>890	Statement	 
>891	IdentifierDeclStatement	 
>892	IdentifierDecl	* mm = ( MySQLMMManager * ) dbdata
>893	AssignmentExpr	* mm = ( MySQLMMManager * ) dbdata
>894	CastExpression	( MySQLMMManager * ) dbdata
>895	Identifier	dbdata
>896	CastTarget	MySQLMMManager *
>897	Identifier	mm
>898	Identifier	mm
>899	IdentifierDeclType	MySQLMMManager *
>905	FunctionDef	dlz_version (unsigned int * flags)
>906	ParameterList	unsigned int * flags
>907	Parameter	 
>908	Identifier	flags
>909	ParameterType	unsigned int *
>910	ReturnType	int
>911	CompoundStatement	 
>912	ReturnStatement	 
>913	Identifier	DLZ_DLOPEN_VERSION
>914	ExpressionStatement	 
>915	AssignmentExpr	* flags |= DNS_SDLZFLAG_RELATIVEOWNER | DNS_SDLZFLAG_RELATIVERDATA | DNS_SDLZFLAG_THREADSAFE
>916	InclusiveOrExpression	DNS_SDLZFLAG_RELATIVEOWNER | DNS_SDLZFLAG_RELATIVERDATA | DNS_SDLZFLAG_THREADSAFE
>917	InclusiveOrExpression	DNS_SDLZFLAG_RELATIVERDATA | DNS_SDLZFLAG_THREADSAFE
>918	Identifier	DNS_SDLZFLAG_THREADSAFE
>919	Identifier	DNS_SDLZFLAG_RELATIVERDATA
>920	Identifier	DNS_SDLZFLAG_RELATIVEOWNER
>921	UnaryOp	* flags
>922	Identifier	flags
>923	UnaryOperator	*
<3=18,17,4
<4=14,11,8,5
<5=7,6
<8=10,9
<11=13,12
<14=16,15
<18=97,90,81,46,21,19
<19=20
<21=45,22
<22=25,23
<23=24
<25=26
<26=39,27
<27=37,35,28
<28=29
<29=31,30
<31=32
<32=34,33
<35=36
<37=38
<39=40
<40=42,41
<42=44,43
<46=47
<47=50,48
<48=49
<50=72,51
<51=54,52
<52=53
<54=65,55
<55=56
<56=57
<57=61,58
<58=59
<59=60
<61=62
<62=64,63
<65=66
<66=68,67
<68=69
<69=71,70
<72=73
<73=77,74
<74=75
<75=76
<77=78
<78=80,79
<81=82
<82=89,88,83
<83=87,84
<84=86,85
<90=91
<91=95,92
<92=93
<93=94
<95=96
<97=98
<98=102,99
<99=100
<100=101
<102=103
<123=144,143,124
<124=140,137,134,131,128,125
<125=127,126
<128=130,129
<131=133,132
<134=136,135
<137=139,138
<140=142,141
<144=210,203,194,172,147,145
<145=146
<147=171,148
<148=151,149
<149=150
<151=152
<152=165,153
<153=163,161,154
<154=155
<155=157,156
<157=158
<158=160,159
<161=162
<163=164
<165=166
<166=168,167
<168=170,169
<172=173
<173=176,174
<174=175
<176=179,177
<177=178
<179=180
<180=193,181
<181=189,182
<182=187,185,183
<183=184
<185=186
<187=188
<189=190
<190=192,191
<194=195
<195=202,201,196
<196=200,197
<197=199,198
<203=204
<204=208,205
<205=206
<206=207
<208=209
<210=211
<211=215,212
<212=213
<213=214
<215=216
<237=249,248,238
<238=245,242,239
<239=241,240
<242=244,243
<245=247,246
<249=309,277,252,250
<250=251
<252=276,253
<253=256,254
<254=255
<256=257
<257=270,258
<258=268,266,259
<259=260
<260=262,261
<262=263
<263=265,264
<266=267
<268=269
<270=271
<271=273,272
<273=275,274
<277=278
<278=297,281,279
<279=280
<281=284,282
<282=283
<284=285
<285=296,286
<286=292,287
<287=290,288
<288=289
<290=291
<292=293
<293=295,294
<297=300,298
<298=299
<300=301
<301=308,302
<302=304,303
<304=305
<305=307,306
<309=310
<310=317,316,311
<311=315,312
<312=314,313
<337=349,348,338
<338=345,342,339
<339=341,340
<342=344,343
<345=347,346
<349=409,377,352,350
<350=351
<352=376,353
<353=356,354
<354=355
<356=357
<357=370,358
<358=368,366,359
<359=360
<360=362,361
<362=363
<363=365,364
<366=367
<368=369
<370=371
<371=373,372
<373=375,374
<377=378
<378=397,381,379
<379=380
<381=384,382
<382=383
<384=385
<385=396,386
<386=392,387
<387=390,388
<388=389
<390=391
<392=393
<393=395,394
<397=400,398
<398=399
<400=401
<401=408,402
<402=404,403
<404=405
<405=407,406
<409=410
<410=417,416,411
<411=415,412
<412=414,413
<437=449,448,438
<438=445,442,439
<439=441,440
<442=444,443
<445=447,446
<449=523,477,452,450
<450=451
<452=476,453
<453=456,454
<454=455
<456=457
<457=470,458
<458=468,466,459
<459=460
<460=462,461
<462=463
<463=465,464
<466=467
<468=469
<470=471
<471=473,472
<473=475,474
<477=478
<478=511,497,481,479
<479=480
<481=484,482
<482=483
<484=485
<485=496,486
<486=492,487
<487=490,488
<488=489
<490=491
<492=493
<493=495,494
<497=500,498
<498=499
<500=501
<501=510,502
<502=506,503
<503=504
<504=505
<506=507
<507=509,508
<511=514,512
<512=513
<514=515
<515=522,516
<516=518,517
<518=519
<519=521,520
<523=524
<524=531,530,525
<525=529,526
<526=528,527
<553=568,567,554
<554=564,561,558,555
<555=557,556
<558=560,559
<561=563,562
<564=566,565
<568=847,840,829,820,657,650,646,637,613,594,571,569
<569=570
<571=593,572
<572=575,573
<573=574
<575=576
<576=589,577
<577=587,585,578
<578=579
<579=581,580
<581=582
<582=584,583
<585=586
<587=588
<589=590
<590=592,591
<594=595
<595=602,596
<596=597
<597=599,598
<599=601,600
<602=603
<603=612,611,604
<604=610,605
<605=609,606
<606=608,607
<613=629,625,622,614
<614=615
<615=619,616
<616=618,617
<619=621,620
<622=624,623
<625=626
<626=628,627
<629=630
<630=631
<631=636,635,632
<632=634,633
<637=638
<638=642,639
<639=640
<640=641
<642=643
<643=645,644
<646=647
<647=649,648
<650=651
<651=655,652
<652=653
<653=654
<655=656
<657=804,658
<658=659
<659=793,772,660
<660=661
<661=761,740,662
<662=663
<663=729,708,664
<664=665
<665=697,676,666
<666=667
<667=675,674,673,672,671,670,669,668
<676=677
<677=678
<678=694,679
<679=692,680
<680=690,681
<681=682
<682=688,683
<683=684
<684=685
<685=687,686
<688=689
<690=691
<692=693
<694=696,695
<697=698
<698=700,699
<700=706,701
<701=704,702
<702=703
<704=705
<706=707
<708=709
<709=710
<710=726,711
<711=724,712
<712=722,713
<713=714
<714=720,715
<715=716
<716=717
<717=719,718
<720=721
<722=723
<724=725
<726=728,727
<729=730
<730=732,731
<732=738,733
<733=736,734
<734=735
<736=737
<738=739
<740=741
<741=742
<742=758,743
<743=756,744
<744=754,745
<745=746
<746=752,747
<747=748
<748=749
<749=751,750
<752=753
<754=755
<756=757
<758=760,759
<761=762
<762=764,763
<764=770,765
<765=768,766
<766=767
<768=769
<770=771
<772=773
<773=774
<774=790,775
<775=788,776
<776=786,777
<777=778
<778=784,779
<779=780
<780=781
<781=783,782
<784=785
<786=787
<788=789
<790=792,791
<793=794
<794=796,795
<796=802,797
<797=800,798
<798=799
<800=801
<802=803
<804=805
<805=819,806
<806=817,807
<807=815,808
<808=809
<809=813,810
<810=811
<811=812
<813=814
<815=816
<817=818
<820=821
<821=827,822
<822=825,823
<823=824
<825=826
<827=828
<829=830
<830=839,838,831
<831=837,832
<832=836,835,834,833
<840=841
<841=846,845,842
<842=844,843
<847=848
<848=850,849
<881=887,886,882
<882=883
<883=885,884
<887=891,890,888
<888=889
<891=892
<892=899,898,893
<893=897,894
<894=896,895
<905=911,910,906
<906=907
<907=909,908
<911=914,912
<912=913
<914=915
<915=921,916
<916=920,917
<917=919,918
<921=923,922
