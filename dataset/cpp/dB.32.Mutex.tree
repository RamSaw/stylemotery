>3	FunctionDef	CMutex 
>4	ParameterList	 
>5	ReturnType	include < Object / Tracer . hpp >
>6	CompoundStatement	 
>7	IfStatement	if ( m_Mutex == NULL )
>8	CompoundStatement	 
>9	ExpressionStatement	 
>10	ShiftExpression	cerr << \"Cannot create new mutex!\" << endl
>11	ShiftExpression	\"Cannot create new mutex!\" << endl
>12	Identifier	endl
>13	PrimaryExpression	\"Cannot create new mutex!\"
>14	Identifier	cerr
>15	Condition	 
>16	EqualityExpression	m_Mutex == NULL
>17	Identifier	NULL
>18	Identifier	m_Mutex
>19	ExpressionStatement	 
>20	AssignmentExpr	m_Mutex = CreateMutex ( NULL , FALSE , NULL )
>21	CallExpression	CreateMutex ( NULL , FALSE , NULL )
>22	ArgumentList	NULL
>23	Argument	NULL
>24	Identifier	NULL
>25	Argument	FALSE
>26	Identifier	FALSE
>27	Argument	NULL
>28	Identifier	NULL
>29	Callee	CreateMutex
>30	Identifier	CreateMutex
>31	Identifier	m_Mutex
>32	ExpressionStatement	 
>33	CallExpression	pth_mutex_init ( & m_Mutex )
>34	ArgumentList	& m_Mutex
>35	Argument	& m_Mutex
>36	UnaryOp	& m_Mutex
>37	Identifier	m_Mutex
>38	UnaryOperator	&
>39	Callee	pth_mutex_init
>40	Identifier	pth_mutex_init
>41	ExpressionStatement	 
>42	AssignmentExpr	m_bAcquired = false
>43	Identifier	false
>44	Identifier	m_bAcquired
>45	ExpressionStatement	 
>46	CallExpression	Trace ( tagLocks , levVerbose , ( \"CMutex - ctor (%#x)\" , ( long ) this ) )
>47	ArgumentList	tagLocks
>48	Argument	\"CMutex - ctor (%#x)\" , ( long ) this
>49	Expression	\"CMutex - ctor (%#x)\" , ( long ) this
>50	CastExpression	( long ) this
>51	Identifier	this
>52	CastTarget	long
>53	PrimaryExpression	\"CMutex - ctor (%#x)\"
>54	Argument	levVerbose
>55	Identifier	levVerbose
>56	Argument	tagLocks
>57	Identifier	tagLocks
>58	Callee	Trace
>59	Identifier	Trace
>73	FunctionDef	CMutex 
>74	ParameterList	 
>75	CompoundStatement	 
>76	IfStatement	if ( ! CloseHandle ( m_Mutex ) )
>77	CompoundStatement	 
>78	ExpressionStatement	 
>79	ShiftExpression	cerr << \"Error while closing mutex object!\" << endl
>80	ShiftExpression	\"Error while closing mutex object!\" << endl
>81	Identifier	endl
>82	PrimaryExpression	\"Error while closing mutex object!\"
>83	Identifier	cerr
>84	Condition	 
>85	UnaryOp	! CloseHandle ( m_Mutex )
>86	CallExpression	CloseHandle ( m_Mutex )
>87	ArgumentList	m_Mutex
>88	Argument	m_Mutex
>89	Identifier	m_Mutex
>90	Callee	CloseHandle
>91	Identifier	CloseHandle
>92	UnaryOperator	!
>93	ExpressionStatement	 
>94	CallExpression	pth_mutex_release ( & m_Mutex )
>95	ArgumentList	& m_Mutex
>96	Argument	& m_Mutex
>97	UnaryOp	& m_Mutex
>98	Identifier	m_Mutex
>99	UnaryOperator	&
>100	Callee	pth_mutex_release
>101	Identifier	pth_mutex_release
>102	ExpressionStatement	 
>103	CallExpression	assert ( ! m_bAcquired )
>104	ArgumentList	! m_bAcquired
>105	Argument	! m_bAcquired
>106	UnaryOp	! m_bAcquired
>107	Identifier	m_bAcquired
>108	UnaryOperator	!
>109	Callee	assert
>110	Identifier	assert
>111	ExpressionStatement	 
>112	CallExpression	Trace ( tagLocks , levVerbose , ( \"CMutex - dtor (%#x)\" , ( long ) this ) )
>113	ArgumentList	tagLocks
>114	Argument	\"CMutex - dtor (%#x)\" , ( long ) this
>115	Expression	\"CMutex - dtor (%#x)\" , ( long ) this
>116	CastExpression	( long ) this
>117	Identifier	this
>118	CastTarget	long
>119	PrimaryExpression	\"CMutex - dtor (%#x)\"
>120	Argument	levVerbose
>121	Identifier	levVerbose
>122	Argument	tagLocks
>123	Identifier	tagLocks
>124	Callee	Trace
>125	Identifier	Trace
>136	FunctionDef	CMutex 
>137	ParameterList	 
>138	ReturnType	void
>139	CompoundStatement	 
>140	ExpressionStatement	 
>141	CallExpression	Trace ( tagLocks , levVerbose , ( \"CMutex - acquired (%#x)\" , ( long ) this ) )
>142	ArgumentList	tagLocks
>143	Argument	\"CMutex - acquired (%#x)\" , ( long ) this
>144	Expression	\"CMutex - acquired (%#x)\" , ( long ) this
>145	CastExpression	( long ) this
>146	Identifier	this
>147	CastTarget	long
>148	PrimaryExpression	\"CMutex - acquired (%#x)\"
>149	Argument	levVerbose
>150	Identifier	levVerbose
>151	Argument	tagLocks
>152	Identifier	tagLocks
>153	Callee	Trace
>154	Identifier	Trace
>155	ExpressionStatement	 
>156	AssignmentExpr	m_bAcquired = true
>157	Identifier	true
>158	Identifier	m_bAcquired
>159	ExpressionStatement	 
>160	CallExpression	assert ( ! m_bAcquired )
>161	ArgumentList	! m_bAcquired
>162	Argument	! m_bAcquired
>163	UnaryOp	! m_bAcquired
>164	Identifier	m_bAcquired
>165	UnaryOperator	!
>166	Callee	assert
>167	Identifier	assert
>168	IfStatement	if ( WaitForSingleObject ( m_Mutex , INFINITE ) == WAIT_FAILED )
>169	CompoundStatement	 
>170	ExpressionStatement	 
>171	CallExpression	assert ( false )
>172	ArgumentList	false
>173	Argument	false
>174	Identifier	false
>175	Callee	assert
>176	Identifier	assert
>177	ExpressionStatement	 
>178	CallExpression	CHandler 
>179	ArgumentList	 
>180	Callee	CHandler 
>181	Identifier	CHandler 
>182	ExpressionStatement	 
>183	ShiftExpression	cerr << \"Error while waiting for mutex lock !\" << endl
>184	ShiftExpression	\"Error while waiting for mutex lock !\" << endl
>185	Identifier	endl
>186	PrimaryExpression	\"Error while waiting for mutex lock !\"
>187	Identifier	cerr
>188	Condition	 
>189	EqualityExpression	WaitForSingleObject ( m_Mutex , INFINITE ) == WAIT_FAILED
>190	Identifier	WAIT_FAILED
>191	CallExpression	WaitForSingleObject ( m_Mutex , INFINITE )
>192	ArgumentList	m_Mutex
>193	Argument	INFINITE
>194	Identifier	INFINITE
>195	Argument	m_Mutex
>196	Identifier	m_Mutex
>197	Callee	WaitForSingleObject
>198	Identifier	WaitForSingleObject
>199	ExpressionStatement	 
>200	CallExpression	pth_mutex_acquire ( & m_Mutex , FALSE , NULL )
>201	ArgumentList	& m_Mutex
>202	Argument	NULL
>203	Identifier	NULL
>204	Argument	FALSE
>205	Identifier	FALSE
>206	Argument	& m_Mutex
>207	UnaryOp	& m_Mutex
>208	Identifier	m_Mutex
>209	UnaryOperator	&
>210	Callee	pth_mutex_acquire
>211	Identifier	pth_mutex_acquire
>212	ExpressionStatement	 
>213	CallExpression	Trace ( tagLocks , levVerbose , ( \"CMutex - lock (%#x)\" , ( long ) this ) )
>214	ArgumentList	tagLocks
>215	Argument	\"CMutex - lock (%#x)\" , ( long ) this
>216	Expression	\"CMutex - lock (%#x)\" , ( long ) this
>217	CastExpression	( long ) this
>218	Identifier	this
>219	CastTarget	long
>220	PrimaryExpression	\"CMutex - lock (%#x)\"
>221	Argument	levVerbose
>222	Identifier	levVerbose
>223	Argument	tagLocks
>224	Identifier	tagLocks
>225	Callee	Trace
>226	Identifier	Trace
>243	FunctionDef	CMutex 
>244	ParameterList	 
>245	ReturnType	void
>246	CompoundStatement	 
>247	IfStatement	if ( ! ReleaseMutex ( m_Mutex ) )
>248	CompoundStatement	 
>249	ExpressionStatement	 
>250	CallExpression	assert ( false )
>251	ArgumentList	false
>252	Argument	false
>253	Identifier	false
>254	Callee	assert
>255	Identifier	assert
>256	ExpressionStatement	 
>257	CallExpression	CHandler 
>258	ArgumentList	 
>259	Callee	CHandler 
>260	Identifier	CHandler 
>261	ExpressionStatement	 
>262	ShiftExpression	cerr << \"Error while releasing mutex lock !\" << endl
>263	ShiftExpression	\"Error while releasing mutex lock !\" << endl
>264	Identifier	endl
>265	PrimaryExpression	\"Error while releasing mutex lock !\"
>266	Identifier	cerr
>267	Condition	 
>268	UnaryOp	! ReleaseMutex ( m_Mutex )
>269	CallExpression	ReleaseMutex ( m_Mutex )
>270	ArgumentList	m_Mutex
>271	Argument	m_Mutex
>272	Identifier	m_Mutex
>273	Callee	ReleaseMutex
>274	Identifier	ReleaseMutex
>275	UnaryOperator	!
>276	ExpressionStatement	 
>277	CallExpression	pth_mutex_release ( & m_Mutex )
>278	ArgumentList	& m_Mutex
>279	Argument	& m_Mutex
>280	UnaryOp	& m_Mutex
>281	Identifier	m_Mutex
>282	UnaryOperator	&
>283	Callee	pth_mutex_release
>284	Identifier	pth_mutex_release
>285	ExpressionStatement	 
>286	AssignmentExpr	m_bAcquired = false
>287	Identifier	false
>288	Identifier	m_bAcquired
>289	ExpressionStatement	 
>290	CallExpression	assert ( m_bAcquired )
>291	ArgumentList	m_bAcquired
>292	Argument	m_bAcquired
>293	Identifier	m_bAcquired
>294	Callee	assert
>295	Identifier	assert
>296	ExpressionStatement	 
>297	CallExpression	Trace ( tagLocks , levVerbose , ( \"CMutex - unlock (%#x)\" , ( long ) this ) )
>298	ArgumentList	tagLocks
>299	Argument	\"CMutex - unlock (%#x)\" , ( long ) this
>300	Expression	\"CMutex - unlock (%#x)\" , ( long ) this
>301	CastExpression	( long ) this
>302	Identifier	this
>303	CastTarget	long
>304	PrimaryExpression	\"CMutex - unlock (%#x)\"
>305	Argument	levVerbose
>306	Identifier	levVerbose
>307	Argument	tagLocks
>308	Identifier	tagLocks
>309	Callee	Trace
>310	Identifier	Trace
<3=6,5,4
<6=45,41,32,19,7
<7=15,8
<8=9
<9=10
<10=14,11
<11=13,12
<15=16
<16=18,17
<19=20
<20=31,21
<21=29,22
<22=27,25,23
<23=24
<25=26
<27=28
<29=30
<32=33
<33=39,34
<34=35
<35=36
<36=38,37
<39=40
<41=42
<42=44,43
<45=46
<46=58,47
<47=56,54,48
<48=49
<49=53,50
<50=52,51
<54=55
<56=57
<58=59
<73=75,74
<75=111,102,93,76
<76=84,77
<77=78
<78=79
<79=83,80
<80=82,81
<84=85
<85=92,86
<86=90,87
<87=88
<88=89
<90=91
<93=94
<94=100,95
<95=96
<96=97
<97=99,98
<100=101
<102=103
<103=109,104
<104=105
<105=106
<106=108,107
<109=110
<111=112
<112=124,113
<113=122,120,114
<114=115
<115=119,116
<116=118,117
<120=121
<122=123
<124=125
<136=139,138,137
<139=212,199,168,159,155,140
<140=141
<141=153,142
<142=151,149,143
<143=144
<144=148,145
<145=147,146
<149=150
<151=152
<153=154
<155=156
<156=158,157
<159=160
<160=166,161
<161=162
<162=163
<163=165,164
<166=167
<168=188,169
<169=182,177,170
<170=171
<171=175,172
<172=173
<173=174
<175=176
<177=178
<178=180,179
<180=181
<182=183
<183=187,184
<184=186,185
<188=189
<189=191,190
<191=197,192
<192=195,193
<193=194
<195=196
<197=198
<199=200
<200=210,201
<201=206,204,202
<202=203
<204=205
<206=207
<207=209,208
<210=211
<212=213
<213=225,214
<214=223,221,215
<215=216
<216=220,217
<217=219,218
<221=222
<223=224
<225=226
<243=246,245,244
<246=296,289,285,276,247
<247=267,248
<248=261,256,249
<249=250
<250=254,251
<251=252
<252=253
<254=255
<256=257
<257=259,258
<259=260
<261=262
<262=266,263
<263=265,264
<267=268
<268=275,269
<269=273,270
<270=271
<271=272
<273=274
<276=277
<277=283,278
<278=279
<279=280
<280=282,281
<283=284
<285=286
<286=288,287
<289=290
<290=294,291
<291=292
<292=293
<294=295
<296=297
<297=309,298
<298=307,305,299
<299=300
<300=304,301
<301=303,302
<305=306
<307=308
<309=310
