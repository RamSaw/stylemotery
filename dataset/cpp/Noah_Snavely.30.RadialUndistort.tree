>23	FunctionDef	ReadBundleFile (char * bundle_file , std 
>24	ParameterList	char * bundle_file , std 
>25	Parameter	 
>26	Identifier	points
>27	ParameterType	std 
>28	Parameter	 
>29	Identifier	cameras
>30	ParameterType	std 
>31	Parameter	 
>32	Identifier	filenames
>33	ParameterType	std 
>34	Parameter	 
>35	Identifier	bundle_file
>36	ParameterType	char *
>37	ReturnType	void
>38	CompoundStatement	 
>39	ExpressionStatement	 
>40	CallExpression	fclose ( f )
>41	ArgumentList	f
>42	Argument	f
>43	Identifier	f
>44	Callee	fclose
>45	Identifier	fclose
>46	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>47	CompoundStatement	 
>48	IfStatement	if ( num_visible > 0 )
>49	CompoundStatement	 
>50	ExpressionStatement	 
>51	CallExpression	points . push_back ( pt )
>52	ArgumentList	pt
>53	Argument	pt
>54	Identifier	pt
>55	Callee	points . push_back
>56	MemberAccess	points . push_back
>57	Identifier	push_back
>58	Identifier	points
>59	Condition	 
>60	RelationalExpression	num_visible > 0
>61	PrimaryExpression	0
>62	Identifier	num_visible
>63	IfStatement	if ( bundle_version < 0.3 )
>64	ExpressionStatement	 
>65	AssignmentExpr	pt . pos [ 2 ] = - pt . pos [ 2 ]
>66	UnaryOp	- pt . pos [ 2 ]
>67	ArrayIndexing	pt . pos [ 2 ]
>68	PrimaryExpression	2
>69	MemberAccess	pt . pos
>70	Identifier	pos
>71	Identifier	pt
>72	UnaryOperator	-
>73	ArrayIndexing	pt . pos [ 2 ]
>74	PrimaryExpression	2
>75	MemberAccess	pt . pos
>76	Identifier	pos
>77	Identifier	pt
>78	Condition	 
>79	RelationalExpression	bundle_version < 0.3
>80	PrimaryExpression	0.3
>81	Identifier	bundle_version
>82	ForStatement	for ( int j = 0 ; j < num_visible ; j ++ )
>83	CompoundStatement	 
>84	ExpressionStatement	 
>85	CallExpression	pt . views . push_back ( view )
>86	ArgumentList	view
>87	Argument	view
>88	Identifier	view
>89	Callee	pt . views . push_back
>90	MemberAccess	pt . views . push_back
>91	Identifier	push_back
>92	MemberAccess	pt . views
>93	Identifier	views
>94	Identifier	pt
>95	ExpressionStatement	 
>96	AssignmentExpr	view . y = y
>97	Identifier	y
>98	MemberAccess	view . y
>99	Identifier	y
>100	Identifier	view
>101	ExpressionStatement	 
>102	AssignmentExpr	view . x = x
>103	Identifier	x
>104	MemberAccess	view . x
>105	Identifier	x
>106	Identifier	view
>107	ExpressionStatement	 
>108	AssignmentExpr	view . key = key
>109	Identifier	key
>110	MemberAccess	view . key
>111	Identifier	key
>112	Identifier	view
>113	ExpressionStatement	 
>114	AssignmentExpr	view . image = image
>115	Identifier	image
>116	MemberAccess	view . image
>117	Identifier	image
>118	Identifier	view
>119	IdentifierDeclStatement	 
>120	IdentifierDecl	view
>121	Identifier	view
>122	IdentifierDeclType	view_t
>123	IfStatement	if ( bundle_version >= 0.3 )
>124	ExpressionStatement	 
>125	CallExpression	fscanf ( f , \"%lf %lf\" , & x , & y )
>126	ArgumentList	f
>127	Argument	& y
>128	UnaryOp	& y
>129	Identifier	y
>130	UnaryOperator	&
>131	Argument	& x
>132	UnaryOp	& x
>133	Identifier	x
>134	UnaryOperator	&
>135	Argument	\"%lf %lf\"
>136	PrimaryExpression	\"%lf %lf\"
>137	Argument	f
>138	Identifier	f
>139	Callee	fscanf
>140	Identifier	fscanf
>141	Condition	 
>142	RelationalExpression	bundle_version >= 0.3
>143	PrimaryExpression	0.3
>144	Identifier	bundle_version
>145	IdentifierDeclStatement	 
>146	IdentifierDecl	y
>147	Identifier	y
>148	IdentifierDeclType	double
>149	IdentifierDecl	x
>150	Identifier	x
>151	IdentifierDeclType	double
>152	ExpressionStatement	 
>153	CallExpression	fscanf ( f , \"%d %d\" , & image , & key )
>154	ArgumentList	f
>155	Argument	& key
>156	UnaryOp	& key
>157	Identifier	key
>158	UnaryOperator	&
>159	Argument	& image
>160	UnaryOp	& image
>161	Identifier	image
>162	UnaryOperator	&
>163	Argument	\"%d %d\"
>164	PrimaryExpression	\"%d %d\"
>165	Argument	f
>166	Identifier	f
>167	Callee	fscanf
>168	Identifier	fscanf
>169	IdentifierDeclStatement	 
>170	IdentifierDecl	key
>171	Identifier	key
>172	IdentifierDeclType	int
>173	IdentifierDecl	image
>174	Identifier	image
>175	IdentifierDeclType	int
>176	IncDecOp	 
>177	IncDec	++
>178	Identifier	j
>179	Condition	 
>180	RelationalExpression	j < num_visible
>181	Identifier	num_visible
>182	Identifier	j
>183	ForInit	 
>184	IdentifierDeclStatement	int j = 0 ;
>185	IdentifierDecl	j = 0
>186	AssignmentExpr	j = 0
>187	PrimaryExpression	0
>188	Identifier	j
>189	Identifier	j
>190	IdentifierDeclType	int
>191	ExpressionStatement	 
>192	CallExpression	fscanf ( f , \"%d\" , & num_visible )
>193	ArgumentList	f
>194	Argument	& num_visible
>195	UnaryOp	& num_visible
>196	Identifier	num_visible
>197	UnaryOperator	&
>198	Argument	\"%d\"
>199	PrimaryExpression	\"%d\"
>200	Argument	f
>201	Identifier	f
>202	Callee	fscanf
>203	Identifier	fscanf
>204	IdentifierDeclStatement	 
>205	IdentifierDecl	num_visible
>206	Identifier	num_visible
>207	IdentifierDeclType	int
>208	IfStatement	if ( bundle_version >= 0.4 && coalesced )
>209	CompoundStatement	 
>210	ForStatement	for ( int j = 0 ; j < 16 ; j ++ )
>211	CompoundStatement	 
>212	ExpressionStatement	 
>213	CallExpression	fscanf ( f , \"\n\" )
>214	ArgumentList	f
>215	Argument	\"\n\"
>216	PrimaryExpression	\"\n\"
>217	Argument	f
>218	Identifier	f
>219	Callee	fscanf
>220	Identifier	fscanf
>221	ForStatement	for ( int k = 0 ; k < 8 ; k ++ )
>222	CompoundStatement	 
>223	ExpressionStatement	 
>224	CallExpression	fscanf ( f , \"%f\" , desc + j * 8 + k )
>225	ArgumentList	f
>226	Argument	desc + j * 8 + k
>227	AdditiveExpression	desc + j * 8 + k
>228	AdditiveExpression	j * 8 + k
>229	Identifier	k
>230	MultiplicativeExpression	j * 8
>231	PrimaryExpression	8
>232	Identifier	j
>233	Identifier	desc
>234	Argument	\"%f\"
>235	PrimaryExpression	\"%f\"
>236	Argument	f
>237	Identifier	f
>238	Callee	fscanf
>239	Identifier	fscanf
>240	IncDecOp	 
>241	IncDec	++
>242	Identifier	k
>243	Condition	 
>244	RelationalExpression	k < 8
>245	PrimaryExpression	8
>246	Identifier	k
>247	ForInit	 
>248	IdentifierDeclStatement	int k = 0 ;
>249	IdentifierDecl	k = 0
>250	AssignmentExpr	k = 0
>251	PrimaryExpression	0
>252	Identifier	k
>253	Identifier	k
>254	IdentifierDeclType	int
>255	IncDecOp	 
>256	IncDec	++
>257	Identifier	j
>258	Condition	 
>259	RelationalExpression	j < 16
>260	PrimaryExpression	16
>261	Identifier	j
>262	ForInit	 
>263	IdentifierDeclStatement	int j = 0 ;
>264	IdentifierDecl	j = 0
>265	AssignmentExpr	j = 0
>266	PrimaryExpression	0
>267	Identifier	j
>268	Identifier	j
>269	IdentifierDeclType	int
>270	IdentifierDeclStatement	 
>271	IdentifierDecl	desc [ 128 ]
>272	PrimaryExpression	128
>273	Identifier	desc
>274	IdentifierDeclType	float [ 128 ]
>275	Condition	 
>276	AndExpression	bundle_version >= 0.4 && coalesced
>277	Identifier	coalesced
>278	RelationalExpression	bundle_version >= 0.4
>279	PrimaryExpression	0.4
>280	Identifier	bundle_version
>281	ExpressionStatement	 
>282	CallExpression	fscanf ( f , \"%lf %lf %lf\n\" , pt . color + 0 , pt . color + 1 , pt . color + 2 )
>283	ArgumentList	f
>284	Argument	pt . color + 2
>285	AdditiveExpression	pt . color + 2
>286	PrimaryExpression	2
>287	MemberAccess	pt . color
>288	Identifier	color
>289	Identifier	pt
>290	Argument	pt . color + 1
>291	AdditiveExpression	pt . color + 1
>292	PrimaryExpression	1
>293	MemberAccess	pt . color
>294	Identifier	color
>295	Identifier	pt
>296	Argument	pt . color + 0
>297	AdditiveExpression	pt . color + 0
>298	PrimaryExpression	0
>299	MemberAccess	pt . color
>300	Identifier	color
>301	Identifier	pt
>302	Argument	\"%lf %lf %lf\n\"
>303	PrimaryExpression	\"%lf %lf %lf\n\"
>304	Argument	f
>305	Identifier	f
>306	Callee	fscanf
>307	Identifier	fscanf
>308	ExpressionStatement	 
>309	CallExpression	fscanf ( f , \"%lf %lf %lf\n\" , pt . pos + 0 , pt . pos + 1 , pt . pos + 2 )
>310	ArgumentList	f
>311	Argument	pt . pos + 2
>312	AdditiveExpression	pt . pos + 2
>313	PrimaryExpression	2
>314	MemberAccess	pt . pos
>315	Identifier	pos
>316	Identifier	pt
>317	Argument	pt . pos + 1
>318	AdditiveExpression	pt . pos + 1
>319	PrimaryExpression	1
>320	MemberAccess	pt . pos
>321	Identifier	pos
>322	Identifier	pt
>323	Argument	pt . pos + 0
>324	AdditiveExpression	pt . pos + 0
>325	PrimaryExpression	0
>326	MemberAccess	pt . pos
>327	Identifier	pos
>328	Identifier	pt
>329	Argument	\"%lf %lf %lf\n\"
>330	PrimaryExpression	\"%lf %lf %lf\n\"
>331	Argument	f
>332	Identifier	f
>333	Callee	fscanf
>334	Identifier	fscanf
>335	IfStatement	if ( bundle_version >= 0.4 )
>336	CompoundStatement	 
>337	ExpressionStatement	 
>338	CallExpression	fscanf ( f , \"%d\n\" , & player_id )
>339	ArgumentList	f
>340	Argument	& player_id
>341	UnaryOp	& player_id
>342	Identifier	player_id
>343	UnaryOperator	&
>344	Argument	\"%d\n\"
>345	PrimaryExpression	\"%d\n\"
>346	Argument	f
>347	Identifier	f
>348	Callee	fscanf
>349	Identifier	fscanf
>350	IdentifierDeclStatement	 
>351	IdentifierDecl	player_id
>352	Identifier	player_id
>353	IdentifierDeclType	int
>354	Condition	 
>355	RelationalExpression	bundle_version >= 0.4
>356	PrimaryExpression	0.4
>357	Identifier	bundle_version
>358	IdentifierDeclStatement	 
>359	IdentifierDecl	pt
>360	Identifier	pt
>361	IdentifierDeclType	point_t
>362	IncDecOp	 
>363	IncDec	++
>364	Identifier	i
>365	Condition	 
>366	RelationalExpression	i < num_points
>367	Identifier	num_points
>368	Identifier	i
>369	ForInit	 
>370	IdentifierDeclStatement	int i = 0 ;
>371	IdentifierDecl	i = 0
>372	AssignmentExpr	i = 0
>373	PrimaryExpression	0
>374	Identifier	i
>375	Identifier	i
>376	IdentifierDeclType	int
>377	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>378	CompoundStatement	 
>379	ExpressionStatement	 
>380	CallExpression	cameras . push_back ( cam )
>381	ArgumentList	cam
>382	Argument	cam
>383	Identifier	cam
>384	Callee	cameras . push_back
>385	MemberAccess	cameras . push_back
>386	Identifier	push_back
>387	Identifier	cameras
>388	IfStatement	if ( bundle_version < 0.3 )
>389	CompoundStatement	 
>390	ExpressionStatement	 
>391	AssignmentExpr	t [ 2 ] = - t [ 2 ]
>392	UnaryOp	- t [ 2 ]
>393	ArrayIndexing	t [ 2 ]
>394	PrimaryExpression	2
>395	Identifier	t
>396	UnaryOperator	-
>397	ArrayIndexing	t [ 2 ]
>398	PrimaryExpression	2
>399	Identifier	t
>400	ExpressionStatement	 
>401	AssignmentExpr	R [ 7 ] = - R [ 7 ]
>402	UnaryOp	- R [ 7 ]
>403	ArrayIndexing	R [ 7 ]
>404	PrimaryExpression	7
>405	Identifier	R
>406	UnaryOperator	-
>407	ArrayIndexing	R [ 7 ]
>408	PrimaryExpression	7
>409	Identifier	R
>410	ExpressionStatement	 
>411	AssignmentExpr	R [ 6 ] = - R [ 6 ]
>412	UnaryOp	- R [ 6 ]
>413	ArrayIndexing	R [ 6 ]
>414	PrimaryExpression	6
>415	Identifier	R
>416	UnaryOperator	-
>417	ArrayIndexing	R [ 6 ]
>418	PrimaryExpression	6
>419	Identifier	R
>420	ExpressionStatement	 
>421	AssignmentExpr	R [ 5 ] = - R [ 5 ]
>422	UnaryOp	- R [ 5 ]
>423	ArrayIndexing	R [ 5 ]
>424	PrimaryExpression	5
>425	Identifier	R
>426	UnaryOperator	-
>427	ArrayIndexing	R [ 5 ]
>428	PrimaryExpression	5
>429	Identifier	R
>430	ExpressionStatement	 
>431	AssignmentExpr	R [ 2 ] = - R [ 2 ]
>432	UnaryOp	- R [ 2 ]
>433	ArrayIndexing	R [ 2 ]
>434	PrimaryExpression	2
>435	Identifier	R
>436	UnaryOperator	-
>437	ArrayIndexing	R [ 2 ]
>438	PrimaryExpression	2
>439	Identifier	R
>440	Condition	 
>441	RelationalExpression	bundle_version < 0.3
>442	PrimaryExpression	0.3
>443	Identifier	bundle_version
>444	ExpressionStatement	 
>445	CallExpression	memcpy ( cam . t , t , sizeof ( double ) * 3 )
>446	ArgumentList	cam . t
>447	Argument	sizeof ( double ) * 3
>448	MultiplicativeExpression	sizeof ( double ) * 3
>449	PrimaryExpression	3
>450	SizeofExpr	sizeof ( double )
>451	SizeofOperand	double
>452	Sizeof	sizeof
>453	Argument	t
>454	Identifier	t
>455	Argument	cam . t
>456	MemberAccess	cam . t
>457	Identifier	t
>458	Identifier	cam
>459	Callee	memcpy
>460	Identifier	memcpy
>461	ExpressionStatement	 
>462	CallExpression	memcpy ( cam . R , R , sizeof ( double ) * 9 )
>463	ArgumentList	cam . R
>464	Argument	sizeof ( double ) * 9
>465	MultiplicativeExpression	sizeof ( double ) * 9
>466	PrimaryExpression	9
>467	SizeofExpr	sizeof ( double )
>468	SizeofOperand	double
>469	Sizeof	sizeof
>470	Argument	R
>471	Identifier	R
>472	Argument	cam . R
>473	MemberAccess	cam . R
>474	Identifier	R
>475	Identifier	cam
>476	Callee	memcpy
>477	Identifier	memcpy
>478	ExpressionStatement	 
>479	AssignmentExpr	cam . k [ 1 ] = k1
>480	Identifier	k1
>481	ArrayIndexing	cam . k [ 1 ]
>482	PrimaryExpression	1
>483	MemberAccess	cam . k
>484	Identifier	k
>485	Identifier	cam
>486	ExpressionStatement	 
>487	AssignmentExpr	cam . k [ 0 ] = k0
>488	Identifier	k0
>489	ArrayIndexing	cam . k [ 0 ]
>490	PrimaryExpression	0
>491	MemberAccess	cam . k
>492	Identifier	k
>493	Identifier	cam
>494	ExpressionStatement	 
>495	AssignmentExpr	cam . f = focal_length
>496	Identifier	focal_length
>497	MemberAccess	cam . f
>498	Identifier	f
>499	Identifier	cam
>500	IdentifierDeclStatement	 
>501	IdentifierDecl	cam
>502	Identifier	cam
>503	IdentifierDeclType	camera_params_t
>504	ExpressionStatement	 
>505	CallExpression	fscanf ( f , \"%lf %lf %lf\n\" , t + 0 , t + 1 , t + 2 )
>506	ArgumentList	f
>507	Argument	t + 2
>508	AdditiveExpression	t + 2
>509	PrimaryExpression	2
>510	Identifier	t
>511	Argument	t + 1
>512	AdditiveExpression	t + 1
>513	PrimaryExpression	1
>514	Identifier	t
>515	Argument	t + 0
>516	AdditiveExpression	t + 0
>517	PrimaryExpression	0
>518	Identifier	t
>519	Argument	\"%lf %lf %lf\n\"
>520	PrimaryExpression	\"%lf %lf %lf\n\"
>521	Argument	f
>522	Identifier	f
>523	Callee	fscanf
>524	Identifier	fscanf
>525	ExpressionStatement	 
>526	CallExpression	fscanf ( f , \"%lf %lf %lf\n%lf %lf %lf\n%lf %lf %lf\n\" , R + 0 , R + 1 , R + 2 , R + 3 , R + 4 , R + 5 , R + 6 , \
>527	ArgumentList	f
>528	Argument	R + 8
>529	AdditiveExpression	R + 8
>530	PrimaryExpression	8
>531	Identifier	R
>532	Argument	R + 7
>533	AdditiveExpression	R + 7
>534	PrimaryExpression	7
>535	Identifier	R
>536	Argument	R + 6
>537	AdditiveExpression	R + 6
>538	PrimaryExpression	6
>539	Identifier	R
>540	Argument	R + 5
>541	AdditiveExpression	R + 5
>542	PrimaryExpression	5
>543	Identifier	R
>544	Argument	R + 4
>545	AdditiveExpression	R + 4
>546	PrimaryExpression	4
>547	Identifier	R
>548	Argument	R + 3
>549	AdditiveExpression	R + 3
>550	PrimaryExpression	3
>551	Identifier	R
>552	Argument	R + 2
>553	AdditiveExpression	R + 2
>554	PrimaryExpression	2
>555	Identifier	R
>556	Argument	R + 1
>557	AdditiveExpression	R + 1
>558	PrimaryExpression	1
>559	Identifier	R
>560	Argument	R + 0
>561	AdditiveExpression	R + 0
>562	PrimaryExpression	0
>563	Identifier	R
>564	Argument	\"%lf %lf %lf\n%lf %lf %lf\n%lf %lf %lf\n\"
>565	PrimaryExpression	\"%lf %lf %lf\n%lf %lf %lf\n%lf %lf %lf\n\"
>566	Argument	f
>567	Identifier	f
>568	Callee	fscanf
>569	Identifier	fscanf
>570	IfStatement	if ( bundle_version < 0.2 )
>571	ElseStatement	else
>572	IfStatement	if ( bundle_version < 0.4 )
>573	ElseStatement	else
>574	CompoundStatement	 
>575	ExpressionStatement	 
>576	CallExpression	filenames . push_back ( std 
>577	ArgumentList	std 
>578	Argument	std 
>579	CallExpression	std 
>580	ArgumentList	name
>581	Argument	name
>582	Identifier	name
>583	Callee	std 
>584	Identifier	std 
>585	Callee	filenames . push_back
>586	MemberAccess	filenames . push_back
>587	Identifier	push_back
>588	Identifier	filenames
>589	ExpressionStatement	 
>590	CallExpression	fscanf ( f , \"%lf %lf %lf\n\" , & focal_length , & k0 , & k1 )
>591	ArgumentList	f
>592	Argument	& k1
>593	UnaryOp	& k1
>594	Identifier	k1
>595	UnaryOperator	&
>596	Argument	& k0
>597	UnaryOp	& k0
>598	Identifier	k0
>599	UnaryOperator	&
>600	Argument	& focal_length
>601	UnaryOp	& focal_length
>602	Identifier	focal_length
>603	UnaryOperator	&
>604	Argument	\"%lf %lf %lf\n\"
>605	PrimaryExpression	\"%lf %lf %lf\n\"
>606	Argument	f
>607	Identifier	f
>608	Callee	fscanf
>609	Identifier	fscanf
>610	ExpressionStatement	 
>611	CallExpression	fscanf ( f , \"%s %d %d %lf %d\n\" , name , & w , & h , & focal_est , & player_id )
>612	ArgumentList	f
>613	Argument	& player_id
>614	UnaryOp	& player_id
>615	Identifier	player_id
>616	UnaryOperator	&
>617	Argument	& focal_est
>618	UnaryOp	& focal_est
>619	Identifier	focal_est
>620	UnaryOperator	&
>621	Argument	& h
>622	UnaryOp	& h
>623	Identifier	h
>624	UnaryOperator	&
>625	Argument	& w
>626	UnaryOp	& w
>627	Identifier	w
>628	UnaryOperator	&
>629	Argument	name
>630	Identifier	name
>631	Argument	\"%s %d %d %lf %d\n\"
>632	PrimaryExpression	\"%s %d %d %lf %d\n\"
>633	Argument	f
>634	Identifier	f
>635	Callee	fscanf
>636	Identifier	fscanf
>637	IdentifierDeclStatement	 
>638	IdentifierDecl	player_id
>639	Identifier	player_id
>640	IdentifierDeclType	int
>641	IdentifierDeclStatement	 
>642	IdentifierDecl	focal_est
>643	Identifier	focal_est
>644	IdentifierDeclType	double
>645	IdentifierDeclStatement	 
>646	IdentifierDecl	h
>647	Identifier	h
>648	IdentifierDeclType	int
>649	IdentifierDecl	w
>650	Identifier	w
>651	IdentifierDeclType	int
>652	IdentifierDeclStatement	 
>653	IdentifierDecl	name [ 512 ]
>654	PrimaryExpression	512
>655	Identifier	name
>656	IdentifierDeclType	char [ 512 ]
>657	CompoundStatement	 
>658	ExpressionStatement	 
>659	CallExpression	fscanf ( f , \"%lf %lf %lf\n\" , & focal_length , & k0 , & k1 )
>660	ArgumentList	f
>661	Argument	& k1
>662	UnaryOp	& k1
>663	Identifier	k1
>664	UnaryOperator	&
>665	Argument	& k0
>666	UnaryOp	& k0
>667	Identifier	k0
>668	UnaryOperator	&
>669	Argument	& focal_length
>670	UnaryOp	& focal_length
>671	Identifier	focal_length
>672	UnaryOperator	&
>673	Argument	\"%lf %lf %lf\n\"
>674	PrimaryExpression	\"%lf %lf %lf\n\"
>675	Argument	f
>676	Identifier	f
>677	Callee	fscanf
>678	Identifier	fscanf
>679	Condition	 
>680	RelationalExpression	bundle_version < 0.4
>681	PrimaryExpression	0.4
>682	Identifier	bundle_version
>683	CompoundStatement	 
>684	ExpressionStatement	 
>685	CallExpression	fscanf ( f , \"%lf\n\" , & focal_length )
>686	ArgumentList	f
>687	Argument	& focal_length
>688	UnaryOp	& focal_length
>689	Identifier	focal_length
>690	UnaryOperator	&
>691	Argument	\"%lf\n\"
>692	PrimaryExpression	\"%lf\n\"
>693	Argument	f
>694	Identifier	f
>695	Callee	fscanf
>696	Identifier	fscanf
>697	Condition	 
>698	RelationalExpression	bundle_version < 0.2
>699	PrimaryExpression	0.2
>700	Identifier	bundle_version
>701	IdentifierDeclStatement	 
>702	IdentifierDecl	t [ 3 ]
>703	PrimaryExpression	3
>704	Identifier	t
>705	IdentifierDeclType	double [ 3 ]
>706	IdentifierDeclStatement	 
>707	IdentifierDecl	R [ 9 ]
>708	PrimaryExpression	9
>709	Identifier	R
>710	IdentifierDeclType	double [ 9 ]
>711	IdentifierDeclStatement	 
>712	IdentifierDecl	k1
>713	Identifier	k1
>714	IdentifierDeclType	double
>715	IdentifierDecl	k0
>716	Identifier	k0
>717	IdentifierDeclType	double
>718	IdentifierDecl	focal_length
>719	Identifier	focal_length
>720	IdentifierDeclType	double
>721	IncDecOp	 
>722	IncDec	++
>723	Identifier	i
>724	Condition	 
>725	RelationalExpression	i < num_images
>726	Identifier	num_images
>727	Identifier	i
>728	ForInit	 
>729	IdentifierDeclStatement	int i = 0 ;
>730	IdentifierDecl	i = 0
>731	AssignmentExpr	i = 0
>732	PrimaryExpression	0
>733	Identifier	i
>734	Identifier	i
>735	IdentifierDeclType	int
>736	ExpressionStatement	 
>737	CallExpression	printf ( \"[ReadBundleFile] Reading %d images and %d points...\n\" , num_images , num_points )
>738	ArgumentList	\"[ReadBundleFile] Reading %d images and %d points...\n\"
>739	Argument	num_points
>740	Identifier	num_points
>741	Argument	num_images
>742	Identifier	num_images
>743	Argument	\"[ReadBundleFile] Reading %d images and %d points...\n\"
>744	PrimaryExpression	\"[ReadBundleFile] Reading %d images and %d points...\n\"
>745	Callee	printf
>746	Identifier	printf
>747	IfStatement	if ( first_line [ 0 ] == '#' )
>748	ElseStatement	else
>749	IfStatement	if ( first_line [ 0 ] == 'v' )
>750	ElseStatement	else
>751	CompoundStatement	 
>752	ExpressionStatement	 
>753	CallExpression	sscanf ( first_line , \"%d %d\n\" , & num_images , & num_points )
>754	ArgumentList	first_line
>755	Argument	& num_points
>756	UnaryOp	& num_points
>757	Identifier	num_points
>758	UnaryOperator	&
>759	Argument	& num_images
>760	UnaryOp	& num_images
>761	Identifier	num_images
>762	UnaryOperator	&
>763	Argument	\"%d %d\n\"
>764	PrimaryExpression	\"%d %d\n\"
>765	Argument	first_line
>766	Identifier	first_line
>767	Callee	sscanf
>768	Identifier	sscanf
>769	ExpressionStatement	 
>770	AssignmentExpr	bundle_version = 0.1
>771	PrimaryExpression	0.1
>772	Identifier	bundle_version
>773	CompoundStatement	 
>774	ExpressionStatement	 
>775	CallExpression	fscanf ( f , \"%d %d\n\" , & num_images , & num_points )
>776	ArgumentList	f
>777	Argument	& num_points
>778	UnaryOp	& num_points
>779	Identifier	num_points
>780	UnaryOperator	&
>781	Argument	& num_images
>782	UnaryOp	& num_images
>783	Identifier	num_images
>784	UnaryOperator	&
>785	Argument	\"%d %d\n\"
>786	PrimaryExpression	\"%d %d\n\"
>787	Argument	f
>788	Identifier	f
>789	Callee	fscanf
>790	Identifier	fscanf
>791	ExpressionStatement	 
>792	CallExpression	printf ( \"[ReadBundleFile] Bundle version
>793	ArgumentList	\"[ReadBundleFile] Bundle version
>794	Argument	version
>795	Identifier	version
>796	Argument	\"[ReadBundleFile] Bundle version
>797	PrimaryExpression	\"[ReadBundleFile] Bundle version
>798	Callee	printf
>799	Identifier	printf
>800	ExpressionStatement	 
>801	AssignmentExpr	bundle_version = version
>802	Identifier	version
>803	Identifier	bundle_version
>804	ExpressionStatement	 
>805	CallExpression	sscanf ( first_line , \"v%lf\" , & version )
>806	ArgumentList	first_line
>807	Argument	& version
>808	UnaryOp	& version
>809	Identifier	version
>810	UnaryOperator	&
>811	Argument	\"v%lf\"
>812	PrimaryExpression	\"v%lf\"
>813	Argument	first_line
>814	Identifier	first_line
>815	Callee	sscanf
>816	Identifier	sscanf
>817	IdentifierDeclStatement	 
>818	IdentifierDecl	version
>819	Identifier	version
>820	IdentifierDeclType	double
>821	Condition	 
>822	EqualityExpression	first_line [ 0 ] == 'v'
>823	PrimaryExpression	'v'
>824	ArrayIndexing	first_line [ 0 ]
>825	PrimaryExpression	0
>826	Identifier	first_line
>827	CompoundStatement	 
>828	IfStatement	if ( bundle_version < 0.4 )
>829	ElseStatement	else
>830	CompoundStatement	 
>831	ExpressionStatement	 
>832	AssignmentExpr	coalesced = ( coalesced_int != 0 )
>833	EqualityExpression	coalesced_int != 0
>834	PrimaryExpression	0
>835	Identifier	coalesced_int
>836	Identifier	coalesced
>837	ExpressionStatement	 
>838	CallExpression	fscanf ( f , \"%d %d %d\n\" , & num_images , & num_points , & coalesced_int )
>839	ArgumentList	f
>840	Argument	& coalesced_int
>841	UnaryOp	& coalesced_int
>842	Identifier	coalesced_int
>843	UnaryOperator	&
>844	Argument	& num_points
>845	UnaryOp	& num_points
>846	Identifier	num_points
>847	UnaryOperator	&
>848	Argument	& num_images
>849	UnaryOp	& num_images
>850	Identifier	num_images
>851	UnaryOperator	&
>852	Argument	\"%d %d %d\n\"
>853	PrimaryExpression	\"%d %d %d\n\"
>854	Argument	f
>855	Identifier	f
>856	Callee	fscanf
>857	Identifier	fscanf
>858	IdentifierDeclStatement	 
>859	IdentifierDecl	coalesced_int = 0
>860	AssignmentExpr	coalesced_int = 0
>861	PrimaryExpression	0
>862	Identifier	coalesced_int
>863	Identifier	coalesced_int
>864	IdentifierDeclType	int
>865	CompoundStatement	 
>866	ExpressionStatement	 
>867	CallExpression	fscanf ( f , \"%d %d\n\" , & num_images , & num_points )
>868	ArgumentList	f
>869	Argument	& num_points
>870	UnaryOp	& num_points
>871	Identifier	num_points
>872	UnaryOperator	&
>873	Argument	& num_images
>874	UnaryOp	& num_images
>875	Identifier	num_images
>876	UnaryOperator	&
>877	Argument	\"%d %d\n\"
>878	PrimaryExpression	\"%d %d\n\"
>879	Argument	f
>880	Identifier	f
>881	Callee	fscanf
>882	Identifier	fscanf
>883	Condition	 
>884	RelationalExpression	bundle_version < 0.4
>885	PrimaryExpression	0.4
>886	Identifier	bundle_version
>887	ExpressionStatement	 
>888	CallExpression	printf ( \"[ReadBundleFile] Bundle version
>889	ArgumentList	\"[ReadBundleFile] Bundle version
>890	Argument	version
>891	Identifier	version
>892	Argument	\"[ReadBundleFile] Bundle version
>893	PrimaryExpression	\"[ReadBundleFile] Bundle version
>894	Callee	printf
>895	Identifier	printf
>896	ExpressionStatement	 
>897	AssignmentExpr	bundle_version = version
>898	Identifier	version
>899	Identifier	bundle_version
>900	ExpressionStatement	 
>901	CallExpression	sscanf ( first_line , \"# Bundle file v%lf\" , & version )
>902	ArgumentList	first_line
>903	Argument	& version
>904	UnaryOp	& version
>905	Identifier	version
>906	UnaryOperator	&
>907	Argument	\"# Bundle file v%lf\"
>908	PrimaryExpression	\"# Bundle file v%lf\"
>909	Argument	first_line
>910	Identifier	first_line
>911	Callee	sscanf
>912	Identifier	sscanf
>913	IdentifierDeclStatement	 
>914	IdentifierDecl	version
>915	Identifier	version
>916	IdentifierDeclType	double
>917	Condition	 
>918	EqualityExpression	first_line [ 0 ] == '#'
>919	PrimaryExpression	'#'
>920	ArrayIndexing	first_line [ 0 ]
>921	PrimaryExpression	0
>922	Identifier	first_line
>923	ExpressionStatement	 
>924	CallExpression	fgets ( first_line , 256 , f )
>925	ArgumentList	first_line
>926	Argument	f
>927	Identifier	f
>928	Argument	256
>929	PrimaryExpression	256
>930	Argument	first_line
>931	Identifier	first_line
>932	Callee	fgets
>933	Identifier	fgets
>934	IdentifierDeclStatement	 
>935	IdentifierDecl	coalesced = false
>936	AssignmentExpr	coalesced = false
>937	Identifier	false
>938	Identifier	false
>939	Identifier	coalesced
>940	IdentifierDeclType	bool
>941	IdentifierDeclStatement	 
>942	IdentifierDecl	first_line [ 256 ]
>943	PrimaryExpression	256
>944	Identifier	first_line
>945	IdentifierDeclType	char [ 256 ]
>946	IdentifierDeclStatement	 
>947	IdentifierDecl	bundle_version
>948	Identifier	bundle_version
>949	IdentifierDeclType	double
>950	IdentifierDeclStatement	 
>951	IdentifierDecl	num_points
>952	Identifier	num_points
>953	IdentifierDeclType	int
>954	IdentifierDecl	num_images
>955	Identifier	num_images
>956	IdentifierDeclType	int
>957	IfStatement	if ( f == NULL )
>958	CompoundStatement	 
>959	ReturnStatement	 
>960	ExpressionStatement	 
>961	CallExpression	printf ( \"Error opening file %s for reading\n\" , bundle_file )
>962	ArgumentList	\"Error opening file %s for reading\n\"
>963	Argument	bundle_file
>964	Identifier	bundle_file
>965	Argument	\"Error opening file %s for reading\n\"
>966	PrimaryExpression	\"Error opening file %s for reading\n\"
>967	Callee	printf
>968	Identifier	printf
>969	Condition	 
>970	EqualityExpression	f == NULL
>971	Identifier	NULL
>972	Identifier	f
>973	IdentifierDeclStatement	 
>974	IdentifierDecl	* f = fopen ( bundle_file , \"r\" )
>975	AssignmentExpr	* f = fopen ( bundle_file , \"r\" )
>976	CallExpression	fopen ( bundle_file , \"r\" )
>977	ArgumentList	bundle_file
>978	Argument	\"r\"
>979	PrimaryExpression	\"r\"
>980	Argument	bundle_file
>981	Identifier	bundle_file
>982	Callee	fopen
>983	Identifier	fopen
>984	Identifier	f
>985	Identifier	f
>986	IdentifierDeclType	FILE *
>1062	FunctionDef	ReadListFile (char * list_file , std 
>1063	ParameterList	char * list_file , std 
>1064	Parameter	 
>1065	Identifier	files
>1066	ParameterType	std 
>1067	Parameter	 
>1068	Identifier	list_file
>1069	ParameterType	char *
>1070	ReturnType	void
>1071	CompoundStatement	 
>1072	ExpressionStatement	 
>1073	CallExpression	fclose ( f )
>1074	ArgumentList	f
>1075	Argument	f
>1076	Identifier	f
>1077	Callee	fclose
>1078	Identifier	fclose
>1079	WhileStatement	while ( fgets ( buf , 256 , f ) )
>1080	CompoundStatement	 
>1081	ExpressionStatement	 
>1082	CallExpression	files . push_back ( std 
>1083	ArgumentList	std 
>1084	Argument	std 
>1085	CallExpression	std 
>1086	ArgumentList	buf
>1087	Argument	buf
>1088	Identifier	buf
>1089	Callee	std 
>1090	Identifier	std 
>1091	Callee	files . push_back
>1092	MemberAccess	files . push_back
>1093	Identifier	push_back
>1094	Identifier	files
>1095	IfStatement	if ( space )
>1096	ExpressionStatement	 
>1097	AssignmentExpr	* space = 0
>1098	PrimaryExpression	0
>1099	UnaryOp	* space
>1100	Identifier	space
>1101	UnaryOperator	*
>1102	Condition	 
>1103	Identifier	space
>1104	IdentifierDeclStatement	 
>1105	IdentifierDecl	* space = index ( buf , ' ' )
>1106	AssignmentExpr	* space = index ( buf , ' ' )
>1107	CallExpression	index ( buf , ' ' )
>1108	ArgumentList	buf
>1109	Argument	' '
>1110	PrimaryExpression	' '
>1111	Argument	buf
>1112	Identifier	buf
>1113	Callee	index
>1114	Identifier	index
>1115	Identifier	space
>1116	Identifier	space
>1117	IdentifierDeclType	char *
>1118	IfStatement	if ( buf [ strlen ( buf ) - 1 ] == '\n' )
>1119	ExpressionStatement	 
>1120	AssignmentExpr	buf [ strlen ( buf ) - 1 ] = 0
>1121	PrimaryExpression	0
>1122	ArrayIndexing	buf [ strlen ( buf ) - 1 ]
>1123	AdditiveExpression	strlen ( buf ) - 1
>1124	PrimaryExpression	1
>1125	CallExpression	strlen ( buf )
>1126	ArgumentList	buf
>1127	Argument	buf
>1128	Identifier	buf
>1129	Callee	strlen
>1130	Identifier	strlen
>1131	Identifier	buf
>1132	Condition	 
>1133	EqualityExpression	buf [ strlen ( buf ) - 1 ] == '\n'
>1134	PrimaryExpression	'\n'
>1135	ArrayIndexing	buf [ strlen ( buf ) - 1 ]
>1136	AdditiveExpression	strlen ( buf ) - 1
>1137	PrimaryExpression	1
>1138	CallExpression	strlen ( buf )
>1139	ArgumentList	buf
>1140	Argument	buf
>1141	Identifier	buf
>1142	Callee	strlen
>1143	Identifier	strlen
>1144	Identifier	buf
>1145	Condition	 
>1146	CallExpression	fgets ( buf , 256 , f )
>1147	ArgumentList	buf
>1148	Argument	f
>1149	Identifier	f
>1150	Argument	256
>1151	PrimaryExpression	256
>1152	Argument	buf
>1153	Identifier	buf
>1154	Callee	fgets
>1155	Identifier	fgets
>1156	IdentifierDeclStatement	 
>1157	IdentifierDecl	buf [ 256 ]
>1158	PrimaryExpression	256
>1159	Identifier	buf
>1160	IdentifierDeclType	char [ 256 ]
>1161	IdentifierDeclStatement	 
>1162	IdentifierDecl	* f = fopen ( list_file , \"r\" )
>1163	AssignmentExpr	* f = fopen ( list_file , \"r\" )
>1164	CallExpression	fopen ( list_file , \"r\" )
>1165	ArgumentList	list_file
>1166	Argument	\"r\"
>1167	PrimaryExpression	\"r\"
>1168	Argument	list_file
>1169	Identifier	list_file
>1170	Callee	fopen
>1171	Identifier	fopen
>1172	Identifier	f
>1173	Identifier	f
>1174	IdentifierDeclType	FILE *
>1191	FunctionDef	WriteBundleFile (const char * bundle_file , const std 
>1192	ParameterList	const char * bundle_file , const std 
>1193	Parameter	 
>1194	Identifier	points
>1195	ParameterType	const std 
>1196	Parameter	 
>1197	Identifier	cameras
>1198	ParameterType	const std 
>1199	Parameter	 
>1200	Identifier	bundle_file
>1201	ParameterType	const char *
>1202	ReturnType	void
>1203	CompoundStatement	 
>1204	ExpressionStatement	 
>1205	CallExpression	fclose ( f )
>1206	ArgumentList	f
>1207	Argument	f
>1208	Identifier	f
>1209	Callee	fclose
>1210	Identifier	fclose
>1211	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>1212	CompoundStatement	 
>1213	ExpressionStatement	 
>1214	CallExpression	fprintf ( f , \"\n\" )
>1215	ArgumentList	f
>1216	Argument	\"\n\"
>1217	PrimaryExpression	\"\n\"
>1218	Argument	f
>1219	Identifier	f
>1220	Callee	fprintf
>1221	Identifier	fprintf
>1222	ForStatement	for ( int j = 0 ; j < num_visible ; j ++ )
>1223	CompoundStatement	 
>1224	ExpressionStatement	 
>1225	CallExpression	fprintf ( f , \" %d %d %0.2f %0.2f\" , view , key , x , y )
>1226	ArgumentList	f
>1227	Argument	y
>1228	Identifier	y
>1229	Argument	x
>1230	Identifier	x
>1231	Argument	key
>1232	Identifier	key
>1233	Argument	view
>1234	Identifier	view
>1235	Argument	\" %d %d %0.2f %0.2f\"
>1236	PrimaryExpression	\" %d %d %0.2f %0.2f\"
>1237	Argument	f
>1238	Identifier	f
>1239	Callee	fprintf
>1240	Identifier	fprintf
>1241	IdentifierDeclStatement	 
>1242	IdentifierDecl	y = points [ i ] . views [ j ] . y
>1243	AssignmentExpr	y = points [ i ] . views [ j ] . y
>1244	MemberAccess	points [ i ] . views [ j ] . y
>1245	Identifier	y
>1246	ArrayIndexing	points [ i ] . views [ j ]
>1247	Identifier	j
>1248	MemberAccess	points [ i ] . views
>1249	Identifier	views
>1250	ArrayIndexing	points [ i ]
>1251	Identifier	i
>1252	Identifier	points
>1253	Identifier	y
>1254	Identifier	y
>1255	IdentifierDeclType	double
>1256	IdentifierDeclStatement	 
>1257	IdentifierDecl	x = points [ i ] . views [ j ] . x
>1258	AssignmentExpr	x = points [ i ] . views [ j ] . x
>1259	MemberAccess	points [ i ] . views [ j ] . x
>1260	Identifier	x
>1261	ArrayIndexing	points [ i ] . views [ j ]
>1262	Identifier	j
>1263	MemberAccess	points [ i ] . views
>1264	Identifier	views
>1265	ArrayIndexing	points [ i ]
>1266	Identifier	i
>1267	Identifier	points
>1268	Identifier	x
>1269	Identifier	x
>1270	IdentifierDeclType	double
>1271	IdentifierDeclStatement	 
>1272	IdentifierDecl	key = points [ i ] . views [ j ] . key
>1273	AssignmentExpr	key = points [ i ] . views [ j ] . key
>1274	MemberAccess	points [ i ] . views [ j ] . key
>1275	Identifier	key
>1276	ArrayIndexing	points [ i ] . views [ j ]
>1277	Identifier	j
>1278	MemberAccess	points [ i ] . views
>1279	Identifier	views
>1280	ArrayIndexing	points [ i ]
>1281	Identifier	i
>1282	Identifier	points
>1283	Identifier	key
>1284	Identifier	key
>1285	IdentifierDeclType	int
>1286	ExpressionStatement	 
>1287	CallExpression	assert ( view >= 0 && view < num_good_images )
>1288	ArgumentList	view >= 0 && view < num_good_images
>1289	Argument	view >= 0 && view < num_good_images
>1290	AndExpression	view >= 0 && view < num_good_images
>1291	RelationalExpression	view < num_good_images
>1292	Identifier	num_good_images
>1293	Identifier	view
>1294	RelationalExpression	view >= 0
>1295	PrimaryExpression	0
>1296	Identifier	view
>1297	Callee	assert
>1298	Identifier	assert
>1299	IdentifierDeclStatement	 
>1300	IdentifierDecl	view = map [ points [ i ] . views [ j ] . image ]
>1301	AssignmentExpr	view = map [ points [ i ] . views [ j ] . image ]
>1302	ArrayIndexing	map [ points [ i ] . views [ j ] . image ]
>1303	MemberAccess	points [ i ] . views [ j ] . image
>1304	Identifier	image
>1305	ArrayIndexing	points [ i ] . views [ j ]
>1306	Identifier	j
>1307	MemberAccess	points [ i ] . views
>1308	Identifier	views
>1309	ArrayIndexing	points [ i ]
>1310	Identifier	i
>1311	Identifier	points
>1312	Identifier	map
>1313	Identifier	view
>1314	Identifier	view
>1315	IdentifierDeclType	int
>1316	IncDecOp	 
>1317	IncDec	++
>1318	Identifier	j
>1319	Condition	 
>1320	RelationalExpression	j < num_visible
>1321	Identifier	num_visible
>1322	Identifier	j
>1323	ForInit	 
>1324	IdentifierDeclStatement	int j = 0 ;
>1325	IdentifierDecl	j = 0
>1326	AssignmentExpr	j = 0
>1327	PrimaryExpression	0
>1328	Identifier	j
>1329	Identifier	j
>1330	IdentifierDeclType	int
>1331	ExpressionStatement	 
>1332	CallExpression	fprintf ( f , \"%d\" , num_visible )
>1333	ArgumentList	f
>1334	Argument	num_visible
>1335	Identifier	num_visible
>1336	Argument	\"%d\"
>1337	PrimaryExpression	\"%d\"
>1338	Argument	f
>1339	Identifier	f
>1340	Callee	fprintf
>1341	Identifier	fprintf
>1342	ExpressionStatement	 
>1343	AssignmentExpr	num_visible = points [ i ] . views . size ( )
>1344	CallExpression	points [ i ] . views . size ( )
>1345	ArgumentList	 
>1346	Callee	points [ i ] . views . size
>1347	MemberAccess	points [ i ] . views . size
>1348	Identifier	size
>1349	MemberAccess	points [ i ] . views
>1350	Identifier	views
>1351	ArrayIndexing	points [ i ]
>1352	Identifier	i
>1353	Identifier	points
>1354	Identifier	num_visible
>1355	IdentifierDeclStatement	 
>1356	IdentifierDecl	num_visible
>1357	Identifier	num_visible
>1358	IdentifierDeclType	int
>1359	ExpressionStatement	 
>1360	CallExpression	fprintf ( f , \"%d %d %d\n\" , iround ( color [ 0 ] ) , iround ( color [ 1 ] ) , iround ( color [ 2 ] ) )
>1361	ArgumentList	f
>1362	Argument	iround ( color [ 2 ] )
>1363	CallExpression	iround ( color [ 2 ] )
>1364	ArgumentList	color [ 2 ]
>1365	Argument	color [ 2 ]
>1366	ArrayIndexing	color [ 2 ]
>1367	PrimaryExpression	2
>1368	Identifier	color
>1369	Callee	iround
>1370	Identifier	iround
>1371	Argument	iround ( color [ 1 ] )
>1372	CallExpression	iround ( color [ 1 ] )
>1373	ArgumentList	color [ 1 ]
>1374	Argument	color [ 1 ]
>1375	ArrayIndexing	color [ 1 ]
>1376	PrimaryExpression	1
>1377	Identifier	color
>1378	Callee	iround
>1379	Identifier	iround
>1380	Argument	iround ( color [ 0 ] )
>1381	CallExpression	iround ( color [ 0 ] )
>1382	ArgumentList	color [ 0 ]
>1383	Argument	color [ 0 ]
>1384	ArrayIndexing	color [ 0 ]
>1385	PrimaryExpression	0
>1386	Identifier	color
>1387	Callee	iround
>1388	Identifier	iround
>1389	Argument	\"%d %d %d\n\"
>1390	PrimaryExpression	\"%d %d %d\n\"
>1391	Argument	f
>1392	Identifier	f
>1393	Callee	fprintf
>1394	Identifier	fprintf
>1395	IdentifierDeclStatement	 
>1396	IdentifierDecl	* color = points [ i ] . color
>1397	AssignmentExpr	* color = points [ i ] . color
>1398	MemberAccess	points [ i ] . color
>1399	Identifier	color
>1400	ArrayIndexing	points [ i ]
>1401	Identifier	i
>1402	Identifier	points
>1403	Identifier	color
>1404	Identifier	color
>1405	IdentifierDeclType	const double *
>1406	ExpressionStatement	 
>1407	CallExpression	fprintf ( f , \"%lf %lf %lf\n\" , pos [ 0 ] , pos [ 1 ] , pos [ 2 ] )
>1408	ArgumentList	f
>1409	Argument	pos [ 2 ]
>1410	ArrayIndexing	pos [ 2 ]
>1411	PrimaryExpression	2
>1412	Identifier	pos
>1413	Argument	pos [ 1 ]
>1414	ArrayIndexing	pos [ 1 ]
>1415	PrimaryExpression	1
>1416	Identifier	pos
>1417	Argument	pos [ 0 ]
>1418	ArrayIndexing	pos [ 0 ]
>1419	PrimaryExpression	0
>1420	Identifier	pos
>1421	Argument	\"%lf %lf %lf\n\"
>1422	PrimaryExpression	\"%lf %lf %lf\n\"
>1423	Argument	f
>1424	Identifier	f
>1425	Callee	fprintf
>1426	Identifier	fprintf
>1427	IdentifierDeclStatement	 
>1428	IdentifierDecl	* pos = points [ i ] . pos
>1429	AssignmentExpr	* pos = points [ i ] . pos
>1430	MemberAccess	points [ i ] . pos
>1431	Identifier	pos
>1432	ArrayIndexing	points [ i ]
>1433	Identifier	i
>1434	Identifier	points
>1435	Identifier	pos
>1436	Identifier	pos
>1437	IdentifierDeclType	const double *
>1438	IncDecOp	 
>1439	IncDec	++
>1440	Identifier	i
>1441	Condition	 
>1442	RelationalExpression	i < num_points
>1443	Identifier	num_points
>1444	Identifier	i
>1445	ForInit	 
>1446	IdentifierDeclStatement	int i = 0 ;
>1447	IdentifierDecl	i = 0
>1448	AssignmentExpr	i = 0
>1449	PrimaryExpression	0
>1450	Identifier	i
>1451	Identifier	i
>1452	IdentifierDeclType	int
>1453	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>1454	CompoundStatement	 
>1455	ExpressionStatement	 
>1456	CallExpression	fprintf ( f , \"%lf %lf %lf\n\" , t [ 0 ] , t [ 1 ] , t [ 2 ] )
>1457	ArgumentList	f
>1458	Argument	t [ 2 ]
>1459	ArrayIndexing	t [ 2 ]
>1460	PrimaryExpression	2
>1461	Identifier	t
>1462	Argument	t [ 1 ]
>1463	ArrayIndexing	t [ 1 ]
>1464	PrimaryExpression	1
>1465	Identifier	t
>1466	Argument	t [ 0 ]
>1467	ArrayIndexing	t [ 0 ]
>1468	PrimaryExpression	0
>1469	Identifier	t
>1470	Argument	\"%lf %lf %lf\n\"
>1471	PrimaryExpression	\"%lf %lf %lf\n\"
>1472	Argument	f
>1473	Identifier	f
>1474	Callee	fprintf
>1475	Identifier	fprintf
>1476	IdentifierDeclStatement	 
>1477	IdentifierDecl	* t = cameras [ i ] . t
>1478	AssignmentExpr	* t = cameras [ i ] . t
>1479	MemberAccess	cameras [ i ] . t
>1480	Identifier	t
>1481	ArrayIndexing	cameras [ i ]
>1482	Identifier	i
>1483	Identifier	cameras
>1484	Identifier	t
>1485	Identifier	t
>1486	IdentifierDeclType	const double *
>1487	ExpressionStatement	 
>1488	CallExpression	fprintf ( f , \"%lf %lf %lf\n%lf %lf %lf\n%lf %lf %lf\n\" , R [ 0 ] , R [ 1 ] , R [ 2 ] , R [ 3 ] , R [ 4 ] , R [ \
>1489	ArgumentList	f
>1490	Argument	R [ 8 ]
>1491	ArrayIndexing	R [ 8 ]
>1492	PrimaryExpression	8
>1493	Identifier	R
>1494	Argument	R [ 7 ]
>1495	ArrayIndexing	R [ 7 ]
>1496	PrimaryExpression	7
>1497	Identifier	R
>1498	Argument	R [ 6 ]
>1499	ArrayIndexing	R [ 6 ]
>1500	PrimaryExpression	6
>1501	Identifier	R
>1502	Argument	R [ 5 ]
>1503	ArrayIndexing	R [ 5 ]
>1504	PrimaryExpression	5
>1505	Identifier	R
>1506	Argument	R [ 4 ]
>1507	ArrayIndexing	R [ 4 ]
>1508	PrimaryExpression	4
>1509	Identifier	R
>1510	Argument	R [ 3 ]
>1511	ArrayIndexing	R [ 3 ]
>1512	PrimaryExpression	3
>1513	Identifier	R
>1514	Argument	R [ 2 ]
>1515	ArrayIndexing	R [ 2 ]
>1516	PrimaryExpression	2
>1517	Identifier	R
>1518	Argument	R [ 1 ]
>1519	ArrayIndexing	R [ 1 ]
>1520	PrimaryExpression	1
>1521	Identifier	R
>1522	Argument	R [ 0 ]
>1523	ArrayIndexing	R [ 0 ]
>1524	PrimaryExpression	0
>1525	Identifier	R
>1526	Argument	\"%lf %lf %lf\n%lf %lf %lf\n%lf %lf %lf\n\"
>1527	PrimaryExpression	\"%lf %lf %lf\n%lf %lf %lf\n%lf %lf %lf\n\"
>1528	Argument	f
>1529	Identifier	f
>1530	Callee	fprintf
>1531	Identifier	fprintf
>1532	IdentifierDeclStatement	 
>1533	IdentifierDecl	* R = cameras [ i ] . R
>1534	AssignmentExpr	* R = cameras [ i ] . R
>1535	MemberAccess	cameras [ i ] . R
>1536	Identifier	R
>1537	ArrayIndexing	cameras [ i ]
>1538	Identifier	i
>1539	Identifier	cameras
>1540	Identifier	R
>1541	Identifier	R
>1542	IdentifierDeclType	const double *
>1543	ExpressionStatement	 
>1544	CallExpression	fprintf ( f , \"%lf 0.0 0.0\n\" , cameras [ i ] . f )
>1545	ArgumentList	f
>1546	Argument	cameras [ i ] . f
>1547	MemberAccess	cameras [ i ] . f
>1548	Identifier	f
>1549	ArrayIndexing	cameras [ i ]
>1550	Identifier	i
>1551	Identifier	cameras
>1552	Argument	\"%lf 0.0 0.0\n\"
>1553	PrimaryExpression	\"%lf 0.0 0.0\n\"
>1554	Argument	f
>1555	Identifier	f
>1556	Callee	fprintf
>1557	Identifier	fprintf
>1558	IfStatement	if ( cameras [ i ] . f == 0 )
>1559	ContinueStatement	 
>1560	Condition	 
>1561	EqualityExpression	cameras [ i ] . f == 0
>1562	PrimaryExpression	0
>1563	MemberAccess	cameras [ i ] . f
>1564	Identifier	f
>1565	ArrayIndexing	cameras [ i ]
>1566	Identifier	i
>1567	Identifier	cameras
>1568	IncDecOp	 
>1569	IncDec	++
>1570	Identifier	i
>1571	Condition	 
>1572	RelationalExpression	i < num_images
>1573	Identifier	num_images
>1574	Identifier	i
>1575	ForInit	 
>1576	IdentifierDeclStatement	int i = 0 ;
>1577	IdentifierDecl	i = 0
>1578	AssignmentExpr	i = 0
>1579	PrimaryExpression	0
>1580	Identifier	i
>1581	Identifier	i
>1582	IdentifierDeclType	int
>1583	ExpressionStatement	 
>1584	CallExpression	fprintf ( f , \"%d %d\n\" , num_good_images , num_points )
>1585	ArgumentList	f
>1586	Argument	num_points
>1587	Identifier	num_points
>1588	Argument	num_good_images
>1589	Identifier	num_good_images
>1590	Argument	\"%d %d\n\"
>1591	PrimaryExpression	\"%d %d\n\"
>1592	Argument	f
>1593	Identifier	f
>1594	Callee	fprintf
>1595	Identifier	fprintf
>1596	ExpressionStatement	 
>1597	CallExpression	fprintf ( f , \"# Bundle file v0.3\n\" )
>1598	ArgumentList	f
>1599	Argument	\"# Bundle file v0.3\n\"
>1600	PrimaryExpression	\"# Bundle file v0.3\n\"
>1601	Argument	f
>1602	Identifier	f
>1603	Callee	fprintf
>1604	Identifier	fprintf
>1605	ExpressionStatement	 
>1606	CallExpression	printf ( \"[WriteBundleFile] Writing %d images and %d points...\n\" , num_good_images , num_points )
>1607	ArgumentList	\"[WriteBundleFile] Writing %d images and %d points...\n\"
>1608	Argument	num_points
>1609	Identifier	num_points
>1610	Argument	num_good_images
>1611	Identifier	num_good_images
>1612	Argument	\"[WriteBundleFile] Writing %d images and %d points...\n\"
>1613	PrimaryExpression	\"[WriteBundleFile] Writing %d images and %d points...\n\"
>1614	Callee	printf
>1615	Identifier	printf
>1616	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>1617	CompoundStatement	 
>1618	ExpressionStatement	 
>1619	IncDecOp	num_good_images ++
>1620	IncDec	++
>1621	Identifier	num_good_images
>1622	ExpressionStatement	 
>1623	AssignmentExpr	map [ i ] = num_good_images
>1624	Identifier	num_good_images
>1625	ArrayIndexing	map [ i ]
>1626	Identifier	i
>1627	Identifier	map
>1628	IfStatement	if ( cameras [ i ] . f == 0 )
>1629	CompoundStatement	 
>1630	ContinueStatement	 
>1631	ExpressionStatement	 
>1632	AssignmentExpr	map [ i ] = - 1
>1633	UnaryOp	- 1
>1634	PrimaryExpression	1
>1635	UnaryOperator	-
>1636	ArrayIndexing	map [ i ]
>1637	Identifier	i
>1638	Identifier	map
>1639	Condition	 
>1640	EqualityExpression	cameras [ i ] . f == 0
>1641	PrimaryExpression	0
>1642	MemberAccess	cameras [ i ] . f
>1643	Identifier	f
>1644	ArrayIndexing	cameras [ i ]
>1645	Identifier	i
>1646	Identifier	cameras
>1647	IncDecOp	 
>1648	IncDec	++
>1649	Identifier	i
>1650	Condition	 
>1651	RelationalExpression	i < num_images
>1652	Identifier	num_images
>1653	Identifier	i
>1654	ForInit	 
>1655	IdentifierDeclStatement	int i = 0 ;
>1656	IdentifierDecl	i = 0
>1657	AssignmentExpr	i = 0
>1658	PrimaryExpression	0
>1659	Identifier	i
>1660	Identifier	i
>1661	IdentifierDeclType	int
>1662	IdentifierDeclStatement	 
>1663	IdentifierDecl	* map = new int [ num_images ]
>1664	AssignmentExpr	* map = new int [ num_images ]
>1665	Identifier	num_images
>1666	Identifier	num_images
>1667	Identifier	map
>1668	IdentifierDeclType	int *
>1669	IdentifierDeclStatement	 
>1670	IdentifierDecl	num_good_images = 0
>1671	AssignmentExpr	num_good_images = 0
>1672	PrimaryExpression	0
>1673	Identifier	num_good_images
>1674	Identifier	num_good_images
>1675	IdentifierDeclType	int
>1676	IdentifierDeclStatement	 
>1677	IdentifierDecl	num_points = points . size ( )
>1678	AssignmentExpr	num_points = points . size ( )
>1679	CallExpression	points . size ( )
>1680	ArgumentList	 
>1681	Callee	points . size
>1682	MemberAccess	points . size
>1683	Identifier	size
>1684	Identifier	points
>1685	Identifier	num_points
>1686	Identifier	num_points
>1687	IdentifierDeclType	int
>1688	IdentifierDeclStatement	 
>1689	IdentifierDecl	num_images = cameras . size ( )
>1690	AssignmentExpr	num_images = cameras . size ( )
>1691	CallExpression	cameras . size ( )
>1692	ArgumentList	 
>1693	Callee	cameras . size
>1694	MemberAccess	cameras . size
>1695	Identifier	size
>1696	Identifier	cameras
>1697	Identifier	num_images
>1698	Identifier	num_images
>1699	IdentifierDeclType	int
>1700	IfStatement	if ( f == NULL )
>1701	CompoundStatement	 
>1702	ReturnStatement	 
>1703	ExpressionStatement	 
>1704	CallExpression	printf ( \"Error opening file %s for reading\n\" , bundle_file )
>1705	ArgumentList	\"Error opening file %s for reading\n\"
>1706	Argument	bundle_file
>1707	Identifier	bundle_file
>1708	Argument	\"Error opening file %s for reading\n\"
>1709	PrimaryExpression	\"Error opening file %s for reading\n\"
>1710	Callee	printf
>1711	Identifier	printf
>1712	Condition	 
>1713	EqualityExpression	f == NULL
>1714	Identifier	NULL
>1715	Identifier	f
>1716	IdentifierDeclStatement	 
>1717	IdentifierDecl	* f = fopen ( bundle_file , \"w\" )
>1718	AssignmentExpr	* f = fopen ( bundle_file , \"w\" )
>1719	CallExpression	fopen ( bundle_file , \"w\" )
>1720	ArgumentList	bundle_file
>1721	Argument	\"w\"
>1722	PrimaryExpression	\"w\"
>1723	Argument	bundle_file
>1724	Identifier	bundle_file
>1725	Callee	fopen
>1726	Identifier	fopen
>1727	Identifier	f
>1728	Identifier	f
>1729	IdentifierDeclType	FILE *
>1785	FunctionDef	UndistortImage (const std 
>1786	ParameterList	const std 
>1787	Parameter	 
>1788	Identifier	out
>1789	ParameterType	const std 
>1790	Parameter	 
>1791	Identifier	camera
>1792	ParameterType	const camera_params_t &
>1793	Parameter	 
>1794	Identifier	in
>1795	ParameterType	const std 
>1796	ReturnType	void
>1797	CompoundStatement	 
>1798	ExpressionStatement	 
>1799	CallExpression	img_free ( img_out )
>1800	ArgumentList	img_out
>1801	Argument	img_out
>1802	Identifier	img_out
>1803	Callee	img_free
>1804	Identifier	img_free
>1805	ExpressionStatement	 
>1806	CallExpression	img_free ( img )
>1807	ArgumentList	img
>1808	Argument	img
>1809	Identifier	img
>1810	Callee	img_free
>1811	Identifier	img_free
>1812	ExpressionStatement	 
>1813	CallExpression	WriteJPEG ( img_out , ( char * ) out . c_str ( ) )
>1814	ArgumentList	img_out
>1815	Argument	( char * ) out . c_str ( )
>1816	CastExpression	( char * ) out . c_str ( )
>1817	CallExpression	out . c_str ( )
>1818	ArgumentList	 
>1819	Callee	out . c_str
>1820	MemberAccess	out . c_str
>1821	Identifier	c_str
>1822	Identifier	out
>1823	CastTarget	char *
>1824	Argument	img_out
>1825	Identifier	img_out
>1826	Callee	WriteJPEG
>1827	Identifier	WriteJPEG
>1828	ForStatement	for ( int y = 0 ; y < h ; y ++ )
>1829	CompoundStatement	 
>1830	ForStatement	for ( int x = 0 ; x < w ; x ++ )
>1831	CompoundStatement	 
>1832	ExpressionStatement	 
>1833	CallExpression	img_set_pixel ( img_out , x , y , iround ( c . r ) , iround ( c . g ) , iround ( c . b ) )
>1834	ArgumentList	img_out
>1835	Argument	iround ( c . b )
>1836	CallExpression	iround ( c . b )
>1837	ArgumentList	c . b
>1838	Argument	c . b
>1839	MemberAccess	c . b
>1840	Identifier	b
>1841	Identifier	c
>1842	Callee	iround
>1843	Identifier	iround
>1844	Argument	iround ( c . g )
>1845	CallExpression	iround ( c . g )
>1846	ArgumentList	c . g
>1847	Argument	c . g
>1848	MemberAccess	c . g
>1849	Identifier	g
>1850	Identifier	c
>1851	Callee	iround
>1852	Identifier	iround
>1853	Argument	iround ( c . r )
>1854	CallExpression	iround ( c . r )
>1855	ArgumentList	c . r
>1856	Argument	c . r
>1857	MemberAccess	c . r
>1858	Identifier	r
>1859	Identifier	c
>1860	Callee	iround
>1861	Identifier	iround
>1862	Argument	y
>1863	Identifier	y
>1864	Argument	x
>1865	Identifier	x
>1866	Argument	img_out
>1867	Identifier	img_out
>1868	Callee	img_set_pixel
>1869	Identifier	img_set_pixel
>1870	IfStatement	if ( x_c >= 0 && x_c < w - 1 && y_c >= 0 && y_c < h - 1 )
>1871	ElseStatement	else
>1872	CompoundStatement	 
>1873	ExpressionStatement	 
>1874	AssignmentExpr	c = fcolor_new ( 0.0 , 0.0 , 0.0 )
>1875	CallExpression	fcolor_new ( 0.0 , 0.0 , 0.0 )
>1876	ArgumentList	0.0
>1877	Argument	0.0
>1878	PrimaryExpression	0.0
>1879	Argument	0.0
>1880	PrimaryExpression	0.0
>1881	Argument	0.0
>1882	PrimaryExpression	0.0
>1883	Callee	fcolor_new
>1884	Identifier	fcolor_new
>1885	Identifier	c
>1886	CompoundStatement	 
>1887	ExpressionStatement	 
>1888	AssignmentExpr	c = pixel_lerp ( img , x_c , y_c )
>1889	CallExpression	pixel_lerp ( img , x_c , y_c )
>1890	ArgumentList	img
>1891	Argument	y_c
>1892	Identifier	y_c
>1893	Argument	x_c
>1894	Identifier	x_c
>1895	Argument	img
>1896	Identifier	img
>1897	Callee	pixel_lerp
>1898	Identifier	pixel_lerp
>1899	Identifier	c
>1900	Condition	 
>1901	AndExpression	x_c >= 0 && x_c < w - 1 && y_c >= 0 && y_c < h - 1
>1902	AndExpression	x_c < w - 1 && y_c >= 0 && y_c < h - 1
>1903	AndExpression	y_c >= 0 && y_c < h - 1
>1904	RelationalExpression	y_c < h - 1
>1905	AdditiveExpression	h - 1
>1906	PrimaryExpression	1
>1907	Identifier	h
>1908	Identifier	y_c
>1909	RelationalExpression	y_c >= 0
>1910	PrimaryExpression	0
>1911	Identifier	y_c
>1912	RelationalExpression	x_c < w - 1
>1913	AdditiveExpression	w - 1
>1914	PrimaryExpression	1
>1915	Identifier	w
>1916	Identifier	x_c
>1917	RelationalExpression	x_c >= 0
>1918	PrimaryExpression	0
>1919	Identifier	x_c
>1920	IdentifierDeclStatement	 
>1921	IdentifierDecl	c
>1922	Identifier	c
>1923	IdentifierDeclType	fcolor_t
>1924	ExpressionStatement	 
>1925	AssignmentExpr	y_c += 0.5 * h
>1926	MultiplicativeExpression	0.5 * h
>1927	Identifier	h
>1928	PrimaryExpression	0.5
>1929	Identifier	y_c
>1930	ExpressionStatement	 
>1931	AssignmentExpr	x_c += 0.5 * w
>1932	MultiplicativeExpression	0.5 * w
>1933	Identifier	w
>1934	PrimaryExpression	0.5
>1935	Identifier	x_c
>1936	ExpressionStatement	 
>1937	AssignmentExpr	y_c *= factor
>1938	Identifier	factor
>1939	Identifier	y_c
>1940	ExpressionStatement	 
>1941	AssignmentExpr	x_c *= factor
>1942	Identifier	factor
>1943	Identifier	x_c
>1944	IdentifierDeclStatement	 
>1945	IdentifierDecl	factor = 1.0 + camera . k [ 0 ] * r2 + camera . k [ 1 ] * r2 * r2
>1946	AssignmentExpr	factor = 1.0 + camera . k [ 0 ] * r2 + camera . k [ 1 ] * r2 * r2
>1947	AdditiveExpression	1.0 + camera . k [ 0 ] * r2 + camera . k [ 1 ] * r2 * r2
>1948	AdditiveExpression	camera . k [ 0 ] * r2 + camera . k [ 1 ] * r2 * r2
>1949	MultiplicativeExpression	camera . k [ 1 ] * r2 * r2
>1950	MultiplicativeExpression	r2 * r2
>1951	Identifier	r2
>1952	Identifier	r2
>1953	ArrayIndexing	camera . k [ 1 ]
>1954	PrimaryExpression	1
>1955	MemberAccess	camera . k
>1956	Identifier	k
>1957	Identifier	camera
>1958	MultiplicativeExpression	camera . k [ 0 ] * r2
>1959	Identifier	r2
>1960	ArrayIndexing	camera . k [ 0 ]
>1961	PrimaryExpression	0
>1962	MemberAccess	camera . k
>1963	Identifier	k
>1964	Identifier	camera
>1965	PrimaryExpression	1.0
>1966	Identifier	factor
>1967	Identifier	factor
>1968	IdentifierDeclType	double
>1969	IdentifierDeclStatement	 
>1970	IdentifierDecl	r2 = ( x_c * x_c + y_c * y_c ) * f2_inv
>1971	AssignmentExpr	r2 = ( x_c * x_c + y_c * y_c ) * f2_inv
>1972	MultiplicativeExpression	( x_c * x_c + y_c * y_c ) * f2_inv
>1973	Identifier	f2_inv
>1974	AdditiveExpression	x_c * x_c + y_c * y_c
>1975	MultiplicativeExpression	y_c * y_c
>1976	Identifier	y_c
>1977	Identifier	y_c
>1978	MultiplicativeExpression	x_c * x_c
>1979	Identifier	x_c
>1980	Identifier	x_c
>1981	Identifier	r2
>1982	Identifier	r2
>1983	IdentifierDeclType	double
>1984	IdentifierDeclStatement	 
>1985	IdentifierDecl	y_c = y - 0.5 * h
>1986	AssignmentExpr	y_c = y - 0.5 * h
>1987	AdditiveExpression	y - 0.5 * h
>1988	MultiplicativeExpression	0.5 * h
>1989	Identifier	h
>1990	PrimaryExpression	0.5
>1991	Identifier	y
>1992	Identifier	y_c
>1993	Identifier	y_c
>1994	IdentifierDeclType	double
>1995	IdentifierDeclStatement	 
>1996	IdentifierDecl	x_c = x - 0.5 * w
>1997	AssignmentExpr	x_c = x - 0.5 * w
>1998	AdditiveExpression	x - 0.5 * w
>1999	MultiplicativeExpression	0.5 * w
>2000	Identifier	w
>2001	PrimaryExpression	0.5
>2002	Identifier	x
>2003	Identifier	x_c
>2004	Identifier	x_c
>2005	IdentifierDeclType	double
>2006	IncDecOp	 
>2007	IncDec	++
>2008	Identifier	x
>2009	Condition	 
>2010	RelationalExpression	x < w
>2011	Identifier	w
>2012	Identifier	x
>2013	ForInit	 
>2014	IdentifierDeclStatement	int x = 0 ;
>2015	IdentifierDecl	x = 0
>2016	AssignmentExpr	x = 0
>2017	PrimaryExpression	0
>2018	Identifier	x
>2019	Identifier	x
>2020	IdentifierDeclType	int
>2021	IncDecOp	 
>2022	IncDec	++
>2023	Identifier	y
>2024	Condition	 
>2025	RelationalExpression	y < h
>2026	Identifier	h
>2027	Identifier	y
>2028	ForInit	 
>2029	IdentifierDeclStatement	int y = 0 ;
>2030	IdentifierDecl	y = 0
>2031	AssignmentExpr	y = 0
>2032	PrimaryExpression	0
>2033	Identifier	y
>2034	Identifier	y
>2035	IdentifierDeclType	int
>2036	IdentifierDeclStatement	 
>2037	IdentifierDecl	f2_inv = 1.0 / ( camera . f * camera . f )
>2038	AssignmentExpr	f2_inv = 1.0 / ( camera . f * camera . f )
>2039	MultiplicativeExpression	1.0 / ( camera . f * camera . f )
>2040	MultiplicativeExpression	camera . f * camera . f
>2041	MemberAccess	camera . f
>2042	Identifier	f
>2043	Identifier	camera
>2044	MemberAccess	camera . f
>2045	Identifier	f
>2046	Identifier	camera
>2047	PrimaryExpression	1.0
>2048	Identifier	f2_inv
>2049	Identifier	f2_inv
>2050	IdentifierDeclType	double
>2051	IdentifierDeclStatement	 
>2052	IdentifierDecl	* img_out = img_new ( w , h )
>2053	AssignmentExpr	* img_out = img_new ( w , h )
>2054	CallExpression	img_new ( w , h )
>2055	ArgumentList	w
>2056	Argument	h
>2057	Identifier	h
>2058	Argument	w
>2059	Identifier	w
>2060	Callee	img_new
>2061	Identifier	img_new
>2062	Identifier	img_out
>2063	Identifier	img_out
>2064	IdentifierDeclType	img_t *
>2065	IdentifierDeclStatement	 
>2066	IdentifierDecl	h = img -> h
>2067	AssignmentExpr	h = img -> h
>2068	PtrMemberAccess	img -> h
>2069	Identifier	h
>2070	Identifier	img
>2071	Identifier	h
>2072	Identifier	h
>2073	IdentifierDeclType	int
>2074	IdentifierDeclStatement	 
>2075	IdentifierDecl	w = img -> w
>2076	AssignmentExpr	w = img -> w
>2077	PtrMemberAccess	img -> w
>2078	Identifier	w
>2079	Identifier	img
>2080	Identifier	w
>2081	Identifier	w
>2082	IdentifierDeclType	int
>2083	IdentifierDeclStatement	 
>2084	IdentifierDecl	* img = LoadJPEG ( in . c_str ( ) )
>2085	AssignmentExpr	* img = LoadJPEG ( in . c_str ( ) )
>2086	CallExpression	LoadJPEG ( in . c_str ( ) )
>2087	ArgumentList	in . c_str ( )
>2088	Argument	in . c_str ( )
>2089	CallExpression	in . c_str ( )
>2090	ArgumentList	 
>2091	Callee	in . c_str
>2092	MemberAccess	in . c_str
>2093	Identifier	c_str
>2094	Identifier	in
>2095	Callee	LoadJPEG
>2096	Identifier	LoadJPEG
>2097	Identifier	img
>2098	Identifier	img
>2099	IdentifierDeclType	img_t *
>2100	ExpressionStatement	 
>2101	CallExpression	fflush ( stdout )
>2102	ArgumentList	stdout
>2103	Argument	stdout
>2104	Identifier	stdout
>2105	Callee	fflush
>2106	Identifier	fflush
>2107	ExpressionStatement	 
>2108	CallExpression	printf ( \"Undistorting image %s\n\" , in . c_str ( ) )
>2109	ArgumentList	\"Undistorting image %s\n\"
>2110	Argument	in . c_str ( )
>2111	CallExpression	in . c_str ( )
>2112	ArgumentList	 
>2113	Callee	in . c_str
>2114	MemberAccess	in . c_str
>2115	Identifier	c_str
>2116	Identifier	in
>2117	Argument	\"Undistorting image %s\n\"
>2118	PrimaryExpression	\"Undistorting image %s\n\"
>2119	Callee	printf
>2120	Identifier	printf
>2157	FunctionDef	UndistortImages (const char * output_path , const std 
>2158	ParameterList	const char * output_path , const std 
>2159	Parameter	 
>2160	Identifier	cameras
>2161	ParameterType	const std 
>2162	Parameter	 
>2163	Identifier	files
>2164	ParameterType	const std 
>2165	Parameter	 
>2166	Identifier	output_path
>2167	ParameterType	const char *
>2168	ReturnType	void
>2169	CompoundStatement	 
>2170	ForStatement	for ( int i = 0 ; i < num_files ; i ++ )
>2171	CompoundStatement	 
>2172	ExpressionStatement	 
>2173	CallExpression	UndistortImage ( in , cameras [ i ] , out )
>2174	ArgumentList	in
>2175	Argument	out
>2176	Identifier	out
>2177	Argument	cameras [ i ]
>2178	ArrayIndexing	cameras [ i ]
>2179	Identifier	i
>2180	Identifier	cameras
>2181	Argument	in
>2182	Identifier	in
>2183	Callee	UndistortImage
>2184	Identifier	UndistortImage
>2185	IdentifierDeclStatement	 
>2186	IdentifierDecl	out = std 
>2187	AssignmentExpr	out = std 
>2188	AdditiveExpression	std 
>2189	AdditiveExpression	\"/\" + basename + \".rd.jpg\"
>2190	AdditiveExpression	basename + \".rd.jpg\"
>2191	PrimaryExpression	\".rd.jpg\"
>2192	Identifier	basename
>2193	PrimaryExpression	\"/\"
>2194	CallExpression	std 
>2195	ArgumentList	output_path
>2196	Argument	output_path
>2197	Identifier	output_path
>2198	Callee	std 
>2199	Identifier	std 
>2200	Identifier	out
>2201	Identifier	out
>2202	IdentifierDeclType	std 
>2203	IdentifierDeclStatement	 
>2204	IdentifierDecl	basename = files [ i ] . substr ( last_slash + 1 , last_dot - last_slash - 1 )
>2205	AssignmentExpr	basename = files [ i ] . substr ( last_slash + 1 , last_dot - last_slash - 1 )
>2206	CallExpression	files [ i ] . substr ( last_slash + 1 , last_dot - last_slash - 1 )
>2207	ArgumentList	last_slash + 1
>2208	Argument	last_dot - last_slash - 1
>2209	AdditiveExpression	last_dot - last_slash - 1
>2210	AdditiveExpression	last_slash - 1
>2211	PrimaryExpression	1
>2212	Identifier	last_slash
>2213	Identifier	last_dot
>2214	Argument	last_slash + 1
>2215	AdditiveExpression	last_slash + 1
>2216	PrimaryExpression	1
>2217	Identifier	last_slash
>2218	Callee	files [ i ] . substr
>2219	MemberAccess	files [ i ] . substr
>2220	Identifier	substr
>2221	ArrayIndexing	files [ i ]
>2222	Identifier	i
>2223	Identifier	files
>2224	Identifier	basename
>2225	Identifier	basename
>2226	IdentifierDeclType	std 
>2227	ExpressionStatement	 
>2228	CallExpression	assert ( last_slash < last_dot )
>2229	ArgumentList	last_slash < last_dot
>2230	Argument	last_slash < last_dot
>2231	RelationalExpression	last_slash < last_dot
>2232	Identifier	last_dot
>2233	Identifier	last_slash
>2234	Callee	assert
>2235	Identifier	assert
>2236	IdentifierDeclStatement	 
>2237	IdentifierDecl	last_dot = files [ i ] . rfind ( '.' )
>2238	AssignmentExpr	last_dot = files [ i ] . rfind ( '.' )
>2239	CallExpression	files [ i ] . rfind ( '.' )
>2240	ArgumentList	'.'
>2241	Argument	'.'
>2242	PrimaryExpression	'.'
>2243	Callee	files [ i ] . rfind
>2244	MemberAccess	files [ i ] . rfind
>2245	Identifier	rfind
>2246	ArrayIndexing	files [ i ]
>2247	Identifier	i
>2248	Identifier	files
>2249	Identifier	last_dot
>2250	Identifier	last_dot
>2251	IdentifierDeclType	int
>2252	IdentifierDeclStatement	 
>2253	IdentifierDecl	last_slash = files [ i ] . rfind ( '/' )
>2254	AssignmentExpr	last_slash = files [ i ] . rfind ( '/' )
>2255	CallExpression	files [ i ] . rfind ( '/' )
>2256	ArgumentList	'/'
>2257	Argument	'/'
>2258	PrimaryExpression	'/'
>2259	Callee	files [ i ] . rfind
>2260	MemberAccess	files [ i ] . rfind
>2261	Identifier	rfind
>2262	ArrayIndexing	files [ i ]
>2263	Identifier	i
>2264	Identifier	files
>2265	Identifier	last_slash
>2266	Identifier	last_slash
>2267	IdentifierDeclType	int
>2268	IdentifierDeclStatement	 
>2269	IdentifierDecl	in = files [ i ]
>2270	AssignmentExpr	in = files [ i ]
>2271	ArrayIndexing	files [ i ]
>2272	Identifier	i
>2273	Identifier	files
>2274	Identifier	in
>2275	Identifier	in
>2276	IdentifierDeclType	std 
>2277	IfStatement	if ( cameras [ i ] . f == 0.0 )
>2278	ContinueStatement	 
>2279	Condition	 
>2280	EqualityExpression	cameras [ i ] . f == 0.0
>2281	PrimaryExpression	0.0
>2282	MemberAccess	cameras [ i ] . f
>2283	Identifier	f
>2284	ArrayIndexing	cameras [ i ]
>2285	Identifier	i
>2286	Identifier	cameras
>2287	IncDecOp	 
>2288	IncDec	++
>2289	Identifier	i
>2290	Condition	 
>2291	RelationalExpression	i < num_files
>2292	Identifier	num_files
>2293	Identifier	i
>2294	ForInit	 
>2295	IdentifierDeclStatement	int i = 0 ;
>2296	IdentifierDecl	i = 0
>2297	AssignmentExpr	i = 0
>2298	PrimaryExpression	0
>2299	Identifier	i
>2300	Identifier	i
>2301	IdentifierDeclType	int
>2302	ExpressionStatement	 
>2303	CallExpression	assert ( files . size ( ) == cameras . size ( ) )
>2304	ArgumentList	files . size ( ) == cameras . size ( )
>2305	Argument	files . size ( ) == cameras . size ( )
>2306	EqualityExpression	files . size ( ) == cameras . size ( )
>2307	CallExpression	cameras . size ( )
>2308	ArgumentList	 
>2309	Callee	cameras . size
>2310	MemberAccess	cameras . size
>2311	Identifier	size
>2312	Identifier	cameras
>2313	CallExpression	files . size ( )
>2314	ArgumentList	 
>2315	Callee	files . size
>2316	MemberAccess	files . size
>2317	Identifier	size
>2318	Identifier	files
>2319	Callee	assert
>2320	Identifier	assert
>2321	IdentifierDeclStatement	 
>2322	IdentifierDecl	num_files = ( int ) files . size ( )
>2323	AssignmentExpr	num_files = ( int ) files . size ( )
>2324	CastExpression	( int ) files . size ( )
>2325	CallExpression	files . size ( )
>2326	ArgumentList	 
>2327	Callee	files . size
>2328	MemberAccess	files . size
>2329	Identifier	size
>2330	Identifier	files
>2331	CastTarget	int
>2332	Identifier	num_files
>2333	Identifier	num_files
>2334	IdentifierDeclType	int
>2357	FunctionDef	WriteNewFiles (const char * output_path , const std 
>2358	ParameterList	const char * output_path , const std 
>2359	Parameter	 
>2360	Identifier	points
>2361	ParameterType	const std 
>2362	Parameter	 
>2363	Identifier	cameras
>2364	ParameterType	const std 
>2365	Parameter	 
>2366	Identifier	files
>2367	ParameterType	const std 
>2368	Parameter	 
>2369	Identifier	output_path
>2370	ParameterType	const char *
>2371	ReturnType	void
>2372	CompoundStatement	 
>2373	ExpressionStatement	 
>2374	CallExpression	WriteBundleFile ( buf , cameras , points )
>2375	ArgumentList	buf
>2376	Argument	points
>2377	Identifier	points
>2378	Argument	cameras
>2379	Identifier	cameras
>2380	Argument	buf
>2381	Identifier	buf
>2382	Callee	WriteBundleFile
>2383	Identifier	WriteBundleFile
>2384	ExpressionStatement	 
>2385	CallExpression	sprintf ( buf , \"%s/bundle.rd.out\" , output_path )
>2386	ArgumentList	buf
>2387	Argument	output_path
>2388	Identifier	output_path
>2389	Argument	\"%s/bundle.rd.out\"
>2390	PrimaryExpression	\"%s/bundle.rd.out\"
>2391	Argument	buf
>2392	Identifier	buf
>2393	Callee	sprintf
>2394	Identifier	sprintf
>2395	ExpressionStatement	 
>2396	CallExpression	fclose ( f )
>2397	ArgumentList	f
>2398	Argument	f
>2399	Identifier	f
>2400	Callee	fclose
>2401	Identifier	fclose
>2402	ForStatement	for ( int i = 0 ; i < num_files ; i ++ )
>2403	CompoundStatement	 
>2404	ExpressionStatement	 
>2405	CallExpression	fprintf ( f , \"%s\n\" , files [ i ] . c_str ( ) )
>2406	ArgumentList	f
>2407	Argument	files [ i ] . c_str ( )
>2408	CallExpression	files [ i ] . c_str ( )
>2409	ArgumentList	 
>2410	Callee	files [ i ] . c_str
>2411	MemberAccess	files [ i ] . c_str
>2412	Identifier	c_str
>2413	ArrayIndexing	files [ i ]
>2414	Identifier	i
>2415	Identifier	files
>2416	Argument	\"%s\n\"
>2417	PrimaryExpression	\"%s\n\"
>2418	Argument	f
>2419	Identifier	f
>2420	Callee	fprintf
>2421	Identifier	fprintf
>2422	IfStatement	if ( cameras [ i ] . f == 0.0 )
>2423	ContinueStatement	 
>2424	Condition	 
>2425	EqualityExpression	cameras [ i ] . f == 0.0
>2426	PrimaryExpression	0.0
>2427	MemberAccess	cameras [ i ] . f
>2428	Identifier	f
>2429	ArrayIndexing	cameras [ i ]
>2430	Identifier	i
>2431	Identifier	cameras
>2432	IncDecOp	 
>2433	IncDec	++
>2434	Identifier	i
>2435	Condition	 
>2436	RelationalExpression	i < num_files
>2437	Identifier	num_files
>2438	Identifier	i
>2439	ForInit	 
>2440	IdentifierDeclStatement	int i = 0 ;
>2441	IdentifierDecl	i = 0
>2442	AssignmentExpr	i = 0
>2443	PrimaryExpression	0
>2444	Identifier	i
>2445	Identifier	i
>2446	IdentifierDeclType	int
>2447	IdentifierDeclStatement	 
>2448	IdentifierDecl	num_files = ( int ) files . size ( )
>2449	AssignmentExpr	num_files = ( int ) files . size ( )
>2450	CastExpression	( int ) files . size ( )
>2451	CallExpression	files . size ( )
>2452	ArgumentList	 
>2453	Callee	files . size
>2454	MemberAccess	files . size
>2455	Identifier	size
>2456	Identifier	files
>2457	CastTarget	int
>2458	Identifier	num_files
>2459	Identifier	num_files
>2460	IdentifierDeclType	int
>2461	IdentifierDeclStatement	 
>2462	IdentifierDecl	* f = fopen ( buf , \"w\" )
>2463	AssignmentExpr	* f = fopen ( buf , \"w\" )
>2464	CallExpression	fopen ( buf , \"w\" )
>2465	ArgumentList	buf
>2466	Argument	\"w\"
>2467	PrimaryExpression	\"w\"
>2468	Argument	buf
>2469	Identifier	buf
>2470	Callee	fopen
>2471	Identifier	fopen
>2472	Identifier	f
>2473	Identifier	f
>2474	IdentifierDeclType	FILE *
>2475	ExpressionStatement	 
>2476	CallExpression	sprintf ( buf , \"%s/list.rd.txt\" , output_path )
>2477	ArgumentList	buf
>2478	Argument	output_path
>2479	Identifier	output_path
>2480	Argument	\"%s/list.rd.txt\"
>2481	PrimaryExpression	\"%s/list.rd.txt\"
>2482	Argument	buf
>2483	Identifier	buf
>2484	Callee	sprintf
>2485	Identifier	sprintf
>2486	IdentifierDeclStatement	 
>2487	IdentifierDecl	buf [ 2048 ]
>2488	PrimaryExpression	2048
>2489	Identifier	buf
>2490	IdentifierDeclType	char [ 2048 ]
>2509	FunctionDef	main (int argc , char * * argv)
>2510	ParameterList	int argc , char * * argv
>2511	Parameter	 
>2512	Identifier	argv
>2513	ParameterType	char * *
>2514	Parameter	 
>2515	Identifier	argc
>2516	ParameterType	int
>2517	ReturnType	int
>2518	CompoundStatement	 
>2519	ReturnStatement	 
>2520	PrimaryExpression	0
>2521	ExpressionStatement	 
>2522	CallExpression	WriteNewFiles ( output_path , files , cameras , points )
>2523	ArgumentList	output_path
>2524	Argument	points
>2525	Identifier	points
>2526	Argument	cameras
>2527	Identifier	cameras
>2528	Argument	files
>2529	Identifier	files
>2530	Argument	output_path
>2531	Identifier	output_path
>2532	Callee	WriteNewFiles
>2533	Identifier	WriteNewFiles
>2534	ExpressionStatement	 
>2535	CallExpression	UndistortImages ( output_path , files , cameras )
>2536	ArgumentList	output_path
>2537	Argument	cameras
>2538	Identifier	cameras
>2539	Argument	files
>2540	Identifier	files
>2541	Argument	output_path
>2542	Identifier	output_path
>2543	Callee	UndistortImages
>2544	Identifier	UndistortImages
>2545	ExpressionStatement	 
>2546	CallExpression	assert ( files . size ( ) > 0 )
>2547	ArgumentList	files . size ( ) > 0
>2548	Argument	files . size ( ) > 0
>2549	RelationalExpression	files . size ( ) > 0
>2550	PrimaryExpression	0
>2551	CallExpression	files . size ( )
>2552	ArgumentList	 
>2553	Callee	files . size
>2554	MemberAccess	files . size
>2555	Identifier	size
>2556	Identifier	files
>2557	Callee	assert
>2558	Identifier	assert
>2559	IfStatement	if ( files2 . size ( ) > 0 )
>2560	ExpressionStatement	 
>2561	AssignmentExpr	files = files2
>2562	Identifier	files2
>2563	Identifier	files
>2564	Condition	 
>2565	RelationalExpression	files2 . size ( ) > 0
>2566	PrimaryExpression	0
>2567	CallExpression	files2 . size ( )
>2568	ArgumentList	 
>2569	Callee	files2 . size
>2570	MemberAccess	files2 . size
>2571	Identifier	size
>2572	Identifier	files2
>2573	ExpressionStatement	 
>2574	CallExpression	ReadBundleFile ( bundle_file , files2 , cameras , points )
>2575	ArgumentList	bundle_file
>2576	Argument	points
>2577	Identifier	points
>2578	Argument	cameras
>2579	Identifier	cameras
>2580	Argument	files2
>2581	Identifier	files2
>2582	Argument	bundle_file
>2583	Identifier	bundle_file
>2584	Callee	ReadBundleFile
>2585	Identifier	ReadBundleFile
>2586	IfStatement	if ( strcmp ( list_file , \"none\" ) != 0 )
>2587	ExpressionStatement	 
>2588	CallExpression	ReadListFile ( list_file , files )
>2589	ArgumentList	list_file
>2590	Argument	files
>2591	Identifier	files
>2592	Argument	list_file
>2593	Identifier	list_file
>2594	Callee	ReadListFile
>2595	Identifier	ReadListFile
>2596	Condition	 
>2597	EqualityExpression	strcmp ( list_file , \"none\" ) != 0
>2598	PrimaryExpression	0
>2599	CallExpression	strcmp ( list_file , \"none\" )
>2600	ArgumentList	list_file
>2601	Argument	\"none\"
>2602	PrimaryExpression	\"none\"
>2603	Argument	list_file
>2604	Identifier	list_file
>2605	Callee	strcmp
>2606	Identifier	strcmp
>2607	IdentifierDeclStatement	 
>2608	IdentifierDecl	files2
>2609	Identifier	files2
>2610	IdentifierDeclType	std 
>2611	IdentifierDeclStatement	 
>2612	IdentifierDecl	files
>2613	Identifier	files
>2614	IdentifierDeclType	std 
>2615	IdentifierDeclStatement	 
>2616	IdentifierDecl	points
>2617	Identifier	points
>2618	IdentifierDeclType	std 
>2619	IdentifierDeclStatement	 
>2620	IdentifierDecl	cameras
>2621	Identifier	cameras
>2622	IdentifierDeclType	std 
>2623	IdentifierDeclStatement	 
>2624	IdentifierDecl	* output_path = argv [ 3 ]
>2625	AssignmentExpr	* output_path = argv [ 3 ]
>2626	ArrayIndexing	argv [ 3 ]
>2627	PrimaryExpression	3
>2628	Identifier	argv
>2629	Identifier	output_path
>2630	Identifier	output_path
>2631	IdentifierDeclType	char *
>2632	IdentifierDeclStatement	 
>2633	IdentifierDecl	* bundle_file = argv [ 2 ]
>2634	AssignmentExpr	* bundle_file = argv [ 2 ]
>2635	ArrayIndexing	argv [ 2 ]
>2636	PrimaryExpression	2
>2637	Identifier	argv
>2638	Identifier	bundle_file
>2639	Identifier	bundle_file
>2640	IdentifierDeclType	char *
>2641	IdentifierDeclStatement	 
>2642	IdentifierDecl	* list_file = argv [ 1 ]
>2643	AssignmentExpr	* list_file = argv [ 1 ]
>2644	ArrayIndexing	argv [ 1 ]
>2645	PrimaryExpression	1
>2646	Identifier	argv
>2647	Identifier	list_file
>2648	Identifier	list_file
>2649	IdentifierDeclType	char *
>2650	IfStatement	if ( argc != 4 )
>2651	CompoundStatement	 
>2652	ReturnStatement	 
>2653	PrimaryExpression	1
>2654	ExpressionStatement	 
>2655	CallExpression	printf ( \"Usage
>2656	ArgumentList	\"Usage
>2657	Argument	argv [ 0 ]
>2658	ArrayIndexing	argv [ 0 ]
>2659	PrimaryExpression	0
>2660	Identifier	argv
>2661	Argument	\"Usage
>2662	PrimaryExpression	\"Usage
>2663	Callee	printf
>2664	Identifier	printf
>2665	Condition	 
>2666	EqualityExpression	argc != 4
>2667	PrimaryExpression	4
>2668	Identifier	argc
<23=38,37,24
<24=34,31,28,25
<25=27,26
<28=30,29
<31=33,32
<34=36,35
<38=973,957,950,946,941,934,923,747,736,377,46,39
<39=40
<40=44,41
<41=42
<42=43
<44=45
<46=369,365,362,47
<47=358,335,308,281,208,204,191,82,63,48
<48=59,49
<49=50
<50=51
<51=55,52
<52=53
<53=54
<55=56
<56=58,57
<59=60
<60=62,61
<63=78,64
<64=65
<65=73,66
<66=72,67
<67=69,68
<69=71,70
<73=75,74
<75=77,76
<78=79
<79=81,80
<82=183,179,176,83
<83=169,152,145,123,119,113,107,101,95,84
<84=85
<85=89,86
<86=87
<87=88
<89=90
<90=92,91
<92=94,93
<95=96
<96=98,97
<98=100,99
<101=102
<102=104,103
<104=106,105
<107=108
<108=110,109
<110=112,111
<113=114
<114=116,115
<116=118,117
<119=120
<120=122,121
<123=141,124
<124=125
<125=139,126
<126=137,135,131,127
<127=128
<128=130,129
<131=132
<132=134,133
<135=136
<137=138
<139=140
<141=142
<142=144,143
<145=149,146
<146=148,147
<149=151,150
<152=153
<153=167,154
<154=165,163,159,155
<155=156
<156=158,157
<159=160
<160=162,161
<163=164
<165=166
<167=168
<169=173,170
<170=172,171
<173=175,174
<176=178,177
<179=180
<180=182,181
<183=184
<184=185
<185=190,189,186
<186=188,187
<191=192
<192=202,193
<193=200,198,194
<194=195
<195=197,196
<198=199
<200=201
<202=203
<204=205
<205=207,206
<208=275,209
<209=270,210
<210=262,258,255,211
<211=221,212
<212=213
<213=219,214
<214=217,215
<215=216
<217=218
<219=220
<221=247,243,240,222
<222=223
<223=224
<224=238,225
<225=236,234,226
<226=227
<227=233,228
<228=230,229
<230=232,231
<234=235
<236=237
<238=239
<240=242,241
<243=244
<244=246,245
<247=248
<248=249
<249=254,253,250
<250=252,251
<255=257,256
<258=259
<259=261,260
<262=263
<263=264
<264=269,268,265
<265=267,266
<270=271
<271=274,273,272
<275=276
<276=278,277
<278=280,279
<281=282
<282=306,283
<283=304,302,296,290,284
<284=285
<285=287,286
<287=289,288
<290=291
<291=293,292
<293=295,294
<296=297
<297=299,298
<299=301,300
<302=303
<304=305
<306=307
<308=309
<309=333,310
<310=331,329,323,317,311
<311=312
<312=314,313
<314=316,315
<317=318
<318=320,319
<320=322,321
<323=324
<324=326,325
<326=328,327
<329=330
<331=332
<333=334
<335=354,336
<336=350,337
<337=338
<338=348,339
<339=346,344,340
<340=341
<341=343,342
<344=345
<346=347
<348=349
<350=351
<351=353,352
<354=355
<355=357,356
<358=359
<359=361,360
<362=364,363
<365=366
<366=368,367
<369=370
<370=371
<371=376,375,372
<372=374,373
<377=728,724,721,378
<378=711,706,701,570,525,504,500,494,486,478,461,444,388,379
<379=380
<380=384,381
<381=382
<382=383
<384=385
<385=387,386
<388=440,389
<389=430,420,410,400,390
<390=391
<391=397,392
<392=396,393
<393=395,394
<397=399,398
<400=401
<401=407,402
<402=406,403
<403=405,404
<407=409,408
<410=411
<411=417,412
<412=416,413
<413=415,414
<417=419,418
<420=421
<421=427,422
<422=426,423
<423=425,424
<427=429,428
<430=431
<431=437,432
<432=436,433
<433=435,434
<437=439,438
<440=441
<441=443,442
<444=445
<445=459,446
<446=455,453,447
<447=448
<448=450,449
<450=452,451
<453=454
<455=456
<456=458,457
<459=460
<461=462
<462=476,463
<463=472,470,464
<464=465
<465=467,466
<467=469,468
<470=471
<472=473
<473=475,474
<476=477
<478=479
<479=481,480
<481=483,482
<483=485,484
<486=487
<487=489,488
<489=491,490
<491=493,492
<494=495
<495=497,496
<497=499,498
<500=501
<501=503,502
<504=505
<505=523,506
<506=521,519,515,511,507
<507=508
<508=510,509
<511=512
<512=514,513
<515=516
<516=518,517
<519=520
<521=522
<523=524
<525=526
<526=568,527
<527=566,564,560,556,552,548,544,540,536,532,528
<528=529
<529=531,530
<532=533
<533=535,534
<536=537
<537=539,538
<540=541
<541=543,542
<544=545
<545=547,546
<548=549
<549=551,550
<552=553
<553=555,554
<556=557
<557=559,558
<560=561
<561=563,562
<564=565
<566=567
<568=569
<570=697,683,571
<571=572
<572=679,657,573
<573=574
<574=652,645,641,637,610,589,575
<575=576
<576=585,577
<577=578
<578=579
<579=583,580
<580=581
<581=582
<583=584
<585=586
<586=588,587
<589=590
<590=608,591
<591=606,604,600,596,592
<592=593
<593=595,594
<596=597
<597=599,598
<600=601
<601=603,602
<604=605
<606=607
<608=609
<610=611
<611=635,612
<612=633,631,629,625,621,617,613
<613=614
<614=616,615
<617=618
<618=620,619
<621=622
<622=624,623
<625=626
<626=628,627
<629=630
<631=632
<633=634
<635=636
<637=638
<638=640,639
<641=642
<642=644,643
<645=649,646
<646=648,647
<649=651,650
<652=653
<653=656,655,654
<657=658
<658=659
<659=677,660
<660=675,673,669,665,661
<661=662
<662=664,663
<665=666
<666=668,667
<669=670
<670=672,671
<673=674
<675=676
<677=678
<679=680
<680=682,681
<683=684
<684=685
<685=695,686
<686=693,691,687
<687=688
<688=690,689
<691=692
<693=694
<695=696
<697=698
<698=700,699
<701=702
<702=705,704,703
<706=707
<707=710,709,708
<711=718,715,712
<712=714,713
<715=717,716
<718=720,719
<721=723,722
<724=725
<725=727,726
<728=729
<729=730
<730=735,734,731
<731=733,732
<736=737
<737=745,738
<738=743,741,739
<739=740
<741=742
<743=744
<745=746
<747=917,827,748
<748=749
<749=821,773,750
<750=751
<751=769,752
<752=753
<753=767,754
<754=765,763,759,755
<755=756
<756=758,757
<759=760
<760=762,761
<763=764
<765=766
<767=768
<769=770
<770=772,771
<773=817,804,800,791,774
<774=775
<775=789,776
<776=787,785,781,777
<777=778
<778=780,779
<781=782
<782=784,783
<785=786
<787=788
<789=790
<791=792
<792=798,793
<793=796,794
<794=795
<796=797
<798=799
<800=801
<801=803,802
<804=805
<805=815,806
<806=813,811,807
<807=808
<808=810,809
<811=812
<813=814
<815=816
<817=818
<818=820,819
<821=822
<822=824,823
<824=826,825
<827=913,900,896,887,828
<828=883,865,829
<829=830
<830=858,837,831
<831=832
<832=836,833
<833=835,834
<837=838
<838=856,839
<839=854,852,848,844,840
<840=841
<841=843,842
<844=845
<845=847,846
<848=849
<849=851,850
<852=853
<854=855
<856=857
<858=859
<859=864,863,860
<860=862,861
<865=866
<866=867
<867=881,868
<868=879,877,873,869
<869=870
<870=872,871
<873=874
<874=876,875
<877=878
<879=880
<881=882
<883=884
<884=886,885
<887=888
<888=894,889
<889=892,890
<890=891
<892=893
<894=895
<896=897
<897=899,898
<900=901
<901=911,902
<902=909,907,903
<903=904
<904=906,905
<907=908
<909=910
<911=912
<913=914
<914=916,915
<917=918
<918=920,919
<920=922,921
<923=924
<924=932,925
<925=930,928,926
<926=927
<928=929
<930=931
<932=933
<934=935
<935=940,939,936
<936=938,937
<941=942
<942=945,944,943
<946=947
<947=949,948
<950=954,951
<951=953,952
<954=956,955
<957=969,958
<958=960,959
<960=961
<961=967,962
<962=965,963
<963=964
<965=966
<967=968
<969=970
<970=972,971
<973=974
<974=986,985,975
<975=984,976
<976=982,977
<977=980,978
<978=979
<980=981
<982=983
<1062=1071,1070,1063
<1063=1067,1064
<1064=1066,1065
<1067=1069,1068
<1071=1161,1156,1079,1072
<1072=1073
<1073=1077,1074
<1074=1075
<1075=1076
<1077=1078
<1079=1145,1080
<1080=1118,1104,1095,1081
<1081=1082
<1082=1091,1083
<1083=1084
<1084=1085
<1085=1089,1086
<1086=1087
<1087=1088
<1089=1090
<1091=1092
<1092=1094,1093
<1095=1102,1096
<1096=1097
<1097=1099,1098
<1099=1101,1100
<1102=1103
<1104=1105
<1105=1117,1116,1106
<1106=1115,1107
<1107=1113,1108
<1108=1111,1109
<1109=1110
<1111=1112
<1113=1114
<1118=1132,1119
<1119=1120
<1120=1122,1121
<1122=1131,1123
<1123=1125,1124
<1125=1129,1126
<1126=1127
<1127=1128
<1129=1130
<1132=1133
<1133=1135,1134
<1135=1144,1136
<1136=1138,1137
<1138=1142,1139
<1139=1140
<1140=1141
<1142=1143
<1145=1146
<1146=1154,1147
<1147=1152,1150,1148
<1148=1149
<1150=1151
<1152=1153
<1154=1155
<1156=1157
<1157=1160,1159,1158
<1161=1162
<1162=1174,1173,1163
<1163=1172,1164
<1164=1170,1165
<1165=1168,1166
<1166=1167
<1168=1169
<1170=1171
<1191=1203,1202,1192
<1192=1199,1196,1193
<1193=1195,1194
<1196=1198,1197
<1199=1201,1200
<1203=1716,1700,1688,1676,1669,1662,1616,1605,1596,1583,1453,1211,1204
<1204=1205
<1205=1209,1206
<1206=1207
<1207=1208
<1209=1210
<1211=1445,1441,1438,1212
<1212=1427,1406,1395,1359,1355,1342,1331,1222,1213
<1213=1214
<1214=1220,1215
<1215=1218,1216
<1216=1217
<1218=1219
<1220=1221
<1222=1323,1319,1316,1223
<1223=1299,1286,1271,1256,1241,1224
<1224=1225
<1225=1239,1226
<1226=1237,1235,1233,1231,1229,1227
<1227=1228
<1229=1230
<1231=1232
<1233=1234
<1235=1236
<1237=1238
<1239=1240
<1241=1242
<1242=1255,1254,1243
<1243=1253,1244
<1244=1246,1245
<1246=1248,1247
<1248=1250,1249
<1250=1252,1251
<1256=1257
<1257=1270,1269,1258
<1258=1268,1259
<1259=1261,1260
<1261=1263,1262
<1263=1265,1264
<1265=1267,1266
<1271=1272
<1272=1285,1284,1273
<1273=1283,1274
<1274=1276,1275
<1276=1278,1277
<1278=1280,1279
<1280=1282,1281
<1286=1287
<1287=1297,1288
<1288=1289
<1289=1290
<1290=1294,1291
<1291=1293,1292
<1294=1296,1295
<1297=1298
<1299=1300
<1300=1315,1314,1301
<1301=1313,1302
<1302=1312,1303
<1303=1305,1304
<1305=1307,1306
<1307=1309,1308
<1309=1311,1310
<1316=1318,1317
<1319=1320
<1320=1322,1321
<1323=1324
<1324=1325
<1325=1330,1329,1326
<1326=1328,1327
<1331=1332
<1332=1340,1333
<1333=1338,1336,1334
<1334=1335
<1336=1337
<1338=1339
<1340=1341
<1342=1343
<1343=1354,1344
<1344=1346,1345
<1346=1347
<1347=1349,1348
<1349=1351,1350
<1351=1353,1352
<1355=1356
<1356=1358,1357
<1359=1360
<1360=1393,1361
<1361=1391,1389,1380,1371,1362
<1362=1363
<1363=1369,1364
<1364=1365
<1365=1366
<1366=1368,1367
<1369=1370
<1371=1372
<1372=1378,1373
<1373=1374
<1374=1375
<1375=1377,1376
<1378=1379
<1380=1381
<1381=1387,1382
<1382=1383
<1383=1384
<1384=1386,1385
<1387=1388
<1389=1390
<1391=1392
<1393=1394
<1395=1396
<1396=1405,1404,1397
<1397=1403,1398
<1398=1400,1399
<1400=1402,1401
<1406=1407
<1407=1425,1408
<1408=1423,1421,1417,1413,1409
<1409=1410
<1410=1412,1411
<1413=1414
<1414=1416,1415
<1417=1418
<1418=1420,1419
<1421=1422
<1423=1424
<1425=1426
<1427=1428
<1428=1437,1436,1429
<1429=1435,1430
<1430=1432,1431
<1432=1434,1433
<1438=1440,1439
<1441=1442
<1442=1444,1443
<1445=1446
<1446=1447
<1447=1452,1451,1448
<1448=1450,1449
<1453=1575,1571,1568,1454
<1454=1558,1543,1532,1487,1476,1455
<1455=1456
<1456=1474,1457
<1457=1472,1470,1466,1462,1458
<1458=1459
<1459=1461,1460
<1462=1463
<1463=1465,1464
<1466=1467
<1467=1469,1468
<1470=1471
<1472=1473
<1474=1475
<1476=1477
<1477=1486,1485,1478
<1478=1484,1479
<1479=1481,1480
<1481=1483,1482
<1487=1488
<1488=1530,1489
<1489=1528,1526,1522,1518,1514,1510,1506,1502,1498,1494,1490
<1490=1491
<1491=1493,1492
<1494=1495
<1495=1497,1496
<1498=1499
<1499=1501,1500
<1502=1503
<1503=1505,1504
<1506=1507
<1507=1509,1508
<1510=1511
<1511=1513,1512
<1514=1515
<1515=1517,1516
<1518=1519
<1519=1521,1520
<1522=1523
<1523=1525,1524
<1526=1527
<1528=1529
<1530=1531
<1532=1533
<1533=1542,1541,1534
<1534=1540,1535
<1535=1537,1536
<1537=1539,1538
<1543=1544
<1544=1556,1545
<1545=1554,1552,1546
<1546=1547
<1547=1549,1548
<1549=1551,1550
<1552=1553
<1554=1555
<1556=1557
<1558=1560,1559
<1560=1561
<1561=1563,1562
<1563=1565,1564
<1565=1567,1566
<1568=1570,1569
<1571=1572
<1572=1574,1573
<1575=1576
<1576=1577
<1577=1582,1581,1578
<1578=1580,1579
<1583=1584
<1584=1594,1585
<1585=1592,1590,1588,1586
<1586=1587
<1588=1589
<1590=1591
<1592=1593
<1594=1595
<1596=1597
<1597=1603,1598
<1598=1601,1599
<1599=1600
<1601=1602
<1603=1604
<1605=1606
<1606=1614,1607
<1607=1612,1610,1608
<1608=1609
<1610=1611
<1612=1613
<1614=1615
<1616=1654,1650,1647,1617
<1617=1628,1622,1618
<1618=1619
<1619=1621,1620
<1622=1623
<1623=1625,1624
<1625=1627,1626
<1628=1639,1629
<1629=1631,1630
<1631=1632
<1632=1636,1633
<1633=1635,1634
<1636=1638,1637
<1639=1640
<1640=1642,1641
<1642=1644,1643
<1644=1646,1645
<1647=1649,1648
<1650=1651
<1651=1653,1652
<1654=1655
<1655=1656
<1656=1661,1660,1657
<1657=1659,1658
<1662=1663
<1663=1668,1667,1664
<1664=1666,1665
<1669=1670
<1670=1675,1674,1671
<1671=1673,1672
<1676=1677
<1677=1687,1686,1678
<1678=1685,1679
<1679=1681,1680
<1681=1682
<1682=1684,1683
<1688=1689
<1689=1699,1698,1690
<1690=1697,1691
<1691=1693,1692
<1693=1694
<1694=1696,1695
<1700=1712,1701
<1701=1703,1702
<1703=1704
<1704=1710,1705
<1705=1708,1706
<1706=1707
<1708=1709
<1710=1711
<1712=1713
<1713=1715,1714
<1716=1717
<1717=1729,1728,1718
<1718=1727,1719
<1719=1725,1720
<1720=1723,1721
<1721=1722
<1723=1724
<1725=1726
<1785=1797,1796,1786
<1786=1793,1790,1787
<1787=1789,1788
<1790=1792,1791
<1793=1795,1794
<1797=2107,2100,2083,2074,2065,2051,2036,1828,1812,1805,1798
<1798=1799
<1799=1803,1800
<1800=1801
<1801=1802
<1803=1804
<1805=1806
<1806=1810,1807
<1807=1808
<1808=1809
<1810=1811
<1812=1813
<1813=1826,1814
<1814=1824,1815
<1815=1816
<1816=1823,1817
<1817=1819,1818
<1819=1820
<1820=1822,1821
<1824=1825
<1826=1827
<1828=2028,2024,2021,1829
<1829=1830
<1830=2013,2009,2006,1831
<1831=1995,1984,1969,1944,1940,1936,1930,1924,1920,1870,1832
<1832=1833
<1833=1868,1834
<1834=1866,1864,1862,1853,1844,1835
<1835=1836
<1836=1842,1837
<1837=1838
<1838=1839
<1839=1841,1840
<1842=1843
<1844=1845
<1845=1851,1846
<1846=1847
<1847=1848
<1848=1850,1849
<1851=1852
<1853=1854
<1854=1860,1855
<1855=1856
<1856=1857
<1857=1859,1858
<1860=1861
<1862=1863
<1864=1865
<1866=1867
<1868=1869
<1870=1900,1886,1871
<1871=1872
<1872=1873
<1873=1874
<1874=1885,1875
<1875=1883,1876
<1876=1881,1879,1877
<1877=1878
<1879=1880
<1881=1882
<1883=1884
<1886=1887
<1887=1888
<1888=1899,1889
<1889=1897,1890
<1890=1895,1893,1891
<1891=1892
<1893=1894
<1895=1896
<1897=1898
<1900=1901
<1901=1917,1902
<1902=1912,1903
<1903=1909,1904
<1904=1908,1905
<1905=1907,1906
<1909=1911,1910
<1912=1916,1913
<1913=1915,1914
<1917=1919,1918
<1920=1921
<1921=1923,1922
<1924=1925
<1925=1929,1926
<1926=1928,1927
<1930=1931
<1931=1935,1932
<1932=1934,1933
<1936=1937
<1937=1939,1938
<1940=1941
<1941=1943,1942
<1944=1945
<1945=1968,1967,1946
<1946=1966,1947
<1947=1965,1948
<1948=1958,1949
<1949=1953,1950
<1950=1952,1951
<1953=1955,1954
<1955=1957,1956
<1958=1960,1959
<1960=1962,1961
<1962=1964,1963
<1969=1970
<1970=1983,1982,1971
<1971=1981,1972
<1972=1974,1973
<1974=1978,1975
<1975=1977,1976
<1978=1980,1979
<1984=1985
<1985=1994,1993,1986
<1986=1992,1987
<1987=1991,1988
<1988=1990,1989
<1995=1996
<1996=2005,2004,1997
<1997=2003,1998
<1998=2002,1999
<1999=2001,2000
<2006=2008,2007
<2009=2010
<2010=2012,2011
<2013=2014
<2014=2015
<2015=2020,2019,2016
<2016=2018,2017
<2021=2023,2022
<2024=2025
<2025=2027,2026
<2028=2029
<2029=2030
<2030=2035,2034,2031
<2031=2033,2032
<2036=2037
<2037=2050,2049,2038
<2038=2048,2039
<2039=2047,2040
<2040=2044,2041
<2041=2043,2042
<2044=2046,2045
<2051=2052
<2052=2064,2063,2053
<2053=2062,2054
<2054=2060,2055
<2055=2058,2056
<2056=2057
<2058=2059
<2060=2061
<2065=2066
<2066=2073,2072,2067
<2067=2071,2068
<2068=2070,2069
<2074=2075
<2075=2082,2081,2076
<2076=2080,2077
<2077=2079,2078
<2083=2084
<2084=2099,2098,2085
<2085=2097,2086
<2086=2095,2087
<2087=2088
<2088=2089
<2089=2091,2090
<2091=2092
<2092=2094,2093
<2095=2096
<2100=2101
<2101=2105,2102
<2102=2103
<2103=2104
<2105=2106
<2107=2108
<2108=2119,2109
<2109=2117,2110
<2110=2111
<2111=2113,2112
<2113=2114
<2114=2116,2115
<2117=2118
<2119=2120
<2157=2169,2168,2158
<2158=2165,2162,2159
<2159=2161,2160
<2162=2164,2163
<2165=2167,2166
<2169=2321,2302,2170
<2170=2294,2290,2287,2171
<2171=2277,2268,2252,2236,2227,2203,2185,2172
<2172=2173
<2173=2183,2174
<2174=2181,2177,2175
<2175=2176
<2177=2178
<2178=2180,2179
<2181=2182
<2183=2184
<2185=2186
<2186=2202,2201,2187
<2187=2200,2188
<2188=2194,2189
<2189=2193,2190
<2190=2192,2191
<2194=2198,2195
<2195=2196
<2196=2197
<2198=2199
<2203=2204
<2204=2226,2225,2205
<2205=2224,2206
<2206=2218,2207
<2207=2214,2208
<2208=2209
<2209=2213,2210
<2210=2212,2211
<2214=2215
<2215=2217,2216
<2218=2219
<2219=2221,2220
<2221=2223,2222
<2227=2228
<2228=2234,2229
<2229=2230
<2230=2231
<2231=2233,2232
<2234=2235
<2236=2237
<2237=2251,2250,2238
<2238=2249,2239
<2239=2243,2240
<2240=2241
<2241=2242
<2243=2244
<2244=2246,2245
<2246=2248,2247
<2252=2253
<2253=2267,2266,2254
<2254=2265,2255
<2255=2259,2256
<2256=2257
<2257=2258
<2259=2260
<2260=2262,2261
<2262=2264,2263
<2268=2269
<2269=2276,2275,2270
<2270=2274,2271
<2271=2273,2272
<2277=2279,2278
<2279=2280
<2280=2282,2281
<2282=2284,2283
<2284=2286,2285
<2287=2289,2288
<2290=2291
<2291=2293,2292
<2294=2295
<2295=2296
<2296=2301,2300,2297
<2297=2299,2298
<2302=2303
<2303=2319,2304
<2304=2305
<2305=2306
<2306=2313,2307
<2307=2309,2308
<2309=2310
<2310=2312,2311
<2313=2315,2314
<2315=2316
<2316=2318,2317
<2319=2320
<2321=2322
<2322=2334,2333,2323
<2323=2332,2324
<2324=2331,2325
<2325=2327,2326
<2327=2328
<2328=2330,2329
<2357=2372,2371,2358
<2358=2368,2365,2362,2359
<2359=2361,2360
<2362=2364,2363
<2365=2367,2366
<2368=2370,2369
<2372=2486,2475,2461,2447,2402,2395,2384,2373
<2373=2374
<2374=2382,2375
<2375=2380,2378,2376
<2376=2377
<2378=2379
<2380=2381
<2382=2383
<2384=2385
<2385=2393,2386
<2386=2391,2389,2387
<2387=2388
<2389=2390
<2391=2392
<2393=2394
<2395=2396
<2396=2400,2397
<2397=2398
<2398=2399
<2400=2401
<2402=2439,2435,2432,2403
<2403=2422,2404
<2404=2405
<2405=2420,2406
<2406=2418,2416,2407
<2407=2408
<2408=2410,2409
<2410=2411
<2411=2413,2412
<2413=2415,2414
<2416=2417
<2418=2419
<2420=2421
<2422=2424,2423
<2424=2425
<2425=2427,2426
<2427=2429,2428
<2429=2431,2430
<2432=2434,2433
<2435=2436
<2436=2438,2437
<2439=2440
<2440=2441
<2441=2446,2445,2442
<2442=2444,2443
<2447=2448
<2448=2460,2459,2449
<2449=2458,2450
<2450=2457,2451
<2451=2453,2452
<2453=2454
<2454=2456,2455
<2461=2462
<2462=2474,2473,2463
<2463=2472,2464
<2464=2470,2465
<2465=2468,2466
<2466=2467
<2468=2469
<2470=2471
<2475=2476
<2476=2484,2477
<2477=2482,2480,2478
<2478=2479
<2480=2481
<2482=2483
<2484=2485
<2486=2487
<2487=2490,2489,2488
<2509=2518,2517,2510
<2510=2514,2511
<2511=2513,2512
<2514=2516,2515
<2518=2650,2641,2632,2623,2619,2615,2611,2607,2586,2573,2559,2545,2534,2521,2519
<2519=2520
<2521=2522
<2522=2532,2523
<2523=2530,2528,2526,2524
<2524=2525
<2526=2527
<2528=2529
<2530=2531
<2532=2533
<2534=2535
<2535=2543,2536
<2536=2541,2539,2537
<2537=2538
<2539=2540
<2541=2542
<2543=2544
<2545=2546
<2546=2557,2547
<2547=2548
<2548=2549
<2549=2551,2550
<2551=2553,2552
<2553=2554
<2554=2556,2555
<2557=2558
<2559=2564,2560
<2560=2561
<2561=2563,2562
<2564=2565
<2565=2567,2566
<2567=2569,2568
<2569=2570
<2570=2572,2571
<2573=2574
<2574=2584,2575
<2575=2582,2580,2578,2576
<2576=2577
<2578=2579
<2580=2581
<2582=2583
<2584=2585
<2586=2596,2587
<2587=2588
<2588=2594,2589
<2589=2592,2590
<2590=2591
<2592=2593
<2594=2595
<2596=2597
<2597=2599,2598
<2599=2605,2600
<2600=2603,2601
<2601=2602
<2603=2604
<2605=2606
<2607=2608
<2608=2610,2609
<2611=2612
<2612=2614,2613
<2615=2616
<2616=2618,2617
<2619=2620
<2620=2622,2621
<2623=2624
<2624=2631,2630,2625
<2625=2629,2626
<2626=2628,2627
<2632=2633
<2633=2640,2639,2634
<2634=2638,2635
<2635=2637,2636
<2641=2642
<2642=2649,2648,2643
<2643=2647,2644
<2644=2646,2645
<2650=2665,2651
<2651=2654,2652
<2652=2653
<2654=2655
<2655=2663,2656
<2656=2661,2657
<2657=2658
<2658=2660,2659
<2661=2662
<2663=2664
<2665=2666
<2666=2668,2667
