>3	FunctionDef	BaseApp 
>4	ParameterList	const char * filename
>5	Parameter	 
>6	Identifier	filename
>7	ParameterType	const char *
>8	ReturnType	bool
>9	CompoundStatement	 
>10	ReturnStatement	 
>11	Identifier	true
>12	ExpressionStatement	 
>13	CallExpression	fflush ( stdout )
>14	ArgumentList	stdout
>15	Argument	stdout
>16	Identifier	stdout
>17	Callee	fflush
>18	Identifier	fflush
>19	ExpressionStatement	 
>20	CallExpression	printf ( \"[ReadTrackPairs] Read %lu track pairs\n\" , num_track_pairs )
>21	ArgumentList	\"[ReadTrackPairs] Read %lu track pairs\n\"
>22	Argument	num_track_pairs
>23	Identifier	num_track_pairs
>24	Argument	\"[ReadTrackPairs] Read %lu track pairs\n\"
>25	PrimaryExpression	\"[ReadTrackPairs] Read %lu track pairs\n\"
>26	Callee	printf
>27	Identifier	printf
>28	ExpressionStatement	 
>29	CallExpression	fclose ( f )
>30	ArgumentList	f
>31	Argument	f
>32	Identifier	f
>33	Callee	fclose
>34	Identifier	fclose
>35	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>36	CompoundStatement	 
>37	ForStatement	for ( int j = 0 ; j < num_nbrs ; j ++ )
>38	CompoundStatement	 
>39	ExpressionStatement	 
>40	CallExpression	SetMatch ( nbr , i )
>41	ArgumentList	nbr
>42	Argument	i
>43	Identifier	i
>44	Argument	nbr
>45	Identifier	nbr
>46	Callee	SetMatch
>47	Identifier	SetMatch
>48	ExpressionStatement	 
>49	CallExpression	SetMatch ( i , nbr )
>50	ArgumentList	i
>51	Argument	nbr
>52	Identifier	nbr
>53	Argument	i
>54	Identifier	i
>55	Callee	SetMatch
>56	Identifier	SetMatch
>57	ExpressionStatement	 
>58	CallExpression	fread ( & nbr , sizeof ( int ) , 1 , f )
>59	ArgumentList	& nbr
>60	Argument	f
>61	Identifier	f
>62	Argument	1
>63	PrimaryExpression	1
>64	Argument	sizeof ( int )
>65	SizeofExpr	sizeof ( int )
>66	SizeofOperand	int
>67	Sizeof	sizeof
>68	Argument	& nbr
>69	UnaryOp	& nbr
>70	Identifier	nbr
>71	UnaryOperator	&
>72	Callee	fread
>73	Identifier	fread
>74	IdentifierDeclStatement	 
>75	IdentifierDecl	nbr = 0
>76	AssignmentExpr	nbr = 0
>77	PrimaryExpression	0
>78	Identifier	nbr
>79	Identifier	nbr
>80	IdentifierDeclType	int
>81	IncDecOp	 
>82	IncDec	++
>83	Identifier	j
>84	Condition	 
>85	RelationalExpression	j < num_nbrs
>86	Identifier	num_nbrs
>87	Identifier	j
>88	ForInit	 
>89	IdentifierDeclStatement	int j = 0 ;
>90	IdentifierDecl	j = 0
>91	AssignmentExpr	j = 0
>92	PrimaryExpression	0
>93	Identifier	j
>94	Identifier	j
>95	IdentifierDeclType	int
>96	ExpressionStatement	 
>97	AssignmentExpr	num_track_pairs += num_nbrs
>98	Identifier	num_nbrs
>99	Identifier	num_track_pairs
>100	ExpressionStatement	 
>101	CallExpression	fread ( & num_nbrs , sizeof ( int ) , 1 , f )
>102	ArgumentList	& num_nbrs
>103	Argument	f
>104	Identifier	f
>105	Argument	1
>106	PrimaryExpression	1
>107	Argument	sizeof ( int )
>108	SizeofExpr	sizeof ( int )
>109	SizeofOperand	int
>110	Sizeof	sizeof
>111	Argument	& num_nbrs
>112	UnaryOp	& num_nbrs
>113	Identifier	num_nbrs
>114	UnaryOperator	&
>115	Callee	fread
>116	Identifier	fread
>117	IdentifierDeclStatement	 
>118	IdentifierDecl	num_nbrs = 0
>119	AssignmentExpr	num_nbrs = 0
>120	PrimaryExpression	0
>121	Identifier	num_nbrs
>122	Identifier	num_nbrs
>123	IdentifierDeclType	int
>124	IncDecOp	 
>125	IncDec	++
>126	Identifier	i
>127	Condition	 
>128	RelationalExpression	i < num_images
>129	Identifier	num_images
>130	Identifier	i
>131	ForInit	 
>132	IdentifierDeclStatement	int i = 0 ;
>133	IdentifierDecl	i = 0
>134	AssignmentExpr	i = 0
>135	PrimaryExpression	0
>136	Identifier	i
>137	Identifier	i
>138	IdentifierDeclType	int
>139	IdentifierDeclStatement	 
>140	IdentifierDecl	num_track_pairs = 0
>141	AssignmentExpr	num_track_pairs = 0
>142	PrimaryExpression	0
>143	Identifier	num_track_pairs
>144	Identifier	num_track_pairs
>145	IdentifierDeclType	unsigned long
>146	IfStatement	if ( num_images != GetNumImages ( ) )
>147	CompoundStatement	 
>148	ReturnStatement	 
>149	Identifier	false
>150	ExpressionStatement	 
>151	CallExpression	printf ( \"[ReadTrackPairs] Mismatch in number of images!\n\" )
>152	ArgumentList	\"[ReadTrackPairs] Mismatch in number of images!\n\"
>153	Argument	\"[ReadTrackPairs] Mismatch in number of images!\n\"
>154	PrimaryExpression	\"[ReadTrackPairs] Mismatch in number of images!\n\"
>155	Callee	printf
>156	Identifier	printf
>157	Condition	 
>158	EqualityExpression	num_images != GetNumImages ( )
>159	CallExpression	GetNumImages ( )
>160	ArgumentList	 
>161	Callee	GetNumImages
>162	Identifier	GetNumImages
>163	Identifier	num_images
>164	ExpressionStatement	 
>165	CallExpression	fread ( & num_images , sizeof ( int ) , 1 , f )
>166	ArgumentList	& num_images
>167	Argument	f
>168	Identifier	f
>169	Argument	1
>170	PrimaryExpression	1
>171	Argument	sizeof ( int )
>172	SizeofExpr	sizeof ( int )
>173	SizeofOperand	int
>174	Sizeof	sizeof
>175	Argument	& num_images
>176	UnaryOp	& num_images
>177	Identifier	num_images
>178	UnaryOperator	&
>179	Callee	fread
>180	Identifier	fread
>181	IdentifierDeclStatement	 
>182	IdentifierDecl	num_images
>183	Identifier	num_images
>184	IdentifierDeclType	int
>185	IfStatement	if ( ! f )
>186	CompoundStatement	 
>187	ReturnStatement	 
>188	Identifier	false
>189	ExpressionStatement	 
>190	CallExpression	printf ( \"[ReadTrackPairs] Error opening file %s for reading\n\" , filename )
>191	ArgumentList	\"[ReadTrackPairs] Error opening file %s for reading\n\"
>192	Argument	filename
>193	Identifier	filename
>194	Argument	\"[ReadTrackPairs] Error opening file %s for reading\n\"
>195	PrimaryExpression	\"[ReadTrackPairs] Error opening file %s for reading\n\"
>196	Callee	printf
>197	Identifier	printf
>198	Condition	 
>199	UnaryOp	! f
>200	Identifier	f
>201	UnaryOperator	!
>202	IdentifierDeclStatement	 
>203	IdentifierDecl	* f = fopen ( filename , \"rb\" )
>204	AssignmentExpr	* f = fopen ( filename , \"rb\" )
>205	CallExpression	fopen ( filename , \"rb\" )
>206	ArgumentList	filename
>207	Argument	\"rb\"
>208	PrimaryExpression	\"rb\"
>209	Argument	filename
>210	Identifier	filename
>211	Callee	fopen
>212	Identifier	fopen
>213	Identifier	f
>214	Identifier	f
>215	IdentifierDeclType	FILE *
>235	FunctionDef	BaseApp 
>236	ParameterList	const char * filename
>237	Parameter	 
>238	Identifier	filename
>239	ParameterType	const char *
>240	ReturnType	void
>241	CompoundStatement	 
>242	ExpressionStatement	 
>243	CallExpression	fclose ( f )
>244	ArgumentList	f
>245	Argument	f
>246	Identifier	f
>247	Callee	fclose
>248	Identifier	fclose
>249	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>250	CompoundStatement	 
>251	ForStatement	for ( iter = nbrs . begin ( ) ; iter != nbrs . end ( ) ; iter ++ )
>252	CompoundStatement	 
>253	ExpressionStatement	 
>254	CallExpression	fwrite ( & nbr , sizeof ( int ) , 1 , f )
>255	ArgumentList	& nbr
>256	Argument	f
>257	Identifier	f
>258	Argument	1
>259	PrimaryExpression	1
>260	Argument	sizeof ( int )
>261	SizeofExpr	sizeof ( int )
>262	SizeofOperand	int
>263	Sizeof	sizeof
>264	Argument	& nbr
>265	UnaryOp	& nbr
>266	Identifier	nbr
>267	UnaryOperator	&
>268	Callee	fwrite
>269	Identifier	fwrite
>270	IdentifierDeclStatement	 
>271	IdentifierDecl	nbr = iter -> m_index
>272	AssignmentExpr	nbr = iter -> m_index
>273	PtrMemberAccess	iter -> m_index
>274	Identifier	m_index
>275	Identifier	iter
>276	Identifier	nbr
>277	Identifier	nbr
>278	IdentifierDeclType	int
>279	IncDecOp	 
>280	IncDec	++
>281	Identifier	iter
>282	Condition	 
>283	EqualityExpression	iter != nbrs . end ( )
>284	CallExpression	nbrs . end ( )
>285	ArgumentList	 
>286	Callee	nbrs . end
>287	MemberAccess	nbrs . end
>288	Identifier	end
>289	Identifier	nbrs
>290	Identifier	iter
>291	ForInit	 
>292	AssignmentExpr	iter = nbrs . begin ( )
>293	CallExpression	nbrs . begin ( )
>294	ArgumentList	 
>295	Callee	nbrs . begin
>296	MemberAccess	nbrs . begin
>297	Identifier	begin
>298	Identifier	nbrs
>299	Identifier	iter
>300	IdentifierDeclStatement	 
>301	IdentifierDecl	iter
>302	Identifier	iter
>303	IdentifierDeclType	MatchAdjList 
>304	ExpressionStatement	 
>305	CallExpression	fwrite ( & num_nbrs , sizeof ( int ) , 1 , f )
>306	ArgumentList	& num_nbrs
>307	Argument	f
>308	Identifier	f
>309	Argument	1
>310	PrimaryExpression	1
>311	Argument	sizeof ( int )
>312	SizeofExpr	sizeof ( int )
>313	SizeofOperand	int
>314	Sizeof	sizeof
>315	Argument	& num_nbrs
>316	UnaryOp	& num_nbrs
>317	Identifier	num_nbrs
>318	UnaryOperator	&
>319	Callee	fwrite
>320	Identifier	fwrite
>321	IdentifierDeclStatement	 
>322	IdentifierDecl	num_nbrs = ( int ) nbrs . size ( )
>323	AssignmentExpr	num_nbrs = ( int ) nbrs . size ( )
>324	CastExpression	( int ) nbrs . size ( )
>325	CallExpression	nbrs . size ( )
>326	ArgumentList	 
>327	Callee	nbrs . size
>328	MemberAccess	nbrs . size
>329	Identifier	size
>330	Identifier	nbrs
>331	CastTarget	int
>332	Identifier	num_nbrs
>333	Identifier	num_nbrs
>334	IdentifierDeclType	int
>335	IdentifierDeclStatement	 
>336	IdentifierDecl	& nbrs = m_matches . GetNeighbors ( i )
>337	AssignmentExpr	& nbrs = m_matches . GetNeighbors ( i )
>338	CallExpression	m_matches . GetNeighbors ( i )
>339	ArgumentList	i
>340	Argument	i
>341	Identifier	i
>342	Callee	m_matches . GetNeighbors
>343	MemberAccess	m_matches . GetNeighbors
>344	Identifier	GetNeighbors
>345	Identifier	m_matches
>346	Identifier	nbrs
>347	Identifier	nbrs
>348	IdentifierDeclType	MatchAdjList &
>349	IncDecOp	 
>350	IncDec	++
>351	Identifier	i
>352	Condition	 
>353	RelationalExpression	i < num_images
>354	Identifier	num_images
>355	Identifier	i
>356	ForInit	 
>357	IdentifierDeclStatement	int i = 0 ;
>358	IdentifierDecl	i = 0
>359	AssignmentExpr	i = 0
>360	PrimaryExpression	0
>361	Identifier	i
>362	Identifier	i
>363	IdentifierDeclType	int
>364	ExpressionStatement	 
>365	CallExpression	fwrite ( & num_images , sizeof ( int ) , 1 , f )
>366	ArgumentList	& num_images
>367	Argument	f
>368	Identifier	f
>369	Argument	1
>370	PrimaryExpression	1
>371	Argument	sizeof ( int )
>372	SizeofExpr	sizeof ( int )
>373	SizeofOperand	int
>374	Sizeof	sizeof
>375	Argument	& num_images
>376	UnaryOp	& num_images
>377	Identifier	num_images
>378	UnaryOperator	&
>379	Callee	fwrite
>380	Identifier	fwrite
>381	IdentifierDeclStatement	 
>382	IdentifierDecl	num_images = GetNumImages ( )
>383	AssignmentExpr	num_images = GetNumImages ( )
>384	CallExpression	GetNumImages ( )
>385	ArgumentList	 
>386	Callee	GetNumImages
>387	Identifier	GetNumImages
>388	Identifier	num_images
>389	Identifier	num_images
>390	IdentifierDeclType	int
>391	IfStatement	if ( ! f )
>392	CompoundStatement	 
>393	ReturnStatement	 
>394	ExpressionStatement	 
>395	CallExpression	printf ( \"[WriteTrackPairs] Error opening file %s for writing\n\" , filename )
>396	ArgumentList	\"[WriteTrackPairs] Error opening file %s for writing\n\"
>397	Argument	filename
>398	Identifier	filename
>399	Argument	\"[WriteTrackPairs] Error opening file %s for writing\n\"
>400	PrimaryExpression	\"[WriteTrackPairs] Error opening file %s for writing\n\"
>401	Callee	printf
>402	Identifier	printf
>403	Condition	 
>404	UnaryOp	! f
>405	Identifier	f
>406	UnaryOperator	!
>407	IdentifierDeclStatement	 
>408	IdentifierDecl	* f = fopen ( filename , \"wb\" )
>409	AssignmentExpr	* f = fopen ( filename , \"wb\" )
>410	CallExpression	fopen ( filename , \"wb\" )
>411	ArgumentList	filename
>412	Argument	\"wb\"
>413	PrimaryExpression	\"wb\"
>414	Argument	filename
>415	Identifier	filename
>416	Callee	fopen
>417	Identifier	fopen
>418	Identifier	f
>419	Identifier	f
>420	IdentifierDeclType	FILE *
>444	FunctionDef	BaseApp 
>445	ParameterList	const char * filename
>446	Parameter	 
>447	Identifier	filename
>448	ParameterType	const char *
>449	ReturnType	void
>450	CompoundStatement	 
>451	ExpressionStatement	 
>452	CallExpression	fclose ( f )
>453	ArgumentList	f
>454	Argument	f
>455	Identifier	f
>456	Callee	fclose
>457	Identifier	fclose
>458	IfStatement	if ( ! ReadTrackPairs ( \"track-pairs.txt\" ) )
>459	CompoundStatement	 
>460	ExpressionStatement	 
>461	Statement	 
>462	Statement	 
>463	Statement	 
>464	Statement	 
>465	Statement	 
>466	Statement	 
>467	Statement	 
>468	Statement	 
>469	Statement	 
>470	Statement	 
>471	Statement	 
>472	Statement	 
>473	Statement	 
>474	Statement	 
>475	Statement	 
>476	Statement	 
>477	ExpressionStatement	 
>478	AssignmentExpr	end = clock ( )
>479	CallExpression	clock ( )
>480	ArgumentList	 
>481	Callee	clock
>482	Identifier	clock
>483	Identifier	end
>484	ExpressionStatement	 
>485	CallExpression	WriteTrackPairs ( \"track-pairs.txt\" )
>486	ArgumentList	\"track-pairs.txt\"
>487	Argument	\"track-pairs.txt\"
>488	PrimaryExpression	\"track-pairs.txt\"
>489	Callee	WriteTrackPairs
>490	Identifier	WriteTrackPairs
>491	ForStatement	for ( int i = 0 ; i < num_tracks ; i ++ )
>492	CompoundStatement	 
>493	ForStatement	for ( iter1 = track . m_views . begin ( ) ; iter1 != track . m_views . end ( ) ; iter1 ++ )
>494	CompoundStatement	 
>495	ForStatement	for ( iter2 = iter1 + 1 ; iter2 != track . m_views . end ( ) ; iter2 ++ )
>496	CompoundStatement	 
>497	IfStatement	if ( img1 < img2 )
>498	CompoundStatement	 
>499	ExpressionStatement	 
>500	CallExpression	SetMatch ( img2 , img1 )
>501	ArgumentList	img2
>502	Argument	img1
>503	Identifier	img1
>504	Argument	img2
>505	Identifier	img2
>506	Callee	SetMatch
>507	Identifier	SetMatch
>508	ExpressionStatement	 
>509	CallExpression	SetMatch ( img1 , img2 )
>510	ArgumentList	img1
>511	Argument	img2
>512	Identifier	img2
>513	Argument	img1
>514	Identifier	img1
>515	Callee	SetMatch
>516	Identifier	SetMatch
>517	Condition	 
>518	RelationalExpression	img1 < img2
>519	Identifier	img2
>520	Identifier	img1
>521	IdentifierDeclStatement	 
>522	IdentifierDecl	img2 = iter2 -> first
>523	AssignmentExpr	img2 = iter2 -> first
>524	PtrMemberAccess	iter2 -> first
>525	Identifier	first
>526	Identifier	iter2
>527	Identifier	img2
>528	Identifier	img2
>529	IdentifierDeclType	int
>530	IncDecOp	 
>531	IncDec	++
>532	Identifier	iter2
>533	Condition	 
>534	EqualityExpression	iter2 != track . m_views . end ( )
>535	CallExpression	track . m_views . end ( )
>536	ArgumentList	 
>537	Callee	track . m_views . end
>538	MemberAccess	track . m_views . end
>539	Identifier	end
>540	MemberAccess	track . m_views
>541	Identifier	m_views
>542	Identifier	track
>543	Identifier	iter2
>544	ForInit	 
>545	AssignmentExpr	iter2 = iter1 + 1
>546	AdditiveExpression	iter1 + 1
>547	PrimaryExpression	1
>548	Identifier	iter1
>549	Identifier	iter2
>550	IdentifierDeclStatement	 
>551	IdentifierDecl	img1 = iter1 -> first
>552	AssignmentExpr	img1 = iter1 -> first
>553	PtrMemberAccess	iter1 -> first
>554	Identifier	first
>555	Identifier	iter1
>556	Identifier	img1
>557	Identifier	img1
>558	IdentifierDeclType	int
>559	IncDecOp	 
>560	IncDec	++
>561	Identifier	iter1
>562	Condition	 
>563	EqualityExpression	iter1 != track . m_views . end ( )
>564	CallExpression	track . m_views . end ( )
>565	ArgumentList	 
>566	Callee	track . m_views . end
>567	MemberAccess	track . m_views . end
>568	Identifier	end
>569	MemberAccess	track . m_views
>570	Identifier	m_views
>571	Identifier	track
>572	Identifier	iter1
>573	ForInit	 
>574	AssignmentExpr	iter1 = track . m_views . begin ( )
>575	CallExpression	track . m_views . begin ( )
>576	ArgumentList	 
>577	Callee	track . m_views . begin
>578	MemberAccess	track . m_views . begin
>579	Identifier	begin
>580	MemberAccess	track . m_views
>581	Identifier	m_views
>582	Identifier	track
>583	Identifier	iter1
>584	IdentifierDeclStatement	 
>585	IdentifierDecl	iter2
>586	Identifier	iter2
>587	IdentifierDeclType	ImageKeyVector 
>588	IdentifierDecl	iter1
>589	Identifier	iter1
>590	IdentifierDeclType	ImageKeyVector 
>591	IdentifierDeclStatement	 
>592	IdentifierDecl	& track = m_track_data [ i ]
>593	AssignmentExpr	& track = m_track_data [ i ]
>594	ArrayIndexing	m_track_data [ i ]
>595	Identifier	i
>596	Identifier	m_track_data
>597	Identifier	track
>598	Identifier	track
>599	IdentifierDeclType	TrackData &
>600	IfStatement	if ( ( i % 10000 ) == 0 )
>601	CompoundStatement	 
>602	ExpressionStatement	 
>603	CallExpression	fflush ( stdout )
>604	ArgumentList	stdout
>605	Argument	stdout
>606	Identifier	stdout
>607	Callee	fflush
>608	Identifier	fflush
>609	ExpressionStatement	 
>610	Statement	 
>611	Statement	 
>612	Statement	 
>613	Statement	 
>614	Statement	 
>615	Statement	 
>616	Statement	 
>617	Condition	 
>618	EqualityExpression	( i % 10000 ) == 0
>619	PrimaryExpression	0
>620	MultiplicativeExpression	i % 10000
>621	PrimaryExpression	10000
>622	Identifier	i
>623	IncDecOp	 
>624	IncDec	++
>625	Identifier	i
>626	Condition	 
>627	RelationalExpression	i < num_tracks
>628	Identifier	num_tracks
>629	Identifier	i
>630	ForInit	 
>631	IdentifierDeclStatement	int i = 0 ;
>632	IdentifierDecl	i = 0
>633	AssignmentExpr	i = 0
>634	PrimaryExpression	0
>635	Identifier	i
>636	Identifier	i
>637	IdentifierDeclType	int
>638	ExpressionStatement	 
>639	AssignmentExpr	num_tracks = ( int ) m_track_data . size ( )
>640	CastExpression	( int ) m_track_data . size ( )
>641	CallExpression	m_track_data . size ( )
>642	ArgumentList	 
>643	Callee	m_track_data . size
>644	MemberAccess	m_track_data . size
>645	Identifier	size
>646	Identifier	m_track_data
>647	CastTarget	int
>648	Identifier	num_tracks
>649	ExpressionStatement	 
>650	AssignmentExpr	start = clock ( )
>651	CallExpression	clock ( )
>652	ArgumentList	 
>653	Callee	clock
>654	Identifier	clock
>655	Identifier	start
>656	Condition	 
>657	UnaryOp	! ReadTrackPairs ( \"track-pairs.txt\" )
>658	CallExpression	ReadTrackPairs ( \"track-pairs.txt\" )
>659	ArgumentList	\"track-pairs.txt\"
>660	Argument	\"track-pairs.txt\"
>661	PrimaryExpression	\"track-pairs.txt\"
>662	Callee	ReadTrackPairs
>663	Identifier	ReadTrackPairs
>664	UnaryOperator	!
>665	ExpressionStatement	 
>666	CallExpression	printf ( \"[ReadGeometricConstraints] Reading tracks took %0.3fs\n\" , ( double ) ( end - start ) / CLOCKS_PER_SEC )
>667	ArgumentList	\"[ReadGeometricConstraints] Reading tracks took %0.3fs\n\"
>668	Argument	( double ) ( end - start ) / CLOCKS_PER_SEC
>669	MultiplicativeExpression	( double ) ( end - start ) / CLOCKS_PER_SEC
>670	Identifier	CLOCKS_PER_SEC
>671	CastExpression	( double ) ( end - start )
>672	AdditiveExpression	end - start
>673	Identifier	start
>674	Identifier	end
>675	CastTarget	double
>676	Argument	\"[ReadGeometricConstraints] Reading tracks took %0.3fs\n\"
>677	PrimaryExpression	\"[ReadGeometricConstraints] Reading tracks took %0.3fs\n\"
>678	Callee	printf
>679	Identifier	printf
>680	IdentifierDeclStatement	 
>681	IdentifierDecl	end = clock ( )
>682	AssignmentExpr	end = clock ( )
>683	CallExpression	clock ( )
>684	ArgumentList	 
>685	Callee	clock
>686	Identifier	clock
>687	Identifier	end
>688	Identifier	end
>689	IdentifierDeclType	clock_t
>690	ForStatement	for ( int i = 0 ; i < num_tracks ; i ++ )
>691	CompoundStatement	 
>692	ExpressionStatement	 
>693	IncDecOp	count ++
>694	IncDec	++
>695	Identifier	count
>696	ExpressionStatement	 
>697	CallExpression	m_track_data . push_back ( track )
>698	ArgumentList	track
>699	Argument	track
>700	Identifier	track
>701	Callee	m_track_data . push_back
>702	MemberAccess	m_track_data . push_back
>703	Identifier	push_back
>704	Identifier	m_track_data
>705	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>706	CompoundStatement	 
>707	ExpressionStatement	 
>708	CallExpression	m_image_data [ img ] . m_visible_keys . push_back ( key )
>709	ArgumentList	key
>710	Argument	key
>711	Identifier	key
>712	Callee	m_image_data [ img ] . m_visible_keys . push_back
>713	MemberAccess	m_image_data [ img ] . m_visible_keys . push_back
>714	Identifier	push_back
>715	MemberAccess	m_image_data [ img ] . m_visible_keys
>716	Identifier	m_visible_keys
>717	ArrayIndexing	m_image_data [ img ]
>718	Identifier	img
>719	Identifier	m_image_data
>720	ExpressionStatement	 
>721	CallExpression	m_image_data [ img ] . m_visible_points . push_back ( count )
>722	ArgumentList	count
>723	Argument	count
>724	Identifier	count
>725	Callee	m_image_data [ img ] . m_visible_points . push_back
>726	MemberAccess	m_image_data [ img ] . m_visible_points . push_back
>727	Identifier	push_back
>728	MemberAccess	m_image_data [ img ] . m_visible_points
>729	Identifier	m_visible_points
>730	ArrayIndexing	m_image_data [ img ]
>731	Identifier	img
>732	Identifier	m_image_data
>733	IdentifierDeclStatement	 
>734	IdentifierDecl	key = track . m_views [ j ] . second
>735	AssignmentExpr	key = track . m_views [ j ] . second
>736	MemberAccess	track . m_views [ j ] . second
>737	Identifier	second
>738	ArrayIndexing	track . m_views [ j ]
>739	Identifier	j
>740	MemberAccess	track . m_views
>741	Identifier	m_views
>742	Identifier	track
>743	Identifier	key
>744	Identifier	key
>745	IdentifierDeclType	int
>746	IdentifierDeclStatement	 
>747	IdentifierDecl	img = track . m_views [ j ] . first
>748	AssignmentExpr	img = track . m_views [ j ] . first
>749	MemberAccess	track . m_views [ j ] . first
>750	Identifier	first
>751	ArrayIndexing	track . m_views [ j ]
>752	Identifier	j
>753	MemberAccess	track . m_views
>754	Identifier	m_views
>755	Identifier	track
>756	Identifier	img
>757	Identifier	img
>758	IdentifierDeclType	int
>759	IncDecOp	 
>760	IncDec	++
>761	Identifier	j
>762	Condition	 
>763	RelationalExpression	j < num_views
>764	Identifier	num_views
>765	Identifier	j
>766	ForInit	 
>767	IdentifierDeclStatement	int j = 0 ;
>768	IdentifierDecl	j = 0
>769	AssignmentExpr	j = 0
>770	PrimaryExpression	0
>771	Identifier	j
>772	Identifier	j
>773	IdentifierDeclType	int
>774	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>775	CompoundStatement	 
>776	ExpressionStatement	 
>777	AssignmentExpr	GetKey ( img , key ) . m_track = i
>778	Identifier	i
>779	MemberAccess	GetKey ( img , key ) . m_track
>780	Identifier	m_track
>781	CallExpression	GetKey ( img , key )
>782	ArgumentList	img
>783	Argument	key
>784	Identifier	key
>785	Argument	img
>786	Identifier	img
>787	Callee	GetKey
>788	Identifier	GetKey
>789	IdentifierDeclStatement	 
>790	IdentifierDecl	key = track . m_views [ j ] . second
>791	AssignmentExpr	key = track . m_views [ j ] . second
>792	MemberAccess	track . m_views [ j ] . second
>793	Identifier	second
>794	ArrayIndexing	track . m_views [ j ]
>795	Identifier	j
>796	MemberAccess	track . m_views
>797	Identifier	m_views
>798	Identifier	track
>799	Identifier	key
>800	Identifier	key
>801	IdentifierDeclType	int
>802	IdentifierDeclStatement	 
>803	IdentifierDecl	img = track . m_views [ j ] . first
>804	AssignmentExpr	img = track . m_views [ j ] . first
>805	MemberAccess	track . m_views [ j ] . first
>806	Identifier	first
>807	ArrayIndexing	track . m_views [ j ]
>808	Identifier	j
>809	MemberAccess	track . m_views
>810	Identifier	m_views
>811	Identifier	track
>812	Identifier	img
>813	Identifier	img
>814	IdentifierDeclType	int
>815	IncDecOp	 
>816	IncDec	++
>817	Identifier	j
>818	Condition	 
>819	RelationalExpression	j < num_views
>820	Identifier	num_views
>821	Identifier	j
>822	ForInit	 
>823	IdentifierDeclStatement	int j = 0 ;
>824	IdentifierDecl	j = 0
>825	AssignmentExpr	j = 0
>826	PrimaryExpression	0
>827	Identifier	j
>828	Identifier	j
>829	IdentifierDeclType	int
>830	IfStatement	if ( num_views > m_max_track_views )
>831	ContinueStatement	 
>832	Condition	 
>833	RelationalExpression	num_views > m_max_track_views
>834	Identifier	m_max_track_views
>835	Identifier	num_views
>836	IfStatement	if ( num_views < m_min_track_views )
>837	ContinueStatement	 
>838	Condition	 
>839	RelationalExpression	num_views < m_min_track_views
>840	Identifier	m_min_track_views
>841	Identifier	num_views
>842	IdentifierDeclStatement	 
>843	IdentifierDecl	num_views = ( int ) track . m_views . size ( )
>844	AssignmentExpr	num_views = ( int ) track . m_views . size ( )
>845	CastExpression	( int ) track . m_views . size ( )
>846	CallExpression	track . m_views . size ( )
>847	ArgumentList	 
>848	Callee	track . m_views . size
>849	MemberAccess	track . m_views . size
>850	Identifier	size
>851	MemberAccess	track . m_views
>852	Identifier	m_views
>853	Identifier	track
>854	CastTarget	int
>855	Identifier	num_views
>856	Identifier	num_views
>857	IdentifierDeclType	int
>858	ExpressionStatement	 
>859	CallExpression	track . Read ( f )
>860	ArgumentList	f
>861	Argument	f
>862	Identifier	f
>863	Callee	track . Read
>864	MemberAccess	track . Read
>865	Identifier	Read
>866	Identifier	track
>867	IdentifierDeclStatement	 
>868	IdentifierDecl	track
>869	Identifier	track
>870	IdentifierDeclType	TrackData
>871	IncDecOp	 
>872	IncDec	++
>873	Identifier	i
>874	Condition	 
>875	RelationalExpression	i < num_tracks
>876	Identifier	num_tracks
>877	Identifier	i
>878	ForInit	 
>879	IdentifierDeclStatement	int i = 0 ;
>880	IdentifierDecl	i = 0
>881	AssignmentExpr	i = 0
>882	PrimaryExpression	0
>883	Identifier	i
>884	Identifier	i
>885	IdentifierDeclType	int
>886	IdentifierDeclStatement	 
>887	IdentifierDecl	count = 0
>888	AssignmentExpr	count = 0
>889	PrimaryExpression	0
>890	Identifier	count
>891	Identifier	count
>892	IdentifierDeclType	int
>893	IdentifierDeclStatement	 
>894	IdentifierDecl	start = clock ( )
>895	AssignmentExpr	start = clock ( )
>896	CallExpression	clock ( )
>897	ArgumentList	 
>898	Callee	clock
>899	Identifier	clock
>900	Identifier	start
>901	Identifier	start
>902	IdentifierDeclType	clock_t
>903	ExpressionStatement	 
>904	CallExpression	m_track_data . clear ( )
>905	ArgumentList	 
>906	Callee	m_track_data . clear
>907	MemberAccess	m_track_data . clear
>908	Identifier	clear
>909	Identifier	m_track_data
>910	ExpressionStatement	 
>911	CallExpression	printf ( \"[ReadGeometricConstraints] Reading %d tracks\n\" , num_tracks )
>912	ArgumentList	\"[ReadGeometricConstraints] Reading %d tracks\n\"
>913	Argument	num_tracks
>914	Identifier	num_tracks
>915	Argument	\"[ReadGeometricConstraints] Reading %d tracks\n\"
>916	PrimaryExpression	\"[ReadGeometricConstraints] Reading %d tracks\n\"
>917	Callee	printf
>918	Identifier	printf
>919	ExpressionStatement	 
>920	CallExpression	fscanf ( f , \"%d\" , & num_tracks )
>921	ArgumentList	f
>922	Argument	& num_tracks
>923	UnaryOp	& num_tracks
>924	Identifier	num_tracks
>925	UnaryOperator	&
>926	Argument	\"%d\"
>927	PrimaryExpression	\"%d\"
>928	Argument	f
>929	Identifier	f
>930	Callee	fscanf
>931	Identifier	fscanf
>932	IdentifierDeclStatement	 
>933	IdentifierDecl	num_tracks = 0
>934	AssignmentExpr	num_tracks = 0
>935	PrimaryExpression	0
>936	Identifier	num_tracks
>937	Identifier	num_tracks
>938	IdentifierDeclType	int
>939	ForStatement	for ( unsigned long int count = 0 ; count < num_transforms ; count ++ )
>940	CompoundStatement	 
>941	ForStatement	for ( int k = 0 ; k < num_matches ; k ++ )
>942	CompoundStatement	 
>943	ExpressionStatement	 
>944	CallExpression	m_match_lists [ idx ] . push_back ( match )
>945	ArgumentList	match
>946	Argument	match
>947	Identifier	match
>948	Callee	m_match_lists [ idx ] . push_back
>949	MemberAccess	m_match_lists [ idx ] . push_back
>950	Identifier	push_back
>951	ArrayIndexing	m_match_lists [ idx ]
>952	Identifier	idx
>953	Identifier	m_match_lists
>954	ExpressionStatement	 
>955	AssignmentExpr	match . m_idx2 = idx2
>956	Identifier	idx2
>957	MemberAccess	match . m_idx2
>958	Identifier	m_idx2
>959	Identifier	match
>960	ExpressionStatement	 
>961	AssignmentExpr	match . m_idx1 = idx1
>962	Identifier	idx1
>963	MemberAccess	match . m_idx1
>964	Identifier	m_idx1
>965	Identifier	match
>966	IdentifierDeclStatement	 
>967	IdentifierDecl	match
>968	Identifier	match
>969	IdentifierDeclType	KeypointMatch
>970	ExpressionStatement	 
>971	CallExpression	fscanf ( f , \"%d %d\n\" , & idx1 , & idx2 )
>972	ArgumentList	f
>973	Argument	& idx2
>974	UnaryOp	& idx2
>975	Identifier	idx2
>976	UnaryOperator	&
>977	Argument	& idx1
>978	UnaryOp	& idx1
>979	Identifier	idx1
>980	UnaryOperator	&
>981	Argument	\"%d %d\n\"
>982	PrimaryExpression	\"%d %d\n\"
>983	Argument	f
>984	Identifier	f
>985	Callee	fscanf
>986	Identifier	fscanf
>987	IdentifierDeclStatement	 
>988	IdentifierDecl	idx2
>989	Identifier	idx2
>990	IdentifierDeclType	int
>991	IdentifierDecl	idx1
>992	Identifier	idx1
>993	IdentifierDeclType	int
>994	IncDecOp	 
>995	IncDec	++
>996	Identifier	k
>997	Condition	 
>998	RelationalExpression	k < num_matches
>999	Identifier	num_matches
>1000	Identifier	k
>1001	ForInit	 
>1002	IdentifierDeclStatement	int k = 0 ;
>1003	IdentifierDecl	k = 0
>1004	AssignmentExpr	k = 0
>1005	PrimaryExpression	0
>1006	Identifier	k
>1007	Identifier	k
>1008	IdentifierDeclType	int
>1009	ExpressionStatement	 
>1010	CallExpression	fscanf ( f , \"%d\n\" , & num_matches )
>1011	ArgumentList	f
>1012	Argument	& num_matches
>1013	UnaryOp	& num_matches
>1014	Identifier	num_matches
>1015	UnaryOperator	&
>1016	Argument	\"%d\n\"
>1017	PrimaryExpression	\"%d\n\"
>1018	Argument	f
>1019	Identifier	f
>1020	Callee	fscanf
>1021	Identifier	fscanf
>1022	IdentifierDeclStatement	 
>1023	IdentifierDecl	num_matches
>1024	Identifier	num_matches
>1025	IdentifierDeclType	int
>1026	ExpressionStatement	 
>1027	CallExpression	m_transforms [ idx ] . ReadFromFile ( f )
>1028	ArgumentList	f
>1029	Argument	f
>1030	Identifier	f
>1031	Callee	m_transforms [ idx ] . ReadFromFile
>1032	MemberAccess	m_transforms [ idx ] . ReadFromFile
>1033	Identifier	ReadFromFile
>1034	ArrayIndexing	m_transforms [ idx ]
>1035	Identifier	idx
>1036	Identifier	m_transforms
>1037	ExpressionStatement	 
>1038	AssignmentExpr	m_transforms [ idx ] = TransformInfo ( )
>1039	CallExpression	TransformInfo ( )
>1040	ArgumentList	 
>1041	Callee	TransformInfo
>1042	Identifier	TransformInfo
>1043	ArrayIndexing	m_transforms [ idx ]
>1044	Identifier	idx
>1045	Identifier	m_transforms
>1046	ExpressionStatement	 
>1047	CallExpression	SetMatch ( i , j )
>1048	ArgumentList	i
>1049	Argument	j
>1050	Identifier	j
>1051	Argument	i
>1052	Identifier	i
>1053	Callee	SetMatch
>1054	Identifier	SetMatch
>1055	IdentifierDeclStatement	 
>1056	IdentifierDecl	idx = GetMatchIndex ( i , j )
>1057	AssignmentExpr	idx = GetMatchIndex ( i , j )
>1058	CallExpression	GetMatchIndex ( i , j )
>1059	ArgumentList	i
>1060	Argument	j
>1061	Identifier	j
>1062	Argument	i
>1063	Identifier	i
>1064	Callee	GetMatchIndex
>1065	Identifier	GetMatchIndex
>1066	Identifier	idx
>1067	Identifier	idx
>1068	IdentifierDeclType	MatchIndex
>1069	ExpressionStatement	 
>1070	CallExpression	fscanf ( f , \"%d %d\n\" , & i , & j )
>1071	ArgumentList	f
>1072	Argument	& j
>1073	UnaryOp	& j
>1074	Identifier	j
>1075	UnaryOperator	&
>1076	Argument	& i
>1077	UnaryOp	& i
>1078	Identifier	i
>1079	UnaryOperator	&
>1080	Argument	\"%d %d\n\"
>1081	PrimaryExpression	\"%d %d\n\"
>1082	Argument	f
>1083	Identifier	f
>1084	Callee	fscanf
>1085	Identifier	fscanf
>1086	IdentifierDeclStatement	 
>1087	IdentifierDecl	j
>1088	Identifier	j
>1089	IdentifierDeclType	int
>1090	IdentifierDecl	i
>1091	Identifier	i
>1092	IdentifierDeclType	int
>1093	IncDecOp	 
>1094	IncDec	++
>1095	Identifier	count
>1096	Condition	 
>1097	RelationalExpression	count < num_transforms
>1098	Identifier	num_transforms
>1099	Identifier	count
>1100	ForInit	 
>1101	IdentifierDeclStatement	unsigned long int count = 0 ;
>1102	IdentifierDecl	count = 0
>1103	AssignmentExpr	count = 0
>1104	PrimaryExpression	0
>1105	Identifier	count
>1106	Identifier	count
>1107	IdentifierDeclType	unsigned long int
>1108	ExpressionStatement	 
>1109	CallExpression	fscanf ( f , \"%llu\n\" , & num_transforms )
>1110	ArgumentList	f
>1111	Argument	& num_transforms
>1112	UnaryOp	& num_transforms
>1113	Identifier	num_transforms
>1114	UnaryOperator	&
>1115	Argument	\"%llu\n\"
>1116	PrimaryExpression	\"%llu\n\"
>1117	Argument	f
>1118	Identifier	f
>1119	Callee	fscanf
>1120	Identifier	fscanf
>1121	IdentifierDeclStatement	 
>1122	IdentifierDecl	num_transforms
>1123	Identifier	num_transforms
>1124	IdentifierDeclType	unsigned long long
>1125	ExpressionStatement	 
>1126	CallExpression	RemoveAllMatches ( )
>1127	ArgumentList	 
>1128	Callee	RemoveAllMatches
>1129	Identifier	RemoveAllMatches
>1130	ExpressionStatement	 
>1131	CallExpression	m_transforms . clear ( )
>1132	ArgumentList	 
>1133	Callee	m_transforms . clear
>1134	MemberAccess	m_transforms . clear
>1135	Identifier	clear
>1136	Identifier	m_transforms
>1137	IfStatement	if ( m_transforms == NULL )
>1138	CompoundStatement	 
>1139	ForStatement	for ( int i = 0 ; i < num_images * num_images ; i ++ )
>1140	CompoundStatement	 
>1141	ExpressionStatement	 
>1142	AssignmentExpr	m_transforms [ i ] = NULL
>1143	Identifier	NULL
>1144	ArrayIndexing	m_transforms [ i ]
>1145	Identifier	i
>1146	Identifier	m_transforms
>1147	IncDecOp	 
>1148	IncDec	++
>1149	Identifier	i
>1150	Condition	 
>1151	RelationalExpression	i < num_images * num_images
>1152	MultiplicativeExpression	num_images * num_images
>1153	Identifier	num_images
>1154	Identifier	num_images
>1155	Identifier	i
>1156	ForInit	 
>1157	IdentifierDeclStatement	int i = 0 ;
>1158	IdentifierDecl	i = 0
>1159	AssignmentExpr	i = 0
>1160	PrimaryExpression	0
>1161	Identifier	i
>1162	Identifier	i
>1163	IdentifierDeclType	int
>1164	ExpressionStatement	 
>1165	Statement	 
>1166	Statement	 
>1167	Statement	 
>1168	Statement	 
>1169	Statement	 
>1170	Statement	 
>1171	Statement	 
>1172	Statement	 
>1173	Statement	 
>1174	Statement	 
>1175	Condition	 
>1176	EqualityExpression	m_transforms == NULL
>1177	Identifier	NULL
>1178	Identifier	m_transforms
>1179	IfStatement	if ( num_images != GetNumImages ( ) )
>1180	CompoundStatement	 
>1181	ReturnStatement	 
>1182	ExpressionStatement	 
>1183	Statement	 
>1184	Statement	 
>1185	Statement	 
>1186	Statement	 
>1187	Statement	 
>1188	Condition	 
>1189	EqualityExpression	num_images != GetNumImages ( )
>1190	CallExpression	GetNumImages ( )
>1191	ArgumentList	 
>1192	Callee	GetNumImages
>1193	Identifier	GetNumImages
>1194	Identifier	num_images
>1195	ExpressionStatement	 
>1196	CallExpression	fscanf ( f , \"%d\n\" , & num_images )
>1197	ArgumentList	f
>1198	Argument	& num_images
>1199	UnaryOp	& num_images
>1200	Identifier	num_images
>1201	UnaryOperator	&
>1202	Argument	\"%d\n\"
>1203	PrimaryExpression	\"%d\n\"
>1204	Argument	f
>1205	Identifier	f
>1206	Callee	fscanf
>1207	Identifier	fscanf
>1208	IdentifierDeclStatement	 
>1209	IdentifierDecl	num_images
>1210	Identifier	num_images
>1211	IdentifierDeclType	int
>1212	IdentifierDeclStatement	 
>1213	IdentifierDecl	* f = fopen ( filename , \"r\" )
>1214	AssignmentExpr	* f = fopen ( filename , \"r\" )
>1215	CallExpression	fopen ( filename , \"r\" )
>1216	ArgumentList	filename
>1217	Argument	\"r\"
>1218	PrimaryExpression	\"r\"
>1219	Argument	filename
>1220	Identifier	filename
>1221	Callee	fopen
>1222	Identifier	fopen
>1223	Identifier	f
>1224	Identifier	f
>1225	IdentifierDeclType	FILE *
>1303	FunctionDef	BaseApp 
>1304	ParameterList	const char * filename
>1305	Parameter	 
>1306	Identifier	filename
>1307	ParameterType	const char *
>1308	ReturnType	void
>1309	CompoundStatement	 
>1310	ExpressionStatement	 
>1311	CallExpression	fclose ( f )
>1312	ArgumentList	f
>1313	Argument	f
>1314	Identifier	f
>1315	Callee	fclose
>1316	Identifier	fclose
>1317	ForStatement	for ( int i = 0 ; i < num_tracks ; i ++ )
>1318	CompoundStatement	 
>1319	ExpressionStatement	 
>1320	CallExpression	m_track_data [ i ] . Write ( f )
>1321	ArgumentList	f
>1322	Argument	f
>1323	Identifier	f
>1324	Callee	m_track_data [ i ] . Write
>1325	MemberAccess	m_track_data [ i ] . Write
>1326	Identifier	Write
>1327	ArrayIndexing	m_track_data [ i ]
>1328	Identifier	i
>1329	Identifier	m_track_data
>1330	IncDecOp	 
>1331	IncDec	++
>1332	Identifier	i
>1333	Condition	 
>1334	RelationalExpression	i < num_tracks
>1335	Identifier	num_tracks
>1336	Identifier	i
>1337	ForInit	 
>1338	IdentifierDeclStatement	int i = 0 ;
>1339	IdentifierDecl	i = 0
>1340	AssignmentExpr	i = 0
>1341	PrimaryExpression	0
>1342	Identifier	i
>1343	Identifier	i
>1344	IdentifierDeclType	int
>1345	ExpressionStatement	 
>1346	CallExpression	fprintf ( f , \"%d\n\" , num_tracks )
>1347	ArgumentList	f
>1348	Argument	num_tracks
>1349	Identifier	num_tracks
>1350	Argument	\"%d\n\"
>1351	PrimaryExpression	\"%d\n\"
>1352	Argument	f
>1353	Identifier	f
>1354	Callee	fprintf
>1355	Identifier	fprintf
>1356	IdentifierDeclStatement	 
>1357	IdentifierDecl	num_tracks = ( int ) m_track_data . size ( )
>1358	AssignmentExpr	num_tracks = ( int ) m_track_data . size ( )
>1359	CastExpression	( int ) m_track_data . size ( )
>1360	CallExpression	m_track_data . size ( )
>1361	ArgumentList	 
>1362	Callee	m_track_data . size
>1363	MemberAccess	m_track_data . size
>1364	Identifier	size
>1365	Identifier	m_track_data
>1366	CastTarget	int
>1367	Identifier	num_tracks
>1368	Identifier	num_tracks
>1369	IdentifierDeclType	int
>1370	ForStatement	for ( unsigned int i = 0 ; i < num_images ; i ++ )
>1371	CompoundStatement	 
>1372	ForStatement	for ( iter = nbrs . begin ( ) ; iter != nbrs . end ( ) ; iter ++ )
>1373	CompoundStatement	 
>1374	IfStatement	if ( m_transforms . find ( idx ) != m_transforms . end ( ) )
>1375	CompoundStatement	 
>1376	ForStatement	for ( int k = 0 ; k < num_matches ; k ++ )
>1377	CompoundStatement	 
>1378	ExpressionStatement	 
>1379	CallExpression	fprintf ( f , \"%d %d\n\" , m_match_lists [ idx ] [ k ] . m_idx1 , m_match_lists [ idx ] [ k ] . m_idx2 )
>1380	ArgumentList	f
>1381	Argument	m_match_lists [ idx ] [ k ] . m_idx2
>1382	MemberAccess	m_match_lists [ idx ] [ k ] . m_idx2
>1383	Identifier	m_idx2
>1384	ArrayIndexing	m_match_lists [ idx ] [ k ]
>1385	Identifier	k
>1386	ArrayIndexing	m_match_lists [ idx ]
>1387	Identifier	idx
>1388	Identifier	m_match_lists
>1389	Argument	m_match_lists [ idx ] [ k ] . m_idx1
>1390	MemberAccess	m_match_lists [ idx ] [ k ] . m_idx1
>1391	Identifier	m_idx1
>1392	ArrayIndexing	m_match_lists [ idx ] [ k ]
>1393	Identifier	k
>1394	ArrayIndexing	m_match_lists [ idx ]
>1395	Identifier	idx
>1396	Identifier	m_match_lists
>1397	Argument	\"%d %d\n\"
>1398	PrimaryExpression	\"%d %d\n\"
>1399	Argument	f
>1400	Identifier	f
>1401	Callee	fprintf
>1402	Identifier	fprintf
>1403	IncDecOp	 
>1404	IncDec	++
>1405	Identifier	k
>1406	Condition	 
>1407	RelationalExpression	k < num_matches
>1408	Identifier	num_matches
>1409	Identifier	k
>1410	ForInit	 
>1411	IdentifierDeclStatement	int k = 0 ;
>1412	IdentifierDecl	k = 0
>1413	AssignmentExpr	k = 0
>1414	PrimaryExpression	0
>1415	Identifier	k
>1416	Identifier	k
>1417	IdentifierDeclType	int
>1418	ExpressionStatement	 
>1419	CallExpression	fprintf ( f , \"%d\n\" , num_matches )
>1420	ArgumentList	f
>1421	Argument	num_matches
>1422	Identifier	num_matches
>1423	Argument	\"%d\n\"
>1424	PrimaryExpression	\"%d\n\"
>1425	Argument	f
>1426	Identifier	f
>1427	Callee	fprintf
>1428	Identifier	fprintf
>1429	IdentifierDeclStatement	 
>1430	IdentifierDecl	num_matches = ( int ) m_match_lists [ idx ] . size ( )
>1431	AssignmentExpr	num_matches = ( int ) m_match_lists [ idx ] . size ( )
>1432	CastExpression	( int ) m_match_lists [ idx ] . size ( )
>1433	CallExpression	m_match_lists [ idx ] . size ( )
>1434	ArgumentList	 
>1435	Callee	m_match_lists [ idx ] . size
>1436	MemberAccess	m_match_lists [ idx ] . size
>1437	Identifier	size
>1438	ArrayIndexing	m_match_lists [ idx ]
>1439	Identifier	idx
>1440	Identifier	m_match_lists
>1441	CastTarget	int
>1442	Identifier	num_matches
>1443	Identifier	num_matches
>1444	IdentifierDeclType	int
>1445	ExpressionStatement	 
>1446	CallExpression	m_transforms [ idx ] . WriteToFile ( f )
>1447	ArgumentList	f
>1448	Argument	f
>1449	Identifier	f
>1450	Callee	m_transforms [ idx ] . WriteToFile
>1451	MemberAccess	m_transforms [ idx ] . WriteToFile
>1452	Identifier	WriteToFile
>1453	ArrayIndexing	m_transforms [ idx ]
>1454	Identifier	idx
>1455	Identifier	m_transforms
>1456	IfStatement	if ( m_transforms . find ( idx ) == m_transforms . end ( ) )
>1457	CompoundStatement	 
>1458	ExpressionStatement	 
>1459	AssignmentExpr	m_transforms [ idx ] = TransformInfo ( )
>1460	CallExpression	TransformInfo ( )
>1461	ArgumentList	 
>1462	Callee	TransformInfo
>1463	Identifier	TransformInfo
>1464	ArrayIndexing	m_transforms [ idx ]
>1465	Identifier	idx
>1466	Identifier	m_transforms
>1467	Condition	 
>1468	EqualityExpression	m_transforms . find ( idx ) == m_transforms . end ( )
>1469	CallExpression	m_transforms . end ( )
>1470	ArgumentList	 
>1471	Callee	m_transforms . end
>1472	MemberAccess	m_transforms . end
>1473	Identifier	end
>1474	Identifier	m_transforms
>1475	CallExpression	m_transforms . find ( idx )
>1476	ArgumentList	idx
>1477	Argument	idx
>1478	Identifier	idx
>1479	Callee	m_transforms . find
>1480	MemberAccess	m_transforms . find
>1481	Identifier	find
>1482	Identifier	m_transforms
>1483	ExpressionStatement	 
>1484	CallExpression	fprintf ( f , \"%d %d\n\" , i , j )
>1485	ArgumentList	f
>1486	Argument	j
>1487	Identifier	j
>1488	Argument	i
>1489	Identifier	i
>1490	Argument	\"%d %d\n\"
>1491	PrimaryExpression	\"%d %d\n\"
>1492	Argument	f
>1493	Identifier	f
>1494	Callee	fprintf
>1495	Identifier	fprintf
>1496	Condition	 
>1497	EqualityExpression	m_transforms . find ( idx ) != m_transforms . end ( )
>1498	CallExpression	m_transforms . end ( )
>1499	ArgumentList	 
>1500	Callee	m_transforms . end
>1501	MemberAccess	m_transforms . end
>1502	Identifier	end
>1503	Identifier	m_transforms
>1504	CallExpression	m_transforms . find ( idx )
>1505	ArgumentList	idx
>1506	Argument	idx
>1507	Identifier	idx
>1508	Callee	m_transforms . find
>1509	MemberAccess	m_transforms . find
>1510	Identifier	find
>1511	Identifier	m_transforms
>1512	IdentifierDeclStatement	 
>1513	IdentifierDecl	idx = GetMatchIndex ( i , j )
>1514	AssignmentExpr	idx = GetMatchIndex ( i , j )
>1515	CallExpression	GetMatchIndex ( i , j )
>1516	ArgumentList	i
>1517	Argument	j
>1518	Identifier	j
>1519	Argument	i
>1520	Identifier	i
>1521	Callee	GetMatchIndex
>1522	Identifier	GetMatchIndex
>1523	Identifier	idx
>1524	Identifier	idx
>1525	IdentifierDeclType	MatchIndex
>1526	IdentifierDeclStatement	 
>1527	IdentifierDecl	j = iter -> m_index
>1528	AssignmentExpr	j = iter -> m_index
>1529	PtrMemberAccess	iter -> m_index
>1530	Identifier	m_index
>1531	Identifier	iter
>1532	Identifier	j
>1533	Identifier	j
>1534	IdentifierDeclType	unsigned int
>1535	IncDecOp	 
>1536	IncDec	++
>1537	Identifier	iter
>1538	Condition	 
>1539	EqualityExpression	iter != nbrs . end ( )
>1540	CallExpression	nbrs . end ( )
>1541	ArgumentList	 
>1542	Callee	nbrs . end
>1543	MemberAccess	nbrs . end
>1544	Identifier	end
>1545	Identifier	nbrs
>1546	Identifier	iter
>1547	ForInit	 
>1548	AssignmentExpr	iter = nbrs . begin ( )
>1549	CallExpression	nbrs . begin ( )
>1550	ArgumentList	 
>1551	Callee	nbrs . begin
>1552	MemberAccess	nbrs . begin
>1553	Identifier	begin
>1554	Identifier	nbrs
>1555	Identifier	iter
>1556	IdentifierDeclStatement	 
>1557	IdentifierDecl	iter
>1558	Identifier	iter
>1559	IdentifierDeclType	MatchAdjList 
>1560	IdentifierDeclStatement	 
>1561	IdentifierDecl	& nbrs = m_matches . GetNeighbors ( i )
>1562	AssignmentExpr	& nbrs = m_matches . GetNeighbors ( i )
>1563	CallExpression	m_matches . GetNeighbors ( i )
>1564	ArgumentList	i
>1565	Argument	i
>1566	Identifier	i
>1567	Callee	m_matches . GetNeighbors
>1568	MemberAccess	m_matches . GetNeighbors
>1569	Identifier	GetNeighbors
>1570	Identifier	m_matches
>1571	Identifier	nbrs
>1572	Identifier	nbrs
>1573	IdentifierDeclType	MatchAdjList &
>1574	IncDecOp	 
>1575	IncDec	++
>1576	Identifier	i
>1577	Condition	 
>1578	RelationalExpression	i < num_images
>1579	Identifier	num_images
>1580	Identifier	i
>1581	ForInit	 
>1582	IdentifierDeclStatement	unsigned int i = 0 ;
>1583	IdentifierDecl	i = 0
>1584	AssignmentExpr	i = 0
>1585	PrimaryExpression	0
>1586	Identifier	i
>1587	Identifier	i
>1588	IdentifierDeclType	unsigned int
>1589	ExpressionStatement	 
>1590	CallExpression	fprintf ( f , \"%llu\n\" , num_transforms )
>1591	ArgumentList	f
>1592	Argument	num_transforms
>1593	Identifier	num_transforms
>1594	Argument	\"%llu\n\"
>1595	PrimaryExpression	\"%llu\n\"
>1596	Argument	f
>1597	Identifier	f
>1598	Callee	fprintf
>1599	Identifier	fprintf
>1600	ExpressionStatement	 
>1601	CallExpression	printf ( \"[WriteGeometricConstraints] Writing %llu transforms\n\" , num_transforms )
>1602	ArgumentList	\"[WriteGeometricConstraints] Writing %llu transforms\n\"
>1603	Argument	num_transforms
>1604	Identifier	num_transforms
>1605	Argument	\"[WriteGeometricConstraints] Writing %llu transforms\n\"
>1606	PrimaryExpression	\"[WriteGeometricConstraints] Writing %llu transforms\n\"
>1607	Callee	printf
>1608	Identifier	printf
>1609	ForStatement	for ( unsigned int i = 0 ; i < num_images ; i ++ )
>1610	CompoundStatement	 
>1611	ForStatement	for ( iter = nbrs . begin ( ) ; iter != nbrs . end ( ) ; iter ++ )
>1612	CompoundStatement	 
>1613	IfStatement	if ( m_transforms . find ( idx ) != m_transforms . end ( ) )
>1614	CompoundStatement	 
>1615	ExpressionStatement	 
>1616	IncDecOp	num_transforms ++
>1617	IncDec	++
>1618	Identifier	num_transforms
>1619	Condition	 
>1620	EqualityExpression	m_transforms . find ( idx ) != m_transforms . end ( )
>1621	CallExpression	m_transforms . end ( )
>1622	ArgumentList	 
>1623	Callee	m_transforms . end
>1624	MemberAccess	m_transforms . end
>1625	Identifier	end
>1626	Identifier	m_transforms
>1627	CallExpression	m_transforms . find ( idx )
>1628	ArgumentList	idx
>1629	Argument	idx
>1630	Identifier	idx
>1631	Callee	m_transforms . find
>1632	MemberAccess	m_transforms . find
>1633	Identifier	find
>1634	Identifier	m_transforms
>1635	IdentifierDeclStatement	 
>1636	IdentifierDecl	idx = GetMatchIndex ( i , j )
>1637	AssignmentExpr	idx = GetMatchIndex ( i , j )
>1638	CallExpression	GetMatchIndex ( i , j )
>1639	ArgumentList	i
>1640	Argument	j
>1641	Identifier	j
>1642	Argument	i
>1643	Identifier	i
>1644	Callee	GetMatchIndex
>1645	Identifier	GetMatchIndex
>1646	Identifier	idx
>1647	Identifier	idx
>1648	IdentifierDeclType	MatchIndex
>1649	IdentifierDeclStatement	 
>1650	IdentifierDecl	j = iter -> m_index
>1651	AssignmentExpr	j = iter -> m_index
>1652	PtrMemberAccess	iter -> m_index
>1653	Identifier	m_index
>1654	Identifier	iter
>1655	Identifier	j
>1656	Identifier	j
>1657	IdentifierDeclType	unsigned int
>1658	IncDecOp	 
>1659	IncDec	++
>1660	Identifier	iter
>1661	Condition	 
>1662	EqualityExpression	iter != nbrs . end ( )
>1663	CallExpression	nbrs . end ( )
>1664	ArgumentList	 
>1665	Callee	nbrs . end
>1666	MemberAccess	nbrs . end
>1667	Identifier	end
>1668	Identifier	nbrs
>1669	Identifier	iter
>1670	ForInit	 
>1671	AssignmentExpr	iter = nbrs . begin ( )
>1672	CallExpression	nbrs . begin ( )
>1673	ArgumentList	 
>1674	Callee	nbrs . begin
>1675	MemberAccess	nbrs . begin
>1676	Identifier	begin
>1677	Identifier	nbrs
>1678	Identifier	iter
>1679	IdentifierDeclStatement	 
>1680	IdentifierDecl	iter
>1681	Identifier	iter
>1682	IdentifierDeclType	MatchAdjList 
>1683	ExpressionStatement	 
>1684	CallExpression	printf ( \"num_nbrs[%d] = %d\n\" , i , num_nbrs )
>1685	ArgumentList	\"num_nbrs[%d] = %d\n\"
>1686	Argument	num_nbrs
>1687	Identifier	num_nbrs
>1688	Argument	i
>1689	Identifier	i
>1690	Argument	\"num_nbrs[%d] = %d\n\"
>1691	PrimaryExpression	\"num_nbrs[%d] = %d\n\"
>1692	Callee	printf
>1693	Identifier	printf
>1694	IdentifierDeclStatement	 
>1695	IdentifierDecl	num_nbrs = ( int ) nbrs . size ( )
>1696	AssignmentExpr	num_nbrs = ( int ) nbrs . size ( )
>1697	CastExpression	( int ) nbrs . size ( )
>1698	CallExpression	nbrs . size ( )
>1699	ArgumentList	 
>1700	Callee	nbrs . size
>1701	MemberAccess	nbrs . size
>1702	Identifier	size
>1703	Identifier	nbrs
>1704	CastTarget	int
>1705	Identifier	num_nbrs
>1706	Identifier	num_nbrs
>1707	IdentifierDeclType	int
>1708	IdentifierDeclStatement	 
>1709	IdentifierDecl	& nbrs = m_matches . GetNeighbors ( i )
>1710	AssignmentExpr	& nbrs = m_matches . GetNeighbors ( i )
>1711	CallExpression	m_matches . GetNeighbors ( i )
>1712	ArgumentList	i
>1713	Argument	i
>1714	Identifier	i
>1715	Callee	m_matches . GetNeighbors
>1716	MemberAccess	m_matches . GetNeighbors
>1717	Identifier	GetNeighbors
>1718	Identifier	m_matches
>1719	Identifier	nbrs
>1720	Identifier	nbrs
>1721	IdentifierDeclType	MatchAdjList &
>1722	IncDecOp	 
>1723	IncDec	++
>1724	Identifier	i
>1725	Condition	 
>1726	RelationalExpression	i < num_images
>1727	Identifier	num_images
>1728	Identifier	i
>1729	ForInit	 
>1730	IdentifierDeclStatement	unsigned int i = 0 ;
>1731	IdentifierDecl	i = 0
>1732	AssignmentExpr	i = 0
>1733	PrimaryExpression	0
>1734	Identifier	i
>1735	Identifier	i
>1736	IdentifierDeclType	unsigned int
>1737	IdentifierDeclStatement	 
>1738	IdentifierDecl	num_transforms = 0
>1739	AssignmentExpr	num_transforms = 0
>1740	PrimaryExpression	0
>1741	Identifier	num_transforms
>1742	Identifier	num_transforms
>1743	IdentifierDeclType	unsigned long long
>1744	ExpressionStatement	 
>1745	CallExpression	fprintf ( f , \"%d\n\" , num_images )
>1746	ArgumentList	f
>1747	Argument	num_images
>1748	Identifier	num_images
>1749	Argument	\"%d\n\"
>1750	PrimaryExpression	\"%d\n\"
>1751	Argument	f
>1752	Identifier	f
>1753	Callee	fprintf
>1754	Identifier	fprintf
>1755	IdentifierDeclStatement	 
>1756	IdentifierDecl	num_images = GetNumImages ( )
>1757	AssignmentExpr	num_images = GetNumImages ( )
>1758	CallExpression	GetNumImages ( )
>1759	ArgumentList	 
>1760	Callee	GetNumImages
>1761	Identifier	GetNumImages
>1762	Identifier	num_images
>1763	Identifier	num_images
>1764	IdentifierDeclType	unsigned int
>1765	IfStatement	if ( f == NULL )
>1766	CompoundStatement	 
>1767	ReturnStatement	 
>1768	ExpressionStatement	 
>1769	CallExpression	printf ( \"Error opening file %s for writing\n\" , filename )
>1770	ArgumentList	\"Error opening file %s for writing\n\"
>1771	Argument	filename
>1772	Identifier	filename
>1773	Argument	\"Error opening file %s for writing\n\"
>1774	PrimaryExpression	\"Error opening file %s for writing\n\"
>1775	Callee	printf
>1776	Identifier	printf
>1777	Condition	 
>1778	EqualityExpression	f == NULL
>1779	Identifier	NULL
>1780	Identifier	f
>1781	IdentifierDeclStatement	 
>1782	IdentifierDecl	* f = fopen ( filename , \"w\" )
>1783	AssignmentExpr	* f = fopen ( filename , \"w\" )
>1784	CallExpression	fopen ( filename , \"w\" )
>1785	ArgumentList	filename
>1786	Argument	\"w\"
>1787	PrimaryExpression	\"w\"
>1788	Argument	filename
>1789	Identifier	filename
>1790	Callee	fopen
>1791	Identifier	fopen
>1792	Identifier	f
>1793	Identifier	f
>1794	IdentifierDeclType	FILE *
>1840	FunctionDef	BaseApp 
>1841	ParameterList	char * filename
>1842	Parameter	 
>1843	Identifier	filename
>1844	ParameterType	char *
>1845	ReturnType	void
>1846	CompoundStatement	 
>1847	ExpressionStatement	 
>1848	CallExpression	fclose ( f )
>1849	ArgumentList	f
>1850	Argument	f
>1851	Identifier	f
>1852	Callee	fclose
>1853	Identifier	fclose
>1854	ForStatement	for ( int i = 0 ; i < num_tracks ; i ++ )
>1855	CompoundStatement	 
>1856	ExpressionStatement	 
>1857	CallExpression	fprintf ( f , \"\n\" )
>1858	ArgumentList	f
>1859	Argument	\"\n\"
>1860	PrimaryExpression	\"\n\"
>1861	Argument	f
>1862	Identifier	f
>1863	Callee	fprintf
>1864	Identifier	fprintf
>1865	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>1866	CompoundStatement	 
>1867	ExpressionStatement	 
>1868	CallExpression	fprintf ( f , \"%d %d \" , img , key )
>1869	ArgumentList	f
>1870	Argument	key
>1871	Identifier	key
>1872	Argument	img
>1873	Identifier	img
>1874	Argument	\"%d %d \"
>1875	PrimaryExpression	\"%d %d \"
>1876	Argument	f
>1877	Identifier	f
>1878	Callee	fprintf
>1879	Identifier	fprintf
>1880	IdentifierDeclStatement	 
>1881	IdentifierDecl	key = m_track_data [ i ] . m_views [ j ] . second
>1882	AssignmentExpr	key = m_track_data [ i ] . m_views [ j ] . second
>1883	MemberAccess	m_track_data [ i ] . m_views [ j ] . second
>1884	Identifier	second
>1885	ArrayIndexing	m_track_data [ i ] . m_views [ j ]
>1886	Identifier	j
>1887	MemberAccess	m_track_data [ i ] . m_views
>1888	Identifier	m_views
>1889	ArrayIndexing	m_track_data [ i ]
>1890	Identifier	i
>1891	Identifier	m_track_data
>1892	Identifier	key
>1893	Identifier	key
>1894	IdentifierDeclType	int
>1895	IdentifierDeclStatement	 
>1896	IdentifierDecl	img = m_track_data [ i ] . m_views [ j ] . first
>1897	AssignmentExpr	img = m_track_data [ i ] . m_views [ j ] . first
>1898	MemberAccess	m_track_data [ i ] . m_views [ j ] . first
>1899	Identifier	first
>1900	ArrayIndexing	m_track_data [ i ] . m_views [ j ]
>1901	Identifier	j
>1902	MemberAccess	m_track_data [ i ] . m_views
>1903	Identifier	m_views
>1904	ArrayIndexing	m_track_data [ i ]
>1905	Identifier	i
>1906	Identifier	m_track_data
>1907	Identifier	img
>1908	Identifier	img
>1909	IdentifierDeclType	int
>1910	IncDecOp	 
>1911	IncDec	++
>1912	Identifier	j
>1913	Condition	 
>1914	RelationalExpression	j < num_views
>1915	Identifier	num_views
>1916	Identifier	j
>1917	ForInit	 
>1918	IdentifierDeclStatement	int j = 0 ;
>1919	IdentifierDecl	j = 0
>1920	AssignmentExpr	j = 0
>1921	PrimaryExpression	0
>1922	Identifier	j
>1923	Identifier	j
>1924	IdentifierDeclType	int
>1925	ExpressionStatement	 
>1926	CallExpression	fprintf ( f , \"%d \" , num_views )
>1927	ArgumentList	f
>1928	Argument	num_views
>1929	Identifier	num_views
>1930	Argument	\"%d \"
>1931	PrimaryExpression	\"%d \"
>1932	Argument	f
>1933	Identifier	f
>1934	Callee	fprintf
>1935	Identifier	fprintf
>1936	IdentifierDeclStatement	 
>1937	IdentifierDecl	num_views = ( int ) m_track_data [ i ] . m_views . size ( )
>1938	AssignmentExpr	num_views = ( int ) m_track_data [ i ] . m_views . size ( )
>1939	CastExpression	( int ) m_track_data [ i ] . m_views . size ( )
>1940	CallExpression	m_track_data [ i ] . m_views . size ( )
>1941	ArgumentList	 
>1942	Callee	m_track_data [ i ] . m_views . size
>1943	MemberAccess	m_track_data [ i ] . m_views . size
>1944	Identifier	size
>1945	MemberAccess	m_track_data [ i ] . m_views
>1946	Identifier	m_views
>1947	ArrayIndexing	m_track_data [ i ]
>1948	Identifier	i
>1949	Identifier	m_track_data
>1950	CastTarget	int
>1951	Identifier	num_views
>1952	Identifier	num_views
>1953	IdentifierDeclType	int
>1954	IncDecOp	 
>1955	IncDec	++
>1956	Identifier	i
>1957	Condition	 
>1958	RelationalExpression	i < num_tracks
>1959	Identifier	num_tracks
>1960	Identifier	i
>1961	ForInit	 
>1962	IdentifierDeclStatement	int i = 0 ;
>1963	IdentifierDecl	i = 0
>1964	AssignmentExpr	i = 0
>1965	PrimaryExpression	0
>1966	Identifier	i
>1967	Identifier	i
>1968	IdentifierDeclType	int
>1969	ExpressionStatement	 
>1970	CallExpression	fprintf ( f , \"%d %d\n\" , num_images , num_tracks )
>1971	ArgumentList	f
>1972	Argument	num_tracks
>1973	Identifier	num_tracks
>1974	Argument	num_images
>1975	Identifier	num_images
>1976	Argument	\"%d %d\n\"
>1977	PrimaryExpression	\"%d %d\n\"
>1978	Argument	f
>1979	Identifier	f
>1980	Callee	fprintf
>1981	Identifier	fprintf
>1982	IdentifierDeclStatement	 
>1983	IdentifierDecl	num_tracks = ( int ) m_track_data . size ( )
>1984	AssignmentExpr	num_tracks = ( int ) m_track_data . size ( )
>1985	CastExpression	( int ) m_track_data . size ( )
>1986	CallExpression	m_track_data . size ( )
>1987	ArgumentList	 
>1988	Callee	m_track_data . size
>1989	MemberAccess	m_track_data . size
>1990	Identifier	size
>1991	Identifier	m_track_data
>1992	CastTarget	int
>1993	Identifier	num_tracks
>1994	Identifier	num_tracks
>1995	IdentifierDeclType	int
>1996	IdentifierDeclStatement	 
>1997	IdentifierDecl	num_images = GetNumImages ( )
>1998	AssignmentExpr	num_images = GetNumImages ( )
>1999	CallExpression	GetNumImages ( )
>2000	ArgumentList	 
>2001	Callee	GetNumImages
>2002	Identifier	GetNumImages
>2003	Identifier	num_images
>2004	Identifier	num_images
>2005	IdentifierDeclType	int
>2006	IfStatement	if ( f == NULL )
>2007	CompoundStatement	 
>2008	ReturnStatement	 
>2009	ExpressionStatement	 
>2010	CallExpression	printf ( \"Error opening file %s for writing\n\" , filename )
>2011	ArgumentList	\"Error opening file %s for writing\n\"
>2012	Argument	filename
>2013	Identifier	filename
>2014	Argument	\"Error opening file %s for writing\n\"
>2015	PrimaryExpression	\"Error opening file %s for writing\n\"
>2016	Callee	printf
>2017	Identifier	printf
>2018	Condition	 
>2019	EqualityExpression	f == NULL
>2020	Identifier	NULL
>2021	Identifier	f
>2022	IdentifierDeclStatement	 
>2023	IdentifierDecl	* f = fopen ( filename , \"w\" )
>2024	AssignmentExpr	* f = fopen ( filename , \"w\" )
>2025	CallExpression	fopen ( filename , \"w\" )
>2026	ArgumentList	filename
>2027	Argument	\"w\"
>2028	PrimaryExpression	\"w\"
>2029	Argument	filename
>2030	Identifier	filename
>2031	Callee	fopen
>2032	Identifier	fopen
>2033	Identifier	f
>2034	Identifier	f
>2035	IdentifierDeclType	FILE *
>2063	FunctionDef	BaseApp 
>2064	ParameterList	char * filename
>2065	Parameter	 
>2066	Identifier	filename
>2067	ParameterType	char *
>2068	ReturnType	void
>2069	CompoundStatement	 
>2070	ExpressionStatement	 
>2071	CallExpression	fclose ( f )
>2072	ArgumentList	f
>2073	Argument	f
>2074	Identifier	f
>2075	Callee	fclose
>2076	Identifier	fclose
>2077	ForStatement	for ( int i = 0 ; i < num_tracks ; i ++ )
>2078	CompoundStatement	 
>2079	ExpressionStatement	 
>2080	CallExpression	fprintf ( f , \"\n\" )
>2081	ArgumentList	f
>2082	Argument	\"\n\"
>2083	PrimaryExpression	\"\n\"
>2084	Argument	f
>2085	Identifier	f
>2086	Callee	fprintf
>2087	Identifier	fprintf
>2088	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>2089	CompoundStatement	 
>2090	ExpressionStatement	 
>2091	CallExpression	fprintf ( f , \"%d %0.6e %0.6e \" , img , x , y )
>2092	ArgumentList	f
>2093	Argument	y
>2094	Identifier	y
>2095	Argument	x
>2096	Identifier	x
>2097	Argument	img
>2098	Identifier	img
>2099	Argument	\"%d %0.6e %0.6e \"
>2100	PrimaryExpression	\"%d %0.6e %0.6e \"
>2101	Argument	f
>2102	Identifier	f
>2103	Callee	fprintf
>2104	Identifier	fprintf
>2105	IdentifierDeclStatement	 
>2106	IdentifierDecl	y = m_image_data [ img ] . m_keys [ key ] . m_y
>2107	AssignmentExpr	y = m_image_data [ img ] . m_keys [ key ] . m_y
>2108	MemberAccess	m_image_data [ img ] . m_keys [ key ] . m_y
>2109	Identifier	m_y
>2110	ArrayIndexing	m_image_data [ img ] . m_keys [ key ]
>2111	Identifier	key
>2112	MemberAccess	m_image_data [ img ] . m_keys
>2113	Identifier	m_keys
>2114	ArrayIndexing	m_image_data [ img ]
>2115	Identifier	img
>2116	Identifier	m_image_data
>2117	Identifier	y
>2118	Identifier	y
>2119	IdentifierDeclType	double
>2120	IdentifierDeclStatement	 
>2121	IdentifierDecl	x = m_image_data [ img ] . m_keys [ key ] . m_x
>2122	AssignmentExpr	x = m_image_data [ img ] . m_keys [ key ] . m_x
>2123	MemberAccess	m_image_data [ img ] . m_keys [ key ] . m_x
>2124	Identifier	m_x
>2125	ArrayIndexing	m_image_data [ img ] . m_keys [ key ]
>2126	Identifier	key
>2127	MemberAccess	m_image_data [ img ] . m_keys
>2128	Identifier	m_keys
>2129	ArrayIndexing	m_image_data [ img ]
>2130	Identifier	img
>2131	Identifier	m_image_data
>2132	Identifier	x
>2133	Identifier	x
>2134	IdentifierDeclType	double
>2135	IfStatement	if ( ! m_image_data [ img ] . m_camera . m_adjusted )
>2136	ContinueStatement	 
>2137	Condition	 
>2138	UnaryOp	! m_image_data [ img ] . m_camera . m_adjusted
>2139	MemberAccess	m_image_data [ img ] . m_camera . m_adjusted
>2140	Identifier	m_adjusted
>2141	MemberAccess	m_image_data [ img ] . m_camera
>2142	Identifier	m_camera
>2143	ArrayIndexing	m_image_data [ img ]
>2144	Identifier	img
>2145	Identifier	m_image_data
>2146	UnaryOperator	!
>2147	IdentifierDeclStatement	 
>2148	IdentifierDecl	key = m_track_data [ i ] . m_views [ j ] . second
>2149	AssignmentExpr	key = m_track_data [ i ] . m_views [ j ] . second
>2150	MemberAccess	m_track_data [ i ] . m_views [ j ] . second
>2151	Identifier	second
>2152	ArrayIndexing	m_track_data [ i ] . m_views [ j ]
>2153	Identifier	j
>2154	MemberAccess	m_track_data [ i ] . m_views
>2155	Identifier	m_views
>2156	ArrayIndexing	m_track_data [ i ]
>2157	Identifier	i
>2158	Identifier	m_track_data
>2159	Identifier	key
>2160	Identifier	key
>2161	IdentifierDeclType	int
>2162	IdentifierDeclStatement	 
>2163	IdentifierDecl	img = m_track_data [ i ] . m_views [ j ] . first
>2164	AssignmentExpr	img = m_track_data [ i ] . m_views [ j ] . first
>2165	MemberAccess	m_track_data [ i ] . m_views [ j ] . first
>2166	Identifier	first
>2167	ArrayIndexing	m_track_data [ i ] . m_views [ j ]
>2168	Identifier	j
>2169	MemberAccess	m_track_data [ i ] . m_views
>2170	Identifier	m_views
>2171	ArrayIndexing	m_track_data [ i ]
>2172	Identifier	i
>2173	Identifier	m_track_data
>2174	Identifier	img
>2175	Identifier	img
>2176	IdentifierDeclType	int
>2177	IncDecOp	 
>2178	IncDec	++
>2179	Identifier	j
>2180	Condition	 
>2181	RelationalExpression	j < num_views
>2182	Identifier	num_views
>2183	Identifier	j
>2184	ForInit	 
>2185	IdentifierDeclStatement	int j = 0 ;
>2186	IdentifierDecl	j = 0
>2187	AssignmentExpr	j = 0
>2188	PrimaryExpression	0
>2189	Identifier	j
>2190	Identifier	j
>2191	IdentifierDeclType	int
>2192	ExpressionStatement	 
>2193	CallExpression	fprintf ( f , \"%d \" , num_good_views )
>2194	ArgumentList	f
>2195	Argument	num_good_views
>2196	Identifier	num_good_views
>2197	Argument	\"%d \"
>2198	PrimaryExpression	\"%d \"
>2199	Argument	f
>2200	Identifier	f
>2201	Callee	fprintf
>2202	Identifier	fprintf
>2203	IfStatement	if ( num_good_views < 2 )
>2204	ContinueStatement	 
>2205	Condition	 
>2206	RelationalExpression	num_good_views < 2
>2207	PrimaryExpression	2
>2208	Identifier	num_good_views
>2209	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>2210	CompoundStatement	 
>2211	ExpressionStatement	 
>2212	IncDecOp	num_good_views ++
>2213	IncDec	++
>2214	Identifier	num_good_views
>2215	IfStatement	if ( ! m_image_data [ img ] . m_camera . m_adjusted )
>2216	ContinueStatement	 
>2217	Condition	 
>2218	UnaryOp	! m_image_data [ img ] . m_camera . m_adjusted
>2219	MemberAccess	m_image_data [ img ] . m_camera . m_adjusted
>2220	Identifier	m_adjusted
>2221	MemberAccess	m_image_data [ img ] . m_camera
>2222	Identifier	m_camera
>2223	ArrayIndexing	m_image_data [ img ]
>2224	Identifier	img
>2225	Identifier	m_image_data
>2226	UnaryOperator	!
>2227	IdentifierDeclStatement	 
>2228	IdentifierDecl	img = m_track_data [ i ] . m_views [ j ] . first
>2229	AssignmentExpr	img = m_track_data [ i ] . m_views [ j ] . first
>2230	MemberAccess	m_track_data [ i ] . m_views [ j ] . first
>2231	Identifier	first
>2232	ArrayIndexing	m_track_data [ i ] . m_views [ j ]
>2233	Identifier	j
>2234	MemberAccess	m_track_data [ i ] . m_views
>2235	Identifier	m_views
>2236	ArrayIndexing	m_track_data [ i ]
>2237	Identifier	i
>2238	Identifier	m_track_data
>2239	Identifier	img
>2240	Identifier	img
>2241	IdentifierDeclType	int
>2242	IncDecOp	 
>2243	IncDec	++
>2244	Identifier	j
>2245	Condition	 
>2246	RelationalExpression	j < num_views
>2247	Identifier	num_views
>2248	Identifier	j
>2249	ForInit	 
>2250	IdentifierDeclStatement	int j = 0 ;
>2251	IdentifierDecl	j = 0
>2252	AssignmentExpr	j = 0
>2253	PrimaryExpression	0
>2254	Identifier	j
>2255	Identifier	j
>2256	IdentifierDeclType	int
>2257	IdentifierDeclStatement	 
>2258	IdentifierDecl	num_good_views = 0
>2259	AssignmentExpr	num_good_views = 0
>2260	PrimaryExpression	0
>2261	Identifier	num_good_views
>2262	Identifier	num_good_views
>2263	IdentifierDeclType	int
>2264	IdentifierDeclStatement	 
>2265	IdentifierDecl	num_views = ( int ) m_track_data [ i ] . m_views . size ( )
>2266	AssignmentExpr	num_views = ( int ) m_track_data [ i ] . m_views . size ( )
>2267	CastExpression	( int ) m_track_data [ i ] . m_views . size ( )
>2268	CallExpression	m_track_data [ i ] . m_views . size ( )
>2269	ArgumentList	 
>2270	Callee	m_track_data [ i ] . m_views . size
>2271	MemberAccess	m_track_data [ i ] . m_views . size
>2272	Identifier	size
>2273	MemberAccess	m_track_data [ i ] . m_views
>2274	Identifier	m_views
>2275	ArrayIndexing	m_track_data [ i ]
>2276	Identifier	i
>2277	Identifier	m_track_data
>2278	CastTarget	int
>2279	Identifier	num_views
>2280	Identifier	num_views
>2281	IdentifierDeclType	int
>2282	IncDecOp	 
>2283	IncDec	++
>2284	Identifier	i
>2285	Condition	 
>2286	RelationalExpression	i < num_tracks
>2287	Identifier	num_tracks
>2288	Identifier	i
>2289	ForInit	 
>2290	IdentifierDeclStatement	int i = 0 ;
>2291	IdentifierDecl	i = 0
>2292	AssignmentExpr	i = 0
>2293	PrimaryExpression	0
>2294	Identifier	i
>2295	Identifier	i
>2296	IdentifierDeclType	int
>2297	ExpressionStatement	 
>2298	CallExpression	fprintf ( f , \"%d %d\n\" , num_images , num_tracks )
>2299	ArgumentList	f
>2300	Argument	num_tracks
>2301	Identifier	num_tracks
>2302	Argument	num_images
>2303	Identifier	num_images
>2304	Argument	\"%d %d\n\"
>2305	PrimaryExpression	\"%d %d\n\"
>2306	Argument	f
>2307	Identifier	f
>2308	Callee	fprintf
>2309	Identifier	fprintf
>2310	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>2311	CompoundStatement	 
>2312	IfStatement	if ( m_image_data [ i ] . m_camera . m_adjusted )
>2313	ExpressionStatement	 
>2314	CallExpression	m_image_data [ i ] . LoadKeys ( false )
>2315	ArgumentList	false
>2316	Argument	false
>2317	Identifier	false
>2318	Callee	m_image_data [ i ] . LoadKeys
>2319	MemberAccess	m_image_data [ i ] . LoadKeys
>2320	Identifier	LoadKeys
>2321	ArrayIndexing	m_image_data [ i ]
>2322	Identifier	i
>2323	Identifier	m_image_data
>2324	Condition	 
>2325	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>2326	Identifier	m_adjusted
>2327	MemberAccess	m_image_data [ i ] . m_camera
>2328	Identifier	m_camera
>2329	ArrayIndexing	m_image_data [ i ]
>2330	Identifier	i
>2331	Identifier	m_image_data
>2332	IncDecOp	 
>2333	IncDec	++
>2334	Identifier	i
>2335	Condition	 
>2336	RelationalExpression	i < num_images
>2337	Identifier	num_images
>2338	Identifier	i
>2339	ForInit	 
>2340	IdentifierDeclStatement	int i = 0 ;
>2341	IdentifierDecl	i = 0
>2342	AssignmentExpr	i = 0
>2343	PrimaryExpression	0
>2344	Identifier	i
>2345	Identifier	i
>2346	IdentifierDeclType	int
>2347	IdentifierDeclStatement	 
>2348	IdentifierDecl	num_tracks = ( int ) m_track_data . size ( )
>2349	AssignmentExpr	num_tracks = ( int ) m_track_data . size ( )
>2350	CastExpression	( int ) m_track_data . size ( )
>2351	CallExpression	m_track_data . size ( )
>2352	ArgumentList	 
>2353	Callee	m_track_data . size
>2354	MemberAccess	m_track_data . size
>2355	Identifier	size
>2356	Identifier	m_track_data
>2357	CastTarget	int
>2358	Identifier	num_tracks
>2359	Identifier	num_tracks
>2360	IdentifierDeclType	int
>2361	IdentifierDeclStatement	 
>2362	IdentifierDecl	num_images = GetNumImages ( )
>2363	AssignmentExpr	num_images = GetNumImages ( )
>2364	CallExpression	GetNumImages ( )
>2365	ArgumentList	 
>2366	Callee	GetNumImages
>2367	Identifier	GetNumImages
>2368	Identifier	num_images
>2369	Identifier	num_images
>2370	IdentifierDeclType	int
>2371	IfStatement	if ( f == NULL )
>2372	CompoundStatement	 
>2373	ReturnStatement	 
>2374	ExpressionStatement	 
>2375	CallExpression	printf ( \"Error opening file %s for writing\n\" , filename )
>2376	ArgumentList	\"Error opening file %s for writing\n\"
>2377	Argument	filename
>2378	Identifier	filename
>2379	Argument	\"Error opening file %s for writing\n\"
>2380	PrimaryExpression	\"Error opening file %s for writing\n\"
>2381	Callee	printf
>2382	Identifier	printf
>2383	Condition	 
>2384	EqualityExpression	f == NULL
>2385	Identifier	NULL
>2386	Identifier	f
>2387	IdentifierDeclStatement	 
>2388	IdentifierDecl	* f = fopen ( filename , \"w\" )
>2389	AssignmentExpr	* f = fopen ( filename , \"w\" )
>2390	CallExpression	fopen ( filename , \"w\" )
>2391	ArgumentList	filename
>2392	Argument	\"w\"
>2393	PrimaryExpression	\"w\"
>2394	Argument	filename
>2395	Identifier	filename
>2396	Callee	fopen
>2397	Identifier	fopen
>2398	Identifier	f
>2399	Identifier	f
>2400	IdentifierDeclType	FILE *
>2446	FunctionDef	BaseApp 
>2447	ParameterList	int min_views
>2448	Parameter	 
>2449	Identifier	min_views
>2450	ParameterType	int
>2451	ReturnType	void
>2452	CompoundStatement	 
>2453	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>2454	CompoundStatement	 
>2455	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>2456	CompoundStatement	 
>2457	ExpressionStatement	 
>2458	CallExpression	m_image_data [ img ] . m_visible_keys . push_back ( key )
>2459	ArgumentList	key
>2460	Argument	key
>2461	Identifier	key
>2462	Callee	m_image_data [ img ] . m_visible_keys . push_back
>2463	MemberAccess	m_image_data [ img ] . m_visible_keys . push_back
>2464	Identifier	push_back
>2465	MemberAccess	m_image_data [ img ] . m_visible_keys
>2466	Identifier	m_visible_keys
>2467	ArrayIndexing	m_image_data [ img ]
>2468	Identifier	img
>2469	Identifier	m_image_data
>2470	ExpressionStatement	 
>2471	CallExpression	m_image_data [ img ] . m_visible_points . push_back ( i )
>2472	ArgumentList	i
>2473	Argument	i
>2474	Identifier	i
>2475	Callee	m_image_data [ img ] . m_visible_points . push_back
>2476	MemberAccess	m_image_data [ img ] . m_visible_points . push_back
>2477	Identifier	push_back
>2478	MemberAccess	m_image_data [ img ] . m_visible_points
>2479	Identifier	m_visible_points
>2480	ArrayIndexing	m_image_data [ img ]
>2481	Identifier	img
>2482	Identifier	m_image_data
>2483	IdentifierDeclStatement	 
>2484	IdentifierDecl	key = p . m_views [ j ] . second
>2485	AssignmentExpr	key = p . m_views [ j ] . second
>2486	MemberAccess	p . m_views [ j ] . second
>2487	Identifier	second
>2488	ArrayIndexing	p . m_views [ j ]
>2489	Identifier	j
>2490	MemberAccess	p . m_views
>2491	Identifier	m_views
>2492	Identifier	p
>2493	Identifier	key
>2494	Identifier	key
>2495	IdentifierDeclType	int
>2496	IdentifierDeclStatement	 
>2497	IdentifierDecl	img = p . m_views [ j ] . first
>2498	AssignmentExpr	img = p . m_views [ j ] . first
>2499	MemberAccess	p . m_views [ j ] . first
>2500	Identifier	first
>2501	ArrayIndexing	p . m_views [ j ]
>2502	Identifier	j
>2503	MemberAccess	p . m_views
>2504	Identifier	m_views
>2505	Identifier	p
>2506	Identifier	img
>2507	Identifier	img
>2508	IdentifierDeclType	int
>2509	IncDecOp	 
>2510	IncDec	++
>2511	Identifier	j
>2512	Condition	 
>2513	RelationalExpression	j < num_views
>2514	Identifier	num_views
>2515	Identifier	j
>2516	ForInit	 
>2517	IdentifierDeclStatement	int j = 0 ;
>2518	IdentifierDecl	j = 0
>2519	AssignmentExpr	j = 0
>2520	PrimaryExpression	0
>2521	Identifier	j
>2522	Identifier	j
>2523	IdentifierDeclType	int
>2524	IfStatement	if ( num_views < min_views )
>2525	ContinueStatement	 
>2526	Condition	 
>2527	RelationalExpression	num_views < min_views
>2528	Identifier	min_views
>2529	Identifier	num_views
>2530	IdentifierDeclStatement	 
>2531	IdentifierDecl	num_views = ( int ) p . m_views . size ( )
>2532	AssignmentExpr	num_views = ( int ) p . m_views . size ( )
>2533	CastExpression	( int ) p . m_views . size ( )
>2534	CallExpression	p . m_views . size ( )
>2535	ArgumentList	 
>2536	Callee	p . m_views . size
>2537	MemberAccess	p . m_views . size
>2538	Identifier	size
>2539	MemberAccess	p . m_views
>2540	Identifier	m_views
>2541	Identifier	p
>2542	CastTarget	int
>2543	Identifier	num_views
>2544	Identifier	num_views
>2545	IdentifierDeclType	int
>2546	IdentifierDeclStatement	 
>2547	IdentifierDecl	& p = m_point_data [ i ]
>2548	AssignmentExpr	& p = m_point_data [ i ]
>2549	ArrayIndexing	m_point_data [ i ]
>2550	Identifier	i
>2551	Identifier	m_point_data
>2552	Identifier	p
>2553	Identifier	p
>2554	IdentifierDeclType	PointData &
>2555	IncDecOp	 
>2556	IncDec	++
>2557	Identifier	i
>2558	Condition	 
>2559	RelationalExpression	i < num_points
>2560	Identifier	num_points
>2561	Identifier	i
>2562	ForInit	 
>2563	IdentifierDeclStatement	int i = 0 ;
>2564	IdentifierDecl	i = 0
>2565	AssignmentExpr	i = 0
>2566	PrimaryExpression	0
>2567	Identifier	i
>2568	Identifier	i
>2569	IdentifierDeclType	int
>2570	IdentifierDeclStatement	 
>2571	IdentifierDecl	num_points = ( int ) m_point_data . size ( )
>2572	AssignmentExpr	num_points = ( int ) m_point_data . size ( )
>2573	CastExpression	( int ) m_point_data . size ( )
>2574	CallExpression	m_point_data . size ( )
>2575	ArgumentList	 
>2576	Callee	m_point_data . size
>2577	MemberAccess	m_point_data . size
>2578	Identifier	size
>2579	Identifier	m_point_data
>2580	CastTarget	int
>2581	Identifier	num_points
>2582	Identifier	num_points
>2583	IdentifierDeclType	int
>2584	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>2585	CompoundStatement	 
>2586	ExpressionStatement	 
>2587	CallExpression	m_image_data [ i ] . m_visible_points . clear ( )
>2588	ArgumentList	 
>2589	Callee	m_image_data [ i ] . m_visible_points . clear
>2590	MemberAccess	m_image_data [ i ] . m_visible_points . clear
>2591	Identifier	clear
>2592	MemberAccess	m_image_data [ i ] . m_visible_points
>2593	Identifier	m_visible_points
>2594	ArrayIndexing	m_image_data [ i ]
>2595	Identifier	i
>2596	Identifier	m_image_data
>2597	IncDecOp	 
>2598	IncDec	++
>2599	Identifier	i
>2600	Condition	 
>2601	RelationalExpression	i < num_images
>2602	Identifier	num_images
>2603	Identifier	i
>2604	ForInit	 
>2605	IdentifierDeclStatement	int i = 0 ;
>2606	IdentifierDecl	i = 0
>2607	AssignmentExpr	i = 0
>2608	PrimaryExpression	0
>2609	Identifier	i
>2610	Identifier	i
>2611	IdentifierDeclType	int
>2612	IdentifierDeclStatement	 
>2613	IdentifierDecl	num_images = GetNumImages ( )
>2614	AssignmentExpr	num_images = GetNumImages ( )
>2615	CallExpression	GetNumImages ( )
>2616	ArgumentList	 
>2617	Callee	GetNumImages
>2618	Identifier	GetNumImages
>2619	Identifier	num_images
>2620	Identifier	num_images
>2621	IdentifierDeclType	int
>2652	FunctionDef	BaseApp 
>2653	ParameterList	 
>2654	ReturnType	void
>2655	CompoundStatement	 
>2656	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>2657	CompoundStatement	 
>2658	ExpressionStatement	 
>2659	AssignmentExpr	m_point_data [ i ] . m_pos [ 2 ] = - m_point_data [ i ] . m_pos [ 2 ]
>2660	UnaryOp	- m_point_data [ i ] . m_pos [ 2 ]
>2661	ArrayIndexing	m_point_data [ i ] . m_pos [ 2 ]
>2662	PrimaryExpression	2
>2663	MemberAccess	m_point_data [ i ] . m_pos
>2664	Identifier	m_pos
>2665	ArrayIndexing	m_point_data [ i ]
>2666	Identifier	i
>2667	Identifier	m_point_data
>2668	UnaryOperator	-
>2669	ArrayIndexing	m_point_data [ i ] . m_pos [ 2 ]
>2670	PrimaryExpression	2
>2671	MemberAccess	m_point_data [ i ] . m_pos
>2672	Identifier	m_pos
>2673	ArrayIndexing	m_point_data [ i ]
>2674	Identifier	i
>2675	Identifier	m_point_data
>2676	IncDecOp	 
>2677	IncDec	++
>2678	Identifier	i
>2679	Condition	 
>2680	RelationalExpression	i < num_points
>2681	Identifier	num_points
>2682	Identifier	i
>2683	ForInit	 
>2684	IdentifierDeclStatement	int i = 0 ;
>2685	IdentifierDecl	i = 0
>2686	AssignmentExpr	i = 0
>2687	PrimaryExpression	0
>2688	Identifier	i
>2689	Identifier	i
>2690	IdentifierDeclType	int
>2691	IdentifierDeclStatement	 
>2692	IdentifierDecl	num_points = ( int ) m_point_data . size ( )
>2693	AssignmentExpr	num_points = ( int ) m_point_data . size ( )
>2694	CastExpression	( int ) m_point_data . size ( )
>2695	CallExpression	m_point_data . size ( )
>2696	ArgumentList	 
>2697	Callee	m_point_data . size
>2698	MemberAccess	m_point_data . size
>2699	Identifier	size
>2700	Identifier	m_point_data
>2701	CastTarget	int
>2702	Identifier	num_points
>2703	Identifier	num_points
>2704	IdentifierDeclType	int
>2705	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>2706	CompoundStatement	 
>2707	IfStatement	if ( m_image_data [ i ] . m_camera . m_adjusted )
>2708	ExpressionStatement	 
>2709	CallExpression	m_image_data [ i ] . m_camera . Reflect ( )
>2710	ArgumentList	 
>2711	Callee	m_image_data [ i ] . m_camera . Reflect
>2712	MemberAccess	m_image_data [ i ] . m_camera . Reflect
>2713	Identifier	Reflect
>2714	MemberAccess	m_image_data [ i ] . m_camera
>2715	Identifier	m_camera
>2716	ArrayIndexing	m_image_data [ i ]
>2717	Identifier	i
>2718	Identifier	m_image_data
>2719	Condition	 
>2720	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>2721	Identifier	m_adjusted
>2722	MemberAccess	m_image_data [ i ] . m_camera
>2723	Identifier	m_camera
>2724	ArrayIndexing	m_image_data [ i ]
>2725	Identifier	i
>2726	Identifier	m_image_data
>2727	IncDecOp	 
>2728	IncDec	++
>2729	Identifier	i
>2730	Condition	 
>2731	RelationalExpression	i < num_images
>2732	Identifier	num_images
>2733	Identifier	i
>2734	ForInit	 
>2735	IdentifierDeclStatement	int i = 0 ;
>2736	IdentifierDecl	i = 0
>2737	AssignmentExpr	i = 0
>2738	PrimaryExpression	0
>2739	Identifier	i
>2740	Identifier	i
>2741	IdentifierDeclType	int
>2742	IdentifierDeclStatement	 
>2743	IdentifierDecl	num_images = GetNumImages ( )
>2744	AssignmentExpr	num_images = GetNumImages ( )
>2745	CallExpression	GetNumImages ( )
>2746	ArgumentList	 
>2747	Callee	GetNumImages
>2748	Identifier	GetNumImages
>2749	Identifier	num_images
>2750	Identifier	num_images
>2751	IdentifierDeclType	int
>2752	ExpressionStatement	 
>2753	CallExpression	printf ( \"[FixReflectionBug] Reflecting scene...\n\" )
>2754	ArgumentList	\"[FixReflectionBug] Reflecting scene...\n\"
>2755	Argument	\"[FixReflectionBug] Reflecting scene...\n\"
>2756	PrimaryExpression	\"[FixReflectionBug] Reflecting scene...\n\"
>2757	Callee	printf
>2758	Identifier	printf
>2778	FunctionDef	BaseApp 
>2779	ParameterList	 
>2780	ReturnType	void
>2781	CompoundStatement	 
>2782	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>2783	CompoundStatement	 
>2784	ExpressionStatement	 
>2785	AssignmentExpr	m_image_data [ i ] . m_rotation = rot
>2786	Identifier	rot
>2787	MemberAccess	m_image_data [ i ] . m_rotation
>2788	Identifier	m_rotation
>2789	ArrayIndexing	m_image_data [ i ]
>2790	Identifier	i
>2791	Identifier	m_image_data
>2792	IfStatement	if ( fabs ( x_dot ) > fabs ( y_dot ) )
>2793	ElseStatement	else
>2794	CompoundStatement	 
>2795	IfStatement	if ( y_dot > 0.0 )
>2796	ElseStatement	else
>2797	CompoundStatement	 
>2798	ExpressionStatement	 
>2799	AssignmentExpr	rot = 2
>2800	PrimaryExpression	2
>2801	Identifier	rot
>2802	ExpressionStatement	 
>2803	Statement	 
>2804	Statement	 
>2805	Statement	 
>2806	Statement	 
>2807	Statement	 
>2808	Statement	 
>2809	Statement	 
>2810	CompoundStatement	 
>2811	ExpressionStatement	 
>2812	AssignmentExpr	rot = 0
>2813	PrimaryExpression	0
>2814	Identifier	rot
>2815	Condition	 
>2816	RelationalExpression	y_dot > 0.0
>2817	PrimaryExpression	0.0
>2818	Identifier	y_dot
>2819	CompoundStatement	 
>2820	IfStatement	if ( x_dot > 0.0 )
>2821	ElseStatement	else
>2822	CompoundStatement	 
>2823	ExpressionStatement	 
>2824	AssignmentExpr	rot = 1
>2825	PrimaryExpression	1
>2826	Identifier	rot
>2827	CompoundStatement	 
>2828	ExpressionStatement	 
>2829	AssignmentExpr	rot = 3
>2830	PrimaryExpression	3
>2831	Identifier	rot
>2832	Condition	 
>2833	RelationalExpression	x_dot > 0.0
>2834	PrimaryExpression	0.0
>2835	Identifier	x_dot
>2836	ExpressionStatement	 
>2837	Statement	 
>2838	Statement	 
>2839	Statement	 
>2840	Statement	 
>2841	Statement	 
>2842	Statement	 
>2843	Statement	 
>2844	Condition	 
>2845	RelationalExpression	fabs ( x_dot ) > fabs ( y_dot )
>2846	CallExpression	fabs ( y_dot )
>2847	ArgumentList	y_dot
>2848	Argument	y_dot
>2849	Identifier	y_dot
>2850	Callee	fabs
>2851	Identifier	fabs
>2852	CallExpression	fabs ( x_dot )
>2853	ArgumentList	x_dot
>2854	Argument	x_dot
>2855	Identifier	x_dot
>2856	Callee	fabs
>2857	Identifier	fabs
>2858	IdentifierDeclStatement	 
>2859	IdentifierDecl	rot
>2860	Identifier	rot
>2861	IdentifierDeclType	int
>2862	ExpressionStatement	 
>2863	CallExpression	matrix_product ( 1 , 2 , 2 , 1 , up_camera , y , & y_dot )
>2864	ArgumentList	1
>2865	Argument	& y_dot
>2866	UnaryOp	& y_dot
>2867	Identifier	y_dot
>2868	UnaryOperator	&
>2869	Argument	y
>2870	Identifier	y
>2871	Argument	up_camera
>2872	Identifier	up_camera
>2873	Argument	1
>2874	PrimaryExpression	1
>2875	Argument	2
>2876	PrimaryExpression	2
>2877	Argument	2
>2878	PrimaryExpression	2
>2879	Argument	1
>2880	PrimaryExpression	1
>2881	Callee	matrix_product
>2882	Identifier	matrix_product
>2883	ExpressionStatement	 
>2884	CallExpression	matrix_product ( 1 , 2 , 2 , 1 , up_camera , x , & x_dot )
>2885	ArgumentList	1
>2886	Argument	& x_dot
>2887	UnaryOp	& x_dot
>2888	Identifier	x_dot
>2889	UnaryOperator	&
>2890	Argument	x
>2891	Identifier	x
>2892	Argument	up_camera
>2893	Identifier	up_camera
>2894	Argument	1
>2895	PrimaryExpression	1
>2896	Argument	2
>2897	PrimaryExpression	2
>2898	Argument	2
>2899	PrimaryExpression	2
>2900	Argument	1
>2901	PrimaryExpression	1
>2902	Callee	matrix_product
>2903	Identifier	matrix_product
>2904	IdentifierDeclStatement	 
>2905	IdentifierDecl	y_dot
>2906	Identifier	y_dot
>2907	IdentifierDeclType	double
>2908	IdentifierDecl	x_dot
>2909	Identifier	x_dot
>2910	IdentifierDeclType	double
>2911	ExpressionStatement	 
>2912	CallExpression	matrix_transpose_product ( 3 , 3 , 3 , 1 , R , up , up_camera )
>2913	ArgumentList	3
>2914	Argument	up_camera
>2915	Identifier	up_camera
>2916	Argument	up
>2917	Identifier	up
>2918	Argument	R
>2919	Identifier	R
>2920	Argument	1
>2921	PrimaryExpression	1
>2922	Argument	3
>2923	PrimaryExpression	3
>2924	Argument	3
>2925	PrimaryExpression	3
>2926	Argument	3
>2927	PrimaryExpression	3
>2928	Callee	matrix_transpose_product
>2929	Identifier	matrix_transpose_product
>2930	IdentifierDeclStatement	 
>2931	IdentifierDecl	up_camera [ 3 ]
>2932	PrimaryExpression	3
>2933	Identifier	up_camera
>2934	IdentifierDeclType	double [ 3 ]
>2935	IdentifierDeclStatement	 
>2936	IdentifierDecl	y [ 2 ] = { 0.0 , 1.0 }
>2937	AssignmentExpr	y [ 2 ] = { 0.0 , 1.0 }
>2938	InitializerList	0.0
>2939	PrimaryExpression	1.0
>2940	PrimaryExpression	0.0
>2941	Identifier	y
>2942	PrimaryExpression	2
>2943	Identifier	y
>2944	IdentifierDeclType	double [ 2 ]
>2945	IdentifierDeclStatement	 
>2946	IdentifierDecl	x [ 2 ] = { 1.0 , 0.0 }
>2947	AssignmentExpr	x [ 2 ] = { 1.0 , 0.0 }
>2948	InitializerList	1.0
>2949	PrimaryExpression	0.0
>2950	PrimaryExpression	1.0
>2951	Identifier	x
>2952	PrimaryExpression	2
>2953	Identifier	x
>2954	IdentifierDeclType	double [ 2 ]
>2955	ExpressionStatement	 
>2956	CallExpression	m_image_data [ i ] . m_camera . GetPose ( R )
>2957	ArgumentList	R
>2958	Argument	R
>2959	Identifier	R
>2960	Callee	m_image_data [ i ] . m_camera . GetPose
>2961	MemberAccess	m_image_data [ i ] . m_camera . GetPose
>2962	Identifier	GetPose
>2963	MemberAccess	m_image_data [ i ] . m_camera
>2964	Identifier	m_camera
>2965	ArrayIndexing	m_image_data [ i ]
>2966	Identifier	i
>2967	Identifier	m_image_data
>2968	IdentifierDeclStatement	 
>2969	IdentifierDecl	R [ 9 ]
>2970	PrimaryExpression	9
>2971	Identifier	R
>2972	IdentifierDeclType	double [ 9 ]
>2973	IfStatement	if ( ! m_image_data [ i ] . m_camera . m_adjusted )
>2974	ContinueStatement	 
>2975	Condition	 
>2976	UnaryOp	! m_image_data [ i ] . m_camera . m_adjusted
>2977	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>2978	Identifier	m_adjusted
>2979	MemberAccess	m_image_data [ i ] . m_camera
>2980	Identifier	m_camera
>2981	ArrayIndexing	m_image_data [ i ]
>2982	Identifier	i
>2983	Identifier	m_image_data
>2984	UnaryOperator	!
>2985	IncDecOp	 
>2986	IncDec	++
>2987	Identifier	i
>2988	Condition	 
>2989	RelationalExpression	i < num_images
>2990	Identifier	num_images
>2991	Identifier	i
>2992	ForInit	 
>2993	IdentifierDeclStatement	int i = 0 ;
>2994	IdentifierDecl	i = 0
>2995	AssignmentExpr	i = 0
>2996	PrimaryExpression	0
>2997	Identifier	i
>2998	Identifier	i
>2999	IdentifierDeclType	int
>3000	IdentifierDeclStatement	 
>3001	IdentifierDecl	num_images = GetNumImages ( )
>3002	AssignmentExpr	num_images = GetNumImages ( )
>3003	CallExpression	GetNumImages ( )
>3004	ArgumentList	 
>3005	Callee	GetNumImages
>3006	Identifier	GetNumImages
>3007	Identifier	num_images
>3008	Identifier	num_images
>3009	IdentifierDeclType	int
>3010	ExpressionStatement	 
>3011	CallExpression	SetupSceneGroundPlane ( center , up , x_axis , z_axis , scale )
>3012	ArgumentList	center
>3013	Argument	scale
>3014	Identifier	scale
>3015	Argument	z_axis
>3016	Identifier	z_axis
>3017	Argument	x_axis
>3018	Identifier	x_axis
>3019	Argument	up
>3020	Identifier	up
>3021	Argument	center
>3022	Identifier	center
>3023	Callee	SetupSceneGroundPlane
>3024	Identifier	SetupSceneGroundPlane
>3025	IdentifierDeclStatement	 
>3026	IdentifierDecl	scale
>3027	Identifier	scale
>3028	IdentifierDeclType	double
>3029	IdentifierDecl	z_axis [ 3 ]
>3030	PrimaryExpression	3
>3031	Identifier	z_axis
>3032	IdentifierDeclType	double [ 3 ]
>3033	IdentifierDecl	x_axis [ 3 ]
>3034	PrimaryExpression	3
>3035	Identifier	x_axis
>3036	IdentifierDeclType	double [ 3 ]
>3037	IdentifierDecl	up [ 3 ]
>3038	PrimaryExpression	3
>3039	Identifier	up
>3040	IdentifierDeclType	double [ 3 ]
>3041	IdentifierDecl	center [ 3 ]
>3042	PrimaryExpression	3
>3043	Identifier	center
>3044	IdentifierDeclType	double [ 3 ]
>3072	FunctionDef	BaseApp 
>3073	ParameterList	double * xaxis , double * yaxis , double * zaxis
>3074	Parameter	 
>3075	Identifier	zaxis
>3076	ParameterType	double *
>3077	Parameter	 
>3078	Identifier	yaxis
>3079	ParameterType	double *
>3080	Parameter	 
>3081	Identifier	xaxis
>3082	ParameterType	double *
>3083	ReturnType	void
>3084	CompoundStatement	 
>3085	ExpressionStatement	 
>3086	CallExpression	matrix_cross ( xaxis , yaxis , zaxis )
>3087	ArgumentList	xaxis
>3088	Argument	zaxis
>3089	Identifier	zaxis
>3090	Argument	yaxis
>3091	Identifier	yaxis
>3092	Argument	xaxis
>3093	Identifier	xaxis
>3094	Callee	matrix_cross
>3095	Identifier	matrix_cross
>3096	ExpressionStatement	 
>3097	CallExpression	matrix_scale ( 3 , 1 , xaxis , 1.0 / norm , xaxis )
>3098	ArgumentList	3
>3099	Argument	xaxis
>3100	Identifier	xaxis
>3101	Argument	1.0 / norm
>3102	MultiplicativeExpression	1.0 / norm
>3103	Identifier	norm
>3104	PrimaryExpression	1.0
>3105	Argument	xaxis
>3106	Identifier	xaxis
>3107	Argument	1
>3108	PrimaryExpression	1
>3109	Argument	3
>3110	PrimaryExpression	3
>3111	Callee	matrix_scale
>3112	Identifier	matrix_scale
>3113	IdentifierDeclStatement	 
>3114	IdentifierDecl	norm = matrix_norm ( 3 , 1 , xaxis )
>3115	AssignmentExpr	norm = matrix_norm ( 3 , 1 , xaxis )
>3116	CallExpression	matrix_norm ( 3 , 1 , xaxis )
>3117	ArgumentList	3
>3118	Argument	xaxis
>3119	Identifier	xaxis
>3120	Argument	1
>3121	PrimaryExpression	1
>3122	Argument	3
>3123	PrimaryExpression	3
>3124	Callee	matrix_norm
>3125	Identifier	matrix_norm
>3126	Identifier	norm
>3127	Identifier	norm
>3128	IdentifierDeclType	double
>3129	ExpressionStatement	 
>3130	CallExpression	matrix_cross ( yaxis , zaxis , xaxis )
>3131	ArgumentList	yaxis
>3132	Argument	xaxis
>3133	Identifier	xaxis
>3134	Argument	zaxis
>3135	Identifier	zaxis
>3136	Argument	yaxis
>3137	Identifier	yaxis
>3138	Callee	matrix_cross
>3139	Identifier	matrix_cross
>3140	ExpressionStatement	 
>3141	CallExpression	printf ( \"dot = %0.3f\n\" , dot / matrix_norm ( 3 , 1 , zaxis ) )
>3142	ArgumentList	\"dot = %0.3f\n\"
>3143	Argument	dot / matrix_norm ( 3 , 1 , zaxis )
>3144	MultiplicativeExpression	dot / matrix_norm ( 3 , 1 , zaxis )
>3145	CallExpression	matrix_norm ( 3 , 1 , zaxis )
>3146	ArgumentList	3
>3147	Argument	zaxis
>3148	Identifier	zaxis
>3149	Argument	1
>3150	PrimaryExpression	1
>3151	Argument	3
>3152	PrimaryExpression	3
>3153	Callee	matrix_norm
>3154	Identifier	matrix_norm
>3155	Identifier	dot
>3156	Argument	\"dot = %0.3f\n\"
>3157	PrimaryExpression	\"dot = %0.3f\n\"
>3158	Callee	printf
>3159	Identifier	printf
>3160	ExpressionStatement	 
>3161	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , yaxis , zaxis , & dot )
>3162	ArgumentList	1
>3163	Argument	& dot
>3164	UnaryOp	& dot
>3165	Identifier	dot
>3166	UnaryOperator	&
>3167	Argument	zaxis
>3168	Identifier	zaxis
>3169	Argument	yaxis
>3170	Identifier	yaxis
>3171	Argument	1
>3172	PrimaryExpression	1
>3173	Argument	3
>3174	PrimaryExpression	3
>3175	Argument	3
>3176	PrimaryExpression	3
>3177	Argument	1
>3178	PrimaryExpression	1
>3179	Callee	matrix_product
>3180	Identifier	matrix_product
>3181	IdentifierDeclStatement	 
>3182	IdentifierDecl	dot
>3183	Identifier	dot
>3184	IdentifierDeclType	double
>3185	ExpressionStatement	 
>3186	CallExpression	matrix_print ( 1 , 3 , zaxis )
>3187	ArgumentList	1
>3188	Argument	zaxis
>3189	Identifier	zaxis
>3190	Argument	3
>3191	PrimaryExpression	3
>3192	Argument	1
>3193	PrimaryExpression	1
>3194	Callee	matrix_print
>3195	Identifier	matrix_print
>3196	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>3197	CompoundStatement	 
>3198	ExpressionStatement	 
>3199	CallExpression	matrix_sum ( 1 , 3 , 1 , 3 , zaxis , zi , zaxis )
>3200	ArgumentList	1
>3201	Argument	zaxis
>3202	Identifier	zaxis
>3203	Argument	zi
>3204	Identifier	zi
>3205	Argument	zaxis
>3206	Identifier	zaxis
>3207	Argument	3
>3208	PrimaryExpression	3
>3209	Argument	1
>3210	PrimaryExpression	1
>3211	Argument	3
>3212	PrimaryExpression	3
>3213	Argument	1
>3214	PrimaryExpression	1
>3215	Callee	matrix_sum
>3216	Identifier	matrix_sum
>3217	IdentifierDeclStatement	 
>3218	IdentifierDecl	* zi = m_image_data [ i ] . m_camera . m_R + 6
>3219	AssignmentExpr	* zi = m_image_data [ i ] . m_camera . m_R + 6
>3220	AdditiveExpression	m_image_data [ i ] . m_camera . m_R + 6
>3221	PrimaryExpression	6
>3222	MemberAccess	m_image_data [ i ] . m_camera . m_R
>3223	Identifier	m_R
>3224	MemberAccess	m_image_data [ i ] . m_camera
>3225	Identifier	m_camera
>3226	ArrayIndexing	m_image_data [ i ]
>3227	Identifier	i
>3228	Identifier	m_image_data
>3229	Identifier	zi
>3230	Identifier	zi
>3231	IdentifierDeclType	double *
>3232	IfStatement	if ( ! m_image_data [ i ] . m_camera . m_adjusted )
>3233	ContinueStatement	 
>3234	Condition	 
>3235	UnaryOp	! m_image_data [ i ] . m_camera . m_adjusted
>3236	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>3237	Identifier	m_adjusted
>3238	MemberAccess	m_image_data [ i ] . m_camera
>3239	Identifier	m_camera
>3240	ArrayIndexing	m_image_data [ i ]
>3241	Identifier	i
>3242	Identifier	m_image_data
>3243	UnaryOperator	!
>3244	IncDecOp	 
>3245	IncDec	++
>3246	Identifier	i
>3247	Condition	 
>3248	RelationalExpression	i < num_images
>3249	Identifier	num_images
>3250	Identifier	i
>3251	ForInit	 
>3252	IdentifierDeclStatement	int i = 0 ;
>3253	IdentifierDecl	i = 0
>3254	AssignmentExpr	i = 0
>3255	PrimaryExpression	0
>3256	Identifier	i
>3257	Identifier	i
>3258	IdentifierDeclType	int
>3259	ExpressionStatement	 
>3260	AssignmentExpr	zaxis [ 0 ] = zaxis [ 1 ] = zaxis [ 2 ] = 0.0
>3261	AssignmentExpr	zaxis [ 1 ] = zaxis [ 2 ] = 0.0
>3262	AssignmentExpr	zaxis [ 2 ] = 0.0
>3263	PrimaryExpression	0.0
>3264	ArrayIndexing	zaxis [ 2 ]
>3265	PrimaryExpression	2
>3266	Identifier	zaxis
>3267	ArrayIndexing	zaxis [ 1 ]
>3268	PrimaryExpression	1
>3269	Identifier	zaxis
>3270	ArrayIndexing	zaxis [ 0 ]
>3271	PrimaryExpression	0
>3272	Identifier	zaxis
>3273	ExpressionStatement	 
>3274	AssignmentExpr	zaxis [ 2 ] = 0.0
>3275	PrimaryExpression	0.0
>3276	ArrayIndexing	zaxis [ 2 ]
>3277	PrimaryExpression	2
>3278	Identifier	zaxis
>3279	ExpressionStatement	 
>3280	AssignmentExpr	zaxis [ 1 ] = - yaxis [ 0 ]
>3281	UnaryOp	- yaxis [ 0 ]
>3282	ArrayIndexing	yaxis [ 0 ]
>3283	PrimaryExpression	0
>3284	Identifier	yaxis
>3285	UnaryOperator	-
>3286	ArrayIndexing	zaxis [ 1 ]
>3287	PrimaryExpression	1
>3288	Identifier	zaxis
>3289	ExpressionStatement	 
>3290	AssignmentExpr	zaxis [ 0 ] = yaxis [ 1 ]
>3291	ArrayIndexing	yaxis [ 1 ]
>3292	PrimaryExpression	1
>3293	Identifier	yaxis
>3294	ArrayIndexing	zaxis [ 0 ]
>3295	PrimaryExpression	0
>3296	Identifier	zaxis
>3297	IfStatement	if ( num_neg > num_pos )
>3298	ElseStatement	else
>3299	CompoundStatement	 
>3300	ExpressionStatement	 
>3301	CallExpression	printf ( \"[EstimateAxes] Not flipping\n\" )
>3302	ArgumentList	\"[EstimateAxes] Not flipping\n\"
>3303	Argument	\"[EstimateAxes] Not flipping\n\"
>3304	PrimaryExpression	\"[EstimateAxes] Not flipping\n\"
>3305	Callee	printf
>3306	Identifier	printf
>3307	CompoundStatement	 
>3308	ExpressionStatement	 
>3309	CallExpression	matrix_scale ( 3 , 1 , yaxis , - 1.0 , yaxis )
>3310	ArgumentList	3
>3311	Argument	yaxis
>3312	Identifier	yaxis
>3313	Argument	- 1.0
>3314	UnaryOp	- 1.0
>3315	PrimaryExpression	1.0
>3316	UnaryOperator	-
>3317	Argument	yaxis
>3318	Identifier	yaxis
>3319	Argument	1
>3320	PrimaryExpression	1
>3321	Argument	3
>3322	PrimaryExpression	3
>3323	Callee	matrix_scale
>3324	Identifier	matrix_scale
>3325	ExpressionStatement	 
>3326	CallExpression	printf ( \"[EstimateAxes] Flipping y-axis (%d, %d)\n\" , num_pos , num_neg )
>3327	ArgumentList	\"[EstimateAxes] Flipping y-axis (%d, %d)\n\"
>3328	Argument	num_neg
>3329	Identifier	num_neg
>3330	Argument	num_pos
>3331	Identifier	num_pos
>3332	Argument	\"[EstimateAxes] Flipping y-axis (%d, %d)\n\"
>3333	PrimaryExpression	\"[EstimateAxes] Flipping y-axis (%d, %d)\n\"
>3334	Callee	printf
>3335	Identifier	printf
>3336	Condition	 
>3337	RelationalExpression	num_neg > num_pos
>3338	Identifier	num_pos
>3339	Identifier	num_neg
>3340	ForStatement	for ( int i = 0 ; i < num_agree ; i ++ )
>3341	CompoundStatement	 
>3342	ExpressionStatement	 
>3343	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , R , yaxis , & dot )
>3344	ArgumentList	1
>3345	Argument	& dot
>3346	UnaryOp	& dot
>3347	Identifier	dot
>3348	UnaryOperator	&
>3349	Argument	yaxis
>3350	Identifier	yaxis
>3351	Argument	R
>3352	Identifier	R
>3353	Argument	1
>3354	PrimaryExpression	1
>3355	Argument	3
>3356	PrimaryExpression	3
>3357	Argument	3
>3358	PrimaryExpression	3
>3359	Argument	1
>3360	PrimaryExpression	1
>3361	Callee	matrix_product
>3362	Identifier	matrix_product
>3363	ExpressionStatement	 
>3364	CallExpression	m_image_data [ agree [ i ] ] . m_camera . GetUprightRotation ( m_image_data [ agree [ i ] ] . m_rotation , R )
>3365	ArgumentList	m_image_data [ agree [ i ] ] . m_rotation
>3366	Argument	R
>3367	Identifier	R
>3368	Argument	m_image_data [ agree [ i ] ] . m_rotation
>3369	MemberAccess	m_image_data [ agree [ i ] ] . m_rotation
>3370	Identifier	m_rotation
>3371	ArrayIndexing	m_image_data [ agree [ i ] ]
>3372	ArrayIndexing	agree [ i ]
>3373	Identifier	i
>3374	Identifier	agree
>3375	Identifier	m_image_data
>3376	Callee	m_image_data [ agree [ i ] ] . m_camera . GetUprightRotation
>3377	MemberAccess	m_image_data [ agree [ i ] ] . m_camera . GetUprightRotation
>3378	Identifier	GetUprightRotation
>3379	MemberAccess	m_image_data [ agree [ i ] ] . m_camera
>3380	Identifier	m_camera
>3381	ArrayIndexing	m_image_data [ agree [ i ] ]
>3382	ArrayIndexing	agree [ i ]
>3383	Identifier	i
>3384	Identifier	agree
>3385	Identifier	m_image_data
>3386	IdentifierDeclStatement	 
>3387	IdentifierDecl	R [ 9 ]
>3388	PrimaryExpression	9
>3389	Identifier	R
>3390	IdentifierDeclType	double [ 9 ]
>3391	IfStatement	if ( dot < - 0.707106781186548 )
>3392	ElseStatement	else
>3393	IfStatement	if ( dot > 0.707106781186548 )
>3394	ExpressionStatement	 
>3395	IncDecOp	num_pos ++
>3396	IncDec	++
>3397	Identifier	num_pos
>3398	Condition	 
>3399	RelationalExpression	dot > 0.707106781186548
>3400	PrimaryExpression	0.707106781186548
>3401	Identifier	dot
>3402	ExpressionStatement	 
>3403	IncDecOp	num_neg ++
>3404	IncDec	++
>3405	Identifier	num_neg
>3406	Condition	 
>3407	RelationalExpression	dot < - 0.707106781186548
>3408	UnaryOp	- 0.707106781186548
>3409	PrimaryExpression	0.707106781186548
>3410	UnaryOperator	-
>3411	Identifier	dot
>3412	ExpressionStatement	 
>3413	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , m_image_data [ agree [ i ] ] . m_camera . m_R + 3 , yaxis , & dot )
>3414	ArgumentList	1
>3415	Argument	& dot
>3416	UnaryOp	& dot
>3417	Identifier	dot
>3418	UnaryOperator	&
>3419	Argument	yaxis
>3420	Identifier	yaxis
>3421	Argument	m_image_data [ agree [ i ] ] . m_camera . m_R + 3
>3422	AdditiveExpression	m_image_data [ agree [ i ] ] . m_camera . m_R + 3
>3423	PrimaryExpression	3
>3424	MemberAccess	m_image_data [ agree [ i ] ] . m_camera . m_R
>3425	Identifier	m_R
>3426	MemberAccess	m_image_data [ agree [ i ] ] . m_camera
>3427	Identifier	m_camera
>3428	ArrayIndexing	m_image_data [ agree [ i ] ]
>3429	ArrayIndexing	agree [ i ]
>3430	Identifier	i
>3431	Identifier	agree
>3432	Identifier	m_image_data
>3433	Argument	1
>3434	PrimaryExpression	1
>3435	Argument	3
>3436	PrimaryExpression	3
>3437	Argument	3
>3438	PrimaryExpression	3
>3439	Argument	1
>3440	PrimaryExpression	1
>3441	Callee	matrix_product
>3442	Identifier	matrix_product
>3443	IdentifierDeclStatement	 
>3444	IdentifierDecl	dot
>3445	Identifier	dot
>3446	IdentifierDeclType	double
>3447	IncDecOp	 
>3448	IncDec	++
>3449	Identifier	i
>3450	Condition	 
>3451	RelationalExpression	i < num_agree
>3452	Identifier	num_agree
>3453	Identifier	i
>3454	ForInit	 
>3455	IdentifierDeclStatement	int i = 0 ;
>3456	IdentifierDecl	i = 0
>3457	AssignmentExpr	i = 0
>3458	PrimaryExpression	0
>3459	Identifier	i
>3460	Identifier	i
>3461	IdentifierDeclType	int
>3462	IdentifierDeclStatement	 
>3463	IdentifierDecl	num_neg = 0
>3464	AssignmentExpr	num_neg = 0
>3465	PrimaryExpression	0
>3466	Identifier	num_neg
>3467	Identifier	num_neg
>3468	IdentifierDeclType	int
>3469	IdentifierDecl	num_pos = 0
>3470	AssignmentExpr	num_pos = 0
>3471	PrimaryExpression	0
>3472	Identifier	num_pos
>3473	Identifier	num_pos
>3474	IdentifierDeclType	int
>3475	IdentifierDeclStatement	 
>3476	IdentifierDecl	num_agree = ( int ) agree . size ( )
>3477	AssignmentExpr	num_agree = ( int ) agree . size ( )
>3478	CastExpression	( int ) agree . size ( )
>3479	CallExpression	agree . size ( )
>3480	ArgumentList	 
>3481	Callee	agree . size
>3482	MemberAccess	agree . size
>3483	Identifier	size
>3484	Identifier	agree
>3485	CastTarget	int
>3486	Identifier	num_agree
>3487	Identifier	num_agree
>3488	IdentifierDeclType	int
>3489	ExpressionStatement	 
>3490	CallExpression	matrix_minimum_unit_norm_solution ( 3 , 3 , RTR , yaxis )
>3491	ArgumentList	3
>3492	Argument	yaxis
>3493	Identifier	yaxis
>3494	Argument	RTR
>3495	Identifier	RTR
>3496	Argument	3
>3497	PrimaryExpression	3
>3498	Argument	3
>3499	PrimaryExpression	3
>3500	Callee	matrix_minimum_unit_norm_solution
>3501	Identifier	matrix_minimum_unit_norm_solution
>3502	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>3503	CompoundStatement	 
>3504	ExpressionStatement	 
>3505	CallExpression	matrix_sum ( 3 , 3 , 3 , 3 , RTR , T , RTR )
>3506	ArgumentList	3
>3507	Argument	RTR
>3508	Identifier	RTR
>3509	Argument	T
>3510	Identifier	T
>3511	Argument	RTR
>3512	Identifier	RTR
>3513	Argument	3
>3514	PrimaryExpression	3
>3515	Argument	3
>3516	PrimaryExpression	3
>3517	Argument	3
>3518	PrimaryExpression	3
>3519	Argument	3
>3520	PrimaryExpression	3
>3521	Callee	matrix_sum
>3522	Identifier	matrix_sum
>3523	ExpressionStatement	 
>3524	CallExpression	matrix_transpose_product ( 1 , 3 , 1 , 3 , R , R , T )
>3525	ArgumentList	1
>3526	Argument	T
>3527	Identifier	T
>3528	Argument	R
>3529	Identifier	R
>3530	Argument	R
>3531	Identifier	R
>3532	Argument	3
>3533	PrimaryExpression	3
>3534	Argument	1
>3535	PrimaryExpression	1
>3536	Argument	3
>3537	PrimaryExpression	3
>3538	Argument	1
>3539	PrimaryExpression	1
>3540	Callee	matrix_transpose_product
>3541	Identifier	matrix_transpose_product
>3542	IdentifierDeclStatement	 
>3543	IdentifierDecl	T [ 9 ]
>3544	PrimaryExpression	9
>3545	Identifier	T
>3546	IdentifierDeclType	double [ 9 ]
>3547	ExpressionStatement	 
>3548	CallExpression	agree . push_back ( i )
>3549	ArgumentList	i
>3550	Argument	i
>3551	Identifier	i
>3552	Callee	agree . push_back
>3553	MemberAccess	agree . push_back
>3554	Identifier	push_back
>3555	Identifier	agree
>3556	IfStatement	if ( fabs ( dot ) > dot_threshold )
>3557	CompoundStatement	 
>3558	ContinueStatement	 
>3559	ExpressionStatement	 
>3560	CallExpression	printf ( \"  outlier
>3561	ArgumentList	\"  outlier
>3562	Argument	i
>3563	Identifier	i
>3564	Argument	\"  outlier
>3565	PrimaryExpression	\"  outlier
>3566	Callee	printf
>3567	Identifier	printf
>3568	Condition	 
>3569	RelationalExpression	fabs ( dot ) > dot_threshold
>3570	Identifier	dot_threshold
>3571	CallExpression	fabs ( dot )
>3572	ArgumentList	dot
>3573	Argument	dot
>3574	Identifier	dot
>3575	Callee	fabs
>3576	Identifier	fabs
>3577	ExpressionStatement	 
>3578	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , R + 0 , ref_axis , & dot )
>3579	ArgumentList	1
>3580	Argument	& dot
>3581	UnaryOp	& dot
>3582	Identifier	dot
>3583	UnaryOperator	&
>3584	Argument	ref_axis
>3585	Identifier	ref_axis
>3586	Argument	R + 0
>3587	AdditiveExpression	R + 0
>3588	PrimaryExpression	0
>3589	Identifier	R
>3590	Argument	1
>3591	PrimaryExpression	1
>3592	Argument	3
>3593	PrimaryExpression	3
>3594	Argument	3
>3595	PrimaryExpression	3
>3596	Argument	1
>3597	PrimaryExpression	1
>3598	Callee	matrix_product
>3599	Identifier	matrix_product
>3600	IdentifierDeclStatement	 
>3601	IdentifierDecl	dot
>3602	Identifier	dot
>3603	IdentifierDeclType	double
>3604	ExpressionStatement	 
>3605	CallExpression	m_image_data [ i ] . m_camera . GetUprightRotation ( m_image_data [ i ] . m_rotation , R )
>3606	ArgumentList	m_image_data [ i ] . m_rotation
>3607	Argument	R
>3608	Identifier	R
>3609	Argument	m_image_data [ i ] . m_rotation
>3610	MemberAccess	m_image_data [ i ] . m_rotation
>3611	Identifier	m_rotation
>3612	ArrayIndexing	m_image_data [ i ]
>3613	Identifier	i
>3614	Identifier	m_image_data
>3615	Callee	m_image_data [ i ] . m_camera . GetUprightRotation
>3616	MemberAccess	m_image_data [ i ] . m_camera . GetUprightRotation
>3617	Identifier	GetUprightRotation
>3618	MemberAccess	m_image_data [ i ] . m_camera
>3619	Identifier	m_camera
>3620	ArrayIndexing	m_image_data [ i ]
>3621	Identifier	i
>3622	Identifier	m_image_data
>3623	IdentifierDeclStatement	 
>3624	IdentifierDecl	R [ 9 ]
>3625	PrimaryExpression	9
>3626	Identifier	R
>3627	IdentifierDeclType	double [ 9 ]
>3628	IfStatement	if ( ! m_image_data [ i ] . m_camera . m_adjusted )
>3629	ContinueStatement	 
>3630	Condition	 
>3631	UnaryOp	! m_image_data [ i ] . m_camera . m_adjusted
>3632	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>3633	Identifier	m_adjusted
>3634	MemberAccess	m_image_data [ i ] . m_camera
>3635	Identifier	m_camera
>3636	ArrayIndexing	m_image_data [ i ]
>3637	Identifier	i
>3638	Identifier	m_image_data
>3639	UnaryOperator	!
>3640	IncDecOp	 
>3641	IncDec	++
>3642	Identifier	i
>3643	Condition	 
>3644	RelationalExpression	i < num_images
>3645	Identifier	num_images
>3646	Identifier	i
>3647	ForInit	 
>3648	IdentifierDeclStatement	int i = 0 ;
>3649	IdentifierDecl	i = 0
>3650	AssignmentExpr	i = 0
>3651	PrimaryExpression	0
>3652	Identifier	i
>3653	Identifier	i
>3654	IdentifierDeclType	int
>3655	IdentifierDeclStatement	 
>3656	IdentifierDecl	agree
>3657	Identifier	agree
>3658	IdentifierDeclType	std 
>3659	IfStatement	if ( m_up_image != - 1 )
>3660	ElseStatement	else
>3661	CompoundStatement	 
>3662	ExpressionStatement	 
>3663	CallExpression	memcpy ( ref_axis , Rbest + 3 , sizeof ( double ) * 3 )
>3664	ArgumentList	ref_axis
>3665	Argument	sizeof ( double ) * 3
>3666	MultiplicativeExpression	sizeof ( double ) * 3
>3667	PrimaryExpression	3
>3668	SizeofExpr	sizeof ( double )
>3669	SizeofOperand	double
>3670	Sizeof	sizeof
>3671	Argument	Rbest + 3
>3672	AdditiveExpression	Rbest + 3
>3673	PrimaryExpression	3
>3674	Identifier	Rbest
>3675	Argument	ref_axis
>3676	Identifier	ref_axis
>3677	Callee	memcpy
>3678	Identifier	memcpy
>3679	ExpressionStatement	 
>3680	CallExpression	m_image_data [ best_image ] . m_camera . GetUprightRotation ( m_image_data [ best_image ] . m_rotation , Rbest )
>3681	ArgumentList	m_image_data [ best_image ] . m_rotation
>3682	Argument	Rbest
>3683	Identifier	Rbest
>3684	Argument	m_image_data [ best_image ] . m_rotation
>3685	MemberAccess	m_image_data [ best_image ] . m_rotation
>3686	Identifier	m_rotation
>3687	ArrayIndexing	m_image_data [ best_image ]
>3688	Identifier	best_image
>3689	Identifier	m_image_data
>3690	Callee	m_image_data [ best_image ] . m_camera . GetUprightRotation
>3691	MemberAccess	m_image_data [ best_image ] . m_camera . GetUprightRotation
>3692	Identifier	GetUprightRotation
>3693	MemberAccess	m_image_data [ best_image ] . m_camera
>3694	Identifier	m_camera
>3695	ArrayIndexing	m_image_data [ best_image ]
>3696	Identifier	best_image
>3697	Identifier	m_image_data
>3698	IdentifierDeclStatement	 
>3699	IdentifierDecl	Rbest [ 9 ]
>3700	PrimaryExpression	9
>3701	Identifier	Rbest
>3702	IdentifierDeclType	double [ 9 ]
>3703	ExpressionStatement	 
>3704	CallExpression	printf ( \"  best image
>3705	ArgumentList	\"  best image
>3706	Argument	max_inliers
>3707	Identifier	max_inliers
>3708	Argument	best_image
>3709	Identifier	best_image
>3710	Argument	\"  best image
>3711	PrimaryExpression	\"  best image
>3712	Callee	printf
>3713	Identifier	printf
>3714	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>3715	CompoundStatement	 
>3716	IfStatement	if ( inliers > max_inliers )
>3717	CompoundStatement	 
>3718	ExpressionStatement	 
>3719	AssignmentExpr	best_image = i
>3720	Identifier	i
>3721	Identifier	best_image
>3722	ExpressionStatement	 
>3723	AssignmentExpr	max_inliers = inliers
>3724	Identifier	inliers
>3725	Identifier	max_inliers
>3726	Condition	 
>3727	RelationalExpression	inliers > max_inliers
>3728	Identifier	max_inliers
>3729	Identifier	inliers
>3730	ForStatement	for ( int j = 0 ; j < num_images ; j ++ )
>3731	CompoundStatement	 
>3732	ExpressionStatement	 
>3733	IncDecOp	inliers ++
>3734	IncDec	++
>3735	Identifier	inliers
>3736	IfStatement	if ( fabs ( dot ) > dot_threshold )
>3737	ContinueStatement	 
>3738	Condition	 
>3739	RelationalExpression	fabs ( dot ) > dot_threshold
>3740	Identifier	dot_threshold
>3741	CallExpression	fabs ( dot )
>3742	ArgumentList	dot
>3743	Argument	dot
>3744	Identifier	dot
>3745	Callee	fabs
>3746	Identifier	fabs
>3747	ExpressionStatement	 
>3748	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , ref_axis , Rj + 0 , & dot )
>3749	ArgumentList	1
>3750	Argument	& dot
>3751	UnaryOp	& dot
>3752	Identifier	dot
>3753	UnaryOperator	&
>3754	Argument	Rj + 0
>3755	AdditiveExpression	Rj + 0
>3756	PrimaryExpression	0
>3757	Identifier	Rj
>3758	Argument	ref_axis
>3759	Identifier	ref_axis
>3760	Argument	1
>3761	PrimaryExpression	1
>3762	Argument	3
>3763	PrimaryExpression	3
>3764	Argument	3
>3765	PrimaryExpression	3
>3766	Argument	1
>3767	PrimaryExpression	1
>3768	Callee	matrix_product
>3769	Identifier	matrix_product
>3770	IdentifierDeclStatement	 
>3771	IdentifierDecl	dot
>3772	Identifier	dot
>3773	IdentifierDeclType	double
>3774	ExpressionStatement	 
>3775	CallExpression	m_image_data [ j ] . m_camera . GetUprightRotation ( m_image_data [ j ] . m_rotation , Rj )
>3776	ArgumentList	m_image_data [ j ] . m_rotation
>3777	Argument	Rj
>3778	Identifier	Rj
>3779	Argument	m_image_data [ j ] . m_rotation
>3780	MemberAccess	m_image_data [ j ] . m_rotation
>3781	Identifier	m_rotation
>3782	ArrayIndexing	m_image_data [ j ]
>3783	Identifier	j
>3784	Identifier	m_image_data
>3785	Callee	m_image_data [ j ] . m_camera . GetUprightRotation
>3786	MemberAccess	m_image_data [ j ] . m_camera . GetUprightRotation
>3787	Identifier	GetUprightRotation
>3788	MemberAccess	m_image_data [ j ] . m_camera
>3789	Identifier	m_camera
>3790	ArrayIndexing	m_image_data [ j ]
>3791	Identifier	j
>3792	Identifier	m_image_data
>3793	IdentifierDeclStatement	 
>3794	IdentifierDecl	Rj [ 9 ]
>3795	PrimaryExpression	9
>3796	Identifier	Rj
>3797	IdentifierDeclType	double [ 9 ]
>3798	IfStatement	if ( i == j )
>3799	ContinueStatement	 
>3800	Condition	 
>3801	EqualityExpression	i == j
>3802	Identifier	j
>3803	Identifier	i
>3804	IfStatement	if ( ! m_image_data [ j ] . m_camera . m_adjusted )
>3805	ContinueStatement	 
>3806	Condition	 
>3807	UnaryOp	! m_image_data [ j ] . m_camera . m_adjusted
>3808	MemberAccess	m_image_data [ j ] . m_camera . m_adjusted
>3809	Identifier	m_adjusted
>3810	MemberAccess	m_image_data [ j ] . m_camera
>3811	Identifier	m_camera
>3812	ArrayIndexing	m_image_data [ j ]
>3813	Identifier	j
>3814	Identifier	m_image_data
>3815	UnaryOperator	!
>3816	IncDecOp	 
>3817	IncDec	++
>3818	Identifier	j
>3819	Condition	 
>3820	RelationalExpression	j < num_images
>3821	Identifier	num_images
>3822	Identifier	j
>3823	ForInit	 
>3824	IdentifierDeclStatement	int j = 0 ;
>3825	IdentifierDecl	j = 0
>3826	AssignmentExpr	j = 0
>3827	PrimaryExpression	0
>3828	Identifier	j
>3829	Identifier	j
>3830	IdentifierDeclType	int
>3831	IdentifierDeclStatement	 
>3832	IdentifierDecl	inliers = 0
>3833	AssignmentExpr	inliers = 0
>3834	PrimaryExpression	0
>3835	Identifier	inliers
>3836	Identifier	inliers
>3837	IdentifierDeclType	int
>3838	ExpressionStatement	 
>3839	CallExpression	memcpy ( ref_axis , Ri + 3 , sizeof ( double ) * 3 )
>3840	ArgumentList	ref_axis
>3841	Argument	sizeof ( double ) * 3
>3842	MultiplicativeExpression	sizeof ( double ) * 3
>3843	PrimaryExpression	3
>3844	SizeofExpr	sizeof ( double )
>3845	SizeofOperand	double
>3846	Sizeof	sizeof
>3847	Argument	Ri + 3
>3848	AdditiveExpression	Ri + 3
>3849	PrimaryExpression	3
>3850	Identifier	Ri
>3851	Argument	ref_axis
>3852	Identifier	ref_axis
>3853	Callee	memcpy
>3854	Identifier	memcpy
>3855	ExpressionStatement	 
>3856	CallExpression	m_image_data [ i ] . m_camera . GetUprightRotation ( m_image_data [ i ] . m_rotation , Ri )
>3857	ArgumentList	m_image_data [ i ] . m_rotation
>3858	Argument	Ri
>3859	Identifier	Ri
>3860	Argument	m_image_data [ i ] . m_rotation
>3861	MemberAccess	m_image_data [ i ] . m_rotation
>3862	Identifier	m_rotation
>3863	ArrayIndexing	m_image_data [ i ]
>3864	Identifier	i
>3865	Identifier	m_image_data
>3866	Callee	m_image_data [ i ] . m_camera . GetUprightRotation
>3867	MemberAccess	m_image_data [ i ] . m_camera . GetUprightRotation
>3868	Identifier	GetUprightRotation
>3869	MemberAccess	m_image_data [ i ] . m_camera
>3870	Identifier	m_camera
>3871	ArrayIndexing	m_image_data [ i ]
>3872	Identifier	i
>3873	Identifier	m_image_data
>3874	IdentifierDeclStatement	 
>3875	IdentifierDecl	Ri [ 9 ]
>3876	PrimaryExpression	9
>3877	Identifier	Ri
>3878	IdentifierDeclType	double [ 9 ]
>3879	IfStatement	if ( ! m_image_data [ i ] . m_camera . m_adjusted )
>3880	ContinueStatement	 
>3881	Condition	 
>3882	UnaryOp	! m_image_data [ i ] . m_camera . m_adjusted
>3883	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>3884	Identifier	m_adjusted
>3885	MemberAccess	m_image_data [ i ] . m_camera
>3886	Identifier	m_camera
>3887	ArrayIndexing	m_image_data [ i ]
>3888	Identifier	i
>3889	Identifier	m_image_data
>3890	UnaryOperator	!
>3891	IncDecOp	 
>3892	IncDec	++
>3893	Identifier	i
>3894	Condition	 
>3895	RelationalExpression	i < num_images
>3896	Identifier	num_images
>3897	Identifier	i
>3898	ForInit	 
>3899	IdentifierDeclStatement	int i = 0 ;
>3900	IdentifierDecl	i = 0
>3901	AssignmentExpr	i = 0
>3902	PrimaryExpression	0
>3903	Identifier	i
>3904	Identifier	i
>3905	IdentifierDeclType	int
>3906	IdentifierDeclStatement	 
>3907	IdentifierDecl	best_image = - 1
>3908	AssignmentExpr	best_image = - 1
>3909	UnaryOp	- 1
>3910	PrimaryExpression	1
>3911	UnaryOperator	-
>3912	Identifier	best_image
>3913	Identifier	best_image
>3914	IdentifierDeclType	int
>3915	IdentifierDeclStatement	 
>3916	IdentifierDecl	max_inliers = 0
>3917	AssignmentExpr	max_inliers = 0
>3918	PrimaryExpression	0
>3919	Identifier	max_inliers
>3920	Identifier	max_inliers
>3921	IdentifierDeclType	int
>3922	CompoundStatement	 
>3923	ExpressionStatement	 
>3924	CallExpression	memcpy ( ref_axis , m_image_data [ m_up_image ] . m_camera . m_R + 3 , sizeof ( double ) * 3 )
>3925	ArgumentList	ref_axis
>3926	Argument	sizeof ( double ) * 3
>3927	MultiplicativeExpression	sizeof ( double ) * 3
>3928	PrimaryExpression	3
>3929	SizeofExpr	sizeof ( double )
>3930	SizeofOperand	double
>3931	Sizeof	sizeof
>3932	Argument	m_image_data [ m_up_image ] . m_camera . m_R + 3
>3933	AdditiveExpression	m_image_data [ m_up_image ] . m_camera . m_R + 3
>3934	PrimaryExpression	3
>3935	MemberAccess	m_image_data [ m_up_image ] . m_camera . m_R
>3936	Identifier	m_R
>3937	MemberAccess	m_image_data [ m_up_image ] . m_camera
>3938	Identifier	m_camera
>3939	ArrayIndexing	m_image_data [ m_up_image ]
>3940	Identifier	m_up_image
>3941	Identifier	m_image_data
>3942	Argument	ref_axis
>3943	Identifier	ref_axis
>3944	Callee	memcpy
>3945	Identifier	memcpy
>3946	ExpressionStatement	 
>3947	AssignmentExpr	found = true
>3948	Identifier	true
>3949	Identifier	found
>3950	Condition	 
>3951	EqualityExpression	m_up_image != - 1
>3952	UnaryOp	- 1
>3953	PrimaryExpression	1
>3954	UnaryOperator	-
>3955	Identifier	m_up_image
>3956	IdentifierDeclStatement	 
>3957	IdentifierDecl	dot_threshold = cos ( DEG2RAD ( min_deg ) )
>3958	AssignmentExpr	dot_threshold = cos ( DEG2RAD ( min_deg ) )
>3959	CallExpression	cos ( DEG2RAD ( min_deg ) )
>3960	ArgumentList	DEG2RAD ( min_deg )
>3961	Argument	DEG2RAD ( min_deg )
>3962	CallExpression	DEG2RAD ( min_deg )
>3963	ArgumentList	min_deg
>3964	Argument	min_deg
>3965	Identifier	min_deg
>3966	Callee	DEG2RAD
>3967	Identifier	DEG2RAD
>3968	Callee	cos
>3969	Identifier	cos
>3970	Identifier	dot_threshold
>3971	Identifier	dot_threshold
>3972	IdentifierDeclType	double
>3973	IdentifierDeclStatement	 
>3974	IdentifierDecl	min_deg = 80.0
>3975	AssignmentExpr	min_deg = 80.0
>3976	PrimaryExpression	80.0
>3977	Identifier	min_deg
>3978	Identifier	min_deg
>3979	IdentifierDeclType	double
>3980	IdentifierDeclStatement	 
>3981	IdentifierDecl	ref_axis [ 3 ]
>3982	PrimaryExpression	3
>3983	Identifier	ref_axis
>3984	IdentifierDeclType	double [ 3 ]
>3985	IdentifierDeclStatement	 
>3986	IdentifierDecl	found = false
>3987	AssignmentExpr	found = false
>3988	Identifier	false
>3989	Identifier	false
>3990	Identifier	found
>3991	IdentifierDeclType	bool
>3992	IdentifierDeclStatement	 
>3993	IdentifierDecl	num_images = GetNumImages ( )
>3994	AssignmentExpr	num_images = GetNumImages ( )
>3995	CallExpression	GetNumImages ( )
>3996	ArgumentList	 
>3997	Callee	GetNumImages
>3998	Identifier	GetNumImages
>3999	Identifier	num_images
>4000	Identifier	num_images
>4001	IdentifierDeclType	int
>4002	IdentifierDeclStatement	 
>4003	IdentifierDecl	RTR [ 9 ] = { 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 }
>4004	AssignmentExpr	RTR [ 9 ] = { 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 }
>4005	InitializerList	0.0
>4006	PrimaryExpression	0.0
>4007	PrimaryExpression	0.0
>4008	PrimaryExpression	0.0
>4009	PrimaryExpression	0.0
>4010	PrimaryExpression	0.0
>4011	PrimaryExpression	0.0
>4012	PrimaryExpression	0.0
>4013	PrimaryExpression	0.0
>4014	PrimaryExpression	0.0
>4015	Identifier	RTR
>4016	PrimaryExpression	9
>4017	Identifier	RTR
>4018	IdentifierDeclType	double [ 9 ]
>4019	ExpressionStatement	 
>4020	CallExpression	printf ( \"[EstimateAxes] Estimating axes\n\" )
>4021	ArgumentList	\"[EstimateAxes] Estimating axes\n\"
>4022	Argument	\"[EstimateAxes] Estimating axes\n\"
>4023	PrimaryExpression	\"[EstimateAxes] Estimating axes\n\"
>4024	Callee	printf
>4025	Identifier	printf
>4090	FunctionDef	BaseApp 
>4091	ParameterList	double * center , double * up , double * x_axis , double * z_axis , double & scale
>4092	Parameter	 
>4093	Identifier	scale
>4094	ParameterType	double &
>4095	Parameter	 
>4096	Identifier	z_axis
>4097	ParameterType	double *
>4098	Parameter	 
>4099	Identifier	x_axis
>4100	ParameterType	double *
>4101	Parameter	 
>4102	Identifier	up
>4103	ParameterType	double *
>4104	Parameter	 
>4105	Identifier	center
>4106	ParameterType	double *
>4107	ReturnType	void
>4108	CompoundStatement	 
>4109	ExpressionStatement	 
>4110	Identifier	cc
>4111	Statement	 
>4112	Statement	 
>4113	Statement	 
>4114	IfStatement	if ( ! m_metric )
>4115	ElseStatement	else
>4116	ExpressionStatement	 
>4117	AssignmentExpr	scale = 1000.0
>4118	PrimaryExpression	1000.0
>4119	Identifier	scale
>4120	ExpressionStatement	 
>4121	AssignmentExpr	scale = m_scale * rms_distance
>4122	MultiplicativeExpression	m_scale * rms_distance
>4123	Identifier	rms_distance
>4124	Identifier	m_scale
>4125	Identifier	scale
>4126	Condition	 
>4127	UnaryOp	! m_metric
>4128	Identifier	m_metric
>4129	UnaryOperator	!
>4130	ExpressionStatement	 
>4131	CallExpression	matrix_cross ( x_axis , up , z_axis )
>4132	ArgumentList	x_axis
>4133	Argument	z_axis
>4134	Identifier	z_axis
>4135	Argument	up
>4136	Identifier	up
>4137	Argument	x_axis
>4138	Identifier	x_axis
>4139	Callee	matrix_cross
>4140	Identifier	matrix_cross
>4141	ExpressionStatement	 
>4142	CallExpression	matrix_scale ( 3 , 1 , x_perp , 1.0 / norm , x_axis )
>4143	ArgumentList	3
>4144	Argument	x_axis
>4145	Identifier	x_axis
>4146	Argument	1.0 / norm
>4147	MultiplicativeExpression	1.0 / norm
>4148	Identifier	norm
>4149	PrimaryExpression	1.0
>4150	Argument	x_perp
>4151	Identifier	x_perp
>4152	Argument	1
>4153	PrimaryExpression	1
>4154	Argument	3
>4155	PrimaryExpression	3
>4156	Callee	matrix_scale
>4157	Identifier	matrix_scale
>4158	ExpressionStatement	 
>4159	AssignmentExpr	norm = matrix_norm ( 3 , 1 , x_perp )
>4160	CallExpression	matrix_norm ( 3 , 1 , x_perp )
>4161	ArgumentList	3
>4162	Argument	x_perp
>4163	Identifier	x_perp
>4164	Argument	1
>4165	PrimaryExpression	1
>4166	Argument	3
>4167	PrimaryExpression	3
>4168	Callee	matrix_norm
>4169	Identifier	matrix_norm
>4170	Identifier	norm
>4171	ExpressionStatement	 
>4172	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , x_axis , x_par , x_perp )
>4173	ArgumentList	3
>4174	Argument	x_perp
>4175	Identifier	x_perp
>4176	Argument	x_par
>4177	Identifier	x_par
>4178	Argument	x_axis
>4179	Identifier	x_axis
>4180	Argument	1
>4181	PrimaryExpression	1
>4182	Argument	3
>4183	PrimaryExpression	3
>4184	Argument	1
>4185	PrimaryExpression	1
>4186	Argument	3
>4187	PrimaryExpression	3
>4188	Callee	matrix_diff
>4189	Identifier	matrix_diff
>4190	ExpressionStatement	 
>4191	CallExpression	matrix_scale ( 3 , 1 , up , dot , x_par )
>4192	ArgumentList	3
>4193	Argument	x_par
>4194	Identifier	x_par
>4195	Argument	dot
>4196	Identifier	dot
>4197	Argument	up
>4198	Identifier	up
>4199	Argument	1
>4200	PrimaryExpression	1
>4201	Argument	3
>4202	PrimaryExpression	3
>4203	Callee	matrix_scale
>4204	Identifier	matrix_scale
>4205	ExpressionStatement	 
>4206	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , up , x_axis , & dot )
>4207	ArgumentList	1
>4208	Argument	& dot
>4209	UnaryOp	& dot
>4210	Identifier	dot
>4211	UnaryOperator	&
>4212	Argument	x_axis
>4213	Identifier	x_axis
>4214	Argument	up
>4215	Identifier	up
>4216	Argument	1
>4217	PrimaryExpression	1
>4218	Argument	3
>4219	PrimaryExpression	3
>4220	Argument	3
>4221	PrimaryExpression	3
>4222	Argument	1
>4223	PrimaryExpression	1
>4224	Callee	matrix_product
>4225	Identifier	matrix_product
>4226	IdentifierDeclStatement	 
>4227	IdentifierDecl	dot
>4228	Identifier	dot
>4229	IdentifierDeclType	double
>4230	IdentifierDeclStatement	 
>4231	IdentifierDecl	x_perp [ 3 ]
>4232	PrimaryExpression	3
>4233	Identifier	x_perp
>4234	IdentifierDeclType	double [ 3 ]
>4235	IdentifierDecl	x_par [ 3 ]
>4236	PrimaryExpression	3
>4237	Identifier	x_par
>4238	IdentifierDeclType	double [ 3 ]
>4239	ExpressionStatement	 
>4240	CallExpression	matrix_scale ( 3 , 1 , x_axis , 1.0 / norm , x_axis )
>4241	ArgumentList	3
>4242	Argument	x_axis
>4243	Identifier	x_axis
>4244	Argument	1.0 / norm
>4245	MultiplicativeExpression	1.0 / norm
>4246	Identifier	norm
>4247	PrimaryExpression	1.0
>4248	Argument	x_axis
>4249	Identifier	x_axis
>4250	Argument	1
>4251	PrimaryExpression	1
>4252	Argument	3
>4253	PrimaryExpression	3
>4254	Callee	matrix_scale
>4255	Identifier	matrix_scale
>4256	ExpressionStatement	 
>4257	AssignmentExpr	norm = matrix_norm ( 3 , 1 , x_axis )
>4258	CallExpression	matrix_norm ( 3 , 1 , x_axis )
>4259	ArgumentList	3
>4260	Argument	x_axis
>4261	Identifier	x_axis
>4262	Argument	1
>4263	PrimaryExpression	1
>4264	Argument	3
>4265	PrimaryExpression	3
>4266	Callee	matrix_norm
>4267	Identifier	matrix_norm
>4268	Identifier	norm
>4269	ExpressionStatement	 
>4270	AssignmentExpr	x_axis [ 2 ] = Vz ( cc [ 0 ] ) + mean [ 2 ]
>4271	AdditiveExpression	Vz ( cc [ 0 ] ) + mean [ 2 ]
>4272	ArrayIndexing	mean [ 2 ]
>4273	PrimaryExpression	2
>4274	Identifier	mean
>4275	CallExpression	Vz ( cc [ 0 ] )
>4276	ArgumentList	cc [ 0 ]
>4277	Argument	cc [ 0 ]
>4278	ArrayIndexing	cc [ 0 ]
>4279	PrimaryExpression	0
>4280	Identifier	cc
>4281	Callee	Vz
>4282	Identifier	Vz
>4283	ArrayIndexing	x_axis [ 2 ]
>4284	PrimaryExpression	2
>4285	Identifier	x_axis
>4286	ExpressionStatement	 
>4287	AssignmentExpr	x_axis [ 1 ] = Vy ( cc [ 0 ] ) + mean [ 1 ]
>4288	AdditiveExpression	Vy ( cc [ 0 ] ) + mean [ 1 ]
>4289	ArrayIndexing	mean [ 1 ]
>4290	PrimaryExpression	1
>4291	Identifier	mean
>4292	CallExpression	Vy ( cc [ 0 ] )
>4293	ArgumentList	cc [ 0 ]
>4294	Argument	cc [ 0 ]
>4295	ArrayIndexing	cc [ 0 ]
>4296	PrimaryExpression	0
>4297	Identifier	cc
>4298	Callee	Vy
>4299	Identifier	Vy
>4300	ArrayIndexing	x_axis [ 1 ]
>4301	PrimaryExpression	1
>4302	Identifier	x_axis
>4303	ExpressionStatement	 
>4304	AssignmentExpr	x_axis [ 0 ] = Vx ( cc [ 0 ] ) + mean [ 0 ]
>4305	AdditiveExpression	Vx ( cc [ 0 ] ) + mean [ 0 ]
>4306	ArrayIndexing	mean [ 0 ]
>4307	PrimaryExpression	0
>4308	Identifier	mean
>4309	CallExpression	Vx ( cc [ 0 ] )
>4310	ArgumentList	cc [ 0 ]
>4311	Argument	cc [ 0 ]
>4312	ArrayIndexing	cc [ 0 ]
>4313	PrimaryExpression	0
>4314	Identifier	cc
>4315	Callee	Vx
>4316	Identifier	Vx
>4317	ArrayIndexing	x_axis [ 0 ]
>4318	PrimaryExpression	0
>4319	Identifier	x_axis
>4320	IfStatement	if ( num_pos >= num_neg )
>4321	ElseStatement	else
>4322	CompoundStatement	 
>4323	ExpressionStatement	 
>4324	AssignmentExpr	up [ 2 ] = - plane [ 2 ]
>4325	UnaryOp	- plane [ 2 ]
>4326	ArrayIndexing	plane [ 2 ]
>4327	PrimaryExpression	2
>4328	Identifier	plane
>4329	UnaryOperator	-
>4330	ArrayIndexing	up [ 2 ]
>4331	PrimaryExpression	2
>4332	Identifier	up
>4333	ExpressionStatement	 
>4334	AssignmentExpr	up [ 1 ] = - plane [ 1 ]
>4335	UnaryOp	- plane [ 1 ]
>4336	ArrayIndexing	plane [ 1 ]
>4337	PrimaryExpression	1
>4338	Identifier	plane
>4339	UnaryOperator	-
>4340	ArrayIndexing	up [ 1 ]
>4341	PrimaryExpression	1
>4342	Identifier	up
>4343	ExpressionStatement	 
>4344	AssignmentExpr	up [ 0 ] = - plane [ 0 ]
>4345	UnaryOp	- plane [ 0 ]
>4346	ArrayIndexing	plane [ 0 ]
>4347	PrimaryExpression	0
>4348	Identifier	plane
>4349	UnaryOperator	-
>4350	ArrayIndexing	up [ 0 ]
>4351	PrimaryExpression	0
>4352	Identifier	up
>4353	CompoundStatement	 
>4354	ExpressionStatement	 
>4355	AssignmentExpr	up [ 2 ] = plane [ 2 ]
>4356	ArrayIndexing	plane [ 2 ]
>4357	PrimaryExpression	2
>4358	Identifier	plane
>4359	ArrayIndexing	up [ 2 ]
>4360	PrimaryExpression	2
>4361	Identifier	up
>4362	ExpressionStatement	 
>4363	AssignmentExpr	up [ 1 ] = plane [ 1 ]
>4364	ArrayIndexing	plane [ 1 ]
>4365	PrimaryExpression	1
>4366	Identifier	plane
>4367	ArrayIndexing	up [ 1 ]
>4368	PrimaryExpression	1
>4369	Identifier	up
>4370	ExpressionStatement	 
>4371	AssignmentExpr	up [ 0 ] = plane [ 0 ]
>4372	ArrayIndexing	plane [ 0 ]
>4373	PrimaryExpression	0
>4374	Identifier	plane
>4375	ArrayIndexing	up [ 0 ]
>4376	PrimaryExpression	0
>4377	Identifier	up
>4378	Condition	 
>4379	RelationalExpression	num_pos >= num_neg
>4380	Identifier	num_neg
>4381	Identifier	num_pos
>4382	ExpressionStatement	 
>4383	CallExpression	printf ( \"num_neg = %d\n\" , num_neg )
>4384	ArgumentList	\"num_neg = %d\n\"
>4385	Argument	num_neg
>4386	Identifier	num_neg
>4387	Argument	\"num_neg = %d\n\"
>4388	PrimaryExpression	\"num_neg = %d\n\"
>4389	Callee	printf
>4390	Identifier	printf
>4391	ExpressionStatement	 
>4392	CallExpression	printf ( \"num_pos = %d\n\" , num_pos )
>4393	ArgumentList	\"num_pos = %d\n\"
>4394	Argument	num_pos
>4395	Identifier	num_pos
>4396	Argument	\"num_pos = %d\n\"
>4397	PrimaryExpression	\"num_pos = %d\n\"
>4398	Callee	printf
>4399	Identifier	printf
>4400	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>4401	CompoundStatement	 
>4402	IfStatement	if ( dot < 0.0 )
>4403	ElseStatement	else
>4404	ExpressionStatement	 
>4405	IncDecOp	num_pos ++
>4406	IncDec	++
>4407	Identifier	num_pos
>4408	ExpressionStatement	 
>4409	IncDecOp	num_neg ++
>4410	IncDec	++
>4411	Identifier	num_neg
>4412	Condition	 
>4413	RelationalExpression	dot < 0.0
>4414	PrimaryExpression	0.0
>4415	Identifier	dot
>4416	IfStatement	if ( fabs ( dot ) < 0.8 )
>4417	ContinueStatement	 
>4418	Condition	 
>4419	RelationalExpression	fabs ( dot ) < 0.8
>4420	PrimaryExpression	0.8
>4421	CallExpression	fabs ( dot )
>4422	ArgumentList	dot
>4423	Argument	dot
>4424	Identifier	dot
>4425	Callee	fabs
>4426	Identifier	fabs
>4427	ExpressionStatement	 
>4428	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , up_cam , plane , & dot )
>4429	ArgumentList	1
>4430	Argument	& dot
>4431	UnaryOp	& dot
>4432	Identifier	dot
>4433	UnaryOperator	&
>4434	Argument	plane
>4435	Identifier	plane
>4436	Argument	up_cam
>4437	Identifier	up_cam
>4438	Argument	1
>4439	PrimaryExpression	1
>4440	Argument	3
>4441	PrimaryExpression	3
>4442	Argument	3
>4443	PrimaryExpression	3
>4444	Argument	1
>4445	PrimaryExpression	1
>4446	Callee	matrix_product
>4447	Identifier	matrix_product
>4448	IdentifierDeclStatement	 
>4449	IdentifierDecl	dot
>4450	Identifier	dot
>4451	IdentifierDeclType	double
>4452	ExpressionStatement	 
>4453	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , R , y_axis , up_cam )
>4454	ArgumentList	3
>4455	Argument	up_cam
>4456	Identifier	up_cam
>4457	Argument	y_axis
>4458	Identifier	y_axis
>4459	Argument	R
>4460	Identifier	R
>4461	Argument	1
>4462	PrimaryExpression	1
>4463	Argument	3
>4464	PrimaryExpression	3
>4465	Argument	3
>4466	PrimaryExpression	3
>4467	Argument	3
>4468	PrimaryExpression	3
>4469	Callee	matrix_product
>4470	Identifier	matrix_product
>4471	IdentifierDeclStatement	 
>4472	IdentifierDecl	up_cam [ 3 ]
>4473	PrimaryExpression	3
>4474	Identifier	up_cam
>4475	IdentifierDeclType	double [ 3 ]
>4476	ExpressionStatement	 
>4477	CallExpression	m_image_data [ i ] . m_camera . GetPose ( R )
>4478	ArgumentList	R
>4479	Argument	R
>4480	Identifier	R
>4481	Callee	m_image_data [ i ] . m_camera . GetPose
>4482	MemberAccess	m_image_data [ i ] . m_camera . GetPose
>4483	Identifier	GetPose
>4484	MemberAccess	m_image_data [ i ] . m_camera
>4485	Identifier	m_camera
>4486	ArrayIndexing	m_image_data [ i ]
>4487	Identifier	i
>4488	Identifier	m_image_data
>4489	IdentifierDeclStatement	 
>4490	IdentifierDecl	R [ 9 ]
>4491	PrimaryExpression	9
>4492	Identifier	R
>4493	IdentifierDeclType	double [ 9 ]
>4494	IfStatement	if ( ! m_image_data [ i ] . m_camera . m_adjusted )
>4495	ContinueStatement	 
>4496	Condition	 
>4497	UnaryOp	! m_image_data [ i ] . m_camera . m_adjusted
>4498	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>4499	Identifier	m_adjusted
>4500	MemberAccess	m_image_data [ i ] . m_camera
>4501	Identifier	m_camera
>4502	ArrayIndexing	m_image_data [ i ]
>4503	Identifier	i
>4504	Identifier	m_image_data
>4505	UnaryOperator	!
>4506	IncDecOp	 
>4507	IncDec	++
>4508	Identifier	i
>4509	Condition	 
>4510	RelationalExpression	i < num_images
>4511	Identifier	num_images
>4512	Identifier	i
>4513	ForInit	 
>4514	IdentifierDeclStatement	int i = 0 ;
>4515	IdentifierDecl	i = 0
>4516	AssignmentExpr	i = 0
>4517	PrimaryExpression	0
>4518	Identifier	i
>4519	Identifier	i
>4520	IdentifierDeclType	int
>4521	IdentifierDeclStatement	 
>4522	IdentifierDecl	y_axis [ 3 ] = { 0.0 , 1.0 , 0.0 }
>4523	AssignmentExpr	y_axis [ 3 ] = { 0.0 , 1.0 , 0.0 }
>4524	InitializerList	0.0
>4525	PrimaryExpression	0.0
>4526	PrimaryExpression	1.0
>4527	PrimaryExpression	0.0
>4528	Identifier	y_axis
>4529	PrimaryExpression	3
>4530	Identifier	y_axis
>4531	IdentifierDeclType	double [ 3 ]
>4532	IdentifierDeclStatement	 
>4533	IdentifierDecl	num_pos = 0
>4534	AssignmentExpr	num_pos = 0
>4535	PrimaryExpression	0
>4536	Identifier	num_pos
>4537	Identifier	num_pos
>4538	IdentifierDeclType	int
>4539	IdentifierDeclStatement	 
>4540	IdentifierDecl	num_neg = 0
>4541	AssignmentExpr	num_neg = 0
>4542	PrimaryExpression	0
>4543	Identifier	num_neg
>4544	Identifier	num_neg
>4545	IdentifierDeclType	int
>4546	ExpressionStatement	 
>4547	AssignmentExpr	center [ 2 ] = mean [ 2 ]
>4548	ArrayIndexing	mean [ 2 ]
>4549	PrimaryExpression	2
>4550	Identifier	mean
>4551	ArrayIndexing	center [ 2 ]
>4552	PrimaryExpression	2
>4553	Identifier	center
>4554	ExpressionStatement	 
>4555	AssignmentExpr	center [ 1 ] = mean [ 1 ]
>4556	ArrayIndexing	mean [ 1 ]
>4557	PrimaryExpression	1
>4558	Identifier	mean
>4559	ArrayIndexing	center [ 1 ]
>4560	PrimaryExpression	1
>4561	Identifier	center
>4562	ExpressionStatement	 
>4563	AssignmentExpr	center [ 0 ] = mean [ 0 ]
>4564	ArrayIndexing	mean [ 0 ]
>4565	PrimaryExpression	0
>4566	Identifier	mean
>4567	ArrayIndexing	center [ 0 ]
>4568	PrimaryExpression	0
>4569	Identifier	center
>4570	IfStatement	if ( m_up_image == - 1 )
>4571	ElseStatement	else
>4572	CompoundStatement	 
>4573	ExpressionStatement	 
>4574	CallExpression	v3_svd ( num_cameras , cc , U , S , VT )
>4575	ArgumentList	num_cameras
>4576	Argument	VT
>4577	Identifier	VT
>4578	Argument	S
>4579	Identifier	S
>4580	Argument	U
>4581	Identifier	U
>4582	Argument	cc
>4583	Identifier	cc
>4584	Argument	num_cameras
>4585	Identifier	num_cameras
>4586	Callee	v3_svd
>4587	Identifier	v3_svd
>4588	ForStatement	for ( int i = 0 ; i < num_cameras ; i ++ )
>4589	CompoundStatement	 
>4590	ExpressionStatement	 
>4591	AssignmentExpr	cc [ i ] = v3_new ( pt_perp [ 0 ] , pt_perp [ 1 ] , pt_perp [ 2 ] )
>4592	CallExpression	v3_new ( pt_perp [ 0 ] , pt_perp [ 1 ] , pt_perp [ 2 ] )
>4593	ArgumentList	pt_perp [ 0 ]
>4594	Argument	pt_perp [ 2 ]
>4595	ArrayIndexing	pt_perp [ 2 ]
>4596	PrimaryExpression	2
>4597	Identifier	pt_perp
>4598	Argument	pt_perp [ 1 ]
>4599	ArrayIndexing	pt_perp [ 1 ]
>4600	PrimaryExpression	1
>4601	Identifier	pt_perp
>4602	Argument	pt_perp [ 0 ]
>4603	ArrayIndexing	pt_perp [ 0 ]
>4604	PrimaryExpression	0
>4605	Identifier	pt_perp
>4606	Callee	v3_new
>4607	Identifier	v3_new
>4608	ArrayIndexing	cc [ i ]
>4609	Identifier	i
>4610	Identifier	cc
>4611	ExpressionStatement	 
>4612	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , pt , pt_par , pt_perp )
>4613	ArgumentList	3
>4614	Argument	pt_perp
>4615	Identifier	pt_perp
>4616	Argument	pt_par
>4617	Identifier	pt_par
>4618	Argument	pt
>4619	Identifier	pt
>4620	Argument	1
>4621	PrimaryExpression	1
>4622	Argument	3
>4623	PrimaryExpression	3
>4624	Argument	1
>4625	PrimaryExpression	1
>4626	Argument	3
>4627	PrimaryExpression	3
>4628	Callee	matrix_diff
>4629	Identifier	matrix_diff
>4630	ExpressionStatement	 
>4631	CallExpression	matrix_scale ( 3 , 1 , plane , dot , pt_par )
>4632	ArgumentList	3
>4633	Argument	pt_par
>4634	Identifier	pt_par
>4635	Argument	dot
>4636	Identifier	dot
>4637	Argument	plane
>4638	Identifier	plane
>4639	Argument	1
>4640	PrimaryExpression	1
>4641	Argument	3
>4642	PrimaryExpression	3
>4643	Callee	matrix_scale
>4644	Identifier	matrix_scale
>4645	ExpressionStatement	 
>4646	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , pt , plane , & dot )
>4647	ArgumentList	1
>4648	Argument	& dot
>4649	UnaryOp	& dot
>4650	Identifier	dot
>4651	UnaryOperator	&
>4652	Argument	plane
>4653	Identifier	plane
>4654	Argument	pt
>4655	Identifier	pt
>4656	Argument	1
>4657	PrimaryExpression	1
>4658	Argument	3
>4659	PrimaryExpression	3
>4660	Argument	3
>4661	PrimaryExpression	3
>4662	Argument	1
>4663	PrimaryExpression	1
>4664	Callee	matrix_product
>4665	Identifier	matrix_product
>4666	IdentifierDeclStatement	 
>4667	IdentifierDecl	dot
>4668	Identifier	dot
>4669	IdentifierDeclType	double
>4670	IdentifierDeclStatement	 
>4671	IdentifierDecl	pt_perp [ 3 ]
>4672	PrimaryExpression	3
>4673	Identifier	pt_perp
>4674	IdentifierDeclType	double [ 3 ]
>4675	IdentifierDecl	pt_par [ 3 ]
>4676	PrimaryExpression	3
>4677	Identifier	pt_par
>4678	IdentifierDeclType	double [ 3 ]
>4679	IdentifierDeclStatement	 
>4680	IdentifierDecl	pt [ 3 ] = { Vx ( cc [ i ] ) , Vy ( cc [ i ] ) , Vz ( cc [ i ] ) }
>4681	AssignmentExpr	pt [ 3 ] = { Vx ( cc [ i ] ) , Vy ( cc [ i ] ) , Vz ( cc [ i ] ) }
>4682	InitializerList	Vx ( cc [ i ] )
>4683	CallExpression	Vz ( cc [ i ] )
>4684	ArgumentList	cc [ i ]
>4685	Argument	cc [ i ]
>4686	ArrayIndexing	cc [ i ]
>4687	Identifier	i
>4688	Identifier	cc
>4689	Callee	Vz
>4690	Identifier	Vz
>4691	CallExpression	Vy ( cc [ i ] )
>4692	ArgumentList	cc [ i ]
>4693	Argument	cc [ i ]
>4694	ArrayIndexing	cc [ i ]
>4695	Identifier	i
>4696	Identifier	cc
>4697	Callee	Vy
>4698	Identifier	Vy
>4699	CallExpression	Vx ( cc [ i ] )
>4700	ArgumentList	cc [ i ]
>4701	Argument	cc [ i ]
>4702	ArrayIndexing	cc [ i ]
>4703	Identifier	i
>4704	Identifier	cc
>4705	Callee	Vx
>4706	Identifier	Vx
>4707	Identifier	pt
>4708	PrimaryExpression	3
>4709	Identifier	pt
>4710	IdentifierDeclType	double [ 3 ]
>4711	IncDecOp	 
>4712	IncDec	++
>4713	Identifier	i
>4714	Condition	 
>4715	RelationalExpression	i < num_cameras
>4716	Identifier	num_cameras
>4717	Identifier	i
>4718	ForInit	 
>4719	IdentifierDeclStatement	int i = 0 ;
>4720	IdentifierDecl	i = 0
>4721	AssignmentExpr	i = 0
>4722	PrimaryExpression	0
>4723	Identifier	i
>4724	Identifier	i
>4725	IdentifierDeclType	int
>4726	ExpressionStatement	 
>4727	AssignmentExpr	plane [ 2 ] /= norm
>4728	Identifier	norm
>4729	ArrayIndexing	plane [ 2 ]
>4730	PrimaryExpression	2
>4731	Identifier	plane
>4732	ExpressionStatement	 
>4733	AssignmentExpr	plane [ 1 ] /= norm
>4734	Identifier	norm
>4735	ArrayIndexing	plane [ 1 ]
>4736	PrimaryExpression	1
>4737	Identifier	plane
>4738	ExpressionStatement	 
>4739	AssignmentExpr	plane [ 0 ] /= norm
>4740	Identifier	norm
>4741	ArrayIndexing	plane [ 0 ]
>4742	PrimaryExpression	0
>4743	Identifier	plane
>4744	ExpressionStatement	 
>4745	AssignmentExpr	norm = matrix_norm ( 3 , 1 , plane )
>4746	CallExpression	matrix_norm ( 3 , 1 , plane )
>4747	ArgumentList	3
>4748	Argument	plane
>4749	Identifier	plane
>4750	Argument	1
>4751	PrimaryExpression	1
>4752	Argument	3
>4753	PrimaryExpression	3
>4754	Callee	matrix_norm
>4755	Identifier	matrix_norm
>4756	Identifier	norm
>4757	ExpressionStatement	 
>4758	CallExpression	matrix_transpose_product ( 3 , 3 , 3 , 1 , m_image_data [ m_up_image ] . m_camera . m_R , yaxis , plane )
>4759	ArgumentList	3
>4760	Argument	plane
>4761	Identifier	plane
>4762	Argument	yaxis
>4763	Identifier	yaxis
>4764	Argument	m_image_data [ m_up_image ] . m_camera . m_R
>4765	MemberAccess	m_image_data [ m_up_image ] . m_camera . m_R
>4766	Identifier	m_R
>4767	MemberAccess	m_image_data [ m_up_image ] . m_camera
>4768	Identifier	m_camera
>4769	ArrayIndexing	m_image_data [ m_up_image ]
>4770	Identifier	m_up_image
>4771	Identifier	m_image_data
>4772	Argument	1
>4773	PrimaryExpression	1
>4774	Argument	3
>4775	PrimaryExpression	3
>4776	Argument	3
>4777	PrimaryExpression	3
>4778	Argument	3
>4779	PrimaryExpression	3
>4780	Callee	matrix_transpose_product
>4781	Identifier	matrix_transpose_product
>4782	IdentifierDeclStatement	 
>4783	IdentifierDecl	yaxis [ 3 ] = { 0.0 , 1.0 , 0.0 }
>4784	AssignmentExpr	yaxis [ 3 ] = { 0.0 , 1.0 , 0.0 }
>4785	InitializerList	0.0
>4786	PrimaryExpression	0.0
>4787	PrimaryExpression	1.0
>4788	PrimaryExpression	0.0
>4789	Identifier	yaxis
>4790	PrimaryExpression	3
>4791	Identifier	yaxis
>4792	IdentifierDeclType	double [ 3 ]
>4793	IfStatement	if ( ! m_image_data [ m_up_image ] . m_camera . m_adjusted )
>4794	CompoundStatement	 
>4795	ExpressionStatement	 
>4796	CallExpression	exit ( 1 )
>4797	ArgumentList	1
>4798	Argument	1
>4799	PrimaryExpression	1
>4800	Callee	exit
>4801	Identifier	exit
>4802	ExpressionStatement	 
>4803	Statement	 
>4804	Statement	 
>4805	Statement	 
>4806	Statement	 
>4807	Statement	 
>4808	Condition	 
>4809	UnaryOp	! m_image_data [ m_up_image ] . m_camera . m_adjusted
>4810	MemberAccess	m_image_data [ m_up_image ] . m_camera . m_adjusted
>4811	Identifier	m_adjusted
>4812	MemberAccess	m_image_data [ m_up_image ] . m_camera
>4813	Identifier	m_camera
>4814	ArrayIndexing	m_image_data [ m_up_image ]
>4815	Identifier	m_up_image
>4816	Identifier	m_image_data
>4817	UnaryOperator	!
>4818	CompoundStatement	 
>4819	ExpressionStatement	 
>4820	AssignmentExpr	plane [ 2 ] /= norm
>4821	Identifier	norm
>4822	ArrayIndexing	plane [ 2 ]
>4823	PrimaryExpression	2
>4824	Identifier	plane
>4825	ExpressionStatement	 
>4826	AssignmentExpr	plane [ 1 ] /= norm
>4827	Identifier	norm
>4828	ArrayIndexing	plane [ 1 ]
>4829	PrimaryExpression	1
>4830	Identifier	plane
>4831	ExpressionStatement	 
>4832	AssignmentExpr	plane [ 0 ] /= norm
>4833	Identifier	norm
>4834	ArrayIndexing	plane [ 0 ]
>4835	PrimaryExpression	0
>4836	Identifier	plane
>4837	ExpressionStatement	 
>4838	AssignmentExpr	norm = matrix_norm ( 3 , 1 , plane )
>4839	CallExpression	matrix_norm ( 3 , 1 , plane )
>4840	ArgumentList	3
>4841	Argument	plane
>4842	Identifier	plane
>4843	Argument	1
>4844	PrimaryExpression	1
>4845	Argument	3
>4846	PrimaryExpression	3
>4847	Callee	matrix_norm
>4848	Identifier	matrix_norm
>4849	Identifier	norm
>4850	ExpressionStatement	 
>4851	CallExpression	v3_svd ( num_cameras , cc , U , S , VT )
>4852	ArgumentList	num_cameras
>4853	Argument	VT
>4854	Identifier	VT
>4855	Argument	S
>4856	Identifier	S
>4857	Argument	U
>4858	Identifier	U
>4859	Argument	cc
>4860	Identifier	cc
>4861	Argument	num_cameras
>4862	Identifier	num_cameras
>4863	Callee	v3_svd
>4864	Identifier	v3_svd
>4865	ExpressionStatement	 
>4866	CallExpression	printf ( \"inliers
>4867	ArgumentList	\"inliers
>4868	Argument	num_cameras
>4869	Identifier	num_cameras
>4870	Argument	inliers_out
>4871	Identifier	inliers_out
>4872	Argument	\"inliers
>4873	PrimaryExpression	\"inliers
>4874	Callee	printf
>4875	Identifier	printf
>4876	ExpressionStatement	 
>4877	CallExpression	fit_3D_plane_ortreg_ransac ( num_cameras , cc , 1024 , scale_factor * rms_distance , & inliers_out , plane )
>4878	ArgumentList	num_cameras
>4879	Argument	plane
>4880	Identifier	plane
>4881	Argument	& inliers_out
>4882	UnaryOp	& inliers_out
>4883	Identifier	inliers_out
>4884	UnaryOperator	&
>4885	Argument	scale_factor * rms_distance
>4886	MultiplicativeExpression	scale_factor * rms_distance
>4887	Identifier	rms_distance
>4888	Identifier	scale_factor
>4889	Argument	1024
>4890	PrimaryExpression	1024
>4891	Argument	cc
>4892	Identifier	cc
>4893	Argument	num_cameras
>4894	Identifier	num_cameras
>4895	Callee	fit_3D_plane_ortreg_ransac
>4896	Identifier	fit_3D_plane_ortreg_ransac
>4897	IdentifierDeclStatement	 
>4898	IdentifierDecl	scale_factor = 0.05
>4899	AssignmentExpr	scale_factor = 0.05
>4900	PrimaryExpression	0.05
>4901	Identifier	scale_factor
>4902	Identifier	scale_factor
>4903	IdentifierDeclType	double
>4904	IdentifierDeclStatement	 
>4905	IdentifierDecl	inliers_out
>4906	Identifier	inliers_out
>4907	IdentifierDeclType	int
>4908	Condition	 
>4909	EqualityExpression	m_up_image == - 1
>4910	UnaryOp	- 1
>4911	PrimaryExpression	1
>4912	UnaryOperator	-
>4913	Identifier	m_up_image
>4914	IdentifierDeclStatement	 
>4915	IdentifierDecl	norm
>4916	Identifier	norm
>4917	IdentifierDeclType	double
>4918	IdentifierDeclStatement	 
>4919	IdentifierDecl	VT [ 9 ]
>4920	PrimaryExpression	9
>4921	Identifier	VT
>4922	IdentifierDeclType	double [ 9 ]
>4923	IdentifierDecl	S [ 3 ]
>4924	PrimaryExpression	3
>4925	Identifier	S
>4926	IdentifierDeclType	double [ 3 ]
>4927	IdentifierDecl	U [ 9 ]
>4928	PrimaryExpression	9
>4929	Identifier	U
>4930	IdentifierDeclType	double [ 9 ]
>4931	IdentifierDeclStatement	 
>4932	IdentifierDecl	plane [ 4 ]
>4933	PrimaryExpression	4
>4934	Identifier	plane
>4935	IdentifierDeclType	double [ 4 ]
>4936	IdentifierDeclStatement	 
>4937	IdentifierDecl	rms_distance = sqrt ( distance / num_cameras )
>4938	AssignmentExpr	rms_distance = sqrt ( distance / num_cameras )
>4939	CallExpression	sqrt ( distance / num_cameras )
>4940	ArgumentList	distance / num_cameras
>4941	Argument	distance / num_cameras
>4942	MultiplicativeExpression	distance / num_cameras
>4943	Identifier	num_cameras
>4944	Identifier	distance
>4945	Callee	sqrt
>4946	Identifier	sqrt
>4947	Identifier	rms_distance
>4948	Identifier	rms_distance
>4949	IdentifierDeclType	double
>4950	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>4951	CompoundStatement	 
>4952	IfStatement	if ( m_image_data [ i ] . m_camera . m_adjusted )
>4953	CompoundStatement	 
>4954	ExpressionStatement	 
>4955	IncDecOp	count ++
>4956	IncDec	++
>4957	Identifier	count
>4958	ExpressionStatement	 
>4959	AssignmentExpr	Vz ( cc [ count ] ) -= mean [ 2 ]
>4960	ArrayIndexing	mean [ 2 ]
>4961	PrimaryExpression	2
>4962	Identifier	mean
>4963	CallExpression	Vz ( cc [ count ] )
>4964	ArgumentList	cc [ count ]
>4965	Argument	cc [ count ]
>4966	ArrayIndexing	cc [ count ]
>4967	Identifier	count
>4968	Identifier	cc
>4969	Callee	Vz
>4970	Identifier	Vz
>4971	ExpressionStatement	 
>4972	AssignmentExpr	Vy ( cc [ count ] ) -= mean [ 1 ]
>4973	ArrayIndexing	mean [ 1 ]
>4974	PrimaryExpression	1
>4975	Identifier	mean
>4976	CallExpression	Vy ( cc [ count ] )
>4977	ArgumentList	cc [ count ]
>4978	Argument	cc [ count ]
>4979	ArrayIndexing	cc [ count ]
>4980	Identifier	count
>4981	Identifier	cc
>4982	Callee	Vy
>4983	Identifier	Vy
>4984	ExpressionStatement	 
>4985	AssignmentExpr	Vx ( cc [ count ] ) -= mean [ 0 ]
>4986	ArrayIndexing	mean [ 0 ]
>4987	PrimaryExpression	0
>4988	Identifier	mean
>4989	CallExpression	Vx ( cc [ count ] )
>4990	ArgumentList	cc [ count ]
>4991	Argument	cc [ count ]
>4992	ArrayIndexing	cc [ count ]
>4993	Identifier	count
>4994	Identifier	cc
>4995	Callee	Vx
>4996	Identifier	Vx
>4997	IfStatement	if ( count >= num_cameras )
>4998	ExpressionStatement	 
>4999	CallExpression	printf ( \"error!\n\" )
>5000	ArgumentList	\"error!\n\"
>5001	Argument	\"error!\n\"
>5002	PrimaryExpression	\"error!\n\"
>5003	Callee	printf
>5004	Identifier	printf
>5005	Condition	 
>5006	RelationalExpression	count >= num_cameras
>5007	Identifier	num_cameras
>5008	Identifier	count
>5009	ExpressionStatement	 
>5010	AssignmentExpr	distance += dx * dx + dy * dy + dz * dz
>5011	AdditiveExpression	dx * dx + dy * dy + dz * dz
>5012	AdditiveExpression	dy * dy + dz * dz
>5013	MultiplicativeExpression	dz * dz
>5014	Identifier	dz
>5015	Identifier	dz
>5016	MultiplicativeExpression	dy * dy
>5017	Identifier	dy
>5018	Identifier	dy
>5019	MultiplicativeExpression	dx * dx
>5020	Identifier	dx
>5021	Identifier	dx
>5022	Identifier	distance
>5023	IdentifierDeclStatement	 
>5024	IdentifierDecl	dz = mean [ 2 ] - pos [ 2 ]
>5025	AssignmentExpr	dz = mean [ 2 ] - pos [ 2 ]
>5026	AdditiveExpression	mean [ 2 ] - pos [ 2 ]
>5027	ArrayIndexing	pos [ 2 ]
>5028	PrimaryExpression	2
>5029	Identifier	pos
>5030	ArrayIndexing	mean [ 2 ]
>5031	PrimaryExpression	2
>5032	Identifier	mean
>5033	Identifier	dz
>5034	Identifier	dz
>5035	IdentifierDeclType	double
>5036	IdentifierDeclStatement	 
>5037	IdentifierDecl	dy = mean [ 1 ] - pos [ 1 ]
>5038	AssignmentExpr	dy = mean [ 1 ] - pos [ 1 ]
>5039	AdditiveExpression	mean [ 1 ] - pos [ 1 ]
>5040	ArrayIndexing	pos [ 1 ]
>5041	PrimaryExpression	1
>5042	Identifier	pos
>5043	ArrayIndexing	mean [ 1 ]
>5044	PrimaryExpression	1
>5045	Identifier	mean
>5046	Identifier	dy
>5047	Identifier	dy
>5048	IdentifierDeclType	double
>5049	IdentifierDeclStatement	 
>5050	IdentifierDecl	dx = mean [ 0 ] - pos [ 0 ]
>5051	AssignmentExpr	dx = mean [ 0 ] - pos [ 0 ]
>5052	AdditiveExpression	mean [ 0 ] - pos [ 0 ]
>5053	ArrayIndexing	pos [ 0 ]
>5054	PrimaryExpression	0
>5055	Identifier	pos
>5056	ArrayIndexing	mean [ 0 ]
>5057	PrimaryExpression	0
>5058	Identifier	mean
>5059	Identifier	dx
>5060	Identifier	dx
>5061	IdentifierDeclType	double
>5062	ExpressionStatement	 
>5063	CallExpression	m_image_data [ i ] . m_camera . GetPosition ( pos )
>5064	ArgumentList	pos
>5065	Argument	pos
>5066	Identifier	pos
>5067	Callee	m_image_data [ i ] . m_camera . GetPosition
>5068	MemberAccess	m_image_data [ i ] . m_camera . GetPosition
>5069	Identifier	GetPosition
>5070	MemberAccess	m_image_data [ i ] . m_camera
>5071	Identifier	m_camera
>5072	ArrayIndexing	m_image_data [ i ]
>5073	Identifier	i
>5074	Identifier	m_image_data
>5075	IdentifierDeclStatement	 
>5076	IdentifierDecl	pos [ 3 ]
>5077	PrimaryExpression	3
>5078	Identifier	pos
>5079	IdentifierDeclType	double [ 3 ]
>5080	Condition	 
>5081	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>5082	Identifier	m_adjusted
>5083	MemberAccess	m_image_data [ i ] . m_camera
>5084	Identifier	m_camera
>5085	ArrayIndexing	m_image_data [ i ]
>5086	Identifier	i
>5087	Identifier	m_image_data
>5088	IncDecOp	 
>5089	IncDec	++
>5090	Identifier	i
>5091	Condition	 
>5092	RelationalExpression	i < num_images
>5093	Identifier	num_images
>5094	Identifier	i
>5095	ForInit	 
>5096	IdentifierDeclStatement	int i = 0 ;
>5097	IdentifierDecl	i = 0
>5098	AssignmentExpr	i = 0
>5099	PrimaryExpression	0
>5100	Identifier	i
>5101	Identifier	i
>5102	IdentifierDeclType	int
>5103	ExpressionStatement	 
>5104	AssignmentExpr	count = 0
>5105	PrimaryExpression	0
>5106	Identifier	count
>5107	IdentifierDeclStatement	 
>5108	IdentifierDecl	distance = 0.0
>5109	AssignmentExpr	distance = 0.0
>5110	PrimaryExpression	0.0
>5111	Identifier	distance
>5112	Identifier	distance
>5113	IdentifierDeclType	double
>5114	ExpressionStatement	 
>5115	AssignmentExpr	mean [ 2 ] /= num_cameras
>5116	Identifier	num_cameras
>5117	ArrayIndexing	mean [ 2 ]
>5118	PrimaryExpression	2
>5119	Identifier	mean
>5120	ExpressionStatement	 
>5121	AssignmentExpr	mean [ 1 ] /= num_cameras
>5122	Identifier	num_cameras
>5123	ArrayIndexing	mean [ 1 ]
>5124	PrimaryExpression	1
>5125	Identifier	mean
>5126	ExpressionStatement	 
>5127	AssignmentExpr	mean [ 0 ] /= num_cameras
>5128	Identifier	num_cameras
>5129	ArrayIndexing	mean [ 0 ]
>5130	PrimaryExpression	0
>5131	Identifier	mean
>5132	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>5133	CompoundStatement	 
>5134	IfStatement	if ( m_image_data [ i ] . m_camera . m_adjusted )
>5135	CompoundStatement	 
>5136	ExpressionStatement	 
>5137	IncDecOp	count ++
>5138	IncDec	++
>5139	Identifier	count
>5140	ExpressionStatement	 
>5141	AssignmentExpr	mean [ 2 ] += pos [ 2 ]
>5142	ArrayIndexing	pos [ 2 ]
>5143	PrimaryExpression	2
>5144	Identifier	pos
>5145	ArrayIndexing	mean [ 2 ]
>5146	PrimaryExpression	2
>5147	Identifier	mean
>5148	ExpressionStatement	 
>5149	AssignmentExpr	mean [ 1 ] += pos [ 1 ]
>5150	ArrayIndexing	pos [ 1 ]
>5151	PrimaryExpression	1
>5152	Identifier	pos
>5153	ArrayIndexing	mean [ 1 ]
>5154	PrimaryExpression	1
>5155	Identifier	mean
>5156	ExpressionStatement	 
>5157	AssignmentExpr	mean [ 0 ] += pos [ 0 ]
>5158	ArrayIndexing	pos [ 0 ]
>5159	PrimaryExpression	0
>5160	Identifier	pos
>5161	ArrayIndexing	mean [ 0 ]
>5162	PrimaryExpression	0
>5163	Identifier	mean
>5164	ExpressionStatement	 
>5165	CallExpression	m_image_data [ i ] . m_camera . GetPosition ( pos )
>5166	ArgumentList	pos
>5167	Argument	pos
>5168	Identifier	pos
>5169	Callee	m_image_data [ i ] . m_camera . GetPosition
>5170	MemberAccess	m_image_data [ i ] . m_camera . GetPosition
>5171	Identifier	GetPosition
>5172	MemberAccess	m_image_data [ i ] . m_camera
>5173	Identifier	m_camera
>5174	ArrayIndexing	m_image_data [ i ]
>5175	Identifier	i
>5176	Identifier	m_image_data
>5177	IdentifierDeclStatement	 
>5178	IdentifierDecl	pos [ 3 ]
>5179	PrimaryExpression	3
>5180	Identifier	pos
>5181	IdentifierDeclType	double [ 3 ]
>5182	Condition	 
>5183	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>5184	Identifier	m_adjusted
>5185	MemberAccess	m_image_data [ i ] . m_camera
>5186	Identifier	m_camera
>5187	ArrayIndexing	m_image_data [ i ]
>5188	Identifier	i
>5189	Identifier	m_image_data
>5190	IncDecOp	 
>5191	IncDec	++
>5192	Identifier	i
>5193	Condition	 
>5194	RelationalExpression	i < num_images
>5195	Identifier	num_images
>5196	Identifier	i
>5197	ForInit	 
>5198	IdentifierDeclStatement	int i = 0 ;
>5199	IdentifierDecl	i = 0
>5200	AssignmentExpr	i = 0
>5201	PrimaryExpression	0
>5202	Identifier	i
>5203	Identifier	i
>5204	IdentifierDeclType	int
>5205	ExpressionStatement	 
>5206	AssignmentExpr	count = 0
>5207	PrimaryExpression	0
>5208	Identifier	count
>5209	IdentifierDeclStatement	 
>5210	IdentifierDecl	mean [ 3 ] = { 0.0 , 0.0 , 0.0 }
>5211	AssignmentExpr	mean [ 3 ] = { 0.0 , 0.0 , 0.0 }
>5212	InitializerList	0.0
>5213	PrimaryExpression	0.0
>5214	PrimaryExpression	0.0
>5215	PrimaryExpression	0.0
>5216	Identifier	mean
>5217	PrimaryExpression	3
>5218	Identifier	mean
>5219	IdentifierDeclType	double [ 3 ]
>5220	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>5221	CompoundStatement	 
>5222	IfStatement	if ( m_image_data [ i ] . m_camera . m_adjusted )
>5223	CompoundStatement	 
>5224	ExpressionStatement	 
>5225	IncDecOp	count ++
>5226	IncDec	++
>5227	Identifier	count
>5228	ExpressionStatement	 
>5229	AssignmentExpr	cc [ count ] = v3_new ( pos [ 0 ] , pos [ 1 ] , pos [ 2 ] )
>5230	CallExpression	v3_new ( pos [ 0 ] , pos [ 1 ] , pos [ 2 ] )
>5231	ArgumentList	pos [ 0 ]
>5232	Argument	pos [ 2 ]
>5233	ArrayIndexing	pos [ 2 ]
>5234	PrimaryExpression	2
>5235	Identifier	pos
>5236	Argument	pos [ 1 ]
>5237	ArrayIndexing	pos [ 1 ]
>5238	PrimaryExpression	1
>5239	Identifier	pos
>5240	Argument	pos [ 0 ]
>5241	ArrayIndexing	pos [ 0 ]
>5242	PrimaryExpression	0
>5243	Identifier	pos
>5244	Callee	v3_new
>5245	Identifier	v3_new
>5246	ArrayIndexing	cc [ count ]
>5247	Identifier	count
>5248	Identifier	cc
>5249	IfStatement	if ( count >= num_cameras )
>5250	ExpressionStatement	 
>5251	CallExpression	printf ( \"error!\n\" )
>5252	ArgumentList	\"error!\n\"
>5253	Argument	\"error!\n\"
>5254	PrimaryExpression	\"error!\n\"
>5255	Callee	printf
>5256	Identifier	printf
>5257	Condition	 
>5258	RelationalExpression	count >= num_cameras
>5259	Identifier	num_cameras
>5260	Identifier	count
>5261	ExpressionStatement	 
>5262	CallExpression	m_image_data [ i ] . m_camera . GetPosition ( pos )
>5263	ArgumentList	pos
>5264	Argument	pos
>5265	Identifier	pos
>5266	Callee	m_image_data [ i ] . m_camera . GetPosition
>5267	MemberAccess	m_image_data [ i ] . m_camera . GetPosition
>5268	Identifier	GetPosition
>5269	MemberAccess	m_image_data [ i ] . m_camera
>5270	Identifier	m_camera
>5271	ArrayIndexing	m_image_data [ i ]
>5272	Identifier	i
>5273	Identifier	m_image_data
>5274	IdentifierDeclStatement	 
>5275	IdentifierDecl	pos [ 3 ]
>5276	PrimaryExpression	3
>5277	Identifier	pos
>5278	IdentifierDeclType	double [ 3 ]
>5279	Condition	 
>5280	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>5281	Identifier	m_adjusted
>5282	MemberAccess	m_image_data [ i ] . m_camera
>5283	Identifier	m_camera
>5284	ArrayIndexing	m_image_data [ i ]
>5285	Identifier	i
>5286	Identifier	m_image_data
>5287	IncDecOp	 
>5288	IncDec	++
>5289	Identifier	i
>5290	Condition	 
>5291	RelationalExpression	i < num_images
>5292	Identifier	num_images
>5293	Identifier	i
>5294	ForInit	 
>5295	IdentifierDeclStatement	int i = 0 ;
>5296	IdentifierDecl	i = 0
>5297	AssignmentExpr	i = 0
>5298	PrimaryExpression	0
>5299	Identifier	i
>5300	Identifier	i
>5301	IdentifierDeclType	int
>5302	IdentifierDeclStatement	 
>5303	IdentifierDecl	count = 0
>5304	AssignmentExpr	count = 0
>5305	PrimaryExpression	0
>5306	Identifier	count
>5307	Identifier	count
>5308	IdentifierDeclType	int
>5309	IdentifierDeclStatement	 
>5310	IdentifierDecl	* cc = new v3_t [ num_cameras ]
>5311	AssignmentExpr	* cc = new v3_t [ num_cameras ]
>5312	Identifier	num_cameras
>5313	Identifier	num_cameras
>5314	Identifier	cc
>5315	IdentifierDeclType	v3_t *
>5316	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>5317	CompoundStatement	 
>5318	IfStatement	if ( m_image_data [ i ] . m_camera . m_adjusted )
>5319	ExpressionStatement	 
>5320	IncDecOp	num_cameras ++
>5321	IncDec	++
>5322	Identifier	num_cameras
>5323	Condition	 
>5324	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>5325	Identifier	m_adjusted
>5326	MemberAccess	m_image_data [ i ] . m_camera
>5327	Identifier	m_camera
>5328	ArrayIndexing	m_image_data [ i ]
>5329	Identifier	i
>5330	Identifier	m_image_data
>5331	IncDecOp	 
>5332	IncDec	++
>5333	Identifier	i
>5334	Condition	 
>5335	RelationalExpression	i < num_images
>5336	Identifier	num_images
>5337	Identifier	i
>5338	ForInit	 
>5339	IdentifierDeclStatement	int i = 0 ;
>5340	IdentifierDecl	i = 0
>5341	AssignmentExpr	i = 0
>5342	PrimaryExpression	0
>5343	Identifier	i
>5344	Identifier	i
>5345	IdentifierDeclType	int
>5346	IdentifierDeclStatement	 
>5347	IdentifierDecl	num_cameras = 0
>5348	AssignmentExpr	num_cameras = 0
>5349	PrimaryExpression	0
>5350	Identifier	num_cameras
>5351	Identifier	num_cameras
>5352	IdentifierDeclType	int
>5353	IdentifierDeclStatement	 
>5354	IdentifierDecl	num_images = GetNumOriginalImages ( )
>5355	AssignmentExpr	num_images = GetNumOriginalImages ( )
>5356	CallExpression	GetNumOriginalImages ( )
>5357	ArgumentList	 
>5358	Callee	GetNumOriginalImages
>5359	Identifier	GetNumOriginalImages
>5360	Identifier	num_images
>5361	Identifier	num_images
>5362	IdentifierDeclType	int
>5433	FunctionDef	BaseApp 
>5434	ParameterList	double * center , double * up , double * x_axis , double * z_axis , double & scale
>5435	Parameter	 
>5436	Identifier	scale
>5437	ParameterType	double &
>5438	Parameter	 
>5439	Identifier	z_axis
>5440	ParameterType	double *
>5441	Parameter	 
>5442	Identifier	x_axis
>5443	ParameterType	double *
>5444	Parameter	 
>5445	Identifier	up
>5446	ParameterType	double *
>5447	Parameter	 
>5448	Identifier	center
>5449	ParameterType	double *
>5450	ReturnType	void
>5451	CompoundStatement	 
>5452	IfStatement	if ( m_estimate_up_vector_szeliski )
>5453	CompoundStatement	 
>5454	ExpressionStatement	 
>5455	CallExpression	EstimateAxes ( x_axis , up , z_axis )
>5456	ArgumentList	x_axis
>5457	Argument	z_axis
>5458	Identifier	z_axis
>5459	Argument	up
>5460	Identifier	up
>5461	Argument	x_axis
>5462	Identifier	x_axis
>5463	Callee	EstimateAxes
>5464	Identifier	EstimateAxes
>5465	Condition	 
>5466	Identifier	m_estimate_up_vector_szeliski
>5467	ExpressionStatement	 
>5468	CallExpression	SetupSceneGroundPlane ( center , up , x_axis , z_axis , scale )
>5469	ArgumentList	center
>5470	Argument	scale
>5471	Identifier	scale
>5472	Argument	z_axis
>5473	Identifier	z_axis
>5474	Argument	x_axis
>5475	Identifier	x_axis
>5476	Argument	up
>5477	Identifier	up
>5478	Argument	center
>5479	Identifier	center
>5480	Callee	SetupSceneGroundPlane
>5481	Identifier	SetupSceneGroundPlane
>5491	FunctionDef	BaseApp 
>5492	ParameterList	 
>5493	ReturnType	void
>5494	CompoundStatement	 
>5495	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>5496	CompoundStatement	 
>5497	ExpressionStatement	 
>5498	CallExpression	m_image_data [ i ] . m_camera . Finalize ( )
>5499	ArgumentList	 
>5500	Callee	m_image_data [ i ] . m_camera . Finalize
>5501	MemberAccess	m_image_data [ i ] . m_camera . Finalize
>5502	Identifier	Finalize
>5503	MemberAccess	m_image_data [ i ] . m_camera
>5504	Identifier	m_camera
>5505	ArrayIndexing	m_image_data [ i ]
>5506	Identifier	i
>5507	Identifier	m_image_data
>5508	ExpressionStatement	 
>5509	CallExpression	m_image_data [ i ] . m_camera . SetPosition ( pos_new )
>5510	ArgumentList	pos_new
>5511	Argument	pos_new
>5512	Identifier	pos_new
>5513	Callee	m_image_data [ i ] . m_camera . SetPosition
>5514	MemberAccess	m_image_data [ i ] . m_camera . SetPosition
>5515	Identifier	SetPosition
>5516	MemberAccess	m_image_data [ i ] . m_camera
>5517	Identifier	m_camera
>5518	ArrayIndexing	m_image_data [ i ]
>5519	Identifier	i
>5520	Identifier	m_image_data
>5521	ExpressionStatement	 
>5522	CallExpression	m_image_data [ i ] . m_camera . SetPose ( pose_new )
>5523	ArgumentList	pose_new
>5524	Argument	pose_new
>5525	Identifier	pose_new
>5526	Callee	m_image_data [ i ] . m_camera . SetPose
>5527	MemberAccess	m_image_data [ i ] . m_camera . SetPose
>5528	Identifier	SetPose
>5529	MemberAccess	m_image_data [ i ] . m_camera
>5530	Identifier	m_camera
>5531	ArrayIndexing	m_image_data [ i ]
>5532	Identifier	i
>5533	Identifier	m_image_data
>5534	ExpressionStatement	 
>5535	CallExpression	matrix_scale ( 3 , 3 , pose_new , 1.0 / mag , pose_new )
>5536	ArgumentList	3
>5537	Argument	pose_new
>5538	Identifier	pose_new
>5539	Argument	1.0 / mag
>5540	MultiplicativeExpression	1.0 / mag
>5541	Identifier	mag
>5542	PrimaryExpression	1.0
>5543	Argument	pose_new
>5544	Identifier	pose_new
>5545	Argument	3
>5546	PrimaryExpression	3
>5547	Argument	3
>5548	PrimaryExpression	3
>5549	Callee	matrix_scale
>5550	Identifier	matrix_scale
>5551	IdentifierDeclStatement	 
>5552	IdentifierDecl	mag = matrix_norm ( 3 , 1 , pose_new )
>5553	AssignmentExpr	mag = matrix_norm ( 3 , 1 , pose_new )
>5554	CallExpression	matrix_norm ( 3 , 1 , pose_new )
>5555	ArgumentList	3
>5556	Argument	pose_new
>5557	Identifier	pose_new
>5558	Argument	1
>5559	PrimaryExpression	1
>5560	Argument	3
>5561	PrimaryExpression	3
>5562	Callee	matrix_norm
>5563	Identifier	matrix_norm
>5564	Identifier	mag
>5565	Identifier	mag
>5566	IdentifierDeclType	double
>5567	ExpressionStatement	 
>5568	CallExpression	matrix_product ( 4 , 4 , 4 , 1 , m_xform , pos , pos_new )
>5569	ArgumentList	4
>5570	Argument	pos_new
>5571	Identifier	pos_new
>5572	Argument	pos
>5573	Identifier	pos
>5574	Argument	m_xform
>5575	Identifier	m_xform
>5576	Argument	1
>5577	PrimaryExpression	1
>5578	Argument	4
>5579	PrimaryExpression	4
>5580	Argument	4
>5581	PrimaryExpression	4
>5582	Argument	4
>5583	PrimaryExpression	4
>5584	Callee	matrix_product
>5585	Identifier	matrix_product
>5586	ExpressionStatement	 
>5587	CallExpression	matrix_product ( 3 , 3 , 3 , 3 , M3x3 , pose , pose_new )
>5588	ArgumentList	3
>5589	Argument	pose_new
>5590	Identifier	pose_new
>5591	Argument	pose
>5592	Identifier	pose
>5593	Argument	M3x3
>5594	Identifier	M3x3
>5595	Argument	3
>5596	PrimaryExpression	3
>5597	Argument	3
>5598	PrimaryExpression	3
>5599	Argument	3
>5600	PrimaryExpression	3
>5601	Argument	3
>5602	PrimaryExpression	3
>5603	Callee	matrix_product
>5604	Identifier	matrix_product
>5605	IdentifierDeclStatement	 
>5606	IdentifierDecl	pos_new [ 4 ]
>5607	PrimaryExpression	4
>5608	Identifier	pos_new
>5609	IdentifierDeclType	double [ 4 ]
>5610	IdentifierDecl	pose_new [ 9 ]
>5611	PrimaryExpression	9
>5612	Identifier	pose_new
>5613	IdentifierDeclType	double [ 9 ]
>5614	ExpressionStatement	 
>5615	CallExpression	matrix_scale ( 3 , 3 , M3x3 , 1.0 / sqrt ( scale ) , M3x3 )
>5616	ArgumentList	3
>5617	Argument	M3x3
>5618	Identifier	M3x3
>5619	Argument	1.0 / sqrt ( scale )
>5620	MultiplicativeExpression	1.0 / sqrt ( scale )
>5621	CallExpression	sqrt ( scale )
>5622	ArgumentList	scale
>5623	Argument	scale
>5624	Identifier	scale
>5625	Callee	sqrt
>5626	Identifier	sqrt
>5627	PrimaryExpression	1.0
>5628	Argument	M3x3
>5629	Identifier	M3x3
>5630	Argument	3
>5631	PrimaryExpression	3
>5632	Argument	3
>5633	PrimaryExpression	3
>5634	Callee	matrix_scale
>5635	Identifier	matrix_scale
>5636	ExpressionStatement	 
>5637	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , M3x3 , M3x3 , & scale )
>5638	ArgumentList	1
>5639	Argument	& scale
>5640	UnaryOp	& scale
>5641	Identifier	scale
>5642	UnaryOperator	&
>5643	Argument	M3x3
>5644	Identifier	M3x3
>5645	Argument	M3x3
>5646	Identifier	M3x3
>5647	Argument	1
>5648	PrimaryExpression	1
>5649	Argument	3
>5650	PrimaryExpression	3
>5651	Argument	3
>5652	PrimaryExpression	3
>5653	Argument	1
>5654	PrimaryExpression	1
>5655	Callee	matrix_product
>5656	Identifier	matrix_product
>5657	IdentifierDeclStatement	 
>5658	IdentifierDecl	scale
>5659	Identifier	scale
>5660	IdentifierDeclType	double
>5661	ExpressionStatement	 
>5662	CallExpression	memcpy ( M3x3 + 6 , m_xform + 8 , 3 * sizeof ( double ) )
>5663	ArgumentList	M3x3 + 6
>5664	Argument	3 * sizeof ( double )
>5665	MultiplicativeExpression	3 * sizeof ( double )
>5666	SizeofExpr	sizeof ( double )
>5667	SizeofOperand	double
>5668	Sizeof	sizeof
>5669	PrimaryExpression	3
>5670	Argument	m_xform + 8
>5671	AdditiveExpression	m_xform + 8
>5672	PrimaryExpression	8
>5673	Identifier	m_xform
>5674	Argument	M3x3 + 6
>5675	AdditiveExpression	M3x3 + 6
>5676	PrimaryExpression	6
>5677	Identifier	M3x3
>5678	Callee	memcpy
>5679	Identifier	memcpy
>5680	ExpressionStatement	 
>5681	CallExpression	memcpy ( M3x3 + 3 , m_xform + 4 , 3 * sizeof ( double ) )
>5682	ArgumentList	M3x3 + 3
>5683	Argument	3 * sizeof ( double )
>5684	MultiplicativeExpression	3 * sizeof ( double )
>5685	SizeofExpr	sizeof ( double )
>5686	SizeofOperand	double
>5687	Sizeof	sizeof
>5688	PrimaryExpression	3
>5689	Argument	m_xform + 4
>5690	AdditiveExpression	m_xform + 4
>5691	PrimaryExpression	4
>5692	Identifier	m_xform
>5693	Argument	M3x3 + 3
>5694	AdditiveExpression	M3x3 + 3
>5695	PrimaryExpression	3
>5696	Identifier	M3x3
>5697	Callee	memcpy
>5698	Identifier	memcpy
>5699	ExpressionStatement	 
>5700	CallExpression	memcpy ( M3x3 + 0 , m_xform + 0 , 3 * sizeof ( double ) )
>5701	ArgumentList	M3x3 + 0
>5702	Argument	3 * sizeof ( double )
>5703	MultiplicativeExpression	3 * sizeof ( double )
>5704	SizeofExpr	sizeof ( double )
>5705	SizeofOperand	double
>5706	Sizeof	sizeof
>5707	PrimaryExpression	3
>5708	Argument	m_xform + 0
>5709	AdditiveExpression	m_xform + 0
>5710	PrimaryExpression	0
>5711	Identifier	m_xform
>5712	Argument	M3x3 + 0
>5713	AdditiveExpression	M3x3 + 0
>5714	PrimaryExpression	0
>5715	Identifier	M3x3
>5716	Callee	memcpy
>5717	Identifier	memcpy
>5718	IdentifierDeclStatement	 
>5719	IdentifierDecl	M3x3 [ 9 ]
>5720	PrimaryExpression	9
>5721	Identifier	M3x3
>5722	IdentifierDeclType	double [ 9 ]
>5723	ExpressionStatement	 
>5724	AssignmentExpr	pos [ 3 ] = 1.0
>5725	PrimaryExpression	1.0
>5726	ArrayIndexing	pos [ 3 ]
>5727	PrimaryExpression	3
>5728	Identifier	pos
>5729	ExpressionStatement	 
>5730	CallExpression	m_image_data [ i ] . m_camera . GetPose ( pose )
>5731	ArgumentList	pose
>5732	Argument	pose
>5733	Identifier	pose
>5734	Callee	m_image_data [ i ] . m_camera . GetPose
>5735	MemberAccess	m_image_data [ i ] . m_camera . GetPose
>5736	Identifier	GetPose
>5737	MemberAccess	m_image_data [ i ] . m_camera
>5738	Identifier	m_camera
>5739	ArrayIndexing	m_image_data [ i ]
>5740	Identifier	i
>5741	Identifier	m_image_data
>5742	ExpressionStatement	 
>5743	CallExpression	m_image_data [ i ] . m_camera . GetPosition ( pos )
>5744	ArgumentList	pos
>5745	Argument	pos
>5746	Identifier	pos
>5747	Callee	m_image_data [ i ] . m_camera . GetPosition
>5748	MemberAccess	m_image_data [ i ] . m_camera . GetPosition
>5749	Identifier	GetPosition
>5750	MemberAccess	m_image_data [ i ] . m_camera
>5751	Identifier	m_camera
>5752	ArrayIndexing	m_image_data [ i ]
>5753	Identifier	i
>5754	Identifier	m_image_data
>5755	IdentifierDeclStatement	 
>5756	IdentifierDecl	pos [ 4 ]
>5757	PrimaryExpression	4
>5758	Identifier	pos
>5759	IdentifierDeclType	double [ 4 ]
>5760	IdentifierDecl	pose [ 9 ]
>5761	PrimaryExpression	9
>5762	Identifier	pose
>5763	IdentifierDeclType	double [ 9 ]
>5764	IfStatement	if ( ! m_image_data [ i ] . m_camera . m_adjusted )
>5765	ContinueStatement	 
>5766	Condition	 
>5767	UnaryOp	! m_image_data [ i ] . m_camera . m_adjusted
>5768	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>5769	Identifier	m_adjusted
>5770	MemberAccess	m_image_data [ i ] . m_camera
>5771	Identifier	m_camera
>5772	ArrayIndexing	m_image_data [ i ]
>5773	Identifier	i
>5774	Identifier	m_image_data
>5775	UnaryOperator	!
>5776	IncDecOp	 
>5777	IncDec	++
>5778	Identifier	i
>5779	Condition	 
>5780	RelationalExpression	i < num_images
>5781	Identifier	num_images
>5782	Identifier	i
>5783	ForInit	 
>5784	IdentifierDeclStatement	int i = 0 ;
>5785	IdentifierDecl	i = 0
>5786	AssignmentExpr	i = 0
>5787	PrimaryExpression	0
>5788	Identifier	i
>5789	Identifier	i
>5790	IdentifierDeclType	int
>5791	IdentifierDeclStatement	 
>5792	IdentifierDecl	num_images = GetNumImages ( )
>5793	AssignmentExpr	num_images = GetNumImages ( )
>5794	CallExpression	GetNumImages ( )
>5795	ArgumentList	 
>5796	Callee	GetNumImages
>5797	Identifier	GetNumImages
>5798	Identifier	num_images
>5799	Identifier	num_images
>5800	IdentifierDeclType	int
>5801	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>5802	CompoundStatement	 
>5803	ExpressionStatement	 
>5804	CallExpression	memcpy ( pos , Tp , 3 * sizeof ( double ) )
>5805	ArgumentList	pos
>5806	Argument	3 * sizeof ( double )
>5807	MultiplicativeExpression	3 * sizeof ( double )
>5808	SizeofExpr	sizeof ( double )
>5809	SizeofOperand	double
>5810	Sizeof	sizeof
>5811	PrimaryExpression	3
>5812	Argument	Tp
>5813	Identifier	Tp
>5814	Argument	pos
>5815	Identifier	pos
>5816	Callee	memcpy
>5817	Identifier	memcpy
>5818	ExpressionStatement	 
>5819	CallExpression	matrix_product ( 4 , 4 , 4 , 1 , m_xform , p , Tp )
>5820	ArgumentList	4
>5821	Argument	Tp
>5822	Identifier	Tp
>5823	Argument	p
>5824	Identifier	p
>5825	Argument	m_xform
>5826	Identifier	m_xform
>5827	Argument	1
>5828	PrimaryExpression	1
>5829	Argument	4
>5830	PrimaryExpression	4
>5831	Argument	4
>5832	PrimaryExpression	4
>5833	Argument	4
>5834	PrimaryExpression	4
>5835	Callee	matrix_product
>5836	Identifier	matrix_product
>5837	IdentifierDeclStatement	 
>5838	IdentifierDecl	Tp [ 4 ]
>5839	PrimaryExpression	4
>5840	Identifier	Tp
>5841	IdentifierDeclType	double [ 4 ]
>5842	IdentifierDecl	p [ 4 ] = { pos [ 0 ] , pos [ 1 ] , pos [ 2 ] , 1.0 }
>5843	AssignmentExpr	p [ 4 ] = { pos [ 0 ] , pos [ 1 ] , pos [ 2 ] , 1.0 }
>5844	InitializerList	pos [ 0 ]
>5845	PrimaryExpression	1.0
>5846	ArrayIndexing	pos [ 2 ]
>5847	PrimaryExpression	2
>5848	Identifier	pos
>5849	ArrayIndexing	pos [ 1 ]
>5850	PrimaryExpression	1
>5851	Identifier	pos
>5852	ArrayIndexing	pos [ 0 ]
>5853	PrimaryExpression	0
>5854	Identifier	pos
>5855	Identifier	p
>5856	PrimaryExpression	4
>5857	Identifier	p
>5858	IdentifierDeclType	double [ 4 ]
>5859	IdentifierDeclStatement	 
>5860	IdentifierDecl	* pos = m_point_data [ i ] . m_pos
>5861	AssignmentExpr	* pos = m_point_data [ i ] . m_pos
>5862	MemberAccess	m_point_data [ i ] . m_pos
>5863	Identifier	m_pos
>5864	ArrayIndexing	m_point_data [ i ]
>5865	Identifier	i
>5866	Identifier	m_point_data
>5867	Identifier	pos
>5868	Identifier	pos
>5869	IdentifierDeclType	double *
>5870	IncDecOp	 
>5871	IncDec	++
>5872	Identifier	i
>5873	Condition	 
>5874	RelationalExpression	i < num_points
>5875	Identifier	num_points
>5876	Identifier	i
>5877	ForInit	 
>5878	IdentifierDeclStatement	int i = 0 ;
>5879	IdentifierDecl	i = 0
>5880	AssignmentExpr	i = 0
>5881	PrimaryExpression	0
>5882	Identifier	i
>5883	Identifier	i
>5884	IdentifierDeclType	int
>5885	IdentifierDeclStatement	 
>5886	IdentifierDecl	num_points = ( int ) m_point_data . size ( )
>5887	AssignmentExpr	num_points = ( int ) m_point_data . size ( )
>5888	CastExpression	( int ) m_point_data . size ( )
>5889	CallExpression	m_point_data . size ( )
>5890	ArgumentList	 
>5891	Callee	m_point_data . size
>5892	MemberAccess	m_point_data . size
>5893	Identifier	size
>5894	Identifier	m_point_data
>5895	CastTarget	int
>5896	Identifier	num_points
>5897	Identifier	num_points
>5898	IdentifierDeclType	int
>5929	FunctionDef	BaseApp 
>5930	ParameterList	const char * filename
>5931	Parameter	 
>5932	Identifier	filename
>5933	ParameterType	const char *
>5934	ReturnType	void
>5935	CompoundStatement	 
>5936	ExpressionStatement	 
>5937	CallExpression	fclose ( f )
>5938	ArgumentList	f
>5939	Argument	f
>5940	Identifier	f
>5941	Callee	fclose
>5942	Identifier	fclose
>5943	ForStatement	for ( int i = 0 ; i < GetNumImages ( ) ; i ++ )
>5944	ExpressionStatement	 
>5945	CallExpression	m_image_data [ i ] . m_camera . WriteFile ( f )
>5946	ArgumentList	f
>5947	Argument	f
>5948	Identifier	f
>5949	Callee	m_image_data [ i ] . m_camera . WriteFile
>5950	MemberAccess	m_image_data [ i ] . m_camera . WriteFile
>5951	Identifier	WriteFile
>5952	MemberAccess	m_image_data [ i ] . m_camera
>5953	Identifier	m_camera
>5954	ArrayIndexing	m_image_data [ i ]
>5955	Identifier	i
>5956	Identifier	m_image_data
>5957	IncDecOp	 
>5958	IncDec	++
>5959	Identifier	i
>5960	Condition	 
>5961	RelationalExpression	i < GetNumImages ( )
>5962	CallExpression	GetNumImages ( )
>5963	ArgumentList	 
>5964	Callee	GetNumImages
>5965	Identifier	GetNumImages
>5966	Identifier	i
>5967	ForInit	 
>5968	IdentifierDeclStatement	int i = 0 ;
>5969	IdentifierDecl	i = 0
>5970	AssignmentExpr	i = 0
>5971	PrimaryExpression	0
>5972	Identifier	i
>5973	Identifier	i
>5974	IdentifierDeclType	int
>5975	IfStatement	if ( f == NULL )
>5976	CompoundStatement	 
>5977	ReturnStatement	 
>5978	ExpressionStatement	 
>5979	CallExpression	printf ( \"[WriteCameras] Error opening file %s for writing\n\" , filename )
>5980	ArgumentList	\"[WriteCameras] Error opening file %s for writing\n\"
>5981	Argument	filename
>5982	Identifier	filename
>5983	Argument	\"[WriteCameras] Error opening file %s for writing\n\"
>5984	PrimaryExpression	\"[WriteCameras] Error opening file %s for writing\n\"
>5985	Callee	printf
>5986	Identifier	printf
>5987	Condition	 
>5988	EqualityExpression	f == NULL
>5989	Identifier	NULL
>5990	Identifier	f
>5991	IdentifierDeclStatement	 
>5992	IdentifierDecl	* f = fopen ( filename , \"w\" )
>5993	AssignmentExpr	* f = fopen ( filename , \"w\" )
>5994	CallExpression	fopen ( filename , \"w\" )
>5995	ArgumentList	filename
>5996	Argument	\"w\"
>5997	PrimaryExpression	\"w\"
>5998	Argument	filename
>5999	Identifier	filename
>6000	Callee	fopen
>6001	Identifier	fopen
>6002	Identifier	f
>6003	Identifier	f
>6004	IdentifierDeclType	FILE *
>6018	FunctionDef	BaseApp 
>6019	ParameterList	const char * filename
>6020	Parameter	 
>6021	Identifier	filename
>6022	ParameterType	const char *
>6023	ReturnType	void
>6024	CompoundStatement	 
>6025	ExpressionStatement	 
>6026	CallExpression	fclose ( f )
>6027	ArgumentList	f
>6028	Argument	f
>6029	Identifier	f
>6030	Callee	fclose
>6031	Identifier	fclose
>6032	ForStatement	for ( int i = 0 ; i < ( int ) m_point_data . size ( ) ; i ++ )
>6033	ExpressionStatement	 
>6034	CallExpression	m_point_data [ i ] . WriteCoordinates ( f )
>6035	ArgumentList	f
>6036	Argument	f
>6037	Identifier	f
>6038	Callee	m_point_data [ i ] . WriteCoordinates
>6039	MemberAccess	m_point_data [ i ] . WriteCoordinates
>6040	Identifier	WriteCoordinates
>6041	ArrayIndexing	m_point_data [ i ]
>6042	Identifier	i
>6043	Identifier	m_point_data
>6044	IncDecOp	 
>6045	IncDec	++
>6046	Identifier	i
>6047	Condition	 
>6048	RelationalExpression	i < ( int ) m_point_data . size ( )
>6049	CastExpression	( int ) m_point_data . size ( )
>6050	CallExpression	m_point_data . size ( )
>6051	ArgumentList	 
>6052	Callee	m_point_data . size
>6053	MemberAccess	m_point_data . size
>6054	Identifier	size
>6055	Identifier	m_point_data
>6056	CastTarget	int
>6057	Identifier	i
>6058	ForInit	 
>6059	IdentifierDeclStatement	int i = 0 ;
>6060	IdentifierDecl	i = 0
>6061	AssignmentExpr	i = 0
>6062	PrimaryExpression	0
>6063	Identifier	i
>6064	Identifier	i
>6065	IdentifierDeclType	int
>6066	IdentifierDeclStatement	 
>6067	IdentifierDecl	* f = fopen ( filename , \"w\" )
>6068	AssignmentExpr	* f = fopen ( filename , \"w\" )
>6069	CallExpression	fopen ( filename , \"w\" )
>6070	ArgumentList	filename
>6071	Argument	\"w\"
>6072	PrimaryExpression	\"w\"
>6073	Argument	filename
>6074	Identifier	filename
>6075	Callee	fopen
>6076	Identifier	fopen
>6077	Identifier	f
>6078	Identifier	f
>6079	IdentifierDeclType	FILE *
>6091	FunctionDef	BaseApp 
>6092	ParameterList	double * center_out , double * R_out , double & scale_out
>6093	Parameter	 
>6094	Identifier	scale_out
>6095	ParameterType	double &
>6096	Parameter	 
>6097	Identifier	R_out
>6098	ParameterType	double *
>6099	Parameter	 
>6100	Identifier	center_out
>6101	ParameterType	double *
>6102	ReturnType	void
>6103	CompoundStatement	 
>6104	ExpressionStatement	 
>6105	CallExpression	fclose ( f )
>6106	ArgumentList	f
>6107	Argument	f
>6108	Identifier	f
>6109	Callee	fclose
>6110	Identifier	fclose
>6111	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>6112	CompoundStatement	 
>6113	ExpressionStatement	 
>6114	CallExpression	fprintf ( f , \"%0.6e %0.6e\n\" , pos [ 0 ] , pos [ 2 ] )
>6115	ArgumentList	f
>6116	Argument	pos [ 2 ]
>6117	ArrayIndexing	pos [ 2 ]
>6118	PrimaryExpression	2
>6119	Identifier	pos
>6120	Argument	pos [ 0 ]
>6121	ArrayIndexing	pos [ 0 ]
>6122	PrimaryExpression	0
>6123	Identifier	pos
>6124	Argument	\"%0.6e %0.6e\n\"
>6125	PrimaryExpression	\"%0.6e %0.6e\n\"
>6126	Argument	f
>6127	Identifier	f
>6128	Callee	fprintf
>6129	Identifier	fprintf
>6130	IdentifierDeclStatement	 
>6131	IdentifierDecl	* pos = m_point_data [ i ] . m_pos
>6132	AssignmentExpr	* pos = m_point_data [ i ] . m_pos
>6133	MemberAccess	m_point_data [ i ] . m_pos
>6134	Identifier	m_pos
>6135	ArrayIndexing	m_point_data [ i ]
>6136	Identifier	i
>6137	Identifier	m_point_data
>6138	Identifier	pos
>6139	Identifier	pos
>6140	IdentifierDeclType	double *
>6141	IncDecOp	 
>6142	IncDec	++
>6143	Identifier	i
>6144	Condition	 
>6145	RelationalExpression	i < num_points
>6146	Identifier	num_points
>6147	Identifier	i
>6148	ForInit	 
>6149	IdentifierDeclStatement	int i = 0 ;
>6150	IdentifierDecl	i = 0
>6151	AssignmentExpr	i = 0
>6152	PrimaryExpression	0
>6153	Identifier	i
>6154	Identifier	i
>6155	IdentifierDeclType	int
>6156	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>6157	CompoundStatement	 
>6158	IfStatement	if ( m_image_data [ i ] . m_camera . m_adjusted )
>6159	ElseStatement	else
>6160	CompoundStatement	 
>6161	ExpressionStatement	 
>6162	CallExpression	fprintf ( f , \"0.0 0.0\n\" )
>6163	ArgumentList	f
>6164	Argument	\"0.0 0.0\n\"
>6165	PrimaryExpression	\"0.0 0.0\n\"
>6166	Argument	f
>6167	Identifier	f
>6168	Callee	fprintf
>6169	Identifier	fprintf
>6170	CompoundStatement	 
>6171	ExpressionStatement	 
>6172	CallExpression	fprintf ( f , \"%0.6e %0.6e\n\" , pos [ 0 ] , pos [ 2 ] )
>6173	ArgumentList	f
>6174	Argument	pos [ 2 ]
>6175	ArrayIndexing	pos [ 2 ]
>6176	PrimaryExpression	2
>6177	Identifier	pos
>6178	Argument	pos [ 0 ]
>6179	ArrayIndexing	pos [ 0 ]
>6180	PrimaryExpression	0
>6181	Identifier	pos
>6182	Argument	\"%0.6e %0.6e\n\"
>6183	PrimaryExpression	\"%0.6e %0.6e\n\"
>6184	Argument	f
>6185	Identifier	f
>6186	Callee	fprintf
>6187	Identifier	fprintf
>6188	ExpressionStatement	 
>6189	CallExpression	m_image_data [ i ] . m_camera . GetPosition ( pos )
>6190	ArgumentList	pos
>6191	Argument	pos
>6192	Identifier	pos
>6193	Callee	m_image_data [ i ] . m_camera . GetPosition
>6194	MemberAccess	m_image_data [ i ] . m_camera . GetPosition
>6195	Identifier	GetPosition
>6196	MemberAccess	m_image_data [ i ] . m_camera
>6197	Identifier	m_camera
>6198	ArrayIndexing	m_image_data [ i ]
>6199	Identifier	i
>6200	Identifier	m_image_data
>6201	IdentifierDeclStatement	 
>6202	IdentifierDecl	pos [ 3 ]
>6203	PrimaryExpression	3
>6204	Identifier	pos
>6205	IdentifierDeclType	double [ 3 ]
>6206	Condition	 
>6207	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>6208	Identifier	m_adjusted
>6209	MemberAccess	m_image_data [ i ] . m_camera
>6210	Identifier	m_camera
>6211	ArrayIndexing	m_image_data [ i ]
>6212	Identifier	i
>6213	Identifier	m_image_data
>6214	IncDecOp	 
>6215	IncDec	++
>6216	Identifier	i
>6217	Condition	 
>6218	RelationalExpression	i < num_images
>6219	Identifier	num_images
>6220	Identifier	i
>6221	ForInit	 
>6222	IdentifierDeclStatement	int i = 0 ;
>6223	IdentifierDecl	i = 0
>6224	AssignmentExpr	i = 0
>6225	PrimaryExpression	0
>6226	Identifier	i
>6227	Identifier	i
>6228	IdentifierDeclType	int
>6229	ExpressionStatement	 
>6230	CallExpression	fprintf ( f , \"%d %d\n\" , num_images , num_points )
>6231	ArgumentList	f
>6232	Argument	num_points
>6233	Identifier	num_points
>6234	Argument	num_images
>6235	Identifier	num_images
>6236	Argument	\"%d %d\n\"
>6237	PrimaryExpression	\"%d %d\n\"
>6238	Argument	f
>6239	Identifier	f
>6240	Callee	fprintf
>6241	Identifier	fprintf
>6242	IfStatement	if ( f == NULL )
>6243	ReturnStatement	 
>6244	Condition	 
>6245	EqualityExpression	f == NULL
>6246	Identifier	NULL
>6247	Identifier	f
>6248	IdentifierDeclStatement	 
>6249	IdentifierDecl	* f = fopen ( \"overhead.txt\" , \"w\" )
>6250	AssignmentExpr	* f = fopen ( \"overhead.txt\" , \"w\" )
>6251	CallExpression	fopen ( \"overhead.txt\" , \"w\" )
>6252	ArgumentList	\"overhead.txt\"
>6253	Argument	\"w\"
>6254	PrimaryExpression	\"w\"
>6255	Argument	\"overhead.txt\"
>6256	PrimaryExpression	\"overhead.txt\"
>6257	Callee	fopen
>6258	Identifier	fopen
>6259	Identifier	f
>6260	Identifier	f
>6261	IdentifierDeclType	FILE *
>6262	ExpressionStatement	 
>6263	AssignmentExpr	m_repos_scale = m_scale / scale
>6264	MultiplicativeExpression	m_scale / scale
>6265	Identifier	scale
>6266	Identifier	m_scale
>6267	Identifier	m_repos_scale
>6268	ExpressionStatement	 
>6269	CallExpression	memcpy ( m_repos_d , center , sizeof ( double ) * 3 )
>6270	ArgumentList	m_repos_d
>6271	Argument	sizeof ( double ) * 3
>6272	MultiplicativeExpression	sizeof ( double ) * 3
>6273	PrimaryExpression	3
>6274	SizeofExpr	sizeof ( double )
>6275	SizeofOperand	double
>6276	Sizeof	sizeof
>6277	Argument	center
>6278	Identifier	center
>6279	Argument	m_repos_d
>6280	Identifier	m_repos_d
>6281	Callee	memcpy
>6282	Identifier	memcpy
>6283	ExpressionStatement	 
>6284	CallExpression	memcpy ( m_repos_R , R , sizeof ( double ) * 9 )
>6285	ArgumentList	m_repos_R
>6286	Argument	sizeof ( double ) * 9
>6287	MultiplicativeExpression	sizeof ( double ) * 9
>6288	PrimaryExpression	9
>6289	SizeofExpr	sizeof ( double )
>6290	SizeofOperand	double
>6291	Sizeof	sizeof
>6292	Argument	R
>6293	Identifier	R
>6294	Argument	m_repos_R
>6295	Identifier	m_repos_R
>6296	Callee	memcpy
>6297	Identifier	memcpy
>6298	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>6299	CompoundStatement	 
>6300	IfStatement	if ( m_image_data [ i ] . m_camera . m_adjusted )
>6301	CompoundStatement	 
>6302	ExpressionStatement	 
>6303	CallExpression	fflush ( stdout )
>6304	ArgumentList	stdout
>6305	Argument	stdout
>6306	Identifier	stdout
>6307	Callee	fflush
>6308	Identifier	fflush
>6309	ExpressionStatement	 
>6310	CallExpression	matrix_print ( 3 , 3 , Ri )
>6311	ArgumentList	3
>6312	Argument	Ri
>6313	Identifier	Ri
>6314	Argument	3
>6315	PrimaryExpression	3
>6316	Argument	3
>6317	PrimaryExpression	3
>6318	Callee	matrix_print
>6319	Identifier	matrix_print
>6320	ExpressionStatement	 
>6321	CallExpression	printf ( \"  Real twist angle[%d] = %0.3f\n\" , i , RAD2DEG ( twist ) )
>6322	ArgumentList	\"  Real twist angle[%d] = %0.3f\n\"
>6323	Argument	RAD2DEG ( twist )
>6324	CallExpression	RAD2DEG ( twist )
>6325	ArgumentList	twist
>6326	Argument	twist
>6327	Identifier	twist
>6328	Callee	RAD2DEG
>6329	Identifier	RAD2DEG
>6330	Argument	i
>6331	Identifier	i
>6332	Argument	\"  Real twist angle[%d] = %0.3f\n\"
>6333	PrimaryExpression	\"  Real twist angle[%d] = %0.3f\n\"
>6334	Callee	printf
>6335	Identifier	printf
>6336	IdentifierDeclStatement	 
>6337	IdentifierDecl	twist = acos ( c_twist )
>6338	AssignmentExpr	twist = acos ( c_twist )
>6339	CallExpression	acos ( c_twist )
>6340	ArgumentList	c_twist
>6341	Argument	c_twist
>6342	Identifier	c_twist
>6343	Callee	acos
>6344	Identifier	acos
>6345	Identifier	twist
>6346	Identifier	twist
>6347	IdentifierDeclType	double
>6348	IdentifierDeclStatement	 
>6349	IdentifierDecl	c_twist = ( Ri [ 0 ] * Ri [ 8 ] - Ri [ 6 ] * Ri [ 2 ] ) / sqrt ( 1 - Ri [ 5 ] * Ri [ 5 ] )
>6350	AssignmentExpr	c_twist = ( Ri [ 0 ] * Ri [ 8 ] - Ri [ 6 ] * Ri [ 2 ] ) / sqrt ( 1 - Ri [ 5 ] * Ri [ 5 ] )
>6351	MultiplicativeExpression	( Ri [ 0 ] * Ri [ 8 ] - Ri [ 6 ] * Ri [ 2 ] ) / sqrt ( 1 - Ri [ 5 ] * Ri [ 5 ] )
>6352	CallExpression	sqrt ( 1 - Ri [ 5 ] * Ri [ 5 ] )
>6353	ArgumentList	1 - Ri [ 5 ] * Ri [ 5 ]
>6354	Argument	1 - Ri [ 5 ] * Ri [ 5 ]
>6355	AdditiveExpression	1 - Ri [ 5 ] * Ri [ 5 ]
>6356	MultiplicativeExpression	Ri [ 5 ] * Ri [ 5 ]
>6357	ArrayIndexing	Ri [ 5 ]
>6358	PrimaryExpression	5
>6359	Identifier	Ri
>6360	ArrayIndexing	Ri [ 5 ]
>6361	PrimaryExpression	5
>6362	Identifier	Ri
>6363	PrimaryExpression	1
>6364	Callee	sqrt
>6365	Identifier	sqrt
>6366	AdditiveExpression	Ri [ 0 ] * Ri [ 8 ] - Ri [ 6 ] * Ri [ 2 ]
>6367	MultiplicativeExpression	Ri [ 6 ] * Ri [ 2 ]
>6368	ArrayIndexing	Ri [ 2 ]
>6369	PrimaryExpression	2
>6370	Identifier	Ri
>6371	ArrayIndexing	Ri [ 6 ]
>6372	PrimaryExpression	6
>6373	Identifier	Ri
>6374	MultiplicativeExpression	Ri [ 0 ] * Ri [ 8 ]
>6375	ArrayIndexing	Ri [ 8 ]
>6376	PrimaryExpression	8
>6377	Identifier	Ri
>6378	ArrayIndexing	Ri [ 0 ]
>6379	PrimaryExpression	0
>6380	Identifier	Ri
>6381	Identifier	c_twist
>6382	Identifier	c_twist
>6383	IdentifierDeclType	double
>6384	ExpressionStatement	 
>6385	CallExpression	m_image_data [ i ] . m_camera . GetPose ( Ri )
>6386	ArgumentList	Ri
>6387	Argument	Ri
>6388	Identifier	Ri
>6389	Callee	m_image_data [ i ] . m_camera . GetPose
>6390	MemberAccess	m_image_data [ i ] . m_camera . GetPose
>6391	Identifier	GetPose
>6392	MemberAccess	m_image_data [ i ] . m_camera
>6393	Identifier	m_camera
>6394	ArrayIndexing	m_image_data [ i ]
>6395	Identifier	i
>6396	Identifier	m_image_data
>6397	IdentifierDeclStatement	 
>6398	IdentifierDecl	Ri [ 9 ]
>6399	PrimaryExpression	9
>6400	Identifier	Ri
>6401	IdentifierDeclType	double [ 9 ]
>6402	ExpressionStatement	 
>6403	CallExpression	m_image_data [ i ] . m_fit_plane . Transform ( M )
>6404	ArgumentList	M
>6405	Argument	M
>6406	Identifier	M
>6407	Callee	m_image_data [ i ] . m_fit_plane . Transform
>6408	MemberAccess	m_image_data [ i ] . m_fit_plane . Transform
>6409	Identifier	Transform
>6410	MemberAccess	m_image_data [ i ] . m_fit_plane
>6411	Identifier	m_fit_plane
>6412	ArrayIndexing	m_image_data [ i ]
>6413	Identifier	i
>6414	Identifier	m_image_data
>6415	ExpressionStatement	 
>6416	CallExpression	m_image_data [ i ] . m_camera . Finalize ( )
>6417	ArgumentList	 
>6418	Callee	m_image_data [ i ] . m_camera . Finalize
>6419	MemberAccess	m_image_data [ i ] . m_camera . Finalize
>6420	Identifier	Finalize
>6421	MemberAccess	m_image_data [ i ] . m_camera
>6422	Identifier	m_camera
>6423	ArrayIndexing	m_image_data [ i ]
>6424	Identifier	i
>6425	Identifier	m_image_data
>6426	ExpressionStatement	 
>6427	CallExpression	m_image_data [ i ] . m_camera . SetPosition ( tmp )
>6428	ArgumentList	tmp
>6429	Argument	tmp
>6430	Identifier	tmp
>6431	Callee	m_image_data [ i ] . m_camera . SetPosition
>6432	MemberAccess	m_image_data [ i ] . m_camera . SetPosition
>6433	Identifier	SetPosition
>6434	MemberAccess	m_image_data [ i ] . m_camera
>6435	Identifier	m_camera
>6436	ArrayIndexing	m_image_data [ i ]
>6437	Identifier	i
>6438	Identifier	m_image_data
>6439	ExpressionStatement	 
>6440	CallExpression	m_image_data [ i ] . m_camera . SetPose ( pose_new )
>6441	ArgumentList	pose_new
>6442	Argument	pose_new
>6443	Identifier	pose_new
>6444	Callee	m_image_data [ i ] . m_camera . SetPose
>6445	MemberAccess	m_image_data [ i ] . m_camera . SetPose
>6446	Identifier	SetPose
>6447	MemberAccess	m_image_data [ i ] . m_camera
>6448	Identifier	m_camera
>6449	ArrayIndexing	m_image_data [ i ]
>6450	Identifier	i
>6451	Identifier	m_image_data
>6452	ExpressionStatement	 
>6453	CallExpression	matrix_product ( 3 , 3 , 3 , 3 , R , pose , pose_new )
>6454	ArgumentList	3
>6455	Argument	pose_new
>6456	Identifier	pose_new
>6457	Argument	pose
>6458	Identifier	pose
>6459	Argument	R
>6460	Identifier	R
>6461	Argument	3
>6462	PrimaryExpression	3
>6463	Argument	3
>6464	PrimaryExpression	3
>6465	Argument	3
>6466	PrimaryExpression	3
>6467	Argument	3
>6468	PrimaryExpression	3
>6469	Callee	matrix_product
>6470	Identifier	matrix_product
>6471	IdentifierDeclStatement	 
>6472	IdentifierDecl	pose_new [ 9 ]
>6473	PrimaryExpression	9
>6474	Identifier	pose_new
>6475	IdentifierDeclType	double [ 9 ]
>6476	ExpressionStatement	 
>6477	CallExpression	m_image_data [ i ] . m_camera . GetPose ( pose )
>6478	ArgumentList	pose
>6479	Argument	pose
>6480	Identifier	pose
>6481	Callee	m_image_data [ i ] . m_camera . GetPose
>6482	MemberAccess	m_image_data [ i ] . m_camera . GetPose
>6483	Identifier	GetPose
>6484	MemberAccess	m_image_data [ i ] . m_camera
>6485	Identifier	m_camera
>6486	ArrayIndexing	m_image_data [ i ]
>6487	Identifier	i
>6488	Identifier	m_image_data
>6489	IdentifierDeclStatement	 
>6490	IdentifierDecl	pose [ 9 ]
>6491	PrimaryExpression	9
>6492	Identifier	pose
>6493	IdentifierDeclType	double [ 9 ]
>6494	ExpressionStatement	 
>6495	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , R , pos , tmp )
>6496	ArgumentList	3
>6497	Argument	tmp
>6498	Identifier	tmp
>6499	Argument	pos
>6500	Identifier	pos
>6501	Argument	R
>6502	Identifier	R
>6503	Argument	1
>6504	PrimaryExpression	1
>6505	Argument	3
>6506	PrimaryExpression	3
>6507	Argument	3
>6508	PrimaryExpression	3
>6509	Argument	3
>6510	PrimaryExpression	3
>6511	Callee	matrix_product
>6512	Identifier	matrix_product
>6513	IdentifierDeclStatement	 
>6514	IdentifierDecl	tmp [ 3 ]
>6515	PrimaryExpression	3
>6516	Identifier	tmp
>6517	IdentifierDeclType	double [ 3 ]
>6518	IdentifierDeclStatement	 
>6519	IdentifierDecl	norm = matrix_norm ( 3 , 1 , pos )
>6520	AssignmentExpr	norm = matrix_norm ( 3 , 1 , pos )
>6521	CallExpression	matrix_norm ( 3 , 1 , pos )
>6522	ArgumentList	3
>6523	Argument	pos
>6524	Identifier	pos
>6525	Argument	1
>6526	PrimaryExpression	1
>6527	Argument	3
>6528	PrimaryExpression	3
>6529	Callee	matrix_norm
>6530	Identifier	matrix_norm
>6531	Identifier	norm
>6532	Identifier	norm
>6533	IdentifierDeclType	double
>6534	ExpressionStatement	 
>6535	CallExpression	matrix_scale ( 3 , 1 , pos , m_scale / scale , pos )
>6536	ArgumentList	3
>6537	Argument	pos
>6538	Identifier	pos
>6539	Argument	m_scale / scale
>6540	MultiplicativeExpression	m_scale / scale
>6541	Identifier	scale
>6542	Identifier	m_scale
>6543	Argument	pos
>6544	Identifier	pos
>6545	Argument	1
>6546	PrimaryExpression	1
>6547	Argument	3
>6548	PrimaryExpression	3
>6549	Callee	matrix_scale
>6550	Identifier	matrix_scale
>6551	ExpressionStatement	 
>6552	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , pos , center , pos )
>6553	ArgumentList	3
>6554	Argument	pos
>6555	Identifier	pos
>6556	Argument	center
>6557	Identifier	center
>6558	Argument	pos
>6559	Identifier	pos
>6560	Argument	1
>6561	PrimaryExpression	1
>6562	Argument	3
>6563	PrimaryExpression	3
>6564	Argument	1
>6565	PrimaryExpression	1
>6566	Argument	3
>6567	PrimaryExpression	3
>6568	Callee	matrix_diff
>6569	Identifier	matrix_diff
>6570	ExpressionStatement	 
>6571	CallExpression	m_image_data [ i ] . m_camera . GetPosition ( pos )
>6572	ArgumentList	pos
>6573	Argument	pos
>6574	Identifier	pos
>6575	Callee	m_image_data [ i ] . m_camera . GetPosition
>6576	MemberAccess	m_image_data [ i ] . m_camera . GetPosition
>6577	Identifier	GetPosition
>6578	MemberAccess	m_image_data [ i ] . m_camera
>6579	Identifier	m_camera
>6580	ArrayIndexing	m_image_data [ i ]
>6581	Identifier	i
>6582	Identifier	m_image_data
>6583	IdentifierDeclStatement	 
>6584	IdentifierDecl	pos [ 3 ]
>6585	PrimaryExpression	3
>6586	Identifier	pos
>6587	IdentifierDeclType	double [ 3 ]
>6588	Condition	 
>6589	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>6590	Identifier	m_adjusted
>6591	MemberAccess	m_image_data [ i ] . m_camera
>6592	Identifier	m_camera
>6593	ArrayIndexing	m_image_data [ i ]
>6594	Identifier	i
>6595	Identifier	m_image_data
>6596	IncDecOp	 
>6597	IncDec	++
>6598	Identifier	i
>6599	Condition	 
>6600	RelationalExpression	i < num_images
>6601	Identifier	num_images
>6602	Identifier	i
>6603	ForInit	 
>6604	IdentifierDeclStatement	int i = 0 ;
>6605	IdentifierDecl	i = 0
>6606	AssignmentExpr	i = 0
>6607	PrimaryExpression	0
>6608	Identifier	i
>6609	Identifier	i
>6610	IdentifierDeclType	int
>6611	IdentifierDeclStatement	 
>6612	IdentifierDecl	num_images = GetNumImages ( )
>6613	AssignmentExpr	num_images = GetNumImages ( )
>6614	CallExpression	GetNumImages ( )
>6615	ArgumentList	 
>6616	Callee	GetNumImages
>6617	Identifier	GetNumImages
>6618	Identifier	num_images
>6619	Identifier	num_images
>6620	IdentifierDeclType	int
>6621	ExpressionStatement	 
>6622	CallExpression	matrix_product ( 4 , 4 , 4 , 4 , R16 , t16 , M )
>6623	ArgumentList	4
>6624	Argument	M
>6625	Identifier	M
>6626	Argument	t16
>6627	Identifier	t16
>6628	Argument	R16
>6629	Identifier	R16
>6630	Argument	4
>6631	PrimaryExpression	4
>6632	Argument	4
>6633	PrimaryExpression	4
>6634	Argument	4
>6635	PrimaryExpression	4
>6636	Argument	4
>6637	PrimaryExpression	4
>6638	Callee	matrix_product
>6639	Identifier	matrix_product
>6640	ExpressionStatement	 
>6641	AssignmentExpr	t16 [ 11 ] = - center [ 2 ]
>6642	UnaryOp	- center [ 2 ]
>6643	ArrayIndexing	center [ 2 ]
>6644	PrimaryExpression	2
>6645	Identifier	center
>6646	UnaryOperator	-
>6647	ArrayIndexing	t16 [ 11 ]
>6648	PrimaryExpression	11
>6649	Identifier	t16
>6650	ExpressionStatement	 
>6651	AssignmentExpr	t16 [ 7 ] = - center [ 1 ]
>6652	UnaryOp	- center [ 1 ]
>6653	ArrayIndexing	center [ 1 ]
>6654	PrimaryExpression	1
>6655	Identifier	center
>6656	UnaryOperator	-
>6657	ArrayIndexing	t16 [ 7 ]
>6658	PrimaryExpression	7
>6659	Identifier	t16
>6660	ExpressionStatement	 
>6661	AssignmentExpr	t16 [ 3 ] = - center [ 0 ]
>6662	UnaryOp	- center [ 0 ]
>6663	ArrayIndexing	center [ 0 ]
>6664	PrimaryExpression	0
>6665	Identifier	center
>6666	UnaryOperator	-
>6667	ArrayIndexing	t16 [ 3 ]
>6668	PrimaryExpression	3
>6669	Identifier	t16
>6670	ExpressionStatement	 
>6671	CallExpression	memcpy ( R16 + 8 , R + 6 , 3 * sizeof ( double ) )
>6672	ArgumentList	R16 + 8
>6673	Argument	3 * sizeof ( double )
>6674	MultiplicativeExpression	3 * sizeof ( double )
>6675	SizeofExpr	sizeof ( double )
>6676	SizeofOperand	double
>6677	Sizeof	sizeof
>6678	PrimaryExpression	3
>6679	Argument	R + 6
>6680	AdditiveExpression	R + 6
>6681	PrimaryExpression	6
>6682	Identifier	R
>6683	Argument	R16 + 8
>6684	AdditiveExpression	R16 + 8
>6685	PrimaryExpression	8
>6686	Identifier	R16
>6687	Callee	memcpy
>6688	Identifier	memcpy
>6689	ExpressionStatement	 
>6690	CallExpression	memcpy ( R16 + 4 , R + 3 , 3 * sizeof ( double ) )
>6691	ArgumentList	R16 + 4
>6692	Argument	3 * sizeof ( double )
>6693	MultiplicativeExpression	3 * sizeof ( double )
>6694	SizeofExpr	sizeof ( double )
>6695	SizeofOperand	double
>6696	Sizeof	sizeof
>6697	PrimaryExpression	3
>6698	Argument	R + 3
>6699	AdditiveExpression	R + 3
>6700	PrimaryExpression	3
>6701	Identifier	R
>6702	Argument	R16 + 4
>6703	AdditiveExpression	R16 + 4
>6704	PrimaryExpression	4
>6705	Identifier	R16
>6706	Callee	memcpy
>6707	Identifier	memcpy
>6708	ExpressionStatement	 
>6709	CallExpression	memcpy ( R16 + 0 , R + 0 , 3 * sizeof ( double ) )
>6710	ArgumentList	R16 + 0
>6711	Argument	3 * sizeof ( double )
>6712	MultiplicativeExpression	3 * sizeof ( double )
>6713	SizeofExpr	sizeof ( double )
>6714	SizeofOperand	double
>6715	Sizeof	sizeof
>6716	PrimaryExpression	3
>6717	Argument	R + 0
>6718	AdditiveExpression	R + 0
>6719	PrimaryExpression	0
>6720	Identifier	R
>6721	Argument	R16 + 0
>6722	AdditiveExpression	R16 + 0
>6723	PrimaryExpression	0
>6724	Identifier	R16
>6725	Callee	memcpy
>6726	Identifier	memcpy
>6727	ExpressionStatement	 
>6728	CallExpression	matrix_ident ( 4 , t16 )
>6729	ArgumentList	4
>6730	Argument	t16
>6731	Identifier	t16
>6732	Argument	4
>6733	PrimaryExpression	4
>6734	Callee	matrix_ident
>6735	Identifier	matrix_ident
>6736	ExpressionStatement	 
>6737	CallExpression	matrix_ident ( 4 , R16 )
>6738	ArgumentList	4
>6739	Argument	R16
>6740	Identifier	R16
>6741	Argument	4
>6742	PrimaryExpression	4
>6743	Callee	matrix_ident
>6744	Identifier	matrix_ident
>6745	IdentifierDeclStatement	 
>6746	IdentifierDecl	M [ 16 ]
>6747	PrimaryExpression	16
>6748	Identifier	M
>6749	IdentifierDeclType	double [ 16 ]
>6750	IdentifierDecl	t16 [ 16 ]
>6751	PrimaryExpression	16
>6752	Identifier	t16
>6753	IdentifierDeclType	double [ 16 ]
>6754	IdentifierDecl	R16 [ 16 ]
>6755	PrimaryExpression	16
>6756	Identifier	R16
>6757	IdentifierDeclType	double [ 16 ]
>6758	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>6759	CompoundStatement	 
>6760	ExpressionStatement	 
>6761	AssignmentExpr	m_point_data [ i ] . m_pos [ 2 ] = tmp [ 2 ]
>6762	ArrayIndexing	tmp [ 2 ]
>6763	PrimaryExpression	2
>6764	Identifier	tmp
>6765	ArrayIndexing	m_point_data [ i ] . m_pos [ 2 ]
>6766	PrimaryExpression	2
>6767	MemberAccess	m_point_data [ i ] . m_pos
>6768	Identifier	m_pos
>6769	ArrayIndexing	m_point_data [ i ]
>6770	Identifier	i
>6771	Identifier	m_point_data
>6772	ExpressionStatement	 
>6773	AssignmentExpr	m_point_data [ i ] . m_pos [ 1 ] = tmp [ 1 ]
>6774	ArrayIndexing	tmp [ 1 ]
>6775	PrimaryExpression	1
>6776	Identifier	tmp
>6777	ArrayIndexing	m_point_data [ i ] . m_pos [ 1 ]
>6778	PrimaryExpression	1
>6779	MemberAccess	m_point_data [ i ] . m_pos
>6780	Identifier	m_pos
>6781	ArrayIndexing	m_point_data [ i ]
>6782	Identifier	i
>6783	Identifier	m_point_data
>6784	ExpressionStatement	 
>6785	AssignmentExpr	m_point_data [ i ] . m_pos [ 0 ] = tmp [ 0 ]
>6786	ArrayIndexing	tmp [ 0 ]
>6787	PrimaryExpression	0
>6788	Identifier	tmp
>6789	ArrayIndexing	m_point_data [ i ] . m_pos [ 0 ]
>6790	PrimaryExpression	0
>6791	MemberAccess	m_point_data [ i ] . m_pos
>6792	Identifier	m_pos
>6793	ArrayIndexing	m_point_data [ i ]
>6794	Identifier	i
>6795	Identifier	m_point_data
>6796	ExpressionStatement	 
>6797	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , R , m_point_data [ i ] . m_pos , tmp )
>6798	ArgumentList	3
>6799	Argument	tmp
>6800	Identifier	tmp
>6801	Argument	m_point_data [ i ] . m_pos
>6802	MemberAccess	m_point_data [ i ] . m_pos
>6803	Identifier	m_pos
>6804	ArrayIndexing	m_point_data [ i ]
>6805	Identifier	i
>6806	Identifier	m_point_data
>6807	Argument	R
>6808	Identifier	R
>6809	Argument	1
>6810	PrimaryExpression	1
>6811	Argument	3
>6812	PrimaryExpression	3
>6813	Argument	3
>6814	PrimaryExpression	3
>6815	Argument	3
>6816	PrimaryExpression	3
>6817	Callee	matrix_product
>6818	Identifier	matrix_product
>6819	IdentifierDeclStatement	 
>6820	IdentifierDecl	tmp [ 3 ]
>6821	PrimaryExpression	3
>6822	Identifier	tmp
>6823	IdentifierDeclType	double [ 3 ]
>6824	ExpressionStatement	 
>6825	CallExpression	matrix_scale ( 3 , 1 , m_point_data [ i ] . m_pos , m_scale / scale , m_point_data [ i ] . m_pos )
>6826	ArgumentList	3
>6827	Argument	m_point_data [ i ] . m_pos
>6828	MemberAccess	m_point_data [ i ] . m_pos
>6829	Identifier	m_pos
>6830	ArrayIndexing	m_point_data [ i ]
>6831	Identifier	i
>6832	Identifier	m_point_data
>6833	Argument	m_scale / scale
>6834	MultiplicativeExpression	m_scale / scale
>6835	Identifier	scale
>6836	Identifier	m_scale
>6837	Argument	m_point_data [ i ] . m_pos
>6838	MemberAccess	m_point_data [ i ] . m_pos
>6839	Identifier	m_pos
>6840	ArrayIndexing	m_point_data [ i ]
>6841	Identifier	i
>6842	Identifier	m_point_data
>6843	Argument	1
>6844	PrimaryExpression	1
>6845	Argument	3
>6846	PrimaryExpression	3
>6847	Callee	matrix_scale
>6848	Identifier	matrix_scale
>6849	ExpressionStatement	 
>6850	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , m_point_data [ i ] . m_pos , center , m_point_data [ i ] . m_pos )
>6851	ArgumentList	3
>6852	Argument	m_point_data [ i ] . m_pos
>6853	MemberAccess	m_point_data [ i ] . m_pos
>6854	Identifier	m_pos
>6855	ArrayIndexing	m_point_data [ i ]
>6856	Identifier	i
>6857	Identifier	m_point_data
>6858	Argument	center
>6859	Identifier	center
>6860	Argument	m_point_data [ i ] . m_pos
>6861	MemberAccess	m_point_data [ i ] . m_pos
>6862	Identifier	m_pos
>6863	ArrayIndexing	m_point_data [ i ]
>6864	Identifier	i
>6865	Identifier	m_point_data
>6866	Argument	1
>6867	PrimaryExpression	1
>6868	Argument	3
>6869	PrimaryExpression	3
>6870	Argument	1
>6871	PrimaryExpression	1
>6872	Argument	3
>6873	PrimaryExpression	3
>6874	Callee	matrix_diff
>6875	Identifier	matrix_diff
>6876	IncDecOp	 
>6877	IncDec	++
>6878	Identifier	i
>6879	Condition	 
>6880	RelationalExpression	i < num_points
>6881	Identifier	num_points
>6882	Identifier	i
>6883	ForInit	 
>6884	IdentifierDeclStatement	int i = 0 ;
>6885	IdentifierDecl	i = 0
>6886	AssignmentExpr	i = 0
>6887	PrimaryExpression	0
>6888	Identifier	i
>6889	Identifier	i
>6890	IdentifierDeclType	int
>6891	IdentifierDeclStatement	 
>6892	IdentifierDecl	num_points = ( int ) m_point_data . size ( )
>6893	AssignmentExpr	num_points = ( int ) m_point_data . size ( )
>6894	CastExpression	( int ) m_point_data . size ( )
>6895	CallExpression	m_point_data . size ( )
>6896	ArgumentList	 
>6897	Callee	m_point_data . size
>6898	MemberAccess	m_point_data . size
>6899	Identifier	size
>6900	Identifier	m_point_data
>6901	CastTarget	int
>6902	Identifier	num_points
>6903	Identifier	num_points
>6904	IdentifierDeclType	int
>6905	ExpressionStatement	 
>6906	CallExpression	printf ( \"scale = %0.3f\n\" , scale )
>6907	ArgumentList	\"scale = %0.3f\n\"
>6908	Argument	scale
>6909	Identifier	scale
>6910	Argument	\"scale = %0.3f\n\"
>6911	PrimaryExpression	\"scale = %0.3f\n\"
>6912	Callee	printf
>6913	Identifier	printf
>6914	ExpressionStatement	 
>6915	CallExpression	printf ( \"z_axis = [%0.3f, %0.3f, %0.3f]\n\" , z_axis [ 0 ] , z_axis [ 1 ] , z_axis [ 2 ] )
>6916	ArgumentList	\"z_axis = [%0.3f, %0.3f, %0.3f]\n\"
>6917	Argument	z_axis [ 2 ]
>6918	ArrayIndexing	z_axis [ 2 ]
>6919	PrimaryExpression	2
>6920	Identifier	z_axis
>6921	Argument	z_axis [ 1 ]
>6922	ArrayIndexing	z_axis [ 1 ]
>6923	PrimaryExpression	1
>6924	Identifier	z_axis
>6925	Argument	z_axis [ 0 ]
>6926	ArrayIndexing	z_axis [ 0 ]
>6927	PrimaryExpression	0
>6928	Identifier	z_axis
>6929	Argument	\"z_axis = [%0.3f, %0.3f, %0.3f]\n\"
>6930	PrimaryExpression	\"z_axis = [%0.3f, %0.3f, %0.3f]\n\"
>6931	Callee	printf
>6932	Identifier	printf
>6933	ExpressionStatement	 
>6934	CallExpression	printf ( \"x_axis = [%0.3f, %0.3f, %0.3f]\n\" , x_axis [ 0 ] , x_axis [ 1 ] , x_axis [ 2 ] )
>6935	ArgumentList	\"x_axis = [%0.3f, %0.3f, %0.3f]\n\"
>6936	Argument	x_axis [ 2 ]
>6937	ArrayIndexing	x_axis [ 2 ]
>6938	PrimaryExpression	2
>6939	Identifier	x_axis
>6940	Argument	x_axis [ 1 ]
>6941	ArrayIndexing	x_axis [ 1 ]
>6942	PrimaryExpression	1
>6943	Identifier	x_axis
>6944	Argument	x_axis [ 0 ]
>6945	ArrayIndexing	x_axis [ 0 ]
>6946	PrimaryExpression	0
>6947	Identifier	x_axis
>6948	Argument	\"x_axis = [%0.3f, %0.3f, %0.3f]\n\"
>6949	PrimaryExpression	\"x_axis = [%0.3f, %0.3f, %0.3f]\n\"
>6950	Callee	printf
>6951	Identifier	printf
>6952	ExpressionStatement	 
>6953	CallExpression	printf ( \"up = [%0.3f, %0.3f, %0.3f]\n\" , up [ 0 ] , up [ 1 ] , up [ 2 ] )
>6954	ArgumentList	\"up = [%0.3f, %0.3f, %0.3f]\n\"
>6955	Argument	up [ 2 ]
>6956	ArrayIndexing	up [ 2 ]
>6957	PrimaryExpression	2
>6958	Identifier	up
>6959	Argument	up [ 1 ]
>6960	ArrayIndexing	up [ 1 ]
>6961	PrimaryExpression	1
>6962	Identifier	up
>6963	Argument	up [ 0 ]
>6964	ArrayIndexing	up [ 0 ]
>6965	PrimaryExpression	0
>6966	Identifier	up
>6967	Argument	\"up = [%0.3f, %0.3f, %0.3f]\n\"
>6968	PrimaryExpression	\"up = [%0.3f, %0.3f, %0.3f]\n\"
>6969	Callee	printf
>6970	Identifier	printf
>6971	ExpressionStatement	 
>6972	CallExpression	printf ( \"center = [%0.3f, %0.3f, %0.3f]\n\" , center [ 0 ] , center [ 1 ] , center [ 2 ] )
>6973	ArgumentList	\"center = [%0.3f, %0.3f, %0.3f]\n\"
>6974	Argument	center [ 2 ]
>6975	ArrayIndexing	center [ 2 ]
>6976	PrimaryExpression	2
>6977	Identifier	center
>6978	Argument	center [ 1 ]
>6979	ArrayIndexing	center [ 1 ]
>6980	PrimaryExpression	1
>6981	Identifier	center
>6982	Argument	center [ 0 ]
>6983	ArrayIndexing	center [ 0 ]
>6984	PrimaryExpression	0
>6985	Identifier	center
>6986	Argument	\"center = [%0.3f, %0.3f, %0.3f]\n\"
>6987	PrimaryExpression	\"center = [%0.3f, %0.3f, %0.3f]\n\"
>6988	Callee	printf
>6989	Identifier	printf
>6990	ExpressionStatement	 
>6991	AssignmentExpr	scale_out = scale
>6992	Identifier	scale
>6993	Identifier	scale_out
>6994	ExpressionStatement	 
>6995	CallExpression	memcpy ( R_out , R , 9 * sizeof ( double ) )
>6996	ArgumentList	R_out
>6997	Argument	9 * sizeof ( double )
>6998	MultiplicativeExpression	9 * sizeof ( double )
>6999	SizeofExpr	sizeof ( double )
>7000	SizeofOperand	double
>7001	Sizeof	sizeof
>7002	PrimaryExpression	9
>7003	Argument	R
>7004	Identifier	R
>7005	Argument	R_out
>7006	Identifier	R_out
>7007	Callee	memcpy
>7008	Identifier	memcpy
>7009	ExpressionStatement	 
>7010	CallExpression	memcpy ( center_out , center , 3 * sizeof ( double ) )
>7011	ArgumentList	center_out
>7012	Argument	3 * sizeof ( double )
>7013	MultiplicativeExpression	3 * sizeof ( double )
>7014	SizeofExpr	sizeof ( double )
>7015	SizeofOperand	double
>7016	Sizeof	sizeof
>7017	PrimaryExpression	3
>7018	Argument	center
>7019	Identifier	center
>7020	Argument	center_out
>7021	Identifier	center_out
>7022	Callee	memcpy
>7023	Identifier	memcpy
>7024	IdentifierDeclStatement	 
>7025	IdentifierDecl	R [ 9 ] = { x_axis [ 0 ] , x_axis [ 1 ] , x_axis [ 2 ] , up [ 0 ] , up [ 1 ] , up [ 2 ] , z_axis [ 0 ] , z_axis [ \
>7026	AssignmentExpr	R [ 9 ] = { x_axis [ 0 ] , x_axis [ 1 ] , x_axis [ 2 ] , up [ 0 ] , up [ 1 ] , up [ 2 ] , z_axis [ 0 ] , \
>7027	InitializerList	x_axis [ 0 ]
>7028	ArrayIndexing	z_axis [ 2 ]
>7029	PrimaryExpression	2
>7030	Identifier	z_axis
>7031	ArrayIndexing	z_axis [ 1 ]
>7032	PrimaryExpression	1
>7033	Identifier	z_axis
>7034	ArrayIndexing	z_axis [ 0 ]
>7035	PrimaryExpression	0
>7036	Identifier	z_axis
>7037	ArrayIndexing	up [ 2 ]
>7038	PrimaryExpression	2
>7039	Identifier	up
>7040	ArrayIndexing	up [ 1 ]
>7041	PrimaryExpression	1
>7042	Identifier	up
>7043	ArrayIndexing	up [ 0 ]
>7044	PrimaryExpression	0
>7045	Identifier	up
>7046	ArrayIndexing	x_axis [ 2 ]
>7047	PrimaryExpression	2
>7048	Identifier	x_axis
>7049	ArrayIndexing	x_axis [ 1 ]
>7050	PrimaryExpression	1
>7051	Identifier	x_axis
>7052	ArrayIndexing	x_axis [ 0 ]
>7053	PrimaryExpression	0
>7054	Identifier	x_axis
>7055	Identifier	R
>7056	PrimaryExpression	9
>7057	Identifier	R
>7058	IdentifierDeclType	double [ 9 ]
>7059	ExpressionStatement	 
>7060	CallExpression	SetupScene ( center , up , x_axis , z_axis , scale )
>7061	ArgumentList	center
>7062	Argument	scale
>7063	Identifier	scale
>7064	Argument	z_axis
>7065	Identifier	z_axis
>7066	Argument	x_axis
>7067	Identifier	x_axis
>7068	Argument	up
>7069	Identifier	up
>7070	Argument	center
>7071	Identifier	center
>7072	Callee	SetupScene
>7073	Identifier	SetupScene
>7074	IdentifierDeclStatement	 
>7075	IdentifierDecl	scale
>7076	Identifier	scale
>7077	IdentifierDeclType	double
>7078	IdentifierDeclStatement	 
>7079	IdentifierDecl	z_axis [ 3 ]
>7080	PrimaryExpression	3
>7081	Identifier	z_axis
>7082	IdentifierDeclType	double [ 3 ]
>7083	IdentifierDecl	x_axis [ 3 ]
>7084	PrimaryExpression	3
>7085	Identifier	x_axis
>7086	IdentifierDeclType	double [ 3 ]
>7087	IdentifierDecl	up [ 3 ]
>7088	PrimaryExpression	3
>7089	Identifier	up
>7090	IdentifierDeclType	double [ 3 ]
>7091	IdentifierDecl	center [ 3 ]
>7092	PrimaryExpression	3
>7093	Identifier	center
>7094	IdentifierDeclType	double [ 3 ]
>7095	ExpressionStatement	 
>7096	CallExpression	printf ( \"[RepositionScene] Repositioning scene\n\" )
>7097	ArgumentList	\"[RepositionScene] Repositioning scene\n\"
>7098	Argument	\"[RepositionScene] Repositioning scene\n\"
>7099	PrimaryExpression	\"[RepositionScene] Repositioning scene\n\"
>7100	Callee	printf
>7101	Identifier	printf
>7162	FunctionDef	BaseApp 
>7163	ParameterList	int i1 , int i2
>7164	Parameter	 
>7165	Identifier	i2
>7166	ParameterType	int
>7167	Parameter	 
>7168	Identifier	i1
>7169	ParameterType	int
>7170	ReturnType	void
>7171	CompoundStatement	 
>7172	ExpressionStatement	 
>7173	CallExpression	fclose ( f )
>7174	ArgumentList	f
>7175	Argument	f
>7176	Identifier	f
>7177	Callee	fclose
>7178	Identifier	fclose
>7179	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>7180	CompoundStatement	 
>7181	ExpressionStatement	 
>7182	CallExpression	fprintf ( f , \"%0.6e %0.6e\n\" , pos [ 0 ] , pos [ 2 ] )
>7183	ArgumentList	f
>7184	Argument	pos [ 2 ]
>7185	ArrayIndexing	pos [ 2 ]
>7186	PrimaryExpression	2
>7187	Identifier	pos
>7188	Argument	pos [ 0 ]
>7189	ArrayIndexing	pos [ 0 ]
>7190	PrimaryExpression	0
>7191	Identifier	pos
>7192	Argument	\"%0.6e %0.6e\n\"
>7193	PrimaryExpression	\"%0.6e %0.6e\n\"
>7194	Argument	f
>7195	Identifier	f
>7196	Callee	fprintf
>7197	Identifier	fprintf
>7198	IdentifierDeclStatement	 
>7199	IdentifierDecl	* pos = m_point_data [ i ] . m_pos
>7200	AssignmentExpr	* pos = m_point_data [ i ] . m_pos
>7201	MemberAccess	m_point_data [ i ] . m_pos
>7202	Identifier	m_pos
>7203	ArrayIndexing	m_point_data [ i ]
>7204	Identifier	i
>7205	Identifier	m_point_data
>7206	Identifier	pos
>7207	Identifier	pos
>7208	IdentifierDeclType	double *
>7209	IncDecOp	 
>7210	IncDec	++
>7211	Identifier	i
>7212	Condition	 
>7213	RelationalExpression	i < num_points
>7214	Identifier	num_points
>7215	Identifier	i
>7216	ForInit	 
>7217	IdentifierDeclStatement	int i = 0 ;
>7218	IdentifierDecl	i = 0
>7219	AssignmentExpr	i = 0
>7220	PrimaryExpression	0
>7221	Identifier	i
>7222	Identifier	i
>7223	IdentifierDeclType	int
>7224	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>7225	CompoundStatement	 
>7226	IfStatement	if ( m_image_data [ i ] . m_camera . m_adjusted )
>7227	ElseStatement	else
>7228	CompoundStatement	 
>7229	ExpressionStatement	 
>7230	CallExpression	fprintf ( f , \"0.0 0.0\n\" )
>7231	ArgumentList	f
>7232	Argument	\"0.0 0.0\n\"
>7233	PrimaryExpression	\"0.0 0.0\n\"
>7234	Argument	f
>7235	Identifier	f
>7236	Callee	fprintf
>7237	Identifier	fprintf
>7238	CompoundStatement	 
>7239	ExpressionStatement	 
>7240	CallExpression	fprintf ( f , \"%0.6e %0.6e\n\" , pos [ 0 ] , pos [ 2 ] )
>7241	ArgumentList	f
>7242	Argument	pos [ 2 ]
>7243	ArrayIndexing	pos [ 2 ]
>7244	PrimaryExpression	2
>7245	Identifier	pos
>7246	Argument	pos [ 0 ]
>7247	ArrayIndexing	pos [ 0 ]
>7248	PrimaryExpression	0
>7249	Identifier	pos
>7250	Argument	\"%0.6e %0.6e\n\"
>7251	PrimaryExpression	\"%0.6e %0.6e\n\"
>7252	Argument	f
>7253	Identifier	f
>7254	Callee	fprintf
>7255	Identifier	fprintf
>7256	ExpressionStatement	 
>7257	CallExpression	m_image_data [ i ] . m_camera . GetPosition ( pos )
>7258	ArgumentList	pos
>7259	Argument	pos
>7260	Identifier	pos
>7261	Callee	m_image_data [ i ] . m_camera . GetPosition
>7262	MemberAccess	m_image_data [ i ] . m_camera . GetPosition
>7263	Identifier	GetPosition
>7264	MemberAccess	m_image_data [ i ] . m_camera
>7265	Identifier	m_camera
>7266	ArrayIndexing	m_image_data [ i ]
>7267	Identifier	i
>7268	Identifier	m_image_data
>7269	IdentifierDeclStatement	 
>7270	IdentifierDecl	pos [ 3 ]
>7271	PrimaryExpression	3
>7272	Identifier	pos
>7273	IdentifierDeclType	double [ 3 ]
>7274	Condition	 
>7275	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>7276	Identifier	m_adjusted
>7277	MemberAccess	m_image_data [ i ] . m_camera
>7278	Identifier	m_camera
>7279	ArrayIndexing	m_image_data [ i ]
>7280	Identifier	i
>7281	Identifier	m_image_data
>7282	IncDecOp	 
>7283	IncDec	++
>7284	Identifier	i
>7285	Condition	 
>7286	RelationalExpression	i < num_images
>7287	Identifier	num_images
>7288	Identifier	i
>7289	ForInit	 
>7290	IdentifierDeclStatement	int i = 0 ;
>7291	IdentifierDecl	i = 0
>7292	AssignmentExpr	i = 0
>7293	PrimaryExpression	0
>7294	Identifier	i
>7295	Identifier	i
>7296	IdentifierDeclType	int
>7297	ExpressionStatement	 
>7298	CallExpression	fprintf ( f , \"%d %d\n\" , num_images , num_points )
>7299	ArgumentList	f
>7300	Argument	num_points
>7301	Identifier	num_points
>7302	Argument	num_images
>7303	Identifier	num_images
>7304	Argument	\"%d %d\n\"
>7305	PrimaryExpression	\"%d %d\n\"
>7306	Argument	f
>7307	Identifier	f
>7308	Callee	fprintf
>7309	Identifier	fprintf
>7310	IfStatement	if ( f == NULL )
>7311	ReturnStatement	 
>7312	Condition	 
>7313	EqualityExpression	f == NULL
>7314	Identifier	NULL
>7315	Identifier	f
>7316	IdentifierDeclStatement	 
>7317	IdentifierDecl	* f = fopen ( \"overhead.txt\" , \"w\" )
>7318	AssignmentExpr	* f = fopen ( \"overhead.txt\" , \"w\" )
>7319	CallExpression	fopen ( \"overhead.txt\" , \"w\" )
>7320	ArgumentList	\"overhead.txt\"
>7321	Argument	\"w\"
>7322	PrimaryExpression	\"w\"
>7323	Argument	\"overhead.txt\"
>7324	PrimaryExpression	\"overhead.txt\"
>7325	Callee	fopen
>7326	Identifier	fopen
>7327	Identifier	f
>7328	Identifier	f
>7329	IdentifierDeclType	FILE *
>7330	ExpressionStatement	 
>7331	CallExpression	printf ( \"Proj[after] = %0.3f, %0.3f\n\" , proj [ 0 ] , proj [ 1 ] )
>7332	ArgumentList	\"Proj[after] = %0.3f, %0.3f\n\"
>7333	Argument	proj [ 1 ]
>7334	ArrayIndexing	proj [ 1 ]
>7335	PrimaryExpression	1
>7336	Identifier	proj
>7337	Argument	proj [ 0 ]
>7338	ArrayIndexing	proj [ 0 ]
>7339	PrimaryExpression	0
>7340	Identifier	proj
>7341	Argument	\"Proj[after] = %0.3f, %0.3f\n\"
>7342	PrimaryExpression	\"Proj[after] = %0.3f, %0.3f\n\"
>7343	Callee	printf
>7344	Identifier	printf
>7345	ExpressionStatement	 
>7346	CallExpression	m_image_data [ 1 ] . m_camera . Project ( m_point_data [ 0 ] . m_pos , proj )
>7347	ArgumentList	m_point_data [ 0 ] . m_pos
>7348	Argument	proj
>7349	Identifier	proj
>7350	Argument	m_point_data [ 0 ] . m_pos
>7351	MemberAccess	m_point_data [ 0 ] . m_pos
>7352	Identifier	m_pos
>7353	ArrayIndexing	m_point_data [ 0 ]
>7354	PrimaryExpression	0
>7355	Identifier	m_point_data
>7356	Callee	m_image_data [ 1 ] . m_camera . Project
>7357	MemberAccess	m_image_data [ 1 ] . m_camera . Project
>7358	Identifier	Project
>7359	MemberAccess	m_image_data [ 1 ] . m_camera
>7360	Identifier	m_camera
>7361	ArrayIndexing	m_image_data [ 1 ]
>7362	PrimaryExpression	1
>7363	Identifier	m_image_data
>7364	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>7365	CompoundStatement	 
>7366	IfStatement	if ( m_image_data [ i ] . m_camera . m_adjusted )
>7367	CompoundStatement	 
>7368	ExpressionStatement	 
>7369	CallExpression	m_image_data [ i ] . m_fit_plane . Transform ( M )
>7370	ArgumentList	M
>7371	Argument	M
>7372	Identifier	M
>7373	Callee	m_image_data [ i ] . m_fit_plane . Transform
>7374	MemberAccess	m_image_data [ i ] . m_fit_plane . Transform
>7375	Identifier	Transform
>7376	MemberAccess	m_image_data [ i ] . m_fit_plane
>7377	Identifier	m_fit_plane
>7378	ArrayIndexing	m_image_data [ i ]
>7379	Identifier	i
>7380	Identifier	m_image_data
>7381	ExpressionStatement	 
>7382	CallExpression	m_image_data [ i ] . m_camera . Finalize ( )
>7383	ArgumentList	 
>7384	Callee	m_image_data [ i ] . m_camera . Finalize
>7385	MemberAccess	m_image_data [ i ] . m_camera . Finalize
>7386	Identifier	Finalize
>7387	MemberAccess	m_image_data [ i ] . m_camera
>7388	Identifier	m_camera
>7389	ArrayIndexing	m_image_data [ i ]
>7390	Identifier	i
>7391	Identifier	m_image_data
>7392	ExpressionStatement	 
>7393	CallExpression	m_image_data [ i ] . m_camera . SetPosition ( pos_new )
>7394	ArgumentList	pos_new
>7395	Argument	pos_new
>7396	Identifier	pos_new
>7397	Callee	m_image_data [ i ] . m_camera . SetPosition
>7398	MemberAccess	m_image_data [ i ] . m_camera . SetPosition
>7399	Identifier	SetPosition
>7400	MemberAccess	m_image_data [ i ] . m_camera
>7401	Identifier	m_camera
>7402	ArrayIndexing	m_image_data [ i ]
>7403	Identifier	i
>7404	Identifier	m_image_data
>7405	ExpressionStatement	 
>7406	CallExpression	memcpy ( m_image_data [ i ] . m_camera . m_R , pose_new , 9 * sizeof ( double ) )
>7407	ArgumentList	m_image_data [ i ] . m_camera . m_R
>7408	Argument	9 * sizeof ( double )
>7409	MultiplicativeExpression	9 * sizeof ( double )
>7410	SizeofExpr	sizeof ( double )
>7411	SizeofOperand	double
>7412	Sizeof	sizeof
>7413	PrimaryExpression	9
>7414	Argument	pose_new
>7415	Identifier	pose_new
>7416	Argument	m_image_data [ i ] . m_camera . m_R
>7417	MemberAccess	m_image_data [ i ] . m_camera . m_R
>7418	Identifier	m_R
>7419	MemberAccess	m_image_data [ i ] . m_camera
>7420	Identifier	m_camera
>7421	ArrayIndexing	m_image_data [ i ]
>7422	Identifier	i
>7423	Identifier	m_image_data
>7424	Callee	memcpy
>7425	Identifier	memcpy
>7426	ExpressionStatement	 
>7427	CallExpression	m_image_data [ i ] . m_camera . SetPose ( pose_new )
>7428	ArgumentList	pose_new
>7429	Argument	pose_new
>7430	Identifier	pose_new
>7431	Callee	m_image_data [ i ] . m_camera . SetPose
>7432	MemberAccess	m_image_data [ i ] . m_camera . SetPose
>7433	Identifier	SetPose
>7434	MemberAccess	m_image_data [ i ] . m_camera
>7435	Identifier	m_camera
>7436	ArrayIndexing	m_image_data [ i ]
>7437	Identifier	i
>7438	Identifier	m_image_data
>7439	ExpressionStatement	 
>7440	CallExpression	matrix_product ( 3 , 3 , 3 , 3 , R , pose , pose_new )
>7441	ArgumentList	3
>7442	Argument	pose_new
>7443	Identifier	pose_new
>7444	Argument	pose
>7445	Identifier	pose
>7446	Argument	R
>7447	Identifier	R
>7448	Argument	3
>7449	PrimaryExpression	3
>7450	Argument	3
>7451	PrimaryExpression	3
>7452	Argument	3
>7453	PrimaryExpression	3
>7454	Argument	3
>7455	PrimaryExpression	3
>7456	Callee	matrix_product
>7457	Identifier	matrix_product
>7458	ExpressionStatement	 
>7459	CallExpression	m_image_data [ i ] . m_camera . GetPose ( pose )
>7460	ArgumentList	pose
>7461	Argument	pose
>7462	Identifier	pose
>7463	Callee	m_image_data [ i ] . m_camera . GetPose
>7464	MemberAccess	m_image_data [ i ] . m_camera . GetPose
>7465	Identifier	GetPose
>7466	MemberAccess	m_image_data [ i ] . m_camera
>7467	Identifier	m_camera
>7468	ArrayIndexing	m_image_data [ i ]
>7469	Identifier	i
>7470	Identifier	m_image_data
>7471	IdentifierDeclStatement	 
>7472	IdentifierDecl	pose_new [ 9 ]
>7473	PrimaryExpression	9
>7474	Identifier	pose_new
>7475	IdentifierDeclType	double [ 9 ]
>7476	IdentifierDecl	pose [ 9 ]
>7477	PrimaryExpression	9
>7478	Identifier	pose
>7479	IdentifierDeclType	double [ 9 ]
>7480	ExpressionStatement	 
>7481	CallExpression	matrix_scale ( 3 , 1 , pos_new , scale , pos_new )
>7482	ArgumentList	3
>7483	Argument	pos_new
>7484	Identifier	pos_new
>7485	Argument	scale
>7486	Identifier	scale
>7487	Argument	pos_new
>7488	Identifier	pos_new
>7489	Argument	1
>7490	PrimaryExpression	1
>7491	Argument	3
>7492	PrimaryExpression	3
>7493	Callee	matrix_scale
>7494	Identifier	matrix_scale
>7495	ExpressionStatement	 
>7496	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , R , pos , pos_new )
>7497	ArgumentList	3
>7498	Argument	pos_new
>7499	Identifier	pos_new
>7500	Argument	pos
>7501	Identifier	pos
>7502	Argument	R
>7503	Identifier	R
>7504	Argument	1
>7505	PrimaryExpression	1
>7506	Argument	3
>7507	PrimaryExpression	3
>7508	Argument	3
>7509	PrimaryExpression	3
>7510	Argument	3
>7511	PrimaryExpression	3
>7512	Callee	matrix_product
>7513	Identifier	matrix_product
>7514	ExpressionStatement	 
>7515	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , pos , origin , pos )
>7516	ArgumentList	3
>7517	Argument	pos
>7518	Identifier	pos
>7519	Argument	origin
>7520	Identifier	origin
>7521	Argument	pos
>7522	Identifier	pos
>7523	Argument	1
>7524	PrimaryExpression	1
>7525	Argument	3
>7526	PrimaryExpression	3
>7527	Argument	1
>7528	PrimaryExpression	1
>7529	Argument	3
>7530	PrimaryExpression	3
>7531	Callee	matrix_diff
>7532	Identifier	matrix_diff
>7533	ExpressionStatement	 
>7534	CallExpression	m_image_data [ i ] . m_camera . GetPosition ( pos )
>7535	ArgumentList	pos
>7536	Argument	pos
>7537	Identifier	pos
>7538	Callee	m_image_data [ i ] . m_camera . GetPosition
>7539	MemberAccess	m_image_data [ i ] . m_camera . GetPosition
>7540	Identifier	GetPosition
>7541	MemberAccess	m_image_data [ i ] . m_camera
>7542	Identifier	m_camera
>7543	ArrayIndexing	m_image_data [ i ]
>7544	Identifier	i
>7545	Identifier	m_image_data
>7546	IdentifierDeclStatement	 
>7547	IdentifierDecl	pos_new [ 3 ]
>7548	PrimaryExpression	3
>7549	Identifier	pos_new
>7550	IdentifierDeclType	double [ 3 ]
>7551	IdentifierDecl	pos [ 3 ]
>7552	PrimaryExpression	3
>7553	Identifier	pos
>7554	IdentifierDeclType	double [ 3 ]
>7555	Condition	 
>7556	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>7557	Identifier	m_adjusted
>7558	MemberAccess	m_image_data [ i ] . m_camera
>7559	Identifier	m_camera
>7560	ArrayIndexing	m_image_data [ i ]
>7561	Identifier	i
>7562	Identifier	m_image_data
>7563	IncDecOp	 
>7564	IncDec	++
>7565	Identifier	i
>7566	Condition	 
>7567	RelationalExpression	i < num_images
>7568	Identifier	num_images
>7569	Identifier	i
>7570	ForInit	 
>7571	IdentifierDeclStatement	int i = 0 ;
>7572	IdentifierDecl	i = 0
>7573	AssignmentExpr	i = 0
>7574	PrimaryExpression	0
>7575	Identifier	i
>7576	Identifier	i
>7577	IdentifierDeclType	int
>7578	IdentifierDeclStatement	 
>7579	IdentifierDecl	num_images = GetNumImages ( )
>7580	AssignmentExpr	num_images = GetNumImages ( )
>7581	CallExpression	GetNumImages ( )
>7582	ArgumentList	 
>7583	Callee	GetNumImages
>7584	Identifier	GetNumImages
>7585	Identifier	num_images
>7586	Identifier	num_images
>7587	IdentifierDeclType	int
>7588	ExpressionStatement	 
>7589	CallExpression	matrix_product ( 4 , 4 , 4 , 4 , R16 , t16 , M )
>7590	ArgumentList	4
>7591	Argument	M
>7592	Identifier	M
>7593	Argument	t16
>7594	Identifier	t16
>7595	Argument	R16
>7596	Identifier	R16
>7597	Argument	4
>7598	PrimaryExpression	4
>7599	Argument	4
>7600	PrimaryExpression	4
>7601	Argument	4
>7602	PrimaryExpression	4
>7603	Argument	4
>7604	PrimaryExpression	4
>7605	Callee	matrix_product
>7606	Identifier	matrix_product
>7607	ExpressionStatement	 
>7608	AssignmentExpr	t16 [ 11 ] = origin [ 2 ]
>7609	ArrayIndexing	origin [ 2 ]
>7610	PrimaryExpression	2
>7611	Identifier	origin
>7612	ArrayIndexing	t16 [ 11 ]
>7613	PrimaryExpression	11
>7614	Identifier	t16
>7615	ExpressionStatement	 
>7616	AssignmentExpr	t16 [ 7 ] = - origin [ 1 ]
>7617	UnaryOp	- origin [ 1 ]
>7618	ArrayIndexing	origin [ 1 ]
>7619	PrimaryExpression	1
>7620	Identifier	origin
>7621	UnaryOperator	-
>7622	ArrayIndexing	t16 [ 7 ]
>7623	PrimaryExpression	7
>7624	Identifier	t16
>7625	ExpressionStatement	 
>7626	AssignmentExpr	t16 [ 3 ] = - origin [ 0 ]
>7627	UnaryOp	- origin [ 0 ]
>7628	ArrayIndexing	origin [ 0 ]
>7629	PrimaryExpression	0
>7630	Identifier	origin
>7631	UnaryOperator	-
>7632	ArrayIndexing	t16 [ 3 ]
>7633	PrimaryExpression	3
>7634	Identifier	t16
>7635	ExpressionStatement	 
>7636	CallExpression	memcpy ( R16 + 8 , R + 6 , 3 * sizeof ( double ) )
>7637	ArgumentList	R16 + 8
>7638	Argument	3 * sizeof ( double )
>7639	MultiplicativeExpression	3 * sizeof ( double )
>7640	SizeofExpr	sizeof ( double )
>7641	SizeofOperand	double
>7642	Sizeof	sizeof
>7643	PrimaryExpression	3
>7644	Argument	R + 6
>7645	AdditiveExpression	R + 6
>7646	PrimaryExpression	6
>7647	Identifier	R
>7648	Argument	R16 + 8
>7649	AdditiveExpression	R16 + 8
>7650	PrimaryExpression	8
>7651	Identifier	R16
>7652	Callee	memcpy
>7653	Identifier	memcpy
>7654	ExpressionStatement	 
>7655	CallExpression	memcpy ( R16 + 4 , R + 3 , 3 * sizeof ( double ) )
>7656	ArgumentList	R16 + 4
>7657	Argument	3 * sizeof ( double )
>7658	MultiplicativeExpression	3 * sizeof ( double )
>7659	SizeofExpr	sizeof ( double )
>7660	SizeofOperand	double
>7661	Sizeof	sizeof
>7662	PrimaryExpression	3
>7663	Argument	R + 3
>7664	AdditiveExpression	R + 3
>7665	PrimaryExpression	3
>7666	Identifier	R
>7667	Argument	R16 + 4
>7668	AdditiveExpression	R16 + 4
>7669	PrimaryExpression	4
>7670	Identifier	R16
>7671	Callee	memcpy
>7672	Identifier	memcpy
>7673	ExpressionStatement	 
>7674	CallExpression	memcpy ( R16 + 0 , R + 0 , 3 * sizeof ( double ) )
>7675	ArgumentList	R16 + 0
>7676	Argument	3 * sizeof ( double )
>7677	MultiplicativeExpression	3 * sizeof ( double )
>7678	SizeofExpr	sizeof ( double )
>7679	SizeofOperand	double
>7680	Sizeof	sizeof
>7681	PrimaryExpression	3
>7682	Argument	R + 0
>7683	AdditiveExpression	R + 0
>7684	PrimaryExpression	0
>7685	Identifier	R
>7686	Argument	R16 + 0
>7687	AdditiveExpression	R16 + 0
>7688	PrimaryExpression	0
>7689	Identifier	R16
>7690	Callee	memcpy
>7691	Identifier	memcpy
>7692	ExpressionStatement	 
>7693	CallExpression	matrix_ident ( 4 , t16 )
>7694	ArgumentList	4
>7695	Argument	t16
>7696	Identifier	t16
>7697	Argument	4
>7698	PrimaryExpression	4
>7699	Callee	matrix_ident
>7700	Identifier	matrix_ident
>7701	ExpressionStatement	 
>7702	CallExpression	matrix_ident ( 4 , R16 )
>7703	ArgumentList	4
>7704	Argument	R16
>7705	Identifier	R16
>7706	Argument	4
>7707	PrimaryExpression	4
>7708	Callee	matrix_ident
>7709	Identifier	matrix_ident
>7710	IdentifierDeclStatement	 
>7711	IdentifierDecl	M [ 16 ]
>7712	PrimaryExpression	16
>7713	Identifier	M
>7714	IdentifierDeclType	double [ 16 ]
>7715	IdentifierDecl	t16 [ 16 ]
>7716	PrimaryExpression	16
>7717	Identifier	t16
>7718	IdentifierDeclType	double [ 16 ]
>7719	IdentifierDecl	R16 [ 16 ]
>7720	PrimaryExpression	16
>7721	Identifier	R16
>7722	IdentifierDeclType	double [ 16 ]
>7723	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>7724	CompoundStatement	 
>7725	ExpressionStatement	 
>7726	CallExpression	matrix_scale ( 3 , 1 , m_point_data [ i ] . m_pos , scale , m_point_data [ i ] . m_pos )
>7727	ArgumentList	3
>7728	Argument	m_point_data [ i ] . m_pos
>7729	MemberAccess	m_point_data [ i ] . m_pos
>7730	Identifier	m_pos
>7731	ArrayIndexing	m_point_data [ i ]
>7732	Identifier	i
>7733	Identifier	m_point_data
>7734	Argument	scale
>7735	Identifier	scale
>7736	Argument	m_point_data [ i ] . m_pos
>7737	MemberAccess	m_point_data [ i ] . m_pos
>7738	Identifier	m_pos
>7739	ArrayIndexing	m_point_data [ i ]
>7740	Identifier	i
>7741	Identifier	m_point_data
>7742	Argument	1
>7743	PrimaryExpression	1
>7744	Argument	3
>7745	PrimaryExpression	3
>7746	Callee	matrix_scale
>7747	Identifier	matrix_scale
>7748	ExpressionStatement	 
>7749	AssignmentExpr	m_point_data [ i ] . m_pos [ 2 ] = tmp [ 2 ]
>7750	ArrayIndexing	tmp [ 2 ]
>7751	PrimaryExpression	2
>7752	Identifier	tmp
>7753	ArrayIndexing	m_point_data [ i ] . m_pos [ 2 ]
>7754	PrimaryExpression	2
>7755	MemberAccess	m_point_data [ i ] . m_pos
>7756	Identifier	m_pos
>7757	ArrayIndexing	m_point_data [ i ]
>7758	Identifier	i
>7759	Identifier	m_point_data
>7760	ExpressionStatement	 
>7761	AssignmentExpr	m_point_data [ i ] . m_pos [ 1 ] = tmp [ 1 ]
>7762	ArrayIndexing	tmp [ 1 ]
>7763	PrimaryExpression	1
>7764	Identifier	tmp
>7765	ArrayIndexing	m_point_data [ i ] . m_pos [ 1 ]
>7766	PrimaryExpression	1
>7767	MemberAccess	m_point_data [ i ] . m_pos
>7768	Identifier	m_pos
>7769	ArrayIndexing	m_point_data [ i ]
>7770	Identifier	i
>7771	Identifier	m_point_data
>7772	ExpressionStatement	 
>7773	AssignmentExpr	m_point_data [ i ] . m_pos [ 0 ] = tmp [ 0 ]
>7774	ArrayIndexing	tmp [ 0 ]
>7775	PrimaryExpression	0
>7776	Identifier	tmp
>7777	ArrayIndexing	m_point_data [ i ] . m_pos [ 0 ]
>7778	PrimaryExpression	0
>7779	MemberAccess	m_point_data [ i ] . m_pos
>7780	Identifier	m_pos
>7781	ArrayIndexing	m_point_data [ i ]
>7782	Identifier	i
>7783	Identifier	m_point_data
>7784	ExpressionStatement	 
>7785	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , R , m_point_data [ i ] . m_pos , tmp )
>7786	ArgumentList	3
>7787	Argument	tmp
>7788	Identifier	tmp
>7789	Argument	m_point_data [ i ] . m_pos
>7790	MemberAccess	m_point_data [ i ] . m_pos
>7791	Identifier	m_pos
>7792	ArrayIndexing	m_point_data [ i ]
>7793	Identifier	i
>7794	Identifier	m_point_data
>7795	Argument	R
>7796	Identifier	R
>7797	Argument	1
>7798	PrimaryExpression	1
>7799	Argument	3
>7800	PrimaryExpression	3
>7801	Argument	3
>7802	PrimaryExpression	3
>7803	Argument	3
>7804	PrimaryExpression	3
>7805	Callee	matrix_product
>7806	Identifier	matrix_product
>7807	IdentifierDeclStatement	 
>7808	IdentifierDecl	tmp [ 3 ]
>7809	PrimaryExpression	3
>7810	Identifier	tmp
>7811	IdentifierDeclType	double [ 3 ]
>7812	ExpressionStatement	 
>7813	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , m_point_data [ i ] . m_pos , origin , m_point_data [ i ] . m_pos )
>7814	ArgumentList	3
>7815	Argument	m_point_data [ i ] . m_pos
>7816	MemberAccess	m_point_data [ i ] . m_pos
>7817	Identifier	m_pos
>7818	ArrayIndexing	m_point_data [ i ]
>7819	Identifier	i
>7820	Identifier	m_point_data
>7821	Argument	origin
>7822	Identifier	origin
>7823	Argument	m_point_data [ i ] . m_pos
>7824	MemberAccess	m_point_data [ i ] . m_pos
>7825	Identifier	m_pos
>7826	ArrayIndexing	m_point_data [ i ]
>7827	Identifier	i
>7828	Identifier	m_point_data
>7829	Argument	1
>7830	PrimaryExpression	1
>7831	Argument	3
>7832	PrimaryExpression	3
>7833	Argument	1
>7834	PrimaryExpression	1
>7835	Argument	3
>7836	PrimaryExpression	3
>7837	Callee	matrix_diff
>7838	Identifier	matrix_diff
>7839	IncDecOp	 
>7840	IncDec	++
>7841	Identifier	i
>7842	Condition	 
>7843	RelationalExpression	i < num_points
>7844	Identifier	num_points
>7845	Identifier	i
>7846	ForInit	 
>7847	IdentifierDeclStatement	int i = 0 ;
>7848	IdentifierDecl	i = 0
>7849	AssignmentExpr	i = 0
>7850	PrimaryExpression	0
>7851	Identifier	i
>7852	Identifier	i
>7853	IdentifierDeclType	int
>7854	IdentifierDeclStatement	 
>7855	IdentifierDecl	num_points = ( int ) m_point_data . size ( )
>7856	AssignmentExpr	num_points = ( int ) m_point_data . size ( )
>7857	CastExpression	( int ) m_point_data . size ( )
>7858	CallExpression	m_point_data . size ( )
>7859	ArgumentList	 
>7860	Callee	m_point_data . size
>7861	MemberAccess	m_point_data . size
>7862	Identifier	size
>7863	Identifier	m_point_data
>7864	CastTarget	int
>7865	Identifier	num_points
>7866	Identifier	num_points
>7867	IdentifierDeclType	int
>7868	ExpressionStatement	 
>7869	CallExpression	printf ( \"Proj[before] = %0.3f, %0.3f\n\" , proj [ 0 ] , proj [ 1 ] )
>7870	ArgumentList	\"Proj[before] = %0.3f, %0.3f\n\"
>7871	Argument	proj [ 1 ]
>7872	ArrayIndexing	proj [ 1 ]
>7873	PrimaryExpression	1
>7874	Identifier	proj
>7875	Argument	proj [ 0 ]
>7876	ArrayIndexing	proj [ 0 ]
>7877	PrimaryExpression	0
>7878	Identifier	proj
>7879	Argument	\"Proj[before] = %0.3f, %0.3f\n\"
>7880	PrimaryExpression	\"Proj[before] = %0.3f, %0.3f\n\"
>7881	Callee	printf
>7882	Identifier	printf
>7883	ExpressionStatement	 
>7884	CallExpression	m_image_data [ 1 ] . m_camera . Project ( m_point_data [ 0 ] . m_pos , proj )
>7885	ArgumentList	m_point_data [ 0 ] . m_pos
>7886	Argument	proj
>7887	Identifier	proj
>7888	Argument	m_point_data [ 0 ] . m_pos
>7889	MemberAccess	m_point_data [ 0 ] . m_pos
>7890	Identifier	m_pos
>7891	ArrayIndexing	m_point_data [ 0 ]
>7892	PrimaryExpression	0
>7893	Identifier	m_point_data
>7894	Callee	m_image_data [ 1 ] . m_camera . Project
>7895	MemberAccess	m_image_data [ 1 ] . m_camera . Project
>7896	Identifier	Project
>7897	MemberAccess	m_image_data [ 1 ] . m_camera
>7898	Identifier	m_camera
>7899	ArrayIndexing	m_image_data [ 1 ]
>7900	PrimaryExpression	1
>7901	Identifier	m_image_data
>7902	IdentifierDeclStatement	 
>7903	IdentifierDecl	proj [ 2 ]
>7904	PrimaryExpression	2
>7905	Identifier	proj
>7906	IdentifierDeclType	double [ 2 ]
>7907	IdentifierDeclStatement	 
>7908	IdentifierDecl	scale = 1.0 / matrix_norm ( 3 , 1 , diff )
>7909	AssignmentExpr	scale = 1.0 / matrix_norm ( 3 , 1 , diff )
>7910	MultiplicativeExpression	1.0 / matrix_norm ( 3 , 1 , diff )
>7911	CallExpression	matrix_norm ( 3 , 1 , diff )
>7912	ArgumentList	3
>7913	Argument	diff
>7914	Identifier	diff
>7915	Argument	1
>7916	PrimaryExpression	1
>7917	Argument	3
>7918	PrimaryExpression	3
>7919	Callee	matrix_norm
>7920	Identifier	matrix_norm
>7921	PrimaryExpression	1.0
>7922	Identifier	scale
>7923	Identifier	scale
>7924	IdentifierDeclType	double
>7925	ExpressionStatement	 
>7926	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , eye2 , origin , diff )
>7927	ArgumentList	3
>7928	Argument	diff
>7929	Identifier	diff
>7930	Argument	origin
>7931	Identifier	origin
>7932	Argument	eye2
>7933	Identifier	eye2
>7934	Argument	1
>7935	PrimaryExpression	1
>7936	Argument	3
>7937	PrimaryExpression	3
>7938	Argument	1
>7939	PrimaryExpression	1
>7940	Argument	3
>7941	PrimaryExpression	3
>7942	Callee	matrix_diff
>7943	Identifier	matrix_diff
>7944	ExpressionStatement	 
>7945	CallExpression	m_image_data [ i2 ] . m_camera . GetPosition ( eye2 )
>7946	ArgumentList	eye2
>7947	Argument	eye2
>7948	Identifier	eye2
>7949	Callee	m_image_data [ i2 ] . m_camera . GetPosition
>7950	MemberAccess	m_image_data [ i2 ] . m_camera . GetPosition
>7951	Identifier	GetPosition
>7952	MemberAccess	m_image_data [ i2 ] . m_camera
>7953	Identifier	m_camera
>7954	ArrayIndexing	m_image_data [ i2 ]
>7955	Identifier	i2
>7956	Identifier	m_image_data
>7957	IdentifierDeclStatement	 
>7958	IdentifierDecl	diff [ 3 ]
>7959	PrimaryExpression	3
>7960	Identifier	diff
>7961	IdentifierDeclType	double [ 3 ]
>7962	IdentifierDecl	eye2 [ 3 ]
>7963	PrimaryExpression	3
>7964	Identifier	eye2
>7965	IdentifierDeclType	double [ 3 ]
>7966	ExpressionStatement	 
>7967	CallExpression	m_image_data [ i1 ] . m_camera . GetPosition ( origin )
>7968	ArgumentList	origin
>7969	Argument	origin
>7970	Identifier	origin
>7971	Callee	m_image_data [ i1 ] . m_camera . GetPosition
>7972	MemberAccess	m_image_data [ i1 ] . m_camera . GetPosition
>7973	Identifier	GetPosition
>7974	MemberAccess	m_image_data [ i1 ] . m_camera
>7975	Identifier	m_camera
>7976	ArrayIndexing	m_image_data [ i1 ]
>7977	Identifier	i1
>7978	Identifier	m_image_data
>7979	IdentifierDeclStatement	 
>7980	IdentifierDecl	origin [ 3 ]
>7981	PrimaryExpression	3
>7982	Identifier	origin
>7983	IdentifierDeclType	double [ 3 ]
>7984	ExpressionStatement	 
>7985	CallExpression	memcpy ( R , m_image_data [ i1 ] . m_camera . m_R , sizeof ( double ) * 9 )
>7986	ArgumentList	R
>7987	Argument	sizeof ( double ) * 9
>7988	MultiplicativeExpression	sizeof ( double ) * 9
>7989	PrimaryExpression	9
>7990	SizeofExpr	sizeof ( double )
>7991	SizeofOperand	double
>7992	Sizeof	sizeof
>7993	Argument	m_image_data [ i1 ] . m_camera . m_R
>7994	MemberAccess	m_image_data [ i1 ] . m_camera . m_R
>7995	Identifier	m_R
>7996	MemberAccess	m_image_data [ i1 ] . m_camera
>7997	Identifier	m_camera
>7998	ArrayIndexing	m_image_data [ i1 ]
>7999	Identifier	i1
>8000	Identifier	m_image_data
>8001	Argument	R
>8002	Identifier	R
>8003	Callee	memcpy
>8004	Identifier	memcpy
>8005	IdentifierDeclStatement	 
>8006	IdentifierDecl	R [ 9 ]
>8007	PrimaryExpression	9
>8008	Identifier	R
>8009	IdentifierDeclType	double [ 9 ]
>8063	FunctionDef	BaseApp 
>8064	ParameterList	int start_camera
>8065	Parameter	 
>8066	Identifier	start_camera
>8067	ParameterType	int
>8068	ReturnType	void
>8069	CompoundStatement	 
>8070	ForStatement	for ( int i = start_camera ; i < num_images ; i ++ )
>8071	CompoundStatement	 
>8072	IfStatement	if ( m_image_data [ i ] . m_camera . m_adjusted )
>8073	CompoundStatement	 
>8074	ExpressionStatement	 
>8075	CallExpression	m_image_data [ i ] . m_camera . Finalize ( )
>8076	ArgumentList	 
>8077	Callee	m_image_data [ i ] . m_camera . Finalize
>8078	MemberAccess	m_image_data [ i ] . m_camera . Finalize
>8079	Identifier	Finalize
>8080	MemberAccess	m_image_data [ i ] . m_camera
>8081	Identifier	m_camera
>8082	ArrayIndexing	m_image_data [ i ]
>8083	Identifier	i
>8084	Identifier	m_image_data
>8085	ExpressionStatement	 
>8086	CallExpression	m_image_data [ i ] . m_camera . SetPosition ( tmp )
>8087	ArgumentList	tmp
>8088	Argument	tmp
>8089	Identifier	tmp
>8090	Callee	m_image_data [ i ] . m_camera . SetPosition
>8091	MemberAccess	m_image_data [ i ] . m_camera . SetPosition
>8092	Identifier	SetPosition
>8093	MemberAccess	m_image_data [ i ] . m_camera
>8094	Identifier	m_camera
>8095	ArrayIndexing	m_image_data [ i ]
>8096	Identifier	i
>8097	Identifier	m_image_data
>8098	ExpressionStatement	 
>8099	CallExpression	m_image_data [ i ] . m_camera . SetPose ( pose_new )
>8100	ArgumentList	pose_new
>8101	Argument	pose_new
>8102	Identifier	pose_new
>8103	Callee	m_image_data [ i ] . m_camera . SetPose
>8104	MemberAccess	m_image_data [ i ] . m_camera . SetPose
>8105	Identifier	SetPose
>8106	MemberAccess	m_image_data [ i ] . m_camera
>8107	Identifier	m_camera
>8108	ArrayIndexing	m_image_data [ i ]
>8109	Identifier	i
>8110	Identifier	m_image_data
>8111	ExpressionStatement	 
>8112	CallExpression	matrix_product ( 3 , 3 , 3 , 3 , m_repos_R , pose , pose_new )
>8113	ArgumentList	3
>8114	Argument	pose_new
>8115	Identifier	pose_new
>8116	Argument	pose
>8117	Identifier	pose
>8118	Argument	m_repos_R
>8119	Identifier	m_repos_R
>8120	Argument	3
>8121	PrimaryExpression	3
>8122	Argument	3
>8123	PrimaryExpression	3
>8124	Argument	3
>8125	PrimaryExpression	3
>8126	Argument	3
>8127	PrimaryExpression	3
>8128	Callee	matrix_product
>8129	Identifier	matrix_product
>8130	IdentifierDeclStatement	 
>8131	IdentifierDecl	pose_new [ 9 ]
>8132	PrimaryExpression	9
>8133	Identifier	pose_new
>8134	IdentifierDeclType	double [ 9 ]
>8135	ExpressionStatement	 
>8136	CallExpression	m_image_data [ i ] . m_camera . GetPose ( pose )
>8137	ArgumentList	pose
>8138	Argument	pose
>8139	Identifier	pose
>8140	Callee	m_image_data [ i ] . m_camera . GetPose
>8141	MemberAccess	m_image_data [ i ] . m_camera . GetPose
>8142	Identifier	GetPose
>8143	MemberAccess	m_image_data [ i ] . m_camera
>8144	Identifier	m_camera
>8145	ArrayIndexing	m_image_data [ i ]
>8146	Identifier	i
>8147	Identifier	m_image_data
>8148	IdentifierDeclStatement	 
>8149	IdentifierDecl	pose [ 9 ]
>8150	PrimaryExpression	9
>8151	Identifier	pose
>8152	IdentifierDeclType	double [ 9 ]
>8153	ExpressionStatement	 
>8154	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , m_repos_R , pos , tmp )
>8155	ArgumentList	3
>8156	Argument	tmp
>8157	Identifier	tmp
>8158	Argument	pos
>8159	Identifier	pos
>8160	Argument	m_repos_R
>8161	Identifier	m_repos_R
>8162	Argument	1
>8163	PrimaryExpression	1
>8164	Argument	3
>8165	PrimaryExpression	3
>8166	Argument	3
>8167	PrimaryExpression	3
>8168	Argument	3
>8169	PrimaryExpression	3
>8170	Callee	matrix_product
>8171	Identifier	matrix_product
>8172	IdentifierDeclStatement	 
>8173	IdentifierDecl	tmp [ 3 ]
>8174	PrimaryExpression	3
>8175	Identifier	tmp
>8176	IdentifierDeclType	double [ 3 ]
>8177	IdentifierDeclStatement	 
>8178	IdentifierDecl	norm = matrix_norm ( 3 , 1 , pos )
>8179	AssignmentExpr	norm = matrix_norm ( 3 , 1 , pos )
>8180	CallExpression	matrix_norm ( 3 , 1 , pos )
>8181	ArgumentList	3
>8182	Argument	pos
>8183	Identifier	pos
>8184	Argument	1
>8185	PrimaryExpression	1
>8186	Argument	3
>8187	PrimaryExpression	3
>8188	Callee	matrix_norm
>8189	Identifier	matrix_norm
>8190	Identifier	norm
>8191	Identifier	norm
>8192	IdentifierDeclType	double
>8193	ExpressionStatement	 
>8194	CallExpression	matrix_scale ( 3 , 1 , pos , m_repos_scale , pos )
>8195	ArgumentList	3
>8196	Argument	pos
>8197	Identifier	pos
>8198	Argument	m_repos_scale
>8199	Identifier	m_repos_scale
>8200	Argument	pos
>8201	Identifier	pos
>8202	Argument	1
>8203	PrimaryExpression	1
>8204	Argument	3
>8205	PrimaryExpression	3
>8206	Callee	matrix_scale
>8207	Identifier	matrix_scale
>8208	ExpressionStatement	 
>8209	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , pos , m_repos_d , pos )
>8210	ArgumentList	3
>8211	Argument	pos
>8212	Identifier	pos
>8213	Argument	m_repos_d
>8214	Identifier	m_repos_d
>8215	Argument	pos
>8216	Identifier	pos
>8217	Argument	1
>8218	PrimaryExpression	1
>8219	Argument	3
>8220	PrimaryExpression	3
>8221	Argument	1
>8222	PrimaryExpression	1
>8223	Argument	3
>8224	PrimaryExpression	3
>8225	Callee	matrix_diff
>8226	Identifier	matrix_diff
>8227	ExpressionStatement	 
>8228	CallExpression	m_image_data [ i ] . m_camera . GetPosition ( pos )
>8229	ArgumentList	pos
>8230	Argument	pos
>8231	Identifier	pos
>8232	Callee	m_image_data [ i ] . m_camera . GetPosition
>8233	MemberAccess	m_image_data [ i ] . m_camera . GetPosition
>8234	Identifier	GetPosition
>8235	MemberAccess	m_image_data [ i ] . m_camera
>8236	Identifier	m_camera
>8237	ArrayIndexing	m_image_data [ i ]
>8238	Identifier	i
>8239	Identifier	m_image_data
>8240	IdentifierDeclStatement	 
>8241	IdentifierDecl	pos [ 3 ]
>8242	PrimaryExpression	3
>8243	Identifier	pos
>8244	IdentifierDeclType	double [ 3 ]
>8245	ExpressionStatement	 
>8246	CallExpression	printf ( \"[UnscaleCameras] Unscaling camera %d (scale
>8247	ArgumentList	\"[UnscaleCameras] Unscaling camera %d (scale
>8248	Argument	m_repos_scale
>8249	Identifier	m_repos_scale
>8250	Argument	i
>8251	Identifier	i
>8252	Argument	\"[UnscaleCameras] Unscaling camera %d (scale
>8253	PrimaryExpression	\"[UnscaleCameras] Unscaling camera %d (scale
>8254	Callee	printf
>8255	Identifier	printf
>8256	Condition	 
>8257	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>8258	Identifier	m_adjusted
>8259	MemberAccess	m_image_data [ i ] . m_camera
>8260	Identifier	m_camera
>8261	ArrayIndexing	m_image_data [ i ]
>8262	Identifier	i
>8263	Identifier	m_image_data
>8264	IncDecOp	 
>8265	IncDec	++
>8266	Identifier	i
>8267	Condition	 
>8268	RelationalExpression	i < num_images
>8269	Identifier	num_images
>8270	Identifier	i
>8271	ForInit	 
>8272	IdentifierDeclStatement	int i = start_camera ;
>8273	IdentifierDecl	i = start_camera
>8274	AssignmentExpr	i = start_camera
>8275	Identifier	start_camera
>8276	Identifier	start_camera
>8277	Identifier	i
>8278	IdentifierDeclType	int
>8279	IdentifierDeclStatement	 
>8280	IdentifierDecl	num_images = GetNumImages ( )
>8281	AssignmentExpr	num_images = GetNumImages ( )
>8282	CallExpression	GetNumImages ( )
>8283	ArgumentList	 
>8284	Callee	GetNumImages
>8285	Identifier	GetNumImages
>8286	Identifier	num_images
>8287	Identifier	num_images
>8288	IdentifierDeclType	int
>8289	ExpressionStatement	 
>8290	CallExpression	SetupScene ( center , up , x_axis , z_axis , scale )
>8291	ArgumentList	center
>8292	Argument	scale
>8293	Identifier	scale
>8294	Argument	z_axis
>8295	Identifier	z_axis
>8296	Argument	x_axis
>8297	Identifier	x_axis
>8298	Argument	up
>8299	Identifier	up
>8300	Argument	center
>8301	Identifier	center
>8302	Callee	SetupScene
>8303	Identifier	SetupScene
>8304	IdentifierDeclStatement	 
>8305	IdentifierDecl	scale
>8306	Identifier	scale
>8307	IdentifierDeclType	double
>8308	IdentifierDeclStatement	 
>8309	IdentifierDecl	z_axis [ 3 ]
>8310	PrimaryExpression	3
>8311	Identifier	z_axis
>8312	IdentifierDeclType	double [ 3 ]
>8313	IdentifierDecl	x_axis [ 3 ]
>8314	PrimaryExpression	3
>8315	Identifier	x_axis
>8316	IdentifierDeclType	double [ 3 ]
>8317	IdentifierDecl	up [ 3 ]
>8318	PrimaryExpression	3
>8319	Identifier	up
>8320	IdentifierDeclType	double [ 3 ]
>8321	IdentifierDecl	center [ 3 ]
>8322	PrimaryExpression	3
>8323	Identifier	center
>8324	IdentifierDeclType	double [ 3 ]
>8351	FunctionDef	Create3DSearchTree (int n , v3_t * v)
>8352	ParameterList	int n , v3_t * v
>8353	Parameter	 
>8354	Identifier	v
>8355	ParameterType	v3_t *
>8356	Parameter	 
>8357	Identifier	n
>8358	ParameterType	int
>8359	ReturnType	ANNkd_tree *
>8360	CompoundStatement	 
>8361	ReturnStatement	 
>8362	Identifier	tree
>8363	IdentifierDeclStatement	 
>8364	IdentifierDecl	* tree = new ANNkd_tree ( pts , n , 3 , 4 )
>8365	AssignmentExpr	* tree = new ANNkd_tree ( pts , n , 3 , 4 )
>8366	Expression	pts , n , 3 , 4
>8367	Expression	n , 3 , 4
>8368	Expression	3 , 4
>8369	PrimaryExpression	4
>8370	PrimaryExpression	3
>8371	Identifier	n
>8372	Identifier	pts
>8373	Identifier	tree
>8374	Identifier	tree
>8375	IdentifierDeclType	ANNkd_tree *
>8376	ForStatement	for ( int i = 0 ; i < n ; i ++ )
>8377	CompoundStatement	 
>8378	ExpressionStatement	 
>8379	AssignmentExpr	pts [ i ] [ 2 ] = Vz ( v [ i ] )
>8380	CallExpression	Vz ( v [ i ] )
>8381	ArgumentList	v [ i ]
>8382	Argument	v [ i ]
>8383	ArrayIndexing	v [ i ]
>8384	Identifier	i
>8385	Identifier	v
>8386	Callee	Vz
>8387	Identifier	Vz
>8388	ArrayIndexing	pts [ i ] [ 2 ]
>8389	PrimaryExpression	2
>8390	ArrayIndexing	pts [ i ]
>8391	Identifier	i
>8392	Identifier	pts
>8393	ExpressionStatement	 
>8394	AssignmentExpr	pts [ i ] [ 1 ] = Vy ( v [ i ] )
>8395	CallExpression	Vy ( v [ i ] )
>8396	ArgumentList	v [ i ]
>8397	Argument	v [ i ]
>8398	ArrayIndexing	v [ i ]
>8399	Identifier	i
>8400	Identifier	v
>8401	Callee	Vy
>8402	Identifier	Vy
>8403	ArrayIndexing	pts [ i ] [ 1 ]
>8404	PrimaryExpression	1
>8405	ArrayIndexing	pts [ i ]
>8406	Identifier	i
>8407	Identifier	pts
>8408	ExpressionStatement	 
>8409	AssignmentExpr	pts [ i ] [ 0 ] = Vx ( v [ i ] )
>8410	CallExpression	Vx ( v [ i ] )
>8411	ArgumentList	v [ i ]
>8412	Argument	v [ i ]
>8413	ArrayIndexing	v [ i ]
>8414	Identifier	i
>8415	Identifier	v
>8416	Callee	Vx
>8417	Identifier	Vx
>8418	ArrayIndexing	pts [ i ] [ 0 ]
>8419	PrimaryExpression	0
>8420	ArrayIndexing	pts [ i ]
>8421	Identifier	i
>8422	Identifier	pts
>8423	IncDecOp	 
>8424	IncDec	++
>8425	Identifier	i
>8426	Condition	 
>8427	RelationalExpression	i < n
>8428	Identifier	n
>8429	Identifier	i
>8430	ForInit	 
>8431	IdentifierDeclStatement	int i = 0 ;
>8432	IdentifierDecl	i = 0
>8433	AssignmentExpr	i = 0
>8434	PrimaryExpression	0
>8435	Identifier	i
>8436	Identifier	i
>8437	IdentifierDeclType	int
>8438	IdentifierDeclStatement	 
>8439	IdentifierDecl	pts = annAllocPts ( n , 3 )
>8440	AssignmentExpr	pts = annAllocPts ( n , 3 )
>8441	CallExpression	annAllocPts ( n , 3 )
>8442	ArgumentList	n
>8443	Argument	3
>8444	PrimaryExpression	3
>8445	Argument	n
>8446	Identifier	n
>8447	Callee	annAllocPts
>8448	Identifier	annAllocPts
>8449	Identifier	pts
>8450	Identifier	pts
>8451	IdentifierDeclType	ANNpointArray
>8485	FunctionDef	ComputeConfidence (int num_rays , const v3_t * rays)
>8486	ParameterList	int num_rays , const v3_t * rays
>8487	Parameter	 
>8488	Identifier	rays
>8489	ParameterType	const v3_t *
>8490	Parameter	 
>8491	Identifier	num_rays
>8492	ParameterType	int
>8493	ReturnType	static double
>8494	CompoundStatement	 
>8495	ReturnStatement	 
>8496	CallExpression	CLAMP ( RAD2DEG ( angle ) / max_angle , 0.0 , 1.0 )
>8497	ArgumentList	RAD2DEG ( angle ) / max_angle
>8498	Argument	1.0
>8499	PrimaryExpression	1.0
>8500	Argument	0.0
>8501	PrimaryExpression	0.0
>8502	Argument	RAD2DEG ( angle ) / max_angle
>8503	MultiplicativeExpression	RAD2DEG ( angle ) / max_angle
>8504	Identifier	max_angle
>8505	CallExpression	RAD2DEG ( angle )
>8506	ArgumentList	angle
>8507	Argument	angle
>8508	Identifier	angle
>8509	Callee	RAD2DEG
>8510	Identifier	RAD2DEG
>8511	Callee	CLAMP
>8512	Identifier	CLAMP
>8513	IdentifierDeclStatement	 
>8514	IdentifierDecl	max_angle = 20.0
>8515	AssignmentExpr	max_angle = 20.0
>8516	PrimaryExpression	20.0
>8517	Identifier	max_angle
>8518	Identifier	max_angle
>8519	IdentifierDeclType	const double
>8520	IdentifierDeclStatement	 
>8521	IdentifierDecl	angle = acos ( max_dot )
>8522	AssignmentExpr	angle = acos ( max_dot )
>8523	CallExpression	acos ( max_dot )
>8524	ArgumentList	max_dot
>8525	Argument	max_dot
>8526	Identifier	max_dot
>8527	Callee	acos
>8528	Identifier	acos
>8529	Identifier	angle
>8530	Identifier	angle
>8531	IdentifierDeclType	double
>8532	IdentifierDeclStatement	 
>8533	IdentifierDecl	max_dot = MAX ( MAX ( dot12 , dot23 ) , dot13 )
>8534	AssignmentExpr	max_dot = MAX ( MAX ( dot12 , dot23 ) , dot13 )
>8535	CallExpression	MAX ( MAX ( dot12 , dot23 ) , dot13 )
>8536	ArgumentList	MAX ( dot12 , dot23 )
>8537	Argument	dot13
>8538	Identifier	dot13
>8539	Argument	MAX ( dot12 , dot23 )
>8540	CallExpression	MAX ( dot12 , dot23 )
>8541	ArgumentList	dot12
>8542	Argument	dot23
>8543	Identifier	dot23
>8544	Argument	dot12
>8545	Identifier	dot12
>8546	Callee	MAX
>8547	Identifier	MAX
>8548	Callee	MAX
>8549	Identifier	MAX
>8550	Identifier	max_dot
>8551	Identifier	max_dot
>8552	IdentifierDeclType	double
>8553	IdentifierDeclStatement	 
>8554	IdentifierDecl	dot13 = v3_dotp ( ex1 , ex3 )
>8555	AssignmentExpr	dot13 = v3_dotp ( ex1 , ex3 )
>8556	CallExpression	v3_dotp ( ex1 , ex3 )
>8557	ArgumentList	ex1
>8558	Argument	ex3
>8559	Identifier	ex3
>8560	Argument	ex1
>8561	Identifier	ex1
>8562	Callee	v3_dotp
>8563	Identifier	v3_dotp
>8564	Identifier	dot13
>8565	Identifier	dot13
>8566	IdentifierDeclType	double
>8567	IdentifierDeclStatement	 
>8568	IdentifierDecl	dot23 = v3_dotp ( ex2 , ex3 )
>8569	AssignmentExpr	dot23 = v3_dotp ( ex2 , ex3 )
>8570	CallExpression	v3_dotp ( ex2 , ex3 )
>8571	ArgumentList	ex2
>8572	Argument	ex3
>8573	Identifier	ex3
>8574	Argument	ex2
>8575	Identifier	ex2
>8576	Callee	v3_dotp
>8577	Identifier	v3_dotp
>8578	Identifier	dot23
>8579	Identifier	dot23
>8580	IdentifierDeclType	double
>8581	IdentifierDeclStatement	 
>8582	IdentifierDecl	dot12 = v3_dotp ( ex1 , ex2 )
>8583	AssignmentExpr	dot12 = v3_dotp ( ex1 , ex2 )
>8584	CallExpression	v3_dotp ( ex1 , ex2 )
>8585	ArgumentList	ex1
>8586	Argument	ex2
>8587	Identifier	ex2
>8588	Argument	ex1
>8589	Identifier	ex1
>8590	Callee	v3_dotp
>8591	Identifier	v3_dotp
>8592	Identifier	dot12
>8593	Identifier	dot12
>8594	IdentifierDeclType	double
>8595	IdentifierDeclStatement	 
>8596	IdentifierDecl	ex3 = v3_extremum2 ( num_rays , rays , ex1 , ex2 )
>8597	AssignmentExpr	ex3 = v3_extremum2 ( num_rays , rays , ex1 , ex2 )
>8598	CallExpression	v3_extremum2 ( num_rays , rays , ex1 , ex2 )
>8599	ArgumentList	num_rays
>8600	Argument	ex2
>8601	Identifier	ex2
>8602	Argument	ex1
>8603	Identifier	ex1
>8604	Argument	rays
>8605	Identifier	rays
>8606	Argument	num_rays
>8607	Identifier	num_rays
>8608	Callee	v3_extremum2
>8609	Identifier	v3_extremum2
>8610	Identifier	ex3
>8611	Identifier	ex3
>8612	IdentifierDeclType	v3_t
>8613	IdentifierDeclStatement	 
>8614	IdentifierDecl	ex2 = v3_extremum ( num_rays , rays , ex1 )
>8615	AssignmentExpr	ex2 = v3_extremum ( num_rays , rays , ex1 )
>8616	CallExpression	v3_extremum ( num_rays , rays , ex1 )
>8617	ArgumentList	num_rays
>8618	Argument	ex1
>8619	Identifier	ex1
>8620	Argument	rays
>8621	Identifier	rays
>8622	Argument	num_rays
>8623	Identifier	num_rays
>8624	Callee	v3_extremum
>8625	Identifier	v3_extremum
>8626	Identifier	ex2
>8627	Identifier	ex2
>8628	IdentifierDeclType	v3_t
>8629	IdentifierDeclStatement	 
>8630	IdentifierDecl	ex1 = v3_extremum ( num_rays , rays , avg )
>8631	AssignmentExpr	ex1 = v3_extremum ( num_rays , rays , avg )
>8632	CallExpression	v3_extremum ( num_rays , rays , avg )
>8633	ArgumentList	num_rays
>8634	Argument	avg
>8635	Identifier	avg
>8636	Argument	rays
>8637	Identifier	rays
>8638	Argument	num_rays
>8639	Identifier	num_rays
>8640	Callee	v3_extremum
>8641	Identifier	v3_extremum
>8642	Identifier	ex1
>8643	Identifier	ex1
>8644	IdentifierDeclType	v3_t
>8645	IdentifierDeclStatement	 
>8646	IdentifierDecl	avg = v3_unit ( v3_mean ( num_rays , rays ) )
>8647	AssignmentExpr	avg = v3_unit ( v3_mean ( num_rays , rays ) )
>8648	CallExpression	v3_unit ( v3_mean ( num_rays , rays ) )
>8649	ArgumentList	v3_mean ( num_rays , rays )
>8650	Argument	v3_mean ( num_rays , rays )
>8651	CallExpression	v3_mean ( num_rays , rays )
>8652	ArgumentList	num_rays
>8653	Argument	rays
>8654	Identifier	rays
>8655	Argument	num_rays
>8656	Identifier	num_rays
>8657	Callee	v3_mean
>8658	Identifier	v3_mean
>8659	Callee	v3_unit
>8660	Identifier	v3_unit
>8661	Identifier	avg
>8662	Identifier	avg
>8663	IdentifierDeclType	v3_t
>8664	IfStatement	if ( num_rays <= 2 )
>8665	ReturnStatement	 
>8666	PrimaryExpression	0.0
>8667	Condition	 
>8668	RelationalExpression	num_rays <= 2
>8669	PrimaryExpression	2
>8670	Identifier	num_rays
>8695	FunctionDef	BaseApp 
>8696	ParameterList	 
>8697	ReturnType	void
>8698	CompoundStatement	 
>8699	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>8700	CompoundStatement	 
>8701	ExpressionStatement	 
>8702	Identifier	rays
>8703	Statement	 
>8704	Statement	 
>8705	Statement	 
>8706	ExpressionStatement	 
>8707	CallExpression	printf ( \"conf[%d] = %0.3f\n\" , i , p . m_conf )
>8708	ArgumentList	\"conf[%d] = %0.3f\n\"
>8709	Argument	p . m_conf
>8710	MemberAccess	p . m_conf
>8711	Identifier	m_conf
>8712	Identifier	p
>8713	Argument	i
>8714	Identifier	i
>8715	Argument	\"conf[%d] = %0.3f\n\"
>8716	PrimaryExpression	\"conf[%d] = %0.3f\n\"
>8717	Callee	printf
>8718	Identifier	printf
>8719	ExpressionStatement	 
>8720	AssignmentExpr	p . m_conf = ComputeConfidence ( num_views , rays )
>8721	CallExpression	ComputeConfidence ( num_views , rays )
>8722	ArgumentList	num_views
>8723	Argument	rays
>8724	Identifier	rays
>8725	Argument	num_views
>8726	Identifier	num_views
>8727	Callee	ComputeConfidence
>8728	Identifier	ComputeConfidence
>8729	MemberAccess	p . m_conf
>8730	Identifier	m_conf
>8731	Identifier	p
>8732	ExpressionStatement	 
>8733	CallExpression	matrix_scale ( 3 , 1 , normal , - 1.0 / norm , p . m_norm )
>8734	ArgumentList	3
>8735	Argument	p . m_norm
>8736	MemberAccess	p . m_norm
>8737	Identifier	m_norm
>8738	Identifier	p
>8739	Argument	- 1.0 / norm
>8740	MultiplicativeExpression	- 1.0 / norm
>8741	Identifier	norm
>8742	UnaryOp	- 1.0
>8743	PrimaryExpression	1.0
>8744	UnaryOperator	-
>8745	Argument	normal
>8746	Identifier	normal
>8747	Argument	1
>8748	PrimaryExpression	1
>8749	Argument	3
>8750	PrimaryExpression	3
>8751	Callee	matrix_scale
>8752	Identifier	matrix_scale
>8753	IdentifierDeclStatement	 
>8754	IdentifierDecl	norm = matrix_norm ( 3 , 1 , normal )
>8755	AssignmentExpr	norm = matrix_norm ( 3 , 1 , normal )
>8756	CallExpression	matrix_norm ( 3 , 1 , normal )
>8757	ArgumentList	3
>8758	Argument	normal
>8759	Identifier	normal
>8760	Argument	1
>8761	PrimaryExpression	1
>8762	Argument	3
>8763	PrimaryExpression	3
>8764	Callee	matrix_norm
>8765	Identifier	matrix_norm
>8766	Identifier	norm
>8767	Identifier	norm
>8768	IdentifierDeclType	double
>8769	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>8770	CompoundStatement	 
>8771	ExpressionStatement	 
>8772	CallExpression	matrix_sum ( 3 , 1 , 3 , 1 , normal , ray , normal )
>8773	ArgumentList	3
>8774	Argument	normal
>8775	Identifier	normal
>8776	Argument	ray
>8777	Identifier	ray
>8778	Argument	normal
>8779	Identifier	normal
>8780	Argument	1
>8781	PrimaryExpression	1
>8782	Argument	3
>8783	PrimaryExpression	3
>8784	Argument	1
>8785	PrimaryExpression	1
>8786	Argument	3
>8787	PrimaryExpression	3
>8788	Callee	matrix_sum
>8789	Identifier	matrix_sum
>8790	ExpressionStatement	 
>8791	CallExpression	matrix_scale ( 3 , 1 , ray , 1.0 / norm , ray )
>8792	ArgumentList	3
>8793	Argument	ray
>8794	Identifier	ray
>8795	Argument	1.0 / norm
>8796	MultiplicativeExpression	1.0 / norm
>8797	Identifier	norm
>8798	PrimaryExpression	1.0
>8799	Argument	ray
>8800	Identifier	ray
>8801	Argument	1
>8802	PrimaryExpression	1
>8803	Argument	3
>8804	PrimaryExpression	3
>8805	Callee	matrix_scale
>8806	Identifier	matrix_scale
>8807	IdentifierDeclStatement	 
>8808	IdentifierDecl	norm = matrix_norm ( 3 , 1 , ray )
>8809	AssignmentExpr	norm = matrix_norm ( 3 , 1 , ray )
>8810	CallExpression	matrix_norm ( 3 , 1 , ray )
>8811	ArgumentList	3
>8812	Argument	ray
>8813	Identifier	ray
>8814	Argument	1
>8815	PrimaryExpression	1
>8816	Argument	3
>8817	PrimaryExpression	3
>8818	Callee	matrix_norm
>8819	Identifier	matrix_norm
>8820	Identifier	norm
>8821	Identifier	norm
>8822	IdentifierDeclType	double
>8823	ExpressionStatement	 
>8824	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , p . m_pos , cam_pos , ray )
>8825	ArgumentList	3
>8826	Argument	ray
>8827	Identifier	ray
>8828	Argument	cam_pos
>8829	Identifier	cam_pos
>8830	Argument	p . m_pos
>8831	MemberAccess	p . m_pos
>8832	Identifier	m_pos
>8833	Identifier	p
>8834	Argument	1
>8835	PrimaryExpression	1
>8836	Argument	3
>8837	PrimaryExpression	3
>8838	Argument	1
>8839	PrimaryExpression	1
>8840	Argument	3
>8841	PrimaryExpression	3
>8842	Callee	matrix_diff
>8843	Identifier	matrix_diff
>8844	ExpressionStatement	 
>8845	CallExpression	m_image_data [ cam ] . m_camera . GetPosition ( cam_pos )
>8846	ArgumentList	cam_pos
>8847	Argument	cam_pos
>8848	Identifier	cam_pos
>8849	Callee	m_image_data [ cam ] . m_camera . GetPosition
>8850	MemberAccess	m_image_data [ cam ] . m_camera . GetPosition
>8851	Identifier	GetPosition
>8852	MemberAccess	m_image_data [ cam ] . m_camera
>8853	Identifier	m_camera
>8854	ArrayIndexing	m_image_data [ cam ]
>8855	Identifier	cam
>8856	Identifier	m_image_data
>8857	IdentifierDeclStatement	 
>8858	IdentifierDecl	* ray = rays [ j ] . p
>8859	AssignmentExpr	* ray = rays [ j ] . p
>8860	MemberAccess	rays [ j ] . p
>8861	Identifier	p
>8862	ArrayIndexing	rays [ j ]
>8863	Identifier	j
>8864	Identifier	rays
>8865	Identifier	ray
>8866	Identifier	ray
>8867	IdentifierDeclType	double *
>8868	IdentifierDeclStatement	 
>8869	IdentifierDecl	cam_pos [ 3 ]
>8870	PrimaryExpression	3
>8871	Identifier	cam_pos
>8872	IdentifierDeclType	double [ 3 ]
>8873	IdentifierDeclStatement	 
>8874	IdentifierDecl	cam = p . m_views [ j ] . first
>8875	AssignmentExpr	cam = p . m_views [ j ] . first
>8876	MemberAccess	p . m_views [ j ] . first
>8877	Identifier	first
>8878	ArrayIndexing	p . m_views [ j ]
>8879	Identifier	j
>8880	MemberAccess	p . m_views
>8881	Identifier	m_views
>8882	Identifier	p
>8883	Identifier	cam
>8884	Identifier	cam
>8885	IdentifierDeclType	int
>8886	IncDecOp	 
>8887	IncDec	++
>8888	Identifier	j
>8889	Condition	 
>8890	RelationalExpression	j < num_views
>8891	Identifier	num_views
>8892	Identifier	j
>8893	ForInit	 
>8894	IdentifierDeclStatement	int j = 0 ;
>8895	IdentifierDecl	j = 0
>8896	AssignmentExpr	j = 0
>8897	PrimaryExpression	0
>8898	Identifier	j
>8899	Identifier	j
>8900	IdentifierDeclType	int
>8901	IdentifierDeclStatement	 
>8902	IdentifierDecl	normal [ 3 ] = { 0.0 , 0.0 , 0.0 }
>8903	AssignmentExpr	normal [ 3 ] = { 0.0 , 0.0 , 0.0 }
>8904	InitializerList	0.0
>8905	PrimaryExpression	0.0
>8906	PrimaryExpression	0.0
>8907	PrimaryExpression	0.0
>8908	Identifier	normal
>8909	PrimaryExpression	3
>8910	Identifier	normal
>8911	IdentifierDeclType	double [ 3 ]
>8912	IdentifierDeclStatement	 
>8913	IdentifierDecl	* rays = new v3_t [ num_views ]
>8914	AssignmentExpr	* rays = new v3_t [ num_views ]
>8915	Identifier	num_views
>8916	Identifier	num_views
>8917	Identifier	rays
>8918	IdentifierDeclType	v3_t *
>8919	IdentifierDeclStatement	 
>8920	IdentifierDecl	num_views = ( int ) p . m_views . size ( )
>8921	AssignmentExpr	num_views = ( int ) p . m_views . size ( )
>8922	CastExpression	( int ) p . m_views . size ( )
>8923	CallExpression	p . m_views . size ( )
>8924	ArgumentList	 
>8925	Callee	p . m_views . size
>8926	MemberAccess	p . m_views . size
>8927	Identifier	size
>8928	MemberAccess	p . m_views
>8929	Identifier	m_views
>8930	Identifier	p
>8931	CastTarget	int
>8932	Identifier	num_views
>8933	Identifier	num_views
>8934	IdentifierDeclType	int
>8935	IdentifierDeclStatement	 
>8936	IdentifierDecl	& p = m_point_data [ i ]
>8937	AssignmentExpr	& p = m_point_data [ i ]
>8938	ArrayIndexing	m_point_data [ i ]
>8939	Identifier	i
>8940	Identifier	m_point_data
>8941	Identifier	p
>8942	Identifier	p
>8943	IdentifierDeclType	PointData &
>8944	IncDecOp	 
>8945	IncDec	++
>8946	Identifier	i
>8947	Condition	 
>8948	RelationalExpression	i < num_points
>8949	Identifier	num_points
>8950	Identifier	i
>8951	ForInit	 
>8952	IdentifierDeclStatement	int i = 0 ;
>8953	IdentifierDecl	i = 0
>8954	AssignmentExpr	i = 0
>8955	PrimaryExpression	0
>8956	Identifier	i
>8957	Identifier	i
>8958	IdentifierDeclType	int
>8959	IdentifierDeclStatement	 
>8960	IdentifierDecl	num_points = ( int ) m_point_data . size ( )
>8961	AssignmentExpr	num_points = ( int ) m_point_data . size ( )
>8962	CastExpression	( int ) m_point_data . size ( )
>8963	CallExpression	m_point_data . size ( )
>8964	ArgumentList	 
>8965	Callee	m_point_data . size
>8966	MemberAccess	m_point_data . size
>8967	Identifier	size
>8968	Identifier	m_point_data
>8969	CastTarget	int
>8970	Identifier	num_points
>8971	Identifier	num_points
>8972	IdentifierDeclType	int
>9008	FunctionDef	BaseApp 
>9009	ParameterList	 
>9010	ReturnType	void
>9011	CompoundStatement	 
>9012	ExpressionStatement	 
>9013	Identifier	tree
>9014	Statement	 
>9015	ExpressionStatement	 
>9016	Identifier	pts
>9017	Statement	 
>9018	Statement	 
>9019	Statement	 
>9020	ExpressionStatement	 
>9021	CallExpression	printf ( \"\n\" )
>9022	ArgumentList	\"\n\"
>9023	Argument	\"\n\"
>9024	PrimaryExpression	\"\n\"
>9025	Callee	printf
>9026	Identifier	printf
>9027	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>9028	CompoundStatement	 
>9029	ExpressionStatement	 
>9030	IncDecOp	num_points_inc ++
>9031	IncDec	++
>9032	Identifier	num_points_inc
>9033	ExpressionStatement	 
>9034	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , cross , up , & dot )
>9035	ArgumentList	1
>9036	Argument	& dot
>9037	UnaryOp	& dot
>9038	Identifier	dot
>9039	UnaryOperator	&
>9040	Argument	up
>9041	Identifier	up
>9042	Argument	cross
>9043	Identifier	cross
>9044	Argument	1
>9045	PrimaryExpression	1
>9046	Argument	3
>9047	PrimaryExpression	3
>9048	Argument	3
>9049	PrimaryExpression	3
>9050	Argument	1
>9051	PrimaryExpression	1
>9052	Callee	matrix_product
>9053	Identifier	matrix_product
>9054	ExpressionStatement	 
>9055	CallExpression	matrix_cross ( perp , xaxis , cross )
>9056	ArgumentList	perp
>9057	Argument	cross
>9058	Identifier	cross
>9059	Argument	xaxis
>9060	Identifier	xaxis
>9061	Argument	perp
>9062	Identifier	perp
>9063	Callee	matrix_cross
>9064	Identifier	matrix_cross
>9065	IdentifierDeclStatement	 
>9066	IdentifierDecl	cross [ 3 ]
>9067	PrimaryExpression	3
>9068	Identifier	cross
>9069	IdentifierDeclType	double [ 3 ]
>9070	IdentifierDeclStatement	 
>9071	IdentifierDecl	theta = acos ( dot )
>9072	AssignmentExpr	theta = acos ( dot )
>9073	CallExpression	acos ( dot )
>9074	ArgumentList	dot
>9075	Argument	dot
>9076	Identifier	dot
>9077	Callee	acos
>9078	Identifier	acos
>9079	Identifier	theta
>9080	Identifier	theta
>9081	IdentifierDeclType	double
>9082	ExpressionStatement	 
>9083	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , perp , xaxis , & dot )
>9084	ArgumentList	1
>9085	Argument	& dot
>9086	UnaryOp	& dot
>9087	Identifier	dot
>9088	UnaryOperator	&
>9089	Argument	xaxis
>9090	Identifier	xaxis
>9091	Argument	perp
>9092	Identifier	perp
>9093	Argument	1
>9094	PrimaryExpression	1
>9095	Argument	3
>9096	PrimaryExpression	3
>9097	Argument	3
>9098	PrimaryExpression	3
>9099	Argument	1
>9100	PrimaryExpression	1
>9101	Callee	matrix_product
>9102	Identifier	matrix_product
>9103	ExpressionStatement	 
>9104	CallExpression	matrix_scale ( 3 , 1 , perp , 1.0 / norm , perp )
>9105	ArgumentList	3
>9106	Argument	perp
>9107	Identifier	perp
>9108	Argument	1.0 / norm
>9109	MultiplicativeExpression	1.0 / norm
>9110	Identifier	norm
>9111	PrimaryExpression	1.0
>9112	Argument	perp
>9113	Identifier	perp
>9114	Argument	1
>9115	PrimaryExpression	1
>9116	Argument	3
>9117	PrimaryExpression	3
>9118	Callee	matrix_scale
>9119	Identifier	matrix_scale
>9120	IfStatement	if ( norm < NORM_THRESHOLD )
>9121	ContinueStatement	 
>9122	Condition	 
>9123	RelationalExpression	norm < NORM_THRESHOLD
>9124	Identifier	NORM_THRESHOLD
>9125	Identifier	norm
>9126	IdentifierDeclStatement	 
>9127	IdentifierDecl	norm = matrix_norm ( 3 , 1 , perp )
>9128	AssignmentExpr	norm = matrix_norm ( 3 , 1 , perp )
>9129	CallExpression	matrix_norm ( 3 , 1 , perp )
>9130	ArgumentList	3
>9131	Argument	perp
>9132	Identifier	perp
>9133	Argument	1
>9134	PrimaryExpression	1
>9135	Argument	3
>9136	PrimaryExpression	3
>9137	Callee	matrix_norm
>9138	Identifier	matrix_norm
>9139	Identifier	norm
>9140	Identifier	norm
>9141	IdentifierDeclType	double
>9142	Statement	 
>9143	Statement	 
>9144	Statement	 
>9145	ExpressionStatement	 
>9146	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , normal , parallel , perp )
>9147	ArgumentList	3
>9148	Argument	perp
>9149	Identifier	perp
>9150	Argument	parallel
>9151	Identifier	parallel
>9152	Argument	normal
>9153	Identifier	normal
>9154	Argument	1
>9155	PrimaryExpression	1
>9156	Argument	3
>9157	PrimaryExpression	3
>9158	Argument	1
>9159	PrimaryExpression	1
>9160	Argument	3
>9161	PrimaryExpression	3
>9162	Callee	matrix_diff
>9163	Identifier	matrix_diff
>9164	IdentifierDeclStatement	 
>9165	IdentifierDecl	perp [ 3 ]
>9166	PrimaryExpression	3
>9167	Identifier	perp
>9168	IdentifierDeclType	double [ 3 ]
>9169	ExpressionStatement	 
>9170	CallExpression	matrix_scale ( 3 , 1 , up , dot , parallel )
>9171	ArgumentList	3
>9172	Argument	parallel
>9173	Identifier	parallel
>9174	Argument	dot
>9175	Identifier	dot
>9176	Argument	up
>9177	Identifier	up
>9178	Argument	1
>9179	PrimaryExpression	1
>9180	Argument	3
>9181	PrimaryExpression	3
>9182	Callee	matrix_scale
>9183	Identifier	matrix_scale
>9184	IdentifierDeclStatement	 
>9185	IdentifierDecl	parallel [ 3 ]
>9186	PrimaryExpression	3
>9187	Identifier	parallel
>9188	IdentifierDeclType	double [ 3 ]
>9189	ExpressionStatement	 
>9190	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , normal , up , & dot )
>9191	ArgumentList	1
>9192	Argument	& dot
>9193	UnaryOp	& dot
>9194	Identifier	dot
>9195	UnaryOperator	&
>9196	Argument	up
>9197	Identifier	up
>9198	Argument	normal
>9199	Identifier	normal
>9200	Argument	1
>9201	PrimaryExpression	1
>9202	Argument	3
>9203	PrimaryExpression	3
>9204	Argument	3
>9205	PrimaryExpression	3
>9206	Argument	1
>9207	PrimaryExpression	1
>9208	Callee	matrix_product
>9209	Identifier	matrix_product
>9210	IdentifierDeclStatement	 
>9211	IdentifierDecl	dot
>9212	Identifier	dot
>9213	IdentifierDeclType	double
>9214	ExpressionStatement	 
>9215	AssignmentExpr	m_point_data [ i ] . m_ref_image = ref_image
>9216	Identifier	ref_image
>9217	MemberAccess	m_point_data [ i ] . m_ref_image
>9218	Identifier	m_ref_image
>9219	ArrayIndexing	m_point_data [ i ]
>9220	Identifier	i
>9221	Identifier	m_point_data
>9222	ExpressionStatement	 
>9223	CallExpression	memcpy ( m_point_data [ i ] . m_norm , normal , 3 * sizeof ( double ) )
>9224	ArgumentList	m_point_data [ i ] . m_norm
>9225	Argument	3 * sizeof ( double )
>9226	MultiplicativeExpression	3 * sizeof ( double )
>9227	SizeofExpr	sizeof ( double )
>9228	SizeofOperand	double
>9229	Sizeof	sizeof
>9230	PrimaryExpression	3
>9231	Argument	normal
>9232	Identifier	normal
>9233	Argument	m_point_data [ i ] . m_norm
>9234	MemberAccess	m_point_data [ i ] . m_norm
>9235	Identifier	m_norm
>9236	ArrayIndexing	m_point_data [ i ]
>9237	Identifier	i
>9238	Identifier	m_point_data
>9239	Callee	memcpy
>9240	Identifier	memcpy
>9241	IfStatement	if ( max_dot_signed < 0.0 )
>9242	CompoundStatement	 
>9243	ExpressionStatement	 
>9244	CallExpression	matrix_scale ( 3 , 1 , normal , - 1.0 , normal )
>9245	ArgumentList	3
>9246	Argument	normal
>9247	Identifier	normal
>9248	Argument	- 1.0
>9249	UnaryOp	- 1.0
>9250	PrimaryExpression	1.0
>9251	UnaryOperator	-
>9252	Argument	normal
>9253	Identifier	normal
>9254	Argument	1
>9255	PrimaryExpression	1
>9256	Argument	3
>9257	PrimaryExpression	3
>9258	Callee	matrix_scale
>9259	Identifier	matrix_scale
>9260	Condition	 
>9261	RelationalExpression	max_dot_signed < 0.0
>9262	PrimaryExpression	0.0
>9263	Identifier	max_dot_signed
>9264	IfStatement	if ( ref_image == - 1 )
>9265	CompoundStatement	 
>9266	ExpressionStatement	 
>9267	CallExpression	printf ( \"ref image = -1\n\" )
>9268	ArgumentList	\"ref image = -1\n\"
>9269	Argument	\"ref image = -1\n\"
>9270	PrimaryExpression	\"ref image = -1\n\"
>9271	Callee	printf
>9272	Identifier	printf
>9273	Condition	 
>9274	EqualityExpression	ref_image == - 1
>9275	UnaryOp	- 1
>9276	PrimaryExpression	1
>9277	UnaryOperator	-
>9278	Identifier	ref_image
>9279	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>9280	CompoundStatement	 
>9281	IfStatement	if ( fabs ( dot ) > max_dot )
>9282	CompoundStatement	 
>9283	ExpressionStatement	 
>9284	AssignmentExpr	ref_image = idx
>9285	Identifier	idx
>9286	Identifier	ref_image
>9287	ExpressionStatement	 
>9288	AssignmentExpr	max_dot_signed = dot
>9289	Identifier	dot
>9290	Identifier	max_dot_signed
>9291	ExpressionStatement	 
>9292	AssignmentExpr	max_dot = fabs ( dot )
>9293	CallExpression	fabs ( dot )
>9294	ArgumentList	dot
>9295	Argument	dot
>9296	Identifier	dot
>9297	Callee	fabs
>9298	Identifier	fabs
>9299	Identifier	max_dot
>9300	Condition	 
>9301	RelationalExpression	fabs ( dot ) > max_dot
>9302	Identifier	max_dot
>9303	CallExpression	fabs ( dot )
>9304	ArgumentList	dot
>9305	Argument	dot
>9306	Identifier	dot
>9307	Callee	fabs
>9308	Identifier	fabs
>9309	ExpressionStatement	 
>9310	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , normal , dir , & dot )
>9311	ArgumentList	1
>9312	Argument	& dot
>9313	UnaryOp	& dot
>9314	Identifier	dot
>9315	UnaryOperator	&
>9316	Argument	dir
>9317	Identifier	dir
>9318	Argument	normal
>9319	Identifier	normal
>9320	Argument	1
>9321	PrimaryExpression	1
>9322	Argument	3
>9323	PrimaryExpression	3
>9324	Argument	3
>9325	PrimaryExpression	3
>9326	Argument	1
>9327	PrimaryExpression	1
>9328	Callee	matrix_product
>9329	Identifier	matrix_product
>9330	IdentifierDeclStatement	 
>9331	IdentifierDecl	dot
>9332	Identifier	dot
>9333	IdentifierDeclType	double
>9334	ExpressionStatement	 
>9335	CallExpression	m_image_data [ idx ] . m_camera . GetViewDirection ( dir )
>9336	ArgumentList	dir
>9337	Argument	dir
>9338	Identifier	dir
>9339	Callee	m_image_data [ idx ] . m_camera . GetViewDirection
>9340	MemberAccess	m_image_data [ idx ] . m_camera . GetViewDirection
>9341	Identifier	GetViewDirection
>9342	MemberAccess	m_image_data [ idx ] . m_camera
>9343	Identifier	m_camera
>9344	ArrayIndexing	m_image_data [ idx ]
>9345	Identifier	idx
>9346	Identifier	m_image_data
>9347	IdentifierDeclStatement	 
>9348	IdentifierDecl	dir [ 3 ]
>9349	PrimaryExpression	3
>9350	Identifier	dir
>9351	IdentifierDeclType	double [ 3 ]
>9352	IdentifierDeclStatement	 
>9353	IdentifierDecl	idx = m_point_data [ i ] . m_views [ j ] . first
>9354	AssignmentExpr	idx = m_point_data [ i ] . m_views [ j ] . first
>9355	MemberAccess	m_point_data [ i ] . m_views [ j ] . first
>9356	Identifier	first
>9357	ArrayIndexing	m_point_data [ i ] . m_views [ j ]
>9358	Identifier	j
>9359	MemberAccess	m_point_data [ i ] . m_views
>9360	Identifier	m_views
>9361	ArrayIndexing	m_point_data [ i ]
>9362	Identifier	i
>9363	Identifier	m_point_data
>9364	Identifier	idx
>9365	Identifier	idx
>9366	IdentifierDeclType	int
>9367	IncDecOp	 
>9368	IncDec	++
>9369	Identifier	j
>9370	Condition	 
>9371	RelationalExpression	j < num_views
>9372	Identifier	num_views
>9373	Identifier	j
>9374	ForInit	 
>9375	IdentifierDeclStatement	int j = 0 ;
>9376	IdentifierDecl	j = 0
>9377	AssignmentExpr	j = 0
>9378	PrimaryExpression	0
>9379	Identifier	j
>9380	Identifier	j
>9381	IdentifierDeclType	int
>9382	IdentifierDeclStatement	 
>9383	IdentifierDecl	num_views = ( int ) m_point_data [ i ] . m_views . size ( )
>9384	AssignmentExpr	num_views = ( int ) m_point_data [ i ] . m_views . size ( )
>9385	CastExpression	( int ) m_point_data [ i ] . m_views . size ( )
>9386	CallExpression	m_point_data [ i ] . m_views . size ( )
>9387	ArgumentList	 
>9388	Callee	m_point_data [ i ] . m_views . size
>9389	MemberAccess	m_point_data [ i ] . m_views . size
>9390	Identifier	size
>9391	MemberAccess	m_point_data [ i ] . m_views
>9392	Identifier	m_views
>9393	ArrayIndexing	m_point_data [ i ]
>9394	Identifier	i
>9395	Identifier	m_point_data
>9396	CastTarget	int
>9397	Identifier	num_views
>9398	Identifier	num_views
>9399	IdentifierDeclType	int
>9400	IdentifierDeclStatement	 
>9401	IdentifierDecl	max_dot_signed = 0.0
>9402	AssignmentExpr	max_dot_signed = 0.0
>9403	PrimaryExpression	0.0
>9404	Identifier	max_dot_signed
>9405	Identifier	max_dot_signed
>9406	IdentifierDeclType	double
>9407	IdentifierDeclStatement	 
>9408	IdentifierDecl	max_dot = 0.0
>9409	AssignmentExpr	max_dot = 0.0
>9410	PrimaryExpression	0.0
>9411	Identifier	max_dot
>9412	Identifier	max_dot
>9413	IdentifierDeclType	double
>9414	IdentifierDeclStatement	 
>9415	IdentifierDecl	ref_image = - 1
>9416	AssignmentExpr	ref_image = - 1
>9417	UnaryOp	- 1
>9418	PrimaryExpression	1
>9419	UnaryOperator	-
>9420	Identifier	ref_image
>9421	Identifier	ref_image
>9422	IdentifierDeclType	int
>9423	IdentifierDeclStatement	 
>9424	IdentifierDecl	normal [ 3 ] = { params [ 0 ] , params [ 1 ] , params [ 2 ] }
>9425	AssignmentExpr	normal [ 3 ] = { params [ 0 ] , params [ 1 ] , params [ 2 ] }
>9426	InitializerList	params [ 0 ]
>9427	ArrayIndexing	params [ 2 ]
>9428	PrimaryExpression	2
>9429	Identifier	params
>9430	ArrayIndexing	params [ 1 ]
>9431	PrimaryExpression	1
>9432	Identifier	params
>9433	ArrayIndexing	params [ 0 ]
>9434	PrimaryExpression	0
>9435	Identifier	params
>9436	Identifier	normal
>9437	PrimaryExpression	3
>9438	Identifier	normal
>9439	IdentifierDeclType	double [ 3 ]
>9440	IfStatement	if ( error > ERROR_THRESHOLD )
>9441	ContinueStatement	 
>9442	Condition	 
>9443	RelationalExpression	error > ERROR_THRESHOLD
>9444	Identifier	ERROR_THRESHOLD
>9445	Identifier	error
>9446	Statement	 
>9447	Statement	 
>9448	Statement	 
>9449	IfStatement	if ( num_inliers < INLIER_THRESHOLD )
>9450	ContinueStatement	 
>9451	Condition	 
>9452	RelationalExpression	num_inliers < INLIER_THRESHOLD
>9453	Identifier	INLIER_THRESHOLD
>9454	Identifier	num_inliers
>9455	Statement	 
>9456	Statement	 
>9457	Statement	 
>9458	Statement	 
>9459	Statement	 
>9460	Statement	 
>9461	Statement	 
>9462	ExpressionStatement	 
>9463	CallExpression	fit_3D_plane_ortreg_ransac ( NUM_NNS , nns , 64 , 0.1 , & num_inliers , params )
>9464	ArgumentList	NUM_NNS
>9465	Argument	params
>9466	Identifier	params
>9467	Argument	& num_inliers
>9468	UnaryOp	& num_inliers
>9469	Identifier	num_inliers
>9470	UnaryOperator	&
>9471	Argument	0.1
>9472	PrimaryExpression	0.1
>9473	Argument	64
>9474	PrimaryExpression	64
>9475	Argument	nns
>9476	Identifier	nns
>9477	Argument	NUM_NNS
>9478	Identifier	NUM_NNS
>9479	Callee	fit_3D_plane_ortreg_ransac
>9480	Identifier	fit_3D_plane_ortreg_ransac
>9481	IdentifierDeclStatement	 
>9482	IdentifierDecl	num_inliers
>9483	Identifier	num_inliers
>9484	IdentifierDeclType	int
>9485	IdentifierDeclStatement	 
>9486	IdentifierDecl	params [ 4 ]
>9487	PrimaryExpression	4
>9488	Identifier	params
>9489	IdentifierDeclType	double [ 4 ]
>9490	ForStatement	for ( int j = 0 ; j < NUM_NNS ; j ++ )
>9491	CompoundStatement	 
>9492	ExpressionStatement	 
>9493	AssignmentExpr	nns [ j ] = v3_new ( nn . m_pos [ 0 ] , nn . m_pos [ 1 ] , nn . m_pos [ 2 ] )
>9494	CallExpression	v3_new ( nn . m_pos [ 0 ] , nn . m_pos [ 1 ] , nn . m_pos [ 2 ] )
>9495	ArgumentList	nn . m_pos [ 0 ]
>9496	Argument	nn . m_pos [ 2 ]
>9497	ArrayIndexing	nn . m_pos [ 2 ]
>9498	PrimaryExpression	2
>9499	MemberAccess	nn . m_pos
>9500	Identifier	m_pos
>9501	Identifier	nn
>9502	Argument	nn . m_pos [ 1 ]
>9503	ArrayIndexing	nn . m_pos [ 1 ]
>9504	PrimaryExpression	1
>9505	MemberAccess	nn . m_pos
>9506	Identifier	m_pos
>9507	Identifier	nn
>9508	Argument	nn . m_pos [ 0 ]
>9509	ArrayIndexing	nn . m_pos [ 0 ]
>9510	PrimaryExpression	0
>9511	MemberAccess	nn . m_pos
>9512	Identifier	m_pos
>9513	Identifier	nn
>9514	Callee	v3_new
>9515	Identifier	v3_new
>9516	ArrayIndexing	nns [ j ]
>9517	Identifier	j
>9518	Identifier	nns
>9519	IdentifierDeclStatement	 
>9520	IdentifierDecl	& nn = m_point_data [ nn_idxs [ j ] ]
>9521	AssignmentExpr	& nn = m_point_data [ nn_idxs [ j ] ]
>9522	ArrayIndexing	m_point_data [ nn_idxs [ j ] ]
>9523	ArrayIndexing	nn_idxs [ j ]
>9524	Identifier	j
>9525	Identifier	nn_idxs
>9526	Identifier	m_point_data
>9527	Identifier	nn
>9528	Identifier	nn
>9529	IdentifierDeclType	PointData &
>9530	IncDecOp	 
>9531	IncDec	++
>9532	Identifier	j
>9533	Condition	 
>9534	RelationalExpression	j < NUM_NNS
>9535	Identifier	NUM_NNS
>9536	Identifier	j
>9537	ForInit	 
>9538	IdentifierDeclStatement	int j = 0 ;
>9539	IdentifierDecl	j = 0
>9540	AssignmentExpr	j = 0
>9541	PrimaryExpression	0
>9542	Identifier	j
>9543	Identifier	j
>9544	IdentifierDeclType	int
>9545	IdentifierDeclStatement	 
>9546	IdentifierDecl	nns [ NUM_NNS ]
>9547	Identifier	NUM_NNS
>9548	Identifier	nns
>9549	IdentifierDeclType	v3_t [ NUM_NNS ]
>9550	ExpressionStatement	 
>9551	CallExpression	tree -> annkPriSearch ( query , NUM_NNS , nn_idxs , dists , 0.0 )
>9552	ArgumentList	query
>9553	Argument	0.0
>9554	PrimaryExpression	0.0
>9555	Argument	dists
>9556	Identifier	dists
>9557	Argument	nn_idxs
>9558	Identifier	nn_idxs
>9559	Argument	NUM_NNS
>9560	Identifier	NUM_NNS
>9561	Argument	query
>9562	Identifier	query
>9563	Callee	tree -> annkPriSearch
>9564	PtrMemberAccess	tree -> annkPriSearch
>9565	Identifier	annkPriSearch
>9566	Identifier	tree
>9567	IdentifierDeclStatement	 
>9568	IdentifierDecl	query [ 3 ] = { Vx ( q ) , Vy ( q ) , Vz ( q ) }
>9569	AssignmentExpr	query [ 3 ] = { Vx ( q ) , Vy ( q ) , Vz ( q ) }
>9570	InitializerList	Vx ( q )
>9571	CallExpression	Vz ( q )
>9572	ArgumentList	q
>9573	Argument	q
>9574	Identifier	q
>9575	Callee	Vz
>9576	Identifier	Vz
>9577	CallExpression	Vy ( q )
>9578	ArgumentList	q
>9579	Argument	q
>9580	Identifier	q
>9581	Callee	Vy
>9582	Identifier	Vy
>9583	CallExpression	Vx ( q )
>9584	ArgumentList	q
>9585	Argument	q
>9586	Identifier	q
>9587	Callee	Vx
>9588	Identifier	Vx
>9589	Identifier	query
>9590	PrimaryExpression	3
>9591	Identifier	query
>9592	IdentifierDeclType	float [ 3 ]
>9593	IdentifierDeclStatement	 
>9594	IdentifierDecl	dists [ NUM_NNS ]
>9595	Identifier	NUM_NNS
>9596	Identifier	dists
>9597	IdentifierDeclType	float [ NUM_NNS ]
>9598	IdentifierDeclStatement	 
>9599	IdentifierDecl	nn_idxs [ NUM_NNS ]
>9600	Identifier	NUM_NNS
>9601	Identifier	nn_idxs
>9602	IdentifierDeclType	int [ NUM_NNS ]
>9603	IdentifierDeclStatement	 
>9604	IdentifierDecl	q = v3_new ( p . m_pos [ 0 ] , p . m_pos [ 1 ] , p . m_pos [ 2 ] )
>9605	AssignmentExpr	q = v3_new ( p . m_pos [ 0 ] , p . m_pos [ 1 ] , p . m_pos [ 2 ] )
>9606	CallExpression	v3_new ( p . m_pos [ 0 ] , p . m_pos [ 1 ] , p . m_pos [ 2 ] )
>9607	ArgumentList	p . m_pos [ 0 ]
>9608	Argument	p . m_pos [ 2 ]
>9609	ArrayIndexing	p . m_pos [ 2 ]
>9610	PrimaryExpression	2
>9611	MemberAccess	p . m_pos
>9612	Identifier	m_pos
>9613	Identifier	p
>9614	Argument	p . m_pos [ 1 ]
>9615	ArrayIndexing	p . m_pos [ 1 ]
>9616	PrimaryExpression	1
>9617	MemberAccess	p . m_pos
>9618	Identifier	m_pos
>9619	Identifier	p
>9620	Argument	p . m_pos [ 0 ]
>9621	ArrayIndexing	p . m_pos [ 0 ]
>9622	PrimaryExpression	0
>9623	MemberAccess	p . m_pos
>9624	Identifier	m_pos
>9625	Identifier	p
>9626	Callee	v3_new
>9627	Identifier	v3_new
>9628	Identifier	q
>9629	Identifier	q
>9630	IdentifierDeclType	v3_t
>9631	IdentifierDeclStatement	 
>9632	IdentifierDecl	& p = m_point_data [ i ]
>9633	AssignmentExpr	& p = m_point_data [ i ]
>9634	ArrayIndexing	m_point_data [ i ]
>9635	Identifier	i
>9636	Identifier	m_point_data
>9637	Identifier	p
>9638	Identifier	p
>9639	IdentifierDeclType	PointData &
>9640	IfStatement	if ( i % 500 == 0 )
>9641	CompoundStatement	 
>9642	ExpressionStatement	 
>9643	CallExpression	fflush ( stdout )
>9644	ArgumentList	stdout
>9645	Argument	stdout
>9646	Identifier	stdout
>9647	Callee	fflush
>9648	Identifier	fflush
>9649	ExpressionStatement	 
>9650	CallExpression	printf ( \".\" )
>9651	ArgumentList	\".\"
>9652	Argument	\".\"
>9653	PrimaryExpression	\".\"
>9654	Callee	printf
>9655	Identifier	printf
>9656	Condition	 
>9657	EqualityExpression	i % 500 == 0
>9658	PrimaryExpression	0
>9659	MultiplicativeExpression	i % 500
>9660	PrimaryExpression	500
>9661	Identifier	i
>9662	IncDecOp	 
>9663	IncDec	++
>9664	Identifier	i
>9665	Condition	 
>9666	RelationalExpression	i < num_points
>9667	Identifier	num_points
>9668	Identifier	i
>9669	ForInit	 
>9670	IdentifierDeclStatement	int i = 0 ;
>9671	IdentifierDecl	i = 0
>9672	AssignmentExpr	i = 0
>9673	PrimaryExpression	0
>9674	Identifier	i
>9675	Identifier	i
>9676	IdentifierDeclType	int
>9677	IdentifierDeclStatement	 
>9678	IdentifierDecl	num_points_inc = 0
>9679	AssignmentExpr	num_points_inc = 0
>9680	PrimaryExpression	0
>9681	Identifier	num_points_inc
>9682	Identifier	num_points_inc
>9683	IdentifierDeclType	int
>9684	IdentifierDeclStatement	 
>9685	IdentifierDecl	* tree = Create3DSearchTree ( num_points , pts )
>9686	AssignmentExpr	* tree = Create3DSearchTree ( num_points , pts )
>9687	CallExpression	Create3DSearchTree ( num_points , pts )
>9688	ArgumentList	num_points
>9689	Argument	pts
>9690	Identifier	pts
>9691	Argument	num_points
>9692	Identifier	num_points
>9693	Callee	Create3DSearchTree
>9694	Identifier	Create3DSearchTree
>9695	Identifier	tree
>9696	Identifier	tree
>9697	IdentifierDeclType	ANNkd_tree *
>9698	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>9699	CompoundStatement	 
>9700	ExpressionStatement	 
>9701	AssignmentExpr	m_point_data [ i ] . m_norm [ 2 ] = 0.0
>9702	PrimaryExpression	0.0
>9703	ArrayIndexing	m_point_data [ i ] . m_norm [ 2 ]
>9704	PrimaryExpression	2
>9705	MemberAccess	m_point_data [ i ] . m_norm
>9706	Identifier	m_norm
>9707	ArrayIndexing	m_point_data [ i ]
>9708	Identifier	i
>9709	Identifier	m_point_data
>9710	ExpressionStatement	 
>9711	AssignmentExpr	m_point_data [ i ] . m_norm [ 1 ] = 0.0
>9712	PrimaryExpression	0.0
>9713	ArrayIndexing	m_point_data [ i ] . m_norm [ 1 ]
>9714	PrimaryExpression	1
>9715	MemberAccess	m_point_data [ i ] . m_norm
>9716	Identifier	m_norm
>9717	ArrayIndexing	m_point_data [ i ]
>9718	Identifier	i
>9719	Identifier	m_point_data
>9720	ExpressionStatement	 
>9721	AssignmentExpr	m_point_data [ i ] . m_norm [ 0 ] = 0.0
>9722	PrimaryExpression	0.0
>9723	ArrayIndexing	m_point_data [ i ] . m_norm [ 0 ]
>9724	PrimaryExpression	0
>9725	MemberAccess	m_point_data [ i ] . m_norm
>9726	Identifier	m_norm
>9727	ArrayIndexing	m_point_data [ i ]
>9728	Identifier	i
>9729	Identifier	m_point_data
>9730	ExpressionStatement	 
>9731	AssignmentExpr	pts [ i ] = v3_new ( m_point_data [ i ] . m_pos [ 0 ] , m_point_data [ i ] . m_pos [ 1 ] , m_point_data [ \
>9732	CallExpression	v3_new ( m_point_data [ i ] . m_pos [ 0 ] , m_point_data [ i ] . m_pos [ 1 ] , m_point_data [ i ] . m_pos [ 2 ] )
>9733	ArgumentList	m_point_data [ i ] . m_pos [ 0 ]
>9734	Argument	m_point_data [ i ] . m_pos [ 2 ]
>9735	ArrayIndexing	m_point_data [ i ] . m_pos [ 2 ]
>9736	PrimaryExpression	2
>9737	MemberAccess	m_point_data [ i ] . m_pos
>9738	Identifier	m_pos
>9739	ArrayIndexing	m_point_data [ i ]
>9740	Identifier	i
>9741	Identifier	m_point_data
>9742	Argument	m_point_data [ i ] . m_pos [ 1 ]
>9743	ArrayIndexing	m_point_data [ i ] . m_pos [ 1 ]
>9744	PrimaryExpression	1
>9745	MemberAccess	m_point_data [ i ] . m_pos
>9746	Identifier	m_pos
>9747	ArrayIndexing	m_point_data [ i ]
>9748	Identifier	i
>9749	Identifier	m_point_data
>9750	Argument	m_point_data [ i ] . m_pos [ 0 ]
>9751	ArrayIndexing	m_point_data [ i ] . m_pos [ 0 ]
>9752	PrimaryExpression	0
>9753	MemberAccess	m_point_data [ i ] . m_pos
>9754	Identifier	m_pos
>9755	ArrayIndexing	m_point_data [ i ]
>9756	Identifier	i
>9757	Identifier	m_point_data
>9758	Callee	v3_new
>9759	Identifier	v3_new
>9760	ArrayIndexing	pts [ i ]
>9761	Identifier	i
>9762	Identifier	pts
>9763	IncDecOp	 
>9764	IncDec	++
>9765	Identifier	i
>9766	Condition	 
>9767	RelationalExpression	i < num_points
>9768	Identifier	num_points
>9769	Identifier	i
>9770	ForInit	 
>9771	IdentifierDeclStatement	int i = 0 ;
>9772	IdentifierDecl	i = 0
>9773	AssignmentExpr	i = 0
>9774	PrimaryExpression	0
>9775	Identifier	i
>9776	Identifier	i
>9777	IdentifierDeclType	int
>9778	IdentifierDeclStatement	 
>9779	IdentifierDecl	* pts = new v3_t [ num_points ]
>9780	AssignmentExpr	* pts = new v3_t [ num_points ]
>9781	Identifier	num_points
>9782	Identifier	num_points
>9783	Identifier	pts
>9784	IdentifierDeclType	v3_t *
>9785	IdentifierDeclStatement	 
>9786	IdentifierDecl	num_points = ( int ) m_point_data . size ( )
>9787	AssignmentExpr	num_points = ( int ) m_point_data . size ( )
>9788	CastExpression	( int ) m_point_data . size ( )
>9789	CallExpression	m_point_data . size ( )
>9790	ArgumentList	 
>9791	Callee	m_point_data . size
>9792	MemberAccess	m_point_data . size
>9793	Identifier	size
>9794	Identifier	m_point_data
>9795	CastTarget	int
>9796	Identifier	num_points
>9797	Identifier	num_points
>9798	IdentifierDeclType	int
>9799	Statement	 
>9800	Statement	 
>9801	Statement	 
>9883	FunctionDef	BaseApp 
>9884	ParameterList	int min_num_points
>9885	Parameter	 
>9886	Identifier	min_num_points
>9887	ParameterType	int
>9888	ReturnType	void
>9889	CompoundStatement	 
>9890	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>9891	CompoundStatement	 
>9892	IfStatement	if ( num_visible < min_num_points )
>9893	CompoundStatement	 
>9894	ForStatement	for ( int j = 0 ; j < num_visible ; j ++ )
>9895	CompoundStatement	 
>9896	ForStatement	for ( int k = 0 ; k < num_views ; k ++ )
>9897	CompoundStatement	 
>9898	IfStatement	if ( pt . m_views [ k ] . first == i )
>9899	CompoundStatement	 
>9900	BreakStatement	 
>9901	ExpressionStatement	 
>9902	CallExpression	pt . m_views . erase ( pt . m_views . begin ( ) + k )
>9903	ArgumentList	pt . m_views . begin ( ) + k
>9904	Argument	pt . m_views . begin ( ) + k
>9905	AdditiveExpression	pt . m_views . begin ( ) + k
>9906	Identifier	k
>9907	CallExpression	pt . m_views . begin ( )
>9908	ArgumentList	 
>9909	Callee	pt . m_views . begin
>9910	MemberAccess	pt . m_views . begin
>9911	Identifier	begin
>9912	MemberAccess	pt . m_views
>9913	Identifier	m_views
>9914	Identifier	pt
>9915	Callee	pt . m_views . erase
>9916	MemberAccess	pt . m_views . erase
>9917	Identifier	erase
>9918	MemberAccess	pt . m_views
>9919	Identifier	m_views
>9920	Identifier	pt
>9921	ExpressionStatement	 
>9922	CallExpression	printf ( \"  Erasing from point %d\n\" , k )
>9923	ArgumentList	\"  Erasing from point %d\n\"
>9924	Argument	k
>9925	Identifier	k
>9926	Argument	\"  Erasing from point %d\n\"
>9927	PrimaryExpression	\"  Erasing from point %d\n\"
>9928	Callee	printf
>9929	Identifier	printf
>9930	Condition	 
>9931	EqualityExpression	pt . m_views [ k ] . first == i
>9932	Identifier	i
>9933	MemberAccess	pt . m_views [ k ] . first
>9934	Identifier	first
>9935	ArrayIndexing	pt . m_views [ k ]
>9936	Identifier	k
>9937	MemberAccess	pt . m_views
>9938	Identifier	m_views
>9939	Identifier	pt
>9940	IncDecOp	 
>9941	IncDec	++
>9942	Identifier	k
>9943	Condition	 
>9944	RelationalExpression	k < num_views
>9945	Identifier	num_views
>9946	Identifier	k
>9947	ForInit	 
>9948	IdentifierDeclStatement	int k = 0 ;
>9949	IdentifierDecl	k = 0
>9950	AssignmentExpr	k = 0
>9951	PrimaryExpression	0
>9952	Identifier	k
>9953	Identifier	k
>9954	IdentifierDeclType	int
>9955	IdentifierDeclStatement	 
>9956	IdentifierDecl	num_views = pt . m_views . size ( )
>9957	AssignmentExpr	num_views = pt . m_views . size ( )
>9958	CallExpression	pt . m_views . size ( )
>9959	ArgumentList	 
>9960	Callee	pt . m_views . size
>9961	MemberAccess	pt . m_views . size
>9962	Identifier	size
>9963	MemberAccess	pt . m_views
>9964	Identifier	m_views
>9965	Identifier	pt
>9966	Identifier	num_views
>9967	Identifier	num_views
>9968	IdentifierDeclType	int
>9969	IdentifierDeclStatement	 
>9970	IdentifierDecl	& pt = m_point_data [ idx ]
>9971	AssignmentExpr	& pt = m_point_data [ idx ]
>9972	ArrayIndexing	m_point_data [ idx ]
>9973	Identifier	idx
>9974	Identifier	m_point_data
>9975	Identifier	pt
>9976	Identifier	pt
>9977	IdentifierDeclType	PointData &
>9978	IdentifierDeclStatement	 
>9979	IdentifierDecl	idx = m_image_data [ i ] . m_visible_points [ j ]
>9980	AssignmentExpr	idx = m_image_data [ i ] . m_visible_points [ j ]
>9981	ArrayIndexing	m_image_data [ i ] . m_visible_points [ j ]
>9982	Identifier	j
>9983	MemberAccess	m_image_data [ i ] . m_visible_points
>9984	Identifier	m_visible_points
>9985	ArrayIndexing	m_image_data [ i ]
>9986	Identifier	i
>9987	Identifier	m_image_data
>9988	Identifier	idx
>9989	Identifier	idx
>9990	IdentifierDeclType	int
>9991	IncDecOp	 
>9992	IncDec	++
>9993	Identifier	j
>9994	Condition	 
>9995	RelationalExpression	j < num_visible
>9996	Identifier	num_visible
>9997	Identifier	j
>9998	ForInit	 
>9999	IdentifierDeclStatement	int j = 0 ;
>10000	IdentifierDecl	j = 0
>10001	AssignmentExpr	j = 0
>10002	PrimaryExpression	0
>10003	Identifier	j
>10004	Identifier	j
>10005	IdentifierDeclType	int
>10006	ExpressionStatement	 
>10007	AssignmentExpr	m_image_data [ i ] . m_camera . m_adjusted = false
>10008	Identifier	false
>10009	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>10010	Identifier	m_adjusted
>10011	MemberAccess	m_image_data [ i ] . m_camera
>10012	Identifier	m_camera
>10013	ArrayIndexing	m_image_data [ i ]
>10014	Identifier	i
>10015	Identifier	m_image_data
>10016	ExpressionStatement	 
>10017	CallExpression	printf ( \"[RemoveBadImages] Removing image %d (%d points visible)\n\" , i , num_visible )
>10018	ArgumentList	\"[RemoveBadImages] Removing image %d (%d points visible)\n\"
>10019	Argument	num_visible
>10020	Identifier	num_visible
>10021	Argument	i
>10022	Identifier	i
>10023	Argument	\"[RemoveBadImages] Removing image %d (%d points visible)\n\"
>10024	PrimaryExpression	\"[RemoveBadImages] Removing image %d (%d points visible)\n\"
>10025	Callee	printf
>10026	Identifier	printf
>10027	Condition	 
>10028	RelationalExpression	num_visible < min_num_points
>10029	Identifier	min_num_points
>10030	Identifier	num_visible
>10031	IdentifierDeclStatement	 
>10032	IdentifierDecl	num_visible = ( int ) m_image_data [ i ] . m_visible_points . size ( )
>10033	AssignmentExpr	num_visible = ( int ) m_image_data [ i ] . m_visible_points . size ( )
>10034	CastExpression	( int ) m_image_data [ i ] . m_visible_points . size ( )
>10035	CallExpression	m_image_data [ i ] . m_visible_points . size ( )
>10036	ArgumentList	 
>10037	Callee	m_image_data [ i ] . m_visible_points . size
>10038	MemberAccess	m_image_data [ i ] . m_visible_points . size
>10039	Identifier	size
>10040	MemberAccess	m_image_data [ i ] . m_visible_points
>10041	Identifier	m_visible_points
>10042	ArrayIndexing	m_image_data [ i ]
>10043	Identifier	i
>10044	Identifier	m_image_data
>10045	CastTarget	int
>10046	Identifier	num_visible
>10047	Identifier	num_visible
>10048	IdentifierDeclType	int
>10049	IfStatement	if ( ! m_image_data [ i ] . m_camera . m_adjusted )
>10050	ContinueStatement	 
>10051	Condition	 
>10052	UnaryOp	! m_image_data [ i ] . m_camera . m_adjusted
>10053	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>10054	Identifier	m_adjusted
>10055	MemberAccess	m_image_data [ i ] . m_camera
>10056	Identifier	m_camera
>10057	ArrayIndexing	m_image_data [ i ]
>10058	Identifier	i
>10059	Identifier	m_image_data
>10060	UnaryOperator	!
>10061	IncDecOp	 
>10062	IncDec	++
>10063	Identifier	i
>10064	Condition	 
>10065	RelationalExpression	i < num_images
>10066	Identifier	num_images
>10067	Identifier	i
>10068	ForInit	 
>10069	IdentifierDeclStatement	int i = 0 ;
>10070	IdentifierDecl	i = 0
>10071	AssignmentExpr	i = 0
>10072	PrimaryExpression	0
>10073	Identifier	i
>10074	Identifier	i
>10075	IdentifierDeclType	int
>10076	IdentifierDeclStatement	 
>10077	IdentifierDecl	num_images = GetNumImages ( )
>10078	AssignmentExpr	num_images = GetNumImages ( )
>10079	CallExpression	GetNumImages ( )
>10080	ArgumentList	 
>10081	Callee	GetNumImages
>10082	Identifier	GetNumImages
>10083	Identifier	num_images
>10084	Identifier	num_images
>10085	IdentifierDeclType	int
>10121	FunctionDef	BaseApp 
>10122	ParameterList	int i1 , int i2
>10123	Parameter	 
>10124	Identifier	i2
>10125	ParameterType	int
>10126	Parameter	 
>10127	Identifier	i1
>10128	ParameterType	int
>10129	ReturnType	bool
>10130	CompoundStatement	 
>10131	ReturnStatement	 
>10132	Identifier	true
>10133	IfStatement	if ( dist_cams > 0.1 * dist2_avg )
>10134	ReturnStatement	 
>10135	Identifier	false
>10136	Condition	 
>10137	RelationalExpression	dist_cams > 0.1 * dist2_avg
>10138	MultiplicativeExpression	0.1 * dist2_avg
>10139	Identifier	dist2_avg
>10140	PrimaryExpression	0.1
>10141	Identifier	dist_cams
>10142	IfStatement	if ( dist_cams > 0.1 * dist1_avg )
>10143	ReturnStatement	 
>10144	Identifier	false
>10145	Condition	 
>10146	RelationalExpression	dist_cams > 0.1 * dist1_avg
>10147	MultiplicativeExpression	0.1 * dist1_avg
>10148	Identifier	dist1_avg
>10149	PrimaryExpression	0.1
>10150	Identifier	dist_cams
>10151	IfStatement	if ( RAD2DEG ( angle_avg ) > 3.0 )
>10152	ReturnStatement	 
>10153	Identifier	false
>10154	Condition	 
>10155	RelationalExpression	RAD2DEG ( angle_avg ) > 3.0
>10156	PrimaryExpression	3.0
>10157	CallExpression	RAD2DEG ( angle_avg )
>10158	ArgumentList	angle_avg
>10159	Argument	angle_avg
>10160	Identifier	angle_avg
>10161	Callee	RAD2DEG
>10162	Identifier	RAD2DEG
>10163	IdentifierDeclStatement	 
>10164	IdentifierDecl	dist_cams = matrix_norm ( 3 , 1 , disp_cams )
>10165	AssignmentExpr	dist_cams = matrix_norm ( 3 , 1 , disp_cams )
>10166	CallExpression	matrix_norm ( 3 , 1 , disp_cams )
>10167	ArgumentList	3
>10168	Argument	disp_cams
>10169	Identifier	disp_cams
>10170	Argument	1
>10171	PrimaryExpression	1
>10172	Argument	3
>10173	PrimaryExpression	3
>10174	Callee	matrix_norm
>10175	Identifier	matrix_norm
>10176	Identifier	dist_cams
>10177	Identifier	dist_cams
>10178	IdentifierDeclType	double
>10179	ExpressionStatement	 
>10180	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , pos1 , pos2 , disp_cams )
>10181	ArgumentList	3
>10182	Argument	disp_cams
>10183	Identifier	disp_cams
>10184	Argument	pos2
>10185	Identifier	pos2
>10186	Argument	pos1
>10187	Identifier	pos1
>10188	Argument	1
>10189	PrimaryExpression	1
>10190	Argument	3
>10191	PrimaryExpression	3
>10192	Argument	1
>10193	PrimaryExpression	1
>10194	Argument	3
>10195	PrimaryExpression	3
>10196	Callee	matrix_diff
>10197	Identifier	matrix_diff
>10198	IdentifierDeclStatement	 
>10199	IdentifierDecl	disp_cams [ 3 ]
>10200	PrimaryExpression	3
>10201	Identifier	disp_cams
>10202	IdentifierDeclType	double [ 3 ]
>10203	IdentifierDeclStatement	 
>10204	IdentifierDecl	dist2_avg = dist2_sum / ( num_vis1 + num_vis2 )
>10205	AssignmentExpr	dist2_avg = dist2_sum / ( num_vis1 + num_vis2 )
>10206	MultiplicativeExpression	dist2_sum / ( num_vis1 + num_vis2 )
>10207	AdditiveExpression	num_vis1 + num_vis2
>10208	Identifier	num_vis2
>10209	Identifier	num_vis1
>10210	Identifier	dist2_sum
>10211	Identifier	dist2_avg
>10212	Identifier	dist2_avg
>10213	IdentifierDeclType	double
>10214	IdentifierDeclStatement	 
>10215	IdentifierDecl	dist1_avg = dist1_sum / ( num_vis1 + num_vis2 )
>10216	AssignmentExpr	dist1_avg = dist1_sum / ( num_vis1 + num_vis2 )
>10217	MultiplicativeExpression	dist1_sum / ( num_vis1 + num_vis2 )
>10218	AdditiveExpression	num_vis1 + num_vis2
>10219	Identifier	num_vis2
>10220	Identifier	num_vis1
>10221	Identifier	dist1_sum
>10222	Identifier	dist1_avg
>10223	Identifier	dist1_avg
>10224	IdentifierDeclType	double
>10225	IdentifierDeclStatement	 
>10226	IdentifierDecl	angle_avg = angle_sum / ( num_vis1 + num_vis2 )
>10227	AssignmentExpr	angle_avg = angle_sum / ( num_vis1 + num_vis2 )
>10228	MultiplicativeExpression	angle_sum / ( num_vis1 + num_vis2 )
>10229	AdditiveExpression	num_vis1 + num_vis2
>10230	Identifier	num_vis2
>10231	Identifier	num_vis1
>10232	Identifier	angle_sum
>10233	Identifier	angle_avg
>10234	Identifier	angle_avg
>10235	IdentifierDeclType	double
>10236	ForStatement	for ( unsigned int i = 0 ; i < num_vis2 ; i ++ )
>10237	CompoundStatement	 
>10238	ExpressionStatement	 
>10239	AssignmentExpr	dist2_sum += dist2
>10240	Identifier	dist2
>10241	Identifier	dist2_sum
>10242	ExpressionStatement	 
>10243	AssignmentExpr	dist1_sum += dist1
>10244	Identifier	dist1
>10245	Identifier	dist1_sum
>10246	ExpressionStatement	 
>10247	AssignmentExpr	angle_sum += angle
>10248	Identifier	angle
>10249	Identifier	angle_sum
>10250	IdentifierDeclStatement	 
>10251	IdentifierDecl	angle = acos ( CLAMP ( dot / mag , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 ) )
>10252	AssignmentExpr	angle = acos ( CLAMP ( dot / mag , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 ) )
>10253	CallExpression	acos ( CLAMP ( dot / mag , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 ) )
>10254	ArgumentList	CLAMP ( dot / mag , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 )
>10255	Argument	CLAMP ( dot / mag , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 )
>10256	CallExpression	CLAMP ( dot / mag , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 )
>10257	ArgumentList	dot / mag
>10258	Argument	1.0 - 1.0e-8
>10259	AdditiveExpression	1.0 - 1.0e-8
>10260	PrimaryExpression	1.0e-8
>10261	PrimaryExpression	1.0
>10262	Argument	- 1.0 + 1.0e-8
>10263	AdditiveExpression	- 1.0 + 1.0e-8
>10264	PrimaryExpression	1.0e-8
>10265	UnaryOp	- 1.0
>10266	PrimaryExpression	1.0
>10267	UnaryOperator	-
>10268	Argument	dot / mag
>10269	MultiplicativeExpression	dot / mag
>10270	Identifier	mag
>10271	Identifier	dot
>10272	Callee	CLAMP
>10273	Identifier	CLAMP
>10274	Callee	acos
>10275	Identifier	acos
>10276	Identifier	angle
>10277	Identifier	angle
>10278	IdentifierDeclType	double
>10279	IdentifierDeclStatement	 
>10280	IdentifierDecl	mag = dist1 * dist2
>10281	AssignmentExpr	mag = dist1 * dist2
>10282	MultiplicativeExpression	dist1 * dist2
>10283	Identifier	dist2
>10284	Identifier	dist1
>10285	Identifier	mag
>10286	Identifier	mag
>10287	IdentifierDeclType	double
>10288	IdentifierDeclStatement	 
>10289	IdentifierDecl	dist2 = matrix_norm ( 3 , 1 , ray2 )
>10290	AssignmentExpr	dist2 = matrix_norm ( 3 , 1 , ray2 )
>10291	CallExpression	matrix_norm ( 3 , 1 , ray2 )
>10292	ArgumentList	3
>10293	Argument	ray2
>10294	Identifier	ray2
>10295	Argument	1
>10296	PrimaryExpression	1
>10297	Argument	3
>10298	PrimaryExpression	3
>10299	Callee	matrix_norm
>10300	Identifier	matrix_norm
>10301	Identifier	dist2
>10302	Identifier	dist2
>10303	IdentifierDeclType	double
>10304	IdentifierDeclStatement	 
>10305	IdentifierDecl	dist1 = matrix_norm ( 3 , 1 , ray1 )
>10306	AssignmentExpr	dist1 = matrix_norm ( 3 , 1 , ray1 )
>10307	CallExpression	matrix_norm ( 3 , 1 , ray1 )
>10308	ArgumentList	3
>10309	Argument	ray1
>10310	Identifier	ray1
>10311	Argument	1
>10312	PrimaryExpression	1
>10313	Argument	3
>10314	PrimaryExpression	3
>10315	Callee	matrix_norm
>10316	Identifier	matrix_norm
>10317	Identifier	dist1
>10318	Identifier	dist1
>10319	IdentifierDeclType	double
>10320	ExpressionStatement	 
>10321	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , ray1 , ray2 , & dot )
>10322	ArgumentList	1
>10323	Argument	& dot
>10324	UnaryOp	& dot
>10325	Identifier	dot
>10326	UnaryOperator	&
>10327	Argument	ray2
>10328	Identifier	ray2
>10329	Argument	ray1
>10330	Identifier	ray1
>10331	Argument	1
>10332	PrimaryExpression	1
>10333	Argument	3
>10334	PrimaryExpression	3
>10335	Argument	3
>10336	PrimaryExpression	3
>10337	Argument	1
>10338	PrimaryExpression	1
>10339	Callee	matrix_product
>10340	Identifier	matrix_product
>10341	IdentifierDeclStatement	 
>10342	IdentifierDecl	dot
>10343	Identifier	dot
>10344	IdentifierDeclType	double
>10345	ExpressionStatement	 
>10346	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , m_point_data [ p ] . m_pos , pos2 , ray2 )
>10347	ArgumentList	3
>10348	Argument	ray2
>10349	Identifier	ray2
>10350	Argument	pos2
>10351	Identifier	pos2
>10352	Argument	m_point_data [ p ] . m_pos
>10353	MemberAccess	m_point_data [ p ] . m_pos
>10354	Identifier	m_pos
>10355	ArrayIndexing	m_point_data [ p ]
>10356	Identifier	p
>10357	Identifier	m_point_data
>10358	Argument	1
>10359	PrimaryExpression	1
>10360	Argument	3
>10361	PrimaryExpression	3
>10362	Argument	1
>10363	PrimaryExpression	1
>10364	Argument	3
>10365	PrimaryExpression	3
>10366	Callee	matrix_diff
>10367	Identifier	matrix_diff
>10368	ExpressionStatement	 
>10369	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , m_point_data [ p ] . m_pos , pos1 , ray1 )
>10370	ArgumentList	3
>10371	Argument	ray1
>10372	Identifier	ray1
>10373	Argument	pos1
>10374	Identifier	pos1
>10375	Argument	m_point_data [ p ] . m_pos
>10376	MemberAccess	m_point_data [ p ] . m_pos
>10377	Identifier	m_pos
>10378	ArrayIndexing	m_point_data [ p ]
>10379	Identifier	p
>10380	Identifier	m_point_data
>10381	Argument	1
>10382	PrimaryExpression	1
>10383	Argument	3
>10384	PrimaryExpression	3
>10385	Argument	1
>10386	PrimaryExpression	1
>10387	Argument	3
>10388	PrimaryExpression	3
>10389	Callee	matrix_diff
>10390	Identifier	matrix_diff
>10391	IdentifierDeclStatement	 
>10392	IdentifierDecl	ray2 [ 3 ]
>10393	PrimaryExpression	3
>10394	Identifier	ray2
>10395	IdentifierDeclType	double [ 3 ]
>10396	IdentifierDecl	ray1 [ 3 ]
>10397	PrimaryExpression	3
>10398	Identifier	ray1
>10399	IdentifierDeclType	double [ 3 ]
>10400	IdentifierDeclStatement	 
>10401	IdentifierDecl	p = m_image_data [ i2 ] . m_visible_points [ i ]
>10402	AssignmentExpr	p = m_image_data [ i2 ] . m_visible_points [ i ]
>10403	ArrayIndexing	m_image_data [ i2 ] . m_visible_points [ i ]
>10404	Identifier	i
>10405	MemberAccess	m_image_data [ i2 ] . m_visible_points
>10406	Identifier	m_visible_points
>10407	ArrayIndexing	m_image_data [ i2 ]
>10408	Identifier	i2
>10409	Identifier	m_image_data
>10410	Identifier	p
>10411	Identifier	p
>10412	IdentifierDeclType	int
>10413	IncDecOp	 
>10414	IncDec	++
>10415	Identifier	i
>10416	Condition	 
>10417	RelationalExpression	i < num_vis2
>10418	Identifier	num_vis2
>10419	Identifier	i
>10420	ForInit	 
>10421	IdentifierDeclStatement	unsigned int i = 0 ;
>10422	IdentifierDecl	i = 0
>10423	AssignmentExpr	i = 0
>10424	PrimaryExpression	0
>10425	Identifier	i
>10426	Identifier	i
>10427	IdentifierDeclType	unsigned int
>10428	ForStatement	for ( unsigned int i = 0 ; i < num_vis1 ; i ++ )
>10429	CompoundStatement	 
>10430	ExpressionStatement	 
>10431	AssignmentExpr	dist2_sum += dist2
>10432	Identifier	dist2
>10433	Identifier	dist2_sum
>10434	ExpressionStatement	 
>10435	AssignmentExpr	dist1_sum += dist1
>10436	Identifier	dist1
>10437	Identifier	dist1_sum
>10438	ExpressionStatement	 
>10439	AssignmentExpr	angle_sum += angle
>10440	Identifier	angle
>10441	Identifier	angle_sum
>10442	IdentifierDeclStatement	 
>10443	IdentifierDecl	angle = acos ( CLAMP ( dot / mag , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 ) )
>10444	AssignmentExpr	angle = acos ( CLAMP ( dot / mag , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 ) )
>10445	CallExpression	acos ( CLAMP ( dot / mag , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 ) )
>10446	ArgumentList	CLAMP ( dot / mag , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 )
>10447	Argument	CLAMP ( dot / mag , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 )
>10448	CallExpression	CLAMP ( dot / mag , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 )
>10449	ArgumentList	dot / mag
>10450	Argument	1.0 - 1.0e-8
>10451	AdditiveExpression	1.0 - 1.0e-8
>10452	PrimaryExpression	1.0e-8
>10453	PrimaryExpression	1.0
>10454	Argument	- 1.0 + 1.0e-8
>10455	AdditiveExpression	- 1.0 + 1.0e-8
>10456	PrimaryExpression	1.0e-8
>10457	UnaryOp	- 1.0
>10458	PrimaryExpression	1.0
>10459	UnaryOperator	-
>10460	Argument	dot / mag
>10461	MultiplicativeExpression	dot / mag
>10462	Identifier	mag
>10463	Identifier	dot
>10464	Callee	CLAMP
>10465	Identifier	CLAMP
>10466	Callee	acos
>10467	Identifier	acos
>10468	Identifier	angle
>10469	Identifier	angle
>10470	IdentifierDeclType	double
>10471	IdentifierDeclStatement	 
>10472	IdentifierDecl	mag = dist1 * dist2
>10473	AssignmentExpr	mag = dist1 * dist2
>10474	MultiplicativeExpression	dist1 * dist2
>10475	Identifier	dist2
>10476	Identifier	dist1
>10477	Identifier	mag
>10478	Identifier	mag
>10479	IdentifierDeclType	double
>10480	IdentifierDeclStatement	 
>10481	IdentifierDecl	dist2 = matrix_norm ( 3 , 1 , ray2 )
>10482	AssignmentExpr	dist2 = matrix_norm ( 3 , 1 , ray2 )
>10483	CallExpression	matrix_norm ( 3 , 1 , ray2 )
>10484	ArgumentList	3
>10485	Argument	ray2
>10486	Identifier	ray2
>10487	Argument	1
>10488	PrimaryExpression	1
>10489	Argument	3
>10490	PrimaryExpression	3
>10491	Callee	matrix_norm
>10492	Identifier	matrix_norm
>10493	Identifier	dist2
>10494	Identifier	dist2
>10495	IdentifierDeclType	double
>10496	IdentifierDeclStatement	 
>10497	IdentifierDecl	dist1 = matrix_norm ( 3 , 1 , ray1 )
>10498	AssignmentExpr	dist1 = matrix_norm ( 3 , 1 , ray1 )
>10499	CallExpression	matrix_norm ( 3 , 1 , ray1 )
>10500	ArgumentList	3
>10501	Argument	ray1
>10502	Identifier	ray1
>10503	Argument	1
>10504	PrimaryExpression	1
>10505	Argument	3
>10506	PrimaryExpression	3
>10507	Callee	matrix_norm
>10508	Identifier	matrix_norm
>10509	Identifier	dist1
>10510	Identifier	dist1
>10511	IdentifierDeclType	double
>10512	ExpressionStatement	 
>10513	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , ray1 , ray2 , & dot )
>10514	ArgumentList	1
>10515	Argument	& dot
>10516	UnaryOp	& dot
>10517	Identifier	dot
>10518	UnaryOperator	&
>10519	Argument	ray2
>10520	Identifier	ray2
>10521	Argument	ray1
>10522	Identifier	ray1
>10523	Argument	1
>10524	PrimaryExpression	1
>10525	Argument	3
>10526	PrimaryExpression	3
>10527	Argument	3
>10528	PrimaryExpression	3
>10529	Argument	1
>10530	PrimaryExpression	1
>10531	Callee	matrix_product
>10532	Identifier	matrix_product
>10533	IdentifierDeclStatement	 
>10534	IdentifierDecl	dot
>10535	Identifier	dot
>10536	IdentifierDeclType	double
>10537	ExpressionStatement	 
>10538	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , m_point_data [ p ] . m_pos , pos2 , ray2 )
>10539	ArgumentList	3
>10540	Argument	ray2
>10541	Identifier	ray2
>10542	Argument	pos2
>10543	Identifier	pos2
>10544	Argument	m_point_data [ p ] . m_pos
>10545	MemberAccess	m_point_data [ p ] . m_pos
>10546	Identifier	m_pos
>10547	ArrayIndexing	m_point_data [ p ]
>10548	Identifier	p
>10549	Identifier	m_point_data
>10550	Argument	1
>10551	PrimaryExpression	1
>10552	Argument	3
>10553	PrimaryExpression	3
>10554	Argument	1
>10555	PrimaryExpression	1
>10556	Argument	3
>10557	PrimaryExpression	3
>10558	Callee	matrix_diff
>10559	Identifier	matrix_diff
>10560	ExpressionStatement	 
>10561	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , m_point_data [ p ] . m_pos , pos1 , ray1 )
>10562	ArgumentList	3
>10563	Argument	ray1
>10564	Identifier	ray1
>10565	Argument	pos1
>10566	Identifier	pos1
>10567	Argument	m_point_data [ p ] . m_pos
>10568	MemberAccess	m_point_data [ p ] . m_pos
>10569	Identifier	m_pos
>10570	ArrayIndexing	m_point_data [ p ]
>10571	Identifier	p
>10572	Identifier	m_point_data
>10573	Argument	1
>10574	PrimaryExpression	1
>10575	Argument	3
>10576	PrimaryExpression	3
>10577	Argument	1
>10578	PrimaryExpression	1
>10579	Argument	3
>10580	PrimaryExpression	3
>10581	Callee	matrix_diff
>10582	Identifier	matrix_diff
>10583	IdentifierDeclStatement	 
>10584	IdentifierDecl	ray2 [ 3 ]
>10585	PrimaryExpression	3
>10586	Identifier	ray2
>10587	IdentifierDeclType	double [ 3 ]
>10588	IdentifierDecl	ray1 [ 3 ]
>10589	PrimaryExpression	3
>10590	Identifier	ray1
>10591	IdentifierDeclType	double [ 3 ]
>10592	IdentifierDeclStatement	 
>10593	IdentifierDecl	p = m_image_data [ i1 ] . m_visible_points [ i ]
>10594	AssignmentExpr	p = m_image_data [ i1 ] . m_visible_points [ i ]
>10595	ArrayIndexing	m_image_data [ i1 ] . m_visible_points [ i ]
>10596	Identifier	i
>10597	MemberAccess	m_image_data [ i1 ] . m_visible_points
>10598	Identifier	m_visible_points
>10599	ArrayIndexing	m_image_data [ i1 ]
>10600	Identifier	i1
>10601	Identifier	m_image_data
>10602	Identifier	p
>10603	Identifier	p
>10604	IdentifierDeclType	int
>10605	IncDecOp	 
>10606	IncDec	++
>10607	Identifier	i
>10608	Condition	 
>10609	RelationalExpression	i < num_vis1
>10610	Identifier	num_vis1
>10611	Identifier	i
>10612	ForInit	 
>10613	IdentifierDeclStatement	unsigned int i = 0 ;
>10614	IdentifierDecl	i = 0
>10615	AssignmentExpr	i = 0
>10616	PrimaryExpression	0
>10617	Identifier	i
>10618	Identifier	i
>10619	IdentifierDeclType	unsigned int
>10620	IdentifierDeclStatement	 
>10621	IdentifierDecl	dist2_sum = 0.0
>10622	AssignmentExpr	dist2_sum = 0.0
>10623	PrimaryExpression	0.0
>10624	Identifier	dist2_sum
>10625	Identifier	dist2_sum
>10626	IdentifierDeclType	double
>10627	IdentifierDecl	dist1_sum = 0.0
>10628	AssignmentExpr	dist1_sum = 0.0
>10629	PrimaryExpression	0.0
>10630	Identifier	dist1_sum
>10631	Identifier	dist1_sum
>10632	IdentifierDeclType	double
>10633	IdentifierDecl	angle_sum = 0.0
>10634	AssignmentExpr	angle_sum = 0.0
>10635	PrimaryExpression	0.0
>10636	Identifier	angle_sum
>10637	Identifier	angle_sum
>10638	IdentifierDeclType	double
>10639	ExpressionStatement	 
>10640	CallExpression	assert ( num_vis1 + num_vis2 != 0 )
>10641	ArgumentList	num_vis1 + num_vis2 != 0
>10642	Argument	num_vis1 + num_vis2 != 0
>10643	EqualityExpression	num_vis1 + num_vis2 != 0
>10644	PrimaryExpression	0
>10645	AdditiveExpression	num_vis1 + num_vis2
>10646	Identifier	num_vis2
>10647	Identifier	num_vis1
>10648	Callee	assert
>10649	Identifier	assert
>10650	IdentifierDeclStatement	 
>10651	IdentifierDecl	num_vis2 = m_image_data [ i2 ] . m_visible_points . size ( )
>10652	AssignmentExpr	num_vis2 = m_image_data [ i2 ] . m_visible_points . size ( )
>10653	CallExpression	m_image_data [ i2 ] . m_visible_points . size ( )
>10654	ArgumentList	 
>10655	Callee	m_image_data [ i2 ] . m_visible_points . size
>10656	MemberAccess	m_image_data [ i2 ] . m_visible_points . size
>10657	Identifier	size
>10658	MemberAccess	m_image_data [ i2 ] . m_visible_points
>10659	Identifier	m_visible_points
>10660	ArrayIndexing	m_image_data [ i2 ]
>10661	Identifier	i2
>10662	Identifier	m_image_data
>10663	Identifier	num_vis2
>10664	Identifier	num_vis2
>10665	IdentifierDeclType	unsigned int
>10666	IdentifierDeclStatement	 
>10667	IdentifierDecl	num_vis1 = m_image_data [ i1 ] . m_visible_points . size ( )
>10668	AssignmentExpr	num_vis1 = m_image_data [ i1 ] . m_visible_points . size ( )
>10669	CallExpression	m_image_data [ i1 ] . m_visible_points . size ( )
>10670	ArgumentList	 
>10671	Callee	m_image_data [ i1 ] . m_visible_points . size
>10672	MemberAccess	m_image_data [ i1 ] . m_visible_points . size
>10673	Identifier	size
>10674	MemberAccess	m_image_data [ i1 ] . m_visible_points
>10675	Identifier	m_visible_points
>10676	ArrayIndexing	m_image_data [ i1 ]
>10677	Identifier	i1
>10678	Identifier	m_image_data
>10679	Identifier	num_vis1
>10680	Identifier	num_vis1
>10681	IdentifierDeclType	unsigned int
>10682	IfStatement	if ( isect . size ( ) == 0 )
>10683	ReturnStatement	 
>10684	Identifier	false
>10685	Condition	 
>10686	EqualityExpression	isect . size ( ) == 0
>10687	PrimaryExpression	0
>10688	CallExpression	isect . size ( )
>10689	ArgumentList	 
>10690	Callee	isect . size
>10691	MemberAccess	isect . size
>10692	Identifier	size
>10693	Identifier	isect
>10694	IdentifierDeclStatement	 
>10695	IdentifierDecl	isect = GetVectorIntersection ( m_image_data [ i1 ] . m_visible_points , m_image_data [ i2 ] . m_visible_points )
>10696	AssignmentExpr	isect = GetVectorIntersection ( m_image_data [ i1 ] . m_visible_points , m_image_data [ i2 ] . m_visible_\
>10697	CallExpression	GetVectorIntersection ( m_image_data [ i1 ] . m_visible_points , m_image_data [ i2 ] . m_visible_points )
>10698	ArgumentList	m_image_data [ i1 ] . m_visible_points
>10699	Argument	m_image_data [ i2 ] . m_visible_points
>10700	MemberAccess	m_image_data [ i2 ] . m_visible_points
>10701	Identifier	m_visible_points
>10702	ArrayIndexing	m_image_data [ i2 ]
>10703	Identifier	i2
>10704	Identifier	m_image_data
>10705	Argument	m_image_data [ i1 ] . m_visible_points
>10706	MemberAccess	m_image_data [ i1 ] . m_visible_points
>10707	Identifier	m_visible_points
>10708	ArrayIndexing	m_image_data [ i1 ]
>10709	Identifier	i1
>10710	Identifier	m_image_data
>10711	Callee	GetVectorIntersection
>10712	Identifier	GetVectorIntersection
>10713	Identifier	isect
>10714	Identifier	isect
>10715	IdentifierDeclType	std 
>10716	ExpressionStatement	 
>10717	CallExpression	m_image_data [ i2 ] . m_camera . GetPosition ( pos2 )
>10718	ArgumentList	pos2
>10719	Argument	pos2
>10720	Identifier	pos2
>10721	Callee	m_image_data [ i2 ] . m_camera . GetPosition
>10722	MemberAccess	m_image_data [ i2 ] . m_camera . GetPosition
>10723	Identifier	GetPosition
>10724	MemberAccess	m_image_data [ i2 ] . m_camera
>10725	Identifier	m_camera
>10726	ArrayIndexing	m_image_data [ i2 ]
>10727	Identifier	i2
>10728	Identifier	m_image_data
>10729	ExpressionStatement	 
>10730	CallExpression	m_image_data [ i1 ] . m_camera . GetPosition ( pos1 )
>10731	ArgumentList	pos1
>10732	Argument	pos1
>10733	Identifier	pos1
>10734	Callee	m_image_data [ i1 ] . m_camera . GetPosition
>10735	MemberAccess	m_image_data [ i1 ] . m_camera . GetPosition
>10736	Identifier	GetPosition
>10737	MemberAccess	m_image_data [ i1 ] . m_camera
>10738	Identifier	m_camera
>10739	ArrayIndexing	m_image_data [ i1 ]
>10740	Identifier	i1
>10741	Identifier	m_image_data
>10742	IdentifierDeclStatement	 
>10743	IdentifierDecl	pos2 [ 3 ]
>10744	PrimaryExpression	3
>10745	Identifier	pos2
>10746	IdentifierDeclType	double [ 3 ]
>10747	IdentifierDecl	pos1 [ 3 ]
>10748	PrimaryExpression	3
>10749	Identifier	pos1
>10750	IdentifierDeclType	double [ 3 ]
>10751	IfStatement	if ( ! m_image_data [ i1 ] . m_camera . m_adjusted || ! m_image_data [ i2 ] . m_camera . m_adjusted )
>10752	ReturnStatement	 
>10753	Identifier	false
>10754	Condition	 
>10755	OrExpression	! m_image_data [ i1 ] . m_camera . m_adjusted || ! m_image_data [ i2 ] . m_camera . m_adjusted
>10756	UnaryOp	! m_image_data [ i2 ] . m_camera . m_adjusted
>10757	MemberAccess	m_image_data [ i2 ] . m_camera . m_adjusted
>10758	Identifier	m_adjusted
>10759	MemberAccess	m_image_data [ i2 ] . m_camera
>10760	Identifier	m_camera
>10761	ArrayIndexing	m_image_data [ i2 ]
>10762	Identifier	i2
>10763	Identifier	m_image_data
>10764	UnaryOperator	!
>10765	UnaryOp	! m_image_data [ i1 ] . m_camera . m_adjusted
>10766	MemberAccess	m_image_data [ i1 ] . m_camera . m_adjusted
>10767	Identifier	m_adjusted
>10768	MemberAccess	m_image_data [ i1 ] . m_camera
>10769	Identifier	m_camera
>10770	ArrayIndexing	m_image_data [ i1 ]
>10771	Identifier	i1
>10772	Identifier	m_image_data
>10773	UnaryOperator	!
<3=9,8,4
<4=5
<5=7,6
<9=202,185,181,164,146,139,35,28,19,12,10
<10=11
<12=13
<13=17,14
<14=15
<15=16
<17=18
<19=20
<20=26,21
<21=24,22
<22=23
<24=25
<26=27
<28=29
<29=33,30
<30=31
<31=32
<33=34
<35=131,127,124,36
<36=117,100,96,37
<37=88,84,81,38
<38=74,57,48,39
<39=40
<40=46,41
<41=44,42
<42=43
<44=45
<46=47
<48=49
<49=55,50
<50=53,51
<51=52
<53=54
<55=56
<57=58
<58=72,59
<59=68,64,62,60
<60=61
<62=63
<64=65
<65=67,66
<68=69
<69=71,70
<72=73
<74=75
<75=80,79,76
<76=78,77
<81=83,82
<84=85
<85=87,86
<88=89
<89=90
<90=95,94,91
<91=93,92
<96=97
<97=99,98
<100=101
<101=115,102
<102=111,107,105,103
<103=104
<105=106
<107=108
<108=110,109
<111=112
<112=114,113
<115=116
<117=118
<118=123,122,119
<119=121,120
<124=126,125
<127=128
<128=130,129
<131=132
<132=133
<133=138,137,134
<134=136,135
<139=140
<140=145,144,141
<141=143,142
<146=157,147
<147=150,148
<148=149
<150=151
<151=155,152
<152=153
<153=154
<155=156
<157=158
<158=163,159
<159=161,160
<161=162
<164=165
<165=179,166
<166=175,171,169,167
<167=168
<169=170
<171=172
<172=174,173
<175=176
<176=178,177
<179=180
<181=182
<182=184,183
<185=198,186
<186=189,187
<187=188
<189=190
<190=196,191
<191=194,192
<192=193
<194=195
<196=197
<198=199
<199=201,200
<202=203
<203=215,214,204
<204=213,205
<205=211,206
<206=209,207
<207=208
<209=210
<211=212
<235=241,240,236
<236=237
<237=239,238
<241=407,391,381,364,249,242
<242=243
<243=247,244
<244=245
<245=246
<247=248
<249=356,352,349,250
<250=335,321,304,300,251
<251=291,282,279,252
<252=270,253
<253=254
<254=268,255
<255=264,260,258,256
<256=257
<258=259
<260=261
<261=263,262
<264=265
<265=267,266
<268=269
<270=271
<271=278,277,272
<272=276,273
<273=275,274
<279=281,280
<282=283
<283=290,284
<284=286,285
<286=287
<287=289,288
<291=292
<292=299,293
<293=295,294
<295=296
<296=298,297
<300=301
<301=303,302
<304=305
<305=319,306
<306=315,311,309,307
<307=308
<309=310
<311=312
<312=314,313
<315=316
<316=318,317
<319=320
<321=322
<322=334,333,323
<323=332,324
<324=331,325
<325=327,326
<327=328
<328=330,329
<335=336
<336=348,347,337
<337=346,338
<338=342,339
<339=340
<340=341
<342=343
<343=345,344
<349=351,350
<352=353
<353=355,354
<356=357
<357=358
<358=363,362,359
<359=361,360
<364=365
<365=379,366
<366=375,371,369,367
<367=368
<369=370
<371=372
<372=374,373
<375=376
<376=378,377
<379=380
<381=382
<382=390,389,383
<383=388,384
<384=386,385
<386=387
<391=403,392
<392=394,393
<394=395
<395=401,396
<396=399,397
<397=398
<399=400
<401=402
<403=404
<404=406,405
<407=408
<408=420,419,409
<409=418,410
<410=416,411
<411=414,412
<412=413
<414=415
<416=417
<444=450,449,445
<445=446
<446=448,447
<450=1212,1208,1195,1179,1137,1130,1125,1121,1108,939,932,919,910,903,893,886,690,680,665,458,451
<451=452
<452=456,453
<453=454
<454=455
<456=457
<458=656,459
<459=649,638,491,484,477,476,475,474,473,472,471,470,469,468,467,466,465,464,463,462,461,460
<477=478
<478=483,479
<479=481,480
<481=482
<484=485
<485=489,486
<486=487
<487=488
<489=490
<491=630,626,623,492
<492=600,591,584,493
<493=573,562,559,494
<494=550,495
<495=544,533,530,496
<496=521,497
<497=517,498
<498=508,499
<499=500
<500=506,501
<501=504,502
<502=503
<504=505
<506=507
<508=509
<509=515,510
<510=513,511
<511=512
<513=514
<515=516
<517=518
<518=520,519
<521=522
<522=529,528,523
<523=527,524
<524=526,525
<530=532,531
<533=534
<534=543,535
<535=537,536
<537=538
<538=540,539
<540=542,541
<544=545
<545=549,546
<546=548,547
<550=551
<551=558,557,552
<552=556,553
<553=555,554
<559=561,560
<562=563
<563=572,564
<564=566,565
<566=567
<567=569,568
<569=571,570
<573=574
<574=583,575
<575=577,576
<577=578
<578=580,579
<580=582,581
<584=588,585
<585=587,586
<588=590,589
<591=592
<592=599,598,593
<593=597,594
<594=596,595
<600=617,601
<601=616,615,614,613,612,611,610,609,602
<602=603
<603=607,604
<604=605
<605=606
<607=608
<617=618
<618=620,619
<620=622,621
<623=625,624
<626=627
<627=629,628
<630=631
<631=632
<632=637,636,633
<633=635,634
<638=639
<639=648,640
<640=647,641
<641=643,642
<643=644
<644=646,645
<649=650
<650=655,651
<651=653,652
<653=654
<656=657
<657=664,658
<658=662,659
<659=660
<660=661
<662=663
<665=666
<666=678,667
<667=676,668
<668=669
<669=671,670
<671=675,672
<672=674,673
<676=677
<678=679
<680=681
<681=689,688,682
<682=687,683
<683=685,684
<685=686
<690=878,874,871,691
<691=867,858,842,836,830,774,705,696,692
<692=693
<693=695,694
<696=697
<697=701,698
<698=699
<699=700
<701=702
<702=704,703
<705=766,762,759,706
<706=746,733,720,707
<707=708
<708=712,709
<709=710
<710=711
<712=713
<713=715,714
<715=717,716
<717=719,718
<720=721
<721=725,722
<722=723
<723=724
<725=726
<726=728,727
<728=730,729
<730=732,731
<733=734
<734=745,744,735
<735=743,736
<736=738,737
<738=740,739
<740=742,741
<746=747
<747=758,757,748
<748=756,749
<749=751,750
<751=753,752
<753=755,754
<759=761,760
<762=763
<763=765,764
<766=767
<767=768
<768=773,772,769
<769=771,770
<774=822,818,815,775
<775=802,789,776
<776=777
<777=779,778
<779=781,780
<781=787,782
<782=785,783
<783=784
<785=786
<787=788
<789=790
<790=801,800,791
<791=799,792
<792=794,793
<794=796,795
<796=798,797
<802=803
<803=814,813,804
<804=812,805
<805=807,806
<807=809,808
<809=811,810
<815=817,816
<818=819
<819=821,820
<822=823
<823=824
<824=829,828,825
<825=827,826
<830=832,831
<832=833
<833=835,834
<836=838,837
<838=839
<839=841,840
<842=843
<843=857,856,844
<844=855,845
<845=854,846
<846=848,847
<848=849
<849=851,850
<851=853,852
<858=859
<859=863,860
<860=861
<861=862
<863=864
<864=866,865
<867=868
<868=870,869
<871=873,872
<874=875
<875=877,876
<878=879
<879=880
<880=885,884,881
<881=883,882
<886=887
<887=892,891,888
<888=890,889
<893=894
<894=902,901,895
<895=900,896
<896=898,897
<898=899
<903=904
<904=906,905
<906=907
<907=909,908
<910=911
<911=917,912
<912=915,913
<913=914
<915=916
<917=918
<919=920
<920=930,921
<921=928,926,922
<922=923
<923=925,924
<926=927
<928=929
<930=931
<932=933
<933=938,937,934
<934=936,935
<939=1100,1096,1093,940
<940=1086,1069,1055,1046,1037,1026,1022,1009,941
<941=1001,997,994,942
<942=987,970,966,960,954,943
<943=944
<944=948,945
<945=946
<946=947
<948=949
<949=951,950
<951=953,952
<954=955
<955=957,956
<957=959,958
<960=961
<961=963,962
<963=965,964
<966=967
<967=969,968
<970=971
<971=985,972
<972=983,981,977,973
<973=974
<974=976,975
<977=978
<978=980,979
<981=982
<983=984
<985=986
<987=991,988
<988=990,989
<991=993,992
<994=996,995
<997=998
<998=1000,999
<1001=1002
<1002=1003
<1003=1008,1007,1004
<1004=1006,1005
<1009=1010
<1010=1020,1011
<1011=1018,1016,1012
<1012=1013
<1013=1015,1014
<1016=1017
<1018=1019
<1020=1021
<1022=1023
<1023=1025,1024
<1026=1027
<1027=1031,1028
<1028=1029
<1029=1030
<1031=1032
<1032=1034,1033
<1034=1036,1035
<1037=1038
<1038=1043,1039
<1039=1041,1040
<1041=1042
<1043=1045,1044
<1046=1047
<1047=1053,1048
<1048=1051,1049
<1049=1050
<1051=1052
<1053=1054
<1055=1056
<1056=1068,1067,1057
<1057=1066,1058
<1058=1064,1059
<1059=1062,1060
<1060=1061
<1062=1063
<1064=1065
<1069=1070
<1070=1084,1071
<1071=1082,1080,1076,1072
<1072=1073
<1073=1075,1074
<1076=1077
<1077=1079,1078
<1080=1081
<1082=1083
<1084=1085
<1086=1090,1087
<1087=1089,1088
<1090=1092,1091
<1093=1095,1094
<1096=1097
<1097=1099,1098
<1100=1101
<1101=1102
<1102=1107,1106,1103
<1103=1105,1104
<1108=1109
<1109=1119,1110
<1110=1117,1115,1111
<1111=1112
<1112=1114,1113
<1115=1116
<1117=1118
<1119=1120
<1121=1122
<1122=1124,1123
<1125=1126
<1126=1128,1127
<1128=1129
<1130=1131
<1131=1133,1132
<1133=1134
<1134=1136,1135
<1137=1175,1138
<1138=1174,1173,1172,1171,1170,1169,1168,1167,1166,1165,1164,1139
<1139=1156,1150,1147,1140
<1140=1141
<1141=1142
<1142=1144,1143
<1144=1146,1145
<1147=1149,1148
<1150=1151
<1151=1155,1152
<1152=1154,1153
<1156=1157
<1157=1158
<1158=1163,1162,1159
<1159=1161,1160
<1175=1176
<1176=1178,1177
<1179=1188,1180
<1180=1187,1186,1185,1184,1183,1182,1181
<1188=1189
<1189=1194,1190
<1190=1192,1191
<1192=1193
<1195=1196
<1196=1206,1197
<1197=1204,1202,1198
<1198=1199
<1199=1201,1200
<1202=1203
<1204=1205
<1206=1207
<1208=1209
<1209=1211,1210
<1212=1213
<1213=1225,1224,1214
<1214=1223,1215
<1215=1221,1216
<1216=1219,1217
<1217=1218
<1219=1220
<1221=1222
<1303=1309,1308,1304
<1304=1305
<1305=1307,1306
<1309=1781,1765,1755,1744,1737,1609,1600,1589,1370,1356,1345,1317,1310
<1310=1311
<1311=1315,1312
<1312=1313
<1313=1314
<1315=1316
<1317=1337,1333,1330,1318
<1318=1319
<1319=1320
<1320=1324,1321
<1321=1322
<1322=1323
<1324=1325
<1325=1327,1326
<1327=1329,1328
<1330=1332,1331
<1333=1334
<1334=1336,1335
<1337=1338
<1338=1339
<1339=1344,1343,1340
<1340=1342,1341
<1345=1346
<1346=1354,1347
<1347=1352,1350,1348
<1348=1349
<1350=1351
<1352=1353
<1354=1355
<1356=1357
<1357=1369,1368,1358
<1358=1367,1359
<1359=1366,1360
<1360=1362,1361
<1362=1363
<1363=1365,1364
<1370=1581,1577,1574,1371
<1371=1560,1556,1372
<1372=1547,1538,1535,1373
<1373=1526,1512,1374
<1374=1496,1375
<1375=1483,1456,1445,1429,1418,1376
<1376=1410,1406,1403,1377
<1377=1378
<1378=1379
<1379=1401,1380
<1380=1399,1397,1389,1381
<1381=1382
<1382=1384,1383
<1384=1386,1385
<1386=1388,1387
<1389=1390
<1390=1392,1391
<1392=1394,1393
<1394=1396,1395
<1397=1398
<1399=1400
<1401=1402
<1403=1405,1404
<1406=1407
<1407=1409,1408
<1410=1411
<1411=1412
<1412=1417,1416,1413
<1413=1415,1414
<1418=1419
<1419=1427,1420
<1420=1425,1423,1421
<1421=1422
<1423=1424
<1425=1426
<1427=1428
<1429=1430
<1430=1444,1443,1431
<1431=1442,1432
<1432=1441,1433
<1433=1435,1434
<1435=1436
<1436=1438,1437
<1438=1440,1439
<1445=1446
<1446=1450,1447
<1447=1448
<1448=1449
<1450=1451
<1451=1453,1452
<1453=1455,1454
<1456=1467,1457
<1457=1458
<1458=1459
<1459=1464,1460
<1460=1462,1461
<1462=1463
<1464=1466,1465
<1467=1468
<1468=1475,1469
<1469=1471,1470
<1471=1472
<1472=1474,1473
<1475=1479,1476
<1476=1477
<1477=1478
<1479=1480
<1480=1482,1481
<1483=1484
<1484=1494,1485
<1485=1492,1490,1488,1486
<1486=1487
<1488=1489
<1490=1491
<1492=1493
<1494=1495
<1496=1497
<1497=1504,1498
<1498=1500,1499
<1500=1501
<1501=1503,1502
<1504=1508,1505
<1505=1506
<1506=1507
<1508=1509
<1509=1511,1510
<1512=1513
<1513=1525,1524,1514
<1514=1523,1515
<1515=1521,1516
<1516=1519,1517
<1517=1518
<1519=1520
<1521=1522
<1526=1527
<1527=1534,1533,1528
<1528=1532,1529
<1529=1531,1530
<1535=1537,1536
<1538=1539
<1539=1546,1540
<1540=1542,1541
<1542=1543
<1543=1545,1544
<1547=1548
<1548=1555,1549
<1549=1551,1550
<1551=1552
<1552=1554,1553
<1556=1557
<1557=1559,1558
<1560=1561
<1561=1573,1572,1562
<1562=1571,1563
<1563=1567,1564
<1564=1565
<1565=1566
<1567=1568
<1568=1570,1569
<1574=1576,1575
<1577=1578
<1578=1580,1579
<1581=1582
<1582=1583
<1583=1588,1587,1584
<1584=1586,1585
<1589=1590
<1590=1598,1591
<1591=1596,1594,1592
<1592=1593
<1594=1595
<1596=1597
<1598=1599
<1600=1601
<1601=1607,1602
<1602=1605,1603
<1603=1604
<1605=1606
<1607=1608
<1609=1729,1725,1722,1610
<1610=1708,1694,1683,1679,1611
<1611=1670,1661,1658,1612
<1612=1649,1635,1613
<1613=1619,1614
<1614=1615
<1615=1616
<1616=1618,1617
<1619=1620
<1620=1627,1621
<1621=1623,1622
<1623=1624
<1624=1626,1625
<1627=1631,1628
<1628=1629
<1629=1630
<1631=1632
<1632=1634,1633
<1635=1636
<1636=1648,1647,1637
<1637=1646,1638
<1638=1644,1639
<1639=1642,1640
<1640=1641
<1642=1643
<1644=1645
<1649=1650
<1650=1657,1656,1651
<1651=1655,1652
<1652=1654,1653
<1658=1660,1659
<1661=1662
<1662=1669,1663
<1663=1665,1664
<1665=1666
<1666=1668,1667
<1670=1671
<1671=1678,1672
<1672=1674,1673
<1674=1675
<1675=1677,1676
<1679=1680
<1680=1682,1681
<1683=1684
<1684=1692,1685
<1685=1690,1688,1686
<1686=1687
<1688=1689
<1690=1691
<1692=1693
<1694=1695
<1695=1707,1706,1696
<1696=1705,1697
<1697=1704,1698
<1698=1700,1699
<1700=1701
<1701=1703,1702
<1708=1709
<1709=1721,1720,1710
<1710=1719,1711
<1711=1715,1712
<1712=1713
<1713=1714
<1715=1716
<1716=1718,1717
<1722=1724,1723
<1725=1726
<1726=1728,1727
<1729=1730
<1730=1731
<1731=1736,1735,1732
<1732=1734,1733
<1737=1738
<1738=1743,1742,1739
<1739=1741,1740
<1744=1745
<1745=1753,1746
<1746=1751,1749,1747
<1747=1748
<1749=1750
<1751=1752
<1753=1754
<1755=1756
<1756=1764,1763,1757
<1757=1762,1758
<1758=1760,1759
<1760=1761
<1765=1777,1766
<1766=1768,1767
<1768=1769
<1769=1775,1770
<1770=1773,1771
<1771=1772
<1773=1774
<1775=1776
<1777=1778
<1778=1780,1779
<1781=1782
<1782=1794,1793,1783
<1783=1792,1784
<1784=1790,1785
<1785=1788,1786
<1786=1787
<1788=1789
<1790=1791
<1840=1846,1845,1841
<1841=1842
<1842=1844,1843
<1846=2022,2006,1996,1982,1969,1854,1847
<1847=1848
<1848=1852,1849
<1849=1850
<1850=1851
<1852=1853
<1854=1961,1957,1954,1855
<1855=1936,1925,1865,1856
<1856=1857
<1857=1863,1858
<1858=1861,1859
<1859=1860
<1861=1862
<1863=1864
<1865=1917,1913,1910,1866
<1866=1895,1880,1867
<1867=1868
<1868=1878,1869
<1869=1876,1874,1872,1870
<1870=1871
<1872=1873
<1874=1875
<1876=1877
<1878=1879
<1880=1881
<1881=1894,1893,1882
<1882=1892,1883
<1883=1885,1884
<1885=1887,1886
<1887=1889,1888
<1889=1891,1890
<1895=1896
<1896=1909,1908,1897
<1897=1907,1898
<1898=1900,1899
<1900=1902,1901
<1902=1904,1903
<1904=1906,1905
<1910=1912,1911
<1913=1914
<1914=1916,1915
<1917=1918
<1918=1919
<1919=1924,1923,1920
<1920=1922,1921
<1925=1926
<1926=1934,1927
<1927=1932,1930,1928
<1928=1929
<1930=1931
<1932=1933
<1934=1935
<1936=1937
<1937=1953,1952,1938
<1938=1951,1939
<1939=1950,1940
<1940=1942,1941
<1942=1943
<1943=1945,1944
<1945=1947,1946
<1947=1949,1948
<1954=1956,1955
<1957=1958
<1958=1960,1959
<1961=1962
<1962=1963
<1963=1968,1967,1964
<1964=1966,1965
<1969=1970
<1970=1980,1971
<1971=1978,1976,1974,1972
<1972=1973
<1974=1975
<1976=1977
<1978=1979
<1980=1981
<1982=1983
<1983=1995,1994,1984
<1984=1993,1985
<1985=1992,1986
<1986=1988,1987
<1988=1989
<1989=1991,1990
<1996=1997
<1997=2005,2004,1998
<1998=2003,1999
<1999=2001,2000
<2001=2002
<2006=2018,2007
<2007=2009,2008
<2009=2010
<2010=2016,2011
<2011=2014,2012
<2012=2013
<2014=2015
<2016=2017
<2018=2019
<2019=2021,2020
<2022=2023
<2023=2035,2034,2024
<2024=2033,2025
<2025=2031,2026
<2026=2029,2027
<2027=2028
<2029=2030
<2031=2032
<2063=2069,2068,2064
<2064=2065
<2065=2067,2066
<2069=2387,2371,2361,2347,2310,2297,2077,2070
<2070=2071
<2071=2075,2072
<2072=2073
<2073=2074
<2075=2076
<2077=2289,2285,2282,2078
<2078=2264,2257,2209,2203,2192,2088,2079
<2079=2080
<2080=2086,2081
<2081=2084,2082
<2082=2083
<2084=2085
<2086=2087
<2088=2184,2180,2177,2089
<2089=2162,2147,2135,2120,2105,2090
<2090=2091
<2091=2103,2092
<2092=2101,2099,2097,2095,2093
<2093=2094
<2095=2096
<2097=2098
<2099=2100
<2101=2102
<2103=2104
<2105=2106
<2106=2119,2118,2107
<2107=2117,2108
<2108=2110,2109
<2110=2112,2111
<2112=2114,2113
<2114=2116,2115
<2120=2121
<2121=2134,2133,2122
<2122=2132,2123
<2123=2125,2124
<2125=2127,2126
<2127=2129,2128
<2129=2131,2130
<2135=2137,2136
<2137=2138
<2138=2146,2139
<2139=2141,2140
<2141=2143,2142
<2143=2145,2144
<2147=2148
<2148=2161,2160,2149
<2149=2159,2150
<2150=2152,2151
<2152=2154,2153
<2154=2156,2155
<2156=2158,2157
<2162=2163
<2163=2176,2175,2164
<2164=2174,2165
<2165=2167,2166
<2167=2169,2168
<2169=2171,2170
<2171=2173,2172
<2177=2179,2178
<2180=2181
<2181=2183,2182
<2184=2185
<2185=2186
<2186=2191,2190,2187
<2187=2189,2188
<2192=2193
<2193=2201,2194
<2194=2199,2197,2195
<2195=2196
<2197=2198
<2199=2200
<2201=2202
<2203=2205,2204
<2205=2206
<2206=2208,2207
<2209=2249,2245,2242,2210
<2210=2227,2215,2211
<2211=2212
<2212=2214,2213
<2215=2217,2216
<2217=2218
<2218=2226,2219
<2219=2221,2220
<2221=2223,2222
<2223=2225,2224
<2227=2228
<2228=2241,2240,2229
<2229=2239,2230
<2230=2232,2231
<2232=2234,2233
<2234=2236,2235
<2236=2238,2237
<2242=2244,2243
<2245=2246
<2246=2248,2247
<2249=2250
<2250=2251
<2251=2256,2255,2252
<2252=2254,2253
<2257=2258
<2258=2263,2262,2259
<2259=2261,2260
<2264=2265
<2265=2281,2280,2266
<2266=2279,2267
<2267=2278,2268
<2268=2270,2269
<2270=2271
<2271=2273,2272
<2273=2275,2274
<2275=2277,2276
<2282=2284,2283
<2285=2286
<2286=2288,2287
<2289=2290
<2290=2291
<2291=2296,2295,2292
<2292=2294,2293
<2297=2298
<2298=2308,2299
<2299=2306,2304,2302,2300
<2300=2301
<2302=2303
<2304=2305
<2306=2307
<2308=2309
<2310=2339,2335,2332,2311
<2311=2312
<2312=2324,2313
<2313=2314
<2314=2318,2315
<2315=2316
<2316=2317
<2318=2319
<2319=2321,2320
<2321=2323,2322
<2324=2325
<2325=2327,2326
<2327=2329,2328
<2329=2331,2330
<2332=2334,2333
<2335=2336
<2336=2338,2337
<2339=2340
<2340=2341
<2341=2346,2345,2342
<2342=2344,2343
<2347=2348
<2348=2360,2359,2349
<2349=2358,2350
<2350=2357,2351
<2351=2353,2352
<2353=2354
<2354=2356,2355
<2361=2362
<2362=2370,2369,2363
<2363=2368,2364
<2364=2366,2365
<2366=2367
<2371=2383,2372
<2372=2374,2373
<2374=2375
<2375=2381,2376
<2376=2379,2377
<2377=2378
<2379=2380
<2381=2382
<2383=2384
<2384=2386,2385
<2387=2388
<2388=2400,2399,2389
<2389=2398,2390
<2390=2396,2391
<2391=2394,2392
<2392=2393
<2394=2395
<2396=2397
<2446=2452,2451,2447
<2447=2448
<2448=2450,2449
<2452=2612,2584,2570,2453
<2453=2562,2558,2555,2454
<2454=2546,2530,2524,2455
<2455=2516,2512,2509,2456
<2456=2496,2483,2470,2457
<2457=2458
<2458=2462,2459
<2459=2460
<2460=2461
<2462=2463
<2463=2465,2464
<2465=2467,2466
<2467=2469,2468
<2470=2471
<2471=2475,2472
<2472=2473
<2473=2474
<2475=2476
<2476=2478,2477
<2478=2480,2479
<2480=2482,2481
<2483=2484
<2484=2495,2494,2485
<2485=2493,2486
<2486=2488,2487
<2488=2490,2489
<2490=2492,2491
<2496=2497
<2497=2508,2507,2498
<2498=2506,2499
<2499=2501,2500
<2501=2503,2502
<2503=2505,2504
<2509=2511,2510
<2512=2513
<2513=2515,2514
<2516=2517
<2517=2518
<2518=2523,2522,2519
<2519=2521,2520
<2524=2526,2525
<2526=2527
<2527=2529,2528
<2530=2531
<2531=2545,2544,2532
<2532=2543,2533
<2533=2542,2534
<2534=2536,2535
<2536=2537
<2537=2539,2538
<2539=2541,2540
<2546=2547
<2547=2554,2553,2548
<2548=2552,2549
<2549=2551,2550
<2555=2557,2556
<2558=2559
<2559=2561,2560
<2562=2563
<2563=2564
<2564=2569,2568,2565
<2565=2567,2566
<2570=2571
<2571=2583,2582,2572
<2572=2581,2573
<2573=2580,2574
<2574=2576,2575
<2576=2577
<2577=2579,2578
<2584=2604,2600,2597,2585
<2585=2586
<2586=2587
<2587=2589,2588
<2589=2590
<2590=2592,2591
<2592=2594,2593
<2594=2596,2595
<2597=2599,2598
<2600=2601
<2601=2603,2602
<2604=2605
<2605=2606
<2606=2611,2610,2607
<2607=2609,2608
<2612=2613
<2613=2621,2620,2614
<2614=2619,2615
<2615=2617,2616
<2617=2618
<2652=2655,2654,2653
<2655=2752,2742,2705,2691,2656
<2656=2683,2679,2676,2657
<2657=2658
<2658=2659
<2659=2669,2660
<2660=2668,2661
<2661=2663,2662
<2663=2665,2664
<2665=2667,2666
<2669=2671,2670
<2671=2673,2672
<2673=2675,2674
<2676=2678,2677
<2679=2680
<2680=2682,2681
<2683=2684
<2684=2685
<2685=2690,2689,2686
<2686=2688,2687
<2691=2692
<2692=2704,2703,2693
<2693=2702,2694
<2694=2701,2695
<2695=2697,2696
<2697=2698
<2698=2700,2699
<2705=2734,2730,2727,2706
<2706=2707
<2707=2719,2708
<2708=2709
<2709=2711,2710
<2711=2712
<2712=2714,2713
<2714=2716,2715
<2716=2718,2717
<2719=2720
<2720=2722,2721
<2722=2724,2723
<2724=2726,2725
<2727=2729,2728
<2730=2731
<2731=2733,2732
<2734=2735
<2735=2736
<2736=2741,2740,2737
<2737=2739,2738
<2742=2743
<2743=2751,2750,2744
<2744=2749,2745
<2745=2747,2746
<2747=2748
<2752=2753
<2753=2757,2754
<2754=2755
<2755=2756
<2757=2758
<2778=2781,2780,2779
<2781=3025,3010,3000,2782
<2782=2992,2988,2985,2783
<2783=2973,2968,2955,2945,2935,2930,2911,2904,2883,2862,2858,2792,2784
<2784=2785
<2785=2787,2786
<2787=2789,2788
<2789=2791,2790
<2792=2844,2819,2793
<2793=2794
<2794=2795
<2795=2815,2810,2796
<2796=2797
<2797=2809,2808,2807,2806,2805,2804,2803,2802,2798
<2798=2799
<2799=2801,2800
<2810=2811
<2811=2812
<2812=2814,2813
<2815=2816
<2816=2818,2817
<2819=2843,2842,2841,2840,2839,2838,2837,2836,2820
<2820=2832,2827,2821
<2821=2822
<2822=2823
<2823=2824
<2824=2826,2825
<2827=2828
<2828=2829
<2829=2831,2830
<2832=2833
<2833=2835,2834
<2844=2845
<2845=2852,2846
<2846=2850,2847
<2847=2848
<2848=2849
<2850=2851
<2852=2856,2853
<2853=2854
<2854=2855
<2856=2857
<2858=2859
<2859=2861,2860
<2862=2863
<2863=2881,2864
<2864=2879,2877,2875,2873,2871,2869,2865
<2865=2866
<2866=2868,2867
<2869=2870
<2871=2872
<2873=2874
<2875=2876
<2877=2878
<2879=2880
<2881=2882
<2883=2884
<2884=2902,2885
<2885=2900,2898,2896,2894,2892,2890,2886
<2886=2887
<2887=2889,2888
<2890=2891
<2892=2893
<2894=2895
<2896=2897
<2898=2899
<2900=2901
<2902=2903
<2904=2908,2905
<2905=2907,2906
<2908=2910,2909
<2911=2912
<2912=2928,2913
<2913=2926,2924,2922,2920,2918,2916,2914
<2914=2915
<2916=2917
<2918=2919
<2920=2921
<2922=2923
<2924=2925
<2926=2927
<2928=2929
<2930=2931
<2931=2934,2933,2932
<2935=2936
<2936=2944,2943,2942,2937
<2937=2941,2938
<2938=2940,2939
<2945=2946
<2946=2954,2953,2952,2947
<2947=2951,2948
<2948=2950,2949
<2955=2956
<2956=2960,2957
<2957=2958
<2958=2959
<2960=2961
<2961=2963,2962
<2963=2965,2964
<2965=2967,2966
<2968=2969
<2969=2972,2971,2970
<2973=2975,2974
<2975=2976
<2976=2984,2977
<2977=2979,2978
<2979=2981,2980
<2981=2983,2982
<2985=2987,2986
<2988=2989
<2989=2991,2990
<2992=2993
<2993=2994
<2994=2999,2998,2995
<2995=2997,2996
<3000=3001
<3001=3009,3008,3002
<3002=3007,3003
<3003=3005,3004
<3005=3006
<3010=3011
<3011=3023,3012
<3012=3021,3019,3017,3015,3013
<3013=3014
<3015=3016
<3017=3018
<3019=3020
<3021=3022
<3023=3024
<3025=3041,3037,3033,3029,3026
<3026=3028,3027
<3029=3032,3031,3030
<3033=3036,3035,3034
<3037=3040,3039,3038
<3041=3044,3043,3042
<3072=3084,3083,3073
<3073=3080,3077,3074
<3074=3076,3075
<3077=3079,3078
<3080=3082,3081
<3084=4019,4002,3992,3985,3980,3973,3956,3659,3655,3502,3489,3475,3462,3340,3297,3289,3279,3273,3259,3196,3185,3181,3160,3140,3129,3113,3096,3085
<3085=3086
<3086=3094,3087
<3087=3092,3090,3088
<3088=3089
<3090=3091
<3092=3093
<3094=3095
<3096=3097
<3097=3111,3098
<3098=3109,3107,3105,3101,3099
<3099=3100
<3101=3102
<3102=3104,3103
<3105=3106
<3107=3108
<3109=3110
<3111=3112
<3113=3114
<3114=3128,3127,3115
<3115=3126,3116
<3116=3124,3117
<3117=3122,3120,3118
<3118=3119
<3120=3121
<3122=3123
<3124=3125
<3129=3130
<3130=3138,3131
<3131=3136,3134,3132
<3132=3133
<3134=3135
<3136=3137
<3138=3139
<3140=3141
<3141=3158,3142
<3142=3156,3143
<3143=3144
<3144=3155,3145
<3145=3153,3146
<3146=3151,3149,3147
<3147=3148
<3149=3150
<3151=3152
<3153=3154
<3156=3157
<3158=3159
<3160=3161
<3161=3179,3162
<3162=3177,3175,3173,3171,3169,3167,3163
<3163=3164
<3164=3166,3165
<3167=3168
<3169=3170
<3171=3172
<3173=3174
<3175=3176
<3177=3178
<3179=3180
<3181=3182
<3182=3184,3183
<3185=3186
<3186=3194,3187
<3187=3192,3190,3188
<3188=3189
<3190=3191
<3192=3193
<3194=3195
<3196=3251,3247,3244,3197
<3197=3232,3217,3198
<3198=3199
<3199=3215,3200
<3200=3213,3211,3209,3207,3205,3203,3201
<3201=3202
<3203=3204
<3205=3206
<3207=3208
<3209=3210
<3211=3212
<3213=3214
<3215=3216
<3217=3218
<3218=3231,3230,3219
<3219=3229,3220
<3220=3222,3221
<3222=3224,3223
<3224=3226,3225
<3226=3228,3227
<3232=3234,3233
<3234=3235
<3235=3243,3236
<3236=3238,3237
<3238=3240,3239
<3240=3242,3241
<3244=3246,3245
<3247=3248
<3248=3250,3249
<3251=3252
<3252=3253
<3253=3258,3257,3254
<3254=3256,3255
<3259=3260
<3260=3270,3261
<3261=3267,3262
<3262=3264,3263
<3264=3266,3265
<3267=3269,3268
<3270=3272,3271
<3273=3274
<3274=3276,3275
<3276=3278,3277
<3279=3280
<3280=3286,3281
<3281=3285,3282
<3282=3284,3283
<3286=3288,3287
<3289=3290
<3290=3294,3291
<3291=3293,3292
<3294=3296,3295
<3297=3336,3307,3298
<3298=3299
<3299=3300
<3300=3301
<3301=3305,3302
<3302=3303
<3303=3304
<3305=3306
<3307=3325,3308
<3308=3309
<3309=3323,3310
<3310=3321,3319,3317,3313,3311
<3311=3312
<3313=3314
<3314=3316,3315
<3317=3318
<3319=3320
<3321=3322
<3323=3324
<3325=3326
<3326=3334,3327
<3327=3332,3330,3328
<3328=3329
<3330=3331
<3332=3333
<3334=3335
<3336=3337
<3337=3339,3338
<3340=3454,3450,3447,3341
<3341=3443,3412,3391,3386,3363,3342
<3342=3343
<3343=3361,3344
<3344=3359,3357,3355,3353,3351,3349,3345
<3345=3346
<3346=3348,3347
<3349=3350
<3351=3352
<3353=3354
<3355=3356
<3357=3358
<3359=3360
<3361=3362
<3363=3364
<3364=3376,3365
<3365=3368,3366
<3366=3367
<3368=3369
<3369=3371,3370
<3371=3375,3372
<3372=3374,3373
<3376=3377
<3377=3379,3378
<3379=3381,3380
<3381=3385,3382
<3382=3384,3383
<3386=3387
<3387=3390,3389,3388
<3391=3406,3402,3392
<3392=3393
<3393=3398,3394
<3394=3395
<3395=3397,3396
<3398=3399
<3399=3401,3400
<3402=3403
<3403=3405,3404
<3406=3407
<3407=3411,3408
<3408=3410,3409
<3412=3413
<3413=3441,3414
<3414=3439,3437,3435,3433,3421,3419,3415
<3415=3416
<3416=3418,3417
<3419=3420
<3421=3422
<3422=3424,3423
<3424=3426,3425
<3426=3428,3427
<3428=3432,3429
<3429=3431,3430
<3433=3434
<3435=3436
<3437=3438
<3439=3440
<3441=3442
<3443=3444
<3444=3446,3445
<3447=3449,3448
<3450=3451
<3451=3453,3452
<3454=3455
<3455=3456
<3456=3461,3460,3457
<3457=3459,3458
<3462=3469,3463
<3463=3468,3467,3464
<3464=3466,3465
<3469=3474,3473,3470
<3470=3472,3471
<3475=3476
<3476=3488,3487,3477
<3477=3486,3478
<3478=3485,3479
<3479=3481,3480
<3481=3482
<3482=3484,3483
<3489=3490
<3490=3500,3491
<3491=3498,3496,3494,3492
<3492=3493
<3494=3495
<3496=3497
<3498=3499
<3500=3501
<3502=3647,3643,3640,3503
<3503=3628,3623,3604,3600,3577,3556,3547,3542,3523,3504
<3504=3505
<3505=3521,3506
<3506=3519,3517,3515,3513,3511,3509,3507
<3507=3508
<3509=3510
<3511=3512
<3513=3514
<3515=3516
<3517=3518
<3519=3520
<3521=3522
<3523=3524
<3524=3540,3525
<3525=3538,3536,3534,3532,3530,3528,3526
<3526=3527
<3528=3529
<3530=3531
<3532=3533
<3534=3535
<3536=3537
<3538=3539
<3540=3541
<3542=3543
<3543=3546,3545,3544
<3547=3548
<3548=3552,3549
<3549=3550
<3550=3551
<3552=3553
<3553=3555,3554
<3556=3568,3557
<3557=3559,3558
<3559=3560
<3560=3566,3561
<3561=3564,3562
<3562=3563
<3564=3565
<3566=3567
<3568=3569
<3569=3571,3570
<3571=3575,3572
<3572=3573
<3573=3574
<3575=3576
<3577=3578
<3578=3598,3579
<3579=3596,3594,3592,3590,3586,3584,3580
<3580=3581
<3581=3583,3582
<3584=3585
<3586=3587
<3587=3589,3588
<3590=3591
<3592=3593
<3594=3595
<3596=3597
<3598=3599
<3600=3601
<3601=3603,3602
<3604=3605
<3605=3615,3606
<3606=3609,3607
<3607=3608
<3609=3610
<3610=3612,3611
<3612=3614,3613
<3615=3616
<3616=3618,3617
<3618=3620,3619
<3620=3622,3621
<3623=3624
<3624=3627,3626,3625
<3628=3630,3629
<3630=3631
<3631=3639,3632
<3632=3634,3633
<3634=3636,3635
<3636=3638,3637
<3640=3642,3641
<3643=3644
<3644=3646,3645
<3647=3648
<3648=3649
<3649=3654,3653,3650
<3650=3652,3651
<3655=3656
<3656=3658,3657
<3659=3950,3922,3660
<3660=3661
<3661=3915,3906,3714,3703,3698,3679,3662
<3662=3663
<3663=3677,3664
<3664=3675,3671,3665
<3665=3666
<3666=3668,3667
<3668=3670,3669
<3671=3672
<3672=3674,3673
<3675=3676
<3677=3678
<3679=3680
<3680=3690,3681
<3681=3684,3682
<3682=3683
<3684=3685
<3685=3687,3686
<3687=3689,3688
<3690=3691
<3691=3693,3692
<3693=3695,3694
<3695=3697,3696
<3698=3699
<3699=3702,3701,3700
<3703=3704
<3704=3712,3705
<3705=3710,3708,3706
<3706=3707
<3708=3709
<3710=3711
<3712=3713
<3714=3898,3894,3891,3715
<3715=3879,3874,3855,3838,3831,3730,3716
<3716=3726,3717
<3717=3722,3718
<3718=3719
<3719=3721,3720
<3722=3723
<3723=3725,3724
<3726=3727
<3727=3729,3728
<3730=3823,3819,3816,3731
<3731=3804,3798,3793,3774,3770,3747,3736,3732
<3732=3733
<3733=3735,3734
<3736=3738,3737
<3738=3739
<3739=3741,3740
<3741=3745,3742
<3742=3743
<3743=3744
<3745=3746
<3747=3748
<3748=3768,3749
<3749=3766,3764,3762,3760,3758,3754,3750
<3750=3751
<3751=3753,3752
<3754=3755
<3755=3757,3756
<3758=3759
<3760=3761
<3762=3763
<3764=3765
<3766=3767
<3768=3769
<3770=3771
<3771=3773,3772
<3774=3775
<3775=3785,3776
<3776=3779,3777
<3777=3778
<3779=3780
<3780=3782,3781
<3782=3784,3783
<3785=3786
<3786=3788,3787
<3788=3790,3789
<3790=3792,3791
<3793=3794
<3794=3797,3796,3795
<3798=3800,3799
<3800=3801
<3801=3803,3802
<3804=3806,3805
<3806=3807
<3807=3815,3808
<3808=3810,3809
<3810=3812,3811
<3812=3814,3813
<3816=3818,3817
<3819=3820
<3820=3822,3821
<3823=3824
<3824=3825
<3825=3830,3829,3826
<3826=3828,3827
<3831=3832
<3832=3837,3836,3833
<3833=3835,3834
<3838=3839
<3839=3853,3840
<3840=3851,3847,3841
<3841=3842
<3842=3844,3843
<3844=3846,3845
<3847=3848
<3848=3850,3849
<3851=3852
<3853=3854
<3855=3856
<3856=3866,3857
<3857=3860,3858
<3858=3859
<3860=3861
<3861=3863,3862
<3863=3865,3864
<3866=3867
<3867=3869,3868
<3869=3871,3870
<3871=3873,3872
<3874=3875
<3875=3878,3877,3876
<3879=3881,3880
<3881=3882
<3882=3890,3883
<3883=3885,3884
<3885=3887,3886
<3887=3889,3888
<3891=3893,3892
<3894=3895
<3895=3897,3896
<3898=3899
<3899=3900
<3900=3905,3904,3901
<3901=3903,3902
<3906=3907
<3907=3914,3913,3908
<3908=3912,3909
<3909=3911,3910
<3915=3916
<3916=3921,3920,3917
<3917=3919,3918
<3922=3946,3923
<3923=3924
<3924=3944,3925
<3925=3942,3932,3926
<3926=3927
<3927=3929,3928
<3929=3931,3930
<3932=3933
<3933=3935,3934
<3935=3937,3936
<3937=3939,3938
<3939=3941,3940
<3942=3943
<3944=3945
<3946=3947
<3947=3949,3948
<3950=3951
<3951=3955,3952
<3952=3954,3953
<3956=3957
<3957=3972,3971,3958
<3958=3970,3959
<3959=3968,3960
<3960=3961
<3961=3962
<3962=3966,3963
<3963=3964
<3964=3965
<3966=3967
<3968=3969
<3973=3974
<3974=3979,3978,3975
<3975=3977,3976
<3980=3981
<3981=3984,3983,3982
<3985=3986
<3986=3991,3990,3987
<3987=3989,3988
<3992=3993
<3993=4001,4000,3994
<3994=3999,3995
<3995=3997,3996
<3997=3998
<4002=4003
<4003=4018,4017,4016,4004
<4004=4015,4005
<4005=4014,4013,4012,4011,4010,4009,4008,4007,4006
<4019=4020
<4020=4024,4021
<4021=4022
<4022=4023
<4024=4025
<4090=4108,4107,4091
<4091=4104,4101,4098,4095,4092
<4092=4094,4093
<4095=4097,4096
<4098=4100,4099
<4101=4103,4102
<4104=4106,4105
<4108=5353,5346,5316,5309,5302,5220,5209,5205,5132,5126,5120,5114,5107,5103,4950,4936,4931,4918,4914,4570,4562,4554,4546,4539,4532,4521,4400,4391,4382,4320,4303,4286,4269,4256,4239,4230,4226,4205,4190,4171,4158,4141,4130,4114,4113,4112,4111,4109
<4109=4110
<4114=4126,4120,4115
<4115=4116
<4116=4117
<4117=4119,4118
<4120=4121
<4121=4125,4122
<4122=4124,4123
<4126=4127
<4127=4129,4128
<4130=4131
<4131=4139,4132
<4132=4137,4135,4133
<4133=4134
<4135=4136
<4137=4138
<4139=4140
<4141=4142
<4142=4156,4143
<4143=4154,4152,4150,4146,4144
<4144=4145
<4146=4147
<4147=4149,4148
<4150=4151
<4152=4153
<4154=4155
<4156=4157
<4158=4159
<4159=4170,4160
<4160=4168,4161
<4161=4166,4164,4162
<4162=4163
<4164=4165
<4166=4167
<4168=4169
<4171=4172
<4172=4188,4173
<4173=4186,4184,4182,4180,4178,4176,4174
<4174=4175
<4176=4177
<4178=4179
<4180=4181
<4182=4183
<4184=4185
<4186=4187
<4188=4189
<4190=4191
<4191=4203,4192
<4192=4201,4199,4197,4195,4193
<4193=4194
<4195=4196
<4197=4198
<4199=4200
<4201=4202
<4203=4204
<4205=4206
<4206=4224,4207
<4207=4222,4220,4218,4216,4214,4212,4208
<4208=4209
<4209=4211,4210
<4212=4213
<4214=4215
<4216=4217
<4218=4219
<4220=4221
<4222=4223
<4224=4225
<4226=4227
<4227=4229,4228
<4230=4235,4231
<4231=4234,4233,4232
<4235=4238,4237,4236
<4239=4240
<4240=4254,4241
<4241=4252,4250,4248,4244,4242
<4242=4243
<4244=4245
<4245=4247,4246
<4248=4249
<4250=4251
<4252=4253
<4254=4255
<4256=4257
<4257=4268,4258
<4258=4266,4259
<4259=4264,4262,4260
<4260=4261
<4262=4263
<4264=4265
<4266=4267
<4269=4270
<4270=4283,4271
<4271=4275,4272
<4272=4274,4273
<4275=4281,4276
<4276=4277
<4277=4278
<4278=4280,4279
<4281=4282
<4283=4285,4284
<4286=4287
<4287=4300,4288
<4288=4292,4289
<4289=4291,4290
<4292=4298,4293
<4293=4294
<4294=4295
<4295=4297,4296
<4298=4299
<4300=4302,4301
<4303=4304
<4304=4317,4305
<4305=4309,4306
<4306=4308,4307
<4309=4315,4310
<4310=4311
<4311=4312
<4312=4314,4313
<4315=4316
<4317=4319,4318
<4320=4378,4353,4321
<4321=4322
<4322=4343,4333,4323
<4323=4324
<4324=4330,4325
<4325=4329,4326
<4326=4328,4327
<4330=4332,4331
<4333=4334
<4334=4340,4335
<4335=4339,4336
<4336=4338,4337
<4340=4342,4341
<4343=4344
<4344=4350,4345
<4345=4349,4346
<4346=4348,4347
<4350=4352,4351
<4353=4370,4362,4354
<4354=4355
<4355=4359,4356
<4356=4358,4357
<4359=4361,4360
<4362=4363
<4363=4367,4364
<4364=4366,4365
<4367=4369,4368
<4370=4371
<4371=4375,4372
<4372=4374,4373
<4375=4377,4376
<4378=4379
<4379=4381,4380
<4382=4383
<4383=4389,4384
<4384=4387,4385
<4385=4386
<4387=4388
<4389=4390
<4391=4392
<4392=4398,4393
<4393=4396,4394
<4394=4395
<4396=4397
<4398=4399
<4400=4513,4509,4506,4401
<4401=4494,4489,4476,4471,4452,4448,4427,4416,4402
<4402=4412,4408,4403
<4403=4404
<4404=4405
<4405=4407,4406
<4408=4409
<4409=4411,4410
<4412=4413
<4413=4415,4414
<4416=4418,4417
<4418=4419
<4419=4421,4420
<4421=4425,4422
<4422=4423
<4423=4424
<4425=4426
<4427=4428
<4428=4446,4429
<4429=4444,4442,4440,4438,4436,4434,4430
<4430=4431
<4431=4433,4432
<4434=4435
<4436=4437
<4438=4439
<4440=4441
<4442=4443
<4444=4445
<4446=4447
<4448=4449
<4449=4451,4450
<4452=4453
<4453=4469,4454
<4454=4467,4465,4463,4461,4459,4457,4455
<4455=4456
<4457=4458
<4459=4460
<4461=4462
<4463=4464
<4465=4466
<4467=4468
<4469=4470
<4471=4472
<4472=4475,4474,4473
<4476=4477
<4477=4481,4478
<4478=4479
<4479=4480
<4481=4482
<4482=4484,4483
<4484=4486,4485
<4486=4488,4487
<4489=4490
<4490=4493,4492,4491
<4494=4496,4495
<4496=4497
<4497=4505,4498
<4498=4500,4499
<4500=4502,4501
<4502=4504,4503
<4506=4508,4507
<4509=4510
<4510=4512,4511
<4513=4514
<4514=4515
<4515=4520,4519,4516
<4516=4518,4517
<4521=4522
<4522=4531,4530,4529,4523
<4523=4528,4524
<4524=4527,4526,4525
<4532=4533
<4533=4538,4537,4534
<4534=4536,4535
<4539=4540
<4540=4545,4544,4541
<4541=4543,4542
<4546=4547
<4547=4551,4548
<4548=4550,4549
<4551=4553,4552
<4554=4555
<4555=4559,4556
<4556=4558,4557
<4559=4561,4560
<4562=4563
<4563=4567,4564
<4564=4566,4565
<4567=4569,4568
<4570=4908,4818,4571
<4571=4572
<4572=4793,4782,4757,4744,4738,4732,4726,4588,4573
<4573=4574
<4574=4586,4575
<4575=4584,4582,4580,4578,4576
<4576=4577
<4578=4579
<4580=4581
<4582=4583
<4584=4585
<4586=4587
<4588=4718,4714,4711,4589
<4589=4679,4670,4666,4645,4630,4611,4590
<4590=4591
<4591=4608,4592
<4592=4606,4593
<4593=4602,4598,4594
<4594=4595
<4595=4597,4596
<4598=4599
<4599=4601,4600
<4602=4603
<4603=4605,4604
<4606=4607
<4608=4610,4609
<4611=4612
<4612=4628,4613
<4613=4626,4624,4622,4620,4618,4616,4614
<4614=4615
<4616=4617
<4618=4619
<4620=4621
<4622=4623
<4624=4625
<4626=4627
<4628=4629
<4630=4631
<4631=4643,4632
<4632=4641,4639,4637,4635,4633
<4633=4634
<4635=4636
<4637=4638
<4639=4640
<4641=4642
<4643=4644
<4645=4646
<4646=4664,4647
<4647=4662,4660,4658,4656,4654,4652,4648
<4648=4649
<4649=4651,4650
<4652=4653
<4654=4655
<4656=4657
<4658=4659
<4660=4661
<4662=4663
<4664=4665
<4666=4667
<4667=4669,4668
<4670=4675,4671
<4671=4674,4673,4672
<4675=4678,4677,4676
<4679=4680
<4680=4710,4709,4708,4681
<4681=4707,4682
<4682=4699,4691,4683
<4683=4689,4684
<4684=4685
<4685=4686
<4686=4688,4687
<4689=4690
<4691=4697,4692
<4692=4693
<4693=4694
<4694=4696,4695
<4697=4698
<4699=4705,4700
<4700=4701
<4701=4702
<4702=4704,4703
<4705=4706
<4711=4713,4712
<4714=4715
<4715=4717,4716
<4718=4719
<4719=4720
<4720=4725,4724,4721
<4721=4723,4722
<4726=4727
<4727=4729,4728
<4729=4731,4730
<4732=4733
<4733=4735,4734
<4735=4737,4736
<4738=4739
<4739=4741,4740
<4741=4743,4742
<4744=4745
<4745=4756,4746
<4746=4754,4747
<4747=4752,4750,4748
<4748=4749
<4750=4751
<4752=4753
<4754=4755
<4757=4758
<4758=4780,4759
<4759=4778,4776,4774,4772,4764,4762,4760
<4760=4761
<4762=4763
<4764=4765
<4765=4767,4766
<4767=4769,4768
<4769=4771,4770
<4772=4773
<4774=4775
<4776=4777
<4778=4779
<4780=4781
<4782=4783
<4783=4792,4791,4790,4784
<4784=4789,4785
<4785=4788,4787,4786
<4793=4808,4794
<4794=4807,4806,4805,4804,4803,4802,4795
<4795=4796
<4796=4800,4797
<4797=4798
<4798=4799
<4800=4801
<4808=4809
<4809=4817,4810
<4810=4812,4811
<4812=4814,4813
<4814=4816,4815
<4818=4904,4897,4876,4865,4850,4837,4831,4825,4819
<4819=4820
<4820=4822,4821
<4822=4824,4823
<4825=4826
<4826=4828,4827
<4828=4830,4829
<4831=4832
<4832=4834,4833
<4834=4836,4835
<4837=4838
<4838=4849,4839
<4839=4847,4840
<4840=4845,4843,4841
<4841=4842
<4843=4844
<4845=4846
<4847=4848
<4850=4851
<4851=4863,4852
<4852=4861,4859,4857,4855,4853
<4853=4854
<4855=4856
<4857=4858
<4859=4860
<4861=4862
<4863=4864
<4865=4866
<4866=4874,4867
<4867=4872,4870,4868
<4868=4869
<4870=4871
<4872=4873
<4874=4875
<4876=4877
<4877=4895,4878
<4878=4893,4891,4889,4885,4881,4879
<4879=4880
<4881=4882
<4882=4884,4883
<4885=4886
<4886=4888,4887
<4889=4890
<4891=4892
<4893=4894
<4895=4896
<4897=4898
<4898=4903,4902,4899
<4899=4901,4900
<4904=4905
<4905=4907,4906
<4908=4909
<4909=4913,4910
<4910=4912,4911
<4914=4915
<4915=4917,4916
<4918=4927,4923,4919
<4919=4922,4921,4920
<4923=4926,4925,4924
<4927=4930,4929,4928
<4931=4932
<4932=4935,4934,4933
<4936=4937
<4937=4949,4948,4938
<4938=4947,4939
<4939=4945,4940
<4940=4941
<4941=4942
<4942=4944,4943
<4945=4946
<4950=5095,5091,5088,4951
<4951=4952
<4952=5080,4953
<4953=5075,5062,5049,5036,5023,5009,4997,4984,4971,4958,4954
<4954=4955
<4955=4957,4956
<4958=4959
<4959=4963,4960
<4960=4962,4961
<4963=4969,4964
<4964=4965
<4965=4966
<4966=4968,4967
<4969=4970
<4971=4972
<4972=4976,4973
<4973=4975,4974
<4976=4982,4977
<4977=4978
<4978=4979
<4979=4981,4980
<4982=4983
<4984=4985
<4985=4989,4986
<4986=4988,4987
<4989=4995,4990
<4990=4991
<4991=4992
<4992=4994,4993
<4995=4996
<4997=5005,4998
<4998=4999
<4999=5003,5000
<5000=5001
<5001=5002
<5003=5004
<5005=5006
<5006=5008,5007
<5009=5010
<5010=5022,5011
<5011=5019,5012
<5012=5016,5013
<5013=5015,5014
<5016=5018,5017
<5019=5021,5020
<5023=5024
<5024=5035,5034,5025
<5025=5033,5026
<5026=5030,5027
<5027=5029,5028
<5030=5032,5031
<5036=5037
<5037=5048,5047,5038
<5038=5046,5039
<5039=5043,5040
<5040=5042,5041
<5043=5045,5044
<5049=5050
<5050=5061,5060,5051
<5051=5059,5052
<5052=5056,5053
<5053=5055,5054
<5056=5058,5057
<5062=5063
<5063=5067,5064
<5064=5065
<5065=5066
<5067=5068
<5068=5070,5069
<5070=5072,5071
<5072=5074,5073
<5075=5076
<5076=5079,5078,5077
<5080=5081
<5081=5083,5082
<5083=5085,5084
<5085=5087,5086
<5088=5090,5089
<5091=5092
<5092=5094,5093
<5095=5096
<5096=5097
<5097=5102,5101,5098
<5098=5100,5099
<5103=5104
<5104=5106,5105
<5107=5108
<5108=5113,5112,5109
<5109=5111,5110
<5114=5115
<5115=5117,5116
<5117=5119,5118
<5120=5121
<5121=5123,5122
<5123=5125,5124
<5126=5127
<5127=5129,5128
<5129=5131,5130
<5132=5197,5193,5190,5133
<5133=5134
<5134=5182,5135
<5135=5177,5164,5156,5148,5140,5136
<5136=5137
<5137=5139,5138
<5140=5141
<5141=5145,5142
<5142=5144,5143
<5145=5147,5146
<5148=5149
<5149=5153,5150
<5150=5152,5151
<5153=5155,5154
<5156=5157
<5157=5161,5158
<5158=5160,5159
<5161=5163,5162
<5164=5165
<5165=5169,5166
<5166=5167
<5167=5168
<5169=5170
<5170=5172,5171
<5172=5174,5173
<5174=5176,5175
<5177=5178
<5178=5181,5180,5179
<5182=5183
<5183=5185,5184
<5185=5187,5186
<5187=5189,5188
<5190=5192,5191
<5193=5194
<5194=5196,5195
<5197=5198
<5198=5199
<5199=5204,5203,5200
<5200=5202,5201
<5205=5206
<5206=5208,5207
<5209=5210
<5210=5219,5218,5217,5211
<5211=5216,5212
<5212=5215,5214,5213
<5220=5294,5290,5287,5221
<5221=5222
<5222=5279,5223
<5223=5274,5261,5249,5228,5224
<5224=5225
<5225=5227,5226
<5228=5229
<5229=5246,5230
<5230=5244,5231
<5231=5240,5236,5232
<5232=5233
<5233=5235,5234
<5236=5237
<5237=5239,5238
<5240=5241
<5241=5243,5242
<5244=5245
<5246=5248,5247
<5249=5257,5250
<5250=5251
<5251=5255,5252
<5252=5253
<5253=5254
<5255=5256
<5257=5258
<5258=5260,5259
<5261=5262
<5262=5266,5263
<5263=5264
<5264=5265
<5266=5267
<5267=5269,5268
<5269=5271,5270
<5271=5273,5272
<5274=5275
<5275=5278,5277,5276
<5279=5280
<5280=5282,5281
<5282=5284,5283
<5284=5286,5285
<5287=5289,5288
<5290=5291
<5291=5293,5292
<5294=5295
<5295=5296
<5296=5301,5300,5297
<5297=5299,5298
<5302=5303
<5303=5308,5307,5304
<5304=5306,5305
<5309=5310
<5310=5315,5314,5311
<5311=5313,5312
<5316=5338,5334,5331,5317
<5317=5318
<5318=5323,5319
<5319=5320
<5320=5322,5321
<5323=5324
<5324=5326,5325
<5326=5328,5327
<5328=5330,5329
<5331=5333,5332
<5334=5335
<5335=5337,5336
<5338=5339
<5339=5340
<5340=5345,5344,5341
<5341=5343,5342
<5346=5347
<5347=5352,5351,5348
<5348=5350,5349
<5353=5354
<5354=5362,5361,5355
<5355=5360,5356
<5356=5358,5357
<5358=5359
<5433=5451,5450,5434
<5434=5447,5444,5441,5438,5435
<5435=5437,5436
<5438=5440,5439
<5441=5443,5442
<5444=5446,5445
<5447=5449,5448
<5451=5467,5452
<5452=5465,5453
<5453=5454
<5454=5455
<5455=5463,5456
<5456=5461,5459,5457
<5457=5458
<5459=5460
<5461=5462
<5463=5464
<5465=5466
<5467=5468
<5468=5480,5469
<5469=5478,5476,5474,5472,5470
<5470=5471
<5472=5473
<5474=5475
<5476=5477
<5478=5479
<5480=5481
<5491=5494,5493,5492
<5494=5885,5801,5791,5495
<5495=5783,5779,5776,5496
<5496=5764,5755,5742,5729,5723,5718,5699,5680,5661,5657,5636,5614,5605,5586,5567,5551,5534,5521,5508,5497
<5497=5498
<5498=5500,5499
<5500=5501
<5501=5503,5502
<5503=5505,5504
<5505=5507,5506
<5508=5509
<5509=5513,5510
<5510=5511
<5511=5512
<5513=5514
<5514=5516,5515
<5516=5518,5517
<5518=5520,5519
<5521=5522
<5522=5526,5523
<5523=5524
<5524=5525
<5526=5527
<5527=5529,5528
<5529=5531,5530
<5531=5533,5532
<5534=5535
<5535=5549,5536
<5536=5547,5545,5543,5539,5537
<5537=5538
<5539=5540
<5540=5542,5541
<5543=5544
<5545=5546
<5547=5548
<5549=5550
<5551=5552
<5552=5566,5565,5553
<5553=5564,5554
<5554=5562,5555
<5555=5560,5558,5556
<5556=5557
<5558=5559
<5560=5561
<5562=5563
<5567=5568
<5568=5584,5569
<5569=5582,5580,5578,5576,5574,5572,5570
<5570=5571
<5572=5573
<5574=5575
<5576=5577
<5578=5579
<5580=5581
<5582=5583
<5584=5585
<5586=5587
<5587=5603,5588
<5588=5601,5599,5597,5595,5593,5591,5589
<5589=5590
<5591=5592
<5593=5594
<5595=5596
<5597=5598
<5599=5600
<5601=5602
<5603=5604
<5605=5610,5606
<5606=5609,5608,5607
<5610=5613,5612,5611
<5614=5615
<5615=5634,5616
<5616=5632,5630,5628,5619,5617
<5617=5618
<5619=5620
<5620=5627,5621
<5621=5625,5622
<5622=5623
<5623=5624
<5625=5626
<5628=5629
<5630=5631
<5632=5633
<5634=5635
<5636=5637
<5637=5655,5638
<5638=5653,5651,5649,5647,5645,5643,5639
<5639=5640
<5640=5642,5641
<5643=5644
<5645=5646
<5647=5648
<5649=5650
<5651=5652
<5653=5654
<5655=5656
<5657=5658
<5658=5660,5659
<5661=5662
<5662=5678,5663
<5663=5674,5670,5664
<5664=5665
<5665=5669,5666
<5666=5668,5667
<5670=5671
<5671=5673,5672
<5674=5675
<5675=5677,5676
<5678=5679
<5680=5681
<5681=5697,5682
<5682=5693,5689,5683
<5683=5684
<5684=5688,5685
<5685=5687,5686
<5689=5690
<5690=5692,5691
<5693=5694
<5694=5696,5695
<5697=5698
<5699=5700
<5700=5716,5701
<5701=5712,5708,5702
<5702=5703
<5703=5707,5704
<5704=5706,5705
<5708=5709
<5709=5711,5710
<5712=5713
<5713=5715,5714
<5716=5717
<5718=5719
<5719=5722,5721,5720
<5723=5724
<5724=5726,5725
<5726=5728,5727
<5729=5730
<5730=5734,5731
<5731=5732
<5732=5733
<5734=5735
<5735=5737,5736
<5737=5739,5738
<5739=5741,5740
<5742=5743
<5743=5747,5744
<5744=5745
<5745=5746
<5747=5748
<5748=5750,5749
<5750=5752,5751
<5752=5754,5753
<5755=5760,5756
<5756=5759,5758,5757
<5760=5763,5762,5761
<5764=5766,5765
<5766=5767
<5767=5775,5768
<5768=5770,5769
<5770=5772,5771
<5772=5774,5773
<5776=5778,5777
<5779=5780
<5780=5782,5781
<5783=5784
<5784=5785
<5785=5790,5789,5786
<5786=5788,5787
<5791=5792
<5792=5800,5799,5793
<5793=5798,5794
<5794=5796,5795
<5796=5797
<5801=5877,5873,5870,5802
<5802=5859,5837,5818,5803
<5803=5804
<5804=5816,5805
<5805=5814,5812,5806
<5806=5807
<5807=5811,5808
<5808=5810,5809
<5812=5813
<5814=5815
<5816=5817
<5818=5819
<5819=5835,5820
<5820=5833,5831,5829,5827,5825,5823,5821
<5821=5822
<5823=5824
<5825=5826
<5827=5828
<5829=5830
<5831=5832
<5833=5834
<5835=5836
<5837=5842,5838
<5838=5841,5840,5839
<5842=5858,5857,5856,5843
<5843=5855,5844
<5844=5852,5849,5846,5845
<5846=5848,5847
<5849=5851,5850
<5852=5854,5853
<5859=5860
<5860=5869,5868,5861
<5861=5867,5862
<5862=5864,5863
<5864=5866,5865
<5870=5872,5871
<5873=5874
<5874=5876,5875
<5877=5878
<5878=5879
<5879=5884,5883,5880
<5880=5882,5881
<5885=5886
<5886=5898,5897,5887
<5887=5896,5888
<5888=5895,5889
<5889=5891,5890
<5891=5892
<5892=5894,5893
<5929=5935,5934,5930
<5930=5931
<5931=5933,5932
<5935=5991,5975,5943,5936
<5936=5937
<5937=5941,5938
<5938=5939
<5939=5940
<5941=5942
<5943=5967,5960,5957,5944
<5944=5945
<5945=5949,5946
<5946=5947
<5947=5948
<5949=5950
<5950=5952,5951
<5952=5954,5953
<5954=5956,5955
<5957=5959,5958
<5960=5961
<5961=5966,5962
<5962=5964,5963
<5964=5965
<5967=5968
<5968=5969
<5969=5974,5973,5970
<5970=5972,5971
<5975=5987,5976
<5976=5978,5977
<5978=5979
<5979=5985,5980
<5980=5983,5981
<5981=5982
<5983=5984
<5985=5986
<5987=5988
<5988=5990,5989
<5991=5992
<5992=6004,6003,5993
<5993=6002,5994
<5994=6000,5995
<5995=5998,5996
<5996=5997
<5998=5999
<6000=6001
<6018=6024,6023,6019
<6019=6020
<6020=6022,6021
<6024=6066,6032,6025
<6025=6026
<6026=6030,6027
<6027=6028
<6028=6029
<6030=6031
<6032=6058,6047,6044,6033
<6033=6034
<6034=6038,6035
<6035=6036
<6036=6037
<6038=6039
<6039=6041,6040
<6041=6043,6042
<6044=6046,6045
<6047=6048
<6048=6057,6049
<6049=6056,6050
<6050=6052,6051
<6052=6053
<6053=6055,6054
<6058=6059
<6059=6060
<6060=6065,6064,6061
<6061=6063,6062
<6066=6067
<6067=6079,6078,6068
<6068=6077,6069
<6069=6075,6070
<6070=6073,6071
<6071=6072
<6073=6074
<6075=6076
<6091=6103,6102,6092
<6092=6099,6096,6093
<6093=6095,6094
<6096=6098,6097
<6099=6101,6100
<6103=7095,7078,7074,7059,7024,7009,6994,6990,6971,6952,6933,6914,6905,6891,6758,6745,6736,6727,6708,6689,6670,6660,6650,6640,6621,6611,6298,6283,6268,6262,6248,6242,6229,6156,6111,6104
<6104=6105
<6105=6109,6106
<6106=6107
<6107=6108
<6109=6110
<6111=6148,6144,6141,6112
<6112=6130,6113
<6113=6114
<6114=6128,6115
<6115=6126,6124,6120,6116
<6116=6117
<6117=6119,6118
<6120=6121
<6121=6123,6122
<6124=6125
<6126=6127
<6128=6129
<6130=6131
<6131=6140,6139,6132
<6132=6138,6133
<6133=6135,6134
<6135=6137,6136
<6141=6143,6142
<6144=6145
<6145=6147,6146
<6148=6149
<6149=6150
<6150=6155,6154,6151
<6151=6153,6152
<6156=6221,6217,6214,6157
<6157=6158
<6158=6206,6170,6159
<6159=6160
<6160=6161
<6161=6162
<6162=6168,6163
<6163=6166,6164
<6164=6165
<6166=6167
<6168=6169
<6170=6201,6188,6171
<6171=6172
<6172=6186,6173
<6173=6184,6182,6178,6174
<6174=6175
<6175=6177,6176
<6178=6179
<6179=6181,6180
<6182=6183
<6184=6185
<6186=6187
<6188=6189
<6189=6193,6190
<6190=6191
<6191=6192
<6193=6194
<6194=6196,6195
<6196=6198,6197
<6198=6200,6199
<6201=6202
<6202=6205,6204,6203
<6206=6207
<6207=6209,6208
<6209=6211,6210
<6211=6213,6212
<6214=6216,6215
<6217=6218
<6218=6220,6219
<6221=6222
<6222=6223
<6223=6228,6227,6224
<6224=6226,6225
<6229=6230
<6230=6240,6231
<6231=6238,6236,6234,6232
<6232=6233
<6234=6235
<6236=6237
<6238=6239
<6240=6241
<6242=6244,6243
<6244=6245
<6245=6247,6246
<6248=6249
<6249=6261,6260,6250
<6250=6259,6251
<6251=6257,6252
<6252=6255,6253
<6253=6254
<6255=6256
<6257=6258
<6262=6263
<6263=6267,6264
<6264=6266,6265
<6268=6269
<6269=6281,6270
<6270=6279,6277,6271
<6271=6272
<6272=6274,6273
<6274=6276,6275
<6277=6278
<6279=6280
<6281=6282
<6283=6284
<6284=6296,6285
<6285=6294,6292,6286
<6286=6287
<6287=6289,6288
<6289=6291,6290
<6292=6293
<6294=6295
<6296=6297
<6298=6603,6599,6596,6299
<6299=6300
<6300=6588,6301
<6301=6583,6570,6551,6534,6518,6513,6494,6489,6476,6471,6452,6439,6426,6415,6402,6397,6384,6348,6336,6320,6309,6302
<6302=6303
<6303=6307,6304
<6304=6305
<6305=6306
<6307=6308
<6309=6310
<6310=6318,6311
<6311=6316,6314,6312
<6312=6313
<6314=6315
<6316=6317
<6318=6319
<6320=6321
<6321=6334,6322
<6322=6332,6330,6323
<6323=6324
<6324=6328,6325
<6325=6326
<6326=6327
<6328=6329
<6330=6331
<6332=6333
<6334=6335
<6336=6337
<6337=6347,6346,6338
<6338=6345,6339
<6339=6343,6340
<6340=6341
<6341=6342
<6343=6344
<6348=6349
<6349=6383,6382,6350
<6350=6381,6351
<6351=6366,6352
<6352=6364,6353
<6353=6354
<6354=6355
<6355=6363,6356
<6356=6360,6357
<6357=6359,6358
<6360=6362,6361
<6364=6365
<6366=6374,6367
<6367=6371,6368
<6368=6370,6369
<6371=6373,6372
<6374=6378,6375
<6375=6377,6376
<6378=6380,6379
<6384=6385
<6385=6389,6386
<6386=6387
<6387=6388
<6389=6390
<6390=6392,6391
<6392=6394,6393
<6394=6396,6395
<6397=6398
<6398=6401,6400,6399
<6402=6403
<6403=6407,6404
<6404=6405
<6405=6406
<6407=6408
<6408=6410,6409
<6410=6412,6411
<6412=6414,6413
<6415=6416
<6416=6418,6417
<6418=6419
<6419=6421,6420
<6421=6423,6422
<6423=6425,6424
<6426=6427
<6427=6431,6428
<6428=6429
<6429=6430
<6431=6432
<6432=6434,6433
<6434=6436,6435
<6436=6438,6437
<6439=6440
<6440=6444,6441
<6441=6442
<6442=6443
<6444=6445
<6445=6447,6446
<6447=6449,6448
<6449=6451,6450
<6452=6453
<6453=6469,6454
<6454=6467,6465,6463,6461,6459,6457,6455
<6455=6456
<6457=6458
<6459=6460
<6461=6462
<6463=6464
<6465=6466
<6467=6468
<6469=6470
<6471=6472
<6472=6475,6474,6473
<6476=6477
<6477=6481,6478
<6478=6479
<6479=6480
<6481=6482
<6482=6484,6483
<6484=6486,6485
<6486=6488,6487
<6489=6490
<6490=6493,6492,6491
<6494=6495
<6495=6511,6496
<6496=6509,6507,6505,6503,6501,6499,6497
<6497=6498
<6499=6500
<6501=6502
<6503=6504
<6505=6506
<6507=6508
<6509=6510
<6511=6512
<6513=6514
<6514=6517,6516,6515
<6518=6519
<6519=6533,6532,6520
<6520=6531,6521
<6521=6529,6522
<6522=6527,6525,6523
<6523=6524
<6525=6526
<6527=6528
<6529=6530
<6534=6535
<6535=6549,6536
<6536=6547,6545,6543,6539,6537
<6537=6538
<6539=6540
<6540=6542,6541
<6543=6544
<6545=6546
<6547=6548
<6549=6550
<6551=6552
<6552=6568,6553
<6553=6566,6564,6562,6560,6558,6556,6554
<6554=6555
<6556=6557
<6558=6559
<6560=6561
<6562=6563
<6564=6565
<6566=6567
<6568=6569
<6570=6571
<6571=6575,6572
<6572=6573
<6573=6574
<6575=6576
<6576=6578,6577
<6578=6580,6579
<6580=6582,6581
<6583=6584
<6584=6587,6586,6585
<6588=6589
<6589=6591,6590
<6591=6593,6592
<6593=6595,6594
<6596=6598,6597
<6599=6600
<6600=6602,6601
<6603=6604
<6604=6605
<6605=6610,6609,6606
<6606=6608,6607
<6611=6612
<6612=6620,6619,6613
<6613=6618,6614
<6614=6616,6615
<6616=6617
<6621=6622
<6622=6638,6623
<6623=6636,6634,6632,6630,6628,6626,6624
<6624=6625
<6626=6627
<6628=6629
<6630=6631
<6632=6633
<6634=6635
<6636=6637
<6638=6639
<6640=6641
<6641=6647,6642
<6642=6646,6643
<6643=6645,6644
<6647=6649,6648
<6650=6651
<6651=6657,6652
<6652=6656,6653
<6653=6655,6654
<6657=6659,6658
<6660=6661
<6661=6667,6662
<6662=6666,6663
<6663=6665,6664
<6667=6669,6668
<6670=6671
<6671=6687,6672
<6672=6683,6679,6673
<6673=6674
<6674=6678,6675
<6675=6677,6676
<6679=6680
<6680=6682,6681
<6683=6684
<6684=6686,6685
<6687=6688
<6689=6690
<6690=6706,6691
<6691=6702,6698,6692
<6692=6693
<6693=6697,6694
<6694=6696,6695
<6698=6699
<6699=6701,6700
<6702=6703
<6703=6705,6704
<6706=6707
<6708=6709
<6709=6725,6710
<6710=6721,6717,6711
<6711=6712
<6712=6716,6713
<6713=6715,6714
<6717=6718
<6718=6720,6719
<6721=6722
<6722=6724,6723
<6725=6726
<6727=6728
<6728=6734,6729
<6729=6732,6730
<6730=6731
<6732=6733
<6734=6735
<6736=6737
<6737=6743,6738
<6738=6741,6739
<6739=6740
<6741=6742
<6743=6744
<6745=6754,6750,6746
<6746=6749,6748,6747
<6750=6753,6752,6751
<6754=6757,6756,6755
<6758=6883,6879,6876,6759
<6759=6849,6824,6819,6796,6784,6772,6760
<6760=6761
<6761=6765,6762
<6762=6764,6763
<6765=6767,6766
<6767=6769,6768
<6769=6771,6770
<6772=6773
<6773=6777,6774
<6774=6776,6775
<6777=6779,6778
<6779=6781,6780
<6781=6783,6782
<6784=6785
<6785=6789,6786
<6786=6788,6787
<6789=6791,6790
<6791=6793,6792
<6793=6795,6794
<6796=6797
<6797=6817,6798
<6798=6815,6813,6811,6809,6807,6801,6799
<6799=6800
<6801=6802
<6802=6804,6803
<6804=6806,6805
<6807=6808
<6809=6810
<6811=6812
<6813=6814
<6815=6816
<6817=6818
<6819=6820
<6820=6823,6822,6821
<6824=6825
<6825=6847,6826
<6826=6845,6843,6837,6833,6827
<6827=6828
<6828=6830,6829
<6830=6832,6831
<6833=6834
<6834=6836,6835
<6837=6838
<6838=6840,6839
<6840=6842,6841
<6843=6844
<6845=6846
<6847=6848
<6849=6850
<6850=6874,6851
<6851=6872,6870,6868,6866,6860,6858,6852
<6852=6853
<6853=6855,6854
<6855=6857,6856
<6858=6859
<6860=6861
<6861=6863,6862
<6863=6865,6864
<6866=6867
<6868=6869
<6870=6871
<6872=6873
<6874=6875
<6876=6878,6877
<6879=6880
<6880=6882,6881
<6883=6884
<6884=6885
<6885=6890,6889,6886
<6886=6888,6887
<6891=6892
<6892=6904,6903,6893
<6893=6902,6894
<6894=6901,6895
<6895=6897,6896
<6897=6898
<6898=6900,6899
<6905=6906
<6906=6912,6907
<6907=6910,6908
<6908=6909
<6910=6911
<6912=6913
<6914=6915
<6915=6931,6916
<6916=6929,6925,6921,6917
<6917=6918
<6918=6920,6919
<6921=6922
<6922=6924,6923
<6925=6926
<6926=6928,6927
<6929=6930
<6931=6932
<6933=6934
<6934=6950,6935
<6935=6948,6944,6940,6936
<6936=6937
<6937=6939,6938
<6940=6941
<6941=6943,6942
<6944=6945
<6945=6947,6946
<6948=6949
<6950=6951
<6952=6953
<6953=6969,6954
<6954=6967,6963,6959,6955
<6955=6956
<6956=6958,6957
<6959=6960
<6960=6962,6961
<6963=6964
<6964=6966,6965
<6967=6968
<6969=6970
<6971=6972
<6972=6988,6973
<6973=6986,6982,6978,6974
<6974=6975
<6975=6977,6976
<6978=6979
<6979=6981,6980
<6982=6983
<6983=6985,6984
<6986=6987
<6988=6989
<6990=6991
<6991=6993,6992
<6994=6995
<6995=7007,6996
<6996=7005,7003,6997
<6997=6998
<6998=7002,6999
<6999=7001,7000
<7003=7004
<7005=7006
<7007=7008
<7009=7010
<7010=7022,7011
<7011=7020,7018,7012
<7012=7013
<7013=7017,7014
<7014=7016,7015
<7018=7019
<7020=7021
<7022=7023
<7024=7025
<7025=7058,7057,7056,7026
<7026=7055,7027
<7027=7052,7049,7046,7043,7040,7037,7034,7031,7028
<7028=7030,7029
<7031=7033,7032
<7034=7036,7035
<7037=7039,7038
<7040=7042,7041
<7043=7045,7044
<7046=7048,7047
<7049=7051,7050
<7052=7054,7053
<7059=7060
<7060=7072,7061
<7061=7070,7068,7066,7064,7062
<7062=7063
<7064=7065
<7066=7067
<7068=7069
<7070=7071
<7072=7073
<7074=7075
<7075=7077,7076
<7078=7091,7087,7083,7079
<7079=7082,7081,7080
<7083=7086,7085,7084
<7087=7090,7089,7088
<7091=7094,7093,7092
<7095=7096
<7096=7100,7097
<7097=7098
<7098=7099
<7100=7101
<7162=7171,7170,7163
<7163=7167,7164
<7164=7166,7165
<7167=7169,7168
<7171=8005,7984,7979,7966,7957,7944,7925,7907,7902,7883,7868,7854,7723,7710,7701,7692,7673,7654,7635,7625,7615,7607,7588,7578,7364,7345,7330,7316,7310,7297,7224,7179,7172
<7172=7173
<7173=7177,7174
<7174=7175
<7175=7176
<7177=7178
<7179=7216,7212,7209,7180
<7180=7198,7181
<7181=7182
<7182=7196,7183
<7183=7194,7192,7188,7184
<7184=7185
<7185=7187,7186
<7188=7189
<7189=7191,7190
<7192=7193
<7194=7195
<7196=7197
<7198=7199
<7199=7208,7207,7200
<7200=7206,7201
<7201=7203,7202
<7203=7205,7204
<7209=7211,7210
<7212=7213
<7213=7215,7214
<7216=7217
<7217=7218
<7218=7223,7222,7219
<7219=7221,7220
<7224=7289,7285,7282,7225
<7225=7226
<7226=7274,7238,7227
<7227=7228
<7228=7229
<7229=7230
<7230=7236,7231
<7231=7234,7232
<7232=7233
<7234=7235
<7236=7237
<7238=7269,7256,7239
<7239=7240
<7240=7254,7241
<7241=7252,7250,7246,7242
<7242=7243
<7243=7245,7244
<7246=7247
<7247=7249,7248
<7250=7251
<7252=7253
<7254=7255
<7256=7257
<7257=7261,7258
<7258=7259
<7259=7260
<7261=7262
<7262=7264,7263
<7264=7266,7265
<7266=7268,7267
<7269=7270
<7270=7273,7272,7271
<7274=7275
<7275=7277,7276
<7277=7279,7278
<7279=7281,7280
<7282=7284,7283
<7285=7286
<7286=7288,7287
<7289=7290
<7290=7291
<7291=7296,7295,7292
<7292=7294,7293
<7297=7298
<7298=7308,7299
<7299=7306,7304,7302,7300
<7300=7301
<7302=7303
<7304=7305
<7306=7307
<7308=7309
<7310=7312,7311
<7312=7313
<7313=7315,7314
<7316=7317
<7317=7329,7328,7318
<7318=7327,7319
<7319=7325,7320
<7320=7323,7321
<7321=7322
<7323=7324
<7325=7326
<7330=7331
<7331=7343,7332
<7332=7341,7337,7333
<7333=7334
<7334=7336,7335
<7337=7338
<7338=7340,7339
<7341=7342
<7343=7344
<7345=7346
<7346=7356,7347
<7347=7350,7348
<7348=7349
<7350=7351
<7351=7353,7352
<7353=7355,7354
<7356=7357
<7357=7359,7358
<7359=7361,7360
<7361=7363,7362
<7364=7570,7566,7563,7365
<7365=7366
<7366=7555,7367
<7367=7546,7533,7514,7495,7480,7471,7458,7439,7426,7405,7392,7381,7368
<7368=7369
<7369=7373,7370
<7370=7371
<7371=7372
<7373=7374
<7374=7376,7375
<7376=7378,7377
<7378=7380,7379
<7381=7382
<7382=7384,7383
<7384=7385
<7385=7387,7386
<7387=7389,7388
<7389=7391,7390
<7392=7393
<7393=7397,7394
<7394=7395
<7395=7396
<7397=7398
<7398=7400,7399
<7400=7402,7401
<7402=7404,7403
<7405=7406
<7406=7424,7407
<7407=7416,7414,7408
<7408=7409
<7409=7413,7410
<7410=7412,7411
<7414=7415
<7416=7417
<7417=7419,7418
<7419=7421,7420
<7421=7423,7422
<7424=7425
<7426=7427
<7427=7431,7428
<7428=7429
<7429=7430
<7431=7432
<7432=7434,7433
<7434=7436,7435
<7436=7438,7437
<7439=7440
<7440=7456,7441
<7441=7454,7452,7450,7448,7446,7444,7442
<7442=7443
<7444=7445
<7446=7447
<7448=7449
<7450=7451
<7452=7453
<7454=7455
<7456=7457
<7458=7459
<7459=7463,7460
<7460=7461
<7461=7462
<7463=7464
<7464=7466,7465
<7466=7468,7467
<7468=7470,7469
<7471=7476,7472
<7472=7475,7474,7473
<7476=7479,7478,7477
<7480=7481
<7481=7493,7482
<7482=7491,7489,7487,7485,7483
<7483=7484
<7485=7486
<7487=7488
<7489=7490
<7491=7492
<7493=7494
<7495=7496
<7496=7512,7497
<7497=7510,7508,7506,7504,7502,7500,7498
<7498=7499
<7500=7501
<7502=7503
<7504=7505
<7506=7507
<7508=7509
<7510=7511
<7512=7513
<7514=7515
<7515=7531,7516
<7516=7529,7527,7525,7523,7521,7519,7517
<7517=7518
<7519=7520
<7521=7522
<7523=7524
<7525=7526
<7527=7528
<7529=7530
<7531=7532
<7533=7534
<7534=7538,7535
<7535=7536
<7536=7537
<7538=7539
<7539=7541,7540
<7541=7543,7542
<7543=7545,7544
<7546=7551,7547
<7547=7550,7549,7548
<7551=7554,7553,7552
<7555=7556
<7556=7558,7557
<7558=7560,7559
<7560=7562,7561
<7563=7565,7564
<7566=7567
<7567=7569,7568
<7570=7571
<7571=7572
<7572=7577,7576,7573
<7573=7575,7574
<7578=7579
<7579=7587,7586,7580
<7580=7585,7581
<7581=7583,7582
<7583=7584
<7588=7589
<7589=7605,7590
<7590=7603,7601,7599,7597,7595,7593,7591
<7591=7592
<7593=7594
<7595=7596
<7597=7598
<7599=7600
<7601=7602
<7603=7604
<7605=7606
<7607=7608
<7608=7612,7609
<7609=7611,7610
<7612=7614,7613
<7615=7616
<7616=7622,7617
<7617=7621,7618
<7618=7620,7619
<7622=7624,7623
<7625=7626
<7626=7632,7627
<7627=7631,7628
<7628=7630,7629
<7632=7634,7633
<7635=7636
<7636=7652,7637
<7637=7648,7644,7638
<7638=7639
<7639=7643,7640
<7640=7642,7641
<7644=7645
<7645=7647,7646
<7648=7649
<7649=7651,7650
<7652=7653
<7654=7655
<7655=7671,7656
<7656=7667,7663,7657
<7657=7658
<7658=7662,7659
<7659=7661,7660
<7663=7664
<7664=7666,7665
<7667=7668
<7668=7670,7669
<7671=7672
<7673=7674
<7674=7690,7675
<7675=7686,7682,7676
<7676=7677
<7677=7681,7678
<7678=7680,7679
<7682=7683
<7683=7685,7684
<7686=7687
<7687=7689,7688
<7690=7691
<7692=7693
<7693=7699,7694
<7694=7697,7695
<7695=7696
<7697=7698
<7699=7700
<7701=7702
<7702=7708,7703
<7703=7706,7704
<7704=7705
<7706=7707
<7708=7709
<7710=7719,7715,7711
<7711=7714,7713,7712
<7715=7718,7717,7716
<7719=7722,7721,7720
<7723=7846,7842,7839,7724
<7724=7812,7807,7784,7772,7760,7748,7725
<7725=7726
<7726=7746,7727
<7727=7744,7742,7736,7734,7728
<7728=7729
<7729=7731,7730
<7731=7733,7732
<7734=7735
<7736=7737
<7737=7739,7738
<7739=7741,7740
<7742=7743
<7744=7745
<7746=7747
<7748=7749
<7749=7753,7750
<7750=7752,7751
<7753=7755,7754
<7755=7757,7756
<7757=7759,7758
<7760=7761
<7761=7765,7762
<7762=7764,7763
<7765=7767,7766
<7767=7769,7768
<7769=7771,7770
<7772=7773
<7773=7777,7774
<7774=7776,7775
<7777=7779,7778
<7779=7781,7780
<7781=7783,7782
<7784=7785
<7785=7805,7786
<7786=7803,7801,7799,7797,7795,7789,7787
<7787=7788
<7789=7790
<7790=7792,7791
<7792=7794,7793
<7795=7796
<7797=7798
<7799=7800
<7801=7802
<7803=7804
<7805=7806
<7807=7808
<7808=7811,7810,7809
<7812=7813
<7813=7837,7814
<7814=7835,7833,7831,7829,7823,7821,7815
<7815=7816
<7816=7818,7817
<7818=7820,7819
<7821=7822
<7823=7824
<7824=7826,7825
<7826=7828,7827
<7829=7830
<7831=7832
<7833=7834
<7835=7836
<7837=7838
<7839=7841,7840
<7842=7843
<7843=7845,7844
<7846=7847
<7847=7848
<7848=7853,7852,7849
<7849=7851,7850
<7854=7855
<7855=7867,7866,7856
<7856=7865,7857
<7857=7864,7858
<7858=7860,7859
<7860=7861
<7861=7863,7862
<7868=7869
<7869=7881,7870
<7870=7879,7875,7871
<7871=7872
<7872=7874,7873
<7875=7876
<7876=7878,7877
<7879=7880
<7881=7882
<7883=7884
<7884=7894,7885
<7885=7888,7886
<7886=7887
<7888=7889
<7889=7891,7890
<7891=7893,7892
<7894=7895
<7895=7897,7896
<7897=7899,7898
<7899=7901,7900
<7902=7903
<7903=7906,7905,7904
<7907=7908
<7908=7924,7923,7909
<7909=7922,7910
<7910=7921,7911
<7911=7919,7912
<7912=7917,7915,7913
<7913=7914
<7915=7916
<7917=7918
<7919=7920
<7925=7926
<7926=7942,7927
<7927=7940,7938,7936,7934,7932,7930,7928
<7928=7929
<7930=7931
<7932=7933
<7934=7935
<7936=7937
<7938=7939
<7940=7941
<7942=7943
<7944=7945
<7945=7949,7946
<7946=7947
<7947=7948
<7949=7950
<7950=7952,7951
<7952=7954,7953
<7954=7956,7955
<7957=7962,7958
<7958=7961,7960,7959
<7962=7965,7964,7963
<7966=7967
<7967=7971,7968
<7968=7969
<7969=7970
<7971=7972
<7972=7974,7973
<7974=7976,7975
<7976=7978,7977
<7979=7980
<7980=7983,7982,7981
<7984=7985
<7985=8003,7986
<7986=8001,7993,7987
<7987=7988
<7988=7990,7989
<7990=7992,7991
<7993=7994
<7994=7996,7995
<7996=7998,7997
<7998=8000,7999
<8001=8002
<8003=8004
<8005=8006
<8006=8009,8008,8007
<8063=8069,8068,8064
<8064=8065
<8065=8067,8066
<8069=8308,8304,8289,8279,8070
<8070=8271,8267,8264,8071
<8071=8072
<8072=8256,8073
<8073=8245,8240,8227,8208,8193,8177,8172,8153,8148,8135,8130,8111,8098,8085,8074
<8074=8075
<8075=8077,8076
<8077=8078
<8078=8080,8079
<8080=8082,8081
<8082=8084,8083
<8085=8086
<8086=8090,8087
<8087=8088
<8088=8089
<8090=8091
<8091=8093,8092
<8093=8095,8094
<8095=8097,8096
<8098=8099
<8099=8103,8100
<8100=8101
<8101=8102
<8103=8104
<8104=8106,8105
<8106=8108,8107
<8108=8110,8109
<8111=8112
<8112=8128,8113
<8113=8126,8124,8122,8120,8118,8116,8114
<8114=8115
<8116=8117
<8118=8119
<8120=8121
<8122=8123
<8124=8125
<8126=8127
<8128=8129
<8130=8131
<8131=8134,8133,8132
<8135=8136
<8136=8140,8137
<8137=8138
<8138=8139
<8140=8141
<8141=8143,8142
<8143=8145,8144
<8145=8147,8146
<8148=8149
<8149=8152,8151,8150
<8153=8154
<8154=8170,8155
<8155=8168,8166,8164,8162,8160,8158,8156
<8156=8157
<8158=8159
<8160=8161
<8162=8163
<8164=8165
<8166=8167
<8168=8169
<8170=8171
<8172=8173
<8173=8176,8175,8174
<8177=8178
<8178=8192,8191,8179
<8179=8190,8180
<8180=8188,8181
<8181=8186,8184,8182
<8182=8183
<8184=8185
<8186=8187
<8188=8189
<8193=8194
<8194=8206,8195
<8195=8204,8202,8200,8198,8196
<8196=8197
<8198=8199
<8200=8201
<8202=8203
<8204=8205
<8206=8207
<8208=8209
<8209=8225,8210
<8210=8223,8221,8219,8217,8215,8213,8211
<8211=8212
<8213=8214
<8215=8216
<8217=8218
<8219=8220
<8221=8222
<8223=8224
<8225=8226
<8227=8228
<8228=8232,8229
<8229=8230
<8230=8231
<8232=8233
<8233=8235,8234
<8235=8237,8236
<8237=8239,8238
<8240=8241
<8241=8244,8243,8242
<8245=8246
<8246=8254,8247
<8247=8252,8250,8248
<8248=8249
<8250=8251
<8252=8253
<8254=8255
<8256=8257
<8257=8259,8258
<8259=8261,8260
<8261=8263,8262
<8264=8266,8265
<8267=8268
<8268=8270,8269
<8271=8272
<8272=8273
<8273=8278,8277,8274
<8274=8276,8275
<8279=8280
<8280=8288,8287,8281
<8281=8286,8282
<8282=8284,8283
<8284=8285
<8289=8290
<8290=8302,8291
<8291=8300,8298,8296,8294,8292
<8292=8293
<8294=8295
<8296=8297
<8298=8299
<8300=8301
<8302=8303
<8304=8305
<8305=8307,8306
<8308=8321,8317,8313,8309
<8309=8312,8311,8310
<8313=8316,8315,8314
<8317=8320,8319,8318
<8321=8324,8323,8322
<8351=8360,8359,8352
<8352=8356,8353
<8353=8355,8354
<8356=8358,8357
<8360=8438,8376,8363,8361
<8361=8362
<8363=8364
<8364=8375,8374,8365
<8365=8373,8366
<8366=8372,8367
<8367=8371,8368
<8368=8370,8369
<8376=8430,8426,8423,8377
<8377=8408,8393,8378
<8378=8379
<8379=8388,8380
<8380=8386,8381
<8381=8382
<8382=8383
<8383=8385,8384
<8386=8387
<8388=8390,8389
<8390=8392,8391
<8393=8394
<8394=8403,8395
<8395=8401,8396
<8396=8397
<8397=8398
<8398=8400,8399
<8401=8402
<8403=8405,8404
<8405=8407,8406
<8408=8409
<8409=8418,8410
<8410=8416,8411
<8411=8412
<8412=8413
<8413=8415,8414
<8416=8417
<8418=8420,8419
<8420=8422,8421
<8423=8425,8424
<8426=8427
<8427=8429,8428
<8430=8431
<8431=8432
<8432=8437,8436,8433
<8433=8435,8434
<8438=8439
<8439=8451,8450,8440
<8440=8449,8441
<8441=8447,8442
<8442=8445,8443
<8443=8444
<8445=8446
<8447=8448
<8485=8494,8493,8486
<8486=8490,8487
<8487=8489,8488
<8490=8492,8491
<8494=8664,8645,8629,8613,8595,8581,8567,8553,8532,8520,8513,8495
<8495=8496
<8496=8511,8497
<8497=8502,8500,8498
<8498=8499
<8500=8501
<8502=8503
<8503=8505,8504
<8505=8509,8506
<8506=8507
<8507=8508
<8509=8510
<8511=8512
<8513=8514
<8514=8519,8518,8515
<8515=8517,8516
<8520=8521
<8521=8531,8530,8522
<8522=8529,8523
<8523=8527,8524
<8524=8525
<8525=8526
<8527=8528
<8532=8533
<8533=8552,8551,8534
<8534=8550,8535
<8535=8548,8536
<8536=8539,8537
<8537=8538
<8539=8540
<8540=8546,8541
<8541=8544,8542
<8542=8543
<8544=8545
<8546=8547
<8548=8549
<8553=8554
<8554=8566,8565,8555
<8555=8564,8556
<8556=8562,8557
<8557=8560,8558
<8558=8559
<8560=8561
<8562=8563
<8567=8568
<8568=8580,8579,8569
<8569=8578,8570
<8570=8576,8571
<8571=8574,8572
<8572=8573
<8574=8575
<8576=8577
<8581=8582
<8582=8594,8593,8583
<8583=8592,8584
<8584=8590,8585
<8585=8588,8586
<8586=8587
<8588=8589
<8590=8591
<8595=8596
<8596=8612,8611,8597
<8597=8610,8598
<8598=8608,8599
<8599=8606,8604,8602,8600
<8600=8601
<8602=8603
<8604=8605
<8606=8607
<8608=8609
<8613=8614
<8614=8628,8627,8615
<8615=8626,8616
<8616=8624,8617
<8617=8622,8620,8618
<8618=8619
<8620=8621
<8622=8623
<8624=8625
<8629=8630
<8630=8644,8643,8631
<8631=8642,8632
<8632=8640,8633
<8633=8638,8636,8634
<8634=8635
<8636=8637
<8638=8639
<8640=8641
<8645=8646
<8646=8663,8662,8647
<8647=8661,8648
<8648=8659,8649
<8649=8650
<8650=8651
<8651=8657,8652
<8652=8655,8653
<8653=8654
<8655=8656
<8657=8658
<8659=8660
<8664=8667,8665
<8665=8666
<8667=8668
<8668=8670,8669
<8695=8698,8697,8696
<8698=8959,8699
<8699=8951,8947,8944,8700
<8700=8935,8919,8912,8901,8769,8753,8732,8719,8706,8705,8704,8703,8701
<8701=8702
<8706=8707
<8707=8717,8708
<8708=8715,8713,8709
<8709=8710
<8710=8712,8711
<8713=8714
<8715=8716
<8717=8718
<8719=8720
<8720=8729,8721
<8721=8727,8722
<8722=8725,8723
<8723=8724
<8725=8726
<8727=8728
<8729=8731,8730
<8732=8733
<8733=8751,8734
<8734=8749,8747,8745,8739,8735
<8735=8736
<8736=8738,8737
<8739=8740
<8740=8742,8741
<8742=8744,8743
<8745=8746
<8747=8748
<8749=8750
<8751=8752
<8753=8754
<8754=8768,8767,8755
<8755=8766,8756
<8756=8764,8757
<8757=8762,8760,8758
<8758=8759
<8760=8761
<8762=8763
<8764=8765
<8769=8893,8889,8886,8770
<8770=8873,8868,8857,8844,8823,8807,8790,8771
<8771=8772
<8772=8788,8773
<8773=8786,8784,8782,8780,8778,8776,8774
<8774=8775
<8776=8777
<8778=8779
<8780=8781
<8782=8783
<8784=8785
<8786=8787
<8788=8789
<8790=8791
<8791=8805,8792
<8792=8803,8801,8799,8795,8793
<8793=8794
<8795=8796
<8796=8798,8797
<8799=8800
<8801=8802
<8803=8804
<8805=8806
<8807=8808
<8808=8822,8821,8809
<8809=8820,8810
<8810=8818,8811
<8811=8816,8814,8812
<8812=8813
<8814=8815
<8816=8817
<8818=8819
<8823=8824
<8824=8842,8825
<8825=8840,8838,8836,8834,8830,8828,8826
<8826=8827
<8828=8829
<8830=8831
<8831=8833,8832
<8834=8835
<8836=8837
<8838=8839
<8840=8841
<8842=8843
<8844=8845
<8845=8849,8846
<8846=8847
<8847=8848
<8849=8850
<8850=8852,8851
<8852=8854,8853
<8854=8856,8855
<8857=8858
<8858=8867,8866,8859
<8859=8865,8860
<8860=8862,8861
<8862=8864,8863
<8868=8869
<8869=8872,8871,8870
<8873=8874
<8874=8885,8884,8875
<8875=8883,8876
<8876=8878,8877
<8878=8880,8879
<8880=8882,8881
<8886=8888,8887
<8889=8890
<8890=8892,8891
<8893=8894
<8894=8895
<8895=8900,8899,8896
<8896=8898,8897
<8901=8902
<8902=8911,8910,8909,8903
<8903=8908,8904
<8904=8907,8906,8905
<8912=8913
<8913=8918,8917,8914
<8914=8916,8915
<8919=8920
<8920=8934,8933,8921
<8921=8932,8922
<8922=8931,8923
<8923=8925,8924
<8925=8926
<8926=8928,8927
<8928=8930,8929
<8935=8936
<8936=8943,8942,8937
<8937=8941,8938
<8938=8940,8939
<8944=8946,8945
<8947=8948
<8948=8950,8949
<8951=8952
<8952=8953
<8953=8958,8957,8954
<8954=8956,8955
<8959=8960
<8960=8972,8971,8961
<8961=8970,8962
<8962=8969,8963
<8963=8965,8964
<8965=8966
<8966=8968,8967
<9008=9011,9010,9009
<9011=9801,9800,9799,9785,9778,9698,9684,9677,9027,9020,9019,9018,9017,9015,9014,9012
<9012=9013
<9015=9016
<9020=9021
<9021=9025,9022
<9022=9023
<9023=9024
<9025=9026
<9027=9669,9665,9662,9028
<9028=9640,9631,9029,9033,9054,9065,9070,9082,9103,9120,9126,9142,9143,9144,9145,9164,9169,9184,9189,9210,9214,9222,9241,9264,9279,9382,9400,9407,9414,9423,9440,9446,9447,9448,9449,9455,9456,9457,9458,9459,9460,9461,9462,9481,9485,9490,9545,9550,9567,9593,9598,9603
<9029=9030
<9030=9032,9031
<9033=9034
<9034=9052,9035
<9035=9050,9048,9046,9044,9042,9040,9036
<9036=9037
<9037=9039,9038
<9040=9041
<9042=9043
<9044=9045
<9046=9047
<9048=9049
<9050=9051
<9052=9053
<9054=9055
<9055=9063,9056
<9056=9061,9059,9057
<9057=9058
<9059=9060
<9061=9062
<9063=9064
<9065=9066
<9066=9069,9068,9067
<9070=9071
<9071=9081,9080,9072
<9072=9079,9073
<9073=9077,9074
<9074=9075
<9075=9076
<9077=9078
<9082=9083
<9083=9101,9084
<9084=9099,9097,9095,9093,9091,9089,9085
<9085=9086
<9086=9088,9087
<9089=9090
<9091=9092
<9093=9094
<9095=9096
<9097=9098
<9099=9100
<9101=9102
<9103=9104
<9104=9118,9105
<9105=9116,9114,9112,9108,9106
<9106=9107
<9108=9109
<9109=9111,9110
<9112=9113
<9114=9115
<9116=9117
<9118=9119
<9120=9122,9121
<9122=9123
<9123=9125,9124
<9126=9127
<9127=9141,9140,9128
<9128=9139,9129
<9129=9137,9130
<9130=9135,9133,9131
<9131=9132
<9133=9134
<9135=9136
<9137=9138
<9145=9146
<9146=9162,9147
<9147=9160,9158,9156,9154,9152,9150,9148
<9148=9149
<9150=9151
<9152=9153
<9154=9155
<9156=9157
<9158=9159
<9160=9161
<9162=9163
<9164=9165
<9165=9168,9167,9166
<9169=9170
<9170=9182,9171
<9171=9180,9178,9176,9174,9172
<9172=9173
<9174=9175
<9176=9177
<9178=9179
<9180=9181
<9182=9183
<9184=9185
<9185=9188,9187,9186
<9189=9190
<9190=9208,9191
<9191=9206,9204,9202,9200,9198,9196,9192
<9192=9193
<9193=9195,9194
<9196=9197
<9198=9199
<9200=9201
<9202=9203
<9204=9205
<9206=9207
<9208=9209
<9210=9211
<9211=9213,9212
<9214=9215
<9215=9217,9216
<9217=9219,9218
<9219=9221,9220
<9222=9223
<9223=9239,9224
<9224=9233,9231,9225
<9225=9226
<9226=9230,9227
<9227=9229,9228
<9231=9232
<9233=9234
<9234=9236,9235
<9236=9238,9237
<9239=9240
<9241=9260,9242
<9242=9243
<9243=9244
<9244=9258,9245
<9245=9256,9254,9252,9248,9246
<9246=9247
<9248=9249
<9249=9251,9250
<9252=9253
<9254=9255
<9256=9257
<9258=9259
<9260=9261
<9261=9263,9262
<9264=9273,9265
<9265=9266
<9266=9267
<9267=9271,9268
<9268=9269
<9269=9270
<9271=9272
<9273=9274
<9274=9278,9275
<9275=9277,9276
<9279=9374,9370,9367,9280
<9280=9352,9347,9334,9330,9309,9281
<9281=9300,9282
<9282=9291,9287,9283
<9283=9284
<9284=9286,9285
<9287=9288
<9288=9290,9289
<9291=9292
<9292=9299,9293
<9293=9297,9294
<9294=9295
<9295=9296
<9297=9298
<9300=9301
<9301=9303,9302
<9303=9307,9304
<9304=9305
<9305=9306
<9307=9308
<9309=9310
<9310=9328,9311
<9311=9326,9324,9322,9320,9318,9316,9312
<9312=9313
<9313=9315,9314
<9316=9317
<9318=9319
<9320=9321
<9322=9323
<9324=9325
<9326=9327
<9328=9329
<9330=9331
<9331=9333,9332
<9334=9335
<9335=9339,9336
<9336=9337
<9337=9338
<9339=9340
<9340=9342,9341
<9342=9344,9343
<9344=9346,9345
<9347=9348
<9348=9351,9350,9349
<9352=9353
<9353=9366,9365,9354
<9354=9364,9355
<9355=9357,9356
<9357=9359,9358
<9359=9361,9360
<9361=9363,9362
<9367=9369,9368
<9370=9371
<9371=9373,9372
<9374=9375
<9375=9376
<9376=9381,9380,9377
<9377=9379,9378
<9382=9383
<9383=9399,9398,9384
<9384=9397,9385
<9385=9396,9386
<9386=9388,9387
<9388=9389
<9389=9391,9390
<9391=9393,9392
<9393=9395,9394
<9400=9401
<9401=9406,9405,9402
<9402=9404,9403
<9407=9408
<9408=9413,9412,9409
<9409=9411,9410
<9414=9415
<9415=9422,9421,9416
<9416=9420,9417
<9417=9419,9418
<9423=9424
<9424=9439,9438,9437,9425
<9425=9436,9426
<9426=9433,9430,9427
<9427=9429,9428
<9430=9432,9431
<9433=9435,9434
<9440=9442,9441
<9442=9443
<9443=9445,9444
<9449=9451,9450
<9451=9452
<9452=9454,9453
<9462=9463
<9463=9479,9464
<9464=9477,9475,9473,9471,9467,9465
<9465=9466
<9467=9468
<9468=9470,9469
<9471=9472
<9473=9474
<9475=9476
<9477=9478
<9479=9480
<9481=9482
<9482=9484,9483
<9485=9486
<9486=9489,9488,9487
<9490=9537,9533,9530,9491
<9491=9519,9492
<9492=9493
<9493=9516,9494
<9494=9514,9495
<9495=9508,9502,9496
<9496=9497
<9497=9499,9498
<9499=9501,9500
<9502=9503
<9503=9505,9504
<9505=9507,9506
<9508=9509
<9509=9511,9510
<9511=9513,9512
<9514=9515
<9516=9518,9517
<9519=9520
<9520=9529,9528,9521
<9521=9527,9522
<9522=9526,9523
<9523=9525,9524
<9530=9532,9531
<9533=9534
<9534=9536,9535
<9537=9538
<9538=9539
<9539=9544,9543,9540
<9540=9542,9541
<9545=9546
<9546=9549,9548,9547
<9550=9551
<9551=9563,9552
<9552=9561,9559,9557,9555,9553
<9553=9554
<9555=9556
<9557=9558
<9559=9560
<9561=9562
<9563=9564
<9564=9566,9565
<9567=9568
<9568=9592,9591,9590,9569
<9569=9589,9570
<9570=9583,9577,9571
<9571=9575,9572
<9572=9573
<9573=9574
<9575=9576
<9577=9581,9578
<9578=9579
<9579=9580
<9581=9582
<9583=9587,9584
<9584=9585
<9585=9586
<9587=9588
<9593=9594
<9594=9597,9596,9595
<9598=9599
<9599=9602,9601,9600
<9603=9604
<9604=9630,9629,9605
<9605=9628,9606
<9606=9626,9607
<9607=9620,9614,9608
<9608=9609
<9609=9611,9610
<9611=9613,9612
<9614=9615
<9615=9617,9616
<9617=9619,9618
<9620=9621
<9621=9623,9622
<9623=9625,9624
<9626=9627
<9631=9632
<9632=9639,9638,9633
<9633=9637,9634
<9634=9636,9635
<9640=9656,9641
<9641=9649,9642
<9642=9643
<9643=9647,9644
<9644=9645
<9645=9646
<9647=9648
<9649=9650
<9650=9654,9651
<9651=9652
<9652=9653
<9654=9655
<9656=9657
<9657=9659,9658
<9659=9661,9660
<9662=9664,9663
<9665=9666
<9666=9668,9667
<9669=9670
<9670=9671
<9671=9676,9675,9672
<9672=9674,9673
<9677=9678
<9678=9683,9682,9679
<9679=9681,9680
<9684=9685
<9685=9697,9696,9686
<9686=9695,9687
<9687=9693,9688
<9688=9691,9689
<9689=9690
<9691=9692
<9693=9694
<9698=9770,9766,9763,9699
<9699=9730,9720,9710,9700
<9700=9701
<9701=9703,9702
<9703=9705,9704
<9705=9707,9706
<9707=9709,9708
<9710=9711
<9711=9713,9712
<9713=9715,9714
<9715=9717,9716
<9717=9719,9718
<9720=9721
<9721=9723,9722
<9723=9725,9724
<9725=9727,9726
<9727=9729,9728
<9730=9731
<9731=9760,9732
<9732=9758,9733
<9733=9750,9742,9734
<9734=9735
<9735=9737,9736
<9737=9739,9738
<9739=9741,9740
<9742=9743
<9743=9745,9744
<9745=9747,9746
<9747=9749,9748
<9750=9751
<9751=9753,9752
<9753=9755,9754
<9755=9757,9756
<9758=9759
<9760=9762,9761
<9763=9765,9764
<9766=9767
<9767=9769,9768
<9770=9771
<9771=9772
<9772=9777,9776,9773
<9773=9775,9774
<9778=9779
<9779=9784,9783,9780
<9780=9782,9781
<9785=9786
<9786=9798,9797,9787
<9787=9796,9788
<9788=9795,9789
<9789=9791,9790
<9791=9792
<9792=9794,9793
<9883=9889,9888,9884
<9884=9885
<9885=9887,9886
<9889=10076,9890
<9890=10068,10064,10061,9891
<9891=10049,10031,9892
<9892=10027,9893
<9893=10016,10006,9894
<9894=9998,9994,9991,9895
<9895=9978,9969,9955,9896
<9896=9947,9943,9940,9897
<9897=9898
<9898=9930,9899
<9899=9921,9901,9900
<9901=9902
<9902=9915,9903
<9903=9904
<9904=9905
<9905=9907,9906
<9907=9909,9908
<9909=9910
<9910=9912,9911
<9912=9914,9913
<9915=9916
<9916=9918,9917
<9918=9920,9919
<9921=9922
<9922=9928,9923
<9923=9926,9924
<9924=9925
<9926=9927
<9928=9929
<9930=9931
<9931=9933,9932
<9933=9935,9934
<9935=9937,9936
<9937=9939,9938
<9940=9942,9941
<9943=9944
<9944=9946,9945
<9947=9948
<9948=9949
<9949=9954,9953,9950
<9950=9952,9951
<9955=9956
<9956=9968,9967,9957
<9957=9966,9958
<9958=9960,9959
<9960=9961
<9961=9963,9962
<9963=9965,9964
<9969=9970
<9970=9977,9976,9971
<9971=9975,9972
<9972=9974,9973
<9978=9979
<9979=9990,9989,9980
<9980=9988,9981
<9981=9983,9982
<9983=9985,9984
<9985=9987,9986
<9991=9993,9992
<9994=9995
<9995=9997,9996
<9998=9999
<9999=10000
<10000=10005,10004,10001
<10001=10003,10002
<10006=10007
<10007=10009,10008
<10009=10011,10010
<10011=10013,10012
<10013=10015,10014
<10016=10017
<10017=10025,10018
<10018=10023,10021,10019
<10019=10020
<10021=10022
<10023=10024
<10025=10026
<10027=10028
<10028=10030,10029
<10031=10032
<10032=10048,10047,10033
<10033=10046,10034
<10034=10045,10035
<10035=10037,10036
<10037=10038
<10038=10040,10039
<10040=10042,10041
<10042=10044,10043
<10049=10051,10050
<10051=10052
<10052=10060,10053
<10053=10055,10054
<10055=10057,10056
<10057=10059,10058
<10061=10063,10062
<10064=10065
<10065=10067,10066
<10068=10069
<10069=10070
<10070=10075,10074,10071
<10071=10073,10072
<10076=10077
<10077=10085,10084,10078
<10078=10083,10079
<10079=10081,10080
<10081=10082
<10121=10130,10129,10122
<10122=10126,10123
<10123=10125,10124
<10126=10128,10127
<10130=10751,10742,10729,10716,10694,10682,10666,10650,10639,10620,10428,10236,10225,10214,10203,10198,10179,10163,10151,10142,10133,10131
<10131=10132
<10133=10136,10134
<10134=10135
<10136=10137
<10137=10141,10138
<10138=10140,10139
<10142=10145,10143
<10143=10144
<10145=10146
<10146=10150,10147
<10147=10149,10148
<10151=10154,10152
<10152=10153
<10154=10155
<10155=10157,10156
<10157=10161,10158
<10158=10159
<10159=10160
<10161=10162
<10163=10164
<10164=10178,10177,10165
<10165=10176,10166
<10166=10174,10167
<10167=10172,10170,10168
<10168=10169
<10170=10171
<10172=10173
<10174=10175
<10179=10180
<10180=10196,10181
<10181=10194,10192,10190,10188,10186,10184,10182
<10182=10183
<10184=10185
<10186=10187
<10188=10189
<10190=10191
<10192=10193
<10194=10195
<10196=10197
<10198=10199
<10199=10202,10201,10200
<10203=10204
<10204=10213,10212,10205
<10205=10211,10206
<10206=10210,10207
<10207=10209,10208
<10214=10215
<10215=10224,10223,10216
<10216=10222,10217
<10217=10221,10218
<10218=10220,10219
<10225=10226
<10226=10235,10234,10227
<10227=10233,10228
<10228=10232,10229
<10229=10231,10230
<10236=10420,10416,10413,10237
<10237=10400,10391,10368,10345,10341,10320,10304,10288,10279,10250,10246,10242,10238
<10238=10239
<10239=10241,10240
<10242=10243
<10243=10245,10244
<10246=10247
<10247=10249,10248
<10250=10251
<10251=10278,10277,10252
<10252=10276,10253
<10253=10274,10254
<10254=10255
<10255=10256
<10256=10272,10257
<10257=10268,10262,10258
<10258=10259
<10259=10261,10260
<10262=10263
<10263=10265,10264
<10265=10267,10266
<10268=10269
<10269=10271,10270
<10272=10273
<10274=10275
<10279=10280
<10280=10287,10286,10281
<10281=10285,10282
<10282=10284,10283
<10288=10289
<10289=10303,10302,10290
<10290=10301,10291
<10291=10299,10292
<10292=10297,10295,10293
<10293=10294
<10295=10296
<10297=10298
<10299=10300
<10304=10305
<10305=10319,10318,10306
<10306=10317,10307
<10307=10315,10308
<10308=10313,10311,10309
<10309=10310
<10311=10312
<10313=10314
<10315=10316
<10320=10321
<10321=10339,10322
<10322=10337,10335,10333,10331,10329,10327,10323
<10323=10324
<10324=10326,10325
<10327=10328
<10329=10330
<10331=10332
<10333=10334
<10335=10336
<10337=10338
<10339=10340
<10341=10342
<10342=10344,10343
<10345=10346
<10346=10366,10347
<10347=10364,10362,10360,10358,10352,10350,10348
<10348=10349
<10350=10351
<10352=10353
<10353=10355,10354
<10355=10357,10356
<10358=10359
<10360=10361
<10362=10363
<10364=10365
<10366=10367
<10368=10369
<10369=10389,10370
<10370=10387,10385,10383,10381,10375,10373,10371
<10371=10372
<10373=10374
<10375=10376
<10376=10378,10377
<10378=10380,10379
<10381=10382
<10383=10384
<10385=10386
<10387=10388
<10389=10390
<10391=10396,10392
<10392=10395,10394,10393
<10396=10399,10398,10397
<10400=10401
<10401=10412,10411,10402
<10402=10410,10403
<10403=10405,10404
<10405=10407,10406
<10407=10409,10408
<10413=10415,10414
<10416=10417
<10417=10419,10418
<10420=10421
<10421=10422
<10422=10427,10426,10423
<10423=10425,10424
<10428=10612,10608,10605,10429
<10429=10592,10583,10560,10537,10533,10512,10496,10480,10471,10442,10438,10434,10430
<10430=10431
<10431=10433,10432
<10434=10435
<10435=10437,10436
<10438=10439
<10439=10441,10440
<10442=10443
<10443=10470,10469,10444
<10444=10468,10445
<10445=10466,10446
<10446=10447
<10447=10448
<10448=10464,10449
<10449=10460,10454,10450
<10450=10451
<10451=10453,10452
<10454=10455
<10455=10457,10456
<10457=10459,10458
<10460=10461
<10461=10463,10462
<10464=10465
<10466=10467
<10471=10472
<10472=10479,10478,10473
<10473=10477,10474
<10474=10476,10475
<10480=10481
<10481=10495,10494,10482
<10482=10493,10483
<10483=10491,10484
<10484=10489,10487,10485
<10485=10486
<10487=10488
<10489=10490
<10491=10492
<10496=10497
<10497=10511,10510,10498
<10498=10509,10499
<10499=10507,10500
<10500=10505,10503,10501
<10501=10502
<10503=10504
<10505=10506
<10507=10508
<10512=10513
<10513=10531,10514
<10514=10529,10527,10525,10523,10521,10519,10515
<10515=10516
<10516=10518,10517
<10519=10520
<10521=10522
<10523=10524
<10525=10526
<10527=10528
<10529=10530
<10531=10532
<10533=10534
<10534=10536,10535
<10537=10538
<10538=10558,10539
<10539=10556,10554,10552,10550,10544,10542,10540
<10540=10541
<10542=10543
<10544=10545
<10545=10547,10546
<10547=10549,10548
<10550=10551
<10552=10553
<10554=10555
<10556=10557
<10558=10559
<10560=10561
<10561=10581,10562
<10562=10579,10577,10575,10573,10567,10565,10563
<10563=10564
<10565=10566
<10567=10568
<10568=10570,10569
<10570=10572,10571
<10573=10574
<10575=10576
<10577=10578
<10579=10580
<10581=10582
<10583=10588,10584
<10584=10587,10586,10585
<10588=10591,10590,10589
<10592=10593
<10593=10604,10603,10594
<10594=10602,10595
<10595=10597,10596
<10597=10599,10598
<10599=10601,10600
<10605=10607,10606
<10608=10609
<10609=10611,10610
<10612=10613
<10613=10614
<10614=10619,10618,10615
<10615=10617,10616
<10620=10633,10627,10621
<10621=10626,10625,10622
<10622=10624,10623
<10627=10632,10631,10628
<10628=10630,10629
<10633=10638,10637,10634
<10634=10636,10635
<10639=10640
<10640=10648,10641
<10641=10642
<10642=10643
<10643=10645,10644
<10645=10647,10646
<10648=10649
<10650=10651
<10651=10665,10664,10652
<10652=10663,10653
<10653=10655,10654
<10655=10656
<10656=10658,10657
<10658=10660,10659
<10660=10662,10661
<10666=10667
<10667=10681,10680,10668
<10668=10679,10669
<10669=10671,10670
<10671=10672
<10672=10674,10673
<10674=10676,10675
<10676=10678,10677
<10682=10685,10683
<10683=10684
<10685=10686
<10686=10688,10687
<10688=10690,10689
<10690=10691
<10691=10693,10692
<10694=10695
<10695=10715,10714,10696
<10696=10713,10697
<10697=10711,10698
<10698=10705,10699
<10699=10700
<10700=10702,10701
<10702=10704,10703
<10705=10706
<10706=10708,10707
<10708=10710,10709
<10711=10712
<10716=10717
<10717=10721,10718
<10718=10719
<10719=10720
<10721=10722
<10722=10724,10723
<10724=10726,10725
<10726=10728,10727
<10729=10730
<10730=10734,10731
<10731=10732
<10732=10733
<10734=10735
<10735=10737,10736
<10737=10739,10738
<10739=10741,10740
<10742=10747,10743
<10743=10746,10745,10744
<10747=10750,10749,10748
<10751=10754,10752
<10752=10753
<10754=10755
<10755=10765,10756
<10756=10764,10757
<10757=10759,10758
<10759=10761,10760
<10761=10763,10762
<10765=10773,10766
<10766=10768,10767
<10768=10770,10769
<10770=10772,10771
