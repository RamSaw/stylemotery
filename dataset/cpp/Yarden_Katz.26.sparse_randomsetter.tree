>11	FunctionDef	dostuff (const char * name , EigenSparseMatrix & sm1)
>12	ParameterList	const char * name , EigenSparseMatrix & sm1
>13	Parameter	 
>14	Identifier	sm1
>15	ParameterType	EigenSparseMatrix &
>16	Parameter	 
>17	Identifier	name
>18	ParameterType	const char *
>19	ReturnType	void
>20	CompoundStatement	 
>21	ExpressionStatement	 
>22	ShiftExpression	std 
>23	ShiftExpression	\"  back
>24	ShiftExpression	t . value ( ) << \"\n\"
>25	PrimaryExpression	\"\n\"
>26	CallExpression	t . value ( )
>27	ArgumentList	 
>28	Callee	t . value
>29	MemberAccess	t . value
>30	Identifier	value
>31	Identifier	t
>32	PrimaryExpression	\"  back
>33	Identifier	std 
>34	ExpressionStatement	 
>35	CallExpression	t . stop ( )
>36	ArgumentList	 
>37	Callee	t . stop
>38	MemberAccess	t . stop
>39	Identifier	stop
>40	Identifier	t
>41	ExpressionStatement	 
>42	Identifier	set1
>43	Statement	 
>44	ExpressionStatement	 
>45	CallExpression	t . start ( )
>46	ArgumentList	 
>47	Callee	t . start
>48	MemberAccess	t . start
>49	Identifier	start
>50	Identifier	t
>51	ExpressionStatement	 
>52	CallExpression	t . reset ( )
>53	ArgumentList	 
>54	Callee	t . reset
>55	MemberAccess	t . reset
>56	Identifier	reset
>57	Identifier	t
>58	ExpressionStatement	 
>59	ShiftExpression	std 
>60	ShiftExpression	\"std
>61	ShiftExpression	t . value ( ) - rtime << \" nnz=\" << set1 -> nonZeros ( ) << std 
>62	ShiftExpression	\" nnz=\" << set1 -> nonZeros ( ) << std 
>63	ShiftExpression	set1 -> nonZeros ( ) << std 
>64	Identifier	std 
>65	CallExpression	set1 -> nonZeros ( )
>66	ArgumentList	 
>67	Callee	set1 -> nonZeros
>68	PtrMemberAccess	set1 -> nonZeros
>69	Identifier	nonZeros
>70	Identifier	set1
>71	PrimaryExpression	\" nnz=\"
>72	AdditiveExpression	t . value ( ) - rtime
>73	Identifier	rtime
>74	CallExpression	t . value ( )
>75	ArgumentList	 
>76	Callee	t . value
>77	MemberAccess	t . value
>78	Identifier	value
>79	Identifier	t
>80	PrimaryExpression	\"std
>81	Identifier	std 
>82	ExpressionStatement	 
>83	CallExpression	t . stop ( )
>84	ArgumentList	 
>85	Callee	t . stop
>86	MemberAccess	t . stop
>87	Identifier	stop
>88	Identifier	t
>89	ForStatement	for ( int k = 0 ; k < nentries ; ++ k )
>90	ExpressionStatement	 
>91	AssignmentExpr	( * set1 ) ( internal 
>92	PrimaryExpression	1
>93	CallExpression	( * set1 ) ( internal 
>94	ArgumentList	internal 
>95	Argument	internal 
>96	RelationalExpression	internal 
>97	RelationalExpression	int > ( 0 , cols - 1 )
>98	Expression	0 , cols - 1
>99	AdditiveExpression	cols - 1
>100	PrimaryExpression	1
>101	Identifier	cols
>102	PrimaryExpression	0
>103	Identifier	int
>104	Identifier	internal 
>105	Argument	internal 
>106	RelationalExpression	internal 
>107	RelationalExpression	int > ( 0 , rows - 1 )
>108	Expression	0 , rows - 1
>109	AdditiveExpression	rows - 1
>110	PrimaryExpression	1
>111	Identifier	rows
>112	PrimaryExpression	0
>113	Identifier	int
>114	Identifier	internal 
>115	Callee	* set1
>116	UnaryOp	* set1
>117	Identifier	set1
>118	UnaryOperator	*
>119	UnaryExpression	 
>120	Identifier	k
>121	IncDec	++
>122	Condition	 
>123	RelationalExpression	k < nentries
>124	Identifier	nentries
>125	Identifier	k
>126	ForInit	 
>127	IdentifierDeclStatement	int k = 0 ;
>128	IdentifierDecl	k = 0
>129	AssignmentExpr	k = 0
>130	PrimaryExpression	0
>131	Identifier	k
>132	Identifier	k
>133	IdentifierDeclType	int
>134	ExpressionStatement	 
>135	CallExpression	t . start ( )
>136	ArgumentList	 
>137	Callee	t . start
>138	MemberAccess	t . start
>139	Identifier	start
>140	Identifier	t
>141	ExpressionStatement	 
>142	CallExpression	t . reset ( )
>143	ArgumentList	 
>144	Callee	t . reset
>145	MemberAccess	t . reset
>146	Identifier	reset
>147	Identifier	t
>148	IdentifierDeclStatement	 
>149	IdentifierDecl	* set1 = new SetterType ( sm1 )
>150	AssignmentExpr	* set1 = new SetterType ( sm1 )
>151	Identifier	sm1
>152	Identifier	sm1
>153	Identifier	set1
>154	IdentifierDeclType	SetterType *
>155	IdentifierDeclStatement	 
>156	IdentifierDecl	t
>157	Identifier	t
>158	IdentifierDeclType	BenchTimer
>159	ExpressionStatement	 
>160	CallExpression	sm1 . setZero ( )
>161	ArgumentList	 
>162	Callee	sm1 . setZero
>163	MemberAccess	sm1 . setZero
>164	Identifier	setZero
>165	Identifier	sm1
>166	IdentifierDeclStatement	 
>167	IdentifierDecl	cols = sm1 . cols ( )
>168	AssignmentExpr	cols = sm1 . cols ( )
>169	CallExpression	sm1 . cols ( )
>170	ArgumentList	 
>171	Callee	sm1 . cols
>172	MemberAccess	sm1 . cols
>173	Identifier	cols
>174	Identifier	sm1
>175	Identifier	cols
>176	Identifier	cols
>177	IdentifierDeclType	int
>178	IdentifierDeclStatement	 
>179	IdentifierDecl	rows = sm1 . rows ( )
>180	AssignmentExpr	rows = sm1 . rows ( )
>181	CallExpression	sm1 . rows ( )
>182	ArgumentList	 
>183	Callee	sm1 . rows
>184	MemberAccess	sm1 . rows
>185	Identifier	rows
>186	Identifier	sm1
>187	Identifier	rows
>188	Identifier	rows
>189	IdentifierDeclType	int
>206	FunctionDef	main (int argc , char * argv [ ])
>207	ParameterList	int argc , char * argv [ ]
>208	Parameter	 
>209	Identifier	argv
>210	ParameterType	char * [ ]
>211	Parameter	 
>212	Identifier	argc
>213	ParameterType	int
>214	ReturnType	int
>215	CompoundStatement	 
>216	ReturnStatement	 
>217	PrimaryExpression	0
>218	ForStatement	for ( ; ; )
>219	CompoundStatement	 
>220	ExpressionStatement	 
>221	ShiftExpression	std 
>222	PrimaryExpression	\"\n\n\"
>223	Identifier	std 
>224	ExpressionStatement	 
>225	Expression	\"google
>226	Identifier	sm1
>227	PrimaryExpression	\"google
>228	Statement	 
>229	Statement	 
>230	Statement	 
>231	Statement	 
>232	Statement	 
>233	Statement	 
>234	Statement	 
>235	Statement	 
>236	Statement	 
>237	Statement	 
>238	Statement	 
>239	ExpressionStatement	 
>240	Expression	\"google
>241	Identifier	sm1
>242	PrimaryExpression	\"google
>243	Statement	 
>244	Statement	 
>245	Statement	 
>246	Statement	 
>247	Statement	 
>248	Statement	 
>249	Statement	 
>250	Statement	 
>251	Statement	 
>252	Statement	 
>253	Statement	 
>254	ExpressionStatement	 
>255	Expression	\"gnu
>256	Identifier	sm1
>257	PrimaryExpression	\"gnu
>258	Statement	 
>259	Statement	 
>260	Statement	 
>261	Statement	 
>262	Statement	 
>263	Statement	 
>264	Statement	 
>265	Statement	 
>266	Statement	 
>267	Statement	 
>268	Statement	 
>269	ExpressionStatement	 
>270	Expression	\"std
>271	Identifier	sm1
>272	PrimaryExpression	\"std
>273	Statement	 
>274	Statement	 
>275	Statement	 
>276	Statement	 
>277	Statement	 
>278	Statement	 
>279	Statement	 
>280	Statement	 
>281	Statement	 
>282	Statement	 
>283	Statement	 
>284	IdentifierDeclStatement	 
>285	IdentifierDecl	Bits = 6
>286	AssignmentExpr	Bits = 6
>287	PrimaryExpression	6
>288	Identifier	Bits
>289	Identifier	Bits
>290	IdentifierDeclType	const int
>291	ExpressionStatement	 
>292	ShiftExpression	std 
>293	ShiftExpression	\"rtime = \" << rtime << \" (\" << dummy << \")\n\n\"
>294	ShiftExpression	rtime << \" (\" << dummy << \")\n\n\"
>295	ShiftExpression	\" (\" << dummy << \")\n\n\"
>296	ShiftExpression	dummy << \")\n\n\"
>297	PrimaryExpression	\")\n\n\"
>298	Identifier	dummy
>299	PrimaryExpression	\" (\"
>300	Identifier	rtime
>301	PrimaryExpression	\"rtime = \"
>302	Identifier	std 
>303	ExpressionStatement	 
>304	AssignmentExpr	rtime = t . value ( )
>305	CallExpression	t . value ( )
>306	ArgumentList	 
>307	Callee	t . value
>308	MemberAccess	t . value
>309	Identifier	value
>310	Identifier	t
>311	Identifier	rtime
>312	ExpressionStatement	 
>313	CallExpression	t . stop ( )
>314	ArgumentList	 
>315	Callee	t . stop
>316	MemberAccess	t . stop
>317	Identifier	stop
>318	Identifier	t
>319	ForStatement	for ( int k = 0 ; k < nentries ; ++ k )
>320	ExpressionStatement	 
>321	AssignmentExpr	dummy = internal 
>322	RelationalExpression	internal 
>323	RelationalExpression	int > ( 0 , rows - 1 ) + internal 
>324	RelationalExpression	( 0 , rows - 1 ) + internal 
>325	RelationalExpression	int > ( 0 , cols - 1 )
>326	Expression	0 , cols - 1
>327	AdditiveExpression	cols - 1
>328	PrimaryExpression	1
>329	Identifier	cols
>330	PrimaryExpression	0
>331	Identifier	int
>332	AdditiveExpression	( 0 , rows - 1 ) + internal 
>333	Identifier	internal 
>334	Expression	0 , rows - 1
>335	AdditiveExpression	rows - 1
>336	PrimaryExpression	1
>337	Identifier	rows
>338	PrimaryExpression	0
>339	Identifier	int
>340	Identifier	internal 
>341	Identifier	dummy
>342	UnaryExpression	 
>343	Identifier	k
>344	IncDec	++
>345	Condition	 
>346	RelationalExpression	k < nentries
>347	Identifier	nentries
>348	Identifier	k
>349	ForInit	 
>350	IdentifierDeclStatement	int k = 0 ;
>351	IdentifierDecl	k = 0
>352	AssignmentExpr	k = 0
>353	PrimaryExpression	0
>354	Identifier	k
>355	Identifier	k
>356	IdentifierDeclType	int
>357	ExpressionStatement	 
>358	CallExpression	t . start ( )
>359	ArgumentList	 
>360	Callee	t . start
>361	MemberAccess	t . start
>362	Identifier	start
>363	Identifier	t
>364	ExpressionStatement	 
>365	CallExpression	t . reset ( )
>366	ArgumentList	 
>367	Callee	t . reset
>368	MemberAccess	t . reset
>369	Identifier	reset
>370	Identifier	t
>371	IdentifierDeclStatement	 
>372	IdentifierDecl	t
>373	Identifier	t
>374	IdentifierDeclType	BenchTimer
>375	IdentifierDeclStatement	 
>376	IdentifierDecl	dummy
>377	Identifier	dummy
>378	IdentifierDeclType	int
>379	ExpressionStatement	 
>380	ShiftExpression	std 
>381	ShiftExpression	\"n = \" << nentries << \"\n\"
>382	ShiftExpression	nentries << \"\n\"
>383	PrimaryExpression	\"\n\"
>384	Identifier	nentries
>385	PrimaryExpression	\"n = \"
>386	Identifier	std 
>387	ExpressionStatement	 
>388	AssignmentExpr	nentries = rows * cols * density
>389	MultiplicativeExpression	rows * cols * density
>390	MultiplicativeExpression	cols * density
>391	Identifier	density
>392	Identifier	cols
>393	Identifier	rows
>394	Identifier	nentries
>395	IdentifierDeclStatement	 
>396	IdentifierDecl	sm2 ( rows , cols )
>397	Expression	rows , cols
>398	Identifier	cols
>399	Identifier	rows
>400	Identifier	sm2
>401	IdentifierDeclType	EigenSparseMatrix
>402	IdentifierDecl	sm1 ( rows , cols )
>403	Expression	rows , cols
>404	Identifier	cols
>405	Identifier	rows
>406	Identifier	sm1
>407	IdentifierDeclType	EigenSparseMatrix
>408	IdentifierDeclStatement	 
>409	IdentifierDecl	density = DENSITY
>410	AssignmentExpr	density = DENSITY
>411	Identifier	DENSITY
>412	Identifier	DENSITY
>413	Identifier	density
>414	IdentifierDeclType	float
>415	IdentifierDeclStatement	 
>416	IdentifierDecl	cols = SIZE
>417	AssignmentExpr	cols = SIZE
>418	Identifier	SIZE
>419	Identifier	SIZE
>420	Identifier	cols
>421	IdentifierDeclType	int
>422	IdentifierDeclStatement	 
>423	IdentifierDecl	rows = SIZE
>424	AssignmentExpr	rows = SIZE
>425	Identifier	SIZE
>426	Identifier	SIZE
>427	Identifier	rows
>428	IdentifierDeclType	int
<11=20,19,12
<12=16,13
<13=15,14
<16=18,17
<20=178,166,159,155,148,141,134,89,82,58,51,44,43,41,34,21
<21=22
<22=33,23
<23=32,24
<24=26,25
<26=28,27
<28=29
<29=31,30
<34=35
<35=37,36
<37=38
<38=40,39
<41=42
<44=45
<45=47,46
<47=48
<48=50,49
<51=52
<52=54,53
<54=55
<55=57,56
<58=59
<59=81,60
<60=80,61
<61=72,62
<62=71,63
<63=65,64
<65=67,66
<67=68
<68=70,69
<72=74,73
<74=76,75
<76=77
<77=79,78
<82=83
<83=85,84
<85=86
<86=88,87
<89=126,122,119,90
<90=91
<91=93,92
<93=115,94
<94=105,95
<95=96
<96=104,97
<97=103,98
<98=102,99
<99=101,100
<105=106
<106=114,107
<107=113,108
<108=112,109
<109=111,110
<115=116
<116=118,117
<119=121,120
<122=123
<123=125,124
<126=127
<127=128
<128=133,132,129
<129=131,130
<134=135
<135=137,136
<137=138
<138=140,139
<141=142
<142=144,143
<144=145
<145=147,146
<148=149
<149=154,153,150
<150=152,151
<155=156
<156=158,157
<159=160
<160=162,161
<162=163
<163=165,164
<166=167
<167=177,176,168
<168=175,169
<169=171,170
<171=172
<172=174,173
<178=179
<179=189,188,180
<180=187,181
<181=183,182
<183=184
<184=186,185
<206=215,214,207
<207=211,208
<208=210,209
<211=213,212
<215=422,415,408,395,387,379,375,371,364,357,319,312,303,291,284,218,216
<216=217
<218=219
<219=283,282,281,280,279,278,277,276,275,274,273,269,268,267,266,265,264,263,262,261,260,259,258,254,253,252,251,250,249,248,247,246,245,244,243,239,238,237,236,235,234,233,232,231,230,229,228,224,220
<220=221
<221=223,222
<224=225
<225=227,226
<239=240
<240=242,241
<254=255
<255=257,256
<269=270
<270=272,271
<284=285
<285=290,289,286
<286=288,287
<291=292
<292=302,293
<293=301,294
<294=300,295
<295=299,296
<296=298,297
<303=304
<304=311,305
<305=307,306
<307=308
<308=310,309
<312=313
<313=315,314
<315=316
<316=318,317
<319=349,345,342,320
<320=321
<321=341,322
<322=340,323
<323=339,324
<324=332,325
<325=331,326
<326=330,327
<327=329,328
<332=334,333
<334=338,335
<335=337,336
<342=344,343
<345=346
<346=348,347
<349=350
<350=351
<351=356,355,352
<352=354,353
<357=358
<358=360,359
<360=361
<361=363,362
<364=365
<365=367,366
<367=368
<368=370,369
<371=372
<372=374,373
<375=376
<376=378,377
<379=380
<380=386,381
<381=385,382
<382=384,383
<387=388
<388=394,389
<389=393,390
<390=392,391
<395=402,396
<396=401,400,397
<397=399,398
<402=407,406,403
<403=405,404
<408=409
<409=414,413,410
<410=412,411
<415=416
<416=421,420,417
<417=419,418
<422=423
<423=428,427,424
<424=426,425
