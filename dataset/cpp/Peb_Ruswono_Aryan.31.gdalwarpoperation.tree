>5	FunctionDef	GDALWarpOperation 
>6	ParameterList	 
>7	CompoundStatement	 
>8	ExpressionStatement	 
>9	AssignmentExpr	nLastTimeReported = 0
>10	PrimaryExpression	0
>11	Identifier	nLastTimeReported
>12	ExpressionStatement	 
>13	AssignmentExpr	bReportTimings = FALSE
>14	Identifier	FALSE
>15	Identifier	bReportTimings
>16	ExpressionStatement	 
>17	AssignmentExpr	panChunkList = NULL
>18	Identifier	NULL
>19	Identifier	panChunkList
>20	ExpressionStatement	 
>21	AssignmentExpr	nChunkListMax = 0
>22	PrimaryExpression	0
>23	Identifier	nChunkListMax
>24	ExpressionStatement	 
>25	AssignmentExpr	nChunkListCount = 0
>26	PrimaryExpression	0
>27	Identifier	nChunkListCount
>28	ExpressionStatement	 
>29	AssignmentExpr	hWarpMutex = NULL
>30	Identifier	NULL
>31	Identifier	hWarpMutex
>32	ExpressionStatement	 
>33	AssignmentExpr	hIOMutex = NULL
>34	Identifier	NULL
>35	Identifier	hIOMutex
>36	ExpressionStatement	 
>37	AssignmentExpr	psOptions = NULL
>38	Identifier	NULL
>39	Identifier	psOptions
>53	FunctionDef	GDALWarpOperation 
>54	ParameterList	 
>55	CompoundStatement	 
>56	ExpressionStatement	 
>57	CallExpression	WipeChunkList ( )
>58	ArgumentList	 
>59	Callee	WipeChunkList
>60	Identifier	WipeChunkList
>61	IfStatement	if ( hIOMutex != NULL )
>62	CompoundStatement	 
>63	ExpressionStatement	 
>64	CallExpression	CPLDestroyMutex ( hWarpMutex )
>65	ArgumentList	hWarpMutex
>66	Argument	hWarpMutex
>67	Identifier	hWarpMutex
>68	Callee	CPLDestroyMutex
>69	Identifier	CPLDestroyMutex
>70	ExpressionStatement	 
>71	CallExpression	CPLDestroyMutex ( hIOMutex )
>72	ArgumentList	hIOMutex
>73	Argument	hIOMutex
>74	Identifier	hIOMutex
>75	Callee	CPLDestroyMutex
>76	Identifier	CPLDestroyMutex
>77	Condition	 
>78	EqualityExpression	hIOMutex != NULL
>79	Identifier	NULL
>80	Identifier	hIOMutex
>81	ExpressionStatement	 
>82	CallExpression	WipeOptions ( )
>83	ArgumentList	 
>84	Callee	WipeOptions
>85	Identifier	WipeOptions
>92	FunctionDef	GDALWarpOperation 
>93	ParameterList	 
>94	ReturnType	const GDALWarpOptions *
>95	CompoundStatement	 
>96	ReturnStatement	 
>97	Identifier	psOptions
>102	FunctionDef	GDALWarpOperation 
>103	ParameterList	 
>104	ReturnType	void
>105	CompoundStatement	 
>106	IfStatement	if ( psOptions != NULL )
>107	CompoundStatement	 
>108	ExpressionStatement	 
>109	AssignmentExpr	psOptions = NULL
>110	Identifier	NULL
>111	Identifier	psOptions
>112	ExpressionStatement	 
>113	CallExpression	GDALDestroyWarpOptions ( psOptions )
>114	ArgumentList	psOptions
>115	Argument	psOptions
>116	Identifier	psOptions
>117	Callee	GDALDestroyWarpOptions
>118	Identifier	GDALDestroyWarpOptions
>119	Condition	 
>120	EqualityExpression	psOptions != NULL
>121	Identifier	NULL
>122	Identifier	psOptions
>128	FunctionDef	GDALWarpOperation 
>129	ParameterList	 
>130	ReturnType	int
>131	CompoundStatement	 
>132	ReturnStatement	 
>133	Identifier	TRUE
>134	IfStatement	if ( psOptions -> nDstAlphaBand > 0 && psOptions -> pfnDstDensityMaskFunc != NULL )
>135	CompoundStatement	 
>136	ReturnStatement	 
>137	Identifier	FALSE
>138	ExpressionStatement	 
>139	Statement	 
>140	Statement	 
>141	Statement	 
>142	Statement	 
>143	Statement	 
>144	Statement	 
>145	Statement	 
>146	Statement	 
>147	Statement	 
>148	Condition	 
>149	AndExpression	psOptions -> nDstAlphaBand > 0 && psOptions -> pfnDstDensityMaskFunc != NULL
>150	EqualityExpression	psOptions -> pfnDstDensityMaskFunc != NULL
>151	Identifier	NULL
>152	PtrMemberAccess	psOptions -> pfnDstDensityMaskFunc
>153	Identifier	pfnDstDensityMaskFunc
>154	Identifier	psOptions
>155	RelationalExpression	psOptions -> nDstAlphaBand > 0
>156	PrimaryExpression	0
>157	PtrMemberAccess	psOptions -> nDstAlphaBand
>158	Identifier	nDstAlphaBand
>159	Identifier	psOptions
>160	IfStatement	if ( psOptions -> nSrcAlphaBand > 0 && psOptions -> pfnSrcDensityMaskFunc != NULL )
>161	CompoundStatement	 
>162	ReturnStatement	 
>163	Identifier	FALSE
>164	ExpressionStatement	 
>165	Statement	 
>166	Statement	 
>167	Statement	 
>168	Statement	 
>169	Statement	 
>170	Statement	 
>171	Statement	 
>172	Statement	 
>173	Statement	 
>174	Condition	 
>175	AndExpression	psOptions -> nSrcAlphaBand > 0 && psOptions -> pfnSrcDensityMaskFunc != NULL
>176	EqualityExpression	psOptions -> pfnSrcDensityMaskFunc != NULL
>177	Identifier	NULL
>178	PtrMemberAccess	psOptions -> pfnSrcDensityMaskFunc
>179	Identifier	pfnSrcDensityMaskFunc
>180	Identifier	psOptions
>181	RelationalExpression	psOptions -> nSrcAlphaBand > 0
>182	PrimaryExpression	0
>183	PtrMemberAccess	psOptions -> nSrcAlphaBand
>184	Identifier	nSrcAlphaBand
>185	Identifier	psOptions
>186	IfStatement	if ( psOptions -> nDstAlphaBand > 0 )
>187	CompoundStatement	 
>188	IfStatement	if ( psOptions -> hDstDS == NULL || psOptions -> nDstAlphaBand > GDALGetRasterCount ( psOptions -> hDstDS ) )
>189	CompoundStatement	 
>190	ReturnStatement	 
>191	Identifier	FALSE
>192	ExpressionStatement	 
>193	CallExpression	CPLError ( CE_Failure , CPLE_IllegalArg , \"nDstAlphaBand = %d ... out of range for dataset.\" , psOptions -> nDstAlphaBand )
>194	ArgumentList	CE_Failure
>195	Argument	psOptions -> nDstAlphaBand
>196	PtrMemberAccess	psOptions -> nDstAlphaBand
>197	Identifier	nDstAlphaBand
>198	Identifier	psOptions
>199	Argument	\"nDstAlphaBand = %d ... out of range for dataset.\"
>200	PrimaryExpression	\"nDstAlphaBand = %d ... out of range for dataset.\"
>201	Argument	CPLE_IllegalArg
>202	Identifier	CPLE_IllegalArg
>203	Argument	CE_Failure
>204	Identifier	CE_Failure
>205	Callee	CPLError
>206	Identifier	CPLError
>207	Condition	 
>208	OrExpression	psOptions -> hDstDS == NULL || psOptions -> nDstAlphaBand > GDALGetRasterCount ( psOptions -> hDstDS )
>209	RelationalExpression	psOptions -> nDstAlphaBand > GDALGetRasterCount ( psOptions -> hDstDS )
>210	CallExpression	GDALGetRasterCount ( psOptions -> hDstDS )
>211	ArgumentList	psOptions -> hDstDS
>212	Argument	psOptions -> hDstDS
>213	PtrMemberAccess	psOptions -> hDstDS
>214	Identifier	hDstDS
>215	Identifier	psOptions
>216	Callee	GDALGetRasterCount
>217	Identifier	GDALGetRasterCount
>218	PtrMemberAccess	psOptions -> nDstAlphaBand
>219	Identifier	nDstAlphaBand
>220	Identifier	psOptions
>221	EqualityExpression	psOptions -> hDstDS == NULL
>222	Identifier	NULL
>223	PtrMemberAccess	psOptions -> hDstDS
>224	Identifier	hDstDS
>225	Identifier	psOptions
>226	Condition	 
>227	RelationalExpression	psOptions -> nDstAlphaBand > 0
>228	PrimaryExpression	0
>229	PtrMemberAccess	psOptions -> nDstAlphaBand
>230	Identifier	nDstAlphaBand
>231	Identifier	psOptions
>232	IfStatement	if ( psOptions -> nSrcAlphaBand > 0 )
>233	CompoundStatement	 
>234	IfStatement	if ( psOptions -> hSrcDS == NULL || psOptions -> nSrcAlphaBand > GDALGetRasterCount ( psOptions -> hSrcDS ) )
>235	CompoundStatement	 
>236	ReturnStatement	 
>237	Identifier	FALSE
>238	ExpressionStatement	 
>239	CallExpression	CPLError ( CE_Failure , CPLE_IllegalArg , \"nSrcAlphaBand = %d ... out of range for dataset.\" , psOptions -> nSrcAlphaBand )
>240	ArgumentList	CE_Failure
>241	Argument	psOptions -> nSrcAlphaBand
>242	PtrMemberAccess	psOptions -> nSrcAlphaBand
>243	Identifier	nSrcAlphaBand
>244	Identifier	psOptions
>245	Argument	\"nSrcAlphaBand = %d ... out of range for dataset.\"
>246	PrimaryExpression	\"nSrcAlphaBand = %d ... out of range for dataset.\"
>247	Argument	CPLE_IllegalArg
>248	Identifier	CPLE_IllegalArg
>249	Argument	CE_Failure
>250	Identifier	CE_Failure
>251	Callee	CPLError
>252	Identifier	CPLError
>253	Condition	 
>254	OrExpression	psOptions -> hSrcDS == NULL || psOptions -> nSrcAlphaBand > GDALGetRasterCount ( psOptions -> hSrcDS )
>255	RelationalExpression	psOptions -> nSrcAlphaBand > GDALGetRasterCount ( psOptions -> hSrcDS )
>256	CallExpression	GDALGetRasterCount ( psOptions -> hSrcDS )
>257	ArgumentList	psOptions -> hSrcDS
>258	Argument	psOptions -> hSrcDS
>259	PtrMemberAccess	psOptions -> hSrcDS
>260	Identifier	hSrcDS
>261	Identifier	psOptions
>262	Callee	GDALGetRasterCount
>263	Identifier	GDALGetRasterCount
>264	PtrMemberAccess	psOptions -> nSrcAlphaBand
>265	Identifier	nSrcAlphaBand
>266	Identifier	psOptions
>267	EqualityExpression	psOptions -> hSrcDS == NULL
>268	Identifier	NULL
>269	PtrMemberAccess	psOptions -> hSrcDS
>270	Identifier	hSrcDS
>271	Identifier	psOptions
>272	Condition	 
>273	RelationalExpression	psOptions -> nSrcAlphaBand > 0
>274	PrimaryExpression	0
>275	PtrMemberAccess	psOptions -> nSrcAlphaBand
>276	Identifier	nSrcAlphaBand
>277	Identifier	psOptions
>278	IfStatement	if ( CSLFetchNameValue ( psOptions -> papszWarpOptions , \"SAMPLE_STEPS\" ) != NULL )
>279	CompoundStatement	 
>280	IfStatement	if ( atoi ( CSLFetchNameValue ( psOptions -> papszWarpOptions , \"SAMPLE_STEPS\" ) ) < 2 )
>281	CompoundStatement	 
>282	ReturnStatement	 
>283	Identifier	FALSE
>284	ExpressionStatement	 
>285	Statement	 
>286	Statement	 
>287	Statement	 
>288	Statement	 
>289	Statement	 
>290	Statement	 
>291	Statement	 
>292	Statement	 
>293	Statement	 
>294	Condition	 
>295	RelationalExpression	atoi ( CSLFetchNameValue ( psOptions -> papszWarpOptions , \"SAMPLE_STEPS\" ) ) < 2
>296	PrimaryExpression	2
>297	CallExpression	atoi ( CSLFetchNameValue ( psOptions -> papszWarpOptions , \"SAMPLE_STEPS\" ) )
>298	ArgumentList	CSLFetchNameValue ( psOptions -> papszWarpOptions , \"SAMPLE_STEPS\" )
>299	Argument	CSLFetchNameValue ( psOptions -> papszWarpOptions , \"SAMPLE_STEPS\" )
>300	CallExpression	CSLFetchNameValue ( psOptions -> papszWarpOptions , \"SAMPLE_STEPS\" )
>301	ArgumentList	psOptions -> papszWarpOptions
>302	Argument	\"SAMPLE_STEPS\"
>303	PrimaryExpression	\"SAMPLE_STEPS\"
>304	Argument	psOptions -> papszWarpOptions
>305	PtrMemberAccess	psOptions -> papszWarpOptions
>306	Identifier	papszWarpOptions
>307	Identifier	psOptions
>308	Callee	CSLFetchNameValue
>309	Identifier	CSLFetchNameValue
>310	Callee	atoi
>311	Identifier	atoi
>312	Condition	 
>313	EqualityExpression	CSLFetchNameValue ( psOptions -> papszWarpOptions , \"SAMPLE_STEPS\" ) != NULL
>314	Identifier	NULL
>315	CallExpression	CSLFetchNameValue ( psOptions -> papszWarpOptions , \"SAMPLE_STEPS\" )
>316	ArgumentList	psOptions -> papszWarpOptions
>317	Argument	\"SAMPLE_STEPS\"
>318	PrimaryExpression	\"SAMPLE_STEPS\"
>319	Argument	psOptions -> papszWarpOptions
>320	PtrMemberAccess	psOptions -> papszWarpOptions
>321	Identifier	papszWarpOptions
>322	Identifier	psOptions
>323	Callee	CSLFetchNameValue
>324	Identifier	CSLFetchNameValue
>325	IfStatement	if ( psOptions -> pfnTransformer == NULL )
>326	CompoundStatement	 
>327	ReturnStatement	 
>328	Identifier	FALSE
>329	ExpressionStatement	 
>330	Statement	 
>331	Statement	 
>332	Statement	 
>333	Statement	 
>334	Statement	 
>335	Statement	 
>336	Statement	 
>337	Statement	 
>338	Statement	 
>339	Condition	 
>340	EqualityExpression	psOptions -> pfnTransformer == NULL
>341	Identifier	NULL
>342	PtrMemberAccess	psOptions -> pfnTransformer
>343	Identifier	pfnTransformer
>344	Identifier	psOptions
>345	IfStatement	if ( psOptions -> pfnProgress == NULL )
>346	CompoundStatement	 
>347	ReturnStatement	 
>348	Identifier	FALSE
>349	ExpressionStatement	 
>350	Statement	 
>351	Statement	 
>352	Statement	 
>353	Statement	 
>354	Statement	 
>355	Statement	 
>356	Statement	 
>357	Statement	 
>358	Statement	 
>359	Condition	 
>360	EqualityExpression	psOptions -> pfnProgress == NULL
>361	Identifier	NULL
>362	PtrMemberAccess	psOptions -> pfnProgress
>363	Identifier	pfnProgress
>364	Identifier	psOptions
>365	IfStatement	if ( psOptions -> padfSrcNoDataReal != NULL && psOptions -> padfSrcNoDataImag == NULL )
>366	CompoundStatement	 
>367	ReturnStatement	 
>368	Identifier	FALSE
>369	ExpressionStatement	 
>370	Statement	 
>371	Statement	 
>372	Statement	 
>373	Statement	 
>374	Statement	 
>375	Statement	 
>376	Statement	 
>377	Statement	 
>378	Statement	 
>379	Condition	 
>380	AndExpression	psOptions -> padfSrcNoDataReal != NULL && psOptions -> padfSrcNoDataImag == NULL
>381	EqualityExpression	psOptions -> padfSrcNoDataImag == NULL
>382	Identifier	NULL
>383	PtrMemberAccess	psOptions -> padfSrcNoDataImag
>384	Identifier	padfSrcNoDataImag
>385	Identifier	psOptions
>386	EqualityExpression	psOptions -> padfSrcNoDataReal != NULL
>387	Identifier	NULL
>388	PtrMemberAccess	psOptions -> padfSrcNoDataReal
>389	Identifier	padfSrcNoDataReal
>390	Identifier	psOptions
>391	IfStatement	if ( psOptions -> nBandCount == 0 )
>392	CompoundStatement	 
>393	ReturnStatement	 
>394	Identifier	FALSE
>395	ExpressionStatement	 
>396	Statement	 
>397	Statement	 
>398	Statement	 
>399	Statement	 
>400	Statement	 
>401	Statement	 
>402	Statement	 
>403	Statement	 
>404	Statement	 
>405	Condition	 
>406	EqualityExpression	psOptions -> nBandCount == 0
>407	PrimaryExpression	0
>408	PtrMemberAccess	psOptions -> nBandCount
>409	Identifier	nBandCount
>410	Identifier	psOptions
>411	ForStatement	for ( int iBand = 0 ; iBand < psOptions -> nBandCount ; iBand ++ )
>412	CompoundStatement	 
>413	IfStatement	if ( psOptions -> hDstDS != NULL && GDALGetRasterAccess ( GDALGetRasterBand ( psOptions -> hDstDS , psOptions -> \
>414	CompoundStatement	 
>415	ReturnStatement	 
>416	Identifier	FALSE
>417	ExpressionStatement	 
>418	CallExpression	CPLError ( CE_Failure , CPLE_IllegalArg , \"Destination band %d appears to be read-only.\" , psOptions -> panDstBands [ \
>419	ArgumentList	CE_Failure
>420	Argument	psOptions -> panDstBands [ iBand ]
>421	ArrayIndexing	psOptions -> panDstBands [ iBand ]
>422	Identifier	iBand
>423	PtrMemberAccess	psOptions -> panDstBands
>424	Identifier	panDstBands
>425	Identifier	psOptions
>426	Argument	\"Destination band %d appears to be read-only.\"
>427	PrimaryExpression	\"Destination band %d appears to be read-only.\"
>428	Argument	CPLE_IllegalArg
>429	Identifier	CPLE_IllegalArg
>430	Argument	CE_Failure
>431	Identifier	CE_Failure
>432	Callee	CPLError
>433	Identifier	CPLError
>434	Condition	 
>435	AndExpression	psOptions -> hDstDS != NULL && GDALGetRasterAccess ( GDALGetRasterBand ( psOptions -> hDstDS , psOptions \
>436	EqualityExpression	GDALGetRasterAccess ( GDALGetRasterBand ( psOptions -> hDstDS , psOptions -> panDstBands [ iBand ] ) ) == \
>437	Identifier	GA_ReadOnly
>438	CallExpression	GDALGetRasterAccess ( GDALGetRasterBand ( psOptions -> hDstDS , psOptions -> panDstBands [ iBand ] ) )
>439	ArgumentList	GDALGetRasterBand ( psOptions -> hDstDS , psOptions -> panDstBands [ iBand ] )
>440	Argument	GDALGetRasterBand ( psOptions -> hDstDS , psOptions -> panDstBands [ iBand ] )
>441	CallExpression	GDALGetRasterBand ( psOptions -> hDstDS , psOptions -> panDstBands [ iBand ] )
>442	ArgumentList	psOptions -> hDstDS
>443	Argument	psOptions -> panDstBands [ iBand ]
>444	ArrayIndexing	psOptions -> panDstBands [ iBand ]
>445	Identifier	iBand
>446	PtrMemberAccess	psOptions -> panDstBands
>447	Identifier	panDstBands
>448	Identifier	psOptions
>449	Argument	psOptions -> hDstDS
>450	PtrMemberAccess	psOptions -> hDstDS
>451	Identifier	hDstDS
>452	Identifier	psOptions
>453	Callee	GDALGetRasterBand
>454	Identifier	GDALGetRasterBand
>455	Callee	GDALGetRasterAccess
>456	Identifier	GDALGetRasterAccess
>457	EqualityExpression	psOptions -> hDstDS != NULL
>458	Identifier	NULL
>459	PtrMemberAccess	psOptions -> hDstDS
>460	Identifier	hDstDS
>461	Identifier	psOptions
>462	IfStatement	if ( psOptions -> hDstDS != NULL && ( psOptions -> panDstBands [ iBand ] < 1 || psOptions -> panDstBands [ iBand ] > \
>463	CompoundStatement	 
>464	ReturnStatement	 
>465	Identifier	FALSE
>466	ExpressionStatement	 
>467	CallExpression	CPLError ( CE_Failure , CPLE_IllegalArg , \"panDstBands[%d] = %d ... out of range for dataset.\" , iBand , psOptions \
>468	ArgumentList	CE_Failure
>469	Argument	psOptions -> panDstBands [ iBand ]
>470	ArrayIndexing	psOptions -> panDstBands [ iBand ]
>471	Identifier	iBand
>472	PtrMemberAccess	psOptions -> panDstBands
>473	Identifier	panDstBands
>474	Identifier	psOptions
>475	Argument	iBand
>476	Identifier	iBand
>477	Argument	\"panDstBands[%d] = %d ... out of range for dataset.\"
>478	PrimaryExpression	\"panDstBands[%d] = %d ... out of range for dataset.\"
>479	Argument	CPLE_IllegalArg
>480	Identifier	CPLE_IllegalArg
>481	Argument	CE_Failure
>482	Identifier	CE_Failure
>483	Callee	CPLError
>484	Identifier	CPLError
>485	Condition	 
>486	AndExpression	psOptions -> hDstDS != NULL && ( psOptions -> panDstBands [ iBand ] < 1 || psOptions -> panDstBands [ \
>487	OrExpression	psOptions -> panDstBands [ iBand ] < 1 || psOptions -> panDstBands [ iBand ] > GDALGetRasterCount ( \
>488	RelationalExpression	psOptions -> panDstBands [ iBand ] > GDALGetRasterCount ( psOptions -> hDstDS )
>489	CallExpression	GDALGetRasterCount ( psOptions -> hDstDS )
>490	ArgumentList	psOptions -> hDstDS
>491	Argument	psOptions -> hDstDS
>492	PtrMemberAccess	psOptions -> hDstDS
>493	Identifier	hDstDS
>494	Identifier	psOptions
>495	Callee	GDALGetRasterCount
>496	Identifier	GDALGetRasterCount
>497	ArrayIndexing	psOptions -> panDstBands [ iBand ]
>498	Identifier	iBand
>499	PtrMemberAccess	psOptions -> panDstBands
>500	Identifier	panDstBands
>501	Identifier	psOptions
>502	RelationalExpression	psOptions -> panDstBands [ iBand ] < 1
>503	PrimaryExpression	1
>504	ArrayIndexing	psOptions -> panDstBands [ iBand ]
>505	Identifier	iBand
>506	PtrMemberAccess	psOptions -> panDstBands
>507	Identifier	panDstBands
>508	Identifier	psOptions
>509	EqualityExpression	psOptions -> hDstDS != NULL
>510	Identifier	NULL
>511	PtrMemberAccess	psOptions -> hDstDS
>512	Identifier	hDstDS
>513	Identifier	psOptions
>514	IfStatement	if ( psOptions -> panSrcBands [ iBand ] < 1 || psOptions -> panSrcBands [ iBand ] > GDALGetRasterCount ( psOptions \
>515	CompoundStatement	 
>516	ReturnStatement	 
>517	Identifier	FALSE
>518	ExpressionStatement	 
>519	CallExpression	CPLError ( CE_Failure , CPLE_IllegalArg , \"panSrcBands[%d] = %d ... out of range for dataset.\" , iBand , psOptions \
>520	ArgumentList	CE_Failure
>521	Argument	psOptions -> panSrcBands [ iBand ]
>522	ArrayIndexing	psOptions -> panSrcBands [ iBand ]
>523	Identifier	iBand
>524	PtrMemberAccess	psOptions -> panSrcBands
>525	Identifier	panSrcBands
>526	Identifier	psOptions
>527	Argument	iBand
>528	Identifier	iBand
>529	Argument	\"panSrcBands[%d] = %d ... out of range for dataset.\"
>530	PrimaryExpression	\"panSrcBands[%d] = %d ... out of range for dataset.\"
>531	Argument	CPLE_IllegalArg
>532	Identifier	CPLE_IllegalArg
>533	Argument	CE_Failure
>534	Identifier	CE_Failure
>535	Callee	CPLError
>536	Identifier	CPLError
>537	Condition	 
>538	OrExpression	psOptions -> panSrcBands [ iBand ] < 1 || psOptions -> panSrcBands [ iBand ] > GDALGetRasterCount ( \
>539	RelationalExpression	psOptions -> panSrcBands [ iBand ] > GDALGetRasterCount ( psOptions -> hSrcDS )
>540	CallExpression	GDALGetRasterCount ( psOptions -> hSrcDS )
>541	ArgumentList	psOptions -> hSrcDS
>542	Argument	psOptions -> hSrcDS
>543	PtrMemberAccess	psOptions -> hSrcDS
>544	Identifier	hSrcDS
>545	Identifier	psOptions
>546	Callee	GDALGetRasterCount
>547	Identifier	GDALGetRasterCount
>548	ArrayIndexing	psOptions -> panSrcBands [ iBand ]
>549	Identifier	iBand
>550	PtrMemberAccess	psOptions -> panSrcBands
>551	Identifier	panSrcBands
>552	Identifier	psOptions
>553	RelationalExpression	psOptions -> panSrcBands [ iBand ] < 1
>554	PrimaryExpression	1
>555	ArrayIndexing	psOptions -> panSrcBands [ iBand ]
>556	Identifier	iBand
>557	PtrMemberAccess	psOptions -> panSrcBands
>558	Identifier	panSrcBands
>559	Identifier	psOptions
>560	IncDecOp	 
>561	IncDec	++
>562	Identifier	iBand
>563	Condition	 
>564	RelationalExpression	iBand < psOptions -> nBandCount
>565	PtrMemberAccess	psOptions -> nBandCount
>566	Identifier	nBandCount
>567	Identifier	psOptions
>568	Identifier	iBand
>569	ForInit	 
>570	IdentifierDeclStatement	int iBand = 0 ;
>571	IdentifierDecl	iBand = 0
>572	AssignmentExpr	iBand = 0
>573	PrimaryExpression	0
>574	Identifier	iBand
>575	Identifier	iBand
>576	IdentifierDeclType	int
>577	IfStatement	if ( psOptions -> hDstDS != NULL && psOptions -> panDstBands == NULL )
>578	CompoundStatement	 
>579	ReturnStatement	 
>580	Identifier	FALSE
>581	ExpressionStatement	 
>582	Statement	 
>583	Statement	 
>584	Statement	 
>585	Statement	 
>586	Statement	 
>587	Statement	 
>588	Statement	 
>589	Statement	 
>590	Statement	 
>591	Condition	 
>592	AndExpression	psOptions -> hDstDS != NULL && psOptions -> panDstBands == NULL
>593	EqualityExpression	psOptions -> panDstBands == NULL
>594	Identifier	NULL
>595	PtrMemberAccess	psOptions -> panDstBands
>596	Identifier	panDstBands
>597	Identifier	psOptions
>598	EqualityExpression	psOptions -> hDstDS != NULL
>599	Identifier	NULL
>600	PtrMemberAccess	psOptions -> hDstDS
>601	Identifier	hDstDS
>602	Identifier	psOptions
>603	IfStatement	if ( psOptions -> panSrcBands == NULL )
>604	CompoundStatement	 
>605	ReturnStatement	 
>606	Identifier	FALSE
>607	ExpressionStatement	 
>608	Statement	 
>609	Statement	 
>610	Statement	 
>611	Statement	 
>612	Statement	 
>613	Statement	 
>614	Statement	 
>615	Statement	 
>616	Statement	 
>617	Condition	 
>618	EqualityExpression	psOptions -> panSrcBands == NULL
>619	Identifier	NULL
>620	PtrMemberAccess	psOptions -> panSrcBands
>621	Identifier	panSrcBands
>622	Identifier	psOptions
>623	IfStatement	if ( psOptions -> nBandCount == 0 )
>624	CompoundStatement	 
>625	ReturnStatement	 
>626	Identifier	FALSE
>627	ExpressionStatement	 
>628	Statement	 
>629	Statement	 
>630	Statement	 
>631	Statement	 
>632	Statement	 
>633	Statement	 
>634	Statement	 
>635	Statement	 
>636	Statement	 
>637	Condition	 
>638	EqualityExpression	psOptions -> nBandCount == 0
>639	PrimaryExpression	0
>640	PtrMemberAccess	psOptions -> nBandCount
>641	Identifier	nBandCount
>642	Identifier	psOptions
>643	IfStatement	if ( psOptions -> hSrcDS == NULL )
>644	CompoundStatement	 
>645	ReturnStatement	 
>646	Identifier	FALSE
>647	ExpressionStatement	 
>648	Statement	 
>649	Statement	 
>650	Statement	 
>651	Statement	 
>652	Statement	 
>653	Statement	 
>654	Statement	 
>655	Statement	 
>656	Statement	 
>657	Condition	 
>658	EqualityExpression	psOptions -> hSrcDS == NULL
>659	Identifier	NULL
>660	PtrMemberAccess	psOptions -> hSrcDS
>661	Identifier	hSrcDS
>662	Identifier	psOptions
>663	IfStatement	if ( ( int ) psOptions -> eWorkingDataType < 1 && ( int ) psOptions -> eWorkingDataType >= GDT_TypeCount )
>664	CompoundStatement	 
>665	ReturnStatement	 
>666	Identifier	FALSE
>667	ExpressionStatement	 
>668	Statement	 
>669	Statement	 
>670	Statement	 
>671	Statement	 
>672	Statement	 
>673	Statement	 
>674	Statement	 
>675	Statement	 
>676	Statement	 
>677	Statement	 
>678	Statement	 
>679	Statement	 
>680	Statement	 
>681	Condition	 
>682	AndExpression	( int ) psOptions -> eWorkingDataType < 1 && ( int ) psOptions -> eWorkingDataType >= GDT_TypeCount
>683	RelationalExpression	( int ) psOptions -> eWorkingDataType >= GDT_TypeCount
>684	Identifier	GDT_TypeCount
>685	CastExpression	( int ) psOptions -> eWorkingDataType
>686	PtrMemberAccess	psOptions -> eWorkingDataType
>687	Identifier	eWorkingDataType
>688	Identifier	psOptions
>689	CastTarget	int
>690	RelationalExpression	( int ) psOptions -> eWorkingDataType < 1
>691	PrimaryExpression	1
>692	CastExpression	( int ) psOptions -> eWorkingDataType
>693	PtrMemberAccess	psOptions -> eWorkingDataType
>694	Identifier	eWorkingDataType
>695	Identifier	psOptions
>696	CastTarget	int
>697	IfStatement	if ( psOptions -> eResampleAlg != GRA_NearestNeighbour && psOptions -> eResampleAlg != GRA_Bilinear && psOptions \
>698	CompoundStatement	 
>699	ReturnStatement	 
>700	Identifier	FALSE
>701	ExpressionStatement	 
>702	Statement	 
>703	Statement	 
>704	Statement	 
>705	Statement	 
>706	Statement	 
>707	Statement	 
>708	Statement	 
>709	Statement	 
>710	Statement	 
>711	Statement	 
>712	Statement	 
>713	Statement	 
>714	Statement	 
>715	Condition	 
>716	AndExpression	psOptions -> eResampleAlg != GRA_NearestNeighbour && psOptions -> eResampleAlg != GRA_Bilinear && psOptions \
>717	AndExpression	psOptions -> eResampleAlg != GRA_Bilinear && psOptions -> eResampleAlg != GRA_Cubic && psOptions -> \
>718	AndExpression	psOptions -> eResampleAlg != GRA_Cubic && psOptions -> eResampleAlg != GRA_CubicSpline && psOptions \
>719	AndExpression	psOptions -> eResampleAlg != GRA_CubicSpline && psOptions -> eResampleAlg != GRA_Lanczos && psOptions \
>720	AndExpression	psOptions -> eResampleAlg != GRA_Lanczos && psOptions -> eResampleAlg != GRA_Average && psOptions -> \
>721	AndExpression	psOptions -> eResampleAlg != GRA_Average && psOptions -> eResampleAlg != GRA_Mode
>722	EqualityExpression	psOptions -> eResampleAlg != GRA_Mode
>723	Identifier	GRA_Mode
>724	PtrMemberAccess	psOptions -> eResampleAlg
>725	Identifier	eResampleAlg
>726	Identifier	psOptions
>727	EqualityExpression	psOptions -> eResampleAlg != GRA_Average
>728	Identifier	GRA_Average
>729	PtrMemberAccess	psOptions -> eResampleAlg
>730	Identifier	eResampleAlg
>731	Identifier	psOptions
>732	EqualityExpression	psOptions -> eResampleAlg != GRA_Lanczos
>733	Identifier	GRA_Lanczos
>734	PtrMemberAccess	psOptions -> eResampleAlg
>735	Identifier	eResampleAlg
>736	Identifier	psOptions
>737	EqualityExpression	psOptions -> eResampleAlg != GRA_CubicSpline
>738	Identifier	GRA_CubicSpline
>739	PtrMemberAccess	psOptions -> eResampleAlg
>740	Identifier	eResampleAlg
>741	Identifier	psOptions
>742	EqualityExpression	psOptions -> eResampleAlg != GRA_Cubic
>743	Identifier	GRA_Cubic
>744	PtrMemberAccess	psOptions -> eResampleAlg
>745	Identifier	eResampleAlg
>746	Identifier	psOptions
>747	EqualityExpression	psOptions -> eResampleAlg != GRA_Bilinear
>748	Identifier	GRA_Bilinear
>749	PtrMemberAccess	psOptions -> eResampleAlg
>750	Identifier	eResampleAlg
>751	Identifier	psOptions
>752	EqualityExpression	psOptions -> eResampleAlg != GRA_NearestNeighbour
>753	Identifier	GRA_NearestNeighbour
>754	PtrMemberAccess	psOptions -> eResampleAlg
>755	Identifier	eResampleAlg
>756	Identifier	psOptions
>757	IfStatement	if ( psOptions -> dfWarpMemoryLimit < 100000.0 )
>758	CompoundStatement	 
>759	ReturnStatement	 
>760	Identifier	FALSE
>761	ExpressionStatement	 
>762	Statement	 
>763	Statement	 
>764	Statement	 
>765	Statement	 
>766	Statement	 
>767	Statement	 
>768	Statement	 
>769	Statement	 
>770	Statement	 
>771	Statement	 
>772	Statement	 
>773	Statement	 
>774	Statement	 
>775	Condition	 
>776	RelationalExpression	psOptions -> dfWarpMemoryLimit < 100000.0
>777	PrimaryExpression	100000.0
>778	PtrMemberAccess	psOptions -> dfWarpMemoryLimit
>779	Identifier	dfWarpMemoryLimit
>780	Identifier	psOptions
>781	IfStatement	if ( psOptions == NULL )
>782	CompoundStatement	 
>783	ReturnStatement	 
>784	Identifier	FALSE
>785	ExpressionStatement	 
>786	Statement	 
>787	Statement	 
>788	Statement	 
>789	Statement	 
>790	Statement	 
>791	Statement	 
>792	Statement	 
>793	Statement	 
>794	Statement	 
>795	Condition	 
>796	EqualityExpression	psOptions == NULL
>797	Identifier	NULL
>798	Identifier	psOptions
>845	FunctionDef	GDALWarpOperation 
>846	ParameterList	const GDALWarpOptions * psNewOptions
>847	Parameter	 
>848	Identifier	psNewOptions
>849	ParameterType	const GDALWarpOptions *
>850	ReturnType	CPLErr
>851	CompoundStatement	 
>852	ReturnStatement	 
>853	Identifier	eErr
>854	IfStatement	if ( eErr != CE_None )
>855	ExpressionStatement	 
>856	CallExpression	WipeOptions ( )
>857	ArgumentList	 
>858	Callee	WipeOptions
>859	Identifier	WipeOptions
>860	Condition	 
>861	EqualityExpression	eErr != CE_None
>862	Identifier	CE_None
>863	Identifier	eErr
>864	IfStatement	if ( ! ValidateOptions ( ) )
>865	ExpressionStatement	 
>866	AssignmentExpr	eErr = CE_Failure
>867	Identifier	CE_Failure
>868	Identifier	eErr
>869	Condition	 
>870	UnaryOp	! ValidateOptions ( )
>871	CallExpression	ValidateOptions ( )
>872	ArgumentList	 
>873	Callee	ValidateOptions
>874	Identifier	ValidateOptions
>875	UnaryOperator	!
>876	IfStatement	if ( pszCutlineWKT )
>877	CompoundStatement	 
>878	IfStatement	if ( OGR_G_CreateFromWkt ( ( char * * ) & pszCutlineWKT , NULL , ( OGRGeometryH * ) & ( psOptions -> hCutline ) ) != \
>879	ElseStatement	else
>880	CompoundStatement	 
>881	IfStatement	if ( pszBD )
>882	ExpressionStatement	 
>883	AssignmentExpr	psOptions -> dfCutlineBlendDist = atof ( pszBD )
>884	CallExpression	atof ( pszBD )
>885	ArgumentList	pszBD
>886	Argument	pszBD
>887	Identifier	pszBD
>888	Callee	atof
>889	Identifier	atof
>890	PtrMemberAccess	psOptions -> dfCutlineBlendDist
>891	Identifier	dfCutlineBlendDist
>892	Identifier	psOptions
>893	Condition	 
>894	Identifier	pszBD
>895	IdentifierDeclStatement	 
>896	IdentifierDecl	* pszBD = CSLFetchNameValue ( psOptions -> papszWarpOptions , \"CUTLINE_BLEND_DIST\" )
>897	AssignmentExpr	* pszBD = CSLFetchNameValue ( psOptions -> papszWarpOptions , \"CUTLINE_BLEND_DIST\" )
>898	CallExpression	CSLFetchNameValue ( psOptions -> papszWarpOptions , \"CUTLINE_BLEND_DIST\" )
>899	ArgumentList	psOptions -> papszWarpOptions
>900	Argument	\"CUTLINE_BLEND_DIST\"
>901	PrimaryExpression	\"CUTLINE_BLEND_DIST\"
>902	Argument	psOptions -> papszWarpOptions
>903	PtrMemberAccess	psOptions -> papszWarpOptions
>904	Identifier	papszWarpOptions
>905	Identifier	psOptions
>906	Callee	CSLFetchNameValue
>907	Identifier	CSLFetchNameValue
>908	Identifier	pszBD
>909	Identifier	pszBD
>910	IdentifierDeclType	const char *
>911	CompoundStatement	 
>912	ExpressionStatement	 
>913	CallExpression	CPLError ( CE_Failure , CPLE_AppDefined , \"Failed to parse CUTLINE geometry wkt.\" )
>914	ArgumentList	CE_Failure
>915	Argument	\"Failed to parse CUTLINE geometry wkt.\"
>916	PrimaryExpression	\"Failed to parse CUTLINE geometry wkt.\"
>917	Argument	CPLE_AppDefined
>918	Identifier	CPLE_AppDefined
>919	Argument	CE_Failure
>920	Identifier	CE_Failure
>921	Callee	CPLError
>922	Identifier	CPLError
>923	ExpressionStatement	 
>924	AssignmentExpr	eErr = CE_Failure
>925	Identifier	CE_Failure
>926	Identifier	eErr
>927	Condition	 
>928	EqualityExpression	OGR_G_CreateFromWkt ( ( char * * ) & pszCutlineWKT , NULL , ( OGRGeometryH * ) & ( psOptions -> hCutline ) ) != \
>929	Identifier	OGRERR_NONE
>930	CallExpression	OGR_G_CreateFromWkt ( ( char * * ) & pszCutlineWKT , NULL , ( OGRGeometryH * ) & ( psOptions -> hCutline ) )
>931	ArgumentList	( char * * ) & pszCutlineWKT
>932	Argument	( OGRGeometryH * ) & ( psOptions -> hCutline )
>933	CastExpression	( OGRGeometryH * ) & ( psOptions -> hCutline )
>934	UnaryOp	& ( psOptions -> hCutline )
>935	PtrMemberAccess	psOptions -> hCutline
>936	Identifier	hCutline
>937	Identifier	psOptions
>938	UnaryOperator	&
>939	CastTarget	OGRGeometryH *
>940	Argument	NULL
>941	Identifier	NULL
>942	Argument	( char * * ) & pszCutlineWKT
>943	CastExpression	( char * * ) & pszCutlineWKT
>944	UnaryOp	& pszCutlineWKT
>945	Identifier	pszCutlineWKT
>946	UnaryOperator	&
>947	CastTarget	char * *
>948	Callee	OGR_G_CreateFromWkt
>949	Identifier	OGR_G_CreateFromWkt
>950	Condition	 
>951	Identifier	pszCutlineWKT
>952	IdentifierDeclStatement	 
>953	IdentifierDecl	* pszCutlineWKT = CSLFetchNameValue ( psOptions -> papszWarpOptions , \"CUTLINE\" )
>954	AssignmentExpr	* pszCutlineWKT = CSLFetchNameValue ( psOptions -> papszWarpOptions , \"CUTLINE\" )
>955	CallExpression	CSLFetchNameValue ( psOptions -> papszWarpOptions , \"CUTLINE\" )
>956	ArgumentList	psOptions -> papszWarpOptions
>957	Argument	\"CUTLINE\"
>958	PrimaryExpression	\"CUTLINE\"
>959	Argument	psOptions -> papszWarpOptions
>960	PtrMemberAccess	psOptions -> papszWarpOptions
>961	Identifier	papszWarpOptions
>962	Identifier	psOptions
>963	Callee	CSLFetchNameValue
>964	Identifier	CSLFetchNameValue
>965	Identifier	pszCutlineWKT
>966	Identifier	pszCutlineWKT
>967	IdentifierDeclType	const char *
>968	ExpressionStatement	 
>969	AssignmentExpr	bReportTimings = CSLFetchBoolean ( psOptions -> papszWarpOptions , \"REPORT_TIMINGS\" , FALSE )
>970	CallExpression	CSLFetchBoolean ( psOptions -> papszWarpOptions , \"REPORT_TIMINGS\" , FALSE )
>971	ArgumentList	psOptions -> papszWarpOptions
>972	Argument	FALSE
>973	Identifier	FALSE
>974	Argument	\"REPORT_TIMINGS\"
>975	PrimaryExpression	\"REPORT_TIMINGS\"
>976	Argument	psOptions -> papszWarpOptions
>977	PtrMemberAccess	psOptions -> papszWarpOptions
>978	Identifier	papszWarpOptions
>979	Identifier	psOptions
>980	Callee	CSLFetchBoolean
>981	Identifier	CSLFetchBoolean
>982	Identifier	bReportTimings
>983	IfStatement	if ( psOptions -> dfWarpMemoryLimit == 0.0 )
>984	CompoundStatement	 
>985	ExpressionStatement	 
>986	AssignmentExpr	psOptions -> dfWarpMemoryLimit = 64.0 * 1024 * 1024
>987	MultiplicativeExpression	64.0 * 1024 * 1024
>988	MultiplicativeExpression	1024 * 1024
>989	PrimaryExpression	1024
>990	PrimaryExpression	1024
>991	PrimaryExpression	64.0
>992	PtrMemberAccess	psOptions -> dfWarpMemoryLimit
>993	Identifier	dfWarpMemoryLimit
>994	Identifier	psOptions
>995	Condition	 
>996	EqualityExpression	psOptions -> dfWarpMemoryLimit == 0.0
>997	PrimaryExpression	0.0
>998	PtrMemberAccess	psOptions -> dfWarpMemoryLimit
>999	Identifier	dfWarpMemoryLimit
>1000	Identifier	psOptions
>1001	IfStatement	if ( psOptions -> eWorkingDataType == GDT_Unknown && psOptions -> hSrcDS != NULL && psOptions -> hDstDS != NULL && \
>1002	CompoundStatement	 
>1003	ForStatement	for ( iBand = 0 ; iBand < psOptions -> nBandCount ; iBand ++ )
>1004	CompoundStatement	 
>1005	IfStatement	if ( hSrcBand != NULL && psOptions -> padfSrcNoDataReal != NULL )
>1006	CompoundStatement	 
>1007	IfStatement	if ( bMergeSource )
>1008	ExpressionStatement	 
>1009	AssignmentExpr	psOptions -> eWorkingDataType = GDALDataTypeUnion ( psOptions -> eWorkingDataType , GDALGetRasterDataType ( \
>1010	CallExpression	GDALDataTypeUnion ( psOptions -> eWorkingDataType , GDALGetRasterDataType ( hSrcBand ) )
>1011	ArgumentList	psOptions -> eWorkingDataType
>1012	Argument	GDALGetRasterDataType ( hSrcBand )
>1013	CallExpression	GDALGetRasterDataType ( hSrcBand )
>1014	ArgumentList	hSrcBand
>1015	Argument	hSrcBand
>1016	Identifier	hSrcBand
>1017	Callee	GDALGetRasterDataType
>1018	Identifier	GDALGetRasterDataType
>1019	Argument	psOptions -> eWorkingDataType
>1020	PtrMemberAccess	psOptions -> eWorkingDataType
>1021	Identifier	eWorkingDataType
>1022	Identifier	psOptions
>1023	Callee	GDALDataTypeUnion
>1024	Identifier	GDALDataTypeUnion
>1025	PtrMemberAccess	psOptions -> eWorkingDataType
>1026	Identifier	eWorkingDataType
>1027	Identifier	psOptions
>1028	Condition	 
>1029	Identifier	bMergeSource
>1030	IfStatement	if ( psOptions -> padfSrcNoDataImag != NULL && psOptions -> padfSrcNoDataImag [ iBand ] != 0.0 && ! GDALDataTypeIsComplex ( \
>1031	ElseStatement	else
>1032	IfStatement	if ( psOptions -> padfSrcNoDataReal [ iBand ] < 0.0 && ( psOptions -> eWorkingDataType == GDT_Byte || psOptions \
>1033	ElseStatement	else
>1034	IfStatement	if ( psOptions -> padfSrcNoDataReal [ iBand ] < - 32768.0 && psOptions -> eWorkingDataType == GDT_Int16 )
>1035	ElseStatement	else
>1036	IfStatement	if ( psOptions -> padfSrcNoDataReal [ iBand ] < - 2147483648.0 && psOptions -> eWorkingDataType == GDT_Int32 )
>1037	ElseStatement	else
>1038	IfStatement	if ( psOptions -> padfSrcNoDataReal [ iBand ] > 256 && psOptions -> eWorkingDataType == GDT_Byte )
>1039	ElseStatement	else
>1040	IfStatement	if ( psOptions -> padfSrcNoDataReal [ iBand ] > 32767 && psOptions -> eWorkingDataType == GDT_Int16 )
>1041	ElseStatement	else
>1042	IfStatement	if ( psOptions -> padfSrcNoDataReal [ iBand ] > 65535 && psOptions -> eWorkingDataType == GDT_UInt16 )
>1043	ElseStatement	else
>1044	IfStatement	if ( psOptions -> padfSrcNoDataReal [ iBand ] > 2147483648.0 && psOptions -> eWorkingDataType == GDT_Int32 )
>1045	ElseStatement	else
>1046	IfStatement	if ( psOptions -> padfSrcNoDataReal [ iBand ] > 4294967295.0 && psOptions -> eWorkingDataType == GDT_UInt32 )
>1047	ExpressionStatement	 
>1048	AssignmentExpr	bMergeSource = TRUE
>1049	Identifier	TRUE
>1050	Identifier	bMergeSource
>1051	Condition	 
>1052	AndExpression	psOptions -> padfSrcNoDataReal [ iBand ] > 4294967295.0 && psOptions -> eWorkingDataType == GDT_UInt32
>1053	EqualityExpression	psOptions -> eWorkingDataType == GDT_UInt32
>1054	Identifier	GDT_UInt32
>1055	PtrMemberAccess	psOptions -> eWorkingDataType
>1056	Identifier	eWorkingDataType
>1057	Identifier	psOptions
>1058	RelationalExpression	psOptions -> padfSrcNoDataReal [ iBand ] > 4294967295.0
>1059	PrimaryExpression	4294967295.0
>1060	ArrayIndexing	psOptions -> padfSrcNoDataReal [ iBand ]
>1061	Identifier	iBand
>1062	PtrMemberAccess	psOptions -> padfSrcNoDataReal
>1063	Identifier	padfSrcNoDataReal
>1064	Identifier	psOptions
>1065	ExpressionStatement	 
>1066	AssignmentExpr	bMergeSource = TRUE
>1067	Identifier	TRUE
>1068	Identifier	bMergeSource
>1069	Condition	 
>1070	AndExpression	psOptions -> padfSrcNoDataReal [ iBand ] > 2147483648.0 && psOptions -> eWorkingDataType == GDT_Int32
>1071	EqualityExpression	psOptions -> eWorkingDataType == GDT_Int32
>1072	Identifier	GDT_Int32
>1073	PtrMemberAccess	psOptions -> eWorkingDataType
>1074	Identifier	eWorkingDataType
>1075	Identifier	psOptions
>1076	RelationalExpression	psOptions -> padfSrcNoDataReal [ iBand ] > 2147483648.0
>1077	PrimaryExpression	2147483648.0
>1078	ArrayIndexing	psOptions -> padfSrcNoDataReal [ iBand ]
>1079	Identifier	iBand
>1080	PtrMemberAccess	psOptions -> padfSrcNoDataReal
>1081	Identifier	padfSrcNoDataReal
>1082	Identifier	psOptions
>1083	ExpressionStatement	 
>1084	AssignmentExpr	bMergeSource = TRUE
>1085	Identifier	TRUE
>1086	Identifier	bMergeSource
>1087	Condition	 
>1088	AndExpression	psOptions -> padfSrcNoDataReal [ iBand ] > 65535 && psOptions -> eWorkingDataType == GDT_UInt16
>1089	EqualityExpression	psOptions -> eWorkingDataType == GDT_UInt16
>1090	Identifier	GDT_UInt16
>1091	PtrMemberAccess	psOptions -> eWorkingDataType
>1092	Identifier	eWorkingDataType
>1093	Identifier	psOptions
>1094	RelationalExpression	psOptions -> padfSrcNoDataReal [ iBand ] > 65535
>1095	PrimaryExpression	65535
>1096	ArrayIndexing	psOptions -> padfSrcNoDataReal [ iBand ]
>1097	Identifier	iBand
>1098	PtrMemberAccess	psOptions -> padfSrcNoDataReal
>1099	Identifier	padfSrcNoDataReal
>1100	Identifier	psOptions
>1101	ExpressionStatement	 
>1102	AssignmentExpr	bMergeSource = TRUE
>1103	Identifier	TRUE
>1104	Identifier	bMergeSource
>1105	Condition	 
>1106	AndExpression	psOptions -> padfSrcNoDataReal [ iBand ] > 32767 && psOptions -> eWorkingDataType == GDT_Int16
>1107	EqualityExpression	psOptions -> eWorkingDataType == GDT_Int16
>1108	Identifier	GDT_Int16
>1109	PtrMemberAccess	psOptions -> eWorkingDataType
>1110	Identifier	eWorkingDataType
>1111	Identifier	psOptions
>1112	RelationalExpression	psOptions -> padfSrcNoDataReal [ iBand ] > 32767
>1113	PrimaryExpression	32767
>1114	ArrayIndexing	psOptions -> padfSrcNoDataReal [ iBand ]
>1115	Identifier	iBand
>1116	PtrMemberAccess	psOptions -> padfSrcNoDataReal
>1117	Identifier	padfSrcNoDataReal
>1118	Identifier	psOptions
>1119	ExpressionStatement	 
>1120	AssignmentExpr	bMergeSource = TRUE
>1121	Identifier	TRUE
>1122	Identifier	bMergeSource
>1123	Condition	 
>1124	AndExpression	psOptions -> padfSrcNoDataReal [ iBand ] > 256 && psOptions -> eWorkingDataType == GDT_Byte
>1125	EqualityExpression	psOptions -> eWorkingDataType == GDT_Byte
>1126	Identifier	GDT_Byte
>1127	PtrMemberAccess	psOptions -> eWorkingDataType
>1128	Identifier	eWorkingDataType
>1129	Identifier	psOptions
>1130	RelationalExpression	psOptions -> padfSrcNoDataReal [ iBand ] > 256
>1131	PrimaryExpression	256
>1132	ArrayIndexing	psOptions -> padfSrcNoDataReal [ iBand ]
>1133	Identifier	iBand
>1134	PtrMemberAccess	psOptions -> padfSrcNoDataReal
>1135	Identifier	padfSrcNoDataReal
>1136	Identifier	psOptions
>1137	ExpressionStatement	 
>1138	AssignmentExpr	bMergeSource = TRUE
>1139	Identifier	TRUE
>1140	Identifier	bMergeSource
>1141	Condition	 
>1142	AndExpression	psOptions -> padfSrcNoDataReal [ iBand ] < - 2147483648.0 && psOptions -> eWorkingDataType == GDT_Int32
>1143	EqualityExpression	psOptions -> eWorkingDataType == GDT_Int32
>1144	Identifier	GDT_Int32
>1145	PtrMemberAccess	psOptions -> eWorkingDataType
>1146	Identifier	eWorkingDataType
>1147	Identifier	psOptions
>1148	RelationalExpression	psOptions -> padfSrcNoDataReal [ iBand ] < - 2147483648.0
>1149	UnaryOp	- 2147483648.0
>1150	PrimaryExpression	2147483648.0
>1151	UnaryOperator	-
>1152	ArrayIndexing	psOptions -> padfSrcNoDataReal [ iBand ]
>1153	Identifier	iBand
>1154	PtrMemberAccess	psOptions -> padfSrcNoDataReal
>1155	Identifier	padfSrcNoDataReal
>1156	Identifier	psOptions
>1157	ExpressionStatement	 
>1158	AssignmentExpr	bMergeSource = TRUE
>1159	Identifier	TRUE
>1160	Identifier	bMergeSource
>1161	Condition	 
>1162	AndExpression	psOptions -> padfSrcNoDataReal [ iBand ] < - 32768.0 && psOptions -> eWorkingDataType == GDT_Int16
>1163	EqualityExpression	psOptions -> eWorkingDataType == GDT_Int16
>1164	Identifier	GDT_Int16
>1165	PtrMemberAccess	psOptions -> eWorkingDataType
>1166	Identifier	eWorkingDataType
>1167	Identifier	psOptions
>1168	RelationalExpression	psOptions -> padfSrcNoDataReal [ iBand ] < - 32768.0
>1169	UnaryOp	- 32768.0
>1170	PrimaryExpression	32768.0
>1171	UnaryOperator	-
>1172	ArrayIndexing	psOptions -> padfSrcNoDataReal [ iBand ]
>1173	Identifier	iBand
>1174	PtrMemberAccess	psOptions -> padfSrcNoDataReal
>1175	Identifier	padfSrcNoDataReal
>1176	Identifier	psOptions
>1177	ExpressionStatement	 
>1178	AssignmentExpr	bMergeSource = TRUE
>1179	Identifier	TRUE
>1180	Identifier	bMergeSource
>1181	Condition	 
>1182	AndExpression	psOptions -> padfSrcNoDataReal [ iBand ] < 0.0 && ( psOptions -> eWorkingDataType == GDT_Byte || psOptions \
>1183	OrExpression	psOptions -> eWorkingDataType == GDT_Byte || psOptions -> eWorkingDataType == GDT_UInt16 || psOptions \
>1184	OrExpression	psOptions -> eWorkingDataType == GDT_UInt16 || psOptions -> eWorkingDataType == GDT_UInt32
>1185	EqualityExpression	psOptions -> eWorkingDataType == GDT_UInt32
>1186	Identifier	GDT_UInt32
>1187	PtrMemberAccess	psOptions -> eWorkingDataType
>1188	Identifier	eWorkingDataType
>1189	Identifier	psOptions
>1190	EqualityExpression	psOptions -> eWorkingDataType == GDT_UInt16
>1191	Identifier	GDT_UInt16
>1192	PtrMemberAccess	psOptions -> eWorkingDataType
>1193	Identifier	eWorkingDataType
>1194	Identifier	psOptions
>1195	EqualityExpression	psOptions -> eWorkingDataType == GDT_Byte
>1196	Identifier	GDT_Byte
>1197	PtrMemberAccess	psOptions -> eWorkingDataType
>1198	Identifier	eWorkingDataType
>1199	Identifier	psOptions
>1200	RelationalExpression	psOptions -> padfSrcNoDataReal [ iBand ] < 0.0
>1201	PrimaryExpression	0.0
>1202	ArrayIndexing	psOptions -> padfSrcNoDataReal [ iBand ]
>1203	Identifier	iBand
>1204	PtrMemberAccess	psOptions -> padfSrcNoDataReal
>1205	Identifier	padfSrcNoDataReal
>1206	Identifier	psOptions
>1207	ExpressionStatement	 
>1208	AssignmentExpr	bMergeSource = TRUE
>1209	Identifier	TRUE
>1210	Identifier	bMergeSource
>1211	Condition	 
>1212	AndExpression	psOptions -> padfSrcNoDataImag != NULL && psOptions -> padfSrcNoDataImag [ iBand ] != 0.0 && ! GDALDataTypeIsComplex ( \
>1213	AndExpression	psOptions -> padfSrcNoDataImag [ iBand ] != 0.0 && ! GDALDataTypeIsComplex ( psOptions -> eWorkingDataType )
>1214	UnaryOp	! GDALDataTypeIsComplex ( psOptions -> eWorkingDataType )
>1215	CallExpression	GDALDataTypeIsComplex ( psOptions -> eWorkingDataType )
>1216	ArgumentList	psOptions -> eWorkingDataType
>1217	Argument	psOptions -> eWorkingDataType
>1218	PtrMemberAccess	psOptions -> eWorkingDataType
>1219	Identifier	eWorkingDataType
>1220	Identifier	psOptions
>1221	Callee	GDALDataTypeIsComplex
>1222	Identifier	GDALDataTypeIsComplex
>1223	UnaryOperator	!
>1224	EqualityExpression	psOptions -> padfSrcNoDataImag [ iBand ] != 0.0
>1225	PrimaryExpression	0.0
>1226	ArrayIndexing	psOptions -> padfSrcNoDataImag [ iBand ]
>1227	Identifier	iBand
>1228	PtrMemberAccess	psOptions -> padfSrcNoDataImag
>1229	Identifier	padfSrcNoDataImag
>1230	Identifier	psOptions
>1231	EqualityExpression	psOptions -> padfSrcNoDataImag != NULL
>1232	Identifier	NULL
>1233	PtrMemberAccess	psOptions -> padfSrcNoDataImag
>1234	Identifier	padfSrcNoDataImag
>1235	Identifier	psOptions
>1236	IdentifierDeclStatement	 
>1237	IdentifierDecl	bMergeSource = FALSE
>1238	AssignmentExpr	bMergeSource = FALSE
>1239	Identifier	FALSE
>1240	Identifier	FALSE
>1241	Identifier	bMergeSource
>1242	IdentifierDeclType	int
>1243	Condition	 
>1244	AndExpression	hSrcBand != NULL && psOptions -> padfSrcNoDataReal != NULL
>1245	EqualityExpression	psOptions -> padfSrcNoDataReal != NULL
>1246	Identifier	NULL
>1247	PtrMemberAccess	psOptions -> padfSrcNoDataReal
>1248	Identifier	padfSrcNoDataReal
>1249	Identifier	psOptions
>1250	EqualityExpression	hSrcBand != NULL
>1251	Identifier	NULL
>1252	Identifier	hSrcBand
>1253	IfStatement	if ( hDstBand != NULL )
>1254	ExpressionStatement	 
>1255	AssignmentExpr	psOptions -> eWorkingDataType = GDALDataTypeUnion ( psOptions -> eWorkingDataType , GDALGetRasterDataType ( \
>1256	CallExpression	GDALDataTypeUnion ( psOptions -> eWorkingDataType , GDALGetRasterDataType ( hDstBand ) )
>1257	ArgumentList	psOptions -> eWorkingDataType
>1258	Argument	GDALGetRasterDataType ( hDstBand )
>1259	CallExpression	GDALGetRasterDataType ( hDstBand )
>1260	ArgumentList	hDstBand
>1261	Argument	hDstBand
>1262	Identifier	hDstBand
>1263	Callee	GDALGetRasterDataType
>1264	Identifier	GDALGetRasterDataType
>1265	Argument	psOptions -> eWorkingDataType
>1266	PtrMemberAccess	psOptions -> eWorkingDataType
>1267	Identifier	eWorkingDataType
>1268	Identifier	psOptions
>1269	Callee	GDALDataTypeUnion
>1270	Identifier	GDALDataTypeUnion
>1271	PtrMemberAccess	psOptions -> eWorkingDataType
>1272	Identifier	eWorkingDataType
>1273	Identifier	psOptions
>1274	Condition	 
>1275	EqualityExpression	hDstBand != NULL
>1276	Identifier	NULL
>1277	Identifier	hDstBand
>1278	IdentifierDeclStatement	 
>1279	IdentifierDecl	hSrcBand = GDALGetRasterBand ( psOptions -> hSrcDS , psOptions -> panSrcBands [ iBand ] )
>1280	AssignmentExpr	hSrcBand = GDALGetRasterBand ( psOptions -> hSrcDS , psOptions -> panSrcBands [ iBand ] )
>1281	CallExpression	GDALGetRasterBand ( psOptions -> hSrcDS , psOptions -> panSrcBands [ iBand ] )
>1282	ArgumentList	psOptions -> hSrcDS
>1283	Argument	psOptions -> panSrcBands [ iBand ]
>1284	ArrayIndexing	psOptions -> panSrcBands [ iBand ]
>1285	Identifier	iBand
>1286	PtrMemberAccess	psOptions -> panSrcBands
>1287	Identifier	panSrcBands
>1288	Identifier	psOptions
>1289	Argument	psOptions -> hSrcDS
>1290	PtrMemberAccess	psOptions -> hSrcDS
>1291	Identifier	hSrcDS
>1292	Identifier	psOptions
>1293	Callee	GDALGetRasterBand
>1294	Identifier	GDALGetRasterBand
>1295	Identifier	hSrcBand
>1296	Identifier	hSrcBand
>1297	IdentifierDeclType	GDALRasterBandH
>1298	IdentifierDeclStatement	 
>1299	IdentifierDecl	hDstBand = GDALGetRasterBand ( psOptions -> hDstDS , psOptions -> panDstBands [ iBand ] )
>1300	AssignmentExpr	hDstBand = GDALGetRasterBand ( psOptions -> hDstDS , psOptions -> panDstBands [ iBand ] )
>1301	CallExpression	GDALGetRasterBand ( psOptions -> hDstDS , psOptions -> panDstBands [ iBand ] )
>1302	ArgumentList	psOptions -> hDstDS
>1303	Argument	psOptions -> panDstBands [ iBand ]
>1304	ArrayIndexing	psOptions -> panDstBands [ iBand ]
>1305	Identifier	iBand
>1306	PtrMemberAccess	psOptions -> panDstBands
>1307	Identifier	panDstBands
>1308	Identifier	psOptions
>1309	Argument	psOptions -> hDstDS
>1310	PtrMemberAccess	psOptions -> hDstDS
>1311	Identifier	hDstDS
>1312	Identifier	psOptions
>1313	Callee	GDALGetRasterBand
>1314	Identifier	GDALGetRasterBand
>1315	Identifier	hDstBand
>1316	Identifier	hDstBand
>1317	IdentifierDeclType	GDALRasterBandH
>1318	IncDecOp	 
>1319	IncDec	++
>1320	Identifier	iBand
>1321	Condition	 
>1322	RelationalExpression	iBand < psOptions -> nBandCount
>1323	PtrMemberAccess	psOptions -> nBandCount
>1324	Identifier	nBandCount
>1325	Identifier	psOptions
>1326	Identifier	iBand
>1327	ForInit	 
>1328	AssignmentExpr	iBand = 0
>1329	PrimaryExpression	0
>1330	Identifier	iBand
>1331	ExpressionStatement	 
>1332	AssignmentExpr	psOptions -> eWorkingDataType = GDT_Byte
>1333	Identifier	GDT_Byte
>1334	PtrMemberAccess	psOptions -> eWorkingDataType
>1335	Identifier	eWorkingDataType
>1336	Identifier	psOptions
>1337	IdentifierDeclStatement	 
>1338	IdentifierDecl	iBand
>1339	Identifier	iBand
>1340	IdentifierDeclType	int
>1341	Condition	 
>1342	AndExpression	psOptions -> eWorkingDataType == GDT_Unknown && psOptions -> hSrcDS != NULL && psOptions -> hDstDS != \
>1343	AndExpression	psOptions -> hSrcDS != NULL && psOptions -> hDstDS != NULL && psOptions -> nBandCount >= 1
>1344	AndExpression	psOptions -> hDstDS != NULL && psOptions -> nBandCount >= 1
>1345	RelationalExpression	psOptions -> nBandCount >= 1
>1346	PrimaryExpression	1
>1347	PtrMemberAccess	psOptions -> nBandCount
>1348	Identifier	nBandCount
>1349	Identifier	psOptions
>1350	EqualityExpression	psOptions -> hDstDS != NULL
>1351	Identifier	NULL
>1352	PtrMemberAccess	psOptions -> hDstDS
>1353	Identifier	hDstDS
>1354	Identifier	psOptions
>1355	EqualityExpression	psOptions -> hSrcDS != NULL
>1356	Identifier	NULL
>1357	PtrMemberAccess	psOptions -> hSrcDS
>1358	Identifier	hSrcDS
>1359	Identifier	psOptions
>1360	EqualityExpression	psOptions -> eWorkingDataType == GDT_Unknown
>1361	Identifier	GDT_Unknown
>1362	PtrMemberAccess	psOptions -> eWorkingDataType
>1363	Identifier	eWorkingDataType
>1364	Identifier	psOptions
>1365	IfStatement	if ( psOptions -> nBandCount == 0 && psOptions -> hSrcDS != NULL && psOptions -> hDstDS != NULL && GDALGetRasterCount ( \
>1366	CompoundStatement	 
>1367	ForStatement	for ( i = 0 ; i < psOptions -> nBandCount ; i ++ )
>1368	CompoundStatement	 
>1369	ExpressionStatement	 
>1370	AssignmentExpr	psOptions -> panDstBands [ i ] = i + 1
>1371	AdditiveExpression	i + 1
>1372	PrimaryExpression	1
>1373	Identifier	i
>1374	ArrayIndexing	psOptions -> panDstBands [ i ]
>1375	Identifier	i
>1376	PtrMemberAccess	psOptions -> panDstBands
>1377	Identifier	panDstBands
>1378	Identifier	psOptions
>1379	ExpressionStatement	 
>1380	AssignmentExpr	psOptions -> panSrcBands [ i ] = i + 1
>1381	AdditiveExpression	i + 1
>1382	PrimaryExpression	1
>1383	Identifier	i
>1384	ArrayIndexing	psOptions -> panSrcBands [ i ]
>1385	Identifier	i
>1386	PtrMemberAccess	psOptions -> panSrcBands
>1387	Identifier	panSrcBands
>1388	Identifier	psOptions
>1389	IncDecOp	 
>1390	IncDec	++
>1391	Identifier	i
>1392	Condition	 
>1393	RelationalExpression	i < psOptions -> nBandCount
>1394	PtrMemberAccess	psOptions -> nBandCount
>1395	Identifier	nBandCount
>1396	Identifier	psOptions
>1397	Identifier	i
>1398	ForInit	 
>1399	AssignmentExpr	i = 0
>1400	PrimaryExpression	0
>1401	Identifier	i
>1402	ExpressionStatement	 
>1403	AssignmentExpr	psOptions -> panDstBands = ( int * ) CPLMalloc ( sizeof ( int ) * psOptions -> nBandCount )
>1404	CastExpression	( int * ) CPLMalloc ( sizeof ( int ) * psOptions -> nBandCount )
>1405	CallExpression	CPLMalloc ( sizeof ( int ) * psOptions -> nBandCount )
>1406	ArgumentList	sizeof ( int ) * psOptions -> nBandCount
>1407	Argument	sizeof ( int ) * psOptions -> nBandCount
>1408	MultiplicativeExpression	sizeof ( int ) * psOptions -> nBandCount
>1409	PtrMemberAccess	psOptions -> nBandCount
>1410	Identifier	nBandCount
>1411	Identifier	psOptions
>1412	SizeofExpr	sizeof ( int )
>1413	SizeofOperand	int
>1414	Sizeof	sizeof
>1415	Callee	CPLMalloc
>1416	Identifier	CPLMalloc
>1417	CastTarget	int *
>1418	PtrMemberAccess	psOptions -> panDstBands
>1419	Identifier	panDstBands
>1420	Identifier	psOptions
>1421	ExpressionStatement	 
>1422	AssignmentExpr	psOptions -> panSrcBands = ( int * ) CPLMalloc ( sizeof ( int ) * psOptions -> nBandCount )
>1423	CastExpression	( int * ) CPLMalloc ( sizeof ( int ) * psOptions -> nBandCount )
>1424	CallExpression	CPLMalloc ( sizeof ( int ) * psOptions -> nBandCount )
>1425	ArgumentList	sizeof ( int ) * psOptions -> nBandCount
>1426	Argument	sizeof ( int ) * psOptions -> nBandCount
>1427	MultiplicativeExpression	sizeof ( int ) * psOptions -> nBandCount
>1428	PtrMemberAccess	psOptions -> nBandCount
>1429	Identifier	nBandCount
>1430	Identifier	psOptions
>1431	SizeofExpr	sizeof ( int )
>1432	SizeofOperand	int
>1433	Sizeof	sizeof
>1434	Callee	CPLMalloc
>1435	Identifier	CPLMalloc
>1436	CastTarget	int *
>1437	PtrMemberAccess	psOptions -> panSrcBands
>1438	Identifier	panSrcBands
>1439	Identifier	psOptions
>1440	ExpressionStatement	 
>1441	AssignmentExpr	psOptions -> nBandCount = GDALGetRasterCount ( psOptions -> hSrcDS )
>1442	CallExpression	GDALGetRasterCount ( psOptions -> hSrcDS )
>1443	ArgumentList	psOptions -> hSrcDS
>1444	Argument	psOptions -> hSrcDS
>1445	PtrMemberAccess	psOptions -> hSrcDS
>1446	Identifier	hSrcDS
>1447	Identifier	psOptions
>1448	Callee	GDALGetRasterCount
>1449	Identifier	GDALGetRasterCount
>1450	PtrMemberAccess	psOptions -> nBandCount
>1451	Identifier	nBandCount
>1452	Identifier	psOptions
>1453	IdentifierDeclStatement	 
>1454	IdentifierDecl	i
>1455	Identifier	i
>1456	IdentifierDeclType	int
>1457	Condition	 
>1458	AndExpression	psOptions -> nBandCount == 0 && psOptions -> hSrcDS != NULL && psOptions -> hDstDS != NULL && GDALGetRasterCount ( \
>1459	AndExpression	psOptions -> hSrcDS != NULL && psOptions -> hDstDS != NULL && GDALGetRasterCount ( psOptions -> hSrcDS ) == \
>1460	AndExpression	psOptions -> hDstDS != NULL && GDALGetRasterCount ( psOptions -> hSrcDS ) == GDALGetRasterCount ( psOptions \
>1461	EqualityExpression	GDALGetRasterCount ( psOptions -> hSrcDS ) == GDALGetRasterCount ( psOptions -> hDstDS )
>1462	CallExpression	GDALGetRasterCount ( psOptions -> hDstDS )
>1463	ArgumentList	psOptions -> hDstDS
>1464	Argument	psOptions -> hDstDS
>1465	PtrMemberAccess	psOptions -> hDstDS
>1466	Identifier	hDstDS
>1467	Identifier	psOptions
>1468	Callee	GDALGetRasterCount
>1469	Identifier	GDALGetRasterCount
>1470	CallExpression	GDALGetRasterCount ( psOptions -> hSrcDS )
>1471	ArgumentList	psOptions -> hSrcDS
>1472	Argument	psOptions -> hSrcDS
>1473	PtrMemberAccess	psOptions -> hSrcDS
>1474	Identifier	hSrcDS
>1475	Identifier	psOptions
>1476	Callee	GDALGetRasterCount
>1477	Identifier	GDALGetRasterCount
>1478	EqualityExpression	psOptions -> hDstDS != NULL
>1479	Identifier	NULL
>1480	PtrMemberAccess	psOptions -> hDstDS
>1481	Identifier	hDstDS
>1482	Identifier	psOptions
>1483	EqualityExpression	psOptions -> hSrcDS != NULL
>1484	Identifier	NULL
>1485	PtrMemberAccess	psOptions -> hSrcDS
>1486	Identifier	hSrcDS
>1487	Identifier	psOptions
>1488	EqualityExpression	psOptions -> nBandCount == 0
>1489	PrimaryExpression	0
>1490	PtrMemberAccess	psOptions -> nBandCount
>1491	Identifier	nBandCount
>1492	Identifier	psOptions
>1493	ExpressionStatement	 
>1494	AssignmentExpr	psOptions -> papszWarpOptions = CSLAddNameValue ( psOptions -> papszWarpOptions , \"EXTRA_ELTS\" , CPLSPrintf ( \"%\
>1495	CallExpression	CSLAddNameValue ( psOptions -> papszWarpOptions , \"EXTRA_ELTS\" , CPLSPrintf ( \"%d\" , WARP_EXTRA_ELTS ) )
>1496	ArgumentList	psOptions -> papszWarpOptions
>1497	Argument	CPLSPrintf ( \"%d\" , WARP_EXTRA_ELTS )
>1498	CallExpression	CPLSPrintf ( \"%d\" , WARP_EXTRA_ELTS )
>1499	ArgumentList	\"%d\"
>1500	Argument	WARP_EXTRA_ELTS
>1501	Identifier	WARP_EXTRA_ELTS
>1502	Argument	\"%d\"
>1503	PrimaryExpression	\"%d\"
>1504	Callee	CPLSPrintf
>1505	Identifier	CPLSPrintf
>1506	Argument	\"EXTRA_ELTS\"
>1507	PrimaryExpression	\"EXTRA_ELTS\"
>1508	Argument	psOptions -> papszWarpOptions
>1509	PtrMemberAccess	psOptions -> papszWarpOptions
>1510	Identifier	papszWarpOptions
>1511	Identifier	psOptions
>1512	Callee	CSLAddNameValue
>1513	Identifier	CSLAddNameValue
>1514	PtrMemberAccess	psOptions -> papszWarpOptions
>1515	Identifier	papszWarpOptions
>1516	Identifier	psOptions
>1517	ExpressionStatement	 
>1518	AssignmentExpr	psOptions = GDALCloneWarpOptions ( psNewOptions )
>1519	CallExpression	GDALCloneWarpOptions ( psNewOptions )
>1520	ArgumentList	psNewOptions
>1521	Argument	psNewOptions
>1522	Identifier	psNewOptions
>1523	Callee	GDALCloneWarpOptions
>1524	Identifier	GDALCloneWarpOptions
>1525	Identifier	psOptions
>1526	IfStatement	if ( psOptions != NULL )
>1527	ExpressionStatement	 
>1528	CallExpression	WipeOptions ( )
>1529	ArgumentList	 
>1530	Callee	WipeOptions
>1531	Identifier	WipeOptions
>1532	Condition	 
>1533	EqualityExpression	psOptions != NULL
>1534	Identifier	NULL
>1535	Identifier	psOptions
>1536	IdentifierDeclStatement	 
>1537	IdentifierDecl	eErr = CE_None
>1538	AssignmentExpr	eErr = CE_None
>1539	Identifier	CE_None
>1540	Identifier	CE_None
>1541	Identifier	eErr
>1542	IdentifierDeclType	CPLErr
>1607	FunctionDef	GDALCreateWarpOperation (const GDALWarpOptions * psNewOptions)
>1608	ParameterList	const GDALWarpOptions * psNewOptions
>1609	Parameter	 
>1610	Identifier	psNewOptions
>1611	ParameterType	const GDALWarpOptions *
>1612	ReturnType	GDALWarpOperationH
>1613	CompoundStatement	 
>1614	ReturnStatement	 
>1615	CastExpression	( GDALWarpOperationH ) poOperation
>1616	Identifier	poOperation
>1617	CastTarget	GDALWarpOperationH
>1618	IfStatement	if ( poOperation -> Initialize ( psNewOptions ) != CE_None )
>1619	CompoundStatement	 
>1620	ReturnStatement	 
>1621	Identifier	NULL
>1622	ExpressionStatement	 
>1623	Identifier	poOperation
>1624	Statement	 
>1625	Condition	 
>1626	EqualityExpression	poOperation -> Initialize ( psNewOptions ) != CE_None
>1627	Identifier	CE_None
>1628	CallExpression	poOperation -> Initialize ( psNewOptions )
>1629	ArgumentList	psNewOptions
>1630	Argument	psNewOptions
>1631	Identifier	psNewOptions
>1632	Callee	poOperation -> Initialize
>1633	PtrMemberAccess	poOperation -> Initialize
>1634	Identifier	Initialize
>1635	Identifier	poOperation
>1636	ExpressionStatement	 
>1637	Identifier	GDALWarpOperation
>1638	Statement	 
>1639	Statement	 
>1640	Statement	 
>1641	IdentifierDeclStatement	 
>1642	IdentifierDecl	* poOperation
>1643	Identifier	poOperation
>1644	IdentifierDeclType	GDALWarpOperation *
>1654	FunctionDef	GDALDestroyWarpOperation (GDALWarpOperationH hOperation)
>1655	ParameterList	GDALWarpOperationH hOperation
>1656	Parameter	 
>1657	Identifier	hOperation
>1658	ParameterType	GDALWarpOperationH
>1659	ReturnType	void
>1660	CompoundStatement	 
>1661	ExpressionStatement	 
>1662	Identifier	hOperation
>1663	Statement	 
>1664	Statement	 
>1665	Statement	 
>1666	Statement	 
>1667	Statement	 
>1668	IfStatement	if ( hOperation )
>1669	Statement	 
>1670	Condition	 
>1671	Identifier	hOperation
>1687	FunctionDef	OrderWarpChunk (const void * _a , const void * _b)
>1688	ParameterList	const void * _a , const void * _b
>1689	Parameter	 
>1690	Identifier	_b
>1691	ParameterType	const void *
>1692	Parameter	 
>1693	Identifier	_a
>1694	ParameterType	const void *
>1695	ReturnType	static int
>1696	CompoundStatement	 
>1697	IfStatement	if ( a -> dy < b -> dy )
>1698	ElseStatement	else
>1699	IfStatement	if ( a -> dy > b -> dy )
>1700	ElseStatement	else
>1701	IfStatement	if ( a -> dx < b -> dx )
>1702	ElseStatement	else
>1703	IfStatement	if ( a -> dx > b -> dx )
>1704	ElseStatement	else
>1705	ReturnStatement	 
>1706	PrimaryExpression	0
>1707	ReturnStatement	 
>1708	PrimaryExpression	1
>1709	Condition	 
>1710	RelationalExpression	a -> dx > b -> dx
>1711	PtrMemberAccess	b -> dx
>1712	Identifier	dx
>1713	Identifier	b
>1714	PtrMemberAccess	a -> dx
>1715	Identifier	dx
>1716	Identifier	a
>1717	ReturnStatement	 
>1718	UnaryOp	- 1
>1719	PrimaryExpression	1
>1720	UnaryOperator	-
>1721	Condition	 
>1722	RelationalExpression	a -> dx < b -> dx
>1723	PtrMemberAccess	b -> dx
>1724	Identifier	dx
>1725	Identifier	b
>1726	PtrMemberAccess	a -> dx
>1727	Identifier	dx
>1728	Identifier	a
>1729	ReturnStatement	 
>1730	PrimaryExpression	1
>1731	Condition	 
>1732	RelationalExpression	a -> dy > b -> dy
>1733	PtrMemberAccess	b -> dy
>1734	Identifier	dy
>1735	Identifier	b
>1736	PtrMemberAccess	a -> dy
>1737	Identifier	dy
>1738	Identifier	a
>1739	ReturnStatement	 
>1740	UnaryOp	- 1
>1741	PrimaryExpression	1
>1742	UnaryOperator	-
>1743	Condition	 
>1744	RelationalExpression	a -> dy < b -> dy
>1745	PtrMemberAccess	b -> dy
>1746	Identifier	dy
>1747	Identifier	b
>1748	PtrMemberAccess	a -> dy
>1749	Identifier	dy
>1750	Identifier	a
>1751	IdentifierDeclStatement	 
>1752	IdentifierDecl	* b = ( const WarpChunk * ) _b
>1753	AssignmentExpr	* b = ( const WarpChunk * ) _b
>1754	CastExpression	( const WarpChunk * ) _b
>1755	Identifier	_b
>1756	CastTarget	const WarpChunk *
>1757	Identifier	b
>1758	Identifier	b
>1759	IdentifierDeclType	const WarpChunk *
>1760	IdentifierDeclStatement	 
>1761	IdentifierDecl	* a = ( const WarpChunk * ) _a
>1762	AssignmentExpr	* a = ( const WarpChunk * ) _a
>1763	CastExpression	( const WarpChunk * ) _a
>1764	Identifier	_a
>1765	CastTarget	const WarpChunk *
>1766	Identifier	a
>1767	Identifier	a
>1768	IdentifierDeclType	const WarpChunk *
>1782	FunctionDef	GDALWarpOperation 
>1783	ParameterList	int nDstXOff , int nDstYOff , int nDstXSize , int nDstYSize
>1784	Parameter	 
>1785	Identifier	nDstYSize
>1786	ParameterType	int
>1787	Parameter	 
>1788	Identifier	nDstXSize
>1789	ParameterType	int
>1790	Parameter	 
>1791	Identifier	nDstYOff
>1792	ParameterType	int
>1793	Parameter	 
>1794	Identifier	nDstXOff
>1795	ParameterType	int
>1796	ReturnType	CPLErr
>1797	CompoundStatement	 
>1798	ReturnStatement	 
>1799	Identifier	CE_None
>1800	ExpressionStatement	 
>1801	CallExpression	psOptions -> pfnProgress ( 1.00001 , \"\" , psOptions -> pProgressArg )
>1802	ArgumentList	1.00001
>1803	Argument	psOptions -> pProgressArg
>1804	PtrMemberAccess	psOptions -> pProgressArg
>1805	Identifier	pProgressArg
>1806	Identifier	psOptions
>1807	Argument	\"\"
>1808	PrimaryExpression	\"\"
>1809	Argument	1.00001
>1810	PrimaryExpression	1.00001
>1811	Callee	psOptions -> pfnProgress
>1812	PtrMemberAccess	psOptions -> pfnProgress
>1813	Identifier	pfnProgress
>1814	Identifier	psOptions
>1815	ExpressionStatement	 
>1816	CallExpression	WipeChunkList ( )
>1817	ArgumentList	 
>1818	Callee	WipeChunkList
>1819	Identifier	WipeChunkList
>1820	ForStatement	for ( iChunk = 0 ; iChunk < nChunkListCount ; iChunk ++ )
>1821	CompoundStatement	 
>1822	ExpressionStatement	 
>1823	AssignmentExpr	dfPixelsProcessed += dfChunkPixels
>1824	Identifier	dfChunkPixels
>1825	Identifier	dfPixelsProcessed
>1826	IfStatement	if ( eErr != CE_None )
>1827	ReturnStatement	 
>1828	Identifier	eErr
>1829	Condition	 
>1830	EqualityExpression	eErr != CE_None
>1831	Identifier	CE_None
>1832	Identifier	eErr
>1833	ExpressionStatement	 
>1834	AssignmentExpr	eErr = WarpRegion ( panThisChunk [ 0 ] , panThisChunk [ 1 ] , panThisChunk [ 2 ] , panThisChunk [ 3 ] , \
>1835	CallExpression	WarpRegion ( panThisChunk [ 0 ] , panThisChunk [ 1 ] , panThisChunk [ 2 ] , panThisChunk [ 3 ] , panThisChunk [ \
>1836	ArgumentList	panThisChunk [ 0 ]
>1837	Argument	dfProgressScale
>1838	Identifier	dfProgressScale
>1839	Argument	dfProgressBase
>1840	Identifier	dfProgressBase
>1841	Argument	panThisChunk [ 7 ]
>1842	ArrayIndexing	panThisChunk [ 7 ]
>1843	PrimaryExpression	7
>1844	Identifier	panThisChunk
>1845	Argument	panThisChunk [ 6 ]
>1846	ArrayIndexing	panThisChunk [ 6 ]
>1847	PrimaryExpression	6
>1848	Identifier	panThisChunk
>1849	Argument	panThisChunk [ 5 ]
>1850	ArrayIndexing	panThisChunk [ 5 ]
>1851	PrimaryExpression	5
>1852	Identifier	panThisChunk
>1853	Argument	panThisChunk [ 4 ]
>1854	ArrayIndexing	panThisChunk [ 4 ]
>1855	PrimaryExpression	4
>1856	Identifier	panThisChunk
>1857	Argument	panThisChunk [ 3 ]
>1858	ArrayIndexing	panThisChunk [ 3 ]
>1859	PrimaryExpression	3
>1860	Identifier	panThisChunk
>1861	Argument	panThisChunk [ 2 ]
>1862	ArrayIndexing	panThisChunk [ 2 ]
>1863	PrimaryExpression	2
>1864	Identifier	panThisChunk
>1865	Argument	panThisChunk [ 1 ]
>1866	ArrayIndexing	panThisChunk [ 1 ]
>1867	PrimaryExpression	1
>1868	Identifier	panThisChunk
>1869	Argument	panThisChunk [ 0 ]
>1870	ArrayIndexing	panThisChunk [ 0 ]
>1871	PrimaryExpression	0
>1872	Identifier	panThisChunk
>1873	Callee	WarpRegion
>1874	Identifier	WarpRegion
>1875	Identifier	eErr
>1876	IdentifierDeclStatement	 
>1877	IdentifierDecl	dfProgressScale = dfChunkPixels / dfTotalPixels
>1878	AssignmentExpr	dfProgressScale = dfChunkPixels / dfTotalPixels
>1879	MultiplicativeExpression	dfChunkPixels / dfTotalPixels
>1880	Identifier	dfTotalPixels
>1881	Identifier	dfChunkPixels
>1882	Identifier	dfProgressScale
>1883	Identifier	dfProgressScale
>1884	IdentifierDeclType	double
>1885	IdentifierDeclStatement	 
>1886	IdentifierDecl	dfProgressBase = dfPixelsProcessed / dfTotalPixels
>1887	AssignmentExpr	dfProgressBase = dfPixelsProcessed / dfTotalPixels
>1888	MultiplicativeExpression	dfPixelsProcessed / dfTotalPixels
>1889	Identifier	dfTotalPixels
>1890	Identifier	dfPixelsProcessed
>1891	Identifier	dfProgressBase
>1892	Identifier	dfProgressBase
>1893	IdentifierDeclType	double
>1894	IdentifierDeclStatement	 
>1895	IdentifierDecl	eErr
>1896	Identifier	eErr
>1897	IdentifierDeclType	CPLErr
>1898	IdentifierDeclStatement	 
>1899	IdentifierDecl	dfChunkPixels = panThisChunk [ 2 ] * ( double ) panThisChunk [ 3 ]
>1900	AssignmentExpr	dfChunkPixels = panThisChunk [ 2 ] * ( double ) panThisChunk [ 3 ]
>1901	MultiplicativeExpression	panThisChunk [ 2 ] * ( double ) panThisChunk [ 3 ]
>1902	CastExpression	( double ) panThisChunk [ 3 ]
>1903	ArrayIndexing	panThisChunk [ 3 ]
>1904	PrimaryExpression	3
>1905	Identifier	panThisChunk
>1906	CastTarget	double
>1907	ArrayIndexing	panThisChunk [ 2 ]
>1908	PrimaryExpression	2
>1909	Identifier	panThisChunk
>1910	Identifier	dfChunkPixels
>1911	Identifier	dfChunkPixels
>1912	IdentifierDeclType	double
>1913	IdentifierDeclStatement	 
>1914	IdentifierDecl	* panThisChunk = panChunkList + iChunk * 8
>1915	AssignmentExpr	* panThisChunk = panChunkList + iChunk * 8
>1916	AdditiveExpression	panChunkList + iChunk * 8
>1917	MultiplicativeExpression	iChunk * 8
>1918	PrimaryExpression	8
>1919	Identifier	iChunk
>1920	Identifier	panChunkList
>1921	Identifier	panThisChunk
>1922	Identifier	panThisChunk
>1923	IdentifierDeclType	int *
>1924	IncDecOp	 
>1925	IncDec	++
>1926	Identifier	iChunk
>1927	Condition	 
>1928	RelationalExpression	iChunk < nChunkListCount
>1929	Identifier	nChunkListCount
>1930	Identifier	iChunk
>1931	ForInit	 
>1932	AssignmentExpr	iChunk = 0
>1933	PrimaryExpression	0
>1934	Identifier	iChunk
>1935	IdentifierDeclStatement	 
>1936	IdentifierDecl	dfPixelsProcessed = 0.0
>1937	AssignmentExpr	dfPixelsProcessed = 0.0
>1938	PrimaryExpression	0.0
>1939	Identifier	dfPixelsProcessed
>1940	Identifier	dfPixelsProcessed
>1941	IdentifierDeclType	double
>1942	ForStatement	for ( iChunk = 0 ; iChunk < nChunkListCount ; iChunk ++ )
>1943	CompoundStatement	 
>1944	ExpressionStatement	 
>1945	AssignmentExpr	dfTotalPixels += dfChunkPixels
>1946	Identifier	dfChunkPixels
>1947	Identifier	dfTotalPixels
>1948	IdentifierDeclStatement	 
>1949	IdentifierDecl	dfChunkPixels = panThisChunk [ 2 ] * ( double ) panThisChunk [ 3 ]
>1950	AssignmentExpr	dfChunkPixels = panThisChunk [ 2 ] * ( double ) panThisChunk [ 3 ]
>1951	MultiplicativeExpression	panThisChunk [ 2 ] * ( double ) panThisChunk [ 3 ]
>1952	CastExpression	( double ) panThisChunk [ 3 ]
>1953	ArrayIndexing	panThisChunk [ 3 ]
>1954	PrimaryExpression	3
>1955	Identifier	panThisChunk
>1956	CastTarget	double
>1957	ArrayIndexing	panThisChunk [ 2 ]
>1958	PrimaryExpression	2
>1959	Identifier	panThisChunk
>1960	Identifier	dfChunkPixels
>1961	Identifier	dfChunkPixels
>1962	IdentifierDeclType	double
>1963	IdentifierDeclStatement	 
>1964	IdentifierDecl	* panThisChunk = panChunkList + iChunk * 8
>1965	AssignmentExpr	* panThisChunk = panChunkList + iChunk * 8
>1966	AdditiveExpression	panChunkList + iChunk * 8
>1967	MultiplicativeExpression	iChunk * 8
>1968	PrimaryExpression	8
>1969	Identifier	iChunk
>1970	Identifier	panChunkList
>1971	Identifier	panThisChunk
>1972	Identifier	panThisChunk
>1973	IdentifierDeclType	int *
>1974	IncDecOp	 
>1975	IncDec	++
>1976	Identifier	iChunk
>1977	Condition	 
>1978	RelationalExpression	iChunk < nChunkListCount
>1979	Identifier	nChunkListCount
>1980	Identifier	iChunk
>1981	ForInit	 
>1982	AssignmentExpr	iChunk = 0
>1983	PrimaryExpression	0
>1984	Identifier	iChunk
>1985	IdentifierDeclStatement	 
>1986	IdentifierDecl	dfTotalPixels = 0
>1987	AssignmentExpr	dfTotalPixels = 0
>1988	PrimaryExpression	0
>1989	Identifier	dfTotalPixels
>1990	Identifier	dfTotalPixels
>1991	IdentifierDeclType	double
>1992	IdentifierDeclStatement	 
>1993	IdentifierDecl	iChunk
>1994	Identifier	iChunk
>1995	IdentifierDeclType	int
>1996	ExpressionStatement	 
>1997	CallExpression	qsort ( panChunkList , nChunkListCount , sizeof ( WarpChunk ) , OrderWarpChunk )
>1998	ArgumentList	panChunkList
>1999	Argument	OrderWarpChunk
>2000	Identifier	OrderWarpChunk
>2001	Argument	sizeof ( WarpChunk )
>2002	SizeofExpr	sizeof ( WarpChunk )
>2003	SizeofOperand	WarpChunk
>2004	Sizeof	sizeof
>2005	Argument	nChunkListCount
>2006	Identifier	nChunkListCount
>2007	Argument	panChunkList
>2008	Identifier	panChunkList
>2009	Callee	qsort
>2010	Identifier	qsort
>2011	ExpressionStatement	 
>2012	CallExpression	CollectChunkList ( nDstXOff , nDstYOff , nDstXSize , nDstYSize )
>2013	ArgumentList	nDstXOff
>2014	Argument	nDstYSize
>2015	Identifier	nDstYSize
>2016	Argument	nDstXSize
>2017	Identifier	nDstXSize
>2018	Argument	nDstYOff
>2019	Identifier	nDstYOff
>2020	Argument	nDstXOff
>2021	Identifier	nDstXOff
>2022	Callee	CollectChunkList
>2023	Identifier	CollectChunkList
>2024	ExpressionStatement	 
>2025	CallExpression	WipeChunkList ( )
>2026	ArgumentList	 
>2027	Callee	WipeChunkList
>2028	Identifier	WipeChunkList
>2053	FunctionDef	GDALChunkAndWarpImage (GDALWarpOperationH hOperation , int nDstXOff , int nDstYOff , int nDstXSize , int nDstYSize)
>2054	ParameterList	GDALWarpOperationH hOperation , int nDstXOff , int nDstYOff , int nDstXSize , int nDstYSize
>2055	Parameter	 
>2056	Identifier	nDstYSize
>2057	ParameterType	int
>2058	Parameter	 
>2059	Identifier	nDstXSize
>2060	ParameterType	int
>2061	Parameter	 
>2062	Identifier	nDstYOff
>2063	ParameterType	int
>2064	Parameter	 
>2065	Identifier	nDstXOff
>2066	ParameterType	int
>2067	Parameter	 
>2068	Identifier	hOperation
>2069	ParameterType	GDALWarpOperationH
>2070	ReturnType	CPLErr
>2071	CompoundStatement	 
>2072	ReturnStatement	 
>2073	CallExpression	( ( GDALWarpOperation * ) hOperation ) -> ChunkAndWarpImage ( nDstXOff , nDstYOff , nDstXSize , nDstYSize )
>2074	ArgumentList	nDstXOff
>2075	Argument	nDstYSize
>2076	Identifier	nDstYSize
>2077	Argument	nDstXSize
>2078	Identifier	nDstXSize
>2079	Argument	nDstYOff
>2080	Identifier	nDstYOff
>2081	Argument	nDstXOff
>2082	Identifier	nDstXOff
>2083	Callee	( ( GDALWarpOperation * ) hOperation ) -> ChunkAndWarpImage
>2084	PtrMemberAccess	( ( GDALWarpOperation * ) hOperation ) -> ChunkAndWarpImage
>2085	Identifier	ChunkAndWarpImage
>2086	CastExpression	( GDALWarpOperation * ) hOperation
>2087	Identifier	hOperation
>2088	CastTarget	GDALWarpOperation *
>2089	ExpressionStatement	 
>2090	CallExpression	VALIDATE_POINTER1 ( hOperation , \"GDALChunkAndWarpImage\" , CE_Failure )
>2091	ArgumentList	hOperation
>2092	Argument	CE_Failure
>2093	Identifier	CE_Failure
>2094	Argument	\"GDALChunkAndWarpImage\"
>2095	PrimaryExpression	\"GDALChunkAndWarpImage\"
>2096	Argument	hOperation
>2097	Identifier	hOperation
>2098	Callee	VALIDATE_POINTER1
>2099	Identifier	VALIDATE_POINTER1
>2134	FunctionDef	ChunkThreadMain (void * pThreadData)
>2135	ParameterList	void * pThreadData
>2136	Parameter	 
>2137	Identifier	pThreadData
>2138	ParameterType	void *
>2139	ReturnType	static void
>2140	CompoundStatement	 
>2141	IfStatement	if ( ! CPLAcquireMutex ( psData -> hIOMutex , 600.0 ) )
>2142	ElseStatement	else
>2143	CompoundStatement	 
>2144	ExpressionStatement	 
>2145	CallExpression	CPLReleaseMutex ( psData -> hIOMutex )
>2146	ArgumentList	psData -> hIOMutex
>2147	Argument	psData -> hIOMutex
>2148	PtrMemberAccess	psData -> hIOMutex
>2149	Identifier	hIOMutex
>2150	Identifier	psData
>2151	Callee	CPLReleaseMutex
>2152	Identifier	CPLReleaseMutex
>2153	ExpressionStatement	 
>2154	AssignmentExpr	psData -> eErr = psData -> poOperation -> WarpRegion ( panChunkInfo [ 0 ] , panChunkInfo [ 1 ] , panChunkInfo [ \
>2155	CallExpression	psData -> poOperation -> WarpRegion ( panChunkInfo [ 0 ] , panChunkInfo [ 1 ] , panChunkInfo [ 2 ] , panChunkInfo [ \
>2156	ArgumentList	panChunkInfo [ 0 ]
>2157	Argument	psData -> dfProgressScale
>2158	PtrMemberAccess	psData -> dfProgressScale
>2159	Identifier	dfProgressScale
>2160	Identifier	psData
>2161	Argument	psData -> dfProgressBase
>2162	PtrMemberAccess	psData -> dfProgressBase
>2163	Identifier	dfProgressBase
>2164	Identifier	psData
>2165	Argument	panChunkInfo [ 7 ]
>2166	ArrayIndexing	panChunkInfo [ 7 ]
>2167	PrimaryExpression	7
>2168	Identifier	panChunkInfo
>2169	Argument	panChunkInfo [ 6 ]
>2170	ArrayIndexing	panChunkInfo [ 6 ]
>2171	PrimaryExpression	6
>2172	Identifier	panChunkInfo
>2173	Argument	panChunkInfo [ 5 ]
>2174	ArrayIndexing	panChunkInfo [ 5 ]
>2175	PrimaryExpression	5
>2176	Identifier	panChunkInfo
>2177	Argument	panChunkInfo [ 4 ]
>2178	ArrayIndexing	panChunkInfo [ 4 ]
>2179	PrimaryExpression	4
>2180	Identifier	panChunkInfo
>2181	Argument	panChunkInfo [ 3 ]
>2182	ArrayIndexing	panChunkInfo [ 3 ]
>2183	PrimaryExpression	3
>2184	Identifier	panChunkInfo
>2185	Argument	panChunkInfo [ 2 ]
>2186	ArrayIndexing	panChunkInfo [ 2 ]
>2187	PrimaryExpression	2
>2188	Identifier	panChunkInfo
>2189	Argument	panChunkInfo [ 1 ]
>2190	ArrayIndexing	panChunkInfo [ 1 ]
>2191	PrimaryExpression	1
>2192	Identifier	panChunkInfo
>2193	Argument	panChunkInfo [ 0 ]
>2194	ArrayIndexing	panChunkInfo [ 0 ]
>2195	PrimaryExpression	0
>2196	Identifier	panChunkInfo
>2197	Callee	psData -> poOperation -> WarpRegion
>2198	PtrMemberAccess	psData -> poOperation -> WarpRegion
>2199	Identifier	WarpRegion
>2200	PtrMemberAccess	psData -> poOperation
>2201	Identifier	poOperation
>2202	Identifier	psData
>2203	PtrMemberAccess	psData -> eErr
>2204	Identifier	eErr
>2205	Identifier	psData
>2206	IfStatement	if ( psData -> hCond != NULL )
>2207	CompoundStatement	 
>2208	ExpressionStatement	 
>2209	CallExpression	CPLReleaseMutex ( psData -> hCondMutex )
>2210	ArgumentList	psData -> hCondMutex
>2211	Argument	psData -> hCondMutex
>2212	PtrMemberAccess	psData -> hCondMutex
>2213	Identifier	hCondMutex
>2214	Identifier	psData
>2215	Callee	CPLReleaseMutex
>2216	Identifier	CPLReleaseMutex
>2217	ExpressionStatement	 
>2218	CallExpression	CPLCondSignal ( psData -> hCond )
>2219	ArgumentList	psData -> hCond
>2220	Argument	psData -> hCond
>2221	PtrMemberAccess	psData -> hCond
>2222	Identifier	hCond
>2223	Identifier	psData
>2224	Callee	CPLCondSignal
>2225	Identifier	CPLCondSignal
>2226	ExpressionStatement	 
>2227	AssignmentExpr	psData -> bIOMutexTaken = TRUE
>2228	Identifier	TRUE
>2229	PtrMemberAccess	psData -> bIOMutexTaken
>2230	Identifier	bIOMutexTaken
>2231	Identifier	psData
>2232	ExpressionStatement	 
>2233	CallExpression	CPLAcquireMutex ( psData -> hCondMutex , 1.0 )
>2234	ArgumentList	psData -> hCondMutex
>2235	Argument	1.0
>2236	PrimaryExpression	1.0
>2237	Argument	psData -> hCondMutex
>2238	PtrMemberAccess	psData -> hCondMutex
>2239	Identifier	hCondMutex
>2240	Identifier	psData
>2241	Callee	CPLAcquireMutex
>2242	Identifier	CPLAcquireMutex
>2243	Condition	 
>2244	EqualityExpression	psData -> hCond != NULL
>2245	Identifier	NULL
>2246	PtrMemberAccess	psData -> hCond
>2247	Identifier	hCond
>2248	Identifier	psData
>2249	CompoundStatement	 
>2250	ExpressionStatement	 
>2251	AssignmentExpr	psData -> eErr = CE_Failure
>2252	Identifier	CE_Failure
>2253	PtrMemberAccess	psData -> eErr
>2254	Identifier	eErr
>2255	Identifier	psData
>2256	ExpressionStatement	 
>2257	CallExpression	CPLError ( CE_Failure , CPLE_AppDefined , \"Failed to acquire IOMutex in WarpRegion().\" )
>2258	ArgumentList	CE_Failure
>2259	Argument	\"Failed to acquire IOMutex in WarpRegion().\"
>2260	PrimaryExpression	\"Failed to acquire IOMutex in WarpRegion().\"
>2261	Argument	CPLE_AppDefined
>2262	Identifier	CPLE_AppDefined
>2263	Argument	CE_Failure
>2264	Identifier	CE_Failure
>2265	Callee	CPLError
>2266	Identifier	CPLError
>2267	Condition	 
>2268	UnaryOp	! CPLAcquireMutex ( psData -> hIOMutex , 600.0 )
>2269	CallExpression	CPLAcquireMutex ( psData -> hIOMutex , 600.0 )
>2270	ArgumentList	psData -> hIOMutex
>2271	Argument	600.0
>2272	PrimaryExpression	600.0
>2273	Argument	psData -> hIOMutex
>2274	PtrMemberAccess	psData -> hIOMutex
>2275	Identifier	hIOMutex
>2276	Identifier	psData
>2277	Callee	CPLAcquireMutex
>2278	Identifier	CPLAcquireMutex
>2279	UnaryOperator	!
>2280	IdentifierDeclStatement	 
>2281	IdentifierDecl	* panChunkInfo = psData -> panChunkInfo
>2282	AssignmentExpr	* panChunkInfo = psData -> panChunkInfo
>2283	PtrMemberAccess	psData -> panChunkInfo
>2284	Identifier	panChunkInfo
>2285	Identifier	psData
>2286	Identifier	panChunkInfo
>2287	Identifier	panChunkInfo
>2288	IdentifierDeclType	int *
>2289	IdentifierDeclStatement	 
>2290	IdentifierDecl	* psData = ( volatile ChunkThreadData * ) pThreadData
>2291	AssignmentExpr	* psData = ( volatile ChunkThreadData * ) pThreadData
>2292	CastExpression	( volatile ChunkThreadData * ) pThreadData
>2293	Identifier	pThreadData
>2294	CastTarget	volatile ChunkThreadData *
>2295	Identifier	psData
>2296	Identifier	psData
>2297	IdentifierDeclType	volatile ChunkThreadData *
>2323	FunctionDef	GDALWarpOperation 
>2324	ParameterList	int nDstXOff , int nDstYOff , int nDstXSize , int nDstYSize
>2325	Parameter	 
>2326	Identifier	nDstYSize
>2327	ParameterType	int
>2328	Parameter	 
>2329	Identifier	nDstXSize
>2330	ParameterType	int
>2331	Parameter	 
>2332	Identifier	nDstYOff
>2333	ParameterType	int
>2334	Parameter	 
>2335	Identifier	nDstXOff
>2336	ParameterType	int
>2337	ReturnType	CPLErr
>2338	CompoundStatement	 
>2339	ReturnStatement	 
>2340	Identifier	eErr
>2341	ExpressionStatement	 
>2342	CallExpression	WipeChunkList ( )
>2343	ArgumentList	 
>2344	Callee	WipeChunkList
>2345	Identifier	WipeChunkList
>2346	ExpressionStatement	 
>2347	CallExpression	CPLDestroyMutex ( hCondMutex )
>2348	ArgumentList	hCondMutex
>2349	Argument	hCondMutex
>2350	Identifier	hCondMutex
>2351	Callee	CPLDestroyMutex
>2352	Identifier	CPLDestroyMutex
>2353	ExpressionStatement	 
>2354	CallExpression	CPLDestroyCond ( hCond )
>2355	ArgumentList	hCond
>2356	Argument	hCond
>2357	Identifier	hCond
>2358	Callee	CPLDestroyCond
>2359	Identifier	CPLDestroyCond
>2360	ForStatement	for ( iThread = 0 ; iThread < 2 ; iThread ++ )
>2361	CompoundStatement	 
>2362	IfStatement	if ( asThreadData [ iThread ] . hThreadHandle )
>2363	ExpressionStatement	 
>2364	CallExpression	CPLJoinThread ( asThreadData [ iThread ] . hThreadHandle )
>2365	ArgumentList	asThreadData [ iThread ] . hThreadHandle
>2366	Argument	asThreadData [ iThread ] . hThreadHandle
>2367	MemberAccess	asThreadData [ iThread ] . hThreadHandle
>2368	Identifier	hThreadHandle
>2369	ArrayIndexing	asThreadData [ iThread ]
>2370	Identifier	iThread
>2371	Identifier	asThreadData
>2372	Callee	CPLJoinThread
>2373	Identifier	CPLJoinThread
>2374	Condition	 
>2375	MemberAccess	asThreadData [ iThread ] . hThreadHandle
>2376	Identifier	hThreadHandle
>2377	ArrayIndexing	asThreadData [ iThread ]
>2378	Identifier	iThread
>2379	Identifier	asThreadData
>2380	IncDecOp	 
>2381	IncDec	++
>2382	Identifier	iThread
>2383	Condition	 
>2384	RelationalExpression	iThread < 2
>2385	PrimaryExpression	2
>2386	Identifier	iThread
>2387	ForInit	 
>2388	AssignmentExpr	iThread = 0
>2389	PrimaryExpression	0
>2390	Identifier	iThread
>2391	IdentifierDeclStatement	 
>2392	IdentifierDecl	iThread
>2393	Identifier	iThread
>2394	IdentifierDeclType	int
>2395	ForStatement	for ( iChunk = 0 ; iChunk < nChunkListCount + 1 ; iChunk ++ )
>2396	CompoundStatement	 
>2397	IfStatement	if ( iChunk > 0 )
>2398	CompoundStatement	 
>2399	IfStatement	if ( eErr != CE_None )
>2400	BreakStatement	 
>2401	Condition	 
>2402	EqualityExpression	eErr != CE_None
>2403	Identifier	CE_None
>2404	Identifier	eErr
>2405	ExpressionStatement	 
>2406	AssignmentExpr	eErr = asThreadData [ iThread ] . eErr
>2407	MemberAccess	asThreadData [ iThread ] . eErr
>2408	Identifier	eErr
>2409	ArrayIndexing	asThreadData [ iThread ]
>2410	Identifier	iThread
>2411	Identifier	asThreadData
>2412	Identifier	eErr
>2413	ExpressionStatement	 
>2414	CallExpression	CPLDebug ( \"GDAL\" , \"Finished chunk %d.\" , iChunk - 1 )
>2415	ArgumentList	\"GDAL\"
>2416	Argument	iChunk - 1
>2417	AdditiveExpression	iChunk - 1
>2418	PrimaryExpression	1
>2419	Identifier	iChunk
>2420	Argument	\"Finished chunk %d.\"
>2421	PrimaryExpression	\"Finished chunk %d.\"
>2422	Argument	\"GDAL\"
>2423	PrimaryExpression	\"GDAL\"
>2424	Callee	CPLDebug
>2425	Identifier	CPLDebug
>2426	ExpressionStatement	 
>2427	AssignmentExpr	asThreadData [ iThread ] . hThreadHandle = NULL
>2428	Identifier	NULL
>2429	MemberAccess	asThreadData [ iThread ] . hThreadHandle
>2430	Identifier	hThreadHandle
>2431	ArrayIndexing	asThreadData [ iThread ]
>2432	Identifier	iThread
>2433	Identifier	asThreadData
>2434	ExpressionStatement	 
>2435	CallExpression	CPLJoinThread ( asThreadData [ iThread ] . hThreadHandle )
>2436	ArgumentList	asThreadData [ iThread ] . hThreadHandle
>2437	Argument	asThreadData [ iThread ] . hThreadHandle
>2438	MemberAccess	asThreadData [ iThread ] . hThreadHandle
>2439	Identifier	hThreadHandle
>2440	ArrayIndexing	asThreadData [ iThread ]
>2441	Identifier	iThread
>2442	Identifier	asThreadData
>2443	Callee	CPLJoinThread
>2444	Identifier	CPLJoinThread
>2445	ExpressionStatement	 
>2446	AssignmentExpr	iThread = ( iChunk - 1 ) % 2
>2447	MultiplicativeExpression	( iChunk - 1 ) % 2
>2448	PrimaryExpression	2
>2449	AdditiveExpression	iChunk - 1
>2450	PrimaryExpression	1
>2451	Identifier	iChunk
>2452	Identifier	iThread
>2453	Condition	 
>2454	RelationalExpression	iChunk > 0
>2455	PrimaryExpression	0
>2456	Identifier	iChunk
>2457	IfStatement	if ( iChunk < nChunkListCount )
>2458	CompoundStatement	 
>2459	IfStatement	if ( iChunk == 0 )
>2460	CompoundStatement	 
>2461	ExpressionStatement	 
>2462	CallExpression	CPLReleaseMutex ( hCondMutex )
>2463	ArgumentList	hCondMutex
>2464	Argument	hCondMutex
>2465	Identifier	hCondMutex
>2466	Callee	CPLReleaseMutex
>2467	Identifier	CPLReleaseMutex
>2468	WhileStatement	while ( asThreadData [ iThread ] . bIOMutexTaken == FALSE )
>2469	ExpressionStatement	 
>2470	CallExpression	CPLCondWait ( hCond , hCondMutex )
>2471	ArgumentList	hCond
>2472	Argument	hCondMutex
>2473	Identifier	hCondMutex
>2474	Argument	hCond
>2475	Identifier	hCond
>2476	Callee	CPLCondWait
>2477	Identifier	CPLCondWait
>2478	Condition	 
>2479	EqualityExpression	asThreadData [ iThread ] . bIOMutexTaken == FALSE
>2480	Identifier	FALSE
>2481	MemberAccess	asThreadData [ iThread ] . bIOMutexTaken
>2482	Identifier	bIOMutexTaken
>2483	ArrayIndexing	asThreadData [ iThread ]
>2484	Identifier	iThread
>2485	Identifier	asThreadData
>2486	ExpressionStatement	 
>2487	CallExpression	CPLAcquireMutex ( hCondMutex , 1.0 )
>2488	ArgumentList	hCondMutex
>2489	Argument	1.0
>2490	PrimaryExpression	1.0
>2491	Argument	hCondMutex
>2492	Identifier	hCondMutex
>2493	Callee	CPLAcquireMutex
>2494	Identifier	CPLAcquireMutex
>2495	Condition	 
>2496	EqualityExpression	iChunk == 0
>2497	PrimaryExpression	0
>2498	Identifier	iChunk
>2499	IfStatement	if ( asThreadData [ iThread ] . hThreadHandle == NULL )
>2500	CompoundStatement	 
>2501	BreakStatement	 
>2502	ExpressionStatement	 
>2503	AssignmentExpr	eErr = CE_Failure
>2504	Identifier	CE_Failure
>2505	Identifier	eErr
>2506	ExpressionStatement	 
>2507	CallExpression	CPLError ( CE_Failure , CPLE_AppDefined , \"CPLCreateJoinableThread() failed in ChunkAndWarpMulti()\" )
>2508	ArgumentList	CE_Failure
>2509	Argument	\"CPLCreateJoinableThread() failed in ChunkAndWarpMulti()\"
>2510	PrimaryExpression	\"CPLCreateJoinableThread() failed in ChunkAndWarpMulti()\"
>2511	Argument	CPLE_AppDefined
>2512	Identifier	CPLE_AppDefined
>2513	Argument	CE_Failure
>2514	Identifier	CE_Failure
>2515	Callee	CPLError
>2516	Identifier	CPLError
>2517	Condition	 
>2518	EqualityExpression	asThreadData [ iThread ] . hThreadHandle == NULL
>2519	Identifier	NULL
>2520	MemberAccess	asThreadData [ iThread ] . hThreadHandle
>2521	Identifier	hThreadHandle
>2522	ArrayIndexing	asThreadData [ iThread ]
>2523	Identifier	iThread
>2524	Identifier	asThreadData
>2525	ExpressionStatement	 
>2526	AssignmentExpr	asThreadData [ iThread ] . hThreadHandle = CPLCreateJoinableThread ( ChunkThreadMain , ( void * ) & asThreadData [ \
>2527	CallExpression	CPLCreateJoinableThread ( ChunkThreadMain , ( void * ) & asThreadData [ iThread ] )
>2528	ArgumentList	ChunkThreadMain
>2529	Argument	( void * ) & asThreadData [ iThread ]
>2530	CastExpression	( void * ) & asThreadData [ iThread ]
>2531	UnaryOp	& asThreadData [ iThread ]
>2532	ArrayIndexing	asThreadData [ iThread ]
>2533	Identifier	iThread
>2534	Identifier	asThreadData
>2535	UnaryOperator	&
>2536	CastTarget	void *
>2537	Argument	ChunkThreadMain
>2538	Identifier	ChunkThreadMain
>2539	Callee	CPLCreateJoinableThread
>2540	Identifier	CPLCreateJoinableThread
>2541	MemberAccess	asThreadData [ iThread ] . hThreadHandle
>2542	Identifier	hThreadHandle
>2543	ArrayIndexing	asThreadData [ iThread ]
>2544	Identifier	iThread
>2545	Identifier	asThreadData
>2546	ExpressionStatement	 
>2547	CallExpression	CPLDebug ( \"GDAL\" , \"Start chunk %d.\" , iChunk )
>2548	ArgumentList	\"GDAL\"
>2549	Argument	iChunk
>2550	Identifier	iChunk
>2551	Argument	\"Start chunk %d.\"
>2552	PrimaryExpression	\"Start chunk %d.\"
>2553	Argument	\"GDAL\"
>2554	PrimaryExpression	\"GDAL\"
>2555	Callee	CPLDebug
>2556	Identifier	CPLDebug
>2557	ExpressionStatement	 
>2558	AssignmentExpr	asThreadData [ iThread ] . bIOMutexTaken = FALSE
>2559	Identifier	FALSE
>2560	MemberAccess	asThreadData [ iThread ] . bIOMutexTaken
>2561	Identifier	bIOMutexTaken
>2562	ArrayIndexing	asThreadData [ iThread ]
>2563	Identifier	iThread
>2564	Identifier	asThreadData
>2565	IfStatement	if ( iChunk == 0 )
>2566	ElseStatement	else
>2567	CompoundStatement	 
>2568	ExpressionStatement	 
>2569	AssignmentExpr	asThreadData [ iThread ] . hCondMutex = NULL
>2570	Identifier	NULL
>2571	MemberAccess	asThreadData [ iThread ] . hCondMutex
>2572	Identifier	hCondMutex
>2573	ArrayIndexing	asThreadData [ iThread ]
>2574	Identifier	iThread
>2575	Identifier	asThreadData
>2576	ExpressionStatement	 
>2577	AssignmentExpr	asThreadData [ iThread ] . hCond = NULL
>2578	Identifier	NULL
>2579	MemberAccess	asThreadData [ iThread ] . hCond
>2580	Identifier	hCond
>2581	ArrayIndexing	asThreadData [ iThread ]
>2582	Identifier	iThread
>2583	Identifier	asThreadData
>2584	CompoundStatement	 
>2585	ExpressionStatement	 
>2586	AssignmentExpr	asThreadData [ iThread ] . hCondMutex = hCondMutex
>2587	Identifier	hCondMutex
>2588	MemberAccess	asThreadData [ iThread ] . hCondMutex
>2589	Identifier	hCondMutex
>2590	ArrayIndexing	asThreadData [ iThread ]
>2591	Identifier	iThread
>2592	Identifier	asThreadData
>2593	ExpressionStatement	 
>2594	AssignmentExpr	asThreadData [ iThread ] . hCond = hCond
>2595	Identifier	hCond
>2596	MemberAccess	asThreadData [ iThread ] . hCond
>2597	Identifier	hCond
>2598	ArrayIndexing	asThreadData [ iThread ]
>2599	Identifier	iThread
>2600	Identifier	asThreadData
>2601	Condition	 
>2602	EqualityExpression	iChunk == 0
>2603	PrimaryExpression	0
>2604	Identifier	iChunk
>2605	ExpressionStatement	 
>2606	AssignmentExpr	asThreadData [ iThread ] . panChunkInfo = panThisChunk
>2607	Identifier	panThisChunk
>2608	MemberAccess	asThreadData [ iThread ] . panChunkInfo
>2609	Identifier	panChunkInfo
>2610	ArrayIndexing	asThreadData [ iThread ]
>2611	Identifier	iThread
>2612	Identifier	asThreadData
>2613	ExpressionStatement	 
>2614	AssignmentExpr	dfPixelsProcessed += dfChunkPixels
>2615	Identifier	dfChunkPixels
>2616	Identifier	dfPixelsProcessed
>2617	ExpressionStatement	 
>2618	AssignmentExpr	asThreadData [ iThread ] . dfProgressScale = dfChunkPixels / dfTotalPixels
>2619	MultiplicativeExpression	dfChunkPixels / dfTotalPixels
>2620	Identifier	dfTotalPixels
>2621	Identifier	dfChunkPixels
>2622	MemberAccess	asThreadData [ iThread ] . dfProgressScale
>2623	Identifier	dfProgressScale
>2624	ArrayIndexing	asThreadData [ iThread ]
>2625	Identifier	iThread
>2626	Identifier	asThreadData
>2627	ExpressionStatement	 
>2628	AssignmentExpr	asThreadData [ iThread ] . dfProgressBase = dfPixelsProcessed / dfTotalPixels
>2629	MultiplicativeExpression	dfPixelsProcessed / dfTotalPixels
>2630	Identifier	dfTotalPixels
>2631	Identifier	dfPixelsProcessed
>2632	MemberAccess	asThreadData [ iThread ] . dfProgressBase
>2633	Identifier	dfProgressBase
>2634	ArrayIndexing	asThreadData [ iThread ]
>2635	Identifier	iThread
>2636	Identifier	asThreadData
>2637	IdentifierDeclStatement	 
>2638	IdentifierDecl	dfChunkPixels = panThisChunk [ 2 ] * ( double ) panThisChunk [ 3 ]
>2639	AssignmentExpr	dfChunkPixels = panThisChunk [ 2 ] * ( double ) panThisChunk [ 3 ]
>2640	MultiplicativeExpression	panThisChunk [ 2 ] * ( double ) panThisChunk [ 3 ]
>2641	CastExpression	( double ) panThisChunk [ 3 ]
>2642	ArrayIndexing	panThisChunk [ 3 ]
>2643	PrimaryExpression	3
>2644	Identifier	panThisChunk
>2645	CastTarget	double
>2646	ArrayIndexing	panThisChunk [ 2 ]
>2647	PrimaryExpression	2
>2648	Identifier	panThisChunk
>2649	Identifier	dfChunkPixels
>2650	Identifier	dfChunkPixels
>2651	IdentifierDeclType	double
>2652	IdentifierDeclStatement	 
>2653	IdentifierDecl	* panThisChunk = panChunkList + iChunk * 8
>2654	AssignmentExpr	* panThisChunk = panChunkList + iChunk * 8
>2655	AdditiveExpression	panChunkList + iChunk * 8
>2656	MultiplicativeExpression	iChunk * 8
>2657	PrimaryExpression	8
>2658	Identifier	iChunk
>2659	Identifier	panChunkList
>2660	Identifier	panThisChunk
>2661	Identifier	panThisChunk
>2662	IdentifierDeclType	int *
>2663	Condition	 
>2664	RelationalExpression	iChunk < nChunkListCount
>2665	Identifier	nChunkListCount
>2666	Identifier	iChunk
>2667	IdentifierDeclStatement	 
>2668	IdentifierDecl	iThread = iChunk % 2
>2669	AssignmentExpr	iThread = iChunk % 2
>2670	MultiplicativeExpression	iChunk % 2
>2671	PrimaryExpression	2
>2672	Identifier	iChunk
>2673	Identifier	iThread
>2674	Identifier	iThread
>2675	IdentifierDeclType	int
>2676	IncDecOp	 
>2677	IncDec	++
>2678	Identifier	iChunk
>2679	Condition	 
>2680	RelationalExpression	iChunk < nChunkListCount + 1
>2681	AdditiveExpression	nChunkListCount + 1
>2682	PrimaryExpression	1
>2683	Identifier	nChunkListCount
>2684	Identifier	iChunk
>2685	ForInit	 
>2686	AssignmentExpr	iChunk = 0
>2687	PrimaryExpression	0
>2688	Identifier	iChunk
>2689	IdentifierDeclStatement	 
>2690	IdentifierDecl	eErr = CE_None
>2691	AssignmentExpr	eErr = CE_None
>2692	Identifier	CE_None
>2693	Identifier	CE_None
>2694	Identifier	eErr
>2695	IdentifierDeclType	CPLErr
>2696	IdentifierDeclStatement	 
>2697	IdentifierDecl	dfTotalPixels = nDstXSize * ( double ) nDstYSize
>2698	AssignmentExpr	dfTotalPixels = nDstXSize * ( double ) nDstYSize
>2699	MultiplicativeExpression	nDstXSize * ( double ) nDstYSize
>2700	CastExpression	( double ) nDstYSize
>2701	Identifier	nDstYSize
>2702	CastTarget	double
>2703	Identifier	nDstXSize
>2704	Identifier	dfTotalPixels
>2705	Identifier	dfTotalPixels
>2706	IdentifierDeclType	double
>2707	IdentifierDecl	dfPixelsProcessed = 0.0
>2708	AssignmentExpr	dfPixelsProcessed = 0.0
>2709	PrimaryExpression	0.0
>2710	Identifier	dfPixelsProcessed
>2711	Identifier	dfPixelsProcessed
>2712	IdentifierDeclType	double
>2713	IdentifierDeclStatement	 
>2714	IdentifierDecl	iChunk
>2715	Identifier	iChunk
>2716	IdentifierDeclType	int
>2717	ExpressionStatement	 
>2718	AssignmentExpr	asThreadData [ 1 ] . hIOMutex = hIOMutex
>2719	Identifier	hIOMutex
>2720	MemberAccess	asThreadData [ 1 ] . hIOMutex
>2721	Identifier	hIOMutex
>2722	ArrayIndexing	asThreadData [ 1 ]
>2723	PrimaryExpression	1
>2724	Identifier	asThreadData
>2725	ExpressionStatement	 
>2726	AssignmentExpr	asThreadData [ 1 ] . poOperation = this
>2727	Identifier	this
>2728	MemberAccess	asThreadData [ 1 ] . poOperation
>2729	Identifier	poOperation
>2730	ArrayIndexing	asThreadData [ 1 ]
>2731	PrimaryExpression	1
>2732	Identifier	asThreadData
>2733	ExpressionStatement	 
>2734	AssignmentExpr	asThreadData [ 0 ] . hIOMutex = hIOMutex
>2735	Identifier	hIOMutex
>2736	MemberAccess	asThreadData [ 0 ] . hIOMutex
>2737	Identifier	hIOMutex
>2738	ArrayIndexing	asThreadData [ 0 ]
>2739	PrimaryExpression	0
>2740	Identifier	asThreadData
>2741	ExpressionStatement	 
>2742	AssignmentExpr	asThreadData [ 0 ] . poOperation = this
>2743	Identifier	this
>2744	MemberAccess	asThreadData [ 0 ] . poOperation
>2745	Identifier	poOperation
>2746	ArrayIndexing	asThreadData [ 0 ]
>2747	PrimaryExpression	0
>2748	Identifier	asThreadData
>2749	ExpressionStatement	 
>2750	CallExpression	memset ( ( void * ) & asThreadData , 0 , sizeof ( asThreadData ) )
>2751	ArgumentList	( void * ) & asThreadData
>2752	Argument	sizeof ( asThreadData )
>2753	SizeofExpr	sizeof ( asThreadData )
>2754	SizeofOperand	asThreadData
>2755	Sizeof	sizeof
>2756	Argument	0
>2757	PrimaryExpression	0
>2758	Argument	( void * ) & asThreadData
>2759	CastExpression	( void * ) & asThreadData
>2760	UnaryOp	& asThreadData
>2761	Identifier	asThreadData
>2762	UnaryOperator	&
>2763	CastTarget	void *
>2764	Callee	memset
>2765	Identifier	memset
>2766	IdentifierDeclStatement	 
>2767	IdentifierDecl	asThreadData [ 2 ]
>2768	PrimaryExpression	2
>2769	Identifier	asThreadData
>2770	IdentifierDeclType	ChunkThreadData volatile [ 2 ]
>2771	ExpressionStatement	 
>2772	CallExpression	qsort ( panChunkList , nChunkListCount , sizeof ( WarpChunk ) , OrderWarpChunk )
>2773	ArgumentList	panChunkList
>2774	Argument	OrderWarpChunk
>2775	Identifier	OrderWarpChunk
>2776	Argument	sizeof ( WarpChunk )
>2777	SizeofExpr	sizeof ( WarpChunk )
>2778	SizeofOperand	WarpChunk
>2779	Sizeof	sizeof
>2780	Argument	nChunkListCount
>2781	Identifier	nChunkListCount
>2782	Argument	panChunkList
>2783	Identifier	panChunkList
>2784	Callee	qsort
>2785	Identifier	qsort
>2786	ExpressionStatement	 
>2787	CallExpression	CollectChunkList ( nDstXOff , nDstYOff , nDstXSize , nDstYSize )
>2788	ArgumentList	nDstXOff
>2789	Argument	nDstYSize
>2790	Identifier	nDstYSize
>2791	Argument	nDstXSize
>2792	Identifier	nDstXSize
>2793	Argument	nDstYOff
>2794	Identifier	nDstYOff
>2795	Argument	nDstXOff
>2796	Identifier	nDstXOff
>2797	Callee	CollectChunkList
>2798	Identifier	CollectChunkList
>2799	ExpressionStatement	 
>2800	CallExpression	WipeChunkList ( )
>2801	ArgumentList	 
>2802	Callee	WipeChunkList
>2803	Identifier	WipeChunkList
>2804	ExpressionStatement	 
>2805	CallExpression	CPLReleaseMutex ( hCondMutex )
>2806	ArgumentList	hCondMutex
>2807	Argument	hCondMutex
>2808	Identifier	hCondMutex
>2809	Callee	CPLReleaseMutex
>2810	Identifier	CPLReleaseMutex
>2811	IdentifierDeclStatement	 
>2812	IdentifierDecl	* hCondMutex = CPLCreateMutex ( )
>2813	AssignmentExpr	* hCondMutex = CPLCreateMutex ( )
>2814	CallExpression	CPLCreateMutex ( )
>2815	ArgumentList	 
>2816	Callee	CPLCreateMutex
>2817	Identifier	CPLCreateMutex
>2818	Identifier	hCondMutex
>2819	Identifier	hCondMutex
>2820	IdentifierDeclType	void *
>2821	IdentifierDeclStatement	 
>2822	IdentifierDecl	* hCond = CPLCreateCond ( )
>2823	AssignmentExpr	* hCond = CPLCreateCond ( )
>2824	CallExpression	CPLCreateCond ( )
>2825	ArgumentList	 
>2826	Callee	CPLCreateCond
>2827	Identifier	CPLCreateCond
>2828	Identifier	hCond
>2829	Identifier	hCond
>2830	IdentifierDeclType	void *
>2831	ExpressionStatement	 
>2832	CallExpression	CPLReleaseMutex ( hWarpMutex )
>2833	ArgumentList	hWarpMutex
>2834	Argument	hWarpMutex
>2835	Identifier	hWarpMutex
>2836	Callee	CPLReleaseMutex
>2837	Identifier	CPLReleaseMutex
>2838	ExpressionStatement	 
>2839	CallExpression	CPLReleaseMutex ( hIOMutex )
>2840	ArgumentList	hIOMutex
>2841	Argument	hIOMutex
>2842	Identifier	hIOMutex
>2843	Callee	CPLReleaseMutex
>2844	Identifier	CPLReleaseMutex
>2845	ExpressionStatement	 
>2846	AssignmentExpr	hWarpMutex = CPLCreateMutex ( )
>2847	CallExpression	CPLCreateMutex ( )
>2848	ArgumentList	 
>2849	Callee	CPLCreateMutex
>2850	Identifier	CPLCreateMutex
>2851	Identifier	hWarpMutex
>2852	ExpressionStatement	 
>2853	AssignmentExpr	hIOMutex = CPLCreateMutex ( )
>2854	CallExpression	CPLCreateMutex ( )
>2855	ArgumentList	 
>2856	Callee	CPLCreateMutex
>2857	Identifier	CPLCreateMutex
>2858	Identifier	hIOMutex
>2909	FunctionDef	GDALChunkAndWarpMulti (GDALWarpOperationH hOperation , int nDstXOff , int nDstYOff , int nDstXSize , int nDstYSize)
>2910	ParameterList	GDALWarpOperationH hOperation , int nDstXOff , int nDstYOff , int nDstXSize , int nDstYSize
>2911	Parameter	 
>2912	Identifier	nDstYSize
>2913	ParameterType	int
>2914	Parameter	 
>2915	Identifier	nDstXSize
>2916	ParameterType	int
>2917	Parameter	 
>2918	Identifier	nDstYOff
>2919	ParameterType	int
>2920	Parameter	 
>2921	Identifier	nDstXOff
>2922	ParameterType	int
>2923	Parameter	 
>2924	Identifier	hOperation
>2925	ParameterType	GDALWarpOperationH
>2926	ReturnType	CPLErr
>2927	CompoundStatement	 
>2928	ReturnStatement	 
>2929	CallExpression	( ( GDALWarpOperation * ) hOperation ) -> ChunkAndWarpMulti ( nDstXOff , nDstYOff , nDstXSize , nDstYSize )
>2930	ArgumentList	nDstXOff
>2931	Argument	nDstYSize
>2932	Identifier	nDstYSize
>2933	Argument	nDstXSize
>2934	Identifier	nDstXSize
>2935	Argument	nDstYOff
>2936	Identifier	nDstYOff
>2937	Argument	nDstXOff
>2938	Identifier	nDstXOff
>2939	Callee	( ( GDALWarpOperation * ) hOperation ) -> ChunkAndWarpMulti
>2940	PtrMemberAccess	( ( GDALWarpOperation * ) hOperation ) -> ChunkAndWarpMulti
>2941	Identifier	ChunkAndWarpMulti
>2942	CastExpression	( GDALWarpOperation * ) hOperation
>2943	Identifier	hOperation
>2944	CastTarget	GDALWarpOperation *
>2945	ExpressionStatement	 
>2946	CallExpression	VALIDATE_POINTER1 ( hOperation , \"GDALChunkAndWarpMulti\" , CE_Failure )
>2947	ArgumentList	hOperation
>2948	Argument	CE_Failure
>2949	Identifier	CE_Failure
>2950	Argument	\"GDALChunkAndWarpMulti\"
>2951	PrimaryExpression	\"GDALChunkAndWarpMulti\"
>2952	Argument	hOperation
>2953	Identifier	hOperation
>2954	Callee	VALIDATE_POINTER1
>2955	Identifier	VALIDATE_POINTER1
>2967	FunctionDef	GDALWarpOperation 
>2968	ParameterList	 
>2969	ReturnType	void
>2970	CompoundStatement	 
>2971	ExpressionStatement	 
>2972	AssignmentExpr	nChunkListMax = 0
>2973	PrimaryExpression	0
>2974	Identifier	nChunkListMax
>2975	ExpressionStatement	 
>2976	AssignmentExpr	nChunkListCount = 0
>2977	PrimaryExpression	0
>2978	Identifier	nChunkListCount
>2979	ExpressionStatement	 
>2980	AssignmentExpr	panChunkList = NULL
>2981	Identifier	NULL
>2982	Identifier	panChunkList
>2983	ExpressionStatement	 
>2984	CallExpression	CPLFree ( panChunkList )
>2985	ArgumentList	panChunkList
>2986	Argument	panChunkList
>2987	Identifier	panChunkList
>2988	Callee	CPLFree
>2989	Identifier	CPLFree
>2997	FunctionDef	GDALWarpOperation 
>2998	ParameterList	int nDstXOff , int nDstYOff , int nDstXSize , int nDstYSize
>2999	Parameter	 
>3000	Identifier	nDstYSize
>3001	ParameterType	int
>3002	Parameter	 
>3003	Identifier	nDstXSize
>3004	ParameterType	int
>3005	Parameter	 
>3006	Identifier	nDstYOff
>3007	ParameterType	int
>3008	Parameter	 
>3009	Identifier	nDstXOff
>3010	ParameterType	int
>3011	ReturnType	CPLErr
>3012	CompoundStatement	 
>3013	ReturnStatement	 
>3014	Identifier	CE_None
>3015	ExpressionStatement	 
>3016	IncDecOp	nChunkListCount ++
>3017	IncDec	++
>3018	Identifier	nChunkListCount
>3019	ExpressionStatement	 
>3020	AssignmentExpr	panChunkList [ nChunkListCount * 8 + 7 ] = nSrcYSize
>3021	Identifier	nSrcYSize
>3022	ArrayIndexing	panChunkList [ nChunkListCount * 8 + 7 ]
>3023	AdditiveExpression	nChunkListCount * 8 + 7
>3024	PrimaryExpression	7
>3025	MultiplicativeExpression	nChunkListCount * 8
>3026	PrimaryExpression	8
>3027	Identifier	nChunkListCount
>3028	Identifier	panChunkList
>3029	ExpressionStatement	 
>3030	AssignmentExpr	panChunkList [ nChunkListCount * 8 + 6 ] = nSrcXSize
>3031	Identifier	nSrcXSize
>3032	ArrayIndexing	panChunkList [ nChunkListCount * 8 + 6 ]
>3033	AdditiveExpression	nChunkListCount * 8 + 6
>3034	PrimaryExpression	6
>3035	MultiplicativeExpression	nChunkListCount * 8
>3036	PrimaryExpression	8
>3037	Identifier	nChunkListCount
>3038	Identifier	panChunkList
>3039	ExpressionStatement	 
>3040	AssignmentExpr	panChunkList [ nChunkListCount * 8 + 5 ] = nSrcYOff
>3041	Identifier	nSrcYOff
>3042	ArrayIndexing	panChunkList [ nChunkListCount * 8 + 5 ]
>3043	AdditiveExpression	nChunkListCount * 8 + 5
>3044	PrimaryExpression	5
>3045	MultiplicativeExpression	nChunkListCount * 8
>3046	PrimaryExpression	8
>3047	Identifier	nChunkListCount
>3048	Identifier	panChunkList
>3049	ExpressionStatement	 
>3050	AssignmentExpr	panChunkList [ nChunkListCount * 8 + 4 ] = nSrcXOff
>3051	Identifier	nSrcXOff
>3052	ArrayIndexing	panChunkList [ nChunkListCount * 8 + 4 ]
>3053	AdditiveExpression	nChunkListCount * 8 + 4
>3054	PrimaryExpression	4
>3055	MultiplicativeExpression	nChunkListCount * 8
>3056	PrimaryExpression	8
>3057	Identifier	nChunkListCount
>3058	Identifier	panChunkList
>3059	ExpressionStatement	 
>3060	AssignmentExpr	panChunkList [ nChunkListCount * 8 + 3 ] = nDstYSize
>3061	Identifier	nDstYSize
>3062	ArrayIndexing	panChunkList [ nChunkListCount * 8 + 3 ]
>3063	AdditiveExpression	nChunkListCount * 8 + 3
>3064	PrimaryExpression	3
>3065	MultiplicativeExpression	nChunkListCount * 8
>3066	PrimaryExpression	8
>3067	Identifier	nChunkListCount
>3068	Identifier	panChunkList
>3069	ExpressionStatement	 
>3070	AssignmentExpr	panChunkList [ nChunkListCount * 8 + 2 ] = nDstXSize
>3071	Identifier	nDstXSize
>3072	ArrayIndexing	panChunkList [ nChunkListCount * 8 + 2 ]
>3073	AdditiveExpression	nChunkListCount * 8 + 2
>3074	PrimaryExpression	2
>3075	MultiplicativeExpression	nChunkListCount * 8
>3076	PrimaryExpression	8
>3077	Identifier	nChunkListCount
>3078	Identifier	panChunkList
>3079	ExpressionStatement	 
>3080	AssignmentExpr	panChunkList [ nChunkListCount * 8 + 1 ] = nDstYOff
>3081	Identifier	nDstYOff
>3082	ArrayIndexing	panChunkList [ nChunkListCount * 8 + 1 ]
>3083	AdditiveExpression	nChunkListCount * 8 + 1
>3084	PrimaryExpression	1
>3085	MultiplicativeExpression	nChunkListCount * 8
>3086	PrimaryExpression	8
>3087	Identifier	nChunkListCount
>3088	Identifier	panChunkList
>3089	ExpressionStatement	 
>3090	AssignmentExpr	panChunkList [ nChunkListCount * 8 + 0 ] = nDstXOff
>3091	Identifier	nDstXOff
>3092	ArrayIndexing	panChunkList [ nChunkListCount * 8 + 0 ]
>3093	AdditiveExpression	nChunkListCount * 8 + 0
>3094	PrimaryExpression	0
>3095	MultiplicativeExpression	nChunkListCount * 8
>3096	PrimaryExpression	8
>3097	Identifier	nChunkListCount
>3098	Identifier	panChunkList
>3099	IfStatement	if ( nChunkListCount == nChunkListMax )
>3100	CompoundStatement	 
>3101	ExpressionStatement	 
>3102	AssignmentExpr	panChunkList = ( int * ) CPLRealloc ( panChunkList , sizeof ( int ) * nChunkListMax * 8 )
>3103	CastExpression	( int * ) CPLRealloc ( panChunkList , sizeof ( int ) * nChunkListMax * 8 )
>3104	CallExpression	CPLRealloc ( panChunkList , sizeof ( int ) * nChunkListMax * 8 )
>3105	ArgumentList	panChunkList
>3106	Argument	sizeof ( int ) * nChunkListMax * 8
>3107	MultiplicativeExpression	sizeof ( int ) * nChunkListMax * 8
>3108	MultiplicativeExpression	nChunkListMax * 8
>3109	PrimaryExpression	8
>3110	Identifier	nChunkListMax
>3111	SizeofExpr	sizeof ( int )
>3112	SizeofOperand	int
>3113	Sizeof	sizeof
>3114	Argument	panChunkList
>3115	Identifier	panChunkList
>3116	Callee	CPLRealloc
>3117	Identifier	CPLRealloc
>3118	CastTarget	int *
>3119	Identifier	panChunkList
>3120	ExpressionStatement	 
>3121	AssignmentExpr	nChunkListMax = nChunkListMax * 2 + 1
>3122	AdditiveExpression	nChunkListMax * 2 + 1
>3123	PrimaryExpression	1
>3124	MultiplicativeExpression	nChunkListMax * 2
>3125	PrimaryExpression	2
>3126	Identifier	nChunkListMax
>3127	Identifier	nChunkListMax
>3128	Condition	 
>3129	EqualityExpression	nChunkListCount == nChunkListMax
>3130	Identifier	nChunkListMax
>3131	Identifier	nChunkListCount
>3132	IfStatement	if ( dfTotalMemoryUse > psOptions -> dfWarpMemoryLimit && ( nDstXSize > 2 || nDstYSize > 2 ) )
>3133	CompoundStatement	 
>3134	IfStatement	if ( eErr == CE_None )
>3135	ElseStatement	else
>3136	ReturnStatement	 
>3137	Identifier	eErr
>3138	ReturnStatement	 
>3139	Identifier	eErr2
>3140	Condition	 
>3141	EqualityExpression	eErr == CE_None
>3142	Identifier	CE_None
>3143	Identifier	eErr
>3144	IfStatement	if ( nDstXSize > nDstYSize && ( ! bOptimizeSize || ( bOptimizeSize && ( nDstXSize / 2 >= nBlockXSize || nDstYSize == \
>3145	ElseStatement	else
>3146	CompoundStatement	 
>3147	ExpressionStatement	 
>3148	AssignmentExpr	eErr2 = CollectChunkList ( nDstXOff , nDstYOff + nChunk1 , nDstXSize , nChunk2 )
>3149	CallExpression	CollectChunkList ( nDstXOff , nDstYOff + nChunk1 , nDstXSize , nChunk2 )
>3150	ArgumentList	nDstXOff
>3151	Argument	nChunk2
>3152	Identifier	nChunk2
>3153	Argument	nDstXSize
>3154	Identifier	nDstXSize
>3155	Argument	nDstYOff + nChunk1
>3156	AdditiveExpression	nDstYOff + nChunk1
>3157	Identifier	nChunk1
>3158	Identifier	nDstYOff
>3159	Argument	nDstXOff
>3160	Identifier	nDstXOff
>3161	Callee	CollectChunkList
>3162	Identifier	CollectChunkList
>3163	Identifier	eErr2
>3164	ExpressionStatement	 
>3165	AssignmentExpr	eErr = CollectChunkList ( nDstXOff , nDstYOff , nDstXSize , nChunk1 )
>3166	CallExpression	CollectChunkList ( nDstXOff , nDstYOff , nDstXSize , nChunk1 )
>3167	ArgumentList	nDstXOff
>3168	Argument	nChunk1
>3169	Identifier	nChunk1
>3170	Argument	nDstXSize
>3171	Identifier	nDstXSize
>3172	Argument	nDstYOff
>3173	Identifier	nDstYOff
>3174	Argument	nDstXOff
>3175	Identifier	nDstXOff
>3176	Callee	CollectChunkList
>3177	Identifier	CollectChunkList
>3178	Identifier	eErr
>3179	IdentifierDeclStatement	 
>3180	IdentifierDecl	nChunk2 = nDstYSize - nChunk1
>3181	AssignmentExpr	nChunk2 = nDstYSize - nChunk1
>3182	AdditiveExpression	nDstYSize - nChunk1
>3183	Identifier	nChunk1
>3184	Identifier	nDstYSize
>3185	Identifier	nChunk2
>3186	Identifier	nChunk2
>3187	IdentifierDeclType	int
>3188	IfStatement	if ( bOptimizeSize && nChunk1 > nBlockYSize )
>3189	ExpressionStatement	 
>3190	AssignmentExpr	nChunk1 = ( nChunk1 / nBlockYSize ) * nBlockYSize
>3191	MultiplicativeExpression	( nChunk1 / nBlockYSize ) * nBlockYSize
>3192	Identifier	nBlockYSize
>3193	MultiplicativeExpression	nChunk1 / nBlockYSize
>3194	Identifier	nBlockYSize
>3195	Identifier	nChunk1
>3196	Identifier	nChunk1
>3197	Condition	 
>3198	AndExpression	bOptimizeSize && nChunk1 > nBlockYSize
>3199	RelationalExpression	nChunk1 > nBlockYSize
>3200	Identifier	nBlockYSize
>3201	Identifier	nChunk1
>3202	Identifier	bOptimizeSize
>3203	IdentifierDeclStatement	 
>3204	IdentifierDecl	nChunk1 = nDstYSize / 2
>3205	AssignmentExpr	nChunk1 = nDstYSize / 2
>3206	MultiplicativeExpression	nDstYSize / 2
>3207	PrimaryExpression	2
>3208	Identifier	nDstYSize
>3209	Identifier	nChunk1
>3210	Identifier	nChunk1
>3211	IdentifierDeclType	int
>3212	CompoundStatement	 
>3213	ExpressionStatement	 
>3214	AssignmentExpr	eErr2 = CollectChunkList ( nDstXOff + nChunk1 , nDstYOff , nChunk2 , nDstYSize )
>3215	CallExpression	CollectChunkList ( nDstXOff + nChunk1 , nDstYOff , nChunk2 , nDstYSize )
>3216	ArgumentList	nDstXOff + nChunk1
>3217	Argument	nDstYSize
>3218	Identifier	nDstYSize
>3219	Argument	nChunk2
>3220	Identifier	nChunk2
>3221	Argument	nDstYOff
>3222	Identifier	nDstYOff
>3223	Argument	nDstXOff + nChunk1
>3224	AdditiveExpression	nDstXOff + nChunk1
>3225	Identifier	nChunk1
>3226	Identifier	nDstXOff
>3227	Callee	CollectChunkList
>3228	Identifier	CollectChunkList
>3229	Identifier	eErr2
>3230	ExpressionStatement	 
>3231	AssignmentExpr	eErr = CollectChunkList ( nDstXOff , nDstYOff , nChunk1 , nDstYSize )
>3232	CallExpression	CollectChunkList ( nDstXOff , nDstYOff , nChunk1 , nDstYSize )
>3233	ArgumentList	nDstXOff
>3234	Argument	nDstYSize
>3235	Identifier	nDstYSize
>3236	Argument	nChunk1
>3237	Identifier	nChunk1
>3238	Argument	nDstYOff
>3239	Identifier	nDstYOff
>3240	Argument	nDstXOff
>3241	Identifier	nDstXOff
>3242	Callee	CollectChunkList
>3243	Identifier	CollectChunkList
>3244	Identifier	eErr
>3245	IdentifierDeclStatement	 
>3246	IdentifierDecl	nChunk2 = nDstXSize - nChunk1
>3247	AssignmentExpr	nChunk2 = nDstXSize - nChunk1
>3248	AdditiveExpression	nDstXSize - nChunk1
>3249	Identifier	nChunk1
>3250	Identifier	nDstXSize
>3251	Identifier	nChunk2
>3252	Identifier	nChunk2
>3253	IdentifierDeclType	int
>3254	IfStatement	if ( bOptimizeSize && nChunk1 > nBlockXSize )
>3255	ExpressionStatement	 
>3256	AssignmentExpr	nChunk1 = ( nChunk1 / nBlockXSize ) * nBlockXSize
>3257	MultiplicativeExpression	( nChunk1 / nBlockXSize ) * nBlockXSize
>3258	Identifier	nBlockXSize
>3259	MultiplicativeExpression	nChunk1 / nBlockXSize
>3260	Identifier	nBlockXSize
>3261	Identifier	nChunk1
>3262	Identifier	nChunk1
>3263	Condition	 
>3264	AndExpression	bOptimizeSize && nChunk1 > nBlockXSize
>3265	RelationalExpression	nChunk1 > nBlockXSize
>3266	Identifier	nBlockXSize
>3267	Identifier	nChunk1
>3268	Identifier	bOptimizeSize
>3269	IdentifierDeclStatement	 
>3270	IdentifierDecl	nChunk1 = nDstXSize / 2
>3271	AssignmentExpr	nChunk1 = nDstXSize / 2
>3272	MultiplicativeExpression	nDstXSize / 2
>3273	PrimaryExpression	2
>3274	Identifier	nDstXSize
>3275	Identifier	nChunk1
>3276	Identifier	nChunk1
>3277	IdentifierDeclType	int
>3278	Condition	 
>3279	AndExpression	nDstXSize > nDstYSize && ( ! bOptimizeSize || ( bOptimizeSize && ( nDstXSize / 2 >= nBlockXSize || nDstYSize == \
>3280	OrExpression	! bOptimizeSize || ( bOptimizeSize && ( nDstXSize / 2 >= nBlockXSize || nDstYSize == 1 ) )
>3281	AndExpression	bOptimizeSize && ( nDstXSize / 2 >= nBlockXSize || nDstYSize == 1 )
>3282	OrExpression	nDstXSize / 2 >= nBlockXSize || nDstYSize == 1
>3283	EqualityExpression	nDstYSize == 1
>3284	PrimaryExpression	1
>3285	Identifier	nDstYSize
>3286	RelationalExpression	nDstXSize / 2 >= nBlockXSize
>3287	Identifier	nBlockXSize
>3288	MultiplicativeExpression	nDstXSize / 2
>3289	PrimaryExpression	2
>3290	Identifier	nDstXSize
>3291	Identifier	bOptimizeSize
>3292	UnaryOp	! bOptimizeSize
>3293	Identifier	bOptimizeSize
>3294	UnaryOperator	!
>3295	RelationalExpression	nDstXSize > nDstYSize
>3296	Identifier	nDstYSize
>3297	Identifier	nDstXSize
>3298	IdentifierDeclStatement	 
>3299	IdentifierDecl	bOptimizeSize = CSLFetchBoolean ( psOptions -> papszWarpOptions , \"OPTIMIZE_SIZE\" , FALSE )
>3300	AssignmentExpr	bOptimizeSize = CSLFetchBoolean ( psOptions -> papszWarpOptions , \"OPTIMIZE_SIZE\" , FALSE )
>3301	CallExpression	CSLFetchBoolean ( psOptions -> papszWarpOptions , \"OPTIMIZE_SIZE\" , FALSE )
>3302	ArgumentList	psOptions -> papszWarpOptions
>3303	Argument	FALSE
>3304	Identifier	FALSE
>3305	Argument	\"OPTIMIZE_SIZE\"
>3306	PrimaryExpression	\"OPTIMIZE_SIZE\"
>3307	Argument	psOptions -> papszWarpOptions
>3308	PtrMemberAccess	psOptions -> papszWarpOptions
>3309	Identifier	papszWarpOptions
>3310	Identifier	psOptions
>3311	Callee	CSLFetchBoolean
>3312	Identifier	CSLFetchBoolean
>3313	Identifier	bOptimizeSize
>3314	Identifier	bOptimizeSize
>3315	IdentifierDeclType	int
>3316	IdentifierDeclStatement	 
>3317	IdentifierDecl	eErr2
>3318	Identifier	eErr2
>3319	IdentifierDeclType	CPLErr
>3320	Condition	 
>3321	AndExpression	dfTotalMemoryUse > psOptions -> dfWarpMemoryLimit && ( nDstXSize > 2 || nDstYSize > 2 )
>3322	OrExpression	nDstXSize > 2 || nDstYSize > 2
>3323	RelationalExpression	nDstYSize > 2
>3324	PrimaryExpression	2
>3325	Identifier	nDstYSize
>3326	RelationalExpression	nDstXSize > 2
>3327	PrimaryExpression	2
>3328	Identifier	nDstXSize
>3329	RelationalExpression	dfTotalMemoryUse > psOptions -> dfWarpMemoryLimit
>3330	PtrMemberAccess	psOptions -> dfWarpMemoryLimit
>3331	Identifier	dfWarpMemoryLimit
>3332	Identifier	psOptions
>3333	Identifier	dfTotalMemoryUse
>3334	IfStatement	if ( psOptions -> hDstDS )
>3335	CompoundStatement	 
>3336	ExpressionStatement	 
>3337	CallExpression	GDALGetBlockSize ( GDALGetRasterBand ( psOptions -> hDstDS , 1 ) , & nBlockXSize , & nBlockYSize )
>3338	ArgumentList	GDALGetRasterBand ( psOptions -> hDstDS , 1 )
>3339	Argument	& nBlockYSize
>3340	UnaryOp	& nBlockYSize
>3341	Identifier	nBlockYSize
>3342	UnaryOperator	&
>3343	Argument	& nBlockXSize
>3344	UnaryOp	& nBlockXSize
>3345	Identifier	nBlockXSize
>3346	UnaryOperator	&
>3347	Argument	GDALGetRasterBand ( psOptions -> hDstDS , 1 )
>3348	CallExpression	GDALGetRasterBand ( psOptions -> hDstDS , 1 )
>3349	ArgumentList	psOptions -> hDstDS
>3350	Argument	1
>3351	PrimaryExpression	1
>3352	Argument	psOptions -> hDstDS
>3353	PtrMemberAccess	psOptions -> hDstDS
>3354	Identifier	hDstDS
>3355	Identifier	psOptions
>3356	Callee	GDALGetRasterBand
>3357	Identifier	GDALGetRasterBand
>3358	Callee	GDALGetBlockSize
>3359	Identifier	GDALGetBlockSize
>3360	Condition	 
>3361	PtrMemberAccess	psOptions -> hDstDS
>3362	Identifier	hDstDS
>3363	Identifier	psOptions
>3364	IdentifierDeclStatement	 
>3365	IdentifierDecl	nBlockYSize = 1
>3366	AssignmentExpr	nBlockYSize = 1
>3367	PrimaryExpression	1
>3368	Identifier	nBlockYSize
>3369	Identifier	nBlockYSize
>3370	IdentifierDeclType	int
>3371	IdentifierDecl	nBlockXSize = 1
>3372	AssignmentExpr	nBlockXSize = 1
>3373	PrimaryExpression	1
>3374	Identifier	nBlockXSize
>3375	Identifier	nBlockXSize
>3376	IdentifierDeclType	int
>3377	ExpressionStatement	 
>3378	AssignmentExpr	dfTotalMemoryUse = ( ( ( double ) nSrcPixelCostInBits ) * nSrcXSize * nSrcYSize + ( ( double ) nDstPixelCostInBits ) * \
>3379	MultiplicativeExpression	( ( ( double ) nSrcPixelCostInBits ) * nSrcXSize * nSrcYSize + ( ( double ) nDstPixelCostInBits ) * nDstXSize * \
>3380	PrimaryExpression	8.0
>3381	AdditiveExpression	( ( double ) nSrcPixelCostInBits ) * nSrcXSize * nSrcYSize + ( ( double ) nDstPixelCostInBits ) * nDstXSize * \
>3382	MultiplicativeExpression	( ( double ) nDstPixelCostInBits ) * nDstXSize * nDstYSize
>3383	MultiplicativeExpression	nDstXSize * nDstYSize
>3384	Identifier	nDstYSize
>3385	Identifier	nDstXSize
>3386	CastExpression	( double ) nDstPixelCostInBits
>3387	Identifier	nDstPixelCostInBits
>3388	CastTarget	double
>3389	MultiplicativeExpression	( ( double ) nSrcPixelCostInBits ) * nSrcXSize * nSrcYSize
>3390	MultiplicativeExpression	nSrcXSize * nSrcYSize
>3391	Identifier	nSrcYSize
>3392	Identifier	nSrcXSize
>3393	CastExpression	( double ) nSrcPixelCostInBits
>3394	Identifier	nSrcPixelCostInBits
>3395	CastTarget	double
>3396	Identifier	dfTotalMemoryUse
>3397	IdentifierDeclStatement	 
>3398	IdentifierDecl	dfTotalMemoryUse
>3399	Identifier	dfTotalMemoryUse
>3400	IdentifierDeclType	double
>3401	IfStatement	if ( psOptions -> nDstAlphaBand > 0 )
>3402	ExpressionStatement	 
>3403	AssignmentExpr	nDstPixelCostInBits += 32
>3404	PrimaryExpression	32
>3405	Identifier	nDstPixelCostInBits
>3406	Condition	 
>3407	RelationalExpression	psOptions -> nDstAlphaBand > 0
>3408	PrimaryExpression	0
>3409	PtrMemberAccess	psOptions -> nDstAlphaBand
>3410	Identifier	nDstAlphaBand
>3411	Identifier	psOptions
>3412	IfStatement	if ( psOptions -> padfDstNoDataReal != NULL || psOptions -> pfnDstValidityMaskFunc != NULL )
>3413	ExpressionStatement	 
>3414	AssignmentExpr	nDstPixelCostInBits += psOptions -> nBandCount
>3415	PtrMemberAccess	psOptions -> nBandCount
>3416	Identifier	nBandCount
>3417	Identifier	psOptions
>3418	Identifier	nDstPixelCostInBits
>3419	Condition	 
>3420	OrExpression	psOptions -> padfDstNoDataReal != NULL || psOptions -> pfnDstValidityMaskFunc != NULL
>3421	EqualityExpression	psOptions -> pfnDstValidityMaskFunc != NULL
>3422	Identifier	NULL
>3423	PtrMemberAccess	psOptions -> pfnDstValidityMaskFunc
>3424	Identifier	pfnDstValidityMaskFunc
>3425	Identifier	psOptions
>3426	EqualityExpression	psOptions -> padfDstNoDataReal != NULL
>3427	Identifier	NULL
>3428	PtrMemberAccess	psOptions -> padfDstNoDataReal
>3429	Identifier	padfDstNoDataReal
>3430	Identifier	psOptions
>3431	IfStatement	if ( psOptions -> pfnDstDensityMaskFunc != NULL )
>3432	ExpressionStatement	 
>3433	AssignmentExpr	nDstPixelCostInBits += 32
>3434	PrimaryExpression	32
>3435	Identifier	nDstPixelCostInBits
>3436	Condition	 
>3437	EqualityExpression	psOptions -> pfnDstDensityMaskFunc != NULL
>3438	Identifier	NULL
>3439	PtrMemberAccess	psOptions -> pfnDstDensityMaskFunc
>3440	Identifier	pfnDstDensityMaskFunc
>3441	Identifier	psOptions
>3442	ExpressionStatement	 
>3443	AssignmentExpr	nDstPixelCostInBits = GDALGetDataTypeSize ( psOptions -> eWorkingDataType ) * psOptions -> nBandCount
>3444	MultiplicativeExpression	GDALGetDataTypeSize ( psOptions -> eWorkingDataType ) * psOptions -> nBandCount
>3445	PtrMemberAccess	psOptions -> nBandCount
>3446	Identifier	nBandCount
>3447	Identifier	psOptions
>3448	CallExpression	GDALGetDataTypeSize ( psOptions -> eWorkingDataType )
>3449	ArgumentList	psOptions -> eWorkingDataType
>3450	Argument	psOptions -> eWorkingDataType
>3451	PtrMemberAccess	psOptions -> eWorkingDataType
>3452	Identifier	eWorkingDataType
>3453	Identifier	psOptions
>3454	Callee	GDALGetDataTypeSize
>3455	Identifier	GDALGetDataTypeSize
>3456	Identifier	nDstPixelCostInBits
>3457	IdentifierDeclStatement	 
>3458	IdentifierDecl	nDstPixelCostInBits
>3459	Identifier	nDstPixelCostInBits
>3460	IdentifierDeclType	int
>3461	IfStatement	if ( psOptions -> pfnSrcValidityMaskFunc != NULL )
>3462	ExpressionStatement	 
>3463	AssignmentExpr	nSrcPixelCostInBits += 1
>3464	PrimaryExpression	1
>3465	Identifier	nSrcPixelCostInBits
>3466	Condition	 
>3467	EqualityExpression	psOptions -> pfnSrcValidityMaskFunc != NULL
>3468	Identifier	NULL
>3469	PtrMemberAccess	psOptions -> pfnSrcValidityMaskFunc
>3470	Identifier	pfnSrcValidityMaskFunc
>3471	Identifier	psOptions
>3472	IfStatement	if ( psOptions -> papfnSrcPerBandValidityMaskFunc != NULL || psOptions -> padfSrcNoDataReal != NULL )
>3473	ExpressionStatement	 
>3474	AssignmentExpr	nSrcPixelCostInBits += psOptions -> nBandCount
>3475	PtrMemberAccess	psOptions -> nBandCount
>3476	Identifier	nBandCount
>3477	Identifier	psOptions
>3478	Identifier	nSrcPixelCostInBits
>3479	Condition	 
>3480	OrExpression	psOptions -> papfnSrcPerBandValidityMaskFunc != NULL || psOptions -> padfSrcNoDataReal != NULL
>3481	EqualityExpression	psOptions -> padfSrcNoDataReal != NULL
>3482	Identifier	NULL
>3483	PtrMemberAccess	psOptions -> padfSrcNoDataReal
>3484	Identifier	padfSrcNoDataReal
>3485	Identifier	psOptions
>3486	EqualityExpression	psOptions -> papfnSrcPerBandValidityMaskFunc != NULL
>3487	Identifier	NULL
>3488	PtrMemberAccess	psOptions -> papfnSrcPerBandValidityMaskFunc
>3489	Identifier	papfnSrcPerBandValidityMaskFunc
>3490	Identifier	psOptions
>3491	IfStatement	if ( psOptions -> nSrcAlphaBand > 0 || psOptions -> hCutline != NULL )
>3492	ElseStatement	else
>3493	IfStatement	if ( hSrcBand != NULL && ( GDALGetMaskFlags ( hSrcBand ) & GMF_PER_DATASET ) )
>3494	ExpressionStatement	 
>3495	AssignmentExpr	nSrcPixelCostInBits += 1
>3496	PrimaryExpression	1
>3497	Identifier	nSrcPixelCostInBits
>3498	Condition	 
>3499	AndExpression	hSrcBand != NULL && ( GDALGetMaskFlags ( hSrcBand ) & GMF_PER_DATASET )
>3500	BitAndExpression	GDALGetMaskFlags ( hSrcBand ) & GMF_PER_DATASET
>3501	Identifier	GMF_PER_DATASET
>3502	CallExpression	GDALGetMaskFlags ( hSrcBand )
>3503	ArgumentList	hSrcBand
>3504	Argument	hSrcBand
>3505	Identifier	hSrcBand
>3506	Callee	GDALGetMaskFlags
>3507	Identifier	GDALGetMaskFlags
>3508	EqualityExpression	hSrcBand != NULL
>3509	Identifier	NULL
>3510	Identifier	hSrcBand
>3511	ExpressionStatement	 
>3512	AssignmentExpr	nSrcPixelCostInBits += 32
>3513	PrimaryExpression	32
>3514	Identifier	nSrcPixelCostInBits
>3515	Condition	 
>3516	OrExpression	psOptions -> nSrcAlphaBand > 0 || psOptions -> hCutline != NULL
>3517	EqualityExpression	psOptions -> hCutline != NULL
>3518	Identifier	NULL
>3519	PtrMemberAccess	psOptions -> hCutline
>3520	Identifier	hCutline
>3521	Identifier	psOptions
>3522	RelationalExpression	psOptions -> nSrcAlphaBand > 0
>3523	PrimaryExpression	0
>3524	PtrMemberAccess	psOptions -> nSrcAlphaBand
>3525	Identifier	nSrcAlphaBand
>3526	Identifier	psOptions
>3527	IfStatement	if ( psOptions -> nBandCount > 0 )
>3528	ExpressionStatement	 
>3529	AssignmentExpr	hSrcBand = GDALGetRasterBand ( psOptions -> hSrcDS , psOptions -> panSrcBands [ 0 ] )
>3530	CallExpression	GDALGetRasterBand ( psOptions -> hSrcDS , psOptions -> panSrcBands [ 0 ] )
>3531	ArgumentList	psOptions -> hSrcDS
>3532	Argument	psOptions -> panSrcBands [ 0 ]
>3533	ArrayIndexing	psOptions -> panSrcBands [ 0 ]
>3534	PrimaryExpression	0
>3535	PtrMemberAccess	psOptions -> panSrcBands
>3536	Identifier	panSrcBands
>3537	Identifier	psOptions
>3538	Argument	psOptions -> hSrcDS
>3539	PtrMemberAccess	psOptions -> hSrcDS
>3540	Identifier	hSrcDS
>3541	Identifier	psOptions
>3542	Callee	GDALGetRasterBand
>3543	Identifier	GDALGetRasterBand
>3544	Identifier	hSrcBand
>3545	Condition	 
>3546	RelationalExpression	psOptions -> nBandCount > 0
>3547	PrimaryExpression	0
>3548	PtrMemberAccess	psOptions -> nBandCount
>3549	Identifier	nBandCount
>3550	Identifier	psOptions
>3551	IdentifierDeclStatement	 
>3552	IdentifierDecl	hSrcBand = NULL
>3553	AssignmentExpr	hSrcBand = NULL
>3554	Identifier	NULL
>3555	Identifier	NULL
>3556	Identifier	hSrcBand
>3557	IdentifierDeclType	GDALRasterBandH
>3558	IfStatement	if ( psOptions -> pfnSrcDensityMaskFunc != NULL )
>3559	ExpressionStatement	 
>3560	AssignmentExpr	nSrcPixelCostInBits += 32
>3561	PrimaryExpression	32
>3562	Identifier	nSrcPixelCostInBits
>3563	Condition	 
>3564	EqualityExpression	psOptions -> pfnSrcDensityMaskFunc != NULL
>3565	Identifier	NULL
>3566	PtrMemberAccess	psOptions -> pfnSrcDensityMaskFunc
>3567	Identifier	pfnSrcDensityMaskFunc
>3568	Identifier	psOptions
>3569	ExpressionStatement	 
>3570	AssignmentExpr	nSrcPixelCostInBits = GDALGetDataTypeSize ( psOptions -> eWorkingDataType ) * psOptions -> nBandCount
>3571	MultiplicativeExpression	GDALGetDataTypeSize ( psOptions -> eWorkingDataType ) * psOptions -> nBandCount
>3572	PtrMemberAccess	psOptions -> nBandCount
>3573	Identifier	nBandCount
>3574	Identifier	psOptions
>3575	CallExpression	GDALGetDataTypeSize ( psOptions -> eWorkingDataType )
>3576	ArgumentList	psOptions -> eWorkingDataType
>3577	Argument	psOptions -> eWorkingDataType
>3578	PtrMemberAccess	psOptions -> eWorkingDataType
>3579	Identifier	eWorkingDataType
>3580	Identifier	psOptions
>3581	Callee	GDALGetDataTypeSize
>3582	Identifier	GDALGetDataTypeSize
>3583	Identifier	nSrcPixelCostInBits
>3584	IdentifierDeclStatement	 
>3585	IdentifierDecl	nSrcPixelCostInBits
>3586	Identifier	nSrcPixelCostInBits
>3587	IdentifierDeclType	int
>3588	IfStatement	if ( ( nSrcXSize == 0 || nSrcYSize == 0 ) && CSLFetchBoolean ( psOptions -> papszWarpOptions , \"SKIP_NOSOURCE\" , \
>3589	ReturnStatement	 
>3590	Identifier	CE_None
>3591	Condition	 
>3592	AndExpression	( nSrcXSize == 0 || nSrcYSize == 0 ) && CSLFetchBoolean ( psOptions -> papszWarpOptions , \"SKIP_NOSOURCE\" , \
>3593	CallExpression	CSLFetchBoolean ( psOptions -> papszWarpOptions , \"SKIP_NOSOURCE\" , 0 )
>3594	ArgumentList	psOptions -> papszWarpOptions
>3595	Argument	0
>3596	PrimaryExpression	0
>3597	Argument	\"SKIP_NOSOURCE\"
>3598	PrimaryExpression	\"SKIP_NOSOURCE\"
>3599	Argument	psOptions -> papszWarpOptions
>3600	PtrMemberAccess	psOptions -> papszWarpOptions
>3601	Identifier	papszWarpOptions
>3602	Identifier	psOptions
>3603	Callee	CSLFetchBoolean
>3604	Identifier	CSLFetchBoolean
>3605	OrExpression	nSrcXSize == 0 || nSrcYSize == 0
>3606	EqualityExpression	nSrcYSize == 0
>3607	PrimaryExpression	0
>3608	Identifier	nSrcYSize
>3609	EqualityExpression	nSrcXSize == 0
>3610	PrimaryExpression	0
>3611	Identifier	nSrcXSize
>3612	IfStatement	if ( eErr != CE_None )
>3613	CompoundStatement	 
>3614	ReturnStatement	 
>3615	Identifier	eErr
>3616	ExpressionStatement	 
>3617	CallExpression	CPLError ( CE_Warning , CPLE_AppDefined , \"Unable to compute source region for output window %d,%d,%d,%d, skipping.\" , \
>3618	ArgumentList	CE_Warning
>3619	Argument	nDstYSize
>3620	Identifier	nDstYSize
>3621	Argument	nDstXSize
>3622	Identifier	nDstXSize
>3623	Argument	nDstYOff
>3624	Identifier	nDstYOff
>3625	Argument	nDstXOff
>3626	Identifier	nDstXOff
>3627	Argument	\"Unable to compute source region for output window %d,%d,%d,%d, skipping.\"
>3628	PrimaryExpression	\"Unable to compute source region for output window %d,%d,%d,%d, skipping.\"
>3629	Argument	CPLE_AppDefined
>3630	Identifier	CPLE_AppDefined
>3631	Argument	CE_Warning
>3632	Identifier	CE_Warning
>3633	Callee	CPLError
>3634	Identifier	CPLError
>3635	Condition	 
>3636	EqualityExpression	eErr != CE_None
>3637	Identifier	CE_None
>3638	Identifier	eErr
>3639	ExpressionStatement	 
>3640	AssignmentExpr	eErr = ComputeSourceWindow ( nDstXOff , nDstYOff , nDstXSize , nDstYSize , & nSrcXOff , & nSrcYOff , & \
>3641	CallExpression	ComputeSourceWindow ( nDstXOff , nDstYOff , nDstXSize , nDstYSize , & nSrcXOff , & nSrcYOff , & nSrcXSize , & nSrcYSize )
>3642	ArgumentList	nDstXOff
>3643	Argument	& nSrcYSize
>3644	UnaryOp	& nSrcYSize
>3645	Identifier	nSrcYSize
>3646	UnaryOperator	&
>3647	Argument	& nSrcXSize
>3648	UnaryOp	& nSrcXSize
>3649	Identifier	nSrcXSize
>3650	UnaryOperator	&
>3651	Argument	& nSrcYOff
>3652	UnaryOp	& nSrcYOff
>3653	Identifier	nSrcYOff
>3654	UnaryOperator	&
>3655	Argument	& nSrcXOff
>3656	UnaryOp	& nSrcXOff
>3657	Identifier	nSrcXOff
>3658	UnaryOperator	&
>3659	Argument	nDstYSize
>3660	Identifier	nDstYSize
>3661	Argument	nDstXSize
>3662	Identifier	nDstXSize
>3663	Argument	nDstYOff
>3664	Identifier	nDstYOff
>3665	Argument	nDstXOff
>3666	Identifier	nDstXOff
>3667	Callee	ComputeSourceWindow
>3668	Identifier	ComputeSourceWindow
>3669	Identifier	eErr
>3670	IdentifierDeclStatement	 
>3671	IdentifierDecl	eErr
>3672	Identifier	eErr
>3673	IdentifierDeclType	CPLErr
>3674	IdentifierDeclStatement	 
>3675	IdentifierDecl	nSrcYSize
>3676	Identifier	nSrcYSize
>3677	IdentifierDeclType	int
>3678	IdentifierDecl	nSrcXSize
>3679	Identifier	nSrcXSize
>3680	IdentifierDeclType	int
>3681	IdentifierDecl	nSrcYOff
>3682	Identifier	nSrcYOff
>3683	IdentifierDeclType	int
>3684	IdentifierDecl	nSrcXOff
>3685	Identifier	nSrcXOff
>3686	IdentifierDeclType	int
>3754	FunctionDef	GDALWarpOperation 
>3755	ParameterList	int nDstXOff , int nDstYOff , int nDstXSize , int nDstYSize , int nSrcXOff , int nSrcYOff , int nSrcXSize , int \
>3756	Parameter	 
>3757	Identifier	dfProgressScale
>3758	ParameterType	double
>3759	Parameter	 
>3760	Identifier	dfProgressBase
>3761	ParameterType	double
>3762	Parameter	 
>3763	Identifier	nSrcYSize
>3764	ParameterType	int
>3765	Parameter	 
>3766	Identifier	nSrcXSize
>3767	ParameterType	int
>3768	Parameter	 
>3769	Identifier	nSrcYOff
>3770	ParameterType	int
>3771	Parameter	 
>3772	Identifier	nSrcXOff
>3773	ParameterType	int
>3774	Parameter	 
>3775	Identifier	nDstYSize
>3776	ParameterType	int
>3777	Parameter	 
>3778	Identifier	nDstXSize
>3779	ParameterType	int
>3780	Parameter	 
>3781	Identifier	nDstYOff
>3782	ParameterType	int
>3783	Parameter	 
>3784	Identifier	nDstXOff
>3785	ParameterType	int
>3786	ReturnType	CPLErr
>3787	CompoundStatement	 
>3788	ReturnStatement	 
>3789	Identifier	eErr
>3790	ExpressionStatement	 
>3791	CallExpression	VSIFree ( pDstBuffer )
>3792	ArgumentList	pDstBuffer
>3793	Argument	pDstBuffer
>3794	Identifier	pDstBuffer
>3795	Callee	VSIFree
>3796	Identifier	VSIFree
>3797	IfStatement	if ( eErr == CE_None )
>3798	CompoundStatement	 
>3799	ExpressionStatement	 
>3800	CallExpression	ReportTiming ( \"Output buffer write\" )
>3801	ArgumentList	\"Output buffer write\"
>3802	Argument	\"Output buffer write\"
>3803	PrimaryExpression	\"Output buffer write\"
>3804	Callee	ReportTiming
>3805	Identifier	ReportTiming
>3806	IfStatement	if ( eErr == CE_None && CSLFetchBoolean ( psOptions -> papszWarpOptions , \"WRITE_FLUSH\" , FALSE ) )
>3807	CompoundStatement	 
>3808	IfStatement	if ( eNewErr != eOldErr || osLastErrMsg . compare ( CPLGetLastErrorMsg ( ) ) != 0 )
>3809	ExpressionStatement	 
>3810	AssignmentExpr	eErr = CE_Failure
>3811	Identifier	CE_Failure
>3812	Identifier	eErr
>3813	Condition	 
>3814	OrExpression	eNewErr != eOldErr || osLastErrMsg . compare ( CPLGetLastErrorMsg ( ) ) != 0
>3815	EqualityExpression	osLastErrMsg . compare ( CPLGetLastErrorMsg ( ) ) != 0
>3816	PrimaryExpression	0
>3817	CallExpression	osLastErrMsg . compare ( CPLGetLastErrorMsg ( ) )
>3818	ArgumentList	CPLGetLastErrorMsg ( )
>3819	Argument	CPLGetLastErrorMsg ( )
>3820	CallExpression	CPLGetLastErrorMsg ( )
>3821	ArgumentList	 
>3822	Callee	CPLGetLastErrorMsg
>3823	Identifier	CPLGetLastErrorMsg
>3824	Callee	osLastErrMsg . compare
>3825	MemberAccess	osLastErrMsg . compare
>3826	Identifier	compare
>3827	Identifier	osLastErrMsg
>3828	EqualityExpression	eNewErr != eOldErr
>3829	Identifier	eOldErr
>3830	Identifier	eNewErr
>3831	IdentifierDeclStatement	 
>3832	IdentifierDecl	eNewErr = CPLGetLastErrorType ( )
>3833	AssignmentExpr	eNewErr = CPLGetLastErrorType ( )
>3834	CallExpression	CPLGetLastErrorType ( )
>3835	ArgumentList	 
>3836	Callee	CPLGetLastErrorType
>3837	Identifier	CPLGetLastErrorType
>3838	Identifier	eNewErr
>3839	Identifier	eNewErr
>3840	IdentifierDeclType	CPLErr
>3841	ExpressionStatement	 
>3842	CallExpression	GDALFlushCache ( psOptions -> hDstDS )
>3843	ArgumentList	psOptions -> hDstDS
>3844	Argument	psOptions -> hDstDS
>3845	PtrMemberAccess	psOptions -> hDstDS
>3846	Identifier	hDstDS
>3847	Identifier	psOptions
>3848	Callee	GDALFlushCache
>3849	Identifier	GDALFlushCache
>3850	IdentifierDeclStatement	 
>3851	IdentifierDecl	osLastErrMsg = CPLGetLastErrorMsg ( )
>3852	AssignmentExpr	osLastErrMsg = CPLGetLastErrorMsg ( )
>3853	CallExpression	CPLGetLastErrorMsg ( )
>3854	ArgumentList	 
>3855	Callee	CPLGetLastErrorMsg
>3856	Identifier	CPLGetLastErrorMsg
>3857	Identifier	osLastErrMsg
>3858	Identifier	osLastErrMsg
>3859	IdentifierDeclType	CPLString
>3860	IdentifierDeclStatement	 
>3861	IdentifierDecl	eOldErr = CPLGetLastErrorType ( )
>3862	AssignmentExpr	eOldErr = CPLGetLastErrorType ( )
>3863	CallExpression	CPLGetLastErrorType ( )
>3864	ArgumentList	 
>3865	Callee	CPLGetLastErrorType
>3866	Identifier	CPLGetLastErrorType
>3867	Identifier	eOldErr
>3868	Identifier	eOldErr
>3869	IdentifierDeclType	CPLErr
>3870	Condition	 
>3871	AndExpression	eErr == CE_None && CSLFetchBoolean ( psOptions -> papszWarpOptions , \"WRITE_FLUSH\" , FALSE )
>3872	CallExpression	CSLFetchBoolean ( psOptions -> papszWarpOptions , \"WRITE_FLUSH\" , FALSE )
>3873	ArgumentList	psOptions -> papszWarpOptions
>3874	Argument	FALSE
>3875	Identifier	FALSE
>3876	Argument	\"WRITE_FLUSH\"
>3877	PrimaryExpression	\"WRITE_FLUSH\"
>3878	Argument	psOptions -> papszWarpOptions
>3879	PtrMemberAccess	psOptions -> papszWarpOptions
>3880	Identifier	papszWarpOptions
>3881	Identifier	psOptions
>3882	Callee	CSLFetchBoolean
>3883	Identifier	CSLFetchBoolean
>3884	EqualityExpression	eErr == CE_None
>3885	Identifier	CE_None
>3886	Identifier	eErr
>3887	ExpressionStatement	 
>3888	AssignmentExpr	eErr = GDALDatasetRasterIO ( psOptions -> hDstDS , GF_Write , nDstXOff , nDstYOff , nDstXSize , nDstYSize , \
>3889	CallExpression	GDALDatasetRasterIO ( psOptions -> hDstDS , GF_Write , nDstXOff , nDstYOff , nDstXSize , nDstYSize , pDstBuffer , \
>3890	ArgumentList	psOptions -> hDstDS
>3891	Argument	0
>3892	PrimaryExpression	0
>3893	Argument	0
>3894	PrimaryExpression	0
>3895	Argument	0
>3896	PrimaryExpression	0
>3897	Argument	psOptions -> panDstBands
>3898	PtrMemberAccess	psOptions -> panDstBands
>3899	Identifier	panDstBands
>3900	Identifier	psOptions
>3901	Argument	psOptions -> nBandCount
>3902	PtrMemberAccess	psOptions -> nBandCount
>3903	Identifier	nBandCount
>3904	Identifier	psOptions
>3905	Argument	psOptions -> eWorkingDataType
>3906	PtrMemberAccess	psOptions -> eWorkingDataType
>3907	Identifier	eWorkingDataType
>3908	Identifier	psOptions
>3909	Argument	nDstYSize
>3910	Identifier	nDstYSize
>3911	Argument	nDstXSize
>3912	Identifier	nDstXSize
>3913	Argument	pDstBuffer
>3914	Identifier	pDstBuffer
>3915	Argument	nDstYSize
>3916	Identifier	nDstYSize
>3917	Argument	nDstXSize
>3918	Identifier	nDstXSize
>3919	Argument	nDstYOff
>3920	Identifier	nDstYOff
>3921	Argument	nDstXOff
>3922	Identifier	nDstXOff
>3923	Argument	GF_Write
>3924	Identifier	GF_Write
>3925	Argument	psOptions -> hDstDS
>3926	PtrMemberAccess	psOptions -> hDstDS
>3927	Identifier	hDstDS
>3928	Identifier	psOptions
>3929	Callee	GDALDatasetRasterIO
>3930	Identifier	GDALDatasetRasterIO
>3931	Identifier	eErr
>3932	Condition	 
>3933	EqualityExpression	eErr == CE_None
>3934	Identifier	CE_None
>3935	Identifier	eErr
>3936	ExpressionStatement	 
>3937	AssignmentExpr	eErr = WarpRegionToBuffer ( nDstXOff , nDstYOff , nDstXSize , nDstYSize , pDstBuffer , psOptions -> eWorkingDataType , \
>3938	CallExpression	WarpRegionToBuffer ( nDstXOff , nDstYOff , nDstXSize , nDstYSize , pDstBuffer , psOptions -> eWorkingDataType , \
>3939	ArgumentList	nDstXOff
>3940	Argument	dfProgressScale
>3941	Identifier	dfProgressScale
>3942	Argument	dfProgressBase
>3943	Identifier	dfProgressBase
>3944	Argument	nSrcYSize
>3945	Identifier	nSrcYSize
>3946	Argument	nSrcXSize
>3947	Identifier	nSrcXSize
>3948	Argument	nSrcYOff
>3949	Identifier	nSrcYOff
>3950	Argument	nSrcXOff
>3951	Identifier	nSrcXOff
>3952	Argument	psOptions -> eWorkingDataType
>3953	PtrMemberAccess	psOptions -> eWorkingDataType
>3954	Identifier	eWorkingDataType
>3955	Identifier	psOptions
>3956	Argument	pDstBuffer
>3957	Identifier	pDstBuffer
>3958	Argument	nDstYSize
>3959	Identifier	nDstYSize
>3960	Argument	nDstXSize
>3961	Identifier	nDstXSize
>3962	Argument	nDstYOff
>3963	Identifier	nDstYOff
>3964	Argument	nDstXOff
>3965	Identifier	nDstXOff
>3966	Callee	WarpRegionToBuffer
>3967	Identifier	WarpRegionToBuffer
>3968	Identifier	eErr
>3969	IfStatement	if ( pszInitDest == NULL )
>3970	CompoundStatement	 
>3971	ExpressionStatement	 
>3972	CallExpression	ReportTiming ( \"Output buffer read\" )
>3973	ArgumentList	\"Output buffer read\"
>3974	Argument	\"Output buffer read\"
>3975	PrimaryExpression	\"Output buffer read\"
>3976	Callee	ReportTiming
>3977	Identifier	ReportTiming
>3978	IfStatement	if ( eErr != CE_None )
>3979	CompoundStatement	 
>3980	ReturnStatement	 
>3981	Identifier	eErr
>3982	ExpressionStatement	 
>3983	CallExpression	CPLFree ( pDstBuffer )
>3984	ArgumentList	pDstBuffer
>3985	Argument	pDstBuffer
>3986	Identifier	pDstBuffer
>3987	Callee	CPLFree
>3988	Identifier	CPLFree
>3989	Condition	 
>3990	EqualityExpression	eErr != CE_None
>3991	Identifier	CE_None
>3992	Identifier	eErr
>3993	ExpressionStatement	 
>3994	AssignmentExpr	eErr = GDALDatasetRasterIO ( psOptions -> hDstDS , GF_Read , nDstXOff , nDstYOff , nDstXSize , nDstYSize , \
>3995	CallExpression	GDALDatasetRasterIO ( psOptions -> hDstDS , GF_Read , nDstXOff , nDstYOff , nDstXSize , nDstYSize , pDstBuffer , \
>3996	ArgumentList	psOptions -> hDstDS
>3997	Argument	0
>3998	PrimaryExpression	0
>3999	Argument	0
>4000	PrimaryExpression	0
>4001	Argument	0
>4002	PrimaryExpression	0
>4003	Argument	psOptions -> panDstBands
>4004	PtrMemberAccess	psOptions -> panDstBands
>4005	Identifier	panDstBands
>4006	Identifier	psOptions
>4007	Argument	psOptions -> nBandCount
>4008	PtrMemberAccess	psOptions -> nBandCount
>4009	Identifier	nBandCount
>4010	Identifier	psOptions
>4011	Argument	psOptions -> eWorkingDataType
>4012	PtrMemberAccess	psOptions -> eWorkingDataType
>4013	Identifier	eWorkingDataType
>4014	Identifier	psOptions
>4015	Argument	nDstYSize
>4016	Identifier	nDstYSize
>4017	Argument	nDstXSize
>4018	Identifier	nDstXSize
>4019	Argument	pDstBuffer
>4020	Identifier	pDstBuffer
>4021	Argument	nDstYSize
>4022	Identifier	nDstYSize
>4023	Argument	nDstXSize
>4024	Identifier	nDstXSize
>4025	Argument	nDstYOff
>4026	Identifier	nDstYOff
>4027	Argument	nDstXOff
>4028	Identifier	nDstXOff
>4029	Argument	GF_Read
>4030	Identifier	GF_Read
>4031	Argument	psOptions -> hDstDS
>4032	PtrMemberAccess	psOptions -> hDstDS
>4033	Identifier	hDstDS
>4034	Identifier	psOptions
>4035	Callee	GDALDatasetRasterIO
>4036	Identifier	GDALDatasetRasterIO
>4037	Identifier	eErr
>4038	Condition	 
>4039	EqualityExpression	pszInitDest == NULL
>4040	Identifier	NULL
>4041	Identifier	pszInitDest
>4042	IfStatement	if ( pszInitDest != NULL && ! EQUAL ( pszInitDest , \"\" ) )
>4043	CompoundStatement	 
>4044	ExpressionStatement	 
>4045	CallExpression	CSLDestroy ( papszInitValues )
>4046	ArgumentList	papszInitValues
>4047	Argument	papszInitValues
>4048	Identifier	papszInitValues
>4049	Callee	CSLDestroy
>4050	Identifier	CSLDestroy
>4051	ForStatement	for ( iBand = 0 ; iBand < psOptions -> nBandCount ; iBand ++ )
>4052	CompoundStatement	 
>4053	IfStatement	if ( psOptions -> eWorkingDataType == GDT_Byte )
>4054	ElseStatement	else
>4055	IfStatement	if ( ! CPLIsNan ( adfInitRealImag [ 0 ] ) && adfInitRealImag [ 0 ] == 0.0 && ! CPLIsNan ( adfInitRealImag [ 1 ] ) && \
>4056	ElseStatement	else
>4057	IfStatement	if ( ! CPLIsNan ( adfInitRealImag [ 1 ] ) && adfInitRealImag [ 1 ] == 0.0 )
>4058	ElseStatement	else
>4059	CompoundStatement	 
>4060	ExpressionStatement	 
>4061	CallExpression	GDALCopyWords ( & adfInitRealImag , GDT_CFloat64 , 0 , pBandData , psOptions -> eWorkingDataType , nWordSize , nDstXSize * \
>4062	ArgumentList	& adfInitRealImag
>4063	Argument	nDstXSize * nDstYSize
>4064	MultiplicativeExpression	nDstXSize * nDstYSize
>4065	Identifier	nDstYSize
>4066	Identifier	nDstXSize
>4067	Argument	nWordSize
>4068	Identifier	nWordSize
>4069	Argument	psOptions -> eWorkingDataType
>4070	PtrMemberAccess	psOptions -> eWorkingDataType
>4071	Identifier	eWorkingDataType
>4072	Identifier	psOptions
>4073	Argument	pBandData
>4074	Identifier	pBandData
>4075	Argument	0
>4076	PrimaryExpression	0
>4077	Argument	GDT_CFloat64
>4078	Identifier	GDT_CFloat64
>4079	Argument	& adfInitRealImag
>4080	UnaryOp	& adfInitRealImag
>4081	Identifier	adfInitRealImag
>4082	UnaryOperator	&
>4083	Callee	GDALCopyWords
>4084	Identifier	GDALCopyWords
>4085	CompoundStatement	 
>4086	ExpressionStatement	 
>4087	CallExpression	GDALCopyWords ( & adfInitRealImag , GDT_Float64 , 0 , pBandData , psOptions -> eWorkingDataType , nWordSize , nDstXSize * \
>4088	ArgumentList	& adfInitRealImag
>4089	Argument	nDstXSize * nDstYSize
>4090	MultiplicativeExpression	nDstXSize * nDstYSize
>4091	Identifier	nDstYSize
>4092	Identifier	nDstXSize
>4093	Argument	nWordSize
>4094	Identifier	nWordSize
>4095	Argument	psOptions -> eWorkingDataType
>4096	PtrMemberAccess	psOptions -> eWorkingDataType
>4097	Identifier	eWorkingDataType
>4098	Identifier	psOptions
>4099	Argument	pBandData
>4100	Identifier	pBandData
>4101	Argument	0
>4102	PrimaryExpression	0
>4103	Argument	GDT_Float64
>4104	Identifier	GDT_Float64
>4105	Argument	& adfInitRealImag
>4106	UnaryOp	& adfInitRealImag
>4107	Identifier	adfInitRealImag
>4108	UnaryOperator	&
>4109	Callee	GDALCopyWords
>4110	Identifier	GDALCopyWords
>4111	Condition	 
>4112	AndExpression	! CPLIsNan ( adfInitRealImag [ 1 ] ) && adfInitRealImag [ 1 ] == 0.0
>4113	EqualityExpression	adfInitRealImag [ 1 ] == 0.0
>4114	PrimaryExpression	0.0
>4115	ArrayIndexing	adfInitRealImag [ 1 ]
>4116	PrimaryExpression	1
>4117	Identifier	adfInitRealImag
>4118	UnaryOp	! CPLIsNan ( adfInitRealImag [ 1 ] )
>4119	CallExpression	CPLIsNan ( adfInitRealImag [ 1 ] )
>4120	ArgumentList	adfInitRealImag [ 1 ]
>4121	Argument	adfInitRealImag [ 1 ]
>4122	ArrayIndexing	adfInitRealImag [ 1 ]
>4123	PrimaryExpression	1
>4124	Identifier	adfInitRealImag
>4125	Callee	CPLIsNan
>4126	Identifier	CPLIsNan
>4127	UnaryOperator	!
>4128	CompoundStatement	 
>4129	ExpressionStatement	 
>4130	CallExpression	memset ( pBandData , 0 , nBandSize )
>4131	ArgumentList	pBandData
>4132	Argument	nBandSize
>4133	Identifier	nBandSize
>4134	Argument	0
>4135	PrimaryExpression	0
>4136	Argument	pBandData
>4137	Identifier	pBandData
>4138	Callee	memset
>4139	Identifier	memset
>4140	Condition	 
>4141	AndExpression	! CPLIsNan ( adfInitRealImag [ 0 ] ) && adfInitRealImag [ 0 ] == 0.0 && ! CPLIsNan ( adfInitRealImag [ \
>4142	AndExpression	adfInitRealImag [ 0 ] == 0.0 && ! CPLIsNan ( adfInitRealImag [ 1 ] ) && adfInitRealImag [ 1 ] == 0.0
>4143	AndExpression	! CPLIsNan ( adfInitRealImag [ 1 ] ) && adfInitRealImag [ 1 ] == 0.0
>4144	EqualityExpression	adfInitRealImag [ 1 ] == 0.0
>4145	PrimaryExpression	0.0
>4146	ArrayIndexing	adfInitRealImag [ 1 ]
>4147	PrimaryExpression	1
>4148	Identifier	adfInitRealImag
>4149	UnaryOp	! CPLIsNan ( adfInitRealImag [ 1 ] )
>4150	CallExpression	CPLIsNan ( adfInitRealImag [ 1 ] )
>4151	ArgumentList	adfInitRealImag [ 1 ]
>4152	Argument	adfInitRealImag [ 1 ]
>4153	ArrayIndexing	adfInitRealImag [ 1 ]
>4154	PrimaryExpression	1
>4155	Identifier	adfInitRealImag
>4156	Callee	CPLIsNan
>4157	Identifier	CPLIsNan
>4158	UnaryOperator	!
>4159	EqualityExpression	adfInitRealImag [ 0 ] == 0.0
>4160	PrimaryExpression	0.0
>4161	ArrayIndexing	adfInitRealImag [ 0 ]
>4162	PrimaryExpression	0
>4163	Identifier	adfInitRealImag
>4164	UnaryOp	! CPLIsNan ( adfInitRealImag [ 0 ] )
>4165	CallExpression	CPLIsNan ( adfInitRealImag [ 0 ] )
>4166	ArgumentList	adfInitRealImag [ 0 ]
>4167	Argument	adfInitRealImag [ 0 ]
>4168	ArrayIndexing	adfInitRealImag [ 0 ]
>4169	PrimaryExpression	0
>4170	Identifier	adfInitRealImag
>4171	Callee	CPLIsNan
>4172	Identifier	CPLIsNan
>4173	UnaryOperator	!
>4174	ExpressionStatement	 
>4175	CallExpression	memset ( pBandData , MAX ( 0 , MIN ( 255 , ( int ) adfInitRealImag [ 0 ] ) ) , nBandSize )
>4176	ArgumentList	pBandData
>4177	Argument	nBandSize
>4178	Identifier	nBandSize
>4179	Argument	MAX ( 0 , MIN ( 255 , ( int ) adfInitRealImag [ 0 ] ) )
>4180	CallExpression	MAX ( 0 , MIN ( 255 , ( int ) adfInitRealImag [ 0 ] ) )
>4181	ArgumentList	0
>4182	Argument	MIN ( 255 , ( int ) adfInitRealImag [ 0 ] )
>4183	CallExpression	MIN ( 255 , ( int ) adfInitRealImag [ 0 ] )
>4184	ArgumentList	255
>4185	Argument	( int ) adfInitRealImag [ 0 ]
>4186	CastExpression	( int ) adfInitRealImag [ 0 ]
>4187	ArrayIndexing	adfInitRealImag [ 0 ]
>4188	PrimaryExpression	0
>4189	Identifier	adfInitRealImag
>4190	CastTarget	int
>4191	Argument	255
>4192	PrimaryExpression	255
>4193	Callee	MIN
>4194	Identifier	MIN
>4195	Argument	0
>4196	PrimaryExpression	0
>4197	Callee	MAX
>4198	Identifier	MAX
>4199	Argument	pBandData
>4200	Identifier	pBandData
>4201	Callee	memset
>4202	Identifier	memset
>4203	Condition	 
>4204	EqualityExpression	psOptions -> eWorkingDataType == GDT_Byte
>4205	Identifier	GDT_Byte
>4206	PtrMemberAccess	psOptions -> eWorkingDataType
>4207	Identifier	eWorkingDataType
>4208	Identifier	psOptions
>4209	ExpressionStatement	 
>4210	AssignmentExpr	pBandData = ( ( GByte * ) pDstBuffer ) + iBand * nBandSize
>4211	AdditiveExpression	( ( GByte * ) pDstBuffer ) + iBand * nBandSize
>4212	MultiplicativeExpression	iBand * nBandSize
>4213	Identifier	nBandSize
>4214	Identifier	iBand
>4215	CastExpression	( GByte * ) pDstBuffer
>4216	Identifier	pDstBuffer
>4217	CastTarget	GByte *
>4218	Identifier	pBandData
>4219	IfStatement	if ( EQUAL ( pszBandInit , \"NO_DATA\" ) && psOptions -> padfDstNoDataReal != NULL )
>4220	ElseStatement	else
>4221	CompoundStatement	 
>4222	ExpressionStatement	 
>4223	CallExpression	CPLStringToComplex ( pszBandInit , adfInitRealImag + 0 , adfInitRealImag + 1 )
>4224	ArgumentList	pszBandInit
>4225	Argument	adfInitRealImag + 1
>4226	AdditiveExpression	adfInitRealImag + 1
>4227	PrimaryExpression	1
>4228	Identifier	adfInitRealImag
>4229	Argument	adfInitRealImag + 0
>4230	AdditiveExpression	adfInitRealImag + 0
>4231	PrimaryExpression	0
>4232	Identifier	adfInitRealImag
>4233	Argument	pszBandInit
>4234	Identifier	pszBandInit
>4235	Callee	CPLStringToComplex
>4236	Identifier	CPLStringToComplex
>4237	CompoundStatement	 
>4238	ExpressionStatement	 
>4239	AssignmentExpr	adfInitRealImag [ 1 ] = psOptions -> padfDstNoDataImag [ iBand ]
>4240	ArrayIndexing	psOptions -> padfDstNoDataImag [ iBand ]
>4241	Identifier	iBand
>4242	PtrMemberAccess	psOptions -> padfDstNoDataImag
>4243	Identifier	padfDstNoDataImag
>4244	Identifier	psOptions
>4245	ArrayIndexing	adfInitRealImag [ 1 ]
>4246	PrimaryExpression	1
>4247	Identifier	adfInitRealImag
>4248	ExpressionStatement	 
>4249	AssignmentExpr	adfInitRealImag [ 0 ] = psOptions -> padfDstNoDataReal [ iBand ]
>4250	ArrayIndexing	psOptions -> padfDstNoDataReal [ iBand ]
>4251	Identifier	iBand
>4252	PtrMemberAccess	psOptions -> padfDstNoDataReal
>4253	Identifier	padfDstNoDataReal
>4254	Identifier	psOptions
>4255	ArrayIndexing	adfInitRealImag [ 0 ]
>4256	PrimaryExpression	0
>4257	Identifier	adfInitRealImag
>4258	Condition	 
>4259	AndExpression	EQUAL ( pszBandInit , \"NO_DATA\" ) && psOptions -> padfDstNoDataReal != NULL
>4260	EqualityExpression	psOptions -> padfDstNoDataReal != NULL
>4261	Identifier	NULL
>4262	PtrMemberAccess	psOptions -> padfDstNoDataReal
>4263	Identifier	padfDstNoDataReal
>4264	Identifier	psOptions
>4265	CallExpression	EQUAL ( pszBandInit , \"NO_DATA\" )
>4266	ArgumentList	pszBandInit
>4267	Argument	\"NO_DATA\"
>4268	PrimaryExpression	\"NO_DATA\"
>4269	Argument	pszBandInit
>4270	Identifier	pszBandInit
>4271	Callee	EQUAL
>4272	Identifier	EQUAL
>4273	IdentifierDeclStatement	 
>4274	IdentifierDecl	* pszBandInit = papszInitValues [ MIN ( iBand , nInitCount - 1 ) ]
>4275	AssignmentExpr	* pszBandInit = papszInitValues [ MIN ( iBand , nInitCount - 1 ) ]
>4276	ArrayIndexing	papszInitValues [ MIN ( iBand , nInitCount - 1 ) ]
>4277	CallExpression	MIN ( iBand , nInitCount - 1 )
>4278	ArgumentList	iBand
>4279	Argument	nInitCount - 1
>4280	AdditiveExpression	nInitCount - 1
>4281	PrimaryExpression	1
>4282	Identifier	nInitCount
>4283	Argument	iBand
>4284	Identifier	iBand
>4285	Callee	MIN
>4286	Identifier	MIN
>4287	Identifier	papszInitValues
>4288	Identifier	pszBandInit
>4289	Identifier	pszBandInit
>4290	IdentifierDeclType	const char *
>4291	IdentifierDeclStatement	 
>4292	IdentifierDecl	* pBandData
>4293	Identifier	pBandData
>4294	IdentifierDeclType	GByte *
>4295	IdentifierDeclStatement	 
>4296	IdentifierDecl	adfInitRealImag [ 2 ]
>4297	PrimaryExpression	2
>4298	Identifier	adfInitRealImag
>4299	IdentifierDeclType	double [ 2 ]
>4300	IncDecOp	 
>4301	IncDec	++
>4302	Identifier	iBand
>4303	Condition	 
>4304	RelationalExpression	iBand < psOptions -> nBandCount
>4305	PtrMemberAccess	psOptions -> nBandCount
>4306	Identifier	nBandCount
>4307	Identifier	psOptions
>4308	Identifier	iBand
>4309	ForInit	 
>4310	AssignmentExpr	iBand = 0
>4311	PrimaryExpression	0
>4312	Identifier	iBand
>4313	IdentifierDeclStatement	 
>4314	IdentifierDecl	nInitCount = CSLCount ( papszInitValues )
>4315	AssignmentExpr	nInitCount = CSLCount ( papszInitValues )
>4316	CallExpression	CSLCount ( papszInitValues )
>4317	ArgumentList	papszInitValues
>4318	Argument	papszInitValues
>4319	Identifier	papszInitValues
>4320	Callee	CSLCount
>4321	Identifier	CSLCount
>4322	Identifier	nInitCount
>4323	Identifier	nInitCount
>4324	IdentifierDeclType	int
>4325	IdentifierDeclStatement	 
>4326	IdentifierDecl	* * papszInitValues = CSLTokenizeStringComplex ( pszInitDest , \",\" , FALSE , FALSE )
>4327	AssignmentExpr	* * papszInitValues = CSLTokenizeStringComplex ( pszInitDest , \",\" , FALSE , FALSE )
>4328	CallExpression	CSLTokenizeStringComplex ( pszInitDest , \",\" , FALSE , FALSE )
>4329	ArgumentList	pszInitDest
>4330	Argument	FALSE
>4331	Identifier	FALSE
>4332	Argument	FALSE
>4333	Identifier	FALSE
>4334	Argument	\",\"
>4335	PrimaryExpression	\",\"
>4336	Argument	pszInitDest
>4337	Identifier	pszInitDest
>4338	Callee	CSLTokenizeStringComplex
>4339	Identifier	CSLTokenizeStringComplex
>4340	Identifier	papszInitValues
>4341	Identifier	papszInitValues
>4342	IdentifierDeclType	char * *
>4343	Condition	 
>4344	AndExpression	pszInitDest != NULL && ! EQUAL ( pszInitDest , \"\" )
>4345	UnaryOp	! EQUAL ( pszInitDest , \"\" )
>4346	CallExpression	EQUAL ( pszInitDest , \"\" )
>4347	ArgumentList	pszInitDest
>4348	Argument	\"\"
>4349	PrimaryExpression	\"\"
>4350	Argument	pszInitDest
>4351	Identifier	pszInitDest
>4352	Callee	EQUAL
>4353	Identifier	EQUAL
>4354	UnaryOperator	!
>4355	EqualityExpression	pszInitDest != NULL
>4356	Identifier	NULL
>4357	Identifier	pszInitDest
>4358	IdentifierDeclStatement	 
>4359	IdentifierDecl	* pszInitDest = CSLFetchNameValue ( psOptions -> papszWarpOptions , \"INIT_DEST\" )
>4360	AssignmentExpr	* pszInitDest = CSLFetchNameValue ( psOptions -> papszWarpOptions , \"INIT_DEST\" )
>4361	CallExpression	CSLFetchNameValue ( psOptions -> papszWarpOptions , \"INIT_DEST\" )
>4362	ArgumentList	psOptions -> papszWarpOptions
>4363	Argument	\"INIT_DEST\"
>4364	PrimaryExpression	\"INIT_DEST\"
>4365	Argument	psOptions -> papszWarpOptions
>4366	PtrMemberAccess	psOptions -> papszWarpOptions
>4367	Identifier	papszWarpOptions
>4368	Identifier	psOptions
>4369	Callee	CSLFetchNameValue
>4370	Identifier	CSLFetchNameValue
>4371	Identifier	pszInitDest
>4372	Identifier	pszInitDest
>4373	IdentifierDeclType	const char *
>4374	IfStatement	if ( pDstBuffer == NULL )
>4375	CompoundStatement	 
>4376	ReturnStatement	 
>4377	Identifier	CE_Failure
>4378	ExpressionStatement	 
>4379	CallExpression	CPLError ( CE_Failure , CPLE_OutOfMemory , \"Out of memory allocating %d byte destination buffer.\" , nBandSize * \
>4380	ArgumentList	CE_Failure
>4381	Argument	nBandSize * psOptions -> nBandCount
>4382	MultiplicativeExpression	nBandSize * psOptions -> nBandCount
>4383	PtrMemberAccess	psOptions -> nBandCount
>4384	Identifier	nBandCount
>4385	Identifier	psOptions
>4386	Identifier	nBandSize
>4387	Argument	\"Out of memory allocating %d byte destination buffer.\"
>4388	PrimaryExpression	\"Out of memory allocating %d byte destination buffer.\"
>4389	Argument	CPLE_OutOfMemory
>4390	Identifier	CPLE_OutOfMemory
>4391	Argument	CE_Failure
>4392	Identifier	CE_Failure
>4393	Callee	CPLError
>4394	Identifier	CPLError
>4395	Condition	 
>4396	EqualityExpression	pDstBuffer == NULL
>4397	Identifier	NULL
>4398	Identifier	pDstBuffer
>4399	ExpressionStatement	 
>4400	AssignmentExpr	pDstBuffer = VSIMalloc ( nBandSize * psOptions -> nBandCount )
>4401	CallExpression	VSIMalloc ( nBandSize * psOptions -> nBandCount )
>4402	ArgumentList	nBandSize * psOptions -> nBandCount
>4403	Argument	nBandSize * psOptions -> nBandCount
>4404	MultiplicativeExpression	nBandSize * psOptions -> nBandCount
>4405	PtrMemberAccess	psOptions -> nBandCount
>4406	Identifier	nBandCount
>4407	Identifier	psOptions
>4408	Identifier	nBandSize
>4409	Callee	VSIMalloc
>4410	Identifier	VSIMalloc
>4411	Identifier	pDstBuffer
>4412	IfStatement	if ( nDstXSize > INT_MAX / nDstYSize || nDstXSize * nDstYSize > INT_MAX / ( nWordSize * psOptions -> nBandCount ) )
>4413	CompoundStatement	 
>4414	ReturnStatement	 
>4415	Identifier	CE_Failure
>4416	ExpressionStatement	 
>4417	CallExpression	CPLError ( CE_Failure , CPLE_AppDefined , \"Integer overflow 
>4418	ArgumentList	CE_Failure
>4419	Argument	nDstYSize
>4420	Identifier	nDstYSize
>4421	Argument	nDstXSize
>4422	Identifier	nDstXSize
>4423	Argument	\"Integer overflow 
>4424	PrimaryExpression	\"Integer overflow 
>4425	Argument	CPLE_AppDefined
>4426	Identifier	CPLE_AppDefined
>4427	Argument	CE_Failure
>4428	Identifier	CE_Failure
>4429	Callee	CPLError
>4430	Identifier	CPLError
>4431	Condition	 
>4432	OrExpression	nDstXSize > INT_MAX / nDstYSize || nDstXSize * nDstYSize > INT_MAX / ( nWordSize * psOptions -> nBandCount )
>4433	RelationalExpression	nDstXSize * nDstYSize > INT_MAX / ( nWordSize * psOptions -> nBandCount )
>4434	MultiplicativeExpression	INT_MAX / ( nWordSize * psOptions -> nBandCount )
>4435	MultiplicativeExpression	nWordSize * psOptions -> nBandCount
>4436	PtrMemberAccess	psOptions -> nBandCount
>4437	Identifier	nBandCount
>4438	Identifier	psOptions
>4439	Identifier	nWordSize
>4440	Identifier	INT_MAX
>4441	MultiplicativeExpression	nDstXSize * nDstYSize
>4442	Identifier	nDstYSize
>4443	Identifier	nDstXSize
>4444	RelationalExpression	nDstXSize > INT_MAX / nDstYSize
>4445	MultiplicativeExpression	INT_MAX / nDstYSize
>4446	Identifier	nDstYSize
>4447	Identifier	INT_MAX
>4448	Identifier	nDstXSize
>4449	IdentifierDeclStatement	 
>4450	IdentifierDecl	nBandSize = nWordSize * nDstXSize * nDstYSize
>4451	AssignmentExpr	nBandSize = nWordSize * nDstXSize * nDstYSize
>4452	MultiplicativeExpression	nWordSize * nDstXSize * nDstYSize
>4453	MultiplicativeExpression	nDstXSize * nDstYSize
>4454	Identifier	nDstYSize
>4455	Identifier	nDstXSize
>4456	Identifier	nWordSize
>4457	Identifier	nBandSize
>4458	Identifier	nBandSize
>4459	IdentifierDeclType	int
>4460	IdentifierDeclStatement	 
>4461	IdentifierDecl	nWordSize = GDALGetDataTypeSize ( psOptions -> eWorkingDataType ) / 8
>4462	AssignmentExpr	nWordSize = GDALGetDataTypeSize ( psOptions -> eWorkingDataType ) / 8
>4463	MultiplicativeExpression	GDALGetDataTypeSize ( psOptions -> eWorkingDataType ) / 8
>4464	PrimaryExpression	8
>4465	CallExpression	GDALGetDataTypeSize ( psOptions -> eWorkingDataType )
>4466	ArgumentList	psOptions -> eWorkingDataType
>4467	Argument	psOptions -> eWorkingDataType
>4468	PtrMemberAccess	psOptions -> eWorkingDataType
>4469	Identifier	eWorkingDataType
>4470	Identifier	psOptions
>4471	Callee	GDALGetDataTypeSize
>4472	Identifier	GDALGetDataTypeSize
>4473	Identifier	nWordSize
>4474	Identifier	nWordSize
>4475	IdentifierDeclType	int
>4476	IdentifierDeclStatement	 
>4477	IdentifierDecl	* pDstBuffer
>4478	Identifier	pDstBuffer
>4479	IdentifierDeclType	void *
>4480	ExpressionStatement	 
>4481	CallExpression	ReportTiming ( NULL )
>4482	ArgumentList	NULL
>4483	Argument	NULL
>4484	Identifier	NULL
>4485	Callee	ReportTiming
>4486	Identifier	ReportTiming
>4487	IdentifierDeclStatement	 
>4488	IdentifierDecl	iBand
>4489	Identifier	iBand
>4490	IdentifierDeclType	int
>4491	IdentifierDeclStatement	 
>4492	IdentifierDecl	eErr
>4493	Identifier	eErr
>4494	IdentifierDeclType	CPLErr
>4566	FunctionDef	GDALWarpRegion (GDALWarpOperationH hOperation , int nDstXOff , int nDstYOff , int nDstXSize , int nDstYSize , int \
>4567	ParameterList	GDALWarpOperationH hOperation , int nDstXOff , int nDstYOff , int nDstXSize , int nDstYSize , int nSrcXOff , int \
>4568	Parameter	 
>4569	Identifier	nSrcYSize
>4570	ParameterType	int
>4571	Parameter	 
>4572	Identifier	nSrcXSize
>4573	ParameterType	int
>4574	Parameter	 
>4575	Identifier	nSrcYOff
>4576	ParameterType	int
>4577	Parameter	 
>4578	Identifier	nSrcXOff
>4579	ParameterType	int
>4580	Parameter	 
>4581	Identifier	nDstYSize
>4582	ParameterType	int
>4583	Parameter	 
>4584	Identifier	nDstXSize
>4585	ParameterType	int
>4586	Parameter	 
>4587	Identifier	nDstYOff
>4588	ParameterType	int
>4589	Parameter	 
>4590	Identifier	nDstXOff
>4591	ParameterType	int
>4592	Parameter	 
>4593	Identifier	hOperation
>4594	ParameterType	GDALWarpOperationH
>4595	ReturnType	CPLErr
>4596	CompoundStatement	 
>4597	ReturnStatement	 
>4598	CallExpression	( ( GDALWarpOperation * ) hOperation ) -> WarpRegion ( nDstXOff , nDstYOff , nDstXSize , nDstYSize , nSrcXOff , \
>4599	ArgumentList	nDstXOff
>4600	Argument	nSrcYSize
>4601	Identifier	nSrcYSize
>4602	Argument	nSrcXSize
>4603	Identifier	nSrcXSize
>4604	Argument	nSrcYOff
>4605	Identifier	nSrcYOff
>4606	Argument	nSrcXOff
>4607	Identifier	nSrcXOff
>4608	Argument	nDstYSize
>4609	Identifier	nDstYSize
>4610	Argument	nDstXSize
>4611	Identifier	nDstXSize
>4612	Argument	nDstYOff
>4613	Identifier	nDstYOff
>4614	Argument	nDstXOff
>4615	Identifier	nDstXOff
>4616	Callee	( ( GDALWarpOperation * ) hOperation ) -> WarpRegion
>4617	PtrMemberAccess	( ( GDALWarpOperation * ) hOperation ) -> WarpRegion
>4618	Identifier	WarpRegion
>4619	CastExpression	( GDALWarpOperation * ) hOperation
>4620	Identifier	hOperation
>4621	CastTarget	GDALWarpOperation *
>4622	ExpressionStatement	 
>4623	CallExpression	VALIDATE_POINTER1 ( hOperation , \"GDALWarpRegion\" , CE_Failure )
>4624	ArgumentList	hOperation
>4625	Argument	CE_Failure
>4626	Identifier	CE_Failure
>4627	Argument	\"GDALWarpRegion\"
>4628	PrimaryExpression	\"GDALWarpRegion\"
>4629	Argument	hOperation
>4630	Identifier	hOperation
>4631	Callee	VALIDATE_POINTER1
>4632	Identifier	VALIDATE_POINTER1
>4648	FunctionDef	GDALWarpOperation 
>4649	ParameterList	int nDstXOff , int nDstYOff , int nDstXSize , int nDstYSize , void * pDataBuf , GDALDataType eBufDataType , int \
>4650	Parameter	 
>4651	Identifier	dfProgressScale
>4652	ParameterType	double
>4653	Parameter	 
>4654	Identifier	dfProgressBase
>4655	ParameterType	double
>4656	Parameter	 
>4657	Identifier	nSrcYSize
>4658	ParameterType	int
>4659	Parameter	 
>4660	Identifier	nSrcXSize
>4661	ParameterType	int
>4662	Parameter	 
>4663	Identifier	nSrcYOff
>4664	ParameterType	int
>4665	Parameter	 
>4666	Identifier	nSrcXOff
>4667	ParameterType	int
>4668	Parameter	 
>4669	Identifier	eBufDataType
>4670	ParameterType	GDALDataType
>4671	Parameter	 
>4672	Identifier	pDataBuf
>4673	ParameterType	void *
>4674	Parameter	 
>4675	Identifier	nDstYSize
>4676	ParameterType	int
>4677	Parameter	 
>4678	Identifier	nDstXSize
>4679	ParameterType	int
>4680	Parameter	 
>4681	Identifier	nDstYOff
>4682	ParameterType	int
>4683	Parameter	 
>4684	Identifier	nDstXOff
>4685	ParameterType	int
>4686	ReturnType	CPLErr
>4687	CompoundStatement	 
>4688	ReturnStatement	 
>4689	Identifier	eErr
>4690	ExpressionStatement	 
>4691	CallExpression	CPLFree ( oWK . pafDstDensity )
>4692	ArgumentList	oWK . pafDstDensity
>4693	Argument	oWK . pafDstDensity
>4694	MemberAccess	oWK . pafDstDensity
>4695	Identifier	pafDstDensity
>4696	Identifier	oWK
>4697	Callee	CPLFree
>4698	Identifier	CPLFree
>4699	ExpressionStatement	 
>4700	CallExpression	CPLFree ( oWK . panDstValid )
>4701	ArgumentList	oWK . panDstValid
>4702	Argument	oWK . panDstValid
>4703	MemberAccess	oWK . panDstValid
>4704	Identifier	panDstValid
>4705	Identifier	oWK
>4706	Callee	CPLFree
>4707	Identifier	CPLFree
>4708	ExpressionStatement	 
>4709	CallExpression	CPLFree ( oWK . pafUnifiedSrcDensity )
>4710	ArgumentList	oWK . pafUnifiedSrcDensity
>4711	Argument	oWK . pafUnifiedSrcDensity
>4712	MemberAccess	oWK . pafUnifiedSrcDensity
>4713	Identifier	pafUnifiedSrcDensity
>4714	Identifier	oWK
>4715	Callee	CPLFree
>4716	Identifier	CPLFree
>4717	ExpressionStatement	 
>4718	CallExpression	CPLFree ( oWK . panUnifiedSrcValid )
>4719	ArgumentList	oWK . panUnifiedSrcValid
>4720	Argument	oWK . panUnifiedSrcValid
>4721	MemberAccess	oWK . panUnifiedSrcValid
>4722	Identifier	panUnifiedSrcValid
>4723	Identifier	oWK
>4724	Callee	CPLFree
>4725	Identifier	CPLFree
>4726	IfStatement	if ( oWK . papanBandSrcValid != NULL )
>4727	CompoundStatement	 
>4728	ExpressionStatement	 
>4729	CallExpression	CPLFree ( oWK . papanBandSrcValid )
>4730	ArgumentList	oWK . papanBandSrcValid
>4731	Argument	oWK . papanBandSrcValid
>4732	MemberAccess	oWK . papanBandSrcValid
>4733	Identifier	papanBandSrcValid
>4734	Identifier	oWK
>4735	Callee	CPLFree
>4736	Identifier	CPLFree
>4737	ForStatement	for ( i = 0 ; i < oWK . nBands ; i ++ )
>4738	ExpressionStatement	 
>4739	CallExpression	CPLFree ( oWK . papanBandSrcValid [ i ] )
>4740	ArgumentList	oWK . papanBandSrcValid [ i ]
>4741	Argument	oWK . papanBandSrcValid [ i ]
>4742	ArrayIndexing	oWK . papanBandSrcValid [ i ]
>4743	Identifier	i
>4744	MemberAccess	oWK . papanBandSrcValid
>4745	Identifier	papanBandSrcValid
>4746	Identifier	oWK
>4747	Callee	CPLFree
>4748	Identifier	CPLFree
>4749	IncDecOp	 
>4750	IncDec	++
>4751	Identifier	i
>4752	Condition	 
>4753	RelationalExpression	i < oWK . nBands
>4754	MemberAccess	oWK . nBands
>4755	Identifier	nBands
>4756	Identifier	oWK
>4757	Identifier	i
>4758	ForInit	 
>4759	AssignmentExpr	i = 0
>4760	PrimaryExpression	0
>4761	Identifier	i
>4762	Condition	 
>4763	EqualityExpression	oWK . papanBandSrcValid != NULL
>4764	Identifier	NULL
>4765	MemberAccess	oWK . papanBandSrcValid
>4766	Identifier	papanBandSrcValid
>4767	Identifier	oWK
>4768	ExpressionStatement	 
>4769	CallExpression	CPLFree ( oWK . papabyDstImage )
>4770	ArgumentList	oWK . papabyDstImage
>4771	Argument	oWK . papabyDstImage
>4772	MemberAccess	oWK . papabyDstImage
>4773	Identifier	papabyDstImage
>4774	Identifier	oWK
>4775	Callee	CPLFree
>4776	Identifier	CPLFree
>4777	ExpressionStatement	 
>4778	CallExpression	CPLFree ( oWK . papabySrcImage )
>4779	ArgumentList	oWK . papabySrcImage
>4780	Argument	oWK . papabySrcImage
>4781	MemberAccess	oWK . papabySrcImage
>4782	Identifier	papabySrcImage
>4783	Identifier	oWK
>4784	Callee	CPLFree
>4785	Identifier	CPLFree
>4786	ExpressionStatement	 
>4787	CallExpression	CPLFree ( oWK . papabySrcImage [ 0 ] )
>4788	ArgumentList	oWK . papabySrcImage [ 0 ]
>4789	Argument	oWK . papabySrcImage [ 0 ]
>4790	ArrayIndexing	oWK . papabySrcImage [ 0 ]
>4791	PrimaryExpression	0
>4792	MemberAccess	oWK . papabySrcImage
>4793	Identifier	papabySrcImage
>4794	Identifier	oWK
>4795	Callee	CPLFree
>4796	Identifier	CPLFree
>4797	IfStatement	if ( eErr == CE_None && psOptions -> nDstAlphaBand > 0 )
>4798	CompoundStatement	 
>4799	ExpressionStatement	 
>4800	AssignmentExpr	eErr = GDALWarpDstAlphaMasker ( psOptions , - psOptions -> nBandCount , psOptions -> eWorkingDataType , \
>4801	CallExpression	GDALWarpDstAlphaMasker ( psOptions , - psOptions -> nBandCount , psOptions -> eWorkingDataType , oWK . nDstXOff , \
>4802	ArgumentList	psOptions
>4803	Argument	oWK . pafDstDensity
>4804	MemberAccess	oWK . pafDstDensity
>4805	Identifier	pafDstDensity
>4806	Identifier	oWK
>4807	Argument	TRUE
>4808	Identifier	TRUE
>4809	Argument	oWK . papabyDstImage
>4810	MemberAccess	oWK . papabyDstImage
>4811	Identifier	papabyDstImage
>4812	Identifier	oWK
>4813	Argument	oWK . nDstYSize
>4814	MemberAccess	oWK . nDstYSize
>4815	Identifier	nDstYSize
>4816	Identifier	oWK
>4817	Argument	oWK . nDstXSize
>4818	MemberAccess	oWK . nDstXSize
>4819	Identifier	nDstXSize
>4820	Identifier	oWK
>4821	Argument	oWK . nDstYOff
>4822	MemberAccess	oWK . nDstYOff
>4823	Identifier	nDstYOff
>4824	Identifier	oWK
>4825	Argument	oWK . nDstXOff
>4826	MemberAccess	oWK . nDstXOff
>4827	Identifier	nDstXOff
>4828	Identifier	oWK
>4829	Argument	psOptions -> eWorkingDataType
>4830	PtrMemberAccess	psOptions -> eWorkingDataType
>4831	Identifier	eWorkingDataType
>4832	Identifier	psOptions
>4833	Argument	- psOptions -> nBandCount
>4834	UnaryOp	- psOptions -> nBandCount
>4835	PtrMemberAccess	psOptions -> nBandCount
>4836	Identifier	nBandCount
>4837	Identifier	psOptions
>4838	UnaryOperator	-
>4839	Argument	psOptions
>4840	Identifier	psOptions
>4841	Callee	GDALWarpDstAlphaMasker
>4842	Identifier	GDALWarpDstAlphaMasker
>4843	Identifier	eErr
>4844	Condition	 
>4845	AndExpression	eErr == CE_None && psOptions -> nDstAlphaBand > 0
>4846	RelationalExpression	psOptions -> nDstAlphaBand > 0
>4847	PrimaryExpression	0
>4848	PtrMemberAccess	psOptions -> nDstAlphaBand
>4849	Identifier	nDstAlphaBand
>4850	Identifier	psOptions
>4851	EqualityExpression	eErr == CE_None
>4852	Identifier	CE_None
>4853	Identifier	eErr
>4854	IfStatement	if ( hIOMutex != NULL )
>4855	CompoundStatement	 
>4856	IfStatement	if ( ! CPLAcquireMutex ( hIOMutex , 600.0 ) )
>4857	CompoundStatement	 
>4858	ReturnStatement	 
>4859	Identifier	CE_Failure
>4860	ExpressionStatement	 
>4861	CallExpression	CPLError ( CE_Failure , CPLE_AppDefined , \"Failed to acquire IOMutex in WarpRegion().\" )
>4862	ArgumentList	CE_Failure
>4863	Argument	\"Failed to acquire IOMutex in WarpRegion().\"
>4864	PrimaryExpression	\"Failed to acquire IOMutex in WarpRegion().\"
>4865	Argument	CPLE_AppDefined
>4866	Identifier	CPLE_AppDefined
>4867	Argument	CE_Failure
>4868	Identifier	CE_Failure
>4869	Callee	CPLError
>4870	Identifier	CPLError
>4871	Condition	 
>4872	UnaryOp	! CPLAcquireMutex ( hIOMutex , 600.0 )
>4873	CallExpression	CPLAcquireMutex ( hIOMutex , 600.0 )
>4874	ArgumentList	hIOMutex
>4875	Argument	600.0
>4876	PrimaryExpression	600.0
>4877	Argument	hIOMutex
>4878	Identifier	hIOMutex
>4879	Callee	CPLAcquireMutex
>4880	Identifier	CPLAcquireMutex
>4881	UnaryOperator	!
>4882	ExpressionStatement	 
>4883	CallExpression	CPLReleaseMutex ( hWarpMutex )
>4884	ArgumentList	hWarpMutex
>4885	Argument	hWarpMutex
>4886	Identifier	hWarpMutex
>4887	Callee	CPLReleaseMutex
>4888	Identifier	CPLReleaseMutex
>4889	Condition	 
>4890	EqualityExpression	hIOMutex != NULL
>4891	Identifier	NULL
>4892	Identifier	hIOMutex
>4893	IfStatement	if ( eErr == CE_None && psOptions -> pfnPostWarpChunkProcessor != NULL )
>4894	ExpressionStatement	 
>4895	AssignmentExpr	eErr = psOptions -> pfnPostWarpChunkProcessor ( ( void * ) & oWK , psOptions -> pPostWarpProcessorArg )
>4896	CallExpression	psOptions -> pfnPostWarpChunkProcessor ( ( void * ) & oWK , psOptions -> pPostWarpProcessorArg )
>4897	ArgumentList	( void * ) & oWK
>4898	Argument	psOptions -> pPostWarpProcessorArg
>4899	PtrMemberAccess	psOptions -> pPostWarpProcessorArg
>4900	Identifier	pPostWarpProcessorArg
>4901	Identifier	psOptions
>4902	Argument	( void * ) & oWK
>4903	CastExpression	( void * ) & oWK
>4904	UnaryOp	& oWK
>4905	Identifier	oWK
>4906	UnaryOperator	&
>4907	CastTarget	void *
>4908	Callee	psOptions -> pfnPostWarpChunkProcessor
>4909	PtrMemberAccess	psOptions -> pfnPostWarpChunkProcessor
>4910	Identifier	pfnPostWarpChunkProcessor
>4911	Identifier	psOptions
>4912	Identifier	eErr
>4913	Condition	 
>4914	AndExpression	eErr == CE_None && psOptions -> pfnPostWarpChunkProcessor != NULL
>4915	EqualityExpression	psOptions -> pfnPostWarpChunkProcessor != NULL
>4916	Identifier	NULL
>4917	PtrMemberAccess	psOptions -> pfnPostWarpChunkProcessor
>4918	Identifier	pfnPostWarpChunkProcessor
>4919	Identifier	psOptions
>4920	EqualityExpression	eErr == CE_None
>4921	Identifier	CE_None
>4922	Identifier	eErr
>4923	IfStatement	if ( eErr == CE_None )
>4924	CompoundStatement	 
>4925	ExpressionStatement	 
>4926	CallExpression	ReportTiming ( \"In memory warp operation\" )
>4927	ArgumentList	\"In memory warp operation\"
>4928	Argument	\"In memory warp operation\"
>4929	PrimaryExpression	\"In memory warp operation\"
>4930	Callee	ReportTiming
>4931	Identifier	ReportTiming
>4932	ExpressionStatement	 
>4933	AssignmentExpr	eErr = oWK . PerformWarp ( )
>4934	CallExpression	oWK . PerformWarp ( )
>4935	ArgumentList	 
>4936	Callee	oWK . PerformWarp
>4937	MemberAccess	oWK . PerformWarp
>4938	Identifier	PerformWarp
>4939	Identifier	oWK
>4940	Identifier	eErr
>4941	Condition	 
>4942	EqualityExpression	eErr == CE_None
>4943	Identifier	CE_None
>4944	Identifier	eErr
>4945	IfStatement	if ( eErr == CE_None && psOptions -> pfnPreWarpChunkProcessor != NULL )
>4946	ExpressionStatement	 
>4947	AssignmentExpr	eErr = psOptions -> pfnPreWarpChunkProcessor ( ( void * ) & oWK , psOptions -> pPreWarpProcessorArg )
>4948	CallExpression	psOptions -> pfnPreWarpChunkProcessor ( ( void * ) & oWK , psOptions -> pPreWarpProcessorArg )
>4949	ArgumentList	( void * ) & oWK
>4950	Argument	psOptions -> pPreWarpProcessorArg
>4951	PtrMemberAccess	psOptions -> pPreWarpProcessorArg
>4952	Identifier	pPreWarpProcessorArg
>4953	Identifier	psOptions
>4954	Argument	( void * ) & oWK
>4955	CastExpression	( void * ) & oWK
>4956	UnaryOp	& oWK
>4957	Identifier	oWK
>4958	UnaryOperator	&
>4959	CastTarget	void *
>4960	Callee	psOptions -> pfnPreWarpChunkProcessor
>4961	PtrMemberAccess	psOptions -> pfnPreWarpChunkProcessor
>4962	Identifier	pfnPreWarpChunkProcessor
>4963	Identifier	psOptions
>4964	Identifier	eErr
>4965	Condition	 
>4966	AndExpression	eErr == CE_None && psOptions -> pfnPreWarpChunkProcessor != NULL
>4967	EqualityExpression	psOptions -> pfnPreWarpChunkProcessor != NULL
>4968	Identifier	NULL
>4969	PtrMemberAccess	psOptions -> pfnPreWarpChunkProcessor
>4970	Identifier	pfnPreWarpChunkProcessor
>4971	Identifier	psOptions
>4972	EqualityExpression	eErr == CE_None
>4973	Identifier	CE_None
>4974	Identifier	eErr
>4975	IfStatement	if ( hIOMutex != NULL )
>4976	CompoundStatement	 
>4977	IfStatement	if ( ! CPLAcquireMutex ( hWarpMutex , 600.0 ) )
>4978	CompoundStatement	 
>4979	ReturnStatement	 
>4980	Identifier	CE_Failure
>4981	ExpressionStatement	 
>4982	CallExpression	CPLError ( CE_Failure , CPLE_AppDefined , \"Failed to acquire WarpMutex in WarpRegion().\" )
>4983	ArgumentList	CE_Failure
>4984	Argument	\"Failed to acquire WarpMutex in WarpRegion().\"
>4985	PrimaryExpression	\"Failed to acquire WarpMutex in WarpRegion().\"
>4986	Argument	CPLE_AppDefined
>4987	Identifier	CPLE_AppDefined
>4988	Argument	CE_Failure
>4989	Identifier	CE_Failure
>4990	Callee	CPLError
>4991	Identifier	CPLError
>4992	Condition	 
>4993	UnaryOp	! CPLAcquireMutex ( hWarpMutex , 600.0 )
>4994	CallExpression	CPLAcquireMutex ( hWarpMutex , 600.0 )
>4995	ArgumentList	hWarpMutex
>4996	Argument	600.0
>4997	PrimaryExpression	600.0
>4998	Argument	hWarpMutex
>4999	Identifier	hWarpMutex
>5000	Callee	CPLAcquireMutex
>5001	Identifier	CPLAcquireMutex
>5002	UnaryOperator	!
>5003	ExpressionStatement	 
>5004	CallExpression	CPLReleaseMutex ( hIOMutex )
>5005	ArgumentList	hIOMutex
>5006	Argument	hIOMutex
>5007	Identifier	hIOMutex
>5008	Callee	CPLReleaseMutex
>5009	Identifier	CPLReleaseMutex
>5010	Condition	 
>5011	EqualityExpression	hIOMutex != NULL
>5012	Identifier	NULL
>5013	Identifier	hIOMutex
>5014	IfStatement	if ( eErr == CE_None && psOptions -> padfDstNoDataReal != NULL )
>5015	CompoundStatement	 
>5016	IfStatement	if ( eErr == CE_None && panBandMask != NULL )
>5017	CompoundStatement	 
>5018	ExpressionStatement	 
>5019	CallExpression	CPLFree ( panMergedMask )
>5020	ArgumentList	panMergedMask
>5021	Argument	panMergedMask
>5022	Identifier	panMergedMask
>5023	Callee	CPLFree
>5024	Identifier	CPLFree
>5025	ForStatement	for ( iWord = nMaskWords - 1 ; iWord >= 0 ; iWord -- )
>5026	ExpressionStatement	 
>5027	AssignmentExpr	oWK . panDstValid [ iWord ] &= panMergedMask [ iWord ]
>5028	ArrayIndexing	panMergedMask [ iWord ]
>5029	Identifier	iWord
>5030	Identifier	panMergedMask
>5031	ArrayIndexing	oWK . panDstValid [ iWord ]
>5032	Identifier	iWord
>5033	MemberAccess	oWK . panDstValid
>5034	Identifier	panDstValid
>5035	Identifier	oWK
>5036	IncDecOp	 
>5037	IncDec	--
>5038	Identifier	iWord
>5039	Condition	 
>5040	RelationalExpression	iWord >= 0
>5041	PrimaryExpression	0
>5042	Identifier	iWord
>5043	ForInit	 
>5044	AssignmentExpr	iWord = nMaskWords - 1
>5045	AdditiveExpression	nMaskWords - 1
>5046	PrimaryExpression	1
>5047	Identifier	nMaskWords
>5048	Identifier	iWord
>5049	ExpressionStatement	 
>5050	CallExpression	CPLFree ( panBandMask )
>5051	ArgumentList	panBandMask
>5052	Argument	panBandMask
>5053	Identifier	panBandMask
>5054	Callee	CPLFree
>5055	Identifier	CPLFree
>5056	ForStatement	for ( iBand = 0 ; iBand < psOptions -> nBandCount ; iBand ++ )
>5057	CompoundStatement	 
>5058	ForStatement	for ( iWord = nMaskWords - 1 ; iWord >= 0 ; iWord -- )
>5059	ExpressionStatement	 
>5060	AssignmentExpr	panMergedMask [ iWord ] |= panBandMask [ iWord ]
>5061	ArrayIndexing	panBandMask [ iWord ]
>5062	Identifier	iWord
>5063	Identifier	panBandMask
>5064	ArrayIndexing	panMergedMask [ iWord ]
>5065	Identifier	iWord
>5066	Identifier	panMergedMask
>5067	IncDecOp	 
>5068	IncDec	--
>5069	Identifier	iWord
>5070	Condition	 
>5071	RelationalExpression	iWord >= 0
>5072	PrimaryExpression	0
>5073	Identifier	iWord
>5074	ForInit	 
>5075	AssignmentExpr	iWord = nMaskWords - 1
>5076	AdditiveExpression	nMaskWords - 1
>5077	PrimaryExpression	1
>5078	Identifier	nMaskWords
>5079	Identifier	iWord
>5080	ExpressionStatement	 
>5081	AssignmentExpr	eErr = GDALWarpNoDataMasker ( adfNoData , 1 , psOptions -> eWorkingDataType , oWK . nDstXOff , oWK . \
>5082	CallExpression	GDALWarpNoDataMasker ( adfNoData , 1 , psOptions -> eWorkingDataType , oWK . nDstXOff , oWK . nDstYOff , oWK . nDstXSize , \
>5083	ArgumentList	adfNoData
>5084	Argument	panBandMask
>5085	Identifier	panBandMask
>5086	Argument	FALSE
>5087	Identifier	FALSE
>5088	Argument	oWK . papabyDstImage + iBand
>5089	AdditiveExpression	oWK . papabyDstImage + iBand
>5090	Identifier	iBand
>5091	MemberAccess	oWK . papabyDstImage
>5092	Identifier	papabyDstImage
>5093	Identifier	oWK
>5094	Argument	oWK . nDstYSize
>5095	MemberAccess	oWK . nDstYSize
>5096	Identifier	nDstYSize
>5097	Identifier	oWK
>5098	Argument	oWK . nDstXSize
>5099	MemberAccess	oWK . nDstXSize
>5100	Identifier	nDstXSize
>5101	Identifier	oWK
>5102	Argument	oWK . nDstYOff
>5103	MemberAccess	oWK . nDstYOff
>5104	Identifier	nDstYOff
>5105	Identifier	oWK
>5106	Argument	oWK . nDstXOff
>5107	MemberAccess	oWK . nDstXOff
>5108	Identifier	nDstXOff
>5109	Identifier	oWK
>5110	Argument	psOptions -> eWorkingDataType
>5111	PtrMemberAccess	psOptions -> eWorkingDataType
>5112	Identifier	eWorkingDataType
>5113	Identifier	psOptions
>5114	Argument	1
>5115	PrimaryExpression	1
>5116	Argument	adfNoData
>5117	Identifier	adfNoData
>5118	Callee	GDALWarpNoDataMasker
>5119	Identifier	GDALWarpNoDataMasker
>5120	Identifier	eErr
>5121	ExpressionStatement	 
>5122	AssignmentExpr	adfNoData [ 1 ] = psOptions -> padfDstNoDataImag [ iBand ]
>5123	ArrayIndexing	psOptions -> padfDstNoDataImag [ iBand ]
>5124	Identifier	iBand
>5125	PtrMemberAccess	psOptions -> padfDstNoDataImag
>5126	Identifier	padfDstNoDataImag
>5127	Identifier	psOptions
>5128	ArrayIndexing	adfNoData [ 1 ]
>5129	PrimaryExpression	1
>5130	Identifier	adfNoData
>5131	ExpressionStatement	 
>5132	AssignmentExpr	adfNoData [ 0 ] = psOptions -> padfDstNoDataReal [ iBand ]
>5133	ArrayIndexing	psOptions -> padfDstNoDataReal [ iBand ]
>5134	Identifier	iBand
>5135	PtrMemberAccess	psOptions -> padfDstNoDataReal
>5136	Identifier	padfDstNoDataReal
>5137	Identifier	psOptions
>5138	ArrayIndexing	adfNoData [ 0 ]
>5139	PrimaryExpression	0
>5140	Identifier	adfNoData
>5141	ExpressionStatement	 
>5142	CallExpression	memset ( panBandMask , 0xff , nMaskWords * 4 )
>5143	ArgumentList	panBandMask
>5144	Argument	nMaskWords * 4
>5145	MultiplicativeExpression	nMaskWords * 4
>5146	PrimaryExpression	4
>5147	Identifier	nMaskWords
>5148	Argument	0xff
>5149	PrimaryExpression	0xff
>5150	Argument	panBandMask
>5151	Identifier	panBandMask
>5152	Callee	memset
>5153	Identifier	memset
>5154	IdentifierDeclStatement	 
>5155	IdentifierDecl	adfNoData [ 2 ]
>5156	PrimaryExpression	2
>5157	Identifier	adfNoData
>5158	IdentifierDeclType	double [ 2 ]
>5159	IncDecOp	 
>5160	IncDec	++
>5161	Identifier	iBand
>5162	Condition	 
>5163	RelationalExpression	iBand < psOptions -> nBandCount
>5164	PtrMemberAccess	psOptions -> nBandCount
>5165	Identifier	nBandCount
>5166	Identifier	psOptions
>5167	Identifier	iBand
>5168	ForInit	 
>5169	AssignmentExpr	iBand = 0
>5170	PrimaryExpression	0
>5171	Identifier	iBand
>5172	IdentifierDeclStatement	 
>5173	IdentifierDecl	iWord
>5174	Identifier	iWord
>5175	IdentifierDeclType	int
>5176	IdentifierDecl	iBand
>5177	Identifier	iBand
>5178	IdentifierDeclType	int
>5179	Condition	 
>5180	AndExpression	eErr == CE_None && panBandMask != NULL
>5181	EqualityExpression	panBandMask != NULL
>5182	Identifier	NULL
>5183	Identifier	panBandMask
>5184	EqualityExpression	eErr == CE_None
>5185	Identifier	CE_None
>5186	Identifier	eErr
>5187	IfStatement	if ( eErr == CE_None )
>5188	CompoundStatement	 
>5189	ExpressionStatement	 
>5190	AssignmentExpr	panMergedMask = ( GUInt32 * ) CPLCalloc ( nMaskWords , 4 )
>5191	CastExpression	( GUInt32 * ) CPLCalloc ( nMaskWords , 4 )
>5192	CallExpression	CPLCalloc ( nMaskWords , 4 )
>5193	ArgumentList	nMaskWords
>5194	Argument	4
>5195	PrimaryExpression	4
>5196	Argument	nMaskWords
>5197	Identifier	nMaskWords
>5198	Callee	CPLCalloc
>5199	Identifier	CPLCalloc
>5200	CastTarget	GUInt32 *
>5201	Identifier	panMergedMask
>5202	ExpressionStatement	 
>5203	AssignmentExpr	panBandMask = ( GUInt32 * ) CPLMalloc ( nMaskWords * 4 )
>5204	CastExpression	( GUInt32 * ) CPLMalloc ( nMaskWords * 4 )
>5205	CallExpression	CPLMalloc ( nMaskWords * 4 )
>5206	ArgumentList	nMaskWords * 4
>5207	Argument	nMaskWords * 4
>5208	MultiplicativeExpression	nMaskWords * 4
>5209	PrimaryExpression	4
>5210	Identifier	nMaskWords
>5211	Callee	CPLMalloc
>5212	Identifier	CPLMalloc
>5213	CastTarget	GUInt32 *
>5214	Identifier	panBandMask
>5215	Condition	 
>5216	EqualityExpression	eErr == CE_None
>5217	Identifier	CE_None
>5218	Identifier	eErr
>5219	ExpressionStatement	 
>5220	AssignmentExpr	eErr = CreateKernelMask ( & oWK , 0 , \"DstValid\" )
>5221	CallExpression	CreateKernelMask ( & oWK , 0 , \"DstValid\" )
>5222	ArgumentList	& oWK
>5223	Argument	\"DstValid\"
>5224	PrimaryExpression	\"DstValid\"
>5225	Argument	0
>5226	PrimaryExpression	0
>5227	Argument	& oWK
>5228	UnaryOp	& oWK
>5229	Identifier	oWK
>5230	UnaryOperator	&
>5231	Callee	CreateKernelMask
>5232	Identifier	CreateKernelMask
>5233	Identifier	eErr
>5234	IdentifierDeclStatement	 
>5235	IdentifierDecl	nMaskWords = ( oWK . nDstXSize * oWK . nDstYSize + 31 ) / 32
>5236	AssignmentExpr	nMaskWords = ( oWK . nDstXSize * oWK . nDstYSize + 31 ) / 32
>5237	MultiplicativeExpression	( oWK . nDstXSize * oWK . nDstYSize + 31 ) / 32
>5238	PrimaryExpression	32
>5239	AdditiveExpression	oWK . nDstXSize * oWK . nDstYSize + 31
>5240	PrimaryExpression	31
>5241	MultiplicativeExpression	oWK . nDstXSize * oWK . nDstYSize
>5242	MemberAccess	oWK . nDstYSize
>5243	Identifier	nDstYSize
>5244	Identifier	oWK
>5245	MemberAccess	oWK . nDstXSize
>5246	Identifier	nDstXSize
>5247	Identifier	oWK
>5248	Identifier	nMaskWords
>5249	Identifier	nMaskWords
>5250	IdentifierDeclType	int
>5251	IdentifierDeclStatement	 
>5252	IdentifierDecl	* panMergedMask = NULL
>5253	AssignmentExpr	* panMergedMask = NULL
>5254	Identifier	NULL
>5255	Identifier	NULL
>5256	Identifier	panMergedMask
>5257	IdentifierDeclType	GUInt32 *
>5258	IdentifierDecl	* panBandMask = NULL
>5259	AssignmentExpr	* panBandMask = NULL
>5260	Identifier	NULL
>5261	Identifier	NULL
>5262	Identifier	panBandMask
>5263	IdentifierDeclType	GUInt32 *
>5264	Condition	 
>5265	AndExpression	eErr == CE_None && psOptions -> padfDstNoDataReal != NULL
>5266	EqualityExpression	psOptions -> padfDstNoDataReal != NULL
>5267	Identifier	NULL
>5268	PtrMemberAccess	psOptions -> padfDstNoDataReal
>5269	Identifier	padfDstNoDataReal
>5270	Identifier	psOptions
>5271	EqualityExpression	eErr == CE_None
>5272	Identifier	CE_None
>5273	Identifier	eErr
>5274	IfStatement	if ( eErr == CE_None && oWK . pafUnifiedSrcDensity == NULL && ( GDALGetMaskFlags ( hSrcBand ) & GMF_PER_DATASET ) && \
>5275	CompoundStatement	 
>5276	IfStatement	if ( eErr == CE_None )
>5277	ExpressionStatement	 
>5278	AssignmentExpr	eErr = GDALWarpSrcMaskMasker ( psOptions , psOptions -> nBandCount , psOptions -> eWorkingDataType , \
>5279	CallExpression	GDALWarpSrcMaskMasker ( psOptions , psOptions -> nBandCount , psOptions -> eWorkingDataType , oWK . nSrcXOff , oWK \
>5280	ArgumentList	psOptions
>5281	Argument	oWK . panUnifiedSrcValid
>5282	MemberAccess	oWK . panUnifiedSrcValid
>5283	Identifier	panUnifiedSrcValid
>5284	Identifier	oWK
>5285	Argument	FALSE
>5286	Identifier	FALSE
>5287	Argument	oWK . papabySrcImage
>5288	MemberAccess	oWK . papabySrcImage
>5289	Identifier	papabySrcImage
>5290	Identifier	oWK
>5291	Argument	oWK . nSrcYSize
>5292	MemberAccess	oWK . nSrcYSize
>5293	Identifier	nSrcYSize
>5294	Identifier	oWK
>5295	Argument	oWK . nSrcXSize
>5296	MemberAccess	oWK . nSrcXSize
>5297	Identifier	nSrcXSize
>5298	Identifier	oWK
>5299	Argument	oWK . nSrcYOff
>5300	MemberAccess	oWK . nSrcYOff
>5301	Identifier	nSrcYOff
>5302	Identifier	oWK
>5303	Argument	oWK . nSrcXOff
>5304	MemberAccess	oWK . nSrcXOff
>5305	Identifier	nSrcXOff
>5306	Identifier	oWK
>5307	Argument	psOptions -> eWorkingDataType
>5308	PtrMemberAccess	psOptions -> eWorkingDataType
>5309	Identifier	eWorkingDataType
>5310	Identifier	psOptions
>5311	Argument	psOptions -> nBandCount
>5312	PtrMemberAccess	psOptions -> nBandCount
>5313	Identifier	nBandCount
>5314	Identifier	psOptions
>5315	Argument	psOptions
>5316	Identifier	psOptions
>5317	Callee	GDALWarpSrcMaskMasker
>5318	Identifier	GDALWarpSrcMaskMasker
>5319	Identifier	eErr
>5320	Condition	 
>5321	EqualityExpression	eErr == CE_None
>5322	Identifier	CE_None
>5323	Identifier	eErr
>5324	ExpressionStatement	 
>5325	AssignmentExpr	eErr = CreateKernelMask ( & oWK , 0 , \"UnifiedSrcValid\" )
>5326	CallExpression	CreateKernelMask ( & oWK , 0 , \"UnifiedSrcValid\" )
>5327	ArgumentList	& oWK
>5328	Argument	\"UnifiedSrcValid\"
>5329	PrimaryExpression	\"UnifiedSrcValid\"
>5330	Argument	0
>5331	PrimaryExpression	0
>5332	Argument	& oWK
>5333	UnaryOp	& oWK
>5334	Identifier	oWK
>5335	UnaryOperator	&
>5336	Callee	CreateKernelMask
>5337	Identifier	CreateKernelMask
>5338	Identifier	eErr
>5339	Condition	 
>5340	AndExpression	eErr == CE_None && oWK . pafUnifiedSrcDensity == NULL && ( GDALGetMaskFlags ( hSrcBand ) & GMF_PER_DATASET ) && \
>5341	AndExpression	oWK . pafUnifiedSrcDensity == NULL && ( GDALGetMaskFlags ( hSrcBand ) & GMF_PER_DATASET ) && nSrcXSize > \
>5342	AndExpression	( GDALGetMaskFlags ( hSrcBand ) & GMF_PER_DATASET ) && nSrcXSize > 0 && nSrcYSize > 0
>5343	AndExpression	nSrcXSize > 0 && nSrcYSize > 0
>5344	RelationalExpression	nSrcYSize > 0
>5345	PrimaryExpression	0
>5346	Identifier	nSrcYSize
>5347	RelationalExpression	nSrcXSize > 0
>5348	PrimaryExpression	0
>5349	Identifier	nSrcXSize
>5350	BitAndExpression	GDALGetMaskFlags ( hSrcBand ) & GMF_PER_DATASET
>5351	Identifier	GMF_PER_DATASET
>5352	CallExpression	GDALGetMaskFlags ( hSrcBand )
>5353	ArgumentList	hSrcBand
>5354	Argument	hSrcBand
>5355	Identifier	hSrcBand
>5356	Callee	GDALGetMaskFlags
>5357	Identifier	GDALGetMaskFlags
>5358	EqualityExpression	oWK . pafUnifiedSrcDensity == NULL
>5359	Identifier	NULL
>5360	MemberAccess	oWK . pafUnifiedSrcDensity
>5361	Identifier	pafUnifiedSrcDensity
>5362	Identifier	oWK
>5363	EqualityExpression	eErr == CE_None
>5364	Identifier	CE_None
>5365	Identifier	eErr
>5366	IfStatement	if ( psOptions -> nBandCount > 0 )
>5367	ExpressionStatement	 
>5368	AssignmentExpr	hSrcBand = GDALGetRasterBand ( psOptions -> hSrcDS , psOptions -> panSrcBands [ 0 ] )
>5369	CallExpression	GDALGetRasterBand ( psOptions -> hSrcDS , psOptions -> panSrcBands [ 0 ] )
>5370	ArgumentList	psOptions -> hSrcDS
>5371	Argument	psOptions -> panSrcBands [ 0 ]
>5372	ArrayIndexing	psOptions -> panSrcBands [ 0 ]
>5373	PrimaryExpression	0
>5374	PtrMemberAccess	psOptions -> panSrcBands
>5375	Identifier	panSrcBands
>5376	Identifier	psOptions
>5377	Argument	psOptions -> hSrcDS
>5378	PtrMemberAccess	psOptions -> hSrcDS
>5379	Identifier	hSrcDS
>5380	Identifier	psOptions
>5381	Callee	GDALGetRasterBand
>5382	Identifier	GDALGetRasterBand
>5383	Identifier	hSrcBand
>5384	Condition	 
>5385	RelationalExpression	psOptions -> nBandCount > 0
>5386	PrimaryExpression	0
>5387	PtrMemberAccess	psOptions -> nBandCount
>5388	Identifier	nBandCount
>5389	Identifier	psOptions
>5390	IdentifierDeclStatement	 
>5391	IdentifierDecl	hSrcBand = NULL
>5392	AssignmentExpr	hSrcBand = NULL
>5393	Identifier	NULL
>5394	Identifier	NULL
>5395	Identifier	hSrcBand
>5396	IdentifierDeclType	GDALRasterBandH
>5397	IfStatement	if ( eErr == CE_None && psOptions -> padfSrcNoDataReal != NULL && nSrcXSize > 0 && nSrcYSize > 0 )
>5398	CompoundStatement	 
>5399	IfStatement	if ( CSLFetchBoolean ( psOptions -> papszWarpOptions , \"UNIFIED_SRC_NODATA\" , FALSE ) && eErr == CE_None )
>5400	CompoundStatement	 
>5401	ExpressionStatement	 
>5402	AssignmentExpr	oWK . papanBandSrcValid = NULL
>5403	Identifier	NULL
>5404	MemberAccess	oWK . papanBandSrcValid
>5405	Identifier	papanBandSrcValid
>5406	Identifier	oWK
>5407	ExpressionStatement	 
>5408	CallExpression	CPLFree ( oWK . papanBandSrcValid )
>5409	ArgumentList	oWK . papanBandSrcValid
>5410	Argument	oWK . papanBandSrcValid
>5411	MemberAccess	oWK . papanBandSrcValid
>5412	Identifier	papanBandSrcValid
>5413	Identifier	oWK
>5414	Callee	CPLFree
>5415	Identifier	CPLFree
>5416	ForStatement	for ( i = 0 ; i < psOptions -> nBandCount ; i ++ )
>5417	CompoundStatement	 
>5418	ExpressionStatement	 
>5419	AssignmentExpr	oWK . papanBandSrcValid [ i ] = NULL
>5420	Identifier	NULL
>5421	ArrayIndexing	oWK . papanBandSrcValid [ i ]
>5422	Identifier	i
>5423	MemberAccess	oWK . papanBandSrcValid
>5424	Identifier	papanBandSrcValid
>5425	Identifier	oWK
>5426	ExpressionStatement	 
>5427	CallExpression	CPLFree ( oWK . papanBandSrcValid [ i ] )
>5428	ArgumentList	oWK . papanBandSrcValid [ i ]
>5429	Argument	oWK . papanBandSrcValid [ i ]
>5430	ArrayIndexing	oWK . papanBandSrcValid [ i ]
>5431	Identifier	i
>5432	MemberAccess	oWK . papanBandSrcValid
>5433	Identifier	papanBandSrcValid
>5434	Identifier	oWK
>5435	Callee	CPLFree
>5436	Identifier	CPLFree
>5437	ForStatement	for ( iWord = nBytesInMask / 4 - 1 ; iWord >= 0 ; iWord -- )
>5438	ExpressionStatement	 
>5439	AssignmentExpr	oWK . panUnifiedSrcValid [ iWord ] |= oWK . papanBandSrcValid [ i ] [ iWord ]
>5440	ArrayIndexing	oWK . papanBandSrcValid [ i ] [ iWord ]
>5441	Identifier	iWord
>5442	ArrayIndexing	oWK . papanBandSrcValid [ i ]
>5443	Identifier	i
>5444	MemberAccess	oWK . papanBandSrcValid
>5445	Identifier	papanBandSrcValid
>5446	Identifier	oWK
>5447	ArrayIndexing	oWK . panUnifiedSrcValid [ iWord ]
>5448	Identifier	iWord
>5449	MemberAccess	oWK . panUnifiedSrcValid
>5450	Identifier	panUnifiedSrcValid
>5451	Identifier	oWK
>5452	IncDecOp	 
>5453	IncDec	--
>5454	Identifier	iWord
>5455	Condition	 
>5456	RelationalExpression	iWord >= 0
>5457	PrimaryExpression	0
>5458	Identifier	iWord
>5459	ForInit	 
>5460	AssignmentExpr	iWord = nBytesInMask / 4 - 1
>5461	AdditiveExpression	nBytesInMask / 4 - 1
>5462	PrimaryExpression	1
>5463	MultiplicativeExpression	nBytesInMask / 4
>5464	PrimaryExpression	4
>5465	Identifier	nBytesInMask
>5466	Identifier	iWord
>5467	IncDecOp	 
>5468	IncDec	++
>5469	Identifier	i
>5470	Condition	 
>5471	RelationalExpression	i < psOptions -> nBandCount
>5472	PtrMemberAccess	psOptions -> nBandCount
>5473	Identifier	nBandCount
>5474	Identifier	psOptions
>5475	Identifier	i
>5476	ForInit	 
>5477	AssignmentExpr	i = 0
>5478	PrimaryExpression	0
>5479	Identifier	i
>5480	ExpressionStatement	 
>5481	CallExpression	memset ( oWK . panUnifiedSrcValid , 0 , nBytesInMask )
>5482	ArgumentList	oWK . panUnifiedSrcValid
>5483	Argument	nBytesInMask
>5484	Identifier	nBytesInMask
>5485	Argument	0
>5486	PrimaryExpression	0
>5487	Argument	oWK . panUnifiedSrcValid
>5488	MemberAccess	oWK . panUnifiedSrcValid
>5489	Identifier	panUnifiedSrcValid
>5490	Identifier	oWK
>5491	Callee	memset
>5492	Identifier	memset
>5493	ExpressionStatement	 
>5494	AssignmentExpr	eErr = CreateKernelMask ( & oWK , i , \"UnifiedSrcValid\" )
>5495	CallExpression	CreateKernelMask ( & oWK , i , \"UnifiedSrcValid\" )
>5496	ArgumentList	& oWK
>5497	Argument	\"UnifiedSrcValid\"
>5498	PrimaryExpression	\"UnifiedSrcValid\"
>5499	Argument	i
>5500	Identifier	i
>5501	Argument	& oWK
>5502	UnaryOp	& oWK
>5503	Identifier	oWK
>5504	UnaryOperator	&
>5505	Callee	CreateKernelMask
>5506	Identifier	CreateKernelMask
>5507	Identifier	eErr
>5508	IdentifierDeclStatement	 
>5509	IdentifierDecl	iWord
>5510	Identifier	iWord
>5511	IdentifierDeclType	int
>5512	IdentifierDeclStatement	 
>5513	IdentifierDecl	nBytesInMask = ( oWK . nSrcXSize * oWK . nSrcYSize + 31 ) / 8
>5514	AssignmentExpr	nBytesInMask = ( oWK . nSrcXSize * oWK . nSrcYSize + 31 ) / 8
>5515	MultiplicativeExpression	( oWK . nSrcXSize * oWK . nSrcYSize + 31 ) / 8
>5516	PrimaryExpression	8
>5517	AdditiveExpression	oWK . nSrcXSize * oWK . nSrcYSize + 31
>5518	PrimaryExpression	31
>5519	MultiplicativeExpression	oWK . nSrcXSize * oWK . nSrcYSize
>5520	MemberAccess	oWK . nSrcYSize
>5521	Identifier	nSrcYSize
>5522	Identifier	oWK
>5523	MemberAccess	oWK . nSrcXSize
>5524	Identifier	nSrcXSize
>5525	Identifier	oWK
>5526	Identifier	nBytesInMask
>5527	Identifier	nBytesInMask
>5528	IdentifierDeclType	int
>5529	Condition	 
>5530	AndExpression	CSLFetchBoolean ( psOptions -> papszWarpOptions , \"UNIFIED_SRC_NODATA\" , FALSE ) && eErr == CE_None
>5531	EqualityExpression	eErr == CE_None
>5532	Identifier	CE_None
>5533	Identifier	eErr
>5534	CallExpression	CSLFetchBoolean ( psOptions -> papszWarpOptions , \"UNIFIED_SRC_NODATA\" , FALSE )
>5535	ArgumentList	psOptions -> papszWarpOptions
>5536	Argument	FALSE
>5537	Identifier	FALSE
>5538	Argument	\"UNIFIED_SRC_NODATA\"
>5539	PrimaryExpression	\"UNIFIED_SRC_NODATA\"
>5540	Argument	psOptions -> papszWarpOptions
>5541	PtrMemberAccess	psOptions -> papszWarpOptions
>5542	Identifier	papszWarpOptions
>5543	Identifier	psOptions
>5544	Callee	CSLFetchBoolean
>5545	Identifier	CSLFetchBoolean
>5546	ForStatement	for ( i = 0 ; i < psOptions -> nBandCount && eErr == CE_None ; i ++ )
>5547	CompoundStatement	 
>5548	IfStatement	if ( eErr == CE_None )
>5549	CompoundStatement	 
>5550	ExpressionStatement	 
>5551	AssignmentExpr	eErr = GDALWarpNoDataMasker ( adfNoData , 1 , psOptions -> eWorkingDataType , oWK . nSrcXOff , oWK . \
>5552	CallExpression	GDALWarpNoDataMasker ( adfNoData , 1 , psOptions -> eWorkingDataType , oWK . nSrcXOff , oWK . nSrcYOff , oWK . nSrcXSize , \
>5553	ArgumentList	adfNoData
>5554	Argument	oWK . papanBandSrcValid [ i ]
>5555	ArrayIndexing	oWK . papanBandSrcValid [ i ]
>5556	Identifier	i
>5557	MemberAccess	oWK . papanBandSrcValid
>5558	Identifier	papanBandSrcValid
>5559	Identifier	oWK
>5560	Argument	FALSE
>5561	Identifier	FALSE
>5562	Argument	& ( oWK . papabySrcImage [ i ] )
>5563	UnaryOp	& ( oWK . papabySrcImage [ i ] )
>5564	ArrayIndexing	oWK . papabySrcImage [ i ]
>5565	Identifier	i
>5566	MemberAccess	oWK . papabySrcImage
>5567	Identifier	papabySrcImage
>5568	Identifier	oWK
>5569	UnaryOperator	&
>5570	Argument	oWK . nSrcYSize
>5571	MemberAccess	oWK . nSrcYSize
>5572	Identifier	nSrcYSize
>5573	Identifier	oWK
>5574	Argument	oWK . nSrcXSize
>5575	MemberAccess	oWK . nSrcXSize
>5576	Identifier	nSrcXSize
>5577	Identifier	oWK
>5578	Argument	oWK . nSrcYOff
>5579	MemberAccess	oWK . nSrcYOff
>5580	Identifier	nSrcYOff
>5581	Identifier	oWK
>5582	Argument	oWK . nSrcXOff
>5583	MemberAccess	oWK . nSrcXOff
>5584	Identifier	nSrcXOff
>5585	Identifier	oWK
>5586	Argument	psOptions -> eWorkingDataType
>5587	PtrMemberAccess	psOptions -> eWorkingDataType
>5588	Identifier	eWorkingDataType
>5589	Identifier	psOptions
>5590	Argument	1
>5591	PrimaryExpression	1
>5592	Argument	adfNoData
>5593	Identifier	adfNoData
>5594	Callee	GDALWarpNoDataMasker
>5595	Identifier	GDALWarpNoDataMasker
>5596	Identifier	eErr
>5597	ExpressionStatement	 
>5598	AssignmentExpr	adfNoData [ 1 ] = psOptions -> padfSrcNoDataImag [ i ]
>5599	ArrayIndexing	psOptions -> padfSrcNoDataImag [ i ]
>5600	Identifier	i
>5601	PtrMemberAccess	psOptions -> padfSrcNoDataImag
>5602	Identifier	padfSrcNoDataImag
>5603	Identifier	psOptions
>5604	ArrayIndexing	adfNoData [ 1 ]
>5605	PrimaryExpression	1
>5606	Identifier	adfNoData
>5607	ExpressionStatement	 
>5608	AssignmentExpr	adfNoData [ 0 ] = psOptions -> padfSrcNoDataReal [ i ]
>5609	ArrayIndexing	psOptions -> padfSrcNoDataReal [ i ]
>5610	Identifier	i
>5611	PtrMemberAccess	psOptions -> padfSrcNoDataReal
>5612	Identifier	padfSrcNoDataReal
>5613	Identifier	psOptions
>5614	ArrayIndexing	adfNoData [ 0 ]
>5615	PrimaryExpression	0
>5616	Identifier	adfNoData
>5617	IdentifierDeclStatement	 
>5618	IdentifierDecl	adfNoData [ 2 ]
>5619	PrimaryExpression	2
>5620	Identifier	adfNoData
>5621	IdentifierDeclType	double [ 2 ]
>5622	Condition	 
>5623	EqualityExpression	eErr == CE_None
>5624	Identifier	CE_None
>5625	Identifier	eErr
>5626	ExpressionStatement	 
>5627	AssignmentExpr	eErr = CreateKernelMask ( & oWK , i , \"BandSrcValid\" )
>5628	CallExpression	CreateKernelMask ( & oWK , i , \"BandSrcValid\" )
>5629	ArgumentList	& oWK
>5630	Argument	\"BandSrcValid\"
>5631	PrimaryExpression	\"BandSrcValid\"
>5632	Argument	i
>5633	Identifier	i
>5634	Argument	& oWK
>5635	UnaryOp	& oWK
>5636	Identifier	oWK
>5637	UnaryOperator	&
>5638	Callee	CreateKernelMask
>5639	Identifier	CreateKernelMask
>5640	Identifier	eErr
>5641	IncDecOp	 
>5642	IncDec	++
>5643	Identifier	i
>5644	Condition	 
>5645	AndExpression	i < psOptions -> nBandCount && eErr == CE_None
>5646	EqualityExpression	eErr == CE_None
>5647	Identifier	CE_None
>5648	Identifier	eErr
>5649	RelationalExpression	i < psOptions -> nBandCount
>5650	PtrMemberAccess	psOptions -> nBandCount
>5651	Identifier	nBandCount
>5652	Identifier	psOptions
>5653	Identifier	i
>5654	ForInit	 
>5655	AssignmentExpr	i = 0
>5656	PrimaryExpression	0
>5657	Identifier	i
>5658	Condition	 
>5659	AndExpression	eErr == CE_None && psOptions -> padfSrcNoDataReal != NULL && nSrcXSize > 0 && nSrcYSize > 0
>5660	AndExpression	psOptions -> padfSrcNoDataReal != NULL && nSrcXSize > 0 && nSrcYSize > 0
>5661	AndExpression	nSrcXSize > 0 && nSrcYSize > 0
>5662	RelationalExpression	nSrcYSize > 0
>5663	PrimaryExpression	0
>5664	Identifier	nSrcYSize
>5665	RelationalExpression	nSrcXSize > 0
>5666	PrimaryExpression	0
>5667	Identifier	nSrcXSize
>5668	EqualityExpression	psOptions -> padfSrcNoDataReal != NULL
>5669	Identifier	NULL
>5670	PtrMemberAccess	psOptions -> padfSrcNoDataReal
>5671	Identifier	padfSrcNoDataReal
>5672	Identifier	psOptions
>5673	EqualityExpression	eErr == CE_None
>5674	Identifier	CE_None
>5675	Identifier	eErr
>5676	IfStatement	if ( eErr == CE_None && psOptions -> nDstAlphaBand > 0 )
>5677	CompoundStatement	 
>5678	IfStatement	if ( eErr == CE_None )
>5679	ExpressionStatement	 
>5680	AssignmentExpr	eErr = GDALWarpDstAlphaMasker ( psOptions , psOptions -> nBandCount , psOptions -> eWorkingDataType , \
>5681	CallExpression	GDALWarpDstAlphaMasker ( psOptions , psOptions -> nBandCount , psOptions -> eWorkingDataType , oWK . nDstXOff , \
>5682	ArgumentList	psOptions
>5683	Argument	oWK . pafDstDensity
>5684	MemberAccess	oWK . pafDstDensity
>5685	Identifier	pafDstDensity
>5686	Identifier	oWK
>5687	Argument	TRUE
>5688	Identifier	TRUE
>5689	Argument	oWK . papabyDstImage
>5690	MemberAccess	oWK . papabyDstImage
>5691	Identifier	papabyDstImage
>5692	Identifier	oWK
>5693	Argument	oWK . nDstYSize
>5694	MemberAccess	oWK . nDstYSize
>5695	Identifier	nDstYSize
>5696	Identifier	oWK
>5697	Argument	oWK . nDstXSize
>5698	MemberAccess	oWK . nDstXSize
>5699	Identifier	nDstXSize
>5700	Identifier	oWK
>5701	Argument	oWK . nDstYOff
>5702	MemberAccess	oWK . nDstYOff
>5703	Identifier	nDstYOff
>5704	Identifier	oWK
>5705	Argument	oWK . nDstXOff
>5706	MemberAccess	oWK . nDstXOff
>5707	Identifier	nDstXOff
>5708	Identifier	oWK
>5709	Argument	psOptions -> eWorkingDataType
>5710	PtrMemberAccess	psOptions -> eWorkingDataType
>5711	Identifier	eWorkingDataType
>5712	Identifier	psOptions
>5713	Argument	psOptions -> nBandCount
>5714	PtrMemberAccess	psOptions -> nBandCount
>5715	Identifier	nBandCount
>5716	Identifier	psOptions
>5717	Argument	psOptions
>5718	Identifier	psOptions
>5719	Callee	GDALWarpDstAlphaMasker
>5720	Identifier	GDALWarpDstAlphaMasker
>5721	Identifier	eErr
>5722	Condition	 
>5723	EqualityExpression	eErr == CE_None
>5724	Identifier	CE_None
>5725	Identifier	eErr
>5726	ExpressionStatement	 
>5727	AssignmentExpr	eErr = CreateKernelMask ( & oWK , i , \"DstDensity\" )
>5728	CallExpression	CreateKernelMask ( & oWK , i , \"DstDensity\" )
>5729	ArgumentList	& oWK
>5730	Argument	\"DstDensity\"
>5731	PrimaryExpression	\"DstDensity\"
>5732	Argument	i
>5733	Identifier	i
>5734	Argument	& oWK
>5735	UnaryOp	& oWK
>5736	Identifier	oWK
>5737	UnaryOperator	&
>5738	Callee	CreateKernelMask
>5739	Identifier	CreateKernelMask
>5740	Identifier	eErr
>5741	ExpressionStatement	 
>5742	CallExpression	CPLAssert ( oWK . pafDstDensity == NULL )
>5743	ArgumentList	oWK . pafDstDensity == NULL
>5744	Argument	oWK . pafDstDensity == NULL
>5745	EqualityExpression	oWK . pafDstDensity == NULL
>5746	Identifier	NULL
>5747	MemberAccess	oWK . pafDstDensity
>5748	Identifier	pafDstDensity
>5749	Identifier	oWK
>5750	Callee	CPLAssert
>5751	Identifier	CPLAssert
>5752	Condition	 
>5753	AndExpression	eErr == CE_None && psOptions -> nDstAlphaBand > 0
>5754	RelationalExpression	psOptions -> nDstAlphaBand > 0
>5755	PrimaryExpression	0
>5756	PtrMemberAccess	psOptions -> nDstAlphaBand
>5757	Identifier	nDstAlphaBand
>5758	Identifier	psOptions
>5759	EqualityExpression	eErr == CE_None
>5760	Identifier	CE_None
>5761	Identifier	eErr
>5762	IfStatement	if ( eErr == CE_None && psOptions -> hCutline != NULL && nSrcXSize > 0 && nSrcYSize > 0 )
>5763	CompoundStatement	 
>5764	IfStatement	if ( eErr == CE_None )
>5765	ExpressionStatement	 
>5766	AssignmentExpr	eErr = GDALWarpCutlineMasker ( psOptions , psOptions -> nBandCount , psOptions -> eWorkingDataType , \
>5767	CallExpression	GDALWarpCutlineMasker ( psOptions , psOptions -> nBandCount , psOptions -> eWorkingDataType , oWK . nSrcXOff , oWK \
>5768	ArgumentList	psOptions
>5769	Argument	oWK . pafUnifiedSrcDensity
>5770	MemberAccess	oWK . pafUnifiedSrcDensity
>5771	Identifier	pafUnifiedSrcDensity
>5772	Identifier	oWK
>5773	Argument	TRUE
>5774	Identifier	TRUE
>5775	Argument	oWK . papabySrcImage
>5776	MemberAccess	oWK . papabySrcImage
>5777	Identifier	papabySrcImage
>5778	Identifier	oWK
>5779	Argument	oWK . nSrcYSize
>5780	MemberAccess	oWK . nSrcYSize
>5781	Identifier	nSrcYSize
>5782	Identifier	oWK
>5783	Argument	oWK . nSrcXSize
>5784	MemberAccess	oWK . nSrcXSize
>5785	Identifier	nSrcXSize
>5786	Identifier	oWK
>5787	Argument	oWK . nSrcYOff
>5788	MemberAccess	oWK . nSrcYOff
>5789	Identifier	nSrcYOff
>5790	Identifier	oWK
>5791	Argument	oWK . nSrcXOff
>5792	MemberAccess	oWK . nSrcXOff
>5793	Identifier	nSrcXOff
>5794	Identifier	oWK
>5795	Argument	psOptions -> eWorkingDataType
>5796	PtrMemberAccess	psOptions -> eWorkingDataType
>5797	Identifier	eWorkingDataType
>5798	Identifier	psOptions
>5799	Argument	psOptions -> nBandCount
>5800	PtrMemberAccess	psOptions -> nBandCount
>5801	Identifier	nBandCount
>5802	Identifier	psOptions
>5803	Argument	psOptions
>5804	Identifier	psOptions
>5805	Callee	GDALWarpCutlineMasker
>5806	Identifier	GDALWarpCutlineMasker
>5807	Identifier	eErr
>5808	Condition	 
>5809	EqualityExpression	eErr == CE_None
>5810	Identifier	CE_None
>5811	Identifier	eErr
>5812	IfStatement	if ( oWK . pafUnifiedSrcDensity == NULL )
>5813	CompoundStatement	 
>5814	IfStatement	if ( eErr == CE_None )
>5815	CompoundStatement	 
>5816	ForStatement	for ( j = oWK . nSrcXSize * oWK . nSrcYSize - 1 ; j >= 0 ; j -- )
>5817	ExpressionStatement	 
>5818	AssignmentExpr	oWK . pafUnifiedSrcDensity [ j ] = 1.0
>5819	PrimaryExpression	1.0
>5820	ArrayIndexing	oWK . pafUnifiedSrcDensity [ j ]
>5821	Identifier	j
>5822	MemberAccess	oWK . pafUnifiedSrcDensity
>5823	Identifier	pafUnifiedSrcDensity
>5824	Identifier	oWK
>5825	IncDecOp	 
>5826	IncDec	--
>5827	Identifier	j
>5828	Condition	 
>5829	RelationalExpression	j >= 0
>5830	PrimaryExpression	0
>5831	Identifier	j
>5832	ForInit	 
>5833	AssignmentExpr	j = oWK . nSrcXSize * oWK . nSrcYSize - 1
>5834	AdditiveExpression	oWK . nSrcXSize * oWK . nSrcYSize - 1
>5835	PrimaryExpression	1
>5836	MultiplicativeExpression	oWK . nSrcXSize * oWK . nSrcYSize
>5837	MemberAccess	oWK . nSrcYSize
>5838	Identifier	nSrcYSize
>5839	Identifier	oWK
>5840	MemberAccess	oWK . nSrcXSize
>5841	Identifier	nSrcXSize
>5842	Identifier	oWK
>5843	Identifier	j
>5844	Condition	 
>5845	EqualityExpression	eErr == CE_None
>5846	Identifier	CE_None
>5847	Identifier	eErr
>5848	ExpressionStatement	 
>5849	AssignmentExpr	eErr = CreateKernelMask ( & oWK , 0 , \"UnifiedSrcDensity\" )
>5850	CallExpression	CreateKernelMask ( & oWK , 0 , \"UnifiedSrcDensity\" )
>5851	ArgumentList	& oWK
>5852	Argument	\"UnifiedSrcDensity\"
>5853	PrimaryExpression	\"UnifiedSrcDensity\"
>5854	Argument	0
>5855	PrimaryExpression	0
>5856	Argument	& oWK
>5857	UnaryOp	& oWK
>5858	Identifier	oWK
>5859	UnaryOperator	&
>5860	Callee	CreateKernelMask
>5861	Identifier	CreateKernelMask
>5862	Identifier	eErr
>5863	IdentifierDeclStatement	 
>5864	IdentifierDecl	j = oWK . nSrcXSize * oWK . nSrcYSize
>5865	AssignmentExpr	j = oWK . nSrcXSize * oWK . nSrcYSize
>5866	MultiplicativeExpression	oWK . nSrcXSize * oWK . nSrcYSize
>5867	MemberAccess	oWK . nSrcYSize
>5868	Identifier	nSrcYSize
>5869	Identifier	oWK
>5870	MemberAccess	oWK . nSrcXSize
>5871	Identifier	nSrcXSize
>5872	Identifier	oWK
>5873	Identifier	j
>5874	Identifier	j
>5875	IdentifierDeclType	int
>5876	Condition	 
>5877	EqualityExpression	oWK . pafUnifiedSrcDensity == NULL
>5878	Identifier	NULL
>5879	MemberAccess	oWK . pafUnifiedSrcDensity
>5880	Identifier	pafUnifiedSrcDensity
>5881	Identifier	oWK
>5882	Condition	 
>5883	AndExpression	eErr == CE_None && psOptions -> hCutline != NULL && nSrcXSize > 0 && nSrcYSize > 0
>5884	AndExpression	psOptions -> hCutline != NULL && nSrcXSize > 0 && nSrcYSize > 0
>5885	AndExpression	nSrcXSize > 0 && nSrcYSize > 0
>5886	RelationalExpression	nSrcYSize > 0
>5887	PrimaryExpression	0
>5888	Identifier	nSrcYSize
>5889	RelationalExpression	nSrcXSize > 0
>5890	PrimaryExpression	0
>5891	Identifier	nSrcXSize
>5892	EqualityExpression	psOptions -> hCutline != NULL
>5893	Identifier	NULL
>5894	PtrMemberAccess	psOptions -> hCutline
>5895	Identifier	hCutline
>5896	Identifier	psOptions
>5897	EqualityExpression	eErr == CE_None
>5898	Identifier	CE_None
>5899	Identifier	eErr
>5900	IfStatement	if ( eErr == CE_None && psOptions -> nSrcAlphaBand > 0 && nSrcXSize > 0 && nSrcYSize > 0 )
>5901	CompoundStatement	 
>5902	IfStatement	if ( eErr == CE_None )
>5903	ExpressionStatement	 
>5904	AssignmentExpr	eErr = GDALWarpSrcAlphaMasker ( psOptions , psOptions -> nBandCount , psOptions -> eWorkingDataType , \
>5905	CallExpression	GDALWarpSrcAlphaMasker ( psOptions , psOptions -> nBandCount , psOptions -> eWorkingDataType , oWK . nSrcXOff , \
>5906	ArgumentList	psOptions
>5907	Argument	oWK . pafUnifiedSrcDensity
>5908	MemberAccess	oWK . pafUnifiedSrcDensity
>5909	Identifier	pafUnifiedSrcDensity
>5910	Identifier	oWK
>5911	Argument	TRUE
>5912	Identifier	TRUE
>5913	Argument	oWK . papabySrcImage
>5914	MemberAccess	oWK . papabySrcImage
>5915	Identifier	papabySrcImage
>5916	Identifier	oWK
>5917	Argument	oWK . nSrcYSize
>5918	MemberAccess	oWK . nSrcYSize
>5919	Identifier	nSrcYSize
>5920	Identifier	oWK
>5921	Argument	oWK . nSrcXSize
>5922	MemberAccess	oWK . nSrcXSize
>5923	Identifier	nSrcXSize
>5924	Identifier	oWK
>5925	Argument	oWK . nSrcYOff
>5926	MemberAccess	oWK . nSrcYOff
>5927	Identifier	nSrcYOff
>5928	Identifier	oWK
>5929	Argument	oWK . nSrcXOff
>5930	MemberAccess	oWK . nSrcXOff
>5931	Identifier	nSrcXOff
>5932	Identifier	oWK
>5933	Argument	psOptions -> eWorkingDataType
>5934	PtrMemberAccess	psOptions -> eWorkingDataType
>5935	Identifier	eWorkingDataType
>5936	Identifier	psOptions
>5937	Argument	psOptions -> nBandCount
>5938	PtrMemberAccess	psOptions -> nBandCount
>5939	Identifier	nBandCount
>5940	Identifier	psOptions
>5941	Argument	psOptions
>5942	Identifier	psOptions
>5943	Callee	GDALWarpSrcAlphaMasker
>5944	Identifier	GDALWarpSrcAlphaMasker
>5945	Identifier	eErr
>5946	Condition	 
>5947	EqualityExpression	eErr == CE_None
>5948	Identifier	CE_None
>5949	Identifier	eErr
>5950	ExpressionStatement	 
>5951	AssignmentExpr	eErr = CreateKernelMask ( & oWK , 0 , \"UnifiedSrcDensity\" )
>5952	CallExpression	CreateKernelMask ( & oWK , 0 , \"UnifiedSrcDensity\" )
>5953	ArgumentList	& oWK
>5954	Argument	\"UnifiedSrcDensity\"
>5955	PrimaryExpression	\"UnifiedSrcDensity\"
>5956	Argument	0
>5957	PrimaryExpression	0
>5958	Argument	& oWK
>5959	UnaryOp	& oWK
>5960	Identifier	oWK
>5961	UnaryOperator	&
>5962	Callee	CreateKernelMask
>5963	Identifier	CreateKernelMask
>5964	Identifier	eErr
>5965	ExpressionStatement	 
>5966	CallExpression	CPLAssert ( oWK . pafDstDensity == NULL )
>5967	ArgumentList	oWK . pafDstDensity == NULL
>5968	Argument	oWK . pafDstDensity == NULL
>5969	EqualityExpression	oWK . pafDstDensity == NULL
>5970	Identifier	NULL
>5971	MemberAccess	oWK . pafDstDensity
>5972	Identifier	pafDstDensity
>5973	Identifier	oWK
>5974	Callee	CPLAssert
>5975	Identifier	CPLAssert
>5976	Condition	 
>5977	AndExpression	eErr == CE_None && psOptions -> nSrcAlphaBand > 0 && nSrcXSize > 0 && nSrcYSize > 0
>5978	AndExpression	psOptions -> nSrcAlphaBand > 0 && nSrcXSize > 0 && nSrcYSize > 0
>5979	AndExpression	nSrcXSize > 0 && nSrcYSize > 0
>5980	RelationalExpression	nSrcYSize > 0
>5981	PrimaryExpression	0
>5982	Identifier	nSrcYSize
>5983	RelationalExpression	nSrcXSize > 0
>5984	PrimaryExpression	0
>5985	Identifier	nSrcXSize
>5986	RelationalExpression	psOptions -> nSrcAlphaBand > 0
>5987	PrimaryExpression	0
>5988	PtrMemberAccess	psOptions -> nSrcAlphaBand
>5989	Identifier	nSrcAlphaBand
>5990	Identifier	psOptions
>5991	EqualityExpression	eErr == CE_None
>5992	Identifier	CE_None
>5993	Identifier	eErr
>5994	ForStatement	for ( i = 0 ; i < psOptions -> nBandCount && eErr == CE_None ; i ++ )
>5995	CompoundStatement	 
>5996	ExpressionStatement	 
>5997	AssignmentExpr	oWK . papabyDstImage [ i ] = ( ( GByte * ) pDataBuf ) + i * nDstXSize * nDstYSize * nWordSize
>5998	AdditiveExpression	( ( GByte * ) pDataBuf ) + i * nDstXSize * nDstYSize * nWordSize
>5999	MultiplicativeExpression	i * nDstXSize * nDstYSize * nWordSize
>6000	MultiplicativeExpression	nDstXSize * nDstYSize * nWordSize
>6001	MultiplicativeExpression	nDstYSize * nWordSize
>6002	Identifier	nWordSize
>6003	Identifier	nDstYSize
>6004	Identifier	nDstXSize
>6005	Identifier	i
>6006	CastExpression	( GByte * ) pDataBuf
>6007	Identifier	pDataBuf
>6008	CastTarget	GByte *
>6009	ArrayIndexing	oWK . papabyDstImage [ i ]
>6010	Identifier	i
>6011	MemberAccess	oWK . papabyDstImage
>6012	Identifier	papabyDstImage
>6013	Identifier	oWK
>6014	IncDecOp	 
>6015	IncDec	++
>6016	Identifier	i
>6017	Condition	 
>6018	AndExpression	i < psOptions -> nBandCount && eErr == CE_None
>6019	EqualityExpression	eErr == CE_None
>6020	Identifier	CE_None
>6021	Identifier	eErr
>6022	RelationalExpression	i < psOptions -> nBandCount
>6023	PtrMemberAccess	psOptions -> nBandCount
>6024	Identifier	nBandCount
>6025	Identifier	psOptions
>6026	Identifier	i
>6027	ForInit	 
>6028	AssignmentExpr	i = 0
>6029	PrimaryExpression	0
>6030	Identifier	i
>6031	ExpressionStatement	 
>6032	AssignmentExpr	oWK . papabyDstImage = ( GByte * * ) CPLCalloc ( sizeof ( GByte * ) , psOptions -> nBandCount )
>6033	CastExpression	( GByte * * ) CPLCalloc ( sizeof ( GByte * ) , psOptions -> nBandCount )
>6034	CallExpression	CPLCalloc ( sizeof ( GByte * ) , psOptions -> nBandCount )
>6035	ArgumentList	sizeof ( GByte * )
>6036	Argument	psOptions -> nBandCount
>6037	PtrMemberAccess	psOptions -> nBandCount
>6038	Identifier	nBandCount
>6039	Identifier	psOptions
>6040	Argument	sizeof ( GByte * )
>6041	SizeofExpr	sizeof ( GByte * )
>6042	SizeofOperand	GByte *
>6043	Sizeof	sizeof
>6044	Callee	CPLCalloc
>6045	Identifier	CPLCalloc
>6046	CastTarget	GByte * *
>6047	MemberAccess	oWK . papabyDstImage
>6048	Identifier	papabyDstImage
>6049	Identifier	oWK
>6050	ExpressionStatement	 
>6051	AssignmentExpr	oWK . nDstYSize = nDstYSize
>6052	Identifier	nDstYSize
>6053	MemberAccess	oWK . nDstYSize
>6054	Identifier	nDstYSize
>6055	Identifier	oWK
>6056	ExpressionStatement	 
>6057	AssignmentExpr	oWK . nDstXSize = nDstXSize
>6058	Identifier	nDstXSize
>6059	MemberAccess	oWK . nDstXSize
>6060	Identifier	nDstXSize
>6061	Identifier	oWK
>6062	ExpressionStatement	 
>6063	AssignmentExpr	oWK . nDstYOff = nDstYOff
>6064	Identifier	nDstYOff
>6065	MemberAccess	oWK . nDstYOff
>6066	Identifier	nDstYOff
>6067	Identifier	oWK
>6068	ExpressionStatement	 
>6069	AssignmentExpr	oWK . nDstXOff = nDstXOff
>6070	Identifier	nDstXOff
>6071	MemberAccess	oWK . nDstXOff
>6072	Identifier	nDstXOff
>6073	Identifier	oWK
>6074	ExpressionStatement	 
>6075	CallExpression	ReportTiming ( \"Input buffer read\" )
>6076	ArgumentList	\"Input buffer read\"
>6077	Argument	\"Input buffer read\"
>6078	PrimaryExpression	\"Input buffer read\"
>6079	Callee	ReportTiming
>6080	Identifier	ReportTiming
>6081	IfStatement	if ( eErr == CE_None && nSrcXSize > 0 && nSrcYSize > 0 )
>6082	ExpressionStatement	 
>6083	AssignmentExpr	eErr = GDALDatasetRasterIO ( psOptions -> hSrcDS , GF_Read , nSrcXOff , nSrcYOff , nSrcXSize , nSrcYSize , \
>6084	CallExpression	GDALDatasetRasterIO ( psOptions -> hSrcDS , GF_Read , nSrcXOff , nSrcYOff , nSrcXSize , nSrcYSize , oWK . papabySrcImage [ \
>6085	ArgumentList	psOptions -> hSrcDS
>6086	Argument	nWordSize * ( nSrcXSize * nSrcYSize + WARP_EXTRA_ELTS )
>6087	MultiplicativeExpression	nWordSize * ( nSrcXSize * nSrcYSize + WARP_EXTRA_ELTS )
>6088	AdditiveExpression	nSrcXSize * nSrcYSize + WARP_EXTRA_ELTS
>6089	Identifier	WARP_EXTRA_ELTS
>6090	MultiplicativeExpression	nSrcXSize * nSrcYSize
>6091	Identifier	nSrcYSize
>6092	Identifier	nSrcXSize
>6093	Identifier	nWordSize
>6094	Argument	0
>6095	PrimaryExpression	0
>6096	Argument	0
>6097	PrimaryExpression	0
>6098	Argument	psOptions -> panSrcBands
>6099	PtrMemberAccess	psOptions -> panSrcBands
>6100	Identifier	panSrcBands
>6101	Identifier	psOptions
>6102	Argument	psOptions -> nBandCount
>6103	PtrMemberAccess	psOptions -> nBandCount
>6104	Identifier	nBandCount
>6105	Identifier	psOptions
>6106	Argument	psOptions -> eWorkingDataType
>6107	PtrMemberAccess	psOptions -> eWorkingDataType
>6108	Identifier	eWorkingDataType
>6109	Identifier	psOptions
>6110	Argument	nSrcYSize
>6111	Identifier	nSrcYSize
>6112	Argument	nSrcXSize
>6113	Identifier	nSrcXSize
>6114	Argument	oWK . papabySrcImage [ 0 ]
>6115	ArrayIndexing	oWK . papabySrcImage [ 0 ]
>6116	PrimaryExpression	0
>6117	MemberAccess	oWK . papabySrcImage
>6118	Identifier	papabySrcImage
>6119	Identifier	oWK
>6120	Argument	nSrcYSize
>6121	Identifier	nSrcYSize
>6122	Argument	nSrcXSize
>6123	Identifier	nSrcXSize
>6124	Argument	nSrcYOff
>6125	Identifier	nSrcYOff
>6126	Argument	nSrcXOff
>6127	Identifier	nSrcXOff
>6128	Argument	GF_Read
>6129	Identifier	GF_Read
>6130	Argument	psOptions -> hSrcDS
>6131	PtrMemberAccess	psOptions -> hSrcDS
>6132	Identifier	hSrcDS
>6133	Identifier	psOptions
>6134	Callee	GDALDatasetRasterIO
>6135	Identifier	GDALDatasetRasterIO
>6136	Identifier	eErr
>6137	Condition	 
>6138	AndExpression	eErr == CE_None && nSrcXSize > 0 && nSrcYSize > 0
>6139	AndExpression	nSrcXSize > 0 && nSrcYSize > 0
>6140	RelationalExpression	nSrcYSize > 0
>6141	PrimaryExpression	0
>6142	Identifier	nSrcYSize
>6143	RelationalExpression	nSrcXSize > 0
>6144	PrimaryExpression	0
>6145	Identifier	nSrcXSize
>6146	EqualityExpression	eErr == CE_None
>6147	Identifier	CE_None
>6148	Identifier	eErr
>6149	ForStatement	for ( i = 0 ; i < psOptions -> nBandCount && eErr == CE_None ; i ++ )
>6150	ExpressionStatement	 
>6151	AssignmentExpr	oWK . papabySrcImage [ i ] = ( ( GByte * ) oWK . papabySrcImage [ 0 ] ) + nWordSize * ( nSrcXSize * nSrcYSize + \
>6152	AdditiveExpression	( ( GByte * ) oWK . papabySrcImage [ 0 ] ) + nWordSize * ( nSrcXSize * nSrcYSize + WARP_EXTRA_ELTS ) * \
>6153	MultiplicativeExpression	nWordSize * ( nSrcXSize * nSrcYSize + WARP_EXTRA_ELTS ) * i
>6154	MultiplicativeExpression	( nSrcXSize * nSrcYSize + WARP_EXTRA_ELTS ) * i
>6155	Identifier	i
>6156	AdditiveExpression	nSrcXSize * nSrcYSize + WARP_EXTRA_ELTS
>6157	Identifier	WARP_EXTRA_ELTS
>6158	MultiplicativeExpression	nSrcXSize * nSrcYSize
>6159	Identifier	nSrcYSize
>6160	Identifier	nSrcXSize
>6161	Identifier	nWordSize
>6162	CastExpression	( GByte * ) oWK . papabySrcImage [ 0 ]
>6163	ArrayIndexing	oWK . papabySrcImage [ 0 ]
>6164	PrimaryExpression	0
>6165	MemberAccess	oWK . papabySrcImage
>6166	Identifier	papabySrcImage
>6167	Identifier	oWK
>6168	CastTarget	GByte *
>6169	ArrayIndexing	oWK . papabySrcImage [ i ]
>6170	Identifier	i
>6171	MemberAccess	oWK . papabySrcImage
>6172	Identifier	papabySrcImage
>6173	Identifier	oWK
>6174	IncDecOp	 
>6175	IncDec	++
>6176	Identifier	i
>6177	Condition	 
>6178	AndExpression	i < psOptions -> nBandCount && eErr == CE_None
>6179	EqualityExpression	eErr == CE_None
>6180	Identifier	CE_None
>6181	Identifier	eErr
>6182	RelationalExpression	i < psOptions -> nBandCount
>6183	PtrMemberAccess	psOptions -> nBandCount
>6184	Identifier	nBandCount
>6185	Identifier	psOptions
>6186	Identifier	i
>6187	ForInit	 
>6188	AssignmentExpr	i = 0
>6189	PrimaryExpression	0
>6190	Identifier	i
>6191	IfStatement	if ( nSrcXSize != 0 && nSrcYSize != 0 && oWK . papabySrcImage [ 0 ] == NULL )
>6192	CompoundStatement	 
>6193	ExpressionStatement	 
>6194	AssignmentExpr	eErr = CE_Failure
>6195	Identifier	CE_Failure
>6196	Identifier	eErr
>6197	ExpressionStatement	 
>6198	CallExpression	CPLError ( CE_Failure , CPLE_OutOfMemory , \"Failed to allocate %d byte source buffer.\" , nWordSize * ( nSrcXSize * \
>6199	ArgumentList	CE_Failure
>6200	Argument	nWordSize * ( nSrcXSize * nSrcYSize + WARP_EXTRA_ELTS ) * psOptions -> nBandCount
>6201	MultiplicativeExpression	nWordSize * ( nSrcXSize * nSrcYSize + WARP_EXTRA_ELTS ) * psOptions -> nBandCount
>6202	MultiplicativeExpression	( nSrcXSize * nSrcYSize + WARP_EXTRA_ELTS ) * psOptions -> nBandCount
>6203	PtrMemberAccess	psOptions -> nBandCount
>6204	Identifier	nBandCount
>6205	Identifier	psOptions
>6206	AdditiveExpression	nSrcXSize * nSrcYSize + WARP_EXTRA_ELTS
>6207	Identifier	WARP_EXTRA_ELTS
>6208	MultiplicativeExpression	nSrcXSize * nSrcYSize
>6209	Identifier	nSrcYSize
>6210	Identifier	nSrcXSize
>6211	Identifier	nWordSize
>6212	Argument	\"Failed to allocate %d byte source buffer.\"
>6213	PrimaryExpression	\"Failed to allocate %d byte source buffer.\"
>6214	Argument	CPLE_OutOfMemory
>6215	Identifier	CPLE_OutOfMemory
>6216	Argument	CE_Failure
>6217	Identifier	CE_Failure
>6218	Callee	CPLError
>6219	Identifier	CPLError
>6220	Condition	 
>6221	AndExpression	nSrcXSize != 0 && nSrcYSize != 0 && oWK . papabySrcImage [ 0 ] == NULL
>6222	AndExpression	nSrcYSize != 0 && oWK . papabySrcImage [ 0 ] == NULL
>6223	EqualityExpression	oWK . papabySrcImage [ 0 ] == NULL
>6224	Identifier	NULL
>6225	ArrayIndexing	oWK . papabySrcImage [ 0 ]
>6226	PrimaryExpression	0
>6227	MemberAccess	oWK . papabySrcImage
>6228	Identifier	papabySrcImage
>6229	Identifier	oWK
>6230	EqualityExpression	nSrcYSize != 0
>6231	PrimaryExpression	0
>6232	Identifier	nSrcYSize
>6233	EqualityExpression	nSrcXSize != 0
>6234	PrimaryExpression	0
>6235	Identifier	nSrcXSize
>6236	ExpressionStatement	 
>6237	AssignmentExpr	oWK . papabySrcImage [ 0 ] = ( GByte * ) VSIMalloc ( nWordSize * ( nSrcXSize * nSrcYSize + WARP_EXTRA_\
>6238	CastExpression	( GByte * ) VSIMalloc ( nWordSize * ( nSrcXSize * nSrcYSize + WARP_EXTRA_ELTS ) * psOptions -> nBandCount )
>6239	CallExpression	VSIMalloc ( nWordSize * ( nSrcXSize * nSrcYSize + WARP_EXTRA_ELTS ) * psOptions -> nBandCount )
>6240	ArgumentList	nWordSize * ( nSrcXSize * nSrcYSize + WARP_EXTRA_ELTS ) * psOptions -> nBandCount
>6241	Argument	nWordSize * ( nSrcXSize * nSrcYSize + WARP_EXTRA_ELTS ) * psOptions -> nBandCount
>6242	MultiplicativeExpression	nWordSize * ( nSrcXSize * nSrcYSize + WARP_EXTRA_ELTS ) * psOptions -> nBandCount
>6243	MultiplicativeExpression	( nSrcXSize * nSrcYSize + WARP_EXTRA_ELTS ) * psOptions -> nBandCount
>6244	PtrMemberAccess	psOptions -> nBandCount
>6245	Identifier	nBandCount
>6246	Identifier	psOptions
>6247	AdditiveExpression	nSrcXSize * nSrcYSize + WARP_EXTRA_ELTS
>6248	Identifier	WARP_EXTRA_ELTS
>6249	MultiplicativeExpression	nSrcXSize * nSrcYSize
>6250	Identifier	nSrcYSize
>6251	Identifier	nSrcXSize
>6252	Identifier	nWordSize
>6253	Callee	VSIMalloc
>6254	Identifier	VSIMalloc
>6255	CastTarget	GByte *
>6256	ArrayIndexing	oWK . papabySrcImage [ 0 ]
>6257	PrimaryExpression	0
>6258	MemberAccess	oWK . papabySrcImage
>6259	Identifier	papabySrcImage
>6260	Identifier	oWK
>6261	ExpressionStatement	 
>6262	AssignmentExpr	oWK . papabySrcImage = ( GByte * * ) CPLCalloc ( sizeof ( GByte * ) , psOptions -> nBandCount )
>6263	CastExpression	( GByte * * ) CPLCalloc ( sizeof ( GByte * ) , psOptions -> nBandCount )
>6264	CallExpression	CPLCalloc ( sizeof ( GByte * ) , psOptions -> nBandCount )
>6265	ArgumentList	sizeof ( GByte * )
>6266	Argument	psOptions -> nBandCount
>6267	PtrMemberAccess	psOptions -> nBandCount
>6268	Identifier	nBandCount
>6269	Identifier	psOptions
>6270	Argument	sizeof ( GByte * )
>6271	SizeofExpr	sizeof ( GByte * )
>6272	SizeofOperand	GByte *
>6273	Sizeof	sizeof
>6274	Callee	CPLCalloc
>6275	Identifier	CPLCalloc
>6276	CastTarget	GByte * *
>6277	MemberAccess	oWK . papabySrcImage
>6278	Identifier	papabySrcImage
>6279	Identifier	oWK
>6280	IfStatement	if ( nSrcXSize != 0 && nSrcYSize != 0 && ( nSrcXSize > INT_MAX / nSrcYSize || nSrcXSize * nSrcYSize > INT_MAX / ( \
>6281	CompoundStatement	 
>6282	ReturnStatement	 
>6283	Identifier	CE_Failure
>6284	ExpressionStatement	 
>6285	CallExpression	CPLError ( CE_Failure , CPLE_AppDefined , \"Integer overflow 
>6286	ArgumentList	CE_Failure
>6287	Argument	nSrcYSize
>6288	Identifier	nSrcYSize
>6289	Argument	nSrcXSize
>6290	Identifier	nSrcXSize
>6291	Argument	\"Integer overflow 
>6292	PrimaryExpression	\"Integer overflow 
>6293	Argument	CPLE_AppDefined
>6294	Identifier	CPLE_AppDefined
>6295	Argument	CE_Failure
>6296	Identifier	CE_Failure
>6297	Callee	CPLError
>6298	Identifier	CPLError
>6299	Condition	 
>6300	AndExpression	nSrcXSize != 0 && nSrcYSize != 0 && ( nSrcXSize > INT_MAX / nSrcYSize || nSrcXSize * nSrcYSize > INT_\
>6301	AndExpression	nSrcYSize != 0 && ( nSrcXSize > INT_MAX / nSrcYSize || nSrcXSize * nSrcYSize > INT_MAX / ( nWordSize * \
>6302	OrExpression	nSrcXSize > INT_MAX / nSrcYSize || nSrcXSize * nSrcYSize > INT_MAX / ( nWordSize * psOptions -> nBandCount ) \
>6303	RelationalExpression	nSrcXSize * nSrcYSize > INT_MAX / ( nWordSize * psOptions -> nBandCount ) - WARP_EXTRA_ELTS
>6304	AdditiveExpression	INT_MAX / ( nWordSize * psOptions -> nBandCount ) - WARP_EXTRA_ELTS
>6305	Identifier	WARP_EXTRA_ELTS
>6306	MultiplicativeExpression	INT_MAX / ( nWordSize * psOptions -> nBandCount )
>6307	MultiplicativeExpression	nWordSize * psOptions -> nBandCount
>6308	PtrMemberAccess	psOptions -> nBandCount
>6309	Identifier	nBandCount
>6310	Identifier	psOptions
>6311	Identifier	nWordSize
>6312	Identifier	INT_MAX
>6313	MultiplicativeExpression	nSrcXSize * nSrcYSize
>6314	Identifier	nSrcYSize
>6315	Identifier	nSrcXSize
>6316	RelationalExpression	nSrcXSize > INT_MAX / nSrcYSize
>6317	MultiplicativeExpression	INT_MAX / nSrcYSize
>6318	Identifier	nSrcYSize
>6319	Identifier	INT_MAX
>6320	Identifier	nSrcXSize
>6321	EqualityExpression	nSrcYSize != 0
>6322	PrimaryExpression	0
>6323	Identifier	nSrcYSize
>6324	EqualityExpression	nSrcXSize != 0
>6325	PrimaryExpression	0
>6326	Identifier	nSrcXSize
>6327	ExpressionStatement	 
>6328	AssignmentExpr	oWK . nSrcYSize = nSrcYSize
>6329	Identifier	nSrcYSize
>6330	MemberAccess	oWK . nSrcYSize
>6331	Identifier	nSrcYSize
>6332	Identifier	oWK
>6333	ExpressionStatement	 
>6334	AssignmentExpr	oWK . nSrcXSize = nSrcXSize
>6335	Identifier	nSrcXSize
>6336	MemberAccess	oWK . nSrcXSize
>6337	Identifier	nSrcXSize
>6338	Identifier	oWK
>6339	ExpressionStatement	 
>6340	AssignmentExpr	oWK . nSrcYOff = nSrcYOff
>6341	Identifier	nSrcYOff
>6342	MemberAccess	oWK . nSrcYOff
>6343	Identifier	nSrcYOff
>6344	Identifier	oWK
>6345	ExpressionStatement	 
>6346	AssignmentExpr	oWK . nSrcXOff = nSrcXOff
>6347	Identifier	nSrcXOff
>6348	MemberAccess	oWK . nSrcXOff
>6349	Identifier	nSrcXOff
>6350	Identifier	oWK
>6351	ExpressionStatement	 
>6352	AssignmentExpr	oWK . padfDstNoDataReal = psOptions -> padfDstNoDataReal
>6353	PtrMemberAccess	psOptions -> padfDstNoDataReal
>6354	Identifier	padfDstNoDataReal
>6355	Identifier	psOptions
>6356	MemberAccess	oWK . padfDstNoDataReal
>6357	Identifier	padfDstNoDataReal
>6358	Identifier	oWK
>6359	ExpressionStatement	 
>6360	AssignmentExpr	oWK . papszWarpOptions = psOptions -> papszWarpOptions
>6361	PtrMemberAccess	psOptions -> papszWarpOptions
>6362	Identifier	papszWarpOptions
>6363	Identifier	psOptions
>6364	MemberAccess	oWK . papszWarpOptions
>6365	Identifier	papszWarpOptions
>6366	Identifier	oWK
>6367	ExpressionStatement	 
>6368	AssignmentExpr	oWK . dfProgressScale = dfProgressScale
>6369	Identifier	dfProgressScale
>6370	MemberAccess	oWK . dfProgressScale
>6371	Identifier	dfProgressScale
>6372	Identifier	oWK
>6373	ExpressionStatement	 
>6374	AssignmentExpr	oWK . dfProgressBase = dfProgressBase
>6375	Identifier	dfProgressBase
>6376	MemberAccess	oWK . dfProgressBase
>6377	Identifier	dfProgressBase
>6378	Identifier	oWK
>6379	ExpressionStatement	 
>6380	AssignmentExpr	oWK . pProgress = psOptions -> pProgressArg
>6381	PtrMemberAccess	psOptions -> pProgressArg
>6382	Identifier	pProgressArg
>6383	Identifier	psOptions
>6384	MemberAccess	oWK . pProgress
>6385	Identifier	pProgress
>6386	Identifier	oWK
>6387	ExpressionStatement	 
>6388	AssignmentExpr	oWK . pfnProgress = psOptions -> pfnProgress
>6389	PtrMemberAccess	psOptions -> pfnProgress
>6390	Identifier	pfnProgress
>6391	Identifier	psOptions
>6392	MemberAccess	oWK . pfnProgress
>6393	Identifier	pfnProgress
>6394	Identifier	oWK
>6395	ExpressionStatement	 
>6396	AssignmentExpr	oWK . pTransformerArg = psOptions -> pTransformerArg
>6397	PtrMemberAccess	psOptions -> pTransformerArg
>6398	Identifier	pTransformerArg
>6399	Identifier	psOptions
>6400	MemberAccess	oWK . pTransformerArg
>6401	Identifier	pTransformerArg
>6402	Identifier	oWK
>6403	ExpressionStatement	 
>6404	AssignmentExpr	oWK . pfnTransformer = psOptions -> pfnTransformer
>6405	PtrMemberAccess	psOptions -> pfnTransformer
>6406	Identifier	pfnTransformer
>6407	Identifier	psOptions
>6408	MemberAccess	oWK . pfnTransformer
>6409	Identifier	pfnTransformer
>6410	Identifier	oWK
>6411	ExpressionStatement	 
>6412	AssignmentExpr	oWK . eWorkingDataType = psOptions -> eWorkingDataType
>6413	PtrMemberAccess	psOptions -> eWorkingDataType
>6414	Identifier	eWorkingDataType
>6415	Identifier	psOptions
>6416	MemberAccess	oWK . eWorkingDataType
>6417	Identifier	eWorkingDataType
>6418	Identifier	oWK
>6419	ExpressionStatement	 
>6420	AssignmentExpr	oWK . nBands = psOptions -> nBandCount
>6421	PtrMemberAccess	psOptions -> nBandCount
>6422	Identifier	nBandCount
>6423	Identifier	psOptions
>6424	MemberAccess	oWK . nBands
>6425	Identifier	nBands
>6426	Identifier	oWK
>6427	ExpressionStatement	 
>6428	AssignmentExpr	oWK . eResample = psOptions -> eResampleAlg
>6429	PtrMemberAccess	psOptions -> eResampleAlg
>6430	Identifier	eResampleAlg
>6431	Identifier	psOptions
>6432	MemberAccess	oWK . eResample
>6433	Identifier	eResample
>6434	Identifier	oWK
>6435	IdentifierDeclStatement	 
>6436	IdentifierDecl	oWK
>6437	Identifier	oWK
>6438	IdentifierDeclType	GDALWarpKernel
>6439	IfStatement	if ( nSrcXSize == 0 && nSrcYSize == 0 )
>6440	CompoundStatement	 
>6441	IfStatement	if ( eErr != CE_None )
>6442	ReturnStatement	 
>6443	Identifier	eErr
>6444	Condition	 
>6445	EqualityExpression	eErr != CE_None
>6446	Identifier	CE_None
>6447	Identifier	eErr
>6448	ExpressionStatement	 
>6449	AssignmentExpr	eErr = ComputeSourceWindow ( nDstXOff , nDstYOff , nDstXSize , nDstYSize , & nSrcXOff , & nSrcYOff , & \
>6450	CallExpression	ComputeSourceWindow ( nDstXOff , nDstYOff , nDstXSize , nDstYSize , & nSrcXOff , & nSrcYOff , & nSrcXSize , & nSrcYSize )
>6451	ArgumentList	nDstXOff
>6452	Argument	& nSrcYSize
>6453	UnaryOp	& nSrcYSize
>6454	Identifier	nSrcYSize
>6455	UnaryOperator	&
>6456	Argument	& nSrcXSize
>6457	UnaryOp	& nSrcXSize
>6458	Identifier	nSrcXSize
>6459	UnaryOperator	&
>6460	Argument	& nSrcYOff
>6461	UnaryOp	& nSrcYOff
>6462	Identifier	nSrcYOff
>6463	UnaryOperator	&
>6464	Argument	& nSrcXOff
>6465	UnaryOp	& nSrcXOff
>6466	Identifier	nSrcXOff
>6467	UnaryOperator	&
>6468	Argument	nDstYSize
>6469	Identifier	nDstYSize
>6470	Argument	nDstXSize
>6471	Identifier	nDstXSize
>6472	Argument	nDstYOff
>6473	Identifier	nDstYOff
>6474	Argument	nDstXOff
>6475	Identifier	nDstXOff
>6476	Callee	ComputeSourceWindow
>6477	Identifier	ComputeSourceWindow
>6478	Identifier	eErr
>6479	Condition	 
>6480	AndExpression	nSrcXSize == 0 && nSrcYSize == 0
>6481	EqualityExpression	nSrcYSize == 0
>6482	PrimaryExpression	0
>6483	Identifier	nSrcYSize
>6484	EqualityExpression	nSrcXSize == 0
>6485	PrimaryExpression	0
>6486	Identifier	nSrcXSize
>6487	ExpressionStatement	 
>6488	CallExpression	CPLAssert ( eBufDataType == psOptions -> eWorkingDataType )
>6489	ArgumentList	eBufDataType == psOptions -> eWorkingDataType
>6490	Argument	eBufDataType == psOptions -> eWorkingDataType
>6491	EqualityExpression	eBufDataType == psOptions -> eWorkingDataType
>6492	PtrMemberAccess	psOptions -> eWorkingDataType
>6493	Identifier	eWorkingDataType
>6494	Identifier	psOptions
>6495	Identifier	eBufDataType
>6496	Callee	CPLAssert
>6497	Identifier	CPLAssert
>6498	ExpressionStatement	 
>6499	CastExpression	( void ) eBufDataType
>6500	Identifier	eBufDataType
>6501	CastTarget	void
>6502	IdentifierDeclStatement	 
>6503	IdentifierDecl	nWordSize = GDALGetDataTypeSize ( psOptions -> eWorkingDataType ) / 8
>6504	AssignmentExpr	nWordSize = GDALGetDataTypeSize ( psOptions -> eWorkingDataType ) / 8
>6505	MultiplicativeExpression	GDALGetDataTypeSize ( psOptions -> eWorkingDataType ) / 8
>6506	PrimaryExpression	8
>6507	CallExpression	GDALGetDataTypeSize ( psOptions -> eWorkingDataType )
>6508	ArgumentList	psOptions -> eWorkingDataType
>6509	Argument	psOptions -> eWorkingDataType
>6510	PtrMemberAccess	psOptions -> eWorkingDataType
>6511	Identifier	eWorkingDataType
>6512	Identifier	psOptions
>6513	Callee	GDALGetDataTypeSize
>6514	Identifier	GDALGetDataTypeSize
>6515	Identifier	nWordSize
>6516	Identifier	nWordSize
>6517	IdentifierDeclType	int
>6518	IdentifierDeclStatement	 
>6519	IdentifierDecl	i
>6520	Identifier	i
>6521	IdentifierDeclType	int
>6522	IdentifierDeclStatement	 
>6523	IdentifierDecl	eErr = CE_None
>6524	AssignmentExpr	eErr = CE_None
>6525	Identifier	CE_None
>6526	Identifier	CE_None
>6527	Identifier	eErr
>6528	IdentifierDeclType	CPLErr
>6667	FunctionDef	GDALWarpRegionToBuffer (GDALWarpOperationH hOperation , int nDstXOff , int nDstYOff , int nDstXSize , int nDstYSize , \
>6668	ParameterList	GDALWarpOperationH hOperation , int nDstXOff , int nDstYOff , int nDstXSize , int nDstYSize , void * pDataBuf , \
>6669	Parameter	 
>6670	Identifier	nSrcYSize
>6671	ParameterType	int
>6672	Parameter	 
>6673	Identifier	nSrcXSize
>6674	ParameterType	int
>6675	Parameter	 
>6676	Identifier	nSrcYOff
>6677	ParameterType	int
>6678	Parameter	 
>6679	Identifier	nSrcXOff
>6680	ParameterType	int
>6681	Parameter	 
>6682	Identifier	eBufDataType
>6683	ParameterType	GDALDataType
>6684	Parameter	 
>6685	Identifier	pDataBuf
>6686	ParameterType	void *
>6687	Parameter	 
>6688	Identifier	nDstYSize
>6689	ParameterType	int
>6690	Parameter	 
>6691	Identifier	nDstXSize
>6692	ParameterType	int
>6693	Parameter	 
>6694	Identifier	nDstYOff
>6695	ParameterType	int
>6696	Parameter	 
>6697	Identifier	nDstXOff
>6698	ParameterType	int
>6699	Parameter	 
>6700	Identifier	hOperation
>6701	ParameterType	GDALWarpOperationH
>6702	ReturnType	CPLErr
>6703	CompoundStatement	 
>6704	ReturnStatement	 
>6705	CallExpression	( ( GDALWarpOperation * ) hOperation ) -> WarpRegionToBuffer ( nDstXOff , nDstYOff , nDstXSize , nDstYSize , pDataBuf , \
>6706	ArgumentList	nDstXOff
>6707	Argument	nSrcYSize
>6708	Identifier	nSrcYSize
>6709	Argument	nSrcXSize
>6710	Identifier	nSrcXSize
>6711	Argument	nSrcYOff
>6712	Identifier	nSrcYOff
>6713	Argument	nSrcXOff
>6714	Identifier	nSrcXOff
>6715	Argument	eBufDataType
>6716	Identifier	eBufDataType
>6717	Argument	pDataBuf
>6718	Identifier	pDataBuf
>6719	Argument	nDstYSize
>6720	Identifier	nDstYSize
>6721	Argument	nDstXSize
>6722	Identifier	nDstXSize
>6723	Argument	nDstYOff
>6724	Identifier	nDstYOff
>6725	Argument	nDstXOff
>6726	Identifier	nDstXOff
>6727	Callee	( ( GDALWarpOperation * ) hOperation ) -> WarpRegionToBuffer
>6728	PtrMemberAccess	( ( GDALWarpOperation * ) hOperation ) -> WarpRegionToBuffer
>6729	Identifier	WarpRegionToBuffer
>6730	CastExpression	( GDALWarpOperation * ) hOperation
>6731	Identifier	hOperation
>6732	CastTarget	GDALWarpOperation *
>6733	ExpressionStatement	 
>6734	CallExpression	VALIDATE_POINTER1 ( hOperation , \"GDALWarpRegionToBuffer\" , CE_Failure )
>6735	ArgumentList	hOperation
>6736	Argument	CE_Failure
>6737	Identifier	CE_Failure
>6738	Argument	\"GDALWarpRegionToBuffer\"
>6739	PrimaryExpression	\"GDALWarpRegionToBuffer\"
>6740	Argument	hOperation
>6741	Identifier	hOperation
>6742	Callee	VALIDATE_POINTER1
>6743	Identifier	VALIDATE_POINTER1
>6761	FunctionDef	GDALWarpOperation 
>6762	ParameterList	GDALWarpKernel * poKernel , int iBand , const char * pszType
>6763	Parameter	 
>6764	Identifier	pszType
>6765	ParameterType	const char *
>6766	Parameter	 
>6767	Identifier	iBand
>6768	ParameterType	int
>6769	Parameter	 
>6770	Identifier	poKernel
>6771	ParameterType	GDALWarpKernel *
>6772	ReturnType	CPLErr
>6773	CompoundStatement	 
>6774	ReturnStatement	 
>6775	Identifier	CE_None
>6776	IfStatement	if ( * ppMask == NULL )
>6777	CompoundStatement	 
>6778	ExpressionStatement	 
>6779	CallExpression	memset ( * ppMask , nDefault , nBytes )
>6780	ArgumentList	* ppMask
>6781	Argument	nBytes
>6782	Identifier	nBytes
>6783	Argument	nDefault
>6784	Identifier	nDefault
>6785	Argument	* ppMask
>6786	UnaryOp	* ppMask
>6787	Identifier	ppMask
>6788	UnaryOperator	*
>6789	Callee	memset
>6790	Identifier	memset
>6791	IfStatement	if ( * ppMask == NULL )
>6792	CompoundStatement	 
>6793	ReturnStatement	 
>6794	Identifier	CE_Failure
>6795	ExpressionStatement	 
>6796	CallExpression	CPLError ( CE_Failure , CPLE_OutOfMemory , \"Out of memory allocating %d bytes for %s mask.\" , nBytes , pszType )
>6797	ArgumentList	CE_Failure
>6798	Argument	pszType
>6799	Identifier	pszType
>6800	Argument	nBytes
>6801	Identifier	nBytes
>6802	Argument	\"Out of memory allocating %d bytes for %s mask.\"
>6803	PrimaryExpression	\"Out of memory allocating %d bytes for %s mask.\"
>6804	Argument	CPLE_OutOfMemory
>6805	Identifier	CPLE_OutOfMemory
>6806	Argument	CE_Failure
>6807	Identifier	CE_Failure
>6808	Callee	CPLError
>6809	Identifier	CPLError
>6810	Condition	 
>6811	EqualityExpression	* ppMask == NULL
>6812	Identifier	NULL
>6813	UnaryOp	* ppMask
>6814	Identifier	ppMask
>6815	UnaryOperator	*
>6816	ExpressionStatement	 
>6817	AssignmentExpr	* ppMask = VSIMalloc ( nBytes )
>6818	CallExpression	VSIMalloc ( nBytes )
>6819	ArgumentList	nBytes
>6820	Argument	nBytes
>6821	Identifier	nBytes
>6822	Callee	VSIMalloc
>6823	Identifier	VSIMalloc
>6824	UnaryOp	* ppMask
>6825	Identifier	ppMask
>6826	UnaryOperator	*
>6827	IfStatement	if ( nBitsPerPixel == 32 )
>6828	ElseStatement	else
>6829	ExpressionStatement	 
>6830	AssignmentExpr	nBytes = ( nXSize * nYSize + nExtraElts + 31 ) / 8
>6831	MultiplicativeExpression	( nXSize * nYSize + nExtraElts + 31 ) / 8
>6832	PrimaryExpression	8
>6833	AdditiveExpression	nXSize * nYSize + nExtraElts + 31
>6834	AdditiveExpression	nExtraElts + 31
>6835	PrimaryExpression	31
>6836	Identifier	nExtraElts
>6837	MultiplicativeExpression	nXSize * nYSize
>6838	Identifier	nYSize
>6839	Identifier	nXSize
>6840	Identifier	nBytes
>6841	ExpressionStatement	 
>6842	AssignmentExpr	nBytes = ( nXSize * nYSize + nExtraElts ) * 4
>6843	MultiplicativeExpression	( nXSize * nYSize + nExtraElts ) * 4
>6844	PrimaryExpression	4
>6845	AdditiveExpression	nXSize * nYSize + nExtraElts
>6846	Identifier	nExtraElts
>6847	MultiplicativeExpression	nXSize * nYSize
>6848	Identifier	nYSize
>6849	Identifier	nXSize
>6850	Identifier	nBytes
>6851	Condition	 
>6852	EqualityExpression	nBitsPerPixel == 32
>6853	PrimaryExpression	32
>6854	Identifier	nBitsPerPixel
>6855	IdentifierDeclStatement	 
>6856	IdentifierDecl	nBytes
>6857	Identifier	nBytes
>6858	IdentifierDeclType	int
>6859	Condition	 
>6860	EqualityExpression	* ppMask == NULL
>6861	Identifier	NULL
>6862	UnaryOp	* ppMask
>6863	Identifier	ppMask
>6864	UnaryOperator	*
>6865	IfStatement	if ( EQUAL ( pszType , \"BandSrcValid\" ) )
>6866	ElseStatement	else
>6867	IfStatement	if ( EQUAL ( pszType , \"UnifiedSrcValid\" ) )
>6868	ElseStatement	else
>6869	IfStatement	if ( EQUAL ( pszType , \"UnifiedSrcDensity\" ) )
>6870	ElseStatement	else
>6871	IfStatement	if ( EQUAL ( pszType , \"DstValid\" ) )
>6872	ElseStatement	else
>6873	IfStatement	if ( EQUAL ( pszType , \"DstDensity\" ) )
>6874	ElseStatement	else
>6875	CompoundStatement	 
>6876	ReturnStatement	 
>6877	Identifier	CE_Failure
>6878	ExpressionStatement	 
>6879	CallExpression	CPLError ( CE_Failure , CPLE_AppDefined , \"Internal error in CreateKernelMask(%s).\" , pszType )
>6880	ArgumentList	CE_Failure
>6881	Argument	pszType
>6882	Identifier	pszType
>6883	Argument	\"Internal error in CreateKernelMask(%s).\"
>6884	PrimaryExpression	\"Internal error in CreateKernelMask(%s).\"
>6885	Argument	CPLE_AppDefined
>6886	Identifier	CPLE_AppDefined
>6887	Argument	CE_Failure
>6888	Identifier	CE_Failure
>6889	Callee	CPLError
>6890	Identifier	CPLError
>6891	CompoundStatement	 
>6892	ExpressionStatement	 
>6893	AssignmentExpr	nDefault = 0
>6894	PrimaryExpression	0
>6895	Identifier	nDefault
>6896	ExpressionStatement	 
>6897	AssignmentExpr	nBitsPerPixel = 32
>6898	PrimaryExpression	32
>6899	Identifier	nBitsPerPixel
>6900	ExpressionStatement	 
>6901	AssignmentExpr	nYSize = poKernel -> nDstYSize
>6902	PtrMemberAccess	poKernel -> nDstYSize
>6903	Identifier	nDstYSize
>6904	Identifier	poKernel
>6905	Identifier	nYSize
>6906	ExpressionStatement	 
>6907	AssignmentExpr	nXSize = poKernel -> nDstXSize
>6908	PtrMemberAccess	poKernel -> nDstXSize
>6909	Identifier	nDstXSize
>6910	Identifier	poKernel
>6911	Identifier	nXSize
>6912	ExpressionStatement	 
>6913	AssignmentExpr	ppMask = ( void * * ) & ( poKernel -> pafDstDensity )
>6914	CastExpression	( void * * ) & ( poKernel -> pafDstDensity )
>6915	UnaryOp	& ( poKernel -> pafDstDensity )
>6916	PtrMemberAccess	poKernel -> pafDstDensity
>6917	Identifier	pafDstDensity
>6918	Identifier	poKernel
>6919	UnaryOperator	&
>6920	CastTarget	void * *
>6921	Identifier	ppMask
>6922	Condition	 
>6923	CallExpression	EQUAL ( pszType , \"DstDensity\" )
>6924	ArgumentList	pszType
>6925	Argument	\"DstDensity\"
>6926	PrimaryExpression	\"DstDensity\"
>6927	Argument	pszType
>6928	Identifier	pszType
>6929	Callee	EQUAL
>6930	Identifier	EQUAL
>6931	CompoundStatement	 
>6932	ExpressionStatement	 
>6933	AssignmentExpr	nDefault = 0xff
>6934	PrimaryExpression	0xff
>6935	Identifier	nDefault
>6936	ExpressionStatement	 
>6937	AssignmentExpr	nBitsPerPixel = 1
>6938	PrimaryExpression	1
>6939	Identifier	nBitsPerPixel
>6940	ExpressionStatement	 
>6941	AssignmentExpr	nYSize = poKernel -> nDstYSize
>6942	PtrMemberAccess	poKernel -> nDstYSize
>6943	Identifier	nDstYSize
>6944	Identifier	poKernel
>6945	Identifier	nYSize
>6946	ExpressionStatement	 
>6947	AssignmentExpr	nXSize = poKernel -> nDstXSize
>6948	PtrMemberAccess	poKernel -> nDstXSize
>6949	Identifier	nDstXSize
>6950	Identifier	poKernel
>6951	Identifier	nXSize
>6952	ExpressionStatement	 
>6953	AssignmentExpr	ppMask = ( void * * ) & ( poKernel -> panDstValid )
>6954	CastExpression	( void * * ) & ( poKernel -> panDstValid )
>6955	UnaryOp	& ( poKernel -> panDstValid )
>6956	PtrMemberAccess	poKernel -> panDstValid
>6957	Identifier	panDstValid
>6958	Identifier	poKernel
>6959	UnaryOperator	&
>6960	CastTarget	void * *
>6961	Identifier	ppMask
>6962	Condition	 
>6963	CallExpression	EQUAL ( pszType , \"DstValid\" )
>6964	ArgumentList	pszType
>6965	Argument	\"DstValid\"
>6966	PrimaryExpression	\"DstValid\"
>6967	Argument	pszType
>6968	Identifier	pszType
>6969	Callee	EQUAL
>6970	Identifier	EQUAL
>6971	CompoundStatement	 
>6972	ExpressionStatement	 
>6973	AssignmentExpr	nDefault = 0
>6974	PrimaryExpression	0
>6975	Identifier	nDefault
>6976	ExpressionStatement	 
>6977	AssignmentExpr	nBitsPerPixel = 32
>6978	PrimaryExpression	32
>6979	Identifier	nBitsPerPixel
>6980	ExpressionStatement	 
>6981	AssignmentExpr	nYSize = poKernel -> nSrcYSize
>6982	PtrMemberAccess	poKernel -> nSrcYSize
>6983	Identifier	nSrcYSize
>6984	Identifier	poKernel
>6985	Identifier	nYSize
>6986	ExpressionStatement	 
>6987	AssignmentExpr	nXSize = poKernel -> nSrcXSize
>6988	PtrMemberAccess	poKernel -> nSrcXSize
>6989	Identifier	nSrcXSize
>6990	Identifier	poKernel
>6991	Identifier	nXSize
>6992	ExpressionStatement	 
>6993	AssignmentExpr	nExtraElts = WARP_EXTRA_ELTS
>6994	Identifier	WARP_EXTRA_ELTS
>6995	Identifier	nExtraElts
>6996	ExpressionStatement	 
>6997	AssignmentExpr	ppMask = ( void * * ) & ( poKernel -> pafUnifiedSrcDensity )
>6998	CastExpression	( void * * ) & ( poKernel -> pafUnifiedSrcDensity )
>6999	UnaryOp	& ( poKernel -> pafUnifiedSrcDensity )
>7000	PtrMemberAccess	poKernel -> pafUnifiedSrcDensity
>7001	Identifier	pafUnifiedSrcDensity
>7002	Identifier	poKernel
>7003	UnaryOperator	&
>7004	CastTarget	void * *
>7005	Identifier	ppMask
>7006	Condition	 
>7007	CallExpression	EQUAL ( pszType , \"UnifiedSrcDensity\" )
>7008	ArgumentList	pszType
>7009	Argument	\"UnifiedSrcDensity\"
>7010	PrimaryExpression	\"UnifiedSrcDensity\"
>7011	Argument	pszType
>7012	Identifier	pszType
>7013	Callee	EQUAL
>7014	Identifier	EQUAL
>7015	CompoundStatement	 
>7016	ExpressionStatement	 
>7017	AssignmentExpr	nDefault = 0xff
>7018	PrimaryExpression	0xff
>7019	Identifier	nDefault
>7020	ExpressionStatement	 
>7021	AssignmentExpr	nBitsPerPixel = 1
>7022	PrimaryExpression	1
>7023	Identifier	nBitsPerPixel
>7024	ExpressionStatement	 
>7025	AssignmentExpr	nYSize = poKernel -> nSrcYSize
>7026	PtrMemberAccess	poKernel -> nSrcYSize
>7027	Identifier	nSrcYSize
>7028	Identifier	poKernel
>7029	Identifier	nYSize
>7030	ExpressionStatement	 
>7031	AssignmentExpr	nXSize = poKernel -> nSrcXSize
>7032	PtrMemberAccess	poKernel -> nSrcXSize
>7033	Identifier	nSrcXSize
>7034	Identifier	poKernel
>7035	Identifier	nXSize
>7036	ExpressionStatement	 
>7037	AssignmentExpr	nExtraElts = WARP_EXTRA_ELTS
>7038	Identifier	WARP_EXTRA_ELTS
>7039	Identifier	nExtraElts
>7040	ExpressionStatement	 
>7041	AssignmentExpr	ppMask = ( void * * ) & ( poKernel -> panUnifiedSrcValid )
>7042	CastExpression	( void * * ) & ( poKernel -> panUnifiedSrcValid )
>7043	UnaryOp	& ( poKernel -> panUnifiedSrcValid )
>7044	PtrMemberAccess	poKernel -> panUnifiedSrcValid
>7045	Identifier	panUnifiedSrcValid
>7046	Identifier	poKernel
>7047	UnaryOperator	&
>7048	CastTarget	void * *
>7049	Identifier	ppMask
>7050	Condition	 
>7051	CallExpression	EQUAL ( pszType , \"UnifiedSrcValid\" )
>7052	ArgumentList	pszType
>7053	Argument	\"UnifiedSrcValid\"
>7054	PrimaryExpression	\"UnifiedSrcValid\"
>7055	Argument	pszType
>7056	Identifier	pszType
>7057	Callee	EQUAL
>7058	Identifier	EQUAL
>7059	CompoundStatement	 
>7060	ExpressionStatement	 
>7061	AssignmentExpr	nDefault = 0xff
>7062	PrimaryExpression	0xff
>7063	Identifier	nDefault
>7064	ExpressionStatement	 
>7065	AssignmentExpr	nBitsPerPixel = 1
>7066	PrimaryExpression	1
>7067	Identifier	nBitsPerPixel
>7068	ExpressionStatement	 
>7069	AssignmentExpr	nYSize = poKernel -> nSrcYSize
>7070	PtrMemberAccess	poKernel -> nSrcYSize
>7071	Identifier	nSrcYSize
>7072	Identifier	poKernel
>7073	Identifier	nYSize
>7074	ExpressionStatement	 
>7075	AssignmentExpr	nXSize = poKernel -> nSrcXSize
>7076	PtrMemberAccess	poKernel -> nSrcXSize
>7077	Identifier	nSrcXSize
>7078	Identifier	poKernel
>7079	Identifier	nXSize
>7080	ExpressionStatement	 
>7081	AssignmentExpr	nExtraElts = WARP_EXTRA_ELTS
>7082	Identifier	WARP_EXTRA_ELTS
>7083	Identifier	nExtraElts
>7084	ExpressionStatement	 
>7085	AssignmentExpr	ppMask = ( void * * ) & ( poKernel -> papanBandSrcValid [ iBand ] )
>7086	CastExpression	( void * * ) & ( poKernel -> papanBandSrcValid [ iBand ] )
>7087	UnaryOp	& ( poKernel -> papanBandSrcValid [ iBand ] )
>7088	ArrayIndexing	poKernel -> papanBandSrcValid [ iBand ]
>7089	Identifier	iBand
>7090	PtrMemberAccess	poKernel -> papanBandSrcValid
>7091	Identifier	papanBandSrcValid
>7092	Identifier	poKernel
>7093	UnaryOperator	&
>7094	CastTarget	void * *
>7095	Identifier	ppMask
>7096	IfStatement	if ( poKernel -> papanBandSrcValid == NULL )
>7097	ExpressionStatement	 
>7098	AssignmentExpr	poKernel -> papanBandSrcValid = ( GUInt32 * * ) CPLCalloc ( sizeof ( void * ) , poKernel -> nBands )
>7099	CastExpression	( GUInt32 * * ) CPLCalloc ( sizeof ( void * ) , poKernel -> nBands )
>7100	CallExpression	CPLCalloc ( sizeof ( void * ) , poKernel -> nBands )
>7101	ArgumentList	sizeof ( void * )
>7102	Argument	poKernel -> nBands
>7103	PtrMemberAccess	poKernel -> nBands
>7104	Identifier	nBands
>7105	Identifier	poKernel
>7106	Argument	sizeof ( void * )
>7107	SizeofExpr	sizeof ( void * )
>7108	SizeofOperand	void *
>7109	Sizeof	sizeof
>7110	Callee	CPLCalloc
>7111	Identifier	CPLCalloc
>7112	CastTarget	GUInt32 * *
>7113	PtrMemberAccess	poKernel -> papanBandSrcValid
>7114	Identifier	papanBandSrcValid
>7115	Identifier	poKernel
>7116	Condition	 
>7117	EqualityExpression	poKernel -> papanBandSrcValid == NULL
>7118	Identifier	NULL
>7119	PtrMemberAccess	poKernel -> papanBandSrcValid
>7120	Identifier	papanBandSrcValid
>7121	Identifier	poKernel
>7122	Condition	 
>7123	CallExpression	EQUAL ( pszType , \"BandSrcValid\" )
>7124	ArgumentList	pszType
>7125	Argument	\"BandSrcValid\"
>7126	PrimaryExpression	\"BandSrcValid\"
>7127	Argument	pszType
>7128	Identifier	pszType
>7129	Callee	EQUAL
>7130	Identifier	EQUAL
>7131	IdentifierDeclStatement	 
>7132	IdentifierDecl	nExtraElts = 0
>7133	AssignmentExpr	nExtraElts = 0
>7134	PrimaryExpression	0
>7135	Identifier	nExtraElts
>7136	Identifier	nExtraElts
>7137	IdentifierDeclType	int
>7138	IdentifierDeclStatement	 
>7139	IdentifierDecl	nDefault
>7140	Identifier	nDefault
>7141	IdentifierDeclType	int
>7142	IdentifierDecl	nBitsPerPixel
>7143	Identifier	nBitsPerPixel
>7144	IdentifierDeclType	int
>7145	IdentifierDecl	nYSize
>7146	Identifier	nYSize
>7147	IdentifierDeclType	int
>7148	IdentifierDecl	nXSize
>7149	Identifier	nXSize
>7150	IdentifierDeclType	int
>7151	IdentifierDeclStatement	 
>7152	IdentifierDecl	* * ppMask
>7153	Identifier	ppMask
>7154	IdentifierDeclType	void * *
>7193	FunctionDef	GDALWarpOperation 
>7194	ParameterList	int nDstXOff , int nDstYOff , int nDstXSize , int nDstYSize , int * pnSrcXOff , int * pnSrcYOff , int * pnSrcXSize , \
>7195	Parameter	 
>7196	Identifier	pnSrcYSize
>7197	ParameterType	int *
>7198	Parameter	 
>7199	Identifier	pnSrcXSize
>7200	ParameterType	int *
>7201	Parameter	 
>7202	Identifier	pnSrcYOff
>7203	ParameterType	int *
>7204	Parameter	 
>7205	Identifier	pnSrcXOff
>7206	ParameterType	int *
>7207	Parameter	 
>7208	Identifier	nDstYSize
>7209	ParameterType	int
>7210	Parameter	 
>7211	Identifier	nDstXSize
>7212	ParameterType	int
>7213	Parameter	 
>7214	Identifier	nDstYOff
>7215	ParameterType	int
>7216	Parameter	 
>7217	Identifier	nDstXOff
>7218	ParameterType	int
>7219	ReturnType	CPLErr
>7220	CompoundStatement	 
>7221	ReturnStatement	 
>7222	Identifier	CE_None
>7223	ExpressionStatement	 
>7224	AssignmentExpr	* pnSrcYSize = MAX ( 0 , * pnSrcYSize )
>7225	CallExpression	MAX ( 0 , * pnSrcYSize )
>7226	ArgumentList	0
>7227	Argument	* pnSrcYSize
>7228	UnaryOp	* pnSrcYSize
>7229	Identifier	pnSrcYSize
>7230	UnaryOperator	*
>7231	Argument	0
>7232	PrimaryExpression	0
>7233	Callee	MAX
>7234	Identifier	MAX
>7235	UnaryOp	* pnSrcYSize
>7236	Identifier	pnSrcYSize
>7237	UnaryOperator	*
>7238	ExpressionStatement	 
>7239	AssignmentExpr	* pnSrcXSize = MAX ( 0 , * pnSrcXSize )
>7240	CallExpression	MAX ( 0 , * pnSrcXSize )
>7241	ArgumentList	0
>7242	Argument	* pnSrcXSize
>7243	UnaryOp	* pnSrcXSize
>7244	Identifier	pnSrcXSize
>7245	UnaryOperator	*
>7246	Argument	0
>7247	PrimaryExpression	0
>7248	Callee	MAX
>7249	Identifier	MAX
>7250	UnaryOp	* pnSrcXSize
>7251	Identifier	pnSrcXSize
>7252	UnaryOperator	*
>7253	ExpressionStatement	 
>7254	AssignmentExpr	* pnSrcYSize = MIN ( GDALGetRasterYSize ( psOptions -> hSrcDS ) - * pnSrcYOff , ( ( int ) ceil ( dfMaxYOut ) ) \
>7255	CallExpression	MIN ( GDALGetRasterYSize ( psOptions -> hSrcDS ) - * pnSrcYOff , ( ( int ) ceil ( dfMaxYOut ) ) - * pnSrcYOff + \
>7256	ArgumentList	GDALGetRasterYSize ( psOptions -> hSrcDS ) - * pnSrcYOff
>7257	Argument	( ( int ) ceil ( dfMaxYOut ) ) - * pnSrcYOff + nResWinSize
>7258	AdditiveExpression	( ( int ) ceil ( dfMaxYOut ) ) - * pnSrcYOff + nResWinSize
>7259	AdditiveExpression	* pnSrcYOff + nResWinSize
>7260	Identifier	nResWinSize
>7261	UnaryOp	* pnSrcYOff
>7262	Identifier	pnSrcYOff
>7263	UnaryOperator	*
>7264	CastExpression	( int ) ceil ( dfMaxYOut )
>7265	CallExpression	ceil ( dfMaxYOut )
>7266	ArgumentList	dfMaxYOut
>7267	Argument	dfMaxYOut
>7268	Identifier	dfMaxYOut
>7269	Callee	ceil
>7270	Identifier	ceil
>7271	CastTarget	int
>7272	Argument	GDALGetRasterYSize ( psOptions -> hSrcDS ) - * pnSrcYOff
>7273	AdditiveExpression	GDALGetRasterYSize ( psOptions -> hSrcDS ) - * pnSrcYOff
>7274	UnaryOp	* pnSrcYOff
>7275	Identifier	pnSrcYOff
>7276	UnaryOperator	*
>7277	CallExpression	GDALGetRasterYSize ( psOptions -> hSrcDS )
>7278	ArgumentList	psOptions -> hSrcDS
>7279	Argument	psOptions -> hSrcDS
>7280	PtrMemberAccess	psOptions -> hSrcDS
>7281	Identifier	hSrcDS
>7282	Identifier	psOptions
>7283	Callee	GDALGetRasterYSize
>7284	Identifier	GDALGetRasterYSize
>7285	Callee	MIN
>7286	Identifier	MIN
>7287	UnaryOp	* pnSrcYSize
>7288	Identifier	pnSrcYSize
>7289	UnaryOperator	*
>7290	ExpressionStatement	 
>7291	AssignmentExpr	* pnSrcXSize = MIN ( GDALGetRasterXSize ( psOptions -> hSrcDS ) - * pnSrcXOff , ( ( int ) ceil ( dfMaxXOut ) ) \
>7292	CallExpression	MIN ( GDALGetRasterXSize ( psOptions -> hSrcDS ) - * pnSrcXOff , ( ( int ) ceil ( dfMaxXOut ) ) - * pnSrcXOff + \
>7293	ArgumentList	GDALGetRasterXSize ( psOptions -> hSrcDS ) - * pnSrcXOff
>7294	Argument	( ( int ) ceil ( dfMaxXOut ) ) - * pnSrcXOff + nResWinSize
>7295	AdditiveExpression	( ( int ) ceil ( dfMaxXOut ) ) - * pnSrcXOff + nResWinSize
>7296	AdditiveExpression	* pnSrcXOff + nResWinSize
>7297	Identifier	nResWinSize
>7298	UnaryOp	* pnSrcXOff
>7299	Identifier	pnSrcXOff
>7300	UnaryOperator	*
>7301	CastExpression	( int ) ceil ( dfMaxXOut )
>7302	CallExpression	ceil ( dfMaxXOut )
>7303	ArgumentList	dfMaxXOut
>7304	Argument	dfMaxXOut
>7305	Identifier	dfMaxXOut
>7306	Callee	ceil
>7307	Identifier	ceil
>7308	CastTarget	int
>7309	Argument	GDALGetRasterXSize ( psOptions -> hSrcDS ) - * pnSrcXOff
>7310	AdditiveExpression	GDALGetRasterXSize ( psOptions -> hSrcDS ) - * pnSrcXOff
>7311	UnaryOp	* pnSrcXOff
>7312	Identifier	pnSrcXOff
>7313	UnaryOperator	*
>7314	CallExpression	GDALGetRasterXSize ( psOptions -> hSrcDS )
>7315	ArgumentList	psOptions -> hSrcDS
>7316	Argument	psOptions -> hSrcDS
>7317	PtrMemberAccess	psOptions -> hSrcDS
>7318	Identifier	hSrcDS
>7319	Identifier	psOptions
>7320	Callee	GDALGetRasterXSize
>7321	Identifier	GDALGetRasterXSize
>7322	Callee	MIN
>7323	Identifier	MIN
>7324	UnaryOp	* pnSrcXSize
>7325	Identifier	pnSrcXSize
>7326	UnaryOperator	*
>7327	ExpressionStatement	 
>7328	AssignmentExpr	* pnSrcYOff = MIN ( * pnSrcYOff , GDALGetRasterYSize ( psOptions -> hSrcDS ) )
>7329	CallExpression	MIN ( * pnSrcYOff , GDALGetRasterYSize ( psOptions -> hSrcDS ) )
>7330	ArgumentList	* pnSrcYOff
>7331	Argument	GDALGetRasterYSize ( psOptions -> hSrcDS )
>7332	CallExpression	GDALGetRasterYSize ( psOptions -> hSrcDS )
>7333	ArgumentList	psOptions -> hSrcDS
>7334	Argument	psOptions -> hSrcDS
>7335	PtrMemberAccess	psOptions -> hSrcDS
>7336	Identifier	hSrcDS
>7337	Identifier	psOptions
>7338	Callee	GDALGetRasterYSize
>7339	Identifier	GDALGetRasterYSize
>7340	Argument	* pnSrcYOff
>7341	UnaryOp	* pnSrcYOff
>7342	Identifier	pnSrcYOff
>7343	UnaryOperator	*
>7344	Callee	MIN
>7345	Identifier	MIN
>7346	UnaryOp	* pnSrcYOff
>7347	Identifier	pnSrcYOff
>7348	UnaryOperator	*
>7349	ExpressionStatement	 
>7350	AssignmentExpr	* pnSrcXOff = MIN ( * pnSrcXOff , GDALGetRasterXSize ( psOptions -> hSrcDS ) )
>7351	CallExpression	MIN ( * pnSrcXOff , GDALGetRasterXSize ( psOptions -> hSrcDS ) )
>7352	ArgumentList	* pnSrcXOff
>7353	Argument	GDALGetRasterXSize ( psOptions -> hSrcDS )
>7354	CallExpression	GDALGetRasterXSize ( psOptions -> hSrcDS )
>7355	ArgumentList	psOptions -> hSrcDS
>7356	Argument	psOptions -> hSrcDS
>7357	PtrMemberAccess	psOptions -> hSrcDS
>7358	Identifier	hSrcDS
>7359	Identifier	psOptions
>7360	Callee	GDALGetRasterXSize
>7361	Identifier	GDALGetRasterXSize
>7362	Argument	* pnSrcXOff
>7363	UnaryOp	* pnSrcXOff
>7364	Identifier	pnSrcXOff
>7365	UnaryOperator	*
>7366	Callee	MIN
>7367	Identifier	MIN
>7368	UnaryOp	* pnSrcXOff
>7369	Identifier	pnSrcXOff
>7370	UnaryOperator	*
>7371	ExpressionStatement	 
>7372	AssignmentExpr	* pnSrcYOff = MAX ( 0 , ( int ) floor ( dfMinYOut ) - nResWinSize )
>7373	CallExpression	MAX ( 0 , ( int ) floor ( dfMinYOut ) - nResWinSize )
>7374	ArgumentList	0
>7375	Argument	( int ) floor ( dfMinYOut ) - nResWinSize
>7376	AdditiveExpression	( int ) floor ( dfMinYOut ) - nResWinSize
>7377	Identifier	nResWinSize
>7378	CastExpression	( int ) floor ( dfMinYOut )
>7379	CallExpression	floor ( dfMinYOut )
>7380	ArgumentList	dfMinYOut
>7381	Argument	dfMinYOut
>7382	Identifier	dfMinYOut
>7383	Callee	floor
>7384	Identifier	floor
>7385	CastTarget	int
>7386	Argument	0
>7387	PrimaryExpression	0
>7388	Callee	MAX
>7389	Identifier	MAX
>7390	UnaryOp	* pnSrcYOff
>7391	Identifier	pnSrcYOff
>7392	UnaryOperator	*
>7393	ExpressionStatement	 
>7394	AssignmentExpr	* pnSrcXOff = MAX ( 0 , ( int ) floor ( dfMinXOut ) - nResWinSize )
>7395	CallExpression	MAX ( 0 , ( int ) floor ( dfMinXOut ) - nResWinSize )
>7396	ArgumentList	0
>7397	Argument	( int ) floor ( dfMinXOut ) - nResWinSize
>7398	AdditiveExpression	( int ) floor ( dfMinXOut ) - nResWinSize
>7399	Identifier	nResWinSize
>7400	CastExpression	( int ) floor ( dfMinXOut )
>7401	CallExpression	floor ( dfMinXOut )
>7402	ArgumentList	dfMinXOut
>7403	Argument	dfMinXOut
>7404	Identifier	dfMinXOut
>7405	Callee	floor
>7406	Identifier	floor
>7407	CastTarget	int
>7408	Argument	0
>7409	PrimaryExpression	0
>7410	Callee	MAX
>7411	Identifier	MAX
>7412	UnaryOp	* pnSrcXOff
>7413	Identifier	pnSrcXOff
>7414	UnaryOperator	*
>7415	IfStatement	if ( CSLFetchNameValue ( psOptions -> papszWarpOptions , \"SOURCE_EXTRA\" ) != NULL )
>7416	ElseStatement	else
>7417	IfStatement	if ( nFailedCount > 0 )
>7418	ExpressionStatement	 
>7419	AssignmentExpr	nResWinSize += 10
>7420	PrimaryExpression	10
>7421	Identifier	nResWinSize
>7422	Condition	 
>7423	RelationalExpression	nFailedCount > 0
>7424	PrimaryExpression	0
>7425	Identifier	nFailedCount
>7426	CompoundStatement	 
>7427	ExpressionStatement	 
>7428	AssignmentExpr	nResWinSize += atoi ( CSLFetchNameValue ( psOptions -> papszWarpOptions , \"SOURCE_EXTRA\" ) )
>7429	CallExpression	atoi ( CSLFetchNameValue ( psOptions -> papszWarpOptions , \"SOURCE_EXTRA\" ) )
>7430	ArgumentList	CSLFetchNameValue ( psOptions -> papszWarpOptions , \"SOURCE_EXTRA\" )
>7431	Argument	CSLFetchNameValue ( psOptions -> papszWarpOptions , \"SOURCE_EXTRA\" )
>7432	CallExpression	CSLFetchNameValue ( psOptions -> papszWarpOptions , \"SOURCE_EXTRA\" )
>7433	ArgumentList	psOptions -> papszWarpOptions
>7434	Argument	\"SOURCE_EXTRA\"
>7435	PrimaryExpression	\"SOURCE_EXTRA\"
>7436	Argument	psOptions -> papszWarpOptions
>7437	PtrMemberAccess	psOptions -> papszWarpOptions
>7438	Identifier	papszWarpOptions
>7439	Identifier	psOptions
>7440	Callee	CSLFetchNameValue
>7441	Identifier	CSLFetchNameValue
>7442	Callee	atoi
>7443	Identifier	atoi
>7444	Identifier	nResWinSize
>7445	Condition	 
>7446	EqualityExpression	CSLFetchNameValue ( psOptions -> papszWarpOptions , \"SOURCE_EXTRA\" ) != NULL
>7447	Identifier	NULL
>7448	CallExpression	CSLFetchNameValue ( psOptions -> papszWarpOptions , \"SOURCE_EXTRA\" )
>7449	ArgumentList	psOptions -> papszWarpOptions
>7450	Argument	\"SOURCE_EXTRA\"
>7451	PrimaryExpression	\"SOURCE_EXTRA\"
>7452	Argument	psOptions -> papszWarpOptions
>7453	PtrMemberAccess	psOptions -> papszWarpOptions
>7454	Identifier	papszWarpOptions
>7455	Identifier	psOptions
>7456	Callee	CSLFetchNameValue
>7457	Identifier	CSLFetchNameValue
>7458	IdentifierDeclStatement	 
>7459	IdentifierDecl	nResWinSize = GWKGetFilterRadius ( psOptions -> eResampleAlg )
>7460	AssignmentExpr	nResWinSize = GWKGetFilterRadius ( psOptions -> eResampleAlg )
>7461	CallExpression	GWKGetFilterRadius ( psOptions -> eResampleAlg )
>7462	ArgumentList	psOptions -> eResampleAlg
>7463	Argument	psOptions -> eResampleAlg
>7464	PtrMemberAccess	psOptions -> eResampleAlg
>7465	Identifier	eResampleAlg
>7466	Identifier	psOptions
>7467	Callee	GWKGetFilterRadius
>7468	Identifier	GWKGetFilterRadius
>7469	Identifier	nResWinSize
>7470	Identifier	nResWinSize
>7471	IdentifierDeclType	int
>7472	IfStatement	if ( nFailedCount > 0 )
>7473	ExpressionStatement	 
>7474	CallExpression	CPLDebug ( \"GDAL\" , \"GDALWarpOperation
>7475	ArgumentList	\"GDAL\"
>7476	Argument	nSamplePoints
>7477	Identifier	nSamplePoints
>7478	Argument	nFailedCount
>7479	Identifier	nFailedCount
>7480	Argument	\"GDALWarpOperation
>7481	PrimaryExpression	\"GDALWarpOperation
>7482	Argument	\"GDAL\"
>7483	PrimaryExpression	\"GDAL\"
>7484	Callee	CPLDebug
>7485	Identifier	CPLDebug
>7486	Condition	 
>7487	RelationalExpression	nFailedCount > 0
>7488	PrimaryExpression	0
>7489	Identifier	nFailedCount
>7490	IfStatement	if ( nFailedCount > nSamplePoints - 5 )
>7491	CompoundStatement	 
>7492	ReturnStatement	 
>7493	Identifier	CE_Failure
>7494	ExpressionStatement	 
>7495	Statement	 
>7496	Statement	 
>7497	Statement	 
>7498	Statement	 
>7499	Statement	 
>7500	Statement	 
>7501	Statement	 
>7502	Statement	 
>7503	Statement	 
>7504	Statement	 
>7505	Statement	 
>7506	Statement	 
>7507	Statement	 
>7508	Condition	 
>7509	RelationalExpression	nFailedCount > nSamplePoints - 5
>7510	AdditiveExpression	nSamplePoints - 5
>7511	PrimaryExpression	5
>7512	Identifier	nSamplePoints
>7513	Identifier	nFailedCount
>7514	IfStatement	if ( ! bUseGrid && nFailedCount > 0 )
>7515	CompoundStatement	 
>7516	GotoStatement	 
>7517	Identifier	TryAgainWithGrid
>7518	ExpressionStatement	 
>7519	AssignmentExpr	bUseGrid = TRUE
>7520	Identifier	TRUE
>7521	Identifier	bUseGrid
>7522	Condition	 
>7523	AndExpression	! bUseGrid && nFailedCount > 0
>7524	RelationalExpression	nFailedCount > 0
>7525	PrimaryExpression	0
>7526	Identifier	nFailedCount
>7527	UnaryOp	! bUseGrid
>7528	Identifier	bUseGrid
>7529	UnaryOperator	!
>7530	ExpressionStatement	 
>7531	CallExpression	CPLFree ( pabSuccess )
>7532	ArgumentList	pabSuccess
>7533	Argument	pabSuccess
>7534	Identifier	pabSuccess
>7535	Callee	CPLFree
>7536	Identifier	CPLFree
>7537	ExpressionStatement	 
>7538	CallExpression	CPLFree ( padfX )
>7539	ArgumentList	padfX
>7540	Argument	padfX
>7541	Identifier	padfX
>7542	Callee	CPLFree
>7543	Identifier	CPLFree
>7544	ForStatement	for ( i = 0 ; i < nSamplePoints ; i ++ )
>7545	CompoundStatement	 
>7546	IfStatement	if ( ! bGotInitialPoint )
>7547	ElseStatement	else
>7548	CompoundStatement	 
>7549	ExpressionStatement	 
>7550	AssignmentExpr	dfMaxYOut = MAX ( dfMaxYOut , padfY [ i ] )
>7551	CallExpression	MAX ( dfMaxYOut , padfY [ i ] )
>7552	ArgumentList	dfMaxYOut
>7553	Argument	padfY [ i ]
>7554	ArrayIndexing	padfY [ i ]
>7555	Identifier	i
>7556	Identifier	padfY
>7557	Argument	dfMaxYOut
>7558	Identifier	dfMaxYOut
>7559	Callee	MAX
>7560	Identifier	MAX
>7561	Identifier	dfMaxYOut
>7562	ExpressionStatement	 
>7563	AssignmentExpr	dfMaxXOut = MAX ( dfMaxXOut , padfX [ i ] )
>7564	CallExpression	MAX ( dfMaxXOut , padfX [ i ] )
>7565	ArgumentList	dfMaxXOut
>7566	Argument	padfX [ i ]
>7567	ArrayIndexing	padfX [ i ]
>7568	Identifier	i
>7569	Identifier	padfX
>7570	Argument	dfMaxXOut
>7571	Identifier	dfMaxXOut
>7572	Callee	MAX
>7573	Identifier	MAX
>7574	Identifier	dfMaxXOut
>7575	ExpressionStatement	 
>7576	AssignmentExpr	dfMinYOut = MIN ( dfMinYOut , padfY [ i ] )
>7577	CallExpression	MIN ( dfMinYOut , padfY [ i ] )
>7578	ArgumentList	dfMinYOut
>7579	Argument	padfY [ i ]
>7580	ArrayIndexing	padfY [ i ]
>7581	Identifier	i
>7582	Identifier	padfY
>7583	Argument	dfMinYOut
>7584	Identifier	dfMinYOut
>7585	Callee	MIN
>7586	Identifier	MIN
>7587	Identifier	dfMinYOut
>7588	ExpressionStatement	 
>7589	AssignmentExpr	dfMinXOut = MIN ( dfMinXOut , padfX [ i ] )
>7590	CallExpression	MIN ( dfMinXOut , padfX [ i ] )
>7591	ArgumentList	dfMinXOut
>7592	Argument	padfX [ i ]
>7593	ArrayIndexing	padfX [ i ]
>7594	Identifier	i
>7595	Identifier	padfX
>7596	Argument	dfMinXOut
>7597	Identifier	dfMinXOut
>7598	Callee	MIN
>7599	Identifier	MIN
>7600	Identifier	dfMinXOut
>7601	CompoundStatement	 
>7602	ExpressionStatement	 
>7603	AssignmentExpr	dfMinYOut = dfMaxYOut = padfY [ i ]
>7604	AssignmentExpr	dfMaxYOut = padfY [ i ]
>7605	ArrayIndexing	padfY [ i ]
>7606	Identifier	i
>7607	Identifier	padfY
>7608	Identifier	dfMaxYOut
>7609	Identifier	dfMinYOut
>7610	ExpressionStatement	 
>7611	AssignmentExpr	dfMinXOut = dfMaxXOut = padfX [ i ]
>7612	AssignmentExpr	dfMaxXOut = padfX [ i ]
>7613	ArrayIndexing	padfX [ i ]
>7614	Identifier	i
>7615	Identifier	padfX
>7616	Identifier	dfMaxXOut
>7617	Identifier	dfMinXOut
>7618	ExpressionStatement	 
>7619	AssignmentExpr	bGotInitialPoint = TRUE
>7620	Identifier	TRUE
>7621	Identifier	bGotInitialPoint
>7622	Condition	 
>7623	UnaryOp	! bGotInitialPoint
>7624	Identifier	bGotInitialPoint
>7625	UnaryOperator	!
>7626	IfStatement	if ( ! pabSuccess [ i ] )
>7627	CompoundStatement	 
>7628	ContinueStatement	 
>7629	ExpressionStatement	 
>7630	IncDecOp	nFailedCount ++
>7631	IncDec	++
>7632	Identifier	nFailedCount
>7633	Condition	 
>7634	UnaryOp	! pabSuccess [ i ]
>7635	ArrayIndexing	pabSuccess [ i ]
>7636	Identifier	i
>7637	Identifier	pabSuccess
>7638	UnaryOperator	!
>7639	IncDecOp	 
>7640	IncDec	++
>7641	Identifier	i
>7642	Condition	 
>7643	RelationalExpression	i < nSamplePoints
>7644	Identifier	nSamplePoints
>7645	Identifier	i
>7646	ForInit	 
>7647	AssignmentExpr	i = 0
>7648	PrimaryExpression	0
>7649	Identifier	i
>7650	IdentifierDeclStatement	 
>7651	IdentifierDecl	i
>7652	Identifier	i
>7653	IdentifierDeclType	int
>7654	IdentifierDecl	nFailedCount = 0
>7655	AssignmentExpr	nFailedCount = 0
>7656	PrimaryExpression	0
>7657	Identifier	nFailedCount
>7658	Identifier	nFailedCount
>7659	IdentifierDeclType	int
>7660	IdentifierDeclStatement	 
>7661	IdentifierDecl	bGotInitialPoint = FALSE
>7662	AssignmentExpr	bGotInitialPoint = FALSE
>7663	Identifier	FALSE
>7664	Identifier	FALSE
>7665	Identifier	bGotInitialPoint
>7666	IdentifierDeclType	int
>7667	IdentifierDeclStatement	 
>7668	IdentifierDecl	dfMaxYOut = 0.0
>7669	AssignmentExpr	dfMaxYOut = 0.0
>7670	PrimaryExpression	0.0
>7671	Identifier	dfMaxYOut
>7672	Identifier	dfMaxYOut
>7673	IdentifierDeclType	double
>7674	IdentifierDecl	dfMaxXOut = 0.0
>7675	AssignmentExpr	dfMaxXOut = 0.0
>7676	PrimaryExpression	0.0
>7677	Identifier	dfMaxXOut
>7678	Identifier	dfMaxXOut
>7679	IdentifierDeclType	double
>7680	IdentifierDecl	dfMinYOut = 0.0
>7681	AssignmentExpr	dfMinYOut = 0.0
>7682	PrimaryExpression	0.0
>7683	Identifier	dfMinYOut
>7684	Identifier	dfMinYOut
>7685	IdentifierDeclType	double
>7686	IdentifierDecl	dfMinXOut = 0.0
>7687	AssignmentExpr	dfMinXOut = 0.0
>7688	PrimaryExpression	0.0
>7689	Identifier	dfMinXOut
>7690	Identifier	dfMinXOut
>7691	IdentifierDeclType	double
>7692	IfStatement	if ( ! psOptions -> pfnTransformer ( psOptions -> pTransformerArg , TRUE , nSamplePoints , padfX , padfY , padfZ , \
>7693	CompoundStatement	 
>7694	ReturnStatement	 
>7695	Identifier	CE_Failure
>7696	ExpressionStatement	 
>7697	Statement	 
>7698	Statement	 
>7699	Statement	 
>7700	Statement	 
>7701	Statement	 
>7702	Statement	 
>7703	Statement	 
>7704	Statement	 
>7705	Statement	 
>7706	ExpressionStatement	 
>7707	CallExpression	CPLFree ( pabSuccess )
>7708	ArgumentList	pabSuccess
>7709	Argument	pabSuccess
>7710	Identifier	pabSuccess
>7711	Callee	CPLFree
>7712	Identifier	CPLFree
>7713	ExpressionStatement	 
>7714	CallExpression	CPLFree ( padfX )
>7715	ArgumentList	padfX
>7716	Argument	padfX
>7717	Identifier	padfX
>7718	Callee	CPLFree
>7719	Identifier	CPLFree
>7720	Condition	 
>7721	UnaryOp	! psOptions -> pfnTransformer ( psOptions -> pTransformerArg , TRUE , nSamplePoints , padfX , padfY , padfZ , pabSuccess )
>7722	CallExpression	psOptions -> pfnTransformer ( psOptions -> pTransformerArg , TRUE , nSamplePoints , padfX , padfY , padfZ , pabSuccess )
>7723	ArgumentList	psOptions -> pTransformerArg
>7724	Argument	pabSuccess
>7725	Identifier	pabSuccess
>7726	Argument	padfZ
>7727	Identifier	padfZ
>7728	Argument	padfY
>7729	Identifier	padfY
>7730	Argument	padfX
>7731	Identifier	padfX
>7732	Argument	nSamplePoints
>7733	Identifier	nSamplePoints
>7734	Argument	TRUE
>7735	Identifier	TRUE
>7736	Argument	psOptions -> pTransformerArg
>7737	PtrMemberAccess	psOptions -> pTransformerArg
>7738	Identifier	pTransformerArg
>7739	Identifier	psOptions
>7740	Callee	psOptions -> pfnTransformer
>7741	PtrMemberAccess	psOptions -> pfnTransformer
>7742	Identifier	pfnTransformer
>7743	Identifier	psOptions
>7744	UnaryOperator	!
>7745	ExpressionStatement	 
>7746	CallExpression	CPLAssert ( nSamplePoints == nSampleMax )
>7747	ArgumentList	nSamplePoints == nSampleMax
>7748	Argument	nSamplePoints == nSampleMax
>7749	EqualityExpression	nSamplePoints == nSampleMax
>7750	Identifier	nSampleMax
>7751	Identifier	nSamplePoints
>7752	Callee	CPLAssert
>7753	Identifier	CPLAssert
>7754	IfStatement	if ( bUseGrid )
>7755	ElseStatement	else
>7756	CompoundStatement	 
>7757	ForStatement	for ( dfRatio = 0.0 ; dfRatio <= 1.0 + dfStepSize * 0.5 ; dfRatio += dfStepSize )
>7758	CompoundStatement	 
>7759	ExpressionStatement	 
>7760	AssignmentExpr	padfZ [ nSamplePoints ++ ] = 0.0
>7761	PrimaryExpression	0.0
>7762	ArrayIndexing	padfZ [ nSamplePoints ++ ]
>7763	IncDecOp	nSamplePoints ++
>7764	IncDec	++
>7765	Identifier	nSamplePoints
>7766	Identifier	padfZ
>7767	ExpressionStatement	 
>7768	AssignmentExpr	padfY [ nSamplePoints ] = dfRatio * nDstYSize + nDstYOff
>7769	AdditiveExpression	dfRatio * nDstYSize + nDstYOff
>7770	Identifier	nDstYOff
>7771	MultiplicativeExpression	dfRatio * nDstYSize
>7772	Identifier	nDstYSize
>7773	Identifier	dfRatio
>7774	ArrayIndexing	padfY [ nSamplePoints ]
>7775	Identifier	nSamplePoints
>7776	Identifier	padfY
>7777	ExpressionStatement	 
>7778	AssignmentExpr	padfX [ nSamplePoints ] = nDstXSize + nDstXOff
>7779	AdditiveExpression	nDstXSize + nDstXOff
>7780	Identifier	nDstXOff
>7781	Identifier	nDstXSize
>7782	ArrayIndexing	padfX [ nSamplePoints ]
>7783	Identifier	nSamplePoints
>7784	Identifier	padfX
>7785	ExpressionStatement	 
>7786	AssignmentExpr	padfZ [ nSamplePoints ++ ] = 0.0
>7787	PrimaryExpression	0.0
>7788	ArrayIndexing	padfZ [ nSamplePoints ++ ]
>7789	IncDecOp	nSamplePoints ++
>7790	IncDec	++
>7791	Identifier	nSamplePoints
>7792	Identifier	padfZ
>7793	ExpressionStatement	 
>7794	AssignmentExpr	padfY [ nSamplePoints ] = dfRatio * nDstYSize + nDstYOff
>7795	AdditiveExpression	dfRatio * nDstYSize + nDstYOff
>7796	Identifier	nDstYOff
>7797	MultiplicativeExpression	dfRatio * nDstYSize
>7798	Identifier	nDstYSize
>7799	Identifier	dfRatio
>7800	ArrayIndexing	padfY [ nSamplePoints ]
>7801	Identifier	nSamplePoints
>7802	Identifier	padfY
>7803	ExpressionStatement	 
>7804	AssignmentExpr	padfX [ nSamplePoints ] = nDstXOff
>7805	Identifier	nDstXOff
>7806	ArrayIndexing	padfX [ nSamplePoints ]
>7807	Identifier	nSamplePoints
>7808	Identifier	padfX
>7809	ExpressionStatement	 
>7810	AssignmentExpr	padfZ [ nSamplePoints ++ ] = 0.0
>7811	PrimaryExpression	0.0
>7812	ArrayIndexing	padfZ [ nSamplePoints ++ ]
>7813	IncDecOp	nSamplePoints ++
>7814	IncDec	++
>7815	Identifier	nSamplePoints
>7816	Identifier	padfZ
>7817	ExpressionStatement	 
>7818	AssignmentExpr	padfY [ nSamplePoints ] = nDstYOff + nDstYSize
>7819	AdditiveExpression	nDstYOff + nDstYSize
>7820	Identifier	nDstYSize
>7821	Identifier	nDstYOff
>7822	ArrayIndexing	padfY [ nSamplePoints ]
>7823	Identifier	nSamplePoints
>7824	Identifier	padfY
>7825	ExpressionStatement	 
>7826	AssignmentExpr	padfX [ nSamplePoints ] = dfRatio * nDstXSize + nDstXOff
>7827	AdditiveExpression	dfRatio * nDstXSize + nDstXOff
>7828	Identifier	nDstXOff
>7829	MultiplicativeExpression	dfRatio * nDstXSize
>7830	Identifier	nDstXSize
>7831	Identifier	dfRatio
>7832	ArrayIndexing	padfX [ nSamplePoints ]
>7833	Identifier	nSamplePoints
>7834	Identifier	padfX
>7835	ExpressionStatement	 
>7836	AssignmentExpr	padfZ [ nSamplePoints ++ ] = 0.0
>7837	PrimaryExpression	0.0
>7838	ArrayIndexing	padfZ [ nSamplePoints ++ ]
>7839	IncDecOp	nSamplePoints ++
>7840	IncDec	++
>7841	Identifier	nSamplePoints
>7842	Identifier	padfZ
>7843	ExpressionStatement	 
>7844	AssignmentExpr	padfY [ nSamplePoints ] = nDstYOff
>7845	Identifier	nDstYOff
>7846	ArrayIndexing	padfY [ nSamplePoints ]
>7847	Identifier	nSamplePoints
>7848	Identifier	padfY
>7849	ExpressionStatement	 
>7850	AssignmentExpr	padfX [ nSamplePoints ] = dfRatio * nDstXSize + nDstXOff
>7851	AdditiveExpression	dfRatio * nDstXSize + nDstXOff
>7852	Identifier	nDstXOff
>7853	MultiplicativeExpression	dfRatio * nDstXSize
>7854	Identifier	nDstXSize
>7855	Identifier	dfRatio
>7856	ArrayIndexing	padfX [ nSamplePoints ]
>7857	Identifier	nSamplePoints
>7858	Identifier	padfX
>7859	AssignmentExpr	 
>7860	Identifier	dfStepSize
>7861	Identifier	dfRatio
>7862	Condition	 
>7863	RelationalExpression	dfRatio <= 1.0 + dfStepSize * 0.5
>7864	AdditiveExpression	1.0 + dfStepSize * 0.5
>7865	MultiplicativeExpression	dfStepSize * 0.5
>7866	PrimaryExpression	0.5
>7867	Identifier	dfStepSize
>7868	PrimaryExpression	1.0
>7869	Identifier	dfRatio
>7870	ForInit	 
>7871	AssignmentExpr	dfRatio = 0.0
>7872	PrimaryExpression	0.0
>7873	Identifier	dfRatio
>7874	CompoundStatement	 
>7875	ForStatement	for ( dfRatioY = 0.0 ; dfRatioY <= 1.0 + dfStepSize * 0.5 ; dfRatioY += dfStepSize )
>7876	CompoundStatement	 
>7877	ForStatement	for ( dfRatio = 0.0 ; dfRatio <= 1.0 + dfStepSize * 0.5 ; dfRatio += dfStepSize )
>7878	CompoundStatement	 
>7879	ExpressionStatement	 
>7880	AssignmentExpr	padfZ [ nSamplePoints ++ ] = 0.0
>7881	PrimaryExpression	0.0
>7882	ArrayIndexing	padfZ [ nSamplePoints ++ ]
>7883	IncDecOp	nSamplePoints ++
>7884	IncDec	++
>7885	Identifier	nSamplePoints
>7886	Identifier	padfZ
>7887	ExpressionStatement	 
>7888	AssignmentExpr	padfY [ nSamplePoints ] = dfRatioY * nDstYSize + nDstYOff
>7889	AdditiveExpression	dfRatioY * nDstYSize + nDstYOff
>7890	Identifier	nDstYOff
>7891	MultiplicativeExpression	dfRatioY * nDstYSize
>7892	Identifier	nDstYSize
>7893	Identifier	dfRatioY
>7894	ArrayIndexing	padfY [ nSamplePoints ]
>7895	Identifier	nSamplePoints
>7896	Identifier	padfY
>7897	ExpressionStatement	 
>7898	AssignmentExpr	padfX [ nSamplePoints ] = dfRatio * nDstXSize + nDstXOff
>7899	AdditiveExpression	dfRatio * nDstXSize + nDstXOff
>7900	Identifier	nDstXOff
>7901	MultiplicativeExpression	dfRatio * nDstXSize
>7902	Identifier	nDstXSize
>7903	Identifier	dfRatio
>7904	ArrayIndexing	padfX [ nSamplePoints ]
>7905	Identifier	nSamplePoints
>7906	Identifier	padfX
>7907	AssignmentExpr	 
>7908	Identifier	dfStepSize
>7909	Identifier	dfRatio
>7910	Condition	 
>7911	RelationalExpression	dfRatio <= 1.0 + dfStepSize * 0.5
>7912	AdditiveExpression	1.0 + dfStepSize * 0.5
>7913	MultiplicativeExpression	dfStepSize * 0.5
>7914	PrimaryExpression	0.5
>7915	Identifier	dfStepSize
>7916	PrimaryExpression	1.0
>7917	Identifier	dfRatio
>7918	ForInit	 
>7919	AssignmentExpr	dfRatio = 0.0
>7920	PrimaryExpression	0.0
>7921	Identifier	dfRatio
>7922	AssignmentExpr	 
>7923	Identifier	dfStepSize
>7924	Identifier	dfRatioY
>7925	Condition	 
>7926	RelationalExpression	dfRatioY <= 1.0 + dfStepSize * 0.5
>7927	AdditiveExpression	1.0 + dfStepSize * 0.5
>7928	MultiplicativeExpression	dfStepSize * 0.5
>7929	PrimaryExpression	0.5
>7930	Identifier	dfStepSize
>7931	PrimaryExpression	1.0
>7932	Identifier	dfRatioY
>7933	ForInit	 
>7934	AssignmentExpr	dfRatioY = 0.0
>7935	PrimaryExpression	0.0
>7936	Identifier	dfRatioY
>7937	IdentifierDeclStatement	 
>7938	IdentifierDecl	dfRatioY
>7939	Identifier	dfRatioY
>7940	IdentifierDeclType	double
>7941	Condition	 
>7942	Identifier	bUseGrid
>7943	ExpressionStatement	 
>7944	AssignmentExpr	padfZ = padfX + nSampleMax * 2
>7945	AdditiveExpression	padfX + nSampleMax * 2
>7946	MultiplicativeExpression	nSampleMax * 2
>7947	PrimaryExpression	2
>7948	Identifier	nSampleMax
>7949	Identifier	padfX
>7950	Identifier	padfZ
>7951	ExpressionStatement	 
>7952	AssignmentExpr	padfY = padfX + nSampleMax
>7953	AdditiveExpression	padfX + nSampleMax
>7954	Identifier	nSampleMax
>7955	Identifier	padfX
>7956	Identifier	padfY
>7957	IfStatement	if ( pabSuccess == NULL || padfX == NULL )
>7958	CompoundStatement	 
>7959	ReturnStatement	 
>7960	Identifier	CE_Failure
>7961	ExpressionStatement	 
>7962	CallExpression	CPLFree ( pabSuccess )
>7963	ArgumentList	pabSuccess
>7964	Argument	pabSuccess
>7965	Identifier	pabSuccess
>7966	Callee	CPLFree
>7967	Identifier	CPLFree
>7968	ExpressionStatement	 
>7969	CallExpression	CPLFree ( padfX )
>7970	ArgumentList	padfX
>7971	Argument	padfX
>7972	Identifier	padfX
>7973	Callee	CPLFree
>7974	Identifier	CPLFree
>7975	Condition	 
>7976	OrExpression	pabSuccess == NULL || padfX == NULL
>7977	EqualityExpression	padfX == NULL
>7978	Identifier	NULL
>7979	Identifier	padfX
>7980	EqualityExpression	pabSuccess == NULL
>7981	Identifier	NULL
>7982	Identifier	pabSuccess
>7983	ExpressionStatement	 
>7984	AssignmentExpr	padfX = ( double * ) VSIMalloc2 ( sizeof ( double ) * 3 , nSampleMax )
>7985	CastExpression	( double * ) VSIMalloc2 ( sizeof ( double ) * 3 , nSampleMax )
>7986	CallExpression	VSIMalloc2 ( sizeof ( double ) * 3 , nSampleMax )
>7987	ArgumentList	sizeof ( double ) * 3
>7988	Argument	nSampleMax
>7989	Identifier	nSampleMax
>7990	Argument	sizeof ( double ) * 3
>7991	MultiplicativeExpression	sizeof ( double ) * 3
>7992	PrimaryExpression	3
>7993	SizeofExpr	sizeof ( double )
>7994	SizeofOperand	double
>7995	Sizeof	sizeof
>7996	Callee	VSIMalloc2
>7997	Identifier	VSIMalloc2
>7998	CastTarget	double *
>7999	Identifier	padfX
>8000	ExpressionStatement	 
>8001	AssignmentExpr	pabSuccess = ( int * ) VSIMalloc2 ( sizeof ( int ) , nSampleMax )
>8002	CastExpression	( int * ) VSIMalloc2 ( sizeof ( int ) , nSampleMax )
>8003	CallExpression	VSIMalloc2 ( sizeof ( int ) , nSampleMax )
>8004	ArgumentList	sizeof ( int )
>8005	Argument	nSampleMax
>8006	Identifier	nSampleMax
>8007	Argument	sizeof ( int )
>8008	SizeofExpr	sizeof ( int )
>8009	SizeofOperand	int
>8010	Sizeof	sizeof
>8011	Callee	VSIMalloc2
>8012	Identifier	VSIMalloc2
>8013	CastTarget	int *
>8014	Identifier	pabSuccess
>8015	IfStatement	if ( bUseGrid )
>8016	ElseStatement	else
>8017	CompoundStatement	 
>8018	ExpressionStatement	 
>8019	AssignmentExpr	nSampleMax = nStepCount * 4
>8020	MultiplicativeExpression	nStepCount * 4
>8021	PrimaryExpression	4
>8022	Identifier	nStepCount
>8023	Identifier	nSampleMax
>8024	IfStatement	if ( nStepCount > INT_MAX / 4 )
>8025	CompoundStatement	 
>8026	ReturnStatement	 
>8027	Identifier	CE_Failure
>8028	ExpressionStatement	 
>8029	CallExpression	CPLError ( CE_Failure , CPLE_AppDefined , \"Too many steps 
>8030	ArgumentList	CE_Failure
>8031	Argument	nStepCount
>8032	Identifier	nStepCount
>8033	Argument	\"Too many steps 
>8034	PrimaryExpression	\"Too many steps 
>8035	Argument	CPLE_AppDefined
>8036	Identifier	CPLE_AppDefined
>8037	Argument	CE_Failure
>8038	Identifier	CE_Failure
>8039	Callee	CPLError
>8040	Identifier	CPLError
>8041	Condition	 
>8042	RelationalExpression	nStepCount > INT_MAX / 4
>8043	MultiplicativeExpression	INT_MAX / 4
>8044	PrimaryExpression	4
>8045	Identifier	INT_MAX
>8046	Identifier	nStepCount
>8047	CompoundStatement	 
>8048	ExpressionStatement	 
>8049	AssignmentExpr	nSampleMax = nStepCount * nStepCount
>8050	MultiplicativeExpression	nStepCount * nStepCount
>8051	Identifier	nStepCount
>8052	Identifier	nStepCount
>8053	Identifier	nSampleMax
>8054	IfStatement	if ( nStepCount > INT_MAX / nStepCount )
>8055	CompoundStatement	 
>8056	ReturnStatement	 
>8057	Identifier	CE_Failure
>8058	ExpressionStatement	 
>8059	CallExpression	CPLError ( CE_Failure , CPLE_AppDefined , \"Too many steps 
>8060	ArgumentList	CE_Failure
>8061	Argument	nStepCount
>8062	Identifier	nStepCount
>8063	Argument	\"Too many steps 
>8064	PrimaryExpression	\"Too many steps 
>8065	Argument	CPLE_AppDefined
>8066	Identifier	CPLE_AppDefined
>8067	Argument	CE_Failure
>8068	Identifier	CE_Failure
>8069	Callee	CPLError
>8070	Identifier	CPLError
>8071	Condition	 
>8072	RelationalExpression	nStepCount > INT_MAX / nStepCount
>8073	MultiplicativeExpression	INT_MAX / nStepCount
>8074	Identifier	nStepCount
>8075	Identifier	INT_MAX
>8076	Identifier	nStepCount
>8077	Condition	 
>8078	Identifier	bUseGrid
>8079	ExpressionStatement	 
>8080	AssignmentExpr	nSamplePoints = 0
>8081	PrimaryExpression	0
>8082	Identifier	nSamplePoints
>8083	Label	 
>8084	Identifier	TryAgainWithGrid
>8085	ExpressionStatement	 
>8086	AssignmentExpr	bUseGrid = CSLFetchBoolean ( psOptions -> papszWarpOptions , \"SAMPLE_GRID\" , FALSE )
>8087	CallExpression	CSLFetchBoolean ( psOptions -> papszWarpOptions , \"SAMPLE_GRID\" , FALSE )
>8088	ArgumentList	psOptions -> papszWarpOptions
>8089	Argument	FALSE
>8090	Identifier	FALSE
>8091	Argument	\"SAMPLE_GRID\"
>8092	PrimaryExpression	\"SAMPLE_GRID\"
>8093	Argument	psOptions -> papszWarpOptions
>8094	PtrMemberAccess	psOptions -> papszWarpOptions
>8095	Identifier	papszWarpOptions
>8096	Identifier	psOptions
>8097	Callee	CSLFetchBoolean
>8098	Identifier	CSLFetchBoolean
>8099	Identifier	bUseGrid
>8100	ExpressionStatement	 
>8101	AssignmentExpr	dfStepSize = 1.0 / ( nStepCount - 1 )
>8102	MultiplicativeExpression	1.0 / ( nStepCount - 1 )
>8103	AdditiveExpression	nStepCount - 1
>8104	PrimaryExpression	1
>8105	Identifier	nStepCount
>8106	PrimaryExpression	1.0
>8107	Identifier	dfStepSize
>8108	IfStatement	if ( CSLFetchNameValue ( psOptions -> papszWarpOptions , \"SAMPLE_STEPS\" ) != NULL )
>8109	CompoundStatement	 
>8110	ExpressionStatement	 
>8111	AssignmentExpr	nStepCount = MAX ( 2 , nStepCount )
>8112	CallExpression	MAX ( 2 , nStepCount )
>8113	ArgumentList	2
>8114	Argument	nStepCount
>8115	Identifier	nStepCount
>8116	Argument	2
>8117	PrimaryExpression	2
>8118	Callee	MAX
>8119	Identifier	MAX
>8120	Identifier	nStepCount
>8121	ExpressionStatement	 
>8122	AssignmentExpr	nStepCount = atoi ( CSLFetchNameValue ( psOptions -> papszWarpOptions , \"SAMPLE_STEPS\" ) )
>8123	CallExpression	atoi ( CSLFetchNameValue ( psOptions -> papszWarpOptions , \"SAMPLE_STEPS\" ) )
>8124	ArgumentList	CSLFetchNameValue ( psOptions -> papszWarpOptions , \"SAMPLE_STEPS\" )
>8125	Argument	CSLFetchNameValue ( psOptions -> papszWarpOptions , \"SAMPLE_STEPS\" )
>8126	CallExpression	CSLFetchNameValue ( psOptions -> papszWarpOptions , \"SAMPLE_STEPS\" )
>8127	ArgumentList	psOptions -> papszWarpOptions
>8128	Argument	\"SAMPLE_STEPS\"
>8129	PrimaryExpression	\"SAMPLE_STEPS\"
>8130	Argument	psOptions -> papszWarpOptions
>8131	PtrMemberAccess	psOptions -> papszWarpOptions
>8132	Identifier	papszWarpOptions
>8133	Identifier	psOptions
>8134	Callee	CSLFetchNameValue
>8135	Identifier	CSLFetchNameValue
>8136	Callee	atoi
>8137	Identifier	atoi
>8138	Identifier	nStepCount
>8139	Condition	 
>8140	EqualityExpression	CSLFetchNameValue ( psOptions -> papszWarpOptions , \"SAMPLE_STEPS\" ) != NULL
>8141	Identifier	NULL
>8142	CallExpression	CSLFetchNameValue ( psOptions -> papszWarpOptions , \"SAMPLE_STEPS\" )
>8143	ArgumentList	psOptions -> papszWarpOptions
>8144	Argument	\"SAMPLE_STEPS\"
>8145	PrimaryExpression	\"SAMPLE_STEPS\"
>8146	Argument	psOptions -> papszWarpOptions
>8147	PtrMemberAccess	psOptions -> papszWarpOptions
>8148	Identifier	papszWarpOptions
>8149	Identifier	psOptions
>8150	Callee	CSLFetchNameValue
>8151	Identifier	CSLFetchNameValue
>8152	IdentifierDeclStatement	 
>8153	IdentifierDecl	dfRatio
>8154	Identifier	dfRatio
>8155	IdentifierDeclType	double
>8156	IdentifierDeclStatement	 
>8157	IdentifierDecl	nSamplePoints
>8158	Identifier	nSamplePoints
>8159	IdentifierDeclType	int
>8160	IdentifierDeclStatement	 
>8161	IdentifierDecl	* padfZ
>8162	Identifier	padfZ
>8163	IdentifierDeclType	double *
>8164	IdentifierDecl	* padfY
>8165	Identifier	padfY
>8166	IdentifierDeclType	double *
>8167	IdentifierDecl	* padfX
>8168	Identifier	padfX
>8169	IdentifierDeclType	double *
>8170	IdentifierDeclStatement	 
>8171	IdentifierDecl	* pabSuccess = NULL
>8172	AssignmentExpr	* pabSuccess = NULL
>8173	Identifier	NULL
>8174	Identifier	NULL
>8175	Identifier	pabSuccess
>8176	IdentifierDeclType	int *
>8177	IdentifierDeclStatement	 
>8178	IdentifierDecl	bUseGrid
>8179	Identifier	bUseGrid
>8180	IdentifierDeclType	int
>8181	IdentifierDecl	nStepCount = 21
>8182	AssignmentExpr	nStepCount = 21
>8183	PrimaryExpression	21
>8184	Identifier	nStepCount
>8185	Identifier	nStepCount
>8186	IdentifierDeclType	int
>8187	IdentifierDecl	nSampleMax
>8188	Identifier	nSampleMax
>8189	IdentifierDeclType	int
>8190	IdentifierDeclStatement	 
>8191	IdentifierDecl	dfStepSize
>8192	Identifier	dfStepSize
>8193	IdentifierDeclType	double
>8259	FunctionDef	GDALWarpOperation 
>8260	ParameterList	const char * pszMessage
>8261	Parameter	 
>8262	Identifier	pszMessage
>8263	ParameterType	const char *
>8264	ReturnType	void
>8265	CompoundStatement	 
>8266	ExpressionStatement	 
>8267	AssignmentExpr	nLastTimeReported = nNewTime
>8268	Identifier	nNewTime
>8269	Identifier	nLastTimeReported
>8270	IfStatement	if ( pszMessage != NULL )
>8271	CompoundStatement	 
>8272	ExpressionStatement	 
>8273	CallExpression	CPLDebug ( \"WARP_TIMING\" , \"%s
>8274	ArgumentList	\"WARP_TIMING\"
>8275	Argument	( long ) ( nNewTime - nLastTimeReported )
>8276	CastExpression	( long ) ( nNewTime - nLastTimeReported )
>8277	AdditiveExpression	nNewTime - nLastTimeReported
>8278	Identifier	nLastTimeReported
>8279	Identifier	nNewTime
>8280	CastTarget	long
>8281	Argument	pszMessage
>8282	Identifier	pszMessage
>8283	Argument	\"%s
>8284	PrimaryExpression	\"%s
>8285	Argument	\"WARP_TIMING\"
>8286	PrimaryExpression	\"WARP_TIMING\"
>8287	Callee	CPLDebug
>8288	Identifier	CPLDebug
>8289	Condition	 
>8290	EqualityExpression	pszMessage != NULL
>8291	Identifier	NULL
>8292	Identifier	pszMessage
>8293	IdentifierDeclStatement	 
>8294	IdentifierDecl	nNewTime = VSITime ( NULL )
>8295	AssignmentExpr	nNewTime = VSITime ( NULL )
>8296	CallExpression	VSITime ( NULL )
>8297	ArgumentList	NULL
>8298	Argument	NULL
>8299	Identifier	NULL
>8300	Callee	VSITime
>8301	Identifier	VSITime
>8302	Identifier	nNewTime
>8303	Identifier	nNewTime
>8304	IdentifierDeclType	unsigned long
>8305	IfStatement	if ( ! bReportTimings )
>8306	ReturnStatement	 
>8307	Condition	 
>8308	UnaryOp	! bReportTimings
>8309	Identifier	bReportTimings
>8310	UnaryOperator	!
<5=7,6
<7=36,32,28,24,20,16,12,8
<8=9
<9=11,10
<12=13
<13=15,14
<16=17
<17=19,18
<20=21
<21=23,22
<24=25
<25=27,26
<28=29
<29=31,30
<32=33
<33=35,34
<36=37
<37=39,38
<53=55,54
<55=81,61,56
<56=57
<57=59,58
<59=60
<61=77,62
<62=70,63
<63=64
<64=68,65
<65=66
<66=67
<68=69
<70=71
<71=75,72
<72=73
<73=74
<75=76
<77=78
<78=80,79
<81=82
<82=84,83
<84=85
<92=95,94,93
<95=96
<96=97
<102=105,104,103
<105=106
<106=119,107
<107=112,108
<108=109
<109=111,110
<112=113
<113=117,114
<114=115
<115=116
<117=118
<119=120
<120=122,121
<128=131,130,129
<131=781,757,697,663,643,623,603,577,411,391,365,345,325,278,232,186,160,134,132
<132=133
<134=148,135
<135=147,146,145,144,143,142,141,140,139,138,136
<136=137
<148=149
<149=155,150
<150=152,151
<152=154,153
<155=157,156
<157=159,158
<160=174,161
<161=173,172,171,170,169,168,167,166,165,164,162
<162=163
<174=175
<175=181,176
<176=178,177
<178=180,179
<181=183,182
<183=185,184
<186=226,187
<187=188
<188=207,189
<189=192,190
<190=191
<192=193
<193=205,194
<194=203,201,199,195
<195=196
<196=198,197
<199=200
<201=202
<203=204
<205=206
<207=208
<208=221,209
<209=218,210
<210=216,211
<211=212
<212=213
<213=215,214
<216=217
<218=220,219
<221=223,222
<223=225,224
<226=227
<227=229,228
<229=231,230
<232=272,233
<233=234
<234=253,235
<235=238,236
<236=237
<238=239
<239=251,240
<240=249,247,245,241
<241=242
<242=244,243
<245=246
<247=248
<249=250
<251=252
<253=254
<254=267,255
<255=264,256
<256=262,257
<257=258
<258=259
<259=261,260
<262=263
<264=266,265
<267=269,268
<269=271,270
<272=273
<273=275,274
<275=277,276
<278=312,279
<279=280
<280=294,281
<281=293,292,291,290,289,288,287,286,285,284,282
<282=283
<294=295
<295=297,296
<297=310,298
<298=299
<299=300
<300=308,301
<301=304,302
<302=303
<304=305
<305=307,306
<308=309
<310=311
<312=313
<313=315,314
<315=323,316
<316=319,317
<317=318
<319=320
<320=322,321
<323=324
<325=339,326
<326=338,337,336,335,334,333,332,331,330,329,327
<327=328
<339=340
<340=342,341
<342=344,343
<345=359,346
<346=358,357,356,355,354,353,352,351,350,349,347
<347=348
<359=360
<360=362,361
<362=364,363
<365=379,366
<366=378,377,376,375,374,373,372,371,370,369,367
<367=368
<379=380
<380=386,381
<381=383,382
<383=385,384
<386=388,387
<388=390,389
<391=405,392
<392=404,403,402,401,400,399,398,397,396,395,393
<393=394
<405=406
<406=408,407
<408=410,409
<411=569,563,560,412
<412=514,462,413
<413=434,414
<414=417,415
<415=416
<417=418
<418=432,419
<419=430,428,426,420
<420=421
<421=423,422
<423=425,424
<426=427
<428=429
<430=431
<432=433
<434=435
<435=457,436
<436=438,437
<438=455,439
<439=440
<440=441
<441=453,442
<442=449,443
<443=444
<444=446,445
<446=448,447
<449=450
<450=452,451
<453=454
<455=456
<457=459,458
<459=461,460
<462=485,463
<463=466,464
<464=465
<466=467
<467=483,468
<468=481,479,477,475,469
<469=470
<470=472,471
<472=474,473
<475=476
<477=478
<479=480
<481=482
<483=484
<485=486
<486=509,487
<487=502,488
<488=497,489
<489=495,490
<490=491
<491=492
<492=494,493
<495=496
<497=499,498
<499=501,500
<502=504,503
<504=506,505
<506=508,507
<509=511,510
<511=513,512
<514=537,515
<515=518,516
<516=517
<518=519
<519=535,520
<520=533,531,529,527,521
<521=522
<522=524,523
<524=526,525
<527=528
<529=530
<531=532
<533=534
<535=536
<537=538
<538=553,539
<539=548,540
<540=546,541
<541=542
<542=543
<543=545,544
<546=547
<548=550,549
<550=552,551
<553=555,554
<555=557,556
<557=559,558
<560=562,561
<563=564
<564=568,565
<565=567,566
<569=570
<570=571
<571=576,575,572
<572=574,573
<577=591,578
<578=590,589,588,587,586,585,584,583,582,581,579
<579=580
<591=592
<592=598,593
<593=595,594
<595=597,596
<598=600,599
<600=602,601
<603=617,604
<604=616,615,614,613,612,611,610,609,608,607,605
<605=606
<617=618
<618=620,619
<620=622,621
<623=637,624
<624=636,635,634,633,632,631,630,629,628,627,625
<625=626
<637=638
<638=640,639
<640=642,641
<643=657,644
<644=656,655,654,653,652,651,650,649,648,647,645
<645=646
<657=658
<658=660,659
<660=662,661
<663=681,664
<664=680,679,678,677,676,675,674,673,672,671,670,669,668,667,665
<665=666
<681=682
<682=690,683
<683=685,684
<685=689,686
<686=688,687
<690=692,691
<692=696,693
<693=695,694
<697=715,698
<698=714,713,712,711,710,709,708,707,706,705,704,703,702,701,699
<699=700
<715=716
<716=752,717
<717=747,718
<718=742,719
<719=737,720
<720=732,721
<721=727,722
<722=724,723
<724=726,725
<727=729,728
<729=731,730
<732=734,733
<734=736,735
<737=739,738
<739=741,740
<742=744,743
<744=746,745
<747=749,748
<749=751,750
<752=754,753
<754=756,755
<757=775,758
<758=774,773,772,771,770,769,768,767,766,765,764,763,762,761,759
<759=760
<775=776
<776=778,777
<778=780,779
<781=795,782
<782=794,793,792,791,790,789,788,787,786,785,783
<783=784
<795=796
<796=798,797
<845=851,850,846
<846=847
<847=849,848
<851=1536,1526,1517,1493,1365,1001,983,968,952,876,864,854,852
<852=853
<854=860,855
<855=856
<856=858,857
<858=859
<860=861
<861=863,862
<864=869,865
<865=866
<866=868,867
<869=870
<870=875,871
<871=873,872
<873=874
<876=950,877
<877=878
<878=927,911,879
<879=880
<880=895,881
<881=893,882
<882=883
<883=890,884
<884=888,885
<885=886
<886=887
<888=889
<890=892,891
<893=894
<895=896
<896=910,909,897
<897=908,898
<898=906,899
<899=902,900
<900=901
<902=903
<903=905,904
<906=907
<911=923,912
<912=913
<913=921,914
<914=919,917,915
<915=916
<917=918
<919=920
<921=922
<923=924
<924=926,925
<927=928
<928=930,929
<930=948,931
<931=942,940,932
<932=933
<933=939,934
<934=938,935
<935=937,936
<940=941
<942=943
<943=947,944
<944=946,945
<948=949
<950=951
<952=953
<953=967,966,954
<954=965,955
<955=963,956
<956=959,957
<957=958
<959=960
<960=962,961
<963=964
<968=969
<969=982,970
<970=980,971
<971=976,974,972
<972=973
<974=975
<976=977
<977=979,978
<980=981
<983=995,984
<984=985
<985=986
<986=992,987
<987=991,988
<988=990,989
<992=994,993
<995=996
<996=998,997
<998=1000,999
<1001=1341,1002
<1002=1337,1331,1003
<1003=1327,1321,1318,1004
<1004=1298,1278,1253,1005
<1005=1243,1006
<1006=1236,1030,1007
<1007=1028,1008
<1008=1009
<1009=1025,1010
<1010=1023,1011
<1011=1019,1012
<1012=1013
<1013=1017,1014
<1014=1015
<1015=1016
<1017=1018
<1019=1020
<1020=1022,1021
<1023=1024
<1025=1027,1026
<1028=1029
<1030=1211,1207,1031
<1031=1032
<1032=1181,1177,1033
<1033=1034
<1034=1161,1157,1035
<1035=1036
<1036=1141,1137,1037
<1037=1038
<1038=1123,1119,1039
<1039=1040
<1040=1105,1101,1041
<1041=1042
<1042=1087,1083,1043
<1043=1044
<1044=1069,1065,1045
<1045=1046
<1046=1051,1047
<1047=1048
<1048=1050,1049
<1051=1052
<1052=1058,1053
<1053=1055,1054
<1055=1057,1056
<1058=1060,1059
<1060=1062,1061
<1062=1064,1063
<1065=1066
<1066=1068,1067
<1069=1070
<1070=1076,1071
<1071=1073,1072
<1073=1075,1074
<1076=1078,1077
<1078=1080,1079
<1080=1082,1081
<1083=1084
<1084=1086,1085
<1087=1088
<1088=1094,1089
<1089=1091,1090
<1091=1093,1092
<1094=1096,1095
<1096=1098,1097
<1098=1100,1099
<1101=1102
<1102=1104,1103
<1105=1106
<1106=1112,1107
<1107=1109,1108
<1109=1111,1110
<1112=1114,1113
<1114=1116,1115
<1116=1118,1117
<1119=1120
<1120=1122,1121
<1123=1124
<1124=1130,1125
<1125=1127,1126
<1127=1129,1128
<1130=1132,1131
<1132=1134,1133
<1134=1136,1135
<1137=1138
<1138=1140,1139
<1141=1142
<1142=1148,1143
<1143=1145,1144
<1145=1147,1146
<1148=1152,1149
<1149=1151,1150
<1152=1154,1153
<1154=1156,1155
<1157=1158
<1158=1160,1159
<1161=1162
<1162=1168,1163
<1163=1165,1164
<1165=1167,1166
<1168=1172,1169
<1169=1171,1170
<1172=1174,1173
<1174=1176,1175
<1177=1178
<1178=1180,1179
<1181=1182
<1182=1200,1183
<1183=1195,1184
<1184=1190,1185
<1185=1187,1186
<1187=1189,1188
<1190=1192,1191
<1192=1194,1193
<1195=1197,1196
<1197=1199,1198
<1200=1202,1201
<1202=1204,1203
<1204=1206,1205
<1207=1208
<1208=1210,1209
<1211=1212
<1212=1231,1213
<1213=1224,1214
<1214=1223,1215
<1215=1221,1216
<1216=1217
<1217=1218
<1218=1220,1219
<1221=1222
<1224=1226,1225
<1226=1228,1227
<1228=1230,1229
<1231=1233,1232
<1233=1235,1234
<1236=1237
<1237=1242,1241,1238
<1238=1240,1239
<1243=1244
<1244=1250,1245
<1245=1247,1246
<1247=1249,1248
<1250=1252,1251
<1253=1274,1254
<1254=1255
<1255=1271,1256
<1256=1269,1257
<1257=1265,1258
<1258=1259
<1259=1263,1260
<1260=1261
<1261=1262
<1263=1264
<1265=1266
<1266=1268,1267
<1269=1270
<1271=1273,1272
<1274=1275
<1275=1277,1276
<1278=1279
<1279=1297,1296,1280
<1280=1295,1281
<1281=1293,1282
<1282=1289,1283
<1283=1284
<1284=1286,1285
<1286=1288,1287
<1289=1290
<1290=1292,1291
<1293=1294
<1298=1299
<1299=1317,1316,1300
<1300=1315,1301
<1301=1313,1302
<1302=1309,1303
<1303=1304
<1304=1306,1305
<1306=1308,1307
<1309=1310
<1310=1312,1311
<1313=1314
<1318=1320,1319
<1321=1322
<1322=1326,1323
<1323=1325,1324
<1327=1328
<1328=1330,1329
<1331=1332
<1332=1334,1333
<1334=1336,1335
<1337=1338
<1338=1340,1339
<1341=1342
<1342=1360,1343
<1343=1355,1344
<1344=1350,1345
<1345=1347,1346
<1347=1349,1348
<1350=1352,1351
<1352=1354,1353
<1355=1357,1356
<1357=1359,1358
<1360=1362,1361
<1362=1364,1363
<1365=1457,1366
<1366=1453,1440,1421,1402,1367
<1367=1398,1392,1389,1368
<1368=1379,1369
<1369=1370
<1370=1374,1371
<1371=1373,1372
<1374=1376,1375
<1376=1378,1377
<1379=1380
<1380=1384,1381
<1381=1383,1382
<1384=1386,1385
<1386=1388,1387
<1389=1391,1390
<1392=1393
<1393=1397,1394
<1394=1396,1395
<1398=1399
<1399=1401,1400
<1402=1403
<1403=1418,1404
<1404=1417,1405
<1405=1415,1406
<1406=1407
<1407=1408
<1408=1412,1409
<1409=1411,1410
<1412=1414,1413
<1415=1416
<1418=1420,1419
<1421=1422
<1422=1437,1423
<1423=1436,1424
<1424=1434,1425
<1425=1426
<1426=1427
<1427=1431,1428
<1428=1430,1429
<1431=1433,1432
<1434=1435
<1437=1439,1438
<1440=1441
<1441=1450,1442
<1442=1448,1443
<1443=1444
<1444=1445
<1445=1447,1446
<1448=1449
<1450=1452,1451
<1453=1454
<1454=1456,1455
<1457=1458
<1458=1488,1459
<1459=1483,1460
<1460=1478,1461
<1461=1470,1462
<1462=1468,1463
<1463=1464
<1464=1465
<1465=1467,1466
<1468=1469
<1470=1476,1471
<1471=1472
<1472=1473
<1473=1475,1474
<1476=1477
<1478=1480,1479
<1480=1482,1481
<1483=1485,1484
<1485=1487,1486
<1488=1490,1489
<1490=1492,1491
<1493=1494
<1494=1514,1495
<1495=1512,1496
<1496=1508,1506,1497
<1497=1498
<1498=1504,1499
<1499=1502,1500
<1500=1501
<1502=1503
<1504=1505
<1506=1507
<1508=1509
<1509=1511,1510
<1512=1513
<1514=1516,1515
<1517=1518
<1518=1525,1519
<1519=1523,1520
<1520=1521
<1521=1522
<1523=1524
<1526=1532,1527
<1527=1528
<1528=1530,1529
<1530=1531
<1532=1533
<1533=1535,1534
<1536=1537
<1537=1542,1541,1538
<1538=1540,1539
<1607=1613,1612,1608
<1608=1609
<1609=1611,1610
<1613=1641,1640,1639,1638,1636,1618,1614
<1614=1615
<1615=1617,1616
<1618=1625,1619
<1619=1624,1622,1620
<1620=1621
<1622=1623
<1625=1626
<1626=1628,1627
<1628=1632,1629
<1629=1630
<1630=1631
<1632=1633
<1633=1635,1634
<1636=1637
<1641=1642
<1642=1644,1643
<1654=1660,1659,1655
<1655=1656
<1656=1658,1657
<1660=1668,1667,1666,1665,1664,1663,1661
<1661=1662
<1668=1670,1669
<1670=1671
<1687=1696,1695,1688
<1688=1692,1689
<1689=1691,1690
<1692=1694,1693
<1696=1760,1751,1697
<1697=1743,1739,1698
<1698=1699
<1699=1731,1729,1700
<1700=1701
<1701=1721,1717,1702
<1702=1703
<1703=1709,1707,1704
<1704=1705
<1705=1706
<1707=1708
<1709=1710
<1710=1714,1711
<1711=1713,1712
<1714=1716,1715
<1717=1718
<1718=1720,1719
<1721=1722
<1722=1726,1723
<1723=1725,1724
<1726=1728,1727
<1729=1730
<1731=1732
<1732=1736,1733
<1733=1735,1734
<1736=1738,1737
<1739=1740
<1740=1742,1741
<1743=1744
<1744=1748,1745
<1745=1747,1746
<1748=1750,1749
<1751=1752
<1752=1759,1758,1753
<1753=1757,1754
<1754=1756,1755
<1760=1761
<1761=1768,1767,1762
<1762=1766,1763
<1763=1765,1764
<1782=1797,1796,1783
<1783=1793,1790,1787,1784
<1784=1786,1785
<1787=1789,1788
<1790=1792,1791
<1793=1795,1794
<1797=2024,2011,1996,1992,1985,1942,1935,1820,1815,1800,1798
<1798=1799
<1800=1801
<1801=1811,1802
<1802=1809,1807,1803
<1803=1804
<1804=1806,1805
<1807=1808
<1809=1810
<1811=1812
<1812=1814,1813
<1815=1816
<1816=1818,1817
<1818=1819
<1820=1931,1927,1924,1821
<1821=1913,1898,1894,1885,1876,1833,1826,1822
<1822=1823
<1823=1825,1824
<1826=1829,1827
<1827=1828
<1829=1830
<1830=1832,1831
<1833=1834
<1834=1875,1835
<1835=1873,1836
<1836=1869,1865,1861,1857,1853,1849,1845,1841,1839,1837
<1837=1838
<1839=1840
<1841=1842
<1842=1844,1843
<1845=1846
<1846=1848,1847
<1849=1850
<1850=1852,1851
<1853=1854
<1854=1856,1855
<1857=1858
<1858=1860,1859
<1861=1862
<1862=1864,1863
<1865=1866
<1866=1868,1867
<1869=1870
<1870=1872,1871
<1873=1874
<1876=1877
<1877=1884,1883,1878
<1878=1882,1879
<1879=1881,1880
<1885=1886
<1886=1893,1892,1887
<1887=1891,1888
<1888=1890,1889
<1894=1895
<1895=1897,1896
<1898=1899
<1899=1912,1911,1900
<1900=1910,1901
<1901=1907,1902
<1902=1906,1903
<1903=1905,1904
<1907=1909,1908
<1913=1914
<1914=1923,1922,1915
<1915=1921,1916
<1916=1920,1917
<1917=1919,1918
<1924=1926,1925
<1927=1928
<1928=1930,1929
<1931=1932
<1932=1934,1933
<1935=1936
<1936=1941,1940,1937
<1937=1939,1938
<1942=1981,1977,1974,1943
<1943=1963,1948,1944
<1944=1945
<1945=1947,1946
<1948=1949
<1949=1962,1961,1950
<1950=1960,1951
<1951=1957,1952
<1952=1956,1953
<1953=1955,1954
<1957=1959,1958
<1963=1964
<1964=1973,1972,1965
<1965=1971,1966
<1966=1970,1967
<1967=1969,1968
<1974=1976,1975
<1977=1978
<1978=1980,1979
<1981=1982
<1982=1984,1983
<1985=1986
<1986=1991,1990,1987
<1987=1989,1988
<1992=1993
<1993=1995,1994
<1996=1997
<1997=2009,1998
<1998=2007,2005,2001,1999
<1999=2000
<2001=2002
<2002=2004,2003
<2005=2006
<2007=2008
<2009=2010
<2011=2012
<2012=2022,2013
<2013=2020,2018,2016,2014
<2014=2015
<2016=2017
<2018=2019
<2020=2021
<2022=2023
<2024=2025
<2025=2027,2026
<2027=2028
<2053=2071,2070,2054
<2054=2067,2064,2061,2058,2055
<2055=2057,2056
<2058=2060,2059
<2061=2063,2062
<2064=2066,2065
<2067=2069,2068
<2071=2089,2072
<2072=2073
<2073=2083,2074
<2074=2081,2079,2077,2075
<2075=2076
<2077=2078
<2079=2080
<2081=2082
<2083=2084
<2084=2086,2085
<2086=2088,2087
<2089=2090
<2090=2098,2091
<2091=2096,2094,2092
<2092=2093
<2094=2095
<2096=2097
<2098=2099
<2134=2140,2139,2135
<2135=2136
<2136=2138,2137
<2140=2289,2280,2141
<2141=2267,2249,2142
<2142=2143
<2143=2206,2153,2144
<2144=2145
<2145=2151,2146
<2146=2147
<2147=2148
<2148=2150,2149
<2151=2152
<2153=2154
<2154=2203,2155
<2155=2197,2156
<2156=2193,2189,2185,2181,2177,2173,2169,2165,2161,2157
<2157=2158
<2158=2160,2159
<2161=2162
<2162=2164,2163
<2165=2166
<2166=2168,2167
<2169=2170
<2170=2172,2171
<2173=2174
<2174=2176,2175
<2177=2178
<2178=2180,2179
<2181=2182
<2182=2184,2183
<2185=2186
<2186=2188,2187
<2189=2190
<2190=2192,2191
<2193=2194
<2194=2196,2195
<2197=2198
<2198=2200,2199
<2200=2202,2201
<2203=2205,2204
<2206=2243,2207
<2207=2232,2226,2217,2208
<2208=2209
<2209=2215,2210
<2210=2211
<2211=2212
<2212=2214,2213
<2215=2216
<2217=2218
<2218=2224,2219
<2219=2220
<2220=2221
<2221=2223,2222
<2224=2225
<2226=2227
<2227=2229,2228
<2229=2231,2230
<2232=2233
<2233=2241,2234
<2234=2237,2235
<2235=2236
<2237=2238
<2238=2240,2239
<2241=2242
<2243=2244
<2244=2246,2245
<2246=2248,2247
<2249=2256,2250
<2250=2251
<2251=2253,2252
<2253=2255,2254
<2256=2257
<2257=2265,2258
<2258=2263,2261,2259
<2259=2260
<2261=2262
<2263=2264
<2265=2266
<2267=2268
<2268=2279,2269
<2269=2277,2270
<2270=2273,2271
<2271=2272
<2273=2274
<2274=2276,2275
<2277=2278
<2280=2281
<2281=2288,2287,2282
<2282=2286,2283
<2283=2285,2284
<2289=2290
<2290=2297,2296,2291
<2291=2295,2292
<2292=2294,2293
<2323=2338,2337,2324
<2324=2334,2331,2328,2325
<2325=2327,2326
<2328=2330,2329
<2331=2333,2332
<2334=2336,2335
<2338=2852,2845,2838,2831,2821,2811,2804,2799,2786,2771,2766,2749,2741,2733,2725,2717,2713,2696,2689,2395,2391,2360,2353,2346,2341,2339
<2339=2340
<2341=2342
<2342=2344,2343
<2344=2345
<2346=2347
<2347=2351,2348
<2348=2349
<2349=2350
<2351=2352
<2353=2354
<2354=2358,2355
<2355=2356
<2356=2357
<2358=2359
<2360=2387,2383,2380,2361
<2361=2362
<2362=2374,2363
<2363=2364
<2364=2372,2365
<2365=2366
<2366=2367
<2367=2369,2368
<2369=2371,2370
<2372=2373
<2374=2375
<2375=2377,2376
<2377=2379,2378
<2380=2382,2381
<2383=2384
<2384=2386,2385
<2387=2388
<2388=2390,2389
<2391=2392
<2392=2394,2393
<2395=2685,2679,2676,2396
<2396=2667,2457,2397
<2397=2453,2398
<2398=2445,2434,2426,2413,2405,2399
<2399=2401,2400
<2401=2402
<2402=2404,2403
<2405=2406
<2406=2412,2407
<2407=2409,2408
<2409=2411,2410
<2413=2414
<2414=2424,2415
<2415=2422,2420,2416
<2416=2417
<2417=2419,2418
<2420=2421
<2422=2423
<2424=2425
<2426=2427
<2427=2429,2428
<2429=2431,2430
<2431=2433,2432
<2434=2435
<2435=2443,2436
<2436=2437
<2437=2438
<2438=2440,2439
<2440=2442,2441
<2443=2444
<2445=2446
<2446=2452,2447
<2447=2449,2448
<2449=2451,2450
<2453=2454
<2454=2456,2455
<2457=2663,2458
<2458=2652,2637,2627,2617,2613,2605,2565,2557,2546,2525,2499,2459
<2459=2495,2460
<2460=2486,2468,2461
<2461=2462
<2462=2466,2463
<2463=2464
<2464=2465
<2466=2467
<2468=2478,2469
<2469=2470
<2470=2476,2471
<2471=2474,2472
<2472=2473
<2474=2475
<2476=2477
<2478=2479
<2479=2481,2480
<2481=2483,2482
<2483=2485,2484
<2486=2487
<2487=2493,2488
<2488=2491,2489
<2489=2490
<2491=2492
<2493=2494
<2495=2496
<2496=2498,2497
<2499=2517,2500
<2500=2506,2502,2501
<2502=2503
<2503=2505,2504
<2506=2507
<2507=2515,2508
<2508=2513,2511,2509
<2509=2510
<2511=2512
<2513=2514
<2515=2516
<2517=2518
<2518=2520,2519
<2520=2522,2521
<2522=2524,2523
<2525=2526
<2526=2541,2527
<2527=2539,2528
<2528=2537,2529
<2529=2530
<2530=2536,2531
<2531=2535,2532
<2532=2534,2533
<2537=2538
<2539=2540
<2541=2543,2542
<2543=2545,2544
<2546=2547
<2547=2555,2548
<2548=2553,2551,2549
<2549=2550
<2551=2552
<2553=2554
<2555=2556
<2557=2558
<2558=2560,2559
<2560=2562,2561
<2562=2564,2563
<2565=2601,2584,2566
<2566=2567
<2567=2576,2568
<2568=2569
<2569=2571,2570
<2571=2573,2572
<2573=2575,2574
<2576=2577
<2577=2579,2578
<2579=2581,2580
<2581=2583,2582
<2584=2593,2585
<2585=2586
<2586=2588,2587
<2588=2590,2589
<2590=2592,2591
<2593=2594
<2594=2596,2595
<2596=2598,2597
<2598=2600,2599
<2601=2602
<2602=2604,2603
<2605=2606
<2606=2608,2607
<2608=2610,2609
<2610=2612,2611
<2613=2614
<2614=2616,2615
<2617=2618
<2618=2622,2619
<2619=2621,2620
<2622=2624,2623
<2624=2626,2625
<2627=2628
<2628=2632,2629
<2629=2631,2630
<2632=2634,2633
<2634=2636,2635
<2637=2638
<2638=2651,2650,2639
<2639=2649,2640
<2640=2646,2641
<2641=2645,2642
<2642=2644,2643
<2646=2648,2647
<2652=2653
<2653=2662,2661,2654
<2654=2660,2655
<2655=2659,2656
<2656=2658,2657
<2663=2664
<2664=2666,2665
<2667=2668
<2668=2675,2674,2669
<2669=2673,2670
<2670=2672,2671
<2676=2678,2677
<2679=2680
<2680=2684,2681
<2681=2683,2682
<2685=2686
<2686=2688,2687
<2689=2690
<2690=2695,2694,2691
<2691=2693,2692
<2696=2707,2697
<2697=2706,2705,2698
<2698=2704,2699
<2699=2703,2700
<2700=2702,2701
<2707=2712,2711,2708
<2708=2710,2709
<2713=2714
<2714=2716,2715
<2717=2718
<2718=2720,2719
<2720=2722,2721
<2722=2724,2723
<2725=2726
<2726=2728,2727
<2728=2730,2729
<2730=2732,2731
<2733=2734
<2734=2736,2735
<2736=2738,2737
<2738=2740,2739
<2741=2742
<2742=2744,2743
<2744=2746,2745
<2746=2748,2747
<2749=2750
<2750=2764,2751
<2751=2758,2756,2752
<2752=2753
<2753=2755,2754
<2756=2757
<2758=2759
<2759=2763,2760
<2760=2762,2761
<2764=2765
<2766=2767
<2767=2770,2769,2768
<2771=2772
<2772=2784,2773
<2773=2782,2780,2776,2774
<2774=2775
<2776=2777
<2777=2779,2778
<2780=2781
<2782=2783
<2784=2785
<2786=2787
<2787=2797,2788
<2788=2795,2793,2791,2789
<2789=2790
<2791=2792
<2793=2794
<2795=2796
<2797=2798
<2799=2800
<2800=2802,2801
<2802=2803
<2804=2805
<2805=2809,2806
<2806=2807
<2807=2808
<2809=2810
<2811=2812
<2812=2820,2819,2813
<2813=2818,2814
<2814=2816,2815
<2816=2817
<2821=2822
<2822=2830,2829,2823
<2823=2828,2824
<2824=2826,2825
<2826=2827
<2831=2832
<2832=2836,2833
<2833=2834
<2834=2835
<2836=2837
<2838=2839
<2839=2843,2840
<2840=2841
<2841=2842
<2843=2844
<2845=2846
<2846=2851,2847
<2847=2849,2848
<2849=2850
<2852=2853
<2853=2858,2854
<2854=2856,2855
<2856=2857
<2909=2927,2926,2910
<2910=2923,2920,2917,2914,2911
<2911=2913,2912
<2914=2916,2915
<2917=2919,2918
<2920=2922,2921
<2923=2925,2924
<2927=2945,2928
<2928=2929
<2929=2939,2930
<2930=2937,2935,2933,2931
<2931=2932
<2933=2934
<2935=2936
<2937=2938
<2939=2940
<2940=2942,2941
<2942=2944,2943
<2945=2946
<2946=2954,2947
<2947=2952,2950,2948
<2948=2949
<2950=2951
<2952=2953
<2954=2955
<2967=2970,2969,2968
<2970=2983,2979,2975,2971
<2971=2972
<2972=2974,2973
<2975=2976
<2976=2978,2977
<2979=2980
<2980=2982,2981
<2983=2984
<2984=2988,2985
<2985=2986
<2986=2987
<2988=2989
<2997=3012,3011,2998
<2998=3008,3005,3002,2999
<2999=3001,3000
<3002=3004,3003
<3005=3007,3006
<3008=3010,3009
<3012=3674,3670,3639,3612,3588,3584,3569,3558,3551,3527,3491,3472,3461,3457,3442,3431,3412,3401,3397,3377,3364,3334,3132,3099,3089,3079,3069,3059,3049,3039,3029,3019,3015,3013
<3013=3014
<3015=3016
<3016=3018,3017
<3019=3020
<3020=3022,3021
<3022=3028,3023
<3023=3025,3024
<3025=3027,3026
<3029=3030
<3030=3032,3031
<3032=3038,3033
<3033=3035,3034
<3035=3037,3036
<3039=3040
<3040=3042,3041
<3042=3048,3043
<3043=3045,3044
<3045=3047,3046
<3049=3050
<3050=3052,3051
<3052=3058,3053
<3053=3055,3054
<3055=3057,3056
<3059=3060
<3060=3062,3061
<3062=3068,3063
<3063=3065,3064
<3065=3067,3066
<3069=3070
<3070=3072,3071
<3072=3078,3073
<3073=3075,3074
<3075=3077,3076
<3079=3080
<3080=3082,3081
<3082=3088,3083
<3083=3085,3084
<3085=3087,3086
<3089=3090
<3090=3092,3091
<3092=3098,3093
<3093=3095,3094
<3095=3097,3096
<3099=3128,3100
<3100=3120,3101
<3101=3102
<3102=3119,3103
<3103=3118,3104
<3104=3116,3105
<3105=3114,3106
<3106=3107
<3107=3111,3108
<3108=3110,3109
<3111=3113,3112
<3114=3115
<3116=3117
<3120=3121
<3121=3127,3122
<3122=3124,3123
<3124=3126,3125
<3128=3129
<3129=3131,3130
<3132=3320,3133
<3133=3316,3298,3144,3134
<3134=3140,3138,3135
<3135=3136
<3136=3137
<3138=3139
<3140=3141
<3141=3143,3142
<3144=3278,3212,3145
<3145=3146
<3146=3203,3188,3179,3164,3147
<3147=3148
<3148=3163,3149
<3149=3161,3150
<3150=3159,3155,3153,3151
<3151=3152
<3153=3154
<3155=3156
<3156=3158,3157
<3159=3160
<3161=3162
<3164=3165
<3165=3178,3166
<3166=3176,3167
<3167=3174,3172,3170,3168
<3168=3169
<3170=3171
<3172=3173
<3174=3175
<3176=3177
<3179=3180
<3180=3187,3186,3181
<3181=3185,3182
<3182=3184,3183
<3188=3197,3189
<3189=3190
<3190=3196,3191
<3191=3193,3192
<3193=3195,3194
<3197=3198
<3198=3202,3199
<3199=3201,3200
<3203=3204
<3204=3211,3210,3205
<3205=3209,3206
<3206=3208,3207
<3212=3269,3254,3245,3230,3213
<3213=3214
<3214=3229,3215
<3215=3227,3216
<3216=3223,3221,3219,3217
<3217=3218
<3219=3220
<3221=3222
<3223=3224
<3224=3226,3225
<3227=3228
<3230=3231
<3231=3244,3232
<3232=3242,3233
<3233=3240,3238,3236,3234
<3234=3235
<3236=3237
<3238=3239
<3240=3241
<3242=3243
<3245=3246
<3246=3253,3252,3247
<3247=3251,3248
<3248=3250,3249
<3254=3263,3255
<3255=3256
<3256=3262,3257
<3257=3259,3258
<3259=3261,3260
<3263=3264
<3264=3268,3265
<3265=3267,3266
<3269=3270
<3270=3277,3276,3271
<3271=3275,3272
<3272=3274,3273
<3278=3279
<3279=3295,3280
<3280=3292,3281
<3281=3291,3282
<3282=3286,3283
<3283=3285,3284
<3286=3288,3287
<3288=3290,3289
<3292=3294,3293
<3295=3297,3296
<3298=3299
<3299=3315,3314,3300
<3300=3313,3301
<3301=3311,3302
<3302=3307,3305,3303
<3303=3304
<3305=3306
<3307=3308
<3308=3310,3309
<3311=3312
<3316=3317
<3317=3319,3318
<3320=3321
<3321=3329,3322
<3322=3326,3323
<3323=3325,3324
<3326=3328,3327
<3329=3333,3330
<3330=3332,3331
<3334=3360,3335
<3335=3336
<3336=3337
<3337=3358,3338
<3338=3347,3343,3339
<3339=3340
<3340=3342,3341
<3343=3344
<3344=3346,3345
<3347=3348
<3348=3356,3349
<3349=3352,3350
<3350=3351
<3352=3353
<3353=3355,3354
<3356=3357
<3358=3359
<3360=3361
<3361=3363,3362
<3364=3371,3365
<3365=3370,3369,3366
<3366=3368,3367
<3371=3376,3375,3372
<3372=3374,3373
<3377=3378
<3378=3396,3379
<3379=3381,3380
<3381=3389,3382
<3382=3386,3383
<3383=3385,3384
<3386=3388,3387
<3389=3393,3390
<3390=3392,3391
<3393=3395,3394
<3397=3398
<3398=3400,3399
<3401=3406,3402
<3402=3403
<3403=3405,3404
<3406=3407
<3407=3409,3408
<3409=3411,3410
<3412=3419,3413
<3413=3414
<3414=3418,3415
<3415=3417,3416
<3419=3420
<3420=3426,3421
<3421=3423,3422
<3423=3425,3424
<3426=3428,3427
<3428=3430,3429
<3431=3436,3432
<3432=3433
<3433=3435,3434
<3436=3437
<3437=3439,3438
<3439=3441,3440
<3442=3443
<3443=3456,3444
<3444=3448,3445
<3445=3447,3446
<3448=3454,3449
<3449=3450
<3450=3451
<3451=3453,3452
<3454=3455
<3457=3458
<3458=3460,3459
<3461=3466,3462
<3462=3463
<3463=3465,3464
<3466=3467
<3467=3469,3468
<3469=3471,3470
<3472=3479,3473
<3473=3474
<3474=3478,3475
<3475=3477,3476
<3479=3480
<3480=3486,3481
<3481=3483,3482
<3483=3485,3484
<3486=3488,3487
<3488=3490,3489
<3491=3515,3511,3492
<3492=3493
<3493=3498,3494
<3494=3495
<3495=3497,3496
<3498=3499
<3499=3508,3500
<3500=3502,3501
<3502=3506,3503
<3503=3504
<3504=3505
<3506=3507
<3508=3510,3509
<3511=3512
<3512=3514,3513
<3515=3516
<3516=3522,3517
<3517=3519,3518
<3519=3521,3520
<3522=3524,3523
<3524=3526,3525
<3527=3545,3528
<3528=3529
<3529=3544,3530
<3530=3542,3531
<3531=3538,3532
<3532=3533
<3533=3535,3534
<3535=3537,3536
<3538=3539
<3539=3541,3540
<3542=3543
<3545=3546
<3546=3548,3547
<3548=3550,3549
<3551=3552
<3552=3557,3556,3553
<3553=3555,3554
<3558=3563,3559
<3559=3560
<3560=3562,3561
<3563=3564
<3564=3566,3565
<3566=3568,3567
<3569=3570
<3570=3583,3571
<3571=3575,3572
<3572=3574,3573
<3575=3581,3576
<3576=3577
<3577=3578
<3578=3580,3579
<3581=3582
<3584=3585
<3585=3587,3586
<3588=3591,3589
<3589=3590
<3591=3592
<3592=3605,3593
<3593=3603,3594
<3594=3599,3597,3595
<3595=3596
<3597=3598
<3599=3600
<3600=3602,3601
<3603=3604
<3605=3609,3606
<3606=3608,3607
<3609=3611,3610
<3612=3635,3613
<3613=3616,3614
<3614=3615
<3616=3617
<3617=3633,3618
<3618=3631,3629,3627,3625,3623,3621,3619
<3619=3620
<3621=3622
<3623=3624
<3625=3626
<3627=3628
<3629=3630
<3631=3632
<3633=3634
<3635=3636
<3636=3638,3637
<3639=3640
<3640=3669,3641
<3641=3667,3642
<3642=3665,3663,3661,3659,3655,3651,3647,3643
<3643=3644
<3644=3646,3645
<3647=3648
<3648=3650,3649
<3651=3652
<3652=3654,3653
<3655=3656
<3656=3658,3657
<3659=3660
<3661=3662
<3663=3664
<3665=3666
<3667=3668
<3670=3671
<3671=3673,3672
<3674=3684,3681,3678,3675
<3675=3677,3676
<3678=3680,3679
<3681=3683,3682
<3684=3686,3685
<3754=3787,3786,3755
<3755=3783,3780,3777,3774,3771,3768,3765,3762,3759,3756
<3756=3758,3757
<3759=3761,3760
<3762=3764,3763
<3765=3767,3766
<3768=3770,3769
<3771=3773,3772
<3774=3776,3775
<3777=3779,3778
<3780=3782,3781
<3783=3785,3784
<3787=4491,4487,4480,4476,4460,4449,4412,4399,4374,4358,4042,3969,3936,3797,3790,3788
<3788=3789
<3790=3791
<3791=3795,3792
<3792=3793
<3793=3794
<3795=3796
<3797=3932,3798
<3798=3887,3806,3799
<3799=3800
<3800=3804,3801
<3801=3802
<3802=3803
<3804=3805
<3806=3870,3807
<3807=3860,3850,3841,3831,3808
<3808=3813,3809
<3809=3810
<3810=3812,3811
<3813=3814
<3814=3828,3815
<3815=3817,3816
<3817=3824,3818
<3818=3819
<3819=3820
<3820=3822,3821
<3822=3823
<3824=3825
<3825=3827,3826
<3828=3830,3829
<3831=3832
<3832=3840,3839,3833
<3833=3838,3834
<3834=3836,3835
<3836=3837
<3841=3842
<3842=3848,3843
<3843=3844
<3844=3845
<3845=3847,3846
<3848=3849
<3850=3851
<3851=3859,3858,3852
<3852=3857,3853
<3853=3855,3854
<3855=3856
<3860=3861
<3861=3869,3868,3862
<3862=3867,3863
<3863=3865,3864
<3865=3866
<3870=3871
<3871=3884,3872
<3872=3882,3873
<3873=3878,3876,3874
<3874=3875
<3876=3877
<3878=3879
<3879=3881,3880
<3882=3883
<3884=3886,3885
<3887=3888
<3888=3931,3889
<3889=3929,3890
<3890=3925,3923,3921,3919,3917,3915,3913,3911,3909,3905,3901,3897,3895,3893,3891
<3891=3892
<3893=3894
<3895=3896
<3897=3898
<3898=3900,3899
<3901=3902
<3902=3904,3903
<3905=3906
<3906=3908,3907
<3909=3910
<3911=3912
<3913=3914
<3915=3916
<3917=3918
<3919=3920
<3921=3922
<3923=3924
<3925=3926
<3926=3928,3927
<3929=3930
<3932=3933
<3933=3935,3934
<3936=3937
<3937=3968,3938
<3938=3966,3939
<3939=3964,3962,3960,3958,3956,3952,3950,3948,3946,3944,3942,3940
<3940=3941
<3942=3943
<3944=3945
<3946=3947
<3948=3949
<3950=3951
<3952=3953
<3953=3955,3954
<3956=3957
<3958=3959
<3960=3961
<3962=3963
<3964=3965
<3966=3967
<3969=4038,3970
<3970=3993,3978,3971
<3971=3972
<3972=3976,3973
<3973=3974
<3974=3975
<3976=3977
<3978=3989,3979
<3979=3982,3980
<3980=3981
<3982=3983
<3983=3987,3984
<3984=3985
<3985=3986
<3987=3988
<3989=3990
<3990=3992,3991
<3993=3994
<3994=4037,3995
<3995=4035,3996
<3996=4031,4029,4027,4025,4023,4021,4019,4017,4015,4011,4007,4003,4001,3999,3997
<3997=3998
<3999=4000
<4001=4002
<4003=4004
<4004=4006,4005
<4007=4008
<4008=4010,4009
<4011=4012
<4012=4014,4013
<4015=4016
<4017=4018
<4019=4020
<4021=4022
<4023=4024
<4025=4026
<4027=4028
<4029=4030
<4031=4032
<4032=4034,4033
<4035=4036
<4038=4039
<4039=4041,4040
<4042=4343,4043
<4043=4325,4313,4051,4044
<4044=4045
<4045=4049,4046
<4046=4047
<4047=4048
<4049=4050
<4051=4309,4303,4300,4052
<4052=4295,4291,4273,4219,4209,4053
<4053=4203,4174,4054
<4054=4055
<4055=4140,4128,4056
<4056=4057
<4057=4111,4085,4058
<4058=4059
<4059=4060
<4060=4061
<4061=4083,4062
<4062=4079,4077,4075,4073,4069,4067,4063
<4063=4064
<4064=4066,4065
<4067=4068
<4069=4070
<4070=4072,4071
<4073=4074
<4075=4076
<4077=4078
<4079=4080
<4080=4082,4081
<4083=4084
<4085=4086
<4086=4087
<4087=4109,4088
<4088=4105,4103,4101,4099,4095,4093,4089
<4089=4090
<4090=4092,4091
<4093=4094
<4095=4096
<4096=4098,4097
<4099=4100
<4101=4102
<4103=4104
<4105=4106
<4106=4108,4107
<4109=4110
<4111=4112
<4112=4118,4113
<4113=4115,4114
<4115=4117,4116
<4118=4127,4119
<4119=4125,4120
<4120=4121
<4121=4122
<4122=4124,4123
<4125=4126
<4128=4129
<4129=4130
<4130=4138,4131
<4131=4136,4134,4132
<4132=4133
<4134=4135
<4136=4137
<4138=4139
<4140=4141
<4141=4164,4142
<4142=4159,4143
<4143=4149,4144
<4144=4146,4145
<4146=4148,4147
<4149=4158,4150
<4150=4156,4151
<4151=4152
<4152=4153
<4153=4155,4154
<4156=4157
<4159=4161,4160
<4161=4163,4162
<4164=4173,4165
<4165=4171,4166
<4166=4167
<4167=4168
<4168=4170,4169
<4171=4172
<4174=4175
<4175=4201,4176
<4176=4199,4179,4177
<4177=4178
<4179=4180
<4180=4197,4181
<4181=4195,4182
<4182=4183
<4183=4193,4184
<4184=4191,4185
<4185=4186
<4186=4190,4187
<4187=4189,4188
<4191=4192
<4193=4194
<4195=4196
<4197=4198
<4199=4200
<4201=4202
<4203=4204
<4204=4206,4205
<4206=4208,4207
<4209=4210
<4210=4218,4211
<4211=4215,4212
<4212=4214,4213
<4215=4217,4216
<4219=4258,4237,4220
<4220=4221
<4221=4222
<4222=4223
<4223=4235,4224
<4224=4233,4229,4225
<4225=4226
<4226=4228,4227
<4229=4230
<4230=4232,4231
<4233=4234
<4235=4236
<4237=4248,4238
<4238=4239
<4239=4245,4240
<4240=4242,4241
<4242=4244,4243
<4245=4247,4246
<4248=4249
<4249=4255,4250
<4250=4252,4251
<4252=4254,4253
<4255=4257,4256
<4258=4259
<4259=4265,4260
<4260=4262,4261
<4262=4264,4263
<4265=4271,4266
<4266=4269,4267
<4267=4268
<4269=4270
<4271=4272
<4273=4274
<4274=4290,4289,4275
<4275=4288,4276
<4276=4287,4277
<4277=4285,4278
<4278=4283,4279
<4279=4280
<4280=4282,4281
<4283=4284
<4285=4286
<4291=4292
<4292=4294,4293
<4295=4296
<4296=4299,4298,4297
<4300=4302,4301
<4303=4304
<4304=4308,4305
<4305=4307,4306
<4309=4310
<4310=4312,4311
<4313=4314
<4314=4324,4323,4315
<4315=4322,4316
<4316=4320,4317
<4317=4318
<4318=4319
<4320=4321
<4325=4326
<4326=4342,4341,4327
<4327=4340,4328
<4328=4338,4329
<4329=4336,4334,4332,4330
<4330=4331
<4332=4333
<4334=4335
<4336=4337
<4338=4339
<4343=4344
<4344=4355,4345
<4345=4354,4346
<4346=4352,4347
<4347=4350,4348
<4348=4349
<4350=4351
<4352=4353
<4355=4357,4356
<4358=4359
<4359=4373,4372,4360
<4360=4371,4361
<4361=4369,4362
<4362=4365,4363
<4363=4364
<4365=4366
<4366=4368,4367
<4369=4370
<4374=4395,4375
<4375=4378,4376
<4376=4377
<4378=4379
<4379=4393,4380
<4380=4391,4389,4387,4381
<4381=4382
<4382=4386,4383
<4383=4385,4384
<4387=4388
<4389=4390
<4391=4392
<4393=4394
<4395=4396
<4396=4398,4397
<4399=4400
<4400=4411,4401
<4401=4409,4402
<4402=4403
<4403=4404
<4404=4408,4405
<4405=4407,4406
<4409=4410
<4412=4431,4413
<4413=4416,4414
<4414=4415
<4416=4417
<4417=4429,4418
<4418=4427,4425,4423,4421,4419
<4419=4420
<4421=4422
<4423=4424
<4425=4426
<4427=4428
<4429=4430
<4431=4432
<4432=4444,4433
<4433=4441,4434
<4434=4440,4435
<4435=4439,4436
<4436=4438,4437
<4441=4443,4442
<4444=4448,4445
<4445=4447,4446
<4449=4450
<4450=4459,4458,4451
<4451=4457,4452
<4452=4456,4453
<4453=4455,4454
<4460=4461
<4461=4475,4474,4462
<4462=4473,4463
<4463=4465,4464
<4465=4471,4466
<4466=4467
<4467=4468
<4468=4470,4469
<4471=4472
<4476=4477
<4477=4479,4478
<4480=4481
<4481=4485,4482
<4482=4483
<4483=4484
<4485=4486
<4487=4488
<4488=4490,4489
<4491=4492
<4492=4494,4493
<4566=4596,4595,4567
<4567=4592,4589,4586,4583,4580,4577,4574,4571,4568
<4568=4570,4569
<4571=4573,4572
<4574=4576,4575
<4577=4579,4578
<4580=4582,4581
<4583=4585,4584
<4586=4588,4587
<4589=4591,4590
<4592=4594,4593
<4596=4622,4597
<4597=4598
<4598=4616,4599
<4599=4614,4612,4610,4608,4606,4604,4602,4600
<4600=4601
<4602=4603
<4604=4605
<4606=4607
<4608=4609
<4610=4611
<4612=4613
<4614=4615
<4616=4617
<4617=4619,4618
<4619=4621,4620
<4622=4623
<4623=4631,4624
<4624=4629,4627,4625
<4625=4626
<4627=4628
<4629=4630
<4631=4632
<4648=4687,4686,4649
<4649=4683,4680,4677,4674,4671,4668,4665,4662,4659,4656,4653,4650
<4650=4652,4651
<4653=4655,4654
<4656=4658,4657
<4659=4661,4660
<4662=4664,4663
<4665=4667,4666
<4668=4670,4669
<4671=4673,4672
<4674=4676,4675
<4677=4679,4678
<4680=4682,4681
<4683=4685,4684
<4687=6522,6518,6502,6498,6487,6439,6435,6427,4688,4690,4699,4708,4717,4726,4768,4777,4786,4797,4854,4893,4923,4945,4975,5014,5274,5366,5390,5397,5676,5762,5900,5994,6031,6050,6056,6062,6068,6074,6081,6149,6191,6236,6261,6280,6327,6333,6339,6345,6351,6359,6367,6373,6379,6387,6395,6403,6411,6419
<4688=4689
<4690=4691
<4691=4697,4692
<4692=4693
<4693=4694
<4694=4696,4695
<4697=4698
<4699=4700
<4700=4706,4701
<4701=4702
<4702=4703
<4703=4705,4704
<4706=4707
<4708=4709
<4709=4715,4710
<4710=4711
<4711=4712
<4712=4714,4713
<4715=4716
<4717=4718
<4718=4724,4719
<4719=4720
<4720=4721
<4721=4723,4722
<4724=4725
<4726=4762,4727
<4727=4737,4728
<4728=4729
<4729=4735,4730
<4730=4731
<4731=4732
<4732=4734,4733
<4735=4736
<4737=4758,4752,4749,4738
<4738=4739
<4739=4747,4740
<4740=4741
<4741=4742
<4742=4744,4743
<4744=4746,4745
<4747=4748
<4749=4751,4750
<4752=4753
<4753=4757,4754
<4754=4756,4755
<4758=4759
<4759=4761,4760
<4762=4763
<4763=4765,4764
<4765=4767,4766
<4768=4769
<4769=4775,4770
<4770=4771
<4771=4772
<4772=4774,4773
<4775=4776
<4777=4778
<4778=4784,4779
<4779=4780
<4780=4781
<4781=4783,4782
<4784=4785
<4786=4787
<4787=4795,4788
<4788=4789
<4789=4790
<4790=4792,4791
<4792=4794,4793
<4795=4796
<4797=4844,4798
<4798=4799
<4799=4800
<4800=4843,4801
<4801=4841,4802
<4802=4839,4833,4829,4825,4821,4817,4813,4809,4807,4803
<4803=4804
<4804=4806,4805
<4807=4808
<4809=4810
<4810=4812,4811
<4813=4814
<4814=4816,4815
<4817=4818
<4818=4820,4819
<4821=4822
<4822=4824,4823
<4825=4826
<4826=4828,4827
<4829=4830
<4830=4832,4831
<4833=4834
<4834=4838,4835
<4835=4837,4836
<4839=4840
<4841=4842
<4844=4845
<4845=4851,4846
<4846=4848,4847
<4848=4850,4849
<4851=4853,4852
<4854=4889,4855
<4855=4882,4856
<4856=4871,4857
<4857=4860,4858
<4858=4859
<4860=4861
<4861=4869,4862
<4862=4867,4865,4863
<4863=4864
<4865=4866
<4867=4868
<4869=4870
<4871=4872
<4872=4881,4873
<4873=4879,4874
<4874=4877,4875
<4875=4876
<4877=4878
<4879=4880
<4882=4883
<4883=4887,4884
<4884=4885
<4885=4886
<4887=4888
<4889=4890
<4890=4892,4891
<4893=4913,4894
<4894=4895
<4895=4912,4896
<4896=4908,4897
<4897=4902,4898
<4898=4899
<4899=4901,4900
<4902=4903
<4903=4907,4904
<4904=4906,4905
<4908=4909
<4909=4911,4910
<4913=4914
<4914=4920,4915
<4915=4917,4916
<4917=4919,4918
<4920=4922,4921
<4923=4941,4924
<4924=4932,4925
<4925=4926
<4926=4930,4927
<4927=4928
<4928=4929
<4930=4931
<4932=4933
<4933=4940,4934
<4934=4936,4935
<4936=4937
<4937=4939,4938
<4941=4942
<4942=4944,4943
<4945=4965,4946
<4946=4947
<4947=4964,4948
<4948=4960,4949
<4949=4954,4950
<4950=4951
<4951=4953,4952
<4954=4955
<4955=4959,4956
<4956=4958,4957
<4960=4961
<4961=4963,4962
<4965=4966
<4966=4972,4967
<4967=4969,4968
<4969=4971,4970
<4972=4974,4973
<4975=5010,4976
<4976=5003,4977
<4977=4992,4978
<4978=4981,4979
<4979=4980
<4981=4982
<4982=4990,4983
<4983=4988,4986,4984
<4984=4985
<4986=4987
<4988=4989
<4990=4991
<4992=4993
<4993=5002,4994
<4994=5000,4995
<4995=4998,4996
<4996=4997
<4998=4999
<5000=5001
<5003=5004
<5004=5008,5005
<5005=5006
<5006=5007
<5008=5009
<5010=5011
<5011=5013,5012
<5014=5264,5015
<5015=5251,5234,5219,5187,5016
<5016=5179,5017
<5017=5172,5056,5049,5025,5018
<5018=5019
<5019=5023,5020
<5020=5021
<5021=5022
<5023=5024
<5025=5043,5039,5036,5026
<5026=5027
<5027=5031,5028
<5028=5030,5029
<5031=5033,5032
<5033=5035,5034
<5036=5038,5037
<5039=5040
<5040=5042,5041
<5043=5044
<5044=5048,5045
<5045=5047,5046
<5049=5050
<5050=5054,5051
<5051=5052
<5052=5053
<5054=5055
<5056=5168,5162,5159,5057
<5057=5154,5141,5131,5121,5080,5058
<5058=5074,5070,5067,5059
<5059=5060
<5060=5064,5061
<5061=5063,5062
<5064=5066,5065
<5067=5069,5068
<5070=5071
<5071=5073,5072
<5074=5075
<5075=5079,5076
<5076=5078,5077
<5080=5081
<5081=5120,5082
<5082=5118,5083
<5083=5116,5114,5110,5106,5102,5098,5094,5088,5086,5084
<5084=5085
<5086=5087
<5088=5089
<5089=5091,5090
<5091=5093,5092
<5094=5095
<5095=5097,5096
<5098=5099
<5099=5101,5100
<5102=5103
<5103=5105,5104
<5106=5107
<5107=5109,5108
<5110=5111
<5111=5113,5112
<5114=5115
<5116=5117
<5118=5119
<5121=5122
<5122=5128,5123
<5123=5125,5124
<5125=5127,5126
<5128=5130,5129
<5131=5132
<5132=5138,5133
<5133=5135,5134
<5135=5137,5136
<5138=5140,5139
<5141=5142
<5142=5152,5143
<5143=5150,5148,5144
<5144=5145
<5145=5147,5146
<5148=5149
<5150=5151
<5152=5153
<5154=5155
<5155=5158,5157,5156
<5159=5161,5160
<5162=5163
<5163=5167,5164
<5164=5166,5165
<5168=5169
<5169=5171,5170
<5172=5176,5173
<5173=5175,5174
<5176=5178,5177
<5179=5180
<5180=5184,5181
<5181=5183,5182
<5184=5186,5185
<5187=5215,5188
<5188=5202,5189
<5189=5190
<5190=5201,5191
<5191=5200,5192
<5192=5198,5193
<5193=5196,5194
<5194=5195
<5196=5197
<5198=5199
<5202=5203
<5203=5214,5204
<5204=5213,5205
<5205=5211,5206
<5206=5207
<5207=5208
<5208=5210,5209
<5211=5212
<5215=5216
<5216=5218,5217
<5219=5220
<5220=5233,5221
<5221=5231,5222
<5222=5227,5225,5223
<5223=5224
<5225=5226
<5227=5228
<5228=5230,5229
<5231=5232
<5234=5235
<5235=5250,5249,5236
<5236=5248,5237
<5237=5239,5238
<5239=5241,5240
<5241=5245,5242
<5242=5244,5243
<5245=5247,5246
<5251=5258,5252
<5252=5257,5256,5253
<5253=5255,5254
<5258=5263,5262,5259
<5259=5261,5260
<5264=5265
<5265=5271,5266
<5266=5268,5267
<5268=5270,5269
<5271=5273,5272
<5274=5339,5275
<5275=5324,5276
<5276=5320,5277
<5277=5278
<5278=5319,5279
<5279=5317,5280
<5280=5315,5311,5307,5303,5299,5295,5291,5287,5285,5281
<5281=5282
<5282=5284,5283
<5285=5286
<5287=5288
<5288=5290,5289
<5291=5292
<5292=5294,5293
<5295=5296
<5296=5298,5297
<5299=5300
<5300=5302,5301
<5303=5304
<5304=5306,5305
<5307=5308
<5308=5310,5309
<5311=5312
<5312=5314,5313
<5315=5316
<5317=5318
<5320=5321
<5321=5323,5322
<5324=5325
<5325=5338,5326
<5326=5336,5327
<5327=5332,5330,5328
<5328=5329
<5330=5331
<5332=5333
<5333=5335,5334
<5336=5337
<5339=5340
<5340=5363,5341
<5341=5358,5342
<5342=5350,5343
<5343=5347,5344
<5344=5346,5345
<5347=5349,5348
<5350=5352,5351
<5352=5356,5353
<5353=5354
<5354=5355
<5356=5357
<5358=5360,5359
<5360=5362,5361
<5363=5365,5364
<5366=5384,5367
<5367=5368
<5368=5383,5369
<5369=5381,5370
<5370=5377,5371
<5371=5372
<5372=5374,5373
<5374=5376,5375
<5377=5378
<5378=5380,5379
<5381=5382
<5384=5385
<5385=5387,5386
<5387=5389,5388
<5390=5391
<5391=5396,5395,5392
<5392=5394,5393
<5397=5658,5398
<5398=5546,5399
<5399=5529,5400
<5400=5512,5508,5493,5480,5416,5407,5401
<5401=5402
<5402=5404,5403
<5404=5406,5405
<5407=5408
<5408=5414,5409
<5409=5410
<5410=5411
<5411=5413,5412
<5414=5415
<5416=5476,5470,5467,5417
<5417=5437,5426,5418
<5418=5419
<5419=5421,5420
<5421=5423,5422
<5423=5425,5424
<5426=5427
<5427=5435,5428
<5428=5429
<5429=5430
<5430=5432,5431
<5432=5434,5433
<5435=5436
<5437=5459,5455,5452,5438
<5438=5439
<5439=5447,5440
<5440=5442,5441
<5442=5444,5443
<5444=5446,5445
<5447=5449,5448
<5449=5451,5450
<5452=5454,5453
<5455=5456
<5456=5458,5457
<5459=5460
<5460=5466,5461
<5461=5463,5462
<5463=5465,5464
<5467=5469,5468
<5470=5471
<5471=5475,5472
<5472=5474,5473
<5476=5477
<5477=5479,5478
<5480=5481
<5481=5491,5482
<5482=5487,5485,5483
<5483=5484
<5485=5486
<5487=5488
<5488=5490,5489
<5491=5492
<5493=5494
<5494=5507,5495
<5495=5505,5496
<5496=5501,5499,5497
<5497=5498
<5499=5500
<5501=5502
<5502=5504,5503
<5505=5506
<5508=5509
<5509=5511,5510
<5512=5513
<5513=5528,5527,5514
<5514=5526,5515
<5515=5517,5516
<5517=5519,5518
<5519=5523,5520
<5520=5522,5521
<5523=5525,5524
<5529=5530
<5530=5534,5531
<5531=5533,5532
<5534=5544,5535
<5535=5540,5538,5536
<5536=5537
<5538=5539
<5540=5541
<5541=5543,5542
<5544=5545
<5546=5654,5644,5641,5547
<5547=5626,5548
<5548=5622,5549
<5549=5617,5607,5597,5550
<5550=5551
<5551=5596,5552
<5552=5594,5553
<5553=5592,5590,5586,5582,5578,5574,5570,5562,5560,5554
<5554=5555
<5555=5557,5556
<5557=5559,5558
<5560=5561
<5562=5563
<5563=5569,5564
<5564=5566,5565
<5566=5568,5567
<5570=5571
<5571=5573,5572
<5574=5575
<5575=5577,5576
<5578=5579
<5579=5581,5580
<5582=5583
<5583=5585,5584
<5586=5587
<5587=5589,5588
<5590=5591
<5592=5593
<5594=5595
<5597=5598
<5598=5604,5599
<5599=5601,5600
<5601=5603,5602
<5604=5606,5605
<5607=5608
<5608=5614,5609
<5609=5611,5610
<5611=5613,5612
<5614=5616,5615
<5617=5618
<5618=5621,5620,5619
<5622=5623
<5623=5625,5624
<5626=5627
<5627=5640,5628
<5628=5638,5629
<5629=5634,5632,5630
<5630=5631
<5632=5633
<5634=5635
<5635=5637,5636
<5638=5639
<5641=5643,5642
<5644=5645
<5645=5649,5646
<5646=5648,5647
<5649=5653,5650
<5650=5652,5651
<5654=5655
<5655=5657,5656
<5658=5659
<5659=5673,5660
<5660=5668,5661
<5661=5665,5662
<5662=5664,5663
<5665=5667,5666
<5668=5670,5669
<5670=5672,5671
<5673=5675,5674
<5676=5752,5677
<5677=5741,5726,5678
<5678=5722,5679
<5679=5680
<5680=5721,5681
<5681=5719,5682
<5682=5717,5713,5709,5705,5701,5697,5693,5689,5687,5683
<5683=5684
<5684=5686,5685
<5687=5688
<5689=5690
<5690=5692,5691
<5693=5694
<5694=5696,5695
<5697=5698
<5698=5700,5699
<5701=5702
<5702=5704,5703
<5705=5706
<5706=5708,5707
<5709=5710
<5710=5712,5711
<5713=5714
<5714=5716,5715
<5717=5718
<5719=5720
<5722=5723
<5723=5725,5724
<5726=5727
<5727=5740,5728
<5728=5738,5729
<5729=5734,5732,5730
<5730=5731
<5732=5733
<5734=5735
<5735=5737,5736
<5738=5739
<5741=5742
<5742=5750,5743
<5743=5744
<5744=5745
<5745=5747,5746
<5747=5749,5748
<5750=5751
<5752=5753
<5753=5759,5754
<5754=5756,5755
<5756=5758,5757
<5759=5761,5760
<5762=5882,5763
<5763=5812,5764
<5764=5808,5765
<5765=5766
<5766=5807,5767
<5767=5805,5768
<5768=5803,5799,5795,5791,5787,5783,5779,5775,5773,5769
<5769=5770
<5770=5772,5771
<5773=5774
<5775=5776
<5776=5778,5777
<5779=5780
<5780=5782,5781
<5783=5784
<5784=5786,5785
<5787=5788
<5788=5790,5789
<5791=5792
<5792=5794,5793
<5795=5796
<5796=5798,5797
<5799=5800
<5800=5802,5801
<5803=5804
<5805=5806
<5808=5809
<5809=5811,5810
<5812=5876,5813
<5813=5863,5848,5814
<5814=5844,5815
<5815=5816
<5816=5832,5828,5825,5817
<5817=5818
<5818=5820,5819
<5820=5822,5821
<5822=5824,5823
<5825=5827,5826
<5828=5829
<5829=5831,5830
<5832=5833
<5833=5843,5834
<5834=5836,5835
<5836=5840,5837
<5837=5839,5838
<5840=5842,5841
<5844=5845
<5845=5847,5846
<5848=5849
<5849=5862,5850
<5850=5860,5851
<5851=5856,5854,5852
<5852=5853
<5854=5855
<5856=5857
<5857=5859,5858
<5860=5861
<5863=5864
<5864=5875,5874,5865
<5865=5873,5866
<5866=5870,5867
<5867=5869,5868
<5870=5872,5871
<5876=5877
<5877=5879,5878
<5879=5881,5880
<5882=5883
<5883=5897,5884
<5884=5892,5885
<5885=5889,5886
<5886=5888,5887
<5889=5891,5890
<5892=5894,5893
<5894=5896,5895
<5897=5899,5898
<5900=5976,5901
<5901=5965,5950,5902
<5902=5946,5903
<5903=5904
<5904=5945,5905
<5905=5943,5906
<5906=5941,5937,5933,5929,5925,5921,5917,5913,5911,5907
<5907=5908
<5908=5910,5909
<5911=5912
<5913=5914
<5914=5916,5915
<5917=5918
<5918=5920,5919
<5921=5922
<5922=5924,5923
<5925=5926
<5926=5928,5927
<5929=5930
<5930=5932,5931
<5933=5934
<5934=5936,5935
<5937=5938
<5938=5940,5939
<5941=5942
<5943=5944
<5946=5947
<5947=5949,5948
<5950=5951
<5951=5964,5952
<5952=5962,5953
<5953=5958,5956,5954
<5954=5955
<5956=5957
<5958=5959
<5959=5961,5960
<5962=5963
<5965=5966
<5966=5974,5967
<5967=5968
<5968=5969
<5969=5971,5970
<5971=5973,5972
<5974=5975
<5976=5977
<5977=5991,5978
<5978=5986,5979
<5979=5983,5980
<5980=5982,5981
<5983=5985,5984
<5986=5988,5987
<5988=5990,5989
<5991=5993,5992
<5994=6027,6017,6014,5995
<5995=5996
<5996=5997
<5997=6009,5998
<5998=6006,5999
<5999=6005,6000
<6000=6004,6001
<6001=6003,6002
<6006=6008,6007
<6009=6011,6010
<6011=6013,6012
<6014=6016,6015
<6017=6018
<6018=6022,6019
<6019=6021,6020
<6022=6026,6023
<6023=6025,6024
<6027=6028
<6028=6030,6029
<6031=6032
<6032=6047,6033
<6033=6046,6034
<6034=6044,6035
<6035=6040,6036
<6036=6037
<6037=6039,6038
<6040=6041
<6041=6043,6042
<6044=6045
<6047=6049,6048
<6050=6051
<6051=6053,6052
<6053=6055,6054
<6056=6057
<6057=6059,6058
<6059=6061,6060
<6062=6063
<6063=6065,6064
<6065=6067,6066
<6068=6069
<6069=6071,6070
<6071=6073,6072
<6074=6075
<6075=6079,6076
<6076=6077
<6077=6078
<6079=6080
<6081=6137,6082
<6082=6083
<6083=6136,6084
<6084=6134,6085
<6085=6130,6128,6126,6124,6122,6120,6114,6112,6110,6106,6102,6098,6096,6094,6086
<6086=6087
<6087=6093,6088
<6088=6090,6089
<6090=6092,6091
<6094=6095
<6096=6097
<6098=6099
<6099=6101,6100
<6102=6103
<6103=6105,6104
<6106=6107
<6107=6109,6108
<6110=6111
<6112=6113
<6114=6115
<6115=6117,6116
<6117=6119,6118
<6120=6121
<6122=6123
<6124=6125
<6126=6127
<6128=6129
<6130=6131
<6131=6133,6132
<6134=6135
<6137=6138
<6138=6146,6139
<6139=6143,6140
<6140=6142,6141
<6143=6145,6144
<6146=6148,6147
<6149=6187,6177,6174,6150
<6150=6151
<6151=6169,6152
<6152=6162,6153
<6153=6161,6154
<6154=6156,6155
<6156=6158,6157
<6158=6160,6159
<6162=6168,6163
<6163=6165,6164
<6165=6167,6166
<6169=6171,6170
<6171=6173,6172
<6174=6176,6175
<6177=6178
<6178=6182,6179
<6179=6181,6180
<6182=6186,6183
<6183=6185,6184
<6187=6188
<6188=6190,6189
<6191=6220,6192
<6192=6197,6193
<6193=6194
<6194=6196,6195
<6197=6198
<6198=6218,6199
<6199=6216,6214,6212,6200
<6200=6201
<6201=6211,6202
<6202=6206,6203
<6203=6205,6204
<6206=6208,6207
<6208=6210,6209
<6212=6213
<6214=6215
<6216=6217
<6218=6219
<6220=6221
<6221=6233,6222
<6222=6230,6223
<6223=6225,6224
<6225=6227,6226
<6227=6229,6228
<6230=6232,6231
<6233=6235,6234
<6236=6237
<6237=6256,6238
<6238=6255,6239
<6239=6253,6240
<6240=6241
<6241=6242
<6242=6252,6243
<6243=6247,6244
<6244=6246,6245
<6247=6249,6248
<6249=6251,6250
<6253=6254
<6256=6258,6257
<6258=6260,6259
<6261=6262
<6262=6277,6263
<6263=6276,6264
<6264=6274,6265
<6265=6270,6266
<6266=6267
<6267=6269,6268
<6270=6271
<6271=6273,6272
<6274=6275
<6277=6279,6278
<6280=6299,6281
<6281=6284,6282
<6282=6283
<6284=6285
<6285=6297,6286
<6286=6295,6293,6291,6289,6287
<6287=6288
<6289=6290
<6291=6292
<6293=6294
<6295=6296
<6297=6298
<6299=6300
<6300=6324,6301
<6301=6321,6302
<6302=6316,6303
<6303=6313,6304
<6304=6306,6305
<6306=6312,6307
<6307=6311,6308
<6308=6310,6309
<6313=6315,6314
<6316=6320,6317
<6317=6319,6318
<6321=6323,6322
<6324=6326,6325
<6327=6328
<6328=6330,6329
<6330=6332,6331
<6333=6334
<6334=6336,6335
<6336=6338,6337
<6339=6340
<6340=6342,6341
<6342=6344,6343
<6345=6346
<6346=6348,6347
<6348=6350,6349
<6351=6352
<6352=6356,6353
<6353=6355,6354
<6356=6358,6357
<6359=6360
<6360=6364,6361
<6361=6363,6362
<6364=6366,6365
<6367=6368
<6368=6370,6369
<6370=6372,6371
<6373=6374
<6374=6376,6375
<6376=6378,6377
<6379=6380
<6380=6384,6381
<6381=6383,6382
<6384=6386,6385
<6387=6388
<6388=6392,6389
<6389=6391,6390
<6392=6394,6393
<6395=6396
<6396=6400,6397
<6397=6399,6398
<6400=6402,6401
<6403=6404
<6404=6408,6405
<6405=6407,6406
<6408=6410,6409
<6411=6412
<6412=6416,6413
<6413=6415,6414
<6416=6418,6417
<6419=6420
<6420=6424,6421
<6421=6423,6422
<6424=6426,6425
<6427=6428
<6428=6432,6429
<6429=6431,6430
<6432=6434,6433
<6435=6436
<6436=6438,6437
<6439=6479,6440
<6440=6448,6441
<6441=6444,6442
<6442=6443
<6444=6445
<6445=6447,6446
<6448=6449
<6449=6478,6450
<6450=6476,6451
<6451=6474,6472,6470,6468,6464,6460,6456,6452
<6452=6453
<6453=6455,6454
<6456=6457
<6457=6459,6458
<6460=6461
<6461=6463,6462
<6464=6465
<6465=6467,6466
<6468=6469
<6470=6471
<6472=6473
<6474=6475
<6476=6477
<6479=6480
<6480=6484,6481
<6481=6483,6482
<6484=6486,6485
<6487=6488
<6488=6496,6489
<6489=6490
<6490=6491
<6491=6495,6492
<6492=6494,6493
<6496=6497
<6498=6499
<6499=6501,6500
<6502=6503
<6503=6517,6516,6504
<6504=6515,6505
<6505=6507,6506
<6507=6513,6508
<6508=6509
<6509=6510
<6510=6512,6511
<6513=6514
<6518=6519
<6519=6521,6520
<6522=6523
<6523=6528,6527,6524
<6524=6526,6525
<6667=6703,6702,6668
<6668=6699,6696,6693,6690,6687,6684,6681,6678,6675,6672,6669
<6669=6671,6670
<6672=6674,6673
<6675=6677,6676
<6678=6680,6679
<6681=6683,6682
<6684=6686,6685
<6687=6689,6688
<6690=6692,6691
<6693=6695,6694
<6696=6698,6697
<6699=6701,6700
<6703=6733,6704
<6704=6705
<6705=6727,6706
<6706=6725,6723,6721,6719,6717,6715,6713,6711,6709,6707
<6707=6708
<6709=6710
<6711=6712
<6713=6714
<6715=6716
<6717=6718
<6719=6720
<6721=6722
<6723=6724
<6725=6726
<6727=6728
<6728=6730,6729
<6730=6732,6731
<6733=6734
<6734=6742,6735
<6735=6740,6738,6736
<6736=6737
<6738=6739
<6740=6741
<6742=6743
<6761=6773,6772,6762
<6762=6769,6766,6763
<6763=6765,6764
<6766=6768,6767
<6769=6771,6770
<6773=7151,7138,7131,6865,6776,6774
<6774=6775
<6776=6859,6777
<6777=6855,6827,6816,6791,6778
<6778=6779
<6779=6789,6780
<6780=6785,6783,6781
<6781=6782
<6783=6784
<6785=6786
<6786=6788,6787
<6789=6790
<6791=6810,6792
<6792=6795,6793
<6793=6794
<6795=6796
<6796=6808,6797
<6797=6806,6804,6802,6800,6798
<6798=6799
<6800=6801
<6802=6803
<6804=6805
<6806=6807
<6808=6809
<6810=6811
<6811=6813,6812
<6813=6815,6814
<6816=6817
<6817=6824,6818
<6818=6822,6819
<6819=6820
<6820=6821
<6822=6823
<6824=6826,6825
<6827=6851,6841,6828
<6828=6829
<6829=6830
<6830=6840,6831
<6831=6833,6832
<6833=6837,6834
<6834=6836,6835
<6837=6839,6838
<6841=6842
<6842=6850,6843
<6843=6845,6844
<6845=6847,6846
<6847=6849,6848
<6851=6852
<6852=6854,6853
<6855=6856
<6856=6858,6857
<6859=6860
<6860=6862,6861
<6862=6864,6863
<6865=7122,7059,6866
<6866=6867
<6867=7050,7015,6868
<6868=6869
<6869=7006,6971,6870
<6870=6871
<6871=6962,6931,6872
<6872=6873
<6873=6922,6891,6874
<6874=6875
<6875=6878,6876
<6876=6877
<6878=6879
<6879=6889,6880
<6880=6887,6885,6883,6881
<6881=6882
<6883=6884
<6885=6886
<6887=6888
<6889=6890
<6891=6912,6906,6900,6896,6892
<6892=6893
<6893=6895,6894
<6896=6897
<6897=6899,6898
<6900=6901
<6901=6905,6902
<6902=6904,6903
<6906=6907
<6907=6911,6908
<6908=6910,6909
<6912=6913
<6913=6921,6914
<6914=6920,6915
<6915=6919,6916
<6916=6918,6917
<6922=6923
<6923=6929,6924
<6924=6927,6925
<6925=6926
<6927=6928
<6929=6930
<6931=6952,6946,6940,6936,6932
<6932=6933
<6933=6935,6934
<6936=6937
<6937=6939,6938
<6940=6941
<6941=6945,6942
<6942=6944,6943
<6946=6947
<6947=6951,6948
<6948=6950,6949
<6952=6953
<6953=6961,6954
<6954=6960,6955
<6955=6959,6956
<6956=6958,6957
<6962=6963
<6963=6969,6964
<6964=6967,6965
<6965=6966
<6967=6968
<6969=6970
<6971=6996,6992,6986,6980,6976,6972
<6972=6973
<6973=6975,6974
<6976=6977
<6977=6979,6978
<6980=6981
<6981=6985,6982
<6982=6984,6983
<6986=6987
<6987=6991,6988
<6988=6990,6989
<6992=6993
<6993=6995,6994
<6996=6997
<6997=7005,6998
<6998=7004,6999
<6999=7003,7000
<7000=7002,7001
<7006=7007
<7007=7013,7008
<7008=7011,7009
<7009=7010
<7011=7012
<7013=7014
<7015=7040,7036,7030,7024,7020,7016
<7016=7017
<7017=7019,7018
<7020=7021
<7021=7023,7022
<7024=7025
<7025=7029,7026
<7026=7028,7027
<7030=7031
<7031=7035,7032
<7032=7034,7033
<7036=7037
<7037=7039,7038
<7040=7041
<7041=7049,7042
<7042=7048,7043
<7043=7047,7044
<7044=7046,7045
<7050=7051
<7051=7057,7052
<7052=7055,7053
<7053=7054
<7055=7056
<7057=7058
<7059=7096,7084,7080,7074,7068,7064,7060
<7060=7061
<7061=7063,7062
<7064=7065
<7065=7067,7066
<7068=7069
<7069=7073,7070
<7070=7072,7071
<7074=7075
<7075=7079,7076
<7076=7078,7077
<7080=7081
<7081=7083,7082
<7084=7085
<7085=7095,7086
<7086=7094,7087
<7087=7093,7088
<7088=7090,7089
<7090=7092,7091
<7096=7116,7097
<7097=7098
<7098=7113,7099
<7099=7112,7100
<7100=7110,7101
<7101=7106,7102
<7102=7103
<7103=7105,7104
<7106=7107
<7107=7109,7108
<7110=7111
<7113=7115,7114
<7116=7117
<7117=7119,7118
<7119=7121,7120
<7122=7123
<7123=7129,7124
<7124=7127,7125
<7125=7126
<7127=7128
<7129=7130
<7131=7132
<7132=7137,7136,7133
<7133=7135,7134
<7138=7148,7145,7142,7139
<7139=7141,7140
<7142=7144,7143
<7145=7147,7146
<7148=7150,7149
<7151=7152
<7152=7154,7153
<7193=7220,7219,7194
<7194=7216,7213,7210,7207,7204,7201,7198,7195
<7195=7197,7196
<7198=7200,7199
<7201=7203,7202
<7204=7206,7205
<7207=7209,7208
<7210=7212,7211
<7213=7215,7214
<7216=7218,7217
<7220=8190,8177,8170,8160,8156,8152,8108,8100,8085,8083,8079,8015,8000,7983,7957,7951,7943,7754,7745,7692,7667,7660,7650,7544,7537,7530,7514,7490,7472,7458,7415,7393,7371,7349,7327,7290,7253,7238,7223,7221
<7221=7222
<7223=7224
<7224=7235,7225
<7225=7233,7226
<7226=7231,7227
<7227=7228
<7228=7230,7229
<7231=7232
<7233=7234
<7235=7237,7236
<7238=7239
<7239=7250,7240
<7240=7248,7241
<7241=7246,7242
<7242=7243
<7243=7245,7244
<7246=7247
<7248=7249
<7250=7252,7251
<7253=7254
<7254=7287,7255
<7255=7285,7256
<7256=7272,7257
<7257=7258
<7258=7264,7259
<7259=7261,7260
<7261=7263,7262
<7264=7271,7265
<7265=7269,7266
<7266=7267
<7267=7268
<7269=7270
<7272=7273
<7273=7277,7274
<7274=7276,7275
<7277=7283,7278
<7278=7279
<7279=7280
<7280=7282,7281
<7283=7284
<7285=7286
<7287=7289,7288
<7290=7291
<7291=7324,7292
<7292=7322,7293
<7293=7309,7294
<7294=7295
<7295=7301,7296
<7296=7298,7297
<7298=7300,7299
<7301=7308,7302
<7302=7306,7303
<7303=7304
<7304=7305
<7306=7307
<7309=7310
<7310=7314,7311
<7311=7313,7312
<7314=7320,7315
<7315=7316
<7316=7317
<7317=7319,7318
<7320=7321
<7322=7323
<7324=7326,7325
<7327=7328
<7328=7346,7329
<7329=7344,7330
<7330=7340,7331
<7331=7332
<7332=7338,7333
<7333=7334
<7334=7335
<7335=7337,7336
<7338=7339
<7340=7341
<7341=7343,7342
<7344=7345
<7346=7348,7347
<7349=7350
<7350=7368,7351
<7351=7366,7352
<7352=7362,7353
<7353=7354
<7354=7360,7355
<7355=7356
<7356=7357
<7357=7359,7358
<7360=7361
<7362=7363
<7363=7365,7364
<7366=7367
<7368=7370,7369
<7371=7372
<7372=7390,7373
<7373=7388,7374
<7374=7386,7375
<7375=7376
<7376=7378,7377
<7378=7385,7379
<7379=7383,7380
<7380=7381
<7381=7382
<7383=7384
<7386=7387
<7388=7389
<7390=7392,7391
<7393=7394
<7394=7412,7395
<7395=7410,7396
<7396=7408,7397
<7397=7398
<7398=7400,7399
<7400=7407,7401
<7401=7405,7402
<7402=7403
<7403=7404
<7405=7406
<7408=7409
<7410=7411
<7412=7414,7413
<7415=7445,7426,7416
<7416=7417
<7417=7422,7418
<7418=7419
<7419=7421,7420
<7422=7423
<7423=7425,7424
<7426=7427
<7427=7428
<7428=7444,7429
<7429=7442,7430
<7430=7431
<7431=7432
<7432=7440,7433
<7433=7436,7434
<7434=7435
<7436=7437
<7437=7439,7438
<7440=7441
<7442=7443
<7445=7446
<7446=7448,7447
<7448=7456,7449
<7449=7452,7450
<7450=7451
<7452=7453
<7453=7455,7454
<7456=7457
<7458=7459
<7459=7471,7470,7460
<7460=7469,7461
<7461=7467,7462
<7462=7463
<7463=7464
<7464=7466,7465
<7467=7468
<7472=7486,7473
<7473=7474
<7474=7484,7475
<7475=7482,7480,7478,7476
<7476=7477
<7478=7479
<7480=7481
<7482=7483
<7484=7485
<7486=7487
<7487=7489,7488
<7490=7508,7491
<7491=7507,7506,7505,7504,7503,7502,7501,7500,7499,7498,7497,7496,7495,7494,7492
<7492=7493
<7508=7509
<7509=7513,7510
<7510=7512,7511
<7514=7522,7515
<7515=7518,7516
<7516=7517
<7518=7519
<7519=7521,7520
<7522=7523
<7523=7527,7524
<7524=7526,7525
<7527=7529,7528
<7530=7531
<7531=7535,7532
<7532=7533
<7533=7534
<7535=7536
<7537=7538
<7538=7542,7539
<7539=7540
<7540=7541
<7542=7543
<7544=7646,7642,7639,7545
<7545=7626,7546
<7546=7622,7601,7547
<7547=7548
<7548=7588,7575,7562,7549
<7549=7550
<7550=7561,7551
<7551=7559,7552
<7552=7557,7553
<7553=7554
<7554=7556,7555
<7557=7558
<7559=7560
<7562=7563
<7563=7574,7564
<7564=7572,7565
<7565=7570,7566
<7566=7567
<7567=7569,7568
<7570=7571
<7572=7573
<7575=7576
<7576=7587,7577
<7577=7585,7578
<7578=7583,7579
<7579=7580
<7580=7582,7581
<7583=7584
<7585=7586
<7588=7589
<7589=7600,7590
<7590=7598,7591
<7591=7596,7592
<7592=7593
<7593=7595,7594
<7596=7597
<7598=7599
<7601=7618,7610,7602
<7602=7603
<7603=7609,7604
<7604=7608,7605
<7605=7607,7606
<7610=7611
<7611=7617,7612
<7612=7616,7613
<7613=7615,7614
<7618=7619
<7619=7621,7620
<7622=7623
<7623=7625,7624
<7626=7633,7627
<7627=7629,7628
<7629=7630
<7630=7632,7631
<7633=7634
<7634=7638,7635
<7635=7637,7636
<7639=7641,7640
<7642=7643
<7643=7645,7644
<7646=7647
<7647=7649,7648
<7650=7654,7651
<7651=7653,7652
<7654=7659,7658,7655
<7655=7657,7656
<7660=7661
<7661=7666,7665,7662
<7662=7664,7663
<7667=7686,7680,7674,7668
<7668=7673,7672,7669
<7669=7671,7670
<7674=7679,7678,7675
<7675=7677,7676
<7680=7685,7684,7681
<7681=7683,7682
<7686=7691,7690,7687
<7687=7689,7688
<7692=7720,7693
<7693=7713,7706,7705,7704,7703,7702,7701,7700,7699,7698,7697,7696,7694
<7694=7695
<7706=7707
<7707=7711,7708
<7708=7709
<7709=7710
<7711=7712
<7713=7714
<7714=7718,7715
<7715=7716
<7716=7717
<7718=7719
<7720=7721
<7721=7744,7722
<7722=7740,7723
<7723=7736,7734,7732,7730,7728,7726,7724
<7724=7725
<7726=7727
<7728=7729
<7730=7731
<7732=7733
<7734=7735
<7736=7737
<7737=7739,7738
<7740=7741
<7741=7743,7742
<7745=7746
<7746=7752,7747
<7747=7748
<7748=7749
<7749=7751,7750
<7752=7753
<7754=7941,7874,7755
<7755=7756
<7756=7757
<7757=7870,7862,7859,7758
<7758=7849,7843,7835,7825,7817,7809,7803,7793,7785,7777,7767,7759
<7759=7760
<7760=7762,7761
<7762=7766,7763
<7763=7765,7764
<7767=7768
<7768=7774,7769
<7769=7771,7770
<7771=7773,7772
<7774=7776,7775
<7777=7778
<7778=7782,7779
<7779=7781,7780
<7782=7784,7783
<7785=7786
<7786=7788,7787
<7788=7792,7789
<7789=7791,7790
<7793=7794
<7794=7800,7795
<7795=7797,7796
<7797=7799,7798
<7800=7802,7801
<7803=7804
<7804=7806,7805
<7806=7808,7807
<7809=7810
<7810=7812,7811
<7812=7816,7813
<7813=7815,7814
<7817=7818
<7818=7822,7819
<7819=7821,7820
<7822=7824,7823
<7825=7826
<7826=7832,7827
<7827=7829,7828
<7829=7831,7830
<7832=7834,7833
<7835=7836
<7836=7838,7837
<7838=7842,7839
<7839=7841,7840
<7843=7844
<7844=7846,7845
<7846=7848,7847
<7849=7850
<7850=7856,7851
<7851=7853,7852
<7853=7855,7854
<7856=7858,7857
<7859=7861,7860
<7862=7863
<7863=7869,7864
<7864=7868,7865
<7865=7867,7866
<7870=7871
<7871=7873,7872
<7874=7937,7875
<7875=7933,7925,7922,7876
<7876=7877
<7877=7918,7910,7907,7878
<7878=7897,7887,7879
<7879=7880
<7880=7882,7881
<7882=7886,7883
<7883=7885,7884
<7887=7888
<7888=7894,7889
<7889=7891,7890
<7891=7893,7892
<7894=7896,7895
<7897=7898
<7898=7904,7899
<7899=7901,7900
<7901=7903,7902
<7904=7906,7905
<7907=7909,7908
<7910=7911
<7911=7917,7912
<7912=7916,7913
<7913=7915,7914
<7918=7919
<7919=7921,7920
<7922=7924,7923
<7925=7926
<7926=7932,7927
<7927=7931,7928
<7928=7930,7929
<7933=7934
<7934=7936,7935
<7937=7938
<7938=7940,7939
<7941=7942
<7943=7944
<7944=7950,7945
<7945=7949,7946
<7946=7948,7947
<7951=7952
<7952=7956,7953
<7953=7955,7954
<7957=7975,7958
<7958=7968,7961,7959
<7959=7960
<7961=7962
<7962=7966,7963
<7963=7964
<7964=7965
<7966=7967
<7968=7969
<7969=7973,7970
<7970=7971
<7971=7972
<7973=7974
<7975=7976
<7976=7980,7977
<7977=7979,7978
<7980=7982,7981
<7983=7984
<7984=7999,7985
<7985=7998,7986
<7986=7996,7987
<7987=7990,7988
<7988=7989
<7990=7991
<7991=7993,7992
<7993=7995,7994
<7996=7997
<8000=8001
<8001=8014,8002
<8002=8013,8003
<8003=8011,8004
<8004=8007,8005
<8005=8006
<8007=8008
<8008=8010,8009
<8011=8012
<8015=8077,8047,8016
<8016=8017
<8017=8024,8018
<8018=8019
<8019=8023,8020
<8020=8022,8021
<8024=8041,8025
<8025=8028,8026
<8026=8027
<8028=8029
<8029=8039,8030
<8030=8037,8035,8033,8031
<8031=8032
<8033=8034
<8035=8036
<8037=8038
<8039=8040
<8041=8042
<8042=8046,8043
<8043=8045,8044
<8047=8054,8048
<8048=8049
<8049=8053,8050
<8050=8052,8051
<8054=8071,8055
<8055=8058,8056
<8056=8057
<8058=8059
<8059=8069,8060
<8060=8067,8065,8063,8061
<8061=8062
<8063=8064
<8065=8066
<8067=8068
<8069=8070
<8071=8072
<8072=8076,8073
<8073=8075,8074
<8077=8078
<8079=8080
<8080=8082,8081
<8083=8084
<8085=8086
<8086=8099,8087
<8087=8097,8088
<8088=8093,8091,8089
<8089=8090
<8091=8092
<8093=8094
<8094=8096,8095
<8097=8098
<8100=8101
<8101=8107,8102
<8102=8106,8103
<8103=8105,8104
<8108=8139,8109
<8109=8121,8110
<8110=8111
<8111=8120,8112
<8112=8118,8113
<8113=8116,8114
<8114=8115
<8116=8117
<8118=8119
<8121=8122
<8122=8138,8123
<8123=8136,8124
<8124=8125
<8125=8126
<8126=8134,8127
<8127=8130,8128
<8128=8129
<8130=8131
<8131=8133,8132
<8134=8135
<8136=8137
<8139=8140
<8140=8142,8141
<8142=8150,8143
<8143=8146,8144
<8144=8145
<8146=8147
<8147=8149,8148
<8150=8151
<8152=8153
<8153=8155,8154
<8156=8157
<8157=8159,8158
<8160=8167,8164,8161
<8161=8163,8162
<8164=8166,8165
<8167=8169,8168
<8170=8171
<8171=8176,8175,8172
<8172=8174,8173
<8177=8187,8181,8178
<8178=8180,8179
<8181=8186,8185,8182
<8182=8184,8183
<8187=8189,8188
<8190=8191
<8191=8193,8192
<8259=8265,8264,8260
<8260=8261
<8261=8263,8262
<8265=8305,8293,8270,8266
<8266=8267
<8267=8269,8268
<8270=8289,8271
<8271=8272
<8272=8273
<8273=8287,8274
<8274=8285,8283,8281,8275
<8275=8276
<8276=8280,8277
<8277=8279,8278
<8281=8282
<8283=8284
<8285=8286
<8287=8288
<8289=8290
<8290=8292,8291
<8293=8294
<8294=8304,8303,8295
<8295=8302,8296
<8296=8300,8297
<8297=8298
<8298=8299
<8300=8301
<8305=8307,8306
<8307=8308
<8308=8310,8309
