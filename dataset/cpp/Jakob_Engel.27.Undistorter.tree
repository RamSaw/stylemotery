>3	FunctionDef	Undistorter 
>4	ParameterList	 
>5	CompoundStatement	 
>9	FunctionDef	Undistorter 
>10	ParameterList	const char * configFilename
>11	Parameter	 
>12	Identifier	configFilename
>13	ParameterType	const char *
>14	ReturnType	Undistorter *
>15	CompoundStatement	 
>16	IfStatement	if ( std 
>17	ElseStatement	else
>18	CompoundStatement	 
>19	ReturnStatement	 
>20	Identifier	u
>21	IfStatement	if ( ! u -> isValid ( ) )
>22	ReturnStatement	 
>23	PrimaryExpression	0
>24	Condition	 
>25	UnaryOp	! u -> isValid ( )
>26	CallExpression	u -> isValid ( )
>27	ArgumentList	 
>28	Callee	u -> isValid
>29	PtrMemberAccess	u -> isValid
>30	Identifier	isValid
>31	Identifier	u
>32	UnaryOperator	!
>33	IdentifierDeclStatement	 
>34	IdentifierDecl	* u = new UndistorterPTAM ( completeFileName . c_str ( ) )
>35	AssignmentExpr	* u = new UndistorterPTAM ( completeFileName . c_str ( ) )
>36	CallExpression	completeFileName . c_str ( )
>37	ArgumentList	 
>38	Callee	completeFileName . c_str
>39	MemberAccess	completeFileName . c_str
>40	Identifier	c_str
>41	Identifier	completeFileName
>42	Identifier	u
>43	Identifier	u
>44	IdentifierDeclType	Undistorter *
>45	ExpressionStatement	 
>46	CallExpression	printf ( \"found ATAN camera model, building rectifier.\n\" )
>47	ArgumentList	\"found ATAN camera model, building rectifier.\n\"
>48	Argument	\"found ATAN camera model, building rectifier.\n\"
>49	PrimaryExpression	\"found ATAN camera model, building rectifier.\n\"
>50	Callee	printf
>51	Identifier	printf
>52	CompoundStatement	 
>53	ReturnStatement	 
>54	Identifier	u
>55	IfStatement	if ( ! u -> isValid ( ) )
>56	ReturnStatement	 
>57	PrimaryExpression	0
>58	Condition	 
>59	UnaryOp	! u -> isValid ( )
>60	CallExpression	u -> isValid ( )
>61	ArgumentList	 
>62	Callee	u -> isValid
>63	PtrMemberAccess	u -> isValid
>64	Identifier	isValid
>65	Identifier	u
>66	UnaryOperator	!
>67	IdentifierDeclStatement	 
>68	IdentifierDecl	* u = new UndistorterOpenCV ( completeFileName . c_str ( ) )
>69	AssignmentExpr	* u = new UndistorterOpenCV ( completeFileName . c_str ( ) )
>70	CallExpression	completeFileName . c_str ( )
>71	ArgumentList	 
>72	Callee	completeFileName . c_str
>73	MemberAccess	completeFileName . c_str
>74	Identifier	c_str
>75	Identifier	completeFileName
>76	Identifier	u
>77	Identifier	u
>78	IdentifierDeclType	Undistorter *
>79	ExpressionStatement	 
>80	CallExpression	printf ( \"found OpenCV camera model, building rectifier.\n\" )
>81	ArgumentList	\"found OpenCV camera model, building rectifier.\n\"
>82	Argument	\"found OpenCV camera model, building rectifier.\n\"
>83	PrimaryExpression	\"found OpenCV camera model, building rectifier.\n\"
>84	Callee	printf
>85	Identifier	printf
>86	Condition	 
>87	EqualityExpression	std 
>88	PrimaryExpression	8
>89	CallExpression	std 
>90	ArgumentList	l1 . c_str ( )
>91	Argument	& ic [ 7 ]
>92	UnaryOp	& ic [ 7 ]
>93	ArrayIndexing	ic [ 7 ]
>94	PrimaryExpression	7
>95	Identifier	ic
>96	UnaryOperator	&
>97	Argument	& ic [ 6 ]
>98	UnaryOp	& ic [ 6 ]
>99	ArrayIndexing	ic [ 6 ]
>100	PrimaryExpression	6
>101	Identifier	ic
>102	UnaryOperator	&
>103	Argument	& ic [ 5 ]
>104	UnaryOp	& ic [ 5 ]
>105	ArrayIndexing	ic [ 5 ]
>106	PrimaryExpression	5
>107	Identifier	ic
>108	UnaryOperator	&
>109	Argument	& ic [ 4 ]
>110	UnaryOp	& ic [ 4 ]
>111	ArrayIndexing	ic [ 4 ]
>112	PrimaryExpression	4
>113	Identifier	ic
>114	UnaryOperator	&
>115	Argument	& ic [ 3 ]
>116	UnaryOp	& ic [ 3 ]
>117	ArrayIndexing	ic [ 3 ]
>118	PrimaryExpression	3
>119	Identifier	ic
>120	UnaryOperator	&
>121	Argument	& ic [ 2 ]
>122	UnaryOp	& ic [ 2 ]
>123	ArrayIndexing	ic [ 2 ]
>124	PrimaryExpression	2
>125	Identifier	ic
>126	UnaryOperator	&
>127	Argument	& ic [ 1 ]
>128	UnaryOp	& ic [ 1 ]
>129	ArrayIndexing	ic [ 1 ]
>130	PrimaryExpression	1
>131	Identifier	ic
>132	UnaryOperator	&
>133	Argument	& ic [ 0 ]
>134	UnaryOp	& ic [ 0 ]
>135	ArrayIndexing	ic [ 0 ]
>136	PrimaryExpression	0
>137	Identifier	ic
>138	UnaryOperator	&
>139	Argument	\"%f %f %f %f %f %f %f %f\"
>140	PrimaryExpression	\"%f %f %f %f %f %f %f %f\"
>141	Argument	l1 . c_str ( )
>142	CallExpression	l1 . c_str ( )
>143	ArgumentList	 
>144	Callee	l1 . c_str
>145	MemberAccess	l1 . c_str
>146	Identifier	c_str
>147	Identifier	l1
>148	Callee	std 
>149	Identifier	std 
>150	IdentifierDeclStatement	 
>151	IdentifierDecl	ic [ 10 ]
>152	PrimaryExpression	10
>153	Identifier	ic
>154	IdentifierDeclType	float [ 10 ]
>155	ExpressionStatement	 
>156	CallExpression	f . close ( )
>157	ArgumentList	 
>158	Callee	f . close
>159	MemberAccess	f . close
>160	Identifier	close
>161	Identifier	f
>162	ExpressionStatement	 
>163	CallExpression	std 
>164	ArgumentList	f
>165	Argument	l1
>166	Identifier	l1
>167	Argument	f
>168	Identifier	f
>169	Callee	std 
>170	Identifier	std 
>171	IdentifierDeclStatement	 
>172	IdentifierDecl	l1
>173	Identifier	l1
>174	IdentifierDeclType	std 
>175	ExpressionStatement	 
>176	CallExpression	printf ( \" ... found!\n\" )
>177	ArgumentList	\" ... found!\n\"
>178	Argument	\" ... found!\n\"
>179	PrimaryExpression	\" ... found!\n\"
>180	Callee	printf
>181	Identifier	printf
>182	IfStatement	if ( ! f . good ( ) )
>183	CompoundStatement	 
>184	IfStatement	if ( ! f . good ( ) )
>185	CompoundStatement	 
>186	ReturnStatement	 
>187	PrimaryExpression	0
>188	ExpressionStatement	 
>189	CallExpression	f . close ( )
>190	ArgumentList	 
>191	Callee	f . close
>192	MemberAccess	f . close
>193	Identifier	close
>194	Identifier	f
>195	ExpressionStatement	 
>196	CallExpression	printf ( \" ... not found. Cannot operate without calibration, shutting down.\n\" )
>197	ArgumentList	\" ... not found. Cannot operate without calibration, shutting down.\n\"
>198	Argument	\" ... not found. Cannot operate without calibration, shutting down.\n\"
>199	PrimaryExpression	\" ... not found. Cannot operate without calibration, shutting down.\n\"
>200	Callee	printf
>201	Identifier	printf
>202	Condition	 
>203	UnaryOp	! f . good ( )
>204	CallExpression	f . good ( )
>205	ArgumentList	 
>206	Callee	f . good
>207	MemberAccess	f . good
>208	Identifier	good
>209	Identifier	f
>210	UnaryOperator	!
>211	ExpressionStatement	 
>212	CallExpression	f . open ( completeFileName . c_str ( ) )
>213	ArgumentList	completeFileName . c_str ( )
>214	Argument	completeFileName . c_str ( )
>215	CallExpression	completeFileName . c_str ( )
>216	ArgumentList	 
>217	Callee	completeFileName . c_str
>218	MemberAccess	completeFileName . c_str
>219	Identifier	c_str
>220	Identifier	completeFileName
>221	Callee	f . open
>222	MemberAccess	f . open
>223	Identifier	open
>224	Identifier	f
>225	ExpressionStatement	 
>226	CallExpression	printf ( \" ... not found!\n Trying %s\" , completeFileName . c_str ( ) )
>227	ArgumentList	\" ... not found!\n Trying %s\"
>228	Argument	completeFileName . c_str ( )
>229	CallExpression	completeFileName . c_str ( )
>230	ArgumentList	 
>231	Callee	completeFileName . c_str
>232	MemberAccess	completeFileName . c_str
>233	Identifier	c_str
>234	Identifier	completeFileName
>235	Argument	\" ... not found!\n Trying %s\"
>236	PrimaryExpression	\" ... not found!\n Trying %s\"
>237	Callee	printf
>238	Identifier	printf
>239	ExpressionStatement	 
>240	AssignmentExpr	completeFileName = packagePath + \"calib/\" + configFilename
>241	AdditiveExpression	packagePath + \"calib/\" + configFilename
>242	AdditiveExpression	\"calib/\" + configFilename
>243	Identifier	configFilename
>244	PrimaryExpression	\"calib/\"
>245	Identifier	packagePath
>246	Identifier	completeFileName
>247	ExpressionStatement	 
>248	CallExpression	f . close ( )
>249	ArgumentList	 
>250	Callee	f . close
>251	MemberAccess	f . close
>252	Identifier	close
>253	Identifier	f
>254	Condition	 
>255	UnaryOp	! f . good ( )
>256	CallExpression	f . good ( )
>257	ArgumentList	 
>258	Callee	f . good
>259	MemberAccess	f . good
>260	Identifier	good
>261	Identifier	f
>262	UnaryOperator	!
>263	IdentifierDeclStatement	 
>264	IdentifierDecl	f ( completeFileName . c_str ( ) )
>265	CallExpression	completeFileName . c_str ( )
>266	ArgumentList	 
>267	Callee	completeFileName . c_str
>268	MemberAccess	completeFileName . c_str
>269	Identifier	c_str
>270	Identifier	completeFileName
>271	Identifier	f
>272	IdentifierDeclType	std 
>273	ExpressionStatement	 
>274	CallExpression	printf ( \"Reading Calibration from file %s\" , completeFileName . c_str ( ) )
>275	ArgumentList	\"Reading Calibration from file %s\"
>276	Argument	completeFileName . c_str ( )
>277	CallExpression	completeFileName . c_str ( )
>278	ArgumentList	 
>279	Callee	completeFileName . c_str
>280	MemberAccess	completeFileName . c_str
>281	Identifier	c_str
>282	Identifier	completeFileName
>283	Argument	\"Reading Calibration from file %s\"
>284	PrimaryExpression	\"Reading Calibration from file %s\"
>285	Callee	printf
>286	Identifier	printf
>287	IdentifierDeclStatement	 
>288	IdentifierDecl	completeFileName = configFilename
>289	AssignmentExpr	completeFileName = configFilename
>290	Identifier	configFilename
>291	Identifier	configFilename
>292	Identifier	completeFileName
>293	IdentifierDeclType	std 
>311	FunctionDef	UndistorterPTAM 
>312	ParameterList	const char * configFileName
>313	Parameter	 
>314	Identifier	configFileName
>315	ParameterType	const char *
>316	CompoundStatement	 
>317	ExpressionStatement	 
>318	AssignmentExpr	K_ . at < double > ( 2 , 1 ) = outputCalibration [ 3 ] * out_height - 0.5
>319	AdditiveExpression	outputCalibration [ 3 ] * out_height - 0.5
>320	PrimaryExpression	0.5
>321	MultiplicativeExpression	outputCalibration [ 3 ] * out_height
>322	Identifier	out_height
>323	ArrayIndexing	outputCalibration [ 3 ]
>324	PrimaryExpression	3
>325	Identifier	outputCalibration
>326	RelationalExpression	K_ . at < double > ( 2 , 1 )
>327	RelationalExpression	double > ( 2 , 1 )
>328	Expression	2 , 1
>329	PrimaryExpression	1
>330	PrimaryExpression	2
>331	Identifier	double
>332	MemberAccess	K_ . at
>333	Identifier	at
>334	Identifier	K_
>335	ExpressionStatement	 
>336	AssignmentExpr	K_ . at < double > ( 2 , 0 ) = outputCalibration [ 2 ] * out_width - 0.5
>337	AdditiveExpression	outputCalibration [ 2 ] * out_width - 0.5
>338	PrimaryExpression	0.5
>339	MultiplicativeExpression	outputCalibration [ 2 ] * out_width
>340	Identifier	out_width
>341	ArrayIndexing	outputCalibration [ 2 ]
>342	PrimaryExpression	2
>343	Identifier	outputCalibration
>344	RelationalExpression	K_ . at < double > ( 2 , 0 )
>345	RelationalExpression	double > ( 2 , 0 )
>346	Expression	2 , 0
>347	PrimaryExpression	0
>348	PrimaryExpression	2
>349	Identifier	double
>350	MemberAccess	K_ . at
>351	Identifier	at
>352	Identifier	K_
>353	ExpressionStatement	 
>354	AssignmentExpr	K_ . at < double > ( 2 , 2 ) = 1
>355	PrimaryExpression	1
>356	RelationalExpression	K_ . at < double > ( 2 , 2 )
>357	RelationalExpression	double > ( 2 , 2 )
>358	Expression	2 , 2
>359	PrimaryExpression	2
>360	PrimaryExpression	2
>361	Identifier	double
>362	MemberAccess	K_ . at
>363	Identifier	at
>364	Identifier	K_
>365	ExpressionStatement	 
>366	AssignmentExpr	K_ . at < double > ( 1 , 1 ) = outputCalibration [ 1 ] * out_height
>367	MultiplicativeExpression	outputCalibration [ 1 ] * out_height
>368	Identifier	out_height
>369	ArrayIndexing	outputCalibration [ 1 ]
>370	PrimaryExpression	1
>371	Identifier	outputCalibration
>372	RelationalExpression	K_ . at < double > ( 1 , 1 )
>373	RelationalExpression	double > ( 1 , 1 )
>374	Expression	1 , 1
>375	PrimaryExpression	1
>376	PrimaryExpression	1
>377	Identifier	double
>378	MemberAccess	K_ . at
>379	Identifier	at
>380	Identifier	K_
>381	ExpressionStatement	 
>382	AssignmentExpr	K_ . at < double > ( 0 , 0 ) = outputCalibration [ 0 ] * out_width
>383	MultiplicativeExpression	outputCalibration [ 0 ] * out_width
>384	Identifier	out_width
>385	ArrayIndexing	outputCalibration [ 0 ]
>386	PrimaryExpression	0
>387	Identifier	outputCalibration
>388	RelationalExpression	K_ . at < double > ( 0 , 0 )
>389	RelationalExpression	double > ( 0 , 0 )
>390	Expression	0 , 0
>391	PrimaryExpression	0
>392	PrimaryExpression	0
>393	Identifier	double
>394	MemberAccess	K_ . at
>395	Identifier	at
>396	Identifier	K_
>397	ExpressionStatement	 
>398	AssignmentExpr	K_ = cv 
>399	CallExpression	cv 
>400	ArgumentList	3
>401	Argument	cv 
>402	CallExpression	cv 
>403	ArgumentList	0
>404	Argument	0
>405	PrimaryExpression	0
>406	Callee	cv 
>407	Identifier	cv 
>408	Argument	CV_64F
>409	Identifier	CV_64F
>410	Argument	3
>411	PrimaryExpression	3
>412	Argument	3
>413	PrimaryExpression	3
>414	Callee	cv 
>415	Identifier	cv 
>416	Identifier	K_
>417	ExpressionStatement	 
>418	AssignmentExpr	originalK_ . at < double > ( 2 , 1 ) = inputCalibration [ 3 ]
>419	ArrayIndexing	inputCalibration [ 3 ]
>420	PrimaryExpression	3
>421	Identifier	inputCalibration
>422	RelationalExpression	originalK_ . at < double > ( 2 , 1 )
>423	RelationalExpression	double > ( 2 , 1 )
>424	Expression	2 , 1
>425	PrimaryExpression	1
>426	PrimaryExpression	2
>427	Identifier	double
>428	MemberAccess	originalK_ . at
>429	Identifier	at
>430	Identifier	originalK_
>431	ExpressionStatement	 
>432	AssignmentExpr	originalK_ . at < double > ( 2 , 0 ) = inputCalibration [ 2 ]
>433	ArrayIndexing	inputCalibration [ 2 ]
>434	PrimaryExpression	2
>435	Identifier	inputCalibration
>436	RelationalExpression	originalK_ . at < double > ( 2 , 0 )
>437	RelationalExpression	double > ( 2 , 0 )
>438	Expression	2 , 0
>439	PrimaryExpression	0
>440	PrimaryExpression	2
>441	Identifier	double
>442	MemberAccess	originalK_ . at
>443	Identifier	at
>444	Identifier	originalK_
>445	ExpressionStatement	 
>446	AssignmentExpr	originalK_ . at < double > ( 2 , 2 ) = 1
>447	PrimaryExpression	1
>448	RelationalExpression	originalK_ . at < double > ( 2 , 2 )
>449	RelationalExpression	double > ( 2 , 2 )
>450	Expression	2 , 2
>451	PrimaryExpression	2
>452	PrimaryExpression	2
>453	Identifier	double
>454	MemberAccess	originalK_ . at
>455	Identifier	at
>456	Identifier	originalK_
>457	ExpressionStatement	 
>458	AssignmentExpr	originalK_ . at < double > ( 1 , 1 ) = inputCalibration [ 1 ]
>459	ArrayIndexing	inputCalibration [ 1 ]
>460	PrimaryExpression	1
>461	Identifier	inputCalibration
>462	RelationalExpression	originalK_ . at < double > ( 1 , 1 )
>463	RelationalExpression	double > ( 1 , 1 )
>464	Expression	1 , 1
>465	PrimaryExpression	1
>466	PrimaryExpression	1
>467	Identifier	double
>468	MemberAccess	originalK_ . at
>469	Identifier	at
>470	Identifier	originalK_
>471	ExpressionStatement	 
>472	AssignmentExpr	originalK_ . at < double > ( 0 , 0 ) = inputCalibration [ 0 ]
>473	ArrayIndexing	inputCalibration [ 0 ]
>474	PrimaryExpression	0
>475	Identifier	inputCalibration
>476	RelationalExpression	originalK_ . at < double > ( 0 , 0 )
>477	RelationalExpression	double > ( 0 , 0 )
>478	Expression	0 , 0
>479	PrimaryExpression	0
>480	PrimaryExpression	0
>481	Identifier	double
>482	MemberAccess	originalK_ . at
>483	Identifier	at
>484	Identifier	originalK_
>485	ExpressionStatement	 
>486	AssignmentExpr	originalK_ = cv 
>487	CallExpression	cv 
>488	ArgumentList	3
>489	Argument	cv 
>490	CallExpression	cv 
>491	ArgumentList	0
>492	Argument	0
>493	PrimaryExpression	0
>494	Callee	cv 
>495	Identifier	cv 
>496	Argument	CV_64F
>497	Identifier	CV_64F
>498	Argument	3
>499	PrimaryExpression	3
>500	Argument	3
>501	PrimaryExpression	3
>502	Callee	cv 
>503	Identifier	cv 
>504	Identifier	originalK_
>505	IfStatement	if ( valid )
>506	ElseStatement	else
>507	CompoundStatement	 
>508	ExpressionStatement	 
>509	AssignmentExpr	out_height = in_height
>510	Identifier	in_height
>511	Identifier	out_height
>512	ExpressionStatement	 
>513	AssignmentExpr	out_width = in_width
>514	Identifier	in_width
>515	Identifier	out_width
>516	ExpressionStatement	 
>517	AssignmentExpr	outputCalibration [ 4 ] = inputCalibration [ 4 ]
>518	ArrayIndexing	inputCalibration [ 4 ]
>519	PrimaryExpression	4
>520	Identifier	inputCalibration
>521	ArrayIndexing	outputCalibration [ 4 ]
>522	PrimaryExpression	4
>523	Identifier	outputCalibration
>524	ExpressionStatement	 
>525	AssignmentExpr	outputCalibration [ 3 ] = inputCalibration [ 3 ]
>526	ArrayIndexing	inputCalibration [ 3 ]
>527	PrimaryExpression	3
>528	Identifier	inputCalibration
>529	ArrayIndexing	outputCalibration [ 3 ]
>530	PrimaryExpression	3
>531	Identifier	outputCalibration
>532	ExpressionStatement	 
>533	AssignmentExpr	outputCalibration [ 2 ] = inputCalibration [ 2 ]
>534	ArrayIndexing	inputCalibration [ 2 ]
>535	PrimaryExpression	2
>536	Identifier	inputCalibration
>537	ArrayIndexing	outputCalibration [ 2 ]
>538	PrimaryExpression	2
>539	Identifier	outputCalibration
>540	ExpressionStatement	 
>541	AssignmentExpr	outputCalibration [ 1 ] = inputCalibration [ 1 ]
>542	ArrayIndexing	inputCalibration [ 1 ]
>543	PrimaryExpression	1
>544	Identifier	inputCalibration
>545	ArrayIndexing	outputCalibration [ 1 ]
>546	PrimaryExpression	1
>547	Identifier	outputCalibration
>548	ExpressionStatement	 
>549	AssignmentExpr	outputCalibration [ 0 ] = inputCalibration [ 0 ]
>550	ArrayIndexing	inputCalibration [ 0 ]
>551	PrimaryExpression	0
>552	Identifier	inputCalibration
>553	ArrayIndexing	outputCalibration [ 0 ]
>554	PrimaryExpression	0
>555	Identifier	outputCalibration
>556	ExpressionStatement	 
>557	CallExpression	printf ( \"Not Rectifying\n\" )
>558	ArgumentList	\"Not Rectifying\n\"
>559	Argument	\"Not Rectifying\n\"
>560	PrimaryExpression	\"Not Rectifying\n\"
>561	Callee	printf
>562	Identifier	printf
>563	CompoundStatement	 
>564	ExpressionStatement	 
>565	CallExpression	printf ( \"Prepped Warp matrices\n\" )
>566	ArgumentList	\"Prepped Warp matrices\n\"
>567	Argument	\"Prepped Warp matrices\n\"
>568	PrimaryExpression	\"Prepped Warp matrices\n\"
>569	Callee	printf
>570	Identifier	printf
>571	ForStatement	for ( int y = 0 ; y < out_height ; y ++ )
>572	CompoundStatement	 
>573	ForStatement	for ( int x = 0 ; x < out_width ; x ++ )
>574	CompoundStatement	 
>575	IfStatement	if ( ix > 0 && iy > 0 && ix < in_width - 1 && iy < in_height - 1 )
>576	ElseStatement	else
>577	CompoundStatement	 
>578	ExpressionStatement	 
>579	AssignmentExpr	remapY [ x + y * out_width ] = - 1
>580	UnaryOp	- 1
>581	PrimaryExpression	1
>582	UnaryOperator	-
>583	ArrayIndexing	remapY [ x + y * out_width ]
>584	AdditiveExpression	x + y * out_width
>585	MultiplicativeExpression	y * out_width
>586	Identifier	out_width
>587	Identifier	y
>588	Identifier	x
>589	Identifier	remapY
>590	ExpressionStatement	 
>591	AssignmentExpr	remapX [ x + y * out_width ] = - 1
>592	UnaryOp	- 1
>593	PrimaryExpression	1
>594	UnaryOperator	-
>595	ArrayIndexing	remapX [ x + y * out_width ]
>596	AdditiveExpression	x + y * out_width
>597	MultiplicativeExpression	y * out_width
>598	Identifier	out_width
>599	Identifier	y
>600	Identifier	x
>601	Identifier	remapX
>602	CompoundStatement	 
>603	ExpressionStatement	 
>604	AssignmentExpr	remapY [ x + y * out_width ] = iy
>605	Identifier	iy
>606	ArrayIndexing	remapY [ x + y * out_width ]
>607	AdditiveExpression	x + y * out_width
>608	MultiplicativeExpression	y * out_width
>609	Identifier	out_width
>610	Identifier	y
>611	Identifier	x
>612	Identifier	remapY
>613	ExpressionStatement	 
>614	AssignmentExpr	remapX [ x + y * out_width ] = ix
>615	Identifier	ix
>616	ArrayIndexing	remapX [ x + y * out_width ]
>617	AdditiveExpression	x + y * out_width
>618	MultiplicativeExpression	y * out_width
>619	Identifier	out_width
>620	Identifier	y
>621	Identifier	x
>622	Identifier	remapX
>623	Condition	 
>624	AndExpression	ix > 0 && iy > 0 && ix < in_width - 1 && iy < in_height - 1
>625	AndExpression	iy > 0 && ix < in_width - 1 && iy < in_height - 1
>626	AndExpression	ix < in_width - 1 && iy < in_height - 1
>627	RelationalExpression	iy < in_height - 1
>628	AdditiveExpression	in_height - 1
>629	PrimaryExpression	1
>630	Identifier	in_height
>631	Identifier	iy
>632	RelationalExpression	ix < in_width - 1
>633	AdditiveExpression	in_width - 1
>634	PrimaryExpression	1
>635	Identifier	in_width
>636	Identifier	ix
>637	RelationalExpression	iy > 0
>638	PrimaryExpression	0
>639	Identifier	iy
>640	RelationalExpression	ix > 0
>641	PrimaryExpression	0
>642	Identifier	ix
>643	IfStatement	if ( iy == in_height - 1 )
>644	ExpressionStatement	 
>645	AssignmentExpr	ix = in_height - 1.01
>646	AdditiveExpression	in_height - 1.01
>647	PrimaryExpression	1.01
>648	Identifier	in_height
>649	Identifier	ix
>650	Condition	 
>651	EqualityExpression	iy == in_height - 1
>652	AdditiveExpression	in_height - 1
>653	PrimaryExpression	1
>654	Identifier	in_height
>655	Identifier	iy
>656	IfStatement	if ( ix == in_width - 1 )
>657	ExpressionStatement	 
>658	AssignmentExpr	ix = in_width - 1.01
>659	AdditiveExpression	in_width - 1.01
>660	PrimaryExpression	1.01
>661	Identifier	in_width
>662	Identifier	ix
>663	Condition	 
>664	EqualityExpression	ix == in_width - 1
>665	AdditiveExpression	in_width - 1
>666	PrimaryExpression	1
>667	Identifier	in_width
>668	Identifier	ix
>669	IfStatement	if ( iy == 0 )
>670	ExpressionStatement	 
>671	AssignmentExpr	iy = 0.01
>672	PrimaryExpression	0.01
>673	Identifier	iy
>674	Condition	 
>675	EqualityExpression	iy == 0
>676	PrimaryExpression	0
>677	Identifier	iy
>678	IfStatement	if ( ix == 0 )
>679	ExpressionStatement	 
>680	AssignmentExpr	ix = 0.01
>681	PrimaryExpression	0.01
>682	Identifier	ix
>683	Condition	 
>684	EqualityExpression	ix == 0
>685	PrimaryExpression	0
>686	Identifier	ix
>687	ExpressionStatement	 
>688	AssignmentExpr	iy = fy * fac * iy + cy
>689	AdditiveExpression	fy * fac * iy + cy
>690	Identifier	cy
>691	MultiplicativeExpression	fy * fac * iy
>692	MultiplicativeExpression	fac * iy
>693	Identifier	iy
>694	Identifier	fac
>695	Identifier	fy
>696	Identifier	iy
>697	ExpressionStatement	 
>698	AssignmentExpr	ix = fx * fac * ix + cx
>699	AdditiveExpression	fx * fac * ix + cx
>700	Identifier	cx
>701	MultiplicativeExpression	fx * fac * ix
>702	MultiplicativeExpression	fac * ix
>703	Identifier	ix
>704	Identifier	fac
>705	Identifier	fx
>706	Identifier	ix
>707	IdentifierDeclStatement	 
>708	IdentifierDecl	fac = ( r == 0 || dist == 0 ) ? 1 
>709	AssignmentExpr	fac = ( r == 0 || dist == 0 ) ? 1 
>710	ConditionalExpression	( r == 0 || dist == 0 ) ? 1 
>711	MultiplicativeExpression	atan ( r * d2t ) / ( dist * r )
>712	MultiplicativeExpression	dist * r
>713	Identifier	r
>714	Identifier	dist
>715	CallExpression	atan ( r * d2t )
>716	ArgumentList	r * d2t
>717	Argument	r * d2t
>718	MultiplicativeExpression	r * d2t
>719	Identifier	d2t
>720	Identifier	r
>721	Callee	atan
>722	Identifier	atan
>723	PrimaryExpression	1
>724	Condition	r == 0 || dist == 0
>725	OrExpression	r == 0 || dist == 0
>726	EqualityExpression	dist == 0
>727	PrimaryExpression	0
>728	Identifier	dist
>729	EqualityExpression	r == 0
>730	PrimaryExpression	0
>731	Identifier	r
>732	Identifier	fac
>733	Identifier	fac
>734	IdentifierDeclType	float
>735	IdentifierDeclStatement	 
>736	IdentifierDecl	r = sqrt ( ix * ix + iy * iy )
>737	AssignmentExpr	r = sqrt ( ix * ix + iy * iy )
>738	CallExpression	sqrt ( ix * ix + iy * iy )
>739	ArgumentList	ix * ix + iy * iy
>740	Argument	ix * ix + iy * iy
>741	AdditiveExpression	ix * ix + iy * iy
>742	MultiplicativeExpression	iy * iy
>743	Identifier	iy
>744	Identifier	iy
>745	MultiplicativeExpression	ix * ix
>746	Identifier	ix
>747	Identifier	ix
>748	Callee	sqrt
>749	Identifier	sqrt
>750	Identifier	r
>751	Identifier	r
>752	IdentifierDeclType	float
>753	IdentifierDeclStatement	 
>754	IdentifierDecl	iy = ( y - ocy ) / ofy
>755	AssignmentExpr	iy = ( y - ocy ) / ofy
>756	MultiplicativeExpression	( y - ocy ) / ofy
>757	Identifier	ofy
>758	AdditiveExpression	y - ocy
>759	Identifier	ocy
>760	Identifier	y
>761	Identifier	iy
>762	Identifier	iy
>763	IdentifierDeclType	float
>764	IdentifierDeclStatement	 
>765	IdentifierDecl	ix = ( x - ocx ) / ofx
>766	AssignmentExpr	ix = ( x - ocx ) / ofx
>767	MultiplicativeExpression	( x - ocx ) / ofx
>768	Identifier	ofx
>769	AdditiveExpression	x - ocx
>770	Identifier	ocx
>771	Identifier	x
>772	Identifier	ix
>773	Identifier	ix
>774	IdentifierDeclType	float
>775	IncDecOp	 
>776	IncDec	++
>777	Identifier	x
>778	Condition	 
>779	RelationalExpression	x < out_width
>780	Identifier	out_width
>781	Identifier	x
>782	ForInit	 
>783	IdentifierDeclStatement	int x = 0 ;
>784	IdentifierDecl	x = 0
>785	AssignmentExpr	x = 0
>786	PrimaryExpression	0
>787	Identifier	x
>788	Identifier	x
>789	IdentifierDeclType	int
>790	IncDecOp	 
>791	IncDec	++
>792	Identifier	y
>793	Condition	 
>794	RelationalExpression	y < out_height
>795	Identifier	out_height
>796	Identifier	y
>797	ForInit	 
>798	IdentifierDeclStatement	int y = 0 ;
>799	IdentifierDecl	y = 0
>800	AssignmentExpr	y = 0
>801	PrimaryExpression	0
>802	Identifier	y
>803	Identifier	y
>804	IdentifierDeclType	int
>805	ExpressionStatement	 
>806	AssignmentExpr	remapY = ( float * ) Eigen 
>807	CastExpression	( float * ) Eigen 
>808	CallExpression	Eigen 
>809	ArgumentList	out_width * out_height * sizeof ( float )
>810	Argument	out_width * out_height * sizeof ( float )
>811	MultiplicativeExpression	out_width * out_height * sizeof ( float )
>812	MultiplicativeExpression	out_height * sizeof ( float )
>813	SizeofExpr	sizeof ( float )
>814	SizeofOperand	float
>815	Sizeof	sizeof
>816	Identifier	out_height
>817	Identifier	out_width
>818	Callee	Eigen 
>819	Identifier	Eigen 
>820	CastTarget	float *
>821	Identifier	remapY
>822	ExpressionStatement	 
>823	AssignmentExpr	remapX = ( float * ) Eigen 
>824	CastExpression	( float * ) Eigen 
>825	CallExpression	Eigen 
>826	ArgumentList	out_width * out_height * sizeof ( float )
>827	Argument	out_width * out_height * sizeof ( float )
>828	MultiplicativeExpression	out_width * out_height * sizeof ( float )
>829	MultiplicativeExpression	out_height * sizeof ( float )
>830	SizeofExpr	sizeof ( float )
>831	SizeofOperand	float
>832	Sizeof	sizeof
>833	Identifier	out_height
>834	Identifier	out_width
>835	Callee	Eigen 
>836	Identifier	Eigen 
>837	CastTarget	float *
>838	Identifier	remapX
>839	ExpressionStatement	 
>840	AssignmentExpr	outputCalibration [ 4 ] = 0
>841	PrimaryExpression	0
>842	ArrayIndexing	outputCalibration [ 4 ]
>843	PrimaryExpression	4
>844	Identifier	outputCalibration
>845	ExpressionStatement	 
>846	AssignmentExpr	outputCalibration [ 3 ] = ( ocy + 0.5 ) / out_height
>847	MultiplicativeExpression	( ocy + 0.5 ) / out_height
>848	Identifier	out_height
>849	AdditiveExpression	ocy + 0.5
>850	PrimaryExpression	0.5
>851	Identifier	ocy
>852	ArrayIndexing	outputCalibration [ 3 ]
>853	PrimaryExpression	3
>854	Identifier	outputCalibration
>855	ExpressionStatement	 
>856	AssignmentExpr	outputCalibration [ 2 ] = ( ocx + 0.5 ) / out_width
>857	MultiplicativeExpression	( ocx + 0.5 ) / out_width
>858	Identifier	out_width
>859	AdditiveExpression	ocx + 0.5
>860	PrimaryExpression	0.5
>861	Identifier	ocx
>862	ArrayIndexing	outputCalibration [ 2 ]
>863	PrimaryExpression	2
>864	Identifier	outputCalibration
>865	ExpressionStatement	 
>866	AssignmentExpr	outputCalibration [ 1 ] = ofy / out_height
>867	MultiplicativeExpression	ofy / out_height
>868	Identifier	out_height
>869	Identifier	ofy
>870	ArrayIndexing	outputCalibration [ 1 ]
>871	PrimaryExpression	1
>872	Identifier	outputCalibration
>873	ExpressionStatement	 
>874	AssignmentExpr	outputCalibration [ 0 ] = ofx / out_width
>875	MultiplicativeExpression	ofx / out_width
>876	Identifier	out_width
>877	Identifier	ofx
>878	ArrayIndexing	outputCalibration [ 0 ]
>879	PrimaryExpression	0
>880	Identifier	outputCalibration
>881	IfStatement	if ( inputCalibration [ 4 ] == 0 )
>882	ElseStatement	else
>883	IfStatement	if ( outputCalibration [ 0 ] == - 1 )
>884	ElseStatement	else
>885	IfStatement	if ( outputCalibration [ 0 ] == - 2 )
>886	ElseStatement	else
>887	CompoundStatement	 
>888	ExpressionStatement	 
>889	AssignmentExpr	ocy = outputCalibration [ 3 ] * out_height - 0.5
>890	AdditiveExpression	outputCalibration [ 3 ] * out_height - 0.5
>891	PrimaryExpression	0.5
>892	MultiplicativeExpression	outputCalibration [ 3 ] * out_height
>893	Identifier	out_height
>894	ArrayIndexing	outputCalibration [ 3 ]
>895	PrimaryExpression	3
>896	Identifier	outputCalibration
>897	Identifier	ocy
>898	ExpressionStatement	 
>899	AssignmentExpr	ocx = outputCalibration [ 2 ] * out_width - 0.5
>900	AdditiveExpression	outputCalibration [ 2 ] * out_width - 0.5
>901	PrimaryExpression	0.5
>902	MultiplicativeExpression	outputCalibration [ 2 ] * out_width
>903	Identifier	out_width
>904	ArrayIndexing	outputCalibration [ 2 ]
>905	PrimaryExpression	2
>906	Identifier	outputCalibration
>907	Identifier	ocx
>908	ExpressionStatement	 
>909	AssignmentExpr	ofy = outputCalibration [ 1 ] * out_height
>910	MultiplicativeExpression	outputCalibration [ 1 ] * out_height
>911	Identifier	out_height
>912	ArrayIndexing	outputCalibration [ 1 ]
>913	PrimaryExpression	1
>914	Identifier	outputCalibration
>915	Identifier	ofy
>916	ExpressionStatement	 
>917	AssignmentExpr	ofx = outputCalibration [ 0 ] * out_width
>918	MultiplicativeExpression	outputCalibration [ 0 ] * out_width
>919	Identifier	out_width
>920	ArrayIndexing	outputCalibration [ 0 ]
>921	PrimaryExpression	0
>922	Identifier	outputCalibration
>923	Identifier	ofx
>924	CompoundStatement	 
>925	ExpressionStatement	 
>926	CallExpression	printf ( \"old K
>927	ArgumentList	\"old K
>928	Argument	cy
>929	Identifier	cy
>930	Argument	cx
>931	Identifier	cx
>932	Argument	fy
>933	Identifier	fy
>934	Argument	fx
>935	Identifier	fx
>936	Argument	\"old K
>937	PrimaryExpression	\"old K
>938	Callee	printf
>939	Identifier	printf
>940	ExpressionStatement	 
>941	CallExpression	printf ( \"new K
>942	ArgumentList	\"new K
>943	Argument	ocy
>944	Identifier	ocy
>945	Argument	ocx
>946	Identifier	ocx
>947	Argument	ofy
>948	Identifier	ofy
>949	Argument	ofx
>950	Identifier	ofx
>951	Argument	\"new K
>952	PrimaryExpression	\"new K
>953	Callee	printf
>954	Identifier	printf
>955	ExpressionStatement	 
>956	AssignmentExpr	ocx = std 
>957	MultiplicativeExpression	std 
>958	MultiplicativeExpression	ofx * cx / fx
>959	MultiplicativeExpression	cx / fx
>960	Identifier	fx
>961	Identifier	cx
>962	Identifier	ofx
>963	CallExpression	std 
>964	ArgumentList	trans_bl_radius / bl_radius
>965	Argument	trans_tl_radius / tl_radius
>966	MultiplicativeExpression	trans_tl_radius / tl_radius
>967	Identifier	tl_radius
>968	Identifier	trans_tl_radius
>969	Argument	trans_bl_radius / bl_radius
>970	MultiplicativeExpression	trans_bl_radius / bl_radius
>971	Identifier	bl_radius
>972	Identifier	trans_bl_radius
>973	Callee	std 
>974	Identifier	std 
>975	Identifier	ocx
>976	ExpressionStatement	 
>977	AssignmentExpr	ofx = fx * ( ( hor ) / ( trans_hor ) ) * ( ( float ) out_width / ( float ) in_width )
>978	MultiplicativeExpression	fx * ( ( hor ) / ( trans_hor ) ) * ( ( float ) out_width / ( float ) in_width )
>979	MultiplicativeExpression	( ( hor ) / ( trans_hor ) ) * ( ( float ) out_width / ( float ) in_width )
>980	MultiplicativeExpression	( float ) out_width / ( float ) in_width
>981	CastExpression	( float ) in_width
>982	Identifier	in_width
>983	CastTarget	float
>984	CastExpression	( float ) out_width
>985	Identifier	out_width
>986	CastTarget	float
>987	MultiplicativeExpression	( hor ) / ( trans_hor )
>988	Identifier	trans_hor
>989	Identifier	hor
>990	Identifier	fx
>991	Identifier	ofx
>992	ExpressionStatement	 
>993	AssignmentExpr	ocy = std 
>994	MultiplicativeExpression	std 
>995	MultiplicativeExpression	ofy * cy / fy
>996	MultiplicativeExpression	cy / fy
>997	Identifier	fy
>998	Identifier	cy
>999	Identifier	ofy
>1000	CallExpression	std 
>1001	ArgumentList	trans_tl_radius / tl_radius
>1002	Argument	trans_tr_radius / tr_radius
>1003	MultiplicativeExpression	trans_tr_radius / tr_radius
>1004	Identifier	tr_radius
>1005	Identifier	trans_tr_radius
>1006	Argument	trans_tl_radius / tl_radius
>1007	MultiplicativeExpression	trans_tl_radius / tl_radius
>1008	Identifier	tl_radius
>1009	Identifier	trans_tl_radius
>1010	Callee	std 
>1011	Identifier	std 
>1012	Identifier	ocy
>1013	ExpressionStatement	 
>1014	AssignmentExpr	ofy = fy * ( ( vert ) / ( trans_vert ) ) * ( ( float ) out_height / ( float ) in_height )
>1015	MultiplicativeExpression	fy * ( ( vert ) / ( trans_vert ) ) * ( ( float ) out_height / ( float ) in_height )
>1016	MultiplicativeExpression	( ( vert ) / ( trans_vert ) ) * ( ( float ) out_height / ( float ) in_height )
>1017	MultiplicativeExpression	( float ) out_height / ( float ) in_height
>1018	CastExpression	( float ) in_height
>1019	Identifier	in_height
>1020	CastTarget	float
>1021	CastExpression	( float ) out_height
>1022	Identifier	out_height
>1023	CastTarget	float
>1024	MultiplicativeExpression	( vert ) / ( trans_vert )
>1025	Identifier	trans_vert
>1026	Identifier	vert
>1027	Identifier	fy
>1028	Identifier	ofy
>1029	IdentifierDeclStatement	 
>1030	IdentifierDecl	trans_vert = std 
>1031	AssignmentExpr	trans_vert = std 
>1032	AdditiveExpression	std 
>1033	CallExpression	std 
>1034	ArgumentList	trans_bl_radius
>1035	Argument	trans_br_radius
>1036	Identifier	trans_br_radius
>1037	Argument	trans_bl_radius
>1038	Identifier	trans_bl_radius
>1039	Callee	std 
>1040	Identifier	std 
>1041	CallExpression	std 
>1042	ArgumentList	trans_tr_radius
>1043	Argument	trans_tl_radius
>1044	Identifier	trans_tl_radius
>1045	Argument	trans_tr_radius
>1046	Identifier	trans_tr_radius
>1047	Callee	std 
>1048	Identifier	std 
>1049	Identifier	trans_vert
>1050	Identifier	trans_vert
>1051	IdentifierDeclType	float
>1052	IdentifierDeclStatement	 
>1053	IdentifierDecl	trans_hor = std 
>1054	AssignmentExpr	trans_hor = std 
>1055	AdditiveExpression	std 
>1056	CallExpression	std 
>1057	ArgumentList	trans_bl_radius
>1058	Argument	trans_tl_radius
>1059	Identifier	trans_tl_radius
>1060	Argument	trans_bl_radius
>1061	Identifier	trans_bl_radius
>1062	Callee	std 
>1063	Identifier	std 
>1064	CallExpression	std 
>1065	ArgumentList	trans_br_radius
>1066	Argument	trans_tr_radius
>1067	Identifier	trans_tr_radius
>1068	Argument	trans_br_radius
>1069	Identifier	trans_br_radius
>1070	Callee	std 
>1071	Identifier	std 
>1072	Identifier	trans_hor
>1073	Identifier	trans_hor
>1074	IdentifierDeclType	float
>1075	IdentifierDeclStatement	 
>1076	IdentifierDecl	vert = std 
>1077	AssignmentExpr	vert = std 
>1078	AdditiveExpression	std 
>1079	CallExpression	std 
>1080	ArgumentList	bl_radius
>1081	Argument	br_radius
>1082	Identifier	br_radius
>1083	Argument	bl_radius
>1084	Identifier	bl_radius
>1085	Callee	std 
>1086	Identifier	std 
>1087	CallExpression	std 
>1088	ArgumentList	tr_radius
>1089	Argument	tl_radius
>1090	Identifier	tl_radius
>1091	Argument	tr_radius
>1092	Identifier	tr_radius
>1093	Callee	std 
>1094	Identifier	std 
>1095	Identifier	vert
>1096	Identifier	vert
>1097	IdentifierDeclType	float
>1098	IdentifierDeclStatement	 
>1099	IdentifierDecl	hor = std 
>1100	AssignmentExpr	hor = std 
>1101	AdditiveExpression	std 
>1102	CallExpression	std 
>1103	ArgumentList	bl_radius
>1104	Argument	tl_radius
>1105	Identifier	tl_radius
>1106	Argument	bl_radius
>1107	Identifier	bl_radius
>1108	Callee	std 
>1109	Identifier	std 
>1110	CallExpression	std 
>1111	ArgumentList	br_radius
>1112	Argument	tr_radius
>1113	Identifier	tr_radius
>1114	Argument	br_radius
>1115	Identifier	br_radius
>1116	Callee	std 
>1117	Identifier	std 
>1118	Identifier	hor
>1119	Identifier	hor
>1120	IdentifierDeclType	float
>1121	IdentifierDeclStatement	 
>1122	IdentifierDecl	trans_br_radius = tan ( br_radius * dist ) / d2t
>1123	AssignmentExpr	trans_br_radius = tan ( br_radius * dist ) / d2t
>1124	MultiplicativeExpression	tan ( br_radius * dist ) / d2t
>1125	Identifier	d2t
>1126	CallExpression	tan ( br_radius * dist )
>1127	ArgumentList	br_radius * dist
>1128	Argument	br_radius * dist
>1129	MultiplicativeExpression	br_radius * dist
>1130	Identifier	dist
>1131	Identifier	br_radius
>1132	Callee	tan
>1133	Identifier	tan
>1134	Identifier	trans_br_radius
>1135	Identifier	trans_br_radius
>1136	IdentifierDeclType	float
>1137	IdentifierDeclStatement	 
>1138	IdentifierDecl	trans_bl_radius = tan ( bl_radius * dist ) / d2t
>1139	AssignmentExpr	trans_bl_radius = tan ( bl_radius * dist ) / d2t
>1140	MultiplicativeExpression	tan ( bl_radius * dist ) / d2t
>1141	Identifier	d2t
>1142	CallExpression	tan ( bl_radius * dist )
>1143	ArgumentList	bl_radius * dist
>1144	Argument	bl_radius * dist
>1145	MultiplicativeExpression	bl_radius * dist
>1146	Identifier	dist
>1147	Identifier	bl_radius
>1148	Callee	tan
>1149	Identifier	tan
>1150	Identifier	trans_bl_radius
>1151	Identifier	trans_bl_radius
>1152	IdentifierDeclType	float
>1153	IdentifierDeclStatement	 
>1154	IdentifierDecl	trans_tr_radius = tan ( tr_radius * dist ) / d2t
>1155	AssignmentExpr	trans_tr_radius = tan ( tr_radius * dist ) / d2t
>1156	MultiplicativeExpression	tan ( tr_radius * dist ) / d2t
>1157	Identifier	d2t
>1158	CallExpression	tan ( tr_radius * dist )
>1159	ArgumentList	tr_radius * dist
>1160	Argument	tr_radius * dist
>1161	MultiplicativeExpression	tr_radius * dist
>1162	Identifier	dist
>1163	Identifier	tr_radius
>1164	Callee	tan
>1165	Identifier	tan
>1166	Identifier	trans_tr_radius
>1167	Identifier	trans_tr_radius
>1168	IdentifierDeclType	float
>1169	IdentifierDeclStatement	 
>1170	IdentifierDecl	trans_tl_radius = tan ( tl_radius * dist ) / d2t
>1171	AssignmentExpr	trans_tl_radius = tan ( tl_radius * dist ) / d2t
>1172	MultiplicativeExpression	tan ( tl_radius * dist ) / d2t
>1173	Identifier	d2t
>1174	CallExpression	tan ( tl_radius * dist )
>1175	ArgumentList	tl_radius * dist
>1176	Argument	tl_radius * dist
>1177	MultiplicativeExpression	tl_radius * dist
>1178	Identifier	dist
>1179	Identifier	tl_radius
>1180	Callee	tan
>1181	Identifier	tan
>1182	Identifier	trans_tl_radius
>1183	Identifier	trans_tl_radius
>1184	IdentifierDeclType	float
>1185	IdentifierDeclStatement	 
>1186	IdentifierDecl	br_radius = sqrt ( right_radius * right_radius + bottom_radius * bottom_radius )
>1187	AssignmentExpr	br_radius = sqrt ( right_radius * right_radius + bottom_radius * bottom_radius )
>1188	CallExpression	sqrt ( right_radius * right_radius + bottom_radius * bottom_radius )
>1189	ArgumentList	right_radius * right_radius + bottom_radius * bottom_radius
>1190	Argument	right_radius * right_radius + bottom_radius * bottom_radius
>1191	AdditiveExpression	right_radius * right_radius + bottom_radius * bottom_radius
>1192	MultiplicativeExpression	bottom_radius * bottom_radius
>1193	Identifier	bottom_radius
>1194	Identifier	bottom_radius
>1195	MultiplicativeExpression	right_radius * right_radius
>1196	Identifier	right_radius
>1197	Identifier	right_radius
>1198	Callee	sqrt
>1199	Identifier	sqrt
>1200	Identifier	br_radius
>1201	Identifier	br_radius
>1202	IdentifierDeclType	float
>1203	IdentifierDeclStatement	 
>1204	IdentifierDecl	bl_radius = sqrt ( left_radius * left_radius + bottom_radius * bottom_radius )
>1205	AssignmentExpr	bl_radius = sqrt ( left_radius * left_radius + bottom_radius * bottom_radius )
>1206	CallExpression	sqrt ( left_radius * left_radius + bottom_radius * bottom_radius )
>1207	ArgumentList	left_radius * left_radius + bottom_radius * bottom_radius
>1208	Argument	left_radius * left_radius + bottom_radius * bottom_radius
>1209	AdditiveExpression	left_radius * left_radius + bottom_radius * bottom_radius
>1210	MultiplicativeExpression	bottom_radius * bottom_radius
>1211	Identifier	bottom_radius
>1212	Identifier	bottom_radius
>1213	MultiplicativeExpression	left_radius * left_radius
>1214	Identifier	left_radius
>1215	Identifier	left_radius
>1216	Callee	sqrt
>1217	Identifier	sqrt
>1218	Identifier	bl_radius
>1219	Identifier	bl_radius
>1220	IdentifierDeclType	float
>1221	IdentifierDeclStatement	 
>1222	IdentifierDecl	tr_radius = sqrt ( right_radius * right_radius + top_radius * top_radius )
>1223	AssignmentExpr	tr_radius = sqrt ( right_radius * right_radius + top_radius * top_radius )
>1224	CallExpression	sqrt ( right_radius * right_radius + top_radius * top_radius )
>1225	ArgumentList	right_radius * right_radius + top_radius * top_radius
>1226	Argument	right_radius * right_radius + top_radius * top_radius
>1227	AdditiveExpression	right_radius * right_radius + top_radius * top_radius
>1228	MultiplicativeExpression	top_radius * top_radius
>1229	Identifier	top_radius
>1230	Identifier	top_radius
>1231	MultiplicativeExpression	right_radius * right_radius
>1232	Identifier	right_radius
>1233	Identifier	right_radius
>1234	Callee	sqrt
>1235	Identifier	sqrt
>1236	Identifier	tr_radius
>1237	Identifier	tr_radius
>1238	IdentifierDeclType	float
>1239	IdentifierDeclStatement	 
>1240	IdentifierDecl	tl_radius = sqrt ( left_radius * left_radius + top_radius * top_radius )
>1241	AssignmentExpr	tl_radius = sqrt ( left_radius * left_radius + top_radius * top_radius )
>1242	CallExpression	sqrt ( left_radius * left_radius + top_radius * top_radius )
>1243	ArgumentList	left_radius * left_radius + top_radius * top_radius
>1244	Argument	left_radius * left_radius + top_radius * top_radius
>1245	AdditiveExpression	left_radius * left_radius + top_radius * top_radius
>1246	MultiplicativeExpression	top_radius * top_radius
>1247	Identifier	top_radius
>1248	Identifier	top_radius
>1249	MultiplicativeExpression	left_radius * left_radius
>1250	Identifier	left_radius
>1251	Identifier	left_radius
>1252	Callee	sqrt
>1253	Identifier	sqrt
>1254	Identifier	tl_radius
>1255	Identifier	tl_radius
>1256	IdentifierDeclType	float
>1257	IdentifierDeclStatement	 
>1258	IdentifierDecl	bottom_radius = ( in_height - 1 - cy ) / fy
>1259	AssignmentExpr	bottom_radius = ( in_height - 1 - cy ) / fy
>1260	MultiplicativeExpression	( in_height - 1 - cy ) / fy
>1261	Identifier	fy
>1262	AdditiveExpression	in_height - 1 - cy
>1263	AdditiveExpression	1 - cy
>1264	Identifier	cy
>1265	PrimaryExpression	1
>1266	Identifier	in_height
>1267	Identifier	bottom_radius
>1268	Identifier	bottom_radius
>1269	IdentifierDeclType	float
>1270	IdentifierDeclStatement	 
>1271	IdentifierDecl	top_radius = cy / fy
>1272	AssignmentExpr	top_radius = cy / fy
>1273	MultiplicativeExpression	cy / fy
>1274	Identifier	fy
>1275	Identifier	cy
>1276	Identifier	top_radius
>1277	Identifier	top_radius
>1278	IdentifierDeclType	float
>1279	IdentifierDeclStatement	 
>1280	IdentifierDecl	right_radius = ( in_width - 1 - cx ) / fx
>1281	AssignmentExpr	right_radius = ( in_width - 1 - cx ) / fx
>1282	MultiplicativeExpression	( in_width - 1 - cx ) / fx
>1283	Identifier	fx
>1284	AdditiveExpression	in_width - 1 - cx
>1285	AdditiveExpression	1 - cx
>1286	Identifier	cx
>1287	PrimaryExpression	1
>1288	Identifier	in_width
>1289	Identifier	right_radius
>1290	Identifier	right_radius
>1291	IdentifierDeclType	float
>1292	IdentifierDeclStatement	 
>1293	IdentifierDecl	left_radius = cx / fx
>1294	AssignmentExpr	left_radius = cx / fx
>1295	MultiplicativeExpression	cx / fx
>1296	Identifier	fx
>1297	Identifier	cx
>1298	Identifier	left_radius
>1299	Identifier	left_radius
>1300	IdentifierDeclType	float
>1301	Condition	 
>1302	EqualityExpression	outputCalibration [ 0 ] == - 2
>1303	UnaryOp	- 2
>1304	PrimaryExpression	2
>1305	UnaryOperator	-
>1306	ArrayIndexing	outputCalibration [ 0 ]
>1307	PrimaryExpression	0
>1308	Identifier	outputCalibration
>1309	CompoundStatement	 
>1310	ExpressionStatement	 
>1311	CallExpression	printf ( \"old K
>1312	ArgumentList	\"old K
>1313	Argument	cy
>1314	Identifier	cy
>1315	Argument	cx
>1316	Identifier	cx
>1317	Argument	fy
>1318	Identifier	fy
>1319	Argument	fx
>1320	Identifier	fx
>1321	Argument	\"old K
>1322	PrimaryExpression	\"old K
>1323	Callee	printf
>1324	Identifier	printf
>1325	ExpressionStatement	 
>1326	CallExpression	printf ( \"new K
>1327	ArgumentList	\"new K
>1328	Argument	ocy
>1329	Identifier	ocy
>1330	Argument	ocx
>1331	Identifier	ocx
>1332	Argument	ofy
>1333	Identifier	ofy
>1334	Argument	ofx
>1335	Identifier	ofx
>1336	Argument	\"new K
>1337	PrimaryExpression	\"new K
>1338	Callee	printf
>1339	Identifier	printf
>1340	ExpressionStatement	 
>1341	AssignmentExpr	ocx = ( trans_left_radius / left_radius ) * ofx * cx / fx
>1342	MultiplicativeExpression	( trans_left_radius / left_radius ) * ofx * cx / fx
>1343	MultiplicativeExpression	ofx * cx / fx
>1344	MultiplicativeExpression	cx / fx
>1345	Identifier	fx
>1346	Identifier	cx
>1347	Identifier	ofx
>1348	MultiplicativeExpression	trans_left_radius / left_radius
>1349	Identifier	left_radius
>1350	Identifier	trans_left_radius
>1351	Identifier	ocx
>1352	ExpressionStatement	 
>1353	AssignmentExpr	ofx = fx * ( ( left_radius + right_radius ) / ( trans_left_radius + trans_right_radius ) ) * ( ( float ) \
>1354	MultiplicativeExpression	fx * ( ( left_radius + right_radius ) / ( trans_left_radius + trans_right_radius ) ) * ( ( float ) out_\
>1355	MultiplicativeExpression	( ( left_radius + right_radius ) / ( trans_left_radius + trans_right_radius ) ) * ( ( float ) out_width / ( \
>1356	MultiplicativeExpression	( float ) out_width / ( float ) in_width
>1357	CastExpression	( float ) in_width
>1358	Identifier	in_width
>1359	CastTarget	float
>1360	CastExpression	( float ) out_width
>1361	Identifier	out_width
>1362	CastTarget	float
>1363	MultiplicativeExpression	( left_radius + right_radius ) / ( trans_left_radius + trans_right_radius )
>1364	AdditiveExpression	trans_left_radius + trans_right_radius
>1365	Identifier	trans_right_radius
>1366	Identifier	trans_left_radius
>1367	AdditiveExpression	left_radius + right_radius
>1368	Identifier	right_radius
>1369	Identifier	left_radius
>1370	Identifier	fx
>1371	Identifier	ofx
>1372	ExpressionStatement	 
>1373	AssignmentExpr	ocy = ( trans_top_radius / top_radius ) * ofy * cy / fy
>1374	MultiplicativeExpression	( trans_top_radius / top_radius ) * ofy * cy / fy
>1375	MultiplicativeExpression	ofy * cy / fy
>1376	MultiplicativeExpression	cy / fy
>1377	Identifier	fy
>1378	Identifier	cy
>1379	Identifier	ofy
>1380	MultiplicativeExpression	trans_top_radius / top_radius
>1381	Identifier	top_radius
>1382	Identifier	trans_top_radius
>1383	Identifier	ocy
>1384	ExpressionStatement	 
>1385	AssignmentExpr	ofy = fy * ( ( top_radius + bottom_radius ) / ( trans_top_radius + trans_bottom_radius ) ) * ( ( float ) \
>1386	MultiplicativeExpression	fy * ( ( top_radius + bottom_radius ) / ( trans_top_radius + trans_bottom_radius ) ) * ( ( float ) out_\
>1387	MultiplicativeExpression	( ( top_radius + bottom_radius ) / ( trans_top_radius + trans_bottom_radius ) ) * ( ( float ) out_height / ( \
>1388	MultiplicativeExpression	( float ) out_height / ( float ) in_height
>1389	CastExpression	( float ) in_height
>1390	Identifier	in_height
>1391	CastTarget	float
>1392	CastExpression	( float ) out_height
>1393	Identifier	out_height
>1394	CastTarget	float
>1395	MultiplicativeExpression	( top_radius + bottom_radius ) / ( trans_top_radius + trans_bottom_radius )
>1396	AdditiveExpression	trans_top_radius + trans_bottom_radius
>1397	Identifier	trans_bottom_radius
>1398	Identifier	trans_top_radius
>1399	AdditiveExpression	top_radius + bottom_radius
>1400	Identifier	bottom_radius
>1401	Identifier	top_radius
>1402	Identifier	fy
>1403	Identifier	ofy
>1404	IdentifierDeclStatement	 
>1405	IdentifierDecl	trans_bottom_radius = tan ( bottom_radius * dist ) / d2t
>1406	AssignmentExpr	trans_bottom_radius = tan ( bottom_radius * dist ) / d2t
>1407	MultiplicativeExpression	tan ( bottom_radius * dist ) / d2t
>1408	Identifier	d2t
>1409	CallExpression	tan ( bottom_radius * dist )
>1410	ArgumentList	bottom_radius * dist
>1411	Argument	bottom_radius * dist
>1412	MultiplicativeExpression	bottom_radius * dist
>1413	Identifier	dist
>1414	Identifier	bottom_radius
>1415	Callee	tan
>1416	Identifier	tan
>1417	Identifier	trans_bottom_radius
>1418	Identifier	trans_bottom_radius
>1419	IdentifierDeclType	float
>1420	IdentifierDeclStatement	 
>1421	IdentifierDecl	trans_top_radius = tan ( top_radius * dist ) / d2t
>1422	AssignmentExpr	trans_top_radius = tan ( top_radius * dist ) / d2t
>1423	MultiplicativeExpression	tan ( top_radius * dist ) / d2t
>1424	Identifier	d2t
>1425	CallExpression	tan ( top_radius * dist )
>1426	ArgumentList	top_radius * dist
>1427	Argument	top_radius * dist
>1428	MultiplicativeExpression	top_radius * dist
>1429	Identifier	dist
>1430	Identifier	top_radius
>1431	Callee	tan
>1432	Identifier	tan
>1433	Identifier	trans_top_radius
>1434	Identifier	trans_top_radius
>1435	IdentifierDeclType	float
>1436	IdentifierDeclStatement	 
>1437	IdentifierDecl	trans_right_radius = tan ( right_radius * dist ) / d2t
>1438	AssignmentExpr	trans_right_radius = tan ( right_radius * dist ) / d2t
>1439	MultiplicativeExpression	tan ( right_radius * dist ) / d2t
>1440	Identifier	d2t
>1441	CallExpression	tan ( right_radius * dist )
>1442	ArgumentList	right_radius * dist
>1443	Argument	right_radius * dist
>1444	MultiplicativeExpression	right_radius * dist
>1445	Identifier	dist
>1446	Identifier	right_radius
>1447	Callee	tan
>1448	Identifier	tan
>1449	Identifier	trans_right_radius
>1450	Identifier	trans_right_radius
>1451	IdentifierDeclType	float
>1452	IdentifierDeclStatement	 
>1453	IdentifierDecl	trans_left_radius = tan ( left_radius * dist ) / d2t
>1454	AssignmentExpr	trans_left_radius = tan ( left_radius * dist ) / d2t
>1455	MultiplicativeExpression	tan ( left_radius * dist ) / d2t
>1456	Identifier	d2t
>1457	CallExpression	tan ( left_radius * dist )
>1458	ArgumentList	left_radius * dist
>1459	Argument	left_radius * dist
>1460	MultiplicativeExpression	left_radius * dist
>1461	Identifier	dist
>1462	Identifier	left_radius
>1463	Callee	tan
>1464	Identifier	tan
>1465	Identifier	trans_left_radius
>1466	Identifier	trans_left_radius
>1467	IdentifierDeclType	float
>1468	IdentifierDeclStatement	 
>1469	IdentifierDecl	bottom_radius = ( in_height - 1 - cy ) / fy
>1470	AssignmentExpr	bottom_radius = ( in_height - 1 - cy ) / fy
>1471	MultiplicativeExpression	( in_height - 1 - cy ) / fy
>1472	Identifier	fy
>1473	AdditiveExpression	in_height - 1 - cy
>1474	AdditiveExpression	1 - cy
>1475	Identifier	cy
>1476	PrimaryExpression	1
>1477	Identifier	in_height
>1478	Identifier	bottom_radius
>1479	Identifier	bottom_radius
>1480	IdentifierDeclType	float
>1481	IdentifierDeclStatement	 
>1482	IdentifierDecl	top_radius = ( cy ) / fy
>1483	AssignmentExpr	top_radius = ( cy ) / fy
>1484	MultiplicativeExpression	( cy ) / fy
>1485	Identifier	fy
>1486	Identifier	cy
>1487	Identifier	top_radius
>1488	Identifier	top_radius
>1489	IdentifierDeclType	float
>1490	IdentifierDeclStatement	 
>1491	IdentifierDecl	right_radius = ( in_width - 1 - cx ) / fx
>1492	AssignmentExpr	right_radius = ( in_width - 1 - cx ) / fx
>1493	MultiplicativeExpression	( in_width - 1 - cx ) / fx
>1494	Identifier	fx
>1495	AdditiveExpression	in_width - 1 - cx
>1496	AdditiveExpression	1 - cx
>1497	Identifier	cx
>1498	PrimaryExpression	1
>1499	Identifier	in_width
>1500	Identifier	right_radius
>1501	Identifier	right_radius
>1502	IdentifierDeclType	float
>1503	IdentifierDeclStatement	 
>1504	IdentifierDecl	left_radius = ( cx ) / fx
>1505	AssignmentExpr	left_radius = ( cx ) / fx
>1506	MultiplicativeExpression	( cx ) / fx
>1507	Identifier	fx
>1508	Identifier	cx
>1509	Identifier	left_radius
>1510	Identifier	left_radius
>1511	IdentifierDeclType	float
>1512	Condition	 
>1513	EqualityExpression	outputCalibration [ 0 ] == - 1
>1514	UnaryOp	- 1
>1515	PrimaryExpression	1
>1516	UnaryOperator	-
>1517	ArrayIndexing	outputCalibration [ 0 ]
>1518	PrimaryExpression	0
>1519	Identifier	outputCalibration
>1520	CompoundStatement	 
>1521	ExpressionStatement	 
>1522	AssignmentExpr	ocy = ( inputCalibration [ 3 ] * out_height ) - 0.5
>1523	AdditiveExpression	( inputCalibration [ 3 ] * out_height ) - 0.5
>1524	PrimaryExpression	0.5
>1525	MultiplicativeExpression	inputCalibration [ 3 ] * out_height
>1526	Identifier	out_height
>1527	ArrayIndexing	inputCalibration [ 3 ]
>1528	PrimaryExpression	3
>1529	Identifier	inputCalibration
>1530	Identifier	ocy
>1531	ExpressionStatement	 
>1532	AssignmentExpr	ocx = ( inputCalibration [ 2 ] * out_width ) - 0.5
>1533	AdditiveExpression	( inputCalibration [ 2 ] * out_width ) - 0.5
>1534	PrimaryExpression	0.5
>1535	MultiplicativeExpression	inputCalibration [ 2 ] * out_width
>1536	Identifier	out_width
>1537	ArrayIndexing	inputCalibration [ 2 ]
>1538	PrimaryExpression	2
>1539	Identifier	inputCalibration
>1540	Identifier	ocx
>1541	ExpressionStatement	 
>1542	AssignmentExpr	ofy = inputCalibration [ 1 ] * out_height
>1543	MultiplicativeExpression	inputCalibration [ 1 ] * out_height
>1544	Identifier	out_height
>1545	ArrayIndexing	inputCalibration [ 1 ]
>1546	PrimaryExpression	1
>1547	Identifier	inputCalibration
>1548	Identifier	ofy
>1549	ExpressionStatement	 
>1550	AssignmentExpr	ofx = inputCalibration [ 0 ] * out_width
>1551	MultiplicativeExpression	inputCalibration [ 0 ] * out_width
>1552	Identifier	out_width
>1553	ArrayIndexing	inputCalibration [ 0 ]
>1554	PrimaryExpression	0
>1555	Identifier	inputCalibration
>1556	Identifier	ofx
>1557	Condition	 
>1558	EqualityExpression	inputCalibration [ 4 ] == 0
>1559	PrimaryExpression	0
>1560	ArrayIndexing	inputCalibration [ 4 ]
>1561	PrimaryExpression	4
>1562	Identifier	inputCalibration
>1563	IdentifierDeclStatement	 
>1564	IdentifierDecl	ocy
>1565	Identifier	ocy
>1566	IdentifierDeclType	float
>1567	IdentifierDecl	ocx
>1568	Identifier	ocx
>1569	IdentifierDeclType	float
>1570	IdentifierDecl	ofy
>1571	Identifier	ofy
>1572	IdentifierDeclType	float
>1573	IdentifierDecl	ofx
>1574	Identifier	ofx
>1575	IdentifierDeclType	float
>1576	ExpressionStatement	 
>1577	AssignmentExpr	cy = ( cy + 0.5 ) * yfactor - 0.5
>1578	AdditiveExpression	( cy + 0.5 ) * yfactor - 0.5
>1579	PrimaryExpression	0.5
>1580	MultiplicativeExpression	( cy + 0.5 ) * yfactor
>1581	Identifier	yfactor
>1582	AdditiveExpression	cy + 0.5
>1583	PrimaryExpression	0.5
>1584	Identifier	cy
>1585	Identifier	cy
>1586	ExpressionStatement	 
>1587	AssignmentExpr	cx = ( cx + 0.5 ) * xfactor - 0.5
>1588	AdditiveExpression	( cx + 0.5 ) * xfactor - 0.5
>1589	PrimaryExpression	0.5
>1590	MultiplicativeExpression	( cx + 0.5 ) * xfactor
>1591	Identifier	xfactor
>1592	AdditiveExpression	cx + 0.5
>1593	PrimaryExpression	0.5
>1594	Identifier	cx
>1595	Identifier	cx
>1596	ExpressionStatement	 
>1597	AssignmentExpr	fy = fy * yfactor
>1598	MultiplicativeExpression	fy * yfactor
>1599	Identifier	yfactor
>1600	Identifier	fy
>1601	Identifier	fy
>1602	ExpressionStatement	 
>1603	AssignmentExpr	fx = fx * xfactor
>1604	MultiplicativeExpression	fx * xfactor
>1605	Identifier	xfactor
>1606	Identifier	fx
>1607	Identifier	fx
>1608	IdentifierDeclStatement	 
>1609	IdentifierDecl	yfactor = in_height / ( 1.0 * in_height )
>1610	AssignmentExpr	yfactor = in_height / ( 1.0 * in_height )
>1611	MultiplicativeExpression	in_height / ( 1.0 * in_height )
>1612	MultiplicativeExpression	1.0 * in_height
>1613	Identifier	in_height
>1614	PrimaryExpression	1.0
>1615	Identifier	in_height
>1616	Identifier	yfactor
>1617	Identifier	yfactor
>1618	IdentifierDeclType	double
>1619	IdentifierDeclStatement	 
>1620	IdentifierDecl	xfactor = in_width / ( 1.0 * in_width )
>1621	AssignmentExpr	xfactor = in_width / ( 1.0 * in_width )
>1622	MultiplicativeExpression	in_width / ( 1.0 * in_width )
>1623	MultiplicativeExpression	1.0 * in_width
>1624	Identifier	in_width
>1625	PrimaryExpression	1.0
>1626	Identifier	in_width
>1627	Identifier	xfactor
>1628	Identifier	xfactor
>1629	IdentifierDeclType	double
>1630	IdentifierDeclStatement	 
>1631	IdentifierDecl	cy = inputCalibration [ 3 ] * in_height - 0.5
>1632	AssignmentExpr	cy = inputCalibration [ 3 ] * in_height - 0.5
>1633	AdditiveExpression	inputCalibration [ 3 ] * in_height - 0.5
>1634	PrimaryExpression	0.5
>1635	MultiplicativeExpression	inputCalibration [ 3 ] * in_height
>1636	Identifier	in_height
>1637	ArrayIndexing	inputCalibration [ 3 ]
>1638	PrimaryExpression	3
>1639	Identifier	inputCalibration
>1640	Identifier	cy
>1641	Identifier	cy
>1642	IdentifierDeclType	float
>1643	IdentifierDeclStatement	 
>1644	IdentifierDecl	cx = inputCalibration [ 2 ] * in_width - 0.5
>1645	AssignmentExpr	cx = inputCalibration [ 2 ] * in_width - 0.5
>1646	AdditiveExpression	inputCalibration [ 2 ] * in_width - 0.5
>1647	PrimaryExpression	0.5
>1648	MultiplicativeExpression	inputCalibration [ 2 ] * in_width
>1649	Identifier	in_width
>1650	ArrayIndexing	inputCalibration [ 2 ]
>1651	PrimaryExpression	2
>1652	Identifier	inputCalibration
>1653	Identifier	cx
>1654	Identifier	cx
>1655	IdentifierDeclType	float
>1656	IdentifierDeclStatement	 
>1657	IdentifierDecl	fy = inputCalibration [ 1 ] * in_height
>1658	AssignmentExpr	fy = inputCalibration [ 1 ] * in_height
>1659	MultiplicativeExpression	inputCalibration [ 1 ] * in_height
>1660	Identifier	in_height
>1661	ArrayIndexing	inputCalibration [ 1 ]
>1662	PrimaryExpression	1
>1663	Identifier	inputCalibration
>1664	Identifier	fy
>1665	Identifier	fy
>1666	IdentifierDeclType	float
>1667	IdentifierDeclStatement	 
>1668	IdentifierDecl	fx = inputCalibration [ 0 ] * in_width
>1669	AssignmentExpr	fx = inputCalibration [ 0 ] * in_width
>1670	MultiplicativeExpression	inputCalibration [ 0 ] * in_width
>1671	Identifier	in_width
>1672	ArrayIndexing	inputCalibration [ 0 ]
>1673	PrimaryExpression	0
>1674	Identifier	inputCalibration
>1675	Identifier	fx
>1676	Identifier	fx
>1677	IdentifierDeclType	float
>1678	IdentifierDeclStatement	 
>1679	IdentifierDecl	d2t = 2.0f * tan ( dist / 2.0f )
>1680	AssignmentExpr	d2t = 2.0f * tan ( dist / 2.0f )
>1681	MultiplicativeExpression	2.0f * tan ( dist / 2.0f )
>1682	CallExpression	tan ( dist / 2.0f )
>1683	ArgumentList	dist / 2.0f
>1684	Argument	dist / 2.0f
>1685	MultiplicativeExpression	dist / 2.0f
>1686	PrimaryExpression	2.0f
>1687	Identifier	dist
>1688	Callee	tan
>1689	Identifier	tan
>1690	PrimaryExpression	2.0f
>1691	Identifier	d2t
>1692	Identifier	d2t
>1693	IdentifierDeclType	float
>1694	IdentifierDeclStatement	 
>1695	IdentifierDecl	dist = inputCalibration [ 4 ]
>1696	AssignmentExpr	dist = inputCalibration [ 4 ]
>1697	ArrayIndexing	inputCalibration [ 4 ]
>1698	PrimaryExpression	4
>1699	Identifier	inputCalibration
>1700	Identifier	dist
>1701	Identifier	dist
>1702	IdentifierDeclType	float
>1703	Condition	 
>1704	Identifier	valid
>1705	IfStatement	if ( std 
>1706	ElseStatement	else
>1707	CompoundStatement	 
>1708	ExpressionStatement	 
>1709	AssignmentExpr	valid = false
>1710	Identifier	false
>1711	Identifier	valid
>1712	ExpressionStatement	 
>1713	CallExpression	printf ( \"Out
>1714	ArgumentList	\"Out
>1715	Argument	\"Out
>1716	PrimaryExpression	\"Out
>1717	Callee	printf
>1718	Identifier	printf
>1719	CompoundStatement	 
>1720	ExpressionStatement	 
>1721	CallExpression	printf ( \"Output resolution
>1722	ArgumentList	\"Output resolution
>1723	Argument	out_height
>1724	Identifier	out_height
>1725	Argument	out_width
>1726	Identifier	out_width
>1727	Argument	\"Output resolution
>1728	PrimaryExpression	\"Output resolution
>1729	Callee	printf
>1730	Identifier	printf
>1731	Condition	 
>1732	EqualityExpression	std 
>1733	PrimaryExpression	2
>1734	CallExpression	std 
>1735	ArgumentList	l4 . c_str ( )
>1736	Argument	& out_height
>1737	UnaryOp	& out_height
>1738	Identifier	out_height
>1739	UnaryOperator	&
>1740	Argument	& out_width
>1741	UnaryOp	& out_width
>1742	Identifier	out_width
>1743	UnaryOperator	&
>1744	Argument	\"%d %d\"
>1745	PrimaryExpression	\"%d %d\"
>1746	Argument	l4 . c_str ( )
>1747	CallExpression	l4 . c_str ( )
>1748	ArgumentList	 
>1749	Callee	l4 . c_str
>1750	MemberAccess	l4 . c_str
>1751	Identifier	c_str
>1752	Identifier	l4
>1753	Callee	std 
>1754	Identifier	std 
>1755	IfStatement	if ( l3 == \"crop\" )
>1756	ElseStatement	else
>1757	IfStatement	if ( l3 == \"full\" )
>1758	ElseStatement	else
>1759	IfStatement	if ( l3 == \"none\" )
>1760	ElseStatement	else
>1761	IfStatement	if ( std 
>1762	ElseStatement	else
>1763	CompoundStatement	 
>1764	ExpressionStatement	 
>1765	AssignmentExpr	valid = false
>1766	Identifier	false
>1767	Identifier	valid
>1768	ExpressionStatement	 
>1769	CallExpression	printf ( \"Out
>1770	ArgumentList	\"Out
>1771	Argument	\"Out
>1772	PrimaryExpression	\"Out
>1773	Callee	printf
>1774	Identifier	printf
>1775	CompoundStatement	 
>1776	ExpressionStatement	 
>1777	CallExpression	printf ( \"Out
>1778	ArgumentList	\"Out
>1779	Argument	outputCalibration [ 4 ]
>1780	ArrayIndexing	outputCalibration [ 4 ]
>1781	PrimaryExpression	4
>1782	Identifier	outputCalibration
>1783	Argument	outputCalibration [ 3 ]
>1784	ArrayIndexing	outputCalibration [ 3 ]
>1785	PrimaryExpression	3
>1786	Identifier	outputCalibration
>1787	Argument	outputCalibration [ 2 ]
>1788	ArrayIndexing	outputCalibration [ 2 ]
>1789	PrimaryExpression	2
>1790	Identifier	outputCalibration
>1791	Argument	outputCalibration [ 1 ]
>1792	ArrayIndexing	outputCalibration [ 1 ]
>1793	PrimaryExpression	1
>1794	Identifier	outputCalibration
>1795	Argument	outputCalibration [ 0 ]
>1796	ArrayIndexing	outputCalibration [ 0 ]
>1797	PrimaryExpression	0
>1798	Identifier	outputCalibration
>1799	Argument	\"Out
>1800	PrimaryExpression	\"Out
>1801	Callee	printf
>1802	Identifier	printf
>1803	Condition	 
>1804	EqualityExpression	std 
>1805	PrimaryExpression	5
>1806	CallExpression	std 
>1807	ArgumentList	l3 . c_str ( )
>1808	Argument	& outputCalibration [ 4 ]
>1809	UnaryOp	& outputCalibration [ 4 ]
>1810	ArrayIndexing	outputCalibration [ 4 ]
>1811	PrimaryExpression	4
>1812	Identifier	outputCalibration
>1813	UnaryOperator	&
>1814	Argument	& outputCalibration [ 3 ]
>1815	UnaryOp	& outputCalibration [ 3 ]
>1816	ArrayIndexing	outputCalibration [ 3 ]
>1817	PrimaryExpression	3
>1818	Identifier	outputCalibration
>1819	UnaryOperator	&
>1820	Argument	& outputCalibration [ 2 ]
>1821	UnaryOp	& outputCalibration [ 2 ]
>1822	ArrayIndexing	outputCalibration [ 2 ]
>1823	PrimaryExpression	2
>1824	Identifier	outputCalibration
>1825	UnaryOperator	&
>1826	Argument	& outputCalibration [ 1 ]
>1827	UnaryOp	& outputCalibration [ 1 ]
>1828	ArrayIndexing	outputCalibration [ 1 ]
>1829	PrimaryExpression	1
>1830	Identifier	outputCalibration
>1831	UnaryOperator	&
>1832	Argument	& outputCalibration [ 0 ]
>1833	UnaryOp	& outputCalibration [ 0 ]
>1834	ArrayIndexing	outputCalibration [ 0 ]
>1835	PrimaryExpression	0
>1836	Identifier	outputCalibration
>1837	UnaryOperator	&
>1838	Argument	\"%f %f %f %f %f\"
>1839	PrimaryExpression	\"%f %f %f %f %f\"
>1840	Argument	l3 . c_str ( )
>1841	CallExpression	l3 . c_str ( )
>1842	ArgumentList	 
>1843	Callee	l3 . c_str
>1844	MemberAccess	l3 . c_str
>1845	Identifier	c_str
>1846	Identifier	l3
>1847	Callee	std 
>1848	Identifier	std 
>1849	CompoundStatement	 
>1850	ExpressionStatement	 
>1851	CallExpression	printf ( \"NO RECTIFICATION\n\" )
>1852	ArgumentList	\"NO RECTIFICATION\n\"
>1853	Argument	\"NO RECTIFICATION\n\"
>1854	PrimaryExpression	\"NO RECTIFICATION\n\"
>1855	Callee	printf
>1856	Identifier	printf
>1857	Condition	 
>1858	EqualityExpression	l3 == \"none\"
>1859	PrimaryExpression	\"none\"
>1860	Identifier	l3
>1861	CompoundStatement	 
>1862	ExpressionStatement	 
>1863	CallExpression	printf ( \"Out
>1864	ArgumentList	\"Out
>1865	Argument	\"Out
>1866	PrimaryExpression	\"Out
>1867	Callee	printf
>1868	Identifier	printf
>1869	ExpressionStatement	 
>1870	AssignmentExpr	outputCalibration [ 0 ] = - 2
>1871	UnaryOp	- 2
>1872	PrimaryExpression	2
>1873	UnaryOperator	-
>1874	ArrayIndexing	outputCalibration [ 0 ]
>1875	PrimaryExpression	0
>1876	Identifier	outputCalibration
>1877	Condition	 
>1878	EqualityExpression	l3 == \"full\"
>1879	PrimaryExpression	\"full\"
>1880	Identifier	l3
>1881	CompoundStatement	 
>1882	ExpressionStatement	 
>1883	CallExpression	printf ( \"Out
>1884	ArgumentList	\"Out
>1885	Argument	\"Out
>1886	PrimaryExpression	\"Out
>1887	Callee	printf
>1888	Identifier	printf
>1889	ExpressionStatement	 
>1890	AssignmentExpr	outputCalibration [ 0 ] = - 1
>1891	UnaryOp	- 1
>1892	PrimaryExpression	1
>1893	UnaryOperator	-
>1894	ArrayIndexing	outputCalibration [ 0 ]
>1895	PrimaryExpression	0
>1896	Identifier	outputCalibration
>1897	Condition	 
>1898	EqualityExpression	l3 == \"crop\"
>1899	PrimaryExpression	\"crop\"
>1900	Identifier	l3
>1901	IfStatement	if ( std 
>1902	ElseStatement	else
>1903	CompoundStatement	 
>1904	ExpressionStatement	 
>1905	AssignmentExpr	valid = false
>1906	Identifier	false
>1907	Identifier	valid
>1908	ExpressionStatement	 
>1909	CallExpression	printf ( \"Failed to read camera calibration (invalid format?)\nCalibration file
>1910	ArgumentList	\"Failed to read camera calibration (invalid format?)\nCalibration file
>1911	Argument	configFileName
>1912	Identifier	configFileName
>1913	Argument	\"Failed to read camera calibration (invalid format?)\nCalibration file
>1914	PrimaryExpression	\"Failed to read camera calibration (invalid format?)\nCalibration file
>1915	Callee	printf
>1916	Identifier	printf
>1917	CompoundStatement	 
>1918	ExpressionStatement	 
>1919	CallExpression	printf ( \"In
>1920	ArgumentList	\"In
>1921	Argument	inputCalibration [ 4 ]
>1922	ArrayIndexing	inputCalibration [ 4 ]
>1923	PrimaryExpression	4
>1924	Identifier	inputCalibration
>1925	Argument	inputCalibration [ 3 ]
>1926	ArrayIndexing	inputCalibration [ 3 ]
>1927	PrimaryExpression	3
>1928	Identifier	inputCalibration
>1929	Argument	inputCalibration [ 2 ]
>1930	ArrayIndexing	inputCalibration [ 2 ]
>1931	PrimaryExpression	2
>1932	Identifier	inputCalibration
>1933	Argument	inputCalibration [ 1 ]
>1934	ArrayIndexing	inputCalibration [ 1 ]
>1935	PrimaryExpression	1
>1936	Identifier	inputCalibration
>1937	Argument	inputCalibration [ 0 ]
>1938	ArrayIndexing	inputCalibration [ 0 ]
>1939	PrimaryExpression	0
>1940	Identifier	inputCalibration
>1941	Argument	\"In
>1942	PrimaryExpression	\"In
>1943	Callee	printf
>1944	Identifier	printf
>1945	ExpressionStatement	 
>1946	CallExpression	printf ( \"Input resolution
>1947	ArgumentList	\"Input resolution
>1948	Argument	in_height
>1949	Identifier	in_height
>1950	Argument	in_width
>1951	Identifier	in_width
>1952	Argument	\"Input resolution
>1953	PrimaryExpression	\"Input resolution
>1954	Callee	printf
>1955	Identifier	printf
>1956	Condition	 
>1957	AndExpression	std 
>1958	EqualityExpression	std 
>1959	PrimaryExpression	2
>1960	CallExpression	std 
>1961	ArgumentList	l2 . c_str ( )
>1962	Argument	& in_height
>1963	UnaryOp	& in_height
>1964	Identifier	in_height
>1965	UnaryOperator	&
>1966	Argument	& in_width
>1967	UnaryOp	& in_width
>1968	Identifier	in_width
>1969	UnaryOperator	&
>1970	Argument	\"%d %d\"
>1971	PrimaryExpression	\"%d %d\"
>1972	Argument	l2 . c_str ( )
>1973	CallExpression	l2 . c_str ( )
>1974	ArgumentList	 
>1975	Callee	l2 . c_str
>1976	MemberAccess	l2 . c_str
>1977	Identifier	c_str
>1978	Identifier	l2
>1979	Callee	std 
>1980	Identifier	std 
>1981	EqualityExpression	std 
>1982	PrimaryExpression	5
>1983	CallExpression	std 
>1984	ArgumentList	l1 . c_str ( )
>1985	Argument	& inputCalibration [ 4 ]
>1986	UnaryOp	& inputCalibration [ 4 ]
>1987	ArrayIndexing	inputCalibration [ 4 ]
>1988	PrimaryExpression	4
>1989	Identifier	inputCalibration
>1990	UnaryOperator	&
>1991	Argument	& inputCalibration [ 3 ]
>1992	UnaryOp	& inputCalibration [ 3 ]
>1993	ArrayIndexing	inputCalibration [ 3 ]
>1994	PrimaryExpression	3
>1995	Identifier	inputCalibration
>1996	UnaryOperator	&
>1997	Argument	& inputCalibration [ 2 ]
>1998	UnaryOp	& inputCalibration [ 2 ]
>1999	ArrayIndexing	inputCalibration [ 2 ]
>2000	PrimaryExpression	2
>2001	Identifier	inputCalibration
>2002	UnaryOperator	&
>2003	Argument	& inputCalibration [ 1 ]
>2004	UnaryOp	& inputCalibration [ 1 ]
>2005	ArrayIndexing	inputCalibration [ 1 ]
>2006	PrimaryExpression	1
>2007	Identifier	inputCalibration
>2008	UnaryOperator	&
>2009	Argument	& inputCalibration [ 0 ]
>2010	UnaryOp	& inputCalibration [ 0 ]
>2011	ArrayIndexing	inputCalibration [ 0 ]
>2012	PrimaryExpression	0
>2013	Identifier	inputCalibration
>2014	UnaryOperator	&
>2015	Argument	\"%f %f %f %f %f\"
>2016	PrimaryExpression	\"%f %f %f %f %f\"
>2017	Argument	l1 . c_str ( )
>2018	CallExpression	l1 . c_str ( )
>2019	ArgumentList	 
>2020	Callee	l1 . c_str
>2021	MemberAccess	l1 . c_str
>2022	Identifier	c_str
>2023	Identifier	l1
>2024	Callee	std 
>2025	Identifier	std 
>2026	ExpressionStatement	 
>2027	CallExpression	std 
>2028	ArgumentList	infile
>2029	Argument	l4
>2030	Identifier	l4
>2031	Argument	infile
>2032	Identifier	infile
>2033	Callee	std 
>2034	Identifier	std 
>2035	ExpressionStatement	 
>2036	CallExpression	std 
>2037	ArgumentList	infile
>2038	Argument	l3
>2039	Identifier	l3
>2040	Argument	infile
>2041	Identifier	infile
>2042	Callee	std 
>2043	Identifier	std 
>2044	ExpressionStatement	 
>2045	CallExpression	std 
>2046	ArgumentList	infile
>2047	Argument	l2
>2048	Identifier	l2
>2049	Argument	infile
>2050	Identifier	infile
>2051	Callee	std 
>2052	Identifier	std 
>2053	ExpressionStatement	 
>2054	CallExpression	std 
>2055	ArgumentList	infile
>2056	Argument	l1
>2057	Identifier	l1
>2058	Argument	infile
>2059	Identifier	infile
>2060	Callee	std 
>2061	Identifier	std 
>2062	IdentifierDeclStatement	 
>2063	IdentifierDecl	l4
>2064	Identifier	l4
>2065	IdentifierDeclType	std 
>2066	IdentifierDecl	l3
>2067	Identifier	l3
>2068	IdentifierDeclType	std 
>2069	IdentifierDecl	l2
>2070	Identifier	l2
>2071	IdentifierDeclType	std 
>2072	IdentifierDecl	l1
>2073	Identifier	l1
>2074	IdentifierDeclType	std 
>2075	ExpressionStatement	 
>2076	CallExpression	assert ( infile . good ( ) )
>2077	ArgumentList	infile . good ( )
>2078	Argument	infile . good ( )
>2079	CallExpression	infile . good ( )
>2080	ArgumentList	 
>2081	Callee	infile . good
>2082	MemberAccess	infile . good
>2083	Identifier	good
>2084	Identifier	infile
>2085	Callee	assert
>2086	Identifier	assert
>2087	IdentifierDeclStatement	 
>2088	IdentifierDecl	infile ( configFileName )
>2089	Identifier	configFileName
>2090	Identifier	infile
>2091	IdentifierDeclType	std 
>2092	ExpressionStatement	 
>2093	AssignmentExpr	remapY = nullptr
>2094	Identifier	nullptr
>2095	Identifier	remapY
>2096	ExpressionStatement	 
>2097	AssignmentExpr	remapX = nullptr
>2098	Identifier	nullptr
>2099	Identifier	remapX
>2100	ExpressionStatement	 
>2101	AssignmentExpr	valid = true
>2102	Identifier	true
>2103	Identifier	valid
>2195	FunctionDef	UndistorterPTAM 
>2196	ParameterList	 
>2197	CompoundStatement	 
>2198	ExpressionStatement	 
>2199	CallExpression	Eigen 
>2200	ArgumentList	( void * ) remapY
>2201	Argument	( void * ) remapY
>2202	CastExpression	( void * ) remapY
>2203	Identifier	remapY
>2204	CastTarget	void *
>2205	Callee	Eigen 
>2206	Identifier	Eigen 
>2207	ExpressionStatement	 
>2208	CallExpression	Eigen 
>2209	ArgumentList	( void * ) remapX
>2210	Argument	( void * ) remapX
>2211	CastExpression	( void * ) remapX
>2212	Identifier	remapX
>2213	CastTarget	void *
>2214	Callee	Eigen 
>2215	Identifier	Eigen 
>2221	FunctionDef	UndistorterPTAM 
>2222	ParameterList	const cv 
>2223	Parameter	 
>2224	Identifier	result
>2225	ParameterType	cv 
>2226	Parameter	 
>2227	Identifier	image
>2228	ParameterType	const cv 
>2229	ReturnType	void
>2230	CompoundStatement	 
>2231	ForStatement	for ( int idx = out_width * out_height - 1 ; idx >= 0 ; idx -- )
>2232	CompoundStatement	 
>2233	IfStatement	if ( xx < 0 )
>2234	ElseStatement	else
>2235	CompoundStatement	 
>2236	ExpressionStatement	 
>2237	AssignmentExpr	data [ idx ] = xxyy * src [ 1 + in_width ] + ( yy - xxyy ) * src [ in_width ] + ( xx - xxyy ) * src [ \
>2238	AdditiveExpression	xxyy * src [ 1 + in_width ] + ( yy - xxyy ) * src [ in_width ] + ( xx - xxyy ) * src [ 1 ] + ( 1 - xx \
>2239	AdditiveExpression	( yy - xxyy ) * src [ in_width ] + ( xx - xxyy ) * src [ 1 ] + ( 1 - xx - yy + xxyy ) * src [ 0 ]
>2240	AdditiveExpression	( xx - xxyy ) * src [ 1 ] + ( 1 - xx - yy + xxyy ) * src [ 0 ]
>2241	MultiplicativeExpression	( 1 - xx - yy + xxyy ) * src [ 0 ]
>2242	ArrayIndexing	src [ 0 ]
>2243	PrimaryExpression	0
>2244	Identifier	src
>2245	AdditiveExpression	1 - xx - yy + xxyy
>2246	AdditiveExpression	xx - yy + xxyy
>2247	AdditiveExpression	yy + xxyy
>2248	Identifier	xxyy
>2249	Identifier	yy
>2250	Identifier	xx
>2251	PrimaryExpression	1
>2252	MultiplicativeExpression	( xx - xxyy ) * src [ 1 ]
>2253	ArrayIndexing	src [ 1 ]
>2254	PrimaryExpression	1
>2255	Identifier	src
>2256	AdditiveExpression	xx - xxyy
>2257	Identifier	xxyy
>2258	Identifier	xx
>2259	MultiplicativeExpression	( yy - xxyy ) * src [ in_width ]
>2260	ArrayIndexing	src [ in_width ]
>2261	Identifier	in_width
>2262	Identifier	src
>2263	AdditiveExpression	yy - xxyy
>2264	Identifier	xxyy
>2265	Identifier	yy
>2266	MultiplicativeExpression	xxyy * src [ 1 + in_width ]
>2267	ArrayIndexing	src [ 1 + in_width ]
>2268	AdditiveExpression	1 + in_width
>2269	Identifier	in_width
>2270	PrimaryExpression	1
>2271	Identifier	src
>2272	Identifier	xxyy
>2273	ArrayIndexing	data [ idx ]
>2274	Identifier	idx
>2275	Identifier	data
>2276	IdentifierDeclStatement	 
>2277	IdentifierDecl	* src = ( uchar * ) image . data + xxi + yyi * in_width
>2278	AssignmentExpr	* src = ( uchar * ) image . data + xxi + yyi * in_width
>2279	AdditiveExpression	( uchar * ) image . data + xxi + yyi * in_width
>2280	AdditiveExpression	xxi + yyi * in_width
>2281	MultiplicativeExpression	yyi * in_width
>2282	Identifier	in_width
>2283	Identifier	yyi
>2284	Identifier	xxi
>2285	CastExpression	( uchar * ) image . data
>2286	MemberAccess	image . data
>2287	Identifier	data
>2288	Identifier	image
>2289	CastTarget	uchar *
>2290	Identifier	src
>2291	Identifier	src
>2292	IdentifierDeclType	const uchar *
>2293	IdentifierDeclStatement	 
>2294	IdentifierDecl	xxyy = xx * yy
>2295	AssignmentExpr	xxyy = xx * yy
>2296	MultiplicativeExpression	xx * yy
>2297	Identifier	yy
>2298	Identifier	xx
>2299	Identifier	xxyy
>2300	Identifier	xxyy
>2301	IdentifierDeclType	float
>2302	ExpressionStatement	 
>2303	AssignmentExpr	yy -= yyi
>2304	Identifier	yyi
>2305	Identifier	yy
>2306	ExpressionStatement	 
>2307	AssignmentExpr	xx -= xxi
>2308	Identifier	xxi
>2309	Identifier	xx
>2310	IdentifierDeclStatement	 
>2311	IdentifierDecl	yyi = yy
>2312	AssignmentExpr	yyi = yy
>2313	Identifier	yy
>2314	Identifier	yy
>2315	Identifier	yyi
>2316	IdentifierDeclType	int
>2317	IdentifierDeclStatement	 
>2318	IdentifierDecl	xxi = xx
>2319	AssignmentExpr	xxi = xx
>2320	Identifier	xx
>2321	Identifier	xx
>2322	Identifier	xxi
>2323	IdentifierDeclType	int
>2324	ExpressionStatement	 
>2325	AssignmentExpr	data [ idx ] = 0
>2326	PrimaryExpression	0
>2327	ArrayIndexing	data [ idx ]
>2328	Identifier	idx
>2329	Identifier	data
>2330	Condition	 
>2331	RelationalExpression	xx < 0
>2332	PrimaryExpression	0
>2333	Identifier	xx
>2334	IdentifierDeclStatement	 
>2335	IdentifierDecl	yy = remapY [ idx ]
>2336	AssignmentExpr	yy = remapY [ idx ]
>2337	ArrayIndexing	remapY [ idx ]
>2338	Identifier	idx
>2339	Identifier	remapY
>2340	Identifier	yy
>2341	Identifier	yy
>2342	IdentifierDeclType	float
>2343	IdentifierDeclStatement	 
>2344	IdentifierDecl	xx = remapX [ idx ]
>2345	AssignmentExpr	xx = remapX [ idx ]
>2346	ArrayIndexing	remapX [ idx ]
>2347	Identifier	idx
>2348	Identifier	remapX
>2349	Identifier	xx
>2350	Identifier	xx
>2351	IdentifierDeclType	float
>2352	IncDecOp	 
>2353	IncDec	--
>2354	Identifier	idx
>2355	Condition	 
>2356	RelationalExpression	idx >= 0
>2357	PrimaryExpression	0
>2358	Identifier	idx
>2359	ForInit	 
>2360	IdentifierDeclStatement	int idx = out_width * out_height - 1 ;
>2361	IdentifierDecl	idx = out_width * out_height - 1
>2362	AssignmentExpr	idx = out_width * out_height - 1
>2363	AdditiveExpression	out_width * out_height - 1
>2364	PrimaryExpression	1
>2365	MultiplicativeExpression	out_width * out_height
>2366	Identifier	out_height
>2367	Identifier	out_width
>2368	Identifier	idx
>2369	Identifier	idx
>2370	IdentifierDeclType	int
>2371	IdentifierDeclStatement	 
>2372	IdentifierDecl	* data = resultMat . data
>2373	AssignmentExpr	* data = resultMat . data
>2374	MemberAccess	resultMat . data
>2375	Identifier	data
>2376	Identifier	resultMat
>2377	Identifier	data
>2378	Identifier	data
>2379	IdentifierDeclType	uchar *
>2380	ExpressionStatement	 
>2381	CallExpression	assert ( image . isContinuous ( ) )
>2382	ArgumentList	image . isContinuous ( )
>2383	Argument	image . isContinuous ( )
>2384	CallExpression	image . isContinuous ( )
>2385	ArgumentList	 
>2386	Callee	image . isContinuous
>2387	MemberAccess	image . isContinuous
>2388	Identifier	isContinuous
>2389	Identifier	image
>2390	Callee	assert
>2391	Identifier	assert
>2392	ExpressionStatement	 
>2393	CallExpression	assert ( result . getMatRef ( ) . isContinuous ( ) )
>2394	ArgumentList	result . getMatRef ( ) . isContinuous ( )
>2395	Argument	result . getMatRef ( ) . isContinuous ( )
>2396	CallExpression	result . getMatRef ( ) . isContinuous ( )
>2397	ArgumentList	 
>2398	Callee	result . getMatRef ( ) . isContinuous
>2399	MemberAccess	result . getMatRef ( ) . isContinuous
>2400	Identifier	isContinuous
>2401	CallExpression	result . getMatRef ( )
>2402	ArgumentList	 
>2403	Callee	result . getMatRef
>2404	MemberAccess	result . getMatRef
>2405	Identifier	getMatRef
>2406	Identifier	result
>2407	Callee	assert
>2408	Identifier	assert
>2409	IdentifierDeclStatement	 
>2410	IdentifierDecl	resultMat = result . getMatRef ( )
>2411	AssignmentExpr	resultMat = result . getMatRef ( )
>2412	CallExpression	result . getMatRef ( )
>2413	ArgumentList	 
>2414	Callee	result . getMatRef
>2415	MemberAccess	result . getMatRef
>2416	Identifier	getMatRef
>2417	Identifier	result
>2418	Identifier	resultMat
>2419	Identifier	resultMat
>2420	IdentifierDeclType	cv 
>2421	ExpressionStatement	 
>2422	CallExpression	result . create ( out_height , out_width , CV_8U )
>2423	ArgumentList	out_height
>2424	Argument	CV_8U
>2425	Identifier	CV_8U
>2426	Argument	out_width
>2427	Identifier	out_width
>2428	Argument	out_height
>2429	Identifier	out_height
>2430	Callee	result . create
>2431	MemberAccess	result . create
>2432	Identifier	create
>2433	Identifier	result
>2434	IfStatement	if ( in_height == out_height && in_width == out_width && inputCalibration [ 4 ] == 0 )
>2435	CompoundStatement	 
>2436	ReturnStatement	 
>2437	ExpressionStatement	 
>2438	AssignmentExpr	result . getMatRef ( ) = image
>2439	Identifier	image
>2440	CallExpression	result . getMatRef ( )
>2441	ArgumentList	 
>2442	Callee	result . getMatRef
>2443	MemberAccess	result . getMatRef
>2444	Identifier	getMatRef
>2445	Identifier	result
>2446	Condition	 
>2447	AndExpression	in_height == out_height && in_width == out_width && inputCalibration [ 4 ] == 0
>2448	AndExpression	in_width == out_width && inputCalibration [ 4 ] == 0
>2449	EqualityExpression	inputCalibration [ 4 ] == 0
>2450	PrimaryExpression	0
>2451	ArrayIndexing	inputCalibration [ 4 ]
>2452	PrimaryExpression	4
>2453	Identifier	inputCalibration
>2454	EqualityExpression	in_width == out_width
>2455	Identifier	out_width
>2456	Identifier	in_width
>2457	EqualityExpression	in_height == out_height
>2458	Identifier	out_height
>2459	Identifier	in_height
>2460	IfStatement	if ( image . rows != in_height || image . cols != in_width )
>2461	CompoundStatement	 
>2462	ReturnStatement	 
>2463	ExpressionStatement	 
>2464	AssignmentExpr	result . getMatRef ( ) = image
>2465	Identifier	image
>2466	CallExpression	result . getMatRef ( )
>2467	ArgumentList	 
>2468	Callee	result . getMatRef
>2469	MemberAccess	result . getMatRef
>2470	Identifier	getMatRef
>2471	Identifier	result
>2472	ExpressionStatement	 
>2473	CallExpression	printf ( \"UndistorterPTAM
>2474	ArgumentList	\"UndistorterPTAM
>2475	Argument	\"UndistorterPTAM
>2476	PrimaryExpression	\"UndistorterPTAM
>2477	Callee	printf
>2478	Identifier	printf
>2479	Condition	 
>2480	OrExpression	image . rows != in_height || image . cols != in_width
>2481	EqualityExpression	image . cols != in_width
>2482	Identifier	in_width
>2483	MemberAccess	image . cols
>2484	Identifier	cols
>2485	Identifier	image
>2486	EqualityExpression	image . rows != in_height
>2487	Identifier	in_height
>2488	MemberAccess	image . rows
>2489	Identifier	rows
>2490	Identifier	image
>2491	IfStatement	if ( ! valid )
>2492	CompoundStatement	 
>2493	ReturnStatement	 
>2494	ExpressionStatement	 
>2495	AssignmentExpr	result . getMatRef ( ) = image
>2496	Identifier	image
>2497	CallExpression	result . getMatRef ( )
>2498	ArgumentList	 
>2499	Callee	result . getMatRef
>2500	MemberAccess	result . getMatRef
>2501	Identifier	getMatRef
>2502	Identifier	result
>2503	Condition	 
>2504	UnaryOp	! valid
>2505	Identifier	valid
>2506	UnaryOperator	!
>2544	FunctionDef	UndistorterPTAM 
>2545	ParameterList	 
>2546	ReturnType	const cv 
>2547	CompoundStatement	 
>2548	ReturnStatement	 
>2549	Identifier	K_
>2554	FunctionDef	UndistorterPTAM 
>2555	ParameterList	 
>2556	ReturnType	const cv 
>2557	CompoundStatement	 
>2558	ReturnStatement	 
>2559	Identifier	originalK_
>2564	FunctionDef	UndistorterPTAM 
>2565	ParameterList	 
>2566	ReturnType	int
>2567	CompoundStatement	 
>2568	ReturnStatement	 
>2569	Identifier	out_width
>2574	FunctionDef	UndistorterPTAM 
>2575	ParameterList	 
>2576	ReturnType	int
>2577	CompoundStatement	 
>2578	ReturnStatement	 
>2579	Identifier	out_height
>2584	FunctionDef	UndistorterPTAM 
>2585	ParameterList	 
>2586	ReturnType	int
>2587	CompoundStatement	 
>2588	ReturnStatement	 
>2589	Identifier	in_width
>2594	FunctionDef	UndistorterPTAM 
>2595	ParameterList	 
>2596	ReturnType	int
>2597	CompoundStatement	 
>2598	ReturnStatement	 
>2599	Identifier	in_height
>2604	FunctionDef	UndistorterPTAM 
>2605	ParameterList	 
>2606	ReturnType	bool
>2607	CompoundStatement	 
>2608	ReturnStatement	 
>2609	Identifier	valid
>2614	FunctionDef	UndistorterOpenCV 
>2615	ParameterList	const char * configFileName
>2616	Parameter	 
>2617	Identifier	configFileName
>2618	ParameterType	const char *
>2619	CompoundStatement	 
>2620	ExpressionStatement	 
>2621	AssignmentExpr	K_ = K_ . t ( )
>2622	CallExpression	K_ . t ( )
>2623	ArgumentList	 
>2624	Callee	K_ . t
>2625	MemberAccess	K_ . t
>2626	Identifier	t
>2627	Identifier	K_
>2628	Identifier	K_
>2629	ExpressionStatement	 
>2630	AssignmentExpr	originalK_ = originalK_ . t ( )
>2631	CallExpression	originalK_ . t ( )
>2632	ArgumentList	 
>2633	Callee	originalK_ . t
>2634	MemberAccess	originalK_ . t
>2635	Identifier	t
>2636	Identifier	originalK_
>2637	Identifier	originalK_
>2638	IfStatement	if ( valid )
>2639	CompoundStatement	 
>2640	ExpressionStatement	 
>2641	AssignmentExpr	originalK_ . at < double > ( 1 , 2 ) /= in_height
>2642	Identifier	in_height
>2643	RelationalExpression	originalK_ . at < double > ( 1 , 2 )
>2644	RelationalExpression	double > ( 1 , 2 )
>2645	Expression	1 , 2
>2646	PrimaryExpression	2
>2647	PrimaryExpression	1
>2648	Identifier	double
>2649	MemberAccess	originalK_ . at
>2650	Identifier	at
>2651	Identifier	originalK_
>2652	ExpressionStatement	 
>2653	AssignmentExpr	originalK_ . at < double > ( 1 , 1 ) /= in_height
>2654	Identifier	in_height
>2655	RelationalExpression	originalK_ . at < double > ( 1 , 1 )
>2656	RelationalExpression	double > ( 1 , 1 )
>2657	Expression	1 , 1
>2658	PrimaryExpression	1
>2659	PrimaryExpression	1
>2660	Identifier	double
>2661	MemberAccess	originalK_ . at
>2662	Identifier	at
>2663	Identifier	originalK_
>2664	ExpressionStatement	 
>2665	AssignmentExpr	originalK_ . at < double > ( 0 , 2 ) /= in_width
>2666	Identifier	in_width
>2667	RelationalExpression	originalK_ . at < double > ( 0 , 2 )
>2668	RelationalExpression	double > ( 0 , 2 )
>2669	Expression	0 , 2
>2670	PrimaryExpression	2
>2671	PrimaryExpression	0
>2672	Identifier	double
>2673	MemberAccess	originalK_ . at
>2674	Identifier	at
>2675	Identifier	originalK_
>2676	ExpressionStatement	 
>2677	AssignmentExpr	originalK_ . at < double > ( 0 , 0 ) /= in_width
>2678	Identifier	in_width
>2679	RelationalExpression	originalK_ . at < double > ( 0 , 0 )
>2680	RelationalExpression	double > ( 0 , 0 )
>2681	Expression	0 , 0
>2682	PrimaryExpression	0
>2683	PrimaryExpression	0
>2684	Identifier	double
>2685	MemberAccess	originalK_ . at
>2686	Identifier	at
>2687	Identifier	originalK_
>2688	ExpressionStatement	 
>2689	CallExpression	cv 
>2690	ArgumentList	originalK_
>2691	Argument	map2
>2692	Identifier	map2
>2693	Argument	map1
>2694	Identifier	map1
>2695	Argument	CV_16SC2
>2696	Identifier	CV_16SC2
>2697	Argument	cv 
>2698	CallExpression	cv 
>2699	ArgumentList	out_width
>2700	Argument	out_height
>2701	Identifier	out_height
>2702	Argument	out_width
>2703	Identifier	out_width
>2704	Callee	cv 
>2705	Identifier	cv 
>2706	Argument	K_
>2707	Identifier	K_
>2708	Argument	cv 
>2709	CallExpression	cv 
>2710	ArgumentList	 
>2711	Callee	cv 
>2712	Identifier	cv 
>2713	Argument	distCoeffs
>2714	Identifier	distCoeffs
>2715	Argument	originalK_
>2716	Identifier	originalK_
>2717	Callee	cv 
>2718	Identifier	cv 
>2719	ExpressionStatement	 
>2720	AssignmentExpr	K_ = cv 
>2721	CallExpression	cv 
>2722	ArgumentList	originalK_
>2723	Argument	false
>2724	Identifier	false
>2725	Argument	nullptr
>2726	Identifier	nullptr
>2727	Argument	cv 
>2728	CallExpression	cv 
>2729	ArgumentList	out_width
>2730	Argument	out_height
>2731	Identifier	out_height
>2732	Argument	out_width
>2733	Identifier	out_width
>2734	Callee	cv 
>2735	Identifier	cv 
>2736	Argument	( outputCalibration == - 2 ) ? 1 
>2737	ConditionalExpression	( outputCalibration == - 2 ) ? 1 
>2738	PrimaryExpression	0
>2739	PrimaryExpression	1
>2740	Condition	outputCalibration == - 2
>2741	EqualityExpression	outputCalibration == - 2
>2742	UnaryOp	- 2
>2743	PrimaryExpression	2
>2744	UnaryOperator	-
>2745	Identifier	outputCalibration
>2746	Argument	cv 
>2747	CallExpression	cv 
>2748	ArgumentList	in_width
>2749	Argument	in_height
>2750	Identifier	in_height
>2751	Argument	in_width
>2752	Identifier	in_width
>2753	Callee	cv 
>2754	Identifier	cv 
>2755	Argument	distCoeffs
>2756	Identifier	distCoeffs
>2757	Argument	originalK_
>2758	Identifier	originalK_
>2759	Callee	cv 
>2760	Identifier	cv 
>2761	Identifier	K_
>2762	Condition	 
>2763	Identifier	valid
>2764	ExpressionStatement	 
>2765	AssignmentExpr	originalK_ . at < double > ( 1 , 2 ) = inputCalibration [ 3 ]
>2766	ArrayIndexing	inputCalibration [ 3 ]
>2767	PrimaryExpression	3
>2768	Identifier	inputCalibration
>2769	RelationalExpression	originalK_ . at < double > ( 1 , 2 )
>2770	RelationalExpression	double > ( 1 , 2 )
>2771	Expression	1 , 2
>2772	PrimaryExpression	2
>2773	PrimaryExpression	1
>2774	Identifier	double
>2775	MemberAccess	originalK_ . at
>2776	Identifier	at
>2777	Identifier	originalK_
>2778	ExpressionStatement	 
>2779	AssignmentExpr	originalK_ . at < double > ( 0 , 2 ) = inputCalibration [ 2 ]
>2780	ArrayIndexing	inputCalibration [ 2 ]
>2781	PrimaryExpression	2
>2782	Identifier	inputCalibration
>2783	RelationalExpression	originalK_ . at < double > ( 0 , 2 )
>2784	RelationalExpression	double > ( 0 , 2 )
>2785	Expression	0 , 2
>2786	PrimaryExpression	2
>2787	PrimaryExpression	0
>2788	Identifier	double
>2789	MemberAccess	originalK_ . at
>2790	Identifier	at
>2791	Identifier	originalK_
>2792	ExpressionStatement	 
>2793	AssignmentExpr	originalK_ . at < double > ( 2 , 2 ) = 1
>2794	PrimaryExpression	1
>2795	RelationalExpression	originalK_ . at < double > ( 2 , 2 )
>2796	RelationalExpression	double > ( 2 , 2 )
>2797	Expression	2 , 2
>2798	PrimaryExpression	2
>2799	PrimaryExpression	2
>2800	Identifier	double
>2801	MemberAccess	originalK_ . at
>2802	Identifier	at
>2803	Identifier	originalK_
>2804	ExpressionStatement	 
>2805	AssignmentExpr	originalK_ . at < double > ( 1 , 1 ) = inputCalibration [ 1 ]
>2806	ArrayIndexing	inputCalibration [ 1 ]
>2807	PrimaryExpression	1
>2808	Identifier	inputCalibration
>2809	RelationalExpression	originalK_ . at < double > ( 1 , 1 )
>2810	RelationalExpression	double > ( 1 , 1 )
>2811	Expression	1 , 1
>2812	PrimaryExpression	1
>2813	PrimaryExpression	1
>2814	Identifier	double
>2815	MemberAccess	originalK_ . at
>2816	Identifier	at
>2817	Identifier	originalK_
>2818	ExpressionStatement	 
>2819	AssignmentExpr	originalK_ . at < double > ( 0 , 0 ) = inputCalibration [ 0 ]
>2820	ArrayIndexing	inputCalibration [ 0 ]
>2821	PrimaryExpression	0
>2822	Identifier	inputCalibration
>2823	RelationalExpression	originalK_ . at < double > ( 0 , 0 )
>2824	RelationalExpression	double > ( 0 , 0 )
>2825	Expression	0 , 0
>2826	PrimaryExpression	0
>2827	PrimaryExpression	0
>2828	Identifier	double
>2829	MemberAccess	originalK_ . at
>2830	Identifier	at
>2831	Identifier	originalK_
>2832	ExpressionStatement	 
>2833	AssignmentExpr	originalK_ = cv 
>2834	CallExpression	cv 
>2835	ArgumentList	3
>2836	Argument	cv 
>2837	CallExpression	cv 
>2838	ArgumentList	0
>2839	Argument	0
>2840	PrimaryExpression	0
>2841	Callee	cv 
>2842	Identifier	cv 
>2843	Argument	CV_64F
>2844	Identifier	CV_64F
>2845	Argument	3
>2846	PrimaryExpression	3
>2847	Argument	3
>2848	PrimaryExpression	3
>2849	Callee	cv 
>2850	Identifier	cv 
>2851	Identifier	originalK_
>2852	IfStatement	if ( inputCalibration [ 2 ] < 1.0f )
>2853	CompoundStatement	 
>2854	ExpressionStatement	 
>2855	CallExpression	printf ( \"auto-changing calibration file to fx=%f, fy=%f, cx=%f, cy=%f\n\" , inputCalibration [ 0 ] , inputCalibration [ \
>2856	ArgumentList	\"auto-changing calibration file to fx=%f, fy=%f, cx=%f, cy=%f\n\"
>2857	Argument	inputCalibration [ 3 ]
>2858	ArrayIndexing	inputCalibration [ 3 ]
>2859	PrimaryExpression	3
>2860	Identifier	inputCalibration
>2861	Argument	inputCalibration [ 2 ]
>2862	ArrayIndexing	inputCalibration [ 2 ]
>2863	PrimaryExpression	2
>2864	Identifier	inputCalibration
>2865	Argument	inputCalibration [ 1 ]
>2866	ArrayIndexing	inputCalibration [ 1 ]
>2867	PrimaryExpression	1
>2868	Identifier	inputCalibration
>2869	Argument	inputCalibration [ 0 ]
>2870	ArrayIndexing	inputCalibration [ 0 ]
>2871	PrimaryExpression	0
>2872	Identifier	inputCalibration
>2873	Argument	\"auto-changing calibration file to fx=%f, fy=%f, cx=%f, cy=%f\n\"
>2874	PrimaryExpression	\"auto-changing calibration file to fx=%f, fy=%f, cx=%f, cy=%f\n\"
>2875	Callee	printf
>2876	Identifier	printf
>2877	ExpressionStatement	 
>2878	AssignmentExpr	inputCalibration [ 3 ] *= in_height
>2879	Identifier	in_height
>2880	ArrayIndexing	inputCalibration [ 3 ]
>2881	PrimaryExpression	3
>2882	Identifier	inputCalibration
>2883	ExpressionStatement	 
>2884	AssignmentExpr	inputCalibration [ 1 ] *= in_height
>2885	Identifier	in_height
>2886	ArrayIndexing	inputCalibration [ 1 ]
>2887	PrimaryExpression	1
>2888	Identifier	inputCalibration
>2889	ExpressionStatement	 
>2890	AssignmentExpr	inputCalibration [ 2 ] *= in_width
>2891	Identifier	in_width
>2892	ArrayIndexing	inputCalibration [ 2 ]
>2893	PrimaryExpression	2
>2894	Identifier	inputCalibration
>2895	ExpressionStatement	 
>2896	AssignmentExpr	inputCalibration [ 0 ] *= in_width
>2897	Identifier	in_width
>2898	ArrayIndexing	inputCalibration [ 0 ]
>2899	PrimaryExpression	0
>2900	Identifier	inputCalibration
>2901	ExpressionStatement	 
>2902	CallExpression	printf ( \"Possibly this is due to a recent change in the calibration file format, please see the README.md.\n\" )
>2903	ArgumentList	\"Possibly this is due to a recent change in the calibration file format, please see the README.md.\n\"
>2904	Argument	\"Possibly this is due to a recent change in the calibration file format, please see the README.md.\n\"
>2905	PrimaryExpression	\"Possibly this is due to a recent change in the calibration file format, please see the README.md.\n\"
>2906	Callee	printf
>2907	Identifier	printf
>2908	ExpressionStatement	 
>2909	CallExpression	printf ( \"WARNING
>2910	ArgumentList	\"WARNING
>2911	Argument	inputCalibration [ 2 ]
>2912	ArrayIndexing	inputCalibration [ 2 ]
>2913	PrimaryExpression	2
>2914	Identifier	inputCalibration
>2915	Argument	\"WARNING
>2916	PrimaryExpression	\"WARNING
>2917	Callee	printf
>2918	Identifier	printf
>2919	Condition	 
>2920	RelationalExpression	inputCalibration [ 2 ] < 1.0f
>2921	PrimaryExpression	1.0f
>2922	ArrayIndexing	inputCalibration [ 2 ]
>2923	PrimaryExpression	2
>2924	Identifier	inputCalibration
>2925	ForStatement	for ( int i = 0 ; i < 4 ; ++ i )
>2926	ExpressionStatement	 
>2927	AssignmentExpr	distCoeffs . at < float > ( i , 0 ) = inputCalibration [ 4 + i ]
>2928	ArrayIndexing	inputCalibration [ 4 + i ]
>2929	AdditiveExpression	4 + i
>2930	Identifier	i
>2931	PrimaryExpression	4
>2932	Identifier	inputCalibration
>2933	RelationalExpression	distCoeffs . at < float > ( i , 0 )
>2934	RelationalExpression	float > ( i , 0 )
>2935	Expression	i , 0
>2936	PrimaryExpression	0
>2937	Identifier	i
>2938	Identifier	float
>2939	MemberAccess	distCoeffs . at
>2940	Identifier	at
>2941	Identifier	distCoeffs
>2942	UnaryExpression	 
>2943	Identifier	i
>2944	IncDec	++
>2945	Condition	 
>2946	RelationalExpression	i < 4
>2947	PrimaryExpression	4
>2948	Identifier	i
>2949	ForInit	 
>2950	IdentifierDeclStatement	int i = 0 ;
>2951	IdentifierDecl	i = 0
>2952	AssignmentExpr	i = 0
>2953	PrimaryExpression	0
>2954	Identifier	i
>2955	Identifier	i
>2956	IdentifierDeclType	int
>2957	IdentifierDeclStatement	 
>2958	IdentifierDecl	distCoeffs = cv 
>2959	AssignmentExpr	distCoeffs = cv 
>2960	CallExpression	cv 
>2961	ArgumentList	4
>2962	Argument	CV_32F
>2963	Identifier	CV_32F
>2964	Argument	1
>2965	PrimaryExpression	1
>2966	Argument	4
>2967	PrimaryExpression	4
>2968	Callee	cv 
>2969	Identifier	cv 
>2970	Identifier	distCoeffs
>2971	Identifier	distCoeffs
>2972	IdentifierDeclType	cv 
>2973	IfStatement	if ( std 
>2974	ElseStatement	else
>2975	CompoundStatement	 
>2976	ExpressionStatement	 
>2977	AssignmentExpr	valid = false
>2978	Identifier	false
>2979	Identifier	valid
>2980	ExpressionStatement	 
>2981	CallExpression	printf ( \"Out
>2982	ArgumentList	\"Out
>2983	Argument	\"Out
>2984	PrimaryExpression	\"Out
>2985	Callee	printf
>2986	Identifier	printf
>2987	CompoundStatement	 
>2988	ExpressionStatement	 
>2989	CallExpression	printf ( \"Output resolution
>2990	ArgumentList	\"Output resolution
>2991	Argument	out_height
>2992	Identifier	out_height
>2993	Argument	out_width
>2994	Identifier	out_width
>2995	Argument	\"Output resolution
>2996	PrimaryExpression	\"Output resolution
>2997	Callee	printf
>2998	Identifier	printf
>2999	Condition	 
>3000	EqualityExpression	std 
>3001	PrimaryExpression	2
>3002	CallExpression	std 
>3003	ArgumentList	l4 . c_str ( )
>3004	Argument	& out_height
>3005	UnaryOp	& out_height
>3006	Identifier	out_height
>3007	UnaryOperator	&
>3008	Argument	& out_width
>3009	UnaryOp	& out_width
>3010	Identifier	out_width
>3011	UnaryOperator	&
>3012	Argument	\"%d %d\"
>3013	PrimaryExpression	\"%d %d\"
>3014	Argument	l4 . c_str ( )
>3015	CallExpression	l4 . c_str ( )
>3016	ArgumentList	 
>3017	Callee	l4 . c_str
>3018	MemberAccess	l4 . c_str
>3019	Identifier	c_str
>3020	Identifier	l4
>3021	Callee	std 
>3022	Identifier	std 
>3023	IfStatement	if ( l3 == \"crop\" )
>3024	ElseStatement	else
>3025	IfStatement	if ( l3 == \"full\" )
>3026	ElseStatement	else
>3027	IfStatement	if ( l3 == \"none\" )
>3028	ElseStatement	else
>3029	CompoundStatement	 
>3030	ExpressionStatement	 
>3031	AssignmentExpr	valid = false
>3032	Identifier	false
>3033	Identifier	valid
>3034	ExpressionStatement	 
>3035	CallExpression	printf ( \"Out
>3036	ArgumentList	\"Out
>3037	Argument	\"Out
>3038	PrimaryExpression	\"Out
>3039	Callee	printf
>3040	Identifier	printf
>3041	CompoundStatement	 
>3042	ExpressionStatement	 
>3043	AssignmentExpr	valid = false
>3044	Identifier	false
>3045	Identifier	valid
>3046	ExpressionStatement	 
>3047	CallExpression	printf ( \"NO RECTIFICATION\n\" )
>3048	ArgumentList	\"NO RECTIFICATION\n\"
>3049	Argument	\"NO RECTIFICATION\n\"
>3050	PrimaryExpression	\"NO RECTIFICATION\n\"
>3051	Callee	printf
>3052	Identifier	printf
>3053	Condition	 
>3054	EqualityExpression	l3 == \"none\"
>3055	PrimaryExpression	\"none\"
>3056	Identifier	l3
>3057	CompoundStatement	 
>3058	ExpressionStatement	 
>3059	CallExpression	printf ( \"Out
>3060	ArgumentList	\"Out
>3061	Argument	\"Out
>3062	PrimaryExpression	\"Out
>3063	Callee	printf
>3064	Identifier	printf
>3065	ExpressionStatement	 
>3066	AssignmentExpr	outputCalibration = - 2
>3067	UnaryOp	- 2
>3068	PrimaryExpression	2
>3069	UnaryOperator	-
>3070	Identifier	outputCalibration
>3071	Condition	 
>3072	EqualityExpression	l3 == \"full\"
>3073	PrimaryExpression	\"full\"
>3074	Identifier	l3
>3075	CompoundStatement	 
>3076	ExpressionStatement	 
>3077	CallExpression	printf ( \"Out
>3078	ArgumentList	\"Out
>3079	Argument	\"Out
>3080	PrimaryExpression	\"Out
>3081	Callee	printf
>3082	Identifier	printf
>3083	ExpressionStatement	 
>3084	AssignmentExpr	outputCalibration = - 1
>3085	UnaryOp	- 1
>3086	PrimaryExpression	1
>3087	UnaryOperator	-
>3088	Identifier	outputCalibration
>3089	Condition	 
>3090	EqualityExpression	l3 == \"crop\"
>3091	PrimaryExpression	\"crop\"
>3092	Identifier	l3
>3093	IfStatement	if ( std 
>3094	ElseStatement	else
>3095	CompoundStatement	 
>3096	ExpressionStatement	 
>3097	AssignmentExpr	valid = false
>3098	Identifier	false
>3099	Identifier	valid
>3100	ExpressionStatement	 
>3101	CallExpression	printf ( \"Failed to read camera calibration (invalid format?)\nCalibration file
>3102	ArgumentList	\"Failed to read camera calibration (invalid format?)\nCalibration file
>3103	Argument	configFileName
>3104	Identifier	configFileName
>3105	Argument	\"Failed to read camera calibration (invalid format?)\nCalibration file
>3106	PrimaryExpression	\"Failed to read camera calibration (invalid format?)\nCalibration file
>3107	Callee	printf
>3108	Identifier	printf
>3109	CompoundStatement	 
>3110	ExpressionStatement	 
>3111	CallExpression	printf ( \"In
>3112	ArgumentList	\"In
>3113	Argument	inputCalibration [ 7 ]
>3114	ArrayIndexing	inputCalibration [ 7 ]
>3115	PrimaryExpression	7
>3116	Identifier	inputCalibration
>3117	Argument	inputCalibration [ 6 ]
>3118	ArrayIndexing	inputCalibration [ 6 ]
>3119	PrimaryExpression	6
>3120	Identifier	inputCalibration
>3121	Argument	inputCalibration [ 5 ]
>3122	ArrayIndexing	inputCalibration [ 5 ]
>3123	PrimaryExpression	5
>3124	Identifier	inputCalibration
>3125	Argument	inputCalibration [ 4 ]
>3126	ArrayIndexing	inputCalibration [ 4 ]
>3127	PrimaryExpression	4
>3128	Identifier	inputCalibration
>3129	Argument	inputCalibration [ 3 ]
>3130	ArrayIndexing	inputCalibration [ 3 ]
>3131	PrimaryExpression	3
>3132	Identifier	inputCalibration
>3133	Argument	inputCalibration [ 2 ]
>3134	ArrayIndexing	inputCalibration [ 2 ]
>3135	PrimaryExpression	2
>3136	Identifier	inputCalibration
>3137	Argument	inputCalibration [ 1 ]
>3138	ArrayIndexing	inputCalibration [ 1 ]
>3139	PrimaryExpression	1
>3140	Identifier	inputCalibration
>3141	Argument	inputCalibration [ 0 ]
>3142	ArrayIndexing	inputCalibration [ 0 ]
>3143	PrimaryExpression	0
>3144	Identifier	inputCalibration
>3145	Argument	\"In
>3146	PrimaryExpression	\"In
>3147	Callee	printf
>3148	Identifier	printf
>3149	ExpressionStatement	 
>3150	CallExpression	printf ( \"Input resolution
>3151	ArgumentList	\"Input resolution
>3152	Argument	in_height
>3153	Identifier	in_height
>3154	Argument	in_width
>3155	Identifier	in_width
>3156	Argument	\"Input resolution
>3157	PrimaryExpression	\"Input resolution
>3158	Callee	printf
>3159	Identifier	printf
>3160	Condition	 
>3161	AndExpression	std 
>3162	EqualityExpression	std 
>3163	PrimaryExpression	2
>3164	CallExpression	std 
>3165	ArgumentList	l2 . c_str ( )
>3166	Argument	& in_height
>3167	UnaryOp	& in_height
>3168	Identifier	in_height
>3169	UnaryOperator	&
>3170	Argument	& in_width
>3171	UnaryOp	& in_width
>3172	Identifier	in_width
>3173	UnaryOperator	&
>3174	Argument	\"%d %d\"
>3175	PrimaryExpression	\"%d %d\"
>3176	Argument	l2 . c_str ( )
>3177	CallExpression	l2 . c_str ( )
>3178	ArgumentList	 
>3179	Callee	l2 . c_str
>3180	MemberAccess	l2 . c_str
>3181	Identifier	c_str
>3182	Identifier	l2
>3183	Callee	std 
>3184	Identifier	std 
>3185	EqualityExpression	std 
>3186	PrimaryExpression	8
>3187	CallExpression	std 
>3188	ArgumentList	l1 . c_str ( )
>3189	Argument	& inputCalibration [ 7 ]
>3190	UnaryOp	& inputCalibration [ 7 ]
>3191	ArrayIndexing	inputCalibration [ 7 ]
>3192	PrimaryExpression	7
>3193	Identifier	inputCalibration
>3194	UnaryOperator	&
>3195	Argument	& inputCalibration [ 6 ]
>3196	UnaryOp	& inputCalibration [ 6 ]
>3197	ArrayIndexing	inputCalibration [ 6 ]
>3198	PrimaryExpression	6
>3199	Identifier	inputCalibration
>3200	UnaryOperator	&
>3201	Argument	& inputCalibration [ 5 ]
>3202	UnaryOp	& inputCalibration [ 5 ]
>3203	ArrayIndexing	inputCalibration [ 5 ]
>3204	PrimaryExpression	5
>3205	Identifier	inputCalibration
>3206	UnaryOperator	&
>3207	Argument	& inputCalibration [ 4 ]
>3208	UnaryOp	& inputCalibration [ 4 ]
>3209	ArrayIndexing	inputCalibration [ 4 ]
>3210	PrimaryExpression	4
>3211	Identifier	inputCalibration
>3212	UnaryOperator	&
>3213	Argument	& inputCalibration [ 3 ]
>3214	UnaryOp	& inputCalibration [ 3 ]
>3215	ArrayIndexing	inputCalibration [ 3 ]
>3216	PrimaryExpression	3
>3217	Identifier	inputCalibration
>3218	UnaryOperator	&
>3219	Argument	& inputCalibration [ 2 ]
>3220	UnaryOp	& inputCalibration [ 2 ]
>3221	ArrayIndexing	inputCalibration [ 2 ]
>3222	PrimaryExpression	2
>3223	Identifier	inputCalibration
>3224	UnaryOperator	&
>3225	Argument	& inputCalibration [ 1 ]
>3226	UnaryOp	& inputCalibration [ 1 ]
>3227	ArrayIndexing	inputCalibration [ 1 ]
>3228	PrimaryExpression	1
>3229	Identifier	inputCalibration
>3230	UnaryOperator	&
>3231	Argument	& inputCalibration [ 0 ]
>3232	UnaryOp	& inputCalibration [ 0 ]
>3233	ArrayIndexing	inputCalibration [ 0 ]
>3234	PrimaryExpression	0
>3235	Identifier	inputCalibration
>3236	UnaryOperator	&
>3237	Argument	\"%f %f %f %f %f %f %f %f\"
>3238	PrimaryExpression	\"%f %f %f %f %f %f %f %f\"
>3239	Argument	l1 . c_str ( )
>3240	CallExpression	l1 . c_str ( )
>3241	ArgumentList	 
>3242	Callee	l1 . c_str
>3243	MemberAccess	l1 . c_str
>3244	Identifier	c_str
>3245	Identifier	l1
>3246	Callee	std 
>3247	Identifier	std 
>3248	ExpressionStatement	 
>3249	CallExpression	std 
>3250	ArgumentList	infile
>3251	Argument	l4
>3252	Identifier	l4
>3253	Argument	infile
>3254	Identifier	infile
>3255	Callee	std 
>3256	Identifier	std 
>3257	ExpressionStatement	 
>3258	CallExpression	std 
>3259	ArgumentList	infile
>3260	Argument	l3
>3261	Identifier	l3
>3262	Argument	infile
>3263	Identifier	infile
>3264	Callee	std 
>3265	Identifier	std 
>3266	ExpressionStatement	 
>3267	CallExpression	std 
>3268	ArgumentList	infile
>3269	Argument	l2
>3270	Identifier	l2
>3271	Argument	infile
>3272	Identifier	infile
>3273	Callee	std 
>3274	Identifier	std 
>3275	ExpressionStatement	 
>3276	CallExpression	std 
>3277	ArgumentList	infile
>3278	Argument	l1
>3279	Identifier	l1
>3280	Argument	infile
>3281	Identifier	infile
>3282	Callee	std 
>3283	Identifier	std 
>3284	IdentifierDeclStatement	 
>3285	IdentifierDecl	l4
>3286	Identifier	l4
>3287	IdentifierDeclType	std 
>3288	IdentifierDecl	l3
>3289	Identifier	l3
>3290	IdentifierDeclType	std 
>3291	IdentifierDecl	l2
>3292	Identifier	l2
>3293	IdentifierDeclType	std 
>3294	IdentifierDecl	l1
>3295	Identifier	l1
>3296	IdentifierDeclType	std 
>3297	ExpressionStatement	 
>3298	CallExpression	assert ( infile . good ( ) )
>3299	ArgumentList	infile . good ( )
>3300	Argument	infile . good ( )
>3301	CallExpression	infile . good ( )
>3302	ArgumentList	 
>3303	Callee	infile . good
>3304	MemberAccess	infile . good
>3305	Identifier	good
>3306	Identifier	infile
>3307	Callee	assert
>3308	Identifier	assert
>3309	IdentifierDeclStatement	 
>3310	IdentifierDecl	infile ( configFileName )
>3311	Identifier	configFileName
>3312	Identifier	infile
>3313	IdentifierDeclType	std 
>3314	ExpressionStatement	 
>3315	AssignmentExpr	valid = true
>3316	Identifier	true
>3317	Identifier	valid
>3369	FunctionDef	UndistorterOpenCV 
>3370	ParameterList	 
>3371	CompoundStatement	 
>3375	FunctionDef	UndistorterOpenCV 
>3376	ParameterList	const cv 
>3377	Parameter	 
>3378	Identifier	result
>3379	ParameterType	cv 
>3380	Parameter	 
>3381	Identifier	image
>3382	ParameterType	const cv 
>3383	ReturnType	void
>3384	CompoundStatement	 
>3385	ExpressionStatement	 
>3386	CallExpression	cv 
>3387	ArgumentList	image
>3388	Argument	cv 
>3389	Identifier	cv 
>3390	Argument	map2
>3391	Identifier	map2
>3392	Argument	map1
>3393	Identifier	map1
>3394	Argument	result
>3395	Identifier	result
>3396	Argument	image
>3397	Identifier	image
>3398	Callee	cv 
>3399	Identifier	cv 
>3408	FunctionDef	UndistorterOpenCV 
>3409	ParameterList	 
>3410	ReturnType	const cv 
>3411	CompoundStatement	 
>3412	ReturnStatement	 
>3413	Identifier	K_
>3418	FunctionDef	UndistorterOpenCV 
>3419	ParameterList	 
>3420	ReturnType	const cv 
>3421	CompoundStatement	 
>3422	ReturnStatement	 
>3423	Identifier	originalK_
>3428	FunctionDef	UndistorterOpenCV 
>3429	ParameterList	 
>3430	ReturnType	int
>3431	CompoundStatement	 
>3432	ReturnStatement	 
>3433	Identifier	out_width
>3438	FunctionDef	UndistorterOpenCV 
>3439	ParameterList	 
>3440	ReturnType	int
>3441	CompoundStatement	 
>3442	ReturnStatement	 
>3443	Identifier	out_height
>3448	FunctionDef	UndistorterOpenCV 
>3449	ParameterList	 
>3450	ReturnType	int
>3451	CompoundStatement	 
>3452	ReturnStatement	 
>3453	Identifier	in_width
>3458	FunctionDef	UndistorterOpenCV 
>3459	ParameterList	 
>3460	ReturnType	int
>3461	CompoundStatement	 
>3462	ReturnStatement	 
>3463	Identifier	in_height
>3468	FunctionDef	UndistorterOpenCV 
>3469	ParameterList	 
>3470	ReturnType	bool
>3471	CompoundStatement	 
>3472	ReturnStatement	 
>3473	Identifier	valid
<3=5,4
<9=15,14,10
<10=11
<11=13,12
<15=287,273,263,182,175,171,162,155,150,16
<16=86,52,17
<17=18
<18=45,33,21,19
<19=20
<21=24,22
<22=23
<24=25
<25=32,26
<26=28,27
<28=29
<29=31,30
<33=34
<34=44,43,35
<35=42,36
<36=38,37
<38=39
<39=41,40
<45=46
<46=50,47
<47=48
<48=49
<50=51
<52=79,67,55,53
<53=54
<55=58,56
<56=57
<58=59
<59=66,60
<60=62,61
<62=63
<63=65,64
<67=68
<68=78,77,69
<69=76,70
<70=72,71
<72=73
<73=75,74
<79=80
<80=84,81
<81=82
<82=83
<84=85
<86=87
<87=89,88
<89=148,90
<90=141,139,133,127,121,115,109,103,97,91
<91=92
<92=96,93
<93=95,94
<97=98
<98=102,99
<99=101,100
<103=104
<104=108,105
<105=107,106
<109=110
<110=114,111
<111=113,112
<115=116
<116=120,117
<117=119,118
<121=122
<122=126,123
<123=125,124
<127=128
<128=132,129
<129=131,130
<133=134
<134=138,135
<135=137,136
<139=140
<141=142
<142=144,143
<144=145
<145=147,146
<148=149
<150=151
<151=154,153,152
<155=156
<156=158,157
<158=159
<159=161,160
<162=163
<163=169,164
<164=167,165
<165=166
<167=168
<169=170
<171=172
<172=174,173
<175=176
<176=180,177
<177=178
<178=179
<180=181
<182=254,183
<183=247,239,225,211,184
<184=202,185
<185=195,188,186
<186=187
<188=189
<189=191,190
<191=192
<192=194,193
<195=196
<196=200,197
<197=198
<198=199
<200=201
<202=203
<203=210,204
<204=206,205
<206=207
<207=209,208
<211=212
<212=221,213
<213=214
<214=215
<215=217,216
<217=218
<218=220,219
<221=222
<222=224,223
<225=226
<226=237,227
<227=235,228
<228=229
<229=231,230
<231=232
<232=234,233
<235=236
<237=238
<239=240
<240=246,241
<241=245,242
<242=244,243
<247=248
<248=250,249
<250=251
<251=253,252
<254=255
<255=262,256
<256=258,257
<258=259
<259=261,260
<263=264
<264=272,271,265
<265=267,266
<267=268
<268=270,269
<273=274
<274=285,275
<275=283,276
<276=277
<277=279,278
<279=280
<280=282,281
<283=284
<285=286
<287=288
<288=293,292,289
<289=291,290
<311=316,312
<312=313
<313=315,314
<316=2100,2096,2092,2087,2075,2062,2053,2044,2035,2026,1901,1755,1705,505,485,471,457,445,431,417,397,381,365,353,335,317
<317=318
<318=326,319
<319=321,320
<321=323,322
<323=325,324
<326=332,327
<327=331,328
<328=330,329
<332=334,333
<335=336
<336=344,337
<337=339,338
<339=341,340
<341=343,342
<344=350,345
<345=349,346
<346=348,347
<350=352,351
<353=354
<354=356,355
<356=362,357
<357=361,358
<358=360,359
<362=364,363
<365=366
<366=372,367
<367=369,368
<369=371,370
<372=378,373
<373=377,374
<374=376,375
<378=380,379
<381=382
<382=388,383
<383=385,384
<385=387,386
<388=394,389
<389=393,390
<390=392,391
<394=396,395
<397=398
<398=416,399
<399=414,400
<400=412,410,408,401
<401=402
<402=406,403
<403=404
<404=405
<406=407
<408=409
<410=411
<412=413
<414=415
<417=418
<418=422,419
<419=421,420
<422=428,423
<423=427,424
<424=426,425
<428=430,429
<431=432
<432=436,433
<433=435,434
<436=442,437
<437=441,438
<438=440,439
<442=444,443
<445=446
<446=448,447
<448=454,449
<449=453,450
<450=452,451
<454=456,455
<457=458
<458=462,459
<459=461,460
<462=468,463
<463=467,464
<464=466,465
<468=470,469
<471=472
<472=476,473
<473=475,474
<476=482,477
<477=481,478
<478=480,479
<482=484,483
<485=486
<486=504,487
<487=502,488
<488=500,498,496,489
<489=490
<490=494,491
<491=492
<492=493
<494=495
<496=497
<498=499
<500=501
<502=503
<505=1703,563,506
<506=507
<507=556,548,540,532,524,516,512,508
<508=509
<509=511,510
<512=513
<513=515,514
<516=517
<517=521,518
<518=520,519
<521=523,522
<524=525
<525=529,526
<526=528,527
<529=531,530
<532=533
<533=537,534
<534=536,535
<537=539,538
<540=541
<541=545,542
<542=544,543
<545=547,546
<548=549
<549=553,550
<550=552,551
<553=555,554
<556=557
<557=561,558
<558=559
<559=560
<561=562
<563=1694,1678,1667,1656,1643,1630,1619,1608,1602,1596,1586,1576,1563,881,873,865,855,845,839,822,805,571,564
<564=565
<565=569,566
<566=567
<567=568
<569=570
<571=797,793,790,572
<572=573
<573=782,778,775,574
<574=764,753,735,707,697,687,678,669,656,643,575
<575=623,602,576
<576=577
<577=590,578
<578=579
<579=583,580
<580=582,581
<583=589,584
<584=588,585
<585=587,586
<590=591
<591=595,592
<592=594,593
<595=601,596
<596=600,597
<597=599,598
<602=613,603
<603=604
<604=606,605
<606=612,607
<607=611,608
<608=610,609
<613=614
<614=616,615
<616=622,617
<617=621,618
<618=620,619
<623=624
<624=640,625
<625=637,626
<626=632,627
<627=631,628
<628=630,629
<632=636,633
<633=635,634
<637=639,638
<640=642,641
<643=650,644
<644=645
<645=649,646
<646=648,647
<650=651
<651=655,652
<652=654,653
<656=663,657
<657=658
<658=662,659
<659=661,660
<663=664
<664=668,665
<665=667,666
<669=674,670
<670=671
<671=673,672
<674=675
<675=677,676
<678=683,679
<679=680
<680=682,681
<683=684
<684=686,685
<687=688
<688=696,689
<689=691,690
<691=695,692
<692=694,693
<697=698
<698=706,699
<699=701,700
<701=705,702
<702=704,703
<707=708
<708=734,733,709
<709=732,710
<710=724,723,711
<711=715,712
<712=714,713
<715=721,716
<716=717
<717=718
<718=720,719
<721=722
<724=725
<725=729,726
<726=728,727
<729=731,730
<735=736
<736=752,751,737
<737=750,738
<738=748,739
<739=740
<740=741
<741=745,742
<742=744,743
<745=747,746
<748=749
<753=754
<754=763,762,755
<755=761,756
<756=758,757
<758=760,759
<764=765
<765=774,773,766
<766=772,767
<767=769,768
<769=771,770
<775=777,776
<778=779
<779=781,780
<782=783
<783=784
<784=789,788,785
<785=787,786
<790=792,791
<793=794
<794=796,795
<797=798
<798=799
<799=804,803,800
<800=802,801
<805=806
<806=821,807
<807=820,808
<808=818,809
<809=810
<810=811
<811=817,812
<812=816,813
<813=815,814
<818=819
<822=823
<823=838,824
<824=837,825
<825=835,826
<826=827
<827=828
<828=834,829
<829=833,830
<830=832,831
<835=836
<839=840
<840=842,841
<842=844,843
<845=846
<846=852,847
<847=849,848
<849=851,850
<852=854,853
<855=856
<856=862,857
<857=859,858
<859=861,860
<862=864,863
<865=866
<866=870,867
<867=869,868
<870=872,871
<873=874
<874=878,875
<875=877,876
<878=880,879
<881=1557,1520,882
<882=883
<883=1512,1309,884
<884=885
<885=1301,924,886
<886=887
<887=916,908,898,888
<888=889
<889=897,890
<890=892,891
<892=894,893
<894=896,895
<898=899
<899=907,900
<900=902,901
<902=904,903
<904=906,905
<908=909
<909=915,910
<910=912,911
<912=914,913
<916=917
<917=923,918
<918=920,919
<920=922,921
<924=1292,1279,1270,1257,1239,1221,1203,1185,1169,1153,1137,1121,1098,1075,1052,1029,1013,992,976,955,940,925
<925=926
<926=938,927
<927=936,934,932,930,928
<928=929
<930=931
<932=933
<934=935
<936=937
<938=939
<940=941
<941=953,942
<942=951,949,947,945,943
<943=944
<945=946
<947=948
<949=950
<951=952
<953=954
<955=956
<956=975,957
<957=963,958
<958=962,959
<959=961,960
<963=973,964
<964=969,965
<965=966
<966=968,967
<969=970
<970=972,971
<973=974
<976=977
<977=991,978
<978=990,979
<979=987,980
<980=984,981
<981=983,982
<984=986,985
<987=989,988
<992=993
<993=1012,994
<994=1000,995
<995=999,996
<996=998,997
<1000=1010,1001
<1001=1006,1002
<1002=1003
<1003=1005,1004
<1006=1007
<1007=1009,1008
<1010=1011
<1013=1014
<1014=1028,1015
<1015=1027,1016
<1016=1024,1017
<1017=1021,1018
<1018=1020,1019
<1021=1023,1022
<1024=1026,1025
<1029=1030
<1030=1051,1050,1031
<1031=1049,1032
<1032=1041,1033
<1033=1039,1034
<1034=1037,1035
<1035=1036
<1037=1038
<1039=1040
<1041=1047,1042
<1042=1045,1043
<1043=1044
<1045=1046
<1047=1048
<1052=1053
<1053=1074,1073,1054
<1054=1072,1055
<1055=1064,1056
<1056=1062,1057
<1057=1060,1058
<1058=1059
<1060=1061
<1062=1063
<1064=1070,1065
<1065=1068,1066
<1066=1067
<1068=1069
<1070=1071
<1075=1076
<1076=1097,1096,1077
<1077=1095,1078
<1078=1087,1079
<1079=1085,1080
<1080=1083,1081
<1081=1082
<1083=1084
<1085=1086
<1087=1093,1088
<1088=1091,1089
<1089=1090
<1091=1092
<1093=1094
<1098=1099
<1099=1120,1119,1100
<1100=1118,1101
<1101=1110,1102
<1102=1108,1103
<1103=1106,1104
<1104=1105
<1106=1107
<1108=1109
<1110=1116,1111
<1111=1114,1112
<1112=1113
<1114=1115
<1116=1117
<1121=1122
<1122=1136,1135,1123
<1123=1134,1124
<1124=1126,1125
<1126=1132,1127
<1127=1128
<1128=1129
<1129=1131,1130
<1132=1133
<1137=1138
<1138=1152,1151,1139
<1139=1150,1140
<1140=1142,1141
<1142=1148,1143
<1143=1144
<1144=1145
<1145=1147,1146
<1148=1149
<1153=1154
<1154=1168,1167,1155
<1155=1166,1156
<1156=1158,1157
<1158=1164,1159
<1159=1160
<1160=1161
<1161=1163,1162
<1164=1165
<1169=1170
<1170=1184,1183,1171
<1171=1182,1172
<1172=1174,1173
<1174=1180,1175
<1175=1176
<1176=1177
<1177=1179,1178
<1180=1181
<1185=1186
<1186=1202,1201,1187
<1187=1200,1188
<1188=1198,1189
<1189=1190
<1190=1191
<1191=1195,1192
<1192=1194,1193
<1195=1197,1196
<1198=1199
<1203=1204
<1204=1220,1219,1205
<1205=1218,1206
<1206=1216,1207
<1207=1208
<1208=1209
<1209=1213,1210
<1210=1212,1211
<1213=1215,1214
<1216=1217
<1221=1222
<1222=1238,1237,1223
<1223=1236,1224
<1224=1234,1225
<1225=1226
<1226=1227
<1227=1231,1228
<1228=1230,1229
<1231=1233,1232
<1234=1235
<1239=1240
<1240=1256,1255,1241
<1241=1254,1242
<1242=1252,1243
<1243=1244
<1244=1245
<1245=1249,1246
<1246=1248,1247
<1249=1251,1250
<1252=1253
<1257=1258
<1258=1269,1268,1259
<1259=1267,1260
<1260=1262,1261
<1262=1266,1263
<1263=1265,1264
<1270=1271
<1271=1278,1277,1272
<1272=1276,1273
<1273=1275,1274
<1279=1280
<1280=1291,1290,1281
<1281=1289,1282
<1282=1284,1283
<1284=1288,1285
<1285=1287,1286
<1292=1293
<1293=1300,1299,1294
<1294=1298,1295
<1295=1297,1296
<1301=1302
<1302=1306,1303
<1303=1305,1304
<1306=1308,1307
<1309=1503,1490,1481,1468,1452,1436,1420,1404,1384,1372,1352,1340,1325,1310
<1310=1311
<1311=1323,1312
<1312=1321,1319,1317,1315,1313
<1313=1314
<1315=1316
<1317=1318
<1319=1320
<1321=1322
<1323=1324
<1325=1326
<1326=1338,1327
<1327=1336,1334,1332,1330,1328
<1328=1329
<1330=1331
<1332=1333
<1334=1335
<1336=1337
<1338=1339
<1340=1341
<1341=1351,1342
<1342=1348,1343
<1343=1347,1344
<1344=1346,1345
<1348=1350,1349
<1352=1353
<1353=1371,1354
<1354=1370,1355
<1355=1363,1356
<1356=1360,1357
<1357=1359,1358
<1360=1362,1361
<1363=1367,1364
<1364=1366,1365
<1367=1369,1368
<1372=1373
<1373=1383,1374
<1374=1380,1375
<1375=1379,1376
<1376=1378,1377
<1380=1382,1381
<1384=1385
<1385=1403,1386
<1386=1402,1387
<1387=1395,1388
<1388=1392,1389
<1389=1391,1390
<1392=1394,1393
<1395=1399,1396
<1396=1398,1397
<1399=1401,1400
<1404=1405
<1405=1419,1418,1406
<1406=1417,1407
<1407=1409,1408
<1409=1415,1410
<1410=1411
<1411=1412
<1412=1414,1413
<1415=1416
<1420=1421
<1421=1435,1434,1422
<1422=1433,1423
<1423=1425,1424
<1425=1431,1426
<1426=1427
<1427=1428
<1428=1430,1429
<1431=1432
<1436=1437
<1437=1451,1450,1438
<1438=1449,1439
<1439=1441,1440
<1441=1447,1442
<1442=1443
<1443=1444
<1444=1446,1445
<1447=1448
<1452=1453
<1453=1467,1466,1454
<1454=1465,1455
<1455=1457,1456
<1457=1463,1458
<1458=1459
<1459=1460
<1460=1462,1461
<1463=1464
<1468=1469
<1469=1480,1479,1470
<1470=1478,1471
<1471=1473,1472
<1473=1477,1474
<1474=1476,1475
<1481=1482
<1482=1489,1488,1483
<1483=1487,1484
<1484=1486,1485
<1490=1491
<1491=1502,1501,1492
<1492=1500,1493
<1493=1495,1494
<1495=1499,1496
<1496=1498,1497
<1503=1504
<1504=1511,1510,1505
<1505=1509,1506
<1506=1508,1507
<1512=1513
<1513=1517,1514
<1514=1516,1515
<1517=1519,1518
<1520=1549,1541,1531,1521
<1521=1522
<1522=1530,1523
<1523=1525,1524
<1525=1527,1526
<1527=1529,1528
<1531=1532
<1532=1540,1533
<1533=1535,1534
<1535=1537,1536
<1537=1539,1538
<1541=1542
<1542=1548,1543
<1543=1545,1544
<1545=1547,1546
<1549=1550
<1550=1556,1551
<1551=1553,1552
<1553=1555,1554
<1557=1558
<1558=1560,1559
<1560=1562,1561
<1563=1573,1570,1567,1564
<1564=1566,1565
<1567=1569,1568
<1570=1572,1571
<1573=1575,1574
<1576=1577
<1577=1585,1578
<1578=1580,1579
<1580=1582,1581
<1582=1584,1583
<1586=1587
<1587=1595,1588
<1588=1590,1589
<1590=1592,1591
<1592=1594,1593
<1596=1597
<1597=1601,1598
<1598=1600,1599
<1602=1603
<1603=1607,1604
<1604=1606,1605
<1608=1609
<1609=1618,1617,1610
<1610=1616,1611
<1611=1615,1612
<1612=1614,1613
<1619=1620
<1620=1629,1628,1621
<1621=1627,1622
<1622=1626,1623
<1623=1625,1624
<1630=1631
<1631=1642,1641,1632
<1632=1640,1633
<1633=1635,1634
<1635=1637,1636
<1637=1639,1638
<1643=1644
<1644=1655,1654,1645
<1645=1653,1646
<1646=1648,1647
<1648=1650,1649
<1650=1652,1651
<1656=1657
<1657=1666,1665,1658
<1658=1664,1659
<1659=1661,1660
<1661=1663,1662
<1667=1668
<1668=1677,1676,1669
<1669=1675,1670
<1670=1672,1671
<1672=1674,1673
<1678=1679
<1679=1693,1692,1680
<1680=1691,1681
<1681=1690,1682
<1682=1688,1683
<1683=1684
<1684=1685
<1685=1687,1686
<1688=1689
<1694=1695
<1695=1702,1701,1696
<1696=1700,1697
<1697=1699,1698
<1703=1704
<1705=1731,1719,1706
<1706=1707
<1707=1712,1708
<1708=1709
<1709=1711,1710
<1712=1713
<1713=1717,1714
<1714=1715
<1715=1716
<1717=1718
<1719=1720
<1720=1721
<1721=1729,1722
<1722=1727,1725,1723
<1723=1724
<1725=1726
<1727=1728
<1729=1730
<1731=1732
<1732=1734,1733
<1734=1753,1735
<1735=1746,1744,1740,1736
<1736=1737
<1737=1739,1738
<1740=1741
<1741=1743,1742
<1744=1745
<1746=1747
<1747=1749,1748
<1749=1750
<1750=1752,1751
<1753=1754
<1755=1897,1881,1756
<1756=1757
<1757=1877,1861,1758
<1758=1759
<1759=1857,1849,1760
<1760=1761
<1761=1803,1775,1762
<1762=1763
<1763=1768,1764
<1764=1765
<1765=1767,1766
<1768=1769
<1769=1773,1770
<1770=1771
<1771=1772
<1773=1774
<1775=1776
<1776=1777
<1777=1801,1778
<1778=1799,1795,1791,1787,1783,1779
<1779=1780
<1780=1782,1781
<1783=1784
<1784=1786,1785
<1787=1788
<1788=1790,1789
<1791=1792
<1792=1794,1793
<1795=1796
<1796=1798,1797
<1799=1800
<1801=1802
<1803=1804
<1804=1806,1805
<1806=1847,1807
<1807=1840,1838,1832,1826,1820,1814,1808
<1808=1809
<1809=1813,1810
<1810=1812,1811
<1814=1815
<1815=1819,1816
<1816=1818,1817
<1820=1821
<1821=1825,1822
<1822=1824,1823
<1826=1827
<1827=1831,1828
<1828=1830,1829
<1832=1833
<1833=1837,1834
<1834=1836,1835
<1838=1839
<1840=1841
<1841=1843,1842
<1843=1844
<1844=1846,1845
<1847=1848
<1849=1850
<1850=1851
<1851=1855,1852
<1852=1853
<1853=1854
<1855=1856
<1857=1858
<1858=1860,1859
<1861=1869,1862
<1862=1863
<1863=1867,1864
<1864=1865
<1865=1866
<1867=1868
<1869=1870
<1870=1874,1871
<1871=1873,1872
<1874=1876,1875
<1877=1878
<1878=1880,1879
<1881=1889,1882
<1882=1883
<1883=1887,1884
<1884=1885
<1885=1886
<1887=1888
<1889=1890
<1890=1894,1891
<1891=1893,1892
<1894=1896,1895
<1897=1898
<1898=1900,1899
<1901=1956,1917,1902
<1902=1903
<1903=1908,1904
<1904=1905
<1905=1907,1906
<1908=1909
<1909=1915,1910
<1910=1913,1911
<1911=1912
<1913=1914
<1915=1916
<1917=1945,1918
<1918=1919
<1919=1943,1920
<1920=1941,1937,1933,1929,1925,1921
<1921=1922
<1922=1924,1923
<1925=1926
<1926=1928,1927
<1929=1930
<1930=1932,1931
<1933=1934
<1934=1936,1935
<1937=1938
<1938=1940,1939
<1941=1942
<1943=1944
<1945=1946
<1946=1954,1947
<1947=1952,1950,1948
<1948=1949
<1950=1951
<1952=1953
<1954=1955
<1956=1957
<1957=1981,1958
<1958=1960,1959
<1960=1979,1961
<1961=1972,1970,1966,1962
<1962=1963
<1963=1965,1964
<1966=1967
<1967=1969,1968
<1970=1971
<1972=1973
<1973=1975,1974
<1975=1976
<1976=1978,1977
<1979=1980
<1981=1983,1982
<1983=2024,1984
<1984=2017,2015,2009,2003,1997,1991,1985
<1985=1986
<1986=1990,1987
<1987=1989,1988
<1991=1992
<1992=1996,1993
<1993=1995,1994
<1997=1998
<1998=2002,1999
<1999=2001,2000
<2003=2004
<2004=2008,2005
<2005=2007,2006
<2009=2010
<2010=2014,2011
<2011=2013,2012
<2015=2016
<2017=2018
<2018=2020,2019
<2020=2021
<2021=2023,2022
<2024=2025
<2026=2027
<2027=2033,2028
<2028=2031,2029
<2029=2030
<2031=2032
<2033=2034
<2035=2036
<2036=2042,2037
<2037=2040,2038
<2038=2039
<2040=2041
<2042=2043
<2044=2045
<2045=2051,2046
<2046=2049,2047
<2047=2048
<2049=2050
<2051=2052
<2053=2054
<2054=2060,2055
<2055=2058,2056
<2056=2057
<2058=2059
<2060=2061
<2062=2072,2069,2066,2063
<2063=2065,2064
<2066=2068,2067
<2069=2071,2070
<2072=2074,2073
<2075=2076
<2076=2085,2077
<2077=2078
<2078=2079
<2079=2081,2080
<2081=2082
<2082=2084,2083
<2085=2086
<2087=2088
<2088=2091,2090,2089
<2092=2093
<2093=2095,2094
<2096=2097
<2097=2099,2098
<2100=2101
<2101=2103,2102
<2195=2197,2196
<2197=2207,2198
<2198=2199
<2199=2205,2200
<2200=2201
<2201=2202
<2202=2204,2203
<2205=2206
<2207=2208
<2208=2214,2209
<2209=2210
<2210=2211
<2211=2213,2212
<2214=2215
<2221=2230,2229,2222
<2222=2226,2223
<2223=2225,2224
<2226=2228,2227
<2230=2491,2460,2434,2421,2409,2392,2380,2371,2231
<2231=2359,2355,2352,2232
<2232=2343,2334,2233
<2233=2330,2324,2234
<2234=2235
<2235=2317,2310,2306,2302,2293,2276,2236
<2236=2237
<2237=2273,2238
<2238=2266,2239
<2239=2259,2240
<2240=2252,2241
<2241=2245,2242
<2242=2244,2243
<2245=2251,2246
<2246=2250,2247
<2247=2249,2248
<2252=2256,2253
<2253=2255,2254
<2256=2258,2257
<2259=2263,2260
<2260=2262,2261
<2263=2265,2264
<2266=2272,2267
<2267=2271,2268
<2268=2270,2269
<2273=2275,2274
<2276=2277
<2277=2292,2291,2278
<2278=2290,2279
<2279=2285,2280
<2280=2284,2281
<2281=2283,2282
<2285=2289,2286
<2286=2288,2287
<2293=2294
<2294=2301,2300,2295
<2295=2299,2296
<2296=2298,2297
<2302=2303
<2303=2305,2304
<2306=2307
<2307=2309,2308
<2310=2311
<2311=2316,2315,2312
<2312=2314,2313
<2317=2318
<2318=2323,2322,2319
<2319=2321,2320
<2324=2325
<2325=2327,2326
<2327=2329,2328
<2330=2331
<2331=2333,2332
<2334=2335
<2335=2342,2341,2336
<2336=2340,2337
<2337=2339,2338
<2343=2344
<2344=2351,2350,2345
<2345=2349,2346
<2346=2348,2347
<2352=2354,2353
<2355=2356
<2356=2358,2357
<2359=2360
<2360=2361
<2361=2370,2369,2362
<2362=2368,2363
<2363=2365,2364
<2365=2367,2366
<2371=2372
<2372=2379,2378,2373
<2373=2377,2374
<2374=2376,2375
<2380=2381
<2381=2390,2382
<2382=2383
<2383=2384
<2384=2386,2385
<2386=2387
<2387=2389,2388
<2390=2391
<2392=2393
<2393=2407,2394
<2394=2395
<2395=2396
<2396=2398,2397
<2398=2399
<2399=2401,2400
<2401=2403,2402
<2403=2404
<2404=2406,2405
<2407=2408
<2409=2410
<2410=2420,2419,2411
<2411=2418,2412
<2412=2414,2413
<2414=2415
<2415=2417,2416
<2421=2422
<2422=2430,2423
<2423=2428,2426,2424
<2424=2425
<2426=2427
<2428=2429
<2430=2431
<2431=2433,2432
<2434=2446,2435
<2435=2437,2436
<2437=2438
<2438=2440,2439
<2440=2442,2441
<2442=2443
<2443=2445,2444
<2446=2447
<2447=2457,2448
<2448=2454,2449
<2449=2451,2450
<2451=2453,2452
<2454=2456,2455
<2457=2459,2458
<2460=2479,2461
<2461=2472,2463,2462
<2463=2464
<2464=2466,2465
<2466=2468,2467
<2468=2469
<2469=2471,2470
<2472=2473
<2473=2477,2474
<2474=2475
<2475=2476
<2477=2478
<2479=2480
<2480=2486,2481
<2481=2483,2482
<2483=2485,2484
<2486=2488,2487
<2488=2490,2489
<2491=2503,2492
<2492=2494,2493
<2494=2495
<2495=2497,2496
<2497=2499,2498
<2499=2500
<2500=2502,2501
<2503=2504
<2504=2506,2505
<2544=2547,2546,2545
<2547=2548
<2548=2549
<2554=2557,2556,2555
<2557=2558
<2558=2559
<2564=2567,2566,2565
<2567=2568
<2568=2569
<2574=2577,2576,2575
<2577=2578
<2578=2579
<2584=2587,2586,2585
<2587=2588
<2588=2589
<2594=2597,2596,2595
<2597=2598
<2598=2599
<2604=2607,2606,2605
<2607=2608
<2608=2609
<2614=2619,2615
<2615=2616
<2616=2618,2617
<2619=3314,3309,3297,3284,3275,3266,3257,3248,3093,3023,2973,2957,2925,2852,2832,2818,2804,2792,2778,2764,2638,2629,2620
<2620=2621
<2621=2628,2622
<2622=2624,2623
<2624=2625
<2625=2627,2626
<2629=2630
<2630=2637,2631
<2631=2633,2632
<2633=2634
<2634=2636,2635
<2638=2762,2639
<2639=2719,2688,2676,2664,2652,2640
<2640=2641
<2641=2643,2642
<2643=2649,2644
<2644=2648,2645
<2645=2647,2646
<2649=2651,2650
<2652=2653
<2653=2655,2654
<2655=2661,2656
<2656=2660,2657
<2657=2659,2658
<2661=2663,2662
<2664=2665
<2665=2667,2666
<2667=2673,2668
<2668=2672,2669
<2669=2671,2670
<2673=2675,2674
<2676=2677
<2677=2679,2678
<2679=2685,2680
<2680=2684,2681
<2681=2683,2682
<2685=2687,2686
<2688=2689
<2689=2717,2690
<2690=2715,2713,2708,2706,2697,2695,2693,2691
<2691=2692
<2693=2694
<2695=2696
<2697=2698
<2698=2704,2699
<2699=2702,2700
<2700=2701
<2702=2703
<2704=2705
<2706=2707
<2708=2709
<2709=2711,2710
<2711=2712
<2713=2714
<2715=2716
<2717=2718
<2719=2720
<2720=2761,2721
<2721=2759,2722
<2722=2757,2755,2746,2736,2727,2725,2723
<2723=2724
<2725=2726
<2727=2728
<2728=2734,2729
<2729=2732,2730
<2730=2731
<2732=2733
<2734=2735
<2736=2737
<2737=2740,2739,2738
<2740=2741
<2741=2745,2742
<2742=2744,2743
<2746=2747
<2747=2753,2748
<2748=2751,2749
<2749=2750
<2751=2752
<2753=2754
<2755=2756
<2757=2758
<2759=2760
<2762=2763
<2764=2765
<2765=2769,2766
<2766=2768,2767
<2769=2775,2770
<2770=2774,2771
<2771=2773,2772
<2775=2777,2776
<2778=2779
<2779=2783,2780
<2780=2782,2781
<2783=2789,2784
<2784=2788,2785
<2785=2787,2786
<2789=2791,2790
<2792=2793
<2793=2795,2794
<2795=2801,2796
<2796=2800,2797
<2797=2799,2798
<2801=2803,2802
<2804=2805
<2805=2809,2806
<2806=2808,2807
<2809=2815,2810
<2810=2814,2811
<2811=2813,2812
<2815=2817,2816
<2818=2819
<2819=2823,2820
<2820=2822,2821
<2823=2829,2824
<2824=2828,2825
<2825=2827,2826
<2829=2831,2830
<2832=2833
<2833=2851,2834
<2834=2849,2835
<2835=2847,2845,2843,2836
<2836=2837
<2837=2841,2838
<2838=2839
<2839=2840
<2841=2842
<2843=2844
<2845=2846
<2847=2848
<2849=2850
<2852=2919,2853
<2853=2908,2901,2895,2889,2883,2877,2854
<2854=2855
<2855=2875,2856
<2856=2873,2869,2865,2861,2857
<2857=2858
<2858=2860,2859
<2861=2862
<2862=2864,2863
<2865=2866
<2866=2868,2867
<2869=2870
<2870=2872,2871
<2873=2874
<2875=2876
<2877=2878
<2878=2880,2879
<2880=2882,2881
<2883=2884
<2884=2886,2885
<2886=2888,2887
<2889=2890
<2890=2892,2891
<2892=2894,2893
<2895=2896
<2896=2898,2897
<2898=2900,2899
<2901=2902
<2902=2906,2903
<2903=2904
<2904=2905
<2906=2907
<2908=2909
<2909=2917,2910
<2910=2915,2911
<2911=2912
<2912=2914,2913
<2915=2916
<2917=2918
<2919=2920
<2920=2922,2921
<2922=2924,2923
<2925=2949,2945,2942,2926
<2926=2927
<2927=2933,2928
<2928=2932,2929
<2929=2931,2930
<2933=2939,2934
<2934=2938,2935
<2935=2937,2936
<2939=2941,2940
<2942=2944,2943
<2945=2946
<2946=2948,2947
<2949=2950
<2950=2951
<2951=2956,2955,2952
<2952=2954,2953
<2957=2958
<2958=2972,2971,2959
<2959=2970,2960
<2960=2968,2961
<2961=2966,2964,2962
<2962=2963
<2964=2965
<2966=2967
<2968=2969
<2973=2999,2987,2974
<2974=2975
<2975=2980,2976
<2976=2977
<2977=2979,2978
<2980=2981
<2981=2985,2982
<2982=2983
<2983=2984
<2985=2986
<2987=2988
<2988=2989
<2989=2997,2990
<2990=2995,2993,2991
<2991=2992
<2993=2994
<2995=2996
<2997=2998
<2999=3000
<3000=3002,3001
<3002=3021,3003
<3003=3014,3012,3008,3004
<3004=3005
<3005=3007,3006
<3008=3009
<3009=3011,3010
<3012=3013
<3014=3015
<3015=3017,3016
<3017=3018
<3018=3020,3019
<3021=3022
<3023=3089,3075,3024
<3024=3025
<3025=3071,3057,3026
<3026=3027
<3027=3053,3041,3028
<3028=3029
<3029=3034,3030
<3030=3031
<3031=3033,3032
<3034=3035
<3035=3039,3036
<3036=3037
<3037=3038
<3039=3040
<3041=3046,3042
<3042=3043
<3043=3045,3044
<3046=3047
<3047=3051,3048
<3048=3049
<3049=3050
<3051=3052
<3053=3054
<3054=3056,3055
<3057=3065,3058
<3058=3059
<3059=3063,3060
<3060=3061
<3061=3062
<3063=3064
<3065=3066
<3066=3070,3067
<3067=3069,3068
<3071=3072
<3072=3074,3073
<3075=3083,3076
<3076=3077
<3077=3081,3078
<3078=3079
<3079=3080
<3081=3082
<3083=3084
<3084=3088,3085
<3085=3087,3086
<3089=3090
<3090=3092,3091
<3093=3160,3109,3094
<3094=3095
<3095=3100,3096
<3096=3097
<3097=3099,3098
<3100=3101
<3101=3107,3102
<3102=3105,3103
<3103=3104
<3105=3106
<3107=3108
<3109=3149,3110
<3110=3111
<3111=3147,3112
<3112=3145,3141,3137,3133,3129,3125,3121,3117,3113
<3113=3114
<3114=3116,3115
<3117=3118
<3118=3120,3119
<3121=3122
<3122=3124,3123
<3125=3126
<3126=3128,3127
<3129=3130
<3130=3132,3131
<3133=3134
<3134=3136,3135
<3137=3138
<3138=3140,3139
<3141=3142
<3142=3144,3143
<3145=3146
<3147=3148
<3149=3150
<3150=3158,3151
<3151=3156,3154,3152
<3152=3153
<3154=3155
<3156=3157
<3158=3159
<3160=3161
<3161=3185,3162
<3162=3164,3163
<3164=3183,3165
<3165=3176,3174,3170,3166
<3166=3167
<3167=3169,3168
<3170=3171
<3171=3173,3172
<3174=3175
<3176=3177
<3177=3179,3178
<3179=3180
<3180=3182,3181
<3183=3184
<3185=3187,3186
<3187=3246,3188
<3188=3239,3237,3231,3225,3219,3213,3207,3201,3195,3189
<3189=3190
<3190=3194,3191
<3191=3193,3192
<3195=3196
<3196=3200,3197
<3197=3199,3198
<3201=3202
<3202=3206,3203
<3203=3205,3204
<3207=3208
<3208=3212,3209
<3209=3211,3210
<3213=3214
<3214=3218,3215
<3215=3217,3216
<3219=3220
<3220=3224,3221
<3221=3223,3222
<3225=3226
<3226=3230,3227
<3227=3229,3228
<3231=3232
<3232=3236,3233
<3233=3235,3234
<3237=3238
<3239=3240
<3240=3242,3241
<3242=3243
<3243=3245,3244
<3246=3247
<3248=3249
<3249=3255,3250
<3250=3253,3251
<3251=3252
<3253=3254
<3255=3256
<3257=3258
<3258=3264,3259
<3259=3262,3260
<3260=3261
<3262=3263
<3264=3265
<3266=3267
<3267=3273,3268
<3268=3271,3269
<3269=3270
<3271=3272
<3273=3274
<3275=3276
<3276=3282,3277
<3277=3280,3278
<3278=3279
<3280=3281
<3282=3283
<3284=3294,3291,3288,3285
<3285=3287,3286
<3288=3290,3289
<3291=3293,3292
<3294=3296,3295
<3297=3298
<3298=3307,3299
<3299=3300
<3300=3301
<3301=3303,3302
<3303=3304
<3304=3306,3305
<3307=3308
<3309=3310
<3310=3313,3312,3311
<3314=3315
<3315=3317,3316
<3369=3371,3370
<3375=3384,3383,3376
<3376=3380,3377
<3377=3379,3378
<3380=3382,3381
<3384=3385
<3385=3386
<3386=3398,3387
<3387=3396,3394,3392,3390,3388
<3388=3389
<3390=3391
<3392=3393
<3394=3395
<3396=3397
<3398=3399
<3408=3411,3410,3409
<3411=3412
<3412=3413
<3418=3421,3420,3419
<3421=3422
<3422=3423
<3428=3431,3430,3429
<3431=3432
<3432=3433
<3438=3441,3440,3439
<3441=3442
<3442=3443
<3448=3451,3450,3449
<3451=3452
<3452=3453
<3458=3461,3460,3459
<3461=3462
<3462=3463
<3468=3471,3470,3469
<3471=3472
<3472=3473
