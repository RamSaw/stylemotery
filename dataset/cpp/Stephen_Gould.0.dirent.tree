>12	FunctionDef	opendir (const char * name)
>13	ParameterList	const char * name
>14	Parameter	 
>15	Identifier	name
>16	ParameterType	const char *
>17	ReturnType	DIR *
>18	CompoundStatement	 
>19	ReturnStatement	 
>20	Identifier	dir
>21	IfStatement	if ( name && name [ 0 ] )
>22	ElseStatement	else
>23	CompoundStatement	 
>24	ExpressionStatement	 
>25	AssignmentExpr	errno = EINVAL
>26	Identifier	EINVAL
>27	Identifier	errno
>28	CompoundStatement	 
>29	IfStatement	if ( ( dir = ( DIR * ) malloc ( sizeof * dir ) ) != 0 && ( dir -> name = ( char * ) malloc ( base_length + strlen ( \
>30	ElseStatement	else
>31	CompoundStatement	 
>32	ExpressionStatement	 
>33	AssignmentExpr	errno = ENOMEM
>34	Identifier	ENOMEM
>35	Identifier	errno
>36	ExpressionStatement	 
>37	AssignmentExpr	dir = 0
>38	PrimaryExpression	0
>39	Identifier	dir
>40	ExpressionStatement	 
>41	CallExpression	free ( dir )
>42	ArgumentList	dir
>43	Argument	dir
>44	Identifier	dir
>45	Callee	free
>46	Identifier	free
>47	CompoundStatement	 
>48	IfStatement	if ( ( dir -> handle = ( long ) _findfirst ( dir -> name , & dir -> info ) ) != - 1 )
>49	ElseStatement	else
>50	CompoundStatement	 
>51	ExpressionStatement	 
>52	AssignmentExpr	dir = 0
>53	PrimaryExpression	0
>54	Identifier	dir
>55	ExpressionStatement	 
>56	CallExpression	free ( dir )
>57	ArgumentList	dir
>58	Argument	dir
>59	Identifier	dir
>60	Callee	free
>61	Identifier	free
>62	ExpressionStatement	 
>63	CallExpression	free ( dir -> name )
>64	ArgumentList	dir -> name
>65	Argument	dir -> name
>66	PtrMemberAccess	dir -> name
>67	Identifier	name
>68	Identifier	dir
>69	Callee	free
>70	Identifier	free
>71	CompoundStatement	 
>72	ExpressionStatement	 
>73	AssignmentExpr	dir -> result . d_name = 0
>74	PrimaryExpression	0
>75	MemberAccess	dir -> result . d_name
>76	Identifier	d_name
>77	PtrMemberAccess	dir -> result
>78	Identifier	result
>79	Identifier	dir
>80	Condition	 
>81	EqualityExpression	( dir -> handle = ( long ) _findfirst ( dir -> name , & dir -> info ) ) != - 1
>82	UnaryOp	- 1
>83	PrimaryExpression	1
>84	UnaryOperator	-
>85	AssignmentExpr	dir -> handle = ( long ) _findfirst ( dir -> name , & dir -> info )
>86	CastExpression	( long ) _findfirst ( dir -> name , & dir -> info )
>87	CallExpression	_findfirst ( dir -> name , & dir -> info )
>88	ArgumentList	dir -> name
>89	Argument	& dir -> info
>90	UnaryOp	& dir -> info
>91	PtrMemberAccess	dir -> info
>92	Identifier	info
>93	Identifier	dir
>94	UnaryOperator	&
>95	Argument	dir -> name
>96	PtrMemberAccess	dir -> name
>97	Identifier	name
>98	Identifier	dir
>99	Callee	_findfirst
>100	Identifier	_findfirst
>101	CastTarget	long
>102	PtrMemberAccess	dir -> handle
>103	Identifier	handle
>104	Identifier	dir
>105	ExpressionStatement	 
>106	CallExpression	strcat ( strcpy ( dir -> name , name ) , all )
>107	ArgumentList	strcpy ( dir -> name , name )
>108	Argument	all
>109	Identifier	all
>110	Argument	strcpy ( dir -> name , name )
>111	CallExpression	strcpy ( dir -> name , name )
>112	ArgumentList	dir -> name
>113	Argument	name
>114	Identifier	name
>115	Argument	dir -> name
>116	PtrMemberAccess	dir -> name
>117	Identifier	name
>118	Identifier	dir
>119	Callee	strcpy
>120	Identifier	strcpy
>121	Callee	strcat
>122	Identifier	strcat
>123	Condition	 
>124	AndExpression	( dir = ( DIR * ) malloc ( sizeof * dir ) ) != 0 && ( dir -> name = ( char * ) malloc ( base_length + \
>125	EqualityExpression	( dir -> name = ( char * ) malloc ( base_length + strlen ( all ) + 1 ) ) != 0
>126	PrimaryExpression	0
>127	AssignmentExpr	dir -> name = ( char * ) malloc ( base_length + strlen ( all ) + 1 )
>128	CastExpression	( char * ) malloc ( base_length + strlen ( all ) + 1 )
>129	CallExpression	malloc ( base_length + strlen ( all ) + 1 )
>130	ArgumentList	base_length + strlen ( all ) + 1
>131	Argument	base_length + strlen ( all ) + 1
>132	AdditiveExpression	base_length + strlen ( all ) + 1
>133	AdditiveExpression	strlen ( all ) + 1
>134	PrimaryExpression	1
>135	CallExpression	strlen ( all )
>136	ArgumentList	all
>137	Argument	all
>138	Identifier	all
>139	Callee	strlen
>140	Identifier	strlen
>141	Identifier	base_length
>142	Callee	malloc
>143	Identifier	malloc
>144	CastTarget	char *
>145	PtrMemberAccess	dir -> name
>146	Identifier	name
>147	Identifier	dir
>148	EqualityExpression	( dir = ( DIR * ) malloc ( sizeof * dir ) ) != 0
>149	PrimaryExpression	0
>150	AssignmentExpr	dir = ( DIR * ) malloc ( sizeof * dir )
>151	CastExpression	( DIR * ) malloc ( sizeof * dir )
>152	CallExpression	malloc ( sizeof * dir )
>153	ArgumentList	sizeof * dir
>154	Argument	sizeof * dir
>155	SizeofExpr	sizeof * dir
>156	UnaryOp	* dir
>157	Identifier	dir
>158	UnaryOperator	*
>159	Sizeof	sizeof
>160	Callee	malloc
>161	Identifier	malloc
>162	CastTarget	DIR *
>163	Identifier	dir
>164	IdentifierDeclStatement	 
>165	IdentifierDecl	* all = strchr ( \"/\\\" , name [ base_length - 1 ] ) ? \"*\" 
>166	AssignmentExpr	* all = strchr ( \"/\\\" , name [ base_length - 1 ] ) ? \"*\" 
>167	ConditionalExpression	strchr ( \"/\\\" , name [ base_length - 1 ] ) ? \"*\" 
>168	PrimaryExpression	\"/*\"
>169	PrimaryExpression	\"*\"
>170	Condition	strchr ( \"/\\\" , name [ base_length - 1 ] )
>171	CallExpression	strchr ( \"/\\\" , name [ base_length - 1 ] )
>172	ArgumentList	\"/\\\"
>173	Argument	name [ base_length - 1 ]
>174	ArrayIndexing	name [ base_length - 1 ]
>175	AdditiveExpression	base_length - 1
>176	PrimaryExpression	1
>177	Identifier	base_length
>178	Identifier	name
>179	Argument	\"/\\\"
>180	PrimaryExpression	\"/\\\"
>181	Callee	strchr
>182	Identifier	strchr
>183	Identifier	all
>184	Identifier	all
>185	IdentifierDeclType	const char *
>186	IdentifierDeclStatement	 
>187	IdentifierDecl	base_length = strlen ( name )
>188	AssignmentExpr	base_length = strlen ( name )
>189	CallExpression	strlen ( name )
>190	ArgumentList	name
>191	Argument	name
>192	Identifier	name
>193	Callee	strlen
>194	Identifier	strlen
>195	Identifier	base_length
>196	Identifier	base_length
>197	IdentifierDeclType	size_t
>198	Condition	 
>199	AndExpression	name && name [ 0 ]
>200	ArrayIndexing	name [ 0 ]
>201	PrimaryExpression	0
>202	Identifier	name
>203	Identifier	name
>204	IdentifierDeclStatement	 
>205	IdentifierDecl	* dir = 0
>206	AssignmentExpr	* dir = 0
>207	PrimaryExpression	0
>208	Identifier	dir
>209	Identifier	dir
>210	IdentifierDeclType	DIR *
>235	FunctionDef	closedir (DIR * dir)
>236	ParameterList	DIR * dir
>237	Parameter	 
>238	Identifier	dir
>239	ParameterType	DIR *
>240	ReturnType	int
>241	CompoundStatement	 
>242	ReturnStatement	 
>243	Identifier	result
>244	IfStatement	if ( result == - 1 )
>245	CompoundStatement	 
>246	ExpressionStatement	 
>247	AssignmentExpr	errno = EBADF
>248	Identifier	EBADF
>249	Identifier	errno
>250	Condition	 
>251	EqualityExpression	result == - 1
>252	UnaryOp	- 1
>253	PrimaryExpression	1
>254	UnaryOperator	-
>255	Identifier	result
>256	IfStatement	if ( dir )
>257	CompoundStatement	 
>258	ExpressionStatement	 
>259	CallExpression	free ( dir )
>260	ArgumentList	dir
>261	Argument	dir
>262	Identifier	dir
>263	Callee	free
>264	Identifier	free
>265	ExpressionStatement	 
>266	CallExpression	free ( dir -> name )
>267	ArgumentList	dir -> name
>268	Argument	dir -> name
>269	PtrMemberAccess	dir -> name
>270	Identifier	name
>271	Identifier	dir
>272	Callee	free
>273	Identifier	free
>274	IfStatement	if ( dir -> handle != - 1 )
>275	CompoundStatement	 
>276	ExpressionStatement	 
>277	AssignmentExpr	result = _findclose ( dir -> handle )
>278	CallExpression	_findclose ( dir -> handle )
>279	ArgumentList	dir -> handle
>280	Argument	dir -> handle
>281	PtrMemberAccess	dir -> handle
>282	Identifier	handle
>283	Identifier	dir
>284	Callee	_findclose
>285	Identifier	_findclose
>286	Identifier	result
>287	Condition	 
>288	EqualityExpression	dir -> handle != - 1
>289	UnaryOp	- 1
>290	PrimaryExpression	1
>291	UnaryOperator	-
>292	PtrMemberAccess	dir -> handle
>293	Identifier	handle
>294	Identifier	dir
>295	Condition	 
>296	Identifier	dir
>297	IdentifierDeclStatement	 
>298	IdentifierDecl	result = - 1
>299	AssignmentExpr	result = - 1
>300	UnaryOp	- 1
>301	PrimaryExpression	1
>302	UnaryOperator	-
>303	Identifier	result
>304	Identifier	result
>305	IdentifierDeclType	int
>317	FunctionDef	readdir (DIR * dir)
>318	ParameterList	DIR * dir
>319	Parameter	 
>320	Identifier	dir
>321	ParameterType	DIR *
>322	ReturnType	struct dirent *
>323	CompoundStatement	 
>324	ReturnStatement	 
>325	Identifier	result
>326	IfStatement	if ( dir && dir -> handle != - 1 )
>327	ElseStatement	else
>328	CompoundStatement	 
>329	ExpressionStatement	 
>330	AssignmentExpr	errno = EBADF
>331	Identifier	EBADF
>332	Identifier	errno
>333	CompoundStatement	 
>334	IfStatement	if ( ! dir -> result . d_name || _findnext ( dir -> handle , & dir -> info ) != - 1 )
>335	CompoundStatement	 
>336	ExpressionStatement	 
>337	AssignmentExpr	result -> d_name = dir -> info . name
>338	MemberAccess	dir -> info . name
>339	Identifier	name
>340	PtrMemberAccess	dir -> info
>341	Identifier	info
>342	Identifier	dir
>343	PtrMemberAccess	result -> d_name
>344	Identifier	d_name
>345	Identifier	result
>346	ExpressionStatement	 
>347	AssignmentExpr	result = & dir -> result
>348	UnaryOp	& dir -> result
>349	PtrMemberAccess	dir -> result
>350	Identifier	result
>351	Identifier	dir
>352	UnaryOperator	&
>353	Identifier	result
>354	Condition	 
>355	OrExpression	! dir -> result . d_name || _findnext ( dir -> handle , & dir -> info ) != - 1
>356	EqualityExpression	_findnext ( dir -> handle , & dir -> info ) != - 1
>357	UnaryOp	- 1
>358	PrimaryExpression	1
>359	UnaryOperator	-
>360	CallExpression	_findnext ( dir -> handle , & dir -> info )
>361	ArgumentList	dir -> handle
>362	Argument	& dir -> info
>363	UnaryOp	& dir -> info
>364	PtrMemberAccess	dir -> info
>365	Identifier	info
>366	Identifier	dir
>367	UnaryOperator	&
>368	Argument	dir -> handle
>369	PtrMemberAccess	dir -> handle
>370	Identifier	handle
>371	Identifier	dir
>372	Callee	_findnext
>373	Identifier	_findnext
>374	UnaryOp	! dir -> result . d_name
>375	MemberAccess	dir -> result . d_name
>376	Identifier	d_name
>377	PtrMemberAccess	dir -> result
>378	Identifier	result
>379	Identifier	dir
>380	UnaryOperator	!
>381	Condition	 
>382	AndExpression	dir && dir -> handle != - 1
>383	EqualityExpression	dir -> handle != - 1
>384	UnaryOp	- 1
>385	PrimaryExpression	1
>386	UnaryOperator	-
>387	PtrMemberAccess	dir -> handle
>388	Identifier	handle
>389	Identifier	dir
>390	Identifier	dir
>391	IdentifierDeclStatement	 
>392	IdentifierDecl	* result = 0
>393	AssignmentExpr	* result = 0
>394	PrimaryExpression	0
>395	Identifier	result
>396	Identifier	result
>397	IdentifierDeclType	struct dirent *
>417	FunctionDef	rewinddir (DIR * dir)
>418	ParameterList	DIR * dir
>419	Parameter	 
>420	Identifier	dir
>421	ParameterType	DIR *
>422	ReturnType	void
>423	CompoundStatement	 
>424	IfStatement	if ( dir && dir -> handle != - 1 )
>425	ElseStatement	else
>426	CompoundStatement	 
>427	ExpressionStatement	 
>428	AssignmentExpr	errno = EBADF
>429	Identifier	EBADF
>430	Identifier	errno
>431	CompoundStatement	 
>432	ExpressionStatement	 
>433	AssignmentExpr	dir -> result . d_name = 0
>434	PrimaryExpression	0
>435	MemberAccess	dir -> result . d_name
>436	Identifier	d_name
>437	PtrMemberAccess	dir -> result
>438	Identifier	result
>439	Identifier	dir
>440	ExpressionStatement	 
>441	AssignmentExpr	dir -> handle = ( long ) _findfirst ( dir -> name , & dir -> info )
>442	CastExpression	( long ) _findfirst ( dir -> name , & dir -> info )
>443	CallExpression	_findfirst ( dir -> name , & dir -> info )
>444	ArgumentList	dir -> name
>445	Argument	& dir -> info
>446	UnaryOp	& dir -> info
>447	PtrMemberAccess	dir -> info
>448	Identifier	info
>449	Identifier	dir
>450	UnaryOperator	&
>451	Argument	dir -> name
>452	PtrMemberAccess	dir -> name
>453	Identifier	name
>454	Identifier	dir
>455	Callee	_findfirst
>456	Identifier	_findfirst
>457	CastTarget	long
>458	PtrMemberAccess	dir -> handle
>459	Identifier	handle
>460	Identifier	dir
>461	ExpressionStatement	 
>462	CallExpression	_findclose ( dir -> handle )
>463	ArgumentList	dir -> handle
>464	Argument	dir -> handle
>465	PtrMemberAccess	dir -> handle
>466	Identifier	handle
>467	Identifier	dir
>468	Callee	_findclose
>469	Identifier	_findclose
>470	Condition	 
>471	AndExpression	dir && dir -> handle != - 1
>472	EqualityExpression	dir -> handle != - 1
>473	UnaryOp	- 1
>474	PrimaryExpression	1
>475	UnaryOperator	-
>476	PtrMemberAccess	dir -> handle
>477	Identifier	handle
>478	Identifier	dir
>479	Identifier	dir
<12=18,17,13
<13=14
<14=16,15
<18=204,21,19
<19=20
<21=198,28,22
<22=23
<23=24
<24=25
<25=27,26
<28=186,164,29
<29=123,47,30
<30=31
<31=40,36,32
<32=33
<33=35,34
<36=37
<37=39,38
<40=41
<41=45,42
<42=43
<43=44
<45=46
<47=105,48
<48=80,71,49
<49=50
<50=62,55,51
<51=52
<52=54,53
<55=56
<56=60,57
<57=58
<58=59
<60=61
<62=63
<63=69,64
<64=65
<65=66
<66=68,67
<69=70
<71=72
<72=73
<73=75,74
<75=77,76
<77=79,78
<80=81
<81=85,82
<82=84,83
<85=102,86
<86=101,87
<87=99,88
<88=95,89
<89=90
<90=94,91
<91=93,92
<95=96
<96=98,97
<99=100
<102=104,103
<105=106
<106=121,107
<107=110,108
<108=109
<110=111
<111=119,112
<112=115,113
<113=114
<115=116
<116=118,117
<119=120
<121=122
<123=124
<124=148,125
<125=127,126
<127=145,128
<128=144,129
<129=142,130
<130=131
<131=132
<132=141,133
<133=135,134
<135=139,136
<136=137
<137=138
<139=140
<142=143
<145=147,146
<148=150,149
<150=163,151
<151=162,152
<152=160,153
<153=154
<154=155
<155=159,156
<156=158,157
<160=161
<164=165
<165=185,184,166
<166=183,167
<167=170,169,168
<170=171
<171=181,172
<172=179,173
<173=174
<174=178,175
<175=177,176
<179=180
<181=182
<186=187
<187=197,196,188
<188=195,189
<189=193,190
<190=191
<191=192
<193=194
<198=199
<199=203,200
<200=202,201
<204=205
<205=210,209,206
<206=208,207
<235=241,240,236
<236=237
<237=239,238
<241=297,256,244,242
<242=243
<244=250,245
<245=246
<246=247
<247=249,248
<250=251
<251=255,252
<252=254,253
<256=295,257
<257=274,265,258
<258=259
<259=263,260
<260=261
<261=262
<263=264
<265=266
<266=272,267
<267=268
<268=269
<269=271,270
<272=273
<274=287,275
<275=276
<276=277
<277=286,278
<278=284,279
<279=280
<280=281
<281=283,282
<284=285
<287=288
<288=292,289
<289=291,290
<292=294,293
<295=296
<297=298
<298=305,304,299
<299=303,300
<300=302,301
<317=323,322,318
<318=319
<319=321,320
<323=391,326,324
<324=325
<326=381,333,327
<327=328
<328=329
<329=330
<330=332,331
<333=334
<334=354,335
<335=346,336
<336=337
<337=343,338
<338=340,339
<340=342,341
<343=345,344
<346=347
<347=353,348
<348=352,349
<349=351,350
<354=355
<355=374,356
<356=360,357
<357=359,358
<360=372,361
<361=368,362
<362=363
<363=367,364
<364=366,365
<368=369
<369=371,370
<372=373
<374=380,375
<375=377,376
<377=379,378
<381=382
<382=390,383
<383=387,384
<384=386,385
<387=389,388
<391=392
<392=397,396,393
<393=395,394
<417=423,422,418
<418=419
<419=421,420
<423=424
<424=470,431,425
<425=426
<426=427
<427=428
<428=430,429
<431=461,440,432
<432=433
<433=435,434
<435=437,436
<437=439,438
<440=441
<441=458,442
<442=457,443
<443=455,444
<444=451,445
<445=446
<446=450,447
<447=449,448
<451=452
<452=454,453
<455=456
<458=460,459
<461=462
<462=468,463
<463=464
<464=465
<465=467,466
<468=469
<470=471
<471=479,472
<472=476,473
<473=475,474
<476=478,477
