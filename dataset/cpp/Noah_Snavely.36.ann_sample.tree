>17	FunctionDef	readPt (istream & in , ANNpoint p)
>18	ParameterList	istream & in , ANNpoint p
>19	Parameter	 
>20	Identifier	p
>21	ParameterType	ANNpoint
>22	Parameter	 
>23	Identifier	in
>24	ParameterType	istream &
>25	ReturnType	bool
>26	CompoundStatement	 
>27	ReturnStatement	 
>28	Identifier	true
>29	ForStatement	for ( int i = 0 ; i < dim ; i ++ )
>30	CompoundStatement	 
>31	IfStatement	if ( ! ( in >> p [ i ] ) )
>32	ReturnStatement	 
>33	Identifier	false
>34	Condition	 
>35	UnaryOp	! ( in >> p [ i ] )
>36	ShiftExpression	in >> p [ i ]
>37	ArrayIndexing	p [ i ]
>38	Identifier	i
>39	Identifier	p
>40	Identifier	in
>41	UnaryOperator	!
>42	IncDecOp	 
>43	IncDec	++
>44	Identifier	i
>45	Condition	 
>46	RelationalExpression	i < dim
>47	Identifier	dim
>48	Identifier	i
>49	ForInit	 
>50	IdentifierDeclStatement	int i = 0 ;
>51	IdentifierDecl	i = 0
>52	AssignmentExpr	i = 0
>53	PrimaryExpression	0
>54	Identifier	i
>55	Identifier	i
>56	IdentifierDeclType	int
>68	FunctionDef	printPt (ostream & out , ANNpoint p)
>69	ParameterList	ostream & out , ANNpoint p
>70	Parameter	 
>71	Identifier	p
>72	ParameterType	ANNpoint
>73	Parameter	 
>74	Identifier	out
>75	ParameterType	ostream &
>76	ReturnType	void
>77	CompoundStatement	 
>78	ExpressionStatement	 
>79	ShiftExpression	out << \")\n\"
>80	PrimaryExpression	\")\n\"
>81	Identifier	out
>82	ForStatement	for ( int i = 1 ; i < dim ; i ++ )
>83	CompoundStatement	 
>84	ExpressionStatement	 
>85	ShiftExpression	out << \", \" << p [ i ]
>86	ShiftExpression	\", \" << p [ i ]
>87	ArrayIndexing	p [ i ]
>88	Identifier	i
>89	Identifier	p
>90	PrimaryExpression	\", \"
>91	Identifier	out
>92	IncDecOp	 
>93	IncDec	++
>94	Identifier	i
>95	Condition	 
>96	RelationalExpression	i < dim
>97	Identifier	dim
>98	Identifier	i
>99	ForInit	 
>100	IdentifierDeclStatement	int i = 1 ;
>101	IdentifierDecl	i = 1
>102	AssignmentExpr	i = 1
>103	PrimaryExpression	1
>104	Identifier	i
>105	Identifier	i
>106	IdentifierDeclType	int
>107	ExpressionStatement	 
>108	ShiftExpression	out << \"(\" << p [ 0 ]
>109	ShiftExpression	\"(\" << p [ 0 ]
>110	ArrayIndexing	p [ 0 ]
>111	PrimaryExpression	0
>112	Identifier	p
>113	PrimaryExpression	\"(\"
>114	Identifier	out
>122	FunctionDef	main (int argc , char * * argv)
>123	ParameterList	int argc , char * * argv
>124	Parameter	 
>125	Identifier	argv
>126	ParameterType	char * *
>127	Parameter	 
>128	Identifier	argc
>129	ParameterType	int
>130	ReturnType	int
>131	CompoundStatement	 
>132	ReturnStatement	 
>133	Identifier	EXIT_SUCCESS
>134	ExpressionStatement	 
>135	CallExpression	annClose ( )
>136	ArgumentList	 
>137	Callee	annClose
>138	Identifier	annClose
>139	ExpressionStatement	 
>140	Identifier	kdTree
>141	Statement	 
>142	ExpressionStatement	 
>143	Identifier	dists
>144	Statement	 
>145	Statement	 
>146	Statement	 
>147	ExpressionStatement	 
>148	Identifier	nnIdx
>149	Statement	 
>150	Statement	 
>151	Statement	 
>152	WhileStatement	while ( readPt ( * queryIn , queryPt ) )
>153	CompoundStatement	 
>154	ForStatement	for ( int i = 0 ; i < k ; i ++ )
>155	CompoundStatement	 
>156	ExpressionStatement	 
>157	ShiftExpression	cout << \"\t\" << i << \"\t\" << nnIdx [ i ] << \"\t\" << dists [ i ] << \"\n\"
>158	ShiftExpression	\"\t\" << i << \"\t\" << nnIdx [ i ] << \"\t\" << dists [ i ] << \"\n\"
>159	ShiftExpression	i << \"\t\" << nnIdx [ i ] << \"\t\" << dists [ i ] << \"\n\"
>160	ShiftExpression	\"\t\" << nnIdx [ i ] << \"\t\" << dists [ i ] << \"\n\"
>161	ShiftExpression	nnIdx [ i ] << \"\t\" << dists [ i ] << \"\n\"
>162	ShiftExpression	\"\t\" << dists [ i ] << \"\n\"
>163	ShiftExpression	dists [ i ] << \"\n\"
>164	PrimaryExpression	\"\n\"
>165	ArrayIndexing	dists [ i ]
>166	Identifier	i
>167	Identifier	dists
>168	PrimaryExpression	\"\t\"
>169	ArrayIndexing	nnIdx [ i ]
>170	Identifier	i
>171	Identifier	nnIdx
>172	PrimaryExpression	\"\t\"
>173	Identifier	i
>174	PrimaryExpression	\"\t\"
>175	Identifier	cout
>176	ExpressionStatement	 
>177	AssignmentExpr	dists [ i ] = sqrt ( dists [ i ] )
>178	CallExpression	sqrt ( dists [ i ] )
>179	ArgumentList	dists [ i ]
>180	Argument	dists [ i ]
>181	ArrayIndexing	dists [ i ]
>182	Identifier	i
>183	Identifier	dists
>184	Callee	sqrt
>185	Identifier	sqrt
>186	ArrayIndexing	dists [ i ]
>187	Identifier	i
>188	Identifier	dists
>189	IncDecOp	 
>190	IncDec	++
>191	Identifier	i
>192	Condition	 
>193	RelationalExpression	i < k
>194	Identifier	k
>195	Identifier	i
>196	ForInit	 
>197	IdentifierDeclStatement	int i = 0 ;
>198	IdentifierDecl	i = 0
>199	AssignmentExpr	i = 0
>200	PrimaryExpression	0
>201	Identifier	i
>202	Identifier	i
>203	IdentifierDeclType	int
>204	ExpressionStatement	 
>205	ShiftExpression	cout << \"\tNN
>206	PrimaryExpression	\"\tNN
>207	Identifier	cout
>208	ExpressionStatement	 
>209	CallExpression	kdTree -> annkSearch ( queryPt , k , nnIdx , dists , eps )
>210	ArgumentList	queryPt
>211	Argument	eps
>212	Identifier	eps
>213	Argument	dists
>214	Identifier	dists
>215	Argument	nnIdx
>216	Identifier	nnIdx
>217	Argument	k
>218	Identifier	k
>219	Argument	queryPt
>220	Identifier	queryPt
>221	Callee	kdTree -> annkSearch
>222	PtrMemberAccess	kdTree -> annkSearch
>223	Identifier	annkSearch
>224	Identifier	kdTree
>225	ExpressionStatement	 
>226	CallExpression	printPt ( cout , queryPt )
>227	ArgumentList	cout
>228	Argument	queryPt
>229	Identifier	queryPt
>230	Argument	cout
>231	Identifier	cout
>232	Callee	printPt
>233	Identifier	printPt
>234	ExpressionStatement	 
>235	ShiftExpression	cout << \"Query point
>236	PrimaryExpression	\"Query point
>237	Identifier	cout
>238	Condition	 
>239	CallExpression	readPt ( * queryIn , queryPt )
>240	ArgumentList	* queryIn
>241	Argument	queryPt
>242	Identifier	queryPt
>243	Argument	* queryIn
>244	UnaryOp	* queryIn
>245	Identifier	queryIn
>246	UnaryOperator	*
>247	Callee	readPt
>248	Identifier	readPt
>249	ExpressionStatement	 
>250	AssignmentExpr	kdTree = new ANNkd_tree ( dataPts , nPts , dim )
>251	Expression	dataPts , nPts , dim
>252	Expression	nPts , dim
>253	Identifier	dim
>254	Identifier	nPts
>255	Identifier	dataPts
>256	Identifier	kdTree
>257	WhileStatement	while ( nPts < maxPts && readPt ( * dataIn , dataPts [ nPts ] ) )
>258	CompoundStatement	 
>259	ExpressionStatement	 
>260	IncDecOp	nPts ++
>261	IncDec	++
>262	Identifier	nPts
>263	ExpressionStatement	 
>264	CallExpression	printPt ( cout , dataPts [ nPts ] )
>265	ArgumentList	cout
>266	Argument	dataPts [ nPts ]
>267	ArrayIndexing	dataPts [ nPts ]
>268	Identifier	nPts
>269	Identifier	dataPts
>270	Argument	cout
>271	Identifier	cout
>272	Callee	printPt
>273	Identifier	printPt
>274	Condition	 
>275	AndExpression	nPts < maxPts && readPt ( * dataIn , dataPts [ nPts ] )
>276	CallExpression	readPt ( * dataIn , dataPts [ nPts ] )
>277	ArgumentList	* dataIn
>278	Argument	dataPts [ nPts ]
>279	ArrayIndexing	dataPts [ nPts ]
>280	Identifier	nPts
>281	Identifier	dataPts
>282	Argument	* dataIn
>283	UnaryOp	* dataIn
>284	Identifier	dataIn
>285	UnaryOperator	*
>286	Callee	readPt
>287	Identifier	readPt
>288	RelationalExpression	nPts < maxPts
>289	Identifier	maxPts
>290	Identifier	nPts
>291	ExpressionStatement	 
>292	ShiftExpression	cout << \"Data Points
>293	PrimaryExpression	\"Data Points
>294	Identifier	cout
>295	ExpressionStatement	 
>296	AssignmentExpr	nPts = 0
>297	PrimaryExpression	0
>298	Identifier	nPts
>299	ExpressionStatement	 
>300	AssignmentExpr	dists = new ANNdist [ k ]
>301	Identifier	k
>302	Identifier	dists
>303	ExpressionStatement	 
>304	AssignmentExpr	nnIdx = new ANNidx [ k ]
>305	Identifier	k
>306	Identifier	nnIdx
>307	ExpressionStatement	 
>308	AssignmentExpr	dataPts = annAllocPts ( maxPts , dim )
>309	CallExpression	annAllocPts ( maxPts , dim )
>310	ArgumentList	maxPts
>311	Argument	dim
>312	Identifier	dim
>313	Argument	maxPts
>314	Identifier	maxPts
>315	Callee	annAllocPts
>316	Identifier	annAllocPts
>317	Identifier	dataPts
>318	ExpressionStatement	 
>319	AssignmentExpr	queryPt = annAllocPt ( dim )
>320	CallExpression	annAllocPt ( dim )
>321	ArgumentList	dim
>322	Argument	dim
>323	Identifier	dim
>324	Callee	annAllocPt
>325	Identifier	annAllocPt
>326	Identifier	queryPt
>327	ExpressionStatement	 
>328	CallExpression	getArgs ( argc , argv )
>329	ArgumentList	argc
>330	Argument	argv
>331	Identifier	argv
>332	Argument	argc
>333	Identifier	argc
>334	Callee	getArgs
>335	Identifier	getArgs
>336	IdentifierDeclStatement	 
>337	IdentifierDecl	* kdTree
>338	Identifier	kdTree
>339	IdentifierDeclType	ANNkd_tree *
>340	IdentifierDeclStatement	 
>341	IdentifierDecl	dists
>342	Identifier	dists
>343	IdentifierDeclType	ANNdistArray
>344	IdentifierDeclStatement	 
>345	IdentifierDecl	nnIdx
>346	Identifier	nnIdx
>347	IdentifierDeclType	ANNidxArray
>348	IdentifierDeclStatement	 
>349	IdentifierDecl	queryPt
>350	Identifier	queryPt
>351	IdentifierDeclType	ANNpoint
>352	IdentifierDeclStatement	 
>353	IdentifierDecl	dataPts
>354	Identifier	dataPts
>355	IdentifierDeclType	ANNpointArray
>356	IdentifierDeclStatement	 
>357	IdentifierDecl	nPts
>358	Identifier	nPts
>359	IdentifierDeclType	int
>390	FunctionDef	getArgs (int argc , char * * argv)
>391	ParameterList	int argc , char * * argv
>392	Parameter	 
>393	Identifier	argv
>394	ParameterType	char * *
>395	Parameter	 
>396	Identifier	argc
>397	ParameterType	int
>398	ReturnType	void
>399	CompoundStatement	 
>400	IfStatement	if ( dataIn == NULL || queryIn == NULL )
>401	CompoundStatement	 
>402	ExpressionStatement	 
>403	CallExpression	exit ( 1 )
>404	ArgumentList	1
>405	Argument	1
>406	PrimaryExpression	1
>407	Callee	exit
>408	Identifier	exit
>409	ExpressionStatement	 
>410	ShiftExpression	cerr << \"-df and -qf options must be specified\n\"
>411	PrimaryExpression	\"-df and -qf options must be specified\n\"
>412	Identifier	cerr
>413	Condition	 
>414	OrExpression	dataIn == NULL || queryIn == NULL
>415	EqualityExpression	queryIn == NULL
>416	Identifier	NULL
>417	Identifier	queryIn
>418	EqualityExpression	dataIn == NULL
>419	Identifier	NULL
>420	Identifier	dataIn
>421	WhileStatement	while ( i < argc )
>422	CompoundStatement	 
>423	ExpressionStatement	 
>424	IncDecOp	i ++
>425	IncDec	++
>426	Identifier	i
>427	IfStatement	if ( ! strcmp ( argv [ i ] , \"-d\" ) )
>428	ElseStatement	else
>429	IfStatement	if ( ! strcmp ( argv [ i ] , \"-max\" ) )
>430	ElseStatement	else
>431	IfStatement	if ( ! strcmp ( argv [ i ] , \"-nn\" ) )
>432	ElseStatement	else
>433	IfStatement	if ( ! strcmp ( argv [ i ] , \"-e\" ) )
>434	ElseStatement	else
>435	IfStatement	if ( ! strcmp ( argv [ i ] , \"-df\" ) )
>436	ElseStatement	else
>437	IfStatement	if ( ! strcmp ( argv [ i ] , \"-qf\" ) )
>438	ElseStatement	else
>439	CompoundStatement	 
>440	ExpressionStatement	 
>441	CallExpression	exit ( 1 )
>442	ArgumentList	1
>443	Argument	1
>444	PrimaryExpression	1
>445	Callee	exit
>446	Identifier	exit
>447	ExpressionStatement	 
>448	ShiftExpression	cerr << \"Unrecognized option.\n\"
>449	PrimaryExpression	\"Unrecognized option.\n\"
>450	Identifier	cerr
>451	CompoundStatement	 
>452	ExpressionStatement	 
>453	AssignmentExpr	queryIn = & queryStream
>454	UnaryOp	& queryStream
>455	Identifier	queryStream
>456	UnaryOperator	&
>457	Identifier	queryIn
>458	IfStatement	if ( ! queryStream )
>459	CompoundStatement	 
>460	ExpressionStatement	 
>461	CallExpression	exit ( 1 )
>462	ArgumentList	1
>463	Argument	1
>464	PrimaryExpression	1
>465	Callee	exit
>466	Identifier	exit
>467	ExpressionStatement	 
>468	ShiftExpression	cerr << \"Cannot open query file\n\"
>469	PrimaryExpression	\"Cannot open query file\n\"
>470	Identifier	cerr
>471	Condition	 
>472	UnaryOp	! queryStream
>473	Identifier	queryStream
>474	UnaryOperator	!
>475	ExpressionStatement	 
>476	CallExpression	queryStream . open ( argv [ ++ i ] , ios 
>477	ArgumentList	argv [ ++ i ]
>478	Argument	ios 
>479	Identifier	ios 
>480	Argument	argv [ ++ i ]
>481	ArrayIndexing	argv [ ++ i ]
>482	UnaryExpression	++ i
>483	Identifier	i
>484	IncDec	++
>485	Identifier	argv
>486	Callee	queryStream . open
>487	MemberAccess	queryStream . open
>488	Identifier	open
>489	Identifier	queryStream
>490	Condition	 
>491	UnaryOp	! strcmp ( argv [ i ] , \"-qf\" )
>492	CallExpression	strcmp ( argv [ i ] , \"-qf\" )
>493	ArgumentList	argv [ i ]
>494	Argument	\"-qf\"
>495	PrimaryExpression	\"-qf\"
>496	Argument	argv [ i ]
>497	ArrayIndexing	argv [ i ]
>498	Identifier	i
>499	Identifier	argv
>500	Callee	strcmp
>501	Identifier	strcmp
>502	UnaryOperator	!
>503	CompoundStatement	 
>504	ExpressionStatement	 
>505	AssignmentExpr	dataIn = & dataStream
>506	UnaryOp	& dataStream
>507	Identifier	dataStream
>508	UnaryOperator	&
>509	Identifier	dataIn
>510	IfStatement	if ( ! dataStream )
>511	CompoundStatement	 
>512	ExpressionStatement	 
>513	CallExpression	exit ( 1 )
>514	ArgumentList	1
>515	Argument	1
>516	PrimaryExpression	1
>517	Callee	exit
>518	Identifier	exit
>519	ExpressionStatement	 
>520	ShiftExpression	cerr << \"Cannot open data file\n\"
>521	PrimaryExpression	\"Cannot open data file\n\"
>522	Identifier	cerr
>523	Condition	 
>524	UnaryOp	! dataStream
>525	Identifier	dataStream
>526	UnaryOperator	!
>527	ExpressionStatement	 
>528	CallExpression	dataStream . open ( argv [ ++ i ] , ios 
>529	ArgumentList	argv [ ++ i ]
>530	Argument	ios 
>531	Identifier	ios 
>532	Argument	argv [ ++ i ]
>533	ArrayIndexing	argv [ ++ i ]
>534	UnaryExpression	++ i
>535	Identifier	i
>536	IncDec	++
>537	Identifier	argv
>538	Callee	dataStream . open
>539	MemberAccess	dataStream . open
>540	Identifier	open
>541	Identifier	dataStream
>542	Condition	 
>543	UnaryOp	! strcmp ( argv [ i ] , \"-df\" )
>544	CallExpression	strcmp ( argv [ i ] , \"-df\" )
>545	ArgumentList	argv [ i ]
>546	Argument	\"-df\"
>547	PrimaryExpression	\"-df\"
>548	Argument	argv [ i ]
>549	ArrayIndexing	argv [ i ]
>550	Identifier	i
>551	Identifier	argv
>552	Callee	strcmp
>553	Identifier	strcmp
>554	UnaryOperator	!
>555	CompoundStatement	 
>556	ExpressionStatement	 
>557	CallExpression	sscanf ( argv [ ++ i ] , \"%lf\" , & eps )
>558	ArgumentList	argv [ ++ i ]
>559	Argument	& eps
>560	UnaryOp	& eps
>561	Identifier	eps
>562	UnaryOperator	&
>563	Argument	\"%lf\"
>564	PrimaryExpression	\"%lf\"
>565	Argument	argv [ ++ i ]
>566	ArrayIndexing	argv [ ++ i ]
>567	UnaryExpression	++ i
>568	Identifier	i
>569	IncDec	++
>570	Identifier	argv
>571	Callee	sscanf
>572	Identifier	sscanf
>573	Condition	 
>574	UnaryOp	! strcmp ( argv [ i ] , \"-e\" )
>575	CallExpression	strcmp ( argv [ i ] , \"-e\" )
>576	ArgumentList	argv [ i ]
>577	Argument	\"-e\"
>578	PrimaryExpression	\"-e\"
>579	Argument	argv [ i ]
>580	ArrayIndexing	argv [ i ]
>581	Identifier	i
>582	Identifier	argv
>583	Callee	strcmp
>584	Identifier	strcmp
>585	UnaryOperator	!
>586	CompoundStatement	 
>587	ExpressionStatement	 
>588	AssignmentExpr	k = atoi ( argv [ ++ i ] )
>589	CallExpression	atoi ( argv [ ++ i ] )
>590	ArgumentList	argv [ ++ i ]
>591	Argument	argv [ ++ i ]
>592	ArrayIndexing	argv [ ++ i ]
>593	UnaryExpression	++ i
>594	Identifier	i
>595	IncDec	++
>596	Identifier	argv
>597	Callee	atoi
>598	Identifier	atoi
>599	Identifier	k
>600	Condition	 
>601	UnaryOp	! strcmp ( argv [ i ] , \"-nn\" )
>602	CallExpression	strcmp ( argv [ i ] , \"-nn\" )
>603	ArgumentList	argv [ i ]
>604	Argument	\"-nn\"
>605	PrimaryExpression	\"-nn\"
>606	Argument	argv [ i ]
>607	ArrayIndexing	argv [ i ]
>608	Identifier	i
>609	Identifier	argv
>610	Callee	strcmp
>611	Identifier	strcmp
>612	UnaryOperator	!
>613	CompoundStatement	 
>614	ExpressionStatement	 
>615	AssignmentExpr	maxPts = atoi ( argv [ ++ i ] )
>616	CallExpression	atoi ( argv [ ++ i ] )
>617	ArgumentList	argv [ ++ i ]
>618	Argument	argv [ ++ i ]
>619	ArrayIndexing	argv [ ++ i ]
>620	UnaryExpression	++ i
>621	Identifier	i
>622	IncDec	++
>623	Identifier	argv
>624	Callee	atoi
>625	Identifier	atoi
>626	Identifier	maxPts
>627	Condition	 
>628	UnaryOp	! strcmp ( argv [ i ] , \"-max\" )
>629	CallExpression	strcmp ( argv [ i ] , \"-max\" )
>630	ArgumentList	argv [ i ]
>631	Argument	\"-max\"
>632	PrimaryExpression	\"-max\"
>633	Argument	argv [ i ]
>634	ArrayIndexing	argv [ i ]
>635	Identifier	i
>636	Identifier	argv
>637	Callee	strcmp
>638	Identifier	strcmp
>639	UnaryOperator	!
>640	CompoundStatement	 
>641	ExpressionStatement	 
>642	AssignmentExpr	dim = atoi ( argv [ ++ i ] )
>643	CallExpression	atoi ( argv [ ++ i ] )
>644	ArgumentList	argv [ ++ i ]
>645	Argument	argv [ ++ i ]
>646	ArrayIndexing	argv [ ++ i ]
>647	UnaryExpression	++ i
>648	Identifier	i
>649	IncDec	++
>650	Identifier	argv
>651	Callee	atoi
>652	Identifier	atoi
>653	Identifier	dim
>654	Condition	 
>655	UnaryOp	! strcmp ( argv [ i ] , \"-d\" )
>656	CallExpression	strcmp ( argv [ i ] , \"-d\" )
>657	ArgumentList	argv [ i ]
>658	Argument	\"-d\"
>659	PrimaryExpression	\"-d\"
>660	Argument	argv [ i ]
>661	ArrayIndexing	argv [ i ]
>662	Identifier	i
>663	Identifier	argv
>664	Callee	strcmp
>665	Identifier	strcmp
>666	UnaryOperator	!
>667	Condition	 
>668	RelationalExpression	i < argc
>669	Identifier	argc
>670	Identifier	i
>671	IdentifierDeclStatement	 
>672	IdentifierDecl	i = 1
>673	AssignmentExpr	i = 1
>674	PrimaryExpression	1
>675	Identifier	i
>676	Identifier	i
>677	IdentifierDeclType	int
>678	IfStatement	if ( argc <= 1 )
>679	CompoundStatement	 
>680	ExpressionStatement	 
>681	CallExpression	exit ( 0 )
>682	ArgumentList	0
>683	Argument	0
>684	PrimaryExpression	0
>685	Callee	exit
>686	Identifier	exit
>687	ExpressionStatement	 
>688	ShiftExpression	\" [-qf query]\n\n\" << \"  where
>689	ShiftExpression	\"  where
>690	ShiftExpression	\"    dim      dimension of the space (default = 2)\n\" << \"    m        maximum number of data points (\
>691	ShiftExpression	\"    m        maximum number of data points (default = 1000)\n\" << \"    k        number of nearest neighbors \
>692	ShiftExpression	\"    k        number of nearest neighbors per query (default 1)\n\" << \"    eps      the error bound (\
>693	ShiftExpression	\"    eps      the error bound (default = 0.0)\n\" << \"    data     name of file containing data points\n\" << \"    \
>694	ShiftExpression	\"    data     name of file containing data points\n\" << \"    query    name of file containing query \
>695	ShiftExpression	\"    query    name of file containing query points\n\n\" << \" Results are sent to the standard output.\n\" << \"\n\" << \" \
>696	ShiftExpression	\" Results are sent to the standard output.\n\" << \"\n\" << \" To run this demo use
>697	ShiftExpression	\"\n\" << \" To run this demo use
>698	ShiftExpression	\" To run this demo use
>699	PrimaryExpression	\"    ann_sample -df data.pts -qf query.pts\n\"
>700	PrimaryExpression	\" To run this demo use
>701	PrimaryExpression	\"\n\"
>702	PrimaryExpression	\" Results are sent to the standard output.\n\"
>703	PrimaryExpression	\"    query    name of file containing query points\n\n\"
>704	PrimaryExpression	\"    data     name of file containing data points\n\"
>705	PrimaryExpression	\"    eps      the error bound (default = 0.0)\n\"
>706	PrimaryExpression	\"    k        number of nearest neighbors per query (default 1)\n\"
>707	PrimaryExpression	\"    m        maximum number of data points (default = 1000)\n\"
>708	PrimaryExpression	\"    dim      dimension of the space (default = 2)\n\"
>709	PrimaryExpression	\"  where
>710	PrimaryExpression	\" [-qf query]\n\n\"
>711	Statement	 
>712	Statement	 
>713	Statement	 
>714	Statement	 
>715	Statement	 
>716	Condition	 
>717	RelationalExpression	argc <= 1
>718	PrimaryExpression	1
>719	Identifier	argc
>720	IdentifierDeclStatement	 
>721	IdentifierDecl	queryStream
>722	Identifier	queryStream
>723	IdentifierDeclType	ifstream
>724	Statement	 
>725	IdentifierDeclStatement	 
>726	IdentifierDecl	dataStream
>727	Identifier	dataStream
>728	IdentifierDeclType	ifstream
>729	Statement	 
<17=26,25,18
<18=22,19
<19=21,20
<22=24,23
<26=29,27
<27=28
<29=49,45,42,30
<30=31
<31=34,32
<32=33
<34=35
<35=41,36
<36=40,37
<37=39,38
<42=44,43
<45=46
<46=48,47
<49=50
<50=51
<51=56,55,52
<52=54,53
<68=77,76,69
<69=73,70
<70=72,71
<73=75,74
<77=107,82,78
<78=79
<79=81,80
<82=99,95,92,83
<83=84
<84=85
<85=91,86
<86=90,87
<87=89,88
<92=94,93
<95=96
<96=98,97
<99=100
<100=101
<101=106,105,102
<102=104,103
<107=108
<108=114,109
<109=113,110
<110=112,111
<122=131,130,123
<123=127,124
<124=126,125
<127=129,128
<131=356,352,348,344,340,336,327,318,307,303,299,295,291,257,249,152,151,150,149,147,146,145,144,142,141,139,134,132
<132=133
<134=135
<135=137,136
<137=138
<139=140
<142=143
<147=148
<152=238,153
<153=234,225,208,204,154
<154=196,192,189,155
<155=176,156
<156=157
<157=175,158
<158=174,159
<159=173,160
<160=172,161
<161=169,162
<162=168,163
<163=165,164
<165=167,166
<169=171,170
<176=177
<177=186,178
<178=184,179
<179=180
<180=181
<181=183,182
<184=185
<186=188,187
<189=191,190
<192=193
<193=195,194
<196=197
<197=198
<198=203,202,199
<199=201,200
<204=205
<205=207,206
<208=209
<209=221,210
<210=219,217,215,213,211
<211=212
<213=214
<215=216
<217=218
<219=220
<221=222
<222=224,223
<225=226
<226=232,227
<227=230,228
<228=229
<230=231
<232=233
<234=235
<235=237,236
<238=239
<239=247,240
<240=243,241
<241=242
<243=244
<244=246,245
<247=248
<249=250
<250=256,251
<251=255,252
<252=254,253
<257=274,258
<258=263,259
<259=260
<260=262,261
<263=264
<264=272,265
<265=270,266
<266=267
<267=269,268
<270=271
<272=273
<274=275
<275=288,276
<276=286,277
<277=282,278
<278=279
<279=281,280
<282=283
<283=285,284
<286=287
<288=290,289
<291=292
<292=294,293
<295=296
<296=298,297
<299=300
<300=302,301
<303=304
<304=306,305
<307=308
<308=317,309
<309=315,310
<310=313,311
<311=312
<313=314
<315=316
<318=319
<319=326,320
<320=324,321
<321=322
<322=323
<324=325
<327=328
<328=334,329
<329=332,330
<330=331
<332=333
<334=335
<336=337
<337=339,338
<340=341
<341=343,342
<344=345
<345=347,346
<348=349
<349=351,350
<352=353
<353=355,354
<356=357
<357=359,358
<390=399,398,391
<391=395,392
<392=394,393
<395=397,396
<399=729,725,724,720,678,671,421,400
<400=413,401
<401=409,402
<402=403
<403=407,404
<404=405
<405=406
<407=408
<409=410
<410=412,411
<413=414
<414=418,415
<415=417,416
<418=420,419
<421=667,422
<422=427,423
<423=424
<424=426,425
<427=654,640,428
<428=429
<429=627,613,430
<430=431
<431=600,586,432
<432=433
<433=573,555,434
<434=435
<435=542,503,436
<436=437
<437=490,451,438
<438=439
<439=447,440
<440=441
<441=445,442
<442=443
<443=444
<445=446
<447=448
<448=450,449
<451=475,458,452
<452=453
<453=457,454
<454=456,455
<458=471,459
<459=467,460
<460=461
<461=465,462
<462=463
<463=464
<465=466
<467=468
<468=470,469
<471=472
<472=474,473
<475=476
<476=486,477
<477=480,478
<478=479
<480=481
<481=485,482
<482=484,483
<486=487
<487=489,488
<490=491
<491=502,492
<492=500,493
<493=496,494
<494=495
<496=497
<497=499,498
<500=501
<503=527,510,504
<504=505
<505=509,506
<506=508,507
<510=523,511
<511=519,512
<512=513
<513=517,514
<514=515
<515=516
<517=518
<519=520
<520=522,521
<523=524
<524=526,525
<527=528
<528=538,529
<529=532,530
<530=531
<532=533
<533=537,534
<534=536,535
<538=539
<539=541,540
<542=543
<543=554,544
<544=552,545
<545=548,546
<546=547
<548=549
<549=551,550
<552=553
<555=556
<556=557
<557=571,558
<558=565,563,559
<559=560
<560=562,561
<563=564
<565=566
<566=570,567
<567=569,568
<571=572
<573=574
<574=585,575
<575=583,576
<576=579,577
<577=578
<579=580
<580=582,581
<583=584
<586=587
<587=588
<588=599,589
<589=597,590
<590=591
<591=592
<592=596,593
<593=595,594
<597=598
<600=601
<601=612,602
<602=610,603
<603=606,604
<604=605
<606=607
<607=609,608
<610=611
<613=614
<614=615
<615=626,616
<616=624,617
<617=618
<618=619
<619=623,620
<620=622,621
<624=625
<627=628
<628=639,629
<629=637,630
<630=633,631
<631=632
<633=634
<634=636,635
<637=638
<640=641
<641=642
<642=653,643
<643=651,644
<644=645
<645=646
<646=650,647
<647=649,648
<651=652
<654=655
<655=666,656
<656=664,657
<657=660,658
<658=659
<660=661
<661=663,662
<664=665
<667=668
<668=670,669
<671=672
<672=677,676,673
<673=675,674
<678=716,679
<679=715,714,713,712,711,687,680
<680=681
<681=685,682
<682=683
<683=684
<685=686
<687=688
<688=710,689
<689=709,690
<690=708,691
<691=707,692
<692=706,693
<693=705,694
<694=704,695
<695=703,696
<696=702,697
<697=701,698
<698=700,699
<716=717
<717=719,718
<720=721
<721=723,722
<725=726
<726=728,727
