>3	FunctionDef	BaseApp 
>4	ParameterList	bool descriptor
>5	Parameter	 
>6	Identifier	descriptor
>7	ParameterType	bool
>8	ReturnType	void
>9	CompoundStatement	 
>10	ExpressionStatement	 
>11	CallExpression	printf ( \"[LoadKeys] Loaded keys in %0.3fs\n\" , ( end - start ) / ( double ) CLOCKS_PER_SEC )
>12	ArgumentList	\"[LoadKeys] Loaded keys in %0.3fs\n\"
>13	Argument	( end - start ) / ( double ) CLOCKS_PER_SEC
>14	MultiplicativeExpression	( end - start ) / ( double ) CLOCKS_PER_SEC
>15	CastExpression	( double ) CLOCKS_PER_SEC
>16	Identifier	CLOCKS_PER_SEC
>17	CastTarget	double
>18	AdditiveExpression	end - start
>19	Identifier	start
>20	Identifier	end
>21	Argument	\"[LoadKeys] Loaded keys in %0.3fs\n\"
>22	PrimaryExpression	\"[LoadKeys] Loaded keys in %0.3fs\n\"
>23	Callee	printf
>24	Identifier	printf
>25	IdentifierDeclStatement	 
>26	IdentifierDecl	end = clock ( )
>27	AssignmentExpr	end = clock ( )
>28	CallExpression	clock ( )
>29	ArgumentList	 
>30	Callee	clock
>31	Identifier	clock
>32	Identifier	end
>33	Identifier	end
>34	IdentifierDeclType	clock_t
>35	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>36	CompoundStatement	 
>37	ExpressionStatement	 
>38	CallExpression	m_image_data [ i ] . LoadKeys ( descriptor )
>39	ArgumentList	descriptor
>40	Argument	descriptor
>41	Identifier	descriptor
>42	Callee	m_image_data [ i ] . LoadKeys
>43	MemberAccess	m_image_data [ i ] . LoadKeys
>44	Identifier	LoadKeys
>45	ArrayIndexing	m_image_data [ i ]
>46	Identifier	i
>47	Identifier	m_image_data
>48	ExpressionStatement	 
>49	CallExpression	fflush ( stdout )
>50	ArgumentList	stdout
>51	Argument	stdout
>52	Identifier	stdout
>53	Callee	fflush
>54	Identifier	fflush
>55	ExpressionStatement	 
>56	CallExpression	printf ( \"[LoadKeys] Loading keys from image %d...\n\" , i )
>57	ArgumentList	\"[LoadKeys] Loading keys from image %d...\n\"
>58	Argument	i
>59	Identifier	i
>60	Argument	\"[LoadKeys] Loading keys from image %d...\n\"
>61	PrimaryExpression	\"[LoadKeys] Loading keys from image %d...\n\"
>62	Callee	printf
>63	Identifier	printf
>64	IncDecOp	 
>65	IncDec	++
>66	Identifier	i
>67	Condition	 
>68	RelationalExpression	i < num_images
>69	Identifier	num_images
>70	Identifier	i
>71	ForInit	 
>72	IdentifierDeclStatement	int i = 0 ;
>73	IdentifierDecl	i = 0
>74	AssignmentExpr	i = 0
>75	PrimaryExpression	0
>76	Identifier	i
>77	Identifier	i
>78	IdentifierDeclType	int
>79	IdentifierDeclStatement	 
>80	IdentifierDecl	num_images = GetNumImages ( )
>81	AssignmentExpr	num_images = GetNumImages ( )
>82	CallExpression	GetNumImages ( )
>83	ArgumentList	 
>84	Callee	GetNumImages
>85	Identifier	GetNumImages
>86	Identifier	num_images
>87	Identifier	num_images
>88	IdentifierDeclType	int
>89	IdentifierDeclStatement	 
>90	IdentifierDecl	start = clock ( )
>91	AssignmentExpr	start = clock ( )
>92	CallExpression	clock ( )
>93	ArgumentList	 
>94	Callee	clock
>95	Identifier	clock
>96	Identifier	start
>97	Identifier	start
>98	IdentifierDeclType	clock_t
>99	ExpressionStatement	 
>100	CallExpression	printf ( \"[LoadKeys] Loading keys...\n\" )
>101	ArgumentList	\"[LoadKeys] Loading keys...\n\"
>102	Argument	\"[LoadKeys] Loading keys...\n\"
>103	PrimaryExpression	\"[LoadKeys] Loading keys...\n\"
>104	Callee	printf
>105	Identifier	printf
>121	FunctionDef	BaseApp 
>122	ParameterList	int i , int j
>123	Parameter	 
>124	Identifier	j
>125	ParameterType	int
>126	Parameter	 
>127	Identifier	i
>128	ParameterType	int
>129	ReturnType	void
>130	CompoundStatement	 
>131	IfStatement	if ( FileExists ( buf ) )
>132	ElseStatement	else
>133	CompoundStatement	 
>134	CompoundStatement	 
>135	ExpressionStatement	 
>136	CallExpression	fclose ( f )
>137	ArgumentList	f
>138	Argument	f
>139	Identifier	f
>140	Callee	fclose
>141	Identifier	fclose
>142	ExpressionStatement	 
>143	AssignmentExpr	m_matches . GetMatchList ( idx ) = matches
>144	Identifier	matches
>145	CallExpression	m_matches . GetMatchList ( idx )
>146	ArgumentList	idx
>147	Argument	idx
>148	Identifier	idx
>149	Callee	m_matches . GetMatchList
>150	MemberAccess	m_matches . GetMatchList
>151	Identifier	GetMatchList
>152	Identifier	m_matches
>153	IdentifierDeclStatement	 
>154	IdentifierDecl	idx = GetMatchIndex ( i , j )
>155	AssignmentExpr	idx = GetMatchIndex ( i , j )
>156	CallExpression	GetMatchIndex ( i , j )
>157	ArgumentList	i
>158	Argument	j
>159	Identifier	j
>160	Argument	i
>161	Identifier	i
>162	Callee	GetMatchIndex
>163	Identifier	GetMatchIndex
>164	Identifier	idx
>165	Identifier	idx
>166	IdentifierDeclType	MatchIndex
>167	ForStatement	for ( int k = 0 ; k < num_matches ; k ++ )
>168	CompoundStatement	 
>169	ExpressionStatement	 
>170	CallExpression	matches . push_back ( m )
>171	ArgumentList	m
>172	Argument	m
>173	Identifier	m
>174	Callee	matches . push_back
>175	MemberAccess	matches . push_back
>176	Identifier	push_back
>177	Identifier	matches
>178	ExpressionStatement	 
>179	AssignmentExpr	m . m_idx2 = idx2
>180	Identifier	idx2
>181	MemberAccess	m . m_idx2
>182	Identifier	m_idx2
>183	Identifier	m
>184	ExpressionStatement	 
>185	AssignmentExpr	m . m_idx1 = idx1
>186	Identifier	idx1
>187	MemberAccess	m . m_idx1
>188	Identifier	m_idx1
>189	Identifier	m
>190	IdentifierDeclStatement	 
>191	IdentifierDecl	m
>192	Identifier	m
>193	IdentifierDeclType	KeypointMatch
>194	IfStatement	if ( idx1 > KEY_LIMIT || idx2 > KEY_LIMIT )
>195	ContinueStatement	 
>196	Condition	 
>197	OrExpression	idx1 > KEY_LIMIT || idx2 > KEY_LIMIT
>198	RelationalExpression	idx2 > KEY_LIMIT
>199	Identifier	KEY_LIMIT
>200	Identifier	idx2
>201	RelationalExpression	idx1 > KEY_LIMIT
>202	Identifier	KEY_LIMIT
>203	Identifier	idx1
>204	ExpressionStatement	 
>205	CallExpression	fscanf ( f , \"%d %d\" , & idx1 , & idx2 )
>206	ArgumentList	f
>207	Argument	& idx2
>208	UnaryOp	& idx2
>209	Identifier	idx2
>210	UnaryOperator	&
>211	Argument	& idx1
>212	UnaryOp	& idx1
>213	Identifier	idx1
>214	UnaryOperator	&
>215	Argument	\"%d %d\"
>216	PrimaryExpression	\"%d %d\"
>217	Argument	f
>218	Identifier	f
>219	Callee	fscanf
>220	Identifier	fscanf
>221	IdentifierDeclStatement	 
>222	IdentifierDecl	idx2
>223	Identifier	idx2
>224	IdentifierDeclType	int
>225	IdentifierDecl	idx1
>226	Identifier	idx1
>227	IdentifierDeclType	int
>228	IncDecOp	 
>229	IncDec	++
>230	Identifier	k
>231	Condition	 
>232	RelationalExpression	k < num_matches
>233	Identifier	num_matches
>234	Identifier	k
>235	ForInit	 
>236	IdentifierDeclStatement	int k = 0 ;
>237	IdentifierDecl	k = 0
>238	AssignmentExpr	k = 0
>239	PrimaryExpression	0
>240	Identifier	k
>241	Identifier	k
>242	IdentifierDeclType	int
>243	IdentifierDeclStatement	 
>244	IdentifierDecl	matches
>245	Identifier	matches
>246	IdentifierDeclType	std 
>247	ExpressionStatement	 
>248	CallExpression	SetMatch ( i , j )
>249	ArgumentList	i
>250	Argument	j
>251	Identifier	j
>252	Argument	i
>253	Identifier	i
>254	Callee	SetMatch
>255	Identifier	SetMatch
>256	IfStatement	if ( num_matches < MIN_MATCHES )
>257	CompoundStatement	 
>258	ReturnStatement	 
>259	ExpressionStatement	 
>260	CallExpression	fclose ( f )
>261	ArgumentList	f
>262	Argument	f
>263	Identifier	f
>264	Callee	fclose
>265	Identifier	fclose
>266	Condition	 
>267	RelationalExpression	num_matches < MIN_MATCHES
>268	Identifier	MIN_MATCHES
>269	Identifier	num_matches
>270	ExpressionStatement	 
>271	CallExpression	fscanf ( f , \"%d\" , & num_matches )
>272	ArgumentList	f
>273	Argument	& num_matches
>274	UnaryOp	& num_matches
>275	Identifier	num_matches
>276	UnaryOperator	&
>277	Argument	\"%d\"
>278	PrimaryExpression	\"%d\"
>279	Argument	f
>280	Identifier	f
>281	Callee	fscanf
>282	Identifier	fscanf
>283	IdentifierDeclStatement	 
>284	IdentifierDecl	num_matches
>285	Identifier	num_matches
>286	IdentifierDeclType	int
>287	IdentifierDeclStatement	 
>288	IdentifierDecl	* f = fopen ( buf , \"r\" )
>289	AssignmentExpr	* f = fopen ( buf , \"r\" )
>290	CallExpression	fopen ( buf , \"r\" )
>291	ArgumentList	buf
>292	Argument	\"r\"
>293	PrimaryExpression	\"r\"
>294	Argument	buf
>295	Identifier	buf
>296	Callee	fopen
>297	Identifier	fopen
>298	Identifier	f
>299	Identifier	f
>300	IdentifierDeclType	FILE *
>301	Condition	 
>302	CallExpression	FileExists ( buf )
>303	ArgumentList	buf
>304	Argument	buf
>305	Identifier	buf
>306	Callee	FileExists
>307	Identifier	FileExists
>308	ExpressionStatement	 
>309	CallExpression	sprintf ( buf , \"%s/match-%03d-%03d.txt\" , m_match_directory , i , j )
>310	ArgumentList	buf
>311	Argument	j
>312	Identifier	j
>313	Argument	i
>314	Identifier	i
>315	Argument	m_match_directory
>316	Identifier	m_match_directory
>317	Argument	\"%s/match-%03d-%03d.txt\"
>318	PrimaryExpression	\"%s/match-%03d-%03d.txt\"
>319	Argument	buf
>320	Identifier	buf
>321	Callee	sprintf
>322	Identifier	sprintf
>323	IdentifierDeclStatement	 
>324	IdentifierDecl	buf [ 256 ]
>325	PrimaryExpression	256
>326	Identifier	buf
>327	IdentifierDeclType	char [ 256 ]
>355	FunctionDef	BaseApp 
>356	ParameterList	const char * filename
>357	Parameter	 
>358	Identifier	filename
>359	ParameterType	const char *
>360	ReturnType	void
>361	CompoundStatement	 
>362	ExpressionStatement	 
>363	CallExpression	fclose ( f )
>364	ArgumentList	f
>365	Argument	f
>366	Identifier	f
>367	Callee	fclose
>368	Identifier	fclose
>369	WhileStatement	while ( fgets ( buf , 256 , f ) )
>370	CompoundStatement	 
>371	ExpressionStatement	 
>372	AssignmentExpr	m_matches . GetMatchList ( idx ) = matches
>373	Identifier	matches
>374	CallExpression	m_matches . GetMatchList ( idx )
>375	ArgumentList	idx
>376	Argument	idx
>377	Identifier	idx
>378	Callee	m_matches . GetMatchList
>379	MemberAccess	m_matches . GetMatchList
>380	Identifier	GetMatchList
>381	Identifier	m_matches
>382	IdentifierDeclStatement	 
>383	IdentifierDecl	idx = GetMatchIndex ( i1 , i2 )
>384	AssignmentExpr	idx = GetMatchIndex ( i1 , i2 )
>385	CallExpression	GetMatchIndex ( i1 , i2 )
>386	ArgumentList	i1
>387	Argument	i2
>388	Identifier	i2
>389	Argument	i1
>390	Identifier	i1
>391	Callee	GetMatchIndex
>392	Identifier	GetMatchIndex
>393	Identifier	idx
>394	Identifier	idx
>395	IdentifierDeclType	MatchIndex
>396	ForStatement	for ( int i = 0 ; i < nMatches ; i ++ )
>397	CompoundStatement	 
>398	ExpressionStatement	 
>399	CallExpression	matches . push_back ( m )
>400	ArgumentList	m
>401	Argument	m
>402	Identifier	m
>403	Callee	matches . push_back
>404	MemberAccess	matches . push_back
>405	Identifier	push_back
>406	Identifier	matches
>407	ExpressionStatement	 
>408	AssignmentExpr	m . m_idx2 = k2
>409	Identifier	k2
>410	MemberAccess	m . m_idx2
>411	Identifier	m_idx2
>412	Identifier	m
>413	ExpressionStatement	 
>414	AssignmentExpr	m . m_idx1 = k1
>415	Identifier	k1
>416	MemberAccess	m . m_idx1
>417	Identifier	m_idx1
>418	Identifier	m
>419	IdentifierDeclStatement	 
>420	IdentifierDecl	m
>421	Identifier	m
>422	IdentifierDeclType	KeypointMatch
>423	IfStatement	if ( k1 > KEY_LIMIT || k2 > KEY_LIMIT )
>424	ContinueStatement	 
>425	Condition	 
>426	OrExpression	k1 > KEY_LIMIT || k2 > KEY_LIMIT
>427	RelationalExpression	k2 > KEY_LIMIT
>428	Identifier	KEY_LIMIT
>429	Identifier	k2
>430	RelationalExpression	k1 > KEY_LIMIT
>431	Identifier	KEY_LIMIT
>432	Identifier	k1
>433	ExpressionStatement	 
>434	CallExpression	fscanf ( f , \"%d %d\n\" , & k1 , & k2 )
>435	ArgumentList	f
>436	Argument	& k2
>437	UnaryOp	& k2
>438	Identifier	k2
>439	UnaryOperator	&
>440	Argument	& k1
>441	UnaryOp	& k1
>442	Identifier	k1
>443	UnaryOperator	&
>444	Argument	\"%d %d\n\"
>445	PrimaryExpression	\"%d %d\n\"
>446	Argument	f
>447	Identifier	f
>448	Callee	fscanf
>449	Identifier	fscanf
>450	IdentifierDeclStatement	 
>451	IdentifierDecl	k2
>452	Identifier	k2
>453	IdentifierDeclType	int
>454	IdentifierDecl	k1
>455	Identifier	k1
>456	IdentifierDeclType	int
>457	IncDecOp	 
>458	IncDec	++
>459	Identifier	i
>460	Condition	 
>461	RelationalExpression	i < nMatches
>462	Identifier	nMatches
>463	Identifier	i
>464	ForInit	 
>465	IdentifierDeclStatement	int i = 0 ;
>466	IdentifierDecl	i = 0
>467	AssignmentExpr	i = 0
>468	PrimaryExpression	0
>469	Identifier	i
>470	Identifier	i
>471	IdentifierDeclType	int
>472	IdentifierDeclStatement	 
>473	IdentifierDecl	matches
>474	Identifier	matches
>475	IdentifierDeclType	std 
>476	ExpressionStatement	 
>477	CallExpression	fscanf ( f , \"%d\n\" , & nMatches )
>478	ArgumentList	f
>479	Argument	& nMatches
>480	UnaryOp	& nMatches
>481	Identifier	nMatches
>482	UnaryOperator	&
>483	Argument	\"%d\n\"
>484	PrimaryExpression	\"%d\n\"
>485	Argument	f
>486	Identifier	f
>487	Callee	fscanf
>488	Identifier	fscanf
>489	IdentifierDeclStatement	 
>490	IdentifierDecl	nMatches
>491	Identifier	nMatches
>492	IdentifierDeclType	int
>493	ExpressionStatement	 
>494	CallExpression	SetMatch ( i1 , i2 )
>495	ArgumentList	i1
>496	Argument	i2
>497	Identifier	i2
>498	Argument	i1
>499	Identifier	i1
>500	Callee	SetMatch
>501	Identifier	SetMatch
>502	ExpressionStatement	 
>503	CallExpression	sscanf ( buf , \"%d %d\n\" , & i1 , & i2 )
>504	ArgumentList	buf
>505	Argument	& i2
>506	UnaryOp	& i2
>507	Identifier	i2
>508	UnaryOperator	&
>509	Argument	& i1
>510	UnaryOp	& i1
>511	Identifier	i1
>512	UnaryOperator	&
>513	Argument	\"%d %d\n\"
>514	PrimaryExpression	\"%d %d\n\"
>515	Argument	buf
>516	Identifier	buf
>517	Callee	sscanf
>518	Identifier	sscanf
>519	IdentifierDeclStatement	 
>520	IdentifierDecl	i2
>521	Identifier	i2
>522	IdentifierDeclType	int
>523	IdentifierDecl	i1
>524	Identifier	i1
>525	IdentifierDeclType	int
>526	Condition	 
>527	CallExpression	fgets ( buf , 256 , f )
>528	ArgumentList	buf
>529	Argument	f
>530	Identifier	f
>531	Argument	256
>532	PrimaryExpression	256
>533	Argument	buf
>534	Identifier	buf
>535	Callee	fgets
>536	Identifier	fgets
>537	IdentifierDeclStatement	 
>538	IdentifierDecl	buf [ 256 ]
>539	PrimaryExpression	256
>540	Identifier	buf
>541	IdentifierDeclType	char [ 256 ]
>542	IfStatement	if ( f == NULL )
>543	CompoundStatement	 
>544	ExpressionStatement	 
>545	CallExpression	exit ( 1 )
>546	ArgumentList	1
>547	Argument	1
>548	PrimaryExpression	1
>549	Callee	exit
>550	Identifier	exit
>551	ExpressionStatement	 
>552	CallExpression	printf ( \"[LoadMatchTable] Error opening file %s for reading\n\" , filename )
>553	ArgumentList	\"[LoadMatchTable] Error opening file %s for reading\n\"
>554	Argument	filename
>555	Identifier	filename
>556	Argument	\"[LoadMatchTable] Error opening file %s for reading\n\"
>557	PrimaryExpression	\"[LoadMatchTable] Error opening file %s for reading\n\"
>558	Callee	printf
>559	Identifier	printf
>560	Condition	 
>561	EqualityExpression	f == NULL
>562	Identifier	NULL
>563	Identifier	f
>564	IdentifierDeclStatement	 
>565	IdentifierDecl	* f = fopen ( filename , \"r\" )
>566	AssignmentExpr	* f = fopen ( filename , \"r\" )
>567	CallExpression	fopen ( filename , \"r\" )
>568	ArgumentList	filename
>569	Argument	\"r\"
>570	PrimaryExpression	\"r\"
>571	Argument	filename
>572	Identifier	filename
>573	Callee	fopen
>574	Identifier	fopen
>575	Identifier	f
>576	Identifier	f
>577	IdentifierDeclType	FILE *
>578	ExpressionStatement	 
>579	CallExpression	RemoveAllMatches ( )
>580	ArgumentList	 
>581	Callee	RemoveAllMatches
>582	Identifier	RemoveAllMatches
>583	ExpressionStatement	 
>584	CallExpression	printf ( \"[LoadMatchTable] Loading matches\n\" )
>585	ArgumentList	\"[LoadMatchTable] Loading matches\n\"
>586	Argument	\"[LoadMatchTable] Loading matches\n\"
>587	PrimaryExpression	\"[LoadMatchTable] Loading matches\n\"
>588	Callee	printf
>589	Identifier	printf
>590	IfStatement	if ( m_matches_loaded )
>591	ReturnStatement	 
>592	Condition	 
>593	Identifier	m_matches_loaded
>624	FunctionDef	BaseApp 
>625	ParameterList	const char * index_dir
>626	Parameter	 
>627	Identifier	index_dir
>628	ParameterType	const char *
>629	ReturnType	void
>630	CompoundStatement	 
>631	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>632	CompoundStatement	 
>633	ExpressionStatement	 
>634	CallExpression	fclose ( f )
>635	ArgumentList	f
>636	Argument	f
>637	Identifier	f
>638	Callee	fclose
>639	Identifier	fclose
>640	ExpressionStatement	 
>641	CallExpression	fflush ( stdout )
>642	ArgumentList	stdout
>643	Argument	stdout
>644	Identifier	stdout
>645	Callee	fflush
>646	Identifier	fflush
>647	ExpressionStatement	 
>648	CallExpression	printf ( \"%d match files loaded.\n\" , num_matched_images )
>649	ArgumentList	\"%d match files loaded.\n\"
>650	Argument	num_matched_images
>651	Identifier	num_matched_images
>652	Argument	\"%d match files loaded.\n\"
>653	PrimaryExpression	\"%d match files loaded.\n\"
>654	Callee	printf
>655	Identifier	printf
>656	WhileStatement	while ( fgets ( buf , 256 , f ) != NULL )
>657	CompoundStatement	 
>658	IfStatement	if ( num_matches < MIN_MATCHES || index >= num_images )
>659	ElseStatement	else
>660	CompoundStatement	 
>661	ExpressionStatement	 
>662	IncDecOp	num_matched_images ++
>663	IncDec	++
>664	Identifier	num_matched_images
>665	ExpressionStatement	 
>666	AssignmentExpr	m_matches . GetMatchList ( idx ) = matches
>667	Identifier	matches
>668	CallExpression	m_matches . GetMatchList ( idx )
>669	ArgumentList	idx
>670	Argument	idx
>671	Identifier	idx
>672	Callee	m_matches . GetMatchList
>673	MemberAccess	m_matches . GetMatchList
>674	Identifier	GetMatchList
>675	Identifier	m_matches
>676	IdentifierDeclStatement	 
>677	IdentifierDecl	idx = GetMatchIndex ( i , index )
>678	AssignmentExpr	idx = GetMatchIndex ( i , index )
>679	CallExpression	GetMatchIndex ( i , index )
>680	ArgumentList	i
>681	Argument	index
>682	Identifier	index
>683	Argument	i
>684	Identifier	i
>685	Callee	GetMatchIndex
>686	Identifier	GetMatchIndex
>687	Identifier	idx
>688	Identifier	idx
>689	IdentifierDeclType	MatchIndex
>690	ExpressionStatement	 
>691	CallExpression	SetMatch ( i , index )
>692	ArgumentList	i
>693	Argument	index
>694	Identifier	index
>695	Argument	i
>696	Identifier	i
>697	Callee	SetMatch
>698	Identifier	SetMatch
>699	CompoundStatement	 
>700	ExpressionStatement	 
>701	CallExpression	matches . clear ( )
>702	ArgumentList	 
>703	Callee	matches . clear
>704	MemberAccess	matches . clear
>705	Identifier	clear
>706	Identifier	matches
>707	IfStatement	if ( index >= num_images )
>708	ExpressionStatement	 
>709	CallExpression	printf ( \"[LoadMatchIndexes] image index %d > num_images\n\" , index )
>710	ArgumentList	\"[LoadMatchIndexes] image index %d > num_images\n\"
>711	Argument	index
>712	Identifier	index
>713	Argument	\"[LoadMatchIndexes] image index %d > num_images\n\"
>714	PrimaryExpression	\"[LoadMatchIndexes] image index %d > num_images\n\"
>715	Callee	printf
>716	Identifier	printf
>717	Condition	 
>718	RelationalExpression	index >= num_images
>719	Identifier	num_images
>720	Identifier	index
>721	Condition	 
>722	OrExpression	num_matches < MIN_MATCHES || index >= num_images
>723	RelationalExpression	index >= num_images
>724	Identifier	num_images
>725	Identifier	index
>726	RelationalExpression	num_matches < MIN_MATCHES
>727	Identifier	MIN_MATCHES
>728	Identifier	num_matches
>729	ForStatement	for ( int k = 0 ; k < num_matches - 1 ; k ++ )
>730	CompoundStatement	 
>731	ExpressionStatement	 
>732	CallExpression	matches . push_back ( m )
>733	ArgumentList	m
>734	Argument	m
>735	Identifier	m
>736	Callee	matches . push_back
>737	MemberAccess	matches . push_back
>738	Identifier	push_back
>739	Identifier	matches
>740	ExpressionStatement	 
>741	AssignmentExpr	m . m_idx2 = idx2
>742	Identifier	idx2
>743	MemberAccess	m . m_idx2
>744	Identifier	m_idx2
>745	Identifier	m
>746	ExpressionStatement	 
>747	AssignmentExpr	m . m_idx1 = idx1
>748	Identifier	idx1
>749	MemberAccess	m . m_idx1
>750	Identifier	m_idx1
>751	Identifier	m
>752	IdentifierDeclStatement	 
>753	IdentifierDecl	m
>754	Identifier	m
>755	IdentifierDeclType	KeypointMatch
>756	IfStatement	if ( idx1 > KEY_LIMIT || idx2 > KEY_LIMIT )
>757	ContinueStatement	 
>758	Condition	 
>759	OrExpression	idx1 > KEY_LIMIT || idx2 > KEY_LIMIT
>760	RelationalExpression	idx2 > KEY_LIMIT
>761	Identifier	KEY_LIMIT
>762	Identifier	idx2
>763	RelationalExpression	idx1 > KEY_LIMIT
>764	Identifier	KEY_LIMIT
>765	Identifier	idx1
>766	ExpressionStatement	 
>767	CallExpression	fscanf ( f , \"%d %d\n\" , & idx1 , & idx2 )
>768	ArgumentList	f
>769	Argument	& idx2
>770	UnaryOp	& idx2
>771	Identifier	idx2
>772	UnaryOperator	&
>773	Argument	& idx1
>774	UnaryOp	& idx1
>775	Identifier	idx1
>776	UnaryOperator	&
>777	Argument	\"%d %d\n\"
>778	PrimaryExpression	\"%d %d\n\"
>779	Argument	f
>780	Identifier	f
>781	Callee	fscanf
>782	Identifier	fscanf
>783	IdentifierDeclStatement	 
>784	IdentifierDecl	idx2
>785	Identifier	idx2
>786	IdentifierDeclType	int
>787	IdentifierDecl	idx1
>788	Identifier	idx1
>789	IdentifierDeclType	int
>790	IncDecOp	 
>791	IncDec	++
>792	Identifier	k
>793	Condition	 
>794	RelationalExpression	k < num_matches - 1
>795	AdditiveExpression	num_matches - 1
>796	PrimaryExpression	1
>797	Identifier	num_matches
>798	Identifier	k
>799	ForInit	 
>800	IdentifierDeclStatement	int k = 0 ;
>801	IdentifierDecl	k = 0
>802	AssignmentExpr	k = 0
>803	PrimaryExpression	0
>804	Identifier	k
>805	Identifier	k
>806	IdentifierDeclType	int
>807	IdentifierDeclStatement	 
>808	IdentifierDecl	matches
>809	Identifier	matches
>810	IdentifierDeclType	std 
>811	ExpressionStatement	 
>812	CallExpression	fscanf ( f , \"%d\n\" , & num_matches )
>813	ArgumentList	f
>814	Argument	& num_matches
>815	UnaryOp	& num_matches
>816	Identifier	num_matches
>817	UnaryOperator	&
>818	Argument	\"%d\n\"
>819	PrimaryExpression	\"%d\n\"
>820	Argument	f
>821	Identifier	f
>822	Callee	fscanf
>823	Identifier	fscanf
>824	IdentifierDeclStatement	 
>825	IdentifierDecl	num_matches
>826	Identifier	num_matches
>827	IdentifierDeclType	int
>828	ExpressionStatement	 
>829	CallExpression	sscanf ( buf , \"%d\n\" , & index )
>830	ArgumentList	buf
>831	Argument	& index
>832	UnaryOp	& index
>833	Identifier	index
>834	UnaryOperator	&
>835	Argument	\"%d\n\"
>836	PrimaryExpression	\"%d\n\"
>837	Argument	buf
>838	Identifier	buf
>839	Callee	sscanf
>840	Identifier	sscanf
>841	Condition	 
>842	EqualityExpression	fgets ( buf , 256 , f ) != NULL
>843	Identifier	NULL
>844	CallExpression	fgets ( buf , 256 , f )
>845	ArgumentList	buf
>846	Argument	f
>847	Identifier	f
>848	Argument	256
>849	PrimaryExpression	256
>850	Argument	buf
>851	Identifier	buf
>852	Callee	fgets
>853	Identifier	fgets
>854	IdentifierDeclStatement	 
>855	IdentifierDecl	index
>856	Identifier	index
>857	IdentifierDeclType	int
>858	IdentifierDeclStatement	 
>859	IdentifierDecl	num_matched_images = 0
>860	AssignmentExpr	num_matched_images = 0
>861	PrimaryExpression	0
>862	Identifier	num_matched_images
>863	Identifier	num_matched_images
>864	IdentifierDeclType	int
>865	ExpressionStatement	 
>866	CallExpression	printf ( \"[LoadMatchIndexes] Loading matches for image %d... \" , i )
>867	ArgumentList	\"[LoadMatchIndexes] Loading matches for image %d... \"
>868	Argument	i
>869	Identifier	i
>870	Argument	\"[LoadMatchIndexes] Loading matches for image %d... \"
>871	PrimaryExpression	\"[LoadMatchIndexes] Loading matches for image %d... \"
>872	Callee	printf
>873	Identifier	printf
>874	IfStatement	if ( f == NULL )
>875	ContinueStatement	 
>876	Condition	 
>877	EqualityExpression	f == NULL
>878	Identifier	NULL
>879	Identifier	f
>880	IdentifierDeclStatement	 
>881	IdentifierDecl	* f = fopen ( buf , \"r\" )
>882	AssignmentExpr	* f = fopen ( buf , \"r\" )
>883	CallExpression	fopen ( buf , \"r\" )
>884	ArgumentList	buf
>885	Argument	\"r\"
>886	PrimaryExpression	\"r\"
>887	Argument	buf
>888	Identifier	buf
>889	Callee	fopen
>890	Identifier	fopen
>891	Identifier	f
>892	Identifier	f
>893	IdentifierDeclType	FILE *
>894	ExpressionStatement	 
>895	CallExpression	sprintf ( buf , \"%s/match-%03d.txt\" , index_dir , i )
>896	ArgumentList	buf
>897	Argument	i
>898	Identifier	i
>899	Argument	index_dir
>900	Identifier	index_dir
>901	Argument	\"%s/match-%03d.txt\"
>902	PrimaryExpression	\"%s/match-%03d.txt\"
>903	Argument	buf
>904	Identifier	buf
>905	Callee	sprintf
>906	Identifier	sprintf
>907	IdentifierDeclStatement	 
>908	IdentifierDecl	buf [ 256 ]
>909	PrimaryExpression	256
>910	Identifier	buf
>911	IdentifierDeclType	char [ 256 ]
>912	IncDecOp	 
>913	IncDec	++
>914	Identifier	i
>915	Condition	 
>916	RelationalExpression	i < num_images
>917	Identifier	num_images
>918	Identifier	i
>919	ForInit	 
>920	IdentifierDeclStatement	int i = 0 ;
>921	IdentifierDecl	i = 0
>922	AssignmentExpr	i = 0
>923	PrimaryExpression	0
>924	Identifier	i
>925	Identifier	i
>926	IdentifierDeclType	int
>927	IdentifierDeclStatement	 
>928	IdentifierDecl	num_images = GetNumImages ( )
>929	AssignmentExpr	num_images = GetNumImages ( )
>930	CallExpression	GetNumImages ( )
>931	ArgumentList	 
>932	Callee	GetNumImages
>933	Identifier	GetNumImages
>934	Identifier	num_images
>935	Identifier	num_images
>936	IdentifierDeclType	int
>970	FunctionDef	BaseApp 
>971	ParameterList	 
>972	ReturnType	void
>973	CompoundStatement	 
>974	ExpressionStatement	 
>975	AssignmentExpr	m_matches_loaded = true
>976	Identifier	true
>977	Identifier	m_matches_loaded
>978	ExpressionStatement	 
>979	CallExpression	PruneDoubleMatches ( )
>980	ArgumentList	 
>981	Callee	PruneDoubleMatches
>982	Identifier	PruneDoubleMatches
>983	IfStatement	if ( m_match_table != NULL )
>984	ElseStatement	else
>985	IfStatement	if ( m_match_index_dir != NULL )
>986	ElseStatement	else
>987	CompoundStatement	 
>988	IfStatement	if ( f == NULL )
>989	ElseStatement	else
>990	CompoundStatement	 
>991	ExpressionStatement	 
>992	CallExpression	fclose ( f )
>993	ArgumentList	f
>994	Argument	f
>995	Identifier	f
>996	Callee	fclose
>997	Identifier	fclose
>998	ExpressionStatement	 
>999	CallExpression	fflush ( stdout )
>1000	ArgumentList	stdout
>1001	Argument	stdout
>1002	Identifier	stdout
>1003	Callee	fflush
>1004	Identifier	fflush
>1005	ExpressionStatement	 
>1006	CallExpression	printf ( \"[LoadMatches] Read %d match files\n\" , count )
>1007	ArgumentList	\"[LoadMatches] Read %d match files\n\"
>1008	Argument	count
>1009	Identifier	count
>1010	Argument	\"[LoadMatches] Read %d match files\n\"
>1011	PrimaryExpression	\"[LoadMatches] Read %d match files\n\"
>1012	Callee	printf
>1013	Identifier	printf
>1014	WhileStatement	while ( fgets ( buf , 256 , f ) )
>1015	CompoundStatement	 
>1016	ExpressionStatement	 
>1017	IncDecOp	count ++
>1018	IncDec	++
>1019	Identifier	count
>1020	ExpressionStatement	 
>1021	CallExpression	ReadMatchFile ( i1 , i2 )
>1022	ArgumentList	i1
>1023	Argument	i2
>1024	Identifier	i2
>1025	Argument	i1
>1026	Identifier	i1
>1027	Callee	ReadMatchFile
>1028	Identifier	ReadMatchFile
>1029	ExpressionStatement	 
>1030	CallExpression	sscanf ( buf , \"%d %d\n\" , & i1 , & i2 )
>1031	ArgumentList	buf
>1032	Argument	& i2
>1033	UnaryOp	& i2
>1034	Identifier	i2
>1035	UnaryOperator	&
>1036	Argument	& i1
>1037	UnaryOp	& i1
>1038	Identifier	i1
>1039	UnaryOperator	&
>1040	Argument	\"%d %d\n\"
>1041	PrimaryExpression	\"%d %d\n\"
>1042	Argument	buf
>1043	Identifier	buf
>1044	Callee	sscanf
>1045	Identifier	sscanf
>1046	IdentifierDeclStatement	 
>1047	IdentifierDecl	i2
>1048	Identifier	i2
>1049	IdentifierDeclType	int
>1050	IdentifierDecl	i1
>1051	Identifier	i1
>1052	IdentifierDeclType	int
>1053	Condition	 
>1054	CallExpression	fgets ( buf , 256 , f )
>1055	ArgumentList	buf
>1056	Argument	f
>1057	Identifier	f
>1058	Argument	256
>1059	PrimaryExpression	256
>1060	Argument	buf
>1061	Identifier	buf
>1062	Callee	fgets
>1063	Identifier	fgets
>1064	IdentifierDeclStatement	 
>1065	IdentifierDecl	count = 0
>1066	AssignmentExpr	count = 0
>1067	PrimaryExpression	0
>1068	Identifier	count
>1069	Identifier	count
>1070	IdentifierDeclType	unsigned int
>1071	IdentifierDeclStatement	 
>1072	IdentifierDecl	buf [ 256 ]
>1073	PrimaryExpression	256
>1074	Identifier	buf
>1075	IdentifierDeclType	char [ 256 ]
>1076	ExpressionStatement	 
>1077	CallExpression	RemoveAllMatches ( )
>1078	ArgumentList	 
>1079	Callee	RemoveAllMatches
>1080	Identifier	RemoveAllMatches
>1081	ExpressionStatement	 
>1082	CallExpression	fflush ( stdout )
>1083	ArgumentList	stdout
>1084	Argument	stdout
>1085	Identifier	stdout
>1086	Callee	fflush
>1087	Identifier	fflush
>1088	ExpressionStatement	 
>1089	CallExpression	printf ( \"[LoadMatches] Reading matches from 'match-index.txt'\n\" )
>1090	ArgumentList	\"[LoadMatches] Reading matches from 'match-index.txt'\n\"
>1091	Argument	\"[LoadMatches] Reading matches from 'match-index.txt'\n\"
>1092	PrimaryExpression	\"[LoadMatches] Reading matches from 'match-index.txt'\n\"
>1093	Callee	printf
>1094	Identifier	printf
>1095	CompoundStatement	 
>1096	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>1097	CompoundStatement	 
>1098	ForStatement	for ( int j = i + 1 ; j < num_images ; j ++ )
>1099	CompoundStatement	 
>1100	ExpressionStatement	 
>1101	CallExpression	ReadMatchFile ( i , j )
>1102	ArgumentList	i
>1103	Argument	j
>1104	Identifier	j
>1105	Argument	i
>1106	Identifier	i
>1107	Callee	ReadMatchFile
>1108	Identifier	ReadMatchFile
>1109	IncDecOp	 
>1110	IncDec	++
>1111	Identifier	j
>1112	Condition	 
>1113	RelationalExpression	j < num_images
>1114	Identifier	num_images
>1115	Identifier	j
>1116	ForInit	 
>1117	IdentifierDeclStatement	int j = i + 1 ;
>1118	IdentifierDecl	j = i + 1
>1119	AssignmentExpr	j = i + 1
>1120	AdditiveExpression	i + 1
>1121	PrimaryExpression	1
>1122	Identifier	i
>1123	Identifier	j
>1124	Identifier	j
>1125	IdentifierDeclType	int
>1126	IncDecOp	 
>1127	IncDec	++
>1128	Identifier	i
>1129	Condition	 
>1130	RelationalExpression	i < num_images
>1131	Identifier	num_images
>1132	Identifier	i
>1133	ForInit	 
>1134	IdentifierDeclStatement	int i = 0 ;
>1135	IdentifierDecl	i = 0
>1136	AssignmentExpr	i = 0
>1137	PrimaryExpression	0
>1138	Identifier	i
>1139	Identifier	i
>1140	IdentifierDeclType	int
>1141	Condition	 
>1142	EqualityExpression	f == NULL
>1143	Identifier	NULL
>1144	Identifier	f
>1145	IdentifierDeclStatement	 
>1146	IdentifierDecl	* f = fopen ( \"match-index.txt\" , \"r\" )
>1147	AssignmentExpr	* f = fopen ( \"match-index.txt\" , \"r\" )
>1148	CallExpression	fopen ( \"match-index.txt\" , \"r\" )
>1149	ArgumentList	\"match-index.txt\"
>1150	Argument	\"r\"
>1151	PrimaryExpression	\"r\"
>1152	Argument	\"match-index.txt\"
>1153	PrimaryExpression	\"match-index.txt\"
>1154	Callee	fopen
>1155	Identifier	fopen
>1156	Identifier	f
>1157	Identifier	f
>1158	IdentifierDeclType	FILE *
>1159	IdentifierDeclStatement	 
>1160	IdentifierDecl	num_images = GetNumImages ( )
>1161	AssignmentExpr	num_images = GetNumImages ( )
>1162	CallExpression	GetNumImages ( )
>1163	ArgumentList	 
>1164	Callee	GetNumImages
>1165	Identifier	GetNumImages
>1166	Identifier	num_images
>1167	Identifier	num_images
>1168	IdentifierDeclType	int
>1169	ExpressionStatement	 
>1170	CallExpression	printf ( \"[LoadMatches] Loading matches\n\" )
>1171	ArgumentList	\"[LoadMatches] Loading matches\n\"
>1172	Argument	\"[LoadMatches] Loading matches\n\"
>1173	PrimaryExpression	\"[LoadMatches] Loading matches\n\"
>1174	Callee	printf
>1175	Identifier	printf
>1176	CompoundStatement	 
>1177	ExpressionStatement	 
>1178	CallExpression	LoadMatchIndexes ( m_match_index_dir )
>1179	ArgumentList	m_match_index_dir
>1180	Argument	m_match_index_dir
>1181	Identifier	m_match_index_dir
>1182	Callee	LoadMatchIndexes
>1183	Identifier	LoadMatchIndexes
>1184	Condition	 
>1185	EqualityExpression	m_match_index_dir != NULL
>1186	Identifier	NULL
>1187	Identifier	m_match_index_dir
>1188	CompoundStatement	 
>1189	ExpressionStatement	 
>1190	CallExpression	LoadMatchTable ( m_match_table )
>1191	ArgumentList	m_match_table
>1192	Argument	m_match_table
>1193	Identifier	m_match_table
>1194	Callee	LoadMatchTable
>1195	Identifier	LoadMatchTable
>1196	Condition	 
>1197	EqualityExpression	m_match_table != NULL
>1198	Identifier	NULL
>1199	Identifier	m_match_table
>1200	IfStatement	if ( m_matches_loaded )
>1201	ReturnStatement	 
>1202	Condition	 
>1203	Identifier	m_matches_loaded
>1226	FunctionDef	BaseApp 
>1227	ParameterList	 
>1228	ReturnType	void
>1229	CompoundStatement	 
>1230	ExpressionStatement	 
>1231	CallExpression	m_matches . RemoveAll ( )
>1232	ArgumentList	 
>1233	Callee	m_matches . RemoveAll
>1234	MemberAccess	m_matches . RemoveAll
>1235	Identifier	RemoveAll
>1236	Identifier	m_matches
>1241	FunctionDef	BaseApp 
>1242	ParameterList	FILE * f
>1243	Parameter	 
>1244	Identifier	f
>1245	ParameterType	FILE *
>1246	ReturnType	void
>1247	CompoundStatement	 
>1248	IfStatement	if ( m_use_intrinsics )
>1249	ExpressionStatement	 
>1250	CallExpression	ReadIntrinsicsFile ( )
>1251	ArgumentList	 
>1252	Callee	ReadIntrinsicsFile
>1253	Identifier	ReadIntrinsicsFile
>1254	Condition	 
>1255	Identifier	m_use_intrinsics
>1256	ExpressionStatement	 
>1257	AssignmentExpr	m_num_original_images = GetNumImages ( )
>1258	CallExpression	GetNumImages ( )
>1259	ArgumentList	 
>1260	Callee	GetNumImages
>1261	Identifier	GetNumImages
>1262	Identifier	m_num_original_images
>1263	ExpressionStatement	 
>1264	AssignmentExpr	m_matches_computed = true
>1265	Identifier	true
>1266	Identifier	m_matches_computed
>1267	ExpressionStatement	 
>1268	CallExpression	RemoveAllMatches ( )
>1269	ArgumentList	 
>1270	Callee	RemoveAllMatches
>1271	Identifier	RemoveAllMatches
>1272	ExpressionStatement	 
>1273	AssignmentExpr	m_matches = MatchTable ( GetNumImages ( ) )
>1274	CallExpression	MatchTable ( GetNumImages ( ) )
>1275	ArgumentList	GetNumImages ( )
>1276	Argument	GetNumImages ( )
>1277	CallExpression	GetNumImages ( )
>1278	ArgumentList	 
>1279	Callee	GetNumImages
>1280	Identifier	GetNumImages
>1281	Callee	MatchTable
>1282	Identifier	MatchTable
>1283	Identifier	m_matches
>1284	WhileStatement	while ( fgets ( buf , 256 , f ) )
>1285	CompoundStatement	 
>1286	ExpressionStatement	 
>1287	IncDecOp	idx ++
>1288	IncDec	++
>1289	Identifier	idx
>1290	ExpressionStatement	 
>1291	CallExpression	m_image_data . push_back ( data )
>1292	ArgumentList	data
>1293	Argument	data
>1294	Identifier	data
>1295	Callee	m_image_data . push_back
>1296	MemberAccess	m_image_data . push_back
>1297	Identifier	push_back
>1298	Identifier	m_image_data
>1299	ExpressionStatement	 
>1300	AssignmentExpr	data . m_texture_index = - 1
>1301	UnaryOp	- 1
>1302	PrimaryExpression	1
>1303	UnaryOperator	-
>1304	MemberAccess	data . m_texture_index
>1305	Identifier	m_texture_index
>1306	Identifier	data
>1307	ExpressionStatement	 
>1308	AssignmentExpr	data . m_camera . m_adjusted = false
>1309	Identifier	false
>1310	MemberAccess	data . m_camera . m_adjusted
>1311	Identifier	m_adjusted
>1312	MemberAccess	data . m_camera
>1313	Identifier	m_camera
>1314	Identifier	data
>1315	ExpressionStatement	 
>1316	AssignmentExpr	data . m_init_focal = init_focal
>1317	Identifier	init_focal
>1318	MemberAccess	data . m_init_focal
>1319	Identifier	m_init_focal
>1320	Identifier	data
>1321	ExpressionStatement	 
>1322	AssignmentExpr	data . m_has_init_focal = has_init_focal
>1323	Identifier	has_init_focal
>1324	MemberAccess	data . m_has_init_focal
>1325	Identifier	m_has_init_focal
>1326	Identifier	data
>1327	ExpressionStatement	 
>1328	AssignmentExpr	data . m_fisheye = fisheye
>1329	Identifier	fisheye
>1330	MemberAccess	data . m_fisheye
>1331	Identifier	m_fisheye
>1332	Identifier	data
>1333	ExpressionStatement	 
>1334	AssignmentExpr	data . m_keys_loaded = false
>1335	Identifier	false
>1336	MemberAccess	data . m_keys_loaded
>1337	Identifier	m_keys_loaded
>1338	Identifier	data
>1339	ExpressionStatement	 
>1340	AssignmentExpr	data . m_image_loaded = false
>1341	Identifier	false
>1342	MemberAccess	data . m_image_loaded
>1343	Identifier	m_image_loaded
>1344	Identifier	data
>1345	ExpressionStatement	 
>1346	AssignmentExpr	data . m_wximage = NULL
>1347	Identifier	NULL
>1348	MemberAccess	data . m_wximage
>1349	Identifier	m_wximage
>1350	Identifier	data
>1351	ExpressionStatement	 
>1352	AssignmentExpr	data . m_thumb8 = NULL
>1353	Identifier	NULL
>1354	MemberAccess	data . m_thumb8
>1355	Identifier	m_thumb8
>1356	Identifier	data
>1357	ExpressionStatement	 
>1358	AssignmentExpr	data . m_thumb = NULL
>1359	Identifier	NULL
>1360	MemberAccess	data . m_thumb
>1361	Identifier	m_thumb
>1362	Identifier	data
>1363	ExpressionStatement	 
>1364	AssignmentExpr	data . m_img = NULL
>1365	Identifier	NULL
>1366	MemberAccess	data . m_img
>1367	Identifier	m_img
>1368	Identifier	data
>1369	ExpressionStatement	 
>1370	AssignmentExpr	data . m_name = strdup ( buf )
>1371	CallExpression	strdup ( buf )
>1372	ArgumentList	buf
>1373	Argument	buf
>1374	Identifier	buf
>1375	Callee	strdup
>1376	Identifier	strdup
>1377	MemberAccess	data . m_name
>1378	Identifier	m_name
>1379	Identifier	data
>1380	ExpressionStatement	 
>1381	CallExpression	sprintf ( buf , \"%s/%s\" , m_image_directory , toks [ 0 ] . c_str ( ) )
>1382	ArgumentList	buf
>1383	Argument	toks [ 0 ] . c_str ( )
>1384	CallExpression	toks [ 0 ] . c_str ( )
>1385	ArgumentList	 
>1386	Callee	toks [ 0 ] . c_str
>1387	MemberAccess	toks [ 0 ] . c_str
>1388	Identifier	c_str
>1389	ArrayIndexing	toks [ 0 ]
>1390	PrimaryExpression	0
>1391	Identifier	toks
>1392	Argument	m_image_directory
>1393	Identifier	m_image_directory
>1394	Argument	\"%s/%s\"
>1395	PrimaryExpression	\"%s/%s\"
>1396	Argument	buf
>1397	Identifier	buf
>1398	Callee	sprintf
>1399	Identifier	sprintf
>1400	IdentifierDeclStatement	 
>1401	IdentifierDecl	buf [ 512 ]
>1402	PrimaryExpression	512
>1403	Identifier	buf
>1404	IdentifierDeclType	char [ 512 ]
>1405	IdentifierDeclStatement	 
>1406	IdentifierDecl	data
>1407	Identifier	data
>1408	IdentifierDeclType	ImageData
>1409	IfStatement	if ( num_toks >= 3 )
>1410	CompoundStatement	 
>1411	ExpressionStatement	 
>1412	AssignmentExpr	init_focal = atof ( toks [ 2 ] . c_str ( ) )
>1413	CallExpression	atof ( toks [ 2 ] . c_str ( ) )
>1414	ArgumentList	toks [ 2 ] . c_str ( )
>1415	Argument	toks [ 2 ] . c_str ( )
>1416	CallExpression	toks [ 2 ] . c_str ( )
>1417	ArgumentList	 
>1418	Callee	toks [ 2 ] . c_str
>1419	MemberAccess	toks [ 2 ] . c_str
>1420	Identifier	c_str
>1421	ArrayIndexing	toks [ 2 ]
>1422	PrimaryExpression	2
>1423	Identifier	toks
>1424	Callee	atof
>1425	Identifier	atof
>1426	Identifier	init_focal
>1427	ExpressionStatement	 
>1428	AssignmentExpr	has_init_focal = true
>1429	Identifier	true
>1430	Identifier	has_init_focal
>1431	Condition	 
>1432	RelationalExpression	num_toks >= 3
>1433	PrimaryExpression	3
>1434	Identifier	num_toks
>1435	IdentifierDeclStatement	 
>1436	IdentifierDecl	init_focal = 0.0
>1437	AssignmentExpr	init_focal = 0.0
>1438	PrimaryExpression	0.0
>1439	Identifier	init_focal
>1440	Identifier	init_focal
>1441	IdentifierDeclType	double
>1442	IdentifierDeclStatement	 
>1443	IdentifierDecl	has_init_focal = false
>1444	AssignmentExpr	has_init_focal = false
>1445	Identifier	false
>1446	Identifier	false
>1447	Identifier	has_init_focal
>1448	IdentifierDeclType	bool
>1449	IfStatement	if ( num_toks >= 2 )
>1450	CompoundStatement	 
>1451	ExpressionStatement	 
>1452	AssignmentExpr	fisheye = ( atoi ( toks [ 1 ] . c_str ( ) ) == 1 )
>1453	EqualityExpression	atoi ( toks [ 1 ] . c_str ( ) ) == 1
>1454	PrimaryExpression	1
>1455	CallExpression	atoi ( toks [ 1 ] . c_str ( ) )
>1456	ArgumentList	toks [ 1 ] . c_str ( )
>1457	Argument	toks [ 1 ] . c_str ( )
>1458	CallExpression	toks [ 1 ] . c_str ( )
>1459	ArgumentList	 
>1460	Callee	toks [ 1 ] . c_str
>1461	MemberAccess	toks [ 1 ] . c_str
>1462	Identifier	c_str
>1463	ArrayIndexing	toks [ 1 ]
>1464	PrimaryExpression	1
>1465	Identifier	toks
>1466	Callee	atoi
>1467	Identifier	atoi
>1468	Identifier	fisheye
>1469	Condition	 
>1470	RelationalExpression	num_toks >= 2
>1471	PrimaryExpression	2
>1472	Identifier	num_toks
>1473	IdentifierDeclStatement	 
>1474	IdentifierDecl	fisheye = m_fisheye
>1475	AssignmentExpr	fisheye = m_fisheye
>1476	Identifier	m_fisheye
>1477	Identifier	m_fisheye
>1478	Identifier	fisheye
>1479	IdentifierDeclType	bool
>1480	IdentifierDeclStatement	 
>1481	IdentifierDecl	num_toks = ( int ) toks . size ( )
>1482	AssignmentExpr	num_toks = ( int ) toks . size ( )
>1483	CastExpression	( int ) toks . size ( )
>1484	CallExpression	toks . size ( )
>1485	ArgumentList	 
>1486	Callee	toks . size
>1487	MemberAccess	toks . size
>1488	Identifier	size
>1489	Identifier	toks
>1490	CastTarget	int
>1491	Identifier	num_toks
>1492	Identifier	num_toks
>1493	IdentifierDeclType	int
>1494	IfStatement	if ( log != NULL )
>1495	CompoundStatement	 
>1496	ExpressionStatement	 
>1497	CallExpression	log -> AppendText ( \"\n\" )
>1498	ArgumentList	\"\n\"
>1499	Argument	\"\n\"
>1500	PrimaryExpression	\"\n\"
>1501	Callee	log -> AppendText
>1502	PtrMemberAccess	log -> AppendText
>1503	Identifier	AppendText
>1504	Identifier	log
>1505	ExpressionStatement	 
>1506	CallExpression	log -> AppendText ( buf )
>1507	ArgumentList	buf
>1508	Argument	buf
>1509	Identifier	buf
>1510	Callee	log -> AppendText
>1511	PtrMemberAccess	log -> AppendText
>1512	Identifier	AppendText
>1513	Identifier	log
>1514	ExpressionStatement	 
>1515	CallExpression	log -> AppendText ( \"  \" )
>1516	ArgumentList	\"  \"
>1517	Argument	\"  \"
>1518	PrimaryExpression	\"  \"
>1519	Callee	log -> AppendText
>1520	PtrMemberAccess	log -> AppendText
>1521	Identifier	AppendText
>1522	Identifier	log
>1523	Condition	 
>1524	EqualityExpression	log != NULL
>1525	Identifier	NULL
>1526	Identifier	log
>1527	WhileStatement	while ( t . HasMoreTokens ( ) )
>1528	CompoundStatement	 
>1529	ExpressionStatement	 
>1530	CallExpression	toks . push_back ( tok )
>1531	ArgumentList	tok
>1532	Argument	tok
>1533	Identifier	tok
>1534	Callee	toks . push_back
>1535	MemberAccess	toks . push_back
>1536	Identifier	push_back
>1537	Identifier	toks
>1538	IdentifierDeclStatement	 
>1539	IdentifierDecl	tok = t . GetNextToken ( )
>1540	AssignmentExpr	tok = t . GetNextToken ( )
>1541	CallExpression	t . GetNextToken ( )
>1542	ArgumentList	 
>1543	Callee	t . GetNextToken
>1544	MemberAccess	t . GetNextToken
>1545	Identifier	GetNextToken
>1546	Identifier	t
>1547	Identifier	tok
>1548	Identifier	tok
>1549	IdentifierDeclType	wxString
>1550	Condition	 
>1551	CallExpression	t . HasMoreTokens ( )
>1552	ArgumentList	 
>1553	Callee	t . HasMoreTokens
>1554	MemberAccess	t . HasMoreTokens
>1555	Identifier	HasMoreTokens
>1556	Identifier	t
>1557	IdentifierDeclStatement	 
>1558	IdentifierDecl	t ( str , wxT ( \" \" ) )
>1559	Expression	str , wxT ( \" \" )
>1560	CallExpression	wxT ( \" \" )
>1561	ArgumentList	\" \"
>1562	Argument	\" \"
>1563	PrimaryExpression	\" \"
>1564	Callee	wxT
>1565	Identifier	wxT
>1566	Identifier	str
>1567	Identifier	t
>1568	IdentifierDeclType	wxStringTokenizer
>1569	ExpressionStatement	 
>1570	CallExpression	Tokenize ( str , toks , \" \" )
>1571	ArgumentList	str
>1572	Argument	\" \"
>1573	PrimaryExpression	\" \"
>1574	Argument	toks
>1575	Identifier	toks
>1576	Argument	str
>1577	Identifier	str
>1578	Callee	Tokenize
>1579	Identifier	Tokenize
>1580	IdentifierDeclStatement	 
>1581	IdentifierDecl	toks
>1582	Identifier	toks
>1583	IdentifierDeclType	std 
>1584	IdentifierDeclStatement	 
>1585	IdentifierDecl	str ( buf )
>1586	Identifier	buf
>1587	Identifier	str
>1588	IdentifierDeclType	std 
>1589	IfStatement	if ( buf [ strlen ( buf ) - 1 ] == '\r' )
>1590	ExpressionStatement	 
>1591	AssignmentExpr	buf [ strlen ( buf ) - 1 ] = 0
>1592	PrimaryExpression	0
>1593	ArrayIndexing	buf [ strlen ( buf ) - 1 ]
>1594	AdditiveExpression	strlen ( buf ) - 1
>1595	PrimaryExpression	1
>1596	CallExpression	strlen ( buf )
>1597	ArgumentList	buf
>1598	Argument	buf
>1599	Identifier	buf
>1600	Callee	strlen
>1601	Identifier	strlen
>1602	Identifier	buf
>1603	Condition	 
>1604	EqualityExpression	buf [ strlen ( buf ) - 1 ] == '\r'
>1605	PrimaryExpression	'\r'
>1606	ArrayIndexing	buf [ strlen ( buf ) - 1 ]
>1607	AdditiveExpression	strlen ( buf ) - 1
>1608	PrimaryExpression	1
>1609	CallExpression	strlen ( buf )
>1610	ArgumentList	buf
>1611	Argument	buf
>1612	Identifier	buf
>1613	Callee	strlen
>1614	Identifier	strlen
>1615	Identifier	buf
>1616	IfStatement	if ( buf [ strlen ( buf ) - 1 ] == '\n' )
>1617	ExpressionStatement	 
>1618	AssignmentExpr	buf [ strlen ( buf ) - 1 ] = 0
>1619	PrimaryExpression	0
>1620	ArrayIndexing	buf [ strlen ( buf ) - 1 ]
>1621	AdditiveExpression	strlen ( buf ) - 1
>1622	PrimaryExpression	1
>1623	CallExpression	strlen ( buf )
>1624	ArgumentList	buf
>1625	Argument	buf
>1626	Identifier	buf
>1627	Callee	strlen
>1628	Identifier	strlen
>1629	Identifier	buf
>1630	Condition	 
>1631	EqualityExpression	buf [ strlen ( buf ) - 1 ] == '\n'
>1632	PrimaryExpression	'\n'
>1633	ArrayIndexing	buf [ strlen ( buf ) - 1 ]
>1634	AdditiveExpression	strlen ( buf ) - 1
>1635	PrimaryExpression	1
>1636	CallExpression	strlen ( buf )
>1637	ArgumentList	buf
>1638	Argument	buf
>1639	Identifier	buf
>1640	Callee	strlen
>1641	Identifier	strlen
>1642	Identifier	buf
>1643	IfStatement	if ( log != NULL )
>1644	CompoundStatement	 
>1645	ExpressionStatement	 
>1646	CallExpression	log -> AppendText ( \"\n\" )
>1647	ArgumentList	\"\n\"
>1648	Argument	\"\n\"
>1649	PrimaryExpression	\"\n\"
>1650	Callee	log -> AppendText
>1651	PtrMemberAccess	log -> AppendText
>1652	Identifier	AppendText
>1653	Identifier	log
>1654	ExpressionStatement	 
>1655	CallExpression	log -> AppendText ( buf )
>1656	ArgumentList	buf
>1657	Argument	buf
>1658	Identifier	buf
>1659	Callee	log -> AppendText
>1660	PtrMemberAccess	log -> AppendText
>1661	Identifier	AppendText
>1662	Identifier	log
>1663	ExpressionStatement	 
>1664	CallExpression	log -> AppendText ( \"  \" )
>1665	ArgumentList	\"  \"
>1666	Argument	\"  \"
>1667	PrimaryExpression	\"  \"
>1668	Callee	log -> AppendText
>1669	PtrMemberAccess	log -> AppendText
>1670	Identifier	AppendText
>1671	Identifier	log
>1672	Condition	 
>1673	EqualityExpression	log != NULL
>1674	Identifier	NULL
>1675	Identifier	log
>1676	IfStatement	if ( strcmp ( m_key_directory , \".\" ) != 0 )
>1677	ElseStatement	else
>1678	CompoundStatement	 
>1679	ExpressionStatement	 
>1680	AssignmentExpr	data . m_key_name = strdup ( key_buf )
>1681	CallExpression	strdup ( key_buf )
>1682	ArgumentList	key_buf
>1683	Argument	key_buf
>1684	Identifier	key_buf
>1685	Callee	strdup
>1686	Identifier	strdup
>1687	MemberAccess	data . m_key_name
>1688	Identifier	m_key_name
>1689	Identifier	data
>1690	ExpressionStatement	 
>1691	AssignmentExpr	key_buf [ len - 1 ] = 'y'
>1692	PrimaryExpression	'y'
>1693	ArrayIndexing	key_buf [ len - 1 ]
>1694	AdditiveExpression	len - 1
>1695	PrimaryExpression	1
>1696	Identifier	len
>1697	Identifier	key_buf
>1698	ExpressionStatement	 
>1699	AssignmentExpr	key_buf [ len - 2 ] = 'e'
>1700	PrimaryExpression	'e'
>1701	ArrayIndexing	key_buf [ len - 2 ]
>1702	AdditiveExpression	len - 2
>1703	PrimaryExpression	2
>1704	Identifier	len
>1705	Identifier	key_buf
>1706	ExpressionStatement	 
>1707	AssignmentExpr	key_buf [ len - 3 ] = 'k'
>1708	PrimaryExpression	'k'
>1709	ArrayIndexing	key_buf [ len - 3 ]
>1710	AdditiveExpression	len - 3
>1711	PrimaryExpression	3
>1712	Identifier	len
>1713	Identifier	key_buf
>1714	IdentifierDeclStatement	 
>1715	IdentifierDecl	len = strlen ( key_buf )
>1716	AssignmentExpr	len = strlen ( key_buf )
>1717	CallExpression	strlen ( key_buf )
>1718	ArgumentList	key_buf
>1719	Argument	key_buf
>1720	Identifier	key_buf
>1721	Callee	strlen
>1722	Identifier	strlen
>1723	Identifier	len
>1724	Identifier	len
>1725	IdentifierDeclType	int
>1726	ExpressionStatement	 
>1727	CallExpression	strcpy ( key_buf , data . m_name )
>1728	ArgumentList	key_buf
>1729	Argument	data . m_name
>1730	MemberAccess	data . m_name
>1731	Identifier	m_name
>1732	Identifier	data
>1733	Argument	key_buf
>1734	Identifier	key_buf
>1735	Callee	strcpy
>1736	Identifier	strcpy
>1737	IdentifierDeclStatement	 
>1738	IdentifierDecl	key_buf [ 256 ]
>1739	PrimaryExpression	256
>1740	Identifier	key_buf
>1741	IdentifierDeclType	char [ 256 ]
>1742	CompoundStatement	 
>1743	ExpressionStatement	 
>1744	AssignmentExpr	data . m_key_name = strdup ( key_path )
>1745	CallExpression	strdup ( key_path )
>1746	ArgumentList	key_path
>1747	Argument	key_path
>1748	Identifier	key_path
>1749	Callee	strdup
>1750	Identifier	strdup
>1751	MemberAccess	data . m_key_name
>1752	Identifier	m_key_name
>1753	Identifier	data
>1754	ExpressionStatement	 
>1755	CallExpression	sprintf ( key_path , \"%s/%s.key\" , m_key_directory , key_buf )
>1756	ArgumentList	key_path
>1757	Argument	key_buf
>1758	Identifier	key_buf
>1759	Argument	m_key_directory
>1760	Identifier	m_key_directory
>1761	Argument	\"%s/%s.key\"
>1762	PrimaryExpression	\"%s/%s.key\"
>1763	Argument	key_path
>1764	Identifier	key_path
>1765	Callee	sprintf
>1766	Identifier	sprintf
>1767	IdentifierDeclStatement	 
>1768	IdentifierDecl	key_path [ 512 ]
>1769	PrimaryExpression	512
>1770	Identifier	key_path
>1771	IdentifierDeclType	char [ 512 ]
>1772	ExpressionStatement	 
>1773	CallExpression	data . GetBaseName ( key_buf )
>1774	ArgumentList	key_buf
>1775	Argument	key_buf
>1776	Identifier	key_buf
>1777	Callee	data . GetBaseName
>1778	MemberAccess	data . GetBaseName
>1779	Identifier	GetBaseName
>1780	Identifier	data
>1781	IdentifierDeclStatement	 
>1782	IdentifierDecl	key_buf [ 256 ]
>1783	PrimaryExpression	256
>1784	Identifier	key_buf
>1785	IdentifierDeclType	char [ 256 ]
>1786	Condition	 
>1787	EqualityExpression	strcmp ( m_key_directory , \".\" ) != 0
>1788	PrimaryExpression	0
>1789	CallExpression	strcmp ( m_key_directory , \".\" )
>1790	ArgumentList	m_key_directory
>1791	Argument	\".\"
>1792	PrimaryExpression	\".\"
>1793	Argument	m_key_directory
>1794	Identifier	m_key_directory
>1795	Callee	strcmp
>1796	Identifier	strcmp
>1797	ExpressionStatement	 
>1798	CallExpression	data . InitFromString ( buf , m_image_directory , m_fisheye )
>1799	ArgumentList	buf
>1800	Argument	m_fisheye
>1801	Identifier	m_fisheye
>1802	Argument	m_image_directory
>1803	Identifier	m_image_directory
>1804	Argument	buf
>1805	Identifier	buf
>1806	Callee	data . InitFromString
>1807	MemberAccess	data . InitFromString
>1808	Identifier	InitFromString
>1809	Identifier	data
>1810	IdentifierDeclStatement	 
>1811	IdentifierDecl	data
>1812	Identifier	data
>1813	IdentifierDeclType	ImageData
>1814	Condition	 
>1815	CallExpression	fgets ( buf , 256 , f )
>1816	ArgumentList	buf
>1817	Argument	f
>1818	Identifier	f
>1819	Argument	256
>1820	PrimaryExpression	256
>1821	Argument	buf
>1822	Identifier	buf
>1823	Callee	fgets
>1824	Identifier	fgets
>1825	IdentifierDeclStatement	 
>1826	IdentifierDecl	idx = 0
>1827	AssignmentExpr	idx = 0
>1828	PrimaryExpression	0
>1829	Identifier	idx
>1830	Identifier	idx
>1831	IdentifierDeclType	int
>1832	IdentifierDeclStatement	 
>1833	IdentifierDecl	buf [ 256 ]
>1834	PrimaryExpression	256
>1835	Identifier	buf
>1836	IdentifierDeclType	char [ 256 ]
>1837	ExpressionStatement	 
>1838	CallExpression	m_image_data . clear ( )
>1839	ArgumentList	 
>1840	Callee	m_image_data . clear
>1841	MemberAccess	m_image_data . clear
>1842	Identifier	clear
>1843	Identifier	m_image_data
>1907	FunctionDef	BaseApp 
>1908	ParameterList	const char * filename
>1909	Parameter	 
>1910	Identifier	filename
>1911	ParameterType	const char *
>1912	ReturnType	void
>1913	CompoundStatement	 
>1914	ExpressionStatement	 
>1915	CallExpression	printf ( \"[ReadBundleFile] %d / %d points visible to more than 2 cameras!\n\" , num_min_views_points , num_points )
>1916	ArgumentList	\"[ReadBundleFile] %d / %d points visible to more than 2 cameras!\n\"
>1917	Argument	num_points
>1918	Identifier	num_points
>1919	Argument	num_min_views_points
>1920	Identifier	num_min_views_points
>1921	Argument	\"[ReadBundleFile] %d / %d points visible to more than 2 cameras!\n\"
>1922	PrimaryExpression	\"[ReadBundleFile] %d / %d points visible to more than 2 cameras!\n\"
>1923	Callee	printf
>1924	Identifier	printf
>1925	ExpressionStatement	 
>1926	CallExpression	fclose ( f )
>1927	ArgumentList	f
>1928	Argument	f
>1929	Identifier	f
>1930	Callee	fclose
>1931	Identifier	fclose
>1932	ForStatement	for ( int i = 0 ; i < num_outliers ; i ++ )
>1933	CompoundStatement	 
>1934	ExpressionStatement	 
>1935	CallExpression	m_outliers . push_back ( ik )
>1936	ArgumentList	ik
>1937	Argument	ik
>1938	Identifier	ik
>1939	Callee	m_outliers . push_back
>1940	MemberAccess	m_outliers . push_back
>1941	Identifier	push_back
>1942	Identifier	m_outliers
>1943	ExpressionStatement	 
>1944	CallExpression	fscanf ( f , \"%d %d\" , & ( ik . first ) , & ( ik . second ) )
>1945	ArgumentList	f
>1946	Argument	& ( ik . second )
>1947	UnaryOp	& ( ik . second )
>1948	MemberAccess	ik . second
>1949	Identifier	second
>1950	Identifier	ik
>1951	UnaryOperator	&
>1952	Argument	& ( ik . first )
>1953	UnaryOp	& ( ik . first )
>1954	MemberAccess	ik . first
>1955	Identifier	first
>1956	Identifier	ik
>1957	UnaryOperator	&
>1958	Argument	\"%d %d\"
>1959	PrimaryExpression	\"%d %d\"
>1960	Argument	f
>1961	Identifier	f
>1962	Callee	fscanf
>1963	Identifier	fscanf
>1964	IdentifierDeclStatement	 
>1965	IdentifierDecl	ik
>1966	Identifier	ik
>1967	IdentifierDeclType	ImageKey
>1968	IncDecOp	 
>1969	IncDec	++
>1970	Identifier	i
>1971	Condition	 
>1972	RelationalExpression	i < num_outliers
>1973	Identifier	num_outliers
>1974	Identifier	i
>1975	ForInit	 
>1976	IdentifierDeclStatement	int i = 0 ;
>1977	IdentifierDecl	i = 0
>1978	AssignmentExpr	i = 0
>1979	PrimaryExpression	0
>1980	Identifier	i
>1981	Identifier	i
>1982	IdentifierDeclType	int
>1983	ExpressionStatement	 
>1984	CallExpression	fscanf ( f , \"%d\" , & num_outliers )
>1985	ArgumentList	f
>1986	Argument	& num_outliers
>1987	UnaryOp	& num_outliers
>1988	Identifier	num_outliers
>1989	UnaryOperator	&
>1990	Argument	\"%d\"
>1991	PrimaryExpression	\"%d\"
>1992	Argument	f
>1993	Identifier	f
>1994	Callee	fscanf
>1995	Identifier	fscanf
>1996	IdentifierDeclStatement	 
>1997	IdentifierDecl	num_outliers
>1998	Identifier	num_outliers
>1999	IdentifierDeclType	int
>2000	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>2001	CompoundStatement	 
>2002	IfStatement	if ( pt . m_pos [ 0 ] < x_min || pt . m_pos [ 0 ] > x_max || pt . m_pos [ 1 ] < y_min || pt . m_pos [ 1 ] > y_max || \
>2003	CompoundStatement	 
>2004	ExpressionStatement	 
>2005	CallExpression	pt . m_views . clear ( )
>2006	ArgumentList	 
>2007	Callee	pt . m_views . clear
>2008	MemberAccess	pt . m_views . clear
>2009	Identifier	clear
>2010	MemberAccess	pt . m_views
>2011	Identifier	m_views
>2012	Identifier	pt
>2013	Condition	 
>2014	OrExpression	pt . m_pos [ 0 ] < x_min || pt . m_pos [ 0 ] > x_max || pt . m_pos [ 1 ] < y_min || pt . m_pos [ 1 ] > \
>2015	OrExpression	pt . m_pos [ 0 ] > x_max || pt . m_pos [ 1 ] < y_min || pt . m_pos [ 1 ] > y_max || pt . m_pos [ 2 ] < \
>2016	OrExpression	pt . m_pos [ 1 ] < y_min || pt . m_pos [ 1 ] > y_max || pt . m_pos [ 2 ] < z_min || pt . m_pos [ 2 ] > \
>2017	OrExpression	pt . m_pos [ 1 ] > y_max || pt . m_pos [ 2 ] < z_min || pt . m_pos [ 2 ] > z_max
>2018	OrExpression	pt . m_pos [ 2 ] < z_min || pt . m_pos [ 2 ] > z_max
>2019	RelationalExpression	pt . m_pos [ 2 ] > z_max
>2020	Identifier	z_max
>2021	ArrayIndexing	pt . m_pos [ 2 ]
>2022	PrimaryExpression	2
>2023	MemberAccess	pt . m_pos
>2024	Identifier	m_pos
>2025	Identifier	pt
>2026	RelationalExpression	pt . m_pos [ 2 ] < z_min
>2027	Identifier	z_min
>2028	ArrayIndexing	pt . m_pos [ 2 ]
>2029	PrimaryExpression	2
>2030	MemberAccess	pt . m_pos
>2031	Identifier	m_pos
>2032	Identifier	pt
>2033	RelationalExpression	pt . m_pos [ 1 ] > y_max
>2034	Identifier	y_max
>2035	ArrayIndexing	pt . m_pos [ 1 ]
>2036	PrimaryExpression	1
>2037	MemberAccess	pt . m_pos
>2038	Identifier	m_pos
>2039	Identifier	pt
>2040	RelationalExpression	pt . m_pos [ 1 ] < y_min
>2041	Identifier	y_min
>2042	ArrayIndexing	pt . m_pos [ 1 ]
>2043	PrimaryExpression	1
>2044	MemberAccess	pt . m_pos
>2045	Identifier	m_pos
>2046	Identifier	pt
>2047	RelationalExpression	pt . m_pos [ 0 ] > x_max
>2048	Identifier	x_max
>2049	ArrayIndexing	pt . m_pos [ 0 ]
>2050	PrimaryExpression	0
>2051	MemberAccess	pt . m_pos
>2052	Identifier	m_pos
>2053	Identifier	pt
>2054	RelationalExpression	pt . m_pos [ 0 ] < x_min
>2055	Identifier	x_min
>2056	ArrayIndexing	pt . m_pos [ 0 ]
>2057	PrimaryExpression	0
>2058	MemberAccess	pt . m_pos
>2059	Identifier	m_pos
>2060	Identifier	pt
>2061	IdentifierDeclStatement	 
>2062	IdentifierDecl	z_max = - 3.288
>2063	AssignmentExpr	z_max = - 3.288
>2064	UnaryOp	- 3.288
>2065	PrimaryExpression	3.288
>2066	UnaryOperator	-
>2067	Identifier	z_max
>2068	Identifier	z_max
>2069	IdentifierDeclType	const double
>2070	IdentifierDeclStatement	 
>2071	IdentifierDecl	z_min = - 5.502
>2072	AssignmentExpr	z_min = - 5.502
>2073	UnaryOp	- 5.502
>2074	PrimaryExpression	5.502
>2075	UnaryOperator	-
>2076	Identifier	z_min
>2077	Identifier	z_min
>2078	IdentifierDeclType	const double
>2079	IdentifierDeclStatement	 
>2080	IdentifierDecl	y_max = 1.074
>2081	AssignmentExpr	y_max = 1.074
>2082	PrimaryExpression	1.074
>2083	Identifier	y_max
>2084	Identifier	y_max
>2085	IdentifierDeclType	const double
>2086	IdentifierDeclStatement	 
>2087	IdentifierDecl	y_min = - 1.414
>2088	AssignmentExpr	y_min = - 1.414
>2089	UnaryOp	- 1.414
>2090	PrimaryExpression	1.414
>2091	UnaryOperator	-
>2092	Identifier	y_min
>2093	Identifier	y_min
>2094	IdentifierDeclType	const double
>2095	IdentifierDeclStatement	 
>2096	IdentifierDecl	x_max = 3.556
>2097	AssignmentExpr	x_max = 3.556
>2098	PrimaryExpression	3.556
>2099	Identifier	x_max
>2100	Identifier	x_max
>2101	IdentifierDeclType	const double
>2102	IdentifierDeclStatement	 
>2103	IdentifierDecl	x_min = 1.327
>2104	AssignmentExpr	x_min = 1.327
>2105	PrimaryExpression	1.327
>2106	Identifier	x_min
>2107	Identifier	x_min
>2108	IdentifierDeclType	const double
>2109	ForStatement	for ( int j = 0 ; j < num_visible ; j ++ )
>2110	CompoundStatement	 
>2111	IfStatement	if ( m_bundle_version >= 0.3 )
>2112	CompoundStatement	 
>2113	ExpressionStatement	 
>2114	CallExpression	fscanf ( f , \"%lf %lf\" , & x , & y )
>2115	ArgumentList	f
>2116	Argument	& y
>2117	UnaryOp	& y
>2118	Identifier	y
>2119	UnaryOperator	&
>2120	Argument	& x
>2121	UnaryOp	& x
>2122	Identifier	x
>2123	UnaryOperator	&
>2124	Argument	\"%lf %lf\"
>2125	PrimaryExpression	\"%lf %lf\"
>2126	Argument	f
>2127	Identifier	f
>2128	Callee	fscanf
>2129	Identifier	fscanf
>2130	IdentifierDeclStatement	 
>2131	IdentifierDecl	y
>2132	Identifier	y
>2133	IdentifierDeclType	double
>2134	IdentifierDecl	x
>2135	Identifier	x
>2136	IdentifierDeclType	double
>2137	Condition	 
>2138	RelationalExpression	m_bundle_version >= 0.3
>2139	PrimaryExpression	0.3
>2140	Identifier	m_bundle_version
>2141	IfStatement	if ( ! m_image_data [ view ] . m_camera . m_adjusted )
>2142	ElseStatement	else
>2143	CompoundStatement	 
>2144	IfStatement	if ( m_image_data [ view ] . m_camera . Project ( pt . m_pos , proj_test ) == val )
>2145	ElseStatement	else
>2146	CompoundStatement	 
>2147	ExpressionStatement	 
>2148	Statement	 
>2149	Statement	 
>2150	Statement	 
>2151	Statement	 
>2152	Statement	 
>2153	Statement	 
>2154	Statement	 
>2155	Statement	 
>2156	Statement	 
>2157	CompoundStatement	 
>2158	ExpressionStatement	 
>2159	CallExpression	pt . m_views . push_back ( ImageKey ( view , key ) )
>2160	ArgumentList	ImageKey ( view , key )
>2161	Argument	ImageKey ( view , key )
>2162	CallExpression	ImageKey ( view , key )
>2163	ArgumentList	view
>2164	Argument	key
>2165	Identifier	key
>2166	Argument	view
>2167	Identifier	view
>2168	Callee	ImageKey
>2169	Identifier	ImageKey
>2170	Callee	pt . m_views . push_back
>2171	MemberAccess	pt . m_views . push_back
>2172	Identifier	push_back
>2173	MemberAccess	pt . m_views
>2174	Identifier	m_views
>2175	Identifier	pt
>2176	Condition	 
>2177	EqualityExpression	m_image_data [ view ] . m_camera . Project ( pt . m_pos , proj_test ) == val
>2178	Identifier	val
>2179	CallExpression	m_image_data [ view ] . m_camera . Project ( pt . m_pos , proj_test )
>2180	ArgumentList	pt . m_pos
>2181	Argument	proj_test
>2182	Identifier	proj_test
>2183	Argument	pt . m_pos
>2184	MemberAccess	pt . m_pos
>2185	Identifier	m_pos
>2186	Identifier	pt
>2187	Callee	m_image_data [ view ] . m_camera . Project
>2188	MemberAccess	m_image_data [ view ] . m_camera . Project
>2189	Identifier	Project
>2190	MemberAccess	m_image_data [ view ] . m_camera
>2191	Identifier	m_camera
>2192	ArrayIndexing	m_image_data [ view ]
>2193	Identifier	view
>2194	Identifier	m_image_data
>2195	IdentifierDeclStatement	 
>2196	IdentifierDecl	proj_test [ 2 ]
>2197	PrimaryExpression	2
>2198	Identifier	proj_test
>2199	IdentifierDeclType	double [ 2 ]
>2200	IdentifierDeclStatement	 
>2201	IdentifierDecl	val = ( m_bundle_version >= 0.3 )
>2202	AssignmentExpr	val = ( m_bundle_version >= 0.3 )
>2203	RelationalExpression	m_bundle_version >= 0.3
>2204	PrimaryExpression	0.3
>2205	Identifier	m_bundle_version
>2206	Identifier	val
>2207	Identifier	val
>2208	IdentifierDeclType	bool
>2209	CompoundStatement	 
>2210	Condition	 
>2211	UnaryOp	! m_image_data [ view ] . m_camera . m_adjusted
>2212	MemberAccess	m_image_data [ view ] . m_camera . m_adjusted
>2213	Identifier	m_adjusted
>2214	MemberAccess	m_image_data [ view ] . m_camera
>2215	Identifier	m_camera
>2216	ArrayIndexing	m_image_data [ view ]
>2217	Identifier	view
>2218	Identifier	m_image_data
>2219	UnaryOperator	!
>2220	ExpressionStatement	 
>2221	CallExpression	fscanf ( f , \"%d %d\" , & view , & key )
>2222	ArgumentList	f
>2223	Argument	& key
>2224	UnaryOp	& key
>2225	Identifier	key
>2226	UnaryOperator	&
>2227	Argument	& view
>2228	UnaryOp	& view
>2229	Identifier	view
>2230	UnaryOperator	&
>2231	Argument	\"%d %d\"
>2232	PrimaryExpression	\"%d %d\"
>2233	Argument	f
>2234	Identifier	f
>2235	Callee	fscanf
>2236	Identifier	fscanf
>2237	IdentifierDeclStatement	 
>2238	IdentifierDecl	key
>2239	Identifier	key
>2240	IdentifierDeclType	int
>2241	IdentifierDecl	view
>2242	Identifier	view
>2243	IdentifierDeclType	int
>2244	IncDecOp	 
>2245	IncDec	++
>2246	Identifier	j
>2247	Condition	 
>2248	RelationalExpression	j < num_visible
>2249	Identifier	num_visible
>2250	Identifier	j
>2251	ForInit	 
>2252	IdentifierDeclStatement	int j = 0 ;
>2253	IdentifierDecl	j = 0
>2254	AssignmentExpr	j = 0
>2255	PrimaryExpression	0
>2256	Identifier	j
>2257	Identifier	j
>2258	IdentifierDeclType	int
>2259	IfStatement	if ( num_visible >= 3 )
>2260	ExpressionStatement	 
>2261	IncDecOp	num_min_views_points ++
>2262	IncDec	++
>2263	Identifier	num_min_views_points
>2264	Condition	 
>2265	RelationalExpression	num_visible >= 3
>2266	PrimaryExpression	3
>2267	Identifier	num_visible
>2268	ExpressionStatement	 
>2269	AssignmentExpr	pt . m_num_vis = num_visible
>2270	Identifier	num_visible
>2271	MemberAccess	pt . m_num_vis
>2272	Identifier	m_num_vis
>2273	Identifier	pt
>2274	ExpressionStatement	 
>2275	CallExpression	fscanf ( f , \"%d\" , & num_visible )
>2276	ArgumentList	f
>2277	Argument	& num_visible
>2278	UnaryOp	& num_visible
>2279	Identifier	num_visible
>2280	UnaryOperator	&
>2281	Argument	\"%d\"
>2282	PrimaryExpression	\"%d\"
>2283	Argument	f
>2284	Identifier	f
>2285	Callee	fscanf
>2286	Identifier	fscanf
>2287	IdentifierDeclStatement	 
>2288	IdentifierDecl	num_visible
>2289	Identifier	num_visible
>2290	IdentifierDeclType	int
>2291	ExpressionStatement	 
>2292	CallExpression	fscanf ( f , \"%f %f %f\n\" , pt . m_color + 0 , pt . m_color + 1 , pt . m_color + 2 )
>2293	ArgumentList	f
>2294	Argument	pt . m_color + 2
>2295	AdditiveExpression	pt . m_color + 2
>2296	PrimaryExpression	2
>2297	MemberAccess	pt . m_color
>2298	Identifier	m_color
>2299	Identifier	pt
>2300	Argument	pt . m_color + 1
>2301	AdditiveExpression	pt . m_color + 1
>2302	PrimaryExpression	1
>2303	MemberAccess	pt . m_color
>2304	Identifier	m_color
>2305	Identifier	pt
>2306	Argument	pt . m_color + 0
>2307	AdditiveExpression	pt . m_color + 0
>2308	PrimaryExpression	0
>2309	MemberAccess	pt . m_color
>2310	Identifier	m_color
>2311	Identifier	pt
>2312	Argument	\"%f %f %f\n\"
>2313	PrimaryExpression	\"%f %f %f\n\"
>2314	Argument	f
>2315	Identifier	f
>2316	Callee	fscanf
>2317	Identifier	fscanf
>2318	ExpressionStatement	 
>2319	CallExpression	fscanf ( f , \"%lf %lf %lf\n\" , pt . m_pos + 0 , pt . m_pos + 1 , pt . m_pos + 2 )
>2320	ArgumentList	f
>2321	Argument	pt . m_pos + 2
>2322	AdditiveExpression	pt . m_pos + 2
>2323	PrimaryExpression	2
>2324	MemberAccess	pt . m_pos
>2325	Identifier	m_pos
>2326	Identifier	pt
>2327	Argument	pt . m_pos + 1
>2328	AdditiveExpression	pt . m_pos + 1
>2329	PrimaryExpression	1
>2330	MemberAccess	pt . m_pos
>2331	Identifier	m_pos
>2332	Identifier	pt
>2333	Argument	pt . m_pos + 0
>2334	AdditiveExpression	pt . m_pos + 0
>2335	PrimaryExpression	0
>2336	MemberAccess	pt . m_pos
>2337	Identifier	m_pos
>2338	Identifier	pt
>2339	Argument	\"%lf %lf %lf\n\"
>2340	PrimaryExpression	\"%lf %lf %lf\n\"
>2341	Argument	f
>2342	Identifier	f
>2343	Callee	fscanf
>2344	Identifier	fscanf
>2345	IdentifierDeclStatement	 
>2346	IdentifierDecl	& pt = m_point_data [ i ]
>2347	AssignmentExpr	& pt = m_point_data [ i ]
>2348	ArrayIndexing	m_point_data [ i ]
>2349	Identifier	i
>2350	Identifier	m_point_data
>2351	Identifier	pt
>2352	Identifier	pt
>2353	IdentifierDeclType	PointData &
>2354	IncDecOp	 
>2355	IncDec	++
>2356	Identifier	i
>2357	Condition	 
>2358	RelationalExpression	i < num_points
>2359	Identifier	num_points
>2360	Identifier	i
>2361	ForInit	 
>2362	IdentifierDeclStatement	int i = 0 ;
>2363	IdentifierDecl	i = 0
>2364	AssignmentExpr	i = 0
>2365	PrimaryExpression	0
>2366	Identifier	i
>2367	Identifier	i
>2368	IdentifierDeclType	int
>2369	IdentifierDeclStatement	 
>2370	IdentifierDecl	num_min_views_points = 0
>2371	AssignmentExpr	num_min_views_points = 0
>2372	PrimaryExpression	0
>2373	Identifier	num_min_views_points
>2374	Identifier	num_min_views_points
>2375	IdentifierDeclType	int
>2376	ExpressionStatement	 
>2377	CallExpression	m_point_data . resize ( num_points )
>2378	ArgumentList	num_points
>2379	Argument	num_points
>2380	Identifier	num_points
>2381	Callee	m_point_data . resize
>2382	MemberAccess	m_point_data . resize
>2383	Identifier	resize
>2384	Identifier	m_point_data
>2385	ExpressionStatement	 
>2386	CallExpression	m_point_data . clear ( )
>2387	ArgumentList	 
>2388	Callee	m_point_data . clear
>2389	MemberAccess	m_point_data . clear
>2390	Identifier	clear
>2391	Identifier	m_point_data
>2392	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>2393	CompoundStatement	 
>2394	IfStatement	if ( focal_length <= 100.0 || m_image_data [ i ] . m_ignore_in_bundle )
>2395	ElseStatement	else
>2396	CompoundStatement	 
>2397	ExpressionStatement	 
>2398	AssignmentExpr	m_image_data [ i ] . m_camera = cd
>2399	Identifier	cd
>2400	MemberAccess	m_image_data [ i ] . m_camera
>2401	Identifier	m_camera
>2402	ArrayIndexing	m_image_data [ i ]
>2403	Identifier	i
>2404	Identifier	m_image_data
>2405	ExpressionStatement	 
>2406	CallExpression	cd . Finalize ( )
>2407	ArgumentList	 
>2408	Callee	cd . Finalize
>2409	MemberAccess	cd . Finalize
>2410	Identifier	Finalize
>2411	Identifier	cd
>2412	ExpressionStatement	 
>2413	CallExpression	memcpy ( cd . m_t , t , sizeof ( double ) * 3 )
>2414	ArgumentList	cd . m_t
>2415	Argument	sizeof ( double ) * 3
>2416	MultiplicativeExpression	sizeof ( double ) * 3
>2417	PrimaryExpression	3
>2418	SizeofExpr	sizeof ( double )
>2419	SizeofOperand	double
>2420	Sizeof	sizeof
>2421	Argument	t
>2422	Identifier	t
>2423	Argument	cd . m_t
>2424	MemberAccess	cd . m_t
>2425	Identifier	m_t
>2426	Identifier	cd
>2427	Callee	memcpy
>2428	Identifier	memcpy
>2429	ExpressionStatement	 
>2430	CallExpression	memcpy ( cd . m_R , R , sizeof ( double ) * 9 )
>2431	ArgumentList	cd . m_R
>2432	Argument	sizeof ( double ) * 9
>2433	MultiplicativeExpression	sizeof ( double ) * 9
>2434	PrimaryExpression	9
>2435	SizeofExpr	sizeof ( double )
>2436	SizeofOperand	double
>2437	Sizeof	sizeof
>2438	Argument	R
>2439	Identifier	R
>2440	Argument	cd . m_R
>2441	MemberAccess	cd . m_R
>2442	Identifier	m_R
>2443	Identifier	cd
>2444	Callee	memcpy
>2445	Identifier	memcpy
>2446	ExpressionStatement	 
>2447	AssignmentExpr	cd . m_k [ 1 ] = k [ 1 ]
>2448	ArrayIndexing	k [ 1 ]
>2449	PrimaryExpression	1
>2450	Identifier	k
>2451	ArrayIndexing	cd . m_k [ 1 ]
>2452	PrimaryExpression	1
>2453	MemberAccess	cd . m_k
>2454	Identifier	m_k
>2455	Identifier	cd
>2456	ExpressionStatement	 
>2457	AssignmentExpr	cd . m_k [ 0 ] = k [ 0 ]
>2458	ArrayIndexing	k [ 0 ]
>2459	PrimaryExpression	0
>2460	Identifier	k
>2461	ArrayIndexing	cd . m_k [ 0 ]
>2462	PrimaryExpression	0
>2463	MemberAccess	cd . m_k
>2464	Identifier	m_k
>2465	Identifier	cd
>2466	ExpressionStatement	 
>2467	AssignmentExpr	cd . m_focal = focal_length
>2468	Identifier	focal_length
>2469	MemberAccess	cd . m_focal
>2470	Identifier	m_focal
>2471	Identifier	cd
>2472	ExpressionStatement	 
>2473	AssignmentExpr	cd . m_height = m_image_data [ i ] . GetHeight ( )
>2474	CallExpression	m_image_data [ i ] . GetHeight ( )
>2475	ArgumentList	 
>2476	Callee	m_image_data [ i ] . GetHeight
>2477	MemberAccess	m_image_data [ i ] . GetHeight
>2478	Identifier	GetHeight
>2479	ArrayIndexing	m_image_data [ i ]
>2480	Identifier	i
>2481	Identifier	m_image_data
>2482	MemberAccess	cd . m_height
>2483	Identifier	m_height
>2484	Identifier	cd
>2485	ExpressionStatement	 
>2486	AssignmentExpr	cd . m_width = m_image_data [ i ] . GetWidth ( )
>2487	CallExpression	m_image_data [ i ] . GetWidth ( )
>2488	ArgumentList	 
>2489	Callee	m_image_data [ i ] . GetWidth
>2490	MemberAccess	m_image_data [ i ] . GetWidth
>2491	Identifier	GetWidth
>2492	ArrayIndexing	m_image_data [ i ]
>2493	Identifier	i
>2494	Identifier	m_image_data
>2495	MemberAccess	cd . m_width
>2496	Identifier	m_width
>2497	Identifier	cd
>2498	ExpressionStatement	 
>2499	AssignmentExpr	cd . m_adjusted = true
>2500	Identifier	true
>2501	MemberAccess	cd . m_adjusted
>2502	Identifier	m_adjusted
>2503	Identifier	cd
>2504	IdentifierDeclStatement	 
>2505	IdentifierDecl	cd
>2506	Identifier	cd
>2507	IdentifierDeclType	CameraInfo
>2508	CompoundStatement	 
>2509	ExpressionStatement	 
>2510	AssignmentExpr	m_image_data [ i ] . m_camera . m_adjusted = false
>2511	Identifier	false
>2512	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>2513	Identifier	m_adjusted
>2514	MemberAccess	m_image_data [ i ] . m_camera
>2515	Identifier	m_camera
>2516	ArrayIndexing	m_image_data [ i ]
>2517	Identifier	i
>2518	Identifier	m_image_data
>2519	Condition	 
>2520	OrExpression	focal_length <= 100.0 || m_image_data [ i ] . m_ignore_in_bundle
>2521	MemberAccess	m_image_data [ i ] . m_ignore_in_bundle
>2522	Identifier	m_ignore_in_bundle
>2523	ArrayIndexing	m_image_data [ i ]
>2524	Identifier	i
>2525	Identifier	m_image_data
>2526	RelationalExpression	focal_length <= 100.0
>2527	PrimaryExpression	100.0
>2528	Identifier	focal_length
>2529	IfStatement	if ( m_bundle_version < 0.3 )
>2530	CompoundStatement	 
>2531	ExpressionStatement	 
>2532	AssignmentExpr	t [ 2 ] = - t [ 2 ]
>2533	UnaryOp	- t [ 2 ]
>2534	ArrayIndexing	t [ 2 ]
>2535	PrimaryExpression	2
>2536	Identifier	t
>2537	UnaryOperator	-
>2538	ArrayIndexing	t [ 2 ]
>2539	PrimaryExpression	2
>2540	Identifier	t
>2541	ExpressionStatement	 
>2542	AssignmentExpr	R [ 7 ] = - R [ 7 ]
>2543	UnaryOp	- R [ 7 ]
>2544	ArrayIndexing	R [ 7 ]
>2545	PrimaryExpression	7
>2546	Identifier	R
>2547	UnaryOperator	-
>2548	ArrayIndexing	R [ 7 ]
>2549	PrimaryExpression	7
>2550	Identifier	R
>2551	ExpressionStatement	 
>2552	AssignmentExpr	R [ 6 ] = - R [ 6 ]
>2553	UnaryOp	- R [ 6 ]
>2554	ArrayIndexing	R [ 6 ]
>2555	PrimaryExpression	6
>2556	Identifier	R
>2557	UnaryOperator	-
>2558	ArrayIndexing	R [ 6 ]
>2559	PrimaryExpression	6
>2560	Identifier	R
>2561	ExpressionStatement	 
>2562	AssignmentExpr	R [ 5 ] = - R [ 5 ]
>2563	UnaryOp	- R [ 5 ]
>2564	ArrayIndexing	R [ 5 ]
>2565	PrimaryExpression	5
>2566	Identifier	R
>2567	UnaryOperator	-
>2568	ArrayIndexing	R [ 5 ]
>2569	PrimaryExpression	5
>2570	Identifier	R
>2571	ExpressionStatement	 
>2572	AssignmentExpr	R [ 2 ] = - R [ 2 ]
>2573	UnaryOp	- R [ 2 ]
>2574	ArrayIndexing	R [ 2 ]
>2575	PrimaryExpression	2
>2576	Identifier	R
>2577	UnaryOperator	-
>2578	ArrayIndexing	R [ 2 ]
>2579	PrimaryExpression	2
>2580	Identifier	R
>2581	Condition	 
>2582	RelationalExpression	m_bundle_version < 0.3
>2583	PrimaryExpression	0.3
>2584	Identifier	m_bundle_version
>2585	ExpressionStatement	 
>2586	CallExpression	fscanf ( f , \"%lf %lf %lf\n\" , t + 0 , t + 1 , t + 2 )
>2587	ArgumentList	f
>2588	Argument	t + 2
>2589	AdditiveExpression	t + 2
>2590	PrimaryExpression	2
>2591	Identifier	t
>2592	Argument	t + 1
>2593	AdditiveExpression	t + 1
>2594	PrimaryExpression	1
>2595	Identifier	t
>2596	Argument	t + 0
>2597	AdditiveExpression	t + 0
>2598	PrimaryExpression	0
>2599	Identifier	t
>2600	Argument	\"%lf %lf %lf\n\"
>2601	PrimaryExpression	\"%lf %lf %lf\n\"
>2602	Argument	f
>2603	Identifier	f
>2604	Callee	fscanf
>2605	Identifier	fscanf
>2606	ExpressionStatement	 
>2607	CallExpression	fscanf ( f , \"%lf %lf %lf\n%lf %lf %lf\n%lf %lf %lf\n\" , R + 0 , R + 1 , R + 2 , R + 3 , R + 4 , R + 5 , R + 6 , \
>2608	ArgumentList	f
>2609	Argument	R + 8
>2610	AdditiveExpression	R + 8
>2611	PrimaryExpression	8
>2612	Identifier	R
>2613	Argument	R + 7
>2614	AdditiveExpression	R + 7
>2615	PrimaryExpression	7
>2616	Identifier	R
>2617	Argument	R + 6
>2618	AdditiveExpression	R + 6
>2619	PrimaryExpression	6
>2620	Identifier	R
>2621	Argument	R + 5
>2622	AdditiveExpression	R + 5
>2623	PrimaryExpression	5
>2624	Identifier	R
>2625	Argument	R + 4
>2626	AdditiveExpression	R + 4
>2627	PrimaryExpression	4
>2628	Identifier	R
>2629	Argument	R + 3
>2630	AdditiveExpression	R + 3
>2631	PrimaryExpression	3
>2632	Identifier	R
>2633	Argument	R + 2
>2634	AdditiveExpression	R + 2
>2635	PrimaryExpression	2
>2636	Identifier	R
>2637	Argument	R + 1
>2638	AdditiveExpression	R + 1
>2639	PrimaryExpression	1
>2640	Identifier	R
>2641	Argument	R + 0
>2642	AdditiveExpression	R + 0
>2643	PrimaryExpression	0
>2644	Identifier	R
>2645	Argument	\"%lf %lf %lf\n%lf %lf %lf\n%lf %lf %lf\n\"
>2646	PrimaryExpression	\"%lf %lf %lf\n%lf %lf %lf\n%lf %lf %lf\n\"
>2647	Argument	f
>2648	Identifier	f
>2649	Callee	fscanf
>2650	Identifier	fscanf
>2651	IfStatement	if ( m_bundle_version > 0.1 )
>2652	ElseStatement	else
>2653	CompoundStatement	 
>2654	ExpressionStatement	 
>2655	CallExpression	fscanf ( f , \"%lf\n\" , & focal_length )
>2656	ArgumentList	f
>2657	Argument	& focal_length
>2658	UnaryOp	& focal_length
>2659	Identifier	focal_length
>2660	UnaryOperator	&
>2661	Argument	\"%lf\n\"
>2662	PrimaryExpression	\"%lf\n\"
>2663	Argument	f
>2664	Identifier	f
>2665	Callee	fscanf
>2666	Identifier	fscanf
>2667	CompoundStatement	 
>2668	ExpressionStatement	 
>2669	CallExpression	fscanf ( f , \"%lf %lf %lf\n\" , & focal_length , k + 0 , k + 1 )
>2670	ArgumentList	f
>2671	Argument	k + 1
>2672	AdditiveExpression	k + 1
>2673	PrimaryExpression	1
>2674	Identifier	k
>2675	Argument	k + 0
>2676	AdditiveExpression	k + 0
>2677	PrimaryExpression	0
>2678	Identifier	k
>2679	Argument	& focal_length
>2680	UnaryOp	& focal_length
>2681	Identifier	focal_length
>2682	UnaryOperator	&
>2683	Argument	\"%lf %lf %lf\n\"
>2684	PrimaryExpression	\"%lf %lf %lf\n\"
>2685	Argument	f
>2686	Identifier	f
>2687	Callee	fscanf
>2688	Identifier	fscanf
>2689	Condition	 
>2690	RelationalExpression	m_bundle_version > 0.1
>2691	PrimaryExpression	0.1
>2692	Identifier	m_bundle_version
>2693	IfStatement	if ( m_bundle_version >= 0.4 )
>2694	CompoundStatement	 
>2695	ExpressionStatement	 
>2696	CallExpression	fscanf ( f , \"%s %d %d\n\" , name , & w , & h )
>2697	ArgumentList	f
>2698	Argument	& h
>2699	UnaryOp	& h
>2700	Identifier	h
>2701	UnaryOperator	&
>2702	Argument	& w
>2703	UnaryOp	& w
>2704	Identifier	w
>2705	UnaryOperator	&
>2706	Argument	name
>2707	Identifier	name
>2708	Argument	\"%s %d %d\n\"
>2709	PrimaryExpression	\"%s %d %d\n\"
>2710	Argument	f
>2711	Identifier	f
>2712	Callee	fscanf
>2713	Identifier	fscanf
>2714	IdentifierDeclStatement	 
>2715	IdentifierDecl	h
>2716	Identifier	h
>2717	IdentifierDeclType	int
>2718	IdentifierDecl	w
>2719	Identifier	w
>2720	IdentifierDeclType	int
>2721	IdentifierDeclStatement	 
>2722	IdentifierDecl	name [ 512 ]
>2723	PrimaryExpression	512
>2724	Identifier	name
>2725	IdentifierDeclType	char [ 512 ]
>2726	Condition	 
>2727	RelationalExpression	m_bundle_version >= 0.4
>2728	PrimaryExpression	0.4
>2729	Identifier	m_bundle_version
>2730	IdentifierDeclStatement	 
>2731	IdentifierDecl	k [ 2 ] = { 0.0 , 0.0 }
>2732	AssignmentExpr	k [ 2 ] = { 0.0 , 0.0 }
>2733	InitializerList	0.0
>2734	PrimaryExpression	0.0
>2735	PrimaryExpression	0.0
>2736	Identifier	k
>2737	PrimaryExpression	2
>2738	Identifier	k
>2739	IdentifierDeclType	double [ 2 ]
>2740	IdentifierDeclStatement	 
>2741	IdentifierDecl	t [ 3 ]
>2742	PrimaryExpression	3
>2743	Identifier	t
>2744	IdentifierDeclType	double [ 3 ]
>2745	IdentifierDeclStatement	 
>2746	IdentifierDecl	R [ 9 ]
>2747	PrimaryExpression	9
>2748	Identifier	R
>2749	IdentifierDeclType	double [ 9 ]
>2750	IdentifierDeclStatement	 
>2751	IdentifierDecl	focal_length
>2752	Identifier	focal_length
>2753	IdentifierDeclType	double
>2754	IncDecOp	 
>2755	IncDec	++
>2756	Identifier	i
>2757	Condition	 
>2758	RelationalExpression	i < num_images
>2759	Identifier	num_images
>2760	Identifier	i
>2761	ForInit	 
>2762	IdentifierDeclStatement	int i = 0 ;
>2763	IdentifierDecl	i = 0
>2764	AssignmentExpr	i = 0
>2765	PrimaryExpression	0
>2766	Identifier	i
>2767	Identifier	i
>2768	IdentifierDeclType	int
>2769	IfStatement	if ( num_images != GetNumImages ( ) )
>2770	CompoundStatement	 
>2771	ReturnStatement	 
>2772	ExpressionStatement	 
>2773	CallExpression	printf ( \"Error
>2774	ArgumentList	\"Error
>2775	Argument	\"Error
>2776	PrimaryExpression	\"Error
>2777	Callee	printf
>2778	Identifier	printf
>2779	Condition	 
>2780	EqualityExpression	num_images != GetNumImages ( )
>2781	CallExpression	GetNumImages ( )
>2782	ArgumentList	 
>2783	Callee	GetNumImages
>2784	Identifier	GetNumImages
>2785	Identifier	num_images
>2786	ExpressionStatement	 
>2787	CallExpression	printf ( \"[ReadBundleFile] Reading %d images and %d points...\n\" , num_images , num_points )
>2788	ArgumentList	\"[ReadBundleFile] Reading %d images and %d points...\n\"
>2789	Argument	num_points
>2790	Identifier	num_points
>2791	Argument	num_images
>2792	Identifier	num_images
>2793	Argument	\"[ReadBundleFile] Reading %d images and %d points...\n\"
>2794	PrimaryExpression	\"[ReadBundleFile] Reading %d images and %d points...\n\"
>2795	Callee	printf
>2796	Identifier	printf
>2797	IfStatement	if ( first_line [ 0 ] == '#' )
>2798	ElseStatement	else
>2799	IfStatement	if ( first_line [ 0 ] == 'v' )
>2800	ElseStatement	else
>2801	CompoundStatement	 
>2802	ExpressionStatement	 
>2803	CallExpression	sscanf ( first_line , \"%d %d\n\" , & num_images , & num_points )
>2804	ArgumentList	first_line
>2805	Argument	& num_points
>2806	UnaryOp	& num_points
>2807	Identifier	num_points
>2808	UnaryOperator	&
>2809	Argument	& num_images
>2810	UnaryOp	& num_images
>2811	Identifier	num_images
>2812	UnaryOperator	&
>2813	Argument	\"%d %d\n\"
>2814	PrimaryExpression	\"%d %d\n\"
>2815	Argument	first_line
>2816	Identifier	first_line
>2817	Callee	sscanf
>2818	Identifier	sscanf
>2819	ExpressionStatement	 
>2820	AssignmentExpr	m_bundle_version = 0.1
>2821	PrimaryExpression	0.1
>2822	Identifier	m_bundle_version
>2823	CompoundStatement	 
>2824	ExpressionStatement	 
>2825	CallExpression	fscanf ( f , \"%d %d\n\" , & num_images , & num_points )
>2826	ArgumentList	f
>2827	Argument	& num_points
>2828	UnaryOp	& num_points
>2829	Identifier	num_points
>2830	UnaryOperator	&
>2831	Argument	& num_images
>2832	UnaryOp	& num_images
>2833	Identifier	num_images
>2834	UnaryOperator	&
>2835	Argument	\"%d %d\n\"
>2836	PrimaryExpression	\"%d %d\n\"
>2837	Argument	f
>2838	Identifier	f
>2839	Callee	fscanf
>2840	Identifier	fscanf
>2841	ExpressionStatement	 
>2842	CallExpression	printf ( \"[ReadBundleFile] Bundle version
>2843	ArgumentList	\"[ReadBundleFile] Bundle version
>2844	Argument	version
>2845	Identifier	version
>2846	Argument	\"[ReadBundleFile] Bundle version
>2847	PrimaryExpression	\"[ReadBundleFile] Bundle version
>2848	Callee	printf
>2849	Identifier	printf
>2850	ExpressionStatement	 
>2851	AssignmentExpr	m_bundle_version = version
>2852	Identifier	version
>2853	Identifier	m_bundle_version
>2854	ExpressionStatement	 
>2855	CallExpression	sscanf ( first_line , \"v%lf\" , & version )
>2856	ArgumentList	first_line
>2857	Argument	& version
>2858	UnaryOp	& version
>2859	Identifier	version
>2860	UnaryOperator	&
>2861	Argument	\"v%lf\"
>2862	PrimaryExpression	\"v%lf\"
>2863	Argument	first_line
>2864	Identifier	first_line
>2865	Callee	sscanf
>2866	Identifier	sscanf
>2867	IdentifierDeclStatement	 
>2868	IdentifierDecl	version
>2869	Identifier	version
>2870	IdentifierDeclType	double
>2871	Condition	 
>2872	EqualityExpression	first_line [ 0 ] == 'v'
>2873	PrimaryExpression	'v'
>2874	ArrayIndexing	first_line [ 0 ]
>2875	PrimaryExpression	0
>2876	Identifier	first_line
>2877	CompoundStatement	 
>2878	ExpressionStatement	 
>2879	CallExpression	fscanf ( f , \"%d %d\n\" , & num_images , & num_points )
>2880	ArgumentList	f
>2881	Argument	& num_points
>2882	UnaryOp	& num_points
>2883	Identifier	num_points
>2884	UnaryOperator	&
>2885	Argument	& num_images
>2886	UnaryOp	& num_images
>2887	Identifier	num_images
>2888	UnaryOperator	&
>2889	Argument	\"%d %d\n\"
>2890	PrimaryExpression	\"%d %d\n\"
>2891	Argument	f
>2892	Identifier	f
>2893	Callee	fscanf
>2894	Identifier	fscanf
>2895	ExpressionStatement	 
>2896	CallExpression	printf ( \"[ReadBundleFile] Bundle version
>2897	ArgumentList	\"[ReadBundleFile] Bundle version
>2898	Argument	version
>2899	Identifier	version
>2900	Argument	\"[ReadBundleFile] Bundle version
>2901	PrimaryExpression	\"[ReadBundleFile] Bundle version
>2902	Callee	printf
>2903	Identifier	printf
>2904	ExpressionStatement	 
>2905	AssignmentExpr	m_bundle_version = version
>2906	Identifier	version
>2907	Identifier	m_bundle_version
>2908	ExpressionStatement	 
>2909	CallExpression	sscanf ( first_line , \"# Bundle file v%lf\" , & version )
>2910	ArgumentList	first_line
>2911	Argument	& version
>2912	UnaryOp	& version
>2913	Identifier	version
>2914	UnaryOperator	&
>2915	Argument	\"# Bundle file v%lf\"
>2916	PrimaryExpression	\"# Bundle file v%lf\"
>2917	Argument	first_line
>2918	Identifier	first_line
>2919	Callee	sscanf
>2920	Identifier	sscanf
>2921	IdentifierDeclStatement	 
>2922	IdentifierDecl	version
>2923	Identifier	version
>2924	IdentifierDeclType	double
>2925	Condition	 
>2926	EqualityExpression	first_line [ 0 ] == '#'
>2927	PrimaryExpression	'#'
>2928	ArrayIndexing	first_line [ 0 ]
>2929	PrimaryExpression	0
>2930	Identifier	first_line
>2931	ExpressionStatement	 
>2932	CallExpression	fgets ( first_line , 256 , f )
>2933	ArgumentList	first_line
>2934	Argument	f
>2935	Identifier	f
>2936	Argument	256
>2937	PrimaryExpression	256
>2938	Argument	first_line
>2939	Identifier	first_line
>2940	Callee	fgets
>2941	Identifier	fgets
>2942	IdentifierDeclStatement	 
>2943	IdentifierDecl	first_line [ 256 ]
>2944	PrimaryExpression	256
>2945	Identifier	first_line
>2946	IdentifierDeclType	char [ 256 ]
>2947	IdentifierDeclStatement	 
>2948	IdentifierDecl	num_points
>2949	Identifier	num_points
>2950	IdentifierDeclType	int
>2951	IdentifierDecl	num_images
>2952	Identifier	num_images
>2953	IdentifierDeclType	int
>2954	IfStatement	if ( f == NULL )
>2955	CompoundStatement	 
>2956	ReturnStatement	 
>2957	ExpressionStatement	 
>2958	CallExpression	printf ( \"Error opening file %s for reading\n\" , filename )
>2959	ArgumentList	\"Error opening file %s for reading\n\"
>2960	Argument	filename
>2961	Identifier	filename
>2962	Argument	\"Error opening file %s for reading\n\"
>2963	PrimaryExpression	\"Error opening file %s for reading\n\"
>2964	Callee	printf
>2965	Identifier	printf
>2966	Condition	 
>2967	EqualityExpression	f == NULL
>2968	Identifier	NULL
>2969	Identifier	f
>2970	IdentifierDeclStatement	 
>2971	IdentifierDecl	* f = fopen ( filename , \"r\" )
>2972	AssignmentExpr	* f = fopen ( filename , \"r\" )
>2973	CallExpression	fopen ( filename , \"r\" )
>2974	ArgumentList	filename
>2975	Argument	\"r\"
>2976	PrimaryExpression	\"r\"
>2977	Argument	filename
>2978	Identifier	filename
>2979	Callee	fopen
>2980	Identifier	fopen
>2981	Identifier	f
>2982	Identifier	f
>2983	IdentifierDeclType	FILE *
>2984	ExpressionStatement	 
>2985	CallExpression	printf ( \"[ReadBundleFile] Reading file...\n\" )
>2986	ArgumentList	\"[ReadBundleFile] Reading file...\n\"
>2987	Argument	\"[ReadBundleFile] Reading file...\n\"
>2988	PrimaryExpression	\"[ReadBundleFile] Reading file...\n\"
>2989	Callee	printf
>2990	Identifier	printf
>3083	FunctionDef	BaseApp 
>3084	ParameterList	const char * filename
>3085	Parameter	 
>3086	Identifier	filename
>3087	ParameterType	const char *
>3088	ReturnType	void
>3089	CompoundStatement	 
>3090	ExpressionStatement	 
>3091	Identifier	right_points
>3092	Statement	 
>3093	Statement	 
>3094	Statement	 
>3095	ExpressionStatement	 
>3096	Identifier	left_points
>3097	Statement	 
>3098	Statement	 
>3099	Statement	 
>3100	ExpressionStatement	 
>3101	CallExpression	TransformWorldReal ( )
>3102	ArgumentList	 
>3103	Callee	TransformWorldReal
>3104	Identifier	TransformWorldReal
>3105	ExpressionStatement	 
>3106	CallExpression	memcpy ( m_xform , T , 16 * sizeof ( double ) )
>3107	ArgumentList	m_xform
>3108	Argument	16 * sizeof ( double )
>3109	MultiplicativeExpression	16 * sizeof ( double )
>3110	SizeofExpr	sizeof ( double )
>3111	SizeofOperand	double
>3112	Sizeof	sizeof
>3113	PrimaryExpression	16
>3114	Argument	T
>3115	Identifier	T
>3116	Argument	m_xform
>3117	Identifier	m_xform
>3118	Callee	memcpy
>3119	Identifier	memcpy
>3120	ExpressionStatement	 
>3121	CallExpression	align_horn_3D ( num_points , right_points , left_points , 1 , T )
>3122	ArgumentList	num_points
>3123	Argument	T
>3124	Identifier	T
>3125	Argument	1
>3126	PrimaryExpression	1
>3127	Argument	left_points
>3128	Identifier	left_points
>3129	Argument	right_points
>3130	Identifier	right_points
>3131	Argument	num_points
>3132	Identifier	num_points
>3133	Callee	align_horn_3D
>3134	Identifier	align_horn_3D
>3135	IdentifierDeclStatement	 
>3136	IdentifierDecl	T [ 16 ]
>3137	PrimaryExpression	16
>3138	Identifier	T
>3139	IdentifierDeclType	double [ 16 ]
>3140	ForStatement	for ( int i = 0 ; i < num_csp_points ; i ++ )
>3141	CompoundStatement	 
>3142	ExpressionStatement	 
>3143	IncDecOp	count ++
>3144	IncDec	++
>3145	Identifier	count
>3146	ExpressionStatement	 
>3147	AssignmentExpr	right_points [ count ] = points_old_csp [ i ]
>3148	ArrayIndexing	points_old_csp [ i ]
>3149	Identifier	i
>3150	Identifier	points_old_csp
>3151	ArrayIndexing	right_points [ count ]
>3152	Identifier	count
>3153	Identifier	right_points
>3154	ExpressionStatement	 
>3155	AssignmentExpr	left_points [ count ] = points_new_csp [ i ]
>3156	ArrayIndexing	points_new_csp [ i ]
>3157	Identifier	i
>3158	Identifier	points_new_csp
>3159	ArrayIndexing	left_points [ count ]
>3160	Identifier	count
>3161	Identifier	left_points
>3162	IncDecOp	 
>3163	IncDec	++
>3164	Identifier	i
>3165	Condition	 
>3166	RelationalExpression	i < num_csp_points
>3167	Identifier	num_csp_points
>3168	Identifier	i
>3169	ForInit	 
>3170	IdentifierDeclStatement	int i = 0 ;
>3171	IdentifierDecl	i = 0
>3172	AssignmentExpr	i = 0
>3173	PrimaryExpression	0
>3174	Identifier	i
>3175	Identifier	i
>3176	IdentifierDeclType	int
>3177	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>3178	CompoundStatement	 
>3179	IfStatement	if ( old_images [ i ] . m_camera . m_adjusted )
>3180	CompoundStatement	 
>3181	ExpressionStatement	 
>3182	IncDecOp	count ++
>3183	IncDec	++
>3184	Identifier	count
>3185	ExpressionStatement	 
>3186	AssignmentExpr	right_points [ count ] = v3_new ( right_pos [ 0 ] , right_pos [ 1 ] , right_pos [ 2 ] )
>3187	CallExpression	v3_new ( right_pos [ 0 ] , right_pos [ 1 ] , right_pos [ 2 ] )
>3188	ArgumentList	right_pos [ 0 ]
>3189	Argument	right_pos [ 2 ]
>3190	ArrayIndexing	right_pos [ 2 ]
>3191	PrimaryExpression	2
>3192	Identifier	right_pos
>3193	Argument	right_pos [ 1 ]
>3194	ArrayIndexing	right_pos [ 1 ]
>3195	PrimaryExpression	1
>3196	Identifier	right_pos
>3197	Argument	right_pos [ 0 ]
>3198	ArrayIndexing	right_pos [ 0 ]
>3199	PrimaryExpression	0
>3200	Identifier	right_pos
>3201	Callee	v3_new
>3202	Identifier	v3_new
>3203	ArrayIndexing	right_points [ count ]
>3204	Identifier	count
>3205	Identifier	right_points
>3206	ExpressionStatement	 
>3207	AssignmentExpr	left_points [ count ] = v3_new ( left_pos [ 0 ] , left_pos [ 1 ] , left_pos [ 2 ] )
>3208	CallExpression	v3_new ( left_pos [ 0 ] , left_pos [ 1 ] , left_pos [ 2 ] )
>3209	ArgumentList	left_pos [ 0 ]
>3210	Argument	left_pos [ 2 ]
>3211	ArrayIndexing	left_pos [ 2 ]
>3212	PrimaryExpression	2
>3213	Identifier	left_pos
>3214	Argument	left_pos [ 1 ]
>3215	ArrayIndexing	left_pos [ 1 ]
>3216	PrimaryExpression	1
>3217	Identifier	left_pos
>3218	Argument	left_pos [ 0 ]
>3219	ArrayIndexing	left_pos [ 0 ]
>3220	PrimaryExpression	0
>3221	Identifier	left_pos
>3222	Callee	v3_new
>3223	Identifier	v3_new
>3224	ArrayIndexing	left_points [ count ]
>3225	Identifier	count
>3226	Identifier	left_points
>3227	ExpressionStatement	 
>3228	CallExpression	old_images [ i ] . m_camera . GetPosition ( right_pos )
>3229	ArgumentList	right_pos
>3230	Argument	right_pos
>3231	Identifier	right_pos
>3232	Callee	old_images [ i ] . m_camera . GetPosition
>3233	MemberAccess	old_images [ i ] . m_camera . GetPosition
>3234	Identifier	GetPosition
>3235	MemberAccess	old_images [ i ] . m_camera
>3236	Identifier	m_camera
>3237	ArrayIndexing	old_images [ i ]
>3238	Identifier	i
>3239	Identifier	old_images
>3240	ExpressionStatement	 
>3241	CallExpression	m_image_data [ i ] . m_camera . GetPosition ( left_pos )
>3242	ArgumentList	left_pos
>3243	Argument	left_pos
>3244	Identifier	left_pos
>3245	Callee	m_image_data [ i ] . m_camera . GetPosition
>3246	MemberAccess	m_image_data [ i ] . m_camera . GetPosition
>3247	Identifier	GetPosition
>3248	MemberAccess	m_image_data [ i ] . m_camera
>3249	Identifier	m_camera
>3250	ArrayIndexing	m_image_data [ i ]
>3251	Identifier	i
>3252	Identifier	m_image_data
>3253	IdentifierDeclStatement	 
>3254	IdentifierDecl	right_pos [ 3 ]
>3255	PrimaryExpression	3
>3256	Identifier	right_pos
>3257	IdentifierDeclType	double [ 3 ]
>3258	IdentifierDecl	left_pos [ 3 ]
>3259	PrimaryExpression	3
>3260	Identifier	left_pos
>3261	IdentifierDeclType	double [ 3 ]
>3262	Condition	 
>3263	MemberAccess	old_images [ i ] . m_camera . m_adjusted
>3264	Identifier	m_adjusted
>3265	MemberAccess	old_images [ i ] . m_camera
>3266	Identifier	m_camera
>3267	ArrayIndexing	old_images [ i ]
>3268	Identifier	i
>3269	Identifier	old_images
>3270	IncDecOp	 
>3271	IncDec	++
>3272	Identifier	i
>3273	Condition	 
>3274	RelationalExpression	i < num_images
>3275	Identifier	num_images
>3276	Identifier	i
>3277	ForInit	 
>3278	IdentifierDeclStatement	int i = 0 ;
>3279	IdentifierDecl	i = 0
>3280	AssignmentExpr	i = 0
>3281	PrimaryExpression	0
>3282	Identifier	i
>3283	Identifier	i
>3284	IdentifierDeclType	int
>3285	IdentifierDeclStatement	 
>3286	IdentifierDecl	count = 0
>3287	AssignmentExpr	count = 0
>3288	PrimaryExpression	0
>3289	Identifier	count
>3290	Identifier	count
>3291	IdentifierDeclType	int
>3292	IdentifierDeclStatement	 
>3293	IdentifierDecl	* right_points = new v3_t [ num_points ]
>3294	AssignmentExpr	* right_points = new v3_t [ num_points ]
>3295	Identifier	num_points
>3296	Identifier	num_points
>3297	Identifier	right_points
>3298	IdentifierDeclType	v3_t *
>3299	IdentifierDeclStatement	 
>3300	IdentifierDecl	* left_points = new v3_t [ num_points ]
>3301	AssignmentExpr	* left_points = new v3_t [ num_points ]
>3302	Identifier	num_points
>3303	Identifier	num_points
>3304	Identifier	left_points
>3305	IdentifierDeclType	v3_t *
>3306	IdentifierDeclStatement	 
>3307	IdentifierDecl	num_points = old_num_cameras + num_csp_points
>3308	AssignmentExpr	num_points = old_num_cameras + num_csp_points
>3309	AdditiveExpression	old_num_cameras + num_csp_points
>3310	Identifier	num_csp_points
>3311	Identifier	old_num_cameras
>3312	Identifier	num_points
>3313	Identifier	num_points
>3314	IdentifierDeclType	int
>3315	IdentifierDeclStatement	 
>3316	IdentifierDecl	num_csp_points = points_old_csp . size ( )
>3317	AssignmentExpr	num_csp_points = points_old_csp . size ( )
>3318	CallExpression	points_old_csp . size ( )
>3319	ArgumentList	 
>3320	Callee	points_old_csp . size
>3321	MemberAccess	points_old_csp . size
>3322	Identifier	size
>3323	Identifier	points_old_csp
>3324	Identifier	num_csp_points
>3325	Identifier	num_csp_points
>3326	IdentifierDeclType	int
>3327	ForStatement	for ( int i = 0 ; i < old_num_points ; i ++ )
>3328	CompoundStatement	 
>3329	ExpressionStatement	 
>3330	Label	 
>3331	Identifier	Next
>3332	ForStatement	for ( int j = i - 5 ; j < i + 5 ; j ++ )
>3333	CompoundStatement	 
>3334	IfStatement	if ( old_col [ 0 ] == col [ 0 ] && old_col [ 1 ] == col [ 1 ] && old_col [ 2 ] == col [ 2 ] )
>3335	CompoundStatement	 
>3336	GotoStatement	 
>3337	Identifier	Next
>3338	ExpressionStatement	 
>3339	CallExpression	points_new_csp . push_back ( v3_new ( pos [ 0 ] , pos [ 1 ] , pos [ 2 ] ) )
>3340	ArgumentList	v3_new ( pos [ 0 ] , pos [ 1 ] , pos [ 2 ] )
>3341	Argument	v3_new ( pos [ 0 ] , pos [ 1 ] , pos [ 2 ] )
>3342	CallExpression	v3_new ( pos [ 0 ] , pos [ 1 ] , pos [ 2 ] )
>3343	ArgumentList	pos [ 0 ]
>3344	Argument	pos [ 2 ]
>3345	ArrayIndexing	pos [ 2 ]
>3346	PrimaryExpression	2
>3347	Identifier	pos
>3348	Argument	pos [ 1 ]
>3349	ArrayIndexing	pos [ 1 ]
>3350	PrimaryExpression	1
>3351	Identifier	pos
>3352	Argument	pos [ 0 ]
>3353	ArrayIndexing	pos [ 0 ]
>3354	PrimaryExpression	0
>3355	Identifier	pos
>3356	Callee	v3_new
>3357	Identifier	v3_new
>3358	Callee	points_new_csp . push_back
>3359	MemberAccess	points_new_csp . push_back
>3360	Identifier	push_back
>3361	Identifier	points_new_csp
>3362	ExpressionStatement	 
>3363	CallExpression	points_old_csp . push_back ( v3_new ( old_pos [ 0 ] , old_pos [ 1 ] , old_pos [ 2 ] ) )
>3364	ArgumentList	v3_new ( old_pos [ 0 ] , old_pos [ 1 ] , old_pos [ 2 ] )
>3365	Argument	v3_new ( old_pos [ 0 ] , old_pos [ 1 ] , old_pos [ 2 ] )
>3366	CallExpression	v3_new ( old_pos [ 0 ] , old_pos [ 1 ] , old_pos [ 2 ] )
>3367	ArgumentList	old_pos [ 0 ]
>3368	Argument	old_pos [ 2 ]
>3369	ArrayIndexing	old_pos [ 2 ]
>3370	PrimaryExpression	2
>3371	Identifier	old_pos
>3372	Argument	old_pos [ 1 ]
>3373	ArrayIndexing	old_pos [ 1 ]
>3374	PrimaryExpression	1
>3375	Identifier	old_pos
>3376	Argument	old_pos [ 0 ]
>3377	ArrayIndexing	old_pos [ 0 ]
>3378	PrimaryExpression	0
>3379	Identifier	old_pos
>3380	Callee	v3_new
>3381	Identifier	v3_new
>3382	Callee	points_old_csp . push_back
>3383	MemberAccess	points_old_csp . push_back
>3384	Identifier	push_back
>3385	Identifier	points_old_csp
>3386	IdentifierDeclStatement	 
>3387	IdentifierDecl	* pos = m_point_data [ i ] . m_pos
>3388	AssignmentExpr	* pos = m_point_data [ i ] . m_pos
>3389	MemberAccess	m_point_data [ i ] . m_pos
>3390	Identifier	m_pos
>3391	ArrayIndexing	m_point_data [ i ]
>3392	Identifier	i
>3393	Identifier	m_point_data
>3394	Identifier	pos
>3395	Identifier	pos
>3396	IdentifierDeclType	double *
>3397	IdentifierDeclStatement	 
>3398	IdentifierDecl	* old_pos = old_points [ i ] . m_pos
>3399	AssignmentExpr	* old_pos = old_points [ i ] . m_pos
>3400	MemberAccess	old_points [ i ] . m_pos
>3401	Identifier	m_pos
>3402	ArrayIndexing	old_points [ i ]
>3403	Identifier	i
>3404	Identifier	old_points
>3405	Identifier	old_pos
>3406	Identifier	old_pos
>3407	IdentifierDeclType	double *
>3408	Condition	 
>3409	AndExpression	old_col [ 0 ] == col [ 0 ] && old_col [ 1 ] == col [ 1 ] && old_col [ 2 ] == col [ 2 ]
>3410	AndExpression	old_col [ 1 ] == col [ 1 ] && old_col [ 2 ] == col [ 2 ]
>3411	EqualityExpression	old_col [ 2 ] == col [ 2 ]
>3412	ArrayIndexing	col [ 2 ]
>3413	PrimaryExpression	2
>3414	Identifier	col
>3415	ArrayIndexing	old_col [ 2 ]
>3416	PrimaryExpression	2
>3417	Identifier	old_col
>3418	EqualityExpression	old_col [ 1 ] == col [ 1 ]
>3419	ArrayIndexing	col [ 1 ]
>3420	PrimaryExpression	1
>3421	Identifier	col
>3422	ArrayIndexing	old_col [ 1 ]
>3423	PrimaryExpression	1
>3424	Identifier	old_col
>3425	EqualityExpression	old_col [ 0 ] == col [ 0 ]
>3426	ArrayIndexing	col [ 0 ]
>3427	PrimaryExpression	0
>3428	Identifier	col
>3429	ArrayIndexing	old_col [ 0 ]
>3430	PrimaryExpression	0
>3431	Identifier	old_col
>3432	IdentifierDeclStatement	 
>3433	IdentifierDecl	* col = m_point_data [ j ] . m_color
>3434	AssignmentExpr	* col = m_point_data [ j ] . m_color
>3435	MemberAccess	m_point_data [ j ] . m_color
>3436	Identifier	m_color
>3437	ArrayIndexing	m_point_data [ j ]
>3438	Identifier	j
>3439	Identifier	m_point_data
>3440	Identifier	col
>3441	Identifier	col
>3442	IdentifierDeclType	float *
>3443	IdentifierDeclStatement	 
>3444	IdentifierDecl	* old_col = old_points [ i ] . m_color
>3445	AssignmentExpr	* old_col = old_points [ i ] . m_color
>3446	MemberAccess	old_points [ i ] . m_color
>3447	Identifier	m_color
>3448	ArrayIndexing	old_points [ i ]
>3449	Identifier	i
>3450	Identifier	old_points
>3451	Identifier	old_col
>3452	Identifier	old_col
>3453	IdentifierDeclType	float *
>3454	IfStatement	if ( j < 0 || j >= new_num_points )
>3455	ContinueStatement	 
>3456	Condition	 
>3457	OrExpression	j < 0 || j >= new_num_points
>3458	RelationalExpression	j >= new_num_points
>3459	Identifier	new_num_points
>3460	Identifier	j
>3461	RelationalExpression	j < 0
>3462	PrimaryExpression	0
>3463	Identifier	j
>3464	IncDecOp	 
>3465	IncDec	++
>3466	Identifier	j
>3467	Condition	 
>3468	RelationalExpression	j < i + 5
>3469	AdditiveExpression	i + 5
>3470	PrimaryExpression	5
>3471	Identifier	i
>3472	Identifier	j
>3473	ForInit	 
>3474	IdentifierDeclStatement	int j = i - 5 ;
>3475	IdentifierDecl	j = i - 5
>3476	AssignmentExpr	j = i - 5
>3477	AdditiveExpression	i - 5
>3478	PrimaryExpression	5
>3479	Identifier	i
>3480	Identifier	j
>3481	Identifier	j
>3482	IdentifierDeclType	int
>3483	IncDecOp	 
>3484	IncDec	++
>3485	Identifier	i
>3486	Condition	 
>3487	RelationalExpression	i < old_num_points
>3488	Identifier	old_num_points
>3489	Identifier	i
>3490	ForInit	 
>3491	IdentifierDeclStatement	int i = 0 ;
>3492	IdentifierDecl	i = 0
>3493	AssignmentExpr	i = 0
>3494	PrimaryExpression	0
>3495	Identifier	i
>3496	Identifier	i
>3497	IdentifierDeclType	int
>3498	IdentifierDeclStatement	 
>3499	IdentifierDecl	points_new_csp
>3500	Identifier	points_new_csp
>3501	IdentifierDeclType	std 
>3502	IdentifierDecl	points_old_csp
>3503	Identifier	points_old_csp
>3504	IdentifierDeclType	std 
>3505	IdentifierDeclStatement	 
>3506	IdentifierDecl	new_num_points = m_point_data . size ( )
>3507	AssignmentExpr	new_num_points = m_point_data . size ( )
>3508	CallExpression	m_point_data . size ( )
>3509	ArgumentList	 
>3510	Callee	m_point_data . size
>3511	MemberAccess	m_point_data . size
>3512	Identifier	size
>3513	Identifier	m_point_data
>3514	Identifier	new_num_points
>3515	Identifier	new_num_points
>3516	IdentifierDeclType	int
>3517	IdentifierDeclStatement	 
>3518	IdentifierDecl	old_num_points = old_points . size ( )
>3519	AssignmentExpr	old_num_points = old_points . size ( )
>3520	CallExpression	old_points . size ( )
>3521	ArgumentList	 
>3522	Callee	old_points . size
>3523	MemberAccess	old_points . size
>3524	Identifier	size
>3525	Identifier	old_points
>3526	Identifier	old_num_points
>3527	Identifier	old_num_points
>3528	IdentifierDeclType	int
>3529	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>3530	CompoundStatement	 
>3531	IfStatement	if ( m_image_data [ i ] . m_camera . m_adjusted )
>3532	ExpressionStatement	 
>3533	IncDecOp	num_cameras ++
>3534	IncDec	++
>3535	Identifier	num_cameras
>3536	Condition	 
>3537	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>3538	Identifier	m_adjusted
>3539	MemberAccess	m_image_data [ i ] . m_camera
>3540	Identifier	m_camera
>3541	ArrayIndexing	m_image_data [ i ]
>3542	Identifier	i
>3543	Identifier	m_image_data
>3544	IncDecOp	 
>3545	IncDec	++
>3546	Identifier	i
>3547	Condition	 
>3548	RelationalExpression	i < num_images
>3549	Identifier	num_images
>3550	Identifier	i
>3551	ForInit	 
>3552	IdentifierDeclStatement	int i = 0 ;
>3553	IdentifierDecl	i = 0
>3554	AssignmentExpr	i = 0
>3555	PrimaryExpression	0
>3556	Identifier	i
>3557	Identifier	i
>3558	IdentifierDeclType	int
>3559	IdentifierDeclStatement	 
>3560	IdentifierDecl	num_cameras = 0
>3561	AssignmentExpr	num_cameras = 0
>3562	PrimaryExpression	0
>3563	Identifier	num_cameras
>3564	Identifier	num_cameras
>3565	IdentifierDeclType	int
>3566	IfStatement	if ( m_bundle_version < 0.3 )
>3567	ExpressionStatement	 
>3568	CallExpression	FixReflectionBug ( )
>3569	ArgumentList	 
>3570	Callee	FixReflectionBug
>3571	Identifier	FixReflectionBug
>3572	Condition	 
>3573	RelationalExpression	m_bundle_version < 0.3
>3574	PrimaryExpression	0.3
>3575	Identifier	m_bundle_version
>3576	ExpressionStatement	 
>3577	CallExpression	ReadBundleFile ( filename )
>3578	ArgumentList	filename
>3579	Argument	filename
>3580	Identifier	filename
>3581	Callee	ReadBundleFile
>3582	Identifier	ReadBundleFile
>3583	ExpressionStatement	 
>3584	CallExpression	ClearModel ( )
>3585	ArgumentList	 
>3586	Callee	ClearModel
>3587	Identifier	ClearModel
>3588	IdentifierDeclStatement	 
>3589	IdentifierDecl	old_images = m_image_data
>3590	AssignmentExpr	old_images = m_image_data
>3591	Identifier	m_image_data
>3592	Identifier	m_image_data
>3593	Identifier	old_images
>3594	IdentifierDeclType	std 
>3595	IdentifierDeclStatement	 
>3596	IdentifierDecl	old_points = m_point_data
>3597	AssignmentExpr	old_points = m_point_data
>3598	Identifier	m_point_data
>3599	Identifier	m_point_data
>3600	Identifier	old_points
>3601	IdentifierDeclType	std 
>3602	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>3603	CompoundStatement	 
>3604	IfStatement	if ( m_image_data [ i ] . m_camera . m_adjusted )
>3605	ExpressionStatement	 
>3606	IncDecOp	old_num_cameras ++
>3607	IncDec	++
>3608	Identifier	old_num_cameras
>3609	Condition	 
>3610	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>3611	Identifier	m_adjusted
>3612	MemberAccess	m_image_data [ i ] . m_camera
>3613	Identifier	m_camera
>3614	ArrayIndexing	m_image_data [ i ]
>3615	Identifier	i
>3616	Identifier	m_image_data
>3617	IncDecOp	 
>3618	IncDec	++
>3619	Identifier	i
>3620	Condition	 
>3621	RelationalExpression	i < num_images
>3622	Identifier	num_images
>3623	Identifier	i
>3624	ForInit	 
>3625	IdentifierDeclStatement	int i = 0 ;
>3626	IdentifierDecl	i = 0
>3627	AssignmentExpr	i = 0
>3628	PrimaryExpression	0
>3629	Identifier	i
>3630	Identifier	i
>3631	IdentifierDeclType	int
>3632	IdentifierDeclStatement	 
>3633	IdentifierDecl	old_num_cameras = 0
>3634	AssignmentExpr	old_num_cameras = 0
>3635	PrimaryExpression	0
>3636	Identifier	old_num_cameras
>3637	Identifier	old_num_cameras
>3638	IdentifierDeclType	int
>3639	IdentifierDeclStatement	 
>3640	IdentifierDecl	num_images = GetNumImages ( )
>3641	AssignmentExpr	num_images = GetNumImages ( )
>3642	CallExpression	GetNumImages ( )
>3643	ArgumentList	 
>3644	Callee	GetNumImages
>3645	Identifier	GetNumImages
>3646	Identifier	num_images
>3647	Identifier	num_images
>3648	IdentifierDeclType	int
>3710	FunctionDef	BaseApp 
>3711	ParameterList	 
>3712	ReturnType	void
>3713	CompoundStatement	 
>3714	ExpressionStatement	 
>3715	CallExpression	m_point_data . clear ( )
>3716	ArgumentList	 
>3717	Callee	m_point_data . clear
>3718	MemberAccess	m_point_data . clear
>3719	Identifier	clear
>3720	Identifier	m_point_data
>3721	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>3722	CompoundStatement	 
>3723	ExpressionStatement	 
>3724	AssignmentExpr	m_image_data [ i ] . m_camera . m_adjusted = false
>3725	Identifier	false
>3726	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>3727	Identifier	m_adjusted
>3728	MemberAccess	m_image_data [ i ] . m_camera
>3729	Identifier	m_camera
>3730	ArrayIndexing	m_image_data [ i ]
>3731	Identifier	i
>3732	Identifier	m_image_data
>3733	IncDecOp	 
>3734	IncDec	++
>3735	Identifier	i
>3736	Condition	 
>3737	RelationalExpression	i < num_images
>3738	Identifier	num_images
>3739	Identifier	i
>3740	ForInit	 
>3741	IdentifierDeclStatement	int i = 0 ;
>3742	IdentifierDecl	i = 0
>3743	AssignmentExpr	i = 0
>3744	PrimaryExpression	0
>3745	Identifier	i
>3746	Identifier	i
>3747	IdentifierDeclType	int
>3748	IdentifierDeclStatement	 
>3749	IdentifierDecl	num_images = GetNumImages ( )
>3750	AssignmentExpr	num_images = GetNumImages ( )
>3751	CallExpression	GetNumImages ( )
>3752	ArgumentList	 
>3753	Callee	GetNumImages
>3754	Identifier	GetNumImages
>3755	Identifier	num_images
>3756	Identifier	num_images
>3757	IdentifierDeclType	int
>3771	FunctionDef	BaseApp 
>3772	ParameterList	const char * output_dir , const char * filename , int num_images , int num_cameras , int num_points , int * added_\
>3773	Parameter	 
>3774	Identifier	pt_views
>3775	ParameterType	std 
>3776	Parameter	 
>3777	Identifier	colors
>3778	ParameterType	v3_t *
>3779	Parameter	 
>3780	Identifier	points
>3781	ParameterType	v3_t *
>3782	Parameter	 
>3783	Identifier	cameras
>3784	ParameterType	camera_params_t *
>3785	Parameter	 
>3786	Identifier	added_order
>3787	ParameterType	int *
>3788	Parameter	 
>3789	Identifier	num_points
>3790	ParameterType	int
>3791	Parameter	 
>3792	Identifier	num_cameras
>3793	ParameterType	int
>3794	Parameter	 
>3795	Identifier	num_images
>3796	ParameterType	int
>3797	Parameter	 
>3798	Identifier	filename
>3799	ParameterType	const char *
>3800	Parameter	 
>3801	Identifier	output_dir
>3802	ParameterType	const char *
>3803	ReturnType	void
>3804	CompoundStatement	 
>3805	ExpressionStatement	 
>3806	CallExpression	printf ( \"[DumpOutputFile] Wrote file in %0.3fs\n\" , ( double ) ( end - start ) / ( double ) CLOCKS_PER_SEC )
>3807	ArgumentList	\"[DumpOutputFile] Wrote file in %0.3fs\n\"
>3808	Argument	( double ) ( end - start ) / ( double ) CLOCKS_PER_SEC
>3809	MultiplicativeExpression	( double ) ( end - start ) / ( double ) CLOCKS_PER_SEC
>3810	CastExpression	( double ) CLOCKS_PER_SEC
>3811	Identifier	CLOCKS_PER_SEC
>3812	CastTarget	double
>3813	CastExpression	( double ) ( end - start )
>3814	AdditiveExpression	end - start
>3815	Identifier	start
>3816	Identifier	end
>3817	CastTarget	double
>3818	Argument	\"[DumpOutputFile] Wrote file in %0.3fs\n\"
>3819	PrimaryExpression	\"[DumpOutputFile] Wrote file in %0.3fs\n\"
>3820	Callee	printf
>3821	Identifier	printf
>3822	IdentifierDeclStatement	 
>3823	IdentifierDecl	end = clock ( )
>3824	AssignmentExpr	end = clock ( )
>3825	CallExpression	clock ( )
>3826	ArgumentList	 
>3827	Callee	clock
>3828	Identifier	clock
>3829	Identifier	end
>3830	Identifier	end
>3831	IdentifierDeclType	clock_t
>3832	ExpressionStatement	 
>3833	CallExpression	fclose ( f )
>3834	ArgumentList	f
>3835	Argument	f
>3836	Identifier	f
>3837	Callee	fclose
>3838	Identifier	fclose
>3839	ForStatement	for ( int i = 0 ; i < num_outliers ; i ++ )
>3840	CompoundStatement	 
>3841	ExpressionStatement	 
>3842	CallExpression	fprintf ( f , \"%d %d\n\" , outliers [ i ] . first , outliers [ i ] . second )
>3843	ArgumentList	f
>3844	Argument	outliers [ i ] . second
>3845	MemberAccess	outliers [ i ] . second
>3846	Identifier	second
>3847	ArrayIndexing	outliers [ i ]
>3848	Identifier	i
>3849	Identifier	outliers
>3850	Argument	outliers [ i ] . first
>3851	MemberAccess	outliers [ i ] . first
>3852	Identifier	first
>3853	ArrayIndexing	outliers [ i ]
>3854	Identifier	i
>3855	Identifier	outliers
>3856	Argument	\"%d %d\n\"
>3857	PrimaryExpression	\"%d %d\n\"
>3858	Argument	f
>3859	Identifier	f
>3860	Callee	fprintf
>3861	Identifier	fprintf
>3862	IncDecOp	 
>3863	IncDec	++
>3864	Identifier	i
>3865	Condition	 
>3866	RelationalExpression	i < num_outliers
>3867	Identifier	num_outliers
>3868	Identifier	i
>3869	ForInit	 
>3870	IdentifierDeclStatement	int i = 0 ;
>3871	IdentifierDecl	i = 0
>3872	AssignmentExpr	i = 0
>3873	PrimaryExpression	0
>3874	Identifier	i
>3875	Identifier	i
>3876	IdentifierDeclType	int
>3877	ExpressionStatement	 
>3878	CallExpression	fprintf ( f , \"%d\n\" , num_outliers )
>3879	ArgumentList	f
>3880	Argument	num_outliers
>3881	Identifier	num_outliers
>3882	Argument	\"%d\n\"
>3883	PrimaryExpression	\"%d\n\"
>3884	Argument	f
>3885	Identifier	f
>3886	Callee	fprintf
>3887	Identifier	fprintf
>3888	IdentifierDeclStatement	 
>3889	IdentifierDecl	num_outliers = ( int ) outliers . size ( )
>3890	AssignmentExpr	num_outliers = ( int ) outliers . size ( )
>3891	CastExpression	( int ) outliers . size ( )
>3892	CallExpression	outliers . size ( )
>3893	ArgumentList	 
>3894	Callee	outliers . size
>3895	MemberAccess	outliers . size
>3896	Identifier	size
>3897	Identifier	outliers
>3898	CastTarget	int
>3899	Identifier	num_outliers
>3900	Identifier	num_outliers
>3901	IdentifierDeclType	int
>3902	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>3903	CompoundStatement	 
>3904	ForStatement	for ( int j = 0 ; j < num_keys ; j ++ )
>3905	CompoundStatement	 
>3906	IfStatement	if ( GetKey ( i , j ) . m_extra == - 2 )
>3907	CompoundStatement	 
>3908	ExpressionStatement	 
>3909	CallExpression	outliers . push_back ( ImageKey ( i , j ) )
>3910	ArgumentList	ImageKey ( i , j )
>3911	Argument	ImageKey ( i , j )
>3912	CallExpression	ImageKey ( i , j )
>3913	ArgumentList	i
>3914	Argument	j
>3915	Identifier	j
>3916	Argument	i
>3917	Identifier	i
>3918	Callee	ImageKey
>3919	Identifier	ImageKey
>3920	Callee	outliers . push_back
>3921	MemberAccess	outliers . push_back
>3922	Identifier	push_back
>3923	Identifier	outliers
>3924	Condition	 
>3925	EqualityExpression	GetKey ( i , j ) . m_extra == - 2
>3926	UnaryOp	- 2
>3927	PrimaryExpression	2
>3928	UnaryOperator	-
>3929	MemberAccess	GetKey ( i , j ) . m_extra
>3930	Identifier	m_extra
>3931	CallExpression	GetKey ( i , j )
>3932	ArgumentList	i
>3933	Argument	j
>3934	Identifier	j
>3935	Argument	i
>3936	Identifier	i
>3937	Callee	GetKey
>3938	Identifier	GetKey
>3939	IncDecOp	 
>3940	IncDec	++
>3941	Identifier	j
>3942	Condition	 
>3943	RelationalExpression	j < num_keys
>3944	Identifier	num_keys
>3945	Identifier	j
>3946	ForInit	 
>3947	IdentifierDeclStatement	int j = 0 ;
>3948	IdentifierDecl	j = 0
>3949	AssignmentExpr	j = 0
>3950	PrimaryExpression	0
>3951	Identifier	j
>3952	Identifier	j
>3953	IdentifierDeclType	int
>3954	IdentifierDeclStatement	 
>3955	IdentifierDecl	num_keys = GetNumKeys ( i )
>3956	AssignmentExpr	num_keys = GetNumKeys ( i )
>3957	CallExpression	GetNumKeys ( i )
>3958	ArgumentList	i
>3959	Argument	i
>3960	Identifier	i
>3961	Callee	GetNumKeys
>3962	Identifier	GetNumKeys
>3963	Identifier	num_keys
>3964	Identifier	num_keys
>3965	IdentifierDeclType	int
>3966	IfStatement	if ( idx == - 1 )
>3967	ContinueStatement	 
>3968	Condition	 
>3969	EqualityExpression	idx == - 1
>3970	UnaryOp	- 1
>3971	PrimaryExpression	1
>3972	UnaryOperator	-
>3973	Identifier	idx
>3974	ForStatement	for ( int j = 0 ; j < num_cameras ; j ++ )
>3975	CompoundStatement	 
>3976	IfStatement	if ( added_order [ j ] == i )
>3977	CompoundStatement	 
>3978	BreakStatement	 
>3979	ExpressionStatement	 
>3980	AssignmentExpr	idx = j
>3981	Identifier	j
>3982	Identifier	idx
>3983	Condition	 
>3984	EqualityExpression	added_order [ j ] == i
>3985	Identifier	i
>3986	ArrayIndexing	added_order [ j ]
>3987	Identifier	j
>3988	Identifier	added_order
>3989	IncDecOp	 
>3990	IncDec	++
>3991	Identifier	j
>3992	Condition	 
>3993	RelationalExpression	j < num_cameras
>3994	Identifier	num_cameras
>3995	Identifier	j
>3996	ForInit	 
>3997	IdentifierDeclStatement	int j = 0 ;
>3998	IdentifierDecl	j = 0
>3999	AssignmentExpr	j = 0
>4000	PrimaryExpression	0
>4001	Identifier	j
>4002	Identifier	j
>4003	IdentifierDeclType	int
>4004	IdentifierDeclStatement	 
>4005	IdentifierDecl	idx = - 1
>4006	AssignmentExpr	idx = - 1
>4007	UnaryOp	- 1
>4008	PrimaryExpression	1
>4009	UnaryOperator	-
>4010	Identifier	idx
>4011	Identifier	idx
>4012	IdentifierDeclType	int
>4013	IncDecOp	 
>4014	IncDec	++
>4015	Identifier	i
>4016	Condition	 
>4017	RelationalExpression	i < num_images
>4018	Identifier	num_images
>4019	Identifier	i
>4020	ForInit	 
>4021	IdentifierDeclStatement	int i = 0 ;
>4022	IdentifierDecl	i = 0
>4023	AssignmentExpr	i = 0
>4024	PrimaryExpression	0
>4025	Identifier	i
>4026	Identifier	i
>4027	IdentifierDeclType	int
>4028	IdentifierDeclStatement	 
>4029	IdentifierDecl	outliers
>4030	Identifier	outliers
>4031	IdentifierDeclType	ImageKeyVector
>4032	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>4033	CompoundStatement	 
>4034	IfStatement	if ( num_visible > 0 )
>4035	CompoundStatement	 
>4036	ExpressionStatement	 
>4037	CallExpression	fprintf ( f , \"\n\" )
>4038	ArgumentList	f
>4039	Argument	\"\n\"
>4040	PrimaryExpression	\"\n\"
>4041	Argument	f
>4042	Identifier	f
>4043	Callee	fprintf
>4044	Identifier	fprintf
>4045	ForStatement	for ( int j = 0 ; j < num_visible ; j ++ )
>4046	CompoundStatement	 
>4047	ExpressionStatement	 
>4048	CallExpression	fprintf ( f , \" %d %d %0.4f %0.4f\" , img , key , x , y )
>4049	ArgumentList	f
>4050	Argument	y
>4051	Identifier	y
>4052	Argument	x
>4053	Identifier	x
>4054	Argument	key
>4055	Identifier	key
>4056	Argument	img
>4057	Identifier	img
>4058	Argument	\" %d %d %0.4f %0.4f\"
>4059	PrimaryExpression	\" %d %d %0.4f %0.4f\"
>4060	Argument	f
>4061	Identifier	f
>4062	Callee	fprintf
>4063	Identifier	fprintf
>4064	IdentifierDeclStatement	 
>4065	IdentifierDecl	y = m_image_data [ img ] . m_keys [ key ] . m_y
>4066	AssignmentExpr	y = m_image_data [ img ] . m_keys [ key ] . m_y
>4067	MemberAccess	m_image_data [ img ] . m_keys [ key ] . m_y
>4068	Identifier	m_y
>4069	ArrayIndexing	m_image_data [ img ] . m_keys [ key ]
>4070	Identifier	key
>4071	MemberAccess	m_image_data [ img ] . m_keys
>4072	Identifier	m_keys
>4073	ArrayIndexing	m_image_data [ img ]
>4074	Identifier	img
>4075	Identifier	m_image_data
>4076	Identifier	y
>4077	Identifier	y
>4078	IdentifierDeclType	double
>4079	IdentifierDeclStatement	 
>4080	IdentifierDecl	x = m_image_data [ img ] . m_keys [ key ] . m_x
>4081	AssignmentExpr	x = m_image_data [ img ] . m_keys [ key ] . m_x
>4082	MemberAccess	m_image_data [ img ] . m_keys [ key ] . m_x
>4083	Identifier	m_x
>4084	ArrayIndexing	m_image_data [ img ] . m_keys [ key ]
>4085	Identifier	key
>4086	MemberAccess	m_image_data [ img ] . m_keys
>4087	Identifier	m_keys
>4088	ArrayIndexing	m_image_data [ img ]
>4089	Identifier	img
>4090	Identifier	m_image_data
>4091	Identifier	x
>4092	Identifier	x
>4093	IdentifierDeclType	double
>4094	IdentifierDeclStatement	 
>4095	IdentifierDecl	key = pt_views [ i ] [ j ] . second
>4096	AssignmentExpr	key = pt_views [ i ] [ j ] . second
>4097	MemberAccess	pt_views [ i ] [ j ] . second
>4098	Identifier	second
>4099	ArrayIndexing	pt_views [ i ] [ j ]
>4100	Identifier	j
>4101	ArrayIndexing	pt_views [ i ]
>4102	Identifier	i
>4103	Identifier	pt_views
>4104	Identifier	key
>4105	Identifier	key
>4106	IdentifierDeclType	int
>4107	IdentifierDeclStatement	 
>4108	IdentifierDecl	img = added_order [ pt_views [ i ] [ j ] . first ]
>4109	AssignmentExpr	img = added_order [ pt_views [ i ] [ j ] . first ]
>4110	ArrayIndexing	added_order [ pt_views [ i ] [ j ] . first ]
>4111	MemberAccess	pt_views [ i ] [ j ] . first
>4112	Identifier	first
>4113	ArrayIndexing	pt_views [ i ] [ j ]
>4114	Identifier	j
>4115	ArrayIndexing	pt_views [ i ]
>4116	Identifier	i
>4117	Identifier	pt_views
>4118	Identifier	added_order
>4119	Identifier	img
>4120	Identifier	img
>4121	IdentifierDeclType	int
>4122	IncDecOp	 
>4123	IncDec	++
>4124	Identifier	j
>4125	Condition	 
>4126	RelationalExpression	j < num_visible
>4127	Identifier	num_visible
>4128	Identifier	j
>4129	ForInit	 
>4130	IdentifierDeclStatement	int j = 0 ;
>4131	IdentifierDecl	j = 0
>4132	AssignmentExpr	j = 0
>4133	PrimaryExpression	0
>4134	Identifier	j
>4135	Identifier	j
>4136	IdentifierDeclType	int
>4137	ExpressionStatement	 
>4138	CallExpression	fprintf ( f , \"%d\" , num_visible )
>4139	ArgumentList	f
>4140	Argument	num_visible
>4141	Identifier	num_visible
>4142	Argument	\"%d\"
>4143	PrimaryExpression	\"%d\"
>4144	Argument	f
>4145	Identifier	f
>4146	Callee	fprintf
>4147	Identifier	fprintf
>4148	IdentifierDeclStatement	 
>4149	IdentifierDecl	num_visible = ( int ) pt_views [ i ] . size ( )
>4150	AssignmentExpr	num_visible = ( int ) pt_views [ i ] . size ( )
>4151	CastExpression	( int ) pt_views [ i ] . size ( )
>4152	CallExpression	pt_views [ i ] . size ( )
>4153	ArgumentList	 
>4154	Callee	pt_views [ i ] . size
>4155	MemberAccess	pt_views [ i ] . size
>4156	Identifier	size
>4157	ArrayIndexing	pt_views [ i ]
>4158	Identifier	i
>4159	Identifier	pt_views
>4160	CastTarget	int
>4161	Identifier	num_visible
>4162	Identifier	num_visible
>4163	IdentifierDeclType	int
>4164	ExpressionStatement	 
>4165	CallExpression	fprintf ( f , \"%d %d %d\n\" , iround ( Vx ( colors [ i ] ) ) , iround ( Vy ( colors [ i ] ) ) , iround ( Vz ( colors [ \
>4166	ArgumentList	f
>4167	Argument	iround ( Vz ( colors [ i ] ) )
>4168	CallExpression	iround ( Vz ( colors [ i ] ) )
>4169	ArgumentList	Vz ( colors [ i ] )
>4170	Argument	Vz ( colors [ i ] )
>4171	CallExpression	Vz ( colors [ i ] )
>4172	ArgumentList	colors [ i ]
>4173	Argument	colors [ i ]
>4174	ArrayIndexing	colors [ i ]
>4175	Identifier	i
>4176	Identifier	colors
>4177	Callee	Vz
>4178	Identifier	Vz
>4179	Callee	iround
>4180	Identifier	iround
>4181	Argument	iround ( Vy ( colors [ i ] ) )
>4182	CallExpression	iround ( Vy ( colors [ i ] ) )
>4183	ArgumentList	Vy ( colors [ i ] )
>4184	Argument	Vy ( colors [ i ] )
>4185	CallExpression	Vy ( colors [ i ] )
>4186	ArgumentList	colors [ i ]
>4187	Argument	colors [ i ]
>4188	ArrayIndexing	colors [ i ]
>4189	Identifier	i
>4190	Identifier	colors
>4191	Callee	Vy
>4192	Identifier	Vy
>4193	Callee	iround
>4194	Identifier	iround
>4195	Argument	iround ( Vx ( colors [ i ] ) )
>4196	CallExpression	iround ( Vx ( colors [ i ] ) )
>4197	ArgumentList	Vx ( colors [ i ] )
>4198	Argument	Vx ( colors [ i ] )
>4199	CallExpression	Vx ( colors [ i ] )
>4200	ArgumentList	colors [ i ]
>4201	Argument	colors [ i ]
>4202	ArrayIndexing	colors [ i ]
>4203	Identifier	i
>4204	Identifier	colors
>4205	Callee	Vx
>4206	Identifier	Vx
>4207	Callee	iround
>4208	Identifier	iround
>4209	Argument	\"%d %d %d\n\"
>4210	PrimaryExpression	\"%d %d %d\n\"
>4211	Argument	f
>4212	Identifier	f
>4213	Callee	fprintf
>4214	Identifier	fprintf
>4215	ExpressionStatement	 
>4216	CallExpression	fprintf ( f , \"%0.10e %0.10e %0.10e\n\" , Vx ( points [ i ] ) , Vy ( points [ i ] ) , Vz ( points [ i ] ) )
>4217	ArgumentList	f
>4218	Argument	Vz ( points [ i ] )
>4219	CallExpression	Vz ( points [ i ] )
>4220	ArgumentList	points [ i ]
>4221	Argument	points [ i ]
>4222	ArrayIndexing	points [ i ]
>4223	Identifier	i
>4224	Identifier	points
>4225	Callee	Vz
>4226	Identifier	Vz
>4227	Argument	Vy ( points [ i ] )
>4228	CallExpression	Vy ( points [ i ] )
>4229	ArgumentList	points [ i ]
>4230	Argument	points [ i ]
>4231	ArrayIndexing	points [ i ]
>4232	Identifier	i
>4233	Identifier	points
>4234	Callee	Vy
>4235	Identifier	Vy
>4236	Argument	Vx ( points [ i ] )
>4237	CallExpression	Vx ( points [ i ] )
>4238	ArgumentList	points [ i ]
>4239	Argument	points [ i ]
>4240	ArrayIndexing	points [ i ]
>4241	Identifier	i
>4242	Identifier	points
>4243	Callee	Vx
>4244	Identifier	Vx
>4245	Argument	\"%0.10e %0.10e %0.10e\n\"
>4246	PrimaryExpression	\"%0.10e %0.10e %0.10e\n\"
>4247	Argument	f
>4248	Identifier	f
>4249	Callee	fprintf
>4250	Identifier	fprintf
>4251	Condition	 
>4252	RelationalExpression	num_visible > 0
>4253	PrimaryExpression	0
>4254	Identifier	num_visible
>4255	IdentifierDeclStatement	 
>4256	IdentifierDecl	num_visible = ( int ) pt_views [ i ] . size ( )
>4257	AssignmentExpr	num_visible = ( int ) pt_views [ i ] . size ( )
>4258	CastExpression	( int ) pt_views [ i ] . size ( )
>4259	CallExpression	pt_views [ i ] . size ( )
>4260	ArgumentList	 
>4261	Callee	pt_views [ i ] . size
>4262	MemberAccess	pt_views [ i ] . size
>4263	Identifier	size
>4264	ArrayIndexing	pt_views [ i ]
>4265	Identifier	i
>4266	Identifier	pt_views
>4267	CastTarget	int
>4268	Identifier	num_visible
>4269	Identifier	num_visible
>4270	IdentifierDeclType	int
>4271	IncDecOp	 
>4272	IncDec	++
>4273	Identifier	i
>4274	Condition	 
>4275	RelationalExpression	i < num_points
>4276	Identifier	num_points
>4277	Identifier	i
>4278	ForInit	 
>4279	IdentifierDeclStatement	int i = 0 ;
>4280	IdentifierDecl	i = 0
>4281	AssignmentExpr	i = 0
>4282	PrimaryExpression	0
>4283	Identifier	i
>4284	Identifier	i
>4285	IdentifierDeclType	int
>4286	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>4287	CompoundStatement	 
>4288	IfStatement	if ( idx == - 1 )
>4289	ElseStatement	else
>4290	CompoundStatement	 
>4291	ExpressionStatement	 
>4292	CallExpression	fprintf ( f , \"%0.10e %0.10e %0.10e\n\" , t [ 0 ] , t [ 1 ] , t [ 2 ] )
>4293	ArgumentList	f
>4294	Argument	t [ 2 ]
>4295	ArrayIndexing	t [ 2 ]
>4296	PrimaryExpression	2
>4297	Identifier	t
>4298	Argument	t [ 1 ]
>4299	ArrayIndexing	t [ 1 ]
>4300	PrimaryExpression	1
>4301	Identifier	t
>4302	Argument	t [ 0 ]
>4303	ArrayIndexing	t [ 0 ]
>4304	PrimaryExpression	0
>4305	Identifier	t
>4306	Argument	\"%0.10e %0.10e %0.10e\n\"
>4307	PrimaryExpression	\"%0.10e %0.10e %0.10e\n\"
>4308	Argument	f
>4309	Identifier	f
>4310	Callee	fprintf
>4311	Identifier	fprintf
>4312	ExpressionStatement	 
>4313	CallExpression	matrix_scale ( 3 , 1 , t , - 1.0 , t )
>4314	ArgumentList	3
>4315	Argument	t
>4316	Identifier	t
>4317	Argument	- 1.0
>4318	UnaryOp	- 1.0
>4319	PrimaryExpression	1.0
>4320	UnaryOperator	-
>4321	Argument	t
>4322	Identifier	t
>4323	Argument	1
>4324	PrimaryExpression	1
>4325	Argument	3
>4326	PrimaryExpression	3
>4327	Callee	matrix_scale
>4328	Identifier	matrix_scale
>4329	ExpressionStatement	 
>4330	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , cameras [ idx ] . R , cameras [ idx ] . t , t )
>4331	ArgumentList	3
>4332	Argument	t
>4333	Identifier	t
>4334	Argument	cameras [ idx ] . t
>4335	MemberAccess	cameras [ idx ] . t
>4336	Identifier	t
>4337	ArrayIndexing	cameras [ idx ]
>4338	Identifier	idx
>4339	Identifier	cameras
>4340	Argument	cameras [ idx ] . R
>4341	MemberAccess	cameras [ idx ] . R
>4342	Identifier	R
>4343	ArrayIndexing	cameras [ idx ]
>4344	Identifier	idx
>4345	Identifier	cameras
>4346	Argument	1
>4347	PrimaryExpression	1
>4348	Argument	3
>4349	PrimaryExpression	3
>4350	Argument	3
>4351	PrimaryExpression	3
>4352	Argument	3
>4353	PrimaryExpression	3
>4354	Callee	matrix_product
>4355	Identifier	matrix_product
>4356	IdentifierDeclStatement	 
>4357	IdentifierDecl	t [ 3 ]
>4358	PrimaryExpression	3
>4359	Identifier	t
>4360	IdentifierDeclType	double [ 3 ]
>4361	ExpressionStatement	 
>4362	CallExpression	fprintf ( f , \"%0.10e %0.10e %0.10e\n\" , cameras [ idx ] . R [ 6 ] , cameras [ idx ] . R [ 7 ] , cameras [ idx ] \
>4363	ArgumentList	f
>4364	Argument	cameras [ idx ] . R [ 8 ]
>4365	ArrayIndexing	cameras [ idx ] . R [ 8 ]
>4366	PrimaryExpression	8
>4367	MemberAccess	cameras [ idx ] . R
>4368	Identifier	R
>4369	ArrayIndexing	cameras [ idx ]
>4370	Identifier	idx
>4371	Identifier	cameras
>4372	Argument	cameras [ idx ] . R [ 7 ]
>4373	ArrayIndexing	cameras [ idx ] . R [ 7 ]
>4374	PrimaryExpression	7
>4375	MemberAccess	cameras [ idx ] . R
>4376	Identifier	R
>4377	ArrayIndexing	cameras [ idx ]
>4378	Identifier	idx
>4379	Identifier	cameras
>4380	Argument	cameras [ idx ] . R [ 6 ]
>4381	ArrayIndexing	cameras [ idx ] . R [ 6 ]
>4382	PrimaryExpression	6
>4383	MemberAccess	cameras [ idx ] . R
>4384	Identifier	R
>4385	ArrayIndexing	cameras [ idx ]
>4386	Identifier	idx
>4387	Identifier	cameras
>4388	Argument	\"%0.10e %0.10e %0.10e\n\"
>4389	PrimaryExpression	\"%0.10e %0.10e %0.10e\n\"
>4390	Argument	f
>4391	Identifier	f
>4392	Callee	fprintf
>4393	Identifier	fprintf
>4394	ExpressionStatement	 
>4395	CallExpression	fprintf ( f , \"%0.10e %0.10e %0.10e\n\" , cameras [ idx ] . R [ 3 ] , cameras [ idx ] . R [ 4 ] , cameras [ idx ] \
>4396	ArgumentList	f
>4397	Argument	cameras [ idx ] . R [ 5 ]
>4398	ArrayIndexing	cameras [ idx ] . R [ 5 ]
>4399	PrimaryExpression	5
>4400	MemberAccess	cameras [ idx ] . R
>4401	Identifier	R
>4402	ArrayIndexing	cameras [ idx ]
>4403	Identifier	idx
>4404	Identifier	cameras
>4405	Argument	cameras [ idx ] . R [ 4 ]
>4406	ArrayIndexing	cameras [ idx ] . R [ 4 ]
>4407	PrimaryExpression	4
>4408	MemberAccess	cameras [ idx ] . R
>4409	Identifier	R
>4410	ArrayIndexing	cameras [ idx ]
>4411	Identifier	idx
>4412	Identifier	cameras
>4413	Argument	cameras [ idx ] . R [ 3 ]
>4414	ArrayIndexing	cameras [ idx ] . R [ 3 ]
>4415	PrimaryExpression	3
>4416	MemberAccess	cameras [ idx ] . R
>4417	Identifier	R
>4418	ArrayIndexing	cameras [ idx ]
>4419	Identifier	idx
>4420	Identifier	cameras
>4421	Argument	\"%0.10e %0.10e %0.10e\n\"
>4422	PrimaryExpression	\"%0.10e %0.10e %0.10e\n\"
>4423	Argument	f
>4424	Identifier	f
>4425	Callee	fprintf
>4426	Identifier	fprintf
>4427	ExpressionStatement	 
>4428	CallExpression	fprintf ( f , \"%0.10e %0.10e %0.10e\n\" , cameras [ idx ] . R [ 0 ] , cameras [ idx ] . R [ 1 ] , cameras [ idx ] \
>4429	ArgumentList	f
>4430	Argument	cameras [ idx ] . R [ 2 ]
>4431	ArrayIndexing	cameras [ idx ] . R [ 2 ]
>4432	PrimaryExpression	2
>4433	MemberAccess	cameras [ idx ] . R
>4434	Identifier	R
>4435	ArrayIndexing	cameras [ idx ]
>4436	Identifier	idx
>4437	Identifier	cameras
>4438	Argument	cameras [ idx ] . R [ 1 ]
>4439	ArrayIndexing	cameras [ idx ] . R [ 1 ]
>4440	PrimaryExpression	1
>4441	MemberAccess	cameras [ idx ] . R
>4442	Identifier	R
>4443	ArrayIndexing	cameras [ idx ]
>4444	Identifier	idx
>4445	Identifier	cameras
>4446	Argument	cameras [ idx ] . R [ 0 ]
>4447	ArrayIndexing	cameras [ idx ] . R [ 0 ]
>4448	PrimaryExpression	0
>4449	MemberAccess	cameras [ idx ] . R
>4450	Identifier	R
>4451	ArrayIndexing	cameras [ idx ]
>4452	Identifier	idx
>4453	Identifier	cameras
>4454	Argument	\"%0.10e %0.10e %0.10e\n\"
>4455	PrimaryExpression	\"%0.10e %0.10e %0.10e\n\"
>4456	Argument	f
>4457	Identifier	f
>4458	Callee	fprintf
>4459	Identifier	fprintf
>4460	ExpressionStatement	 
>4461	CallExpression	fprintf ( f , \"%0.10e %0.10e %0.10e\n\" , cameras [ idx ] . f , cameras [ idx ] . k [ 0 ] , cameras [ idx ] . k [ \
>4462	ArgumentList	f
>4463	Argument	cameras [ idx ] . k [ 1 ]
>4464	ArrayIndexing	cameras [ idx ] . k [ 1 ]
>4465	PrimaryExpression	1
>4466	MemberAccess	cameras [ idx ] . k
>4467	Identifier	k
>4468	ArrayIndexing	cameras [ idx ]
>4469	Identifier	idx
>4470	Identifier	cameras
>4471	Argument	cameras [ idx ] . k [ 0 ]
>4472	ArrayIndexing	cameras [ idx ] . k [ 0 ]
>4473	PrimaryExpression	0
>4474	MemberAccess	cameras [ idx ] . k
>4475	Identifier	k
>4476	ArrayIndexing	cameras [ idx ]
>4477	Identifier	idx
>4478	Identifier	cameras
>4479	Argument	cameras [ idx ] . f
>4480	MemberAccess	cameras [ idx ] . f
>4481	Identifier	f
>4482	ArrayIndexing	cameras [ idx ]
>4483	Identifier	idx
>4484	Identifier	cameras
>4485	Argument	\"%0.10e %0.10e %0.10e\n\"
>4486	PrimaryExpression	\"%0.10e %0.10e %0.10e\n\"
>4487	Argument	f
>4488	Identifier	f
>4489	Callee	fprintf
>4490	Identifier	fprintf
>4491	CompoundStatement	 
>4492	ExpressionStatement	 
>4493	CallExpression	fprintf ( f , \"0 0 0\n0 0 0\n0 0 0\n0 0 0\n\" )
>4494	ArgumentList	f
>4495	Argument	\"0 0 0\n0 0 0\n0 0 0\n0 0 0\n\"
>4496	PrimaryExpression	\"0 0 0\n0 0 0\n0 0 0\n0 0 0\n\"
>4497	Argument	f
>4498	Identifier	f
>4499	Callee	fprintf
>4500	Identifier	fprintf
>4501	ExpressionStatement	 
>4502	CallExpression	fprintf ( f , \"0 0 0\n\" )
>4503	ArgumentList	f
>4504	Argument	\"0 0 0\n\"
>4505	PrimaryExpression	\"0 0 0\n\"
>4506	Argument	f
>4507	Identifier	f
>4508	Callee	fprintf
>4509	Identifier	fprintf
>4510	Condition	 
>4511	EqualityExpression	idx == - 1
>4512	UnaryOp	- 1
>4513	PrimaryExpression	1
>4514	UnaryOperator	-
>4515	Identifier	idx
>4516	ForStatement	for ( int j = 0 ; j < num_cameras ; j ++ )
>4517	CompoundStatement	 
>4518	IfStatement	if ( added_order [ j ] == i )
>4519	CompoundStatement	 
>4520	BreakStatement	 
>4521	ExpressionStatement	 
>4522	AssignmentExpr	idx = j
>4523	Identifier	j
>4524	Identifier	idx
>4525	Condition	 
>4526	EqualityExpression	added_order [ j ] == i
>4527	Identifier	i
>4528	ArrayIndexing	added_order [ j ]
>4529	Identifier	j
>4530	Identifier	added_order
>4531	IncDecOp	 
>4532	IncDec	++
>4533	Identifier	j
>4534	Condition	 
>4535	RelationalExpression	j < num_cameras
>4536	Identifier	num_cameras
>4537	Identifier	j
>4538	ForInit	 
>4539	IdentifierDeclStatement	int j = 0 ;
>4540	IdentifierDecl	j = 0
>4541	AssignmentExpr	j = 0
>4542	PrimaryExpression	0
>4543	Identifier	j
>4544	Identifier	j
>4545	IdentifierDeclType	int
>4546	IdentifierDeclStatement	 
>4547	IdentifierDecl	idx = - 1
>4548	AssignmentExpr	idx = - 1
>4549	UnaryOp	- 1
>4550	PrimaryExpression	1
>4551	UnaryOperator	-
>4552	Identifier	idx
>4553	Identifier	idx
>4554	IdentifierDeclType	int
>4555	ExpressionStatement	 
>4556	CallExpression	fprintf ( f , \"%s %d %d\n\" , m_image_data [ i ] . m_name , m_image_data [ i ] . GetWidth ( ) , m_image_data [ i ] \
>4557	ArgumentList	f
>4558	Argument	m_image_data [ i ] . GetHeight ( )
>4559	CallExpression	m_image_data [ i ] . GetHeight ( )
>4560	ArgumentList	 
>4561	Callee	m_image_data [ i ] . GetHeight
>4562	MemberAccess	m_image_data [ i ] . GetHeight
>4563	Identifier	GetHeight
>4564	ArrayIndexing	m_image_data [ i ]
>4565	Identifier	i
>4566	Identifier	m_image_data
>4567	Argument	m_image_data [ i ] . GetWidth ( )
>4568	CallExpression	m_image_data [ i ] . GetWidth ( )
>4569	ArgumentList	 
>4570	Callee	m_image_data [ i ] . GetWidth
>4571	MemberAccess	m_image_data [ i ] . GetWidth
>4572	Identifier	GetWidth
>4573	ArrayIndexing	m_image_data [ i ]
>4574	Identifier	i
>4575	Identifier	m_image_data
>4576	Argument	m_image_data [ i ] . m_name
>4577	MemberAccess	m_image_data [ i ] . m_name
>4578	Identifier	m_name
>4579	ArrayIndexing	m_image_data [ i ]
>4580	Identifier	i
>4581	Identifier	m_image_data
>4582	Argument	\"%s %d %d\n\"
>4583	PrimaryExpression	\"%s %d %d\n\"
>4584	Argument	f
>4585	Identifier	f
>4586	Callee	fprintf
>4587	Identifier	fprintf
>4588	IncDecOp	 
>4589	IncDec	++
>4590	Identifier	i
>4591	Condition	 
>4592	RelationalExpression	i < num_images
>4593	Identifier	num_images
>4594	Identifier	i
>4595	ForInit	 
>4596	IdentifierDeclStatement	int i = 0 ;
>4597	IdentifierDecl	i = 0
>4598	AssignmentExpr	i = 0
>4599	PrimaryExpression	0
>4600	Identifier	i
>4601	Identifier	i
>4602	IdentifierDeclType	int
>4603	ExpressionStatement	 
>4604	CallExpression	fprintf ( f , \"%d %d\n\" , num_images , num_visible_points )
>4605	ArgumentList	f
>4606	Argument	num_visible_points
>4607	Identifier	num_visible_points
>4608	Argument	num_images
>4609	Identifier	num_images
>4610	Argument	\"%d %d\n\"
>4611	PrimaryExpression	\"%d %d\n\"
>4612	Argument	f
>4613	Identifier	f
>4614	Callee	fprintf
>4615	Identifier	fprintf
>4616	ExpressionStatement	 
>4617	CallExpression	fprintf ( f , \"# Bundle file v0.3\n\" )
>4618	ArgumentList	f
>4619	Argument	\"# Bundle file v0.3\n\"
>4620	PrimaryExpression	\"# Bundle file v0.3\n\"
>4621	Argument	f
>4622	Identifier	f
>4623	Callee	fprintf
>4624	Identifier	fprintf
>4625	IfStatement	if ( f == NULL )
>4626	CompoundStatement	 
>4627	ReturnStatement	 
>4628	ExpressionStatement	 
>4629	CallExpression	printf ( \"Error opening file %s for writing\n\" , buf )
>4630	ArgumentList	\"Error opening file %s for writing\n\"
>4631	Argument	buf
>4632	Identifier	buf
>4633	Argument	\"Error opening file %s for writing\n\"
>4634	PrimaryExpression	\"Error opening file %s for writing\n\"
>4635	Callee	printf
>4636	Identifier	printf
>4637	Condition	 
>4638	EqualityExpression	f == NULL
>4639	Identifier	NULL
>4640	Identifier	f
>4641	IdentifierDeclStatement	 
>4642	IdentifierDecl	* f = fopen ( buf , \"w\" )
>4643	AssignmentExpr	* f = fopen ( buf , \"w\" )
>4644	CallExpression	fopen ( buf , \"w\" )
>4645	ArgumentList	buf
>4646	Argument	\"w\"
>4647	PrimaryExpression	\"w\"
>4648	Argument	buf
>4649	Identifier	buf
>4650	Callee	fopen
>4651	Identifier	fopen
>4652	Identifier	f
>4653	Identifier	f
>4654	IdentifierDeclType	FILE *
>4655	ExpressionStatement	 
>4656	CallExpression	sprintf ( buf , \"%s/%s\" , output_dir , filename )
>4657	ArgumentList	buf
>4658	Argument	filename
>4659	Identifier	filename
>4660	Argument	output_dir
>4661	Identifier	output_dir
>4662	Argument	\"%s/%s\"
>4663	PrimaryExpression	\"%s/%s\"
>4664	Argument	buf
>4665	Identifier	buf
>4666	Callee	sprintf
>4667	Identifier	sprintf
>4668	IdentifierDeclStatement	 
>4669	IdentifierDecl	buf [ 256 ]
>4670	PrimaryExpression	256
>4671	Identifier	buf
>4672	IdentifierDeclType	char [ 256 ]
>4673	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>4674	CompoundStatement	 
>4675	IfStatement	if ( pt_views [ i ] . size ( ) > 0 )
>4676	ExpressionStatement	 
>4677	IncDecOp	num_visible_points ++
>4678	IncDec	++
>4679	Identifier	num_visible_points
>4680	Condition	 
>4681	RelationalExpression	pt_views [ i ] . size ( ) > 0
>4682	PrimaryExpression	0
>4683	CallExpression	pt_views [ i ] . size ( )
>4684	ArgumentList	 
>4685	Callee	pt_views [ i ] . size
>4686	MemberAccess	pt_views [ i ] . size
>4687	Identifier	size
>4688	ArrayIndexing	pt_views [ i ]
>4689	Identifier	i
>4690	Identifier	pt_views
>4691	IncDecOp	 
>4692	IncDec	++
>4693	Identifier	i
>4694	Condition	 
>4695	RelationalExpression	i < num_points
>4696	Identifier	num_points
>4697	Identifier	i
>4698	ForInit	 
>4699	IdentifierDeclStatement	int i = 0 ;
>4700	IdentifierDecl	i = 0
>4701	AssignmentExpr	i = 0
>4702	PrimaryExpression	0
>4703	Identifier	i
>4704	Identifier	i
>4705	IdentifierDeclType	int
>4706	IdentifierDeclStatement	 
>4707	IdentifierDecl	num_visible_points = 0
>4708	AssignmentExpr	num_visible_points = 0
>4709	PrimaryExpression	0
>4710	Identifier	num_visible_points
>4711	Identifier	num_visible_points
>4712	IdentifierDeclType	int
>4713	IdentifierDeclStatement	 
>4714	IdentifierDecl	start = clock ( )
>4715	AssignmentExpr	start = clock ( )
>4716	CallExpression	clock ( )
>4717	ArgumentList	 
>4718	Callee	clock
>4719	Identifier	clock
>4720	Identifier	start
>4721	Identifier	start
>4722	IdentifierDeclType	clock_t
>4808	FunctionDef	BaseApp 
>4809	ParameterList	const char * filename
>4810	Parameter	 
>4811	Identifier	filename
>4812	ParameterType	const char *
>4813	ReturnType	void
>4814	CompoundStatement	 
>4815	ExpressionStatement	 
>4816	CallExpression	fclose ( f )
>4817	ArgumentList	f
>4818	Argument	f
>4819	Identifier	f
>4820	Callee	fclose
>4821	Identifier	fclose
>4822	ExpressionStatement	 
>4823	CallExpression	fprintf ( f , \"</cameras>\n\" )
>4824	ArgumentList	f
>4825	Argument	\"</cameras>\n\"
>4826	PrimaryExpression	\"</cameras>\n\"
>4827	Argument	f
>4828	Identifier	f
>4829	Callee	fprintf
>4830	Identifier	fprintf
>4831	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>4832	CompoundStatement	 
>4833	IfStatement	if ( m_image_data [ i ] . m_camera . m_adjusted )
>4834	CompoundStatement	 
>4835	ExpressionStatement	 
>4836	CallExpression	m_image_data [ i ] . WriteCameraXML ( f )
>4837	ArgumentList	f
>4838	Argument	f
>4839	Identifier	f
>4840	Callee	m_image_data [ i ] . WriteCameraXML
>4841	MemberAccess	m_image_data [ i ] . WriteCameraXML
>4842	Identifier	WriteCameraXML
>4843	ArrayIndexing	m_image_data [ i ]
>4844	Identifier	i
>4845	Identifier	m_image_data
>4846	Condition	 
>4847	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>4848	Identifier	m_adjusted
>4849	MemberAccess	m_image_data [ i ] . m_camera
>4850	Identifier	m_camera
>4851	ArrayIndexing	m_image_data [ i ]
>4852	Identifier	i
>4853	Identifier	m_image_data
>4854	IncDecOp	 
>4855	IncDec	++
>4856	Identifier	i
>4857	Condition	 
>4858	RelationalExpression	i < num_images
>4859	Identifier	num_images
>4860	Identifier	i
>4861	ForInit	 
>4862	IdentifierDeclStatement	int i = 0 ;
>4863	IdentifierDecl	i = 0
>4864	AssignmentExpr	i = 0
>4865	PrimaryExpression	0
>4866	Identifier	i
>4867	Identifier	i
>4868	IdentifierDeclType	int
>4869	IdentifierDeclStatement	 
>4870	IdentifierDecl	num_images = ( int ) m_image_data . size ( )
>4871	AssignmentExpr	num_images = ( int ) m_image_data . size ( )
>4872	CastExpression	( int ) m_image_data . size ( )
>4873	CallExpression	m_image_data . size ( )
>4874	ArgumentList	 
>4875	Callee	m_image_data . size
>4876	MemberAccess	m_image_data . size
>4877	Identifier	size
>4878	Identifier	m_image_data
>4879	CastTarget	int
>4880	Identifier	num_images
>4881	Identifier	num_images
>4882	IdentifierDeclType	int
>4883	ExpressionStatement	 
>4884	CallExpression	fprintf ( f , \"<cameras>\n\" )
>4885	ArgumentList	f
>4886	Argument	\"<cameras>\n\"
>4887	PrimaryExpression	\"<cameras>\n\"
>4888	Argument	f
>4889	Identifier	f
>4890	Callee	fprintf
>4891	Identifier	fprintf
>4892	ExpressionStatement	 
>4893	CallExpression	fprintf ( f , \"<url_base> %s </url_base>\n\" , url_base )
>4894	ArgumentList	f
>4895	Argument	url_base
>4896	Identifier	url_base
>4897	Argument	\"<url_base> %s </url_base>\n\"
>4898	PrimaryExpression	\"<url_base> %s </url_base>\n\"
>4899	Argument	f
>4900	Identifier	f
>4901	Callee	fprintf
>4902	Identifier	fprintf
>4903	IdentifierDeclStatement	 
>4904	IdentifierDecl	* url_base = \"http
>4905	AssignmentExpr	* url_base = \"http
>4906	PrimaryExpression	\"http
>4907	Identifier	url_base
>4908	Identifier	url_base
>4909	IdentifierDeclType	const char *
>4910	ExpressionStatement	 
>4911	CallExpression	fprintf ( f , \"<?xml version=\\"1.0\\" encoding=\\"iso-8859-1\\"?>\n\n\" )
>4912	ArgumentList	f
>4913	Argument	\"<?xml version=\\"1.0\\" encoding=\\"iso-8859-1\\"?>\n\n\"
>4914	PrimaryExpression	\"<?xml version=\\"1.0\\" encoding=\\"iso-8859-1\\"?>\n\n\"
>4915	Argument	f
>4916	Identifier	f
>4917	Callee	fprintf
>4918	Identifier	fprintf
>4919	IfStatement	if ( f == NULL )
>4920	CompoundStatement	 
>4921	ReturnStatement	 
>4922	ExpressionStatement	 
>4923	Statement	 
>4924	Statement	 
>4925	Statement	 
>4926	Statement	 
>4927	Statement	 
>4928	Statement	 
>4929	Statement	 
>4930	Condition	 
>4931	EqualityExpression	f == NULL
>4932	Identifier	NULL
>4933	Identifier	f
>4934	IdentifierDeclStatement	 
>4935	IdentifierDecl	* f = fopen ( filename , \"w\" )
>4936	AssignmentExpr	* f = fopen ( filename , \"w\" )
>4937	CallExpression	fopen ( filename , \"w\" )
>4938	ArgumentList	filename
>4939	Argument	\"w\"
>4940	PrimaryExpression	\"w\"
>4941	Argument	filename
>4942	Identifier	filename
>4943	Callee	fopen
>4944	Identifier	fopen
>4945	Identifier	f
>4946	Identifier	f
>4947	IdentifierDeclType	FILE *
>4964	FunctionDef	BaseApp 
>4965	ParameterList	const char * filename
>4966	Parameter	 
>4967	Identifier	filename
>4968	ParameterType	const char *
>4969	ReturnType	void
>4970	CompoundStatement	 
>4971	ExpressionStatement	 
>4972	CallExpression	printf ( \"[WritePointsXML] %d / %d points seen by >= %d views\n\" , num_ge2 , num_points , min_views )
>4973	ArgumentList	\"[WritePointsXML] %d / %d points seen by >= %d views\n\"
>4974	Argument	min_views
>4975	Identifier	min_views
>4976	Argument	num_points
>4977	Identifier	num_points
>4978	Argument	num_ge2
>4979	Identifier	num_ge2
>4980	Argument	\"[WritePointsXML] %d / %d points seen by >= %d views\n\"
>4981	PrimaryExpression	\"[WritePointsXML] %d / %d points seen by >= %d views\n\"
>4982	Callee	printf
>4983	Identifier	printf
>4984	ExpressionStatement	 
>4985	CallExpression	fclose ( f )
>4986	ArgumentList	f
>4987	Argument	f
>4988	Identifier	f
>4989	Callee	fclose
>4990	Identifier	fclose
>4991	ExpressionStatement	 
>4992	CallExpression	fprintf ( f , \"</points>\n\" )
>4993	ArgumentList	f
>4994	Argument	\"</points>\n\"
>4995	PrimaryExpression	\"</points>\n\"
>4996	Argument	f
>4997	Identifier	f
>4998	Callee	fprintf
>4999	Identifier	fprintf
>5000	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>5001	CompoundStatement	 
>5002	IfStatement	if ( m_num_views_orig [ i ] >= min_views )
>5003	CompoundStatement	 
>5004	ExpressionStatement	 
>5005	IncDecOp	num_ge2 ++
>5006	IncDec	++
>5007	Identifier	num_ge2
>5008	ExpressionStatement	 
>5009	CallExpression	m_point_data [ i ] . WriteXML ( f )
>5010	ArgumentList	f
>5011	Argument	f
>5012	Identifier	f
>5013	Callee	m_point_data [ i ] . WriteXML
>5014	MemberAccess	m_point_data [ i ] . WriteXML
>5015	Identifier	WriteXML
>5016	ArrayIndexing	m_point_data [ i ]
>5017	Identifier	i
>5018	Identifier	m_point_data
>5019	Condition	 
>5020	RelationalExpression	m_num_views_orig [ i ] >= min_views
>5021	Identifier	min_views
>5022	ArrayIndexing	m_num_views_orig [ i ]
>5023	Identifier	i
>5024	Identifier	m_num_views_orig
>5025	IncDecOp	 
>5026	IncDec	++
>5027	Identifier	i
>5028	Condition	 
>5029	RelationalExpression	i < num_points
>5030	Identifier	num_points
>5031	Identifier	i
>5032	ForInit	 
>5033	IdentifierDeclStatement	int i = 0 ;
>5034	IdentifierDecl	i = 0
>5035	AssignmentExpr	i = 0
>5036	PrimaryExpression	0
>5037	Identifier	i
>5038	Identifier	i
>5039	IdentifierDeclType	int
>5040	IdentifierDeclStatement	 
>5041	IdentifierDecl	num_ge2 = 0
>5042	AssignmentExpr	num_ge2 = 0
>5043	PrimaryExpression	0
>5044	Identifier	num_ge2
>5045	Identifier	num_ge2
>5046	IdentifierDeclType	int
>5047	IdentifierDeclStatement	 
>5048	IdentifierDecl	num_points = ( int ) m_point_data . size ( )
>5049	AssignmentExpr	num_points = ( int ) m_point_data . size ( )
>5050	CastExpression	( int ) m_point_data . size ( )
>5051	CallExpression	m_point_data . size ( )
>5052	ArgumentList	 
>5053	Callee	m_point_data . size
>5054	MemberAccess	m_point_data . size
>5055	Identifier	size
>5056	Identifier	m_point_data
>5057	CastTarget	int
>5058	Identifier	num_points
>5059	Identifier	num_points
>5060	IdentifierDeclType	int
>5061	ExpressionStatement	 
>5062	CallExpression	fprintf ( f , \"<points>\n\" )
>5063	ArgumentList	f
>5064	Argument	\"<points>\n\"
>5065	PrimaryExpression	\"<points>\n\"
>5066	Argument	f
>5067	Identifier	f
>5068	Callee	fprintf
>5069	Identifier	fprintf
>5070	ExpressionStatement	 
>5071	CallExpression	fprintf ( f , \"<?xml version=\\"1.0\\" encoding=\\"iso-8859-1\\"?>\n\n\" )
>5072	ArgumentList	f
>5073	Argument	\"<?xml version=\\"1.0\\" encoding=\\"iso-8859-1\\"?>\n\n\"
>5074	PrimaryExpression	\"<?xml version=\\"1.0\\" encoding=\\"iso-8859-1\\"?>\n\n\"
>5075	Argument	f
>5076	Identifier	f
>5077	Callee	fprintf
>5078	Identifier	fprintf
>5079	IfStatement	if ( f == NULL )
>5080	CompoundStatement	 
>5081	ReturnStatement	 
>5082	ExpressionStatement	 
>5083	Statement	 
>5084	Statement	 
>5085	Statement	 
>5086	Statement	 
>5087	Statement	 
>5088	Statement	 
>5089	Statement	 
>5090	Condition	 
>5091	EqualityExpression	f == NULL
>5092	Identifier	NULL
>5093	Identifier	f
>5094	IdentifierDeclStatement	 
>5095	IdentifierDecl	min_views = 3
>5096	AssignmentExpr	min_views = 3
>5097	PrimaryExpression	3
>5098	Identifier	min_views
>5099	Identifier	min_views
>5100	IdentifierDeclType	int
>5101	IdentifierDeclStatement	 
>5102	IdentifierDecl	* f = fopen ( filename , \"w\" )
>5103	AssignmentExpr	* f = fopen ( filename , \"w\" )
>5104	CallExpression	fopen ( filename , \"w\" )
>5105	ArgumentList	filename
>5106	Argument	\"w\"
>5107	PrimaryExpression	\"w\"
>5108	Argument	filename
>5109	Identifier	filename
>5110	Callee	fopen
>5111	Identifier	fopen
>5112	Identifier	f
>5113	Identifier	f
>5114	IdentifierDeclType	FILE *
>5132	FunctionDef	BaseApp 
>5133	ParameterList	const char * filename
>5134	Parameter	 
>5135	Identifier	filename
>5136	ParameterType	const char *
>5137	ReturnType	void
>5138	CompoundStatement	 
>5139	ExpressionStatement	 
>5140	CallExpression	printf ( \"[WritePointsXML] %d / %d points seen by >= %d views\n\" , num_ge2 , num_points , min_views )
>5141	ArgumentList	\"[WritePointsXML] %d / %d points seen by >= %d views\n\"
>5142	Argument	min_views
>5143	Identifier	min_views
>5144	Argument	num_points
>5145	Identifier	num_points
>5146	Argument	num_ge2
>5147	Identifier	num_ge2
>5148	Argument	\"[WritePointsXML] %d / %d points seen by >= %d views\n\"
>5149	PrimaryExpression	\"[WritePointsXML] %d / %d points seen by >= %d views\n\"
>5150	Callee	printf
>5151	Identifier	printf
>5152	ExpressionStatement	 
>5153	CallExpression	fclose ( f )
>5154	ArgumentList	f
>5155	Argument	f
>5156	Identifier	f
>5157	Callee	fclose
>5158	Identifier	fclose
>5159	ExpressionStatement	 
>5160	CallExpression	fprintf ( f , \"</points>\n\" )
>5161	ArgumentList	f
>5162	Argument	\"</points>\n\"
>5163	PrimaryExpression	\"</points>\n\"
>5164	Argument	f
>5165	Identifier	f
>5166	Callee	fprintf
>5167	Identifier	fprintf
>5168	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>5169	CompoundStatement	 
>5170	IfStatement	if ( ( int ) m_point_data [ i ] . m_views . size ( ) >= min_views )
>5171	CompoundStatement	 
>5172	ExpressionStatement	 
>5173	IncDecOp	num_ge2 ++
>5174	IncDec	++
>5175	Identifier	num_ge2
>5176	ExpressionStatement	 
>5177	CallExpression	m_point_data [ i ] . WriteGeoXML ( f )
>5178	ArgumentList	f
>5179	Argument	f
>5180	Identifier	f
>5181	Callee	m_point_data [ i ] . WriteGeoXML
>5182	MemberAccess	m_point_data [ i ] . WriteGeoXML
>5183	Identifier	WriteGeoXML
>5184	ArrayIndexing	m_point_data [ i ]
>5185	Identifier	i
>5186	Identifier	m_point_data
>5187	Condition	 
>5188	RelationalExpression	( int ) m_point_data [ i ] . m_views . size ( ) >= min_views
>5189	Identifier	min_views
>5190	CastExpression	( int ) m_point_data [ i ] . m_views . size ( )
>5191	CallExpression	m_point_data [ i ] . m_views . size ( )
>5192	ArgumentList	 
>5193	Callee	m_point_data [ i ] . m_views . size
>5194	MemberAccess	m_point_data [ i ] . m_views . size
>5195	Identifier	size
>5196	MemberAccess	m_point_data [ i ] . m_views
>5197	Identifier	m_views
>5198	ArrayIndexing	m_point_data [ i ]
>5199	Identifier	i
>5200	Identifier	m_point_data
>5201	CastTarget	int
>5202	IncDecOp	 
>5203	IncDec	++
>5204	Identifier	i
>5205	Condition	 
>5206	RelationalExpression	i < num_points
>5207	Identifier	num_points
>5208	Identifier	i
>5209	ForInit	 
>5210	IdentifierDeclStatement	int i = 0 ;
>5211	IdentifierDecl	i = 0
>5212	AssignmentExpr	i = 0
>5213	PrimaryExpression	0
>5214	Identifier	i
>5215	Identifier	i
>5216	IdentifierDeclType	int
>5217	IdentifierDeclStatement	 
>5218	IdentifierDecl	num_ge2 = 0
>5219	AssignmentExpr	num_ge2 = 0
>5220	PrimaryExpression	0
>5221	Identifier	num_ge2
>5222	Identifier	num_ge2
>5223	IdentifierDeclType	int
>5224	IdentifierDeclStatement	 
>5225	IdentifierDecl	num_points = ( int ) m_point_data . size ( )
>5226	AssignmentExpr	num_points = ( int ) m_point_data . size ( )
>5227	CastExpression	( int ) m_point_data . size ( )
>5228	CallExpression	m_point_data . size ( )
>5229	ArgumentList	 
>5230	Callee	m_point_data . size
>5231	MemberAccess	m_point_data . size
>5232	Identifier	size
>5233	Identifier	m_point_data
>5234	CastTarget	int
>5235	Identifier	num_points
>5236	Identifier	num_points
>5237	IdentifierDeclType	int
>5238	ExpressionStatement	 
>5239	CallExpression	fprintf ( f , \"<points>\n\" )
>5240	ArgumentList	f
>5241	Argument	\"<points>\n\"
>5242	PrimaryExpression	\"<points>\n\"
>5243	Argument	f
>5244	Identifier	f
>5245	Callee	fprintf
>5246	Identifier	fprintf
>5247	ExpressionStatement	 
>5248	CallExpression	fprintf ( f , \"<?xml version=\\"1.0\\" encoding=\\"iso-8859-1\\"?>\n\n\" )
>5249	ArgumentList	f
>5250	Argument	\"<?xml version=\\"1.0\\" encoding=\\"iso-8859-1\\"?>\n\n\"
>5251	PrimaryExpression	\"<?xml version=\\"1.0\\" encoding=\\"iso-8859-1\\"?>\n\n\"
>5252	Argument	f
>5253	Identifier	f
>5254	Callee	fprintf
>5255	Identifier	fprintf
>5256	IfStatement	if ( f == NULL )
>5257	CompoundStatement	 
>5258	ReturnStatement	 
>5259	ExpressionStatement	 
>5260	Statement	 
>5261	Statement	 
>5262	Statement	 
>5263	Statement	 
>5264	Statement	 
>5265	Statement	 
>5266	Statement	 
>5267	Condition	 
>5268	EqualityExpression	f == NULL
>5269	Identifier	NULL
>5270	Identifier	f
>5271	IdentifierDeclStatement	 
>5272	IdentifierDecl	min_views = 2
>5273	AssignmentExpr	min_views = 2
>5274	PrimaryExpression	2
>5275	Identifier	min_views
>5276	Identifier	min_views
>5277	IdentifierDeclType	int
>5278	IdentifierDeclStatement	 
>5279	IdentifierDecl	* f = fopen ( filename , \"w\" )
>5280	AssignmentExpr	* f = fopen ( filename , \"w\" )
>5281	CallExpression	fopen ( filename , \"w\" )
>5282	ArgumentList	filename
>5283	Argument	\"w\"
>5284	PrimaryExpression	\"w\"
>5285	Argument	filename
>5286	Identifier	filename
>5287	Callee	fopen
>5288	Identifier	fopen
>5289	Identifier	f
>5290	Identifier	f
>5291	IdentifierDeclType	FILE *
>5309	FunctionDef	BaseApp 
>5310	ParameterList	const char * append
>5311	Parameter	 
>5312	Identifier	append
>5313	ParameterType	const char *
>5314	ReturnType	void
>5315	CompoundStatement	 
>5316	ExpressionStatement	 
>5317	CallExpression	fclose ( f1 )
>5318	ArgumentList	f1
>5319	Argument	f1
>5320	Identifier	f1
>5321	Callee	fclose
>5322	Identifier	fclose
>5323	ExpressionStatement	 
>5324	CallExpression	fclose ( f0 )
>5325	ArgumentList	f0
>5326	Argument	f0
>5327	Identifier	f0
>5328	Callee	fclose
>5329	Identifier	fclose
>5330	ExpressionStatement	 
>5331	CallExpression	printf ( \"[ReadMatchTable] Read %lu matches in total\n\" , num_matches_total )
>5332	ArgumentList	\"[ReadMatchTable] Read %lu matches in total\n\"
>5333	Argument	num_matches_total
>5334	Identifier	num_matches_total
>5335	Argument	\"[ReadMatchTable] Read %lu matches in total\n\"
>5336	PrimaryExpression	\"[ReadMatchTable] Read %lu matches in total\n\"
>5337	Callee	printf
>5338	Identifier	printf
>5339	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>5340	CompoundStatement	 
>5341	ForStatement	for ( int j = 0 ; j < num_images ; j ++ )
>5342	CompoundStatement	 
>5343	IfStatement	if ( num_matches > 0 )
>5344	CompoundStatement	 
>5345	ExpressionStatement	 
>5346	AssignmentExpr	num_matches_total += num_matches
>5347	Identifier	num_matches
>5348	Identifier	num_matches_total
>5349	ForStatement	for ( int k = 0 ; k < num_matches ; k ++ )
>5350	CompoundStatement	 
>5351	ExpressionStatement	 
>5352	CallExpression	list . push_back ( m )
>5353	ArgumentList	m
>5354	Argument	m
>5355	Identifier	m
>5356	Callee	list . push_back
>5357	MemberAccess	list . push_back
>5358	Identifier	push_back
>5359	Identifier	list
>5360	ExpressionStatement	 
>5361	AssignmentExpr	m . m_idx2 = idx2
>5362	Identifier	idx2
>5363	MemberAccess	m . m_idx2
>5364	Identifier	m_idx2
>5365	Identifier	m
>5366	ExpressionStatement	 
>5367	AssignmentExpr	m . m_idx1 = idx1
>5368	Identifier	idx1
>5369	MemberAccess	m . m_idx1
>5370	Identifier	m_idx1
>5371	Identifier	m
>5372	IfStatement	if ( idx1 > KEY_LIMIT || idx2 > KEY_LIMIT )
>5373	ContinueStatement	 
>5374	Condition	 
>5375	OrExpression	idx1 > KEY_LIMIT || idx2 > KEY_LIMIT
>5376	RelationalExpression	idx2 > KEY_LIMIT
>5377	Identifier	KEY_LIMIT
>5378	Identifier	idx2
>5379	RelationalExpression	idx1 > KEY_LIMIT
>5380	Identifier	KEY_LIMIT
>5381	Identifier	idx1
>5382	ExpressionStatement	 
>5383	CallExpression	fscanf ( f1 , \"%d %d\" , & ( idx1 ) , & ( idx2 ) )
>5384	ArgumentList	f1
>5385	Argument	& ( idx2 )
>5386	UnaryOp	& ( idx2 )
>5387	Identifier	idx2
>5388	UnaryOperator	&
>5389	Argument	& ( idx1 )
>5390	UnaryOp	& ( idx1 )
>5391	Identifier	idx1
>5392	UnaryOperator	&
>5393	Argument	\"%d %d\"
>5394	PrimaryExpression	\"%d %d\"
>5395	Argument	f1
>5396	Identifier	f1
>5397	Callee	fscanf
>5398	Identifier	fscanf
>5399	IdentifierDeclStatement	 
>5400	IdentifierDecl	idx2
>5401	Identifier	idx2
>5402	IdentifierDeclType	int
>5403	IdentifierDecl	idx1
>5404	Identifier	idx1
>5405	IdentifierDeclType	int
>5406	IdentifierDeclStatement	 
>5407	IdentifierDecl	m
>5408	Identifier	m
>5409	IdentifierDeclType	KeypointMatch
>5410	IncDecOp	 
>5411	IncDec	++
>5412	Identifier	k
>5413	Condition	 
>5414	RelationalExpression	k < num_matches
>5415	Identifier	num_matches
>5416	Identifier	k
>5417	ForInit	 
>5418	IdentifierDeclStatement	int k = 0 ;
>5419	IdentifierDecl	k = 0
>5420	AssignmentExpr	k = 0
>5421	PrimaryExpression	0
>5422	Identifier	k
>5423	Identifier	k
>5424	IdentifierDeclType	int
>5425	IdentifierDeclStatement	 
>5426	IdentifierDecl	& list = m_matches . GetMatchList ( idx )
>5427	AssignmentExpr	& list = m_matches . GetMatchList ( idx )
>5428	CallExpression	m_matches . GetMatchList ( idx )
>5429	ArgumentList	idx
>5430	Argument	idx
>5431	Identifier	idx
>5432	Callee	m_matches . GetMatchList
>5433	MemberAccess	m_matches . GetMatchList
>5434	Identifier	GetMatchList
>5435	Identifier	m_matches
>5436	Identifier	list
>5437	Identifier	list
>5438	IdentifierDeclType	std 
>5439	ExpressionStatement	 
>5440	CallExpression	SetMatch ( i , j )
>5441	ArgumentList	i
>5442	Argument	j
>5443	Identifier	j
>5444	Argument	i
>5445	Identifier	i
>5446	Callee	SetMatch
>5447	Identifier	SetMatch
>5448	Condition	 
>5449	RelationalExpression	num_matches > 0
>5450	PrimaryExpression	0
>5451	Identifier	num_matches
>5452	ExpressionStatement	 
>5453	CallExpression	fscanf ( f0 , \"%d\" , & num_matches )
>5454	ArgumentList	f0
>5455	Argument	& num_matches
>5456	UnaryOp	& num_matches
>5457	Identifier	num_matches
>5458	UnaryOperator	&
>5459	Argument	\"%d\"
>5460	PrimaryExpression	\"%d\"
>5461	Argument	f0
>5462	Identifier	f0
>5463	Callee	fscanf
>5464	Identifier	fscanf
>5465	IdentifierDeclStatement	 
>5466	IdentifierDecl	num_matches
>5467	Identifier	num_matches
>5468	IdentifierDeclType	int
>5469	IdentifierDeclStatement	 
>5470	IdentifierDecl	idx = GetMatchIndex ( i , j )
>5471	AssignmentExpr	idx = GetMatchIndex ( i , j )
>5472	CallExpression	GetMatchIndex ( i , j )
>5473	ArgumentList	i
>5474	Argument	j
>5475	Identifier	j
>5476	Argument	i
>5477	Identifier	i
>5478	Callee	GetMatchIndex
>5479	Identifier	GetMatchIndex
>5480	Identifier	idx
>5481	Identifier	idx
>5482	IdentifierDeclType	MatchIndex
>5483	IncDecOp	 
>5484	IncDec	++
>5485	Identifier	j
>5486	Condition	 
>5487	RelationalExpression	j < num_images
>5488	Identifier	num_images
>5489	Identifier	j
>5490	ForInit	 
>5491	IdentifierDeclStatement	int j = 0 ;
>5492	IdentifierDecl	j = 0
>5493	AssignmentExpr	j = 0
>5494	PrimaryExpression	0
>5495	Identifier	j
>5496	Identifier	j
>5497	IdentifierDeclType	int
>5498	IncDecOp	 
>5499	IncDec	++
>5500	Identifier	i
>5501	Condition	 
>5502	RelationalExpression	i < num_images
>5503	Identifier	num_images
>5504	Identifier	i
>5505	ForInit	 
>5506	IdentifierDeclStatement	int i = 0 ;
>5507	IdentifierDecl	i = 0
>5508	AssignmentExpr	i = 0
>5509	PrimaryExpression	0
>5510	Identifier	i
>5511	Identifier	i
>5512	IdentifierDeclType	int
>5513	ExpressionStatement	 
>5514	CallExpression	RemoveAllMatches ( )
>5515	ArgumentList	 
>5516	Callee	RemoveAllMatches
>5517	Identifier	RemoveAllMatches
>5518	ExpressionStatement	 
>5519	CallExpression	assert ( num_images == num_images_check )
>5520	ArgumentList	num_images == num_images_check
>5521	Argument	num_images == num_images_check
>5522	EqualityExpression	num_images == num_images_check
>5523	Identifier	num_images_check
>5524	Identifier	num_images
>5525	Callee	assert
>5526	Identifier	assert
>5527	ExpressionStatement	 
>5528	CallExpression	fscanf ( f0 , \"%d\n\" , & num_images_check )
>5529	ArgumentList	f0
>5530	Argument	& num_images_check
>5531	UnaryOp	& num_images_check
>5532	Identifier	num_images_check
>5533	UnaryOperator	&
>5534	Argument	\"%d\n\"
>5535	PrimaryExpression	\"%d\n\"
>5536	Argument	f0
>5537	Identifier	f0
>5538	Callee	fscanf
>5539	Identifier	fscanf
>5540	IdentifierDeclStatement	 
>5541	IdentifierDecl	num_images_check
>5542	Identifier	num_images_check
>5543	IdentifierDeclType	int
>5544	IfStatement	if ( f0 == NULL || f1 == NULL )
>5545	CompoundStatement	 
>5546	ReturnStatement	 
>5547	ExpressionStatement	 
>5548	Statement	 
>5549	Statement	 
>5550	Statement	 
>5551	Statement	 
>5552	Statement	 
>5553	Condition	 
>5554	OrExpression	f0 == NULL || f1 == NULL
>5555	EqualityExpression	f1 == NULL
>5556	Identifier	NULL
>5557	Identifier	f1
>5558	EqualityExpression	f0 == NULL
>5559	Identifier	NULL
>5560	Identifier	f0
>5561	IdentifierDeclStatement	 
>5562	IdentifierDecl	* f1 = fopen ( buf , \"r\" )
>5563	AssignmentExpr	* f1 = fopen ( buf , \"r\" )
>5564	CallExpression	fopen ( buf , \"r\" )
>5565	ArgumentList	buf
>5566	Argument	\"r\"
>5567	PrimaryExpression	\"r\"
>5568	Argument	buf
>5569	Identifier	buf
>5570	Callee	fopen
>5571	Identifier	fopen
>5572	Identifier	f1
>5573	Identifier	f1
>5574	IdentifierDeclType	FILE *
>5575	ExpressionStatement	 
>5576	CallExpression	sprintf ( buf , \"matches%s.txt\" , append )
>5577	ArgumentList	buf
>5578	Argument	append
>5579	Identifier	append
>5580	Argument	\"matches%s.txt\"
>5581	PrimaryExpression	\"matches%s.txt\"
>5582	Argument	buf
>5583	Identifier	buf
>5584	Callee	sprintf
>5585	Identifier	sprintf
>5586	IdentifierDeclStatement	 
>5587	IdentifierDecl	* f0 = fopen ( buf , \"r\" )
>5588	AssignmentExpr	* f0 = fopen ( buf , \"r\" )
>5589	CallExpression	fopen ( buf , \"r\" )
>5590	ArgumentList	buf
>5591	Argument	\"r\"
>5592	PrimaryExpression	\"r\"
>5593	Argument	buf
>5594	Identifier	buf
>5595	Callee	fopen
>5596	Identifier	fopen
>5597	Identifier	f0
>5598	Identifier	f0
>5599	IdentifierDeclType	FILE *
>5600	ExpressionStatement	 
>5601	CallExpression	sprintf ( buf , \"nmatches%s.txt\" , append )
>5602	ArgumentList	buf
>5603	Argument	append
>5604	Identifier	append
>5605	Argument	\"nmatches%s.txt\"
>5606	PrimaryExpression	\"nmatches%s.txt\"
>5607	Argument	buf
>5608	Identifier	buf
>5609	Callee	sprintf
>5610	Identifier	sprintf
>5611	IdentifierDeclStatement	 
>5612	IdentifierDecl	buf [ 256 ]
>5613	PrimaryExpression	256
>5614	Identifier	buf
>5615	IdentifierDeclType	char [ 256 ]
>5616	IdentifierDeclStatement	 
>5617	IdentifierDecl	num_matches_total = 0
>5618	AssignmentExpr	num_matches_total = 0
>5619	PrimaryExpression	0
>5620	Identifier	num_matches_total
>5621	Identifier	num_matches_total
>5622	IdentifierDeclType	unsigned long int
>5623	IdentifierDeclStatement	 
>5624	IdentifierDecl	num_images = GetNumImages ( )
>5625	AssignmentExpr	num_images = GetNumImages ( )
>5626	CallExpression	GetNumImages ( )
>5627	ArgumentList	 
>5628	Callee	GetNumImages
>5629	Identifier	GetNumImages
>5630	Identifier	num_images
>5631	Identifier	num_images
>5632	IdentifierDeclType	int
>5665	FunctionDef	BaseApp 
>5666	ParameterList	const char * append
>5667	Parameter	 
>5668	Identifier	append
>5669	ParameterType	const char *
>5670	ReturnType	void
>5671	CompoundStatement	 
>5672	ExpressionStatement	 
>5673	CallExpression	fclose ( f1 )
>5674	ArgumentList	f1
>5675	Argument	f1
>5676	Identifier	f1
>5677	Callee	fclose
>5678	Identifier	fclose
>5679	ExpressionStatement	 
>5680	CallExpression	fclose ( f0 )
>5681	ArgumentList	f0
>5682	Argument	f0
>5683	Identifier	f0
>5684	Callee	fclose
>5685	Identifier	fclose
>5686	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>5687	CompoundStatement	 
>5688	ExpressionStatement	 
>5689	CallExpression	fprintf ( f0 , \"\n\" )
>5690	ArgumentList	f0
>5691	Argument	\"\n\"
>5692	PrimaryExpression	\"\n\"
>5693	Argument	f0
>5694	Identifier	f0
>5695	Callee	fprintf
>5696	Identifier	fprintf
>5697	ForStatement	for ( int j = 0 ; j < num_images ; j ++ )
>5698	CompoundStatement	 
>5699	IfStatement	if ( i >= j )
>5700	ElseStatement	else
>5701	CompoundStatement	 
>5702	IfStatement	if ( ImagesMatch ( i , j ) )
>5703	ElseStatement	else
>5704	CompoundStatement	 
>5705	ExpressionStatement	 
>5706	CallExpression	fprintf ( f0 , \"0 \" )
>5707	ArgumentList	f0
>5708	Argument	\"0 \"
>5709	PrimaryExpression	\"0 \"
>5710	Argument	f0
>5711	Identifier	f0
>5712	Callee	fprintf
>5713	Identifier	fprintf
>5714	CompoundStatement	 
>5715	ExpressionStatement	 
>5716	CallExpression	fprintf ( f1 , \"\n\" )
>5717	ArgumentList	f1
>5718	Argument	\"\n\"
>5719	PrimaryExpression	\"\n\"
>5720	Argument	f1
>5721	Identifier	f1
>5722	Callee	fprintf
>5723	Identifier	fprintf
>5724	ForStatement	for ( unsigned int k = 0 ; k < num_matches ; k ++ )
>5725	CompoundStatement	 
>5726	ExpressionStatement	 
>5727	CallExpression	fprintf ( f1 , \"%d %d \" , m . m_idx1 , m . m_idx2 )
>5728	ArgumentList	f1
>5729	Argument	m . m_idx2
>5730	MemberAccess	m . m_idx2
>5731	Identifier	m_idx2
>5732	Identifier	m
>5733	Argument	m . m_idx1
>5734	MemberAccess	m . m_idx1
>5735	Identifier	m_idx1
>5736	Identifier	m
>5737	Argument	\"%d %d \"
>5738	PrimaryExpression	\"%d %d \"
>5739	Argument	f1
>5740	Identifier	f1
>5741	Callee	fprintf
>5742	Identifier	fprintf
>5743	IdentifierDeclStatement	 
>5744	IdentifierDecl	m = list [ k ]
>5745	AssignmentExpr	m = list [ k ]
>5746	ArrayIndexing	list [ k ]
>5747	Identifier	k
>5748	Identifier	list
>5749	Identifier	m
>5750	Identifier	m
>5751	IdentifierDeclType	KeypointMatch
>5752	IncDecOp	 
>5753	IncDec	++
>5754	Identifier	k
>5755	Condition	 
>5756	RelationalExpression	k < num_matches
>5757	Identifier	num_matches
>5758	Identifier	k
>5759	ForInit	 
>5760	IdentifierDeclStatement	unsigned int k = 0 ;
>5761	IdentifierDecl	k = 0
>5762	AssignmentExpr	k = 0
>5763	PrimaryExpression	0
>5764	Identifier	k
>5765	Identifier	k
>5766	IdentifierDeclType	unsigned int
>5767	ExpressionStatement	 
>5768	CallExpression	fprintf ( f0 , \"%d \" , num_matches )
>5769	ArgumentList	f0
>5770	Argument	num_matches
>5771	Identifier	num_matches
>5772	Argument	\"%d \"
>5773	PrimaryExpression	\"%d \"
>5774	Argument	f0
>5775	Identifier	f0
>5776	Callee	fprintf
>5777	Identifier	fprintf
>5778	IdentifierDeclStatement	 
>5779	IdentifierDecl	num_matches = list . size ( )
>5780	AssignmentExpr	num_matches = list . size ( )
>5781	CallExpression	list . size ( )
>5782	ArgumentList	 
>5783	Callee	list . size
>5784	MemberAccess	list . size
>5785	Identifier	size
>5786	Identifier	list
>5787	Identifier	num_matches
>5788	Identifier	num_matches
>5789	IdentifierDeclType	unsigned int
>5790	IdentifierDeclStatement	 
>5791	IdentifierDecl	& list = m_matches . GetMatchList ( idx )
>5792	AssignmentExpr	& list = m_matches . GetMatchList ( idx )
>5793	CallExpression	m_matches . GetMatchList ( idx )
>5794	ArgumentList	idx
>5795	Argument	idx
>5796	Identifier	idx
>5797	Callee	m_matches . GetMatchList
>5798	MemberAccess	m_matches . GetMatchList
>5799	Identifier	GetMatchList
>5800	Identifier	m_matches
>5801	Identifier	list
>5802	Identifier	list
>5803	IdentifierDeclType	std 
>5804	IdentifierDeclStatement	 
>5805	IdentifierDecl	idx = GetMatchIndex ( i , j )
>5806	AssignmentExpr	idx = GetMatchIndex ( i , j )
>5807	CallExpression	GetMatchIndex ( i , j )
>5808	ArgumentList	i
>5809	Argument	j
>5810	Identifier	j
>5811	Argument	i
>5812	Identifier	i
>5813	Callee	GetMatchIndex
>5814	Identifier	GetMatchIndex
>5815	Identifier	idx
>5816	Identifier	idx
>5817	IdentifierDeclType	MatchIndex
>5818	Condition	 
>5819	CallExpression	ImagesMatch ( i , j )
>5820	ArgumentList	i
>5821	Argument	j
>5822	Identifier	j
>5823	Argument	i
>5824	Identifier	i
>5825	Callee	ImagesMatch
>5826	Identifier	ImagesMatch
>5827	CompoundStatement	 
>5828	ExpressionStatement	 
>5829	CallExpression	fprintf ( f1 , \"\n\" )
>5830	ArgumentList	f1
>5831	Argument	\"\n\"
>5832	PrimaryExpression	\"\n\"
>5833	Argument	f1
>5834	Identifier	f1
>5835	Callee	fprintf
>5836	Identifier	fprintf
>5837	ExpressionStatement	 
>5838	CallExpression	fprintf ( f0 , \"0 \" )
>5839	ArgumentList	f0
>5840	Argument	\"0 \"
>5841	PrimaryExpression	\"0 \"
>5842	Argument	f0
>5843	Identifier	f0
>5844	Callee	fprintf
>5845	Identifier	fprintf
>5846	Condition	 
>5847	RelationalExpression	i >= j
>5848	Identifier	j
>5849	Identifier	i
>5850	IncDecOp	 
>5851	IncDec	++
>5852	Identifier	j
>5853	Condition	 
>5854	RelationalExpression	j < num_images
>5855	Identifier	num_images
>5856	Identifier	j
>5857	ForInit	 
>5858	IdentifierDeclStatement	int j = 0 ;
>5859	IdentifierDecl	j = 0
>5860	AssignmentExpr	j = 0
>5861	PrimaryExpression	0
>5862	Identifier	j
>5863	Identifier	j
>5864	IdentifierDeclType	int
>5865	IncDecOp	 
>5866	IncDec	++
>5867	Identifier	i
>5868	Condition	 
>5869	RelationalExpression	i < num_images
>5870	Identifier	num_images
>5871	Identifier	i
>5872	ForInit	 
>5873	IdentifierDeclStatement	int i = 0 ;
>5874	IdentifierDecl	i = 0
>5875	AssignmentExpr	i = 0
>5876	PrimaryExpression	0
>5877	Identifier	i
>5878	Identifier	i
>5879	IdentifierDeclType	int
>5880	ExpressionStatement	 
>5881	CallExpression	fprintf ( f0 , \"%d\n\" , num_images )
>5882	ArgumentList	f0
>5883	Argument	num_images
>5884	Identifier	num_images
>5885	Argument	\"%d\n\"
>5886	PrimaryExpression	\"%d\n\"
>5887	Argument	f0
>5888	Identifier	f0
>5889	Callee	fprintf
>5890	Identifier	fprintf
>5891	IfStatement	if ( f0 == NULL || f1 == NULL )
>5892	CompoundStatement	 
>5893	ReturnStatement	 
>5894	ExpressionStatement	 
>5895	Statement	 
>5896	Statement	 
>5897	Statement	 
>5898	Statement	 
>5899	Statement	 
>5900	Condition	 
>5901	OrExpression	f0 == NULL || f1 == NULL
>5902	EqualityExpression	f1 == NULL
>5903	Identifier	NULL
>5904	Identifier	f1
>5905	EqualityExpression	f0 == NULL
>5906	Identifier	NULL
>5907	Identifier	f0
>5908	IdentifierDeclStatement	 
>5909	IdentifierDecl	* f1 = fopen ( buf , \"w\" )
>5910	AssignmentExpr	* f1 = fopen ( buf , \"w\" )
>5911	CallExpression	fopen ( buf , \"w\" )
>5912	ArgumentList	buf
>5913	Argument	\"w\"
>5914	PrimaryExpression	\"w\"
>5915	Argument	buf
>5916	Identifier	buf
>5917	Callee	fopen
>5918	Identifier	fopen
>5919	Identifier	f1
>5920	Identifier	f1
>5921	IdentifierDeclType	FILE *
>5922	ExpressionStatement	 
>5923	CallExpression	sprintf ( buf , \"matches%s.txt\" , append )
>5924	ArgumentList	buf
>5925	Argument	append
>5926	Identifier	append
>5927	Argument	\"matches%s.txt\"
>5928	PrimaryExpression	\"matches%s.txt\"
>5929	Argument	buf
>5930	Identifier	buf
>5931	Callee	sprintf
>5932	Identifier	sprintf
>5933	IdentifierDeclStatement	 
>5934	IdentifierDecl	* f0 = fopen ( buf , \"w\" )
>5935	AssignmentExpr	* f0 = fopen ( buf , \"w\" )
>5936	CallExpression	fopen ( buf , \"w\" )
>5937	ArgumentList	buf
>5938	Argument	\"w\"
>5939	PrimaryExpression	\"w\"
>5940	Argument	buf
>5941	Identifier	buf
>5942	Callee	fopen
>5943	Identifier	fopen
>5944	Identifier	f0
>5945	Identifier	f0
>5946	IdentifierDeclType	FILE *
>5947	ExpressionStatement	 
>5948	CallExpression	sprintf ( buf , \"nmatches%s.txt\" , append )
>5949	ArgumentList	buf
>5950	Argument	append
>5951	Identifier	append
>5952	Argument	\"nmatches%s.txt\"
>5953	PrimaryExpression	\"nmatches%s.txt\"
>5954	Argument	buf
>5955	Identifier	buf
>5956	Callee	sprintf
>5957	Identifier	sprintf
>5958	IdentifierDeclStatement	 
>5959	IdentifierDecl	buf [ 256 ]
>5960	PrimaryExpression	256
>5961	Identifier	buf
>5962	IdentifierDeclType	char [ 256 ]
>5963	IdentifierDeclStatement	 
>5964	IdentifierDecl	num_images = GetNumImages ( )
>5965	AssignmentExpr	num_images = GetNumImages ( )
>5966	CallExpression	GetNumImages ( )
>5967	ArgumentList	 
>5968	Callee	GetNumImages
>5969	Identifier	GetNumImages
>5970	Identifier	num_images
>5971	Identifier	num_images
>5972	IdentifierDeclType	int
>6002	FunctionDef	BaseApp 
>6003	ParameterList	const char * output_directory , const char * filename , int num_points , int num_cameras , v3_t * points , v3_t * \
>6004	Parameter	 
>6005	Identifier	cameras
>6006	ParameterType	camera_params_t *
>6007	Parameter	 
>6008	Identifier	colors
>6009	ParameterType	v3_t *
>6010	Parameter	 
>6011	Identifier	points
>6012	ParameterType	v3_t *
>6013	Parameter	 
>6014	Identifier	num_cameras
>6015	ParameterType	int
>6016	Parameter	 
>6017	Identifier	num_points
>6018	ParameterType	int
>6019	Parameter	 
>6020	Identifier	filename
>6021	ParameterType	const char *
>6022	Parameter	 
>6023	Identifier	output_directory
>6024	ParameterType	const char *
>6025	ReturnType	void
>6026	CompoundStatement	 
>6027	ExpressionStatement	 
>6028	CallExpression	fclose ( f )
>6029	ArgumentList	f
>6030	Argument	f
>6031	Identifier	f
>6032	Callee	fclose
>6033	Identifier	fclose
>6034	ForStatement	for ( int i = 0 ; i < num_cameras ; i ++ )
>6035	CompoundStatement	 
>6036	ExpressionStatement	 
>6037	CallExpression	fprintf ( f , \"%0.6e %0.6e %0.6e 255 255 0\n\" , p [ 0 ] , p [ 1 ] , p [ 2 ] )
>6038	ArgumentList	f
>6039	Argument	p [ 2 ]
>6040	ArrayIndexing	p [ 2 ]
>6041	PrimaryExpression	2
>6042	Identifier	p
>6043	Argument	p [ 1 ]
>6044	ArrayIndexing	p [ 1 ]
>6045	PrimaryExpression	1
>6046	Identifier	p
>6047	Argument	p [ 0 ]
>6048	ArrayIndexing	p [ 0 ]
>6049	PrimaryExpression	0
>6050	Identifier	p
>6051	Argument	\"%0.6e %0.6e %0.6e 255 255 0\n\"
>6052	PrimaryExpression	\"%0.6e %0.6e %0.6e 255 255 0\n\"
>6053	Argument	f
>6054	Identifier	f
>6055	Callee	fprintf
>6056	Identifier	fprintf
>6057	ExpressionStatement	 
>6058	AssignmentExpr	p [ 2 ] += c [ 2 ]
>6059	ArrayIndexing	c [ 2 ]
>6060	PrimaryExpression	2
>6061	Identifier	c
>6062	ArrayIndexing	p [ 2 ]
>6063	PrimaryExpression	2
>6064	Identifier	p
>6065	ExpressionStatement	 
>6066	AssignmentExpr	p [ 1 ] += c [ 1 ]
>6067	ArrayIndexing	c [ 1 ]
>6068	PrimaryExpression	1
>6069	Identifier	c
>6070	ArrayIndexing	p [ 1 ]
>6071	PrimaryExpression	1
>6072	Identifier	p
>6073	ExpressionStatement	 
>6074	AssignmentExpr	p [ 0 ] += c [ 0 ]
>6075	ArrayIndexing	c [ 0 ]
>6076	PrimaryExpression	0
>6077	Identifier	c
>6078	ArrayIndexing	p [ 0 ]
>6079	PrimaryExpression	0
>6080	Identifier	p
>6081	ExpressionStatement	 
>6082	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , Rinv , p_cam , p )
>6083	ArgumentList	3
>6084	Argument	p
>6085	Identifier	p
>6086	Argument	p_cam
>6087	Identifier	p_cam
>6088	Argument	Rinv
>6089	Identifier	Rinv
>6090	Argument	1
>6091	PrimaryExpression	1
>6092	Argument	3
>6093	PrimaryExpression	3
>6094	Argument	3
>6095	PrimaryExpression	3
>6096	Argument	3
>6097	PrimaryExpression	3
>6098	Callee	matrix_product
>6099	Identifier	matrix_product
>6100	IdentifierDeclStatement	 
>6101	IdentifierDecl	p [ 3 ]
>6102	PrimaryExpression	3
>6103	Identifier	p
>6104	IdentifierDeclType	double [ 3 ]
>6105	IdentifierDeclStatement	 
>6106	IdentifierDecl	p_cam [ 3 ] = { 0.0 , 0.0 , - 0.05 }
>6107	AssignmentExpr	p_cam [ 3 ] = { 0.0 , 0.0 , - 0.05 }
>6108	InitializerList	0.0
>6109	UnaryOp	- 0.05
>6110	PrimaryExpression	0.05
>6111	UnaryOperator	-
>6112	PrimaryExpression	0.0
>6113	PrimaryExpression	0.0
>6114	Identifier	p_cam
>6115	PrimaryExpression	3
>6116	Identifier	p_cam
>6117	IdentifierDeclType	double [ 3 ]
>6118	IfStatement	if ( ( i % 2 ) == 0 )
>6119	ElseStatement	else
>6120	ExpressionStatement	 
>6121	CallExpression	fprintf ( f , \"%0.6e %0.6e %0.6e 255 0 0\n\" , c [ 0 ] , c [ 1 ] , c [ 2 ] )
>6122	ArgumentList	f
>6123	Argument	c [ 2 ]
>6124	ArrayIndexing	c [ 2 ]
>6125	PrimaryExpression	2
>6126	Identifier	c
>6127	Argument	c [ 1 ]
>6128	ArrayIndexing	c [ 1 ]
>6129	PrimaryExpression	1
>6130	Identifier	c
>6131	Argument	c [ 0 ]
>6132	ArrayIndexing	c [ 0 ]
>6133	PrimaryExpression	0
>6134	Identifier	c
>6135	Argument	\"%0.6e %0.6e %0.6e 255 0 0\n\"
>6136	PrimaryExpression	\"%0.6e %0.6e %0.6e 255 0 0\n\"
>6137	Argument	f
>6138	Identifier	f
>6139	Callee	fprintf
>6140	Identifier	fprintf
>6141	ExpressionStatement	 
>6142	CallExpression	fprintf ( f , \"%0.6e %0.6e %0.6e 0 255 0\n\" , c [ 0 ] , c [ 1 ] , c [ 2 ] )
>6143	ArgumentList	f
>6144	Argument	c [ 2 ]
>6145	ArrayIndexing	c [ 2 ]
>6146	PrimaryExpression	2
>6147	Identifier	c
>6148	Argument	c [ 1 ]
>6149	ArrayIndexing	c [ 1 ]
>6150	PrimaryExpression	1
>6151	Identifier	c
>6152	Argument	c [ 0 ]
>6153	ArrayIndexing	c [ 0 ]
>6154	PrimaryExpression	0
>6155	Identifier	c
>6156	Argument	\"%0.6e %0.6e %0.6e 0 255 0\n\"
>6157	PrimaryExpression	\"%0.6e %0.6e %0.6e 0 255 0\n\"
>6158	Argument	f
>6159	Identifier	f
>6160	Callee	fprintf
>6161	Identifier	fprintf
>6162	Condition	 
>6163	EqualityExpression	( i % 2 ) == 0
>6164	PrimaryExpression	0
>6165	MultiplicativeExpression	i % 2
>6166	PrimaryExpression	2
>6167	Identifier	i
>6168	ExpressionStatement	 
>6169	CallExpression	memcpy ( c , cameras [ i ] . t , 3 * sizeof ( double ) )
>6170	ArgumentList	c
>6171	Argument	3 * sizeof ( double )
>6172	MultiplicativeExpression	3 * sizeof ( double )
>6173	SizeofExpr	sizeof ( double )
>6174	SizeofOperand	double
>6175	Sizeof	sizeof
>6176	PrimaryExpression	3
>6177	Argument	cameras [ i ] . t
>6178	MemberAccess	cameras [ i ] . t
>6179	Identifier	t
>6180	ArrayIndexing	cameras [ i ]
>6181	Identifier	i
>6182	Identifier	cameras
>6183	Argument	c
>6184	Identifier	c
>6185	Callee	memcpy
>6186	Identifier	memcpy
>6187	ExpressionStatement	 
>6188	CallExpression	matrix_invert ( 3 , cameras [ i ] . R , Rinv )
>6189	ArgumentList	3
>6190	Argument	Rinv
>6191	Identifier	Rinv
>6192	Argument	cameras [ i ] . R
>6193	MemberAccess	cameras [ i ] . R
>6194	Identifier	R
>6195	ArrayIndexing	cameras [ i ]
>6196	Identifier	i
>6197	Identifier	cameras
>6198	Argument	3
>6199	PrimaryExpression	3
>6200	Callee	matrix_invert
>6201	Identifier	matrix_invert
>6202	IdentifierDeclStatement	 
>6203	IdentifierDecl	Rinv [ 9 ]
>6204	PrimaryExpression	9
>6205	Identifier	Rinv
>6206	IdentifierDeclType	double [ 9 ]
>6207	IdentifierDeclStatement	 
>6208	IdentifierDecl	c [ 3 ]
>6209	PrimaryExpression	3
>6210	Identifier	c
>6211	IdentifierDeclType	double [ 3 ]
>6212	IncDecOp	 
>6213	IncDec	++
>6214	Identifier	i
>6215	Condition	 
>6216	RelationalExpression	i < num_cameras
>6217	Identifier	num_cameras
>6218	Identifier	i
>6219	ForInit	 
>6220	IdentifierDeclStatement	int i = 0 ;
>6221	IdentifierDecl	i = 0
>6222	AssignmentExpr	i = 0
>6223	PrimaryExpression	0
>6224	Identifier	i
>6225	Identifier	i
>6226	IdentifierDeclType	int
>6227	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>6228	CompoundStatement	 
>6229	ExpressionStatement	 
>6230	CallExpression	fprintf ( f , \"%0.6e %0.6e %0.6e %d %d %d\n\" , Vx ( points [ i ] ) , Vy ( points [ i ] ) , Vz ( points [ i ] ) , \
>6231	ArgumentList	f
>6232	Argument	iround ( Vz ( colors [ i ] ) )
>6233	CallExpression	iround ( Vz ( colors [ i ] ) )
>6234	ArgumentList	Vz ( colors [ i ] )
>6235	Argument	Vz ( colors [ i ] )
>6236	CallExpression	Vz ( colors [ i ] )
>6237	ArgumentList	colors [ i ]
>6238	Argument	colors [ i ]
>6239	ArrayIndexing	colors [ i ]
>6240	Identifier	i
>6241	Identifier	colors
>6242	Callee	Vz
>6243	Identifier	Vz
>6244	Callee	iround
>6245	Identifier	iround
>6246	Argument	iround ( Vy ( colors [ i ] ) )
>6247	CallExpression	iround ( Vy ( colors [ i ] ) )
>6248	ArgumentList	Vy ( colors [ i ] )
>6249	Argument	Vy ( colors [ i ] )
>6250	CallExpression	Vy ( colors [ i ] )
>6251	ArgumentList	colors [ i ]
>6252	Argument	colors [ i ]
>6253	ArrayIndexing	colors [ i ]
>6254	Identifier	i
>6255	Identifier	colors
>6256	Callee	Vy
>6257	Identifier	Vy
>6258	Callee	iround
>6259	Identifier	iround
>6260	Argument	iround ( Vx ( colors [ i ] ) )
>6261	CallExpression	iround ( Vx ( colors [ i ] ) )
>6262	ArgumentList	Vx ( colors [ i ] )
>6263	Argument	Vx ( colors [ i ] )
>6264	CallExpression	Vx ( colors [ i ] )
>6265	ArgumentList	colors [ i ]
>6266	Argument	colors [ i ]
>6267	ArrayIndexing	colors [ i ]
>6268	Identifier	i
>6269	Identifier	colors
>6270	Callee	Vx
>6271	Identifier	Vx
>6272	Callee	iround
>6273	Identifier	iround
>6274	Argument	Vz ( points [ i ] )
>6275	CallExpression	Vz ( points [ i ] )
>6276	ArgumentList	points [ i ]
>6277	Argument	points [ i ]
>6278	ArrayIndexing	points [ i ]
>6279	Identifier	i
>6280	Identifier	points
>6281	Callee	Vz
>6282	Identifier	Vz
>6283	Argument	Vy ( points [ i ] )
>6284	CallExpression	Vy ( points [ i ] )
>6285	ArgumentList	points [ i ]
>6286	Argument	points [ i ]
>6287	ArrayIndexing	points [ i ]
>6288	Identifier	i
>6289	Identifier	points
>6290	Callee	Vy
>6291	Identifier	Vy
>6292	Argument	Vx ( points [ i ] )
>6293	CallExpression	Vx ( points [ i ] )
>6294	ArgumentList	points [ i ]
>6295	Argument	points [ i ]
>6296	ArrayIndexing	points [ i ]
>6297	Identifier	i
>6298	Identifier	points
>6299	Callee	Vx
>6300	Identifier	Vx
>6301	Argument	\"%0.6e %0.6e %0.6e %d %d %d\n\"
>6302	PrimaryExpression	\"%0.6e %0.6e %0.6e %d %d %d\n\"
>6303	Argument	f
>6304	Identifier	f
>6305	Callee	fprintf
>6306	Identifier	fprintf
>6307	IfStatement	if ( Vx ( colors [ i ] ) == 0x0 && Vy ( colors [ i ] ) == 0x0 && Vz ( colors [ i ] ) == 0xff )
>6308	ContinueStatement	 
>6309	Condition	 
>6310	AndExpression	Vx ( colors [ i ] ) == 0x0 && Vy ( colors [ i ] ) == 0x0 && Vz ( colors [ i ] ) == 0xff
>6311	AndExpression	Vy ( colors [ i ] ) == 0x0 && Vz ( colors [ i ] ) == 0xff
>6312	EqualityExpression	Vz ( colors [ i ] ) == 0xff
>6313	PrimaryExpression	0xff
>6314	CallExpression	Vz ( colors [ i ] )
>6315	ArgumentList	colors [ i ]
>6316	Argument	colors [ i ]
>6317	ArrayIndexing	colors [ i ]
>6318	Identifier	i
>6319	Identifier	colors
>6320	Callee	Vz
>6321	Identifier	Vz
>6322	EqualityExpression	Vy ( colors [ i ] ) == 0x0
>6323	PrimaryExpression	0x0
>6324	CallExpression	Vy ( colors [ i ] )
>6325	ArgumentList	colors [ i ]
>6326	Argument	colors [ i ]
>6327	ArrayIndexing	colors [ i ]
>6328	Identifier	i
>6329	Identifier	colors
>6330	Callee	Vy
>6331	Identifier	Vy
>6332	EqualityExpression	Vx ( colors [ i ] ) == 0x0
>6333	PrimaryExpression	0x0
>6334	CallExpression	Vx ( colors [ i ] )
>6335	ArgumentList	colors [ i ]
>6336	Argument	colors [ i ]
>6337	ArrayIndexing	colors [ i ]
>6338	Identifier	i
>6339	Identifier	colors
>6340	Callee	Vx
>6341	Identifier	Vx
>6342	IncDecOp	 
>6343	IncDec	++
>6344	Identifier	i
>6345	Condition	 
>6346	RelationalExpression	i < num_points
>6347	Identifier	num_points
>6348	Identifier	i
>6349	ForInit	 
>6350	IdentifierDeclStatement	int i = 0 ;
>6351	IdentifierDecl	i = 0
>6352	AssignmentExpr	i = 0
>6353	PrimaryExpression	0
>6354	Identifier	i
>6355	Identifier	i
>6356	IdentifierDeclType	int
>6357	ExpressionStatement	 
>6358	CallExpression	fprintf ( f , ply_header , num_good_pts + 2 * num_cameras )
>6359	ArgumentList	f
>6360	Argument	num_good_pts + 2 * num_cameras
>6361	AdditiveExpression	num_good_pts + 2 * num_cameras
>6362	MultiplicativeExpression	2 * num_cameras
>6363	Identifier	num_cameras
>6364	PrimaryExpression	2
>6365	Identifier	num_good_pts
>6366	Argument	ply_header
>6367	Identifier	ply_header
>6368	Argument	f
>6369	Identifier	f
>6370	Callee	fprintf
>6371	Identifier	fprintf
>6372	IfStatement	if ( f == NULL )
>6373	CompoundStatement	 
>6374	ReturnStatement	 
>6375	ExpressionStatement	 
>6376	CallExpression	printf ( \"Error opening file %s for writing\n\" , ply_out )
>6377	ArgumentList	\"Error opening file %s for writing\n\"
>6378	Argument	ply_out
>6379	Identifier	ply_out
>6380	Argument	\"Error opening file %s for writing\n\"
>6381	PrimaryExpression	\"Error opening file %s for writing\n\"
>6382	Callee	printf
>6383	Identifier	printf
>6384	Condition	 
>6385	EqualityExpression	f == NULL
>6386	Identifier	NULL
>6387	Identifier	f
>6388	IdentifierDeclStatement	 
>6389	IdentifierDecl	* f = fopen ( ply_out , \"w\" )
>6390	AssignmentExpr	* f = fopen ( ply_out , \"w\" )
>6391	CallExpression	fopen ( ply_out , \"w\" )
>6392	ArgumentList	ply_out
>6393	Argument	\"w\"
>6394	PrimaryExpression	\"w\"
>6395	Argument	ply_out
>6396	Identifier	ply_out
>6397	Callee	fopen
>6398	Identifier	fopen
>6399	Identifier	f
>6400	Identifier	f
>6401	IdentifierDeclType	FILE *
>6402	ExpressionStatement	 
>6403	CallExpression	sprintf ( ply_out , \"%s/%s\" , output_directory , filename )
>6404	ArgumentList	ply_out
>6405	Argument	filename
>6406	Identifier	filename
>6407	Argument	output_directory
>6408	Identifier	output_directory
>6409	Argument	\"%s/%s\"
>6410	PrimaryExpression	\"%s/%s\"
>6411	Argument	ply_out
>6412	Identifier	ply_out
>6413	Callee	sprintf
>6414	Identifier	sprintf
>6415	IdentifierDeclStatement	 
>6416	IdentifierDecl	ply_out [ 256 ]
>6417	PrimaryExpression	256
>6418	Identifier	ply_out
>6419	IdentifierDeclType	char [ 256 ]
>6420	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>6421	CompoundStatement	 
>6422	ExpressionStatement	 
>6423	IncDecOp	num_good_pts ++
>6424	IncDec	++
>6425	Identifier	num_good_pts
>6426	IfStatement	if ( Vx ( colors [ i ] ) == 0x0 && Vy ( colors [ i ] ) == 0x0 && Vz ( colors [ i ] ) == 0xff )
>6427	ContinueStatement	 
>6428	Condition	 
>6429	AndExpression	Vx ( colors [ i ] ) == 0x0 && Vy ( colors [ i ] ) == 0x0 && Vz ( colors [ i ] ) == 0xff
>6430	AndExpression	Vy ( colors [ i ] ) == 0x0 && Vz ( colors [ i ] ) == 0xff
>6431	EqualityExpression	Vz ( colors [ i ] ) == 0xff
>6432	PrimaryExpression	0xff
>6433	CallExpression	Vz ( colors [ i ] )
>6434	ArgumentList	colors [ i ]
>6435	Argument	colors [ i ]
>6436	ArrayIndexing	colors [ i ]
>6437	Identifier	i
>6438	Identifier	colors
>6439	Callee	Vz
>6440	Identifier	Vz
>6441	EqualityExpression	Vy ( colors [ i ] ) == 0x0
>6442	PrimaryExpression	0x0
>6443	CallExpression	Vy ( colors [ i ] )
>6444	ArgumentList	colors [ i ]
>6445	Argument	colors [ i ]
>6446	ArrayIndexing	colors [ i ]
>6447	Identifier	i
>6448	Identifier	colors
>6449	Callee	Vy
>6450	Identifier	Vy
>6451	EqualityExpression	Vx ( colors [ i ] ) == 0x0
>6452	PrimaryExpression	0x0
>6453	CallExpression	Vx ( colors [ i ] )
>6454	ArgumentList	colors [ i ]
>6455	Argument	colors [ i ]
>6456	ArrayIndexing	colors [ i ]
>6457	Identifier	i
>6458	Identifier	colors
>6459	Callee	Vx
>6460	Identifier	Vx
>6461	IncDecOp	 
>6462	IncDec	++
>6463	Identifier	i
>6464	Condition	 
>6465	RelationalExpression	i < num_points
>6466	Identifier	num_points
>6467	Identifier	i
>6468	ForInit	 
>6469	IdentifierDeclStatement	int i = 0 ;
>6470	IdentifierDecl	i = 0
>6471	AssignmentExpr	i = 0
>6472	PrimaryExpression	0
>6473	Identifier	i
>6474	Identifier	i
>6475	IdentifierDeclType	int
>6476	IdentifierDeclStatement	 
>6477	IdentifierDecl	num_good_pts = 0
>6478	AssignmentExpr	num_good_pts = 0
>6479	PrimaryExpression	0
>6480	Identifier	num_good_pts
>6481	Identifier	num_good_pts
>6482	IdentifierDeclType	int
>6516	FunctionDef	BaseApp 
>6517	ParameterList	 
>6518	ReturnType	void
>6519	CompoundStatement	 
>6520	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>6521	CompoundStatement	 
>6522	ExpressionStatement	 
>6523	CallExpression	m_image_data [ i ] . ReadKeyColors ( )
>6524	ArgumentList	 
>6525	Callee	m_image_data [ i ] . ReadKeyColors
>6526	MemberAccess	m_image_data [ i ] . ReadKeyColors
>6527	Identifier	ReadKeyColors
>6528	ArrayIndexing	m_image_data [ i ]
>6529	Identifier	i
>6530	Identifier	m_image_data
>6531	IncDecOp	 
>6532	IncDec	++
>6533	Identifier	i
>6534	Condition	 
>6535	RelationalExpression	i < num_images
>6536	Identifier	num_images
>6537	Identifier	i
>6538	ForInit	 
>6539	IdentifierDeclStatement	int i = 0 ;
>6540	IdentifierDecl	i = 0
>6541	AssignmentExpr	i = 0
>6542	PrimaryExpression	0
>6543	Identifier	i
>6544	Identifier	i
>6545	IdentifierDeclType	int
>6546	IdentifierDeclStatement	 
>6547	IdentifierDecl	num_images = GetNumImages ( )
>6548	AssignmentExpr	num_images = GetNumImages ( )
>6549	CallExpression	GetNumImages ( )
>6550	ArgumentList	 
>6551	Callee	GetNumImages
>6552	Identifier	GetNumImages
>6553	Identifier	num_images
>6554	Identifier	num_images
>6555	IdentifierDeclType	int
>6565	FunctionDef	BaseApp 
>6566	ParameterList	 
>6567	ReturnType	void
>6568	CompoundStatement	 
>6569	IfStatement	if ( FileExists ( \"camera-constraints.txt\" ) )
>6570	CompoundStatement	 
>6571	ExpressionStatement	 
>6572	CallExpression	fclose ( f )
>6573	ArgumentList	f
>6574	Argument	f
>6575	Identifier	f
>6576	Callee	fclose
>6577	Identifier	fclose
>6578	WhileStatement	while ( fgets ( buf , 256 , f ) != NULL )
>6579	CompoundStatement	 
>6580	IfStatement	if ( z != - 999.0 )
>6581	CompoundStatement	 
>6582	ExpressionStatement	 
>6583	AssignmentExpr	m_image_data [ cam_idx ] . m_camera . m_constraint_weights [ 2 ] = zw
>6584	Identifier	zw
>6585	ArrayIndexing	m_image_data [ cam_idx ] . m_camera . m_constraint_weights [ 2 ]
>6586	PrimaryExpression	2
>6587	MemberAccess	m_image_data [ cam_idx ] . m_camera . m_constraint_weights
>6588	Identifier	m_constraint_weights
>6589	MemberAccess	m_image_data [ cam_idx ] . m_camera
>6590	Identifier	m_camera
>6591	ArrayIndexing	m_image_data [ cam_idx ]
>6592	Identifier	cam_idx
>6593	Identifier	m_image_data
>6594	ExpressionStatement	 
>6595	AssignmentExpr	m_image_data [ cam_idx ] . m_camera . m_constraints [ 2 ] = z
>6596	Identifier	z
>6597	ArrayIndexing	m_image_data [ cam_idx ] . m_camera . m_constraints [ 2 ]
>6598	PrimaryExpression	2
>6599	MemberAccess	m_image_data [ cam_idx ] . m_camera . m_constraints
>6600	Identifier	m_constraints
>6601	MemberAccess	m_image_data [ cam_idx ] . m_camera
>6602	Identifier	m_camera
>6603	ArrayIndexing	m_image_data [ cam_idx ]
>6604	Identifier	cam_idx
>6605	Identifier	m_image_data
>6606	ExpressionStatement	 
>6607	AssignmentExpr	m_image_data [ cam_idx ] . m_camera . m_constrained [ 2 ] = true
>6608	Identifier	true
>6609	ArrayIndexing	m_image_data [ cam_idx ] . m_camera . m_constrained [ 2 ]
>6610	PrimaryExpression	2
>6611	MemberAccess	m_image_data [ cam_idx ] . m_camera . m_constrained
>6612	Identifier	m_constrained
>6613	MemberAccess	m_image_data [ cam_idx ] . m_camera
>6614	Identifier	m_camera
>6615	ArrayIndexing	m_image_data [ cam_idx ]
>6616	Identifier	cam_idx
>6617	Identifier	m_image_data
>6618	Condition	 
>6619	EqualityExpression	z != - 999.0
>6620	UnaryOp	- 999.0
>6621	PrimaryExpression	999.0
>6622	UnaryOperator	-
>6623	Identifier	z
>6624	IfStatement	if ( y != - 999.0 )
>6625	CompoundStatement	 
>6626	ExpressionStatement	 
>6627	AssignmentExpr	m_image_data [ cam_idx ] . m_camera . m_constraint_weights [ 1 ] = yw
>6628	Identifier	yw
>6629	ArrayIndexing	m_image_data [ cam_idx ] . m_camera . m_constraint_weights [ 1 ]
>6630	PrimaryExpression	1
>6631	MemberAccess	m_image_data [ cam_idx ] . m_camera . m_constraint_weights
>6632	Identifier	m_constraint_weights
>6633	MemberAccess	m_image_data [ cam_idx ] . m_camera
>6634	Identifier	m_camera
>6635	ArrayIndexing	m_image_data [ cam_idx ]
>6636	Identifier	cam_idx
>6637	Identifier	m_image_data
>6638	ExpressionStatement	 
>6639	AssignmentExpr	m_image_data [ cam_idx ] . m_camera . m_constraints [ 1 ] = y
>6640	Identifier	y
>6641	ArrayIndexing	m_image_data [ cam_idx ] . m_camera . m_constraints [ 1 ]
>6642	PrimaryExpression	1
>6643	MemberAccess	m_image_data [ cam_idx ] . m_camera . m_constraints
>6644	Identifier	m_constraints
>6645	MemberAccess	m_image_data [ cam_idx ] . m_camera
>6646	Identifier	m_camera
>6647	ArrayIndexing	m_image_data [ cam_idx ]
>6648	Identifier	cam_idx
>6649	Identifier	m_image_data
>6650	ExpressionStatement	 
>6651	AssignmentExpr	m_image_data [ cam_idx ] . m_camera . m_constrained [ 1 ] = true
>6652	Identifier	true
>6653	ArrayIndexing	m_image_data [ cam_idx ] . m_camera . m_constrained [ 1 ]
>6654	PrimaryExpression	1
>6655	MemberAccess	m_image_data [ cam_idx ] . m_camera . m_constrained
>6656	Identifier	m_constrained
>6657	MemberAccess	m_image_data [ cam_idx ] . m_camera
>6658	Identifier	m_camera
>6659	ArrayIndexing	m_image_data [ cam_idx ]
>6660	Identifier	cam_idx
>6661	Identifier	m_image_data
>6662	Condition	 
>6663	EqualityExpression	y != - 999.0
>6664	UnaryOp	- 999.0
>6665	PrimaryExpression	999.0
>6666	UnaryOperator	-
>6667	Identifier	y
>6668	IfStatement	if ( x != - 999.0 )
>6669	CompoundStatement	 
>6670	ExpressionStatement	 
>6671	AssignmentExpr	m_image_data [ cam_idx ] . m_camera . m_constraint_weights [ 0 ] = xw
>6672	Identifier	xw
>6673	ArrayIndexing	m_image_data [ cam_idx ] . m_camera . m_constraint_weights [ 0 ]
>6674	PrimaryExpression	0
>6675	MemberAccess	m_image_data [ cam_idx ] . m_camera . m_constraint_weights
>6676	Identifier	m_constraint_weights
>6677	MemberAccess	m_image_data [ cam_idx ] . m_camera
>6678	Identifier	m_camera
>6679	ArrayIndexing	m_image_data [ cam_idx ]
>6680	Identifier	cam_idx
>6681	Identifier	m_image_data
>6682	ExpressionStatement	 
>6683	AssignmentExpr	m_image_data [ cam_idx ] . m_camera . m_constraints [ 0 ] = x
>6684	Identifier	x
>6685	ArrayIndexing	m_image_data [ cam_idx ] . m_camera . m_constraints [ 0 ]
>6686	PrimaryExpression	0
>6687	MemberAccess	m_image_data [ cam_idx ] . m_camera . m_constraints
>6688	Identifier	m_constraints
>6689	MemberAccess	m_image_data [ cam_idx ] . m_camera
>6690	Identifier	m_camera
>6691	ArrayIndexing	m_image_data [ cam_idx ]
>6692	Identifier	cam_idx
>6693	Identifier	m_image_data
>6694	ExpressionStatement	 
>6695	AssignmentExpr	m_image_data [ cam_idx ] . m_camera . m_constrained [ 0 ] = true
>6696	Identifier	true
>6697	ArrayIndexing	m_image_data [ cam_idx ] . m_camera . m_constrained [ 0 ]
>6698	PrimaryExpression	0
>6699	MemberAccess	m_image_data [ cam_idx ] . m_camera . m_constrained
>6700	Identifier	m_constrained
>6701	MemberAccess	m_image_data [ cam_idx ] . m_camera
>6702	Identifier	m_camera
>6703	ArrayIndexing	m_image_data [ cam_idx ]
>6704	Identifier	cam_idx
>6705	Identifier	m_image_data
>6706	Condition	 
>6707	EqualityExpression	x != - 999.0
>6708	UnaryOp	- 999.0
>6709	PrimaryExpression	999.0
>6710	UnaryOperator	-
>6711	Identifier	x
>6712	ExpressionStatement	 
>6713	Statement	 
>6714	Statement	 
>6715	Statement	 
>6716	Statement	 
>6717	Statement	 
>6718	Statement	 
>6719	Statement	 
>6720	Statement	 
>6721	Statement	 
>6722	Statement	 
>6723	Statement	 
>6724	Statement	 
>6725	Statement	 
>6726	Statement	 
>6727	Statement	 
>6728	Statement	 
>6729	Statement	 
>6730	Statement	 
>6731	Statement	 
>6732	ExpressionStatement	 
>6733	CallExpression	sscanf ( buf , \"%d %lf %lf %lf %lf %lf %lf\" , & cam_idx , & x , & y , & z , & xw , & yw , & zw )
>6734	ArgumentList	buf
>6735	Argument	& zw
>6736	UnaryOp	& zw
>6737	Identifier	zw
>6738	UnaryOperator	&
>6739	Argument	& yw
>6740	UnaryOp	& yw
>6741	Identifier	yw
>6742	UnaryOperator	&
>6743	Argument	& xw
>6744	UnaryOp	& xw
>6745	Identifier	xw
>6746	UnaryOperator	&
>6747	Argument	& z
>6748	UnaryOp	& z
>6749	Identifier	z
>6750	UnaryOperator	&
>6751	Argument	& y
>6752	UnaryOp	& y
>6753	Identifier	y
>6754	UnaryOperator	&
>6755	Argument	& x
>6756	UnaryOp	& x
>6757	Identifier	x
>6758	UnaryOperator	&
>6759	Argument	& cam_idx
>6760	UnaryOp	& cam_idx
>6761	Identifier	cam_idx
>6762	UnaryOperator	&
>6763	Argument	\"%d %lf %lf %lf %lf %lf %lf\"
>6764	PrimaryExpression	\"%d %lf %lf %lf %lf %lf %lf\"
>6765	Argument	buf
>6766	Identifier	buf
>6767	Callee	sscanf
>6768	Identifier	sscanf
>6769	IdentifierDeclStatement	 
>6770	IdentifierDecl	zw
>6771	Identifier	zw
>6772	IdentifierDeclType	double
>6773	IdentifierDecl	yw
>6774	Identifier	yw
>6775	IdentifierDeclType	double
>6776	IdentifierDecl	xw
>6777	Identifier	xw
>6778	IdentifierDeclType	double
>6779	IdentifierDecl	z
>6780	Identifier	z
>6781	IdentifierDeclType	double
>6782	IdentifierDecl	y
>6783	Identifier	y
>6784	IdentifierDeclType	double
>6785	IdentifierDecl	x
>6786	Identifier	x
>6787	IdentifierDeclType	double
>6788	IdentifierDeclStatement	 
>6789	IdentifierDecl	cam_idx
>6790	Identifier	cam_idx
>6791	IdentifierDeclType	int
>6792	IfStatement	if ( isspace ( buf [ 0 ] ) || buf [ 0 ] == '%' )
>6793	ContinueStatement	 
>6794	Condition	 
>6795	OrExpression	isspace ( buf [ 0 ] ) || buf [ 0 ] == '%'
>6796	EqualityExpression	buf [ 0 ] == '%'
>6797	PrimaryExpression	'%'
>6798	ArrayIndexing	buf [ 0 ]
>6799	PrimaryExpression	0
>6800	Identifier	buf
>6801	CallExpression	isspace ( buf [ 0 ] )
>6802	ArgumentList	buf [ 0 ]
>6803	Argument	buf [ 0 ]
>6804	ArrayIndexing	buf [ 0 ]
>6805	PrimaryExpression	0
>6806	Identifier	buf
>6807	Callee	isspace
>6808	Identifier	isspace
>6809	Condition	 
>6810	EqualityExpression	fgets ( buf , 256 , f ) != NULL
>6811	Identifier	NULL
>6812	CallExpression	fgets ( buf , 256 , f )
>6813	ArgumentList	buf
>6814	Argument	f
>6815	Identifier	f
>6816	Argument	256
>6817	PrimaryExpression	256
>6818	Argument	buf
>6819	Identifier	buf
>6820	Callee	fgets
>6821	Identifier	fgets
>6822	IdentifierDeclStatement	 
>6823	IdentifierDecl	buf [ 256 ]
>6824	PrimaryExpression	256
>6825	Identifier	buf
>6826	IdentifierDeclType	char [ 256 ]
>6827	IdentifierDeclStatement	 
>6828	IdentifierDecl	* f = fopen ( \"camera-constraints.txt\" , \"r\" )
>6829	AssignmentExpr	* f = fopen ( \"camera-constraints.txt\" , \"r\" )
>6830	CallExpression	fopen ( \"camera-constraints.txt\" , \"r\" )
>6831	ArgumentList	\"camera-constraints.txt\"
>6832	Argument	\"r\"
>6833	PrimaryExpression	\"r\"
>6834	Argument	\"camera-constraints.txt\"
>6835	PrimaryExpression	\"camera-constraints.txt\"
>6836	Callee	fopen
>6837	Identifier	fopen
>6838	Identifier	f
>6839	Identifier	f
>6840	IdentifierDeclType	FILE *
>6841	ExpressionStatement	 
>6842	CallExpression	printf ( \"[ReadCameraConstraints] Reading constraints\n\" )
>6843	ArgumentList	\"[ReadCameraConstraints] Reading constraints\n\"
>6844	Argument	\"[ReadCameraConstraints] Reading constraints\n\"
>6845	PrimaryExpression	\"[ReadCameraConstraints] Reading constraints\n\"
>6846	Callee	printf
>6847	Identifier	printf
>6848	Condition	 
>6849	CallExpression	FileExists ( \"camera-constraints.txt\" )
>6850	ArgumentList	\"camera-constraints.txt\"
>6851	Argument	\"camera-constraints.txt\"
>6852	PrimaryExpression	\"camera-constraints.txt\"
>6853	Callee	FileExists
>6854	Identifier	FileExists
>6894	FunctionDef	BaseApp 
>6895	ParameterList	 
>6896	ReturnType	void
>6897	CompoundStatement	 
>6898	WhileStatement	while ( fgets ( buf , 256 , f ) != NULL )
>6899	CompoundStatement	 
>6900	ExpressionStatement	 
>6901	Statement	 
>6902	Statement	 
>6903	Statement	 
>6904	Statement	 
>6905	Statement	 
>6906	Statement	 
>6907	Statement	 
>6908	Statement	 
>6909	Statement	 
>6910	Statement	 
>6911	Statement	 
>6912	Statement	 
>6913	Statement	 
>6914	Statement	 
>6915	Statement	 
>6916	Statement	 
>6917	Statement	 
>6918	Statement	 
>6919	Statement	 
>6920	Statement	 
>6921	Statement	 
>6922	Statement	 
>6923	Statement	 
>6924	Statement	 
>6925	Statement	 
>6926	Statement	 
>6927	Statement	 
>6928	Statement	 
>6929	Statement	 
>6930	Statement	 
>6931	Statement	 
>6932	Statement	 
>6933	Statement	 
>6934	Statement	 
>6935	Statement	 
>6936	Statement	 
>6937	Statement	 
>6938	Statement	 
>6939	Statement	 
>6940	Statement	 
>6941	Statement	 
>6942	Statement	 
>6943	Statement	 
>6944	Statement	 
>6945	Statement	 
>6946	Statement	 
>6947	Statement	 
>6948	Statement	 
>6949	Statement	 
>6950	ExpressionStatement	 
>6951	AssignmentExpr	m_point_constraints [ pt_idx ] = v3_new ( x , y , - z )
>6952	CallExpression	v3_new ( x , y , - z )
>6953	ArgumentList	x
>6954	Argument	- z
>6955	UnaryOp	- z
>6956	Identifier	z
>6957	UnaryOperator	-
>6958	Argument	y
>6959	Identifier	y
>6960	Argument	x
>6961	Identifier	x
>6962	Callee	v3_new
>6963	Identifier	v3_new
>6964	ArrayIndexing	m_point_constraints [ pt_idx ]
>6965	Identifier	pt_idx
>6966	Identifier	m_point_constraints
>6967	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>6968	CompoundStatement	 
>6969	IfStatement	if ( dsq < min_dist )
>6970	CompoundStatement	 
>6971	ExpressionStatement	 
>6972	AssignmentExpr	min_dist = dsq
>6973	Identifier	dsq
>6974	Identifier	min_dist
>6975	ExpressionStatement	 
>6976	AssignmentExpr	pt_idx = i
>6977	Identifier	i
>6978	Identifier	pt_idx
>6979	Condition	 
>6980	RelationalExpression	dsq < min_dist
>6981	Identifier	min_dist
>6982	Identifier	dsq
>6983	IdentifierDeclStatement	 
>6984	IdentifierDecl	dsq = dx * dx + dy * dy + dz * dz
>6985	AssignmentExpr	dsq = dx * dx + dy * dy + dz * dz
>6986	AdditiveExpression	dx * dx + dy * dy + dz * dz
>6987	AdditiveExpression	dy * dy + dz * dz
>6988	MultiplicativeExpression	dz * dz
>6989	Identifier	dz
>6990	Identifier	dz
>6991	MultiplicativeExpression	dy * dy
>6992	Identifier	dy
>6993	Identifier	dy
>6994	MultiplicativeExpression	dx * dx
>6995	Identifier	dx
>6996	Identifier	dx
>6997	Identifier	dsq
>6998	Identifier	dsq
>6999	IdentifierDeclType	double
>7000	IdentifierDeclStatement	 
>7001	IdentifierDecl	dz = m_point_data [ i ] . m_pos [ 2 ] - z0
>7002	AssignmentExpr	dz = m_point_data [ i ] . m_pos [ 2 ] - z0
>7003	AdditiveExpression	m_point_data [ i ] . m_pos [ 2 ] - z0
>7004	Identifier	z0
>7005	ArrayIndexing	m_point_data [ i ] . m_pos [ 2 ]
>7006	PrimaryExpression	2
>7007	MemberAccess	m_point_data [ i ] . m_pos
>7008	Identifier	m_pos
>7009	ArrayIndexing	m_point_data [ i ]
>7010	Identifier	i
>7011	Identifier	m_point_data
>7012	Identifier	dz
>7013	Identifier	dz
>7014	IdentifierDeclType	double
>7015	IdentifierDeclStatement	 
>7016	IdentifierDecl	dy = m_point_data [ i ] . m_pos [ 1 ] - y0
>7017	AssignmentExpr	dy = m_point_data [ i ] . m_pos [ 1 ] - y0
>7018	AdditiveExpression	m_point_data [ i ] . m_pos [ 1 ] - y0
>7019	Identifier	y0
>7020	ArrayIndexing	m_point_data [ i ] . m_pos [ 1 ]
>7021	PrimaryExpression	1
>7022	MemberAccess	m_point_data [ i ] . m_pos
>7023	Identifier	m_pos
>7024	ArrayIndexing	m_point_data [ i ]
>7025	Identifier	i
>7026	Identifier	m_point_data
>7027	Identifier	dy
>7028	Identifier	dy
>7029	IdentifierDeclType	double
>7030	IdentifierDeclStatement	 
>7031	IdentifierDecl	dx = m_point_data [ i ] . m_pos [ 0 ] - x0
>7032	AssignmentExpr	dx = m_point_data [ i ] . m_pos [ 0 ] - x0
>7033	AdditiveExpression	m_point_data [ i ] . m_pos [ 0 ] - x0
>7034	Identifier	x0
>7035	ArrayIndexing	m_point_data [ i ] . m_pos [ 0 ]
>7036	PrimaryExpression	0
>7037	MemberAccess	m_point_data [ i ] . m_pos
>7038	Identifier	m_pos
>7039	ArrayIndexing	m_point_data [ i ]
>7040	Identifier	i
>7041	Identifier	m_point_data
>7042	Identifier	dx
>7043	Identifier	dx
>7044	IdentifierDeclType	double
>7045	IncDecOp	 
>7046	IncDec	++
>7047	Identifier	i
>7048	Condition	 
>7049	RelationalExpression	i < num_points
>7050	Identifier	num_points
>7051	Identifier	i
>7052	ForInit	 
>7053	IdentifierDeclStatement	int i = 0 ;
>7054	IdentifierDecl	i = 0
>7055	AssignmentExpr	i = 0
>7056	PrimaryExpression	0
>7057	Identifier	i
>7058	Identifier	i
>7059	IdentifierDeclType	int
>7060	IdentifierDeclStatement	 
>7061	IdentifierDecl	min_dist = DBL_MAX
>7062	AssignmentExpr	min_dist = DBL_MAX
>7063	Identifier	DBL_MAX
>7064	Identifier	DBL_MAX
>7065	Identifier	min_dist
>7066	IdentifierDeclType	double
>7067	IdentifierDeclStatement	 
>7068	IdentifierDecl	pt_idx = - 1
>7069	AssignmentExpr	pt_idx = - 1
>7070	UnaryOp	- 1
>7071	PrimaryExpression	1
>7072	UnaryOperator	-
>7073	Identifier	pt_idx
>7074	Identifier	pt_idx
>7075	IdentifierDeclType	int
>7076	ExpressionStatement	 
>7077	CallExpression	sscanf ( buf , \"%lf %lf %lf %lf %lf %lf\" , & x0 , & y0 , & z0 , & x , & y , & z )
>7078	ArgumentList	buf
>7079	Argument	& z
>7080	UnaryOp	& z
>7081	Identifier	z
>7082	UnaryOperator	&
>7083	Argument	& y
>7084	UnaryOp	& y
>7085	Identifier	y
>7086	UnaryOperator	&
>7087	Argument	& x
>7088	UnaryOp	& x
>7089	Identifier	x
>7090	UnaryOperator	&
>7091	Argument	& z0
>7092	UnaryOp	& z0
>7093	Identifier	z0
>7094	UnaryOperator	&
>7095	Argument	& y0
>7096	UnaryOp	& y0
>7097	Identifier	y0
>7098	UnaryOperator	&
>7099	Argument	& x0
>7100	UnaryOp	& x0
>7101	Identifier	x0
>7102	UnaryOperator	&
>7103	Argument	\"%lf %lf %lf %lf %lf %lf\"
>7104	PrimaryExpression	\"%lf %lf %lf %lf %lf %lf\"
>7105	Argument	buf
>7106	Identifier	buf
>7107	Callee	sscanf
>7108	Identifier	sscanf
>7109	IdentifierDeclStatement	 
>7110	IdentifierDecl	z
>7111	Identifier	z
>7112	IdentifierDeclType	double
>7113	IdentifierDecl	y
>7114	Identifier	y
>7115	IdentifierDeclType	double
>7116	IdentifierDecl	x
>7117	Identifier	x
>7118	IdentifierDeclType	double
>7119	IdentifierDeclStatement	 
>7120	IdentifierDecl	z0
>7121	Identifier	z0
>7122	IdentifierDeclType	double
>7123	IdentifierDecl	y0
>7124	Identifier	y0
>7125	IdentifierDeclType	double
>7126	IdentifierDecl	x0
>7127	Identifier	x0
>7128	IdentifierDeclType	double
>7129	Condition	 
>7130	EqualityExpression	fgets ( buf , 256 , f ) != NULL
>7131	Identifier	NULL
>7132	CallExpression	fgets ( buf , 256 , f )
>7133	ArgumentList	buf
>7134	Argument	f
>7135	Identifier	f
>7136	Argument	256
>7137	PrimaryExpression	256
>7138	Argument	buf
>7139	Identifier	buf
>7140	Callee	fgets
>7141	Identifier	fgets
>7142	IdentifierDeclStatement	 
>7143	IdentifierDecl	buf [ 256 ]
>7144	PrimaryExpression	256
>7145	Identifier	buf
>7146	IdentifierDeclType	char [ 256 ]
>7147	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>7148	CompoundStatement	 
>7149	ExpressionStatement	 
>7150	AssignmentExpr	m_point_constraints [ i ] = v3_new ( 0.0 , 0.0 , 0.0 )
>7151	CallExpression	v3_new ( 0.0 , 0.0 , 0.0 )
>7152	ArgumentList	0.0
>7153	Argument	0.0
>7154	PrimaryExpression	0.0
>7155	Argument	0.0
>7156	PrimaryExpression	0.0
>7157	Argument	0.0
>7158	PrimaryExpression	0.0
>7159	Callee	v3_new
>7160	Identifier	v3_new
>7161	ArrayIndexing	m_point_constraints [ i ]
>7162	Identifier	i
>7163	Identifier	m_point_constraints
>7164	IncDecOp	 
>7165	IncDec	++
>7166	Identifier	i
>7167	Condition	 
>7168	RelationalExpression	i < num_points
>7169	Identifier	num_points
>7170	Identifier	i
>7171	ForInit	 
>7172	IdentifierDeclStatement	int i = 0 ;
>7173	IdentifierDecl	i = 0
>7174	AssignmentExpr	i = 0
>7175	PrimaryExpression	0
>7176	Identifier	i
>7177	Identifier	i
>7178	IdentifierDeclType	int
>7179	ExpressionStatement	 
>7180	AssignmentExpr	m_point_constraints = new v3_t [ num_points ]
>7181	Identifier	num_points
>7182	Identifier	m_point_constraints
>7183	IdentifierDeclStatement	 
>7184	IdentifierDecl	num_points = ( int ) m_point_data . size ( )
>7185	AssignmentExpr	num_points = ( int ) m_point_data . size ( )
>7186	CastExpression	( int ) m_point_data . size ( )
>7187	CallExpression	m_point_data . size ( )
>7188	ArgumentList	 
>7189	Callee	m_point_data . size
>7190	MemberAccess	m_point_data . size
>7191	Identifier	size
>7192	Identifier	m_point_data
>7193	CastTarget	int
>7194	Identifier	num_points
>7195	Identifier	num_points
>7196	IdentifierDeclType	int
>7197	IfStatement	if ( f == NULL )
>7198	CompoundStatement	 
>7199	ReturnStatement	 
>7200	ExpressionStatement	 
>7201	Statement	 
>7202	Statement	 
>7203	Statement	 
>7204	Statement	 
>7205	Statement	 
>7206	Statement	 
>7207	Statement	 
>7208	Condition	 
>7209	EqualityExpression	f == NULL
>7210	Identifier	NULL
>7211	Identifier	f
>7212	IdentifierDeclStatement	 
>7213	IdentifierDecl	* f = fopen ( m_point_constraint_file , \"r\" )
>7214	AssignmentExpr	* f = fopen ( m_point_constraint_file , \"r\" )
>7215	CallExpression	fopen ( m_point_constraint_file , \"r\" )
>7216	ArgumentList	m_point_constraint_file
>7217	Argument	\"r\"
>7218	PrimaryExpression	\"r\"
>7219	Argument	m_point_constraint_file
>7220	Identifier	m_point_constraint_file
>7221	Callee	fopen
>7222	Identifier	fopen
>7223	Identifier	f
>7224	Identifier	f
>7225	IdentifierDeclType	FILE *
>7275	FunctionDef	BaseApp 
>7276	ParameterList	 
>7277	ReturnType	void
>7278	CompoundStatement	 
>7279	ExpressionStatement	 
>7280	CallExpression	fclose ( f )
>7281	ArgumentList	f
>7282	Argument	f
>7283	Identifier	f
>7284	Callee	fclose
>7285	Identifier	fclose
>7286	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>7287	CompoundStatement	 
>7288	ExpressionStatement	 
>7289	AssignmentExpr	m_image_data [ i ] . m_known_intrinsics = true
>7290	Identifier	true
>7291	MemberAccess	m_image_data [ i ] . m_known_intrinsics
>7292	Identifier	m_known_intrinsics
>7293	ArrayIndexing	m_image_data [ i ]
>7294	Identifier	i
>7295	Identifier	m_image_data
>7296	ExpressionStatement	 
>7297	CallExpression	memcpy ( m_image_data [ i ] . m_k , Ks [ best_K ] . k , 5 * sizeof ( double ) )
>7298	ArgumentList	m_image_data [ i ] . m_k
>7299	Argument	5 * sizeof ( double )
>7300	MultiplicativeExpression	5 * sizeof ( double )
>7301	SizeofExpr	sizeof ( double )
>7302	SizeofOperand	double
>7303	Sizeof	sizeof
>7304	PrimaryExpression	5
>7305	Argument	Ks [ best_K ] . k
>7306	MemberAccess	Ks [ best_K ] . k
>7307	Identifier	k
>7308	ArrayIndexing	Ks [ best_K ]
>7309	Identifier	best_K
>7310	Identifier	Ks
>7311	Argument	m_image_data [ i ] . m_k
>7312	MemberAccess	m_image_data [ i ] . m_k
>7313	Identifier	m_k
>7314	ArrayIndexing	m_image_data [ i ]
>7315	Identifier	i
>7316	Identifier	m_image_data
>7317	Callee	memcpy
>7318	Identifier	memcpy
>7319	ExpressionStatement	 
>7320	CallExpression	memcpy ( m_image_data [ i ] . m_K , Ks [ best_K ] . K , 9 * sizeof ( double ) )
>7321	ArgumentList	m_image_data [ i ] . m_K
>7322	Argument	9 * sizeof ( double )
>7323	MultiplicativeExpression	9 * sizeof ( double )
>7324	SizeofExpr	sizeof ( double )
>7325	SizeofOperand	double
>7326	Sizeof	sizeof
>7327	PrimaryExpression	9
>7328	Argument	Ks [ best_K ] . K
>7329	MemberAccess	Ks [ best_K ] . K
>7330	Identifier	K
>7331	ArrayIndexing	Ks [ best_K ]
>7332	Identifier	best_K
>7333	Identifier	Ks
>7334	Argument	m_image_data [ i ] . m_K
>7335	MemberAccess	m_image_data [ i ] . m_K
>7336	Identifier	m_K
>7337	ArrayIndexing	m_image_data [ i ]
>7338	Identifier	i
>7339	Identifier	m_image_data
>7340	Callee	memcpy
>7341	Identifier	memcpy
>7342	ExpressionStatement	 
>7343	CallExpression	printf ( \"  image %d has intrinsics %d\n\" , i , best_K )
>7344	ArgumentList	\"  image %d has intrinsics %d\n\"
>7345	Argument	best_K
>7346	Identifier	best_K
>7347	Argument	i
>7348	Identifier	i
>7349	Argument	\"  image %d has intrinsics %d\n\"
>7350	PrimaryExpression	\"  image %d has intrinsics %d\n\"
>7351	Callee	printf
>7352	Identifier	printf
>7353	ForStatement	for ( int j = 0 ; j < num_intrinsics ; j ++ )
>7354	CompoundStatement	 
>7355	IfStatement	if ( dist < min_dist )
>7356	CompoundStatement	 
>7357	ExpressionStatement	 
>7358	AssignmentExpr	min_dist = dist
>7359	Identifier	dist
>7360	Identifier	min_dist
>7361	ExpressionStatement	 
>7362	AssignmentExpr	best_K = j
>7363	Identifier	j
>7364	Identifier	best_K
>7365	Condition	 
>7366	RelationalExpression	dist < min_dist
>7367	Identifier	min_dist
>7368	Identifier	dist
>7369	IdentifierDeclStatement	 
>7370	IdentifierDecl	dist = fabs ( f_j - f )
>7371	AssignmentExpr	dist = fabs ( f_j - f )
>7372	CallExpression	fabs ( f_j - f )
>7373	ArgumentList	f_j - f
>7374	Argument	f_j - f
>7375	AdditiveExpression	f_j - f
>7376	Identifier	f
>7377	Identifier	f_j
>7378	Callee	fabs
>7379	Identifier	fabs
>7380	Identifier	dist
>7381	Identifier	dist
>7382	IdentifierDeclType	double
>7383	IdentifierDeclStatement	 
>7384	IdentifierDecl	f_j = 0.5 * ( Ks [ j ] . K [ 0 ] + Ks [ j ] . K [ 4 ] )
>7385	AssignmentExpr	f_j = 0.5 * ( Ks [ j ] . K [ 0 ] + Ks [ j ] . K [ 4 ] )
>7386	MultiplicativeExpression	0.5 * ( Ks [ j ] . K [ 0 ] + Ks [ j ] . K [ 4 ] )
>7387	AdditiveExpression	Ks [ j ] . K [ 0 ] + Ks [ j ] . K [ 4 ]
>7388	ArrayIndexing	Ks [ j ] . K [ 4 ]
>7389	PrimaryExpression	4
>7390	MemberAccess	Ks [ j ] . K
>7391	Identifier	K
>7392	ArrayIndexing	Ks [ j ]
>7393	Identifier	j
>7394	Identifier	Ks
>7395	ArrayIndexing	Ks [ j ] . K [ 0 ]
>7396	PrimaryExpression	0
>7397	MemberAccess	Ks [ j ] . K
>7398	Identifier	K
>7399	ArrayIndexing	Ks [ j ]
>7400	Identifier	j
>7401	Identifier	Ks
>7402	PrimaryExpression	0.5
>7403	Identifier	f_j
>7404	Identifier	f_j
>7405	IdentifierDeclType	double
>7406	IncDecOp	 
>7407	IncDec	++
>7408	Identifier	j
>7409	Condition	 
>7410	RelationalExpression	j < num_intrinsics
>7411	Identifier	num_intrinsics
>7412	Identifier	j
>7413	ForInit	 
>7414	IdentifierDeclStatement	int j = 0 ;
>7415	IdentifierDecl	j = 0
>7416	AssignmentExpr	j = 0
>7417	PrimaryExpression	0
>7418	Identifier	j
>7419	Identifier	j
>7420	IdentifierDeclType	int
>7421	IdentifierDeclStatement	 
>7422	IdentifierDecl	best_K = - 1
>7423	AssignmentExpr	best_K = - 1
>7424	UnaryOp	- 1
>7425	PrimaryExpression	1
>7426	UnaryOperator	-
>7427	Identifier	best_K
>7428	Identifier	best_K
>7429	IdentifierDeclType	int
>7430	IdentifierDeclStatement	 
>7431	IdentifierDecl	min_dist = DBL_MAX
>7432	AssignmentExpr	min_dist = DBL_MAX
>7433	Identifier	DBL_MAX
>7434	Identifier	DBL_MAX
>7435	Identifier	min_dist
>7436	IdentifierDeclType	double
>7437	IdentifierDeclStatement	 
>7438	IdentifierDecl	f = m_image_data [ i ] . m_init_focal
>7439	AssignmentExpr	f = m_image_data [ i ] . m_init_focal
>7440	MemberAccess	m_image_data [ i ] . m_init_focal
>7441	Identifier	m_init_focal
>7442	ArrayIndexing	m_image_data [ i ]
>7443	Identifier	i
>7444	Identifier	m_image_data
>7445	Identifier	f
>7446	Identifier	f
>7447	IdentifierDeclType	double
>7448	ExpressionStatement	 
>7449	CallExpression	assert ( m_image_data [ i ] . m_has_init_focal )
>7450	ArgumentList	m_image_data [ i ] . m_has_init_focal
>7451	Argument	m_image_data [ i ] . m_has_init_focal
>7452	MemberAccess	m_image_data [ i ] . m_has_init_focal
>7453	Identifier	m_has_init_focal
>7454	ArrayIndexing	m_image_data [ i ]
>7455	Identifier	i
>7456	Identifier	m_image_data
>7457	Callee	assert
>7458	Identifier	assert
>7459	IncDecOp	 
>7460	IncDec	++
>7461	Identifier	i
>7462	Condition	 
>7463	RelationalExpression	i < num_images
>7464	Identifier	num_images
>7465	Identifier	i
>7466	ForInit	 
>7467	IdentifierDeclStatement	int i = 0 ;
>7468	IdentifierDecl	i = 0
>7469	AssignmentExpr	i = 0
>7470	PrimaryExpression	0
>7471	Identifier	i
>7472	Identifier	i
>7473	IdentifierDeclType	int
>7474	IdentifierDeclStatement	 
>7475	IdentifierDecl	num_images = GetNumImages ( )
>7476	AssignmentExpr	num_images = GetNumImages ( )
>7477	CallExpression	GetNumImages ( )
>7478	ArgumentList	 
>7479	Callee	GetNumImages
>7480	Identifier	GetNumImages
>7481	Identifier	num_images
>7482	Identifier	num_images
>7483	IdentifierDeclType	int
>7484	ForStatement	for ( int i = 0 ; i < num_intrinsics ; i ++ )
>7485	CompoundStatement	 
>7486	ExpressionStatement	 
>7487	CallExpression	Ks . push_back ( I )
>7488	ArgumentList	I
>7489	Argument	I
>7490	Identifier	I
>7491	Callee	Ks . push_back
>7492	MemberAccess	Ks . push_back
>7493	Identifier	push_back
>7494	Identifier	Ks
>7495	ExpressionStatement	 
>7496	CallExpression	fscanf ( f , \"%lf %lf %lf %lf %lf\n\" , I . k + 0 , I . k + 1 , I . k + 2 , I . k + 3 , I . k + 4 )
>7497	ArgumentList	f
>7498	Argument	I . k + 4
>7499	AdditiveExpression	I . k + 4
>7500	PrimaryExpression	4
>7501	MemberAccess	I . k
>7502	Identifier	k
>7503	Identifier	I
>7504	Argument	I . k + 3
>7505	AdditiveExpression	I . k + 3
>7506	PrimaryExpression	3
>7507	MemberAccess	I . k
>7508	Identifier	k
>7509	Identifier	I
>7510	Argument	I . k + 2
>7511	AdditiveExpression	I . k + 2
>7512	PrimaryExpression	2
>7513	MemberAccess	I . k
>7514	Identifier	k
>7515	Identifier	I
>7516	Argument	I . k + 1
>7517	AdditiveExpression	I . k + 1
>7518	PrimaryExpression	1
>7519	MemberAccess	I . k
>7520	Identifier	k
>7521	Identifier	I
>7522	Argument	I . k + 0
>7523	AdditiveExpression	I . k + 0
>7524	PrimaryExpression	0
>7525	MemberAccess	I . k
>7526	Identifier	k
>7527	Identifier	I
>7528	Argument	\"%lf %lf %lf %lf %lf\n\"
>7529	PrimaryExpression	\"%lf %lf %lf %lf %lf\n\"
>7530	Argument	f
>7531	Identifier	f
>7532	Callee	fscanf
>7533	Identifier	fscanf
>7534	ExpressionStatement	 
>7535	CallExpression	fscanf ( f , \"%lf %lf %lf %lf %lf %lf %lf %lf %lf\n\" , I . K + 0 , I . K + 1 , I . K + 2 , I . K + 3 , I . K + 4 , \
>7536	ArgumentList	f
>7537	Argument	I . K + 8
>7538	AdditiveExpression	I . K + 8
>7539	PrimaryExpression	8
>7540	MemberAccess	I . K
>7541	Identifier	K
>7542	Identifier	I
>7543	Argument	I . K + 7
>7544	AdditiveExpression	I . K + 7
>7545	PrimaryExpression	7
>7546	MemberAccess	I . K
>7547	Identifier	K
>7548	Identifier	I
>7549	Argument	I . K + 6
>7550	AdditiveExpression	I . K + 6
>7551	PrimaryExpression	6
>7552	MemberAccess	I . K
>7553	Identifier	K
>7554	Identifier	I
>7555	Argument	I . K + 5
>7556	AdditiveExpression	I . K + 5
>7557	PrimaryExpression	5
>7558	MemberAccess	I . K
>7559	Identifier	K
>7560	Identifier	I
>7561	Argument	I . K + 4
>7562	AdditiveExpression	I . K + 4
>7563	PrimaryExpression	4
>7564	MemberAccess	I . K
>7565	Identifier	K
>7566	Identifier	I
>7567	Argument	I . K + 3
>7568	AdditiveExpression	I . K + 3
>7569	PrimaryExpression	3
>7570	MemberAccess	I . K
>7571	Identifier	K
>7572	Identifier	I
>7573	Argument	I . K + 2
>7574	AdditiveExpression	I . K + 2
>7575	PrimaryExpression	2
>7576	MemberAccess	I . K
>7577	Identifier	K
>7578	Identifier	I
>7579	Argument	I . K + 1
>7580	AdditiveExpression	I . K + 1
>7581	PrimaryExpression	1
>7582	MemberAccess	I . K
>7583	Identifier	K
>7584	Identifier	I
>7585	Argument	I . K + 0
>7586	AdditiveExpression	I . K + 0
>7587	PrimaryExpression	0
>7588	MemberAccess	I . K
>7589	Identifier	K
>7590	Identifier	I
>7591	Argument	\"%lf %lf %lf %lf %lf %lf %lf %lf %lf\n\"
>7592	PrimaryExpression	\"%lf %lf %lf %lf %lf %lf %lf %lf %lf\n\"
>7593	Argument	f
>7594	Identifier	f
>7595	Callee	fscanf
>7596	Identifier	fscanf
>7597	IdentifierDeclStatement	 
>7598	IdentifierDecl	I
>7599	Identifier	I
>7600	IdentifierDeclType	intrinsics_t
>7601	IncDecOp	 
>7602	IncDec	++
>7603	Identifier	i
>7604	Condition	 
>7605	RelationalExpression	i < num_intrinsics
>7606	Identifier	num_intrinsics
>7607	Identifier	i
>7608	ForInit	 
>7609	IdentifierDeclStatement	int i = 0 ;
>7610	IdentifierDecl	i = 0
>7611	AssignmentExpr	i = 0
>7612	PrimaryExpression	0
>7613	Identifier	i
>7614	Identifier	i
>7615	IdentifierDeclType	int
>7616	IdentifierDeclStatement	 
>7617	IdentifierDecl	Ks
>7618	Identifier	Ks
>7619	IdentifierDeclType	std 
>7620	ExpressionStatement	 
>7621	CallExpression	fscanf ( f , \"%d\n\" , & num_intrinsics )
>7622	ArgumentList	f
>7623	Argument	& num_intrinsics
>7624	UnaryOp	& num_intrinsics
>7625	Identifier	num_intrinsics
>7626	UnaryOperator	&
>7627	Argument	\"%d\n\"
>7628	PrimaryExpression	\"%d\n\"
>7629	Argument	f
>7630	Identifier	f
>7631	Callee	fscanf
>7632	Identifier	fscanf
>7633	IdentifierDeclStatement	 
>7634	IdentifierDecl	num_intrinsics = 0
>7635	AssignmentExpr	num_intrinsics = 0
>7636	PrimaryExpression	0
>7637	Identifier	num_intrinsics
>7638	Identifier	num_intrinsics
>7639	IdentifierDeclType	int
>7640	ExpressionStatement	 
>7641	CallExpression	assert ( f != NULL )
>7642	ArgumentList	f != NULL
>7643	Argument	f != NULL
>7644	EqualityExpression	f != NULL
>7645	Identifier	NULL
>7646	Identifier	f
>7647	Callee	assert
>7648	Identifier	assert
>7649	IdentifierDeclStatement	 
>7650	IdentifierDecl	* f = fopen ( m_intrinsics_file , \"r\" )
>7651	AssignmentExpr	* f = fopen ( m_intrinsics_file , \"r\" )
>7652	CallExpression	fopen ( m_intrinsics_file , \"r\" )
>7653	ArgumentList	m_intrinsics_file
>7654	Argument	\"r\"
>7655	PrimaryExpression	\"r\"
>7656	Argument	m_intrinsics_file
>7657	Identifier	m_intrinsics_file
>7658	Callee	fopen
>7659	Identifier	fopen
>7660	Identifier	f
>7661	Identifier	f
>7662	IdentifierDeclType	FILE *
>7663	ExpressionStatement	 
>7664	CallExpression	assert ( m_intrinsics_file != NULL )
>7665	ArgumentList	m_intrinsics_file != NULL
>7666	Argument	m_intrinsics_file != NULL
>7667	EqualityExpression	m_intrinsics_file != NULL
>7668	Identifier	NULL
>7669	Identifier	m_intrinsics_file
>7670	Callee	assert
>7671	Identifier	assert
>7672	ExpressionStatement	 
>7673	CallExpression	printf ( \"[ReadIntrinsicsFile] Reading intrinsics...\n\" )
>7674	ArgumentList	\"[ReadIntrinsicsFile] Reading intrinsics...\n\"
>7675	Argument	\"[ReadIntrinsicsFile] Reading intrinsics...\n\"
>7676	PrimaryExpression	\"[ReadIntrinsicsFile] Reading intrinsics...\n\"
>7677	Callee	printf
>7678	Identifier	printf
>7720	FunctionDef	BaseApp 
>7721	ParameterList	 
>7722	ReturnType	void
>7723	CompoundStatement	 
>7724	ExpressionStatement	 
>7725	CallExpression	fflush ( stdout )
>7726	ArgumentList	stdout
>7727	Argument	stdout
>7728	Identifier	stdout
>7729	Callee	fflush
>7730	Identifier	fflush
>7731	ExpressionStatement	 
>7732	CallExpression	fclose ( f )
>7733	ArgumentList	f
>7734	Argument	f
>7735	Identifier	f
>7736	Callee	fclose
>7737	Identifier	fclose
>7738	WhileStatement	while ( fgets ( buf , 255 , f ) )
>7739	CompoundStatement	 
>7740	ExpressionStatement	 
>7741	AssignmentExpr	m_image_data [ img ] . m_ignore_in_bundle = true
>7742	Identifier	true
>7743	MemberAccess	m_image_data [ img ] . m_ignore_in_bundle
>7744	Identifier	m_ignore_in_bundle
>7745	ArrayIndexing	m_image_data [ img ]
>7746	Identifier	img
>7747	Identifier	m_image_data
>7748	ExpressionStatement	 
>7749	CallExpression	printf ( \"[ReadIgnoreFile] Ignoring image %d\n\" , img )
>7750	ArgumentList	\"[ReadIgnoreFile] Ignoring image %d\n\"
>7751	Argument	img
>7752	Identifier	img
>7753	Argument	\"[ReadIgnoreFile] Ignoring image %d\n\"
>7754	PrimaryExpression	\"[ReadIgnoreFile] Ignoring image %d\n\"
>7755	Callee	printf
>7756	Identifier	printf
>7757	IfStatement	if ( img < 0 || img >= num_images )
>7758	CompoundStatement	 
>7759	ContinueStatement	 
>7760	ExpressionStatement	 
>7761	Statement	 
>7762	Statement	 
>7763	Statement	 
>7764	Statement	 
>7765	Statement	 
>7766	Statement	 
>7767	Statement	 
>7768	Condition	 
>7769	OrExpression	img < 0 || img >= num_images
>7770	RelationalExpression	img >= num_images
>7771	Identifier	num_images
>7772	Identifier	img
>7773	RelationalExpression	img < 0
>7774	PrimaryExpression	0
>7775	Identifier	img
>7776	IdentifierDeclStatement	 
>7777	IdentifierDecl	img = atoi ( buf )
>7778	AssignmentExpr	img = atoi ( buf )
>7779	CallExpression	atoi ( buf )
>7780	ArgumentList	buf
>7781	Argument	buf
>7782	Identifier	buf
>7783	Callee	atoi
>7784	Identifier	atoi
>7785	Identifier	img
>7786	Identifier	img
>7787	IdentifierDeclType	int
>7788	Condition	 
>7789	CallExpression	fgets ( buf , 255 , f )
>7790	ArgumentList	buf
>7791	Argument	f
>7792	Identifier	f
>7793	Argument	255
>7794	PrimaryExpression	255
>7795	Argument	buf
>7796	Identifier	buf
>7797	Callee	fgets
>7798	Identifier	fgets
>7799	IdentifierDeclStatement	 
>7800	IdentifierDecl	num_images = GetNumImages ( )
>7801	AssignmentExpr	num_images = GetNumImages ( )
>7802	CallExpression	GetNumImages ( )
>7803	ArgumentList	 
>7804	Callee	GetNumImages
>7805	Identifier	GetNumImages
>7806	Identifier	num_images
>7807	Identifier	num_images
>7808	IdentifierDeclType	int
>7809	IdentifierDeclStatement	 
>7810	IdentifierDecl	buf [ 256 ]
>7811	PrimaryExpression	256
>7812	Identifier	buf
>7813	IdentifierDeclType	char [ 256 ]
>7814	IfStatement	if ( f == NULL )
>7815	CompoundStatement	 
>7816	ReturnStatement	 
>7817	ExpressionStatement	 
>7818	Statement	 
>7819	Statement	 
>7820	Statement	 
>7821	Statement	 
>7822	Statement	 
>7823	Statement	 
>7824	Statement	 
>7825	Condition	 
>7826	EqualityExpression	f == NULL
>7827	Identifier	NULL
>7828	Identifier	f
>7829	IdentifierDeclStatement	 
>7830	IdentifierDecl	* f = fopen ( m_ignore_file , \"r\" )
>7831	AssignmentExpr	* f = fopen ( m_ignore_file , \"r\" )
>7832	CallExpression	fopen ( m_ignore_file , \"r\" )
>7833	ArgumentList	m_ignore_file
>7834	Argument	\"r\"
>7835	PrimaryExpression	\"r\"
>7836	Argument	m_ignore_file
>7837	Identifier	m_ignore_file
>7838	Callee	fopen
>7839	Identifier	fopen
>7840	Identifier	f
>7841	Identifier	f
>7842	IdentifierDeclType	FILE *
>7843	IfStatement	if ( m_ignore_file == NULL )
>7844	ReturnStatement	 
>7845	Condition	 
>7846	EqualityExpression	m_ignore_file == NULL
>7847	Identifier	NULL
>7848	Identifier	m_ignore_file
>7868	FunctionDef	BaseApp 
>7869	ParameterList	FILE * f
>7870	Parameter	 
>7871	Identifier	f
>7872	ParameterType	FILE *
>7873	ReturnType	void
>7874	CompoundStatement	 
>7875	ExpressionStatement	 
>7876	CallExpression	UnscaleCameras ( num_images )
>7877	ArgumentList	num_images
>7878	Argument	num_images
>7879	Identifier	num_images
>7880	Callee	UnscaleCameras
>7881	Identifier	UnscaleCameras
>7882	WhileStatement	while ( fgets ( buf , 256 , f ) )
>7883	CompoundStatement	 
>7884	IfStatement	if ( data . ReadCamera ( ) && data . ReadTracks ( img_idx , m_point_data ) )
>7885	CompoundStatement	 
>7886	ExpressionStatement	 
>7887	CallExpression	m_image_data . push_back ( data )
>7888	ArgumentList	data
>7889	Argument	data
>7890	Identifier	data
>7891	Callee	m_image_data . push_back
>7892	MemberAccess	m_image_data . push_back
>7893	Identifier	push_back
>7894	Identifier	m_image_data
>7895	ExpressionStatement	 
>7896	AssignmentExpr	data . m_added = true
>7897	Identifier	true
>7898	MemberAccess	data . m_added
>7899	Identifier	m_added
>7900	Identifier	data
>7901	ExpressionStatement	 
>7902	CallExpression	data . ReadMetadata ( )
>7903	ArgumentList	 
>7904	Callee	data . ReadMetadata
>7905	MemberAccess	data . ReadMetadata
>7906	Identifier	ReadMetadata
>7907	Identifier	data
>7908	Condition	 
>7909	AndExpression	data . ReadCamera ( ) && data . ReadTracks ( img_idx , m_point_data )
>7910	CallExpression	data . ReadTracks ( img_idx , m_point_data )
>7911	ArgumentList	img_idx
>7912	Argument	m_point_data
>7913	Identifier	m_point_data
>7914	Argument	img_idx
>7915	Identifier	img_idx
>7916	Callee	data . ReadTracks
>7917	MemberAccess	data . ReadTracks
>7918	Identifier	ReadTracks
>7919	Identifier	data
>7920	CallExpression	data . ReadCamera ( )
>7921	ArgumentList	 
>7922	Callee	data . ReadCamera
>7923	MemberAccess	data . ReadCamera
>7924	Identifier	ReadCamera
>7925	Identifier	data
>7926	IdentifierDeclStatement	 
>7927	IdentifierDecl	img_idx = ( int ) m_image_data . size ( )
>7928	AssignmentExpr	img_idx = ( int ) m_image_data . size ( )
>7929	CastExpression	( int ) m_image_data . size ( )
>7930	CallExpression	m_image_data . size ( )
>7931	ArgumentList	 
>7932	Callee	m_image_data . size
>7933	MemberAccess	m_image_data . size
>7934	Identifier	size
>7935	Identifier	m_image_data
>7936	CastTarget	int
>7937	Identifier	img_idx
>7938	Identifier	img_idx
>7939	IdentifierDeclType	int
>7940	ExpressionStatement	 
>7941	CallExpression	printf ( \"[InitializeImagesFromFile] Initializing image %s\n\" , data . m_name )
>7942	ArgumentList	\"[InitializeImagesFromFile] Initializing image %s\n\"
>7943	Argument	data . m_name
>7944	MemberAccess	data . m_name
>7945	Identifier	m_name
>7946	Identifier	data
>7947	Argument	\"[InitializeImagesFromFile] Initializing image %s\n\"
>7948	PrimaryExpression	\"[InitializeImagesFromFile] Initializing image %s\n\"
>7949	Callee	printf
>7950	Identifier	printf
>7951	ExpressionStatement	 
>7952	AssignmentExpr	data . m_licensed = true
>7953	Identifier	true
>7954	MemberAccess	data . m_licensed
>7955	Identifier	m_licensed
>7956	Identifier	data
>7957	ExpressionStatement	 
>7958	CallExpression	data . InitFromString ( buf , m_image_directory , false )
>7959	ArgumentList	buf
>7960	Argument	false
>7961	Identifier	false
>7962	Argument	m_image_directory
>7963	Identifier	m_image_directory
>7964	Argument	buf
>7965	Identifier	buf
>7966	Callee	data . InitFromString
>7967	MemberAccess	data . InitFromString
>7968	Identifier	InitFromString
>7969	Identifier	data
>7970	IdentifierDeclStatement	 
>7971	IdentifierDecl	data
>7972	Identifier	data
>7973	IdentifierDeclType	ImageData
>7974	Condition	 
>7975	CallExpression	fgets ( buf , 256 , f )
>7976	ArgumentList	buf
>7977	Argument	f
>7978	Identifier	f
>7979	Argument	256
>7980	PrimaryExpression	256
>7981	Argument	buf
>7982	Identifier	buf
>7983	Callee	fgets
>7984	Identifier	fgets
>7985	IdentifierDeclStatement	 
>7986	IdentifierDecl	num_images = GetNumImages ( )
>7987	AssignmentExpr	num_images = GetNumImages ( )
>7988	CallExpression	GetNumImages ( )
>7989	ArgumentList	 
>7990	Callee	GetNumImages
>7991	Identifier	GetNumImages
>7992	Identifier	num_images
>7993	Identifier	num_images
>7994	IdentifierDeclType	int
>7995	IdentifierDeclStatement	 
>7996	IdentifierDecl	buf [ 256 ]
>7997	PrimaryExpression	256
>7998	Identifier	buf
>7999	IdentifierDeclType	char [ 256 ]
>8021	FunctionDef	BaseApp 
>8022	ParameterList	const char * filename
>8023	Parameter	 
>8024	Identifier	filename
>8025	ParameterType	const char *
>8026	ReturnType	void
>8027	CompoundStatement	 
>8032	FunctionDef	BaseApp 
>8033	ParameterList	const char * filename
>8034	Parameter	 
>8035	Identifier	filename
>8036	ParameterType	const char *
>8037	ReturnType	void
>8038	CompoundStatement	 
<3=9,8,4
<4=5
<5=7,6
<9=99,89,79,35,25,10
<10=11
<11=23,12
<12=21,13
<13=14
<14=18,15
<15=17,16
<18=20,19
<21=22
<23=24
<25=26
<26=34,33,27
<27=32,28
<28=30,29
<30=31
<35=71,67,64,36
<36=55,48,37
<37=38
<38=42,39
<39=40
<40=41
<42=43
<43=45,44
<45=47,46
<48=49
<49=53,50
<50=51
<51=52
<53=54
<55=56
<56=62,57
<57=60,58
<58=59
<60=61
<62=63
<64=66,65
<67=68
<68=70,69
<71=72
<72=73
<73=78,77,74
<74=76,75
<79=80
<80=88,87,81
<81=86,82
<82=84,83
<84=85
<89=90
<90=98,97,91
<91=96,92
<92=94,93
<94=95
<99=100
<100=104,101
<101=102
<102=103
<104=105
<121=130,129,122
<122=126,123
<123=125,124
<126=128,127
<130=323,308,131
<131=301,134,132
<132=133
<134=287,283,270,256,247,243,167,153,142,135
<135=136
<136=140,137
<137=138
<138=139
<140=141
<142=143
<143=145,144
<145=149,146
<146=147
<147=148
<149=150
<150=152,151
<153=154
<154=166,165,155
<155=164,156
<156=162,157
<157=160,158
<158=159
<160=161
<162=163
<167=235,231,228,168
<168=221,204,194,190,184,178,169
<169=170
<170=174,171
<171=172
<172=173
<174=175
<175=177,176
<178=179
<179=181,180
<181=183,182
<184=185
<185=187,186
<187=189,188
<190=191
<191=193,192
<194=196,195
<196=197
<197=201,198
<198=200,199
<201=203,202
<204=205
<205=219,206
<206=217,215,211,207
<207=208
<208=210,209
<211=212
<212=214,213
<215=216
<217=218
<219=220
<221=225,222
<222=224,223
<225=227,226
<228=230,229
<231=232
<232=234,233
<235=236
<236=237
<237=242,241,238
<238=240,239
<243=244
<244=246,245
<247=248
<248=254,249
<249=252,250
<250=251
<252=253
<254=255
<256=266,257
<257=259,258
<259=260
<260=264,261
<261=262
<262=263
<264=265
<266=267
<267=269,268
<270=271
<271=281,272
<272=279,277,273
<273=274
<274=276,275
<277=278
<279=280
<281=282
<283=284
<284=286,285
<287=288
<288=300,299,289
<289=298,290
<290=296,291
<291=294,292
<292=293
<294=295
<296=297
<301=302
<302=306,303
<303=304
<304=305
<306=307
<308=309
<309=321,310
<310=319,317,315,313,311
<311=312
<313=314
<315=316
<317=318
<319=320
<321=322
<323=324
<324=327,326,325
<355=361,360,356
<356=357
<357=359,358
<361=590,583,578,564,542,537,369,362
<362=363
<363=367,364
<364=365
<365=366
<367=368
<369=526,370
<370=519,502,493,489,476,472,396,382,371
<371=372
<372=374,373
<374=378,375
<375=376
<376=377
<378=379
<379=381,380
<382=383
<383=395,394,384
<384=393,385
<385=391,386
<386=389,387
<387=388
<389=390
<391=392
<396=464,460,457,397
<397=450,433,423,419,413,407,398
<398=399
<399=403,400
<400=401
<401=402
<403=404
<404=406,405
<407=408
<408=410,409
<410=412,411
<413=414
<414=416,415
<416=418,417
<419=420
<420=422,421
<423=425,424
<425=426
<426=430,427
<427=429,428
<430=432,431
<433=434
<434=448,435
<435=446,444,440,436
<436=437
<437=439,438
<440=441
<441=443,442
<444=445
<446=447
<448=449
<450=454,451
<451=453,452
<454=456,455
<457=459,458
<460=461
<461=463,462
<464=465
<465=466
<466=471,470,467
<467=469,468
<472=473
<473=475,474
<476=477
<477=487,478
<478=485,483,479
<479=480
<480=482,481
<483=484
<485=486
<487=488
<489=490
<490=492,491
<493=494
<494=500,495
<495=498,496
<496=497
<498=499
<500=501
<502=503
<503=517,504
<504=515,513,509,505
<505=506
<506=508,507
<509=510
<510=512,511
<513=514
<515=516
<517=518
<519=523,520
<520=522,521
<523=525,524
<526=527
<527=535,528
<528=533,531,529
<529=530
<531=532
<533=534
<535=536
<537=538
<538=541,540,539
<542=560,543
<543=551,544
<544=545
<545=549,546
<546=547
<547=548
<549=550
<551=552
<552=558,553
<553=556,554
<554=555
<556=557
<558=559
<560=561
<561=563,562
<564=565
<565=577,576,566
<566=575,567
<567=573,568
<568=571,569
<569=570
<571=572
<573=574
<578=579
<579=581,580
<581=582
<583=584
<584=588,585
<585=586
<586=587
<588=589
<590=592,591
<592=593
<624=630,629,625
<625=626
<626=628,627
<630=927,631
<631=919,915,912,632
<632=907,894,880,874,865,858,854,656,647,640,633
<633=634
<634=638,635
<635=636
<636=637
<638=639
<640=641
<641=645,642
<642=643
<643=644
<645=646
<647=648
<648=654,649
<649=652,650
<650=651
<652=653
<654=655
<656=841,657
<657=828,824,811,807,729,658
<658=721,699,659
<659=660
<660=690,676,665,661
<661=662
<662=664,663
<665=666
<666=668,667
<668=672,669
<669=670
<670=671
<672=673
<673=675,674
<676=677
<677=689,688,678
<678=687,679
<679=685,680
<680=683,681
<681=682
<683=684
<685=686
<690=691
<691=697,692
<692=695,693
<693=694
<695=696
<697=698
<699=707,700
<700=701
<701=703,702
<703=704
<704=706,705
<707=717,708
<708=709
<709=715,710
<710=713,711
<711=712
<713=714
<715=716
<717=718
<718=720,719
<721=722
<722=726,723
<723=725,724
<726=728,727
<729=799,793,790,730
<730=783,766,756,752,746,740,731
<731=732
<732=736,733
<733=734
<734=735
<736=737
<737=739,738
<740=741
<741=743,742
<743=745,744
<746=747
<747=749,748
<749=751,750
<752=753
<753=755,754
<756=758,757
<758=759
<759=763,760
<760=762,761
<763=765,764
<766=767
<767=781,768
<768=779,777,773,769
<769=770
<770=772,771
<773=774
<774=776,775
<777=778
<779=780
<781=782
<783=787,784
<784=786,785
<787=789,788
<790=792,791
<793=794
<794=798,795
<795=797,796
<799=800
<800=801
<801=806,805,802
<802=804,803
<807=808
<808=810,809
<811=812
<812=822,813
<813=820,818,814
<814=815
<815=817,816
<818=819
<820=821
<822=823
<824=825
<825=827,826
<828=829
<829=839,830
<830=837,835,831
<831=832
<832=834,833
<835=836
<837=838
<839=840
<841=842
<842=844,843
<844=852,845
<845=850,848,846
<846=847
<848=849
<850=851
<852=853
<854=855
<855=857,856
<858=859
<859=864,863,860
<860=862,861
<865=866
<866=872,867
<867=870,868
<868=869
<870=871
<872=873
<874=876,875
<876=877
<877=879,878
<880=881
<881=893,892,882
<882=891,883
<883=889,884
<884=887,885
<885=886
<887=888
<889=890
<894=895
<895=905,896
<896=903,901,899,897
<897=898
<899=900
<901=902
<903=904
<905=906
<907=908
<908=911,910,909
<912=914,913
<915=916
<916=918,917
<919=920
<920=921
<921=926,925,922
<922=924,923
<927=928
<928=936,935,929
<929=934,930
<930=932,931
<932=933
<970=973,972,971
<973=1200,983,978,974
<974=975
<975=977,976
<978=979
<979=981,980
<981=982
<983=1196,1188,984
<984=985
<985=1184,1176,986
<986=987
<987=1169,1159,1145,988
<988=1141,1095,989
<989=990
<990=1088,1081,1076,1071,1064,1014,1005,998,991
<991=992
<992=996,993
<993=994
<994=995
<996=997
<998=999
<999=1003,1000
<1000=1001
<1001=1002
<1003=1004
<1005=1006
<1006=1012,1007
<1007=1010,1008
<1008=1009
<1010=1011
<1012=1013
<1014=1053,1015
<1015=1046,1029,1020,1016
<1016=1017
<1017=1019,1018
<1020=1021
<1021=1027,1022
<1022=1025,1023
<1023=1024
<1025=1026
<1027=1028
<1029=1030
<1030=1044,1031
<1031=1042,1040,1036,1032
<1032=1033
<1033=1035,1034
<1036=1037
<1037=1039,1038
<1040=1041
<1042=1043
<1044=1045
<1046=1050,1047
<1047=1049,1048
<1050=1052,1051
<1053=1054
<1054=1062,1055
<1055=1060,1058,1056
<1056=1057
<1058=1059
<1060=1061
<1062=1063
<1064=1065
<1065=1070,1069,1066
<1066=1068,1067
<1071=1072
<1072=1075,1074,1073
<1076=1077
<1077=1079,1078
<1079=1080
<1081=1082
<1082=1086,1083
<1083=1084
<1084=1085
<1086=1087
<1088=1089
<1089=1093,1090
<1090=1091
<1091=1092
<1093=1094
<1095=1096
<1096=1133,1129,1126,1097
<1097=1098
<1098=1116,1112,1109,1099
<1099=1100
<1100=1101
<1101=1107,1102
<1102=1105,1103
<1103=1104
<1105=1106
<1107=1108
<1109=1111,1110
<1112=1113
<1113=1115,1114
<1116=1117
<1117=1118
<1118=1125,1124,1119
<1119=1123,1120
<1120=1122,1121
<1126=1128,1127
<1129=1130
<1130=1132,1131
<1133=1134
<1134=1135
<1135=1140,1139,1136
<1136=1138,1137
<1141=1142
<1142=1144,1143
<1145=1146
<1146=1158,1157,1147
<1147=1156,1148
<1148=1154,1149
<1149=1152,1150
<1150=1151
<1152=1153
<1154=1155
<1159=1160
<1160=1168,1167,1161
<1161=1166,1162
<1162=1164,1163
<1164=1165
<1169=1170
<1170=1174,1171
<1171=1172
<1172=1173
<1174=1175
<1176=1177
<1177=1178
<1178=1182,1179
<1179=1180
<1180=1181
<1182=1183
<1184=1185
<1185=1187,1186
<1188=1189
<1189=1190
<1190=1194,1191
<1191=1192
<1192=1193
<1194=1195
<1196=1197
<1197=1199,1198
<1200=1202,1201
<1202=1203
<1226=1229,1228,1227
<1229=1230
<1230=1231
<1231=1233,1232
<1233=1234
<1234=1236,1235
<1241=1247,1246,1242
<1242=1243
<1243=1245,1244
<1247=1837,1832,1825,1284,1272,1267,1263,1256,1248
<1248=1254,1249
<1249=1250
<1250=1252,1251
<1252=1253
<1254=1255
<1256=1257
<1257=1262,1258
<1258=1260,1259
<1260=1261
<1263=1264
<1264=1266,1265
<1267=1268
<1268=1270,1269
<1270=1271
<1272=1273
<1273=1283,1274
<1274=1281,1275
<1275=1276
<1276=1277
<1277=1279,1278
<1279=1280
<1281=1282
<1284=1814,1285
<1285=1810,1797,1676,1643,1616,1589,1584,1580,1569,1557,1527,1494,1480,1473,1449,1442,1435,1409,1405,1400,1380,1369,1363,1357,1351,1345,1339,1333,1327,1321,1315,1307,1299,1290,1286
<1286=1287
<1287=1289,1288
<1290=1291
<1291=1295,1292
<1292=1293
<1293=1294
<1295=1296
<1296=1298,1297
<1299=1300
<1300=1304,1301
<1301=1303,1302
<1304=1306,1305
<1307=1308
<1308=1310,1309
<1310=1312,1311
<1312=1314,1313
<1315=1316
<1316=1318,1317
<1318=1320,1319
<1321=1322
<1322=1324,1323
<1324=1326,1325
<1327=1328
<1328=1330,1329
<1330=1332,1331
<1333=1334
<1334=1336,1335
<1336=1338,1337
<1339=1340
<1340=1342,1341
<1342=1344,1343
<1345=1346
<1346=1348,1347
<1348=1350,1349
<1351=1352
<1352=1354,1353
<1354=1356,1355
<1357=1358
<1358=1360,1359
<1360=1362,1361
<1363=1364
<1364=1366,1365
<1366=1368,1367
<1369=1370
<1370=1377,1371
<1371=1375,1372
<1372=1373
<1373=1374
<1375=1376
<1377=1379,1378
<1380=1381
<1381=1398,1382
<1382=1396,1394,1392,1383
<1383=1384
<1384=1386,1385
<1386=1387
<1387=1389,1388
<1389=1391,1390
<1392=1393
<1394=1395
<1396=1397
<1398=1399
<1400=1401
<1401=1404,1403,1402
<1405=1406
<1406=1408,1407
<1409=1431,1410
<1410=1427,1411
<1411=1412
<1412=1426,1413
<1413=1424,1414
<1414=1415
<1415=1416
<1416=1418,1417
<1418=1419
<1419=1421,1420
<1421=1423,1422
<1424=1425
<1427=1428
<1428=1430,1429
<1431=1432
<1432=1434,1433
<1435=1436
<1436=1441,1440,1437
<1437=1439,1438
<1442=1443
<1443=1448,1447,1444
<1444=1446,1445
<1449=1469,1450
<1450=1451
<1451=1452
<1452=1468,1453
<1453=1455,1454
<1455=1466,1456
<1456=1457
<1457=1458
<1458=1460,1459
<1460=1461
<1461=1463,1462
<1463=1465,1464
<1466=1467
<1469=1470
<1470=1472,1471
<1473=1474
<1474=1479,1478,1475
<1475=1477,1476
<1480=1481
<1481=1493,1492,1482
<1482=1491,1483
<1483=1490,1484
<1484=1486,1485
<1486=1487
<1487=1489,1488
<1494=1523,1495
<1495=1514,1505,1496
<1496=1497
<1497=1501,1498
<1498=1499
<1499=1500
<1501=1502
<1502=1504,1503
<1505=1506
<1506=1510,1507
<1507=1508
<1508=1509
<1510=1511
<1511=1513,1512
<1514=1515
<1515=1519,1516
<1516=1517
<1517=1518
<1519=1520
<1520=1522,1521
<1523=1524
<1524=1526,1525
<1527=1550,1528
<1528=1538,1529
<1529=1530
<1530=1534,1531
<1531=1532
<1532=1533
<1534=1535
<1535=1537,1536
<1538=1539
<1539=1549,1548,1540
<1540=1547,1541
<1541=1543,1542
<1543=1544
<1544=1546,1545
<1550=1551
<1551=1553,1552
<1553=1554
<1554=1556,1555
<1557=1558
<1558=1568,1567,1559
<1559=1566,1560
<1560=1564,1561
<1561=1562
<1562=1563
<1564=1565
<1569=1570
<1570=1578,1571
<1571=1576,1574,1572
<1572=1573
<1574=1575
<1576=1577
<1578=1579
<1580=1581
<1581=1583,1582
<1584=1585
<1585=1588,1587,1586
<1589=1603,1590
<1590=1591
<1591=1593,1592
<1593=1602,1594
<1594=1596,1595
<1596=1600,1597
<1597=1598
<1598=1599
<1600=1601
<1603=1604
<1604=1606,1605
<1606=1615,1607
<1607=1609,1608
<1609=1613,1610
<1610=1611
<1611=1612
<1613=1614
<1616=1630,1617
<1617=1618
<1618=1620,1619
<1620=1629,1621
<1621=1623,1622
<1623=1627,1624
<1624=1625
<1625=1626
<1627=1628
<1630=1631
<1631=1633,1632
<1633=1642,1634
<1634=1636,1635
<1636=1640,1637
<1637=1638
<1638=1639
<1640=1641
<1643=1672,1644
<1644=1663,1654,1645
<1645=1646
<1646=1650,1647
<1647=1648
<1648=1649
<1650=1651
<1651=1653,1652
<1654=1655
<1655=1659,1656
<1656=1657
<1657=1658
<1659=1660
<1660=1662,1661
<1663=1664
<1664=1668,1665
<1665=1666
<1666=1667
<1668=1669
<1669=1671,1670
<1672=1673
<1673=1675,1674
<1676=1786,1742,1677
<1677=1678
<1678=1737,1726,1714,1706,1698,1690,1679
<1679=1680
<1680=1687,1681
<1681=1685,1682
<1682=1683
<1683=1684
<1685=1686
<1687=1689,1688
<1690=1691
<1691=1693,1692
<1693=1697,1694
<1694=1696,1695
<1698=1699
<1699=1701,1700
<1701=1705,1702
<1702=1704,1703
<1706=1707
<1707=1709,1708
<1709=1713,1710
<1710=1712,1711
<1714=1715
<1715=1725,1724,1716
<1716=1723,1717
<1717=1721,1718
<1718=1719
<1719=1720
<1721=1722
<1726=1727
<1727=1735,1728
<1728=1733,1729
<1729=1730
<1730=1732,1731
<1733=1734
<1735=1736
<1737=1738
<1738=1741,1740,1739
<1742=1781,1772,1767,1754,1743
<1743=1744
<1744=1751,1745
<1745=1749,1746
<1746=1747
<1747=1748
<1749=1750
<1751=1753,1752
<1754=1755
<1755=1765,1756
<1756=1763,1761,1759,1757
<1757=1758
<1759=1760
<1761=1762
<1763=1764
<1765=1766
<1767=1768
<1768=1771,1770,1769
<1772=1773
<1773=1777,1774
<1774=1775
<1775=1776
<1777=1778
<1778=1780,1779
<1781=1782
<1782=1785,1784,1783
<1786=1787
<1787=1789,1788
<1789=1795,1790
<1790=1793,1791
<1791=1792
<1793=1794
<1795=1796
<1797=1798
<1798=1806,1799
<1799=1804,1802,1800
<1800=1801
<1802=1803
<1804=1805
<1806=1807
<1807=1809,1808
<1810=1811
<1811=1813,1812
<1814=1815
<1815=1823,1816
<1816=1821,1819,1817
<1817=1818
<1819=1820
<1821=1822
<1823=1824
<1825=1826
<1826=1831,1830,1827
<1827=1829,1828
<1832=1833
<1833=1836,1835,1834
<1837=1838
<1838=1840,1839
<1840=1841
<1841=1843,1842
<1907=1913,1912,1908
<1908=1909
<1909=1911,1910
<1913=2984,2970,2954,2947,2942,2931,2797,2786,2769,2392,2385,2376,2369,2000,1996,1983,1932,1925,1914
<1914=1915
<1915=1923,1916
<1916=1921,1919,1917
<1917=1918
<1919=1920
<1921=1922
<1923=1924
<1925=1926
<1926=1930,1927
<1927=1928
<1928=1929
<1930=1931
<1932=1975,1971,1968,1933
<1933=1964,1943,1934
<1934=1935
<1935=1939,1936
<1936=1937
<1937=1938
<1939=1940
<1940=1942,1941
<1943=1944
<1944=1962,1945
<1945=1960,1958,1952,1946
<1946=1947
<1947=1951,1948
<1948=1950,1949
<1952=1953
<1953=1957,1954
<1954=1956,1955
<1958=1959
<1960=1961
<1962=1963
<1964=1965
<1965=1967,1966
<1968=1970,1969
<1971=1972
<1972=1974,1973
<1975=1976
<1976=1977
<1977=1982,1981,1978
<1978=1980,1979
<1983=1984
<1984=1994,1985
<1985=1992,1990,1986
<1986=1987
<1987=1989,1988
<1990=1991
<1992=1993
<1994=1995
<1996=1997
<1997=1999,1998
<2000=2361,2357,2354,2001
<2001=2345,2318,2291,2287,2274,2268,2259,2109,2102,2095,2086,2079,2070,2061,2002
<2002=2013,2003
<2003=2004
<2004=2005
<2005=2007,2006
<2007=2008
<2008=2010,2009
<2010=2012,2011
<2013=2014
<2014=2054,2015
<2015=2047,2016
<2016=2040,2017
<2017=2033,2018
<2018=2026,2019
<2019=2021,2020
<2021=2023,2022
<2023=2025,2024
<2026=2028,2027
<2028=2030,2029
<2030=2032,2031
<2033=2035,2034
<2035=2037,2036
<2037=2039,2038
<2040=2042,2041
<2042=2044,2043
<2044=2046,2045
<2047=2049,2048
<2049=2051,2050
<2051=2053,2052
<2054=2056,2055
<2056=2058,2057
<2058=2060,2059
<2061=2062
<2062=2069,2068,2063
<2063=2067,2064
<2064=2066,2065
<2070=2071
<2071=2078,2077,2072
<2072=2076,2073
<2073=2075,2074
<2079=2080
<2080=2085,2084,2081
<2081=2083,2082
<2086=2087
<2087=2094,2093,2088
<2088=2092,2089
<2089=2091,2090
<2095=2096
<2096=2101,2100,2097
<2097=2099,2098
<2102=2103
<2103=2108,2107,2104
<2104=2106,2105
<2109=2251,2247,2244,2110
<2110=2237,2220,2141,2111
<2111=2137,2112
<2112=2130,2113
<2113=2114
<2114=2128,2115
<2115=2126,2124,2120,2116
<2116=2117
<2117=2119,2118
<2120=2121
<2121=2123,2122
<2124=2125
<2126=2127
<2128=2129
<2130=2134,2131
<2131=2133,2132
<2134=2136,2135
<2137=2138
<2138=2140,2139
<2141=2210,2209,2142
<2142=2143
<2143=2200,2195,2144
<2144=2176,2157,2145
<2145=2146
<2146=2156,2155,2154,2153,2152,2151,2150,2149,2148,2147
<2157=2158
<2158=2159
<2159=2170,2160
<2160=2161
<2161=2162
<2162=2168,2163
<2163=2166,2164
<2164=2165
<2166=2167
<2168=2169
<2170=2171
<2171=2173,2172
<2173=2175,2174
<2176=2177
<2177=2179,2178
<2179=2187,2180
<2180=2183,2181
<2181=2182
<2183=2184
<2184=2186,2185
<2187=2188
<2188=2190,2189
<2190=2192,2191
<2192=2194,2193
<2195=2196
<2196=2199,2198,2197
<2200=2201
<2201=2208,2207,2202
<2202=2206,2203
<2203=2205,2204
<2210=2211
<2211=2219,2212
<2212=2214,2213
<2214=2216,2215
<2216=2218,2217
<2220=2221
<2221=2235,2222
<2222=2233,2231,2227,2223
<2223=2224
<2224=2226,2225
<2227=2228
<2228=2230,2229
<2231=2232
<2233=2234
<2235=2236
<2237=2241,2238
<2238=2240,2239
<2241=2243,2242
<2244=2246,2245
<2247=2248
<2248=2250,2249
<2251=2252
<2252=2253
<2253=2258,2257,2254
<2254=2256,2255
<2259=2264,2260
<2260=2261
<2261=2263,2262
<2264=2265
<2265=2267,2266
<2268=2269
<2269=2271,2270
<2271=2273,2272
<2274=2275
<2275=2285,2276
<2276=2283,2281,2277
<2277=2278
<2278=2280,2279
<2281=2282
<2283=2284
<2285=2286
<2287=2288
<2288=2290,2289
<2291=2292
<2292=2316,2293
<2293=2314,2312,2306,2300,2294
<2294=2295
<2295=2297,2296
<2297=2299,2298
<2300=2301
<2301=2303,2302
<2303=2305,2304
<2306=2307
<2307=2309,2308
<2309=2311,2310
<2312=2313
<2314=2315
<2316=2317
<2318=2319
<2319=2343,2320
<2320=2341,2339,2333,2327,2321
<2321=2322
<2322=2324,2323
<2324=2326,2325
<2327=2328
<2328=2330,2329
<2330=2332,2331
<2333=2334
<2334=2336,2335
<2336=2338,2337
<2339=2340
<2341=2342
<2343=2344
<2345=2346
<2346=2353,2352,2347
<2347=2351,2348
<2348=2350,2349
<2354=2356,2355
<2357=2358
<2358=2360,2359
<2361=2362
<2362=2363
<2363=2368,2367,2364
<2364=2366,2365
<2369=2370
<2370=2375,2374,2371
<2371=2373,2372
<2376=2377
<2377=2381,2378
<2378=2379
<2379=2380
<2381=2382
<2382=2384,2383
<2385=2386
<2386=2388,2387
<2388=2389
<2389=2391,2390
<2392=2761,2757,2754,2393
<2393=2750,2745,2740,2730,2693,2651,2606,2585,2529,2394
<2394=2519,2508,2395
<2395=2396
<2396=2504,2498,2485,2472,2466,2456,2446,2429,2412,2405,2397
<2397=2398
<2398=2400,2399
<2400=2402,2401
<2402=2404,2403
<2405=2406
<2406=2408,2407
<2408=2409
<2409=2411,2410
<2412=2413
<2413=2427,2414
<2414=2423,2421,2415
<2415=2416
<2416=2418,2417
<2418=2420,2419
<2421=2422
<2423=2424
<2424=2426,2425
<2427=2428
<2429=2430
<2430=2444,2431
<2431=2440,2438,2432
<2432=2433
<2433=2435,2434
<2435=2437,2436
<2438=2439
<2440=2441
<2441=2443,2442
<2444=2445
<2446=2447
<2447=2451,2448
<2448=2450,2449
<2451=2453,2452
<2453=2455,2454
<2456=2457
<2457=2461,2458
<2458=2460,2459
<2461=2463,2462
<2463=2465,2464
<2466=2467
<2467=2469,2468
<2469=2471,2470
<2472=2473
<2473=2482,2474
<2474=2476,2475
<2476=2477
<2477=2479,2478
<2479=2481,2480
<2482=2484,2483
<2485=2486
<2486=2495,2487
<2487=2489,2488
<2489=2490
<2490=2492,2491
<2492=2494,2493
<2495=2497,2496
<2498=2499
<2499=2501,2500
<2501=2503,2502
<2504=2505
<2505=2507,2506
<2508=2509
<2509=2510
<2510=2512,2511
<2512=2514,2513
<2514=2516,2515
<2516=2518,2517
<2519=2520
<2520=2526,2521
<2521=2523,2522
<2523=2525,2524
<2526=2528,2527
<2529=2581,2530
<2530=2571,2561,2551,2541,2531
<2531=2532
<2532=2538,2533
<2533=2537,2534
<2534=2536,2535
<2538=2540,2539
<2541=2542
<2542=2548,2543
<2543=2547,2544
<2544=2546,2545
<2548=2550,2549
<2551=2552
<2552=2558,2553
<2553=2557,2554
<2554=2556,2555
<2558=2560,2559
<2561=2562
<2562=2568,2563
<2563=2567,2564
<2564=2566,2565
<2568=2570,2569
<2571=2572
<2572=2578,2573
<2573=2577,2574
<2574=2576,2575
<2578=2580,2579
<2581=2582
<2582=2584,2583
<2585=2586
<2586=2604,2587
<2587=2602,2600,2596,2592,2588
<2588=2589
<2589=2591,2590
<2592=2593
<2593=2595,2594
<2596=2597
<2597=2599,2598
<2600=2601
<2602=2603
<2604=2605
<2606=2607
<2607=2649,2608
<2608=2647,2645,2641,2637,2633,2629,2625,2621,2617,2613,2609
<2609=2610
<2610=2612,2611
<2613=2614
<2614=2616,2615
<2617=2618
<2618=2620,2619
<2621=2622
<2622=2624,2623
<2625=2626
<2626=2628,2627
<2629=2630
<2630=2632,2631
<2633=2634
<2634=2636,2635
<2637=2638
<2638=2640,2639
<2641=2642
<2642=2644,2643
<2645=2646
<2647=2648
<2649=2650
<2651=2689,2667,2652
<2652=2653
<2653=2654
<2654=2655
<2655=2665,2656
<2656=2663,2661,2657
<2657=2658
<2658=2660,2659
<2661=2662
<2663=2664
<2665=2666
<2667=2668
<2668=2669
<2669=2687,2670
<2670=2685,2683,2679,2675,2671
<2671=2672
<2672=2674,2673
<2675=2676
<2676=2678,2677
<2679=2680
<2680=2682,2681
<2683=2684
<2685=2686
<2687=2688
<2689=2690
<2690=2692,2691
<2693=2726,2694
<2694=2721,2714,2695
<2695=2696
<2696=2712,2697
<2697=2710,2708,2706,2702,2698
<2698=2699
<2699=2701,2700
<2702=2703
<2703=2705,2704
<2706=2707
<2708=2709
<2710=2711
<2712=2713
<2714=2718,2715
<2715=2717,2716
<2718=2720,2719
<2721=2722
<2722=2725,2724,2723
<2726=2727
<2727=2729,2728
<2730=2731
<2731=2739,2738,2737,2732
<2732=2736,2733
<2733=2735,2734
<2740=2741
<2741=2744,2743,2742
<2745=2746
<2746=2749,2748,2747
<2750=2751
<2751=2753,2752
<2754=2756,2755
<2757=2758
<2758=2760,2759
<2761=2762
<2762=2763
<2763=2768,2767,2764
<2764=2766,2765
<2769=2779,2770
<2770=2772,2771
<2772=2773
<2773=2777,2774
<2774=2775
<2775=2776
<2777=2778
<2779=2780
<2780=2785,2781
<2781=2783,2782
<2783=2784
<2786=2787
<2787=2795,2788
<2788=2793,2791,2789
<2789=2790
<2791=2792
<2793=2794
<2795=2796
<2797=2925,2877,2798
<2798=2799
<2799=2871,2823,2800
<2800=2801
<2801=2819,2802
<2802=2803
<2803=2817,2804
<2804=2815,2813,2809,2805
<2805=2806
<2806=2808,2807
<2809=2810
<2810=2812,2811
<2813=2814
<2815=2816
<2817=2818
<2819=2820
<2820=2822,2821
<2823=2867,2854,2850,2841,2824
<2824=2825
<2825=2839,2826
<2826=2837,2835,2831,2827
<2827=2828
<2828=2830,2829
<2831=2832
<2832=2834,2833
<2835=2836
<2837=2838
<2839=2840
<2841=2842
<2842=2848,2843
<2843=2846,2844
<2844=2845
<2846=2847
<2848=2849
<2850=2851
<2851=2853,2852
<2854=2855
<2855=2865,2856
<2856=2863,2861,2857
<2857=2858
<2858=2860,2859
<2861=2862
<2863=2864
<2865=2866
<2867=2868
<2868=2870,2869
<2871=2872
<2872=2874,2873
<2874=2876,2875
<2877=2921,2908,2904,2895,2878
<2878=2879
<2879=2893,2880
<2880=2891,2889,2885,2881
<2881=2882
<2882=2884,2883
<2885=2886
<2886=2888,2887
<2889=2890
<2891=2892
<2893=2894
<2895=2896
<2896=2902,2897
<2897=2900,2898
<2898=2899
<2900=2901
<2902=2903
<2904=2905
<2905=2907,2906
<2908=2909
<2909=2919,2910
<2910=2917,2915,2911
<2911=2912
<2912=2914,2913
<2915=2916
<2917=2918
<2919=2920
<2921=2922
<2922=2924,2923
<2925=2926
<2926=2928,2927
<2928=2930,2929
<2931=2932
<2932=2940,2933
<2933=2938,2936,2934
<2934=2935
<2936=2937
<2938=2939
<2940=2941
<2942=2943
<2943=2946,2945,2944
<2947=2951,2948
<2948=2950,2949
<2951=2953,2952
<2954=2966,2955
<2955=2957,2956
<2957=2958
<2958=2964,2959
<2959=2962,2960
<2960=2961
<2962=2963
<2964=2965
<2966=2967
<2967=2969,2968
<2970=2971
<2971=2983,2982,2972
<2972=2981,2973
<2973=2979,2974
<2974=2977,2975
<2975=2976
<2977=2978
<2979=2980
<2984=2985
<2985=2989,2986
<2986=2987
<2987=2988
<2989=2990
<3083=3089,3088,3084
<3084=3085
<3085=3087,3086
<3089=3639,3632,3602,3595,3588,3583,3576,3566,3559,3529,3517,3505,3498,3327,3315,3306,3299,3292,3285,3177,3140,3135,3120,3105,3100,3099,3098,3097,3095,3094,3093,3092,3090
<3090=3091
<3095=3096
<3100=3101
<3101=3103,3102
<3103=3104
<3105=3106
<3106=3118,3107
<3107=3116,3114,3108
<3108=3109
<3109=3113,3110
<3110=3112,3111
<3114=3115
<3116=3117
<3118=3119
<3120=3121
<3121=3133,3122
<3122=3131,3129,3127,3125,3123
<3123=3124
<3125=3126
<3127=3128
<3129=3130
<3131=3132
<3133=3134
<3135=3136
<3136=3139,3138,3137
<3140=3169,3165,3162,3141
<3141=3154,3146,3142
<3142=3143
<3143=3145,3144
<3146=3147
<3147=3151,3148
<3148=3150,3149
<3151=3153,3152
<3154=3155
<3155=3159,3156
<3156=3158,3157
<3159=3161,3160
<3162=3164,3163
<3165=3166
<3166=3168,3167
<3169=3170
<3170=3171
<3171=3176,3175,3172
<3172=3174,3173
<3177=3277,3273,3270,3178
<3178=3179
<3179=3262,3180
<3180=3253,3240,3227,3206,3185,3181
<3181=3182
<3182=3184,3183
<3185=3186
<3186=3203,3187
<3187=3201,3188
<3188=3197,3193,3189
<3189=3190
<3190=3192,3191
<3193=3194
<3194=3196,3195
<3197=3198
<3198=3200,3199
<3201=3202
<3203=3205,3204
<3206=3207
<3207=3224,3208
<3208=3222,3209
<3209=3218,3214,3210
<3210=3211
<3211=3213,3212
<3214=3215
<3215=3217,3216
<3218=3219
<3219=3221,3220
<3222=3223
<3224=3226,3225
<3227=3228
<3228=3232,3229
<3229=3230
<3230=3231
<3232=3233
<3233=3235,3234
<3235=3237,3236
<3237=3239,3238
<3240=3241
<3241=3245,3242
<3242=3243
<3243=3244
<3245=3246
<3246=3248,3247
<3248=3250,3249
<3250=3252,3251
<3253=3258,3254
<3254=3257,3256,3255
<3258=3261,3260,3259
<3262=3263
<3263=3265,3264
<3265=3267,3266
<3267=3269,3268
<3270=3272,3271
<3273=3274
<3274=3276,3275
<3277=3278
<3278=3279
<3279=3284,3283,3280
<3280=3282,3281
<3285=3286
<3286=3291,3290,3287
<3287=3289,3288
<3292=3293
<3293=3298,3297,3294
<3294=3296,3295
<3299=3300
<3300=3305,3304,3301
<3301=3303,3302
<3306=3307
<3307=3314,3313,3308
<3308=3312,3309
<3309=3311,3310
<3315=3316
<3316=3326,3325,3317
<3317=3324,3318
<3318=3320,3319
<3320=3321
<3321=3323,3322
<3327=3490,3486,3483,3328
<3328=3332,3330,3329
<3330=3331
<3332=3473,3467,3464,3333
<3333=3454,3443,3432,3334
<3334=3408,3335
<3335=3397,3386,3362,3338,3336
<3336=3337
<3338=3339
<3339=3358,3340
<3340=3341
<3341=3342
<3342=3356,3343
<3343=3352,3348,3344
<3344=3345
<3345=3347,3346
<3348=3349
<3349=3351,3350
<3352=3353
<3353=3355,3354
<3356=3357
<3358=3359
<3359=3361,3360
<3362=3363
<3363=3382,3364
<3364=3365
<3365=3366
<3366=3380,3367
<3367=3376,3372,3368
<3368=3369
<3369=3371,3370
<3372=3373
<3373=3375,3374
<3376=3377
<3377=3379,3378
<3380=3381
<3382=3383
<3383=3385,3384
<3386=3387
<3387=3396,3395,3388
<3388=3394,3389
<3389=3391,3390
<3391=3393,3392
<3397=3398
<3398=3407,3406,3399
<3399=3405,3400
<3400=3402,3401
<3402=3404,3403
<3408=3409
<3409=3425,3410
<3410=3418,3411
<3411=3415,3412
<3412=3414,3413
<3415=3417,3416
<3418=3422,3419
<3419=3421,3420
<3422=3424,3423
<3425=3429,3426
<3426=3428,3427
<3429=3431,3430
<3432=3433
<3433=3442,3441,3434
<3434=3440,3435
<3435=3437,3436
<3437=3439,3438
<3443=3444
<3444=3453,3452,3445
<3445=3451,3446
<3446=3448,3447
<3448=3450,3449
<3454=3456,3455
<3456=3457
<3457=3461,3458
<3458=3460,3459
<3461=3463,3462
<3464=3466,3465
<3467=3468
<3468=3472,3469
<3469=3471,3470
<3473=3474
<3474=3475
<3475=3482,3481,3476
<3476=3480,3477
<3477=3479,3478
<3483=3485,3484
<3486=3487
<3487=3489,3488
<3490=3491
<3491=3492
<3492=3497,3496,3493
<3493=3495,3494
<3498=3502,3499
<3499=3501,3500
<3502=3504,3503
<3505=3506
<3506=3516,3515,3507
<3507=3514,3508
<3508=3510,3509
<3510=3511
<3511=3513,3512
<3517=3518
<3518=3528,3527,3519
<3519=3526,3520
<3520=3522,3521
<3522=3523
<3523=3525,3524
<3529=3551,3547,3544,3530
<3530=3531
<3531=3536,3532
<3532=3533
<3533=3535,3534
<3536=3537
<3537=3539,3538
<3539=3541,3540
<3541=3543,3542
<3544=3546,3545
<3547=3548
<3548=3550,3549
<3551=3552
<3552=3553
<3553=3558,3557,3554
<3554=3556,3555
<3559=3560
<3560=3565,3564,3561
<3561=3563,3562
<3566=3572,3567
<3567=3568
<3568=3570,3569
<3570=3571
<3572=3573
<3573=3575,3574
<3576=3577
<3577=3581,3578
<3578=3579
<3579=3580
<3581=3582
<3583=3584
<3584=3586,3585
<3586=3587
<3588=3589
<3589=3594,3593,3590
<3590=3592,3591
<3595=3596
<3596=3601,3600,3597
<3597=3599,3598
<3602=3624,3620,3617,3603
<3603=3604
<3604=3609,3605
<3605=3606
<3606=3608,3607
<3609=3610
<3610=3612,3611
<3612=3614,3613
<3614=3616,3615
<3617=3619,3618
<3620=3621
<3621=3623,3622
<3624=3625
<3625=3626
<3626=3631,3630,3627
<3627=3629,3628
<3632=3633
<3633=3638,3637,3634
<3634=3636,3635
<3639=3640
<3640=3648,3647,3641
<3641=3646,3642
<3642=3644,3643
<3644=3645
<3710=3713,3712,3711
<3713=3748,3721,3714
<3714=3715
<3715=3717,3716
<3717=3718
<3718=3720,3719
<3721=3740,3736,3733,3722
<3722=3723
<3723=3724
<3724=3726,3725
<3726=3728,3727
<3728=3730,3729
<3730=3732,3731
<3733=3735,3734
<3736=3737
<3737=3739,3738
<3740=3741
<3741=3742
<3742=3747,3746,3743
<3743=3745,3744
<3748=3749
<3749=3757,3756,3750
<3750=3755,3751
<3751=3753,3752
<3753=3754
<3771=3804,3803,3772
<3772=3800,3797,3794,3791,3788,3785,3782,3779,3776,3773
<3773=3775,3774
<3776=3778,3777
<3779=3781,3780
<3782=3784,3783
<3785=3787,3786
<3788=3790,3789
<3791=3793,3792
<3794=3796,3795
<3797=3799,3798
<3800=3802,3801
<3804=4713,4706,4673,4668,4655,4641,4625,4616,4603,4286,4032,4028,3902,3888,3877,3839,3832,3822,3805
<3805=3806
<3806=3820,3807
<3807=3818,3808
<3808=3809
<3809=3813,3810
<3810=3812,3811
<3813=3817,3814
<3814=3816,3815
<3818=3819
<3820=3821
<3822=3823
<3823=3831,3830,3824
<3824=3829,3825
<3825=3827,3826
<3827=3828
<3832=3833
<3833=3837,3834
<3834=3835
<3835=3836
<3837=3838
<3839=3869,3865,3862,3840
<3840=3841
<3841=3842
<3842=3860,3843
<3843=3858,3856,3850,3844
<3844=3845
<3845=3847,3846
<3847=3849,3848
<3850=3851
<3851=3853,3852
<3853=3855,3854
<3856=3857
<3858=3859
<3860=3861
<3862=3864,3863
<3865=3866
<3866=3868,3867
<3869=3870
<3870=3871
<3871=3876,3875,3872
<3872=3874,3873
<3877=3878
<3878=3886,3879
<3879=3884,3882,3880
<3880=3881
<3882=3883
<3884=3885
<3886=3887
<3888=3889
<3889=3901,3900,3890
<3890=3899,3891
<3891=3898,3892
<3892=3894,3893
<3894=3895
<3895=3897,3896
<3902=4020,4016,4013,3903
<3903=4004,3974,3966,3954,3904
<3904=3946,3942,3939,3905
<3905=3906
<3906=3924,3907
<3907=3908
<3908=3909
<3909=3920,3910
<3910=3911
<3911=3912
<3912=3918,3913
<3913=3916,3914
<3914=3915
<3916=3917
<3918=3919
<3920=3921
<3921=3923,3922
<3924=3925
<3925=3929,3926
<3926=3928,3927
<3929=3931,3930
<3931=3937,3932
<3932=3935,3933
<3933=3934
<3935=3936
<3937=3938
<3939=3941,3940
<3942=3943
<3943=3945,3944
<3946=3947
<3947=3948
<3948=3953,3952,3949
<3949=3951,3950
<3954=3955
<3955=3965,3964,3956
<3956=3963,3957
<3957=3961,3958
<3958=3959
<3959=3960
<3961=3962
<3966=3968,3967
<3968=3969
<3969=3973,3970
<3970=3972,3971
<3974=3996,3992,3989,3975
<3975=3976
<3976=3983,3977
<3977=3979,3978
<3979=3980
<3980=3982,3981
<3983=3984
<3984=3986,3985
<3986=3988,3987
<3989=3991,3990
<3992=3993
<3993=3995,3994
<3996=3997
<3997=3998
<3998=4003,4002,3999
<3999=4001,4000
<4004=4005
<4005=4012,4011,4006
<4006=4010,4007
<4007=4009,4008
<4013=4015,4014
<4016=4017
<4017=4019,4018
<4020=4021
<4021=4022
<4022=4027,4026,4023
<4023=4025,4024
<4028=4029
<4029=4031,4030
<4032=4278,4274,4271,4033
<4033=4255,4034
<4034=4251,4035
<4035=4215,4164,4148,4137,4045,4036
<4036=4037
<4037=4043,4038
<4038=4041,4039
<4039=4040
<4041=4042
<4043=4044
<4045=4129,4125,4122,4046
<4046=4107,4094,4079,4064,4047
<4047=4048
<4048=4062,4049
<4049=4060,4058,4056,4054,4052,4050
<4050=4051
<4052=4053
<4054=4055
<4056=4057
<4058=4059
<4060=4061
<4062=4063
<4064=4065
<4065=4078,4077,4066
<4066=4076,4067
<4067=4069,4068
<4069=4071,4070
<4071=4073,4072
<4073=4075,4074
<4079=4080
<4080=4093,4092,4081
<4081=4091,4082
<4082=4084,4083
<4084=4086,4085
<4086=4088,4087
<4088=4090,4089
<4094=4095
<4095=4106,4105,4096
<4096=4104,4097
<4097=4099,4098
<4099=4101,4100
<4101=4103,4102
<4107=4108
<4108=4121,4120,4109
<4109=4119,4110
<4110=4118,4111
<4111=4113,4112
<4113=4115,4114
<4115=4117,4116
<4122=4124,4123
<4125=4126
<4126=4128,4127
<4129=4130
<4130=4131
<4131=4136,4135,4132
<4132=4134,4133
<4137=4138
<4138=4146,4139
<4139=4144,4142,4140
<4140=4141
<4142=4143
<4144=4145
<4146=4147
<4148=4149
<4149=4163,4162,4150
<4150=4161,4151
<4151=4160,4152
<4152=4154,4153
<4154=4155
<4155=4157,4156
<4157=4159,4158
<4164=4165
<4165=4213,4166
<4166=4211,4209,4195,4181,4167
<4167=4168
<4168=4179,4169
<4169=4170
<4170=4171
<4171=4177,4172
<4172=4173
<4173=4174
<4174=4176,4175
<4177=4178
<4179=4180
<4181=4182
<4182=4193,4183
<4183=4184
<4184=4185
<4185=4191,4186
<4186=4187
<4187=4188
<4188=4190,4189
<4191=4192
<4193=4194
<4195=4196
<4196=4207,4197
<4197=4198
<4198=4199
<4199=4205,4200
<4200=4201
<4201=4202
<4202=4204,4203
<4205=4206
<4207=4208
<4209=4210
<4211=4212
<4213=4214
<4215=4216
<4216=4249,4217
<4217=4247,4245,4236,4227,4218
<4218=4219
<4219=4225,4220
<4220=4221
<4221=4222
<4222=4224,4223
<4225=4226
<4227=4228
<4228=4234,4229
<4229=4230
<4230=4231
<4231=4233,4232
<4234=4235
<4236=4237
<4237=4243,4238
<4238=4239
<4239=4240
<4240=4242,4241
<4243=4244
<4245=4246
<4247=4248
<4249=4250
<4251=4252
<4252=4254,4253
<4255=4256
<4256=4270,4269,4257
<4257=4268,4258
<4258=4267,4259
<4259=4261,4260
<4261=4262
<4262=4264,4263
<4264=4266,4265
<4271=4273,4272
<4274=4275
<4275=4277,4276
<4278=4279
<4279=4280
<4280=4285,4284,4281
<4281=4283,4282
<4286=4595,4591,4588,4287
<4287=4555,4546,4516,4288
<4288=4510,4491,4289
<4289=4290
<4290=4460,4427,4394,4361,4356,4329,4312,4291
<4291=4292
<4292=4310,4293
<4293=4308,4306,4302,4298,4294
<4294=4295
<4295=4297,4296
<4298=4299
<4299=4301,4300
<4302=4303
<4303=4305,4304
<4306=4307
<4308=4309
<4310=4311
<4312=4313
<4313=4327,4314
<4314=4325,4323,4321,4317,4315
<4315=4316
<4317=4318
<4318=4320,4319
<4321=4322
<4323=4324
<4325=4326
<4327=4328
<4329=4330
<4330=4354,4331
<4331=4352,4350,4348,4346,4340,4334,4332
<4332=4333
<4334=4335
<4335=4337,4336
<4337=4339,4338
<4340=4341
<4341=4343,4342
<4343=4345,4344
<4346=4347
<4348=4349
<4350=4351
<4352=4353
<4354=4355
<4356=4357
<4357=4360,4359,4358
<4361=4362
<4362=4392,4363
<4363=4390,4388,4380,4372,4364
<4364=4365
<4365=4367,4366
<4367=4369,4368
<4369=4371,4370
<4372=4373
<4373=4375,4374
<4375=4377,4376
<4377=4379,4378
<4380=4381
<4381=4383,4382
<4383=4385,4384
<4385=4387,4386
<4388=4389
<4390=4391
<4392=4393
<4394=4395
<4395=4425,4396
<4396=4423,4421,4413,4405,4397
<4397=4398
<4398=4400,4399
<4400=4402,4401
<4402=4404,4403
<4405=4406
<4406=4408,4407
<4408=4410,4409
<4410=4412,4411
<4413=4414
<4414=4416,4415
<4416=4418,4417
<4418=4420,4419
<4421=4422
<4423=4424
<4425=4426
<4427=4428
<4428=4458,4429
<4429=4456,4454,4446,4438,4430
<4430=4431
<4431=4433,4432
<4433=4435,4434
<4435=4437,4436
<4438=4439
<4439=4441,4440
<4441=4443,4442
<4443=4445,4444
<4446=4447
<4447=4449,4448
<4449=4451,4450
<4451=4453,4452
<4454=4455
<4456=4457
<4458=4459
<4460=4461
<4461=4489,4462
<4462=4487,4485,4479,4471,4463
<4463=4464
<4464=4466,4465
<4466=4468,4467
<4468=4470,4469
<4471=4472
<4472=4474,4473
<4474=4476,4475
<4476=4478,4477
<4479=4480
<4480=4482,4481
<4482=4484,4483
<4485=4486
<4487=4488
<4489=4490
<4491=4501,4492
<4492=4493
<4493=4499,4494
<4494=4497,4495
<4495=4496
<4497=4498
<4499=4500
<4501=4502
<4502=4508,4503
<4503=4506,4504
<4504=4505
<4506=4507
<4508=4509
<4510=4511
<4511=4515,4512
<4512=4514,4513
<4516=4538,4534,4531,4517
<4517=4518
<4518=4525,4519
<4519=4521,4520
<4521=4522
<4522=4524,4523
<4525=4526
<4526=4528,4527
<4528=4530,4529
<4531=4533,4532
<4534=4535
<4535=4537,4536
<4538=4539
<4539=4540
<4540=4545,4544,4541
<4541=4543,4542
<4546=4547
<4547=4554,4553,4548
<4548=4552,4549
<4549=4551,4550
<4555=4556
<4556=4586,4557
<4557=4584,4582,4576,4567,4558
<4558=4559
<4559=4561,4560
<4561=4562
<4562=4564,4563
<4564=4566,4565
<4567=4568
<4568=4570,4569
<4570=4571
<4571=4573,4572
<4573=4575,4574
<4576=4577
<4577=4579,4578
<4579=4581,4580
<4582=4583
<4584=4585
<4586=4587
<4588=4590,4589
<4591=4592
<4592=4594,4593
<4595=4596
<4596=4597
<4597=4602,4601,4598
<4598=4600,4599
<4603=4604
<4604=4614,4605
<4605=4612,4610,4608,4606
<4606=4607
<4608=4609
<4610=4611
<4612=4613
<4614=4615
<4616=4617
<4617=4623,4618
<4618=4621,4619
<4619=4620
<4621=4622
<4623=4624
<4625=4637,4626
<4626=4628,4627
<4628=4629
<4629=4635,4630
<4630=4633,4631
<4631=4632
<4633=4634
<4635=4636
<4637=4638
<4638=4640,4639
<4641=4642
<4642=4654,4653,4643
<4643=4652,4644
<4644=4650,4645
<4645=4648,4646
<4646=4647
<4648=4649
<4650=4651
<4655=4656
<4656=4666,4657
<4657=4664,4662,4660,4658
<4658=4659
<4660=4661
<4662=4663
<4664=4665
<4666=4667
<4668=4669
<4669=4672,4671,4670
<4673=4698,4694,4691,4674
<4674=4675
<4675=4680,4676
<4676=4677
<4677=4679,4678
<4680=4681
<4681=4683,4682
<4683=4685,4684
<4685=4686
<4686=4688,4687
<4688=4690,4689
<4691=4693,4692
<4694=4695
<4695=4697,4696
<4698=4699
<4699=4700
<4700=4705,4704,4701
<4701=4703,4702
<4706=4707
<4707=4712,4711,4708
<4708=4710,4709
<4713=4714
<4714=4722,4721,4715
<4715=4720,4716
<4716=4718,4717
<4718=4719
<4808=4814,4813,4809
<4809=4810
<4810=4812,4811
<4814=4934,4919,4910,4903,4892,4883,4869,4831,4822,4815
<4815=4816
<4816=4820,4817
<4817=4818
<4818=4819
<4820=4821
<4822=4823
<4823=4829,4824
<4824=4827,4825
<4825=4826
<4827=4828
<4829=4830
<4831=4861,4857,4854,4832
<4832=4833
<4833=4846,4834
<4834=4835
<4835=4836
<4836=4840,4837
<4837=4838
<4838=4839
<4840=4841
<4841=4843,4842
<4843=4845,4844
<4846=4847
<4847=4849,4848
<4849=4851,4850
<4851=4853,4852
<4854=4856,4855
<4857=4858
<4858=4860,4859
<4861=4862
<4862=4863
<4863=4868,4867,4864
<4864=4866,4865
<4869=4870
<4870=4882,4881,4871
<4871=4880,4872
<4872=4879,4873
<4873=4875,4874
<4875=4876
<4876=4878,4877
<4883=4884
<4884=4890,4885
<4885=4888,4886
<4886=4887
<4888=4889
<4890=4891
<4892=4893
<4893=4901,4894
<4894=4899,4897,4895
<4895=4896
<4897=4898
<4899=4900
<4901=4902
<4903=4904
<4904=4909,4908,4905
<4905=4907,4906
<4910=4911
<4911=4917,4912
<4912=4915,4913
<4913=4914
<4915=4916
<4917=4918
<4919=4930,4920
<4920=4929,4928,4927,4926,4925,4924,4923,4922,4921
<4930=4931
<4931=4933,4932
<4934=4935
<4935=4947,4946,4936
<4936=4945,4937
<4937=4943,4938
<4938=4941,4939
<4939=4940
<4941=4942
<4943=4944
<4964=4970,4969,4965
<4965=4966
<4966=4968,4967
<4970=5101,5094,5079,5070,5061,5047,5040,5000,4991,4984,4971
<4971=4972
<4972=4982,4973
<4973=4980,4978,4976,4974
<4974=4975
<4976=4977
<4978=4979
<4980=4981
<4982=4983
<4984=4985
<4985=4989,4986
<4986=4987
<4987=4988
<4989=4990
<4991=4992
<4992=4998,4993
<4993=4996,4994
<4994=4995
<4996=4997
<4998=4999
<5000=5032,5028,5025,5001
<5001=5002
<5002=5019,5003
<5003=5008,5004
<5004=5005
<5005=5007,5006
<5008=5009
<5009=5013,5010
<5010=5011
<5011=5012
<5013=5014
<5014=5016,5015
<5016=5018,5017
<5019=5020
<5020=5022,5021
<5022=5024,5023
<5025=5027,5026
<5028=5029
<5029=5031,5030
<5032=5033
<5033=5034
<5034=5039,5038,5035
<5035=5037,5036
<5040=5041
<5041=5046,5045,5042
<5042=5044,5043
<5047=5048
<5048=5060,5059,5049
<5049=5058,5050
<5050=5057,5051
<5051=5053,5052
<5053=5054
<5054=5056,5055
<5061=5062
<5062=5068,5063
<5063=5066,5064
<5064=5065
<5066=5067
<5068=5069
<5070=5071
<5071=5077,5072
<5072=5075,5073
<5073=5074
<5075=5076
<5077=5078
<5079=5090,5080
<5080=5089,5088,5087,5086,5085,5084,5083,5082,5081
<5090=5091
<5091=5093,5092
<5094=5095
<5095=5100,5099,5096
<5096=5098,5097
<5101=5102
<5102=5114,5113,5103
<5103=5112,5104
<5104=5110,5105
<5105=5108,5106
<5106=5107
<5108=5109
<5110=5111
<5132=5138,5137,5133
<5133=5134
<5134=5136,5135
<5138=5278,5271,5256,5247,5238,5224,5217,5168,5159,5152,5139
<5139=5140
<5140=5150,5141
<5141=5148,5146,5144,5142
<5142=5143
<5144=5145
<5146=5147
<5148=5149
<5150=5151
<5152=5153
<5153=5157,5154
<5154=5155
<5155=5156
<5157=5158
<5159=5160
<5160=5166,5161
<5161=5164,5162
<5162=5163
<5164=5165
<5166=5167
<5168=5209,5205,5202,5169
<5169=5170
<5170=5187,5171
<5171=5176,5172
<5172=5173
<5173=5175,5174
<5176=5177
<5177=5181,5178
<5178=5179
<5179=5180
<5181=5182
<5182=5184,5183
<5184=5186,5185
<5187=5188
<5188=5190,5189
<5190=5201,5191
<5191=5193,5192
<5193=5194
<5194=5196,5195
<5196=5198,5197
<5198=5200,5199
<5202=5204,5203
<5205=5206
<5206=5208,5207
<5209=5210
<5210=5211
<5211=5216,5215,5212
<5212=5214,5213
<5217=5218
<5218=5223,5222,5219
<5219=5221,5220
<5224=5225
<5225=5237,5236,5226
<5226=5235,5227
<5227=5234,5228
<5228=5230,5229
<5230=5231
<5231=5233,5232
<5238=5239
<5239=5245,5240
<5240=5243,5241
<5241=5242
<5243=5244
<5245=5246
<5247=5248
<5248=5254,5249
<5249=5252,5250
<5250=5251
<5252=5253
<5254=5255
<5256=5267,5257
<5257=5266,5265,5264,5263,5262,5261,5260,5259,5258
<5267=5268
<5268=5270,5269
<5271=5272
<5272=5277,5276,5273
<5273=5275,5274
<5278=5279
<5279=5291,5290,5280
<5280=5289,5281
<5281=5287,5282
<5282=5285,5283
<5283=5284
<5285=5286
<5287=5288
<5309=5315,5314,5310
<5310=5311
<5311=5313,5312
<5315=5623,5616,5611,5600,5586,5575,5561,5544,5540,5527,5518,5513,5339,5330,5323,5316
<5316=5317
<5317=5321,5318
<5318=5319
<5319=5320
<5321=5322
<5323=5324
<5324=5328,5325
<5325=5326
<5326=5327
<5328=5329
<5330=5331
<5331=5337,5332
<5332=5335,5333
<5333=5334
<5335=5336
<5337=5338
<5339=5505,5501,5498,5340
<5340=5341
<5341=5490,5486,5483,5342
<5342=5469,5465,5452,5343
<5343=5448,5344
<5344=5439,5425,5349,5345
<5345=5346
<5346=5348,5347
<5349=5417,5413,5410,5350
<5350=5406,5399,5382,5372,5366,5360,5351
<5351=5352
<5352=5356,5353
<5353=5354
<5354=5355
<5356=5357
<5357=5359,5358
<5360=5361
<5361=5363,5362
<5363=5365,5364
<5366=5367
<5367=5369,5368
<5369=5371,5370
<5372=5374,5373
<5374=5375
<5375=5379,5376
<5376=5378,5377
<5379=5381,5380
<5382=5383
<5383=5397,5384
<5384=5395,5393,5389,5385
<5385=5386
<5386=5388,5387
<5389=5390
<5390=5392,5391
<5393=5394
<5395=5396
<5397=5398
<5399=5403,5400
<5400=5402,5401
<5403=5405,5404
<5406=5407
<5407=5409,5408
<5410=5412,5411
<5413=5414
<5414=5416,5415
<5417=5418
<5418=5419
<5419=5424,5423,5420
<5420=5422,5421
<5425=5426
<5426=5438,5437,5427
<5427=5436,5428
<5428=5432,5429
<5429=5430
<5430=5431
<5432=5433
<5433=5435,5434
<5439=5440
<5440=5446,5441
<5441=5444,5442
<5442=5443
<5444=5445
<5446=5447
<5448=5449
<5449=5451,5450
<5452=5453
<5453=5463,5454
<5454=5461,5459,5455
<5455=5456
<5456=5458,5457
<5459=5460
<5461=5462
<5463=5464
<5465=5466
<5466=5468,5467
<5469=5470
<5470=5482,5481,5471
<5471=5480,5472
<5472=5478,5473
<5473=5476,5474
<5474=5475
<5476=5477
<5478=5479
<5483=5485,5484
<5486=5487
<5487=5489,5488
<5490=5491
<5491=5492
<5492=5497,5496,5493
<5493=5495,5494
<5498=5500,5499
<5501=5502
<5502=5504,5503
<5505=5506
<5506=5507
<5507=5512,5511,5508
<5508=5510,5509
<5513=5514
<5514=5516,5515
<5516=5517
<5518=5519
<5519=5525,5520
<5520=5521
<5521=5522
<5522=5524,5523
<5525=5526
<5527=5528
<5528=5538,5529
<5529=5536,5534,5530
<5530=5531
<5531=5533,5532
<5534=5535
<5536=5537
<5538=5539
<5540=5541
<5541=5543,5542
<5544=5553,5545
<5545=5552,5551,5550,5549,5548,5547,5546
<5553=5554
<5554=5558,5555
<5555=5557,5556
<5558=5560,5559
<5561=5562
<5562=5574,5573,5563
<5563=5572,5564
<5564=5570,5565
<5565=5568,5566
<5566=5567
<5568=5569
<5570=5571
<5575=5576
<5576=5584,5577
<5577=5582,5580,5578
<5578=5579
<5580=5581
<5582=5583
<5584=5585
<5586=5587
<5587=5599,5598,5588
<5588=5597,5589
<5589=5595,5590
<5590=5593,5591
<5591=5592
<5593=5594
<5595=5596
<5600=5601
<5601=5609,5602
<5602=5607,5605,5603
<5603=5604
<5605=5606
<5607=5608
<5609=5610
<5611=5612
<5612=5615,5614,5613
<5616=5617
<5617=5622,5621,5618
<5618=5620,5619
<5623=5624
<5624=5632,5631,5625
<5625=5630,5626
<5626=5628,5627
<5628=5629
<5665=5671,5670,5666
<5666=5667
<5667=5669,5668
<5671=5963,5958,5947,5933,5922,5908,5891,5880,5686,5679,5672
<5672=5673
<5673=5677,5674
<5674=5675
<5675=5676
<5677=5678
<5679=5680
<5680=5684,5681
<5681=5682
<5682=5683
<5684=5685
<5686=5872,5868,5865,5687
<5687=5697,5688
<5688=5689
<5689=5695,5690
<5690=5693,5691
<5691=5692
<5693=5694
<5695=5696
<5697=5857,5853,5850,5698
<5698=5699
<5699=5846,5827,5700
<5700=5701
<5701=5702
<5702=5818,5714,5703
<5703=5704
<5704=5705
<5705=5706
<5706=5712,5707
<5707=5710,5708
<5708=5709
<5710=5711
<5712=5713
<5714=5804,5790,5778,5767,5724,5715
<5715=5716
<5716=5722,5717
<5717=5720,5718
<5718=5719
<5720=5721
<5722=5723
<5724=5759,5755,5752,5725
<5725=5743,5726
<5726=5727
<5727=5741,5728
<5728=5739,5737,5733,5729
<5729=5730
<5730=5732,5731
<5733=5734
<5734=5736,5735
<5737=5738
<5739=5740
<5741=5742
<5743=5744
<5744=5751,5750,5745
<5745=5749,5746
<5746=5748,5747
<5752=5754,5753
<5755=5756
<5756=5758,5757
<5759=5760
<5760=5761
<5761=5766,5765,5762
<5762=5764,5763
<5767=5768
<5768=5776,5769
<5769=5774,5772,5770
<5770=5771
<5772=5773
<5774=5775
<5776=5777
<5778=5779
<5779=5789,5788,5780
<5780=5787,5781
<5781=5783,5782
<5783=5784
<5784=5786,5785
<5790=5791
<5791=5803,5802,5792
<5792=5801,5793
<5793=5797,5794
<5794=5795
<5795=5796
<5797=5798
<5798=5800,5799
<5804=5805
<5805=5817,5816,5806
<5806=5815,5807
<5807=5813,5808
<5808=5811,5809
<5809=5810
<5811=5812
<5813=5814
<5818=5819
<5819=5825,5820
<5820=5823,5821
<5821=5822
<5823=5824
<5825=5826
<5827=5837,5828
<5828=5829
<5829=5835,5830
<5830=5833,5831
<5831=5832
<5833=5834
<5835=5836
<5837=5838
<5838=5844,5839
<5839=5842,5840
<5840=5841
<5842=5843
<5844=5845
<5846=5847
<5847=5849,5848
<5850=5852,5851
<5853=5854
<5854=5856,5855
<5857=5858
<5858=5859
<5859=5864,5863,5860
<5860=5862,5861
<5865=5867,5866
<5868=5869
<5869=5871,5870
<5872=5873
<5873=5874
<5874=5879,5878,5875
<5875=5877,5876
<5880=5881
<5881=5889,5882
<5882=5887,5885,5883
<5883=5884
<5885=5886
<5887=5888
<5889=5890
<5891=5900,5892
<5892=5899,5898,5897,5896,5895,5894,5893
<5900=5901
<5901=5905,5902
<5902=5904,5903
<5905=5907,5906
<5908=5909
<5909=5921,5920,5910
<5910=5919,5911
<5911=5917,5912
<5912=5915,5913
<5913=5914
<5915=5916
<5917=5918
<5922=5923
<5923=5931,5924
<5924=5929,5927,5925
<5925=5926
<5927=5928
<5929=5930
<5931=5932
<5933=5934
<5934=5946,5945,5935
<5935=5944,5936
<5936=5942,5937
<5937=5940,5938
<5938=5939
<5940=5941
<5942=5943
<5947=5948
<5948=5956,5949
<5949=5954,5952,5950
<5950=5951
<5952=5953
<5954=5955
<5956=5957
<5958=5959
<5959=5962,5961,5960
<5963=5964
<5964=5972,5971,5965
<5965=5970,5966
<5966=5968,5967
<5968=5969
<6002=6026,6025,6003
<6003=6022,6019,6016,6013,6010,6007,6004
<6004=6006,6005
<6007=6009,6008
<6010=6012,6011
<6013=6015,6014
<6016=6018,6017
<6019=6021,6020
<6022=6024,6023
<6026=6476,6420,6415,6402,6388,6372,6357,6227,6034,6027
<6027=6028
<6028=6032,6029
<6029=6030
<6030=6031
<6032=6033
<6034=6219,6215,6212,6035
<6035=6207,6202,6187,6168,6118,6105,6100,6081,6073,6065,6057,6036
<6036=6037
<6037=6055,6038
<6038=6053,6051,6047,6043,6039
<6039=6040
<6040=6042,6041
<6043=6044
<6044=6046,6045
<6047=6048
<6048=6050,6049
<6051=6052
<6053=6054
<6055=6056
<6057=6058
<6058=6062,6059
<6059=6061,6060
<6062=6064,6063
<6065=6066
<6066=6070,6067
<6067=6069,6068
<6070=6072,6071
<6073=6074
<6074=6078,6075
<6075=6077,6076
<6078=6080,6079
<6081=6082
<6082=6098,6083
<6083=6096,6094,6092,6090,6088,6086,6084
<6084=6085
<6086=6087
<6088=6089
<6090=6091
<6092=6093
<6094=6095
<6096=6097
<6098=6099
<6100=6101
<6101=6104,6103,6102
<6105=6106
<6106=6117,6116,6115,6107
<6107=6114,6108
<6108=6113,6112,6109
<6109=6111,6110
<6118=6162,6141,6119
<6119=6120
<6120=6121
<6121=6139,6122
<6122=6137,6135,6131,6127,6123
<6123=6124
<6124=6126,6125
<6127=6128
<6128=6130,6129
<6131=6132
<6132=6134,6133
<6135=6136
<6137=6138
<6139=6140
<6141=6142
<6142=6160,6143
<6143=6158,6156,6152,6148,6144
<6144=6145
<6145=6147,6146
<6148=6149
<6149=6151,6150
<6152=6153
<6153=6155,6154
<6156=6157
<6158=6159
<6160=6161
<6162=6163
<6163=6165,6164
<6165=6167,6166
<6168=6169
<6169=6185,6170
<6170=6183,6177,6171
<6171=6172
<6172=6176,6173
<6173=6175,6174
<6177=6178
<6178=6180,6179
<6180=6182,6181
<6183=6184
<6185=6186
<6187=6188
<6188=6200,6189
<6189=6198,6192,6190
<6190=6191
<6192=6193
<6193=6195,6194
<6195=6197,6196
<6198=6199
<6200=6201
<6202=6203
<6203=6206,6205,6204
<6207=6208
<6208=6211,6210,6209
<6212=6214,6213
<6215=6216
<6216=6218,6217
<6219=6220
<6220=6221
<6221=6226,6225,6222
<6222=6224,6223
<6227=6349,6345,6342,6228
<6228=6307,6229
<6229=6230
<6230=6305,6231
<6231=6303,6301,6292,6283,6274,6260,6246,6232
<6232=6233
<6233=6244,6234
<6234=6235
<6235=6236
<6236=6242,6237
<6237=6238
<6238=6239
<6239=6241,6240
<6242=6243
<6244=6245
<6246=6247
<6247=6258,6248
<6248=6249
<6249=6250
<6250=6256,6251
<6251=6252
<6252=6253
<6253=6255,6254
<6256=6257
<6258=6259
<6260=6261
<6261=6272,6262
<6262=6263
<6263=6264
<6264=6270,6265
<6265=6266
<6266=6267
<6267=6269,6268
<6270=6271
<6272=6273
<6274=6275
<6275=6281,6276
<6276=6277
<6277=6278
<6278=6280,6279
<6281=6282
<6283=6284
<6284=6290,6285
<6285=6286
<6286=6287
<6287=6289,6288
<6290=6291
<6292=6293
<6293=6299,6294
<6294=6295
<6295=6296
<6296=6298,6297
<6299=6300
<6301=6302
<6303=6304
<6305=6306
<6307=6309,6308
<6309=6310
<6310=6332,6311
<6311=6322,6312
<6312=6314,6313
<6314=6320,6315
<6315=6316
<6316=6317
<6317=6319,6318
<6320=6321
<6322=6324,6323
<6324=6330,6325
<6325=6326
<6326=6327
<6327=6329,6328
<6330=6331
<6332=6334,6333
<6334=6340,6335
<6335=6336
<6336=6337
<6337=6339,6338
<6340=6341
<6342=6344,6343
<6345=6346
<6346=6348,6347
<6349=6350
<6350=6351
<6351=6356,6355,6352
<6352=6354,6353
<6357=6358
<6358=6370,6359
<6359=6368,6366,6360
<6360=6361
<6361=6365,6362
<6362=6364,6363
<6366=6367
<6368=6369
<6370=6371
<6372=6384,6373
<6373=6375,6374
<6375=6376
<6376=6382,6377
<6377=6380,6378
<6378=6379
<6380=6381
<6382=6383
<6384=6385
<6385=6387,6386
<6388=6389
<6389=6401,6400,6390
<6390=6399,6391
<6391=6397,6392
<6392=6395,6393
<6393=6394
<6395=6396
<6397=6398
<6402=6403
<6403=6413,6404
<6404=6411,6409,6407,6405
<6405=6406
<6407=6408
<6409=6410
<6411=6412
<6413=6414
<6415=6416
<6416=6419,6418,6417
<6420=6468,6464,6461,6421
<6421=6426,6422
<6422=6423
<6423=6425,6424
<6426=6428,6427
<6428=6429
<6429=6451,6430
<6430=6441,6431
<6431=6433,6432
<6433=6439,6434
<6434=6435
<6435=6436
<6436=6438,6437
<6439=6440
<6441=6443,6442
<6443=6449,6444
<6444=6445
<6445=6446
<6446=6448,6447
<6449=6450
<6451=6453,6452
<6453=6459,6454
<6454=6455
<6455=6456
<6456=6458,6457
<6459=6460
<6461=6463,6462
<6464=6465
<6465=6467,6466
<6468=6469
<6469=6470
<6470=6475,6474,6471
<6471=6473,6472
<6476=6477
<6477=6482,6481,6478
<6478=6480,6479
<6516=6519,6518,6517
<6519=6546,6520
<6520=6538,6534,6531,6521
<6521=6522
<6522=6523
<6523=6525,6524
<6525=6526
<6526=6528,6527
<6528=6530,6529
<6531=6533,6532
<6534=6535
<6535=6537,6536
<6538=6539
<6539=6540
<6540=6545,6544,6541
<6541=6543,6542
<6546=6547
<6547=6555,6554,6548
<6548=6553,6549
<6549=6551,6550
<6551=6552
<6565=6568,6567,6566
<6568=6569
<6569=6848,6570
<6570=6841,6827,6822,6578,6571
<6571=6572
<6572=6576,6573
<6573=6574
<6574=6575
<6576=6577
<6578=6809,6579
<6579=6792,6788,6769,6732,6731,6730,6729,6728,6727,6726,6725,6724,6723,6722,6721,6720,6719,6718,6717,6716,6715,6714,6713,6712,6668,6624,6580
<6580=6618,6581
<6581=6606,6594,6582
<6582=6583
<6583=6585,6584
<6585=6587,6586
<6587=6589,6588
<6589=6591,6590
<6591=6593,6592
<6594=6595
<6595=6597,6596
<6597=6599,6598
<6599=6601,6600
<6601=6603,6602
<6603=6605,6604
<6606=6607
<6607=6609,6608
<6609=6611,6610
<6611=6613,6612
<6613=6615,6614
<6615=6617,6616
<6618=6619
<6619=6623,6620
<6620=6622,6621
<6624=6662,6625
<6625=6650,6638,6626
<6626=6627
<6627=6629,6628
<6629=6631,6630
<6631=6633,6632
<6633=6635,6634
<6635=6637,6636
<6638=6639
<6639=6641,6640
<6641=6643,6642
<6643=6645,6644
<6645=6647,6646
<6647=6649,6648
<6650=6651
<6651=6653,6652
<6653=6655,6654
<6655=6657,6656
<6657=6659,6658
<6659=6661,6660
<6662=6663
<6663=6667,6664
<6664=6666,6665
<6668=6706,6669
<6669=6694,6682,6670
<6670=6671
<6671=6673,6672
<6673=6675,6674
<6675=6677,6676
<6677=6679,6678
<6679=6681,6680
<6682=6683
<6683=6685,6684
<6685=6687,6686
<6687=6689,6688
<6689=6691,6690
<6691=6693,6692
<6694=6695
<6695=6697,6696
<6697=6699,6698
<6699=6701,6700
<6701=6703,6702
<6703=6705,6704
<6706=6707
<6707=6711,6708
<6708=6710,6709
<6732=6733
<6733=6767,6734
<6734=6765,6763,6759,6755,6751,6747,6743,6739,6735
<6735=6736
<6736=6738,6737
<6739=6740
<6740=6742,6741
<6743=6744
<6744=6746,6745
<6747=6748
<6748=6750,6749
<6751=6752
<6752=6754,6753
<6755=6756
<6756=6758,6757
<6759=6760
<6760=6762,6761
<6763=6764
<6765=6766
<6767=6768
<6769=6785,6782,6779,6776,6773,6770
<6770=6772,6771
<6773=6775,6774
<6776=6778,6777
<6779=6781,6780
<6782=6784,6783
<6785=6787,6786
<6788=6789
<6789=6791,6790
<6792=6794,6793
<6794=6795
<6795=6801,6796
<6796=6798,6797
<6798=6800,6799
<6801=6807,6802
<6802=6803
<6803=6804
<6804=6806,6805
<6807=6808
<6809=6810
<6810=6812,6811
<6812=6820,6813
<6813=6818,6816,6814
<6814=6815
<6816=6817
<6818=6819
<6820=6821
<6822=6823
<6823=6826,6825,6824
<6827=6828
<6828=6840,6839,6829
<6829=6838,6830
<6830=6836,6831
<6831=6834,6832
<6832=6833
<6834=6835
<6836=6837
<6841=6842
<6842=6846,6843
<6843=6844
<6844=6845
<6846=6847
<6848=6849
<6849=6853,6850
<6850=6851
<6851=6852
<6853=6854
<6894=6897,6896,6895
<6897=7212,7197,7183,7179,7147,7142,6898
<6898=7129,6899
<6899=7119,7109,7076,7067,7060,6967,6950,6900,6901,6902,6903,6904,6905,6906,6907,6908,6909,6910,6911,6912,6913,6914,6915,6916,6917,6918,6919,6920,6921,6922,6923,6924,6925,6926,6927,6928,6929,6930,6931,6932,6933,6934,6935,6936,6937,6938,6939,6940,6941,6942,6943,6944,6945,6946,6947,6948,6949
<6950=6951
<6951=6964,6952
<6952=6962,6953
<6953=6960,6958,6954
<6954=6955
<6955=6957,6956
<6958=6959
<6960=6961
<6962=6963
<6964=6966,6965
<6967=7052,7048,7045,6968
<6968=7030,7015,7000,6983,6969
<6969=6979,6970
<6970=6975,6971
<6971=6972
<6972=6974,6973
<6975=6976
<6976=6978,6977
<6979=6980
<6980=6982,6981
<6983=6984
<6984=6999,6998,6985
<6985=6997,6986
<6986=6994,6987
<6987=6991,6988
<6988=6990,6989
<6991=6993,6992
<6994=6996,6995
<7000=7001
<7001=7014,7013,7002
<7002=7012,7003
<7003=7005,7004
<7005=7007,7006
<7007=7009,7008
<7009=7011,7010
<7015=7016
<7016=7029,7028,7017
<7017=7027,7018
<7018=7020,7019
<7020=7022,7021
<7022=7024,7023
<7024=7026,7025
<7030=7031
<7031=7044,7043,7032
<7032=7042,7033
<7033=7035,7034
<7035=7037,7036
<7037=7039,7038
<7039=7041,7040
<7045=7047,7046
<7048=7049
<7049=7051,7050
<7052=7053
<7053=7054
<7054=7059,7058,7055
<7055=7057,7056
<7060=7061
<7061=7066,7065,7062
<7062=7064,7063
<7067=7068
<7068=7075,7074,7069
<7069=7073,7070
<7070=7072,7071
<7076=7077
<7077=7107,7078
<7078=7105,7103,7099,7095,7091,7087,7083,7079
<7079=7080
<7080=7082,7081
<7083=7084
<7084=7086,7085
<7087=7088
<7088=7090,7089
<7091=7092
<7092=7094,7093
<7095=7096
<7096=7098,7097
<7099=7100
<7100=7102,7101
<7103=7104
<7105=7106
<7107=7108
<7109=7116,7113,7110
<7110=7112,7111
<7113=7115,7114
<7116=7118,7117
<7119=7126,7123,7120
<7120=7122,7121
<7123=7125,7124
<7126=7128,7127
<7129=7130
<7130=7132,7131
<7132=7140,7133
<7133=7138,7136,7134
<7134=7135
<7136=7137
<7138=7139
<7140=7141
<7142=7143
<7143=7146,7145,7144
<7147=7171,7167,7164,7148
<7148=7149
<7149=7150
<7150=7161,7151
<7151=7159,7152
<7152=7157,7155,7153
<7153=7154
<7155=7156
<7157=7158
<7159=7160
<7161=7163,7162
<7164=7166,7165
<7167=7168
<7168=7170,7169
<7171=7172
<7172=7173
<7173=7178,7177,7174
<7174=7176,7175
<7179=7180
<7180=7182,7181
<7183=7184
<7184=7196,7195,7185
<7185=7194,7186
<7186=7193,7187
<7187=7189,7188
<7189=7190
<7190=7192,7191
<7197=7208,7198
<7198=7207,7206,7205,7204,7203,7202,7201,7200,7199
<7208=7209
<7209=7211,7210
<7212=7213
<7213=7225,7224,7214
<7214=7223,7215
<7215=7221,7216
<7216=7219,7217
<7217=7218
<7219=7220
<7221=7222
<7275=7278,7277,7276
<7278=7672,7663,7649,7640,7633,7620,7616,7484,7474,7286,7279
<7279=7280
<7280=7284,7281
<7281=7282
<7282=7283
<7284=7285
<7286=7466,7462,7459,7287
<7287=7448,7437,7430,7421,7353,7342,7319,7296,7288
<7288=7289
<7289=7291,7290
<7291=7293,7292
<7293=7295,7294
<7296=7297
<7297=7317,7298
<7298=7311,7305,7299
<7299=7300
<7300=7304,7301
<7301=7303,7302
<7305=7306
<7306=7308,7307
<7308=7310,7309
<7311=7312
<7312=7314,7313
<7314=7316,7315
<7317=7318
<7319=7320
<7320=7340,7321
<7321=7334,7328,7322
<7322=7323
<7323=7327,7324
<7324=7326,7325
<7328=7329
<7329=7331,7330
<7331=7333,7332
<7334=7335
<7335=7337,7336
<7337=7339,7338
<7340=7341
<7342=7343
<7343=7351,7344
<7344=7349,7347,7345
<7345=7346
<7347=7348
<7349=7350
<7351=7352
<7353=7413,7409,7406,7354
<7354=7383,7369,7355
<7355=7365,7356
<7356=7361,7357
<7357=7358
<7358=7360,7359
<7361=7362
<7362=7364,7363
<7365=7366
<7366=7368,7367
<7369=7370
<7370=7382,7381,7371
<7371=7380,7372
<7372=7378,7373
<7373=7374
<7374=7375
<7375=7377,7376
<7378=7379
<7383=7384
<7384=7405,7404,7385
<7385=7403,7386
<7386=7402,7387
<7387=7395,7388
<7388=7390,7389
<7390=7392,7391
<7392=7394,7393
<7395=7397,7396
<7397=7399,7398
<7399=7401,7400
<7406=7408,7407
<7409=7410
<7410=7412,7411
<7413=7414
<7414=7415
<7415=7420,7419,7416
<7416=7418,7417
<7421=7422
<7422=7429,7428,7423
<7423=7427,7424
<7424=7426,7425
<7430=7431
<7431=7436,7435,7432
<7432=7434,7433
<7437=7438
<7438=7447,7446,7439
<7439=7445,7440
<7440=7442,7441
<7442=7444,7443
<7448=7449
<7449=7457,7450
<7450=7451
<7451=7452
<7452=7454,7453
<7454=7456,7455
<7457=7458
<7459=7461,7460
<7462=7463
<7463=7465,7464
<7466=7467
<7467=7468
<7468=7473,7472,7469
<7469=7471,7470
<7474=7475
<7475=7483,7482,7476
<7476=7481,7477
<7477=7479,7478
<7479=7480
<7484=7608,7604,7601,7485
<7485=7597,7534,7495,7486
<7486=7487
<7487=7491,7488
<7488=7489
<7489=7490
<7491=7492
<7492=7494,7493
<7495=7496
<7496=7532,7497
<7497=7530,7528,7522,7516,7510,7504,7498
<7498=7499
<7499=7501,7500
<7501=7503,7502
<7504=7505
<7505=7507,7506
<7507=7509,7508
<7510=7511
<7511=7513,7512
<7513=7515,7514
<7516=7517
<7517=7519,7518
<7519=7521,7520
<7522=7523
<7523=7525,7524
<7525=7527,7526
<7528=7529
<7530=7531
<7532=7533
<7534=7535
<7535=7595,7536
<7536=7593,7591,7585,7579,7573,7567,7561,7555,7549,7543,7537
<7537=7538
<7538=7540,7539
<7540=7542,7541
<7543=7544
<7544=7546,7545
<7546=7548,7547
<7549=7550
<7550=7552,7551
<7552=7554,7553
<7555=7556
<7556=7558,7557
<7558=7560,7559
<7561=7562
<7562=7564,7563
<7564=7566,7565
<7567=7568
<7568=7570,7569
<7570=7572,7571
<7573=7574
<7574=7576,7575
<7576=7578,7577
<7579=7580
<7580=7582,7581
<7582=7584,7583
<7585=7586
<7586=7588,7587
<7588=7590,7589
<7591=7592
<7593=7594
<7595=7596
<7597=7598
<7598=7600,7599
<7601=7603,7602
<7604=7605
<7605=7607,7606
<7608=7609
<7609=7610
<7610=7615,7614,7611
<7611=7613,7612
<7616=7617
<7617=7619,7618
<7620=7621
<7621=7631,7622
<7622=7629,7627,7623
<7623=7624
<7624=7626,7625
<7627=7628
<7629=7630
<7631=7632
<7633=7634
<7634=7639,7638,7635
<7635=7637,7636
<7640=7641
<7641=7647,7642
<7642=7643
<7643=7644
<7644=7646,7645
<7647=7648
<7649=7650
<7650=7662,7661,7651
<7651=7660,7652
<7652=7658,7653
<7653=7656,7654
<7654=7655
<7656=7657
<7658=7659
<7663=7664
<7664=7670,7665
<7665=7666
<7666=7667
<7667=7669,7668
<7670=7671
<7672=7673
<7673=7677,7674
<7674=7675
<7675=7676
<7677=7678
<7720=7723,7722,7721
<7723=7843,7829,7814,7809,7799,7738,7731,7724
<7724=7725
<7725=7729,7726
<7726=7727
<7727=7728
<7729=7730
<7731=7732
<7732=7736,7733
<7733=7734
<7734=7735
<7736=7737
<7738=7788,7739
<7739=7776,7757,7748,7740
<7740=7741
<7741=7743,7742
<7743=7745,7744
<7745=7747,7746
<7748=7749
<7749=7755,7750
<7750=7753,7751
<7751=7752
<7753=7754
<7755=7756
<7757=7768,7758
<7758=7767,7766,7765,7764,7763,7762,7761,7760,7759
<7768=7769
<7769=7773,7770
<7770=7772,7771
<7773=7775,7774
<7776=7777
<7777=7787,7786,7778
<7778=7785,7779
<7779=7783,7780
<7780=7781
<7781=7782
<7783=7784
<7788=7789
<7789=7797,7790
<7790=7795,7793,7791
<7791=7792
<7793=7794
<7795=7796
<7797=7798
<7799=7800
<7800=7808,7807,7801
<7801=7806,7802
<7802=7804,7803
<7804=7805
<7809=7810
<7810=7813,7812,7811
<7814=7825,7815
<7815=7824,7823,7822,7821,7820,7819,7818,7817,7816
<7825=7826
<7826=7828,7827
<7829=7830
<7830=7842,7841,7831
<7831=7840,7832
<7832=7838,7833
<7833=7836,7834
<7834=7835
<7836=7837
<7838=7839
<7843=7845,7844
<7845=7846
<7846=7848,7847
<7868=7874,7873,7869
<7869=7870
<7870=7872,7871
<7874=7995,7985,7882,7875
<7875=7876
<7876=7880,7877
<7877=7878
<7878=7879
<7880=7881
<7882=7974,7883
<7883=7970,7957,7951,7940,7926,7884
<7884=7908,7885
<7885=7901,7895,7886
<7886=7887
<7887=7891,7888
<7888=7889
<7889=7890
<7891=7892
<7892=7894,7893
<7895=7896
<7896=7898,7897
<7898=7900,7899
<7901=7902
<7902=7904,7903
<7904=7905
<7905=7907,7906
<7908=7909
<7909=7920,7910
<7910=7916,7911
<7911=7914,7912
<7912=7913
<7914=7915
<7916=7917
<7917=7919,7918
<7920=7922,7921
<7922=7923
<7923=7925,7924
<7926=7927
<7927=7939,7938,7928
<7928=7937,7929
<7929=7936,7930
<7930=7932,7931
<7932=7933
<7933=7935,7934
<7940=7941
<7941=7949,7942
<7942=7947,7943
<7943=7944
<7944=7946,7945
<7947=7948
<7949=7950
<7951=7952
<7952=7954,7953
<7954=7956,7955
<7957=7958
<7958=7966,7959
<7959=7964,7962,7960
<7960=7961
<7962=7963
<7964=7965
<7966=7967
<7967=7969,7968
<7970=7971
<7971=7973,7972
<7974=7975
<7975=7983,7976
<7976=7981,7979,7977
<7977=7978
<7979=7980
<7981=7982
<7983=7984
<7985=7986
<7986=7994,7993,7987
<7987=7992,7988
<7988=7990,7989
<7990=7991
<7995=7996
<7996=7999,7998,7997
<8021=8027,8026,8022
<8022=8023
<8023=8025,8024
<8032=8038,8037,8033
<8033=8034
<8034=8036,8035
