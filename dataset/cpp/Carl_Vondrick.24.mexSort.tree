>3	FunctionDef	callFunction (mxArray * plhs [ ] , const mxArray * prhs [ ] , const long nrhs)
>4	ParameterList	mxArray * plhs [ ] , const mxArray * prhs [ ] , const long nrhs
>5	Parameter	 
>6	Identifier	nrhs
>7	ParameterType	const long
>8	Parameter	 
>9	Identifier	prhs
>10	ParameterType	const mxArray * [ ]
>11	Parameter	 
>12	Identifier	plhs
>13	ParameterType	mxArray * [ ]
>14	ReturnType	inline void
>15	CompoundStatement	 
>16	ExpressionStatement	 
>17	CallExpression	X . sort ( Y , mode )
>18	ArgumentList	Y
>19	Argument	mode
>20	Identifier	mode
>21	Argument	Y
>22	Identifier	Y
>23	Callee	X . sort
>24	MemberAccess	X . sort
>25	Identifier	sort
>26	Identifier	X
>27	IdentifierDeclStatement	 
>28	IdentifierDecl	Y ( prY , n )
>29	Expression	prY , n
>30	Identifier	n
>31	Identifier	prY
>32	Identifier	Y
>33	IdentifierDeclType	Vector < T >
>34	IdentifierDeclStatement	 
>35	IdentifierDecl	X ( prX , n )
>36	Expression	prX , n
>37	Identifier	n
>38	Identifier	prX
>39	Identifier	X
>40	IdentifierDeclType	Vector < T >
>41	ExpressionStatement	 
>42	CallExpression	mxGetPr ( plhs [ 0 ] )
>43	ArgumentList	plhs [ 0 ]
>44	Argument	plhs [ 0 ]
>45	ArrayIndexing	plhs [ 0 ]
>46	PrimaryExpression	0
>47	Identifier	plhs
>48	Callee	mxGetPr
>49	Identifier	mxGetPr
>50	Statement	 
>51	Statement	 
>52	Statement	 
>53	Statement	 
>54	Statement	 
>55	Statement	 
>56	Statement	 
>57	Statement	 
>58	Statement	 
>59	ExpressionStatement	 
>60	AssignmentExpr	plhs [ 0 ] = createMatrix < T > ( 1 , n )
>61	RelationalExpression	createMatrix < T > ( 1 , n )
>62	RelationalExpression	T > ( 1 , n )
>63	Expression	1 , n
>64	Identifier	n
>65	PrimaryExpression	1
>66	Identifier	T
>67	Identifier	createMatrix
>68	ArrayIndexing	plhs [ 0 ]
>69	PrimaryExpression	0
>70	Identifier	plhs
>71	IdentifierDeclStatement	 
>72	IdentifierDecl	n = nx * ny
>73	AssignmentExpr	n = nx * ny
>74	MultiplicativeExpression	nx * ny
>75	Identifier	ny
>76	Identifier	nx
>77	Identifier	n
>78	Identifier	n
>79	IdentifierDeclType	long
>80	ExpressionStatement	 
>81	ArrayIndexing	dimsX [ 1 ]
>82	PrimaryExpression	1
>83	Identifier	dimsX
>84	Statement	 
>85	Statement	 
>86	Statement	 
>87	Statement	 
>88	Statement	 
>89	Statement	 
>90	Statement	 
>91	ExpressionStatement	 
>92	ArrayIndexing	dimsX [ 0 ]
>93	PrimaryExpression	0
>94	Identifier	dimsX
>95	Statement	 
>96	Statement	 
>97	Statement	 
>98	Statement	 
>99	Statement	 
>100	Statement	 
>101	Statement	 
>102	IdentifierDeclStatement	 
>103	IdentifierDecl	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>104	AssignmentExpr	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>105	CallExpression	mxGetDimensions ( prhs [ 0 ] )
>106	ArgumentList	prhs [ 0 ]
>107	Argument	prhs [ 0 ]
>108	ArrayIndexing	prhs [ 0 ]
>109	PrimaryExpression	0
>110	Identifier	prhs
>111	Callee	mxGetDimensions
>112	Identifier	mxGetDimensions
>113	Identifier	dimsX
>114	Identifier	dimsX
>115	IdentifierDeclType	const mwSize *
>116	ExpressionStatement	 
>117	CallExpression	mxGetPr ( prhs [ 0 ] )
>118	ArgumentList	prhs [ 0 ]
>119	Argument	prhs [ 0 ]
>120	ArrayIndexing	prhs [ 0 ]
>121	PrimaryExpression	0
>122	Identifier	prhs
>123	Callee	mxGetPr
>124	Identifier	mxGetPr
>125	Statement	 
>126	Statement	 
>127	Statement	 
>128	Statement	 
>129	Statement	 
>130	Statement	 
>131	Statement	 
>132	Statement	 
>133	Statement	 
>134	IdentifierDeclStatement	 
>135	IdentifierDecl	mode = ( nrhs == 2 ) ? static_cast < bool > ( mxGetScalar ( prhs [ 1 ] ) ) 
>136	AssignmentExpr	mode = ( nrhs == 2 ) ? static_cast < bool > ( mxGetScalar ( prhs [ 1 ] ) ) 
>137	ConditionalExpression	( nrhs == 2 ) ? static_cast < bool > ( mxGetScalar ( prhs [ 1 ] ) ) 
>138	Identifier	true
>139	RelationalExpression	static_cast < bool > ( mxGetScalar ( prhs [ 1 ] ) )
>140	RelationalExpression	bool > ( mxGetScalar ( prhs [ 1 ] ) )
>141	CallExpression	mxGetScalar ( prhs [ 1 ] )
>142	ArgumentList	prhs [ 1 ]
>143	Argument	prhs [ 1 ]
>144	ArrayIndexing	prhs [ 1 ]
>145	PrimaryExpression	1
>146	Identifier	prhs
>147	Callee	mxGetScalar
>148	Identifier	mxGetScalar
>149	Identifier	bool
>150	Identifier	static_cast
>151	Condition	nrhs == 2
>152	EqualityExpression	nrhs == 2
>153	PrimaryExpression	2
>154	Identifier	nrhs
>155	Identifier	mode
>156	Identifier	mode
>157	IdentifierDeclType	bool
>158	IfStatement	if ( mxIsSparse ( prhs [ 0 ] ) )
>159	ExpressionStatement	 
>160	CallExpression	mexErrMsgTxt ( \"argument 1 should be full\" )
>161	ArgumentList	\"argument 1 should be full\"
>162	Argument	\"argument 1 should be full\"
>163	PrimaryExpression	\"argument 1 should be full\"
>164	Callee	mexErrMsgTxt
>165	Identifier	mexErrMsgTxt
>166	Condition	 
>167	CallExpression	mxIsSparse ( prhs [ 0 ] )
>168	ArgumentList	prhs [ 0 ]
>169	Argument	prhs [ 0 ]
>170	ArrayIndexing	prhs [ 0 ]
>171	PrimaryExpression	0
>172	Identifier	prhs
>173	Callee	mxIsSparse
>174	Identifier	mxIsSparse
>175	IfStatement	if ( ! mexCheckType < T > ( prhs [ 0 ] ) )
>176	ExpressionStatement	 
>177	CallExpression	mexErrMsgTxt ( \"type of argument 1 is not consistent\" )
>178	ArgumentList	\"type of argument 1 is not consistent\"
>179	Argument	\"type of argument 1 is not consistent\"
>180	PrimaryExpression	\"type of argument 1 is not consistent\"
>181	Callee	mexErrMsgTxt
>182	Identifier	mexErrMsgTxt
>183	Condition	 
>184	RelationalExpression	! mexCheckType < T > ( prhs [ 0 ] )
>185	RelationalExpression	T > ( prhs [ 0 ] )
>186	ArrayIndexing	prhs [ 0 ]
>187	PrimaryExpression	0
>188	Identifier	prhs
>189	Identifier	T
>190	UnaryOp	! mexCheckType
>191	Identifier	mexCheckType
>192	UnaryOperator	!
>217	FunctionDef	mexFunction (int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ])
>218	ParameterList	int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ]
>219	Parameter	 
>220	Identifier	prhs
>221	ParameterType	const mxArray * [ ]
>222	Parameter	 
>223	Identifier	nrhs
>224	ParameterType	int
>225	Parameter	 
>226	Identifier	plhs
>227	ParameterType	mxArray * [ ]
>228	Parameter	 
>229	Identifier	nlhs
>230	ParameterType	int
>231	ReturnType	void
>232	CompoundStatement	 
>233	IfStatement	if ( mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS )
>234	ElseStatement	else
>235	CompoundStatement	 
>236	ExpressionStatement	 
>237	RelationalExpression	callFunction < float > ( plhs , prhs , nrhs )
>238	RelationalExpression	float > ( plhs , prhs , nrhs )
>239	Expression	plhs , prhs , nrhs
>240	Expression	prhs , nrhs
>241	Identifier	nrhs
>242	Identifier	prhs
>243	Identifier	plhs
>244	Identifier	float
>245	Identifier	callFunction
>246	CompoundStatement	 
>247	ExpressionStatement	 
>248	RelationalExpression	callFunction < double > ( plhs , prhs , nrhs )
>249	RelationalExpression	double > ( plhs , prhs , nrhs )
>250	Expression	plhs , prhs , nrhs
>251	Expression	prhs , nrhs
>252	Identifier	nrhs
>253	Identifier	prhs
>254	Identifier	plhs
>255	Identifier	double
>256	Identifier	callFunction
>257	Condition	 
>258	EqualityExpression	mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS
>259	Identifier	mxDOUBLE_CLASS
>260	CallExpression	mxGetClassID ( prhs [ 0 ] )
>261	ArgumentList	prhs [ 0 ]
>262	Argument	prhs [ 0 ]
>263	ArrayIndexing	prhs [ 0 ]
>264	PrimaryExpression	0
>265	Identifier	prhs
>266	Callee	mxGetClassID
>267	Identifier	mxGetClassID
>268	IfStatement	if ( nlhs != 1 )
>269	ExpressionStatement	 
>270	CallExpression	mexErrMsgTxt ( \"Bad number of output arguments\" )
>271	ArgumentList	\"Bad number of output arguments\"
>272	Argument	\"Bad number of output arguments\"
>273	PrimaryExpression	\"Bad number of output arguments\"
>274	Callee	mexErrMsgTxt
>275	Identifier	mexErrMsgTxt
>276	Condition	 
>277	EqualityExpression	nlhs != 1
>278	PrimaryExpression	1
>279	Identifier	nlhs
>280	IfStatement	if ( nrhs > 2 || nrhs < 1 )
>281	ExpressionStatement	 
>282	CallExpression	mexErrMsgTxt ( \"Bad number of inputs arguments\" )
>283	ArgumentList	\"Bad number of inputs arguments\"
>284	Argument	\"Bad number of inputs arguments\"
>285	PrimaryExpression	\"Bad number of inputs arguments\"
>286	Callee	mexErrMsgTxt
>287	Identifier	mexErrMsgTxt
>288	Condition	 
>289	OrExpression	nrhs > 2 || nrhs < 1
>290	RelationalExpression	nrhs < 1
>291	PrimaryExpression	1
>292	Identifier	nrhs
>293	RelationalExpression	nrhs > 2
>294	PrimaryExpression	2
>295	Identifier	nrhs
<3=15,14,4
<4=11,8,5
<5=7,6
<8=10,9
<11=13,12
<15=175,158,134,133,132,131,130,129,128,127,126,125,116,102,101,100,99,98,97,96,95,91,90,89,88,87,86,85,84,80,71,59,58,57,56,55,54,53,52,51,50,41,34,27,16
<16=17
<17=23,18
<18=21,19
<19=20
<21=22
<23=24
<24=26,25
<27=28
<28=33,32,29
<29=31,30
<34=35
<35=40,39,36
<36=38,37
<41=42
<42=48,43
<43=44
<44=45
<45=47,46
<48=49
<59=60
<60=68,61
<61=67,62
<62=66,63
<63=65,64
<68=70,69
<71=72
<72=79,78,73
<73=77,74
<74=76,75
<80=81
<81=83,82
<91=92
<92=94,93
<102=103
<103=115,114,104
<104=113,105
<105=111,106
<106=107
<107=108
<108=110,109
<111=112
<116=117
<117=123,118
<118=119
<119=120
<120=122,121
<123=124
<134=135
<135=157,156,136
<136=155,137
<137=151,139,138
<139=150,140
<140=149,141
<141=147,142
<142=143
<143=144
<144=146,145
<147=148
<151=152
<152=154,153
<158=166,159
<159=160
<160=164,161
<161=162
<162=163
<164=165
<166=167
<167=173,168
<168=169
<169=170
<170=172,171
<173=174
<175=183,176
<176=177
<177=181,178
<178=179
<179=180
<181=182
<183=184
<184=190,185
<185=189,186
<186=188,187
<190=192,191
<217=232,231,218
<218=228,225,222,219
<219=221,220
<222=224,223
<225=227,226
<228=230,229
<232=280,268,233
<233=257,246,234
<234=235
<235=236
<236=237
<237=245,238
<238=244,239
<239=243,240
<240=242,241
<246=247
<247=248
<248=256,249
<249=255,250
<250=254,251
<251=253,252
<257=258
<258=260,259
<260=266,261
<261=262
<262=263
<263=265,264
<266=267
<268=276,269
<269=270
<270=274,271
<271=272
<272=273
<274=275
<276=277
<277=279,278
<280=288,281
<281=282
<282=286,283
<283=284
<284=285
<286=287
<288=289
<289=293,290
<290=292,291
<293=295,294
