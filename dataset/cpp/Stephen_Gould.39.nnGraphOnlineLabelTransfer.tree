>12	FunctionDef	loadDataJob (drwnNNGraphLabelDistributions & labelDistributions , const drwnNNGraph & graph , unsigned imgIndx)
>13	ParameterList	drwnNNGraphLabelDistributions & labelDistributions , const drwnNNGraph & graph , unsigned imgIndx
>14	Parameter	 
>15	Identifier	imgIndx
>16	ParameterType	unsigned
>17	Parameter	 
>18	Identifier	graph
>19	ParameterType	const drwnNNGraph &
>20	Parameter	 
>21	Identifier	labelDistributions
>22	ParameterType	drwnNNGraphLabelDistributions &
>23	CompoundStatement	 
>30	FunctionDef	~loadDataJob ()
>31	ParameterList	 
>32	CompoundStatement	 
>36	FunctionDef	operator ( ) ()
>37	ParameterList	 
>38	ReturnType	void
>39	CompoundStatement	 
>40	ExpressionStatement	 
>41	CallExpression	unlock ( )
>42	ArgumentList	 
>43	Callee	unlock
>44	Identifier	unlock
>45	ExpressionStatement	 
>46	AssignmentExpr	_labelDistributions [ _imgIndx ] = data . getSegmentLabelMarginals ( nLabels )
>47	CallExpression	data . getSegmentLabelMarginals ( nLabels )
>48	ArgumentList	nLabels
>49	Argument	nLabels
>50	Identifier	nLabels
>51	Callee	data . getSegmentLabelMarginals
>52	MemberAccess	data . getSegmentLabelMarginals
>53	Identifier	getSegmentLabelMarginals
>54	Identifier	data
>55	ArrayIndexing	_labelDistributions [ _imgIndx ]
>56	Identifier	_imgIndx
>57	Identifier	_labelDistributions
>58	ExpressionStatement	 
>59	CallExpression	lock ( )
>60	ArgumentList	 
>61	Callee	lock
>62	Identifier	lock
>63	ExpressionStatement	 
>64	CallExpression	DRWN_ASSERT ( data . numSegments ( ) == _graph [ _imgIndx ] . numNodes ( ) )
>65	ArgumentList	data . numSegments ( ) == _graph [ _imgIndx ] . numNodes ( )
>66	Argument	data . numSegments ( ) == _graph [ _imgIndx ] . numNodes ( )
>67	EqualityExpression	data . numSegments ( ) == _graph [ _imgIndx ] . numNodes ( )
>68	CallExpression	_graph [ _imgIndx ] . numNodes ( )
>69	ArgumentList	 
>70	Callee	_graph [ _imgIndx ] . numNodes
>71	MemberAccess	_graph [ _imgIndx ] . numNodes
>72	Identifier	numNodes
>73	ArrayIndexing	_graph [ _imgIndx ]
>74	Identifier	_imgIndx
>75	Identifier	_graph
>76	CallExpression	data . numSegments ( )
>77	ArgumentList	 
>78	Callee	data . numSegments
>79	MemberAccess	data . numSegments
>80	Identifier	numSegments
>81	Identifier	data
>82	Callee	DRWN_ASSERT
>83	Identifier	DRWN_ASSERT
>84	IdentifierDeclStatement	 
>85	IdentifierDecl	data ( _graph [ _imgIndx ] . name ( ) )
>86	CallExpression	_graph [ _imgIndx ] . name ( )
>87	ArgumentList	 
>88	Callee	_graph [ _imgIndx ] . name
>89	MemberAccess	_graph [ _imgIndx ] . name
>90	Identifier	name
>91	ArrayIndexing	_graph [ _imgIndx ]
>92	Identifier	_imgIndx
>93	Identifier	_graph
>94	Identifier	data
>95	IdentifierDeclType	drwnNNGraphImageData
>96	IdentifierDeclStatement	 
>97	IdentifierDecl	nLabels = gMultiSegRegionDefs . maxKey ( ) + 1
>98	AssignmentExpr	nLabels = gMultiSegRegionDefs . maxKey ( ) + 1
>99	AdditiveExpression	gMultiSegRegionDefs . maxKey ( ) + 1
>100	PrimaryExpression	1
>101	CallExpression	gMultiSegRegionDefs . maxKey ( )
>102	ArgumentList	 
>103	Callee	gMultiSegRegionDefs . maxKey
>104	MemberAccess	gMultiSegRegionDefs . maxKey
>105	Identifier	maxKey
>106	Identifier	gMultiSegRegionDefs
>107	Identifier	nLabels
>108	Identifier	nLabels
>109	IdentifierDeclType	const int
>126	FunctionDef	usage ()
>127	ParameterList	 
>128	ReturnType	void
>129	CompoundStatement	 
>130	ExpressionStatement	 
>131	ShiftExpression	cerr << \"OPTIONS
>132	ShiftExpression	\"OPTIONS
>133	ShiftExpression	\"  -m <iterations>   
>134	ShiftExpression	\"  -t <xformFile>    
>135	ShiftExpression	\"  -pairwise <p>     
>136	ShiftExpression	\"  -outLabel <file>  
>137	ShiftExpression	\"  -outImage <file>  
>138	ShiftExpression	\"  -labelCache <file>
>139	ShiftExpression	\"  -x                
>140	ShiftExpression	DRWN_STANDARD_OPTIONS_USAGE << endl
>141	Identifier	endl
>142	Identifier	DRWN_STANDARD_OPTIONS_USAGE
>143	PrimaryExpression	\"  -x                
>144	PrimaryExpression	\"  -labelCache <file>
>145	PrimaryExpression	\"  -outImage <file>  
>146	PrimaryExpression	\"  -outLabel <file>  
>147	PrimaryExpression	\"  -pairwise <p>     
>148	PrimaryExpression	\"  -t <xformFile>    
>149	PrimaryExpression	\"  -m <iterations>   
>150	PrimaryExpression	\"OPTIONS
>151	Identifier	cerr
>152	ExpressionStatement	 
>153	ShiftExpression	cerr << \"USAGE
>154	PrimaryExpression	\"USAGE
>155	Identifier	cerr
>156	ExpressionStatement	 
>157	ShiftExpression	cerr << DRWN_USAGE_HEADER << endl
>158	ShiftExpression	DRWN_USAGE_HEADER << endl
>159	Identifier	endl
>160	Identifier	DRWN_USAGE_HEADER
>161	Identifier	cerr
>165	FunctionDef	main (int argc , char * argv [ ])
>166	ParameterList	int argc , char * argv [ ]
>167	Parameter	 
>168	Identifier	argv
>169	ParameterType	char * [ ]
>170	Parameter	 
>171	Identifier	argc
>172	ParameterType	int
>173	ReturnType	int
>174	CompoundStatement	 
>175	ReturnStatement	 
>176	PrimaryExpression	0
>177	ExpressionStatement	 
>178	CallExpression	drwnCodeProfiler 
>179	ArgumentList	 
>180	Callee	drwnCodeProfiler 
>181	Identifier	drwnCodeProfiler 
>182	ExpressionStatement	 
>183	CallExpression	drwnCodeProfiler 
>184	ArgumentList	hMain
>185	Argument	hMain
>186	Identifier	hMain
>187	Callee	drwnCodeProfiler 
>188	Identifier	drwnCodeProfiler 
>189	IfStatement	if ( bVisualize )
>190	ExpressionStatement	 
>191	CallExpression	cv 
>192	ArgumentList	 
>193	Callee	cv 
>194	Identifier	cv 
>195	Condition	 
>196	Identifier	bVisualize
>197	IfStatement	if ( bVisualize || ( outImage != NULL ) )
>198	CompoundStatement	 
>199	IfStatement	if ( bVisualize )
>200	CompoundStatement	 
>201	ExpressionStatement	 
>202	CallExpression	drwnShowDebuggingImage ( canvas , \"nnGraphOnlineLabelTransfer\" , true )
>203	ArgumentList	canvas
>204	Argument	true
>205	Identifier	true
>206	Argument	\"nnGraphOnlineLabelTransfer\"
>207	PrimaryExpression	\"nnGraphOnlineLabelTransfer\"
>208	Argument	canvas
>209	Identifier	canvas
>210	Callee	drwnShowDebuggingImage
>211	Identifier	drwnShowDebuggingImage
>212	Condition	 
>213	Identifier	bVisualize
>214	IfStatement	if ( outImage != NULL )
>215	CompoundStatement	 
>216	ExpressionStatement	 
>217	CallExpression	cv 
>218	ArgumentList	outImage
>219	Argument	canvas
>220	Identifier	canvas
>221	Argument	outImage
>222	Identifier	outImage
>223	Callee	cv 
>224	Identifier	cv 
>225	Condition	 
>226	EqualityExpression	outImage != NULL
>227	Identifier	NULL
>228	Identifier	outImage
>229	IdentifierDeclStatement	 
>230	IdentifierDecl	canvas = drwnMultiSegVis 
>231	AssignmentExpr	canvas = drwnMultiSegVis 
>232	CallExpression	drwnMultiSegVis 
>233	ArgumentList	instance
>234	Argument	instance
>235	Identifier	instance
>236	Callee	drwnMultiSegVis 
>237	Identifier	drwnMultiSegVis 
>238	Identifier	canvas
>239	Identifier	canvas
>240	IdentifierDeclType	cv 
>241	Condition	 
>242	OrExpression	bVisualize || ( outImage != NULL )
>243	EqualityExpression	outImage != NULL
>244	Identifier	NULL
>245	Identifier	outImage
>246	Identifier	bVisualize
>247	IfStatement	if ( outLabel != NULL )
>248	CompoundStatement	 
>249	ExpressionStatement	 
>250	CallExpression	ofs . close ( )
>251	ArgumentList	 
>252	Callee	ofs . close
>253	MemberAccess	ofs . close
>254	Identifier	close
>255	Identifier	ofs
>256	ExpressionStatement	 
>257	ShiftExpression	ofs << instance . pixelLabels << \"\n\"
>258	ShiftExpression	instance . pixelLabels << \"\n\"
>259	PrimaryExpression	\"\n\"
>260	MemberAccess	instance . pixelLabels
>261	Identifier	pixelLabels
>262	Identifier	instance
>263	Identifier	ofs
>264	IdentifierDeclStatement	 
>265	IdentifierDecl	ofs ( outLabel )
>266	Identifier	outLabel
>267	Identifier	ofs
>268	IdentifierDeclType	ofstream
>269	Condition	 
>270	EqualityExpression	outLabel != NULL
>271	Identifier	NULL
>272	Identifier	outLabel
>273	ExpressionStatement	 
>274	CallExpression	model . inferPixelLabels ( & instance )
>275	ArgumentList	& instance
>276	Argument	& instance
>277	UnaryOp	& instance
>278	Identifier	instance
>279	UnaryOperator	&
>280	Callee	model . inferPixelLabels
>281	MemberAccess	model . inferPixelLabels
>282	Identifier	inferPixelLabels
>283	Identifier	model
>284	ForStatement	for ( int y = 0 ; y < instance . pixelLabels . rows ( ) ; y ++ )
>285	CompoundStatement	 
>286	ForStatement	for ( int x = 0 ; x < instance . pixelLabels . cols ( ) ; x ++ )
>287	CompoundStatement	 
>288	ExpressionStatement	 
>289	AssignmentExpr	Eigen 
>290	MultiplicativeExpression	- 1.0 * marginals . array ( ) . log ( )
>291	CallExpression	marginals . array ( ) . log ( )
>292	ArgumentList	 
>293	Callee	marginals . array ( ) . log
>294	MemberAccess	marginals . array ( ) . log
>295	Identifier	log
>296	CallExpression	marginals . array ( )
>297	ArgumentList	 
>298	Callee	marginals . array
>299	MemberAccess	marginals . array
>300	Identifier	array
>301	Identifier	marginals
>302	UnaryOp	- 1.0
>303	PrimaryExpression	1.0
>304	UnaryOperator	-
>305	RelationalExpression	Eigen 
>306	RelationalExpression	VectorXd > ( & instance . unaries [ instance . pixel2Indx ( x , y ) ] [ 0 ] , nLabels )
>307	Expression	& instance . unaries [ instance . pixel2Indx ( x , y ) ] [ 0 ] , nLabels
>308	Identifier	nLabels
>309	UnaryOp	& instance . unaries [ instance . pixel2Indx ( x , y ) ] [ 0 ]
>310	ArrayIndexing	instance . unaries [ instance . pixel2Indx ( x , y ) ] [ 0 ]
>311	PrimaryExpression	0
>312	ArrayIndexing	instance . unaries [ instance . pixel2Indx ( x , y ) ]
>313	CallExpression	instance . pixel2Indx ( x , y )
>314	ArgumentList	x
>315	Argument	y
>316	Identifier	y
>317	Argument	x
>318	Identifier	x
>319	Callee	instance . pixel2Indx
>320	MemberAccess	instance . pixel2Indx
>321	Identifier	pixel2Indx
>322	Identifier	instance
>323	MemberAccess	instance . unaries
>324	Identifier	unaries
>325	Identifier	instance
>326	UnaryOperator	&
>327	Identifier	VectorXd
>328	Identifier	Eigen 
>329	ForStatement	for ( int c = 0 ; c < data . segments ( ) . channels ( ) ; c ++ )
>330	CompoundStatement	 
>331	ForStatement	for ( drwnNNGraphEdgeList 
>332	CompoundStatement	 
>333	ExpressionStatement	 
>334	AssignmentExpr	rank += 1.0
>335	PrimaryExpression	1.0
>336	Identifier	rank
>337	ExpressionStatement	 
>338	AssignmentExpr	marginals += w * labelDistributions [ kt -> targetNode ]
>339	MultiplicativeExpression	w * labelDistributions [ kt -> targetNode ]
>340	ArrayIndexing	labelDistributions [ kt -> targetNode ]
>341	PtrMemberAccess	kt -> targetNode
>342	Identifier	targetNode
>343	Identifier	kt
>344	Identifier	labelDistributions
>345	Identifier	w
>346	Identifier	marginals
>347	IdentifierDeclStatement	 
>348	IdentifierDecl	w = 1.0 / rank
>349	AssignmentExpr	w = 1.0 / rank
>350	MultiplicativeExpression	1.0 / rank
>351	Identifier	rank
>352	PrimaryExpression	1.0
>353	Identifier	w
>354	Identifier	w
>355	IdentifierDeclType	const double
>356	IfStatement	if ( labelDistributions [ kt -> targetNode . imgIndx ] . empty ( ) )
>357	ContinueStatement	 
>358	Condition	 
>359	CallExpression	labelDistributions [ kt -> targetNode . imgIndx ] . empty ( )
>360	ArgumentList	 
>361	Callee	labelDistributions [ kt -> targetNode . imgIndx ] . empty
>362	MemberAccess	labelDistributions [ kt -> targetNode . imgIndx ] . empty
>363	Identifier	empty
>364	ArrayIndexing	labelDistributions [ kt -> targetNode . imgIndx ]
>365	MemberAccess	kt -> targetNode . imgIndx
>366	Identifier	imgIndx
>367	PtrMemberAccess	kt -> targetNode
>368	Identifier	targetNode
>369	Identifier	kt
>370	Identifier	labelDistributions
>371	UnaryExpression	 
>372	Identifier	kt
>373	IncDec	++
>374	Condition	 
>375	EqualityExpression	kt != e . end ( )
>376	CallExpression	e . end ( )
>377	ArgumentList	 
>378	Callee	e . end
>379	MemberAccess	e . end
>380	Identifier	end
>381	Identifier	e
>382	Identifier	kt
>383	ForInit	 
>384	IdentifierDeclStatement	drwnNNGraphEdgeList 
>385	IdentifierDecl	kt = e . begin ( )
>386	AssignmentExpr	kt = e . begin ( )
>387	CallExpression	e . begin ( )
>388	ArgumentList	 
>389	Callee	e . begin
>390	MemberAccess	e . begin
>391	Identifier	begin
>392	Identifier	e
>393	Identifier	kt
>394	Identifier	kt
>395	IdentifierDeclType	drwnNNGraphEdgeList 
>396	IdentifierDeclStatement	 
>397	IdentifierDecl	rank = 1.0
>398	AssignmentExpr	rank = 1.0
>399	PrimaryExpression	1.0
>400	Identifier	rank
>401	Identifier	rank
>402	IdentifierDeclType	double
>403	IfStatement	if ( e . empty ( ) )
>404	ContinueStatement	 
>405	Condition	 
>406	CallExpression	e . empty ( )
>407	ArgumentList	 
>408	Callee	e . empty
>409	MemberAccess	e . empty
>410	Identifier	empty
>411	Identifier	e
>412	IdentifierDeclStatement	 
>413	IdentifierDecl	& e = graph [ imgIndx ] [ segId ] . edges
>414	AssignmentExpr	& e = graph [ imgIndx ] [ segId ] . edges
>415	MemberAccess	graph [ imgIndx ] [ segId ] . edges
>416	Identifier	edges
>417	ArrayIndexing	graph [ imgIndx ] [ segId ]
>418	Identifier	segId
>419	ArrayIndexing	graph [ imgIndx ]
>420	Identifier	imgIndx
>421	Identifier	graph
>422	Identifier	e
>423	Identifier	e
>424	IdentifierDeclType	const drwnNNGraphEdgeList &
>425	IfStatement	if ( segId < 0 )
>426	ContinueStatement	 
>427	Condition	 
>428	RelationalExpression	segId < 0
>429	PrimaryExpression	0
>430	Identifier	segId
>431	IdentifierDeclStatement	 
>432	IdentifierDecl	segId = data . segments ( ) [ c ] . at < int > ( y , x )
>433	AssignmentExpr	segId = data . segments ( ) [ c ] . at < int > ( y , x )
>434	RelationalExpression	data . segments ( ) [ c ] . at < int > ( y , x )
>435	RelationalExpression	int > ( y , x )
>436	Expression	y , x
>437	Identifier	x
>438	Identifier	y
>439	Identifier	int
>440	MemberAccess	data . segments ( ) [ c ] . at
>441	Identifier	at
>442	ArrayIndexing	data . segments ( ) [ c ]
>443	Identifier	c
>444	CallExpression	data . segments ( )
>445	ArgumentList	 
>446	Callee	data . segments
>447	MemberAccess	data . segments
>448	Identifier	segments
>449	Identifier	data
>450	Identifier	segId
>451	Identifier	segId
>452	IdentifierDeclType	const int
>453	IncDecOp	 
>454	IncDec	++
>455	Identifier	c
>456	Condition	 
>457	RelationalExpression	c < data . segments ( ) . channels ( )
>458	CallExpression	data . segments ( ) . channels ( )
>459	ArgumentList	 
>460	Callee	data . segments ( ) . channels
>461	MemberAccess	data . segments ( ) . channels
>462	Identifier	channels
>463	CallExpression	data . segments ( )
>464	ArgumentList	 
>465	Callee	data . segments
>466	MemberAccess	data . segments
>467	Identifier	segments
>468	Identifier	data
>469	Identifier	c
>470	ForInit	 
>471	IdentifierDeclStatement	int c = 0 ;
>472	IdentifierDecl	c = 0
>473	AssignmentExpr	c = 0
>474	PrimaryExpression	0
>475	Identifier	c
>476	Identifier	c
>477	IdentifierDeclType	int
>478	IdentifierDeclStatement	 
>479	IdentifierDecl	marginals = VectorXd 
>480	AssignmentExpr	marginals = VectorXd 
>481	CallExpression	VectorXd 
>482	ArgumentList	nLabels
>483	Argument	DRWN_EPSILON
>484	Identifier	DRWN_EPSILON
>485	Argument	nLabels
>486	Identifier	nLabels
>487	Callee	VectorXd 
>488	Identifier	VectorXd 
>489	Identifier	marginals
>490	Identifier	marginals
>491	IdentifierDeclType	VectorXd
>492	IncDecOp	 
>493	IncDec	++
>494	Identifier	x
>495	Condition	 
>496	RelationalExpression	x < instance . pixelLabels . cols ( )
>497	CallExpression	instance . pixelLabels . cols ( )
>498	ArgumentList	 
>499	Callee	instance . pixelLabels . cols
>500	MemberAccess	instance . pixelLabels . cols
>501	Identifier	cols
>502	MemberAccess	instance . pixelLabels
>503	Identifier	pixelLabels
>504	Identifier	instance
>505	Identifier	x
>506	ForInit	 
>507	IdentifierDeclStatement	int x = 0 ;
>508	IdentifierDecl	x = 0
>509	AssignmentExpr	x = 0
>510	PrimaryExpression	0
>511	Identifier	x
>512	Identifier	x
>513	IdentifierDeclType	int
>514	IncDecOp	 
>515	IncDec	++
>516	Identifier	y
>517	Condition	 
>518	RelationalExpression	y < instance . pixelLabels . rows ( )
>519	CallExpression	instance . pixelLabels . rows ( )
>520	ArgumentList	 
>521	Callee	instance . pixelLabels . rows
>522	MemberAccess	instance . pixelLabels . rows
>523	Identifier	rows
>524	MemberAccess	instance . pixelLabels
>525	Identifier	pixelLabels
>526	Identifier	instance
>527	Identifier	y
>528	ForInit	 
>529	IdentifierDeclStatement	int y = 0 ;
>530	IdentifierDecl	y = 0
>531	AssignmentExpr	y = 0
>532	PrimaryExpression	0
>533	Identifier	y
>534	Identifier	y
>535	IdentifierDeclType	int
>536	ExpressionStatement	 
>537	CallExpression	instance . unaries . resize ( instance . size ( ) , vector < double > ( nLabels , 0.0 ) )
>538	ArgumentList	instance . size ( )
>539	Argument	vector < double > ( nLabels , 0.0 )
>540	RelationalExpression	vector < double > ( nLabels , 0.0 )
>541	RelationalExpression	double > ( nLabels , 0.0 )
>542	Expression	nLabels , 0.0
>543	PrimaryExpression	0.0
>544	Identifier	nLabels
>545	Identifier	double
>546	Identifier	vector
>547	Argument	instance . size ( )
>548	CallExpression	instance . size ( )
>549	ArgumentList	 
>550	Callee	instance . size
>551	MemberAccess	instance . size
>552	Identifier	size
>553	Identifier	instance
>554	Callee	instance . unaries . resize
>555	MemberAccess	instance . unaries . resize
>556	Identifier	resize
>557	MemberAccess	instance . unaries
>558	Identifier	unaries
>559	Identifier	instance
>560	IdentifierDeclStatement	 
>561	IdentifierDecl	instance ( img , \"\" )
>562	Expression	img , \"\"
>563	PrimaryExpression	\"\"
>564	Identifier	img
>565	Identifier	instance
>566	IdentifierDeclType	drwnSegImageInstance
>567	WhileStatement	while ( nIterations < maxIterations )
>568	CompoundStatement	 
>569	ExpressionStatement	 
>570	AssignmentExpr	lastEnergy = e
>571	Identifier	e
>572	Identifier	lastEnergy
>573	IfStatement	if ( e . first == lastEnergy . first )
>574	BreakStatement	 
>575	Condition	 
>576	EqualityExpression	e . first == lastEnergy . first
>577	MemberAccess	lastEnergy . first
>578	Identifier	first
>579	Identifier	lastEnergy
>580	MemberAccess	e . first
>581	Identifier	first
>582	Identifier	e
>583	ExpressionStatement	 
>584	CallExpression	DRWN_LOG_MESSAGE ( \"...iteration \" << nIterations << \"; energy \" << e . first << \", best \" << e . second )
>585	ArgumentList	\"...iteration \" << nIterations << \"; energy \" << e . first << \", best \" << e . second
>586	Argument	\"...iteration \" << nIterations << \"; energy \" << e . first << \", best \" << e . second
>587	ShiftExpression	\"...iteration \" << nIterations << \"; energy \" << e . first << \", best \" << e . second
>588	ShiftExpression	nIterations << \"; energy \" << e . first << \", best \" << e . second
>589	ShiftExpression	\"; energy \" << e . first << \", best \" << e . second
>590	ShiftExpression	e . first << \", best \" << e . second
>591	ShiftExpression	\", best \" << e . second
>592	MemberAccess	e . second
>593	Identifier	second
>594	Identifier	e
>595	PrimaryExpression	\", best \"
>596	MemberAccess	e . first
>597	Identifier	first
>598	Identifier	e
>599	PrimaryExpression	\"; energy \"
>600	Identifier	nIterations
>601	PrimaryExpression	\"...iteration \"
>602	Callee	DRWN_LOG_MESSAGE
>603	Identifier	DRWN_LOG_MESSAGE
>604	IdentifierDeclStatement	 
>605	IdentifierDecl	e = graph . energy ( )
>606	AssignmentExpr	e = graph . energy ( )
>607	CallExpression	graph . energy ( )
>608	ArgumentList	 
>609	Callee	graph . energy
>610	MemberAccess	graph . energy
>611	Identifier	energy
>612	Identifier	graph
>613	Identifier	e
>614	Identifier	e
>615	IdentifierDeclType	pair < double , double >
>616	ExpressionStatement	 
>617	CallExpression	drwnNNGraphThreadedMoves 
>618	ArgumentList	graph
>619	Argument	graph
>620	Identifier	graph
>621	Callee	drwnNNGraphThreadedMoves 
>622	Identifier	drwnNNGraphThreadedMoves 
>623	ExpressionStatement	 
>624	AssignmentExpr	nIterations += 1
>625	PrimaryExpression	1
>626	Identifier	nIterations
>627	Condition	 
>628	RelationalExpression	nIterations < maxIterations
>629	Identifier	maxIterations
>630	Identifier	nIterations
>631	IdentifierDeclStatement	 
>632	IdentifierDecl	nIterations = 0
>633	AssignmentExpr	nIterations = 0
>634	PrimaryExpression	0
>635	Identifier	nIterations
>636	Identifier	nIterations
>637	IdentifierDeclType	int
>638	ExpressionStatement	 
>639	CallExpression	DRWN_LOG_MESSAGE ( \"...iteration 0; energy \" << lastEnergy . first << \", best \" << lastEnergy . second )
>640	ArgumentList	\"...iteration 0; energy \" << lastEnergy . first << \", best \" << lastEnergy . second
>641	Argument	\"...iteration 0; energy \" << lastEnergy . first << \", best \" << lastEnergy . second
>642	ShiftExpression	\"...iteration 0; energy \" << lastEnergy . first << \", best \" << lastEnergy . second
>643	ShiftExpression	lastEnergy . first << \", best \" << lastEnergy . second
>644	ShiftExpression	\", best \" << lastEnergy . second
>645	MemberAccess	lastEnergy . second
>646	Identifier	second
>647	Identifier	lastEnergy
>648	PrimaryExpression	\", best \"
>649	MemberAccess	lastEnergy . first
>650	Identifier	first
>651	Identifier	lastEnergy
>652	PrimaryExpression	\"...iteration 0; energy \"
>653	Callee	DRWN_LOG_MESSAGE
>654	Identifier	DRWN_LOG_MESSAGE
>655	IdentifierDeclStatement	 
>656	IdentifierDecl	lastEnergy = graph . energy ( )
>657	AssignmentExpr	lastEnergy = graph . energy ( )
>658	CallExpression	graph . energy ( )
>659	ArgumentList	 
>660	Callee	graph . energy
>661	MemberAccess	graph . energy
>662	Identifier	energy
>663	Identifier	graph
>664	Identifier	lastEnergy
>665	Identifier	lastEnergy
>666	IdentifierDeclType	pair < double , double >
>667	ExpressionStatement	 
>668	CallExpression	drwnNNGraphThreadedMoves 
>669	ArgumentList	graph
>670	Argument	graph
>671	Identifier	graph
>672	Callee	drwnNNGraphThreadedMoves 
>673	Identifier	drwnNNGraphThreadedMoves 
>674	IfStatement	if ( xformFile != NULL )
>675	CompoundStatement	 
>676	ExpressionStatement	 
>677	Identifier	featureTransform
>678	Statement	 
>679	ExpressionStatement	 
>680	CallExpression	graph [ imgIndx ] . transformNodeFeatures ( * featureTransform )
>681	ArgumentList	* featureTransform
>682	Argument	* featureTransform
>683	UnaryOp	* featureTransform
>684	Identifier	featureTransform
>685	UnaryOperator	*
>686	Callee	graph [ imgIndx ] . transformNodeFeatures
>687	MemberAccess	graph [ imgIndx ] . transformNodeFeatures
>688	Identifier	transformNodeFeatures
>689	ArrayIndexing	graph [ imgIndx ]
>690	Identifier	imgIndx
>691	Identifier	graph
>692	ExpressionStatement	 
>693	CallExpression	DRWN_ASSERT ( featureTransform != NULL )
>694	ArgumentList	featureTransform != NULL
>695	Argument	featureTransform != NULL
>696	EqualityExpression	featureTransform != NULL
>697	Identifier	NULL
>698	Identifier	featureTransform
>699	Callee	DRWN_ASSERT
>700	Identifier	DRWN_ASSERT
>701	IdentifierDeclStatement	 
>702	IdentifierDecl	* featureTransform = drwnFeatureTransformFactory 
>703	AssignmentExpr	* featureTransform = drwnFeatureTransformFactory 
>704	CallExpression	drwnFeatureTransformFactory 
>705	ArgumentList	xformFile
>706	Argument	xformFile
>707	Identifier	xformFile
>708	Callee	drwnFeatureTransformFactory 
>709	MemberAccess	drwnFeatureTransformFactory 
>710	Identifier	createFromFile
>711	CallExpression	drwnFeatureTransformFactory 
>712	ArgumentList	 
>713	Callee	drwnFeatureTransformFactory 
>714	Identifier	drwnFeatureTransformFactory 
>715	Identifier	featureTransform
>716	Identifier	featureTransform
>717	IdentifierDeclType	drwnFeatureTransform *
>718	Condition	 
>719	EqualityExpression	xformFile != NULL
>720	Identifier	NULL
>721	Identifier	xformFile
>722	ExpressionStatement	 
>723	AssignmentExpr	graph [ imgIndx ] . bTargetMatchable = false
>724	Identifier	false
>725	MemberAccess	graph [ imgIndx ] . bTargetMatchable
>726	Identifier	bTargetMatchable
>727	ArrayIndexing	graph [ imgIndx ]
>728	Identifier	imgIndx
>729	Identifier	graph
>730	IdentifierDeclStatement	 
>731	IdentifierDecl	imgIndx = graph . appendImage ( data )
>732	AssignmentExpr	imgIndx = graph . appendImage ( data )
>733	CallExpression	graph . appendImage ( data )
>734	ArgumentList	data
>735	Argument	data
>736	Identifier	data
>737	Callee	graph . appendImage
>738	MemberAccess	graph . appendImage
>739	Identifier	appendImage
>740	Identifier	graph
>741	Identifier	imgIndx
>742	Identifier	imgIndx
>743	IdentifierDeclType	int
>744	ForStatement	for ( unsigned i = 0 ; i < graph . numImages ( ) ; i ++ )
>745	CompoundStatement	 
>746	ExpressionStatement	 
>747	AssignmentExpr	graph [ i ] . bSourceMatchable = false
>748	Identifier	false
>749	MemberAccess	graph [ i ] . bSourceMatchable
>750	Identifier	bSourceMatchable
>751	ArrayIndexing	graph [ i ]
>752	Identifier	i
>753	Identifier	graph
>754	IncDecOp	 
>755	IncDec	++
>756	Identifier	i
>757	Condition	 
>758	RelationalExpression	i < graph . numImages ( )
>759	CallExpression	graph . numImages ( )
>760	ArgumentList	 
>761	Callee	graph . numImages
>762	MemberAccess	graph . numImages
>763	Identifier	numImages
>764	Identifier	graph
>765	Identifier	i
>766	ForInit	 
>767	IdentifierDeclStatement	unsigned i = 0 ;
>768	IdentifierDecl	i = 0
>769	AssignmentExpr	i = 0
>770	PrimaryExpression	0
>771	Identifier	i
>772	Identifier	i
>773	IdentifierDeclType	unsigned
>774	IdentifierDeclStatement	 
>775	IdentifierDecl	data ( img , segments )
>776	Expression	img , segments
>777	Identifier	segments
>778	Identifier	img
>779	Identifier	data
>780	IdentifierDeclType	drwnNNGraphImageData
>781	ExpressionStatement	 
>782	CallExpression	ifs . close ( )
>783	ArgumentList	 
>784	Callee	ifs . close
>785	MemberAccess	ifs . close
>786	Identifier	close
>787	Identifier	ifs
>788	ExpressionStatement	 
>789	CallExpression	segments . read ( ifs )
>790	ArgumentList	ifs
>791	Argument	ifs
>792	Identifier	ifs
>793	Callee	segments . read
>794	MemberAccess	segments . read
>795	Identifier	read
>796	Identifier	segments
>797	ExpressionStatement	 
>798	CallExpression	DRWN_ASSERT_MSG ( ! ifs . fail ( ) , segFile )
>799	ArgumentList	! ifs . fail ( )
>800	Argument	segFile
>801	Identifier	segFile
>802	Argument	! ifs . fail ( )
>803	UnaryOp	! ifs . fail ( )
>804	CallExpression	ifs . fail ( )
>805	ArgumentList	 
>806	Callee	ifs . fail
>807	MemberAccess	ifs . fail
>808	Identifier	fail
>809	Identifier	ifs
>810	UnaryOperator	!
>811	Callee	DRWN_ASSERT_MSG
>812	Identifier	DRWN_ASSERT_MSG
>813	IdentifierDeclStatement	 
>814	IdentifierDecl	ifs ( segFile , ios 
>815	Expression	segFile , ios 
>816	Identifier	ios 
>817	Identifier	segFile
>818	Identifier	ifs
>819	IdentifierDeclType	ifstream
>820	IdentifierDeclStatement	 
>821	IdentifierDecl	segments
>822	Identifier	segments
>823	IdentifierDeclType	drwnSuperpixelContainer
>824	ExpressionStatement	 
>825	CallExpression	DRWN_ASSERT_MSG ( img . data != NULL , imageFile )
>826	ArgumentList	img . data != NULL
>827	Argument	imageFile
>828	Identifier	imageFile
>829	Argument	img . data != NULL
>830	EqualityExpression	img . data != NULL
>831	Identifier	NULL
>832	MemberAccess	img . data
>833	Identifier	data
>834	Identifier	img
>835	Callee	DRWN_ASSERT_MSG
>836	Identifier	DRWN_ASSERT_MSG
>837	IdentifierDeclStatement	 
>838	IdentifierDecl	img = cv 
>839	AssignmentExpr	img = cv 
>840	CallExpression	cv 
>841	ArgumentList	imageFile
>842	Argument	cv 
>843	Identifier	cv 
>844	Argument	imageFile
>845	Identifier	imageFile
>846	Callee	cv 
>847	Identifier	cv 
>848	Identifier	img
>849	Identifier	img
>850	IdentifierDeclType	cv 
>851	ExpressionStatement	 
>852	CallExpression	model . learnPixelContrastWeight ( pairwiseSmoothness )
>853	ArgumentList	pairwiseSmoothness
>854	Argument	pairwiseSmoothness
>855	Identifier	pairwiseSmoothness
>856	Callee	model . learnPixelContrastWeight
>857	MemberAccess	model . learnPixelContrastWeight
>858	Identifier	learnPixelContrastWeight
>859	Identifier	model
>860	IdentifierDeclStatement	 
>861	IdentifierDecl	model
>862	Identifier	model
>863	IdentifierDeclType	drwnPixelSegModel
>864	IfStatement	if ( ( labelCache != NULL ) && drwnFileExists ( labelCache ) )
>865	ElseStatement	else
>866	CompoundStatement	 
>867	IfStatement	if ( labelCache != NULL )
>868	CompoundStatement	 
>869	ForStatement	for ( unsigned imgIndx = 0 ; imgIndx < graph . numImages ( ) ; imgIndx ++ )
>870	CompoundStatement	 
>871	ForStatement	for ( unsigned segId = 0 ; segId < labelDistributions [ imgIndx ] . size ( ) ; segId ++ )
>872	CompoundStatement	 
>873	ExpressionStatement	 
>874	CallExpression	ofs . write ( ( char * ) labelDistributions [ imgIndx ] [ segId ] . data ( ) , nLabels * sizeof ( double ) )
>875	ArgumentList	( char * ) labelDistributions [ imgIndx ] [ segId ] . data ( )
>876	Argument	nLabels * sizeof ( double )
>877	MultiplicativeExpression	nLabels * sizeof ( double )
>878	SizeofExpr	sizeof ( double )
>879	SizeofOperand	double
>880	Sizeof	sizeof
>881	Identifier	nLabels
>882	Argument	( char * ) labelDistributions [ imgIndx ] [ segId ] . data ( )
>883	CastExpression	( char * ) labelDistributions [ imgIndx ] [ segId ] . data ( )
>884	CallExpression	labelDistributions [ imgIndx ] [ segId ] . data ( )
>885	ArgumentList	 
>886	Callee	labelDistributions [ imgIndx ] [ segId ] . data
>887	MemberAccess	labelDistributions [ imgIndx ] [ segId ] . data
>888	Identifier	data
>889	ArrayIndexing	labelDistributions [ imgIndx ] [ segId ]
>890	Identifier	segId
>891	ArrayIndexing	labelDistributions [ imgIndx ]
>892	Identifier	imgIndx
>893	Identifier	labelDistributions
>894	CastTarget	char *
>895	Callee	ofs . write
>896	MemberAccess	ofs . write
>897	Identifier	write
>898	Identifier	ofs
>899	IncDecOp	 
>900	IncDec	++
>901	Identifier	segId
>902	Condition	 
>903	RelationalExpression	segId < labelDistributions [ imgIndx ] . size ( )
>904	CallExpression	labelDistributions [ imgIndx ] . size ( )
>905	ArgumentList	 
>906	Callee	labelDistributions [ imgIndx ] . size
>907	MemberAccess	labelDistributions [ imgIndx ] . size
>908	Identifier	size
>909	ArrayIndexing	labelDistributions [ imgIndx ]
>910	Identifier	imgIndx
>911	Identifier	labelDistributions
>912	Identifier	segId
>913	ForInit	 
>914	IdentifierDeclStatement	unsigned segId = 0 ;
>915	IdentifierDecl	segId = 0
>916	AssignmentExpr	segId = 0
>917	PrimaryExpression	0
>918	Identifier	segId
>919	Identifier	segId
>920	IdentifierDeclType	unsigned
>921	ExpressionStatement	 
>922	CallExpression	ofs . write ( ( char * ) & n , sizeof ( uint32_t ) )
>923	ArgumentList	( char * ) & n
>924	Argument	sizeof ( uint32_t )
>925	SizeofExpr	sizeof ( uint32_t )
>926	SizeofOperand	uint32_t
>927	Sizeof	sizeof
>928	Argument	( char * ) & n
>929	CastExpression	( char * ) & n
>930	UnaryOp	& n
>931	Identifier	n
>932	UnaryOperator	&
>933	CastTarget	char *
>934	Callee	ofs . write
>935	MemberAccess	ofs . write
>936	Identifier	write
>937	Identifier	ofs
>938	IdentifierDeclStatement	 
>939	IdentifierDecl	n = ( uint32_t ) labelDistributions [ imgIndx ] . size ( )
>940	AssignmentExpr	n = ( uint32_t ) labelDistributions [ imgIndx ] . size ( )
>941	CastExpression	( uint32_t ) labelDistributions [ imgIndx ] . size ( )
>942	CallExpression	labelDistributions [ imgIndx ] . size ( )
>943	ArgumentList	 
>944	Callee	labelDistributions [ imgIndx ] . size
>945	MemberAccess	labelDistributions [ imgIndx ] . size
>946	Identifier	size
>947	ArrayIndexing	labelDistributions [ imgIndx ]
>948	Identifier	imgIndx
>949	Identifier	labelDistributions
>950	CastTarget	uint32_t
>951	Identifier	n
>952	Identifier	n
>953	IdentifierDeclType	uint32_t
>954	IncDecOp	 
>955	IncDec	++
>956	Identifier	imgIndx
>957	Condition	 
>958	RelationalExpression	imgIndx < graph . numImages ( )
>959	CallExpression	graph . numImages ( )
>960	ArgumentList	 
>961	Callee	graph . numImages
>962	MemberAccess	graph . numImages
>963	Identifier	numImages
>964	Identifier	graph
>965	Identifier	imgIndx
>966	ForInit	 
>967	IdentifierDeclStatement	unsigned imgIndx = 0 ;
>968	IdentifierDecl	imgIndx = 0
>969	AssignmentExpr	imgIndx = 0
>970	PrimaryExpression	0
>971	Identifier	imgIndx
>972	Identifier	imgIndx
>973	IdentifierDeclType	unsigned
>974	ExpressionStatement	 
>975	CallExpression	DRWN_ASSERT_MSG ( ! ofs . fail ( ) , labelCache )
>976	ArgumentList	! ofs . fail ( )
>977	Argument	labelCache
>978	Identifier	labelCache
>979	Argument	! ofs . fail ( )
>980	UnaryOp	! ofs . fail ( )
>981	CallExpression	ofs . fail ( )
>982	ArgumentList	 
>983	Callee	ofs . fail
>984	MemberAccess	ofs . fail
>985	Identifier	fail
>986	Identifier	ofs
>987	UnaryOperator	!
>988	Callee	DRWN_ASSERT_MSG
>989	Identifier	DRWN_ASSERT_MSG
>990	IdentifierDeclStatement	 
>991	IdentifierDecl	ofs ( labelCache , ios 
>992	Expression	labelCache , ios 
>993	Identifier	ios 
>994	Identifier	labelCache
>995	Identifier	ofs
>996	IdentifierDeclType	ofstream
>997	Condition	 
>998	EqualityExpression	labelCache != NULL
>999	Identifier	NULL
>1000	Identifier	labelCache
>1001	ForStatement	for ( unsigned i = 0 ; i < loadJobs . size ( ) ; i ++ )
>1002	CompoundStatement	 
>1003	ExpressionStatement	 
>1004	ArrayIndexing	loadJobs [ i ]
>1005	Identifier	i
>1006	Identifier	loadJobs
>1007	Statement	 
>1008	IncDecOp	 
>1009	IncDec	++
>1010	Identifier	i
>1011	Condition	 
>1012	RelationalExpression	i < loadJobs . size ( )
>1013	CallExpression	loadJobs . size ( )
>1014	ArgumentList	 
>1015	Callee	loadJobs . size
>1016	MemberAccess	loadJobs . size
>1017	Identifier	size
>1018	Identifier	loadJobs
>1019	Identifier	i
>1020	ForInit	 
>1021	IdentifierDeclStatement	unsigned i = 0 ;
>1022	IdentifierDecl	i = 0
>1023	AssignmentExpr	i = 0
>1024	PrimaryExpression	0
>1025	Identifier	i
>1026	Identifier	i
>1027	IdentifierDeclType	unsigned
>1028	ExpressionStatement	 
>1029	CallExpression	threadPool . finish ( )
>1030	ArgumentList	 
>1031	Callee	threadPool . finish
>1032	MemberAccess	threadPool . finish
>1033	Identifier	finish
>1034	Identifier	threadPool
>1035	ForStatement	for ( unsigned i = 0 ; i < graph . numImages ( ) ; i ++ )
>1036	CompoundStatement	 
>1037	ExpressionStatement	 
>1038	CallExpression	threadPool . addJob ( loadJobs . back ( ) )
>1039	ArgumentList	loadJobs . back ( )
>1040	Argument	loadJobs . back ( )
>1041	CallExpression	loadJobs . back ( )
>1042	ArgumentList	 
>1043	Callee	loadJobs . back
>1044	MemberAccess	loadJobs . back
>1045	Identifier	back
>1046	Identifier	loadJobs
>1047	Callee	threadPool . addJob
>1048	MemberAccess	threadPool . addJob
>1049	Identifier	addJob
>1050	Identifier	threadPool
>1051	ExpressionStatement	 
>1052	CallExpression	loadJobs . push_back ( new loadDataJob ( labelDistributions , graph , i ) )
>1053	ArgumentList	labelDistributions , graph , i
>1054	Argument	labelDistributions , graph , i
>1055	Expression	labelDistributions , graph , i
>1056	Expression	graph , i
>1057	Identifier	i
>1058	Identifier	graph
>1059	Identifier	labelDistributions
>1060	Callee	loadJobs . push_back
>1061	MemberAccess	loadJobs . push_back
>1062	Identifier	push_back
>1063	Identifier	loadJobs
>1064	IncDecOp	 
>1065	IncDec	++
>1066	Identifier	i
>1067	Condition	 
>1068	RelationalExpression	i < graph . numImages ( )
>1069	CallExpression	graph . numImages ( )
>1070	ArgumentList	 
>1071	Callee	graph . numImages
>1072	MemberAccess	graph . numImages
>1073	Identifier	numImages
>1074	Identifier	graph
>1075	Identifier	i
>1076	ForInit	 
>1077	IdentifierDeclStatement	unsigned i = 0 ;
>1078	IdentifierDecl	i = 0
>1079	AssignmentExpr	i = 0
>1080	PrimaryExpression	0
>1081	Identifier	i
>1082	Identifier	i
>1083	IdentifierDeclType	unsigned
>1084	ExpressionStatement	 
>1085	CallExpression	threadPool . start ( )
>1086	ArgumentList	 
>1087	Callee	threadPool . start
>1088	MemberAccess	threadPool . start
>1089	Identifier	start
>1090	Identifier	threadPool
>1091	IdentifierDeclStatement	 
>1092	IdentifierDecl	loadJobs
>1093	Identifier	loadJobs
>1094	IdentifierDeclType	vector < loadDataJob * >
>1095	IdentifierDeclStatement	 
>1096	IdentifierDecl	threadPool
>1097	Identifier	threadPool
>1098	IdentifierDeclType	drwnThreadPool
>1099	ExpressionStatement	 
>1100	CallExpression	DRWN_LOG_MESSAGE ( \"Loading label data from images...\" )
>1101	ArgumentList	\"Loading label data from images...\"
>1102	Argument	\"Loading label data from images...\"
>1103	PrimaryExpression	\"Loading label data from images...\"
>1104	Callee	DRWN_LOG_MESSAGE
>1105	Identifier	DRWN_LOG_MESSAGE
>1106	CompoundStatement	 
>1107	ForStatement	for ( unsigned imgIndx = 0 ; imgIndx < graph . numImages ( ) ; imgIndx ++ )
>1108	CompoundStatement	 
>1109	ExpressionStatement	 
>1110	CallExpression	DRWN_ASSERT_MSG ( ! ifs . fail ( ) , labelCache )
>1111	ArgumentList	! ifs . fail ( )
>1112	Argument	labelCache
>1113	Identifier	labelCache
>1114	Argument	! ifs . fail ( )
>1115	UnaryOp	! ifs . fail ( )
>1116	CallExpression	ifs . fail ( )
>1117	ArgumentList	 
>1118	Callee	ifs . fail
>1119	MemberAccess	ifs . fail
>1120	Identifier	fail
>1121	Identifier	ifs
>1122	UnaryOperator	!
>1123	Callee	DRWN_ASSERT_MSG
>1124	Identifier	DRWN_ASSERT_MSG
>1125	ForStatement	for ( unsigned segId = 0 ; segId < n ; segId ++ )
>1126	CompoundStatement	 
>1127	ExpressionStatement	 
>1128	AssignmentExpr	labelDistributions [ imgIndx ] [ segId ] = Eigen 
>1129	RelationalExpression	Eigen 
>1130	RelationalExpression	VectorXd > ( & x [ 0 ] , nLabels )
>1131	Expression	& x [ 0 ] , nLabels
>1132	Identifier	nLabels
>1133	UnaryOp	& x [ 0 ]
>1134	ArrayIndexing	x [ 0 ]
>1135	PrimaryExpression	0
>1136	Identifier	x
>1137	UnaryOperator	&
>1138	Identifier	VectorXd
>1139	Identifier	Eigen 
>1140	ArrayIndexing	labelDistributions [ imgIndx ] [ segId ]
>1141	Identifier	segId
>1142	ArrayIndexing	labelDistributions [ imgIndx ]
>1143	Identifier	imgIndx
>1144	Identifier	labelDistributions
>1145	ExpressionStatement	 
>1146	CallExpression	ifs . read ( ( char * ) & x [ 0 ] , nLabels * sizeof ( double ) )
>1147	ArgumentList	( char * ) & x [ 0 ]
>1148	Argument	nLabels * sizeof ( double )
>1149	MultiplicativeExpression	nLabels * sizeof ( double )
>1150	SizeofExpr	sizeof ( double )
>1151	SizeofOperand	double
>1152	Sizeof	sizeof
>1153	Identifier	nLabels
>1154	Argument	( char * ) & x [ 0 ]
>1155	CastExpression	( char * ) & x [ 0 ]
>1156	UnaryOp	& x [ 0 ]
>1157	ArrayIndexing	x [ 0 ]
>1158	PrimaryExpression	0
>1159	Identifier	x
>1160	UnaryOperator	&
>1161	CastTarget	char *
>1162	Callee	ifs . read
>1163	MemberAccess	ifs . read
>1164	Identifier	read
>1165	Identifier	ifs
>1166	IncDecOp	 
>1167	IncDec	++
>1168	Identifier	segId
>1169	Condition	 
>1170	RelationalExpression	segId < n
>1171	Identifier	n
>1172	Identifier	segId
>1173	ForInit	 
>1174	IdentifierDeclStatement	unsigned segId = 0 ;
>1175	IdentifierDecl	segId = 0
>1176	AssignmentExpr	segId = 0
>1177	PrimaryExpression	0
>1178	Identifier	segId
>1179	Identifier	segId
>1180	IdentifierDeclType	unsigned
>1181	IdentifierDeclStatement	 
>1182	IdentifierDecl	x ( nLabels )
>1183	Identifier	nLabels
>1184	Identifier	x
>1185	IdentifierDeclType	vector < double >
>1186	ExpressionStatement	 
>1187	CallExpression	labelDistributions [ imgIndx ] . resize ( n )
>1188	ArgumentList	n
>1189	Argument	n
>1190	Identifier	n
>1191	Callee	labelDistributions [ imgIndx ] . resize
>1192	MemberAccess	labelDistributions [ imgIndx ] . resize
>1193	Identifier	resize
>1194	ArrayIndexing	labelDistributions [ imgIndx ]
>1195	Identifier	imgIndx
>1196	Identifier	labelDistributions
>1197	ExpressionStatement	 
>1198	CallExpression	ifs . read ( ( char * ) & n , sizeof ( uint32_t ) )
>1199	ArgumentList	( char * ) & n
>1200	Argument	sizeof ( uint32_t )
>1201	SizeofExpr	sizeof ( uint32_t )
>1202	SizeofOperand	uint32_t
>1203	Sizeof	sizeof
>1204	Argument	( char * ) & n
>1205	CastExpression	( char * ) & n
>1206	UnaryOp	& n
>1207	Identifier	n
>1208	UnaryOperator	&
>1209	CastTarget	char *
>1210	Callee	ifs . read
>1211	MemberAccess	ifs . read
>1212	Identifier	read
>1213	Identifier	ifs
>1214	IdentifierDeclStatement	 
>1215	IdentifierDecl	n
>1216	Identifier	n
>1217	IdentifierDeclType	uint32_t
>1218	IncDecOp	 
>1219	IncDec	++
>1220	Identifier	imgIndx
>1221	Condition	 
>1222	RelationalExpression	imgIndx < graph . numImages ( )
>1223	CallExpression	graph . numImages ( )
>1224	ArgumentList	 
>1225	Callee	graph . numImages
>1226	MemberAccess	graph . numImages
>1227	Identifier	numImages
>1228	Identifier	graph
>1229	Identifier	imgIndx
>1230	ForInit	 
>1231	IdentifierDeclStatement	unsigned imgIndx = 0 ;
>1232	IdentifierDecl	imgIndx = 0
>1233	AssignmentExpr	imgIndx = 0
>1234	PrimaryExpression	0
>1235	Identifier	imgIndx
>1236	Identifier	imgIndx
>1237	IdentifierDeclType	unsigned
>1238	ExpressionStatement	 
>1239	CallExpression	DRWN_ASSERT_MSG ( ! ifs . fail ( ) , labelCache )
>1240	ArgumentList	! ifs . fail ( )
>1241	Argument	labelCache
>1242	Identifier	labelCache
>1243	Argument	! ifs . fail ( )
>1244	UnaryOp	! ifs . fail ( )
>1245	CallExpression	ifs . fail ( )
>1246	ArgumentList	 
>1247	Callee	ifs . fail
>1248	MemberAccess	ifs . fail
>1249	Identifier	fail
>1250	Identifier	ifs
>1251	UnaryOperator	!
>1252	Callee	DRWN_ASSERT_MSG
>1253	Identifier	DRWN_ASSERT_MSG
>1254	IdentifierDeclStatement	 
>1255	IdentifierDecl	ifs ( labelCache , ios 
>1256	Expression	labelCache , ios 
>1257	Identifier	ios 
>1258	Identifier	labelCache
>1259	Identifier	ifs
>1260	IdentifierDeclType	ifstream
>1261	ExpressionStatement	 
>1262	CallExpression	DRWN_LOG_MESSAGE ( \"Loading label data from cache...\" )
>1263	ArgumentList	\"Loading label data from cache...\"
>1264	Argument	\"Loading label data from cache...\"
>1265	PrimaryExpression	\"Loading label data from cache...\"
>1266	Callee	DRWN_LOG_MESSAGE
>1267	Identifier	DRWN_LOG_MESSAGE
>1268	Condition	 
>1269	AndExpression	( labelCache != NULL ) && drwnFileExists ( labelCache )
>1270	CallExpression	drwnFileExists ( labelCache )
>1271	ArgumentList	labelCache
>1272	Argument	labelCache
>1273	Identifier	labelCache
>1274	Callee	drwnFileExists
>1275	Identifier	drwnFileExists
>1276	EqualityExpression	labelCache != NULL
>1277	Identifier	NULL
>1278	Identifier	labelCache
>1279	IdentifierDeclStatement	 
>1280	IdentifierDecl	labelDistributions ( graph , VectorXd ( ) )
>1281	Expression	graph , VectorXd ( )
>1282	CallExpression	VectorXd ( )
>1283	ArgumentList	 
>1284	Callee	VectorXd
>1285	Identifier	VectorXd
>1286	Identifier	graph
>1287	Identifier	labelDistributions
>1288	IdentifierDeclType	drwnNNGraphLabelDistributions
>1289	ExpressionStatement	 
>1290	CallExpression	DRWN_LOG_VERBOSE ( \"...transferring \" << nLabels << \" labels\" )
>1291	ArgumentList	\"...transferring \" << nLabels << \" labels\"
>1292	Argument	\"...transferring \" << nLabels << \" labels\"
>1293	ShiftExpression	\"...transferring \" << nLabels << \" labels\"
>1294	ShiftExpression	nLabels << \" labels\"
>1295	PrimaryExpression	\" labels\"
>1296	Identifier	nLabels
>1297	PrimaryExpression	\"...transferring \"
>1298	Callee	DRWN_LOG_VERBOSE
>1299	Identifier	DRWN_LOG_VERBOSE
>1300	IdentifierDeclStatement	 
>1301	IdentifierDecl	nLabels = gMultiSegRegionDefs . maxKey ( ) + 1
>1302	AssignmentExpr	nLabels = gMultiSegRegionDefs . maxKey ( ) + 1
>1303	AdditiveExpression	gMultiSegRegionDefs . maxKey ( ) + 1
>1304	PrimaryExpression	1
>1305	CallExpression	gMultiSegRegionDefs . maxKey ( )
>1306	ArgumentList	 
>1307	Callee	gMultiSegRegionDefs . maxKey
>1308	MemberAccess	gMultiSegRegionDefs . maxKey
>1309	Identifier	maxKey
>1310	Identifier	gMultiSegRegionDefs
>1311	Identifier	nLabels
>1312	Identifier	nLabels
>1313	IdentifierDeclType	const int
>1314	ExpressionStatement	 
>1315	CallExpression	DRWN_LOG_VERBOSE ( \"...graph has \" << graph . numEdges ( ) << \" edges\" )
>1316	ArgumentList	\"...graph has \" << graph . numEdges ( ) << \" edges\"
>1317	Argument	\"...graph has \" << graph . numEdges ( ) << \" edges\"
>1318	ShiftExpression	\"...graph has \" << graph . numEdges ( ) << \" edges\"
>1319	ShiftExpression	graph . numEdges ( ) << \" edges\"
>1320	PrimaryExpression	\" edges\"
>1321	CallExpression	graph . numEdges ( )
>1322	ArgumentList	 
>1323	Callee	graph . numEdges
>1324	MemberAccess	graph . numEdges
>1325	Identifier	numEdges
>1326	Identifier	graph
>1327	PrimaryExpression	\"...graph has \"
>1328	Callee	DRWN_LOG_VERBOSE
>1329	Identifier	DRWN_LOG_VERBOSE
>1330	ExpressionStatement	 
>1331	CallExpression	DRWN_LOG_VERBOSE ( \"...graph has \" << graph . numNodes ( ) << \" nodes\" )
>1332	ArgumentList	\"...graph has \" << graph . numNodes ( ) << \" nodes\"
>1333	Argument	\"...graph has \" << graph . numNodes ( ) << \" nodes\"
>1334	ShiftExpression	\"...graph has \" << graph . numNodes ( ) << \" nodes\"
>1335	ShiftExpression	graph . numNodes ( ) << \" nodes\"
>1336	PrimaryExpression	\" nodes\"
>1337	CallExpression	graph . numNodes ( )
>1338	ArgumentList	 
>1339	Callee	graph . numNodes
>1340	MemberAccess	graph . numNodes
>1341	Identifier	numNodes
>1342	Identifier	graph
>1343	PrimaryExpression	\"...graph has \"
>1344	Callee	DRWN_LOG_VERBOSE
>1345	Identifier	DRWN_LOG_VERBOSE
>1346	ExpressionStatement	 
>1347	CallExpression	DRWN_LOG_MESSAGE ( \"...graph has \" << graph . numImages ( ) << \" images\" )
>1348	ArgumentList	\"...graph has \" << graph . numImages ( ) << \" images\"
>1349	Argument	\"...graph has \" << graph . numImages ( ) << \" images\"
>1350	ShiftExpression	\"...graph has \" << graph . numImages ( ) << \" images\"
>1351	ShiftExpression	graph . numImages ( ) << \" images\"
>1352	PrimaryExpression	\" images\"
>1353	CallExpression	graph . numImages ( )
>1354	ArgumentList	 
>1355	Callee	graph . numImages
>1356	MemberAccess	graph . numImages
>1357	Identifier	numImages
>1358	Identifier	graph
>1359	PrimaryExpression	\"...graph has \"
>1360	Callee	DRWN_LOG_MESSAGE
>1361	Identifier	DRWN_LOG_MESSAGE
>1362	ExpressionStatement	 
>1363	CallExpression	graph . read ( graphFile )
>1364	ArgumentList	graphFile
>1365	Argument	graphFile
>1366	Identifier	graphFile
>1367	Callee	graph . read
>1368	MemberAccess	graph . read
>1369	Identifier	read
>1370	Identifier	graph
>1371	IdentifierDeclStatement	 
>1372	IdentifierDecl	graph
>1373	Identifier	graph
>1374	IdentifierDeclType	drwnNNGraph
>1375	ExpressionStatement	 
>1376	CallExpression	DRWN_LOG_MESSAGE ( \"Loading drwnNNGraph from \" << graphFile << \"...\" )
>1377	ArgumentList	\"Loading drwnNNGraph from \" << graphFile << \"...\"
>1378	Argument	\"Loading drwnNNGraph from \" << graphFile << \"...\"
>1379	ShiftExpression	\"Loading drwnNNGraph from \" << graphFile << \"...\"
>1380	ShiftExpression	graphFile << \"...\"
>1381	PrimaryExpression	\"...\"
>1382	Identifier	graphFile
>1383	PrimaryExpression	\"Loading drwnNNGraph from \"
>1384	Callee	DRWN_LOG_MESSAGE
>1385	Identifier	DRWN_LOG_MESSAGE
>1386	IdentifierDeclStatement	 
>1387	IdentifierDecl	* segFile = DRWN_CMDLINE_ARGV [ 2 ]
>1388	AssignmentExpr	* segFile = DRWN_CMDLINE_ARGV [ 2 ]
>1389	ArrayIndexing	DRWN_CMDLINE_ARGV [ 2 ]
>1390	PrimaryExpression	2
>1391	Identifier	DRWN_CMDLINE_ARGV
>1392	Identifier	segFile
>1393	Identifier	segFile
>1394	IdentifierDeclType	const char *
>1395	IdentifierDeclStatement	 
>1396	IdentifierDecl	* imageFile = DRWN_CMDLINE_ARGV [ 1 ]
>1397	AssignmentExpr	* imageFile = DRWN_CMDLINE_ARGV [ 1 ]
>1398	ArrayIndexing	DRWN_CMDLINE_ARGV [ 1 ]
>1399	PrimaryExpression	1
>1400	Identifier	DRWN_CMDLINE_ARGV
>1401	Identifier	imageFile
>1402	Identifier	imageFile
>1403	IdentifierDeclType	const char *
>1404	IdentifierDeclStatement	 
>1405	IdentifierDecl	* graphFile = DRWN_CMDLINE_ARGV [ 0 ]
>1406	AssignmentExpr	* graphFile = DRWN_CMDLINE_ARGV [ 0 ]
>1407	ArrayIndexing	DRWN_CMDLINE_ARGV [ 0 ]
>1408	PrimaryExpression	0
>1409	Identifier	DRWN_CMDLINE_ARGV
>1410	Identifier	graphFile
>1411	Identifier	graphFile
>1412	IdentifierDeclType	const char *
>1413	ExpressionStatement	 
>1414	CallExpression	drwnCodeProfiler 
>1415	ArgumentList	hMain
>1416	Argument	hMain
>1417	Identifier	hMain
>1418	Callee	drwnCodeProfiler 
>1419	Identifier	drwnCodeProfiler 
>1420	IdentifierDeclStatement	 
>1421	IdentifierDecl	hMain = drwnCodeProfiler 
>1422	AssignmentExpr	hMain = drwnCodeProfiler 
>1423	CallExpression	drwnCodeProfiler 
>1424	ArgumentList	\"main\"
>1425	Argument	\"main\"
>1426	PrimaryExpression	\"main\"
>1427	Callee	drwnCodeProfiler 
>1428	Identifier	drwnCodeProfiler 
>1429	Identifier	hMain
>1430	Identifier	hMain
>1431	IdentifierDeclType	const int
>1432	IfStatement	if ( DRWN_CMDLINE_ARGC != 3 )
>1433	CompoundStatement	 
>1434	ReturnStatement	 
>1435	UnaryOp	- 1
>1436	PrimaryExpression	1
>1437	UnaryOperator	-
>1438	ExpressionStatement	 
>1439	CallExpression	usage ( )
>1440	ArgumentList	 
>1441	Callee	usage
>1442	Identifier	usage
>1443	Condition	 
>1444	EqualityExpression	DRWN_CMDLINE_ARGC != 3
>1445	PrimaryExpression	3
>1446	Identifier	DRWN_CMDLINE_ARGC
>1447	ExpressionStatement	 
>1448	CallExpression	DRWN_END_CMDLINE_PROCESSING ( usage ( ) )
>1449	ArgumentList	usage ( )
>1450	Argument	usage ( )
>1451	CallExpression	usage ( )
>1452	ArgumentList	 
>1453	Callee	usage
>1454	Identifier	usage
>1455	Callee	DRWN_END_CMDLINE_PROCESSING
>1456	Identifier	DRWN_END_CMDLINE_PROCESSING
>1457	Statement	 
>1458	Statement	 
>1459	Statement	 
>1460	Statement	 
>1461	Statement	 
>1462	Statement	 
>1463	Statement	 
>1464	Statement	 
>1465	Statement	 
>1466	Statement	 
>1467	Statement	 
>1468	Statement	 
>1469	Statement	 
>1470	Statement	 
>1471	Statement	 
>1472	Statement	 
>1473	Statement	 
>1474	Statement	 
>1475	Statement	 
>1476	Statement	 
>1477	Statement	 
>1478	Statement	 
>1479	Statement	 
>1480	Statement	 
>1481	Statement	 
>1482	Statement	 
>1483	Statement	 
>1484	Statement	 
>1485	Statement	 
>1486	Statement	 
>1487	Statement	 
>1488	Statement	 
>1489	Statement	 
>1490	Statement	 
>1491	Statement	 
>1492	Statement	 
>1493	Statement	 
>1494	Statement	 
>1495	Statement	 
>1496	Statement	 
>1497	Statement	 
>1498	Statement	 
>1499	Statement	 
>1500	Statement	 
>1501	Statement	 
>1502	Statement	 
>1503	Statement	 
>1504	Statement	 
>1505	IdentifierDeclStatement	 
>1506	IdentifierDecl	bVisualize = false
>1507	AssignmentExpr	bVisualize = false
>1508	Identifier	false
>1509	Identifier	false
>1510	Identifier	bVisualize
>1511	IdentifierDeclType	bool
>1512	IdentifierDeclStatement	 
>1513	IdentifierDecl	* labelCache = NULL
>1514	AssignmentExpr	* labelCache = NULL
>1515	Identifier	NULL
>1516	Identifier	NULL
>1517	Identifier	labelCache
>1518	IdentifierDeclType	const char *
>1519	IdentifierDeclStatement	 
>1520	IdentifierDecl	* outImage = NULL
>1521	AssignmentExpr	* outImage = NULL
>1522	Identifier	NULL
>1523	Identifier	NULL
>1524	Identifier	outImage
>1525	IdentifierDeclType	const char *
>1526	IdentifierDeclStatement	 
>1527	IdentifierDecl	* outLabel = NULL
>1528	AssignmentExpr	* outLabel = NULL
>1529	Identifier	NULL
>1530	Identifier	NULL
>1531	Identifier	outLabel
>1532	IdentifierDeclType	const char *
>1533	IdentifierDeclStatement	 
>1534	IdentifierDecl	pairwiseSmoothness = 0.0
>1535	AssignmentExpr	pairwiseSmoothness = 0.0
>1536	PrimaryExpression	0.0
>1537	Identifier	pairwiseSmoothness
>1538	Identifier	pairwiseSmoothness
>1539	IdentifierDeclType	double
>1540	IdentifierDeclStatement	 
>1541	IdentifierDecl	* xformFile = NULL
>1542	AssignmentExpr	* xformFile = NULL
>1543	Identifier	NULL
>1544	Identifier	NULL
>1545	Identifier	xformFile
>1546	IdentifierDeclType	const char *
>1547	IdentifierDeclStatement	 
>1548	IdentifierDecl	maxIterations = 100
>1549	AssignmentExpr	maxIterations = 100
>1550	PrimaryExpression	100
>1551	Identifier	maxIterations
>1552	Identifier	maxIterations
>1553	IdentifierDeclType	int
<12=23,13
<13=20,17,14
<14=16,15
<17=19,18
<20=22,21
<30=32,31
<36=39,38,37
<39=96,84,63,58,45,40
<40=41
<41=43,42
<43=44
<45=46
<46=55,47
<47=51,48
<48=49
<49=50
<51=52
<52=54,53
<55=57,56
<58=59
<59=61,60
<61=62
<63=64
<64=82,65
<65=66
<66=67
<67=76,68
<68=70,69
<70=71
<71=73,72
<73=75,74
<76=78,77
<78=79
<79=81,80
<82=83
<84=85
<85=95,94,86
<86=88,87
<88=89
<89=91,90
<91=93,92
<96=97
<97=109,108,98
<98=107,99
<99=101,100
<101=103,102
<103=104
<104=106,105
<126=129,128,127
<129=156,152,130
<130=131
<131=151,132
<132=150,133
<133=149,134
<134=148,135
<135=147,136
<136=146,137
<137=145,138
<138=144,139
<139=143,140
<140=142,141
<152=153
<153=155,154
<156=157
<157=161,158
<158=160,159
<165=174,173,166
<166=170,167
<167=169,168
<170=172,171
<174=1547,1540,1533,1526,1519,1512,1505,1504,1503,1502,1501,1500,1499,1498,1497,1496,1495,1494,1493,1492,1491,1490,1489,1488,1487,1486,1485,1484,1483,1482,1481,1480,1479,1478,1477,1476,1475,1474,1473,1472,1471,1470,1469,1468,1467,1466,1465,1464,1463,1462,1461,175,177,182,189,197,247,273,284,536,560,567,631,638,655,667,674,722,730,744,774,781,788,797,813,820,824,837,851,860,864,1279,1289,1300,1314,1330,1346,1362,1371,1375,1386,1395,1404,1413,1420,1432,1447,1457,1458,1459,1460
<175=176
<177=178
<178=180,179
<180=181
<182=183
<183=187,184
<184=185
<185=186
<187=188
<189=195,190
<190=191
<191=193,192
<193=194
<195=196
<197=241,198
<198=229,214,199
<199=212,200
<200=201
<201=202
<202=210,203
<203=208,206,204
<204=205
<206=207
<208=209
<210=211
<212=213
<214=225,215
<215=216
<216=217
<217=223,218
<218=221,219
<219=220
<221=222
<223=224
<225=226
<226=228,227
<229=230
<230=240,239,231
<231=238,232
<232=236,233
<233=234
<234=235
<236=237
<241=242
<242=246,243
<243=245,244
<247=269,248
<248=264,256,249
<249=250
<250=252,251
<252=253
<253=255,254
<256=257
<257=263,258
<258=260,259
<260=262,261
<264=265
<265=268,267,266
<269=270
<270=272,271
<273=274
<274=280,275
<275=276
<276=277
<277=279,278
<280=281
<281=283,282
<284=528,517,514,285
<285=286
<286=506,495,492,287
<287=478,329,288
<288=289
<289=305,290
<290=302,291
<291=293,292
<293=294
<294=296,295
<296=298,297
<298=299
<299=301,300
<302=304,303
<305=328,306
<306=327,307
<307=309,308
<309=326,310
<310=312,311
<312=323,313
<313=319,314
<314=317,315
<315=316
<317=318
<319=320
<320=322,321
<323=325,324
<329=470,456,453,330
<330=431,425,412,403,396,331
<331=383,374,371,332
<332=356,347,337,333
<333=334
<334=336,335
<337=338
<338=346,339
<339=345,340
<340=344,341
<341=343,342
<347=348
<348=355,354,349
<349=353,350
<350=352,351
<356=358,357
<358=359
<359=361,360
<361=362
<362=364,363
<364=370,365
<365=367,366
<367=369,368
<371=373,372
<374=375
<375=382,376
<376=378,377
<378=379
<379=381,380
<383=384
<384=385
<385=395,394,386
<386=393,387
<387=389,388
<389=390
<390=392,391
<396=397
<397=402,401,398
<398=400,399
<403=405,404
<405=406
<406=408,407
<408=409
<409=411,410
<412=413
<413=424,423,414
<414=422,415
<415=417,416
<417=419,418
<419=421,420
<425=427,426
<427=428
<428=430,429
<431=432
<432=452,451,433
<433=450,434
<434=440,435
<435=439,436
<436=438,437
<440=442,441
<442=444,443
<444=446,445
<446=447
<447=449,448
<453=455,454
<456=457
<457=469,458
<458=460,459
<460=461
<461=463,462
<463=465,464
<465=466
<466=468,467
<470=471
<471=472
<472=477,476,473
<473=475,474
<478=479
<479=491,490,480
<480=489,481
<481=487,482
<482=485,483
<483=484
<485=486
<487=488
<492=494,493
<495=496
<496=505,497
<497=499,498
<499=500
<500=502,501
<502=504,503
<506=507
<507=508
<508=513,512,509
<509=511,510
<514=516,515
<517=518
<518=527,519
<519=521,520
<521=522
<522=524,523
<524=526,525
<528=529
<529=530
<530=535,534,531
<531=533,532
<536=537
<537=554,538
<538=547,539
<539=540
<540=546,541
<541=545,542
<542=544,543
<547=548
<548=550,549
<550=551
<551=553,552
<554=555
<555=557,556
<557=559,558
<560=561
<561=566,565,562
<562=564,563
<567=627,568
<568=623,616,604,583,573,569
<569=570
<570=572,571
<573=575,574
<575=576
<576=580,577
<577=579,578
<580=582,581
<583=584
<584=602,585
<585=586
<586=587
<587=601,588
<588=600,589
<589=599,590
<590=596,591
<591=595,592
<592=594,593
<596=598,597
<602=603
<604=605
<605=615,614,606
<606=613,607
<607=609,608
<609=610
<610=612,611
<616=617
<617=621,618
<618=619
<619=620
<621=622
<623=624
<624=626,625
<627=628
<628=630,629
<631=632
<632=637,636,633
<633=635,634
<638=639
<639=653,640
<640=641
<641=642
<642=652,643
<643=649,644
<644=648,645
<645=647,646
<649=651,650
<653=654
<655=656
<656=666,665,657
<657=664,658
<658=660,659
<660=661
<661=663,662
<667=668
<668=672,669
<669=670
<670=671
<672=673
<674=718,675
<675=701,692,679,678,676
<676=677
<679=680
<680=686,681
<681=682
<682=683
<683=685,684
<686=687
<687=689,688
<689=691,690
<692=693
<693=699,694
<694=695
<695=696
<696=698,697
<699=700
<701=702
<702=717,716,703
<703=715,704
<704=708,705
<705=706
<706=707
<708=709
<709=711,710
<711=713,712
<713=714
<718=719
<719=721,720
<722=723
<723=725,724
<725=727,726
<727=729,728
<730=731
<731=743,742,732
<732=741,733
<733=737,734
<734=735
<735=736
<737=738
<738=740,739
<744=766,757,754,745
<745=746
<746=747
<747=749,748
<749=751,750
<751=753,752
<754=756,755
<757=758
<758=765,759
<759=761,760
<761=762
<762=764,763
<766=767
<767=768
<768=773,772,769
<769=771,770
<774=775
<775=780,779,776
<776=778,777
<781=782
<782=784,783
<784=785
<785=787,786
<788=789
<789=793,790
<790=791
<791=792
<793=794
<794=796,795
<797=798
<798=811,799
<799=802,800
<800=801
<802=803
<803=810,804
<804=806,805
<806=807
<807=809,808
<811=812
<813=814
<814=819,818,815
<815=817,816
<820=821
<821=823,822
<824=825
<825=835,826
<826=829,827
<827=828
<829=830
<830=832,831
<832=834,833
<835=836
<837=838
<838=850,849,839
<839=848,840
<840=846,841
<841=844,842
<842=843
<844=845
<846=847
<851=852
<852=856,853
<853=854
<854=855
<856=857
<857=859,858
<860=861
<861=863,862
<864=1268,1106,865
<865=866
<866=1099,1095,1091,1084,1035,1028,1001,867
<867=997,868
<868=990,974,869
<869=966,957,954,870
<870=938,921,871
<871=913,902,899,872
<872=873
<873=874
<874=895,875
<875=882,876
<876=877
<877=881,878
<878=880,879
<882=883
<883=894,884
<884=886,885
<886=887
<887=889,888
<889=891,890
<891=893,892
<895=896
<896=898,897
<899=901,900
<902=903
<903=912,904
<904=906,905
<906=907
<907=909,908
<909=911,910
<913=914
<914=915
<915=920,919,916
<916=918,917
<921=922
<922=934,923
<923=928,924
<924=925
<925=927,926
<928=929
<929=933,930
<930=932,931
<934=935
<935=937,936
<938=939
<939=953,952,940
<940=951,941
<941=950,942
<942=944,943
<944=945
<945=947,946
<947=949,948
<954=956,955
<957=958
<958=965,959
<959=961,960
<961=962
<962=964,963
<966=967
<967=968
<968=973,972,969
<969=971,970
<974=975
<975=988,976
<976=979,977
<977=978
<979=980
<980=987,981
<981=983,982
<983=984
<984=986,985
<988=989
<990=991
<991=996,995,992
<992=994,993
<997=998
<998=1000,999
<1001=1020,1011,1008,1002
<1002=1007,1003
<1003=1004
<1004=1006,1005
<1008=1010,1009
<1011=1012
<1012=1019,1013
<1013=1015,1014
<1015=1016
<1016=1018,1017
<1020=1021
<1021=1022
<1022=1027,1026,1023
<1023=1025,1024
<1028=1029
<1029=1031,1030
<1031=1032
<1032=1034,1033
<1035=1076,1067,1064,1036
<1036=1051,1037
<1037=1038
<1038=1047,1039
<1039=1040
<1040=1041
<1041=1043,1042
<1043=1044
<1044=1046,1045
<1047=1048
<1048=1050,1049
<1051=1052
<1052=1060,1053
<1053=1054
<1054=1055
<1055=1059,1056
<1056=1058,1057
<1060=1061
<1061=1063,1062
<1064=1066,1065
<1067=1068
<1068=1075,1069
<1069=1071,1070
<1071=1072
<1072=1074,1073
<1076=1077
<1077=1078
<1078=1083,1082,1079
<1079=1081,1080
<1084=1085
<1085=1087,1086
<1087=1088
<1088=1090,1089
<1091=1092
<1092=1094,1093
<1095=1096
<1096=1098,1097
<1099=1100
<1100=1104,1101
<1101=1102
<1102=1103
<1104=1105
<1106=1261,1254,1238,1107
<1107=1230,1221,1218,1108
<1108=1214,1197,1186,1181,1125,1109
<1109=1110
<1110=1123,1111
<1111=1114,1112
<1112=1113
<1114=1115
<1115=1122,1116
<1116=1118,1117
<1118=1119
<1119=1121,1120
<1123=1124
<1125=1173,1169,1166,1126
<1126=1145,1127
<1127=1128
<1128=1140,1129
<1129=1139,1130
<1130=1138,1131
<1131=1133,1132
<1133=1137,1134
<1134=1136,1135
<1140=1142,1141
<1142=1144,1143
<1145=1146
<1146=1162,1147
<1147=1154,1148
<1148=1149
<1149=1153,1150
<1150=1152,1151
<1154=1155
<1155=1161,1156
<1156=1160,1157
<1157=1159,1158
<1162=1163
<1163=1165,1164
<1166=1168,1167
<1169=1170
<1170=1172,1171
<1173=1174
<1174=1175
<1175=1180,1179,1176
<1176=1178,1177
<1181=1182
<1182=1185,1184,1183
<1186=1187
<1187=1191,1188
<1188=1189
<1189=1190
<1191=1192
<1192=1194,1193
<1194=1196,1195
<1197=1198
<1198=1210,1199
<1199=1204,1200
<1200=1201
<1201=1203,1202
<1204=1205
<1205=1209,1206
<1206=1208,1207
<1210=1211
<1211=1213,1212
<1214=1215
<1215=1217,1216
<1218=1220,1219
<1221=1222
<1222=1229,1223
<1223=1225,1224
<1225=1226
<1226=1228,1227
<1230=1231
<1231=1232
<1232=1237,1236,1233
<1233=1235,1234
<1238=1239
<1239=1252,1240
<1240=1243,1241
<1241=1242
<1243=1244
<1244=1251,1245
<1245=1247,1246
<1247=1248
<1248=1250,1249
<1252=1253
<1254=1255
<1255=1260,1259,1256
<1256=1258,1257
<1261=1262
<1262=1266,1263
<1263=1264
<1264=1265
<1266=1267
<1268=1269
<1269=1276,1270
<1270=1274,1271
<1271=1272
<1272=1273
<1274=1275
<1276=1278,1277
<1279=1280
<1280=1288,1287,1281
<1281=1286,1282
<1282=1284,1283
<1284=1285
<1289=1290
<1290=1298,1291
<1291=1292
<1292=1293
<1293=1297,1294
<1294=1296,1295
<1298=1299
<1300=1301
<1301=1313,1312,1302
<1302=1311,1303
<1303=1305,1304
<1305=1307,1306
<1307=1308
<1308=1310,1309
<1314=1315
<1315=1328,1316
<1316=1317
<1317=1318
<1318=1327,1319
<1319=1321,1320
<1321=1323,1322
<1323=1324
<1324=1326,1325
<1328=1329
<1330=1331
<1331=1344,1332
<1332=1333
<1333=1334
<1334=1343,1335
<1335=1337,1336
<1337=1339,1338
<1339=1340
<1340=1342,1341
<1344=1345
<1346=1347
<1347=1360,1348
<1348=1349
<1349=1350
<1350=1359,1351
<1351=1353,1352
<1353=1355,1354
<1355=1356
<1356=1358,1357
<1360=1361
<1362=1363
<1363=1367,1364
<1364=1365
<1365=1366
<1367=1368
<1368=1370,1369
<1371=1372
<1372=1374,1373
<1375=1376
<1376=1384,1377
<1377=1378
<1378=1379
<1379=1383,1380
<1380=1382,1381
<1384=1385
<1386=1387
<1387=1394,1393,1388
<1388=1392,1389
<1389=1391,1390
<1395=1396
<1396=1403,1402,1397
<1397=1401,1398
<1398=1400,1399
<1404=1405
<1405=1412,1411,1406
<1406=1410,1407
<1407=1409,1408
<1413=1414
<1414=1418,1415
<1415=1416
<1416=1417
<1418=1419
<1420=1421
<1421=1431,1430,1422
<1422=1429,1423
<1423=1427,1424
<1424=1425
<1425=1426
<1427=1428
<1432=1443,1433
<1433=1438,1434
<1434=1435
<1435=1437,1436
<1438=1439
<1439=1441,1440
<1441=1442
<1443=1444
<1444=1446,1445
<1447=1448
<1448=1455,1449
<1449=1450
<1450=1451
<1451=1453,1452
<1453=1454
<1455=1456
<1505=1506
<1506=1511,1510,1507
<1507=1509,1508
<1512=1513
<1513=1518,1517,1514
<1514=1516,1515
<1519=1520
<1520=1525,1524,1521
<1521=1523,1522
<1526=1527
<1527=1532,1531,1528
<1528=1530,1529
<1533=1534
<1534=1539,1538,1535
<1535=1537,1536
<1540=1541
<1541=1546,1545,1542
<1542=1544,1543
<1547=1548
<1548=1553,1552,1549
<1549=1551,1550
