>3	FunctionDef	BundlerApp 
>4	ParameterList	const ImageKeyVector & views , int * added_order , camera_params_t * cameras , double & error , bool explicit_camera_\
>5	Parameter	 
>6	Identifier	explicit_camera_centers
>7	ParameterType	bool
>8	Parameter	 
>9	Identifier	error
>10	ParameterType	double &
>11	Parameter	 
>12	Identifier	cameras
>13	ParameterType	camera_params_t *
>14	Parameter	 
>15	Identifier	added_order
>16	ParameterType	int *
>17	Parameter	 
>18	Identifier	views
>19	ParameterType	const ImageKeyVector &
>20	ReturnType	v3_t
>21	CompoundStatement	 
>22	ReturnStatement	 
>23	Identifier	pt
>24	ExpressionStatement	 
>25	Identifier	ts
>26	Statement	 
>27	Statement	 
>28	Statement	 
>29	ExpressionStatement	 
>30	Identifier	Rs
>31	Statement	 
>32	Statement	 
>33	Statement	 
>34	ExpressionStatement	 
>35	Identifier	pv
>36	Statement	 
>37	Statement	 
>38	Statement	 
>39	ExpressionStatement	 
>40	AssignmentExpr	error = sqrt ( error / num_views )
>41	CallExpression	sqrt ( error / num_views )
>42	ArgumentList	error / num_views
>43	Argument	error / num_views
>44	MultiplicativeExpression	error / num_views
>45	Identifier	num_views
>46	Identifier	error
>47	Callee	sqrt
>48	Identifier	sqrt
>49	Identifier	error
>50	ForStatement	for ( int i = 0 ; i < num_views ; i ++ )
>51	CompoundStatement	 
>52	ExpressionStatement	 
>53	AssignmentExpr	error += dx * dx + dy * dy
>54	AdditiveExpression	dx * dx + dy * dy
>55	MultiplicativeExpression	dy * dy
>56	Identifier	dy
>57	Identifier	dy
>58	MultiplicativeExpression	dx * dx
>59	Identifier	dx
>60	Identifier	dx
>61	Identifier	error
>62	IdentifierDeclStatement	 
>63	IdentifierDecl	dy = Vy ( pr ) - key . m_y
>64	AssignmentExpr	dy = Vy ( pr ) - key . m_y
>65	AdditiveExpression	Vy ( pr ) - key . m_y
>66	MemberAccess	key . m_y
>67	Identifier	m_y
>68	Identifier	key
>69	CallExpression	Vy ( pr )
>70	ArgumentList	pr
>71	Argument	pr
>72	Identifier	pr
>73	Callee	Vy
>74	Identifier	Vy
>75	Identifier	dy
>76	Identifier	dy
>77	IdentifierDeclType	double
>78	IdentifierDeclStatement	 
>79	IdentifierDecl	dx = Vx ( pr ) - key . m_x
>80	AssignmentExpr	dx = Vx ( pr ) - key . m_x
>81	AdditiveExpression	Vx ( pr ) - key . m_x
>82	MemberAccess	key . m_x
>83	Identifier	m_x
>84	Identifier	key
>85	CallExpression	Vx ( pr )
>86	ArgumentList	pr
>87	Argument	pr
>88	Identifier	pr
>89	Callee	Vx
>90	Identifier	Vx
>91	Identifier	dx
>92	Identifier	dx
>93	IdentifierDeclType	double
>94	IfStatement	if ( m_optimize_for_fisheye )
>95	CompoundStatement	 
>96	ExpressionStatement	 
>97	CallExpression	m_image_data [ image_idx ] . DistortPoint ( x , y , Vx ( pr ) , Vy ( pr ) )
>98	ArgumentList	x
>99	Argument	Vy ( pr )
>100	CallExpression	Vy ( pr )
>101	ArgumentList	pr
>102	Argument	pr
>103	Identifier	pr
>104	Callee	Vy
>105	Identifier	Vy
>106	Argument	Vx ( pr )
>107	CallExpression	Vx ( pr )
>108	ArgumentList	pr
>109	Argument	pr
>110	Identifier	pr
>111	Callee	Vx
>112	Identifier	Vx
>113	Argument	y
>114	Identifier	y
>115	Argument	x
>116	Identifier	x
>117	Callee	m_image_data [ image_idx ] . DistortPoint
>118	MemberAccess	m_image_data [ image_idx ] . DistortPoint
>119	Identifier	DistortPoint
>120	ArrayIndexing	m_image_data [ image_idx ]
>121	Identifier	image_idx
>122	Identifier	m_image_data
>123	IdentifierDeclStatement	 
>124	IdentifierDecl	y = Vy ( pr )
>125	AssignmentExpr	y = Vy ( pr )
>126	CallExpression	Vy ( pr )
>127	ArgumentList	pr
>128	Argument	pr
>129	Identifier	pr
>130	Callee	Vy
>131	Identifier	Vy
>132	Identifier	y
>133	Identifier	y
>134	IdentifierDeclType	double
>135	IdentifierDecl	x = Vx ( pr )
>136	AssignmentExpr	x = Vx ( pr )
>137	CallExpression	Vx ( pr )
>138	ArgumentList	pr
>139	Argument	pr
>140	Identifier	pr
>141	Callee	Vx
>142	Identifier	Vx
>143	Identifier	x
>144	Identifier	x
>145	IdentifierDeclType	double
>146	Condition	 
>147	Identifier	m_optimize_for_fisheye
>148	IdentifierDeclStatement	 
>149	IdentifierDecl	pr = sfm_project_final ( cameras + camera_idx , pt , explicit_camera_centers ? 1 
>150	AssignmentExpr	pr = sfm_project_final ( cameras + camera_idx , pt , explicit_camera_centers ? 1 
>151	CallExpression	sfm_project_final ( cameras + camera_idx , pt , explicit_camera_centers ? 1 
>152	ArgumentList	cameras + camera_idx
>153	Argument	m_estimate_distortion ? 1 
>154	ConditionalExpression	m_estimate_distortion ? 1 
>155	PrimaryExpression	0
>156	PrimaryExpression	1
>157	Condition	m_estimate_distortion
>158	Identifier	m_estimate_distortion
>159	Argument	explicit_camera_centers ? 1 
>160	ConditionalExpression	explicit_camera_centers ? 1 
>161	PrimaryExpression	0
>162	PrimaryExpression	1
>163	Condition	explicit_camera_centers
>164	Identifier	explicit_camera_centers
>165	Argument	pt
>166	Identifier	pt
>167	Argument	cameras + camera_idx
>168	AdditiveExpression	cameras + camera_idx
>169	Identifier	camera_idx
>170	Identifier	cameras
>171	Callee	sfm_project_final
>172	Identifier	sfm_project_final
>173	Identifier	pr
>174	Identifier	pr
>175	IdentifierDeclType	v2_t
>176	IdentifierDeclStatement	 
>177	IdentifierDecl	& key = GetKey ( image_idx , key_idx )
>178	AssignmentExpr	& key = GetKey ( image_idx , key_idx )
>179	CallExpression	GetKey ( image_idx , key_idx )
>180	ArgumentList	image_idx
>181	Argument	key_idx
>182	Identifier	key_idx
>183	Argument	image_idx
>184	Identifier	image_idx
>185	Callee	GetKey
>186	Identifier	GetKey
>187	Identifier	key
>188	Identifier	key
>189	IdentifierDeclType	Keypoint &
>190	IdentifierDeclStatement	 
>191	IdentifierDecl	key_idx = views [ i ] . second
>192	AssignmentExpr	key_idx = views [ i ] . second
>193	MemberAccess	views [ i ] . second
>194	Identifier	second
>195	ArrayIndexing	views [ i ]
>196	Identifier	i
>197	Identifier	views
>198	Identifier	key_idx
>199	Identifier	key_idx
>200	IdentifierDeclType	int
>201	IdentifierDeclStatement	 
>202	IdentifierDecl	image_idx = added_order [ camera_idx ]
>203	AssignmentExpr	image_idx = added_order [ camera_idx ]
>204	ArrayIndexing	added_order [ camera_idx ]
>205	Identifier	camera_idx
>206	Identifier	added_order
>207	Identifier	image_idx
>208	Identifier	image_idx
>209	IdentifierDeclType	int
>210	IdentifierDeclStatement	 
>211	IdentifierDecl	camera_idx = views [ i ] . first
>212	AssignmentExpr	camera_idx = views [ i ] . first
>213	MemberAccess	views [ i ] . first
>214	Identifier	first
>215	ArrayIndexing	views [ i ]
>216	Identifier	i
>217	Identifier	views
>218	Identifier	camera_idx
>219	Identifier	camera_idx
>220	IdentifierDeclType	int
>221	IncDecOp	 
>222	IncDec	++
>223	Identifier	i
>224	Condition	 
>225	RelationalExpression	i < num_views
>226	Identifier	num_views
>227	Identifier	i
>228	ForInit	 
>229	IdentifierDeclStatement	int i = 0 ;
>230	IdentifierDecl	i = 0
>231	AssignmentExpr	i = 0
>232	PrimaryExpression	0
>233	Identifier	i
>234	Identifier	i
>235	IdentifierDeclType	int
>236	ExpressionStatement	 
>237	AssignmentExpr	error = 0.0
>238	PrimaryExpression	0.0
>239	Identifier	error
>240	IdentifierDeclStatement	 
>241	IdentifierDecl	pt = triangulate_n ( num_views , pv , Rs , ts , & error )
>242	AssignmentExpr	pt = triangulate_n ( num_views , pv , Rs , ts , & error )
>243	CallExpression	triangulate_n ( num_views , pv , Rs , ts , & error )
>244	ArgumentList	num_views
>245	Argument	& error
>246	UnaryOp	& error
>247	Identifier	error
>248	UnaryOperator	&
>249	Argument	ts
>250	Identifier	ts
>251	Argument	Rs
>252	Identifier	Rs
>253	Argument	pv
>254	Identifier	pv
>255	Argument	num_views
>256	Identifier	num_views
>257	Callee	triangulate_n
>258	Identifier	triangulate_n
>259	Identifier	pt
>260	Identifier	pt
>261	IdentifierDeclType	v3_t
>262	ForStatement	for ( int i = 0 ; i < num_views ; i ++ )
>263	CompoundStatement	 
>264	IfStatement	if ( ! explicit_camera_centers )
>265	ElseStatement	else
>266	CompoundStatement	 
>267	ExpressionStatement	 
>268	CallExpression	matrix_scale ( 3 , 1 , ts + 3 * i , - 1.0 , ts + 3 * i )
>269	ArgumentList	3
>270	Argument	ts + 3 * i
>271	AdditiveExpression	ts + 3 * i
>272	MultiplicativeExpression	3 * i
>273	Identifier	i
>274	PrimaryExpression	3
>275	Identifier	ts
>276	Argument	- 1.0
>277	UnaryOp	- 1.0
>278	PrimaryExpression	1.0
>279	UnaryOperator	-
>280	Argument	ts + 3 * i
>281	AdditiveExpression	ts + 3 * i
>282	MultiplicativeExpression	3 * i
>283	Identifier	i
>284	PrimaryExpression	3
>285	Identifier	ts
>286	Argument	1
>287	PrimaryExpression	1
>288	Argument	3
>289	PrimaryExpression	3
>290	Callee	matrix_scale
>291	Identifier	matrix_scale
>292	ExpressionStatement	 
>293	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , cam -> R , cam -> t , ts + 3 * i )
>294	ArgumentList	3
>295	Argument	ts + 3 * i
>296	AdditiveExpression	ts + 3 * i
>297	MultiplicativeExpression	3 * i
>298	Identifier	i
>299	PrimaryExpression	3
>300	Identifier	ts
>301	Argument	cam -> t
>302	PtrMemberAccess	cam -> t
>303	Identifier	t
>304	Identifier	cam
>305	Argument	cam -> R
>306	PtrMemberAccess	cam -> R
>307	Identifier	R
>308	Identifier	cam
>309	Argument	1
>310	PrimaryExpression	1
>311	Argument	3
>312	PrimaryExpression	3
>313	Argument	3
>314	PrimaryExpression	3
>315	Argument	3
>316	PrimaryExpression	3
>317	Callee	matrix_product
>318	Identifier	matrix_product
>319	CompoundStatement	 
>320	ExpressionStatement	 
>321	CallExpression	memcpy ( ts + 3 * i , cam -> t , 3 * sizeof ( double ) )
>322	ArgumentList	ts + 3 * i
>323	Argument	3 * sizeof ( double )
>324	MultiplicativeExpression	3 * sizeof ( double )
>325	SizeofExpr	sizeof ( double )
>326	SizeofOperand	double
>327	Sizeof	sizeof
>328	PrimaryExpression	3
>329	Argument	cam -> t
>330	PtrMemberAccess	cam -> t
>331	Identifier	t
>332	Identifier	cam
>333	Argument	ts + 3 * i
>334	AdditiveExpression	ts + 3 * i
>335	MultiplicativeExpression	3 * i
>336	Identifier	i
>337	PrimaryExpression	3
>338	Identifier	ts
>339	Callee	memcpy
>340	Identifier	memcpy
>341	Condition	 
>342	UnaryOp	! explicit_camera_centers
>343	Identifier	explicit_camera_centers
>344	UnaryOperator	!
>345	ExpressionStatement	 
>346	CallExpression	memcpy ( Rs + 9 * i , cam -> R , 9 * sizeof ( double ) )
>347	ArgumentList	Rs + 9 * i
>348	Argument	9 * sizeof ( double )
>349	MultiplicativeExpression	9 * sizeof ( double )
>350	SizeofExpr	sizeof ( double )
>351	SizeofOperand	double
>352	Sizeof	sizeof
>353	PrimaryExpression	9
>354	Argument	cam -> R
>355	PtrMemberAccess	cam -> R
>356	Identifier	R
>357	Identifier	cam
>358	Argument	Rs + 9 * i
>359	AdditiveExpression	Rs + 9 * i
>360	MultiplicativeExpression	9 * i
>361	Identifier	i
>362	PrimaryExpression	9
>363	Identifier	Rs
>364	Callee	memcpy
>365	Identifier	memcpy
>366	ExpressionStatement	 
>367	AssignmentExpr	cam = cameras + camera_idx
>368	AdditiveExpression	cameras + camera_idx
>369	Identifier	camera_idx
>370	Identifier	cameras
>371	Identifier	cam
>372	ExpressionStatement	 
>373	AssignmentExpr	pv [ i ] = UndistortNormalizedPoint ( pv [ i ] , cameras [ camera_idx ] )
>374	CallExpression	UndistortNormalizedPoint ( pv [ i ] , cameras [ camera_idx ] )
>375	ArgumentList	pv [ i ]
>376	Argument	cameras [ camera_idx ]
>377	ArrayIndexing	cameras [ camera_idx ]
>378	Identifier	camera_idx
>379	Identifier	cameras
>380	Argument	pv [ i ]
>381	ArrayIndexing	pv [ i ]
>382	Identifier	i
>383	Identifier	pv
>384	Callee	UndistortNormalizedPoint
>385	Identifier	UndistortNormalizedPoint
>386	ArrayIndexing	pv [ i ]
>387	Identifier	i
>388	Identifier	pv
>389	ExpressionStatement	 
>390	AssignmentExpr	pv [ i ] = v2_new ( - p_n [ 0 ] , - p_n [ 1 ] )
>391	CallExpression	v2_new ( - p_n [ 0 ] , - p_n [ 1 ] )
>392	ArgumentList	- p_n [ 0 ]
>393	Argument	- p_n [ 1 ]
>394	UnaryOp	- p_n [ 1 ]
>395	ArrayIndexing	p_n [ 1 ]
>396	PrimaryExpression	1
>397	Identifier	p_n
>398	UnaryOperator	-
>399	Argument	- p_n [ 0 ]
>400	UnaryOp	- p_n [ 0 ]
>401	ArrayIndexing	p_n [ 0 ]
>402	PrimaryExpression	0
>403	Identifier	p_n
>404	UnaryOperator	-
>405	Callee	v2_new
>406	Identifier	v2_new
>407	ArrayIndexing	pv [ i ]
>408	Identifier	i
>409	Identifier	pv
>410	ExpressionStatement	 
>411	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , Kinv , p3 , p_n )
>412	ArgumentList	3
>413	Argument	p_n
>414	Identifier	p_n
>415	Argument	p3
>416	Identifier	p3
>417	Argument	Kinv
>418	Identifier	Kinv
>419	Argument	1
>420	PrimaryExpression	1
>421	Argument	3
>422	PrimaryExpression	3
>423	Argument	3
>424	PrimaryExpression	3
>425	Argument	3
>426	PrimaryExpression	3
>427	Callee	matrix_product
>428	Identifier	matrix_product
>429	IdentifierDeclStatement	 
>430	IdentifierDecl	p_n [ 3 ]
>431	PrimaryExpression	3
>432	Identifier	p_n
>433	IdentifierDeclType	double [ 3 ]
>434	ExpressionStatement	 
>435	CallExpression	matrix_invert ( 3 , K , Kinv )
>436	ArgumentList	3
>437	Argument	Kinv
>438	Identifier	Kinv
>439	Argument	K
>440	Identifier	K
>441	Argument	3
>442	PrimaryExpression	3
>443	Callee	matrix_invert
>444	Identifier	matrix_invert
>445	ExpressionStatement	 
>446	CallExpression	GetIntrinsics ( cameras [ camera_idx ] , K )
>447	ArgumentList	cameras [ camera_idx ]
>448	Argument	K
>449	Identifier	K
>450	Argument	cameras [ camera_idx ]
>451	ArrayIndexing	cameras [ camera_idx ]
>452	Identifier	camera_idx
>453	Identifier	cameras
>454	Callee	GetIntrinsics
>455	Identifier	GetIntrinsics
>456	IdentifierDeclStatement	 
>457	IdentifierDecl	Kinv [ 9 ]
>458	PrimaryExpression	9
>459	Identifier	Kinv
>460	IdentifierDeclType	double [ 9 ]
>461	IdentifierDecl	K [ 9 ]
>462	PrimaryExpression	9
>463	Identifier	K
>464	IdentifierDeclType	double [ 9 ]
>465	IfStatement	if ( m_optimize_for_fisheye )
>466	CompoundStatement	 
>467	ExpressionStatement	 
>468	CallExpression	m_image_data [ image_idx ] . UndistortPoint ( x , y , p3 [ 0 ] , p3 [ 1 ] )
>469	ArgumentList	x
>470	Argument	p3 [ 1 ]
>471	ArrayIndexing	p3 [ 1 ]
>472	PrimaryExpression	1
>473	Identifier	p3
>474	Argument	p3 [ 0 ]
>475	ArrayIndexing	p3 [ 0 ]
>476	PrimaryExpression	0
>477	Identifier	p3
>478	Argument	y
>479	Identifier	y
>480	Argument	x
>481	Identifier	x
>482	Callee	m_image_data [ image_idx ] . UndistortPoint
>483	MemberAccess	m_image_data [ image_idx ] . UndistortPoint
>484	Identifier	UndistortPoint
>485	ArrayIndexing	m_image_data [ image_idx ]
>486	Identifier	image_idx
>487	Identifier	m_image_data
>488	IdentifierDeclStatement	 
>489	IdentifierDecl	y = p3 [ 1 ]
>490	AssignmentExpr	y = p3 [ 1 ]
>491	ArrayIndexing	p3 [ 1 ]
>492	PrimaryExpression	1
>493	Identifier	p3
>494	Identifier	y
>495	Identifier	y
>496	IdentifierDeclType	double
>497	IdentifierDecl	x = p3 [ 0 ]
>498	AssignmentExpr	x = p3 [ 0 ]
>499	ArrayIndexing	p3 [ 0 ]
>500	PrimaryExpression	0
>501	Identifier	p3
>502	Identifier	x
>503	Identifier	x
>504	IdentifierDeclType	double
>505	Condition	 
>506	Identifier	m_optimize_for_fisheye
>507	IdentifierDeclStatement	 
>508	IdentifierDecl	p3 [ 3 ] = { key . m_x , key . m_y , 1.0 }
>509	AssignmentExpr	p3 [ 3 ] = { key . m_x , key . m_y , 1.0 }
>510	InitializerList	key . m_x
>511	PrimaryExpression	1.0
>512	MemberAccess	key . m_y
>513	Identifier	m_y
>514	Identifier	key
>515	MemberAccess	key . m_x
>516	Identifier	m_x
>517	Identifier	key
>518	Identifier	p3
>519	PrimaryExpression	3
>520	Identifier	p3
>521	IdentifierDeclType	double [ 3 ]
>522	IdentifierDeclStatement	 
>523	IdentifierDecl	& key = GetKey ( image_idx , key_idx )
>524	AssignmentExpr	& key = GetKey ( image_idx , key_idx )
>525	CallExpression	GetKey ( image_idx , key_idx )
>526	ArgumentList	image_idx
>527	Argument	key_idx
>528	Identifier	key_idx
>529	Argument	image_idx
>530	Identifier	image_idx
>531	Callee	GetKey
>532	Identifier	GetKey
>533	Identifier	key
>534	Identifier	key
>535	IdentifierDeclType	Keypoint &
>536	IdentifierDeclStatement	 
>537	IdentifierDecl	key_idx = views [ i ] . second
>538	AssignmentExpr	key_idx = views [ i ] . second
>539	MemberAccess	views [ i ] . second
>540	Identifier	second
>541	ArrayIndexing	views [ i ]
>542	Identifier	i
>543	Identifier	views
>544	Identifier	key_idx
>545	Identifier	key_idx
>546	IdentifierDeclType	int
>547	IdentifierDeclStatement	 
>548	IdentifierDecl	image_idx = added_order [ camera_idx ]
>549	AssignmentExpr	image_idx = added_order [ camera_idx ]
>550	ArrayIndexing	added_order [ camera_idx ]
>551	Identifier	camera_idx
>552	Identifier	added_order
>553	Identifier	image_idx
>554	Identifier	image_idx
>555	IdentifierDeclType	int
>556	IdentifierDeclStatement	 
>557	IdentifierDecl	camera_idx = views [ i ] . first
>558	AssignmentExpr	camera_idx = views [ i ] . first
>559	MemberAccess	views [ i ] . first
>560	Identifier	first
>561	ArrayIndexing	views [ i ]
>562	Identifier	i
>563	Identifier	views
>564	Identifier	camera_idx
>565	Identifier	camera_idx
>566	IdentifierDeclType	int
>567	IdentifierDeclStatement	 
>568	IdentifierDecl	* cam = NULL
>569	AssignmentExpr	* cam = NULL
>570	Identifier	NULL
>571	Identifier	NULL
>572	Identifier	cam
>573	IdentifierDeclType	camera_params_t *
>574	IncDecOp	 
>575	IncDec	++
>576	Identifier	i
>577	Condition	 
>578	RelationalExpression	i < num_views
>579	Identifier	num_views
>580	Identifier	i
>581	ForInit	 
>582	IdentifierDeclStatement	int i = 0 ;
>583	IdentifierDecl	i = 0
>584	AssignmentExpr	i = 0
>585	PrimaryExpression	0
>586	Identifier	i
>587	Identifier	i
>588	IdentifierDeclType	int
>589	IdentifierDeclStatement	 
>590	IdentifierDecl	* ts = new double [ 3 * num_views ]
>591	AssignmentExpr	* ts = new double [ 3 * num_views ]
>592	MultiplicativeExpression	3 * num_views
>593	Identifier	num_views
>594	PrimaryExpression	3
>595	Identifier	ts
>596	Identifier	ts
>597	IdentifierDeclType	double *
>598	IdentifierDeclStatement	 
>599	IdentifierDecl	* Rs = new double [ 9 * num_views ]
>600	AssignmentExpr	* Rs = new double [ 9 * num_views ]
>601	MultiplicativeExpression	9 * num_views
>602	Identifier	num_views
>603	PrimaryExpression	9
>604	Identifier	Rs
>605	Identifier	Rs
>606	IdentifierDeclType	double *
>607	IdentifierDeclStatement	 
>608	IdentifierDecl	* pv = new v2_t [ num_views ]
>609	AssignmentExpr	* pv = new v2_t [ num_views ]
>610	Identifier	num_views
>611	Identifier	num_views
>612	Identifier	pv
>613	IdentifierDeclType	v2_t *
>614	IdentifierDeclStatement	 
>615	IdentifierDecl	num_views = ( int ) views . size ( )
>616	AssignmentExpr	num_views = ( int ) views . size ( )
>617	CastExpression	( int ) views . size ( )
>618	CallExpression	views . size ( )
>619	ArgumentList	 
>620	Callee	views . size
>621	MemberAccess	views . size
>622	Identifier	size
>623	Identifier	views
>624	CastTarget	int
>625	Identifier	num_views
>626	Identifier	num_views
>627	IdentifierDeclType	int
>687	FunctionDef	BundlerApp 
>688	ParameterList	const ImageKeyVector & views , int * added_order , camera_params_t * cameras , double & error , bool explicit_camera_\
>689	Parameter	 
>690	Identifier	explicit_camera_centers
>691	ParameterType	bool
>692	Parameter	 
>693	Identifier	error
>694	ParameterType	double &
>695	Parameter	 
>696	Identifier	cameras
>697	ParameterType	camera_params_t *
>698	Parameter	 
>699	Identifier	added_order
>700	ParameterType	int *
>701	Parameter	 
>702	Identifier	views
>703	ParameterType	const ImageKeyVector &
>704	ReturnType	v3_t
>705	CompoundStatement	 
>706	ReturnStatement	 
>707	CallExpression	v3_new ( pt_inf [ 0 ] , pt_inf [ 1 ] , pt_inf [ 2 ] )
>708	ArgumentList	pt_inf [ 0 ]
>709	Argument	pt_inf [ 2 ]
>710	ArrayIndexing	pt_inf [ 2 ]
>711	PrimaryExpression	2
>712	Identifier	pt_inf
>713	Argument	pt_inf [ 1 ]
>714	ArrayIndexing	pt_inf [ 1 ]
>715	PrimaryExpression	1
>716	Identifier	pt_inf
>717	Argument	pt_inf [ 0 ]
>718	ArrayIndexing	pt_inf [ 0 ]
>719	PrimaryExpression	0
>720	Identifier	pt_inf
>721	Callee	v3_new
>722	Identifier	v3_new
>723	IfStatement	if ( ! explicit_camera_centers )
>724	ElseStatement	else
>725	CompoundStatement	 
>726	ExpressionStatement	 
>727	CallExpression	matrix_sum ( 3 , 1 , 3 , 1 , pos , ray , pt_inf )
>728	ArgumentList	3
>729	Argument	pt_inf
>730	Identifier	pt_inf
>731	Argument	ray
>732	Identifier	ray
>733	Argument	pos
>734	Identifier	pos
>735	Argument	1
>736	PrimaryExpression	1
>737	Argument	3
>738	PrimaryExpression	3
>739	Argument	1
>740	PrimaryExpression	1
>741	Argument	3
>742	PrimaryExpression	3
>743	Callee	matrix_sum
>744	Identifier	matrix_sum
>745	ExpressionStatement	 
>746	CallExpression	matrix_scale ( 3 , 1 , ray , 100.0 , ray_extend )
>747	ArgumentList	3
>748	Argument	ray_extend
>749	Identifier	ray_extend
>750	Argument	100.0
>751	PrimaryExpression	100.0
>752	Argument	ray
>753	Identifier	ray
>754	Argument	1
>755	PrimaryExpression	1
>756	Argument	3
>757	PrimaryExpression	3
>758	Callee	matrix_scale
>759	Identifier	matrix_scale
>760	IdentifierDeclStatement	 
>761	IdentifierDecl	ray_extend [ 3 ]
>762	PrimaryExpression	3
>763	Identifier	ray_extend
>764	IdentifierDeclType	double [ 3 ]
>765	ExpressionStatement	 
>766	CallExpression	memcpy ( pos , cam -> t , 3 * sizeof ( double ) )
>767	ArgumentList	pos
>768	Argument	3 * sizeof ( double )
>769	MultiplicativeExpression	3 * sizeof ( double )
>770	SizeofExpr	sizeof ( double )
>771	SizeofOperand	double
>772	Sizeof	sizeof
>773	PrimaryExpression	3
>774	Argument	cam -> t
>775	PtrMemberAccess	cam -> t
>776	Identifier	t
>777	Identifier	cam
>778	Argument	pos
>779	Identifier	pos
>780	Callee	memcpy
>781	Identifier	memcpy
>782	CompoundStatement	 
>783	Condition	 
>784	UnaryOp	! explicit_camera_centers
>785	Identifier	explicit_camera_centers
>786	UnaryOperator	!
>787	IdentifierDeclStatement	 
>788	IdentifierDecl	pt_inf [ 3 ] = { 0.0 , 0.0 , 0.0 }
>789	AssignmentExpr	pt_inf [ 3 ] = { 0.0 , 0.0 , 0.0 }
>790	InitializerList	0.0
>791	PrimaryExpression	0.0
>792	PrimaryExpression	0.0
>793	PrimaryExpression	0.0
>794	Identifier	pt_inf
>795	PrimaryExpression	3
>796	Identifier	pt_inf
>797	IdentifierDeclType	double [ 3 ]
>798	IdentifierDeclStatement	 
>799	IdentifierDecl	pos [ 3 ] = { 0.0 , 0.0 , 0.0 }
>800	AssignmentExpr	pos [ 3 ] = { 0.0 , 0.0 , 0.0 }
>801	InitializerList	0.0
>802	PrimaryExpression	0.0
>803	PrimaryExpression	0.0
>804	PrimaryExpression	0.0
>805	Identifier	pos
>806	PrimaryExpression	3
>807	Identifier	pos
>808	IdentifierDeclType	double [ 3 ]
>809	ExpressionStatement	 
>810	CallExpression	matrix_transpose_product ( 3 , 3 , 3 , 1 , cam -> R , ray , ray_world )
>811	ArgumentList	3
>812	Argument	ray_world
>813	Identifier	ray_world
>814	Argument	ray
>815	Identifier	ray
>816	Argument	cam -> R
>817	PtrMemberAccess	cam -> R
>818	Identifier	R
>819	Identifier	cam
>820	Argument	1
>821	PrimaryExpression	1
>822	Argument	3
>823	PrimaryExpression	3
>824	Argument	3
>825	PrimaryExpression	3
>826	Argument	3
>827	PrimaryExpression	3
>828	Callee	matrix_transpose_product
>829	Identifier	matrix_transpose_product
>830	IdentifierDeclStatement	 
>831	IdentifierDecl	ray_world [ 3 ]
>832	PrimaryExpression	3
>833	Identifier	ray_world
>834	IdentifierDeclType	double [ 3 ]
>835	ExpressionStatement	 
>836	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , Kinv , p3 , ray )
>837	ArgumentList	3
>838	Argument	ray
>839	Identifier	ray
>840	Argument	p3
>841	Identifier	p3
>842	Argument	Kinv
>843	Identifier	Kinv
>844	Argument	1
>845	PrimaryExpression	1
>846	Argument	3
>847	PrimaryExpression	3
>848	Argument	3
>849	PrimaryExpression	3
>850	Argument	3
>851	PrimaryExpression	3
>852	Callee	matrix_product
>853	Identifier	matrix_product
>854	IdentifierDeclStatement	 
>855	IdentifierDecl	ray [ 3 ]
>856	PrimaryExpression	3
>857	Identifier	ray
>858	IdentifierDeclType	double [ 3 ]
>859	ExpressionStatement	 
>860	CallExpression	matrix_invert ( 3 , K , Kinv )
>861	ArgumentList	3
>862	Argument	Kinv
>863	Identifier	Kinv
>864	Argument	K
>865	Identifier	K
>866	Argument	3
>867	PrimaryExpression	3
>868	Callee	matrix_invert
>869	Identifier	matrix_invert
>870	ExpressionStatement	 
>871	CallExpression	GetIntrinsics ( cameras [ camera_idx ] , K )
>872	ArgumentList	cameras [ camera_idx ]
>873	Argument	K
>874	Identifier	K
>875	Argument	cameras [ camera_idx ]
>876	ArrayIndexing	cameras [ camera_idx ]
>877	Identifier	camera_idx
>878	Identifier	cameras
>879	Callee	GetIntrinsics
>880	Identifier	GetIntrinsics
>881	IdentifierDeclStatement	 
>882	IdentifierDecl	Kinv [ 9 ]
>883	PrimaryExpression	9
>884	Identifier	Kinv
>885	IdentifierDeclType	double [ 9 ]
>886	IdentifierDecl	K [ 9 ]
>887	PrimaryExpression	9
>888	Identifier	K
>889	IdentifierDeclType	double [ 9 ]
>890	IfStatement	if ( m_optimize_for_fisheye )
>891	CompoundStatement	 
>892	ExpressionStatement	 
>893	CallExpression	m_image_data [ image_idx ] . UndistortPoint ( x , y , p3 [ 0 ] , p3 [ 1 ] )
>894	ArgumentList	x
>895	Argument	p3 [ 1 ]
>896	ArrayIndexing	p3 [ 1 ]
>897	PrimaryExpression	1
>898	Identifier	p3
>899	Argument	p3 [ 0 ]
>900	ArrayIndexing	p3 [ 0 ]
>901	PrimaryExpression	0
>902	Identifier	p3
>903	Argument	y
>904	Identifier	y
>905	Argument	x
>906	Identifier	x
>907	Callee	m_image_data [ image_idx ] . UndistortPoint
>908	MemberAccess	m_image_data [ image_idx ] . UndistortPoint
>909	Identifier	UndistortPoint
>910	ArrayIndexing	m_image_data [ image_idx ]
>911	Identifier	image_idx
>912	Identifier	m_image_data
>913	IdentifierDeclStatement	 
>914	IdentifierDecl	y = p3 [ 1 ]
>915	AssignmentExpr	y = p3 [ 1 ]
>916	ArrayIndexing	p3 [ 1 ]
>917	PrimaryExpression	1
>918	Identifier	p3
>919	Identifier	y
>920	Identifier	y
>921	IdentifierDeclType	double
>922	IdentifierDecl	x = p3 [ 0 ]
>923	AssignmentExpr	x = p3 [ 0 ]
>924	ArrayIndexing	p3 [ 0 ]
>925	PrimaryExpression	0
>926	Identifier	p3
>927	Identifier	x
>928	Identifier	x
>929	IdentifierDeclType	double
>930	Condition	 
>931	Identifier	m_optimize_for_fisheye
>932	IdentifierDeclStatement	 
>933	IdentifierDecl	p3 [ 3 ] = { key . m_x , key . m_y , 1.0 }
>934	AssignmentExpr	p3 [ 3 ] = { key . m_x , key . m_y , 1.0 }
>935	InitializerList	key . m_x
>936	PrimaryExpression	1.0
>937	MemberAccess	key . m_y
>938	Identifier	m_y
>939	Identifier	key
>940	MemberAccess	key . m_x
>941	Identifier	m_x
>942	Identifier	key
>943	Identifier	p3
>944	PrimaryExpression	3
>945	Identifier	p3
>946	IdentifierDeclType	double [ 3 ]
>947	ExpressionStatement	 
>948	AssignmentExpr	cam = cameras + camera_idx
>949	AdditiveExpression	cameras + camera_idx
>950	Identifier	camera_idx
>951	Identifier	cameras
>952	Identifier	cam
>953	IdentifierDeclStatement	 
>954	IdentifierDecl	& key = GetKey ( image_idx , key_idx )
>955	AssignmentExpr	& key = GetKey ( image_idx , key_idx )
>956	CallExpression	GetKey ( image_idx , key_idx )
>957	ArgumentList	image_idx
>958	Argument	key_idx
>959	Identifier	key_idx
>960	Argument	image_idx
>961	Identifier	image_idx
>962	Callee	GetKey
>963	Identifier	GetKey
>964	Identifier	key
>965	Identifier	key
>966	IdentifierDeclType	Keypoint &
>967	IdentifierDeclStatement	 
>968	IdentifierDecl	key_idx = views [ 0 ] . second
>969	AssignmentExpr	key_idx = views [ 0 ] . second
>970	MemberAccess	views [ 0 ] . second
>971	Identifier	second
>972	ArrayIndexing	views [ 0 ]
>973	PrimaryExpression	0
>974	Identifier	views
>975	Identifier	key_idx
>976	Identifier	key_idx
>977	IdentifierDeclType	int
>978	IdentifierDeclStatement	 
>979	IdentifierDecl	image_idx = added_order [ camera_idx ]
>980	AssignmentExpr	image_idx = added_order [ camera_idx ]
>981	ArrayIndexing	added_order [ camera_idx ]
>982	Identifier	camera_idx
>983	Identifier	added_order
>984	Identifier	image_idx
>985	Identifier	image_idx
>986	IdentifierDeclType	int
>987	IdentifierDeclStatement	 
>988	IdentifierDecl	camera_idx = views [ 0 ] . first
>989	AssignmentExpr	camera_idx = views [ 0 ] . first
>990	MemberAccess	views [ 0 ] . first
>991	Identifier	first
>992	ArrayIndexing	views [ 0 ]
>993	PrimaryExpression	0
>994	Identifier	views
>995	Identifier	camera_idx
>996	Identifier	camera_idx
>997	IdentifierDeclType	int
>998	IdentifierDeclStatement	 
>999	IdentifierDecl	* cam = NULL
>1000	AssignmentExpr	* cam = NULL
>1001	Identifier	NULL
>1002	Identifier	NULL
>1003	Identifier	cam
>1004	IdentifierDeclType	camera_params_t *
>1048	FunctionDef	PrintTrack (const ImageKeyVector & track)
>1049	ParameterList	const ImageKeyVector & track
>1050	Parameter	 
>1051	Identifier	track
>1052	ParameterType	const ImageKeyVector &
>1053	ReturnType	static void
>1054	CompoundStatement	 
>1055	ExpressionStatement	 
>1056	CallExpression	printf ( \" ]\" )
>1057	ArgumentList	\" ]\"
>1058	Argument	\" ]\"
>1059	PrimaryExpression	\" ]\"
>1060	Callee	printf
>1061	Identifier	printf
>1062	ForStatement	for ( int i = 0 ; i < num_views ; i ++ )
>1063	CompoundStatement	 
>1064	IfStatement	if ( i < num_views - 1 )
>1065	ExpressionStatement	 
>1066	CallExpression	printf ( \",\" )
>1067	ArgumentList	\",\"
>1068	Argument	\",\"
>1069	PrimaryExpression	\",\"
>1070	Callee	printf
>1071	Identifier	printf
>1072	Condition	 
>1073	RelationalExpression	i < num_views - 1
>1074	AdditiveExpression	num_views - 1
>1075	PrimaryExpression	1
>1076	Identifier	num_views
>1077	Identifier	i
>1078	ExpressionStatement	 
>1079	CallExpression	printf ( \" (%d %d)\" , track [ i ] . first , track [ i ] . second )
>1080	ArgumentList	\" (%d %d)\"
>1081	Argument	track [ i ] . second
>1082	MemberAccess	track [ i ] . second
>1083	Identifier	second
>1084	ArrayIndexing	track [ i ]
>1085	Identifier	i
>1086	Identifier	track
>1087	Argument	track [ i ] . first
>1088	MemberAccess	track [ i ] . first
>1089	Identifier	first
>1090	ArrayIndexing	track [ i ]
>1091	Identifier	i
>1092	Identifier	track
>1093	Argument	\" (%d %d)\"
>1094	PrimaryExpression	\" (%d %d)\"
>1095	Callee	printf
>1096	Identifier	printf
>1097	IncDecOp	 
>1098	IncDec	++
>1099	Identifier	i
>1100	Condition	 
>1101	RelationalExpression	i < num_views
>1102	Identifier	num_views
>1103	Identifier	i
>1104	ForInit	 
>1105	IdentifierDeclStatement	int i = 0 ;
>1106	IdentifierDecl	i = 0
>1107	AssignmentExpr	i = 0
>1108	PrimaryExpression	0
>1109	Identifier	i
>1110	Identifier	i
>1111	IdentifierDeclType	int
>1112	ExpressionStatement	 
>1113	CallExpression	printf ( \"[\" )
>1114	ArgumentList	\"[\"
>1115	Argument	\"[\"
>1116	PrimaryExpression	\"[\"
>1117	Callee	printf
>1118	Identifier	printf
>1119	IdentifierDeclStatement	 
>1120	IdentifierDecl	num_views = ( int ) track . size ( )
>1121	AssignmentExpr	num_views = ( int ) track . size ( )
>1122	CastExpression	( int ) track . size ( )
>1123	CallExpression	track . size ( )
>1124	ArgumentList	 
>1125	Callee	track . size
>1126	MemberAccess	track . size
>1127	Identifier	size
>1128	Identifier	track
>1129	CastTarget	int
>1130	Identifier	num_views
>1131	Identifier	num_views
>1132	IdentifierDeclType	int
>1144	FunctionDef	BundlerApp 
>1145	ParameterList	int num_points , int num_cameras , int * added_order , camera_params_t * cameras , v3_t * points , v3_t * colors , \
>1146	Parameter	 
>1147	Identifier	min_views
>1148	ParameterType	int
>1149	Parameter	 
>1150	Identifier	max_reprojection_error
>1151	ParameterType	double
>1152	Parameter	 
>1153	Identifier	pt_views
>1154	ParameterType	std 
>1155	Parameter	 
>1156	Identifier	reference_baseline
>1157	ParameterType	double
>1158	Parameter	 
>1159	Identifier	colors
>1160	ParameterType	v3_t *
>1161	Parameter	 
>1162	Identifier	points
>1163	ParameterType	v3_t *
>1164	Parameter	 
>1165	Identifier	cameras
>1166	ParameterType	camera_params_t *
>1167	Parameter	 
>1168	Identifier	added_order
>1169	ParameterType	int *
>1170	Parameter	 
>1171	Identifier	num_cameras
>1172	ParameterType	int
>1173	Parameter	 
>1174	Identifier	num_points
>1175	ParameterType	int
>1176	ReturnType	int
>1177	CompoundStatement	 
>1178	ReturnStatement	 
>1179	Identifier	pt_count
>1180	ExpressionStatement	 
>1181	CallExpression	printf ( \"[AddAllNewPoints] Failed cheirality checks
>1182	ArgumentList	\"[AddAllNewPoints] Failed cheirality checks
>1183	Argument	num_cheirality_failed
>1184	Identifier	num_cheirality_failed
>1185	Argument	\"[AddAllNewPoints] Failed cheirality checks
>1186	PrimaryExpression	\"[AddAllNewPoints] Failed cheirality checks
>1187	Callee	printf
>1188	Identifier	printf
>1189	ExpressionStatement	 
>1190	CallExpression	printf ( \"[AddAllNewPoints] Bad reprojections
>1191	ArgumentList	\"[AddAllNewPoints] Bad reprojections
>1192	Argument	num_high_reprojection
>1193	Identifier	num_high_reprojection
>1194	Argument	\"[AddAllNewPoints] Bad reprojections
>1195	PrimaryExpression	\"[AddAllNewPoints] Bad reprojections
>1196	Callee	printf
>1197	Identifier	printf
>1198	ExpressionStatement	 
>1199	CallExpression	printf ( \"[AddAllNewPoints] Ill-conditioned tracks
>1200	ArgumentList	\"[AddAllNewPoints] Ill-conditioned tracks
>1201	Argument	num_ill_conditioned
>1202	Identifier	num_ill_conditioned
>1203	Argument	\"[AddAllNewPoints] Ill-conditioned tracks
>1204	PrimaryExpression	\"[AddAllNewPoints] Ill-conditioned tracks
>1205	Callee	printf
>1206	Identifier	printf
>1207	ExpressionStatement	 
>1208	CallExpression	printf ( \"[AddAllNewPoints] Added %d new points\n\" , num_added )
>1209	ArgumentList	\"[AddAllNewPoints] Added %d new points\n\"
>1210	Argument	num_added
>1211	Identifier	num_added
>1212	Argument	\"[AddAllNewPoints] Added %d new points\n\"
>1213	PrimaryExpression	\"[AddAllNewPoints] Added %d new points\n\"
>1214	Callee	printf
>1215	Identifier	printf
>1216	ForStatement	for ( int i = 0 ; i < num_tracks ; i ++ )
>1217	CompoundStatement	 
>1218	ExpressionStatement	 
>1219	IncDecOp	num_added ++
>1220	IncDec	++
>1221	Identifier	num_added
>1222	ExpressionStatement	 
>1223	IncDecOp	pt_count ++
>1224	IncDec	++
>1225	Identifier	pt_count
>1226	ExpressionStatement	 
>1227	AssignmentExpr	m_track_data [ track_idx ] . m_extra = pt_count
>1228	Identifier	pt_count
>1229	MemberAccess	m_track_data [ track_idx ] . m_extra
>1230	Identifier	m_extra
>1231	ArrayIndexing	m_track_data [ track_idx ]
>1232	Identifier	track_idx
>1233	Identifier	m_track_data
>1234	IdentifierDeclStatement	 
>1235	IdentifierDecl	track_idx = track_idxs [ i ]
>1236	AssignmentExpr	track_idx = track_idxs [ i ]
>1237	ArrayIndexing	track_idxs [ i ]
>1238	Identifier	i
>1239	Identifier	track_idxs
>1240	Identifier	track_idx
>1241	Identifier	track_idx
>1242	IdentifierDeclType	int
>1243	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>1244	CompoundStatement	 
>1245	ExpressionStatement	 
>1246	AssignmentExpr	GetKey ( image_idx , key_idx ) . m_extra = pt_count
>1247	Identifier	pt_count
>1248	MemberAccess	GetKey ( image_idx , key_idx ) . m_extra
>1249	Identifier	m_extra
>1250	CallExpression	GetKey ( image_idx , key_idx )
>1251	ArgumentList	image_idx
>1252	Argument	key_idx
>1253	Identifier	key_idx
>1254	Argument	image_idx
>1255	Identifier	image_idx
>1256	Callee	GetKey
>1257	Identifier	GetKey
>1258	IdentifierDeclStatement	 
>1259	IdentifierDecl	key_idx = new_tracks [ i ] [ j ] . second
>1260	AssignmentExpr	key_idx = new_tracks [ i ] [ j ] . second
>1261	MemberAccess	new_tracks [ i ] [ j ] . second
>1262	Identifier	second
>1263	ArrayIndexing	new_tracks [ i ] [ j ]
>1264	Identifier	j
>1265	ArrayIndexing	new_tracks [ i ]
>1266	Identifier	i
>1267	Identifier	new_tracks
>1268	Identifier	key_idx
>1269	Identifier	key_idx
>1270	IdentifierDeclType	int
>1271	IdentifierDeclStatement	 
>1272	IdentifierDecl	image_idx = added_order [ camera_idx ]
>1273	AssignmentExpr	image_idx = added_order [ camera_idx ]
>1274	ArrayIndexing	added_order [ camera_idx ]
>1275	Identifier	camera_idx
>1276	Identifier	added_order
>1277	Identifier	image_idx
>1278	Identifier	image_idx
>1279	IdentifierDeclType	int
>1280	IdentifierDeclStatement	 
>1281	IdentifierDecl	camera_idx = new_tracks [ i ] [ j ] . first
>1282	AssignmentExpr	camera_idx = new_tracks [ i ] [ j ] . first
>1283	MemberAccess	new_tracks [ i ] [ j ] . first
>1284	Identifier	first
>1285	ArrayIndexing	new_tracks [ i ] [ j ]
>1286	Identifier	j
>1287	ArrayIndexing	new_tracks [ i ]
>1288	Identifier	i
>1289	Identifier	new_tracks
>1290	Identifier	camera_idx
>1291	Identifier	camera_idx
>1292	IdentifierDeclType	int
>1293	IncDecOp	 
>1294	IncDec	++
>1295	Identifier	j
>1296	Condition	 
>1297	RelationalExpression	j < num_views
>1298	Identifier	num_views
>1299	Identifier	j
>1300	ForInit	 
>1301	IdentifierDeclStatement	int j = 0 ;
>1302	IdentifierDecl	j = 0
>1303	AssignmentExpr	j = 0
>1304	PrimaryExpression	0
>1305	Identifier	j
>1306	Identifier	j
>1307	IdentifierDeclType	int
>1308	ExpressionStatement	 
>1309	CallExpression	pt_views . push_back ( new_tracks [ i ] )
>1310	ArgumentList	new_tracks [ i ]
>1311	Argument	new_tracks [ i ]
>1312	ArrayIndexing	new_tracks [ i ]
>1313	Identifier	i
>1314	Identifier	new_tracks
>1315	Callee	pt_views . push_back
>1316	MemberAccess	pt_views . push_back
>1317	Identifier	push_back
>1318	Identifier	pt_views
>1319	ExpressionStatement	 
>1320	AssignmentExpr	colors [ pt_count ] = v3_new ( ( double ) r , ( double ) g , ( double ) b )
>1321	CallExpression	v3_new ( ( double ) r , ( double ) g , ( double ) b )
>1322	ArgumentList	( double ) r
>1323	Argument	( double ) b
>1324	CastExpression	( double ) b
>1325	Identifier	b
>1326	CastTarget	double
>1327	Argument	( double ) g
>1328	CastExpression	( double ) g
>1329	Identifier	g
>1330	CastTarget	double
>1331	Argument	( double ) r
>1332	CastExpression	( double ) r
>1333	Identifier	r
>1334	CastTarget	double
>1335	Callee	v3_new
>1336	Identifier	v3_new
>1337	ArrayIndexing	colors [ pt_count ]
>1338	Identifier	pt_count
>1339	Identifier	colors
>1340	IdentifierDeclStatement	 
>1341	IdentifierDecl	b = GetKey ( image_idx , key_idx ) . m_b
>1342	AssignmentExpr	b = GetKey ( image_idx , key_idx ) . m_b
>1343	MemberAccess	GetKey ( image_idx , key_idx ) . m_b
>1344	Identifier	m_b
>1345	CallExpression	GetKey ( image_idx , key_idx )
>1346	ArgumentList	image_idx
>1347	Argument	key_idx
>1348	Identifier	key_idx
>1349	Argument	image_idx
>1350	Identifier	image_idx
>1351	Callee	GetKey
>1352	Identifier	GetKey
>1353	Identifier	b
>1354	Identifier	b
>1355	IdentifierDeclType	unsigned char
>1356	IdentifierDeclStatement	 
>1357	IdentifierDecl	g = GetKey ( image_idx , key_idx ) . m_g
>1358	AssignmentExpr	g = GetKey ( image_idx , key_idx ) . m_g
>1359	MemberAccess	GetKey ( image_idx , key_idx ) . m_g
>1360	Identifier	m_g
>1361	CallExpression	GetKey ( image_idx , key_idx )
>1362	ArgumentList	image_idx
>1363	Argument	key_idx
>1364	Identifier	key_idx
>1365	Argument	image_idx
>1366	Identifier	image_idx
>1367	Callee	GetKey
>1368	Identifier	GetKey
>1369	Identifier	g
>1370	Identifier	g
>1371	IdentifierDeclType	unsigned char
>1372	IdentifierDeclStatement	 
>1373	IdentifierDecl	r = GetKey ( image_idx , key_idx ) . m_r
>1374	AssignmentExpr	r = GetKey ( image_idx , key_idx ) . m_r
>1375	MemberAccess	GetKey ( image_idx , key_idx ) . m_r
>1376	Identifier	m_r
>1377	CallExpression	GetKey ( image_idx , key_idx )
>1378	ArgumentList	image_idx
>1379	Argument	key_idx
>1380	Identifier	key_idx
>1381	Argument	image_idx
>1382	Identifier	image_idx
>1383	Callee	GetKey
>1384	Identifier	GetKey
>1385	Identifier	r
>1386	Identifier	r
>1387	IdentifierDeclType	unsigned char
>1388	IdentifierDeclStatement	 
>1389	IdentifierDecl	key_idx = new_tracks [ i ] [ 0 ] . second
>1390	AssignmentExpr	key_idx = new_tracks [ i ] [ 0 ] . second
>1391	MemberAccess	new_tracks [ i ] [ 0 ] . second
>1392	Identifier	second
>1393	ArrayIndexing	new_tracks [ i ] [ 0 ]
>1394	PrimaryExpression	0
>1395	ArrayIndexing	new_tracks [ i ]
>1396	Identifier	i
>1397	Identifier	new_tracks
>1398	Identifier	key_idx
>1399	Identifier	key_idx
>1400	IdentifierDeclType	int
>1401	IdentifierDeclStatement	 
>1402	IdentifierDecl	image_idx = added_order [ camera_idx ]
>1403	AssignmentExpr	image_idx = added_order [ camera_idx ]
>1404	ArrayIndexing	added_order [ camera_idx ]
>1405	Identifier	camera_idx
>1406	Identifier	added_order
>1407	Identifier	image_idx
>1408	Identifier	image_idx
>1409	IdentifierDeclType	int
>1410	IdentifierDeclStatement	 
>1411	IdentifierDecl	camera_idx = new_tracks [ i ] [ 0 ] . first
>1412	AssignmentExpr	camera_idx = new_tracks [ i ] [ 0 ] . first
>1413	MemberAccess	new_tracks [ i ] [ 0 ] . first
>1414	Identifier	first
>1415	ArrayIndexing	new_tracks [ i ] [ 0 ]
>1416	PrimaryExpression	0
>1417	ArrayIndexing	new_tracks [ i ]
>1418	Identifier	i
>1419	Identifier	new_tracks
>1420	Identifier	camera_idx
>1421	Identifier	camera_idx
>1422	IdentifierDeclType	int
>1423	ExpressionStatement	 
>1424	AssignmentExpr	points [ pt_count ] = pt
>1425	Identifier	pt
>1426	ArrayIndexing	points [ pt_count ]
>1427	Identifier	pt_count
>1428	Identifier	points
>1429	ExpressionStatement	 
>1430	CallExpression	fflush ( stdout )
>1431	ArgumentList	stdout
>1432	Argument	stdout
>1433	Identifier	stdout
>1434	Callee	fflush
>1435	Identifier	fflush
>1436	ExpressionStatement	 
>1437	CallExpression	printf ( \">> All tests succeeded [%0.3f, %0.3f] for point [%d]\n\" , RAD2DEG ( max_angle ) , error , pt_count )
>1438	ArgumentList	\">> All tests succeeded [%0.3f, %0.3f] for point [%d]\n\"
>1439	Argument	pt_count
>1440	Identifier	pt_count
>1441	Argument	error
>1442	Identifier	error
>1443	Argument	RAD2DEG ( max_angle )
>1444	CallExpression	RAD2DEG ( max_angle )
>1445	ArgumentList	max_angle
>1446	Argument	max_angle
>1447	Identifier	max_angle
>1448	Callee	RAD2DEG
>1449	Identifier	RAD2DEG
>1450	Argument	\">> All tests succeeded [%0.3f, %0.3f] for point [%d]\n\"
>1451	PrimaryExpression	\">> All tests succeeded [%0.3f, %0.3f] for point [%d]\n\"
>1452	Callee	printf
>1453	Identifier	printf
>1454	ExpressionStatement	 
>1455	CallExpression	printf ( \"\n\" )
>1456	ArgumentList	\"\n\"
>1457	Argument	\"\n\"
>1458	PrimaryExpression	\"\n\"
>1459	Callee	printf
>1460	Identifier	printf
>1461	ExpressionStatement	 
>1462	CallExpression	PrintTrack ( new_tracks [ i ] )
>1463	ArgumentList	new_tracks [ i ]
>1464	Argument	new_tracks [ i ]
>1465	ArrayIndexing	new_tracks [ i ]
>1466	Identifier	i
>1467	Identifier	new_tracks
>1468	Callee	PrintTrack
>1469	Identifier	PrintTrack
>1470	ExpressionStatement	 
>1471	CallExpression	printf ( \"Triangulating track \" )
>1472	ArgumentList	\"Triangulating track \"
>1473	Argument	\"Triangulating track \"
>1474	PrimaryExpression	\"Triangulating track \"
>1475	Callee	printf
>1476	Identifier	printf
>1477	IfStatement	if ( ! all_in_front )
>1478	CompoundStatement	 
>1479	ContinueStatement	 
>1480	ExpressionStatement	 
>1481	CallExpression	fflush ( stdout )
>1482	ArgumentList	stdout
>1483	Argument	stdout
>1484	Identifier	stdout
>1485	Callee	fflush
>1486	Identifier	fflush
>1487	ExpressionStatement	 
>1488	CallExpression	printf ( \">> Cheirality check failed\n\" )
>1489	ArgumentList	\">> Cheirality check failed\n\"
>1490	Argument	\">> Cheirality check failed\n\"
>1491	PrimaryExpression	\">> Cheirality check failed\n\"
>1492	Callee	printf
>1493	Identifier	printf
>1494	ExpressionStatement	 
>1495	IncDecOp	num_cheirality_failed ++
>1496	IncDec	++
>1497	Identifier	num_cheirality_failed
>1498	Condition	 
>1499	UnaryOp	! all_in_front
>1500	Identifier	all_in_front
>1501	UnaryOperator	!
>1502	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>1503	CompoundStatement	 
>1504	IfStatement	if ( ! in_front )
>1505	CompoundStatement	 
>1506	BreakStatement	 
>1507	ExpressionStatement	 
>1508	AssignmentExpr	all_in_front = false
>1509	Identifier	false
>1510	Identifier	all_in_front
>1511	Condition	 
>1512	UnaryOp	! in_front
>1513	Identifier	in_front
>1514	UnaryOperator	!
>1515	IdentifierDeclStatement	 
>1516	IdentifierDecl	in_front = CheckCheirality ( pt , cameras [ camera_idx ] )
>1517	AssignmentExpr	in_front = CheckCheirality ( pt , cameras [ camera_idx ] )
>1518	CallExpression	CheckCheirality ( pt , cameras [ camera_idx ] )
>1519	ArgumentList	pt
>1520	Argument	cameras [ camera_idx ]
>1521	ArrayIndexing	cameras [ camera_idx ]
>1522	Identifier	camera_idx
>1523	Identifier	cameras
>1524	Argument	pt
>1525	Identifier	pt
>1526	Callee	CheckCheirality
>1527	Identifier	CheckCheirality
>1528	Identifier	in_front
>1529	Identifier	in_front
>1530	IdentifierDeclType	bool
>1531	IdentifierDeclStatement	 
>1532	IdentifierDecl	camera_idx = new_tracks [ i ] [ j ] . first
>1533	AssignmentExpr	camera_idx = new_tracks [ i ] [ j ] . first
>1534	MemberAccess	new_tracks [ i ] [ j ] . first
>1535	Identifier	first
>1536	ArrayIndexing	new_tracks [ i ] [ j ]
>1537	Identifier	j
>1538	ArrayIndexing	new_tracks [ i ]
>1539	Identifier	i
>1540	Identifier	new_tracks
>1541	Identifier	camera_idx
>1542	Identifier	camera_idx
>1543	IdentifierDeclType	int
>1544	IncDecOp	 
>1545	IncDec	++
>1546	Identifier	j
>1547	Condition	 
>1548	RelationalExpression	j < num_views
>1549	Identifier	num_views
>1550	Identifier	j
>1551	ForInit	 
>1552	IdentifierDeclStatement	int j = 0 ;
>1553	IdentifierDecl	j = 0
>1554	AssignmentExpr	j = 0
>1555	PrimaryExpression	0
>1556	Identifier	j
>1557	Identifier	j
>1558	IdentifierDeclType	int
>1559	IdentifierDeclStatement	 
>1560	IdentifierDecl	all_in_front = true
>1561	AssignmentExpr	all_in_front = true
>1562	Identifier	true
>1563	Identifier	true
>1564	Identifier	all_in_front
>1565	IdentifierDeclType	bool
>1566	IfStatement	if ( std 
>1567	CompoundStatement	 
>1568	ContinueStatement	 
>1569	ExpressionStatement	 
>1570	CallExpression	fflush ( stdout )
>1571	ArgumentList	stdout
>1572	Argument	stdout
>1573	Identifier	stdout
>1574	Callee	fflush
>1575	Identifier	fflush
>1576	ExpressionStatement	 
>1577	CallExpression	printf ( \">> Reprojection error [%0.3f] is too large\n\" , error )
>1578	ArgumentList	\">> Reprojection error [%0.3f] is too large\n\"
>1579	Argument	error
>1580	Identifier	error
>1581	Argument	\">> Reprojection error [%0.3f] is too large\n\"
>1582	PrimaryExpression	\">> Reprojection error [%0.3f] is too large\n\"
>1583	Callee	printf
>1584	Identifier	printf
>1585	ExpressionStatement	 
>1586	IncDecOp	num_high_reprojection ++
>1587	IncDec	++
>1588	Identifier	num_high_reprojection
>1589	Condition	 
>1590	OrExpression	std 
>1591	RelationalExpression	error > max_reprojection_error
>1592	Identifier	max_reprojection_error
>1593	Identifier	error
>1594	CallExpression	std 
>1595	ArgumentList	error
>1596	Argument	error
>1597	Identifier	error
>1598	Callee	std 
>1599	Identifier	std 
>1600	IfStatement	if ( ! m_panorama_mode )
>1601	ElseStatement	else
>1602	CompoundStatement	 
>1603	ExpressionStatement	 
>1604	AssignmentExpr	pt = GeneratePointAtInfinity ( new_tracks [ i ] , added_order , cameras , error , true )
>1605	CallExpression	GeneratePointAtInfinity ( new_tracks [ i ] , added_order , cameras , error , true )
>1606	ArgumentList	new_tracks [ i ]
>1607	Argument	true
>1608	Identifier	true
>1609	Argument	error
>1610	Identifier	error
>1611	Argument	cameras
>1612	Identifier	cameras
>1613	Argument	added_order
>1614	Identifier	added_order
>1615	Argument	new_tracks [ i ]
>1616	ArrayIndexing	new_tracks [ i ]
>1617	Identifier	i
>1618	Identifier	new_tracks
>1619	Callee	GeneratePointAtInfinity
>1620	Identifier	GeneratePointAtInfinity
>1621	Identifier	pt
>1622	CompoundStatement	 
>1623	ExpressionStatement	 
>1624	AssignmentExpr	pt = TriangulateNViews ( new_tracks [ i ] , added_order , cameras , error , true )
>1625	CallExpression	TriangulateNViews ( new_tracks [ i ] , added_order , cameras , error , true )
>1626	ArgumentList	new_tracks [ i ]
>1627	Argument	true
>1628	Identifier	true
>1629	Argument	error
>1630	Identifier	error
>1631	Argument	cameras
>1632	Identifier	cameras
>1633	Argument	added_order
>1634	Identifier	added_order
>1635	Argument	new_tracks [ i ]
>1636	ArrayIndexing	new_tracks [ i ]
>1637	Identifier	i
>1638	Identifier	new_tracks
>1639	Callee	TriangulateNViews
>1640	Identifier	TriangulateNViews
>1641	Identifier	pt
>1642	Condition	 
>1643	UnaryOp	! m_panorama_mode
>1644	Identifier	m_panorama_mode
>1645	UnaryOperator	!
>1646	IdentifierDeclStatement	 
>1647	IdentifierDecl	pt
>1648	Identifier	pt
>1649	IdentifierDeclType	v3_t
>1650	IdentifierDeclStatement	 
>1651	IdentifierDecl	error
>1652	Identifier	error
>1653	IdentifierDeclType	double
>1654	IfStatement	if ( ! conditioned || ! good_distance )
>1655	CompoundStatement	 
>1656	ContinueStatement	 
>1657	ExpressionStatement	 
>1658	CallExpression	fflush ( stdout )
>1659	ArgumentList	stdout
>1660	Argument	stdout
>1661	Identifier	stdout
>1662	Callee	fflush
>1663	Identifier	fflush
>1664	ExpressionStatement	 
>1665	CallExpression	printf ( \">> Track is ill-conditioned [max_angle = %0.3f]\n\" , RAD2DEG ( max_angle ) )
>1666	ArgumentList	\">> Track is ill-conditioned [max_angle = %0.3f]\n\"
>1667	Argument	RAD2DEG ( max_angle )
>1668	CallExpression	RAD2DEG ( max_angle )
>1669	ArgumentList	max_angle
>1670	Argument	max_angle
>1671	Identifier	max_angle
>1672	Callee	RAD2DEG
>1673	Identifier	RAD2DEG
>1674	Argument	\">> Track is ill-conditioned [max_angle = %0.3f]\n\"
>1675	PrimaryExpression	\">> Track is ill-conditioned [max_angle = %0.3f]\n\"
>1676	Callee	printf
>1677	Identifier	printf
>1678	ExpressionStatement	 
>1679	IncDecOp	num_ill_conditioned ++
>1680	IncDec	++
>1681	Identifier	num_ill_conditioned
>1682	Condition	 
>1683	OrExpression	! conditioned || ! good_distance
>1684	UnaryOp	! good_distance
>1685	Identifier	good_distance
>1686	UnaryOperator	!
>1687	UnaryOp	! conditioned
>1688	Identifier	conditioned
>1689	UnaryOperator	!
>1690	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>1691	CompoundStatement	 
>1692	ForStatement	for ( int k = j + 1 ; k < num_views ; k ++ )
>1693	CompoundStatement	 
>1694	IfStatement	if ( dist_jk > m_min_camera_distance_ratio * reference_baseline )
>1695	ExpressionStatement	 
>1696	AssignmentExpr	good_distance = true
>1697	Identifier	true
>1698	Identifier	good_distance
>1699	Condition	 
>1700	RelationalExpression	dist_jk > m_min_camera_distance_ratio * reference_baseline
>1701	MultiplicativeExpression	m_min_camera_distance_ratio * reference_baseline
>1702	Identifier	reference_baseline
>1703	Identifier	m_min_camera_distance_ratio
>1704	Identifier	dist_jk
>1705	IdentifierDeclStatement	 
>1706	IdentifierDecl	dist_jk = GetCameraDistance ( cameras + j , cameras + k , m_explicit_camera_centers )
>1707	AssignmentExpr	dist_jk = GetCameraDistance ( cameras + j , cameras + k , m_explicit_camera_centers )
>1708	CallExpression	GetCameraDistance ( cameras + j , cameras + k , m_explicit_camera_centers )
>1709	ArgumentList	cameras + j
>1710	Argument	m_explicit_camera_centers
>1711	Identifier	m_explicit_camera_centers
>1712	Argument	cameras + k
>1713	AdditiveExpression	cameras + k
>1714	Identifier	k
>1715	Identifier	cameras
>1716	Argument	cameras + j
>1717	AdditiveExpression	cameras + j
>1718	Identifier	j
>1719	Identifier	cameras
>1720	Callee	GetCameraDistance
>1721	Identifier	GetCameraDistance
>1722	Identifier	dist_jk
>1723	Identifier	dist_jk
>1724	IdentifierDeclType	double
>1725	IfStatement	if ( RAD2DEG ( angle ) >= m_ray_angle_threshold )
>1726	CompoundStatement	 
>1727	ExpressionStatement	 
>1728	AssignmentExpr	conditioned = true
>1729	Identifier	true
>1730	Identifier	conditioned
>1731	Condition	 
>1732	RelationalExpression	RAD2DEG ( angle ) >= m_ray_angle_threshold
>1733	Identifier	m_ray_angle_threshold
>1734	CallExpression	RAD2DEG ( angle )
>1735	ArgumentList	angle
>1736	Argument	angle
>1737	Identifier	angle
>1738	Callee	RAD2DEG
>1739	Identifier	RAD2DEG
>1740	IfStatement	if ( angle > max_angle )
>1741	ExpressionStatement	 
>1742	AssignmentExpr	max_angle = angle
>1743	Identifier	angle
>1744	Identifier	max_angle
>1745	Condition	 
>1746	RelationalExpression	angle > max_angle
>1747	Identifier	max_angle
>1748	Identifier	angle
>1749	IdentifierDeclStatement	 
>1750	IdentifierDecl	angle = ComputeRayAngle ( p , q , cameras [ camera_idx1 ] , cameras [ camera_idx2 ] )
>1751	AssignmentExpr	angle = ComputeRayAngle ( p , q , cameras [ camera_idx1 ] , cameras [ camera_idx2 ] )
>1752	CallExpression	ComputeRayAngle ( p , q , cameras [ camera_idx1 ] , cameras [ camera_idx2 ] )
>1753	ArgumentList	p
>1754	Argument	cameras [ camera_idx2 ]
>1755	ArrayIndexing	cameras [ camera_idx2 ]
>1756	Identifier	camera_idx2
>1757	Identifier	cameras
>1758	Argument	cameras [ camera_idx1 ]
>1759	ArrayIndexing	cameras [ camera_idx1 ]
>1760	Identifier	camera_idx1
>1761	Identifier	cameras
>1762	Argument	q
>1763	Identifier	q
>1764	Argument	p
>1765	Identifier	p
>1766	Callee	ComputeRayAngle
>1767	Identifier	ComputeRayAngle
>1768	Identifier	angle
>1769	Identifier	angle
>1770	IdentifierDeclType	double
>1771	IfStatement	if ( m_optimize_for_fisheye )
>1772	CompoundStatement	 
>1773	ExpressionStatement	 
>1774	CallExpression	m_image_data [ image_idx2 ] . UndistortPoint ( q_x , q_y , Vx ( q ) , Vy ( q ) )
>1775	ArgumentList	q_x
>1776	Argument	Vy ( q )
>1777	CallExpression	Vy ( q )
>1778	ArgumentList	q
>1779	Argument	q
>1780	Identifier	q
>1781	Callee	Vy
>1782	Identifier	Vy
>1783	Argument	Vx ( q )
>1784	CallExpression	Vx ( q )
>1785	ArgumentList	q
>1786	Argument	q
>1787	Identifier	q
>1788	Callee	Vx
>1789	Identifier	Vx
>1790	Argument	q_y
>1791	Identifier	q_y
>1792	Argument	q_x
>1793	Identifier	q_x
>1794	Callee	m_image_data [ image_idx2 ] . UndistortPoint
>1795	MemberAccess	m_image_data [ image_idx2 ] . UndistortPoint
>1796	Identifier	UndistortPoint
>1797	ArrayIndexing	m_image_data [ image_idx2 ]
>1798	Identifier	image_idx2
>1799	Identifier	m_image_data
>1800	ExpressionStatement	 
>1801	CallExpression	m_image_data [ image_idx1 ] . UndistortPoint ( p_x , p_y , Vx ( p ) , Vy ( p ) )
>1802	ArgumentList	p_x
>1803	Argument	Vy ( p )
>1804	CallExpression	Vy ( p )
>1805	ArgumentList	p
>1806	Argument	p
>1807	Identifier	p
>1808	Callee	Vy
>1809	Identifier	Vy
>1810	Argument	Vx ( p )
>1811	CallExpression	Vx ( p )
>1812	ArgumentList	p
>1813	Argument	p
>1814	Identifier	p
>1815	Callee	Vx
>1816	Identifier	Vx
>1817	Argument	p_y
>1818	Identifier	p_y
>1819	Argument	p_x
>1820	Identifier	p_x
>1821	Callee	m_image_data [ image_idx1 ] . UndistortPoint
>1822	MemberAccess	m_image_data [ image_idx1 ] . UndistortPoint
>1823	Identifier	UndistortPoint
>1824	ArrayIndexing	m_image_data [ image_idx1 ]
>1825	Identifier	image_idx1
>1826	Identifier	m_image_data
>1827	IdentifierDeclStatement	 
>1828	IdentifierDecl	q_y = Vy ( q )
>1829	AssignmentExpr	q_y = Vy ( q )
>1830	CallExpression	Vy ( q )
>1831	ArgumentList	q
>1832	Argument	q
>1833	Identifier	q
>1834	Callee	Vy
>1835	Identifier	Vy
>1836	Identifier	q_y
>1837	Identifier	q_y
>1838	IdentifierDeclType	double
>1839	IdentifierDecl	q_x = Vx ( q )
>1840	AssignmentExpr	q_x = Vx ( q )
>1841	CallExpression	Vx ( q )
>1842	ArgumentList	q
>1843	Argument	q
>1844	Identifier	q
>1845	Callee	Vx
>1846	Identifier	Vx
>1847	Identifier	q_x
>1848	Identifier	q_x
>1849	IdentifierDeclType	double
>1850	IdentifierDeclStatement	 
>1851	IdentifierDecl	p_y = Vy ( p )
>1852	AssignmentExpr	p_y = Vy ( p )
>1853	CallExpression	Vy ( p )
>1854	ArgumentList	p
>1855	Argument	p
>1856	Identifier	p
>1857	Callee	Vy
>1858	Identifier	Vy
>1859	Identifier	p_y
>1860	Identifier	p_y
>1861	IdentifierDeclType	double
>1862	IdentifierDecl	p_x = Vx ( p )
>1863	AssignmentExpr	p_x = Vx ( p )
>1864	CallExpression	Vx ( p )
>1865	ArgumentList	p
>1866	Argument	p
>1867	Identifier	p
>1868	Callee	Vx
>1869	Identifier	Vx
>1870	Identifier	p_x
>1871	Identifier	p_x
>1872	IdentifierDeclType	double
>1873	Condition	 
>1874	Identifier	m_optimize_for_fisheye
>1875	IdentifierDeclStatement	 
>1876	IdentifierDecl	q = v2_new ( key2 . m_x , key2 . m_y )
>1877	AssignmentExpr	q = v2_new ( key2 . m_x , key2 . m_y )
>1878	CallExpression	v2_new ( key2 . m_x , key2 . m_y )
>1879	ArgumentList	key2 . m_x
>1880	Argument	key2 . m_y
>1881	MemberAccess	key2 . m_y
>1882	Identifier	m_y
>1883	Identifier	key2
>1884	Argument	key2 . m_x
>1885	MemberAccess	key2 . m_x
>1886	Identifier	m_x
>1887	Identifier	key2
>1888	Callee	v2_new
>1889	Identifier	v2_new
>1890	Identifier	q
>1891	Identifier	q
>1892	IdentifierDeclType	v2_t
>1893	IdentifierDeclStatement	 
>1894	IdentifierDecl	p = v2_new ( key1 . m_x , key1 . m_y )
>1895	AssignmentExpr	p = v2_new ( key1 . m_x , key1 . m_y )
>1896	CallExpression	v2_new ( key1 . m_x , key1 . m_y )
>1897	ArgumentList	key1 . m_x
>1898	Argument	key1 . m_y
>1899	MemberAccess	key1 . m_y
>1900	Identifier	m_y
>1901	Identifier	key1
>1902	Argument	key1 . m_x
>1903	MemberAccess	key1 . m_x
>1904	Identifier	m_x
>1905	Identifier	key1
>1906	Callee	v2_new
>1907	Identifier	v2_new
>1908	Identifier	p
>1909	Identifier	p
>1910	IdentifierDeclType	v2_t
>1911	IdentifierDeclStatement	 
>1912	IdentifierDecl	& key2 = GetKey ( image_idx2 , key_idx2 )
>1913	AssignmentExpr	& key2 = GetKey ( image_idx2 , key_idx2 )
>1914	CallExpression	GetKey ( image_idx2 , key_idx2 )
>1915	ArgumentList	image_idx2
>1916	Argument	key_idx2
>1917	Identifier	key_idx2
>1918	Argument	image_idx2
>1919	Identifier	image_idx2
>1920	Callee	GetKey
>1921	Identifier	GetKey
>1922	Identifier	key2
>1923	Identifier	key2
>1924	IdentifierDeclType	Keypoint &
>1925	IdentifierDeclStatement	 
>1926	IdentifierDecl	& key1 = GetKey ( image_idx1 , key_idx1 )
>1927	AssignmentExpr	& key1 = GetKey ( image_idx1 , key_idx1 )
>1928	CallExpression	GetKey ( image_idx1 , key_idx1 )
>1929	ArgumentList	image_idx1
>1930	Argument	key_idx1
>1931	Identifier	key_idx1
>1932	Argument	image_idx1
>1933	Identifier	image_idx1
>1934	Callee	GetKey
>1935	Identifier	GetKey
>1936	Identifier	key1
>1937	Identifier	key1
>1938	IdentifierDeclType	Keypoint &
>1939	IdentifierDeclStatement	 
>1940	IdentifierDecl	key_idx2 = new_tracks [ i ] [ k ] . second
>1941	AssignmentExpr	key_idx2 = new_tracks [ i ] [ k ] . second
>1942	MemberAccess	new_tracks [ i ] [ k ] . second
>1943	Identifier	second
>1944	ArrayIndexing	new_tracks [ i ] [ k ]
>1945	Identifier	k
>1946	ArrayIndexing	new_tracks [ i ]
>1947	Identifier	i
>1948	Identifier	new_tracks
>1949	Identifier	key_idx2
>1950	Identifier	key_idx2
>1951	IdentifierDeclType	int
>1952	IdentifierDeclStatement	 
>1953	IdentifierDecl	image_idx2 = added_order [ camera_idx2 ]
>1954	AssignmentExpr	image_idx2 = added_order [ camera_idx2 ]
>1955	ArrayIndexing	added_order [ camera_idx2 ]
>1956	Identifier	camera_idx2
>1957	Identifier	added_order
>1958	Identifier	image_idx2
>1959	Identifier	image_idx2
>1960	IdentifierDeclType	int
>1961	IdentifierDeclStatement	 
>1962	IdentifierDecl	camera_idx2 = new_tracks [ i ] [ k ] . first
>1963	AssignmentExpr	camera_idx2 = new_tracks [ i ] [ k ] . first
>1964	MemberAccess	new_tracks [ i ] [ k ] . first
>1965	Identifier	first
>1966	ArrayIndexing	new_tracks [ i ] [ k ]
>1967	Identifier	k
>1968	ArrayIndexing	new_tracks [ i ]
>1969	Identifier	i
>1970	Identifier	new_tracks
>1971	Identifier	camera_idx2
>1972	Identifier	camera_idx2
>1973	IdentifierDeclType	int
>1974	IdentifierDeclStatement	 
>1975	IdentifierDecl	key_idx1 = new_tracks [ i ] [ j ] . second
>1976	AssignmentExpr	key_idx1 = new_tracks [ i ] [ j ] . second
>1977	MemberAccess	new_tracks [ i ] [ j ] . second
>1978	Identifier	second
>1979	ArrayIndexing	new_tracks [ i ] [ j ]
>1980	Identifier	j
>1981	ArrayIndexing	new_tracks [ i ]
>1982	Identifier	i
>1983	Identifier	new_tracks
>1984	Identifier	key_idx1
>1985	Identifier	key_idx1
>1986	IdentifierDeclType	int
>1987	IdentifierDeclStatement	 
>1988	IdentifierDecl	image_idx1 = added_order [ camera_idx1 ]
>1989	AssignmentExpr	image_idx1 = added_order [ camera_idx1 ]
>1990	ArrayIndexing	added_order [ camera_idx1 ]
>1991	Identifier	camera_idx1
>1992	Identifier	added_order
>1993	Identifier	image_idx1
>1994	Identifier	image_idx1
>1995	IdentifierDeclType	int
>1996	IdentifierDeclStatement	 
>1997	IdentifierDecl	camera_idx1 = new_tracks [ i ] [ j ] . first
>1998	AssignmentExpr	camera_idx1 = new_tracks [ i ] [ j ] . first
>1999	MemberAccess	new_tracks [ i ] [ j ] . first
>2000	Identifier	first
>2001	ArrayIndexing	new_tracks [ i ] [ j ]
>2002	Identifier	j
>2003	ArrayIndexing	new_tracks [ i ]
>2004	Identifier	i
>2005	Identifier	new_tracks
>2006	Identifier	camera_idx1
>2007	Identifier	camera_idx1
>2008	IdentifierDeclType	int
>2009	IncDecOp	 
>2010	IncDec	++
>2011	Identifier	k
>2012	Condition	 
>2013	RelationalExpression	k < num_views
>2014	Identifier	num_views
>2015	Identifier	k
>2016	ForInit	 
>2017	IdentifierDeclStatement	int k = j + 1 ;
>2018	IdentifierDecl	k = j + 1
>2019	AssignmentExpr	k = j + 1
>2020	AdditiveExpression	j + 1
>2021	PrimaryExpression	1
>2022	Identifier	j
>2023	Identifier	k
>2024	Identifier	k
>2025	IdentifierDeclType	int
>2026	IncDecOp	 
>2027	IncDec	++
>2028	Identifier	j
>2029	Condition	 
>2030	RelationalExpression	j < num_views
>2031	Identifier	num_views
>2032	Identifier	j
>2033	ForInit	 
>2034	IdentifierDeclStatement	int j = 0 ;
>2035	IdentifierDecl	j = 0
>2036	AssignmentExpr	j = 0
>2037	PrimaryExpression	0
>2038	Identifier	j
>2039	Identifier	j
>2040	IdentifierDeclType	int
>2041	IdentifierDeclStatement	 
>2042	IdentifierDecl	max_angle = 0.0
>2043	AssignmentExpr	max_angle = 0.0
>2044	PrimaryExpression	0.0
>2045	Identifier	max_angle
>2046	Identifier	max_angle
>2047	IdentifierDeclType	double
>2048	IdentifierDeclStatement	 
>2049	IdentifierDecl	good_distance = false
>2050	AssignmentExpr	good_distance = false
>2051	Identifier	false
>2052	Identifier	false
>2053	Identifier	good_distance
>2054	IdentifierDeclType	bool
>2055	IdentifierDeclStatement	 
>2056	IdentifierDecl	conditioned = false
>2057	AssignmentExpr	conditioned = false
>2058	Identifier	false
>2059	Identifier	false
>2060	Identifier	conditioned
>2061	IdentifierDeclType	bool
>2062	ExpressionStatement	 
>2063	CallExpression	printf ( \"\n\" )
>2064	ArgumentList	\"\n\"
>2065	Argument	\"\n\"
>2066	PrimaryExpression	\"\n\"
>2067	Callee	printf
>2068	Identifier	printf
>2069	ExpressionStatement	 
>2070	CallExpression	PrintTrack ( new_tracks [ i ] )
>2071	ArgumentList	new_tracks [ i ]
>2072	Argument	new_tracks [ i ]
>2073	ArrayIndexing	new_tracks [ i ]
>2074	Identifier	i
>2075	Identifier	new_tracks
>2076	Callee	PrintTrack
>2077	Identifier	PrintTrack
>2078	ExpressionStatement	 
>2079	CallExpression	printf ( \"Triangulating track \" )
>2080	ArgumentList	\"Triangulating track \"
>2081	Argument	\"Triangulating track \"
>2082	PrimaryExpression	\"Triangulating track \"
>2083	Callee	printf
>2084	Identifier	printf
>2085	IfStatement	if ( num_views < min_views )
>2086	ContinueStatement	 
>2087	Condition	 
>2088	RelationalExpression	num_views < min_views
>2089	Identifier	min_views
>2090	Identifier	num_views
>2091	IdentifierDeclStatement	 
>2092	IdentifierDecl	num_views = ( int ) new_tracks [ i ] . size ( )
>2093	AssignmentExpr	num_views = ( int ) new_tracks [ i ] . size ( )
>2094	CastExpression	( int ) new_tracks [ i ] . size ( )
>2095	CallExpression	new_tracks [ i ] . size ( )
>2096	ArgumentList	 
>2097	Callee	new_tracks [ i ] . size
>2098	MemberAccess	new_tracks [ i ] . size
>2099	Identifier	size
>2100	ArrayIndexing	new_tracks [ i ]
>2101	Identifier	i
>2102	Identifier	new_tracks
>2103	CastTarget	int
>2104	Identifier	num_views
>2105	Identifier	num_views
>2106	IdentifierDeclType	int
>2107	IncDecOp	 
>2108	IncDec	++
>2109	Identifier	i
>2110	Condition	 
>2111	RelationalExpression	i < num_tracks
>2112	Identifier	num_tracks
>2113	Identifier	i
>2114	ForInit	 
>2115	IdentifierDeclStatement	int i = 0 ;
>2116	IdentifierDecl	i = 0
>2117	AssignmentExpr	i = 0
>2118	PrimaryExpression	0
>2119	Identifier	i
>2120	Identifier	i
>2121	IdentifierDeclType	int
>2122	IdentifierDeclStatement	 
>2123	IdentifierDecl	num_tracks = ( int ) new_tracks . size ( )
>2124	AssignmentExpr	num_tracks = ( int ) new_tracks . size ( )
>2125	CastExpression	( int ) new_tracks . size ( )
>2126	CallExpression	new_tracks . size ( )
>2127	ArgumentList	 
>2128	Callee	new_tracks . size
>2129	MemberAccess	new_tracks . size
>2130	Identifier	size
>2131	Identifier	new_tracks
>2132	CastTarget	int
>2133	Identifier	num_tracks
>2134	Identifier	num_tracks
>2135	IdentifierDeclType	int
>2136	IdentifierDeclStatement	 
>2137	IdentifierDecl	num_added = 0
>2138	AssignmentExpr	num_added = 0
>2139	PrimaryExpression	0
>2140	Identifier	num_added
>2141	Identifier	num_added
>2142	IdentifierDeclType	int
>2143	IdentifierDeclStatement	 
>2144	IdentifierDecl	num_cheirality_failed = 0
>2145	AssignmentExpr	num_cheirality_failed = 0
>2146	PrimaryExpression	0
>2147	Identifier	num_cheirality_failed
>2148	Identifier	num_cheirality_failed
>2149	IdentifierDeclType	int
>2150	IdentifierDeclStatement	 
>2151	IdentifierDecl	num_high_reprojection = 0
>2152	AssignmentExpr	num_high_reprojection = 0
>2153	PrimaryExpression	0
>2154	Identifier	num_high_reprojection
>2155	Identifier	num_high_reprojection
>2156	IdentifierDeclType	int
>2157	IdentifierDeclStatement	 
>2158	IdentifierDecl	num_ill_conditioned = 0
>2159	AssignmentExpr	num_ill_conditioned = 0
>2160	PrimaryExpression	0
>2161	Identifier	num_ill_conditioned
>2162	Identifier	num_ill_conditioned
>2163	IdentifierDeclType	int
>2164	IdentifierDeclStatement	 
>2165	IdentifierDecl	pt_count = num_points
>2166	AssignmentExpr	pt_count = num_points
>2167	Identifier	num_points
>2168	Identifier	num_points
>2169	Identifier	pt_count
>2170	IdentifierDeclType	int
>2171	ExpressionStatement	 
>2172	Identifier	tracks_seen
>2173	Statement	 
>2174	Statement	 
>2175	Statement	 
>2176	ForStatement	for ( int i = 0 ; i < num_cameras ; i ++ )
>2177	CompoundStatement	 
>2178	ForStatement	for ( int j = 0 ; j < num_keys ; j ++ )
>2179	CompoundStatement	 
>2180	IfStatement	if ( seen == - 1 )
>2181	ElseStatement	else
>2182	CompoundStatement	 
>2183	ExpressionStatement	 
>2184	CallExpression	new_tracks [ seen ] . push_back ( ImageKey ( i , j ) )
>2185	ArgumentList	ImageKey ( i , j )
>2186	Argument	ImageKey ( i , j )
>2187	CallExpression	ImageKey ( i , j )
>2188	ArgumentList	i
>2189	Argument	j
>2190	Identifier	j
>2191	Argument	i
>2192	Identifier	i
>2193	Callee	ImageKey
>2194	Identifier	ImageKey
>2195	Callee	new_tracks [ seen ] . push_back
>2196	MemberAccess	new_tracks [ seen ] . push_back
>2197	Identifier	push_back
>2198	ArrayIndexing	new_tracks [ seen ]
>2199	Identifier	seen
>2200	Identifier	new_tracks
>2201	CompoundStatement	 
>2202	ExpressionStatement	 
>2203	CallExpression	track_idxs . push_back ( track_idx )
>2204	ArgumentList	track_idx
>2205	Argument	track_idx
>2206	Identifier	track_idx
>2207	Callee	track_idxs . push_back
>2208	MemberAccess	track_idxs . push_back
>2209	Identifier	push_back
>2210	Identifier	track_idxs
>2211	ExpressionStatement	 
>2212	CallExpression	new_tracks . push_back ( track )
>2213	ArgumentList	track
>2214	Argument	track
>2215	Identifier	track
>2216	Callee	new_tracks . push_back
>2217	MemberAccess	new_tracks . push_back
>2218	Identifier	push_back
>2219	Identifier	new_tracks
>2220	ExpressionStatement	 
>2221	CallExpression	track . push_back ( ImageKey ( i , j ) )
>2222	ArgumentList	ImageKey ( i , j )
>2223	Argument	ImageKey ( i , j )
>2224	CallExpression	ImageKey ( i , j )
>2225	ArgumentList	i
>2226	Argument	j
>2227	Identifier	j
>2228	Argument	i
>2229	Identifier	i
>2230	Callee	ImageKey
>2231	Identifier	ImageKey
>2232	Callee	track . push_back
>2233	MemberAccess	track . push_back
>2234	Identifier	push_back
>2235	Identifier	track
>2236	IdentifierDeclStatement	 
>2237	IdentifierDecl	track
>2238	Identifier	track
>2239	IdentifierDeclType	ImageKeyVector
>2240	ExpressionStatement	 
>2241	AssignmentExpr	tracks_seen [ track_idx ] = ( int ) new_tracks . size ( )
>2242	CastExpression	( int ) new_tracks . size ( )
>2243	CallExpression	new_tracks . size ( )
>2244	ArgumentList	 
>2245	Callee	new_tracks . size
>2246	MemberAccess	new_tracks . size
>2247	Identifier	size
>2248	Identifier	new_tracks
>2249	CastTarget	int
>2250	ArrayIndexing	tracks_seen [ track_idx ]
>2251	Identifier	track_idx
>2252	Identifier	tracks_seen
>2253	Condition	 
>2254	EqualityExpression	seen == - 1
>2255	UnaryOp	- 1
>2256	PrimaryExpression	1
>2257	UnaryOperator	-
>2258	Identifier	seen
>2259	IdentifierDeclStatement	 
>2260	IdentifierDecl	seen = tracks_seen [ track_idx ]
>2261	AssignmentExpr	seen = tracks_seen [ track_idx ]
>2262	ArrayIndexing	tracks_seen [ track_idx ]
>2263	Identifier	track_idx
>2264	Identifier	tracks_seen
>2265	Identifier	seen
>2266	Identifier	seen
>2267	IdentifierDeclType	int
>2268	IfStatement	if ( m_track_data [ track_idx ] . m_extra != - 1 )
>2269	ContinueStatement	 
>2270	Condition	 
>2271	EqualityExpression	m_track_data [ track_idx ] . m_extra != - 1
>2272	UnaryOp	- 1
>2273	PrimaryExpression	1
>2274	UnaryOperator	-
>2275	MemberAccess	m_track_data [ track_idx ] . m_extra
>2276	Identifier	m_extra
>2277	ArrayIndexing	m_track_data [ track_idx ]
>2278	Identifier	track_idx
>2279	Identifier	m_track_data
>2280	IdentifierDeclStatement	 
>2281	IdentifierDecl	track_idx = key . m_track
>2282	AssignmentExpr	track_idx = key . m_track
>2283	MemberAccess	key . m_track
>2284	Identifier	m_track
>2285	Identifier	key
>2286	Identifier	track_idx
>2287	Identifier	track_idx
>2288	IdentifierDeclType	int
>2289	IfStatement	if ( key . m_extra != - 1 )
>2290	ContinueStatement	 
>2291	Condition	 
>2292	EqualityExpression	key . m_extra != - 1
>2293	UnaryOp	- 1
>2294	PrimaryExpression	1
>2295	UnaryOperator	-
>2296	MemberAccess	key . m_extra
>2297	Identifier	m_extra
>2298	Identifier	key
>2299	IfStatement	if ( key . m_track == - 1 )
>2300	ContinueStatement	 
>2301	Condition	 
>2302	EqualityExpression	key . m_track == - 1
>2303	UnaryOp	- 1
>2304	PrimaryExpression	1
>2305	UnaryOperator	-
>2306	MemberAccess	key . m_track
>2307	Identifier	m_track
>2308	Identifier	key
>2309	IdentifierDeclStatement	 
>2310	IdentifierDecl	& key = GetKey ( image_idx1 , j )
>2311	AssignmentExpr	& key = GetKey ( image_idx1 , j )
>2312	CallExpression	GetKey ( image_idx1 , j )
>2313	ArgumentList	image_idx1
>2314	Argument	j
>2315	Identifier	j
>2316	Argument	image_idx1
>2317	Identifier	image_idx1
>2318	Callee	GetKey
>2319	Identifier	GetKey
>2320	Identifier	key
>2321	Identifier	key
>2322	IdentifierDeclType	Keypoint &
>2323	IncDecOp	 
>2324	IncDec	++
>2325	Identifier	j
>2326	Condition	 
>2327	RelationalExpression	j < num_keys
>2328	Identifier	num_keys
>2329	Identifier	j
>2330	ForInit	 
>2331	IdentifierDeclStatement	int j = 0 ;
>2332	IdentifierDecl	j = 0
>2333	AssignmentExpr	j = 0
>2334	PrimaryExpression	0
>2335	Identifier	j
>2336	Identifier	j
>2337	IdentifierDeclType	int
>2338	IdentifierDeclStatement	 
>2339	IdentifierDecl	num_keys = GetNumKeys ( image_idx1 )
>2340	AssignmentExpr	num_keys = GetNumKeys ( image_idx1 )
>2341	CallExpression	GetNumKeys ( image_idx1 )
>2342	ArgumentList	image_idx1
>2343	Argument	image_idx1
>2344	Identifier	image_idx1
>2345	Callee	GetNumKeys
>2346	Identifier	GetNumKeys
>2347	Identifier	num_keys
>2348	Identifier	num_keys
>2349	IdentifierDeclType	int
>2350	IdentifierDeclStatement	 
>2351	IdentifierDecl	image_idx1 = added_order [ i ]
>2352	AssignmentExpr	image_idx1 = added_order [ i ]
>2353	ArrayIndexing	added_order [ i ]
>2354	Identifier	i
>2355	Identifier	added_order
>2356	Identifier	image_idx1
>2357	Identifier	image_idx1
>2358	IdentifierDeclType	int
>2359	IncDecOp	 
>2360	IncDec	++
>2361	Identifier	i
>2362	Condition	 
>2363	RelationalExpression	i < num_cameras
>2364	Identifier	num_cameras
>2365	Identifier	i
>2366	ForInit	 
>2367	IdentifierDeclStatement	int i = 0 ;
>2368	IdentifierDecl	i = 0
>2369	AssignmentExpr	i = 0
>2370	PrimaryExpression	0
>2371	Identifier	i
>2372	Identifier	i
>2373	IdentifierDeclType	int
>2374	ForStatement	for ( int i = 0 ; i < num_tracks_total ; i ++ )
>2375	CompoundStatement	 
>2376	ExpressionStatement	 
>2377	AssignmentExpr	tracks_seen [ i ] = - 1
>2378	UnaryOp	- 1
>2379	PrimaryExpression	1
>2380	UnaryOperator	-
>2381	ArrayIndexing	tracks_seen [ i ]
>2382	Identifier	i
>2383	Identifier	tracks_seen
>2384	IncDecOp	 
>2385	IncDec	++
>2386	Identifier	i
>2387	Condition	 
>2388	RelationalExpression	i < num_tracks_total
>2389	Identifier	num_tracks_total
>2390	Identifier	i
>2391	ForInit	 
>2392	IdentifierDeclStatement	int i = 0 ;
>2393	IdentifierDecl	i = 0
>2394	AssignmentExpr	i = 0
>2395	PrimaryExpression	0
>2396	Identifier	i
>2397	Identifier	i
>2398	IdentifierDeclType	int
>2399	IdentifierDeclStatement	 
>2400	IdentifierDecl	* tracks_seen = new int [ num_tracks_total ]
>2401	AssignmentExpr	* tracks_seen = new int [ num_tracks_total ]
>2402	Identifier	num_tracks_total
>2403	Identifier	num_tracks_total
>2404	Identifier	tracks_seen
>2405	IdentifierDeclType	int *
>2406	IdentifierDeclStatement	 
>2407	IdentifierDecl	num_tracks_total = ( int ) m_track_data . size ( )
>2408	AssignmentExpr	num_tracks_total = ( int ) m_track_data . size ( )
>2409	CastExpression	( int ) m_track_data . size ( )
>2410	CallExpression	m_track_data . size ( )
>2411	ArgumentList	 
>2412	Callee	m_track_data . size
>2413	MemberAccess	m_track_data . size
>2414	Identifier	size
>2415	Identifier	m_track_data
>2416	CastTarget	int
>2417	Identifier	num_tracks_total
>2418	Identifier	num_tracks_total
>2419	IdentifierDeclType	int
>2420	IdentifierDeclStatement	 
>2421	IdentifierDecl	new_tracks
>2422	Identifier	new_tracks
>2423	IdentifierDeclType	std 
>2424	IdentifierDeclStatement	 
>2425	IdentifierDecl	track_idxs
>2426	Identifier	track_idxs
>2427	IdentifierDeclType	std 
>2555	FunctionDef	Triangulate (v2_t p , v2_t q , camera_params_t c1 , camera_params_t c2 , double & proj_error , bool & in_front , \
>2556	ParameterList	v2_t p , v2_t q , camera_params_t c1 , camera_params_t c2 , double & proj_error , bool & in_front , double & angle , \
>2557	Parameter	 
>2558	Identifier	explicit_camera_centers
>2559	ParameterType	bool
>2560	Parameter	 
>2561	Identifier	angle
>2562	ParameterType	double &
>2563	Parameter	 
>2564	Identifier	in_front
>2565	ParameterType	bool &
>2566	Parameter	 
>2567	Identifier	proj_error
>2568	ParameterType	double &
>2569	Parameter	 
>2570	Identifier	c2
>2571	ParameterType	camera_params_t
>2572	Parameter	 
>2573	Identifier	c1
>2574	ParameterType	camera_params_t
>2575	Parameter	 
>2576	Identifier	q
>2577	ParameterType	v2_t
>2578	Parameter	 
>2579	Identifier	p
>2580	ParameterType	v2_t
>2581	ReturnType	v3_t
>2582	CompoundStatement	 
>2583	ReturnStatement	 
>2584	Identifier	pt
>2585	ExpressionStatement	 
>2586	AssignmentExpr	in_front = ( cc1 && cc2 )
>2587	AndExpression	cc1 && cc2
>2588	Identifier	cc2
>2589	Identifier	cc1
>2590	Identifier	in_front
>2591	IdentifierDeclStatement	 
>2592	IdentifierDecl	cc2 = CheckCheirality ( pt , c2 )
>2593	AssignmentExpr	cc2 = CheckCheirality ( pt , c2 )
>2594	CallExpression	CheckCheirality ( pt , c2 )
>2595	ArgumentList	pt
>2596	Argument	c2
>2597	Identifier	c2
>2598	Argument	pt
>2599	Identifier	pt
>2600	Callee	CheckCheirality
>2601	Identifier	CheckCheirality
>2602	Identifier	cc2
>2603	Identifier	cc2
>2604	IdentifierDeclType	bool
>2605	IdentifierDeclStatement	 
>2606	IdentifierDecl	cc1 = CheckCheirality ( pt , c1 )
>2607	AssignmentExpr	cc1 = CheckCheirality ( pt , c1 )
>2608	CallExpression	CheckCheirality ( pt , c1 )
>2609	ArgumentList	pt
>2610	Argument	c1
>2611	Identifier	c1
>2612	Argument	pt
>2613	Identifier	pt
>2614	Callee	CheckCheirality
>2615	Identifier	CheckCheirality
>2616	Identifier	cc1
>2617	Identifier	cc1
>2618	IdentifierDeclType	bool
>2619	ExpressionStatement	 
>2620	AssignmentExpr	proj_error = ( c1 . f + c2 . f ) * 0.5 * sqrt ( proj_error * 0.5 )
>2621	MultiplicativeExpression	( c1 . f + c2 . f ) * 0.5 * sqrt ( proj_error * 0.5 )
>2622	MultiplicativeExpression	0.5 * sqrt ( proj_error * 0.5 )
>2623	CallExpression	sqrt ( proj_error * 0.5 )
>2624	ArgumentList	proj_error * 0.5
>2625	Argument	proj_error * 0.5
>2626	MultiplicativeExpression	proj_error * 0.5
>2627	PrimaryExpression	0.5
>2628	Identifier	proj_error
>2629	Callee	sqrt
>2630	Identifier	sqrt
>2631	PrimaryExpression	0.5
>2632	AdditiveExpression	c1 . f + c2 . f
>2633	MemberAccess	c2 . f
>2634	Identifier	f
>2635	Identifier	c2
>2636	MemberAccess	c1 . f
>2637	Identifier	f
>2638	Identifier	c1
>2639	Identifier	proj_error
>2640	IfStatement	if ( ! explicit_camera_centers )
>2641	ElseStatement	else
>2642	CompoundStatement	 
>2643	ExpressionStatement	 
>2644	AssignmentExpr	pt = triangulate ( p_norm , q_norm , c1 . R , t1 , c2 . R , t2 , & proj_error )
>2645	CallExpression	triangulate ( p_norm , q_norm , c1 . R , t1 , c2 . R , t2 , & proj_error )
>2646	ArgumentList	p_norm
>2647	Argument	& proj_error
>2648	UnaryOp	& proj_error
>2649	Identifier	proj_error
>2650	UnaryOperator	&
>2651	Argument	t2
>2652	Identifier	t2
>2653	Argument	c2 . R
>2654	MemberAccess	c2 . R
>2655	Identifier	R
>2656	Identifier	c2
>2657	Argument	t1
>2658	Identifier	t1
>2659	Argument	c1 . R
>2660	MemberAccess	c1 . R
>2661	Identifier	R
>2662	Identifier	c1
>2663	Argument	q_norm
>2664	Identifier	q_norm
>2665	Argument	p_norm
>2666	Identifier	p_norm
>2667	Callee	triangulate
>2668	Identifier	triangulate
>2669	Identifier	pt
>2670	ExpressionStatement	 
>2671	CallExpression	matrix_scale ( 3 , 1 , t2 , - 1.0 , t2 )
>2672	ArgumentList	3
>2673	Argument	t2
>2674	Identifier	t2
>2675	Argument	- 1.0
>2676	UnaryOp	- 1.0
>2677	PrimaryExpression	1.0
>2678	UnaryOperator	-
>2679	Argument	t2
>2680	Identifier	t2
>2681	Argument	1
>2682	PrimaryExpression	1
>2683	Argument	3
>2684	PrimaryExpression	3
>2685	Callee	matrix_scale
>2686	Identifier	matrix_scale
>2687	ExpressionStatement	 
>2688	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , c2 . R , c2 . t , t2 )
>2689	ArgumentList	3
>2690	Argument	t2
>2691	Identifier	t2
>2692	Argument	c2 . t
>2693	MemberAccess	c2 . t
>2694	Identifier	t
>2695	Identifier	c2
>2696	Argument	c2 . R
>2697	MemberAccess	c2 . R
>2698	Identifier	R
>2699	Identifier	c2
>2700	Argument	1
>2701	PrimaryExpression	1
>2702	Argument	3
>2703	PrimaryExpression	3
>2704	Argument	3
>2705	PrimaryExpression	3
>2706	Argument	3
>2707	PrimaryExpression	3
>2708	Callee	matrix_product
>2709	Identifier	matrix_product
>2710	ExpressionStatement	 
>2711	CallExpression	matrix_scale ( 3 , 1 , t1 , - 1.0 , t1 )
>2712	ArgumentList	3
>2713	Argument	t1
>2714	Identifier	t1
>2715	Argument	- 1.0
>2716	UnaryOp	- 1.0
>2717	PrimaryExpression	1.0
>2718	UnaryOperator	-
>2719	Argument	t1
>2720	Identifier	t1
>2721	Argument	1
>2722	PrimaryExpression	1
>2723	Argument	3
>2724	PrimaryExpression	3
>2725	Callee	matrix_scale
>2726	Identifier	matrix_scale
>2727	ExpressionStatement	 
>2728	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , c1 . R , c1 . t , t1 )
>2729	ArgumentList	3
>2730	Argument	t1
>2731	Identifier	t1
>2732	Argument	c1 . t
>2733	MemberAccess	c1 . t
>2734	Identifier	t
>2735	Identifier	c1
>2736	Argument	c1 . R
>2737	MemberAccess	c1 . R
>2738	Identifier	R
>2739	Identifier	c1
>2740	Argument	1
>2741	PrimaryExpression	1
>2742	Argument	3
>2743	PrimaryExpression	3
>2744	Argument	3
>2745	PrimaryExpression	3
>2746	Argument	3
>2747	PrimaryExpression	3
>2748	Callee	matrix_product
>2749	Identifier	matrix_product
>2750	IdentifierDeclStatement	 
>2751	IdentifierDecl	t2 [ 3 ]
>2752	PrimaryExpression	3
>2753	Identifier	t2
>2754	IdentifierDeclType	double [ 3 ]
>2755	IdentifierDeclStatement	 
>2756	IdentifierDecl	t1 [ 3 ]
>2757	PrimaryExpression	3
>2758	Identifier	t1
>2759	IdentifierDeclType	double [ 3 ]
>2760	CompoundStatement	 
>2761	ExpressionStatement	 
>2762	AssignmentExpr	pt = triangulate ( p_norm , q_norm , c1 . R , c1 . t , c2 . R , c2 . t , & proj_error )
>2763	CallExpression	triangulate ( p_norm , q_norm , c1 . R , c1 . t , c2 . R , c2 . t , & proj_error )
>2764	ArgumentList	p_norm
>2765	Argument	& proj_error
>2766	UnaryOp	& proj_error
>2767	Identifier	proj_error
>2768	UnaryOperator	&
>2769	Argument	c2 . t
>2770	MemberAccess	c2 . t
>2771	Identifier	t
>2772	Identifier	c2
>2773	Argument	c2 . R
>2774	MemberAccess	c2 . R
>2775	Identifier	R
>2776	Identifier	c2
>2777	Argument	c1 . t
>2778	MemberAccess	c1 . t
>2779	Identifier	t
>2780	Identifier	c1
>2781	Argument	c1 . R
>2782	MemberAccess	c1 . R
>2783	Identifier	R
>2784	Identifier	c1
>2785	Argument	q_norm
>2786	Identifier	q_norm
>2787	Argument	p_norm
>2788	Identifier	p_norm
>2789	Callee	triangulate
>2790	Identifier	triangulate
>2791	Identifier	pt
>2792	Condition	 
>2793	UnaryOp	! explicit_camera_centers
>2794	Identifier	explicit_camera_centers
>2795	UnaryOperator	!
>2796	IdentifierDeclStatement	 
>2797	IdentifierDecl	pt
>2798	Identifier	pt
>2799	IdentifierDeclType	v3_t
>2800	ExpressionStatement	 
>2801	AssignmentExpr	angle = ComputeRayAngle ( p , q , c1 , c2 )
>2802	CallExpression	ComputeRayAngle ( p , q , c1 , c2 )
>2803	ArgumentList	p
>2804	Argument	c2
>2805	Identifier	c2
>2806	Argument	c1
>2807	Identifier	c1
>2808	Argument	q
>2809	Identifier	q
>2810	Argument	p
>2811	Identifier	p
>2812	Callee	ComputeRayAngle
>2813	Identifier	ComputeRayAngle
>2814	Identifier	angle
>2815	ExpressionStatement	 
>2816	AssignmentExpr	q_norm = UndistortNormalizedPoint ( q_norm , c2 )
>2817	CallExpression	UndistortNormalizedPoint ( q_norm , c2 )
>2818	ArgumentList	q_norm
>2819	Argument	c2
>2820	Identifier	c2
>2821	Argument	q_norm
>2822	Identifier	q_norm
>2823	Callee	UndistortNormalizedPoint
>2824	Identifier	UndistortNormalizedPoint
>2825	Identifier	q_norm
>2826	ExpressionStatement	 
>2827	AssignmentExpr	p_norm = UndistortNormalizedPoint ( p_norm , c1 )
>2828	CallExpression	UndistortNormalizedPoint ( p_norm , c1 )
>2829	ArgumentList	p_norm
>2830	Argument	c1
>2831	Identifier	c1
>2832	Argument	p_norm
>2833	Identifier	p_norm
>2834	Callee	UndistortNormalizedPoint
>2835	Identifier	UndistortNormalizedPoint
>2836	Identifier	p_norm
>2837	IdentifierDeclStatement	 
>2838	IdentifierDecl	q_norm = v2_new ( proj2_norm [ 0 ] / proj2_norm [ 2 ] , proj2_norm [ 1 ] / proj2_norm [ 2 ] )
>2839	AssignmentExpr	q_norm = v2_new ( proj2_norm [ 0 ] / proj2_norm [ 2 ] , proj2_norm [ 1 ] / proj2_norm [ 2 ] )
>2840	CallExpression	v2_new ( proj2_norm [ 0 ] / proj2_norm [ 2 ] , proj2_norm [ 1 ] / proj2_norm [ 2 ] )
>2841	ArgumentList	proj2_norm [ 0 ] / proj2_norm [ 2 ]
>2842	Argument	proj2_norm [ 1 ] / proj2_norm [ 2 ]
>2843	MultiplicativeExpression	proj2_norm [ 1 ] / proj2_norm [ 2 ]
>2844	ArrayIndexing	proj2_norm [ 2 ]
>2845	PrimaryExpression	2
>2846	Identifier	proj2_norm
>2847	ArrayIndexing	proj2_norm [ 1 ]
>2848	PrimaryExpression	1
>2849	Identifier	proj2_norm
>2850	Argument	proj2_norm [ 0 ] / proj2_norm [ 2 ]
>2851	MultiplicativeExpression	proj2_norm [ 0 ] / proj2_norm [ 2 ]
>2852	ArrayIndexing	proj2_norm [ 2 ]
>2853	PrimaryExpression	2
>2854	Identifier	proj2_norm
>2855	ArrayIndexing	proj2_norm [ 0 ]
>2856	PrimaryExpression	0
>2857	Identifier	proj2_norm
>2858	Callee	v2_new
>2859	Identifier	v2_new
>2860	Identifier	q_norm
>2861	Identifier	q_norm
>2862	IdentifierDeclType	v2_t
>2863	IdentifierDeclStatement	 
>2864	IdentifierDecl	p_norm = v2_new ( proj1_norm [ 0 ] / proj1_norm [ 2 ] , proj1_norm [ 1 ] / proj1_norm [ 2 ] )
>2865	AssignmentExpr	p_norm = v2_new ( proj1_norm [ 0 ] / proj1_norm [ 2 ] , proj1_norm [ 1 ] / proj1_norm [ 2 ] )
>2866	CallExpression	v2_new ( proj1_norm [ 0 ] / proj1_norm [ 2 ] , proj1_norm [ 1 ] / proj1_norm [ 2 ] )
>2867	ArgumentList	proj1_norm [ 0 ] / proj1_norm [ 2 ]
>2868	Argument	proj1_norm [ 1 ] / proj1_norm [ 2 ]
>2869	MultiplicativeExpression	proj1_norm [ 1 ] / proj1_norm [ 2 ]
>2870	ArrayIndexing	proj1_norm [ 2 ]
>2871	PrimaryExpression	2
>2872	Identifier	proj1_norm
>2873	ArrayIndexing	proj1_norm [ 1 ]
>2874	PrimaryExpression	1
>2875	Identifier	proj1_norm
>2876	Argument	proj1_norm [ 0 ] / proj1_norm [ 2 ]
>2877	MultiplicativeExpression	proj1_norm [ 0 ] / proj1_norm [ 2 ]
>2878	ArrayIndexing	proj1_norm [ 2 ]
>2879	PrimaryExpression	2
>2880	Identifier	proj1_norm
>2881	ArrayIndexing	proj1_norm [ 0 ]
>2882	PrimaryExpression	0
>2883	Identifier	proj1_norm
>2884	Callee	v2_new
>2885	Identifier	v2_new
>2886	Identifier	p_norm
>2887	Identifier	p_norm
>2888	IdentifierDeclType	v2_t
>2889	ExpressionStatement	 
>2890	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , K2inv , proj2 , proj2_norm )
>2891	ArgumentList	3
>2892	Argument	proj2_norm
>2893	Identifier	proj2_norm
>2894	Argument	proj2
>2895	Identifier	proj2
>2896	Argument	K2inv
>2897	Identifier	K2inv
>2898	Argument	1
>2899	PrimaryExpression	1
>2900	Argument	3
>2901	PrimaryExpression	3
>2902	Argument	3
>2903	PrimaryExpression	3
>2904	Argument	3
>2905	PrimaryExpression	3
>2906	Callee	matrix_product
>2907	Identifier	matrix_product
>2908	ExpressionStatement	 
>2909	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , K1inv , proj1 , proj1_norm )
>2910	ArgumentList	3
>2911	Argument	proj1_norm
>2912	Identifier	proj1_norm
>2913	Argument	proj1
>2914	Identifier	proj1
>2915	Argument	K1inv
>2916	Identifier	K1inv
>2917	Argument	1
>2918	PrimaryExpression	1
>2919	Argument	3
>2920	PrimaryExpression	3
>2921	Argument	3
>2922	PrimaryExpression	3
>2923	Argument	3
>2924	PrimaryExpression	3
>2925	Callee	matrix_product
>2926	Identifier	matrix_product
>2927	IdentifierDeclStatement	 
>2928	IdentifierDecl	proj2_norm [ 3 ]
>2929	PrimaryExpression	3
>2930	Identifier	proj2_norm
>2931	IdentifierDeclType	double [ 3 ]
>2932	IdentifierDecl	proj1_norm [ 3 ]
>2933	PrimaryExpression	3
>2934	Identifier	proj1_norm
>2935	IdentifierDeclType	double [ 3 ]
>2936	IdentifierDeclStatement	 
>2937	IdentifierDecl	proj2 [ 3 ] = { Vx ( q ) , Vy ( q ) , - 1.0 }
>2938	AssignmentExpr	proj2 [ 3 ] = { Vx ( q ) , Vy ( q ) , - 1.0 }
>2939	InitializerList	Vx ( q )
>2940	UnaryOp	- 1.0
>2941	PrimaryExpression	1.0
>2942	UnaryOperator	-
>2943	CallExpression	Vy ( q )
>2944	ArgumentList	q
>2945	Argument	q
>2946	Identifier	q
>2947	Callee	Vy
>2948	Identifier	Vy
>2949	CallExpression	Vx ( q )
>2950	ArgumentList	q
>2951	Argument	q
>2952	Identifier	q
>2953	Callee	Vx
>2954	Identifier	Vx
>2955	Identifier	proj2
>2956	PrimaryExpression	3
>2957	Identifier	proj2
>2958	IdentifierDeclType	double [ 3 ]
>2959	IdentifierDeclStatement	 
>2960	IdentifierDecl	proj1 [ 3 ] = { Vx ( p ) , Vy ( p ) , - 1.0 }
>2961	AssignmentExpr	proj1 [ 3 ] = { Vx ( p ) , Vy ( p ) , - 1.0 }
>2962	InitializerList	Vx ( p )
>2963	UnaryOp	- 1.0
>2964	PrimaryExpression	1.0
>2965	UnaryOperator	-
>2966	CallExpression	Vy ( p )
>2967	ArgumentList	p
>2968	Argument	p
>2969	Identifier	p
>2970	Callee	Vy
>2971	Identifier	Vy
>2972	CallExpression	Vx ( p )
>2973	ArgumentList	p
>2974	Argument	p
>2975	Identifier	p
>2976	Callee	Vx
>2977	Identifier	Vx
>2978	Identifier	proj1
>2979	PrimaryExpression	3
>2980	Identifier	proj1
>2981	IdentifierDeclType	double [ 3 ]
>2982	ExpressionStatement	 
>2983	CallExpression	matrix_invert ( 3 , K2 , K2inv )
>2984	ArgumentList	3
>2985	Argument	K2inv
>2986	Identifier	K2inv
>2987	Argument	K2
>2988	Identifier	K2
>2989	Argument	3
>2990	PrimaryExpression	3
>2991	Callee	matrix_invert
>2992	Identifier	matrix_invert
>2993	ExpressionStatement	 
>2994	CallExpression	matrix_invert ( 3 , K1 , K1inv )
>2995	ArgumentList	3
>2996	Argument	K1inv
>2997	Identifier	K1inv
>2998	Argument	K1
>2999	Identifier	K1
>3000	Argument	3
>3001	PrimaryExpression	3
>3002	Callee	matrix_invert
>3003	Identifier	matrix_invert
>3004	ExpressionStatement	 
>3005	CallExpression	GetIntrinsics ( c2 , K2 )
>3006	ArgumentList	c2
>3007	Argument	K2
>3008	Identifier	K2
>3009	Argument	c2
>3010	Identifier	c2
>3011	Callee	GetIntrinsics
>3012	Identifier	GetIntrinsics
>3013	ExpressionStatement	 
>3014	CallExpression	GetIntrinsics ( c1 , K1 )
>3015	ArgumentList	c1
>3016	Argument	K1
>3017	Identifier	K1
>3018	Argument	c1
>3019	Identifier	c1
>3020	Callee	GetIntrinsics
>3021	Identifier	GetIntrinsics
>3022	IdentifierDeclStatement	 
>3023	IdentifierDecl	K2inv [ 9 ]
>3024	PrimaryExpression	9
>3025	Identifier	K2inv
>3026	IdentifierDeclType	double [ 9 ]
>3027	IdentifierDecl	K1inv [ 9 ]
>3028	PrimaryExpression	9
>3029	Identifier	K1inv
>3030	IdentifierDeclType	double [ 9 ]
>3031	IdentifierDeclStatement	 
>3032	IdentifierDecl	K2 [ 9 ]
>3033	PrimaryExpression	9
>3034	Identifier	K2
>3035	IdentifierDeclType	double [ 9 ]
>3036	IdentifierDecl	K1 [ 9 ]
>3037	PrimaryExpression	9
>3038	Identifier	K1
>3039	IdentifierDeclType	double [ 9 ]
>3083	FunctionDef	BundlerApp 
>3084	ParameterList	int camera_idx , int num_points , int num_cameras , int * added_order , camera_params_t * cameras , v3_t * points , \
>3085	Parameter	 
>3086	Identifier	pt_views
>3087	ParameterType	std 
>3088	Parameter	 
>3089	Identifier	reference_baseline
>3090	ParameterType	double
>3091	Parameter	 
>3092	Identifier	colors
>3093	ParameterType	v3_t *
>3094	Parameter	 
>3095	Identifier	points
>3096	ParameterType	v3_t *
>3097	Parameter	 
>3098	Identifier	cameras
>3099	ParameterType	camera_params_t *
>3100	Parameter	 
>3101	Identifier	added_order
>3102	ParameterType	int *
>3103	Parameter	 
>3104	Identifier	num_cameras
>3105	ParameterType	int
>3106	Parameter	 
>3107	Identifier	num_points
>3108	ParameterType	int
>3109	Parameter	 
>3110	Identifier	camera_idx
>3111	ParameterType	int
>3112	ReturnType	int
>3113	CompoundStatement	 
>3114	ReturnStatement	 
>3115	Identifier	pt_count
>3116	ForStatement	for ( int i = 0 ; i < num_cameras ; i ++ )
>3117	CompoundStatement	 
>3118	ExpressionStatement	 
>3119	CallExpression	m_matches . ClearMatch ( idx )
>3120	ArgumentList	idx
>3121	Argument	idx
>3122	Identifier	idx
>3123	Callee	m_matches . ClearMatch
>3124	MemberAccess	m_matches . ClearMatch
>3125	Identifier	ClearMatch
>3126	Identifier	m_matches
>3127	ForStatement	for ( int j = 0 ; j < ( int ) list . size ( ) ; j ++ )
>3128	CompoundStatement	 
>3129	IfStatement	if ( GetKey ( other , other_idx ) . m_extra == - 1 && GetKey ( image_idx , this_idx ) . m_extra >= 0 )
>3130	ElseStatement	else
>3131	IfStatement	if ( GetKey ( other , other_idx ) . m_extra == - 1 )
>3132	ElseStatement	else
>3133	IfStatement	if ( GetKey ( other , other_idx ) . m_extra >= 0 && GetKey ( image_idx , this_idx ) . m_extra == - 1 )
>3134	CompoundStatement	 
>3135	IfStatement	if ( proj_error <= INIT_REPROJECTION_ERROR )
>3136	ElseStatement	else
>3137	CompoundStatement	 
>3138	ExpressionStatement	 
>3139	AssignmentExpr	GetKey ( image_idx , this_idx ) . m_extra = - 2
>3140	UnaryOp	- 2
>3141	PrimaryExpression	2
>3142	UnaryOperator	-
>3143	MemberAccess	GetKey ( image_idx , this_idx ) . m_extra
>3144	Identifier	m_extra
>3145	CallExpression	GetKey ( image_idx , this_idx )
>3146	ArgumentList	image_idx
>3147	Argument	this_idx
>3148	Identifier	this_idx
>3149	Argument	image_idx
>3150	Identifier	image_idx
>3151	Callee	GetKey
>3152	Identifier	GetKey
>3153	CompoundStatement	 
>3154	ExpressionStatement	 
>3155	CallExpression	pt_views [ pt_idx ] . push_back ( ImageKey ( camera_idx , this_idx ) )
>3156	ArgumentList	ImageKey ( camera_idx , this_idx )
>3157	Argument	ImageKey ( camera_idx , this_idx )
>3158	CallExpression	ImageKey ( camera_idx , this_idx )
>3159	ArgumentList	camera_idx
>3160	Argument	this_idx
>3161	Identifier	this_idx
>3162	Argument	camera_idx
>3163	Identifier	camera_idx
>3164	Callee	ImageKey
>3165	Identifier	ImageKey
>3166	Callee	pt_views [ pt_idx ] . push_back
>3167	MemberAccess	pt_views [ pt_idx ] . push_back
>3168	Identifier	push_back
>3169	ArrayIndexing	pt_views [ pt_idx ]
>3170	Identifier	pt_idx
>3171	Identifier	pt_views
>3172	ExpressionStatement	 
>3173	AssignmentExpr	GetKey ( image_idx , this_idx ) . m_extra = pt_idx
>3174	Identifier	pt_idx
>3175	MemberAccess	GetKey ( image_idx , this_idx ) . m_extra
>3176	Identifier	m_extra
>3177	CallExpression	GetKey ( image_idx , this_idx )
>3178	ArgumentList	image_idx
>3179	Argument	this_idx
>3180	Identifier	this_idx
>3181	Argument	image_idx
>3182	Identifier	image_idx
>3183	Callee	GetKey
>3184	Identifier	GetKey
>3185	ExpressionStatement	 
>3186	CallExpression	printf ( \"  Reconnecting point [%d] (%d) (error
>3187	ArgumentList	\"  Reconnecting point [%d] (%d) (error
>3188	Argument	proj_error
>3189	Identifier	proj_error
>3190	Argument	this_idx
>3191	Identifier	this_idx
>3192	Argument	pt_idx
>3193	Identifier	pt_idx
>3194	Argument	\"  Reconnecting point [%d] (%d) (error
>3195	PrimaryExpression	\"  Reconnecting point [%d] (%d) (error
>3196	Callee	printf
>3197	Identifier	printf
>3198	Condition	 
>3199	RelationalExpression	proj_error <= INIT_REPROJECTION_ERROR
>3200	Identifier	INIT_REPROJECTION_ERROR
>3201	Identifier	proj_error
>3202	IdentifierDeclStatement	 
>3203	IdentifierDecl	proj_error = sqrt ( dx * dx + dy * dy )
>3204	AssignmentExpr	proj_error = sqrt ( dx * dx + dy * dy )
>3205	CallExpression	sqrt ( dx * dx + dy * dy )
>3206	ArgumentList	dx * dx + dy * dy
>3207	Argument	dx * dx + dy * dy
>3208	AdditiveExpression	dx * dx + dy * dy
>3209	MultiplicativeExpression	dy * dy
>3210	Identifier	dy
>3211	Identifier	dy
>3212	MultiplicativeExpression	dx * dx
>3213	Identifier	dx
>3214	Identifier	dx
>3215	Callee	sqrt
>3216	Identifier	sqrt
>3217	Identifier	proj_error
>3218	Identifier	proj_error
>3219	IdentifierDeclType	double
>3220	IdentifierDeclStatement	 
>3221	IdentifierDecl	dy = GetKey ( image_idx , this_idx ) . m_y - Vy ( pr )
>3222	AssignmentExpr	dy = GetKey ( image_idx , this_idx ) . m_y - Vy ( pr )
>3223	AdditiveExpression	GetKey ( image_idx , this_idx ) . m_y - Vy ( pr )
>3224	CallExpression	Vy ( pr )
>3225	ArgumentList	pr
>3226	Argument	pr
>3227	Identifier	pr
>3228	Callee	Vy
>3229	Identifier	Vy
>3230	MemberAccess	GetKey ( image_idx , this_idx ) . m_y
>3231	Identifier	m_y
>3232	CallExpression	GetKey ( image_idx , this_idx )
>3233	ArgumentList	image_idx
>3234	Argument	this_idx
>3235	Identifier	this_idx
>3236	Argument	image_idx
>3237	Identifier	image_idx
>3238	Callee	GetKey
>3239	Identifier	GetKey
>3240	Identifier	dy
>3241	Identifier	dy
>3242	IdentifierDeclType	double
>3243	IdentifierDeclStatement	 
>3244	IdentifierDecl	dx = GetKey ( image_idx , this_idx ) . m_x - Vx ( pr )
>3245	AssignmentExpr	dx = GetKey ( image_idx , this_idx ) . m_x - Vx ( pr )
>3246	AdditiveExpression	GetKey ( image_idx , this_idx ) . m_x - Vx ( pr )
>3247	CallExpression	Vx ( pr )
>3248	ArgumentList	pr
>3249	Argument	pr
>3250	Identifier	pr
>3251	Callee	Vx
>3252	Identifier	Vx
>3253	MemberAccess	GetKey ( image_idx , this_idx ) . m_x
>3254	Identifier	m_x
>3255	CallExpression	GetKey ( image_idx , this_idx )
>3256	ArgumentList	image_idx
>3257	Argument	this_idx
>3258	Identifier	this_idx
>3259	Argument	image_idx
>3260	Identifier	image_idx
>3261	Callee	GetKey
>3262	Identifier	GetKey
>3263	Identifier	dx
>3264	Identifier	dx
>3265	IdentifierDeclType	double
>3266	IdentifierDeclStatement	 
>3267	IdentifierDecl	pr = sfm_project_final ( cameras + camera_idx , points [ pt_idx ] , true , m_estimate_distortion )
>3268	AssignmentExpr	pr = sfm_project_final ( cameras + camera_idx , points [ pt_idx ] , true , m_estimate_distortion )
>3269	CallExpression	sfm_project_final ( cameras + camera_idx , points [ pt_idx ] , true , m_estimate_distortion )
>3270	ArgumentList	cameras + camera_idx
>3271	Argument	m_estimate_distortion
>3272	Identifier	m_estimate_distortion
>3273	Argument	true
>3274	Identifier	true
>3275	Argument	points [ pt_idx ]
>3276	ArrayIndexing	points [ pt_idx ]
>3277	Identifier	pt_idx
>3278	Identifier	points
>3279	Argument	cameras + camera_idx
>3280	AdditiveExpression	cameras + camera_idx
>3281	Identifier	camera_idx
>3282	Identifier	cameras
>3283	Callee	sfm_project_final
>3284	Identifier	sfm_project_final
>3285	Identifier	pr
>3286	Identifier	pr
>3287	IdentifierDeclType	v2_t
>3288	IdentifierDeclStatement	 
>3289	IdentifierDecl	pt_idx = GetKey ( other , other_idx ) . m_extra
>3290	AssignmentExpr	pt_idx = GetKey ( other , other_idx ) . m_extra
>3291	MemberAccess	GetKey ( other , other_idx ) . m_extra
>3292	Identifier	m_extra
>3293	CallExpression	GetKey ( other , other_idx )
>3294	ArgumentList	other
>3295	Argument	other_idx
>3296	Identifier	other_idx
>3297	Argument	other
>3298	Identifier	other
>3299	Callee	GetKey
>3300	Identifier	GetKey
>3301	Identifier	pt_idx
>3302	Identifier	pt_idx
>3303	IdentifierDeclType	int
>3304	Condition	 
>3305	AndExpression	GetKey ( other , other_idx ) . m_extra >= 0 && GetKey ( image_idx , this_idx ) . m_extra == - 1
>3306	EqualityExpression	GetKey ( image_idx , this_idx ) . m_extra == - 1
>3307	UnaryOp	- 1
>3308	PrimaryExpression	1
>3309	UnaryOperator	-
>3310	MemberAccess	GetKey ( image_idx , this_idx ) . m_extra
>3311	Identifier	m_extra
>3312	CallExpression	GetKey ( image_idx , this_idx )
>3313	ArgumentList	image_idx
>3314	Argument	this_idx
>3315	Identifier	this_idx
>3316	Argument	image_idx
>3317	Identifier	image_idx
>3318	Callee	GetKey
>3319	Identifier	GetKey
>3320	RelationalExpression	GetKey ( other , other_idx ) . m_extra >= 0
>3321	PrimaryExpression	0
>3322	MemberAccess	GetKey ( other , other_idx ) . m_extra
>3323	Identifier	m_extra
>3324	CallExpression	GetKey ( other , other_idx )
>3325	ArgumentList	other
>3326	Argument	other_idx
>3327	Identifier	other_idx
>3328	Argument	other
>3329	Identifier	other
>3330	Callee	GetKey
>3331	Identifier	GetKey
>3332	CompoundStatement	 
>3333	ExpressionStatement	 
>3334	IncDecOp	pt_count ++
>3335	IncDec	++
>3336	Identifier	pt_count
>3337	ExpressionStatement	 
>3338	CallExpression	pt_views . push_back ( views )
>3339	ArgumentList	views
>3340	Argument	views
>3341	Identifier	views
>3342	Callee	pt_views . push_back
>3343	MemberAccess	pt_views . push_back
>3344	Identifier	push_back
>3345	Identifier	pt_views
>3346	ExpressionStatement	 
>3347	CallExpression	views . push_back ( ImageKey ( camera_idx , this_idx ) )
>3348	ArgumentList	ImageKey ( camera_idx , this_idx )
>3349	Argument	ImageKey ( camera_idx , this_idx )
>3350	CallExpression	ImageKey ( camera_idx , this_idx )
>3351	ArgumentList	camera_idx
>3352	Argument	this_idx
>3353	Identifier	this_idx
>3354	Argument	camera_idx
>3355	Identifier	camera_idx
>3356	Callee	ImageKey
>3357	Identifier	ImageKey
>3358	Callee	views . push_back
>3359	MemberAccess	views . push_back
>3360	Identifier	push_back
>3361	Identifier	views
>3362	ExpressionStatement	 
>3363	CallExpression	views . push_back ( ImageKey ( i , other_idx ) )
>3364	ArgumentList	ImageKey ( i , other_idx )
>3365	Argument	ImageKey ( i , other_idx )
>3366	CallExpression	ImageKey ( i , other_idx )
>3367	ArgumentList	i
>3368	Argument	other_idx
>3369	Identifier	other_idx
>3370	Argument	i
>3371	Identifier	i
>3372	Callee	ImageKey
>3373	Identifier	ImageKey
>3374	Callee	views . push_back
>3375	MemberAccess	views . push_back
>3376	Identifier	push_back
>3377	Identifier	views
>3378	IdentifierDeclStatement	 
>3379	IdentifierDecl	views
>3380	Identifier	views
>3381	IdentifierDeclType	ImageKeyVector
>3382	ExpressionStatement	 
>3383	AssignmentExpr	colors [ pt_count ] = v3_new ( ( double ) r , ( double ) g , ( double ) b )
>3384	CallExpression	v3_new ( ( double ) r , ( double ) g , ( double ) b )
>3385	ArgumentList	( double ) r
>3386	Argument	( double ) b
>3387	CastExpression	( double ) b
>3388	Identifier	b
>3389	CastTarget	double
>3390	Argument	( double ) g
>3391	CastExpression	( double ) g
>3392	Identifier	g
>3393	CastTarget	double
>3394	Argument	( double ) r
>3395	CastExpression	( double ) r
>3396	Identifier	r
>3397	CastTarget	double
>3398	Callee	v3_new
>3399	Identifier	v3_new
>3400	ArrayIndexing	colors [ pt_count ]
>3401	Identifier	pt_count
>3402	Identifier	colors
>3403	IdentifierDeclStatement	 
>3404	IdentifierDecl	b = GetKey ( other , other_idx ) . m_b
>3405	AssignmentExpr	b = GetKey ( other , other_idx ) . m_b
>3406	MemberAccess	GetKey ( other , other_idx ) . m_b
>3407	Identifier	m_b
>3408	CallExpression	GetKey ( other , other_idx )
>3409	ArgumentList	other
>3410	Argument	other_idx
>3411	Identifier	other_idx
>3412	Argument	other
>3413	Identifier	other
>3414	Callee	GetKey
>3415	Identifier	GetKey
>3416	Identifier	b
>3417	Identifier	b
>3418	IdentifierDeclType	unsigned char
>3419	IdentifierDeclStatement	 
>3420	IdentifierDecl	g = GetKey ( other , other_idx ) . m_g
>3421	AssignmentExpr	g = GetKey ( other , other_idx ) . m_g
>3422	MemberAccess	GetKey ( other , other_idx ) . m_g
>3423	Identifier	m_g
>3424	CallExpression	GetKey ( other , other_idx )
>3425	ArgumentList	other
>3426	Argument	other_idx
>3427	Identifier	other_idx
>3428	Argument	other
>3429	Identifier	other
>3430	Callee	GetKey
>3431	Identifier	GetKey
>3432	Identifier	g
>3433	Identifier	g
>3434	IdentifierDeclType	unsigned char
>3435	IdentifierDeclStatement	 
>3436	IdentifierDecl	r = GetKey ( other , other_idx ) . m_r
>3437	AssignmentExpr	r = GetKey ( other , other_idx ) . m_r
>3438	MemberAccess	GetKey ( other , other_idx ) . m_r
>3439	Identifier	m_r
>3440	CallExpression	GetKey ( other , other_idx )
>3441	ArgumentList	other
>3442	Argument	other_idx
>3443	Identifier	other_idx
>3444	Argument	other
>3445	Identifier	other
>3446	Callee	GetKey
>3447	Identifier	GetKey
>3448	Identifier	r
>3449	Identifier	r
>3450	IdentifierDeclType	unsigned char
>3451	ExpressionStatement	 
>3452	Statement	 
>3453	Statement	 
>3454	Statement	 
>3455	Statement	 
>3456	Statement	 
>3457	Statement	 
>3458	Statement	 
>3459	Statement	 
>3460	Statement	 
>3461	Statement	 
>3462	Statement	 
>3463	Statement	 
>3464	Statement	 
>3465	Statement	 
>3466	Statement	 
>3467	Statement	 
>3468	Statement	 
>3469	Statement	 
>3470	Statement	 
>3471	Statement	 
>3472	Statement	 
>3473	Statement	 
>3474	IfStatement	if ( ! in_front )
>3475	CompoundStatement	 
>3476	ContinueStatement	 
>3477	ExpressionStatement	 
>3478	AssignmentExpr	GetKey ( image_idx , this_idx ) . m_extra = - 2
>3479	UnaryOp	- 2
>3480	PrimaryExpression	2
>3481	UnaryOperator	-
>3482	MemberAccess	GetKey ( image_idx , this_idx ) . m_extra
>3483	Identifier	m_extra
>3484	CallExpression	GetKey ( image_idx , this_idx )
>3485	ArgumentList	image_idx
>3486	Argument	this_idx
>3487	Identifier	this_idx
>3488	Argument	image_idx
>3489	Identifier	image_idx
>3490	Callee	GetKey
>3491	Identifier	GetKey
>3492	ExpressionStatement	 
>3493	AssignmentExpr	GetKey ( other , other_idx ) . m_extra = - 2
>3494	UnaryOp	- 2
>3495	PrimaryExpression	2
>3496	UnaryOperator	-
>3497	MemberAccess	GetKey ( other , other_idx ) . m_extra
>3498	Identifier	m_extra
>3499	CallExpression	GetKey ( other , other_idx )
>3500	ArgumentList	other
>3501	Argument	other_idx
>3502	Identifier	other_idx
>3503	Argument	other
>3504	Identifier	other
>3505	Callee	GetKey
>3506	Identifier	GetKey
>3507	ExpressionStatement	 
>3508	CallExpression	printf ( \"  Cheirality violated!\n\" )
>3509	ArgumentList	\"  Cheirality violated!\n\"
>3510	Argument	\"  Cheirality violated!\n\"
>3511	PrimaryExpression	\"  Cheirality violated!\n\"
>3512	Callee	printf
>3513	Identifier	printf
>3514	Condition	 
>3515	UnaryOp	! in_front
>3516	Identifier	in_front
>3517	UnaryOperator	!
>3518	IfStatement	if ( proj_error >= ADD_REPROJECTION_ERROR )
>3519	CompoundStatement	 
>3520	ContinueStatement	 
>3521	ExpressionStatement	 
>3522	AssignmentExpr	GetKey ( image_idx , this_idx ) . m_extra = - 2
>3523	UnaryOp	- 2
>3524	PrimaryExpression	2
>3525	UnaryOperator	-
>3526	MemberAccess	GetKey ( image_idx , this_idx ) . m_extra
>3527	Identifier	m_extra
>3528	CallExpression	GetKey ( image_idx , this_idx )
>3529	ArgumentList	image_idx
>3530	Argument	this_idx
>3531	Identifier	this_idx
>3532	Argument	image_idx
>3533	Identifier	image_idx
>3534	Callee	GetKey
>3535	Identifier	GetKey
>3536	ExpressionStatement	 
>3537	AssignmentExpr	GetKey ( other , other_idx ) . m_extra = - 2
>3538	UnaryOp	- 2
>3539	PrimaryExpression	2
>3540	UnaryOperator	-
>3541	MemberAccess	GetKey ( other , other_idx ) . m_extra
>3542	Identifier	m_extra
>3543	CallExpression	GetKey ( other , other_idx )
>3544	ArgumentList	other
>3545	Argument	other_idx
>3546	Identifier	other_idx
>3547	Argument	other
>3548	Identifier	other
>3549	Callee	GetKey
>3550	Identifier	GetKey
>3551	ExpressionStatement	 
>3552	Statement	 
>3553	Statement	 
>3554	Statement	 
>3555	Statement	 
>3556	Statement	 
>3557	Statement	 
>3558	Statement	 
>3559	Statement	 
>3560	Statement	 
>3561	Statement	 
>3562	Statement	 
>3563	Condition	 
>3564	RelationalExpression	proj_error >= ADD_REPROJECTION_ERROR
>3565	Identifier	ADD_REPROJECTION_ERROR
>3566	Identifier	proj_error
>3567	IfStatement	if ( RAD2DEG ( angle ) < m_ray_angle_threshold )
>3568	CompoundStatement	 
>3569	ContinueStatement	 
>3570	ExpressionStatement	 
>3571	AssignmentExpr	GetKey ( image_idx , this_idx ) . m_extra = - 1
>3572	UnaryOp	- 1
>3573	PrimaryExpression	1
>3574	UnaryOperator	-
>3575	MemberAccess	GetKey ( image_idx , this_idx ) . m_extra
>3576	Identifier	m_extra
>3577	CallExpression	GetKey ( image_idx , this_idx )
>3578	ArgumentList	image_idx
>3579	Argument	this_idx
>3580	Identifier	this_idx
>3581	Argument	image_idx
>3582	Identifier	image_idx
>3583	Callee	GetKey
>3584	Identifier	GetKey
>3585	ExpressionStatement	 
>3586	AssignmentExpr	GetKey ( other , other_idx ) . m_extra = - 1
>3587	UnaryOp	- 1
>3588	PrimaryExpression	1
>3589	UnaryOperator	-
>3590	MemberAccess	GetKey ( other , other_idx ) . m_extra
>3591	Identifier	m_extra
>3592	CallExpression	GetKey ( other , other_idx )
>3593	ArgumentList	other
>3594	Argument	other_idx
>3595	Identifier	other_idx
>3596	Argument	other
>3597	Identifier	other
>3598	Callee	GetKey
>3599	Identifier	GetKey
>3600	ExpressionStatement	 
>3601	CallExpression	printf ( \" Ray angle %d => %d is too small (%0.3f)\n\" , this_idx , other_idx , RAD2DEG ( angle ) )
>3602	ArgumentList	\" Ray angle %d => %d is too small (%0.3f)\n\"
>3603	Argument	RAD2DEG ( angle )
>3604	CallExpression	RAD2DEG ( angle )
>3605	ArgumentList	angle
>3606	Argument	angle
>3607	Identifier	angle
>3608	Callee	RAD2DEG
>3609	Identifier	RAD2DEG
>3610	Argument	other_idx
>3611	Identifier	other_idx
>3612	Argument	this_idx
>3613	Identifier	this_idx
>3614	Argument	\" Ray angle %d => %d is too small (%0.3f)\n\"
>3615	PrimaryExpression	\" Ray angle %d => %d is too small (%0.3f)\n\"
>3616	Callee	printf
>3617	Identifier	printf
>3618	Condition	 
>3619	RelationalExpression	RAD2DEG ( angle ) < m_ray_angle_threshold
>3620	Identifier	m_ray_angle_threshold
>3621	CallExpression	RAD2DEG ( angle )
>3622	ArgumentList	angle
>3623	Argument	angle
>3624	Identifier	angle
>3625	Callee	RAD2DEG
>3626	Identifier	RAD2DEG
>3627	ExpressionStatement	 
>3628	AssignmentExpr	points [ pt_count ] = Triangulate ( p , q , cameras [ i ] , cameras [ camera_idx ] , proj_error , in_\
>3629	CallExpression	Triangulate ( p , q , cameras [ i ] , cameras [ camera_idx ] , proj_error , in_front , angle , true )
>3630	ArgumentList	p
>3631	Argument	true
>3632	Identifier	true
>3633	Argument	angle
>3634	Identifier	angle
>3635	Argument	in_front
>3636	Identifier	in_front
>3637	Argument	proj_error
>3638	Identifier	proj_error
>3639	Argument	cameras [ camera_idx ]
>3640	ArrayIndexing	cameras [ camera_idx ]
>3641	Identifier	camera_idx
>3642	Identifier	cameras
>3643	Argument	cameras [ i ]
>3644	ArrayIndexing	cameras [ i ]
>3645	Identifier	i
>3646	Identifier	cameras
>3647	Argument	q
>3648	Identifier	q
>3649	Argument	p
>3650	Identifier	p
>3651	Callee	Triangulate
>3652	Identifier	Triangulate
>3653	ArrayIndexing	points [ pt_count ]
>3654	Identifier	pt_count
>3655	Identifier	points
>3656	IdentifierDeclStatement	 
>3657	IdentifierDecl	angle = 0.0
>3658	AssignmentExpr	angle = 0.0
>3659	PrimaryExpression	0.0
>3660	Identifier	angle
>3661	Identifier	angle
>3662	IdentifierDeclType	double
>3663	IdentifierDeclStatement	 
>3664	IdentifierDecl	in_front = false
>3665	AssignmentExpr	in_front = false
>3666	Identifier	false
>3667	Identifier	false
>3668	Identifier	in_front
>3669	IdentifierDeclType	bool
>3670	IdentifierDeclStatement	 
>3671	IdentifierDecl	proj_error = 0.0
>3672	AssignmentExpr	proj_error = 0.0
>3673	PrimaryExpression	0.0
>3674	Identifier	proj_error
>3675	Identifier	proj_error
>3676	IdentifierDeclType	double
>3677	IfStatement	if ( m_optimize_for_fisheye )
>3678	CompoundStatement	 
>3679	ExpressionStatement	 
>3680	CallExpression	m_image_data [ image_idx ] . UndistortPoint ( q_x , q_y , Vx ( q ) , Vy ( q ) )
>3681	ArgumentList	q_x
>3682	Argument	Vy ( q )
>3683	CallExpression	Vy ( q )
>3684	ArgumentList	q
>3685	Argument	q
>3686	Identifier	q
>3687	Callee	Vy
>3688	Identifier	Vy
>3689	Argument	Vx ( q )
>3690	CallExpression	Vx ( q )
>3691	ArgumentList	q
>3692	Argument	q
>3693	Identifier	q
>3694	Callee	Vx
>3695	Identifier	Vx
>3696	Argument	q_y
>3697	Identifier	q_y
>3698	Argument	q_x
>3699	Identifier	q_x
>3700	Callee	m_image_data [ image_idx ] . UndistortPoint
>3701	MemberAccess	m_image_data [ image_idx ] . UndistortPoint
>3702	Identifier	UndistortPoint
>3703	ArrayIndexing	m_image_data [ image_idx ]
>3704	Identifier	image_idx
>3705	Identifier	m_image_data
>3706	ExpressionStatement	 
>3707	CallExpression	m_image_data [ other ] . UndistortPoint ( p_x , p_y , Vx ( p ) , Vy ( p ) )
>3708	ArgumentList	p_x
>3709	Argument	Vy ( p )
>3710	CallExpression	Vy ( p )
>3711	ArgumentList	p
>3712	Argument	p
>3713	Identifier	p
>3714	Callee	Vy
>3715	Identifier	Vy
>3716	Argument	Vx ( p )
>3717	CallExpression	Vx ( p )
>3718	ArgumentList	p
>3719	Argument	p
>3720	Identifier	p
>3721	Callee	Vx
>3722	Identifier	Vx
>3723	Argument	p_y
>3724	Identifier	p_y
>3725	Argument	p_x
>3726	Identifier	p_x
>3727	Callee	m_image_data [ other ] . UndistortPoint
>3728	MemberAccess	m_image_data [ other ] . UndistortPoint
>3729	Identifier	UndistortPoint
>3730	ArrayIndexing	m_image_data [ other ]
>3731	Identifier	other
>3732	Identifier	m_image_data
>3733	IdentifierDeclStatement	 
>3734	IdentifierDecl	q_y = Vy ( q )
>3735	AssignmentExpr	q_y = Vy ( q )
>3736	CallExpression	Vy ( q )
>3737	ArgumentList	q
>3738	Argument	q
>3739	Identifier	q
>3740	Callee	Vy
>3741	Identifier	Vy
>3742	Identifier	q_y
>3743	Identifier	q_y
>3744	IdentifierDeclType	double
>3745	IdentifierDecl	q_x = Vx ( q )
>3746	AssignmentExpr	q_x = Vx ( q )
>3747	CallExpression	Vx ( q )
>3748	ArgumentList	q
>3749	Argument	q
>3750	Identifier	q
>3751	Callee	Vx
>3752	Identifier	Vx
>3753	Identifier	q_x
>3754	Identifier	q_x
>3755	IdentifierDeclType	double
>3756	IdentifierDeclStatement	 
>3757	IdentifierDecl	p_y = Vy ( p )
>3758	AssignmentExpr	p_y = Vy ( p )
>3759	CallExpression	Vy ( p )
>3760	ArgumentList	p
>3761	Argument	p
>3762	Identifier	p
>3763	Callee	Vy
>3764	Identifier	Vy
>3765	Identifier	p_y
>3766	Identifier	p_y
>3767	IdentifierDeclType	double
>3768	IdentifierDecl	p_x = Vx ( p )
>3769	AssignmentExpr	p_x = Vx ( p )
>3770	CallExpression	Vx ( p )
>3771	ArgumentList	p
>3772	Argument	p
>3773	Identifier	p
>3774	Callee	Vx
>3775	Identifier	Vx
>3776	Identifier	p_x
>3777	Identifier	p_x
>3778	IdentifierDeclType	double
>3779	Condition	 
>3780	Identifier	m_optimize_for_fisheye
>3781	IdentifierDeclStatement	 
>3782	IdentifierDecl	q = v2_new ( GetKey ( image_idx , this_idx ) . m_x , GetKey ( image_idx , this_idx ) . m_y )
>3783	AssignmentExpr	q = v2_new ( GetKey ( image_idx , this_idx ) . m_x , GetKey ( image_idx , this_idx ) . m_y )
>3784	CallExpression	v2_new ( GetKey ( image_idx , this_idx ) . m_x , GetKey ( image_idx , this_idx ) . m_y )
>3785	ArgumentList	GetKey ( image_idx , this_idx ) . m_x
>3786	Argument	GetKey ( image_idx , this_idx ) . m_y
>3787	MemberAccess	GetKey ( image_idx , this_idx ) . m_y
>3788	Identifier	m_y
>3789	CallExpression	GetKey ( image_idx , this_idx )
>3790	ArgumentList	image_idx
>3791	Argument	this_idx
>3792	Identifier	this_idx
>3793	Argument	image_idx
>3794	Identifier	image_idx
>3795	Callee	GetKey
>3796	Identifier	GetKey
>3797	Argument	GetKey ( image_idx , this_idx ) . m_x
>3798	MemberAccess	GetKey ( image_idx , this_idx ) . m_x
>3799	Identifier	m_x
>3800	CallExpression	GetKey ( image_idx , this_idx )
>3801	ArgumentList	image_idx
>3802	Argument	this_idx
>3803	Identifier	this_idx
>3804	Argument	image_idx
>3805	Identifier	image_idx
>3806	Callee	GetKey
>3807	Identifier	GetKey
>3808	Callee	v2_new
>3809	Identifier	v2_new
>3810	Identifier	q
>3811	Identifier	q
>3812	IdentifierDeclType	v2_t
>3813	IdentifierDeclStatement	 
>3814	IdentifierDecl	p = v2_new ( GetKey ( other , other_idx ) . m_x , GetKey ( other , other_idx ) . m_y )
>3815	AssignmentExpr	p = v2_new ( GetKey ( other , other_idx ) . m_x , GetKey ( other , other_idx ) . m_y )
>3816	CallExpression	v2_new ( GetKey ( other , other_idx ) . m_x , GetKey ( other , other_idx ) . m_y )
>3817	ArgumentList	GetKey ( other , other_idx ) . m_x
>3818	Argument	GetKey ( other , other_idx ) . m_y
>3819	MemberAccess	GetKey ( other , other_idx ) . m_y
>3820	Identifier	m_y
>3821	CallExpression	GetKey ( other , other_idx )
>3822	ArgumentList	other
>3823	Argument	other_idx
>3824	Identifier	other_idx
>3825	Argument	other
>3826	Identifier	other
>3827	Callee	GetKey
>3828	Identifier	GetKey
>3829	Argument	GetKey ( other , other_idx ) . m_x
>3830	MemberAccess	GetKey ( other , other_idx ) . m_x
>3831	Identifier	m_x
>3832	CallExpression	GetKey ( other , other_idx )
>3833	ArgumentList	other
>3834	Argument	other_idx
>3835	Identifier	other_idx
>3836	Argument	other
>3837	Identifier	other
>3838	Callee	GetKey
>3839	Identifier	GetKey
>3840	Callee	v2_new
>3841	Identifier	v2_new
>3842	Identifier	p
>3843	Identifier	p
>3844	IdentifierDeclType	v2_t
>3845	ExpressionStatement	 
>3846	AssignmentExpr	GetKey ( image_idx , this_idx ) . m_extra = pt_count
>3847	Identifier	pt_count
>3848	MemberAccess	GetKey ( image_idx , this_idx ) . m_extra
>3849	Identifier	m_extra
>3850	CallExpression	GetKey ( image_idx , this_idx )
>3851	ArgumentList	image_idx
>3852	Argument	this_idx
>3853	Identifier	this_idx
>3854	Argument	image_idx
>3855	Identifier	image_idx
>3856	Callee	GetKey
>3857	Identifier	GetKey
>3858	ExpressionStatement	 
>3859	AssignmentExpr	GetKey ( other , other_idx ) . m_extra = pt_count
>3860	Identifier	pt_count
>3861	MemberAccess	GetKey ( other , other_idx ) . m_extra
>3862	Identifier	m_extra
>3863	CallExpression	GetKey ( other , other_idx )
>3864	ArgumentList	other
>3865	Argument	other_idx
>3866	Identifier	other_idx
>3867	Argument	other
>3868	Identifier	other
>3869	Callee	GetKey
>3870	Identifier	GetKey
>3871	IfStatement	if ( GetKey ( image_idx , this_idx ) . m_extra != - 1 )
>3872	CompoundStatement	 
>3873	ExpressionStatement	 
>3874	CallExpression	printf ( \"Point index is %d\n\" , GetKey ( image_idx , this_idx ) . m_extra )
>3875	ArgumentList	\"Point index is %d\n\"
>3876	Argument	GetKey ( image_idx , this_idx ) . m_extra
>3877	MemberAccess	GetKey ( image_idx , this_idx ) . m_extra
>3878	Identifier	m_extra
>3879	CallExpression	GetKey ( image_idx , this_idx )
>3880	ArgumentList	image_idx
>3881	Argument	this_idx
>3882	Identifier	this_idx
>3883	Argument	image_idx
>3884	Identifier	image_idx
>3885	Callee	GetKey
>3886	Identifier	GetKey
>3887	Argument	\"Point index is %d\n\"
>3888	PrimaryExpression	\"Point index is %d\n\"
>3889	Callee	printf
>3890	Identifier	printf
>3891	ExpressionStatement	 
>3892	CallExpression	printf ( \"Error!  Key (%d,%d) shouldn't be seen yet!\n\" , image_idx , this_idx )
>3893	ArgumentList	\"Error!  Key (%d,%d) shouldn't be seen yet!\n\"
>3894	Argument	this_idx
>3895	Identifier	this_idx
>3896	Argument	image_idx
>3897	Identifier	image_idx
>3898	Argument	\"Error!  Key (%d,%d) shouldn't be seen yet!\n\"
>3899	PrimaryExpression	\"Error!  Key (%d,%d) shouldn't be seen yet!\n\"
>3900	Callee	printf
>3901	Identifier	printf
>3902	Condition	 
>3903	EqualityExpression	GetKey ( image_idx , this_idx ) . m_extra != - 1
>3904	UnaryOp	- 1
>3905	PrimaryExpression	1
>3906	UnaryOperator	-
>3907	MemberAccess	GetKey ( image_idx , this_idx ) . m_extra
>3908	Identifier	m_extra
>3909	CallExpression	GetKey ( image_idx , this_idx )
>3910	ArgumentList	image_idx
>3911	Argument	this_idx
>3912	Identifier	this_idx
>3913	Argument	image_idx
>3914	Identifier	image_idx
>3915	Callee	GetKey
>3916	Identifier	GetKey
>3917	Condition	 
>3918	EqualityExpression	GetKey ( other , other_idx ) . m_extra == - 1
>3919	UnaryOp	- 1
>3920	PrimaryExpression	1
>3921	UnaryOperator	-
>3922	MemberAccess	GetKey ( other , other_idx ) . m_extra
>3923	Identifier	m_extra
>3924	CallExpression	GetKey ( other , other_idx )
>3925	ArgumentList	other
>3926	Argument	other_idx
>3927	Identifier	other_idx
>3928	Argument	other
>3929	Identifier	other
>3930	Callee	GetKey
>3931	Identifier	GetKey
>3932	CompoundStatement	 
>3933	IfStatement	if ( proj_error >= 32.0 )
>3934	ElseStatement	else
>3935	CompoundStatement	 
>3936	ExpressionStatement	 
>3937	CallExpression	pt_views [ pt_idx ] . push_back ( ImageKey ( i , other_idx ) )
>3938	ArgumentList	ImageKey ( i , other_idx )
>3939	Argument	ImageKey ( i , other_idx )
>3940	CallExpression	ImageKey ( i , other_idx )
>3941	ArgumentList	i
>3942	Argument	other_idx
>3943	Identifier	other_idx
>3944	Argument	i
>3945	Identifier	i
>3946	Callee	ImageKey
>3947	Identifier	ImageKey
>3948	Callee	pt_views [ pt_idx ] . push_back
>3949	MemberAccess	pt_views [ pt_idx ] . push_back
>3950	Identifier	push_back
>3951	ArrayIndexing	pt_views [ pt_idx ]
>3952	Identifier	pt_idx
>3953	Identifier	pt_views
>3954	ExpressionStatement	 
>3955	AssignmentExpr	GetKey ( other , other_idx ) . m_extra = pt_idx
>3956	Identifier	pt_idx
>3957	MemberAccess	GetKey ( other , other_idx ) . m_extra
>3958	Identifier	m_extra
>3959	CallExpression	GetKey ( other , other_idx )
>3960	ArgumentList	other
>3961	Argument	other_idx
>3962	Identifier	other_idx
>3963	Argument	other
>3964	Identifier	other
>3965	Callee	GetKey
>3966	Identifier	GetKey
>3967	ExpressionStatement	 
>3968	Statement	 
>3969	Statement	 
>3970	Statement	 
>3971	Statement	 
>3972	Statement	 
>3973	Statement	 
>3974	Statement	 
>3975	Statement	 
>3976	Statement	 
>3977	Statement	 
>3978	Statement	 
>3979	Statement	 
>3980	Statement	 
>3981	Statement	 
>3982	Statement	 
>3983	CompoundStatement	 
>3984	ExpressionStatement	 
>3985	Statement	 
>3986	Statement	 
>3987	Statement	 
>3988	Statement	 
>3989	Statement	 
>3990	Statement	 
>3991	Statement	 
>3992	Statement	 
>3993	Statement	 
>3994	Statement	 
>3995	Statement	 
>3996	Statement	 
>3997	Statement	 
>3998	Statement	 
>3999	Statement	 
>4000	Statement	 
>4001	Statement	 
>4002	Condition	 
>4003	RelationalExpression	proj_error >= 32.0
>4004	PrimaryExpression	32.0
>4005	Identifier	proj_error
>4006	IdentifierDeclStatement	 
>4007	IdentifierDecl	proj_error = sqrt ( dx * dx + dy * dy )
>4008	AssignmentExpr	proj_error = sqrt ( dx * dx + dy * dy )
>4009	CallExpression	sqrt ( dx * dx + dy * dy )
>4010	ArgumentList	dx * dx + dy * dy
>4011	Argument	dx * dx + dy * dy
>4012	AdditiveExpression	dx * dx + dy * dy
>4013	MultiplicativeExpression	dy * dy
>4014	Identifier	dy
>4015	Identifier	dy
>4016	MultiplicativeExpression	dx * dx
>4017	Identifier	dx
>4018	Identifier	dx
>4019	Callee	sqrt
>4020	Identifier	sqrt
>4021	Identifier	proj_error
>4022	Identifier	proj_error
>4023	IdentifierDeclType	double
>4024	IdentifierDeclStatement	 
>4025	IdentifierDecl	dy = GetKey ( other , other_idx ) . m_y - Vy ( pr )
>4026	AssignmentExpr	dy = GetKey ( other , other_idx ) . m_y - Vy ( pr )
>4027	AdditiveExpression	GetKey ( other , other_idx ) . m_y - Vy ( pr )
>4028	CallExpression	Vy ( pr )
>4029	ArgumentList	pr
>4030	Argument	pr
>4031	Identifier	pr
>4032	Callee	Vy
>4033	Identifier	Vy
>4034	MemberAccess	GetKey ( other , other_idx ) . m_y
>4035	Identifier	m_y
>4036	CallExpression	GetKey ( other , other_idx )
>4037	ArgumentList	other
>4038	Argument	other_idx
>4039	Identifier	other_idx
>4040	Argument	other
>4041	Identifier	other
>4042	Callee	GetKey
>4043	Identifier	GetKey
>4044	Identifier	dy
>4045	Identifier	dy
>4046	IdentifierDeclType	double
>4047	IdentifierDeclStatement	 
>4048	IdentifierDecl	dx = GetKey ( other , other_idx ) . m_x - Vx ( pr )
>4049	AssignmentExpr	dx = GetKey ( other , other_idx ) . m_x - Vx ( pr )
>4050	AdditiveExpression	GetKey ( other , other_idx ) . m_x - Vx ( pr )
>4051	CallExpression	Vx ( pr )
>4052	ArgumentList	pr
>4053	Argument	pr
>4054	Identifier	pr
>4055	Callee	Vx
>4056	Identifier	Vx
>4057	MemberAccess	GetKey ( other , other_idx ) . m_x
>4058	Identifier	m_x
>4059	CallExpression	GetKey ( other , other_idx )
>4060	ArgumentList	other
>4061	Argument	other_idx
>4062	Identifier	other_idx
>4063	Argument	other
>4064	Identifier	other
>4065	Callee	GetKey
>4066	Identifier	GetKey
>4067	Identifier	dx
>4068	Identifier	dx
>4069	IdentifierDeclType	double
>4070	IdentifierDeclStatement	 
>4071	IdentifierDecl	pr = sfm_project_final ( cameras + i , points [ pt_idx ] , true , m_estimate_distortion )
>4072	AssignmentExpr	pr = sfm_project_final ( cameras + i , points [ pt_idx ] , true , m_estimate_distortion )
>4073	CallExpression	sfm_project_final ( cameras + i , points [ pt_idx ] , true , m_estimate_distortion )
>4074	ArgumentList	cameras + i
>4075	Argument	m_estimate_distortion
>4076	Identifier	m_estimate_distortion
>4077	Argument	true
>4078	Identifier	true
>4079	Argument	points [ pt_idx ]
>4080	ArrayIndexing	points [ pt_idx ]
>4081	Identifier	pt_idx
>4082	Identifier	points
>4083	Argument	cameras + i
>4084	AdditiveExpression	cameras + i
>4085	Identifier	i
>4086	Identifier	cameras
>4087	Callee	sfm_project_final
>4088	Identifier	sfm_project_final
>4089	Identifier	pr
>4090	Identifier	pr
>4091	IdentifierDeclType	v2_t
>4092	IdentifierDeclStatement	 
>4093	IdentifierDecl	pt_idx = GetKey ( image_idx , this_idx ) . m_extra
>4094	AssignmentExpr	pt_idx = GetKey ( image_idx , this_idx ) . m_extra
>4095	MemberAccess	GetKey ( image_idx , this_idx ) . m_extra
>4096	Identifier	m_extra
>4097	CallExpression	GetKey ( image_idx , this_idx )
>4098	ArgumentList	image_idx
>4099	Argument	this_idx
>4100	Identifier	this_idx
>4101	Argument	image_idx
>4102	Identifier	image_idx
>4103	Callee	GetKey
>4104	Identifier	GetKey
>4105	Identifier	pt_idx
>4106	Identifier	pt_idx
>4107	IdentifierDeclType	int
>4108	Condition	 
>4109	AndExpression	GetKey ( other , other_idx ) . m_extra == - 1 && GetKey ( image_idx , this_idx ) . m_extra >= 0
>4110	RelationalExpression	GetKey ( image_idx , this_idx ) . m_extra >= 0
>4111	PrimaryExpression	0
>4112	MemberAccess	GetKey ( image_idx , this_idx ) . m_extra
>4113	Identifier	m_extra
>4114	CallExpression	GetKey ( image_idx , this_idx )
>4115	ArgumentList	image_idx
>4116	Argument	this_idx
>4117	Identifier	this_idx
>4118	Argument	image_idx
>4119	Identifier	image_idx
>4120	Callee	GetKey
>4121	Identifier	GetKey
>4122	EqualityExpression	GetKey ( other , other_idx ) . m_extra == - 1
>4123	UnaryOp	- 1
>4124	PrimaryExpression	1
>4125	UnaryOperator	-
>4126	MemberAccess	GetKey ( other , other_idx ) . m_extra
>4127	Identifier	m_extra
>4128	CallExpression	GetKey ( other , other_idx )
>4129	ArgumentList	other
>4130	Argument	other_idx
>4131	Identifier	other_idx
>4132	Argument	other
>4133	Identifier	other
>4134	Callee	GetKey
>4135	Identifier	GetKey
>4136	IfStatement	if ( GetKey ( other , other_idx ) . m_extra == - 2 )
>4137	ElseStatement	else
>4138	IfStatement	if ( GetKey ( image_idx , this_idx ) . m_extra == - 2 )
>4139	CompoundStatement	 
>4140	ContinueStatement	 
>4141	Condition	 
>4142	EqualityExpression	GetKey ( image_idx , this_idx ) . m_extra == - 2
>4143	UnaryOp	- 2
>4144	PrimaryExpression	2
>4145	UnaryOperator	-
>4146	MemberAccess	GetKey ( image_idx , this_idx ) . m_extra
>4147	Identifier	m_extra
>4148	CallExpression	GetKey ( image_idx , this_idx )
>4149	ArgumentList	image_idx
>4150	Argument	this_idx
>4151	Identifier	this_idx
>4152	Argument	image_idx
>4153	Identifier	image_idx
>4154	Callee	GetKey
>4155	Identifier	GetKey
>4156	CompoundStatement	 
>4157	ContinueStatement	 
>4158	Condition	 
>4159	EqualityExpression	GetKey ( other , other_idx ) . m_extra == - 2
>4160	UnaryOp	- 2
>4161	PrimaryExpression	2
>4162	UnaryOperator	-
>4163	MemberAccess	GetKey ( other , other_idx ) . m_extra
>4164	Identifier	m_extra
>4165	CallExpression	GetKey ( other , other_idx )
>4166	ArgumentList	other
>4167	Argument	other_idx
>4168	Identifier	other_idx
>4169	Argument	other
>4170	Identifier	other
>4171	Callee	GetKey
>4172	Identifier	GetKey
>4173	IfStatement	if ( image_idx == first )
>4174	ElseStatement	else
>4175	CompoundStatement	 
>4176	ExpressionStatement	 
>4177	AssignmentExpr	this_idx = idx2
>4178	Identifier	idx2
>4179	Identifier	this_idx
>4180	ExpressionStatement	 
>4181	AssignmentExpr	other_idx = idx1
>4182	Identifier	idx1
>4183	Identifier	other_idx
>4184	CompoundStatement	 
>4185	ExpressionStatement	 
>4186	AssignmentExpr	other_idx = idx2
>4187	Identifier	idx2
>4188	Identifier	other_idx
>4189	ExpressionStatement	 
>4190	AssignmentExpr	this_idx = idx1
>4191	Identifier	idx1
>4192	Identifier	this_idx
>4193	Condition	 
>4194	EqualityExpression	image_idx == first
>4195	Identifier	first
>4196	Identifier	image_idx
>4197	IdentifierDeclStatement	 
>4198	IdentifierDecl	other_idx
>4199	Identifier	other_idx
>4200	IdentifierDeclType	int
>4201	IdentifierDecl	this_idx
>4202	Identifier	this_idx
>4203	IdentifierDeclType	int
>4204	IdentifierDeclStatement	 
>4205	IdentifierDecl	idx2 = list [ j ] . m_idx2
>4206	AssignmentExpr	idx2 = list [ j ] . m_idx2
>4207	MemberAccess	list [ j ] . m_idx2
>4208	Identifier	m_idx2
>4209	ArrayIndexing	list [ j ]
>4210	Identifier	j
>4211	Identifier	list
>4212	Identifier	idx2
>4213	Identifier	idx2
>4214	IdentifierDeclType	int
>4215	IdentifierDeclStatement	 
>4216	IdentifierDecl	idx1 = list [ j ] . m_idx1
>4217	AssignmentExpr	idx1 = list [ j ] . m_idx1
>4218	MemberAccess	list [ j ] . m_idx1
>4219	Identifier	m_idx1
>4220	ArrayIndexing	list [ j ]
>4221	Identifier	j
>4222	Identifier	list
>4223	Identifier	idx1
>4224	Identifier	idx1
>4225	IdentifierDeclType	int
>4226	IncDecOp	 
>4227	IncDec	++
>4228	Identifier	j
>4229	Condition	 
>4230	RelationalExpression	j < ( int ) list . size ( )
>4231	CastExpression	( int ) list . size ( )
>4232	CallExpression	list . size ( )
>4233	ArgumentList	 
>4234	Callee	list . size
>4235	MemberAccess	list . size
>4236	Identifier	size
>4237	Identifier	list
>4238	CastTarget	int
>4239	Identifier	j
>4240	ForInit	 
>4241	IdentifierDeclStatement	int j = 0 ;
>4242	IdentifierDecl	j = 0
>4243	AssignmentExpr	j = 0
>4244	PrimaryExpression	0
>4245	Identifier	j
>4246	Identifier	j
>4247	IdentifierDeclType	int
>4248	IdentifierDeclStatement	 
>4249	IdentifierDecl	& list = m_matches . GetMatchList ( idx )
>4250	AssignmentExpr	& list = m_matches . GetMatchList ( idx )
>4251	CallExpression	m_matches . GetMatchList ( idx )
>4252	ArgumentList	idx
>4253	Argument	idx
>4254	Identifier	idx
>4255	Callee	m_matches . GetMatchList
>4256	MemberAccess	m_matches . GetMatchList
>4257	Identifier	GetMatchList
>4258	Identifier	m_matches
>4259	Identifier	list
>4260	Identifier	list
>4261	IdentifierDeclType	std 
>4262	IfStatement	if ( disti < m_min_camera_distance_ratio * reference_baseline )
>4263	CompoundStatement	 
>4264	ContinueStatement	 
>4265	ExpressionStatement	 
>4266	CallExpression	m_matches . ClearMatch ( idx )
>4267	ArgumentList	idx
>4268	Argument	idx
>4269	Identifier	idx
>4270	Callee	m_matches . ClearMatch
>4271	MemberAccess	m_matches . ClearMatch
>4272	Identifier	ClearMatch
>4273	Identifier	m_matches
>4274	ExpressionStatement	 
>4275	CallExpression	printf ( \"  Distance too low (possible panorama?)\n\" )
>4276	ArgumentList	\"  Distance too low (possible panorama?)\n\"
>4277	Argument	\"  Distance too low (possible panorama?)\n\"
>4278	PrimaryExpression	\"  Distance too low (possible panorama?)\n\"
>4279	Callee	printf
>4280	Identifier	printf
>4281	Condition	 
>4282	RelationalExpression	disti < m_min_camera_distance_ratio * reference_baseline
>4283	MultiplicativeExpression	m_min_camera_distance_ratio * reference_baseline
>4284	Identifier	reference_baseline
>4285	Identifier	m_min_camera_distance_ratio
>4286	Identifier	disti
>4287	ExpressionStatement	 
>4288	CallExpression	printf ( \"  dist0, disti = %0.3e, %0.3e\n\" , reference_baseline , disti )
>4289	ArgumentList	\"  dist0, disti = %0.3e, %0.3e\n\"
>4290	Argument	disti
>4291	Identifier	disti
>4292	Argument	reference_baseline
>4293	Identifier	reference_baseline
>4294	Argument	\"  dist0, disti = %0.3e, %0.3e\n\"
>4295	PrimaryExpression	\"  dist0, disti = %0.3e, %0.3e\n\"
>4296	Callee	printf
>4297	Identifier	printf
>4298	IdentifierDeclStatement	 
>4299	IdentifierDecl	disti = GetCameraDistance ( cameras + i , cameras + camera_idx )
>4300	AssignmentExpr	disti = GetCameraDistance ( cameras + i , cameras + camera_idx )
>4301	CallExpression	GetCameraDistance ( cameras + i , cameras + camera_idx )
>4302	ArgumentList	cameras + i
>4303	Argument	cameras + camera_idx
>4304	AdditiveExpression	cameras + camera_idx
>4305	Identifier	camera_idx
>4306	Identifier	cameras
>4307	Argument	cameras + i
>4308	AdditiveExpression	cameras + i
>4309	Identifier	i
>4310	Identifier	cameras
>4311	Callee	GetCameraDistance
>4312	Identifier	GetCameraDistance
>4313	Identifier	disti
>4314	Identifier	disti
>4315	IdentifierDeclType	double
>4316	ExpressionStatement	 
>4317	CallExpression	printf ( \"  Matches[%d,%d] = %d\n\" , image_idx , other , ( int ) m_matches . GetNumMatches ( idx ) )
>4318	ArgumentList	\"  Matches[%d,%d] = %d\n\"
>4319	Argument	( int ) m_matches . GetNumMatches ( idx )
>4320	CastExpression	( int ) m_matches . GetNumMatches ( idx )
>4321	CallExpression	m_matches . GetNumMatches ( idx )
>4322	ArgumentList	idx
>4323	Argument	idx
>4324	Identifier	idx
>4325	Callee	m_matches . GetNumMatches
>4326	MemberAccess	m_matches . GetNumMatches
>4327	Identifier	GetNumMatches
>4328	Identifier	m_matches
>4329	CastTarget	int
>4330	Argument	other
>4331	Identifier	other
>4332	Argument	image_idx
>4333	Identifier	image_idx
>4334	Argument	\"  Matches[%d,%d] = %d\n\"
>4335	PrimaryExpression	\"  Matches[%d,%d] = %d\n\"
>4336	Callee	printf
>4337	Identifier	printf
>4338	ExpressionStatement	 
>4339	CallExpression	SetMatchesFromTracks ( first , second )
>4340	ArgumentList	first
>4341	Argument	second
>4342	Identifier	second
>4343	Argument	first
>4344	Identifier	first
>4345	Callee	SetMatchesFromTracks
>4346	Identifier	SetMatchesFromTracks
>4347	IdentifierDeclStatement	 
>4348	IdentifierDecl	idx = GetMatchIndex ( first , second )
>4349	AssignmentExpr	idx = GetMatchIndex ( first , second )
>4350	CallExpression	GetMatchIndex ( first , second )
>4351	ArgumentList	first
>4352	Argument	second
>4353	Identifier	second
>4354	Argument	first
>4355	Identifier	first
>4356	Callee	GetMatchIndex
>4357	Identifier	GetMatchIndex
>4358	Identifier	idx
>4359	Identifier	idx
>4360	IdentifierDeclType	MatchIndex
>4361	IdentifierDeclStatement	 
>4362	IdentifierDecl	second = MAX ( image_idx , other )
>4363	AssignmentExpr	second = MAX ( image_idx , other )
>4364	CallExpression	MAX ( image_idx , other )
>4365	ArgumentList	image_idx
>4366	Argument	other
>4367	Identifier	other
>4368	Argument	image_idx
>4369	Identifier	image_idx
>4370	Callee	MAX
>4371	Identifier	MAX
>4372	Identifier	second
>4373	Identifier	second
>4374	IdentifierDeclType	int
>4375	IdentifierDeclStatement	 
>4376	IdentifierDecl	first = MIN ( image_idx , other )
>4377	AssignmentExpr	first = MIN ( image_idx , other )
>4378	CallExpression	MIN ( image_idx , other )
>4379	ArgumentList	image_idx
>4380	Argument	other
>4381	Identifier	other
>4382	Argument	image_idx
>4383	Identifier	image_idx
>4384	Callee	MIN
>4385	Identifier	MIN
>4386	Identifier	first
>4387	Identifier	first
>4388	IdentifierDeclType	int
>4389	IfStatement	if ( other == image_idx )
>4390	ContinueStatement	 
>4391	Condition	 
>4392	EqualityExpression	other == image_idx
>4393	Identifier	image_idx
>4394	Identifier	other
>4395	IdentifierDeclStatement	 
>4396	IdentifierDecl	other = added_order [ i ]
>4397	AssignmentExpr	other = added_order [ i ]
>4398	ArrayIndexing	added_order [ i ]
>4399	Identifier	i
>4400	Identifier	added_order
>4401	Identifier	other
>4402	Identifier	other
>4403	IdentifierDeclType	int
>4404	IncDecOp	 
>4405	IncDec	++
>4406	Identifier	i
>4407	Condition	 
>4408	RelationalExpression	i < num_cameras
>4409	Identifier	num_cameras
>4410	Identifier	i
>4411	ForInit	 
>4412	IdentifierDeclStatement	int i = 0 ;
>4413	IdentifierDecl	i = 0
>4414	AssignmentExpr	i = 0
>4415	PrimaryExpression	0
>4416	Identifier	i
>4417	Identifier	i
>4418	IdentifierDeclType	int
>4419	IdentifierDeclStatement	 
>4420	IdentifierDecl	image_idx = added_order [ camera_idx ]
>4421	AssignmentExpr	image_idx = added_order [ camera_idx ]
>4422	ArrayIndexing	added_order [ camera_idx ]
>4423	Identifier	camera_idx
>4424	Identifier	added_order
>4425	Identifier	image_idx
>4426	Identifier	image_idx
>4427	IdentifierDeclType	int
>4428	IdentifierDeclStatement	 
>4429	IdentifierDecl	pt_count = num_points
>4430	AssignmentExpr	pt_count = num_points
>4431	Identifier	num_points
>4432	Identifier	num_points
>4433	Identifier	pt_count
>4434	IdentifierDeclType	int
<3=21,20,4
<4=17,14,11,8,5
<5=7,6
<8=10,9
<11=13,12
<14=16,15
<17=19,18
<21=614,607,598,589,262,240,236,50,39,38,37,36,34,33,32,31,29,28,27,26,24,22
<22=23
<24=25
<29=30
<34=35
<39=40
<40=49,41
<41=47,42
<42=43
<43=44
<44=46,45
<47=48
<50=228,224,221,51
<51=210,201,190,176,148,94,78,62,52
<52=53
<53=61,54
<54=58,55
<55=57,56
<58=60,59
<62=63
<63=77,76,64
<64=75,65
<65=69,66
<66=68,67
<69=73,70
<70=71
<71=72
<73=74
<78=79
<79=93,92,80
<80=91,81
<81=85,82
<82=84,83
<85=89,86
<86=87
<87=88
<89=90
<94=146,95
<95=123,96
<96=97
<97=117,98
<98=115,113,106,99
<99=100
<100=104,101
<101=102
<102=103
<104=105
<106=107
<107=111,108
<108=109
<109=110
<111=112
<113=114
<115=116
<117=118
<118=120,119
<120=122,121
<123=135,124
<124=134,133,125
<125=132,126
<126=130,127
<127=128
<128=129
<130=131
<135=145,144,136
<136=143,137
<137=141,138
<138=139
<139=140
<141=142
<146=147
<148=149
<149=175,174,150
<150=173,151
<151=171,152
<152=167,165,159,153
<153=154
<154=157,156,155
<157=158
<159=160
<160=163,162,161
<163=164
<165=166
<167=168
<168=170,169
<171=172
<176=177
<177=189,188,178
<178=187,179
<179=185,180
<180=183,181
<181=182
<183=184
<185=186
<190=191
<191=200,199,192
<192=198,193
<193=195,194
<195=197,196
<201=202
<202=209,208,203
<203=207,204
<204=206,205
<210=211
<211=220,219,212
<212=218,213
<213=215,214
<215=217,216
<221=223,222
<224=225
<225=227,226
<228=229
<229=230
<230=235,234,231
<231=233,232
<236=237
<237=239,238
<240=241
<241=261,260,242
<242=259,243
<243=257,244
<244=255,253,251,249,245
<245=246
<246=248,247
<249=250
<251=252
<253=254
<255=256
<257=258
<262=581,577,574,263
<263=567,556,547,536,522,507,465,456,445,434,429,410,389,372,366,345,264
<264=341,319,265
<265=266
<266=292,267
<267=268
<268=290,269
<269=288,286,280,276,270
<270=271
<271=275,272
<272=274,273
<276=277
<277=279,278
<280=281
<281=285,282
<282=284,283
<286=287
<288=289
<290=291
<292=293
<293=317,294
<294=315,313,311,309,305,301,295
<295=296
<296=300,297
<297=299,298
<301=302
<302=304,303
<305=306
<306=308,307
<309=310
<311=312
<313=314
<315=316
<317=318
<319=320
<320=321
<321=339,322
<322=333,329,323
<323=324
<324=328,325
<325=327,326
<329=330
<330=332,331
<333=334
<334=338,335
<335=337,336
<339=340
<341=342
<342=344,343
<345=346
<346=364,347
<347=358,354,348
<348=349
<349=353,350
<350=352,351
<354=355
<355=357,356
<358=359
<359=363,360
<360=362,361
<364=365
<366=367
<367=371,368
<368=370,369
<372=373
<373=386,374
<374=384,375
<375=380,376
<376=377
<377=379,378
<380=381
<381=383,382
<384=385
<386=388,387
<389=390
<390=407,391
<391=405,392
<392=399,393
<393=394
<394=398,395
<395=397,396
<399=400
<400=404,401
<401=403,402
<405=406
<407=409,408
<410=411
<411=427,412
<412=425,423,421,419,417,415,413
<413=414
<415=416
<417=418
<419=420
<421=422
<423=424
<425=426
<427=428
<429=430
<430=433,432,431
<434=435
<435=443,436
<436=441,439,437
<437=438
<439=440
<441=442
<443=444
<445=446
<446=454,447
<447=450,448
<448=449
<450=451
<451=453,452
<454=455
<456=461,457
<457=460,459,458
<461=464,463,462
<465=505,466
<466=488,467
<467=468
<468=482,469
<469=480,478,474,470
<470=471
<471=473,472
<474=475
<475=477,476
<478=479
<480=481
<482=483
<483=485,484
<485=487,486
<488=497,489
<489=496,495,490
<490=494,491
<491=493,492
<497=504,503,498
<498=502,499
<499=501,500
<505=506
<507=508
<508=521,520,519,509
<509=518,510
<510=515,512,511
<512=514,513
<515=517,516
<522=523
<523=535,534,524
<524=533,525
<525=531,526
<526=529,527
<527=528
<529=530
<531=532
<536=537
<537=546,545,538
<538=544,539
<539=541,540
<541=543,542
<547=548
<548=555,554,549
<549=553,550
<550=552,551
<556=557
<557=566,565,558
<558=564,559
<559=561,560
<561=563,562
<567=568
<568=573,572,569
<569=571,570
<574=576,575
<577=578
<578=580,579
<581=582
<582=583
<583=588,587,584
<584=586,585
<589=590
<590=597,596,591
<591=595,592
<592=594,593
<598=599
<599=606,605,600
<600=604,601
<601=603,602
<607=608
<608=613,612,609
<609=611,610
<614=615
<615=627,626,616
<616=625,617
<617=624,618
<618=620,619
<620=621
<621=623,622
<687=705,704,688
<688=701,698,695,692,689
<689=691,690
<692=694,693
<695=697,696
<698=700,699
<701=703,702
<705=998,987,978,967,953,947,932,890,881,870,859,854,835,830,809,798,787,723,706
<706=707
<707=721,708
<708=717,713,709
<709=710
<710=712,711
<713=714
<714=716,715
<717=718
<718=720,719
<721=722
<723=783,782,724
<724=725
<725=765,760,745,726
<726=727
<727=743,728
<728=741,739,737,735,733,731,729
<729=730
<731=732
<733=734
<735=736
<737=738
<739=740
<741=742
<743=744
<745=746
<746=758,747
<747=756,754,752,750,748
<748=749
<750=751
<752=753
<754=755
<756=757
<758=759
<760=761
<761=764,763,762
<765=766
<766=780,767
<767=778,774,768
<768=769
<769=773,770
<770=772,771
<774=775
<775=777,776
<778=779
<780=781
<783=784
<784=786,785
<787=788
<788=797,796,795,789
<789=794,790
<790=793,792,791
<798=799
<799=808,807,806,800
<800=805,801
<801=804,803,802
<809=810
<810=828,811
<811=826,824,822,820,816,814,812
<812=813
<814=815
<816=817
<817=819,818
<820=821
<822=823
<824=825
<826=827
<828=829
<830=831
<831=834,833,832
<835=836
<836=852,837
<837=850,848,846,844,842,840,838
<838=839
<840=841
<842=843
<844=845
<846=847
<848=849
<850=851
<852=853
<854=855
<855=858,857,856
<859=860
<860=868,861
<861=866,864,862
<862=863
<864=865
<866=867
<868=869
<870=871
<871=879,872
<872=875,873
<873=874
<875=876
<876=878,877
<879=880
<881=886,882
<882=885,884,883
<886=889,888,887
<890=930,891
<891=913,892
<892=893
<893=907,894
<894=905,903,899,895
<895=896
<896=898,897
<899=900
<900=902,901
<903=904
<905=906
<907=908
<908=910,909
<910=912,911
<913=922,914
<914=921,920,915
<915=919,916
<916=918,917
<922=929,928,923
<923=927,924
<924=926,925
<930=931
<932=933
<933=946,945,944,934
<934=943,935
<935=940,937,936
<937=939,938
<940=942,941
<947=948
<948=952,949
<949=951,950
<953=954
<954=966,965,955
<955=964,956
<956=962,957
<957=960,958
<958=959
<960=961
<962=963
<967=968
<968=977,976,969
<969=975,970
<970=972,971
<972=974,973
<978=979
<979=986,985,980
<980=984,981
<981=983,982
<987=988
<988=997,996,989
<989=995,990
<990=992,991
<992=994,993
<998=999
<999=1004,1003,1000
<1000=1002,1001
<1048=1054,1053,1049
<1049=1050
<1050=1052,1051
<1054=1119,1112,1062,1055
<1055=1056
<1056=1060,1057
<1057=1058
<1058=1059
<1060=1061
<1062=1104,1100,1097,1063
<1063=1078,1064
<1064=1072,1065
<1065=1066
<1066=1070,1067
<1067=1068
<1068=1069
<1070=1071
<1072=1073
<1073=1077,1074
<1074=1076,1075
<1078=1079
<1079=1095,1080
<1080=1093,1087,1081
<1081=1082
<1082=1084,1083
<1084=1086,1085
<1087=1088
<1088=1090,1089
<1090=1092,1091
<1093=1094
<1095=1096
<1097=1099,1098
<1100=1101
<1101=1103,1102
<1104=1105
<1105=1106
<1106=1111,1110,1107
<1107=1109,1108
<1112=1113
<1113=1117,1114
<1114=1115
<1115=1116
<1117=1118
<1119=1120
<1120=1132,1131,1121
<1121=1130,1122
<1122=1129,1123
<1123=1125,1124
<1125=1126
<1126=1128,1127
<1144=1177,1176,1145
<1145=1173,1170,1167,1164,1161,1158,1155,1152,1149,1146
<1146=1148,1147
<1149=1151,1150
<1152=1154,1153
<1155=1157,1156
<1158=1160,1159
<1161=1163,1162
<1164=1166,1165
<1167=1169,1168
<1170=1172,1171
<1173=1175,1174
<1177=2424,2420,2406,2399,2374,2176,2175,2174,2173,2171,2164,2157,2150,2143,2136,2122,1216,1207,1198,1189,1180,1178
<1178=1179
<1180=1181
<1181=1187,1182
<1182=1185,1183
<1183=1184
<1185=1186
<1187=1188
<1189=1190
<1190=1196,1191
<1191=1194,1192
<1192=1193
<1194=1195
<1196=1197
<1198=1199
<1199=1205,1200
<1200=1203,1201
<1201=1202
<1203=1204
<1205=1206
<1207=1208
<1208=1214,1209
<1209=1212,1210
<1210=1211
<1212=1213
<1214=1215
<1216=2114,2110,2107,1217
<1217=2091,2085,2078,2069,2062,2055,2048,2041,1690,1654,1650,1646,1600,1566,1559,1502,1477,1470,1461,1454,1436,1429,1423,1410,1401,1388,1372,1356,1340,1319,1308,1243,1234,1226,1222,1218
<1218=1219
<1219=1221,1220
<1222=1223
<1223=1225,1224
<1226=1227
<1227=1229,1228
<1229=1231,1230
<1231=1233,1232
<1234=1235
<1235=1242,1241,1236
<1236=1240,1237
<1237=1239,1238
<1243=1300,1296,1293,1244
<1244=1280,1271,1258,1245
<1245=1246
<1246=1248,1247
<1248=1250,1249
<1250=1256,1251
<1251=1254,1252
<1252=1253
<1254=1255
<1256=1257
<1258=1259
<1259=1270,1269,1260
<1260=1268,1261
<1261=1263,1262
<1263=1265,1264
<1265=1267,1266
<1271=1272
<1272=1279,1278,1273
<1273=1277,1274
<1274=1276,1275
<1280=1281
<1281=1292,1291,1282
<1282=1290,1283
<1283=1285,1284
<1285=1287,1286
<1287=1289,1288
<1293=1295,1294
<1296=1297
<1297=1299,1298
<1300=1301
<1301=1302
<1302=1307,1306,1303
<1303=1305,1304
<1308=1309
<1309=1315,1310
<1310=1311
<1311=1312
<1312=1314,1313
<1315=1316
<1316=1318,1317
<1319=1320
<1320=1337,1321
<1321=1335,1322
<1322=1331,1327,1323
<1323=1324
<1324=1326,1325
<1327=1328
<1328=1330,1329
<1331=1332
<1332=1334,1333
<1335=1336
<1337=1339,1338
<1340=1341
<1341=1355,1354,1342
<1342=1353,1343
<1343=1345,1344
<1345=1351,1346
<1346=1349,1347
<1347=1348
<1349=1350
<1351=1352
<1356=1357
<1357=1371,1370,1358
<1358=1369,1359
<1359=1361,1360
<1361=1367,1362
<1362=1365,1363
<1363=1364
<1365=1366
<1367=1368
<1372=1373
<1373=1387,1386,1374
<1374=1385,1375
<1375=1377,1376
<1377=1383,1378
<1378=1381,1379
<1379=1380
<1381=1382
<1383=1384
<1388=1389
<1389=1400,1399,1390
<1390=1398,1391
<1391=1393,1392
<1393=1395,1394
<1395=1397,1396
<1401=1402
<1402=1409,1408,1403
<1403=1407,1404
<1404=1406,1405
<1410=1411
<1411=1422,1421,1412
<1412=1420,1413
<1413=1415,1414
<1415=1417,1416
<1417=1419,1418
<1423=1424
<1424=1426,1425
<1426=1428,1427
<1429=1430
<1430=1434,1431
<1431=1432
<1432=1433
<1434=1435
<1436=1437
<1437=1452,1438
<1438=1450,1443,1441,1439
<1439=1440
<1441=1442
<1443=1444
<1444=1448,1445
<1445=1446
<1446=1447
<1448=1449
<1450=1451
<1452=1453
<1454=1455
<1455=1459,1456
<1456=1457
<1457=1458
<1459=1460
<1461=1462
<1462=1468,1463
<1463=1464
<1464=1465
<1465=1467,1466
<1468=1469
<1470=1471
<1471=1475,1472
<1472=1473
<1473=1474
<1475=1476
<1477=1498,1478
<1478=1494,1487,1480,1479
<1480=1481
<1481=1485,1482
<1482=1483
<1483=1484
<1485=1486
<1487=1488
<1488=1492,1489
<1489=1490
<1490=1491
<1492=1493
<1494=1495
<1495=1497,1496
<1498=1499
<1499=1501,1500
<1502=1551,1547,1544,1503
<1503=1531,1515,1504
<1504=1511,1505
<1505=1507,1506
<1507=1508
<1508=1510,1509
<1511=1512
<1512=1514,1513
<1515=1516
<1516=1530,1529,1517
<1517=1528,1518
<1518=1526,1519
<1519=1524,1520
<1520=1521
<1521=1523,1522
<1524=1525
<1526=1527
<1531=1532
<1532=1543,1542,1533
<1533=1541,1534
<1534=1536,1535
<1536=1538,1537
<1538=1540,1539
<1544=1546,1545
<1547=1548
<1548=1550,1549
<1551=1552
<1552=1553
<1553=1558,1557,1554
<1554=1556,1555
<1559=1560
<1560=1565,1564,1561
<1561=1563,1562
<1566=1589,1567
<1567=1585,1576,1569,1568
<1569=1570
<1570=1574,1571
<1571=1572
<1572=1573
<1574=1575
<1576=1577
<1577=1583,1578
<1578=1581,1579
<1579=1580
<1581=1582
<1583=1584
<1585=1586
<1586=1588,1587
<1589=1590
<1590=1594,1591
<1591=1593,1592
<1594=1598,1595
<1595=1596
<1596=1597
<1598=1599
<1600=1642,1622,1601
<1601=1602
<1602=1603
<1603=1604
<1604=1621,1605
<1605=1619,1606
<1606=1615,1613,1611,1609,1607
<1607=1608
<1609=1610
<1611=1612
<1613=1614
<1615=1616
<1616=1618,1617
<1619=1620
<1622=1623
<1623=1624
<1624=1641,1625
<1625=1639,1626
<1626=1635,1633,1631,1629,1627
<1627=1628
<1629=1630
<1631=1632
<1633=1634
<1635=1636
<1636=1638,1637
<1639=1640
<1642=1643
<1643=1645,1644
<1646=1647
<1647=1649,1648
<1650=1651
<1651=1653,1652
<1654=1682,1655
<1655=1678,1664,1657,1656
<1657=1658
<1658=1662,1659
<1659=1660
<1660=1661
<1662=1663
<1664=1665
<1665=1676,1666
<1666=1674,1667
<1667=1668
<1668=1672,1669
<1669=1670
<1670=1671
<1672=1673
<1674=1675
<1676=1677
<1678=1679
<1679=1681,1680
<1682=1683
<1683=1687,1684
<1684=1686,1685
<1687=1689,1688
<1690=2033,2029,2026,1691
<1691=1692
<1692=2016,2012,2009,1693
<1693=1996,1987,1974,1961,1952,1939,1925,1911,1893,1875,1771,1749,1740,1725,1705,1694
<1694=1699,1695
<1695=1696
<1696=1698,1697
<1699=1700
<1700=1704,1701
<1701=1703,1702
<1705=1706
<1706=1724,1723,1707
<1707=1722,1708
<1708=1720,1709
<1709=1716,1712,1710
<1710=1711
<1712=1713
<1713=1715,1714
<1716=1717
<1717=1719,1718
<1720=1721
<1725=1731,1726
<1726=1727
<1727=1728
<1728=1730,1729
<1731=1732
<1732=1734,1733
<1734=1738,1735
<1735=1736
<1736=1737
<1738=1739
<1740=1745,1741
<1741=1742
<1742=1744,1743
<1745=1746
<1746=1748,1747
<1749=1750
<1750=1770,1769,1751
<1751=1768,1752
<1752=1766,1753
<1753=1764,1762,1758,1754
<1754=1755
<1755=1757,1756
<1758=1759
<1759=1761,1760
<1762=1763
<1764=1765
<1766=1767
<1771=1873,1772
<1772=1850,1827,1800,1773
<1773=1774
<1774=1794,1775
<1775=1792,1790,1783,1776
<1776=1777
<1777=1781,1778
<1778=1779
<1779=1780
<1781=1782
<1783=1784
<1784=1788,1785
<1785=1786
<1786=1787
<1788=1789
<1790=1791
<1792=1793
<1794=1795
<1795=1797,1796
<1797=1799,1798
<1800=1801
<1801=1821,1802
<1802=1819,1817,1810,1803
<1803=1804
<1804=1808,1805
<1805=1806
<1806=1807
<1808=1809
<1810=1811
<1811=1815,1812
<1812=1813
<1813=1814
<1815=1816
<1817=1818
<1819=1820
<1821=1822
<1822=1824,1823
<1824=1826,1825
<1827=1839,1828
<1828=1838,1837,1829
<1829=1836,1830
<1830=1834,1831
<1831=1832
<1832=1833
<1834=1835
<1839=1849,1848,1840
<1840=1847,1841
<1841=1845,1842
<1842=1843
<1843=1844
<1845=1846
<1850=1862,1851
<1851=1861,1860,1852
<1852=1859,1853
<1853=1857,1854
<1854=1855
<1855=1856
<1857=1858
<1862=1872,1871,1863
<1863=1870,1864
<1864=1868,1865
<1865=1866
<1866=1867
<1868=1869
<1873=1874
<1875=1876
<1876=1892,1891,1877
<1877=1890,1878
<1878=1888,1879
<1879=1884,1880
<1880=1881
<1881=1883,1882
<1884=1885
<1885=1887,1886
<1888=1889
<1893=1894
<1894=1910,1909,1895
<1895=1908,1896
<1896=1906,1897
<1897=1902,1898
<1898=1899
<1899=1901,1900
<1902=1903
<1903=1905,1904
<1906=1907
<1911=1912
<1912=1924,1923,1913
<1913=1922,1914
<1914=1920,1915
<1915=1918,1916
<1916=1917
<1918=1919
<1920=1921
<1925=1926
<1926=1938,1937,1927
<1927=1936,1928
<1928=1934,1929
<1929=1932,1930
<1930=1931
<1932=1933
<1934=1935
<1939=1940
<1940=1951,1950,1941
<1941=1949,1942
<1942=1944,1943
<1944=1946,1945
<1946=1948,1947
<1952=1953
<1953=1960,1959,1954
<1954=1958,1955
<1955=1957,1956
<1961=1962
<1962=1973,1972,1963
<1963=1971,1964
<1964=1966,1965
<1966=1968,1967
<1968=1970,1969
<1974=1975
<1975=1986,1985,1976
<1976=1984,1977
<1977=1979,1978
<1979=1981,1980
<1981=1983,1982
<1987=1988
<1988=1995,1994,1989
<1989=1993,1990
<1990=1992,1991
<1996=1997
<1997=2008,2007,1998
<1998=2006,1999
<1999=2001,2000
<2001=2003,2002
<2003=2005,2004
<2009=2011,2010
<2012=2013
<2013=2015,2014
<2016=2017
<2017=2018
<2018=2025,2024,2019
<2019=2023,2020
<2020=2022,2021
<2026=2028,2027
<2029=2030
<2030=2032,2031
<2033=2034
<2034=2035
<2035=2040,2039,2036
<2036=2038,2037
<2041=2042
<2042=2047,2046,2043
<2043=2045,2044
<2048=2049
<2049=2054,2053,2050
<2050=2052,2051
<2055=2056
<2056=2061,2060,2057
<2057=2059,2058
<2062=2063
<2063=2067,2064
<2064=2065
<2065=2066
<2067=2068
<2069=2070
<2070=2076,2071
<2071=2072
<2072=2073
<2073=2075,2074
<2076=2077
<2078=2079
<2079=2083,2080
<2080=2081
<2081=2082
<2083=2084
<2085=2087,2086
<2087=2088
<2088=2090,2089
<2091=2092
<2092=2106,2105,2093
<2093=2104,2094
<2094=2103,2095
<2095=2097,2096
<2097=2098
<2098=2100,2099
<2100=2102,2101
<2107=2109,2108
<2110=2111
<2111=2113,2112
<2114=2115
<2115=2116
<2116=2121,2120,2117
<2117=2119,2118
<2122=2123
<2123=2135,2134,2124
<2124=2133,2125
<2125=2132,2126
<2126=2128,2127
<2128=2129
<2129=2131,2130
<2136=2137
<2137=2142,2141,2138
<2138=2140,2139
<2143=2144
<2144=2149,2148,2145
<2145=2147,2146
<2150=2151
<2151=2156,2155,2152
<2152=2154,2153
<2157=2158
<2158=2163,2162,2159
<2159=2161,2160
<2164=2165
<2165=2170,2169,2166
<2166=2168,2167
<2171=2172
<2176=2366,2362,2359,2177
<2177=2350,2338,2178
<2178=2330,2326,2323,2179
<2179=2309,2299,2289,2280,2268,2259,2180
<2180=2253,2201,2181
<2181=2182
<2182=2183
<2183=2184
<2184=2195,2185
<2185=2186
<2186=2187
<2187=2193,2188
<2188=2191,2189
<2189=2190
<2191=2192
<2193=2194
<2195=2196
<2196=2198,2197
<2198=2200,2199
<2201=2240,2236,2220,2211,2202
<2202=2203
<2203=2207,2204
<2204=2205
<2205=2206
<2207=2208
<2208=2210,2209
<2211=2212
<2212=2216,2213
<2213=2214
<2214=2215
<2216=2217
<2217=2219,2218
<2220=2221
<2221=2232,2222
<2222=2223
<2223=2224
<2224=2230,2225
<2225=2228,2226
<2226=2227
<2228=2229
<2230=2231
<2232=2233
<2233=2235,2234
<2236=2237
<2237=2239,2238
<2240=2241
<2241=2250,2242
<2242=2249,2243
<2243=2245,2244
<2245=2246
<2246=2248,2247
<2250=2252,2251
<2253=2254
<2254=2258,2255
<2255=2257,2256
<2259=2260
<2260=2267,2266,2261
<2261=2265,2262
<2262=2264,2263
<2268=2270,2269
<2270=2271
<2271=2275,2272
<2272=2274,2273
<2275=2277,2276
<2277=2279,2278
<2280=2281
<2281=2288,2287,2282
<2282=2286,2283
<2283=2285,2284
<2289=2291,2290
<2291=2292
<2292=2296,2293
<2293=2295,2294
<2296=2298,2297
<2299=2301,2300
<2301=2302
<2302=2306,2303
<2303=2305,2304
<2306=2308,2307
<2309=2310
<2310=2322,2321,2311
<2311=2320,2312
<2312=2318,2313
<2313=2316,2314
<2314=2315
<2316=2317
<2318=2319
<2323=2325,2324
<2326=2327
<2327=2329,2328
<2330=2331
<2331=2332
<2332=2337,2336,2333
<2333=2335,2334
<2338=2339
<2339=2349,2348,2340
<2340=2347,2341
<2341=2345,2342
<2342=2343
<2343=2344
<2345=2346
<2350=2351
<2351=2358,2357,2352
<2352=2356,2353
<2353=2355,2354
<2359=2361,2360
<2362=2363
<2363=2365,2364
<2366=2367
<2367=2368
<2368=2373,2372,2369
<2369=2371,2370
<2374=2391,2387,2384,2375
<2375=2376
<2376=2377
<2377=2381,2378
<2378=2380,2379
<2381=2383,2382
<2384=2386,2385
<2387=2388
<2388=2390,2389
<2391=2392
<2392=2393
<2393=2398,2397,2394
<2394=2396,2395
<2399=2400
<2400=2405,2404,2401
<2401=2403,2402
<2406=2407
<2407=2419,2418,2408
<2408=2417,2409
<2409=2416,2410
<2410=2412,2411
<2412=2413
<2413=2415,2414
<2420=2421
<2421=2423,2422
<2424=2425
<2425=2427,2426
<2555=2582,2581,2556
<2556=2578,2575,2572,2569,2566,2563,2560,2557
<2557=2559,2558
<2560=2562,2561
<2563=2565,2564
<2566=2568,2567
<2569=2571,2570
<2572=2574,2573
<2575=2577,2576
<2578=2580,2579
<2582=3031,3022,3013,3004,2993,2982,2959,2936,2927,2908,2889,2863,2837,2826,2815,2800,2796,2640,2619,2605,2591,2585,2583
<2583=2584
<2585=2586
<2586=2590,2587
<2587=2589,2588
<2591=2592
<2592=2604,2603,2593
<2593=2602,2594
<2594=2600,2595
<2595=2598,2596
<2596=2597
<2598=2599
<2600=2601
<2605=2606
<2606=2618,2617,2607
<2607=2616,2608
<2608=2614,2609
<2609=2612,2610
<2610=2611
<2612=2613
<2614=2615
<2619=2620
<2620=2639,2621
<2621=2632,2622
<2622=2631,2623
<2623=2629,2624
<2624=2625
<2625=2626
<2626=2628,2627
<2629=2630
<2632=2636,2633
<2633=2635,2634
<2636=2638,2637
<2640=2792,2760,2641
<2641=2642
<2642=2755,2750,2727,2710,2687,2670,2643
<2643=2644
<2644=2669,2645
<2645=2667,2646
<2646=2665,2663,2659,2657,2653,2651,2647
<2647=2648
<2648=2650,2649
<2651=2652
<2653=2654
<2654=2656,2655
<2657=2658
<2659=2660
<2660=2662,2661
<2663=2664
<2665=2666
<2667=2668
<2670=2671
<2671=2685,2672
<2672=2683,2681,2679,2675,2673
<2673=2674
<2675=2676
<2676=2678,2677
<2679=2680
<2681=2682
<2683=2684
<2685=2686
<2687=2688
<2688=2708,2689
<2689=2706,2704,2702,2700,2696,2692,2690
<2690=2691
<2692=2693
<2693=2695,2694
<2696=2697
<2697=2699,2698
<2700=2701
<2702=2703
<2704=2705
<2706=2707
<2708=2709
<2710=2711
<2711=2725,2712
<2712=2723,2721,2719,2715,2713
<2713=2714
<2715=2716
<2716=2718,2717
<2719=2720
<2721=2722
<2723=2724
<2725=2726
<2727=2728
<2728=2748,2729
<2729=2746,2744,2742,2740,2736,2732,2730
<2730=2731
<2732=2733
<2733=2735,2734
<2736=2737
<2737=2739,2738
<2740=2741
<2742=2743
<2744=2745
<2746=2747
<2748=2749
<2750=2751
<2751=2754,2753,2752
<2755=2756
<2756=2759,2758,2757
<2760=2761
<2761=2762
<2762=2791,2763
<2763=2789,2764
<2764=2787,2785,2781,2777,2773,2769,2765
<2765=2766
<2766=2768,2767
<2769=2770
<2770=2772,2771
<2773=2774
<2774=2776,2775
<2777=2778
<2778=2780,2779
<2781=2782
<2782=2784,2783
<2785=2786
<2787=2788
<2789=2790
<2792=2793
<2793=2795,2794
<2796=2797
<2797=2799,2798
<2800=2801
<2801=2814,2802
<2802=2812,2803
<2803=2810,2808,2806,2804
<2804=2805
<2806=2807
<2808=2809
<2810=2811
<2812=2813
<2815=2816
<2816=2825,2817
<2817=2823,2818
<2818=2821,2819
<2819=2820
<2821=2822
<2823=2824
<2826=2827
<2827=2836,2828
<2828=2834,2829
<2829=2832,2830
<2830=2831
<2832=2833
<2834=2835
<2837=2838
<2838=2862,2861,2839
<2839=2860,2840
<2840=2858,2841
<2841=2850,2842
<2842=2843
<2843=2847,2844
<2844=2846,2845
<2847=2849,2848
<2850=2851
<2851=2855,2852
<2852=2854,2853
<2855=2857,2856
<2858=2859
<2863=2864
<2864=2888,2887,2865
<2865=2886,2866
<2866=2884,2867
<2867=2876,2868
<2868=2869
<2869=2873,2870
<2870=2872,2871
<2873=2875,2874
<2876=2877
<2877=2881,2878
<2878=2880,2879
<2881=2883,2882
<2884=2885
<2889=2890
<2890=2906,2891
<2891=2904,2902,2900,2898,2896,2894,2892
<2892=2893
<2894=2895
<2896=2897
<2898=2899
<2900=2901
<2902=2903
<2904=2905
<2906=2907
<2908=2909
<2909=2925,2910
<2910=2923,2921,2919,2917,2915,2913,2911
<2911=2912
<2913=2914
<2915=2916
<2917=2918
<2919=2920
<2921=2922
<2923=2924
<2925=2926
<2927=2932,2928
<2928=2931,2930,2929
<2932=2935,2934,2933
<2936=2937
<2937=2958,2957,2956,2938
<2938=2955,2939
<2939=2949,2943,2940
<2940=2942,2941
<2943=2947,2944
<2944=2945
<2945=2946
<2947=2948
<2949=2953,2950
<2950=2951
<2951=2952
<2953=2954
<2959=2960
<2960=2981,2980,2979,2961
<2961=2978,2962
<2962=2972,2966,2963
<2963=2965,2964
<2966=2970,2967
<2967=2968
<2968=2969
<2970=2971
<2972=2976,2973
<2973=2974
<2974=2975
<2976=2977
<2982=2983
<2983=2991,2984
<2984=2989,2987,2985
<2985=2986
<2987=2988
<2989=2990
<2991=2992
<2993=2994
<2994=3002,2995
<2995=3000,2998,2996
<2996=2997
<2998=2999
<3000=3001
<3002=3003
<3004=3005
<3005=3011,3006
<3006=3009,3007
<3007=3008
<3009=3010
<3011=3012
<3013=3014
<3014=3020,3015
<3015=3018,3016
<3016=3017
<3018=3019
<3020=3021
<3022=3027,3023
<3023=3026,3025,3024
<3027=3030,3029,3028
<3031=3036,3032
<3032=3035,3034,3033
<3036=3039,3038,3037
<3083=3113,3112,3084
<3084=3109,3106,3103,3100,3097,3094,3091,3088,3085
<3085=3087,3086
<3088=3090,3089
<3091=3093,3092
<3094=3096,3095
<3097=3099,3098
<3100=3102,3101
<3103=3105,3104
<3106=3108,3107
<3109=3111,3110
<3113=4428,4419,3116,3114
<3114=3115
<3116=4411,4407,4404,3117
<3117=4395,4389,4375,4361,4347,4338,4316,4298,4287,4262,4248,3127,3118
<3118=3119
<3119=3123,3120
<3120=3121
<3121=3122
<3123=3124
<3124=3126,3125
<3127=4240,4229,4226,3128
<3128=4215,4204,4197,4173,4136,3129
<3129=4108,3932,3130
<3130=3131
<3131=3917,3332,3132
<3132=3133
<3133=3304,3134
<3134=3288,3266,3243,3220,3202,3135
<3135=3198,3153,3136
<3136=3137
<3137=3138
<3138=3139
<3139=3143,3140
<3140=3142,3141
<3143=3145,3144
<3145=3151,3146
<3146=3149,3147
<3147=3148
<3149=3150
<3151=3152
<3153=3185,3172,3154
<3154=3155
<3155=3166,3156
<3156=3157
<3157=3158
<3158=3164,3159
<3159=3162,3160
<3160=3161
<3162=3163
<3164=3165
<3166=3167
<3167=3169,3168
<3169=3171,3170
<3172=3173
<3173=3175,3174
<3175=3177,3176
<3177=3183,3178
<3178=3181,3179
<3179=3180
<3181=3182
<3183=3184
<3185=3186
<3186=3196,3187
<3187=3194,3192,3190,3188
<3188=3189
<3190=3191
<3192=3193
<3194=3195
<3196=3197
<3198=3199
<3199=3201,3200
<3202=3203
<3203=3219,3218,3204
<3204=3217,3205
<3205=3215,3206
<3206=3207
<3207=3208
<3208=3212,3209
<3209=3211,3210
<3212=3214,3213
<3215=3216
<3220=3221
<3221=3242,3241,3222
<3222=3240,3223
<3223=3230,3224
<3224=3228,3225
<3225=3226
<3226=3227
<3228=3229
<3230=3232,3231
<3232=3238,3233
<3233=3236,3234
<3234=3235
<3236=3237
<3238=3239
<3243=3244
<3244=3265,3264,3245
<3245=3263,3246
<3246=3253,3247
<3247=3251,3248
<3248=3249
<3249=3250
<3251=3252
<3253=3255,3254
<3255=3261,3256
<3256=3259,3257
<3257=3258
<3259=3260
<3261=3262
<3266=3267
<3267=3287,3286,3268
<3268=3285,3269
<3269=3283,3270
<3270=3279,3275,3273,3271
<3271=3272
<3273=3274
<3275=3276
<3276=3278,3277
<3279=3280
<3280=3282,3281
<3283=3284
<3288=3289
<3289=3303,3302,3290
<3290=3301,3291
<3291=3293,3292
<3293=3299,3294
<3294=3297,3295
<3295=3296
<3297=3298
<3299=3300
<3304=3305
<3305=3320,3306
<3306=3310,3307
<3307=3309,3308
<3310=3312,3311
<3312=3318,3313
<3313=3316,3314
<3314=3315
<3316=3317
<3318=3319
<3320=3322,3321
<3322=3324,3323
<3324=3330,3325
<3325=3328,3326
<3326=3327
<3328=3329
<3330=3331
<3332=3871,3858,3845,3813,3781,3677,3670,3663,3656,3627,3567,3518,3474,3473,3472,3471,3470,3469,3468,3467,3466,3465,3464,3463,3462,3461,3460,3459,3458,3457,3456,3455,3454,3453,3452,3451,3435,3419,3403,3382,3378,3362,3346,3337,3333
<3333=3334
<3334=3336,3335
<3337=3338
<3338=3342,3339
<3339=3340
<3340=3341
<3342=3343
<3343=3345,3344
<3346=3347
<3347=3358,3348
<3348=3349
<3349=3350
<3350=3356,3351
<3351=3354,3352
<3352=3353
<3354=3355
<3356=3357
<3358=3359
<3359=3361,3360
<3362=3363
<3363=3374,3364
<3364=3365
<3365=3366
<3366=3372,3367
<3367=3370,3368
<3368=3369
<3370=3371
<3372=3373
<3374=3375
<3375=3377,3376
<3378=3379
<3379=3381,3380
<3382=3383
<3383=3400,3384
<3384=3398,3385
<3385=3394,3390,3386
<3386=3387
<3387=3389,3388
<3390=3391
<3391=3393,3392
<3394=3395
<3395=3397,3396
<3398=3399
<3400=3402,3401
<3403=3404
<3404=3418,3417,3405
<3405=3416,3406
<3406=3408,3407
<3408=3414,3409
<3409=3412,3410
<3410=3411
<3412=3413
<3414=3415
<3419=3420
<3420=3434,3433,3421
<3421=3432,3422
<3422=3424,3423
<3424=3430,3425
<3425=3428,3426
<3426=3427
<3428=3429
<3430=3431
<3435=3436
<3436=3450,3449,3437
<3437=3448,3438
<3438=3440,3439
<3440=3446,3441
<3441=3444,3442
<3442=3443
<3444=3445
<3446=3447
<3474=3514,3475
<3475=3507,3492,3477,3476
<3477=3478
<3478=3482,3479
<3479=3481,3480
<3482=3484,3483
<3484=3490,3485
<3485=3488,3486
<3486=3487
<3488=3489
<3490=3491
<3492=3493
<3493=3497,3494
<3494=3496,3495
<3497=3499,3498
<3499=3505,3500
<3500=3503,3501
<3501=3502
<3503=3504
<3505=3506
<3507=3508
<3508=3512,3509
<3509=3510
<3510=3511
<3512=3513
<3514=3515
<3515=3517,3516
<3518=3563,3519
<3519=3562,3561,3560,3559,3558,3557,3556,3555,3554,3553,3552,3551,3536,3521,3520
<3521=3522
<3522=3526,3523
<3523=3525,3524
<3526=3528,3527
<3528=3534,3529
<3529=3532,3530
<3530=3531
<3532=3533
<3534=3535
<3536=3537
<3537=3541,3538
<3538=3540,3539
<3541=3543,3542
<3543=3549,3544
<3544=3547,3545
<3545=3546
<3547=3548
<3549=3550
<3563=3564
<3564=3566,3565
<3567=3618,3568
<3568=3600,3585,3570,3569
<3570=3571
<3571=3575,3572
<3572=3574,3573
<3575=3577,3576
<3577=3583,3578
<3578=3581,3579
<3579=3580
<3581=3582
<3583=3584
<3585=3586
<3586=3590,3587
<3587=3589,3588
<3590=3592,3591
<3592=3598,3593
<3593=3596,3594
<3594=3595
<3596=3597
<3598=3599
<3600=3601
<3601=3616,3602
<3602=3614,3612,3610,3603
<3603=3604
<3604=3608,3605
<3605=3606
<3606=3607
<3608=3609
<3610=3611
<3612=3613
<3614=3615
<3616=3617
<3618=3619
<3619=3621,3620
<3621=3625,3622
<3622=3623
<3623=3624
<3625=3626
<3627=3628
<3628=3653,3629
<3629=3651,3630
<3630=3649,3647,3643,3639,3637,3635,3633,3631
<3631=3632
<3633=3634
<3635=3636
<3637=3638
<3639=3640
<3640=3642,3641
<3643=3644
<3644=3646,3645
<3647=3648
<3649=3650
<3651=3652
<3653=3655,3654
<3656=3657
<3657=3662,3661,3658
<3658=3660,3659
<3663=3664
<3664=3669,3668,3665
<3665=3667,3666
<3670=3671
<3671=3676,3675,3672
<3672=3674,3673
<3677=3779,3678
<3678=3756,3733,3706,3679
<3679=3680
<3680=3700,3681
<3681=3698,3696,3689,3682
<3682=3683
<3683=3687,3684
<3684=3685
<3685=3686
<3687=3688
<3689=3690
<3690=3694,3691
<3691=3692
<3692=3693
<3694=3695
<3696=3697
<3698=3699
<3700=3701
<3701=3703,3702
<3703=3705,3704
<3706=3707
<3707=3727,3708
<3708=3725,3723,3716,3709
<3709=3710
<3710=3714,3711
<3711=3712
<3712=3713
<3714=3715
<3716=3717
<3717=3721,3718
<3718=3719
<3719=3720
<3721=3722
<3723=3724
<3725=3726
<3727=3728
<3728=3730,3729
<3730=3732,3731
<3733=3745,3734
<3734=3744,3743,3735
<3735=3742,3736
<3736=3740,3737
<3737=3738
<3738=3739
<3740=3741
<3745=3755,3754,3746
<3746=3753,3747
<3747=3751,3748
<3748=3749
<3749=3750
<3751=3752
<3756=3768,3757
<3757=3767,3766,3758
<3758=3765,3759
<3759=3763,3760
<3760=3761
<3761=3762
<3763=3764
<3768=3778,3777,3769
<3769=3776,3770
<3770=3774,3771
<3771=3772
<3772=3773
<3774=3775
<3779=3780
<3781=3782
<3782=3812,3811,3783
<3783=3810,3784
<3784=3808,3785
<3785=3797,3786
<3786=3787
<3787=3789,3788
<3789=3795,3790
<3790=3793,3791
<3791=3792
<3793=3794
<3795=3796
<3797=3798
<3798=3800,3799
<3800=3806,3801
<3801=3804,3802
<3802=3803
<3804=3805
<3806=3807
<3808=3809
<3813=3814
<3814=3844,3843,3815
<3815=3842,3816
<3816=3840,3817
<3817=3829,3818
<3818=3819
<3819=3821,3820
<3821=3827,3822
<3822=3825,3823
<3823=3824
<3825=3826
<3827=3828
<3829=3830
<3830=3832,3831
<3832=3838,3833
<3833=3836,3834
<3834=3835
<3836=3837
<3838=3839
<3840=3841
<3845=3846
<3846=3848,3847
<3848=3850,3849
<3850=3856,3851
<3851=3854,3852
<3852=3853
<3854=3855
<3856=3857
<3858=3859
<3859=3861,3860
<3861=3863,3862
<3863=3869,3864
<3864=3867,3865
<3865=3866
<3867=3868
<3869=3870
<3871=3902,3872
<3872=3891,3873
<3873=3874
<3874=3889,3875
<3875=3887,3876
<3876=3877
<3877=3879,3878
<3879=3885,3880
<3880=3883,3881
<3881=3882
<3883=3884
<3885=3886
<3887=3888
<3889=3890
<3891=3892
<3892=3900,3893
<3893=3898,3896,3894
<3894=3895
<3896=3897
<3898=3899
<3900=3901
<3902=3903
<3903=3907,3904
<3904=3906,3905
<3907=3909,3908
<3909=3915,3910
<3910=3913,3911
<3911=3912
<3913=3914
<3915=3916
<3917=3918
<3918=3922,3919
<3919=3921,3920
<3922=3924,3923
<3924=3930,3925
<3925=3928,3926
<3926=3927
<3928=3929
<3930=3931
<3932=4092,4070,4047,4024,4006,3933
<3933=4002,3983,3934
<3934=3935
<3935=3982,3981,3980,3979,3978,3977,3976,3975,3974,3973,3972,3971,3970,3969,3968,3967,3954,3936
<3936=3937
<3937=3948,3938
<3938=3939
<3939=3940
<3940=3946,3941
<3941=3944,3942
<3942=3943
<3944=3945
<3946=3947
<3948=3949
<3949=3951,3950
<3951=3953,3952
<3954=3955
<3955=3957,3956
<3957=3959,3958
<3959=3965,3960
<3960=3963,3961
<3961=3962
<3963=3964
<3965=3966
<3983=4001,4000,3999,3998,3997,3996,3995,3994,3993,3992,3991,3990,3989,3988,3987,3986,3985,3984
<4002=4003
<4003=4005,4004
<4006=4007
<4007=4023,4022,4008
<4008=4021,4009
<4009=4019,4010
<4010=4011
<4011=4012
<4012=4016,4013
<4013=4015,4014
<4016=4018,4017
<4019=4020
<4024=4025
<4025=4046,4045,4026
<4026=4044,4027
<4027=4034,4028
<4028=4032,4029
<4029=4030
<4030=4031
<4032=4033
<4034=4036,4035
<4036=4042,4037
<4037=4040,4038
<4038=4039
<4040=4041
<4042=4043
<4047=4048
<4048=4069,4068,4049
<4049=4067,4050
<4050=4057,4051
<4051=4055,4052
<4052=4053
<4053=4054
<4055=4056
<4057=4059,4058
<4059=4065,4060
<4060=4063,4061
<4061=4062
<4063=4064
<4065=4066
<4070=4071
<4071=4091,4090,4072
<4072=4089,4073
<4073=4087,4074
<4074=4083,4079,4077,4075
<4075=4076
<4077=4078
<4079=4080
<4080=4082,4081
<4083=4084
<4084=4086,4085
<4087=4088
<4092=4093
<4093=4107,4106,4094
<4094=4105,4095
<4095=4097,4096
<4097=4103,4098
<4098=4101,4099
<4099=4100
<4101=4102
<4103=4104
<4108=4109
<4109=4122,4110
<4110=4112,4111
<4112=4114,4113
<4114=4120,4115
<4115=4118,4116
<4116=4117
<4118=4119
<4120=4121
<4122=4126,4123
<4123=4125,4124
<4126=4128,4127
<4128=4134,4129
<4129=4132,4130
<4130=4131
<4132=4133
<4134=4135
<4136=4158,4156,4137
<4137=4138
<4138=4141,4139
<4139=4140
<4141=4142
<4142=4146,4143
<4143=4145,4144
<4146=4148,4147
<4148=4154,4149
<4149=4152,4150
<4150=4151
<4152=4153
<4154=4155
<4156=4157
<4158=4159
<4159=4163,4160
<4160=4162,4161
<4163=4165,4164
<4165=4171,4166
<4166=4169,4167
<4167=4168
<4169=4170
<4171=4172
<4173=4193,4184,4174
<4174=4175
<4175=4180,4176
<4176=4177
<4177=4179,4178
<4180=4181
<4181=4183,4182
<4184=4189,4185
<4185=4186
<4186=4188,4187
<4189=4190
<4190=4192,4191
<4193=4194
<4194=4196,4195
<4197=4201,4198
<4198=4200,4199
<4201=4203,4202
<4204=4205
<4205=4214,4213,4206
<4206=4212,4207
<4207=4209,4208
<4209=4211,4210
<4215=4216
<4216=4225,4224,4217
<4217=4223,4218
<4218=4220,4219
<4220=4222,4221
<4226=4228,4227
<4229=4230
<4230=4239,4231
<4231=4238,4232
<4232=4234,4233
<4234=4235
<4235=4237,4236
<4240=4241
<4241=4242
<4242=4247,4246,4243
<4243=4245,4244
<4248=4249
<4249=4261,4260,4250
<4250=4259,4251
<4251=4255,4252
<4252=4253
<4253=4254
<4255=4256
<4256=4258,4257
<4262=4281,4263
<4263=4274,4265,4264
<4265=4266
<4266=4270,4267
<4267=4268
<4268=4269
<4270=4271
<4271=4273,4272
<4274=4275
<4275=4279,4276
<4276=4277
<4277=4278
<4279=4280
<4281=4282
<4282=4286,4283
<4283=4285,4284
<4287=4288
<4288=4296,4289
<4289=4294,4292,4290
<4290=4291
<4292=4293
<4294=4295
<4296=4297
<4298=4299
<4299=4315,4314,4300
<4300=4313,4301
<4301=4311,4302
<4302=4307,4303
<4303=4304
<4304=4306,4305
<4307=4308
<4308=4310,4309
<4311=4312
<4316=4317
<4317=4336,4318
<4318=4334,4332,4330,4319
<4319=4320
<4320=4329,4321
<4321=4325,4322
<4322=4323
<4323=4324
<4325=4326
<4326=4328,4327
<4330=4331
<4332=4333
<4334=4335
<4336=4337
<4338=4339
<4339=4345,4340
<4340=4343,4341
<4341=4342
<4343=4344
<4345=4346
<4347=4348
<4348=4360,4359,4349
<4349=4358,4350
<4350=4356,4351
<4351=4354,4352
<4352=4353
<4354=4355
<4356=4357
<4361=4362
<4362=4374,4373,4363
<4363=4372,4364
<4364=4370,4365
<4365=4368,4366
<4366=4367
<4368=4369
<4370=4371
<4375=4376
<4376=4388,4387,4377
<4377=4386,4378
<4378=4384,4379
<4379=4382,4380
<4380=4381
<4382=4383
<4384=4385
<4389=4391,4390
<4391=4392
<4392=4394,4393
<4395=4396
<4396=4403,4402,4397
<4397=4401,4398
<4398=4400,4399
<4404=4406,4405
<4407=4408
<4408=4410,4409
<4411=4412
<4412=4413
<4413=4418,4417,4414
<4414=4416,4415
<4419=4420
<4420=4427,4426,4421
<4421=4425,4422
<4422=4424,4423
<4428=4429
<4429=4434,4433,4430
<4430=4432,4431
