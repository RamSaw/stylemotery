>15	FunctionDef	ForeignTranslation (unsigned char ch)
>16	ParameterList	unsigned char ch
>17	Parameter	 
>18	Identifier	ch
>19	ParameterType	unsigned char
>20	ReturnType	char
>21	CompoundStatement	 
>22	ReturnStatement	 
>23	Identifier	ch
>28	FunctionDef	HU_Init ()
>29	ParameterList	 
>30	ReturnType	void
>31	CompoundStatement	 
>32	ForStatement	for ( i = 0 ; i < HU_FONTSIZE ; i ++ )
>33	CompoundStatement	 
>34	ExpressionStatement	 
>35	AssignmentExpr	g -> hu_font [ i ] = ( patch_t * ) W_CacheLumpName ( buffer , PU_STATIC_SHARED )
>36	CastExpression	( patch_t * ) W_CacheLumpName ( buffer , PU_STATIC_SHARED )
>37	CallExpression	W_CacheLumpName ( buffer , PU_STATIC_SHARED )
>38	ArgumentList	buffer
>39	Argument	PU_STATIC_SHARED
>40	Identifier	PU_STATIC_SHARED
>41	Argument	buffer
>42	Identifier	buffer
>43	Callee	W_CacheLumpName
>44	Identifier	W_CacheLumpName
>45	CastTarget	patch_t *
>46	ArrayIndexing	g -> hu_font [ i ]
>47	Identifier	i
>48	PtrMemberAccess	g -> hu_font
>49	Identifier	hu_font
>50	Identifier	g
>51	Statement	 
>52	ExpressionStatement	 
>53	CallExpression	sprintf ( buffer , \"STCFN%.3d\" , j ++ )
>54	ArgumentList	buffer
>55	Argument	j ++
>56	IncDecOp	j ++
>57	IncDec	++
>58	Identifier	j
>59	Argument	\"STCFN%.3d\"
>60	PrimaryExpression	\"STCFN%.3d\"
>61	Argument	buffer
>62	Identifier	buffer
>63	Callee	sprintf
>64	Identifier	sprintf
>65	IncDecOp	 
>66	IncDec	++
>67	Identifier	i
>68	Condition	 
>69	RelationalExpression	i < HU_FONTSIZE
>70	Identifier	HU_FONTSIZE
>71	Identifier	i
>72	ForInit	 
>73	AssignmentExpr	i = 0
>74	PrimaryExpression	0
>75	Identifier	i
>76	ExpressionStatement	 
>77	AssignmentExpr	j = HU_FONTSTART
>78	Identifier	HU_FONTSTART
>79	Identifier	j
>80	ExpressionStatement	 
>81	AssignmentExpr	shiftxform = english_shiftxform
>82	Identifier	english_shiftxform
>83	Identifier	shiftxform
>84	IdentifierDeclStatement	 
>85	IdentifierDecl	buffer [ 9 ]
>86	PrimaryExpression	9
>87	Identifier	buffer
>88	IdentifierDeclType	char [ 9 ]
>89	IdentifierDeclStatement	 
>90	IdentifierDecl	j
>91	Identifier	j
>92	IdentifierDeclType	int
>93	IdentifierDeclStatement	 
>94	IdentifierDecl	i
>95	Identifier	i
>96	IdentifierDeclType	int
>115	FunctionDef	HU_Stop ()
>116	ParameterList	 
>117	ReturnType	void
>118	CompoundStatement	 
>119	ExpressionStatement	 
>120	AssignmentExpr	g -> headsupactive = false
>121	Identifier	false
>122	PtrMemberAccess	g -> headsupactive
>123	Identifier	headsupactive
>124	Identifier	g
>125	Statement	 
>133	FunctionDef	HU_Start ()
>134	ParameterList	 
>135	ReturnType	void
>136	CompoundStatement	 
>137	ExpressionStatement	 
>138	AssignmentExpr	g -> headsupactive = true
>139	Identifier	true
>140	PtrMemberAccess	g -> headsupactive
>141	Identifier	headsupactive
>142	Identifier	g
>143	Statement	 
>144	ExpressionStatement	 
>145	Statement	 
>146	Statement	 
>147	Statement	 
>148	Statement	 
>149	Statement	 
>150	Statement	 
>151	Statement	 
>152	Statement	 
>153	Statement	 
>154	Statement	 
>155	Statement	 
>156	Statement	 
>157	Statement	 
>158	Statement	 
>159	Statement	 
>160	Statement	 
>161	Statement	 
>162	Statement	 
>163	Statement	 
>164	Statement	 
>165	Statement	 
>166	Statement	 
>167	Statement	 
>168	Statement	 
>169	ForStatement	for ( i = 0 ; i < MAXPLAYERS ; i ++ )
>170	Statement	 
>171	IncDecOp	 
>172	IncDec	++
>173	Identifier	i
>174	Condition	 
>175	RelationalExpression	i < MAXPLAYERS
>176	Identifier	MAXPLAYERS
>177	Identifier	i
>178	ForInit	 
>179	AssignmentExpr	i = 0
>180	PrimaryExpression	0
>181	Identifier	i
>182	ExpressionStatement	 
>183	Statement	 
>184	Statement	 
>185	Statement	 
>186	Statement	 
>187	Statement	 
>188	Statement	 
>189	Statement	 
>190	Statement	 
>191	Statement	 
>192	Statement	 
>193	Statement	 
>194	Statement	 
>195	Statement	 
>196	Statement	 
>197	Statement	 
>198	Statement	 
>199	Statement	 
>200	Statement	 
>201	Statement	 
>202	Statement	 
>203	Statement	 
>204	Statement	 
>205	Statement	 
>206	Statement	 
>207	Statement	 
>208	ExpressionStatement	 
>209	Statement	 
>210	Statement	 
>211	Statement	 
>212	Statement	 
>213	Statement	 
>214	Statement	 
>215	Statement	 
>216	Statement	 
>217	Statement	 
>218	Statement	 
>219	Statement	 
>220	Statement	 
>221	Statement	 
>222	WhileStatement	while ( * s )
>223	Statement	 
>224	Condition	 
>225	UnaryOp	* s
>226	Identifier	s
>227	UnaryOperator	*
>228	CompoundStatement	 
>229	BreakStatement	 
>230	IfStatement	if ( DoomLib 
>231	ElseStatement	else
>232	CompoundStatement	 
>233	ExpressionStatement	 
>234	Statement	 
>235	Statement	 
>236	Statement	 
>237	Statement	 
>238	Statement	 
>239	Statement	 
>240	Statement	 
>241	Statement	 
>242	Statement	 
>243	Statement	 
>244	Statement	 
>245	Statement	 
>246	Statement	 
>247	Statement	 
>248	Statement	 
>249	Statement	 
>250	Statement	 
>251	CompoundStatement	 
>252	ExpressionStatement	 
>253	AssignmentExpr	s = DoomLib 
>254	ArrayIndexing	DoomLib 
>255	AdditiveExpression	map - 1
>256	PrimaryExpression	1
>257	Identifier	map
>258	PtrMemberAccess	DoomLib 
>259	Identifier	mapNames
>260	CallExpression	DoomLib 
>261	ArgumentList	 
>262	Callee	DoomLib 
>263	Identifier	DoomLib 
>264	Identifier	s
>265	CompoundStatement	 
>266	ExpressionStatement	 
>267	AssignmentExpr	map = 0
>268	PrimaryExpression	0
>269	Identifier	map
>270	Statement	 
>271	Statement	 
>272	Statement	 
>273	Statement	 
>274	Statement	 
>275	Statement	 
>276	Statement	 
>277	Statement	 
>278	Statement	 
>279	ExpressionStatement	 
>280	PtrMemberAccess	g -> gamemap
>281	Identifier	gamemap
>282	Identifier	g
>283	Statement	 
>284	Statement	 
>285	Statement	 
>286	Statement	 
>287	Condition	 
>288	EqualityExpression	DoomLib 
>289	PrimaryExpression	5
>290	Identifier	DoomLib 
>291	Label	 
>292	Identifier	default
>293	Label	 
>294	Identifier	commercial
>295	BreakStatement	 
>296	ExpressionStatement	 
>297	AssignmentExpr	s = HU_TITLE
>298	Identifier	HU_TITLE
>299	Identifier	s
>300	Label	 
>301	Identifier	retail
>302	Label	 
>303	Identifier	registered
>304	Label	 
>305	Identifier	shareware
>306	Statement	 
>307	Statement	 
>308	Statement	 
>309	Statement	 
>310	Statement	 
>311	Statement	 
>312	Statement	 
>313	ExpressionStatement	 
>314	Statement	 
>315	Statement	 
>316	Statement	 
>317	Statement	 
>318	Statement	 
>319	Statement	 
>320	Statement	 
>321	Statement	 
>322	Statement	 
>323	Statement	 
>324	Statement	 
>325	Statement	 
>326	Statement	 
>327	Statement	 
>328	Statement	 
>329	Statement	 
>330	Statement	 
>331	Statement	 
>332	Statement	 
>333	ExpressionStatement	 
>334	Statement	 
>335	Statement	 
>336	Statement	 
>337	Statement	 
>338	Statement	 
>339	Statement	 
>340	Statement	 
>341	Statement	 
>342	Statement	 
>343	Statement	 
>344	Statement	 
>345	Statement	 
>346	Statement	 
>347	Statement	 
>348	Statement	 
>349	Statement	 
>350	Statement	 
>351	Statement	 
>352	Statement	 
>353	Statement	 
>354	Statement	 
>355	Statement	 
>356	Statement	 
>357	Statement	 
>358	Statement	 
>359	Statement	 
>360	Statement	 
>361	ExpressionStatement	 
>362	AssignmentExpr	g -> chat_on = false
>363	Identifier	false
>364	PtrMemberAccess	g -> chat_on
>365	Identifier	chat_on
>366	Identifier	g
>367	Statement	 
>368	ExpressionStatement	 
>369	AssignmentExpr	g -> message_nottobefuckedwith = false
>370	Identifier	false
>371	PtrMemberAccess	g -> message_nottobefuckedwith
>372	Identifier	message_nottobefuckedwith
>373	Identifier	g
>374	Statement	 
>375	ExpressionStatement	 
>376	AssignmentExpr	g -> message_dontfuckwithme = false
>377	Identifier	false
>378	PtrMemberAccess	g -> message_dontfuckwithme
>379	Identifier	message_dontfuckwithme
>380	Identifier	g
>381	Statement	 
>382	ExpressionStatement	 
>383	AssignmentExpr	g -> message_on = false
>384	Identifier	false
>385	PtrMemberAccess	g -> message_on
>386	Identifier	message_on
>387	Identifier	g
>388	Statement	 
>389	ExpressionStatement	 
>390	Statement	 
>391	Statement	 
>392	Statement	 
>393	Statement	 
>394	Statement	 
>395	Statement	 
>396	Statement	 
>397	Statement	 
>398	Statement	 
>399	Statement	 
>400	Statement	 
>401	Statement	 
>402	Statement	 
>403	Statement	 
>404	Statement	 
>405	Statement	 
>406	ExpressionStatement	 
>407	CallExpression	HU_Stop ( )
>408	ArgumentList	 
>409	Callee	HU_Stop
>410	Identifier	HU_Stop
>411	Statement	 
>412	Statement	 
>413	Statement	 
>414	Statement	 
>415	Statement	 
>416	Statement	 
>417	Statement	 
>418	IdentifierDeclStatement	 
>419	IdentifierDecl	* s
>420	Identifier	s
>421	IdentifierDeclType	const char *
>422	IdentifierDeclStatement	 
>423	IdentifierDecl	i
>424	Identifier	i
>425	IdentifierDeclType	int
>452	FunctionDef	HU_Drawer ()
>453	ParameterList	 
>454	ReturnType	void
>455	CompoundStatement	 
>456	ExpressionStatement	 
>457	Statement	 
>458	Statement	 
>459	Statement	 
>460	Statement	 
>461	Statement	 
>462	Statement	 
>463	Statement	 
>464	Statement	 
>465	Statement	 
>466	Statement	 
>467	Statement	 
>468	Statement	 
>469	Statement	 
>470	Statement	 
>471	Statement	 
>472	Statement	 
>473	Statement	 
>474	ExpressionStatement	 
>475	Statement	 
>476	Statement	 
>477	Statement	 
>478	Statement	 
>479	Statement	 
>480	Statement	 
>481	Statement	 
>482	Statement	 
>483	ExpressionStatement	 
>484	Statement	 
>485	Statement	 
>486	Statement	 
>487	Statement	 
>488	Statement	 
>489	Statement	 
>490	Statement	 
>491	Statement	 
>495	FunctionDef	HU_Erase ()
>496	ParameterList	 
>497	ReturnType	void
>498	CompoundStatement	 
>499	ExpressionStatement	 
>500	Statement	 
>501	Statement	 
>502	Statement	 
>503	Statement	 
>504	Statement	 
>505	Statement	 
>506	Statement	 
>507	Statement	 
>508	ExpressionStatement	 
>509	Statement	 
>510	Statement	 
>511	Statement	 
>512	Statement	 
>513	Statement	 
>514	Statement	 
>515	Statement	 
>516	Statement	 
>517	ExpressionStatement	 
>518	Statement	 
>519	Statement	 
>520	Statement	 
>521	Statement	 
>522	Statement	 
>523	Statement	 
>524	Statement	 
>525	Statement	 
>529	FunctionDef	HU_Ticker ()
>530	ParameterList	 
>531	ReturnType	void
>532	CompoundStatement	 
>533	CompoundStatement	 
>534	CompoundStatement	 
>535	ExpressionStatement	 
>536	AssignmentExpr	g -> message_dontfuckwithme = 0
>537	PrimaryExpression	0
>538	PtrMemberAccess	g -> message_dontfuckwithme
>539	Identifier	message_dontfuckwithme
>540	Identifier	g
>541	Statement	 
>542	ExpressionStatement	 
>543	PtrMemberAccess	g -> message_dontfuckwithme
>544	Identifier	message_dontfuckwithme
>545	Identifier	g
>546	Statement	 
>547	Statement	 
>548	Statement	 
>549	Statement	 
>550	Statement	 
>551	Statement	 
>552	ExpressionStatement	 
>553	AssignmentExpr	g -> message_counter = HU_MSGTIMEOUT
>554	Identifier	HU_MSGTIMEOUT
>555	PtrMemberAccess	g -> message_counter
>556	Identifier	message_counter
>557	Identifier	g
>558	Statement	 
>559	ExpressionStatement	 
>560	AssignmentExpr	g -> message_on = true
>561	Identifier	true
>562	PtrMemberAccess	g -> message_on
>563	Identifier	message_on
>564	Identifier	g
>565	Statement	 
>566	ExpressionStatement	 
>567	AssignmentExpr	g -> plr -> message = 0
>568	PrimaryExpression	0
>569	PtrMemberAccess	g -> plr -> message
>570	Identifier	message
>571	PtrMemberAccess	g -> plr
>572	Identifier	plr
>573	Identifier	g
>574	Statement	 
>575	ExpressionStatement	 
>576	Statement	 
>577	Statement	 
>578	Statement	 
>579	Statement	 
>580	Statement	 
>581	Statement	 
>582	Statement	 
>583	Statement	 
>584	Statement	 
>585	Statement	 
>586	Statement	 
>587	Statement	 
>588	Statement	 
>589	Statement	 
>590	Statement	 
>591	Statement	 
>592	Statement	 
>593	Statement	 
>594	Statement	 
>595	Statement	 
>596	Statement	 
>597	Statement	 
>598	Statement	 
>599	Statement	 
>600	Statement	 
>601	Statement	 
>602	Statement	 
>603	Statement	 
>604	Statement	 
>605	Statement	 
>606	Statement	 
>607	Statement	 
>608	Statement	 
>609	Statement	 
>610	Statement	 
>611	Statement	 
>612	Statement	 
>613	Statement	 
>614	Statement	 
>615	Statement	 
>616	Statement	 
>617	Statement	 
>618	Statement	 
>619	Statement	 
>620	Statement	 
>621	Statement	 
>622	Statement	 
>623	Statement	 
>624	Statement	 
>625	Statement	 
>626	Statement	 
>627	Statement	 
>628	Statement	 
>629	Statement	 
>630	Statement	 
>631	Statement	 
>632	Statement	 
>633	Statement	 
>634	Statement	 
>635	Statement	 
>636	Statement	 
>637	Statement	 
>638	Statement	 
>639	Statement	 
>640	Statement	 
>641	Statement	 
>642	Statement	 
>643	Statement	 
>644	Statement	 
>645	Statement	 
>646	Statement	 
>647	CompoundStatement	 
>648	ExpressionStatement	 
>649	AssignmentExpr	g -> message_nottobefuckedwith = false
>650	Identifier	false
>651	PtrMemberAccess	g -> message_nottobefuckedwith
>652	Identifier	message_nottobefuckedwith
>653	Identifier	g
>654	Statement	 
>655	ExpressionStatement	 
>656	AssignmentExpr	g -> message_on = false
>657	Identifier	false
>658	PtrMemberAccess	g -> message_on
>659	Identifier	message_on
>660	Identifier	g
>661	Statement	 
>662	Statement	 
>663	Statement	 
>664	Statement	 
>665	Statement	 
>666	Statement	 
>667	Statement	 
>668	Statement	 
>669	Statement	 
>670	Statement	 
>671	Statement	 
>672	Statement	 
>673	Statement	 
>674	Statement	 
>675	Statement	 
>692	FunctionDef	HU_queueChatChar (char c)
>693	ParameterList	char c
>694	Parameter	 
>695	Identifier	c
>696	ParameterType	char
>697	ReturnType	void
>698	CompoundStatement	 
>699	CompoundStatement	 
>700	ExpressionStatement	 
>701	AssignmentExpr	g -> plr -> message = HUSTR_MSGU
>702	Identifier	HUSTR_MSGU
>703	PtrMemberAccess	g -> plr -> message
>704	Identifier	message
>705	PtrMemberAccess	g -> plr
>706	Identifier	plr
>707	Identifier	g
>708	Statement	 
>709	Statement	 
>710	Statement	 
>711	Statement	 
>712	Statement	 
>713	Statement	 
>714	Statement	 
>715	Statement	 
>716	Statement	 
>717	Statement	 
>718	Statement	 
>719	Statement	 
>720	Statement	 
>721	Statement	 
>722	Statement	 
>723	Statement	 
>724	Statement	 
>725	Statement	 
>726	Statement	 
>727	Statement	 
>728	Statement	 
>729	Statement	 
>730	Statement	 
>731	Statement	 
>732	Statement	 
>744	FunctionDef	HU_dequeueChatChar ()
>745	ParameterList	 
>746	ReturnType	char
>747	CompoundStatement	 
>748	CompoundStatement	 
>749	ExpressionStatement	 
>750	UnaryOp	& ( QUEUESIZE - 1 )
>751	AdditiveExpression	QUEUESIZE - 1
>752	PrimaryExpression	1
>753	Identifier	QUEUESIZE
>754	UnaryOperator	&
>755	Statement	 
>756	Statement	 
>757	Statement	 
>758	Statement	 
>759	Statement	 
>760	Statement	 
>761	Statement	 
>762	Statement	 
>763	Statement	 
>764	Statement	 
>765	Statement	 
>766	Statement	 
>767	Statement	 
>768	ExpressionStatement	 
>769	Statement	 
>770	Statement	 
>771	Statement	 
>772	Statement	 
>773	Statement	 
>774	Statement	 
>775	Statement	 
>776	Statement	 
>777	Statement	 
>778	Statement	 
>779	Statement	 
>780	Statement	 
>781	Statement	 
>782	Statement	 
>783	Statement	 
>784	Statement	 
>785	Statement	 
>786	Statement	 
>787	Statement	 
>788	Statement	 
>789	Statement	 
>790	Statement	 
>791	Statement	 
>792	Statement	 
>793	IdentifierDeclStatement	 
>794	IdentifierDecl	c
>795	Identifier	c
>796	IdentifierDeclType	char
>801	FunctionDef	HU_Responder (event_t * ev)
>802	ParameterList	event_t * ev
>803	Parameter	 
>804	Identifier	ev
>805	ParameterType	event_t *
>806	ReturnType	qboolean
>807	CompoundStatement	 
>808	Statement	 
>809	Statement	 
>810	Statement	 
>811	Statement	 
>812	Statement	 
>813	Statement	 
>814	Statement	 
>815	Statement	 
>816	IfStatement	if ( ev -> type != ev_keydown )
>817	ElseStatement	else
>818	Statement	 
>819	ReturnStatement	 
>820	Identifier	false
>821	Condition	 
>822	EqualityExpression	ev -> type != ev_keydown
>823	Identifier	ev_keydown
>824	PtrMemberAccess	ev -> type
>825	Identifier	type
>826	Identifier	ev
>827	IfStatement	if ( ev -> data1 == KEY_RSHIFT )
>828	ElseStatement	else
>829	IfStatement	if ( ev -> data1 == KEY_RALT || ev -> data1 == KEY_LALT )
>830	ElseStatement	else
>831	Statement	 
>832	CompoundStatement	 
>833	ReturnStatement	 
>834	Identifier	false
>835	ExpressionStatement	 
>836	AssignmentExpr	g -> altdown = ev -> type == ev_keydown
>837	EqualityExpression	ev -> type == ev_keydown
>838	Identifier	ev_keydown
>839	PtrMemberAccess	ev -> type
>840	Identifier	type
>841	Identifier	ev
>842	PtrMemberAccess	g -> altdown
>843	Identifier	altdown
>844	Identifier	g
>845	Statement	 
>846	Condition	 
>847	OrExpression	ev -> data1 == KEY_RALT || ev -> data1 == KEY_LALT
>848	EqualityExpression	ev -> data1 == KEY_LALT
>849	Identifier	KEY_LALT
>850	PtrMemberAccess	ev -> data1
>851	Identifier	data1
>852	Identifier	ev
>853	EqualityExpression	ev -> data1 == KEY_RALT
>854	Identifier	KEY_RALT
>855	PtrMemberAccess	ev -> data1
>856	Identifier	data1
>857	Identifier	ev
>858	CompoundStatement	 
>859	ReturnStatement	 
>860	Identifier	false
>861	ExpressionStatement	 
>862	AssignmentExpr	g -> shiftdown = ev -> type == ev_keydown
>863	EqualityExpression	ev -> type == ev_keydown
>864	Identifier	ev_keydown
>865	PtrMemberAccess	ev -> type
>866	Identifier	type
>867	Identifier	ev
>868	PtrMemberAccess	g -> shiftdown
>869	Identifier	shiftdown
>870	Identifier	g
>871	Statement	 
>872	Condition	 
>873	EqualityExpression	ev -> data1 == KEY_RSHIFT
>874	Identifier	KEY_RSHIFT
>875	PtrMemberAccess	ev -> data1
>876	Identifier	data1
>877	Identifier	ev
>878	ExpressionStatement	 
>879	ArrayIndexing	g -> playeringame [ i ]
>880	Identifier	i
>881	PtrMemberAccess	g -> playeringame
>882	Identifier	playeringame
>883	Identifier	g
>884	Statement	 
>885	Statement	 
>886	ForStatement	for ( i = 0 ; i < MAXPLAYERS ; i ++ )
>887	Statement	 
>888	IncDecOp	 
>889	IncDec	++
>890	Identifier	i
>891	Condition	 
>892	RelationalExpression	i < MAXPLAYERS
>893	Identifier	MAXPLAYERS
>894	Identifier	i
>895	ForInit	 
>896	AssignmentExpr	i = 0
>897	PrimaryExpression	0
>898	Identifier	i
>899	ExpressionStatement	 
>900	AssignmentExpr	numplayers = 0
>901	PrimaryExpression	0
>902	Identifier	numplayers
>903	IdentifierDeclStatement	 
>904	IdentifierDecl	destination_keys [ MAXPLAYERS ] = { HUSTR_KEYGREEN , HUSTR_KEYINDIGO , HUSTR_KEYBROWN , HUSTR_KEYRED }
>905	AssignmentExpr	destination_keys [ MAXPLAYERS ] = { HUSTR_KEYGREEN , HUSTR_KEYINDIGO , HUSTR_KEYBROWN , HUSTR_KEYRED }
>906	InitializerList	HUSTR_KEYGREEN
>907	Identifier	HUSTR_KEYRED
>908	Identifier	HUSTR_KEYBROWN
>909	Identifier	HUSTR_KEYINDIGO
>910	Identifier	HUSTR_KEYGREEN
>911	Identifier	MAXPLAYERS
>912	Identifier	MAXPLAYERS
>913	Identifier	destination_keys
>914	IdentifierDeclType	char [ MAXPLAYERS ]
>915	Statement	 
>916	Statement	 
>917	IdentifierDeclStatement	 
>918	IdentifierDecl	numplayers
>919	Identifier	numplayers
>920	IdentifierDeclType	int
>921	IdentifierDeclStatement	 
>922	IdentifierDecl	i
>923	Identifier	i
>924	IdentifierDeclType	int
>925	IdentifierDeclStatement	 
>926	IdentifierDecl	c
>927	Identifier	c
>928	IdentifierDeclType	unsigned char
>929	IdentifierDeclStatement	 
>930	IdentifierDecl	eatkey = false
>931	AssignmentExpr	eatkey = false
>932	Identifier	false
>933	Identifier	false
>934	Identifier	eatkey
>935	IdentifierDeclType	qboolean
>936	IdentifierDeclStatement	 
>937	IdentifierDecl	* macromessage
>938	Identifier	macromessage
>939	IdentifierDeclType	const char *
<15=21,20,16
<16=17
<17=19,18
<21=22
<22=23
<28=31,30,29
<31=93,89,84,80,76,32
<32=72,68,65,33
<33=52,51,34
<34=35
<35=46,36
<36=45,37
<37=43,38
<38=41,39
<39=40
<41=42
<43=44
<46=48,47
<48=50,49
<52=53
<53=63,54
<54=61,59,55
<55=56
<56=58,57
<59=60
<61=62
<63=64
<65=67,66
<68=69
<69=71,70
<72=73
<73=75,74
<76=77
<77=79,78
<80=81
<81=83,82
<84=85
<85=88,87,86
<89=90
<90=92,91
<93=94
<94=96,95
<115=118,117,116
<118=125,119
<119=120
<120=122,121
<122=124,123
<133=136,135,134
<136=422,418,417,416,415,414,413,412,411,406,405,404,403,402,401,400,399,398,397,396,395,394,393,392,391,390,389,388,382,381,375,374,368,367,361,360,359,358,357,356,355,354,353,352,351,350,349,348,347,346,345,344,343,342,341,340,339,338,337,336,335,334,333,332,331,330,329,328,327,326,325,324,323,322,321,320,319,318,317,316,315,314,313,312,311,310,309,308,307,306,228,222,221,220,219,218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,137,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203
<137=138
<138=140,139
<140=142,141
<169=178,174,171,170
<171=173,172
<174=175
<175=177,176
<178=179
<179=181,180
<222=224,223
<224=225
<225=227,226
<228=304,302,300,296,295,293,291,230,229
<230=287,251,231
<231=232
<232=250,249,248,247,246,245,244,243,242,241,240,239,238,237,236,235,234,233
<251=286,285,284,283,279,278,277,276,275,274,273,272,271,270,265,252
<252=253
<253=264,254
<254=258,255
<255=257,256
<258=260,259
<260=262,261
<262=263
<265=266
<266=267
<267=269,268
<279=280
<280=282,281
<287=288
<288=290,289
<291=292
<293=294
<296=297
<297=299,298
<300=301
<302=303
<304=305
<361=362
<362=364,363
<364=366,365
<368=369
<369=371,370
<371=373,372
<375=376
<376=378,377
<378=380,379
<382=383
<383=385,384
<385=387,386
<406=407
<407=409,408
<409=410
<418=419
<419=421,420
<422=423
<423=425,424
<452=455,454,453
<455=491,490,489,488,487,486,485,484,483,482,481,480,479,478,477,476,475,474,473,472,471,470,469,468,467,466,465,464,463,462,461,460,459,458,457,456
<495=498,497,496
<498=525,524,523,522,521,520,519,518,517,516,515,514,513,512,511,510,509,508,507,506,505,504,503,502,501,500,499
<529=532,531,530
<532=675,674,673,672,671,670,669,668,667,666,665,664,663,662,647,646,645,644,643,642,641,640,639,638,637,636,635,634,633,632,631,630,629,628,627,626,625,624,533
<533=623,622,621,620,619,618,617,616,615,614,613,612,611,610,609,608,607,606,605,604,603,602,601,600,599,598,597,596,595,594,593,534
<534=592,591,590,589,588,587,586,585,584,583,582,581,580,579,578,577,576,575,574,566,565,559,558,552,551,550,549,548,547,546,542,541,535
<535=536
<536=538,537
<538=540,539
<542=543
<543=545,544
<552=553
<553=555,554
<555=557,556
<559=560
<560=562,561
<562=564,563
<566=567
<567=569,568
<569=571,570
<571=573,572
<647=661,655,654,648
<648=649
<649=651,650
<651=653,652
<655=656
<656=658,657
<658=660,659
<692=698,697,693
<693=694
<694=696,695
<698=732,731,730,729,728,727,726,725,724,723,722,721,720,719,718,717,716,715,714,713,712,711,710,709,699
<699=708,700
<700=701
<701=703,702
<703=705,704
<705=707,706
<744=747,746,745
<747=793,792,791,790,789,788,787,786,785,784,783,782,781,748
<748=780,779,778,777,776,775,774,773,772,771,770,769,768,767,766,765,764,763,762,761,760,759,758,757,756,755,749
<749=750
<750=754,751
<751=753,752
<793=794
<794=796,795
<801=807,806,802
<802=803
<803=805,804
<807=936,929,925,921,917,916,915,903,899,886,885,884,878,827,816,815,814,813,812,811,810,809,808
<816=821,819,817
<817=818
<819=820
<821=822
<822=824,823
<824=826,825
<827=872,858,828
<828=829
<829=846,832,830
<830=831
<832=845,835,833
<833=834
<835=836
<836=842,837
<837=839,838
<839=841,840
<842=844,843
<846=847
<847=853,848
<848=850,849
<850=852,851
<853=855,854
<855=857,856
<858=871,861,859
<859=860
<861=862
<862=868,863
<863=865,864
<865=867,866
<868=870,869
<872=873
<873=875,874
<875=877,876
<878=879
<879=881,880
<881=883,882
<886=895,891,888,887
<888=890,889
<891=892
<892=894,893
<895=896
<896=898,897
<899=900
<900=902,901
<903=904
<904=914,913,912,905
<905=911,906
<906=910,909,908,907
<917=918
<918=920,919
<921=922
<922=924,923
<925=926
<926=928,927
<929=930
<930=935,934,931
<931=933,932
<936=937
<937=939,938
