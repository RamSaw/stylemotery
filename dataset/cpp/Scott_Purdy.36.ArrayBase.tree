>3	FunctionDef	ArrayBase 
>4	ParameterList	NTA_BasicType type , void * buffer , size_t count
>5	Parameter	 
>6	Identifier	count
>7	ParameterType	size_t
>8	Parameter	 
>9	Identifier	buffer
>10	ParameterType	void *
>11	Parameter	 
>12	Identifier	type
>13	ParameterType	NTA_BasicType
>14	CompoundStatement	 
>15	IfStatement	if ( ! BasicType 
>16	CompoundStatement	 
>17	ExpressionStatement	 
>18	ShiftExpression	NTA_THROW << \"Invalid NTA_BasicType \" << type << \" used in array constructor\"
>19	ShiftExpression	\"Invalid NTA_BasicType \" << type << \" used in array constructor\"
>20	ShiftExpression	type << \" used in array constructor\"
>21	PrimaryExpression	\" used in array constructor\"
>22	Identifier	type
>23	PrimaryExpression	\"Invalid NTA_BasicType \"
>24	Identifier	NTA_THROW
>25	Condition	 
>26	UnaryOp	! BasicType 
>27	CallExpression	BasicType 
>28	ArgumentList	type
>29	Argument	type
>30	Identifier	type
>31	Callee	BasicType 
>32	Identifier	BasicType 
>33	UnaryOperator	!
>41	FunctionDef	ArrayBase 
>42	ParameterList	NTA_BasicType type
>43	Parameter	 
>44	Identifier	type
>45	ParameterType	NTA_BasicType
>46	CompoundStatement	 
>47	IfStatement	if ( ! BasicType 
>48	CompoundStatement	 
>49	ExpressionStatement	 
>50	ShiftExpression	NTA_THROW << \"Invalid NTA_BasicType \" << type << \" used in array constructor\"
>51	ShiftExpression	\"Invalid NTA_BasicType \" << type << \" used in array constructor\"
>52	ShiftExpression	type << \" used in array constructor\"
>53	PrimaryExpression	\" used in array constructor\"
>54	Identifier	type
>55	PrimaryExpression	\"Invalid NTA_BasicType \"
>56	Identifier	NTA_THROW
>57	Condition	 
>58	UnaryOp	! BasicType 
>59	CallExpression	BasicType 
>60	ArgumentList	type
>61	Argument	type
>62	Identifier	type
>63	Callee	BasicType 
>64	Identifier	BasicType 
>65	UnaryOperator	!
>71	FunctionDef	ArrayBase 
>72	ParameterList	 
>73	CompoundStatement	 
>74	ExpressionStatement	 
>75	CallExpression	releaseBuffer ( )
>76	ArgumentList	 
>77	Callee	releaseBuffer
>78	Identifier	releaseBuffer
>82	FunctionDef	ArrayBase 
>83	ParameterList	size_t count
>84	Parameter	 
>85	Identifier	count
>86	ParameterType	size_t
>87	ReturnType	void
>88	CompoundStatement	 
>89	ExpressionStatement	 
>90	AssignmentExpr	own_ = true
>91	Identifier	true
>92	Identifier	own_
>93	ExpressionStatement	 
>94	AssignmentExpr	buffer_ = new char [ count_ * BasicType 
>95	MultiplicativeExpression	count_ * BasicType 
>96	CallExpression	BasicType 
>97	ArgumentList	type_
>98	Argument	type_
>99	Identifier	type_
>100	Callee	BasicType 
>101	Identifier	BasicType 
>102	Identifier	count_
>103	Identifier	buffer_
>104	ExpressionStatement	 
>105	AssignmentExpr	count_ = count
>106	Identifier	count
>107	Identifier	count_
>108	IfStatement	if ( buffer_ != NULL )
>109	CompoundStatement	 
>110	ExpressionStatement	 
>111	ShiftExpression	NTA_THROW << \"allocateBuffer -- buffer already set. Use releaseBuffer first\"
>112	PrimaryExpression	\"allocateBuffer -- buffer already set. Use releaseBuffer first\"
>113	Identifier	NTA_THROW
>114	Condition	 
>115	EqualityExpression	buffer_ != NULL
>116	Identifier	NULL
>117	Identifier	buffer_
>129	FunctionDef	ArrayBase 
>130	ParameterList	void * buffer , size_t count
>131	Parameter	 
>132	Identifier	count
>133	ParameterType	size_t
>134	Parameter	 
>135	Identifier	buffer
>136	ParameterType	void *
>137	ReturnType	void
>138	CompoundStatement	 
>139	ExpressionStatement	 
>140	AssignmentExpr	own_ = false
>141	Identifier	false
>142	Identifier	own_
>143	ExpressionStatement	 
>144	AssignmentExpr	count_ = count
>145	Identifier	count
>146	Identifier	count_
>147	ExpressionStatement	 
>148	AssignmentExpr	buffer_ = ( char * ) buffer
>149	CastExpression	( char * ) buffer
>150	Identifier	buffer
>151	CastTarget	char *
>152	Identifier	buffer_
>153	IfStatement	if ( buffer_ != NULL )
>154	CompoundStatement	 
>155	ExpressionStatement	 
>156	ShiftExpression	NTA_THROW << \"setBuffer -- buffer already set. Use releaseBuffer first\"
>157	PrimaryExpression	\"setBuffer -- buffer already set. Use releaseBuffer first\"
>158	Identifier	NTA_THROW
>159	Condition	 
>160	EqualityExpression	buffer_ != NULL
>161	Identifier	NULL
>162	Identifier	buffer_
>173	FunctionDef	ArrayBase 
>174	ParameterList	 
>175	ReturnType	void
>176	CompoundStatement	 
>177	ExpressionStatement	 
>178	AssignmentExpr	count_ = 0
>179	PrimaryExpression	0
>180	Identifier	count_
>181	ExpressionStatement	 
>182	AssignmentExpr	buffer_ = NULL
>183	Identifier	NULL
>184	Identifier	buffer_
>185	ExpressionStatement	 
>186	Identifier	buffer_
>187	Statement	 
>188	Statement	 
>189	IfStatement	if ( own_ )
>190	Statement	 
>191	Condition	 
>192	Identifier	own_
>193	IfStatement	if ( buffer_ == NULL )
>194	ReturnStatement	 
>195	Condition	 
>196	EqualityExpression	buffer_ == NULL
>197	Identifier	NULL
>198	Identifier	buffer_
>206	FunctionDef	ArrayBase 
>207	ParameterList	 
>208	ReturnType	void *
>209	CompoundStatement	 
>210	ReturnStatement	 
>211	Identifier	buffer_
>216	FunctionDef	ArrayBase 
>217	ParameterList	 
>218	ReturnType	size_t
>219	CompoundStatement	 
>220	ReturnStatement	 
>221	Identifier	count_
>226	FunctionDef	ArrayBase 
>227	ParameterList	 
>228	ReturnType	NTA_BasicType
>229	CompoundStatement	 
>230	ReturnStatement	 
>231	Identifier	type_
<3=14,4
<4=11,8,5
<5=7,6
<8=10,9
<11=13,12
<14=15
<15=25,16
<16=17
<17=18
<18=24,19
<19=23,20
<20=22,21
<25=26
<26=33,27
<27=31,28
<28=29
<29=30
<31=32
<41=46,42
<42=43
<43=45,44
<46=47
<47=57,48
<48=49
<49=50
<50=56,51
<51=55,52
<52=54,53
<57=58
<58=65,59
<59=63,60
<60=61
<61=62
<63=64
<71=73,72
<73=74
<74=75
<75=77,76
<77=78
<82=88,87,83
<83=84
<84=86,85
<88=108,104,93,89
<89=90
<90=92,91
<93=94
<94=103,95
<95=102,96
<96=100,97
<97=98
<98=99
<100=101
<104=105
<105=107,106
<108=114,109
<109=110
<110=111
<111=113,112
<114=115
<115=117,116
<129=138,137,130
<130=134,131
<131=133,132
<134=136,135
<138=153,147,143,139
<139=140
<140=142,141
<143=144
<144=146,145
<147=148
<148=152,149
<149=151,150
<153=159,154
<154=155
<155=156
<156=158,157
<159=160
<160=162,161
<173=176,175,174
<176=193,189,188,187,185,181,177
<177=178
<178=180,179
<181=182
<182=184,183
<185=186
<189=191,190
<191=192
<193=195,194
<195=196
<196=198,197
<206=209,208,207
<209=210
<210=211
<216=219,218,217
<219=220
<220=221
<226=229,228,227
<229=230
<230=231
