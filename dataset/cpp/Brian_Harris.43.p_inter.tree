>7	FunctionDef	P_GiveAmmo (player_t * player , ammotype_t ammo , int num)
>8	ParameterList	player_t * player , ammotype_t ammo , int num
>9	Parameter	 
>10	Identifier	num
>11	ParameterType	int
>12	Parameter	 
>13	Identifier	ammo
>14	ParameterType	ammotype_t
>15	Parameter	 
>16	Identifier	player
>17	ParameterType	player_t *
>18	ReturnType	qboolean
>19	CompoundStatement	 
>20	ReturnStatement	 
>21	Identifier	true
>22	SwitchStatement	switch ( ammo )
>23	CompoundStatement	 
>24	BreakStatement	 
>25	Label	 
>26	Identifier	default
>27	IfStatement	if ( player -> readyweapon == wp_fist )
>28	CompoundStatement	 
>29	IfStatement	if ( player -> weaponowned [ wp_missile ] )
>30	ExpressionStatement	 
>31	AssignmentExpr	player -> pendingweapon = wp_missile
>32	Identifier	wp_missile
>33	PtrMemberAccess	player -> pendingweapon
>34	Identifier	pendingweapon
>35	Identifier	player
>36	Condition	 
>37	ArrayIndexing	player -> weaponowned [ wp_missile ]
>38	Identifier	wp_missile
>39	PtrMemberAccess	player -> weaponowned
>40	Identifier	weaponowned
>41	Identifier	player
>42	Condition	 
>43	EqualityExpression	player -> readyweapon == wp_fist
>44	Identifier	wp_fist
>45	PtrMemberAccess	player -> readyweapon
>46	Identifier	readyweapon
>47	Identifier	player
>48	Label	 
>49	Identifier	am_misl
>50	BreakStatement	 
>51	IfStatement	if ( player -> readyweapon == wp_fist || player -> readyweapon == wp_pistol )
>52	CompoundStatement	 
>53	IfStatement	if ( player -> weaponowned [ wp_plasma ] )
>54	ExpressionStatement	 
>55	AssignmentExpr	player -> pendingweapon = wp_plasma
>56	Identifier	wp_plasma
>57	PtrMemberAccess	player -> pendingweapon
>58	Identifier	pendingweapon
>59	Identifier	player
>60	Condition	 
>61	ArrayIndexing	player -> weaponowned [ wp_plasma ]
>62	Identifier	wp_plasma
>63	PtrMemberAccess	player -> weaponowned
>64	Identifier	weaponowned
>65	Identifier	player
>66	Condition	 
>67	OrExpression	player -> readyweapon == wp_fist || player -> readyweapon == wp_pistol
>68	EqualityExpression	player -> readyweapon == wp_pistol
>69	Identifier	wp_pistol
>70	PtrMemberAccess	player -> readyweapon
>71	Identifier	readyweapon
>72	Identifier	player
>73	EqualityExpression	player -> readyweapon == wp_fist
>74	Identifier	wp_fist
>75	PtrMemberAccess	player -> readyweapon
>76	Identifier	readyweapon
>77	Identifier	player
>78	Label	 
>79	Identifier	am_cell
>80	BreakStatement	 
>81	IfStatement	if ( player -> readyweapon == wp_fist || player -> readyweapon == wp_pistol )
>82	CompoundStatement	 
>83	IfStatement	if ( player -> weaponowned [ wp_shotgun ] )
>84	ExpressionStatement	 
>85	AssignmentExpr	player -> pendingweapon = wp_shotgun
>86	Identifier	wp_shotgun
>87	PtrMemberAccess	player -> pendingweapon
>88	Identifier	pendingweapon
>89	Identifier	player
>90	Condition	 
>91	ArrayIndexing	player -> weaponowned [ wp_shotgun ]
>92	Identifier	wp_shotgun
>93	PtrMemberAccess	player -> weaponowned
>94	Identifier	weaponowned
>95	Identifier	player
>96	Condition	 
>97	OrExpression	player -> readyweapon == wp_fist || player -> readyweapon == wp_pistol
>98	EqualityExpression	player -> readyweapon == wp_pistol
>99	Identifier	wp_pistol
>100	PtrMemberAccess	player -> readyweapon
>101	Identifier	readyweapon
>102	Identifier	player
>103	EqualityExpression	player -> readyweapon == wp_fist
>104	Identifier	wp_fist
>105	PtrMemberAccess	player -> readyweapon
>106	Identifier	readyweapon
>107	Identifier	player
>108	Label	 
>109	Identifier	am_shell
>110	BreakStatement	 
>111	IfStatement	if ( player -> readyweapon == wp_fist )
>112	CompoundStatement	 
>113	IfStatement	if ( player -> weaponowned [ wp_chaingun ] )
>114	ElseStatement	else
>115	ExpressionStatement	 
>116	AssignmentExpr	player -> pendingweapon = wp_pistol
>117	Identifier	wp_pistol
>118	PtrMemberAccess	player -> pendingweapon
>119	Identifier	pendingweapon
>120	Identifier	player
>121	ExpressionStatement	 
>122	AssignmentExpr	player -> pendingweapon = wp_chaingun
>123	Identifier	wp_chaingun
>124	PtrMemberAccess	player -> pendingweapon
>125	Identifier	pendingweapon
>126	Identifier	player
>127	Condition	 
>128	ArrayIndexing	player -> weaponowned [ wp_chaingun ]
>129	Identifier	wp_chaingun
>130	PtrMemberAccess	player -> weaponowned
>131	Identifier	weaponowned
>132	Identifier	player
>133	Condition	 
>134	EqualityExpression	player -> readyweapon == wp_fist
>135	Identifier	wp_fist
>136	PtrMemberAccess	player -> readyweapon
>137	Identifier	readyweapon
>138	Identifier	player
>139	Label	 
>140	Identifier	am_clip
>141	Condition	 
>142	Identifier	ammo
>143	IfStatement	if ( oldammo )
>144	ReturnStatement	 
>145	Identifier	true
>146	Condition	 
>147	Identifier	oldammo
>148	IfStatement	if ( player -> ammo [ ammo ] > player -> maxammo [ ammo ] )
>149	ExpressionStatement	 
>150	AssignmentExpr	player -> ammo [ ammo ] = player -> maxammo [ ammo ]
>151	ArrayIndexing	player -> maxammo [ ammo ]
>152	Identifier	ammo
>153	PtrMemberAccess	player -> maxammo
>154	Identifier	maxammo
>155	Identifier	player
>156	ArrayIndexing	player -> ammo [ ammo ]
>157	Identifier	ammo
>158	PtrMemberAccess	player -> ammo
>159	Identifier	ammo
>160	Identifier	player
>161	Condition	 
>162	RelationalExpression	player -> ammo [ ammo ] > player -> maxammo [ ammo ]
>163	ArrayIndexing	player -> maxammo [ ammo ]
>164	Identifier	ammo
>165	PtrMemberAccess	player -> maxammo
>166	Identifier	maxammo
>167	Identifier	player
>168	ArrayIndexing	player -> ammo [ ammo ]
>169	Identifier	ammo
>170	PtrMemberAccess	player -> ammo
>171	Identifier	ammo
>172	Identifier	player
>173	ExpressionStatement	 
>174	AssignmentExpr	player -> ammo [ ammo ] += num
>175	Identifier	num
>176	ArrayIndexing	player -> ammo [ ammo ]
>177	Identifier	ammo
>178	PtrMemberAccess	player -> ammo
>179	Identifier	ammo
>180	Identifier	player
>181	ExpressionStatement	 
>182	AssignmentExpr	oldammo = player -> ammo [ ammo ]
>183	ArrayIndexing	player -> ammo [ ammo ]
>184	Identifier	ammo
>185	PtrMemberAccess	player -> ammo
>186	Identifier	ammo
>187	Identifier	player
>188	Identifier	oldammo
>189	CompoundStatement	 
>190	ExpressionStatement	 
>191	AssignmentExpr	num <<= 1
>192	PrimaryExpression	1
>193	Identifier	num
>194	Statement	 
>195	Statement	 
>196	Statement	 
>197	Statement	 
>198	Statement	 
>199	Statement	 
>200	Statement	 
>201	Statement	 
>202	Statement	 
>203	Statement	 
>204	Statement	 
>205	Statement	 
>206	Statement	 
>207	Statement	 
>208	Statement	 
>209	Statement	 
>210	IfStatement	if ( num )
>211	ElseStatement	else
>212	ExpressionStatement	 
>213	AssignmentExpr	num = clipammo [ ammo ] / 2
>214	MultiplicativeExpression	clipammo [ ammo ] / 2
>215	PrimaryExpression	2
>216	ArrayIndexing	clipammo [ ammo ]
>217	Identifier	ammo
>218	Identifier	clipammo
>219	Identifier	num
>220	ExpressionStatement	 
>221	AssignmentExpr	num *= clipammo [ ammo ]
>222	ArrayIndexing	clipammo [ ammo ]
>223	Identifier	ammo
>224	Identifier	clipammo
>225	Identifier	num
>226	Condition	 
>227	Identifier	num
>228	IfStatement	if ( player -> ammo [ ammo ] == player -> maxammo [ ammo ] )
>229	ReturnStatement	 
>230	Identifier	false
>231	Condition	 
>232	EqualityExpression	player -> ammo [ ammo ] == player -> maxammo [ ammo ]
>233	ArrayIndexing	player -> maxammo [ ammo ]
>234	Identifier	ammo
>235	PtrMemberAccess	player -> maxammo
>236	Identifier	maxammo
>237	Identifier	player
>238	ArrayIndexing	player -> ammo [ ammo ]
>239	Identifier	ammo
>240	PtrMemberAccess	player -> ammo
>241	Identifier	ammo
>242	Identifier	player
>243	IfStatement	if ( ammo < 0 || ammo > NUMAMMO )
>244	ExpressionStatement	 
>245	CallExpression	I_Error ( \"P_GiveAmmo
>246	ArgumentList	\"P_GiveAmmo
>247	Argument	ammo
>248	Identifier	ammo
>249	Argument	\"P_GiveAmmo
>250	PrimaryExpression	\"P_GiveAmmo
>251	Callee	I_Error
>252	Identifier	I_Error
>253	Condition	 
>254	OrExpression	ammo < 0 || ammo > NUMAMMO
>255	RelationalExpression	ammo > NUMAMMO
>256	Identifier	NUMAMMO
>257	Identifier	ammo
>258	RelationalExpression	ammo < 0
>259	PrimaryExpression	0
>260	Identifier	ammo
>261	IfStatement	if ( ammo == am_noammo )
>262	ReturnStatement	 
>263	Identifier	false
>264	Condition	 
>265	EqualityExpression	ammo == am_noammo
>266	Identifier	am_noammo
>267	Identifier	ammo
>268	IdentifierDeclStatement	 
>269	IdentifierDecl	oldammo
>270	Identifier	oldammo
>271	IdentifierDeclType	int
>306	FunctionDef	P_GiveWeapon (player_t * player , weapontype_t weapon , qboolean dropped)
>307	ParameterList	player_t * player , weapontype_t weapon , qboolean dropped
>308	Parameter	 
>309	Identifier	dropped
>310	ParameterType	qboolean
>311	Parameter	 
>312	Identifier	weapon
>313	ParameterType	weapontype_t
>314	Parameter	 
>315	Identifier	player
>316	ParameterType	player_t *
>317	ReturnType	qboolean
>318	CompoundStatement	 
>319	ReturnStatement	 
>320	OrExpression	gaveweapon || gaveammo
>321	Identifier	gaveammo
>322	Identifier	gaveweapon
>323	IfStatement	if ( player -> weaponowned [ weapon ] )
>324	ElseStatement	else
>325	CompoundStatement	 
>326	ExpressionStatement	 
>327	AssignmentExpr	player -> pendingweapon = weapon
>328	Identifier	weapon
>329	PtrMemberAccess	player -> pendingweapon
>330	Identifier	pendingweapon
>331	Identifier	player
>332	ExpressionStatement	 
>333	AssignmentExpr	player -> weaponowned [ weapon ] = true
>334	Identifier	true
>335	ArrayIndexing	player -> weaponowned [ weapon ]
>336	Identifier	weapon
>337	PtrMemberAccess	player -> weaponowned
>338	Identifier	weaponowned
>339	Identifier	player
>340	ExpressionStatement	 
>341	AssignmentExpr	gaveweapon = true
>342	Identifier	true
>343	Identifier	gaveweapon
>344	ExpressionStatement	 
>345	AssignmentExpr	gaveweapon = false
>346	Identifier	false
>347	Identifier	gaveweapon
>348	Condition	 
>349	ArrayIndexing	player -> weaponowned [ weapon ]
>350	Identifier	weapon
>351	PtrMemberAccess	player -> weaponowned
>352	Identifier	weaponowned
>353	Identifier	player
>354	IfStatement	if ( weaponinfo [ weapon ] . ammo != am_noammo )
>355	ElseStatement	else
>356	ExpressionStatement	 
>357	AssignmentExpr	gaveammo = false
>358	Identifier	false
>359	Identifier	gaveammo
>360	CompoundStatement	 
>361	IfStatement	if ( dropped )
>362	ElseStatement	else
>363	ExpressionStatement	 
>364	AssignmentExpr	gaveammo = P_GiveAmmo ( player , weaponinfo [ weapon ] . ammo , 2 )
>365	CallExpression	P_GiveAmmo ( player , weaponinfo [ weapon ] . ammo , 2 )
>366	ArgumentList	player
>367	Argument	2
>368	PrimaryExpression	2
>369	Argument	weaponinfo [ weapon ] . ammo
>370	MemberAccess	weaponinfo [ weapon ] . ammo
>371	Identifier	ammo
>372	ArrayIndexing	weaponinfo [ weapon ]
>373	Identifier	weapon
>374	Identifier	weaponinfo
>375	Argument	player
>376	Identifier	player
>377	Callee	P_GiveAmmo
>378	Identifier	P_GiveAmmo
>379	Identifier	gaveammo
>380	ExpressionStatement	 
>381	AssignmentExpr	gaveammo = P_GiveAmmo ( player , weaponinfo [ weapon ] . ammo , 1 )
>382	CallExpression	P_GiveAmmo ( player , weaponinfo [ weapon ] . ammo , 1 )
>383	ArgumentList	player
>384	Argument	1
>385	PrimaryExpression	1
>386	Argument	weaponinfo [ weapon ] . ammo
>387	MemberAccess	weaponinfo [ weapon ] . ammo
>388	Identifier	ammo
>389	ArrayIndexing	weaponinfo [ weapon ]
>390	Identifier	weapon
>391	Identifier	weaponinfo
>392	Argument	player
>393	Identifier	player
>394	Callee	P_GiveAmmo
>395	Identifier	P_GiveAmmo
>396	Identifier	gaveammo
>397	Condition	 
>398	Identifier	dropped
>399	Condition	 
>400	EqualityExpression	weaponinfo [ weapon ] . ammo != am_noammo
>401	Identifier	am_noammo
>402	MemberAccess	weaponinfo [ weapon ] . ammo
>403	Identifier	ammo
>404	ArrayIndexing	weaponinfo [ weapon ]
>405	Identifier	weapon
>406	Identifier	weaponinfo
>407	CompoundStatement	 
>408	ReturnStatement	 
>409	Identifier	false
>410	ExpressionStatement	 
>411	CallExpression	S_StartSound ( player -> mo , sfx_wpnup )
>412	ArgumentList	player -> mo
>413	Argument	sfx_wpnup
>414	Identifier	sfx_wpnup
>415	Argument	player -> mo
>416	PtrMemberAccess	player -> mo
>417	Identifier	mo
>418	Identifier	player
>419	Callee	S_StartSound
>420	Identifier	S_StartSound
>421	Statement	 
>422	Statement	 
>423	Statement	 
>424	Statement	 
>425	Statement	 
>426	Statement	 
>427	Statement	 
>428	Statement	 
>429	Statement	 
>430	Statement	 
>431	Statement	 
>432	Statement	 
>433	Statement	 
>434	Statement	 
>435	Statement	 
>436	Statement	 
>437	ExpressionStatement	 
>438	AssignmentExpr	player -> pendingweapon = weapon
>439	Identifier	weapon
>440	PtrMemberAccess	player -> pendingweapon
>441	Identifier	pendingweapon
>442	Identifier	player
>443	ExpressionStatement	 
>444	CallExpression	P_GiveAmmo ( player , weaponinfo [ weapon ] . ammo , 5 )
>445	ArgumentList	player
>446	Argument	5
>447	PrimaryExpression	5
>448	Argument	weaponinfo [ weapon ] . ammo
>449	MemberAccess	weaponinfo [ weapon ] . ammo
>450	Identifier	ammo
>451	ArrayIndexing	weaponinfo [ weapon ]
>452	Identifier	weapon
>453	Identifier	weaponinfo
>454	Argument	player
>455	Identifier	player
>456	Callee	P_GiveAmmo
>457	Identifier	P_GiveAmmo
>458	Statement	 
>459	Statement	 
>460	Statement	 
>461	Statement	 
>462	Statement	 
>463	Statement	 
>464	Statement	 
>465	ExpressionStatement	 
>466	AssignmentExpr	player -> weaponowned [ weapon ] = true
>467	Identifier	true
>468	ArrayIndexing	player -> weaponowned [ weapon ]
>469	Identifier	weapon
>470	PtrMemberAccess	player -> weaponowned
>471	Identifier	weaponowned
>472	Identifier	player
>473	ExpressionStatement	 
>474	AssignmentExpr	player -> bonuscount += BONUSADD
>475	Identifier	BONUSADD
>476	PtrMemberAccess	player -> bonuscount
>477	Identifier	bonuscount
>478	Identifier	player
>479	IfStatement	if ( player -> weaponowned [ weapon ] )
>480	ElseStatement	else
>481	ExpressionStatement	 
>482	CallExpression	P_GiveAmmo ( player , weaponinfo [ weapon ] . ammo , 2 )
>483	ArgumentList	player
>484	Argument	2
>485	PrimaryExpression	2
>486	Argument	weaponinfo [ weapon ] . ammo
>487	MemberAccess	weaponinfo [ weapon ] . ammo
>488	Identifier	ammo
>489	ArrayIndexing	weaponinfo [ weapon ]
>490	Identifier	weapon
>491	Identifier	weaponinfo
>492	Argument	player
>493	Identifier	player
>494	Callee	P_GiveAmmo
>495	Identifier	P_GiveAmmo
>496	ReturnStatement	 
>497	Identifier	false
>498	Condition	 
>499	ArrayIndexing	player -> weaponowned [ weapon ]
>500	Identifier	weapon
>501	PtrMemberAccess	player -> weaponowned
>502	Identifier	weaponowned
>503	Identifier	player
>504	Statement	 
>505	Statement	 
>506	Statement	 
>507	Statement	 
>508	Statement	 
>509	Statement	 
>510	Statement	 
>511	Statement	 
>512	Statement	 
>513	Statement	 
>514	Statement	 
>515	Statement	 
>516	Statement	 
>517	Statement	 
>518	Statement	 
>519	Statement	 
>520	Statement	 
>521	Statement	 
>522	Statement	 
>523	IdentifierDeclStatement	 
>524	IdentifierDecl	gaveweapon
>525	Identifier	gaveweapon
>526	IdentifierDeclType	qboolean
>527	IdentifierDeclStatement	 
>528	IdentifierDecl	gaveammo
>529	Identifier	gaveammo
>530	IdentifierDeclType	qboolean
>556	FunctionDef	P_GiveBody (player_t * player , int num)
>557	ParameterList	player_t * player , int num
>558	Parameter	 
>559	Identifier	num
>560	ParameterType	int
>561	Parameter	 
>562	Identifier	player
>563	ParameterType	player_t *
>564	ReturnType	qboolean
>565	CompoundStatement	 
>566	ReturnStatement	 
>567	Identifier	true
>568	ExpressionStatement	 
>569	AssignmentExpr	player -> mo -> health = player -> health
>570	PtrMemberAccess	player -> health
>571	Identifier	health
>572	Identifier	player
>573	PtrMemberAccess	player -> mo -> health
>574	Identifier	health
>575	PtrMemberAccess	player -> mo
>576	Identifier	mo
>577	Identifier	player
>578	IfStatement	if ( player -> health > MAXHEALTH )
>579	ExpressionStatement	 
>580	AssignmentExpr	player -> health = MAXHEALTH
>581	Identifier	MAXHEALTH
>582	PtrMemberAccess	player -> health
>583	Identifier	health
>584	Identifier	player
>585	Condition	 
>586	RelationalExpression	player -> health > MAXHEALTH
>587	Identifier	MAXHEALTH
>588	PtrMemberAccess	player -> health
>589	Identifier	health
>590	Identifier	player
>591	ExpressionStatement	 
>592	AssignmentExpr	player -> health += num
>593	Identifier	num
>594	PtrMemberAccess	player -> health
>595	Identifier	health
>596	Identifier	player
>597	IfStatement	if ( player -> health >= MAXHEALTH )
>598	ReturnStatement	 
>599	Identifier	false
>600	Condition	 
>601	RelationalExpression	player -> health >= MAXHEALTH
>602	Identifier	MAXHEALTH
>603	PtrMemberAccess	player -> health
>604	Identifier	health
>605	Identifier	player
>620	FunctionDef	P_GiveArmor (player_t * player , int armortype)
>621	ParameterList	player_t * player , int armortype
>622	Parameter	 
>623	Identifier	armortype
>624	ParameterType	int
>625	Parameter	 
>626	Identifier	player
>627	ParameterType	player_t *
>628	ReturnType	qboolean
>629	CompoundStatement	 
>630	ReturnStatement	 
>631	Identifier	true
>632	ExpressionStatement	 
>633	AssignmentExpr	player -> armorpoints = hits
>634	Identifier	hits
>635	PtrMemberAccess	player -> armorpoints
>636	Identifier	armorpoints
>637	Identifier	player
>638	ExpressionStatement	 
>639	AssignmentExpr	player -> armortype = armortype
>640	Identifier	armortype
>641	PtrMemberAccess	player -> armortype
>642	Identifier	armortype
>643	Identifier	player
>644	IfStatement	if ( player -> armorpoints >= hits )
>645	ReturnStatement	 
>646	Identifier	false
>647	Condition	 
>648	RelationalExpression	player -> armorpoints >= hits
>649	Identifier	hits
>650	PtrMemberAccess	player -> armorpoints
>651	Identifier	armorpoints
>652	Identifier	player
>653	ExpressionStatement	 
>654	AssignmentExpr	hits = armortype * 100
>655	MultiplicativeExpression	armortype * 100
>656	PrimaryExpression	100
>657	Identifier	armortype
>658	Identifier	hits
>659	IdentifierDeclStatement	 
>660	IdentifierDecl	hits
>661	Identifier	hits
>662	IdentifierDeclType	int
>674	FunctionDef	P_GiveCard (player_t * player , card_t card , const char * pickup_message)
>675	ParameterList	player_t * player , card_t card , const char * pickup_message
>676	Parameter	 
>677	Identifier	pickup_message
>678	ParameterType	const char *
>679	Parameter	 
>680	Identifier	card
>681	ParameterType	card_t
>682	Parameter	 
>683	Identifier	player
>684	ParameterType	player_t *
>685	ReturnType	void
>686	CompoundStatement	 
>687	CompoundStatement	 
>688	ForStatement	for ( int i = 0 ; i < MAXPLAYERS ; i ++ )
>689	CompoundStatement	 
>690	CompoundStatement	 
>691	ExpressionStatement	 
>692	AssignmentExpr	thePlayer -> cards [ card ] = 1
>693	PrimaryExpression	1
>694	ArrayIndexing	thePlayer -> cards [ card ]
>695	Identifier	card
>696	PtrMemberAccess	thePlayer -> cards
>697	Identifier	cards
>698	Identifier	thePlayer
>699	ExpressionStatement	 
>700	AssignmentExpr	thePlayer -> message = pickup_message
>701	Identifier	pickup_message
>702	PtrMemberAccess	thePlayer -> message
>703	Identifier	message
>704	Identifier	thePlayer
>705	ExpressionStatement	 
>706	AssignmentExpr	thePlayer -> bonuscount = BONUSADD
>707	Identifier	BONUSADD
>708	PtrMemberAccess	thePlayer -> bonuscount
>709	Identifier	bonuscount
>710	Identifier	thePlayer
>711	IfStatement	if ( thePlayer -> cards [ card ] )
>712	ContinueStatement	 
>713	Condition	 
>714	ArrayIndexing	thePlayer -> cards [ card ]
>715	Identifier	card
>716	PtrMemberAccess	thePlayer -> cards
>717	Identifier	cards
>718	Identifier	thePlayer
>719	ExpressionStatement	 
>720	ArrayIndexing	g -> players [ i ]
>721	Identifier	i
>722	PtrMemberAccess	g -> players
>723	Identifier	players
>724	Identifier	g
>725	Statement	 
>726	Statement	 
>727	Statement	 
>728	Statement	 
>729	Statement	 
>730	Statement	 
>731	Statement	 
>732	Statement	 
>733	Statement	 
>734	Statement	 
>735	Statement	 
>736	Statement	 
>737	Statement	 
>738	Statement	 
>739	Statement	 
>740	Statement	 
>741	IncDecOp	 
>742	IncDec	++
>743	Identifier	i
>744	Condition	 
>745	RelationalExpression	i < MAXPLAYERS
>746	Identifier	MAXPLAYERS
>747	Identifier	i
>748	ForInit	 
>749	IdentifierDeclStatement	int i = 0 ;
>750	IdentifierDecl	i = 0
>751	AssignmentExpr	i = 0
>752	PrimaryExpression	0
>753	Identifier	i
>754	Identifier	i
>755	IdentifierDeclType	int
>756	Statement	 
>757	Statement	 
>758	Statement	 
>759	Statement	 
>760	Statement	 
>761	Statement	 
>762	Statement	 
>763	Statement	 
>764	Statement	 
>765	Statement	 
>766	Statement	 
>767	Statement	 
>768	Statement	 
>769	Statement	 
>770	Statement	 
>771	Statement	 
>772	Statement	 
>773	Statement	 
>774	Statement	 
>775	Statement	 
>796	FunctionDef	P_GivePower (player_t * player , int power)
>797	ParameterList	player_t * player , int power
>798	Parameter	 
>799	Identifier	power
>800	ParameterType	int
>801	Parameter	 
>802	Identifier	player
>803	ParameterType	player_t *
>804	ReturnType	qboolean
>805	CompoundStatement	 
>806	ReturnStatement	 
>807	Identifier	true
>808	ExpressionStatement	 
>809	AssignmentExpr	player -> powers [ power ] = 1
>810	PrimaryExpression	1
>811	ArrayIndexing	player -> powers [ power ]
>812	Identifier	power
>813	PtrMemberAccess	player -> powers
>814	Identifier	powers
>815	Identifier	player
>816	IfStatement	if ( player -> powers [ power ] )
>817	ReturnStatement	 
>818	Identifier	false
>819	Condition	 
>820	ArrayIndexing	player -> powers [ power ]
>821	Identifier	power
>822	PtrMemberAccess	player -> powers
>823	Identifier	powers
>824	Identifier	player
>825	IfStatement	if ( power == pw_strength )
>826	CompoundStatement	 
>827	ReturnStatement	 
>828	Identifier	true
>829	ExpressionStatement	 
>830	AssignmentExpr	player -> powers [ power ] = 1
>831	PrimaryExpression	1
>832	ArrayIndexing	player -> powers [ power ]
>833	Identifier	power
>834	PtrMemberAccess	player -> powers
>835	Identifier	powers
>836	Identifier	player
>837	ExpressionStatement	 
>838	CallExpression	P_GiveBody ( player , 100 )
>839	ArgumentList	player
>840	Argument	100
>841	PrimaryExpression	100
>842	Argument	player
>843	Identifier	player
>844	Callee	P_GiveBody
>845	Identifier	P_GiveBody
>846	Condition	 
>847	EqualityExpression	power == pw_strength
>848	Identifier	pw_strength
>849	Identifier	power
>850	IfStatement	if ( power == pw_ironfeet )
>851	CompoundStatement	 
>852	ReturnStatement	 
>853	Identifier	true
>854	ExpressionStatement	 
>855	AssignmentExpr	player -> powers [ power ] = IRONTICS
>856	Identifier	IRONTICS
>857	ArrayIndexing	player -> powers [ power ]
>858	Identifier	power
>859	PtrMemberAccess	player -> powers
>860	Identifier	powers
>861	Identifier	player
>862	Condition	 
>863	EqualityExpression	power == pw_ironfeet
>864	Identifier	pw_ironfeet
>865	Identifier	power
>866	IfStatement	if ( power == pw_infrared )
>867	CompoundStatement	 
>868	ReturnStatement	 
>869	Identifier	true
>870	ExpressionStatement	 
>871	AssignmentExpr	player -> powers [ power ] = INFRATICS
>872	Identifier	INFRATICS
>873	ArrayIndexing	player -> powers [ power ]
>874	Identifier	power
>875	PtrMemberAccess	player -> powers
>876	Identifier	powers
>877	Identifier	player
>878	Condition	 
>879	EqualityExpression	power == pw_infrared
>880	Identifier	pw_infrared
>881	Identifier	power
>882	IfStatement	if ( power == pw_invisibility )
>883	CompoundStatement	 
>884	ReturnStatement	 
>885	Identifier	true
>886	ExpressionStatement	 
>887	AssignmentExpr	player -> mo -> flags |= MF_SHADOW
>888	Identifier	MF_SHADOW
>889	PtrMemberAccess	player -> mo -> flags
>890	Identifier	flags
>891	PtrMemberAccess	player -> mo
>892	Identifier	mo
>893	Identifier	player
>894	ExpressionStatement	 
>895	AssignmentExpr	player -> powers [ power ] = INVISTICS
>896	Identifier	INVISTICS
>897	ArrayIndexing	player -> powers [ power ]
>898	Identifier	power
>899	PtrMemberAccess	player -> powers
>900	Identifier	powers
>901	Identifier	player
>902	Condition	 
>903	EqualityExpression	power == pw_invisibility
>904	Identifier	pw_invisibility
>905	Identifier	power
>906	IfStatement	if ( power == pw_invulnerability )
>907	CompoundStatement	 
>908	ReturnStatement	 
>909	Identifier	true
>910	ExpressionStatement	 
>911	AssignmentExpr	player -> powers [ power ] = INVULNTICS
>912	Identifier	INVULNTICS
>913	ArrayIndexing	player -> powers [ power ]
>914	Identifier	power
>915	PtrMemberAccess	player -> powers
>916	Identifier	powers
>917	Identifier	player
>918	Condition	 
>919	EqualityExpression	power == pw_invulnerability
>920	Identifier	pw_invulnerability
>921	Identifier	power
>947	FunctionDef	P_TouchSpecialThing (mobj_t * special , mobj_t * toucher)
>948	ParameterList	mobj_t * special , mobj_t * toucher
>949	Parameter	 
>950	Identifier	toucher
>951	ParameterType	mobj_t *
>952	Parameter	 
>953	Identifier	special
>954	ParameterType	mobj_t *
>955	ReturnType	void
>956	CompoundStatement	 
>957	ExpressionStatement	 
>958	CallExpression	S_StartSound ( player -> mo , sound )
>959	ArgumentList	player -> mo
>960	Argument	sound
>961	Identifier	sound
>962	Argument	player -> mo
>963	PtrMemberAccess	player -> mo
>964	Identifier	mo
>965	Identifier	player
>966	Callee	S_StartSound
>967	Identifier	S_StartSound
>968	Statement	 
>969	Statement	 
>970	Statement	 
>971	Statement	 
>972	Statement	 
>973	Statement	 
>974	Statement	 
>975	Statement	 
>976	Statement	 
>977	Statement	 
>978	Statement	 
>979	Statement	 
>980	Statement	 
>981	Statement	 
>982	Statement	 
>983	Statement	 
>984	ExpressionStatement	 
>985	AssignmentExpr	player -> bonuscount += BONUSADD
>986	Identifier	BONUSADD
>987	PtrMemberAccess	player -> bonuscount
>988	Identifier	bonuscount
>989	Identifier	player
>990	ExpressionStatement	 
>991	CallExpression	P_RemoveMobj ( special )
>992	ArgumentList	special
>993	Argument	special
>994	Identifier	special
>995	Callee	P_RemoveMobj
>996	Identifier	P_RemoveMobj
>997	IfStatement	if ( special -> flags & MF_COUNTITEM )
>998	ExpressionStatement	 
>999	IncDecOp	player -> itemcount ++
>1000	IncDec	++
>1001	PtrMemberAccess	player -> itemcount
>1002	Identifier	itemcount
>1003	Identifier	player
>1004	Condition	 
>1005	BitAndExpression	special -> flags & MF_COUNTITEM
>1006	Identifier	MF_COUNTITEM
>1007	PtrMemberAccess	special -> flags
>1008	Identifier	flags
>1009	Identifier	special
>1010	SwitchStatement	switch ( special -> sprite )
>1011	CompoundStatement	 
>1012	ExpressionStatement	 
>1013	CallExpression	I_Error ( \"P_SpecialThing
>1014	ArgumentList	\"P_SpecialThing
>1015	Argument	\"P_SpecialThing
>1016	PrimaryExpression	\"P_SpecialThing
>1017	Callee	I_Error
>1018	Identifier	I_Error
>1019	Label	 
>1020	Identifier	default
>1021	BreakStatement	 
>1022	ExpressionStatement	 
>1023	AssignmentExpr	sound = sfx_wpnup
>1024	Identifier	sfx_wpnup
>1025	Identifier	sound
>1026	ExpressionStatement	 
>1027	AssignmentExpr	player -> message = GOTSHOTGUN2
>1028	Identifier	GOTSHOTGUN2
>1029	PtrMemberAccess	player -> message
>1030	Identifier	message
>1031	Identifier	player
>1032	IfStatement	if ( ! P_GiveWeapon ( player , wp_supershotgun , special -> flags & MF_DROPPED ) )
>1033	ReturnStatement	 
>1034	Condition	 
>1035	UnaryOp	! P_GiveWeapon ( player , wp_supershotgun , special -> flags & MF_DROPPED )
>1036	CallExpression	P_GiveWeapon ( player , wp_supershotgun , special -> flags & MF_DROPPED )
>1037	ArgumentList	player
>1038	Argument	special -> flags & MF_DROPPED
>1039	BitAndExpression	special -> flags & MF_DROPPED
>1040	Identifier	MF_DROPPED
>1041	PtrMemberAccess	special -> flags
>1042	Identifier	flags
>1043	Identifier	special
>1044	Argument	wp_supershotgun
>1045	Identifier	wp_supershotgun
>1046	Argument	player
>1047	Identifier	player
>1048	Callee	P_GiveWeapon
>1049	Identifier	P_GiveWeapon
>1050	UnaryOperator	!
>1051	Label	 
>1052	Identifier	SPR_SGN2
>1053	BreakStatement	 
>1054	ExpressionStatement	 
>1055	AssignmentExpr	sound = sfx_wpnup
>1056	Identifier	sfx_wpnup
>1057	Identifier	sound
>1058	ExpressionStatement	 
>1059	AssignmentExpr	player -> message = GOTSHOTGUN
>1060	Identifier	GOTSHOTGUN
>1061	PtrMemberAccess	player -> message
>1062	Identifier	message
>1063	Identifier	player
>1064	IfStatement	if ( ! P_GiveWeapon ( player , wp_shotgun , special -> flags & MF_DROPPED ) )
>1065	ReturnStatement	 
>1066	Condition	 
>1067	UnaryOp	! P_GiveWeapon ( player , wp_shotgun , special -> flags & MF_DROPPED )
>1068	CallExpression	P_GiveWeapon ( player , wp_shotgun , special -> flags & MF_DROPPED )
>1069	ArgumentList	player
>1070	Argument	special -> flags & MF_DROPPED
>1071	BitAndExpression	special -> flags & MF_DROPPED
>1072	Identifier	MF_DROPPED
>1073	PtrMemberAccess	special -> flags
>1074	Identifier	flags
>1075	Identifier	special
>1076	Argument	wp_shotgun
>1077	Identifier	wp_shotgun
>1078	Argument	player
>1079	Identifier	player
>1080	Callee	P_GiveWeapon
>1081	Identifier	P_GiveWeapon
>1082	UnaryOperator	!
>1083	Label	 
>1084	Identifier	SPR_SHOT
>1085	BreakStatement	 
>1086	ExpressionStatement	 
>1087	AssignmentExpr	sound = sfx_wpnup
>1088	Identifier	sfx_wpnup
>1089	Identifier	sound
>1090	ExpressionStatement	 
>1091	AssignmentExpr	player -> message = GOTPLASMA
>1092	Identifier	GOTPLASMA
>1093	PtrMemberAccess	player -> message
>1094	Identifier	message
>1095	Identifier	player
>1096	IfStatement	if ( ! P_GiveWeapon ( player , wp_plasma , false ) )
>1097	ReturnStatement	 
>1098	Condition	 
>1099	UnaryOp	! P_GiveWeapon ( player , wp_plasma , false )
>1100	CallExpression	P_GiveWeapon ( player , wp_plasma , false )
>1101	ArgumentList	player
>1102	Argument	false
>1103	Identifier	false
>1104	Argument	wp_plasma
>1105	Identifier	wp_plasma
>1106	Argument	player
>1107	Identifier	player
>1108	Callee	P_GiveWeapon
>1109	Identifier	P_GiveWeapon
>1110	UnaryOperator	!
>1111	Label	 
>1112	Identifier	SPR_PLAS
>1113	BreakStatement	 
>1114	ExpressionStatement	 
>1115	AssignmentExpr	sound = sfx_wpnup
>1116	Identifier	sfx_wpnup
>1117	Identifier	sound
>1118	ExpressionStatement	 
>1119	AssignmentExpr	player -> message = GOTLAUNCHER
>1120	Identifier	GOTLAUNCHER
>1121	PtrMemberAccess	player -> message
>1122	Identifier	message
>1123	Identifier	player
>1124	IfStatement	if ( ! P_GiveWeapon ( player , wp_missile , false ) )
>1125	ReturnStatement	 
>1126	Condition	 
>1127	UnaryOp	! P_GiveWeapon ( player , wp_missile , false )
>1128	CallExpression	P_GiveWeapon ( player , wp_missile , false )
>1129	ArgumentList	player
>1130	Argument	false
>1131	Identifier	false
>1132	Argument	wp_missile
>1133	Identifier	wp_missile
>1134	Argument	player
>1135	Identifier	player
>1136	Callee	P_GiveWeapon
>1137	Identifier	P_GiveWeapon
>1138	UnaryOperator	!
>1139	Label	 
>1140	Identifier	SPR_LAUN
>1141	BreakStatement	 
>1142	ExpressionStatement	 
>1143	AssignmentExpr	sound = sfx_wpnup
>1144	Identifier	sfx_wpnup
>1145	Identifier	sound
>1146	ExpressionStatement	 
>1147	AssignmentExpr	player -> message = GOTCHAINSAW
>1148	Identifier	GOTCHAINSAW
>1149	PtrMemberAccess	player -> message
>1150	Identifier	message
>1151	Identifier	player
>1152	IfStatement	if ( ! P_GiveWeapon ( player , wp_chainsaw , false ) )
>1153	ReturnStatement	 
>1154	Condition	 
>1155	UnaryOp	! P_GiveWeapon ( player , wp_chainsaw , false )
>1156	CallExpression	P_GiveWeapon ( player , wp_chainsaw , false )
>1157	ArgumentList	player
>1158	Argument	false
>1159	Identifier	false
>1160	Argument	wp_chainsaw
>1161	Identifier	wp_chainsaw
>1162	Argument	player
>1163	Identifier	player
>1164	Callee	P_GiveWeapon
>1165	Identifier	P_GiveWeapon
>1166	UnaryOperator	!
>1167	Label	 
>1168	Identifier	SPR_CSAW
>1169	BreakStatement	 
>1170	ExpressionStatement	 
>1171	AssignmentExpr	sound = sfx_wpnup
>1172	Identifier	sfx_wpnup
>1173	Identifier	sound
>1174	ExpressionStatement	 
>1175	AssignmentExpr	player -> message = GOTCHAINGUN
>1176	Identifier	GOTCHAINGUN
>1177	PtrMemberAccess	player -> message
>1178	Identifier	message
>1179	Identifier	player
>1180	IfStatement	if ( ! P_GiveWeapon ( player , wp_chaingun , special -> flags & MF_DROPPED ) )
>1181	ReturnStatement	 
>1182	Condition	 
>1183	UnaryOp	! P_GiveWeapon ( player , wp_chaingun , special -> flags & MF_DROPPED )
>1184	CallExpression	P_GiveWeapon ( player , wp_chaingun , special -> flags & MF_DROPPED )
>1185	ArgumentList	player
>1186	Argument	special -> flags & MF_DROPPED
>1187	BitAndExpression	special -> flags & MF_DROPPED
>1188	Identifier	MF_DROPPED
>1189	PtrMemberAccess	special -> flags
>1190	Identifier	flags
>1191	Identifier	special
>1192	Argument	wp_chaingun
>1193	Identifier	wp_chaingun
>1194	Argument	player
>1195	Identifier	player
>1196	Callee	P_GiveWeapon
>1197	Identifier	P_GiveWeapon
>1198	UnaryOperator	!
>1199	Label	 
>1200	Identifier	SPR_MGUN
>1201	BreakStatement	 
>1202	ExpressionStatement	 
>1203	AssignmentExpr	sound = sfx_wpnup
>1204	Identifier	sfx_wpnup
>1205	Identifier	sound
>1206	ExpressionStatement	 
>1207	AssignmentExpr	player -> message = GOTBFG9000
>1208	Identifier	GOTBFG9000
>1209	PtrMemberAccess	player -> message
>1210	Identifier	message
>1211	Identifier	player
>1212	IfStatement	if ( ! common -> IsMultiplayer ( ) )
>1213	CompoundStatement	 
>1214	SwitchStatement	switch ( DoomLib 
>1215	CompoundStatement	 
>1216	CompoundStatement	 
>1217	BreakStatement	 
>1218	Label	 
>1219	Identifier	default
>1220	CompoundStatement	 
>1221	ExpressionStatement	 
>1222	CallExpression	idAchievementManager 
>1223	ArgumentList	ACHIEVEMENT_DOOM2_REALLY_BIG_GUN_FIND_BFG_SINGLEPLAYER
>1224	Argument	ACHIEVEMENT_DOOM2_REALLY_BIG_GUN_FIND_BFG_SINGLEPLAYER
>1225	Identifier	ACHIEVEMENT_DOOM2_REALLY_BIG_GUN_FIND_BFG_SINGLEPLAYER
>1226	Callee	idAchievementManager 
>1227	Identifier	idAchievementManager 
>1228	Label	 
>1229	Identifier	GAME_SKU_DOOM2_BFG
>1230	Condition	 
>1231	CallExpression	DoomLib 
>1232	ArgumentList	 
>1233	Callee	DoomLib 
>1234	Identifier	DoomLib 
>1235	Condition	 
>1236	UnaryOp	! common -> IsMultiplayer ( )
>1237	CallExpression	common -> IsMultiplayer ( )
>1238	ArgumentList	 
>1239	Callee	common -> IsMultiplayer
>1240	PtrMemberAccess	common -> IsMultiplayer
>1241	Identifier	IsMultiplayer
>1242	Identifier	common
>1243	UnaryOperator	!
>1244	IfStatement	if ( ! P_GiveWeapon ( player , wp_bfg , false ) )
>1245	ReturnStatement	 
>1246	Condition	 
>1247	UnaryOp	! P_GiveWeapon ( player , wp_bfg , false )
>1248	CallExpression	P_GiveWeapon ( player , wp_bfg , false )
>1249	ArgumentList	player
>1250	Argument	false
>1251	Identifier	false
>1252	Argument	wp_bfg
>1253	Identifier	wp_bfg
>1254	Argument	player
>1255	Identifier	player
>1256	Callee	P_GiveWeapon
>1257	Identifier	P_GiveWeapon
>1258	UnaryOperator	!
>1259	Label	 
>1260	Identifier	SPR_BFUG
>1261	BreakStatement	 
>1262	ExpressionStatement	 
>1263	AssignmentExpr	player -> message = GOTBACKPACK
>1264	Identifier	GOTBACKPACK
>1265	PtrMemberAccess	player -> message
>1266	Identifier	message
>1267	Identifier	player
>1268	ForStatement	for ( i = 0 ; i < NUMAMMO ; i ++ )
>1269	ExpressionStatement	 
>1270	CallExpression	P_GiveAmmo ( player , ( ammotype_t ) i , 1 )
>1271	ArgumentList	player
>1272	Argument	1
>1273	PrimaryExpression	1
>1274	Argument	( ammotype_t ) i
>1275	CastExpression	( ammotype_t ) i
>1276	Identifier	i
>1277	CastTarget	ammotype_t
>1278	Argument	player
>1279	Identifier	player
>1280	Callee	P_GiveAmmo
>1281	Identifier	P_GiveAmmo
>1282	IncDecOp	 
>1283	IncDec	++
>1284	Identifier	i
>1285	Condition	 
>1286	RelationalExpression	i < NUMAMMO
>1287	Identifier	NUMAMMO
>1288	Identifier	i
>1289	ForInit	 
>1290	AssignmentExpr	i = 0
>1291	PrimaryExpression	0
>1292	Identifier	i
>1293	IfStatement	if ( ! player -> backpack )
>1294	CompoundStatement	 
>1295	ExpressionStatement	 
>1296	AssignmentExpr	player -> backpack = true
>1297	Identifier	true
>1298	PtrMemberAccess	player -> backpack
>1299	Identifier	backpack
>1300	Identifier	player
>1301	ForStatement	for ( i = 0 ; i < NUMAMMO ; i ++ )
>1302	ExpressionStatement	 
>1303	AssignmentExpr	player -> maxammo [ i ] *= 2
>1304	PrimaryExpression	2
>1305	ArrayIndexing	player -> maxammo [ i ]
>1306	Identifier	i
>1307	PtrMemberAccess	player -> maxammo
>1308	Identifier	maxammo
>1309	Identifier	player
>1310	IncDecOp	 
>1311	IncDec	++
>1312	Identifier	i
>1313	Condition	 
>1314	RelationalExpression	i < NUMAMMO
>1315	Identifier	NUMAMMO
>1316	Identifier	i
>1317	ForInit	 
>1318	AssignmentExpr	i = 0
>1319	PrimaryExpression	0
>1320	Identifier	i
>1321	Condition	 
>1322	UnaryOp	! player -> backpack
>1323	PtrMemberAccess	player -> backpack
>1324	Identifier	backpack
>1325	Identifier	player
>1326	UnaryOperator	!
>1327	Label	 
>1328	Identifier	SPR_BPAK
>1329	BreakStatement	 
>1330	ExpressionStatement	 
>1331	AssignmentExpr	player -> message = GOTSHELLBOX
>1332	Identifier	GOTSHELLBOX
>1333	PtrMemberAccess	player -> message
>1334	Identifier	message
>1335	Identifier	player
>1336	IfStatement	if ( ! P_GiveAmmo ( player , am_shell , 5 ) )
>1337	ReturnStatement	 
>1338	Condition	 
>1339	UnaryOp	! P_GiveAmmo ( player , am_shell , 5 )
>1340	CallExpression	P_GiveAmmo ( player , am_shell , 5 )
>1341	ArgumentList	player
>1342	Argument	5
>1343	PrimaryExpression	5
>1344	Argument	am_shell
>1345	Identifier	am_shell
>1346	Argument	player
>1347	Identifier	player
>1348	Callee	P_GiveAmmo
>1349	Identifier	P_GiveAmmo
>1350	UnaryOperator	!
>1351	Label	 
>1352	Identifier	SPR_SBOX
>1353	BreakStatement	 
>1354	ExpressionStatement	 
>1355	AssignmentExpr	player -> message = GOTSHELLS
>1356	Identifier	GOTSHELLS
>1357	PtrMemberAccess	player -> message
>1358	Identifier	message
>1359	Identifier	player
>1360	IfStatement	if ( ! P_GiveAmmo ( player , am_shell , 1 ) )
>1361	ReturnStatement	 
>1362	Condition	 
>1363	UnaryOp	! P_GiveAmmo ( player , am_shell , 1 )
>1364	CallExpression	P_GiveAmmo ( player , am_shell , 1 )
>1365	ArgumentList	player
>1366	Argument	1
>1367	PrimaryExpression	1
>1368	Argument	am_shell
>1369	Identifier	am_shell
>1370	Argument	player
>1371	Identifier	player
>1372	Callee	P_GiveAmmo
>1373	Identifier	P_GiveAmmo
>1374	UnaryOperator	!
>1375	Label	 
>1376	Identifier	SPR_SHEL
>1377	BreakStatement	 
>1378	ExpressionStatement	 
>1379	AssignmentExpr	player -> message = GOTCELLBOX
>1380	Identifier	GOTCELLBOX
>1381	PtrMemberAccess	player -> message
>1382	Identifier	message
>1383	Identifier	player
>1384	IfStatement	if ( ! P_GiveAmmo ( player , am_cell , 5 ) )
>1385	ReturnStatement	 
>1386	Condition	 
>1387	UnaryOp	! P_GiveAmmo ( player , am_cell , 5 )
>1388	CallExpression	P_GiveAmmo ( player , am_cell , 5 )
>1389	ArgumentList	player
>1390	Argument	5
>1391	PrimaryExpression	5
>1392	Argument	am_cell
>1393	Identifier	am_cell
>1394	Argument	player
>1395	Identifier	player
>1396	Callee	P_GiveAmmo
>1397	Identifier	P_GiveAmmo
>1398	UnaryOperator	!
>1399	Label	 
>1400	Identifier	SPR_CELP
>1401	BreakStatement	 
>1402	ExpressionStatement	 
>1403	AssignmentExpr	player -> message = GOTCELL
>1404	Identifier	GOTCELL
>1405	PtrMemberAccess	player -> message
>1406	Identifier	message
>1407	Identifier	player
>1408	IfStatement	if ( ! P_GiveAmmo ( player , am_cell , 1 ) )
>1409	ReturnStatement	 
>1410	Condition	 
>1411	UnaryOp	! P_GiveAmmo ( player , am_cell , 1 )
>1412	CallExpression	P_GiveAmmo ( player , am_cell , 1 )
>1413	ArgumentList	player
>1414	Argument	1
>1415	PrimaryExpression	1
>1416	Argument	am_cell
>1417	Identifier	am_cell
>1418	Argument	player
>1419	Identifier	player
>1420	Callee	P_GiveAmmo
>1421	Identifier	P_GiveAmmo
>1422	UnaryOperator	!
>1423	Label	 
>1424	Identifier	SPR_CELL
>1425	BreakStatement	 
>1426	ExpressionStatement	 
>1427	AssignmentExpr	player -> message = GOTROCKBOX
>1428	Identifier	GOTROCKBOX
>1429	PtrMemberAccess	player -> message
>1430	Identifier	message
>1431	Identifier	player
>1432	IfStatement	if ( ! P_GiveAmmo ( player , am_misl , 5 ) )
>1433	ReturnStatement	 
>1434	Condition	 
>1435	UnaryOp	! P_GiveAmmo ( player , am_misl , 5 )
>1436	CallExpression	P_GiveAmmo ( player , am_misl , 5 )
>1437	ArgumentList	player
>1438	Argument	5
>1439	PrimaryExpression	5
>1440	Argument	am_misl
>1441	Identifier	am_misl
>1442	Argument	player
>1443	Identifier	player
>1444	Callee	P_GiveAmmo
>1445	Identifier	P_GiveAmmo
>1446	UnaryOperator	!
>1447	Label	 
>1448	Identifier	SPR_BROK
>1449	BreakStatement	 
>1450	ExpressionStatement	 
>1451	AssignmentExpr	player -> message = GOTROCKET
>1452	Identifier	GOTROCKET
>1453	PtrMemberAccess	player -> message
>1454	Identifier	message
>1455	Identifier	player
>1456	IfStatement	if ( ! P_GiveAmmo ( player , am_misl , 1 ) )
>1457	ReturnStatement	 
>1458	Condition	 
>1459	UnaryOp	! P_GiveAmmo ( player , am_misl , 1 )
>1460	CallExpression	P_GiveAmmo ( player , am_misl , 1 )
>1461	ArgumentList	player
>1462	Argument	1
>1463	PrimaryExpression	1
>1464	Argument	am_misl
>1465	Identifier	am_misl
>1466	Argument	player
>1467	Identifier	player
>1468	Callee	P_GiveAmmo
>1469	Identifier	P_GiveAmmo
>1470	UnaryOperator	!
>1471	Label	 
>1472	Identifier	SPR_ROCK
>1473	BreakStatement	 
>1474	ExpressionStatement	 
>1475	AssignmentExpr	player -> message = GOTCLIPBOX
>1476	Identifier	GOTCLIPBOX
>1477	PtrMemberAccess	player -> message
>1478	Identifier	message
>1479	Identifier	player
>1480	IfStatement	if ( ! P_GiveAmmo ( player , am_clip , 5 ) )
>1481	ReturnStatement	 
>1482	Condition	 
>1483	UnaryOp	! P_GiveAmmo ( player , am_clip , 5 )
>1484	CallExpression	P_GiveAmmo ( player , am_clip , 5 )
>1485	ArgumentList	player
>1486	Argument	5
>1487	PrimaryExpression	5
>1488	Argument	am_clip
>1489	Identifier	am_clip
>1490	Argument	player
>1491	Identifier	player
>1492	Callee	P_GiveAmmo
>1493	Identifier	P_GiveAmmo
>1494	UnaryOperator	!
>1495	Label	 
>1496	Identifier	SPR_AMMO
>1497	BreakStatement	 
>1498	ExpressionStatement	 
>1499	AssignmentExpr	player -> message = GOTCLIP
>1500	Identifier	GOTCLIP
>1501	PtrMemberAccess	player -> message
>1502	Identifier	message
>1503	Identifier	player
>1504	IfStatement	if ( special -> flags & MF_DROPPED )
>1505	ElseStatement	else
>1506	CompoundStatement	 
>1507	IfStatement	if ( ! P_GiveAmmo ( player , am_clip , 1 ) )
>1508	ReturnStatement	 
>1509	Condition	 
>1510	UnaryOp	! P_GiveAmmo ( player , am_clip , 1 )
>1511	CallExpression	P_GiveAmmo ( player , am_clip , 1 )
>1512	ArgumentList	player
>1513	Argument	1
>1514	PrimaryExpression	1
>1515	Argument	am_clip
>1516	Identifier	am_clip
>1517	Argument	player
>1518	Identifier	player
>1519	Callee	P_GiveAmmo
>1520	Identifier	P_GiveAmmo
>1521	UnaryOperator	!
>1522	CompoundStatement	 
>1523	IfStatement	if ( ! P_GiveAmmo ( player , am_clip , 0 ) )
>1524	ReturnStatement	 
>1525	Condition	 
>1526	UnaryOp	! P_GiveAmmo ( player , am_clip , 0 )
>1527	CallExpression	P_GiveAmmo ( player , am_clip , 0 )
>1528	ArgumentList	player
>1529	Argument	0
>1530	PrimaryExpression	0
>1531	Argument	am_clip
>1532	Identifier	am_clip
>1533	Argument	player
>1534	Identifier	player
>1535	Callee	P_GiveAmmo
>1536	Identifier	P_GiveAmmo
>1537	UnaryOperator	!
>1538	Condition	 
>1539	BitAndExpression	special -> flags & MF_DROPPED
>1540	Identifier	MF_DROPPED
>1541	PtrMemberAccess	special -> flags
>1542	Identifier	flags
>1543	Identifier	special
>1544	Label	 
>1545	Identifier	SPR_CLIP
>1546	BreakStatement	 
>1547	ExpressionStatement	 
>1548	AssignmentExpr	sound = sfx_getpow
>1549	Identifier	sfx_getpow
>1550	Identifier	sound
>1551	ExpressionStatement	 
>1552	AssignmentExpr	player -> message = GOTVISOR
>1553	Identifier	GOTVISOR
>1554	PtrMemberAccess	player -> message
>1555	Identifier	message
>1556	Identifier	player
>1557	IfStatement	if ( ! P_GivePower ( player , pw_infrared ) )
>1558	ReturnStatement	 
>1559	Condition	 
>1560	UnaryOp	! P_GivePower ( player , pw_infrared )
>1561	CallExpression	P_GivePower ( player , pw_infrared )
>1562	ArgumentList	player
>1563	Argument	pw_infrared
>1564	Identifier	pw_infrared
>1565	Argument	player
>1566	Identifier	player
>1567	Callee	P_GivePower
>1568	Identifier	P_GivePower
>1569	UnaryOperator	!
>1570	Label	 
>1571	Identifier	SPR_PVIS
>1572	BreakStatement	 
>1573	ExpressionStatement	 
>1574	AssignmentExpr	sound = sfx_getpow
>1575	Identifier	sfx_getpow
>1576	Identifier	sound
>1577	ExpressionStatement	 
>1578	AssignmentExpr	player -> message = GOTMAP
>1579	Identifier	GOTMAP
>1580	PtrMemberAccess	player -> message
>1581	Identifier	message
>1582	Identifier	player
>1583	IfStatement	if ( ! P_GivePower ( player , pw_allmap ) )
>1584	ReturnStatement	 
>1585	Condition	 
>1586	UnaryOp	! P_GivePower ( player , pw_allmap )
>1587	CallExpression	P_GivePower ( player , pw_allmap )
>1588	ArgumentList	player
>1589	Argument	pw_allmap
>1590	Identifier	pw_allmap
>1591	Argument	player
>1592	Identifier	player
>1593	Callee	P_GivePower
>1594	Identifier	P_GivePower
>1595	UnaryOperator	!
>1596	Label	 
>1597	Identifier	SPR_PMAP
>1598	BreakStatement	 
>1599	ExpressionStatement	 
>1600	AssignmentExpr	sound = sfx_getpow
>1601	Identifier	sfx_getpow
>1602	Identifier	sound
>1603	ExpressionStatement	 
>1604	AssignmentExpr	player -> message = GOTSUIT
>1605	Identifier	GOTSUIT
>1606	PtrMemberAccess	player -> message
>1607	Identifier	message
>1608	Identifier	player
>1609	IfStatement	if ( ! P_GivePower ( player , pw_ironfeet ) )
>1610	ReturnStatement	 
>1611	Condition	 
>1612	UnaryOp	! P_GivePower ( player , pw_ironfeet )
>1613	CallExpression	P_GivePower ( player , pw_ironfeet )
>1614	ArgumentList	player
>1615	Argument	pw_ironfeet
>1616	Identifier	pw_ironfeet
>1617	Argument	player
>1618	Identifier	player
>1619	Callee	P_GivePower
>1620	Identifier	P_GivePower
>1621	UnaryOperator	!
>1622	Label	 
>1623	Identifier	SPR_SUIT
>1624	BreakStatement	 
>1625	ExpressionStatement	 
>1626	AssignmentExpr	sound = sfx_getpow
>1627	Identifier	sfx_getpow
>1628	Identifier	sound
>1629	ExpressionStatement	 
>1630	AssignmentExpr	player -> message = GOTINVIS
>1631	Identifier	GOTINVIS
>1632	PtrMemberAccess	player -> message
>1633	Identifier	message
>1634	Identifier	player
>1635	IfStatement	if ( ! P_GivePower ( player , pw_invisibility ) )
>1636	ReturnStatement	 
>1637	Condition	 
>1638	UnaryOp	! P_GivePower ( player , pw_invisibility )
>1639	CallExpression	P_GivePower ( player , pw_invisibility )
>1640	ArgumentList	player
>1641	Argument	pw_invisibility
>1642	Identifier	pw_invisibility
>1643	Argument	player
>1644	Identifier	player
>1645	Callee	P_GivePower
>1646	Identifier	P_GivePower
>1647	UnaryOperator	!
>1648	Label	 
>1649	Identifier	SPR_PINS
>1650	BreakStatement	 
>1651	ExpressionStatement	 
>1652	AssignmentExpr	sound = sfx_getpow
>1653	Identifier	sfx_getpow
>1654	Identifier	sound
>1655	IfStatement	if ( player -> readyweapon != wp_fist )
>1656	ExpressionStatement	 
>1657	AssignmentExpr	player -> pendingweapon = wp_fist
>1658	Identifier	wp_fist
>1659	PtrMemberAccess	player -> pendingweapon
>1660	Identifier	pendingweapon
>1661	Identifier	player
>1662	Condition	 
>1663	EqualityExpression	player -> readyweapon != wp_fist
>1664	Identifier	wp_fist
>1665	PtrMemberAccess	player -> readyweapon
>1666	Identifier	readyweapon
>1667	Identifier	player
>1668	ExpressionStatement	 
>1669	AssignmentExpr	player -> message = GOTBERSERK
>1670	Identifier	GOTBERSERK
>1671	PtrMemberAccess	player -> message
>1672	Identifier	message
>1673	Identifier	player
>1674	IfStatement	if ( ! P_GivePower ( player , pw_strength ) )
>1675	ReturnStatement	 
>1676	Condition	 
>1677	UnaryOp	! P_GivePower ( player , pw_strength )
>1678	CallExpression	P_GivePower ( player , pw_strength )
>1679	ArgumentList	player
>1680	Argument	pw_strength
>1681	Identifier	pw_strength
>1682	Argument	player
>1683	Identifier	player
>1684	Callee	P_GivePower
>1685	Identifier	P_GivePower
>1686	UnaryOperator	!
>1687	Label	 
>1688	Identifier	SPR_PSTR
>1689	BreakStatement	 
>1690	ExpressionStatement	 
>1691	AssignmentExpr	sound = sfx_getpow
>1692	Identifier	sfx_getpow
>1693	Identifier	sound
>1694	ExpressionStatement	 
>1695	AssignmentExpr	player -> message = GOTINVUL
>1696	Identifier	GOTINVUL
>1697	PtrMemberAccess	player -> message
>1698	Identifier	message
>1699	Identifier	player
>1700	IfStatement	if ( ! P_GivePower ( player , pw_invulnerability ) )
>1701	ReturnStatement	 
>1702	Condition	 
>1703	UnaryOp	! P_GivePower ( player , pw_invulnerability )
>1704	CallExpression	P_GivePower ( player , pw_invulnerability )
>1705	ArgumentList	player
>1706	Argument	pw_invulnerability
>1707	Identifier	pw_invulnerability
>1708	Argument	player
>1709	Identifier	player
>1710	Callee	P_GivePower
>1711	Identifier	P_GivePower
>1712	UnaryOperator	!
>1713	Label	 
>1714	Identifier	SPR_PINV
>1715	BreakStatement	 
>1716	IfStatement	if ( player -> health < 25 )
>1717	ElseStatement	else
>1718	ExpressionStatement	 
>1719	AssignmentExpr	player -> message = GOTMEDIKIT
>1720	Identifier	GOTMEDIKIT
>1721	PtrMemberAccess	player -> message
>1722	Identifier	message
>1723	Identifier	player
>1724	ExpressionStatement	 
>1725	AssignmentExpr	player -> message = GOTMEDINEED
>1726	Identifier	GOTMEDINEED
>1727	PtrMemberAccess	player -> message
>1728	Identifier	message
>1729	Identifier	player
>1730	Condition	 
>1731	RelationalExpression	player -> health < 25
>1732	PrimaryExpression	25
>1733	PtrMemberAccess	player -> health
>1734	Identifier	health
>1735	Identifier	player
>1736	IfStatement	if ( ! P_GiveBody ( player , 25 ) )
>1737	ReturnStatement	 
>1738	Condition	 
>1739	UnaryOp	! P_GiveBody ( player , 25 )
>1740	CallExpression	P_GiveBody ( player , 25 )
>1741	ArgumentList	player
>1742	Argument	25
>1743	PrimaryExpression	25
>1744	Argument	player
>1745	Identifier	player
>1746	Callee	P_GiveBody
>1747	Identifier	P_GiveBody
>1748	UnaryOperator	!
>1749	Label	 
>1750	Identifier	SPR_MEDI
>1751	BreakStatement	 
>1752	ExpressionStatement	 
>1753	AssignmentExpr	player -> message = GOTSTIM
>1754	Identifier	GOTSTIM
>1755	PtrMemberAccess	player -> message
>1756	Identifier	message
>1757	Identifier	player
>1758	IfStatement	if ( ! P_GiveBody ( player , 10 ) )
>1759	ReturnStatement	 
>1760	Condition	 
>1761	UnaryOp	! P_GiveBody ( player , 10 )
>1762	CallExpression	P_GiveBody ( player , 10 )
>1763	ArgumentList	player
>1764	Argument	10
>1765	PrimaryExpression	10
>1766	Argument	player
>1767	Identifier	player
>1768	Callee	P_GiveBody
>1769	Identifier	P_GiveBody
>1770	UnaryOperator	!
>1771	Label	 
>1772	Identifier	SPR_STIM
>1773	ReturnStatement	 
>1774	BreakStatement	 
>1775	Statement	 
>1776	Statement	 
>1777	Statement	 
>1778	Statement	 
>1779	Statement	 
>1780	Statement	 
>1781	Statement	 
>1782	Statement	 
>1783	ExpressionStatement	 
>1784	CallExpression	P_GiveCard ( player , it_redskull , GOTREDSKULL )
>1785	ArgumentList	player
>1786	Argument	GOTREDSKULL
>1787	Identifier	GOTREDSKULL
>1788	Argument	it_redskull
>1789	Identifier	it_redskull
>1790	Argument	player
>1791	Identifier	player
>1792	Callee	P_GiveCard
>1793	Identifier	P_GiveCard
>1794	Label	 
>1795	Identifier	SPR_RSKU
>1796	ReturnStatement	 
>1797	BreakStatement	 
>1798	Statement	 
>1799	Statement	 
>1800	Statement	 
>1801	Statement	 
>1802	Statement	 
>1803	Statement	 
>1804	Statement	 
>1805	Statement	 
>1806	ExpressionStatement	 
>1807	CallExpression	P_GiveCard ( player , it_yellowskull , GOTYELWSKUL )
>1808	ArgumentList	player
>1809	Argument	GOTYELWSKUL
>1810	Identifier	GOTYELWSKUL
>1811	Argument	it_yellowskull
>1812	Identifier	it_yellowskull
>1813	Argument	player
>1814	Identifier	player
>1815	Callee	P_GiveCard
>1816	Identifier	P_GiveCard
>1817	Label	 
>1818	Identifier	SPR_YSKU
>1819	ReturnStatement	 
>1820	BreakStatement	 
>1821	Statement	 
>1822	Statement	 
>1823	Statement	 
>1824	Statement	 
>1825	Statement	 
>1826	Statement	 
>1827	Statement	 
>1828	Statement	 
>1829	ExpressionStatement	 
>1830	CallExpression	P_GiveCard ( player , it_blueskull , GOTBLUESKUL )
>1831	ArgumentList	player
>1832	Argument	GOTBLUESKUL
>1833	Identifier	GOTBLUESKUL
>1834	Argument	it_blueskull
>1835	Identifier	it_blueskull
>1836	Argument	player
>1837	Identifier	player
>1838	Callee	P_GiveCard
>1839	Identifier	P_GiveCard
>1840	Label	 
>1841	Identifier	SPR_BSKU
>1842	ReturnStatement	 
>1843	BreakStatement	 
>1844	Statement	 
>1845	Statement	 
>1846	Statement	 
>1847	Statement	 
>1848	Statement	 
>1849	Statement	 
>1850	Statement	 
>1851	Statement	 
>1852	ExpressionStatement	 
>1853	CallExpression	P_GiveCard ( player , it_redcard , GOTREDCARD )
>1854	ArgumentList	player
>1855	Argument	GOTREDCARD
>1856	Identifier	GOTREDCARD
>1857	Argument	it_redcard
>1858	Identifier	it_redcard
>1859	Argument	player
>1860	Identifier	player
>1861	Callee	P_GiveCard
>1862	Identifier	P_GiveCard
>1863	Label	 
>1864	Identifier	SPR_RKEY
>1865	ReturnStatement	 
>1866	BreakStatement	 
>1867	Statement	 
>1868	Statement	 
>1869	Statement	 
>1870	Statement	 
>1871	Statement	 
>1872	Statement	 
>1873	Statement	 
>1874	Statement	 
>1875	ExpressionStatement	 
>1876	CallExpression	P_GiveCard ( player , it_yellowcard , GOTYELWCARD )
>1877	ArgumentList	player
>1878	Argument	GOTYELWCARD
>1879	Identifier	GOTYELWCARD
>1880	Argument	it_yellowcard
>1881	Identifier	it_yellowcard
>1882	Argument	player
>1883	Identifier	player
>1884	Callee	P_GiveCard
>1885	Identifier	P_GiveCard
>1886	Label	 
>1887	Identifier	SPR_YKEY
>1888	ReturnStatement	 
>1889	BreakStatement	 
>1890	Statement	 
>1891	Statement	 
>1892	Statement	 
>1893	Statement	 
>1894	Statement	 
>1895	Statement	 
>1896	Statement	 
>1897	Statement	 
>1898	ExpressionStatement	 
>1899	CallExpression	P_GiveCard ( player , it_bluecard , GOTBLUECARD )
>1900	ArgumentList	player
>1901	Argument	GOTBLUECARD
>1902	Identifier	GOTBLUECARD
>1903	Argument	it_bluecard
>1904	Identifier	it_bluecard
>1905	Argument	player
>1906	Identifier	player
>1907	Callee	P_GiveCard
>1908	Identifier	P_GiveCard
>1909	Label	 
>1910	Identifier	SPR_BKEY
>1911	BreakStatement	 
>1912	ExpressionStatement	 
>1913	AssignmentExpr	sound = sfx_getpow
>1914	Identifier	sfx_getpow
>1915	Identifier	sound
>1916	ExpressionStatement	 
>1917	AssignmentExpr	player -> message = GOTMSPHERE
>1918	Identifier	GOTMSPHERE
>1919	PtrMemberAccess	player -> message
>1920	Identifier	message
>1921	Identifier	player
>1922	ExpressionStatement	 
>1923	CallExpression	P_GiveArmor ( player , 2 )
>1924	ArgumentList	player
>1925	Argument	2
>1926	PrimaryExpression	2
>1927	Argument	player
>1928	Identifier	player
>1929	Callee	P_GiveArmor
>1930	Identifier	P_GiveArmor
>1931	ExpressionStatement	 
>1932	AssignmentExpr	player -> mo -> health = player -> health
>1933	PtrMemberAccess	player -> health
>1934	Identifier	health
>1935	Identifier	player
>1936	PtrMemberAccess	player -> mo -> health
>1937	Identifier	health
>1938	PtrMemberAccess	player -> mo
>1939	Identifier	mo
>1940	Identifier	player
>1941	ExpressionStatement	 
>1942	AssignmentExpr	player -> health = 200
>1943	PrimaryExpression	200
>1944	PtrMemberAccess	player -> health
>1945	Identifier	health
>1946	Identifier	player
>1947	ReturnStatement	 
>1948	Statement	 
>1949	Statement	 
>1950	Statement	 
>1951	Statement	 
>1952	Statement	 
>1953	Statement	 
>1954	Statement	 
>1955	Statement	 
>1956	Statement	 
>1957	Label	 
>1958	Identifier	SPR_MEGA
>1959	BreakStatement	 
>1960	ExpressionStatement	 
>1961	AssignmentExpr	sound = sfx_getpow
>1962	Identifier	sfx_getpow
>1963	Identifier	sound
>1964	ExpressionStatement	 
>1965	AssignmentExpr	player -> message = GOTSUPER
>1966	Identifier	GOTSUPER
>1967	PtrMemberAccess	player -> message
>1968	Identifier	message
>1969	Identifier	player
>1970	ExpressionStatement	 
>1971	AssignmentExpr	player -> mo -> health = player -> health
>1972	PtrMemberAccess	player -> health
>1973	Identifier	health
>1974	Identifier	player
>1975	PtrMemberAccess	player -> mo -> health
>1976	Identifier	health
>1977	PtrMemberAccess	player -> mo
>1978	Identifier	mo
>1979	Identifier	player
>1980	IfStatement	if ( player -> health > 200 )
>1981	ExpressionStatement	 
>1982	AssignmentExpr	player -> health = 200
>1983	PrimaryExpression	200
>1984	PtrMemberAccess	player -> health
>1985	Identifier	health
>1986	Identifier	player
>1987	Condition	 
>1988	RelationalExpression	player -> health > 200
>1989	PrimaryExpression	200
>1990	PtrMemberAccess	player -> health
>1991	Identifier	health
>1992	Identifier	player
>1993	ExpressionStatement	 
>1994	AssignmentExpr	player -> health += 100
>1995	PrimaryExpression	100
>1996	PtrMemberAccess	player -> health
>1997	Identifier	health
>1998	Identifier	player
>1999	Label	 
>2000	Identifier	SPR_SOUL
>2001	BreakStatement	 
>2002	ExpressionStatement	 
>2003	AssignmentExpr	player -> message = GOTARMBONUS
>2004	Identifier	GOTARMBONUS
>2005	PtrMemberAccess	player -> message
>2006	Identifier	message
>2007	Identifier	player
>2008	IfStatement	if ( ! player -> armortype )
>2009	ExpressionStatement	 
>2010	AssignmentExpr	player -> armortype = 1
>2011	PrimaryExpression	1
>2012	PtrMemberAccess	player -> armortype
>2013	Identifier	armortype
>2014	Identifier	player
>2015	Condition	 
>2016	UnaryOp	! player -> armortype
>2017	PtrMemberAccess	player -> armortype
>2018	Identifier	armortype
>2019	Identifier	player
>2020	UnaryOperator	!
>2021	IfStatement	if ( player -> armorpoints > 200 )
>2022	ExpressionStatement	 
>2023	AssignmentExpr	player -> armorpoints = 200
>2024	PrimaryExpression	200
>2025	PtrMemberAccess	player -> armorpoints
>2026	Identifier	armorpoints
>2027	Identifier	player
>2028	Condition	 
>2029	RelationalExpression	player -> armorpoints > 200
>2030	PrimaryExpression	200
>2031	PtrMemberAccess	player -> armorpoints
>2032	Identifier	armorpoints
>2033	Identifier	player
>2034	ExpressionStatement	 
>2035	IncDecOp	player -> armorpoints ++
>2036	IncDec	++
>2037	PtrMemberAccess	player -> armorpoints
>2038	Identifier	armorpoints
>2039	Identifier	player
>2040	Label	 
>2041	Identifier	SPR_BON2
>2042	BreakStatement	 
>2043	ExpressionStatement	 
>2044	AssignmentExpr	player -> message = GOTHTHBONUS
>2045	Identifier	GOTHTHBONUS
>2046	PtrMemberAccess	player -> message
>2047	Identifier	message
>2048	Identifier	player
>2049	ExpressionStatement	 
>2050	AssignmentExpr	player -> mo -> health = player -> health
>2051	PtrMemberAccess	player -> health
>2052	Identifier	health
>2053	Identifier	player
>2054	PtrMemberAccess	player -> mo -> health
>2055	Identifier	health
>2056	PtrMemberAccess	player -> mo
>2057	Identifier	mo
>2058	Identifier	player
>2059	IfStatement	if ( player -> health > 200 )
>2060	ExpressionStatement	 
>2061	AssignmentExpr	player -> health = 200
>2062	PrimaryExpression	200
>2063	PtrMemberAccess	player -> health
>2064	Identifier	health
>2065	Identifier	player
>2066	Condition	 
>2067	RelationalExpression	player -> health > 200
>2068	PrimaryExpression	200
>2069	PtrMemberAccess	player -> health
>2070	Identifier	health
>2071	Identifier	player
>2072	ExpressionStatement	 
>2073	IncDecOp	player -> health ++
>2074	IncDec	++
>2075	PtrMemberAccess	player -> health
>2076	Identifier	health
>2077	Identifier	player
>2078	Label	 
>2079	Identifier	SPR_BON1
>2080	BreakStatement	 
>2081	ExpressionStatement	 
>2082	AssignmentExpr	player -> message = GOTMEGA
>2083	Identifier	GOTMEGA
>2084	PtrMemberAccess	player -> message
>2085	Identifier	message
>2086	Identifier	player
>2087	IfStatement	if ( ! P_GiveArmor ( player , 2 ) )
>2088	ReturnStatement	 
>2089	Condition	 
>2090	UnaryOp	! P_GiveArmor ( player , 2 )
>2091	CallExpression	P_GiveArmor ( player , 2 )
>2092	ArgumentList	player
>2093	Argument	2
>2094	PrimaryExpression	2
>2095	Argument	player
>2096	Identifier	player
>2097	Callee	P_GiveArmor
>2098	Identifier	P_GiveArmor
>2099	UnaryOperator	!
>2100	Label	 
>2101	Identifier	SPR_ARM2
>2102	BreakStatement	 
>2103	ExpressionStatement	 
>2104	AssignmentExpr	player -> message = GOTARMOR
>2105	Identifier	GOTARMOR
>2106	PtrMemberAccess	player -> message
>2107	Identifier	message
>2108	Identifier	player
>2109	IfStatement	if ( ! P_GiveArmor ( player , 1 ) )
>2110	ReturnStatement	 
>2111	Condition	 
>2112	UnaryOp	! P_GiveArmor ( player , 1 )
>2113	CallExpression	P_GiveArmor ( player , 1 )
>2114	ArgumentList	player
>2115	Argument	1
>2116	PrimaryExpression	1
>2117	Argument	player
>2118	Identifier	player
>2119	Callee	P_GiveArmor
>2120	Identifier	P_GiveArmor
>2121	UnaryOperator	!
>2122	Label	 
>2123	Identifier	SPR_ARM1
>2124	Condition	 
>2125	PtrMemberAccess	special -> sprite
>2126	Identifier	sprite
>2127	Identifier	special
>2128	IfStatement	if ( toucher -> health <= 0 )
>2129	ReturnStatement	 
>2130	Condition	 
>2131	RelationalExpression	toucher -> health <= 0
>2132	PrimaryExpression	0
>2133	PtrMemberAccess	toucher -> health
>2134	Identifier	health
>2135	Identifier	toucher
>2136	ExpressionStatement	 
>2137	AssignmentExpr	player = toucher -> player
>2138	PtrMemberAccess	toucher -> player
>2139	Identifier	player
>2140	Identifier	toucher
>2141	Identifier	player
>2142	ExpressionStatement	 
>2143	AssignmentExpr	sound = sfx_itemup
>2144	Identifier	sfx_itemup
>2145	Identifier	sound
>2146	IfStatement	if ( delta > toucher -> height || delta < - 8 * FRACUNIT )
>2147	CompoundStatement	 
>2148	ReturnStatement	 
>2149	Condition	 
>2150	OrExpression	delta > toucher -> height || delta < - 8 * FRACUNIT
>2151	RelationalExpression	delta < - 8 * FRACUNIT
>2152	MultiplicativeExpression	- 8 * FRACUNIT
>2153	Identifier	FRACUNIT
>2154	UnaryOp	- 8
>2155	PrimaryExpression	8
>2156	UnaryOperator	-
>2157	Identifier	delta
>2158	RelationalExpression	delta > toucher -> height
>2159	PtrMemberAccess	toucher -> height
>2160	Identifier	height
>2161	Identifier	toucher
>2162	Identifier	delta
>2163	ExpressionStatement	 
>2164	AssignmentExpr	delta = special -> z - toucher -> z
>2165	AdditiveExpression	special -> z - toucher -> z
>2166	PtrMemberAccess	toucher -> z
>2167	Identifier	z
>2168	Identifier	toucher
>2169	PtrMemberAccess	special -> z
>2170	Identifier	z
>2171	Identifier	special
>2172	Identifier	delta
>2173	IdentifierDeclStatement	 
>2174	IdentifierDecl	sound
>2175	Identifier	sound
>2176	IdentifierDeclType	int
>2177	IdentifierDeclStatement	 
>2178	IdentifierDecl	delta
>2179	Identifier	delta
>2180	IdentifierDeclType	fixed_t
>2181	IdentifierDeclStatement	 
>2182	IdentifierDecl	i
>2183	Identifier	i
>2184	IdentifierDeclType	int
>2185	IdentifierDeclStatement	 
>2186	IdentifierDecl	* player
>2187	Identifier	player
>2188	IdentifierDeclType	player_t *
>2305	FunctionDef	IsOnlineDeathmatchWithLocalProfile ()
>2306	ParameterList	 
>2307	ReturnType	idPlayerProfile *
>2308	CompoundStatement	 
>2309	ReturnStatement	 
>2310	Identifier	profile
>2311	IfStatement	if ( profile == NULL )
>2312	CompoundStatement	 
>2313	ReturnStatement	 
>2314	Identifier	NULL
>2315	Condition	 
>2316	EqualityExpression	profile == NULL
>2317	Identifier	NULL
>2318	Identifier	profile
>2319	IdentifierDeclStatement	 
>2320	IdentifierDecl	* profile = user -> GetProfile ( )
>2321	AssignmentExpr	* profile = user -> GetProfile ( )
>2322	CallExpression	user -> GetProfile ( )
>2323	ArgumentList	 
>2324	Callee	user -> GetProfile
>2325	PtrMemberAccess	user -> GetProfile
>2326	Identifier	GetProfile
>2327	Identifier	user
>2328	Identifier	profile
>2329	Identifier	profile
>2330	IdentifierDeclType	idPlayerProfile *
>2331	IfStatement	if ( user == NULL )
>2332	CompoundStatement	 
>2333	ReturnStatement	 
>2334	Identifier	NULL
>2335	Condition	 
>2336	EqualityExpression	user == NULL
>2337	Identifier	NULL
>2338	Identifier	user
>2339	IdentifierDeclStatement	 
>2340	IdentifierDecl	* user = session -> GetSignInManager ( ) . GetMasterLocalUser ( )
>2341	AssignmentExpr	* user = session -> GetSignInManager ( ) . GetMasterLocalUser ( )
>2342	CallExpression	session -> GetSignInManager ( ) . GetMasterLocalUser ( )
>2343	ArgumentList	 
>2344	Callee	session -> GetSignInManager ( ) . GetMasterLocalUser
>2345	MemberAccess	session -> GetSignInManager ( ) . GetMasterLocalUser
>2346	Identifier	GetMasterLocalUser
>2347	CallExpression	session -> GetSignInManager ( )
>2348	ArgumentList	 
>2349	Callee	session -> GetSignInManager
>2350	PtrMemberAccess	session -> GetSignInManager
>2351	Identifier	GetSignInManager
>2352	Identifier	session
>2353	Identifier	user
>2354	Identifier	user
>2355	IdentifierDeclType	idLocalUser *
>2356	CompoundStatement	 
>2357	ReturnStatement	 
>2358	Identifier	NULL
>2359	Statement	 
>2360	Statement	 
>2361	Statement	 
>2362	Statement	 
>2363	Statement	 
>2364	Statement	 
>2365	Statement	 
>2366	Statement	 
>2367	CompoundStatement	 
>2368	ReturnStatement	 
>2369	Identifier	NULL
>2370	Statement	 
>2371	Statement	 
>2372	Statement	 
>2373	Statement	 
>2374	Statement	 
>2375	Statement	 
>2376	IfStatement	if ( ! MatchTypeIsOnline ( session -> GetGameLobbyBase ( ) . GetMatchParms ( ) . matchFlags ) )
>2377	CompoundStatement	 
>2378	ReturnStatement	 
>2379	Identifier	NULL
>2380	Condition	 
>2381	UnaryOp	! MatchTypeIsOnline ( session -> GetGameLobbyBase ( ) . GetMatchParms ( ) . matchFlags )
>2382	CallExpression	MatchTypeIsOnline ( session -> GetGameLobbyBase ( ) . GetMatchParms ( ) . matchFlags )
>2383	ArgumentList	session -> GetGameLobbyBase ( ) . GetMatchParms ( ) . matchFlags
>2384	Argument	session -> GetGameLobbyBase ( ) . GetMatchParms ( ) . matchFlags
>2385	MemberAccess	session -> GetGameLobbyBase ( ) . GetMatchParms ( ) . matchFlags
>2386	Identifier	matchFlags
>2387	CallExpression	session -> GetGameLobbyBase ( ) . GetMatchParms ( )
>2388	ArgumentList	 
>2389	Callee	session -> GetGameLobbyBase ( ) . GetMatchParms
>2390	MemberAccess	session -> GetGameLobbyBase ( ) . GetMatchParms
>2391	Identifier	GetMatchParms
>2392	CallExpression	session -> GetGameLobbyBase ( )
>2393	ArgumentList	 
>2394	Callee	session -> GetGameLobbyBase
>2395	PtrMemberAccess	session -> GetGameLobbyBase
>2396	Identifier	GetGameLobbyBase
>2397	Identifier	session
>2398	Callee	MatchTypeIsOnline
>2399	Identifier	MatchTypeIsOnline
>2400	UnaryOperator	!
>2417	FunctionDef	P_KillMobj (mobj_t * source , mobj_t * target)
>2418	ParameterList	mobj_t * source , mobj_t * target
>2419	Parameter	 
>2420	Identifier	target
>2421	ParameterType	mobj_t *
>2422	Parameter	 
>2423	Identifier	source
>2424	ParameterType	mobj_t *
>2425	ReturnType	void
>2426	CompoundStatement	 
>2427	ExpressionStatement	 
>2428	AssignmentExpr	mo -> flags |= MF_DROPPED
>2429	Identifier	MF_DROPPED
>2430	PtrMemberAccess	mo -> flags
>2431	Identifier	flags
>2432	Identifier	mo
>2433	ExpressionStatement	 
>2434	AssignmentExpr	mo = P_SpawnMobj ( target -> x , target -> y , ONFLOORZ , item )
>2435	CallExpression	P_SpawnMobj ( target -> x , target -> y , ONFLOORZ , item )
>2436	ArgumentList	target -> x
>2437	Argument	item
>2438	Identifier	item
>2439	Argument	ONFLOORZ
>2440	Identifier	ONFLOORZ
>2441	Argument	target -> y
>2442	PtrMemberAccess	target -> y
>2443	Identifier	y
>2444	Identifier	target
>2445	Argument	target -> x
>2446	PtrMemberAccess	target -> x
>2447	Identifier	x
>2448	Identifier	target
>2449	Callee	P_SpawnMobj
>2450	Identifier	P_SpawnMobj
>2451	Identifier	mo
>2452	SwitchStatement	switch ( target -> type )
>2453	CompoundStatement	 
>2454	ReturnStatement	 
>2455	Label	 
>2456	Identifier	default
>2457	BreakStatement	 
>2458	ExpressionStatement	 
>2459	AssignmentExpr	item = MT_CHAINGUN
>2460	Identifier	MT_CHAINGUN
>2461	Identifier	item
>2462	Label	 
>2463	Identifier	MT_CHAINGUY
>2464	BreakStatement	 
>2465	ExpressionStatement	 
>2466	AssignmentExpr	item = MT_SHOTGUN
>2467	Identifier	MT_SHOTGUN
>2468	Identifier	item
>2469	Label	 
>2470	Identifier	MT_SHOTGUY
>2471	BreakStatement	 
>2472	ExpressionStatement	 
>2473	AssignmentExpr	item = MT_CLIP
>2474	Identifier	MT_CLIP
>2475	Identifier	item
>2476	Label	 
>2477	Identifier	MT_POSSESSED
>2478	Label	 
>2479	Identifier	MT_WOLFSS
>2480	Condition	 
>2481	PtrMemberAccess	target -> type
>2482	Identifier	type
>2483	Identifier	target
>2484	IfStatement	if ( target -> tics < 1 )
>2485	ExpressionStatement	 
>2486	AssignmentExpr	target -> tics = 1
>2487	PrimaryExpression	1
>2488	PtrMemberAccess	target -> tics
>2489	Identifier	tics
>2490	Identifier	target
>2491	Condition	 
>2492	RelationalExpression	target -> tics < 1
>2493	PrimaryExpression	1
>2494	PtrMemberAccess	target -> tics
>2495	Identifier	tics
>2496	Identifier	target
>2497	ExpressionStatement	 
>2498	AssignmentExpr	target -> tics -= P_Random ( ) & 3
>2499	BitAndExpression	P_Random ( ) & 3
>2500	PrimaryExpression	3
>2501	CallExpression	P_Random ( )
>2502	ArgumentList	 
>2503	Callee	P_Random
>2504	Identifier	P_Random
>2505	PtrMemberAccess	target -> tics
>2506	Identifier	tics
>2507	Identifier	target
>2508	IfStatement	if ( target -> health < - target -> info -> spawnhealth && target -> info -> xdeathstate )
>2509	ElseStatement	else
>2510	ExpressionStatement	 
>2511	CallExpression	P_SetMobjState ( target , ( statenum_t ) target -> info -> deathstate )
>2512	ArgumentList	target
>2513	Argument	( statenum_t ) target -> info -> deathstate
>2514	CastExpression	( statenum_t ) target -> info -> deathstate
>2515	PtrMemberAccess	target -> info -> deathstate
>2516	Identifier	deathstate
>2517	PtrMemberAccess	target -> info
>2518	Identifier	info
>2519	Identifier	target
>2520	CastTarget	statenum_t
>2521	Argument	target
>2522	Identifier	target
>2523	Callee	P_SetMobjState
>2524	Identifier	P_SetMobjState
>2525	CompoundStatement	 
>2526	ExpressionStatement	 
>2527	CallExpression	P_SetMobjState ( target , ( statenum_t ) target -> info -> xdeathstate )
>2528	ArgumentList	target
>2529	Argument	( statenum_t ) target -> info -> xdeathstate
>2530	CastExpression	( statenum_t ) target -> info -> xdeathstate
>2531	PtrMemberAccess	target -> info -> xdeathstate
>2532	Identifier	xdeathstate
>2533	PtrMemberAccess	target -> info
>2534	Identifier	info
>2535	Identifier	target
>2536	CastTarget	statenum_t
>2537	Argument	target
>2538	Identifier	target
>2539	Callee	P_SetMobjState
>2540	Identifier	P_SetMobjState
>2541	Condition	 
>2542	AndExpression	target -> health < - target -> info -> spawnhealth && target -> info -> xdeathstate
>2543	PtrMemberAccess	target -> info -> xdeathstate
>2544	Identifier	xdeathstate
>2545	PtrMemberAccess	target -> info
>2546	Identifier	info
>2547	Identifier	target
>2548	RelationalExpression	target -> health < - target -> info -> spawnhealth
>2549	UnaryOp	- target -> info -> spawnhealth
>2550	PtrMemberAccess	target -> info -> spawnhealth
>2551	Identifier	spawnhealth
>2552	PtrMemberAccess	target -> info
>2553	Identifier	info
>2554	Identifier	target
>2555	UnaryOperator	-
>2556	PtrMemberAccess	target -> health
>2557	Identifier	health
>2558	Identifier	target
>2559	IfStatement	if ( target -> player )
>2560	CompoundStatement	 
>2561	CompoundStatement	 
>2562	ExpressionStatement	 
>2563	CallExpression	AM_Stop ( )
>2564	ArgumentList	 
>2565	Callee	AM_Stop
>2566	Identifier	AM_Stop
>2567	Statement	 
>2568	Statement	 
>2569	Statement	 
>2570	Statement	 
>2571	Statement	 
>2572	Statement	 
>2573	Statement	 
>2574	Statement	 
>2575	Statement	 
>2576	Statement	 
>2577	Statement	 
>2578	Statement	 
>2579	Statement	 
>2580	Statement	 
>2581	Statement	 
>2582	Statement	 
>2583	Statement	 
>2584	Statement	 
>2585	Statement	 
>2586	Statement	 
>2587	Statement	 
>2588	Statement	 
>2589	Statement	 
>2590	ExpressionStatement	 
>2591	CallExpression	P_DropWeapon ( target -> player )
>2592	ArgumentList	target -> player
>2593	Argument	target -> player
>2594	PtrMemberAccess	target -> player
>2595	Identifier	player
>2596	Identifier	target
>2597	Callee	P_DropWeapon
>2598	Identifier	P_DropWeapon
>2599	ExpressionStatement	 
>2600	AssignmentExpr	target -> player -> playerstate = PST_DEAD
>2601	Identifier	PST_DEAD
>2602	PtrMemberAccess	target -> player -> playerstate
>2603	Identifier	playerstate
>2604	PtrMemberAccess	target -> player
>2605	Identifier	player
>2606	Identifier	target
>2607	ExpressionStatement	 
>2608	AssignmentExpr	target -> flags &= ~MF_SOLID
>2609	Identifier	~MF_SOLID
>2610	PtrMemberAccess	target -> flags
>2611	Identifier	flags
>2612	Identifier	target
>2613	ExpressionStatement	 
>2614	Statement	 
>2615	Statement	 
>2616	Statement	 
>2617	Statement	 
>2618	Statement	 
>2619	Statement	 
>2620	Statement	 
>2621	Statement	 
>2622	Statement	 
>2623	Statement	 
>2624	Statement	 
>2625	Statement	 
>2626	Statement	 
>2627	Statement	 
>2628	Statement	 
>2629	IfStatement	if ( ! source )
>2630	Statement	 
>2631	Condition	 
>2632	UnaryOp	! source
>2633	Identifier	source
>2634	UnaryOperator	!
>2635	Condition	 
>2636	PtrMemberAccess	target -> player
>2637	Identifier	player
>2638	Identifier	target
>2639	CompoundStatement	 
>2640	ExpressionStatement	 
>2641	IncDecOp	g -> players [ 0 ] . killcount ++
>2642	IncDec	++
>2643	MemberAccess	g -> players [ 0 ] . killcount
>2644	Identifier	killcount
>2645	ArrayIndexing	g -> players [ 0 ]
>2646	PrimaryExpression	0
>2647	PtrMemberAccess	g -> players
>2648	Identifier	players
>2649	Identifier	g
>2650	Statement	 
>2651	Statement	 
>2652	Statement	 
>2653	Statement	 
>2654	Statement	 
>2655	Statement	 
>2656	Statement	 
>2657	Statement	 
>2658	Statement	 
>2659	Statement	 
>2660	Statement	 
>2661	Statement	 
>2662	Statement	 
>2663	Statement	 
>2664	Statement	 
>2665	Statement	 
>2666	IfStatement	if ( source && source -> player )
>2667	ElseStatement	else
>2668	Statement	 
>2669	CompoundStatement	 
>2670	IfStatement	if ( source -> player -> readyweapon == wp_fist && source -> player -> powers [ pw_strength ] && ! common -> IsMultiplayer ( ) )
>2671	CompoundStatement	 
>2672	IfStatement	if ( source -> player -> berserkKills == 20 )
>2673	CompoundStatement	 
>2674	SwitchStatement	switch ( DoomLib 
>2675	CompoundStatement	 
>2676	CompoundStatement	 
>2677	BreakStatement	 
>2678	Label	 
>2679	Identifier	default
>2680	CompoundStatement	 
>2681	BreakStatement	 
>2682	Label	 
>2683	Identifier	GAME_SKU_DCC
>2684	CompoundStatement	 
>2685	BreakStatement	 
>2686	Label	 
>2687	Identifier	GAME_SKU_DOOM2_BFG
>2688	Condition	 
>2689	CallExpression	DoomLib 
>2690	ArgumentList	 
>2691	Callee	DoomLib 
>2692	Identifier	DoomLib 
>2693	Condition	 
>2694	EqualityExpression	source -> player -> berserkKills == 20
>2695	PrimaryExpression	20
>2696	PtrMemberAccess	source -> player -> berserkKills
>2697	Identifier	berserkKills
>2698	PtrMemberAccess	source -> player
>2699	Identifier	player
>2700	Identifier	source
>2701	ExpressionStatement	 
>2702	CallExpression	idLib 
>2703	ArgumentList	\"Player has %d berserk kills\n\"
>2704	Argument	source -> player -> berserkKills
>2705	PtrMemberAccess	source -> player -> berserkKills
>2706	Identifier	berserkKills
>2707	PtrMemberAccess	source -> player
>2708	Identifier	player
>2709	Identifier	source
>2710	Argument	\"Player has %d berserk kills\n\"
>2711	PrimaryExpression	\"Player has %d berserk kills\n\"
>2712	Callee	idLib 
>2713	Identifier	idLib 
>2714	ExpressionStatement	 
>2715	IncDecOp	source -> player -> berserkKills ++
>2716	IncDec	++
>2717	PtrMemberAccess	source -> player -> berserkKills
>2718	Identifier	berserkKills
>2719	PtrMemberAccess	source -> player
>2720	Identifier	player
>2721	Identifier	source
>2722	Condition	 
>2723	AndExpression	source -> player -> readyweapon == wp_fist && source -> player -> powers [ pw_strength ] && ! common \
>2724	AndExpression	source -> player -> powers [ pw_strength ] && ! common -> IsMultiplayer ( )
>2725	UnaryOp	! common -> IsMultiplayer ( )
>2726	CallExpression	common -> IsMultiplayer ( )
>2727	ArgumentList	 
>2728	Callee	common -> IsMultiplayer
>2729	PtrMemberAccess	common -> IsMultiplayer
>2730	Identifier	IsMultiplayer
>2731	Identifier	common
>2732	UnaryOperator	!
>2733	ArrayIndexing	source -> player -> powers [ pw_strength ]
>2734	Identifier	pw_strength
>2735	PtrMemberAccess	source -> player -> powers
>2736	Identifier	powers
>2737	PtrMemberAccess	source -> player
>2738	Identifier	player
>2739	Identifier	source
>2740	EqualityExpression	source -> player -> readyweapon == wp_fist
>2741	Identifier	wp_fist
>2742	PtrMemberAccess	source -> player -> readyweapon
>2743	Identifier	readyweapon
>2744	PtrMemberAccess	source -> player
>2745	Identifier	player
>2746	Identifier	source
>2747	IfStatement	if ( source -> player -> readyweapon == wp_chainsaw && ! common -> IsMultiplayer ( ) )
>2748	CompoundStatement	 
>2749	IfStatement	if ( source -> player -> chainsawKills == 20 )
>2750	CompoundStatement	 
>2751	SwitchStatement	switch ( DoomLib 
>2752	CompoundStatement	 
>2753	CompoundStatement	 
>2754	BreakStatement	 
>2755	Label	 
>2756	Identifier	default
>2757	CompoundStatement	 
>2758	BreakStatement	 
>2759	Label	 
>2760	Identifier	GAME_SKU_DCC
>2761	CompoundStatement	 
>2762	BreakStatement	 
>2763	Label	 
>2764	Identifier	GAME_SKU_DOOM2_BFG
>2765	Condition	 
>2766	CallExpression	DoomLib 
>2767	ArgumentList	 
>2768	Callee	DoomLib 
>2769	Identifier	DoomLib 
>2770	Condition	 
>2771	EqualityExpression	source -> player -> chainsawKills == 20
>2772	PrimaryExpression	20
>2773	PtrMemberAccess	source -> player -> chainsawKills
>2774	Identifier	chainsawKills
>2775	PtrMemberAccess	source -> player
>2776	Identifier	player
>2777	Identifier	source
>2778	ExpressionStatement	 
>2779	IncDecOp	source -> player -> chainsawKills ++
>2780	IncDec	++
>2781	PtrMemberAccess	source -> player -> chainsawKills
>2782	Identifier	chainsawKills
>2783	PtrMemberAccess	source -> player
>2784	Identifier	player
>2785	Identifier	source
>2786	Condition	 
>2787	AndExpression	source -> player -> readyweapon == wp_chainsaw && ! common -> IsMultiplayer ( )
>2788	UnaryOp	! common -> IsMultiplayer ( )
>2789	CallExpression	common -> IsMultiplayer ( )
>2790	ArgumentList	 
>2791	Callee	common -> IsMultiplayer
>2792	PtrMemberAccess	common -> IsMultiplayer
>2793	Identifier	IsMultiplayer
>2794	Identifier	common
>2795	UnaryOperator	!
>2796	EqualityExpression	source -> player -> readyweapon == wp_chainsaw
>2797	Identifier	wp_chainsaw
>2798	PtrMemberAccess	source -> player -> readyweapon
>2799	Identifier	readyweapon
>2800	PtrMemberAccess	source -> player
>2801	Identifier	player
>2802	Identifier	source
>2803	IfStatement	if ( source -> player -> readyweapon == wp_fist && target -> type == MT_CYBORG && ! common -> IsMultiplayer ( ) )
>2804	CompoundStatement	 
>2805	SwitchStatement	switch ( DoomLib 
>2806	CompoundStatement	 
>2807	CompoundStatement	 
>2808	BreakStatement	 
>2809	Label	 
>2810	Identifier	default
>2811	CompoundStatement	 
>2812	BreakStatement	 
>2813	Label	 
>2814	Identifier	GAME_SKU_DCC
>2815	CompoundStatement	 
>2816	BreakStatement	 
>2817	Label	 
>2818	Identifier	GAME_SKU_DOOM2_BFG
>2819	Condition	 
>2820	CallExpression	DoomLib 
>2821	ArgumentList	 
>2822	Callee	DoomLib 
>2823	Identifier	DoomLib 
>2824	Condition	 
>2825	AndExpression	source -> player -> readyweapon == wp_fist && target -> type == MT_CYBORG && ! common -> IsMultiplayer ( )
>2826	AndExpression	target -> type == MT_CYBORG && ! common -> IsMultiplayer ( )
>2827	UnaryOp	! common -> IsMultiplayer ( )
>2828	CallExpression	common -> IsMultiplayer ( )
>2829	ArgumentList	 
>2830	Callee	common -> IsMultiplayer
>2831	PtrMemberAccess	common -> IsMultiplayer
>2832	Identifier	IsMultiplayer
>2833	Identifier	common
>2834	UnaryOperator	!
>2835	EqualityExpression	target -> type == MT_CYBORG
>2836	Identifier	MT_CYBORG
>2837	PtrMemberAccess	target -> type
>2838	Identifier	type
>2839	Identifier	target
>2840	EqualityExpression	source -> player -> readyweapon == wp_fist
>2841	Identifier	wp_fist
>2842	PtrMemberAccess	source -> player -> readyweapon
>2843	Identifier	readyweapon
>2844	PtrMemberAccess	source -> player
>2845	Identifier	player
>2846	Identifier	source
>2847	IfStatement	if ( target -> player )
>2848	CompoundStatement	 
>2849	CompoundStatement	 
>2850	Statement	 
>2851	Statement	 
>2852	Statement	 
>2853	Statement	 
>2854	Statement	 
>2855	Statement	 
>2856	Statement	 
>2857	Statement	 
>2858	Statement	 
>2859	Statement	 
>2860	Statement	 
>2861	Statement	 
>2862	Statement	 
>2863	Statement	 
>2864	Statement	 
>2865	Statement	 
>2866	Statement	 
>2867	Statement	 
>2868	Statement	 
>2869	Statement	 
>2870	ExpressionStatement	 
>2871	Statement	 
>2872	Statement	 
>2873	Statement	 
>2874	Statement	 
>2875	Statement	 
>2876	Statement	 
>2877	Statement	 
>2878	Statement	 
>2879	Statement	 
>2880	Statement	 
>2881	Statement	 
>2882	Statement	 
>2883	Statement	 
>2884	Statement	 
>2885	Statement	 
>2886	Statement	 
>2887	Condition	 
>2888	PtrMemberAccess	target -> player
>2889	Identifier	player
>2890	Identifier	target
>2891	IfStatement	if ( target -> flags & MF_COUNTKILL )
>2892	ExpressionStatement	 
>2893	IncDecOp	source -> player -> killcount ++
>2894	IncDec	++
>2895	PtrMemberAccess	source -> player -> killcount
>2896	Identifier	killcount
>2897	PtrMemberAccess	source -> player
>2898	Identifier	player
>2899	Identifier	source
>2900	Condition	 
>2901	BitAndExpression	target -> flags & MF_COUNTKILL
>2902	Identifier	MF_COUNTKILL
>2903	PtrMemberAccess	target -> flags
>2904	Identifier	flags
>2905	Identifier	target
>2906	Condition	 
>2907	AndExpression	source && source -> player
>2908	PtrMemberAccess	source -> player
>2909	Identifier	player
>2910	Identifier	source
>2911	Identifier	source
>2912	ExpressionStatement	 
>2913	AssignmentExpr	target -> height >>= 2
>2914	PrimaryExpression	2
>2915	PtrMemberAccess	target -> height
>2916	Identifier	height
>2917	Identifier	target
>2918	ExpressionStatement	 
>2919	AssignmentExpr	target -> flags |= MF_CORPSE | MF_DROPOFF
>2920	InclusiveOrExpression	MF_CORPSE | MF_DROPOFF
>2921	Identifier	MF_DROPOFF
>2922	Identifier	MF_CORPSE
>2923	PtrMemberAccess	target -> flags
>2924	Identifier	flags
>2925	Identifier	target
>2926	IfStatement	if ( target -> type != MT_SKULL )
>2927	ExpressionStatement	 
>2928	AssignmentExpr	target -> flags &= ~MF_NOGRAVITY
>2929	Identifier	~MF_NOGRAVITY
>2930	PtrMemberAccess	target -> flags
>2931	Identifier	flags
>2932	Identifier	target
>2933	Condition	 
>2934	EqualityExpression	target -> type != MT_SKULL
>2935	Identifier	MT_SKULL
>2936	PtrMemberAccess	target -> type
>2937	Identifier	type
>2938	Identifier	target
>2939	ExpressionStatement	 
>2940	AssignmentExpr	target -> flags &= ~ ( MF_SHOOTABLE | MF_FLOAT | MF_SKULLFLY )
>2941	UnaryOp	~ ( MF_SHOOTABLE | MF_FLOAT | MF_SKULLFLY )
>2942	InclusiveOrExpression	MF_SHOOTABLE | MF_FLOAT | MF_SKULLFLY
>2943	InclusiveOrExpression	MF_FLOAT | MF_SKULLFLY
>2944	Identifier	MF_SKULLFLY
>2945	Identifier	MF_FLOAT
>2946	Identifier	MF_SHOOTABLE
>2947	UnaryOperator	~
>2948	PtrMemberAccess	target -> flags
>2949	Identifier	flags
>2950	Identifier	target
>2951	IdentifierDeclStatement	 
>2952	IdentifierDecl	* mo
>2953	Identifier	mo
>2954	IdentifierDeclType	mobj_t *
>2955	IdentifierDeclStatement	 
>2956	IdentifierDecl	item
>2957	Identifier	item
>2958	IdentifierDeclType	mobjtype_t
>3029	FunctionDef	P_DamageMobj (mobj_t * target , mobj_t * inflictor , mobj_t * source , int damage)
>3030	ParameterList	mobj_t * target , mobj_t * inflictor , mobj_t * source , int damage
>3031	Parameter	 
>3032	Identifier	damage
>3033	ParameterType	int
>3034	Parameter	 
>3035	Identifier	source
>3036	ParameterType	mobj_t *
>3037	Parameter	 
>3038	Identifier	inflictor
>3039	ParameterType	mobj_t *
>3040	Parameter	 
>3041	Identifier	target
>3042	ParameterType	mobj_t *
>3043	ReturnType	void
>3044	CompoundStatement	 
>3045	IfStatement	if ( ( ! target -> threshold || target -> type == MT_VILE ) && source && source != target && source -> type != \
>3046	CompoundStatement	 
>3047	ExpressionStatement	 
>3048	CallExpression	P_SetMobjState ( target , ( statenum_t ) target -> info -> seestate )
>3049	ArgumentList	target
>3050	Argument	( statenum_t ) target -> info -> seestate
>3051	CastExpression	( statenum_t ) target -> info -> seestate
>3052	PtrMemberAccess	target -> info -> seestate
>3053	Identifier	seestate
>3054	PtrMemberAccess	target -> info
>3055	Identifier	info
>3056	Identifier	target
>3057	CastTarget	statenum_t
>3058	Argument	target
>3059	Identifier	target
>3060	Callee	P_SetMobjState
>3061	Identifier	P_SetMobjState
>3062	Statement	 
>3063	Statement	 
>3064	Statement	 
>3065	Statement	 
>3066	Statement	 
>3067	Statement	 
>3068	Statement	 
>3069	Statement	 
>3070	Statement	 
>3071	Statement	 
>3072	Statement	 
>3073	Statement	 
>3074	Statement	 
>3075	Statement	 
>3076	Statement	 
>3077	Statement	 
>3078	Statement	 
>3079	Statement	 
>3080	Statement	 
>3081	Statement	 
>3082	Statement	 
>3083	Statement	 
>3084	Statement	 
>3085	Statement	 
>3086	Statement	 
>3087	Statement	 
>3088	Statement	 
>3089	ExpressionStatement	 
>3090	AssignmentExpr	target -> threshold = BASETHRESHOLD
>3091	Identifier	BASETHRESHOLD
>3092	PtrMemberAccess	target -> threshold
>3093	Identifier	threshold
>3094	Identifier	target
>3095	ExpressionStatement	 
>3096	AssignmentExpr	target -> target = source
>3097	Identifier	source
>3098	PtrMemberAccess	target -> target
>3099	Identifier	target
>3100	Identifier	target
>3101	Condition	 
>3102	AndExpression	( ! target -> threshold || target -> type == MT_VILE ) && source && source != target && source -> type != \
>3103	AndExpression	source && source != target && source -> type != MT_VILE
>3104	AndExpression	source != target && source -> type != MT_VILE
>3105	EqualityExpression	source -> type != MT_VILE
>3106	Identifier	MT_VILE
>3107	PtrMemberAccess	source -> type
>3108	Identifier	type
>3109	Identifier	source
>3110	EqualityExpression	source != target
>3111	Identifier	target
>3112	Identifier	source
>3113	Identifier	source
>3114	OrExpression	! target -> threshold || target -> type == MT_VILE
>3115	EqualityExpression	target -> type == MT_VILE
>3116	Identifier	MT_VILE
>3117	PtrMemberAccess	target -> type
>3118	Identifier	type
>3119	Identifier	target
>3120	UnaryOp	! target -> threshold
>3121	PtrMemberAccess	target -> threshold
>3122	Identifier	threshold
>3123	Identifier	target
>3124	UnaryOperator	!
>3125	ExpressionStatement	 
>3126	AssignmentExpr	target -> reactiontime = 0
>3127	PrimaryExpression	0
>3128	PtrMemberAccess	target -> reactiontime
>3129	Identifier	reactiontime
>3130	Identifier	target
>3131	IfStatement	if ( ( P_Random ( ) < target -> info -> painchance ) && ! ( target -> flags & MF_SKULLFLY ) )
>3132	CompoundStatement	 
>3133	ExpressionStatement	 
>3134	CallExpression	P_SetMobjState ( target , ( statenum_t ) target -> info -> painstate )
>3135	ArgumentList	target
>3136	Argument	( statenum_t ) target -> info -> painstate
>3137	CastExpression	( statenum_t ) target -> info -> painstate
>3138	PtrMemberAccess	target -> info -> painstate
>3139	Identifier	painstate
>3140	PtrMemberAccess	target -> info
>3141	Identifier	info
>3142	Identifier	target
>3143	CastTarget	statenum_t
>3144	Argument	target
>3145	Identifier	target
>3146	Callee	P_SetMobjState
>3147	Identifier	P_SetMobjState
>3148	ExpressionStatement	 
>3149	AssignmentExpr	target -> flags |= MF_JUSTHIT
>3150	Identifier	MF_JUSTHIT
>3151	PtrMemberAccess	target -> flags
>3152	Identifier	flags
>3153	Identifier	target
>3154	Condition	 
>3155	AndExpression	( P_Random ( ) < target -> info -> painchance ) && ! ( target -> flags & MF_SKULLFLY )
>3156	UnaryOp	! ( target -> flags & MF_SKULLFLY )
>3157	BitAndExpression	target -> flags & MF_SKULLFLY
>3158	Identifier	MF_SKULLFLY
>3159	PtrMemberAccess	target -> flags
>3160	Identifier	flags
>3161	Identifier	target
>3162	UnaryOperator	!
>3163	RelationalExpression	P_Random ( ) < target -> info -> painchance
>3164	PtrMemberAccess	target -> info -> painchance
>3165	Identifier	painchance
>3166	PtrMemberAccess	target -> info
>3167	Identifier	info
>3168	Identifier	target
>3169	CallExpression	P_Random ( )
>3170	ArgumentList	 
>3171	Callee	P_Random
>3172	Identifier	P_Random
>3173	IfStatement	if ( target -> health <= 0 )
>3174	CompoundStatement	 
>3175	ReturnStatement	 
>3176	ExpressionStatement	 
>3177	CallExpression	P_KillMobj ( source , target )
>3178	ArgumentList	source
>3179	Argument	target
>3180	Identifier	target
>3181	Argument	source
>3182	Identifier	source
>3183	Callee	P_KillMobj
>3184	Identifier	P_KillMobj
>3185	Condition	 
>3186	RelationalExpression	target -> health <= 0
>3187	PrimaryExpression	0
>3188	PtrMemberAccess	target -> health
>3189	Identifier	health
>3190	Identifier	target
>3191	ExpressionStatement	 
>3192	AssignmentExpr	target -> health -= damage
>3193	Identifier	damage
>3194	PtrMemberAccess	target -> health
>3195	Identifier	health
>3196	Identifier	target
>3197	IfStatement	if ( player )
>3198	CompoundStatement	 
>3199	ExpressionStatement	 
>3200	AssignmentExpr	temp = damage < 100 ? damage 
>3201	ConditionalExpression	damage < 100 ? damage 
>3202	PrimaryExpression	100
>3203	Identifier	damage
>3204	Condition	damage < 100
>3205	RelationalExpression	damage < 100
>3206	PrimaryExpression	100
>3207	Identifier	damage
>3208	Identifier	temp
>3209	IfStatement	if ( player -> damagecount > 100 )
>3210	ExpressionStatement	 
>3211	AssignmentExpr	player -> damagecount = 100
>3212	PrimaryExpression	100
>3213	PtrMemberAccess	player -> damagecount
>3214	Identifier	damagecount
>3215	Identifier	player
>3216	Condition	 
>3217	RelationalExpression	player -> damagecount > 100
>3218	PrimaryExpression	100
>3219	PtrMemberAccess	player -> damagecount
>3220	Identifier	damagecount
>3221	Identifier	player
>3222	ExpressionStatement	 
>3223	AssignmentExpr	player -> damagecount += damage
>3224	Identifier	damage
>3225	PtrMemberAccess	player -> damagecount
>3226	Identifier	damagecount
>3227	Identifier	player
>3228	ExpressionStatement	 
>3229	AssignmentExpr	player -> attacker = source
>3230	Identifier	source
>3231	PtrMemberAccess	player -> attacker
>3232	Identifier	attacker
>3233	Identifier	player
>3234	IfStatement	if ( player -> health < 0 )
>3235	ExpressionStatement	 
>3236	AssignmentExpr	player -> health = 0
>3237	PrimaryExpression	0
>3238	PtrMemberAccess	player -> health
>3239	Identifier	health
>3240	Identifier	player
>3241	Condition	 
>3242	RelationalExpression	player -> health < 0
>3243	PrimaryExpression	0
>3244	PtrMemberAccess	player -> health
>3245	Identifier	health
>3246	Identifier	player
>3247	ExpressionStatement	 
>3248	AssignmentExpr	player -> health -= damage
>3249	Identifier	damage
>3250	PtrMemberAccess	player -> health
>3251	Identifier	health
>3252	Identifier	player
>3253	IfStatement	if ( player -> armortype )
>3254	CompoundStatement	 
>3255	ExpressionStatement	 
>3256	AssignmentExpr	damage -= saved
>3257	Identifier	saved
>3258	Identifier	damage
>3259	ExpressionStatement	 
>3260	AssignmentExpr	player -> armorpoints -= saved
>3261	Identifier	saved
>3262	PtrMemberAccess	player -> armorpoints
>3263	Identifier	armorpoints
>3264	Identifier	player
>3265	IfStatement	if ( player -> armorpoints <= saved )
>3266	CompoundStatement	 
>3267	ExpressionStatement	 
>3268	AssignmentExpr	player -> armortype = 0
>3269	PrimaryExpression	0
>3270	PtrMemberAccess	player -> armortype
>3271	Identifier	armortype
>3272	Identifier	player
>3273	ExpressionStatement	 
>3274	AssignmentExpr	saved = player -> armorpoints
>3275	PtrMemberAccess	player -> armorpoints
>3276	Identifier	armorpoints
>3277	Identifier	player
>3278	Identifier	saved
>3279	Condition	 
>3280	RelationalExpression	player -> armorpoints <= saved
>3281	Identifier	saved
>3282	PtrMemberAccess	player -> armorpoints
>3283	Identifier	armorpoints
>3284	Identifier	player
>3285	IfStatement	if ( player -> armortype == 1 )
>3286	ElseStatement	else
>3287	ExpressionStatement	 
>3288	AssignmentExpr	saved = damage / 2
>3289	MultiplicativeExpression	damage / 2
>3290	PrimaryExpression	2
>3291	Identifier	damage
>3292	Identifier	saved
>3293	ExpressionStatement	 
>3294	AssignmentExpr	saved = damage / 3
>3295	MultiplicativeExpression	damage / 3
>3296	PrimaryExpression	3
>3297	Identifier	damage
>3298	Identifier	saved
>3299	Condition	 
>3300	EqualityExpression	player -> armortype == 1
>3301	PrimaryExpression	1
>3302	PtrMemberAccess	player -> armortype
>3303	Identifier	armortype
>3304	Identifier	player
>3305	Condition	 
>3306	PtrMemberAccess	player -> armortype
>3307	Identifier	armortype
>3308	Identifier	player
>3309	IfStatement	if ( damage < 1000 && ( ( player -> cheats & CF_GODMODE ) || player -> powers [ pw_invulnerability ] ) )
>3310	CompoundStatement	 
>3311	ReturnStatement	 
>3312	Condition	 
>3313	AndExpression	damage < 1000 && ( ( player -> cheats & CF_GODMODE ) || player -> powers [ pw_invulnerability ] )
>3314	OrExpression	( player -> cheats & CF_GODMODE ) || player -> powers [ pw_invulnerability ]
>3315	ArrayIndexing	player -> powers [ pw_invulnerability ]
>3316	Identifier	pw_invulnerability
>3317	PtrMemberAccess	player -> powers
>3318	Identifier	powers
>3319	Identifier	player
>3320	BitAndExpression	player -> cheats & CF_GODMODE
>3321	Identifier	CF_GODMODE
>3322	PtrMemberAccess	player -> cheats
>3323	Identifier	cheats
>3324	Identifier	player
>3325	RelationalExpression	damage < 1000
>3326	PrimaryExpression	1000
>3327	Identifier	damage
>3328	CompoundStatement	 
>3329	Statement	 
>3330	Statement	 
>3331	Statement	 
>3332	Statement	 
>3333	Statement	 
>3334	Statement	 
>3335	Statement	 
>3336	Statement	 
>3337	Statement	 
>3338	IdentifierDeclStatement	 
>3339	IdentifierDecl	additional_time = 500.0f * damageFloat
>3340	AssignmentExpr	additional_time = 500.0f * damageFloat
>3341	MultiplicativeExpression	500.0f * damageFloat
>3342	Identifier	damageFloat
>3343	PrimaryExpression	500.0f
>3344	Identifier	additional_time
>3345	Identifier	additional_time
>3346	IdentifierDeclType	int
>3347	IdentifierDeclStatement	 
>3348	IdentifierDecl	additional = 0.5f * damageFloat
>3349	AssignmentExpr	additional = 0.5f * damageFloat
>3350	MultiplicativeExpression	0.5f * damageFloat
>3351	Identifier	damageFloat
>3352	PrimaryExpression	0.5f
>3353	Identifier	additional
>3354	Identifier	additional
>3355	IdentifierDeclType	float
>3356	IdentifierDeclStatement	 
>3357	IdentifierDecl	damageFloat = std 
>3358	AssignmentExpr	damageFloat = std 
>3359	CallExpression	std 
>3360	ArgumentList	( float ) damageClamp / 100.0f
>3361	Argument	100.0f
>3362	PrimaryExpression	100.0f
>3363	Argument	( float ) damageClamp / 100.0f
>3364	MultiplicativeExpression	( float ) damageClamp / 100.0f
>3365	PrimaryExpression	100.0f
>3366	CastExpression	( float ) damageClamp
>3367	Identifier	damageClamp
>3368	CastTarget	float
>3369	Callee	std 
>3370	Identifier	std 
>3371	Identifier	damageFloat
>3372	Identifier	damageFloat
>3373	IdentifierDeclType	float
>3374	IdentifierDeclStatement	 
>3375	IdentifierDecl	damageClamp = Min ( damage , 100 )
>3376	AssignmentExpr	damageClamp = Min ( damage , 100 )
>3377	CallExpression	Min ( damage , 100 )
>3378	ArgumentList	damage
>3379	Argument	100
>3380	PrimaryExpression	100
>3381	Argument	damage
>3382	Identifier	damage
>3383	Callee	Min
>3384	Identifier	Min
>3385	Identifier	damageClamp
>3386	Identifier	damageClamp
>3387	IdentifierDeclType	int
>3388	IdentifierDeclStatement	 
>3389	IdentifierDecl	baseShake_Low_Dur = 100
>3390	AssignmentExpr	baseShake_Low_Dur = 100
>3391	PrimaryExpression	100
>3392	Identifier	baseShake_Low_Dur
>3393	Identifier	baseShake_Low_Dur
>3394	IdentifierDeclType	int
>3395	IdentifierDeclStatement	 
>3396	IdentifierDecl	baseShake_Low = 0.5f
>3397	AssignmentExpr	baseShake_Low = 0.5f
>3398	PrimaryExpression	0.5f
>3399	Identifier	baseShake_Low
>3400	Identifier	baseShake_Low
>3401	IdentifierDeclType	float
>3402	IdentifierDeclStatement	 
>3403	IdentifierDecl	baseShake_High_Dur = 100
>3404	AssignmentExpr	baseShake_High_Dur = 100
>3405	PrimaryExpression	100
>3406	Identifier	baseShake_High_Dur
>3407	Identifier	baseShake_High_Dur
>3408	IdentifierDeclType	int
>3409	IdentifierDeclStatement	 
>3410	IdentifierDecl	baseShake_High = 0.5f
>3411	AssignmentExpr	baseShake_High = 0.5f
>3412	PrimaryExpression	0.5f
>3413	Identifier	baseShake_High
>3414	Identifier	baseShake_High
>3415	IdentifierDeclType	float
>3416	IfStatement	if ( target -> subsector -> sector -> special == 11 && damage >= target -> health )
>3417	CompoundStatement	 
>3418	ExpressionStatement	 
>3419	AssignmentExpr	damage = target -> health - 1
>3420	AdditiveExpression	target -> health - 1
>3421	PrimaryExpression	1
>3422	PtrMemberAccess	target -> health
>3423	Identifier	health
>3424	Identifier	target
>3425	Identifier	damage
>3426	Condition	 
>3427	AndExpression	target -> subsector -> sector -> special == 11 && damage >= target -> health
>3428	RelationalExpression	damage >= target -> health
>3429	PtrMemberAccess	target -> health
>3430	Identifier	health
>3431	Identifier	target
>3432	Identifier	damage
>3433	EqualityExpression	target -> subsector -> sector -> special == 11
>3434	PrimaryExpression	11
>3435	PtrMemberAccess	target -> subsector -> sector -> special
>3436	Identifier	special
>3437	PtrMemberAccess	target -> subsector -> sector
>3438	Identifier	sector
>3439	PtrMemberAccess	target -> subsector
>3440	Identifier	subsector
>3441	Identifier	target
>3442	Condition	 
>3443	Identifier	player
>3444	IfStatement	if ( inflictor && ! ( target -> flags & MF_NOCLIP ) && ( ! source || ! source -> player || source -> player -> \
>3445	CompoundStatement	 
>3446	ExpressionStatement	 
>3447	AssignmentExpr	target -> momy += FixedMul ( thrust , finesine [ ang ] )
>3448	CallExpression	FixedMul ( thrust , finesine [ ang ] )
>3449	ArgumentList	thrust
>3450	Argument	finesine [ ang ]
>3451	ArrayIndexing	finesine [ ang ]
>3452	Identifier	ang
>3453	Identifier	finesine
>3454	Argument	thrust
>3455	Identifier	thrust
>3456	Callee	FixedMul
>3457	Identifier	FixedMul
>3458	PtrMemberAccess	target -> momy
>3459	Identifier	momy
>3460	Identifier	target
>3461	ExpressionStatement	 
>3462	AssignmentExpr	target -> momx += FixedMul ( thrust , finecosine [ ang ] )
>3463	CallExpression	FixedMul ( thrust , finecosine [ ang ] )
>3464	ArgumentList	thrust
>3465	Argument	finecosine [ ang ]
>3466	ArrayIndexing	finecosine [ ang ]
>3467	Identifier	ang
>3468	Identifier	finecosine
>3469	Argument	thrust
>3470	Identifier	thrust
>3471	Callee	FixedMul
>3472	Identifier	FixedMul
>3473	PtrMemberAccess	target -> momx
>3474	Identifier	momx
>3475	Identifier	target
>3476	ExpressionStatement	 
>3477	AssignmentExpr	ang >>= ANGLETOFINESHIFT
>3478	Identifier	ANGLETOFINESHIFT
>3479	Identifier	ang
>3480	IfStatement	if ( damage < 40 && damage > target -> health && target -> z - inflictor -> z > 64 * FRACUNIT && ( P_Random ( ) & \
>3481	CompoundStatement	 
>3482	ExpressionStatement	 
>3483	AssignmentExpr	thrust *= 4
>3484	PrimaryExpression	4
>3485	Identifier	thrust
>3486	ExpressionStatement	 
>3487	AssignmentExpr	ang += ANG180
>3488	Identifier	ANG180
>3489	Identifier	ang
>3490	Condition	 
>3491	AndExpression	damage < 40 && damage > target -> health && target -> z - inflictor -> z > 64 * FRACUNIT && ( P_Random ( ) & \
>3492	AndExpression	damage > target -> health && target -> z - inflictor -> z > 64 * FRACUNIT && ( P_Random ( ) & 1 )
>3493	AndExpression	target -> z - inflictor -> z > 64 * FRACUNIT && ( P_Random ( ) & 1 )
>3494	BitAndExpression	P_Random ( ) & 1
>3495	PrimaryExpression	1
>3496	CallExpression	P_Random ( )
>3497	ArgumentList	 
>3498	Callee	P_Random
>3499	Identifier	P_Random
>3500	RelationalExpression	target -> z - inflictor -> z > 64 * FRACUNIT
>3501	MultiplicativeExpression	64 * FRACUNIT
>3502	Identifier	FRACUNIT
>3503	PrimaryExpression	64
>3504	AdditiveExpression	target -> z - inflictor -> z
>3505	PtrMemberAccess	inflictor -> z
>3506	Identifier	z
>3507	Identifier	inflictor
>3508	PtrMemberAccess	target -> z
>3509	Identifier	z
>3510	Identifier	target
>3511	RelationalExpression	damage > target -> health
>3512	PtrMemberAccess	target -> health
>3513	Identifier	health
>3514	Identifier	target
>3515	Identifier	damage
>3516	RelationalExpression	damage < 40
>3517	PrimaryExpression	40
>3518	Identifier	damage
>3519	ExpressionStatement	 
>3520	AssignmentExpr	thrust = damage * ( FRACUNIT >> 3 ) * 100 / target -> info -> mass
>3521	MultiplicativeExpression	damage * ( FRACUNIT >> 3 ) * 100 / target -> info -> mass
>3522	MultiplicativeExpression	( FRACUNIT >> 3 ) * 100 / target -> info -> mass
>3523	MultiplicativeExpression	100 / target -> info -> mass
>3524	PtrMemberAccess	target -> info -> mass
>3525	Identifier	mass
>3526	PtrMemberAccess	target -> info
>3527	Identifier	info
>3528	Identifier	target
>3529	PrimaryExpression	100
>3530	ShiftExpression	FRACUNIT >> 3
>3531	PrimaryExpression	3
>3532	Identifier	FRACUNIT
>3533	Identifier	damage
>3534	Identifier	thrust
>3535	ExpressionStatement	 
>3536	AssignmentExpr	ang = R_PointToAngle2 ( inflictor -> x , inflictor -> y , target -> x , target -> y )
>3537	CallExpression	R_PointToAngle2 ( inflictor -> x , inflictor -> y , target -> x , target -> y )
>3538	ArgumentList	inflictor -> x
>3539	Argument	target -> y
>3540	PtrMemberAccess	target -> y
>3541	Identifier	y
>3542	Identifier	target
>3543	Argument	target -> x
>3544	PtrMemberAccess	target -> x
>3545	Identifier	x
>3546	Identifier	target
>3547	Argument	inflictor -> y
>3548	PtrMemberAccess	inflictor -> y
>3549	Identifier	y
>3550	Identifier	inflictor
>3551	Argument	inflictor -> x
>3552	PtrMemberAccess	inflictor -> x
>3553	Identifier	x
>3554	Identifier	inflictor
>3555	Callee	R_PointToAngle2
>3556	Identifier	R_PointToAngle2
>3557	Identifier	ang
>3558	Condition	 
>3559	AndExpression	inflictor && ! ( target -> flags & MF_NOCLIP ) && ( ! source || ! source -> player || source -> player \
>3560	AndExpression	! ( target -> flags & MF_NOCLIP ) && ( ! source || ! source -> player || source -> player -> readyweapon != \
>3561	OrExpression	! source || ! source -> player || source -> player -> readyweapon != wp_chainsaw
>3562	OrExpression	! source -> player || source -> player -> readyweapon != wp_chainsaw
>3563	EqualityExpression	source -> player -> readyweapon != wp_chainsaw
>3564	Identifier	wp_chainsaw
>3565	PtrMemberAccess	source -> player -> readyweapon
>3566	Identifier	readyweapon
>3567	PtrMemberAccess	source -> player
>3568	Identifier	player
>3569	Identifier	source
>3570	UnaryOp	! source -> player
>3571	PtrMemberAccess	source -> player
>3572	Identifier	player
>3573	Identifier	source
>3574	UnaryOperator	!
>3575	UnaryOp	! source
>3576	Identifier	source
>3577	UnaryOperator	!
>3578	UnaryOp	! ( target -> flags & MF_NOCLIP )
>3579	BitAndExpression	target -> flags & MF_NOCLIP
>3580	Identifier	MF_NOCLIP
>3581	PtrMemberAccess	target -> flags
>3582	Identifier	flags
>3583	Identifier	target
>3584	UnaryOperator	!
>3585	Identifier	inflictor
>3586	ExpressionStatement	 
>3587	AssignmentExpr	damage >>= 1
>3588	PrimaryExpression	1
>3589	Identifier	damage
>3590	Statement	 
>3591	Statement	 
>3592	Statement	 
>3593	Statement	 
>3594	Statement	 
>3595	Statement	 
>3596	Statement	 
>3597	Statement	 
>3598	Statement	 
>3599	Statement	 
>3600	Statement	 
>3601	ExpressionStatement	 
>3602	AssignmentExpr	player = target -> player
>3603	PtrMemberAccess	target -> player
>3604	Identifier	player
>3605	Identifier	target
>3606	Identifier	player
>3607	IfStatement	if ( target -> flags & MF_SKULLFLY )
>3608	CompoundStatement	 
>3609	ExpressionStatement	 
>3610	AssignmentExpr	target -> momx = target -> momy = target -> momz = 0
>3611	AssignmentExpr	target -> momy = target -> momz = 0
>3612	AssignmentExpr	target -> momz = 0
>3613	PrimaryExpression	0
>3614	PtrMemberAccess	target -> momz
>3615	Identifier	momz
>3616	Identifier	target
>3617	PtrMemberAccess	target -> momy
>3618	Identifier	momy
>3619	Identifier	target
>3620	PtrMemberAccess	target -> momx
>3621	Identifier	momx
>3622	Identifier	target
>3623	Condition	 
>3624	BitAndExpression	target -> flags & MF_SKULLFLY
>3625	Identifier	MF_SKULLFLY
>3626	PtrMemberAccess	target -> flags
>3627	Identifier	flags
>3628	Identifier	target
>3629	IfStatement	if ( target -> health <= 0 )
>3630	ReturnStatement	 
>3631	Condition	 
>3632	RelationalExpression	target -> health <= 0
>3633	PrimaryExpression	0
>3634	PtrMemberAccess	target -> health
>3635	Identifier	health
>3636	Identifier	target
>3637	IfStatement	if ( ! ( target -> flags & MF_SHOOTABLE ) )
>3638	ReturnStatement	 
>3639	Condition	 
>3640	UnaryOp	! ( target -> flags & MF_SHOOTABLE )
>3641	BitAndExpression	target -> flags & MF_SHOOTABLE
>3642	Identifier	MF_SHOOTABLE
>3643	PtrMemberAccess	target -> flags
>3644	Identifier	flags
>3645	Identifier	target
>3646	UnaryOperator	!
>3647	IdentifierDeclStatement	 
>3648	IdentifierDecl	temp
>3649	Identifier	temp
>3650	IdentifierDeclType	int
>3651	IdentifierDeclStatement	 
>3652	IdentifierDecl	thrust
>3653	Identifier	thrust
>3654	IdentifierDeclType	fixed_t
>3655	IdentifierDeclStatement	 
>3656	IdentifierDecl	* player
>3657	Identifier	player
>3658	IdentifierDeclType	player_t *
>3659	IdentifierDeclStatement	 
>3660	IdentifierDecl	saved
>3661	Identifier	saved
>3662	IdentifierDeclType	int
>3663	IdentifierDeclStatement	 
>3664	IdentifierDecl	ang
>3665	Identifier	ang
>3666	IdentifierDeclType	unsigned
<7=19,18,8
<8=15,12,9
<9=11,10
<12=14,13
<15=17,16
<19=268,261,243,228,210,209,208,207,206,205,204,203,202,201,200,199,198,197,196,195,194,189,181,173,148,143,22,20
<20=21
<22=141,23
<23=139,111,110,108,81,80,78,51,50,48,27,25,24
<25=26
<27=42,28
<28=29
<29=36,30
<30=31
<31=33,32
<33=35,34
<36=37
<37=39,38
<39=41,40
<42=43
<43=45,44
<45=47,46
<48=49
<51=66,52
<52=53
<53=60,54
<54=55
<55=57,56
<57=59,58
<60=61
<61=63,62
<63=65,64
<66=67
<67=73,68
<68=70,69
<70=72,71
<73=75,74
<75=77,76
<78=79
<81=96,82
<82=83
<83=90,84
<84=85
<85=87,86
<87=89,88
<90=91
<91=93,92
<93=95,94
<96=97
<97=103,98
<98=100,99
<100=102,101
<103=105,104
<105=107,106
<108=109
<111=133,112
<112=113
<113=127,121,114
<114=115
<115=116
<116=118,117
<118=120,119
<121=122
<122=124,123
<124=126,125
<127=128
<128=130,129
<130=132,131
<133=134
<134=136,135
<136=138,137
<139=140
<141=142
<143=146,144
<144=145
<146=147
<148=161,149
<149=150
<150=156,151
<151=153,152
<153=155,154
<156=158,157
<158=160,159
<161=162
<162=168,163
<163=165,164
<165=167,166
<168=170,169
<170=172,171
<173=174
<174=176,175
<176=178,177
<178=180,179
<181=182
<182=188,183
<183=185,184
<185=187,186
<189=190
<190=191
<191=193,192
<210=226,220,211
<211=212
<212=213
<213=219,214
<214=216,215
<216=218,217
<220=221
<221=225,222
<222=224,223
<226=227
<228=231,229
<229=230
<231=232
<232=238,233
<233=235,234
<235=237,236
<238=240,239
<240=242,241
<243=253,244
<244=245
<245=251,246
<246=249,247
<247=248
<249=250
<251=252
<253=254
<254=258,255
<255=257,256
<258=260,259
<261=264,262
<262=263
<264=265
<265=267,266
<268=269
<269=271,270
<306=318,317,307
<307=314,311,308
<308=310,309
<311=313,312
<314=316,315
<318=527,523,522,521,520,519,518,517,516,515,514,513,512,511,510,509,508,507,506,505,504,407,354,323,319
<319=320
<320=322,321
<323=348,344,324
<324=325
<325=340,332,326
<326=327
<327=329,328
<329=331,330
<332=333
<333=335,334
<335=337,336
<337=339,338
<340=341
<341=343,342
<344=345
<345=347,346
<348=349
<349=351,350
<351=353,352
<354=399,360,355
<355=356
<356=357
<357=359,358
<360=361
<361=397,380,362
<362=363
<363=364
<364=379,365
<365=377,366
<366=375,369,367
<367=368
<369=370
<370=372,371
<372=374,373
<375=376
<377=378
<380=381
<381=396,382
<382=394,383
<383=392,386,384
<384=385
<386=387
<387=389,388
<389=391,390
<392=393
<394=395
<397=398
<399=400
<400=402,401
<402=404,403
<404=406,405
<407=479,473,465,464,463,462,461,460,459,458,443,437,436,435,434,433,432,431,430,429,428,427,426,425,424,423,422,421,410,408
<408=409
<410=411
<411=419,412
<412=415,413
<413=414
<415=416
<416=418,417
<419=420
<437=438
<438=440,439
<440=442,441
<443=444
<444=456,445
<445=454,448,446
<446=447
<448=449
<449=451,450
<451=453,452
<454=455
<456=457
<465=466
<466=468,467
<468=470,469
<470=472,471
<473=474
<474=476,475
<476=478,477
<479=498,496,480
<480=481
<481=482
<482=494,483
<483=492,486,484
<484=485
<486=487
<487=489,488
<489=491,490
<492=493
<494=495
<496=497
<498=499
<499=501,500
<501=503,502
<523=524
<524=526,525
<527=528
<528=530,529
<556=565,564,557
<557=561,558
<558=560,559
<561=563,562
<565=597,591,578,568,566
<566=567
<568=569
<569=573,570
<570=572,571
<573=575,574
<575=577,576
<578=585,579
<579=580
<580=582,581
<582=584,583
<585=586
<586=588,587
<588=590,589
<591=592
<592=594,593
<594=596,595
<597=600,598
<598=599
<600=601
<601=603,602
<603=605,604
<620=629,628,621
<621=625,622
<622=624,623
<625=627,626
<629=659,653,644,638,632,630
<630=631
<632=633
<633=635,634
<635=637,636
<638=639
<639=641,640
<641=643,642
<644=647,645
<645=646
<647=648
<648=650,649
<650=652,651
<653=654
<654=658,655
<655=657,656
<659=660
<660=662,661
<674=686,685,675
<675=682,679,676
<676=678,677
<679=681,680
<682=684,683
<686=775,774,773,772,771,770,769,768,767,766,765,764,763,762,761,760,759,758,757,756,687
<687=688
<688=748,744,741,689
<689=740,739,738,737,736,735,734,733,732,731,690
<690=730,729,728,727,726,725,719,711,705,699,691
<691=692
<692=694,693
<694=696,695
<696=698,697
<699=700
<700=702,701
<702=704,703
<705=706
<706=708,707
<708=710,709
<711=713,712
<713=714
<714=716,715
<716=718,717
<719=720
<720=722,721
<722=724,723
<741=743,742
<744=745
<745=747,746
<748=749
<749=750
<750=755,754,751
<751=753,752
<796=805,804,797
<797=801,798
<798=800,799
<801=803,802
<805=906,882,866,850,825,816,808,806
<806=807
<808=809
<809=811,810
<811=813,812
<813=815,814
<816=819,817
<817=818
<819=820
<820=822,821
<822=824,823
<825=846,826
<826=837,829,827
<827=828
<829=830
<830=832,831
<832=834,833
<834=836,835
<837=838
<838=844,839
<839=842,840
<840=841
<842=843
<844=845
<846=847
<847=849,848
<850=862,851
<851=854,852
<852=853
<854=855
<855=857,856
<857=859,858
<859=861,860
<862=863
<863=865,864
<866=878,867
<867=870,868
<868=869
<870=871
<871=873,872
<873=875,874
<875=877,876
<878=879
<879=881,880
<882=902,883
<883=894,886,884
<884=885
<886=887
<887=889,888
<889=891,890
<891=893,892
<894=895
<895=897,896
<897=899,898
<899=901,900
<902=903
<903=905,904
<906=918,907
<907=910,908
<908=909
<910=911
<911=913,912
<913=915,914
<915=917,916
<918=919
<919=921,920
<947=956,955,948
<948=952,949
<949=951,950
<952=954,953
<956=2185,2181,2177,2173,2163,2146,2142,2136,2128,1010,997,990,984,983,982,981,980,979,978,977,976,975,974,973,972,971,970,969,968,957
<957=958
<958=966,959
<959=962,960
<960=961
<962=963
<963=965,964
<966=967
<984=985
<985=987,986
<987=989,988
<990=991
<991=995,992
<992=993
<993=994
<995=996
<997=1004,998
<998=999
<999=1001,1000
<1001=1003,1002
<1004=1005
<1005=1007,1006
<1007=1009,1008
<1010=2124,1011
<1011=2122,2109,2103,2102,2100,2087,2081,2080,2078,2072,2059,2049,2043,2042,2040,2034,2021,2008,2002,2001,1999,1993,1980,1970,1964,1960,1959,1957,1956,1955,1954,1953,1952,1951,1950,1949,1948,1947,1941,1931,1922,1916,1912,1911,1909,1898,1897,1896,1895,1894,1893,1892,1891,1890,1889,1888,1886,1875,1874,1873,1872,1871,1870,1869,1868,1867,1866,1865,1863,1852,1851,1850,1849,1848,1847,1846,1845,1844,1843,1842,1840,1829,1828,1827,1826,1825,1824,1823,1822,1821,1820,1819,1817,1806,1805,1804,1803,1802,1801,1800,1799,1798,1797,1796,1794,1783,1782,1781,1780,1779,1778,1777,1776,1775,1774,1773,1771,1758,1752,1751,1749,1736,1716,1715,1713,1700,1694,1690,1689,1687,1674,1668,1655,1651,1650,1648,1635,1629,1625,1624,1622,1609,1603,1599,1598,1596,1583,1577,1573,1572,1570,1557,1551,1547,1546,1544,1504,1498,1497,1495,1480,1474,1473,1471,1456,1450,1449,1447,1432,1426,1425,1423,1408,1402,1401,1399,1384,1378,1377,1375,1012,1019,1021,1022,1026,1032,1051,1053,1054,1058,1064,1083,1085,1086,1090,1096,1111,1113,1114,1118,1124,1139,1141,1142,1146,1152,1167,1169,1170,1174,1180,1199,1201,1202,1206,1212,1244,1259,1261,1262,1268,1293,1327,1329,1330,1336,1351,1353,1354,1360
<1012=1013
<1013=1017,1014
<1014=1015
<1015=1016
<1017=1018
<1019=1020
<1022=1023
<1023=1025,1024
<1026=1027
<1027=1029,1028
<1029=1031,1030
<1032=1034,1033
<1034=1035
<1035=1050,1036
<1036=1048,1037
<1037=1046,1044,1038
<1038=1039
<1039=1041,1040
<1041=1043,1042
<1044=1045
<1046=1047
<1048=1049
<1051=1052
<1054=1055
<1055=1057,1056
<1058=1059
<1059=1061,1060
<1061=1063,1062
<1064=1066,1065
<1066=1067
<1067=1082,1068
<1068=1080,1069
<1069=1078,1076,1070
<1070=1071
<1071=1073,1072
<1073=1075,1074
<1076=1077
<1078=1079
<1080=1081
<1083=1084
<1086=1087
<1087=1089,1088
<1090=1091
<1091=1093,1092
<1093=1095,1094
<1096=1098,1097
<1098=1099
<1099=1110,1100
<1100=1108,1101
<1101=1106,1104,1102
<1102=1103
<1104=1105
<1106=1107
<1108=1109
<1111=1112
<1114=1115
<1115=1117,1116
<1118=1119
<1119=1121,1120
<1121=1123,1122
<1124=1126,1125
<1126=1127
<1127=1138,1128
<1128=1136,1129
<1129=1134,1132,1130
<1130=1131
<1132=1133
<1134=1135
<1136=1137
<1139=1140
<1142=1143
<1143=1145,1144
<1146=1147
<1147=1149,1148
<1149=1151,1150
<1152=1154,1153
<1154=1155
<1155=1166,1156
<1156=1164,1157
<1157=1162,1160,1158
<1158=1159
<1160=1161
<1162=1163
<1164=1165
<1167=1168
<1170=1171
<1171=1173,1172
<1174=1175
<1175=1177,1176
<1177=1179,1178
<1180=1182,1181
<1182=1183
<1183=1198,1184
<1184=1196,1185
<1185=1194,1192,1186
<1186=1187
<1187=1189,1188
<1189=1191,1190
<1192=1193
<1194=1195
<1196=1197
<1199=1200
<1202=1203
<1203=1205,1204
<1206=1207
<1207=1209,1208
<1209=1211,1210
<1212=1235,1213
<1213=1214
<1214=1230,1215
<1215=1228,1220,1218,1216
<1216=1217
<1218=1219
<1220=1221
<1221=1222
<1222=1226,1223
<1223=1224
<1224=1225
<1226=1227
<1228=1229
<1230=1231
<1231=1233,1232
<1233=1234
<1235=1236
<1236=1243,1237
<1237=1239,1238
<1239=1240
<1240=1242,1241
<1244=1246,1245
<1246=1247
<1247=1258,1248
<1248=1256,1249
<1249=1254,1252,1250
<1250=1251
<1252=1253
<1254=1255
<1256=1257
<1259=1260
<1262=1263
<1263=1265,1264
<1265=1267,1266
<1268=1289,1285,1282,1269
<1269=1270
<1270=1280,1271
<1271=1278,1274,1272
<1272=1273
<1274=1275
<1275=1277,1276
<1278=1279
<1280=1281
<1282=1284,1283
<1285=1286
<1286=1288,1287
<1289=1290
<1290=1292,1291
<1293=1321,1294
<1294=1301,1295
<1295=1296
<1296=1298,1297
<1298=1300,1299
<1301=1317,1313,1310,1302
<1302=1303
<1303=1305,1304
<1305=1307,1306
<1307=1309,1308
<1310=1312,1311
<1313=1314
<1314=1316,1315
<1317=1318
<1318=1320,1319
<1321=1322
<1322=1326,1323
<1323=1325,1324
<1327=1328
<1330=1331
<1331=1333,1332
<1333=1335,1334
<1336=1338,1337
<1338=1339
<1339=1350,1340
<1340=1348,1341
<1341=1346,1344,1342
<1342=1343
<1344=1345
<1346=1347
<1348=1349
<1351=1352
<1354=1355
<1355=1357,1356
<1357=1359,1358
<1360=1362,1361
<1362=1363
<1363=1374,1364
<1364=1372,1365
<1365=1370,1368,1366
<1366=1367
<1368=1369
<1370=1371
<1372=1373
<1375=1376
<1378=1379
<1379=1381,1380
<1381=1383,1382
<1384=1386,1385
<1386=1387
<1387=1398,1388
<1388=1396,1389
<1389=1394,1392,1390
<1390=1391
<1392=1393
<1394=1395
<1396=1397
<1399=1400
<1402=1403
<1403=1405,1404
<1405=1407,1406
<1408=1410,1409
<1410=1411
<1411=1422,1412
<1412=1420,1413
<1413=1418,1416,1414
<1414=1415
<1416=1417
<1418=1419
<1420=1421
<1423=1424
<1426=1427
<1427=1429,1428
<1429=1431,1430
<1432=1434,1433
<1434=1435
<1435=1446,1436
<1436=1444,1437
<1437=1442,1440,1438
<1438=1439
<1440=1441
<1442=1443
<1444=1445
<1447=1448
<1450=1451
<1451=1453,1452
<1453=1455,1454
<1456=1458,1457
<1458=1459
<1459=1470,1460
<1460=1468,1461
<1461=1466,1464,1462
<1462=1463
<1464=1465
<1466=1467
<1468=1469
<1471=1472
<1474=1475
<1475=1477,1476
<1477=1479,1478
<1480=1482,1481
<1482=1483
<1483=1494,1484
<1484=1492,1485
<1485=1490,1488,1486
<1486=1487
<1488=1489
<1490=1491
<1492=1493
<1495=1496
<1498=1499
<1499=1501,1500
<1501=1503,1502
<1504=1538,1522,1505
<1505=1506
<1506=1507
<1507=1509,1508
<1509=1510
<1510=1521,1511
<1511=1519,1512
<1512=1517,1515,1513
<1513=1514
<1515=1516
<1517=1518
<1519=1520
<1522=1523
<1523=1525,1524
<1525=1526
<1526=1537,1527
<1527=1535,1528
<1528=1533,1531,1529
<1529=1530
<1531=1532
<1533=1534
<1535=1536
<1538=1539
<1539=1541,1540
<1541=1543,1542
<1544=1545
<1547=1548
<1548=1550,1549
<1551=1552
<1552=1554,1553
<1554=1556,1555
<1557=1559,1558
<1559=1560
<1560=1569,1561
<1561=1567,1562
<1562=1565,1563
<1563=1564
<1565=1566
<1567=1568
<1570=1571
<1573=1574
<1574=1576,1575
<1577=1578
<1578=1580,1579
<1580=1582,1581
<1583=1585,1584
<1585=1586
<1586=1595,1587
<1587=1593,1588
<1588=1591,1589
<1589=1590
<1591=1592
<1593=1594
<1596=1597
<1599=1600
<1600=1602,1601
<1603=1604
<1604=1606,1605
<1606=1608,1607
<1609=1611,1610
<1611=1612
<1612=1621,1613
<1613=1619,1614
<1614=1617,1615
<1615=1616
<1617=1618
<1619=1620
<1622=1623
<1625=1626
<1626=1628,1627
<1629=1630
<1630=1632,1631
<1632=1634,1633
<1635=1637,1636
<1637=1638
<1638=1647,1639
<1639=1645,1640
<1640=1643,1641
<1641=1642
<1643=1644
<1645=1646
<1648=1649
<1651=1652
<1652=1654,1653
<1655=1662,1656
<1656=1657
<1657=1659,1658
<1659=1661,1660
<1662=1663
<1663=1665,1664
<1665=1667,1666
<1668=1669
<1669=1671,1670
<1671=1673,1672
<1674=1676,1675
<1676=1677
<1677=1686,1678
<1678=1684,1679
<1679=1682,1680
<1680=1681
<1682=1683
<1684=1685
<1687=1688
<1690=1691
<1691=1693,1692
<1694=1695
<1695=1697,1696
<1697=1699,1698
<1700=1702,1701
<1702=1703
<1703=1712,1704
<1704=1710,1705
<1705=1708,1706
<1706=1707
<1708=1709
<1710=1711
<1713=1714
<1716=1730,1724,1717
<1717=1718
<1718=1719
<1719=1721,1720
<1721=1723,1722
<1724=1725
<1725=1727,1726
<1727=1729,1728
<1730=1731
<1731=1733,1732
<1733=1735,1734
<1736=1738,1737
<1738=1739
<1739=1748,1740
<1740=1746,1741
<1741=1744,1742
<1742=1743
<1744=1745
<1746=1747
<1749=1750
<1752=1753
<1753=1755,1754
<1755=1757,1756
<1758=1760,1759
<1760=1761
<1761=1770,1762
<1762=1768,1763
<1763=1766,1764
<1764=1765
<1766=1767
<1768=1769
<1771=1772
<1783=1784
<1784=1792,1785
<1785=1790,1788,1786
<1786=1787
<1788=1789
<1790=1791
<1792=1793
<1794=1795
<1806=1807
<1807=1815,1808
<1808=1813,1811,1809
<1809=1810
<1811=1812
<1813=1814
<1815=1816
<1817=1818
<1829=1830
<1830=1838,1831
<1831=1836,1834,1832
<1832=1833
<1834=1835
<1836=1837
<1838=1839
<1840=1841
<1852=1853
<1853=1861,1854
<1854=1859,1857,1855
<1855=1856
<1857=1858
<1859=1860
<1861=1862
<1863=1864
<1875=1876
<1876=1884,1877
<1877=1882,1880,1878
<1878=1879
<1880=1881
<1882=1883
<1884=1885
<1886=1887
<1898=1899
<1899=1907,1900
<1900=1905,1903,1901
<1901=1902
<1903=1904
<1905=1906
<1907=1908
<1909=1910
<1912=1913
<1913=1915,1914
<1916=1917
<1917=1919,1918
<1919=1921,1920
<1922=1923
<1923=1929,1924
<1924=1927,1925
<1925=1926
<1927=1928
<1929=1930
<1931=1932
<1932=1936,1933
<1933=1935,1934
<1936=1938,1937
<1938=1940,1939
<1941=1942
<1942=1944,1943
<1944=1946,1945
<1957=1958
<1960=1961
<1961=1963,1962
<1964=1965
<1965=1967,1966
<1967=1969,1968
<1970=1971
<1971=1975,1972
<1972=1974,1973
<1975=1977,1976
<1977=1979,1978
<1980=1987,1981
<1981=1982
<1982=1984,1983
<1984=1986,1985
<1987=1988
<1988=1990,1989
<1990=1992,1991
<1993=1994
<1994=1996,1995
<1996=1998,1997
<1999=2000
<2002=2003
<2003=2005,2004
<2005=2007,2006
<2008=2015,2009
<2009=2010
<2010=2012,2011
<2012=2014,2013
<2015=2016
<2016=2020,2017
<2017=2019,2018
<2021=2028,2022
<2022=2023
<2023=2025,2024
<2025=2027,2026
<2028=2029
<2029=2031,2030
<2031=2033,2032
<2034=2035
<2035=2037,2036
<2037=2039,2038
<2040=2041
<2043=2044
<2044=2046,2045
<2046=2048,2047
<2049=2050
<2050=2054,2051
<2051=2053,2052
<2054=2056,2055
<2056=2058,2057
<2059=2066,2060
<2060=2061
<2061=2063,2062
<2063=2065,2064
<2066=2067
<2067=2069,2068
<2069=2071,2070
<2072=2073
<2073=2075,2074
<2075=2077,2076
<2078=2079
<2081=2082
<2082=2084,2083
<2084=2086,2085
<2087=2089,2088
<2089=2090
<2090=2099,2091
<2091=2097,2092
<2092=2095,2093
<2093=2094
<2095=2096
<2097=2098
<2100=2101
<2103=2104
<2104=2106,2105
<2106=2108,2107
<2109=2111,2110
<2111=2112
<2112=2121,2113
<2113=2119,2114
<2114=2117,2115
<2115=2116
<2117=2118
<2119=2120
<2122=2123
<2124=2125
<2125=2127,2126
<2128=2130,2129
<2130=2131
<2131=2133,2132
<2133=2135,2134
<2136=2137
<2137=2141,2138
<2138=2140,2139
<2142=2143
<2143=2145,2144
<2146=2149,2147
<2147=2148
<2149=2150
<2150=2158,2151
<2151=2157,2152
<2152=2154,2153
<2154=2156,2155
<2158=2162,2159
<2159=2161,2160
<2163=2164
<2164=2172,2165
<2165=2169,2166
<2166=2168,2167
<2169=2171,2170
<2173=2174
<2174=2176,2175
<2177=2178
<2178=2180,2179
<2181=2182
<2182=2184,2183
<2185=2186
<2186=2188,2187
<2305=2308,2307,2306
<2308=2376,2375,2374,2373,2372,2371,2370,2367,2366,2365,2364,2363,2362,2361,2360,2359,2356,2339,2331,2319,2311,2309
<2309=2310
<2311=2315,2312
<2312=2313
<2313=2314
<2315=2316
<2316=2318,2317
<2319=2320
<2320=2330,2329,2321
<2321=2328,2322
<2322=2324,2323
<2324=2325
<2325=2327,2326
<2331=2335,2332
<2332=2333
<2333=2334
<2335=2336
<2336=2338,2337
<2339=2340
<2340=2355,2354,2341
<2341=2353,2342
<2342=2344,2343
<2344=2345
<2345=2347,2346
<2347=2349,2348
<2349=2350
<2350=2352,2351
<2356=2357
<2357=2358
<2367=2368
<2368=2369
<2376=2380,2377
<2377=2378
<2378=2379
<2380=2381
<2381=2400,2382
<2382=2398,2383
<2383=2384
<2384=2385
<2385=2387,2386
<2387=2389,2388
<2389=2390
<2390=2392,2391
<2392=2394,2393
<2394=2395
<2395=2397,2396
<2398=2399
<2417=2426,2425,2418
<2418=2422,2419
<2419=2421,2420
<2422=2424,2423
<2426=2955,2951,2939,2926,2918,2912,2666,2665,2664,2663,2662,2661,2660,2659,2658,2657,2656,2655,2654,2653,2652,2651,2639,2559,2508,2497,2484,2452,2433,2427
<2427=2428
<2428=2430,2429
<2430=2432,2431
<2433=2434
<2434=2451,2435
<2435=2449,2436
<2436=2445,2441,2439,2437
<2437=2438
<2439=2440
<2441=2442
<2442=2444,2443
<2445=2446
<2446=2448,2447
<2449=2450
<2452=2480,2453
<2453=2478,2476,2472,2471,2469,2465,2464,2462,2458,2457,2455,2454
<2455=2456
<2458=2459
<2459=2461,2460
<2462=2463
<2465=2466
<2466=2468,2467
<2469=2470
<2472=2473
<2473=2475,2474
<2476=2477
<2478=2479
<2480=2481
<2481=2483,2482
<2484=2491,2485
<2485=2486
<2486=2488,2487
<2488=2490,2489
<2491=2492
<2492=2494,2493
<2494=2496,2495
<2497=2498
<2498=2505,2499
<2499=2501,2500
<2501=2503,2502
<2503=2504
<2505=2507,2506
<2508=2541,2525,2509
<2509=2510
<2510=2511
<2511=2523,2512
<2512=2521,2513
<2513=2514
<2514=2520,2515
<2515=2517,2516
<2517=2519,2518
<2521=2522
<2523=2524
<2525=2526
<2526=2527
<2527=2539,2528
<2528=2537,2529
<2529=2530
<2530=2536,2531
<2531=2533,2532
<2533=2535,2534
<2537=2538
<2539=2540
<2541=2542
<2542=2548,2543
<2543=2545,2544
<2545=2547,2546
<2548=2556,2549
<2549=2555,2550
<2550=2552,2551
<2552=2554,2553
<2556=2558,2557
<2559=2635,2560
<2560=2629,2628,2627,2626,2625,2624,2623,2622,2621,2620,2619,2618,2617,2616,2615,2614,2613,2607,2599,2590,2589,2588,2587,2586,2585,2584,2583,2582,2581,2580,2579,2578,2577,2576,2575,2574,2573,2572,2571,2570,2569,2568,2567,2561
<2561=2562
<2562=2563
<2563=2565,2564
<2565=2566
<2590=2591
<2591=2597,2592
<2592=2593
<2593=2594
<2594=2596,2595
<2597=2598
<2599=2600
<2600=2602,2601
<2602=2604,2603
<2604=2606,2605
<2607=2608
<2608=2610,2609
<2610=2612,2611
<2629=2631,2630
<2631=2632
<2632=2634,2633
<2635=2636
<2636=2638,2637
<2639=2650,2640
<2640=2641
<2641=2643,2642
<2643=2645,2644
<2645=2647,2646
<2647=2649,2648
<2666=2906,2669,2667
<2667=2668
<2669=2891,2847,2803,2747,2670
<2670=2722,2671
<2671=2714,2701,2672
<2672=2693,2673
<2673=2674
<2674=2688,2675
<2675=2686,2684,2682,2680,2678,2676
<2676=2677
<2678=2679
<2680=2681
<2682=2683
<2684=2685
<2686=2687
<2688=2689
<2689=2691,2690
<2691=2692
<2693=2694
<2694=2696,2695
<2696=2698,2697
<2698=2700,2699
<2701=2702
<2702=2712,2703
<2703=2710,2704
<2704=2705
<2705=2707,2706
<2707=2709,2708
<2710=2711
<2712=2713
<2714=2715
<2715=2717,2716
<2717=2719,2718
<2719=2721,2720
<2722=2723
<2723=2740,2724
<2724=2733,2725
<2725=2732,2726
<2726=2728,2727
<2728=2729
<2729=2731,2730
<2733=2735,2734
<2735=2737,2736
<2737=2739,2738
<2740=2742,2741
<2742=2744,2743
<2744=2746,2745
<2747=2786,2748
<2748=2778,2749
<2749=2770,2750
<2750=2751
<2751=2765,2752
<2752=2763,2761,2759,2757,2755,2753
<2753=2754
<2755=2756
<2757=2758
<2759=2760
<2761=2762
<2763=2764
<2765=2766
<2766=2768,2767
<2768=2769
<2770=2771
<2771=2773,2772
<2773=2775,2774
<2775=2777,2776
<2778=2779
<2779=2781,2780
<2781=2783,2782
<2783=2785,2784
<2786=2787
<2787=2796,2788
<2788=2795,2789
<2789=2791,2790
<2791=2792
<2792=2794,2793
<2796=2798,2797
<2798=2800,2799
<2800=2802,2801
<2803=2824,2804
<2804=2805
<2805=2819,2806
<2806=2817,2815,2813,2811,2809,2807
<2807=2808
<2809=2810
<2811=2812
<2813=2814
<2815=2816
<2817=2818
<2819=2820
<2820=2822,2821
<2822=2823
<2824=2825
<2825=2840,2826
<2826=2835,2827
<2827=2834,2828
<2828=2830,2829
<2830=2831
<2831=2833,2832
<2835=2837,2836
<2837=2839,2838
<2840=2842,2841
<2842=2844,2843
<2844=2846,2845
<2847=2887,2848
<2848=2886,2885,2884,2883,2882,2881,2880,2879,2878,2877,2876,2875,2874,2873,2872,2871,2870,2869,2868,2867,2866,2865,2864,2863,2862,2861,2860,2859,2858,2857,2856,2855,2854,2853,2852,2851,2850,2849
<2887=2888
<2888=2890,2889
<2891=2900,2892
<2892=2893
<2893=2895,2894
<2895=2897,2896
<2897=2899,2898
<2900=2901
<2901=2903,2902
<2903=2905,2904
<2906=2907
<2907=2911,2908
<2908=2910,2909
<2912=2913
<2913=2915,2914
<2915=2917,2916
<2918=2919
<2919=2923,2920
<2920=2922,2921
<2923=2925,2924
<2926=2933,2927
<2927=2928
<2928=2930,2929
<2930=2932,2931
<2933=2934
<2934=2936,2935
<2936=2938,2937
<2939=2940
<2940=2948,2941
<2941=2947,2942
<2942=2946,2943
<2943=2945,2944
<2948=2950,2949
<2951=2952
<2952=2954,2953
<2955=2956
<2956=2958,2957
<3029=3044,3043,3030
<3030=3040,3037,3034,3031
<3031=3033,3032
<3034=3036,3035
<3037=3039,3038
<3040=3042,3041
<3044=3663,3659,3655,3651,3647,3637,3629,3607,3601,3600,3599,3598,3597,3596,3595,3594,3593,3592,3591,3590,3586,3444,3197,3191,3173,3131,3125,3045
<3045=3101,3046
<3046=3095,3089,3088,3087,3086,3085,3084,3083,3082,3081,3080,3079,3078,3077,3076,3075,3074,3073,3072,3071,3070,3069,3068,3067,3066,3065,3064,3063,3062,3047
<3047=3048
<3048=3060,3049
<3049=3058,3050
<3050=3051
<3051=3057,3052
<3052=3054,3053
<3054=3056,3055
<3058=3059
<3060=3061
<3089=3090
<3090=3092,3091
<3092=3094,3093
<3095=3096
<3096=3098,3097
<3098=3100,3099
<3101=3102
<3102=3114,3103
<3103=3113,3104
<3104=3110,3105
<3105=3107,3106
<3107=3109,3108
<3110=3112,3111
<3114=3120,3115
<3115=3117,3116
<3117=3119,3118
<3120=3124,3121
<3121=3123,3122
<3125=3126
<3126=3128,3127
<3128=3130,3129
<3131=3154,3132
<3132=3148,3133
<3133=3134
<3134=3146,3135
<3135=3144,3136
<3136=3137
<3137=3143,3138
<3138=3140,3139
<3140=3142,3141
<3144=3145
<3146=3147
<3148=3149
<3149=3151,3150
<3151=3153,3152
<3154=3155
<3155=3163,3156
<3156=3162,3157
<3157=3159,3158
<3159=3161,3160
<3163=3169,3164
<3164=3166,3165
<3166=3168,3167
<3169=3171,3170
<3171=3172
<3173=3185,3174
<3174=3176,3175
<3176=3177
<3177=3183,3178
<3178=3181,3179
<3179=3180
<3181=3182
<3183=3184
<3185=3186
<3186=3188,3187
<3188=3190,3189
<3191=3192
<3192=3194,3193
<3194=3196,3195
<3197=3442,3198
<3198=3416,3409,3402,3395,3388,3374,3356,3347,3338,3337,3336,3335,3334,3333,3332,3331,3330,3329,3328,3309,3253,3247,3234,3228,3222,3209,3199
<3199=3200
<3200=3208,3201
<3201=3204,3203,3202
<3204=3205
<3205=3207,3206
<3209=3216,3210
<3210=3211
<3211=3213,3212
<3213=3215,3214
<3216=3217
<3217=3219,3218
<3219=3221,3220
<3222=3223
<3223=3225,3224
<3225=3227,3226
<3228=3229
<3229=3231,3230
<3231=3233,3232
<3234=3241,3235
<3235=3236
<3236=3238,3237
<3238=3240,3239
<3241=3242
<3242=3244,3243
<3244=3246,3245
<3247=3248
<3248=3250,3249
<3250=3252,3251
<3253=3305,3254
<3254=3285,3265,3259,3255
<3255=3256
<3256=3258,3257
<3259=3260
<3260=3262,3261
<3262=3264,3263
<3265=3279,3266
<3266=3273,3267
<3267=3268
<3268=3270,3269
<3270=3272,3271
<3273=3274
<3274=3278,3275
<3275=3277,3276
<3279=3280
<3280=3282,3281
<3282=3284,3283
<3285=3299,3293,3286
<3286=3287
<3287=3288
<3288=3292,3289
<3289=3291,3290
<3293=3294
<3294=3298,3295
<3295=3297,3296
<3299=3300
<3300=3302,3301
<3302=3304,3303
<3305=3306
<3306=3308,3307
<3309=3312,3310
<3310=3311
<3312=3313
<3313=3325,3314
<3314=3320,3315
<3315=3317,3316
<3317=3319,3318
<3320=3322,3321
<3322=3324,3323
<3325=3327,3326
<3338=3339
<3339=3346,3345,3340
<3340=3344,3341
<3341=3343,3342
<3347=3348
<3348=3355,3354,3349
<3349=3353,3350
<3350=3352,3351
<3356=3357
<3357=3373,3372,3358
<3358=3371,3359
<3359=3369,3360
<3360=3363,3361
<3361=3362
<3363=3364
<3364=3366,3365
<3366=3368,3367
<3369=3370
<3374=3375
<3375=3387,3386,3376
<3376=3385,3377
<3377=3383,3378
<3378=3381,3379
<3379=3380
<3381=3382
<3383=3384
<3388=3389
<3389=3394,3393,3390
<3390=3392,3391
<3395=3396
<3396=3401,3400,3397
<3397=3399,3398
<3402=3403
<3403=3408,3407,3404
<3404=3406,3405
<3409=3410
<3410=3415,3414,3411
<3411=3413,3412
<3416=3426,3417
<3417=3418
<3418=3419
<3419=3425,3420
<3420=3422,3421
<3422=3424,3423
<3426=3427
<3427=3433,3428
<3428=3432,3429
<3429=3431,3430
<3433=3435,3434
<3435=3437,3436
<3437=3439,3438
<3439=3441,3440
<3442=3443
<3444=3558,3445
<3445=3535,3519,3480,3476,3461,3446
<3446=3447
<3447=3458,3448
<3448=3456,3449
<3449=3454,3450
<3450=3451
<3451=3453,3452
<3454=3455
<3456=3457
<3458=3460,3459
<3461=3462
<3462=3473,3463
<3463=3471,3464
<3464=3469,3465
<3465=3466
<3466=3468,3467
<3469=3470
<3471=3472
<3473=3475,3474
<3476=3477
<3477=3479,3478
<3480=3490,3481
<3481=3486,3482
<3482=3483
<3483=3485,3484
<3486=3487
<3487=3489,3488
<3490=3491
<3491=3516,3492
<3492=3511,3493
<3493=3500,3494
<3494=3496,3495
<3496=3498,3497
<3498=3499
<3500=3504,3501
<3501=3503,3502
<3504=3508,3505
<3505=3507,3506
<3508=3510,3509
<3511=3515,3512
<3512=3514,3513
<3516=3518,3517
<3519=3520
<3520=3534,3521
<3521=3533,3522
<3522=3530,3523
<3523=3529,3524
<3524=3526,3525
<3526=3528,3527
<3530=3532,3531
<3535=3536
<3536=3557,3537
<3537=3555,3538
<3538=3551,3547,3543,3539
<3539=3540
<3540=3542,3541
<3543=3544
<3544=3546,3545
<3547=3548
<3548=3550,3549
<3551=3552
<3552=3554,3553
<3555=3556
<3558=3559
<3559=3585,3560
<3560=3578,3561
<3561=3575,3562
<3562=3570,3563
<3563=3565,3564
<3565=3567,3566
<3567=3569,3568
<3570=3574,3571
<3571=3573,3572
<3575=3577,3576
<3578=3584,3579
<3579=3581,3580
<3581=3583,3582
<3586=3587
<3587=3589,3588
<3601=3602
<3602=3606,3603
<3603=3605,3604
<3607=3623,3608
<3608=3609
<3609=3610
<3610=3620,3611
<3611=3617,3612
<3612=3614,3613
<3614=3616,3615
<3617=3619,3618
<3620=3622,3621
<3623=3624
<3624=3626,3625
<3626=3628,3627
<3629=3631,3630
<3631=3632
<3632=3634,3633
<3634=3636,3635
<3637=3639,3638
<3639=3640
<3640=3646,3641
<3641=3643,3642
<3643=3645,3644
<3647=3648
<3648=3650,3649
<3651=3652
<3652=3654,3653
<3655=3656
<3656=3658,3657
<3659=3660
<3660=3662,3661
<3663=3664
<3664=3666,3665
