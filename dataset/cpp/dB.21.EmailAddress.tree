>3	FunctionDef	CEmailAddress 
>4	ParameterList	 
>5	CompoundStatement	 
>6	ExpressionStatement	 
>7	AssignmentExpr	m_Valid = 0
>8	PrimaryExpression	0
>9	Identifier	m_Valid
>14	FunctionDef	CEmailAddress 
>15	ParameterList	 
>16	CompoundStatement	 
>20	FunctionDef	CEmailAddress 
>21	ParameterList	const CString & Mail
>22	Parameter	 
>23	Identifier	Mail
>24	ParameterType	const CString &
>25	CompoundStatement	 
>26	ExpressionStatement	 
>27	CallExpression	Set ( Mail )
>28	ArgumentList	Mail
>29	Argument	Mail
>30	Identifier	Mail
>31	Callee	Set
>32	Identifier	Set
>37	FunctionDef	CEmailAddress 
>38	ParameterList	const CString & Mail
>39	Parameter	 
>40	Identifier	Mail
>41	ParameterType	const CString &
>42	ReturnType	void
>43	CompoundStatement	 
>44	ExpressionStatement	 
>45	AssignmentExpr	m_Valid = Parse ( )
>46	CallExpression	Parse ( )
>47	ArgumentList	 
>48	Callee	Parse
>49	Identifier	Parse
>50	Identifier	m_Valid
>51	IfStatement	if ( ( lPos < rPos ) && ( lPos != - 1 ) && ( rPos != - 1 ) )
>52	CompoundStatement	 
>53	ExpressionStatement	 
>54	CallExpression	m_Mail . Trim32 ( )
>55	ArgumentList	 
>56	Callee	m_Mail . Trim32
>57	MemberAccess	m_Mail . Trim32
>58	Identifier	Trim32
>59	Identifier	m_Mail
>60	ExpressionStatement	 
>61	CallExpression	m_Mail . Mid ( lPos + 1 , rPos - lPos - 1 , & m_Mail )
>62	ArgumentList	lPos + 1
>63	Argument	& m_Mail
>64	UnaryOp	& m_Mail
>65	Identifier	m_Mail
>66	UnaryOperator	&
>67	Argument	rPos - lPos - 1
>68	AdditiveExpression	rPos - lPos - 1
>69	AdditiveExpression	lPos - 1
>70	PrimaryExpression	1
>71	Identifier	lPos
>72	Identifier	rPos
>73	Argument	lPos + 1
>74	AdditiveExpression	lPos + 1
>75	PrimaryExpression	1
>76	Identifier	lPos
>77	Callee	m_Mail . Mid
>78	MemberAccess	m_Mail . Mid
>79	Identifier	Mid
>80	Identifier	m_Mail
>81	ExpressionStatement	 
>82	CallExpression	m_Dest . Trim32 ( )
>83	ArgumentList	 
>84	Callee	m_Dest . Trim32
>85	MemberAccess	m_Dest . Trim32
>86	Identifier	Trim32
>87	Identifier	m_Dest
>88	ExpressionStatement	 
>89	CallExpression	m_Mail . Mid ( 0 , lPos , & m_Dest )
>90	ArgumentList	0
>91	Argument	& m_Dest
>92	UnaryOp	& m_Dest
>93	Identifier	m_Dest
>94	UnaryOperator	&
>95	Argument	lPos
>96	Identifier	lPos
>97	Argument	0
>98	PrimaryExpression	0
>99	Callee	m_Mail . Mid
>100	MemberAccess	m_Mail . Mid
>101	Identifier	Mid
>102	Identifier	m_Mail
>103	Condition	 
>104	AndExpression	( lPos < rPos ) && ( lPos != - 1 ) && ( rPos != - 1 )
>105	AndExpression	( lPos != - 1 ) && ( rPos != - 1 )
>106	EqualityExpression	rPos != - 1
>107	UnaryOp	- 1
>108	PrimaryExpression	1
>109	UnaryOperator	-
>110	Identifier	rPos
>111	EqualityExpression	lPos != - 1
>112	UnaryOp	- 1
>113	PrimaryExpression	1
>114	UnaryOperator	-
>115	Identifier	lPos
>116	RelationalExpression	lPos < rPos
>117	Identifier	rPos
>118	Identifier	lPos
>119	IdentifierDeclStatement	 
>120	IdentifierDecl	rPos = m_Mail . InvPos ( '>' )
>121	AssignmentExpr	rPos = m_Mail . InvPos ( '>' )
>122	CallExpression	m_Mail . InvPos ( '>' )
>123	ArgumentList	'>'
>124	Argument	'>'
>125	PrimaryExpression	'>'
>126	Callee	m_Mail . InvPos
>127	MemberAccess	m_Mail . InvPos
>128	Identifier	InvPos
>129	Identifier	m_Mail
>130	Identifier	rPos
>131	Identifier	rPos
>132	IdentifierDeclType	int
>133	IdentifierDeclStatement	 
>134	IdentifierDecl	lPos = m_Mail . Pos ( '<' )
>135	AssignmentExpr	lPos = m_Mail . Pos ( '<' )
>136	CallExpression	m_Mail . Pos ( '<' )
>137	ArgumentList	'<'
>138	Argument	'<'
>139	PrimaryExpression	'<'
>140	Callee	m_Mail . Pos
>141	MemberAccess	m_Mail . Pos
>142	Identifier	Pos
>143	Identifier	m_Mail
>144	Identifier	lPos
>145	Identifier	lPos
>146	IdentifierDeclType	int
>147	ExpressionStatement	 
>148	CallExpression	m_Error . Empty ( )
>149	ArgumentList	 
>150	Callee	m_Error . Empty
>151	MemberAccess	m_Error . Empty
>152	Identifier	Empty
>153	Identifier	m_Error
>154	ExpressionStatement	 
>155	CallExpression	m_Mail . Trim ( )
>156	ArgumentList	 
>157	Callee	m_Mail . Trim
>158	MemberAccess	m_Mail . Trim
>159	Identifier	Trim
>160	Identifier	m_Mail
>161	ExpressionStatement	 
>162	AssignmentExpr	m_Mail = Mail
>163	Identifier	Mail
>164	Identifier	m_Mail
>180	FunctionDef	CEmailAddress 
>181	ParameterList	 
>182	ReturnType	int
>183	CompoundStatement	 
>184	ReturnStatement	 
>185	AndExpression	( ( int ) ParseResult . GetLength ( ) > 0 ) && ( curPos == ( int ) m_Mail . GetLength ( ) )
>186	EqualityExpression	curPos == ( int ) m_Mail . GetLength ( )
>187	CastExpression	( int ) m_Mail . GetLength ( )
>188	CallExpression	m_Mail . GetLength ( )
>189	ArgumentList	 
>190	Callee	m_Mail . GetLength
>191	MemberAccess	m_Mail . GetLength
>192	Identifier	GetLength
>193	Identifier	m_Mail
>194	CastTarget	int
>195	Identifier	curPos
>196	RelationalExpression	( int ) ParseResult . GetLength ( ) > 0
>197	PrimaryExpression	0
>198	CastExpression	( int ) ParseResult . GetLength ( )
>199	CallExpression	ParseResult . GetLength ( )
>200	ArgumentList	 
>201	Callee	ParseResult . GetLength
>202	MemberAccess	ParseResult . GetLength
>203	Identifier	GetLength
>204	Identifier	ParseResult
>205	CastTarget	int
>206	IdentifierDeclStatement	 
>207	IdentifierDecl	ParseResult = MPAddress ( m_Mail , curPos )
>208	AssignmentExpr	ParseResult = MPAddress ( m_Mail , curPos )
>209	CallExpression	MPAddress ( m_Mail , curPos )
>210	ArgumentList	m_Mail
>211	Argument	curPos
>212	Identifier	curPos
>213	Argument	m_Mail
>214	Identifier	m_Mail
>215	Callee	MPAddress
>216	Identifier	MPAddress
>217	Identifier	ParseResult
>218	Identifier	ParseResult
>219	IdentifierDeclType	CString
>220	IdentifierDeclStatement	 
>221	IdentifierDecl	curPos = 0
>222	AssignmentExpr	curPos = 0
>223	PrimaryExpression	0
>224	Identifier	curPos
>225	Identifier	curPos
>226	IdentifierDeclType	int
>236	FunctionDef	CEmailAddress 
>237	ParameterList	const CString & iStr , int & curPos
>238	Parameter	 
>239	Identifier	curPos
>240	ParameterType	int &
>241	Parameter	 
>242	Identifier	iStr
>243	ParameterType	const CString &
>244	ReturnType	CString
>245	CompoundStatement	 
>246	IfStatement	if ( curPos < ( int ) iStr . GetLength ( ) )
>247	ElseStatement	else
>248	ReturnStatement	 
>249	Identifier	CString 
>250	CompoundStatement	 
>251	ReturnStatement	 
>252	Identifier	CString 
>253	IfStatement	if ( Group . GetLength ( ) )
>254	ReturnStatement	 
>255	Identifier	Group
>256	Condition	 
>257	CallExpression	Group . GetLength ( )
>258	ArgumentList	 
>259	Callee	Group . GetLength
>260	MemberAccess	Group . GetLength
>261	Identifier	GetLength
>262	Identifier	Group
>263	IdentifierDeclStatement	 
>264	IdentifierDecl	Group = MPGroup ( iStr , curPos )
>265	AssignmentExpr	Group = MPGroup ( iStr , curPos )
>266	CallExpression	MPGroup ( iStr , curPos )
>267	ArgumentList	iStr
>268	Argument	curPos
>269	Identifier	curPos
>270	Argument	iStr
>271	Identifier	iStr
>272	Callee	MPGroup
>273	Identifier	MPGroup
>274	Identifier	Group
>275	Identifier	Group
>276	IdentifierDeclType	CString
>277	IfStatement	if ( Mailbox . GetLength ( ) )
>278	ReturnStatement	 
>279	Identifier	Mailbox
>280	Condition	 
>281	CallExpression	Mailbox . GetLength ( )
>282	ArgumentList	 
>283	Callee	Mailbox . GetLength
>284	MemberAccess	Mailbox . GetLength
>285	Identifier	GetLength
>286	Identifier	Mailbox
>287	IdentifierDeclStatement	 
>288	IdentifierDecl	Mailbox = MPMailbox ( iStr , curPos )
>289	AssignmentExpr	Mailbox = MPMailbox ( iStr , curPos )
>290	CallExpression	MPMailbox ( iStr , curPos )
>291	ArgumentList	iStr
>292	Argument	curPos
>293	Identifier	curPos
>294	Argument	iStr
>295	Identifier	iStr
>296	Callee	MPMailbox
>297	Identifier	MPMailbox
>298	Identifier	Mailbox
>299	Identifier	Mailbox
>300	IdentifierDeclType	CString
>301	Condition	 
>302	RelationalExpression	curPos < ( int ) iStr . GetLength ( )
>303	CastExpression	( int ) iStr . GetLength ( )
>304	CallExpression	iStr . GetLength ( )
>305	ArgumentList	 
>306	Callee	iStr . GetLength
>307	MemberAccess	iStr . GetLength
>308	Identifier	GetLength
>309	Identifier	iStr
>310	CastTarget	int
>311	Identifier	curPos
>325	FunctionDef	CEmailAddress 
>326	ParameterList	const CString & iStr , int & curPos
>327	Parameter	 
>328	Identifier	curPos
>329	ParameterType	int &
>330	Parameter	 
>331	Identifier	iStr
>332	ParameterType	const CString &
>333	ReturnType	CString
>334	CompoundStatement	 
>335	IfStatement	if ( curPos < ( int ) iStr . GetLength ( ) )
>336	ElseStatement	else
>337	ReturnStatement	 
>338	Identifier	CString 
>339	CompoundStatement	 
>340	IfStatement	if ( workingPos < ( int ) iStr . GetLength ( ) )
>341	ElseStatement	else
>342	ReturnStatement	 
>343	Identifier	CString 
>344	CompoundStatement	 
>345	IfStatement	if ( iStr [ workingPos ] == ';' )
>346	ElseStatement	else
>347	ReturnStatement	 
>348	Identifier	CString 
>349	CompoundStatement	 
>350	ReturnStatement	 
>351	Identifier	Result
>352	ExpressionStatement	 
>353	AssignmentExpr	curPos = workingPos
>354	Identifier	workingPos
>355	Identifier	curPos
>356	ExpressionStatement	 
>357	IncDecOp	workingPos ++
>358	IncDec	++
>359	Identifier	workingPos
>360	ExpressionStatement	 
>361	AssignmentExpr	Result += ';'
>362	PrimaryExpression	';'
>363	Identifier	Result
>364	Condition	 
>365	EqualityExpression	iStr [ workingPos ] == ';'
>366	PrimaryExpression	';'
>367	ArrayIndexing	iStr [ workingPos ]
>368	Identifier	workingPos
>369	Identifier	iStr
>370	IfStatement	if ( iStr [ workingPos ] != ',' )
>371	DoStatement	do
>372	Condition	 
>373	EqualityExpression	iStr [ workingPos ] == ','
>374	PrimaryExpression	','
>375	ArrayIndexing	iStr [ workingPos ]
>376	Identifier	workingPos
>377	Identifier	iStr
>378	CompoundStatement	 
>379	IfStatement	if ( MBox . GetLength ( ) )
>380	ElseStatement	else
>381	BreakStatement	 
>382	ExpressionStatement	 
>383	AssignmentExpr	Result += MBox
>384	Identifier	MBox
>385	Identifier	Result
>386	Condition	 
>387	CallExpression	MBox . GetLength ( )
>388	ArgumentList	 
>389	Callee	MBox . GetLength
>390	MemberAccess	MBox . GetLength
>391	Identifier	GetLength
>392	Identifier	MBox
>393	ExpressionStatement	 
>394	AssignmentExpr	MBox = MPMailbox ( iStr , curPos )
>395	CallExpression	MPMailbox ( iStr , curPos )
>396	ArgumentList	iStr
>397	Argument	curPos
>398	Identifier	curPos
>399	Argument	iStr
>400	Identifier	iStr
>401	Callee	MPMailbox
>402	Identifier	MPMailbox
>403	Identifier	MBox
>404	IfStatement	if ( iStr [ workingPos ] == ',' )
>405	CompoundStatement	 
>406	ExpressionStatement	 
>407	AssignmentExpr	Result += ','
>408	PrimaryExpression	','
>409	Identifier	Result
>410	ExpressionStatement	 
>411	IncDecOp	workingPos ++
>412	IncDec	++
>413	Identifier	workingPos
>414	Condition	 
>415	EqualityExpression	iStr [ workingPos ] == ','
>416	PrimaryExpression	','
>417	ArrayIndexing	iStr [ workingPos ]
>418	Identifier	workingPos
>419	Identifier	iStr
>420	Condition	 
>421	EqualityExpression	iStr [ workingPos ] != ','
>422	PrimaryExpression	','
>423	ArrayIndexing	iStr [ workingPos ]
>424	Identifier	workingPos
>425	Identifier	iStr
>426	IdentifierDeclStatement	 
>427	IdentifierDecl	MBox
>428	Identifier	MBox
>429	IdentifierDeclType	CString
>430	Condition	 
>431	RelationalExpression	workingPos < ( int ) iStr . GetLength ( )
>432	CastExpression	( int ) iStr . GetLength ( )
>433	CallExpression	iStr . GetLength ( )
>434	ArgumentList	 
>435	Callee	iStr . GetLength
>436	MemberAccess	iStr . GetLength
>437	Identifier	GetLength
>438	Identifier	iStr
>439	CastTarget	int
>440	Identifier	workingPos
>441	IdentifierDeclStatement	 
>442	IdentifierDecl	workingPos = curPos + 1
>443	AssignmentExpr	workingPos = curPos + 1
>444	AdditiveExpression	curPos + 1
>445	PrimaryExpression	1
>446	Identifier	curPos
>447	Identifier	workingPos
>448	Identifier	workingPos
>449	IdentifierDeclType	int
>450	ExpressionStatement	 
>451	AssignmentExpr	Result += '
>452	PrimaryExpression	'
>453	Identifier	Result
>454	IfStatement	if ( iStr [ curPos ] != '
>455	ReturnStatement	 
>456	Identifier	CString 
>457	Condition	 
>458	EqualityExpression	iStr [ curPos ] != '
>459	PrimaryExpression	'
>460	ArrayIndexing	iStr [ curPos ]
>461	Identifier	curPos
>462	Identifier	iStr
>463	Condition	 
>464	RelationalExpression	curPos < ( int ) iStr . GetLength ( )
>465	CastExpression	( int ) iStr . GetLength ( )
>466	CallExpression	iStr . GetLength ( )
>467	ArgumentList	 
>468	Callee	iStr . GetLength
>469	MemberAccess	iStr . GetLength
>470	Identifier	GetLength
>471	Identifier	iStr
>472	CastTarget	int
>473	Identifier	curPos
>474	ExpressionStatement	 
>475	AssignmentExpr	Result += Phrase
>476	Identifier	Phrase
>477	Identifier	Result
>478	IfStatement	if ( ! Phrase . GetLength ( ) )
>479	ReturnStatement	 
>480	Identifier	CString 
>481	Condition	 
>482	UnaryOp	! Phrase . GetLength ( )
>483	CallExpression	Phrase . GetLength ( )
>484	ArgumentList	 
>485	Callee	Phrase . GetLength
>486	MemberAccess	Phrase . GetLength
>487	Identifier	GetLength
>488	Identifier	Phrase
>489	UnaryOperator	!
>490	IdentifierDeclStatement	 
>491	IdentifierDecl	Phrase = MPPhrase ( iStr , curPos )
>492	AssignmentExpr	Phrase = MPPhrase ( iStr , curPos )
>493	CallExpression	MPPhrase ( iStr , curPos )
>494	ArgumentList	iStr
>495	Argument	curPos
>496	Identifier	curPos
>497	Argument	iStr
>498	Identifier	iStr
>499	Callee	MPPhrase
>500	Identifier	MPPhrase
>501	Identifier	Phrase
>502	Identifier	Phrase
>503	IdentifierDeclType	CString
>504	IdentifierDeclStatement	 
>505	IdentifierDecl	Result
>506	Identifier	Result
>507	IdentifierDeclType	CString
>526	FunctionDef	CEmailAddress 
>527	ParameterList	const CString & iStr , int & curPos
>528	Parameter	 
>529	Identifier	curPos
>530	ParameterType	int &
>531	Parameter	 
>532	Identifier	iStr
>533	ParameterType	const CString &
>534	ReturnType	CString
>535	CompoundStatement	 
>536	IfStatement	if ( curPos < ( int ) iStr . GetLength ( ) )
>537	ElseStatement	else
>538	ReturnStatement	 
>539	Identifier	CString 
>540	CompoundStatement	 
>541	IfStatement	if ( ! ASpec . GetLength ( ) )
>542	ElseStatement	else
>543	ReturnStatement	 
>544	Identifier	ASpec
>545	CompoundStatement	 
>546	IfStatement	if ( Phrase . GetLength ( ) )
>547	ElseStatement	else
>548	ReturnStatement	 
>549	Identifier	CString 
>550	CompoundStatement	 
>551	IfStatement	if ( RAddr . GetLength ( ) )
>552	ElseStatement	else
>553	ReturnStatement	 
>554	Identifier	CString 
>555	CompoundStatement	 
>556	ReturnStatement	 
>557	Identifier	Result
>558	ExpressionStatement	 
>559	AssignmentExpr	Result += RAddr
>560	Identifier	RAddr
>561	Identifier	Result
>562	IdentifierDeclStatement	 
>563	IdentifierDecl	Result = Phrase
>564	AssignmentExpr	Result = Phrase
>565	Identifier	Phrase
>566	Identifier	Phrase
>567	Identifier	Result
>568	IdentifierDeclType	CString
>569	Condition	 
>570	CallExpression	RAddr . GetLength ( )
>571	ArgumentList	 
>572	Callee	RAddr . GetLength
>573	MemberAccess	RAddr . GetLength
>574	Identifier	GetLength
>575	Identifier	RAddr
>576	IdentifierDeclStatement	 
>577	IdentifierDecl	RAddr = MPRouteAddr ( iStr , curPos )
>578	AssignmentExpr	RAddr = MPRouteAddr ( iStr , curPos )
>579	CallExpression	MPRouteAddr ( iStr , curPos )
>580	ArgumentList	iStr
>581	Argument	curPos
>582	Identifier	curPos
>583	Argument	iStr
>584	Identifier	iStr
>585	Callee	MPRouteAddr
>586	Identifier	MPRouteAddr
>587	Identifier	RAddr
>588	Identifier	RAddr
>589	IdentifierDeclType	CString
>590	Condition	 
>591	CallExpression	Phrase . GetLength ( )
>592	ArgumentList	 
>593	Callee	Phrase . GetLength
>594	MemberAccess	Phrase . GetLength
>595	Identifier	GetLength
>596	Identifier	Phrase
>597	IdentifierDeclStatement	 
>598	IdentifierDecl	Phrase = MPPhrase ( iStr , curPos )
>599	AssignmentExpr	Phrase = MPPhrase ( iStr , curPos )
>600	CallExpression	MPPhrase ( iStr , curPos )
>601	ArgumentList	iStr
>602	Argument	curPos
>603	Identifier	curPos
>604	Argument	iStr
>605	Identifier	iStr
>606	Callee	MPPhrase
>607	Identifier	MPPhrase
>608	Identifier	Phrase
>609	Identifier	Phrase
>610	IdentifierDeclType	CString
>611	Condition	 
>612	UnaryOp	! ASpec . GetLength ( )
>613	CallExpression	ASpec . GetLength ( )
>614	ArgumentList	 
>615	Callee	ASpec . GetLength
>616	MemberAccess	ASpec . GetLength
>617	Identifier	GetLength
>618	Identifier	ASpec
>619	UnaryOperator	!
>620	IdentifierDeclStatement	 
>621	IdentifierDecl	ASpec = MPAddressSpec ( iStr , curPos )
>622	AssignmentExpr	ASpec = MPAddressSpec ( iStr , curPos )
>623	CallExpression	MPAddressSpec ( iStr , curPos )
>624	ArgumentList	iStr
>625	Argument	curPos
>626	Identifier	curPos
>627	Argument	iStr
>628	Identifier	iStr
>629	Callee	MPAddressSpec
>630	Identifier	MPAddressSpec
>631	Identifier	ASpec
>632	Identifier	ASpec
>633	IdentifierDeclType	CString
>634	Condition	 
>635	RelationalExpression	curPos < ( int ) iStr . GetLength ( )
>636	CastExpression	( int ) iStr . GetLength ( )
>637	CallExpression	iStr . GetLength ( )
>638	ArgumentList	 
>639	Callee	iStr . GetLength
>640	MemberAccess	iStr . GetLength
>641	Identifier	GetLength
>642	Identifier	iStr
>643	CastTarget	int
>644	Identifier	curPos
>662	FunctionDef	CEmailAddress 
>663	ParameterList	const CString & iStr , int & curPos
>664	Parameter	 
>665	Identifier	curPos
>666	ParameterType	int &
>667	Parameter	 
>668	Identifier	iStr
>669	ParameterType	const CString &
>670	ReturnType	CString
>671	CompoundStatement	 
>672	ReturnStatement	 
>673	Identifier	Result
>674	WhileStatement	while ( Word . GetLength ( ) )
>675	CompoundStatement	 
>676	ExpressionStatement	 
>677	AssignmentExpr	Word = MPWord ( iStr , curPos )
>678	CallExpression	MPWord ( iStr , curPos )
>679	ArgumentList	iStr
>680	Argument	curPos
>681	Identifier	curPos
>682	Argument	iStr
>683	Identifier	iStr
>684	Callee	MPWord
>685	Identifier	MPWord
>686	Identifier	Word
>687	ExpressionStatement	 
>688	AssignmentExpr	Result += Word
>689	Identifier	Word
>690	Identifier	Result
>691	Condition	 
>692	CallExpression	Word . GetLength ( )
>693	ArgumentList	 
>694	Callee	Word . GetLength
>695	MemberAccess	Word . GetLength
>696	Identifier	GetLength
>697	Identifier	Word
>698	ExpressionStatement	 
>699	AssignmentExpr	Word = MPWord ( iStr , curPos )
>700	CallExpression	MPWord ( iStr , curPos )
>701	ArgumentList	iStr
>702	Argument	curPos
>703	Identifier	curPos
>704	Argument	iStr
>705	Identifier	iStr
>706	Callee	MPWord
>707	Identifier	MPWord
>708	Identifier	Word
>709	IdentifierDeclStatement	 
>710	IdentifierDecl	Word
>711	Identifier	Word
>712	IdentifierDeclType	CString
>713	IdentifierDeclStatement	 
>714	IdentifierDecl	Result
>715	Identifier	Result
>716	IdentifierDeclType	CString
>726	FunctionDef	CEmailAddress 
>727	ParameterList	const CString & iStr , int & curPos
>728	Parameter	 
>729	Identifier	curPos
>730	ParameterType	int &
>731	Parameter	 
>732	Identifier	iStr
>733	ParameterType	const CString &
>734	ReturnType	CString
>735	CompoundStatement	 
>736	IfStatement	if ( iStr [ curPos ] == '<' )
>737	ElseStatement	else
>738	ReturnStatement	 
>739	Identifier	CString 
>740	CompoundStatement	 
>741	IfStatement	if ( AddrSpec . GetLength ( ) )
>742	ElseStatement	else
>743	ReturnStatement	 
>744	Identifier	CString 
>745	CompoundStatement	 
>746	ReturnStatement	 
>747	Identifier	Result
>748	ExpressionStatement	 
>749	AssignmentExpr	curPos = workingPos
>750	Identifier	workingPos
>751	Identifier	curPos
>752	ExpressionStatement	 
>753	AssignmentExpr	Result += AddrSpec
>754	Identifier	AddrSpec
>755	Identifier	Result
>756	IdentifierDeclStatement	 
>757	IdentifierDecl	Result ( Route )
>758	Identifier	Route
>759	Identifier	Result
>760	IdentifierDeclType	CString
>761	Condition	 
>762	CallExpression	AddrSpec . GetLength ( )
>763	ArgumentList	 
>764	Callee	AddrSpec . GetLength
>765	MemberAccess	AddrSpec . GetLength
>766	Identifier	GetLength
>767	Identifier	AddrSpec
>768	IdentifierDeclStatement	 
>769	IdentifierDecl	AddrSpec = MPAddressSpec ( iStr , workingPos )
>770	AssignmentExpr	AddrSpec = MPAddressSpec ( iStr , workingPos )
>771	CallExpression	MPAddressSpec ( iStr , workingPos )
>772	ArgumentList	iStr
>773	Argument	workingPos
>774	Identifier	workingPos
>775	Argument	iStr
>776	Identifier	iStr
>777	Callee	MPAddressSpec
>778	Identifier	MPAddressSpec
>779	Identifier	AddrSpec
>780	Identifier	AddrSpec
>781	IdentifierDeclType	CString
>782	IdentifierDeclStatement	 
>783	IdentifierDecl	Route = MPRoute ( iStr , workingPos )
>784	AssignmentExpr	Route = MPRoute ( iStr , workingPos )
>785	CallExpression	MPRoute ( iStr , workingPos )
>786	ArgumentList	iStr
>787	Argument	workingPos
>788	Identifier	workingPos
>789	Argument	iStr
>790	Identifier	iStr
>791	Callee	MPRoute
>792	Identifier	MPRoute
>793	Identifier	Route
>794	Identifier	Route
>795	IdentifierDeclType	CString
>796	IdentifierDeclStatement	 
>797	IdentifierDecl	workingPos = curPos + 1
>798	AssignmentExpr	workingPos = curPos + 1
>799	AdditiveExpression	curPos + 1
>800	PrimaryExpression	1
>801	Identifier	curPos
>802	Identifier	workingPos
>803	Identifier	workingPos
>804	IdentifierDeclType	int
>805	Condition	 
>806	EqualityExpression	iStr [ curPos ] == '<'
>807	PrimaryExpression	'<'
>808	ArrayIndexing	iStr [ curPos ]
>809	Identifier	curPos
>810	Identifier	iStr
>826	FunctionDef	CEmailAddress 
>827	ParameterList	const CString & iStr , int & curPos
>828	Parameter	 
>829	Identifier	curPos
>830	ParameterType	int &
>831	Parameter	 
>832	Identifier	iStr
>833	ParameterType	const CString &
>834	ReturnType	CString
>835	CompoundStatement	 
>836	IfStatement	if ( curPos < ( int ) iStr . GetLength ( ) )
>837	ElseStatement	else
>838	ReturnStatement	 
>839	Identifier	CString 
>840	CompoundStatement	 
>841	IfStatement	if ( iStr [ curPos ] == ',' )
>842	ElseStatement	else
>843	ReturnStatement	 
>844	Identifier	Result
>845	CompoundStatement	 
>846	ReturnStatement	 
>847	Identifier	Result
>848	ExpressionStatement	 
>849	AssignmentExpr	Result += MPRoute ( iStr , curPos )
>850	CallExpression	MPRoute ( iStr , curPos )
>851	ArgumentList	iStr
>852	Argument	curPos
>853	Identifier	curPos
>854	Argument	iStr
>855	Identifier	iStr
>856	Callee	MPRoute
>857	Identifier	MPRoute
>858	Identifier	Result
>859	Condition	 
>860	EqualityExpression	iStr [ curPos ] == ','
>861	PrimaryExpression	','
>862	ArrayIndexing	iStr [ curPos ]
>863	Identifier	curPos
>864	Identifier	iStr
>865	ExpressionStatement	 
>866	AssignmentExpr	curPos = workingPos + 1
>867	AdditiveExpression	workingPos + 1
>868	PrimaryExpression	1
>869	Identifier	workingPos
>870	Identifier	curPos
>871	ExpressionStatement	 
>872	CallExpression	iStr . Mid ( curPos , workingPos - curPos , & Result )
>873	ArgumentList	curPos
>874	Argument	& Result
>875	UnaryOp	& Result
>876	Identifier	Result
>877	UnaryOperator	&
>878	Argument	workingPos - curPos
>879	AdditiveExpression	workingPos - curPos
>880	Identifier	curPos
>881	Identifier	workingPos
>882	Argument	curPos
>883	Identifier	curPos
>884	Callee	iStr . Mid
>885	MemberAccess	iStr . Mid
>886	Identifier	Mid
>887	Identifier	iStr
>888	IdentifierDeclStatement	 
>889	IdentifierDecl	Result
>890	Identifier	Result
>891	IdentifierDeclType	CString
>892	IfStatement	if ( iStr [ workingPos ] != '
>893	ReturnStatement	 
>894	Identifier	CString 
>895	Condition	 
>896	EqualityExpression	iStr [ workingPos ] != '
>897	PrimaryExpression	'
>898	ArrayIndexing	iStr [ workingPos ]
>899	Identifier	workingPos
>900	Identifier	iStr
>901	IfStatement	if ( iStr [ workingPos ] != '@' )
>902	ElseStatement	else
>903	ExpressionStatement	 
>904	IncDecOp	workingPos ++
>905	IncDec	++
>906	Identifier	workingPos
>907	CompoundStatement	 
>908	IfStatement	if ( ! FDomain . GetLength ( ) )
>909	ReturnStatement	 
>910	Identifier	CString 
>911	Condition	 
>912	UnaryOp	! FDomain . GetLength ( )
>913	CallExpression	FDomain . GetLength ( )
>914	ArgumentList	 
>915	Callee	FDomain . GetLength
>916	MemberAccess	FDomain . GetLength
>917	Identifier	GetLength
>918	Identifier	FDomain
>919	UnaryOperator	!
>920	IdentifierDeclStatement	 
>921	IdentifierDecl	FDomain = MPDomain ( iStr , workingPos )
>922	AssignmentExpr	FDomain = MPDomain ( iStr , workingPos )
>923	CallExpression	MPDomain ( iStr , workingPos )
>924	ArgumentList	iStr
>925	Argument	workingPos
>926	Identifier	workingPos
>927	Argument	iStr
>928	Identifier	iStr
>929	Callee	MPDomain
>930	Identifier	MPDomain
>931	Identifier	FDomain
>932	Identifier	FDomain
>933	IdentifierDeclType	CString
>934	Condition	 
>935	EqualityExpression	iStr [ workingPos ] != '@'
>936	PrimaryExpression	'@'
>937	ArrayIndexing	iStr [ workingPos ]
>938	Identifier	workingPos
>939	Identifier	iStr
>940	IdentifierDeclStatement	 
>941	IdentifierDecl	workingPos = curPos
>942	AssignmentExpr	workingPos = curPos
>943	Identifier	curPos
>944	Identifier	curPos
>945	Identifier	workingPos
>946	IdentifierDeclType	int
>947	Condition	 
>948	RelationalExpression	curPos < ( int ) iStr . GetLength ( )
>949	CastExpression	( int ) iStr . GetLength ( )
>950	CallExpression	iStr . GetLength ( )
>951	ArgumentList	 
>952	Callee	iStr . GetLength
>953	MemberAccess	iStr . GetLength
>954	Identifier	GetLength
>955	Identifier	iStr
>956	CastTarget	int
>957	Identifier	curPos
>975	FunctionDef	CEmailAddress 
>976	ParameterList	const CString & iStr , int & curPos
>977	Parameter	 
>978	Identifier	curPos
>979	ParameterType	int &
>980	Parameter	 
>981	Identifier	iStr
>982	ParameterType	const CString &
>983	ReturnType	CString
>984	CompoundStatement	 
>985	IfStatement	if ( curPos < ( int ) iStr . GetLength ( ) )
>986	ElseStatement	else
>987	ReturnStatement	 
>988	Identifier	CString 
>989	CompoundStatement	 
>990	IfStatement	if ( iStr [ curPos ] == '@' )
>991	ElseStatement	else
>992	ReturnStatement	 
>993	Identifier	CString 
>994	CompoundStatement	 
>995	ReturnStatement	 
>996	Identifier	Result
>997	ExpressionStatement	 
>998	AssignmentExpr	curPos = workingPos
>999	Identifier	workingPos
>1000	Identifier	curPos
>1001	ExpressionStatement	 
>1002	AssignmentExpr	Result += m_Domain
>1003	Identifier	m_Domain
>1004	Identifier	Result
>1005	ExpressionStatement	 
>1006	AssignmentExpr	Result += '@'
>1007	PrimaryExpression	'@'
>1008	Identifier	Result
>1009	IdentifierDeclStatement	 
>1010	IdentifierDecl	Result ( m_User )
>1011	Identifier	m_User
>1012	Identifier	Result
>1013	IdentifierDeclType	CString
>1014	IfStatement	if ( ! m_Domain . GetLength ( ) )
>1015	ReturnStatement	 
>1016	Identifier	CString 
>1017	Condition	 
>1018	UnaryOp	! m_Domain . GetLength ( )
>1019	CallExpression	m_Domain . GetLength ( )
>1020	ArgumentList	 
>1021	Callee	m_Domain . GetLength
>1022	MemberAccess	m_Domain . GetLength
>1023	Identifier	GetLength
>1024	Identifier	m_Domain
>1025	UnaryOperator	!
>1026	ExpressionStatement	 
>1027	AssignmentExpr	m_Domain = MPDomain ( iStr , workingPos )
>1028	CallExpression	MPDomain ( iStr , workingPos )
>1029	ArgumentList	iStr
>1030	Argument	workingPos
>1031	Identifier	workingPos
>1032	Argument	iStr
>1033	Identifier	iStr
>1034	Callee	MPDomain
>1035	Identifier	MPDomain
>1036	Identifier	m_Domain
>1037	IdentifierDeclStatement	 
>1038	IdentifierDecl	workingPos = curPos + 1
>1039	AssignmentExpr	workingPos = curPos + 1
>1040	AdditiveExpression	curPos + 1
>1041	PrimaryExpression	1
>1042	Identifier	curPos
>1043	Identifier	workingPos
>1044	Identifier	workingPos
>1045	IdentifierDeclType	int
>1046	Condition	 
>1047	EqualityExpression	iStr [ curPos ] == '@'
>1048	PrimaryExpression	'@'
>1049	ArrayIndexing	iStr [ curPos ]
>1050	Identifier	curPos
>1051	Identifier	iStr
>1052	IfStatement	if ( ! m_User . GetLength ( ) )
>1053	ReturnStatement	 
>1054	Identifier	CString 
>1055	Condition	 
>1056	UnaryOp	! m_User . GetLength ( )
>1057	CallExpression	m_User . GetLength ( )
>1058	ArgumentList	 
>1059	Callee	m_User . GetLength
>1060	MemberAccess	m_User . GetLength
>1061	Identifier	GetLength
>1062	Identifier	m_User
>1063	UnaryOperator	!
>1064	ExpressionStatement	 
>1065	AssignmentExpr	m_User = MPLocalPart ( iStr , curPos )
>1066	CallExpression	MPLocalPart ( iStr , curPos )
>1067	ArgumentList	iStr
>1068	Argument	curPos
>1069	Identifier	curPos
>1070	Argument	iStr
>1071	Identifier	iStr
>1072	Callee	MPLocalPart
>1073	Identifier	MPLocalPart
>1074	Identifier	m_User
>1075	Condition	 
>1076	RelationalExpression	curPos < ( int ) iStr . GetLength ( )
>1077	CastExpression	( int ) iStr . GetLength ( )
>1078	CallExpression	iStr . GetLength ( )
>1079	ArgumentList	 
>1080	Callee	iStr . GetLength
>1081	MemberAccess	iStr . GetLength
>1082	Identifier	GetLength
>1083	Identifier	iStr
>1084	CastTarget	int
>1085	Identifier	curPos
>1103	FunctionDef	CEmailAddress 
>1104	ParameterList	const CString & iStr , int & curPos
>1105	Parameter	 
>1106	Identifier	curPos
>1107	ParameterType	int &
>1108	Parameter	 
>1109	Identifier	iStr
>1110	ParameterType	const CString &
>1111	ReturnType	CString
>1112	CompoundStatement	 
>1113	ReturnStatement	 
>1114	Identifier	Result
>1115	IfStatement	if ( Result . GetLength ( ) )
>1116	ExpressionStatement	 
>1117	AssignmentExpr	curPos = workingPos
>1118	Identifier	workingPos
>1119	Identifier	curPos
>1120	Condition	 
>1121	CallExpression	Result . GetLength ( )
>1122	ArgumentList	 
>1123	Callee	Result . GetLength
>1124	MemberAccess	Result . GetLength
>1125	Identifier	GetLength
>1126	Identifier	Result
>1127	IfStatement	if ( Word . GetLength ( ) )
>1128	ExpressionStatement	 
>1129	AssignmentExpr	Result += Word
>1130	Identifier	Word
>1131	Identifier	Result
>1132	Condition	 
>1133	CallExpression	Word . GetLength ( )
>1134	ArgumentList	 
>1135	Callee	Word . GetLength
>1136	MemberAccess	Word . GetLength
>1137	Identifier	GetLength
>1138	Identifier	Word
>1139	WhileStatement	while ( ( iStr [ workingPos ] == '.' ) && Word . GetLength ( ) && ( curPos < ( int ) iStr . GetLength ( ) ) )
>1140	CompoundStatement	 
>1141	ExpressionStatement	 
>1142	AssignmentExpr	Word = MPWord ( iStr , workingPos )
>1143	CallExpression	MPWord ( iStr , workingPos )
>1144	ArgumentList	iStr
>1145	Argument	workingPos
>1146	Identifier	workingPos
>1147	Argument	iStr
>1148	Identifier	iStr
>1149	Callee	MPWord
>1150	Identifier	MPWord
>1151	Identifier	Word
>1152	ExpressionStatement	 
>1153	AssignmentExpr	Result += Word
>1154	Identifier	Word
>1155	Identifier	Result
>1156	IfStatement	if ( Result . GetLength ( ) )
>1157	ExpressionStatement	 
>1158	AssignmentExpr	Result += '.'
>1159	PrimaryExpression	'.'
>1160	Identifier	Result
>1161	Condition	 
>1162	CallExpression	Result . GetLength ( )
>1163	ArgumentList	 
>1164	Callee	Result . GetLength
>1165	MemberAccess	Result . GetLength
>1166	Identifier	GetLength
>1167	Identifier	Result
>1168	ExpressionStatement	 
>1169	IncDecOp	workingPos ++
>1170	IncDec	++
>1171	Identifier	workingPos
>1172	Condition	 
>1173	AndExpression	( iStr [ workingPos ] == '.' ) && Word . GetLength ( ) && ( curPos < ( int ) iStr . GetLength ( ) )
>1174	AndExpression	Word . GetLength ( ) && ( curPos < ( int ) iStr . GetLength ( ) )
>1175	RelationalExpression	curPos < ( int ) iStr . GetLength ( )
>1176	CastExpression	( int ) iStr . GetLength ( )
>1177	CallExpression	iStr . GetLength ( )
>1178	ArgumentList	 
>1179	Callee	iStr . GetLength
>1180	MemberAccess	iStr . GetLength
>1181	Identifier	GetLength
>1182	Identifier	iStr
>1183	CastTarget	int
>1184	Identifier	curPos
>1185	CallExpression	Word . GetLength ( )
>1186	ArgumentList	 
>1187	Callee	Word . GetLength
>1188	MemberAccess	Word . GetLength
>1189	Identifier	GetLength
>1190	Identifier	Word
>1191	EqualityExpression	iStr [ workingPos ] == '.'
>1192	PrimaryExpression	'.'
>1193	ArrayIndexing	iStr [ workingPos ]
>1194	Identifier	workingPos
>1195	Identifier	iStr
>1196	ExpressionStatement	 
>1197	AssignmentExpr	Word = MPWord ( iStr , workingPos )
>1198	CallExpression	MPWord ( iStr , workingPos )
>1199	ArgumentList	iStr
>1200	Argument	workingPos
>1201	Identifier	workingPos
>1202	Argument	iStr
>1203	Identifier	iStr
>1204	Callee	MPWord
>1205	Identifier	MPWord
>1206	Identifier	Word
>1207	IdentifierDeclStatement	 
>1208	IdentifierDecl	workingPos = curPos
>1209	AssignmentExpr	workingPos = curPos
>1210	Identifier	curPos
>1211	Identifier	curPos
>1212	Identifier	workingPos
>1213	IdentifierDeclType	int
>1214	IdentifierDeclStatement	 
>1215	IdentifierDecl	Word
>1216	Identifier	Word
>1217	IdentifierDeclType	CString
>1218	IdentifierDeclStatement	 
>1219	IdentifierDecl	Result
>1220	Identifier	Result
>1221	IdentifierDeclType	CString
>1236	FunctionDef	CEmailAddress 
>1237	ParameterList	const CString & iStr , int & curPos
>1238	Parameter	 
>1239	Identifier	curPos
>1240	ParameterType	int &
>1241	Parameter	 
>1242	Identifier	iStr
>1243	ParameterType	const CString &
>1244	ReturnType	CString
>1245	CompoundStatement	 
>1246	ReturnStatement	 
>1247	Identifier	Result
>1248	IfStatement	if ( ! Result . GetLength ( ) )
>1249	CompoundStatement	 
>1250	ExpressionStatement	 
>1251	AssignmentExpr	Result = MPQuotedString ( iStr , curPos )
>1252	CallExpression	MPQuotedString ( iStr , curPos )
>1253	ArgumentList	iStr
>1254	Argument	curPos
>1255	Identifier	curPos
>1256	Argument	iStr
>1257	Identifier	iStr
>1258	Callee	MPQuotedString
>1259	Identifier	MPQuotedString
>1260	Identifier	Result
>1261	Condition	 
>1262	UnaryOp	! Result . GetLength ( )
>1263	CallExpression	Result . GetLength ( )
>1264	ArgumentList	 
>1265	Callee	Result . GetLength
>1266	MemberAccess	Result . GetLength
>1267	Identifier	GetLength
>1268	Identifier	Result
>1269	UnaryOperator	!
>1270	ExpressionStatement	 
>1271	AssignmentExpr	Result = MPAtomSequence ( iStr , curPos )
>1272	CallExpression	MPAtomSequence ( iStr , curPos )
>1273	ArgumentList	iStr
>1274	Argument	curPos
>1275	Identifier	curPos
>1276	Argument	iStr
>1277	Identifier	iStr
>1278	Callee	MPAtomSequence
>1279	Identifier	MPAtomSequence
>1280	Identifier	Result
>1281	IdentifierDeclStatement	 
>1282	IdentifierDecl	Result
>1283	Identifier	Result
>1284	IdentifierDeclType	CString
>1294	FunctionDef	CEmailAddress 
>1295	ParameterList	const CString & iStr , int & curPos
>1296	Parameter	 
>1297	Identifier	curPos
>1298	ParameterType	int &
>1299	Parameter	 
>1300	Identifier	iStr
>1301	ParameterType	const CString &
>1302	ReturnType	CString
>1303	CompoundStatement	 
>1304	IfStatement	if ( curPos < ( int ) iStr . GetLength ( ) )
>1305	ElseStatement	else
>1306	ReturnStatement	 
>1307	Identifier	CString 
>1308	CompoundStatement	 
>1309	IfStatement	if ( iStr [ curPos ] == '\\"' )
>1310	ElseStatement	else
>1311	ReturnStatement	 
>1312	Identifier	CString 
>1313	CompoundStatement	 
>1314	IfStatement	if ( iStr [ workingPos ] == '\\"' )
>1315	ElseStatement	else
>1316	ReturnStatement	 
>1317	Identifier	CString 
>1318	CompoundStatement	 
>1319	ReturnStatement	 
>1320	Identifier	Result
>1321	ExpressionStatement	 
>1322	AssignmentExpr	curPos = workingPos + 1
>1323	AdditiveExpression	workingPos + 1
>1324	PrimaryExpression	1
>1325	Identifier	workingPos
>1326	Identifier	curPos
>1327	ExpressionStatement	 
>1328	CallExpression	iStr . Mid ( curPos , workingPos - curPos , & Result )
>1329	ArgumentList	curPos
>1330	Argument	& Result
>1331	UnaryOp	& Result
>1332	Identifier	Result
>1333	UnaryOperator	&
>1334	Argument	workingPos - curPos
>1335	AdditiveExpression	workingPos - curPos
>1336	Identifier	curPos
>1337	Identifier	workingPos
>1338	Argument	curPos
>1339	Identifier	curPos
>1340	Callee	iStr . Mid
>1341	MemberAccess	iStr . Mid
>1342	Identifier	Mid
>1343	Identifier	iStr
>1344	IdentifierDeclStatement	 
>1345	IdentifierDecl	Result
>1346	Identifier	Result
>1347	IdentifierDeclType	CString
>1348	Condition	 
>1349	EqualityExpression	iStr [ workingPos ] == '\\"'
>1350	PrimaryExpression	'\\"'
>1351	ArrayIndexing	iStr [ workingPos ]
>1352	Identifier	workingPos
>1353	Identifier	iStr
>1354	WhileStatement	while ( workingPos < ( int ) iStr . GetLength ( ) )
>1355	CompoundStatement	 
>1356	IfStatement	if ( ! MPQText ( iStr , workingPos ) )
>1357	IfStatement	if ( ! MPQuotedPair ( iStr , workingPos ) )
>1358	BreakStatement	 
>1359	Condition	 
>1360	UnaryOp	! MPQuotedPair ( iStr , workingPos )
>1361	CallExpression	MPQuotedPair ( iStr , workingPos )
>1362	ArgumentList	iStr
>1363	Argument	workingPos
>1364	Identifier	workingPos
>1365	Argument	iStr
>1366	Identifier	iStr
>1367	Callee	MPQuotedPair
>1368	Identifier	MPQuotedPair
>1369	UnaryOperator	!
>1370	Condition	 
>1371	UnaryOp	! MPQText ( iStr , workingPos )
>1372	CallExpression	MPQText ( iStr , workingPos )
>1373	ArgumentList	iStr
>1374	Argument	workingPos
>1375	Identifier	workingPos
>1376	Argument	iStr
>1377	Identifier	iStr
>1378	Callee	MPQText
>1379	Identifier	MPQText
>1380	UnaryOperator	!
>1381	Condition	 
>1382	RelationalExpression	workingPos < ( int ) iStr . GetLength ( )
>1383	CastExpression	( int ) iStr . GetLength ( )
>1384	CallExpression	iStr . GetLength ( )
>1385	ArgumentList	 
>1386	Callee	iStr . GetLength
>1387	MemberAccess	iStr . GetLength
>1388	Identifier	GetLength
>1389	Identifier	iStr
>1390	CastTarget	int
>1391	Identifier	workingPos
>1392	IdentifierDeclStatement	 
>1393	IdentifierDecl	workingPos = curPos + 1
>1394	AssignmentExpr	workingPos = curPos + 1
>1395	AdditiveExpression	curPos + 1
>1396	PrimaryExpression	1
>1397	Identifier	curPos
>1398	Identifier	workingPos
>1399	Identifier	workingPos
>1400	IdentifierDeclType	int
>1401	Condition	 
>1402	EqualityExpression	iStr [ curPos ] == '\\"'
>1403	PrimaryExpression	'\\"'
>1404	ArrayIndexing	iStr [ curPos ]
>1405	Identifier	curPos
>1406	Identifier	iStr
>1407	Condition	 
>1408	RelationalExpression	curPos < ( int ) iStr . GetLength ( )
>1409	CastExpression	( int ) iStr . GetLength ( )
>1410	CallExpression	iStr . GetLength ( )
>1411	ArgumentList	 
>1412	Callee	iStr . GetLength
>1413	MemberAccess	iStr . GetLength
>1414	Identifier	GetLength
>1415	Identifier	iStr
>1416	CastTarget	int
>1417	Identifier	curPos
>1433	FunctionDef	CEmailAddress 
>1434	ParameterList	const CString & iStr , int & curPos
>1435	Parameter	 
>1436	Identifier	curPos
>1437	ParameterType	int &
>1438	Parameter	 
>1439	Identifier	iStr
>1440	ParameterType	const CString &
>1441	ReturnType	char
>1442	CompoundStatement	 
>1443	IfStatement	if ( curPos < ( int ) iStr . GetLength ( ) )
>1444	ElseStatement	else
>1445	ReturnStatement	 
>1446	PrimaryExpression	0
>1447	CompoundStatement	 
>1448	ReturnStatement	 
>1449	Identifier	c
>1450	ExpressionStatement	 
>1451	IncDecOp	curPos ++
>1452	IncDec	++
>1453	Identifier	curPos
>1454	IfStatement	if ( ( d = MPLinearWhiteSpace ( iStr , curPos ) ) )
>1455	ReturnStatement	 
>1456	Identifier	d
>1457	Condition	 
>1458	AssignmentExpr	d = MPLinearWhiteSpace ( iStr , curPos )
>1459	CallExpression	MPLinearWhiteSpace ( iStr , curPos )
>1460	ArgumentList	iStr
>1461	Argument	curPos
>1462	Identifier	curPos
>1463	Argument	iStr
>1464	Identifier	iStr
>1465	Callee	MPLinearWhiteSpace
>1466	Identifier	MPLinearWhiteSpace
>1467	Identifier	d
>1468	IdentifierDeclStatement	 
>1469	IdentifierDecl	d
>1470	Identifier	d
>1471	IdentifierDeclType	char
>1472	SwitchStatement	switch ( c )
>1473	CompoundStatement	 
>1474	ReturnStatement	 
>1475	PrimaryExpression	0
>1476	Label	 
>1477	Identifier	CR
>1478	Label	 
>1479	Label	 
>1480	Label	 
>1481	Label	 
>1482	Condition	 
>1483	Identifier	c
>1484	IdentifierDeclStatement	 
>1485	IdentifierDecl	c = iStr [ curPos ]
>1486	AssignmentExpr	c = iStr [ curPos ]
>1487	ArrayIndexing	iStr [ curPos ]
>1488	Identifier	curPos
>1489	Identifier	iStr
>1490	Identifier	c
>1491	Identifier	c
>1492	IdentifierDeclType	char
>1493	Condition	 
>1494	RelationalExpression	curPos < ( int ) iStr . GetLength ( )
>1495	CastExpression	( int ) iStr . GetLength ( )
>1496	CallExpression	iStr . GetLength ( )
>1497	ArgumentList	 
>1498	Callee	iStr . GetLength
>1499	MemberAccess	iStr . GetLength
>1500	Identifier	GetLength
>1501	Identifier	iStr
>1502	CastTarget	int
>1503	Identifier	curPos
>1515	FunctionDef	CEmailAddress 
>1516	ParameterList	const CString & iStr , int & curPos
>1517	Parameter	 
>1518	Identifier	curPos
>1519	ParameterType	int &
>1520	Parameter	 
>1521	Identifier	iStr
>1522	ParameterType	const CString &
>1523	ReturnType	CString
>1524	CompoundStatement	 
>1525	ReturnStatement	 
>1526	Identifier	Result
>1527	IfStatement	if ( Result . GetLength ( ) )
>1528	ExpressionStatement	 
>1529	AssignmentExpr	curPos = workingPos
>1530	Identifier	workingPos
>1531	Identifier	curPos
>1532	Condition	 
>1533	CallExpression	Result . GetLength ( )
>1534	ArgumentList	 
>1535	Callee	Result . GetLength
>1536	MemberAccess	Result . GetLength
>1537	Identifier	GetLength
>1538	Identifier	Result
>1539	IfStatement	if ( SubDomain . GetLength ( ) )
>1540	CompoundStatement	 
>1541	ExpressionStatement	 
>1542	AssignmentExpr	Result += SubDomain
>1543	Identifier	SubDomain
>1544	Identifier	Result
>1545	IfStatement	if ( Result . GetLength ( ) )
>1546	ExpressionStatement	 
>1547	AssignmentExpr	Result += '.'
>1548	PrimaryExpression	'.'
>1549	Identifier	Result
>1550	Condition	 
>1551	CallExpression	Result . GetLength ( )
>1552	ArgumentList	 
>1553	Callee	Result . GetLength
>1554	MemberAccess	Result . GetLength
>1555	Identifier	GetLength
>1556	Identifier	Result
>1557	Condition	 
>1558	CallExpression	SubDomain . GetLength ( )
>1559	ArgumentList	 
>1560	Callee	SubDomain . GetLength
>1561	MemberAccess	SubDomain . GetLength
>1562	Identifier	GetLength
>1563	Identifier	SubDomain
>1564	WhileStatement	while ( ( workingPos < ( int ) iStr . GetLength ( ) ) && ( iStr [ workingPos ] == '.' ) && SubDomain . GetLength ( ) )
>1565	CompoundStatement	 
>1566	ExpressionStatement	 
>1567	AssignmentExpr	SubDomain = MPSubDomain ( iStr , workingPos )
>1568	CallExpression	MPSubDomain ( iStr , workingPos )
>1569	ArgumentList	iStr
>1570	Argument	workingPos
>1571	Identifier	workingPos
>1572	Argument	iStr
>1573	Identifier	iStr
>1574	Callee	MPSubDomain
>1575	Identifier	MPSubDomain
>1576	Identifier	SubDomain
>1577	ExpressionStatement	 
>1578	AssignmentExpr	Result += SubDomain
>1579	Identifier	SubDomain
>1580	Identifier	Result
>1581	IfStatement	if ( Result . GetLength ( ) )
>1582	ExpressionStatement	 
>1583	AssignmentExpr	Result += '.'
>1584	PrimaryExpression	'.'
>1585	Identifier	Result
>1586	Condition	 
>1587	CallExpression	Result . GetLength ( )
>1588	ArgumentList	 
>1589	Callee	Result . GetLength
>1590	MemberAccess	Result . GetLength
>1591	Identifier	GetLength
>1592	Identifier	Result
>1593	ExpressionStatement	 
>1594	IncDecOp	workingPos ++
>1595	IncDec	++
>1596	Identifier	workingPos
>1597	Condition	 
>1598	AndExpression	( workingPos < ( int ) iStr . GetLength ( ) ) && ( iStr [ workingPos ] == '.' ) && SubDomain . GetLength ( )
>1599	AndExpression	( iStr [ workingPos ] == '.' ) && SubDomain . GetLength ( )
>1600	CallExpression	SubDomain . GetLength ( )
>1601	ArgumentList	 
>1602	Callee	SubDomain . GetLength
>1603	MemberAccess	SubDomain . GetLength
>1604	Identifier	GetLength
>1605	Identifier	SubDomain
>1606	EqualityExpression	iStr [ workingPos ] == '.'
>1607	PrimaryExpression	'.'
>1608	ArrayIndexing	iStr [ workingPos ]
>1609	Identifier	workingPos
>1610	Identifier	iStr
>1611	RelationalExpression	workingPos < ( int ) iStr . GetLength ( )
>1612	CastExpression	( int ) iStr . GetLength ( )
>1613	CallExpression	iStr . GetLength ( )
>1614	ArgumentList	 
>1615	Callee	iStr . GetLength
>1616	MemberAccess	iStr . GetLength
>1617	Identifier	GetLength
>1618	Identifier	iStr
>1619	CastTarget	int
>1620	Identifier	workingPos
>1621	ExpressionStatement	 
>1622	AssignmentExpr	SubDomain = MPSubDomain ( iStr , workingPos )
>1623	CallExpression	MPSubDomain ( iStr , workingPos )
>1624	ArgumentList	iStr
>1625	Argument	workingPos
>1626	Identifier	workingPos
>1627	Argument	iStr
>1628	Identifier	iStr
>1629	Callee	MPSubDomain
>1630	Identifier	MPSubDomain
>1631	Identifier	SubDomain
>1632	IdentifierDeclStatement	 
>1633	IdentifierDecl	workingPos = curPos
>1634	AssignmentExpr	workingPos = curPos
>1635	Identifier	curPos
>1636	Identifier	curPos
>1637	Identifier	workingPos
>1638	IdentifierDeclType	int
>1639	IdentifierDeclStatement	 
>1640	IdentifierDecl	SubDomain
>1641	Identifier	SubDomain
>1642	IdentifierDeclType	CString
>1643	IdentifierDeclStatement	 
>1644	IdentifierDecl	Result
>1645	Identifier	Result
>1646	IdentifierDeclType	CString
>1661	FunctionDef	CEmailAddress 
>1662	ParameterList	const CString & iStr , int & curPos
>1663	Parameter	 
>1664	Identifier	curPos
>1665	ParameterType	int &
>1666	Parameter	 
>1667	Identifier	iStr
>1668	ParameterType	const CString &
>1669	ReturnType	CString
>1670	CompoundStatement	 
>1671	ReturnStatement	 
>1672	Identifier	Result
>1673	IfStatement	if ( ! Result . GetLength ( ) )
>1674	ExpressionStatement	 
>1675	AssignmentExpr	Result = MPDomainLiteral ( iStr , curPos )
>1676	CallExpression	MPDomainLiteral ( iStr , curPos )
>1677	ArgumentList	iStr
>1678	Argument	curPos
>1679	Identifier	curPos
>1680	Argument	iStr
>1681	Identifier	iStr
>1682	Callee	MPDomainLiteral
>1683	Identifier	MPDomainLiteral
>1684	Identifier	Result
>1685	Condition	 
>1686	UnaryOp	! Result . GetLength ( )
>1687	CallExpression	Result . GetLength ( )
>1688	ArgumentList	 
>1689	Callee	Result . GetLength
>1690	MemberAccess	Result . GetLength
>1691	Identifier	GetLength
>1692	Identifier	Result
>1693	UnaryOperator	!
>1694	IdentifierDeclStatement	 
>1695	IdentifierDecl	Result = MPDomainRef ( iStr , curPos )
>1696	AssignmentExpr	Result = MPDomainRef ( iStr , curPos )
>1697	CallExpression	MPDomainRef ( iStr , curPos )
>1698	ArgumentList	iStr
>1699	Argument	curPos
>1700	Identifier	curPos
>1701	Argument	iStr
>1702	Identifier	iStr
>1703	Callee	MPDomainRef
>1704	Identifier	MPDomainRef
>1705	Identifier	Result
>1706	Identifier	Result
>1707	IdentifierDeclType	CString
>1717	FunctionDef	CEmailAddress 
>1718	ParameterList	const CString & iStr , int & curPos
>1719	Parameter	 
>1720	Identifier	curPos
>1721	ParameterType	int &
>1722	Parameter	 
>1723	Identifier	iStr
>1724	ParameterType	const CString &
>1725	ReturnType	char
>1726	CompoundStatement	 
>1727	IfStatement	if ( c <= 31 )
>1728	ElseStatement	else
>1729	IfStatement	if ( c == 127 )
>1730	ElseStatement	else
>1731	IfStatement	if ( c == ' ' )
>1732	ElseStatement	else
>1733	IfStatement	if ( In ( c , g_strRfc822EmailAddressSpecials ) )
>1734	ElseStatement	else
>1735	CompoundStatement	 
>1736	ReturnStatement	 
>1737	Identifier	c
>1738	ExpressionStatement	 
>1739	IncDecOp	curPos ++
>1740	IncDec	++
>1741	Identifier	curPos
>1742	ReturnStatement	 
>1743	PrimaryExpression	0
>1744	Condition	 
>1745	CallExpression	In ( c , g_strRfc822EmailAddressSpecials )
>1746	ArgumentList	c
>1747	Argument	g_strRfc822EmailAddressSpecials
>1748	Identifier	g_strRfc822EmailAddressSpecials
>1749	Argument	c
>1750	Identifier	c
>1751	Callee	In
>1752	Identifier	In
>1753	ReturnStatement	 
>1754	PrimaryExpression	0
>1755	Condition	 
>1756	EqualityExpression	c == ' '
>1757	PrimaryExpression	' '
>1758	Identifier	c
>1759	ReturnStatement	 
>1760	PrimaryExpression	0
>1761	Condition	 
>1762	EqualityExpression	c == 127
>1763	PrimaryExpression	127
>1764	Identifier	c
>1765	ReturnStatement	 
>1766	PrimaryExpression	0
>1767	Condition	 
>1768	RelationalExpression	c <= 31
>1769	PrimaryExpression	31
>1770	Identifier	c
>1771	IdentifierDeclStatement	 
>1772	IdentifierDecl	c = ( unsigned char ) iStr [ curPos ]
>1773	AssignmentExpr	c = ( unsigned char ) iStr [ curPos ]
>1774	CastExpression	( unsigned char ) iStr [ curPos ]
>1775	ArrayIndexing	iStr [ curPos ]
>1776	Identifier	curPos
>1777	Identifier	iStr
>1778	CastTarget	unsigned char
>1779	Identifier	c
>1780	Identifier	c
>1781	IdentifierDeclType	unsigned char
>1782	IfStatement	if ( curPos >= ( int ) iStr . GetLength ( ) )
>1783	CompoundStatement	 
>1784	ReturnStatement	 
>1785	PrimaryExpression	0
>1786	Condition	 
>1787	RelationalExpression	curPos >= ( int ) iStr . GetLength ( )
>1788	CastExpression	( int ) iStr . GetLength ( )
>1789	CallExpression	iStr . GetLength ( )
>1790	ArgumentList	 
>1791	Callee	iStr . GetLength
>1792	MemberAccess	iStr . GetLength
>1793	Identifier	GetLength
>1794	Identifier	iStr
>1795	CastTarget	int
>1796	Identifier	curPos
>1808	FunctionDef	CEmailAddress 
>1809	ParameterList	const CString & iStr , int & curPos
>1810	Parameter	 
>1811	Identifier	curPos
>1812	ParameterType	int &
>1813	Parameter	 
>1814	Identifier	iStr
>1815	ParameterType	const CString &
>1816	ReturnType	CString
>1817	CompoundStatement	 
>1818	ReturnStatement	 
>1819	Identifier	Result
>1820	DoStatement	do
>1821	Condition	 
>1822	Identifier	c
>1823	CompoundStatement	 
>1824	IfStatement	if ( c )
>1825	ExpressionStatement	 
>1826	AssignmentExpr	Result += c
>1827	Identifier	c
>1828	Identifier	Result
>1829	Condition	 
>1830	Identifier	c
>1831	ExpressionStatement	 
>1832	AssignmentExpr	c = MPAtom ( iStr , curPos )
>1833	CallExpression	MPAtom ( iStr , curPos )
>1834	ArgumentList	iStr
>1835	Argument	curPos
>1836	Identifier	curPos
>1837	Argument	iStr
>1838	Identifier	iStr
>1839	Callee	MPAtom
>1840	Identifier	MPAtom
>1841	Identifier	c
>1842	IdentifierDeclStatement	 
>1843	IdentifierDecl	c
>1844	Identifier	c
>1845	IdentifierDeclType	char
>1846	IdentifierDeclStatement	 
>1847	IdentifierDecl	Result
>1848	Identifier	Result
>1849	IdentifierDeclType	CString
>1858	FunctionDef	CEmailAddress 
>1859	ParameterList	const char & What , const CString & Where
>1860	Parameter	 
>1861	Identifier	Where
>1862	ParameterType	const CString &
>1863	Parameter	 
>1864	Identifier	What
>1865	ParameterType	const char &
>1866	ReturnType	int
>1867	CompoundStatement	 
>1868	ReturnStatement	 
>1869	PrimaryExpression	0
>1870	ForStatement	for ( int i = 0 ; i < ( int ) Where . GetLength ( ) ; i ++ )
>1871	IfStatement	if ( Where [ i ] == What )
>1872	ReturnStatement	 
>1873	PrimaryExpression	1
>1874	Condition	 
>1875	EqualityExpression	Where [ i ] == What
>1876	Identifier	What
>1877	ArrayIndexing	Where [ i ]
>1878	Identifier	i
>1879	Identifier	Where
>1880	IncDecOp	 
>1881	IncDec	++
>1882	Identifier	i
>1883	Condition	 
>1884	RelationalExpression	i < ( int ) Where . GetLength ( )
>1885	CastExpression	( int ) Where . GetLength ( )
>1886	CallExpression	Where . GetLength ( )
>1887	ArgumentList	 
>1888	Callee	Where . GetLength
>1889	MemberAccess	Where . GetLength
>1890	Identifier	GetLength
>1891	Identifier	Where
>1892	CastTarget	int
>1893	Identifier	i
>1894	ForInit	 
>1895	IdentifierDeclStatement	int i = 0 ;
>1896	IdentifierDecl	i = 0
>1897	AssignmentExpr	i = 0
>1898	PrimaryExpression	0
>1899	Identifier	i
>1900	Identifier	i
>1901	IdentifierDeclType	int
>1911	FunctionDef	CEmailAddress 
>1912	ParameterList	const CString & iStr , int & curPos
>1913	Parameter	 
>1914	Identifier	curPos
>1915	ParameterType	int &
>1916	Parameter	 
>1917	Identifier	iStr
>1918	ParameterType	const CString &
>1919	ReturnType	CString
>1920	CompoundStatement	 
>1921	ReturnStatement	 
>1922	CallExpression	MPAtomSequence ( iStr , curPos )
>1923	ArgumentList	iStr
>1924	Argument	curPos
>1925	Identifier	curPos
>1926	Argument	iStr
>1927	Identifier	iStr
>1928	Callee	MPAtomSequence
>1929	Identifier	MPAtomSequence
>1936	FunctionDef	CEmailAddress 
>1937	ParameterList	const CString & iStr , int & curPos
>1938	Parameter	 
>1939	Identifier	curPos
>1940	ParameterType	int &
>1941	Parameter	 
>1942	Identifier	iStr
>1943	ParameterType	const CString &
>1944	ReturnType	char
>1945	CompoundStatement	 
>1946	IfStatement	if ( curPos < ( int ) iStr . GetLength ( ) )
>1947	ElseStatement	else
>1948	ReturnStatement	 
>1949	PrimaryExpression	0
>1950	CompoundStatement	 
>1951	ReturnStatement	 
>1952	Identifier	c
>1953	IfStatement	if ( ( d = MPLinearWhiteSpace ( iStr , curPos ) ) )
>1954	ReturnStatement	 
>1955	Identifier	d
>1956	Condition	 
>1957	AssignmentExpr	d = MPLinearWhiteSpace ( iStr , curPos )
>1958	CallExpression	MPLinearWhiteSpace ( iStr , curPos )
>1959	ArgumentList	iStr
>1960	Argument	curPos
>1961	Identifier	curPos
>1962	Argument	iStr
>1963	Identifier	iStr
>1964	Callee	MPLinearWhiteSpace
>1965	Identifier	MPLinearWhiteSpace
>1966	Identifier	d
>1967	IdentifierDeclStatement	 
>1968	IdentifierDecl	d
>1969	Identifier	d
>1970	IdentifierDeclType	char
>1971	SwitchStatement	switch ( c )
>1972	CompoundStatement	 
>1973	ReturnStatement	 
>1974	PrimaryExpression	0
>1975	Label	 
>1976	Identifier	CR
>1977	Label	 
>1978	Label	 
>1979	Label	 
>1980	Condition	 
>1981	Identifier	c
>1982	IdentifierDeclStatement	 
>1983	IdentifierDecl	c = iStr [ curPos ]
>1984	AssignmentExpr	c = iStr [ curPos ]
>1985	ArrayIndexing	iStr [ curPos ]
>1986	Identifier	curPos
>1987	Identifier	iStr
>1988	Identifier	c
>1989	Identifier	c
>1990	IdentifierDeclType	char
>1991	Condition	 
>1992	RelationalExpression	curPos < ( int ) iStr . GetLength ( )
>1993	CastExpression	( int ) iStr . GetLength ( )
>1994	CallExpression	iStr . GetLength ( )
>1995	ArgumentList	 
>1996	Callee	iStr . GetLength
>1997	MemberAccess	iStr . GetLength
>1998	Identifier	GetLength
>1999	Identifier	iStr
>2000	CastTarget	int
>2001	Identifier	curPos
>2013	FunctionDef	CEmailAddress 
>2014	ParameterList	const CString & iStr , int & curPos
>2015	Parameter	 
>2016	Identifier	curPos
>2017	ParameterType	int &
>2018	Parameter	 
>2019	Identifier	iStr
>2020	ParameterType	const CString &
>2021	ReturnType	char
>2022	CompoundStatement	 
>2023	IfStatement	if ( curPos < ( int ) iStr . GetLength ( ) )
>2024	ElseStatement	else
>2025	ReturnStatement	 
>2026	PrimaryExpression	0
>2027	CompoundStatement	 
>2028	IfStatement	if ( ( c == SPACE ) || ( c == HTAB ) )
>2029	ElseStatement	else
>2030	ReturnStatement	 
>2031	PrimaryExpression	0
>2032	CompoundStatement	 
>2033	ReturnStatement	 
>2034	Identifier	c
>2035	ExpressionStatement	 
>2036	AssignmentExpr	curPos = workingPos + 1
>2037	AdditiveExpression	workingPos + 1
>2038	PrimaryExpression	1
>2039	Identifier	workingPos
>2040	Identifier	curPos
>2041	Condition	 
>2042	OrExpression	( c == SPACE ) || ( c == HTAB )
>2043	EqualityExpression	c == HTAB
>2044	Identifier	HTAB
>2045	Identifier	c
>2046	EqualityExpression	c == SPACE
>2047	Identifier	SPACE
>2048	Identifier	c
>2049	IdentifierDeclStatement	 
>2050	IdentifierDecl	c = iStr [ workingPos ]
>2051	AssignmentExpr	c = iStr [ workingPos ]
>2052	ArrayIndexing	iStr [ workingPos ]
>2053	Identifier	workingPos
>2054	Identifier	iStr
>2055	Identifier	c
>2056	Identifier	c
>2057	IdentifierDeclType	char
>2058	IfStatement	if ( ( iStr [ workingPos ] == 13 ) && ( iStr [ workingPos + 1 ] == 10 ) )
>2059	ExpressionStatement	 
>2060	AssignmentExpr	workingPos += 2
>2061	PrimaryExpression	2
>2062	Identifier	workingPos
>2063	Condition	 
>2064	AndExpression	( iStr [ workingPos ] == 13 ) && ( iStr [ workingPos + 1 ] == 10 )
>2065	EqualityExpression	iStr [ workingPos + 1 ] == 10
>2066	PrimaryExpression	10
>2067	ArrayIndexing	iStr [ workingPos + 1 ]
>2068	AdditiveExpression	workingPos + 1
>2069	PrimaryExpression	1
>2070	Identifier	workingPos
>2071	Identifier	iStr
>2072	EqualityExpression	iStr [ workingPos ] == 13
>2073	PrimaryExpression	13
>2074	ArrayIndexing	iStr [ workingPos ]
>2075	Identifier	workingPos
>2076	Identifier	iStr
>2077	IdentifierDeclStatement	 
>2078	IdentifierDecl	workingPos = curPos
>2079	AssignmentExpr	workingPos = curPos
>2080	Identifier	curPos
>2081	Identifier	curPos
>2082	Identifier	workingPos
>2083	IdentifierDeclType	int
>2084	Condition	 
>2085	RelationalExpression	curPos < ( int ) iStr . GetLength ( )
>2086	CastExpression	( int ) iStr . GetLength ( )
>2087	CallExpression	iStr . GetLength ( )
>2088	ArgumentList	 
>2089	Callee	iStr . GetLength
>2090	MemberAccess	iStr . GetLength
>2091	Identifier	GetLength
>2092	Identifier	iStr
>2093	CastTarget	int
>2094	Identifier	curPos
>2107	FunctionDef	CEmailAddress 
>2108	ParameterList	const CString & iStr , int & curPos
>2109	Parameter	 
>2110	Identifier	curPos
>2111	ParameterType	int &
>2112	Parameter	 
>2113	Identifier	iStr
>2114	ParameterType	const CString &
>2115	ReturnType	CString
>2116	CompoundStatement	 
>2117	IfStatement	if ( curPos < ( int ) iStr . GetLength ( ) )
>2118	ElseStatement	else
>2119	ReturnStatement	 
>2120	Identifier	CString 
>2121	CompoundStatement	 
>2122	IfStatement	if ( iStr [ workingPos ] == '[' )
>2123	ElseStatement	else
>2124	ReturnStatement	 
>2125	Identifier	CString 
>2126	CompoundStatement	 
>2127	IfStatement	if ( iStr [ workingPos ] == ']' )
>2128	ElseStatement	else
>2129	ReturnStatement	 
>2130	Identifier	CString 
>2131	CompoundStatement	 
>2132	ReturnStatement	 
>2133	Identifier	Result
>2134	ExpressionStatement	 
>2135	AssignmentExpr	curPos = workingPos + 1
>2136	AdditiveExpression	workingPos + 1
>2137	PrimaryExpression	1
>2138	Identifier	workingPos
>2139	Identifier	curPos
>2140	ExpressionStatement	 
>2141	CallExpression	iStr . Mid ( curPos , workingPos - curPos , & Result )
>2142	ArgumentList	curPos
>2143	Argument	& Result
>2144	UnaryOp	& Result
>2145	Identifier	Result
>2146	UnaryOperator	&
>2147	Argument	workingPos - curPos
>2148	AdditiveExpression	workingPos - curPos
>2149	Identifier	curPos
>2150	Identifier	workingPos
>2151	Argument	curPos
>2152	Identifier	curPos
>2153	Callee	iStr . Mid
>2154	MemberAccess	iStr . Mid
>2155	Identifier	Mid
>2156	Identifier	iStr
>2157	IdentifierDeclStatement	 
>2158	IdentifierDecl	Result
>2159	Identifier	Result
>2160	IdentifierDeclType	CString
>2161	Condition	 
>2162	EqualityExpression	iStr [ workingPos ] == ']'
>2163	PrimaryExpression	']'
>2164	ArrayIndexing	iStr [ workingPos ]
>2165	Identifier	workingPos
>2166	Identifier	iStr
>2167	WhileStatement	while ( workingPos < ( int ) iStr . GetLength ( ) )
>2168	CompoundStatement	 
>2169	IfStatement	if ( MPDtext ( iStr , workingPos ) )
>2170	ElseStatement	else
>2171	IfStatement	if ( MPQuotedPair ( iStr , workingPos ) )
>2172	ElseStatement	else
>2173	BreakStatement	 
>2174	ExpressionStatement	 
>2175	IncDecOp	workingPos ++
>2176	IncDec	++
>2177	Identifier	workingPos
>2178	Condition	 
>2179	CallExpression	MPQuotedPair ( iStr , workingPos )
>2180	ArgumentList	iStr
>2181	Argument	workingPos
>2182	Identifier	workingPos
>2183	Argument	iStr
>2184	Identifier	iStr
>2185	Callee	MPQuotedPair
>2186	Identifier	MPQuotedPair
>2187	ExpressionStatement	 
>2188	IncDecOp	workingPos ++
>2189	IncDec	++
>2190	Identifier	workingPos
>2191	Condition	 
>2192	CallExpression	MPDtext ( iStr , workingPos )
>2193	ArgumentList	iStr
>2194	Argument	workingPos
>2195	Identifier	workingPos
>2196	Argument	iStr
>2197	Identifier	iStr
>2198	Callee	MPDtext
>2199	Identifier	MPDtext
>2200	Condition	 
>2201	RelationalExpression	workingPos < ( int ) iStr . GetLength ( )
>2202	CastExpression	( int ) iStr . GetLength ( )
>2203	CallExpression	iStr . GetLength ( )
>2204	ArgumentList	 
>2205	Callee	iStr . GetLength
>2206	MemberAccess	iStr . GetLength
>2207	Identifier	GetLength
>2208	Identifier	iStr
>2209	CastTarget	int
>2210	Identifier	workingPos
>2211	ExpressionStatement	 
>2212	IncDecOp	workingPos ++
>2213	IncDec	++
>2214	Identifier	workingPos
>2215	Condition	 
>2216	EqualityExpression	iStr [ workingPos ] == '['
>2217	PrimaryExpression	'['
>2218	ArrayIndexing	iStr [ workingPos ]
>2219	Identifier	workingPos
>2220	Identifier	iStr
>2221	IdentifierDeclStatement	 
>2222	IdentifierDecl	workingPos = curPos
>2223	AssignmentExpr	workingPos = curPos
>2224	Identifier	curPos
>2225	Identifier	curPos
>2226	Identifier	workingPos
>2227	IdentifierDeclType	int
>2228	Condition	 
>2229	RelationalExpression	curPos < ( int ) iStr . GetLength ( )
>2230	CastExpression	( int ) iStr . GetLength ( )
>2231	CallExpression	iStr . GetLength ( )
>2232	ArgumentList	 
>2233	Callee	iStr . GetLength
>2234	MemberAccess	iStr . GetLength
>2235	Identifier	GetLength
>2236	Identifier	iStr
>2237	CastTarget	int
>2238	Identifier	curPos
>2253	FunctionDef	CEmailAddress 
>2254	ParameterList	const CString & iStr , int & curPos
>2255	Parameter	 
>2256	Identifier	curPos
>2257	ParameterType	int &
>2258	Parameter	 
>2259	Identifier	iStr
>2260	ParameterType	const CString &
>2261	ReturnType	char
>2262	CompoundStatement	 
>2263	IfStatement	if ( curPos < ( int ) iStr . GetLength ( ) )
>2264	ElseStatement	else
>2265	ReturnStatement	 
>2266	PrimaryExpression	0
>2267	CompoundStatement	 
>2268	IfStatement	if ( iStr [ curPos ] == '\\' )
>2269	ElseStatement	else
>2270	ReturnStatement	 
>2271	PrimaryExpression	0
>2272	CompoundStatement	 
>2273	ReturnStatement	 
>2274	ArrayIndexing	iStr [ curPos ]
>2275	Identifier	curPos
>2276	Identifier	iStr
>2277	ExpressionStatement	 
>2278	IncDecOp	curPos ++
>2279	IncDec	++
>2280	Identifier	curPos
>2281	Condition	 
>2282	EqualityExpression	iStr [ curPos ] == '\\'
>2283	PrimaryExpression	'\\'
>2284	ArrayIndexing	iStr [ curPos ]
>2285	Identifier	curPos
>2286	Identifier	iStr
>2287	Condition	 
>2288	RelationalExpression	curPos < ( int ) iStr . GetLength ( )
>2289	CastExpression	( int ) iStr . GetLength ( )
>2290	CallExpression	iStr . GetLength ( )
>2291	ArgumentList	 
>2292	Callee	iStr . GetLength
>2293	MemberAccess	iStr . GetLength
>2294	Identifier	GetLength
>2295	Identifier	iStr
>2296	CastTarget	int
>2297	Identifier	curPos
<3=5,4
<5=6
<6=7
<7=9,8
<14=16,15
<20=25,21
<21=22
<22=24,23
<25=26
<26=27
<27=31,28
<28=29
<29=30
<31=32
<37=43,42,38
<38=39
<39=41,40
<43=161,154,147,133,119,51,44
<44=45
<45=50,46
<46=48,47
<48=49
<51=103,52
<52=88,81,60,53
<53=54
<54=56,55
<56=57
<57=59,58
<60=61
<61=77,62
<62=73,67,63
<63=64
<64=66,65
<67=68
<68=72,69
<69=71,70
<73=74
<74=76,75
<77=78
<78=80,79
<81=82
<82=84,83
<84=85
<85=87,86
<88=89
<89=99,90
<90=97,95,91
<91=92
<92=94,93
<95=96
<97=98
<99=100
<100=102,101
<103=104
<104=116,105
<105=111,106
<106=110,107
<107=109,108
<111=115,112
<112=114,113
<116=118,117
<119=120
<120=132,131,121
<121=130,122
<122=126,123
<123=124
<124=125
<126=127
<127=129,128
<133=134
<134=146,145,135
<135=144,136
<136=140,137
<137=138
<138=139
<140=141
<141=143,142
<147=148
<148=150,149
<150=151
<151=153,152
<154=155
<155=157,156
<157=158
<158=160,159
<161=162
<162=164,163
<180=183,182,181
<183=220,206,184
<184=185
<185=196,186
<186=195,187
<187=194,188
<188=190,189
<190=191
<191=193,192
<196=198,197
<198=205,199
<199=201,200
<201=202
<202=204,203
<206=207
<207=219,218,208
<208=217,209
<209=215,210
<210=213,211
<211=212
<213=214
<215=216
<220=221
<221=226,225,222
<222=224,223
<236=245,244,237
<237=241,238
<238=240,239
<241=243,242
<245=246
<246=301,250,247
<247=248
<248=249
<250=287,277,263,253,251
<251=252
<253=256,254
<254=255
<256=257
<257=259,258
<259=260
<260=262,261
<263=264
<264=276,275,265
<265=274,266
<266=272,267
<267=270,268
<268=269
<270=271
<272=273
<277=280,278
<278=279
<280=281
<281=283,282
<283=284
<284=286,285
<287=288
<288=300,299,289
<289=298,290
<290=296,291
<291=294,292
<292=293
<294=295
<296=297
<301=302
<302=311,303
<303=310,304
<304=306,305
<306=307
<307=309,308
<325=334,333,326
<326=330,327
<327=329,328
<330=332,331
<334=504,490,478,474,335
<335=463,339,336
<336=337
<337=338
<339=454,450,441,340
<340=430,344,341
<341=342
<342=343
<344=426,370,345
<345=364,349,346
<346=347
<347=348
<349=360,356,352,350
<350=351
<352=353
<353=355,354
<356=357
<357=359,358
<360=361
<361=363,362
<364=365
<365=367,366
<367=369,368
<370=420,371
<371=378,372
<372=373
<373=375,374
<375=377,376
<378=404,393,379
<379=386,382,380
<380=381
<382=383
<383=385,384
<386=387
<387=389,388
<389=390
<390=392,391
<393=394
<394=403,395
<395=401,396
<396=399,397
<397=398
<399=400
<401=402
<404=414,405
<405=410,406
<406=407
<407=409,408
<410=411
<411=413,412
<414=415
<415=417,416
<417=419,418
<420=421
<421=423,422
<423=425,424
<426=427
<427=429,428
<430=431
<431=440,432
<432=439,433
<433=435,434
<435=436
<436=438,437
<441=442
<442=449,448,443
<443=447,444
<444=446,445
<450=451
<451=453,452
<454=457,455
<455=456
<457=458
<458=460,459
<460=462,461
<463=464
<464=473,465
<465=472,466
<466=468,467
<468=469
<469=471,470
<474=475
<475=477,476
<478=481,479
<479=480
<481=482
<482=489,483
<483=485,484
<485=486
<486=488,487
<490=491
<491=503,502,492
<492=501,493
<493=499,494
<494=497,495
<495=496
<497=498
<499=500
<504=505
<505=507,506
<526=535,534,527
<527=531,528
<528=530,529
<531=533,532
<535=536
<536=634,540,537
<537=538
<538=539
<540=620,541
<541=611,545,542
<542=543
<543=544
<545=597,546
<546=590,550,547
<547=548
<548=549
<550=576,551
<551=569,555,552
<552=553
<553=554
<555=562,558,556
<556=557
<558=559
<559=561,560
<562=563
<563=568,567,564
<564=566,565
<569=570
<570=572,571
<572=573
<573=575,574
<576=577
<577=589,588,578
<578=587,579
<579=585,580
<580=583,581
<581=582
<583=584
<585=586
<590=591
<591=593,592
<593=594
<594=596,595
<597=598
<598=610,609,599
<599=608,600
<600=606,601
<601=604,602
<602=603
<604=605
<606=607
<611=612
<612=619,613
<613=615,614
<615=616
<616=618,617
<620=621
<621=633,632,622
<622=631,623
<623=629,624
<624=627,625
<625=626
<627=628
<629=630
<634=635
<635=644,636
<636=643,637
<637=639,638
<639=640
<640=642,641
<662=671,670,663
<663=667,664
<664=666,665
<667=669,668
<671=713,709,698,674,672
<672=673
<674=691,675
<675=687,676
<676=677
<677=686,678
<678=684,679
<679=682,680
<680=681
<682=683
<684=685
<687=688
<688=690,689
<691=692
<692=694,693
<694=695
<695=697,696
<698=699
<699=708,700
<700=706,701
<701=704,702
<702=703
<704=705
<706=707
<709=710
<710=712,711
<713=714
<714=716,715
<726=735,734,727
<727=731,728
<728=730,729
<731=733,732
<735=736
<736=805,740,737
<737=738
<738=739
<740=796,782,768,741
<741=761,745,742
<742=743
<743=744
<745=756,752,748,746
<746=747
<748=749
<749=751,750
<752=753
<753=755,754
<756=757
<757=760,759,758
<761=762
<762=764,763
<764=765
<765=767,766
<768=769
<769=781,780,770
<770=779,771
<771=777,772
<772=775,773
<773=774
<775=776
<777=778
<782=783
<783=795,794,784
<784=793,785
<785=791,786
<786=789,787
<787=788
<789=790
<791=792
<796=797
<797=804,803,798
<798=802,799
<799=801,800
<805=806
<806=808,807
<808=810,809
<826=835,834,827
<827=831,828
<828=830,829
<831=833,832
<835=836
<836=947,840,837
<837=838
<838=839
<840=940,901,892,888,871,865,841
<841=859,845,842
<842=843
<843=844
<845=848,846
<846=847
<848=849
<849=858,850
<850=856,851
<851=854,852
<852=853
<854=855
<856=857
<859=860
<860=862,861
<862=864,863
<865=866
<866=870,867
<867=869,868
<871=872
<872=884,873
<873=882,878,874
<874=875
<875=877,876
<878=879
<879=881,880
<882=883
<884=885
<885=887,886
<888=889
<889=891,890
<892=895,893
<893=894
<895=896
<896=898,897
<898=900,899
<901=934,907,902
<902=903
<903=904
<904=906,905
<907=920,908
<908=911,909
<909=910
<911=912
<912=919,913
<913=915,914
<915=916
<916=918,917
<920=921
<921=933,932,922
<922=931,923
<923=929,924
<924=927,925
<925=926
<927=928
<929=930
<934=935
<935=937,936
<937=939,938
<940=941
<941=946,945,942
<942=944,943
<947=948
<948=957,949
<949=956,950
<950=952,951
<952=953
<953=955,954
<975=984,983,976
<976=980,977
<977=979,978
<980=982,981
<984=985
<985=1075,989,986
<986=987
<987=988
<989=1064,1052,990
<990=1046,994,991
<991=992
<992=993
<994=1037,1026,1014,1009,1005,1001,997,995
<995=996
<997=998
<998=1000,999
<1001=1002
<1002=1004,1003
<1005=1006
<1006=1008,1007
<1009=1010
<1010=1013,1012,1011
<1014=1017,1015
<1015=1016
<1017=1018
<1018=1025,1019
<1019=1021,1020
<1021=1022
<1022=1024,1023
<1026=1027
<1027=1036,1028
<1028=1034,1029
<1029=1032,1030
<1030=1031
<1032=1033
<1034=1035
<1037=1038
<1038=1045,1044,1039
<1039=1043,1040
<1040=1042,1041
<1046=1047
<1047=1049,1048
<1049=1051,1050
<1052=1055,1053
<1053=1054
<1055=1056
<1056=1063,1057
<1057=1059,1058
<1059=1060
<1060=1062,1061
<1064=1065
<1065=1074,1066
<1066=1072,1067
<1067=1070,1068
<1068=1069
<1070=1071
<1072=1073
<1075=1076
<1076=1085,1077
<1077=1084,1078
<1078=1080,1079
<1080=1081
<1081=1083,1082
<1103=1112,1111,1104
<1104=1108,1105
<1105=1107,1106
<1108=1110,1109
<1112=1218,1214,1207,1196,1139,1127,1115,1113
<1113=1114
<1115=1120,1116
<1116=1117
<1117=1119,1118
<1120=1121
<1121=1123,1122
<1123=1124
<1124=1126,1125
<1127=1132,1128
<1128=1129
<1129=1131,1130
<1132=1133
<1133=1135,1134
<1135=1136
<1136=1138,1137
<1139=1172,1140
<1140=1168,1156,1152,1141
<1141=1142
<1142=1151,1143
<1143=1149,1144
<1144=1147,1145
<1145=1146
<1147=1148
<1149=1150
<1152=1153
<1153=1155,1154
<1156=1161,1157
<1157=1158
<1158=1160,1159
<1161=1162
<1162=1164,1163
<1164=1165
<1165=1167,1166
<1168=1169
<1169=1171,1170
<1172=1173
<1173=1191,1174
<1174=1185,1175
<1175=1184,1176
<1176=1183,1177
<1177=1179,1178
<1179=1180
<1180=1182,1181
<1185=1187,1186
<1187=1188
<1188=1190,1189
<1191=1193,1192
<1193=1195,1194
<1196=1197
<1197=1206,1198
<1198=1204,1199
<1199=1202,1200
<1200=1201
<1202=1203
<1204=1205
<1207=1208
<1208=1213,1212,1209
<1209=1211,1210
<1214=1215
<1215=1217,1216
<1218=1219
<1219=1221,1220
<1236=1245,1244,1237
<1237=1241,1238
<1238=1240,1239
<1241=1243,1242
<1245=1281,1270,1248,1246
<1246=1247
<1248=1261,1249
<1249=1250
<1250=1251
<1251=1260,1252
<1252=1258,1253
<1253=1256,1254
<1254=1255
<1256=1257
<1258=1259
<1261=1262
<1262=1269,1263
<1263=1265,1264
<1265=1266
<1266=1268,1267
<1270=1271
<1271=1280,1272
<1272=1278,1273
<1273=1276,1274
<1274=1275
<1276=1277
<1278=1279
<1281=1282
<1282=1284,1283
<1294=1303,1302,1295
<1295=1299,1296
<1296=1298,1297
<1299=1301,1300
<1303=1304
<1304=1407,1308,1305
<1305=1306
<1306=1307
<1308=1309
<1309=1401,1313,1310
<1310=1311
<1311=1312
<1313=1392,1354,1314
<1314=1348,1318,1315
<1315=1316
<1316=1317
<1318=1344,1327,1321,1319
<1319=1320
<1321=1322
<1322=1326,1323
<1323=1325,1324
<1327=1328
<1328=1340,1329
<1329=1338,1334,1330
<1330=1331
<1331=1333,1332
<1334=1335
<1335=1337,1336
<1338=1339
<1340=1341
<1341=1343,1342
<1344=1345
<1345=1347,1346
<1348=1349
<1349=1351,1350
<1351=1353,1352
<1354=1381,1355
<1355=1356
<1356=1370,1357
<1357=1359,1358
<1359=1360
<1360=1369,1361
<1361=1367,1362
<1362=1365,1363
<1363=1364
<1365=1366
<1367=1368
<1370=1371
<1371=1380,1372
<1372=1378,1373
<1373=1376,1374
<1374=1375
<1376=1377
<1378=1379
<1381=1382
<1382=1391,1383
<1383=1390,1384
<1384=1386,1385
<1386=1387
<1387=1389,1388
<1392=1393
<1393=1400,1399,1394
<1394=1398,1395
<1395=1397,1396
<1401=1402
<1402=1404,1403
<1404=1406,1405
<1407=1408
<1408=1417,1409
<1409=1416,1410
<1410=1412,1411
<1412=1413
<1413=1415,1414
<1433=1442,1441,1434
<1434=1438,1435
<1435=1437,1436
<1438=1440,1439
<1442=1443
<1443=1493,1447,1444
<1444=1445
<1445=1446
<1447=1484,1472,1468,1454,1450,1448
<1448=1449
<1450=1451
<1451=1453,1452
<1454=1457,1455
<1455=1456
<1457=1458
<1458=1467,1459
<1459=1465,1460
<1460=1463,1461
<1461=1462
<1463=1464
<1465=1466
<1468=1469
<1469=1471,1470
<1472=1482,1473
<1473=1481,1480,1479,1478,1476,1474
<1474=1475
<1476=1477
<1482=1483
<1484=1485
<1485=1492,1491,1486
<1486=1490,1487
<1487=1489,1488
<1493=1494
<1494=1503,1495
<1495=1502,1496
<1496=1498,1497
<1498=1499
<1499=1501,1500
<1515=1524,1523,1516
<1516=1520,1517
<1517=1519,1518
<1520=1522,1521
<1524=1643,1639,1632,1621,1564,1539,1527,1525
<1525=1526
<1527=1532,1528
<1528=1529
<1529=1531,1530
<1532=1533
<1533=1535,1534
<1535=1536
<1536=1538,1537
<1539=1557,1540
<1540=1545,1541
<1541=1542
<1542=1544,1543
<1545=1550,1546
<1546=1547
<1547=1549,1548
<1550=1551
<1551=1553,1552
<1553=1554
<1554=1556,1555
<1557=1558
<1558=1560,1559
<1560=1561
<1561=1563,1562
<1564=1597,1565
<1565=1593,1581,1577,1566
<1566=1567
<1567=1576,1568
<1568=1574,1569
<1569=1572,1570
<1570=1571
<1572=1573
<1574=1575
<1577=1578
<1578=1580,1579
<1581=1586,1582
<1582=1583
<1583=1585,1584
<1586=1587
<1587=1589,1588
<1589=1590
<1590=1592,1591
<1593=1594
<1594=1596,1595
<1597=1598
<1598=1611,1599
<1599=1606,1600
<1600=1602,1601
<1602=1603
<1603=1605,1604
<1606=1608,1607
<1608=1610,1609
<1611=1620,1612
<1612=1619,1613
<1613=1615,1614
<1615=1616
<1616=1618,1617
<1621=1622
<1622=1631,1623
<1623=1629,1624
<1624=1627,1625
<1625=1626
<1627=1628
<1629=1630
<1632=1633
<1633=1638,1637,1634
<1634=1636,1635
<1639=1640
<1640=1642,1641
<1643=1644
<1644=1646,1645
<1661=1670,1669,1662
<1662=1666,1663
<1663=1665,1664
<1666=1668,1667
<1670=1694,1673,1671
<1671=1672
<1673=1685,1674
<1674=1675
<1675=1684,1676
<1676=1682,1677
<1677=1680,1678
<1678=1679
<1680=1681
<1682=1683
<1685=1686
<1686=1693,1687
<1687=1689,1688
<1689=1690
<1690=1692,1691
<1694=1695
<1695=1707,1706,1696
<1696=1705,1697
<1697=1703,1698
<1698=1701,1699
<1699=1700
<1701=1702
<1703=1704
<1717=1726,1725,1718
<1718=1722,1719
<1719=1721,1720
<1722=1724,1723
<1726=1782,1771,1727
<1727=1767,1765,1728
<1728=1729
<1729=1761,1759,1730
<1730=1731
<1731=1755,1753,1732
<1732=1733
<1733=1744,1742,1734
<1734=1735
<1735=1738,1736
<1736=1737
<1738=1739
<1739=1741,1740
<1742=1743
<1744=1745
<1745=1751,1746
<1746=1749,1747
<1747=1748
<1749=1750
<1751=1752
<1753=1754
<1755=1756
<1756=1758,1757
<1759=1760
<1761=1762
<1762=1764,1763
<1765=1766
<1767=1768
<1768=1770,1769
<1771=1772
<1772=1781,1780,1773
<1773=1779,1774
<1774=1778,1775
<1775=1777,1776
<1782=1786,1783
<1783=1784
<1784=1785
<1786=1787
<1787=1796,1788
<1788=1795,1789
<1789=1791,1790
<1791=1792
<1792=1794,1793
<1808=1817,1816,1809
<1809=1813,1810
<1810=1812,1811
<1813=1815,1814
<1817=1846,1842,1820,1818
<1818=1819
<1820=1823,1821
<1821=1822
<1823=1831,1824
<1824=1829,1825
<1825=1826
<1826=1828,1827
<1829=1830
<1831=1832
<1832=1841,1833
<1833=1839,1834
<1834=1837,1835
<1835=1836
<1837=1838
<1839=1840
<1842=1843
<1843=1845,1844
<1846=1847
<1847=1849,1848
<1858=1867,1866,1859
<1859=1863,1860
<1860=1862,1861
<1863=1865,1864
<1867=1870,1868
<1868=1869
<1870=1894,1883,1880,1871
<1871=1874,1872
<1872=1873
<1874=1875
<1875=1877,1876
<1877=1879,1878
<1880=1882,1881
<1883=1884
<1884=1893,1885
<1885=1892,1886
<1886=1888,1887
<1888=1889
<1889=1891,1890
<1894=1895
<1895=1896
<1896=1901,1900,1897
<1897=1899,1898
<1911=1920,1919,1912
<1912=1916,1913
<1913=1915,1914
<1916=1918,1917
<1920=1921
<1921=1922
<1922=1928,1923
<1923=1926,1924
<1924=1925
<1926=1927
<1928=1929
<1936=1945,1944,1937
<1937=1941,1938
<1938=1940,1939
<1941=1943,1942
<1945=1946
<1946=1991,1950,1947
<1947=1948
<1948=1949
<1950=1982,1971,1967,1953,1951
<1951=1952
<1953=1956,1954
<1954=1955
<1956=1957
<1957=1966,1958
<1958=1964,1959
<1959=1962,1960
<1960=1961
<1962=1963
<1964=1965
<1967=1968
<1968=1970,1969
<1971=1980,1972
<1972=1979,1978,1977,1975,1973
<1973=1974
<1975=1976
<1980=1981
<1982=1983
<1983=1990,1989,1984
<1984=1988,1985
<1985=1987,1986
<1991=1992
<1992=2001,1993
<1993=2000,1994
<1994=1996,1995
<1996=1997
<1997=1999,1998
<2013=2022,2021,2014
<2014=2018,2015
<2015=2017,2016
<2018=2020,2019
<2022=2023
<2023=2084,2027,2024
<2024=2025
<2025=2026
<2027=2077,2058,2049,2028
<2028=2041,2032,2029
<2029=2030
<2030=2031
<2032=2035,2033
<2033=2034
<2035=2036
<2036=2040,2037
<2037=2039,2038
<2041=2042
<2042=2046,2043
<2043=2045,2044
<2046=2048,2047
<2049=2050
<2050=2057,2056,2051
<2051=2055,2052
<2052=2054,2053
<2058=2063,2059
<2059=2060
<2060=2062,2061
<2063=2064
<2064=2072,2065
<2065=2067,2066
<2067=2071,2068
<2068=2070,2069
<2072=2074,2073
<2074=2076,2075
<2077=2078
<2078=2083,2082,2079
<2079=2081,2080
<2084=2085
<2085=2094,2086
<2086=2093,2087
<2087=2089,2088
<2089=2090
<2090=2092,2091
<2107=2116,2115,2108
<2108=2112,2109
<2109=2111,2110
<2112=2114,2113
<2116=2117
<2117=2228,2121,2118
<2118=2119
<2119=2120
<2121=2221,2122
<2122=2215,2126,2123
<2123=2124
<2124=2125
<2126=2211,2167,2127
<2127=2161,2131,2128
<2128=2129
<2129=2130
<2131=2157,2140,2134,2132
<2132=2133
<2134=2135
<2135=2139,2136
<2136=2138,2137
<2140=2141
<2141=2153,2142
<2142=2151,2147,2143
<2143=2144
<2144=2146,2145
<2147=2148
<2148=2150,2149
<2151=2152
<2153=2154
<2154=2156,2155
<2157=2158
<2158=2160,2159
<2161=2162
<2162=2164,2163
<2164=2166,2165
<2167=2200,2168
<2168=2169
<2169=2191,2187,2170
<2170=2171
<2171=2178,2174,2172
<2172=2173
<2174=2175
<2175=2177,2176
<2178=2179
<2179=2185,2180
<2180=2183,2181
<2181=2182
<2183=2184
<2185=2186
<2187=2188
<2188=2190,2189
<2191=2192
<2192=2198,2193
<2193=2196,2194
<2194=2195
<2196=2197
<2198=2199
<2200=2201
<2201=2210,2202
<2202=2209,2203
<2203=2205,2204
<2205=2206
<2206=2208,2207
<2211=2212
<2212=2214,2213
<2215=2216
<2216=2218,2217
<2218=2220,2219
<2221=2222
<2222=2227,2226,2223
<2223=2225,2224
<2228=2229
<2229=2238,2230
<2230=2237,2231
<2231=2233,2232
<2233=2234
<2234=2236,2235
<2253=2262,2261,2254
<2254=2258,2255
<2255=2257,2256
<2258=2260,2259
<2262=2263
<2263=2287,2267,2264
<2264=2265
<2265=2266
<2267=2268
<2268=2281,2272,2269
<2269=2270
<2270=2271
<2272=2277,2273
<2273=2274
<2274=2276,2275
<2277=2278
<2278=2280,2279
<2281=2282
<2282=2284,2283
<2284=2286,2285
<2287=2288
<2288=2297,2289
<2289=2296,2290
<2290=2292,2291
<2292=2293
<2293=2295,2294
