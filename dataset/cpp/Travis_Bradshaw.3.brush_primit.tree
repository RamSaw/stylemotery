>3	FunctionDef	SarrusDet (vec3_t a , vec3_t b , vec3_t c)
>4	ParameterList	vec3_t a , vec3_t b , vec3_t c
>5	Parameter	 
>6	Identifier	c
>7	ParameterType	vec3_t
>8	Parameter	 
>9	Identifier	b
>10	ParameterType	vec3_t
>11	Parameter	 
>12	Identifier	a
>13	ParameterType	vec3_t
>14	ReturnType	vec_t
>15	CompoundStatement	 
>16	ReturnStatement	 
>17	AdditiveExpression	a [ 0 ] * b [ 1 ] * c [ 2 ] + b [ 0 ] * c [ 1 ] * a [ 2 ] + c [ 0 ] * a [ 1 ] * b [ 2 ] - c [ 0 ] * b [ \
>18	AdditiveExpression	b [ 0 ] * c [ 1 ] * a [ 2 ] + c [ 0 ] * a [ 1 ] * b [ 2 ] - c [ 0 ] * b [ 1 ] * a [ 2 ] - a [ 1 ] * b [ \
>19	AdditiveExpression	c [ 0 ] * a [ 1 ] * b [ 2 ] - c [ 0 ] * b [ 1 ] * a [ 2 ] - a [ 1 ] * b [ 0 ] * c [ 2 ] - a [ 0 ] * b [ \
>20	AdditiveExpression	c [ 0 ] * b [ 1 ] * a [ 2 ] - a [ 1 ] * b [ 0 ] * c [ 2 ] - a [ 0 ] * b [ 2 ] * c [ 1 ]
>21	AdditiveExpression	a [ 1 ] * b [ 0 ] * c [ 2 ] - a [ 0 ] * b [ 2 ] * c [ 1 ]
>22	MultiplicativeExpression	a [ 0 ] * b [ 2 ] * c [ 1 ]
>23	MultiplicativeExpression	b [ 2 ] * c [ 1 ]
>24	ArrayIndexing	c [ 1 ]
>25	PrimaryExpression	1
>26	Identifier	c
>27	ArrayIndexing	b [ 2 ]
>28	PrimaryExpression	2
>29	Identifier	b
>30	ArrayIndexing	a [ 0 ]
>31	PrimaryExpression	0
>32	Identifier	a
>33	MultiplicativeExpression	a [ 1 ] * b [ 0 ] * c [ 2 ]
>34	MultiplicativeExpression	b [ 0 ] * c [ 2 ]
>35	ArrayIndexing	c [ 2 ]
>36	PrimaryExpression	2
>37	Identifier	c
>38	ArrayIndexing	b [ 0 ]
>39	PrimaryExpression	0
>40	Identifier	b
>41	ArrayIndexing	a [ 1 ]
>42	PrimaryExpression	1
>43	Identifier	a
>44	MultiplicativeExpression	c [ 0 ] * b [ 1 ] * a [ 2 ]
>45	MultiplicativeExpression	b [ 1 ] * a [ 2 ]
>46	ArrayIndexing	a [ 2 ]
>47	PrimaryExpression	2
>48	Identifier	a
>49	ArrayIndexing	b [ 1 ]
>50	PrimaryExpression	1
>51	Identifier	b
>52	ArrayIndexing	c [ 0 ]
>53	PrimaryExpression	0
>54	Identifier	c
>55	MultiplicativeExpression	c [ 0 ] * a [ 1 ] * b [ 2 ]
>56	MultiplicativeExpression	a [ 1 ] * b [ 2 ]
>57	ArrayIndexing	b [ 2 ]
>58	PrimaryExpression	2
>59	Identifier	b
>60	ArrayIndexing	a [ 1 ]
>61	PrimaryExpression	1
>62	Identifier	a
>63	ArrayIndexing	c [ 0 ]
>64	PrimaryExpression	0
>65	Identifier	c
>66	MultiplicativeExpression	b [ 0 ] * c [ 1 ] * a [ 2 ]
>67	MultiplicativeExpression	c [ 1 ] * a [ 2 ]
>68	ArrayIndexing	a [ 2 ]
>69	PrimaryExpression	2
>70	Identifier	a
>71	ArrayIndexing	c [ 1 ]
>72	PrimaryExpression	1
>73	Identifier	c
>74	ArrayIndexing	b [ 0 ]
>75	PrimaryExpression	0
>76	Identifier	b
>77	MultiplicativeExpression	a [ 0 ] * b [ 1 ] * c [ 2 ]
>78	MultiplicativeExpression	b [ 1 ] * c [ 2 ]
>79	ArrayIndexing	c [ 2 ]
>80	PrimaryExpression	2
>81	Identifier	c
>82	ArrayIndexing	b [ 1 ]
>83	PrimaryExpression	1
>84	Identifier	b
>85	ArrayIndexing	a [ 0 ]
>86	PrimaryExpression	0
>87	Identifier	a
>97	FunctionDef	ComputeAxisBase (vec3_t normal , vec3_t texS , vec3_t texT)
>98	ParameterList	vec3_t normal , vec3_t texS , vec3_t texT
>99	Parameter	 
>100	Identifier	texT
>101	ParameterType	vec3_t
>102	Parameter	 
>103	Identifier	texS
>104	ParameterType	vec3_t
>105	Parameter	 
>106	Identifier	normal
>107	ParameterType	vec3_t
>108	ReturnType	void
>109	CompoundStatement	 
>110	ExpressionStatement	 
>111	AssignmentExpr	texT [ 2 ] = - cos ( RotY )
>112	UnaryOp	- cos ( RotY )
>113	CallExpression	cos ( RotY )
>114	ArgumentList	RotY
>115	Argument	RotY
>116	Identifier	RotY
>117	Callee	cos
>118	Identifier	cos
>119	UnaryOperator	-
>120	ArrayIndexing	texT [ 2 ]
>121	PrimaryExpression	2
>122	Identifier	texT
>123	ExpressionStatement	 
>124	AssignmentExpr	texT [ 1 ] = - sin ( RotY ) * sin ( RotZ )
>125	MultiplicativeExpression	- sin ( RotY ) * sin ( RotZ )
>126	CallExpression	sin ( RotZ )
>127	ArgumentList	RotZ
>128	Argument	RotZ
>129	Identifier	RotZ
>130	Callee	sin
>131	Identifier	sin
>132	UnaryOp	- sin ( RotY )
>133	CallExpression	sin ( RotY )
>134	ArgumentList	RotY
>135	Argument	RotY
>136	Identifier	RotY
>137	Callee	sin
>138	Identifier	sin
>139	UnaryOperator	-
>140	ArrayIndexing	texT [ 1 ]
>141	PrimaryExpression	1
>142	Identifier	texT
>143	ExpressionStatement	 
>144	AssignmentExpr	texT [ 0 ] = - sin ( RotY ) * cos ( RotZ )
>145	MultiplicativeExpression	- sin ( RotY ) * cos ( RotZ )
>146	CallExpression	cos ( RotZ )
>147	ArgumentList	RotZ
>148	Argument	RotZ
>149	Identifier	RotZ
>150	Callee	cos
>151	Identifier	cos
>152	UnaryOp	- sin ( RotY )
>153	CallExpression	sin ( RotY )
>154	ArgumentList	RotY
>155	Argument	RotY
>156	Identifier	RotY
>157	Callee	sin
>158	Identifier	sin
>159	UnaryOperator	-
>160	ArrayIndexing	texT [ 0 ]
>161	PrimaryExpression	0
>162	Identifier	texT
>163	ExpressionStatement	 
>164	AssignmentExpr	texS [ 2 ] = 0
>165	PrimaryExpression	0
>166	ArrayIndexing	texS [ 2 ]
>167	PrimaryExpression	2
>168	Identifier	texS
>169	ExpressionStatement	 
>170	AssignmentExpr	texS [ 1 ] = cos ( RotZ )
>171	CallExpression	cos ( RotZ )
>172	ArgumentList	RotZ
>173	Argument	RotZ
>174	Identifier	RotZ
>175	Callee	cos
>176	Identifier	cos
>177	ArrayIndexing	texS [ 1 ]
>178	PrimaryExpression	1
>179	Identifier	texS
>180	ExpressionStatement	 
>181	AssignmentExpr	texS [ 0 ] = - sin ( RotZ )
>182	UnaryOp	- sin ( RotZ )
>183	CallExpression	sin ( RotZ )
>184	ArgumentList	RotZ
>185	Argument	RotZ
>186	Identifier	RotZ
>187	Callee	sin
>188	Identifier	sin
>189	UnaryOperator	-
>190	ArrayIndexing	texS [ 0 ]
>191	PrimaryExpression	0
>192	Identifier	texS
>193	ExpressionStatement	 
>194	AssignmentExpr	RotZ = atan2 ( normal [ 1 ] , normal [ 0 ] )
>195	CallExpression	atan2 ( normal [ 1 ] , normal [ 0 ] )
>196	ArgumentList	normal [ 1 ]
>197	Argument	normal [ 0 ]
>198	ArrayIndexing	normal [ 0 ]
>199	PrimaryExpression	0
>200	Identifier	normal
>201	Argument	normal [ 1 ]
>202	ArrayIndexing	normal [ 1 ]
>203	PrimaryExpression	1
>204	Identifier	normal
>205	Callee	atan2
>206	Identifier	atan2
>207	Identifier	RotZ
>208	ExpressionStatement	 
>209	AssignmentExpr	RotY = - atan2 ( normal [ 2 ] , sqrt ( normal [ 1 ] * normal [ 1 ] + normal [ 0 ] * normal [ 0 ] ) )
>210	UnaryOp	- atan2 ( normal [ 2 ] , sqrt ( normal [ 1 ] * normal [ 1 ] + normal [ 0 ] * normal [ 0 ] ) )
>211	CallExpression	atan2 ( normal [ 2 ] , sqrt ( normal [ 1 ] * normal [ 1 ] + normal [ 0 ] * normal [ 0 ] ) )
>212	ArgumentList	normal [ 2 ]
>213	Argument	sqrt ( normal [ 1 ] * normal [ 1 ] + normal [ 0 ] * normal [ 0 ] )
>214	CallExpression	sqrt ( normal [ 1 ] * normal [ 1 ] + normal [ 0 ] * normal [ 0 ] )
>215	ArgumentList	normal [ 1 ] * normal [ 1 ] + normal [ 0 ] * normal [ 0 ]
>216	Argument	normal [ 1 ] * normal [ 1 ] + normal [ 0 ] * normal [ 0 ]
>217	AdditiveExpression	normal [ 1 ] * normal [ 1 ] + normal [ 0 ] * normal [ 0 ]
>218	MultiplicativeExpression	normal [ 0 ] * normal [ 0 ]
>219	ArrayIndexing	normal [ 0 ]
>220	PrimaryExpression	0
>221	Identifier	normal
>222	ArrayIndexing	normal [ 0 ]
>223	PrimaryExpression	0
>224	Identifier	normal
>225	MultiplicativeExpression	normal [ 1 ] * normal [ 1 ]
>226	ArrayIndexing	normal [ 1 ]
>227	PrimaryExpression	1
>228	Identifier	normal
>229	ArrayIndexing	normal [ 1 ]
>230	PrimaryExpression	1
>231	Identifier	normal
>232	Callee	sqrt
>233	Identifier	sqrt
>234	Argument	normal [ 2 ]
>235	ArrayIndexing	normal [ 2 ]
>236	PrimaryExpression	2
>237	Identifier	normal
>238	Callee	atan2
>239	Identifier	atan2
>240	UnaryOperator	-
>241	Identifier	RotY
>242	IfStatement	if ( fabs ( normal [ 2 ] ) < 1e-6 )
>243	ExpressionStatement	 
>244	AssignmentExpr	normal [ 2 ] = 0.0f
>245	PrimaryExpression	0.0f
>246	ArrayIndexing	normal [ 2 ]
>247	PrimaryExpression	2
>248	Identifier	normal
>249	Condition	 
>250	RelationalExpression	fabs ( normal [ 2 ] ) < 1e-6
>251	PrimaryExpression	1e-6
>252	CallExpression	fabs ( normal [ 2 ] )
>253	ArgumentList	normal [ 2 ]
>254	Argument	normal [ 2 ]
>255	ArrayIndexing	normal [ 2 ]
>256	PrimaryExpression	2
>257	Identifier	normal
>258	Callee	fabs
>259	Identifier	fabs
>260	IfStatement	if ( fabs ( normal [ 1 ] ) < 1e-6 )
>261	ExpressionStatement	 
>262	AssignmentExpr	normal [ 1 ] = 0.0f
>263	PrimaryExpression	0.0f
>264	ArrayIndexing	normal [ 1 ]
>265	PrimaryExpression	1
>266	Identifier	normal
>267	Condition	 
>268	RelationalExpression	fabs ( normal [ 1 ] ) < 1e-6
>269	PrimaryExpression	1e-6
>270	CallExpression	fabs ( normal [ 1 ] )
>271	ArgumentList	normal [ 1 ]
>272	Argument	normal [ 1 ]
>273	ArrayIndexing	normal [ 1 ]
>274	PrimaryExpression	1
>275	Identifier	normal
>276	Callee	fabs
>277	Identifier	fabs
>278	IfStatement	if ( fabs ( normal [ 0 ] ) < 1e-6 )
>279	ExpressionStatement	 
>280	AssignmentExpr	normal [ 0 ] = 0.0f
>281	PrimaryExpression	0.0f
>282	ArrayIndexing	normal [ 0 ]
>283	PrimaryExpression	0
>284	Identifier	normal
>285	Condition	 
>286	RelationalExpression	fabs ( normal [ 0 ] ) < 1e-6
>287	PrimaryExpression	1e-6
>288	CallExpression	fabs ( normal [ 0 ] )
>289	ArgumentList	normal [ 0 ]
>290	Argument	normal [ 0 ]
>291	ArrayIndexing	normal [ 0 ]
>292	PrimaryExpression	0
>293	Identifier	normal
>294	Callee	fabs
>295	Identifier	fabs
>296	IdentifierDeclStatement	 
>297	IdentifierDecl	RotZ
>298	Identifier	RotZ
>299	IdentifierDeclType	vec_t
>300	IdentifierDecl	RotY
>301	Identifier	RotY
>302	IdentifierDeclType	vec_t
>319	FunctionDef	FaceToBrushPrimitFace (face_t * f)
>320	ParameterList	face_t * f
>321	Parameter	 
>322	Identifier	f
>323	ParameterType	face_t *
>324	ReturnType	void
>325	CompoundStatement	 
>326	ExpressionStatement	 
>327	AssignmentExpr	f -> brushprimit_texdef . coords [ 1 ] [ 1 ] = ST [ 2 ] [ 4 ] - f -> brushprimit_texdef . coords [ 1 ] [ \
>328	AdditiveExpression	ST [ 2 ] [ 4 ] - f -> brushprimit_texdef . coords [ 1 ] [ 2 ]
>329	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 2 ]
>330	PrimaryExpression	2
>331	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>332	PrimaryExpression	1
>333	MemberAccess	f -> brushprimit_texdef . coords
>334	Identifier	coords
>335	PtrMemberAccess	f -> brushprimit_texdef
>336	Identifier	brushprimit_texdef
>337	Identifier	f
>338	ArrayIndexing	ST [ 2 ] [ 4 ]
>339	PrimaryExpression	4
>340	ArrayIndexing	ST [ 2 ]
>341	PrimaryExpression	2
>342	Identifier	ST
>343	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 1 ]
>344	PrimaryExpression	1
>345	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>346	PrimaryExpression	1
>347	MemberAccess	f -> brushprimit_texdef . coords
>348	Identifier	coords
>349	PtrMemberAccess	f -> brushprimit_texdef
>350	Identifier	brushprimit_texdef
>351	Identifier	f
>352	ExpressionStatement	 
>353	AssignmentExpr	f -> brushprimit_texdef . coords [ 0 ] [ 1 ] = ST [ 2 ] [ 3 ] - f -> brushprimit_texdef . coords [ 0 ] [ \
>354	AdditiveExpression	ST [ 2 ] [ 3 ] - f -> brushprimit_texdef . coords [ 0 ] [ 2 ]
>355	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 2 ]
>356	PrimaryExpression	2
>357	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>358	PrimaryExpression	0
>359	MemberAccess	f -> brushprimit_texdef . coords
>360	Identifier	coords
>361	PtrMemberAccess	f -> brushprimit_texdef
>362	Identifier	brushprimit_texdef
>363	Identifier	f
>364	ArrayIndexing	ST [ 2 ] [ 3 ]
>365	PrimaryExpression	3
>366	ArrayIndexing	ST [ 2 ]
>367	PrimaryExpression	2
>368	Identifier	ST
>369	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 1 ]
>370	PrimaryExpression	1
>371	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>372	PrimaryExpression	0
>373	MemberAccess	f -> brushprimit_texdef . coords
>374	Identifier	coords
>375	PtrMemberAccess	f -> brushprimit_texdef
>376	Identifier	brushprimit_texdef
>377	Identifier	f
>378	ExpressionStatement	 
>379	AssignmentExpr	f -> brushprimit_texdef . coords [ 1 ] [ 0 ] = ST [ 1 ] [ 4 ] - f -> brushprimit_texdef . coords [ 1 ] [ \
>380	AdditiveExpression	ST [ 1 ] [ 4 ] - f -> brushprimit_texdef . coords [ 1 ] [ 2 ]
>381	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 2 ]
>382	PrimaryExpression	2
>383	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>384	PrimaryExpression	1
>385	MemberAccess	f -> brushprimit_texdef . coords
>386	Identifier	coords
>387	PtrMemberAccess	f -> brushprimit_texdef
>388	Identifier	brushprimit_texdef
>389	Identifier	f
>390	ArrayIndexing	ST [ 1 ] [ 4 ]
>391	PrimaryExpression	4
>392	ArrayIndexing	ST [ 1 ]
>393	PrimaryExpression	1
>394	Identifier	ST
>395	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 0 ]
>396	PrimaryExpression	0
>397	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>398	PrimaryExpression	1
>399	MemberAccess	f -> brushprimit_texdef . coords
>400	Identifier	coords
>401	PtrMemberAccess	f -> brushprimit_texdef
>402	Identifier	brushprimit_texdef
>403	Identifier	f
>404	ExpressionStatement	 
>405	AssignmentExpr	f -> brushprimit_texdef . coords [ 0 ] [ 0 ] = ST [ 1 ] [ 3 ] - f -> brushprimit_texdef . coords [ 0 ] [ \
>406	AdditiveExpression	ST [ 1 ] [ 3 ] - f -> brushprimit_texdef . coords [ 0 ] [ 2 ]
>407	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 2 ]
>408	PrimaryExpression	2
>409	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>410	PrimaryExpression	0
>411	MemberAccess	f -> brushprimit_texdef . coords
>412	Identifier	coords
>413	PtrMemberAccess	f -> brushprimit_texdef
>414	Identifier	brushprimit_texdef
>415	Identifier	f
>416	ArrayIndexing	ST [ 1 ] [ 3 ]
>417	PrimaryExpression	3
>418	ArrayIndexing	ST [ 1 ]
>419	PrimaryExpression	1
>420	Identifier	ST
>421	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 0 ]
>422	PrimaryExpression	0
>423	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>424	PrimaryExpression	0
>425	MemberAccess	f -> brushprimit_texdef . coords
>426	Identifier	coords
>427	PtrMemberAccess	f -> brushprimit_texdef
>428	Identifier	brushprimit_texdef
>429	Identifier	f
>430	ExpressionStatement	 
>431	AssignmentExpr	f -> brushprimit_texdef . coords [ 1 ] [ 2 ] = ST [ 0 ] [ 4 ]
>432	ArrayIndexing	ST [ 0 ] [ 4 ]
>433	PrimaryExpression	4
>434	ArrayIndexing	ST [ 0 ]
>435	PrimaryExpression	0
>436	Identifier	ST
>437	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 2 ]
>438	PrimaryExpression	2
>439	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>440	PrimaryExpression	1
>441	MemberAccess	f -> brushprimit_texdef . coords
>442	Identifier	coords
>443	PtrMemberAccess	f -> brushprimit_texdef
>444	Identifier	brushprimit_texdef
>445	Identifier	f
>446	ExpressionStatement	 
>447	AssignmentExpr	f -> brushprimit_texdef . coords [ 0 ] [ 2 ] = ST [ 0 ] [ 3 ]
>448	ArrayIndexing	ST [ 0 ] [ 3 ]
>449	PrimaryExpression	3
>450	ArrayIndexing	ST [ 0 ]
>451	PrimaryExpression	0
>452	Identifier	ST
>453	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 2 ]
>454	PrimaryExpression	2
>455	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>456	PrimaryExpression	0
>457	MemberAccess	f -> brushprimit_texdef . coords
>458	Identifier	coords
>459	PtrMemberAccess	f -> brushprimit_texdef
>460	Identifier	brushprimit_texdef
>461	Identifier	f
>462	ExpressionStatement	 
>463	CallExpression	EmitTextureCoordinates ( ST [ 2 ] , f -> d_texture , f )
>464	ArgumentList	ST [ 2 ]
>465	Argument	f
>466	Identifier	f
>467	Argument	f -> d_texture
>468	PtrMemberAccess	f -> d_texture
>469	Identifier	d_texture
>470	Identifier	f
>471	Argument	ST [ 2 ]
>472	ArrayIndexing	ST [ 2 ]
>473	PrimaryExpression	2
>474	Identifier	ST
>475	Callee	EmitTextureCoordinates
>476	Identifier	EmitTextureCoordinates
>477	ExpressionStatement	 
>478	CallExpression	VectorAdd ( ST [ 2 ] , proj , ST [ 2 ] )
>479	ArgumentList	ST [ 2 ]
>480	Argument	ST [ 2 ]
>481	ArrayIndexing	ST [ 2 ]
>482	PrimaryExpression	2
>483	Identifier	ST
>484	Argument	proj
>485	Identifier	proj
>486	Argument	ST [ 2 ]
>487	ArrayIndexing	ST [ 2 ]
>488	PrimaryExpression	2
>489	Identifier	ST
>490	Callee	VectorAdd
>491	Identifier	VectorAdd
>492	ExpressionStatement	 
>493	CallExpression	VectorCopy ( texY , ST [ 2 ] )
>494	ArgumentList	texY
>495	Argument	ST [ 2 ]
>496	ArrayIndexing	ST [ 2 ]
>497	PrimaryExpression	2
>498	Identifier	ST
>499	Argument	texY
>500	Identifier	texY
>501	Callee	VectorCopy
>502	Identifier	VectorCopy
>503	ExpressionStatement	 
>504	CallExpression	EmitTextureCoordinates ( ST [ 1 ] , f -> d_texture , f )
>505	ArgumentList	ST [ 1 ]
>506	Argument	f
>507	Identifier	f
>508	Argument	f -> d_texture
>509	PtrMemberAccess	f -> d_texture
>510	Identifier	d_texture
>511	Identifier	f
>512	Argument	ST [ 1 ]
>513	ArrayIndexing	ST [ 1 ]
>514	PrimaryExpression	1
>515	Identifier	ST
>516	Callee	EmitTextureCoordinates
>517	Identifier	EmitTextureCoordinates
>518	ExpressionStatement	 
>519	CallExpression	VectorAdd ( ST [ 1 ] , proj , ST [ 1 ] )
>520	ArgumentList	ST [ 1 ]
>521	Argument	ST [ 1 ]
>522	ArrayIndexing	ST [ 1 ]
>523	PrimaryExpression	1
>524	Identifier	ST
>525	Argument	proj
>526	Identifier	proj
>527	Argument	ST [ 1 ]
>528	ArrayIndexing	ST [ 1 ]
>529	PrimaryExpression	1
>530	Identifier	ST
>531	Callee	VectorAdd
>532	Identifier	VectorAdd
>533	ExpressionStatement	 
>534	CallExpression	VectorCopy ( texX , ST [ 1 ] )
>535	ArgumentList	texX
>536	Argument	ST [ 1 ]
>537	ArrayIndexing	ST [ 1 ]
>538	PrimaryExpression	1
>539	Identifier	ST
>540	Argument	texX
>541	Identifier	texX
>542	Callee	VectorCopy
>543	Identifier	VectorCopy
>544	ExpressionStatement	 
>545	CallExpression	EmitTextureCoordinates ( ST [ 0 ] , f -> d_texture , f )
>546	ArgumentList	ST [ 0 ]
>547	Argument	f
>548	Identifier	f
>549	Argument	f -> d_texture
>550	PtrMemberAccess	f -> d_texture
>551	Identifier	d_texture
>552	Identifier	f
>553	Argument	ST [ 0 ]
>554	ArrayIndexing	ST [ 0 ]
>555	PrimaryExpression	0
>556	Identifier	ST
>557	Callee	EmitTextureCoordinates
>558	Identifier	EmitTextureCoordinates
>559	ExpressionStatement	 
>560	CallExpression	VectorCopy ( proj , ST [ 0 ] )
>561	ArgumentList	proj
>562	Argument	ST [ 0 ]
>563	ArrayIndexing	ST [ 0 ]
>564	PrimaryExpression	0
>565	Identifier	ST
>566	Argument	proj
>567	Identifier	proj
>568	Callee	VectorCopy
>569	Identifier	VectorCopy
>570	ExpressionStatement	 
>571	CallExpression	VectorScale ( proj , f -> plane . dist , proj )
>572	ArgumentList	proj
>573	Argument	proj
>574	Identifier	proj
>575	Argument	f -> plane . dist
>576	MemberAccess	f -> plane . dist
>577	Identifier	dist
>578	PtrMemberAccess	f -> plane
>579	Identifier	plane
>580	Identifier	f
>581	Argument	proj
>582	Identifier	proj
>583	Callee	VectorScale
>584	Identifier	VectorScale
>585	ExpressionStatement	 
>586	CallExpression	VectorCopy ( f -> plane . normal , proj )
>587	ArgumentList	f -> plane . normal
>588	Argument	proj
>589	Identifier	proj
>590	Argument	f -> plane . normal
>591	MemberAccess	f -> plane . normal
>592	Identifier	normal
>593	PtrMemberAccess	f -> plane
>594	Identifier	plane
>595	Identifier	f
>596	Callee	VectorCopy
>597	Identifier	VectorCopy
>598	ExpressionStatement	 
>599	CallExpression	ComputeAxisBase ( f -> plane . normal , texX , texY )
>600	ArgumentList	f -> plane . normal
>601	Argument	texY
>602	Identifier	texY
>603	Argument	texX
>604	Identifier	texX
>605	Argument	f -> plane . normal
>606	MemberAccess	f -> plane . normal
>607	Identifier	normal
>608	PtrMemberAccess	f -> plane
>609	Identifier	plane
>610	Identifier	f
>611	Callee	ComputeAxisBase
>612	Identifier	ComputeAxisBase
>613	IfStatement	if ( ! f -> d_texture )
>614	CompoundStatement	 
>615	ReturnStatement	 
>616	ExpressionStatement	 
>617	CallExpression	Sys_Printf ( \"Warning 
>618	ArgumentList	\"Warning 
>619	Argument	\"Warning 
>620	PrimaryExpression	\"Warning 
>621	Callee	Sys_Printf
>622	Identifier	Sys_Printf
>623	Condition	 
>624	UnaryOp	! f -> d_texture
>625	PtrMemberAccess	f -> d_texture
>626	Identifier	d_texture
>627	Identifier	f
>628	UnaryOperator	!
>629	IfStatement	if ( f -> plane . normal [ 0 ] == 0.0f && f -> plane . normal [ 1 ] == 0.0f && f -> plane . normal [ 2 ] == 0.0f )
>630	CompoundStatement	 
>631	ExpressionStatement	 
>632	CallExpression	Sys_Printf ( \"Warning 
>633	ArgumentList	\"Warning 
>634	Argument	\"Warning 
>635	PrimaryExpression	\"Warning 
>636	Callee	Sys_Printf
>637	Identifier	Sys_Printf
>638	Condition	 
>639	AndExpression	f -> plane . normal [ 0 ] == 0.0f && f -> plane . normal [ 1 ] == 0.0f && f -> plane . normal [ 2 ] == \
>640	AndExpression	f -> plane . normal [ 1 ] == 0.0f && f -> plane . normal [ 2 ] == 0.0f
>641	EqualityExpression	f -> plane . normal [ 2 ] == 0.0f
>642	PrimaryExpression	0.0f
>643	ArrayIndexing	f -> plane . normal [ 2 ]
>644	PrimaryExpression	2
>645	MemberAccess	f -> plane . normal
>646	Identifier	normal
>647	PtrMemberAccess	f -> plane
>648	Identifier	plane
>649	Identifier	f
>650	EqualityExpression	f -> plane . normal [ 1 ] == 0.0f
>651	PrimaryExpression	0.0f
>652	ArrayIndexing	f -> plane . normal [ 1 ]
>653	PrimaryExpression	1
>654	MemberAccess	f -> plane . normal
>655	Identifier	normal
>656	PtrMemberAccess	f -> plane
>657	Identifier	plane
>658	Identifier	f
>659	EqualityExpression	f -> plane . normal [ 0 ] == 0.0f
>660	PrimaryExpression	0.0f
>661	ArrayIndexing	f -> plane . normal [ 0 ]
>662	PrimaryExpression	0
>663	MemberAccess	f -> plane . normal
>664	Identifier	normal
>665	PtrMemberAccess	f -> plane
>666	Identifier	plane
>667	Identifier	f
>668	ExpressionStatement	 
>669	ArrayIndexing	ST [ 3 ] [ 5 ]
>670	PrimaryExpression	5
>671	ArrayIndexing	ST [ 3 ]
>672	PrimaryExpression	3
>673	Identifier	ST
>674	Statement	 
>675	IdentifierDeclStatement	 
>676	IdentifierDecl	proj
>677	Identifier	proj
>678	IdentifierDeclType	vec3_t
>679	IdentifierDeclStatement	 
>680	IdentifierDecl	texY
>681	Identifier	texY
>682	IdentifierDeclType	vec3_t
>683	IdentifierDecl	texX
>684	Identifier	texX
>685	IdentifierDeclType	vec3_t
>711	FunctionDef	EmitBrushPrimitTextureCoordinates (face_t * f , winding_t * w)
>712	ParameterList	face_t * f , winding_t * w
>713	Parameter	 
>714	Identifier	w
>715	ParameterType	winding_t *
>716	Parameter	 
>717	Identifier	f
>718	ParameterType	face_t *
>719	ReturnType	void
>720	CompoundStatement	 
>721	ForStatement	for ( i = 0 ; i < w -> numpoints ; i ++ )
>722	CompoundStatement	 
>723	ExpressionStatement	 
>724	AssignmentExpr	w -> points [ i ] [ 4 ] = f -> brushprimit_texdef . coords [ 1 ] [ 0 ] * x + f -> brushprimit_texdef \
>725	AdditiveExpression	f -> brushprimit_texdef . coords [ 1 ] [ 0 ] * x + f -> brushprimit_texdef . coords [ 1 ] [ 1 ] * y + \
>726	AdditiveExpression	f -> brushprimit_texdef . coords [ 1 ] [ 1 ] * y + f -> brushprimit_texdef . coords [ 1 ] [ 2 ]
>727	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 2 ]
>728	PrimaryExpression	2
>729	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>730	PrimaryExpression	1
>731	MemberAccess	f -> brushprimit_texdef . coords
>732	Identifier	coords
>733	PtrMemberAccess	f -> brushprimit_texdef
>734	Identifier	brushprimit_texdef
>735	Identifier	f
>736	MultiplicativeExpression	f -> brushprimit_texdef . coords [ 1 ] [ 1 ] * y
>737	Identifier	y
>738	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 1 ]
>739	PrimaryExpression	1
>740	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>741	PrimaryExpression	1
>742	MemberAccess	f -> brushprimit_texdef . coords
>743	Identifier	coords
>744	PtrMemberAccess	f -> brushprimit_texdef
>745	Identifier	brushprimit_texdef
>746	Identifier	f
>747	MultiplicativeExpression	f -> brushprimit_texdef . coords [ 1 ] [ 0 ] * x
>748	Identifier	x
>749	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 0 ]
>750	PrimaryExpression	0
>751	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>752	PrimaryExpression	1
>753	MemberAccess	f -> brushprimit_texdef . coords
>754	Identifier	coords
>755	PtrMemberAccess	f -> brushprimit_texdef
>756	Identifier	brushprimit_texdef
>757	Identifier	f
>758	ArrayIndexing	w -> points [ i ] [ 4 ]
>759	PrimaryExpression	4
>760	ArrayIndexing	w -> points [ i ]
>761	Identifier	i
>762	PtrMemberAccess	w -> points
>763	Identifier	points
>764	Identifier	w
>765	ExpressionStatement	 
>766	AssignmentExpr	w -> points [ i ] [ 3 ] = f -> brushprimit_texdef . coords [ 0 ] [ 0 ] * x + f -> brushprimit_texdef \
>767	AdditiveExpression	f -> brushprimit_texdef . coords [ 0 ] [ 0 ] * x + f -> brushprimit_texdef . coords [ 0 ] [ 1 ] * y + \
>768	AdditiveExpression	f -> brushprimit_texdef . coords [ 0 ] [ 1 ] * y + f -> brushprimit_texdef . coords [ 0 ] [ 2 ]
>769	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 2 ]
>770	PrimaryExpression	2
>771	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>772	PrimaryExpression	0
>773	MemberAccess	f -> brushprimit_texdef . coords
>774	Identifier	coords
>775	PtrMemberAccess	f -> brushprimit_texdef
>776	Identifier	brushprimit_texdef
>777	Identifier	f
>778	MultiplicativeExpression	f -> brushprimit_texdef . coords [ 0 ] [ 1 ] * y
>779	Identifier	y
>780	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 1 ]
>781	PrimaryExpression	1
>782	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>783	PrimaryExpression	0
>784	MemberAccess	f -> brushprimit_texdef . coords
>785	Identifier	coords
>786	PtrMemberAccess	f -> brushprimit_texdef
>787	Identifier	brushprimit_texdef
>788	Identifier	f
>789	MultiplicativeExpression	f -> brushprimit_texdef . coords [ 0 ] [ 0 ] * x
>790	Identifier	x
>791	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 0 ]
>792	PrimaryExpression	0
>793	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>794	PrimaryExpression	0
>795	MemberAccess	f -> brushprimit_texdef . coords
>796	Identifier	coords
>797	PtrMemberAccess	f -> brushprimit_texdef
>798	Identifier	brushprimit_texdef
>799	Identifier	f
>800	ArrayIndexing	w -> points [ i ] [ 3 ]
>801	PrimaryExpression	3
>802	ArrayIndexing	w -> points [ i ]
>803	Identifier	i
>804	PtrMemberAccess	w -> points
>805	Identifier	points
>806	Identifier	w
>807	IfStatement	if ( g_qeglobals . bNeedConvert )
>808	CompoundStatement	 
>809	IfStatement	if ( fabs ( S - w -> points [ i ] [ 3 ] ) > 1e-2 || fabs ( T - w -> points [ i ] [ 4 ] ) > 1e-2 )
>810	CompoundStatement	 
>811	IfStatement	if ( fabs ( S - w -> points [ i ] [ 3 ] ) > 1e-4 || fabs ( T - w -> points [ i ] [ 4 ] ) > 1e-4 )
>812	ElseStatement	else
>813	ExpressionStatement	 
>814	CallExpression	Sys_Printf ( \"Warning 
>815	ArgumentList	\"Warning 
>816	Argument	\"Warning 
>817	PrimaryExpression	\"Warning 
>818	Callee	Sys_Printf
>819	Identifier	Sys_Printf
>820	ExpressionStatement	 
>821	CallExpression	Sys_Printf ( \"Warning 
>822	ArgumentList	\"Warning 
>823	Argument	\"Warning 
>824	PrimaryExpression	\"Warning 
>825	Callee	Sys_Printf
>826	Identifier	Sys_Printf
>827	Condition	 
>828	OrExpression	fabs ( S - w -> points [ i ] [ 3 ] ) > 1e-4 || fabs ( T - w -> points [ i ] [ 4 ] ) > 1e-4
>829	RelationalExpression	fabs ( T - w -> points [ i ] [ 4 ] ) > 1e-4
>830	PrimaryExpression	1e-4
>831	CallExpression	fabs ( T - w -> points [ i ] [ 4 ] )
>832	ArgumentList	T - w -> points [ i ] [ 4 ]
>833	Argument	T - w -> points [ i ] [ 4 ]
>834	AdditiveExpression	T - w -> points [ i ] [ 4 ]
>835	ArrayIndexing	w -> points [ i ] [ 4 ]
>836	PrimaryExpression	4
>837	ArrayIndexing	w -> points [ i ]
>838	Identifier	i
>839	PtrMemberAccess	w -> points
>840	Identifier	points
>841	Identifier	w
>842	Identifier	T
>843	Callee	fabs
>844	Identifier	fabs
>845	RelationalExpression	fabs ( S - w -> points [ i ] [ 3 ] ) > 1e-4
>846	PrimaryExpression	1e-4
>847	CallExpression	fabs ( S - w -> points [ i ] [ 3 ] )
>848	ArgumentList	S - w -> points [ i ] [ 3 ]
>849	Argument	S - w -> points [ i ] [ 3 ]
>850	AdditiveExpression	S - w -> points [ i ] [ 3 ]
>851	ArrayIndexing	w -> points [ i ] [ 3 ]
>852	PrimaryExpression	3
>853	ArrayIndexing	w -> points [ i ]
>854	Identifier	i
>855	PtrMemberAccess	w -> points
>856	Identifier	points
>857	Identifier	w
>858	Identifier	S
>859	Callee	fabs
>860	Identifier	fabs
>861	Condition	 
>862	OrExpression	fabs ( S - w -> points [ i ] [ 3 ] ) > 1e-2 || fabs ( T - w -> points [ i ] [ 4 ] ) > 1e-2
>863	RelationalExpression	fabs ( T - w -> points [ i ] [ 4 ] ) > 1e-2
>864	PrimaryExpression	1e-2
>865	CallExpression	fabs ( T - w -> points [ i ] [ 4 ] )
>866	ArgumentList	T - w -> points [ i ] [ 4 ]
>867	Argument	T - w -> points [ i ] [ 4 ]
>868	AdditiveExpression	T - w -> points [ i ] [ 4 ]
>869	ArrayIndexing	w -> points [ i ] [ 4 ]
>870	PrimaryExpression	4
>871	ArrayIndexing	w -> points [ i ]
>872	Identifier	i
>873	PtrMemberAccess	w -> points
>874	Identifier	points
>875	Identifier	w
>876	Identifier	T
>877	Callee	fabs
>878	Identifier	fabs
>879	RelationalExpression	fabs ( S - w -> points [ i ] [ 3 ] ) > 1e-2
>880	PrimaryExpression	1e-2
>881	CallExpression	fabs ( S - w -> points [ i ] [ 3 ] )
>882	ArgumentList	S - w -> points [ i ] [ 3 ]
>883	Argument	S - w -> points [ i ] [ 3 ]
>884	AdditiveExpression	S - w -> points [ i ] [ 3 ]
>885	ArrayIndexing	w -> points [ i ] [ 3 ]
>886	PrimaryExpression	3
>887	ArrayIndexing	w -> points [ i ]
>888	Identifier	i
>889	PtrMemberAccess	w -> points
>890	Identifier	points
>891	Identifier	w
>892	Identifier	S
>893	Callee	fabs
>894	Identifier	fabs
>895	IdentifierDeclStatement	 
>896	IdentifierDecl	T = f -> brushprimit_texdef . coords [ 1 ] [ 0 ] * x + f -> brushprimit_texdef . coords [ 1 ] [ 1 ] * y + f -> brushprimit_\
>897	AssignmentExpr	T = f -> brushprimit_texdef . coords [ 1 ] [ 0 ] * x + f -> brushprimit_texdef . coords [ 1 ] [ 1 ] * \
>898	AdditiveExpression	f -> brushprimit_texdef . coords [ 1 ] [ 0 ] * x + f -> brushprimit_texdef . coords [ 1 ] [ 1 ] * y + \
>899	AdditiveExpression	f -> brushprimit_texdef . coords [ 1 ] [ 1 ] * y + f -> brushprimit_texdef . coords [ 1 ] [ 2 ]
>900	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 2 ]
>901	PrimaryExpression	2
>902	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>903	PrimaryExpression	1
>904	MemberAccess	f -> brushprimit_texdef . coords
>905	Identifier	coords
>906	PtrMemberAccess	f -> brushprimit_texdef
>907	Identifier	brushprimit_texdef
>908	Identifier	f
>909	MultiplicativeExpression	f -> brushprimit_texdef . coords [ 1 ] [ 1 ] * y
>910	Identifier	y
>911	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 1 ]
>912	PrimaryExpression	1
>913	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>914	PrimaryExpression	1
>915	MemberAccess	f -> brushprimit_texdef . coords
>916	Identifier	coords
>917	PtrMemberAccess	f -> brushprimit_texdef
>918	Identifier	brushprimit_texdef
>919	Identifier	f
>920	MultiplicativeExpression	f -> brushprimit_texdef . coords [ 1 ] [ 0 ] * x
>921	Identifier	x
>922	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 0 ]
>923	PrimaryExpression	0
>924	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>925	PrimaryExpression	1
>926	MemberAccess	f -> brushprimit_texdef . coords
>927	Identifier	coords
>928	PtrMemberAccess	f -> brushprimit_texdef
>929	Identifier	brushprimit_texdef
>930	Identifier	f
>931	Identifier	T
>932	Identifier	T
>933	IdentifierDeclType	vec_t
>934	IdentifierDeclStatement	 
>935	IdentifierDecl	S = f -> brushprimit_texdef . coords [ 0 ] [ 0 ] * x + f -> brushprimit_texdef . coords [ 0 ] [ 1 ] * y + f -> brushprimit_\
>936	AssignmentExpr	S = f -> brushprimit_texdef . coords [ 0 ] [ 0 ] * x + f -> brushprimit_texdef . coords [ 0 ] [ 1 ] * \
>937	AdditiveExpression	f -> brushprimit_texdef . coords [ 0 ] [ 0 ] * x + f -> brushprimit_texdef . coords [ 0 ] [ 1 ] * y + \
>938	AdditiveExpression	f -> brushprimit_texdef . coords [ 0 ] [ 1 ] * y + f -> brushprimit_texdef . coords [ 0 ] [ 2 ]
>939	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 2 ]
>940	PrimaryExpression	2
>941	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>942	PrimaryExpression	0
>943	MemberAccess	f -> brushprimit_texdef . coords
>944	Identifier	coords
>945	PtrMemberAccess	f -> brushprimit_texdef
>946	Identifier	brushprimit_texdef
>947	Identifier	f
>948	MultiplicativeExpression	f -> brushprimit_texdef . coords [ 0 ] [ 1 ] * y
>949	Identifier	y
>950	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 1 ]
>951	PrimaryExpression	1
>952	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>953	PrimaryExpression	0
>954	MemberAccess	f -> brushprimit_texdef . coords
>955	Identifier	coords
>956	PtrMemberAccess	f -> brushprimit_texdef
>957	Identifier	brushprimit_texdef
>958	Identifier	f
>959	MultiplicativeExpression	f -> brushprimit_texdef . coords [ 0 ] [ 0 ] * x
>960	Identifier	x
>961	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 0 ]
>962	PrimaryExpression	0
>963	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>964	PrimaryExpression	0
>965	MemberAccess	f -> brushprimit_texdef . coords
>966	Identifier	coords
>967	PtrMemberAccess	f -> brushprimit_texdef
>968	Identifier	brushprimit_texdef
>969	Identifier	f
>970	Identifier	S
>971	Identifier	S
>972	IdentifierDeclType	vec_t
>973	Condition	 
>974	MemberAccess	g_qeglobals . bNeedConvert
>975	Identifier	bNeedConvert
>976	Identifier	g_qeglobals
>977	ExpressionStatement	 
>978	AssignmentExpr	y = DotProduct ( w -> points [ i ] , texY )
>979	CallExpression	DotProduct ( w -> points [ i ] , texY )
>980	ArgumentList	w -> points [ i ]
>981	Argument	texY
>982	Identifier	texY
>983	Argument	w -> points [ i ]
>984	ArrayIndexing	w -> points [ i ]
>985	Identifier	i
>986	PtrMemberAccess	w -> points
>987	Identifier	points
>988	Identifier	w
>989	Callee	DotProduct
>990	Identifier	DotProduct
>991	Identifier	y
>992	ExpressionStatement	 
>993	AssignmentExpr	x = DotProduct ( w -> points [ i ] , texX )
>994	CallExpression	DotProduct ( w -> points [ i ] , texX )
>995	ArgumentList	w -> points [ i ]
>996	Argument	texX
>997	Identifier	texX
>998	Argument	w -> points [ i ]
>999	ArrayIndexing	w -> points [ i ]
>1000	Identifier	i
>1001	PtrMemberAccess	w -> points
>1002	Identifier	points
>1003	Identifier	w
>1004	Callee	DotProduct
>1005	Identifier	DotProduct
>1006	Identifier	x
>1007	IncDecOp	 
>1008	IncDec	++
>1009	Identifier	i
>1010	Condition	 
>1011	RelationalExpression	i < w -> numpoints
>1012	PtrMemberAccess	w -> numpoints
>1013	Identifier	numpoints
>1014	Identifier	w
>1015	Identifier	i
>1016	ForInit	 
>1017	AssignmentExpr	i = 0
>1018	PrimaryExpression	0
>1019	Identifier	i
>1020	IdentifierDeclStatement	 
>1021	IdentifierDecl	i
>1022	Identifier	i
>1023	IdentifierDeclType	int
>1024	IfStatement	if ( f -> brushprimit_texdef . coords [ 0 ] [ 0 ] == 0 && f -> brushprimit_texdef . coords [ 1 ] [ 0 ] == 0 && f \
>1025	CompoundStatement	 
>1026	ExpressionStatement	 
>1027	CallExpression	ConvertTexMatWithQTexture ( & f -> brushprimit_texdef , NULL , & f -> brushprimit_texdef , f -> d_texture )
>1028	ArgumentList	& f -> brushprimit_texdef
>1029	Argument	f -> d_texture
>1030	PtrMemberAccess	f -> d_texture
>1031	Identifier	d_texture
>1032	Identifier	f
>1033	Argument	& f -> brushprimit_texdef
>1034	UnaryOp	& f -> brushprimit_texdef
>1035	PtrMemberAccess	f -> brushprimit_texdef
>1036	Identifier	brushprimit_texdef
>1037	Identifier	f
>1038	UnaryOperator	&
>1039	Argument	NULL
>1040	Identifier	NULL
>1041	Argument	& f -> brushprimit_texdef
>1042	UnaryOp	& f -> brushprimit_texdef
>1043	PtrMemberAccess	f -> brushprimit_texdef
>1044	Identifier	brushprimit_texdef
>1045	Identifier	f
>1046	UnaryOperator	&
>1047	Callee	ConvertTexMatWithQTexture
>1048	Identifier	ConvertTexMatWithQTexture
>1049	ExpressionStatement	 
>1050	AssignmentExpr	f -> brushprimit_texdef . coords [ 1 ] [ 1 ] = 1.0f
>1051	PrimaryExpression	1.0f
>1052	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 1 ]
>1053	PrimaryExpression	1
>1054	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>1055	PrimaryExpression	1
>1056	MemberAccess	f -> brushprimit_texdef . coords
>1057	Identifier	coords
>1058	PtrMemberAccess	f -> brushprimit_texdef
>1059	Identifier	brushprimit_texdef
>1060	Identifier	f
>1061	ExpressionStatement	 
>1062	AssignmentExpr	f -> brushprimit_texdef . coords [ 0 ] [ 0 ] = 1.0f
>1063	PrimaryExpression	1.0f
>1064	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 0 ]
>1065	PrimaryExpression	0
>1066	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>1067	PrimaryExpression	0
>1068	MemberAccess	f -> brushprimit_texdef . coords
>1069	Identifier	coords
>1070	PtrMemberAccess	f -> brushprimit_texdef
>1071	Identifier	brushprimit_texdef
>1072	Identifier	f
>1073	Condition	 
>1074	AndExpression	f -> brushprimit_texdef . coords [ 0 ] [ 0 ] == 0 && f -> brushprimit_texdef . coords [ 1 ] [ 0 ] == \
>1075	AndExpression	f -> brushprimit_texdef . coords [ 1 ] [ 0 ] == 0 && f -> brushprimit_texdef . coords [ 0 ] [ 1 ] == \
>1076	AndExpression	f -> brushprimit_texdef . coords [ 0 ] [ 1 ] == 0 && f -> brushprimit_texdef . coords [ 1 ] [ 1 ] == \
>1077	EqualityExpression	f -> brushprimit_texdef . coords [ 1 ] [ 1 ] == 0
>1078	PrimaryExpression	0
>1079	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 1 ]
>1080	PrimaryExpression	1
>1081	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>1082	PrimaryExpression	1
>1083	MemberAccess	f -> brushprimit_texdef . coords
>1084	Identifier	coords
>1085	PtrMemberAccess	f -> brushprimit_texdef
>1086	Identifier	brushprimit_texdef
>1087	Identifier	f
>1088	EqualityExpression	f -> brushprimit_texdef . coords [ 0 ] [ 1 ] == 0
>1089	PrimaryExpression	0
>1090	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 1 ]
>1091	PrimaryExpression	1
>1092	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>1093	PrimaryExpression	0
>1094	MemberAccess	f -> brushprimit_texdef . coords
>1095	Identifier	coords
>1096	PtrMemberAccess	f -> brushprimit_texdef
>1097	Identifier	brushprimit_texdef
>1098	Identifier	f
>1099	EqualityExpression	f -> brushprimit_texdef . coords [ 1 ] [ 0 ] == 0
>1100	PrimaryExpression	0
>1101	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 0 ]
>1102	PrimaryExpression	0
>1103	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>1104	PrimaryExpression	1
>1105	MemberAccess	f -> brushprimit_texdef . coords
>1106	Identifier	coords
>1107	PtrMemberAccess	f -> brushprimit_texdef
>1108	Identifier	brushprimit_texdef
>1109	Identifier	f
>1110	EqualityExpression	f -> brushprimit_texdef . coords [ 0 ] [ 0 ] == 0
>1111	PrimaryExpression	0
>1112	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 0 ]
>1113	PrimaryExpression	0
>1114	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>1115	PrimaryExpression	0
>1116	MemberAccess	f -> brushprimit_texdef . coords
>1117	Identifier	coords
>1118	PtrMemberAccess	f -> brushprimit_texdef
>1119	Identifier	brushprimit_texdef
>1120	Identifier	f
>1121	ExpressionStatement	 
>1122	CallExpression	ComputeAxisBase ( f -> plane . normal , texX , texY )
>1123	ArgumentList	f -> plane . normal
>1124	Argument	texY
>1125	Identifier	texY
>1126	Argument	texX
>1127	Identifier	texX
>1128	Argument	f -> plane . normal
>1129	MemberAccess	f -> plane . normal
>1130	Identifier	normal
>1131	PtrMemberAccess	f -> plane
>1132	Identifier	plane
>1133	Identifier	f
>1134	Callee	ComputeAxisBase
>1135	Identifier	ComputeAxisBase
>1136	IdentifierDeclStatement	 
>1137	IdentifierDecl	y
>1138	Identifier	y
>1139	IdentifierDeclType	vec_t
>1140	IdentifierDecl	x
>1141	Identifier	x
>1142	IdentifierDeclType	vec_t
>1143	IdentifierDeclStatement	 
>1144	IdentifierDecl	texY
>1145	Identifier	texY
>1146	IdentifierDeclType	vec3_t
>1147	IdentifierDecl	texX
>1148	Identifier	texX
>1149	IdentifierDeclType	vec3_t
>1190	FunctionDef	BrushPrimit_Parse (brush_t * b)
>1191	ParameterList	brush_t * b
>1192	Parameter	 
>1193	Identifier	b
>1194	ParameterType	brush_t *
>1195	ReturnType	void
>1196	CompoundStatement	 
>1197	DoStatement	do
>1198	Condition	 
>1199	PrimaryExpression	1
>1200	CompoundStatement	 
>1201	IfStatement	if ( strcmp ( token , \"(\" ) )
>1202	ElseStatement	else
>1203	CompoundStatement	 
>1204	IfStatement	if ( TokenAvailable ( ) )
>1205	CompoundStatement	 
>1206	ExpressionStatement	 
>1207	AssignmentExpr	f -> texdef . value = atoi ( token )
>1208	CallExpression	atoi ( token )
>1209	ArgumentList	token
>1210	Argument	token
>1211	Identifier	token
>1212	Callee	atoi
>1213	Identifier	atoi
>1214	MemberAccess	f -> texdef . value
>1215	Identifier	value
>1216	PtrMemberAccess	f -> texdef
>1217	Identifier	texdef
>1218	Identifier	f
>1219	ExpressionStatement	 
>1220	CallExpression	GetToken ( false )
>1221	ArgumentList	false
>1222	Argument	false
>1223	Identifier	false
>1224	Callee	GetToken
>1225	Identifier	GetToken
>1226	ExpressionStatement	 
>1227	AssignmentExpr	f -> texdef . flags = atoi ( token )
>1228	CallExpression	atoi ( token )
>1229	ArgumentList	token
>1230	Argument	token
>1231	Identifier	token
>1232	Callee	atoi
>1233	Identifier	atoi
>1234	MemberAccess	f -> texdef . flags
>1235	Identifier	flags
>1236	PtrMemberAccess	f -> texdef
>1237	Identifier	texdef
>1238	Identifier	f
>1239	ExpressionStatement	 
>1240	CallExpression	GetToken ( false )
>1241	ArgumentList	false
>1242	Argument	false
>1243	Identifier	false
>1244	Callee	GetToken
>1245	Identifier	GetToken
>1246	ExpressionStatement	 
>1247	AssignmentExpr	f -> texdef . contents = atoi ( token )
>1248	CallExpression	atoi ( token )
>1249	ArgumentList	token
>1250	Argument	token
>1251	Identifier	token
>1252	Callee	atoi
>1253	Identifier	atoi
>1254	MemberAccess	f -> texdef . contents
>1255	Identifier	contents
>1256	PtrMemberAccess	f -> texdef
>1257	Identifier	texdef
>1258	Identifier	f
>1259	ExpressionStatement	 
>1260	CallExpression	GetToken ( false )
>1261	ArgumentList	false
>1262	Argument	false
>1263	Identifier	false
>1264	Callee	GetToken
>1265	Identifier	GetToken
>1266	Condition	 
>1267	CallExpression	TokenAvailable ( )
>1268	ArgumentList	 
>1269	Callee	TokenAvailable
>1270	Identifier	TokenAvailable
>1271	ExpressionStatement	 
>1272	CallExpression	f -> texdef . SetName ( token )
>1273	ArgumentList	token
>1274	Argument	token
>1275	Identifier	token
>1276	Callee	f -> texdef . SetName
>1277	MemberAccess	f -> texdef . SetName
>1278	Identifier	SetName
>1279	PtrMemberAccess	f -> texdef
>1280	Identifier	texdef
>1281	Identifier	f
>1282	ExpressionStatement	 
>1283	CallExpression	GetToken ( false )
>1284	ArgumentList	false
>1285	Argument	false
>1286	Identifier	false
>1287	Callee	GetToken
>1288	Identifier	GetToken
>1289	IfStatement	if ( strcmp ( token , \")\" ) )
>1290	CompoundStatement	 
>1291	ReturnStatement	 
>1292	ExpressionStatement	 
>1293	CallExpression	Warning ( \"parsing brush primitive\" )
>1294	ArgumentList	\"parsing brush primitive\"
>1295	Argument	\"parsing brush primitive\"
>1296	PrimaryExpression	\"parsing brush primitive\"
>1297	Callee	Warning
>1298	Identifier	Warning
>1299	Condition	 
>1300	CallExpression	strcmp ( token , \")\" )
>1301	ArgumentList	token
>1302	Argument	\")\"
>1303	PrimaryExpression	\")\"
>1304	Argument	token
>1305	Identifier	token
>1306	Callee	strcmp
>1307	Identifier	strcmp
>1308	ExpressionStatement	 
>1309	CallExpression	GetToken ( false )
>1310	ArgumentList	false
>1311	Argument	false
>1312	Identifier	false
>1313	Callee	GetToken
>1314	Identifier	GetToken
>1315	IfStatement	if ( strcmp ( token , \")\" ) )
>1316	CompoundStatement	 
>1317	ReturnStatement	 
>1318	ExpressionStatement	 
>1319	CallExpression	Warning ( \"parsing brush primitive\" )
>1320	ArgumentList	\"parsing brush primitive\"
>1321	Argument	\"parsing brush primitive\"
>1322	PrimaryExpression	\"parsing brush primitive\"
>1323	Callee	Warning
>1324	Identifier	Warning
>1325	Condition	 
>1326	CallExpression	strcmp ( token , \")\" )
>1327	ArgumentList	token
>1328	Argument	\")\"
>1329	PrimaryExpression	\")\"
>1330	Argument	token
>1331	Identifier	token
>1332	Callee	strcmp
>1333	Identifier	strcmp
>1334	ExpressionStatement	 
>1335	CallExpression	GetToken ( false )
>1336	ArgumentList	false
>1337	Argument	false
>1338	Identifier	false
>1339	Callee	GetToken
>1340	Identifier	GetToken
>1341	ForStatement	for ( j = 0 ; j < 3 ; j ++ )
>1342	CompoundStatement	 
>1343	ExpressionStatement	 
>1344	AssignmentExpr	f -> brushprimit_texdef . coords [ 1 ] [ j ] = atof ( token )
>1345	CallExpression	atof ( token )
>1346	ArgumentList	token
>1347	Argument	token
>1348	Identifier	token
>1349	Callee	atof
>1350	Identifier	atof
>1351	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ j ]
>1352	Identifier	j
>1353	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>1354	PrimaryExpression	1
>1355	MemberAccess	f -> brushprimit_texdef . coords
>1356	Identifier	coords
>1357	PtrMemberAccess	f -> brushprimit_texdef
>1358	Identifier	brushprimit_texdef
>1359	Identifier	f
>1360	ExpressionStatement	 
>1361	CallExpression	GetToken ( false )
>1362	ArgumentList	false
>1363	Argument	false
>1364	Identifier	false
>1365	Callee	GetToken
>1366	Identifier	GetToken
>1367	IncDecOp	 
>1368	IncDec	++
>1369	Identifier	j
>1370	Condition	 
>1371	RelationalExpression	j < 3
>1372	PrimaryExpression	3
>1373	Identifier	j
>1374	ForInit	 
>1375	AssignmentExpr	j = 0
>1376	PrimaryExpression	0
>1377	Identifier	j
>1378	IfStatement	if ( strcmp ( token , \"(\" ) )
>1379	CompoundStatement	 
>1380	ReturnStatement	 
>1381	ExpressionStatement	 
>1382	CallExpression	Warning ( \"parsing brush primitive\" )
>1383	ArgumentList	\"parsing brush primitive\"
>1384	Argument	\"parsing brush primitive\"
>1385	PrimaryExpression	\"parsing brush primitive\"
>1386	Callee	Warning
>1387	Identifier	Warning
>1388	Condition	 
>1389	CallExpression	strcmp ( token , \"(\" )
>1390	ArgumentList	token
>1391	Argument	\"(\"
>1392	PrimaryExpression	\"(\"
>1393	Argument	token
>1394	Identifier	token
>1395	Callee	strcmp
>1396	Identifier	strcmp
>1397	ExpressionStatement	 
>1398	CallExpression	GetToken ( false )
>1399	ArgumentList	false
>1400	Argument	false
>1401	Identifier	false
>1402	Callee	GetToken
>1403	Identifier	GetToken
>1404	IfStatement	if ( strcmp ( token , \")\" ) )
>1405	CompoundStatement	 
>1406	ReturnStatement	 
>1407	ExpressionStatement	 
>1408	CallExpression	Warning ( \"parsing brush primitive\" )
>1409	ArgumentList	\"parsing brush primitive\"
>1410	Argument	\"parsing brush primitive\"
>1411	PrimaryExpression	\"parsing brush primitive\"
>1412	Callee	Warning
>1413	Identifier	Warning
>1414	Condition	 
>1415	CallExpression	strcmp ( token , \")\" )
>1416	ArgumentList	token
>1417	Argument	\")\"
>1418	PrimaryExpression	\")\"
>1419	Argument	token
>1420	Identifier	token
>1421	Callee	strcmp
>1422	Identifier	strcmp
>1423	ExpressionStatement	 
>1424	CallExpression	GetToken ( false )
>1425	ArgumentList	false
>1426	Argument	false
>1427	Identifier	false
>1428	Callee	GetToken
>1429	Identifier	GetToken
>1430	ForStatement	for ( j = 0 ; j < 3 ; j ++ )
>1431	CompoundStatement	 
>1432	ExpressionStatement	 
>1433	AssignmentExpr	f -> brushprimit_texdef . coords [ 0 ] [ j ] = atof ( token )
>1434	CallExpression	atof ( token )
>1435	ArgumentList	token
>1436	Argument	token
>1437	Identifier	token
>1438	Callee	atof
>1439	Identifier	atof
>1440	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ j ]
>1441	Identifier	j
>1442	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>1443	PrimaryExpression	0
>1444	MemberAccess	f -> brushprimit_texdef . coords
>1445	Identifier	coords
>1446	PtrMemberAccess	f -> brushprimit_texdef
>1447	Identifier	brushprimit_texdef
>1448	Identifier	f
>1449	ExpressionStatement	 
>1450	CallExpression	GetToken ( false )
>1451	ArgumentList	false
>1452	Argument	false
>1453	Identifier	false
>1454	Callee	GetToken
>1455	Identifier	GetToken
>1456	IncDecOp	 
>1457	IncDec	++
>1458	Identifier	j
>1459	Condition	 
>1460	RelationalExpression	j < 3
>1461	PrimaryExpression	3
>1462	Identifier	j
>1463	ForInit	 
>1464	AssignmentExpr	j = 0
>1465	PrimaryExpression	0
>1466	Identifier	j
>1467	IfStatement	if ( strcmp ( token , \"(\" ) )
>1468	CompoundStatement	 
>1469	ReturnStatement	 
>1470	ExpressionStatement	 
>1471	CallExpression	Warning ( \"parsing brush primitive\" )
>1472	ArgumentList	\"parsing brush primitive\"
>1473	Argument	\"parsing brush primitive\"
>1474	PrimaryExpression	\"parsing brush primitive\"
>1475	Callee	Warning
>1476	Identifier	Warning
>1477	Condition	 
>1478	CallExpression	strcmp ( token , \"(\" )
>1479	ArgumentList	token
>1480	Argument	\"(\"
>1481	PrimaryExpression	\"(\"
>1482	Argument	token
>1483	Identifier	token
>1484	Callee	strcmp
>1485	Identifier	strcmp
>1486	ExpressionStatement	 
>1487	CallExpression	GetToken ( false )
>1488	ArgumentList	false
>1489	Argument	false
>1490	Identifier	false
>1491	Callee	GetToken
>1492	Identifier	GetToken
>1493	IfStatement	if ( strcmp ( token , \"(\" ) )
>1494	CompoundStatement	 
>1495	ReturnStatement	 
>1496	ExpressionStatement	 
>1497	CallExpression	Warning ( \"parsing brush primitive\" )
>1498	ArgumentList	\"parsing brush primitive\"
>1499	Argument	\"parsing brush primitive\"
>1500	PrimaryExpression	\"parsing brush primitive\"
>1501	Callee	Warning
>1502	Identifier	Warning
>1503	Condition	 
>1504	CallExpression	strcmp ( token , \"(\" )
>1505	ArgumentList	token
>1506	Argument	\"(\"
>1507	PrimaryExpression	\"(\"
>1508	Argument	token
>1509	Identifier	token
>1510	Callee	strcmp
>1511	Identifier	strcmp
>1512	ExpressionStatement	 
>1513	CallExpression	GetToken ( false )
>1514	ArgumentList	false
>1515	Argument	false
>1516	Identifier	false
>1517	Callee	GetToken
>1518	Identifier	GetToken
>1519	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>1520	CompoundStatement	 
>1521	IfStatement	if ( strcmp ( token , \")\" ) )
>1522	CompoundStatement	 
>1523	ReturnStatement	 
>1524	ExpressionStatement	 
>1525	CallExpression	Warning ( \"parsing brush\" )
>1526	ArgumentList	\"parsing brush\"
>1527	Argument	\"parsing brush\"
>1528	PrimaryExpression	\"parsing brush\"
>1529	Callee	Warning
>1530	Identifier	Warning
>1531	Condition	 
>1532	CallExpression	strcmp ( token , \")\" )
>1533	ArgumentList	token
>1534	Argument	\")\"
>1535	PrimaryExpression	\")\"
>1536	Argument	token
>1537	Identifier	token
>1538	Callee	strcmp
>1539	Identifier	strcmp
>1540	ExpressionStatement	 
>1541	CallExpression	GetToken ( false )
>1542	ArgumentList	false
>1543	Argument	false
>1544	Identifier	false
>1545	Callee	GetToken
>1546	Identifier	GetToken
>1547	ForStatement	for ( j = 0 ; j < 3 ; j ++ )
>1548	CompoundStatement	 
>1549	ExpressionStatement	 
>1550	AssignmentExpr	f -> planepts [ i ] [ j ] = atof ( token )
>1551	CallExpression	atof ( token )
>1552	ArgumentList	token
>1553	Argument	token
>1554	Identifier	token
>1555	Callee	atof
>1556	Identifier	atof
>1557	ArrayIndexing	f -> planepts [ i ] [ j ]
>1558	Identifier	j
>1559	ArrayIndexing	f -> planepts [ i ]
>1560	Identifier	i
>1561	PtrMemberAccess	f -> planepts
>1562	Identifier	planepts
>1563	Identifier	f
>1564	ExpressionStatement	 
>1565	CallExpression	GetToken ( false )
>1566	ArgumentList	false
>1567	Argument	false
>1568	Identifier	false
>1569	Callee	GetToken
>1570	Identifier	GetToken
>1571	IncDecOp	 
>1572	IncDec	++
>1573	Identifier	j
>1574	Condition	 
>1575	RelationalExpression	j < 3
>1576	PrimaryExpression	3
>1577	Identifier	j
>1578	ForInit	 
>1579	AssignmentExpr	j = 0
>1580	PrimaryExpression	0
>1581	Identifier	j
>1582	IfStatement	if ( strcmp ( token , \"(\" ) )
>1583	CompoundStatement	 
>1584	ReturnStatement	 
>1585	ExpressionStatement	 
>1586	CallExpression	Warning ( \"parsing brush\" )
>1587	ArgumentList	\"parsing brush\"
>1588	Argument	\"parsing brush\"
>1589	PrimaryExpression	\"parsing brush\"
>1590	Callee	Warning
>1591	Identifier	Warning
>1592	Condition	 
>1593	CallExpression	strcmp ( token , \"(\" )
>1594	ArgumentList	token
>1595	Argument	\"(\"
>1596	PrimaryExpression	\"(\"
>1597	Argument	token
>1598	Identifier	token
>1599	Callee	strcmp
>1600	Identifier	strcmp
>1601	IfStatement	if ( i != 0 )
>1602	ExpressionStatement	 
>1603	CallExpression	GetToken ( true )
>1604	ArgumentList	true
>1605	Argument	true
>1606	Identifier	true
>1607	Callee	GetToken
>1608	Identifier	GetToken
>1609	Condition	 
>1610	EqualityExpression	i != 0
>1611	PrimaryExpression	0
>1612	Identifier	i
>1613	IncDecOp	 
>1614	IncDec	++
>1615	Identifier	i
>1616	Condition	 
>1617	RelationalExpression	i < 3
>1618	PrimaryExpression	3
>1619	Identifier	i
>1620	ForInit	 
>1621	AssignmentExpr	i = 0
>1622	PrimaryExpression	0
>1623	Identifier	i
>1624	IfStatement	if ( ! b -> brush_faces )
>1625	ElseStatement	else
>1626	CompoundStatement	 
>1627	ExpressionStatement	 
>1628	AssignmentExpr	scan -> next = f
>1629	Identifier	f
>1630	PtrMemberAccess	scan -> next
>1631	Identifier	next
>1632	Identifier	scan
>1633	ForStatement	for ( scan = b -> brush_faces ; scan -> next ; scan = scan -> next )
>1634	ExpressionStatement	 
>1635	AssignmentExpr	 
>1636	PtrMemberAccess	scan -> next
>1637	Identifier	next
>1638	Identifier	scan
>1639	Identifier	scan
>1640	Condition	 
>1641	PtrMemberAccess	scan -> next
>1642	Identifier	next
>1643	Identifier	scan
>1644	ForInit	 
>1645	AssignmentExpr	scan = b -> brush_faces
>1646	PtrMemberAccess	b -> brush_faces
>1647	Identifier	brush_faces
>1648	Identifier	b
>1649	Identifier	scan
>1650	IdentifierDeclStatement	 
>1651	IdentifierDecl	* scan
>1652	Identifier	scan
>1653	IdentifierDeclType	face_t *
>1654	ExpressionStatement	 
>1655	AssignmentExpr	b -> brush_faces = f
>1656	Identifier	f
>1657	PtrMemberAccess	b -> brush_faces
>1658	Identifier	brush_faces
>1659	Identifier	b
>1660	Condition	 
>1661	UnaryOp	! b -> brush_faces
>1662	PtrMemberAccess	b -> brush_faces
>1663	Identifier	brush_faces
>1664	Identifier	b
>1665	UnaryOperator	!
>1666	ExpressionStatement	 
>1667	AssignmentExpr	f -> next = NULL
>1668	Identifier	NULL
>1669	PtrMemberAccess	f -> next
>1670	Identifier	next
>1671	Identifier	f
>1672	ExpressionStatement	 
>1673	AssignmentExpr	f = Face_Alloc ( )
>1674	CallExpression	Face_Alloc ( )
>1675	ArgumentList	 
>1676	Callee	Face_Alloc
>1677	Identifier	Face_Alloc
>1678	Identifier	f
>1679	CompoundStatement	 
>1680	ExpressionStatement	 
>1681	AssignmentExpr	b -> epairs = ep
>1682	Identifier	ep
>1683	PtrMemberAccess	b -> epairs
>1684	Identifier	epairs
>1685	Identifier	b
>1686	ExpressionStatement	 
>1687	AssignmentExpr	ep -> next = b -> epairs
>1688	PtrMemberAccess	b -> epairs
>1689	Identifier	epairs
>1690	Identifier	b
>1691	PtrMemberAccess	ep -> next
>1692	Identifier	next
>1693	Identifier	ep
>1694	ExpressionStatement	 
>1695	AssignmentExpr	ep = ParseEpair ( )
>1696	CallExpression	ParseEpair ( )
>1697	ArgumentList	 
>1698	Callee	ParseEpair
>1699	Identifier	ParseEpair
>1700	Identifier	ep
>1701	Condition	 
>1702	CallExpression	strcmp ( token , \"(\" )
>1703	ArgumentList	token
>1704	Argument	\"(\"
>1705	PrimaryExpression	\"(\"
>1706	Argument	token
>1707	Identifier	token
>1708	Callee	strcmp
>1709	Identifier	strcmp
>1710	IfStatement	if ( ! strcmp ( token , \"}\" ) )
>1711	BreakStatement	 
>1712	Condition	 
>1713	UnaryOp	! strcmp ( token , \"}\" )
>1714	CallExpression	strcmp ( token , \"}\" )
>1715	ArgumentList	token
>1716	Argument	\"}\"
>1717	PrimaryExpression	\"}\"
>1718	Argument	token
>1719	Identifier	token
>1720	Callee	strcmp
>1721	Identifier	strcmp
>1722	UnaryOperator	!
>1723	IfStatement	if ( ! GetToken ( true ) )
>1724	BreakStatement	 
>1725	Condition	 
>1726	UnaryOp	! GetToken ( true )
>1727	CallExpression	GetToken ( true )
>1728	ArgumentList	true
>1729	Argument	true
>1730	Identifier	true
>1731	Callee	GetToken
>1732	Identifier	GetToken
>1733	UnaryOperator	!
>1734	IfStatement	if ( strcmp ( token , \"{\" ) )
>1735	CompoundStatement	 
>1736	ReturnStatement	 
>1737	ExpressionStatement	 
>1738	CallExpression	Warning ( \"parsing brush primitive\" )
>1739	ArgumentList	\"parsing brush primitive\"
>1740	Argument	\"parsing brush primitive\"
>1741	PrimaryExpression	\"parsing brush primitive\"
>1742	Callee	Warning
>1743	Identifier	Warning
>1744	Condition	 
>1745	CallExpression	strcmp ( token , \"{\" )
>1746	ArgumentList	token
>1747	Argument	\"{\"
>1748	PrimaryExpression	\"{\"
>1749	Argument	token
>1750	Identifier	token
>1751	Callee	strcmp
>1752	Identifier	strcmp
>1753	ExpressionStatement	 
>1754	CallExpression	GetToken ( true )
>1755	ArgumentList	true
>1756	Argument	true
>1757	Identifier	true
>1758	Callee	GetToken
>1759	Identifier	GetToken
>1760	IdentifierDeclStatement	 
>1761	IdentifierDecl	j
>1762	Identifier	j
>1763	IdentifierDeclType	int
>1764	IdentifierDecl	i
>1765	Identifier	i
>1766	IdentifierDeclType	int
>1767	IdentifierDeclStatement	 
>1768	IdentifierDecl	* f
>1769	Identifier	f
>1770	IdentifierDeclType	face_t *
>1771	IdentifierDeclStatement	 
>1772	IdentifierDecl	* ep
>1773	Identifier	ep
>1774	IdentifierDeclType	epair_t *
>1822	FunctionDef	ConvertTexMatWithQTexture (brushprimit_texdef_t * texMat1 , qtexture_t * qtex1 , brushprimit_texdef_t * texMat2 , \
>1823	ParameterList	brushprimit_texdef_t * texMat1 , qtexture_t * qtex1 , brushprimit_texdef_t * texMat2 , qtexture_t * qtex2
>1824	Parameter	 
>1825	Identifier	qtex2
>1826	ParameterType	qtexture_t *
>1827	Parameter	 
>1828	Identifier	texMat2
>1829	ParameterType	brushprimit_texdef_t *
>1830	Parameter	 
>1831	Identifier	qtex1
>1832	ParameterType	qtexture_t *
>1833	Parameter	 
>1834	Identifier	texMat1
>1835	ParameterType	brushprimit_texdef_t *
>1836	ReturnType	void
>1837	CompoundStatement	 
>1838	ExpressionStatement	 
>1839	AssignmentExpr	texMat2 -> coords [ 1 ] [ 2 ] = s2 * texMat1 -> coords [ 1 ] [ 2 ]
>1840	MultiplicativeExpression	s2 * texMat1 -> coords [ 1 ] [ 2 ]
>1841	ArrayIndexing	texMat1 -> coords [ 1 ] [ 2 ]
>1842	PrimaryExpression	2
>1843	ArrayIndexing	texMat1 -> coords [ 1 ]
>1844	PrimaryExpression	1
>1845	PtrMemberAccess	texMat1 -> coords
>1846	Identifier	coords
>1847	Identifier	texMat1
>1848	Identifier	s2
>1849	ArrayIndexing	texMat2 -> coords [ 1 ] [ 2 ]
>1850	PrimaryExpression	2
>1851	ArrayIndexing	texMat2 -> coords [ 1 ]
>1852	PrimaryExpression	1
>1853	PtrMemberAccess	texMat2 -> coords
>1854	Identifier	coords
>1855	Identifier	texMat2
>1856	ExpressionStatement	 
>1857	AssignmentExpr	texMat2 -> coords [ 1 ] [ 1 ] = s2 * texMat1 -> coords [ 1 ] [ 1 ]
>1858	MultiplicativeExpression	s2 * texMat1 -> coords [ 1 ] [ 1 ]
>1859	ArrayIndexing	texMat1 -> coords [ 1 ] [ 1 ]
>1860	PrimaryExpression	1
>1861	ArrayIndexing	texMat1 -> coords [ 1 ]
>1862	PrimaryExpression	1
>1863	PtrMemberAccess	texMat1 -> coords
>1864	Identifier	coords
>1865	Identifier	texMat1
>1866	Identifier	s2
>1867	ArrayIndexing	texMat2 -> coords [ 1 ] [ 1 ]
>1868	PrimaryExpression	1
>1869	ArrayIndexing	texMat2 -> coords [ 1 ]
>1870	PrimaryExpression	1
>1871	PtrMemberAccess	texMat2 -> coords
>1872	Identifier	coords
>1873	Identifier	texMat2
>1874	ExpressionStatement	 
>1875	AssignmentExpr	texMat2 -> coords [ 1 ] [ 0 ] = s2 * texMat1 -> coords [ 1 ] [ 0 ]
>1876	MultiplicativeExpression	s2 * texMat1 -> coords [ 1 ] [ 0 ]
>1877	ArrayIndexing	texMat1 -> coords [ 1 ] [ 0 ]
>1878	PrimaryExpression	0
>1879	ArrayIndexing	texMat1 -> coords [ 1 ]
>1880	PrimaryExpression	1
>1881	PtrMemberAccess	texMat1 -> coords
>1882	Identifier	coords
>1883	Identifier	texMat1
>1884	Identifier	s2
>1885	ArrayIndexing	texMat2 -> coords [ 1 ] [ 0 ]
>1886	PrimaryExpression	0
>1887	ArrayIndexing	texMat2 -> coords [ 1 ]
>1888	PrimaryExpression	1
>1889	PtrMemberAccess	texMat2 -> coords
>1890	Identifier	coords
>1891	Identifier	texMat2
>1892	ExpressionStatement	 
>1893	AssignmentExpr	texMat2 -> coords [ 0 ] [ 2 ] = s1 * texMat1 -> coords [ 0 ] [ 2 ]
>1894	MultiplicativeExpression	s1 * texMat1 -> coords [ 0 ] [ 2 ]
>1895	ArrayIndexing	texMat1 -> coords [ 0 ] [ 2 ]
>1896	PrimaryExpression	2
>1897	ArrayIndexing	texMat1 -> coords [ 0 ]
>1898	PrimaryExpression	0
>1899	PtrMemberAccess	texMat1 -> coords
>1900	Identifier	coords
>1901	Identifier	texMat1
>1902	Identifier	s1
>1903	ArrayIndexing	texMat2 -> coords [ 0 ] [ 2 ]
>1904	PrimaryExpression	2
>1905	ArrayIndexing	texMat2 -> coords [ 0 ]
>1906	PrimaryExpression	0
>1907	PtrMemberAccess	texMat2 -> coords
>1908	Identifier	coords
>1909	Identifier	texMat2
>1910	ExpressionStatement	 
>1911	AssignmentExpr	texMat2 -> coords [ 0 ] [ 1 ] = s1 * texMat1 -> coords [ 0 ] [ 1 ]
>1912	MultiplicativeExpression	s1 * texMat1 -> coords [ 0 ] [ 1 ]
>1913	ArrayIndexing	texMat1 -> coords [ 0 ] [ 1 ]
>1914	PrimaryExpression	1
>1915	ArrayIndexing	texMat1 -> coords [ 0 ]
>1916	PrimaryExpression	0
>1917	PtrMemberAccess	texMat1 -> coords
>1918	Identifier	coords
>1919	Identifier	texMat1
>1920	Identifier	s1
>1921	ArrayIndexing	texMat2 -> coords [ 0 ] [ 1 ]
>1922	PrimaryExpression	1
>1923	ArrayIndexing	texMat2 -> coords [ 0 ]
>1924	PrimaryExpression	0
>1925	PtrMemberAccess	texMat2 -> coords
>1926	Identifier	coords
>1927	Identifier	texMat2
>1928	ExpressionStatement	 
>1929	AssignmentExpr	texMat2 -> coords [ 0 ] [ 0 ] = s1 * texMat1 -> coords [ 0 ] [ 0 ]
>1930	MultiplicativeExpression	s1 * texMat1 -> coords [ 0 ] [ 0 ]
>1931	ArrayIndexing	texMat1 -> coords [ 0 ] [ 0 ]
>1932	PrimaryExpression	0
>1933	ArrayIndexing	texMat1 -> coords [ 0 ]
>1934	PrimaryExpression	0
>1935	PtrMemberAccess	texMat1 -> coords
>1936	Identifier	coords
>1937	Identifier	texMat1
>1938	Identifier	s1
>1939	ArrayIndexing	texMat2 -> coords [ 0 ] [ 0 ]
>1940	PrimaryExpression	0
>1941	ArrayIndexing	texMat2 -> coords [ 0 ]
>1942	PrimaryExpression	0
>1943	PtrMemberAccess	texMat2 -> coords
>1944	Identifier	coords
>1945	Identifier	texMat2
>1946	ExpressionStatement	 
>1947	AssignmentExpr	s2 = ( qtex1 ? static_cast < float > ( qtex1 -> height ) 
>1948	MultiplicativeExpression	( qtex1 ? static_cast < float > ( qtex1 -> height ) 
>1949	ConditionalExpression	qtex2 ? static_cast < float > ( qtex2 -> height ) 
>1950	PrimaryExpression	2.0f
>1951	RelationalExpression	static_cast < float > ( qtex2 -> height )
>1952	RelationalExpression	float > ( qtex2 -> height )
>1953	PtrMemberAccess	qtex2 -> height
>1954	Identifier	height
>1955	Identifier	qtex2
>1956	Identifier	float
>1957	Identifier	static_cast
>1958	Condition	qtex2
>1959	Identifier	qtex2
>1960	ConditionalExpression	qtex1 ? static_cast < float > ( qtex1 -> height ) 
>1961	PrimaryExpression	2.0f
>1962	RelationalExpression	static_cast < float > ( qtex1 -> height )
>1963	RelationalExpression	float > ( qtex1 -> height )
>1964	PtrMemberAccess	qtex1 -> height
>1965	Identifier	height
>1966	Identifier	qtex1
>1967	Identifier	float
>1968	Identifier	static_cast
>1969	Condition	qtex1
>1970	Identifier	qtex1
>1971	Identifier	s2
>1972	ExpressionStatement	 
>1973	AssignmentExpr	s1 = ( qtex1 ? static_cast < float > ( qtex1 -> width ) 
>1974	MultiplicativeExpression	( qtex1 ? static_cast < float > ( qtex1 -> width ) 
>1975	ConditionalExpression	qtex2 ? static_cast < float > ( qtex2 -> width ) 
>1976	PrimaryExpression	2.0f
>1977	RelationalExpression	static_cast < float > ( qtex2 -> width )
>1978	RelationalExpression	float > ( qtex2 -> width )
>1979	PtrMemberAccess	qtex2 -> width
>1980	Identifier	width
>1981	Identifier	qtex2
>1982	Identifier	float
>1983	Identifier	static_cast
>1984	Condition	qtex2
>1985	Identifier	qtex2
>1986	ConditionalExpression	qtex1 ? static_cast < float > ( qtex1 -> width ) 
>1987	PrimaryExpression	2.0f
>1988	RelationalExpression	static_cast < float > ( qtex1 -> width )
>1989	RelationalExpression	float > ( qtex1 -> width )
>1990	PtrMemberAccess	qtex1 -> width
>1991	Identifier	width
>1992	Identifier	qtex1
>1993	Identifier	float
>1994	Identifier	static_cast
>1995	Condition	qtex1
>1996	Identifier	qtex1
>1997	Identifier	s1
>1998	IdentifierDeclStatement	 
>1999	IdentifierDecl	s2
>2000	Identifier	s2
>2001	IdentifierDeclType	float
>2002	IdentifierDecl	s1
>2003	Identifier	s1
>2004	IdentifierDeclType	float
>2034	FunctionDef	Face_MoveTexture_BrushPrimit (face_t * f , vec3_t delta)
>2035	ParameterList	face_t * f , vec3_t delta
>2036	Parameter	 
>2037	Identifier	delta
>2038	ParameterType	vec3_t
>2039	Parameter	 
>2040	Identifier	f
>2041	ParameterType	face_t *
>2042	ReturnType	void
>2043	CompoundStatement	 
>2044	ExpressionStatement	 
>2045	AssignmentExpr	f -> brushprimit_texdef . coords [ 1 ] [ 2 ] = SarrusDet ( M [ 0 ] , M [ 1 ] , D [ 1 ] ) / det
>2046	MultiplicativeExpression	SarrusDet ( M [ 0 ] , M [ 1 ] , D [ 1 ] ) / det
>2047	Identifier	det
>2048	CallExpression	SarrusDet ( M [ 0 ] , M [ 1 ] , D [ 1 ] )
>2049	ArgumentList	M [ 0 ]
>2050	Argument	D [ 1 ]
>2051	ArrayIndexing	D [ 1 ]
>2052	PrimaryExpression	1
>2053	Identifier	D
>2054	Argument	M [ 1 ]
>2055	ArrayIndexing	M [ 1 ]
>2056	PrimaryExpression	1
>2057	Identifier	M
>2058	Argument	M [ 0 ]
>2059	ArrayIndexing	M [ 0 ]
>2060	PrimaryExpression	0
>2061	Identifier	M
>2062	Callee	SarrusDet
>2063	Identifier	SarrusDet
>2064	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 2 ]
>2065	PrimaryExpression	2
>2066	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>2067	PrimaryExpression	1
>2068	MemberAccess	f -> brushprimit_texdef . coords
>2069	Identifier	coords
>2070	PtrMemberAccess	f -> brushprimit_texdef
>2071	Identifier	brushprimit_texdef
>2072	Identifier	f
>2073	ExpressionStatement	 
>2074	AssignmentExpr	f -> brushprimit_texdef . coords [ 1 ] [ 1 ] = SarrusDet ( M [ 0 ] , D [ 1 ] , M [ 2 ] ) / det
>2075	MultiplicativeExpression	SarrusDet ( M [ 0 ] , D [ 1 ] , M [ 2 ] ) / det
>2076	Identifier	det
>2077	CallExpression	SarrusDet ( M [ 0 ] , D [ 1 ] , M [ 2 ] )
>2078	ArgumentList	M [ 0 ]
>2079	Argument	M [ 2 ]
>2080	ArrayIndexing	M [ 2 ]
>2081	PrimaryExpression	2
>2082	Identifier	M
>2083	Argument	D [ 1 ]
>2084	ArrayIndexing	D [ 1 ]
>2085	PrimaryExpression	1
>2086	Identifier	D
>2087	Argument	M [ 0 ]
>2088	ArrayIndexing	M [ 0 ]
>2089	PrimaryExpression	0
>2090	Identifier	M
>2091	Callee	SarrusDet
>2092	Identifier	SarrusDet
>2093	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 1 ]
>2094	PrimaryExpression	1
>2095	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>2096	PrimaryExpression	1
>2097	MemberAccess	f -> brushprimit_texdef . coords
>2098	Identifier	coords
>2099	PtrMemberAccess	f -> brushprimit_texdef
>2100	Identifier	brushprimit_texdef
>2101	Identifier	f
>2102	ExpressionStatement	 
>2103	AssignmentExpr	f -> brushprimit_texdef . coords [ 1 ] [ 0 ] = SarrusDet ( D [ 1 ] , M [ 1 ] , M [ 2 ] ) / det
>2104	MultiplicativeExpression	SarrusDet ( D [ 1 ] , M [ 1 ] , M [ 2 ] ) / det
>2105	Identifier	det
>2106	CallExpression	SarrusDet ( D [ 1 ] , M [ 1 ] , M [ 2 ] )
>2107	ArgumentList	D [ 1 ]
>2108	Argument	M [ 2 ]
>2109	ArrayIndexing	M [ 2 ]
>2110	PrimaryExpression	2
>2111	Identifier	M
>2112	Argument	M [ 1 ]
>2113	ArrayIndexing	M [ 1 ]
>2114	PrimaryExpression	1
>2115	Identifier	M
>2116	Argument	D [ 1 ]
>2117	ArrayIndexing	D [ 1 ]
>2118	PrimaryExpression	1
>2119	Identifier	D
>2120	Callee	SarrusDet
>2121	Identifier	SarrusDet
>2122	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 0 ]
>2123	PrimaryExpression	0
>2124	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>2125	PrimaryExpression	1
>2126	MemberAccess	f -> brushprimit_texdef . coords
>2127	Identifier	coords
>2128	PtrMemberAccess	f -> brushprimit_texdef
>2129	Identifier	brushprimit_texdef
>2130	Identifier	f
>2131	ExpressionStatement	 
>2132	AssignmentExpr	f -> brushprimit_texdef . coords [ 0 ] [ 2 ] = SarrusDet ( M [ 0 ] , M [ 1 ] , D [ 0 ] ) / det
>2133	MultiplicativeExpression	SarrusDet ( M [ 0 ] , M [ 1 ] , D [ 0 ] ) / det
>2134	Identifier	det
>2135	CallExpression	SarrusDet ( M [ 0 ] , M [ 1 ] , D [ 0 ] )
>2136	ArgumentList	M [ 0 ]
>2137	Argument	D [ 0 ]
>2138	ArrayIndexing	D [ 0 ]
>2139	PrimaryExpression	0
>2140	Identifier	D
>2141	Argument	M [ 1 ]
>2142	ArrayIndexing	M [ 1 ]
>2143	PrimaryExpression	1
>2144	Identifier	M
>2145	Argument	M [ 0 ]
>2146	ArrayIndexing	M [ 0 ]
>2147	PrimaryExpression	0
>2148	Identifier	M
>2149	Callee	SarrusDet
>2150	Identifier	SarrusDet
>2151	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 2 ]
>2152	PrimaryExpression	2
>2153	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>2154	PrimaryExpression	0
>2155	MemberAccess	f -> brushprimit_texdef . coords
>2156	Identifier	coords
>2157	PtrMemberAccess	f -> brushprimit_texdef
>2158	Identifier	brushprimit_texdef
>2159	Identifier	f
>2160	ExpressionStatement	 
>2161	AssignmentExpr	f -> brushprimit_texdef . coords [ 0 ] [ 1 ] = SarrusDet ( M [ 0 ] , D [ 0 ] , M [ 2 ] ) / det
>2162	MultiplicativeExpression	SarrusDet ( M [ 0 ] , D [ 0 ] , M [ 2 ] ) / det
>2163	Identifier	det
>2164	CallExpression	SarrusDet ( M [ 0 ] , D [ 0 ] , M [ 2 ] )
>2165	ArgumentList	M [ 0 ]
>2166	Argument	M [ 2 ]
>2167	ArrayIndexing	M [ 2 ]
>2168	PrimaryExpression	2
>2169	Identifier	M
>2170	Argument	D [ 0 ]
>2171	ArrayIndexing	D [ 0 ]
>2172	PrimaryExpression	0
>2173	Identifier	D
>2174	Argument	M [ 0 ]
>2175	ArrayIndexing	M [ 0 ]
>2176	PrimaryExpression	0
>2177	Identifier	M
>2178	Callee	SarrusDet
>2179	Identifier	SarrusDet
>2180	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 1 ]
>2181	PrimaryExpression	1
>2182	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>2183	PrimaryExpression	0
>2184	MemberAccess	f -> brushprimit_texdef . coords
>2185	Identifier	coords
>2186	PtrMemberAccess	f -> brushprimit_texdef
>2187	Identifier	brushprimit_texdef
>2188	Identifier	f
>2189	ExpressionStatement	 
>2190	AssignmentExpr	f -> brushprimit_texdef . coords [ 0 ] [ 0 ] = SarrusDet ( D [ 0 ] , M [ 1 ] , M [ 2 ] ) / det
>2191	MultiplicativeExpression	SarrusDet ( D [ 0 ] , M [ 1 ] , M [ 2 ] ) / det
>2192	Identifier	det
>2193	CallExpression	SarrusDet ( D [ 0 ] , M [ 1 ] , M [ 2 ] )
>2194	ArgumentList	D [ 0 ]
>2195	Argument	M [ 2 ]
>2196	ArrayIndexing	M [ 2 ]
>2197	PrimaryExpression	2
>2198	Identifier	M
>2199	Argument	M [ 1 ]
>2200	ArrayIndexing	M [ 1 ]
>2201	PrimaryExpression	1
>2202	Identifier	M
>2203	Argument	D [ 0 ]
>2204	ArrayIndexing	D [ 0 ]
>2205	PrimaryExpression	0
>2206	Identifier	D
>2207	Callee	SarrusDet
>2208	Identifier	SarrusDet
>2209	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 0 ]
>2210	PrimaryExpression	0
>2211	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>2212	PrimaryExpression	0
>2213	MemberAccess	f -> brushprimit_texdef . coords
>2214	Identifier	coords
>2215	PtrMemberAccess	f -> brushprimit_texdef
>2216	Identifier	brushprimit_texdef
>2217	Identifier	f
>2218	ExpressionStatement	 
>2219	AssignmentExpr	det = SarrusDet ( M [ 0 ] , M [ 1 ] , M [ 2 ] )
>2220	CallExpression	SarrusDet ( M [ 0 ] , M [ 1 ] , M [ 2 ] )
>2221	ArgumentList	M [ 0 ]
>2222	Argument	M [ 2 ]
>2223	ArrayIndexing	M [ 2 ]
>2224	PrimaryExpression	2
>2225	Identifier	M
>2226	Argument	M [ 1 ]
>2227	ArrayIndexing	M [ 1 ]
>2228	PrimaryExpression	1
>2229	Identifier	M
>2230	Argument	M [ 0 ]
>2231	ArrayIndexing	M [ 0 ]
>2232	PrimaryExpression	0
>2233	Identifier	M
>2234	Callee	SarrusDet
>2235	Identifier	SarrusDet
>2236	Identifier	det
>2237	ExpressionStatement	 
>2238	AssignmentExpr	D [ 1 ] [ 2 ] = f -> brushprimit_texdef . coords [ 1 ] [ 1 ] + f -> brushprimit_texdef . coords [ 1 ] [ \
>2239	AdditiveExpression	f -> brushprimit_texdef . coords [ 1 ] [ 1 ] + f -> brushprimit_texdef . coords [ 1 ] [ 2 ]
>2240	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 2 ]
>2241	PrimaryExpression	2
>2242	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>2243	PrimaryExpression	1
>2244	MemberAccess	f -> brushprimit_texdef . coords
>2245	Identifier	coords
>2246	PtrMemberAccess	f -> brushprimit_texdef
>2247	Identifier	brushprimit_texdef
>2248	Identifier	f
>2249	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 1 ]
>2250	PrimaryExpression	1
>2251	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>2252	PrimaryExpression	1
>2253	MemberAccess	f -> brushprimit_texdef . coords
>2254	Identifier	coords
>2255	PtrMemberAccess	f -> brushprimit_texdef
>2256	Identifier	brushprimit_texdef
>2257	Identifier	f
>2258	ArrayIndexing	D [ 1 ] [ 2 ]
>2259	PrimaryExpression	2
>2260	ArrayIndexing	D [ 1 ]
>2261	PrimaryExpression	1
>2262	Identifier	D
>2263	ExpressionStatement	 
>2264	AssignmentExpr	D [ 1 ] [ 1 ] = f -> brushprimit_texdef . coords [ 1 ] [ 0 ] + f -> brushprimit_texdef . coords [ 1 ] [ \
>2265	AdditiveExpression	f -> brushprimit_texdef . coords [ 1 ] [ 0 ] + f -> brushprimit_texdef . coords [ 1 ] [ 2 ]
>2266	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 2 ]
>2267	PrimaryExpression	2
>2268	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>2269	PrimaryExpression	1
>2270	MemberAccess	f -> brushprimit_texdef . coords
>2271	Identifier	coords
>2272	PtrMemberAccess	f -> brushprimit_texdef
>2273	Identifier	brushprimit_texdef
>2274	Identifier	f
>2275	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 0 ]
>2276	PrimaryExpression	0
>2277	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>2278	PrimaryExpression	1
>2279	MemberAccess	f -> brushprimit_texdef . coords
>2280	Identifier	coords
>2281	PtrMemberAccess	f -> brushprimit_texdef
>2282	Identifier	brushprimit_texdef
>2283	Identifier	f
>2284	ArrayIndexing	D [ 1 ] [ 1 ]
>2285	PrimaryExpression	1
>2286	ArrayIndexing	D [ 1 ]
>2287	PrimaryExpression	1
>2288	Identifier	D
>2289	ExpressionStatement	 
>2290	AssignmentExpr	D [ 1 ] [ 0 ] = f -> brushprimit_texdef . coords [ 1 ] [ 2 ]
>2291	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 2 ]
>2292	PrimaryExpression	2
>2293	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>2294	PrimaryExpression	1
>2295	MemberAccess	f -> brushprimit_texdef . coords
>2296	Identifier	coords
>2297	PtrMemberAccess	f -> brushprimit_texdef
>2298	Identifier	brushprimit_texdef
>2299	Identifier	f
>2300	ArrayIndexing	D [ 1 ] [ 0 ]
>2301	PrimaryExpression	0
>2302	ArrayIndexing	D [ 1 ]
>2303	PrimaryExpression	1
>2304	Identifier	D
>2305	ExpressionStatement	 
>2306	AssignmentExpr	D [ 0 ] [ 2 ] = f -> brushprimit_texdef . coords [ 0 ] [ 1 ] + f -> brushprimit_texdef . coords [ 0 ] [ \
>2307	AdditiveExpression	f -> brushprimit_texdef . coords [ 0 ] [ 1 ] + f -> brushprimit_texdef . coords [ 0 ] [ 2 ]
>2308	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 2 ]
>2309	PrimaryExpression	2
>2310	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>2311	PrimaryExpression	0
>2312	MemberAccess	f -> brushprimit_texdef . coords
>2313	Identifier	coords
>2314	PtrMemberAccess	f -> brushprimit_texdef
>2315	Identifier	brushprimit_texdef
>2316	Identifier	f
>2317	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 1 ]
>2318	PrimaryExpression	1
>2319	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>2320	PrimaryExpression	0
>2321	MemberAccess	f -> brushprimit_texdef . coords
>2322	Identifier	coords
>2323	PtrMemberAccess	f -> brushprimit_texdef
>2324	Identifier	brushprimit_texdef
>2325	Identifier	f
>2326	ArrayIndexing	D [ 0 ] [ 2 ]
>2327	PrimaryExpression	2
>2328	ArrayIndexing	D [ 0 ]
>2329	PrimaryExpression	0
>2330	Identifier	D
>2331	ExpressionStatement	 
>2332	AssignmentExpr	D [ 0 ] [ 1 ] = f -> brushprimit_texdef . coords [ 0 ] [ 0 ] + f -> brushprimit_texdef . coords [ 0 ] [ \
>2333	AdditiveExpression	f -> brushprimit_texdef . coords [ 0 ] [ 0 ] + f -> brushprimit_texdef . coords [ 0 ] [ 2 ]
>2334	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 2 ]
>2335	PrimaryExpression	2
>2336	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>2337	PrimaryExpression	0
>2338	MemberAccess	f -> brushprimit_texdef . coords
>2339	Identifier	coords
>2340	PtrMemberAccess	f -> brushprimit_texdef
>2341	Identifier	brushprimit_texdef
>2342	Identifier	f
>2343	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 0 ]
>2344	PrimaryExpression	0
>2345	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>2346	PrimaryExpression	0
>2347	MemberAccess	f -> brushprimit_texdef . coords
>2348	Identifier	coords
>2349	PtrMemberAccess	f -> brushprimit_texdef
>2350	Identifier	brushprimit_texdef
>2351	Identifier	f
>2352	ArrayIndexing	D [ 0 ] [ 1 ]
>2353	PrimaryExpression	1
>2354	ArrayIndexing	D [ 0 ]
>2355	PrimaryExpression	0
>2356	Identifier	D
>2357	ExpressionStatement	 
>2358	AssignmentExpr	D [ 0 ] [ 0 ] = f -> brushprimit_texdef . coords [ 0 ] [ 2 ]
>2359	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 2 ]
>2360	PrimaryExpression	2
>2361	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>2362	PrimaryExpression	0
>2363	MemberAccess	f -> brushprimit_texdef . coords
>2364	Identifier	coords
>2365	PtrMemberAccess	f -> brushprimit_texdef
>2366	Identifier	brushprimit_texdef
>2367	Identifier	f
>2368	ArrayIndexing	D [ 0 ] [ 0 ]
>2369	PrimaryExpression	0
>2370	ArrayIndexing	D [ 0 ]
>2371	PrimaryExpression	0
>2372	Identifier	D
>2373	ExpressionStatement	 
>2374	AssignmentExpr	M [ 2 ] [ 2 ] = 1.0f
>2375	PrimaryExpression	1.0f
>2376	ArrayIndexing	M [ 2 ] [ 2 ]
>2377	PrimaryExpression	2
>2378	ArrayIndexing	M [ 2 ]
>2379	PrimaryExpression	2
>2380	Identifier	M
>2381	ExpressionStatement	 
>2382	AssignmentExpr	M [ 2 ] [ 1 ] = 1.0f
>2383	PrimaryExpression	1.0f
>2384	ArrayIndexing	M [ 2 ] [ 1 ]
>2385	PrimaryExpression	1
>2386	ArrayIndexing	M [ 2 ]
>2387	PrimaryExpression	2
>2388	Identifier	M
>2389	ExpressionStatement	 
>2390	AssignmentExpr	M [ 2 ] [ 0 ] = 1.0f
>2391	PrimaryExpression	1.0f
>2392	ArrayIndexing	M [ 2 ] [ 0 ]
>2393	PrimaryExpression	0
>2394	ArrayIndexing	M [ 2 ]
>2395	PrimaryExpression	2
>2396	Identifier	M
>2397	ExpressionStatement	 
>2398	AssignmentExpr	M [ 1 ] [ 2 ] = 1.0f + ty
>2399	AdditiveExpression	1.0f + ty
>2400	Identifier	ty
>2401	PrimaryExpression	1.0f
>2402	ArrayIndexing	M [ 1 ] [ 2 ]
>2403	PrimaryExpression	2
>2404	ArrayIndexing	M [ 1 ]
>2405	PrimaryExpression	1
>2406	Identifier	M
>2407	ExpressionStatement	 
>2408	AssignmentExpr	M [ 1 ] [ 1 ] = ty
>2409	Identifier	ty
>2410	ArrayIndexing	M [ 1 ] [ 1 ]
>2411	PrimaryExpression	1
>2412	ArrayIndexing	M [ 1 ]
>2413	PrimaryExpression	1
>2414	Identifier	M
>2415	ExpressionStatement	 
>2416	AssignmentExpr	M [ 1 ] [ 0 ] = ty
>2417	Identifier	ty
>2418	ArrayIndexing	M [ 1 ] [ 0 ]
>2419	PrimaryExpression	0
>2420	ArrayIndexing	M [ 1 ]
>2421	PrimaryExpression	1
>2422	Identifier	M
>2423	ExpressionStatement	 
>2424	AssignmentExpr	M [ 0 ] [ 2 ] = tx
>2425	Identifier	tx
>2426	ArrayIndexing	M [ 0 ] [ 2 ]
>2427	PrimaryExpression	2
>2428	ArrayIndexing	M [ 0 ]
>2429	PrimaryExpression	0
>2430	Identifier	M
>2431	ExpressionStatement	 
>2432	AssignmentExpr	M [ 0 ] [ 1 ] = 1.0f + tx
>2433	AdditiveExpression	1.0f + tx
>2434	Identifier	tx
>2435	PrimaryExpression	1.0f
>2436	ArrayIndexing	M [ 0 ] [ 1 ]
>2437	PrimaryExpression	1
>2438	ArrayIndexing	M [ 0 ]
>2439	PrimaryExpression	0
>2440	Identifier	M
>2441	ExpressionStatement	 
>2442	AssignmentExpr	M [ 0 ] [ 0 ] = tx
>2443	Identifier	tx
>2444	ArrayIndexing	M [ 0 ] [ 0 ]
>2445	PrimaryExpression	0
>2446	ArrayIndexing	M [ 0 ]
>2447	PrimaryExpression	0
>2448	Identifier	M
>2449	ExpressionStatement	 
>2450	AssignmentExpr	ty = DotProduct ( delta , texT )
>2451	CallExpression	DotProduct ( delta , texT )
>2452	ArgumentList	delta
>2453	Argument	texT
>2454	Identifier	texT
>2455	Argument	delta
>2456	Identifier	delta
>2457	Callee	DotProduct
>2458	Identifier	DotProduct
>2459	Identifier	ty
>2460	ExpressionStatement	 
>2461	AssignmentExpr	tx = DotProduct ( delta , texS )
>2462	CallExpression	DotProduct ( delta , texS )
>2463	ArgumentList	delta
>2464	Argument	texS
>2465	Identifier	texS
>2466	Argument	delta
>2467	Identifier	delta
>2468	Callee	DotProduct
>2469	Identifier	DotProduct
>2470	Identifier	tx
>2471	ExpressionStatement	 
>2472	CallExpression	ComputeAxisBase ( f -> plane . normal , texS , texT )
>2473	ArgumentList	f -> plane . normal
>2474	Argument	texT
>2475	Identifier	texT
>2476	Argument	texS
>2477	Identifier	texS
>2478	Argument	f -> plane . normal
>2479	MemberAccess	f -> plane . normal
>2480	Identifier	normal
>2481	PtrMemberAccess	f -> plane
>2482	Identifier	plane
>2483	Identifier	f
>2484	Callee	ComputeAxisBase
>2485	Identifier	ComputeAxisBase
>2486	IdentifierDeclStatement	 
>2487	IdentifierDecl	D [ 2 ]
>2488	PrimaryExpression	2
>2489	Identifier	D
>2490	IdentifierDeclType	vec3_t [ 2 ]
>2491	IdentifierDeclStatement	 
>2492	IdentifierDecl	det
>2493	Identifier	det
>2494	IdentifierDeclType	vec_t
>2495	IdentifierDeclStatement	 
>2496	IdentifierDecl	M [ 3 ]
>2497	PrimaryExpression	3
>2498	Identifier	M
>2499	IdentifierDeclType	vec3_t [ 3 ]
>2500	IdentifierDeclStatement	 
>2501	IdentifierDecl	ty
>2502	Identifier	ty
>2503	IdentifierDeclType	vec_t
>2504	IdentifierDecl	tx
>2505	Identifier	tx
>2506	IdentifierDeclType	vec_t
>2507	IdentifierDeclStatement	 
>2508	IdentifierDecl	texT
>2509	Identifier	texT
>2510	IdentifierDeclType	vec3_t
>2511	IdentifierDecl	texS
>2512	Identifier	texS
>2513	IdentifierDeclType	vec3_t
>2543	FunctionDef	Select_ShiftTexture_BrushPrimit (face_t * f , int x , int y)
>2544	ParameterList	face_t * f , int x , int y
>2545	Parameter	 
>2546	Identifier	y
>2547	ParameterType	int
>2548	Parameter	 
>2549	Identifier	x
>2550	ParameterType	int
>2551	Parameter	 
>2552	Identifier	f
>2553	ParameterType	face_t *
>2554	ReturnType	void
>2555	CompoundStatement	 
>2556	ExpressionStatement	 
>2557	CallExpression	Face_MoveTexture_BrushPrimit ( f , delta )
>2558	ArgumentList	f
>2559	Argument	delta
>2560	Identifier	delta
>2561	Argument	f
>2562	Identifier	f
>2563	Callee	Face_MoveTexture_BrushPrimit
>2564	Identifier	Face_MoveTexture_BrushPrimit
>2565	ExpressionStatement	 
>2566	CallExpression	VectorAdd ( delta , texT , delta )
>2567	ArgumentList	delta
>2568	Argument	delta
>2569	Identifier	delta
>2570	Argument	texT
>2571	Identifier	texT
>2572	Argument	delta
>2573	Identifier	delta
>2574	Callee	VectorAdd
>2575	Identifier	VectorAdd
>2576	ExpressionStatement	 
>2577	CallExpression	VectorCopy ( texS , delta )
>2578	ArgumentList	texS
>2579	Argument	delta
>2580	Identifier	delta
>2581	Argument	texS
>2582	Identifier	texS
>2583	Callee	VectorCopy
>2584	Identifier	VectorCopy
>2585	ExpressionStatement	 
>2586	CallExpression	VectorScale ( texT , static_cast < float > ( y ) , texT )
>2587	ArgumentList	texT
>2588	Argument	texT
>2589	Identifier	texT
>2590	Argument	static_cast < float > ( y )
>2591	RelationalExpression	static_cast < float > ( y )
>2592	RelationalExpression	float > ( y )
>2593	Identifier	y
>2594	Identifier	float
>2595	Identifier	static_cast
>2596	Argument	texT
>2597	Identifier	texT
>2598	Callee	VectorScale
>2599	Identifier	VectorScale
>2600	ExpressionStatement	 
>2601	CallExpression	VectorScale ( texS , static_cast < float > ( x ) , texS )
>2602	ArgumentList	texS
>2603	Argument	texS
>2604	Identifier	texS
>2605	Argument	static_cast < float > ( x )
>2606	RelationalExpression	static_cast < float > ( x )
>2607	RelationalExpression	float > ( x )
>2608	Identifier	x
>2609	Identifier	float
>2610	Identifier	static_cast
>2611	Argument	texS
>2612	Identifier	texS
>2613	Callee	VectorScale
>2614	Identifier	VectorScale
>2615	ExpressionStatement	 
>2616	CallExpression	ComputeAxisBase ( f -> plane . normal , texS , texT )
>2617	ArgumentList	f -> plane . normal
>2618	Argument	texT
>2619	Identifier	texT
>2620	Argument	texS
>2621	Identifier	texS
>2622	Argument	f -> plane . normal
>2623	MemberAccess	f -> plane . normal
>2624	Identifier	normal
>2625	PtrMemberAccess	f -> plane
>2626	Identifier	plane
>2627	Identifier	f
>2628	Callee	ComputeAxisBase
>2629	Identifier	ComputeAxisBase
>2630	IdentifierDeclStatement	 
>2631	IdentifierDecl	delta
>2632	Identifier	delta
>2633	IdentifierDeclType	vec3_t
>2634	IdentifierDeclStatement	 
>2635	IdentifierDecl	texT
>2636	Identifier	texT
>2637	IdentifierDeclType	vec3_t
>2638	IdentifierDecl	texS
>2639	Identifier	texS
>2640	IdentifierDeclType	vec3_t
>2655	FunctionDef	RotateFaceTexture_BrushPrimit (face_t * f , int nAxis , float fDeg , vec3_t vOrigin)
>2656	ParameterList	face_t * f , int nAxis , float fDeg , vec3_t vOrigin
>2657	Parameter	 
>2658	Identifier	vOrigin
>2659	ParameterType	vec3_t
>2660	Parameter	 
>2661	Identifier	fDeg
>2662	ParameterType	float
>2663	Parameter	 
>2664	Identifier	nAxis
>2665	ParameterType	int
>2666	Parameter	 
>2667	Identifier	f
>2668	ParameterType	face_t *
>2669	ReturnType	void
>2670	CompoundStatement	 
>2671	ExpressionStatement	 
>2672	AssignmentExpr	f -> brushprimit_texdef . coords [ 1 ] [ 2 ] = SarrusDet ( M [ 0 ] , M [ 1 ] , D [ 1 ] ) / det
>2673	MultiplicativeExpression	SarrusDet ( M [ 0 ] , M [ 1 ] , D [ 1 ] ) / det
>2674	Identifier	det
>2675	CallExpression	SarrusDet ( M [ 0 ] , M [ 1 ] , D [ 1 ] )
>2676	ArgumentList	M [ 0 ]
>2677	Argument	D [ 1 ]
>2678	ArrayIndexing	D [ 1 ]
>2679	PrimaryExpression	1
>2680	Identifier	D
>2681	Argument	M [ 1 ]
>2682	ArrayIndexing	M [ 1 ]
>2683	PrimaryExpression	1
>2684	Identifier	M
>2685	Argument	M [ 0 ]
>2686	ArrayIndexing	M [ 0 ]
>2687	PrimaryExpression	0
>2688	Identifier	M
>2689	Callee	SarrusDet
>2690	Identifier	SarrusDet
>2691	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 2 ]
>2692	PrimaryExpression	2
>2693	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>2694	PrimaryExpression	1
>2695	MemberAccess	f -> brushprimit_texdef . coords
>2696	Identifier	coords
>2697	PtrMemberAccess	f -> brushprimit_texdef
>2698	Identifier	brushprimit_texdef
>2699	Identifier	f
>2700	ExpressionStatement	 
>2701	AssignmentExpr	f -> brushprimit_texdef . coords [ 1 ] [ 1 ] = SarrusDet ( M [ 0 ] , D [ 1 ] , M [ 2 ] ) / det
>2702	MultiplicativeExpression	SarrusDet ( M [ 0 ] , D [ 1 ] , M [ 2 ] ) / det
>2703	Identifier	det
>2704	CallExpression	SarrusDet ( M [ 0 ] , D [ 1 ] , M [ 2 ] )
>2705	ArgumentList	M [ 0 ]
>2706	Argument	M [ 2 ]
>2707	ArrayIndexing	M [ 2 ]
>2708	PrimaryExpression	2
>2709	Identifier	M
>2710	Argument	D [ 1 ]
>2711	ArrayIndexing	D [ 1 ]
>2712	PrimaryExpression	1
>2713	Identifier	D
>2714	Argument	M [ 0 ]
>2715	ArrayIndexing	M [ 0 ]
>2716	PrimaryExpression	0
>2717	Identifier	M
>2718	Callee	SarrusDet
>2719	Identifier	SarrusDet
>2720	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 1 ]
>2721	PrimaryExpression	1
>2722	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>2723	PrimaryExpression	1
>2724	MemberAccess	f -> brushprimit_texdef . coords
>2725	Identifier	coords
>2726	PtrMemberAccess	f -> brushprimit_texdef
>2727	Identifier	brushprimit_texdef
>2728	Identifier	f
>2729	ExpressionStatement	 
>2730	AssignmentExpr	f -> brushprimit_texdef . coords [ 1 ] [ 0 ] = SarrusDet ( D [ 1 ] , M [ 1 ] , M [ 2 ] ) / det
>2731	MultiplicativeExpression	SarrusDet ( D [ 1 ] , M [ 1 ] , M [ 2 ] ) / det
>2732	Identifier	det
>2733	CallExpression	SarrusDet ( D [ 1 ] , M [ 1 ] , M [ 2 ] )
>2734	ArgumentList	D [ 1 ]
>2735	Argument	M [ 2 ]
>2736	ArrayIndexing	M [ 2 ]
>2737	PrimaryExpression	2
>2738	Identifier	M
>2739	Argument	M [ 1 ]
>2740	ArrayIndexing	M [ 1 ]
>2741	PrimaryExpression	1
>2742	Identifier	M
>2743	Argument	D [ 1 ]
>2744	ArrayIndexing	D [ 1 ]
>2745	PrimaryExpression	1
>2746	Identifier	D
>2747	Callee	SarrusDet
>2748	Identifier	SarrusDet
>2749	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 0 ]
>2750	PrimaryExpression	0
>2751	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>2752	PrimaryExpression	1
>2753	MemberAccess	f -> brushprimit_texdef . coords
>2754	Identifier	coords
>2755	PtrMemberAccess	f -> brushprimit_texdef
>2756	Identifier	brushprimit_texdef
>2757	Identifier	f
>2758	ExpressionStatement	 
>2759	AssignmentExpr	f -> brushprimit_texdef . coords [ 0 ] [ 2 ] = SarrusDet ( M [ 0 ] , M [ 1 ] , D [ 0 ] ) / det
>2760	MultiplicativeExpression	SarrusDet ( M [ 0 ] , M [ 1 ] , D [ 0 ] ) / det
>2761	Identifier	det
>2762	CallExpression	SarrusDet ( M [ 0 ] , M [ 1 ] , D [ 0 ] )
>2763	ArgumentList	M [ 0 ]
>2764	Argument	D [ 0 ]
>2765	ArrayIndexing	D [ 0 ]
>2766	PrimaryExpression	0
>2767	Identifier	D
>2768	Argument	M [ 1 ]
>2769	ArrayIndexing	M [ 1 ]
>2770	PrimaryExpression	1
>2771	Identifier	M
>2772	Argument	M [ 0 ]
>2773	ArrayIndexing	M [ 0 ]
>2774	PrimaryExpression	0
>2775	Identifier	M
>2776	Callee	SarrusDet
>2777	Identifier	SarrusDet
>2778	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 2 ]
>2779	PrimaryExpression	2
>2780	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>2781	PrimaryExpression	0
>2782	MemberAccess	f -> brushprimit_texdef . coords
>2783	Identifier	coords
>2784	PtrMemberAccess	f -> brushprimit_texdef
>2785	Identifier	brushprimit_texdef
>2786	Identifier	f
>2787	ExpressionStatement	 
>2788	AssignmentExpr	f -> brushprimit_texdef . coords [ 0 ] [ 1 ] = SarrusDet ( M [ 0 ] , D [ 0 ] , M [ 2 ] ) / det
>2789	MultiplicativeExpression	SarrusDet ( M [ 0 ] , D [ 0 ] , M [ 2 ] ) / det
>2790	Identifier	det
>2791	CallExpression	SarrusDet ( M [ 0 ] , D [ 0 ] , M [ 2 ] )
>2792	ArgumentList	M [ 0 ]
>2793	Argument	M [ 2 ]
>2794	ArrayIndexing	M [ 2 ]
>2795	PrimaryExpression	2
>2796	Identifier	M
>2797	Argument	D [ 0 ]
>2798	ArrayIndexing	D [ 0 ]
>2799	PrimaryExpression	0
>2800	Identifier	D
>2801	Argument	M [ 0 ]
>2802	ArrayIndexing	M [ 0 ]
>2803	PrimaryExpression	0
>2804	Identifier	M
>2805	Callee	SarrusDet
>2806	Identifier	SarrusDet
>2807	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 1 ]
>2808	PrimaryExpression	1
>2809	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>2810	PrimaryExpression	0
>2811	MemberAccess	f -> brushprimit_texdef . coords
>2812	Identifier	coords
>2813	PtrMemberAccess	f -> brushprimit_texdef
>2814	Identifier	brushprimit_texdef
>2815	Identifier	f
>2816	ExpressionStatement	 
>2817	AssignmentExpr	f -> brushprimit_texdef . coords [ 0 ] [ 0 ] = SarrusDet ( D [ 0 ] , M [ 1 ] , M [ 2 ] ) / det
>2818	MultiplicativeExpression	SarrusDet ( D [ 0 ] , M [ 1 ] , M [ 2 ] ) / det
>2819	Identifier	det
>2820	CallExpression	SarrusDet ( D [ 0 ] , M [ 1 ] , M [ 2 ] )
>2821	ArgumentList	D [ 0 ]
>2822	Argument	M [ 2 ]
>2823	ArrayIndexing	M [ 2 ]
>2824	PrimaryExpression	2
>2825	Identifier	M
>2826	Argument	M [ 1 ]
>2827	ArrayIndexing	M [ 1 ]
>2828	PrimaryExpression	1
>2829	Identifier	M
>2830	Argument	D [ 0 ]
>2831	ArrayIndexing	D [ 0 ]
>2832	PrimaryExpression	0
>2833	Identifier	D
>2834	Callee	SarrusDet
>2835	Identifier	SarrusDet
>2836	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 0 ]
>2837	PrimaryExpression	0
>2838	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>2839	PrimaryExpression	0
>2840	MemberAccess	f -> brushprimit_texdef . coords
>2841	Identifier	coords
>2842	PtrMemberAccess	f -> brushprimit_texdef
>2843	Identifier	brushprimit_texdef
>2844	Identifier	f
>2845	ExpressionStatement	 
>2846	AssignmentExpr	det = SarrusDet ( M [ 0 ] , M [ 1 ] , M [ 2 ] )
>2847	CallExpression	SarrusDet ( M [ 0 ] , M [ 1 ] , M [ 2 ] )
>2848	ArgumentList	M [ 0 ]
>2849	Argument	M [ 2 ]
>2850	ArrayIndexing	M [ 2 ]
>2851	PrimaryExpression	2
>2852	Identifier	M
>2853	Argument	M [ 1 ]
>2854	ArrayIndexing	M [ 1 ]
>2855	PrimaryExpression	1
>2856	Identifier	M
>2857	Argument	M [ 0 ]
>2858	ArrayIndexing	M [ 0 ]
>2859	PrimaryExpression	0
>2860	Identifier	M
>2861	Callee	SarrusDet
>2862	Identifier	SarrusDet
>2863	Identifier	det
>2864	ExpressionStatement	 
>2865	AssignmentExpr	D [ 1 ] [ 2 ] = f -> brushprimit_texdef . coords [ 1 ] [ 1 ] + f -> brushprimit_texdef . coords [ 1 ] [ \
>2866	AdditiveExpression	f -> brushprimit_texdef . coords [ 1 ] [ 1 ] + f -> brushprimit_texdef . coords [ 1 ] [ 2 ]
>2867	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 2 ]
>2868	PrimaryExpression	2
>2869	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>2870	PrimaryExpression	1
>2871	MemberAccess	f -> brushprimit_texdef . coords
>2872	Identifier	coords
>2873	PtrMemberAccess	f -> brushprimit_texdef
>2874	Identifier	brushprimit_texdef
>2875	Identifier	f
>2876	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 1 ]
>2877	PrimaryExpression	1
>2878	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>2879	PrimaryExpression	1
>2880	MemberAccess	f -> brushprimit_texdef . coords
>2881	Identifier	coords
>2882	PtrMemberAccess	f -> brushprimit_texdef
>2883	Identifier	brushprimit_texdef
>2884	Identifier	f
>2885	ArrayIndexing	D [ 1 ] [ 2 ]
>2886	PrimaryExpression	2
>2887	ArrayIndexing	D [ 1 ]
>2888	PrimaryExpression	1
>2889	Identifier	D
>2890	ExpressionStatement	 
>2891	AssignmentExpr	D [ 1 ] [ 1 ] = f -> brushprimit_texdef . coords [ 1 ] [ 0 ] + f -> brushprimit_texdef . coords [ 1 ] [ \
>2892	AdditiveExpression	f -> brushprimit_texdef . coords [ 1 ] [ 0 ] + f -> brushprimit_texdef . coords [ 1 ] [ 2 ]
>2893	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 2 ]
>2894	PrimaryExpression	2
>2895	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>2896	PrimaryExpression	1
>2897	MemberAccess	f -> brushprimit_texdef . coords
>2898	Identifier	coords
>2899	PtrMemberAccess	f -> brushprimit_texdef
>2900	Identifier	brushprimit_texdef
>2901	Identifier	f
>2902	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 0 ]
>2903	PrimaryExpression	0
>2904	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>2905	PrimaryExpression	1
>2906	MemberAccess	f -> brushprimit_texdef . coords
>2907	Identifier	coords
>2908	PtrMemberAccess	f -> brushprimit_texdef
>2909	Identifier	brushprimit_texdef
>2910	Identifier	f
>2911	ArrayIndexing	D [ 1 ] [ 1 ]
>2912	PrimaryExpression	1
>2913	ArrayIndexing	D [ 1 ]
>2914	PrimaryExpression	1
>2915	Identifier	D
>2916	ExpressionStatement	 
>2917	AssignmentExpr	D [ 1 ] [ 0 ] = f -> brushprimit_texdef . coords [ 1 ] [ 2 ]
>2918	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ] [ 2 ]
>2919	PrimaryExpression	2
>2920	ArrayIndexing	f -> brushprimit_texdef . coords [ 1 ]
>2921	PrimaryExpression	1
>2922	MemberAccess	f -> brushprimit_texdef . coords
>2923	Identifier	coords
>2924	PtrMemberAccess	f -> brushprimit_texdef
>2925	Identifier	brushprimit_texdef
>2926	Identifier	f
>2927	ArrayIndexing	D [ 1 ] [ 0 ]
>2928	PrimaryExpression	0
>2929	ArrayIndexing	D [ 1 ]
>2930	PrimaryExpression	1
>2931	Identifier	D
>2932	ExpressionStatement	 
>2933	AssignmentExpr	D [ 0 ] [ 2 ] = f -> brushprimit_texdef . coords [ 0 ] [ 1 ] + f -> brushprimit_texdef . coords [ 0 ] [ \
>2934	AdditiveExpression	f -> brushprimit_texdef . coords [ 0 ] [ 1 ] + f -> brushprimit_texdef . coords [ 0 ] [ 2 ]
>2935	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 2 ]
>2936	PrimaryExpression	2
>2937	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>2938	PrimaryExpression	0
>2939	MemberAccess	f -> brushprimit_texdef . coords
>2940	Identifier	coords
>2941	PtrMemberAccess	f -> brushprimit_texdef
>2942	Identifier	brushprimit_texdef
>2943	Identifier	f
>2944	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 1 ]
>2945	PrimaryExpression	1
>2946	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>2947	PrimaryExpression	0
>2948	MemberAccess	f -> brushprimit_texdef . coords
>2949	Identifier	coords
>2950	PtrMemberAccess	f -> brushprimit_texdef
>2951	Identifier	brushprimit_texdef
>2952	Identifier	f
>2953	ArrayIndexing	D [ 0 ] [ 2 ]
>2954	PrimaryExpression	2
>2955	ArrayIndexing	D [ 0 ]
>2956	PrimaryExpression	0
>2957	Identifier	D
>2958	ExpressionStatement	 
>2959	AssignmentExpr	D [ 0 ] [ 1 ] = f -> brushprimit_texdef . coords [ 0 ] [ 0 ] + f -> brushprimit_texdef . coords [ 0 ] [ \
>2960	AdditiveExpression	f -> brushprimit_texdef . coords [ 0 ] [ 0 ] + f -> brushprimit_texdef . coords [ 0 ] [ 2 ]
>2961	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 2 ]
>2962	PrimaryExpression	2
>2963	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>2964	PrimaryExpression	0
>2965	MemberAccess	f -> brushprimit_texdef . coords
>2966	Identifier	coords
>2967	PtrMemberAccess	f -> brushprimit_texdef
>2968	Identifier	brushprimit_texdef
>2969	Identifier	f
>2970	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 0 ]
>2971	PrimaryExpression	0
>2972	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>2973	PrimaryExpression	0
>2974	MemberAccess	f -> brushprimit_texdef . coords
>2975	Identifier	coords
>2976	PtrMemberAccess	f -> brushprimit_texdef
>2977	Identifier	brushprimit_texdef
>2978	Identifier	f
>2979	ArrayIndexing	D [ 0 ] [ 1 ]
>2980	PrimaryExpression	1
>2981	ArrayIndexing	D [ 0 ]
>2982	PrimaryExpression	0
>2983	Identifier	D
>2984	ExpressionStatement	 
>2985	AssignmentExpr	D [ 0 ] [ 0 ] = f -> brushprimit_texdef . coords [ 0 ] [ 2 ]
>2986	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ] [ 2 ]
>2987	PrimaryExpression	2
>2988	ArrayIndexing	f -> brushprimit_texdef . coords [ 0 ]
>2989	PrimaryExpression	0
>2990	MemberAccess	f -> brushprimit_texdef . coords
>2991	Identifier	coords
>2992	PtrMemberAccess	f -> brushprimit_texdef
>2993	Identifier	brushprimit_texdef
>2994	Identifier	f
>2995	ArrayIndexing	D [ 0 ] [ 0 ]
>2996	PrimaryExpression	0
>2997	ArrayIndexing	D [ 0 ]
>2998	PrimaryExpression	0
>2999	Identifier	D
>3000	ExpressionStatement	 
>3001	AssignmentExpr	M [ 2 ] [ 2 ] = 1.0f
>3002	PrimaryExpression	1.0f
>3003	ArrayIndexing	M [ 2 ] [ 2 ]
>3004	PrimaryExpression	2
>3005	ArrayIndexing	M [ 2 ]
>3006	PrimaryExpression	2
>3007	Identifier	M
>3008	ExpressionStatement	 
>3009	AssignmentExpr	M [ 1 ] [ 2 ] = lvecT [ 1 ]
>3010	ArrayIndexing	lvecT [ 1 ]
>3011	PrimaryExpression	1
>3012	Identifier	lvecT
>3013	ArrayIndexing	M [ 1 ] [ 2 ]
>3014	PrimaryExpression	2
>3015	ArrayIndexing	M [ 1 ]
>3016	PrimaryExpression	1
>3017	Identifier	M
>3018	ExpressionStatement	 
>3019	AssignmentExpr	M [ 0 ] [ 2 ] = lvecT [ 0 ]
>3020	ArrayIndexing	lvecT [ 0 ]
>3021	PrimaryExpression	0
>3022	Identifier	lvecT
>3023	ArrayIndexing	M [ 0 ] [ 2 ]
>3024	PrimaryExpression	2
>3025	ArrayIndexing	M [ 0 ]
>3026	PrimaryExpression	0
>3027	Identifier	M
>3028	ExpressionStatement	 
>3029	AssignmentExpr	M [ 2 ] [ 1 ] = 1.0f
>3030	PrimaryExpression	1.0f
>3031	ArrayIndexing	M [ 2 ] [ 1 ]
>3032	PrimaryExpression	1
>3033	ArrayIndexing	M [ 2 ]
>3034	PrimaryExpression	2
>3035	Identifier	M
>3036	ExpressionStatement	 
>3037	AssignmentExpr	M [ 1 ] [ 1 ] = lvecS [ 1 ]
>3038	ArrayIndexing	lvecS [ 1 ]
>3039	PrimaryExpression	1
>3040	Identifier	lvecS
>3041	ArrayIndexing	M [ 1 ] [ 1 ]
>3042	PrimaryExpression	1
>3043	ArrayIndexing	M [ 1 ]
>3044	PrimaryExpression	1
>3045	Identifier	M
>3046	ExpressionStatement	 
>3047	AssignmentExpr	M [ 0 ] [ 1 ] = lvecS [ 0 ]
>3048	ArrayIndexing	lvecS [ 0 ]
>3049	PrimaryExpression	0
>3050	Identifier	lvecS
>3051	ArrayIndexing	M [ 0 ] [ 1 ]
>3052	PrimaryExpression	1
>3053	ArrayIndexing	M [ 0 ]
>3054	PrimaryExpression	0
>3055	Identifier	M
>3056	ExpressionStatement	 
>3057	AssignmentExpr	M [ 2 ] [ 0 ] = 1.0f
>3058	PrimaryExpression	1.0f
>3059	ArrayIndexing	M [ 2 ] [ 0 ]
>3060	PrimaryExpression	0
>3061	ArrayIndexing	M [ 2 ]
>3062	PrimaryExpression	2
>3063	Identifier	M
>3064	ExpressionStatement	 
>3065	AssignmentExpr	M [ 1 ] [ 0 ] = lOrig [ 1 ]
>3066	ArrayIndexing	lOrig [ 1 ]
>3067	PrimaryExpression	1
>3068	Identifier	lOrig
>3069	ArrayIndexing	M [ 1 ] [ 0 ]
>3070	PrimaryExpression	0
>3071	ArrayIndexing	M [ 1 ]
>3072	PrimaryExpression	1
>3073	Identifier	M
>3074	ExpressionStatement	 
>3075	AssignmentExpr	M [ 0 ] [ 0 ] = lOrig [ 0 ]
>3076	ArrayIndexing	lOrig [ 0 ]
>3077	PrimaryExpression	0
>3078	Identifier	lOrig
>3079	ArrayIndexing	M [ 0 ] [ 0 ]
>3080	PrimaryExpression	0
>3081	ArrayIndexing	M [ 0 ]
>3082	PrimaryExpression	0
>3083	Identifier	M
>3084	ExpressionStatement	 
>3085	AssignmentExpr	lvecT [ 1 ] = DotProduct ( rvecT , rtexT )
>3086	CallExpression	DotProduct ( rvecT , rtexT )
>3087	ArgumentList	rvecT
>3088	Argument	rtexT
>3089	Identifier	rtexT
>3090	Argument	rvecT
>3091	Identifier	rvecT
>3092	Callee	DotProduct
>3093	Identifier	DotProduct
>3094	ArrayIndexing	lvecT [ 1 ]
>3095	PrimaryExpression	1
>3096	Identifier	lvecT
>3097	ExpressionStatement	 
>3098	AssignmentExpr	lvecT [ 0 ] = DotProduct ( rvecT , rtexS )
>3099	CallExpression	DotProduct ( rvecT , rtexS )
>3100	ArgumentList	rvecT
>3101	Argument	rtexS
>3102	Identifier	rtexS
>3103	Argument	rvecT
>3104	Identifier	rvecT
>3105	Callee	DotProduct
>3106	Identifier	DotProduct
>3107	ArrayIndexing	lvecT [ 0 ]
>3108	PrimaryExpression	0
>3109	Identifier	lvecT
>3110	ExpressionStatement	 
>3111	AssignmentExpr	lvecS [ 1 ] = DotProduct ( rvecS , rtexT )
>3112	CallExpression	DotProduct ( rvecS , rtexT )
>3113	ArgumentList	rvecS
>3114	Argument	rtexT
>3115	Identifier	rtexT
>3116	Argument	rvecS
>3117	Identifier	rvecS
>3118	Callee	DotProduct
>3119	Identifier	DotProduct
>3120	ArrayIndexing	lvecS [ 1 ]
>3121	PrimaryExpression	1
>3122	Identifier	lvecS
>3123	ExpressionStatement	 
>3124	AssignmentExpr	lvecS [ 0 ] = DotProduct ( rvecS , rtexS )
>3125	CallExpression	DotProduct ( rvecS , rtexS )
>3126	ArgumentList	rvecS
>3127	Argument	rtexS
>3128	Identifier	rtexS
>3129	Argument	rvecS
>3130	Identifier	rvecS
>3131	Callee	DotProduct
>3132	Identifier	DotProduct
>3133	ArrayIndexing	lvecS [ 0 ]
>3134	PrimaryExpression	0
>3135	Identifier	lvecS
>3136	ExpressionStatement	 
>3137	AssignmentExpr	lOrig [ 1 ] = DotProduct ( rOrig , rtexT )
>3138	CallExpression	DotProduct ( rOrig , rtexT )
>3139	ArgumentList	rOrig
>3140	Argument	rtexT
>3141	Identifier	rtexT
>3142	Argument	rOrig
>3143	Identifier	rOrig
>3144	Callee	DotProduct
>3145	Identifier	DotProduct
>3146	ArrayIndexing	lOrig [ 1 ]
>3147	PrimaryExpression	1
>3148	Identifier	lOrig
>3149	ExpressionStatement	 
>3150	AssignmentExpr	lOrig [ 0 ] = DotProduct ( rOrig , rtexS )
>3151	CallExpression	DotProduct ( rOrig , rtexS )
>3152	ArgumentList	rOrig
>3153	Argument	rtexS
>3154	Identifier	rtexS
>3155	Argument	rOrig
>3156	Identifier	rOrig
>3157	Callee	DotProduct
>3158	Identifier	DotProduct
>3159	ArrayIndexing	lOrig [ 0 ]
>3160	PrimaryExpression	0
>3161	Identifier	lOrig
>3162	ExpressionStatement	 
>3163	CallExpression	ComputeAxisBase ( rNormal , rtexS , rtexT )
>3164	ArgumentList	rNormal
>3165	Argument	rtexT
>3166	Identifier	rtexT
>3167	Argument	rtexS
>3168	Identifier	rtexS
>3169	Argument	rNormal
>3170	Identifier	rNormal
>3171	Callee	ComputeAxisBase
>3172	Identifier	ComputeAxisBase
>3173	ExpressionStatement	 
>3174	CallExpression	VectorRotate ( f -> plane . normal , vRotate , rNormal )
>3175	ArgumentList	f -> plane . normal
>3176	Argument	rNormal
>3177	Identifier	rNormal
>3178	Argument	vRotate
>3179	Identifier	vRotate
>3180	Argument	f -> plane . normal
>3181	MemberAccess	f -> plane . normal
>3182	Identifier	normal
>3183	PtrMemberAccess	f -> plane
>3184	Identifier	plane
>3185	Identifier	f
>3186	Callee	VectorRotate
>3187	Identifier	VectorRotate
>3188	ExpressionStatement	 
>3189	CallExpression	VectorRotate ( texT , vRotate , vOrigin , rvecT )
>3190	ArgumentList	texT
>3191	Argument	rvecT
>3192	Identifier	rvecT
>3193	Argument	vOrigin
>3194	Identifier	vOrigin
>3195	Argument	vRotate
>3196	Identifier	vRotate
>3197	Argument	texT
>3198	Identifier	texT
>3199	Callee	VectorRotate
>3200	Identifier	VectorRotate
>3201	ExpressionStatement	 
>3202	CallExpression	VectorRotate ( texS , vRotate , vOrigin , rvecS )
>3203	ArgumentList	texS
>3204	Argument	rvecS
>3205	Identifier	rvecS
>3206	Argument	vOrigin
>3207	Identifier	vOrigin
>3208	Argument	vRotate
>3209	Identifier	vRotate
>3210	Argument	texS
>3211	Identifier	texS
>3212	Callee	VectorRotate
>3213	Identifier	VectorRotate
>3214	ExpressionStatement	 
>3215	CallExpression	VectorRotate ( Orig , vRotate , vOrigin , rOrig )
>3216	ArgumentList	Orig
>3217	Argument	rOrig
>3218	Identifier	rOrig
>3219	Argument	vOrigin
>3220	Identifier	vOrigin
>3221	Argument	vRotate
>3222	Identifier	vRotate
>3223	Argument	Orig
>3224	Identifier	Orig
>3225	Callee	VectorRotate
>3226	Identifier	VectorRotate
>3227	ExpressionStatement	 
>3228	CallExpression	VectorSet ( Orig , 0.0f , 0.0f , 0.0f )
>3229	ArgumentList	Orig
>3230	Argument	0.0f
>3231	PrimaryExpression	0.0f
>3232	Argument	0.0f
>3233	PrimaryExpression	0.0f
>3234	Argument	0.0f
>3235	PrimaryExpression	0.0f
>3236	Argument	Orig
>3237	Identifier	Orig
>3238	Callee	VectorSet
>3239	Identifier	VectorSet
>3240	ExpressionStatement	 
>3241	AssignmentExpr	vRotate [ nAxis ] = fDeg
>3242	Identifier	fDeg
>3243	ArrayIndexing	vRotate [ nAxis ]
>3244	Identifier	nAxis
>3245	Identifier	vRotate
>3246	ExpressionStatement	 
>3247	CallExpression	VectorSet ( vRotate , 0.0f , 0.0f , 0.0f )
>3248	ArgumentList	vRotate
>3249	Argument	0.0f
>3250	PrimaryExpression	0.0f
>3251	Argument	0.0f
>3252	PrimaryExpression	0.0f
>3253	Argument	0.0f
>3254	PrimaryExpression	0.0f
>3255	Argument	vRotate
>3256	Identifier	vRotate
>3257	Callee	VectorSet
>3258	Identifier	VectorSet
>3259	ExpressionStatement	 
>3260	CallExpression	ComputeAxisBase ( f -> plane . normal , texS , texT )
>3261	ArgumentList	f -> plane . normal
>3262	Argument	texT
>3263	Identifier	texT
>3264	Argument	texS
>3265	Identifier	texS
>3266	Argument	f -> plane . normal
>3267	MemberAccess	f -> plane . normal
>3268	Identifier	normal
>3269	PtrMemberAccess	f -> plane
>3270	Identifier	plane
>3271	Identifier	f
>3272	Callee	ComputeAxisBase
>3273	Identifier	ComputeAxisBase
>3274	IdentifierDeclStatement	 
>3275	IdentifierDecl	D [ 2 ]
>3276	PrimaryExpression	2
>3277	Identifier	D
>3278	IdentifierDeclType	vec3_t [ 2 ]
>3279	IdentifierDeclStatement	 
>3280	IdentifierDecl	det
>3281	Identifier	det
>3282	IdentifierDeclType	vec_t
>3283	IdentifierDeclStatement	 
>3284	IdentifierDecl	M [ 3 ]
>3285	PrimaryExpression	3
>3286	Identifier	M
>3287	IdentifierDeclType	vec3_t [ 3 ]
>3288	IdentifierDeclStatement	 
>3289	IdentifierDecl	lvecT
>3290	Identifier	lvecT
>3291	IdentifierDeclType	vec3_t
>3292	IdentifierDecl	lvecS
>3293	Identifier	lvecS
>3294	IdentifierDeclType	vec3_t
>3295	IdentifierDecl	lOrig
>3296	Identifier	lOrig
>3297	IdentifierDeclType	vec3_t
>3298	IdentifierDeclStatement	 
>3299	IdentifierDecl	rtexT
>3300	Identifier	rtexT
>3301	IdentifierDeclType	vec3_t
>3302	IdentifierDecl	rtexS
>3303	Identifier	rtexS
>3304	IdentifierDeclType	vec3_t
>3305	IdentifierDeclStatement	 
>3306	IdentifierDecl	rNormal
>3307	Identifier	rNormal
>3308	IdentifierDeclType	vec3_t
>3309	IdentifierDeclStatement	 
>3310	IdentifierDecl	rvecT
>3311	Identifier	rvecT
>3312	IdentifierDeclType	vec3_t
>3313	IdentifierDecl	rvecS
>3314	Identifier	rvecS
>3315	IdentifierDeclType	vec3_t
>3316	IdentifierDecl	rOrig
>3317	Identifier	rOrig
>3318	IdentifierDeclType	vec3_t
>3319	IdentifierDeclStatement	 
>3320	IdentifierDecl	Orig
>3321	Identifier	Orig
>3322	IdentifierDeclType	vec3_t
>3323	IdentifierDeclStatement	 
>3324	IdentifierDecl	vRotate
>3325	Identifier	vRotate
>3326	IdentifierDeclType	vec3_t
>3327	IdentifierDeclStatement	 
>3328	IdentifierDecl	texT
>3329	Identifier	texT
>3330	IdentifierDeclType	vec3_t
>3331	IdentifierDecl	texS
>3332	Identifier	texS
>3333	IdentifierDeclType	vec3_t
>3379	FunctionDef	ComputeBest2DVector (vec3_t v , vec3_t X , vec3_t Y , int & x , int & y)
>3380	ParameterList	vec3_t v , vec3_t X , vec3_t Y , int & x , int & y
>3381	Parameter	 
>3382	Identifier	y
>3383	ParameterType	int &
>3384	Parameter	 
>3385	Identifier	x
>3386	ParameterType	int &
>3387	Parameter	 
>3388	Identifier	Y
>3389	ParameterType	vec3_t
>3390	Parameter	 
>3391	Identifier	X
>3392	ParameterType	vec3_t
>3393	Parameter	 
>3394	Identifier	v
>3395	ParameterType	vec3_t
>3396	ReturnType	void
>3397	CompoundStatement	 
>3398	IfStatement	if ( fabs ( sy ) > fabs ( sx ) )
>3399	ElseStatement	else
>3400	CompoundStatement	 
>3401	IfStatement	if ( sx > 0.0 )
>3402	ElseStatement	else
>3403	ExpressionStatement	 
>3404	AssignmentExpr	x = - 1
>3405	UnaryOp	- 1
>3406	PrimaryExpression	1
>3407	UnaryOperator	-
>3408	Identifier	x
>3409	ExpressionStatement	 
>3410	AssignmentExpr	x = 1
>3411	PrimaryExpression	1
>3412	Identifier	x
>3413	Condition	 
>3414	RelationalExpression	sx > 0.0
>3415	PrimaryExpression	0.0
>3416	Identifier	sx
>3417	ExpressionStatement	 
>3418	AssignmentExpr	y = 0
>3419	PrimaryExpression	0
>3420	Identifier	y
>3421	CompoundStatement	 
>3422	IfStatement	if ( sy > 0.0 )
>3423	ElseStatement	else
>3424	ExpressionStatement	 
>3425	AssignmentExpr	y = - 1
>3426	UnaryOp	- 1
>3427	PrimaryExpression	1
>3428	UnaryOperator	-
>3429	Identifier	y
>3430	ExpressionStatement	 
>3431	AssignmentExpr	y = 1
>3432	PrimaryExpression	1
>3433	Identifier	y
>3434	Condition	 
>3435	RelationalExpression	sy > 0.0
>3436	PrimaryExpression	0.0
>3437	Identifier	sy
>3438	ExpressionStatement	 
>3439	AssignmentExpr	x = 0
>3440	PrimaryExpression	0
>3441	Identifier	x
>3442	Condition	 
>3443	RelationalExpression	fabs ( sy ) > fabs ( sx )
>3444	CallExpression	fabs ( sx )
>3445	ArgumentList	sx
>3446	Argument	sx
>3447	Identifier	sx
>3448	Callee	fabs
>3449	Identifier	fabs
>3450	CallExpression	fabs ( sy )
>3451	ArgumentList	sy
>3452	Argument	sy
>3453	Identifier	sy
>3454	Callee	fabs
>3455	Identifier	fabs
>3456	ExpressionStatement	 
>3457	AssignmentExpr	sy = DotProduct ( v , Y )
>3458	CallExpression	DotProduct ( v , Y )
>3459	ArgumentList	v
>3460	Argument	Y
>3461	Identifier	Y
>3462	Argument	v
>3463	Identifier	v
>3464	Callee	DotProduct
>3465	Identifier	DotProduct
>3466	Identifier	sy
>3467	ExpressionStatement	 
>3468	AssignmentExpr	sx = DotProduct ( v , X )
>3469	CallExpression	DotProduct ( v , X )
>3470	ArgumentList	v
>3471	Argument	X
>3472	Identifier	X
>3473	Argument	v
>3474	Identifier	v
>3475	Callee	DotProduct
>3476	Identifier	DotProduct
>3477	Identifier	sx
>3478	IdentifierDeclStatement	 
>3479	IdentifierDecl	sy
>3480	Identifier	sy
>3481	IdentifierDeclType	double
>3482	IdentifierDecl	sx
>3483	Identifier	sx
>3484	IdentifierDeclType	double
<3=15,14,4
<4=11,8,5
<5=7,6
<8=10,9
<11=13,12
<15=16
<16=17
<17=77,18
<18=66,19
<19=55,20
<20=44,21
<21=33,22
<22=30,23
<23=27,24
<24=26,25
<27=29,28
<30=32,31
<33=41,34
<34=38,35
<35=37,36
<38=40,39
<41=43,42
<44=52,45
<45=49,46
<46=48,47
<49=51,50
<52=54,53
<55=63,56
<56=60,57
<57=59,58
<60=62,61
<63=65,64
<66=74,67
<67=71,68
<68=70,69
<71=73,72
<74=76,75
<77=85,78
<78=82,79
<79=81,80
<82=84,83
<85=87,86
<97=109,108,98
<98=105,102,99
<99=101,100
<102=104,103
<105=107,106
<109=296,278,260,242,208,193,180,169,163,143,123,110
<110=111
<111=120,112
<112=119,113
<113=117,114
<114=115
<115=116
<117=118
<120=122,121
<123=124
<124=140,125
<125=132,126
<126=130,127
<127=128
<128=129
<130=131
<132=139,133
<133=137,134
<134=135
<135=136
<137=138
<140=142,141
<143=144
<144=160,145
<145=152,146
<146=150,147
<147=148
<148=149
<150=151
<152=159,153
<153=157,154
<154=155
<155=156
<157=158
<160=162,161
<163=164
<164=166,165
<166=168,167
<169=170
<170=177,171
<171=175,172
<172=173
<173=174
<175=176
<177=179,178
<180=181
<181=190,182
<182=189,183
<183=187,184
<184=185
<185=186
<187=188
<190=192,191
<193=194
<194=207,195
<195=205,196
<196=201,197
<197=198
<198=200,199
<201=202
<202=204,203
<205=206
<208=209
<209=241,210
<210=240,211
<211=238,212
<212=234,213
<213=214
<214=232,215
<215=216
<216=217
<217=225,218
<218=222,219
<219=221,220
<222=224,223
<225=229,226
<226=228,227
<229=231,230
<232=233
<234=235
<235=237,236
<238=239
<242=249,243
<243=244
<244=246,245
<246=248,247
<249=250
<250=252,251
<252=258,253
<253=254
<254=255
<255=257,256
<258=259
<260=267,261
<261=262
<262=264,263
<264=266,265
<267=268
<268=270,269
<270=276,271
<271=272
<272=273
<273=275,274
<276=277
<278=285,279
<279=280
<280=282,281
<282=284,283
<285=286
<286=288,287
<288=294,289
<289=290
<290=291
<291=293,292
<294=295
<296=300,297
<297=299,298
<300=302,301
<319=325,324,320
<320=321
<321=323,322
<325=679,675,674,668,629,613,598,585,570,559,544,533,518,503,492,477,462,446,430,404,378,352,326
<326=327
<327=343,328
<328=338,329
<329=331,330
<331=333,332
<333=335,334
<335=337,336
<338=340,339
<340=342,341
<343=345,344
<345=347,346
<347=349,348
<349=351,350
<352=353
<353=369,354
<354=364,355
<355=357,356
<357=359,358
<359=361,360
<361=363,362
<364=366,365
<366=368,367
<369=371,370
<371=373,372
<373=375,374
<375=377,376
<378=379
<379=395,380
<380=390,381
<381=383,382
<383=385,384
<385=387,386
<387=389,388
<390=392,391
<392=394,393
<395=397,396
<397=399,398
<399=401,400
<401=403,402
<404=405
<405=421,406
<406=416,407
<407=409,408
<409=411,410
<411=413,412
<413=415,414
<416=418,417
<418=420,419
<421=423,422
<423=425,424
<425=427,426
<427=429,428
<430=431
<431=437,432
<432=434,433
<434=436,435
<437=439,438
<439=441,440
<441=443,442
<443=445,444
<446=447
<447=453,448
<448=450,449
<450=452,451
<453=455,454
<455=457,456
<457=459,458
<459=461,460
<462=463
<463=475,464
<464=471,467,465
<465=466
<467=468
<468=470,469
<471=472
<472=474,473
<475=476
<477=478
<478=490,479
<479=486,484,480
<480=481
<481=483,482
<484=485
<486=487
<487=489,488
<490=491
<492=493
<493=501,494
<494=499,495
<495=496
<496=498,497
<499=500
<501=502
<503=504
<504=516,505
<505=512,508,506
<506=507
<508=509
<509=511,510
<512=513
<513=515,514
<516=517
<518=519
<519=531,520
<520=527,525,521
<521=522
<522=524,523
<525=526
<527=528
<528=530,529
<531=532
<533=534
<534=542,535
<535=540,536
<536=537
<537=539,538
<540=541
<542=543
<544=545
<545=557,546
<546=553,549,547
<547=548
<549=550
<550=552,551
<553=554
<554=556,555
<557=558
<559=560
<560=568,561
<561=566,562
<562=563
<563=565,564
<566=567
<568=569
<570=571
<571=583,572
<572=581,575,573
<573=574
<575=576
<576=578,577
<578=580,579
<581=582
<583=584
<585=586
<586=596,587
<587=590,588
<588=589
<590=591
<591=593,592
<593=595,594
<596=597
<598=599
<599=611,600
<600=605,603,601
<601=602
<603=604
<605=606
<606=608,607
<608=610,609
<611=612
<613=623,614
<614=616,615
<616=617
<617=621,618
<618=619
<619=620
<621=622
<623=624
<624=628,625
<625=627,626
<629=638,630
<630=631
<631=632
<632=636,633
<633=634
<634=635
<636=637
<638=639
<639=659,640
<640=650,641
<641=643,642
<643=645,644
<645=647,646
<647=649,648
<650=652,651
<652=654,653
<654=656,655
<656=658,657
<659=661,660
<661=663,662
<663=665,664
<665=667,666
<668=669
<669=671,670
<671=673,672
<675=676
<676=678,677
<679=683,680
<680=682,681
<683=685,684
<711=720,719,712
<712=716,713
<713=715,714
<716=718,717
<720=1143,1136,1121,1024,1020,721
<721=1016,1010,1007,722
<722=992,977,807,765,723
<723=724
<724=758,725
<725=747,726
<726=736,727
<727=729,728
<729=731,730
<731=733,732
<733=735,734
<736=738,737
<738=740,739
<740=742,741
<742=744,743
<744=746,745
<747=749,748
<749=751,750
<751=753,752
<753=755,754
<755=757,756
<758=760,759
<760=762,761
<762=764,763
<765=766
<766=800,767
<767=789,768
<768=778,769
<769=771,770
<771=773,772
<773=775,774
<775=777,776
<778=780,779
<780=782,781
<782=784,783
<784=786,785
<786=788,787
<789=791,790
<791=793,792
<793=795,794
<795=797,796
<797=799,798
<800=802,801
<802=804,803
<804=806,805
<807=973,808
<808=934,895,809
<809=861,810
<810=811
<811=827,820,812
<812=813
<813=814
<814=818,815
<815=816
<816=817
<818=819
<820=821
<821=825,822
<822=823
<823=824
<825=826
<827=828
<828=845,829
<829=831,830
<831=843,832
<832=833
<833=834
<834=842,835
<835=837,836
<837=839,838
<839=841,840
<843=844
<845=847,846
<847=859,848
<848=849
<849=850
<850=858,851
<851=853,852
<853=855,854
<855=857,856
<859=860
<861=862
<862=879,863
<863=865,864
<865=877,866
<866=867
<867=868
<868=876,869
<869=871,870
<871=873,872
<873=875,874
<877=878
<879=881,880
<881=893,882
<882=883
<883=884
<884=892,885
<885=887,886
<887=889,888
<889=891,890
<893=894
<895=896
<896=933,932,897
<897=931,898
<898=920,899
<899=909,900
<900=902,901
<902=904,903
<904=906,905
<906=908,907
<909=911,910
<911=913,912
<913=915,914
<915=917,916
<917=919,918
<920=922,921
<922=924,923
<924=926,925
<926=928,927
<928=930,929
<934=935
<935=972,971,936
<936=970,937
<937=959,938
<938=948,939
<939=941,940
<941=943,942
<943=945,944
<945=947,946
<948=950,949
<950=952,951
<952=954,953
<954=956,955
<956=958,957
<959=961,960
<961=963,962
<963=965,964
<965=967,966
<967=969,968
<973=974
<974=976,975
<977=978
<978=991,979
<979=989,980
<980=983,981
<981=982
<983=984
<984=986,985
<986=988,987
<989=990
<992=993
<993=1006,994
<994=1004,995
<995=998,996
<996=997
<998=999
<999=1001,1000
<1001=1003,1002
<1004=1005
<1007=1009,1008
<1010=1011
<1011=1015,1012
<1012=1014,1013
<1016=1017
<1017=1019,1018
<1020=1021
<1021=1023,1022
<1024=1073,1025
<1025=1061,1049,1026
<1026=1027
<1027=1047,1028
<1028=1041,1039,1033,1029
<1029=1030
<1030=1032,1031
<1033=1034
<1034=1038,1035
<1035=1037,1036
<1039=1040
<1041=1042
<1042=1046,1043
<1043=1045,1044
<1047=1048
<1049=1050
<1050=1052,1051
<1052=1054,1053
<1054=1056,1055
<1056=1058,1057
<1058=1060,1059
<1061=1062
<1062=1064,1063
<1064=1066,1065
<1066=1068,1067
<1068=1070,1069
<1070=1072,1071
<1073=1074
<1074=1110,1075
<1075=1099,1076
<1076=1088,1077
<1077=1079,1078
<1079=1081,1080
<1081=1083,1082
<1083=1085,1084
<1085=1087,1086
<1088=1090,1089
<1090=1092,1091
<1092=1094,1093
<1094=1096,1095
<1096=1098,1097
<1099=1101,1100
<1101=1103,1102
<1103=1105,1104
<1105=1107,1106
<1107=1109,1108
<1110=1112,1111
<1112=1114,1113
<1114=1116,1115
<1116=1118,1117
<1118=1120,1119
<1121=1122
<1122=1134,1123
<1123=1128,1126,1124
<1124=1125
<1126=1127
<1128=1129
<1129=1131,1130
<1131=1133,1132
<1134=1135
<1136=1140,1137
<1137=1139,1138
<1140=1142,1141
<1143=1147,1144
<1144=1146,1145
<1147=1149,1148
<1190=1196,1195,1191
<1191=1192
<1192=1194,1193
<1196=1771,1767,1760,1753,1734,1197
<1197=1200,1198
<1198=1199
<1200=1723,1710,1201
<1201=1701,1679,1202
<1202=1203
<1203=1672,1666,1624,1519,1512,1493,1486,1467,1430,1423,1404,1397,1378,1341,1334,1315,1308,1289,1282,1271,1204
<1204=1266,1205
<1205=1259,1246,1239,1226,1219,1206
<1206=1207
<1207=1214,1208
<1208=1212,1209
<1209=1210
<1210=1211
<1212=1213
<1214=1216,1215
<1216=1218,1217
<1219=1220
<1220=1224,1221
<1221=1222
<1222=1223
<1224=1225
<1226=1227
<1227=1234,1228
<1228=1232,1229
<1229=1230
<1230=1231
<1232=1233
<1234=1236,1235
<1236=1238,1237
<1239=1240
<1240=1244,1241
<1241=1242
<1242=1243
<1244=1245
<1246=1247
<1247=1254,1248
<1248=1252,1249
<1249=1250
<1250=1251
<1252=1253
<1254=1256,1255
<1256=1258,1257
<1259=1260
<1260=1264,1261
<1261=1262
<1262=1263
<1264=1265
<1266=1267
<1267=1269,1268
<1269=1270
<1271=1272
<1272=1276,1273
<1273=1274
<1274=1275
<1276=1277
<1277=1279,1278
<1279=1281,1280
<1282=1283
<1283=1287,1284
<1284=1285
<1285=1286
<1287=1288
<1289=1299,1290
<1290=1292,1291
<1292=1293
<1293=1297,1294
<1294=1295
<1295=1296
<1297=1298
<1299=1300
<1300=1306,1301
<1301=1304,1302
<1302=1303
<1304=1305
<1306=1307
<1308=1309
<1309=1313,1310
<1310=1311
<1311=1312
<1313=1314
<1315=1325,1316
<1316=1318,1317
<1318=1319
<1319=1323,1320
<1320=1321
<1321=1322
<1323=1324
<1325=1326
<1326=1332,1327
<1327=1330,1328
<1328=1329
<1330=1331
<1332=1333
<1334=1335
<1335=1339,1336
<1336=1337
<1337=1338
<1339=1340
<1341=1374,1370,1367,1342
<1342=1360,1343
<1343=1344
<1344=1351,1345
<1345=1349,1346
<1346=1347
<1347=1348
<1349=1350
<1351=1353,1352
<1353=1355,1354
<1355=1357,1356
<1357=1359,1358
<1360=1361
<1361=1365,1362
<1362=1363
<1363=1364
<1365=1366
<1367=1369,1368
<1370=1371
<1371=1373,1372
<1374=1375
<1375=1377,1376
<1378=1388,1379
<1379=1381,1380
<1381=1382
<1382=1386,1383
<1383=1384
<1384=1385
<1386=1387
<1388=1389
<1389=1395,1390
<1390=1393,1391
<1391=1392
<1393=1394
<1395=1396
<1397=1398
<1398=1402,1399
<1399=1400
<1400=1401
<1402=1403
<1404=1414,1405
<1405=1407,1406
<1407=1408
<1408=1412,1409
<1409=1410
<1410=1411
<1412=1413
<1414=1415
<1415=1421,1416
<1416=1419,1417
<1417=1418
<1419=1420
<1421=1422
<1423=1424
<1424=1428,1425
<1425=1426
<1426=1427
<1428=1429
<1430=1463,1459,1456,1431
<1431=1449,1432
<1432=1433
<1433=1440,1434
<1434=1438,1435
<1435=1436
<1436=1437
<1438=1439
<1440=1442,1441
<1442=1444,1443
<1444=1446,1445
<1446=1448,1447
<1449=1450
<1450=1454,1451
<1451=1452
<1452=1453
<1454=1455
<1456=1458,1457
<1459=1460
<1460=1462,1461
<1463=1464
<1464=1466,1465
<1467=1477,1468
<1468=1470,1469
<1470=1471
<1471=1475,1472
<1472=1473
<1473=1474
<1475=1476
<1477=1478
<1478=1484,1479
<1479=1482,1480
<1480=1481
<1482=1483
<1484=1485
<1486=1487
<1487=1491,1488
<1488=1489
<1489=1490
<1491=1492
<1493=1503,1494
<1494=1496,1495
<1496=1497
<1497=1501,1498
<1498=1499
<1499=1500
<1501=1502
<1503=1504
<1504=1510,1505
<1505=1508,1506
<1506=1507
<1508=1509
<1510=1511
<1512=1513
<1513=1517,1514
<1514=1515
<1515=1516
<1517=1518
<1519=1620,1616,1613,1520
<1520=1601,1582,1547,1540,1521
<1521=1531,1522
<1522=1524,1523
<1524=1525
<1525=1529,1526
<1526=1527
<1527=1528
<1529=1530
<1531=1532
<1532=1538,1533
<1533=1536,1534
<1534=1535
<1536=1537
<1538=1539
<1540=1541
<1541=1545,1542
<1542=1543
<1543=1544
<1545=1546
<1547=1578,1574,1571,1548
<1548=1564,1549
<1549=1550
<1550=1557,1551
<1551=1555,1552
<1552=1553
<1553=1554
<1555=1556
<1557=1559,1558
<1559=1561,1560
<1561=1563,1562
<1564=1565
<1565=1569,1566
<1566=1567
<1567=1568
<1569=1570
<1571=1573,1572
<1574=1575
<1575=1577,1576
<1578=1579
<1579=1581,1580
<1582=1592,1583
<1583=1585,1584
<1585=1586
<1586=1590,1587
<1587=1588
<1588=1589
<1590=1591
<1592=1593
<1593=1599,1594
<1594=1597,1595
<1595=1596
<1597=1598
<1599=1600
<1601=1609,1602
<1602=1603
<1603=1607,1604
<1604=1605
<1605=1606
<1607=1608
<1609=1610
<1610=1612,1611
<1613=1615,1614
<1616=1617
<1617=1619,1618
<1620=1621
<1621=1623,1622
<1624=1660,1654,1625
<1625=1626
<1626=1650,1633,1627
<1627=1628
<1628=1630,1629
<1630=1632,1631
<1633=1644,1640,1635,1634
<1635=1639,1636
<1636=1638,1637
<1640=1641
<1641=1643,1642
<1644=1645
<1645=1649,1646
<1646=1648,1647
<1650=1651
<1651=1653,1652
<1654=1655
<1655=1657,1656
<1657=1659,1658
<1660=1661
<1661=1665,1662
<1662=1664,1663
<1666=1667
<1667=1669,1668
<1669=1671,1670
<1672=1673
<1673=1678,1674
<1674=1676,1675
<1676=1677
<1679=1694,1686,1680
<1680=1681
<1681=1683,1682
<1683=1685,1684
<1686=1687
<1687=1691,1688
<1688=1690,1689
<1691=1693,1692
<1694=1695
<1695=1700,1696
<1696=1698,1697
<1698=1699
<1701=1702
<1702=1708,1703
<1703=1706,1704
<1704=1705
<1706=1707
<1708=1709
<1710=1712,1711
<1712=1713
<1713=1722,1714
<1714=1720,1715
<1715=1718,1716
<1716=1717
<1718=1719
<1720=1721
<1723=1725,1724
<1725=1726
<1726=1733,1727
<1727=1731,1728
<1728=1729
<1729=1730
<1731=1732
<1734=1744,1735
<1735=1737,1736
<1737=1738
<1738=1742,1739
<1739=1740
<1740=1741
<1742=1743
<1744=1745
<1745=1751,1746
<1746=1749,1747
<1747=1748
<1749=1750
<1751=1752
<1753=1754
<1754=1758,1755
<1755=1756
<1756=1757
<1758=1759
<1760=1764,1761
<1761=1763,1762
<1764=1766,1765
<1767=1768
<1768=1770,1769
<1771=1772
<1772=1774,1773
<1822=1837,1836,1823
<1823=1833,1830,1827,1824
<1824=1826,1825
<1827=1829,1828
<1830=1832,1831
<1833=1835,1834
<1837=1998,1972,1946,1928,1910,1892,1874,1856,1838
<1838=1839
<1839=1849,1840
<1840=1848,1841
<1841=1843,1842
<1843=1845,1844
<1845=1847,1846
<1849=1851,1850
<1851=1853,1852
<1853=1855,1854
<1856=1857
<1857=1867,1858
<1858=1866,1859
<1859=1861,1860
<1861=1863,1862
<1863=1865,1864
<1867=1869,1868
<1869=1871,1870
<1871=1873,1872
<1874=1875
<1875=1885,1876
<1876=1884,1877
<1877=1879,1878
<1879=1881,1880
<1881=1883,1882
<1885=1887,1886
<1887=1889,1888
<1889=1891,1890
<1892=1893
<1893=1903,1894
<1894=1902,1895
<1895=1897,1896
<1897=1899,1898
<1899=1901,1900
<1903=1905,1904
<1905=1907,1906
<1907=1909,1908
<1910=1911
<1911=1921,1912
<1912=1920,1913
<1913=1915,1914
<1915=1917,1916
<1917=1919,1918
<1921=1923,1922
<1923=1925,1924
<1925=1927,1926
<1928=1929
<1929=1939,1930
<1930=1938,1931
<1931=1933,1932
<1933=1935,1934
<1935=1937,1936
<1939=1941,1940
<1941=1943,1942
<1943=1945,1944
<1946=1947
<1947=1971,1948
<1948=1960,1949
<1949=1958,1951,1950
<1951=1957,1952
<1952=1956,1953
<1953=1955,1954
<1958=1959
<1960=1969,1962,1961
<1962=1968,1963
<1963=1967,1964
<1964=1966,1965
<1969=1970
<1972=1973
<1973=1997,1974
<1974=1986,1975
<1975=1984,1977,1976
<1977=1983,1978
<1978=1982,1979
<1979=1981,1980
<1984=1985
<1986=1995,1988,1987
<1988=1994,1989
<1989=1993,1990
<1990=1992,1991
<1995=1996
<1998=2002,1999
<1999=2001,2000
<2002=2004,2003
<2034=2043,2042,2035
<2035=2039,2036
<2036=2038,2037
<2039=2041,2040
<2043=2507,2500,2495,2491,2486,2471,2460,2449,2441,2431,2423,2415,2407,2397,2389,2381,2373,2357,2331,2305,2289,2263,2237,2218,2189,2160,2131,2102,2073,2044
<2044=2045
<2045=2064,2046
<2046=2048,2047
<2048=2062,2049
<2049=2058,2054,2050
<2050=2051
<2051=2053,2052
<2054=2055
<2055=2057,2056
<2058=2059
<2059=2061,2060
<2062=2063
<2064=2066,2065
<2066=2068,2067
<2068=2070,2069
<2070=2072,2071
<2073=2074
<2074=2093,2075
<2075=2077,2076
<2077=2091,2078
<2078=2087,2083,2079
<2079=2080
<2080=2082,2081
<2083=2084
<2084=2086,2085
<2087=2088
<2088=2090,2089
<2091=2092
<2093=2095,2094
<2095=2097,2096
<2097=2099,2098
<2099=2101,2100
<2102=2103
<2103=2122,2104
<2104=2106,2105
<2106=2120,2107
<2107=2116,2112,2108
<2108=2109
<2109=2111,2110
<2112=2113
<2113=2115,2114
<2116=2117
<2117=2119,2118
<2120=2121
<2122=2124,2123
<2124=2126,2125
<2126=2128,2127
<2128=2130,2129
<2131=2132
<2132=2151,2133
<2133=2135,2134
<2135=2149,2136
<2136=2145,2141,2137
<2137=2138
<2138=2140,2139
<2141=2142
<2142=2144,2143
<2145=2146
<2146=2148,2147
<2149=2150
<2151=2153,2152
<2153=2155,2154
<2155=2157,2156
<2157=2159,2158
<2160=2161
<2161=2180,2162
<2162=2164,2163
<2164=2178,2165
<2165=2174,2170,2166
<2166=2167
<2167=2169,2168
<2170=2171
<2171=2173,2172
<2174=2175
<2175=2177,2176
<2178=2179
<2180=2182,2181
<2182=2184,2183
<2184=2186,2185
<2186=2188,2187
<2189=2190
<2190=2209,2191
<2191=2193,2192
<2193=2207,2194
<2194=2203,2199,2195
<2195=2196
<2196=2198,2197
<2199=2200
<2200=2202,2201
<2203=2204
<2204=2206,2205
<2207=2208
<2209=2211,2210
<2211=2213,2212
<2213=2215,2214
<2215=2217,2216
<2218=2219
<2219=2236,2220
<2220=2234,2221
<2221=2230,2226,2222
<2222=2223
<2223=2225,2224
<2226=2227
<2227=2229,2228
<2230=2231
<2231=2233,2232
<2234=2235
<2237=2238
<2238=2258,2239
<2239=2249,2240
<2240=2242,2241
<2242=2244,2243
<2244=2246,2245
<2246=2248,2247
<2249=2251,2250
<2251=2253,2252
<2253=2255,2254
<2255=2257,2256
<2258=2260,2259
<2260=2262,2261
<2263=2264
<2264=2284,2265
<2265=2275,2266
<2266=2268,2267
<2268=2270,2269
<2270=2272,2271
<2272=2274,2273
<2275=2277,2276
<2277=2279,2278
<2279=2281,2280
<2281=2283,2282
<2284=2286,2285
<2286=2288,2287
<2289=2290
<2290=2300,2291
<2291=2293,2292
<2293=2295,2294
<2295=2297,2296
<2297=2299,2298
<2300=2302,2301
<2302=2304,2303
<2305=2306
<2306=2326,2307
<2307=2317,2308
<2308=2310,2309
<2310=2312,2311
<2312=2314,2313
<2314=2316,2315
<2317=2319,2318
<2319=2321,2320
<2321=2323,2322
<2323=2325,2324
<2326=2328,2327
<2328=2330,2329
<2331=2332
<2332=2352,2333
<2333=2343,2334
<2334=2336,2335
<2336=2338,2337
<2338=2340,2339
<2340=2342,2341
<2343=2345,2344
<2345=2347,2346
<2347=2349,2348
<2349=2351,2350
<2352=2354,2353
<2354=2356,2355
<2357=2358
<2358=2368,2359
<2359=2361,2360
<2361=2363,2362
<2363=2365,2364
<2365=2367,2366
<2368=2370,2369
<2370=2372,2371
<2373=2374
<2374=2376,2375
<2376=2378,2377
<2378=2380,2379
<2381=2382
<2382=2384,2383
<2384=2386,2385
<2386=2388,2387
<2389=2390
<2390=2392,2391
<2392=2394,2393
<2394=2396,2395
<2397=2398
<2398=2402,2399
<2399=2401,2400
<2402=2404,2403
<2404=2406,2405
<2407=2408
<2408=2410,2409
<2410=2412,2411
<2412=2414,2413
<2415=2416
<2416=2418,2417
<2418=2420,2419
<2420=2422,2421
<2423=2424
<2424=2426,2425
<2426=2428,2427
<2428=2430,2429
<2431=2432
<2432=2436,2433
<2433=2435,2434
<2436=2438,2437
<2438=2440,2439
<2441=2442
<2442=2444,2443
<2444=2446,2445
<2446=2448,2447
<2449=2450
<2450=2459,2451
<2451=2457,2452
<2452=2455,2453
<2453=2454
<2455=2456
<2457=2458
<2460=2461
<2461=2470,2462
<2462=2468,2463
<2463=2466,2464
<2464=2465
<2466=2467
<2468=2469
<2471=2472
<2472=2484,2473
<2473=2478,2476,2474
<2474=2475
<2476=2477
<2478=2479
<2479=2481,2480
<2481=2483,2482
<2484=2485
<2486=2487
<2487=2490,2489,2488
<2491=2492
<2492=2494,2493
<2495=2496
<2496=2499,2498,2497
<2500=2504,2501
<2501=2503,2502
<2504=2506,2505
<2507=2511,2508
<2508=2510,2509
<2511=2513,2512
<2543=2555,2554,2544
<2544=2551,2548,2545
<2545=2547,2546
<2548=2550,2549
<2551=2553,2552
<2555=2634,2630,2615,2600,2585,2576,2565,2556
<2556=2557
<2557=2563,2558
<2558=2561,2559
<2559=2560
<2561=2562
<2563=2564
<2565=2566
<2566=2574,2567
<2567=2572,2570,2568
<2568=2569
<2570=2571
<2572=2573
<2574=2575
<2576=2577
<2577=2583,2578
<2578=2581,2579
<2579=2580
<2581=2582
<2583=2584
<2585=2586
<2586=2598,2587
<2587=2596,2590,2588
<2588=2589
<2590=2591
<2591=2595,2592
<2592=2594,2593
<2596=2597
<2598=2599
<2600=2601
<2601=2613,2602
<2602=2611,2605,2603
<2603=2604
<2605=2606
<2606=2610,2607
<2607=2609,2608
<2611=2612
<2613=2614
<2615=2616
<2616=2628,2617
<2617=2622,2620,2618
<2618=2619
<2620=2621
<2622=2623
<2623=2625,2624
<2625=2627,2626
<2628=2629
<2630=2631
<2631=2633,2632
<2634=2638,2635
<2635=2637,2636
<2638=2640,2639
<2655=2670,2669,2656
<2656=2666,2663,2660,2657
<2657=2659,2658
<2660=2662,2661
<2663=2665,2664
<2666=2668,2667
<2670=3327,3323,3319,3309,3305,3298,3288,3283,3279,3274,3259,3246,3240,3227,3214,3201,3188,3173,3162,3149,3136,3123,3110,3097,3084,3074,3064,3056,3046,3036,3028,3018,3008,3000,2984,2958,2932,2916,2890,2864,2845,2816,2787,2758,2729,2700,2671
<2671=2672
<2672=2691,2673
<2673=2675,2674
<2675=2689,2676
<2676=2685,2681,2677
<2677=2678
<2678=2680,2679
<2681=2682
<2682=2684,2683
<2685=2686
<2686=2688,2687
<2689=2690
<2691=2693,2692
<2693=2695,2694
<2695=2697,2696
<2697=2699,2698
<2700=2701
<2701=2720,2702
<2702=2704,2703
<2704=2718,2705
<2705=2714,2710,2706
<2706=2707
<2707=2709,2708
<2710=2711
<2711=2713,2712
<2714=2715
<2715=2717,2716
<2718=2719
<2720=2722,2721
<2722=2724,2723
<2724=2726,2725
<2726=2728,2727
<2729=2730
<2730=2749,2731
<2731=2733,2732
<2733=2747,2734
<2734=2743,2739,2735
<2735=2736
<2736=2738,2737
<2739=2740
<2740=2742,2741
<2743=2744
<2744=2746,2745
<2747=2748
<2749=2751,2750
<2751=2753,2752
<2753=2755,2754
<2755=2757,2756
<2758=2759
<2759=2778,2760
<2760=2762,2761
<2762=2776,2763
<2763=2772,2768,2764
<2764=2765
<2765=2767,2766
<2768=2769
<2769=2771,2770
<2772=2773
<2773=2775,2774
<2776=2777
<2778=2780,2779
<2780=2782,2781
<2782=2784,2783
<2784=2786,2785
<2787=2788
<2788=2807,2789
<2789=2791,2790
<2791=2805,2792
<2792=2801,2797,2793
<2793=2794
<2794=2796,2795
<2797=2798
<2798=2800,2799
<2801=2802
<2802=2804,2803
<2805=2806
<2807=2809,2808
<2809=2811,2810
<2811=2813,2812
<2813=2815,2814
<2816=2817
<2817=2836,2818
<2818=2820,2819
<2820=2834,2821
<2821=2830,2826,2822
<2822=2823
<2823=2825,2824
<2826=2827
<2827=2829,2828
<2830=2831
<2831=2833,2832
<2834=2835
<2836=2838,2837
<2838=2840,2839
<2840=2842,2841
<2842=2844,2843
<2845=2846
<2846=2863,2847
<2847=2861,2848
<2848=2857,2853,2849
<2849=2850
<2850=2852,2851
<2853=2854
<2854=2856,2855
<2857=2858
<2858=2860,2859
<2861=2862
<2864=2865
<2865=2885,2866
<2866=2876,2867
<2867=2869,2868
<2869=2871,2870
<2871=2873,2872
<2873=2875,2874
<2876=2878,2877
<2878=2880,2879
<2880=2882,2881
<2882=2884,2883
<2885=2887,2886
<2887=2889,2888
<2890=2891
<2891=2911,2892
<2892=2902,2893
<2893=2895,2894
<2895=2897,2896
<2897=2899,2898
<2899=2901,2900
<2902=2904,2903
<2904=2906,2905
<2906=2908,2907
<2908=2910,2909
<2911=2913,2912
<2913=2915,2914
<2916=2917
<2917=2927,2918
<2918=2920,2919
<2920=2922,2921
<2922=2924,2923
<2924=2926,2925
<2927=2929,2928
<2929=2931,2930
<2932=2933
<2933=2953,2934
<2934=2944,2935
<2935=2937,2936
<2937=2939,2938
<2939=2941,2940
<2941=2943,2942
<2944=2946,2945
<2946=2948,2947
<2948=2950,2949
<2950=2952,2951
<2953=2955,2954
<2955=2957,2956
<2958=2959
<2959=2979,2960
<2960=2970,2961
<2961=2963,2962
<2963=2965,2964
<2965=2967,2966
<2967=2969,2968
<2970=2972,2971
<2972=2974,2973
<2974=2976,2975
<2976=2978,2977
<2979=2981,2980
<2981=2983,2982
<2984=2985
<2985=2995,2986
<2986=2988,2987
<2988=2990,2989
<2990=2992,2991
<2992=2994,2993
<2995=2997,2996
<2997=2999,2998
<3000=3001
<3001=3003,3002
<3003=3005,3004
<3005=3007,3006
<3008=3009
<3009=3013,3010
<3010=3012,3011
<3013=3015,3014
<3015=3017,3016
<3018=3019
<3019=3023,3020
<3020=3022,3021
<3023=3025,3024
<3025=3027,3026
<3028=3029
<3029=3031,3030
<3031=3033,3032
<3033=3035,3034
<3036=3037
<3037=3041,3038
<3038=3040,3039
<3041=3043,3042
<3043=3045,3044
<3046=3047
<3047=3051,3048
<3048=3050,3049
<3051=3053,3052
<3053=3055,3054
<3056=3057
<3057=3059,3058
<3059=3061,3060
<3061=3063,3062
<3064=3065
<3065=3069,3066
<3066=3068,3067
<3069=3071,3070
<3071=3073,3072
<3074=3075
<3075=3079,3076
<3076=3078,3077
<3079=3081,3080
<3081=3083,3082
<3084=3085
<3085=3094,3086
<3086=3092,3087
<3087=3090,3088
<3088=3089
<3090=3091
<3092=3093
<3094=3096,3095
<3097=3098
<3098=3107,3099
<3099=3105,3100
<3100=3103,3101
<3101=3102
<3103=3104
<3105=3106
<3107=3109,3108
<3110=3111
<3111=3120,3112
<3112=3118,3113
<3113=3116,3114
<3114=3115
<3116=3117
<3118=3119
<3120=3122,3121
<3123=3124
<3124=3133,3125
<3125=3131,3126
<3126=3129,3127
<3127=3128
<3129=3130
<3131=3132
<3133=3135,3134
<3136=3137
<3137=3146,3138
<3138=3144,3139
<3139=3142,3140
<3140=3141
<3142=3143
<3144=3145
<3146=3148,3147
<3149=3150
<3150=3159,3151
<3151=3157,3152
<3152=3155,3153
<3153=3154
<3155=3156
<3157=3158
<3159=3161,3160
<3162=3163
<3163=3171,3164
<3164=3169,3167,3165
<3165=3166
<3167=3168
<3169=3170
<3171=3172
<3173=3174
<3174=3186,3175
<3175=3180,3178,3176
<3176=3177
<3178=3179
<3180=3181
<3181=3183,3182
<3183=3185,3184
<3186=3187
<3188=3189
<3189=3199,3190
<3190=3197,3195,3193,3191
<3191=3192
<3193=3194
<3195=3196
<3197=3198
<3199=3200
<3201=3202
<3202=3212,3203
<3203=3210,3208,3206,3204
<3204=3205
<3206=3207
<3208=3209
<3210=3211
<3212=3213
<3214=3215
<3215=3225,3216
<3216=3223,3221,3219,3217
<3217=3218
<3219=3220
<3221=3222
<3223=3224
<3225=3226
<3227=3228
<3228=3238,3229
<3229=3236,3234,3232,3230
<3230=3231
<3232=3233
<3234=3235
<3236=3237
<3238=3239
<3240=3241
<3241=3243,3242
<3243=3245,3244
<3246=3247
<3247=3257,3248
<3248=3255,3253,3251,3249
<3249=3250
<3251=3252
<3253=3254
<3255=3256
<3257=3258
<3259=3260
<3260=3272,3261
<3261=3266,3264,3262
<3262=3263
<3264=3265
<3266=3267
<3267=3269,3268
<3269=3271,3270
<3272=3273
<3274=3275
<3275=3278,3277,3276
<3279=3280
<3280=3282,3281
<3283=3284
<3284=3287,3286,3285
<3288=3295,3292,3289
<3289=3291,3290
<3292=3294,3293
<3295=3297,3296
<3298=3302,3299
<3299=3301,3300
<3302=3304,3303
<3305=3306
<3306=3308,3307
<3309=3316,3313,3310
<3310=3312,3311
<3313=3315,3314
<3316=3318,3317
<3319=3320
<3320=3322,3321
<3323=3324
<3324=3326,3325
<3327=3331,3328
<3328=3330,3329
<3331=3333,3332
<3379=3397,3396,3380
<3380=3393,3390,3387,3384,3381
<3381=3383,3382
<3384=3386,3385
<3387=3389,3388
<3390=3392,3391
<3393=3395,3394
<3397=3478,3467,3456,3398
<3398=3442,3421,3399
<3399=3400
<3400=3417,3401
<3401=3413,3409,3402
<3402=3403
<3403=3404
<3404=3408,3405
<3405=3407,3406
<3409=3410
<3410=3412,3411
<3413=3414
<3414=3416,3415
<3417=3418
<3418=3420,3419
<3421=3438,3422
<3422=3434,3430,3423
<3423=3424
<3424=3425
<3425=3429,3426
<3426=3428,3427
<3430=3431
<3431=3433,3432
<3434=3435
<3435=3437,3436
<3438=3439
<3439=3441,3440
<3442=3443
<3443=3450,3444
<3444=3448,3445
<3445=3446
<3446=3447
<3448=3449
<3450=3454,3451
<3451=3452
<3452=3453
<3454=3455
<3456=3457
<3457=3466,3458
<3458=3464,3459
<3459=3462,3460
<3460=3461
<3462=3463
<3464=3465
<3467=3468
<3468=3477,3469
<3469=3475,3470
<3470=3473,3471
<3471=3472
<3473=3474
<3475=3476
<3478=3482,3479
<3479=3481,3480
<3482=3484,3483
