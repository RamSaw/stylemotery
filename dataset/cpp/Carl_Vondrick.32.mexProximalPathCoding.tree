>3	FunctionDef	callFunction (mxArray * plhs [ ] , const mxArray * prhs [ ] , const long nlhs)
>4	ParameterList	mxArray * plhs [ ] , const mxArray * prhs [ ] , const long nlhs
>5	Parameter	 
>6	Identifier	nlhs
>7	ParameterType	const long
>8	Parameter	 
>9	Identifier	prhs
>10	ParameterType	const mxArray * [ ]
>11	Parameter	 
>12	Identifier	plhs
>13	ParameterType	mxArray * [ ]
>14	ReturnType	inline void
>15	CompoundStatement	 
>16	IfStatement	if ( nlhs == 2 )
>17	CompoundStatement	 
>18	ForStatement	for ( long i = 0 ; i < val . n ( ) ; ++ i )
>19	ExpressionStatement	 
>20	AssignmentExpr	pr_val [ i ] = val [ i ]
>21	ArrayIndexing	val [ i ]
>22	Identifier	i
>23	Identifier	val
>24	ArrayIndexing	pr_val [ i ]
>25	Identifier	i
>26	Identifier	pr_val
>27	UnaryExpression	 
>28	Identifier	i
>29	IncDec	++
>30	Condition	 
>31	RelationalExpression	i < val . n ( )
>32	CallExpression	val . n ( )
>33	ArgumentList	 
>34	Callee	val . n
>35	MemberAccess	val . n
>36	Identifier	n
>37	Identifier	val
>38	Identifier	i
>39	ForInit	 
>40	IdentifierDeclStatement	long i = 0 ;
>41	IdentifierDecl	i = 0
>42	AssignmentExpr	i = 0
>43	PrimaryExpression	0
>44	Identifier	i
>45	Identifier	i
>46	IdentifierDeclType	long
>47	ExpressionStatement	 
>48	CallExpression	mxGetPr ( plhs [ 1 ] )
>49	ArgumentList	plhs [ 1 ]
>50	Argument	plhs [ 1 ]
>51	ArrayIndexing	plhs [ 1 ]
>52	PrimaryExpression	1
>53	Identifier	plhs
>54	Callee	mxGetPr
>55	Identifier	mxGetPr
>56	Statement	 
>57	Statement	 
>58	Statement	 
>59	Statement	 
>60	Statement	 
>61	Statement	 
>62	Statement	 
>63	Statement	 
>64	Statement	 
>65	ExpressionStatement	 
>66	AssignmentExpr	plhs [ 1 ] = createMatrix < T > ( 1 , val . n ( ) )
>67	RelationalExpression	createMatrix < T > ( 1 , val . n ( ) )
>68	RelationalExpression	T > ( 1 , val . n ( ) )
>69	Expression	1 , val . n ( )
>70	CallExpression	val . n ( )
>71	ArgumentList	 
>72	Callee	val . n
>73	MemberAccess	val . n
>74	Identifier	n
>75	Identifier	val
>76	PrimaryExpression	1
>77	Identifier	T
>78	Identifier	createMatrix
>79	ArrayIndexing	plhs [ 1 ]
>80	PrimaryExpression	1
>81	Identifier	plhs
>82	Condition	 
>83	EqualityExpression	nlhs == 2
>84	PrimaryExpression	2
>85	Identifier	nlhs
>86	ExpressionStatement	 
>87	RelationalExpression	FISTA 
>88	RelationalExpression	T > ( alpha0 , alpha , param , val , NULL , NULL , & graph )
>89	Expression	alpha0 , alpha , param , val , NULL , NULL , & graph
>90	Expression	alpha , param , val , NULL , NULL , & graph
>91	Expression	param , val , NULL , NULL , & graph
>92	Expression	val , NULL , NULL , & graph
>93	Expression	NULL , NULL , & graph
>94	Expression	NULL , & graph
>95	UnaryOp	& graph
>96	Identifier	graph
>97	UnaryOperator	&
>98	Identifier	NULL
>99	Identifier	NULL
>100	Identifier	val
>101	Identifier	param
>102	Identifier	alpha
>103	Identifier	alpha0
>104	Identifier	T
>105	Identifier	FISTA 
>106	IdentifierDeclStatement	 
>107	IdentifierDecl	val
>108	Identifier	val
>109	IdentifierDeclType	Vector < T >
>110	ExpressionStatement	 
>111	Expression	prhs [ 2 ] , \"precision\" , 100000000000000000
>112	Expression	\"precision\" , 100000000000000000
>113	PrimaryExpression	100000000000000000
>114	PrimaryExpression	\"precision\"
>115	ArrayIndexing	prhs [ 2 ]
>116	PrimaryExpression	2
>117	Identifier	prhs
>118	Statement	 
>119	Statement	 
>120	Statement	 
>121	Statement	 
>122	Statement	 
>123	Statement	 
>124	Statement	 
>125	Statement	 
>126	Statement	 
>127	ExpressionStatement	 
>128	AssignmentExpr	graph . jc = GG_pB
>129	Identifier	GG_pB
>130	MemberAccess	graph . jc
>131	Identifier	jc
>132	Identifier	graph
>133	ExpressionStatement	 
>134	AssignmentExpr	graph . ir = GG_r
>135	Identifier	GG_r
>136	MemberAccess	graph . ir
>137	Identifier	ir
>138	Identifier	graph
>139	ExpressionStatement	 
>140	AssignmentExpr	graph . stop_weights = stop_weights
>141	Identifier	stop_weights
>142	MemberAccess	graph . stop_weights
>143	Identifier	stop_weights
>144	Identifier	graph
>145	ExpressionStatement	 
>146	AssignmentExpr	graph . start_weights = start_weights
>147	Identifier	start_weights
>148	MemberAccess	graph . start_weights
>149	Identifier	start_weights
>150	Identifier	graph
>151	ExpressionStatement	 
>152	AssignmentExpr	graph . weights = graph_weights
>153	Identifier	graph_weights
>154	MemberAccess	graph . weights
>155	Identifier	weights
>156	Identifier	graph
>157	ExpressionStatement	 
>158	AssignmentExpr	graph . m = GG_pB [ graph . n ] - GG_pB [ 0 ]
>159	AdditiveExpression	GG_pB [ graph . n ] - GG_pB [ 0 ]
>160	ArrayIndexing	GG_pB [ 0 ]
>161	PrimaryExpression	0
>162	Identifier	GG_pB
>163	ArrayIndexing	GG_pB [ graph . n ]
>164	MemberAccess	graph . n
>165	Identifier	n
>166	Identifier	graph
>167	Identifier	GG_pB
>168	MemberAccess	graph . m
>169	Identifier	m
>170	Identifier	graph
>171	ExpressionStatement	 
>172	AssignmentExpr	graph . n = pAlpha
>173	Identifier	pAlpha
>174	MemberAccess	graph . n
>175	Identifier	n
>176	Identifier	graph
>177	IdentifierDeclStatement	 
>178	IdentifierDecl	graph
>179	Identifier	graph
>180	IdentifierDeclType	GraphPathStruct < T >
>181	IfStatement	if ( param . num_threads == - 1 )
>182	CompoundStatement	 
>183	ExpressionStatement	 
>184	AssignmentExpr	param . num_threads = MIN ( MAX_THREADS , omp_get_num_procs ( ) )
>185	CallExpression	MIN ( MAX_THREADS , omp_get_num_procs ( ) )
>186	ArgumentList	MAX_THREADS
>187	Argument	omp_get_num_procs ( )
>188	CallExpression	omp_get_num_procs ( )
>189	ArgumentList	 
>190	Callee	omp_get_num_procs
>191	Identifier	omp_get_num_procs
>192	Argument	MAX_THREADS
>193	Identifier	MAX_THREADS
>194	Callee	MIN
>195	Identifier	MIN
>196	MemberAccess	param . num_threads
>197	Identifier	num_threads
>198	Identifier	param
>199	ExpressionStatement	 
>200	AssignmentExpr	param . num_threads = 1
>201	PrimaryExpression	1
>202	MemberAccess	param . num_threads
>203	Identifier	num_threads
>204	Identifier	param
>205	Condition	 
>206	EqualityExpression	param . num_threads == - 1
>207	UnaryOp	- 1
>208	PrimaryExpression	1
>209	UnaryOperator	-
>210	MemberAccess	param . num_threads
>211	Identifier	num_threads
>212	Identifier	param
>213	IfStatement	if ( param . regul != GRAPH_PATH_L0 && param . regul != GRAPH_PATH_CONV )
>214	ExpressionStatement	 
>215	CallExpression	mexErrMsgTxt ( \"Use a different mexProximal* function\" )
>216	ArgumentList	\"Use a different mexProximal* function\"
>217	Argument	\"Use a different mexProximal* function\"
>218	PrimaryExpression	\"Use a different mexProximal* function\"
>219	Callee	mexErrMsgTxt
>220	Identifier	mexErrMsgTxt
>221	Condition	 
>222	AndExpression	param . regul != GRAPH_PATH_L0 && param . regul != GRAPH_PATH_CONV
>223	EqualityExpression	param . regul != GRAPH_PATH_CONV
>224	Identifier	GRAPH_PATH_CONV
>225	MemberAccess	param . regul
>226	Identifier	regul
>227	Identifier	param
>228	EqualityExpression	param . regul != GRAPH_PATH_L0
>229	Identifier	GRAPH_PATH_L0
>230	MemberAccess	param . regul
>231	Identifier	regul
>232	Identifier	param
>233	ExpressionStatement	 
>234	AssignmentExpr	param . eval = nlhs == 2
>235	EqualityExpression	nlhs == 2
>236	PrimaryExpression	2
>237	Identifier	nlhs
>238	MemberAccess	param . eval
>239	Identifier	eval
>240	Identifier	param
>241	ExpressionStatement	 
>242	AssignmentExpr	param . transpose = getScalarStructDef < bool > ( prhs [ 2 ] , \"transpose\" , false )
>243	RelationalExpression	getScalarStructDef < bool > ( prhs [ 2 ] , \"transpose\" , false )
>244	RelationalExpression	bool > ( prhs [ 2 ] , \"transpose\" , false )
>245	Expression	prhs [ 2 ] , \"transpose\" , false
>246	Expression	\"transpose\" , false
>247	Identifier	false
>248	PrimaryExpression	\"transpose\"
>249	ArrayIndexing	prhs [ 2 ]
>250	PrimaryExpression	2
>251	Identifier	prhs
>252	Identifier	bool
>253	Identifier	getScalarStructDef
>254	MemberAccess	param . transpose
>255	Identifier	transpose
>256	Identifier	param
>257	ExpressionStatement	 
>258	AssignmentExpr	param . verbose = getScalarStructDef < bool > ( prhs [ 2 ] , \"verbose\" , false )
>259	RelationalExpression	getScalarStructDef < bool > ( prhs [ 2 ] , \"verbose\" , false )
>260	RelationalExpression	bool > ( prhs [ 2 ] , \"verbose\" , false )
>261	Expression	prhs [ 2 ] , \"verbose\" , false
>262	Expression	\"verbose\" , false
>263	Identifier	false
>264	PrimaryExpression	\"verbose\"
>265	ArrayIndexing	prhs [ 2 ]
>266	PrimaryExpression	2
>267	Identifier	prhs
>268	Identifier	bool
>269	Identifier	getScalarStructDef
>270	MemberAccess	param . verbose
>271	Identifier	verbose
>272	Identifier	param
>273	ExpressionStatement	 
>274	AssignmentExpr	param . intercept = getScalarStructDef < bool > ( prhs [ 2 ] , \"intercept\" , false )
>275	RelationalExpression	getScalarStructDef < bool > ( prhs [ 2 ] , \"intercept\" , false )
>276	RelationalExpression	bool > ( prhs [ 2 ] , \"intercept\" , false )
>277	Expression	prhs [ 2 ] , \"intercept\" , false
>278	Expression	\"intercept\" , false
>279	Identifier	false
>280	PrimaryExpression	\"intercept\"
>281	ArrayIndexing	prhs [ 2 ]
>282	PrimaryExpression	2
>283	Identifier	prhs
>284	Identifier	bool
>285	Identifier	getScalarStructDef
>286	MemberAccess	param . intercept
>287	Identifier	intercept
>288	Identifier	param
>289	IfStatement	if ( param . regul == INCORRECT_REG )
>290	ExpressionStatement	 
>291	CallExpression	mexErrMsgTxt ( \"Unknown regularization\" )
>292	ArgumentList	\"Unknown regularization\"
>293	Argument	\"Unknown regularization\"
>294	PrimaryExpression	\"Unknown regularization\"
>295	Callee	mexErrMsgTxt
>296	Identifier	mexErrMsgTxt
>297	Condition	 
>298	EqualityExpression	param . regul == INCORRECT_REG
>299	Identifier	INCORRECT_REG
>300	MemberAccess	param . regul
>301	Identifier	regul
>302	Identifier	param
>303	ExpressionStatement	 
>304	AssignmentExpr	param . regul = regul_from_string ( param . name_regul )
>305	CallExpression	regul_from_string ( param . name_regul )
>306	ArgumentList	param . name_regul
>307	Argument	param . name_regul
>308	MemberAccess	param . name_regul
>309	Identifier	name_regul
>310	Identifier	param
>311	Callee	regul_from_string
>312	Identifier	regul_from_string
>313	MemberAccess	param . regul
>314	Identifier	regul
>315	Identifier	param
>316	ExpressionStatement	 
>317	CallExpression	getStringStruct ( prhs [ 2 ] , \"regul\" , param . name_regul , param . length_names )
>318	ArgumentList	prhs [ 2 ]
>319	Argument	param . length_names
>320	MemberAccess	param . length_names
>321	Identifier	length_names
>322	Identifier	param
>323	Argument	param . name_regul
>324	MemberAccess	param . name_regul
>325	Identifier	name_regul
>326	Identifier	param
>327	Argument	\"regul\"
>328	PrimaryExpression	\"regul\"
>329	Argument	prhs [ 2 ]
>330	ArrayIndexing	prhs [ 2 ]
>331	PrimaryExpression	2
>332	Identifier	prhs
>333	Callee	getStringStruct
>334	Identifier	getStringStruct
>335	ExpressionStatement	 
>336	AssignmentExpr	param . lambda2 = getScalarStructDef < T > ( prhs [ 2 ] , \"lambda2\" , 0 )
>337	RelationalExpression	getScalarStructDef < T > ( prhs [ 2 ] , \"lambda2\" , 0 )
>338	RelationalExpression	T > ( prhs [ 2 ] , \"lambda2\" , 0 )
>339	Expression	prhs [ 2 ] , \"lambda2\" , 0
>340	Expression	\"lambda2\" , 0
>341	PrimaryExpression	0
>342	PrimaryExpression	\"lambda2\"
>343	ArrayIndexing	prhs [ 2 ]
>344	PrimaryExpression	2
>345	Identifier	prhs
>346	Identifier	T
>347	Identifier	getScalarStructDef
>348	MemberAccess	param . lambda2
>349	Identifier	lambda2
>350	Identifier	param
>351	ExpressionStatement	 
>352	AssignmentExpr	param . lambda = getScalarStructDef < T > ( prhs [ 2 ] , \"lambda\" , T ( 1.0 ) )
>353	RelationalExpression	getScalarStructDef < T > ( prhs [ 2 ] , \"lambda\" , T ( 1.0 ) )
>354	RelationalExpression	T > ( prhs [ 2 ] , \"lambda\" , T ( 1.0 ) )
>355	Expression	prhs [ 2 ] , \"lambda\" , T ( 1.0 )
>356	Expression	\"lambda\" , T ( 1.0 )
>357	CallExpression	T ( 1.0 )
>358	ArgumentList	1.0
>359	Argument	1.0
>360	PrimaryExpression	1.0
>361	Callee	T
>362	Identifier	T
>363	PrimaryExpression	\"lambda\"
>364	ArrayIndexing	prhs [ 2 ]
>365	PrimaryExpression	2
>366	Identifier	prhs
>367	Identifier	T
>368	Identifier	getScalarStructDef
>369	MemberAccess	param . lambda
>370	Identifier	lambda
>371	Identifier	param
>372	ExpressionStatement	 
>373	AssignmentExpr	param . pos = getScalarStructDef < bool > ( prhs [ 2 ] , \"pos\" , false )
>374	RelationalExpression	getScalarStructDef < bool > ( prhs [ 2 ] , \"pos\" , false )
>375	RelationalExpression	bool > ( prhs [ 2 ] , \"pos\" , false )
>376	Expression	prhs [ 2 ] , \"pos\" , false
>377	Expression	\"pos\" , false
>378	Identifier	false
>379	PrimaryExpression	\"pos\"
>380	ArrayIndexing	prhs [ 2 ]
>381	PrimaryExpression	2
>382	Identifier	prhs
>383	Identifier	bool
>384	Identifier	getScalarStructDef
>385	MemberAccess	param . pos
>386	Identifier	pos
>387	Identifier	param
>388	ExpressionStatement	 
>389	Expression	prhs [ 2 ] , \"numThreads\" , - 1
>390	Expression	\"numThreads\" , - 1
>391	UnaryOp	- 1
>392	PrimaryExpression	1
>393	UnaryOperator	-
>394	PrimaryExpression	\"numThreads\"
>395	ArrayIndexing	prhs [ 2 ]
>396	PrimaryExpression	2
>397	Identifier	prhs
>398	Statement	 
>399	Statement	 
>400	Statement	 
>401	Statement	 
>402	Statement	 
>403	Statement	 
>404	Statement	 
>405	Statement	 
>406	IdentifierDeclStatement	 
>407	IdentifierDecl	param
>408	Identifier	param
>409	IdentifierDeclType	FISTA 
>410	IdentifierDeclStatement	 
>411	IdentifierDecl	alpha ( pr_alpha , pAlpha , nAlpha )
>412	Expression	pr_alpha , pAlpha , nAlpha
>413	Expression	pAlpha , nAlpha
>414	Identifier	nAlpha
>415	Identifier	pAlpha
>416	Identifier	pr_alpha
>417	Identifier	alpha
>418	IdentifierDeclType	Matrix < T >
>419	ExpressionStatement	 
>420	CallExpression	mxGetPr ( plhs [ 0 ] )
>421	ArgumentList	plhs [ 0 ]
>422	Argument	plhs [ 0 ]
>423	ArrayIndexing	plhs [ 0 ]
>424	PrimaryExpression	0
>425	Identifier	plhs
>426	Callee	mxGetPr
>427	Identifier	mxGetPr
>428	Statement	 
>429	Statement	 
>430	Statement	 
>431	Statement	 
>432	Statement	 
>433	Statement	 
>434	Statement	 
>435	Statement	 
>436	Statement	 
>437	ExpressionStatement	 
>438	AssignmentExpr	plhs [ 0 ] = createMatrix < T > ( pAlpha , nAlpha )
>439	RelationalExpression	createMatrix < T > ( pAlpha , nAlpha )
>440	RelationalExpression	T > ( pAlpha , nAlpha )
>441	Expression	pAlpha , nAlpha
>442	Identifier	nAlpha
>443	Identifier	pAlpha
>444	Identifier	T
>445	Identifier	createMatrix
>446	ArrayIndexing	plhs [ 0 ]
>447	PrimaryExpression	0
>448	Identifier	plhs
>449	IfStatement	if ( nweights2 != pAlpha )
>450	ExpressionStatement	 
>451	CallExpression	mexErrMsgTxt ( \"size of field stop_weights is not consistent\" )
>452	ArgumentList	\"size of field stop_weights is not consistent\"
>453	Argument	\"size of field stop_weights is not consistent\"
>454	PrimaryExpression	\"size of field stop_weights is not consistent\"
>455	Callee	mexErrMsgTxt
>456	Identifier	mexErrMsgTxt
>457	Condition	 
>458	EqualityExpression	nweights2 != pAlpha
>459	Identifier	pAlpha
>460	Identifier	nweights2
>461	ExpressionStatement	 
>462	ArrayIndexing	dims_weights2 [ 1 ]
>463	PrimaryExpression	1
>464	Identifier	dims_weights2
>465	Statement	 
>466	Statement	 
>467	Statement	 
>468	Statement	 
>469	Statement	 
>470	Statement	 
>471	Statement	 
>472	Statement	 
>473	Statement	 
>474	Statement	 
>475	Statement	 
>476	Statement	 
>477	Statement	 
>478	Statement	 
>479	Statement	 
>480	Statement	 
>481	Statement	 
>482	Statement	 
>483	IdentifierDeclStatement	 
>484	IdentifierDecl	* dims_weights2 = mxGetDimensions ( ppr_weights2 )
>485	AssignmentExpr	* dims_weights2 = mxGetDimensions ( ppr_weights2 )
>486	CallExpression	mxGetDimensions ( ppr_weights2 )
>487	ArgumentList	ppr_weights2
>488	Argument	ppr_weights2
>489	Identifier	ppr_weights2
>490	Callee	mxGetDimensions
>491	Identifier	mxGetDimensions
>492	Identifier	dims_weights2
>493	Identifier	dims_weights2
>494	IdentifierDeclType	const mwSize *
>495	ExpressionStatement	 
>496	CallExpression	mxGetPr ( ppr_weights2 )
>497	ArgumentList	ppr_weights2
>498	Argument	ppr_weights2
>499	Identifier	ppr_weights2
>500	Callee	mxGetPr
>501	Identifier	mxGetPr
>502	Statement	 
>503	Statement	 
>504	Statement	 
>505	Statement	 
>506	Statement	 
>507	Statement	 
>508	Statement	 
>509	Statement	 
>510	Statement	 
>511	IfStatement	if ( mxIsSparse ( ppr_weights2 ) )
>512	ExpressionStatement	 
>513	CallExpression	mexErrMsgTxt ( \"field stop_weights should not be sparse\" )
>514	ArgumentList	\"field stop_weights should not be sparse\"
>515	Argument	\"field stop_weights should not be sparse\"
>516	PrimaryExpression	\"field stop_weights should not be sparse\"
>517	Callee	mexErrMsgTxt
>518	Identifier	mexErrMsgTxt
>519	Condition	 
>520	CallExpression	mxIsSparse ( ppr_weights2 )
>521	ArgumentList	ppr_weights2
>522	Argument	ppr_weights2
>523	Identifier	ppr_weights2
>524	Callee	mxIsSparse
>525	Identifier	mxIsSparse
>526	IdentifierDeclStatement	 
>527	IdentifierDecl	* ppr_weights2 = mxGetField ( prhs [ 1 ] , 0 , \"stop_weights\" )
>528	AssignmentExpr	* ppr_weights2 = mxGetField ( prhs [ 1 ] , 0 , \"stop_weights\" )
>529	CallExpression	mxGetField ( prhs [ 1 ] , 0 , \"stop_weights\" )
>530	ArgumentList	prhs [ 1 ]
>531	Argument	\"stop_weights\"
>532	PrimaryExpression	\"stop_weights\"
>533	Argument	0
>534	PrimaryExpression	0
>535	Argument	prhs [ 1 ]
>536	ArrayIndexing	prhs [ 1 ]
>537	PrimaryExpression	1
>538	Identifier	prhs
>539	Callee	mxGetField
>540	Identifier	mxGetField
>541	Identifier	ppr_weights2
>542	Identifier	ppr_weights2
>543	IdentifierDeclType	mxArray *
>544	IfStatement	if ( nweights != pAlpha )
>545	ExpressionStatement	 
>546	CallExpression	mexErrMsgTxt ( \"size of field start_weights is not consistent\" )
>547	ArgumentList	\"size of field start_weights is not consistent\"
>548	Argument	\"size of field start_weights is not consistent\"
>549	PrimaryExpression	\"size of field start_weights is not consistent\"
>550	Callee	mexErrMsgTxt
>551	Identifier	mexErrMsgTxt
>552	Condition	 
>553	EqualityExpression	nweights != pAlpha
>554	Identifier	pAlpha
>555	Identifier	nweights
>556	ExpressionStatement	 
>557	ArrayIndexing	dims_weights [ 1 ]
>558	PrimaryExpression	1
>559	Identifier	dims_weights
>560	Statement	 
>561	Statement	 
>562	Statement	 
>563	Statement	 
>564	Statement	 
>565	Statement	 
>566	Statement	 
>567	Statement	 
>568	Statement	 
>569	Statement	 
>570	Statement	 
>571	Statement	 
>572	Statement	 
>573	Statement	 
>574	Statement	 
>575	Statement	 
>576	Statement	 
>577	Statement	 
>578	IdentifierDeclStatement	 
>579	IdentifierDecl	* dims_weights = mxGetDimensions ( ppr_weights )
>580	AssignmentExpr	* dims_weights = mxGetDimensions ( ppr_weights )
>581	CallExpression	mxGetDimensions ( ppr_weights )
>582	ArgumentList	ppr_weights
>583	Argument	ppr_weights
>584	Identifier	ppr_weights
>585	Callee	mxGetDimensions
>586	Identifier	mxGetDimensions
>587	Identifier	dims_weights
>588	Identifier	dims_weights
>589	IdentifierDeclType	const mwSize *
>590	ExpressionStatement	 
>591	CallExpression	mxGetPr ( ppr_weights )
>592	ArgumentList	ppr_weights
>593	Argument	ppr_weights
>594	Identifier	ppr_weights
>595	Callee	mxGetPr
>596	Identifier	mxGetPr
>597	Statement	 
>598	Statement	 
>599	Statement	 
>600	Statement	 
>601	Statement	 
>602	Statement	 
>603	Statement	 
>604	Statement	 
>605	Statement	 
>606	IfStatement	if ( mxIsSparse ( ppr_weights ) )
>607	ExpressionStatement	 
>608	CallExpression	mexErrMsgTxt ( \"field start_weights should not be sparse\" )
>609	ArgumentList	\"field start_weights should not be sparse\"
>610	Argument	\"field start_weights should not be sparse\"
>611	PrimaryExpression	\"field start_weights should not be sparse\"
>612	Callee	mexErrMsgTxt
>613	Identifier	mexErrMsgTxt
>614	Condition	 
>615	CallExpression	mxIsSparse ( ppr_weights )
>616	ArgumentList	ppr_weights
>617	Argument	ppr_weights
>618	Identifier	ppr_weights
>619	Callee	mxIsSparse
>620	Identifier	mxIsSparse
>621	IdentifierDeclStatement	 
>622	IdentifierDecl	* ppr_weights = mxGetField ( prhs [ 1 ] , 0 , \"start_weights\" )
>623	AssignmentExpr	* ppr_weights = mxGetField ( prhs [ 1 ] , 0 , \"start_weights\" )
>624	CallExpression	mxGetField ( prhs [ 1 ] , 0 , \"start_weights\" )
>625	ArgumentList	prhs [ 1 ]
>626	Argument	\"start_weights\"
>627	PrimaryExpression	\"start_weights\"
>628	Argument	0
>629	PrimaryExpression	0
>630	Argument	prhs [ 1 ]
>631	ArrayIndexing	prhs [ 1 ]
>632	PrimaryExpression	1
>633	Identifier	prhs
>634	Callee	mxGetField
>635	Identifier	mxGetField
>636	Identifier	ppr_weights
>637	Identifier	ppr_weights
>638	IdentifierDeclType	mxArray *
>639	IfStatement	if ( GGm != GGn || GGm != pAlpha )
>640	ExpressionStatement	 
>641	CallExpression	mexErrMsgTxt ( \"size of field groups is not consistent\" )
>642	ArgumentList	\"size of field groups is not consistent\"
>643	Argument	\"size of field groups is not consistent\"
>644	PrimaryExpression	\"size of field groups is not consistent\"
>645	Callee	mexErrMsgTxt
>646	Identifier	mexErrMsgTxt
>647	Condition	 
>648	OrExpression	GGm != GGn || GGm != pAlpha
>649	EqualityExpression	GGm != pAlpha
>650	Identifier	pAlpha
>651	Identifier	GGm
>652	EqualityExpression	GGm != GGn
>653	Identifier	GGn
>654	Identifier	GGm
>655	ExpressionStatement	 
>656	ArrayIndexing	dims_GG [ 1 ]
>657	PrimaryExpression	1
>658	Identifier	dims_GG
>659	Statement	 
>660	Statement	 
>661	Statement	 
>662	Statement	 
>663	Statement	 
>664	Statement	 
>665	Statement	 
>666	ExpressionStatement	 
>667	ArrayIndexing	dims_GG [ 0 ]
>668	PrimaryExpression	0
>669	Identifier	dims_GG
>670	Statement	 
>671	Statement	 
>672	Statement	 
>673	Statement	 
>674	Statement	 
>675	Statement	 
>676	Statement	 
>677	IdentifierDeclStatement	 
>678	IdentifierDecl	* dims_GG = mxGetDimensions ( ppr_GG )
>679	AssignmentExpr	* dims_GG = mxGetDimensions ( ppr_GG )
>680	CallExpression	mxGetDimensions ( ppr_GG )
>681	ArgumentList	ppr_GG
>682	Argument	ppr_GG
>683	Identifier	ppr_GG
>684	Callee	mxGetDimensions
>685	Identifier	mxGetDimensions
>686	Identifier	dims_GG
>687	Identifier	dims_GG
>688	IdentifierDeclType	const mwSize *
>689	IdentifierDeclStatement	 
>690	IdentifierDecl	* GG_pB = mxGetJc ( ppr_GG )
>691	AssignmentExpr	* GG_pB = mxGetJc ( ppr_GG )
>692	CallExpression	mxGetJc ( ppr_GG )
>693	ArgumentList	ppr_GG
>694	Argument	ppr_GG
>695	Identifier	ppr_GG
>696	Callee	mxGetJc
>697	Identifier	mxGetJc
>698	Identifier	GG_pB
>699	Identifier	GG_pB
>700	IdentifierDeclType	mwSize *
>701	IdentifierDeclStatement	 
>702	IdentifierDecl	* GG_r = mxGetIr ( ppr_GG )
>703	AssignmentExpr	* GG_r = mxGetIr ( ppr_GG )
>704	CallExpression	mxGetIr ( ppr_GG )
>705	ArgumentList	ppr_GG
>706	Argument	ppr_GG
>707	Identifier	ppr_GG
>708	Callee	mxGetIr
>709	Identifier	mxGetIr
>710	Identifier	GG_r
>711	Identifier	GG_r
>712	IdentifierDeclType	mwSize *
>713	ExpressionStatement	 
>714	CallExpression	mxGetPr ( ppr_GG )
>715	ArgumentList	ppr_GG
>716	Argument	ppr_GG
>717	Identifier	ppr_GG
>718	Callee	mxGetPr
>719	Identifier	mxGetPr
>720	Statement	 
>721	Statement	 
>722	Statement	 
>723	Statement	 
>724	Statement	 
>725	Statement	 
>726	Statement	 
>727	Statement	 
>728	Statement	 
>729	IfStatement	if ( ! mxIsSparse ( ppr_GG ) )
>730	ExpressionStatement	 
>731	CallExpression	mexErrMsgTxt ( \"field groups should be sparse\" )
>732	ArgumentList	\"field groups should be sparse\"
>733	Argument	\"field groups should be sparse\"
>734	PrimaryExpression	\"field groups should be sparse\"
>735	Callee	mexErrMsgTxt
>736	Identifier	mexErrMsgTxt
>737	Condition	 
>738	UnaryOp	! mxIsSparse ( ppr_GG )
>739	CallExpression	mxIsSparse ( ppr_GG )
>740	ArgumentList	ppr_GG
>741	Argument	ppr_GG
>742	Identifier	ppr_GG
>743	Callee	mxIsSparse
>744	Identifier	mxIsSparse
>745	UnaryOperator	!
>746	IdentifierDeclStatement	 
>747	IdentifierDecl	* ppr_GG = mxGetField ( prhs [ 1 ] , 0 , \"weights\" )
>748	AssignmentExpr	* ppr_GG = mxGetField ( prhs [ 1 ] , 0 , \"weights\" )
>749	CallExpression	mxGetField ( prhs [ 1 ] , 0 , \"weights\" )
>750	ArgumentList	prhs [ 1 ]
>751	Argument	\"weights\"
>752	PrimaryExpression	\"weights\"
>753	Argument	0
>754	PrimaryExpression	0
>755	Argument	prhs [ 1 ]
>756	ArrayIndexing	prhs [ 1 ]
>757	PrimaryExpression	1
>758	Identifier	prhs
>759	Callee	mxGetField
>760	Identifier	mxGetField
>761	Identifier	ppr_GG
>762	Identifier	ppr_GG
>763	IdentifierDeclType	mxArray *
>764	IdentifierDeclStatement	 
>765	IdentifierDecl	alpha0 ( pr_alpha0 , pAlpha , nAlpha )
>766	Expression	pr_alpha0 , pAlpha , nAlpha
>767	Expression	pAlpha , nAlpha
>768	Identifier	nAlpha
>769	Identifier	pAlpha
>770	Identifier	pr_alpha0
>771	Identifier	alpha0
>772	IdentifierDeclType	Matrix < T >
>773	ExpressionStatement	 
>774	ArrayIndexing	dimsAlpha [ 1 ]
>775	PrimaryExpression	1
>776	Identifier	dimsAlpha
>777	Statement	 
>778	Statement	 
>779	Statement	 
>780	Statement	 
>781	Statement	 
>782	Statement	 
>783	Statement	 
>784	ExpressionStatement	 
>785	ArrayIndexing	dimsAlpha [ 0 ]
>786	PrimaryExpression	0
>787	Identifier	dimsAlpha
>788	Statement	 
>789	Statement	 
>790	Statement	 
>791	Statement	 
>792	Statement	 
>793	Statement	 
>794	Statement	 
>795	IdentifierDeclStatement	 
>796	IdentifierDecl	* dimsAlpha = mxGetDimensions ( prhs [ 0 ] )
>797	AssignmentExpr	* dimsAlpha = mxGetDimensions ( prhs [ 0 ] )
>798	CallExpression	mxGetDimensions ( prhs [ 0 ] )
>799	ArgumentList	prhs [ 0 ]
>800	Argument	prhs [ 0 ]
>801	ArrayIndexing	prhs [ 0 ]
>802	PrimaryExpression	0
>803	Identifier	prhs
>804	Callee	mxGetDimensions
>805	Identifier	mxGetDimensions
>806	Identifier	dimsAlpha
>807	Identifier	dimsAlpha
>808	IdentifierDeclType	const mwSize *
>809	ExpressionStatement	 
>810	CallExpression	mxGetPr ( prhs [ 0 ] )
>811	ArgumentList	prhs [ 0 ]
>812	Argument	prhs [ 0 ]
>813	ArrayIndexing	prhs [ 0 ]
>814	PrimaryExpression	0
>815	Identifier	prhs
>816	Callee	mxGetPr
>817	Identifier	mxGetPr
>818	Statement	 
>819	Statement	 
>820	Statement	 
>821	Statement	 
>822	Statement	 
>823	Statement	 
>824	Statement	 
>825	Statement	 
>826	Statement	 
>827	IfStatement	if ( ! mxIsStruct ( prhs [ 2 ] ) )
>828	ExpressionStatement	 
>829	CallExpression	mexErrMsgTxt ( \"argument 3 should be struct\" )
>830	ArgumentList	\"argument 3 should be struct\"
>831	Argument	\"argument 3 should be struct\"
>832	PrimaryExpression	\"argument 3 should be struct\"
>833	Callee	mexErrMsgTxt
>834	Identifier	mexErrMsgTxt
>835	Condition	 
>836	UnaryOp	! mxIsStruct ( prhs [ 2 ] )
>837	CallExpression	mxIsStruct ( prhs [ 2 ] )
>838	ArgumentList	prhs [ 2 ]
>839	Argument	prhs [ 2 ]
>840	ArrayIndexing	prhs [ 2 ]
>841	PrimaryExpression	2
>842	Identifier	prhs
>843	Callee	mxIsStruct
>844	Identifier	mxIsStruct
>845	UnaryOperator	!
>846	IfStatement	if ( ! mxIsStruct ( prhs [ 1 ] ) )
>847	ExpressionStatement	 
>848	CallExpression	mexErrMsgTxt ( \"argument 2 should be struct\" )
>849	ArgumentList	\"argument 2 should be struct\"
>850	Argument	\"argument 2 should be struct\"
>851	PrimaryExpression	\"argument 2 should be struct\"
>852	Callee	mexErrMsgTxt
>853	Identifier	mexErrMsgTxt
>854	Condition	 
>855	UnaryOp	! mxIsStruct ( prhs [ 1 ] )
>856	CallExpression	mxIsStruct ( prhs [ 1 ] )
>857	ArgumentList	prhs [ 1 ]
>858	Argument	prhs [ 1 ]
>859	ArrayIndexing	prhs [ 1 ]
>860	PrimaryExpression	1
>861	Identifier	prhs
>862	Callee	mxIsStruct
>863	Identifier	mxIsStruct
>864	UnaryOperator	!
>865	IfStatement	if ( mxIsSparse ( prhs [ 0 ] ) )
>866	ExpressionStatement	 
>867	CallExpression	mexErrMsgTxt ( \"argument 1 should not be sparse\" )
>868	ArgumentList	\"argument 1 should not be sparse\"
>869	Argument	\"argument 1 should not be sparse\"
>870	PrimaryExpression	\"argument 1 should not be sparse\"
>871	Callee	mexErrMsgTxt
>872	Identifier	mexErrMsgTxt
>873	Condition	 
>874	CallExpression	mxIsSparse ( prhs [ 0 ] )
>875	ArgumentList	prhs [ 0 ]
>876	Argument	prhs [ 0 ]
>877	ArrayIndexing	prhs [ 0 ]
>878	PrimaryExpression	0
>879	Identifier	prhs
>880	Callee	mxIsSparse
>881	Identifier	mxIsSparse
>882	IfStatement	if ( ! mexCheckType < T > ( prhs [ 0 ] ) )
>883	ExpressionStatement	 
>884	CallExpression	mexErrMsgTxt ( \"type of argument 1 is not consistent\" )
>885	ArgumentList	\"type of argument 1 is not consistent\"
>886	Argument	\"type of argument 1 is not consistent\"
>887	PrimaryExpression	\"type of argument 1 is not consistent\"
>888	Callee	mexErrMsgTxt
>889	Identifier	mexErrMsgTxt
>890	Condition	 
>891	RelationalExpression	! mexCheckType < T > ( prhs [ 0 ] )
>892	RelationalExpression	T > ( prhs [ 0 ] )
>893	ArrayIndexing	prhs [ 0 ]
>894	PrimaryExpression	0
>895	Identifier	prhs
>896	Identifier	T
>897	UnaryOp	! mexCheckType
>898	Identifier	mexCheckType
>899	UnaryOperator	!
>977	FunctionDef	mexFunction (int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ])
>978	ParameterList	int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ]
>979	Parameter	 
>980	Identifier	prhs
>981	ParameterType	const mxArray * [ ]
>982	Parameter	 
>983	Identifier	nrhs
>984	ParameterType	int
>985	Parameter	 
>986	Identifier	plhs
>987	ParameterType	mxArray * [ ]
>988	Parameter	 
>989	Identifier	nlhs
>990	ParameterType	int
>991	ReturnType	void
>992	CompoundStatement	 
>993	IfStatement	if ( mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS )
>994	ElseStatement	else
>995	CompoundStatement	 
>996	ExpressionStatement	 
>997	RelationalExpression	callFunction < float > ( plhs , prhs , nlhs )
>998	RelationalExpression	float > ( plhs , prhs , nlhs )
>999	Expression	plhs , prhs , nlhs
>1000	Expression	prhs , nlhs
>1001	Identifier	nlhs
>1002	Identifier	prhs
>1003	Identifier	plhs
>1004	Identifier	float
>1005	Identifier	callFunction
>1006	CompoundStatement	 
>1007	ExpressionStatement	 
>1008	RelationalExpression	callFunction < double > ( plhs , prhs , nlhs )
>1009	RelationalExpression	double > ( plhs , prhs , nlhs )
>1010	Expression	plhs , prhs , nlhs
>1011	Expression	prhs , nlhs
>1012	Identifier	nlhs
>1013	Identifier	prhs
>1014	Identifier	plhs
>1015	Identifier	double
>1016	Identifier	callFunction
>1017	Condition	 
>1018	EqualityExpression	mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS
>1019	Identifier	mxDOUBLE_CLASS
>1020	CallExpression	mxGetClassID ( prhs [ 0 ] )
>1021	ArgumentList	prhs [ 0 ]
>1022	Argument	prhs [ 0 ]
>1023	ArrayIndexing	prhs [ 0 ]
>1024	PrimaryExpression	0
>1025	Identifier	prhs
>1026	Callee	mxGetClassID
>1027	Identifier	mxGetClassID
>1028	IfStatement	if ( nlhs != 1 && nlhs != 2 )
>1029	ExpressionStatement	 
>1030	CallExpression	mexErrMsgTxt ( \"Bad number of output arguments\" )
>1031	ArgumentList	\"Bad number of output arguments\"
>1032	Argument	\"Bad number of output arguments\"
>1033	PrimaryExpression	\"Bad number of output arguments\"
>1034	Callee	mexErrMsgTxt
>1035	Identifier	mexErrMsgTxt
>1036	Condition	 
>1037	AndExpression	nlhs != 1 && nlhs != 2
>1038	EqualityExpression	nlhs != 2
>1039	PrimaryExpression	2
>1040	Identifier	nlhs
>1041	EqualityExpression	nlhs != 1
>1042	PrimaryExpression	1
>1043	Identifier	nlhs
>1044	IfStatement	if ( nrhs != 3 )
>1045	ExpressionStatement	 
>1046	CallExpression	mexErrMsgTxt ( \"Bad number of inputs arguments\" )
>1047	ArgumentList	\"Bad number of inputs arguments\"
>1048	Argument	\"Bad number of inputs arguments\"
>1049	PrimaryExpression	\"Bad number of inputs arguments\"
>1050	Callee	mexErrMsgTxt
>1051	Identifier	mexErrMsgTxt
>1052	Condition	 
>1053	EqualityExpression	nrhs != 3
>1054	PrimaryExpression	3
>1055	Identifier	nrhs
<3=15,14,4
<4=11,8,5
<5=7,6
<8=10,9
<11=13,12
<15=882,865,846,827,826,825,824,823,822,821,820,819,818,809,795,794,793,792,791,790,789,788,784,783,782,781,780,779,778,777,773,764,746,729,728,727,726,725,724,723,722,721,720,713,701,689,677,676,675,674,673,672,671,670,666,665,664,663,662,661,660,659,655,639,621,606,605,604,603,602,601,600,599,598,597,590,578,577,576,575,574,573,572,571,570,569,568,567,566,565,564,563,562,561,560,556,544,526,511,510,509,508,507,506,505,504,503,502,495,483,482,481,480,479,478,477,476,475,474,473,472,471,470,469,468,467,466,465,461,449,437,436,435,434,433,16,86,106,110,118,119,120,121,122,123,124,125,126,127,133,139,145,151,157,171,177,181,213,233,241,257,273,289,303,316,335,351,372,388,398,399,400,401,402,403,404,405,406,410,419,428,429,430,431,432
<16=82,17
<17=65,64,63,62,61,60,59,58,57,56,47,18
<18=39,30,27,19
<19=20
<20=24,21
<21=23,22
<24=26,25
<27=29,28
<30=31
<31=38,32
<32=34,33
<34=35
<35=37,36
<39=40
<40=41
<41=46,45,42
<42=44,43
<47=48
<48=54,49
<49=50
<50=51
<51=53,52
<54=55
<65=66
<66=79,67
<67=78,68
<68=77,69
<69=76,70
<70=72,71
<72=73
<73=75,74
<79=81,80
<82=83
<83=85,84
<86=87
<87=105,88
<88=104,89
<89=103,90
<90=102,91
<91=101,92
<92=100,93
<93=99,94
<94=98,95
<95=97,96
<106=107
<107=109,108
<110=111
<111=115,112
<112=114,113
<115=117,116
<127=128
<128=130,129
<130=132,131
<133=134
<134=136,135
<136=138,137
<139=140
<140=142,141
<142=144,143
<145=146
<146=148,147
<148=150,149
<151=152
<152=154,153
<154=156,155
<157=158
<158=168,159
<159=163,160
<160=162,161
<163=167,164
<164=166,165
<168=170,169
<171=172
<172=174,173
<174=176,175
<177=178
<178=180,179
<181=205,182
<182=199,183
<183=184
<184=196,185
<185=194,186
<186=192,187
<187=188
<188=190,189
<190=191
<192=193
<194=195
<196=198,197
<199=200
<200=202,201
<202=204,203
<205=206
<206=210,207
<207=209,208
<210=212,211
<213=221,214
<214=215
<215=219,216
<216=217
<217=218
<219=220
<221=222
<222=228,223
<223=225,224
<225=227,226
<228=230,229
<230=232,231
<233=234
<234=238,235
<235=237,236
<238=240,239
<241=242
<242=254,243
<243=253,244
<244=252,245
<245=249,246
<246=248,247
<249=251,250
<254=256,255
<257=258
<258=270,259
<259=269,260
<260=268,261
<261=265,262
<262=264,263
<265=267,266
<270=272,271
<273=274
<274=286,275
<275=285,276
<276=284,277
<277=281,278
<278=280,279
<281=283,282
<286=288,287
<289=297,290
<290=291
<291=295,292
<292=293
<293=294
<295=296
<297=298
<298=300,299
<300=302,301
<303=304
<304=313,305
<305=311,306
<306=307
<307=308
<308=310,309
<311=312
<313=315,314
<316=317
<317=333,318
<318=329,327,323,319
<319=320
<320=322,321
<323=324
<324=326,325
<327=328
<329=330
<330=332,331
<333=334
<335=336
<336=348,337
<337=347,338
<338=346,339
<339=343,340
<340=342,341
<343=345,344
<348=350,349
<351=352
<352=369,353
<353=368,354
<354=367,355
<355=364,356
<356=363,357
<357=361,358
<358=359
<359=360
<361=362
<364=366,365
<369=371,370
<372=373
<373=385,374
<374=384,375
<375=383,376
<376=380,377
<377=379,378
<380=382,381
<385=387,386
<388=389
<389=395,390
<390=394,391
<391=393,392
<395=397,396
<406=407
<407=409,408
<410=411
<411=418,417,412
<412=416,413
<413=415,414
<419=420
<420=426,421
<421=422
<422=423
<423=425,424
<426=427
<437=438
<438=446,439
<439=445,440
<440=444,441
<441=443,442
<446=448,447
<449=457,450
<450=451
<451=455,452
<452=453
<453=454
<455=456
<457=458
<458=460,459
<461=462
<462=464,463
<483=484
<484=494,493,485
<485=492,486
<486=490,487
<487=488
<488=489
<490=491
<495=496
<496=500,497
<497=498
<498=499
<500=501
<511=519,512
<512=513
<513=517,514
<514=515
<515=516
<517=518
<519=520
<520=524,521
<521=522
<522=523
<524=525
<526=527
<527=543,542,528
<528=541,529
<529=539,530
<530=535,533,531
<531=532
<533=534
<535=536
<536=538,537
<539=540
<544=552,545
<545=546
<546=550,547
<547=548
<548=549
<550=551
<552=553
<553=555,554
<556=557
<557=559,558
<578=579
<579=589,588,580
<580=587,581
<581=585,582
<582=583
<583=584
<585=586
<590=591
<591=595,592
<592=593
<593=594
<595=596
<606=614,607
<607=608
<608=612,609
<609=610
<610=611
<612=613
<614=615
<615=619,616
<616=617
<617=618
<619=620
<621=622
<622=638,637,623
<623=636,624
<624=634,625
<625=630,628,626
<626=627
<628=629
<630=631
<631=633,632
<634=635
<639=647,640
<640=641
<641=645,642
<642=643
<643=644
<645=646
<647=648
<648=652,649
<649=651,650
<652=654,653
<655=656
<656=658,657
<666=667
<667=669,668
<677=678
<678=688,687,679
<679=686,680
<680=684,681
<681=682
<682=683
<684=685
<689=690
<690=700,699,691
<691=698,692
<692=696,693
<693=694
<694=695
<696=697
<701=702
<702=712,711,703
<703=710,704
<704=708,705
<705=706
<706=707
<708=709
<713=714
<714=718,715
<715=716
<716=717
<718=719
<729=737,730
<730=731
<731=735,732
<732=733
<733=734
<735=736
<737=738
<738=745,739
<739=743,740
<740=741
<741=742
<743=744
<746=747
<747=763,762,748
<748=761,749
<749=759,750
<750=755,753,751
<751=752
<753=754
<755=756
<756=758,757
<759=760
<764=765
<765=772,771,766
<766=770,767
<767=769,768
<773=774
<774=776,775
<784=785
<785=787,786
<795=796
<796=808,807,797
<797=806,798
<798=804,799
<799=800
<800=801
<801=803,802
<804=805
<809=810
<810=816,811
<811=812
<812=813
<813=815,814
<816=817
<827=835,828
<828=829
<829=833,830
<830=831
<831=832
<833=834
<835=836
<836=845,837
<837=843,838
<838=839
<839=840
<840=842,841
<843=844
<846=854,847
<847=848
<848=852,849
<849=850
<850=851
<852=853
<854=855
<855=864,856
<856=862,857
<857=858
<858=859
<859=861,860
<862=863
<865=873,866
<866=867
<867=871,868
<868=869
<869=870
<871=872
<873=874
<874=880,875
<875=876
<876=877
<877=879,878
<880=881
<882=890,883
<883=884
<884=888,885
<885=886
<886=887
<888=889
<890=891
<891=897,892
<892=896,893
<893=895,894
<897=899,898
<977=992,991,978
<978=988,985,982,979
<979=981,980
<982=984,983
<985=987,986
<988=990,989
<992=1044,1028,993
<993=1017,1006,994
<994=995
<995=996
<996=997
<997=1005,998
<998=1004,999
<999=1003,1000
<1000=1002,1001
<1006=1007
<1007=1008
<1008=1016,1009
<1009=1015,1010
<1010=1014,1011
<1011=1013,1012
<1017=1018
<1018=1020,1019
<1020=1026,1021
<1021=1022
<1022=1023
<1023=1025,1024
<1026=1027
<1028=1036,1029
<1029=1030
<1030=1034,1031
<1031=1032
<1032=1033
<1034=1035
<1036=1037
<1037=1041,1038
<1038=1040,1039
<1041=1043,1042
<1044=1052,1045
<1045=1046
<1046=1050,1047
<1047=1048
<1048=1049
<1050=1051
<1052=1053
<1053=1055,1054
