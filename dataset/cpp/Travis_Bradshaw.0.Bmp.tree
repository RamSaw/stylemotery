>3	FunctionDef	GetColorCount (int nbits)
>4	ParameterList	int nbits
>5	Parameter	 
>6	Identifier	nbits
>7	ParameterType	int
>8	ReturnType	static int
>9	CompoundStatement	 
>10	ReturnStatement	 
>11	Identifier	ncolors
>12	IfStatement	if ( nbits < 24 )
>13	CompoundStatement	 
>14	ExpressionStatement	 
>15	AssignmentExpr	ncolors = 1 << nbits
>16	ShiftExpression	1 << nbits
>17	Identifier	nbits
>18	PrimaryExpression	1
>19	Identifier	ncolors
>20	Condition	 
>21	RelationalExpression	nbits < 24
>22	PrimaryExpression	24
>23	Identifier	nbits
>24	IdentifierDeclStatement	 
>25	IdentifierDecl	ncolors = 0
>26	AssignmentExpr	ncolors = 0
>27	PrimaryExpression	0
>28	Identifier	ncolors
>29	Identifier	ncolors
>30	IdentifierDeclType	int
>36	FunctionDef	BMPLineNone (FILE * f , char * sline , int pixbytes , int width)
>37	ParameterList	FILE * f , char * sline , int pixbytes , int width
>38	Parameter	 
>39	Identifier	width
>40	ParameterType	int
>41	Parameter	 
>42	Identifier	pixbytes
>43	ParameterType	int
>44	Parameter	 
>45	Identifier	sline
>46	ParameterType	char *
>47	Parameter	 
>48	Identifier	f
>49	ParameterType	FILE *
>50	ReturnType	static void
>51	CompoundStatement	 
>52	ExpressionStatement	 
>53	CallExpression	Error ( \"BMPLineNone failed.\" )
>54	ArgumentList	\"BMPLineNone failed.\"
>55	Argument	\"BMPLineNone failed.\"
>56	PrimaryExpression	\"BMPLineNone failed.\"
>57	Callee	Error
>58	Identifier	Error
>59	SwitchStatement	switch ( pixbytes )
>60	CompoundStatement	 
>61	ReturnStatement	 
>62	ForStatement	for ( i = 0 , j = 0 ; i < width ; i ++ , j += 3 )
>63	CompoundStatement	 
>64	ExpressionStatement	 
>65	AssignmentExpr	sline [ j + 2 ] = k
>66	Identifier	k
>67	ArrayIndexing	sline [ j + 2 ]
>68	AdditiveExpression	j + 2
>69	PrimaryExpression	2
>70	Identifier	j
>71	Identifier	sline
>72	ExpressionStatement	 
>73	AssignmentExpr	sline [ j ] = sline [ j + 2 ]
>74	ArrayIndexing	sline [ j + 2 ]
>75	AdditiveExpression	j + 2
>76	PrimaryExpression	2
>77	Identifier	j
>78	Identifier	sline
>79	ArrayIndexing	sline [ j ]
>80	Identifier	j
>81	Identifier	sline
>82	ExpressionStatement	 
>83	AssignmentExpr	k = sline [ j ]
>84	ArrayIndexing	sline [ j ]
>85	Identifier	j
>86	Identifier	sline
>87	Identifier	k
>88	Expression	 
>89	AssignmentExpr	j += 3
>90	PrimaryExpression	3
>91	Identifier	j
>92	IncDecOp	i ++
>93	IncDec	++
>94	Identifier	i
>95	Condition	 
>96	RelationalExpression	i < width
>97	Identifier	width
>98	Identifier	i
>99	ForInit	 
>100	Expression	i = 0 , j = 0
>101	AssignmentExpr	j = 0
>102	PrimaryExpression	0
>103	Identifier	j
>104	AssignmentExpr	i = 0
>105	PrimaryExpression	0
>106	Identifier	i
>107	WhileStatement	while ( nbytes -- > 0 )
>108	ExpressionStatement	 
>109	CallExpression	fgetc ( f )
>110	ArgumentList	f
>111	Argument	f
>112	Identifier	f
>113	Callee	fgetc
>114	Identifier	fgetc
>115	Condition	 
>116	RelationalExpression	nbytes -- > 0
>117	PrimaryExpression	0
>118	IncDecOp	nbytes --
>119	IncDec	--
>120	Identifier	nbytes
>121	ExpressionStatement	 
>122	AssignmentExpr	nbytes -= width * 3
>123	MultiplicativeExpression	width * 3
>124	PrimaryExpression	3
>125	Identifier	width
>126	Identifier	nbytes
>127	ExpressionStatement	 
>128	CallExpression	fread ( sline , width , 3 , f )
>129	ArgumentList	sline
>130	Argument	f
>131	Identifier	f
>132	Argument	3
>133	PrimaryExpression	3
>134	Argument	width
>135	Identifier	width
>136	Argument	sline
>137	Identifier	sline
>138	Callee	fread
>139	Identifier	fread
>140	ExpressionStatement	 
>141	AssignmentExpr	nbytes *= 4
>142	PrimaryExpression	4
>143	Identifier	nbytes
>144	ExpressionStatement	 
>145	AssignmentExpr	nbytes = ( ( width * 3 ) + 3 ) / 4
>146	MultiplicativeExpression	( ( width * 3 ) + 3 ) / 4
>147	PrimaryExpression	4
>148	AdditiveExpression	( width * 3 ) + 3
>149	PrimaryExpression	3
>150	MultiplicativeExpression	width * 3
>151	PrimaryExpression	3
>152	Identifier	width
>153	Identifier	nbytes
>154	Label	 
>155	ReturnStatement	 
>156	WhileStatement	while ( nbytes -- > 0 )
>157	ExpressionStatement	 
>158	CallExpression	fgetc ( f )
>159	ArgumentList	f
>160	Argument	f
>161	Identifier	f
>162	Callee	fgetc
>163	Identifier	fgetc
>164	Condition	 
>165	RelationalExpression	nbytes -- > 0
>166	PrimaryExpression	0
>167	IncDecOp	nbytes --
>168	IncDec	--
>169	Identifier	nbytes
>170	ExpressionStatement	 
>171	AssignmentExpr	nbytes -= width
>172	Identifier	width
>173	Identifier	nbytes
>174	ExpressionStatement	 
>175	CallExpression	fread ( sline , width , 1 , f )
>176	ArgumentList	sline
>177	Argument	f
>178	Identifier	f
>179	Argument	1
>180	PrimaryExpression	1
>181	Argument	width
>182	Identifier	width
>183	Argument	sline
>184	Identifier	sline
>185	Callee	fread
>186	Identifier	fread
>187	ExpressionStatement	 
>188	AssignmentExpr	nbytes *= 4
>189	PrimaryExpression	4
>190	Identifier	nbytes
>191	ExpressionStatement	 
>192	AssignmentExpr	nbytes = ( width + 3 ) / 4
>193	MultiplicativeExpression	( width + 3 ) / 4
>194	PrimaryExpression	4
>195	AdditiveExpression	width + 3
>196	PrimaryExpression	3
>197	Identifier	width
>198	Identifier	nbytes
>199	Label	 
>200	Condition	 
>201	Identifier	pixbytes
>202	IdentifierDeclStatement	 
>203	IdentifierDecl	j
>204	Identifier	j
>205	IdentifierDeclType	int
>206	IdentifierDecl	k
>207	Identifier	k
>208	IdentifierDeclType	int
>209	IdentifierDecl	i
>210	Identifier	i
>211	IdentifierDeclType	int
>212	IdentifierDecl	nbytes
>213	Identifier	nbytes
>214	IdentifierDeclType	int
>228	FunctionDef	BMPLineRLE8 (FILE * f , char * sline , int pixbytes , int width)
>229	ParameterList	FILE * f , char * sline , int pixbytes , int width
>230	Parameter	 
>231	Identifier	width
>232	ParameterType	int
>233	Parameter	 
>234	Identifier	pixbytes
>235	ParameterType	int
>236	Parameter	 
>237	Identifier	sline
>238	ParameterType	char *
>239	Parameter	 
>240	Identifier	f
>241	ParameterType	FILE *
>242	ReturnType	static void
>243	CompoundStatement	 
>244	ExpressionStatement	 
>245	CallExpression	Error ( \"RLE8 not yet supported.\" )
>246	ArgumentList	\"RLE8 not yet supported.\"
>247	Argument	\"RLE8 not yet supported.\"
>248	PrimaryExpression	\"RLE8 not yet supported.\"
>249	Callee	Error
>250	Identifier	Error
>258	FunctionDef	BMPLineRLE4 (FILE * f , char * sline , int pixbytes , int width)
>259	ParameterList	FILE * f , char * sline , int pixbytes , int width
>260	Parameter	 
>261	Identifier	width
>262	ParameterType	int
>263	Parameter	 
>264	Identifier	pixbytes
>265	ParameterType	int
>266	Parameter	 
>267	Identifier	sline
>268	ParameterType	char *
>269	Parameter	 
>270	Identifier	f
>271	ParameterType	FILE *
>272	ReturnType	static void
>273	CompoundStatement	 
>274	ExpressionStatement	 
>275	CallExpression	Error ( \"RLE4 not yet supported.\" )
>276	ArgumentList	\"RLE4 not yet supported.\"
>277	Argument	\"RLE4 not yet supported.\"
>278	PrimaryExpression	\"RLE4 not yet supported.\"
>279	Callee	Error
>280	Identifier	Error
>288	FunctionDef	BMPLine (FILE * f , char * scanline , int pixbytes , int width , int rle)
>289	ParameterList	FILE * f , char * scanline , int pixbytes , int width , int rle
>290	Parameter	 
>291	Identifier	rle
>292	ParameterType	int
>293	Parameter	 
>294	Identifier	width
>295	ParameterType	int
>296	Parameter	 
>297	Identifier	pixbytes
>298	ParameterType	int
>299	Parameter	 
>300	Identifier	scanline
>301	ParameterType	char *
>302	Parameter	 
>303	Identifier	f
>304	ParameterType	FILE *
>305	ReturnType	static void
>306	CompoundStatement	 
>307	ExpressionStatement	 
>308	CallExpression	Error ( \"Unknown compression type.\" )
>309	ArgumentList	\"Unknown compression type.\"
>310	Argument	\"Unknown compression type.\"
>311	PrimaryExpression	\"Unknown compression type.\"
>312	Callee	Error
>313	Identifier	Error
>314	SwitchStatement	switch ( rle )
>315	CompoundStatement	 
>316	ReturnStatement	 
>317	ExpressionStatement	 
>318	CallExpression	BMPLineRLE4 ( f , scanline , pixbytes , width )
>319	ArgumentList	f
>320	Argument	width
>321	Identifier	width
>322	Argument	pixbytes
>323	Identifier	pixbytes
>324	Argument	scanline
>325	Identifier	scanline
>326	Argument	f
>327	Identifier	f
>328	Callee	BMPLineRLE4
>329	Identifier	BMPLineRLE4
>330	Label	 
>331	Identifier	xBI_RLE4
>332	ReturnStatement	 
>333	ExpressionStatement	 
>334	CallExpression	BMPLineRLE8 ( f , scanline , pixbytes , width )
>335	ArgumentList	f
>336	Argument	width
>337	Identifier	width
>338	Argument	pixbytes
>339	Identifier	pixbytes
>340	Argument	scanline
>341	Identifier	scanline
>342	Argument	f
>343	Identifier	f
>344	Callee	BMPLineRLE8
>345	Identifier	BMPLineRLE8
>346	Label	 
>347	Identifier	xBI_RLE8
>348	ReturnStatement	 
>349	ExpressionStatement	 
>350	CallExpression	BMPLineNone ( f , scanline , pixbytes , width )
>351	ArgumentList	f
>352	Argument	width
>353	Identifier	width
>354	Argument	pixbytes
>355	Identifier	pixbytes
>356	Argument	scanline
>357	Identifier	scanline
>358	Argument	f
>359	Identifier	f
>360	Callee	BMPLineNone
>361	Identifier	BMPLineNone
>362	Label	 
>363	Identifier	xBI_NONE
>364	Condition	 
>365	Identifier	rle
>374	FunctionDef	PrintHeader (binfo_t * b)
>375	ParameterList	binfo_t * b
>376	Parameter	 
>377	Identifier	b
>378	ParameterType	binfo_t *
>379	ReturnType	static void
>380	CompoundStatement	 
>381	ExpressionStatement	 
>382	CallExpression	printf ( \"biClrImportant 
>383	ArgumentList	\"biClrImportant 
>384	Argument	b -> biClrImportant
>385	PtrMemberAccess	b -> biClrImportant
>386	Identifier	biClrImportant
>387	Identifier	b
>388	Argument	\"biClrImportant 
>389	PrimaryExpression	\"biClrImportant 
>390	Callee	printf
>391	Identifier	printf
>392	ExpressionStatement	 
>393	CallExpression	printf ( \"biClrUsed      
>394	ArgumentList	\"biClrUsed      
>395	Argument	b -> biClrUsed
>396	PtrMemberAccess	b -> biClrUsed
>397	Identifier	biClrUsed
>398	Identifier	b
>399	Argument	\"biClrUsed      
>400	PrimaryExpression	\"biClrUsed      
>401	Callee	printf
>402	Identifier	printf
>403	ExpressionStatement	 
>404	CallExpression	printf ( \"biYPelsPerMeter
>405	ArgumentList	\"biYPelsPerMeter
>406	Argument	b -> biYPelsPerMeter
>407	PtrMemberAccess	b -> biYPelsPerMeter
>408	Identifier	biYPelsPerMeter
>409	Identifier	b
>410	Argument	\"biYPelsPerMeter
>411	PrimaryExpression	\"biYPelsPerMeter
>412	Callee	printf
>413	Identifier	printf
>414	ExpressionStatement	 
>415	CallExpression	printf ( \"biXPelsPerMeter
>416	ArgumentList	\"biXPelsPerMeter
>417	Argument	b -> biXPelsPerMeter
>418	PtrMemberAccess	b -> biXPelsPerMeter
>419	Identifier	biXPelsPerMeter
>420	Identifier	b
>421	Argument	\"biXPelsPerMeter
>422	PrimaryExpression	\"biXPelsPerMeter
>423	Callee	printf
>424	Identifier	printf
>425	ExpressionStatement	 
>426	CallExpression	printf ( \"biSizeImage    
>427	ArgumentList	\"biSizeImage    
>428	Argument	b -> biSizeImage
>429	PtrMemberAccess	b -> biSizeImage
>430	Identifier	biSizeImage
>431	Identifier	b
>432	Argument	\"biSizeImage    
>433	PrimaryExpression	\"biSizeImage    
>434	Callee	printf
>435	Identifier	printf
>436	ExpressionStatement	 
>437	CallExpression	printf ( \"biCompression  
>438	ArgumentList	\"biCompression  
>439	Argument	b -> biCompression
>440	PtrMemberAccess	b -> biCompression
>441	Identifier	biCompression
>442	Identifier	b
>443	Argument	\"biCompression  
>444	PrimaryExpression	\"biCompression  
>445	Callee	printf
>446	Identifier	printf
>447	ExpressionStatement	 
>448	CallExpression	printf ( \"biBitCount     
>449	ArgumentList	\"biBitCount     
>450	Argument	b -> biBitCount
>451	PtrMemberAccess	b -> biBitCount
>452	Identifier	biBitCount
>453	Identifier	b
>454	Argument	\"biBitCount     
>455	PrimaryExpression	\"biBitCount     
>456	Callee	printf
>457	Identifier	printf
>458	ExpressionStatement	 
>459	CallExpression	printf ( \"biPlanes       
>460	ArgumentList	\"biPlanes       
>461	Argument	b -> biPlanes
>462	PtrMemberAccess	b -> biPlanes
>463	Identifier	biPlanes
>464	Identifier	b
>465	Argument	\"biPlanes       
>466	PrimaryExpression	\"biPlanes       
>467	Callee	printf
>468	Identifier	printf
>469	ExpressionStatement	 
>470	CallExpression	printf ( \"biHeight       
>471	ArgumentList	\"biHeight       
>472	Argument	b -> biHeight
>473	PtrMemberAccess	b -> biHeight
>474	Identifier	biHeight
>475	Identifier	b
>476	Argument	\"biHeight       
>477	PrimaryExpression	\"biHeight       
>478	Callee	printf
>479	Identifier	printf
>480	ExpressionStatement	 
>481	CallExpression	printf ( \"biWidth        
>482	ArgumentList	\"biWidth        
>483	Argument	b -> biWidth
>484	PtrMemberAccess	b -> biWidth
>485	Identifier	biWidth
>486	Identifier	b
>487	Argument	\"biWidth        
>488	PrimaryExpression	\"biWidth        
>489	Callee	printf
>490	Identifier	printf
>491	ExpressionStatement	 
>492	CallExpression	printf ( \"biSize         
>493	ArgumentList	\"biSize         
>494	Argument	b -> biSize
>495	PtrMemberAccess	b -> biSize
>496	Identifier	biSize
>497	Identifier	b
>498	Argument	\"biSize         
>499	PrimaryExpression	\"biSize         
>500	Callee	printf
>501	Identifier	printf
>518	FunctionDef	LoadBMP (char * filename , bitmap_t * bit)
>519	ParameterList	char * filename , bitmap_t * bit
>520	Parameter	 
>521	Identifier	bit
>522	ParameterType	bitmap_t *
>523	Parameter	 
>524	Identifier	filename
>525	ParameterType	char *
>526	ReturnType	void
>527	CompoundStatement	 
>528	ExpressionStatement	 
>529	CallExpression	fclose ( f )
>530	ArgumentList	f
>531	Argument	f
>532	Identifier	f
>533	Callee	fclose
>534	Identifier	fclose
>535	ExpressionStatement	 
>536	CallExpression	free ( scanline )
>537	ArgumentList	scanline
>538	Argument	scanline
>539	Identifier	scanline
>540	Callee	free
>541	Identifier	free
>542	ForStatement	for ( i = 0 ; i < info . biHeight ; i ++ )
>543	CompoundStatement	 
>544	ExpressionStatement	 
>545	CallExpression	memcpy ( & bit -> data [ info . biWidth * pixbytes * ( info . biHeight - i - 1 ) ] , scanline , info . biWidth * \
>546	ArgumentList	& bit -> data [ info . biWidth * pixbytes * ( info . biHeight - i - 1 ) ]
>547	Argument	info . biWidth * pixbytes
>548	MultiplicativeExpression	info . biWidth * pixbytes
>549	Identifier	pixbytes
>550	MemberAccess	info . biWidth
>551	Identifier	biWidth
>552	Identifier	info
>553	Argument	scanline
>554	Identifier	scanline
>555	Argument	& bit -> data [ info . biWidth * pixbytes * ( info . biHeight - i - 1 ) ]
>556	UnaryOp	& bit -> data [ info . biWidth * pixbytes * ( info . biHeight - i - 1 ) ]
>557	ArrayIndexing	bit -> data [ info . biWidth * pixbytes * ( info . biHeight - i - 1 ) ]
>558	MultiplicativeExpression	info . biWidth * pixbytes * ( info . biHeight - i - 1 )
>559	MultiplicativeExpression	pixbytes * ( info . biHeight - i - 1 )
>560	AdditiveExpression	info . biHeight - i - 1
>561	AdditiveExpression	i - 1
>562	PrimaryExpression	1
>563	Identifier	i
>564	MemberAccess	info . biHeight
>565	Identifier	biHeight
>566	Identifier	info
>567	Identifier	pixbytes
>568	MemberAccess	info . biWidth
>569	Identifier	biWidth
>570	Identifier	info
>571	PtrMemberAccess	bit -> data
>572	Identifier	data
>573	Identifier	bit
>574	UnaryOperator	&
>575	Callee	memcpy
>576	Identifier	memcpy
>577	ExpressionStatement	 
>578	CallExpression	BMPLine ( f , scanline , pixbytes , info . biWidth , info . biCompression )
>579	ArgumentList	f
>580	Argument	info . biCompression
>581	MemberAccess	info . biCompression
>582	Identifier	biCompression
>583	Identifier	info
>584	Argument	info . biWidth
>585	MemberAccess	info . biWidth
>586	Identifier	biWidth
>587	Identifier	info
>588	Argument	pixbytes
>589	Identifier	pixbytes
>590	Argument	scanline
>591	Identifier	scanline
>592	Argument	f
>593	Identifier	f
>594	Callee	BMPLine
>595	Identifier	BMPLine
>596	IncDecOp	 
>597	IncDec	++
>598	Identifier	i
>599	Condition	 
>600	RelationalExpression	i < info . biHeight
>601	MemberAccess	info . biHeight
>602	Identifier	biHeight
>603	Identifier	info
>604	Identifier	i
>605	ForInit	 
>606	AssignmentExpr	i = 0
>607	PrimaryExpression	0
>608	Identifier	i
>609	ExpressionStatement	 
>610	CallExpression	malloc ( info . biWidth * pixbytes * info . biHeight )
>611	ArgumentList	info . biWidth * pixbytes * info . biHeight
>612	Argument	info . biWidth * pixbytes * info . biHeight
>613	MultiplicativeExpression	info . biWidth * pixbytes * info . biHeight
>614	MultiplicativeExpression	pixbytes * info . biHeight
>615	MemberAccess	info . biHeight
>616	Identifier	biHeight
>617	Identifier	info
>618	Identifier	pixbytes
>619	MemberAccess	info . biWidth
>620	Identifier	biWidth
>621	Identifier	info
>622	Callee	malloc
>623	Identifier	malloc
>624	Statement	 
>625	Statement	 
>626	Statement	 
>627	Statement	 
>628	Statement	 
>629	Statement	 
>630	Statement	 
>631	Statement	 
>632	Statement	 
>633	Statement	 
>634	ExpressionStatement	 
>635	CallExpression	malloc ( rowbytes )
>636	ArgumentList	rowbytes
>637	Argument	rowbytes
>638	Identifier	rowbytes
>639	Callee	malloc
>640	Identifier	malloc
>641	Statement	 
>642	Statement	 
>643	Statement	 
>644	Statement	 
>645	Statement	 
>646	Statement	 
>647	Statement	 
>648	ExpressionStatement	 
>649	AssignmentExpr	rowbytes *= 4
>650	PrimaryExpression	4
>651	Identifier	rowbytes
>652	ExpressionStatement	 
>653	AssignmentExpr	rowbytes = ( ( info . biWidth * pixbytes ) + 3 ) / 4
>654	MultiplicativeExpression	( ( info . biWidth * pixbytes ) + 3 ) / 4
>655	PrimaryExpression	4
>656	AdditiveExpression	( info . biWidth * pixbytes ) + 3
>657	PrimaryExpression	3
>658	MultiplicativeExpression	info . biWidth * pixbytes
>659	Identifier	pixbytes
>660	MemberAccess	info . biWidth
>661	Identifier	biWidth
>662	Identifier	info
>663	Identifier	rowbytes
>664	ExpressionStatement	 
>665	CallExpression	fseek ( f , bhd . bfOffBits , SEEK_SET )
>666	ArgumentList	f
>667	Argument	SEEK_SET
>668	Identifier	SEEK_SET
>669	Argument	bhd . bfOffBits
>670	MemberAccess	bhd . bfOffBits
>671	Identifier	bfOffBits
>672	Identifier	bhd
>673	Argument	f
>674	Identifier	f
>675	Callee	fseek
>676	Identifier	fseek
>677	IfStatement	if ( pixbytes == 1 )
>678	CompoundStatement	 
>679	ForStatement	for ( i = 0 ; i < 256 ; i ++ )
>680	CompoundStatement	 
>681	ExpressionStatement	 
>682	AssignmentExpr	bit -> palette [ i ] . b = q . blue
>683	MemberAccess	q . blue
>684	Identifier	blue
>685	Identifier	q
>686	MemberAccess	bit -> palette [ i ] . b
>687	Identifier	b
>688	ArrayIndexing	bit -> palette [ i ]
>689	Identifier	i
>690	PtrMemberAccess	bit -> palette
>691	Identifier	palette
>692	Identifier	bit
>693	ExpressionStatement	 
>694	AssignmentExpr	bit -> palette [ i ] . g = q . green
>695	MemberAccess	q . green
>696	Identifier	green
>697	Identifier	q
>698	MemberAccess	bit -> palette [ i ] . g
>699	Identifier	g
>700	ArrayIndexing	bit -> palette [ i ]
>701	Identifier	i
>702	PtrMemberAccess	bit -> palette
>703	Identifier	palette
>704	Identifier	bit
>705	ExpressionStatement	 
>706	AssignmentExpr	bit -> palette [ i ] . r = q . red
>707	MemberAccess	q . red
>708	Identifier	red
>709	Identifier	q
>710	MemberAccess	bit -> palette [ i ] . r
>711	Identifier	r
>712	ArrayIndexing	bit -> palette [ i ]
>713	Identifier	i
>714	PtrMemberAccess	bit -> palette
>715	Identifier	palette
>716	Identifier	bit
>717	IfStatement	if ( fread ( & q , sizeof ( drgb_t ) , 1 , f ) != 1 )
>718	CompoundStatement	 
>719	ExpressionStatement	 
>720	CallExpression	Error ( \"Unable to read palette.\" )
>721	ArgumentList	\"Unable to read palette.\"
>722	Argument	\"Unable to read palette.\"
>723	PrimaryExpression	\"Unable to read palette.\"
>724	Callee	Error
>725	Identifier	Error
>726	ExpressionStatement	 
>727	CallExpression	free ( bit -> palette )
>728	ArgumentList	bit -> palette
>729	Argument	bit -> palette
>730	PtrMemberAccess	bit -> palette
>731	Identifier	palette
>732	Identifier	bit
>733	Callee	free
>734	Identifier	free
>735	ExpressionStatement	 
>736	CallExpression	fclose ( f )
>737	ArgumentList	f
>738	Argument	f
>739	Identifier	f
>740	Callee	fclose
>741	Identifier	fclose
>742	Condition	 
>743	EqualityExpression	fread ( & q , sizeof ( drgb_t ) , 1 , f ) != 1
>744	PrimaryExpression	1
>745	CallExpression	fread ( & q , sizeof ( drgb_t ) , 1 , f )
>746	ArgumentList	& q
>747	Argument	f
>748	Identifier	f
>749	Argument	1
>750	PrimaryExpression	1
>751	Argument	sizeof ( drgb_t )
>752	SizeofExpr	sizeof ( drgb_t )
>753	SizeofOperand	drgb_t
>754	Sizeof	sizeof
>755	Argument	& q
>756	UnaryOp	& q
>757	Identifier	q
>758	UnaryOperator	&
>759	Callee	fread
>760	Identifier	fread
>761	IncDecOp	 
>762	IncDec	++
>763	Identifier	i
>764	Condition	 
>765	RelationalExpression	i < 256
>766	PrimaryExpression	256
>767	Identifier	i
>768	ForInit	 
>769	AssignmentExpr	i = 0
>770	PrimaryExpression	0
>771	Identifier	i
>772	ExpressionStatement	 
>773	CallExpression	malloc ( sizeof ( rgb_t ) * 256 )
>774	ArgumentList	sizeof ( rgb_t ) * 256
>775	Argument	sizeof ( rgb_t ) * 256
>776	MultiplicativeExpression	sizeof ( rgb_t ) * 256
>777	PrimaryExpression	256
>778	SizeofExpr	sizeof ( rgb_t )
>779	SizeofOperand	rgb_t
>780	Sizeof	sizeof
>781	Callee	malloc
>782	Identifier	malloc
>783	Statement	 
>784	Statement	 
>785	Statement	 
>786	Statement	 
>787	Statement	 
>788	Statement	 
>789	Statement	 
>790	Statement	 
>791	Statement	 
>792	IdentifierDeclStatement	 
>793	IdentifierDecl	q
>794	Identifier	q
>795	IdentifierDeclType	drgb_t
>796	Condition	 
>797	EqualityExpression	pixbytes == 1
>798	PrimaryExpression	1
>799	Identifier	pixbytes
>800	IfStatement	if ( info . biBitCount == 8 )
>801	ElseStatement	else
>802	IfStatement	if ( info . biBitCount == 24 )
>803	ElseStatement	else
>804	CompoundStatement	 
>805	ExpressionStatement	 
>806	CallExpression	Error ( \"BPP %d not supported.\" , info . biBitCount )
>807	ArgumentList	\"BPP %d not supported.\"
>808	Argument	info . biBitCount
>809	MemberAccess	info . biBitCount
>810	Identifier	biBitCount
>811	Identifier	info
>812	Argument	\"BPP %d not supported.\"
>813	PrimaryExpression	\"BPP %d not supported.\"
>814	Callee	Error
>815	Identifier	Error
>816	ExpressionStatement	 
>817	AssignmentExpr	pixbytes = 3
>818	PrimaryExpression	3
>819	Identifier	pixbytes
>820	Condition	 
>821	EqualityExpression	info . biBitCount == 24
>822	PrimaryExpression	24
>823	MemberAccess	info . biBitCount
>824	Identifier	biBitCount
>825	Identifier	info
>826	ExpressionStatement	 
>827	AssignmentExpr	pixbytes = 1
>828	PrimaryExpression	1
>829	Identifier	pixbytes
>830	Condition	 
>831	EqualityExpression	info . biBitCount == 8
>832	PrimaryExpression	8
>833	MemberAccess	info . biBitCount
>834	Identifier	biBitCount
>835	Identifier	info
>836	ExpressionStatement	 
>837	AssignmentExpr	bit -> palette = NULL
>838	Identifier	NULL
>839	PtrMemberAccess	bit -> palette
>840	Identifier	palette
>841	Identifier	bit
>842	ExpressionStatement	 
>843	AssignmentExpr	bit -> data = NULL
>844	Identifier	NULL
>845	PtrMemberAccess	bit -> data
>846	Identifier	data
>847	Identifier	bit
>848	ExpressionStatement	 
>849	AssignmentExpr	bit -> height = info . biHeight
>850	MemberAccess	info . biHeight
>851	Identifier	biHeight
>852	Identifier	info
>853	PtrMemberAccess	bit -> height
>854	Identifier	height
>855	Identifier	bit
>856	ExpressionStatement	 
>857	AssignmentExpr	bit -> width = info . biWidth
>858	MemberAccess	info . biWidth
>859	Identifier	biWidth
>860	Identifier	info
>861	PtrMemberAccess	bit -> width
>862	Identifier	width
>863	Identifier	bit
>864	ExpressionStatement	 
>865	AssignmentExpr	bit -> bpp = info . biBitCount
>866	MemberAccess	info . biBitCount
>867	Identifier	biBitCount
>868	Identifier	info
>869	PtrMemberAccess	bit -> bpp
>870	Identifier	bpp
>871	Identifier	bit
>872	IfStatement	if ( info . biSize != sizeof ( binfo_t ) )
>873	CompoundStatement	 
>874	ExpressionStatement	 
>875	CallExpression	Error ( \"We only support the info bitmap type.\" )
>876	ArgumentList	\"We only support the info bitmap type.\"
>877	Argument	\"We only support the info bitmap type.\"
>878	PrimaryExpression	\"We only support the info bitmap type.\"
>879	Callee	Error
>880	Identifier	Error
>881	ExpressionStatement	 
>882	CallExpression	fclose ( f )
>883	ArgumentList	f
>884	Argument	f
>885	Identifier	f
>886	Callee	fclose
>887	Identifier	fclose
>888	Condition	 
>889	EqualityExpression	info . biSize != sizeof ( binfo_t )
>890	SizeofExpr	sizeof ( binfo_t )
>891	SizeofOperand	binfo_t
>892	Sizeof	sizeof
>893	MemberAccess	info . biSize
>894	Identifier	biSize
>895	Identifier	info
>896	IfStatement	if ( fread ( & info , sizeof ( info ) , 1 , f ) != 1 )
>897	CompoundStatement	 
>898	ExpressionStatement	 
>899	CallExpression	Error ( \"Unable to read bitmap info header.\" )
>900	ArgumentList	\"Unable to read bitmap info header.\"
>901	Argument	\"Unable to read bitmap info header.\"
>902	PrimaryExpression	\"Unable to read bitmap info header.\"
>903	Callee	Error
>904	Identifier	Error
>905	ExpressionStatement	 
>906	CallExpression	fclose ( f )
>907	ArgumentList	f
>908	Argument	f
>909	Identifier	f
>910	Callee	fclose
>911	Identifier	fclose
>912	Condition	 
>913	EqualityExpression	fread ( & info , sizeof ( info ) , 1 , f ) != 1
>914	PrimaryExpression	1
>915	CallExpression	fread ( & info , sizeof ( info ) , 1 , f )
>916	ArgumentList	& info
>917	Argument	f
>918	Identifier	f
>919	Argument	1
>920	PrimaryExpression	1
>921	Argument	sizeof ( info )
>922	SizeofExpr	sizeof ( info )
>923	SizeofOperand	info
>924	Sizeof	sizeof
>925	Argument	& info
>926	UnaryOp	& info
>927	Identifier	info
>928	UnaryOperator	&
>929	Callee	fread
>930	Identifier	fread
>931	IfStatement	if ( bhd . bfType != BMP_SIGNATURE_WORD )
>932	CompoundStatement	 
>933	ExpressionStatement	 
>934	CallExpression	Error ( \"Invalid BMP file
>935	ArgumentList	\"Invalid BMP file
>936	Argument	filename
>937	Identifier	filename
>938	Argument	\"Invalid BMP file
>939	PrimaryExpression	\"Invalid BMP file
>940	Callee	Error
>941	Identifier	Error
>942	ExpressionStatement	 
>943	CallExpression	fclose ( f )
>944	ArgumentList	f
>945	Argument	f
>946	Identifier	f
>947	Callee	fclose
>948	Identifier	fclose
>949	Condition	 
>950	EqualityExpression	bhd . bfType != BMP_SIGNATURE_WORD
>951	Identifier	BMP_SIGNATURE_WORD
>952	MemberAccess	bhd . bfType
>953	Identifier	bfType
>954	Identifier	bhd
>955	IfStatement	if ( fread ( & bhd , sizeof ( bhd ) , 1 , f ) != 1 )
>956	CompoundStatement	 
>957	ExpressionStatement	 
>958	CallExpression	Error ( \"Unable to read in bitmap header.\" )
>959	ArgumentList	\"Unable to read in bitmap header.\"
>960	Argument	\"Unable to read in bitmap header.\"
>961	PrimaryExpression	\"Unable to read in bitmap header.\"
>962	Callee	Error
>963	Identifier	Error
>964	ExpressionStatement	 
>965	CallExpression	fclose ( f )
>966	ArgumentList	f
>967	Argument	f
>968	Identifier	f
>969	Callee	fclose
>970	Identifier	fclose
>971	Condition	 
>972	EqualityExpression	fread ( & bhd , sizeof ( bhd ) , 1 , f ) != 1
>973	PrimaryExpression	1
>974	CallExpression	fread ( & bhd , sizeof ( bhd ) , 1 , f )
>975	ArgumentList	& bhd
>976	Argument	f
>977	Identifier	f
>978	Argument	1
>979	PrimaryExpression	1
>980	Argument	sizeof ( bhd )
>981	SizeofExpr	sizeof ( bhd )
>982	SizeofOperand	bhd
>983	Sizeof	sizeof
>984	Argument	& bhd
>985	UnaryOp	& bhd
>986	Identifier	bhd
>987	UnaryOperator	&
>988	Callee	fread
>989	Identifier	fread
>990	IfStatement	if ( ( f = fopen ( filename , \"rb\" ) ) == NULL )
>991	CompoundStatement	 
>992	ExpressionStatement	 
>993	CallExpression	Error ( \"Unable to open %s.\" , filename )
>994	ArgumentList	\"Unable to open %s.\"
>995	Argument	filename
>996	Identifier	filename
>997	Argument	\"Unable to open %s.\"
>998	PrimaryExpression	\"Unable to open %s.\"
>999	Callee	Error
>1000	Identifier	Error
>1001	Condition	 
>1002	EqualityExpression	( f = fopen ( filename , \"rb\" ) ) == NULL
>1003	Identifier	NULL
>1004	AssignmentExpr	f = fopen ( filename , \"rb\" )
>1005	CallExpression	fopen ( filename , \"rb\" )
>1006	ArgumentList	filename
>1007	Argument	\"rb\"
>1008	PrimaryExpression	\"rb\"
>1009	Argument	filename
>1010	Identifier	filename
>1011	Callee	fopen
>1012	Identifier	fopen
>1013	Identifier	f
>1014	IdentifierDeclStatement	 
>1015	IdentifierDecl	* scanline
>1016	Identifier	scanline
>1017	IdentifierDeclType	char *
>1018	IdentifierDeclStatement	 
>1019	IdentifierDecl	pixbytes
>1020	Identifier	pixbytes
>1021	IdentifierDeclType	int
>1022	IdentifierDecl	i
>1023	Identifier	i
>1024	IdentifierDeclType	int
>1025	IdentifierDecl	rowbytes
>1026	Identifier	rowbytes
>1027	IdentifierDeclType	int
>1028	IdentifierDeclStatement	 
>1029	IdentifierDecl	pxlsize = 1
>1030	AssignmentExpr	pxlsize = 1
>1031	PrimaryExpression	1
>1032	Identifier	pxlsize
>1033	Identifier	pxlsize
>1034	IdentifierDeclType	int
>1035	IdentifierDeclStatement	 
>1036	IdentifierDecl	info
>1037	Identifier	info
>1038	IdentifierDeclType	binfo_t
>1039	IdentifierDeclStatement	 
>1040	IdentifierDecl	bhd
>1041	Identifier	bhd
>1042	IdentifierDeclType	bmphd_t
>1043	IdentifierDeclStatement	 
>1044	IdentifierDecl	* f
>1045	Identifier	f
>1046	IdentifierDeclType	FILE *
>1098	FunctionDef	BMPEncodeLine (FILE * f , unsigned char * data , int npxls , int pixbytes)
>1099	ParameterList	FILE * f , unsigned char * data , int npxls , int pixbytes
>1100	Parameter	 
>1101	Identifier	pixbytes
>1102	ParameterType	int
>1103	Parameter	 
>1104	Identifier	npxls
>1105	ParameterType	int
>1106	Parameter	 
>1107	Identifier	data
>1108	ParameterType	unsigned char *
>1109	Parameter	 
>1110	Identifier	f
>1111	ParameterType	FILE *
>1112	ReturnType	static void
>1113	CompoundStatement	 
>1114	ExpressionStatement	 
>1115	CallExpression	Error ( \"BMPEncodeLine Failed.\" )
>1116	ArgumentList	\"BMPEncodeLine Failed.\"
>1117	Argument	\"BMPEncodeLine Failed.\"
>1118	PrimaryExpression	\"BMPEncodeLine Failed.\"
>1119	Callee	Error
>1120	Identifier	Error
>1121	SwitchStatement	switch ( pixbytes )
>1122	CompoundStatement	 
>1123	ReturnStatement	 
>1124	WhileStatement	while ( nbytes -- > 0 )
>1125	ExpressionStatement	 
>1126	CallExpression	fputc ( 0 , f )
>1127	ArgumentList	0
>1128	Argument	f
>1129	Identifier	f
>1130	Argument	0
>1131	PrimaryExpression	0
>1132	Callee	fputc
>1133	Identifier	fputc
>1134	Condition	 
>1135	RelationalExpression	nbytes -- > 0
>1136	PrimaryExpression	0
>1137	IncDecOp	nbytes --
>1138	IncDec	--
>1139	Identifier	nbytes
>1140	ExpressionStatement	 
>1141	AssignmentExpr	nbytes -= npxls * 3
>1142	MultiplicativeExpression	npxls * 3
>1143	PrimaryExpression	3
>1144	Identifier	npxls
>1145	Identifier	nbytes
>1146	ExpressionStatement	 
>1147	CallExpression	fwrite ( data , npxls , 3 , f )
>1148	ArgumentList	data
>1149	Argument	f
>1150	Identifier	f
>1151	Argument	3
>1152	PrimaryExpression	3
>1153	Argument	npxls
>1154	Identifier	npxls
>1155	Argument	data
>1156	Identifier	data
>1157	Callee	fwrite
>1158	Identifier	fwrite
>1159	ExpressionStatement	 
>1160	AssignmentExpr	nbytes *= 4
>1161	PrimaryExpression	4
>1162	Identifier	nbytes
>1163	ExpressionStatement	 
>1164	AssignmentExpr	nbytes = ( ( npxls * 3 ) + 3 ) / 4
>1165	MultiplicativeExpression	( ( npxls * 3 ) + 3 ) / 4
>1166	PrimaryExpression	4
>1167	AdditiveExpression	( npxls * 3 ) + 3
>1168	PrimaryExpression	3
>1169	MultiplicativeExpression	npxls * 3
>1170	PrimaryExpression	3
>1171	Identifier	npxls
>1172	Identifier	nbytes
>1173	ForStatement	for ( i = 0 , j = 0 ; i < npxls ; i ++ , j += 3 )
>1174	CompoundStatement	 
>1175	ExpressionStatement	 
>1176	AssignmentExpr	data [ j + 2 ] = k
>1177	Identifier	k
>1178	ArrayIndexing	data [ j + 2 ]
>1179	AdditiveExpression	j + 2
>1180	PrimaryExpression	2
>1181	Identifier	j
>1182	Identifier	data
>1183	ExpressionStatement	 
>1184	AssignmentExpr	data [ j ] = data [ j + 2 ]
>1185	ArrayIndexing	data [ j + 2 ]
>1186	AdditiveExpression	j + 2
>1187	PrimaryExpression	2
>1188	Identifier	j
>1189	Identifier	data
>1190	ArrayIndexing	data [ j ]
>1191	Identifier	j
>1192	Identifier	data
>1193	ExpressionStatement	 
>1194	AssignmentExpr	k = data [ j ]
>1195	ArrayIndexing	data [ j ]
>1196	Identifier	j
>1197	Identifier	data
>1198	Identifier	k
>1199	Expression	 
>1200	AssignmentExpr	j += 3
>1201	PrimaryExpression	3
>1202	Identifier	j
>1203	IncDecOp	i ++
>1204	IncDec	++
>1205	Identifier	i
>1206	Condition	 
>1207	RelationalExpression	i < npxls
>1208	Identifier	npxls
>1209	Identifier	i
>1210	ForInit	 
>1211	Expression	i = 0 , j = 0
>1212	AssignmentExpr	j = 0
>1213	PrimaryExpression	0
>1214	Identifier	j
>1215	AssignmentExpr	i = 0
>1216	PrimaryExpression	0
>1217	Identifier	i
>1218	Label	 
>1219	ReturnStatement	 
>1220	WhileStatement	while ( nbytes -- > 0 )
>1221	ExpressionStatement	 
>1222	CallExpression	fputc ( 0 , f )
>1223	ArgumentList	0
>1224	Argument	f
>1225	Identifier	f
>1226	Argument	0
>1227	PrimaryExpression	0
>1228	Callee	fputc
>1229	Identifier	fputc
>1230	Condition	 
>1231	RelationalExpression	nbytes -- > 0
>1232	PrimaryExpression	0
>1233	IncDecOp	nbytes --
>1234	IncDec	--
>1235	Identifier	nbytes
>1236	ExpressionStatement	 
>1237	AssignmentExpr	nbytes -= npxls
>1238	Identifier	npxls
>1239	Identifier	nbytes
>1240	ExpressionStatement	 
>1241	CallExpression	fwrite ( data , npxls , 1 , f )
>1242	ArgumentList	data
>1243	Argument	f
>1244	Identifier	f
>1245	Argument	1
>1246	PrimaryExpression	1
>1247	Argument	npxls
>1248	Identifier	npxls
>1249	Argument	data
>1250	Identifier	data
>1251	Callee	fwrite
>1252	Identifier	fwrite
>1253	ExpressionStatement	 
>1254	AssignmentExpr	nbytes *= 4
>1255	PrimaryExpression	4
>1256	Identifier	nbytes
>1257	ExpressionStatement	 
>1258	AssignmentExpr	nbytes = ( npxls + 3 ) / 4
>1259	MultiplicativeExpression	( npxls + 3 ) / 4
>1260	PrimaryExpression	4
>1261	AdditiveExpression	npxls + 3
>1262	PrimaryExpression	3
>1263	Identifier	npxls
>1264	Identifier	nbytes
>1265	Label	 
>1266	Condition	 
>1267	Identifier	pixbytes
>1268	IdentifierDeclStatement	 
>1269	IdentifierDecl	k
>1270	Identifier	k
>1271	IdentifierDeclType	int
>1272	IdentifierDecl	j
>1273	Identifier	j
>1274	IdentifierDeclType	int
>1275	IdentifierDecl	i
>1276	Identifier	i
>1277	IdentifierDeclType	int
>1278	IdentifierDecl	nbytes
>1279	Identifier	nbytes
>1280	IdentifierDeclType	int
>1294	FunctionDef	WriteBMP (char * filename , bitmap_t * bit)
>1295	ParameterList	char * filename , bitmap_t * bit
>1296	Parameter	 
>1297	Identifier	bit
>1298	ParameterType	bitmap_t *
>1299	Parameter	 
>1300	Identifier	filename
>1301	ParameterType	char *
>1302	ReturnType	void
>1303	CompoundStatement	 
>1304	ExpressionStatement	 
>1305	CallExpression	fclose ( f )
>1306	ArgumentList	f
>1307	Argument	f
>1308	Identifier	f
>1309	Callee	fclose
>1310	Identifier	fclose
>1311	ExpressionStatement	 
>1312	CallExpression	fwrite ( & header , sizeof ( header ) , 1 , f )
>1313	ArgumentList	& header
>1314	Argument	f
>1315	Identifier	f
>1316	Argument	1
>1317	PrimaryExpression	1
>1318	Argument	sizeof ( header )
>1319	SizeofExpr	sizeof ( header )
>1320	SizeofOperand	header
>1321	Sizeof	sizeof
>1322	Argument	& header
>1323	UnaryOp	& header
>1324	Identifier	header
>1325	UnaryOperator	&
>1326	Callee	fwrite
>1327	Identifier	fwrite
>1328	ExpressionStatement	 
>1329	CallExpression	fseek ( f , 0L , SEEK_SET )
>1330	ArgumentList	f
>1331	Argument	SEEK_SET
>1332	Identifier	SEEK_SET
>1333	Argument	0L
>1334	PrimaryExpression	0L
>1335	Argument	f
>1336	Identifier	f
>1337	Callee	fseek
>1338	Identifier	fseek
>1339	ExpressionStatement	 
>1340	AssignmentExpr	header . bfOffBits = bmofs
>1341	Identifier	bmofs
>1342	MemberAccess	header . bfOffBits
>1343	Identifier	bfOffBits
>1344	Identifier	header
>1345	ExpressionStatement	 
>1346	AssignmentExpr	header . bfSize = ftell ( f )
>1347	CallExpression	ftell ( f )
>1348	ArgumentList	f
>1349	Argument	f
>1350	Identifier	f
>1351	Callee	ftell
>1352	Identifier	ftell
>1353	MemberAccess	header . bfSize
>1354	Identifier	bfSize
>1355	Identifier	header
>1356	ExpressionStatement	 
>1357	AssignmentExpr	header . bfType = BMP_SIGNATURE_WORD
>1358	Identifier	BMP_SIGNATURE_WORD
>1359	MemberAccess	header . bfType
>1360	Identifier	bfType
>1361	Identifier	header
>1362	ForStatement	for ( i = h - 1 ; i >= 0 ; i -- )
>1363	CompoundStatement	 
>1364	ExpressionStatement	 
>1365	CallExpression	BMPEncodeLine ( f , & bit -> data [ w * pixbytes * i ] , w , pixbytes )
>1366	ArgumentList	f
>1367	Argument	pixbytes
>1368	Identifier	pixbytes
>1369	Argument	w
>1370	Identifier	w
>1371	Argument	& bit -> data [ w * pixbytes * i ]
>1372	UnaryOp	& bit -> data [ w * pixbytes * i ]
>1373	ArrayIndexing	bit -> data [ w * pixbytes * i ]
>1374	MultiplicativeExpression	w * pixbytes * i
>1375	MultiplicativeExpression	pixbytes * i
>1376	Identifier	i
>1377	Identifier	pixbytes
>1378	Identifier	w
>1379	PtrMemberAccess	bit -> data
>1380	Identifier	data
>1381	Identifier	bit
>1382	UnaryOperator	&
>1383	Argument	f
>1384	Identifier	f
>1385	Callee	BMPEncodeLine
>1386	Identifier	BMPEncodeLine
>1387	IncDecOp	 
>1388	IncDec	--
>1389	Identifier	i
>1390	Condition	 
>1391	RelationalExpression	i >= 0
>1392	PrimaryExpression	0
>1393	Identifier	i
>1394	ForInit	 
>1395	AssignmentExpr	i = h - 1
>1396	AdditiveExpression	h - 1
>1397	PrimaryExpression	1
>1398	Identifier	h
>1399	Identifier	i
>1400	ExpressionStatement	 
>1401	AssignmentExpr	h = bit -> height
>1402	PtrMemberAccess	bit -> height
>1403	Identifier	height
>1404	Identifier	bit
>1405	Identifier	h
>1406	ExpressionStatement	 
>1407	AssignmentExpr	w = bit -> width
>1408	PtrMemberAccess	bit -> width
>1409	Identifier	width
>1410	Identifier	bit
>1411	Identifier	w
>1412	ExpressionStatement	 
>1413	AssignmentExpr	bmofs = ftell ( f )
>1414	CallExpression	ftell ( f )
>1415	ArgumentList	f
>1416	Argument	f
>1417	Identifier	f
>1418	Callee	ftell
>1419	Identifier	ftell
>1420	Identifier	bmofs
>1421	IfStatement	if ( bit -> bpp == 8 )
>1422	CompoundStatement	 
>1423	ForStatement	for ( i = 0 ; i < 256 ; i ++ )
>1424	CompoundStatement	 
>1425	ExpressionStatement	 
>1426	CallExpression	fwrite ( & q , sizeof ( q ) , 1 , f )
>1427	ArgumentList	& q
>1428	Argument	f
>1429	Identifier	f
>1430	Argument	1
>1431	PrimaryExpression	1
>1432	Argument	sizeof ( q )
>1433	SizeofExpr	sizeof ( q )
>1434	SizeofOperand	q
>1435	Sizeof	sizeof
>1436	Argument	& q
>1437	UnaryOp	& q
>1438	Identifier	q
>1439	UnaryOperator	&
>1440	Callee	fwrite
>1441	Identifier	fwrite
>1442	ExpressionStatement	 
>1443	AssignmentExpr	q . blue = bit -> palette [ i ] . b
>1444	MemberAccess	bit -> palette [ i ] . b
>1445	Identifier	b
>1446	ArrayIndexing	bit -> palette [ i ]
>1447	Identifier	i
>1448	PtrMemberAccess	bit -> palette
>1449	Identifier	palette
>1450	Identifier	bit
>1451	MemberAccess	q . blue
>1452	Identifier	blue
>1453	Identifier	q
>1454	ExpressionStatement	 
>1455	AssignmentExpr	q . green = bit -> palette [ i ] . g
>1456	MemberAccess	bit -> palette [ i ] . g
>1457	Identifier	g
>1458	ArrayIndexing	bit -> palette [ i ]
>1459	Identifier	i
>1460	PtrMemberAccess	bit -> palette
>1461	Identifier	palette
>1462	Identifier	bit
>1463	MemberAccess	q . green
>1464	Identifier	green
>1465	Identifier	q
>1466	ExpressionStatement	 
>1467	AssignmentExpr	q . red = bit -> palette [ i ] . r
>1468	MemberAccess	bit -> palette [ i ] . r
>1469	Identifier	r
>1470	ArrayIndexing	bit -> palette [ i ]
>1471	Identifier	i
>1472	PtrMemberAccess	bit -> palette
>1473	Identifier	palette
>1474	Identifier	bit
>1475	MemberAccess	q . red
>1476	Identifier	red
>1477	Identifier	q
>1478	IncDecOp	 
>1479	IncDec	++
>1480	Identifier	i
>1481	Condition	 
>1482	RelationalExpression	i < 256
>1483	PrimaryExpression	256
>1484	Identifier	i
>1485	ForInit	 
>1486	AssignmentExpr	i = 0
>1487	PrimaryExpression	0
>1488	Identifier	i
>1489	Condition	 
>1490	EqualityExpression	bit -> bpp == 8
>1491	PrimaryExpression	8
>1492	PtrMemberAccess	bit -> bpp
>1493	Identifier	bpp
>1494	Identifier	bit
>1495	IfStatement	if ( fwrite ( & info , sizeof ( binfo_t ) , 1 , f ) != 1 )
>1496	CompoundStatement	 
>1497	ExpressionStatement	 
>1498	CallExpression	Error ( \"fwrite failed.\" )
>1499	ArgumentList	\"fwrite failed.\"
>1500	Argument	\"fwrite failed.\"
>1501	PrimaryExpression	\"fwrite failed.\"
>1502	Callee	Error
>1503	Identifier	Error
>1504	Condition	 
>1505	EqualityExpression	fwrite ( & info , sizeof ( binfo_t ) , 1 , f ) != 1
>1506	PrimaryExpression	1
>1507	CallExpression	fwrite ( & info , sizeof ( binfo_t ) , 1 , f )
>1508	ArgumentList	& info
>1509	Argument	f
>1510	Identifier	f
>1511	Argument	1
>1512	PrimaryExpression	1
>1513	Argument	sizeof ( binfo_t )
>1514	SizeofExpr	sizeof ( binfo_t )
>1515	SizeofOperand	binfo_t
>1516	Sizeof	sizeof
>1517	Argument	& info
>1518	UnaryOp	& info
>1519	Identifier	info
>1520	UnaryOperator	&
>1521	Callee	fwrite
>1522	Identifier	fwrite
>1523	ExpressionStatement	 
>1524	AssignmentExpr	info . biClrImportant = 256
>1525	PrimaryExpression	256
>1526	MemberAccess	info . biClrImportant
>1527	Identifier	biClrImportant
>1528	Identifier	info
>1529	ExpressionStatement	 
>1530	AssignmentExpr	info . biClrUsed = 256
>1531	PrimaryExpression	256
>1532	MemberAccess	info . biClrUsed
>1533	Identifier	biClrUsed
>1534	Identifier	info
>1535	ExpressionStatement	 
>1536	AssignmentExpr	info . biYPelsPerMeter = 0
>1537	PrimaryExpression	0
>1538	MemberAccess	info . biYPelsPerMeter
>1539	Identifier	biYPelsPerMeter
>1540	Identifier	info
>1541	ExpressionStatement	 
>1542	AssignmentExpr	info . biXPelsPerMeter = 0
>1543	PrimaryExpression	0
>1544	MemberAccess	info . biXPelsPerMeter
>1545	Identifier	biXPelsPerMeter
>1546	Identifier	info
>1547	ExpressionStatement	 
>1548	AssignmentExpr	info . biSizeImage = bit -> width * bit -> height
>1549	MultiplicativeExpression	bit -> width * bit -> height
>1550	PtrMemberAccess	bit -> height
>1551	Identifier	height
>1552	Identifier	bit
>1553	PtrMemberAccess	bit -> width
>1554	Identifier	width
>1555	Identifier	bit
>1556	MemberAccess	info . biSizeImage
>1557	Identifier	biSizeImage
>1558	Identifier	info
>1559	ExpressionStatement	 
>1560	AssignmentExpr	info . biCompression = xBI_NONE
>1561	Identifier	xBI_NONE
>1562	MemberAccess	info . biCompression
>1563	Identifier	biCompression
>1564	Identifier	info
>1565	ExpressionStatement	 
>1566	AssignmentExpr	info . biBitCount = bit -> bpp
>1567	PtrMemberAccess	bit -> bpp
>1568	Identifier	bpp
>1569	Identifier	bit
>1570	MemberAccess	info . biBitCount
>1571	Identifier	biBitCount
>1572	Identifier	info
>1573	ExpressionStatement	 
>1574	AssignmentExpr	info . biPlanes = 1
>1575	PrimaryExpression	1
>1576	MemberAccess	info . biPlanes
>1577	Identifier	biPlanes
>1578	Identifier	info
>1579	ExpressionStatement	 
>1580	AssignmentExpr	info . biHeight = bit -> height
>1581	PtrMemberAccess	bit -> height
>1582	Identifier	height
>1583	Identifier	bit
>1584	MemberAccess	info . biHeight
>1585	Identifier	biHeight
>1586	Identifier	info
>1587	ExpressionStatement	 
>1588	AssignmentExpr	info . biWidth = bit -> width
>1589	PtrMemberAccess	bit -> width
>1590	Identifier	width
>1591	Identifier	bit
>1592	MemberAccess	info . biWidth
>1593	Identifier	biWidth
>1594	Identifier	info
>1595	ExpressionStatement	 
>1596	AssignmentExpr	info . biSize = sizeof ( binfo_t )
>1597	SizeofExpr	sizeof ( binfo_t )
>1598	SizeofOperand	binfo_t
>1599	Sizeof	sizeof
>1600	MemberAccess	info . biSize
>1601	Identifier	biSize
>1602	Identifier	info
>1603	IfStatement	if ( fwrite ( & header , sizeof ( header ) , 1 , f ) != 1 )
>1604	CompoundStatement	 
>1605	ExpressionStatement	 
>1606	CallExpression	Error ( \"Unable to fwrite.\" )
>1607	ArgumentList	\"Unable to fwrite.\"
>1608	Argument	\"Unable to fwrite.\"
>1609	PrimaryExpression	\"Unable to fwrite.\"
>1610	Callee	Error
>1611	Identifier	Error
>1612	Condition	 
>1613	EqualityExpression	fwrite ( & header , sizeof ( header ) , 1 , f ) != 1
>1614	PrimaryExpression	1
>1615	CallExpression	fwrite ( & header , sizeof ( header ) , 1 , f )
>1616	ArgumentList	& header
>1617	Argument	f
>1618	Identifier	f
>1619	Argument	1
>1620	PrimaryExpression	1
>1621	Argument	sizeof ( header )
>1622	SizeofExpr	sizeof ( header )
>1623	SizeofOperand	header
>1624	Sizeof	sizeof
>1625	Argument	& header
>1626	UnaryOp	& header
>1627	Identifier	header
>1628	UnaryOperator	&
>1629	Callee	fwrite
>1630	Identifier	fwrite
>1631	IfStatement	if ( ( f = fopen ( filename , \"wb\" ) ) == NULL )
>1632	CompoundStatement	 
>1633	ExpressionStatement	 
>1634	CallExpression	Error ( \"Unable to open %s.\" , filename )
>1635	ArgumentList	\"Unable to open %s.\"
>1636	Argument	filename
>1637	Identifier	filename
>1638	Argument	\"Unable to open %s.\"
>1639	PrimaryExpression	\"Unable to open %s.\"
>1640	Callee	Error
>1641	Identifier	Error
>1642	Condition	 
>1643	EqualityExpression	( f = fopen ( filename , \"wb\" ) ) == NULL
>1644	Identifier	NULL
>1645	AssignmentExpr	f = fopen ( filename , \"wb\" )
>1646	CallExpression	fopen ( filename , \"wb\" )
>1647	ArgumentList	filename
>1648	Argument	\"wb\"
>1649	PrimaryExpression	\"wb\"
>1650	Argument	filename
>1651	Identifier	filename
>1652	Callee	fopen
>1653	Identifier	fopen
>1654	Identifier	f
>1655	IfStatement	if ( bit -> bpp == 8 )
>1656	ElseStatement	else
>1657	IfStatement	if ( bit -> bpp == 24 )
>1658	ElseStatement	else
>1659	CompoundStatement	 
>1660	ExpressionStatement	 
>1661	CallExpression	Error ( \"BPP %d not supported.\" , bit -> bpp )
>1662	ArgumentList	\"BPP %d not supported.\"
>1663	Argument	bit -> bpp
>1664	PtrMemberAccess	bit -> bpp
>1665	Identifier	bpp
>1666	Identifier	bit
>1667	Argument	\"BPP %d not supported.\"
>1668	PrimaryExpression	\"BPP %d not supported.\"
>1669	Callee	Error
>1670	Identifier	Error
>1671	ExpressionStatement	 
>1672	AssignmentExpr	pixbytes = 3
>1673	PrimaryExpression	3
>1674	Identifier	pixbytes
>1675	Condition	 
>1676	EqualityExpression	bit -> bpp == 24
>1677	PrimaryExpression	24
>1678	PtrMemberAccess	bit -> bpp
>1679	Identifier	bpp
>1680	Identifier	bit
>1681	ExpressionStatement	 
>1682	AssignmentExpr	pixbytes = 1
>1683	PrimaryExpression	1
>1684	Identifier	pixbytes
>1685	Condition	 
>1686	EqualityExpression	bit -> bpp == 8
>1687	PrimaryExpression	8
>1688	PtrMemberAccess	bit -> bpp
>1689	Identifier	bpp
>1690	Identifier	bit
>1691	IdentifierDeclStatement	 
>1692	IdentifierDecl	pixbytes
>1693	Identifier	pixbytes
>1694	IdentifierDeclType	int
>1695	IdentifierDeclStatement	 
>1696	IdentifierDecl	i
>1697	Identifier	i
>1698	IdentifierDeclType	int
>1699	IdentifierDecl	h
>1700	Identifier	h
>1701	IdentifierDeclType	int
>1702	IdentifierDecl	w
>1703	Identifier	w
>1704	IdentifierDeclType	int
>1705	IdentifierDeclStatement	 
>1706	IdentifierDecl	bmofs
>1707	Identifier	bmofs
>1708	IdentifierDeclType	long
>1709	IdentifierDeclStatement	 
>1710	IdentifierDecl	q
>1711	Identifier	q
>1712	IdentifierDeclType	drgb_t
>1713	IdentifierDeclStatement	 
>1714	IdentifierDecl	info
>1715	Identifier	info
>1716	IdentifierDeclType	binfo_t
>1717	IdentifierDeclStatement	 
>1718	IdentifierDecl	header
>1719	Identifier	header
>1720	IdentifierDeclType	bmphd_t
>1721	IdentifierDeclStatement	 
>1722	IdentifierDecl	* f
>1723	Identifier	f
>1724	IdentifierDeclType	FILE *
>1783	FunctionDef	NewBMP (int width , int height , int bpp , bitmap_t * bit)
>1784	ParameterList	int width , int height , int bpp , bitmap_t * bit
>1785	Parameter	 
>1786	Identifier	bit
>1787	ParameterType	bitmap_t *
>1788	Parameter	 
>1789	Identifier	bpp
>1790	ParameterType	int
>1791	Parameter	 
>1792	Identifier	height
>1793	ParameterType	int
>1794	Parameter	 
>1795	Identifier	width
>1796	ParameterType	int
>1797	ReturnType	void
>1798	CompoundStatement	 
>1799	IfStatement	if ( pixbytes == 1 )
>1800	ElseStatement	else
>1801	CompoundStatement	 
>1802	ExpressionStatement	 
>1803	AssignmentExpr	bit -> palette = NULL
>1804	Identifier	NULL
>1805	PtrMemberAccess	bit -> palette
>1806	Identifier	palette
>1807	Identifier	bit
>1808	CompoundStatement	 
>1809	IfStatement	if ( bit -> palette == NULL )
>1810	CompoundStatement	 
>1811	ExpressionStatement	 
>1812	CallExpression	Error ( \"NewBMP
>1813	ArgumentList	\"NewBMP
>1814	Argument	\"NewBMP
>1815	PrimaryExpression	\"NewBMP
>1816	Callee	Error
>1817	Identifier	Error
>1818	Condition	 
>1819	EqualityExpression	bit -> palette == NULL
>1820	Identifier	NULL
>1821	PtrMemberAccess	bit -> palette
>1822	Identifier	palette
>1823	Identifier	bit
>1824	ExpressionStatement	 
>1825	AssignmentExpr	bit -> palette = ( rgb_t * ) malloc ( 768 )
>1826	CastExpression	( rgb_t * ) malloc ( 768 )
>1827	CallExpression	malloc ( 768 )
>1828	ArgumentList	768
>1829	Argument	768
>1830	PrimaryExpression	768
>1831	Callee	malloc
>1832	Identifier	malloc
>1833	CastTarget	rgb_t *
>1834	PtrMemberAccess	bit -> palette
>1835	Identifier	palette
>1836	Identifier	bit
>1837	Condition	 
>1838	EqualityExpression	pixbytes == 1
>1839	PrimaryExpression	1
>1840	Identifier	pixbytes
>1841	IfStatement	if ( bit -> data == NULL )
>1842	CompoundStatement	 
>1843	ExpressionStatement	 
>1844	CallExpression	Error ( \"NewBMP
>1845	ArgumentList	\"NewBMP
>1846	Argument	\"NewBMP
>1847	PrimaryExpression	\"NewBMP
>1848	Callee	Error
>1849	Identifier	Error
>1850	Condition	 
>1851	EqualityExpression	bit -> data == NULL
>1852	Identifier	NULL
>1853	PtrMemberAccess	bit -> data
>1854	Identifier	data
>1855	Identifier	bit
>1856	ExpressionStatement	 
>1857	CallExpression	malloc ( width * height * pixbytes )
>1858	ArgumentList	width * height * pixbytes
>1859	Argument	width * height * pixbytes
>1860	MultiplicativeExpression	width * height * pixbytes
>1861	MultiplicativeExpression	height * pixbytes
>1862	Identifier	pixbytes
>1863	Identifier	height
>1864	Identifier	width
>1865	Callee	malloc
>1866	Identifier	malloc
>1867	Statement	 
>1868	Statement	 
>1869	Statement	 
>1870	Statement	 
>1871	Statement	 
>1872	Statement	 
>1873	Statement	 
>1874	Statement	 
>1875	Statement	 
>1876	Statement	 
>1877	ExpressionStatement	 
>1878	AssignmentExpr	bit -> height = height
>1879	Identifier	height
>1880	PtrMemberAccess	bit -> height
>1881	Identifier	height
>1882	Identifier	bit
>1883	ExpressionStatement	 
>1884	AssignmentExpr	bit -> width = width
>1885	Identifier	width
>1886	PtrMemberAccess	bit -> width
>1887	Identifier	width
>1888	Identifier	bit
>1889	ExpressionStatement	 
>1890	AssignmentExpr	bit -> bpp = bpp
>1891	Identifier	bpp
>1892	PtrMemberAccess	bit -> bpp
>1893	Identifier	bpp
>1894	Identifier	bit
>1895	IfStatement	if ( bpp == 8 )
>1896	ElseStatement	else
>1897	IfStatement	if ( bpp == 24 )
>1898	ElseStatement	else
>1899	CompoundStatement	 
>1900	ExpressionStatement	 
>1901	CallExpression	Error ( \"NewBMP
>1902	ArgumentList	\"NewBMP
>1903	Argument	\"NewBMP
>1904	PrimaryExpression	\"NewBMP
>1905	Callee	Error
>1906	Identifier	Error
>1907	ExpressionStatement	 
>1908	AssignmentExpr	pixbytes = 3
>1909	PrimaryExpression	3
>1910	Identifier	pixbytes
>1911	Condition	 
>1912	EqualityExpression	bpp == 24
>1913	PrimaryExpression	24
>1914	Identifier	bpp
>1915	ExpressionStatement	 
>1916	AssignmentExpr	pixbytes = 1
>1917	PrimaryExpression	1
>1918	Identifier	pixbytes
>1919	Condition	 
>1920	EqualityExpression	bpp == 8
>1921	PrimaryExpression	8
>1922	Identifier	bpp
>1923	IdentifierDeclStatement	 
>1924	IdentifierDecl	pixbytes
>1925	Identifier	pixbytes
>1926	IdentifierDeclType	int
>1943	FunctionDef	FreeBMP (bitmap_t * bitmap)
>1944	ParameterList	bitmap_t * bitmap
>1945	Parameter	 
>1946	Identifier	bitmap
>1947	ParameterType	bitmap_t *
>1948	ReturnType	void
>1949	CompoundStatement	 
>1950	IfStatement	if ( bitmap -> data )
>1951	CompoundStatement	 
>1952	ExpressionStatement	 
>1953	AssignmentExpr	bitmap -> data = NULL
>1954	Identifier	NULL
>1955	PtrMemberAccess	bitmap -> data
>1956	Identifier	data
>1957	Identifier	bitmap
>1958	ExpressionStatement	 
>1959	CallExpression	free ( bitmap -> data )
>1960	ArgumentList	bitmap -> data
>1961	Argument	bitmap -> data
>1962	PtrMemberAccess	bitmap -> data
>1963	Identifier	data
>1964	Identifier	bitmap
>1965	Callee	free
>1966	Identifier	free
>1967	Condition	 
>1968	PtrMemberAccess	bitmap -> data
>1969	Identifier	data
>1970	Identifier	bitmap
>1971	IfStatement	if ( bitmap -> palette )
>1972	CompoundStatement	 
>1973	ExpressionStatement	 
>1974	AssignmentExpr	bitmap -> palette = NULL
>1975	Identifier	NULL
>1976	PtrMemberAccess	bitmap -> palette
>1977	Identifier	palette
>1978	Identifier	bitmap
>1979	ExpressionStatement	 
>1980	CallExpression	free ( bitmap -> palette )
>1981	ArgumentList	bitmap -> palette
>1982	Argument	bitmap -> palette
>1983	PtrMemberAccess	bitmap -> palette
>1984	Identifier	palette
>1985	Identifier	bitmap
>1986	Callee	free
>1987	Identifier	free
>1988	Condition	 
>1989	PtrMemberAccess	bitmap -> palette
>1990	Identifier	palette
>1991	Identifier	bitmap
<3=9,8,4
<4=5
<5=7,6
<9=24,12,10
<10=11
<12=20,13
<13=14
<14=15
<15=19,16
<16=18,17
<20=21
<21=23,22
<24=25
<25=30,29,26
<26=28,27
<36=51,50,37
<37=47,44,41,38
<38=40,39
<41=43,42
<44=46,45
<47=49,48
<51=202,59,52
<52=53
<53=57,54
<54=55
<55=56
<57=58
<59=200,60
<60=199,191,187,174,170,156,155,154,144,140,127,121,107,62,61
<62=99,95,88,63
<63=82,72,64
<64=65
<65=67,66
<67=71,68
<68=70,69
<72=73
<73=79,74
<74=78,75
<75=77,76
<79=81,80
<82=83
<83=87,84
<84=86,85
<88=92,89
<89=91,90
<92=94,93
<95=96
<96=98,97
<99=100
<100=104,101
<101=103,102
<104=106,105
<107=115,108
<108=109
<109=113,110
<110=111
<111=112
<113=114
<115=116
<116=118,117
<118=120,119
<121=122
<122=126,123
<123=125,124
<127=128
<128=138,129
<129=136,134,132,130
<130=131
<132=133
<134=135
<136=137
<138=139
<140=141
<141=143,142
<144=145
<145=153,146
<146=148,147
<148=150,149
<150=152,151
<156=164,157
<157=158
<158=162,159
<159=160
<160=161
<162=163
<164=165
<165=167,166
<167=169,168
<170=171
<171=173,172
<174=175
<175=185,176
<176=183,181,179,177
<177=178
<179=180
<181=182
<183=184
<185=186
<187=188
<188=190,189
<191=192
<192=198,193
<193=195,194
<195=197,196
<200=201
<202=212,209,206,203
<203=205,204
<206=208,207
<209=211,210
<212=214,213
<228=243,242,229
<229=239,236,233,230
<230=232,231
<233=235,234
<236=238,237
<239=241,240
<243=244
<244=245
<245=249,246
<246=247
<247=248
<249=250
<258=273,272,259
<259=269,266,263,260
<260=262,261
<263=265,264
<266=268,267
<269=271,270
<273=274
<274=275
<275=279,276
<276=277
<277=278
<279=280
<288=306,305,289
<289=302,299,296,293,290
<290=292,291
<293=295,294
<296=298,297
<299=301,300
<302=304,303
<306=314,307
<307=308
<308=312,309
<309=310
<310=311
<312=313
<314=364,315
<315=362,349,348,346,333,332,330,317,316
<317=318
<318=328,319
<319=326,324,322,320
<320=321
<322=323
<324=325
<326=327
<328=329
<330=331
<333=334
<334=344,335
<335=342,340,338,336
<336=337
<338=339
<340=341
<342=343
<344=345
<346=347
<349=350
<350=360,351
<351=358,356,354,352
<352=353
<354=355
<356=357
<358=359
<360=361
<362=363
<364=365
<374=380,379,375
<375=376
<376=378,377
<380=491,480,469,458,447,436,425,414,403,392,381
<381=382
<382=390,383
<383=388,384
<384=385
<385=387,386
<388=389
<390=391
<392=393
<393=401,394
<394=399,395
<395=396
<396=398,397
<399=400
<401=402
<403=404
<404=412,405
<405=410,406
<406=407
<407=409,408
<410=411
<412=413
<414=415
<415=423,416
<416=421,417
<417=418
<418=420,419
<421=422
<423=424
<425=426
<426=434,427
<427=432,428
<428=429
<429=431,430
<432=433
<434=435
<436=437
<437=445,438
<438=443,439
<439=440
<440=442,441
<443=444
<445=446
<447=448
<448=456,449
<449=454,450
<450=451
<451=453,452
<454=455
<456=457
<458=459
<459=467,460
<460=465,461
<461=462
<462=464,463
<465=466
<467=468
<469=470
<470=478,471
<471=476,472
<472=473
<473=475,474
<476=477
<478=479
<480=481
<481=489,482
<482=487,483
<483=484
<484=486,485
<487=488
<489=490
<491=492
<492=500,493
<493=498,494
<494=495
<495=497,496
<498=499
<500=501
<518=527,526,519
<519=523,520
<520=522,521
<523=525,524
<527=1043,1039,1035,1028,1018,1014,990,955,931,896,872,864,856,848,842,836,800,677,664,652,648,647,646,645,644,643,642,641,634,633,632,631,630,629,628,627,626,625,624,609,542,535,528
<528=529
<529=533,530
<530=531
<531=532
<533=534
<535=536
<536=540,537
<537=538
<538=539
<540=541
<542=605,599,596,543
<543=577,544
<544=545
<545=575,546
<546=555,553,547
<547=548
<548=550,549
<550=552,551
<553=554
<555=556
<556=574,557
<557=571,558
<558=568,559
<559=567,560
<560=564,561
<561=563,562
<564=566,565
<568=570,569
<571=573,572
<575=576
<577=578
<578=594,579
<579=592,590,588,584,580
<580=581
<581=583,582
<584=585
<585=587,586
<588=589
<590=591
<592=593
<594=595
<596=598,597
<599=600
<600=604,601
<601=603,602
<605=606
<606=608,607
<609=610
<610=622,611
<611=612
<612=613
<613=619,614
<614=618,615
<615=617,616
<619=621,620
<622=623
<634=635
<635=639,636
<636=637
<637=638
<639=640
<648=649
<649=651,650
<652=653
<653=663,654
<654=656,655
<656=658,657
<658=660,659
<660=662,661
<664=665
<665=675,666
<666=673,669,667
<667=668
<669=670
<670=672,671
<673=674
<675=676
<677=796,678
<678=792,791,790,789,788,787,786,785,784,783,772,679
<679=768,764,761,680
<680=717,705,693,681
<681=682
<682=686,683
<683=685,684
<686=688,687
<688=690,689
<690=692,691
<693=694
<694=698,695
<695=697,696
<698=700,699
<700=702,701
<702=704,703
<705=706
<706=710,707
<707=709,708
<710=712,711
<712=714,713
<714=716,715
<717=742,718
<718=735,726,719
<719=720
<720=724,721
<721=722
<722=723
<724=725
<726=727
<727=733,728
<728=729
<729=730
<730=732,731
<733=734
<735=736
<736=740,737
<737=738
<738=739
<740=741
<742=743
<743=745,744
<745=759,746
<746=755,751,749,747
<747=748
<749=750
<751=752
<752=754,753
<755=756
<756=758,757
<759=760
<761=763,762
<764=765
<765=767,766
<768=769
<769=771,770
<772=773
<773=781,774
<774=775
<775=776
<776=778,777
<778=780,779
<781=782
<792=793
<793=795,794
<796=797
<797=799,798
<800=830,826,801
<801=802
<802=820,816,803
<803=804
<804=805
<805=806
<806=814,807
<807=812,808
<808=809
<809=811,810
<812=813
<814=815
<816=817
<817=819,818
<820=821
<821=823,822
<823=825,824
<826=827
<827=829,828
<830=831
<831=833,832
<833=835,834
<836=837
<837=839,838
<839=841,840
<842=843
<843=845,844
<845=847,846
<848=849
<849=853,850
<850=852,851
<853=855,854
<856=857
<857=861,858
<858=860,859
<861=863,862
<864=865
<865=869,866
<866=868,867
<869=871,870
<872=888,873
<873=881,874
<874=875
<875=879,876
<876=877
<877=878
<879=880
<881=882
<882=886,883
<883=884
<884=885
<886=887
<888=889
<889=893,890
<890=892,891
<893=895,894
<896=912,897
<897=905,898
<898=899
<899=903,900
<900=901
<901=902
<903=904
<905=906
<906=910,907
<907=908
<908=909
<910=911
<912=913
<913=915,914
<915=929,916
<916=925,921,919,917
<917=918
<919=920
<921=922
<922=924,923
<925=926
<926=928,927
<929=930
<931=949,932
<932=942,933
<933=934
<934=940,935
<935=938,936
<936=937
<938=939
<940=941
<942=943
<943=947,944
<944=945
<945=946
<947=948
<949=950
<950=952,951
<952=954,953
<955=971,956
<956=964,957
<957=958
<958=962,959
<959=960
<960=961
<962=963
<964=965
<965=969,966
<966=967
<967=968
<969=970
<971=972
<972=974,973
<974=988,975
<975=984,980,978,976
<976=977
<978=979
<980=981
<981=983,982
<984=985
<985=987,986
<988=989
<990=1001,991
<991=992
<992=993
<993=999,994
<994=997,995
<995=996
<997=998
<999=1000
<1001=1002
<1002=1004,1003
<1004=1013,1005
<1005=1011,1006
<1006=1009,1007
<1007=1008
<1009=1010
<1011=1012
<1014=1015
<1015=1017,1016
<1018=1025,1022,1019
<1019=1021,1020
<1022=1024,1023
<1025=1027,1026
<1028=1029
<1029=1034,1033,1030
<1030=1032,1031
<1035=1036
<1036=1038,1037
<1039=1040
<1040=1042,1041
<1043=1044
<1044=1046,1045
<1098=1113,1112,1099
<1099=1109,1106,1103,1100
<1100=1102,1101
<1103=1105,1104
<1106=1108,1107
<1109=1111,1110
<1113=1268,1121,1114
<1114=1115
<1115=1119,1116
<1116=1117
<1117=1118
<1119=1120
<1121=1266,1122
<1122=1265,1257,1253,1240,1236,1220,1219,1218,1173,1163,1159,1146,1140,1124,1123
<1124=1134,1125
<1125=1126
<1126=1132,1127
<1127=1130,1128
<1128=1129
<1130=1131
<1132=1133
<1134=1135
<1135=1137,1136
<1137=1139,1138
<1140=1141
<1141=1145,1142
<1142=1144,1143
<1146=1147
<1147=1157,1148
<1148=1155,1153,1151,1149
<1149=1150
<1151=1152
<1153=1154
<1155=1156
<1157=1158
<1159=1160
<1160=1162,1161
<1163=1164
<1164=1172,1165
<1165=1167,1166
<1167=1169,1168
<1169=1171,1170
<1173=1210,1206,1199,1174
<1174=1193,1183,1175
<1175=1176
<1176=1178,1177
<1178=1182,1179
<1179=1181,1180
<1183=1184
<1184=1190,1185
<1185=1189,1186
<1186=1188,1187
<1190=1192,1191
<1193=1194
<1194=1198,1195
<1195=1197,1196
<1199=1203,1200
<1200=1202,1201
<1203=1205,1204
<1206=1207
<1207=1209,1208
<1210=1211
<1211=1215,1212
<1212=1214,1213
<1215=1217,1216
<1220=1230,1221
<1221=1222
<1222=1228,1223
<1223=1226,1224
<1224=1225
<1226=1227
<1228=1229
<1230=1231
<1231=1233,1232
<1233=1235,1234
<1236=1237
<1237=1239,1238
<1240=1241
<1241=1251,1242
<1242=1249,1247,1245,1243
<1243=1244
<1245=1246
<1247=1248
<1249=1250
<1251=1252
<1253=1254
<1254=1256,1255
<1257=1258
<1258=1264,1259
<1259=1261,1260
<1261=1263,1262
<1266=1267
<1268=1278,1275,1272,1269
<1269=1271,1270
<1272=1274,1273
<1275=1277,1276
<1278=1280,1279
<1294=1303,1302,1295
<1295=1299,1296
<1296=1298,1297
<1299=1301,1300
<1303=1721,1717,1713,1709,1705,1695,1691,1655,1631,1603,1595,1587,1579,1573,1565,1559,1547,1541,1535,1529,1523,1495,1421,1412,1406,1400,1362,1356,1345,1339,1328,1311,1304
<1304=1305
<1305=1309,1306
<1306=1307
<1307=1308
<1309=1310
<1311=1312
<1312=1326,1313
<1313=1322,1318,1316,1314
<1314=1315
<1316=1317
<1318=1319
<1319=1321,1320
<1322=1323
<1323=1325,1324
<1326=1327
<1328=1329
<1329=1337,1330
<1330=1335,1333,1331
<1331=1332
<1333=1334
<1335=1336
<1337=1338
<1339=1340
<1340=1342,1341
<1342=1344,1343
<1345=1346
<1346=1353,1347
<1347=1351,1348
<1348=1349
<1349=1350
<1351=1352
<1353=1355,1354
<1356=1357
<1357=1359,1358
<1359=1361,1360
<1362=1394,1390,1387,1363
<1363=1364
<1364=1365
<1365=1385,1366
<1366=1383,1371,1369,1367
<1367=1368
<1369=1370
<1371=1372
<1372=1382,1373
<1373=1379,1374
<1374=1378,1375
<1375=1377,1376
<1379=1381,1380
<1383=1384
<1385=1386
<1387=1389,1388
<1390=1391
<1391=1393,1392
<1394=1395
<1395=1399,1396
<1396=1398,1397
<1400=1401
<1401=1405,1402
<1402=1404,1403
<1406=1407
<1407=1411,1408
<1408=1410,1409
<1412=1413
<1413=1420,1414
<1414=1418,1415
<1415=1416
<1416=1417
<1418=1419
<1421=1489,1422
<1422=1423
<1423=1485,1481,1478,1424
<1424=1466,1454,1442,1425
<1425=1426
<1426=1440,1427
<1427=1436,1432,1430,1428
<1428=1429
<1430=1431
<1432=1433
<1433=1435,1434
<1436=1437
<1437=1439,1438
<1440=1441
<1442=1443
<1443=1451,1444
<1444=1446,1445
<1446=1448,1447
<1448=1450,1449
<1451=1453,1452
<1454=1455
<1455=1463,1456
<1456=1458,1457
<1458=1460,1459
<1460=1462,1461
<1463=1465,1464
<1466=1467
<1467=1475,1468
<1468=1470,1469
<1470=1472,1471
<1472=1474,1473
<1475=1477,1476
<1478=1480,1479
<1481=1482
<1482=1484,1483
<1485=1486
<1486=1488,1487
<1489=1490
<1490=1492,1491
<1492=1494,1493
<1495=1504,1496
<1496=1497
<1497=1498
<1498=1502,1499
<1499=1500
<1500=1501
<1502=1503
<1504=1505
<1505=1507,1506
<1507=1521,1508
<1508=1517,1513,1511,1509
<1509=1510
<1511=1512
<1513=1514
<1514=1516,1515
<1517=1518
<1518=1520,1519
<1521=1522
<1523=1524
<1524=1526,1525
<1526=1528,1527
<1529=1530
<1530=1532,1531
<1532=1534,1533
<1535=1536
<1536=1538,1537
<1538=1540,1539
<1541=1542
<1542=1544,1543
<1544=1546,1545
<1547=1548
<1548=1556,1549
<1549=1553,1550
<1550=1552,1551
<1553=1555,1554
<1556=1558,1557
<1559=1560
<1560=1562,1561
<1562=1564,1563
<1565=1566
<1566=1570,1567
<1567=1569,1568
<1570=1572,1571
<1573=1574
<1574=1576,1575
<1576=1578,1577
<1579=1580
<1580=1584,1581
<1581=1583,1582
<1584=1586,1585
<1587=1588
<1588=1592,1589
<1589=1591,1590
<1592=1594,1593
<1595=1596
<1596=1600,1597
<1597=1599,1598
<1600=1602,1601
<1603=1612,1604
<1604=1605
<1605=1606
<1606=1610,1607
<1607=1608
<1608=1609
<1610=1611
<1612=1613
<1613=1615,1614
<1615=1629,1616
<1616=1625,1621,1619,1617
<1617=1618
<1619=1620
<1621=1622
<1622=1624,1623
<1625=1626
<1626=1628,1627
<1629=1630
<1631=1642,1632
<1632=1633
<1633=1634
<1634=1640,1635
<1635=1638,1636
<1636=1637
<1638=1639
<1640=1641
<1642=1643
<1643=1645,1644
<1645=1654,1646
<1646=1652,1647
<1647=1650,1648
<1648=1649
<1650=1651
<1652=1653
<1655=1685,1681,1656
<1656=1657
<1657=1675,1671,1658
<1658=1659
<1659=1660
<1660=1661
<1661=1669,1662
<1662=1667,1663
<1663=1664
<1664=1666,1665
<1667=1668
<1669=1670
<1671=1672
<1672=1674,1673
<1675=1676
<1676=1678,1677
<1678=1680,1679
<1681=1682
<1682=1684,1683
<1685=1686
<1686=1688,1687
<1688=1690,1689
<1691=1692
<1692=1694,1693
<1695=1702,1699,1696
<1696=1698,1697
<1699=1701,1700
<1702=1704,1703
<1705=1706
<1706=1708,1707
<1709=1710
<1710=1712,1711
<1713=1714
<1714=1716,1715
<1717=1718
<1718=1720,1719
<1721=1722
<1722=1724,1723
<1783=1798,1797,1784
<1784=1794,1791,1788,1785
<1785=1787,1786
<1788=1790,1789
<1791=1793,1792
<1794=1796,1795
<1798=1923,1895,1889,1883,1877,1876,1875,1874,1873,1872,1871,1870,1869,1868,1867,1856,1841,1799
<1799=1837,1808,1800
<1800=1801
<1801=1802
<1802=1803
<1803=1805,1804
<1805=1807,1806
<1808=1824,1809
<1809=1818,1810
<1810=1811
<1811=1812
<1812=1816,1813
<1813=1814
<1814=1815
<1816=1817
<1818=1819
<1819=1821,1820
<1821=1823,1822
<1824=1825
<1825=1834,1826
<1826=1833,1827
<1827=1831,1828
<1828=1829
<1829=1830
<1831=1832
<1834=1836,1835
<1837=1838
<1838=1840,1839
<1841=1850,1842
<1842=1843
<1843=1844
<1844=1848,1845
<1845=1846
<1846=1847
<1848=1849
<1850=1851
<1851=1853,1852
<1853=1855,1854
<1856=1857
<1857=1865,1858
<1858=1859
<1859=1860
<1860=1864,1861
<1861=1863,1862
<1865=1866
<1877=1878
<1878=1880,1879
<1880=1882,1881
<1883=1884
<1884=1886,1885
<1886=1888,1887
<1889=1890
<1890=1892,1891
<1892=1894,1893
<1895=1919,1915,1896
<1896=1897
<1897=1911,1907,1898
<1898=1899
<1899=1900
<1900=1901
<1901=1905,1902
<1902=1903
<1903=1904
<1905=1906
<1907=1908
<1908=1910,1909
<1911=1912
<1912=1914,1913
<1915=1916
<1916=1918,1917
<1919=1920
<1920=1922,1921
<1923=1924
<1924=1926,1925
<1943=1949,1948,1944
<1944=1945
<1945=1947,1946
<1949=1971,1950
<1950=1967,1951
<1951=1958,1952
<1952=1953
<1953=1955,1954
<1955=1957,1956
<1958=1959
<1959=1965,1960
<1960=1961
<1961=1962
<1962=1964,1963
<1965=1966
<1967=1968
<1968=1970,1969
<1971=1988,1972
<1972=1979,1973
<1973=1974
<1974=1976,1975
<1976=1978,1977
<1979=1980
<1980=1986,1981
<1981=1982
<1982=1983
<1983=1985,1984
<1986=1987
<1988=1989
<1989=1991,1990
