>3	FunctionDef	callFunction (mxArray * plhs [ ] , const mxArray * prhs [ ])
>4	ParameterList	mxArray * plhs [ ] , const mxArray * prhs [ ]
>5	Parameter	 
>6	Identifier	prhs
>7	ParameterType	const mxArray * [ ]
>8	Parameter	 
>9	Identifier	plhs
>10	ParameterType	mxArray * [ ]
>11	ReturnType	inline void
>12	CompoundStatement	 
>13	ExpressionStatement	 
>14	RelationalExpression	deleteCopySparse < T > ( alpha_v2 , alpha_r2 , alpha_pB2 , alpha_pE2 , alpha_v , alpha_r )
>15	RelationalExpression	T > ( alpha_v2 , alpha_r2 , alpha_pB2 , alpha_pE2 , alpha_v , alpha_r )
>16	Expression	alpha_v2 , alpha_r2 , alpha_pB2 , alpha_pE2 , alpha_v , alpha_r
>17	Expression	alpha_r2 , alpha_pB2 , alpha_pE2 , alpha_v , alpha_r
>18	Expression	alpha_pB2 , alpha_pE2 , alpha_v , alpha_r
>19	Expression	alpha_pE2 , alpha_v , alpha_r
>20	Expression	alpha_v , alpha_r
>21	Identifier	alpha_r
>22	Identifier	alpha_v
>23	Identifier	alpha_pE2
>24	Identifier	alpha_pB2
>25	Identifier	alpha_r2
>26	Identifier	alpha_v2
>27	Identifier	T
>28	Identifier	deleteCopySparse
>29	ExpressionStatement	 
>30	CallExpression	convertSpMatrix ( plhs [ 0 ] , K , M , alpha . n ( ) , alpha . nzmax ( ) , alpha . v ( ) , alpha . r ( ) , alpha \
>31	ArgumentList	plhs [ 0 ]
>32	Argument	alpha . pB ( )
>33	CallExpression	alpha . pB ( )
>34	ArgumentList	 
>35	Callee	alpha . pB
>36	MemberAccess	alpha . pB
>37	Identifier	pB
>38	Identifier	alpha
>39	Argument	alpha . r ( )
>40	CallExpression	alpha . r ( )
>41	ArgumentList	 
>42	Callee	alpha . r
>43	MemberAccess	alpha . r
>44	Identifier	r
>45	Identifier	alpha
>46	Argument	alpha . v ( )
>47	CallExpression	alpha . v ( )
>48	ArgumentList	 
>49	Callee	alpha . v
>50	MemberAccess	alpha . v
>51	Identifier	v
>52	Identifier	alpha
>53	Argument	alpha . nzmax ( )
>54	CallExpression	alpha . nzmax ( )
>55	ArgumentList	 
>56	Callee	alpha . nzmax
>57	MemberAccess	alpha . nzmax
>58	Identifier	nzmax
>59	Identifier	alpha
>60	Argument	alpha . n ( )
>61	CallExpression	alpha . n ( )
>62	ArgumentList	 
>63	Callee	alpha . n
>64	MemberAccess	alpha . n
>65	Identifier	n
>66	Identifier	alpha
>67	Argument	M
>68	Identifier	M
>69	Argument	K
>70	Identifier	K
>71	Argument	plhs [ 0 ]
>72	ArrayIndexing	plhs [ 0 ]
>73	PrimaryExpression	0
>74	Identifier	plhs
>75	Callee	convertSpMatrix
>76	Identifier	convertSpMatrix
>77	ExpressionStatement	 
>78	RelationalExpression	ist < T > ( X , D , alpha , lambda , mode , itermax , tol , numThreads )
>79	RelationalExpression	T > ( X , D , alpha , lambda , mode , itermax , tol , numThreads )
>80	Expression	X , D , alpha , lambda , mode , itermax , tol , numThreads
>81	Expression	D , alpha , lambda , mode , itermax , tol , numThreads
>82	Expression	alpha , lambda , mode , itermax , tol , numThreads
>83	Expression	lambda , mode , itermax , tol , numThreads
>84	Expression	mode , itermax , tol , numThreads
>85	Expression	itermax , tol , numThreads
>86	Expression	tol , numThreads
>87	Identifier	numThreads
>88	Identifier	tol
>89	Identifier	itermax
>90	Identifier	mode
>91	Identifier	lambda
>92	Identifier	alpha
>93	Identifier	D
>94	Identifier	X
>95	Identifier	T
>96	Identifier	ist
>97	IdentifierDeclStatement	 
>98	IdentifierDecl	alpha ( alpha_v2 , alpha_r2 , alpha_pB2 , alpha_pE2 , K , M , alpha_pB2 [ M ] )
>99	Expression	alpha_v2 , alpha_r2 , alpha_pB2 , alpha_pE2 , K , M , alpha_pB2 [ M ]
>100	Expression	alpha_r2 , alpha_pB2 , alpha_pE2 , K , M , alpha_pB2 [ M ]
>101	Expression	alpha_pB2 , alpha_pE2 , K , M , alpha_pB2 [ M ]
>102	Expression	alpha_pE2 , K , M , alpha_pB2 [ M ]
>103	Expression	K , M , alpha_pB2 [ M ]
>104	Expression	M , alpha_pB2 [ M ]
>105	ArrayIndexing	alpha_pB2 [ M ]
>106	Identifier	M
>107	Identifier	alpha_pB2
>108	Identifier	M
>109	Identifier	K
>110	Identifier	alpha_pE2
>111	Identifier	alpha_pB2
>112	Identifier	alpha_r2
>113	Identifier	alpha_v2
>114	Identifier	alpha
>115	IdentifierDeclType	SpMatrix < T >
>116	IdentifierDeclStatement	 
>117	IdentifierDecl	D ( prD , n , K )
>118	Expression	prD , n , K
>119	Expression	n , K
>120	Identifier	K
>121	Identifier	n
>122	Identifier	prD
>123	Identifier	D
>124	IdentifierDeclType	Matrix < T >
>125	IdentifierDeclStatement	 
>126	IdentifierDecl	X ( prX , n , M )
>127	Expression	prX , n , M
>128	Expression	n , M
>129	Identifier	M
>130	Identifier	n
>131	Identifier	prX
>132	Identifier	X
>133	IdentifierDeclType	Matrix < T >
>134	ExpressionStatement	 
>135	RelationalExpression	createCopySparse < T > ( alpha_v2 , alpha_r2 , alpha_pB2 , alpha_pE2 , alpha_v , alpha_r , alpha_pB , \
>136	RelationalExpression	T > ( alpha_v2 , alpha_r2 , alpha_pB2 , alpha_pE2 , alpha_v , alpha_r , alpha_pB , alpha_pE , M )
>137	Expression	alpha_v2 , alpha_r2 , alpha_pB2 , alpha_pE2 , alpha_v , alpha_r , alpha_pB , alpha_pE , M
>138	Expression	alpha_r2 , alpha_pB2 , alpha_pE2 , alpha_v , alpha_r , alpha_pB , alpha_pE , M
>139	Expression	alpha_pB2 , alpha_pE2 , alpha_v , alpha_r , alpha_pB , alpha_pE , M
>140	Expression	alpha_pE2 , alpha_v , alpha_r , alpha_pB , alpha_pE , M
>141	Expression	alpha_v , alpha_r , alpha_pB , alpha_pE , M
>142	Expression	alpha_r , alpha_pB , alpha_pE , M
>143	Expression	alpha_pB , alpha_pE , M
>144	Expression	alpha_pE , M
>145	Identifier	M
>146	Identifier	alpha_pE
>147	Identifier	alpha_pB
>148	Identifier	alpha_r
>149	Identifier	alpha_v
>150	Identifier	alpha_pE2
>151	Identifier	alpha_pB2
>152	Identifier	alpha_r2
>153	Identifier	alpha_v2
>154	Identifier	T
>155	Identifier	createCopySparse
>156	IdentifierDeclStatement	 
>157	IdentifierDecl	* alpha_v2
>158	Identifier	alpha_v2
>159	IdentifierDeclType	T *
>160	IdentifierDeclStatement	 
>161	IdentifierDecl	* alpha_pE2
>162	Identifier	alpha_pE2
>163	IdentifierDeclType	long *
>164	IdentifierDecl	* alpha_pB2
>165	Identifier	alpha_pB2
>166	IdentifierDeclType	long *
>167	IdentifierDecl	* alpha_r2
>168	Identifier	alpha_r2
>169	IdentifierDeclType	long *
>170	IdentifierDeclStatement	 
>171	IdentifierDecl	lambda = getScalarStruct < T > ( prhs [ 3 ] , \"lambda\" )
>172	AssignmentExpr	lambda = getScalarStruct < T > ( prhs [ 3 ] , \"lambda\" )
>173	RelationalExpression	getScalarStruct < T > ( prhs [ 3 ] , \"lambda\" )
>174	RelationalExpression	T > ( prhs [ 3 ] , \"lambda\" )
>175	Expression	prhs [ 3 ] , \"lambda\"
>176	PrimaryExpression	\"lambda\"
>177	ArrayIndexing	prhs [ 3 ]
>178	PrimaryExpression	3
>179	Identifier	prhs
>180	Identifier	T
>181	Identifier	getScalarStruct
>182	Identifier	lambda
>183	Identifier	lambda
>184	IdentifierDeclType	T
>185	IdentifierDeclStatement	 
>186	IdentifierDecl	tol = getScalarStructDef < T > ( prhs [ 3 ] , \"tol\" , 0.001 )
>187	AssignmentExpr	tol = getScalarStructDef < T > ( prhs [ 3 ] , \"tol\" , 0.001 )
>188	RelationalExpression	getScalarStructDef < T > ( prhs [ 3 ] , \"tol\" , 0.001 )
>189	RelationalExpression	T > ( prhs [ 3 ] , \"tol\" , 0.001 )
>190	Expression	prhs [ 3 ] , \"tol\" , 0.001
>191	Expression	\"tol\" , 0.001
>192	PrimaryExpression	0.001
>193	PrimaryExpression	\"tol\"
>194	ArrayIndexing	prhs [ 3 ]
>195	PrimaryExpression	3
>196	Identifier	prhs
>197	Identifier	T
>198	Identifier	getScalarStructDef
>199	Identifier	tol
>200	Identifier	tol
>201	IdentifierDeclType	T
>202	ExpressionStatement	 
>203	Expression	prhs [ 3 ] , \"itermax\" , 100
>204	Expression	\"itermax\" , 100
>205	PrimaryExpression	100
>206	PrimaryExpression	\"itermax\"
>207	ArrayIndexing	prhs [ 3 ]
>208	PrimaryExpression	3
>209	Identifier	prhs
>210	Statement	 
>211	Statement	 
>212	Statement	 
>213	Statement	 
>214	Statement	 
>215	Statement	 
>216	Statement	 
>217	ExpressionStatement	 
>218	Expression	prhs [ 3 ] , \"numThreads\" , - 1
>219	Expression	\"numThreads\" , - 1
>220	UnaryOp	- 1
>221	PrimaryExpression	1
>222	UnaryOperator	-
>223	PrimaryExpression	\"numThreads\"
>224	ArrayIndexing	prhs [ 3 ]
>225	PrimaryExpression	3
>226	Identifier	prhs
>227	Statement	 
>228	Statement	 
>229	Statement	 
>230	Statement	 
>231	Statement	 
>232	Statement	 
>233	Statement	 
>234	ExpressionStatement	 
>235	Expression	prhs [ 3 ] , \"mode\" , PENALTY
>236	Expression	\"mode\" , PENALTY
>237	Identifier	PENALTY
>238	PrimaryExpression	\"mode\"
>239	ArrayIndexing	prhs [ 3 ]
>240	PrimaryExpression	3
>241	Identifier	prhs
>242	Statement	 
>243	Statement	 
>244	Statement	 
>245	Statement	 
>246	Statement	 
>247	Statement	 
>248	Statement	 
>249	Statement	 
>250	Statement	 
>251	Statement	 
>252	IdentifierDeclStatement	 
>253	IdentifierDecl	* alpha_pE = alpha_pB + 1
>254	AssignmentExpr	* alpha_pE = alpha_pB + 1
>255	AdditiveExpression	alpha_pB + 1
>256	PrimaryExpression	1
>257	Identifier	alpha_pB
>258	Identifier	alpha_pE
>259	Identifier	alpha_pE
>260	IdentifierDeclType	mwSize *
>261	IdentifierDeclStatement	 
>262	IdentifierDecl	* alpha_pB = mxGetJc ( prhs [ 2 ] )
>263	AssignmentExpr	* alpha_pB = mxGetJc ( prhs [ 2 ] )
>264	CallExpression	mxGetJc ( prhs [ 2 ] )
>265	ArgumentList	prhs [ 2 ]
>266	Argument	prhs [ 2 ]
>267	ArrayIndexing	prhs [ 2 ]
>268	PrimaryExpression	2
>269	Identifier	prhs
>270	Callee	mxGetJc
>271	Identifier	mxGetJc
>272	Identifier	alpha_pB
>273	Identifier	alpha_pB
>274	IdentifierDeclType	mwSize *
>275	IdentifierDeclStatement	 
>276	IdentifierDecl	* alpha_r = mxGetIr ( prhs [ 2 ] )
>277	AssignmentExpr	* alpha_r = mxGetIr ( prhs [ 2 ] )
>278	CallExpression	mxGetIr ( prhs [ 2 ] )
>279	ArgumentList	prhs [ 2 ]
>280	Argument	prhs [ 2 ]
>281	ArrayIndexing	prhs [ 2 ]
>282	PrimaryExpression	2
>283	Identifier	prhs
>284	Callee	mxGetIr
>285	Identifier	mxGetIr
>286	Identifier	alpha_r
>287	Identifier	alpha_r
>288	IdentifierDeclType	mwSize *
>289	ExpressionStatement	 
>290	CallExpression	mxGetPr ( prhs [ 2 ] )
>291	ArgumentList	prhs [ 2 ]
>292	Argument	prhs [ 2 ]
>293	ArrayIndexing	prhs [ 2 ]
>294	PrimaryExpression	2
>295	Identifier	prhs
>296	Callee	mxGetPr
>297	Identifier	mxGetPr
>298	Statement	 
>299	Statement	 
>300	Statement	 
>301	Statement	 
>302	Statement	 
>303	Statement	 
>304	Statement	 
>305	Statement	 
>306	Statement	 
>307	IfStatement	if ( Ma != M || Ka != K )
>308	ExpressionStatement	 
>309	CallExpression	mexErrMsgTxt ( \"wrong size for argument 3\" )
>310	ArgumentList	\"wrong size for argument 3\"
>311	Argument	\"wrong size for argument 3\"
>312	PrimaryExpression	\"wrong size for argument 3\"
>313	Callee	mexErrMsgTxt
>314	Identifier	mexErrMsgTxt
>315	Condition	 
>316	OrExpression	Ma != M || Ka != K
>317	EqualityExpression	Ka != K
>318	Identifier	K
>319	Identifier	Ka
>320	EqualityExpression	Ma != M
>321	Identifier	M
>322	Identifier	Ma
>323	ExpressionStatement	 
>324	ArrayIndexing	dimsA [ 1 ]
>325	PrimaryExpression	1
>326	Identifier	dimsA
>327	Statement	 
>328	Statement	 
>329	Statement	 
>330	Statement	 
>331	Statement	 
>332	Statement	 
>333	Statement	 
>334	ExpressionStatement	 
>335	ArrayIndexing	dimsA [ 0 ]
>336	PrimaryExpression	0
>337	Identifier	dimsA
>338	Statement	 
>339	Statement	 
>340	Statement	 
>341	Statement	 
>342	Statement	 
>343	Statement	 
>344	Statement	 
>345	IdentifierDeclStatement	 
>346	IdentifierDecl	* dimsA = mxGetDimensions ( prhs [ 2 ] )
>347	AssignmentExpr	* dimsA = mxGetDimensions ( prhs [ 2 ] )
>348	CallExpression	mxGetDimensions ( prhs [ 2 ] )
>349	ArgumentList	prhs [ 2 ]
>350	Argument	prhs [ 2 ]
>351	ArrayIndexing	prhs [ 2 ]
>352	PrimaryExpression	2
>353	Identifier	prhs
>354	Callee	mxGetDimensions
>355	Identifier	mxGetDimensions
>356	Identifier	dimsA
>357	Identifier	dimsA
>358	IdentifierDeclType	const mwSize *
>359	ExpressionStatement	 
>360	ArrayIndexing	dimsD [ 1 ]
>361	PrimaryExpression	1
>362	Identifier	dimsD
>363	Statement	 
>364	Statement	 
>365	Statement	 
>366	Statement	 
>367	Statement	 
>368	Statement	 
>369	Statement	 
>370	IfStatement	if ( nD != n )
>371	ExpressionStatement	 
>372	CallExpression	mexErrMsgTxt ( \"wrong size for argument 2\" )
>373	ArgumentList	\"wrong size for argument 2\"
>374	Argument	\"wrong size for argument 2\"
>375	PrimaryExpression	\"wrong size for argument 2\"
>376	Callee	mexErrMsgTxt
>377	Identifier	mexErrMsgTxt
>378	Condition	 
>379	EqualityExpression	nD != n
>380	Identifier	n
>381	Identifier	nD
>382	ExpressionStatement	 
>383	ArrayIndexing	dimsD [ 0 ]
>384	PrimaryExpression	0
>385	Identifier	dimsD
>386	Statement	 
>387	Statement	 
>388	Statement	 
>389	Statement	 
>390	Statement	 
>391	Statement	 
>392	Statement	 
>393	IdentifierDeclStatement	 
>394	IdentifierDecl	* dimsD = mxGetDimensions ( prhs [ 1 ] )
>395	AssignmentExpr	* dimsD = mxGetDimensions ( prhs [ 1 ] )
>396	CallExpression	mxGetDimensions ( prhs [ 1 ] )
>397	ArgumentList	prhs [ 1 ]
>398	Argument	prhs [ 1 ]
>399	ArrayIndexing	prhs [ 1 ]
>400	PrimaryExpression	1
>401	Identifier	prhs
>402	Callee	mxGetDimensions
>403	Identifier	mxGetDimensions
>404	Identifier	dimsD
>405	Identifier	dimsD
>406	IdentifierDeclType	const mwSize *
>407	ExpressionStatement	 
>408	CallExpression	mxGetPr ( prhs [ 1 ] )
>409	ArgumentList	prhs [ 1 ]
>410	Argument	prhs [ 1 ]
>411	ArrayIndexing	prhs [ 1 ]
>412	PrimaryExpression	1
>413	Identifier	prhs
>414	Callee	mxGetPr
>415	Identifier	mxGetPr
>416	Statement	 
>417	Statement	 
>418	Statement	 
>419	Statement	 
>420	Statement	 
>421	Statement	 
>422	Statement	 
>423	Statement	 
>424	Statement	 
>425	ExpressionStatement	 
>426	ArrayIndexing	dims [ 1 ]
>427	PrimaryExpression	1
>428	Identifier	dims
>429	Statement	 
>430	Statement	 
>431	Statement	 
>432	Statement	 
>433	Statement	 
>434	Statement	 
>435	Statement	 
>436	ExpressionStatement	 
>437	ArrayIndexing	dims [ 0 ]
>438	PrimaryExpression	0
>439	Identifier	dims
>440	Statement	 
>441	Statement	 
>442	Statement	 
>443	Statement	 
>444	Statement	 
>445	Statement	 
>446	Statement	 
>447	IdentifierDeclStatement	 
>448	IdentifierDecl	* dims = mxGetDimensions ( prhs [ 0 ] )
>449	AssignmentExpr	* dims = mxGetDimensions ( prhs [ 0 ] )
>450	CallExpression	mxGetDimensions ( prhs [ 0 ] )
>451	ArgumentList	prhs [ 0 ]
>452	Argument	prhs [ 0 ]
>453	ArrayIndexing	prhs [ 0 ]
>454	PrimaryExpression	0
>455	Identifier	prhs
>456	Callee	mxGetDimensions
>457	Identifier	mxGetDimensions
>458	Identifier	dims
>459	Identifier	dims
>460	IdentifierDeclType	const mwSize *
>461	ExpressionStatement	 
>462	CallExpression	mxGetPr ( prhs [ 0 ] )
>463	ArgumentList	prhs [ 0 ]
>464	Argument	prhs [ 0 ]
>465	ArrayIndexing	prhs [ 0 ]
>466	PrimaryExpression	0
>467	Identifier	prhs
>468	Callee	mxGetPr
>469	Identifier	mxGetPr
>470	Statement	 
>471	Statement	 
>472	Statement	 
>473	Statement	 
>474	Statement	 
>475	Statement	 
>476	Statement	 
>477	Statement	 
>478	Statement	 
>479	IfStatement	if ( ! mxIsStruct ( prhs [ 3 ] ) )
>480	ExpressionStatement	 
>481	CallExpression	mexErrMsgTxt ( \"argument 4 should be struct\" )
>482	ArgumentList	\"argument 4 should be struct\"
>483	Argument	\"argument 4 should be struct\"
>484	PrimaryExpression	\"argument 4 should be struct\"
>485	Callee	mexErrMsgTxt
>486	Identifier	mexErrMsgTxt
>487	Condition	 
>488	UnaryOp	! mxIsStruct ( prhs [ 3 ] )
>489	CallExpression	mxIsStruct ( prhs [ 3 ] )
>490	ArgumentList	prhs [ 3 ]
>491	Argument	prhs [ 3 ]
>492	ArrayIndexing	prhs [ 3 ]
>493	PrimaryExpression	3
>494	Identifier	prhs
>495	Callee	mxIsStruct
>496	Identifier	mxIsStruct
>497	UnaryOperator	!
>498	IfStatement	if ( ! mxIsSparse ( prhs [ 2 ] ) )
>499	ExpressionStatement	 
>500	CallExpression	mexErrMsgTxt ( \"argument 3 should be sparse\" )
>501	ArgumentList	\"argument 3 should be sparse\"
>502	Argument	\"argument 3 should be sparse\"
>503	PrimaryExpression	\"argument 3 should be sparse\"
>504	Callee	mexErrMsgTxt
>505	Identifier	mexErrMsgTxt
>506	Condition	 
>507	UnaryOp	! mxIsSparse ( prhs [ 2 ] )
>508	CallExpression	mxIsSparse ( prhs [ 2 ] )
>509	ArgumentList	prhs [ 2 ]
>510	Argument	prhs [ 2 ]
>511	ArrayIndexing	prhs [ 2 ]
>512	PrimaryExpression	2
>513	Identifier	prhs
>514	Callee	mxIsSparse
>515	Identifier	mxIsSparse
>516	UnaryOperator	!
>517	IfStatement	if ( mxIsSparse ( prhs [ 1 ] ) )
>518	ExpressionStatement	 
>519	CallExpression	mexErrMsgTxt ( \"argument 2 should be full\" )
>520	ArgumentList	\"argument 2 should be full\"
>521	Argument	\"argument 2 should be full\"
>522	PrimaryExpression	\"argument 2 should be full\"
>523	Callee	mexErrMsgTxt
>524	Identifier	mexErrMsgTxt
>525	Condition	 
>526	CallExpression	mxIsSparse ( prhs [ 1 ] )
>527	ArgumentList	prhs [ 1 ]
>528	Argument	prhs [ 1 ]
>529	ArrayIndexing	prhs [ 1 ]
>530	PrimaryExpression	1
>531	Identifier	prhs
>532	Callee	mxIsSparse
>533	Identifier	mxIsSparse
>534	IfStatement	if ( ! mexCheckType < T > ( prhs [ 1 ] ) )
>535	ExpressionStatement	 
>536	CallExpression	mexErrMsgTxt ( \"type of argument 2 is not consistent\" )
>537	ArgumentList	\"type of argument 2 is not consistent\"
>538	Argument	\"type of argument 2 is not consistent\"
>539	PrimaryExpression	\"type of argument 2 is not consistent\"
>540	Callee	mexErrMsgTxt
>541	Identifier	mexErrMsgTxt
>542	Condition	 
>543	RelationalExpression	! mexCheckType < T > ( prhs [ 1 ] )
>544	RelationalExpression	T > ( prhs [ 1 ] )
>545	ArrayIndexing	prhs [ 1 ]
>546	PrimaryExpression	1
>547	Identifier	prhs
>548	Identifier	T
>549	UnaryOp	! mexCheckType
>550	Identifier	mexCheckType
>551	UnaryOperator	!
>552	IfStatement	if ( mxIsSparse ( prhs [ 0 ] ) )
>553	ExpressionStatement	 
>554	CallExpression	mexErrMsgTxt ( \"argument 1 should be full\" )
>555	ArgumentList	\"argument 1 should be full\"
>556	Argument	\"argument 1 should be full\"
>557	PrimaryExpression	\"argument 1 should be full\"
>558	Callee	mexErrMsgTxt
>559	Identifier	mexErrMsgTxt
>560	Condition	 
>561	CallExpression	mxIsSparse ( prhs [ 0 ] )
>562	ArgumentList	prhs [ 0 ]
>563	Argument	prhs [ 0 ]
>564	ArrayIndexing	prhs [ 0 ]
>565	PrimaryExpression	0
>566	Identifier	prhs
>567	Callee	mxIsSparse
>568	Identifier	mxIsSparse
>569	IfStatement	if ( ! mexCheckType < T > ( prhs [ 0 ] ) )
>570	ExpressionStatement	 
>571	CallExpression	mexErrMsgTxt ( \"type of argument 1 is not consistent\" )
>572	ArgumentList	\"type of argument 1 is not consistent\"
>573	Argument	\"type of argument 1 is not consistent\"
>574	PrimaryExpression	\"type of argument 1 is not consistent\"
>575	Callee	mexErrMsgTxt
>576	Identifier	mexErrMsgTxt
>577	Condition	 
>578	RelationalExpression	! mexCheckType < T > ( prhs [ 0 ] )
>579	RelationalExpression	T > ( prhs [ 0 ] )
>580	ArrayIndexing	prhs [ 0 ]
>581	PrimaryExpression	0
>582	Identifier	prhs
>583	Identifier	T
>584	UnaryOp	! mexCheckType
>585	Identifier	mexCheckType
>586	UnaryOperator	!
>629	FunctionDef	mexFunction (int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ])
>630	ParameterList	int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ]
>631	Parameter	 
>632	Identifier	prhs
>633	ParameterType	const mxArray * [ ]
>634	Parameter	 
>635	Identifier	nrhs
>636	ParameterType	int
>637	Parameter	 
>638	Identifier	plhs
>639	ParameterType	mxArray * [ ]
>640	Parameter	 
>641	Identifier	nlhs
>642	ParameterType	int
>643	ReturnType	void
>644	CompoundStatement	 
>645	IfStatement	if ( mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS )
>646	ElseStatement	else
>647	CompoundStatement	 
>648	ExpressionStatement	 
>649	RelationalExpression	callFunction < float > ( plhs , prhs )
>650	RelationalExpression	float > ( plhs , prhs )
>651	Expression	plhs , prhs
>652	Identifier	prhs
>653	Identifier	plhs
>654	Identifier	float
>655	Identifier	callFunction
>656	CompoundStatement	 
>657	ExpressionStatement	 
>658	RelationalExpression	callFunction < double > ( plhs , prhs )
>659	RelationalExpression	double > ( plhs , prhs )
>660	Expression	plhs , prhs
>661	Identifier	prhs
>662	Identifier	plhs
>663	Identifier	double
>664	Identifier	callFunction
>665	Condition	 
>666	EqualityExpression	mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS
>667	Identifier	mxDOUBLE_CLASS
>668	CallExpression	mxGetClassID ( prhs [ 0 ] )
>669	ArgumentList	prhs [ 0 ]
>670	Argument	prhs [ 0 ]
>671	ArrayIndexing	prhs [ 0 ]
>672	PrimaryExpression	0
>673	Identifier	prhs
>674	Callee	mxGetClassID
>675	Identifier	mxGetClassID
>676	IfStatement	if ( nlhs != 1 )
>677	ExpressionStatement	 
>678	CallExpression	mexErrMsgTxt ( \"Bad number of output arguments\" )
>679	ArgumentList	\"Bad number of output arguments\"
>680	Argument	\"Bad number of output arguments\"
>681	PrimaryExpression	\"Bad number of output arguments\"
>682	Callee	mexErrMsgTxt
>683	Identifier	mexErrMsgTxt
>684	Condition	 
>685	EqualityExpression	nlhs != 1
>686	PrimaryExpression	1
>687	Identifier	nlhs
>688	IfStatement	if ( nrhs != 4 )
>689	ExpressionStatement	 
>690	CallExpression	mexErrMsgTxt ( \"Bad number of inputs arguments\" )
>691	ArgumentList	\"Bad number of inputs arguments\"
>692	Argument	\"Bad number of inputs arguments\"
>693	PrimaryExpression	\"Bad number of inputs arguments\"
>694	Callee	mexErrMsgTxt
>695	Identifier	mexErrMsgTxt
>696	Condition	 
>697	EqualityExpression	nrhs != 4
>698	PrimaryExpression	4
>699	Identifier	nrhs
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=569,552,534,517,498,479,478,477,476,475,474,473,472,471,470,461,447,446,445,444,443,442,441,440,436,435,434,433,432,431,430,429,425,424,423,422,421,420,419,418,417,416,407,393,392,391,390,389,388,387,386,382,370,369,368,367,366,365,364,363,359,345,344,343,342,341,340,339,338,334,333,332,331,330,329,328,327,323,307,306,13,29,77,97,116,125,134,156,160,170,185,202,210,211,212,213,214,215,216,217,227,228,229,230,231,232,233,234,242,243,244,245,246,247,248,249,250,251,252,261,275,289,298,299,300,301,302,303,304,305
<13=14
<14=28,15
<15=27,16
<16=26,17
<17=25,18
<18=24,19
<19=23,20
<20=22,21
<29=30
<30=75,31
<31=71,69,67,60,53,46,39,32
<32=33
<33=35,34
<35=36
<36=38,37
<39=40
<40=42,41
<42=43
<43=45,44
<46=47
<47=49,48
<49=50
<50=52,51
<53=54
<54=56,55
<56=57
<57=59,58
<60=61
<61=63,62
<63=64
<64=66,65
<67=68
<69=70
<71=72
<72=74,73
<75=76
<77=78
<78=96,79
<79=95,80
<80=94,81
<81=93,82
<82=92,83
<83=91,84
<84=90,85
<85=89,86
<86=88,87
<97=98
<98=115,114,99
<99=113,100
<100=112,101
<101=111,102
<102=110,103
<103=109,104
<104=108,105
<105=107,106
<116=117
<117=124,123,118
<118=122,119
<119=121,120
<125=126
<126=133,132,127
<127=131,128
<128=130,129
<134=135
<135=155,136
<136=154,137
<137=153,138
<138=152,139
<139=151,140
<140=150,141
<141=149,142
<142=148,143
<143=147,144
<144=146,145
<156=157
<157=159,158
<160=167,164,161
<161=163,162
<164=166,165
<167=169,168
<170=171
<171=184,183,172
<172=182,173
<173=181,174
<174=180,175
<175=177,176
<177=179,178
<185=186
<186=201,200,187
<187=199,188
<188=198,189
<189=197,190
<190=194,191
<191=193,192
<194=196,195
<202=203
<203=207,204
<204=206,205
<207=209,208
<217=218
<218=224,219
<219=223,220
<220=222,221
<224=226,225
<234=235
<235=239,236
<236=238,237
<239=241,240
<252=253
<253=260,259,254
<254=258,255
<255=257,256
<261=262
<262=274,273,263
<263=272,264
<264=270,265
<265=266
<266=267
<267=269,268
<270=271
<275=276
<276=288,287,277
<277=286,278
<278=284,279
<279=280
<280=281
<281=283,282
<284=285
<289=290
<290=296,291
<291=292
<292=293
<293=295,294
<296=297
<307=315,308
<308=309
<309=313,310
<310=311
<311=312
<313=314
<315=316
<316=320,317
<317=319,318
<320=322,321
<323=324
<324=326,325
<334=335
<335=337,336
<345=346
<346=358,357,347
<347=356,348
<348=354,349
<349=350
<350=351
<351=353,352
<354=355
<359=360
<360=362,361
<370=378,371
<371=372
<372=376,373
<373=374
<374=375
<376=377
<378=379
<379=381,380
<382=383
<383=385,384
<393=394
<394=406,405,395
<395=404,396
<396=402,397
<397=398
<398=399
<399=401,400
<402=403
<407=408
<408=414,409
<409=410
<410=411
<411=413,412
<414=415
<425=426
<426=428,427
<436=437
<437=439,438
<447=448
<448=460,459,449
<449=458,450
<450=456,451
<451=452
<452=453
<453=455,454
<456=457
<461=462
<462=468,463
<463=464
<464=465
<465=467,466
<468=469
<479=487,480
<480=481
<481=485,482
<482=483
<483=484
<485=486
<487=488
<488=497,489
<489=495,490
<490=491
<491=492
<492=494,493
<495=496
<498=506,499
<499=500
<500=504,501
<501=502
<502=503
<504=505
<506=507
<507=516,508
<508=514,509
<509=510
<510=511
<511=513,512
<514=515
<517=525,518
<518=519
<519=523,520
<520=521
<521=522
<523=524
<525=526
<526=532,527
<527=528
<528=529
<529=531,530
<532=533
<534=542,535
<535=536
<536=540,537
<537=538
<538=539
<540=541
<542=543
<543=549,544
<544=548,545
<545=547,546
<549=551,550
<552=560,553
<553=554
<554=558,555
<555=556
<556=557
<558=559
<560=561
<561=567,562
<562=563
<563=564
<564=566,565
<567=568
<569=577,570
<570=571
<571=575,572
<572=573
<573=574
<575=576
<577=578
<578=584,579
<579=583,580
<580=582,581
<584=586,585
<629=644,643,630
<630=640,637,634,631
<631=633,632
<634=636,635
<637=639,638
<640=642,641
<644=688,676,645
<645=665,656,646
<646=647
<647=648
<648=649
<649=655,650
<650=654,651
<651=653,652
<656=657
<657=658
<658=664,659
<659=663,660
<660=662,661
<665=666
<666=668,667
<668=674,669
<669=670
<670=671
<671=673,672
<674=675
<676=684,677
<677=678
<678=682,679
<679=680
<680=681
<682=683
<684=685
<685=687,686
<688=696,689
<689=690
<690=694,691
<691=692
<692=693
<694=695
<696=697
<697=699,698
