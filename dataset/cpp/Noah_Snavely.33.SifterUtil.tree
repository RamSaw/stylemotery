>3	FunctionDef	RescaleImage (img_t * img , double scale)
>4	ParameterList	img_t * img , double scale
>5	Parameter	 
>6	Identifier	scale
>7	ParameterType	double
>8	Parameter	 
>9	Identifier	img
>10	ParameterType	img_t *
>11	ReturnType	img_t *
>12	CompoundStatement	 
>13	ReturnStatement	 
>14	Identifier	scaled
>15	ExpressionStatement	 
>16	CallExpression	transform_free ( T )
>17	ArgumentList	T
>18	Argument	T
>19	Identifier	T
>20	Callee	transform_free
>21	Identifier	transform_free
>22	ExpressionStatement	 
>23	CallExpression	img_free ( blur )
>24	ArgumentList	blur
>25	Argument	blur
>26	Identifier	blur
>27	Callee	img_free
>28	Identifier	img_free
>29	IdentifierDeclStatement	 
>30	IdentifierDecl	* scaled = img_resample_bbox ( blur , T )
>31	AssignmentExpr	* scaled = img_resample_bbox ( blur , T )
>32	CallExpression	img_resample_bbox ( blur , T )
>33	ArgumentList	blur
>34	Argument	T
>35	Identifier	T
>36	Argument	blur
>37	Identifier	blur
>38	Callee	img_resample_bbox
>39	Identifier	img_resample_bbox
>40	Identifier	scaled
>41	Identifier	scaled
>42	IdentifierDeclType	img_t *
>43	IdentifierDeclStatement	 
>44	IdentifierDecl	* T = new_scaling_transform ( scale , scale )
>45	AssignmentExpr	* T = new_scaling_transform ( scale , scale )
>46	CallExpression	new_scaling_transform ( scale , scale )
>47	ArgumentList	scale
>48	Argument	scale
>49	Identifier	scale
>50	Argument	scale
>51	Identifier	scale
>52	Callee	new_scaling_transform
>53	Identifier	new_scaling_transform
>54	Identifier	T
>55	Identifier	T
>56	IdentifierDeclType	trans2D_t *
>57	IdentifierDeclStatement	 
>58	IdentifierDecl	* blur = img_smooth ( img , 0.35 / scale , 0 )
>59	AssignmentExpr	* blur = img_smooth ( img , 0.35 / scale , 0 )
>60	CallExpression	img_smooth ( img , 0.35 / scale , 0 )
>61	ArgumentList	img
>62	Argument	0
>63	PrimaryExpression	0
>64	Argument	0.35 / scale
>65	MultiplicativeExpression	0.35 / scale
>66	Identifier	scale
>67	PrimaryExpression	0.35
>68	Argument	img
>69	Identifier	img
>70	Callee	img_smooth
>71	Identifier	img_smooth
>72	Identifier	blur
>73	Identifier	blur
>74	IdentifierDeclType	img_t *
>86	FunctionDef	RescaleImage (img_t * img , int max_dim , double & scale)
>87	ParameterList	img_t * img , int max_dim , double & scale
>88	Parameter	 
>89	Identifier	scale
>90	ParameterType	double &
>91	Parameter	 
>92	Identifier	max_dim
>93	ParameterType	int
>94	Parameter	 
>95	Identifier	img
>96	ParameterType	img_t *
>97	ReturnType	img_t *
>98	CompoundStatement	 
>99	ReturnStatement	 
>100	CallExpression	RescaleImage ( img , scale )
>101	ArgumentList	img
>102	Argument	scale
>103	Identifier	scale
>104	Argument	img
>105	Identifier	img
>106	Callee	RescaleImage
>107	Identifier	RescaleImage
>108	ExpressionStatement	 
>109	AssignmentExpr	scale = 1.0 / ratio
>110	MultiplicativeExpression	1.0 / ratio
>111	Identifier	ratio
>112	PrimaryExpression	1.0
>113	Identifier	scale
>114	IfStatement	if ( dim <= max_dim )
>115	CompoundStatement	 
>116	ReturnStatement	 
>117	CallExpression	img_copy ( img )
>118	ArgumentList	img
>119	Argument	img
>120	Identifier	img
>121	Callee	img_copy
>122	Identifier	img_copy
>123	Condition	 
>124	RelationalExpression	dim <= max_dim
>125	Identifier	max_dim
>126	Identifier	dim
>127	IdentifierDeclStatement	 
>128	IdentifierDecl	ratio = ( double ) dim / ( double ) max_dim
>129	AssignmentExpr	ratio = ( double ) dim / ( double ) max_dim
>130	MultiplicativeExpression	( double ) dim / ( double ) max_dim
>131	CastExpression	( double ) max_dim
>132	Identifier	max_dim
>133	CastTarget	double
>134	CastExpression	( double ) dim
>135	Identifier	dim
>136	CastTarget	double
>137	Identifier	ratio
>138	Identifier	ratio
>139	IdentifierDeclType	double
>140	IdentifierDeclStatement	 
>141	IdentifierDecl	dim = MAX ( img -> w , img -> h )
>142	AssignmentExpr	dim = MAX ( img -> w , img -> h )
>143	CallExpression	MAX ( img -> w , img -> h )
>144	ArgumentList	img -> w
>145	Argument	img -> h
>146	PtrMemberAccess	img -> h
>147	Identifier	h
>148	Identifier	img
>149	Argument	img -> w
>150	PtrMemberAccess	img -> w
>151	Identifier	w
>152	Identifier	img
>153	Callee	MAX
>154	Identifier	MAX
>155	Identifier	dim
>156	Identifier	dim
>157	IdentifierDeclType	int
>172	FunctionDef	GetRotationFromSpherical (double theta , double phi , double * R)
>173	ParameterList	double theta , double phi , double * R
>174	Parameter	 
>175	Identifier	R
>176	ParameterType	double *
>177	Parameter	 
>178	Identifier	phi
>179	ParameterType	double
>180	Parameter	 
>181	Identifier	theta
>182	ParameterType	double
>183	ReturnType	void
>184	CompoundStatement	 
>185	ExpressionStatement	 
>186	CallExpression	memcpy ( R + 6 , v , 3 * sizeof ( double ) )
>187	ArgumentList	R + 6
>188	Argument	3 * sizeof ( double )
>189	MultiplicativeExpression	3 * sizeof ( double )
>190	SizeofExpr	sizeof ( double )
>191	SizeofOperand	double
>192	Sizeof	sizeof
>193	PrimaryExpression	3
>194	Argument	v
>195	Identifier	v
>196	Argument	R + 6
>197	AdditiveExpression	R + 6
>198	PrimaryExpression	6
>199	Identifier	R
>200	Callee	memcpy
>201	Identifier	memcpy
>202	ExpressionStatement	 
>203	CallExpression	memcpy ( R + 3 , up , 3 * sizeof ( double ) )
>204	ArgumentList	R + 3
>205	Argument	3 * sizeof ( double )
>206	MultiplicativeExpression	3 * sizeof ( double )
>207	SizeofExpr	sizeof ( double )
>208	SizeofOperand	double
>209	Sizeof	sizeof
>210	PrimaryExpression	3
>211	Argument	up
>212	Identifier	up
>213	Argument	R + 3
>214	AdditiveExpression	R + 3
>215	PrimaryExpression	3
>216	Identifier	R
>217	Callee	memcpy
>218	Identifier	memcpy
>219	ExpressionStatement	 
>220	CallExpression	memcpy ( R + 0 , x_axis , 3 * sizeof ( double ) )
>221	ArgumentList	R + 0
>222	Argument	3 * sizeof ( double )
>223	MultiplicativeExpression	3 * sizeof ( double )
>224	SizeofExpr	sizeof ( double )
>225	SizeofOperand	double
>226	Sizeof	sizeof
>227	PrimaryExpression	3
>228	Argument	x_axis
>229	Identifier	x_axis
>230	Argument	R + 0
>231	AdditiveExpression	R + 0
>232	PrimaryExpression	0
>233	Identifier	R
>234	Callee	memcpy
>235	Identifier	memcpy
>236	ExpressionStatement	 
>237	CallExpression	matrix_cross ( v , up , x_axis )
>238	ArgumentList	v
>239	Argument	x_axis
>240	Identifier	x_axis
>241	Argument	up
>242	Identifier	up
>243	Argument	v
>244	Identifier	v
>245	Callee	matrix_cross
>246	Identifier	matrix_cross
>247	IdentifierDeclStatement	 
>248	IdentifierDecl	x_axis [ 3 ]
>249	PrimaryExpression	3
>250	Identifier	x_axis
>251	IdentifierDeclType	double [ 3 ]
>252	ExpressionStatement	 
>253	AssignmentExpr	up [ 2 ] = sin ( theta_up ) * sin ( phi_up )
>254	MultiplicativeExpression	sin ( theta_up ) * sin ( phi_up )
>255	CallExpression	sin ( phi_up )
>256	ArgumentList	phi_up
>257	Argument	phi_up
>258	Identifier	phi_up
>259	Callee	sin
>260	Identifier	sin
>261	CallExpression	sin ( theta_up )
>262	ArgumentList	theta_up
>263	Argument	theta_up
>264	Identifier	theta_up
>265	Callee	sin
>266	Identifier	sin
>267	ArrayIndexing	up [ 2 ]
>268	PrimaryExpression	2
>269	Identifier	up
>270	ExpressionStatement	 
>271	AssignmentExpr	up [ 1 ] = cos ( phi_up )
>272	CallExpression	cos ( phi_up )
>273	ArgumentList	phi_up
>274	Argument	phi_up
>275	Identifier	phi_up
>276	Callee	cos
>277	Identifier	cos
>278	ArrayIndexing	up [ 1 ]
>279	PrimaryExpression	1
>280	Identifier	up
>281	ExpressionStatement	 
>282	AssignmentExpr	up [ 0 ] = cos ( theta_up ) * sin ( phi_up )
>283	MultiplicativeExpression	cos ( theta_up ) * sin ( phi_up )
>284	CallExpression	sin ( phi_up )
>285	ArgumentList	phi_up
>286	Argument	phi_up
>287	Identifier	phi_up
>288	Callee	sin
>289	Identifier	sin
>290	CallExpression	cos ( theta_up )
>291	ArgumentList	theta_up
>292	Argument	theta_up
>293	Identifier	theta_up
>294	Callee	cos
>295	Identifier	cos
>296	ArrayIndexing	up [ 0 ]
>297	PrimaryExpression	0
>298	Identifier	up
>299	IdentifierDeclStatement	 
>300	IdentifierDecl	up [ 3 ]
>301	PrimaryExpression	3
>302	Identifier	up
>303	IdentifierDeclType	double [ 3 ]
>304	IdentifierDeclStatement	 
>305	IdentifierDecl	theta_up = theta
>306	AssignmentExpr	theta_up = theta
>307	Identifier	theta
>308	Identifier	theta
>309	Identifier	theta_up
>310	IdentifierDeclType	double
>311	IdentifierDeclStatement	 
>312	IdentifierDecl	phi_up = phi - 0.5 * M_PI
>313	AssignmentExpr	phi_up = phi - 0.5 * M_PI
>314	AdditiveExpression	phi - 0.5 * M_PI
>315	MultiplicativeExpression	0.5 * M_PI
>316	Identifier	M_PI
>317	PrimaryExpression	0.5
>318	Identifier	phi
>319	Identifier	phi_up
>320	Identifier	phi_up
>321	IdentifierDeclType	double
>322	ExpressionStatement	 
>323	AssignmentExpr	v [ 2 ] = sin ( theta ) * sin ( phi )
>324	MultiplicativeExpression	sin ( theta ) * sin ( phi )
>325	CallExpression	sin ( phi )
>326	ArgumentList	phi
>327	Argument	phi
>328	Identifier	phi
>329	Callee	sin
>330	Identifier	sin
>331	CallExpression	sin ( theta )
>332	ArgumentList	theta
>333	Argument	theta
>334	Identifier	theta
>335	Callee	sin
>336	Identifier	sin
>337	ArrayIndexing	v [ 2 ]
>338	PrimaryExpression	2
>339	Identifier	v
>340	ExpressionStatement	 
>341	AssignmentExpr	v [ 1 ] = cos ( phi )
>342	CallExpression	cos ( phi )
>343	ArgumentList	phi
>344	Argument	phi
>345	Identifier	phi
>346	Callee	cos
>347	Identifier	cos
>348	ArrayIndexing	v [ 1 ]
>349	PrimaryExpression	1
>350	Identifier	v
>351	ExpressionStatement	 
>352	AssignmentExpr	v [ 0 ] = cos ( theta ) * sin ( phi )
>353	MultiplicativeExpression	cos ( theta ) * sin ( phi )
>354	CallExpression	sin ( phi )
>355	ArgumentList	phi
>356	Argument	phi
>357	Identifier	phi
>358	Callee	sin
>359	Identifier	sin
>360	CallExpression	cos ( theta )
>361	ArgumentList	theta
>362	Argument	theta
>363	Identifier	theta
>364	Callee	cos
>365	Identifier	cos
>366	ArrayIndexing	v [ 0 ]
>367	PrimaryExpression	0
>368	Identifier	v
>369	IdentifierDeclStatement	 
>370	IdentifierDecl	v [ 3 ]
>371	PrimaryExpression	3
>372	Identifier	v
>373	IdentifierDeclType	double [ 3 ]
>390	FunctionDef	NormalizePatchMeanVariance (int w , int h , double * patch)
>391	ParameterList	int w , int h , double * patch
>392	Parameter	 
>393	Identifier	patch
>394	ParameterType	double *
>395	Parameter	 
>396	Identifier	h
>397	ParameterType	int
>398	Parameter	 
>399	Identifier	w
>400	ParameterType	int
>401	ReturnType	void
>402	CompoundStatement	 
>403	ForStatement	for ( int i = 0 ; i < nelems ; i ++ )
>404	CompoundStatement	 
>405	ExpressionStatement	 
>406	AssignmentExpr	patch [ i ] = 32.0 * ( patch [ i ] - mean ) / variance
>407	MultiplicativeExpression	32.0 * ( patch [ i ] - mean ) / variance
>408	MultiplicativeExpression	( patch [ i ] - mean ) / variance
>409	Identifier	variance
>410	AdditiveExpression	patch [ i ] - mean
>411	Identifier	mean
>412	ArrayIndexing	patch [ i ]
>413	Identifier	i
>414	Identifier	patch
>415	PrimaryExpression	32.0
>416	ArrayIndexing	patch [ i ]
>417	Identifier	i
>418	Identifier	patch
>419	IfStatement	if ( patch [ i ] == DBL_MAX )
>420	ContinueStatement	 
>421	Condition	 
>422	EqualityExpression	patch [ i ] == DBL_MAX
>423	Identifier	DBL_MAX
>424	ArrayIndexing	patch [ i ]
>425	Identifier	i
>426	Identifier	patch
>427	IncDecOp	 
>428	IncDec	++
>429	Identifier	i
>430	Condition	 
>431	RelationalExpression	i < nelems
>432	Identifier	nelems
>433	Identifier	i
>434	ForInit	 
>435	IdentifierDeclStatement	int i = 0 ;
>436	IdentifierDecl	i = 0
>437	AssignmentExpr	i = 0
>438	PrimaryExpression	0
>439	Identifier	i
>440	Identifier	i
>441	IdentifierDeclType	int
>442	ExpressionStatement	 
>443	AssignmentExpr	variance = sqrt ( variance )
>444	CallExpression	sqrt ( variance )
>445	ArgumentList	variance
>446	Argument	variance
>447	Identifier	variance
>448	Callee	sqrt
>449	Identifier	sqrt
>450	Identifier	variance
>451	ExpressionStatement	 
>452	AssignmentExpr	variance /= num_used
>453	Identifier	num_used
>454	Identifier	variance
>455	ForStatement	for ( int i = 0 ; i < nelems ; i ++ )
>456	CompoundStatement	 
>457	ExpressionStatement	 
>458	AssignmentExpr	variance += d * d
>459	MultiplicativeExpression	d * d
>460	Identifier	d
>461	Identifier	d
>462	Identifier	variance
>463	IdentifierDeclStatement	 
>464	IdentifierDecl	d = patch [ i ] - mean
>465	AssignmentExpr	d = patch [ i ] - mean
>466	AdditiveExpression	patch [ i ] - mean
>467	Identifier	mean
>468	ArrayIndexing	patch [ i ]
>469	Identifier	i
>470	Identifier	patch
>471	Identifier	d
>472	Identifier	d
>473	IdentifierDeclType	double
>474	IfStatement	if ( patch [ i ] == DBL_MAX )
>475	ContinueStatement	 
>476	Condition	 
>477	EqualityExpression	patch [ i ] == DBL_MAX
>478	Identifier	DBL_MAX
>479	ArrayIndexing	patch [ i ]
>480	Identifier	i
>481	Identifier	patch
>482	IncDecOp	 
>483	IncDec	++
>484	Identifier	i
>485	Condition	 
>486	RelationalExpression	i < nelems
>487	Identifier	nelems
>488	Identifier	i
>489	ForInit	 
>490	IdentifierDeclStatement	int i = 0 ;
>491	IdentifierDecl	i = 0
>492	AssignmentExpr	i = 0
>493	PrimaryExpression	0
>494	Identifier	i
>495	Identifier	i
>496	IdentifierDeclType	int
>497	IdentifierDeclStatement	 
>498	IdentifierDecl	variance = 0.0
>499	AssignmentExpr	variance = 0.0
>500	PrimaryExpression	0.0
>501	Identifier	variance
>502	Identifier	variance
>503	IdentifierDeclType	double
>504	ExpressionStatement	 
>505	AssignmentExpr	mean /= num_used
>506	Identifier	num_used
>507	Identifier	mean
>508	IfStatement	if ( num_used == 0.0 )
>509	ReturnStatement	 
>510	Condition	 
>511	EqualityExpression	num_used == 0.0
>512	PrimaryExpression	0.0
>513	Identifier	num_used
>514	ForStatement	for ( int i = 0 ; i < nelems ; i ++ )
>515	CompoundStatement	 
>516	ExpressionStatement	 
>517	IncDecOp	num_used ++
>518	IncDec	++
>519	Identifier	num_used
>520	ExpressionStatement	 
>521	AssignmentExpr	mean += patch [ i ]
>522	ArrayIndexing	patch [ i ]
>523	Identifier	i
>524	Identifier	patch
>525	Identifier	mean
>526	IfStatement	if ( patch [ i ] == DBL_MAX )
>527	ContinueStatement	 
>528	Condition	 
>529	EqualityExpression	patch [ i ] == DBL_MAX
>530	Identifier	DBL_MAX
>531	ArrayIndexing	patch [ i ]
>532	Identifier	i
>533	Identifier	patch
>534	IncDecOp	 
>535	IncDec	++
>536	Identifier	i
>537	Condition	 
>538	RelationalExpression	i < nelems
>539	Identifier	nelems
>540	Identifier	i
>541	ForInit	 
>542	IdentifierDeclStatement	int i = 0 ;
>543	IdentifierDecl	i = 0
>544	AssignmentExpr	i = 0
>545	PrimaryExpression	0
>546	Identifier	i
>547	Identifier	i
>548	IdentifierDeclType	int
>549	IdentifierDeclStatement	 
>550	IdentifierDecl	num_used = 0
>551	AssignmentExpr	num_used = 0
>552	PrimaryExpression	0
>553	Identifier	num_used
>554	Identifier	num_used
>555	IdentifierDeclType	int
>556	IdentifierDeclStatement	 
>557	IdentifierDecl	mean = 0.0
>558	AssignmentExpr	mean = 0.0
>559	PrimaryExpression	0.0
>560	Identifier	mean
>561	Identifier	mean
>562	IdentifierDeclType	double
>563	IdentifierDeclStatement	 
>564	IdentifierDecl	nelems = w * h
>565	AssignmentExpr	nelems = w * h
>566	MultiplicativeExpression	w * h
>567	Identifier	h
>568	Identifier	w
>569	Identifier	nelems
>570	Identifier	nelems
>571	IdentifierDeclType	int
>588	FunctionDef	GetVectorIntersection (const std 
>589	ParameterList	const std 
>590	Parameter	 
>591	Identifier	v2
>592	ParameterType	const std 
>593	Parameter	 
>594	Identifier	v1
>595	ParameterType	const std 
>596	ReturnType	std 
>597	CompoundStatement	 
>598	ReturnStatement	 
>599	Identifier	intersection
>600	ExpressionStatement	 
>601	CallExpression	seen . clear ( )
>602	ArgumentList	 
>603	Callee	seen . clear
>604	MemberAccess	seen . clear
>605	Identifier	clear
>606	Identifier	seen
>607	ForStatement	for ( int i = 0 ; i < v2_size ; i ++ )
>608	CompoundStatement	 
>609	IfStatement	if ( seen . find ( v2 [ i ] ) != seen . end ( ) )
>610	ExpressionStatement	 
>611	CallExpression	intersection . push_back ( v2 [ i ] )
>612	ArgumentList	v2 [ i ]
>613	Argument	v2 [ i ]
>614	ArrayIndexing	v2 [ i ]
>615	Identifier	i
>616	Identifier	v2
>617	Callee	intersection . push_back
>618	MemberAccess	intersection . push_back
>619	Identifier	push_back
>620	Identifier	intersection
>621	Condition	 
>622	EqualityExpression	seen . find ( v2 [ i ] ) != seen . end ( )
>623	CallExpression	seen . end ( )
>624	ArgumentList	 
>625	Callee	seen . end
>626	MemberAccess	seen . end
>627	Identifier	end
>628	Identifier	seen
>629	CallExpression	seen . find ( v2 [ i ] )
>630	ArgumentList	v2 [ i ]
>631	Argument	v2 [ i ]
>632	ArrayIndexing	v2 [ i ]
>633	Identifier	i
>634	Identifier	v2
>635	Callee	seen . find
>636	MemberAccess	seen . find
>637	Identifier	find
>638	Identifier	seen
>639	IncDecOp	 
>640	IncDec	++
>641	Identifier	i
>642	Condition	 
>643	RelationalExpression	i < v2_size
>644	Identifier	v2_size
>645	Identifier	i
>646	ForInit	 
>647	IdentifierDeclStatement	int i = 0 ;
>648	IdentifierDecl	i = 0
>649	AssignmentExpr	i = 0
>650	PrimaryExpression	0
>651	Identifier	i
>652	Identifier	i
>653	IdentifierDeclType	int
>654	ForStatement	for ( int i = 0 ; i < v1_size ; i ++ )
>655	ExpressionStatement	 
>656	CallExpression	seen . insert ( v1 [ i ] )
>657	ArgumentList	v1 [ i ]
>658	Argument	v1 [ i ]
>659	ArrayIndexing	v1 [ i ]
>660	Identifier	i
>661	Identifier	v1
>662	Callee	seen . insert
>663	MemberAccess	seen . insert
>664	Identifier	insert
>665	Identifier	seen
>666	IncDecOp	 
>667	IncDec	++
>668	Identifier	i
>669	Condition	 
>670	RelationalExpression	i < v1_size
>671	Identifier	v1_size
>672	Identifier	i
>673	ForInit	 
>674	IdentifierDeclStatement	int i = 0 ;
>675	IdentifierDecl	i = 0
>676	AssignmentExpr	i = 0
>677	PrimaryExpression	0
>678	Identifier	i
>679	Identifier	i
>680	IdentifierDeclType	int
>681	IdentifierDeclStatement	 
>682	IdentifierDecl	intersection
>683	Identifier	intersection
>684	IdentifierDeclType	std 
>685	IdentifierDeclStatement	 
>686	IdentifierDecl	v2_size = ( int ) v2 . size ( )
>687	AssignmentExpr	v2_size = ( int ) v2 . size ( )
>688	CastExpression	( int ) v2 . size ( )
>689	CallExpression	v2 . size ( )
>690	ArgumentList	 
>691	Callee	v2 . size
>692	MemberAccess	v2 . size
>693	Identifier	size
>694	Identifier	v2
>695	CastTarget	int
>696	Identifier	v2_size
>697	Identifier	v2_size
>698	IdentifierDeclType	int
>699	IdentifierDeclStatement	 
>700	IdentifierDecl	v1_size = ( int ) v1 . size ( )
>701	AssignmentExpr	v1_size = ( int ) v1 . size ( )
>702	CastExpression	( int ) v1 . size ( )
>703	CallExpression	v1 . size ( )
>704	ArgumentList	 
>705	Callee	v1 . size
>706	MemberAccess	v1 . size
>707	Identifier	size
>708	Identifier	v1
>709	CastTarget	int
>710	Identifier	v1_size
>711	Identifier	v1_size
>712	IdentifierDeclType	int
>713	IdentifierDeclStatement	 
>714	IdentifierDecl	seen
>715	Identifier	seen
>716	IdentifierDeclType	__gnu_cxx 
>734	FunctionDef	VectorIntersectionNonEmpty (const std 
>735	ParameterList	const std 
>736	Parameter	 
>737	Identifier	v2
>738	ParameterType	const std 
>739	Parameter	 
>740	Identifier	v1
>741	ParameterType	const std 
>742	ReturnType	bool
>743	CompoundStatement	 
>744	ReturnStatement	 
>745	Identifier	false
>746	ExpressionStatement	 
>747	CallExpression	seen . clear ( )
>748	ArgumentList	 
>749	Callee	seen . clear
>750	MemberAccess	seen . clear
>751	Identifier	clear
>752	Identifier	seen
>753	ForStatement	for ( int i = 0 ; i < v2_size ; i ++ )
>754	CompoundStatement	 
>755	IfStatement	if ( seen . find ( v2 [ i ] ) != seen . end ( ) )
>756	ReturnStatement	 
>757	Identifier	true
>758	Condition	 
>759	EqualityExpression	seen . find ( v2 [ i ] ) != seen . end ( )
>760	CallExpression	seen . end ( )
>761	ArgumentList	 
>762	Callee	seen . end
>763	MemberAccess	seen . end
>764	Identifier	end
>765	Identifier	seen
>766	CallExpression	seen . find ( v2 [ i ] )
>767	ArgumentList	v2 [ i ]
>768	Argument	v2 [ i ]
>769	ArrayIndexing	v2 [ i ]
>770	Identifier	i
>771	Identifier	v2
>772	Callee	seen . find
>773	MemberAccess	seen . find
>774	Identifier	find
>775	Identifier	seen
>776	IncDecOp	 
>777	IncDec	++
>778	Identifier	i
>779	Condition	 
>780	RelationalExpression	i < v2_size
>781	Identifier	v2_size
>782	Identifier	i
>783	ForInit	 
>784	IdentifierDeclStatement	int i = 0 ;
>785	IdentifierDecl	i = 0
>786	AssignmentExpr	i = 0
>787	PrimaryExpression	0
>788	Identifier	i
>789	Identifier	i
>790	IdentifierDeclType	int
>791	ForStatement	for ( int i = 0 ; i < v1_size ; i ++ )
>792	ExpressionStatement	 
>793	CallExpression	seen . insert ( v1 [ i ] )
>794	ArgumentList	v1 [ i ]
>795	Argument	v1 [ i ]
>796	ArrayIndexing	v1 [ i ]
>797	Identifier	i
>798	Identifier	v1
>799	Callee	seen . insert
>800	MemberAccess	seen . insert
>801	Identifier	insert
>802	Identifier	seen
>803	IncDecOp	 
>804	IncDec	++
>805	Identifier	i
>806	Condition	 
>807	RelationalExpression	i < v1_size
>808	Identifier	v1_size
>809	Identifier	i
>810	ForInit	 
>811	IdentifierDeclStatement	int i = 0 ;
>812	IdentifierDecl	i = 0
>813	AssignmentExpr	i = 0
>814	PrimaryExpression	0
>815	Identifier	i
>816	Identifier	i
>817	IdentifierDeclType	int
>818	IdentifierDeclStatement	 
>819	IdentifierDecl	v2_size = ( int ) v2 . size ( )
>820	AssignmentExpr	v2_size = ( int ) v2 . size ( )
>821	CastExpression	( int ) v2 . size ( )
>822	CallExpression	v2 . size ( )
>823	ArgumentList	 
>824	Callee	v2 . size
>825	MemberAccess	v2 . size
>826	Identifier	size
>827	Identifier	v2
>828	CastTarget	int
>829	Identifier	v2_size
>830	Identifier	v2_size
>831	IdentifierDeclType	int
>832	IdentifierDeclStatement	 
>833	IdentifierDecl	v1_size = ( int ) v1 . size ( )
>834	AssignmentExpr	v1_size = ( int ) v1 . size ( )
>835	CastExpression	( int ) v1 . size ( )
>836	CallExpression	v1 . size ( )
>837	ArgumentList	 
>838	Callee	v1 . size
>839	MemberAccess	v1 . size
>840	Identifier	size
>841	Identifier	v1
>842	CastTarget	int
>843	Identifier	v1_size
>844	Identifier	v1_size
>845	IdentifierDeclType	int
>846	IdentifierDeclStatement	 
>847	IdentifierDecl	seen
>848	Identifier	seen
>849	IdentifierDeclType	__gnu_cxx 
>868	FunctionDef	GetArrayIntersection (int m , int n , const int * a1 , const int * a2)
>869	ParameterList	int m , int n , const int * a1 , const int * a2
>870	Parameter	 
>871	Identifier	a2
>872	ParameterType	const int *
>873	Parameter	 
>874	Identifier	a1
>875	ParameterType	const int *
>876	Parameter	 
>877	Identifier	n
>878	ParameterType	int
>879	Parameter	 
>880	Identifier	m
>881	ParameterType	int
>882	ReturnType	std 
>883	CompoundStatement	 
>884	ReturnStatement	 
>885	Identifier	intersection
>886	WhileStatement	while ( c1 < m && c2 < n )
>887	CompoundStatement	 
>888	ExpressionStatement	 
>889	IncDecOp	c2 ++
>890	IncDec	++
>891	Identifier	c2
>892	IfStatement	if ( a1 [ c1 ] == a2 [ c2 ] )
>893	CompoundStatement	 
>894	ExpressionStatement	 
>895	IncDecOp	count ++
>896	IncDec	++
>897	Identifier	count
>898	ExpressionStatement	 
>899	CallExpression	intersection . push_back ( std 
>900	ArgumentList	std 
>901	Argument	int > ( c1 , c2 )
>902	RelationalExpression	int > ( c1 , c2 )
>903	Expression	c1 , c2
>904	Identifier	c2
>905	Identifier	c1
>906	Identifier	int
>907	Argument	std 
>908	RelationalExpression	std 
>909	Identifier	int
>910	Identifier	std 
>911	Callee	intersection . push_back
>912	MemberAccess	intersection . push_back
>913	Identifier	push_back
>914	Identifier	intersection
>915	Condition	 
>916	EqualityExpression	a1 [ c1 ] == a2 [ c2 ]
>917	ArrayIndexing	a2 [ c2 ]
>918	Identifier	c2
>919	Identifier	a2
>920	ArrayIndexing	a1 [ c1 ]
>921	Identifier	c1
>922	Identifier	a1
>923	WhileStatement	while ( a1 [ c1 ] < a2 [ c2 ] )
>924	ExpressionStatement	 
>925	IncDecOp	c1 ++
>926	IncDec	++
>927	Identifier	c1
>928	Condition	 
>929	RelationalExpression	a1 [ c1 ] < a2 [ c2 ]
>930	ArrayIndexing	a2 [ c2 ]
>931	Identifier	c2
>932	Identifier	a2
>933	ArrayIndexing	a1 [ c1 ]
>934	Identifier	c1
>935	Identifier	a1
>936	Condition	 
>937	AndExpression	c1 < m && c2 < n
>938	RelationalExpression	c2 < n
>939	Identifier	n
>940	Identifier	c2
>941	RelationalExpression	c1 < m
>942	Identifier	m
>943	Identifier	c1
>944	IdentifierDeclStatement	 
>945	IdentifierDecl	count = 0
>946	AssignmentExpr	count = 0
>947	PrimaryExpression	0
>948	Identifier	count
>949	Identifier	count
>950	IdentifierDeclType	int
>951	ExpressionStatement	 
>952	CallExpression	intersection . reserve ( MIN ( m , n ) )
>953	ArgumentList	MIN ( m , n )
>954	Argument	MIN ( m , n )
>955	CallExpression	MIN ( m , n )
>956	ArgumentList	m
>957	Argument	n
>958	Identifier	n
>959	Argument	m
>960	Identifier	m
>961	Callee	MIN
>962	Identifier	MIN
>963	Callee	intersection . reserve
>964	MemberAccess	intersection . reserve
>965	Identifier	reserve
>966	Identifier	intersection
>967	IdentifierDeclStatement	 
>968	IdentifierDecl	intersection
>969	Identifier	intersection
>970	IdentifierDeclType	std 
>971	IdentifierDeclStatement	 
>972	IdentifierDecl	c2 = 0
>973	AssignmentExpr	c2 = 0
>974	PrimaryExpression	0
>975	Identifier	c2
>976	Identifier	c2
>977	IdentifierDeclType	int
>978	IdentifierDecl	c1 = 0
>979	AssignmentExpr	c1 = 0
>980	PrimaryExpression	0
>981	Identifier	c1
>982	Identifier	c1
>983	IdentifierDeclType	int
>1002	FunctionDef	GetArrayIntersectionSorted (int m , int n , const int * a1 , const int * a2)
>1003	ParameterList	int m , int n , const int * a1 , const int * a2
>1004	Parameter	 
>1005	Identifier	a2
>1006	ParameterType	const int *
>1007	Parameter	 
>1008	Identifier	a1
>1009	ParameterType	const int *
>1010	Parameter	 
>1011	Identifier	n
>1012	ParameterType	int
>1013	Parameter	 
>1014	Identifier	m
>1015	ParameterType	int
>1016	ReturnType	std 
>1017	CompoundStatement	 
>1018	ReturnStatement	 
>1019	Identifier	intersection
>1020	WhileStatement	while ( c1 < m && c2 < n )
>1021	CompoundStatement	 
>1022	ExpressionStatement	 
>1023	IncDecOp	c2 ++
>1024	IncDec	++
>1025	Identifier	c2
>1026	IfStatement	if ( a1 [ c1 ] == a2 [ c2 ] )
>1027	CompoundStatement	 
>1028	ExpressionStatement	 
>1029	IncDecOp	count ++
>1030	IncDec	++
>1031	Identifier	count
>1032	ExpressionStatement	 
>1033	CallExpression	intersection . push_back ( std 
>1034	ArgumentList	std 
>1035	Argument	int > ( c1 , c2 )
>1036	RelationalExpression	int > ( c1 , c2 )
>1037	Expression	c1 , c2
>1038	Identifier	c2
>1039	Identifier	c1
>1040	Identifier	int
>1041	Argument	std 
>1042	RelationalExpression	std 
>1043	Identifier	int
>1044	Identifier	std 
>1045	Callee	intersection . push_back
>1046	MemberAccess	intersection . push_back
>1047	Identifier	push_back
>1048	Identifier	intersection
>1049	Condition	 
>1050	EqualityExpression	a1 [ c1 ] == a2 [ c2 ]
>1051	ArrayIndexing	a2 [ c2 ]
>1052	Identifier	c2
>1053	Identifier	a2
>1054	ArrayIndexing	a1 [ c1 ]
>1055	Identifier	c1
>1056	Identifier	a1
>1057	IfStatement	if ( c1 >= m )
>1058	BreakStatement	 
>1059	Condition	 
>1060	RelationalExpression	c1 >= m
>1061	Identifier	m
>1062	Identifier	c1
>1063	WhileStatement	while ( a1 [ c1 ] < a2 [ c2 ] && c1 < m )
>1064	ExpressionStatement	 
>1065	IncDecOp	c1 ++
>1066	IncDec	++
>1067	Identifier	c1
>1068	Condition	 
>1069	AndExpression	a1 [ c1 ] < a2 [ c2 ] && c1 < m
>1070	RelationalExpression	c1 < m
>1071	Identifier	m
>1072	Identifier	c1
>1073	RelationalExpression	a1 [ c1 ] < a2 [ c2 ]
>1074	ArrayIndexing	a2 [ c2 ]
>1075	Identifier	c2
>1076	Identifier	a2
>1077	ArrayIndexing	a1 [ c1 ]
>1078	Identifier	c1
>1079	Identifier	a1
>1080	Condition	 
>1081	AndExpression	c1 < m && c2 < n
>1082	RelationalExpression	c2 < n
>1083	Identifier	n
>1084	Identifier	c2
>1085	RelationalExpression	c1 < m
>1086	Identifier	m
>1087	Identifier	c1
>1088	IdentifierDeclStatement	 
>1089	IdentifierDecl	count = 0
>1090	AssignmentExpr	count = 0
>1091	PrimaryExpression	0
>1092	Identifier	count
>1093	Identifier	count
>1094	IdentifierDeclType	int
>1095	ExpressionStatement	 
>1096	CallExpression	intersection . reserve ( MIN ( m , n ) )
>1097	ArgumentList	MIN ( m , n )
>1098	Argument	MIN ( m , n )
>1099	CallExpression	MIN ( m , n )
>1100	ArgumentList	m
>1101	Argument	n
>1102	Identifier	n
>1103	Argument	m
>1104	Identifier	m
>1105	Callee	MIN
>1106	Identifier	MIN
>1107	Callee	intersection . reserve
>1108	MemberAccess	intersection . reserve
>1109	Identifier	reserve
>1110	Identifier	intersection
>1111	IdentifierDeclStatement	 
>1112	IdentifierDecl	intersection
>1113	Identifier	intersection
>1114	IdentifierDeclType	std 
>1115	IdentifierDeclStatement	 
>1116	IdentifierDecl	c2 = 0
>1117	AssignmentExpr	c2 = 0
>1118	PrimaryExpression	0
>1119	Identifier	c2
>1120	Identifier	c2
>1121	IdentifierDeclType	int
>1122	IdentifierDecl	c1 = 0
>1123	AssignmentExpr	c1 = 0
>1124	PrimaryExpression	0
>1125	Identifier	c1
>1126	Identifier	c1
>1127	IdentifierDeclType	int
>1146	FunctionDef	GetArrayIntersectionUnsorted (int m , int n , const int * a1 , const int * a2)
>1147	ParameterList	int m , int n , const int * a1 , const int * a2
>1148	Parameter	 
>1149	Identifier	a2
>1150	ParameterType	const int *
>1151	Parameter	 
>1152	Identifier	a1
>1153	ParameterType	const int *
>1154	Parameter	 
>1155	Identifier	n
>1156	ParameterType	int
>1157	Parameter	 
>1158	Identifier	m
>1159	ParameterType	int
>1160	ReturnType	std 
>1161	CompoundStatement	 
>1162	ReturnStatement	 
>1163	Identifier	isect
>1164	ForStatement	for ( int i = 0 ; i < m ; i ++ )
>1165	CompoundStatement	 
>1166	IfStatement	if ( seen . find ( a1 [ i ] ) != seen . end ( ) )
>1167	ExpressionStatement	 
>1168	CallExpression	isect . push_back ( std 
>1169	ArgumentList	std 
>1170	Argument	int > ( i , seen [ a1 [ i ] ] )
>1171	RelationalExpression	int > ( i , seen [ a1 [ i ] ] )
>1172	Expression	i , seen [ a1 [ i ] ]
>1173	ArrayIndexing	seen [ a1 [ i ] ]
>1174	ArrayIndexing	a1 [ i ]
>1175	Identifier	i
>1176	Identifier	a1
>1177	Identifier	seen
>1178	Identifier	i
>1179	Identifier	int
>1180	Argument	std 
>1181	RelationalExpression	std 
>1182	Identifier	int
>1183	Identifier	std 
>1184	Callee	isect . push_back
>1185	MemberAccess	isect . push_back
>1186	Identifier	push_back
>1187	Identifier	isect
>1188	Condition	 
>1189	EqualityExpression	seen . find ( a1 [ i ] ) != seen . end ( )
>1190	CallExpression	seen . end ( )
>1191	ArgumentList	 
>1192	Callee	seen . end
>1193	MemberAccess	seen . end
>1194	Identifier	end
>1195	Identifier	seen
>1196	CallExpression	seen . find ( a1 [ i ] )
>1197	ArgumentList	a1 [ i ]
>1198	Argument	a1 [ i ]
>1199	ArrayIndexing	a1 [ i ]
>1200	Identifier	i
>1201	Identifier	a1
>1202	Callee	seen . find
>1203	MemberAccess	seen . find
>1204	Identifier	find
>1205	Identifier	seen
>1206	IncDecOp	 
>1207	IncDec	++
>1208	Identifier	i
>1209	Condition	 
>1210	RelationalExpression	i < m
>1211	Identifier	m
>1212	Identifier	i
>1213	ForInit	 
>1214	IdentifierDeclStatement	int i = 0 ;
>1215	IdentifierDecl	i = 0
>1216	AssignmentExpr	i = 0
>1217	PrimaryExpression	0
>1218	Identifier	i
>1219	Identifier	i
>1220	IdentifierDeclType	int
>1221	ForStatement	for ( int i = 0 ; i < n ; i ++ )
>1222	ExpressionStatement	 
>1223	AssignmentExpr	seen [ a2 [ i ] ] = i
>1224	Identifier	i
>1225	ArrayIndexing	seen [ a2 [ i ] ]
>1226	ArrayIndexing	a2 [ i ]
>1227	Identifier	i
>1228	Identifier	a2
>1229	Identifier	seen
>1230	IncDecOp	 
>1231	IncDec	++
>1232	Identifier	i
>1233	Condition	 
>1234	RelationalExpression	i < n
>1235	Identifier	n
>1236	Identifier	i
>1237	ForInit	 
>1238	IdentifierDeclStatement	int i = 0 ;
>1239	IdentifierDecl	i = 0
>1240	AssignmentExpr	i = 0
>1241	PrimaryExpression	0
>1242	Identifier	i
>1243	Identifier	i
>1244	IdentifierDeclType	int
>1245	ExpressionStatement	 
>1246	CallExpression	isect . reserve ( MIN ( m , n ) )
>1247	ArgumentList	MIN ( m , n )
>1248	Argument	MIN ( m , n )
>1249	CallExpression	MIN ( m , n )
>1250	ArgumentList	m
>1251	Argument	n
>1252	Identifier	n
>1253	Argument	m
>1254	Identifier	m
>1255	Callee	MIN
>1256	Identifier	MIN
>1257	Callee	isect . reserve
>1258	MemberAccess	isect . reserve
>1259	Identifier	reserve
>1260	Identifier	isect
>1261	IdentifierDeclStatement	 
>1262	IdentifierDecl	isect
>1263	Identifier	isect
>1264	IdentifierDeclType	std 
>1265	IdentifierDeclStatement	 
>1266	IdentifierDecl	seen
>1267	Identifier	seen
>1268	IdentifierDeclType	__gnu_cxx 
>1291	FunctionDef	gain (double g , double x)
>1292	ParameterList	double g , double x
>1293	Parameter	 
>1294	Identifier	x
>1295	ParameterType	double
>1296	Parameter	 
>1297	Identifier	g
>1298	ParameterType	double
>1299	ReturnType	double
>1300	CompoundStatement	 
>1301	IfStatement	if ( x < 0.5 )
>1302	ElseStatement	else
>1303	ReturnStatement	 
>1304	AdditiveExpression	1.0 - 0.5 * pow ( 2.0 * ( 1.0 - x ) , p )
>1305	MultiplicativeExpression	0.5 * pow ( 2.0 * ( 1.0 - x ) , p )
>1306	CallExpression	pow ( 2.0 * ( 1.0 - x ) , p )
>1307	ArgumentList	2.0 * ( 1.0 - x )
>1308	Argument	p
>1309	Identifier	p
>1310	Argument	2.0 * ( 1.0 - x )
>1311	MultiplicativeExpression	2.0 * ( 1.0 - x )
>1312	AdditiveExpression	1.0 - x
>1313	Identifier	x
>1314	PrimaryExpression	1.0
>1315	PrimaryExpression	2.0
>1316	Callee	pow
>1317	Identifier	pow
>1318	PrimaryExpression	0.5
>1319	PrimaryExpression	1.0
>1320	ReturnStatement	 
>1321	MultiplicativeExpression	0.5 * pow ( 2.0 * x , p )
>1322	CallExpression	pow ( 2.0 * x , p )
>1323	ArgumentList	2.0 * x
>1324	Argument	p
>1325	Identifier	p
>1326	Argument	2.0 * x
>1327	MultiplicativeExpression	2.0 * x
>1328	Identifier	x
>1329	PrimaryExpression	2.0
>1330	Callee	pow
>1331	Identifier	pow
>1332	PrimaryExpression	0.5
>1333	Condition	 
>1334	RelationalExpression	x < 0.5
>1335	PrimaryExpression	0.5
>1336	Identifier	x
>1337	IfStatement	if ( x > 0.999999 )
>1338	ReturnStatement	 
>1339	PrimaryExpression	1.0
>1340	Condition	 
>1341	RelationalExpression	x > 0.999999
>1342	PrimaryExpression	0.999999
>1343	Identifier	x
>1344	IfStatement	if ( x < 1.0e-6 )
>1345	ReturnStatement	 
>1346	PrimaryExpression	0.0
>1347	Condition	 
>1348	RelationalExpression	x < 1.0e-6
>1349	PrimaryExpression	1.0e-6
>1350	Identifier	x
>1351	IdentifierDeclStatement	 
>1352	IdentifierDecl	p = log ( 1.0 - g ) / log ( 0.5 )
>1353	AssignmentExpr	p = log ( 1.0 - g ) / log ( 0.5 )
>1354	MultiplicativeExpression	log ( 1.0 - g ) / log ( 0.5 )
>1355	CallExpression	log ( 0.5 )
>1356	ArgumentList	0.5
>1357	Argument	0.5
>1358	PrimaryExpression	0.5
>1359	Callee	log
>1360	Identifier	log
>1361	CallExpression	log ( 1.0 - g )
>1362	ArgumentList	1.0 - g
>1363	Argument	1.0 - g
>1364	AdditiveExpression	1.0 - g
>1365	Identifier	g
>1366	PrimaryExpression	1.0
>1367	Callee	log
>1368	Identifier	log
>1369	Identifier	p
>1370	Identifier	p
>1371	IdentifierDeclType	double
>1380	FunctionDef	Tokenize (const std 
>1381	ParameterList	const std 
>1382	Parameter	 
>1383	Identifier	delimiters
>1384	ParameterType	const std 
>1385	Parameter	 
>1386	Identifier	tokens
>1387	ParameterType	std 
>1388	Parameter	 
>1389	Identifier	str
>1390	ParameterType	const std 
>1391	ReturnType	void
>1392	CompoundStatement	 
>1393	WhileStatement	while ( std 
>1394	CompoundStatement	 
>1395	ExpressionStatement	 
>1396	AssignmentExpr	pos = str . find_first_of ( delimiters , lastPos )
>1397	CallExpression	str . find_first_of ( delimiters , lastPos )
>1398	ArgumentList	delimiters
>1399	Argument	lastPos
>1400	Identifier	lastPos
>1401	Argument	delimiters
>1402	Identifier	delimiters
>1403	Callee	str . find_first_of
>1404	MemberAccess	str . find_first_of
>1405	Identifier	find_first_of
>1406	Identifier	str
>1407	Identifier	pos
>1408	ExpressionStatement	 
>1409	AssignmentExpr	lastPos = str . find_first_not_of ( delimiters , pos )
>1410	CallExpression	str . find_first_not_of ( delimiters , pos )
>1411	ArgumentList	delimiters
>1412	Argument	pos
>1413	Identifier	pos
>1414	Argument	delimiters
>1415	Identifier	delimiters
>1416	Callee	str . find_first_not_of
>1417	MemberAccess	str . find_first_not_of
>1418	Identifier	find_first_not_of
>1419	Identifier	str
>1420	Identifier	lastPos
>1421	ExpressionStatement	 
>1422	CallExpression	tokens . push_back ( str . substr ( lastPos , pos - lastPos ) )
>1423	ArgumentList	str . substr ( lastPos , pos - lastPos )
>1424	Argument	str . substr ( lastPos , pos - lastPos )
>1425	CallExpression	str . substr ( lastPos , pos - lastPos )
>1426	ArgumentList	lastPos
>1427	Argument	pos - lastPos
>1428	AdditiveExpression	pos - lastPos
>1429	Identifier	lastPos
>1430	Identifier	pos
>1431	Argument	lastPos
>1432	Identifier	lastPos
>1433	Callee	str . substr
>1434	MemberAccess	str . substr
>1435	Identifier	substr
>1436	Identifier	str
>1437	Callee	tokens . push_back
>1438	MemberAccess	tokens . push_back
>1439	Identifier	push_back
>1440	Identifier	tokens
>1441	Condition	 
>1442	OrExpression	std 
>1443	EqualityExpression	std 
>1444	Identifier	lastPos
>1445	Identifier	std 
>1446	EqualityExpression	std 
>1447	Identifier	pos
>1448	Identifier	std 
>1449	IdentifierDeclStatement	 
>1450	IdentifierDecl	pos = str . find_first_of ( delimiters , lastPos )
>1451	AssignmentExpr	pos = str . find_first_of ( delimiters , lastPos )
>1452	CallExpression	str . find_first_of ( delimiters , lastPos )
>1453	ArgumentList	delimiters
>1454	Argument	lastPos
>1455	Identifier	lastPos
>1456	Argument	delimiters
>1457	Identifier	delimiters
>1458	Callee	str . find_first_of
>1459	MemberAccess	str . find_first_of
>1460	Identifier	find_first_of
>1461	Identifier	str
>1462	Identifier	pos
>1463	Identifier	pos
>1464	IdentifierDeclType	std 
>1465	IdentifierDeclStatement	 
>1466	IdentifierDecl	lastPos = str . find_first_not_of ( delimiters , 0 )
>1467	AssignmentExpr	lastPos = str . find_first_not_of ( delimiters , 0 )
>1468	CallExpression	str . find_first_not_of ( delimiters , 0 )
>1469	ArgumentList	delimiters
>1470	Argument	0
>1471	PrimaryExpression	0
>1472	Argument	delimiters
>1473	Identifier	delimiters
>1474	Callee	str . find_first_not_of
>1475	MemberAccess	str . find_first_not_of
>1476	Identifier	find_first_not_of
>1477	Identifier	str
>1478	Identifier	lastPos
>1479	Identifier	lastPos
>1480	IdentifierDeclType	std 
>1493	FunctionDef	FileExists (const char * filename)
>1494	ParameterList	const char * filename
>1495	Parameter	 
>1496	Identifier	filename
>1497	ParameterType	const char *
>1498	ReturnType	bool
>1499	CompoundStatement	 
>1500	ReturnStatement	 
>1501	Identifier	true
>1502	ExpressionStatement	 
>1503	CallExpression	fclose ( f )
>1504	ArgumentList	f
>1505	Argument	f
>1506	Identifier	f
>1507	Callee	fclose
>1508	Identifier	fclose
>1509	IfStatement	if ( f == NULL )
>1510	ReturnStatement	 
>1511	Identifier	false
>1512	Condition	 
>1513	EqualityExpression	f == NULL
>1514	Identifier	NULL
>1515	Identifier	f
>1516	IdentifierDeclStatement	 
>1517	IdentifierDecl	* f = fopen ( filename , \"r\" )
>1518	AssignmentExpr	* f = fopen ( filename , \"r\" )
>1519	CallExpression	fopen ( filename , \"r\" )
>1520	ArgumentList	filename
>1521	Argument	\"r\"
>1522	PrimaryExpression	\"r\"
>1523	Argument	filename
>1524	Identifier	filename
>1525	Callee	fopen
>1526	Identifier	fopen
>1527	Identifier	f
>1528	Identifier	f
>1529	IdentifierDeclType	FILE *
>1539	FunctionDef	choose (int n , int k , int * arr)
>1540	ParameterList	int n , int k , int * arr
>1541	Parameter	 
>1542	Identifier	arr
>1543	ParameterType	int *
>1544	Parameter	 
>1545	Identifier	k
>1546	ParameterType	int
>1547	Parameter	 
>1548	Identifier	n
>1549	ParameterType	int
>1550	ReturnType	void
>1551	CompoundStatement	 
>1552	ForStatement	for ( i = 0 ; i < k ; i ++ )
>1553	CompoundStatement	 
>1554	WhileStatement	while ( 1 )
>1555	CompoundStatement	 
>1556	IfStatement	if ( ! redo )
>1557	CompoundStatement	 
>1558	BreakStatement	 
>1559	ExpressionStatement	 
>1560	AssignmentExpr	arr [ i ] = idx
>1561	Identifier	idx
>1562	ArrayIndexing	arr [ i ]
>1563	Identifier	i
>1564	Identifier	arr
>1565	Condition	 
>1566	UnaryOp	! redo
>1567	Identifier	redo
>1568	UnaryOperator	!
>1569	ForStatement	for ( j = 0 ; j < i ; j ++ )
>1570	CompoundStatement	 
>1571	IfStatement	if ( idx == arr [ j ] )
>1572	CompoundStatement	 
>1573	BreakStatement	 
>1574	ExpressionStatement	 
>1575	AssignmentExpr	redo = 1
>1576	PrimaryExpression	1
>1577	Identifier	redo
>1578	Condition	 
>1579	EqualityExpression	idx == arr [ j ]
>1580	ArrayIndexing	arr [ j ]
>1581	Identifier	j
>1582	Identifier	arr
>1583	Identifier	idx
>1584	IncDecOp	 
>1585	IncDec	++
>1586	Identifier	j
>1587	Condition	 
>1588	RelationalExpression	j < i
>1589	Identifier	i
>1590	Identifier	j
>1591	ForInit	 
>1592	AssignmentExpr	j = 0
>1593	PrimaryExpression	0
>1594	Identifier	j
>1595	IdentifierDeclStatement	 
>1596	IdentifierDecl	redo = 0
>1597	AssignmentExpr	redo = 0
>1598	PrimaryExpression	0
>1599	Identifier	redo
>1600	Identifier	redo
>1601	IdentifierDeclType	int
>1602	IdentifierDecl	j
>1603	Identifier	j
>1604	IdentifierDeclType	int
>1605	IdentifierDeclStatement	 
>1606	IdentifierDecl	idx = rand ( ) % n
>1607	AssignmentExpr	idx = rand ( ) % n
>1608	MultiplicativeExpression	rand ( ) % n
>1609	Identifier	n
>1610	CallExpression	rand ( )
>1611	ArgumentList	 
>1612	Callee	rand
>1613	Identifier	rand
>1614	Identifier	idx
>1615	Identifier	idx
>1616	IdentifierDeclType	int
>1617	Condition	 
>1618	PrimaryExpression	1
>1619	IncDecOp	 
>1620	IncDec	++
>1621	Identifier	i
>1622	Condition	 
>1623	RelationalExpression	i < k
>1624	Identifier	k
>1625	Identifier	i
>1626	ForInit	 
>1627	AssignmentExpr	i = 0
>1628	PrimaryExpression	0
>1629	Identifier	i
>1630	IfStatement	if ( k > n )
>1631	CompoundStatement	 
>1632	ReturnStatement	 
>1633	ExpressionStatement	 
>1634	CallExpression	printf ( \"[choose] Error
>1635	ArgumentList	\"[choose] Error
>1636	Argument	\"[choose] Error
>1637	PrimaryExpression	\"[choose] Error
>1638	Callee	printf
>1639	Identifier	printf
>1640	Condition	 
>1641	RelationalExpression	k > n
>1642	Identifier	n
>1643	Identifier	k
>1644	IdentifierDeclStatement	 
>1645	IdentifierDecl	i
>1646	Identifier	i
>1647	IdentifierDeclType	int
>1676	FunctionDef	ConvertRGBtoLAB (double r , double g , double b , double & L , double & A , double & B)
>1677	ParameterList	double r , double g , double b , double & L , double & A , double & B
>1678	Parameter	 
>1679	Identifier	B
>1680	ParameterType	double &
>1681	Parameter	 
>1682	Identifier	A
>1683	ParameterType	double &
>1684	Parameter	 
>1685	Identifier	L
>1686	ParameterType	double &
>1687	Parameter	 
>1688	Identifier	b
>1689	ParameterType	double
>1690	Parameter	 
>1691	Identifier	g
>1692	ParameterType	double
>1693	Parameter	 
>1694	Identifier	r
>1695	ParameterType	double
>1696	ReturnType	void
>1697	CompoundStatement	 
>1698	ExpressionStatement	 
>1699	AssignmentExpr	B = lab [ 2 ]
>1700	ArrayIndexing	lab [ 2 ]
>1701	PrimaryExpression	2
>1702	Identifier	lab
>1703	Identifier	B
>1704	ExpressionStatement	 
>1705	AssignmentExpr	A = lab [ 1 ]
>1706	ArrayIndexing	lab [ 1 ]
>1707	PrimaryExpression	1
>1708	Identifier	lab
>1709	Identifier	A
>1710	ExpressionStatement	 
>1711	AssignmentExpr	L = lab [ 0 ]
>1712	ArrayIndexing	lab [ 0 ]
>1713	PrimaryExpression	0
>1714	Identifier	lab
>1715	Identifier	L
>1716	ExpressionStatement	 
>1717	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , LMStoLAB , lms , lab )
>1718	ArgumentList	3
>1719	Argument	lab
>1720	Identifier	lab
>1721	Argument	lms
>1722	Identifier	lms
>1723	Argument	LMStoLAB
>1724	Identifier	LMStoLAB
>1725	Argument	1
>1726	PrimaryExpression	1
>1727	Argument	3
>1728	PrimaryExpression	3
>1729	Argument	3
>1730	PrimaryExpression	3
>1731	Argument	3
>1732	PrimaryExpression	3
>1733	Callee	matrix_product
>1734	Identifier	matrix_product
>1735	ExpressionStatement	 
>1736	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , RGBtoLMS , rgb , lms )
>1737	ArgumentList	3
>1738	Argument	lms
>1739	Identifier	lms
>1740	Argument	rgb
>1741	Identifier	rgb
>1742	Argument	RGBtoLMS
>1743	Identifier	RGBtoLMS
>1744	Argument	1
>1745	PrimaryExpression	1
>1746	Argument	3
>1747	PrimaryExpression	3
>1748	Argument	3
>1749	PrimaryExpression	3
>1750	Argument	3
>1751	PrimaryExpression	3
>1752	Callee	matrix_product
>1753	Identifier	matrix_product
>1754	IdentifierDeclStatement	 
>1755	IdentifierDecl	lab [ 3 ]
>1756	PrimaryExpression	3
>1757	Identifier	lab
>1758	IdentifierDeclType	double [ 3 ]
>1759	IdentifierDecl	lms [ 3 ]
>1760	PrimaryExpression	3
>1761	Identifier	lms
>1762	IdentifierDeclType	double [ 3 ]
>1763	IdentifierDeclStatement	 
>1764	IdentifierDecl	rgb [ 3 ] = { r , g , b }
>1765	AssignmentExpr	rgb [ 3 ] = { r , g , b }
>1766	InitializerList	r
>1767	Identifier	b
>1768	Identifier	g
>1769	Identifier	r
>1770	Identifier	rgb
>1771	PrimaryExpression	3
>1772	Identifier	rgb
>1773	IdentifierDeclType	double [ 3 ]
>1789	FunctionDef	ConvertLABtoRGB (double L , double A , double B , double & r , double & g , double & b)
>1790	ParameterList	double L , double A , double B , double & r , double & g , double & b
>1791	Parameter	 
>1792	Identifier	b
>1793	ParameterType	double &
>1794	Parameter	 
>1795	Identifier	g
>1796	ParameterType	double &
>1797	Parameter	 
>1798	Identifier	r
>1799	ParameterType	double &
>1800	Parameter	 
>1801	Identifier	B
>1802	ParameterType	double
>1803	Parameter	 
>1804	Identifier	A
>1805	ParameterType	double
>1806	Parameter	 
>1807	Identifier	L
>1808	ParameterType	double
>1809	ReturnType	void
>1810	CompoundStatement	 
>1811	ExpressionStatement	 
>1812	AssignmentExpr	b = rgb [ 2 ]
>1813	ArrayIndexing	rgb [ 2 ]
>1814	PrimaryExpression	2
>1815	Identifier	rgb
>1816	Identifier	b
>1817	ExpressionStatement	 
>1818	AssignmentExpr	g = rgb [ 1 ]
>1819	ArrayIndexing	rgb [ 1 ]
>1820	PrimaryExpression	1
>1821	Identifier	rgb
>1822	Identifier	g
>1823	ExpressionStatement	 
>1824	AssignmentExpr	r = rgb [ 0 ]
>1825	ArrayIndexing	rgb [ 0 ]
>1826	PrimaryExpression	0
>1827	Identifier	rgb
>1828	Identifier	r
>1829	ExpressionStatement	 
>1830	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , LMStoRGB , lms , rgb )
>1831	ArgumentList	3
>1832	Argument	rgb
>1833	Identifier	rgb
>1834	Argument	lms
>1835	Identifier	lms
>1836	Argument	LMStoRGB
>1837	Identifier	LMStoRGB
>1838	Argument	1
>1839	PrimaryExpression	1
>1840	Argument	3
>1841	PrimaryExpression	3
>1842	Argument	3
>1843	PrimaryExpression	3
>1844	Argument	3
>1845	PrimaryExpression	3
>1846	Callee	matrix_product
>1847	Identifier	matrix_product
>1848	ExpressionStatement	 
>1849	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , LABtoLMS , lab , lms )
>1850	ArgumentList	3
>1851	Argument	lms
>1852	Identifier	lms
>1853	Argument	lab
>1854	Identifier	lab
>1855	Argument	LABtoLMS
>1856	Identifier	LABtoLMS
>1857	Argument	1
>1858	PrimaryExpression	1
>1859	Argument	3
>1860	PrimaryExpression	3
>1861	Argument	3
>1862	PrimaryExpression	3
>1863	Argument	3
>1864	PrimaryExpression	3
>1865	Callee	matrix_product
>1866	Identifier	matrix_product
>1867	IdentifierDeclStatement	 
>1868	IdentifierDecl	rgb [ 3 ]
>1869	PrimaryExpression	3
>1870	Identifier	rgb
>1871	IdentifierDeclType	double [ 3 ]
>1872	IdentifierDecl	lms [ 3 ]
>1873	PrimaryExpression	3
>1874	Identifier	lms
>1875	IdentifierDeclType	double [ 3 ]
>1876	IdentifierDeclStatement	 
>1877	IdentifierDecl	lab [ 3 ] = { L , A , B }
>1878	AssignmentExpr	lab [ 3 ] = { L , A , B }
>1879	InitializerList	L
>1880	Identifier	B
>1881	Identifier	A
>1882	Identifier	L
>1883	Identifier	lab
>1884	PrimaryExpression	3
>1885	Identifier	lab
>1886	IdentifierDeclType	double [ 3 ]
>1902	FunctionDef	generate_permutation (int n , int * arr)
>1903	ParameterList	int n , int * arr
>1904	Parameter	 
>1905	Identifier	arr
>1906	ParameterType	int *
>1907	Parameter	 
>1908	Identifier	n
>1909	ParameterType	int
>1910	ReturnType	void
>1911	CompoundStatement	 
>1912	ExpressionStatement	 
>1913	CallExpression	b . clear ( )
>1914	ArgumentList	 
>1915	Callee	b . clear
>1916	MemberAccess	b . clear
>1917	Identifier	clear
>1918	Identifier	b
>1919	ForStatement	for ( int i = 0 ; i < n ; i ++ )
>1920	CompoundStatement	 
>1921	ExpressionStatement	 
>1922	AssignmentExpr	arr [ i ] = b [ i ]
>1923	ArrayIndexing	b [ i ]
>1924	Identifier	i
>1925	Identifier	b
>1926	ArrayIndexing	arr [ i ]
>1927	Identifier	i
>1928	Identifier	arr
>1929	IncDecOp	 
>1930	IncDec	++
>1931	Identifier	i
>1932	Condition	 
>1933	RelationalExpression	i < n
>1934	Identifier	n
>1935	Identifier	i
>1936	ForInit	 
>1937	IdentifierDeclStatement	int i = 0 ;
>1938	IdentifierDecl	i = 0
>1939	AssignmentExpr	i = 0
>1940	PrimaryExpression	0
>1941	Identifier	i
>1942	Identifier	i
>1943	IdentifierDeclType	int
>1944	ForStatement	for ( int i = 0 ; i < n ; i ++ )
>1945	CompoundStatement	 
>1946	ExpressionStatement	 
>1947	CallExpression	a . erase ( a . begin ( ) + idx )
>1948	ArgumentList	a . begin ( ) + idx
>1949	Argument	a . begin ( ) + idx
>1950	AdditiveExpression	a . begin ( ) + idx
>1951	Identifier	idx
>1952	CallExpression	a . begin ( )
>1953	ArgumentList	 
>1954	Callee	a . begin
>1955	MemberAccess	a . begin
>1956	Identifier	begin
>1957	Identifier	a
>1958	Callee	a . erase
>1959	MemberAccess	a . erase
>1960	Identifier	erase
>1961	Identifier	a
>1962	ExpressionStatement	 
>1963	CallExpression	b . push_back ( a [ idx ] )
>1964	ArgumentList	a [ idx ]
>1965	Argument	a [ idx ]
>1966	ArrayIndexing	a [ idx ]
>1967	Identifier	idx
>1968	Identifier	a
>1969	Callee	b . push_back
>1970	MemberAccess	b . push_back
>1971	Identifier	push_back
>1972	Identifier	b
>1973	IdentifierDeclStatement	 
>1974	IdentifierDecl	idx = rand ( ) % ( n - i )
>1975	AssignmentExpr	idx = rand ( ) % ( n - i )
>1976	MultiplicativeExpression	rand ( ) % ( n - i )
>1977	AdditiveExpression	n - i
>1978	Identifier	i
>1979	Identifier	n
>1980	CallExpression	rand ( )
>1981	ArgumentList	 
>1982	Callee	rand
>1983	Identifier	rand
>1984	Identifier	idx
>1985	Identifier	idx
>1986	IdentifierDeclType	int
>1987	IncDecOp	 
>1988	IncDec	++
>1989	Identifier	i
>1990	Condition	 
>1991	RelationalExpression	i < n
>1992	Identifier	n
>1993	Identifier	i
>1994	ForInit	 
>1995	IdentifierDeclStatement	int i = 0 ;
>1996	IdentifierDecl	i = 0
>1997	AssignmentExpr	i = 0
>1998	PrimaryExpression	0
>1999	Identifier	i
>2000	Identifier	i
>2001	IdentifierDeclType	int
>2002	IdentifierDeclStatement	 
>2003	IdentifierDecl	b
>2004	Identifier	b
>2005	IdentifierDeclType	std 
>2006	ForStatement	for ( int i = 0 ; i < n ; i ++ )
>2007	CompoundStatement	 
>2008	ExpressionStatement	 
>2009	CallExpression	a . push_back ( i )
>2010	ArgumentList	i
>2011	Argument	i
>2012	Identifier	i
>2013	Callee	a . push_back
>2014	MemberAccess	a . push_back
>2015	Identifier	push_back
>2016	Identifier	a
>2017	IncDecOp	 
>2018	IncDec	++
>2019	Identifier	i
>2020	Condition	 
>2021	RelationalExpression	i < n
>2022	Identifier	n
>2023	Identifier	i
>2024	ForInit	 
>2025	IdentifierDeclStatement	int i = 0 ;
>2026	IdentifierDecl	i = 0
>2027	AssignmentExpr	i = 0
>2028	PrimaryExpression	0
>2029	Identifier	i
>2030	Identifier	i
>2031	IdentifierDeclType	int
>2032	IdentifierDeclStatement	 
>2033	IdentifierDecl	a
>2034	Identifier	a
>2035	IdentifierDeclType	std 
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=57,43,29,22,15,13
<13=14
<15=16
<16=20,17
<17=18
<18=19
<20=21
<22=23
<23=27,24
<24=25
<25=26
<27=28
<29=30
<30=42,41,31
<31=40,32
<32=38,33
<33=36,34
<34=35
<36=37
<38=39
<43=44
<44=56,55,45
<45=54,46
<46=52,47
<47=50,48
<48=49
<50=51
<52=53
<57=58
<58=74,73,59
<59=72,60
<60=70,61
<61=68,64,62
<62=63
<64=65
<65=67,66
<68=69
<70=71
<86=98,97,87
<87=94,91,88
<88=90,89
<91=93,92
<94=96,95
<98=140,127,114,108,99
<99=100
<100=106,101
<101=104,102
<102=103
<104=105
<106=107
<108=109
<109=113,110
<110=112,111
<114=123,115
<115=116
<116=117
<117=121,118
<118=119
<119=120
<121=122
<123=124
<124=126,125
<127=128
<128=139,138,129
<129=137,130
<130=134,131
<131=133,132
<134=136,135
<140=141
<141=157,156,142
<142=155,143
<143=153,144
<144=149,145
<145=146
<146=148,147
<149=150
<150=152,151
<153=154
<172=184,183,173
<173=180,177,174
<174=176,175
<177=179,178
<180=182,181
<184=369,351,340,322,311,304,299,281,270,252,247,236,219,202,185
<185=186
<186=200,187
<187=196,194,188
<188=189
<189=193,190
<190=192,191
<194=195
<196=197
<197=199,198
<200=201
<202=203
<203=217,204
<204=213,211,205
<205=206
<206=210,207
<207=209,208
<211=212
<213=214
<214=216,215
<217=218
<219=220
<220=234,221
<221=230,228,222
<222=223
<223=227,224
<224=226,225
<228=229
<230=231
<231=233,232
<234=235
<236=237
<237=245,238
<238=243,241,239
<239=240
<241=242
<243=244
<245=246
<247=248
<248=251,250,249
<252=253
<253=267,254
<254=261,255
<255=259,256
<256=257
<257=258
<259=260
<261=265,262
<262=263
<263=264
<265=266
<267=269,268
<270=271
<271=278,272
<272=276,273
<273=274
<274=275
<276=277
<278=280,279
<281=282
<282=296,283
<283=290,284
<284=288,285
<285=286
<286=287
<288=289
<290=294,291
<291=292
<292=293
<294=295
<296=298,297
<299=300
<300=303,302,301
<304=305
<305=310,309,306
<306=308,307
<311=312
<312=321,320,313
<313=319,314
<314=318,315
<315=317,316
<322=323
<323=337,324
<324=331,325
<325=329,326
<326=327
<327=328
<329=330
<331=335,332
<332=333
<333=334
<335=336
<337=339,338
<340=341
<341=348,342
<342=346,343
<343=344
<344=345
<346=347
<348=350,349
<351=352
<352=366,353
<353=360,354
<354=358,355
<355=356
<356=357
<358=359
<360=364,361
<361=362
<362=363
<364=365
<366=368,367
<369=370
<370=373,372,371
<390=402,401,391
<391=398,395,392
<392=394,393
<395=397,396
<398=400,399
<402=563,556,549,514,508,504,497,455,451,442,403
<403=434,430,427,404
<404=419,405
<405=406
<406=416,407
<407=415,408
<408=410,409
<410=412,411
<412=414,413
<416=418,417
<419=421,420
<421=422
<422=424,423
<424=426,425
<427=429,428
<430=431
<431=433,432
<434=435
<435=436
<436=441,440,437
<437=439,438
<442=443
<443=450,444
<444=448,445
<445=446
<446=447
<448=449
<451=452
<452=454,453
<455=489,485,482,456
<456=474,463,457
<457=458
<458=462,459
<459=461,460
<463=464
<464=473,472,465
<465=471,466
<466=468,467
<468=470,469
<474=476,475
<476=477
<477=479,478
<479=481,480
<482=484,483
<485=486
<486=488,487
<489=490
<490=491
<491=496,495,492
<492=494,493
<497=498
<498=503,502,499
<499=501,500
<504=505
<505=507,506
<508=510,509
<510=511
<511=513,512
<514=541,537,534,515
<515=526,520,516
<516=517
<517=519,518
<520=521
<521=525,522
<522=524,523
<526=528,527
<528=529
<529=531,530
<531=533,532
<534=536,535
<537=538
<538=540,539
<541=542
<542=543
<543=548,547,544
<544=546,545
<549=550
<550=555,554,551
<551=553,552
<556=557
<557=562,561,558
<558=560,559
<563=564
<564=571,570,565
<565=569,566
<566=568,567
<588=597,596,589
<589=593,590
<590=592,591
<593=595,594
<597=713,699,685,681,654,607,600,598
<598=599
<600=601
<601=603,602
<603=604
<604=606,605
<607=646,642,639,608
<608=609
<609=621,610
<610=611
<611=617,612
<612=613
<613=614
<614=616,615
<617=618
<618=620,619
<621=622
<622=629,623
<623=625,624
<625=626
<626=628,627
<629=635,630
<630=631
<631=632
<632=634,633
<635=636
<636=638,637
<639=641,640
<642=643
<643=645,644
<646=647
<647=648
<648=653,652,649
<649=651,650
<654=673,669,666,655
<655=656
<656=662,657
<657=658
<658=659
<659=661,660
<662=663
<663=665,664
<666=668,667
<669=670
<670=672,671
<673=674
<674=675
<675=680,679,676
<676=678,677
<681=682
<682=684,683
<685=686
<686=698,697,687
<687=696,688
<688=695,689
<689=691,690
<691=692
<692=694,693
<699=700
<700=712,711,701
<701=710,702
<702=709,703
<703=705,704
<705=706
<706=708,707
<713=714
<714=716,715
<734=743,742,735
<735=739,736
<736=738,737
<739=741,740
<743=846,832,818,791,753,746,744
<744=745
<746=747
<747=749,748
<749=750
<750=752,751
<753=783,779,776,754
<754=755
<755=758,756
<756=757
<758=759
<759=766,760
<760=762,761
<762=763
<763=765,764
<766=772,767
<767=768
<768=769
<769=771,770
<772=773
<773=775,774
<776=778,777
<779=780
<780=782,781
<783=784
<784=785
<785=790,789,786
<786=788,787
<791=810,806,803,792
<792=793
<793=799,794
<794=795
<795=796
<796=798,797
<799=800
<800=802,801
<803=805,804
<806=807
<807=809,808
<810=811
<811=812
<812=817,816,813
<813=815,814
<818=819
<819=831,830,820
<820=829,821
<821=828,822
<822=824,823
<824=825
<825=827,826
<832=833
<833=845,844,834
<834=843,835
<835=842,836
<836=838,837
<838=839
<839=841,840
<846=847
<847=849,848
<868=883,882,869
<869=879,876,873,870
<870=872,871
<873=875,874
<876=878,877
<879=881,880
<883=971,967,951,944,886,884
<884=885
<886=936,887
<887=923,892,888
<888=889
<889=891,890
<892=915,893
<893=898,894
<894=895
<895=897,896
<898=899
<899=911,900
<900=907,901
<901=902
<902=906,903
<903=905,904
<907=908
<908=910,909
<911=912
<912=914,913
<915=916
<916=920,917
<917=919,918
<920=922,921
<923=928,924
<924=925
<925=927,926
<928=929
<929=933,930
<930=932,931
<933=935,934
<936=937
<937=941,938
<938=940,939
<941=943,942
<944=945
<945=950,949,946
<946=948,947
<951=952
<952=963,953
<953=954
<954=955
<955=961,956
<956=959,957
<957=958
<959=960
<961=962
<963=964
<964=966,965
<967=968
<968=970,969
<971=978,972
<972=977,976,973
<973=975,974
<978=983,982,979
<979=981,980
<1002=1017,1016,1003
<1003=1013,1010,1007,1004
<1004=1006,1005
<1007=1009,1008
<1010=1012,1011
<1013=1015,1014
<1017=1115,1111,1095,1088,1020,1018
<1018=1019
<1020=1080,1021
<1021=1063,1057,1026,1022
<1022=1023
<1023=1025,1024
<1026=1049,1027
<1027=1032,1028
<1028=1029
<1029=1031,1030
<1032=1033
<1033=1045,1034
<1034=1041,1035
<1035=1036
<1036=1040,1037
<1037=1039,1038
<1041=1042
<1042=1044,1043
<1045=1046
<1046=1048,1047
<1049=1050
<1050=1054,1051
<1051=1053,1052
<1054=1056,1055
<1057=1059,1058
<1059=1060
<1060=1062,1061
<1063=1068,1064
<1064=1065
<1065=1067,1066
<1068=1069
<1069=1073,1070
<1070=1072,1071
<1073=1077,1074
<1074=1076,1075
<1077=1079,1078
<1080=1081
<1081=1085,1082
<1082=1084,1083
<1085=1087,1086
<1088=1089
<1089=1094,1093,1090
<1090=1092,1091
<1095=1096
<1096=1107,1097
<1097=1098
<1098=1099
<1099=1105,1100
<1100=1103,1101
<1101=1102
<1103=1104
<1105=1106
<1107=1108
<1108=1110,1109
<1111=1112
<1112=1114,1113
<1115=1122,1116
<1116=1121,1120,1117
<1117=1119,1118
<1122=1127,1126,1123
<1123=1125,1124
<1146=1161,1160,1147
<1147=1157,1154,1151,1148
<1148=1150,1149
<1151=1153,1152
<1154=1156,1155
<1157=1159,1158
<1161=1265,1261,1245,1221,1164,1162
<1162=1163
<1164=1213,1209,1206,1165
<1165=1166
<1166=1188,1167
<1167=1168
<1168=1184,1169
<1169=1180,1170
<1170=1171
<1171=1179,1172
<1172=1178,1173
<1173=1177,1174
<1174=1176,1175
<1180=1181
<1181=1183,1182
<1184=1185
<1185=1187,1186
<1188=1189
<1189=1196,1190
<1190=1192,1191
<1192=1193
<1193=1195,1194
<1196=1202,1197
<1197=1198
<1198=1199
<1199=1201,1200
<1202=1203
<1203=1205,1204
<1206=1208,1207
<1209=1210
<1210=1212,1211
<1213=1214
<1214=1215
<1215=1220,1219,1216
<1216=1218,1217
<1221=1237,1233,1230,1222
<1222=1223
<1223=1225,1224
<1225=1229,1226
<1226=1228,1227
<1230=1232,1231
<1233=1234
<1234=1236,1235
<1237=1238
<1238=1239
<1239=1244,1243,1240
<1240=1242,1241
<1245=1246
<1246=1257,1247
<1247=1248
<1248=1249
<1249=1255,1250
<1250=1253,1251
<1251=1252
<1253=1254
<1255=1256
<1257=1258
<1258=1260,1259
<1261=1262
<1262=1264,1263
<1265=1266
<1266=1268,1267
<1291=1300,1299,1292
<1292=1296,1293
<1293=1295,1294
<1296=1298,1297
<1300=1351,1344,1337,1301
<1301=1333,1320,1302
<1302=1303
<1303=1304
<1304=1319,1305
<1305=1318,1306
<1306=1316,1307
<1307=1310,1308
<1308=1309
<1310=1311
<1311=1315,1312
<1312=1314,1313
<1316=1317
<1320=1321
<1321=1332,1322
<1322=1330,1323
<1323=1326,1324
<1324=1325
<1326=1327
<1327=1329,1328
<1330=1331
<1333=1334
<1334=1336,1335
<1337=1340,1338
<1338=1339
<1340=1341
<1341=1343,1342
<1344=1347,1345
<1345=1346
<1347=1348
<1348=1350,1349
<1351=1352
<1352=1371,1370,1353
<1353=1369,1354
<1354=1361,1355
<1355=1359,1356
<1356=1357
<1357=1358
<1359=1360
<1361=1367,1362
<1362=1363
<1363=1364
<1364=1366,1365
<1367=1368
<1380=1392,1391,1381
<1381=1388,1385,1382
<1382=1384,1383
<1385=1387,1386
<1388=1390,1389
<1392=1465,1449,1393
<1393=1441,1394
<1394=1421,1408,1395
<1395=1396
<1396=1407,1397
<1397=1403,1398
<1398=1401,1399
<1399=1400
<1401=1402
<1403=1404
<1404=1406,1405
<1408=1409
<1409=1420,1410
<1410=1416,1411
<1411=1414,1412
<1412=1413
<1414=1415
<1416=1417
<1417=1419,1418
<1421=1422
<1422=1437,1423
<1423=1424
<1424=1425
<1425=1433,1426
<1426=1431,1427
<1427=1428
<1428=1430,1429
<1431=1432
<1433=1434
<1434=1436,1435
<1437=1438
<1438=1440,1439
<1441=1442
<1442=1446,1443
<1443=1445,1444
<1446=1448,1447
<1449=1450
<1450=1464,1463,1451
<1451=1462,1452
<1452=1458,1453
<1453=1456,1454
<1454=1455
<1456=1457
<1458=1459
<1459=1461,1460
<1465=1466
<1466=1480,1479,1467
<1467=1478,1468
<1468=1474,1469
<1469=1472,1470
<1470=1471
<1472=1473
<1474=1475
<1475=1477,1476
<1493=1499,1498,1494
<1494=1495
<1495=1497,1496
<1499=1516,1509,1502,1500
<1500=1501
<1502=1503
<1503=1507,1504
<1504=1505
<1505=1506
<1507=1508
<1509=1512,1510
<1510=1511
<1512=1513
<1513=1515,1514
<1516=1517
<1517=1529,1528,1518
<1518=1527,1519
<1519=1525,1520
<1520=1523,1521
<1521=1522
<1523=1524
<1525=1526
<1539=1551,1550,1540
<1540=1547,1544,1541
<1541=1543,1542
<1544=1546,1545
<1547=1549,1548
<1551=1644,1630,1552
<1552=1626,1622,1619,1553
<1553=1554
<1554=1617,1555
<1555=1605,1595,1569,1556
<1556=1565,1557
<1557=1559,1558
<1559=1560
<1560=1562,1561
<1562=1564,1563
<1565=1566
<1566=1568,1567
<1569=1591,1587,1584,1570
<1570=1571
<1571=1578,1572
<1572=1574,1573
<1574=1575
<1575=1577,1576
<1578=1579
<1579=1583,1580
<1580=1582,1581
<1584=1586,1585
<1587=1588
<1588=1590,1589
<1591=1592
<1592=1594,1593
<1595=1602,1596
<1596=1601,1600,1597
<1597=1599,1598
<1602=1604,1603
<1605=1606
<1606=1616,1615,1607
<1607=1614,1608
<1608=1610,1609
<1610=1612,1611
<1612=1613
<1617=1618
<1619=1621,1620
<1622=1623
<1623=1625,1624
<1626=1627
<1627=1629,1628
<1630=1640,1631
<1631=1633,1632
<1633=1634
<1634=1638,1635
<1635=1636
<1636=1637
<1638=1639
<1640=1641
<1641=1643,1642
<1644=1645
<1645=1647,1646
<1676=1697,1696,1677
<1677=1693,1690,1687,1684,1681,1678
<1678=1680,1679
<1681=1683,1682
<1684=1686,1685
<1687=1689,1688
<1690=1692,1691
<1693=1695,1694
<1697=1763,1754,1735,1716,1710,1704,1698
<1698=1699
<1699=1703,1700
<1700=1702,1701
<1704=1705
<1705=1709,1706
<1706=1708,1707
<1710=1711
<1711=1715,1712
<1712=1714,1713
<1716=1717
<1717=1733,1718
<1718=1731,1729,1727,1725,1723,1721,1719
<1719=1720
<1721=1722
<1723=1724
<1725=1726
<1727=1728
<1729=1730
<1731=1732
<1733=1734
<1735=1736
<1736=1752,1737
<1737=1750,1748,1746,1744,1742,1740,1738
<1738=1739
<1740=1741
<1742=1743
<1744=1745
<1746=1747
<1748=1749
<1750=1751
<1752=1753
<1754=1759,1755
<1755=1758,1757,1756
<1759=1762,1761,1760
<1763=1764
<1764=1773,1772,1771,1765
<1765=1770,1766
<1766=1769,1768,1767
<1789=1810,1809,1790
<1790=1806,1803,1800,1797,1794,1791
<1791=1793,1792
<1794=1796,1795
<1797=1799,1798
<1800=1802,1801
<1803=1805,1804
<1806=1808,1807
<1810=1876,1867,1848,1829,1823,1817,1811
<1811=1812
<1812=1816,1813
<1813=1815,1814
<1817=1818
<1818=1822,1819
<1819=1821,1820
<1823=1824
<1824=1828,1825
<1825=1827,1826
<1829=1830
<1830=1846,1831
<1831=1844,1842,1840,1838,1836,1834,1832
<1832=1833
<1834=1835
<1836=1837
<1838=1839
<1840=1841
<1842=1843
<1844=1845
<1846=1847
<1848=1849
<1849=1865,1850
<1850=1863,1861,1859,1857,1855,1853,1851
<1851=1852
<1853=1854
<1855=1856
<1857=1858
<1859=1860
<1861=1862
<1863=1864
<1865=1866
<1867=1872,1868
<1868=1871,1870,1869
<1872=1875,1874,1873
<1876=1877
<1877=1886,1885,1884,1878
<1878=1883,1879
<1879=1882,1881,1880
<1902=1911,1910,1903
<1903=1907,1904
<1904=1906,1905
<1907=1909,1908
<1911=2032,2006,2002,1944,1919,1912
<1912=1913
<1913=1915,1914
<1915=1916
<1916=1918,1917
<1919=1936,1932,1929,1920
<1920=1921
<1921=1922
<1922=1926,1923
<1923=1925,1924
<1926=1928,1927
<1929=1931,1930
<1932=1933
<1933=1935,1934
<1936=1937
<1937=1938
<1938=1943,1942,1939
<1939=1941,1940
<1944=1994,1990,1987,1945
<1945=1973,1962,1946
<1946=1947
<1947=1958,1948
<1948=1949
<1949=1950
<1950=1952,1951
<1952=1954,1953
<1954=1955
<1955=1957,1956
<1958=1959
<1959=1961,1960
<1962=1963
<1963=1969,1964
<1964=1965
<1965=1966
<1966=1968,1967
<1969=1970
<1970=1972,1971
<1973=1974
<1974=1986,1985,1975
<1975=1984,1976
<1976=1980,1977
<1977=1979,1978
<1980=1982,1981
<1982=1983
<1987=1989,1988
<1990=1991
<1991=1993,1992
<1994=1995
<1995=1996
<1996=2001,2000,1997
<1997=1999,1998
<2002=2003
<2003=2005,2004
<2006=2024,2020,2017,2007
<2007=2008
<2008=2009
<2009=2013,2010
<2010=2011
<2011=2012
<2013=2014
<2014=2016,2015
<2017=2019,2018
<2020=2021
<2021=2023,2022
<2024=2025
<2025=2026
<2026=2031,2030,2027
<2027=2029,2028
<2032=2033
<2033=2035,2034
