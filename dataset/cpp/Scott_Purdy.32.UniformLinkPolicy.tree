>5	FunctionDef	UniformLinkPolicy 
>6	ParameterList	const std 
>7	Parameter	 
>8	Identifier	link
>9	ParameterType	Link *
>10	Parameter	 
>11	Identifier	params
>12	ParameterType	const std 
>13	CompoundStatement	 
>14	ExpressionStatement	 
>15	CallExpression	validateParameterConsistency ( )
>16	ArgumentList	 
>17	Callee	validateParameterConsistency
>18	Identifier	validateParameterConsistency
>19	ExpressionStatement	 
>20	CallExpression	populateWorkingParameters ( )
>21	ArgumentList	 
>22	Callee	populateWorkingParameters
>23	Identifier	populateWorkingParameters
>24	ExpressionStatement	 
>25	CallExpression	validateParameterDimensionality ( )
>26	ArgumentList	 
>27	Callee	validateParameterDimensionality
>28	Identifier	validateParameterDimensionality
>29	ExpressionStatement	 
>30	CallExpression	readParameters ( params )
>31	ArgumentList	params
>32	Argument	params
>33	Identifier	params
>34	Callee	readParameters
>35	Identifier	readParameters
>36	ExpressionStatement	 
>37	CallExpression	setValidParameters ( )
>38	ArgumentList	 
>39	Callee	setValidParameters
>40	Identifier	setValidParameters
>46	FunctionDef	UniformLinkPolicy 
>47	ParameterList	 
>48	CompoundStatement	 
>52	FunctionDef	UniformLinkPolicy 
>53	ParameterList	const std 
>54	Parameter	 
>55	Identifier	params
>56	ParameterType	const std 
>57	ReturnType	void
>58	CompoundStatement	 
>59	IfStatement	if ( * strictStr == \"true\" )
>60	ElseStatement	else
>61	IfStatement	if ( * strictStr == \"false\" )
>62	ElseStatement	else
>63	CompoundStatement	 
>64	ExpressionStatement	 
>65	PrimaryExpression	\"Invalid strict setting utilized with UniformLinkPolicy.\"
>66	Statement	 
>67	Statement	 
>68	Statement	 
>69	CompoundStatement	 
>70	ExpressionStatement	 
>71	AssignmentExpr	strict_ = false
>72	Identifier	false
>73	Identifier	strict_
>74	Condition	 
>75	EqualityExpression	* strictStr == \"false\"
>76	PrimaryExpression	\"false\"
>77	UnaryOp	* strictStr
>78	Identifier	strictStr
>79	UnaryOperator	*
>80	CompoundStatement	 
>81	ExpressionStatement	 
>82	AssignmentExpr	strict_ = true
>83	Identifier	true
>84	Identifier	strict_
>85	Condition	 
>86	EqualityExpression	* strictStr == \"true\"
>87	PrimaryExpression	\"true\"
>88	UnaryOp	* strictStr
>89	Identifier	strictStr
>90	UnaryOperator	*
>91	IdentifierDeclStatement	 
>92	IdentifierDecl	strictStr = paramMap . getString ( \"strict\" )
>93	AssignmentExpr	strictStr = paramMap . getString ( \"strict\" )
>94	CallExpression	paramMap . getString ( \"strict\" )
>95	ArgumentList	\"strict\"
>96	Argument	\"strict\"
>97	PrimaryExpression	\"strict\"
>98	Callee	paramMap . getString
>99	MemberAccess	paramMap . getString
>100	Identifier	getString
>101	Identifier	paramMap
>102	Identifier	strictStr
>103	Identifier	strictStr
>104	IdentifierDeclType	boost 
>105	ExpressionStatement	 
>106	RelationalExpression	populateArrayParamVector < Real64 > ( span_ , paramMap , \"span\" )
>107	RelationalExpression	Real64 > ( span_ , paramMap , \"span\" )
>108	Expression	span_ , paramMap , \"span\"
>109	Expression	paramMap , \"span\"
>110	PrimaryExpression	\"span\"
>111	Identifier	paramMap
>112	Identifier	span_
>113	Identifier	Real64
>114	Identifier	populateArrayParamVector
>115	ExpressionStatement	 
>116	RelationalExpression	populateArrayParamVector < OverhangType > ( overhangType_ , paramMap , \"overhangType\" )
>117	RelationalExpression	OverhangType > ( overhangType_ , paramMap , \"overhangType\" )
>118	Expression	overhangType_ , paramMap , \"overhangType\"
>119	Expression	paramMap , \"overhangType\"
>120	PrimaryExpression	\"overhangType\"
>121	Identifier	paramMap
>122	Identifier	overhangType_
>123	Identifier	OverhangType
>124	Identifier	populateArrayParamVector
>125	ExpressionStatement	 
>126	RelationalExpression	populateArrayParamVector < Real64 > ( overhang_ , paramMap , \"overhang\" )
>127	RelationalExpression	Real64 > ( overhang_ , paramMap , \"overhang\" )
>128	Expression	overhang_ , paramMap , \"overhang\"
>129	Expression	paramMap , \"overhang\"
>130	PrimaryExpression	\"overhang\"
>131	Identifier	paramMap
>132	Identifier	overhang_
>133	Identifier	Real64
>134	Identifier	populateArrayParamVector
>135	IfStatement	if ( * rfGranularityStr == \"nodes\" )
>136	ElseStatement	else
>137	IfStatement	if ( * rfGranularityStr == \"elements\" )
>138	ElseStatement	else
>139	CompoundStatement	 
>140	ExpressionStatement	 
>141	PrimaryExpression	\"UniformLinkPolicy.\"
>142	Statement	 
>143	Statement	 
>144	Statement	 
>145	Statement	 
>146	CompoundStatement	 
>147	ExpressionStatement	 
>148	AssignmentExpr	rfGranularity_ = elementsGranularity
>149	Identifier	elementsGranularity
>150	Identifier	rfGranularity_
>151	Condition	 
>152	EqualityExpression	* rfGranularityStr == \"elements\"
>153	PrimaryExpression	\"elements\"
>154	UnaryOp	* rfGranularityStr
>155	Identifier	rfGranularityStr
>156	UnaryOperator	*
>157	CompoundStatement	 
>158	ExpressionStatement	 
>159	AssignmentExpr	rfGranularity_ = nodesGranularity
>160	Identifier	nodesGranularity
>161	Identifier	rfGranularity_
>162	Condition	 
>163	EqualityExpression	* rfGranularityStr == \"nodes\"
>164	PrimaryExpression	\"nodes\"
>165	UnaryOp	* rfGranularityStr
>166	Identifier	rfGranularityStr
>167	UnaryOperator	*
>168	IdentifierDeclStatement	 
>169	IdentifierDecl	rfGranularityStr = paramMap . getString ( \"rfGranularity\" )
>170	AssignmentExpr	rfGranularityStr = paramMap . getString ( \"rfGranularity\" )
>171	CallExpression	paramMap . getString ( \"rfGranularity\" )
>172	ArgumentList	\"rfGranularity\"
>173	Argument	\"rfGranularity\"
>174	PrimaryExpression	\"rfGranularity\"
>175	Callee	paramMap . getString
>176	MemberAccess	paramMap . getString
>177	Identifier	getString
>178	Identifier	paramMap
>179	Identifier	rfGranularityStr
>180	Identifier	rfGranularityStr
>181	IdentifierDeclType	boost 
>182	ExpressionStatement	 
>183	RelationalExpression	populateArrayParamVector < Real64 > ( rfOverlap_ , paramMap , \"rfOverlap\" )
>184	RelationalExpression	Real64 > ( rfOverlap_ , paramMap , \"rfOverlap\" )
>185	Expression	rfOverlap_ , paramMap , \"rfOverlap\"
>186	Expression	paramMap , \"rfOverlap\"
>187	PrimaryExpression	\"rfOverlap\"
>188	Identifier	paramMap
>189	Identifier	rfOverlap_
>190	Identifier	Real64
>191	Identifier	populateArrayParamVector
>192	ExpressionStatement	 
>193	RelationalExpression	populateArrayParamVector < Real64 > ( rfSize_ , paramMap , \"rfSize\" )
>194	RelationalExpression	Real64 > ( rfSize_ , paramMap , \"rfSize\" )
>195	Expression	rfSize_ , paramMap , \"rfSize\"
>196	Expression	paramMap , \"rfSize\"
>197	PrimaryExpression	\"rfSize\"
>198	Identifier	paramMap
>199	Identifier	rfSize_
>200	Identifier	Real64
>201	Identifier	populateArrayParamVector
>202	IfStatement	if ( * mappingStr == \"in\" )
>203	ElseStatement	else
>204	IfStatement	if ( * mappingStr == \"out\" )
>205	ElseStatement	else
>206	IfStatement	if ( * mappingStr == \"full\" )
>207	ElseStatement	else
>208	CompoundStatement	 
>209	ExpressionStatement	 
>210	PrimaryExpression	\"Invalid mapping type utilized with UniformLinkPolicy.\"
>211	Statement	 
>212	Statement	 
>213	Statement	 
>214	CompoundStatement	 
>215	ExpressionStatement	 
>216	AssignmentExpr	mapping_ = fullMapping
>217	Identifier	fullMapping
>218	Identifier	mapping_
>219	Condition	 
>220	EqualityExpression	* mappingStr == \"full\"
>221	PrimaryExpression	\"full\"
>222	UnaryOp	* mappingStr
>223	Identifier	mappingStr
>224	UnaryOperator	*
>225	CompoundStatement	 
>226	ExpressionStatement	 
>227	AssignmentExpr	mapping_ = outMapping
>228	Identifier	outMapping
>229	Identifier	mapping_
>230	Condition	 
>231	EqualityExpression	* mappingStr == \"out\"
>232	PrimaryExpression	\"out\"
>233	UnaryOp	* mappingStr
>234	Identifier	mappingStr
>235	UnaryOperator	*
>236	CompoundStatement	 
>237	ExpressionStatement	 
>238	AssignmentExpr	mapping_ = inMapping
>239	Identifier	inMapping
>240	Identifier	mapping_
>241	Condition	 
>242	EqualityExpression	* mappingStr == \"in\"
>243	PrimaryExpression	\"in\"
>244	UnaryOp	* mappingStr
>245	Identifier	mappingStr
>246	UnaryOperator	*
>247	IdentifierDeclStatement	 
>248	IdentifierDecl	mappingStr = paramMap . getString ( \"mapping\" )
>249	AssignmentExpr	mappingStr = paramMap . getString ( \"mapping\" )
>250	CallExpression	paramMap . getString ( \"mapping\" )
>251	ArgumentList	\"mapping\"
>252	Argument	\"mapping\"
>253	PrimaryExpression	\"mapping\"
>254	Callee	paramMap . getString
>255	MemberAccess	paramMap . getString
>256	Identifier	getString
>257	Identifier	paramMap
>258	Identifier	mappingStr
>259	Identifier	mappingStr
>260	IdentifierDeclType	boost 
>261	IdentifierDeclStatement	 
>262	IdentifierDecl	paramMap = YAMLUtils 
>263	AssignmentExpr	paramMap = YAMLUtils 
>264	CallExpression	YAMLUtils 
>265	ArgumentList	params . c_str ( )
>266	Argument	parameters_
>267	Identifier	parameters_
>268	Argument	params . c_str ( )
>269	CallExpression	params . c_str ( )
>270	ArgumentList	 
>271	Callee	params . c_str
>272	MemberAccess	params . c_str
>273	Identifier	c_str
>274	Identifier	params
>275	Callee	YAMLUtils 
>276	Identifier	YAMLUtils 
>277	Identifier	paramMap
>278	Identifier	paramMap
>279	IdentifierDeclType	ValueMap
>305	FunctionDef	UniformLinkPolicy 
>306	ParameterList	 
>307	ReturnType	void
>308	CompoundStatement	 
>309	IfStatement	if ( parametersAreInconsistent )
>310	CompoundStatement	 
>311	ExpressionStatement	 
>312	ShiftExpression	NTA_THROW << \"The dimensionality of the parameters are inconsistent
>313	ShiftExpression	\"The dimensionality of the parameters are inconsistent
>314	ShiftExpression	\"\n\n\" << parameterDimensionalityMsg . str ( )
>315	CallExpression	parameterDimensionalityMsg . str ( )
>316	ArgumentList	 
>317	Callee	parameterDimensionalityMsg . str
>318	MemberAccess	parameterDimensionalityMsg . str
>319	Identifier	str
>320	Identifier	parameterDimensionalityMsg
>321	PrimaryExpression	\"\n\n\"
>322	PrimaryExpression	\"The dimensionality of the parameters are inconsistent
>323	Identifier	NTA_THROW
>324	Condition	 
>325	Identifier	parametersAreInconsistent
>326	ForStatement	for ( std 
>327	CompoundStatement	 
>328	ExpressionStatement	 
>329	ShiftExpression	parameterDimensionalityMsg << \"\n\"
>330	PrimaryExpression	\"\n\"
>331	Identifier	parameterDimensionalityMsg
>332	IfStatement	if ( i -> second != parameterDimensionality_ )
>333	CompoundStatement	 
>334	SwitchStatement	switch ( parameterDimensionality_ )
>335	CompoundStatement	 
>336	CompoundStatement	 
>337	BreakStatement	 
>338	IfStatement	if ( i -> second != 1 )
>339	CompoundStatement	 
>340	ExpressionStatement	 
>341	ShiftExpression	parameterDimensionalityMsg << \" <-- Inconsistent\"
>342	PrimaryExpression	\" <-- Inconsistent\"
>343	Identifier	parameterDimensionalityMsg
>344	ExpressionStatement	 
>345	AssignmentExpr	parametersAreInconsistent = true
>346	Identifier	true
>347	Identifier	parametersAreInconsistent
>348	Condition	 
>349	EqualityExpression	i -> second != 1
>350	PrimaryExpression	1
>351	PtrMemberAccess	i -> second
>352	Identifier	second
>353	Identifier	i
>354	Label	 
>355	Identifier	default
>356	CompoundStatement	 
>357	BreakStatement	 
>358	ExpressionStatement	 
>359	AssignmentExpr	parameterDimensionality_ = i -> second
>360	PtrMemberAccess	i -> second
>361	Identifier	second
>362	Identifier	i
>363	Identifier	parameterDimensionality_
>364	Label	 
>365	Label	 
>366	Condition	 
>367	Identifier	parameterDimensionality_
>368	Condition	 
>369	EqualityExpression	i -> second != parameterDimensionality_
>370	Identifier	parameterDimensionality_
>371	PtrMemberAccess	i -> second
>372	Identifier	second
>373	Identifier	i
>374	ExpressionStatement	 
>375	ConditionalExpression	i -> second == 1 ? ( parameterDimensionalityMsg << \"*\" ) 
>376	ShiftExpression	parameterDimensionalityMsg << i -> second
>377	PtrMemberAccess	i -> second
>378	Identifier	second
>379	Identifier	i
>380	Identifier	parameterDimensionalityMsg
>381	ShiftExpression	parameterDimensionalityMsg << \"*\"
>382	PrimaryExpression	\"*\"
>383	Identifier	parameterDimensionalityMsg
>384	Condition	i -> second == 1
>385	EqualityExpression	i -> second == 1
>386	PrimaryExpression	1
>387	PtrMemberAccess	i -> second
>388	Identifier	second
>389	Identifier	i
>390	ExpressionStatement	 
>391	ShiftExpression	parameterDimensionalityMsg << i -> first << \"
>392	ShiftExpression	i -> first << \"
>393	PrimaryExpression	\"
>394	PtrMemberAccess	i -> first
>395	Identifier	first
>396	Identifier	i
>397	Identifier	parameterDimensionalityMsg
>398	IncDecOp	 
>399	IncDec	++
>400	Identifier	i
>401	Condition	 
>402	EqualityExpression	i != dimensionalityMap . end ( )
>403	CallExpression	dimensionalityMap . end ( )
>404	ArgumentList	 
>405	Callee	dimensionalityMap . end
>406	MemberAccess	dimensionalityMap . end
>407	Identifier	end
>408	Identifier	dimensionalityMap
>409	Identifier	i
>410	ForInit	 
>411	IdentifierDeclStatement	std 
>412	IdentifierDecl	i = dimensionalityMap . begin ( )
>413	AssignmentExpr	i = dimensionalityMap . begin ( )
>414	CallExpression	dimensionalityMap . begin ( )
>415	ArgumentList	 
>416	Callee	dimensionalityMap . begin
>417	MemberAccess	dimensionalityMap . begin
>418	Identifier	begin
>419	Identifier	dimensionalityMap
>420	Identifier	i
>421	Identifier	i
>422	IdentifierDeclType	std 
>423	IdentifierDeclStatement	 
>424	IdentifierDecl	parametersAreInconsistent = false
>425	AssignmentExpr	parametersAreInconsistent = false
>426	Identifier	false
>427	Identifier	false
>428	Identifier	parametersAreInconsistent
>429	IdentifierDeclType	bool
>430	IdentifierDeclStatement	 
>431	IdentifierDecl	parameterDimensionalityMsg
>432	Identifier	parameterDimensionalityMsg
>433	IdentifierDeclType	std 
>434	ExpressionStatement	 
>435	AssignmentExpr	dimensionalityMap [ \"span\" ] = span_ . size ( )
>436	CallExpression	span_ . size ( )
>437	ArgumentList	 
>438	Callee	span_ . size
>439	MemberAccess	span_ . size
>440	Identifier	size
>441	Identifier	span_
>442	ArrayIndexing	dimensionalityMap [ \"span\" ]
>443	PrimaryExpression	\"span\"
>444	Identifier	dimensionalityMap
>445	ExpressionStatement	 
>446	AssignmentExpr	dimensionalityMap [ \"overhangType\" ] = overhangType_ . size ( )
>447	CallExpression	overhangType_ . size ( )
>448	ArgumentList	 
>449	Callee	overhangType_ . size
>450	MemberAccess	overhangType_ . size
>451	Identifier	size
>452	Identifier	overhangType_
>453	ArrayIndexing	dimensionalityMap [ \"overhangType\" ]
>454	PrimaryExpression	\"overhangType\"
>455	Identifier	dimensionalityMap
>456	ExpressionStatement	 
>457	AssignmentExpr	dimensionalityMap [ \"overhang\" ] = overhang_ . size ( )
>458	CallExpression	overhang_ . size ( )
>459	ArgumentList	 
>460	Callee	overhang_ . size
>461	MemberAccess	overhang_ . size
>462	Identifier	size
>463	Identifier	overhang_
>464	ArrayIndexing	dimensionalityMap [ \"overhang\" ]
>465	PrimaryExpression	\"overhang\"
>466	Identifier	dimensionalityMap
>467	ExpressionStatement	 
>468	AssignmentExpr	dimensionalityMap [ \"rfOverlap\" ] = rfOverlap_ . size ( )
>469	CallExpression	rfOverlap_ . size ( )
>470	ArgumentList	 
>471	Callee	rfOverlap_ . size
>472	MemberAccess	rfOverlap_ . size
>473	Identifier	size
>474	Identifier	rfOverlap_
>475	ArrayIndexing	dimensionalityMap [ \"rfOverlap\" ]
>476	PrimaryExpression	\"rfOverlap\"
>477	Identifier	dimensionalityMap
>478	ExpressionStatement	 
>479	AssignmentExpr	dimensionalityMap [ \"rfSize\" ] = rfSize_ . size ( )
>480	CallExpression	rfSize_ . size ( )
>481	ArgumentList	 
>482	Callee	rfSize_ . size
>483	MemberAccess	rfSize_ . size
>484	Identifier	size
>485	Identifier	rfSize_
>486	ArrayIndexing	dimensionalityMap [ \"rfSize\" ]
>487	PrimaryExpression	\"rfSize\"
>488	Identifier	dimensionalityMap
>489	IdentifierDeclStatement	 
>490	IdentifierDecl	dimensionalityMap
>491	Identifier	dimensionalityMap
>492	IdentifierDeclType	std 
>518	FunctionDef	UniformLinkPolicy 
>519	ParameterList	 
>520	ReturnType	void
>521	CompoundStatement	 
>522	ForStatement	for ( size_t i = 0 ; i < parameterDimensionality_ ; i ++ )
>523	CompoundStatement	 
>524	IfStatement	if ( workingParams_ . rfOverlap [ i ] > workingParams_ . rfSize [ i ] )
>525	CompoundStatement	 
>526	ExpressionStatement	 
>527	ShiftExpression	NTA_THROW << \"An overlap greater than the rfSize is not valid\"
>528	PrimaryExpression	\"An overlap greater than the rfSize is not valid\"
>529	Identifier	NTA_THROW
>530	Condition	 
>531	RelationalExpression	workingParams_ . rfOverlap [ i ] > workingParams_ . rfSize [ i ]
>532	ArrayIndexing	workingParams_ . rfSize [ i ]
>533	Identifier	i
>534	MemberAccess	workingParams_ . rfSize
>535	Identifier	rfSize
>536	Identifier	workingParams_
>537	ArrayIndexing	workingParams_ . rfOverlap [ i ]
>538	Identifier	i
>539	MemberAccess	workingParams_ . rfOverlap
>540	Identifier	rfOverlap
>541	Identifier	workingParams_
>542	IfStatement	if ( workingParams_ . rfOverlap [ i ] == workingParams_ . rfSize [ i ] )
>543	CompoundStatement	 
>544	ExpressionStatement	 
>545	PrimaryExpression	\" instead\"
>546	Statement	 
>547	Statement	 
>548	Statement	 
>549	Condition	 
>550	EqualityExpression	workingParams_ . rfOverlap [ i ] == workingParams_ . rfSize [ i ]
>551	ArrayIndexing	workingParams_ . rfSize [ i ]
>552	Identifier	i
>553	MemberAccess	workingParams_ . rfSize
>554	Identifier	rfSize
>555	Identifier	workingParams_
>556	ArrayIndexing	workingParams_ . rfOverlap [ i ]
>557	Identifier	i
>558	MemberAccess	workingParams_ . rfOverlap
>559	Identifier	rfOverlap
>560	Identifier	workingParams_
>561	IfStatement	if ( strict_ )
>562	CompoundStatement	 
>563	IfStatement	if ( ! ( workingParams_ . span [ i ] . isNaturalNumber ( ) ) )
>564	CompoundStatement	 
>565	ExpressionStatement	 
>566	PrimaryExpression	\"strict, the specified span must be a natural number\"
>567	Statement	 
>568	Statement	 
>569	Statement	 
>570	Condition	 
>571	UnaryOp	! ( workingParams_ . span [ i ] . isNaturalNumber ( ) )
>572	CallExpression	workingParams_ . span [ i ] . isNaturalNumber ( )
>573	ArgumentList	 
>574	Callee	workingParams_ . span [ i ] . isNaturalNumber
>575	MemberAccess	workingParams_ . span [ i ] . isNaturalNumber
>576	Identifier	isNaturalNumber
>577	ArrayIndexing	workingParams_ . span [ i ]
>578	Identifier	i
>579	MemberAccess	workingParams_ . span
>580	Identifier	span
>581	Identifier	workingParams_
>582	UnaryOperator	!
>583	Condition	 
>584	Identifier	strict_
>585	IncDecOp	 
>586	IncDec	++
>587	Identifier	i
>588	Condition	 
>589	RelationalExpression	i < parameterDimensionality_
>590	Identifier	parameterDimensionality_
>591	Identifier	i
>592	ForInit	 
>593	IdentifierDeclStatement	size_t i = 0 ;
>594	IdentifierDecl	i = 0
>595	AssignmentExpr	i = 0
>596	PrimaryExpression	0
>597	Identifier	i
>598	Identifier	i
>599	IdentifierDeclType	size_t
>616	FunctionDef	UniformLinkPolicy 
>617	ParameterList	 
>618	ReturnType	void
>619	CompoundStatement	 
>620	ForStatement	for ( size_t i = 0 ; i < overhangType_ . size ( ) ; i ++ )
>621	CompoundStatement	 
>622	ExpressionStatement	 
>623	CallExpression	workingParams_ . overhangType . push_back ( overhangType_ [ i ] )
>624	ArgumentList	overhangType_ [ i ]
>625	Argument	overhangType_ [ i ]
>626	ArrayIndexing	overhangType_ [ i ]
>627	Identifier	i
>628	Identifier	overhangType_
>629	Callee	workingParams_ . overhangType . push_back
>630	MemberAccess	workingParams_ . overhangType . push_back
>631	Identifier	push_back
>632	MemberAccess	workingParams_ . overhangType
>633	Identifier	overhangType
>634	Identifier	workingParams_
>635	IncDecOp	 
>636	IncDec	++
>637	Identifier	i
>638	Condition	 
>639	RelationalExpression	i < overhangType_ . size ( )
>640	CallExpression	overhangType_ . size ( )
>641	ArgumentList	 
>642	Callee	overhangType_ . size
>643	MemberAccess	overhangType_ . size
>644	Identifier	size
>645	Identifier	overhangType_
>646	Identifier	i
>647	ForInit	 
>648	IdentifierDeclStatement	size_t i = 0 ;
>649	IdentifierDecl	i = 0
>650	AssignmentExpr	i = 0
>651	PrimaryExpression	0
>652	Identifier	i
>653	Identifier	i
>654	IdentifierDeclType	size_t
>655	ExpressionStatement	 
>656	CallExpression	NTA_CHECK ( workingParams_ . overhangType . size ( ) == 0 )
>657	ArgumentList	workingParams_ . overhangType . size ( ) == 0
>658	Argument	workingParams_ . overhangType . size ( ) == 0
>659	EqualityExpression	workingParams_ . overhangType . size ( ) == 0
>660	PrimaryExpression	0
>661	CallExpression	workingParams_ . overhangType . size ( )
>662	ArgumentList	 
>663	Callee	workingParams_ . overhangType . size
>664	MemberAccess	workingParams_ . overhangType . size
>665	Identifier	size
>666	MemberAccess	workingParams_ . overhangType
>667	Identifier	overhangType
>668	Identifier	workingParams_
>669	Callee	NTA_CHECK
>670	Identifier	NTA_CHECK
>671	ExpressionStatement	 
>672	CallExpression	copyRealVecToFractionVec ( span_ , workingParams_ . span )
>673	ArgumentList	span_
>674	Argument	workingParams_ . span
>675	MemberAccess	workingParams_ . span
>676	Identifier	span
>677	Identifier	workingParams_
>678	Argument	span_
>679	Identifier	span_
>680	Callee	copyRealVecToFractionVec
>681	Identifier	copyRealVecToFractionVec
>682	ExpressionStatement	 
>683	CallExpression	copyRealVecToFractionVec ( overhang_ , workingParams_ . overhang )
>684	ArgumentList	overhang_
>685	Argument	workingParams_ . overhang
>686	MemberAccess	workingParams_ . overhang
>687	Identifier	overhang
>688	Identifier	workingParams_
>689	Argument	overhang_
>690	Identifier	overhang_
>691	Callee	copyRealVecToFractionVec
>692	Identifier	copyRealVecToFractionVec
>693	ExpressionStatement	 
>694	CallExpression	copyRealVecToFractionVec ( rfOverlap_ , workingParams_ . rfOverlap )
>695	ArgumentList	rfOverlap_
>696	Argument	workingParams_ . rfOverlap
>697	MemberAccess	workingParams_ . rfOverlap
>698	Identifier	rfOverlap
>699	Identifier	workingParams_
>700	Argument	rfOverlap_
>701	Identifier	rfOverlap_
>702	Callee	copyRealVecToFractionVec
>703	Identifier	copyRealVecToFractionVec
>704	ExpressionStatement	 
>705	CallExpression	copyRealVecToFractionVec ( rfSize_ , workingParams_ . rfSize )
>706	ArgumentList	rfSize_
>707	Argument	workingParams_ . rfSize
>708	MemberAccess	workingParams_ . rfSize
>709	Identifier	rfSize
>710	Identifier	workingParams_
>711	Argument	rfSize_
>712	Identifier	rfSize_
>713	Callee	copyRealVecToFractionVec
>714	Identifier	copyRealVecToFractionVec
>734	FunctionDef	UniformLinkPolicy 
>735	ParameterList	std 
>736	Parameter	 
>737	Identifier	paramName
>738	ParameterType	const std 
>739	Parameter	 
>740	Identifier	paramMap
>741	ParameterType	const ValueMap &
>742	Parameter	 
>743	Identifier	vec
>744	ParameterType	std 
>745	ReturnType	void
>746	CompoundStatement	 
>747	ForStatement	for ( size_t i = 0 ; i < arrayVal -> getCount ( ) ; i ++ )
>748	CompoundStatement	 
>749	ExpressionStatement	 
>750	CallExpression	vec . push_back ( buf [ i ] )
>751	ArgumentList	buf [ i ]
>752	Argument	buf [ i ]
>753	ArrayIndexing	buf [ i ]
>754	Identifier	i
>755	Identifier	buf
>756	Callee	vec . push_back
>757	MemberAccess	vec . push_back
>758	Identifier	push_back
>759	Identifier	vec
>760	IncDecOp	 
>761	IncDec	++
>762	Identifier	i
>763	Condition	 
>764	RelationalExpression	i < arrayVal -> getCount ( )
>765	CallExpression	arrayVal -> getCount ( )
>766	ArgumentList	 
>767	Callee	arrayVal -> getCount
>768	PtrMemberAccess	arrayVal -> getCount
>769	Identifier	getCount
>770	Identifier	arrayVal
>771	Identifier	i
>772	ForInit	 
>773	IdentifierDeclStatement	size_t i = 0 ;
>774	IdentifierDecl	i = 0
>775	AssignmentExpr	i = 0
>776	PrimaryExpression	0
>777	Identifier	i
>778	Identifier	i
>779	IdentifierDeclType	size_t
>780	ExpressionStatement	 
>781	CallExpression	vec . reserve ( arrayVal -> getCount ( ) )
>782	ArgumentList	arrayVal -> getCount ( )
>783	Argument	arrayVal -> getCount ( )
>784	CallExpression	arrayVal -> getCount ( )
>785	ArgumentList	 
>786	Callee	arrayVal -> getCount
>787	PtrMemberAccess	arrayVal -> getCount
>788	Identifier	getCount
>789	Identifier	arrayVal
>790	Callee	vec . reserve
>791	MemberAccess	vec . reserve
>792	Identifier	reserve
>793	Identifier	vec
>794	IdentifierDeclStatement	 
>795	IdentifierDecl	* buf = ( T * ) arrayVal -> getBuffer ( )
>796	AssignmentExpr	* buf = ( T * ) arrayVal -> getBuffer ( )
>797	CastExpression	( T * ) arrayVal -> getBuffer ( )
>798	CallExpression	arrayVal -> getBuffer ( )
>799	ArgumentList	 
>800	Callee	arrayVal -> getBuffer
>801	PtrMemberAccess	arrayVal -> getBuffer
>802	Identifier	getBuffer
>803	Identifier	arrayVal
>804	CastTarget	T *
>805	Identifier	buf
>806	Identifier	buf
>807	IdentifierDeclType	T *
>808	IdentifierDeclStatement	 
>809	IdentifierDecl	arrayVal = paramMap . getArray ( paramName )
>810	AssignmentExpr	arrayVal = paramMap . getArray ( paramName )
>811	CallExpression	paramMap . getArray ( paramName )
>812	ArgumentList	paramName
>813	Argument	paramName
>814	Identifier	paramName
>815	Callee	paramMap . getArray
>816	MemberAccess	paramMap . getArray
>817	Identifier	getArray
>818	Identifier	paramMap
>819	Identifier	arrayVal
>820	Identifier	arrayVal
>821	IdentifierDeclType	boost 
>822	ExpressionStatement	 
>823	CallExpression	NTA_CHECK ( vec . size ( ) == 0 )
>824	ArgumentList	vec . size ( ) == 0
>825	Argument	vec . size ( ) == 0
>826	EqualityExpression	vec . size ( ) == 0
>827	PrimaryExpression	0
>828	CallExpression	vec . size ( )
>829	ArgumentList	 
>830	Callee	vec . size
>831	MemberAccess	vec . size
>832	Identifier	size
>833	Identifier	vec
>834	Callee	NTA_CHECK
>835	Identifier	NTA_CHECK
>852	FunctionDef	UniformLinkPolicy 
>853	ParameterList	const std 
>854	Parameter	 
>855	Identifier	destVec
>856	ParameterType	DefaultValuedVector < Fraction > &
>857	Parameter	 
>858	Identifier	sourceVec
>859	ParameterType	const std 
>860	ReturnType	void
>861	CompoundStatement	 
>862	ForStatement	for ( size_t i = 0 ; i < sourceVec . size ( ) ; i ++ )
>863	CompoundStatement	 
>864	ExpressionStatement	 
>865	CallExpression	destVec . push_back ( Fraction 
>866	ArgumentList	Fraction 
>867	Argument	Fraction 
>868	CallExpression	Fraction 
>869	ArgumentList	sourceVec [ i ]
>870	Argument	sourceVec [ i ]
>871	ArrayIndexing	sourceVec [ i ]
>872	Identifier	i
>873	Identifier	sourceVec
>874	Callee	Fraction 
>875	Identifier	Fraction 
>876	Callee	destVec . push_back
>877	MemberAccess	destVec . push_back
>878	Identifier	push_back
>879	Identifier	destVec
>880	IncDecOp	 
>881	IncDec	++
>882	Identifier	i
>883	Condition	 
>884	RelationalExpression	i < sourceVec . size ( )
>885	CallExpression	sourceVec . size ( )
>886	ArgumentList	 
>887	Callee	sourceVec . size
>888	MemberAccess	sourceVec . size
>889	Identifier	size
>890	Identifier	sourceVec
>891	Identifier	i
>892	ForInit	 
>893	IdentifierDeclStatement	size_t i = 0 ;
>894	IdentifierDecl	i = 0
>895	AssignmentExpr	i = 0
>896	PrimaryExpression	0
>897	Identifier	i
>898	Identifier	i
>899	IdentifierDeclType	size_t
>900	ExpressionStatement	 
>901	CallExpression	NTA_CHECK ( destVec . size ( ) == 0 )
>902	ArgumentList	destVec . size ( ) == 0
>903	Argument	destVec . size ( ) == 0
>904	EqualityExpression	destVec . size ( ) == 0
>905	PrimaryExpression	0
>906	CallExpression	destVec . size ( )
>907	ArgumentList	 
>908	Callee	destVec . size
>909	MemberAccess	destVec . size
>910	Identifier	size
>911	Identifier	destVec
>912	Callee	NTA_CHECK
>913	Identifier	NTA_CHECK
>925	FunctionDef	UniformLinkPolicy 
>926	ParameterList	 
>927	ReturnType	void
>928	CompoundStatement	 
>929	ExpressionStatement	 
>930	Statement	 
>931	Statement	 
>932	Statement	 
>933	Statement	 
>934	Statement	 
>935	Statement	 
>936	Statement	 
>937	Statement	 
>938	Statement	 
>939	Statement	 
>940	Statement	 
>941	Statement	 
>942	Statement	 
>943	Statement	 
>944	Statement	 
>945	Statement	 
>946	Statement	 
>947	Statement	 
>948	Statement	 
>949	Statement	 
>950	Statement	 
>951	Statement	 
>952	Statement	 
>953	Statement	 
>954	ExpressionStatement	 
>955	CallExpression	parameters_ . add ( \"span\" , ParameterSpec ( \"Span group size\" , NTA_BasicType_Real64 , 0 , \"interval
>956	ArgumentList	\"span\"
>957	Argument	ParameterSpec ( \"Span group size\" , NTA_BasicType_Real64 , 0 , \"interval
>958	CallExpression	ParameterSpec ( \"Span group size\" , NTA_BasicType_Real64 , 0 , \"interval
>959	ArgumentList	\"Span group size\"
>960	Argument	ParameterSpec 
>961	Identifier	ParameterSpec 
>962	Argument	\"[0]\"
>963	PrimaryExpression	\"[0]\"
>964	Argument	\"interval
>965	PrimaryExpression	\"interval
>966	Argument	0
>967	PrimaryExpression	0
>968	Argument	NTA_BasicType_Real64
>969	Identifier	NTA_BasicType_Real64
>970	Argument	\"Span group size\"
>971	PrimaryExpression	\"Span group size\"
>972	Callee	ParameterSpec
>973	Identifier	ParameterSpec
>974	Argument	\"span\"
>975	PrimaryExpression	\"span\"
>976	Callee	parameters_ . add
>977	MemberAccess	parameters_ . add
>978	Identifier	add
>979	Identifier	parameters_
>980	ExpressionStatement	 
>981	Statement	 
>982	Statement	 
>983	Statement	 
>984	Statement	 
>985	Statement	 
>986	Statement	 
>987	Statement	 
>988	Statement	 
>989	Statement	 
>990	Statement	 
>991	Statement	 
>992	Statement	 
>993	Statement	 
>994	Statement	 
>995	Statement	 
>996	Statement	 
>997	Statement	 
>998	Statement	 
>999	Statement	 
>1000	Statement	 
>1001	Statement	 
>1002	Statement	 
>1003	Statement	 
>1004	Statement	 
>1005	ExpressionStatement	 
>1006	CallExpression	parameters_ . add ( \"overhang\" , ParameterSpec ( \"Region Overhang\" , NTA_BasicType_Real64 , 0 , \"interval
>1007	ArgumentList	\"overhang\"
>1008	Argument	ParameterSpec ( \"Region Overhang\" , NTA_BasicType_Real64 , 0 , \"interval
>1009	CallExpression	ParameterSpec ( \"Region Overhang\" , NTA_BasicType_Real64 , 0 , \"interval
>1010	ArgumentList	\"Region Overhang\"
>1011	Argument	ParameterSpec 
>1012	Identifier	ParameterSpec 
>1013	Argument	\"[0]\"
>1014	PrimaryExpression	\"[0]\"
>1015	Argument	\"interval
>1016	PrimaryExpression	\"interval
>1017	Argument	0
>1018	PrimaryExpression	0
>1019	Argument	NTA_BasicType_Real64
>1020	Identifier	NTA_BasicType_Real64
>1021	Argument	\"Region Overhang\"
>1022	PrimaryExpression	\"Region Overhang\"
>1023	Callee	ParameterSpec
>1024	Identifier	ParameterSpec
>1025	Argument	\"overhang\"
>1026	PrimaryExpression	\"overhang\"
>1027	Callee	parameters_ . add
>1028	MemberAccess	parameters_ . add
>1029	Identifier	add
>1030	Identifier	parameters_
>1031	ExpressionStatement	 
>1032	Statement	 
>1033	Statement	 
>1034	Statement	 
>1035	Statement	 
>1036	Statement	 
>1037	Statement	 
>1038	Statement	 
>1039	Statement	 
>1040	Statement	 
>1041	Statement	 
>1042	Statement	 
>1043	Statement	 
>1044	Statement	 
>1045	Statement	 
>1046	Statement	 
>1047	Statement	 
>1048	Statement	 
>1049	Statement	 
>1050	Statement	 
>1051	Statement	 
>1052	Statement	 
>1053	Statement	 
>1054	Statement	 
>1055	Statement	 
>1056	ExpressionStatement	 
>1057	CallExpression	parameters_ . add ( \"rfOverlap\" , ParameterSpec ( \"Receptive Field Overlap\" , NTA_BasicType_Real64 , 0 , \"interval
>1058	ArgumentList	\"rfOverlap\"
>1059	Argument	ParameterSpec ( \"Receptive Field Overlap\" , NTA_BasicType_Real64 , 0 , \"interval
>1060	CallExpression	ParameterSpec ( \"Receptive Field Overlap\" , NTA_BasicType_Real64 , 0 , \"interval
>1061	ArgumentList	\"Receptive Field Overlap\"
>1062	Argument	ParameterSpec 
>1063	Identifier	ParameterSpec 
>1064	Argument	\"[0]\"
>1065	PrimaryExpression	\"[0]\"
>1066	Argument	\"interval
>1067	PrimaryExpression	\"interval
>1068	Argument	0
>1069	PrimaryExpression	0
>1070	Argument	NTA_BasicType_Real64
>1071	Identifier	NTA_BasicType_Real64
>1072	Argument	\"Receptive Field Overlap\"
>1073	PrimaryExpression	\"Receptive Field Overlap\"
>1074	Callee	ParameterSpec
>1075	Identifier	ParameterSpec
>1076	Argument	\"rfOverlap\"
>1077	PrimaryExpression	\"rfOverlap\"
>1078	Callee	parameters_ . add
>1079	MemberAccess	parameters_ . add
>1080	Identifier	add
>1081	Identifier	parameters_
>1082	ExpressionStatement	 
>1083	CallExpression	parameters_ . add ( \"rfSize\" , ParameterSpec ( \"Receptive Field Size\" , NTA_BasicType_Real64 , 0 , \"interval
>1084	ArgumentList	\"rfSize\"
>1085	Argument	ParameterSpec ( \"Receptive Field Size\" , NTA_BasicType_Real64 , 0 , \"interval
>1086	CallExpression	ParameterSpec ( \"Receptive Field Size\" , NTA_BasicType_Real64 , 0 , \"interval
>1087	ArgumentList	\"Receptive Field Size\"
>1088	Argument	ParameterSpec 
>1089	Identifier	ParameterSpec 
>1090	Argument	\"[1]\"
>1091	PrimaryExpression	\"[1]\"
>1092	Argument	\"interval
>1093	PrimaryExpression	\"interval
>1094	Argument	0
>1095	PrimaryExpression	0
>1096	Argument	NTA_BasicType_Real64
>1097	Identifier	NTA_BasicType_Real64
>1098	Argument	\"Receptive Field Size\"
>1099	PrimaryExpression	\"Receptive Field Size\"
>1100	Callee	ParameterSpec
>1101	Identifier	ParameterSpec
>1102	Argument	\"rfSize\"
>1103	PrimaryExpression	\"rfSize\"
>1104	Callee	parameters_ . add
>1105	MemberAccess	parameters_ . add
>1106	Identifier	add
>1107	Identifier	parameters_
>1108	ExpressionStatement	 
>1109	Statement	 
>1110	Statement	 
>1111	Statement	 
>1112	Statement	 
>1113	Statement	 
>1114	Statement	 
>1115	Statement	 
>1116	Statement	 
>1117	Statement	 
>1118	Statement	 
>1119	Statement	 
>1120	Statement	 
>1121	Statement	 
>1122	Statement	 
>1123	Statement	 
>1124	Statement	 
>1125	Statement	 
>1126	Statement	 
>1127	Statement	 
>1128	Statement	 
>1129	Statement	 
>1130	Statement	 
>1131	Statement	 
>1132	Statement	 
>1140	FunctionDef	UniformLinkPolicy 
>1141	ParameterList	Dimensions & specifiedDims
>1142	Parameter	 
>1143	Identifier	specifiedDims
>1144	ParameterType	Dimensions &
>1145	ReturnType	void
>1146	CompoundStatement	 
>1147	ExpressionStatement	 
>1148	AssignmentExpr	destDimensions_ = inducedDims
>1149	Identifier	inducedDims
>1150	Identifier	destDimensions_
>1151	ExpressionStatement	 
>1152	AssignmentExpr	srcDimensions_ = dims
>1153	Identifier	dims
>1154	Identifier	srcDimensions_
>1155	SwitchStatement	switch ( mapping_ )
>1156	CompoundStatement	 
>1157	CompoundStatement	 
>1158	BreakStatement	 
>1159	ExpressionStatement	 
>1160	PrimaryExpression	\"implemented.\"
>1161	Statement	 
>1162	Statement	 
>1163	Statement	 
>1164	Label	 
>1165	Identifier	default
>1166	CompoundStatement	 
>1167	BreakStatement	 
>1168	IfStatement	if ( strict_ )
>1169	ElseStatement	else
>1170	CompoundStatement	 
>1171	ForStatement	for ( size_t i = 0 ; i < dims . size ( ) ; i ++ )
>1172	CompoundStatement	 
>1173	ExpressionStatement	 
>1174	CallExpression	inducedDims . push_back ( inducedDim . getNumerator ( ) / inducedDim . getDenominator ( ) )
>1175	ArgumentList	inducedDim . getNumerator ( ) / inducedDim . getDenominator ( )
>1176	Argument	inducedDim . getNumerator ( ) / inducedDim . getDenominator ( )
>1177	MultiplicativeExpression	inducedDim . getNumerator ( ) / inducedDim . getDenominator ( )
>1178	CallExpression	inducedDim . getDenominator ( )
>1179	ArgumentList	 
>1180	Callee	inducedDim . getDenominator
>1181	MemberAccess	inducedDim . getDenominator
>1182	Identifier	getDenominator
>1183	Identifier	inducedDim
>1184	CallExpression	inducedDim . getNumerator ( )
>1185	ArgumentList	 
>1186	Callee	inducedDim . getNumerator
>1187	MemberAccess	inducedDim . getNumerator
>1188	Identifier	getNumerator
>1189	Identifier	inducedDim
>1190	Callee	inducedDims . push_back
>1191	MemberAccess	inducedDims . push_back
>1192	Identifier	push_back
>1193	Identifier	inducedDims
>1194	IfStatement	if ( workingParams_ . span [ i ] . getNumerator ( ) == 0 )
>1195	ElseStatement	else
>1196	CompoundStatement	 
>1197	ExpressionStatement	 
>1198	AssignmentExpr	inducedDim = Fraction ( numWholeSpans ) * nodesPerSpan
>1199	MultiplicativeExpression	Fraction ( numWholeSpans ) * nodesPerSpan
>1200	Identifier	nodesPerSpan
>1201	CallExpression	Fraction ( numWholeSpans )
>1202	ArgumentList	numWholeSpans
>1203	Argument	numWholeSpans
>1204	Identifier	numWholeSpans
>1205	Callee	Fraction
>1206	Identifier	Fraction
>1207	Identifier	inducedDim
>1208	IdentifierDeclStatement	 
>1209	IdentifierDecl	numWholeSpans = numSpans . getNumerator ( ) / numSpans . getDenominator ( )
>1210	AssignmentExpr	numWholeSpans = numSpans . getNumerator ( ) / numSpans . getDenominator ( )
>1211	MultiplicativeExpression	numSpans . getNumerator ( ) / numSpans . getDenominator ( )
>1212	CallExpression	numSpans . getDenominator ( )
>1213	ArgumentList	 
>1214	Callee	numSpans . getDenominator
>1215	MemberAccess	numSpans . getDenominator
>1216	Identifier	getDenominator
>1217	Identifier	numSpans
>1218	CallExpression	numSpans . getNumerator ( )
>1219	ArgumentList	 
>1220	Callee	numSpans . getNumerator
>1221	MemberAccess	numSpans . getNumerator
>1222	Identifier	getNumerator
>1223	Identifier	numSpans
>1224	Identifier	numWholeSpans
>1225	Identifier	numWholeSpans
>1226	IdentifierDeclType	int
>1227	IdentifierDeclStatement	 
>1228	IdentifierDecl	nodesPerSpan = Fraction ( 1 ) + ( workingParams_ . span [ i ] - workingParams_ . rfSize [ i ] ) / ( workingParams_ \
>1229	AssignmentExpr	nodesPerSpan = Fraction ( 1 ) + ( workingParams_ . span [ i ] - workingParams_ . rfSize [ i ] ) / ( workingParams_ \
>1230	AdditiveExpression	Fraction ( 1 ) + ( workingParams_ . span [ i ] - workingParams_ . rfSize [ i ] ) / ( workingParams_ . \
>1231	MultiplicativeExpression	( workingParams_ . span [ i ] - workingParams_ . rfSize [ i ] ) / ( workingParams_ . rfSize [ i ] - workingParams_ \
>1232	AdditiveExpression	workingParams_ . rfSize [ i ] - workingParams_ . rfOverlap [ i ]
>1233	ArrayIndexing	workingParams_ . rfOverlap [ i ]
>1234	Identifier	i
>1235	MemberAccess	workingParams_ . rfOverlap
>1236	Identifier	rfOverlap
>1237	Identifier	workingParams_
>1238	ArrayIndexing	workingParams_ . rfSize [ i ]
>1239	Identifier	i
>1240	MemberAccess	workingParams_ . rfSize
>1241	Identifier	rfSize
>1242	Identifier	workingParams_
>1243	AdditiveExpression	workingParams_ . span [ i ] - workingParams_ . rfSize [ i ]
>1244	ArrayIndexing	workingParams_ . rfSize [ i ]
>1245	Identifier	i
>1246	MemberAccess	workingParams_ . rfSize
>1247	Identifier	rfSize
>1248	Identifier	workingParams_
>1249	ArrayIndexing	workingParams_ . span [ i ]
>1250	Identifier	i
>1251	MemberAccess	workingParams_ . span
>1252	Identifier	span
>1253	Identifier	workingParams_
>1254	CallExpression	Fraction ( 1 )
>1255	ArgumentList	1
>1256	Argument	1
>1257	PrimaryExpression	1
>1258	Callee	Fraction
>1259	Identifier	Fraction
>1260	Identifier	nodesPerSpan
>1261	Identifier	nodesPerSpan
>1262	IdentifierDeclType	Fraction
>1263	IdentifierDeclStatement	 
>1264	IdentifierDecl	numSpans = ( Fraction ( dims [ i ] ) + workingParams_ . overhang [ i ] * 2 ) / workingParams_ . span [ i ]
>1265	AssignmentExpr	numSpans = ( Fraction ( dims [ i ] ) + workingParams_ . overhang [ i ] * 2 ) / workingParams_ . span [ \
>1266	MultiplicativeExpression	( Fraction ( dims [ i ] ) + workingParams_ . overhang [ i ] * 2 ) / workingParams_ . span [ i ]
>1267	ArrayIndexing	workingParams_ . span [ i ]
>1268	Identifier	i
>1269	MemberAccess	workingParams_ . span
>1270	Identifier	span
>1271	Identifier	workingParams_
>1272	AdditiveExpression	Fraction ( dims [ i ] ) + workingParams_ . overhang [ i ] * 2
>1273	MultiplicativeExpression	workingParams_ . overhang [ i ] * 2
>1274	PrimaryExpression	2
>1275	ArrayIndexing	workingParams_ . overhang [ i ]
>1276	Identifier	i
>1277	MemberAccess	workingParams_ . overhang
>1278	Identifier	overhang
>1279	Identifier	workingParams_
>1280	CallExpression	Fraction ( dims [ i ] )
>1281	ArgumentList	dims [ i ]
>1282	Argument	dims [ i ]
>1283	ArrayIndexing	dims [ i ]
>1284	Identifier	i
>1285	Identifier	dims
>1286	Callee	Fraction
>1287	Identifier	Fraction
>1288	Identifier	numSpans
>1289	Identifier	numSpans
>1290	IdentifierDeclType	Fraction
>1291	CompoundStatement	 
>1292	ExpressionStatement	 
>1293	AssignmentExpr	inducedDim = ( Fraction ( dims [ i ] ) + workingParams_ . overhang [ i ] * 2 ) / ( workingParams_ . rfSize [ \
>1294	MultiplicativeExpression	( Fraction ( dims [ i ] ) + workingParams_ . overhang [ i ] * 2 ) / ( workingParams_ . rfSize [ i ] - \
>1295	AdditiveExpression	workingParams_ . rfSize [ i ] - workingParams_ . rfOverlap [ i ]
>1296	ArrayIndexing	workingParams_ . rfOverlap [ i ]
>1297	Identifier	i
>1298	MemberAccess	workingParams_ . rfOverlap
>1299	Identifier	rfOverlap
>1300	Identifier	workingParams_
>1301	ArrayIndexing	workingParams_ . rfSize [ i ]
>1302	Identifier	i
>1303	MemberAccess	workingParams_ . rfSize
>1304	Identifier	rfSize
>1305	Identifier	workingParams_
>1306	AdditiveExpression	Fraction ( dims [ i ] ) + workingParams_ . overhang [ i ] * 2
>1307	MultiplicativeExpression	workingParams_ . overhang [ i ] * 2
>1308	PrimaryExpression	2
>1309	ArrayIndexing	workingParams_ . overhang [ i ]
>1310	Identifier	i
>1311	MemberAccess	workingParams_ . overhang
>1312	Identifier	overhang
>1313	Identifier	workingParams_
>1314	CallExpression	Fraction ( dims [ i ] )
>1315	ArgumentList	dims [ i ]
>1316	Argument	dims [ i ]
>1317	ArrayIndexing	dims [ i ]
>1318	Identifier	i
>1319	Identifier	dims
>1320	Callee	Fraction
>1321	Identifier	Fraction
>1322	Identifier	inducedDim
>1323	Condition	 
>1324	EqualityExpression	workingParams_ . span [ i ] . getNumerator ( ) == 0
>1325	PrimaryExpression	0
>1326	CallExpression	workingParams_ . span [ i ] . getNumerator ( )
>1327	ArgumentList	 
>1328	Callee	workingParams_ . span [ i ] . getNumerator
>1329	MemberAccess	workingParams_ . span [ i ] . getNumerator
>1330	Identifier	getNumerator
>1331	ArrayIndexing	workingParams_ . span [ i ]
>1332	Identifier	i
>1333	MemberAccess	workingParams_ . span
>1334	Identifier	span
>1335	Identifier	workingParams_
>1336	IdentifierDeclStatement	 
>1337	IdentifierDecl	inducedDim
>1338	Identifier	inducedDim
>1339	IdentifierDeclType	Fraction
>1340	IncDecOp	 
>1341	IncDec	++
>1342	Identifier	i
>1343	Condition	 
>1344	RelationalExpression	i < dims . size ( )
>1345	CallExpression	dims . size ( )
>1346	ArgumentList	 
>1347	Callee	dims . size
>1348	MemberAccess	dims . size
>1349	Identifier	size
>1350	Identifier	dims
>1351	Identifier	i
>1352	ForInit	 
>1353	IdentifierDeclStatement	size_t i = 0 ;
>1354	IdentifierDecl	i = 0
>1355	AssignmentExpr	i = 0
>1356	PrimaryExpression	0
>1357	Identifier	i
>1358	Identifier	i
>1359	IdentifierDeclType	size_t
>1360	CompoundStatement	 
>1361	ForStatement	for ( size_t i = 0 ; i < dims . size ( ) ; i ++ )
>1362	CompoundStatement	 
>1363	IfStatement	if ( workingParams_ . span [ i ] . getNumerator ( ) == 0 )
>1364	ElseStatement	else
>1365	CompoundStatement	 
>1366	ExpressionStatement	 
>1367	CallExpression	inducedDims . push_back ( inducedDim . getNumerator ( ) )
>1368	ArgumentList	inducedDim . getNumerator ( )
>1369	Argument	inducedDim . getNumerator ( )
>1370	CallExpression	inducedDim . getNumerator ( )
>1371	ArgumentList	 
>1372	Callee	inducedDim . getNumerator
>1373	MemberAccess	inducedDim . getNumerator
>1374	Identifier	getNumerator
>1375	Identifier	inducedDim
>1376	Callee	inducedDims . push_back
>1377	MemberAccess	inducedDims . push_back
>1378	Identifier	push_back
>1379	Identifier	inducedDims
>1380	ExpressionStatement	 
>1381	CallExpression	inducedDim . reduce ( )
>1382	ArgumentList	 
>1383	Callee	inducedDim . reduce
>1384	MemberAccess	inducedDim . reduce
>1385	Identifier	reduce
>1386	Identifier	inducedDim
>1387	ExpressionStatement	 
>1388	CallExpression	NTA_CHECK ( inducedDim . isNaturalNumber ( ) )
>1389	ArgumentList	inducedDim . isNaturalNumber ( )
>1390	Argument	inducedDim . isNaturalNumber ( )
>1391	CallExpression	inducedDim . isNaturalNumber ( )
>1392	ArgumentList	 
>1393	Callee	inducedDim . isNaturalNumber
>1394	MemberAccess	inducedDim . isNaturalNumber
>1395	Identifier	isNaturalNumber
>1396	Identifier	inducedDim
>1397	Callee	NTA_CHECK
>1398	Identifier	NTA_CHECK
>1399	IdentifierDeclStatement	 
>1400	IdentifierDecl	inducedDim = ( workingParams_ . span [ i ] - workingParams_ . rfOverlap [ i ] ) / ( workingParams_ . rfSize [ i ] \
>1401	AssignmentExpr	inducedDim = ( workingParams_ . span [ i ] - workingParams_ . rfOverlap [ i ] ) / ( workingParams_ . \
>1402	MultiplicativeExpression	( workingParams_ . span [ i ] - workingParams_ . rfOverlap [ i ] ) / ( workingParams_ . rfSize [ i ] \
>1403	MultiplicativeExpression	( workingParams_ . rfSize [ i ] - workingParams_ . rfOverlap [ i ] ) * ( Fraction ( dims [ i ] ) + workingParams_ \
>1404	MultiplicativeExpression	( Fraction ( dims [ i ] ) + workingParams_ . overhang [ i ] * 2 ) / workingParams_ . span [ i ]
>1405	ArrayIndexing	workingParams_ . span [ i ]
>1406	Identifier	i
>1407	MemberAccess	workingParams_ . span
>1408	Identifier	span
>1409	Identifier	workingParams_
>1410	AdditiveExpression	Fraction ( dims [ i ] ) + workingParams_ . overhang [ i ] * 2
>1411	MultiplicativeExpression	workingParams_ . overhang [ i ] * 2
>1412	PrimaryExpression	2
>1413	ArrayIndexing	workingParams_ . overhang [ i ]
>1414	Identifier	i
>1415	MemberAccess	workingParams_ . overhang
>1416	Identifier	overhang
>1417	Identifier	workingParams_
>1418	CallExpression	Fraction ( dims [ i ] )
>1419	ArgumentList	dims [ i ]
>1420	Argument	dims [ i ]
>1421	ArrayIndexing	dims [ i ]
>1422	Identifier	i
>1423	Identifier	dims
>1424	Callee	Fraction
>1425	Identifier	Fraction
>1426	AdditiveExpression	workingParams_ . rfSize [ i ] - workingParams_ . rfOverlap [ i ]
>1427	ArrayIndexing	workingParams_ . rfOverlap [ i ]
>1428	Identifier	i
>1429	MemberAccess	workingParams_ . rfOverlap
>1430	Identifier	rfOverlap
>1431	Identifier	workingParams_
>1432	ArrayIndexing	workingParams_ . rfSize [ i ]
>1433	Identifier	i
>1434	MemberAccess	workingParams_ . rfSize
>1435	Identifier	rfSize
>1436	Identifier	workingParams_
>1437	AdditiveExpression	workingParams_ . span [ i ] - workingParams_ . rfOverlap [ i ]
>1438	ArrayIndexing	workingParams_ . rfOverlap [ i ]
>1439	Identifier	i
>1440	MemberAccess	workingParams_ . rfOverlap
>1441	Identifier	rfOverlap
>1442	Identifier	workingParams_
>1443	ArrayIndexing	workingParams_ . span [ i ]
>1444	Identifier	i
>1445	MemberAccess	workingParams_ . span
>1446	Identifier	span
>1447	Identifier	workingParams_
>1448	Identifier	inducedDim
>1449	Identifier	inducedDim
>1450	IdentifierDeclType	Fraction
>1451	IfStatement	if ( ! validityCheck . isNaturalNumber ( ) )
>1452	CompoundStatement	 
>1453	ExpressionStatement	 
>1454	PrimaryExpression	\" configuration is not possible.\"
>1455	Statement	 
>1456	Statement	 
>1457	Statement	 
>1458	Statement	 
>1459	Statement	 
>1460	Statement	 
>1461	Statement	 
>1462	Statement	 
>1463	Statement	 
>1464	Statement	 
>1465	Statement	 
>1466	Statement	 
>1467	Statement	 
>1468	Statement	 
>1469	Statement	 
>1470	Statement	 
>1471	Statement	 
>1472	Statement	 
>1473	Statement	 
>1474	Statement	 
>1475	Statement	 
>1476	Statement	 
>1477	Statement	 
>1478	Statement	 
>1479	Statement	 
>1480	Statement	 
>1481	Statement	 
>1482	Statement	 
>1483	Statement	 
>1484	Statement	 
>1485	Statement	 
>1486	Statement	 
>1487	Statement	 
>1488	Statement	 
>1489	Statement	 
>1490	Statement	 
>1491	Statement	 
>1492	Statement	 
>1493	Statement	 
>1494	Statement	 
>1495	Statement	 
>1496	Statement	 
>1497	Statement	 
>1498	Statement	 
>1499	Statement	 
>1500	Statement	 
>1501	Statement	 
>1502	Condition	 
>1503	UnaryOp	! validityCheck . isNaturalNumber ( )
>1504	CallExpression	validityCheck . isNaturalNumber ( )
>1505	ArgumentList	 
>1506	Callee	validityCheck . isNaturalNumber
>1507	MemberAccess	validityCheck . isNaturalNumber
>1508	Identifier	isNaturalNumber
>1509	Identifier	validityCheck
>1510	UnaryOperator	!
>1511	ExpressionStatement	 
>1512	AssignmentExpr	validityCheck = workingParams_ . rfSize [ i ] * elementCount_
>1513	MultiplicativeExpression	workingParams_ . rfSize [ i ] * elementCount_
>1514	Identifier	elementCount_
>1515	ArrayIndexing	workingParams_ . rfSize [ i ]
>1516	Identifier	i
>1517	MemberAccess	workingParams_ . rfSize
>1518	Identifier	rfSize
>1519	Identifier	workingParams_
>1520	Identifier	validityCheck
>1521	IfStatement	if ( validityCheck . getNumerator ( ) != 0 )
>1522	CompoundStatement	 
>1523	ExpressionStatement	 
>1524	PrimaryExpression	\"receptive fields.\"
>1525	Statement	 
>1526	Statement	 
>1527	Statement	 
>1528	Statement	 
>1529	Statement	 
>1530	Statement	 
>1531	Statement	 
>1532	Statement	 
>1533	Statement	 
>1534	Statement	 
>1535	Statement	 
>1536	Statement	 
>1537	Statement	 
>1538	Statement	 
>1539	Statement	 
>1540	Statement	 
>1541	Statement	 
>1542	Statement	 
>1543	Statement	 
>1544	Statement	 
>1545	Statement	 
>1546	Statement	 
>1547	Statement	 
>1548	Statement	 
>1549	Statement	 
>1550	Statement	 
>1551	Statement	 
>1552	Statement	 
>1553	Statement	 
>1554	Statement	 
>1555	Statement	 
>1556	Statement	 
>1557	Statement	 
>1558	Statement	 
>1559	Statement	 
>1560	Statement	 
>1561	Statement	 
>1562	Statement	 
>1563	Statement	 
>1564	Statement	 
>1565	Statement	 
>1566	Statement	 
>1567	Statement	 
>1568	Statement	 
>1569	Statement	 
>1570	Statement	 
>1571	Statement	 
>1572	Statement	 
>1573	Statement	 
>1574	Statement	 
>1575	Statement	 
>1576	Statement	 
>1577	Statement	 
>1578	Statement	 
>1579	Statement	 
>1580	Statement	 
>1581	Statement	 
>1582	Statement	 
>1583	Statement	 
>1584	Statement	 
>1585	Statement	 
>1586	Statement	 
>1587	Statement	 
>1588	Statement	 
>1589	Statement	 
>1590	Statement	 
>1591	Statement	 
>1592	Statement	 
>1593	Statement	 
>1594	Statement	 
>1595	Statement	 
>1596	Statement	 
>1597	Statement	 
>1598	Statement	 
>1599	Statement	 
>1600	Condition	 
>1601	EqualityExpression	validityCheck . getNumerator ( ) != 0
>1602	PrimaryExpression	0
>1603	CallExpression	validityCheck . getNumerator ( )
>1604	ArgumentList	 
>1605	Callee	validityCheck . getNumerator
>1606	MemberAccess	validityCheck . getNumerator
>1607	Identifier	getNumerator
>1608	Identifier	validityCheck
>1609	ExpressionStatement	 
>1610	AssignmentExpr	validityCheck = ( workingParams_ . span [ i ] - workingParams_ . rfSize [ i ] ) % ( workingParams_ . \
>1611	MultiplicativeExpression	( workingParams_ . span [ i ] - workingParams_ . rfSize [ i ] ) % ( workingParams_ . rfSize [ i ] - workingParams_ \
>1612	AdditiveExpression	workingParams_ . rfSize [ i ] - workingParams_ . rfOverlap [ i ]
>1613	ArrayIndexing	workingParams_ . rfOverlap [ i ]
>1614	Identifier	i
>1615	MemberAccess	workingParams_ . rfOverlap
>1616	Identifier	rfOverlap
>1617	Identifier	workingParams_
>1618	ArrayIndexing	workingParams_ . rfSize [ i ]
>1619	Identifier	i
>1620	MemberAccess	workingParams_ . rfSize
>1621	Identifier	rfSize
>1622	Identifier	workingParams_
>1623	AdditiveExpression	workingParams_ . span [ i ] - workingParams_ . rfSize [ i ]
>1624	ArrayIndexing	workingParams_ . rfSize [ i ]
>1625	Identifier	i
>1626	MemberAccess	workingParams_ . rfSize
>1627	Identifier	rfSize
>1628	Identifier	workingParams_
>1629	ArrayIndexing	workingParams_ . span [ i ]
>1630	Identifier	i
>1631	MemberAccess	workingParams_ . span
>1632	Identifier	span
>1633	Identifier	workingParams_
>1634	Identifier	validityCheck
>1635	IfStatement	if ( validityCheck . getNumerator ( ) != 0 )
>1636	CompoundStatement	 
>1637	ExpressionStatement	 
>1638	ShiftExpression	\" an integer multiple of the specified span (\" << workingParams_ . span [ i ] << \").\"
>1639	ShiftExpression	workingParams_ . span [ i ] << \").\"
>1640	PrimaryExpression	\").\"
>1641	ArrayIndexing	workingParams_ . span [ i ]
>1642	Identifier	i
>1643	MemberAccess	workingParams_ . span
>1644	Identifier	span
>1645	Identifier	workingParams_
>1646	PrimaryExpression	\" an integer multiple of the specified span (\"
>1647	Statement	 
>1648	Statement	 
>1649	Statement	 
>1650	Statement	 
>1651	Statement	 
>1652	Statement	 
>1653	Statement	 
>1654	Statement	 
>1655	Statement	 
>1656	Statement	 
>1657	Statement	 
>1658	Statement	 
>1659	Statement	 
>1660	Statement	 
>1661	Statement	 
>1662	Statement	 
>1663	Statement	 
>1664	Statement	 
>1665	Statement	 
>1666	Statement	 
>1667	Statement	 
>1668	Statement	 
>1669	Statement	 
>1670	Statement	 
>1671	Statement	 
>1672	Statement	 
>1673	Statement	 
>1674	Statement	 
>1675	Statement	 
>1676	Statement	 
>1677	Statement	 
>1678	Statement	 
>1679	Statement	 
>1680	Statement	 
>1681	Statement	 
>1682	Statement	 
>1683	Statement	 
>1684	Statement	 
>1685	Statement	 
>1686	Statement	 
>1687	Statement	 
>1688	Statement	 
>1689	Condition	 
>1690	EqualityExpression	validityCheck . getNumerator ( ) != 0
>1691	PrimaryExpression	0
>1692	CallExpression	validityCheck . getNumerator ( )
>1693	ArgumentList	 
>1694	Callee	validityCheck . getNumerator
>1695	MemberAccess	validityCheck . getNumerator
>1696	Identifier	getNumerator
>1697	Identifier	validityCheck
>1698	IdentifierDeclStatement	 
>1699	IdentifierDecl	validityCheck = ( ( Fraction ( dims [ i ] ) ) + workingParams_ . overhang [ i ] * 2 ) % workingParams_ . span [ \
>1700	AssignmentExpr	validityCheck = ( ( Fraction ( dims [ i ] ) ) + workingParams_ . overhang [ i ] * 2 ) % workingParams_ \
>1701	MultiplicativeExpression	( ( Fraction ( dims [ i ] ) ) + workingParams_ . overhang [ i ] * 2 ) % workingParams_ . span [ i ]
>1702	ArrayIndexing	workingParams_ . span [ i ]
>1703	Identifier	i
>1704	MemberAccess	workingParams_ . span
>1705	Identifier	span
>1706	Identifier	workingParams_
>1707	AdditiveExpression	( Fraction ( dims [ i ] ) ) + workingParams_ . overhang [ i ] * 2
>1708	MultiplicativeExpression	workingParams_ . overhang [ i ] * 2
>1709	PrimaryExpression	2
>1710	ArrayIndexing	workingParams_ . overhang [ i ]
>1711	Identifier	i
>1712	MemberAccess	workingParams_ . overhang
>1713	Identifier	overhang
>1714	Identifier	workingParams_
>1715	CallExpression	Fraction ( dims [ i ] )
>1716	ArgumentList	dims [ i ]
>1717	Argument	dims [ i ]
>1718	ArrayIndexing	dims [ i ]
>1719	Identifier	i
>1720	Identifier	dims
>1721	Callee	Fraction
>1722	Identifier	Fraction
>1723	Identifier	validityCheck
>1724	Identifier	validityCheck
>1725	IdentifierDeclType	Fraction
>1726	CompoundStatement	 
>1727	ExpressionStatement	 
>1728	CallExpression	inducedDims . push_back ( inducedDim . getNumerator ( ) )
>1729	ArgumentList	inducedDim . getNumerator ( )
>1730	Argument	inducedDim . getNumerator ( )
>1731	CallExpression	inducedDim . getNumerator ( )
>1732	ArgumentList	 
>1733	Callee	inducedDim . getNumerator
>1734	MemberAccess	inducedDim . getNumerator
>1735	Identifier	getNumerator
>1736	Identifier	inducedDim
>1737	Callee	inducedDims . push_back
>1738	MemberAccess	inducedDims . push_back
>1739	Identifier	push_back
>1740	Identifier	inducedDims
>1741	ExpressionStatement	 
>1742	CallExpression	inducedDim . reduce ( )
>1743	ArgumentList	 
>1744	Callee	inducedDim . reduce
>1745	MemberAccess	inducedDim . reduce
>1746	Identifier	reduce
>1747	Identifier	inducedDim
>1748	ExpressionStatement	 
>1749	CallExpression	NTA_CHECK ( inducedDim . isNaturalNumber ( ) )
>1750	ArgumentList	inducedDim . isNaturalNumber ( )
>1751	Argument	inducedDim . isNaturalNumber ( )
>1752	CallExpression	inducedDim . isNaturalNumber ( )
>1753	ArgumentList	 
>1754	Callee	inducedDim . isNaturalNumber
>1755	MemberAccess	inducedDim . isNaturalNumber
>1756	Identifier	isNaturalNumber
>1757	Identifier	inducedDim
>1758	Callee	NTA_CHECK
>1759	Identifier	NTA_CHECK
>1760	IdentifierDeclStatement	 
>1761	IdentifierDecl	inducedDim = ( Fraction ( dims [ i ] ) + workingParams_ . overhang [ i ] * 2 - workingParams_ . rfOverlap [ i ] ) / ( \
>1762	AssignmentExpr	inducedDim = ( Fraction ( dims [ i ] ) + workingParams_ . overhang [ i ] * 2 - workingParams_ . rfOverlap [ \
>1763	MultiplicativeExpression	( Fraction ( dims [ i ] ) + workingParams_ . overhang [ i ] * 2 - workingParams_ . rfOverlap [ i ] ) / ( \
>1764	AdditiveExpression	workingParams_ . rfSize [ i ] - workingParams_ . rfOverlap [ i ]
>1765	ArrayIndexing	workingParams_ . rfOverlap [ i ]
>1766	Identifier	i
>1767	MemberAccess	workingParams_ . rfOverlap
>1768	Identifier	rfOverlap
>1769	Identifier	workingParams_
>1770	ArrayIndexing	workingParams_ . rfSize [ i ]
>1771	Identifier	i
>1772	MemberAccess	workingParams_ . rfSize
>1773	Identifier	rfSize
>1774	Identifier	workingParams_
>1775	AdditiveExpression	Fraction ( dims [ i ] ) + workingParams_ . overhang [ i ] * 2 - workingParams_ . rfOverlap [ i ]
>1776	AdditiveExpression	workingParams_ . overhang [ i ] * 2 - workingParams_ . rfOverlap [ i ]
>1777	ArrayIndexing	workingParams_ . rfOverlap [ i ]
>1778	Identifier	i
>1779	MemberAccess	workingParams_ . rfOverlap
>1780	Identifier	rfOverlap
>1781	Identifier	workingParams_
>1782	MultiplicativeExpression	workingParams_ . overhang [ i ] * 2
>1783	PrimaryExpression	2
>1784	ArrayIndexing	workingParams_ . overhang [ i ]
>1785	Identifier	i
>1786	MemberAccess	workingParams_ . overhang
>1787	Identifier	overhang
>1788	Identifier	workingParams_
>1789	CallExpression	Fraction ( dims [ i ] )
>1790	ArgumentList	dims [ i ]
>1791	Argument	dims [ i ]
>1792	ArrayIndexing	dims [ i ]
>1793	Identifier	i
>1794	Identifier	dims
>1795	Callee	Fraction
>1796	Identifier	Fraction
>1797	Identifier	inducedDim
>1798	Identifier	inducedDim
>1799	IdentifierDeclType	Fraction
>1800	IfStatement	if ( ! validityCheck . isNaturalNumber ( ) )
>1801	CompoundStatement	 
>1802	ExpressionStatement	 
>1803	PrimaryExpression	\" configuration is not possible.\"
>1804	Statement	 
>1805	Statement	 
>1806	Statement	 
>1807	Statement	 
>1808	Statement	 
>1809	Statement	 
>1810	Statement	 
>1811	Statement	 
>1812	Statement	 
>1813	Statement	 
>1814	Statement	 
>1815	Statement	 
>1816	Statement	 
>1817	Statement	 
>1818	Statement	 
>1819	Statement	 
>1820	Statement	 
>1821	Statement	 
>1822	Statement	 
>1823	Statement	 
>1824	Statement	 
>1825	Statement	 
>1826	Statement	 
>1827	Statement	 
>1828	Statement	 
>1829	Statement	 
>1830	Statement	 
>1831	Statement	 
>1832	Statement	 
>1833	Statement	 
>1834	Statement	 
>1835	Statement	 
>1836	Statement	 
>1837	Statement	 
>1838	Statement	 
>1839	Statement	 
>1840	Statement	 
>1841	Statement	 
>1842	Statement	 
>1843	Statement	 
>1844	Statement	 
>1845	Statement	 
>1846	Statement	 
>1847	Statement	 
>1848	Statement	 
>1849	Statement	 
>1850	Statement	 
>1851	Condition	 
>1852	UnaryOp	! validityCheck . isNaturalNumber ( )
>1853	CallExpression	validityCheck . isNaturalNumber ( )
>1854	ArgumentList	 
>1855	Callee	validityCheck . isNaturalNumber
>1856	MemberAccess	validityCheck . isNaturalNumber
>1857	Identifier	isNaturalNumber
>1858	Identifier	validityCheck
>1859	UnaryOperator	!
>1860	ExpressionStatement	 
>1861	AssignmentExpr	validityCheck = workingParams_ . rfSize [ i ] * elementCount_
>1862	MultiplicativeExpression	workingParams_ . rfSize [ i ] * elementCount_
>1863	Identifier	elementCount_
>1864	ArrayIndexing	workingParams_ . rfSize [ i ]
>1865	Identifier	i
>1866	MemberAccess	workingParams_ . rfSize
>1867	Identifier	rfSize
>1868	Identifier	workingParams_
>1869	Identifier	validityCheck
>1870	IfStatement	if ( validityCheck . getNumerator ( ) != 0 )
>1871	CompoundStatement	 
>1872	ExpressionStatement	 
>1873	PrimaryExpression	\"amount added by successive receptive fields.\"
>1874	Statement	 
>1875	Statement	 
>1876	Statement	 
>1877	Statement	 
>1878	Statement	 
>1879	Statement	 
>1880	Statement	 
>1881	Statement	 
>1882	Statement	 
>1883	Statement	 
>1884	Statement	 
>1885	Statement	 
>1886	Statement	 
>1887	Statement	 
>1888	Statement	 
>1889	Statement	 
>1890	Statement	 
>1891	Statement	 
>1892	Statement	 
>1893	Statement	 
>1894	Statement	 
>1895	Statement	 
>1896	Statement	 
>1897	Statement	 
>1898	Statement	 
>1899	Statement	 
>1900	Statement	 
>1901	Statement	 
>1902	Statement	 
>1903	Statement	 
>1904	Statement	 
>1905	Statement	 
>1906	Statement	 
>1907	Statement	 
>1908	Statement	 
>1909	Statement	 
>1910	Statement	 
>1911	Statement	 
>1912	Statement	 
>1913	Statement	 
>1914	Statement	 
>1915	Statement	 
>1916	Statement	 
>1917	Statement	 
>1918	Statement	 
>1919	Statement	 
>1920	Statement	 
>1921	Statement	 
>1922	Statement	 
>1923	Statement	 
>1924	Statement	 
>1925	Statement	 
>1926	Statement	 
>1927	Statement	 
>1928	Statement	 
>1929	Statement	 
>1930	Statement	 
>1931	Statement	 
>1932	Statement	 
>1933	Statement	 
>1934	Statement	 
>1935	Statement	 
>1936	Statement	 
>1937	Statement	 
>1938	Statement	 
>1939	Statement	 
>1940	Statement	 
>1941	Statement	 
>1942	Statement	 
>1943	Statement	 
>1944	Statement	 
>1945	Statement	 
>1946	Statement	 
>1947	Statement	 
>1948	Statement	 
>1949	Statement	 
>1950	Statement	 
>1951	Statement	 
>1952	Statement	 
>1953	Statement	 
>1954	Statement	 
>1955	Statement	 
>1956	Condition	 
>1957	EqualityExpression	validityCheck . getNumerator ( ) != 0
>1958	PrimaryExpression	0
>1959	CallExpression	validityCheck . getNumerator ( )
>1960	ArgumentList	 
>1961	Callee	validityCheck . getNumerator
>1962	MemberAccess	validityCheck . getNumerator
>1963	Identifier	getNumerator
>1964	Identifier	validityCheck
>1965	IdentifierDeclStatement	 
>1966	IdentifierDecl	validityCheck = ( Fraction ( dims [ i ] ) + workingParams_ . overhang [ i ] * 2 - workingParams_ . rfSize [ i ] ) % ( \
>1967	AssignmentExpr	validityCheck = ( Fraction ( dims [ i ] ) + workingParams_ . overhang [ i ] * 2 - workingParams_ . rfSize [ \
>1968	MultiplicativeExpression	( Fraction ( dims [ i ] ) + workingParams_ . overhang [ i ] * 2 - workingParams_ . rfSize [ i ] ) % ( \
>1969	AdditiveExpression	workingParams_ . rfSize [ i ] - workingParams_ . rfOverlap [ i ]
>1970	ArrayIndexing	workingParams_ . rfOverlap [ i ]
>1971	Identifier	i
>1972	MemberAccess	workingParams_ . rfOverlap
>1973	Identifier	rfOverlap
>1974	Identifier	workingParams_
>1975	ArrayIndexing	workingParams_ . rfSize [ i ]
>1976	Identifier	i
>1977	MemberAccess	workingParams_ . rfSize
>1978	Identifier	rfSize
>1979	Identifier	workingParams_
>1980	AdditiveExpression	Fraction ( dims [ i ] ) + workingParams_ . overhang [ i ] * 2 - workingParams_ . rfSize [ i ]
>1981	AdditiveExpression	workingParams_ . overhang [ i ] * 2 - workingParams_ . rfSize [ i ]
>1982	ArrayIndexing	workingParams_ . rfSize [ i ]
>1983	Identifier	i
>1984	MemberAccess	workingParams_ . rfSize
>1985	Identifier	rfSize
>1986	Identifier	workingParams_
>1987	MultiplicativeExpression	workingParams_ . overhang [ i ] * 2
>1988	PrimaryExpression	2
>1989	ArrayIndexing	workingParams_ . overhang [ i ]
>1990	Identifier	i
>1991	MemberAccess	workingParams_ . overhang
>1992	Identifier	overhang
>1993	Identifier	workingParams_
>1994	CallExpression	Fraction ( dims [ i ] )
>1995	ArgumentList	dims [ i ]
>1996	Argument	dims [ i ]
>1997	ArrayIndexing	dims [ i ]
>1998	Identifier	i
>1999	Identifier	dims
>2000	Callee	Fraction
>2001	Identifier	Fraction
>2002	Identifier	validityCheck
>2003	Identifier	validityCheck
>2004	IdentifierDeclType	Fraction
>2005	Condition	 
>2006	EqualityExpression	workingParams_ . span [ i ] . getNumerator ( ) == 0
>2007	PrimaryExpression	0
>2008	CallExpression	workingParams_ . span [ i ] . getNumerator ( )
>2009	ArgumentList	 
>2010	Callee	workingParams_ . span [ i ] . getNumerator
>2011	MemberAccess	workingParams_ . span [ i ] . getNumerator
>2012	Identifier	getNumerator
>2013	ArrayIndexing	workingParams_ . span [ i ]
>2014	Identifier	i
>2015	MemberAccess	workingParams_ . span
>2016	Identifier	span
>2017	Identifier	workingParams_
>2018	IncDecOp	 
>2019	IncDec	++
>2020	Identifier	i
>2021	Condition	 
>2022	RelationalExpression	i < dims . size ( )
>2023	CallExpression	dims . size ( )
>2024	ArgumentList	 
>2025	Callee	dims . size
>2026	MemberAccess	dims . size
>2027	Identifier	size
>2028	Identifier	dims
>2029	Identifier	i
>2030	ForInit	 
>2031	IdentifierDeclStatement	size_t i = 0 ;
>2032	IdentifierDecl	i = 0
>2033	AssignmentExpr	i = 0
>2034	PrimaryExpression	0
>2035	Identifier	i
>2036	Identifier	i
>2037	IdentifierDeclType	size_t
>2038	Condition	 
>2039	Identifier	strict_
>2040	Label	 
>2041	Identifier	inMapping
>2042	Condition	 
>2043	Identifier	mapping_
>2044	IdentifierDeclStatement	 
>2045	IdentifierDecl	inducedDims
>2046	Identifier	inducedDims
>2047	IdentifierDeclType	Dimensions
>2048	IfStatement	if ( parameterDimensionality_ != 1 )
>2049	CompoundStatement	 
>2050	IfStatement	if ( parameterDimensionality_ != dims . size ( ) && ! dims . isOnes ( ) )
>2051	CompoundStatement	 
>2052	ExpressionStatement	 
>2053	ShiftExpression	\"have dimensionality \" << parameterDimensionality_ << \" but the source dimensions supplied have dimensionality \" << \
>2054	ShiftExpression	parameterDimensionality_ << \" but the source dimensions supplied have dimensionality \" << dims . size ( )
>2055	ShiftExpression	\" but the source dimensions supplied have dimensionality \" << dims . size ( )
>2056	CallExpression	dims . size ( )
>2057	ArgumentList	 
>2058	Callee	dims . size
>2059	MemberAccess	dims . size
>2060	Identifier	size
>2061	Identifier	dims
>2062	PrimaryExpression	\" but the source dimensions supplied have dimensionality \"
>2063	Identifier	parameterDimensionality_
>2064	PrimaryExpression	\"have dimensionality \"
>2065	Statement	 
>2066	Statement	 
>2067	Statement	 
>2068	Condition	 
>2069	AndExpression	parameterDimensionality_ != dims . size ( ) && ! dims . isOnes ( )
>2070	UnaryOp	! dims . isOnes ( )
>2071	CallExpression	dims . isOnes ( )
>2072	ArgumentList	 
>2073	Callee	dims . isOnes
>2074	MemberAccess	dims . isOnes
>2075	Identifier	isOnes
>2076	Identifier	dims
>2077	UnaryOperator	!
>2078	EqualityExpression	parameterDimensionality_ != dims . size ( )
>2079	CallExpression	dims . size ( )
>2080	ArgumentList	 
>2081	Callee	dims . size
>2082	MemberAccess	dims . size
>2083	Identifier	size
>2084	Identifier	dims
>2085	Identifier	parameterDimensionality_
>2086	Condition	 
>2087	EqualityExpression	parameterDimensionality_ != 1
>2088	PrimaryExpression	1
>2089	Identifier	parameterDimensionality_
>2090	IfStatement	if ( dims . isDontcare ( ) )
>2091	ExpressionStatement	 
>2092	ShiftExpression	NTA_THROW << \"Invalid dontcare source dimensions for link \" << link_ -> toString ( )
>2093	ShiftExpression	\"Invalid dontcare source dimensions for link \" << link_ -> toString ( )
>2094	CallExpression	link_ -> toString ( )
>2095	ArgumentList	 
>2096	Callee	link_ -> toString
>2097	PtrMemberAccess	link_ -> toString
>2098	Identifier	toString
>2099	Identifier	link_
>2100	PrimaryExpression	\"Invalid dontcare source dimensions for link \"
>2101	Identifier	NTA_THROW
>2102	Condition	 
>2103	CallExpression	dims . isDontcare ( )
>2104	ArgumentList	 
>2105	Callee	dims . isDontcare
>2106	MemberAccess	dims . isDontcare
>2107	Identifier	isDontcare
>2108	Identifier	dims
>2109	IfStatement	if ( dims . isUnspecified ( ) )
>2110	ExpressionStatement	 
>2111	ShiftExpression	NTA_THROW << \"Invalid unspecified source dimensions for link \" << link_ -> toString ( )
>2112	ShiftExpression	\"Invalid unspecified source dimensions for link \" << link_ -> toString ( )
>2113	CallExpression	link_ -> toString ( )
>2114	ArgumentList	 
>2115	Callee	link_ -> toString
>2116	PtrMemberAccess	link_ -> toString
>2117	Identifier	toString
>2118	Identifier	link_
>2119	PrimaryExpression	\"Invalid unspecified source dimensions for link \"
>2120	Identifier	NTA_THROW
>2121	Condition	 
>2122	CallExpression	dims . isUnspecified ( )
>2123	ArgumentList	 
>2124	Callee	dims . isUnspecified
>2125	MemberAccess	dims . isUnspecified
>2126	Identifier	isUnspecified
>2127	Identifier	dims
>2128	ExpressionStatement	 
>2129	ShiftExpression	NTA_CHECK ( destDimensions_ . isUnspecified ( ) ) << \"Internal error on link \" << link_ -> toString ( )
>2130	ShiftExpression	\"Internal error on link \" << link_ -> toString ( )
>2131	CallExpression	link_ -> toString ( )
>2132	ArgumentList	 
>2133	Callee	link_ -> toString
>2134	PtrMemberAccess	link_ -> toString
>2135	Identifier	toString
>2136	Identifier	link_
>2137	PrimaryExpression	\"Internal error on link \"
>2138	CallExpression	NTA_CHECK ( destDimensions_ . isUnspecified ( ) )
>2139	ArgumentList	destDimensions_ . isUnspecified ( )
>2140	Argument	destDimensions_ . isUnspecified ( )
>2141	CallExpression	destDimensions_ . isUnspecified ( )
>2142	ArgumentList	 
>2143	Callee	destDimensions_ . isUnspecified
>2144	MemberAccess	destDimensions_ . isUnspecified
>2145	Identifier	isUnspecified
>2146	Identifier	destDimensions_
>2147	Callee	NTA_CHECK
>2148	Identifier	NTA_CHECK
>2149	ExpressionStatement	 
>2150	ShiftExpression	NTA_CHECK ( srcDimensions_ . isUnspecified ( ) ) << \"Internal error on link \" << link_ -> toString ( )
>2151	ShiftExpression	\"Internal error on link \" << link_ -> toString ( )
>2152	CallExpression	link_ -> toString ( )
>2153	ArgumentList	 
>2154	Callee	link_ -> toString
>2155	PtrMemberAccess	link_ -> toString
>2156	Identifier	toString
>2157	Identifier	link_
>2158	PrimaryExpression	\"Internal error on link \"
>2159	CallExpression	NTA_CHECK ( srcDimensions_ . isUnspecified ( ) )
>2160	ArgumentList	srcDimensions_ . isUnspecified ( )
>2161	Argument	srcDimensions_ . isUnspecified ( )
>2162	CallExpression	srcDimensions_ . isUnspecified ( )
>2163	ArgumentList	 
>2164	Callee	srcDimensions_ . isUnspecified
>2165	MemberAccess	srcDimensions_ . isUnspecified
>2166	Identifier	isUnspecified
>2167	Identifier	srcDimensions_
>2168	Callee	NTA_CHECK
>2169	Identifier	NTA_CHECK
>2170	IfStatement	if ( dims . isOnes ( ) && dims . size ( ) != parameterDimensionality_ )
>2171	ExpressionStatement	 
>2172	CallExpression	dims . promote ( parameterDimensionality_ )
>2173	ArgumentList	parameterDimensionality_
>2174	Argument	parameterDimensionality_
>2175	Identifier	parameterDimensionality_
>2176	Callee	dims . promote
>2177	MemberAccess	dims . promote
>2178	Identifier	promote
>2179	Identifier	dims
>2180	Condition	 
>2181	AndExpression	dims . isOnes ( ) && dims . size ( ) != parameterDimensionality_
>2182	EqualityExpression	dims . size ( ) != parameterDimensionality_
>2183	Identifier	parameterDimensionality_
>2184	CallExpression	dims . size ( )
>2185	ArgumentList	 
>2186	Callee	dims . size
>2187	MemberAccess	dims . size
>2188	Identifier	size
>2189	Identifier	dims
>2190	CallExpression	dims . isOnes ( )
>2191	ArgumentList	 
>2192	Callee	dims . isOnes
>2193	MemberAccess	dims . isOnes
>2194	Identifier	isOnes
>2195	Identifier	dims
>2196	IdentifierDeclStatement	 
>2197	IdentifierDecl	dims = specifiedDims
>2198	AssignmentExpr	dims = specifiedDims
>2199	Identifier	specifiedDims
>2200	Identifier	specifiedDims
>2201	Identifier	dims
>2202	IdentifierDeclType	Dimensions
>2203	IfStatement	if ( elementCount_ == uninitializedElementCount )
>2204	ExpressionStatement	 
>2205	ShiftExpression	NTA_THROW << \"Internal error
>2206	ShiftExpression	\"Internal error
>2207	CallExpression	link_ -> toString ( )
>2208	ArgumentList	 
>2209	Callee	link_ -> toString
>2210	PtrMemberAccess	link_ -> toString
>2211	Identifier	toString
>2212	Identifier	link_
>2213	PrimaryExpression	\"Internal error
>2214	Identifier	NTA_THROW
>2215	Condition	 
>2216	EqualityExpression	elementCount_ == uninitializedElementCount
>2217	Identifier	uninitializedElementCount
>2218	Identifier	elementCount_
>2266	FunctionDef	UniformLinkPolicy 
>2267	ParameterList	Dimensions & specifiedDims
>2268	Parameter	 
>2269	Identifier	specifiedDims
>2270	ParameterType	Dimensions &
>2271	ReturnType	void
>2272	CompoundStatement	 
>2273	ExpressionStatement	 
>2274	AssignmentExpr	srcDimensions_ = inducedDims
>2275	Identifier	inducedDims
>2276	Identifier	srcDimensions_
>2277	ExpressionStatement	 
>2278	AssignmentExpr	destDimensions_ = dims
>2279	Identifier	dims
>2280	Identifier	destDimensions_
>2281	SwitchStatement	switch ( mapping_ )
>2282	CompoundStatement	 
>2283	CompoundStatement	 
>2284	BreakStatement	 
>2285	ExpressionStatement	 
>2286	PrimaryExpression	\"implemented.\"
>2287	Statement	 
>2288	Statement	 
>2289	Statement	 
>2290	Label	 
>2291	Identifier	default
>2292	CompoundStatement	 
>2293	BreakStatement	 
>2294	IfStatement	if ( strict_ )
>2295	ElseStatement	else
>2296	CompoundStatement	 
>2297	ForStatement	for ( size_t i = 0 ; i < dims . size ( ) ; i ++ )
>2298	CompoundStatement	 
>2299	IfStatement	if ( inducedDim . isNaturalNumber ( ) )
>2300	ElseStatement	else
>2301	CompoundStatement	 
>2302	ExpressionStatement	 
>2303	CallExpression	inducedDims . push_back ( ( inducedDim . getNumerator ( ) / inducedDim . getDenominator ( ) ) + 1 )
>2304	ArgumentList	( inducedDim . getNumerator ( ) / inducedDim . getDenominator ( ) ) + 1
>2305	Argument	( inducedDim . getNumerator ( ) / inducedDim . getDenominator ( ) ) + 1
>2306	AdditiveExpression	( inducedDim . getNumerator ( ) / inducedDim . getDenominator ( ) ) + 1
>2307	PrimaryExpression	1
>2308	MultiplicativeExpression	inducedDim . getNumerator ( ) / inducedDim . getDenominator ( )
>2309	CallExpression	inducedDim . getDenominator ( )
>2310	ArgumentList	 
>2311	Callee	inducedDim . getDenominator
>2312	MemberAccess	inducedDim . getDenominator
>2313	Identifier	getDenominator
>2314	Identifier	inducedDim
>2315	CallExpression	inducedDim . getNumerator ( )
>2316	ArgumentList	 
>2317	Callee	inducedDim . getNumerator
>2318	MemberAccess	inducedDim . getNumerator
>2319	Identifier	getNumerator
>2320	Identifier	inducedDim
>2321	Callee	inducedDims . push_back
>2322	MemberAccess	inducedDims . push_back
>2323	Identifier	push_back
>2324	Identifier	inducedDims
>2325	CompoundStatement	 
>2326	ExpressionStatement	 
>2327	CallExpression	inducedDims . push_back ( inducedDim . getNumerator ( ) / inducedDim . getDenominator ( ) )
>2328	ArgumentList	inducedDim . getNumerator ( ) / inducedDim . getDenominator ( )
>2329	Argument	inducedDim . getNumerator ( ) / inducedDim . getDenominator ( )
>2330	MultiplicativeExpression	inducedDim . getNumerator ( ) / inducedDim . getDenominator ( )
>2331	CallExpression	inducedDim . getDenominator ( )
>2332	ArgumentList	 
>2333	Callee	inducedDim . getDenominator
>2334	MemberAccess	inducedDim . getDenominator
>2335	Identifier	getDenominator
>2336	Identifier	inducedDim
>2337	CallExpression	inducedDim . getNumerator ( )
>2338	ArgumentList	 
>2339	Callee	inducedDim . getNumerator
>2340	MemberAccess	inducedDim . getNumerator
>2341	Identifier	getNumerator
>2342	Identifier	inducedDim
>2343	Callee	inducedDims . push_back
>2344	MemberAccess	inducedDims . push_back
>2345	Identifier	push_back
>2346	Identifier	inducedDims
>2347	Condition	 
>2348	CallExpression	inducedDim . isNaturalNumber ( )
>2349	ArgumentList	 
>2350	Callee	inducedDim . isNaturalNumber
>2351	MemberAccess	inducedDim . isNaturalNumber
>2352	Identifier	isNaturalNumber
>2353	Identifier	inducedDim
>2354	IfStatement	if ( workingParams_ . span [ i ] . getNumerator ( ) == 0 )
>2355	ElseStatement	else
>2356	CompoundStatement	 
>2357	IfStatement	if ( properWholeDestDim != dims [ i ] )
>2358	CompoundStatement	 
>2359	ExpressionStatement	 
>2360	ShiftExpression	\"dimension \" << i + 1 << \".\"
>2361	ShiftExpression	i + 1 << \".\"
>2362	PrimaryExpression	\".\"
>2363	AdditiveExpression	i + 1
>2364	PrimaryExpression	1
>2365	Identifier	i
>2366	PrimaryExpression	\"dimension \"
>2367	Statement	 
>2368	Statement	 
>2369	Statement	 
>2370	Statement	 
>2371	Statement	 
>2372	Statement	 
>2373	Statement	 
>2374	Statement	 
>2375	Statement	 
>2376	Statement	 
>2377	Statement	 
>2378	Statement	 
>2379	Statement	 
>2380	Statement	 
>2381	Statement	 
>2382	Statement	 
>2383	Statement	 
>2384	Statement	 
>2385	Statement	 
>2386	Condition	 
>2387	EqualityExpression	properWholeDestDim != dims [ i ]
>2388	ArrayIndexing	dims [ i ]
>2389	Identifier	i
>2390	Identifier	dims
>2391	Identifier	properWholeDestDim
>2392	IdentifierDeclStatement	 
>2393	IdentifierDecl	properWholeDestDim = properDestDim . getNumerator ( ) / properDestDim . getDenominator ( )
>2394	AssignmentExpr	properWholeDestDim = properDestDim . getNumerator ( ) / properDestDim . getDenominator ( )
>2395	MultiplicativeExpression	properDestDim . getNumerator ( ) / properDestDim . getDenominator ( )
>2396	CallExpression	properDestDim . getDenominator ( )
>2397	ArgumentList	 
>2398	Callee	properDestDim . getDenominator
>2399	MemberAccess	properDestDim . getDenominator
>2400	Identifier	getDenominator
>2401	Identifier	properDestDim
>2402	CallExpression	properDestDim . getNumerator ( )
>2403	ArgumentList	 
>2404	Callee	properDestDim . getNumerator
>2405	MemberAccess	properDestDim . getNumerator
>2406	Identifier	getNumerator
>2407	Identifier	properDestDim
>2408	Identifier	properWholeDestDim
>2409	Identifier	properWholeDestDim
>2410	IdentifierDeclType	unsigned int
>2411	IdentifierDeclStatement	 
>2412	IdentifierDecl	properDestDim = Fraction ( numWholeSpans ) * nodesPerSpan
>2413	AssignmentExpr	properDestDim = Fraction ( numWholeSpans ) * nodesPerSpan
>2414	MultiplicativeExpression	Fraction ( numWholeSpans ) * nodesPerSpan
>2415	Identifier	nodesPerSpan
>2416	CallExpression	Fraction ( numWholeSpans )
>2417	ArgumentList	numWholeSpans
>2418	Argument	numWholeSpans
>2419	Identifier	numWholeSpans
>2420	Callee	Fraction
>2421	Identifier	Fraction
>2422	Identifier	properDestDim
>2423	Identifier	properDestDim
>2424	IdentifierDeclType	Fraction
>2425	IdentifierDeclStatement	 
>2426	IdentifierDecl	numWholeSpans = numSpans . getNumerator ( ) / numSpans . getDenominator ( )
>2427	AssignmentExpr	numWholeSpans = numSpans . getNumerator ( ) / numSpans . getDenominator ( )
>2428	MultiplicativeExpression	numSpans . getNumerator ( ) / numSpans . getDenominator ( )
>2429	CallExpression	numSpans . getDenominator ( )
>2430	ArgumentList	 
>2431	Callee	numSpans . getDenominator
>2432	MemberAccess	numSpans . getDenominator
>2433	Identifier	getDenominator
>2434	Identifier	numSpans
>2435	CallExpression	numSpans . getNumerator ( )
>2436	ArgumentList	 
>2437	Callee	numSpans . getNumerator
>2438	MemberAccess	numSpans . getNumerator
>2439	Identifier	getNumerator
>2440	Identifier	numSpans
>2441	Identifier	numWholeSpans
>2442	Identifier	numWholeSpans
>2443	IdentifierDeclType	int
>2444	IdentifierDeclStatement	 
>2445	IdentifierDecl	nodesPerSpan = Fraction ( 1 ) + ( workingParams_ . span [ i ] - workingParams_ . rfSize [ i ] ) / ( workingParams_ \
>2446	AssignmentExpr	nodesPerSpan = Fraction ( 1 ) + ( workingParams_ . span [ i ] - workingParams_ . rfSize [ i ] ) / ( workingParams_ \
>2447	AdditiveExpression	Fraction ( 1 ) + ( workingParams_ . span [ i ] - workingParams_ . rfSize [ i ] ) / ( workingParams_ . \
>2448	MultiplicativeExpression	( workingParams_ . span [ i ] - workingParams_ . rfSize [ i ] ) / ( workingParams_ . rfSize [ i ] - workingParams_ \
>2449	AdditiveExpression	workingParams_ . rfSize [ i ] - workingParams_ . rfOverlap [ i ]
>2450	ArrayIndexing	workingParams_ . rfOverlap [ i ]
>2451	Identifier	i
>2452	MemberAccess	workingParams_ . rfOverlap
>2453	Identifier	rfOverlap
>2454	Identifier	workingParams_
>2455	ArrayIndexing	workingParams_ . rfSize [ i ]
>2456	Identifier	i
>2457	MemberAccess	workingParams_ . rfSize
>2458	Identifier	rfSize
>2459	Identifier	workingParams_
>2460	AdditiveExpression	workingParams_ . span [ i ] - workingParams_ . rfSize [ i ]
>2461	ArrayIndexing	workingParams_ . rfSize [ i ]
>2462	Identifier	i
>2463	MemberAccess	workingParams_ . rfSize
>2464	Identifier	rfSize
>2465	Identifier	workingParams_
>2466	ArrayIndexing	workingParams_ . span [ i ]
>2467	Identifier	i
>2468	MemberAccess	workingParams_ . span
>2469	Identifier	span
>2470	Identifier	workingParams_
>2471	CallExpression	Fraction ( 1 )
>2472	ArgumentList	1
>2473	Argument	1
>2474	PrimaryExpression	1
>2475	Callee	Fraction
>2476	Identifier	Fraction
>2477	Identifier	nodesPerSpan
>2478	Identifier	nodesPerSpan
>2479	IdentifierDeclType	Fraction
>2480	IdentifierDeclStatement	 
>2481	IdentifierDecl	numSpans = ( inducedDim + workingParams_ . overhang [ i ] * 2 ) / workingParams_ . span [ i ]
>2482	AssignmentExpr	numSpans = ( inducedDim + workingParams_ . overhang [ i ] * 2 ) / workingParams_ . span [ i ]
>2483	MultiplicativeExpression	( inducedDim + workingParams_ . overhang [ i ] * 2 ) / workingParams_ . span [ i ]
>2484	ArrayIndexing	workingParams_ . span [ i ]
>2485	Identifier	i
>2486	MemberAccess	workingParams_ . span
>2487	Identifier	span
>2488	Identifier	workingParams_
>2489	AdditiveExpression	inducedDim + workingParams_ . overhang [ i ] * 2
>2490	MultiplicativeExpression	workingParams_ . overhang [ i ] * 2
>2491	PrimaryExpression	2
>2492	ArrayIndexing	workingParams_ . overhang [ i ]
>2493	Identifier	i
>2494	MemberAccess	workingParams_ . overhang
>2495	Identifier	overhang
>2496	Identifier	workingParams_
>2497	Identifier	inducedDim
>2498	Identifier	numSpans
>2499	Identifier	numSpans
>2500	IdentifierDeclType	Fraction
>2501	ExpressionStatement	 
>2502	AssignmentExpr	inducedDim = ( Fraction ( dims [ i ] ) * workingParams_ . span [ i ] * ( workingParams_ . rfSize [ i ] \
>2503	AdditiveExpression	( Fraction ( dims [ i ] ) * workingParams_ . span [ i ] * ( workingParams_ . rfSize [ i ] - workingParams_ \
>2504	MultiplicativeExpression	workingParams_ . overhang [ i ] * 2
>2505	PrimaryExpression	2
>2506	ArrayIndexing	workingParams_ . overhang [ i ]
>2507	Identifier	i
>2508	MemberAccess	workingParams_ . overhang
>2509	Identifier	overhang
>2510	Identifier	workingParams_
>2511	MultiplicativeExpression	( Fraction ( dims [ i ] ) * workingParams_ . span [ i ] * ( workingParams_ . rfSize [ i ] - workingParams_ \
>2512	AdditiveExpression	workingParams_ . span [ i ] - workingParams_ . rfOverlap [ i ]
>2513	ArrayIndexing	workingParams_ . rfOverlap [ i ]
>2514	Identifier	i
>2515	MemberAccess	workingParams_ . rfOverlap
>2516	Identifier	rfOverlap
>2517	Identifier	workingParams_
>2518	ArrayIndexing	workingParams_ . span [ i ]
>2519	Identifier	i
>2520	MemberAccess	workingParams_ . span
>2521	Identifier	span
>2522	Identifier	workingParams_
>2523	MultiplicativeExpression	Fraction ( dims [ i ] ) * workingParams_ . span [ i ] * ( workingParams_ . rfSize [ i ] - workingParams_ \
>2524	MultiplicativeExpression	workingParams_ . span [ i ] * ( workingParams_ . rfSize [ i ] - workingParams_ . rfOverlap [ i ] )
>2525	AdditiveExpression	workingParams_ . rfSize [ i ] - workingParams_ . rfOverlap [ i ]
>2526	ArrayIndexing	workingParams_ . rfOverlap [ i ]
>2527	Identifier	i
>2528	MemberAccess	workingParams_ . rfOverlap
>2529	Identifier	rfOverlap
>2530	Identifier	workingParams_
>2531	ArrayIndexing	workingParams_ . rfSize [ i ]
>2532	Identifier	i
>2533	MemberAccess	workingParams_ . rfSize
>2534	Identifier	rfSize
>2535	Identifier	workingParams_
>2536	ArrayIndexing	workingParams_ . span [ i ]
>2537	Identifier	i
>2538	MemberAccess	workingParams_ . span
>2539	Identifier	span
>2540	Identifier	workingParams_
>2541	CallExpression	Fraction ( dims [ i ] )
>2542	ArgumentList	dims [ i ]
>2543	Argument	dims [ i ]
>2544	ArrayIndexing	dims [ i ]
>2545	Identifier	i
>2546	Identifier	dims
>2547	Callee	Fraction
>2548	Identifier	Fraction
>2549	Identifier	inducedDim
>2550	CompoundStatement	 
>2551	ExpressionStatement	 
>2552	AssignmentExpr	inducedDim = Fraction ( dims [ i ] ) * ( workingParams_ . rfSize [ i ] - workingParams_ . rfOverlap [ \
>2553	AdditiveExpression	Fraction ( dims [ i ] ) * ( workingParams_ . rfSize [ i ] - workingParams_ . rfOverlap [ i ] ) + workingParams_ \
>2554	AdditiveExpression	workingParams_ . rfOverlap [ i ] - workingParams_ . overhang [ i ] * 2
>2555	MultiplicativeExpression	workingParams_ . overhang [ i ] * 2
>2556	PrimaryExpression	2
>2557	ArrayIndexing	workingParams_ . overhang [ i ]
>2558	Identifier	i
>2559	MemberAccess	workingParams_ . overhang
>2560	Identifier	overhang
>2561	Identifier	workingParams_
>2562	ArrayIndexing	workingParams_ . rfOverlap [ i ]
>2563	Identifier	i
>2564	MemberAccess	workingParams_ . rfOverlap
>2565	Identifier	rfOverlap
>2566	Identifier	workingParams_
>2567	MultiplicativeExpression	Fraction ( dims [ i ] ) * ( workingParams_ . rfSize [ i ] - workingParams_ . rfOverlap [ i ] )
>2568	AdditiveExpression	workingParams_ . rfSize [ i ] - workingParams_ . rfOverlap [ i ]
>2569	ArrayIndexing	workingParams_ . rfOverlap [ i ]
>2570	Identifier	i
>2571	MemberAccess	workingParams_ . rfOverlap
>2572	Identifier	rfOverlap
>2573	Identifier	workingParams_
>2574	ArrayIndexing	workingParams_ . rfSize [ i ]
>2575	Identifier	i
>2576	MemberAccess	workingParams_ . rfSize
>2577	Identifier	rfSize
>2578	Identifier	workingParams_
>2579	CallExpression	Fraction ( dims [ i ] )
>2580	ArgumentList	dims [ i ]
>2581	Argument	dims [ i ]
>2582	ArrayIndexing	dims [ i ]
>2583	Identifier	i
>2584	Identifier	dims
>2585	Callee	Fraction
>2586	Identifier	Fraction
>2587	Identifier	inducedDim
>2588	Condition	 
>2589	EqualityExpression	workingParams_ . span [ i ] . getNumerator ( ) == 0
>2590	PrimaryExpression	0
>2591	CallExpression	workingParams_ . span [ i ] . getNumerator ( )
>2592	ArgumentList	 
>2593	Callee	workingParams_ . span [ i ] . getNumerator
>2594	MemberAccess	workingParams_ . span [ i ] . getNumerator
>2595	Identifier	getNumerator
>2596	ArrayIndexing	workingParams_ . span [ i ]
>2597	Identifier	i
>2598	MemberAccess	workingParams_ . span
>2599	Identifier	span
>2600	Identifier	workingParams_
>2601	IdentifierDeclStatement	 
>2602	IdentifierDecl	inducedDim
>2603	Identifier	inducedDim
>2604	IdentifierDeclType	Fraction
>2605	IncDecOp	 
>2606	IncDec	++
>2607	Identifier	i
>2608	Condition	 
>2609	RelationalExpression	i < dims . size ( )
>2610	CallExpression	dims . size ( )
>2611	ArgumentList	 
>2612	Callee	dims . size
>2613	MemberAccess	dims . size
>2614	Identifier	size
>2615	Identifier	dims
>2616	Identifier	i
>2617	ForInit	 
>2618	IdentifierDeclStatement	size_t i = 0 ;
>2619	IdentifierDecl	i = 0
>2620	AssignmentExpr	i = 0
>2621	PrimaryExpression	0
>2622	Identifier	i
>2623	Identifier	i
>2624	IdentifierDeclType	size_t
>2625	CompoundStatement	 
>2626	ForStatement	for ( size_t i = 0 ; i < dims . size ( ) ; i ++ )
>2627	CompoundStatement	 
>2628	IfStatement	if ( workingParams_ . span [ i ] . getNumerator ( ) == 0 )
>2629	ElseStatement	else
>2630	CompoundStatement	 
>2631	ExpressionStatement	 
>2632	CallExpression	inducedDims . push_back ( inducedDim . getNumerator ( ) )
>2633	ArgumentList	inducedDim . getNumerator ( )
>2634	Argument	inducedDim . getNumerator ( )
>2635	CallExpression	inducedDim . getNumerator ( )
>2636	ArgumentList	 
>2637	Callee	inducedDim . getNumerator
>2638	MemberAccess	inducedDim . getNumerator
>2639	Identifier	getNumerator
>2640	Identifier	inducedDim
>2641	Callee	inducedDims . push_back
>2642	MemberAccess	inducedDims . push_back
>2643	Identifier	push_back
>2644	Identifier	inducedDims
>2645	ExpressionStatement	 
>2646	CallExpression	inducedDim . reduce ( )
>2647	ArgumentList	 
>2648	Callee	inducedDim . reduce
>2649	MemberAccess	inducedDim . reduce
>2650	Identifier	reduce
>2651	Identifier	inducedDim
>2652	ExpressionStatement	 
>2653	CallExpression	NTA_CHECK ( inducedDim . isNaturalNumber ( ) )
>2654	ArgumentList	inducedDim . isNaturalNumber ( )
>2655	Argument	inducedDim . isNaturalNumber ( )
>2656	CallExpression	inducedDim . isNaturalNumber ( )
>2657	ArgumentList	 
>2658	Callee	inducedDim . isNaturalNumber
>2659	MemberAccess	inducedDim . isNaturalNumber
>2660	Identifier	isNaturalNumber
>2661	Identifier	inducedDim
>2662	Callee	NTA_CHECK
>2663	Identifier	NTA_CHECK
>2664	IdentifierDeclStatement	 
>2665	IdentifierDecl	inducedDim = ( Fraction ( dims [ i ] ) * workingParams_ . span [ i ] * ( workingParams_ . rfSize [ i ] - workingParams_ \
>2666	AssignmentExpr	inducedDim = ( Fraction ( dims [ i ] ) * workingParams_ . span [ i ] * ( workingParams_ . rfSize [ i ] \
>2667	AdditiveExpression	( Fraction ( dims [ i ] ) * workingParams_ . span [ i ] * ( workingParams_ . rfSize [ i ] - workingParams_ \
>2668	MultiplicativeExpression	workingParams_ . overhang [ i ] * 2
>2669	PrimaryExpression	2
>2670	ArrayIndexing	workingParams_ . overhang [ i ]
>2671	Identifier	i
>2672	MemberAccess	workingParams_ . overhang
>2673	Identifier	overhang
>2674	Identifier	workingParams_
>2675	MultiplicativeExpression	( Fraction ( dims [ i ] ) * workingParams_ . span [ i ] * ( workingParams_ . rfSize [ i ] - workingParams_ \
>2676	AdditiveExpression	workingParams_ . span [ i ] - workingParams_ . rfOverlap [ i ]
>2677	ArrayIndexing	workingParams_ . rfOverlap [ i ]
>2678	Identifier	i
>2679	MemberAccess	workingParams_ . rfOverlap
>2680	Identifier	rfOverlap
>2681	Identifier	workingParams_
>2682	ArrayIndexing	workingParams_ . span [ i ]
>2683	Identifier	i
>2684	MemberAccess	workingParams_ . span
>2685	Identifier	span
>2686	Identifier	workingParams_
>2687	MultiplicativeExpression	Fraction ( dims [ i ] ) * workingParams_ . span [ i ] * ( workingParams_ . rfSize [ i ] - workingParams_ \
>2688	MultiplicativeExpression	workingParams_ . span [ i ] * ( workingParams_ . rfSize [ i ] - workingParams_ . rfOverlap [ i ] )
>2689	AdditiveExpression	workingParams_ . rfSize [ i ] - workingParams_ . rfOverlap [ i ]
>2690	ArrayIndexing	workingParams_ . rfOverlap [ i ]
>2691	Identifier	i
>2692	MemberAccess	workingParams_ . rfOverlap
>2693	Identifier	rfOverlap
>2694	Identifier	workingParams_
>2695	ArrayIndexing	workingParams_ . rfSize [ i ]
>2696	Identifier	i
>2697	MemberAccess	workingParams_ . rfSize
>2698	Identifier	rfSize
>2699	Identifier	workingParams_
>2700	ArrayIndexing	workingParams_ . span [ i ]
>2701	Identifier	i
>2702	MemberAccess	workingParams_ . span
>2703	Identifier	span
>2704	Identifier	workingParams_
>2705	CallExpression	Fraction ( dims [ i ] )
>2706	ArgumentList	dims [ i ]
>2707	Argument	dims [ i ]
>2708	ArrayIndexing	dims [ i ]
>2709	Identifier	i
>2710	Identifier	dims
>2711	Callee	Fraction
>2712	Identifier	Fraction
>2713	Identifier	inducedDim
>2714	Identifier	inducedDim
>2715	IdentifierDeclType	Fraction
>2716	CompoundStatement	 
>2717	ExpressionStatement	 
>2718	CallExpression	inducedDims . push_back ( inducedDim . getNumerator ( ) )
>2719	ArgumentList	inducedDim . getNumerator ( )
>2720	Argument	inducedDim . getNumerator ( )
>2721	CallExpression	inducedDim . getNumerator ( )
>2722	ArgumentList	 
>2723	Callee	inducedDim . getNumerator
>2724	MemberAccess	inducedDim . getNumerator
>2725	Identifier	getNumerator
>2726	Identifier	inducedDim
>2727	Callee	inducedDims . push_back
>2728	MemberAccess	inducedDims . push_back
>2729	Identifier	push_back
>2730	Identifier	inducedDims
>2731	ExpressionStatement	 
>2732	CallExpression	inducedDim . reduce ( )
>2733	ArgumentList	 
>2734	Callee	inducedDim . reduce
>2735	MemberAccess	inducedDim . reduce
>2736	Identifier	reduce
>2737	Identifier	inducedDim
>2738	ExpressionStatement	 
>2739	CallExpression	NTA_CHECK ( inducedDim . isNaturalNumber ( ) )
>2740	ArgumentList	inducedDim . isNaturalNumber ( )
>2741	Argument	inducedDim . isNaturalNumber ( )
>2742	CallExpression	inducedDim . isNaturalNumber ( )
>2743	ArgumentList	 
>2744	Callee	inducedDim . isNaturalNumber
>2745	MemberAccess	inducedDim . isNaturalNumber
>2746	Identifier	isNaturalNumber
>2747	Identifier	inducedDim
>2748	Callee	NTA_CHECK
>2749	Identifier	NTA_CHECK
>2750	IdentifierDeclStatement	 
>2751	IdentifierDecl	inducedDim = Fraction ( dims [ i ] ) * ( workingParams_ . rfSize [ i ] - workingParams_ . rfOverlap [ i ] ) + workingParams_ \
>2752	AssignmentExpr	inducedDim = Fraction ( dims [ i ] ) * ( workingParams_ . rfSize [ i ] - workingParams_ . rfOverlap [ \
>2753	AdditiveExpression	Fraction ( dims [ i ] ) * ( workingParams_ . rfSize [ i ] - workingParams_ . rfOverlap [ i ] ) + workingParams_ \
>2754	AdditiveExpression	workingParams_ . rfOverlap [ i ] - workingParams_ . overhang [ i ] * 2
>2755	MultiplicativeExpression	workingParams_ . overhang [ i ] * 2
>2756	PrimaryExpression	2
>2757	ArrayIndexing	workingParams_ . overhang [ i ]
>2758	Identifier	i
>2759	MemberAccess	workingParams_ . overhang
>2760	Identifier	overhang
>2761	Identifier	workingParams_
>2762	ArrayIndexing	workingParams_ . rfOverlap [ i ]
>2763	Identifier	i
>2764	MemberAccess	workingParams_ . rfOverlap
>2765	Identifier	rfOverlap
>2766	Identifier	workingParams_
>2767	MultiplicativeExpression	Fraction ( dims [ i ] ) * ( workingParams_ . rfSize [ i ] - workingParams_ . rfOverlap [ i ] )
>2768	AdditiveExpression	workingParams_ . rfSize [ i ] - workingParams_ . rfOverlap [ i ]
>2769	ArrayIndexing	workingParams_ . rfOverlap [ i ]
>2770	Identifier	i
>2771	MemberAccess	workingParams_ . rfOverlap
>2772	Identifier	rfOverlap
>2773	Identifier	workingParams_
>2774	ArrayIndexing	workingParams_ . rfSize [ i ]
>2775	Identifier	i
>2776	MemberAccess	workingParams_ . rfSize
>2777	Identifier	rfSize
>2778	Identifier	workingParams_
>2779	CallExpression	Fraction ( dims [ i ] )
>2780	ArgumentList	dims [ i ]
>2781	Argument	dims [ i ]
>2782	ArrayIndexing	dims [ i ]
>2783	Identifier	i
>2784	Identifier	dims
>2785	Callee	Fraction
>2786	Identifier	Fraction
>2787	Identifier	inducedDim
>2788	Identifier	inducedDim
>2789	IdentifierDeclType	Fraction
>2790	Condition	 
>2791	EqualityExpression	workingParams_ . span [ i ] . getNumerator ( ) == 0
>2792	PrimaryExpression	0
>2793	CallExpression	workingParams_ . span [ i ] . getNumerator ( )
>2794	ArgumentList	 
>2795	Callee	workingParams_ . span [ i ] . getNumerator
>2796	MemberAccess	workingParams_ . span [ i ] . getNumerator
>2797	Identifier	getNumerator
>2798	ArrayIndexing	workingParams_ . span [ i ]
>2799	Identifier	i
>2800	MemberAccess	workingParams_ . span
>2801	Identifier	span
>2802	Identifier	workingParams_
>2803	IfStatement	if ( ! workingParams_ . rfSize [ i ] . isNaturalNumber ( ) )
>2804	CompoundStatement	 
>2805	IfStatement	if ( ! validityCheck . isNaturalNumber ( ) )
>2806	CompoundStatement	 
>2807	ExpressionStatement	 
>2808	PrimaryExpression	\" configuration is not possible.\"
>2809	Statement	 
>2810	Statement	 
>2811	Statement	 
>2812	Statement	 
>2813	Statement	 
>2814	Statement	 
>2815	Statement	 
>2816	Statement	 
>2817	Statement	 
>2818	Statement	 
>2819	Statement	 
>2820	Statement	 
>2821	Statement	 
>2822	Statement	 
>2823	Statement	 
>2824	Statement	 
>2825	Statement	 
>2826	Statement	 
>2827	Statement	 
>2828	Statement	 
>2829	Statement	 
>2830	Statement	 
>2831	Statement	 
>2832	Statement	 
>2833	Statement	 
>2834	Statement	 
>2835	Statement	 
>2836	Statement	 
>2837	Statement	 
>2838	Statement	 
>2839	Statement	 
>2840	Statement	 
>2841	Statement	 
>2842	Statement	 
>2843	Statement	 
>2844	Statement	 
>2845	Statement	 
>2846	Statement	 
>2847	Statement	 
>2848	Statement	 
>2849	Statement	 
>2850	Statement	 
>2851	Statement	 
>2852	Statement	 
>2853	Statement	 
>2854	Statement	 
>2855	Statement	 
>2856	Condition	 
>2857	UnaryOp	! validityCheck . isNaturalNumber ( )
>2858	CallExpression	validityCheck . isNaturalNumber ( )
>2859	ArgumentList	 
>2860	Callee	validityCheck . isNaturalNumber
>2861	MemberAccess	validityCheck . isNaturalNumber
>2862	Identifier	isNaturalNumber
>2863	Identifier	validityCheck
>2864	UnaryOperator	!
>2865	IdentifierDeclStatement	 
>2866	IdentifierDecl	validityCheck = workingParams_ . rfSize [ i ] * elementCount_
>2867	AssignmentExpr	validityCheck = workingParams_ . rfSize [ i ] * elementCount_
>2868	MultiplicativeExpression	workingParams_ . rfSize [ i ] * elementCount_
>2869	Identifier	elementCount_
>2870	ArrayIndexing	workingParams_ . rfSize [ i ]
>2871	Identifier	i
>2872	MemberAccess	workingParams_ . rfSize
>2873	Identifier	rfSize
>2874	Identifier	workingParams_
>2875	Identifier	validityCheck
>2876	Identifier	validityCheck
>2877	IdentifierDeclType	Fraction
>2878	IfStatement	if ( rfGranularity_ != elementsGranularity )
>2879	CompoundStatement	 
>2880	ExpressionStatement	 
>2881	PrimaryExpression	\"rfGranularity is set to elements.\"
>2882	Statement	 
>2883	Statement	 
>2884	Statement	 
>2885	Statement	 
>2886	Statement	 
>2887	Statement	 
>2888	Statement	 
>2889	Statement	 
>2890	Statement	 
>2891	Statement	 
>2892	Statement	 
>2893	Statement	 
>2894	Statement	 
>2895	Statement	 
>2896	Statement	 
>2897	Statement	 
>2898	Statement	 
>2899	Statement	 
>2900	Statement	 
>2901	Statement	 
>2902	Statement	 
>2903	Statement	 
>2904	Statement	 
>2905	Statement	 
>2906	Statement	 
>2907	Statement	 
>2908	Statement	 
>2909	Statement	 
>2910	Statement	 
>2911	Statement	 
>2912	Statement	 
>2913	Statement	 
>2914	Statement	 
>2915	Statement	 
>2916	Statement	 
>2917	Statement	 
>2918	Statement	 
>2919	Statement	 
>2920	Statement	 
>2921	Condition	 
>2922	EqualityExpression	rfGranularity_ != elementsGranularity
>2923	Identifier	elementsGranularity
>2924	Identifier	rfGranularity_
>2925	Condition	 
>2926	UnaryOp	! workingParams_ . rfSize [ i ] . isNaturalNumber ( )
>2927	CallExpression	workingParams_ . rfSize [ i ] . isNaturalNumber ( )
>2928	ArgumentList	 
>2929	Callee	workingParams_ . rfSize [ i ] . isNaturalNumber
>2930	MemberAccess	workingParams_ . rfSize [ i ] . isNaturalNumber
>2931	Identifier	isNaturalNumber
>2932	ArrayIndexing	workingParams_ . rfSize [ i ]
>2933	Identifier	i
>2934	MemberAccess	workingParams_ . rfSize
>2935	Identifier	rfSize
>2936	Identifier	workingParams_
>2937	UnaryOperator	!
>2938	IncDecOp	 
>2939	IncDec	++
>2940	Identifier	i
>2941	Condition	 
>2942	RelationalExpression	i < dims . size ( )
>2943	CallExpression	dims . size ( )
>2944	ArgumentList	 
>2945	Callee	dims . size
>2946	MemberAccess	dims . size
>2947	Identifier	size
>2948	Identifier	dims
>2949	Identifier	i
>2950	ForInit	 
>2951	IdentifierDeclStatement	size_t i = 0 ;
>2952	IdentifierDecl	i = 0
>2953	AssignmentExpr	i = 0
>2954	PrimaryExpression	0
>2955	Identifier	i
>2956	Identifier	i
>2957	IdentifierDeclType	size_t
>2958	Condition	 
>2959	Identifier	strict_
>2960	Label	 
>2961	Identifier	inMapping
>2962	Condition	 
>2963	Identifier	mapping_
>2964	IdentifierDeclStatement	 
>2965	IdentifierDecl	inducedDims
>2966	Identifier	inducedDims
>2967	IdentifierDeclType	Dimensions
>2968	IfStatement	if ( parameterDimensionality_ != 1 )
>2969	CompoundStatement	 
>2970	IfStatement	if ( parameterDimensionality_ != dims . size ( ) )
>2971	CompoundStatement	 
>2972	ExpressionStatement	 
>2973	ShiftExpression	\" dimensionality \" << dims . size ( )
>2974	CallExpression	dims . size ( )
>2975	ArgumentList	 
>2976	Callee	dims . size
>2977	MemberAccess	dims . size
>2978	Identifier	size
>2979	Identifier	dims
>2980	PrimaryExpression	\" dimensionality \"
>2981	Statement	 
>2982	Statement	 
>2983	Statement	 
>2984	Statement	 
>2985	Statement	 
>2986	Statement	 
>2987	Statement	 
>2988	Statement	 
>2989	Condition	 
>2990	EqualityExpression	parameterDimensionality_ != dims . size ( )
>2991	CallExpression	dims . size ( )
>2992	ArgumentList	 
>2993	Callee	dims . size
>2994	MemberAccess	dims . size
>2995	Identifier	size
>2996	Identifier	dims
>2997	Identifier	parameterDimensionality_
>2998	Condition	 
>2999	EqualityExpression	parameterDimensionality_ != 1
>3000	PrimaryExpression	1
>3001	Identifier	parameterDimensionality_
>3002	IfStatement	if ( dims . isDontcare ( ) )
>3003	ExpressionStatement	 
>3004	ShiftExpression	NTA_THROW << \"Invalid dontcare destination dimensions for link \" << link_ -> toString ( )
>3005	ShiftExpression	\"Invalid dontcare destination dimensions for link \" << link_ -> toString ( )
>3006	CallExpression	link_ -> toString ( )
>3007	ArgumentList	 
>3008	Callee	link_ -> toString
>3009	PtrMemberAccess	link_ -> toString
>3010	Identifier	toString
>3011	Identifier	link_
>3012	PrimaryExpression	\"Invalid dontcare destination dimensions for link \"
>3013	Identifier	NTA_THROW
>3014	Condition	 
>3015	CallExpression	dims . isDontcare ( )
>3016	ArgumentList	 
>3017	Callee	dims . isDontcare
>3018	MemberAccess	dims . isDontcare
>3019	Identifier	isDontcare
>3020	Identifier	dims
>3021	IfStatement	if ( dims . isUnspecified ( ) )
>3022	ExpressionStatement	 
>3023	ShiftExpression	NTA_THROW << \"Invalid unspecified destination dimensions for link \" << link_ -> toString ( )
>3024	ShiftExpression	\"Invalid unspecified destination dimensions for link \" << link_ -> toString ( )
>3025	CallExpression	link_ -> toString ( )
>3026	ArgumentList	 
>3027	Callee	link_ -> toString
>3028	PtrMemberAccess	link_ -> toString
>3029	Identifier	toString
>3030	Identifier	link_
>3031	PrimaryExpression	\"Invalid unspecified destination dimensions for link \"
>3032	Identifier	NTA_THROW
>3033	Condition	 
>3034	CallExpression	dims . isUnspecified ( )
>3035	ArgumentList	 
>3036	Callee	dims . isUnspecified
>3037	MemberAccess	dims . isUnspecified
>3038	Identifier	isUnspecified
>3039	Identifier	dims
>3040	ExpressionStatement	 
>3041	ShiftExpression	NTA_CHECK ( destDimensions_ . isUnspecified ( ) ) << \"Internal error on link \" << link_ -> toString ( )
>3042	ShiftExpression	\"Internal error on link \" << link_ -> toString ( )
>3043	CallExpression	link_ -> toString ( )
>3044	ArgumentList	 
>3045	Callee	link_ -> toString
>3046	PtrMemberAccess	link_ -> toString
>3047	Identifier	toString
>3048	Identifier	link_
>3049	PrimaryExpression	\"Internal error on link \"
>3050	CallExpression	NTA_CHECK ( destDimensions_ . isUnspecified ( ) )
>3051	ArgumentList	destDimensions_ . isUnspecified ( )
>3052	Argument	destDimensions_ . isUnspecified ( )
>3053	CallExpression	destDimensions_ . isUnspecified ( )
>3054	ArgumentList	 
>3055	Callee	destDimensions_ . isUnspecified
>3056	MemberAccess	destDimensions_ . isUnspecified
>3057	Identifier	isUnspecified
>3058	Identifier	destDimensions_
>3059	Callee	NTA_CHECK
>3060	Identifier	NTA_CHECK
>3061	ExpressionStatement	 
>3062	ShiftExpression	NTA_CHECK ( srcDimensions_ . isUnspecified ( ) ) << \"Internal error on link \" << link_ -> toString ( )
>3063	ShiftExpression	\"Internal error on link \" << link_ -> toString ( )
>3064	CallExpression	link_ -> toString ( )
>3065	ArgumentList	 
>3066	Callee	link_ -> toString
>3067	PtrMemberAccess	link_ -> toString
>3068	Identifier	toString
>3069	Identifier	link_
>3070	PrimaryExpression	\"Internal error on link \"
>3071	CallExpression	NTA_CHECK ( srcDimensions_ . isUnspecified ( ) )
>3072	ArgumentList	srcDimensions_ . isUnspecified ( )
>3073	Argument	srcDimensions_ . isUnspecified ( )
>3074	CallExpression	srcDimensions_ . isUnspecified ( )
>3075	ArgumentList	 
>3076	Callee	srcDimensions_ . isUnspecified
>3077	MemberAccess	srcDimensions_ . isUnspecified
>3078	Identifier	isUnspecified
>3079	Identifier	srcDimensions_
>3080	Callee	NTA_CHECK
>3081	Identifier	NTA_CHECK
>3082	IfStatement	if ( dims . isOnes ( ) && dims . size ( ) != parameterDimensionality_ )
>3083	ExpressionStatement	 
>3084	CallExpression	dims . promote ( parameterDimensionality_ )
>3085	ArgumentList	parameterDimensionality_
>3086	Argument	parameterDimensionality_
>3087	Identifier	parameterDimensionality_
>3088	Callee	dims . promote
>3089	MemberAccess	dims . promote
>3090	Identifier	promote
>3091	Identifier	dims
>3092	Condition	 
>3093	AndExpression	dims . isOnes ( ) && dims . size ( ) != parameterDimensionality_
>3094	EqualityExpression	dims . size ( ) != parameterDimensionality_
>3095	Identifier	parameterDimensionality_
>3096	CallExpression	dims . size ( )
>3097	ArgumentList	 
>3098	Callee	dims . size
>3099	MemberAccess	dims . size
>3100	Identifier	size
>3101	Identifier	dims
>3102	CallExpression	dims . isOnes ( )
>3103	ArgumentList	 
>3104	Callee	dims . isOnes
>3105	MemberAccess	dims . isOnes
>3106	Identifier	isOnes
>3107	Identifier	dims
>3108	IdentifierDeclStatement	 
>3109	IdentifierDecl	dims = specifiedDims
>3110	AssignmentExpr	dims = specifiedDims
>3111	Identifier	specifiedDims
>3112	Identifier	specifiedDims
>3113	Identifier	dims
>3114	IdentifierDeclType	Dimensions
>3167	FunctionDef	UniformLinkPolicy 
>3168	ParameterList	 
>3169	ReturnType	const Dimensions &
>3170	CompoundStatement	 
>3171	ReturnStatement	 
>3172	Identifier	srcDimensions_
>3177	FunctionDef	UniformLinkPolicy 
>3178	ParameterList	 
>3179	ReturnType	const Dimensions &
>3180	CompoundStatement	 
>3181	ReturnStatement	 
>3182	Identifier	destDimensions_
>3187	FunctionDef	UniformLinkPolicy 
>3188	ParameterList	size_t elementCount
>3189	Parameter	 
>3190	Identifier	elementCount
>3191	ParameterType	size_t
>3192	ReturnType	void
>3193	CompoundStatement	 
>3194	ExpressionStatement	 
>3195	AssignmentExpr	elementCount_ = elementCount
>3196	Identifier	elementCount
>3197	Identifier	elementCount_
>3203	FunctionDef	UniformLinkPolicy 
>3204	ParameterList	Coordinate nodeCoordinate , size_t dimension
>3205	Parameter	 
>3206	Identifier	dimension
>3207	ParameterType	size_t
>3208	Parameter	 
>3209	Identifier	nodeCoordinate
>3210	ParameterType	Coordinate
>3211	ReturnType	std 
>3212	CompoundStatement	 
>3213	ReturnStatement	 
>3214	Expression	std 
>3215	RelationalExpression	Fraction > ( lowerIndex , upperIndex )
>3216	Expression	lowerIndex , upperIndex
>3217	Identifier	upperIndex
>3218	Identifier	lowerIndex
>3219	Identifier	Fraction
>3220	RelationalExpression	std 
>3221	Identifier	Fraction
>3222	Identifier	std 
>3223	SwitchStatement	switch ( mapping_ )
>3224	CompoundStatement	 
>3225	CompoundStatement	 
>3226	BreakStatement	 
>3227	ExpressionStatement	 
>3228	PrimaryExpression	\"implemented.\"
>3229	Statement	 
>3230	Statement	 
>3231	Statement	 
>3232	Label	 
>3233	Identifier	default
>3234	CompoundStatement	 
>3235	BreakStatement	 
>3236	IfStatement	if ( strict_ )
>3237	ElseStatement	else
>3238	CompoundStatement	 
>3239	IfStatement	if ( rfGranularity_ == nodesGranularity )
>3240	ElseStatement	else
>3241	CompoundStatement	 
>3242	IfStatement	if ( ! wholeElementCheck . isNaturalNumber ( ) )
>3243	CompoundStatement	 
>3244	ExpressionStatement	 
>3245	AssignmentExpr	upperIndex = Fraction ( ( wholeElementCheck . getNumerator ( ) / wholeElementCheck . getDenominator ( ) ) ) / \
>3246	MultiplicativeExpression	Fraction ( ( wholeElementCheck . getNumerator ( ) / wholeElementCheck . getDenominator ( ) ) ) / Fraction ( \
>3247	CallExpression	Fraction ( elementCount_ )
>3248	ArgumentList	elementCount_
>3249	Argument	elementCount_
>3250	Identifier	elementCount_
>3251	Callee	Fraction
>3252	Identifier	Fraction
>3253	CallExpression	Fraction ( ( wholeElementCheck . getNumerator ( ) / wholeElementCheck . getDenominator ( ) ) )
>3254	ArgumentList	wholeElementCheck . getNumerator ( ) / wholeElementCheck . getDenominator ( )
>3255	Argument	wholeElementCheck . getNumerator ( ) / wholeElementCheck . getDenominator ( )
>3256	MultiplicativeExpression	wholeElementCheck . getNumerator ( ) / wholeElementCheck . getDenominator ( )
>3257	CallExpression	wholeElementCheck . getDenominator ( )
>3258	ArgumentList	 
>3259	Callee	wholeElementCheck . getDenominator
>3260	MemberAccess	wholeElementCheck . getDenominator
>3261	Identifier	getDenominator
>3262	Identifier	wholeElementCheck
>3263	CallExpression	wholeElementCheck . getNumerator ( )
>3264	ArgumentList	 
>3265	Callee	wholeElementCheck . getNumerator
>3266	MemberAccess	wholeElementCheck . getNumerator
>3267	Identifier	getNumerator
>3268	Identifier	wholeElementCheck
>3269	Callee	Fraction
>3270	Identifier	Fraction
>3271	Identifier	upperIndex
>3272	Condition	 
>3273	UnaryOp	! wholeElementCheck . isNaturalNumber ( )
>3274	CallExpression	wholeElementCheck . isNaturalNumber ( )
>3275	ArgumentList	 
>3276	Callee	wholeElementCheck . isNaturalNumber
>3277	MemberAccess	wholeElementCheck . isNaturalNumber
>3278	Identifier	isNaturalNumber
>3279	Identifier	wholeElementCheck
>3280	UnaryOperator	!
>3281	ExpressionStatement	 
>3282	AssignmentExpr	wholeElementCheck = upperIndex * elementCount_
>3283	MultiplicativeExpression	upperIndex * elementCount_
>3284	Identifier	elementCount_
>3285	Identifier	upperIndex
>3286	Identifier	wholeElementCheck
>3287	IfStatement	if ( ! wholeElementCheck . isNaturalNumber ( ) )
>3288	CompoundStatement	 
>3289	ExpressionStatement	 
>3290	AssignmentExpr	lowerIndex = Fraction ( ( wholeElementCheck . getNumerator ( ) / wholeElementCheck . getDenominator ( ) ) + \
>3291	MultiplicativeExpression	Fraction ( ( wholeElementCheck . getNumerator ( ) / wholeElementCheck . getDenominator ( ) ) + 1 ) / \
>3292	CallExpression	Fraction ( elementCount_ )
>3293	ArgumentList	elementCount_
>3294	Argument	elementCount_
>3295	Identifier	elementCount_
>3296	Callee	Fraction
>3297	Identifier	Fraction
>3298	CallExpression	Fraction ( ( wholeElementCheck . getNumerator ( ) / wholeElementCheck . getDenominator ( ) ) + 1 )
>3299	ArgumentList	( wholeElementCheck . getNumerator ( ) / wholeElementCheck . getDenominator ( ) ) + 1
>3300	Argument	( wholeElementCheck . getNumerator ( ) / wholeElementCheck . getDenominator ( ) ) + 1
>3301	AdditiveExpression	( wholeElementCheck . getNumerator ( ) / wholeElementCheck . getDenominator ( ) ) + 1
>3302	PrimaryExpression	1
>3303	MultiplicativeExpression	wholeElementCheck . getNumerator ( ) / wholeElementCheck . getDenominator ( )
>3304	CallExpression	wholeElementCheck . getDenominator ( )
>3305	ArgumentList	 
>3306	Callee	wholeElementCheck . getDenominator
>3307	MemberAccess	wholeElementCheck . getDenominator
>3308	Identifier	getDenominator
>3309	Identifier	wholeElementCheck
>3310	CallExpression	wholeElementCheck . getNumerator ( )
>3311	ArgumentList	 
>3312	Callee	wholeElementCheck . getNumerator
>3313	MemberAccess	wholeElementCheck . getNumerator
>3314	Identifier	getNumerator
>3315	Identifier	wholeElementCheck
>3316	Callee	Fraction
>3317	Identifier	Fraction
>3318	Identifier	lowerIndex
>3319	Condition	 
>3320	UnaryOp	! wholeElementCheck . isNaturalNumber ( )
>3321	CallExpression	wholeElementCheck . isNaturalNumber ( )
>3322	ArgumentList	 
>3323	Callee	wholeElementCheck . isNaturalNumber
>3324	MemberAccess	wholeElementCheck . isNaturalNumber
>3325	Identifier	isNaturalNumber
>3326	Identifier	wholeElementCheck
>3327	UnaryOperator	!
>3328	IdentifierDeclStatement	 
>3329	IdentifierDecl	wholeElementCheck = lowerIndex * elementCount_
>3330	AssignmentExpr	wholeElementCheck = lowerIndex * elementCount_
>3331	MultiplicativeExpression	lowerIndex * elementCount_
>3332	Identifier	elementCount_
>3333	Identifier	lowerIndex
>3334	Identifier	wholeElementCheck
>3335	Identifier	wholeElementCheck
>3336	IdentifierDeclType	Fraction
>3337	CompoundStatement	 
>3338	IfStatement	if ( ! upperIndex . isNaturalNumber ( ) )
>3339	CompoundStatement	 
>3340	ExpressionStatement	 
>3341	AssignmentExpr	upperIndex = Fraction ( upperIndex . getNumerator ( ) / upperIndex . getDenominator ( ) )
>3342	CallExpression	Fraction ( upperIndex . getNumerator ( ) / upperIndex . getDenominator ( ) )
>3343	ArgumentList	upperIndex . getNumerator ( ) / upperIndex . getDenominator ( )
>3344	Argument	upperIndex . getNumerator ( ) / upperIndex . getDenominator ( )
>3345	MultiplicativeExpression	upperIndex . getNumerator ( ) / upperIndex . getDenominator ( )
>3346	CallExpression	upperIndex . getDenominator ( )
>3347	ArgumentList	 
>3348	Callee	upperIndex . getDenominator
>3349	MemberAccess	upperIndex . getDenominator
>3350	Identifier	getDenominator
>3351	Identifier	upperIndex
>3352	CallExpression	upperIndex . getNumerator ( )
>3353	ArgumentList	 
>3354	Callee	upperIndex . getNumerator
>3355	MemberAccess	upperIndex . getNumerator
>3356	Identifier	getNumerator
>3357	Identifier	upperIndex
>3358	Callee	Fraction
>3359	Identifier	Fraction
>3360	Identifier	upperIndex
>3361	Condition	 
>3362	UnaryOp	! upperIndex . isNaturalNumber ( )
>3363	CallExpression	upperIndex . isNaturalNumber ( )
>3364	ArgumentList	 
>3365	Callee	upperIndex . isNaturalNumber
>3366	MemberAccess	upperIndex . isNaturalNumber
>3367	Identifier	isNaturalNumber
>3368	Identifier	upperIndex
>3369	UnaryOperator	!
>3370	IfStatement	if ( ! lowerIndex . isNaturalNumber ( ) )
>3371	CompoundStatement	 
>3372	ExpressionStatement	 
>3373	AssignmentExpr	lowerIndex = Fraction ( lowerIndex . getNumerator ( ) / lowerIndex . getDenominator ( ) )
>3374	CallExpression	Fraction ( lowerIndex . getNumerator ( ) / lowerIndex . getDenominator ( ) )
>3375	ArgumentList	lowerIndex . getNumerator ( ) / lowerIndex . getDenominator ( )
>3376	Argument	lowerIndex . getNumerator ( ) / lowerIndex . getDenominator ( )
>3377	MultiplicativeExpression	lowerIndex . getNumerator ( ) / lowerIndex . getDenominator ( )
>3378	CallExpression	lowerIndex . getDenominator ( )
>3379	ArgumentList	 
>3380	Callee	lowerIndex . getDenominator
>3381	MemberAccess	lowerIndex . getDenominator
>3382	Identifier	getDenominator
>3383	Identifier	lowerIndex
>3384	CallExpression	lowerIndex . getNumerator ( )
>3385	ArgumentList	 
>3386	Callee	lowerIndex . getNumerator
>3387	MemberAccess	lowerIndex . getNumerator
>3388	Identifier	getNumerator
>3389	Identifier	lowerIndex
>3390	Callee	Fraction
>3391	Identifier	Fraction
>3392	Identifier	lowerIndex
>3393	Condition	 
>3394	UnaryOp	! lowerIndex . isNaturalNumber ( )
>3395	CallExpression	lowerIndex . isNaturalNumber ( )
>3396	ArgumentList	 
>3397	Callee	lowerIndex . isNaturalNumber
>3398	MemberAccess	lowerIndex . isNaturalNumber
>3399	Identifier	isNaturalNumber
>3400	Identifier	lowerIndex
>3401	UnaryOperator	!
>3402	Condition	 
>3403	EqualityExpression	rfGranularity_ == nodesGranularity
>3404	Identifier	nodesGranularity
>3405	Identifier	rfGranularity_
>3406	ExpressionStatement	 
>3407	AssignmentExpr	upperIndex = lowerIndex + effectiveRfSize - Fraction ( 1 )
>3408	AdditiveExpression	lowerIndex + effectiveRfSize - Fraction ( 1 )
>3409	AdditiveExpression	effectiveRfSize - Fraction ( 1 )
>3410	CallExpression	Fraction ( 1 )
>3411	ArgumentList	1
>3412	Argument	1
>3413	PrimaryExpression	1
>3414	Callee	Fraction
>3415	Identifier	Fraction
>3416	Identifier	effectiveRfSize
>3417	Identifier	lowerIndex
>3418	Identifier	upperIndex
>3419	ExpressionStatement	 
>3420	AssignmentExpr	lowerIndex = effectiveSpan * nodeInSpan + ( Fraction ( nodeCoordinate [ dimension ] ) - destNodesPerSpan * \
>3421	AdditiveExpression	effectiveSpan * nodeInSpan + ( Fraction ( nodeCoordinate [ dimension ] ) - destNodesPerSpan * nodeInSpan ) * ( \
>3422	AdditiveExpression	( Fraction ( nodeCoordinate [ dimension ] ) - destNodesPerSpan * nodeInSpan ) * ( effectiveRfSize - workingParams_ \
>3423	ArrayIndexing	workingParams_ . overhang [ dimension ]
>3424	Identifier	dimension
>3425	MemberAccess	workingParams_ . overhang
>3426	Identifier	overhang
>3427	Identifier	workingParams_
>3428	MultiplicativeExpression	( Fraction ( nodeCoordinate [ dimension ] ) - destNodesPerSpan * nodeInSpan ) * ( effectiveRfSize - workingParams_ \
>3429	AdditiveExpression	effectiveRfSize - workingParams_ . rfOverlap [ dimension ]
>3430	ArrayIndexing	workingParams_ . rfOverlap [ dimension ]
>3431	Identifier	dimension
>3432	MemberAccess	workingParams_ . rfOverlap
>3433	Identifier	rfOverlap
>3434	Identifier	workingParams_
>3435	Identifier	effectiveRfSize
>3436	AdditiveExpression	Fraction ( nodeCoordinate [ dimension ] ) - destNodesPerSpan * nodeInSpan
>3437	MultiplicativeExpression	destNodesPerSpan * nodeInSpan
>3438	Identifier	nodeInSpan
>3439	Identifier	destNodesPerSpan
>3440	CallExpression	Fraction ( nodeCoordinate [ dimension ] )
>3441	ArgumentList	nodeCoordinate [ dimension ]
>3442	Argument	nodeCoordinate [ dimension ]
>3443	ArrayIndexing	nodeCoordinate [ dimension ]
>3444	Identifier	dimension
>3445	Identifier	nodeCoordinate
>3446	Callee	Fraction
>3447	Identifier	Fraction
>3448	MultiplicativeExpression	effectiveSpan * nodeInSpan
>3449	Identifier	nodeInSpan
>3450	Identifier	effectiveSpan
>3451	Identifier	lowerIndex
>3452	IdentifierDeclStatement	 
>3453	IdentifierDecl	nodeInSpan = nodeInSpanFrac . getNumerator ( ) / nodeInSpanFrac . getDenominator ( )
>3454	AssignmentExpr	nodeInSpan = nodeInSpanFrac . getNumerator ( ) / nodeInSpanFrac . getDenominator ( )
>3455	MultiplicativeExpression	nodeInSpanFrac . getNumerator ( ) / nodeInSpanFrac . getDenominator ( )
>3456	CallExpression	nodeInSpanFrac . getDenominator ( )
>3457	ArgumentList	 
>3458	Callee	nodeInSpanFrac . getDenominator
>3459	MemberAccess	nodeInSpanFrac . getDenominator
>3460	Identifier	getDenominator
>3461	Identifier	nodeInSpanFrac
>3462	CallExpression	nodeInSpanFrac . getNumerator ( )
>3463	ArgumentList	 
>3464	Callee	nodeInSpanFrac . getNumerator
>3465	MemberAccess	nodeInSpanFrac . getNumerator
>3466	Identifier	getNumerator
>3467	Identifier	nodeInSpanFrac
>3468	Identifier	nodeInSpan
>3469	Identifier	nodeInSpan
>3470	IdentifierDeclType	size_t
>3471	IdentifierDeclStatement	 
>3472	IdentifierDecl	nodeInSpanFrac = Fraction ( nodeCoordinate [ dimension ] ) / destNodesPerSpan
>3473	AssignmentExpr	nodeInSpanFrac = Fraction ( nodeCoordinate [ dimension ] ) / destNodesPerSpan
>3474	MultiplicativeExpression	Fraction ( nodeCoordinate [ dimension ] ) / destNodesPerSpan
>3475	Identifier	destNodesPerSpan
>3476	CallExpression	Fraction ( nodeCoordinate [ dimension ] )
>3477	ArgumentList	nodeCoordinate [ dimension ]
>3478	Argument	nodeCoordinate [ dimension ]
>3479	ArrayIndexing	nodeCoordinate [ dimension ]
>3480	Identifier	dimension
>3481	Identifier	nodeCoordinate
>3482	Callee	Fraction
>3483	Identifier	Fraction
>3484	Identifier	nodeInSpanFrac
>3485	Identifier	nodeInSpanFrac
>3486	IdentifierDeclType	Fraction
>3487	IdentifierDeclStatement	 
>3488	IdentifierDecl	destNodesPerSpan = ( workingParams_ . span [ dimension ] - workingParams_ . rfOverlap [ dimension ] ) / ( workingParams_ \
>3489	AssignmentExpr	destNodesPerSpan = ( workingParams_ . span [ dimension ] - workingParams_ . rfOverlap [ dimension ] ) / ( \
>3490	MultiplicativeExpression	( workingParams_ . span [ dimension ] - workingParams_ . rfOverlap [ dimension ] ) / ( workingParams_ \
>3491	AdditiveExpression	workingParams_ . rfSize [ dimension ] - workingParams_ . rfOverlap [ dimension ]
>3492	ArrayIndexing	workingParams_ . rfOverlap [ dimension ]
>3493	Identifier	dimension
>3494	MemberAccess	workingParams_ . rfOverlap
>3495	Identifier	rfOverlap
>3496	Identifier	workingParams_
>3497	ArrayIndexing	workingParams_ . rfSize [ dimension ]
>3498	Identifier	dimension
>3499	MemberAccess	workingParams_ . rfSize
>3500	Identifier	rfSize
>3501	Identifier	workingParams_
>3502	AdditiveExpression	workingParams_ . span [ dimension ] - workingParams_ . rfOverlap [ dimension ]
>3503	ArrayIndexing	workingParams_ . rfOverlap [ dimension ]
>3504	Identifier	dimension
>3505	MemberAccess	workingParams_ . rfOverlap
>3506	Identifier	rfOverlap
>3507	Identifier	workingParams_
>3508	ArrayIndexing	workingParams_ . span [ dimension ]
>3509	Identifier	dimension
>3510	MemberAccess	workingParams_ . span
>3511	Identifier	span
>3512	Identifier	workingParams_
>3513	Identifier	destNodesPerSpan
>3514	Identifier	destNodesPerSpan
>3515	IdentifierDeclType	Fraction
>3516	IdentifierDeclStatement	 
>3517	IdentifierDecl	effectiveSpan = workingParams_ . span [ dimension ] + overagePerSpan
>3518	AssignmentExpr	effectiveSpan = workingParams_ . span [ dimension ] + overagePerSpan
>3519	AdditiveExpression	workingParams_ . span [ dimension ] + overagePerSpan
>3520	Identifier	overagePerSpan
>3521	ArrayIndexing	workingParams_ . span [ dimension ]
>3522	Identifier	dimension
>3523	MemberAccess	workingParams_ . span
>3524	Identifier	span
>3525	Identifier	workingParams_
>3526	Identifier	effectiveSpan
>3527	Identifier	effectiveSpan
>3528	IdentifierDeclType	Fraction
>3529	IdentifierDeclStatement	 
>3530	IdentifierDecl	effectiveRfSize = workingParams_ . rfSize [ dimension ] + ( overagePerSpan / numRfsPerSpan )
>3531	AssignmentExpr	effectiveRfSize = workingParams_ . rfSize [ dimension ] + ( overagePerSpan / numRfsPerSpan )
>3532	AdditiveExpression	workingParams_ . rfSize [ dimension ] + ( overagePerSpan / numRfsPerSpan )
>3533	MultiplicativeExpression	overagePerSpan / numRfsPerSpan
>3534	Identifier	numRfsPerSpan
>3535	Identifier	overagePerSpan
>3536	ArrayIndexing	workingParams_ . rfSize [ dimension ]
>3537	Identifier	dimension
>3538	MemberAccess	workingParams_ . rfSize
>3539	Identifier	rfSize
>3540	Identifier	workingParams_
>3541	Identifier	effectiveRfSize
>3542	Identifier	effectiveRfSize
>3543	IdentifierDeclType	Fraction
>3544	IdentifierDeclStatement	 
>3545	IdentifierDecl	numRfsPerSpan = ( workingParams_ . span [ dimension ] - workingParams_ . rfSize [ dimension ] ) / ( workingParams_ \
>3546	AssignmentExpr	numRfsPerSpan = ( workingParams_ . span [ dimension ] - workingParams_ . rfSize [ dimension ] ) / ( workingParams_ \
>3547	AdditiveExpression	( workingParams_ . span [ dimension ] - workingParams_ . rfSize [ dimension ] ) / ( workingParams_ . \
>3548	PrimaryExpression	1
>3549	MultiplicativeExpression	( workingParams_ . span [ dimension ] - workingParams_ . rfSize [ dimension ] ) / ( workingParams_ . \
>3550	AdditiveExpression	workingParams_ . rfSize [ dimension ] - workingParams_ . rfOverlap [ dimension ]
>3551	ArrayIndexing	workingParams_ . rfOverlap [ dimension ]
>3552	Identifier	dimension
>3553	MemberAccess	workingParams_ . rfOverlap
>3554	Identifier	rfOverlap
>3555	Identifier	workingParams_
>3556	ArrayIndexing	workingParams_ . rfSize [ dimension ]
>3557	Identifier	dimension
>3558	MemberAccess	workingParams_ . rfSize
>3559	Identifier	rfSize
>3560	Identifier	workingParams_
>3561	AdditiveExpression	workingParams_ . span [ dimension ] - workingParams_ . rfSize [ dimension ]
>3562	ArrayIndexing	workingParams_ . rfSize [ dimension ]
>3563	Identifier	dimension
>3564	MemberAccess	workingParams_ . rfSize
>3565	Identifier	rfSize
>3566	Identifier	workingParams_
>3567	ArrayIndexing	workingParams_ . span [ dimension ]
>3568	Identifier	dimension
>3569	MemberAccess	workingParams_ . span
>3570	Identifier	span
>3571	Identifier	workingParams_
>3572	Identifier	numRfsPerSpan
>3573	Identifier	numRfsPerSpan
>3574	IdentifierDeclType	Fraction
>3575	IdentifierDeclStatement	 
>3576	IdentifierDecl	overagePerSpan = srcNodeOverage / numberOfSpans
>3577	AssignmentExpr	overagePerSpan = srcNodeOverage / numberOfSpans
>3578	MultiplicativeExpression	srcNodeOverage / numberOfSpans
>3579	Identifier	numberOfSpans
>3580	Identifier	srcNodeOverage
>3581	Identifier	overagePerSpan
>3582	Identifier	overagePerSpan
>3583	IdentifierDeclType	Fraction
>3584	ExpressionStatement	 
>3585	CallExpression	NTA_CHECK ( numberOfSpans . isNaturalNumber ( ) )
>3586	ArgumentList	numberOfSpans . isNaturalNumber ( )
>3587	Argument	numberOfSpans . isNaturalNumber ( )
>3588	CallExpression	numberOfSpans . isNaturalNumber ( )
>3589	ArgumentList	 
>3590	Callee	numberOfSpans . isNaturalNumber
>3591	MemberAccess	numberOfSpans . isNaturalNumber
>3592	Identifier	isNaturalNumber
>3593	Identifier	numberOfSpans
>3594	Callee	NTA_CHECK
>3595	Identifier	NTA_CHECK
>3596	IdentifierDeclStatement	 
>3597	IdentifierDecl	numberOfSpans = ( Fraction ( srcDimensions_ [ dimension ] ) + workingParams_ . overhang [ dimension ] * 2 - srcNodeOverage ) / \
>3598	AssignmentExpr	numberOfSpans = ( Fraction ( srcDimensions_ [ dimension ] ) + workingParams_ . overhang [ dimension ] * \
>3599	MultiplicativeExpression	( Fraction ( srcDimensions_ [ dimension ] ) + workingParams_ . overhang [ dimension ] * 2 - srcNodeOverage ) / \
>3600	ArrayIndexing	workingParams_ . span [ dimension ]
>3601	Identifier	dimension
>3602	MemberAccess	workingParams_ . span
>3603	Identifier	span
>3604	Identifier	workingParams_
>3605	AdditiveExpression	Fraction ( srcDimensions_ [ dimension ] ) + workingParams_ . overhang [ dimension ] * 2 - srcNodeOverage
>3606	AdditiveExpression	workingParams_ . overhang [ dimension ] * 2 - srcNodeOverage
>3607	Identifier	srcNodeOverage
>3608	MultiplicativeExpression	workingParams_ . overhang [ dimension ] * 2
>3609	PrimaryExpression	2
>3610	ArrayIndexing	workingParams_ . overhang [ dimension ]
>3611	Identifier	dimension
>3612	MemberAccess	workingParams_ . overhang
>3613	Identifier	overhang
>3614	Identifier	workingParams_
>3615	CallExpression	Fraction ( srcDimensions_ [ dimension ] )
>3616	ArgumentList	srcDimensions_ [ dimension ]
>3617	Argument	srcDimensions_ [ dimension ]
>3618	ArrayIndexing	srcDimensions_ [ dimension ]
>3619	Identifier	dimension
>3620	Identifier	srcDimensions_
>3621	Callee	Fraction
>3622	Identifier	Fraction
>3623	Identifier	numberOfSpans
>3624	Identifier	numberOfSpans
>3625	IdentifierDeclType	Fraction
>3626	IdentifierDeclStatement	 
>3627	IdentifierDecl	srcNodeOverage = ( Fraction ( srcDimensions_ [ dimension ] ) + workingParams_ . overhang [ dimension ] * 2 ) % workingParams_ \
>3628	AssignmentExpr	srcNodeOverage = ( Fraction ( srcDimensions_ [ dimension ] ) + workingParams_ . overhang [ dimension ] * \
>3629	MultiplicativeExpression	( Fraction ( srcDimensions_ [ dimension ] ) + workingParams_ . overhang [ dimension ] * 2 ) % workingParams_ \
>3630	ArrayIndexing	workingParams_ . span [ dimension ]
>3631	Identifier	dimension
>3632	MemberAccess	workingParams_ . span
>3633	Identifier	span
>3634	Identifier	workingParams_
>3635	AdditiveExpression	Fraction ( srcDimensions_ [ dimension ] ) + workingParams_ . overhang [ dimension ] * 2
>3636	MultiplicativeExpression	workingParams_ . overhang [ dimension ] * 2
>3637	PrimaryExpression	2
>3638	ArrayIndexing	workingParams_ . overhang [ dimension ]
>3639	Identifier	dimension
>3640	MemberAccess	workingParams_ . overhang
>3641	Identifier	overhang
>3642	Identifier	workingParams_
>3643	CallExpression	Fraction ( srcDimensions_ [ dimension ] )
>3644	ArgumentList	srcDimensions_ [ dimension ]
>3645	Argument	srcDimensions_ [ dimension ]
>3646	ArrayIndexing	srcDimensions_ [ dimension ]
>3647	Identifier	dimension
>3648	Identifier	srcDimensions_
>3649	Callee	Fraction
>3650	Identifier	Fraction
>3651	Identifier	srcNodeOverage
>3652	Identifier	srcNodeOverage
>3653	IdentifierDeclType	Fraction
>3654	CompoundStatement	 
>3655	ExpressionStatement	 
>3656	AssignmentExpr	upperIndex = lowerIndex + workingParams_ . rfSize [ dimension ] - Fraction ( 1 )
>3657	AdditiveExpression	lowerIndex + workingParams_ . rfSize [ dimension ] - Fraction ( 1 )
>3658	AdditiveExpression	workingParams_ . rfSize [ dimension ] - Fraction ( 1 )
>3659	CallExpression	Fraction ( 1 )
>3660	ArgumentList	1
>3661	Argument	1
>3662	PrimaryExpression	1
>3663	Callee	Fraction
>3664	Identifier	Fraction
>3665	ArrayIndexing	workingParams_ . rfSize [ dimension ]
>3666	Identifier	dimension
>3667	MemberAccess	workingParams_ . rfSize
>3668	Identifier	rfSize
>3669	Identifier	workingParams_
>3670	Identifier	lowerIndex
>3671	Identifier	upperIndex
>3672	ExpressionStatement	 
>3673	AssignmentExpr	lowerIndex = workingParams_ . span [ dimension ] * nodeInSpan + ( Fraction ( nodeCoordinate [ dimension ] ) \
>3674	AdditiveExpression	workingParams_ . span [ dimension ] * nodeInSpan + ( Fraction ( nodeCoordinate [ dimension ] ) - destNodesPerSpan * \
>3675	AdditiveExpression	( Fraction ( nodeCoordinate [ dimension ] ) - destNodesPerSpan * nodeInSpan ) * ( workingParams_ . rfSize [ \
>3676	ArrayIndexing	workingParams_ . overhang [ dimension ]
>3677	Identifier	dimension
>3678	MemberAccess	workingParams_ . overhang
>3679	Identifier	overhang
>3680	Identifier	workingParams_
>3681	MultiplicativeExpression	( Fraction ( nodeCoordinate [ dimension ] ) - destNodesPerSpan * nodeInSpan ) * ( workingParams_ . rfSize [ \
>3682	AdditiveExpression	workingParams_ . rfSize [ dimension ] - workingParams_ . rfOverlap [ dimension ]
>3683	ArrayIndexing	workingParams_ . rfOverlap [ dimension ]
>3684	Identifier	dimension
>3685	MemberAccess	workingParams_ . rfOverlap
>3686	Identifier	rfOverlap
>3687	Identifier	workingParams_
>3688	ArrayIndexing	workingParams_ . rfSize [ dimension ]
>3689	Identifier	dimension
>3690	MemberAccess	workingParams_ . rfSize
>3691	Identifier	rfSize
>3692	Identifier	workingParams_
>3693	AdditiveExpression	Fraction ( nodeCoordinate [ dimension ] ) - destNodesPerSpan * nodeInSpan
>3694	MultiplicativeExpression	destNodesPerSpan * nodeInSpan
>3695	Identifier	nodeInSpan
>3696	Identifier	destNodesPerSpan
>3697	CallExpression	Fraction ( nodeCoordinate [ dimension ] )
>3698	ArgumentList	nodeCoordinate [ dimension ]
>3699	Argument	nodeCoordinate [ dimension ]
>3700	ArrayIndexing	nodeCoordinate [ dimension ]
>3701	Identifier	dimension
>3702	Identifier	nodeCoordinate
>3703	Callee	Fraction
>3704	Identifier	Fraction
>3705	MultiplicativeExpression	workingParams_ . span [ dimension ] * nodeInSpan
>3706	Identifier	nodeInSpan
>3707	ArrayIndexing	workingParams_ . span [ dimension ]
>3708	Identifier	dimension
>3709	MemberAccess	workingParams_ . span
>3710	Identifier	span
>3711	Identifier	workingParams_
>3712	Identifier	lowerIndex
>3713	IdentifierDeclStatement	 
>3714	IdentifierDecl	nodeInSpan = nodeInSpanFrac . getNumerator ( ) / nodeInSpanFrac . getDenominator ( )
>3715	AssignmentExpr	nodeInSpan = nodeInSpanFrac . getNumerator ( ) / nodeInSpanFrac . getDenominator ( )
>3716	MultiplicativeExpression	nodeInSpanFrac . getNumerator ( ) / nodeInSpanFrac . getDenominator ( )
>3717	CallExpression	nodeInSpanFrac . getDenominator ( )
>3718	ArgumentList	 
>3719	Callee	nodeInSpanFrac . getDenominator
>3720	MemberAccess	nodeInSpanFrac . getDenominator
>3721	Identifier	getDenominator
>3722	Identifier	nodeInSpanFrac
>3723	CallExpression	nodeInSpanFrac . getNumerator ( )
>3724	ArgumentList	 
>3725	Callee	nodeInSpanFrac . getNumerator
>3726	MemberAccess	nodeInSpanFrac . getNumerator
>3727	Identifier	getNumerator
>3728	Identifier	nodeInSpanFrac
>3729	Identifier	nodeInSpan
>3730	Identifier	nodeInSpan
>3731	IdentifierDeclType	size_t
>3732	IdentifierDeclStatement	 
>3733	IdentifierDecl	nodeInSpanFrac = Fraction ( nodeCoordinate [ dimension ] ) / destNodesPerSpan
>3734	AssignmentExpr	nodeInSpanFrac = Fraction ( nodeCoordinate [ dimension ] ) / destNodesPerSpan
>3735	MultiplicativeExpression	Fraction ( nodeCoordinate [ dimension ] ) / destNodesPerSpan
>3736	Identifier	destNodesPerSpan
>3737	CallExpression	Fraction ( nodeCoordinate [ dimension ] )
>3738	ArgumentList	nodeCoordinate [ dimension ]
>3739	Argument	nodeCoordinate [ dimension ]
>3740	ArrayIndexing	nodeCoordinate [ dimension ]
>3741	Identifier	dimension
>3742	Identifier	nodeCoordinate
>3743	Callee	Fraction
>3744	Identifier	Fraction
>3745	Identifier	nodeInSpanFrac
>3746	Identifier	nodeInSpanFrac
>3747	IdentifierDeclType	Fraction
>3748	IdentifierDeclStatement	 
>3749	IdentifierDecl	destNodesPerSpan = ( workingParams_ . span [ dimension ] - workingParams_ . rfOverlap [ dimension ] ) / ( workingParams_ \
>3750	AssignmentExpr	destNodesPerSpan = ( workingParams_ . span [ dimension ] - workingParams_ . rfOverlap [ dimension ] ) / ( \
>3751	MultiplicativeExpression	( workingParams_ . span [ dimension ] - workingParams_ . rfOverlap [ dimension ] ) / ( workingParams_ \
>3752	AdditiveExpression	workingParams_ . rfSize [ dimension ] - workingParams_ . rfOverlap [ dimension ]
>3753	ArrayIndexing	workingParams_ . rfOverlap [ dimension ]
>3754	Identifier	dimension
>3755	MemberAccess	workingParams_ . rfOverlap
>3756	Identifier	rfOverlap
>3757	Identifier	workingParams_
>3758	ArrayIndexing	workingParams_ . rfSize [ dimension ]
>3759	Identifier	dimension
>3760	MemberAccess	workingParams_ . rfSize
>3761	Identifier	rfSize
>3762	Identifier	workingParams_
>3763	AdditiveExpression	workingParams_ . span [ dimension ] - workingParams_ . rfOverlap [ dimension ]
>3764	ArrayIndexing	workingParams_ . rfOverlap [ dimension ]
>3765	Identifier	dimension
>3766	MemberAccess	workingParams_ . rfOverlap
>3767	Identifier	rfOverlap
>3768	Identifier	workingParams_
>3769	ArrayIndexing	workingParams_ . span [ dimension ]
>3770	Identifier	dimension
>3771	MemberAccess	workingParams_ . span
>3772	Identifier	span
>3773	Identifier	workingParams_
>3774	Identifier	destNodesPerSpan
>3775	Identifier	destNodesPerSpan
>3776	IdentifierDeclType	Fraction
>3777	Condition	 
>3778	Identifier	strict_
>3779	Label	 
>3780	Identifier	inMapping
>3781	Condition	 
>3782	Identifier	mapping_
>3783	IdentifierDeclStatement	 
>3784	IdentifierDecl	upperIndex ( 0 )
>3785	PrimaryExpression	0
>3786	Identifier	upperIndex
>3787	IdentifierDeclType	Fraction
>3788	IdentifierDecl	lowerIndex ( 0 )
>3789	PrimaryExpression	0
>3790	Identifier	lowerIndex
>3791	IdentifierDeclType	Fraction
>3792	ExpressionStatement	 
>3793	CallExpression	NTA_CHECK ( isInitialized ( ) )
>3794	ArgumentList	isInitialized ( )
>3795	Argument	isInitialized ( )
>3796	CallExpression	isInitialized ( )
>3797	ArgumentList	 
>3798	Callee	isInitialized
>3799	Identifier	isInitialized
>3800	Callee	NTA_CHECK
>3801	Identifier	NTA_CHECK
>3853	FunctionDef	UniformLinkPolicy 
>3854	ParameterList	size_t nodeIndex , size_t dimension
>3855	Parameter	 
>3856	Identifier	dimension
>3857	ParameterType	size_t
>3858	Parameter	 
>3859	Identifier	nodeIndex
>3860	ParameterType	size_t
>3861	ReturnType	std 
>3862	CompoundStatement	 
>3863	ReturnStatement	 
>3864	CallExpression	getInputBoundsForNode ( destDimensions_ . getCoordinate ( nodeIndex ) , dimension )
>3865	ArgumentList	destDimensions_ . getCoordinate ( nodeIndex )
>3866	Argument	dimension
>3867	Identifier	dimension
>3868	Argument	destDimensions_ . getCoordinate ( nodeIndex )
>3869	CallExpression	destDimensions_ . getCoordinate ( nodeIndex )
>3870	ArgumentList	nodeIndex
>3871	Argument	nodeIndex
>3872	Identifier	nodeIndex
>3873	Callee	destDimensions_ . getCoordinate
>3874	MemberAccess	destDimensions_ . getCoordinate
>3875	Identifier	getCoordinate
>3876	Identifier	destDimensions_
>3877	Callee	getInputBoundsForNode
>3878	Identifier	getInputBoundsForNode
>3879	ExpressionStatement	 
>3880	CallExpression	NTA_CHECK ( isInitialized ( ) )
>3881	ArgumentList	isInitialized ( )
>3882	Argument	isInitialized ( )
>3883	CallExpression	isInitialized ( )
>3884	ArgumentList	 
>3885	Callee	isInitialized
>3886	Identifier	isInitialized
>3887	Callee	NTA_CHECK
>3888	Identifier	NTA_CHECK
>3898	FunctionDef	UniformLinkPolicy 
>3899	ParameterList	Coordinate nodeCoordinate , std 
>3900	Parameter	 
>3901	Identifier	input
>3902	ParameterType	std 
>3903	Parameter	 
>3904	Identifier	nodeCoordinate
>3905	ParameterType	Coordinate
>3906	ReturnType	void
>3907	CompoundStatement	 
>3908	ExpressionStatement	 
>3909	CallExpression	populateInputElements ( input , orthotopeBounds , subCoordinate )
>3910	ArgumentList	input
>3911	Argument	subCoordinate
>3912	Identifier	subCoordinate
>3913	Argument	orthotopeBounds
>3914	Identifier	orthotopeBounds
>3915	Argument	input
>3916	Identifier	input
>3917	Callee	populateInputElements
>3918	Identifier	populateInputElements
>3919	IdentifierDeclStatement	 
>3920	IdentifierDecl	subCoordinate
>3921	Identifier	subCoordinate
>3922	IdentifierDeclType	std 
>3923	ForStatement	for ( size_t d = 0 ; d < destDimensions_ . size ( ) ; d ++ )
>3924	CompoundStatement	 
>3925	ExpressionStatement	 
>3926	CallExpression	orthotopeBounds . push_back ( dimensionBounds )
>3927	ArgumentList	dimensionBounds
>3928	Argument	dimensionBounds
>3929	Identifier	dimensionBounds
>3930	Callee	orthotopeBounds . push_back
>3931	MemberAccess	orthotopeBounds . push_back
>3932	Identifier	push_back
>3933	Identifier	orthotopeBounds
>3934	ExpressionStatement	 
>3935	AssignmentExpr	dimensionBounds . second = dimensionBounds . second + 1
>3936	AdditiveExpression	dimensionBounds . second + 1
>3937	PrimaryExpression	1
>3938	MemberAccess	dimensionBounds . second
>3939	Identifier	second
>3940	Identifier	dimensionBounds
>3941	MemberAccess	dimensionBounds . second
>3942	Identifier	second
>3943	Identifier	dimensionBounds
>3944	IdentifierDeclStatement	 
>3945	IdentifierDecl	dimensionBounds = getInputBoundsForNode ( nodeCoordinate , d )
>3946	AssignmentExpr	dimensionBounds = getInputBoundsForNode ( nodeCoordinate , d )
>3947	CallExpression	getInputBoundsForNode ( nodeCoordinate , d )
>3948	ArgumentList	nodeCoordinate
>3949	Argument	d
>3950	Identifier	d
>3951	Argument	nodeCoordinate
>3952	Identifier	nodeCoordinate
>3953	Callee	getInputBoundsForNode
>3954	Identifier	getInputBoundsForNode
>3955	Identifier	dimensionBounds
>3956	Identifier	dimensionBounds
>3957	IdentifierDeclType	std 
>3958	IncDecOp	 
>3959	IncDec	++
>3960	Identifier	d
>3961	Condition	 
>3962	RelationalExpression	d < destDimensions_ . size ( )
>3963	CallExpression	destDimensions_ . size ( )
>3964	ArgumentList	 
>3965	Callee	destDimensions_ . size
>3966	MemberAccess	destDimensions_ . size
>3967	Identifier	size
>3968	Identifier	destDimensions_
>3969	Identifier	d
>3970	ForInit	 
>3971	IdentifierDeclStatement	size_t d = 0 ;
>3972	IdentifierDecl	d = 0
>3973	AssignmentExpr	d = 0
>3974	PrimaryExpression	0
>3975	Identifier	d
>3976	Identifier	d
>3977	IdentifierDeclType	size_t
>3978	ExpressionStatement	 
>3979	CallExpression	orthotopeBounds . reserve ( destDimensions_ . size ( ) )
>3980	ArgumentList	destDimensions_ . size ( )
>3981	Argument	destDimensions_ . size ( )
>3982	CallExpression	destDimensions_ . size ( )
>3983	ArgumentList	 
>3984	Callee	destDimensions_ . size
>3985	MemberAccess	destDimensions_ . size
>3986	Identifier	size
>3987	Identifier	destDimensions_
>3988	Callee	orthotopeBounds . reserve
>3989	MemberAccess	orthotopeBounds . reserve
>3990	Identifier	reserve
>3991	Identifier	orthotopeBounds
>3992	IdentifierDeclStatement	 
>3993	IdentifierDecl	orthotopeBounds
>3994	Identifier	orthotopeBounds
>3995	IdentifierDeclType	std 
>4009	FunctionDef	UniformLinkPolicy 
>4010	ParameterList	size_t nodeIndex , std 
>4011	Parameter	 
>4012	Identifier	input
>4013	ParameterType	std 
>4014	Parameter	 
>4015	Identifier	nodeIndex
>4016	ParameterType	size_t
>4017	ReturnType	void
>4018	CompoundStatement	 
>4019	ExpressionStatement	 
>4020	CallExpression	getInputForNode ( destDimensions_ . getCoordinate ( nodeIndex ) , input )
>4021	ArgumentList	destDimensions_ . getCoordinate ( nodeIndex )
>4022	Argument	input
>4023	Identifier	input
>4024	Argument	destDimensions_ . getCoordinate ( nodeIndex )
>4025	CallExpression	destDimensions_ . getCoordinate ( nodeIndex )
>4026	ArgumentList	nodeIndex
>4027	Argument	nodeIndex
>4028	Identifier	nodeIndex
>4029	Callee	destDimensions_ . getCoordinate
>4030	MemberAccess	destDimensions_ . getCoordinate
>4031	Identifier	getCoordinate
>4032	Identifier	destDimensions_
>4033	Callee	getInputForNode
>4034	Identifier	getInputForNode
>4042	FunctionDef	UniformLinkPolicy 
>4043	ParameterList	std 
>4044	Parameter	 
>4045	Identifier	subCoordinate
>4046	ParameterType	std 
>4047	Parameter	 
>4048	Identifier	orthotopeBounds
>4049	ParameterType	std 
>4050	Parameter	 
>4051	Identifier	input
>4052	ParameterType	std 
>4053	ReturnType	void
>4054	CompoundStatement	 
>4055	ForStatement	for ( Fraction i = orthotopeBounds [ dimension ] . first ; i < orthotopeBounds [ dimension ] . second ; i = i + \
>4056	CompoundStatement	 
>4057	ExpressionStatement	 
>4058	CallExpression	subCoordinate . erase ( subCoordinate . begin ( ) )
>4059	ArgumentList	subCoordinate . begin ( )
>4060	Argument	subCoordinate . begin ( )
>4061	CallExpression	subCoordinate . begin ( )
>4062	ArgumentList	 
>4063	Callee	subCoordinate . begin
>4064	MemberAccess	subCoordinate . begin
>4065	Identifier	begin
>4066	Identifier	subCoordinate
>4067	Callee	subCoordinate . erase
>4068	MemberAccess	subCoordinate . erase
>4069	Identifier	erase
>4070	Identifier	subCoordinate
>4071	IfStatement	if ( dimension != 0 )
>4072	ElseStatement	else
>4073	CompoundStatement	 
>4074	ForStatement	for ( size_t x = elementOffset . first ; x < elementOffset . second ; x ++ )
>4075	CompoundStatement	 
>4076	ExpressionStatement	 
>4077	CallExpression	input . push_back ( elementIndex * elementCount_ + x )
>4078	ArgumentList	elementIndex * elementCount_ + x
>4079	Argument	elementIndex * elementCount_ + x
>4080	AdditiveExpression	elementIndex * elementCount_ + x
>4081	Identifier	x
>4082	MultiplicativeExpression	elementIndex * elementCount_
>4083	Identifier	elementCount_
>4084	Identifier	elementIndex
>4085	Callee	input . push_back
>4086	MemberAccess	input . push_back
>4087	Identifier	push_back
>4088	Identifier	input
>4089	IncDecOp	 
>4090	IncDec	++
>4091	Identifier	x
>4092	Condition	 
>4093	RelationalExpression	x < elementOffset . second
>4094	MemberAccess	elementOffset . second
>4095	Identifier	second
>4096	Identifier	elementOffset
>4097	Identifier	x
>4098	ForInit	 
>4099	IdentifierDeclStatement	size_t x = elementOffset . first ;
>4100	IdentifierDecl	x = elementOffset . first
>4101	AssignmentExpr	x = elementOffset . first
>4102	MemberAccess	elementOffset . first
>4103	Identifier	first
>4104	Identifier	elementOffset
>4105	Identifier	x
>4106	Identifier	x
>4107	IdentifierDeclType	size_t
>4108	IdentifierDeclStatement	 
>4109	IdentifierDecl	elementIndex = srcDimensions_ . getIndex ( nodeCoordinate )
>4110	AssignmentExpr	elementIndex = srcDimensions_ . getIndex ( nodeCoordinate )
>4111	CallExpression	srcDimensions_ . getIndex ( nodeCoordinate )
>4112	ArgumentList	nodeCoordinate
>4113	Argument	nodeCoordinate
>4114	Identifier	nodeCoordinate
>4115	Callee	srcDimensions_ . getIndex
>4116	MemberAccess	srcDimensions_ . getIndex
>4117	Identifier	getIndex
>4118	Identifier	srcDimensions_
>4119	Identifier	elementIndex
>4120	Identifier	elementIndex
>4121	IdentifierDeclType	size_t
>4122	ForStatement	for ( size_t x = 0 ; x < subCoordinate . size ( ) ; x ++ )
>4123	CompoundStatement	 
>4124	IfStatement	if ( subCoordinate [ x ] . getNumerator ( ) < 0 )
>4125	ElseStatement	else
>4126	IfStatement	if ( ( ( size_t ) ( subCoordinate [ x ] . getNumerator ( ) / subCoordinate [ x ] . getDenominator ( ) ) ) > srcDimensions_ [ \
>4127	ElseStatement	else
>4128	CompoundStatement	 
>4129	IfStatement	if ( subCoordinate [ x ] == orthotopeBounds [ x ] . first )
>4130	ElseStatement	else
>4131	IfStatement	if ( subCoordinate [ x ] == orthotopeBounds [ x ] . second )
>4132	ElseStatement	else
>4133	CompoundStatement	 
>4134	ExpressionStatement	 
>4135	AssignmentExpr	elementOffset . second = elementCount_
>4136	Identifier	elementCount_
>4137	MemberAccess	elementOffset . second
>4138	Identifier	second
>4139	Identifier	elementOffset
>4140	ExpressionStatement	 
>4141	AssignmentExpr	elementOffset . first = 0
>4142	PrimaryExpression	0
>4143	MemberAccess	elementOffset . first
>4144	Identifier	first
>4145	Identifier	elementOffset
>4146	CompoundStatement	 
>4147	IfStatement	if ( fractionalOffset > elementOffset . second )
>4148	CompoundStatement	 
>4149	ExpressionStatement	 
>4150	AssignmentExpr	elementOffset . second = fractionalOffset
>4151	Identifier	fractionalOffset
>4152	MemberAccess	elementOffset . second
>4153	Identifier	second
>4154	Identifier	elementOffset
>4155	Condition	 
>4156	RelationalExpression	fractionalOffset > elementOffset . second
>4157	MemberAccess	elementOffset . second
>4158	Identifier	second
>4159	Identifier	elementOffset
>4160	Identifier	fractionalOffset
>4161	ExpressionStatement	 
>4162	AssignmentExpr	elementOffset . first = 0
>4163	PrimaryExpression	0
>4164	MemberAccess	elementOffset . first
>4165	Identifier	first
>4166	Identifier	elementOffset
>4167	Condition	 
>4168	EqualityExpression	subCoordinate [ x ] == orthotopeBounds [ x ] . second
>4169	MemberAccess	orthotopeBounds [ x ] . second
>4170	Identifier	second
>4171	ArrayIndexing	orthotopeBounds [ x ]
>4172	Identifier	x
>4173	Identifier	orthotopeBounds
>4174	ArrayIndexing	subCoordinate [ x ]
>4175	Identifier	x
>4176	Identifier	subCoordinate
>4177	CompoundStatement	 
>4178	ExpressionStatement	 
>4179	AssignmentExpr	elementOffset . second = elementCount_
>4180	Identifier	elementCount_
>4181	MemberAccess	elementOffset . second
>4182	Identifier	second
>4183	Identifier	elementOffset
>4184	IfStatement	if ( fractionalOffset < elementOffset . first )
>4185	CompoundStatement	 
>4186	ExpressionStatement	 
>4187	AssignmentExpr	elementOffset . first = fractionalOffset
>4188	Identifier	fractionalOffset
>4189	MemberAccess	elementOffset . first
>4190	Identifier	first
>4191	Identifier	elementOffset
>4192	Condition	 
>4193	RelationalExpression	fractionalOffset < elementOffset . first
>4194	MemberAccess	elementOffset . first
>4195	Identifier	first
>4196	Identifier	elementOffset
>4197	Identifier	fractionalOffset
>4198	Condition	 
>4199	EqualityExpression	subCoordinate [ x ] == orthotopeBounds [ x ] . first
>4200	MemberAccess	orthotopeBounds [ x ] . first
>4201	Identifier	first
>4202	ArrayIndexing	orthotopeBounds [ x ]
>4203	Identifier	x
>4204	Identifier	orthotopeBounds
>4205	ArrayIndexing	subCoordinate [ x ]
>4206	Identifier	x
>4207	Identifier	subCoordinate
>4208	IdentifierDeclStatement	 
>4209	IdentifierDecl	fractionalOffset = fractionalComponent . getNumerator ( ) / fractionalComponent . getDenominator ( )
>4210	AssignmentExpr	fractionalOffset = fractionalComponent . getNumerator ( ) / fractionalComponent . getDenominator ( )
>4211	MultiplicativeExpression	fractionalComponent . getNumerator ( ) / fractionalComponent . getDenominator ( )
>4212	CallExpression	fractionalComponent . getDenominator ( )
>4213	ArgumentList	 
>4214	Callee	fractionalComponent . getDenominator
>4215	MemberAccess	fractionalComponent . getDenominator
>4216	Identifier	getDenominator
>4217	Identifier	fractionalComponent
>4218	CallExpression	fractionalComponent . getNumerator ( )
>4219	ArgumentList	 
>4220	Callee	fractionalComponent . getNumerator
>4221	MemberAccess	fractionalComponent . getNumerator
>4222	Identifier	getNumerator
>4223	Identifier	fractionalComponent
>4224	Identifier	fractionalOffset
>4225	Identifier	fractionalOffset
>4226	IdentifierDeclType	size_t
>4227	ExpressionStatement	 
>4228	CallExpression	NTA_CHECK ( fractionalComponent . isNaturalNumber ( ) )
>4229	ArgumentList	fractionalComponent . isNaturalNumber ( )
>4230	Argument	fractionalComponent . isNaturalNumber ( )
>4231	CallExpression	fractionalComponent . isNaturalNumber ( )
>4232	ArgumentList	 
>4233	Callee	fractionalComponent . isNaturalNumber
>4234	MemberAccess	fractionalComponent . isNaturalNumber
>4235	Identifier	isNaturalNumber
>4236	Identifier	fractionalComponent
>4237	Callee	NTA_CHECK
>4238	Identifier	NTA_CHECK
>4239	IdentifierDeclStatement	 
>4240	IdentifierDecl	fractionalComponent = ( subCoordinate [ x ] - nodeCoordinate [ x ] ) * elementCount_
>4241	AssignmentExpr	fractionalComponent = ( subCoordinate [ x ] - nodeCoordinate [ x ] ) * elementCount_
>4242	MultiplicativeExpression	( subCoordinate [ x ] - nodeCoordinate [ x ] ) * elementCount_
>4243	Identifier	elementCount_
>4244	AdditiveExpression	subCoordinate [ x ] - nodeCoordinate [ x ]
>4245	ArrayIndexing	nodeCoordinate [ x ]
>4246	Identifier	x
>4247	Identifier	nodeCoordinate
>4248	ArrayIndexing	subCoordinate [ x ]
>4249	Identifier	x
>4250	Identifier	subCoordinate
>4251	Identifier	fractionalComponent
>4252	Identifier	fractionalComponent
>4253	IdentifierDeclType	Fraction
>4254	ExpressionStatement	 
>4255	CallExpression	nodeCoordinate . push_back ( subCoordinate [ x ] . getNumerator ( ) / subCoordinate [ x ] . getDenominator ( ) )
>4256	ArgumentList	subCoordinate [ x ] . getNumerator ( ) / subCoordinate [ x ] . getDenominator ( )
>4257	Argument	subCoordinate [ x ] . getNumerator ( ) / subCoordinate [ x ] . getDenominator ( )
>4258	MultiplicativeExpression	subCoordinate [ x ] . getNumerator ( ) / subCoordinate [ x ] . getDenominator ( )
>4259	CallExpression	subCoordinate [ x ] . getDenominator ( )
>4260	ArgumentList	 
>4261	Callee	subCoordinate [ x ] . getDenominator
>4262	MemberAccess	subCoordinate [ x ] . getDenominator
>4263	Identifier	getDenominator
>4264	ArrayIndexing	subCoordinate [ x ]
>4265	Identifier	x
>4266	Identifier	subCoordinate
>4267	CallExpression	subCoordinate [ x ] . getNumerator ( )
>4268	ArgumentList	 
>4269	Callee	subCoordinate [ x ] . getNumerator
>4270	MemberAccess	subCoordinate [ x ] . getNumerator
>4271	Identifier	getNumerator
>4272	ArrayIndexing	subCoordinate [ x ]
>4273	Identifier	x
>4274	Identifier	subCoordinate
>4275	Callee	nodeCoordinate . push_back
>4276	MemberAccess	nodeCoordinate . push_back
>4277	Identifier	push_back
>4278	Identifier	nodeCoordinate
>4279	CompoundStatement	 
>4280	SwitchStatement	switch ( workingParams_ . overhangType [ x ] )
>4281	CompoundStatement	 
>4282	CompoundStatement	 
>4283	BreakStatement	 
>4284	ExpressionStatement	 
>4285	Expression	elementOffset = std 
>4286	RelationalExpression	size_t > ( 0 , 0 )
>4287	Expression	0 , 0
>4288	PrimaryExpression	0
>4289	PrimaryExpression	0
>4290	Identifier	size_t
>4291	AssignmentExpr	elementOffset = std 
>4292	RelationalExpression	std 
>4293	Identifier	size_t
>4294	Identifier	std 
>4295	Identifier	elementOffset
>4296	ExpressionStatement	 
>4297	CallExpression	nodeCoordinate . push_back ( 0 )
>4298	ArgumentList	0
>4299	Argument	0
>4300	PrimaryExpression	0
>4301	Callee	nodeCoordinate . push_back
>4302	MemberAccess	nodeCoordinate . push_back
>4303	Identifier	push_back
>4304	Identifier	nodeCoordinate
>4305	Label	 
>4306	Identifier	default
>4307	Label	 
>4308	Identifier	nullOverhang
>4309	CompoundStatement	 
>4310	BreakStatement	 
>4311	IfStatement	if ( subCoordinate [ x ] == orthotopeBounds [ x ] . first )
>4312	ElseStatement	else
>4313	IfStatement	if ( subCoordinate [ x ] == orthotopeBounds [ x ] . second )
>4314	ElseStatement	else
>4315	CompoundStatement	 
>4316	ExpressionStatement	 
>4317	AssignmentExpr	elementOffset . second = elementCount_
>4318	Identifier	elementCount_
>4319	MemberAccess	elementOffset . second
>4320	Identifier	second
>4321	Identifier	elementOffset
>4322	ExpressionStatement	 
>4323	AssignmentExpr	elementOffset . first = 0
>4324	PrimaryExpression	0
>4325	MemberAccess	elementOffset . first
>4326	Identifier	first
>4327	Identifier	elementOffset
>4328	CompoundStatement	 
>4329	IfStatement	if ( fractionalOffset > elementOffset . second )
>4330	CompoundStatement	 
>4331	ExpressionStatement	 
>4332	AssignmentExpr	elementOffset . second = fractionalOffset
>4333	Identifier	fractionalOffset
>4334	MemberAccess	elementOffset . second
>4335	Identifier	second
>4336	Identifier	elementOffset
>4337	Condition	 
>4338	RelationalExpression	fractionalOffset > elementOffset . second
>4339	MemberAccess	elementOffset . second
>4340	Identifier	second
>4341	Identifier	elementOffset
>4342	Identifier	fractionalOffset
>4343	ExpressionStatement	 
>4344	AssignmentExpr	elementOffset . first = 0
>4345	PrimaryExpression	0
>4346	MemberAccess	elementOffset . first
>4347	Identifier	first
>4348	Identifier	elementOffset
>4349	Condition	 
>4350	EqualityExpression	subCoordinate [ x ] == orthotopeBounds [ x ] . second
>4351	MemberAccess	orthotopeBounds [ x ] . second
>4352	Identifier	second
>4353	ArrayIndexing	orthotopeBounds [ x ]
>4354	Identifier	x
>4355	Identifier	orthotopeBounds
>4356	ArrayIndexing	subCoordinate [ x ]
>4357	Identifier	x
>4358	Identifier	subCoordinate
>4359	CompoundStatement	 
>4360	ExpressionStatement	 
>4361	AssignmentExpr	elementOffset . second = elementCount_
>4362	Identifier	elementCount_
>4363	MemberAccess	elementOffset . second
>4364	Identifier	second
>4365	Identifier	elementOffset
>4366	IfStatement	if ( fractionalOffset < elementOffset . first )
>4367	CompoundStatement	 
>4368	ExpressionStatement	 
>4369	AssignmentExpr	elementOffset . first = fractionalOffset
>4370	Identifier	fractionalOffset
>4371	MemberAccess	elementOffset . first
>4372	Identifier	first
>4373	Identifier	elementOffset
>4374	Condition	 
>4375	RelationalExpression	fractionalOffset < elementOffset . first
>4376	MemberAccess	elementOffset . first
>4377	Identifier	first
>4378	Identifier	elementOffset
>4379	Identifier	fractionalOffset
>4380	Condition	 
>4381	EqualityExpression	subCoordinate [ x ] == orthotopeBounds [ x ] . first
>4382	MemberAccess	orthotopeBounds [ x ] . first
>4383	Identifier	first
>4384	ArrayIndexing	orthotopeBounds [ x ]
>4385	Identifier	x
>4386	Identifier	orthotopeBounds
>4387	ArrayIndexing	subCoordinate [ x ]
>4388	Identifier	x
>4389	Identifier	subCoordinate
>4390	IdentifierDeclStatement	 
>4391	IdentifierDecl	fractionalOffset = fractionalComponent . getNumerator ( ) / fractionalComponent . getDenominator ( )
>4392	AssignmentExpr	fractionalOffset = fractionalComponent . getNumerator ( ) / fractionalComponent . getDenominator ( )
>4393	MultiplicativeExpression	fractionalComponent . getNumerator ( ) / fractionalComponent . getDenominator ( )
>4394	CallExpression	fractionalComponent . getDenominator ( )
>4395	ArgumentList	 
>4396	Callee	fractionalComponent . getDenominator
>4397	MemberAccess	fractionalComponent . getDenominator
>4398	Identifier	getDenominator
>4399	Identifier	fractionalComponent
>4400	CallExpression	fractionalComponent . getNumerator ( )
>4401	ArgumentList	 
>4402	Callee	fractionalComponent . getNumerator
>4403	MemberAccess	fractionalComponent . getNumerator
>4404	Identifier	getNumerator
>4405	Identifier	fractionalComponent
>4406	Identifier	fractionalOffset
>4407	Identifier	fractionalOffset
>4408	IdentifierDeclType	size_t
>4409	ExpressionStatement	 
>4410	CallExpression	NTA_CHECK ( fractionalComponent . isNaturalNumber ( ) )
>4411	ArgumentList	fractionalComponent . isNaturalNumber ( )
>4412	Argument	fractionalComponent . isNaturalNumber ( )
>4413	CallExpression	fractionalComponent . isNaturalNumber ( )
>4414	ArgumentList	 
>4415	Callee	fractionalComponent . isNaturalNumber
>4416	MemberAccess	fractionalComponent . isNaturalNumber
>4417	Identifier	isNaturalNumber
>4418	Identifier	fractionalComponent
>4419	Callee	NTA_CHECK
>4420	Identifier	NTA_CHECK
>4421	IdentifierDeclStatement	 
>4422	IdentifierDecl	fractionalComponent = ( effectiveSubCoordinate - nodeCoordinate [ x ] ) * elementCount_
>4423	AssignmentExpr	fractionalComponent = ( effectiveSubCoordinate - nodeCoordinate [ x ] ) * elementCount_
>4424	MultiplicativeExpression	( effectiveSubCoordinate - nodeCoordinate [ x ] ) * elementCount_
>4425	Identifier	elementCount_
>4426	AdditiveExpression	effectiveSubCoordinate - nodeCoordinate [ x ]
>4427	ArrayIndexing	nodeCoordinate [ x ]
>4428	Identifier	x
>4429	Identifier	nodeCoordinate
>4430	Identifier	effectiveSubCoordinate
>4431	Identifier	fractionalComponent
>4432	Identifier	fractionalComponent
>4433	IdentifierDeclType	Fraction
>4434	ExpressionStatement	 
>4435	CallExpression	nodeCoordinate . push_back ( effectiveSubCoordinate . getNumerator ( ) / effectiveSubCoordinate . getDenominator ( ) )
>4436	ArgumentList	effectiveSubCoordinate . getNumerator ( ) / effectiveSubCoordinate . getDenominator ( )
>4437	Argument	effectiveSubCoordinate . getNumerator ( ) / effectiveSubCoordinate . getDenominator ( )
>4438	MultiplicativeExpression	effectiveSubCoordinate . getNumerator ( ) / effectiveSubCoordinate . getDenominator ( )
>4439	CallExpression	effectiveSubCoordinate . getDenominator ( )
>4440	ArgumentList	 
>4441	Callee	effectiveSubCoordinate . getDenominator
>4442	MemberAccess	effectiveSubCoordinate . getDenominator
>4443	Identifier	getDenominator
>4444	Identifier	effectiveSubCoordinate
>4445	CallExpression	effectiveSubCoordinate . getNumerator ( )
>4446	ArgumentList	 
>4447	Callee	effectiveSubCoordinate . getNumerator
>4448	MemberAccess	effectiveSubCoordinate . getNumerator
>4449	Identifier	getNumerator
>4450	Identifier	effectiveSubCoordinate
>4451	Callee	nodeCoordinate . push_back
>4452	MemberAccess	nodeCoordinate . push_back
>4453	Identifier	push_back
>4454	Identifier	nodeCoordinate
>4455	IdentifierDeclStatement	 
>4456	IdentifierDecl	effectiveSubCoordinate = subCoordinate [ x ] - Fraction ( srcDimensions_ [ x ] )
>4457	AssignmentExpr	effectiveSubCoordinate = subCoordinate [ x ] - Fraction ( srcDimensions_ [ x ] )
>4458	AdditiveExpression	subCoordinate [ x ] - Fraction ( srcDimensions_ [ x ] )
>4459	CallExpression	Fraction ( srcDimensions_ [ x ] )
>4460	ArgumentList	srcDimensions_ [ x ]
>4461	Argument	srcDimensions_ [ x ]
>4462	ArrayIndexing	srcDimensions_ [ x ]
>4463	Identifier	x
>4464	Identifier	srcDimensions_
>4465	Callee	Fraction
>4466	Identifier	Fraction
>4467	ArrayIndexing	subCoordinate [ x ]
>4468	Identifier	x
>4469	Identifier	subCoordinate
>4470	Identifier	effectiveSubCoordinate
>4471	Identifier	effectiveSubCoordinate
>4472	IdentifierDeclType	Fraction
>4473	Label	 
>4474	Identifier	wrapOverhang
>4475	Condition	 
>4476	ArrayIndexing	workingParams_ . overhangType [ x ]
>4477	Identifier	x
>4478	MemberAccess	workingParams_ . overhangType
>4479	Identifier	overhangType
>4480	Identifier	workingParams_
>4481	Condition	 
>4482	RelationalExpression	( ( size_t ) ( subCoordinate [ x ] . getNumerator ( ) / subCoordinate [ x ] . getDenominator ( ) ) ) > \
>4483	ArrayIndexing	srcDimensions_ [ x ]
>4484	Identifier	x
>4485	Identifier	srcDimensions_
>4486	CastExpression	( size_t ) ( subCoordinate [ x ] . getNumerator ( ) / subCoordinate [ x ] . getDenominator ( ) )
>4487	MultiplicativeExpression	subCoordinate [ x ] . getNumerator ( ) / subCoordinate [ x ] . getDenominator ( )
>4488	CallExpression	subCoordinate [ x ] . getDenominator ( )
>4489	ArgumentList	 
>4490	Callee	subCoordinate [ x ] . getDenominator
>4491	MemberAccess	subCoordinate [ x ] . getDenominator
>4492	Identifier	getDenominator
>4493	ArrayIndexing	subCoordinate [ x ]
>4494	Identifier	x
>4495	Identifier	subCoordinate
>4496	CallExpression	subCoordinate [ x ] . getNumerator ( )
>4497	ArgumentList	 
>4498	Callee	subCoordinate [ x ] . getNumerator
>4499	MemberAccess	subCoordinate [ x ] . getNumerator
>4500	Identifier	getNumerator
>4501	ArrayIndexing	subCoordinate [ x ]
>4502	Identifier	x
>4503	Identifier	subCoordinate
>4504	CastTarget	size_t
>4505	CompoundStatement	 
>4506	SwitchStatement	switch ( workingParams_ . overhangType [ x ] )
>4507	CompoundStatement	 
>4508	CompoundStatement	 
>4509	BreakStatement	 
>4510	ExpressionStatement	 
>4511	Expression	elementOffset = std 
>4512	RelationalExpression	size_t > ( 0 , 0 )
>4513	Expression	0 , 0
>4514	PrimaryExpression	0
>4515	PrimaryExpression	0
>4516	Identifier	size_t
>4517	AssignmentExpr	elementOffset = std 
>4518	RelationalExpression	std 
>4519	Identifier	size_t
>4520	Identifier	std 
>4521	Identifier	elementOffset
>4522	ExpressionStatement	 
>4523	CallExpression	nodeCoordinate . push_back ( 0 )
>4524	ArgumentList	0
>4525	Argument	0
>4526	PrimaryExpression	0
>4527	Callee	nodeCoordinate . push_back
>4528	MemberAccess	nodeCoordinate . push_back
>4529	Identifier	push_back
>4530	Identifier	nodeCoordinate
>4531	Label	 
>4532	Identifier	default
>4533	Label	 
>4534	Identifier	nullOverhang
>4535	CompoundStatement	 
>4536	BreakStatement	 
>4537	IfStatement	if ( subCoordinate [ x ] == orthotopeBounds [ x ] . first )
>4538	ElseStatement	else
>4539	IfStatement	if ( subCoordinate [ x ] == orthotopeBounds [ x ] . second )
>4540	ElseStatement	else
>4541	CompoundStatement	 
>4542	ExpressionStatement	 
>4543	AssignmentExpr	elementOffset . second = elementCount_
>4544	Identifier	elementCount_
>4545	MemberAccess	elementOffset . second
>4546	Identifier	second
>4547	Identifier	elementOffset
>4548	ExpressionStatement	 
>4549	AssignmentExpr	elementOffset . first = 0
>4550	PrimaryExpression	0
>4551	MemberAccess	elementOffset . first
>4552	Identifier	first
>4553	Identifier	elementOffset
>4554	CompoundStatement	 
>4555	IfStatement	if ( fractionalOffset > elementOffset . second )
>4556	CompoundStatement	 
>4557	ExpressionStatement	 
>4558	AssignmentExpr	elementOffset . second = fractionalOffset
>4559	Identifier	fractionalOffset
>4560	MemberAccess	elementOffset . second
>4561	Identifier	second
>4562	Identifier	elementOffset
>4563	Condition	 
>4564	RelationalExpression	fractionalOffset > elementOffset . second
>4565	MemberAccess	elementOffset . second
>4566	Identifier	second
>4567	Identifier	elementOffset
>4568	Identifier	fractionalOffset
>4569	ExpressionStatement	 
>4570	AssignmentExpr	elementOffset . first = 0
>4571	PrimaryExpression	0
>4572	MemberAccess	elementOffset . first
>4573	Identifier	first
>4574	Identifier	elementOffset
>4575	Condition	 
>4576	EqualityExpression	subCoordinate [ x ] == orthotopeBounds [ x ] . second
>4577	MemberAccess	orthotopeBounds [ x ] . second
>4578	Identifier	second
>4579	ArrayIndexing	orthotopeBounds [ x ]
>4580	Identifier	x
>4581	Identifier	orthotopeBounds
>4582	ArrayIndexing	subCoordinate [ x ]
>4583	Identifier	x
>4584	Identifier	subCoordinate
>4585	CompoundStatement	 
>4586	ExpressionStatement	 
>4587	AssignmentExpr	elementOffset . second = elementCount_
>4588	Identifier	elementCount_
>4589	MemberAccess	elementOffset . second
>4590	Identifier	second
>4591	Identifier	elementOffset
>4592	IfStatement	if ( fractionalOffset < elementOffset . first )
>4593	CompoundStatement	 
>4594	ExpressionStatement	 
>4595	AssignmentExpr	elementOffset . first = fractionalOffset
>4596	Identifier	fractionalOffset
>4597	MemberAccess	elementOffset . first
>4598	Identifier	first
>4599	Identifier	elementOffset
>4600	Condition	 
>4601	RelationalExpression	fractionalOffset < elementOffset . first
>4602	MemberAccess	elementOffset . first
>4603	Identifier	first
>4604	Identifier	elementOffset
>4605	Identifier	fractionalOffset
>4606	Condition	 
>4607	EqualityExpression	subCoordinate [ x ] == orthotopeBounds [ x ] . first
>4608	MemberAccess	orthotopeBounds [ x ] . first
>4609	Identifier	first
>4610	ArrayIndexing	orthotopeBounds [ x ]
>4611	Identifier	x
>4612	Identifier	orthotopeBounds
>4613	ArrayIndexing	subCoordinate [ x ]
>4614	Identifier	x
>4615	Identifier	subCoordinate
>4616	IdentifierDeclStatement	 
>4617	IdentifierDecl	fractionalOffset = fractionalComponent . getNumerator ( ) / fractionalComponent . getDenominator ( )
>4618	AssignmentExpr	fractionalOffset = fractionalComponent . getNumerator ( ) / fractionalComponent . getDenominator ( )
>4619	MultiplicativeExpression	fractionalComponent . getNumerator ( ) / fractionalComponent . getDenominator ( )
>4620	CallExpression	fractionalComponent . getDenominator ( )
>4621	ArgumentList	 
>4622	Callee	fractionalComponent . getDenominator
>4623	MemberAccess	fractionalComponent . getDenominator
>4624	Identifier	getDenominator
>4625	Identifier	fractionalComponent
>4626	CallExpression	fractionalComponent . getNumerator ( )
>4627	ArgumentList	 
>4628	Callee	fractionalComponent . getNumerator
>4629	MemberAccess	fractionalComponent . getNumerator
>4630	Identifier	getNumerator
>4631	Identifier	fractionalComponent
>4632	Identifier	fractionalOffset
>4633	Identifier	fractionalOffset
>4634	IdentifierDeclType	size_t
>4635	ExpressionStatement	 
>4636	CallExpression	NTA_CHECK ( fractionalComponent . isNaturalNumber ( ) )
>4637	ArgumentList	fractionalComponent . isNaturalNumber ( )
>4638	Argument	fractionalComponent . isNaturalNumber ( )
>4639	CallExpression	fractionalComponent . isNaturalNumber ( )
>4640	ArgumentList	 
>4641	Callee	fractionalComponent . isNaturalNumber
>4642	MemberAccess	fractionalComponent . isNaturalNumber
>4643	Identifier	isNaturalNumber
>4644	Identifier	fractionalComponent
>4645	Callee	NTA_CHECK
>4646	Identifier	NTA_CHECK
>4647	IdentifierDeclStatement	 
>4648	IdentifierDecl	fractionalComponent = ( effectiveSubCoordinate - nodeCoordinate [ x ] ) * elementCount_
>4649	AssignmentExpr	fractionalComponent = ( effectiveSubCoordinate - nodeCoordinate [ x ] ) * elementCount_
>4650	MultiplicativeExpression	( effectiveSubCoordinate - nodeCoordinate [ x ] ) * elementCount_
>4651	Identifier	elementCount_
>4652	AdditiveExpression	effectiveSubCoordinate - nodeCoordinate [ x ]
>4653	ArrayIndexing	nodeCoordinate [ x ]
>4654	Identifier	x
>4655	Identifier	nodeCoordinate
>4656	Identifier	effectiveSubCoordinate
>4657	Identifier	fractionalComponent
>4658	Identifier	fractionalComponent
>4659	IdentifierDeclType	Fraction
>4660	ExpressionStatement	 
>4661	CallExpression	nodeCoordinate . push_back ( effectiveSubCoordinate . getNumerator ( ) / effectiveSubCoordinate . getDenominator ( ) )
>4662	ArgumentList	effectiveSubCoordinate . getNumerator ( ) / effectiveSubCoordinate . getDenominator ( )
>4663	Argument	effectiveSubCoordinate . getNumerator ( ) / effectiveSubCoordinate . getDenominator ( )
>4664	MultiplicativeExpression	effectiveSubCoordinate . getNumerator ( ) / effectiveSubCoordinate . getDenominator ( )
>4665	CallExpression	effectiveSubCoordinate . getDenominator ( )
>4666	ArgumentList	 
>4667	Callee	effectiveSubCoordinate . getDenominator
>4668	MemberAccess	effectiveSubCoordinate . getDenominator
>4669	Identifier	getDenominator
>4670	Identifier	effectiveSubCoordinate
>4671	CallExpression	effectiveSubCoordinate . getNumerator ( )
>4672	ArgumentList	 
>4673	Callee	effectiveSubCoordinate . getNumerator
>4674	MemberAccess	effectiveSubCoordinate . getNumerator
>4675	Identifier	getNumerator
>4676	Identifier	effectiveSubCoordinate
>4677	Callee	nodeCoordinate . push_back
>4678	MemberAccess	nodeCoordinate . push_back
>4679	Identifier	push_back
>4680	Identifier	nodeCoordinate
>4681	IdentifierDeclStatement	 
>4682	IdentifierDecl	effectiveSubCoordinate = Fraction ( srcDimensions_ [ x ] ) + subCoordinate [ x ]
>4683	AssignmentExpr	effectiveSubCoordinate = Fraction ( srcDimensions_ [ x ] ) + subCoordinate [ x ]
>4684	AdditiveExpression	Fraction ( srcDimensions_ [ x ] ) + subCoordinate [ x ]
>4685	ArrayIndexing	subCoordinate [ x ]
>4686	Identifier	x
>4687	Identifier	subCoordinate
>4688	CallExpression	Fraction ( srcDimensions_ [ x ] )
>4689	ArgumentList	srcDimensions_ [ x ]
>4690	Argument	srcDimensions_ [ x ]
>4691	ArrayIndexing	srcDimensions_ [ x ]
>4692	Identifier	x
>4693	Identifier	srcDimensions_
>4694	Callee	Fraction
>4695	Identifier	Fraction
>4696	Identifier	effectiveSubCoordinate
>4697	Identifier	effectiveSubCoordinate
>4698	IdentifierDeclType	Fraction
>4699	Label	 
>4700	Identifier	wrapOverhang
>4701	Condition	 
>4702	ArrayIndexing	workingParams_ . overhangType [ x ]
>4703	Identifier	x
>4704	MemberAccess	workingParams_ . overhangType
>4705	Identifier	overhangType
>4706	Identifier	workingParams_
>4707	Condition	 
>4708	RelationalExpression	subCoordinate [ x ] . getNumerator ( ) < 0
>4709	PrimaryExpression	0
>4710	CallExpression	subCoordinate [ x ] . getNumerator ( )
>4711	ArgumentList	 
>4712	Callee	subCoordinate [ x ] . getNumerator
>4713	MemberAccess	subCoordinate [ x ] . getNumerator
>4714	Identifier	getNumerator
>4715	ArrayIndexing	subCoordinate [ x ]
>4716	Identifier	x
>4717	Identifier	subCoordinate
>4718	IncDecOp	 
>4719	IncDec	++
>4720	Identifier	x
>4721	Condition	 
>4722	RelationalExpression	x < subCoordinate . size ( )
>4723	CallExpression	subCoordinate . size ( )
>4724	ArgumentList	 
>4725	Callee	subCoordinate . size
>4726	MemberAccess	subCoordinate . size
>4727	Identifier	size
>4728	Identifier	subCoordinate
>4729	Identifier	x
>4730	ForInit	 
>4731	IdentifierDeclStatement	size_t x = 0 ;
>4732	IdentifierDecl	x = 0
>4733	AssignmentExpr	x = 0
>4734	PrimaryExpression	0
>4735	Identifier	x
>4736	Identifier	x
>4737	IdentifierDeclType	size_t
>4738	ExpressionStatement	 
>4739	Statement	 
>4740	Statement	 
>4741	Statement	 
>4742	Statement	 
>4743	Statement	 
>4744	Statement	 
>4745	Statement	 
>4746	Statement	 
>4747	Statement	 
>4748	Statement	 
>4749	Statement	 
>4750	Statement	 
>4751	Statement	 
>4752	Statement	 
>4753	Statement	 
>4754	Statement	 
>4755	Statement	 
>4756	Statement	 
>4757	Statement	 
>4758	Statement	 
>4759	Statement	 
>4760	Statement	 
>4761	Statement	 
>4762	Statement	 
>4763	Statement	 
>4764	Statement	 
>4765	Statement	 
>4766	Statement	 
>4767	Statement	 
>4768	Statement	 
>4769	Statement	 
>4770	Statement	 
>4771	Statement	 
>4772	Statement	 
>4773	Statement	 
>4774	Statement	 
>4775	Statement	 
>4776	Statement	 
>4777	Statement	 
>4778	Statement	 
>4779	Statement	 
>4780	IdentifierDeclStatement	 
>4781	IdentifierDecl	nodeCoordinate
>4782	Identifier	nodeCoordinate
>4783	IdentifierDeclType	Coordinate
>4784	CompoundStatement	 
>4785	ExpressionStatement	 
>4786	CallExpression	populateInputElements ( input , orthotopeBounds , subCoordinate )
>4787	ArgumentList	input
>4788	Argument	subCoordinate
>4789	Identifier	subCoordinate
>4790	Argument	orthotopeBounds
>4791	Identifier	orthotopeBounds
>4792	Argument	input
>4793	Identifier	input
>4794	Callee	populateInputElements
>4795	Identifier	populateInputElements
>4796	Condition	 
>4797	EqualityExpression	dimension != 0
>4798	PrimaryExpression	0
>4799	Identifier	dimension
>4800	ExpressionStatement	 
>4801	CallExpression	subCoordinate . insert ( subCoordinate . begin ( ) , i )
>4802	ArgumentList	subCoordinate . begin ( )
>4803	Argument	i
>4804	Identifier	i
>4805	Argument	subCoordinate . begin ( )
>4806	CallExpression	subCoordinate . begin ( )
>4807	ArgumentList	 
>4808	Callee	subCoordinate . begin
>4809	MemberAccess	subCoordinate . begin
>4810	Identifier	begin
>4811	Identifier	subCoordinate
>4812	Callee	subCoordinate . insert
>4813	MemberAccess	subCoordinate . insert
>4814	Identifier	insert
>4815	Identifier	subCoordinate
>4816	AssignmentExpr	 
>4817	AdditiveExpression	i + 1
>4818	PrimaryExpression	1
>4819	Identifier	i
>4820	Identifier	i
>4821	Condition	 
>4822	RelationalExpression	i < orthotopeBounds [ dimension ] . second
>4823	MemberAccess	orthotopeBounds [ dimension ] . second
>4824	Identifier	second
>4825	ArrayIndexing	orthotopeBounds [ dimension ]
>4826	Identifier	dimension
>4827	Identifier	orthotopeBounds
>4828	Identifier	i
>4829	ForInit	 
>4830	IdentifierDeclStatement	Fraction i = orthotopeBounds [ dimension ] . first ;
>4831	IdentifierDecl	i = orthotopeBounds [ dimension ] . first
>4832	AssignmentExpr	i = orthotopeBounds [ dimension ] . first
>4833	MemberAccess	orthotopeBounds [ dimension ] . first
>4834	Identifier	first
>4835	ArrayIndexing	orthotopeBounds [ dimension ]
>4836	Identifier	dimension
>4837	Identifier	orthotopeBounds
>4838	Identifier	i
>4839	Identifier	i
>4840	IdentifierDeclType	Fraction
>4841	IdentifierDeclStatement	 
>4842	IdentifierDecl	dimension = orthotopeBounds . size ( ) - subCoordinate . size ( ) - 1
>4843	AssignmentExpr	dimension = orthotopeBounds . size ( ) - subCoordinate . size ( ) - 1
>4844	AdditiveExpression	orthotopeBounds . size ( ) - subCoordinate . size ( ) - 1
>4845	AdditiveExpression	subCoordinate . size ( ) - 1
>4846	PrimaryExpression	1
>4847	CallExpression	subCoordinate . size ( )
>4848	ArgumentList	 
>4849	Callee	subCoordinate . size
>4850	MemberAccess	subCoordinate . size
>4851	Identifier	size
>4852	Identifier	subCoordinate
>4853	CallExpression	orthotopeBounds . size ( )
>4854	ArgumentList	 
>4855	Callee	orthotopeBounds . size
>4856	MemberAccess	orthotopeBounds . size
>4857	Identifier	size
>4858	Identifier	orthotopeBounds
>4859	Identifier	dimension
>4860	Identifier	dimension
>4861	IdentifierDeclType	size_t
>4909	FunctionDef	UniformLinkPolicy 
>4910	ParameterList	Input 
>4911	Parameter	 
>4912	Identifier	splitter
>4913	ParameterType	Input 
>4914	ReturnType	void
>4915	CompoundStatement	 
>4916	ForStatement	for ( size_t i = 0 ; i < numDestNodes ; i ++ )
>4917	CompoundStatement	 
>4918	ExpressionStatement	 
>4919	CallExpression	getInputForNode ( i , splitter [ i ] )
>4920	ArgumentList	i
>4921	Argument	splitter [ i ]
>4922	ArrayIndexing	splitter [ i ]
>4923	Identifier	i
>4924	Identifier	splitter
>4925	Argument	i
>4926	Identifier	i
>4927	Callee	getInputForNode
>4928	Identifier	getInputForNode
>4929	IncDecOp	 
>4930	IncDec	++
>4931	Identifier	i
>4932	Condition	 
>4933	RelationalExpression	i < numDestNodes
>4934	Identifier	numDestNodes
>4935	Identifier	i
>4936	ForInit	 
>4937	IdentifierDeclStatement	size_t i = 0 ;
>4938	IdentifierDecl	i = 0
>4939	AssignmentExpr	i = 0
>4940	PrimaryExpression	0
>4941	Identifier	i
>4942	Identifier	i
>4943	IdentifierDeclType	size_t
>4944	ExpressionStatement	 
>4945	CallExpression	NTA_CHECK ( splitter . size ( ) == numDestNodes )
>4946	ArgumentList	splitter . size ( ) == numDestNodes
>4947	Argument	splitter . size ( ) == numDestNodes
>4948	EqualityExpression	splitter . size ( ) == numDestNodes
>4949	Identifier	numDestNodes
>4950	CallExpression	splitter . size ( )
>4951	ArgumentList	 
>4952	Callee	splitter . size
>4953	MemberAccess	splitter . size
>4954	Identifier	size
>4955	Identifier	splitter
>4956	Callee	NTA_CHECK
>4957	Identifier	NTA_CHECK
>4958	ForStatement	for ( size_t i = 0 ; i < destDimensions_ . size ( ) ; i ++ )
>4959	CompoundStatement	 
>4960	ExpressionStatement	 
>4961	AssignmentExpr	numDestNodes *= destDimensions_ [ i ]
>4962	ArrayIndexing	destDimensions_ [ i ]
>4963	Identifier	i
>4964	Identifier	destDimensions_
>4965	Identifier	numDestNodes
>4966	IncDecOp	 
>4967	IncDec	++
>4968	Identifier	i
>4969	Condition	 
>4970	RelationalExpression	i < destDimensions_ . size ( )
>4971	CallExpression	destDimensions_ . size ( )
>4972	ArgumentList	 
>4973	Callee	destDimensions_ . size
>4974	MemberAccess	destDimensions_ . size
>4975	Identifier	size
>4976	Identifier	destDimensions_
>4977	Identifier	i
>4978	ForInit	 
>4979	IdentifierDeclStatement	size_t i = 0 ;
>4980	IdentifierDecl	i = 0
>4981	AssignmentExpr	i = 0
>4982	PrimaryExpression	0
>4983	Identifier	i
>4984	Identifier	i
>4985	IdentifierDeclType	size_t
>4986	IdentifierDeclStatement	 
>4987	IdentifierDecl	numDestNodes = 1
>4988	AssignmentExpr	numDestNodes = 1
>4989	PrimaryExpression	1
>4990	Identifier	numDestNodes
>4991	Identifier	numDestNodes
>4992	IdentifierDeclType	size_t
>4993	ExpressionStatement	 
>4994	CallExpression	NTA_CHECK ( isInitialized ( ) )
>4995	ArgumentList	isInitialized ( )
>4996	Argument	isInitialized ( )
>4997	CallExpression	isInitialized ( )
>4998	ArgumentList	 
>4999	Callee	isInitialized
>5000	Identifier	isInitialized
>5001	Callee	NTA_CHECK
>5002	Identifier	NTA_CHECK
>5016	FunctionDef	UniformLinkPolicy 
>5017	ParameterList	 
>5018	ReturnType	void
>5019	CompoundStatement	 
>5020	ExpressionStatement	 
>5021	AssignmentExpr	initialized_ = true
>5022	Identifier	true
>5023	Identifier	initialized_
>5024	ForStatement	for ( size_t i = 0 ; i < parameterDimensionality_ ; i ++ )
>5025	CompoundStatement	 
>5026	IfStatement	if ( workingParams_ . overhang [ i ] > srcDimensions_ [ i ] )
>5027	CompoundStatement	 
>5028	ExpressionStatement	 
>5029	PrimaryExpression	\"dimensions\"
>5030	Statement	 
>5031	Statement	 
>5032	Statement	 
>5033	Condition	 
>5034	RelationalExpression	workingParams_ . overhang [ i ] > srcDimensions_ [ i ]
>5035	ArrayIndexing	srcDimensions_ [ i ]
>5036	Identifier	i
>5037	Identifier	srcDimensions_
>5038	ArrayIndexing	workingParams_ . overhang [ i ]
>5039	Identifier	i
>5040	MemberAccess	workingParams_ . overhang
>5041	Identifier	overhang
>5042	Identifier	workingParams_
>5043	IncDecOp	 
>5044	IncDec	++
>5045	Identifier	i
>5046	Condition	 
>5047	RelationalExpression	i < parameterDimensionality_
>5048	Identifier	parameterDimensionality_
>5049	Identifier	i
>5050	ForInit	 
>5051	IdentifierDeclStatement	size_t i = 0 ;
>5052	IdentifierDecl	i = 0
>5053	AssignmentExpr	i = 0
>5054	PrimaryExpression	0
>5055	Identifier	i
>5056	Identifier	i
>5057	IdentifierDeclType	size_t
>5058	ForStatement	for ( size_t i = 0 ; i < workingParams_ . span . size ( ) ; i ++ )
>5059	CompoundStatement	 
>5060	IfStatement	if ( workingParams_ . span [ i ] . getNumerator ( ) == 0 )
>5061	CompoundStatement	 
>5062	SwitchStatement	switch ( mapping_ )
>5063	CompoundStatement	 
>5064	CompoundStatement	 
>5065	BreakStatement	 
>5066	Label	 
>5067	Identifier	default
>5068	CompoundStatement	 
>5069	BreakStatement	 
>5070	ExpressionStatement	 
>5071	AssignmentExpr	workingParams_ . span [ i ] = Fraction ( destDimensions_ [ i ] ) + workingParams_ . overhang [ i ] * \
>5072	AdditiveExpression	Fraction ( destDimensions_ [ i ] ) + workingParams_ . overhang [ i ] * 2
>5073	MultiplicativeExpression	workingParams_ . overhang [ i ] * 2
>5074	PrimaryExpression	2
>5075	ArrayIndexing	workingParams_ . overhang [ i ]
>5076	Identifier	i
>5077	MemberAccess	workingParams_ . overhang
>5078	Identifier	overhang
>5079	Identifier	workingParams_
>5080	CallExpression	Fraction ( destDimensions_ [ i ] )
>5081	ArgumentList	destDimensions_ [ i ]
>5082	Argument	destDimensions_ [ i ]
>5083	ArrayIndexing	destDimensions_ [ i ]
>5084	Identifier	i
>5085	Identifier	destDimensions_
>5086	Callee	Fraction
>5087	Identifier	Fraction
>5088	ArrayIndexing	workingParams_ . span [ i ]
>5089	Identifier	i
>5090	MemberAccess	workingParams_ . span
>5091	Identifier	span
>5092	Identifier	workingParams_
>5093	Label	 
>5094	Identifier	outMapping
>5095	CompoundStatement	 
>5096	BreakStatement	 
>5097	IfStatement	if ( strict_ )
>5098	ElseStatement	else
>5099	CompoundStatement	 
>5100	ExpressionStatement	 
>5101	AssignmentExpr	workingParams_ . span [ i ] = Fraction ( srcDimensions_ [ i ] ) - ( ( Fraction ( srcDimensions_ [ i ] ) + \
>5102	AdditiveExpression	Fraction ( srcDimensions_ [ i ] ) - ( ( Fraction ( srcDimensions_ [ i ] ) + workingParams_ . overhang [ \
>5103	MultiplicativeExpression	( Fraction ( srcDimensions_ [ i ] ) + workingParams_ . overhang [ i ] * 2 - workingParams_ . rfSize [ \
>5104	AdditiveExpression	workingParams_ . rfSize [ i ] - workingParams_ . rfOverlap [ i ]
>5105	ArrayIndexing	workingParams_ . rfOverlap [ i ]
>5106	Identifier	i
>5107	MemberAccess	workingParams_ . rfOverlap
>5108	Identifier	rfOverlap
>5109	Identifier	workingParams_
>5110	ArrayIndexing	workingParams_ . rfSize [ i ]
>5111	Identifier	i
>5112	MemberAccess	workingParams_ . rfSize
>5113	Identifier	rfSize
>5114	Identifier	workingParams_
>5115	AdditiveExpression	Fraction ( srcDimensions_ [ i ] ) + workingParams_ . overhang [ i ] * 2 - workingParams_ . rfSize [ i ]
>5116	AdditiveExpression	workingParams_ . overhang [ i ] * 2 - workingParams_ . rfSize [ i ]
>5117	ArrayIndexing	workingParams_ . rfSize [ i ]
>5118	Identifier	i
>5119	MemberAccess	workingParams_ . rfSize
>5120	Identifier	rfSize
>5121	Identifier	workingParams_
>5122	MultiplicativeExpression	workingParams_ . overhang [ i ] * 2
>5123	PrimaryExpression	2
>5124	ArrayIndexing	workingParams_ . overhang [ i ]
>5125	Identifier	i
>5126	MemberAccess	workingParams_ . overhang
>5127	Identifier	overhang
>5128	Identifier	workingParams_
>5129	CallExpression	Fraction ( srcDimensions_ [ i ] )
>5130	ArgumentList	srcDimensions_ [ i ]
>5131	Argument	srcDimensions_ [ i ]
>5132	ArrayIndexing	srcDimensions_ [ i ]
>5133	Identifier	i
>5134	Identifier	srcDimensions_
>5135	Callee	Fraction
>5136	Identifier	Fraction
>5137	CallExpression	Fraction ( srcDimensions_ [ i ] )
>5138	ArgumentList	srcDimensions_ [ i ]
>5139	Argument	srcDimensions_ [ i ]
>5140	ArrayIndexing	srcDimensions_ [ i ]
>5141	Identifier	i
>5142	Identifier	srcDimensions_
>5143	Callee	Fraction
>5144	Identifier	Fraction
>5145	ArrayIndexing	workingParams_ . span [ i ]
>5146	Identifier	i
>5147	MemberAccess	workingParams_ . span
>5148	Identifier	span
>5149	Identifier	workingParams_
>5150	CompoundStatement	 
>5151	ExpressionStatement	 
>5152	AssignmentExpr	workingParams_ . span [ i ] = Fraction ( srcDimensions_ [ i ] ) + workingParams_ . overhang [ i ] * 2
>5153	AdditiveExpression	Fraction ( srcDimensions_ [ i ] ) + workingParams_ . overhang [ i ] * 2
>5154	MultiplicativeExpression	workingParams_ . overhang [ i ] * 2
>5155	PrimaryExpression	2
>5156	ArrayIndexing	workingParams_ . overhang [ i ]
>5157	Identifier	i
>5158	MemberAccess	workingParams_ . overhang
>5159	Identifier	overhang
>5160	Identifier	workingParams_
>5161	CallExpression	Fraction ( srcDimensions_ [ i ] )
>5162	ArgumentList	srcDimensions_ [ i ]
>5163	Argument	srcDimensions_ [ i ]
>5164	ArrayIndexing	srcDimensions_ [ i ]
>5165	Identifier	i
>5166	Identifier	srcDimensions_
>5167	Callee	Fraction
>5168	Identifier	Fraction
>5169	ArrayIndexing	workingParams_ . span [ i ]
>5170	Identifier	i
>5171	MemberAccess	workingParams_ . span
>5172	Identifier	span
>5173	Identifier	workingParams_
>5174	Condition	 
>5175	Identifier	strict_
>5176	Label	 
>5177	Identifier	inMapping
>5178	Condition	 
>5179	Identifier	mapping_
>5180	Condition	 
>5181	EqualityExpression	workingParams_ . span [ i ] . getNumerator ( ) == 0
>5182	PrimaryExpression	0
>5183	CallExpression	workingParams_ . span [ i ] . getNumerator ( )
>5184	ArgumentList	 
>5185	Callee	workingParams_ . span [ i ] . getNumerator
>5186	MemberAccess	workingParams_ . span [ i ] . getNumerator
>5187	Identifier	getNumerator
>5188	ArrayIndexing	workingParams_ . span [ i ]
>5189	Identifier	i
>5190	MemberAccess	workingParams_ . span
>5191	Identifier	span
>5192	Identifier	workingParams_
>5193	IncDecOp	 
>5194	IncDec	++
>5195	Identifier	i
>5196	Condition	 
>5197	RelationalExpression	i < workingParams_ . span . size ( )
>5198	CallExpression	workingParams_ . span . size ( )
>5199	ArgumentList	 
>5200	Callee	workingParams_ . span . size
>5201	MemberAccess	workingParams_ . span . size
>5202	Identifier	size
>5203	MemberAccess	workingParams_ . span
>5204	Identifier	span
>5205	Identifier	workingParams_
>5206	Identifier	i
>5207	ForInit	 
>5208	IdentifierDeclStatement	size_t i = 0 ;
>5209	IdentifierDecl	i = 0
>5210	AssignmentExpr	i = 0
>5211	PrimaryExpression	0
>5212	Identifier	i
>5213	Identifier	i
>5214	IdentifierDeclType	size_t
>5215	IfStatement	if ( workingParams_ . span . size ( ) == 1 && workingParams_ . span [ 0 ] . getNumerator ( ) == 0 )
>5216	CompoundStatement	 
>5217	ForStatement	for ( size_t i = 1 ; i < srcDimensions_ . size ( ) ; i ++ )
>5218	CompoundStatement	 
>5219	ExpressionStatement	 
>5220	CallExpression	workingParams_ . span . push_back ( Fraction ( 0 ) )
>5221	ArgumentList	Fraction ( 0 )
>5222	Argument	Fraction ( 0 )
>5223	CallExpression	Fraction ( 0 )
>5224	ArgumentList	0
>5225	Argument	0
>5226	PrimaryExpression	0
>5227	Callee	Fraction
>5228	Identifier	Fraction
>5229	Callee	workingParams_ . span . push_back
>5230	MemberAccess	workingParams_ . span . push_back
>5231	Identifier	push_back
>5232	MemberAccess	workingParams_ . span
>5233	Identifier	span
>5234	Identifier	workingParams_
>5235	IncDecOp	 
>5236	IncDec	++
>5237	Identifier	i
>5238	Condition	 
>5239	RelationalExpression	i < srcDimensions_ . size ( )
>5240	CallExpression	srcDimensions_ . size ( )
>5241	ArgumentList	 
>5242	Callee	srcDimensions_ . size
>5243	MemberAccess	srcDimensions_ . size
>5244	Identifier	size
>5245	Identifier	srcDimensions_
>5246	Identifier	i
>5247	ForInit	 
>5248	IdentifierDeclStatement	size_t i = 1 ;
>5249	IdentifierDecl	i = 1
>5250	AssignmentExpr	i = 1
>5251	PrimaryExpression	1
>5252	Identifier	i
>5253	Identifier	i
>5254	IdentifierDeclType	size_t
>5255	Condition	 
>5256	AndExpression	workingParams_ . span . size ( ) == 1 && workingParams_ . span [ 0 ] . getNumerator ( ) == 0
>5257	EqualityExpression	workingParams_ . span [ 0 ] . getNumerator ( ) == 0
>5258	PrimaryExpression	0
>5259	CallExpression	workingParams_ . span [ 0 ] . getNumerator ( )
>5260	ArgumentList	 
>5261	Callee	workingParams_ . span [ 0 ] . getNumerator
>5262	MemberAccess	workingParams_ . span [ 0 ] . getNumerator
>5263	Identifier	getNumerator
>5264	ArrayIndexing	workingParams_ . span [ 0 ]
>5265	PrimaryExpression	0
>5266	MemberAccess	workingParams_ . span
>5267	Identifier	span
>5268	Identifier	workingParams_
>5269	EqualityExpression	workingParams_ . span . size ( ) == 1
>5270	PrimaryExpression	1
>5271	CallExpression	workingParams_ . span . size ( )
>5272	ArgumentList	 
>5273	Callee	workingParams_ . span . size
>5274	MemberAccess	workingParams_ . span . size
>5275	Identifier	size
>5276	MemberAccess	workingParams_ . span
>5277	Identifier	span
>5278	Identifier	workingParams_
>5308	FunctionDef	UniformLinkPolicy 
>5309	ParameterList	 
>5310	ReturnType	bool
>5311	CompoundStatement	 
>5312	ReturnStatement	 
>5313	Identifier	initialized_
>5318	FunctionDef	DefaultValuedVector ()
>5319	ParameterList	 
>5320	CompoundStatement	 
>5324	FunctionDef	operator [ ] (const size_type index)
>5325	ParameterList	const size_type index
>5326	Parameter	 
>5327	Identifier	index
>5328	ParameterType	const size_type
>5329	CompoundStatement	 
>5330	ReturnStatement	 
>5331	CallExpression	at ( index )
>5332	ArgumentList	index
>5333	Argument	index
>5334	Identifier	index
>5335	Callee	at
>5336	Identifier	at
>5342	FunctionDef	operator [ ] (const size_type index)
>5343	ParameterList	const size_type index
>5344	Parameter	 
>5345	Identifier	index
>5346	ParameterType	const size_type
>5347	CompoundStatement	 
>5348	ReturnStatement	 
>5349	CallExpression	at ( index )
>5350	ArgumentList	index
>5351	Argument	index
>5352	Identifier	index
>5353	Callee	at
>5354	Identifier	at
>5360	FunctionDef	at (const size_type index)
>5361	ParameterList	const size_type index
>5362	Parameter	 
>5363	Identifier	index
>5364	ParameterType	const size_type
>5365	CompoundStatement	 
>5366	CompoundStatement	 
>5367	ExpressionStatement	 
>5368	CallExpression	at ( 0 )
>5369	ArgumentList	0
>5370	Argument	0
>5371	PrimaryExpression	0
>5372	Callee	at
>5373	Identifier	at
>5374	Statement	 
>5375	Statement	 
>5376	Statement	 
>5377	Statement	 
>5378	Statement	 
>5379	Statement	 
>5380	Statement	 
>5381	Statement	 
>5382	Statement	 
>5383	Statement	 
>5384	Statement	 
>5385	Statement	 
>5386	Statement	 
>5387	Statement	 
>5388	Statement	 
>5389	Statement	 
>5390	Statement	 
>5391	Statement	 
>5392	Statement	 
>5393	Statement	 
>5394	Statement	 
>5395	Statement	 
>5396	Statement	 
>5401	FunctionDef	at (const size_type index)
>5402	ParameterList	const size_type index
>5403	Parameter	 
>5404	Identifier	index
>5405	ParameterType	const size_type
>5406	CompoundStatement	 
>5407	CompoundStatement	 
>5408	ExpressionStatement	 
>5409	CallExpression	at ( 0 )
>5410	ArgumentList	0
>5411	Argument	0
>5412	PrimaryExpression	0
>5413	Callee	at
>5414	Identifier	at
>5415	Statement	 
>5416	Statement	 
>5417	Statement	 
>5418	Statement	 
>5419	Statement	 
>5420	Statement	 
>5421	Statement	 
>5422	Statement	 
>5423	Statement	 
>5424	Statement	 
>5425	Statement	 
>5426	Statement	 
>5427	Statement	 
>5428	Statement	 
>5429	Statement	 
>5430	Statement	 
>5431	Statement	 
>5432	Statement	 
>5433	Statement	 
>5434	Statement	 
>5435	Statement	 
>5436	Statement	 
>5437	Statement	 
<5=13,6
<6=10,7
<7=9,8
<10=12,11
<13=36,29,24,19,14
<14=15
<15=17,16
<17=18
<19=20
<20=22,21
<22=23
<24=25
<25=27,26
<27=28
<29=30
<30=34,31
<31=32
<32=33
<34=35
<36=37
<37=39,38
<39=40
<46=48,47
<52=58,57,53
<53=54
<54=56,55
<58=261,247,202,192,182,168,135,125,115,105,91,59
<59=85,80,60
<60=61
<61=74,69,62
<62=63
<63=68,67,66,64
<64=65
<69=70
<70=71
<71=73,72
<74=75
<75=77,76
<77=79,78
<80=81
<81=82
<82=84,83
<85=86
<86=88,87
<88=90,89
<91=92
<92=104,103,93
<93=102,94
<94=98,95
<95=96
<96=97
<98=99
<99=101,100
<105=106
<106=114,107
<107=113,108
<108=112,109
<109=111,110
<115=116
<116=124,117
<117=123,118
<118=122,119
<119=121,120
<125=126
<126=134,127
<127=133,128
<128=132,129
<129=131,130
<135=162,157,136
<136=137
<137=151,146,138
<138=139
<139=145,144,143,142,140
<140=141
<146=147
<147=148
<148=150,149
<151=152
<152=154,153
<154=156,155
<157=158
<158=159
<159=161,160
<162=163
<163=165,164
<165=167,166
<168=169
<169=181,180,170
<170=179,171
<171=175,172
<172=173
<173=174
<175=176
<176=178,177
<182=183
<183=191,184
<184=190,185
<185=189,186
<186=188,187
<192=193
<193=201,194
<194=200,195
<195=199,196
<196=198,197
<202=241,236,203
<203=204
<204=230,225,205
<205=206
<206=219,214,207
<207=208
<208=213,212,211,209
<209=210
<214=215
<215=216
<216=218,217
<219=220
<220=222,221
<222=224,223
<225=226
<226=227
<227=229,228
<230=231
<231=233,232
<233=235,234
<236=237
<237=238
<238=240,239
<241=242
<242=244,243
<244=246,245
<247=248
<248=260,259,249
<249=258,250
<250=254,251
<251=252
<252=253
<254=255
<255=257,256
<261=262
<262=279,278,263
<263=277,264
<264=275,265
<265=268,266
<266=267
<268=269
<269=271,270
<271=272
<272=274,273
<275=276
<305=308,307,306
<308=489,478,467,456,445,434,430,423,326,309
<309=324,310
<310=311
<311=312
<312=323,313
<313=322,314
<314=321,315
<315=317,316
<317=318
<318=320,319
<324=325
<326=410,401,398,327
<327=390,374,332,328
<328=329
<329=331,330
<332=368,333
<333=334
<334=366,335
<335=365,364,356,354,336
<336=338,337
<338=348,339
<339=344,340
<340=341
<341=343,342
<344=345
<345=347,346
<348=349
<349=351,350
<351=353,352
<354=355
<356=358,357
<358=359
<359=363,360
<360=362,361
<366=367
<368=369
<369=371,370
<371=373,372
<374=375
<375=384,381,376
<376=380,377
<377=379,378
<381=383,382
<384=385
<385=387,386
<387=389,388
<390=391
<391=397,392
<392=394,393
<394=396,395
<398=400,399
<401=402
<402=409,403
<403=405,404
<405=406
<406=408,407
<410=411
<411=412
<412=422,421,413
<413=420,414
<414=416,415
<416=417
<417=419,418
<423=424
<424=429,428,425
<425=427,426
<430=431
<431=433,432
<434=435
<435=442,436
<436=438,437
<438=439
<439=441,440
<442=444,443
<445=446
<446=453,447
<447=449,448
<449=450
<450=452,451
<453=455,454
<456=457
<457=464,458
<458=460,459
<460=461
<461=463,462
<464=466,465
<467=468
<468=475,469
<469=471,470
<471=472
<472=474,473
<475=477,476
<478=479
<479=486,480
<480=482,481
<482=483
<483=485,484
<486=488,487
<489=490
<490=492,491
<518=521,520,519
<521=522
<522=592,588,585,523
<523=561,542,524
<524=530,525
<525=526
<526=527
<527=529,528
<530=531
<531=537,532
<532=534,533
<534=536,535
<537=539,538
<539=541,540
<542=549,543
<543=548,547,546,544
<544=545
<549=550
<550=556,551
<551=553,552
<553=555,554
<556=558,557
<558=560,559
<561=583,562
<562=563
<563=570,564
<564=569,568,567,565
<565=566
<570=571
<571=582,572
<572=574,573
<574=575
<575=577,576
<577=579,578
<579=581,580
<583=584
<585=587,586
<588=589
<589=591,590
<592=593
<593=594
<594=599,598,595
<595=597,596
<616=619,618,617
<619=704,693,682,671,655,620
<620=647,638,635,621
<621=622
<622=623
<623=629,624
<624=625
<625=626
<626=628,627
<629=630
<630=632,631
<632=634,633
<635=637,636
<638=639
<639=646,640
<640=642,641
<642=643
<643=645,644
<647=648
<648=649
<649=654,653,650
<650=652,651
<655=656
<656=669,657
<657=658
<658=659
<659=661,660
<661=663,662
<663=664
<664=666,665
<666=668,667
<669=670
<671=672
<672=680,673
<673=678,674
<674=675
<675=677,676
<678=679
<680=681
<682=683
<683=691,684
<684=689,685
<685=686
<686=688,687
<689=690
<691=692
<693=694
<694=702,695
<695=700,696
<696=697
<697=699,698
<700=701
<702=703
<704=705
<705=713,706
<706=711,707
<707=708
<708=710,709
<711=712
<713=714
<734=746,745,735
<735=742,739,736
<736=738,737
<739=741,740
<742=744,743
<746=822,808,794,780,747
<747=772,763,760,748
<748=749
<749=750
<750=756,751
<751=752
<752=753
<753=755,754
<756=757
<757=759,758
<760=762,761
<763=764
<764=771,765
<765=767,766
<767=768
<768=770,769
<772=773
<773=774
<774=779,778,775
<775=777,776
<780=781
<781=790,782
<782=783
<783=784
<784=786,785
<786=787
<787=789,788
<790=791
<791=793,792
<794=795
<795=807,806,796
<796=805,797
<797=804,798
<798=800,799
<800=801
<801=803,802
<808=809
<809=821,820,810
<810=819,811
<811=815,812
<812=813
<813=814
<815=816
<816=818,817
<822=823
<823=834,824
<824=825
<825=826
<826=828,827
<828=830,829
<830=831
<831=833,832
<834=835
<852=861,860,853
<853=857,854
<854=856,855
<857=859,858
<861=900,862
<862=892,883,880,863
<863=864
<864=865
<865=876,866
<866=867
<867=868
<868=874,869
<869=870
<870=871
<871=873,872
<874=875
<876=877
<877=879,878
<880=882,881
<883=884
<884=891,885
<885=887,886
<887=888
<888=890,889
<892=893
<893=894
<894=899,898,895
<895=897,896
<900=901
<901=912,902
<902=903
<903=904
<904=906,905
<906=908,907
<908=909
<909=911,910
<912=913
<925=928,927,926
<928=1132,1131,1130,1129,1128,1127,1126,1125,1124,1123,1122,1121,1120,1119,1118,1117,1116,1115,1114,1113,1112,1111,1110,1109,1108,1082,1056,1055,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,1044,1043,1042,1041,1040,1039,1038,1037,1036,1035,1034,1033,1032,1031,1005,1004,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003
<954=955
<955=976,956
<956=974,957
<957=958
<958=972,959
<959=970,968,966,964,962,960
<960=961
<962=963
<964=965
<966=967
<968=969
<970=971
<972=973
<974=975
<976=977
<977=979,978
<1005=1006
<1006=1027,1007
<1007=1025,1008
<1008=1009
<1009=1023,1010
<1010=1021,1019,1017,1015,1013,1011
<1011=1012
<1013=1014
<1015=1016
<1017=1018
<1019=1020
<1021=1022
<1023=1024
<1025=1026
<1027=1028
<1028=1030,1029
<1056=1057
<1057=1078,1058
<1058=1076,1059
<1059=1060
<1060=1074,1061
<1061=1072,1070,1068,1066,1064,1062
<1062=1063
<1064=1065
<1066=1067
<1068=1069
<1070=1071
<1072=1073
<1074=1075
<1076=1077
<1078=1079
<1079=1081,1080
<1082=1083
<1083=1104,1084
<1084=1102,1085
<1085=1086
<1086=1100,1087
<1087=1098,1096,1094,1092,1090,1088
<1088=1089
<1090=1091
<1092=1093
<1094=1095
<1096=1097
<1098=1099
<1100=1101
<1102=1103
<1104=1105
<1105=1107,1106
<1140=1146,1145,1141
<1141=1142
<1142=1144,1143
<1146=2203,2196,2170,2149,2128,2109,2090,2048,2044,1155,1151,1147
<1147=1148
<1148=1150,1149
<1151=1152
<1152=1154,1153
<1155=2042,1156
<1156=2040,1166,1164,1157
<1157=1163,1162,1161,1159,1158
<1159=1160
<1164=1165
<1166=1168,1167
<1168=2038,1360,1169
<1169=1170
<1170=1171
<1171=1352,1343,1340,1172
<1172=1336,1194,1173
<1173=1174
<1174=1190,1175
<1175=1176
<1176=1177
<1177=1184,1178
<1178=1180,1179
<1180=1181
<1181=1183,1182
<1184=1186,1185
<1186=1187
<1187=1189,1188
<1190=1191
<1191=1193,1192
<1194=1323,1291,1195
<1195=1196
<1196=1263,1227,1208,1197
<1197=1198
<1198=1207,1199
<1199=1201,1200
<1201=1205,1202
<1202=1203
<1203=1204
<1205=1206
<1208=1209
<1209=1226,1225,1210
<1210=1224,1211
<1211=1218,1212
<1212=1214,1213
<1214=1215
<1215=1217,1216
<1218=1220,1219
<1220=1221
<1221=1223,1222
<1227=1228
<1228=1262,1261,1229
<1229=1260,1230
<1230=1254,1231
<1231=1243,1232
<1232=1238,1233
<1233=1235,1234
<1235=1237,1236
<1238=1240,1239
<1240=1242,1241
<1243=1249,1244
<1244=1246,1245
<1246=1248,1247
<1249=1251,1250
<1251=1253,1252
<1254=1258,1255
<1255=1256
<1256=1257
<1258=1259
<1263=1264
<1264=1290,1289,1265
<1265=1288,1266
<1266=1272,1267
<1267=1269,1268
<1269=1271,1270
<1272=1280,1273
<1273=1275,1274
<1275=1277,1276
<1277=1279,1278
<1280=1286,1281
<1281=1282
<1282=1283
<1283=1285,1284
<1286=1287
<1291=1292
<1292=1293
<1293=1322,1294
<1294=1306,1295
<1295=1301,1296
<1296=1298,1297
<1298=1300,1299
<1301=1303,1302
<1303=1305,1304
<1306=1314,1307
<1307=1309,1308
<1309=1311,1310
<1311=1313,1312
<1314=1320,1315
<1315=1316
<1316=1317
<1317=1319,1318
<1320=1321
<1323=1324
<1324=1326,1325
<1326=1328,1327
<1328=1329
<1329=1331,1330
<1331=1333,1332
<1333=1335,1334
<1336=1337
<1337=1339,1338
<1340=1342,1341
<1343=1344
<1344=1351,1345
<1345=1347,1346
<1347=1348
<1348=1350,1349
<1352=1353
<1353=1354
<1354=1359,1358,1355
<1355=1357,1356
<1360=1361
<1361=2030,2021,2018,1362
<1362=1363
<1363=2005,1726,1364
<1364=1365
<1365=1698,1635,1609,1521,1511,1451,1399,1387,1380,1366
<1366=1367
<1367=1376,1368
<1368=1369
<1369=1370
<1370=1372,1371
<1372=1373
<1373=1375,1374
<1376=1377
<1377=1379,1378
<1380=1381
<1381=1383,1382
<1383=1384
<1384=1386,1385
<1387=1388
<1388=1397,1389
<1389=1390
<1390=1391
<1391=1393,1392
<1393=1394
<1394=1396,1395
<1397=1398
<1399=1400
<1400=1450,1449,1401
<1401=1448,1402
<1402=1437,1403
<1403=1426,1404
<1404=1410,1405
<1405=1407,1406
<1407=1409,1408
<1410=1418,1411
<1411=1413,1412
<1413=1415,1414
<1415=1417,1416
<1418=1424,1419
<1419=1420
<1420=1421
<1421=1423,1422
<1424=1425
<1426=1432,1427
<1427=1429,1428
<1429=1431,1430
<1432=1434,1433
<1434=1436,1435
<1437=1443,1438
<1438=1440,1439
<1440=1442,1441
<1443=1445,1444
<1445=1447,1446
<1451=1502,1452
<1452=1501,1500,1499,1498,1497,1496,1495,1494,1493,1492,1491,1490,1489,1488,1487,1486,1485,1484,1483,1482,1481,1480,1479,1478,1477,1476,1475,1474,1473,1472,1471,1470,1469,1468,1467,1466,1465,1464,1463,1462,1461,1460,1459,1458,1457,1456,1455,1453
<1453=1454
<1502=1503
<1503=1510,1504
<1504=1506,1505
<1506=1507
<1507=1509,1508
<1511=1512
<1512=1520,1513
<1513=1515,1514
<1515=1517,1516
<1517=1519,1518
<1521=1600,1522
<1522=1599,1598,1597,1596,1595,1594,1593,1592,1591,1590,1589,1588,1587,1586,1585,1584,1583,1582,1581,1580,1579,1578,1577,1576,1575,1574,1523,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573
<1523=1524
<1600=1601
<1601=1603,1602
<1603=1605,1604
<1605=1606
<1606=1608,1607
<1609=1610
<1610=1634,1611
<1611=1623,1612
<1612=1618,1613
<1613=1615,1614
<1615=1617,1616
<1618=1620,1619
<1620=1622,1621
<1623=1629,1624
<1624=1626,1625
<1626=1628,1627
<1629=1631,1630
<1631=1633,1632
<1635=1689,1636
<1636=1688,1687,1686,1685,1684,1683,1682,1681,1680,1679,1678,1677,1676,1675,1674,1673,1672,1671,1670,1669,1668,1667,1666,1665,1664,1663,1662,1661,1660,1659,1658,1657,1656,1655,1654,1653,1652,1651,1650,1649,1648,1647,1637
<1637=1638
<1638=1646,1639
<1639=1641,1640
<1641=1643,1642
<1643=1645,1644
<1689=1690
<1690=1692,1691
<1692=1694,1693
<1694=1695
<1695=1697,1696
<1698=1699
<1699=1725,1724,1700
<1700=1723,1701
<1701=1707,1702
<1702=1704,1703
<1704=1706,1705
<1707=1715,1708
<1708=1710,1709
<1710=1712,1711
<1712=1714,1713
<1715=1721,1716
<1716=1717
<1717=1718
<1718=1720,1719
<1721=1722
<1726=1965,1870,1860,1800,1760,1748,1741,1727
<1727=1728
<1728=1737,1729
<1729=1730
<1730=1731
<1731=1733,1732
<1733=1734
<1734=1736,1735
<1737=1738
<1738=1740,1739
<1741=1742
<1742=1744,1743
<1744=1745
<1745=1747,1746
<1748=1749
<1749=1758,1750
<1750=1751
<1751=1752
<1752=1754,1753
<1754=1755
<1755=1757,1756
<1758=1759
<1760=1761
<1761=1799,1798,1762
<1762=1797,1763
<1763=1775,1764
<1764=1770,1765
<1765=1767,1766
<1767=1769,1768
<1770=1772,1771
<1772=1774,1773
<1775=1789,1776
<1776=1782,1777
<1777=1779,1778
<1779=1781,1780
<1782=1784,1783
<1784=1786,1785
<1786=1788,1787
<1789=1795,1790
<1790=1791
<1791=1792
<1792=1794,1793
<1795=1796
<1800=1851,1801
<1801=1850,1849,1848,1847,1846,1845,1844,1843,1842,1841,1840,1839,1838,1837,1836,1835,1834,1833,1832,1831,1830,1829,1828,1827,1826,1825,1824,1823,1822,1821,1820,1819,1818,1817,1816,1815,1814,1813,1812,1811,1810,1809,1808,1807,1806,1805,1804,1802
<1802=1803
<1851=1852
<1852=1859,1853
<1853=1855,1854
<1855=1856
<1856=1858,1857
<1860=1861
<1861=1869,1862
<1862=1864,1863
<1864=1866,1865
<1866=1868,1867
<1870=1956,1871
<1871=1955,1954,1953,1952,1951,1950,1949,1948,1947,1946,1945,1944,1943,1942,1941,1940,1939,1938,1937,1936,1935,1934,1933,1932,1931,1930,1929,1928,1927,1926,1925,1924,1923,1872,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922
<1872=1873
<1956=1957
<1957=1959,1958
<1959=1961,1960
<1961=1962
<1962=1964,1963
<1965=1966
<1966=2004,2003,1967
<1967=2002,1968
<1968=1980,1969
<1969=1975,1970
<1970=1972,1971
<1972=1974,1973
<1975=1977,1976
<1977=1979,1978
<1980=1994,1981
<1981=1987,1982
<1982=1984,1983
<1984=1986,1985
<1987=1989,1988
<1989=1991,1990
<1991=1993,1992
<1994=2000,1995
<1995=1996
<1996=1997
<1997=1999,1998
<2000=2001
<2005=2006
<2006=2008,2007
<2008=2010,2009
<2010=2011
<2011=2013,2012
<2013=2015,2014
<2015=2017,2016
<2018=2020,2019
<2021=2022
<2022=2029,2023
<2023=2025,2024
<2025=2026
<2026=2028,2027
<2030=2031
<2031=2032
<2032=2037,2036,2033
<2033=2035,2034
<2038=2039
<2040=2041
<2042=2043
<2044=2045
<2045=2047,2046
<2048=2086,2049
<2049=2050
<2050=2068,2051
<2051=2067,2066,2065,2052
<2052=2053
<2053=2064,2054
<2054=2063,2055
<2055=2062,2056
<2056=2058,2057
<2058=2059
<2059=2061,2060
<2068=2069
<2069=2078,2070
<2070=2077,2071
<2071=2073,2072
<2073=2074
<2074=2076,2075
<2078=2085,2079
<2079=2081,2080
<2081=2082
<2082=2084,2083
<2086=2087
<2087=2089,2088
<2090=2102,2091
<2091=2092
<2092=2101,2093
<2093=2100,2094
<2094=2096,2095
<2096=2097
<2097=2099,2098
<2102=2103
<2103=2105,2104
<2105=2106
<2106=2108,2107
<2109=2121,2110
<2110=2111
<2111=2120,2112
<2112=2119,2113
<2113=2115,2114
<2115=2116
<2116=2118,2117
<2121=2122
<2122=2124,2123
<2124=2125
<2125=2127,2126
<2128=2129
<2129=2138,2130
<2130=2137,2131
<2131=2133,2132
<2133=2134
<2134=2136,2135
<2138=2147,2139
<2139=2140
<2140=2141
<2141=2143,2142
<2143=2144
<2144=2146,2145
<2147=2148
<2149=2150
<2150=2159,2151
<2151=2158,2152
<2152=2154,2153
<2154=2155
<2155=2157,2156
<2159=2168,2160
<2160=2161
<2161=2162
<2162=2164,2163
<2164=2165
<2165=2167,2166
<2168=2169
<2170=2180,2171
<2171=2172
<2172=2176,2173
<2173=2174
<2174=2175
<2176=2177
<2177=2179,2178
<2180=2181
<2181=2190,2182
<2182=2184,2183
<2184=2186,2185
<2186=2187
<2187=2189,2188
<2190=2192,2191
<2192=2193
<2193=2195,2194
<2196=2197
<2197=2202,2201,2198
<2198=2200,2199
<2203=2215,2204
<2204=2205
<2205=2214,2206
<2206=2213,2207
<2207=2209,2208
<2209=2210
<2210=2212,2211
<2215=2216
<2216=2218,2217
<2266=2272,2271,2267
<2267=2268
<2268=2270,2269
<2272=3108,3082,3061,3040,3021,3002,2968,2964,2281,2277,2273
<2273=2274
<2274=2276,2275
<2277=2278
<2278=2280,2279
<2281=2962,2282
<2282=2960,2292,2290,2283
<2283=2289,2288,2287,2285,2284
<2285=2286
<2290=2291
<2292=2294,2293
<2294=2958,2625,2295
<2295=2296
<2296=2297
<2297=2617,2608,2605,2298
<2298=2601,2354,2299
<2299=2347,2325,2300
<2300=2301
<2301=2302
<2302=2303
<2303=2321,2304
<2304=2305
<2305=2306
<2306=2308,2307
<2308=2315,2309
<2309=2311,2310
<2311=2312
<2312=2314,2313
<2315=2317,2316
<2317=2318
<2318=2320,2319
<2321=2322
<2322=2324,2323
<2325=2326
<2326=2327
<2327=2343,2328
<2328=2329
<2329=2330
<2330=2337,2331
<2331=2333,2332
<2333=2334
<2334=2336,2335
<2337=2339,2338
<2339=2340
<2340=2342,2341
<2343=2344
<2344=2346,2345
<2347=2348
<2348=2350,2349
<2350=2351
<2351=2353,2352
<2354=2588,2550,2355
<2355=2356
<2356=2501,2480,2444,2425,2411,2392,2357
<2357=2386,2358
<2358=2385,2384,2383,2382,2381,2380,2379,2378,2377,2376,2375,2374,2373,2372,2371,2370,2369,2368,2367,2359
<2359=2360
<2360=2366,2361
<2361=2363,2362
<2363=2365,2364
<2386=2387
<2387=2391,2388
<2388=2390,2389
<2392=2393
<2393=2410,2409,2394
<2394=2408,2395
<2395=2402,2396
<2396=2398,2397
<2398=2399
<2399=2401,2400
<2402=2404,2403
<2404=2405
<2405=2407,2406
<2411=2412
<2412=2424,2423,2413
<2413=2422,2414
<2414=2416,2415
<2416=2420,2417
<2417=2418
<2418=2419
<2420=2421
<2425=2426
<2426=2443,2442,2427
<2427=2441,2428
<2428=2435,2429
<2429=2431,2430
<2431=2432
<2432=2434,2433
<2435=2437,2436
<2437=2438
<2438=2440,2439
<2444=2445
<2445=2479,2478,2446
<2446=2477,2447
<2447=2471,2448
<2448=2460,2449
<2449=2455,2450
<2450=2452,2451
<2452=2454,2453
<2455=2457,2456
<2457=2459,2458
<2460=2466,2461
<2461=2463,2462
<2463=2465,2464
<2466=2468,2467
<2468=2470,2469
<2471=2475,2472
<2472=2473
<2473=2474
<2475=2476
<2480=2481
<2481=2500,2499,2482
<2482=2498,2483
<2483=2489,2484
<2484=2486,2485
<2486=2488,2487
<2489=2497,2490
<2490=2492,2491
<2492=2494,2493
<2494=2496,2495
<2501=2502
<2502=2549,2503
<2503=2511,2504
<2504=2506,2505
<2506=2508,2507
<2508=2510,2509
<2511=2523,2512
<2512=2518,2513
<2513=2515,2514
<2515=2517,2516
<2518=2520,2519
<2520=2522,2521
<2523=2541,2524
<2524=2536,2525
<2525=2531,2526
<2526=2528,2527
<2528=2530,2529
<2531=2533,2532
<2533=2535,2534
<2536=2538,2537
<2538=2540,2539
<2541=2547,2542
<2542=2543
<2543=2544
<2544=2546,2545
<2547=2548
<2550=2551
<2551=2552
<2552=2587,2553
<2553=2567,2554
<2554=2562,2555
<2555=2557,2556
<2557=2559,2558
<2559=2561,2560
<2562=2564,2563
<2564=2566,2565
<2567=2579,2568
<2568=2574,2569
<2569=2571,2570
<2571=2573,2572
<2574=2576,2575
<2576=2578,2577
<2579=2585,2580
<2580=2581
<2581=2582
<2582=2584,2583
<2585=2586
<2588=2589
<2589=2591,2590
<2591=2593,2592
<2593=2594
<2594=2596,2595
<2596=2598,2597
<2598=2600,2599
<2601=2602
<2602=2604,2603
<2605=2607,2606
<2608=2609
<2609=2616,2610
<2610=2612,2611
<2612=2613
<2613=2615,2614
<2617=2618
<2618=2619
<2619=2624,2623,2620
<2620=2622,2621
<2625=2626
<2626=2950,2941,2938,2627
<2627=2803,2628
<2628=2790,2716,2629
<2629=2630
<2630=2664,2652,2645,2631
<2631=2632
<2632=2641,2633
<2633=2634
<2634=2635
<2635=2637,2636
<2637=2638
<2638=2640,2639
<2641=2642
<2642=2644,2643
<2645=2646
<2646=2648,2647
<2648=2649
<2649=2651,2650
<2652=2653
<2653=2662,2654
<2654=2655
<2655=2656
<2656=2658,2657
<2658=2659
<2659=2661,2660
<2662=2663
<2664=2665
<2665=2715,2714,2666
<2666=2713,2667
<2667=2675,2668
<2668=2670,2669
<2670=2672,2671
<2672=2674,2673
<2675=2687,2676
<2676=2682,2677
<2677=2679,2678
<2679=2681,2680
<2682=2684,2683
<2684=2686,2685
<2687=2705,2688
<2688=2700,2689
<2689=2695,2690
<2690=2692,2691
<2692=2694,2693
<2695=2697,2696
<2697=2699,2698
<2700=2702,2701
<2702=2704,2703
<2705=2711,2706
<2706=2707
<2707=2708
<2708=2710,2709
<2711=2712
<2716=2750,2738,2731,2717
<2717=2718
<2718=2727,2719
<2719=2720
<2720=2721
<2721=2723,2722
<2723=2724
<2724=2726,2725
<2727=2728
<2728=2730,2729
<2731=2732
<2732=2734,2733
<2734=2735
<2735=2737,2736
<2738=2739
<2739=2748,2740
<2740=2741
<2741=2742
<2742=2744,2743
<2744=2745
<2745=2747,2746
<2748=2749
<2750=2751
<2751=2789,2788,2752
<2752=2787,2753
<2753=2767,2754
<2754=2762,2755
<2755=2757,2756
<2757=2759,2758
<2759=2761,2760
<2762=2764,2763
<2764=2766,2765
<2767=2779,2768
<2768=2774,2769
<2769=2771,2770
<2771=2773,2772
<2774=2776,2775
<2776=2778,2777
<2779=2785,2780
<2780=2781
<2781=2782
<2782=2784,2783
<2785=2786
<2790=2791
<2791=2793,2792
<2793=2795,2794
<2795=2796
<2796=2798,2797
<2798=2800,2799
<2800=2802,2801
<2803=2925,2804
<2804=2878,2865,2805
<2805=2856,2806
<2806=2855,2854,2853,2852,2851,2850,2849,2848,2847,2846,2845,2844,2843,2842,2841,2840,2839,2838,2837,2836,2835,2834,2833,2832,2831,2830,2829,2828,2827,2826,2825,2824,2823,2822,2821,2820,2819,2818,2817,2816,2815,2814,2813,2812,2811,2810,2809,2807
<2807=2808
<2856=2857
<2857=2864,2858
<2858=2860,2859
<2860=2861
<2861=2863,2862
<2865=2866
<2866=2877,2876,2867
<2867=2875,2868
<2868=2870,2869
<2870=2872,2871
<2872=2874,2873
<2878=2921,2879
<2879=2920,2919,2918,2917,2916,2915,2914,2913,2912,2911,2910,2909,2908,2907,2906,2905,2904,2903,2902,2901,2900,2899,2898,2897,2896,2895,2894,2893,2892,2891,2890,2889,2888,2887,2886,2885,2884,2883,2882,2880
<2880=2881
<2921=2922
<2922=2924,2923
<2925=2926
<2926=2937,2927
<2927=2929,2928
<2929=2930
<2930=2932,2931
<2932=2934,2933
<2934=2936,2935
<2938=2940,2939
<2941=2942
<2942=2949,2943
<2943=2945,2944
<2945=2946
<2946=2948,2947
<2950=2951
<2951=2952
<2952=2957,2956,2953
<2953=2955,2954
<2958=2959
<2960=2961
<2962=2963
<2964=2965
<2965=2967,2966
<2968=2998,2969
<2969=2970
<2970=2989,2971
<2971=2988,2987,2986,2985,2984,2983,2982,2981,2972
<2972=2973
<2973=2980,2974
<2974=2976,2975
<2976=2977
<2977=2979,2978
<2989=2990
<2990=2997,2991
<2991=2993,2992
<2993=2994
<2994=2996,2995
<2998=2999
<2999=3001,3000
<3002=3014,3003
<3003=3004
<3004=3013,3005
<3005=3012,3006
<3006=3008,3007
<3008=3009
<3009=3011,3010
<3014=3015
<3015=3017,3016
<3017=3018
<3018=3020,3019
<3021=3033,3022
<3022=3023
<3023=3032,3024
<3024=3031,3025
<3025=3027,3026
<3027=3028
<3028=3030,3029
<3033=3034
<3034=3036,3035
<3036=3037
<3037=3039,3038
<3040=3041
<3041=3050,3042
<3042=3049,3043
<3043=3045,3044
<3045=3046
<3046=3048,3047
<3050=3059,3051
<3051=3052
<3052=3053
<3053=3055,3054
<3055=3056
<3056=3058,3057
<3059=3060
<3061=3062
<3062=3071,3063
<3063=3070,3064
<3064=3066,3065
<3066=3067
<3067=3069,3068
<3071=3080,3072
<3072=3073
<3073=3074
<3074=3076,3075
<3076=3077
<3077=3079,3078
<3080=3081
<3082=3092,3083
<3083=3084
<3084=3088,3085
<3085=3086
<3086=3087
<3088=3089
<3089=3091,3090
<3092=3093
<3093=3102,3094
<3094=3096,3095
<3096=3098,3097
<3098=3099
<3099=3101,3100
<3102=3104,3103
<3104=3105
<3105=3107,3106
<3108=3109
<3109=3114,3113,3110
<3110=3112,3111
<3167=3170,3169,3168
<3170=3171
<3171=3172
<3177=3180,3179,3178
<3180=3181
<3181=3182
<3187=3193,3192,3188
<3188=3189
<3189=3191,3190
<3193=3194
<3194=3195
<3195=3197,3196
<3203=3212,3211,3204
<3204=3208,3205
<3205=3207,3206
<3208=3210,3209
<3212=3792,3783,3223,3213
<3213=3214
<3214=3220,3215
<3215=3219,3216
<3216=3218,3217
<3220=3222,3221
<3223=3781,3224
<3224=3779,3234,3232,3225
<3225=3231,3230,3229,3227,3226
<3227=3228
<3232=3233
<3234=3236,3235
<3236=3777,3654,3237
<3237=3238
<3238=3626,3596,3584,3575,3544,3529,3516,3487,3471,3452,3419,3406,3239
<3239=3402,3337,3240
<3240=3241
<3241=3328,3287,3281,3242
<3242=3272,3243
<3243=3244
<3244=3245
<3245=3271,3246
<3246=3253,3247
<3247=3251,3248
<3248=3249
<3249=3250
<3251=3252
<3253=3269,3254
<3254=3255
<3255=3256
<3256=3263,3257
<3257=3259,3258
<3259=3260
<3260=3262,3261
<3263=3265,3264
<3265=3266
<3266=3268,3267
<3269=3270
<3272=3273
<3273=3280,3274
<3274=3276,3275
<3276=3277
<3277=3279,3278
<3281=3282
<3282=3286,3283
<3283=3285,3284
<3287=3319,3288
<3288=3289
<3289=3290
<3290=3318,3291
<3291=3298,3292
<3292=3296,3293
<3293=3294
<3294=3295
<3296=3297
<3298=3316,3299
<3299=3300
<3300=3301
<3301=3303,3302
<3303=3310,3304
<3304=3306,3305
<3306=3307
<3307=3309,3308
<3310=3312,3311
<3312=3313
<3313=3315,3314
<3316=3317
<3319=3320
<3320=3327,3321
<3321=3323,3322
<3323=3324
<3324=3326,3325
<3328=3329
<3329=3336,3335,3330
<3330=3334,3331
<3331=3333,3332
<3337=3370,3338
<3338=3361,3339
<3339=3340
<3340=3341
<3341=3360,3342
<3342=3358,3343
<3343=3344
<3344=3345
<3345=3352,3346
<3346=3348,3347
<3348=3349
<3349=3351,3350
<3352=3354,3353
<3354=3355
<3355=3357,3356
<3358=3359
<3361=3362
<3362=3369,3363
<3363=3365,3364
<3365=3366
<3366=3368,3367
<3370=3393,3371
<3371=3372
<3372=3373
<3373=3392,3374
<3374=3390,3375
<3375=3376
<3376=3377
<3377=3384,3378
<3378=3380,3379
<3380=3381
<3381=3383,3382
<3384=3386,3385
<3386=3387
<3387=3389,3388
<3390=3391
<3393=3394
<3394=3401,3395
<3395=3397,3396
<3397=3398
<3398=3400,3399
<3402=3403
<3403=3405,3404
<3406=3407
<3407=3418,3408
<3408=3417,3409
<3409=3416,3410
<3410=3414,3411
<3411=3412
<3412=3413
<3414=3415
<3419=3420
<3420=3451,3421
<3421=3448,3422
<3422=3428,3423
<3423=3425,3424
<3425=3427,3426
<3428=3436,3429
<3429=3435,3430
<3430=3432,3431
<3432=3434,3433
<3436=3440,3437
<3437=3439,3438
<3440=3446,3441
<3441=3442
<3442=3443
<3443=3445,3444
<3446=3447
<3448=3450,3449
<3452=3453
<3453=3470,3469,3454
<3454=3468,3455
<3455=3462,3456
<3456=3458,3457
<3458=3459
<3459=3461,3460
<3462=3464,3463
<3464=3465
<3465=3467,3466
<3471=3472
<3472=3486,3485,3473
<3473=3484,3474
<3474=3476,3475
<3476=3482,3477
<3477=3478
<3478=3479
<3479=3481,3480
<3482=3483
<3487=3488
<3488=3515,3514,3489
<3489=3513,3490
<3490=3502,3491
<3491=3497,3492
<3492=3494,3493
<3494=3496,3495
<3497=3499,3498
<3499=3501,3500
<3502=3508,3503
<3503=3505,3504
<3505=3507,3506
<3508=3510,3509
<3510=3512,3511
<3516=3517
<3517=3528,3527,3518
<3518=3526,3519
<3519=3521,3520
<3521=3523,3522
<3523=3525,3524
<3529=3530
<3530=3543,3542,3531
<3531=3541,3532
<3532=3536,3533
<3533=3535,3534
<3536=3538,3537
<3538=3540,3539
<3544=3545
<3545=3574,3573,3546
<3546=3572,3547
<3547=3549,3548
<3549=3561,3550
<3550=3556,3551
<3551=3553,3552
<3553=3555,3554
<3556=3558,3557
<3558=3560,3559
<3561=3567,3562
<3562=3564,3563
<3564=3566,3565
<3567=3569,3568
<3569=3571,3570
<3575=3576
<3576=3583,3582,3577
<3577=3581,3578
<3578=3580,3579
<3584=3585
<3585=3594,3586
<3586=3587
<3587=3588
<3588=3590,3589
<3590=3591
<3591=3593,3592
<3594=3595
<3596=3597
<3597=3625,3624,3598
<3598=3623,3599
<3599=3605,3600
<3600=3602,3601
<3602=3604,3603
<3605=3615,3606
<3606=3608,3607
<3608=3610,3609
<3610=3612,3611
<3612=3614,3613
<3615=3621,3616
<3616=3617
<3617=3618
<3618=3620,3619
<3621=3622
<3626=3627
<3627=3653,3652,3628
<3628=3651,3629
<3629=3635,3630
<3630=3632,3631
<3632=3634,3633
<3635=3643,3636
<3636=3638,3637
<3638=3640,3639
<3640=3642,3641
<3643=3649,3644
<3644=3645
<3645=3646
<3646=3648,3647
<3649=3650
<3654=3748,3732,3713,3672,3655
<3655=3656
<3656=3671,3657
<3657=3670,3658
<3658=3665,3659
<3659=3663,3660
<3660=3661
<3661=3662
<3663=3664
<3665=3667,3666
<3667=3669,3668
<3672=3673
<3673=3712,3674
<3674=3705,3675
<3675=3681,3676
<3676=3678,3677
<3678=3680,3679
<3681=3693,3682
<3682=3688,3683
<3683=3685,3684
<3685=3687,3686
<3688=3690,3689
<3690=3692,3691
<3693=3697,3694
<3694=3696,3695
<3697=3703,3698
<3698=3699
<3699=3700
<3700=3702,3701
<3703=3704
<3705=3707,3706
<3707=3709,3708
<3709=3711,3710
<3713=3714
<3714=3731,3730,3715
<3715=3729,3716
<3716=3723,3717
<3717=3719,3718
<3719=3720
<3720=3722,3721
<3723=3725,3724
<3725=3726
<3726=3728,3727
<3732=3733
<3733=3747,3746,3734
<3734=3745,3735
<3735=3737,3736
<3737=3743,3738
<3738=3739
<3739=3740
<3740=3742,3741
<3743=3744
<3748=3749
<3749=3776,3775,3750
<3750=3774,3751
<3751=3763,3752
<3752=3758,3753
<3753=3755,3754
<3755=3757,3756
<3758=3760,3759
<3760=3762,3761
<3763=3769,3764
<3764=3766,3765
<3766=3768,3767
<3769=3771,3770
<3771=3773,3772
<3777=3778
<3779=3780
<3781=3782
<3783=3788,3784
<3784=3787,3786,3785
<3788=3791,3790,3789
<3792=3793
<3793=3800,3794
<3794=3795
<3795=3796
<3796=3798,3797
<3798=3799
<3800=3801
<3853=3862,3861,3854
<3854=3858,3855
<3855=3857,3856
<3858=3860,3859
<3862=3879,3863
<3863=3864
<3864=3877,3865
<3865=3868,3866
<3866=3867
<3868=3869
<3869=3873,3870
<3870=3871
<3871=3872
<3873=3874
<3874=3876,3875
<3877=3878
<3879=3880
<3880=3887,3881
<3881=3882
<3882=3883
<3883=3885,3884
<3885=3886
<3887=3888
<3898=3907,3906,3899
<3899=3903,3900
<3900=3902,3901
<3903=3905,3904
<3907=3992,3978,3923,3919,3908
<3908=3909
<3909=3917,3910
<3910=3915,3913,3911
<3911=3912
<3913=3914
<3915=3916
<3917=3918
<3919=3920
<3920=3922,3921
<3923=3970,3961,3958,3924
<3924=3944,3934,3925
<3925=3926
<3926=3930,3927
<3927=3928
<3928=3929
<3930=3931
<3931=3933,3932
<3934=3935
<3935=3941,3936
<3936=3938,3937
<3938=3940,3939
<3941=3943,3942
<3944=3945
<3945=3957,3956,3946
<3946=3955,3947
<3947=3953,3948
<3948=3951,3949
<3949=3950
<3951=3952
<3953=3954
<3958=3960,3959
<3961=3962
<3962=3969,3963
<3963=3965,3964
<3965=3966
<3966=3968,3967
<3970=3971
<3971=3972
<3972=3977,3976,3973
<3973=3975,3974
<3978=3979
<3979=3988,3980
<3980=3981
<3981=3982
<3982=3984,3983
<3984=3985
<3985=3987,3986
<3988=3989
<3989=3991,3990
<3992=3993
<3993=3995,3994
<4009=4018,4017,4010
<4010=4014,4011
<4011=4013,4012
<4014=4016,4015
<4018=4019
<4019=4020
<4020=4033,4021
<4021=4024,4022
<4022=4023
<4024=4025
<4025=4029,4026
<4026=4027
<4027=4028
<4029=4030
<4030=4032,4031
<4033=4034
<4042=4054,4053,4043
<4043=4050,4047,4044
<4044=4046,4045
<4047=4049,4048
<4050=4052,4051
<4054=4841,4055
<4055=4829,4821,4816,4056
<4056=4800,4071,4057
<4057=4058
<4058=4067,4059
<4059=4060
<4060=4061
<4061=4063,4062
<4063=4064
<4064=4066,4065
<4067=4068
<4068=4070,4069
<4071=4796,4784,4072
<4072=4073
<4073=4780,4779,4778,4777,4776,4775,4774,4773,4772,4771,4770,4769,4768,4767,4766,4765,4764,4763,4762,4761,4760,4759,4758,4757,4756,4755,4754,4753,4752,4751,4750,4749,4748,4747,4746,4745,4744,4743,4742,4741,4740,4739,4738,4122,4108,4074
<4074=4098,4092,4089,4075
<4075=4076
<4076=4077
<4077=4085,4078
<4078=4079
<4079=4080
<4080=4082,4081
<4082=4084,4083
<4085=4086
<4086=4088,4087
<4089=4091,4090
<4092=4093
<4093=4097,4094
<4094=4096,4095
<4098=4099
<4099=4100
<4100=4107,4106,4101
<4101=4105,4102
<4102=4104,4103
<4108=4109
<4109=4121,4120,4110
<4110=4119,4111
<4111=4115,4112
<4112=4113
<4113=4114
<4115=4116
<4116=4118,4117
<4122=4730,4721,4718,4123
<4123=4124
<4124=4707,4505,4125
<4125=4126
<4126=4481,4279,4127
<4127=4128
<4128=4254,4239,4227,4208,4129
<4129=4198,4177,4130
<4130=4131
<4131=4167,4146,4132
<4132=4133
<4133=4140,4134
<4134=4135
<4135=4137,4136
<4137=4139,4138
<4140=4141
<4141=4143,4142
<4143=4145,4144
<4146=4161,4147
<4147=4155,4148
<4148=4149
<4149=4150
<4150=4152,4151
<4152=4154,4153
<4155=4156
<4156=4160,4157
<4157=4159,4158
<4161=4162
<4162=4164,4163
<4164=4166,4165
<4167=4168
<4168=4174,4169
<4169=4171,4170
<4171=4173,4172
<4174=4176,4175
<4177=4184,4178
<4178=4179
<4179=4181,4180
<4181=4183,4182
<4184=4192,4185
<4185=4186
<4186=4187
<4187=4189,4188
<4189=4191,4190
<4192=4193
<4193=4197,4194
<4194=4196,4195
<4198=4199
<4199=4205,4200
<4200=4202,4201
<4202=4204,4203
<4205=4207,4206
<4208=4209
<4209=4226,4225,4210
<4210=4224,4211
<4211=4218,4212
<4212=4214,4213
<4214=4215
<4215=4217,4216
<4218=4220,4219
<4220=4221
<4221=4223,4222
<4227=4228
<4228=4237,4229
<4229=4230
<4230=4231
<4231=4233,4232
<4233=4234
<4234=4236,4235
<4237=4238
<4239=4240
<4240=4253,4252,4241
<4241=4251,4242
<4242=4244,4243
<4244=4248,4245
<4245=4247,4246
<4248=4250,4249
<4254=4255
<4255=4275,4256
<4256=4257
<4257=4258
<4258=4267,4259
<4259=4261,4260
<4261=4262
<4262=4264,4263
<4264=4266,4265
<4267=4269,4268
<4269=4270
<4270=4272,4271
<4272=4274,4273
<4275=4276
<4276=4278,4277
<4279=4280
<4280=4475,4281
<4281=4473,4309,4307,4305,4282
<4282=4296,4284,4283
<4284=4285
<4285=4291,4286
<4286=4290,4287
<4287=4289,4288
<4291=4295,4292
<4292=4294,4293
<4296=4297
<4297=4301,4298
<4298=4299
<4299=4300
<4301=4302
<4302=4304,4303
<4305=4306
<4307=4308
<4309=4455,4434,4421,4409,4390,4311,4310
<4311=4380,4359,4312
<4312=4313
<4313=4349,4328,4314
<4314=4315
<4315=4322,4316
<4316=4317
<4317=4319,4318
<4319=4321,4320
<4322=4323
<4323=4325,4324
<4325=4327,4326
<4328=4343,4329
<4329=4337,4330
<4330=4331
<4331=4332
<4332=4334,4333
<4334=4336,4335
<4337=4338
<4338=4342,4339
<4339=4341,4340
<4343=4344
<4344=4346,4345
<4346=4348,4347
<4349=4350
<4350=4356,4351
<4351=4353,4352
<4353=4355,4354
<4356=4358,4357
<4359=4366,4360
<4360=4361
<4361=4363,4362
<4363=4365,4364
<4366=4374,4367
<4367=4368
<4368=4369
<4369=4371,4370
<4371=4373,4372
<4374=4375
<4375=4379,4376
<4376=4378,4377
<4380=4381
<4381=4387,4382
<4382=4384,4383
<4384=4386,4385
<4387=4389,4388
<4390=4391
<4391=4408,4407,4392
<4392=4406,4393
<4393=4400,4394
<4394=4396,4395
<4396=4397
<4397=4399,4398
<4400=4402,4401
<4402=4403
<4403=4405,4404
<4409=4410
<4410=4419,4411
<4411=4412
<4412=4413
<4413=4415,4414
<4415=4416
<4416=4418,4417
<4419=4420
<4421=4422
<4422=4433,4432,4423
<4423=4431,4424
<4424=4426,4425
<4426=4430,4427
<4427=4429,4428
<4434=4435
<4435=4451,4436
<4436=4437
<4437=4438
<4438=4445,4439
<4439=4441,4440
<4441=4442
<4442=4444,4443
<4445=4447,4446
<4447=4448
<4448=4450,4449
<4451=4452
<4452=4454,4453
<4455=4456
<4456=4472,4471,4457
<4457=4470,4458
<4458=4467,4459
<4459=4465,4460
<4460=4461
<4461=4462
<4462=4464,4463
<4465=4466
<4467=4469,4468
<4473=4474
<4475=4476
<4476=4478,4477
<4478=4480,4479
<4481=4482
<4482=4486,4483
<4483=4485,4484
<4486=4504,4487
<4487=4496,4488
<4488=4490,4489
<4490=4491
<4491=4493,4492
<4493=4495,4494
<4496=4498,4497
<4498=4499
<4499=4501,4500
<4501=4503,4502
<4505=4506
<4506=4701,4507
<4507=4699,4535,4533,4531,4508
<4508=4522,4510,4509
<4510=4511
<4511=4517,4512
<4512=4516,4513
<4513=4515,4514
<4517=4521,4518
<4518=4520,4519
<4522=4523
<4523=4527,4524
<4524=4525
<4525=4526
<4527=4528
<4528=4530,4529
<4531=4532
<4533=4534
<4535=4681,4660,4647,4635,4616,4537,4536
<4537=4606,4585,4538
<4538=4539
<4539=4575,4554,4540
<4540=4541
<4541=4548,4542
<4542=4543
<4543=4545,4544
<4545=4547,4546
<4548=4549
<4549=4551,4550
<4551=4553,4552
<4554=4569,4555
<4555=4563,4556
<4556=4557
<4557=4558
<4558=4560,4559
<4560=4562,4561
<4563=4564
<4564=4568,4565
<4565=4567,4566
<4569=4570
<4570=4572,4571
<4572=4574,4573
<4575=4576
<4576=4582,4577
<4577=4579,4578
<4579=4581,4580
<4582=4584,4583
<4585=4592,4586
<4586=4587
<4587=4589,4588
<4589=4591,4590
<4592=4600,4593
<4593=4594
<4594=4595
<4595=4597,4596
<4597=4599,4598
<4600=4601
<4601=4605,4602
<4602=4604,4603
<4606=4607
<4607=4613,4608
<4608=4610,4609
<4610=4612,4611
<4613=4615,4614
<4616=4617
<4617=4634,4633,4618
<4618=4632,4619
<4619=4626,4620
<4620=4622,4621
<4622=4623
<4623=4625,4624
<4626=4628,4627
<4628=4629
<4629=4631,4630
<4635=4636
<4636=4645,4637
<4637=4638
<4638=4639
<4639=4641,4640
<4641=4642
<4642=4644,4643
<4645=4646
<4647=4648
<4648=4659,4658,4649
<4649=4657,4650
<4650=4652,4651
<4652=4656,4653
<4653=4655,4654
<4660=4661
<4661=4677,4662
<4662=4663
<4663=4664
<4664=4671,4665
<4665=4667,4666
<4667=4668
<4668=4670,4669
<4671=4673,4672
<4673=4674
<4674=4676,4675
<4677=4678
<4678=4680,4679
<4681=4682
<4682=4698,4697,4683
<4683=4696,4684
<4684=4688,4685
<4685=4687,4686
<4688=4694,4689
<4689=4690
<4690=4691
<4691=4693,4692
<4694=4695
<4699=4700
<4701=4702
<4702=4704,4703
<4704=4706,4705
<4707=4708
<4708=4710,4709
<4710=4712,4711
<4712=4713
<4713=4715,4714
<4715=4717,4716
<4718=4720,4719
<4721=4722
<4722=4729,4723
<4723=4725,4724
<4725=4726
<4726=4728,4727
<4730=4731
<4731=4732
<4732=4737,4736,4733
<4733=4735,4734
<4780=4781
<4781=4783,4782
<4784=4785
<4785=4786
<4786=4794,4787
<4787=4792,4790,4788
<4788=4789
<4790=4791
<4792=4793
<4794=4795
<4796=4797
<4797=4799,4798
<4800=4801
<4801=4812,4802
<4802=4805,4803
<4803=4804
<4805=4806
<4806=4808,4807
<4808=4809
<4809=4811,4810
<4812=4813
<4813=4815,4814
<4816=4820,4817
<4817=4819,4818
<4821=4822
<4822=4828,4823
<4823=4825,4824
<4825=4827,4826
<4829=4830
<4830=4831
<4831=4840,4839,4832
<4832=4838,4833
<4833=4835,4834
<4835=4837,4836
<4841=4842
<4842=4861,4860,4843
<4843=4859,4844
<4844=4853,4845
<4845=4847,4846
<4847=4849,4848
<4849=4850
<4850=4852,4851
<4853=4855,4854
<4855=4856
<4856=4858,4857
<4909=4915,4914,4910
<4910=4911
<4911=4913,4912
<4915=4993,4986,4958,4944,4916
<4916=4936,4932,4929,4917
<4917=4918
<4918=4919
<4919=4927,4920
<4920=4925,4921
<4921=4922
<4922=4924,4923
<4925=4926
<4927=4928
<4929=4931,4930
<4932=4933
<4933=4935,4934
<4936=4937
<4937=4938
<4938=4943,4942,4939
<4939=4941,4940
<4944=4945
<4945=4956,4946
<4946=4947
<4947=4948
<4948=4950,4949
<4950=4952,4951
<4952=4953
<4953=4955,4954
<4956=4957
<4958=4978,4969,4966,4959
<4959=4960
<4960=4961
<4961=4965,4962
<4962=4964,4963
<4966=4968,4967
<4969=4970
<4970=4977,4971
<4971=4973,4972
<4973=4974
<4974=4976,4975
<4978=4979
<4979=4980
<4980=4985,4984,4981
<4981=4983,4982
<4986=4987
<4987=4992,4991,4988
<4988=4990,4989
<4993=4994
<4994=5001,4995
<4995=4996
<4996=4997
<4997=4999,4998
<4999=5000
<5001=5002
<5016=5019,5018,5017
<5019=5215,5058,5024,5020
<5020=5021
<5021=5023,5022
<5024=5050,5046,5043,5025
<5025=5026
<5026=5033,5027
<5027=5032,5031,5030,5028
<5028=5029
<5033=5034
<5034=5038,5035
<5035=5037,5036
<5038=5040,5039
<5040=5042,5041
<5043=5045,5044
<5046=5047
<5047=5049,5048
<5050=5051
<5051=5052
<5052=5057,5056,5053
<5053=5055,5054
<5058=5207,5196,5193,5059
<5059=5060
<5060=5180,5061
<5061=5062
<5062=5178,5063
<5063=5176,5095,5093,5068,5066,5064
<5064=5065
<5066=5067
<5068=5070,5069
<5070=5071
<5071=5088,5072
<5072=5080,5073
<5073=5075,5074
<5075=5077,5076
<5077=5079,5078
<5080=5086,5081
<5081=5082
<5082=5083
<5083=5085,5084
<5086=5087
<5088=5090,5089
<5090=5092,5091
<5093=5094
<5095=5097,5096
<5097=5174,5150,5098
<5098=5099
<5099=5100
<5100=5101
<5101=5145,5102
<5102=5137,5103
<5103=5115,5104
<5104=5110,5105
<5105=5107,5106
<5107=5109,5108
<5110=5112,5111
<5112=5114,5113
<5115=5129,5116
<5116=5122,5117
<5117=5119,5118
<5119=5121,5120
<5122=5124,5123
<5124=5126,5125
<5126=5128,5127
<5129=5135,5130
<5130=5131
<5131=5132
<5132=5134,5133
<5135=5136
<5137=5143,5138
<5138=5139
<5139=5140
<5140=5142,5141
<5143=5144
<5145=5147,5146
<5147=5149,5148
<5150=5151
<5151=5152
<5152=5169,5153
<5153=5161,5154
<5154=5156,5155
<5156=5158,5157
<5158=5160,5159
<5161=5167,5162
<5162=5163
<5163=5164
<5164=5166,5165
<5167=5168
<5169=5171,5170
<5171=5173,5172
<5174=5175
<5176=5177
<5178=5179
<5180=5181
<5181=5183,5182
<5183=5185,5184
<5185=5186
<5186=5188,5187
<5188=5190,5189
<5190=5192,5191
<5193=5195,5194
<5196=5197
<5197=5206,5198
<5198=5200,5199
<5200=5201
<5201=5203,5202
<5203=5205,5204
<5207=5208
<5208=5209
<5209=5214,5213,5210
<5210=5212,5211
<5215=5255,5216
<5216=5217
<5217=5247,5238,5235,5218
<5218=5219
<5219=5220
<5220=5229,5221
<5221=5222
<5222=5223
<5223=5227,5224
<5224=5225
<5225=5226
<5227=5228
<5229=5230
<5230=5232,5231
<5232=5234,5233
<5235=5237,5236
<5238=5239
<5239=5246,5240
<5240=5242,5241
<5242=5243
<5243=5245,5244
<5247=5248
<5248=5249
<5249=5254,5253,5250
<5250=5252,5251
<5255=5256
<5256=5269,5257
<5257=5259,5258
<5259=5261,5260
<5261=5262
<5262=5264,5263
<5264=5266,5265
<5266=5268,5267
<5269=5271,5270
<5271=5273,5272
<5273=5274
<5274=5276,5275
<5276=5278,5277
<5308=5311,5310,5309
<5311=5312
<5312=5313
<5318=5320,5319
<5324=5329,5325
<5325=5326
<5326=5328,5327
<5329=5330
<5330=5331
<5331=5335,5332
<5332=5333
<5333=5334
<5335=5336
<5342=5347,5343
<5343=5344
<5344=5346,5345
<5347=5348
<5348=5349
<5349=5353,5350
<5350=5351
<5351=5352
<5353=5354
<5360=5365,5361
<5361=5362
<5362=5364,5363
<5365=5396,5395,5394,5393,5392,5391,5390,5389,5388,5387,5386,5385,5384,5383,5382,5366
<5366=5381,5380,5379,5378,5377,5376,5375,5374,5367
<5367=5368
<5368=5372,5369
<5369=5370
<5370=5371
<5372=5373
<5401=5406,5402
<5402=5403
<5403=5405,5404
<5406=5437,5436,5435,5434,5433,5432,5431,5430,5429,5428,5427,5426,5425,5424,5423,5407
<5407=5422,5421,5420,5419,5418,5417,5416,5415,5408
<5408=5409
<5409=5413,5410
<5410=5411
<5411=5412
<5413=5414
