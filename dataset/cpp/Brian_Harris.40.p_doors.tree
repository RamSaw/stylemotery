>5	FunctionDef	T_VerticalDoor (vldoor_t * door)
>6	ParameterList	vldoor_t * door
>7	Parameter	 
>8	Identifier	door
>9	ParameterType	vldoor_t *
>10	ReturnType	void
>11	CompoundStatement	 
>12	SwitchStatement	switch ( door -> direction )
>13	CompoundStatement	 
>14	BreakStatement	 
>15	IfStatement	if ( res == pastdest )
>16	CompoundStatement	 
>17	SwitchStatement	switch ( door -> type )
>18	CompoundStatement	 
>19	BreakStatement	 
>20	Label	 
>21	Identifier	default
>22	BreakStatement	 
>23	ExpressionStatement	 
>24	CallExpression	P_RemoveThinker ( & door -> thinker )
>25	ArgumentList	& door -> thinker
>26	Argument	& door -> thinker
>27	UnaryOp	& door -> thinker
>28	PtrMemberAccess	door -> thinker
>29	Identifier	thinker
>30	Identifier	door
>31	UnaryOperator	&
>32	Callee	P_RemoveThinker
>33	Identifier	P_RemoveThinker
>34	ExpressionStatement	 
>35	AssignmentExpr	door -> sector -> specialdata = NULL
>36	Identifier	NULL
>37	PtrMemberAccess	door -> sector -> specialdata
>38	Identifier	specialdata
>39	PtrMemberAccess	door -> sector
>40	Identifier	sector
>41	Identifier	door
>42	Label	 
>43	Identifier	opened
>44	Label	 
>45	Identifier	blazeOpen
>46	Label	 
>47	Identifier	close30ThenOpen
>48	BreakStatement	 
>49	ExpressionStatement	 
>50	AssignmentExpr	door -> topcountdown = door -> topwait
>51	PtrMemberAccess	door -> topwait
>52	Identifier	topwait
>53	Identifier	door
>54	PtrMemberAccess	door -> topcountdown
>55	Identifier	topcountdown
>56	Identifier	door
>57	ExpressionStatement	 
>58	AssignmentExpr	door -> direction = 0
>59	PrimaryExpression	0
>60	PtrMemberAccess	door -> direction
>61	Identifier	direction
>62	Identifier	door
>63	Label	 
>64	Identifier	normal
>65	Label	 
>66	Identifier	blazeRaise
>67	Condition	 
>68	PtrMemberAccess	door -> type
>69	Identifier	type
>70	Identifier	door
>71	Condition	 
>72	EqualityExpression	res == pastdest
>73	Identifier	pastdest
>74	Identifier	res
>75	ExpressionStatement	 
>76	AssignmentExpr	res = T_MovePlane ( door -> sector , door -> speed , door -> topheight , false , 1 , door -> direction )
>77	CallExpression	T_MovePlane ( door -> sector , door -> speed , door -> topheight , false , 1 , door -> direction )
>78	ArgumentList	door -> sector
>79	Argument	door -> direction
>80	PtrMemberAccess	door -> direction
>81	Identifier	direction
>82	Identifier	door
>83	Argument	1
>84	PrimaryExpression	1
>85	Argument	false
>86	Identifier	false
>87	Argument	door -> topheight
>88	PtrMemberAccess	door -> topheight
>89	Identifier	topheight
>90	Identifier	door
>91	Argument	door -> speed
>92	PtrMemberAccess	door -> speed
>93	Identifier	speed
>94	Identifier	door
>95	Argument	door -> sector
>96	PtrMemberAccess	door -> sector
>97	Identifier	sector
>98	Identifier	door
>99	Callee	T_MovePlane
>100	Identifier	T_MovePlane
>101	Identifier	res
>102	Label	 
>103	BreakStatement	 
>104	IfStatement	if ( res == pastdest )
>105	ElseStatement	else
>106	IfStatement	if ( res == crushed )
>107	CompoundStatement	 
>108	SwitchStatement	switch ( door -> type )
>109	CompoundStatement	 
>110	BreakStatement	 
>111	ExpressionStatement	 
>112	CallExpression	S_StartSound ( & door -> sector -> soundorg , sfx_doropn )
>113	ArgumentList	& door -> sector -> soundorg
>114	Argument	sfx_doropn
>115	Identifier	sfx_doropn
>116	Argument	& door -> sector -> soundorg
>117	UnaryOp	& door -> sector -> soundorg
>118	PtrMemberAccess	door -> sector -> soundorg
>119	Identifier	soundorg
>120	PtrMemberAccess	door -> sector
>121	Identifier	sector
>122	Identifier	door
>123	UnaryOperator	&
>124	Callee	S_StartSound
>125	Identifier	S_StartSound
>126	ExpressionStatement	 
>127	AssignmentExpr	door -> direction = 1
>128	PrimaryExpression	1
>129	PtrMemberAccess	door -> direction
>130	Identifier	direction
>131	Identifier	door
>132	Label	 
>133	Identifier	default
>134	BreakStatement	 
>135	Label	 
>136	Identifier	closed
>137	Label	 
>138	Identifier	blazeClose
>139	Condition	 
>140	PtrMemberAccess	door -> type
>141	Identifier	type
>142	Identifier	door
>143	Condition	 
>144	EqualityExpression	res == crushed
>145	Identifier	crushed
>146	Identifier	res
>147	CompoundStatement	 
>148	SwitchStatement	switch ( door -> type )
>149	CompoundStatement	 
>150	BreakStatement	 
>151	Label	 
>152	Identifier	default
>153	BreakStatement	 
>154	ExpressionStatement	 
>155	AssignmentExpr	door -> topcountdown = TICRATE * 30
>156	MultiplicativeExpression	TICRATE * 30
>157	PrimaryExpression	30
>158	Identifier	TICRATE
>159	PtrMemberAccess	door -> topcountdown
>160	Identifier	topcountdown
>161	Identifier	door
>162	ExpressionStatement	 
>163	AssignmentExpr	door -> direction = 0
>164	PrimaryExpression	0
>165	PtrMemberAccess	door -> direction
>166	Identifier	direction
>167	Identifier	door
>168	Label	 
>169	Identifier	close30ThenOpen
>170	BreakStatement	 
>171	ExpressionStatement	 
>172	CallExpression	P_RemoveThinker ( & door -> thinker )
>173	ArgumentList	& door -> thinker
>174	Argument	& door -> thinker
>175	UnaryOp	& door -> thinker
>176	PtrMemberAccess	door -> thinker
>177	Identifier	thinker
>178	Identifier	door
>179	UnaryOperator	&
>180	Callee	P_RemoveThinker
>181	Identifier	P_RemoveThinker
>182	ExpressionStatement	 
>183	AssignmentExpr	door -> sector -> specialdata = NULL
>184	Identifier	NULL
>185	PtrMemberAccess	door -> sector -> specialdata
>186	Identifier	specialdata
>187	PtrMemberAccess	door -> sector
>188	Identifier	sector
>189	Identifier	door
>190	Label	 
>191	Identifier	closed
>192	Label	 
>193	Identifier	normal
>194	BreakStatement	 
>195	ExpressionStatement	 
>196	CallExpression	S_StartSound ( & door -> sector -> soundorg , sfx_bdcls )
>197	ArgumentList	& door -> sector -> soundorg
>198	Argument	sfx_bdcls
>199	Identifier	sfx_bdcls
>200	Argument	& door -> sector -> soundorg
>201	UnaryOp	& door -> sector -> soundorg
>202	PtrMemberAccess	door -> sector -> soundorg
>203	Identifier	soundorg
>204	PtrMemberAccess	door -> sector
>205	Identifier	sector
>206	Identifier	door
>207	UnaryOperator	&
>208	Callee	S_StartSound
>209	Identifier	S_StartSound
>210	ExpressionStatement	 
>211	CallExpression	P_RemoveThinker ( & door -> thinker )
>212	ArgumentList	& door -> thinker
>213	Argument	& door -> thinker
>214	UnaryOp	& door -> thinker
>215	PtrMemberAccess	door -> thinker
>216	Identifier	thinker
>217	Identifier	door
>218	UnaryOperator	&
>219	Callee	P_RemoveThinker
>220	Identifier	P_RemoveThinker
>221	ExpressionStatement	 
>222	AssignmentExpr	door -> sector -> specialdata = NULL
>223	Identifier	NULL
>224	PtrMemberAccess	door -> sector -> specialdata
>225	Identifier	specialdata
>226	PtrMemberAccess	door -> sector
>227	Identifier	sector
>228	Identifier	door
>229	Label	 
>230	Identifier	blazeClose
>231	Label	 
>232	Identifier	blazeRaise
>233	Condition	 
>234	PtrMemberAccess	door -> type
>235	Identifier	type
>236	Identifier	door
>237	Condition	 
>238	EqualityExpression	res == pastdest
>239	Identifier	pastdest
>240	Identifier	res
>241	ExpressionStatement	 
>242	AssignmentExpr	res = T_MovePlane ( door -> sector , door -> speed , door -> sector -> floorheight , false , 1 , door \
>243	CallExpression	T_MovePlane ( door -> sector , door -> speed , door -> sector -> floorheight , false , 1 , door -> direction )
>244	ArgumentList	door -> sector
>245	Argument	door -> direction
>246	PtrMemberAccess	door -> direction
>247	Identifier	direction
>248	Identifier	door
>249	Argument	1
>250	PrimaryExpression	1
>251	Argument	false
>252	Identifier	false
>253	Argument	door -> sector -> floorheight
>254	PtrMemberAccess	door -> sector -> floorheight
>255	Identifier	floorheight
>256	PtrMemberAccess	door -> sector
>257	Identifier	sector
>258	Identifier	door
>259	Argument	door -> speed
>260	PtrMemberAccess	door -> speed
>261	Identifier	speed
>262	Identifier	door
>263	Argument	door -> sector
>264	PtrMemberAccess	door -> sector
>265	Identifier	sector
>266	Identifier	door
>267	Callee	T_MovePlane
>268	Identifier	T_MovePlane
>269	Identifier	res
>270	Label	 
>271	Statement	 
>272	Statement	 
>273	BreakStatement	 
>274	IfStatement	if ( ! -- door -> topcountdown )
>275	CompoundStatement	 
>276	SwitchStatement	switch ( door -> type )
>277	CompoundStatement	 
>278	BreakStatement	 
>279	Label	 
>280	Identifier	default
>281	BreakStatement	 
>282	ExpressionStatement	 
>283	CallExpression	S_StartSound ( & door -> sector -> soundorg , sfx_doropn )
>284	ArgumentList	& door -> sector -> soundorg
>285	Argument	sfx_doropn
>286	Identifier	sfx_doropn
>287	Argument	& door -> sector -> soundorg
>288	UnaryOp	& door -> sector -> soundorg
>289	PtrMemberAccess	door -> sector -> soundorg
>290	Identifier	soundorg
>291	PtrMemberAccess	door -> sector
>292	Identifier	sector
>293	Identifier	door
>294	UnaryOperator	&
>295	Callee	S_StartSound
>296	Identifier	S_StartSound
>297	ExpressionStatement	 
>298	AssignmentExpr	door -> type = normal
>299	Identifier	normal
>300	PtrMemberAccess	door -> type
>301	Identifier	type
>302	Identifier	door
>303	ExpressionStatement	 
>304	AssignmentExpr	door -> direction = 1
>305	PrimaryExpression	1
>306	PtrMemberAccess	door -> direction
>307	Identifier	direction
>308	Identifier	door
>309	Label	 
>310	Identifier	raiseIn5Mins
>311	Condition	 
>312	PtrMemberAccess	door -> type
>313	Identifier	type
>314	Identifier	door
>315	Condition	 
>316	UnaryOp	! -- door -> topcountdown
>317	UnaryExpression	-- door -> topcountdown
>318	PtrMemberAccess	door -> topcountdown
>319	Identifier	topcountdown
>320	Identifier	door
>321	IncDec	--
>322	UnaryOperator	!
>323	Label	 
>324	BreakStatement	 
>325	IfStatement	if ( ! -- door -> topcountdown )
>326	CompoundStatement	 
>327	SwitchStatement	switch ( door -> type )
>328	CompoundStatement	 
>329	BreakStatement	 
>330	Label	 
>331	Identifier	default
>332	BreakStatement	 
>333	ExpressionStatement	 
>334	CallExpression	S_StartSound ( & door -> sector -> soundorg , sfx_doropn )
>335	ArgumentList	& door -> sector -> soundorg
>336	Argument	sfx_doropn
>337	Identifier	sfx_doropn
>338	Argument	& door -> sector -> soundorg
>339	UnaryOp	& door -> sector -> soundorg
>340	PtrMemberAccess	door -> sector -> soundorg
>341	Identifier	soundorg
>342	PtrMemberAccess	door -> sector
>343	Identifier	sector
>344	Identifier	door
>345	UnaryOperator	&
>346	Callee	S_StartSound
>347	Identifier	S_StartSound
>348	ExpressionStatement	 
>349	AssignmentExpr	door -> direction = 1
>350	PrimaryExpression	1
>351	PtrMemberAccess	door -> direction
>352	Identifier	direction
>353	Identifier	door
>354	Label	 
>355	Identifier	close30ThenOpen
>356	BreakStatement	 
>357	ExpressionStatement	 
>358	CallExpression	S_StartSound ( & door -> sector -> soundorg , sfx_dorcls )
>359	ArgumentList	& door -> sector -> soundorg
>360	Argument	sfx_dorcls
>361	Identifier	sfx_dorcls
>362	Argument	& door -> sector -> soundorg
>363	UnaryOp	& door -> sector -> soundorg
>364	PtrMemberAccess	door -> sector -> soundorg
>365	Identifier	soundorg
>366	PtrMemberAccess	door -> sector
>367	Identifier	sector
>368	Identifier	door
>369	UnaryOperator	&
>370	Callee	S_StartSound
>371	Identifier	S_StartSound
>372	ExpressionStatement	 
>373	AssignmentExpr	door -> direction = - 1
>374	UnaryOp	- 1
>375	PrimaryExpression	1
>376	UnaryOperator	-
>377	PtrMemberAccess	door -> direction
>378	Identifier	direction
>379	Identifier	door
>380	Label	 
>381	Identifier	normal
>382	BreakStatement	 
>383	ExpressionStatement	 
>384	CallExpression	S_StartSound ( & door -> sector -> soundorg , sfx_bdcls )
>385	ArgumentList	& door -> sector -> soundorg
>386	Argument	sfx_bdcls
>387	Identifier	sfx_bdcls
>388	Argument	& door -> sector -> soundorg
>389	UnaryOp	& door -> sector -> soundorg
>390	PtrMemberAccess	door -> sector -> soundorg
>391	Identifier	soundorg
>392	PtrMemberAccess	door -> sector
>393	Identifier	sector
>394	Identifier	door
>395	UnaryOperator	&
>396	Callee	S_StartSound
>397	Identifier	S_StartSound
>398	ExpressionStatement	 
>399	AssignmentExpr	door -> direction = - 1
>400	UnaryOp	- 1
>401	PrimaryExpression	1
>402	UnaryOperator	-
>403	PtrMemberAccess	door -> direction
>404	Identifier	direction
>405	Identifier	door
>406	Label	 
>407	Identifier	blazeRaise
>408	Condition	 
>409	PtrMemberAccess	door -> type
>410	Identifier	type
>411	Identifier	door
>412	Condition	 
>413	UnaryOp	! -- door -> topcountdown
>414	UnaryExpression	-- door -> topcountdown
>415	PtrMemberAccess	door -> topcountdown
>416	Identifier	topcountdown
>417	Identifier	door
>418	IncDec	--
>419	UnaryOperator	!
>420	Label	 
>421	Condition	 
>422	PtrMemberAccess	door -> direction
>423	Identifier	direction
>424	Identifier	door
>425	IdentifierDeclStatement	 
>426	IdentifierDecl	res
>427	Identifier	res
>428	IdentifierDeclType	result_e
>461	FunctionDef	EV_DoLockedDoor (line_t * line , vldoor_e type , mobj_t * thing)
>462	ParameterList	line_t * line , vldoor_e type , mobj_t * thing
>463	Parameter	 
>464	Identifier	thing
>465	ParameterType	mobj_t *
>466	Parameter	 
>467	Identifier	type
>468	ParameterType	vldoor_e
>469	Parameter	 
>470	Identifier	line
>471	ParameterType	line_t *
>472	ReturnType	int
>473	CompoundStatement	 
>474	ReturnStatement	 
>475	CallExpression	EV_DoDoor ( line , type )
>476	ArgumentList	line
>477	Argument	type
>478	Identifier	type
>479	Argument	line
>480	Identifier	line
>481	Callee	EV_DoDoor
>482	Identifier	EV_DoDoor
>483	SwitchStatement	switch ( line -> special )
>484	CompoundStatement	 
>485	BreakStatement	 
>486	IfStatement	if ( ! p -> cards [ it_yellowcard ] && ! p -> cards [ it_yellowskull ] )
>487	CompoundStatement	 
>488	ReturnStatement	 
>489	PrimaryExpression	0
>490	ExpressionStatement	 
>491	CallExpression	S_StartSound ( NULL , sfx_oof )
>492	ArgumentList	NULL
>493	Argument	sfx_oof
>494	Identifier	sfx_oof
>495	Argument	NULL
>496	Identifier	NULL
>497	Callee	S_StartSound
>498	Identifier	S_StartSound
>499	Statement	 
>500	Statement	 
>501	Statement	 
>502	Statement	 
>503	Statement	 
>504	Statement	 
>505	Statement	 
>506	Statement	 
>507	Statement	 
>508	Statement	 
>509	Statement	 
>510	Statement	 
>511	Statement	 
>512	Statement	 
>513	Statement	 
>514	Statement	 
>515	ExpressionStatement	 
>516	AssignmentExpr	p -> message = PD_YELLOWO
>517	Identifier	PD_YELLOWO
>518	PtrMemberAccess	p -> message
>519	Identifier	message
>520	Identifier	p
>521	Condition	 
>522	AndExpression	! p -> cards [ it_yellowcard ] && ! p -> cards [ it_yellowskull ]
>523	UnaryOp	! p -> cards [ it_yellowskull ]
>524	ArrayIndexing	p -> cards [ it_yellowskull ]
>525	Identifier	it_yellowskull
>526	PtrMemberAccess	p -> cards
>527	Identifier	cards
>528	Identifier	p
>529	UnaryOperator	!
>530	UnaryOp	! p -> cards [ it_yellowcard ]
>531	ArrayIndexing	p -> cards [ it_yellowcard ]
>532	Identifier	it_yellowcard
>533	PtrMemberAccess	p -> cards
>534	Identifier	cards
>535	Identifier	p
>536	UnaryOperator	!
>537	IfStatement	if ( ! p )
>538	ReturnStatement	 
>539	PrimaryExpression	0
>540	Condition	 
>541	UnaryOp	! p
>542	Identifier	p
>543	UnaryOperator	!
>544	Label	 
>545	Label	 
>546	BreakStatement	 
>547	IfStatement	if ( ! p -> cards [ it_redcard ] && ! p -> cards [ it_redskull ] )
>548	CompoundStatement	 
>549	ReturnStatement	 
>550	PrimaryExpression	0
>551	ExpressionStatement	 
>552	CallExpression	S_StartSound ( NULL , sfx_oof )
>553	ArgumentList	NULL
>554	Argument	sfx_oof
>555	Identifier	sfx_oof
>556	Argument	NULL
>557	Identifier	NULL
>558	Callee	S_StartSound
>559	Identifier	S_StartSound
>560	Statement	 
>561	Statement	 
>562	Statement	 
>563	Statement	 
>564	Statement	 
>565	Statement	 
>566	Statement	 
>567	Statement	 
>568	Statement	 
>569	Statement	 
>570	Statement	 
>571	Statement	 
>572	Statement	 
>573	Statement	 
>574	Statement	 
>575	Statement	 
>576	ExpressionStatement	 
>577	AssignmentExpr	p -> message = PD_REDO
>578	Identifier	PD_REDO
>579	PtrMemberAccess	p -> message
>580	Identifier	message
>581	Identifier	p
>582	Condition	 
>583	AndExpression	! p -> cards [ it_redcard ] && ! p -> cards [ it_redskull ]
>584	UnaryOp	! p -> cards [ it_redskull ]
>585	ArrayIndexing	p -> cards [ it_redskull ]
>586	Identifier	it_redskull
>587	PtrMemberAccess	p -> cards
>588	Identifier	cards
>589	Identifier	p
>590	UnaryOperator	!
>591	UnaryOp	! p -> cards [ it_redcard ]
>592	ArrayIndexing	p -> cards [ it_redcard ]
>593	Identifier	it_redcard
>594	PtrMemberAccess	p -> cards
>595	Identifier	cards
>596	Identifier	p
>597	UnaryOperator	!
>598	IfStatement	if ( ! p )
>599	ReturnStatement	 
>600	PrimaryExpression	0
>601	Condition	 
>602	UnaryOp	! p
>603	Identifier	p
>604	UnaryOperator	!
>605	Label	 
>606	Label	 
>607	BreakStatement	 
>608	IfStatement	if ( ! p -> cards [ it_bluecard ] && ! p -> cards [ it_blueskull ] )
>609	CompoundStatement	 
>610	ReturnStatement	 
>611	PrimaryExpression	0
>612	ExpressionStatement	 
>613	CallExpression	S_StartSound ( NULL , sfx_oof )
>614	ArgumentList	NULL
>615	Argument	sfx_oof
>616	Identifier	sfx_oof
>617	Argument	NULL
>618	Identifier	NULL
>619	Callee	S_StartSound
>620	Identifier	S_StartSound
>621	Statement	 
>622	Statement	 
>623	Statement	 
>624	Statement	 
>625	Statement	 
>626	Statement	 
>627	Statement	 
>628	Statement	 
>629	Statement	 
>630	Statement	 
>631	Statement	 
>632	Statement	 
>633	Statement	 
>634	Statement	 
>635	Statement	 
>636	Statement	 
>637	ExpressionStatement	 
>638	AssignmentExpr	p -> message = PD_BLUEO
>639	Identifier	PD_BLUEO
>640	PtrMemberAccess	p -> message
>641	Identifier	message
>642	Identifier	p
>643	Condition	 
>644	AndExpression	! p -> cards [ it_bluecard ] && ! p -> cards [ it_blueskull ]
>645	UnaryOp	! p -> cards [ it_blueskull ]
>646	ArrayIndexing	p -> cards [ it_blueskull ]
>647	Identifier	it_blueskull
>648	PtrMemberAccess	p -> cards
>649	Identifier	cards
>650	Identifier	p
>651	UnaryOperator	!
>652	UnaryOp	! p -> cards [ it_bluecard ]
>653	ArrayIndexing	p -> cards [ it_bluecard ]
>654	Identifier	it_bluecard
>655	PtrMemberAccess	p -> cards
>656	Identifier	cards
>657	Identifier	p
>658	UnaryOperator	!
>659	IfStatement	if ( ! p )
>660	ReturnStatement	 
>661	PrimaryExpression	0
>662	Condition	 
>663	UnaryOp	! p
>664	Identifier	p
>665	UnaryOperator	!
>666	Label	 
>667	Label	 
>668	Condition	 
>669	PtrMemberAccess	line -> special
>670	Identifier	special
>671	Identifier	line
>672	IfStatement	if ( ! p )
>673	ReturnStatement	 
>674	PrimaryExpression	0
>675	Condition	 
>676	UnaryOp	! p
>677	Identifier	p
>678	UnaryOperator	!
>679	ExpressionStatement	 
>680	AssignmentExpr	p = thing -> player
>681	PtrMemberAccess	thing -> player
>682	Identifier	player
>683	Identifier	thing
>684	Identifier	p
>685	IdentifierDeclStatement	 
>686	IdentifierDecl	* p
>687	Identifier	p
>688	IdentifierDeclType	player_t *
>723	FunctionDef	EV_DoDoor (line_t * line , vldoor_e type)
>724	ParameterList	line_t * line , vldoor_e type
>725	Parameter	 
>726	Identifier	type
>727	ParameterType	vldoor_e
>728	Parameter	 
>729	Identifier	line
>730	ParameterType	line_t *
>731	ReturnType	int
>732	CompoundStatement	 
>733	ReturnStatement	 
>734	Identifier	rtn
>735	WhileStatement	while ( ( secnum = P_FindSectorFromLineTag ( line , secnum ) ) >= 0 )
>736	CompoundStatement	 
>737	SwitchStatement	switch ( type )
>738	CompoundStatement	 
>739	BreakStatement	 
>740	Label	 
>741	Identifier	default
>742	BreakStatement	 
>743	IfStatement	if ( door -> topheight != sec -> ceilingheight )
>744	ExpressionStatement	 
>745	CallExpression	S_StartSound ( & door -> sector -> soundorg , sfx_doropn )
>746	ArgumentList	& door -> sector -> soundorg
>747	Argument	sfx_doropn
>748	Identifier	sfx_doropn
>749	Argument	& door -> sector -> soundorg
>750	UnaryOp	& door -> sector -> soundorg
>751	PtrMemberAccess	door -> sector -> soundorg
>752	Identifier	soundorg
>753	PtrMemberAccess	door -> sector
>754	Identifier	sector
>755	Identifier	door
>756	UnaryOperator	&
>757	Callee	S_StartSound
>758	Identifier	S_StartSound
>759	Condition	 
>760	EqualityExpression	door -> topheight != sec -> ceilingheight
>761	PtrMemberAccess	sec -> ceilingheight
>762	Identifier	ceilingheight
>763	Identifier	sec
>764	PtrMemberAccess	door -> topheight
>765	Identifier	topheight
>766	Identifier	door
>767	ExpressionStatement	 
>768	AssignmentExpr	door -> topheight -= 4 * FRACUNIT
>769	MultiplicativeExpression	4 * FRACUNIT
>770	Identifier	FRACUNIT
>771	PrimaryExpression	4
>772	PtrMemberAccess	door -> topheight
>773	Identifier	topheight
>774	Identifier	door
>775	ExpressionStatement	 
>776	AssignmentExpr	door -> topheight = P_FindLowestCeilingSurrounding ( sec )
>777	CallExpression	P_FindLowestCeilingSurrounding ( sec )
>778	ArgumentList	sec
>779	Argument	sec
>780	Identifier	sec
>781	Callee	P_FindLowestCeilingSurrounding
>782	Identifier	P_FindLowestCeilingSurrounding
>783	PtrMemberAccess	door -> topheight
>784	Identifier	topheight
>785	Identifier	door
>786	ExpressionStatement	 
>787	AssignmentExpr	door -> direction = 1
>788	PrimaryExpression	1
>789	PtrMemberAccess	door -> direction
>790	Identifier	direction
>791	Identifier	door
>792	Label	 
>793	Identifier	opened
>794	Label	 
>795	Identifier	normal
>796	BreakStatement	 
>797	IfStatement	if ( door -> topheight != sec -> ceilingheight )
>798	ExpressionStatement	 
>799	CallExpression	S_StartSound ( & door -> sector -> soundorg , sfx_bdopn )
>800	ArgumentList	& door -> sector -> soundorg
>801	Argument	sfx_bdopn
>802	Identifier	sfx_bdopn
>803	Argument	& door -> sector -> soundorg
>804	UnaryOp	& door -> sector -> soundorg
>805	PtrMemberAccess	door -> sector -> soundorg
>806	Identifier	soundorg
>807	PtrMemberAccess	door -> sector
>808	Identifier	sector
>809	Identifier	door
>810	UnaryOperator	&
>811	Callee	S_StartSound
>812	Identifier	S_StartSound
>813	Condition	 
>814	EqualityExpression	door -> topheight != sec -> ceilingheight
>815	PtrMemberAccess	sec -> ceilingheight
>816	Identifier	ceilingheight
>817	Identifier	sec
>818	PtrMemberAccess	door -> topheight
>819	Identifier	topheight
>820	Identifier	door
>821	ExpressionStatement	 
>822	AssignmentExpr	door -> speed = VDOORSPEED * 4
>823	MultiplicativeExpression	VDOORSPEED * 4
>824	PrimaryExpression	4
>825	Identifier	VDOORSPEED
>826	PtrMemberAccess	door -> speed
>827	Identifier	speed
>828	Identifier	door
>829	ExpressionStatement	 
>830	AssignmentExpr	door -> topheight -= 4 * FRACUNIT
>831	MultiplicativeExpression	4 * FRACUNIT
>832	Identifier	FRACUNIT
>833	PrimaryExpression	4
>834	PtrMemberAccess	door -> topheight
>835	Identifier	topheight
>836	Identifier	door
>837	ExpressionStatement	 
>838	AssignmentExpr	door -> topheight = P_FindLowestCeilingSurrounding ( sec )
>839	CallExpression	P_FindLowestCeilingSurrounding ( sec )
>840	ArgumentList	sec
>841	Argument	sec
>842	Identifier	sec
>843	Callee	P_FindLowestCeilingSurrounding
>844	Identifier	P_FindLowestCeilingSurrounding
>845	PtrMemberAccess	door -> topheight
>846	Identifier	topheight
>847	Identifier	door
>848	ExpressionStatement	 
>849	AssignmentExpr	door -> direction = 1
>850	PrimaryExpression	1
>851	PtrMemberAccess	door -> direction
>852	Identifier	direction
>853	Identifier	door
>854	Label	 
>855	Identifier	blazeOpen
>856	Label	 
>857	Identifier	blazeRaise
>858	BreakStatement	 
>859	ExpressionStatement	 
>860	CallExpression	S_StartSound ( & door -> sector -> soundorg , sfx_dorcls )
>861	ArgumentList	& door -> sector -> soundorg
>862	Argument	sfx_dorcls
>863	Identifier	sfx_dorcls
>864	Argument	& door -> sector -> soundorg
>865	UnaryOp	& door -> sector -> soundorg
>866	PtrMemberAccess	door -> sector -> soundorg
>867	Identifier	soundorg
>868	PtrMemberAccess	door -> sector
>869	Identifier	sector
>870	Identifier	door
>871	UnaryOperator	&
>872	Callee	S_StartSound
>873	Identifier	S_StartSound
>874	ExpressionStatement	 
>875	AssignmentExpr	door -> direction = - 1
>876	UnaryOp	- 1
>877	PrimaryExpression	1
>878	UnaryOperator	-
>879	PtrMemberAccess	door -> direction
>880	Identifier	direction
>881	Identifier	door
>882	ExpressionStatement	 
>883	AssignmentExpr	door -> topheight = sec -> ceilingheight
>884	PtrMemberAccess	sec -> ceilingheight
>885	Identifier	ceilingheight
>886	Identifier	sec
>887	PtrMemberAccess	door -> topheight
>888	Identifier	topheight
>889	Identifier	door
>890	Label	 
>891	Identifier	close30ThenOpen
>892	BreakStatement	 
>893	ExpressionStatement	 
>894	CallExpression	S_StartSound ( & door -> sector -> soundorg , sfx_dorcls )
>895	ArgumentList	& door -> sector -> soundorg
>896	Argument	sfx_dorcls
>897	Identifier	sfx_dorcls
>898	Argument	& door -> sector -> soundorg
>899	UnaryOp	& door -> sector -> soundorg
>900	PtrMemberAccess	door -> sector -> soundorg
>901	Identifier	soundorg
>902	PtrMemberAccess	door -> sector
>903	Identifier	sector
>904	Identifier	door
>905	UnaryOperator	&
>906	Callee	S_StartSound
>907	Identifier	S_StartSound
>908	ExpressionStatement	 
>909	AssignmentExpr	door -> direction = - 1
>910	UnaryOp	- 1
>911	PrimaryExpression	1
>912	UnaryOperator	-
>913	PtrMemberAccess	door -> direction
>914	Identifier	direction
>915	Identifier	door
>916	ExpressionStatement	 
>917	AssignmentExpr	door -> topheight -= 4 * FRACUNIT
>918	MultiplicativeExpression	4 * FRACUNIT
>919	Identifier	FRACUNIT
>920	PrimaryExpression	4
>921	PtrMemberAccess	door -> topheight
>922	Identifier	topheight
>923	Identifier	door
>924	ExpressionStatement	 
>925	AssignmentExpr	door -> topheight = P_FindLowestCeilingSurrounding ( sec )
>926	CallExpression	P_FindLowestCeilingSurrounding ( sec )
>927	ArgumentList	sec
>928	Argument	sec
>929	Identifier	sec
>930	Callee	P_FindLowestCeilingSurrounding
>931	Identifier	P_FindLowestCeilingSurrounding
>932	PtrMemberAccess	door -> topheight
>933	Identifier	topheight
>934	Identifier	door
>935	Label	 
>936	Identifier	closed
>937	BreakStatement	 
>938	ExpressionStatement	 
>939	CallExpression	S_StartSound ( & door -> sector -> soundorg , sfx_bdcls )
>940	ArgumentList	& door -> sector -> soundorg
>941	Argument	sfx_bdcls
>942	Identifier	sfx_bdcls
>943	Argument	& door -> sector -> soundorg
>944	UnaryOp	& door -> sector -> soundorg
>945	PtrMemberAccess	door -> sector -> soundorg
>946	Identifier	soundorg
>947	PtrMemberAccess	door -> sector
>948	Identifier	sector
>949	Identifier	door
>950	UnaryOperator	&
>951	Callee	S_StartSound
>952	Identifier	S_StartSound
>953	ExpressionStatement	 
>954	AssignmentExpr	door -> speed = VDOORSPEED * 4
>955	MultiplicativeExpression	VDOORSPEED * 4
>956	PrimaryExpression	4
>957	Identifier	VDOORSPEED
>958	PtrMemberAccess	door -> speed
>959	Identifier	speed
>960	Identifier	door
>961	ExpressionStatement	 
>962	AssignmentExpr	door -> direction = - 1
>963	UnaryOp	- 1
>964	PrimaryExpression	1
>965	UnaryOperator	-
>966	PtrMemberAccess	door -> direction
>967	Identifier	direction
>968	Identifier	door
>969	ExpressionStatement	 
>970	AssignmentExpr	door -> topheight -= 4 * FRACUNIT
>971	MultiplicativeExpression	4 * FRACUNIT
>972	Identifier	FRACUNIT
>973	PrimaryExpression	4
>974	PtrMemberAccess	door -> topheight
>975	Identifier	topheight
>976	Identifier	door
>977	ExpressionStatement	 
>978	AssignmentExpr	door -> topheight = P_FindLowestCeilingSurrounding ( sec )
>979	CallExpression	P_FindLowestCeilingSurrounding ( sec )
>980	ArgumentList	sec
>981	Argument	sec
>982	Identifier	sec
>983	Callee	P_FindLowestCeilingSurrounding
>984	Identifier	P_FindLowestCeilingSurrounding
>985	PtrMemberAccess	door -> topheight
>986	Identifier	topheight
>987	Identifier	door
>988	Label	 
>989	Identifier	blazeClose
>990	Condition	 
>991	Identifier	type
>992	ExpressionStatement	 
>993	AssignmentExpr	door -> speed = VDOORSPEED
>994	Identifier	VDOORSPEED
>995	PtrMemberAccess	door -> speed
>996	Identifier	speed
>997	Identifier	door
>998	ExpressionStatement	 
>999	AssignmentExpr	door -> topwait = VDOORWAIT
>1000	Identifier	VDOORWAIT
>1001	PtrMemberAccess	door -> topwait
>1002	Identifier	topwait
>1003	Identifier	door
>1004	ExpressionStatement	 
>1005	AssignmentExpr	door -> type = type
>1006	Identifier	type
>1007	PtrMemberAccess	door -> type
>1008	Identifier	type
>1009	Identifier	door
>1010	ExpressionStatement	 
>1011	AssignmentExpr	door -> sector = sec
>1012	Identifier	sec
>1013	PtrMemberAccess	door -> sector
>1014	Identifier	sector
>1015	Identifier	door
>1016	ExpressionStatement	 
>1017	AssignmentExpr	door -> thinker . function . acp1 = ( actionf_p1 ) T_VerticalDoor
>1018	CastExpression	( actionf_p1 ) T_VerticalDoor
>1019	Identifier	T_VerticalDoor
>1020	CastTarget	actionf_p1
>1021	MemberAccess	door -> thinker . function . acp1
>1022	Identifier	acp1
>1023	MemberAccess	door -> thinker . function
>1024	Identifier	function
>1025	PtrMemberAccess	door -> thinker
>1026	Identifier	thinker
>1027	Identifier	door
>1028	ExpressionStatement	 
>1029	AssignmentExpr	sec -> specialdata = door
>1030	Identifier	door
>1031	PtrMemberAccess	sec -> specialdata
>1032	Identifier	specialdata
>1033	Identifier	sec
>1034	ExpressionStatement	 
>1035	CallExpression	P_AddThinker ( & door -> thinker )
>1036	ArgumentList	& door -> thinker
>1037	Argument	& door -> thinker
>1038	UnaryOp	& door -> thinker
>1039	PtrMemberAccess	door -> thinker
>1040	Identifier	thinker
>1041	Identifier	door
>1042	UnaryOperator	&
>1043	Callee	P_AddThinker
>1044	Identifier	P_AddThinker
>1045	ExpressionStatement	 
>1046	AssignmentExpr	door = ( vldoor_t * ) DoomLib 
>1047	CastExpression	( vldoor_t * ) DoomLib 
>1048	CallExpression	DoomLib 
>1049	ArgumentList	sizeof ( * door )
>1050	Argument	0
>1051	PrimaryExpression	0
>1052	Argument	PU_LEVEL
>1053	Identifier	PU_LEVEL
>1054	Argument	sizeof ( * door )
>1055	SizeofExpr	sizeof ( * door )
>1056	UnaryOp	* door
>1057	Identifier	door
>1058	UnaryOperator	*
>1059	Sizeof	sizeof
>1060	Callee	DoomLib 
>1061	Identifier	DoomLib 
>1062	CastTarget	vldoor_t *
>1063	Identifier	door
>1064	ExpressionStatement	 
>1065	AssignmentExpr	rtn = 1
>1066	PrimaryExpression	1
>1067	Identifier	rtn
>1068	IfStatement	if ( sec -> specialdata )
>1069	ContinueStatement	 
>1070	Condition	 
>1071	PtrMemberAccess	sec -> specialdata
>1072	Identifier	specialdata
>1073	Identifier	sec
>1074	ExpressionStatement	 
>1075	ArrayIndexing	g -> sectors [ secnum ]
>1076	Identifier	secnum
>1077	PtrMemberAccess	g -> sectors
>1078	Identifier	sectors
>1079	Identifier	g
>1080	Statement	 
>1081	Statement	 
>1082	Statement	 
>1083	Statement	 
>1084	Condition	 
>1085	RelationalExpression	( secnum = P_FindSectorFromLineTag ( line , secnum ) ) >= 0
>1086	PrimaryExpression	0
>1087	AssignmentExpr	secnum = P_FindSectorFromLineTag ( line , secnum )
>1088	CallExpression	P_FindSectorFromLineTag ( line , secnum )
>1089	ArgumentList	line
>1090	Argument	secnum
>1091	Identifier	secnum
>1092	Argument	line
>1093	Identifier	line
>1094	Callee	P_FindSectorFromLineTag
>1095	Identifier	P_FindSectorFromLineTag
>1096	Identifier	secnum
>1097	ExpressionStatement	 
>1098	AssignmentExpr	rtn = 0
>1099	PrimaryExpression	0
>1100	Identifier	rtn
>1101	ExpressionStatement	 
>1102	AssignmentExpr	secnum = - 1
>1103	UnaryOp	- 1
>1104	PrimaryExpression	1
>1105	UnaryOperator	-
>1106	Identifier	secnum
>1107	IdentifierDeclStatement	 
>1108	IdentifierDecl	* door
>1109	Identifier	door
>1110	IdentifierDeclType	vldoor_t *
>1111	IdentifierDeclStatement	 
>1112	IdentifierDecl	* sec
>1113	Identifier	sec
>1114	IdentifierDeclType	sector_t *
>1115	IdentifierDeclStatement	 
>1116	IdentifierDecl	rtn
>1117	Identifier	rtn
>1118	IdentifierDeclType	int
>1119	IdentifierDecl	secnum
>1120	Identifier	secnum
>1121	IdentifierDeclType	int
>1164	FunctionDef	EV_VerticalDoor (line_t * line , mobj_t * thing)
>1165	ParameterList	line_t * line , mobj_t * thing
>1166	Parameter	 
>1167	Identifier	thing
>1168	ParameterType	mobj_t *
>1169	Parameter	 
>1170	Identifier	line
>1171	ParameterType	line_t *
>1172	ReturnType	void
>1173	CompoundStatement	 
>1174	ExpressionStatement	 
>1175	AssignmentExpr	door -> topheight -= 4 * FRACUNIT
>1176	MultiplicativeExpression	4 * FRACUNIT
>1177	Identifier	FRACUNIT
>1178	PrimaryExpression	4
>1179	PtrMemberAccess	door -> topheight
>1180	Identifier	topheight
>1181	Identifier	door
>1182	ExpressionStatement	 
>1183	AssignmentExpr	door -> topheight = P_FindLowestCeilingSurrounding ( sec )
>1184	CallExpression	P_FindLowestCeilingSurrounding ( sec )
>1185	ArgumentList	sec
>1186	Argument	sec
>1187	Identifier	sec
>1188	Callee	P_FindLowestCeilingSurrounding
>1189	Identifier	P_FindLowestCeilingSurrounding
>1190	PtrMemberAccess	door -> topheight
>1191	Identifier	topheight
>1192	Identifier	door
>1193	SwitchStatement	switch ( line -> special )
>1194	CompoundStatement	 
>1195	BreakStatement	 
>1196	ExpressionStatement	 
>1197	AssignmentExpr	door -> speed = VDOORSPEED * 4
>1198	MultiplicativeExpression	VDOORSPEED * 4
>1199	PrimaryExpression	4
>1200	Identifier	VDOORSPEED
>1201	PtrMemberAccess	door -> speed
>1202	Identifier	speed
>1203	Identifier	door
>1204	ExpressionStatement	 
>1205	AssignmentExpr	line -> special = 0
>1206	PrimaryExpression	0
>1207	PtrMemberAccess	line -> special
>1208	Identifier	special
>1209	Identifier	line
>1210	ExpressionStatement	 
>1211	AssignmentExpr	door -> type = blazeOpen
>1212	Identifier	blazeOpen
>1213	PtrMemberAccess	door -> type
>1214	Identifier	type
>1215	Identifier	door
>1216	Label	 
>1217	BreakStatement	 
>1218	ExpressionStatement	 
>1219	AssignmentExpr	door -> speed = VDOORSPEED * 4
>1220	MultiplicativeExpression	VDOORSPEED * 4
>1221	PrimaryExpression	4
>1222	Identifier	VDOORSPEED
>1223	PtrMemberAccess	door -> speed
>1224	Identifier	speed
>1225	Identifier	door
>1226	ExpressionStatement	 
>1227	AssignmentExpr	door -> type = blazeRaise
>1228	Identifier	blazeRaise
>1229	PtrMemberAccess	door -> type
>1230	Identifier	type
>1231	Identifier	door
>1232	Label	 
>1233	BreakStatement	 
>1234	ExpressionStatement	 
>1235	AssignmentExpr	line -> special = 0
>1236	PrimaryExpression	0
>1237	PtrMemberAccess	line -> special
>1238	Identifier	special
>1239	Identifier	line
>1240	ExpressionStatement	 
>1241	AssignmentExpr	door -> type = opened
>1242	Identifier	opened
>1243	PtrMemberAccess	door -> type
>1244	Identifier	type
>1245	Identifier	door
>1246	Label	 
>1247	Label	 
>1248	Label	 
>1249	Label	 
>1250	BreakStatement	 
>1251	ExpressionStatement	 
>1252	AssignmentExpr	door -> type = normal
>1253	Identifier	normal
>1254	PtrMemberAccess	door -> type
>1255	Identifier	type
>1256	Identifier	door
>1257	Label	 
>1258	Label	 
>1259	Label	 
>1260	Label	 
>1261	Condition	 
>1262	PtrMemberAccess	line -> special
>1263	Identifier	special
>1264	Identifier	line
>1265	ExpressionStatement	 
>1266	AssignmentExpr	door -> topwait = VDOORWAIT
>1267	Identifier	VDOORWAIT
>1268	PtrMemberAccess	door -> topwait
>1269	Identifier	topwait
>1270	Identifier	door
>1271	ExpressionStatement	 
>1272	AssignmentExpr	door -> speed = VDOORSPEED
>1273	Identifier	VDOORSPEED
>1274	PtrMemberAccess	door -> speed
>1275	Identifier	speed
>1276	Identifier	door
>1277	ExpressionStatement	 
>1278	AssignmentExpr	door -> direction = 1
>1279	PrimaryExpression	1
>1280	PtrMemberAccess	door -> direction
>1281	Identifier	direction
>1282	Identifier	door
>1283	ExpressionStatement	 
>1284	AssignmentExpr	door -> sector = sec
>1285	Identifier	sec
>1286	PtrMemberAccess	door -> sector
>1287	Identifier	sector
>1288	Identifier	door
>1289	ExpressionStatement	 
>1290	AssignmentExpr	door -> thinker . function . acp1 = ( actionf_p1 ) T_VerticalDoor
>1291	CastExpression	( actionf_p1 ) T_VerticalDoor
>1292	Identifier	T_VerticalDoor
>1293	CastTarget	actionf_p1
>1294	MemberAccess	door -> thinker . function . acp1
>1295	Identifier	acp1
>1296	MemberAccess	door -> thinker . function
>1297	Identifier	function
>1298	PtrMemberAccess	door -> thinker
>1299	Identifier	thinker
>1300	Identifier	door
>1301	ExpressionStatement	 
>1302	AssignmentExpr	sec -> specialdata = door
>1303	Identifier	door
>1304	PtrMemberAccess	sec -> specialdata
>1305	Identifier	specialdata
>1306	Identifier	sec
>1307	ExpressionStatement	 
>1308	CallExpression	P_AddThinker ( & door -> thinker )
>1309	ArgumentList	& door -> thinker
>1310	Argument	& door -> thinker
>1311	UnaryOp	& door -> thinker
>1312	PtrMemberAccess	door -> thinker
>1313	Identifier	thinker
>1314	Identifier	door
>1315	UnaryOperator	&
>1316	Callee	P_AddThinker
>1317	Identifier	P_AddThinker
>1318	ExpressionStatement	 
>1319	AssignmentExpr	door = ( vldoor_t * ) DoomLib 
>1320	CastExpression	( vldoor_t * ) DoomLib 
>1321	CallExpression	DoomLib 
>1322	ArgumentList	sizeof ( * door )
>1323	Argument	0
>1324	PrimaryExpression	0
>1325	Argument	PU_LEVEL
>1326	Identifier	PU_LEVEL
>1327	Argument	sizeof ( * door )
>1328	SizeofExpr	sizeof ( * door )
>1329	UnaryOp	* door
>1330	Identifier	door
>1331	UnaryOperator	*
>1332	Sizeof	sizeof
>1333	Callee	DoomLib 
>1334	Identifier	DoomLib 
>1335	CastTarget	vldoor_t *
>1336	Identifier	door
>1337	CompoundStatement	 
>1338	SwitchStatement	switch ( line -> special )
>1339	CompoundStatement	 
>1340	BreakStatement	 
>1341	ExpressionStatement	 
>1342	CallExpression	S_StartSound ( & sec -> soundorg , sfx_doropn )
>1343	ArgumentList	& sec -> soundorg
>1344	Argument	sfx_doropn
>1345	Identifier	sfx_doropn
>1346	Argument	& sec -> soundorg
>1347	UnaryOp	& sec -> soundorg
>1348	PtrMemberAccess	sec -> soundorg
>1349	Identifier	soundorg
>1350	Identifier	sec
>1351	UnaryOperator	&
>1352	Callee	S_StartSound
>1353	Identifier	S_StartSound
>1354	Label	 
>1355	Identifier	default
>1356	BreakStatement	 
>1357	ExpressionStatement	 
>1358	CallExpression	S_StartSound ( & sec -> soundorg , sfx_doropn )
>1359	ArgumentList	& sec -> soundorg
>1360	Argument	sfx_doropn
>1361	Identifier	sfx_doropn
>1362	Argument	& sec -> soundorg
>1363	UnaryOp	& sec -> soundorg
>1364	PtrMemberAccess	sec -> soundorg
>1365	Identifier	soundorg
>1366	Identifier	sec
>1367	UnaryOperator	&
>1368	Callee	S_StartSound
>1369	Identifier	S_StartSound
>1370	Label	 
>1371	Label	 
>1372	BreakStatement	 
>1373	ExpressionStatement	 
>1374	CallExpression	S_StartSound ( & sec -> soundorg , sfx_bdopn )
>1375	ArgumentList	& sec -> soundorg
>1376	Argument	sfx_bdopn
>1377	Identifier	sfx_bdopn
>1378	Argument	& sec -> soundorg
>1379	UnaryOp	& sec -> soundorg
>1380	PtrMemberAccess	sec -> soundorg
>1381	Identifier	soundorg
>1382	Identifier	sec
>1383	UnaryOperator	&
>1384	Callee	S_StartSound
>1385	Identifier	S_StartSound
>1386	Label	 
>1387	Label	 
>1388	Condition	 
>1389	PtrMemberAccess	line -> special
>1390	Identifier	special
>1391	Identifier	line
>1392	Statement	 
>1393	Statement	 
>1394	Statement	 
>1395	Statement	 
>1396	Statement	 
>1397	Statement	 
>1398	Statement	 
>1399	Statement	 
>1400	Statement	 
>1401	Statement	 
>1402	Statement	 
>1403	Statement	 
>1404	Statement	 
>1405	Statement	 
>1406	Statement	 
>1407	Statement	 
>1408	Statement	 
>1409	Statement	 
>1410	Statement	 
>1411	Statement	 
>1412	IfStatement	if ( sec -> specialdata )
>1413	CompoundStatement	 
>1414	SwitchStatement	switch ( line -> special )
>1415	CompoundStatement	 
>1416	ReturnStatement	 
>1417	IfStatement	if ( door -> direction == - 1 )
>1418	ElseStatement	else
>1419	CompoundStatement	 
>1420	ExpressionStatement	 
>1421	AssignmentExpr	door -> direction = - 1
>1422	UnaryOp	- 1
>1423	PrimaryExpression	1
>1424	UnaryOperator	-
>1425	PtrMemberAccess	door -> direction
>1426	Identifier	direction
>1427	Identifier	door
>1428	IfStatement	if ( ! thing -> player )
>1429	ReturnStatement	 
>1430	Condition	 
>1431	UnaryOp	! thing -> player
>1432	PtrMemberAccess	thing -> player
>1433	Identifier	player
>1434	Identifier	thing
>1435	UnaryOperator	!
>1436	ExpressionStatement	 
>1437	AssignmentExpr	door -> direction = 1
>1438	PrimaryExpression	1
>1439	PtrMemberAccess	door -> direction
>1440	Identifier	direction
>1441	Identifier	door
>1442	Condition	 
>1443	EqualityExpression	door -> direction == - 1
>1444	UnaryOp	- 1
>1445	PrimaryExpression	1
>1446	UnaryOperator	-
>1447	PtrMemberAccess	door -> direction
>1448	Identifier	direction
>1449	Identifier	door
>1450	Label	 
>1451	Label	 
>1452	Label	 
>1453	Label	 
>1454	Label	 
>1455	Condition	 
>1456	PtrMemberAccess	line -> special
>1457	Identifier	special
>1458	Identifier	line
>1459	ExpressionStatement	 
>1460	AssignmentExpr	door = ( vldoor_t * ) sec -> specialdata
>1461	CastExpression	( vldoor_t * ) sec -> specialdata
>1462	PtrMemberAccess	sec -> specialdata
>1463	Identifier	specialdata
>1464	Identifier	sec
>1465	CastTarget	vldoor_t *
>1466	Identifier	door
>1467	Condition	 
>1468	PtrMemberAccess	sec -> specialdata
>1469	Identifier	specialdata
>1470	Identifier	sec
>1471	ExpressionStatement	 
>1472	PtrMemberAccess	g -> sectors
>1473	Identifier	sectors
>1474	Identifier	g
>1475	Statement	 
>1476	Statement	 
>1477	Statement	 
>1478	Statement	 
>1479	Statement	 
>1480	ExpressionStatement	 
>1481	MemberAccess	g -> sides [ line -> sidenum [ side ^ 1 ] ] . sector
>1482	Identifier	sector
>1483	ArrayIndexing	g -> sides [ line -> sidenum [ side ^ 1 ] ]
>1484	ArrayIndexing	line -> sidenum [ side ^ 1 ]
>1485	ExclusiveOrExpression	side ^ 1
>1486	PrimaryExpression	1
>1487	Identifier	side
>1488	PtrMemberAccess	line -> sidenum
>1489	Identifier	sidenum
>1490	Identifier	line
>1491	PtrMemberAccess	g -> sides
>1492	Identifier	sides
>1493	Identifier	g
>1494	Statement	 
>1495	Statement	 
>1496	Statement	 
>1497	SwitchStatement	switch ( line -> special )
>1498	CompoundStatement	 
>1499	BreakStatement	 
>1500	IfStatement	if ( ! player -> cards [ it_redcard ] && ! player -> cards [ it_redskull ] )
>1501	CompoundStatement	 
>1502	ReturnStatement	 
>1503	ExpressionStatement	 
>1504	CallExpression	S_StartSound ( player -> mo , sfx_oof )
>1505	ArgumentList	player -> mo
>1506	Argument	sfx_oof
>1507	Identifier	sfx_oof
>1508	Argument	player -> mo
>1509	PtrMemberAccess	player -> mo
>1510	Identifier	mo
>1511	Identifier	player
>1512	Callee	S_StartSound
>1513	Identifier	S_StartSound
>1514	Statement	 
>1515	Statement	 
>1516	Statement	 
>1517	Statement	 
>1518	Statement	 
>1519	Statement	 
>1520	Statement	 
>1521	Statement	 
>1522	Statement	 
>1523	Statement	 
>1524	Statement	 
>1525	Statement	 
>1526	Statement	 
>1527	Statement	 
>1528	Statement	 
>1529	Statement	 
>1530	Statement	 
>1531	Statement	 
>1532	Statement	 
>1533	Statement	 
>1534	ExpressionStatement	 
>1535	AssignmentExpr	player -> message = PD_REDK
>1536	Identifier	PD_REDK
>1537	PtrMemberAccess	player -> message
>1538	Identifier	message
>1539	Identifier	player
>1540	Condition	 
>1541	AndExpression	! player -> cards [ it_redcard ] && ! player -> cards [ it_redskull ]
>1542	UnaryOp	! player -> cards [ it_redskull ]
>1543	ArrayIndexing	player -> cards [ it_redskull ]
>1544	Identifier	it_redskull
>1545	PtrMemberAccess	player -> cards
>1546	Identifier	cards
>1547	Identifier	player
>1548	UnaryOperator	!
>1549	UnaryOp	! player -> cards [ it_redcard ]
>1550	ArrayIndexing	player -> cards [ it_redcard ]
>1551	Identifier	it_redcard
>1552	PtrMemberAccess	player -> cards
>1553	Identifier	cards
>1554	Identifier	player
>1555	UnaryOperator	!
>1556	IfStatement	if ( ! player )
>1557	ReturnStatement	 
>1558	Condition	 
>1559	UnaryOp	! player
>1560	Identifier	player
>1561	UnaryOperator	!
>1562	Label	 
>1563	Label	 
>1564	BreakStatement	 
>1565	IfStatement	if ( ! player -> cards [ it_yellowcard ] && ! player -> cards [ it_yellowskull ] )
>1566	CompoundStatement	 
>1567	ReturnStatement	 
>1568	ExpressionStatement	 
>1569	CallExpression	S_StartSound ( player -> mo , sfx_oof )
>1570	ArgumentList	player -> mo
>1571	Argument	sfx_oof
>1572	Identifier	sfx_oof
>1573	Argument	player -> mo
>1574	PtrMemberAccess	player -> mo
>1575	Identifier	mo
>1576	Identifier	player
>1577	Callee	S_StartSound
>1578	Identifier	S_StartSound
>1579	Statement	 
>1580	Statement	 
>1581	Statement	 
>1582	Statement	 
>1583	Statement	 
>1584	Statement	 
>1585	Statement	 
>1586	Statement	 
>1587	Statement	 
>1588	Statement	 
>1589	Statement	 
>1590	Statement	 
>1591	Statement	 
>1592	Statement	 
>1593	Statement	 
>1594	Statement	 
>1595	Statement	 
>1596	Statement	 
>1597	Statement	 
>1598	Statement	 
>1599	ExpressionStatement	 
>1600	AssignmentExpr	player -> message = PD_YELLOWK
>1601	Identifier	PD_YELLOWK
>1602	PtrMemberAccess	player -> message
>1603	Identifier	message
>1604	Identifier	player
>1605	Condition	 
>1606	AndExpression	! player -> cards [ it_yellowcard ] && ! player -> cards [ it_yellowskull ]
>1607	UnaryOp	! player -> cards [ it_yellowskull ]
>1608	ArrayIndexing	player -> cards [ it_yellowskull ]
>1609	Identifier	it_yellowskull
>1610	PtrMemberAccess	player -> cards
>1611	Identifier	cards
>1612	Identifier	player
>1613	UnaryOperator	!
>1614	UnaryOp	! player -> cards [ it_yellowcard ]
>1615	ArrayIndexing	player -> cards [ it_yellowcard ]
>1616	Identifier	it_yellowcard
>1617	PtrMemberAccess	player -> cards
>1618	Identifier	cards
>1619	Identifier	player
>1620	UnaryOperator	!
>1621	IfStatement	if ( ! player )
>1622	ReturnStatement	 
>1623	Condition	 
>1624	UnaryOp	! player
>1625	Identifier	player
>1626	UnaryOperator	!
>1627	Label	 
>1628	Label	 
>1629	BreakStatement	 
>1630	IfStatement	if ( ! player -> cards [ it_bluecard ] && ! player -> cards [ it_blueskull ] )
>1631	CompoundStatement	 
>1632	ReturnStatement	 
>1633	ExpressionStatement	 
>1634	CallExpression	S_StartSound ( player -> mo , sfx_oof )
>1635	ArgumentList	player -> mo
>1636	Argument	sfx_oof
>1637	Identifier	sfx_oof
>1638	Argument	player -> mo
>1639	PtrMemberAccess	player -> mo
>1640	Identifier	mo
>1641	Identifier	player
>1642	Callee	S_StartSound
>1643	Identifier	S_StartSound
>1644	Statement	 
>1645	Statement	 
>1646	Statement	 
>1647	Statement	 
>1648	Statement	 
>1649	Statement	 
>1650	Statement	 
>1651	Statement	 
>1652	Statement	 
>1653	Statement	 
>1654	Statement	 
>1655	Statement	 
>1656	Statement	 
>1657	Statement	 
>1658	Statement	 
>1659	Statement	 
>1660	Statement	 
>1661	Statement	 
>1662	Statement	 
>1663	Statement	 
>1664	ExpressionStatement	 
>1665	AssignmentExpr	player -> message = PD_BLUEK
>1666	Identifier	PD_BLUEK
>1667	PtrMemberAccess	player -> message
>1668	Identifier	message
>1669	Identifier	player
>1670	Condition	 
>1671	AndExpression	! player -> cards [ it_bluecard ] && ! player -> cards [ it_blueskull ]
>1672	UnaryOp	! player -> cards [ it_blueskull ]
>1673	ArrayIndexing	player -> cards [ it_blueskull ]
>1674	Identifier	it_blueskull
>1675	PtrMemberAccess	player -> cards
>1676	Identifier	cards
>1677	Identifier	player
>1678	UnaryOperator	!
>1679	UnaryOp	! player -> cards [ it_bluecard ]
>1680	ArrayIndexing	player -> cards [ it_bluecard ]
>1681	Identifier	it_bluecard
>1682	PtrMemberAccess	player -> cards
>1683	Identifier	cards
>1684	Identifier	player
>1685	UnaryOperator	!
>1686	IfStatement	if ( ! player )
>1687	ReturnStatement	 
>1688	Condition	 
>1689	UnaryOp	! player
>1690	Identifier	player
>1691	UnaryOperator	!
>1692	Label	 
>1693	Label	 
>1694	Condition	 
>1695	PtrMemberAccess	line -> special
>1696	Identifier	special
>1697	Identifier	line
>1698	ExpressionStatement	 
>1699	AssignmentExpr	player = thing -> player
>1700	PtrMemberAccess	thing -> player
>1701	Identifier	player
>1702	Identifier	thing
>1703	Identifier	player
>1704	ExpressionStatement	 
>1705	AssignmentExpr	side = 0
>1706	PrimaryExpression	0
>1707	Identifier	side
>1708	IdentifierDeclStatement	 
>1709	IdentifierDecl	side
>1710	Identifier	side
>1711	IdentifierDeclType	int
>1712	IdentifierDeclStatement	 
>1713	IdentifierDecl	* door
>1714	Identifier	door
>1715	IdentifierDeclType	vldoor_t *
>1716	IdentifierDeclStatement	 
>1717	IdentifierDecl	* sec
>1718	Identifier	sec
>1719	IdentifierDeclType	sector_t *
>1720	IdentifierDeclStatement	 
>1721	IdentifierDecl	secnum
>1722	Identifier	secnum
>1723	IdentifierDeclType	int
>1724	IdentifierDeclStatement	 
>1725	IdentifierDecl	* player
>1726	Identifier	player
>1727	IdentifierDeclType	player_t *
>1805	FunctionDef	P_SpawnDoorCloseIn30 (sector_t * sec)
>1806	ParameterList	sector_t * sec
>1807	Parameter	 
>1808	Identifier	sec
>1809	ParameterType	sector_t *
>1810	ReturnType	void
>1811	CompoundStatement	 
>1812	ExpressionStatement	 
>1813	AssignmentExpr	door -> topcountdown = 30 * TICRATE
>1814	MultiplicativeExpression	30 * TICRATE
>1815	Identifier	TICRATE
>1816	PrimaryExpression	30
>1817	PtrMemberAccess	door -> topcountdown
>1818	Identifier	topcountdown
>1819	Identifier	door
>1820	ExpressionStatement	 
>1821	AssignmentExpr	door -> speed = VDOORSPEED
>1822	Identifier	VDOORSPEED
>1823	PtrMemberAccess	door -> speed
>1824	Identifier	speed
>1825	Identifier	door
>1826	ExpressionStatement	 
>1827	AssignmentExpr	door -> type = normal
>1828	Identifier	normal
>1829	PtrMemberAccess	door -> type
>1830	Identifier	type
>1831	Identifier	door
>1832	ExpressionStatement	 
>1833	AssignmentExpr	door -> direction = 0
>1834	PrimaryExpression	0
>1835	PtrMemberAccess	door -> direction
>1836	Identifier	direction
>1837	Identifier	door
>1838	ExpressionStatement	 
>1839	AssignmentExpr	door -> sector = sec
>1840	Identifier	sec
>1841	PtrMemberAccess	door -> sector
>1842	Identifier	sector
>1843	Identifier	door
>1844	ExpressionStatement	 
>1845	AssignmentExpr	door -> thinker . function . acp1 = ( actionf_p1 ) T_VerticalDoor
>1846	CastExpression	( actionf_p1 ) T_VerticalDoor
>1847	Identifier	T_VerticalDoor
>1848	CastTarget	actionf_p1
>1849	MemberAccess	door -> thinker . function . acp1
>1850	Identifier	acp1
>1851	MemberAccess	door -> thinker . function
>1852	Identifier	function
>1853	PtrMemberAccess	door -> thinker
>1854	Identifier	thinker
>1855	Identifier	door
>1856	ExpressionStatement	 
>1857	AssignmentExpr	sec -> special = 0
>1858	PrimaryExpression	0
>1859	PtrMemberAccess	sec -> special
>1860	Identifier	special
>1861	Identifier	sec
>1862	ExpressionStatement	 
>1863	AssignmentExpr	sec -> specialdata = door
>1864	Identifier	door
>1865	PtrMemberAccess	sec -> specialdata
>1866	Identifier	specialdata
>1867	Identifier	sec
>1868	ExpressionStatement	 
>1869	CallExpression	P_AddThinker ( & door -> thinker )
>1870	ArgumentList	& door -> thinker
>1871	Argument	& door -> thinker
>1872	UnaryOp	& door -> thinker
>1873	PtrMemberAccess	door -> thinker
>1874	Identifier	thinker
>1875	Identifier	door
>1876	UnaryOperator	&
>1877	Callee	P_AddThinker
>1878	Identifier	P_AddThinker
>1879	ExpressionStatement	 
>1880	AssignmentExpr	door = ( vldoor_t * ) DoomLib 
>1881	CastExpression	( vldoor_t * ) DoomLib 
>1882	CallExpression	DoomLib 
>1883	ArgumentList	sizeof ( * door )
>1884	Argument	0
>1885	PrimaryExpression	0
>1886	Argument	PU_LEVEL
>1887	Identifier	PU_LEVEL
>1888	Argument	sizeof ( * door )
>1889	SizeofExpr	sizeof ( * door )
>1890	UnaryOp	* door
>1891	Identifier	door
>1892	UnaryOperator	*
>1893	Sizeof	sizeof
>1894	Callee	DoomLib 
>1895	Identifier	DoomLib 
>1896	CastTarget	vldoor_t *
>1897	Identifier	door
>1898	IdentifierDeclStatement	 
>1899	IdentifierDecl	* door
>1900	Identifier	door
>1901	IdentifierDeclType	vldoor_t *
>1927	FunctionDef	P_SpawnDoorRaiseIn5Mins (sector_t * sec , int secnum)
>1928	ParameterList	sector_t * sec , int secnum
>1929	Parameter	 
>1930	Identifier	secnum
>1931	ParameterType	int
>1932	Parameter	 
>1933	Identifier	sec
>1934	ParameterType	sector_t *
>1935	ReturnType	void
>1936	CompoundStatement	 
>1937	ExpressionStatement	 
>1938	AssignmentExpr	door -> topcountdown = 5 * 60 * TICRATE
>1939	MultiplicativeExpression	5 * 60 * TICRATE
>1940	MultiplicativeExpression	60 * TICRATE
>1941	Identifier	TICRATE
>1942	PrimaryExpression	60
>1943	PrimaryExpression	5
>1944	PtrMemberAccess	door -> topcountdown
>1945	Identifier	topcountdown
>1946	Identifier	door
>1947	ExpressionStatement	 
>1948	AssignmentExpr	door -> topwait = VDOORWAIT
>1949	Identifier	VDOORWAIT
>1950	PtrMemberAccess	door -> topwait
>1951	Identifier	topwait
>1952	Identifier	door
>1953	ExpressionStatement	 
>1954	AssignmentExpr	door -> topheight -= 4 * FRACUNIT
>1955	MultiplicativeExpression	4 * FRACUNIT
>1956	Identifier	FRACUNIT
>1957	PrimaryExpression	4
>1958	PtrMemberAccess	door -> topheight
>1959	Identifier	topheight
>1960	Identifier	door
>1961	ExpressionStatement	 
>1962	AssignmentExpr	door -> topheight = P_FindLowestCeilingSurrounding ( sec )
>1963	CallExpression	P_FindLowestCeilingSurrounding ( sec )
>1964	ArgumentList	sec
>1965	Argument	sec
>1966	Identifier	sec
>1967	Callee	P_FindLowestCeilingSurrounding
>1968	Identifier	P_FindLowestCeilingSurrounding
>1969	PtrMemberAccess	door -> topheight
>1970	Identifier	topheight
>1971	Identifier	door
>1972	ExpressionStatement	 
>1973	AssignmentExpr	door -> speed = VDOORSPEED
>1974	Identifier	VDOORSPEED
>1975	PtrMemberAccess	door -> speed
>1976	Identifier	speed
>1977	Identifier	door
>1978	ExpressionStatement	 
>1979	AssignmentExpr	door -> type = raiseIn5Mins
>1980	Identifier	raiseIn5Mins
>1981	PtrMemberAccess	door -> type
>1982	Identifier	type
>1983	Identifier	door
>1984	ExpressionStatement	 
>1985	AssignmentExpr	door -> direction = 2
>1986	PrimaryExpression	2
>1987	PtrMemberAccess	door -> direction
>1988	Identifier	direction
>1989	Identifier	door
>1990	ExpressionStatement	 
>1991	AssignmentExpr	door -> sector = sec
>1992	Identifier	sec
>1993	PtrMemberAccess	door -> sector
>1994	Identifier	sector
>1995	Identifier	door
>1996	ExpressionStatement	 
>1997	AssignmentExpr	door -> thinker . function . acp1 = ( actionf_p1 ) T_VerticalDoor
>1998	CastExpression	( actionf_p1 ) T_VerticalDoor
>1999	Identifier	T_VerticalDoor
>2000	CastTarget	actionf_p1
>2001	MemberAccess	door -> thinker . function . acp1
>2002	Identifier	acp1
>2003	MemberAccess	door -> thinker . function
>2004	Identifier	function
>2005	PtrMemberAccess	door -> thinker
>2006	Identifier	thinker
>2007	Identifier	door
>2008	ExpressionStatement	 
>2009	AssignmentExpr	sec -> special = 0
>2010	PrimaryExpression	0
>2011	PtrMemberAccess	sec -> special
>2012	Identifier	special
>2013	Identifier	sec
>2014	ExpressionStatement	 
>2015	AssignmentExpr	sec -> specialdata = door
>2016	Identifier	door
>2017	PtrMemberAccess	sec -> specialdata
>2018	Identifier	specialdata
>2019	Identifier	sec
>2020	ExpressionStatement	 
>2021	CallExpression	P_AddThinker ( & door -> thinker )
>2022	ArgumentList	& door -> thinker
>2023	Argument	& door -> thinker
>2024	UnaryOp	& door -> thinker
>2025	PtrMemberAccess	door -> thinker
>2026	Identifier	thinker
>2027	Identifier	door
>2028	UnaryOperator	&
>2029	Callee	P_AddThinker
>2030	Identifier	P_AddThinker
>2031	ExpressionStatement	 
>2032	AssignmentExpr	door = ( vldoor_t * ) DoomLib 
>2033	CastExpression	( vldoor_t * ) DoomLib 
>2034	CallExpression	DoomLib 
>2035	ArgumentList	sizeof ( * door )
>2036	Argument	0
>2037	PrimaryExpression	0
>2038	Argument	PU_LEVEL
>2039	Identifier	PU_LEVEL
>2040	Argument	sizeof ( * door )
>2041	SizeofExpr	sizeof ( * door )
>2042	UnaryOp	* door
>2043	Identifier	door
>2044	UnaryOperator	*
>2045	Sizeof	sizeof
>2046	Callee	DoomLib 
>2047	Identifier	DoomLib 
>2048	CastTarget	vldoor_t *
>2049	Identifier	door
>2050	IdentifierDeclStatement	 
>2051	IdentifierDecl	* door
>2052	Identifier	door
>2053	IdentifierDeclType	vldoor_t *
<5=11,10,6
<6=7
<7=9,8
<11=425,12
<12=421,13
<13=420,325,324,323,274,273,272,271,270,241,104,103,102,75,15,14
<15=71,16
<16=17
<17=67,18
<18=65,63,57,49,48,46,44,42,34,23,22,20,19
<20=21
<23=24
<24=32,25
<25=26
<26=27
<27=31,28
<28=30,29
<32=33
<34=35
<35=37,36
<37=39,38
<39=41,40
<42=43
<44=45
<46=47
<49=50
<50=54,51
<51=53,52
<54=56,55
<57=58
<58=60,59
<60=62,61
<63=64
<65=66
<67=68
<68=70,69
<71=72
<72=74,73
<75=76
<76=101,77
<77=99,78
<78=95,91,87,85,83,79
<79=80
<80=82,81
<83=84
<85=86
<87=88
<88=90,89
<91=92
<92=94,93
<95=96
<96=98,97
<99=100
<104=237,147,105
<105=106
<106=143,107
<107=108
<108=139,109
<109=137,135,134,132,126,111,110
<111=112
<112=124,113
<113=116,114
<114=115
<116=117
<117=123,118
<118=120,119
<120=122,121
<124=125
<126=127
<127=129,128
<129=131,130
<132=133
<135=136
<137=138
<139=140
<140=142,141
<143=144
<144=146,145
<147=148
<148=233,149
<149=231,229,221,210,195,194,192,190,182,171,170,168,162,154,153,151,150
<151=152
<154=155
<155=159,156
<156=158,157
<159=161,160
<162=163
<163=165,164
<165=167,166
<168=169
<171=172
<172=180,173
<173=174
<174=175
<175=179,176
<176=178,177
<180=181
<182=183
<183=185,184
<185=187,186
<187=189,188
<190=191
<192=193
<195=196
<196=208,197
<197=200,198
<198=199
<200=201
<201=207,202
<202=204,203
<204=206,205
<208=209
<210=211
<211=219,212
<212=213
<213=214
<214=218,215
<215=217,216
<219=220
<221=222
<222=224,223
<224=226,225
<226=228,227
<229=230
<231=232
<233=234
<234=236,235
<237=238
<238=240,239
<241=242
<242=269,243
<243=267,244
<244=263,259,253,251,249,245
<245=246
<246=248,247
<249=250
<251=252
<253=254
<254=256,255
<256=258,257
<259=260
<260=262,261
<263=264
<264=266,265
<267=268
<274=315,275
<275=276
<276=311,277
<277=309,303,297,282,281,279,278
<279=280
<282=283
<283=295,284
<284=287,285
<285=286
<287=288
<288=294,289
<289=291,290
<291=293,292
<295=296
<297=298
<298=300,299
<300=302,301
<303=304
<304=306,305
<306=308,307
<309=310
<311=312
<312=314,313
<315=316
<316=322,317
<317=321,318
<318=320,319
<325=412,326
<326=327
<327=408,328
<328=406,398,383,382,380,372,357,356,354,348,333,332,330,329
<330=331
<333=334
<334=346,335
<335=338,336
<336=337
<338=339
<339=345,340
<340=342,341
<342=344,343
<346=347
<348=349
<349=351,350
<351=353,352
<354=355
<357=358
<358=370,359
<359=362,360
<360=361
<362=363
<363=369,364
<364=366,365
<366=368,367
<370=371
<372=373
<373=377,374
<374=376,375
<377=379,378
<380=381
<383=384
<384=396,385
<385=388,386
<386=387
<388=389
<389=395,390
<390=392,391
<392=394,393
<396=397
<398=399
<399=403,400
<400=402,401
<403=405,404
<406=407
<408=409
<409=411,410
<412=413
<413=419,414
<414=418,415
<415=417,416
<421=422
<422=424,423
<425=426
<426=428,427
<461=473,472,462
<462=469,466,463
<463=465,464
<466=468,467
<469=471,470
<473=685,679,672,483,474
<474=475
<475=481,476
<476=479,477
<477=478
<479=480
<481=482
<483=668,484
<484=667,666,659,608,607,606,605,598,547,546,545,544,537,486,485
<486=521,487
<487=515,514,513,512,511,510,509,508,507,506,505,504,503,502,501,500,499,490,488
<488=489
<490=491
<491=497,492
<492=495,493
<493=494
<495=496
<497=498
<515=516
<516=518,517
<518=520,519
<521=522
<522=530,523
<523=529,524
<524=526,525
<526=528,527
<530=536,531
<531=533,532
<533=535,534
<537=540,538
<538=539
<540=541
<541=543,542
<547=582,548
<548=576,575,574,573,572,571,570,569,568,567,566,565,564,563,562,561,560,551,549
<549=550
<551=552
<552=558,553
<553=556,554
<554=555
<556=557
<558=559
<576=577
<577=579,578
<579=581,580
<582=583
<583=591,584
<584=590,585
<585=587,586
<587=589,588
<591=597,592
<592=594,593
<594=596,595
<598=601,599
<599=600
<601=602
<602=604,603
<608=643,609
<609=637,636,635,634,633,632,631,630,629,628,627,626,625,624,623,622,621,612,610
<610=611
<612=613
<613=619,614
<614=617,615
<615=616
<617=618
<619=620
<637=638
<638=640,639
<640=642,641
<643=644
<644=652,645
<645=651,646
<646=648,647
<648=650,649
<652=658,653
<653=655,654
<655=657,656
<659=662,660
<660=661
<662=663
<663=665,664
<668=669
<669=671,670
<672=675,673
<673=674
<675=676
<676=678,677
<679=680
<680=684,681
<681=683,682
<685=686
<686=688,687
<723=732,731,724
<724=728,725
<725=727,726
<728=730,729
<732=1115,1111,1107,1101,1097,735,733
<733=734
<735=1084,736
<736=1083,1082,1081,1080,1074,1068,1064,1045,1034,1028,1016,1010,1004,998,992,737
<737=990,738
<738=988,977,969,961,953,938,937,935,924,916,908,893,892,890,882,874,859,858,856,854,848,837,829,821,797,796,794,792,786,775,767,743,742,740,739
<740=741
<743=759,744
<744=745
<745=757,746
<746=749,747
<747=748
<749=750
<750=756,751
<751=753,752
<753=755,754
<757=758
<759=760
<760=764,761
<761=763,762
<764=766,765
<767=768
<768=772,769
<769=771,770
<772=774,773
<775=776
<776=783,777
<777=781,778
<778=779
<779=780
<781=782
<783=785,784
<786=787
<787=789,788
<789=791,790
<792=793
<794=795
<797=813,798
<798=799
<799=811,800
<800=803,801
<801=802
<803=804
<804=810,805
<805=807,806
<807=809,808
<811=812
<813=814
<814=818,815
<815=817,816
<818=820,819
<821=822
<822=826,823
<823=825,824
<826=828,827
<829=830
<830=834,831
<831=833,832
<834=836,835
<837=838
<838=845,839
<839=843,840
<840=841
<841=842
<843=844
<845=847,846
<848=849
<849=851,850
<851=853,852
<854=855
<856=857
<859=860
<860=872,861
<861=864,862
<862=863
<864=865
<865=871,866
<866=868,867
<868=870,869
<872=873
<874=875
<875=879,876
<876=878,877
<879=881,880
<882=883
<883=887,884
<884=886,885
<887=889,888
<890=891
<893=894
<894=906,895
<895=898,896
<896=897
<898=899
<899=905,900
<900=902,901
<902=904,903
<906=907
<908=909
<909=913,910
<910=912,911
<913=915,914
<916=917
<917=921,918
<918=920,919
<921=923,922
<924=925
<925=932,926
<926=930,927
<927=928
<928=929
<930=931
<932=934,933
<935=936
<938=939
<939=951,940
<940=943,941
<941=942
<943=944
<944=950,945
<945=947,946
<947=949,948
<951=952
<953=954
<954=958,955
<955=957,956
<958=960,959
<961=962
<962=966,963
<963=965,964
<966=968,967
<969=970
<970=974,971
<971=973,972
<974=976,975
<977=978
<978=985,979
<979=983,980
<980=981
<981=982
<983=984
<985=987,986
<988=989
<990=991
<992=993
<993=995,994
<995=997,996
<998=999
<999=1001,1000
<1001=1003,1002
<1004=1005
<1005=1007,1006
<1007=1009,1008
<1010=1011
<1011=1013,1012
<1013=1015,1014
<1016=1017
<1017=1021,1018
<1018=1020,1019
<1021=1023,1022
<1023=1025,1024
<1025=1027,1026
<1028=1029
<1029=1031,1030
<1031=1033,1032
<1034=1035
<1035=1043,1036
<1036=1037
<1037=1038
<1038=1042,1039
<1039=1041,1040
<1043=1044
<1045=1046
<1046=1063,1047
<1047=1062,1048
<1048=1060,1049
<1049=1054,1052,1050
<1050=1051
<1052=1053
<1054=1055
<1055=1059,1056
<1056=1058,1057
<1060=1061
<1064=1065
<1065=1067,1066
<1068=1070,1069
<1070=1071
<1071=1073,1072
<1074=1075
<1075=1077,1076
<1077=1079,1078
<1084=1085
<1085=1087,1086
<1087=1096,1088
<1088=1094,1089
<1089=1092,1090
<1090=1091
<1092=1093
<1094=1095
<1097=1098
<1098=1100,1099
<1101=1102
<1102=1106,1103
<1103=1105,1104
<1107=1108
<1108=1110,1109
<1111=1112
<1112=1114,1113
<1115=1119,1116
<1116=1118,1117
<1119=1121,1120
<1164=1173,1172,1165
<1165=1169,1166
<1166=1168,1167
<1169=1171,1170
<1173=1724,1174,1182,1193,1265,1271,1277,1283,1289,1301,1307,1318,1337,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1471,1475,1476,1477,1478,1479,1480,1494,1495,1496,1497,1698,1704,1708,1712,1716,1720
<1174=1175
<1175=1179,1176
<1176=1178,1177
<1179=1181,1180
<1182=1183
<1183=1190,1184
<1184=1188,1185
<1185=1186
<1186=1187
<1188=1189
<1190=1192,1191
<1193=1261,1194
<1194=1260,1259,1258,1257,1251,1250,1249,1248,1247,1246,1240,1234,1233,1232,1226,1218,1217,1216,1210,1204,1196,1195
<1196=1197
<1197=1201,1198
<1198=1200,1199
<1201=1203,1202
<1204=1205
<1205=1207,1206
<1207=1209,1208
<1210=1211
<1211=1213,1212
<1213=1215,1214
<1218=1219
<1219=1223,1220
<1220=1222,1221
<1223=1225,1224
<1226=1227
<1227=1229,1228
<1229=1231,1230
<1234=1235
<1235=1237,1236
<1237=1239,1238
<1240=1241
<1241=1243,1242
<1243=1245,1244
<1251=1252
<1252=1254,1253
<1254=1256,1255
<1261=1262
<1262=1264,1263
<1265=1266
<1266=1268,1267
<1268=1270,1269
<1271=1272
<1272=1274,1273
<1274=1276,1275
<1277=1278
<1278=1280,1279
<1280=1282,1281
<1283=1284
<1284=1286,1285
<1286=1288,1287
<1289=1290
<1290=1294,1291
<1291=1293,1292
<1294=1296,1295
<1296=1298,1297
<1298=1300,1299
<1301=1302
<1302=1304,1303
<1304=1306,1305
<1307=1308
<1308=1316,1309
<1309=1310
<1310=1311
<1311=1315,1312
<1312=1314,1313
<1316=1317
<1318=1319
<1319=1336,1320
<1320=1335,1321
<1321=1333,1322
<1322=1327,1325,1323
<1323=1324
<1325=1326
<1327=1328
<1328=1332,1329
<1329=1331,1330
<1333=1334
<1337=1338
<1338=1388,1339
<1339=1387,1386,1373,1372,1371,1370,1357,1356,1354,1341,1340
<1341=1342
<1342=1352,1343
<1343=1346,1344
<1344=1345
<1346=1347
<1347=1351,1348
<1348=1350,1349
<1352=1353
<1354=1355
<1357=1358
<1358=1368,1359
<1359=1362,1360
<1360=1361
<1362=1363
<1363=1367,1364
<1364=1366,1365
<1368=1369
<1373=1374
<1374=1384,1375
<1375=1378,1376
<1376=1377
<1378=1379
<1379=1383,1380
<1380=1382,1381
<1384=1385
<1388=1389
<1389=1391,1390
<1412=1467,1413
<1413=1459,1414
<1414=1455,1415
<1415=1454,1453,1452,1451,1450,1417,1416
<1417=1442,1436,1418
<1418=1419
<1419=1428,1420
<1420=1421
<1421=1425,1422
<1422=1424,1423
<1425=1427,1426
<1428=1430,1429
<1430=1431
<1431=1435,1432
<1432=1434,1433
<1436=1437
<1437=1439,1438
<1439=1441,1440
<1442=1443
<1443=1447,1444
<1444=1446,1445
<1447=1449,1448
<1455=1456
<1456=1458,1457
<1459=1460
<1460=1466,1461
<1461=1465,1462
<1462=1464,1463
<1467=1468
<1468=1470,1469
<1471=1472
<1472=1474,1473
<1480=1481
<1481=1483,1482
<1483=1491,1484
<1484=1488,1485
<1485=1487,1486
<1488=1490,1489
<1491=1493,1492
<1497=1694,1498
<1498=1693,1692,1686,1630,1629,1628,1627,1621,1565,1564,1563,1562,1556,1500,1499
<1500=1540,1501
<1501=1534,1533,1532,1531,1530,1529,1528,1527,1526,1525,1524,1523,1522,1521,1520,1519,1518,1517,1516,1515,1514,1503,1502
<1503=1504
<1504=1512,1505
<1505=1508,1506
<1506=1507
<1508=1509
<1509=1511,1510
<1512=1513
<1534=1535
<1535=1537,1536
<1537=1539,1538
<1540=1541
<1541=1549,1542
<1542=1548,1543
<1543=1545,1544
<1545=1547,1546
<1549=1555,1550
<1550=1552,1551
<1552=1554,1553
<1556=1558,1557
<1558=1559
<1559=1561,1560
<1565=1605,1566
<1566=1599,1598,1597,1596,1595,1594,1593,1592,1591,1590,1589,1588,1587,1586,1585,1584,1583,1582,1581,1580,1579,1568,1567
<1568=1569
<1569=1577,1570
<1570=1573,1571
<1571=1572
<1573=1574
<1574=1576,1575
<1577=1578
<1599=1600
<1600=1602,1601
<1602=1604,1603
<1605=1606
<1606=1614,1607
<1607=1613,1608
<1608=1610,1609
<1610=1612,1611
<1614=1620,1615
<1615=1617,1616
<1617=1619,1618
<1621=1623,1622
<1623=1624
<1624=1626,1625
<1630=1670,1631
<1631=1664,1663,1662,1661,1660,1659,1658,1657,1656,1655,1654,1653,1652,1651,1650,1649,1648,1647,1646,1645,1644,1633,1632
<1633=1634
<1634=1642,1635
<1635=1638,1636
<1636=1637
<1638=1639
<1639=1641,1640
<1642=1643
<1664=1665
<1665=1667,1666
<1667=1669,1668
<1670=1671
<1671=1679,1672
<1672=1678,1673
<1673=1675,1674
<1675=1677,1676
<1679=1685,1680
<1680=1682,1681
<1682=1684,1683
<1686=1688,1687
<1688=1689
<1689=1691,1690
<1694=1695
<1695=1697,1696
<1698=1699
<1699=1703,1700
<1700=1702,1701
<1704=1705
<1705=1707,1706
<1708=1709
<1709=1711,1710
<1712=1713
<1713=1715,1714
<1716=1717
<1717=1719,1718
<1720=1721
<1721=1723,1722
<1724=1725
<1725=1727,1726
<1805=1811,1810,1806
<1806=1807
<1807=1809,1808
<1811=1898,1879,1868,1862,1856,1844,1838,1832,1826,1820,1812
<1812=1813
<1813=1817,1814
<1814=1816,1815
<1817=1819,1818
<1820=1821
<1821=1823,1822
<1823=1825,1824
<1826=1827
<1827=1829,1828
<1829=1831,1830
<1832=1833
<1833=1835,1834
<1835=1837,1836
<1838=1839
<1839=1841,1840
<1841=1843,1842
<1844=1845
<1845=1849,1846
<1846=1848,1847
<1849=1851,1850
<1851=1853,1852
<1853=1855,1854
<1856=1857
<1857=1859,1858
<1859=1861,1860
<1862=1863
<1863=1865,1864
<1865=1867,1866
<1868=1869
<1869=1877,1870
<1870=1871
<1871=1872
<1872=1876,1873
<1873=1875,1874
<1877=1878
<1879=1880
<1880=1897,1881
<1881=1896,1882
<1882=1894,1883
<1883=1888,1886,1884
<1884=1885
<1886=1887
<1888=1889
<1889=1893,1890
<1890=1892,1891
<1894=1895
<1898=1899
<1899=1901,1900
<1927=1936,1935,1928
<1928=1932,1929
<1929=1931,1930
<1932=1934,1933
<1936=2050,2031,2020,2014,2008,1996,1990,1984,1978,1972,1961,1953,1947,1937
<1937=1938
<1938=1944,1939
<1939=1943,1940
<1940=1942,1941
<1944=1946,1945
<1947=1948
<1948=1950,1949
<1950=1952,1951
<1953=1954
<1954=1958,1955
<1955=1957,1956
<1958=1960,1959
<1961=1962
<1962=1969,1963
<1963=1967,1964
<1964=1965
<1965=1966
<1967=1968
<1969=1971,1970
<1972=1973
<1973=1975,1974
<1975=1977,1976
<1978=1979
<1979=1981,1980
<1981=1983,1982
<1984=1985
<1985=1987,1986
<1987=1989,1988
<1990=1991
<1991=1993,1992
<1993=1995,1994
<1996=1997
<1997=2001,1998
<1998=2000,1999
<2001=2003,2002
<2003=2005,2004
<2005=2007,2006
<2008=2009
<2009=2011,2010
<2011=2013,2012
<2014=2015
<2015=2017,2016
<2017=2019,2018
<2020=2021
<2021=2029,2022
<2022=2023
<2023=2024
<2024=2028,2025
<2025=2027,2026
<2029=2030
<2031=2032
<2032=2049,2033
<2033=2048,2034
<2034=2046,2035
<2035=2040,2038,2036
<2036=2037
<2038=2039
<2040=2041
<2041=2045,2042
<2042=2044,2043
<2046=2047
<2050=2051
<2051=2053,2052
