>10	FunctionDef	init (int a [ ] , int n)
>11	ParameterList	int a [ ] , int n
>12	Parameter	 
>13	Identifier	n
>14	ParameterType	int
>15	Parameter	 
>16	Identifier	a
>17	ParameterType	int [ ]
>18	ReturnType	node *
>19	CompoundStatement	 
>20	ReturnStatement	 
>21	Identifier	head
>22	ForStatement	for ( int i = 0 ; i < n ; ++ i )
>23	CompoundStatement	 
>24	ExpressionStatement	 
>25	AssignmentExpr	p = nd
>26	Identifier	nd
>27	Identifier	p
>28	ExpressionStatement	 
>29	AssignmentExpr	p -> next = nd
>30	Identifier	nd
>31	PtrMemberAccess	p -> next
>32	Identifier	next
>33	Identifier	p
>34	IfStatement	if ( i == 0 )
>35	CompoundStatement	 
>36	ContinueStatement	 
>37	ExpressionStatement	 
>38	AssignmentExpr	head = p = nd
>39	AssignmentExpr	p = nd
>40	Identifier	nd
>41	Identifier	p
>42	Identifier	head
>43	Condition	 
>44	EqualityExpression	i == 0
>45	PrimaryExpression	0
>46	Identifier	i
>47	ExpressionStatement	 
>48	AssignmentExpr	nd -> data = a [ i ]
>49	ArrayIndexing	a [ i ]
>50	Identifier	i
>51	Identifier	a
>52	PtrMemberAccess	nd -> data
>53	Identifier	data
>54	Identifier	nd
>55	IdentifierDeclStatement	 
>56	IdentifierDecl	* nd = new node ( )
>57	AssignmentExpr	* nd = new node ( )
>58	UnaryExpression	new node ( )
>59	Identifier	nd
>60	Identifier	nd
>61	IdentifierDeclType	node *
>62	UnaryExpression	 
>63	Identifier	i
>64	IncDec	++
>65	Condition	 
>66	RelationalExpression	i < n
>67	Identifier	n
>68	Identifier	i
>69	ForInit	 
>70	IdentifierDeclStatement	int i = 0 ;
>71	IdentifierDecl	i = 0
>72	AssignmentExpr	i = 0
>73	PrimaryExpression	0
>74	Identifier	i
>75	Identifier	i
>76	IdentifierDeclType	int
>77	IdentifierDeclStatement	 
>78	IdentifierDecl	* p
>79	Identifier	p
>80	IdentifierDeclType	node *
>81	IdentifierDecl	* head
>82	Identifier	head
>83	IdentifierDeclType	node *
>99	FunctionDef	findNthToLast (node * head , int n)
>100	ParameterList	node * head , int n
>101	Parameter	 
>102	Identifier	n
>103	ParameterType	int
>104	Parameter	 
>105	Identifier	head
>106	ParameterType	node *
>107	ReturnType	node *
>108	CompoundStatement	 
>109	ReturnStatement	 
>110	Identifier	p
>111	WhileStatement	while ( q )
>112	CompoundStatement	 
>113	ExpressionStatement	 
>114	AssignmentExpr	q = q -> next
>115	PtrMemberAccess	q -> next
>116	Identifier	next
>117	Identifier	q
>118	Identifier	q
>119	ExpressionStatement	 
>120	AssignmentExpr	p = p -> next
>121	PtrMemberAccess	p -> next
>122	Identifier	next
>123	Identifier	p
>124	Identifier	p
>125	Condition	 
>126	Identifier	q
>127	IfStatement	if ( n > 0 )
>128	ReturnStatement	 
>129	Identifier	NULL
>130	Condition	 
>131	RelationalExpression	n > 0
>132	PrimaryExpression	0
>133	Identifier	n
>134	WhileStatement	while ( n > 0 && q )
>135	CompoundStatement	 
>136	ExpressionStatement	 
>137	UnaryExpression	-- n
>138	Identifier	n
>139	IncDec	--
>140	ExpressionStatement	 
>141	AssignmentExpr	q = q -> next
>142	PtrMemberAccess	q -> next
>143	Identifier	next
>144	Identifier	q
>145	Identifier	q
>146	Condition	 
>147	AndExpression	n > 0 && q
>148	Identifier	q
>149	RelationalExpression	n > 0
>150	PrimaryExpression	0
>151	Identifier	n
>152	IdentifierDeclStatement	 
>153	IdentifierDecl	* q = head
>154	AssignmentExpr	* q = head
>155	Identifier	head
>156	Identifier	head
>157	Identifier	q
>158	IdentifierDeclType	node *
>159	IdentifierDecl	* p = head
>160	AssignmentExpr	* p = head
>161	Identifier	head
>162	Identifier	head
>163	Identifier	p
>164	IdentifierDeclType	node *
>165	IfStatement	if ( head == NULL || n < 1 )
>166	ReturnStatement	 
>167	Identifier	NULL
>168	Condition	 
>169	OrExpression	head == NULL || n < 1
>170	RelationalExpression	n < 1
>171	PrimaryExpression	1
>172	Identifier	n
>173	EqualityExpression	head == NULL
>174	Identifier	NULL
>175	Identifier	head
>192	FunctionDef	findNthToLast1 (node * head)
>193	ParameterList	node * head
>194	Parameter	 
>195	Identifier	head
>196	ParameterType	node *
>197	ReturnType	void
>198	CompoundStatement	 
>199	ExpressionStatement	 
>200	UnaryExpression	-- nn
>201	Identifier	nn
>202	IncDec	--
>203	IfStatement	if ( nn == 1 )
>204	ExpressionStatement	 
>205	AssignmentExpr	pp = head
>206	Identifier	head
>207	Identifier	pp
>208	Condition	 
>209	EqualityExpression	nn == 1
>210	PrimaryExpression	1
>211	Identifier	nn
>212	ExpressionStatement	 
>213	CallExpression	findNthToLast1 ( head -> next )
>214	ArgumentList	head -> next
>215	Argument	head -> next
>216	PtrMemberAccess	head -> next
>217	Identifier	next
>218	Identifier	head
>219	Callee	findNthToLast1
>220	Identifier	findNthToLast1
>221	IfStatement	if ( head == NULL )
>222	ReturnStatement	 
>223	Condition	 
>224	EqualityExpression	head == NULL
>225	Identifier	NULL
>226	Identifier	head
>236	FunctionDef	main ()
>237	ParameterList	 
>238	ReturnType	int
>239	CompoundStatement	 
>240	ReturnStatement	 
>241	PrimaryExpression	0
>242	IfStatement	if ( pp )
>243	ExpressionStatement	 
>244	ShiftExpression	cout << pp -> data << endl
>245	ShiftExpression	pp -> data << endl
>246	Identifier	endl
>247	PtrMemberAccess	pp -> data
>248	Identifier	data
>249	Identifier	pp
>250	Identifier	cout
>251	Condition	 
>252	Identifier	pp
>253	ExpressionStatement	 
>254	CallExpression	findNthToLast1 ( head )
>255	ArgumentList	head
>256	Argument	head
>257	Identifier	head
>258	Callee	findNthToLast1
>259	Identifier	findNthToLast1
>260	ExpressionStatement	 
>261	AssignmentExpr	nn = 6
>262	PrimaryExpression	6
>263	Identifier	nn
>264	IfStatement	if ( p )
>265	ElseStatement	else
>266	ExpressionStatement	 
>267	ShiftExpression	cout << \"the length of link is not long enough\" << endl
>268	ShiftExpression	\"the length of link is not long enough\" << endl
>269	Identifier	endl
>270	PrimaryExpression	\"the length of link is not long enough\"
>271	Identifier	cout
>272	ExpressionStatement	 
>273	ShiftExpression	cout << p -> data << endl
>274	ShiftExpression	p -> data << endl
>275	Identifier	endl
>276	PtrMemberAccess	p -> data
>277	Identifier	data
>278	Identifier	p
>279	Identifier	cout
>280	Condition	 
>281	Identifier	p
>282	IdentifierDeclStatement	 
>283	IdentifierDecl	* p = findNthToLast ( head , 6 )
>284	AssignmentExpr	* p = findNthToLast ( head , 6 )
>285	CallExpression	findNthToLast ( head , 6 )
>286	ArgumentList	head
>287	Argument	6
>288	PrimaryExpression	6
>289	Argument	head
>290	Identifier	head
>291	Callee	findNthToLast
>292	Identifier	findNthToLast
>293	Identifier	p
>294	Identifier	p
>295	IdentifierDeclType	node *
>296	IdentifierDeclStatement	 
>297	IdentifierDecl	* head = init ( a , n )
>298	AssignmentExpr	* head = init ( a , n )
>299	CallExpression	init ( a , n )
>300	ArgumentList	a
>301	Argument	n
>302	Identifier	n
>303	Argument	a
>304	Identifier	a
>305	Callee	init
>306	Identifier	init
>307	Identifier	head
>308	Identifier	head
>309	IdentifierDeclType	node *
>310	IdentifierDeclStatement	 
>311	IdentifierDecl	a [ ] = { 9 , 2 , 1 , 3 , 5 , 6 , 2 , 6 , 3 , 1 }
>312	AssignmentExpr	a [ ] = { 9 , 2 , 1 , 3 , 5 , 6 , 2 , 6 , 3 , 1 }
>313	InitializerList	9
>314	PrimaryExpression	1
>315	PrimaryExpression	3
>316	PrimaryExpression	6
>317	PrimaryExpression	2
>318	PrimaryExpression	6
>319	PrimaryExpression	5
>320	PrimaryExpression	3
>321	PrimaryExpression	1
>322	PrimaryExpression	2
>323	PrimaryExpression	9
>324	Identifier	a
>325	Identifier	a
>326	IdentifierDeclType	int [ ]
>327	IdentifierDeclStatement	 
>328	IdentifierDecl	n = 10
>329	AssignmentExpr	n = 10
>330	PrimaryExpression	10
>331	Identifier	n
>332	Identifier	n
>333	IdentifierDeclType	int
<10=19,18,11
<11=15,12
<12=14,13
<15=17,16
<19=77,22,20
<20=21
<22=69,65,62,23
<23=55,47,34,28,24
<24=25
<25=27,26
<28=29
<29=31,30
<31=33,32
<34=43,35
<35=37,36
<37=38
<38=42,39
<39=41,40
<43=44
<44=46,45
<47=48
<48=52,49
<49=51,50
<52=54,53
<55=56
<56=61,60,57
<57=59,58
<62=64,63
<65=66
<66=68,67
<69=70
<70=71
<71=76,75,72
<72=74,73
<77=81,78
<78=80,79
<81=83,82
<99=108,107,100
<100=104,101
<101=103,102
<104=106,105
<108=165,152,134,127,111,109
<109=110
<111=125,112
<112=119,113
<113=114
<114=118,115
<115=117,116
<119=120
<120=124,121
<121=123,122
<125=126
<127=130,128
<128=129
<130=131
<131=133,132
<134=146,135
<135=140,136
<136=137
<137=139,138
<140=141
<141=145,142
<142=144,143
<146=147
<147=149,148
<149=151,150
<152=159,153
<153=158,157,154
<154=156,155
<159=164,163,160
<160=162,161
<165=168,166
<166=167
<168=169
<169=173,170
<170=172,171
<173=175,174
<192=198,197,193
<193=194
<194=196,195
<198=221,212,203,199
<199=200
<200=202,201
<203=208,204
<204=205
<205=207,206
<208=209
<209=211,210
<212=213
<213=219,214
<214=215
<215=216
<216=218,217
<219=220
<221=223,222
<223=224
<224=226,225
<236=239,238,237
<239=327,310,296,282,264,260,253,242,240
<240=241
<242=251,243
<243=244
<244=250,245
<245=247,246
<247=249,248
<251=252
<253=254
<254=258,255
<255=256
<256=257
<258=259
<260=261
<261=263,262
<264=280,272,265
<265=266
<266=267
<267=271,268
<268=270,269
<272=273
<273=279,274
<274=276,275
<276=278,277
<280=281
<282=283
<283=295,294,284
<284=293,285
<285=291,286
<286=289,287
<287=288
<289=290
<291=292
<296=297
<297=309,308,298
<298=307,299
<299=305,300
<300=303,301
<301=302
<303=304
<305=306
<310=311
<311=326,325,312
<312=324,313
<313=323,322,321,320,319,318,317,316,315,314
<327=328
<328=333,332,329
<329=331,330
