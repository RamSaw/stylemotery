>59	FunctionDef	error (bool was_error , error_code * ec , const string & message)
>60	ParameterList	bool was_error , error_code * ec , const string & message
>61	Parameter	 
>62	Identifier	message
>63	ParameterType	const string &
>64	Parameter	 
>65	Identifier	ec
>66	ParameterType	error_code *
>67	Parameter	 
>68	Identifier	was_error
>69	ParameterType	bool
>70	ReturnType	bool
>71	CompoundStatement	 
>72	ReturnStatement	 
>73	Identifier	was_error
>74	IfStatement	if ( ! was_error )
>75	ElseStatement	else
>76	CompoundStatement	 
>77	IfStatement	if ( ec == 0 )
>78	ElseStatement	else
>79	ExpressionStatement	 
>80	CallExpression	ec -> assign ( BOOST_ERRNO , system_category ( ) )
>81	ArgumentList	BOOST_ERRNO
>82	Argument	system_category ( )
>83	CallExpression	system_category ( )
>84	ArgumentList	 
>85	Callee	system_category
>86	Identifier	system_category
>87	Argument	BOOST_ERRNO
>88	Identifier	BOOST_ERRNO
>89	Callee	ec -> assign
>90	PtrMemberAccess	ec -> assign
>91	Identifier	assign
>92	Identifier	ec
>93	ExpressionStatement	 
>94	CallExpression	BOOST_FILESYSTEM_THROW ( filesystem_error ( message , error_code ( BOOST_ERRNO , system_category ( ) ) ) )
>95	ArgumentList	filesystem_error ( message , error_code ( BOOST_ERRNO , system_category ( ) ) )
>96	Argument	filesystem_error ( message , error_code ( BOOST_ERRNO , system_category ( ) ) )
>97	CallExpression	filesystem_error ( message , error_code ( BOOST_ERRNO , system_category ( ) ) )
>98	ArgumentList	message
>99	Argument	error_code ( BOOST_ERRNO , system_category ( ) )
>100	CallExpression	error_code ( BOOST_ERRNO , system_category ( ) )
>101	ArgumentList	BOOST_ERRNO
>102	Argument	system_category ( )
>103	CallExpression	system_category ( )
>104	ArgumentList	 
>105	Callee	system_category
>106	Identifier	system_category
>107	Argument	BOOST_ERRNO
>108	Identifier	BOOST_ERRNO
>109	Callee	error_code
>110	Identifier	error_code
>111	Argument	message
>112	Identifier	message
>113	Callee	filesystem_error
>114	Identifier	filesystem_error
>115	Callee	BOOST_FILESYSTEM_THROW
>116	Identifier	BOOST_FILESYSTEM_THROW
>117	Condition	 
>118	EqualityExpression	ec == 0
>119	PrimaryExpression	0
>120	Identifier	ec
>121	CompoundStatement	 
>122	IfStatement	if ( ec != 0 )
>123	ExpressionStatement	 
>124	CallExpression	ec -> clear ( )
>125	ArgumentList	 
>126	Callee	ec -> clear
>127	PtrMemberAccess	ec -> clear
>128	Identifier	clear
>129	Identifier	ec
>130	Condition	 
>131	EqualityExpression	ec != 0
>132	PrimaryExpression	0
>133	Identifier	ec
>134	Condition	 
>135	UnaryOp	! was_error
>136	Identifier	was_error
>137	UnaryOperator	!
>148	FunctionDef	error (bool was_error , const path & p , error_code * ec , const string & message)
>149	ParameterList	bool was_error , const path & p , error_code * ec , const string & message
>150	Parameter	 
>151	Identifier	message
>152	ParameterType	const string &
>153	Parameter	 
>154	Identifier	ec
>155	ParameterType	error_code *
>156	Parameter	 
>157	Identifier	p
>158	ParameterType	const path &
>159	Parameter	 
>160	Identifier	was_error
>161	ParameterType	bool
>162	ReturnType	bool
>163	CompoundStatement	 
>164	ReturnStatement	 
>165	Identifier	was_error
>166	IfStatement	if ( ! was_error )
>167	ElseStatement	else
>168	CompoundStatement	 
>169	IfStatement	if ( ec == 0 )
>170	ElseStatement	else
>171	ExpressionStatement	 
>172	CallExpression	ec -> assign ( BOOST_ERRNO , system_category ( ) )
>173	ArgumentList	BOOST_ERRNO
>174	Argument	system_category ( )
>175	CallExpression	system_category ( )
>176	ArgumentList	 
>177	Callee	system_category
>178	Identifier	system_category
>179	Argument	BOOST_ERRNO
>180	Identifier	BOOST_ERRNO
>181	Callee	ec -> assign
>182	PtrMemberAccess	ec -> assign
>183	Identifier	assign
>184	Identifier	ec
>185	ExpressionStatement	 
>186	CallExpression	BOOST_FILESYSTEM_THROW ( filesystem_error ( message , p , error_code ( BOOST_ERRNO , system_category ( ) ) ) )
>187	ArgumentList	filesystem_error ( message , p , error_code ( BOOST_ERRNO , system_category ( ) ) )
>188	Argument	filesystem_error ( message , p , error_code ( BOOST_ERRNO , system_category ( ) ) )
>189	CallExpression	filesystem_error ( message , p , error_code ( BOOST_ERRNO , system_category ( ) ) )
>190	ArgumentList	message
>191	Argument	error_code ( BOOST_ERRNO , system_category ( ) )
>192	CallExpression	error_code ( BOOST_ERRNO , system_category ( ) )
>193	ArgumentList	BOOST_ERRNO
>194	Argument	system_category ( )
>195	CallExpression	system_category ( )
>196	ArgumentList	 
>197	Callee	system_category
>198	Identifier	system_category
>199	Argument	BOOST_ERRNO
>200	Identifier	BOOST_ERRNO
>201	Callee	error_code
>202	Identifier	error_code
>203	Argument	p
>204	Identifier	p
>205	Argument	message
>206	Identifier	message
>207	Callee	filesystem_error
>208	Identifier	filesystem_error
>209	Callee	BOOST_FILESYSTEM_THROW
>210	Identifier	BOOST_FILESYSTEM_THROW
>211	Condition	 
>212	EqualityExpression	ec == 0
>213	PrimaryExpression	0
>214	Identifier	ec
>215	CompoundStatement	 
>216	IfStatement	if ( ec != 0 )
>217	ExpressionStatement	 
>218	CallExpression	ec -> clear ( )
>219	ArgumentList	 
>220	Callee	ec -> clear
>221	PtrMemberAccess	ec -> clear
>222	Identifier	clear
>223	Identifier	ec
>224	Condition	 
>225	EqualityExpression	ec != 0
>226	PrimaryExpression	0
>227	Identifier	ec
>228	Condition	 
>229	UnaryOp	! was_error
>230	Identifier	was_error
>231	UnaryOperator	!
>243	FunctionDef	error (bool was_error , const path & p1 , const path & p2 , error_code * ec , const string & message)
>244	ParameterList	bool was_error , const path & p1 , const path & p2 , error_code * ec , const string & message
>245	Parameter	 
>246	Identifier	message
>247	ParameterType	const string &
>248	Parameter	 
>249	Identifier	ec
>250	ParameterType	error_code *
>251	Parameter	 
>252	Identifier	p2
>253	ParameterType	const path &
>254	Parameter	 
>255	Identifier	p1
>256	ParameterType	const path &
>257	Parameter	 
>258	Identifier	was_error
>259	ParameterType	bool
>260	ReturnType	bool
>261	CompoundStatement	 
>262	ReturnStatement	 
>263	Identifier	was_error
>264	IfStatement	if ( ! was_error )
>265	ElseStatement	else
>266	CompoundStatement	 
>267	IfStatement	if ( ec == 0 )
>268	ElseStatement	else
>269	ExpressionStatement	 
>270	CallExpression	ec -> assign ( BOOST_ERRNO , system_category ( ) )
>271	ArgumentList	BOOST_ERRNO
>272	Argument	system_category ( )
>273	CallExpression	system_category ( )
>274	ArgumentList	 
>275	Callee	system_category
>276	Identifier	system_category
>277	Argument	BOOST_ERRNO
>278	Identifier	BOOST_ERRNO
>279	Callee	ec -> assign
>280	PtrMemberAccess	ec -> assign
>281	Identifier	assign
>282	Identifier	ec
>283	ExpressionStatement	 
>284	CallExpression	BOOST_FILESYSTEM_THROW ( filesystem_error ( message , p1 , p2 , error_code ( BOOST_ERRNO , system_category ( ) ) ) )
>285	ArgumentList	filesystem_error ( message , p1 , p2 , error_code ( BOOST_ERRNO , system_category ( ) ) )
>286	Argument	filesystem_error ( message , p1 , p2 , error_code ( BOOST_ERRNO , system_category ( ) ) )
>287	CallExpression	filesystem_error ( message , p1 , p2 , error_code ( BOOST_ERRNO , system_category ( ) ) )
>288	ArgumentList	message
>289	Argument	error_code ( BOOST_ERRNO , system_category ( ) )
>290	CallExpression	error_code ( BOOST_ERRNO , system_category ( ) )
>291	ArgumentList	BOOST_ERRNO
>292	Argument	system_category ( )
>293	CallExpression	system_category ( )
>294	ArgumentList	 
>295	Callee	system_category
>296	Identifier	system_category
>297	Argument	BOOST_ERRNO
>298	Identifier	BOOST_ERRNO
>299	Callee	error_code
>300	Identifier	error_code
>301	Argument	p2
>302	Identifier	p2
>303	Argument	p1
>304	Identifier	p1
>305	Argument	message
>306	Identifier	message
>307	Callee	filesystem_error
>308	Identifier	filesystem_error
>309	Callee	BOOST_FILESYSTEM_THROW
>310	Identifier	BOOST_FILESYSTEM_THROW
>311	Condition	 
>312	EqualityExpression	ec == 0
>313	PrimaryExpression	0
>314	Identifier	ec
>315	CompoundStatement	 
>316	IfStatement	if ( ec != 0 )
>317	ExpressionStatement	 
>318	CallExpression	ec -> clear ( )
>319	ArgumentList	 
>320	Callee	ec -> clear
>321	PtrMemberAccess	ec -> clear
>322	Identifier	clear
>323	Identifier	ec
>324	Condition	 
>325	EqualityExpression	ec != 0
>326	PrimaryExpression	0
>327	Identifier	ec
>328	Condition	 
>329	UnaryOp	! was_error
>330	Identifier	was_error
>331	UnaryOperator	!
>344	FunctionDef	error (bool was_error , const error_code & result , const path & p , error_code * ec , const string & message)
>345	ParameterList	bool was_error , const error_code & result , const path & p , error_code * ec , const string & message
>346	Parameter	 
>347	Identifier	message
>348	ParameterType	const string &
>349	Parameter	 
>350	Identifier	ec
>351	ParameterType	error_code *
>352	Parameter	 
>353	Identifier	p
>354	ParameterType	const path &
>355	Parameter	 
>356	Identifier	result
>357	ParameterType	const error_code &
>358	Parameter	 
>359	Identifier	was_error
>360	ParameterType	bool
>361	ReturnType	bool
>362	CompoundStatement	 
>363	ReturnStatement	 
>364	Identifier	was_error
>365	IfStatement	if ( ! was_error )
>366	ElseStatement	else
>367	CompoundStatement	 
>368	IfStatement	if ( ec == 0 )
>369	ElseStatement	else
>370	ExpressionStatement	 
>371	AssignmentExpr	* ec = result
>372	Identifier	result
>373	UnaryOp	* ec
>374	Identifier	ec
>375	UnaryOperator	*
>376	ExpressionStatement	 
>377	CallExpression	BOOST_FILESYSTEM_THROW ( filesystem_error ( message , p , result ) )
>378	ArgumentList	filesystem_error ( message , p , result )
>379	Argument	filesystem_error ( message , p , result )
>380	CallExpression	filesystem_error ( message , p , result )
>381	ArgumentList	message
>382	Argument	result
>383	Identifier	result
>384	Argument	p
>385	Identifier	p
>386	Argument	message
>387	Identifier	message
>388	Callee	filesystem_error
>389	Identifier	filesystem_error
>390	Callee	BOOST_FILESYSTEM_THROW
>391	Identifier	BOOST_FILESYSTEM_THROW
>392	Condition	 
>393	EqualityExpression	ec == 0
>394	PrimaryExpression	0
>395	Identifier	ec
>396	CompoundStatement	 
>397	IfStatement	if ( ec != 0 )
>398	ExpressionStatement	 
>399	CallExpression	ec -> clear ( )
>400	ArgumentList	 
>401	Callee	ec -> clear
>402	PtrMemberAccess	ec -> clear
>403	Identifier	clear
>404	Identifier	ec
>405	Condition	 
>406	EqualityExpression	ec != 0
>407	PrimaryExpression	0
>408	Identifier	ec
>409	Condition	 
>410	UnaryOp	! was_error
>411	Identifier	was_error
>412	UnaryOperator	!
>423	FunctionDef	error (bool was_error , const error_code & result , const path & p1 , const path & p2 , error_code * ec , const \
>424	ParameterList	bool was_error , const error_code & result , const path & p1 , const path & p2 , error_code * ec , const string & \
>425	Parameter	 
>426	Identifier	message
>427	ParameterType	const string &
>428	Parameter	 
>429	Identifier	ec
>430	ParameterType	error_code *
>431	Parameter	 
>432	Identifier	p2
>433	ParameterType	const path &
>434	Parameter	 
>435	Identifier	p1
>436	ParameterType	const path &
>437	Parameter	 
>438	Identifier	result
>439	ParameterType	const error_code &
>440	Parameter	 
>441	Identifier	was_error
>442	ParameterType	bool
>443	ReturnType	bool
>444	CompoundStatement	 
>445	ReturnStatement	 
>446	Identifier	was_error
>447	IfStatement	if ( ! was_error )
>448	ElseStatement	else
>449	CompoundStatement	 
>450	IfStatement	if ( ec == 0 )
>451	ElseStatement	else
>452	ExpressionStatement	 
>453	AssignmentExpr	* ec = result
>454	Identifier	result
>455	UnaryOp	* ec
>456	Identifier	ec
>457	UnaryOperator	*
>458	ExpressionStatement	 
>459	CallExpression	BOOST_FILESYSTEM_THROW ( filesystem_error ( message , p1 , p2 , result ) )
>460	ArgumentList	filesystem_error ( message , p1 , p2 , result )
>461	Argument	filesystem_error ( message , p1 , p2 , result )
>462	CallExpression	filesystem_error ( message , p1 , p2 , result )
>463	ArgumentList	message
>464	Argument	result
>465	Identifier	result
>466	Argument	p2
>467	Identifier	p2
>468	Argument	p1
>469	Identifier	p1
>470	Argument	message
>471	Identifier	message
>472	Callee	filesystem_error
>473	Identifier	filesystem_error
>474	Callee	BOOST_FILESYSTEM_THROW
>475	Identifier	BOOST_FILESYSTEM_THROW
>476	Condition	 
>477	EqualityExpression	ec == 0
>478	PrimaryExpression	0
>479	Identifier	ec
>480	CompoundStatement	 
>481	IfStatement	if ( ec != 0 )
>482	ExpressionStatement	 
>483	CallExpression	ec -> clear ( )
>484	ArgumentList	 
>485	Callee	ec -> clear
>486	PtrMemberAccess	ec -> clear
>487	Identifier	clear
>488	Identifier	ec
>489	Condition	 
>490	EqualityExpression	ec != 0
>491	PrimaryExpression	0
>492	Identifier	ec
>493	Condition	 
>494	UnaryOp	! was_error
>495	Identifier	was_error
>496	UnaryOperator	!
>508	FunctionDef	is_empty_directory (const path & p)
>509	ParameterList	const path & p
>510	Parameter	 
>511	Identifier	p
>512	ParameterType	const path &
>513	ReturnType	bool
>514	CompoundStatement	 
>515	ReturnStatement	 
>516	EqualityExpression	fs 
>517	Identifier	end_dir_itr
>518	CallExpression	fs 
>519	ArgumentList	p
>520	Argument	p
>521	Identifier	p
>522	Callee	fs 
>523	Identifier	fs 
>530	FunctionDef	remove_directory (const path & p)
>531	ParameterList	const path & p
>532	Parameter	 
>533	Identifier	p
>534	ParameterType	const path &
>535	ReturnType	bool
>536	CompoundStatement	 
>537	ReturnStatement	 
>538	CallExpression	BOOST_REMOVE_DIRECTORY ( p . c_str ( ) )
>539	ArgumentList	p . c_str ( )
>540	Argument	p . c_str ( )
>541	CallExpression	p . c_str ( )
>542	ArgumentList	 
>543	Callee	p . c_str
>544	MemberAccess	p . c_str
>545	Identifier	c_str
>546	Identifier	p
>547	Callee	BOOST_REMOVE_DIRECTORY
>548	Identifier	BOOST_REMOVE_DIRECTORY
>555	FunctionDef	remove_file (const path & p)
>556	ParameterList	const path & p
>557	Parameter	 
>558	Identifier	p
>559	ParameterType	const path &
>560	ReturnType	bool
>561	CompoundStatement	 
>562	ReturnStatement	 
>563	CallExpression	BOOST_DELETE_FILE ( p . c_str ( ) )
>564	ArgumentList	p . c_str ( )
>565	Argument	p . c_str ( )
>566	CallExpression	p . c_str ( )
>567	ArgumentList	 
>568	Callee	p . c_str
>569	MemberAccess	p . c_str
>570	Identifier	c_str
>571	Identifier	p
>572	Callee	BOOST_DELETE_FILE
>573	Identifier	BOOST_DELETE_FILE
>580	FunctionDef	remove_file_or_directory (const path & p , fs 
>581	ParameterList	const path & p , fs 
>582	Parameter	 
>583	Identifier	ec
>584	ParameterType	error_code *
>585	Parameter	 
>586	Identifier	type
>587	ParameterType	fs 
>588	Parameter	 
>589	Identifier	p
>590	ParameterType	const path &
>591	ReturnType	bool
>592	CompoundStatement	 
>593	ReturnStatement	 
>594	Identifier	true
>595	CompoundStatement	 
>596	IfStatement	if ( error ( ! remove_directory ( p ) , p , ec , \"boost
>597	ReturnStatement	 
>598	Identifier	false
>599	Condition	 
>600	CallExpression	error ( ! remove_directory ( p ) , p , ec , \"boost
>601	ArgumentList	! remove_directory ( p )
>602	Argument	\"boost
>603	PrimaryExpression	\"boost
>604	Argument	ec
>605	Identifier	ec
>606	Argument	p
>607	Identifier	p
>608	Argument	! remove_directory ( p )
>609	UnaryOp	! remove_directory ( p )
>610	CallExpression	remove_directory ( p )
>611	ArgumentList	p
>612	Argument	p
>613	Identifier	p
>614	Callee	remove_directory
>615	Identifier	remove_directory
>616	UnaryOperator	!
>617	Callee	error
>618	Identifier	error
>619	Statement	 
>620	Statement	 
>621	Statement	 
>622	Statement	 
>623	Statement	 
>624	Statement	 
>625	Statement	 
>626	Statement	 
>627	Statement	 
>628	Statement	 
>629	Statement	 
>630	Statement	 
>631	Statement	 
>632	Statement	 
>633	Statement	 
>634	Statement	 
>635	Statement	 
>636	Statement	 
>637	Statement	 
>638	Statement	 
>639	Statement	 
>640	IfStatement	if ( type == fs 
>641	ElseStatement	else
>642	CompoundStatement	 
>643	IfStatement	if ( error ( ! remove_file ( p ) , p , ec , \"boost
>644	ReturnStatement	 
>645	Identifier	false
>646	Condition	 
>647	CallExpression	error ( ! remove_file ( p ) , p , ec , \"boost
>648	ArgumentList	! remove_file ( p )
>649	Argument	\"boost
>650	PrimaryExpression	\"boost
>651	Argument	ec
>652	Identifier	ec
>653	Argument	p
>654	Identifier	p
>655	Argument	! remove_file ( p )
>656	UnaryOp	! remove_file ( p )
>657	CallExpression	remove_file ( p )
>658	ArgumentList	p
>659	Argument	p
>660	Identifier	p
>661	Callee	remove_file
>662	Identifier	remove_file
>663	UnaryOperator	!
>664	Callee	error
>665	Identifier	error
>666	CompoundStatement	 
>667	ReturnStatement	 
>668	Identifier	false
>669	IfStatement	if ( ec != 0 )
>670	ExpressionStatement	 
>671	CallExpression	ec -> clear ( )
>672	ArgumentList	 
>673	Callee	ec -> clear
>674	PtrMemberAccess	ec -> clear
>675	Identifier	clear
>676	Identifier	ec
>677	Condition	 
>678	EqualityExpression	ec != 0
>679	PrimaryExpression	0
>680	Identifier	ec
>681	Condition	 
>682	EqualityExpression	type == fs 
>683	Identifier	fs 
>684	Identifier	type
>697	FunctionDef	remove_all_aux (const path & p , fs 
>698	ParameterList	const path & p , fs 
>699	Parameter	 
>700	Identifier	ec
>701	ParameterType	error_code *
>702	Parameter	 
>703	Identifier	type
>704	ParameterType	fs 
>705	Parameter	 
>706	Identifier	p
>707	ParameterType	const path &
>708	ReturnType	boost 
>709	CompoundStatement	 
>710	ReturnStatement	 
>711	ConditionalExpression	( ec != 0 && * ec ) ? static_cast < boost 
>712	Identifier	count
>713	RelationalExpression	static_cast < boost 
>714	RelationalExpression	boost 
>715	UnaryOp	- 1
>716	PrimaryExpression	1
>717	UnaryOperator	-
>718	Identifier	boost 
>719	Identifier	static_cast
>720	Condition	ec != 0 && * ec
>721	AndExpression	ec != 0 && * ec
>722	UnaryOp	* ec
>723	Identifier	ec
>724	UnaryOperator	*
>725	EqualityExpression	ec != 0
>726	PrimaryExpression	0
>727	Identifier	ec
>728	ExpressionStatement	 
>729	CallExpression	remove_file_or_directory ( p , type , ec )
>730	ArgumentList	p
>731	Argument	ec
>732	Identifier	ec
>733	Argument	type
>734	Identifier	type
>735	Argument	p
>736	Identifier	p
>737	Callee	remove_file_or_directory
>738	Identifier	remove_file_or_directory
>739	IfStatement	if ( type == fs 
>740	CompoundStatement	 
>741	ForStatement	for ( fs 
>742	CompoundStatement	 
>743	IfStatement	if ( ec != 0 && * ec )
>744	ReturnStatement	 
>745	RelationalExpression	static_cast < boost 
>746	RelationalExpression	boost 
>747	UnaryOp	- 1
>748	PrimaryExpression	1
>749	UnaryOperator	-
>750	Identifier	boost 
>751	Identifier	static_cast
>752	Condition	 
>753	AndExpression	ec != 0 && * ec
>754	UnaryOp	* ec
>755	Identifier	ec
>756	UnaryOperator	*
>757	EqualityExpression	ec != 0
>758	PrimaryExpression	0
>759	Identifier	ec
>760	ExpressionStatement	 
>761	AssignmentExpr	count += remove_all_aux ( itr -> path ( ) , tmp_type , ec )
>762	CallExpression	remove_all_aux ( itr -> path ( ) , tmp_type , ec )
>763	ArgumentList	itr -> path ( )
>764	Argument	ec
>765	Identifier	ec
>766	Argument	tmp_type
>767	Identifier	tmp_type
>768	Argument	itr -> path ( )
>769	CallExpression	itr -> path ( )
>770	ArgumentList	 
>771	Callee	itr -> path
>772	PtrMemberAccess	itr -> path
>773	Identifier	path
>774	Identifier	itr
>775	Callee	remove_all_aux
>776	Identifier	remove_all_aux
>777	Identifier	count
>778	IfStatement	if ( ec != 0 && * ec )
>779	ReturnStatement	 
>780	RelationalExpression	static_cast < boost 
>781	RelationalExpression	boost 
>782	UnaryOp	- 1
>783	PrimaryExpression	1
>784	UnaryOperator	-
>785	Identifier	boost 
>786	Identifier	static_cast
>787	Condition	 
>788	AndExpression	ec != 0 && * ec
>789	UnaryOp	* ec
>790	Identifier	ec
>791	UnaryOperator	*
>792	EqualityExpression	ec != 0
>793	PrimaryExpression	0
>794	Identifier	ec
>795	IdentifierDeclStatement	 
>796	IdentifierDecl	tmp_type = query_file_type ( itr -> path ( ) , ec )
>797	AssignmentExpr	tmp_type = query_file_type ( itr -> path ( ) , ec )
>798	CallExpression	query_file_type ( itr -> path ( ) , ec )
>799	ArgumentList	itr -> path ( )
>800	Argument	ec
>801	Identifier	ec
>802	Argument	itr -> path ( )
>803	CallExpression	itr -> path ( )
>804	ArgumentList	 
>805	Callee	itr -> path
>806	PtrMemberAccess	itr -> path
>807	Identifier	path
>808	Identifier	itr
>809	Callee	query_file_type
>810	Identifier	query_file_type
>811	Identifier	tmp_type
>812	Identifier	tmp_type
>813	IdentifierDeclType	fs 
>814	UnaryExpression	 
>815	Identifier	itr
>816	IncDec	++
>817	Condition	 
>818	EqualityExpression	itr != end_dir_itr
>819	Identifier	end_dir_itr
>820	Identifier	itr
>821	ForInit	 
>822	IdentifierDeclStatement	fs 
>823	IdentifierDecl	itr ( p )
>824	Identifier	p
>825	Identifier	itr
>826	IdentifierDeclType	fs 
>827	Condition	 
>828	EqualityExpression	type == fs 
>829	Identifier	fs 
>830	Identifier	type
>831	IdentifierDeclStatement	 
>832	IdentifierDecl	count = 1
>833	AssignmentExpr	count = 1
>834	PrimaryExpression	1
>835	Identifier	count
>836	Identifier	count
>837	IdentifierDeclType	boost 
>858	FunctionDef	not_found_error (int errval)
>859	ParameterList	int errval
>860	Parameter	 
>861	Identifier	errval
>862	ParameterType	int
>863	ReturnType	bool
>864	CompoundStatement	 
>865	ReturnStatement	 
>866	OrExpression	errno == ENOENT || errno == ENOTDIR
>867	EqualityExpression	errno == ENOTDIR
>868	Identifier	ENOTDIR
>869	Identifier	errno
>870	EqualityExpression	errno == ENOENT
>871	Identifier	ENOENT
>872	Identifier	errno
>880	FunctionDef	copy_file_api (const std 
>881	ParameterList	const std 
>882	Parameter	 
>883	Identifier	fail_if_exists
>884	ParameterType	bool
>885	Parameter	 
>886	Identifier	to_p
>887	ParameterType	const std 
>888	Parameter	 
>889	Identifier	from_p
>890	ParameterType	const std 
>891	ReturnType	bool
>892	CompoundStatement	 
>893	ReturnStatement	 
>894	RelationalExpression	sz_read >= 0
>895	PrimaryExpression	0
>896	Identifier	sz_read
>897	ExpressionStatement	 
>898	AssignmentExpr	sz_read = - 1
>899	UnaryOp	- 1
>900	PrimaryExpression	1
>901	UnaryOperator	-
>902	Identifier	sz_read
>903	Statement	 
>904	Statement	 
>905	Statement	 
>906	Statement	 
>907	Statement	 
>908	Statement	 
>909	Statement	 
>910	Statement	 
>911	Statement	 
>912	Statement	 
>913	ExpressionStatement	 
>914	AssignmentExpr	sz_read = - 1
>915	UnaryOp	- 1
>916	PrimaryExpression	1
>917	UnaryOperator	-
>918	Identifier	sz_read
>919	Statement	 
>920	Statement	 
>921	Statement	 
>922	Statement	 
>923	Statement	 
>924	Statement	 
>925	Statement	 
>926	Statement	 
>927	Statement	 
>928	Statement	 
>929	CompoundStatement	 
>930	DoStatement	do
>931	Condition	 
>932	RelationalExpression	sz_write < sz_read
>933	Identifier	sz_read
>934	Identifier	sz_write
>935	CompoundStatement	 
>936	ExpressionStatement	 
>937	AssignmentExpr	sz_write += sz
>938	Identifier	sz
>939	Identifier	sz_write
>940	CompoundStatement	 
>941	BreakStatement	 
>942	ExpressionStatement	 
>943	AssignmentExpr	sz_read = sz
>944	Identifier	sz
>945	Identifier	sz_read
>946	Statement	 
>947	Statement	 
>948	Statement	 
>949	Statement	 
>950	Statement	 
>951	Statement	 
>952	Statement	 
>953	Statement	 
>954	Statement	 
>955	Statement	 
>956	Statement	 
>957	Statement	 
>958	Statement	 
>959	Statement	 
>960	Statement	 
>961	Statement	 
>962	Statement	 
>963	Statement	 
>964	Statement	 
>965	Statement	 
>966	Statement	 
>967	Statement	 
>968	Statement	 
>969	Statement	 
>970	Statement	 
>971	Statement	 
>972	ExpressionStatement	 
>973	AssignmentExpr	sz_write = 0
>974	PrimaryExpression	0
>975	Identifier	sz_write
>976	Statement	 
>977	Statement	 
>978	Statement	 
>979	Statement	 
>980	Statement	 
>981	Statement	 
>982	Statement	 
>983	Statement	 
>984	Statement	 
>985	Statement	 
>986	Statement	 
>987	Statement	 
>988	Statement	 
>989	Statement	 
>990	Statement	 
>991	Statement	 
>992	Statement	 
>993	Statement	 
>994	Statement	 
>995	Statement	 
>996	Statement	 
>997	Statement	 
>998	Statement	 
>999	Statement	 
>1000	Statement	 
>1001	Statement	 
>1002	IdentifierDeclStatement	 
>1003	IdentifierDecl	sz_write
>1004	Identifier	sz_write
>1005	IdentifierDeclType	ssize_t
>1006	IdentifierDecl	sz_read = 1
>1007	AssignmentExpr	sz_read = 1
>1008	PrimaryExpression	1
>1009	Identifier	sz_read
>1010	Identifier	sz_read
>1011	IdentifierDeclType	ssize_t
>1012	IdentifierDecl	sz
>1013	Identifier	sz
>1014	IdentifierDeclType	ssize_t
>1015	CompoundStatement	 
>1016	ReturnStatement	 
>1017	Identifier	false
>1018	ExpressionStatement	 
>1019	AssignmentExpr	errno = open_errno
>1020	Identifier	open_errno
>1021	Identifier	errno
>1022	ExpressionStatement	 
>1023	CallExpression	close ( infile )
>1024	ArgumentList	infile
>1025	Argument	infile
>1026	Identifier	infile
>1027	Callee	close
>1028	Identifier	close
>1029	Statement	 
>1030	ExpressionStatement	 
>1031	CallExpression	BOOST_ASSERT ( infile >= 0 )
>1032	ArgumentList	infile >= 0
>1033	Argument	infile >= 0
>1034	RelationalExpression	infile >= 0
>1035	PrimaryExpression	0
>1036	Identifier	infile
>1037	Callee	BOOST_ASSERT
>1038	Identifier	BOOST_ASSERT
>1039	IdentifierDeclStatement	 
>1040	IdentifierDecl	open_errno = errno
>1041	AssignmentExpr	open_errno = errno
>1042	Identifier	errno
>1043	Identifier	errno
>1044	Identifier	open_errno
>1045	IdentifierDeclType	int
>1046	Statement	 
>1047	Statement	 
>1048	Statement	 
>1049	Statement	 
>1050	Statement	 
>1051	Statement	 
>1052	Statement	 
>1053	Statement	 
>1054	Statement	 
>1055	Statement	 
>1056	Statement	 
>1057	Statement	 
>1058	Statement	 
>1059	Statement	 
>1060	Statement	 
>1061	Statement	 
>1062	Statement	 
>1063	Statement	 
>1064	Statement	 
>1065	Statement	 
>1066	Statement	 
>1067	Statement	 
>1068	Statement	 
>1069	Statement	 
>1070	IfStatement	if ( fail_if_exists )
>1071	ExpressionStatement	 
>1072	AssignmentExpr	oflag |= O_EXCL
>1073	Identifier	O_EXCL
>1074	Identifier	oflag
>1075	Condition	 
>1076	Identifier	fail_if_exists
>1077	IdentifierDeclStatement	 
>1078	IdentifierDecl	oflag = O_CREAT | O_WRONLY | O_TRUNC
>1079	AssignmentExpr	oflag = O_CREAT | O_WRONLY | O_TRUNC
>1080	InclusiveOrExpression	O_CREAT | O_WRONLY | O_TRUNC
>1081	InclusiveOrExpression	O_WRONLY | O_TRUNC
>1082	Identifier	O_TRUNC
>1083	Identifier	O_WRONLY
>1084	Identifier	O_CREAT
>1085	Identifier	oflag
>1086	Identifier	oflag
>1087	IdentifierDeclType	int
>1088	CompoundStatement	 
>1089	ReturnStatement	 
>1090	Identifier	false
>1091	ExpressionStatement	 
>1092	CallExpression	close ( infile )
>1093	ArgumentList	infile
>1094	Argument	infile
>1095	Identifier	infile
>1096	Callee	close
>1097	Identifier	close
>1098	Statement	 
>1099	Statement	 
>1100	Statement	 
>1101	Statement	 
>1102	Statement	 
>1103	Statement	 
>1104	Statement	 
>1105	Statement	 
>1106	Statement	 
>1107	Statement	 
>1108	Statement	 
>1109	Statement	 
>1110	Statement	 
>1111	Statement	 
>1112	Statement	 
>1113	Statement	 
>1114	Statement	 
>1115	Statement	 
>1116	IdentifierDeclStatement	 
>1117	IdentifierDecl	from_stat
>1118	Identifier	from_stat
>1119	IdentifierDeclType	struct stat
>1120	CompoundStatement	 
>1121	ReturnStatement	 
>1122	Identifier	false
>1123	Statement	 
>1124	Statement	 
>1125	Statement	 
>1126	Statement	 
>1127	Statement	 
>1128	Statement	 
>1129	Statement	 
>1130	Statement	 
>1131	Statement	 
>1132	Statement	 
>1133	Statement	 
>1134	Statement	 
>1135	Statement	 
>1136	Statement	 
>1137	Statement	 
>1138	Statement	 
>1139	Statement	 
>1140	Statement	 
>1141	Statement	 
>1142	Statement	 
>1143	IdentifierDeclStatement	 
>1144	IdentifierDecl	outfile = - 1
>1145	AssignmentExpr	outfile = - 1
>1146	UnaryOp	- 1
>1147	PrimaryExpression	1
>1148	UnaryOperator	-
>1149	Identifier	outfile
>1150	Identifier	outfile
>1151	IdentifierDeclType	int
>1152	IdentifierDecl	infile = - 1
>1153	AssignmentExpr	infile = - 1
>1154	UnaryOp	- 1
>1155	PrimaryExpression	1
>1156	UnaryOperator	-
>1157	Identifier	infile
>1158	Identifier	infile
>1159	IdentifierDeclType	int
>1160	IdentifierDeclStatement	 
>1161	IdentifierDecl	buf ( new char [ buf_sz ] )
>1162	Identifier	buf_sz
>1163	Identifier	buf
>1164	IdentifierDeclType	boost 
>1165	IdentifierDeclStatement	 
>1166	IdentifierDecl	buf_sz = 32768
>1167	AssignmentExpr	buf_sz = 32768
>1168	PrimaryExpression	32768
>1169	Identifier	buf_sz
>1170	Identifier	buf_sz
>1171	IdentifierDeclType	const std 
>1194	FunctionDef	query_file_type (const path & p , error_code * ec)
>1195	ParameterList	const path & p , error_code * ec
>1196	Parameter	 
>1197	Identifier	ec
>1198	ParameterType	error_code *
>1199	Parameter	 
>1200	Identifier	p
>1201	ParameterType	const path &
>1202	ReturnType	inline fs 
>1203	CompoundStatement	 
>1204	ReturnStatement	 
>1205	CallExpression	fs 
>1206	ArgumentList	 
>1207	Callee	fs 
>1208	MemberAccess	fs 
>1209	Identifier	type
>1210	CallExpression	fs 
>1211	ArgumentList	p
>1212	Argument	ec
>1213	Identifier	ec
>1214	Argument	p
>1215	Identifier	p
>1216	Callee	fs 
>1217	Identifier	fs 
>1227	FunctionDef	not_found_error (int errval)
>1228	ParameterList	int errval
>1229	Parameter	 
>1230	Identifier	errval
>1231	ParameterType	int
>1232	ReturnType	bool
>1233	CompoundStatement	 
>1234	ReturnStatement	 
>1235	OrExpression	errval == ERROR_FILE_NOT_FOUND || errval == ERROR_PATH_NOT_FOUND || errval == ERROR_INVALID_NAME || \
>1236	OrExpression	errval == ERROR_PATH_NOT_FOUND || errval == ERROR_INVALID_NAME || errval == ERROR_INVALID_DRIVE || errval == \
>1237	OrExpression	errval == ERROR_INVALID_NAME || errval == ERROR_INVALID_DRIVE || errval == ERROR_NOT_READY || errval == \
>1238	OrExpression	errval == ERROR_INVALID_DRIVE || errval == ERROR_NOT_READY || errval == ERROR_INVALID_PARAMETER || errval == \
>1239	OrExpression	errval == ERROR_NOT_READY || errval == ERROR_INVALID_PARAMETER || errval == ERROR_BAD_PATHNAME || errval == \
>1240	OrExpression	errval == ERROR_INVALID_PARAMETER || errval == ERROR_BAD_PATHNAME || errval == ERROR_BAD_NETPATH
>1241	OrExpression	errval == ERROR_BAD_PATHNAME || errval == ERROR_BAD_NETPATH
>1242	EqualityExpression	errval == ERROR_BAD_NETPATH
>1243	Identifier	ERROR_BAD_NETPATH
>1244	Identifier	errval
>1245	EqualityExpression	errval == ERROR_BAD_PATHNAME
>1246	Identifier	ERROR_BAD_PATHNAME
>1247	Identifier	errval
>1248	EqualityExpression	errval == ERROR_INVALID_PARAMETER
>1249	Identifier	ERROR_INVALID_PARAMETER
>1250	Identifier	errval
>1251	EqualityExpression	errval == ERROR_NOT_READY
>1252	Identifier	ERROR_NOT_READY
>1253	Identifier	errval
>1254	EqualityExpression	errval == ERROR_INVALID_DRIVE
>1255	Identifier	ERROR_INVALID_DRIVE
>1256	Identifier	errval
>1257	EqualityExpression	errval == ERROR_INVALID_NAME
>1258	Identifier	ERROR_INVALID_NAME
>1259	Identifier	errval
>1260	EqualityExpression	errval == ERROR_PATH_NOT_FOUND
>1261	Identifier	ERROR_PATH_NOT_FOUND
>1262	Identifier	errval
>1263	EqualityExpression	errval == ERROR_FILE_NOT_FOUND
>1264	Identifier	ERROR_FILE_NOT_FOUND
>1265	Identifier	errval
>1278	FunctionDef	make_permissions (const path & p , DWORD attr)
>1279	ParameterList	const path & p , DWORD attr
>1280	Parameter	 
>1281	Identifier	attr
>1282	ParameterType	DWORD
>1283	Parameter	 
>1284	Identifier	p
>1285	ParameterType	const path &
>1286	ReturnType	perms
>1287	CompoundStatement	 
>1288	ReturnStatement	 
>1289	Identifier	prms
>1290	IfStatement	if ( BOOST_FILESYSTEM_STRICMP ( p . extension ( ) . string ( ) . c_str ( ) , \".exe\" ) == 0 || BOOST_FILESYSTEM_STRICMP ( \
>1291	ExpressionStatement	 
>1292	AssignmentExpr	prms |= fs 
>1293	InclusiveOrExpression	fs 
>1294	InclusiveOrExpression	fs 
>1295	Identifier	fs 
>1296	Identifier	fs 
>1297	Identifier	fs 
>1298	Identifier	prms
>1299	Condition	 
>1300	OrExpression	BOOST_FILESYSTEM_STRICMP ( p . extension ( ) . string ( ) . c_str ( ) , \".exe\" ) == 0 || BOOST_FILESYSTEM_\
>1301	OrExpression	BOOST_FILESYSTEM_STRICMP ( p . extension ( ) . string ( ) . c_str ( ) , \".com\" ) == 0 || BOOST_FILESYSTEM_\
>1302	OrExpression	BOOST_FILESYSTEM_STRICMP ( p . extension ( ) . string ( ) . c_str ( ) , \".bat\" ) == 0 || BOOST_FILESYSTEM_\
>1303	EqualityExpression	BOOST_FILESYSTEM_STRICMP ( p . extension ( ) . string ( ) . c_str ( ) , \".cmd\" ) == 0
>1304	PrimaryExpression	0
>1305	CallExpression	BOOST_FILESYSTEM_STRICMP ( p . extension ( ) . string ( ) . c_str ( ) , \".cmd\" )
>1306	ArgumentList	p . extension ( ) . string ( ) . c_str ( )
>1307	Argument	\".cmd\"
>1308	PrimaryExpression	\".cmd\"
>1309	Argument	p . extension ( ) . string ( ) . c_str ( )
>1310	CallExpression	p . extension ( ) . string ( ) . c_str ( )
>1311	ArgumentList	 
>1312	Callee	p . extension ( ) . string ( ) . c_str
>1313	MemberAccess	p . extension ( ) . string ( ) . c_str
>1314	Identifier	c_str
>1315	CallExpression	p . extension ( ) . string ( )
>1316	ArgumentList	 
>1317	Callee	p . extension ( ) . string
>1318	MemberAccess	p . extension ( ) . string
>1319	Identifier	string
>1320	CallExpression	p . extension ( )
>1321	ArgumentList	 
>1322	Callee	p . extension
>1323	MemberAccess	p . extension
>1324	Identifier	extension
>1325	Identifier	p
>1326	Callee	BOOST_FILESYSTEM_STRICMP
>1327	Identifier	BOOST_FILESYSTEM_STRICMP
>1328	EqualityExpression	BOOST_FILESYSTEM_STRICMP ( p . extension ( ) . string ( ) . c_str ( ) , \".bat\" ) == 0
>1329	PrimaryExpression	0
>1330	CallExpression	BOOST_FILESYSTEM_STRICMP ( p . extension ( ) . string ( ) . c_str ( ) , \".bat\" )
>1331	ArgumentList	p . extension ( ) . string ( ) . c_str ( )
>1332	Argument	\".bat\"
>1333	PrimaryExpression	\".bat\"
>1334	Argument	p . extension ( ) . string ( ) . c_str ( )
>1335	CallExpression	p . extension ( ) . string ( ) . c_str ( )
>1336	ArgumentList	 
>1337	Callee	p . extension ( ) . string ( ) . c_str
>1338	MemberAccess	p . extension ( ) . string ( ) . c_str
>1339	Identifier	c_str
>1340	CallExpression	p . extension ( ) . string ( )
>1341	ArgumentList	 
>1342	Callee	p . extension ( ) . string
>1343	MemberAccess	p . extension ( ) . string
>1344	Identifier	string
>1345	CallExpression	p . extension ( )
>1346	ArgumentList	 
>1347	Callee	p . extension
>1348	MemberAccess	p . extension
>1349	Identifier	extension
>1350	Identifier	p
>1351	Callee	BOOST_FILESYSTEM_STRICMP
>1352	Identifier	BOOST_FILESYSTEM_STRICMP
>1353	EqualityExpression	BOOST_FILESYSTEM_STRICMP ( p . extension ( ) . string ( ) . c_str ( ) , \".com\" ) == 0
>1354	PrimaryExpression	0
>1355	CallExpression	BOOST_FILESYSTEM_STRICMP ( p . extension ( ) . string ( ) . c_str ( ) , \".com\" )
>1356	ArgumentList	p . extension ( ) . string ( ) . c_str ( )
>1357	Argument	\".com\"
>1358	PrimaryExpression	\".com\"
>1359	Argument	p . extension ( ) . string ( ) . c_str ( )
>1360	CallExpression	p . extension ( ) . string ( ) . c_str ( )
>1361	ArgumentList	 
>1362	Callee	p . extension ( ) . string ( ) . c_str
>1363	MemberAccess	p . extension ( ) . string ( ) . c_str
>1364	Identifier	c_str
>1365	CallExpression	p . extension ( ) . string ( )
>1366	ArgumentList	 
>1367	Callee	p . extension ( ) . string
>1368	MemberAccess	p . extension ( ) . string
>1369	Identifier	string
>1370	CallExpression	p . extension ( )
>1371	ArgumentList	 
>1372	Callee	p . extension
>1373	MemberAccess	p . extension
>1374	Identifier	extension
>1375	Identifier	p
>1376	Callee	BOOST_FILESYSTEM_STRICMP
>1377	Identifier	BOOST_FILESYSTEM_STRICMP
>1378	EqualityExpression	BOOST_FILESYSTEM_STRICMP ( p . extension ( ) . string ( ) . c_str ( ) , \".exe\" ) == 0
>1379	PrimaryExpression	0
>1380	CallExpression	BOOST_FILESYSTEM_STRICMP ( p . extension ( ) . string ( ) . c_str ( ) , \".exe\" )
>1381	ArgumentList	p . extension ( ) . string ( ) . c_str ( )
>1382	Argument	\".exe\"
>1383	PrimaryExpression	\".exe\"
>1384	Argument	p . extension ( ) . string ( ) . c_str ( )
>1385	CallExpression	p . extension ( ) . string ( ) . c_str ( )
>1386	ArgumentList	 
>1387	Callee	p . extension ( ) . string ( ) . c_str
>1388	MemberAccess	p . extension ( ) . string ( ) . c_str
>1389	Identifier	c_str
>1390	CallExpression	p . extension ( ) . string ( )
>1391	ArgumentList	 
>1392	Callee	p . extension ( ) . string
>1393	MemberAccess	p . extension ( ) . string
>1394	Identifier	string
>1395	CallExpression	p . extension ( )
>1396	ArgumentList	 
>1397	Callee	p . extension
>1398	MemberAccess	p . extension
>1399	Identifier	extension
>1400	Identifier	p
>1401	Callee	BOOST_FILESYSTEM_STRICMP
>1402	Identifier	BOOST_FILESYSTEM_STRICMP
>1403	IfStatement	if ( ( attr & FILE_ATTRIBUTE_READONLY ) == 0 )
>1404	ExpressionStatement	 
>1405	AssignmentExpr	prms |= fs 
>1406	InclusiveOrExpression	fs 
>1407	InclusiveOrExpression	fs 
>1408	Identifier	fs 
>1409	Identifier	fs 
>1410	Identifier	fs 
>1411	Identifier	prms
>1412	Condition	 
>1413	EqualityExpression	( attr & FILE_ATTRIBUTE_READONLY ) == 0
>1414	PrimaryExpression	0
>1415	BitAndExpression	attr & FILE_ATTRIBUTE_READONLY
>1416	Identifier	FILE_ATTRIBUTE_READONLY
>1417	Identifier	attr
>1418	IdentifierDeclStatement	 
>1419	IdentifierDecl	prms = fs 
>1420	AssignmentExpr	prms = fs 
>1421	InclusiveOrExpression	fs 
>1422	InclusiveOrExpression	fs 
>1423	Identifier	fs 
>1424	Identifier	fs 
>1425	Identifier	fs 
>1426	Identifier	prms
>1427	Identifier	prms
>1428	IdentifierDeclType	perms
>1449	FunctionDef	to_time_t (const FILETIME & ft)
>1450	ParameterList	const FILETIME & ft
>1451	Parameter	 
>1452	Identifier	ft
>1453	ParameterType	const FILETIME &
>1454	ReturnType	std 
>1455	CompoundStatement	 
>1456	ExpressionStatement	 
>1457	Identifier	L
>1458	Statement	 
>1459	Statement	 
>1460	Statement	 
>1461	Statement	 
>1462	Statement	 
>1463	Statement	 
>1464	Statement	 
>1465	Statement	 
>1466	Statement	 
>1467	Statement	 
>1468	Statement	 
>1469	Statement	 
>1470	Statement	 
>1471	IdentifierDeclStatement	 
>1472	IdentifierDecl	t = ( static_cast < __int64 > ( ft . dwHighDateTime ) << 32 ) + ft . dwLowDateTime
>1473	AssignmentExpr	t = ( static_cast < __int64 > ( ft . dwHighDateTime ) << 32 ) + ft . dwLowDateTime
>1474	AdditiveExpression	( static_cast < __int64 > ( ft . dwHighDateTime ) << 32 ) + ft . dwLowDateTime
>1475	MemberAccess	ft . dwLowDateTime
>1476	Identifier	dwLowDateTime
>1477	Identifier	ft
>1478	RelationalExpression	static_cast < __int64 > ( ft . dwHighDateTime ) << 32
>1479	RelationalExpression	__int64 > ( ft . dwHighDateTime ) << 32
>1480	ShiftExpression	( ft . dwHighDateTime ) << 32
>1481	PrimaryExpression	32
>1482	MemberAccess	ft . dwHighDateTime
>1483	Identifier	dwHighDateTime
>1484	Identifier	ft
>1485	Identifier	__int64
>1486	Identifier	static_cast
>1487	Identifier	t
>1488	Identifier	t
>1489	IdentifierDeclType	__int64
>1499	FunctionDef	to_FILETIME (std 
>1500	ParameterList	std 
>1501	Parameter	 
>1502	Identifier	ft
>1503	ParameterType	FILETIME &
>1504	Parameter	 
>1505	Identifier	t
>1506	ParameterType	std 
>1507	ReturnType	void
>1508	CompoundStatement	 
>1509	ExpressionStatement	 
>1510	Identifier	L
>1511	Statement	 
>1512	Statement	 
>1513	Statement	 
>1514	Statement	 
>1515	Statement	 
>1516	Statement	 
>1517	Statement	 
>1518	Statement	 
>1519	Statement	 
>1520	Statement	 
>1521	Statement	 
>1522	Statement	 
>1523	Statement	 
>1524	ExpressionStatement	 
>1525	AssignmentExpr	temp *= 10000000
>1526	PrimaryExpression	10000000
>1527	Identifier	temp
>1528	IdentifierDeclStatement	 
>1529	IdentifierDecl	temp = t
>1530	AssignmentExpr	temp = t
>1531	Identifier	t
>1532	Identifier	t
>1533	Identifier	temp
>1534	IdentifierDeclType	__int64
>1544	FunctionDef	handle_wrapper (HANDLE h)
>1545	ParameterList	HANDLE h
>1546	Parameter	 
>1547	Identifier	h
>1548	ParameterType	HANDLE
>1549	CompoundStatement	 
>1554	FunctionDef	~handle_wrapper ()
>1555	ParameterList	 
>1556	CompoundStatement	 
>1557	ExpressionStatement	 
>1558	CallExpression	CloseHandle ( handle )
>1559	ArgumentList	handle
>1560	Argument	handle
>1561	Identifier	handle
>1562	Callee	CloseHandle
>1563	Identifier	CloseHandle
>1564	IfStatement	if ( handle != INVALID_HANDLE_VALUE )
>1565	Statement	 
>1566	Condition	 
>1567	EqualityExpression	handle != INVALID_HANDLE_VALUE
>1568	Identifier	INVALID_HANDLE_VALUE
>1569	Identifier	handle
>1575	FunctionDef	create_file_handle (const path & p , DWORD dwDesiredAccess , DWORD dwShareMode , LPSECURITY_ATTRIBUTES lpSecurityAttributes , \
>1576	ParameterList	const path & p , DWORD dwDesiredAccess , DWORD dwShareMode , LPSECURITY_ATTRIBUTES lpSecurityAttributes , DWORD \
>1577	Parameter	 
>1578	Identifier	hTemplateFile
>1579	ParameterType	HANDLE
>1580	Parameter	 
>1581	Identifier	dwFlagsAndAttributes
>1582	ParameterType	DWORD
>1583	Parameter	 
>1584	Identifier	dwCreationDisposition
>1585	ParameterType	DWORD
>1586	Parameter	 
>1587	Identifier	lpSecurityAttributes
>1588	ParameterType	LPSECURITY_ATTRIBUTES
>1589	Parameter	 
>1590	Identifier	dwShareMode
>1591	ParameterType	DWORD
>1592	Parameter	 
>1593	Identifier	dwDesiredAccess
>1594	ParameterType	DWORD
>1595	Parameter	 
>1596	Identifier	p
>1597	ParameterType	const path &
>1598	ReturnType	HANDLE
>1599	CompoundStatement	 
>1600	ExpressionStatement	 
>1601	CallExpression	CreateFileW ( p . c_str ( ) , dwDesiredAccess , dwShareMode , lpSecurityAttributes , dwCreationDisposition , dwFlagsAndAttributes , \
>1602	ArgumentList	p . c_str ( )
>1603	Argument	hTemplateFile
>1604	Identifier	hTemplateFile
>1605	Argument	dwFlagsAndAttributes
>1606	Identifier	dwFlagsAndAttributes
>1607	Argument	dwCreationDisposition
>1608	Identifier	dwCreationDisposition
>1609	Argument	lpSecurityAttributes
>1610	Identifier	lpSecurityAttributes
>1611	Argument	dwShareMode
>1612	Identifier	dwShareMode
>1613	Argument	dwDesiredAccess
>1614	Identifier	dwDesiredAccess
>1615	Argument	p . c_str ( )
>1616	CallExpression	p . c_str ( )
>1617	ArgumentList	 
>1618	Callee	p . c_str
>1619	MemberAccess	p . c_str
>1620	Identifier	c_str
>1621	Identifier	p
>1622	Callee	CreateFileW
>1623	Identifier	CreateFileW
>1624	Statement	 
>1625	Statement	 
>1637	FunctionDef	is_reparse_point_a_symlink (const path & p)
>1638	ParameterList	const path & p
>1639	Parameter	 
>1640	Identifier	p
>1641	ParameterType	const path &
>1642	ReturnType	bool
>1643	CompoundStatement	 
>1644	ExpressionStatement	 
>1645	EqualityExpression	( buf . get ( ) ) -> ReparseTag == IO_REPARSE_TAG_SYMLINK
>1646	Identifier	IO_REPARSE_TAG_SYMLINK
>1647	PtrMemberAccess	( buf . get ( ) ) -> ReparseTag
>1648	Identifier	ReparseTag
>1649	CallExpression	buf . get ( )
>1650	ArgumentList	 
>1651	Callee	buf . get
>1652	MemberAccess	buf . get
>1653	Identifier	get
>1654	Identifier	buf
>1655	Statement	 
>1656	Statement	 
>1657	Statement	 
>1658	Statement	 
>1659	Statement	 
>1660	Statement	 
>1661	Statement	 
>1662	IfStatement	if ( ! result )
>1663	ReturnStatement	 
>1664	Identifier	false
>1665	Condition	 
>1666	UnaryOp	! result
>1667	Identifier	result
>1668	UnaryOperator	!
>1669	ExpressionStatement	 
>1670	CallExpression	DeviceIoControl ( h . handle , FSCTL_GET_REPARSE_POINT , NULL , 0 , buf . get ( ) , MAXIMUM_REPARSE_DATA_BUFFER_\
>1671	ArgumentList	h . handle
>1672	Argument	NULL
>1673	Identifier	NULL
>1674	Argument	& dwRetLen
>1675	UnaryOp	& dwRetLen
>1676	Identifier	dwRetLen
>1677	UnaryOperator	&
>1678	Argument	MAXIMUM_REPARSE_DATA_BUFFER_SIZE
>1679	Identifier	MAXIMUM_REPARSE_DATA_BUFFER_SIZE
>1680	Argument	buf . get ( )
>1681	CallExpression	buf . get ( )
>1682	ArgumentList	 
>1683	Callee	buf . get
>1684	MemberAccess	buf . get
>1685	Identifier	get
>1686	Identifier	buf
>1687	Argument	0
>1688	PrimaryExpression	0
>1689	Argument	NULL
>1690	Identifier	NULL
>1691	Argument	FSCTL_GET_REPARSE_POINT
>1692	Identifier	FSCTL_GET_REPARSE_POINT
>1693	Argument	h . handle
>1694	MemberAccess	h . handle
>1695	Identifier	handle
>1696	Identifier	h
>1697	Callee	DeviceIoControl
>1698	Identifier	DeviceIoControl
>1699	Statement	 
>1700	Statement	 
>1701	Statement	 
>1702	Statement	 
>1703	IdentifierDeclStatement	 
>1704	IdentifierDecl	dwRetLen
>1705	Identifier	dwRetLen
>1706	IdentifierDeclType	DWORD
>1707	IdentifierDeclStatement	 
>1708	IdentifierDecl	buf ( new char [ MAXIMUM_REPARSE_DATA_BUFFER_SIZE ] )
>1709	Identifier	MAXIMUM_REPARSE_DATA_BUFFER_SIZE
>1710	Identifier	buf
>1711	IdentifierDeclType	boost 
>1712	IfStatement	if ( h . handle == INVALID_HANDLE_VALUE )
>1713	ReturnStatement	 
>1714	Identifier	false
>1715	Condition	 
>1716	EqualityExpression	h . handle == INVALID_HANDLE_VALUE
>1717	Identifier	INVALID_HANDLE_VALUE
>1718	MemberAccess	h . handle
>1719	Identifier	handle
>1720	Identifier	h
>1721	IdentifierDeclStatement	 
>1722	IdentifierDecl	h ( create_file_handle ( p , FILE_READ_EA , FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE , NULL , OPEN_\
>1723	CallExpression	create_file_handle ( p , FILE_READ_EA , FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE , NULL , OPEN_EXISTING , \
>1724	ArgumentList	p
>1725	Argument	NULL
>1726	Identifier	NULL
>1727	Argument	FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT
>1728	InclusiveOrExpression	FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT
>1729	Identifier	FILE_FLAG_OPEN_REPARSE_POINT
>1730	Identifier	FILE_FLAG_BACKUP_SEMANTICS
>1731	Argument	OPEN_EXISTING
>1732	Identifier	OPEN_EXISTING
>1733	Argument	NULL
>1734	Identifier	NULL
>1735	Argument	FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE
>1736	InclusiveOrExpression	FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE
>1737	InclusiveOrExpression	FILE_SHARE_WRITE | FILE_SHARE_DELETE
>1738	Identifier	FILE_SHARE_DELETE
>1739	Identifier	FILE_SHARE_WRITE
>1740	Identifier	FILE_SHARE_READ
>1741	Argument	FILE_READ_EA
>1742	Identifier	FILE_READ_EA
>1743	Argument	p
>1744	Identifier	p
>1745	Callee	create_file_handle
>1746	Identifier	create_file_handle
>1747	Identifier	h
>1748	IdentifierDeclType	handle_wrapper
>1772	FunctionDef	get_full_path_name (const path & src , std 
>1773	ParameterList	const path & src , std 
>1774	Parameter	 
>1775	Identifier	p
>1776	ParameterType	wchar_t * *
>1777	Parameter	 
>1778	Identifier	buf
>1779	ParameterType	wchar_t *
>1780	Parameter	 
>1781	Identifier	len
>1782	ParameterType	std 
>1783	Parameter	 
>1784	Identifier	src
>1785	ParameterType	const path &
>1786	ReturnType	inline std 
>1787	CompoundStatement	 
>1788	ExpressionStatement	 
>1789	Statement	 
>1790	Statement	 
>1791	Statement	 
>1792	Statement	 
>1793	Statement	 
>1794	Statement	 
>1795	Statement	 
>1796	Statement	 
>1797	Statement	 
>1798	Statement	 
>1799	Statement	 
>1800	Statement	 
>1801	Statement	 
>1802	Statement	 
>1803	Statement	 
>1804	Statement	 
>1805	Statement	 
>1806	Statement	 
>1807	Statement	 
>1808	Statement	 
>1809	Statement	 
>1810	Statement	 
>1811	Statement	 
>1812	Statement	 
>1813	Statement	 
>1814	Statement	 
>1815	Statement	 
>1816	Statement	 
>1817	Statement	 
>1818	Statement	 
>1826	FunctionDef	process_status_failure (const path & p , error_code * ec)
>1827	ParameterList	const path & p , error_code * ec
>1828	Parameter	 
>1829	Identifier	ec
>1830	ParameterType	error_code *
>1831	Parameter	 
>1832	Identifier	p
>1833	ParameterType	const path &
>1834	ReturnType	fs 
>1835	CompoundStatement	 
>1836	ReturnStatement	 
>1837	CallExpression	fs 
>1838	ArgumentList	fs 
>1839	Argument	fs 
>1840	Identifier	fs 
>1841	Callee	fs 
>1842	Identifier	fs 
>1843	IfStatement	if ( ec == 0 )
>1844	ExpressionStatement	 
>1845	CallExpression	BOOST_FILESYSTEM_THROW ( filesystem_error ( \"boost
>1846	ArgumentList	filesystem_error ( \"boost
>1847	Argument	filesystem_error ( \"boost
>1848	CallExpression	filesystem_error ( \"boost
>1849	ArgumentList	\"boost
>1850	Argument	error_code ( errval , system_category ( ) )
>1851	CallExpression	error_code ( errval , system_category ( ) )
>1852	ArgumentList	errval
>1853	Argument	system_category ( )
>1854	CallExpression	system_category ( )
>1855	ArgumentList	 
>1856	Callee	system_category
>1857	Identifier	system_category
>1858	Argument	errval
>1859	Identifier	errval
>1860	Callee	error_code
>1861	Identifier	error_code
>1862	Argument	p
>1863	Identifier	p
>1864	Argument	\"boost
>1865	PrimaryExpression	\"boost
>1866	Callee	filesystem_error
>1867	Identifier	filesystem_error
>1868	Callee	BOOST_FILESYSTEM_THROW
>1869	Identifier	BOOST_FILESYSTEM_THROW
>1870	Condition	 
>1871	EqualityExpression	ec == 0
>1872	PrimaryExpression	0
>1873	Identifier	ec
>1874	IfStatement	if ( not_found_error ( errval ) )
>1875	ElseStatement	else
>1876	IfStatement	if ( ( errval == ERROR_SHARING_VIOLATION ) )
>1877	CompoundStatement	 
>1878	ReturnStatement	 
>1879	CallExpression	fs 
>1880	ArgumentList	fs 
>1881	Argument	fs 
>1882	Identifier	fs 
>1883	Callee	fs 
>1884	Identifier	fs 
>1885	Condition	 
>1886	EqualityExpression	errval == ERROR_SHARING_VIOLATION
>1887	Identifier	ERROR_SHARING_VIOLATION
>1888	Identifier	errval
>1889	CompoundStatement	 
>1890	ReturnStatement	 
>1891	CallExpression	fs 
>1892	ArgumentList	fs 
>1893	Argument	fs 
>1894	Identifier	fs 
>1895	Argument	fs 
>1896	Identifier	fs 
>1897	Callee	fs 
>1898	Identifier	fs 
>1899	Condition	 
>1900	CallExpression	not_found_error ( errval )
>1901	ArgumentList	errval
>1902	Argument	errval
>1903	Identifier	errval
>1904	Callee	not_found_error
>1905	Identifier	not_found_error
>1906	IfStatement	if ( ec != 0 )
>1907	ExpressionStatement	 
>1908	CallExpression	ec -> assign ( errval , system_category ( ) )
>1909	ArgumentList	errval
>1910	Argument	system_category ( )
>1911	CallExpression	system_category ( )
>1912	ArgumentList	 
>1913	Callee	system_category
>1914	Identifier	system_category
>1915	Argument	errval
>1916	Identifier	errval
>1917	Callee	ec -> assign
>1918	PtrMemberAccess	ec -> assign
>1919	Identifier	assign
>1920	Identifier	ec
>1921	Condition	 
>1922	EqualityExpression	ec != 0
>1923	PrimaryExpression	0
>1924	Identifier	ec
>1925	ExpressionStatement	 
>1926	Statement	 
>1927	Statement	 
>1928	Statement	 
>1929	Statement	 
>1930	Statement	 
>1931	Statement	 
>1932	Statement	 
>1933	Statement	 
>1950	FunctionDef	query_file_type (const path & p , error_code * ec)
>1951	ParameterList	const path & p , error_code * ec
>1952	Parameter	 
>1953	Identifier	ec
>1954	ParameterType	error_code *
>1955	Parameter	 
>1956	Identifier	p
>1957	ParameterType	const path &
>1958	ReturnType	fs 
>1959	CompoundStatement	 
>1960	ReturnStatement	 
>1961	ConditionalExpression	( attr & FILE_ATTRIBUTE_DIRECTORY ) ? fs 
>1962	Identifier	fs 
>1963	Identifier	fs 
>1964	Condition	attr & FILE_ATTRIBUTE_DIRECTORY
>1965	BitAndExpression	attr & FILE_ATTRIBUTE_DIRECTORY
>1966	Identifier	FILE_ATTRIBUTE_DIRECTORY
>1967	Identifier	attr
>1968	IfStatement	if ( attr & FILE_ATTRIBUTE_REPARSE_POINT )
>1969	CompoundStatement	 
>1970	ReturnStatement	 
>1971	Identifier	fs 
>1972	IfStatement	if ( is_reparse_point_a_symlink ( p ) )
>1973	ReturnStatement	 
>1974	ConditionalExpression	( attr & FILE_ATTRIBUTE_DIRECTORY ) ? fs 
>1975	Identifier	fs 
>1976	Identifier	fs 
>1977	Condition	attr & FILE_ATTRIBUTE_DIRECTORY
>1978	BitAndExpression	attr & FILE_ATTRIBUTE_DIRECTORY
>1979	Identifier	FILE_ATTRIBUTE_DIRECTORY
>1980	Identifier	attr
>1981	Condition	 
>1982	CallExpression	is_reparse_point_a_symlink ( p )
>1983	ArgumentList	p
>1984	Argument	p
>1985	Identifier	p
>1986	Callee	is_reparse_point_a_symlink
>1987	Identifier	is_reparse_point_a_symlink
>1988	Condition	 
>1989	BitAndExpression	attr & FILE_ATTRIBUTE_REPARSE_POINT
>1990	Identifier	FILE_ATTRIBUTE_REPARSE_POINT
>1991	Identifier	attr
>1992	IfStatement	if ( ec != 0 )
>1993	ExpressionStatement	 
>1994	CallExpression	ec -> clear ( )
>1995	ArgumentList	 
>1996	Callee	ec -> clear
>1997	PtrMemberAccess	ec -> clear
>1998	Identifier	clear
>1999	Identifier	ec
>2000	Condition	 
>2001	EqualityExpression	ec != 0
>2002	PrimaryExpression	0
>2003	Identifier	ec
>2004	IfStatement	if ( attr == 0xFFFFFFFF )
>2005	CompoundStatement	 
>2006	ReturnStatement	 
>2007	CallExpression	process_status_failure ( p , ec ) . type ( )
>2008	ArgumentList	 
>2009	Callee	process_status_failure ( p , ec ) . type
>2010	MemberAccess	process_status_failure ( p , ec ) . type
>2011	Identifier	type
>2012	CallExpression	process_status_failure ( p , ec )
>2013	ArgumentList	p
>2014	Argument	ec
>2015	Identifier	ec
>2016	Argument	p
>2017	Identifier	p
>2018	Callee	process_status_failure
>2019	Identifier	process_status_failure
>2020	Condition	 
>2021	EqualityExpression	attr == 0xFFFFFFFF
>2022	PrimaryExpression	0xFFFFFFFF
>2023	Identifier	attr
>2024	ExpressionStatement	 
>2025	Statement	 
>2026	Statement	 
>2027	Statement	 
>2028	Statement	 
>2029	Statement	 
>2030	Statement	 
>2031	Statement	 
>2032	Statement	 
>2033	Statement	 
>2034	Statement	 
>2035	Statement	 
>2036	Statement	 
>2037	Statement	 
>2054	FunctionDef	resize_file_api (const wchar_t * p , boost 
>2055	ParameterList	const wchar_t * p , boost 
>2056	Parameter	 
>2057	Identifier	size
>2058	ParameterType	boost 
>2059	Parameter	 
>2060	Identifier	p
>2061	ParameterType	const wchar_t *
>2062	ReturnType	BOOL
>2063	CompoundStatement	 
>2064	ExpressionStatement	 
>2065	CallExpression	CloseHandle ( handle )
>2066	ArgumentList	handle
>2067	Argument	handle
>2068	Identifier	handle
>2069	Callee	CloseHandle
>2070	Identifier	CloseHandle
>2071	Statement	 
>2072	Statement	 
>2073	Statement	 
>2074	Statement	 
>2075	Statement	 
>2076	Statement	 
>2077	Statement	 
>2078	Statement	 
>2079	Statement	 
>2080	Statement	 
>2081	Statement	 
>2082	Statement	 
>2083	Statement	 
>2084	Statement	 
>2085	Statement	 
>2086	Statement	 
>2087	Statement	 
>2088	Statement	 
>2089	Statement	 
>2090	Statement	 
>2091	Statement	 
>2092	Statement	 
>2093	Statement	 
>2094	Statement	 
>2095	ExpressionStatement	 
>2096	AssignmentExpr	sz . QuadPart = size
>2097	Identifier	size
>2098	MemberAccess	sz . QuadPart
>2099	Identifier	QuadPart
>2100	Identifier	sz
>2101	IdentifierDeclStatement	 
>2102	IdentifierDecl	sz
>2103	Identifier	sz
>2104	IdentifierDeclType	LARGE_INTEGER
>2105	IdentifierDeclStatement	 
>2106	IdentifierDecl	handle = CreateFileW ( p , GENERIC_WRITE , 0 , 0 , OPEN_EXISTING , FILE_ATTRIBUTE_NORMAL , 0 )
>2107	AssignmentExpr	handle = CreateFileW ( p , GENERIC_WRITE , 0 , 0 , OPEN_EXISTING , FILE_ATTRIBUTE_NORMAL , 0 )
>2108	CallExpression	CreateFileW ( p , GENERIC_WRITE , 0 , 0 , OPEN_EXISTING , FILE_ATTRIBUTE_NORMAL , 0 )
>2109	ArgumentList	p
>2110	Argument	0
>2111	PrimaryExpression	0
>2112	Argument	FILE_ATTRIBUTE_NORMAL
>2113	Identifier	FILE_ATTRIBUTE_NORMAL
>2114	Argument	OPEN_EXISTING
>2115	Identifier	OPEN_EXISTING
>2116	Argument	0
>2117	PrimaryExpression	0
>2118	Argument	0
>2119	PrimaryExpression	0
>2120	Argument	GENERIC_WRITE
>2121	Identifier	GENERIC_WRITE
>2122	Argument	p
>2123	Identifier	p
>2124	Callee	CreateFileW
>2125	Identifier	CreateFileW
>2126	Identifier	handle
>2127	Identifier	handle
>2128	IdentifierDeclType	HANDLE
>2145	FunctionDef	absolute (const path & p , const path & base)
>2146	ParameterList	const path & p , const path & base
>2147	Parameter	 
>2148	Identifier	base
>2149	ParameterType	const path &
>2150	Parameter	 
>2151	Identifier	p
>2152	ParameterType	const path &
>2153	ReturnType	BOOST_FILESYSTEM_DECL path
>2154	CompoundStatement	 
>2155	ReturnStatement	 
>2156	Identifier	p
>2157	IfStatement	if ( ! p_root_name . empty ( ) )
>2158	ElseStatement	else
>2159	IfStatement	if ( ! p_root_directory . empty ( ) )
>2160	ElseStatement	else
>2161	CompoundStatement	 
>2162	ReturnStatement	 
>2163	MultiplicativeExpression	abs_base / p
>2164	Identifier	p
>2165	Identifier	abs_base
>2166	CompoundStatement	 
>2167	ReturnStatement	 
>2168	MultiplicativeExpression	base_root_name / p
>2169	Identifier	p
>2170	Identifier	base_root_name
>2171	Statement	 
>2172	IfStatement	if ( base_root_name . empty ( ) )
>2173	ReturnStatement	 
>2174	Identifier	p
>2175	Condition	 
>2176	CallExpression	base_root_name . empty ( )
>2177	ArgumentList	 
>2178	Callee	base_root_name . empty
>2179	MemberAccess	base_root_name . empty
>2180	Identifier	empty
>2181	Identifier	base_root_name
>2182	Statement	 
>2183	Statement	 
>2184	Condition	 
>2185	UnaryOp	! p_root_directory . empty ( )
>2186	CallExpression	p_root_directory . empty ( )
>2187	ArgumentList	 
>2188	Callee	p_root_directory . empty
>2189	MemberAccess	p_root_directory . empty
>2190	Identifier	empty
>2191	Identifier	p_root_directory
>2192	UnaryOperator	!
>2193	CompoundStatement	 
>2194	IfStatement	if ( p_root_directory . empty ( ) )
>2195	ReturnStatement	 
>2196	MultiplicativeExpression	p_root_name / abs_base . root_directory ( ) / abs_base . relative_path ( ) / p . relative_path ( )
>2197	MultiplicativeExpression	abs_base . root_directory ( ) / abs_base . relative_path ( ) / p . relative_path ( )
>2198	MultiplicativeExpression	abs_base . relative_path ( ) / p . relative_path ( )
>2199	CallExpression	p . relative_path ( )
>2200	ArgumentList	 
>2201	Callee	p . relative_path
>2202	MemberAccess	p . relative_path
>2203	Identifier	relative_path
>2204	Identifier	p
>2205	CallExpression	abs_base . relative_path ( )
>2206	ArgumentList	 
>2207	Callee	abs_base . relative_path
>2208	MemberAccess	abs_base . relative_path
>2209	Identifier	relative_path
>2210	Identifier	abs_base
>2211	CallExpression	abs_base . root_directory ( )
>2212	ArgumentList	 
>2213	Callee	abs_base . root_directory
>2214	MemberAccess	abs_base . root_directory
>2215	Identifier	root_directory
>2216	Identifier	abs_base
>2217	Identifier	p_root_name
>2218	Condition	 
>2219	CallExpression	p_root_directory . empty ( )
>2220	ArgumentList	 
>2221	Callee	p_root_directory . empty
>2222	MemberAccess	p_root_directory . empty
>2223	Identifier	empty
>2224	Identifier	p_root_directory
>2225	Condition	 
>2226	UnaryOp	! p_root_name . empty ( )
>2227	CallExpression	p_root_name . empty ( )
>2228	ArgumentList	 
>2229	Callee	p_root_name . empty
>2230	MemberAccess	p_root_name . empty
>2231	Identifier	empty
>2232	Identifier	p_root_name
>2233	UnaryOperator	!
>2234	IfStatement	if ( p . empty ( ) )
>2235	ReturnStatement	 
>2236	Identifier	abs_base
>2237	Condition	 
>2238	CallExpression	p . empty ( )
>2239	ArgumentList	 
>2240	Callee	p . empty
>2241	MemberAccess	p . empty
>2242	Identifier	empty
>2243	Identifier	p
>2244	IdentifierDeclStatement	 
>2245	IdentifierDecl	p_root_directory ( p . root_directory ( ) )
>2246	CallExpression	p . root_directory ( )
>2247	ArgumentList	 
>2248	Callee	p . root_directory
>2249	MemberAccess	p . root_directory
>2250	Identifier	root_directory
>2251	Identifier	p
>2252	Identifier	p_root_directory
>2253	IdentifierDeclType	path
>2254	IdentifierDeclStatement	 
>2255	IdentifierDecl	base_root_name ( abs_base . root_name ( ) )
>2256	CallExpression	abs_base . root_name ( )
>2257	ArgumentList	 
>2258	Callee	abs_base . root_name
>2259	MemberAccess	abs_base . root_name
>2260	Identifier	root_name
>2261	Identifier	abs_base
>2262	Identifier	base_root_name
>2263	IdentifierDeclType	path
>2264	IdentifierDeclStatement	 
>2265	IdentifierDecl	p_root_name ( p . root_name ( ) )
>2266	CallExpression	p . root_name ( )
>2267	ArgumentList	 
>2268	Callee	p . root_name
>2269	MemberAccess	p . root_name
>2270	Identifier	root_name
>2271	Identifier	p
>2272	Identifier	p_root_name
>2273	IdentifierDeclType	path
>2274	IdentifierDeclStatement	 
>2275	IdentifierDecl	abs_base ( base . is_absolute ( ) ? base 
>2276	ConditionalExpression	base . is_absolute ( ) ? base 
>2277	CallExpression	absolute ( base )
>2278	ArgumentList	base
>2279	Argument	base
>2280	Identifier	base
>2281	Callee	absolute
>2282	Identifier	absolute
>2283	Identifier	base
>2284	Condition	base . is_absolute ( )
>2285	CallExpression	base . is_absolute ( )
>2286	ArgumentList	 
>2287	Callee	base . is_absolute
>2288	MemberAccess	base . is_absolute
>2289	Identifier	is_absolute
>2290	Identifier	base
>2291	Identifier	abs_base
>2292	IdentifierDeclType	path
>2310	FunctionDef	possible_large_file_size_support ()
>2311	ParameterList	 
>2312	ReturnType	BOOST_FILESYSTEM_DECL bool
>2313	CompoundStatement	 
>2314	ReturnStatement	 
>2315	RelationalExpression	sizeof ( lcl_stat . st_size ) > 4
>2316	PrimaryExpression	4
>2317	SizeofExpr	sizeof ( lcl_stat . st_size )
>2318	MemberAccess	lcl_stat . st_size
>2319	Identifier	st_size
>2320	Identifier	lcl_stat
>2321	Sizeof	sizeof
>2322	IdentifierDeclStatement	 
>2323	IdentifierDecl	lcl_stat
>2324	Identifier	lcl_stat
>2325	IdentifierDeclType	struct stat
>2326	Statement	 
>2327	Statement	 
>2333	FunctionDef	valid_existing (copy_options opts)
>2334	ParameterList	copy_options opts
>2335	Parameter	 
>2336	Identifier	opts
>2337	ParameterType	copy_options
>2338	ReturnType	inline bool
>2339	CompoundStatement	 
>2340	ReturnStatement	 
>2341	RelationalExpression	ct < 2
>2342	PrimaryExpression	2
>2343	Identifier	ct
>2344	IfStatement	if ( ( opts & copy_options 
>2345	ExpressionStatement	 
>2346	UnaryExpression	++ ct
>2347	Identifier	ct
>2348	IncDec	++
>2349	Condition	 
>2350	EqualityExpression	( opts & copy_options 
>2351	Identifier	copy_options 
>2352	BitAndExpression	opts & copy_options 
>2353	Identifier	copy_options 
>2354	Identifier	opts
>2355	IfStatement	if ( ( opts & copy_options 
>2356	ExpressionStatement	 
>2357	UnaryExpression	++ ct
>2358	Identifier	ct
>2359	IncDec	++
>2360	Condition	 
>2361	EqualityExpression	( opts & copy_options 
>2362	Identifier	copy_options 
>2363	BitAndExpression	opts & copy_options 
>2364	Identifier	copy_options 
>2365	Identifier	opts
>2366	IfStatement	if ( ( opts & copy_options 
>2367	ExpressionStatement	 
>2368	UnaryExpression	++ ct
>2369	Identifier	ct
>2370	IncDec	++
>2371	Condition	 
>2372	EqualityExpression	( opts & copy_options 
>2373	Identifier	copy_options 
>2374	BitAndExpression	opts & copy_options 
>2375	Identifier	copy_options 
>2376	Identifier	opts
>2377	IdentifierDeclStatement	 
>2378	IdentifierDecl	ct = 0
>2379	AssignmentExpr	ct = 0
>2380	PrimaryExpression	0
>2381	Identifier	ct
>2382	Identifier	ct
>2383	IdentifierDeclType	int
>2392	FunctionDef	valid_symlink_action (copy_options opts)
>2393	ParameterList	copy_options opts
>2394	Parameter	 
>2395	Identifier	opts
>2396	ParameterType	copy_options
>2397	ReturnType	inline bool
>2398	CompoundStatement	 
>2399	ReturnStatement	 
>2400	RelationalExpression	ct < 2
>2401	PrimaryExpression	2
>2402	Identifier	ct
>2403	IfStatement	if ( ( opts & copy_options 
>2404	ExpressionStatement	 
>2405	UnaryExpression	++ ct
>2406	Identifier	ct
>2407	IncDec	++
>2408	Condition	 
>2409	EqualityExpression	( opts & copy_options 
>2410	Identifier	copy_options 
>2411	BitAndExpression	opts & copy_options 
>2412	Identifier	copy_options 
>2413	Identifier	opts
>2414	IfStatement	if ( ( opts & copy_options 
>2415	ExpressionStatement	 
>2416	UnaryExpression	++ ct
>2417	Identifier	ct
>2418	IncDec	++
>2419	Condition	 
>2420	EqualityExpression	( opts & copy_options 
>2421	Identifier	copy_options 
>2422	BitAndExpression	opts & copy_options 
>2423	Identifier	copy_options 
>2424	Identifier	opts
>2425	IdentifierDeclStatement	 
>2426	IdentifierDecl	ct = 0
>2427	AssignmentExpr	ct = 0
>2428	PrimaryExpression	0
>2429	Identifier	ct
>2430	Identifier	ct
>2431	IdentifierDeclType	int
>2439	FunctionDef	valid_copy_form (copy_options opts)
>2440	ParameterList	copy_options opts
>2441	Parameter	 
>2442	Identifier	opts
>2443	ParameterType	copy_options
>2444	ReturnType	inline bool
>2445	CompoundStatement	 
>2446	ReturnStatement	 
>2447	RelationalExpression	ct < 2
>2448	PrimaryExpression	2
>2449	Identifier	ct
>2450	IfStatement	if ( ( opts & copy_options 
>2451	ExpressionStatement	 
>2452	UnaryExpression	++ ct
>2453	Identifier	ct
>2454	IncDec	++
>2455	Condition	 
>2456	EqualityExpression	( opts & copy_options 
>2457	Identifier	copy_options 
>2458	BitAndExpression	opts & copy_options 
>2459	Identifier	copy_options 
>2460	Identifier	opts
>2461	IfStatement	if ( ( opts & copy_options 
>2462	ExpressionStatement	 
>2463	UnaryExpression	++ ct
>2464	Identifier	ct
>2465	IncDec	++
>2466	Condition	 
>2467	EqualityExpression	( opts & copy_options 
>2468	Identifier	copy_options 
>2469	BitAndExpression	opts & copy_options 
>2470	Identifier	copy_options 
>2471	Identifier	opts
>2472	IfStatement	if ( ( opts & copy_options 
>2473	ExpressionStatement	 
>2474	UnaryExpression	++ ct
>2475	Identifier	ct
>2476	IncDec	++
>2477	Condition	 
>2478	EqualityExpression	( opts & copy_options 
>2479	Identifier	copy_options 
>2480	BitAndExpression	opts & copy_options 
>2481	Identifier	copy_options 
>2482	Identifier	opts
>2483	IdentifierDeclStatement	 
>2484	IdentifierDecl	ct = 0
>2485	AssignmentExpr	ct = 0
>2486	PrimaryExpression	0
>2487	Identifier	ct
>2488	Identifier	ct
>2489	IdentifierDeclType	int
>2498	FunctionDef	canonical (const path & p , const path & base , system 
>2499	ParameterList	const path & p , const path & base , system 
>2500	Parameter	 
>2501	Identifier	ec
>2502	ParameterType	system 
>2503	Parameter	 
>2504	Identifier	base
>2505	ParameterType	const path &
>2506	Parameter	 
>2507	Identifier	p
>2508	ParameterType	const path &
>2509	ReturnType	endif BOOST_FILESYSTEM_DECL path
>2510	CompoundStatement	 
>2511	ReturnStatement	 
>2512	Identifier	result
>2513	ExpressionStatement	 
>2514	CallExpression	BOOST_ASSERT_MSG ( result . is_absolute ( ) , \"canonical() implementation error; please report\" )
>2515	ArgumentList	result . is_absolute ( )
>2516	Argument	\"canonical() implementation error; please report\"
>2517	PrimaryExpression	\"canonical() implementation error; please report\"
>2518	Argument	result . is_absolute ( )
>2519	CallExpression	result . is_absolute ( )
>2520	ArgumentList	 
>2521	Callee	result . is_absolute
>2522	MemberAccess	result . is_absolute
>2523	Identifier	is_absolute
>2524	Identifier	result
>2525	Callee	BOOST_ASSERT_MSG
>2526	Identifier	BOOST_ASSERT_MSG
>2527	IfStatement	if ( ec != 0 )
>2528	ExpressionStatement	 
>2529	CallExpression	ec -> clear ( )
>2530	ArgumentList	 
>2531	Callee	ec -> clear
>2532	PtrMemberAccess	ec -> clear
>2533	Identifier	clear
>2534	Identifier	ec
>2535	Condition	 
>2536	EqualityExpression	ec != 0
>2537	PrimaryExpression	0
>2538	Identifier	ec
>2539	WhileStatement	while ( scan )
>2540	CompoundStatement	 
>2541	ForStatement	for ( path 
>2542	CompoundStatement	 
>2543	IfStatement	if ( is_sym )
>2544	CompoundStatement	 
>2545	BreakStatement	 
>2546	ExpressionStatement	 
>2547	AssignmentExpr	scan = true
>2548	Identifier	true
>2549	Identifier	scan
>2550	IfStatement	if ( link . is_absolute ( ) )
>2551	ElseStatement	else
>2552	CompoundStatement	 
>2553	ExpressionStatement	 
>2554	AssignmentExpr	source = new_source
>2555	Identifier	new_source
>2556	Identifier	source
>2557	ForStatement	for ( ++ itr ; itr != source . end ( ) ; ++ itr )
>2558	ExpressionStatement	 
>2559	AssignmentExpr	new_source /= * itr
>2560	UnaryOp	* itr
>2561	Identifier	itr
>2562	UnaryOperator	*
>2563	Identifier	new_source
>2564	UnaryExpression	 
>2565	Identifier	itr
>2566	IncDec	++
>2567	Condition	 
>2568	EqualityExpression	itr != source . end ( )
>2569	CallExpression	source . end ( )
>2570	ArgumentList	 
>2571	Callee	source . end
>2572	MemberAccess	source . end
>2573	Identifier	end
>2574	Identifier	source
>2575	Identifier	itr
>2576	ForInit	 
>2577	UnaryExpression	++ itr
>2578	Identifier	itr
>2579	IncDec	++
>2580	ExpressionStatement	 
>2581	AssignmentExpr	new_source /= link
>2582	Identifier	link
>2583	Identifier	new_source
>2584	IdentifierDeclStatement	 
>2585	IdentifierDecl	new_source ( result )
>2586	Identifier	result
>2587	Identifier	new_source
>2588	IdentifierDeclType	path
>2589	CompoundStatement	 
>2590	ExpressionStatement	 
>2591	AssignmentExpr	source = link
>2592	Identifier	link
>2593	Identifier	source
>2594	ForStatement	for ( ++ itr ; itr != source . end ( ) ; ++ itr )
>2595	ExpressionStatement	 
>2596	AssignmentExpr	link /= * itr
>2597	UnaryOp	* itr
>2598	Identifier	itr
>2599	UnaryOperator	*
>2600	Identifier	link
>2601	UnaryExpression	 
>2602	Identifier	itr
>2603	IncDec	++
>2604	Condition	 
>2605	EqualityExpression	itr != source . end ( )
>2606	CallExpression	source . end ( )
>2607	ArgumentList	 
>2608	Callee	source . end
>2609	MemberAccess	source . end
>2610	Identifier	end
>2611	Identifier	source
>2612	Identifier	itr
>2613	ForInit	 
>2614	UnaryExpression	++ itr
>2615	Identifier	itr
>2616	IncDec	++
>2617	Condition	 
>2618	CallExpression	link . is_absolute ( )
>2619	ArgumentList	 
>2620	Callee	link . is_absolute
>2621	MemberAccess	link . is_absolute
>2622	Identifier	is_absolute
>2623	Identifier	link
>2624	ExpressionStatement	 
>2625	CallExpression	result . remove_filename ( )
>2626	ArgumentList	 
>2627	Callee	result . remove_filename
>2628	MemberAccess	result . remove_filename
>2629	Identifier	remove_filename
>2630	Identifier	result
>2631	IfStatement	if ( ec && * ec )
>2632	ReturnStatement	 
>2633	CallExpression	path ( )
>2634	ArgumentList	 
>2635	Callee	path
>2636	Identifier	path
>2637	Condition	 
>2638	AndExpression	ec && * ec
>2639	UnaryOp	* ec
>2640	Identifier	ec
>2641	UnaryOperator	*
>2642	Identifier	ec
>2643	IdentifierDeclStatement	 
>2644	IdentifierDecl	link ( detail 
>2645	CallExpression	detail 
>2646	ArgumentList	result
>2647	Argument	ec
>2648	Identifier	ec
>2649	Argument	result
>2650	Identifier	result
>2651	Callee	detail 
>2652	Identifier	detail 
>2653	Identifier	link
>2654	IdentifierDeclType	path
>2655	Condition	 
>2656	Identifier	is_sym
>2657	IfStatement	if ( ec && * ec )
>2658	ReturnStatement	 
>2659	CallExpression	path ( )
>2660	ArgumentList	 
>2661	Callee	path
>2662	Identifier	path
>2663	Condition	 
>2664	AndExpression	ec && * ec
>2665	UnaryOp	* ec
>2666	Identifier	ec
>2667	UnaryOperator	*
>2668	Identifier	ec
>2669	IdentifierDeclStatement	 
>2670	IdentifierDecl	is_sym ( is_symlink ( detail 
>2671	CallExpression	is_symlink ( detail 
>2672	ArgumentList	detail 
>2673	Argument	detail 
>2674	CallExpression	detail 
>2675	ArgumentList	result
>2676	Argument	ec
>2677	Identifier	ec
>2678	Argument	result
>2679	Identifier	result
>2680	Callee	detail 
>2681	Identifier	detail 
>2682	Callee	is_symlink
>2683	Identifier	is_symlink
>2684	Identifier	is_sym
>2685	IdentifierDeclType	bool
>2686	ExpressionStatement	 
>2687	AssignmentExpr	result /= * itr
>2688	UnaryOp	* itr
>2689	Identifier	itr
>2690	UnaryOperator	*
>2691	Identifier	result
>2692	IfStatement	if ( * itr == dot_dot_path )
>2693	CompoundStatement	 
>2694	ContinueStatement	 
>2695	ExpressionStatement	 
>2696	CallExpression	result . remove_filename ( )
>2697	ArgumentList	 
>2698	Callee	result . remove_filename
>2699	MemberAccess	result . remove_filename
>2700	Identifier	remove_filename
>2701	Identifier	result
>2702	Condition	 
>2703	EqualityExpression	* itr == dot_dot_path
>2704	Identifier	dot_dot_path
>2705	UnaryOp	* itr
>2706	Identifier	itr
>2707	UnaryOperator	*
>2708	IfStatement	if ( * itr == dot_path )
>2709	ContinueStatement	 
>2710	Condition	 
>2711	EqualityExpression	* itr == dot_path
>2712	Identifier	dot_path
>2713	UnaryOp	* itr
>2714	Identifier	itr
>2715	UnaryOperator	*
>2716	UnaryExpression	 
>2717	Identifier	itr
>2718	IncDec	++
>2719	Condition	 
>2720	EqualityExpression	itr != source . end ( )
>2721	CallExpression	source . end ( )
>2722	ArgumentList	 
>2723	Callee	source . end
>2724	MemberAccess	source . end
>2725	Identifier	end
>2726	Identifier	source
>2727	Identifier	itr
>2728	ForInit	 
>2729	IdentifierDeclStatement	path 
>2730	IdentifierDecl	itr = source . begin ( )
>2731	AssignmentExpr	itr = source . begin ( )
>2732	CallExpression	source . begin ( )
>2733	ArgumentList	 
>2734	Callee	source . begin
>2735	MemberAccess	source . begin
>2736	Identifier	begin
>2737	Identifier	source
>2738	Identifier	itr
>2739	Identifier	itr
>2740	IdentifierDeclType	path 
>2741	ExpressionStatement	 
>2742	CallExpression	result . clear ( )
>2743	ArgumentList	 
>2744	Callee	result . clear
>2745	MemberAccess	result . clear
>2746	Identifier	clear
>2747	Identifier	result
>2748	ExpressionStatement	 
>2749	AssignmentExpr	scan = false
>2750	Identifier	false
>2751	Identifier	scan
>2752	Condition	 
>2753	Identifier	scan
>2754	IdentifierDeclStatement	 
>2755	IdentifierDecl	scan ( true )
>2756	Identifier	true
>2757	Identifier	scan
>2758	IdentifierDeclType	bool
>2759	IfStatement	if ( stat . type ( ) == fs 
>2760	ElseStatement	else
>2761	IfStatement	if ( local_ec )
>2762	CompoundStatement	 
>2763	ReturnStatement	 
>2764	Identifier	result
>2765	ExpressionStatement	 
>2766	AssignmentExpr	* ec = local_ec
>2767	Identifier	local_ec
>2768	UnaryOp	* ec
>2769	Identifier	ec
>2770	UnaryOperator	*
>2771	IfStatement	if ( ec == 0 )
>2772	ExpressionStatement	 
>2773	CallExpression	BOOST_FILESYSTEM_THROW ( filesystem_error ( \"boost
>2774	ArgumentList	filesystem_error ( \"boost
>2775	Argument	filesystem_error ( \"boost
>2776	CallExpression	filesystem_error ( \"boost
>2777	ArgumentList	\"boost
>2778	Argument	local_ec
>2779	Identifier	local_ec
>2780	Argument	source
>2781	Identifier	source
>2782	Argument	\"boost
>2783	PrimaryExpression	\"boost
>2784	Callee	filesystem_error
>2785	Identifier	filesystem_error
>2786	Callee	BOOST_FILESYSTEM_THROW
>2787	Identifier	BOOST_FILESYSTEM_THROW
>2788	Condition	 
>2789	EqualityExpression	ec == 0
>2790	PrimaryExpression	0
>2791	Identifier	ec
>2792	Condition	 
>2793	Identifier	local_ec
>2794	CompoundStatement	 
>2795	ReturnStatement	 
>2796	Identifier	result
>2797	ExpressionStatement	 
>2798	CallExpression	ec -> assign ( system 
>2799	ArgumentList	system 
>2800	Argument	system 
>2801	CallExpression	system 
>2802	ArgumentList	 
>2803	Callee	system 
>2804	Identifier	system 
>2805	Argument	system 
>2806	Identifier	system 
>2807	Callee	ec -> assign
>2808	PtrMemberAccess	ec -> assign
>2809	Identifier	assign
>2810	Identifier	ec
>2811	IfStatement	if ( ec == 0 )
>2812	ExpressionStatement	 
>2813	CallExpression	BOOST_FILESYSTEM_THROW ( filesystem_error ( \"boost
>2814	ArgumentList	filesystem_error ( \"boost
>2815	Argument	filesystem_error ( \"boost
>2816	CallExpression	filesystem_error ( \"boost
>2817	ArgumentList	\"boost
>2818	Argument	error_code ( system 
>2819	CallExpression	error_code ( system 
>2820	ArgumentList	system 
>2821	Argument	system 
>2822	CallExpression	system 
>2823	ArgumentList	 
>2824	Callee	system 
>2825	Identifier	system 
>2826	Argument	system 
>2827	Identifier	system 
>2828	Callee	error_code
>2829	Identifier	error_code
>2830	Argument	source
>2831	Identifier	source
>2832	Argument	\"boost
>2833	PrimaryExpression	\"boost
>2834	Callee	filesystem_error
>2835	Identifier	filesystem_error
>2836	Callee	BOOST_FILESYSTEM_THROW
>2837	Identifier	BOOST_FILESYSTEM_THROW
>2838	Condition	 
>2839	EqualityExpression	ec == 0
>2840	PrimaryExpression	0
>2841	Identifier	ec
>2842	Condition	 
>2843	EqualityExpression	stat . type ( ) == fs 
>2844	Identifier	fs 
>2845	CallExpression	stat . type ( )
>2846	ArgumentList	 
>2847	Callee	stat . type
>2848	MemberAccess	stat . type
>2849	Identifier	type
>2850	Identifier	stat
>2851	IdentifierDeclStatement	 
>2852	IdentifierDecl	stat ( status ( source , local_ec ) )
>2853	CallExpression	status ( source , local_ec )
>2854	ArgumentList	source
>2855	Argument	local_ec
>2856	Identifier	local_ec
>2857	Argument	source
>2858	Identifier	source
>2859	Callee	status
>2860	Identifier	status
>2861	Identifier	stat
>2862	IdentifierDeclType	file_status
>2863	IdentifierDeclStatement	 
>2864	IdentifierDecl	local_ec
>2865	Identifier	local_ec
>2866	IdentifierDeclType	system 
>2867	IdentifierDeclStatement	 
>2868	IdentifierDecl	result
>2869	Identifier	result
>2870	IdentifierDeclType	path
>2871	IdentifierDeclStatement	 
>2872	IdentifierDecl	source ( p . is_absolute ( ) ? p 
>2873	ConditionalExpression	p . is_absolute ( ) ? p 
>2874	CallExpression	absolute ( p , base )
>2875	ArgumentList	p
>2876	Argument	base
>2877	Identifier	base
>2878	Argument	p
>2879	Identifier	p
>2880	Callee	absolute
>2881	Identifier	absolute
>2882	Identifier	p
>2883	Condition	p . is_absolute ( )
>2884	CallExpression	p . is_absolute ( )
>2885	ArgumentList	 
>2886	Callee	p . is_absolute
>2887	MemberAccess	p . is_absolute
>2888	Identifier	is_absolute
>2889	Identifier	p
>2890	Identifier	source
>2891	IdentifierDeclType	path
>2932	FunctionDef	copy_symlink (const path & existing_symlink , const path & new_symlink , system 
>2933	ParameterList	const path & existing_symlink , const path & new_symlink , system 
>2934	Parameter	 
>2935	Identifier	ec
>2936	ParameterType	system 
>2937	Parameter	 
>2938	Identifier	new_symlink
>2939	ParameterType	const path &
>2940	Parameter	 
>2941	Identifier	existing_symlink
>2942	ParameterType	const path &
>2943	ReturnType	BOOST_FILESYSTEM_DECL void
>2944	CompoundStatement	 
>2945	ExpressionStatement	 
>2946	CallExpression	error ( true , error_code ( BOOST_ERROR_NOT_SUPPORTED , system_category ( ) ) , new_symlink , existing_symlink , \
>2947	ArgumentList	true
>2948	Argument	\"boost
>2949	PrimaryExpression	\"boost
>2950	Argument	ec
>2951	Identifier	ec
>2952	Argument	existing_symlink
>2953	Identifier	existing_symlink
>2954	Argument	new_symlink
>2955	Identifier	new_symlink
>2956	Argument	error_code ( BOOST_ERROR_NOT_SUPPORTED , system_category ( ) )
>2957	CallExpression	error_code ( BOOST_ERROR_NOT_SUPPORTED , system_category ( ) )
>2958	ArgumentList	BOOST_ERROR_NOT_SUPPORTED
>2959	Argument	system_category ( )
>2960	CallExpression	system_category ( )
>2961	ArgumentList	 
>2962	Callee	system_category
>2963	Identifier	system_category
>2964	Argument	BOOST_ERROR_NOT_SUPPORTED
>2965	Identifier	BOOST_ERROR_NOT_SUPPORTED
>2966	Callee	error_code
>2967	Identifier	error_code
>2968	Argument	true
>2969	Identifier	true
>2970	Callee	error
>2971	Identifier	error
>2972	Statement	 
>2973	Statement	 
>2974	Statement	 
>2975	Statement	 
>2976	Statement	 
>2977	Statement	 
>2978	Statement	 
>2979	Statement	 
>2980	Statement	 
>2991	FunctionDef	create_directories (const path & p , system 
>2992	ParameterList	const path & p , system 
>2993	Parameter	 
>2994	Identifier	ec
>2995	ParameterType	system 
>2996	Parameter	 
>2997	Identifier	p
>2998	ParameterType	const path &
>2999	ReturnType	BOOST_FILESYSTEM_DECL bool
>3000	CompoundStatement	 
>3001	ReturnStatement	 
>3002	CallExpression	create_directory ( p , ec )
>3003	ArgumentList	p
>3004	Argument	ec
>3005	Identifier	ec
>3006	Argument	p
>3007	Identifier	p
>3008	Callee	create_directory
>3009	Identifier	create_directory
>3010	IfStatement	if ( ! parent . empty ( ) )
>3011	CompoundStatement	 
>3012	IfStatement	if ( parent_status . type ( ) == file_type 
>3013	CompoundStatement	 
>3014	IfStatement	if ( local_ec )
>3015	CompoundStatement	 
>3016	ReturnStatement	 
>3017	Identifier	false
>3018	IfStatement	if ( ec == 0 )
>3019	ElseStatement	else
>3020	ExpressionStatement	 
>3021	AssignmentExpr	* ec = local_ec
>3022	Identifier	local_ec
>3023	UnaryOp	* ec
>3024	Identifier	ec
>3025	UnaryOperator	*
>3026	ExpressionStatement	 
>3027	CallExpression	BOOST_FILESYSTEM_THROW ( filesystem_error ( \"boost
>3028	ArgumentList	filesystem_error ( \"boost
>3029	Argument	filesystem_error ( \"boost
>3030	CallExpression	filesystem_error ( \"boost
>3031	ArgumentList	\"boost
>3032	Argument	local_ec
>3033	Identifier	local_ec
>3034	Argument	parent
>3035	Identifier	parent
>3036	Argument	\"boost
>3037	PrimaryExpression	\"boost
>3038	Callee	filesystem_error
>3039	Identifier	filesystem_error
>3040	Callee	BOOST_FILESYSTEM_THROW
>3041	Identifier	BOOST_FILESYSTEM_THROW
>3042	Condition	 
>3043	EqualityExpression	ec == 0
>3044	PrimaryExpression	0
>3045	Identifier	ec
>3046	Condition	 
>3047	Identifier	local_ec
>3048	ExpressionStatement	 
>3049	CallExpression	create_directories ( parent , local_ec )
>3050	ArgumentList	parent
>3051	Argument	local_ec
>3052	Identifier	local_ec
>3053	Argument	parent
>3054	Identifier	parent
>3055	Callee	create_directories
>3056	Identifier	create_directories
>3057	Condition	 
>3058	EqualityExpression	parent_status . type ( ) == file_type 
>3059	Identifier	file_type 
>3060	CallExpression	parent_status . type ( )
>3061	ArgumentList	 
>3062	Callee	parent_status . type
>3063	MemberAccess	parent_status . type
>3064	Identifier	type
>3065	Identifier	parent_status
>3066	IdentifierDeclStatement	 
>3067	IdentifierDecl	parent_status = status ( parent , local_ec )
>3068	AssignmentExpr	parent_status = status ( parent , local_ec )
>3069	CallExpression	status ( parent , local_ec )
>3070	ArgumentList	parent
>3071	Argument	local_ec
>3072	Identifier	local_ec
>3073	Argument	parent
>3074	Identifier	parent
>3075	Callee	status
>3076	Identifier	status
>3077	Identifier	parent_status
>3078	Identifier	parent_status
>3079	IdentifierDeclType	file_status
>3080	Condition	 
>3081	UnaryOp	! parent . empty ( )
>3082	CallExpression	parent . empty ( )
>3083	ArgumentList	 
>3084	Callee	parent . empty
>3085	MemberAccess	parent . empty
>3086	Identifier	empty
>3087	Identifier	parent
>3088	UnaryOperator	!
>3089	IdentifierDeclStatement	 
>3090	IdentifierDecl	parent = p . parent_path ( )
>3091	AssignmentExpr	parent = p . parent_path ( )
>3092	CallExpression	p . parent_path ( )
>3093	ArgumentList	 
>3094	Callee	p . parent_path
>3095	MemberAccess	p . parent_path
>3096	Identifier	parent_path
>3097	Identifier	p
>3098	Identifier	parent
>3099	Identifier	parent
>3100	IdentifierDeclType	path
>3101	IfStatement	if ( p_status . type ( ) == file_type 
>3102	CompoundStatement	 
>3103	ReturnStatement	 
>3104	Identifier	false
>3105	IfStatement	if ( ec != 0 )
>3106	ExpressionStatement	 
>3107	CallExpression	ec -> clear ( )
>3108	ArgumentList	 
>3109	Callee	ec -> clear
>3110	PtrMemberAccess	ec -> clear
>3111	Identifier	clear
>3112	Identifier	ec
>3113	Condition	 
>3114	EqualityExpression	ec != 0
>3115	PrimaryExpression	0
>3116	Identifier	ec
>3117	Condition	 
>3118	EqualityExpression	p_status . type ( ) == file_type 
>3119	Identifier	file_type 
>3120	CallExpression	p_status . type ( )
>3121	ArgumentList	 
>3122	Callee	p_status . type
>3123	MemberAccess	p_status . type
>3124	Identifier	type
>3125	Identifier	p_status
>3126	IdentifierDeclStatement	 
>3127	IdentifierDecl	p_status = status ( p , local_ec )
>3128	AssignmentExpr	p_status = status ( p , local_ec )
>3129	CallExpression	status ( p , local_ec )
>3130	ArgumentList	p
>3131	Argument	local_ec
>3132	Identifier	local_ec
>3133	Argument	p
>3134	Identifier	p
>3135	Callee	status
>3136	Identifier	status
>3137	Identifier	p_status
>3138	Identifier	p_status
>3139	IdentifierDeclType	file_status
>3140	IdentifierDeclStatement	 
>3141	IdentifierDecl	local_ec
>3142	Identifier	local_ec
>3143	IdentifierDeclType	error_code
>3164	FunctionDef	create_directory (const path & p , error_code * ec)
>3165	ParameterList	const path & p , error_code * ec
>3166	Parameter	 
>3167	Identifier	ec
>3168	ParameterType	error_code *
>3169	Parameter	 
>3170	Identifier	p
>3171	ParameterType	const path &
>3172	ReturnType	BOOST_FILESYSTEM_DECL bool
>3173	CompoundStatement	 
>3174	ReturnStatement	 
>3175	Identifier	false
>3176	IfStatement	if ( ec == 0 )
>3177	ElseStatement	else
>3178	ExpressionStatement	 
>3179	CallExpression	ec -> assign ( errval , system_category ( ) )
>3180	ArgumentList	errval
>3181	Argument	system_category ( )
>3182	CallExpression	system_category ( )
>3183	ArgumentList	 
>3184	Callee	system_category
>3185	Identifier	system_category
>3186	Argument	errval
>3187	Identifier	errval
>3188	Callee	ec -> assign
>3189	PtrMemberAccess	ec -> assign
>3190	Identifier	assign
>3191	Identifier	ec
>3192	ExpressionStatement	 
>3193	CallExpression	BOOST_FILESYSTEM_THROW ( filesystem_error ( \"boost
>3194	ArgumentList	filesystem_error ( \"boost
>3195	Argument	filesystem_error ( \"boost
>3196	CallExpression	filesystem_error ( \"boost
>3197	ArgumentList	\"boost
>3198	Argument	error_code ( errval , system_category ( ) )
>3199	CallExpression	error_code ( errval , system_category ( ) )
>3200	ArgumentList	errval
>3201	Argument	system_category ( )
>3202	CallExpression	system_category ( )
>3203	ArgumentList	 
>3204	Callee	system_category
>3205	Identifier	system_category
>3206	Argument	errval
>3207	Identifier	errval
>3208	Callee	error_code
>3209	Identifier	error_code
>3210	Argument	p
>3211	Identifier	p
>3212	Argument	\"boost
>3213	PrimaryExpression	\"boost
>3214	Callee	filesystem_error
>3215	Identifier	filesystem_error
>3216	Callee	BOOST_FILESYSTEM_THROW
>3217	Identifier	BOOST_FILESYSTEM_THROW
>3218	Condition	 
>3219	EqualityExpression	ec == 0
>3220	PrimaryExpression	0
>3221	Identifier	ec
>3222	IfStatement	if ( errval == BOOST_ERROR_ALREADY_EXISTS && is_directory ( p , dummy ) )
>3223	CompoundStatement	 
>3224	ReturnStatement	 
>3225	Identifier	false
>3226	IfStatement	if ( ec != 0 )
>3227	ExpressionStatement	 
>3228	CallExpression	ec -> clear ( )
>3229	ArgumentList	 
>3230	Callee	ec -> clear
>3231	PtrMemberAccess	ec -> clear
>3232	Identifier	clear
>3233	Identifier	ec
>3234	Condition	 
>3235	EqualityExpression	ec != 0
>3236	PrimaryExpression	0
>3237	Identifier	ec
>3238	Condition	 
>3239	AndExpression	errval == BOOST_ERROR_ALREADY_EXISTS && is_directory ( p , dummy )
>3240	CallExpression	is_directory ( p , dummy )
>3241	ArgumentList	p
>3242	Argument	dummy
>3243	Identifier	dummy
>3244	Argument	p
>3245	Identifier	p
>3246	Callee	is_directory
>3247	Identifier	is_directory
>3248	EqualityExpression	errval == BOOST_ERROR_ALREADY_EXISTS
>3249	Identifier	BOOST_ERROR_ALREADY_EXISTS
>3250	Identifier	errval
>3251	IdentifierDeclStatement	 
>3252	IdentifierDecl	dummy
>3253	Identifier	dummy
>3254	IdentifierDeclType	error_code
>3255	IdentifierDeclStatement	 
>3256	IdentifierDecl	errval ( BOOST_ERRNO )
>3257	Identifier	BOOST_ERRNO
>3258	Identifier	errval
>3259	IdentifierDeclType	int
>3260	IfStatement	if ( BOOST_CREATE_DIRECTORY ( p . c_str ( ) ) )
>3261	CompoundStatement	 
>3262	ReturnStatement	 
>3263	Identifier	true
>3264	IfStatement	if ( ec != 0 )
>3265	ExpressionStatement	 
>3266	CallExpression	ec -> clear ( )
>3267	ArgumentList	 
>3268	Callee	ec -> clear
>3269	PtrMemberAccess	ec -> clear
>3270	Identifier	clear
>3271	Identifier	ec
>3272	Condition	 
>3273	EqualityExpression	ec != 0
>3274	PrimaryExpression	0
>3275	Identifier	ec
>3276	Condition	 
>3277	CallExpression	BOOST_CREATE_DIRECTORY ( p . c_str ( ) )
>3278	ArgumentList	p . c_str ( )
>3279	Argument	p . c_str ( )
>3280	CallExpression	p . c_str ( )
>3281	ArgumentList	 
>3282	Callee	p . c_str
>3283	MemberAccess	p . c_str
>3284	Identifier	c_str
>3285	Identifier	p
>3286	Callee	BOOST_CREATE_DIRECTORY
>3287	Identifier	BOOST_CREATE_DIRECTORY
>3304	FunctionDef	create_directory (const path & p , const path & existing_p , system 
>3305	ParameterList	const path & p , const path & existing_p , system 
>3306	Parameter	 
>3307	Identifier	ec
>3308	ParameterType	system 
>3309	Parameter	 
>3310	Identifier	existing_p
>3311	ParameterType	const path &
>3312	Parameter	 
>3313	Identifier	p
>3314	ParameterType	const path &
>3315	ReturnType	BOOST_FILESYSTEM_DECL bool
>3316	CompoundStatement	 
>3317	ReturnStatement	 
>3318	Identifier	false
>3319	IfStatement	if ( ec == 0 )
>3320	ElseStatement	else
>3321	ExpressionStatement	 
>3322	CallExpression	ec -> assign ( errval , system_category ( ) )
>3323	ArgumentList	errval
>3324	Argument	system_category ( )
>3325	CallExpression	system_category ( )
>3326	ArgumentList	 
>3327	Callee	system_category
>3328	Identifier	system_category
>3329	Argument	errval
>3330	Identifier	errval
>3331	Callee	ec -> assign
>3332	PtrMemberAccess	ec -> assign
>3333	Identifier	assign
>3334	Identifier	ec
>3335	ExpressionStatement	 
>3336	CallExpression	BOOST_FILESYSTEM_THROW ( filesystem_error ( \"boost
>3337	ArgumentList	filesystem_error ( \"boost
>3338	Argument	filesystem_error ( \"boost
>3339	CallExpression	filesystem_error ( \"boost
>3340	ArgumentList	\"boost
>3341	Argument	error_code ( errval , system_category ( ) )
>3342	CallExpression	error_code ( errval , system_category ( ) )
>3343	ArgumentList	errval
>3344	Argument	system_category ( )
>3345	CallExpression	system_category ( )
>3346	ArgumentList	 
>3347	Callee	system_category
>3348	Identifier	system_category
>3349	Argument	errval
>3350	Identifier	errval
>3351	Callee	error_code
>3352	Identifier	error_code
>3353	Argument	existing_p
>3354	Identifier	existing_p
>3355	Argument	p
>3356	Identifier	p
>3357	Argument	\"boost
>3358	PrimaryExpression	\"boost
>3359	Callee	filesystem_error
>3360	Identifier	filesystem_error
>3361	Callee	BOOST_FILESYSTEM_THROW
>3362	Identifier	BOOST_FILESYSTEM_THROW
>3363	Condition	 
>3364	EqualityExpression	ec == 0
>3365	PrimaryExpression	0
>3366	Identifier	ec
>3367	IfStatement	if ( errval == BOOST_ERROR_ALREADY_EXISTS && is_directory ( p , dummy ) )
>3368	CompoundStatement	 
>3369	ReturnStatement	 
>3370	Identifier	false
>3371	IfStatement	if ( ec != 0 )
>3372	ExpressionStatement	 
>3373	CallExpression	ec -> clear ( )
>3374	ArgumentList	 
>3375	Callee	ec -> clear
>3376	PtrMemberAccess	ec -> clear
>3377	Identifier	clear
>3378	Identifier	ec
>3379	Condition	 
>3380	EqualityExpression	ec != 0
>3381	PrimaryExpression	0
>3382	Identifier	ec
>3383	Condition	 
>3384	AndExpression	errval == BOOST_ERROR_ALREADY_EXISTS && is_directory ( p , dummy )
>3385	CallExpression	is_directory ( p , dummy )
>3386	ArgumentList	p
>3387	Argument	dummy
>3388	Identifier	dummy
>3389	Argument	p
>3390	Identifier	p
>3391	Callee	is_directory
>3392	Identifier	is_directory
>3393	EqualityExpression	errval == BOOST_ERROR_ALREADY_EXISTS
>3394	Identifier	BOOST_ERROR_ALREADY_EXISTS
>3395	Identifier	errval
>3396	IdentifierDeclStatement	 
>3397	IdentifierDecl	dummy
>3398	Identifier	dummy
>3399	IdentifierDeclType	error_code
>3400	IdentifierDeclStatement	 
>3401	IdentifierDecl	errval ( BOOST_ERRNO )
>3402	Identifier	BOOST_ERRNO
>3403	Identifier	errval
>3404	IdentifierDeclType	int
>3405	IfStatement	if ( BOOST_CREATE_DIRECTORY_FROM_EXISTING ( p . c_str ( ) , existing_p . c_str ( ) ) )
>3406	CompoundStatement	 
>3407	ReturnStatement	 
>3408	Identifier	true
>3409	IfStatement	if ( ec != 0 )
>3410	ExpressionStatement	 
>3411	CallExpression	ec -> clear ( )
>3412	ArgumentList	 
>3413	Callee	ec -> clear
>3414	PtrMemberAccess	ec -> clear
>3415	Identifier	clear
>3416	Identifier	ec
>3417	Condition	 
>3418	EqualityExpression	ec != 0
>3419	PrimaryExpression	0
>3420	Identifier	ec
>3421	Condition	 
>3422	CallExpression	BOOST_CREATE_DIRECTORY_FROM_EXISTING ( p . c_str ( ) , existing_p . c_str ( ) )
>3423	ArgumentList	p . c_str ( )
>3424	Argument	existing_p . c_str ( )
>3425	CallExpression	existing_p . c_str ( )
>3426	ArgumentList	 
>3427	Callee	existing_p . c_str
>3428	MemberAccess	existing_p . c_str
>3429	Identifier	c_str
>3430	Identifier	existing_p
>3431	Argument	p . c_str ( )
>3432	CallExpression	p . c_str ( )
>3433	ArgumentList	 
>3434	Callee	p . c_str
>3435	MemberAccess	p . c_str
>3436	Identifier	c_str
>3437	Identifier	p
>3438	Callee	BOOST_CREATE_DIRECTORY_FROM_EXISTING
>3439	Identifier	BOOST_CREATE_DIRECTORY_FROM_EXISTING
>3440	Statement	 
>3441	IdentifierDeclStatement	 
>3442	IdentifierDecl	from_stat
>3443	Identifier	from_stat
>3444	IdentifierDeclType	struct stat
>3445	Statement	 
>3446	Statement	 
>3466	FunctionDef	create_directory_symlink (const path & to , const path & from , system 
>3467	ParameterList	const path & to , const path & from , system 
>3468	Parameter	 
>3469	Identifier	ec
>3470	ParameterType	system 
>3471	Parameter	 
>3472	Identifier	from
>3473	ParameterType	const path &
>3474	Parameter	 
>3475	Identifier	to
>3476	ParameterType	const path &
>3477	ReturnType	BOOST_FILESYSTEM_DECL void
>3478	CompoundStatement	 
>3479	ExpressionStatement	 
>3480	CallExpression	error ( true , error_code ( BOOST_ERROR_NOT_SUPPORTED , system_category ( ) ) , to , from , ec , \"boost
>3481	ArgumentList	true
>3482	Argument	\"boost
>3483	PrimaryExpression	\"boost
>3484	Argument	ec
>3485	Identifier	ec
>3486	Argument	from
>3487	Identifier	from
>3488	Argument	to
>3489	Identifier	to
>3490	Argument	error_code ( BOOST_ERROR_NOT_SUPPORTED , system_category ( ) )
>3491	CallExpression	error_code ( BOOST_ERROR_NOT_SUPPORTED , system_category ( ) )
>3492	ArgumentList	BOOST_ERROR_NOT_SUPPORTED
>3493	Argument	system_category ( )
>3494	CallExpression	system_category ( )
>3495	ArgumentList	 
>3496	Callee	system_category
>3497	Identifier	system_category
>3498	Argument	BOOST_ERROR_NOT_SUPPORTED
>3499	Identifier	BOOST_ERROR_NOT_SUPPORTED
>3500	Callee	error_code
>3501	Identifier	error_code
>3502	Argument	true
>3503	Identifier	true
>3504	Callee	error
>3505	Identifier	error
>3506	Statement	 
>3507	Statement	 
>3508	Statement	 
>3509	Statement	 
>3510	Statement	 
>3511	Statement	 
>3512	Statement	 
>3513	Statement	 
>3514	Statement	 
>3525	FunctionDef	create_hard_link (const path & to , const path & from , error_code * ec)
>3526	ParameterList	const path & to , const path & from , error_code * ec
>3527	Parameter	 
>3528	Identifier	ec
>3529	ParameterType	error_code *
>3530	Parameter	 
>3531	Identifier	from
>3532	ParameterType	const path &
>3533	Parameter	 
>3534	Identifier	to
>3535	ParameterType	const path &
>3536	ReturnType	BOOST_FILESYSTEM_DECL void
>3537	CompoundStatement	 
>3538	ExpressionStatement	 
>3539	CallExpression	error ( true , error_code ( BOOST_ERROR_NOT_SUPPORTED , system_category ( ) ) , to , from , ec , \"boost
>3540	ArgumentList	true
>3541	Argument	\"boost
>3542	PrimaryExpression	\"boost
>3543	Argument	ec
>3544	Identifier	ec
>3545	Argument	from
>3546	Identifier	from
>3547	Argument	to
>3548	Identifier	to
>3549	Argument	error_code ( BOOST_ERROR_NOT_SUPPORTED , system_category ( ) )
>3550	CallExpression	error_code ( BOOST_ERROR_NOT_SUPPORTED , system_category ( ) )
>3551	ArgumentList	BOOST_ERROR_NOT_SUPPORTED
>3552	Argument	system_category ( )
>3553	CallExpression	system_category ( )
>3554	ArgumentList	 
>3555	Callee	system_category
>3556	Identifier	system_category
>3557	Argument	BOOST_ERROR_NOT_SUPPORTED
>3558	Identifier	BOOST_ERROR_NOT_SUPPORTED
>3559	Callee	error_code
>3560	Identifier	error_code
>3561	Argument	true
>3562	Identifier	true
>3563	Callee	error
>3564	Identifier	error
>3565	Statement	 
>3566	Statement	 
>3567	Statement	 
>3568	Statement	 
>3569	Statement	 
>3570	Statement	 
>3571	Statement	 
>3572	Statement	 
>3573	Statement	 
>3584	FunctionDef	create_symlink (const path & to , const path & from , error_code * ec)
>3585	ParameterList	const path & to , const path & from , error_code * ec
>3586	Parameter	 
>3587	Identifier	ec
>3588	ParameterType	error_code *
>3589	Parameter	 
>3590	Identifier	from
>3591	ParameterType	const path &
>3592	Parameter	 
>3593	Identifier	to
>3594	ParameterType	const path &
>3595	ReturnType	BOOST_FILESYSTEM_DECL void
>3596	CompoundStatement	 
>3597	ExpressionStatement	 
>3598	CallExpression	error ( true , error_code ( BOOST_ERROR_NOT_SUPPORTED , system_category ( ) ) , to , from , ec , \"boost
>3599	ArgumentList	true
>3600	Argument	\"boost
>3601	PrimaryExpression	\"boost
>3602	Argument	ec
>3603	Identifier	ec
>3604	Argument	from
>3605	Identifier	from
>3606	Argument	to
>3607	Identifier	to
>3608	Argument	error_code ( BOOST_ERROR_NOT_SUPPORTED , system_category ( ) )
>3609	CallExpression	error_code ( BOOST_ERROR_NOT_SUPPORTED , system_category ( ) )
>3610	ArgumentList	BOOST_ERROR_NOT_SUPPORTED
>3611	Argument	system_category ( )
>3612	CallExpression	system_category ( )
>3613	ArgumentList	 
>3614	Callee	system_category
>3615	Identifier	system_category
>3616	Argument	BOOST_ERROR_NOT_SUPPORTED
>3617	Identifier	BOOST_ERROR_NOT_SUPPORTED
>3618	Callee	error_code
>3619	Identifier	error_code
>3620	Argument	true
>3621	Identifier	true
>3622	Callee	error
>3623	Identifier	error
>3624	Statement	 
>3625	Statement	 
>3626	Statement	 
>3627	Statement	 
>3628	Statement	 
>3629	Statement	 
>3630	Statement	 
>3631	Statement	 
>3632	Statement	 
>3643	FunctionDef	current_path (error_code * ec)
>3644	ParameterList	error_code * ec
>3645	Parameter	 
>3646	Identifier	ec
>3647	ParameterType	error_code *
>3648	ReturnType	BOOST_FILESYSTEM_DECL path
>3649	CompoundStatement	 
>3650	IdentifierDeclStatement	 
>3651	IdentifierDecl	cur
>3652	Identifier	cur
>3653	IdentifierDeclType	ifdef BOOST_POSIX_API path
>3659	FunctionDef	current_path (const path & p , system 
>3660	ParameterList	const path & p , system 
>3661	Parameter	 
>3662	Identifier	ec
>3663	ParameterType	system 
>3664	Parameter	 
>3665	Identifier	p
>3666	ParameterType	const path &
>3667	ReturnType	BOOST_FILESYSTEM_DECL void
>3668	CompoundStatement	 
>3669	ExpressionStatement	 
>3670	CallExpression	error ( ! BOOST_SET_CURRENT_DIRECTORY ( p . c_str ( ) ) , p , ec , \"boost
>3671	ArgumentList	! BOOST_SET_CURRENT_DIRECTORY ( p . c_str ( ) )
>3672	Argument	\"boost
>3673	PrimaryExpression	\"boost
>3674	Argument	ec
>3675	Identifier	ec
>3676	Argument	p
>3677	Identifier	p
>3678	Argument	! BOOST_SET_CURRENT_DIRECTORY ( p . c_str ( ) )
>3679	UnaryOp	! BOOST_SET_CURRENT_DIRECTORY ( p . c_str ( ) )
>3680	CallExpression	BOOST_SET_CURRENT_DIRECTORY ( p . c_str ( ) )
>3681	ArgumentList	p . c_str ( )
>3682	Argument	p . c_str ( )
>3683	CallExpression	p . c_str ( )
>3684	ArgumentList	 
>3685	Callee	p . c_str
>3686	MemberAccess	p . c_str
>3687	Identifier	c_str
>3688	Identifier	p
>3689	Callee	BOOST_SET_CURRENT_DIRECTORY
>3690	Identifier	BOOST_SET_CURRENT_DIRECTORY
>3691	UnaryOperator	!
>3692	Callee	error
>3693	Identifier	error
>3701	FunctionDef	equivalent (const path & p1 , const path & p2 , system 
>3702	ParameterList	const path & p1 , const path & p2 , system 
>3703	Parameter	 
>3704	Identifier	ec
>3705	ParameterType	system 
>3706	Parameter	 
>3707	Identifier	p2
>3708	ParameterType	const path &
>3709	Parameter	 
>3710	Identifier	p1
>3711	ParameterType	const path &
>3712	ReturnType	BOOST_FILESYSTEM_DECL bool
>3713	CompoundStatement	 
>3714	Statement	 
>3715	ReturnStatement	 
>3716	AndExpression	info1 . dwVolumeSerialNumber == info2 . dwVolumeSerialNumber && info1 . nFileIndexHigh == info2 . nFileIndexHigh && \
>3717	AndExpression	info1 . nFileIndexHigh == info2 . nFileIndexHigh && info1 . nFileIndexLow == info2 . nFileIndexLow && \
>3718	AndExpression	info1 . nFileIndexLow == info2 . nFileIndexLow && info1 . nFileSizeHigh == info2 . nFileSizeHigh && \
>3719	AndExpression	info1 . nFileSizeHigh == info2 . nFileSizeHigh && info1 . nFileSizeLow == info2 . nFileSizeLow && info1 \
>3720	AndExpression	info1 . nFileSizeLow == info2 . nFileSizeLow && info1 . ftLastWriteTime . dwLowDateTime == info2 . ftLastWriteTime \
>3721	AndExpression	info1 . ftLastWriteTime . dwLowDateTime == info2 . ftLastWriteTime . dwLowDateTime && info1 . ftLastWriteTime \
>3722	EqualityExpression	info1 . ftLastWriteTime . dwHighDateTime == info2 . ftLastWriteTime . dwHighDateTime
>3723	MemberAccess	info2 . ftLastWriteTime . dwHighDateTime
>3724	Identifier	dwHighDateTime
>3725	MemberAccess	info2 . ftLastWriteTime
>3726	Identifier	ftLastWriteTime
>3727	Identifier	info2
>3728	MemberAccess	info1 . ftLastWriteTime . dwHighDateTime
>3729	Identifier	dwHighDateTime
>3730	MemberAccess	info1 . ftLastWriteTime
>3731	Identifier	ftLastWriteTime
>3732	Identifier	info1
>3733	EqualityExpression	info1 . ftLastWriteTime . dwLowDateTime == info2 . ftLastWriteTime . dwLowDateTime
>3734	MemberAccess	info2 . ftLastWriteTime . dwLowDateTime
>3735	Identifier	dwLowDateTime
>3736	MemberAccess	info2 . ftLastWriteTime
>3737	Identifier	ftLastWriteTime
>3738	Identifier	info2
>3739	MemberAccess	info1 . ftLastWriteTime . dwLowDateTime
>3740	Identifier	dwLowDateTime
>3741	MemberAccess	info1 . ftLastWriteTime
>3742	Identifier	ftLastWriteTime
>3743	Identifier	info1
>3744	EqualityExpression	info1 . nFileSizeLow == info2 . nFileSizeLow
>3745	MemberAccess	info2 . nFileSizeLow
>3746	Identifier	nFileSizeLow
>3747	Identifier	info2
>3748	MemberAccess	info1 . nFileSizeLow
>3749	Identifier	nFileSizeLow
>3750	Identifier	info1
>3751	EqualityExpression	info1 . nFileSizeHigh == info2 . nFileSizeHigh
>3752	MemberAccess	info2 . nFileSizeHigh
>3753	Identifier	nFileSizeHigh
>3754	Identifier	info2
>3755	MemberAccess	info1 . nFileSizeHigh
>3756	Identifier	nFileSizeHigh
>3757	Identifier	info1
>3758	EqualityExpression	info1 . nFileIndexLow == info2 . nFileIndexLow
>3759	MemberAccess	info2 . nFileIndexLow
>3760	Identifier	nFileIndexLow
>3761	Identifier	info2
>3762	MemberAccess	info1 . nFileIndexLow
>3763	Identifier	nFileIndexLow
>3764	Identifier	info1
>3765	EqualityExpression	info1 . nFileIndexHigh == info2 . nFileIndexHigh
>3766	MemberAccess	info2 . nFileIndexHigh
>3767	Identifier	nFileIndexHigh
>3768	Identifier	info2
>3769	MemberAccess	info1 . nFileIndexHigh
>3770	Identifier	nFileIndexHigh
>3771	Identifier	info1
>3772	EqualityExpression	info1 . dwVolumeSerialNumber == info2 . dwVolumeSerialNumber
>3773	MemberAccess	info2 . dwVolumeSerialNumber
>3774	Identifier	dwVolumeSerialNumber
>3775	Identifier	info2
>3776	MemberAccess	info1 . dwVolumeSerialNumber
>3777	Identifier	dwVolumeSerialNumber
>3778	Identifier	info1
>3779	ReturnStatement	 
>3780	Identifier	false
>3781	Statement	 
>3782	Statement	 
>3783	Statement	 
>3784	Statement	 
>3785	Statement	 
>3786	Statement	 
>3787	Statement	 
>3788	Statement	 
>3789	Statement	 
>3790	Statement	 
>3791	Statement	 
>3792	Statement	 
>3793	Statement	 
>3794	Statement	 
>3795	Statement	 
>3796	Statement	 
>3797	Statement	 
>3798	Statement	 
>3799	Statement	 
>3800	Statement	 
>3801	Statement	 
>3802	Statement	 
>3803	Statement	 
>3804	Statement	 
>3805	Statement	 
>3806	ReturnStatement	 
>3807	Identifier	false
>3808	Statement	 
>3809	Statement	 
>3810	Statement	 
>3811	Statement	 
>3812	Statement	 
>3813	Statement	 
>3814	Statement	 
>3815	Statement	 
>3816	Statement	 
>3817	Statement	 
>3818	Statement	 
>3819	Statement	 
>3820	Statement	 
>3821	Statement	 
>3822	Statement	 
>3823	Statement	 
>3824	Statement	 
>3825	Statement	 
>3826	Statement	 
>3827	Statement	 
>3828	Statement	 
>3829	Statement	 
>3830	Statement	 
>3831	Statement	 
>3832	Statement	 
>3833	IdentifierDeclStatement	 
>3834	IdentifierDecl	info2
>3835	Identifier	info2
>3836	IdentifierDeclType	BY_HANDLE_FILE_INFORMATION
>3837	IdentifierDecl	info1
>3838	Identifier	info1
>3839	IdentifierDeclType	BY_HANDLE_FILE_INFORMATION
>3840	IfStatement	if ( h1 . handle == INVALID_HANDLE_VALUE || h2 . handle == INVALID_HANDLE_VALUE )
>3841	CompoundStatement	 
>3842	ReturnStatement	 
>3843	Identifier	false
>3844	ExpressionStatement	 
>3845	CallExpression	error ( h1 . handle == INVALID_HANDLE_VALUE && h2 . handle == INVALID_HANDLE_VALUE , p1 , p2 , ec , \"boost
>3846	ArgumentList	h1 . handle == INVALID_HANDLE_VALUE && h2 . handle == INVALID_HANDLE_VALUE
>3847	Argument	\"boost
>3848	PrimaryExpression	\"boost
>3849	Argument	ec
>3850	Identifier	ec
>3851	Argument	p2
>3852	Identifier	p2
>3853	Argument	p1
>3854	Identifier	p1
>3855	Argument	h1 . handle == INVALID_HANDLE_VALUE && h2 . handle == INVALID_HANDLE_VALUE
>3856	AndExpression	h1 . handle == INVALID_HANDLE_VALUE && h2 . handle == INVALID_HANDLE_VALUE
>3857	EqualityExpression	h2 . handle == INVALID_HANDLE_VALUE
>3858	Identifier	INVALID_HANDLE_VALUE
>3859	MemberAccess	h2 . handle
>3860	Identifier	handle
>3861	Identifier	h2
>3862	EqualityExpression	h1 . handle == INVALID_HANDLE_VALUE
>3863	Identifier	INVALID_HANDLE_VALUE
>3864	MemberAccess	h1 . handle
>3865	Identifier	handle
>3866	Identifier	h1
>3867	Callee	error
>3868	Identifier	error
>3869	Condition	 
>3870	OrExpression	h1 . handle == INVALID_HANDLE_VALUE || h2 . handle == INVALID_HANDLE_VALUE
>3871	EqualityExpression	h2 . handle == INVALID_HANDLE_VALUE
>3872	Identifier	INVALID_HANDLE_VALUE
>3873	MemberAccess	h2 . handle
>3874	Identifier	handle
>3875	Identifier	h2
>3876	EqualityExpression	h1 . handle == INVALID_HANDLE_VALUE
>3877	Identifier	INVALID_HANDLE_VALUE
>3878	MemberAccess	h1 . handle
>3879	Identifier	handle
>3880	Identifier	h1
>3881	IdentifierDeclStatement	 
>3882	IdentifierDecl	h1 ( create_file_handle ( p1 . c_str ( ) , 0 , FILE_SHARE_DELETE | FILE_SHARE_READ | FILE_SHARE_WRITE , 0 , OPEN_\
>3883	CallExpression	create_file_handle ( p1 . c_str ( ) , 0 , FILE_SHARE_DELETE | FILE_SHARE_READ | FILE_SHARE_WRITE , 0 , OPEN_EXISTING , \
>3884	ArgumentList	p1 . c_str ( )
>3885	Argument	0
>3886	PrimaryExpression	0
>3887	Argument	FILE_FLAG_BACKUP_SEMANTICS
>3888	Identifier	FILE_FLAG_BACKUP_SEMANTICS
>3889	Argument	OPEN_EXISTING
>3890	Identifier	OPEN_EXISTING
>3891	Argument	0
>3892	PrimaryExpression	0
>3893	Argument	FILE_SHARE_DELETE | FILE_SHARE_READ | FILE_SHARE_WRITE
>3894	InclusiveOrExpression	FILE_SHARE_DELETE | FILE_SHARE_READ | FILE_SHARE_WRITE
>3895	InclusiveOrExpression	FILE_SHARE_READ | FILE_SHARE_WRITE
>3896	Identifier	FILE_SHARE_WRITE
>3897	Identifier	FILE_SHARE_READ
>3898	Identifier	FILE_SHARE_DELETE
>3899	Argument	0
>3900	PrimaryExpression	0
>3901	Argument	p1 . c_str ( )
>3902	CallExpression	p1 . c_str ( )
>3903	ArgumentList	 
>3904	Callee	p1 . c_str
>3905	MemberAccess	p1 . c_str
>3906	Identifier	c_str
>3907	Identifier	p1
>3908	Callee	create_file_handle
>3909	Identifier	create_file_handle
>3910	Identifier	h1
>3911	IdentifierDeclType	handle_wrapper
>3912	ReturnStatement	 
>3913	AndExpression	s1 . st_dev == s2 . st_dev && s1 . st_ino == s2 . st_ino && s1 . st_size == s2 . st_size && s1 . st_\
>3914	AndExpression	s1 . st_ino == s2 . st_ino && s1 . st_size == s2 . st_size && s1 . st_mtime == s2 . st_mtime
>3915	AndExpression	s1 . st_size == s2 . st_size && s1 . st_mtime == s2 . st_mtime
>3916	EqualityExpression	s1 . st_mtime == s2 . st_mtime
>3917	MemberAccess	s2 . st_mtime
>3918	Identifier	st_mtime
>3919	Identifier	s2
>3920	MemberAccess	s1 . st_mtime
>3921	Identifier	st_mtime
>3922	Identifier	s1
>3923	EqualityExpression	s1 . st_size == s2 . st_size
>3924	MemberAccess	s2 . st_size
>3925	Identifier	st_size
>3926	Identifier	s2
>3927	MemberAccess	s1 . st_size
>3928	Identifier	st_size
>3929	Identifier	s1
>3930	EqualityExpression	s1 . st_ino == s2 . st_ino
>3931	MemberAccess	s2 . st_ino
>3932	Identifier	st_ino
>3933	Identifier	s2
>3934	MemberAccess	s1 . st_ino
>3935	Identifier	st_ino
>3936	Identifier	s1
>3937	EqualityExpression	s1 . st_dev == s2 . st_dev
>3938	MemberAccess	s2 . st_dev
>3939	Identifier	st_dev
>3940	Identifier	s2
>3941	MemberAccess	s1 . st_dev
>3942	Identifier	st_dev
>3943	Identifier	s1
>3944	IfStatement	if ( e1 != 0 || e2 != 0 )
>3945	ElseStatement	else
>3946	IdentifierDeclStatement	 
>3947	IdentifierDecl	h2 ( create_file_handle ( p2 . c_str ( ) , 0 , FILE_SHARE_DELETE | FILE_SHARE_READ | FILE_SHARE_WRITE , 0 , OPEN_\
>3948	CallExpression	create_file_handle ( p2 . c_str ( ) , 0 , FILE_SHARE_DELETE | FILE_SHARE_READ | FILE_SHARE_WRITE , 0 , OPEN_EXISTING , \
>3949	ArgumentList	p2 . c_str ( )
>3950	Argument	0
>3951	PrimaryExpression	0
>3952	Argument	FILE_FLAG_BACKUP_SEMANTICS
>3953	Identifier	FILE_FLAG_BACKUP_SEMANTICS
>3954	Argument	OPEN_EXISTING
>3955	Identifier	OPEN_EXISTING
>3956	Argument	0
>3957	PrimaryExpression	0
>3958	Argument	FILE_SHARE_DELETE | FILE_SHARE_READ | FILE_SHARE_WRITE
>3959	InclusiveOrExpression	FILE_SHARE_DELETE | FILE_SHARE_READ | FILE_SHARE_WRITE
>3960	InclusiveOrExpression	FILE_SHARE_READ | FILE_SHARE_WRITE
>3961	Identifier	FILE_SHARE_WRITE
>3962	Identifier	FILE_SHARE_READ
>3963	Identifier	FILE_SHARE_DELETE
>3964	Argument	0
>3965	PrimaryExpression	0
>3966	Argument	p2 . c_str ( )
>3967	CallExpression	p2 . c_str ( )
>3968	ArgumentList	 
>3969	Callee	p2 . c_str
>3970	MemberAccess	p2 . c_str
>3971	Identifier	c_str
>3972	Identifier	p2
>3973	Callee	create_file_handle
>3974	Identifier	create_file_handle
>3975	Identifier	h2
>3976	IdentifierDeclType	handle_wrapper
>3977	CompoundStatement	 
>3978	ReturnStatement	 
>3979	Identifier	false
>3980	ExpressionStatement	 
>3981	CallExpression	error ( e1 != 0 && e2 != 0 , p1 , p2 , ec , \"boost
>3982	ArgumentList	e1 != 0 && e2 != 0
>3983	Argument	\"boost
>3984	PrimaryExpression	\"boost
>3985	Argument	ec
>3986	Identifier	ec
>3987	Argument	p2
>3988	Identifier	p2
>3989	Argument	p1
>3990	Identifier	p1
>3991	Argument	e1 != 0 && e2 != 0
>3992	AndExpression	e1 != 0 && e2 != 0
>3993	EqualityExpression	e2 != 0
>3994	PrimaryExpression	0
>3995	Identifier	e2
>3996	EqualityExpression	e1 != 0
>3997	PrimaryExpression	0
>3998	Identifier	e1
>3999	Callee	error
>4000	Identifier	error
>4001	Condition	 
>4002	OrExpression	e1 != 0 || e2 != 0
>4003	EqualityExpression	e2 != 0
>4004	PrimaryExpression	0
>4005	Identifier	e2
>4006	EqualityExpression	e1 != 0
>4007	PrimaryExpression	0
>4008	Identifier	e1
>4009	ExpressionStatement	 
>4010	Statement	 
>4011	Statement	 
>4012	Statement	 
>4013	Statement	 
>4014	Statement	 
>4015	Statement	 
>4016	Statement	 
>4017	Statement	 
>4018	Statement	 
>4019	Statement	 
>4020	Statement	 
>4021	Statement	 
>4022	Statement	 
>4023	Statement	 
>4024	Statement	 
>4025	Statement	 
>4026	IdentifierDeclStatement	 
>4027	IdentifierDecl	s1
>4028	Identifier	s1
>4029	IdentifierDeclType	struct stat
>4030	ExpressionStatement	 
>4031	Statement	 
>4032	Statement	 
>4033	Statement	 
>4034	Statement	 
>4035	Statement	 
>4036	Statement	 
>4037	Statement	 
>4038	Statement	 
>4039	Statement	 
>4040	Statement	 
>4041	Statement	 
>4042	Statement	 
>4043	Statement	 
>4044	Statement	 
>4045	Statement	 
>4046	Statement	 
>4047	IdentifierDeclStatement	 
>4048	IdentifierDecl	s2
>4049	Identifier	s2
>4050	IdentifierDeclType	struct stat
>4051	Statement	 
>4052	Statement	 
>4102	FunctionDef	file_size (const path & p , error_code * ec)
>4103	ParameterList	const path & p , error_code * ec
>4104	Parameter	 
>4105	Identifier	ec
>4106	ParameterType	error_code *
>4107	Parameter	 
>4108	Identifier	p
>4109	ParameterType	const path &
>4110	ReturnType	BOOST_FILESYSTEM_DECL boost 
>4111	CompoundStatement	 
>4112	Statement	 
>4113	ReturnStatement	 
>4114	AdditiveExpression	( static_cast < boost 
>4115	MemberAccess	fad . nFileSizeLow
>4116	Identifier	nFileSizeLow
>4117	Identifier	fad
>4118	RelationalExpression	static_cast < boost 
>4119	RelationalExpression	boost 
>4120	ShiftExpression	( fad . nFileSizeHigh ) << ( sizeof ( fad . nFileSizeLow ) * 8 )
>4121	MultiplicativeExpression	sizeof ( fad . nFileSizeLow ) * 8
>4122	PrimaryExpression	8
>4123	SizeofExpr	sizeof ( fad . nFileSizeLow )
>4124	MemberAccess	fad . nFileSizeLow
>4125	Identifier	nFileSizeLow
>4126	Identifier	fad
>4127	Sizeof	sizeof
>4128	MemberAccess	fad . nFileSizeHigh
>4129	Identifier	nFileSizeHigh
>4130	Identifier	fad
>4131	Identifier	boost 
>4132	Identifier	static_cast
>4133	IfStatement	if ( error ( ( fad . dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY ) != 0 , error_code ( ERROR_NOT_SUPPORTED , system_\
>4134	ReturnStatement	 
>4135	RelationalExpression	static_cast < boost 
>4136	RelationalExpression	boost 
>4137	UnaryOp	- 1
>4138	PrimaryExpression	1
>4139	UnaryOperator	-
>4140	Identifier	boost 
>4141	Identifier	static_cast
>4142	Condition	 
>4143	CallExpression	error ( ( fad . dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY ) != 0 , error_code ( ERROR_NOT_SUPPORTED , system_category ( ) ) , \
>4144	ArgumentList	( fad . dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY ) != 0
>4145	Argument	\"boost
>4146	PrimaryExpression	\"boost
>4147	Argument	ec
>4148	Identifier	ec
>4149	Argument	p
>4150	Identifier	p
>4151	Argument	error_code ( ERROR_NOT_SUPPORTED , system_category ( ) )
>4152	CallExpression	error_code ( ERROR_NOT_SUPPORTED , system_category ( ) )
>4153	ArgumentList	ERROR_NOT_SUPPORTED
>4154	Argument	system_category ( )
>4155	CallExpression	system_category ( )
>4156	ArgumentList	 
>4157	Callee	system_category
>4158	Identifier	system_category
>4159	Argument	ERROR_NOT_SUPPORTED
>4160	Identifier	ERROR_NOT_SUPPORTED
>4161	Callee	error_code
>4162	Identifier	error_code
>4163	Argument	( fad . dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY ) != 0
>4164	EqualityExpression	( fad . dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY ) != 0
>4165	PrimaryExpression	0
>4166	BitAndExpression	fad . dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY
>4167	Identifier	FILE_ATTRIBUTE_DIRECTORY
>4168	MemberAccess	fad . dwFileAttributes
>4169	Identifier	dwFileAttributes
>4170	Identifier	fad
>4171	Callee	error
>4172	Identifier	error
>4173	ReturnStatement	 
>4174	RelationalExpression	static_cast < boost 
>4175	RelationalExpression	boost 
>4176	UnaryOp	- 1
>4177	PrimaryExpression	1
>4178	UnaryOperator	-
>4179	Identifier	boost 
>4180	Identifier	static_cast
>4181	Statement	 
>4182	Statement	 
>4183	Statement	 
>4184	Statement	 
>4185	Statement	 
>4186	Statement	 
>4187	Statement	 
>4188	Statement	 
>4189	Statement	 
>4190	Statement	 
>4191	Statement	 
>4192	Statement	 
>4193	Statement	 
>4194	Statement	 
>4195	Statement	 
>4196	Statement	 
>4197	Statement	 
>4198	Statement	 
>4199	Statement	 
>4200	Statement	 
>4201	Statement	 
>4202	Statement	 
>4203	Statement	 
>4204	Statement	 
>4205	Statement	 
>4206	Statement	 
>4207	Statement	 
>4208	Statement	 
>4209	Statement	 
>4210	ReturnStatement	 
>4211	RelationalExpression	static_cast < boost 
>4212	RelationalExpression	boost 
>4213	MemberAccess	path_stat . st_size
>4214	Identifier	st_size
>4215	Identifier	path_stat
>4216	Identifier	boost 
>4217	Identifier	static_cast
>4218	IfStatement	if ( error ( ! S_ISREG ( path_stat . st_mode ) , error_code ( EPERM , system_category ( ) ) , p , ec , \"boost
>4219	ElseStatement	else
>4220	IdentifierDeclStatement	 
>4221	IdentifierDecl	fad
>4222	Identifier	fad
>4223	IdentifierDeclType	WIN32_FILE_ATTRIBUTE_DATA
>4224	ReturnStatement	 
>4225	RelationalExpression	static_cast < boost 
>4226	RelationalExpression	boost 
>4227	UnaryOp	- 1
>4228	PrimaryExpression	1
>4229	UnaryOperator	-
>4230	Identifier	boost 
>4231	Identifier	static_cast
>4232	Condition	 
>4233	CallExpression	error ( ! S_ISREG ( path_stat . st_mode ) , error_code ( EPERM , system_category ( ) ) , p , ec , \"boost
>4234	ArgumentList	! S_ISREG ( path_stat . st_mode )
>4235	Argument	\"boost
>4236	PrimaryExpression	\"boost
>4237	Argument	ec
>4238	Identifier	ec
>4239	Argument	p
>4240	Identifier	p
>4241	Argument	error_code ( EPERM , system_category ( ) )
>4242	CallExpression	error_code ( EPERM , system_category ( ) )
>4243	ArgumentList	EPERM
>4244	Argument	system_category ( )
>4245	CallExpression	system_category ( )
>4246	ArgumentList	 
>4247	Callee	system_category
>4248	Identifier	system_category
>4249	Argument	EPERM
>4250	Identifier	EPERM
>4251	Callee	error_code
>4252	Identifier	error_code
>4253	Argument	! S_ISREG ( path_stat . st_mode )
>4254	UnaryOp	! S_ISREG ( path_stat . st_mode )
>4255	CallExpression	S_ISREG ( path_stat . st_mode )
>4256	ArgumentList	path_stat . st_mode
>4257	Argument	path_stat . st_mode
>4258	MemberAccess	path_stat . st_mode
>4259	Identifier	st_mode
>4260	Identifier	path_stat
>4261	Callee	S_ISREG
>4262	Identifier	S_ISREG
>4263	UnaryOperator	!
>4264	Callee	error
>4265	Identifier	error
>4266	ReturnStatement	 
>4267	RelationalExpression	static_cast < boost 
>4268	RelationalExpression	boost 
>4269	UnaryOp	- 1
>4270	PrimaryExpression	1
>4271	UnaryOperator	-
>4272	Identifier	boost 
>4273	Identifier	static_cast
>4274	Statement	 
>4275	Statement	 
>4276	Statement	 
>4277	Statement	 
>4278	Statement	 
>4279	Statement	 
>4280	Statement	 
>4281	Statement	 
>4282	Statement	 
>4283	Statement	 
>4284	Statement	 
>4285	Statement	 
>4286	Statement	 
>4287	Statement	 
>4288	Statement	 
>4289	Statement	 
>4290	Statement	 
>4291	Statement	 
>4292	Statement	 
>4293	Statement	 
>4294	Statement	 
>4295	Statement	 
>4296	Statement	 
>4297	Statement	 
>4298	Statement	 
>4299	Statement	 
>4300	IdentifierDeclStatement	 
>4301	IdentifierDecl	path_stat
>4302	Identifier	path_stat
>4303	IdentifierDeclType	struct stat
>4304	Statement	 
>4305	Statement	 
>4327	FunctionDef	hard_link_count (const path & p , system 
>4328	ParameterList	const path & p , system 
>4329	Parameter	 
>4330	Identifier	ec
>4331	ParameterType	system 
>4332	Parameter	 
>4333	Identifier	p
>4334	ParameterType	const path &
>4335	ReturnType	BOOST_FILESYSTEM_DECL boost 
>4336	CompoundStatement	 
>4337	ExpressionStatement	 
>4338	RelationalExpression	static_cast < boost 
>4339	RelationalExpression	boost 
>4340	MemberAccess	path_stat . st_nlink
>4341	Identifier	st_nlink
>4342	Identifier	path_stat
>4343	Identifier	boost 
>4344	Identifier	static_cast
>4345	Statement	 
>4346	Statement	 
>4347	Statement	 
>4348	Statement	 
>4349	Statement	 
>4350	Statement	 
>4351	Statement	 
>4352	Statement	 
>4353	Statement	 
>4354	Statement	 
>4355	Statement	 
>4356	Statement	 
>4357	Statement	 
>4358	Statement	 
>4359	Statement	 
>4360	Statement	 
>4361	Statement	 
>4362	Statement	 
>4363	Statement	 
>4364	Statement	 
>4365	Statement	 
>4366	Statement	 
>4367	Statement	 
>4368	Statement	 
>4369	Statement	 
>4370	Statement	 
>4371	Statement	 
>4372	Statement	 
>4373	Statement	 
>4374	Statement	 
>4375	Statement	 
>4376	Statement	 
>4377	Statement	 
>4378	Statement	 
>4379	Statement	 
>4380	Statement	 
>4381	IdentifierDeclStatement	 
>4382	IdentifierDecl	path_stat
>4383	Identifier	path_stat
>4384	IdentifierDeclType	struct stat
>4385	Statement	 
>4386	Statement	 
>4393	FunctionDef	initial_path (error_code * ec)
>4394	ParameterList	error_code * ec
>4395	Parameter	 
>4396	Identifier	ec
>4397	ParameterType	error_code *
>4398	ReturnType	BOOST_FILESYSTEM_DECL path
>4399	CompoundStatement	 
>4400	ReturnStatement	 
>4401	Identifier	init_path
>4402	IfStatement	if ( init_path . empty ( ) )
>4403	ElseStatement	else
>4404	IfStatement	if ( ec != 0 )
>4405	ExpressionStatement	 
>4406	CallExpression	ec -> clear ( )
>4407	ArgumentList	 
>4408	Callee	ec -> clear
>4409	PtrMemberAccess	ec -> clear
>4410	Identifier	clear
>4411	Identifier	ec
>4412	Condition	 
>4413	EqualityExpression	ec != 0
>4414	PrimaryExpression	0
>4415	Identifier	ec
>4416	ExpressionStatement	 
>4417	AssignmentExpr	init_path = current_path ( ec )
>4418	CallExpression	current_path ( ec )
>4419	ArgumentList	ec
>4420	Argument	ec
>4421	Identifier	ec
>4422	Callee	current_path
>4423	Identifier	current_path
>4424	Identifier	init_path
>4425	Condition	 
>4426	CallExpression	init_path . empty ( )
>4427	ArgumentList	 
>4428	Callee	init_path . empty
>4429	MemberAccess	init_path . empty
>4430	Identifier	empty
>4431	Identifier	init_path
>4432	IdentifierDeclStatement	 
>4433	IdentifierDecl	init_path
>4434	Identifier	init_path
>4435	IdentifierDeclType	path
>4436	Statement	 
>4444	FunctionDef	is_empty (const path & p , system 
>4445	ParameterList	const path & p , system 
>4446	Parameter	 
>4447	Identifier	ec
>4448	ParameterType	system 
>4449	Parameter	 
>4450	Identifier	p
>4451	ParameterType	const path &
>4452	ReturnType	BOOST_FILESYSTEM_DECL bool
>4453	CompoundStatement	 
>4454	ReturnStatement	 
>4455	ConditionalExpression	S_ISDIR ( path_stat . st_mode ) ? is_empty_directory ( p ) 
>4456	EqualityExpression	path_stat . st_size == 0
>4457	PrimaryExpression	0
>4458	MemberAccess	path_stat . st_size
>4459	Identifier	st_size
>4460	Identifier	path_stat
>4461	CallExpression	is_empty_directory ( p )
>4462	ArgumentList	p
>4463	Argument	p
>4464	Identifier	p
>4465	Callee	is_empty_directory
>4466	Identifier	is_empty_directory
>4467	Condition	S_ISDIR ( path_stat . st_mode )
>4468	CallExpression	S_ISDIR ( path_stat . st_mode )
>4469	ArgumentList	path_stat . st_mode
>4470	Argument	path_stat . st_mode
>4471	MemberAccess	path_stat . st_mode
>4472	Identifier	st_mode
>4473	Identifier	path_stat
>4474	Callee	S_ISDIR
>4475	Identifier	S_ISDIR
>4476	ReturnStatement	 
>4477	Identifier	false
>4478	Statement	 
>4479	Statement	 
>4480	Statement	 
>4481	Statement	 
>4482	Statement	 
>4483	Statement	 
>4484	Statement	 
>4485	Statement	 
>4486	Statement	 
>4487	Statement	 
>4488	Statement	 
>4489	Statement	 
>4490	Statement	 
>4491	Statement	 
>4492	Statement	 
>4493	Statement	 
>4494	Statement	 
>4495	Statement	 
>4496	Statement	 
>4497	Statement	 
>4498	Statement	 
>4499	Statement	 
>4500	Statement	 
>4501	Statement	 
>4502	Statement	 
>4503	Statement	 
>4504	IdentifierDeclStatement	 
>4505	IdentifierDecl	path_stat
>4506	Identifier	path_stat
>4507	IdentifierDeclType	struct stat
>4508	Statement	 
>4509	Statement	 
>4521	FunctionDef	last_write_time (const path & p , system 
>4522	ParameterList	const path & p , system 
>4523	Parameter	 
>4524	Identifier	ec
>4525	ParameterType	system 
>4526	Parameter	 
>4527	Identifier	p
>4528	ParameterType	const path &
>4529	ReturnType	BOOST_FILESYSTEM_DECL std 
>4530	CompoundStatement	 
>4531	ReturnStatement	 
>4532	MemberAccess	path_stat . st_mtime
>4533	Identifier	st_mtime
>4534	Identifier	path_stat
>4535	ReturnStatement	 
>4536	CallExpression	std 
>4537	ArgumentList	- 1
>4538	Argument	- 1
>4539	UnaryOp	- 1
>4540	PrimaryExpression	1
>4541	UnaryOperator	-
>4542	Callee	std 
>4543	Identifier	std 
>4544	Statement	 
>4545	Statement	 
>4546	Statement	 
>4547	Statement	 
>4548	Statement	 
>4549	Statement	 
>4550	Statement	 
>4551	Statement	 
>4552	Statement	 
>4553	Statement	 
>4554	Statement	 
>4555	Statement	 
>4556	Statement	 
>4557	Statement	 
>4558	Statement	 
>4559	Statement	 
>4560	Statement	 
>4561	Statement	 
>4562	Statement	 
>4563	Statement	 
>4564	Statement	 
>4565	Statement	 
>4566	Statement	 
>4567	Statement	 
>4568	Statement	 
>4569	Statement	 
>4570	IdentifierDeclStatement	 
>4571	IdentifierDecl	path_stat
>4572	Identifier	path_stat
>4573	IdentifierDeclType	struct stat
>4574	Statement	 
>4575	Statement	 
>4584	FunctionDef	last_write_time (const path & p , const std 
>4585	ParameterList	const path & p , const std 
>4586	Parameter	 
>4587	Identifier	ec
>4588	ParameterType	system 
>4589	Parameter	 
>4590	Identifier	new_time
>4591	ParameterType	const std 
>4592	Parameter	 
>4593	Identifier	p
>4594	ParameterType	const path &
>4595	ReturnType	BOOST_FILESYSTEM_DECL void
>4596	CompoundStatement	 
>4597	ExpressionStatement	 
>4598	Statement	 
>4599	Statement	 
>4600	Statement	 
>4601	Statement	 
>4602	Statement	 
>4603	Statement	 
>4604	Statement	 
>4605	Statement	 
>4606	Statement	 
>4607	Statement	 
>4608	Statement	 
>4609	Statement	 
>4610	Statement	 
>4611	Statement	 
>4612	Statement	 
>4613	Statement	 
>4614	Statement	 
>4615	Statement	 
>4616	Statement	 
>4617	Statement	 
>4618	Statement	 
>4619	Statement	 
>4620	Statement	 
>4621	ExpressionStatement	 
>4622	AssignmentExpr	buf . modtime = new_time
>4623	Identifier	new_time
>4624	MemberAccess	buf . modtime
>4625	Identifier	modtime
>4626	Identifier	buf
>4627	ExpressionStatement	 
>4628	AssignmentExpr	buf . actime = path_stat . st_atime
>4629	MemberAccess	path_stat . st_atime
>4630	Identifier	st_atime
>4631	Identifier	path_stat
>4632	MemberAccess	buf . actime
>4633	Identifier	actime
>4634	Identifier	buf
>4635	IdentifierDeclStatement	 
>4636	IdentifierDecl	buf
>4637	Identifier	buf
>4638	IdentifierDeclType	utimbuf
>4639	Statement	 
>4640	ReturnStatement	 
>4641	Statement	 
>4642	Statement	 
>4643	Statement	 
>4644	Statement	 
>4645	Statement	 
>4646	Statement	 
>4647	Statement	 
>4648	Statement	 
>4649	Statement	 
>4650	Statement	 
>4651	Statement	 
>4652	Statement	 
>4653	Statement	 
>4654	Statement	 
>4655	Statement	 
>4656	Statement	 
>4657	Statement	 
>4658	Statement	 
>4659	Statement	 
>4660	Statement	 
>4661	Statement	 
>4662	Statement	 
>4663	Statement	 
>4664	Statement	 
>4665	Statement	 
>4666	Statement	 
>4667	IdentifierDeclStatement	 
>4668	IdentifierDecl	path_stat
>4669	Identifier	path_stat
>4670	IdentifierDeclType	struct stat
>4671	Statement	 
>4672	Statement	 
>4686	FunctionDef	mode_cast (perms prms)
>4687	ParameterList	perms prms
>4688	Parameter	 
>4689	Identifier	prms
>4690	ParameterType	perms
>4691	ReturnType	inline mode_t
>4692	CompoundStatement	 
>4693	ReturnStatement	 
>4694	BitAndExpression	prms & active_bits
>4695	Identifier	active_bits
>4696	Identifier	prms
>4702	FunctionDef	permissions (const path & p , perms prms , system 
>4703	ParameterList	const path & p , perms prms , system 
>4704	Parameter	 
>4705	Identifier	ec
>4706	ParameterType	system 
>4707	Parameter	 
>4708	Identifier	prms
>4709	ParameterType	perms
>4710	Parameter	 
>4711	Identifier	p
>4712	ParameterType	const path &
>4713	ReturnType	endif BOOST_FILESYSTEM_DECL void
>4714	CompoundStatement	 
>4715	Statement	 
>4716	ExpressionStatement	 
>4717	Statement	 
>4718	Statement	 
>4719	Statement	 
>4720	Statement	 
>4721	Statement	 
>4722	Statement	 
>4723	Statement	 
>4724	Statement	 
>4725	Statement	 
>4726	Statement	 
>4727	Statement	 
>4728	Statement	 
>4729	Statement	 
>4730	Statement	 
>4731	Statement	 
>4732	Statement	 
>4733	Statement	 
>4734	Statement	 
>4735	Statement	 
>4736	Statement	 
>4737	Statement	 
>4738	Statement	 
>4739	IfStatement	if ( prms & add_perms )
>4740	ElseStatement	else
>4741	IfStatement	if ( prms & remove_perms )
>4742	ElseStatement	else
>4743	IfStatement	if ( prms & ( owner_write | group_write | others_write ) )
>4744	ElseStatement	else
>4745	ExpressionStatement	 
>4746	AssignmentExpr	attr |= FILE_ATTRIBUTE_READONLY
>4747	Identifier	FILE_ATTRIBUTE_READONLY
>4748	Identifier	attr
>4749	ExpressionStatement	 
>4750	AssignmentExpr	attr &= ~FILE_ATTRIBUTE_READONLY
>4751	Identifier	~FILE_ATTRIBUTE_READONLY
>4752	Identifier	attr
>4753	Condition	 
>4754	BitAndExpression	prms & ( owner_write | group_write | others_write )
>4755	InclusiveOrExpression	owner_write | group_write | others_write
>4756	InclusiveOrExpression	group_write | others_write
>4757	Identifier	others_write
>4758	Identifier	group_write
>4759	Identifier	owner_write
>4760	Identifier	prms
>4761	ExpressionStatement	 
>4762	AssignmentExpr	attr |= FILE_ATTRIBUTE_READONLY
>4763	Identifier	FILE_ATTRIBUTE_READONLY
>4764	Identifier	attr
>4765	Condition	 
>4766	BitAndExpression	prms & remove_perms
>4767	Identifier	remove_perms
>4768	Identifier	prms
>4769	ExpressionStatement	 
>4770	AssignmentExpr	attr &= ~FILE_ATTRIBUTE_READONLY
>4771	Identifier	~FILE_ATTRIBUTE_READONLY
>4772	Identifier	attr
>4773	Condition	 
>4774	BitAndExpression	prms & add_perms
>4775	Identifier	add_perms
>4776	Identifier	prms
>4777	IfStatement	if ( error ( attr == 0 , p , ec , \"boost
>4778	ReturnStatement	 
>4779	Condition	 
>4780	CallExpression	error ( attr == 0 , p , ec , \"boost
>4781	ArgumentList	attr == 0
>4782	Argument	\"boost
>4783	PrimaryExpression	\"boost
>4784	Argument	ec
>4785	Identifier	ec
>4786	Argument	p
>4787	Identifier	p
>4788	Argument	attr == 0
>4789	EqualityExpression	attr == 0
>4790	PrimaryExpression	0
>4791	Identifier	attr
>4792	Callee	error
>4793	Identifier	error
>4794	ExpressionStatement	 
>4795	CallExpression	GetFileAttributesW ( p . c_str ( ) )
>4796	ArgumentList	p . c_str ( )
>4797	Argument	p . c_str ( )
>4798	CallExpression	p . c_str ( )
>4799	ArgumentList	 
>4800	Callee	p . c_str
>4801	MemberAccess	p . c_str
>4802	Identifier	c_str
>4803	Identifier	p
>4804	Callee	GetFileAttributesW
>4805	Identifier	GetFileAttributesW
>4806	Statement	 
>4807	Statement	 
>4808	Statement	 
>4809	Statement	 
>4810	CompoundStatement	 
>4811	IfStatement	if ( ec == 0 )
>4812	ElseStatement	else
>4813	ExpressionStatement	 
>4814	CallExpression	ec -> assign ( errno , system 
>4815	ArgumentList	errno
>4816	Argument	system 
>4817	CallExpression	system 
>4818	ArgumentList	 
>4819	Callee	system 
>4820	Identifier	system 
>4821	Argument	errno
>4822	Identifier	errno
>4823	Callee	ec -> assign
>4824	PtrMemberAccess	ec -> assign
>4825	Identifier	assign
>4826	Identifier	ec
>4827	ExpressionStatement	 
>4828	CallExpression	BOOST_FILESYSTEM_THROW ( filesystem_error ( \"boost
>4829	ArgumentList	filesystem_error ( \"boost
>4830	Argument	filesystem_error ( \"boost
>4831	CallExpression	filesystem_error ( \"boost
>4832	ArgumentList	\"boost
>4833	Argument	error_code ( errno , system 
>4834	CallExpression	error_code ( errno , system 
>4835	ArgumentList	errno
>4836	Argument	system 
>4837	CallExpression	system 
>4838	ArgumentList	 
>4839	Callee	system 
>4840	Identifier	system 
>4841	Argument	errno
>4842	Identifier	errno
>4843	Callee	error_code
>4844	Identifier	error_code
>4845	Argument	p
>4846	Identifier	p
>4847	Argument	\"boost
>4848	PrimaryExpression	\"boost
>4849	Callee	filesystem_error
>4850	Identifier	filesystem_error
>4851	Callee	BOOST_FILESYSTEM_THROW
>4852	Identifier	BOOST_FILESYSTEM_THROW
>4853	Condition	 
>4854	EqualityExpression	ec == 0
>4855	PrimaryExpression	0
>4856	Identifier	ec
>4857	Statement	 
>4858	Statement	 
>4859	Statement	 
>4860	Statement	 
>4861	Statement	 
>4862	Statement	 
>4863	Statement	 
>4864	Statement	 
>4865	Statement	 
>4866	Statement	 
>4867	Statement	 
>4868	Statement	 
>4869	Statement	 
>4870	Statement	 
>4871	Statement	 
>4872	Statement	 
>4873	Statement	 
>4874	Statement	 
>4875	Statement	 
>4876	Statement	 
>4877	Label	 
>4878	Statement	 
>4879	Statement	 
>4880	Statement	 
>4881	Statement	 
>4882	Statement	 
>4883	Statement	 
>4884	Statement	 
>4885	Statement	 
>4886	Statement	 
>4887	Statement	 
>4888	Statement	 
>4889	Statement	 
>4890	Statement	 
>4891	Statement	 
>4892	Statement	 
>4893	Statement	 
>4894	Statement	 
>4895	Statement	 
>4896	Statement	 
>4897	Statement	 
>4898	Statement	 
>4899	Statement	 
>4900	Statement	 
>4901	Statement	 
>4902	Statement	 
>4903	Statement	 
>4904	Statement	 
>4905	Statement	 
>4906	Statement	 
>4907	Statement	 
>4908	Statement	 
>4909	Statement	 
>4910	Statement	 
>4911	Statement	 
>4912	Statement	 
>4913	Statement	 
>4914	Statement	 
>4915	Statement	 
>4916	Statement	 
>4917	Statement	 
>4918	Statement	 
>4919	Statement	 
>4920	Statement	 
>4921	Statement	 
>4922	Statement	 
>4923	Statement	 
>4924	Statement	 
>4925	Statement	 
>4926	Statement	 
>4927	Statement	 
>4928	Statement	 
>4929	Statement	 
>4930	Statement	 
>4931	Statement	 
>4932	Statement	 
>4933	Statement	 
>4934	Statement	 
>4935	Statement	 
>4936	Statement	 
>4937	Statement	 
>4938	Statement	 
>4939	Statement	 
>4940	Statement	 
>4941	Statement	 
>4942	Statement	 
>4943	Statement	 
>4944	IfStatement	if ( prms & add_perms )
>4945	ElseStatement	else
>4946	IfStatement	if ( prms & remove_perms )
>4947	ElseStatement	else
>4948	Statement	 
>4949	ExpressionStatement	 
>4950	AssignmentExpr	prms = current_status . permissions ( ) & ~prms
>4951	BitAndExpression	current_status . permissions ( ) & ~prms
>4952	Identifier	~prms
>4953	CallExpression	current_status . permissions ( )
>4954	ArgumentList	 
>4955	Callee	current_status . permissions
>4956	MemberAccess	current_status . permissions
>4957	Identifier	permissions
>4958	Identifier	current_status
>4959	Identifier	prms
>4960	Condition	 
>4961	BitAndExpression	prms & remove_perms
>4962	Identifier	remove_perms
>4963	Identifier	prms
>4964	ExpressionStatement	 
>4965	AssignmentExpr	prms |= current_status . permissions ( )
>4966	CallExpression	current_status . permissions ( )
>4967	ArgumentList	 
>4968	Callee	current_status . permissions
>4969	MemberAccess	current_status . permissions
>4970	Identifier	permissions
>4971	Identifier	current_status
>4972	Identifier	prms
>4973	Condition	 
>4974	BitAndExpression	prms & add_perms
>4975	Identifier	add_perms
>4976	Identifier	prms
>4977	IfStatement	if ( local_ec )
>4978	ElseStatement	else
>4979	IfStatement	if ( ! ( ! ( ( prms & ( add_perms | remove_perms ) ) ) || ( prms & ( owner_write | group_write | others_write ) ) ) )
>4980	ReturnStatement	 
>4981	Condition	 
>4982	UnaryOp	! ( ! ( ( prms & ( add_perms | remove_perms ) ) ) || ( prms & ( owner_write | group_write | others_write ) ) )
>4983	OrExpression	! ( ( prms & ( add_perms | remove_perms ) ) ) || ( prms & ( owner_write | group_write | others_write ) )
>4984	BitAndExpression	prms & ( owner_write | group_write | others_write )
>4985	InclusiveOrExpression	owner_write | group_write | others_write
>4986	InclusiveOrExpression	group_write | others_write
>4987	Identifier	others_write
>4988	Identifier	group_write
>4989	Identifier	owner_write
>4990	Identifier	prms
>4991	UnaryOp	! ( ( prms & ( add_perms | remove_perms ) ) )
>4992	BitAndExpression	prms & ( add_perms | remove_perms )
>4993	InclusiveOrExpression	add_perms | remove_perms
>4994	Identifier	remove_perms
>4995	Identifier	add_perms
>4996	Identifier	prms
>4997	UnaryOperator	!
>4998	UnaryOperator	!
>4999	CompoundStatement	 
>5000	ReturnStatement	 
>5001	IfStatement	if ( ec == 0 )
>5002	ElseStatement	else
>5003	ExpressionStatement	 
>5004	AssignmentExpr	* ec = local_ec
>5005	Identifier	local_ec
>5006	UnaryOp	* ec
>5007	Identifier	ec
>5008	UnaryOperator	*
>5009	ExpressionStatement	 
>5010	CallExpression	BOOST_FILESYSTEM_THROW ( filesystem_error ( \"boost
>5011	ArgumentList	filesystem_error ( \"boost
>5012	Argument	filesystem_error ( \"boost
>5013	CallExpression	filesystem_error ( \"boost
>5014	ArgumentList	\"boost
>5015	Argument	local_ec
>5016	Identifier	local_ec
>5017	Argument	p
>5018	Identifier	p
>5019	Argument	\"boost
>5020	PrimaryExpression	\"boost
>5021	Callee	filesystem_error
>5022	Identifier	filesystem_error
>5023	Callee	BOOST_FILESYSTEM_THROW
>5024	Identifier	BOOST_FILESYSTEM_THROW
>5025	Condition	 
>5026	EqualityExpression	ec == 0
>5027	PrimaryExpression	0
>5028	Identifier	ec
>5029	Condition	 
>5030	Identifier	local_ec
>5031	IdentifierDeclStatement	 
>5032	IdentifierDecl	current_status ( ( prms & symlink_perms ) ? fs 
>5033	ConditionalExpression	( prms & symlink_perms ) ? fs 
>5034	CallExpression	fs 
>5035	ArgumentList	p
>5036	Argument	local_ec
>5037	Identifier	local_ec
>5038	Argument	p
>5039	Identifier	p
>5040	Callee	fs 
>5041	Identifier	fs 
>5042	CallExpression	fs 
>5043	ArgumentList	p
>5044	Argument	local_ec
>5045	Identifier	local_ec
>5046	Argument	p
>5047	Identifier	p
>5048	Callee	fs 
>5049	Identifier	fs 
>5050	Condition	prms & symlink_perms
>5051	BitAndExpression	prms & symlink_perms
>5052	Identifier	symlink_perms
>5053	Identifier	prms
>5054	Identifier	current_status
>5055	IdentifierDeclType	file_status
>5056	IdentifierDeclStatement	 
>5057	IdentifierDecl	local_ec
>5058	Identifier	local_ec
>5059	IdentifierDeclType	ifdef BOOST_POSIX_API error_code
>5060	IfStatement	if ( ( prms & add_perms ) && ( prms & remove_perms ) )
>5061	ReturnStatement	 
>5062	Condition	 
>5063	AndExpression	( prms & add_perms ) && ( prms & remove_perms )
>5064	BitAndExpression	prms & remove_perms
>5065	Identifier	remove_perms
>5066	Identifier	prms
>5067	BitAndExpression	prms & add_perms
>5068	Identifier	add_perms
>5069	Identifier	prms
>5070	ExpressionStatement	 
>5071	CallExpression	BOOST_ASSERT_MSG ( ! ( ( prms & add_perms ) && ( prms & remove_perms ) ) , \"add_perms and remove_perms are mutually \
>5072	ArgumentList	! ( ( prms & add_perms ) && ( prms & remove_perms ) )
>5073	Argument	\"add_perms and remove_perms are mutually exclusive\"
>5074	PrimaryExpression	\"add_perms and remove_perms are mutually exclusive\"
>5075	Argument	! ( ( prms & add_perms ) && ( prms & remove_perms ) )
>5076	UnaryOp	! ( ( prms & add_perms ) && ( prms & remove_perms ) )
>5077	AndExpression	( prms & add_perms ) && ( prms & remove_perms )
>5078	BitAndExpression	prms & remove_perms
>5079	Identifier	remove_perms
>5080	Identifier	prms
>5081	BitAndExpression	prms & add_perms
>5082	Identifier	add_perms
>5083	Identifier	prms
>5084	UnaryOperator	!
>5085	Callee	BOOST_ASSERT_MSG
>5086	Identifier	BOOST_ASSERT_MSG
>5113	FunctionDef	read_symlink (const path & p , system 
>5114	ParameterList	const path & p , system 
>5115	Parameter	 
>5116	Identifier	ec
>5117	ParameterType	system 
>5118	Parameter	 
>5119	Identifier	p
>5120	ParameterType	const path &
>5121	ReturnType	BOOST_FILESYSTEM_DECL path
>5122	CompoundStatement	 
>5123	Statement	 
>5124	Statement	 
>5125	IdentifierDeclStatement	 
>5126	IdentifierDecl	symlink_path
>5127	Identifier	symlink_path
>5128	IdentifierDeclType	path
>5135	FunctionDef	remove (const path & p , error_code * ec)
>5136	ParameterList	const path & p , error_code * ec
>5137	Parameter	 
>5138	Identifier	ec
>5139	ParameterType	error_code *
>5140	Parameter	 
>5141	Identifier	p
>5142	ParameterType	const path &
>5143	ReturnType	BOOST_FILESYSTEM_DECL bool
>5144	CompoundStatement	 
>5145	ReturnStatement	 
>5146	CallExpression	remove_file_or_directory ( p , type , ec )
>5147	ArgumentList	p
>5148	Argument	ec
>5149	Identifier	ec
>5150	Argument	type
>5151	Identifier	type
>5152	Argument	p
>5153	Identifier	p
>5154	Callee	remove_file_or_directory
>5155	Identifier	remove_file_or_directory
>5156	IfStatement	if ( error ( type == file_type 
>5157	ReturnStatement	 
>5158	Identifier	false
>5159	Condition	 
>5160	CallExpression	error ( type == file_type 
>5161	ArgumentList	type == file_type 
>5162	Argument	\"boost
>5163	PrimaryExpression	\"boost
>5164	Argument	ec
>5165	Identifier	ec
>5166	Argument	p
>5167	Identifier	p
>5168	Argument	tmp_ec
>5169	Identifier	tmp_ec
>5170	Argument	type == file_type 
>5171	EqualityExpression	type == file_type 
>5172	Identifier	file_type 
>5173	Identifier	type
>5174	Callee	error
>5175	Identifier	error
>5176	IdentifierDeclStatement	 
>5177	IdentifierDecl	type = query_file_type ( p , & tmp_ec )
>5178	AssignmentExpr	type = query_file_type ( p , & tmp_ec )
>5179	CallExpression	query_file_type ( p , & tmp_ec )
>5180	ArgumentList	p
>5181	Argument	& tmp_ec
>5182	UnaryOp	& tmp_ec
>5183	Identifier	tmp_ec
>5184	UnaryOperator	&
>5185	Argument	p
>5186	Identifier	p
>5187	Callee	query_file_type
>5188	Identifier	query_file_type
>5189	Identifier	type
>5190	Identifier	type
>5191	IdentifierDeclType	file_type
>5192	IdentifierDeclStatement	 
>5193	IdentifierDecl	tmp_ec
>5194	Identifier	tmp_ec
>5195	IdentifierDeclType	error_code
>5209	FunctionDef	remove_all (const path & p , error_code * ec)
>5210	ParameterList	const path & p , error_code * ec
>5211	Parameter	 
>5212	Identifier	ec
>5213	ParameterType	error_code *
>5214	Parameter	 
>5215	Identifier	p
>5216	ParameterType	const path &
>5217	ReturnType	BOOST_FILESYSTEM_DECL boost 
>5218	CompoundStatement	 
>5219	ReturnStatement	 
>5220	ConditionalExpression	( type != file_type 
>5221	PrimaryExpression	0
>5222	CallExpression	remove_all_aux ( p , type , ec )
>5223	ArgumentList	p
>5224	Argument	ec
>5225	Identifier	ec
>5226	Argument	type
>5227	Identifier	type
>5228	Argument	p
>5229	Identifier	p
>5230	Callee	remove_all_aux
>5231	Identifier	remove_all_aux
>5232	Condition	type != file_type 
>5233	AndExpression	type != file_type 
>5234	EqualityExpression	type != file_type 
>5235	Identifier	file_type 
>5236	Identifier	type
>5237	EqualityExpression	type != file_type 
>5238	Identifier	file_type 
>5239	Identifier	type
>5240	IfStatement	if ( error ( type == file_type 
>5241	ReturnStatement	 
>5242	RelationalExpression	static_cast < boost 
>5243	RelationalExpression	boost 
>5244	UnaryOp	- 1
>5245	PrimaryExpression	1
>5246	UnaryOperator	-
>5247	Identifier	boost 
>5248	Identifier	static_cast
>5249	Condition	 
>5250	CallExpression	error ( type == file_type 
>5251	ArgumentList	type == file_type 
>5252	Argument	\"boost
>5253	PrimaryExpression	\"boost
>5254	Argument	ec
>5255	Identifier	ec
>5256	Argument	p
>5257	Identifier	p
>5258	Argument	tmp_ec
>5259	Identifier	tmp_ec
>5260	Argument	type == file_type 
>5261	EqualityExpression	type == file_type 
>5262	Identifier	file_type 
>5263	Identifier	type
>5264	Callee	error
>5265	Identifier	error
>5266	IdentifierDeclStatement	 
>5267	IdentifierDecl	type = query_file_type ( p , & tmp_ec )
>5268	AssignmentExpr	type = query_file_type ( p , & tmp_ec )
>5269	CallExpression	query_file_type ( p , & tmp_ec )
>5270	ArgumentList	p
>5271	Argument	& tmp_ec
>5272	UnaryOp	& tmp_ec
>5273	Identifier	tmp_ec
>5274	UnaryOperator	&
>5275	Argument	p
>5276	Identifier	p
>5277	Callee	query_file_type
>5278	Identifier	query_file_type
>5279	Identifier	type
>5280	Identifier	type
>5281	IdentifierDeclType	file_type
>5282	IdentifierDeclStatement	 
>5283	IdentifierDecl	tmp_ec
>5284	Identifier	tmp_ec
>5285	IdentifierDeclType	error_code
>5301	FunctionDef	rename (const path & old_p , const path & new_p , error_code * ec)
>5302	ParameterList	const path & old_p , const path & new_p , error_code * ec
>5303	Parameter	 
>5304	Identifier	ec
>5305	ParameterType	error_code *
>5306	Parameter	 
>5307	Identifier	new_p
>5308	ParameterType	const path &
>5309	Parameter	 
>5310	Identifier	old_p
>5311	ParameterType	const path &
>5312	ReturnType	BOOST_FILESYSTEM_DECL void
>5313	CompoundStatement	 
>5314	ExpressionStatement	 
>5315	CallExpression	error ( ! BOOST_MOVE_FILE ( old_p . c_str ( ) , new_p . c_str ( ) ) , old_p , new_p , ec , \"boost
>5316	ArgumentList	! BOOST_MOVE_FILE ( old_p . c_str ( ) , new_p . c_str ( ) )
>5317	Argument	\"boost
>5318	PrimaryExpression	\"boost
>5319	Argument	ec
>5320	Identifier	ec
>5321	Argument	new_p
>5322	Identifier	new_p
>5323	Argument	old_p
>5324	Identifier	old_p
>5325	Argument	! BOOST_MOVE_FILE ( old_p . c_str ( ) , new_p . c_str ( ) )
>5326	UnaryOp	! BOOST_MOVE_FILE ( old_p . c_str ( ) , new_p . c_str ( ) )
>5327	CallExpression	BOOST_MOVE_FILE ( old_p . c_str ( ) , new_p . c_str ( ) )
>5328	ArgumentList	old_p . c_str ( )
>5329	Argument	new_p . c_str ( )
>5330	CallExpression	new_p . c_str ( )
>5331	ArgumentList	 
>5332	Callee	new_p . c_str
>5333	MemberAccess	new_p . c_str
>5334	Identifier	c_str
>5335	Identifier	new_p
>5336	Argument	old_p . c_str ( )
>5337	CallExpression	old_p . c_str ( )
>5338	ArgumentList	 
>5339	Callee	old_p . c_str
>5340	MemberAccess	old_p . c_str
>5341	Identifier	c_str
>5342	Identifier	old_p
>5343	Callee	BOOST_MOVE_FILE
>5344	Identifier	BOOST_MOVE_FILE
>5345	UnaryOperator	!
>5346	Callee	error
>5347	Identifier	error
>5357	FunctionDef	resize_file (const path & p , uintmax_t size , system 
>5358	ParameterList	const path & p , uintmax_t size , system 
>5359	Parameter	 
>5360	Identifier	ec
>5361	ParameterType	system 
>5362	Parameter	 
>5363	Identifier	size
>5364	ParameterType	uintmax_t
>5365	Parameter	 
>5366	Identifier	p
>5367	ParameterType	const path &
>5368	ReturnType	BOOST_FILESYSTEM_DECL void
>5369	CompoundStatement	 
>5370	ExpressionStatement	 
>5371	CallExpression	error ( ! BOOST_RESIZE_FILE ( p . c_str ( ) , size ) , p , ec , \"boost
>5372	ArgumentList	! BOOST_RESIZE_FILE ( p . c_str ( ) , size )
>5373	Argument	\"boost
>5374	PrimaryExpression	\"boost
>5375	Argument	ec
>5376	Identifier	ec
>5377	Argument	p
>5378	Identifier	p
>5379	Argument	! BOOST_RESIZE_FILE ( p . c_str ( ) , size )
>5380	UnaryOp	! BOOST_RESIZE_FILE ( p . c_str ( ) , size )
>5381	CallExpression	BOOST_RESIZE_FILE ( p . c_str ( ) , size )
>5382	ArgumentList	p . c_str ( )
>5383	Argument	size
>5384	Identifier	size
>5385	Argument	p . c_str ( )
>5386	CallExpression	p . c_str ( )
>5387	ArgumentList	 
>5388	Callee	p . c_str
>5389	MemberAccess	p . c_str
>5390	Identifier	c_str
>5391	Identifier	p
>5392	Callee	BOOST_RESIZE_FILE
>5393	Identifier	BOOST_RESIZE_FILE
>5394	UnaryOperator	!
>5395	Callee	error
>5396	Identifier	error
>5405	FunctionDef	space (const path & p , error_code * ec)
>5406	ParameterList	const path & p , error_code * ec
>5407	Parameter	 
>5408	Identifier	ec
>5409	ParameterType	error_code *
>5410	Parameter	 
>5411	Identifier	p
>5412	ParameterType	const path &
>5413	ReturnType	BOOST_FILESYSTEM_DECL space_info
>5414	CompoundStatement	 
>5415	CompoundStatement	 
>5416	ExpressionStatement	 
>5417	AssignmentExpr	info . available = static_cast < boost 
>5418	RelationalExpression	static_cast < boost 
>5419	RelationalExpression	boost 
>5420	MultiplicativeExpression	( vfs . f_bavail ) * BOOST_STATVFS_F_FRSIZE
>5421	Identifier	BOOST_STATVFS_F_FRSIZE
>5422	MemberAccess	vfs . f_bavail
>5423	Identifier	f_bavail
>5424	Identifier	vfs
>5425	Identifier	boost 
>5426	Identifier	static_cast
>5427	MemberAccess	info . available
>5428	Identifier	available
>5429	Identifier	info
>5430	ExpressionStatement	 
>5431	AssignmentExpr	info . free = static_cast < boost 
>5432	RelationalExpression	static_cast < boost 
>5433	RelationalExpression	boost 
>5434	MultiplicativeExpression	( vfs . f_bfree ) * BOOST_STATVFS_F_FRSIZE
>5435	Identifier	BOOST_STATVFS_F_FRSIZE
>5436	MemberAccess	vfs . f_bfree
>5437	Identifier	f_bfree
>5438	Identifier	vfs
>5439	Identifier	boost 
>5440	Identifier	static_cast
>5441	MemberAccess	info . free
>5442	Identifier	free
>5443	Identifier	info
>5444	ExpressionStatement	 
>5445	AssignmentExpr	info . capacity = static_cast < boost 
>5446	RelationalExpression	static_cast < boost 
>5447	RelationalExpression	boost 
>5448	MultiplicativeExpression	( vfs . f_blocks ) * BOOST_STATVFS_F_FRSIZE
>5449	Identifier	BOOST_STATVFS_F_FRSIZE
>5450	MemberAccess	vfs . f_blocks
>5451	Identifier	f_blocks
>5452	Identifier	vfs
>5453	Identifier	boost 
>5454	Identifier	static_cast
>5455	MemberAccess	info . capacity
>5456	Identifier	capacity
>5457	Identifier	info
>5458	Statement	 
>5459	Statement	 
>5460	Statement	 
>5461	Statement	 
>5462	Statement	 
>5463	Statement	 
>5464	Statement	 
>5465	Statement	 
>5466	Statement	 
>5467	Statement	 
>5468	Statement	 
>5469	Statement	 
>5470	Statement	 
>5471	Statement	 
>5472	Statement	 
>5473	Statement	 
>5474	Statement	 
>5475	Statement	 
>5476	Statement	 
>5477	Statement	 
>5478	Statement	 
>5479	Statement	 
>5480	Statement	 
>5481	Statement	 
>5482	Statement	 
>5483	Statement	 
>5484	Statement	 
>5485	IdentifierDeclStatement	 
>5486	IdentifierDecl	info
>5487	Identifier	info
>5488	IdentifierDeclType	space_info
>5489	IdentifierDeclStatement	 
>5490	IdentifierDecl	vfs
>5491	Identifier	vfs
>5492	IdentifierDeclType	struct BOOST_STATVFS
>5493	Statement	 
>5494	Statement	 
>5511	FunctionDef	status (const path & p , error_code * ec)
>5512	ParameterList	const path & p , error_code * ec
>5513	Parameter	 
>5514	Identifier	ec
>5515	ParameterType	error_code *
>5516	Parameter	 
>5517	Identifier	p
>5518	ParameterType	const path &
>5519	ReturnType	BOOST_FILESYSTEM_DECL file_status
>5520	CompoundStatement	 
>5521	Statement	 
>5522	ReturnStatement	 
>5523	ConditionalExpression	( attr & FILE_ATTRIBUTE_DIRECTORY ) ? file_status ( file_type 
>5524	CallExpression	file_status ( file_type 
>5525	ArgumentList	file_type 
>5526	Argument	make_permissions ( p , attr )
>5527	CallExpression	make_permissions ( p , attr )
>5528	ArgumentList	p
>5529	Argument	attr
>5530	Identifier	attr
>5531	Argument	p
>5532	Identifier	p
>5533	Callee	make_permissions
>5534	Identifier	make_permissions
>5535	Argument	file_type 
>5536	Identifier	file_type 
>5537	Callee	file_status
>5538	Identifier	file_status
>5539	CallExpression	file_status ( file_type 
>5540	ArgumentList	file_type 
>5541	Argument	make_permissions ( p , attr )
>5542	CallExpression	make_permissions ( p , attr )
>5543	ArgumentList	p
>5544	Argument	attr
>5545	Identifier	attr
>5546	Argument	p
>5547	Identifier	p
>5548	Callee	make_permissions
>5549	Identifier	make_permissions
>5550	Argument	file_type 
>5551	Identifier	file_type 
>5552	Callee	file_status
>5553	Identifier	file_status
>5554	Condition	attr & FILE_ATTRIBUTE_DIRECTORY
>5555	BitAndExpression	attr & FILE_ATTRIBUTE_DIRECTORY
>5556	Identifier	FILE_ATTRIBUTE_DIRECTORY
>5557	Identifier	attr
>5558	IfStatement	if ( ec != 0 )
>5559	ExpressionStatement	 
>5560	CallExpression	ec -> clear ( )
>5561	ArgumentList	 
>5562	Callee	ec -> clear
>5563	PtrMemberAccess	ec -> clear
>5564	Identifier	clear
>5565	Identifier	ec
>5566	Condition	 
>5567	EqualityExpression	ec != 0
>5568	PrimaryExpression	0
>5569	Identifier	ec
>5570	IfStatement	if ( attr & FILE_ATTRIBUTE_REPARSE_POINT )
>5571	CompoundStatement	 
>5572	IfStatement	if ( ! is_reparse_point_a_symlink ( p ) )
>5573	ReturnStatement	 
>5574	CallExpression	file_status ( file_type 
>5575	ArgumentList	file_type 
>5576	Argument	make_permissions ( p , attr )
>5577	CallExpression	make_permissions ( p , attr )
>5578	ArgumentList	p
>5579	Argument	attr
>5580	Identifier	attr
>5581	Argument	p
>5582	Identifier	p
>5583	Callee	make_permissions
>5584	Identifier	make_permissions
>5585	Argument	file_type 
>5586	Identifier	file_type 
>5587	Callee	file_status
>5588	Identifier	file_status
>5589	Condition	 
>5590	UnaryOp	! is_reparse_point_a_symlink ( p )
>5591	CallExpression	is_reparse_point_a_symlink ( p )
>5592	ArgumentList	p
>5593	Argument	p
>5594	Identifier	p
>5595	Callee	is_reparse_point_a_symlink
>5596	Identifier	is_reparse_point_a_symlink
>5597	UnaryOperator	!
>5598	IfStatement	if ( h . handle == INVALID_HANDLE_VALUE )
>5599	CompoundStatement	 
>5600	ReturnStatement	 
>5601	CallExpression	process_status_failure ( p , ec )
>5602	ArgumentList	p
>5603	Argument	ec
>5604	Identifier	ec
>5605	Argument	p
>5606	Identifier	p
>5607	Callee	process_status_failure
>5608	Identifier	process_status_failure
>5609	Condition	 
>5610	EqualityExpression	h . handle == INVALID_HANDLE_VALUE
>5611	Identifier	INVALID_HANDLE_VALUE
>5612	MemberAccess	h . handle
>5613	Identifier	handle
>5614	Identifier	h
>5615	IdentifierDeclStatement	 
>5616	IdentifierDecl	h ( create_file_handle ( p . c_str ( ) , 0 , FILE_SHARE_DELETE | FILE_SHARE_READ | FILE_SHARE_WRITE , 0 , OPEN_EXISTING , \
>5617	CallExpression	create_file_handle ( p . c_str ( ) , 0 , FILE_SHARE_DELETE | FILE_SHARE_READ | FILE_SHARE_WRITE , 0 , OPEN_EXISTING , \
>5618	ArgumentList	p . c_str ( )
>5619	Argument	0
>5620	PrimaryExpression	0
>5621	Argument	FILE_FLAG_BACKUP_SEMANTICS
>5622	Identifier	FILE_FLAG_BACKUP_SEMANTICS
>5623	Argument	OPEN_EXISTING
>5624	Identifier	OPEN_EXISTING
>5625	Argument	0
>5626	PrimaryExpression	0
>5627	Argument	FILE_SHARE_DELETE | FILE_SHARE_READ | FILE_SHARE_WRITE
>5628	InclusiveOrExpression	FILE_SHARE_DELETE | FILE_SHARE_READ | FILE_SHARE_WRITE
>5629	InclusiveOrExpression	FILE_SHARE_READ | FILE_SHARE_WRITE
>5630	Identifier	FILE_SHARE_WRITE
>5631	Identifier	FILE_SHARE_READ
>5632	Identifier	FILE_SHARE_DELETE
>5633	Argument	0
>5634	PrimaryExpression	0
>5635	Argument	p . c_str ( )
>5636	CallExpression	p . c_str ( )
>5637	ArgumentList	 
>5638	Callee	p . c_str
>5639	MemberAccess	p . c_str
>5640	Identifier	c_str
>5641	Identifier	p
>5642	Callee	create_file_handle
>5643	Identifier	create_file_handle
>5644	Identifier	h
>5645	IdentifierDeclType	handle_wrapper
>5646	Condition	 
>5647	BitAndExpression	attr & FILE_ATTRIBUTE_REPARSE_POINT
>5648	Identifier	FILE_ATTRIBUTE_REPARSE_POINT
>5649	Identifier	attr
>5650	IfStatement	if ( attr == 0xFFFFFFFF )
>5651	CompoundStatement	 
>5652	ReturnStatement	 
>5653	CallExpression	process_status_failure ( p , ec )
>5654	ArgumentList	p
>5655	Argument	ec
>5656	Identifier	ec
>5657	Argument	p
>5658	Identifier	p
>5659	Callee	process_status_failure
>5660	Identifier	process_status_failure
>5661	Condition	 
>5662	EqualityExpression	attr == 0xFFFFFFFF
>5663	PrimaryExpression	0xFFFFFFFF
>5664	Identifier	attr
>5665	ExpressionStatement	 
>5666	Statement	 
>5667	Statement	 
>5668	Statement	 
>5669	Statement	 
>5670	Statement	 
>5671	Statement	 
>5672	Statement	 
>5673	Statement	 
>5674	Statement	 
>5675	Statement	 
>5676	Statement	 
>5677	Statement	 
>5678	ReturnStatement	 
>5679	CallExpression	fs 
>5680	ArgumentList	fs 
>5681	Argument	fs 
>5682	Identifier	fs 
>5683	Callee	fs 
>5684	Identifier	fs 
>5685	IfStatement	if ( S_ISSOCK ( path_stat . st_mode ) )
>5686	ElseStatement	else
>5687	Statement	 
>5688	ReturnStatement	 
>5689	CallExpression	fs 
>5690	ArgumentList	fs 
>5691	Argument	static_cast < perms > ( path_stat . st_mode ) & fs 
>5692	BitAndExpression	static_cast < perms > ( path_stat . st_mode ) & fs 
>5693	Identifier	fs 
>5694	RelationalExpression	static_cast < perms > ( path_stat . st_mode )
>5695	RelationalExpression	perms > ( path_stat . st_mode )
>5696	MemberAccess	path_stat . st_mode
>5697	Identifier	st_mode
>5698	Identifier	path_stat
>5699	Identifier	perms
>5700	Identifier	static_cast
>5701	Argument	fs 
>5702	Identifier	fs 
>5703	Callee	fs 
>5704	Identifier	fs 
>5705	Condition	 
>5706	CallExpression	S_ISSOCK ( path_stat . st_mode )
>5707	ArgumentList	path_stat . st_mode
>5708	Argument	path_stat . st_mode
>5709	MemberAccess	path_stat . st_mode
>5710	Identifier	st_mode
>5711	Identifier	path_stat
>5712	Callee	S_ISSOCK
>5713	Identifier	S_ISSOCK
>5714	IfStatement	if ( S_ISFIFO ( path_stat . st_mode ) )
>5715	ReturnStatement	 
>5716	CallExpression	fs 
>5717	ArgumentList	fs 
>5718	Argument	static_cast < perms > ( path_stat . st_mode ) & fs 
>5719	BitAndExpression	static_cast < perms > ( path_stat . st_mode ) & fs 
>5720	Identifier	fs 
>5721	RelationalExpression	static_cast < perms > ( path_stat . st_mode )
>5722	RelationalExpression	perms > ( path_stat . st_mode )
>5723	MemberAccess	path_stat . st_mode
>5724	Identifier	st_mode
>5725	Identifier	path_stat
>5726	Identifier	perms
>5727	Identifier	static_cast
>5728	Argument	fs 
>5729	Identifier	fs 
>5730	Callee	fs 
>5731	Identifier	fs 
>5732	Condition	 
>5733	CallExpression	S_ISFIFO ( path_stat . st_mode )
>5734	ArgumentList	path_stat . st_mode
>5735	Argument	path_stat . st_mode
>5736	MemberAccess	path_stat . st_mode
>5737	Identifier	st_mode
>5738	Identifier	path_stat
>5739	Callee	S_ISFIFO
>5740	Identifier	S_ISFIFO
>5741	IfStatement	if ( S_ISCHR ( path_stat . st_mode ) )
>5742	ReturnStatement	 
>5743	CallExpression	fs 
>5744	ArgumentList	fs 
>5745	Argument	static_cast < perms > ( path_stat . st_mode ) & fs 
>5746	BitAndExpression	static_cast < perms > ( path_stat . st_mode ) & fs 
>5747	Identifier	fs 
>5748	RelationalExpression	static_cast < perms > ( path_stat . st_mode )
>5749	RelationalExpression	perms > ( path_stat . st_mode )
>5750	MemberAccess	path_stat . st_mode
>5751	Identifier	st_mode
>5752	Identifier	path_stat
>5753	Identifier	perms
>5754	Identifier	static_cast
>5755	Argument	fs 
>5756	Identifier	fs 
>5757	Callee	fs 
>5758	Identifier	fs 
>5759	Condition	 
>5760	CallExpression	S_ISCHR ( path_stat . st_mode )
>5761	ArgumentList	path_stat . st_mode
>5762	Argument	path_stat . st_mode
>5763	MemberAccess	path_stat . st_mode
>5764	Identifier	st_mode
>5765	Identifier	path_stat
>5766	Callee	S_ISCHR
>5767	Identifier	S_ISCHR
>5768	IfStatement	if ( S_ISBLK ( path_stat . st_mode ) )
>5769	ReturnStatement	 
>5770	CallExpression	fs 
>5771	ArgumentList	fs 
>5772	Argument	static_cast < perms > ( path_stat . st_mode ) & fs 
>5773	BitAndExpression	static_cast < perms > ( path_stat . st_mode ) & fs 
>5774	Identifier	fs 
>5775	RelationalExpression	static_cast < perms > ( path_stat . st_mode )
>5776	RelationalExpression	perms > ( path_stat . st_mode )
>5777	MemberAccess	path_stat . st_mode
>5778	Identifier	st_mode
>5779	Identifier	path_stat
>5780	Identifier	perms
>5781	Identifier	static_cast
>5782	Argument	fs 
>5783	Identifier	fs 
>5784	Callee	fs 
>5785	Identifier	fs 
>5786	Condition	 
>5787	CallExpression	S_ISBLK ( path_stat . st_mode )
>5788	ArgumentList	path_stat . st_mode
>5789	Argument	path_stat . st_mode
>5790	MemberAccess	path_stat . st_mode
>5791	Identifier	st_mode
>5792	Identifier	path_stat
>5793	Callee	S_ISBLK
>5794	Identifier	S_ISBLK
>5795	IfStatement	if ( S_ISREG ( path_stat . st_mode ) )
>5796	ReturnStatement	 
>5797	CallExpression	fs 
>5798	ArgumentList	fs 
>5799	Argument	static_cast < perms > ( path_stat . st_mode ) & fs 
>5800	BitAndExpression	static_cast < perms > ( path_stat . st_mode ) & fs 
>5801	Identifier	fs 
>5802	RelationalExpression	static_cast < perms > ( path_stat . st_mode )
>5803	RelationalExpression	perms > ( path_stat . st_mode )
>5804	MemberAccess	path_stat . st_mode
>5805	Identifier	st_mode
>5806	Identifier	path_stat
>5807	Identifier	perms
>5808	Identifier	static_cast
>5809	Argument	fs 
>5810	Identifier	fs 
>5811	Callee	fs 
>5812	Identifier	fs 
>5813	Condition	 
>5814	CallExpression	S_ISREG ( path_stat . st_mode )
>5815	ArgumentList	path_stat . st_mode
>5816	Argument	path_stat . st_mode
>5817	MemberAccess	path_stat . st_mode
>5818	Identifier	st_mode
>5819	Identifier	path_stat
>5820	Callee	S_ISREG
>5821	Identifier	S_ISREG
>5822	IfStatement	if ( S_ISDIR ( path_stat . st_mode ) )
>5823	ReturnStatement	 
>5824	CallExpression	fs 
>5825	ArgumentList	fs 
>5826	Argument	static_cast < perms > ( path_stat . st_mode ) & fs 
>5827	BitAndExpression	static_cast < perms > ( path_stat . st_mode ) & fs 
>5828	Identifier	fs 
>5829	RelationalExpression	static_cast < perms > ( path_stat . st_mode )
>5830	RelationalExpression	perms > ( path_stat . st_mode )
>5831	MemberAccess	path_stat . st_mode
>5832	Identifier	st_mode
>5833	Identifier	path_stat
>5834	Identifier	perms
>5835	Identifier	static_cast
>5836	Argument	fs 
>5837	Identifier	fs 
>5838	Callee	fs 
>5839	Identifier	fs 
>5840	Condition	 
>5841	CallExpression	S_ISDIR ( path_stat . st_mode )
>5842	ArgumentList	path_stat . st_mode
>5843	Argument	path_stat . st_mode
>5844	MemberAccess	path_stat . st_mode
>5845	Identifier	st_mode
>5846	Identifier	path_stat
>5847	Callee	S_ISDIR
>5848	Identifier	S_ISDIR
>5849	ExpressionStatement	 
>5850	IfStatement	if ( ec != 0 )
>5851	ExpressionStatement	 
>5852	CallExpression	ec -> clear ( )
>5853	ArgumentList	 
>5854	Callee	ec -> clear
>5855	PtrMemberAccess	ec -> clear
>5856	Identifier	clear
>5857	Identifier	ec
>5858	Condition	 
>5859	EqualityExpression	ec != 0
>5860	PrimaryExpression	0
>5861	Identifier	ec
>5862	CompoundStatement	 
>5863	ReturnStatement	 
>5864	CallExpression	fs 
>5865	ArgumentList	fs 
>5866	Argument	fs 
>5867	Identifier	fs 
>5868	Callee	fs 
>5869	Identifier	fs 
>5870	IfStatement	if ( ec == 0 )
>5871	ExpressionStatement	 
>5872	CallExpression	BOOST_FILESYSTEM_THROW ( filesystem_error ( \"boost
>5873	ArgumentList	filesystem_error ( \"boost
>5874	Argument	filesystem_error ( \"boost
>5875	CallExpression	filesystem_error ( \"boost
>5876	ArgumentList	\"boost
>5877	Argument	error_code ( errno , system_category ( ) )
>5878	CallExpression	error_code ( errno , system_category ( ) )
>5879	ArgumentList	errno
>5880	Argument	system_category ( )
>5881	CallExpression	system_category ( )
>5882	ArgumentList	 
>5883	Callee	system_category
>5884	Identifier	system_category
>5885	Argument	errno
>5886	Identifier	errno
>5887	Callee	error_code
>5888	Identifier	error_code
>5889	Argument	p
>5890	Identifier	p
>5891	Argument	\"boost
>5892	PrimaryExpression	\"boost
>5893	Callee	filesystem_error
>5894	Identifier	filesystem_error
>5895	Callee	BOOST_FILESYSTEM_THROW
>5896	Identifier	BOOST_FILESYSTEM_THROW
>5897	Condition	 
>5898	EqualityExpression	ec == 0
>5899	PrimaryExpression	0
>5900	Identifier	ec
>5901	IfStatement	if ( not_found_error ( errno ) )
>5902	CompoundStatement	 
>5903	ReturnStatement	 
>5904	CallExpression	fs 
>5905	ArgumentList	fs 
>5906	Argument	fs 
>5907	Identifier	fs 
>5908	Argument	fs 
>5909	Identifier	fs 
>5910	Callee	fs 
>5911	Identifier	fs 
>5912	Condition	 
>5913	CallExpression	not_found_error ( errno )
>5914	ArgumentList	errno
>5915	Argument	errno
>5916	Identifier	errno
>5917	Callee	not_found_error
>5918	Identifier	not_found_error
>5919	IfStatement	if ( ec != 0 )
>5920	ExpressionStatement	 
>5921	CallExpression	ec -> assign ( errno , system_category ( ) )
>5922	ArgumentList	errno
>5923	Argument	system_category ( )
>5924	CallExpression	system_category ( )
>5925	ArgumentList	 
>5926	Callee	system_category
>5927	Identifier	system_category
>5928	Argument	errno
>5929	Identifier	errno
>5930	Callee	ec -> assign
>5931	PtrMemberAccess	ec -> assign
>5932	Identifier	assign
>5933	Identifier	ec
>5934	Condition	 
>5935	EqualityExpression	ec != 0
>5936	PrimaryExpression	0
>5937	Identifier	ec
>5938	Statement	 
>5939	Statement	 
>5940	Statement	 
>5941	Statement	 
>5942	Statement	 
>5943	Statement	 
>5944	Statement	 
>5945	Statement	 
>5946	Statement	 
>5947	Statement	 
>5948	Statement	 
>5949	Statement	 
>5950	Statement	 
>5951	Statement	 
>5952	Statement	 
>5953	Statement	 
>5954	Statement	 
>5955	IdentifierDeclStatement	 
>5956	IdentifierDecl	path_stat
>5957	Identifier	path_stat
>5958	IdentifierDeclType	struct stat
>5959	Statement	 
>5960	Statement	 
>6012	FunctionDef	symlink_status (const path & p , error_code * ec)
>6013	ParameterList	const path & p , error_code * ec
>6014	Parameter	 
>6015	Identifier	ec
>6016	ParameterType	error_code *
>6017	Parameter	 
>6018	Identifier	p
>6019	ParameterType	const path &
>6020	ReturnType	BOOST_FILESYSTEM_DECL file_status
>6021	CompoundStatement	 
>6022	Statement	 
>6023	ReturnStatement	 
>6024	ConditionalExpression	( attr & FILE_ATTRIBUTE_DIRECTORY ) ? file_status ( file_type 
>6025	CallExpression	file_status ( file_type 
>6026	ArgumentList	file_type 
>6027	Argument	make_permissions ( p , attr )
>6028	CallExpression	make_permissions ( p , attr )
>6029	ArgumentList	p
>6030	Argument	attr
>6031	Identifier	attr
>6032	Argument	p
>6033	Identifier	p
>6034	Callee	make_permissions
>6035	Identifier	make_permissions
>6036	Argument	file_type 
>6037	Identifier	file_type 
>6038	Callee	file_status
>6039	Identifier	file_status
>6040	CallExpression	file_status ( file_type 
>6041	ArgumentList	file_type 
>6042	Argument	make_permissions ( p , attr )
>6043	CallExpression	make_permissions ( p , attr )
>6044	ArgumentList	p
>6045	Argument	attr
>6046	Identifier	attr
>6047	Argument	p
>6048	Identifier	p
>6049	Callee	make_permissions
>6050	Identifier	make_permissions
>6051	Argument	file_type 
>6052	Identifier	file_type 
>6053	Callee	file_status
>6054	Identifier	file_status
>6055	Condition	attr & FILE_ATTRIBUTE_DIRECTORY
>6056	BitAndExpression	attr & FILE_ATTRIBUTE_DIRECTORY
>6057	Identifier	FILE_ATTRIBUTE_DIRECTORY
>6058	Identifier	attr
>6059	IfStatement	if ( attr & FILE_ATTRIBUTE_REPARSE_POINT )
>6060	ReturnStatement	 
>6061	ConditionalExpression	is_reparse_point_a_symlink ( p ) ? file_status ( file_type 
>6062	CallExpression	file_status ( file_type 
>6063	ArgumentList	file_type 
>6064	Argument	make_permissions ( p , attr )
>6065	CallExpression	make_permissions ( p , attr )
>6066	ArgumentList	p
>6067	Argument	attr
>6068	Identifier	attr
>6069	Argument	p
>6070	Identifier	p
>6071	Callee	make_permissions
>6072	Identifier	make_permissions
>6073	Argument	file_type 
>6074	Identifier	file_type 
>6075	Callee	file_status
>6076	Identifier	file_status
>6077	CallExpression	file_status ( file_type 
>6078	ArgumentList	file_type 
>6079	Argument	make_permissions ( p , attr )
>6080	CallExpression	make_permissions ( p , attr )
>6081	ArgumentList	p
>6082	Argument	attr
>6083	Identifier	attr
>6084	Argument	p
>6085	Identifier	p
>6086	Callee	make_permissions
>6087	Identifier	make_permissions
>6088	Argument	file_type 
>6089	Identifier	file_type 
>6090	Callee	file_status
>6091	Identifier	file_status
>6092	Condition	is_reparse_point_a_symlink ( p )
>6093	CallExpression	is_reparse_point_a_symlink ( p )
>6094	ArgumentList	p
>6095	Argument	p
>6096	Identifier	p
>6097	Callee	is_reparse_point_a_symlink
>6098	Identifier	is_reparse_point_a_symlink
>6099	Condition	 
>6100	BitAndExpression	attr & FILE_ATTRIBUTE_REPARSE_POINT
>6101	Identifier	FILE_ATTRIBUTE_REPARSE_POINT
>6102	Identifier	attr
>6103	IfStatement	if ( ec != 0 )
>6104	ExpressionStatement	 
>6105	CallExpression	ec -> clear ( )
>6106	ArgumentList	 
>6107	Callee	ec -> clear
>6108	PtrMemberAccess	ec -> clear
>6109	Identifier	clear
>6110	Identifier	ec
>6111	Condition	 
>6112	EqualityExpression	ec != 0
>6113	PrimaryExpression	0
>6114	Identifier	ec
>6115	IfStatement	if ( attr == 0xFFFFFFFF )
>6116	CompoundStatement	 
>6117	ReturnStatement	 
>6118	CallExpression	process_status_failure ( p , ec )
>6119	ArgumentList	p
>6120	Argument	ec
>6121	Identifier	ec
>6122	Argument	p
>6123	Identifier	p
>6124	Callee	process_status_failure
>6125	Identifier	process_status_failure
>6126	Condition	 
>6127	EqualityExpression	attr == 0xFFFFFFFF
>6128	PrimaryExpression	0xFFFFFFFF
>6129	Identifier	attr
>6130	ExpressionStatement	 
>6131	Statement	 
>6132	Statement	 
>6133	Statement	 
>6134	Statement	 
>6135	Statement	 
>6136	Statement	 
>6137	Statement	 
>6138	Statement	 
>6139	Statement	 
>6140	Statement	 
>6141	Statement	 
>6142	Statement	 
>6143	ReturnStatement	 
>6144	CallExpression	fs 
>6145	ArgumentList	fs 
>6146	Argument	fs 
>6147	Identifier	fs 
>6148	Callee	fs 
>6149	Identifier	fs 
>6150	IfStatement	if ( S_ISSOCK ( path_stat . st_mode ) )
>6151	ElseStatement	else
>6152	Statement	 
>6153	ReturnStatement	 
>6154	CallExpression	fs 
>6155	ArgumentList	fs 
>6156	Argument	static_cast < perms > ( path_stat . st_mode ) & fs 
>6157	BitAndExpression	static_cast < perms > ( path_stat . st_mode ) & fs 
>6158	Identifier	fs 
>6159	RelationalExpression	static_cast < perms > ( path_stat . st_mode )
>6160	RelationalExpression	perms > ( path_stat . st_mode )
>6161	MemberAccess	path_stat . st_mode
>6162	Identifier	st_mode
>6163	Identifier	path_stat
>6164	Identifier	perms
>6165	Identifier	static_cast
>6166	Argument	fs 
>6167	Identifier	fs 
>6168	Callee	fs 
>6169	Identifier	fs 
>6170	Condition	 
>6171	CallExpression	S_ISSOCK ( path_stat . st_mode )
>6172	ArgumentList	path_stat . st_mode
>6173	Argument	path_stat . st_mode
>6174	MemberAccess	path_stat . st_mode
>6175	Identifier	st_mode
>6176	Identifier	path_stat
>6177	Callee	S_ISSOCK
>6178	Identifier	S_ISSOCK
>6179	IfStatement	if ( S_ISFIFO ( path_stat . st_mode ) )
>6180	ReturnStatement	 
>6181	CallExpression	fs 
>6182	ArgumentList	fs 
>6183	Argument	static_cast < perms > ( path_stat . st_mode ) & fs 
>6184	BitAndExpression	static_cast < perms > ( path_stat . st_mode ) & fs 
>6185	Identifier	fs 
>6186	RelationalExpression	static_cast < perms > ( path_stat . st_mode )
>6187	RelationalExpression	perms > ( path_stat . st_mode )
>6188	MemberAccess	path_stat . st_mode
>6189	Identifier	st_mode
>6190	Identifier	path_stat
>6191	Identifier	perms
>6192	Identifier	static_cast
>6193	Argument	fs 
>6194	Identifier	fs 
>6195	Callee	fs 
>6196	Identifier	fs 
>6197	Condition	 
>6198	CallExpression	S_ISFIFO ( path_stat . st_mode )
>6199	ArgumentList	path_stat . st_mode
>6200	Argument	path_stat . st_mode
>6201	MemberAccess	path_stat . st_mode
>6202	Identifier	st_mode
>6203	Identifier	path_stat
>6204	Callee	S_ISFIFO
>6205	Identifier	S_ISFIFO
>6206	IfStatement	if ( S_ISCHR ( path_stat . st_mode ) )
>6207	ReturnStatement	 
>6208	CallExpression	fs 
>6209	ArgumentList	fs 
>6210	Argument	static_cast < perms > ( path_stat . st_mode ) & fs 
>6211	BitAndExpression	static_cast < perms > ( path_stat . st_mode ) & fs 
>6212	Identifier	fs 
>6213	RelationalExpression	static_cast < perms > ( path_stat . st_mode )
>6214	RelationalExpression	perms > ( path_stat . st_mode )
>6215	MemberAccess	path_stat . st_mode
>6216	Identifier	st_mode
>6217	Identifier	path_stat
>6218	Identifier	perms
>6219	Identifier	static_cast
>6220	Argument	fs 
>6221	Identifier	fs 
>6222	Callee	fs 
>6223	Identifier	fs 
>6224	Condition	 
>6225	CallExpression	S_ISCHR ( path_stat . st_mode )
>6226	ArgumentList	path_stat . st_mode
>6227	Argument	path_stat . st_mode
>6228	MemberAccess	path_stat . st_mode
>6229	Identifier	st_mode
>6230	Identifier	path_stat
>6231	Callee	S_ISCHR
>6232	Identifier	S_ISCHR
>6233	IfStatement	if ( S_ISBLK ( path_stat . st_mode ) )
>6234	ReturnStatement	 
>6235	CallExpression	fs 
>6236	ArgumentList	fs 
>6237	Argument	static_cast < perms > ( path_stat . st_mode ) & fs 
>6238	BitAndExpression	static_cast < perms > ( path_stat . st_mode ) & fs 
>6239	Identifier	fs 
>6240	RelationalExpression	static_cast < perms > ( path_stat . st_mode )
>6241	RelationalExpression	perms > ( path_stat . st_mode )
>6242	MemberAccess	path_stat . st_mode
>6243	Identifier	st_mode
>6244	Identifier	path_stat
>6245	Identifier	perms
>6246	Identifier	static_cast
>6247	Argument	fs 
>6248	Identifier	fs 
>6249	Callee	fs 
>6250	Identifier	fs 
>6251	Condition	 
>6252	CallExpression	S_ISBLK ( path_stat . st_mode )
>6253	ArgumentList	path_stat . st_mode
>6254	Argument	path_stat . st_mode
>6255	MemberAccess	path_stat . st_mode
>6256	Identifier	st_mode
>6257	Identifier	path_stat
>6258	Callee	S_ISBLK
>6259	Identifier	S_ISBLK
>6260	IfStatement	if ( S_ISLNK ( path_stat . st_mode ) )
>6261	ReturnStatement	 
>6262	CallExpression	fs 
>6263	ArgumentList	fs 
>6264	Argument	static_cast < perms > ( path_stat . st_mode ) & fs 
>6265	BitAndExpression	static_cast < perms > ( path_stat . st_mode ) & fs 
>6266	Identifier	fs 
>6267	RelationalExpression	static_cast < perms > ( path_stat . st_mode )
>6268	RelationalExpression	perms > ( path_stat . st_mode )
>6269	MemberAccess	path_stat . st_mode
>6270	Identifier	st_mode
>6271	Identifier	path_stat
>6272	Identifier	perms
>6273	Identifier	static_cast
>6274	Argument	fs 
>6275	Identifier	fs 
>6276	Callee	fs 
>6277	Identifier	fs 
>6278	Condition	 
>6279	CallExpression	S_ISLNK ( path_stat . st_mode )
>6280	ArgumentList	path_stat . st_mode
>6281	Argument	path_stat . st_mode
>6282	MemberAccess	path_stat . st_mode
>6283	Identifier	st_mode
>6284	Identifier	path_stat
>6285	Callee	S_ISLNK
>6286	Identifier	S_ISLNK
>6287	IfStatement	if ( S_ISDIR ( path_stat . st_mode ) )
>6288	ReturnStatement	 
>6289	CallExpression	fs 
>6290	ArgumentList	fs 
>6291	Argument	static_cast < perms > ( path_stat . st_mode ) & fs 
>6292	BitAndExpression	static_cast < perms > ( path_stat . st_mode ) & fs 
>6293	Identifier	fs 
>6294	RelationalExpression	static_cast < perms > ( path_stat . st_mode )
>6295	RelationalExpression	perms > ( path_stat . st_mode )
>6296	MemberAccess	path_stat . st_mode
>6297	Identifier	st_mode
>6298	Identifier	path_stat
>6299	Identifier	perms
>6300	Identifier	static_cast
>6301	Argument	fs 
>6302	Identifier	fs 
>6303	Callee	fs 
>6304	Identifier	fs 
>6305	Condition	 
>6306	CallExpression	S_ISDIR ( path_stat . st_mode )
>6307	ArgumentList	path_stat . st_mode
>6308	Argument	path_stat . st_mode
>6309	MemberAccess	path_stat . st_mode
>6310	Identifier	st_mode
>6311	Identifier	path_stat
>6312	Callee	S_ISDIR
>6313	Identifier	S_ISDIR
>6314	IfStatement	if ( S_ISREG ( path_stat . st_mode ) )
>6315	ReturnStatement	 
>6316	CallExpression	fs 
>6317	ArgumentList	fs 
>6318	Argument	static_cast < perms > ( path_stat . st_mode ) & fs 
>6319	BitAndExpression	static_cast < perms > ( path_stat . st_mode ) & fs 
>6320	Identifier	fs 
>6321	RelationalExpression	static_cast < perms > ( path_stat . st_mode )
>6322	RelationalExpression	perms > ( path_stat . st_mode )
>6323	MemberAccess	path_stat . st_mode
>6324	Identifier	st_mode
>6325	Identifier	path_stat
>6326	Identifier	perms
>6327	Identifier	static_cast
>6328	Argument	fs 
>6329	Identifier	fs 
>6330	Callee	fs 
>6331	Identifier	fs 
>6332	Condition	 
>6333	CallExpression	S_ISREG ( path_stat . st_mode )
>6334	ArgumentList	path_stat . st_mode
>6335	Argument	path_stat . st_mode
>6336	MemberAccess	path_stat . st_mode
>6337	Identifier	st_mode
>6338	Identifier	path_stat
>6339	Callee	S_ISREG
>6340	Identifier	S_ISREG
>6341	IfStatement	if ( ec != 0 )
>6342	ExpressionStatement	 
>6343	CallExpression	ec -> clear ( )
>6344	ArgumentList	 
>6345	Callee	ec -> clear
>6346	PtrMemberAccess	ec -> clear
>6347	Identifier	clear
>6348	Identifier	ec
>6349	Condition	 
>6350	EqualityExpression	ec != 0
>6351	PrimaryExpression	0
>6352	Identifier	ec
>6353	CompoundStatement	 
>6354	ReturnStatement	 
>6355	CallExpression	fs 
>6356	ArgumentList	fs 
>6357	Argument	fs 
>6358	Identifier	fs 
>6359	Callee	fs 
>6360	Identifier	fs 
>6361	IfStatement	if ( ec == 0 )
>6362	ExpressionStatement	 
>6363	CallExpression	BOOST_FILESYSTEM_THROW ( filesystem_error ( \"boost
>6364	ArgumentList	filesystem_error ( \"boost
>6365	Argument	filesystem_error ( \"boost
>6366	CallExpression	filesystem_error ( \"boost
>6367	ArgumentList	\"boost
>6368	Argument	error_code ( errno , system_category ( ) )
>6369	CallExpression	error_code ( errno , system_category ( ) )
>6370	ArgumentList	errno
>6371	Argument	system_category ( )
>6372	CallExpression	system_category ( )
>6373	ArgumentList	 
>6374	Callee	system_category
>6375	Identifier	system_category
>6376	Argument	errno
>6377	Identifier	errno
>6378	Callee	error_code
>6379	Identifier	error_code
>6380	Argument	p
>6381	Identifier	p
>6382	Argument	\"boost
>6383	PrimaryExpression	\"boost
>6384	Callee	filesystem_error
>6385	Identifier	filesystem_error
>6386	Callee	BOOST_FILESYSTEM_THROW
>6387	Identifier	BOOST_FILESYSTEM_THROW
>6388	Condition	 
>6389	EqualityExpression	ec == 0
>6390	PrimaryExpression	0
>6391	Identifier	ec
>6392	IfStatement	if ( errno == ENOENT || errno == ENOTDIR )
>6393	CompoundStatement	 
>6394	ReturnStatement	 
>6395	CallExpression	fs 
>6396	ArgumentList	fs 
>6397	Argument	fs 
>6398	Identifier	fs 
>6399	Argument	fs 
>6400	Identifier	fs 
>6401	Callee	fs 
>6402	Identifier	fs 
>6403	Condition	 
>6404	OrExpression	errno == ENOENT || errno == ENOTDIR
>6405	EqualityExpression	errno == ENOTDIR
>6406	Identifier	ENOTDIR
>6407	Identifier	errno
>6408	EqualityExpression	errno == ENOENT
>6409	Identifier	ENOENT
>6410	Identifier	errno
>6411	IfStatement	if ( ec != 0 )
>6412	ExpressionStatement	 
>6413	CallExpression	ec -> assign ( errno , system_category ( ) )
>6414	ArgumentList	errno
>6415	Argument	system_category ( )
>6416	CallExpression	system_category ( )
>6417	ArgumentList	 
>6418	Callee	system_category
>6419	Identifier	system_category
>6420	Argument	errno
>6421	Identifier	errno
>6422	Callee	ec -> assign
>6423	PtrMemberAccess	ec -> assign
>6424	Identifier	assign
>6425	Identifier	ec
>6426	Condition	 
>6427	EqualityExpression	ec != 0
>6428	PrimaryExpression	0
>6429	Identifier	ec
>6430	Statement	 
>6431	Statement	 
>6432	Statement	 
>6433	Statement	 
>6434	Statement	 
>6435	Statement	 
>6436	Statement	 
>6437	Statement	 
>6438	Statement	 
>6439	Statement	 
>6440	Statement	 
>6441	Statement	 
>6442	Statement	 
>6443	Statement	 
>6444	Statement	 
>6445	Statement	 
>6446	Statement	 
>6447	IdentifierDeclStatement	 
>6448	IdentifierDecl	path_stat
>6449	Identifier	path_stat
>6450	IdentifierDeclType	struct stat
>6451	Statement	 
>6452	Statement	 
>6499	FunctionDef	temp_directory_path (system 
>6500	ParameterList	system 
>6501	Parameter	 
>6502	Identifier	ec
>6503	ParameterType	system 
>6504	ReturnType	BOOST_FILESYSTEM_DECL path
>6505	CompoundStatement	 
>6506	Statement	 
>6507	ReturnStatement	 
>6508	Identifier	p
>6509	IfStatement	if ( ( ec && ! is_directory ( p , * ec ) ) || ( ! ec && ! is_directory ( p ) ) )
>6510	CompoundStatement	 
>6511	ReturnStatement	 
>6512	CallExpression	path ( )
>6513	ArgumentList	 
>6514	Callee	path
>6515	Identifier	path
>6516	ExpressionStatement	 
>6517	CallExpression	error ( true , p , ec , \"boost
>6518	ArgumentList	true
>6519	Argument	\"boost
>6520	PrimaryExpression	\"boost
>6521	Argument	ec
>6522	Identifier	ec
>6523	Argument	p
>6524	Identifier	p
>6525	Argument	true
>6526	Identifier	true
>6527	Callee	error
>6528	Identifier	error
>6529	ExpressionStatement	 
>6530	CallExpression	SetLastError ( ENOTDIR )
>6531	ArgumentList	ENOTDIR
>6532	Argument	ENOTDIR
>6533	Identifier	ENOTDIR
>6534	Callee	SetLastError
>6535	Identifier	SetLastError
>6536	Statement	 
>6537	Condition	 
>6538	OrExpression	( ec && ! is_directory ( p , * ec ) ) || ( ! ec && ! is_directory ( p ) )
>6539	AndExpression	! ec && ! is_directory ( p )
>6540	UnaryOp	! is_directory ( p )
>6541	CallExpression	is_directory ( p )
>6542	ArgumentList	p
>6543	Argument	p
>6544	Identifier	p
>6545	Callee	is_directory
>6546	Identifier	is_directory
>6547	UnaryOperator	!
>6548	UnaryOp	! ec
>6549	Identifier	ec
>6550	UnaryOperator	!
>6551	AndExpression	ec && ! is_directory ( p , * ec )
>6552	UnaryOp	! is_directory ( p , * ec )
>6553	CallExpression	is_directory ( p , * ec )
>6554	ArgumentList	p
>6555	Argument	* ec
>6556	UnaryOp	* ec
>6557	Identifier	ec
>6558	UnaryOperator	*
>6559	Argument	p
>6560	Identifier	p
>6561	Callee	is_directory
>6562	Identifier	is_directory
>6563	UnaryOperator	!
>6564	Identifier	ec
>6565	IdentifierDeclStatement	 
>6566	IdentifierDecl	p ( buf . begin ( ) , buf . end ( ) )
>6567	Expression	buf . begin ( ) , buf . end ( )
>6568	CallExpression	buf . end ( )
>6569	ArgumentList	 
>6570	Callee	buf . end
>6571	MemberAccess	buf . end
>6572	Identifier	end
>6573	Identifier	buf
>6574	CallExpression	buf . begin ( )
>6575	ArgumentList	 
>6576	Callee	buf . begin
>6577	MemberAccess	buf . begin
>6578	Identifier	begin
>6579	Identifier	buf
>6580	Identifier	p
>6581	IdentifierDeclType	path
>6582	ExpressionStatement	 
>6583	CallExpression	buf . pop_back ( )
>6584	ArgumentList	 
>6585	Callee	buf . pop_back
>6586	MemberAccess	buf . pop_back
>6587	Identifier	pop_back
>6588	Identifier	buf
>6589	IfStatement	if ( buf . empty ( ) || GetTempPathW ( buf . size ( ) , & buf [ 0 ] ) == 0 )
>6590	CompoundStatement	 
>6591	ReturnStatement	 
>6592	CallExpression	path ( )
>6593	ArgumentList	 
>6594	Callee	path
>6595	Identifier	path
>6596	ExpressionStatement	 
>6597	CallExpression	error ( true , ec , \"boost
>6598	ArgumentList	true
>6599	Argument	\"boost
>6600	PrimaryExpression	\"boost
>6601	Argument	ec
>6602	Identifier	ec
>6603	Argument	true
>6604	Identifier	true
>6605	Callee	error
>6606	Identifier	error
>6607	ExpressionStatement	 
>6608	CallExpression	SetLastError ( ENOTDIR )
>6609	ArgumentList	ENOTDIR
>6610	Argument	ENOTDIR
>6611	Identifier	ENOTDIR
>6612	Callee	SetLastError
>6613	Identifier	SetLastError
>6614	IfStatement	if ( ! buf . empty ( ) )
>6615	Statement	 
>6616	Condition	 
>6617	UnaryOp	! buf . empty ( )
>6618	CallExpression	buf . empty ( )
>6619	ArgumentList	 
>6620	Callee	buf . empty
>6621	MemberAccess	buf . empty
>6622	Identifier	empty
>6623	Identifier	buf
>6624	UnaryOperator	!
>6625	Condition	 
>6626	OrExpression	buf . empty ( ) || GetTempPathW ( buf . size ( ) , & buf [ 0 ] ) == 0
>6627	EqualityExpression	GetTempPathW ( buf . size ( ) , & buf [ 0 ] ) == 0
>6628	PrimaryExpression	0
>6629	CallExpression	GetTempPathW ( buf . size ( ) , & buf [ 0 ] )
>6630	ArgumentList	buf . size ( )
>6631	Argument	& buf [ 0 ]
>6632	UnaryOp	& buf [ 0 ]
>6633	ArrayIndexing	buf [ 0 ]
>6634	PrimaryExpression	0
>6635	Identifier	buf
>6636	UnaryOperator	&
>6637	Argument	buf . size ( )
>6638	CallExpression	buf . size ( )
>6639	ArgumentList	 
>6640	Callee	buf . size
>6641	MemberAccess	buf . size
>6642	Identifier	size
>6643	Identifier	buf
>6644	Callee	GetTempPathW
>6645	Identifier	GetTempPathW
>6646	CallExpression	buf . empty ( )
>6647	ArgumentList	 
>6648	Callee	buf . empty
>6649	MemberAccess	buf . empty
>6650	Identifier	empty
>6651	Identifier	buf
>6652	ReturnStatement	 
>6653	Identifier	p
>6654	IfStatement	if ( p . empty ( ) || ( ec && ! is_directory ( p , * ec ) ) || ( ! ec && ! is_directory ( p ) ) )
>6655	ElseStatement	else
>6656	IdentifierDeclStatement	 
>6657	IdentifierDecl	buf ( GetTempPathW ( 0 , NULL ) )
>6658	CallExpression	GetTempPathW ( 0 , NULL )
>6659	ArgumentList	0
>6660	Argument	NULL
>6661	Identifier	NULL
>6662	Argument	0
>6663	PrimaryExpression	0
>6664	Callee	GetTempPathW
>6665	Identifier	GetTempPathW
>6666	Identifier	buf
>6667	IdentifierDeclType	std 
>6668	CompoundStatement	 
>6669	ReturnStatement	 
>6670	CallExpression	path ( )
>6671	ArgumentList	 
>6672	Callee	path
>6673	Identifier	path
>6674	ExpressionStatement	 
>6675	CallExpression	error ( true , p , ec , \"boost
>6676	ArgumentList	true
>6677	Argument	\"boost
>6678	PrimaryExpression	\"boost
>6679	Argument	ec
>6680	Identifier	ec
>6681	Argument	p
>6682	Identifier	p
>6683	Argument	true
>6684	Identifier	true
>6685	Callee	error
>6686	Identifier	error
>6687	ExpressionStatement	 
>6688	AssignmentExpr	errno = ENOTDIR
>6689	Identifier	ENOTDIR
>6690	Identifier	errno
>6691	Condition	 
>6692	OrExpression	p . empty ( ) || ( ec && ! is_directory ( p , * ec ) ) || ( ! ec && ! is_directory ( p ) )
>6693	OrExpression	( ec && ! is_directory ( p , * ec ) ) || ( ! ec && ! is_directory ( p ) )
>6694	AndExpression	! ec && ! is_directory ( p )
>6695	UnaryOp	! is_directory ( p )
>6696	CallExpression	is_directory ( p )
>6697	ArgumentList	p
>6698	Argument	p
>6699	Identifier	p
>6700	Callee	is_directory
>6701	Identifier	is_directory
>6702	UnaryOperator	!
>6703	UnaryOp	! ec
>6704	Identifier	ec
>6705	UnaryOperator	!
>6706	AndExpression	ec && ! is_directory ( p , * ec )
>6707	UnaryOp	! is_directory ( p , * ec )
>6708	CallExpression	is_directory ( p , * ec )
>6709	ArgumentList	p
>6710	Argument	* ec
>6711	UnaryOp	* ec
>6712	Identifier	ec
>6713	UnaryOperator	*
>6714	Argument	p
>6715	Identifier	p
>6716	Callee	is_directory
>6717	Identifier	is_directory
>6718	UnaryOperator	!
>6719	Identifier	ec
>6720	CallExpression	p . empty ( )
>6721	ArgumentList	 
>6722	Callee	p . empty
>6723	MemberAccess	p . empty
>6724	Identifier	empty
>6725	Identifier	p
>6726	IdentifierDeclStatement	 
>6727	IdentifierDecl	p ( ( val != 0 ) ? val 
>6728	ConditionalExpression	( val != 0 ) ? val 
>6729	PrimaryExpression	\"/tmp\"
>6730	Identifier	val
>6731	Condition	val != 0
>6732	EqualityExpression	val != 0
>6733	PrimaryExpression	0
>6734	Identifier	val
>6735	Identifier	p
>6736	IdentifierDeclType	path
>6737	ExpressionStatement	 
>6738	OrExpression	( val = std 
>6739	OrExpression	( val = std 
>6740	OrExpression	( val = std 
>6741	AssignmentExpr	val = std 
>6742	CallExpression	std 
>6743	ArgumentList	\"TEMPDIR\"
>6744	Argument	\"TEMPDIR\"
>6745	PrimaryExpression	\"TEMPDIR\"
>6746	Callee	std 
>6747	Identifier	std 
>6748	Identifier	val
>6749	AssignmentExpr	val = std 
>6750	CallExpression	std 
>6751	ArgumentList	\"TEMP\"
>6752	Argument	\"TEMP\"
>6753	PrimaryExpression	\"TEMP\"
>6754	Callee	std 
>6755	Identifier	std 
>6756	Identifier	val
>6757	AssignmentExpr	val = std 
>6758	CallExpression	std 
>6759	ArgumentList	\"TMP\"
>6760	Argument	\"TMP\"
>6761	PrimaryExpression	\"TMP\"
>6762	Callee	std 
>6763	Identifier	std 
>6764	Identifier	val
>6765	AssignmentExpr	val = std 
>6766	CallExpression	std 
>6767	ArgumentList	\"TMPDIR\"
>6768	Argument	\"TMPDIR\"
>6769	PrimaryExpression	\"TMPDIR\"
>6770	Callee	std 
>6771	Identifier	std 
>6772	Identifier	val
>6773	IdentifierDeclStatement	 
>6774	IdentifierDecl	* val = 0
>6775	AssignmentExpr	* val = 0
>6776	PrimaryExpression	0
>6777	Identifier	val
>6778	Identifier	val
>6779	IdentifierDeclType	const char *
>6780	Statement	 
>6781	Statement	 
>6802	FunctionDef	system_complete (const path & p , system 
>6803	ParameterList	const path & p , system 
>6804	Parameter	 
>6805	Identifier	ec
>6806	ParameterType	system 
>6807	Parameter	 
>6808	Identifier	p
>6809	ParameterType	const path &
>6810	ReturnType	BOOST_FILESYSTEM_DECL path
>6811	CompoundStatement	 
>6812	Statement	 
>6813	ReturnStatement	 
>6814	ConditionalExpression	error ( get_full_path_name ( p , len , big_buf . get ( ) , & pfn ) == 0 , p , ec , \"boost
>6815	CallExpression	path ( big_buf . get ( ) )
>6816	ArgumentList	big_buf . get ( )
>6817	Argument	big_buf . get ( )
>6818	CallExpression	big_buf . get ( )
>6819	ArgumentList	 
>6820	Callee	big_buf . get
>6821	MemberAccess	big_buf . get
>6822	Identifier	get
>6823	Identifier	big_buf
>6824	Callee	path
>6825	Identifier	path
>6826	CallExpression	path ( )
>6827	ArgumentList	 
>6828	Callee	path
>6829	Identifier	path
>6830	Condition	error ( get_full_path_name ( p , len , big_buf . get ( ) , & pfn ) == 0 , p , ec , \"boost
>6831	CallExpression	error ( get_full_path_name ( p , len , big_buf . get ( ) , & pfn ) == 0 , p , ec , \"boost
>6832	ArgumentList	get_full_path_name ( p , len , big_buf . get ( ) , & pfn ) == 0
>6833	Argument	\"boost
>6834	PrimaryExpression	\"boost
>6835	Argument	ec
>6836	Identifier	ec
>6837	Argument	p
>6838	Identifier	p
>6839	Argument	get_full_path_name ( p , len , big_buf . get ( ) , & pfn ) == 0
>6840	EqualityExpression	get_full_path_name ( p , len , big_buf . get ( ) , & pfn ) == 0
>6841	PrimaryExpression	0
>6842	CallExpression	get_full_path_name ( p , len , big_buf . get ( ) , & pfn )
>6843	ArgumentList	p
>6844	Argument	& pfn
>6845	UnaryOp	& pfn
>6846	Identifier	pfn
>6847	UnaryOperator	&
>6848	Argument	big_buf . get ( )
>6849	CallExpression	big_buf . get ( )
>6850	ArgumentList	 
>6851	Callee	big_buf . get
>6852	MemberAccess	big_buf . get
>6853	Identifier	get
>6854	Identifier	big_buf
>6855	Argument	len
>6856	Identifier	len
>6857	Argument	p
>6858	Identifier	p
>6859	Callee	get_full_path_name
>6860	Identifier	get_full_path_name
>6861	Callee	error
>6862	Identifier	error
>6863	IdentifierDeclStatement	 
>6864	IdentifierDecl	big_buf ( new wchar_t [ len ] )
>6865	Identifier	len
>6866	Identifier	big_buf
>6867	IdentifierDeclType	boost 
>6868	IfStatement	if ( len < buf_size )
>6869	ReturnStatement	 
>6870	CallExpression	path ( & buf [ 0 ] )
>6871	ArgumentList	& buf [ 0 ]
>6872	Argument	& buf [ 0 ]
>6873	UnaryOp	& buf [ 0 ]
>6874	ArrayIndexing	buf [ 0 ]
>6875	PrimaryExpression	0
>6876	Identifier	buf
>6877	UnaryOperator	&
>6878	Callee	path
>6879	Identifier	path
>6880	Condition	 
>6881	RelationalExpression	len < buf_size
>6882	Identifier	buf_size
>6883	Identifier	len
>6884	IfStatement	if ( error ( len == 0 , p , ec , \"boost
>6885	ReturnStatement	 
>6886	CallExpression	path ( )
>6887	ArgumentList	 
>6888	Callee	path
>6889	Identifier	path
>6890	Condition	 
>6891	CallExpression	error ( len == 0 , p , ec , \"boost
>6892	ArgumentList	len == 0
>6893	Argument	\"boost
>6894	PrimaryExpression	\"boost
>6895	Argument	ec
>6896	Identifier	ec
>6897	Argument	p
>6898	Identifier	p
>6899	Argument	len == 0
>6900	EqualityExpression	len == 0
>6901	PrimaryExpression	0
>6902	Identifier	len
>6903	Callee	error
>6904	Identifier	error
>6905	IdentifierDeclStatement	 
>6906	IdentifierDecl	len = get_full_path_name ( p , buf_size , buf , & pfn )
>6907	AssignmentExpr	len = get_full_path_name ( p , buf_size , buf , & pfn )
>6908	CallExpression	get_full_path_name ( p , buf_size , buf , & pfn )
>6909	ArgumentList	p
>6910	Argument	& pfn
>6911	UnaryOp	& pfn
>6912	Identifier	pfn
>6913	UnaryOperator	&
>6914	Argument	buf
>6915	Identifier	buf
>6916	Argument	buf_size
>6917	Identifier	buf_size
>6918	Argument	p
>6919	Identifier	p
>6920	Callee	get_full_path_name
>6921	Identifier	get_full_path_name
>6922	Identifier	len
>6923	Identifier	len
>6924	IdentifierDeclType	std 
>6925	IdentifierDeclStatement	 
>6926	IdentifierDecl	* pfn
>6927	Identifier	pfn
>6928	IdentifierDeclType	wchar_t *
>6929	IdentifierDeclStatement	 
>6930	IdentifierDecl	buf [ buf_size ]
>6931	Identifier	buf_size
>6932	Identifier	buf
>6933	IdentifierDeclType	wchar_t [ buf_size ]
>6934	ReturnStatement	 
>6935	ConditionalExpression	( p . empty ( ) || p . is_absolute ( ) ) ? p 
>6936	MultiplicativeExpression	current_path ( ) / p
>6937	Identifier	p
>6938	CallExpression	current_path ( )
>6939	ArgumentList	 
>6940	Callee	current_path
>6941	Identifier	current_path
>6942	Identifier	p
>6943	Condition	p . empty ( ) || p . is_absolute ( )
>6944	OrExpression	p . empty ( ) || p . is_absolute ( )
>6945	CallExpression	p . is_absolute ( )
>6946	ArgumentList	 
>6947	Callee	p . is_absolute
>6948	MemberAccess	p . is_absolute
>6949	Identifier	is_absolute
>6950	Identifier	p
>6951	CallExpression	p . empty ( )
>6952	ArgumentList	 
>6953	Callee	p . empty
>6954	MemberAccess	p . empty
>6955	Identifier	empty
>6956	Identifier	p
>6957	Statement	 
>6958	Statement	 
>6978	FunctionDef	directory_entry 
>6979	ParameterList	system 
>6980	Parameter	 
>6981	Identifier	ec
>6982	ParameterType	system 
>6983	ReturnType	file_status
>6984	CompoundStatement	 
>6985	ReturnStatement	 
>6986	Identifier	m_status
>6987	IfStatement	if ( ! status_known ( m_status ) )
>6988	ElseStatement	else
>6989	IfStatement	if ( ec != 0 )
>6990	ExpressionStatement	 
>6991	CallExpression	ec -> clear ( )
>6992	ArgumentList	 
>6993	Callee	ec -> clear
>6994	PtrMemberAccess	ec -> clear
>6995	Identifier	clear
>6996	Identifier	ec
>6997	Condition	 
>6998	EqualityExpression	ec != 0
>6999	PrimaryExpression	0
>7000	Identifier	ec
>7001	CompoundStatement	 
>7002	IfStatement	if ( status_known ( m_symlink_status ) && ! is_symlink ( m_symlink_status ) )
>7003	ElseStatement	else
>7004	ExpressionStatement	 
>7005	AssignmentExpr	m_status = detail 
>7006	CallExpression	detail 
>7007	ArgumentList	m_path
>7008	Argument	ec
>7009	Identifier	ec
>7010	Argument	m_path
>7011	Identifier	m_path
>7012	Callee	detail 
>7013	Identifier	detail 
>7014	Identifier	m_status
>7015	CompoundStatement	 
>7016	IfStatement	if ( ec != 0 )
>7017	ExpressionStatement	 
>7018	CallExpression	ec -> clear ( )
>7019	ArgumentList	 
>7020	Callee	ec -> clear
>7021	PtrMemberAccess	ec -> clear
>7022	Identifier	clear
>7023	Identifier	ec
>7024	Condition	 
>7025	EqualityExpression	ec != 0
>7026	PrimaryExpression	0
>7027	Identifier	ec
>7028	ExpressionStatement	 
>7029	AssignmentExpr	m_status = m_symlink_status
>7030	Identifier	m_symlink_status
>7031	Identifier	m_status
>7032	Condition	 
>7033	AndExpression	status_known ( m_symlink_status ) && ! is_symlink ( m_symlink_status )
>7034	UnaryOp	! is_symlink ( m_symlink_status )
>7035	CallExpression	is_symlink ( m_symlink_status )
>7036	ArgumentList	m_symlink_status
>7037	Argument	m_symlink_status
>7038	Identifier	m_symlink_status
>7039	Callee	is_symlink
>7040	Identifier	is_symlink
>7041	UnaryOperator	!
>7042	CallExpression	status_known ( m_symlink_status )
>7043	ArgumentList	m_symlink_status
>7044	Argument	m_symlink_status
>7045	Identifier	m_symlink_status
>7046	Callee	status_known
>7047	Identifier	status_known
>7048	Condition	 
>7049	UnaryOp	! status_known ( m_status )
>7050	CallExpression	status_known ( m_status )
>7051	ArgumentList	m_status
>7052	Argument	m_status
>7053	Identifier	m_status
>7054	Callee	status_known
>7055	Identifier	status_known
>7056	UnaryOperator	!
>7067	FunctionDef	directory_entry 
>7068	ParameterList	system 
>7069	Parameter	 
>7070	Identifier	ec
>7071	ParameterType	system 
>7072	ReturnType	file_status
>7073	CompoundStatement	 
>7074	ReturnStatement	 
>7075	Identifier	m_symlink_status
>7076	IfStatement	if ( ! status_known ( m_symlink_status ) )
>7077	ElseStatement	else
>7078	IfStatement	if ( ec != 0 )
>7079	ExpressionStatement	 
>7080	CallExpression	ec -> clear ( )
>7081	ArgumentList	 
>7082	Callee	ec -> clear
>7083	PtrMemberAccess	ec -> clear
>7084	Identifier	clear
>7085	Identifier	ec
>7086	Condition	 
>7087	EqualityExpression	ec != 0
>7088	PrimaryExpression	0
>7089	Identifier	ec
>7090	ExpressionStatement	 
>7091	AssignmentExpr	m_symlink_status = detail 
>7092	CallExpression	detail 
>7093	ArgumentList	m_path
>7094	Argument	ec
>7095	Identifier	ec
>7096	Argument	m_path
>7097	Identifier	m_path
>7098	Callee	detail 
>7099	Identifier	detail 
>7100	Identifier	m_symlink_status
>7101	Condition	 
>7102	UnaryOp	! status_known ( m_symlink_status )
>7103	CallExpression	status_known ( m_symlink_status )
>7104	ArgumentList	m_symlink_status
>7105	Argument	m_symlink_status
>7106	Identifier	m_symlink_status
>7107	Callee	status_known
>7108	Identifier	status_known
>7109	UnaryOperator	!
>7118	FunctionDef	path_max (std 
>7119	ParameterList	std 
>7120	Parameter	 
>7121	Identifier	result
>7122	ParameterType	std 
>7123	ReturnType	ifdef BOOST_POSIX_API error_code
>7124	CompoundStatement	 
>7125	IdentifierDeclStatement	 
>7126	IdentifierDecl	max = PATH_MAX
>7127	AssignmentExpr	max = PATH_MAX
>7128	Identifier	PATH_MAX
>7129	Identifier	PATH_MAX
>7130	Identifier	max
>7131	IdentifierDeclType	std 
>7132	Statement	 
>7133	Statement	 
>7134	Statement	 
>7147	FunctionDef	readdir_r_simulator (DIR * dirp , struct dirent * entry , struct dirent * * result)
>7148	ParameterList	DIR * dirp , struct dirent * entry , struct dirent * * result
>7149	Parameter	 
>7150	Identifier	result
>7151	ParameterType	struct dirent * *
>7152	Parameter	 
>7153	Identifier	entry
>7154	ParameterType	struct dirent *
>7155	Parameter	 
>7156	Identifier	dirp
>7157	ParameterType	DIR *
>7158	ReturnType	inline int
>7159	CompoundStatement	 
>7160	ReturnStatement	 
>7161	PrimaryExpression	0
>7162	ExpressionStatement	 
>7163	AssignmentExpr	* result = entry
>7164	Identifier	entry
>7165	UnaryOp	* result
>7166	Identifier	result
>7167	UnaryOperator	*
>7168	ExpressionStatement	 
>7169	CallExpression	std 
>7170	ArgumentList	entry -> d_name
>7171	Argument	p -> d_name
>7172	PtrMemberAccess	p -> d_name
>7173	Identifier	d_name
>7174	Identifier	p
>7175	Argument	entry -> d_name
>7176	PtrMemberAccess	entry -> d_name
>7177	Identifier	d_name
>7178	Identifier	entry
>7179	Callee	std 
>7180	Identifier	std 
>7181	ReturnStatement	 
>7182	Identifier	errno
>7183	Statement	 
>7184	Statement	 
>7185	Statement	 
>7186	Statement	 
>7187	Statement	 
>7188	Statement	 
>7189	Statement	 
>7190	Statement	 
>7191	Statement	 
>7192	Statement	 
>7193	Statement	 
>7194	Statement	 
>7195	Statement	 
>7196	Statement	 
>7197	ExpressionStatement	 
>7198	AssignmentExpr	* result = 0
>7199	PrimaryExpression	0
>7200	UnaryOp	* result
>7201	Identifier	result
>7202	UnaryOperator	*
>7203	IdentifierDeclStatement	 
>7204	IdentifierDecl	* p
>7205	Identifier	p
>7206	IdentifierDeclType	struct dirent *
>7207	Statement	 
>7208	CompoundStatement	 
>7209	ExpressionStatement	 
>7210	CallExpression	readdir_r ( dirp , entry , result )
>7211	ArgumentList	dirp
>7212	Argument	result
>7213	Identifier	result
>7214	Argument	entry
>7215	Identifier	entry
>7216	Argument	dirp
>7217	Identifier	dirp
>7218	Callee	readdir_r
>7219	Identifier	readdir_r
>7220	Statement	 
>7221	Statement	 
>7222	Statement	 
>7223	Statement	 
>7224	Statement	 
>7225	Statement	 
>7226	Statement	 
>7227	Statement	 
>7228	Statement	 
>7229	Statement	 
>7230	Statement	 
>7231	Statement	 
>7232	Statement	 
>7233	Statement	 
>7234	Statement	 
>7235	Statement	 
>7236	Statement	 
>7237	Statement	 
>7238	Statement	 
>7239	Statement	 
>7240	Statement	 
>7241	Statement	 
>7242	Statement	 
>7243	Statement	 
>7244	Statement	 
>7245	Statement	 
>7246	Statement	 
>7247	Statement	 
>7248	Statement	 
>7249	Statement	 
>7250	Statement	 
>7251	Statement	 
>7252	Statement	 
>7253	Statement	 
>7254	Statement	 
>7255	Statement	 
>7256	Statement	 
>7257	Statement	 
>7258	Statement	 
>7259	Statement	 
>7260	Statement	 
>7261	Statement	 
>7262	Statement	 
>7263	Statement	 
>7264	Statement	 
>7265	Statement	 
>7266	Statement	 
>7267	Statement	 
>7268	Statement	 
>7269	Statement	 
>7270	Statement	 
>7271	Statement	 
>7272	Statement	 
>7273	Statement	 
>7274	Statement	 
>7275	Statement	 
>7276	Statement	 
>7277	Statement	 
>7278	Statement	 
>7279	Statement	 
>7280	Statement	 
>7281	Statement	 
>7282	ExpressionStatement	 
>7283	AssignmentExpr	errno = 0
>7284	PrimaryExpression	0
>7285	Identifier	errno
>7299	FunctionDef	dir_itr_increment (void * & handle , void * & buffer , string & target , fs 
>7300	ParameterList	void * & handle , void * & buffer , string & target , fs 
>7301	Parameter	 
>7302	Identifier	symlink_sf
>7303	ParameterType	fs 
>7304	Parameter	 
>7305	Identifier	sf
>7306	ParameterType	fs 
>7307	Parameter	 
>7308	Identifier	target
>7309	ParameterType	string &
>7310	Parameter	 
>7311	Identifier	buffer
>7312	ParameterType	void * &
>7313	Parameter	 
>7314	Identifier	handle
>7315	ParameterType	void * &
>7316	ReturnType	error_code
>7317	CompoundStatement	 
>7318	ReturnStatement	 
>7319	Identifier	ok
>7320	Statement	 
>7321	IfStatement	if ( entry -> d_type == DT_UNKNOWN )
>7322	ElseStatement	else
>7323	CompoundStatement	 
>7324	IfStatement	if ( entry -> d_type == DT_DIR )
>7325	ElseStatement	else
>7326	IfStatement	if ( entry -> d_type == DT_REG )
>7327	ElseStatement	else
>7328	IfStatement	if ( entry -> d_type == DT_LNK )
>7329	ElseStatement	else
>7330	ExpressionStatement	 
>7331	AssignmentExpr	sf = symlink_sf = fs 
>7332	AssignmentExpr	symlink_sf = fs 
>7333	CallExpression	fs 
>7334	ArgumentList	fs 
>7335	Argument	fs 
>7336	Identifier	fs 
>7337	Callee	fs 
>7338	Identifier	fs 
>7339	Identifier	symlink_sf
>7340	Identifier	sf
>7341	CompoundStatement	 
>7342	ExpressionStatement	 
>7343	AssignmentExpr	symlink_sf = fs 
>7344	CallExpression	fs 
>7345	ArgumentList	fs 
>7346	Argument	fs 
>7347	Identifier	fs 
>7348	Callee	fs 
>7349	Identifier	fs 
>7350	Identifier	symlink_sf
>7351	ExpressionStatement	 
>7352	AssignmentExpr	sf = fs 
>7353	CallExpression	fs 
>7354	ArgumentList	fs 
>7355	Argument	fs 
>7356	Identifier	fs 
>7357	Callee	fs 
>7358	Identifier	fs 
>7359	Identifier	sf
>7360	Condition	 
>7361	EqualityExpression	entry -> d_type == DT_LNK
>7362	Identifier	DT_LNK
>7363	PtrMemberAccess	entry -> d_type
>7364	Identifier	d_type
>7365	Identifier	entry
>7366	ExpressionStatement	 
>7367	AssignmentExpr	sf = symlink_sf = fs 
>7368	AssignmentExpr	symlink_sf = fs 
>7369	CallExpression	fs 
>7370	ArgumentList	fs 
>7371	Argument	fs 
>7372	Identifier	fs 
>7373	Callee	fs 
>7374	Identifier	fs 
>7375	Identifier	symlink_sf
>7376	Identifier	sf
>7377	Condition	 
>7378	EqualityExpression	entry -> d_type == DT_REG
>7379	Identifier	DT_REG
>7380	PtrMemberAccess	entry -> d_type
>7381	Identifier	d_type
>7382	Identifier	entry
>7383	ExpressionStatement	 
>7384	AssignmentExpr	sf = symlink_sf = fs 
>7385	AssignmentExpr	symlink_sf = fs 
>7386	CallExpression	fs 
>7387	ArgumentList	fs 
>7388	Argument	fs 
>7389	Identifier	fs 
>7390	Callee	fs 
>7391	Identifier	fs 
>7392	Identifier	symlink_sf
>7393	Identifier	sf
>7394	Condition	 
>7395	EqualityExpression	entry -> d_type == DT_DIR
>7396	Identifier	DT_DIR
>7397	PtrMemberAccess	entry -> d_type
>7398	Identifier	d_type
>7399	Identifier	entry
>7400	CompoundStatement	 
>7401	ExpressionStatement	 
>7402	AssignmentExpr	sf = symlink_sf = fs 
>7403	AssignmentExpr	symlink_sf = fs 
>7404	CallExpression	fs 
>7405	ArgumentList	fs 
>7406	Argument	fs 
>7407	Identifier	fs 
>7408	Callee	fs 
>7409	Identifier	fs 
>7410	Identifier	symlink_sf
>7411	Identifier	sf
>7412	Condition	 
>7413	EqualityExpression	entry -> d_type == DT_UNKNOWN
>7414	Identifier	DT_UNKNOWN
>7415	PtrMemberAccess	entry -> d_type
>7416	Identifier	d_type
>7417	Identifier	entry
>7418	Statement	 
>7419	Statement	 
>7420	ExpressionStatement	 
>7421	AssignmentExpr	target = entry -> d_name
>7422	PtrMemberAccess	entry -> d_name
>7423	Identifier	d_name
>7424	Identifier	entry
>7425	Identifier	target
>7426	IfStatement	if ( result == 0 )
>7427	ElseStatement	else
>7428	ExpressionStatement	 
>7429	AssignmentExpr	sf = symlink_sf = fs 
>7430	AssignmentExpr	symlink_sf = fs 
>7431	CallExpression	fs 
>7432	ArgumentList	fs 
>7433	Argument	fs 
>7434	Identifier	fs 
>7435	Callee	fs 
>7436	Identifier	fs 
>7437	Identifier	symlink_sf
>7438	Identifier	sf
>7439	ReturnStatement	 
>7440	CallExpression	fs 
>7441	ArgumentList	handle
>7442	Argument	buffer
>7443	Identifier	buffer
>7444	Argument	handle
>7445	Identifier	handle
>7446	Callee	fs 
>7447	Identifier	fs 
>7448	Condition	 
>7449	EqualityExpression	result == 0
>7450	PrimaryExpression	0
>7451	Identifier	result
>7452	ReturnStatement	 
>7453	CallExpression	error_code ( errno , system_category ( ) )
>7454	ArgumentList	errno
>7455	Argument	system_category ( )
>7456	CallExpression	system_category ( )
>7457	ArgumentList	 
>7458	Callee	system_category
>7459	Identifier	system_category
>7460	Argument	errno
>7461	Identifier	errno
>7462	Callee	error_code
>7463	Identifier	error_code
>7464	Statement	 
>7465	Statement	 
>7466	Statement	 
>7467	Statement	 
>7468	Statement	 
>7469	Statement	 
>7470	Statement	 
>7471	Statement	 
>7472	Statement	 
>7473	Statement	 
>7474	Statement	 
>7475	Statement	 
>7476	Statement	 
>7477	Statement	 
>7478	Statement	 
>7479	Statement	 
>7480	Statement	 
>7481	Statement	 
>7482	Statement	 
>7483	Statement	 
>7484	Statement	 
>7485	Statement	 
>7486	Statement	 
>7487	Statement	 
>7488	Statement	 
>7489	IdentifierDeclStatement	 
>7490	IdentifierDecl	return_code
>7491	Identifier	return_code
>7492	IdentifierDeclType	int
>7493	IdentifierDeclStatement	 
>7494	IdentifierDecl	* result
>7495	Identifier	result
>7496	IdentifierDeclType	dirent *
>7497	IdentifierDeclStatement	 
>7498	IdentifierDecl	* entry ( static_cast < dirent * > ( buffer ) )
>7499	Identifier	buffer
>7500	Identifier	entry
>7501	IdentifierDeclType	dirent * ( static_cast < dirent * > ( buffer ) )
>7502	ExpressionStatement	 
>7503	CallExpression	BOOST_ASSERT ( buffer != 0 )
>7504	ArgumentList	buffer != 0
>7505	Argument	buffer != 0
>7506	EqualityExpression	buffer != 0
>7507	PrimaryExpression	0
>7508	Identifier	buffer
>7509	Callee	BOOST_ASSERT
>7510	Identifier	BOOST_ASSERT
>7539	FunctionDef	dir_itr_first (void * & handle , const fs 
>7540	ParameterList	void * & handle , const fs 
>7541	Parameter	 
>7542	Identifier	eof_on_permission_denied
>7543	ParameterType	bool
>7544	Parameter	 
>7545	Identifier	symlink_sf
>7546	ParameterType	fs 
>7547	Parameter	 
>7548	Identifier	sf
>7549	ParameterType	fs 
>7550	Parameter	 
>7551	Identifier	target
>7552	ParameterType	wstring &
>7553	Parameter	 
>7554	Identifier	dir
>7555	ParameterType	const fs 
>7556	Parameter	 
>7557	Identifier	handle
>7558	ParameterType	void * &
>7559	ReturnType	error_code
>7560	CompoundStatement	 
>7561	ReturnStatement	 
>7562	CallExpression	error_code ( )
>7563	ArgumentList	 
>7564	Callee	error_code
>7565	Identifier	error_code
>7566	IfStatement	if ( data . dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT )
>7567	ElseStatement	else
>7568	CompoundStatement	 
>7569	ExpressionStatement	 
>7570	CallExpression	symlink_sf . permissions ( sf . permissions ( ) )
>7571	ArgumentList	sf . permissions ( )
>7572	Argument	sf . permissions ( )
>7573	CallExpression	sf . permissions ( )
>7574	ArgumentList	 
>7575	Callee	sf . permissions
>7576	MemberAccess	sf . permissions
>7577	Identifier	permissions
>7578	Identifier	sf
>7579	Callee	symlink_sf . permissions
>7580	MemberAccess	symlink_sf . permissions
>7581	Identifier	permissions
>7582	Identifier	symlink_sf
>7583	ExpressionStatement	 
>7584	CallExpression	sf . permissions ( make_permissions ( data . cFileName , data . dwFileAttributes ) )
>7585	ArgumentList	make_permissions ( data . cFileName , data . dwFileAttributes )
>7586	Argument	make_permissions ( data . cFileName , data . dwFileAttributes )
>7587	CallExpression	make_permissions ( data . cFileName , data . dwFileAttributes )
>7588	ArgumentList	data . cFileName
>7589	Argument	data . dwFileAttributes
>7590	MemberAccess	data . dwFileAttributes
>7591	Identifier	dwFileAttributes
>7592	Identifier	data
>7593	Argument	data . cFileName
>7594	MemberAccess	data . cFileName
>7595	Identifier	cFileName
>7596	Identifier	data
>7597	Callee	make_permissions
>7598	Identifier	make_permissions
>7599	Callee	sf . permissions
>7600	MemberAccess	sf . permissions
>7601	Identifier	permissions
>7602	Identifier	sf
>7603	IfStatement	if ( data . dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY )
>7604	ElseStatement	else
>7605	CompoundStatement	 
>7606	ExpressionStatement	 
>7607	CallExpression	symlink_sf . type ( fs 
>7608	ArgumentList	fs 
>7609	Argument	fs 
>7610	Identifier	fs 
>7611	Callee	symlink_sf . type
>7612	MemberAccess	symlink_sf . type
>7613	Identifier	type
>7614	Identifier	symlink_sf
>7615	ExpressionStatement	 
>7616	CallExpression	sf . type ( fs 
>7617	ArgumentList	fs 
>7618	Argument	fs 
>7619	Identifier	fs 
>7620	Callee	sf . type
>7621	MemberAccess	sf . type
>7622	Identifier	type
>7623	Identifier	sf
>7624	CompoundStatement	 
>7625	ExpressionStatement	 
>7626	CallExpression	symlink_sf . type ( fs 
>7627	ArgumentList	fs 
>7628	Argument	fs 
>7629	Identifier	fs 
>7630	Callee	symlink_sf . type
>7631	MemberAccess	symlink_sf . type
>7632	Identifier	type
>7633	Identifier	symlink_sf
>7634	ExpressionStatement	 
>7635	CallExpression	sf . type ( fs 
>7636	ArgumentList	fs 
>7637	Argument	fs 
>7638	Identifier	fs 
>7639	Callee	sf . type
>7640	MemberAccess	sf . type
>7641	Identifier	type
>7642	Identifier	sf
>7643	Condition	 
>7644	BitAndExpression	data . dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY
>7645	Identifier	FILE_ATTRIBUTE_DIRECTORY
>7646	MemberAccess	data . dwFileAttributes
>7647	Identifier	dwFileAttributes
>7648	Identifier	data
>7649	CompoundStatement	 
>7650	ExpressionStatement	 
>7651	CallExpression	symlink_sf . type ( fs 
>7652	ArgumentList	fs 
>7653	Argument	fs 
>7654	Identifier	fs 
>7655	Callee	symlink_sf . type
>7656	MemberAccess	symlink_sf . type
>7657	Identifier	type
>7658	Identifier	symlink_sf
>7659	ExpressionStatement	 
>7660	CallExpression	sf . type ( fs 
>7661	ArgumentList	fs 
>7662	Argument	fs 
>7663	Identifier	fs 
>7664	Callee	sf . type
>7665	MemberAccess	sf . type
>7666	Identifier	type
>7667	Identifier	sf
>7668	Condition	 
>7669	BitAndExpression	data . dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT
>7670	Identifier	FILE_ATTRIBUTE_REPARSE_POINT
>7671	MemberAccess	data . dwFileAttributes
>7672	Identifier	dwFileAttributes
>7673	Identifier	data
>7674	ExpressionStatement	 
>7675	AssignmentExpr	target = data . cFileName
>7676	MemberAccess	data . cFileName
>7677	Identifier	cFileName
>7678	Identifier	data
>7679	Identifier	target
>7680	CompoundStatement	 
>7681	ReturnStatement	 
>7682	CallExpression	error_code ( ( le == ERROR_FILE_NOT_FOUND || ( eof_on_permission_denied && le == ERROR_ACCESS_DENIED ) || le == \
>7683	ArgumentList	( le == ERROR_FILE_NOT_FOUND || ( eof_on_permission_denied && le == ERROR_ACCESS_DENIED ) || le == ERROR_NO_MORE_\
>7684	Argument	system_category ( )
>7685	CallExpression	system_category ( )
>7686	ArgumentList	 
>7687	Callee	system_category
>7688	Identifier	system_category
>7689	Argument	( le == ERROR_FILE_NOT_FOUND || ( eof_on_permission_denied && le == ERROR_ACCESS_DENIED ) || le == ERROR_NO_MORE_\
>7690	ConditionalExpression	( le == ERROR_FILE_NOT_FOUND || ( eof_on_permission_denied && le == ERROR_ACCESS_DENIED ) || le == ERROR_NO_MORE_\
>7691	Identifier	le
>7692	PrimaryExpression	0
>7693	Condition	le == ERROR_FILE_NOT_FOUND || ( eof_on_permission_denied && le == ERROR_ACCESS_DENIED ) || le == ERROR_NO_MORE_FILES
>7694	OrExpression	le == ERROR_FILE_NOT_FOUND || ( eof_on_permission_denied && le == ERROR_ACCESS_DENIED ) || le == ERROR_\
>7695	OrExpression	( eof_on_permission_denied && le == ERROR_ACCESS_DENIED ) || le == ERROR_NO_MORE_FILES
>7696	EqualityExpression	le == ERROR_NO_MORE_FILES
>7697	Identifier	ERROR_NO_MORE_FILES
>7698	Identifier	le
>7699	AndExpression	eof_on_permission_denied && le == ERROR_ACCESS_DENIED
>7700	EqualityExpression	le == ERROR_ACCESS_DENIED
>7701	Identifier	ERROR_ACCESS_DENIED
>7702	Identifier	le
>7703	Identifier	eof_on_permission_denied
>7704	EqualityExpression	le == ERROR_FILE_NOT_FOUND
>7705	Identifier	ERROR_FILE_NOT_FOUND
>7706	Identifier	le
>7707	Callee	error_code
>7708	Identifier	error_code
>7709	ExpressionStatement	 
>7710	CallExpression	GetLastError ( )
>7711	ArgumentList	 
>7712	Callee	GetLastError
>7713	Identifier	GetLastError
>7714	Statement	 
>7715	Statement	 
>7716	Statement	 
>7717	Statement	 
>7718	ExpressionStatement	 
>7719	AssignmentExpr	handle = 0
>7720	PrimaryExpression	0
>7721	Identifier	handle
>7722	Statement	 
>7723	Statement	 
>7724	Statement	 
>7725	Statement	 
>7726	Statement	 
>7727	Statement	 
>7728	Statement	 
>7729	Statement	 
>7730	Statement	 
>7731	Statement	 
>7732	Statement	 
>7733	Statement	 
>7734	Statement	 
>7735	Statement	 
>7736	Statement	 
>7737	Statement	 
>7738	Statement	 
>7739	Statement	 
>7740	Statement	 
>7741	Statement	 
>7742	Statement	 
>7743	IdentifierDeclStatement	 
>7744	IdentifierDecl	data
>7745	Identifier	data
>7746	IdentifierDeclType	WIN32_FIND_DATAW
>7747	ExpressionStatement	 
>7748	PrimaryExpression	\"*\"
>7749	Statement	 
>7750	Statement	 
>7751	Statement	 
>7752	Statement	 
>7753	Statement	 
>7754	Statement	 
>7755	Statement	 
>7756	Statement	 
>7757	Statement	 
>7758	Statement	 
>7759	Statement	 
>7760	Statement	 
>7761	Statement	 
>7762	Statement	 
>7763	Statement	 
>7764	Statement	 
>7765	Statement	 
>7766	Statement	 
>7767	Statement	 
>7768	Statement	 
>7769	Statement	 
>7770	Statement	 
>7771	Statement	 
>7772	Statement	 
>7773	Statement	 
>7774	Statement	 
>7775	Statement	 
>7776	Statement	 
>7777	Statement	 
>7778	Statement	 
>7779	Statement	 
>7780	Statement	 
>7781	Statement	 
>7782	Statement	 
>7783	Statement	 
>7784	Statement	 
>7785	Statement	 
>7786	Statement	 
>7787	Statement	 
>7788	Statement	 
>7789	Statement	 
>7790	Statement	 
>7791	Statement	 
>7792	Statement	 
>7793	Statement	 
>7794	Statement	 
>7795	Statement	 
>7796	Statement	 
>7797	Statement	 
>7798	Statement	 
>7799	Statement	 
>7800	Statement	 
>7801	Statement	 
>7802	Statement	 
>7803	Statement	 
>7804	Statement	 
>7805	Statement	 
>7806	Statement	 
>7807	IdentifierDeclStatement	 
>7808	IdentifierDecl	dirpath ( dir . wstring ( ) )
>7809	CallExpression	dir . wstring ( )
>7810	ArgumentList	 
>7811	Callee	dir . wstring
>7812	MemberAccess	dir . wstring
>7813	Identifier	wstring
>7814	Identifier	dir
>7815	Identifier	dirpath
>7816	IdentifierDeclType	wstring
>7843	FunctionDef	dir_itr_increment (void * & handle , wstring & target , fs 
>7844	ParameterList	void * & handle , wstring & target , fs 
>7845	Parameter	 
>7846	Identifier	symlink_sf
>7847	ParameterType	fs 
>7848	Parameter	 
>7849	Identifier	sf
>7850	ParameterType	fs 
>7851	Parameter	 
>7852	Identifier	target
>7853	ParameterType	wstring &
>7854	Parameter	 
>7855	Identifier	handle
>7856	ParameterType	void * &
>7857	ReturnType	error_code
>7858	CompoundStatement	 
>7859	ReturnStatement	 
>7860	CallExpression	error_code ( )
>7861	ArgumentList	 
>7862	Callee	error_code
>7863	Identifier	error_code
>7864	IfStatement	if ( data . dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT )
>7865	ElseStatement	else
>7866	CompoundStatement	 
>7867	ExpressionStatement	 
>7868	CallExpression	symlink_sf . permissions ( sf . permissions ( ) )
>7869	ArgumentList	sf . permissions ( )
>7870	Argument	sf . permissions ( )
>7871	CallExpression	sf . permissions ( )
>7872	ArgumentList	 
>7873	Callee	sf . permissions
>7874	MemberAccess	sf . permissions
>7875	Identifier	permissions
>7876	Identifier	sf
>7877	Callee	symlink_sf . permissions
>7878	MemberAccess	symlink_sf . permissions
>7879	Identifier	permissions
>7880	Identifier	symlink_sf
>7881	ExpressionStatement	 
>7882	CallExpression	sf . permissions ( make_permissions ( data . cFileName , data . dwFileAttributes ) )
>7883	ArgumentList	make_permissions ( data . cFileName , data . dwFileAttributes )
>7884	Argument	make_permissions ( data . cFileName , data . dwFileAttributes )
>7885	CallExpression	make_permissions ( data . cFileName , data . dwFileAttributes )
>7886	ArgumentList	data . cFileName
>7887	Argument	data . dwFileAttributes
>7888	MemberAccess	data . dwFileAttributes
>7889	Identifier	dwFileAttributes
>7890	Identifier	data
>7891	Argument	data . cFileName
>7892	MemberAccess	data . cFileName
>7893	Identifier	cFileName
>7894	Identifier	data
>7895	Callee	make_permissions
>7896	Identifier	make_permissions
>7897	Callee	sf . permissions
>7898	MemberAccess	sf . permissions
>7899	Identifier	permissions
>7900	Identifier	sf
>7901	IfStatement	if ( data . dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY )
>7902	ElseStatement	else
>7903	CompoundStatement	 
>7904	ExpressionStatement	 
>7905	CallExpression	symlink_sf . type ( fs 
>7906	ArgumentList	fs 
>7907	Argument	fs 
>7908	Identifier	fs 
>7909	Callee	symlink_sf . type
>7910	MemberAccess	symlink_sf . type
>7911	Identifier	type
>7912	Identifier	symlink_sf
>7913	ExpressionStatement	 
>7914	CallExpression	sf . type ( fs 
>7915	ArgumentList	fs 
>7916	Argument	fs 
>7917	Identifier	fs 
>7918	Callee	sf . type
>7919	MemberAccess	sf . type
>7920	Identifier	type
>7921	Identifier	sf
>7922	CompoundStatement	 
>7923	ExpressionStatement	 
>7924	CallExpression	symlink_sf . type ( fs 
>7925	ArgumentList	fs 
>7926	Argument	fs 
>7927	Identifier	fs 
>7928	Callee	symlink_sf . type
>7929	MemberAccess	symlink_sf . type
>7930	Identifier	type
>7931	Identifier	symlink_sf
>7932	ExpressionStatement	 
>7933	CallExpression	sf . type ( fs 
>7934	ArgumentList	fs 
>7935	Argument	fs 
>7936	Identifier	fs 
>7937	Callee	sf . type
>7938	MemberAccess	sf . type
>7939	Identifier	type
>7940	Identifier	sf
>7941	Condition	 
>7942	BitAndExpression	data . dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY
>7943	Identifier	FILE_ATTRIBUTE_DIRECTORY
>7944	MemberAccess	data . dwFileAttributes
>7945	Identifier	dwFileAttributes
>7946	Identifier	data
>7947	CompoundStatement	 
>7948	ExpressionStatement	 
>7949	CallExpression	symlink_sf . type ( fs 
>7950	ArgumentList	fs 
>7951	Argument	fs 
>7952	Identifier	fs 
>7953	Callee	symlink_sf . type
>7954	MemberAccess	symlink_sf . type
>7955	Identifier	type
>7956	Identifier	symlink_sf
>7957	ExpressionStatement	 
>7958	CallExpression	sf . type ( fs 
>7959	ArgumentList	fs 
>7960	Argument	fs 
>7961	Identifier	fs 
>7962	Callee	sf . type
>7963	MemberAccess	sf . type
>7964	Identifier	type
>7965	Identifier	sf
>7966	Condition	 
>7967	BitAndExpression	data . dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT
>7968	Identifier	FILE_ATTRIBUTE_REPARSE_POINT
>7969	MemberAccess	data . dwFileAttributes
>7970	Identifier	dwFileAttributes
>7971	Identifier	data
>7972	ExpressionStatement	 
>7973	AssignmentExpr	target = data . cFileName
>7974	MemberAccess	data . cFileName
>7975	Identifier	cFileName
>7976	Identifier	data
>7977	Identifier	target
>7978	CompoundStatement	 
>7979	ReturnStatement	 
>7980	CallExpression	error_code ( error == ERROR_NO_MORE_FILES ? 0 
>7981	ArgumentList	error == ERROR_NO_MORE_FILES ? 0 
>7982	Argument	system_category ( )
>7983	CallExpression	system_category ( )
>7984	ArgumentList	 
>7985	Callee	system_category
>7986	Identifier	system_category
>7987	Argument	error == ERROR_NO_MORE_FILES ? 0 
>7988	ConditionalExpression	error == ERROR_NO_MORE_FILES ? 0 
>7989	Identifier	error
>7990	PrimaryExpression	0
>7991	Condition	error == ERROR_NO_MORE_FILES
>7992	EqualityExpression	error == ERROR_NO_MORE_FILES
>7993	Identifier	ERROR_NO_MORE_FILES
>7994	Identifier	error
>7995	Callee	error_code
>7996	Identifier	error_code
>7997	ExpressionStatement	 
>7998	CallExpression	fs 
>7999	ArgumentList	handle
>8000	Argument	handle
>8001	Identifier	handle
>8002	Callee	fs 
>8003	Identifier	fs 
>8004	ExpressionStatement	 
>8005	CallExpression	GetLastError ( )
>8006	ArgumentList	 
>8007	Callee	GetLastError
>8008	Identifier	GetLastError
>8009	Statement	 
>8010	Statement	 
>8011	Statement	 
>8012	Statement	 
>8013	Statement	 
>8014	Statement	 
>8015	Statement	 
>8016	Statement	 
>8017	Statement	 
>8018	Statement	 
>8019	Statement	 
>8020	Statement	 
>8021	Statement	 
>8022	Statement	 
>8023	Statement	 
>8024	Statement	 
>8025	Statement	 
>8026	IdentifierDeclStatement	 
>8027	IdentifierDecl	data
>8028	Identifier	data
>8029	IdentifierDeclType	WIN32_FIND_DATAW
>8055	FunctionDef	directory_iterator_construct (directory_iterator & it , const path & p , system 
>8056	ParameterList	directory_iterator & it , const path & p , system 
>8057	Parameter	 
>8058	Identifier	eof_on_permission_denied
>8059	ParameterType	bool
>8060	Parameter	 
>8061	Identifier	ec
>8062	ParameterType	system 
>8063	Parameter	 
>8064	Identifier	p
>8065	ParameterType	const path &
>8066	Parameter	 
>8067	Identifier	it
>8068	ParameterType	directory_iterator &
>8069	ReturnType	void
>8070	CompoundStatement	 
>8071	IfStatement	if ( it . m_imp -> handle == 0 )
>8072	ElseStatement	else
>8073	CompoundStatement	 
>8074	IfStatement	if ( filename [ 0 ] == dot && ( filename . size ( ) == 1 || ( filename [ 1 ] == dot && filename . size ( ) == 2 ) ) )
>8075	CompoundStatement	 
>8076	ExpressionStatement	 
>8077	CallExpression	it . increment ( * ec )
>8078	ArgumentList	* ec
>8079	Argument	* ec
>8080	UnaryOp	* ec
>8081	Identifier	ec
>8082	UnaryOperator	*
>8083	Callee	it . increment
>8084	MemberAccess	it . increment
>8085	Identifier	increment
>8086	Identifier	it
>8087	Condition	 
>8088	AndExpression	filename [ 0 ] == dot && ( filename . size ( ) == 1 || ( filename [ 1 ] == dot && filename . size ( ) == \
>8089	OrExpression	filename . size ( ) == 1 || ( filename [ 1 ] == dot && filename . size ( ) == 2 )
>8090	AndExpression	filename [ 1 ] == dot && filename . size ( ) == 2
>8091	EqualityExpression	filename . size ( ) == 2
>8092	PrimaryExpression	2
>8093	CallExpression	filename . size ( )
>8094	ArgumentList	 
>8095	Callee	filename . size
>8096	MemberAccess	filename . size
>8097	Identifier	size
>8098	Identifier	filename
>8099	EqualityExpression	filename [ 1 ] == dot
>8100	Identifier	dot
>8101	ArrayIndexing	filename [ 1 ]
>8102	PrimaryExpression	1
>8103	Identifier	filename
>8104	EqualityExpression	filename . size ( ) == 1
>8105	PrimaryExpression	1
>8106	CallExpression	filename . size ( )
>8107	ArgumentList	 
>8108	Callee	filename . size
>8109	MemberAccess	filename . size
>8110	Identifier	size
>8111	Identifier	filename
>8112	EqualityExpression	filename [ 0 ] == dot
>8113	Identifier	dot
>8114	ArrayIndexing	filename [ 0 ]
>8115	PrimaryExpression	0
>8116	Identifier	filename
>8117	ExpressionStatement	 
>8118	CallExpression	it . m_imp -> dir_entry . assign ( p / filename , file_stat , symlink_file_stat )
>8119	ArgumentList	p / filename
>8120	Argument	symlink_file_stat
>8121	Identifier	symlink_file_stat
>8122	Argument	file_stat
>8123	Identifier	file_stat
>8124	Argument	p / filename
>8125	MultiplicativeExpression	p / filename
>8126	Identifier	filename
>8127	Identifier	p
>8128	Callee	it . m_imp -> dir_entry . assign
>8129	MemberAccess	it . m_imp -> dir_entry . assign
>8130	Identifier	assign
>8131	PtrMemberAccess	it . m_imp -> dir_entry
>8132	Identifier	dir_entry
>8133	MemberAccess	it . m_imp
>8134	Identifier	m_imp
>8135	Identifier	it
>8136	ExpressionStatement	 
>8137	CallExpression	it . m_imp . reset ( )
>8138	ArgumentList	 
>8139	Callee	it . m_imp . reset
>8140	MemberAccess	it . m_imp . reset
>8141	Identifier	reset
>8142	MemberAccess	it . m_imp
>8143	Identifier	m_imp
>8144	Identifier	it
>8145	Condition	 
>8146	EqualityExpression	it . m_imp -> handle == 0
>8147	PrimaryExpression	0
>8148	PtrMemberAccess	it . m_imp -> handle
>8149	Identifier	handle
>8150	MemberAccess	it . m_imp
>8151	Identifier	m_imp
>8152	Identifier	it
>8153	IfStatement	if ( result )
>8154	CompoundStatement	 
>8155	ReturnStatement	 
>8156	ExpressionStatement	 
>8157	CallExpression	error ( true , result , p , ec , \"boost
>8158	ArgumentList	true
>8159	Argument	\"boost
>8160	PrimaryExpression	\"boost
>8161	Argument	ec
>8162	Identifier	ec
>8163	Argument	p
>8164	Identifier	p
>8165	Argument	result
>8166	Identifier	result
>8167	Argument	true
>8168	Identifier	true
>8169	Callee	error
>8170	Identifier	error
>8171	ExpressionStatement	 
>8172	CallExpression	it . m_imp . reset ( )
>8173	ArgumentList	 
>8174	Callee	it . m_imp . reset
>8175	MemberAccess	it . m_imp . reset
>8176	Identifier	reset
>8177	MemberAccess	it . m_imp
>8178	Identifier	m_imp
>8179	Identifier	it
>8180	Condition	 
>8181	Identifier	result
>8182	ExpressionStatement	 
>8183	Statement	 
>8184	Statement	 
>8185	Statement	 
>8186	Statement	 
>8187	Statement	 
>8188	Statement	 
>8189	Statement	 
>8190	Statement	 
>8191	Statement	 
>8192	Statement	 
>8193	Statement	 
>8194	Statement	 
>8195	Statement	 
>8196	Statement	 
>8197	Statement	 
>8198	Statement	 
>8199	Statement	 
>8200	Statement	 
>8201	Statement	 
>8202	Statement	 
>8203	Statement	 
>8204	Statement	 
>8205	Statement	 
>8206	Statement	 
>8207	Statement	 
>8208	Statement	 
>8209	Statement	 
>8210	Statement	 
>8211	Statement	 
>8212	Statement	 
>8213	Statement	 
>8214	Statement	 
>8215	Statement	 
>8216	Statement	 
>8217	Statement	 
>8218	Statement	 
>8219	Statement	 
>8220	IdentifierDeclStatement	 
>8221	IdentifierDecl	symlink_file_stat
>8222	Identifier	symlink_file_stat
>8223	IdentifierDeclType	file_status
>8224	IdentifierDecl	file_stat
>8225	Identifier	file_stat
>8226	IdentifierDeclType	file_status
>8227	IdentifierDeclStatement	 
>8228	IdentifierDecl	filename
>8229	Identifier	filename
>8230	IdentifierDeclType	path 
>8231	IfStatement	if ( error ( p . empty ( ) , not_found_error_code , p , ec , \"boost
>8232	ReturnStatement	 
>8233	Condition	 
>8234	CallExpression	error ( p . empty ( ) , not_found_error_code , p , ec , \"boost
>8235	ArgumentList	p . empty ( )
>8236	Argument	\"boost
>8237	PrimaryExpression	\"boost
>8238	Argument	ec
>8239	Identifier	ec
>8240	Argument	p
>8241	Identifier	p
>8242	Argument	not_found_error_code
>8243	Identifier	not_found_error_code
>8244	Argument	p . empty ( )
>8245	CallExpression	p . empty ( )
>8246	ArgumentList	 
>8247	Callee	p . empty
>8248	MemberAccess	p . empty
>8249	Identifier	empty
>8250	Identifier	p
>8251	Callee	error
>8252	Identifier	error
>8277	FunctionDef	directory_iterator_increment (directory_iterator & it , system 
>8278	ParameterList	directory_iterator & it , system 
>8279	Parameter	 
>8280	Identifier	ec
>8281	ParameterType	system 
>8282	Parameter	 
>8283	Identifier	it
>8284	ParameterType	directory_iterator &
>8285	ReturnType	void
>8286	CompoundStatement	 
>8287	ForStatement	for ( ; ; )
>8288	CompoundStatement	 
>8289	IfStatement	if ( ! ( filename [ 0 ] == dot && ( filename . size ( ) == 1 || ( filename [ 1 ] == dot && filename . size ( ) == \
>8290	CompoundStatement	 
>8291	ReturnStatement	 
>8292	ExpressionStatement	 
>8293	CallExpression	it . m_imp -> dir_entry . replace_filename ( filename , file_stat , symlink_file_stat )
>8294	ArgumentList	filename
>8295	Argument	symlink_file_stat
>8296	Identifier	symlink_file_stat
>8297	Argument	file_stat
>8298	Identifier	file_stat
>8299	Argument	filename
>8300	Identifier	filename
>8301	Callee	it . m_imp -> dir_entry . replace_filename
>8302	MemberAccess	it . m_imp -> dir_entry . replace_filename
>8303	Identifier	replace_filename
>8304	PtrMemberAccess	it . m_imp -> dir_entry
>8305	Identifier	dir_entry
>8306	MemberAccess	it . m_imp
>8307	Identifier	m_imp
>8308	Identifier	it
>8309	Condition	 
>8310	UnaryOp	! ( filename [ 0 ] == dot && ( filename . size ( ) == 1 || ( filename [ 1 ] == dot && filename . size ( ) == 2 ) ) )
>8311	AndExpression	filename [ 0 ] == dot && ( filename . size ( ) == 1 || ( filename [ 1 ] == dot && filename . size ( ) == \
>8312	OrExpression	filename . size ( ) == 1 || ( filename [ 1 ] == dot && filename . size ( ) == 2 )
>8313	AndExpression	filename [ 1 ] == dot && filename . size ( ) == 2
>8314	EqualityExpression	filename . size ( ) == 2
>8315	PrimaryExpression	2
>8316	CallExpression	filename . size ( )
>8317	ArgumentList	 
>8318	Callee	filename . size
>8319	MemberAccess	filename . size
>8320	Identifier	size
>8321	Identifier	filename
>8322	EqualityExpression	filename [ 1 ] == dot
>8323	Identifier	dot
>8324	ArrayIndexing	filename [ 1 ]
>8325	PrimaryExpression	1
>8326	Identifier	filename
>8327	EqualityExpression	filename . size ( ) == 1
>8328	PrimaryExpression	1
>8329	CallExpression	filename . size ( )
>8330	ArgumentList	 
>8331	Callee	filename . size
>8332	MemberAccess	filename . size
>8333	Identifier	size
>8334	Identifier	filename
>8335	EqualityExpression	filename [ 0 ] == dot
>8336	Identifier	dot
>8337	ArrayIndexing	filename [ 0 ]
>8338	PrimaryExpression	0
>8339	Identifier	filename
>8340	UnaryOperator	!
>8341	IfStatement	if ( it . m_imp -> handle == 0 )
>8342	CompoundStatement	 
>8343	ReturnStatement	 
>8344	ExpressionStatement	 
>8345	CallExpression	it . m_imp . reset ( )
>8346	ArgumentList	 
>8347	Callee	it . m_imp . reset
>8348	MemberAccess	it . m_imp . reset
>8349	Identifier	reset
>8350	MemberAccess	it . m_imp
>8351	Identifier	m_imp
>8352	Identifier	it
>8353	Condition	 
>8354	EqualityExpression	it . m_imp -> handle == 0
>8355	PrimaryExpression	0
>8356	PtrMemberAccess	it . m_imp -> handle
>8357	Identifier	handle
>8358	MemberAccess	it . m_imp
>8359	Identifier	m_imp
>8360	Identifier	it
>8361	IfStatement	if ( temp_ec )
>8362	ElseStatement	else
>8363	IfStatement	if ( ec != 0 )
>8364	ExpressionStatement	 
>8365	CallExpression	ec -> clear ( )
>8366	ArgumentList	 
>8367	Callee	ec -> clear
>8368	PtrMemberAccess	ec -> clear
>8369	Identifier	clear
>8370	Identifier	ec
>8371	Condition	 
>8372	EqualityExpression	ec != 0
>8373	PrimaryExpression	0
>8374	Identifier	ec
>8375	CompoundStatement	 
>8376	ReturnStatement	 
>8377	ExpressionStatement	 
>8378	CallExpression	ec -> assign ( BOOST_ERRNO , system_category ( ) )
>8379	ArgumentList	BOOST_ERRNO
>8380	Argument	system_category ( )
>8381	CallExpression	system_category ( )
>8382	ArgumentList	 
>8383	Callee	system_category
>8384	Identifier	system_category
>8385	Argument	BOOST_ERRNO
>8386	Identifier	BOOST_ERRNO
>8387	Callee	ec -> assign
>8388	PtrMemberAccess	ec -> assign
>8389	Identifier	assign
>8390	Identifier	ec
>8391	IfStatement	if ( ec == 0 )
>8392	ExpressionStatement	 
>8393	CallExpression	BOOST_FILESYSTEM_THROW ( filesystem_error ( \"boost
>8394	ArgumentList	filesystem_error ( \"boost
>8395	Argument	filesystem_error ( \"boost
>8396	CallExpression	filesystem_error ( \"boost
>8397	ArgumentList	\"boost
>8398	Argument	error_code ( BOOST_ERRNO , system_category ( ) )
>8399	CallExpression	error_code ( BOOST_ERRNO , system_category ( ) )
>8400	ArgumentList	BOOST_ERRNO
>8401	Argument	system_category ( )
>8402	CallExpression	system_category ( )
>8403	ArgumentList	 
>8404	Callee	system_category
>8405	Identifier	system_category
>8406	Argument	BOOST_ERRNO
>8407	Identifier	BOOST_ERRNO
>8408	Callee	error_code
>8409	Identifier	error_code
>8410	Argument	error_path
>8411	Identifier	error_path
>8412	Argument	\"boost
>8413	PrimaryExpression	\"boost
>8414	Callee	filesystem_error
>8415	Identifier	filesystem_error
>8416	Callee	BOOST_FILESYSTEM_THROW
>8417	Identifier	BOOST_FILESYSTEM_THROW
>8418	Condition	 
>8419	EqualityExpression	ec == 0
>8420	PrimaryExpression	0
>8421	Identifier	ec
>8422	ExpressionStatement	 
>8423	CallExpression	it . m_imp . reset ( )
>8424	ArgumentList	 
>8425	Callee	it . m_imp . reset
>8426	MemberAccess	it . m_imp . reset
>8427	Identifier	reset
>8428	MemberAccess	it . m_imp
>8429	Identifier	m_imp
>8430	Identifier	it
>8431	IdentifierDeclStatement	 
>8432	IdentifierDecl	error_path ( it . m_imp -> dir_entry . path ( ) . parent_path ( ) )
>8433	CallExpression	it . m_imp -> dir_entry . path ( ) . parent_path ( )
>8434	ArgumentList	 
>8435	Callee	it . m_imp -> dir_entry . path ( ) . parent_path
>8436	MemberAccess	it . m_imp -> dir_entry . path ( ) . parent_path
>8437	Identifier	parent_path
>8438	CallExpression	it . m_imp -> dir_entry . path ( )
>8439	ArgumentList	 
>8440	Callee	it . m_imp -> dir_entry . path
>8441	MemberAccess	it . m_imp -> dir_entry . path
>8442	Identifier	path
>8443	PtrMemberAccess	it . m_imp -> dir_entry
>8444	Identifier	dir_entry
>8445	MemberAccess	it . m_imp
>8446	Identifier	m_imp
>8447	Identifier	it
>8448	Identifier	error_path
>8449	IdentifierDeclType	path
>8450	Condition	 
>8451	Identifier	temp_ec
>8452	ExpressionStatement	 
>8453	Statement	 
>8454	Statement	 
>8455	Statement	 
>8456	Statement	 
>8457	Statement	 
>8458	Statement	 
>8459	Statement	 
>8460	Statement	 
>8461	Statement	 
>8462	Statement	 
>8463	Statement	 
>8464	Statement	 
>8465	Statement	 
>8466	Statement	 
>8467	Statement	 
>8468	Statement	 
>8469	Statement	 
>8470	Statement	 
>8471	Statement	 
>8472	Statement	 
>8473	Statement	 
>8474	Statement	 
>8475	Statement	 
>8476	Statement	 
>8477	Statement	 
>8478	Statement	 
>8479	Statement	 
>8480	Statement	 
>8481	IdentifierDeclStatement	 
>8482	IdentifierDecl	temp_ec
>8483	Identifier	temp_ec
>8484	IdentifierDeclType	system 
>8485	IdentifierDeclStatement	 
>8486	IdentifierDecl	symlink_file_stat
>8487	Identifier	symlink_file_stat
>8488	IdentifierDeclType	file_status
>8489	IdentifierDecl	file_stat
>8490	Identifier	file_stat
>8491	IdentifierDeclType	file_status
>8492	IdentifierDeclStatement	 
>8493	IdentifierDecl	filename
>8494	Identifier	filename
>8495	IdentifierDeclType	path 
>8496	ExpressionStatement	 
>8497	CallExpression	BOOST_ASSERT_MSG ( it . m_imp -> handle != 0 , \"internal program error\" )
>8498	ArgumentList	it . m_imp -> handle != 0
>8499	Argument	\"internal program error\"
>8500	PrimaryExpression	\"internal program error\"
>8501	Argument	it . m_imp -> handle != 0
>8502	EqualityExpression	it . m_imp -> handle != 0
>8503	PrimaryExpression	0
>8504	PtrMemberAccess	it . m_imp -> handle
>8505	Identifier	handle
>8506	MemberAccess	it . m_imp
>8507	Identifier	m_imp
>8508	Identifier	it
>8509	Callee	BOOST_ASSERT_MSG
>8510	Identifier	BOOST_ASSERT_MSG
>8511	ExpressionStatement	 
>8512	CallExpression	BOOST_ASSERT_MSG ( it . m_imp . get ( ) , \"attempt to increment end iterator\" )
>8513	ArgumentList	it . m_imp . get ( )
>8514	Argument	\"attempt to increment end iterator\"
>8515	PrimaryExpression	\"attempt to increment end iterator\"
>8516	Argument	it . m_imp . get ( )
>8517	CallExpression	it . m_imp . get ( )
>8518	ArgumentList	 
>8519	Callee	it . m_imp . get
>8520	MemberAccess	it . m_imp . get
>8521	Identifier	get
>8522	MemberAccess	it . m_imp
>8523	Identifier	m_imp
>8524	Identifier	it
>8525	Callee	BOOST_ASSERT_MSG
>8526	Identifier	BOOST_ASSERT_MSG
<59=71,70,60
<60=67,64,61
<61=63,62
<64=66,65
<67=69,68
<71=74,72
<72=73
<74=134,121,75
<75=76
<76=77
<77=117,93,78
<78=79
<79=80
<80=89,81
<81=87,82
<82=83
<83=85,84
<85=86
<87=88
<89=90
<90=92,91
<93=94
<94=115,95
<95=96
<96=97
<97=113,98
<98=111,99
<99=100
<100=109,101
<101=107,102
<102=103
<103=105,104
<105=106
<107=108
<109=110
<111=112
<113=114
<115=116
<117=118
<118=120,119
<121=122
<122=130,123
<123=124
<124=126,125
<126=127
<127=129,128
<130=131
<131=133,132
<134=135
<135=137,136
<148=163,162,149
<149=159,156,153,150
<150=152,151
<153=155,154
<156=158,157
<159=161,160
<163=166,164
<164=165
<166=228,215,167
<167=168
<168=169
<169=211,185,170
<170=171
<171=172
<172=181,173
<173=179,174
<174=175
<175=177,176
<177=178
<179=180
<181=182
<182=184,183
<185=186
<186=209,187
<187=188
<188=189
<189=207,190
<190=205,203,191
<191=192
<192=201,193
<193=199,194
<194=195
<195=197,196
<197=198
<199=200
<201=202
<203=204
<205=206
<207=208
<209=210
<211=212
<212=214,213
<215=216
<216=224,217
<217=218
<218=220,219
<220=221
<221=223,222
<224=225
<225=227,226
<228=229
<229=231,230
<243=261,260,244
<244=257,254,251,248,245
<245=247,246
<248=250,249
<251=253,252
<254=256,255
<257=259,258
<261=264,262
<262=263
<264=328,315,265
<265=266
<266=267
<267=311,283,268
<268=269
<269=270
<270=279,271
<271=277,272
<272=273
<273=275,274
<275=276
<277=278
<279=280
<280=282,281
<283=284
<284=309,285
<285=286
<286=287
<287=307,288
<288=305,303,301,289
<289=290
<290=299,291
<291=297,292
<292=293
<293=295,294
<295=296
<297=298
<299=300
<301=302
<303=304
<305=306
<307=308
<309=310
<311=312
<312=314,313
<315=316
<316=324,317
<317=318
<318=320,319
<320=321
<321=323,322
<324=325
<325=327,326
<328=329
<329=331,330
<344=362,361,345
<345=358,355,352,349,346
<346=348,347
<349=351,350
<352=354,353
<355=357,356
<358=360,359
<362=365,363
<363=364
<365=409,396,366
<366=367
<367=368
<368=392,376,369
<369=370
<370=371
<371=373,372
<373=375,374
<376=377
<377=390,378
<378=379
<379=380
<380=388,381
<381=386,384,382
<382=383
<384=385
<386=387
<388=389
<390=391
<392=393
<393=395,394
<396=397
<397=405,398
<398=399
<399=401,400
<401=402
<402=404,403
<405=406
<406=408,407
<409=410
<410=412,411
<423=444,443,424
<424=440,437,434,431,428,425
<425=427,426
<428=430,429
<431=433,432
<434=436,435
<437=439,438
<440=442,441
<444=447,445
<445=446
<447=493,480,448
<448=449
<449=450
<450=476,458,451
<451=452
<452=453
<453=455,454
<455=457,456
<458=459
<459=474,460
<460=461
<461=462
<462=472,463
<463=470,468,466,464
<464=465
<466=467
<468=469
<470=471
<472=473
<474=475
<476=477
<477=479,478
<480=481
<481=489,482
<482=483
<483=485,484
<485=486
<486=488,487
<489=490
<490=492,491
<493=494
<494=496,495
<508=514,513,509
<509=510
<510=512,511
<514=515
<515=516
<516=518,517
<518=522,519
<519=520
<520=521
<522=523
<530=536,535,531
<531=532
<532=534,533
<536=537
<537=538
<538=547,539
<539=540
<540=541
<541=543,542
<543=544
<544=546,545
<547=548
<555=561,560,556
<556=557
<557=559,558
<561=562
<562=563
<563=572,564
<564=565
<565=566
<566=568,567
<568=569
<569=571,570
<572=573
<580=592,591,581
<581=588,585,582
<582=584,583
<585=587,586
<588=590,589
<592=640,639,638,637,636,635,634,633,632,631,630,629,628,627,626,625,624,623,622,621,620,619,595,593
<593=594
<595=596
<596=599,597
<597=598
<599=600
<600=617,601
<601=608,606,604,602
<602=603
<604=605
<606=607
<608=609
<609=616,610
<610=614,611
<611=612
<612=613
<614=615
<617=618
<640=681,666,641
<641=642
<642=643
<643=646,644
<644=645
<646=647
<647=664,648
<648=655,653,651,649
<649=650
<651=652
<653=654
<655=656
<656=663,657
<657=661,658
<658=659
<659=660
<661=662
<664=665
<666=669,667
<667=668
<669=677,670
<670=671
<671=673,672
<673=674
<674=676,675
<677=678
<678=680,679
<681=682
<682=684,683
<697=709,708,698
<698=705,702,699
<699=701,700
<702=704,703
<705=707,706
<709=831,739,728,710
<710=711
<711=720,713,712
<713=719,714
<714=718,715
<715=717,716
<720=721
<721=725,722
<722=724,723
<725=727,726
<728=729
<729=737,730
<730=735,733,731
<731=732
<733=734
<735=736
<737=738
<739=827,740
<740=741
<741=821,817,814,742
<742=795,778,760,743
<743=752,744
<744=745
<745=751,746
<746=750,747
<747=749,748
<752=753
<753=757,754
<754=756,755
<757=759,758
<760=761
<761=777,762
<762=775,763
<763=768,766,764
<764=765
<766=767
<768=769
<769=771,770
<771=772
<772=774,773
<775=776
<778=787,779
<779=780
<780=786,781
<781=785,782
<782=784,783
<787=788
<788=792,789
<789=791,790
<792=794,793
<795=796
<796=813,812,797
<797=811,798
<798=809,799
<799=802,800
<800=801
<802=803
<803=805,804
<805=806
<806=808,807
<809=810
<814=816,815
<817=818
<818=820,819
<821=822
<822=823
<823=826,825,824
<827=828
<828=830,829
<831=832
<832=837,836,833
<833=835,834
<858=864,863,859
<859=860
<860=862,861
<864=865
<865=866
<866=870,867
<867=869,868
<870=872,871
<880=892,891,881
<881=888,885,882
<882=884,883
<885=887,886
<888=890,889
<892=1165,1160,1143,1142,1141,1140,1139,1138,1137,1136,1135,1134,1133,1132,1131,1130,1129,1128,1127,1126,1125,1124,1123,1120,1116,1115,1114,1113,1112,1111,1110,1109,1108,1107,1106,1105,1104,1103,1102,1101,1100,1099,1088,1077,1070,1069,1068,1067,1066,1065,1064,1063,1062,1061,1060,1059,1058,1057,1056,1055,1054,1053,1052,1051,1050,1049,1048,1047,1046,1015,1002,893,897,903,904,905,906,907,908,909,910,911,912,913,919,920,921,922,923,924,925,926,927,928,929,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001
<893=894
<894=896,895
<897=898
<898=902,899
<899=901,900
<913=914
<914=918,915
<915=917,916
<929=972,930
<930=935,931
<931=932
<932=934,933
<935=971,970,969,968,967,966,965,964,963,962,961,960,959,958,957,956,955,954,953,952,951,950,949,948,947,946,940,936
<936=937
<937=939,938
<940=942,941
<942=943
<943=945,944
<972=973
<973=975,974
<1002=1012,1006,1003
<1003=1005,1004
<1006=1011,1010,1007
<1007=1009,1008
<1012=1014,1013
<1015=1039,1030,1029,1022,1018,1016
<1016=1017
<1018=1019
<1019=1021,1020
<1022=1023
<1023=1027,1024
<1024=1025
<1025=1026
<1027=1028
<1030=1031
<1031=1037,1032
<1032=1033
<1033=1034
<1034=1036,1035
<1037=1038
<1039=1040
<1040=1045,1044,1041
<1041=1043,1042
<1070=1075,1071
<1071=1072
<1072=1074,1073
<1075=1076
<1077=1078
<1078=1087,1086,1079
<1079=1085,1080
<1080=1084,1081
<1081=1083,1082
<1088=1098,1091,1089
<1089=1090
<1091=1092
<1092=1096,1093
<1093=1094
<1094=1095
<1096=1097
<1116=1117
<1117=1119,1118
<1120=1121
<1121=1122
<1143=1152,1144
<1144=1151,1150,1145
<1145=1149,1146
<1146=1148,1147
<1152=1159,1158,1153
<1153=1157,1154
<1154=1156,1155
<1160=1161
<1161=1164,1163,1162
<1165=1166
<1166=1171,1170,1167
<1167=1169,1168
<1194=1203,1202,1195
<1195=1199,1196
<1196=1198,1197
<1199=1201,1200
<1203=1204
<1204=1205
<1205=1207,1206
<1207=1208
<1208=1210,1209
<1210=1216,1211
<1211=1214,1212
<1212=1213
<1214=1215
<1216=1217
<1227=1233,1232,1228
<1228=1229
<1229=1231,1230
<1233=1234
<1234=1235
<1235=1263,1236
<1236=1260,1237
<1237=1257,1238
<1238=1254,1239
<1239=1251,1240
<1240=1248,1241
<1241=1245,1242
<1242=1244,1243
<1245=1247,1246
<1248=1250,1249
<1251=1253,1252
<1254=1256,1255
<1257=1259,1258
<1260=1262,1261
<1263=1265,1264
<1278=1287,1286,1279
<1279=1283,1280
<1280=1282,1281
<1283=1285,1284
<1287=1418,1403,1290,1288
<1288=1289
<1290=1299,1291
<1291=1292
<1292=1298,1293
<1293=1297,1294
<1294=1296,1295
<1299=1300
<1300=1378,1301
<1301=1353,1302
<1302=1328,1303
<1303=1305,1304
<1305=1326,1306
<1306=1309,1307
<1307=1308
<1309=1310
<1310=1312,1311
<1312=1313
<1313=1315,1314
<1315=1317,1316
<1317=1318
<1318=1320,1319
<1320=1322,1321
<1322=1323
<1323=1325,1324
<1326=1327
<1328=1330,1329
<1330=1351,1331
<1331=1334,1332
<1332=1333
<1334=1335
<1335=1337,1336
<1337=1338
<1338=1340,1339
<1340=1342,1341
<1342=1343
<1343=1345,1344
<1345=1347,1346
<1347=1348
<1348=1350,1349
<1351=1352
<1353=1355,1354
<1355=1376,1356
<1356=1359,1357
<1357=1358
<1359=1360
<1360=1362,1361
<1362=1363
<1363=1365,1364
<1365=1367,1366
<1367=1368
<1368=1370,1369
<1370=1372,1371
<1372=1373
<1373=1375,1374
<1376=1377
<1378=1380,1379
<1380=1401,1381
<1381=1384,1382
<1382=1383
<1384=1385
<1385=1387,1386
<1387=1388
<1388=1390,1389
<1390=1392,1391
<1392=1393
<1393=1395,1394
<1395=1397,1396
<1397=1398
<1398=1400,1399
<1401=1402
<1403=1412,1404
<1404=1405
<1405=1411,1406
<1406=1410,1407
<1407=1409,1408
<1412=1413
<1413=1415,1414
<1415=1417,1416
<1418=1419
<1419=1428,1427,1420
<1420=1426,1421
<1421=1425,1422
<1422=1424,1423
<1449=1455,1454,1450
<1450=1451
<1451=1453,1452
<1455=1471,1470,1469,1468,1467,1466,1465,1464,1463,1462,1461,1460,1459,1458,1456
<1456=1457
<1471=1472
<1472=1489,1488,1473
<1473=1487,1474
<1474=1478,1475
<1475=1477,1476
<1478=1486,1479
<1479=1485,1480
<1480=1482,1481
<1482=1484,1483
<1499=1508,1507,1500
<1500=1504,1501
<1501=1503,1502
<1504=1506,1505
<1508=1528,1524,1523,1522,1521,1520,1519,1518,1517,1516,1515,1514,1513,1512,1511,1509
<1509=1510
<1524=1525
<1525=1527,1526
<1528=1529
<1529=1534,1533,1530
<1530=1532,1531
<1544=1549,1545
<1545=1546
<1546=1548,1547
<1554=1556,1555
<1556=1564,1557
<1557=1558
<1558=1562,1559
<1559=1560
<1560=1561
<1562=1563
<1564=1566,1565
<1566=1567
<1567=1569,1568
<1575=1599,1598,1576
<1576=1595,1592,1589,1586,1583,1580,1577
<1577=1579,1578
<1580=1582,1581
<1583=1585,1584
<1586=1588,1587
<1589=1591,1590
<1592=1594,1593
<1595=1597,1596
<1599=1625,1624,1600
<1600=1601
<1601=1622,1602
<1602=1615,1613,1611,1609,1607,1605,1603
<1603=1604
<1605=1606
<1607=1608
<1609=1610
<1611=1612
<1613=1614
<1615=1616
<1616=1618,1617
<1618=1619
<1619=1621,1620
<1622=1623
<1637=1643,1642,1638
<1638=1639
<1639=1641,1640
<1643=1721,1712,1707,1703,1702,1701,1700,1699,1669,1662,1661,1660,1659,1658,1657,1656,1655,1644
<1644=1645
<1645=1647,1646
<1647=1649,1648
<1649=1651,1650
<1651=1652
<1652=1654,1653
<1662=1665,1663
<1663=1664
<1665=1666
<1666=1668,1667
<1669=1670
<1670=1697,1671
<1671=1693,1691,1689,1687,1680,1678,1674,1672
<1672=1673
<1674=1675
<1675=1677,1676
<1678=1679
<1680=1681
<1681=1683,1682
<1683=1684
<1684=1686,1685
<1687=1688
<1689=1690
<1691=1692
<1693=1694
<1694=1696,1695
<1697=1698
<1703=1704
<1704=1706,1705
<1707=1708
<1708=1711,1710,1709
<1712=1715,1713
<1713=1714
<1715=1716
<1716=1718,1717
<1718=1720,1719
<1721=1722
<1722=1748,1747,1723
<1723=1745,1724
<1724=1743,1741,1735,1733,1731,1727,1725
<1725=1726
<1727=1728
<1728=1730,1729
<1731=1732
<1733=1734
<1735=1736
<1736=1740,1737
<1737=1739,1738
<1741=1742
<1743=1744
<1745=1746
<1772=1787,1786,1773
<1773=1783,1780,1777,1774
<1774=1776,1775
<1777=1779,1778
<1780=1782,1781
<1783=1785,1784
<1787=1818,1817,1816,1815,1814,1813,1812,1811,1810,1809,1808,1807,1806,1805,1804,1803,1802,1801,1800,1799,1798,1797,1796,1795,1794,1793,1792,1791,1790,1789,1788
<1826=1835,1834,1827
<1827=1831,1828
<1828=1830,1829
<1831=1833,1832
<1835=1933,1932,1931,1930,1929,1928,1927,1926,1925,1906,1874,1843,1836
<1836=1837
<1837=1841,1838
<1838=1839
<1839=1840
<1841=1842
<1843=1870,1844
<1844=1845
<1845=1868,1846
<1846=1847
<1847=1848
<1848=1866,1849
<1849=1864,1862,1850
<1850=1851
<1851=1860,1852
<1852=1858,1853
<1853=1854
<1854=1856,1855
<1856=1857
<1858=1859
<1860=1861
<1862=1863
<1864=1865
<1866=1867
<1868=1869
<1870=1871
<1871=1873,1872
<1874=1899,1889,1875
<1875=1876
<1876=1885,1877
<1877=1878
<1878=1879
<1879=1883,1880
<1880=1881
<1881=1882
<1883=1884
<1885=1886
<1886=1888,1887
<1889=1890
<1890=1891
<1891=1897,1892
<1892=1895,1893
<1893=1894
<1895=1896
<1897=1898
<1899=1900
<1900=1904,1901
<1901=1902
<1902=1903
<1904=1905
<1906=1921,1907
<1907=1908
<1908=1917,1909
<1909=1915,1910
<1910=1911
<1911=1913,1912
<1913=1914
<1915=1916
<1917=1918
<1918=1920,1919
<1921=1922
<1922=1924,1923
<1950=1959,1958,1951
<1951=1955,1952
<1952=1954,1953
<1955=1957,1956
<1959=2037,2036,2035,2034,2033,2032,2031,2030,2029,2028,2027,2026,2025,2024,2004,1992,1968,1960
<1960=1961
<1961=1964,1963,1962
<1964=1965
<1965=1967,1966
<1968=1988,1969
<1969=1972,1970
<1970=1971
<1972=1981,1973
<1973=1974
<1974=1977,1976,1975
<1977=1978
<1978=1980,1979
<1981=1982
<1982=1986,1983
<1983=1984
<1984=1985
<1986=1987
<1988=1989
<1989=1991,1990
<1992=2000,1993
<1993=1994
<1994=1996,1995
<1996=1997
<1997=1999,1998
<2000=2001
<2001=2003,2002
<2004=2020,2005
<2005=2006
<2006=2007
<2007=2009,2008
<2009=2010
<2010=2012,2011
<2012=2018,2013
<2013=2016,2014
<2014=2015
<2016=2017
<2018=2019
<2020=2021
<2021=2023,2022
<2054=2063,2062,2055
<2055=2059,2056
<2056=2058,2057
<2059=2061,2060
<2063=2105,2101,2095,2094,2093,2092,2091,2090,2089,2088,2087,2086,2085,2084,2083,2082,2081,2080,2079,2078,2077,2076,2075,2074,2073,2072,2071,2064
<2064=2065
<2065=2069,2066
<2066=2067
<2067=2068
<2069=2070
<2095=2096
<2096=2098,2097
<2098=2100,2099
<2101=2102
<2102=2104,2103
<2105=2106
<2106=2128,2127,2107
<2107=2126,2108
<2108=2124,2109
<2109=2122,2120,2118,2116,2114,2112,2110
<2110=2111
<2112=2113
<2114=2115
<2116=2117
<2118=2119
<2120=2121
<2122=2123
<2124=2125
<2145=2154,2153,2146
<2146=2150,2147
<2147=2149,2148
<2150=2152,2151
<2154=2274,2264,2254,2244,2234,2157,2155
<2155=2156
<2157=2225,2193,2158
<2158=2159
<2159=2184,2166,2160
<2160=2161
<2161=2162
<2162=2163
<2163=2165,2164
<2166=2183,2182,2172,2171,2167
<2167=2168
<2168=2170,2169
<2172=2175,2173
<2173=2174
<2175=2176
<2176=2178,2177
<2178=2179
<2179=2181,2180
<2184=2185
<2185=2192,2186
<2186=2188,2187
<2188=2189
<2189=2191,2190
<2193=2194
<2194=2218,2195
<2195=2196
<2196=2217,2197
<2197=2211,2198
<2198=2205,2199
<2199=2201,2200
<2201=2202
<2202=2204,2203
<2205=2207,2206
<2207=2208
<2208=2210,2209
<2211=2213,2212
<2213=2214
<2214=2216,2215
<2218=2219
<2219=2221,2220
<2221=2222
<2222=2224,2223
<2225=2226
<2226=2233,2227
<2227=2229,2228
<2229=2230
<2230=2232,2231
<2234=2237,2235
<2235=2236
<2237=2238
<2238=2240,2239
<2240=2241
<2241=2243,2242
<2244=2245
<2245=2253,2252,2246
<2246=2248,2247
<2248=2249
<2249=2251,2250
<2254=2255
<2255=2263,2262,2256
<2256=2258,2257
<2258=2259
<2259=2261,2260
<2264=2265
<2265=2273,2272,2266
<2266=2268,2267
<2268=2269
<2269=2271,2270
<2274=2275
<2275=2292,2291,2276
<2276=2284,2283,2277
<2277=2281,2278
<2278=2279
<2279=2280
<2281=2282
<2284=2285
<2285=2287,2286
<2287=2288
<2288=2290,2289
<2310=2313,2312,2311
<2313=2327,2326,2322,2314
<2314=2315
<2315=2317,2316
<2317=2321,2318
<2318=2320,2319
<2322=2323
<2323=2325,2324
<2333=2339,2338,2334
<2334=2335
<2335=2337,2336
<2339=2377,2366,2355,2344,2340
<2340=2341
<2341=2343,2342
<2344=2349,2345
<2345=2346
<2346=2348,2347
<2349=2350
<2350=2352,2351
<2352=2354,2353
<2355=2360,2356
<2356=2357
<2357=2359,2358
<2360=2361
<2361=2363,2362
<2363=2365,2364
<2366=2371,2367
<2367=2368
<2368=2370,2369
<2371=2372
<2372=2374,2373
<2374=2376,2375
<2377=2378
<2378=2383,2382,2379
<2379=2381,2380
<2392=2398,2397,2393
<2393=2394
<2394=2396,2395
<2398=2425,2414,2403,2399
<2399=2400
<2400=2402,2401
<2403=2408,2404
<2404=2405
<2405=2407,2406
<2408=2409
<2409=2411,2410
<2411=2413,2412
<2414=2419,2415
<2415=2416
<2416=2418,2417
<2419=2420
<2420=2422,2421
<2422=2424,2423
<2425=2426
<2426=2431,2430,2427
<2427=2429,2428
<2439=2445,2444,2440
<2440=2441
<2441=2443,2442
<2445=2483,2472,2461,2450,2446
<2446=2447
<2447=2449,2448
<2450=2455,2451
<2451=2452
<2452=2454,2453
<2455=2456
<2456=2458,2457
<2458=2460,2459
<2461=2466,2462
<2462=2463
<2463=2465,2464
<2466=2467
<2467=2469,2468
<2469=2471,2470
<2472=2477,2473
<2473=2474
<2474=2476,2475
<2477=2478
<2478=2480,2479
<2480=2482,2481
<2483=2484
<2484=2489,2488,2485
<2485=2487,2486
<2498=2510,2509,2499
<2499=2506,2503,2500
<2500=2502,2501
<2503=2505,2504
<2506=2508,2507
<2510=2871,2867,2863,2851,2759,2754,2539,2527,2513,2511
<2511=2512
<2513=2514
<2514=2525,2515
<2515=2518,2516
<2516=2517
<2518=2519
<2519=2521,2520
<2521=2522
<2522=2524,2523
<2525=2526
<2527=2535,2528
<2528=2529
<2529=2531,2530
<2531=2532
<2532=2534,2533
<2535=2536
<2536=2538,2537
<2539=2752,2540
<2540=2748,2741,2541
<2541=2728,2719,2716,2542
<2542=2708,2692,2686,2669,2657,2543
<2543=2655,2544
<2544=2643,2631,2624,2550,2546,2545
<2546=2547
<2547=2549,2548
<2550=2617,2589,2551
<2551=2552
<2552=2584,2580,2557,2553
<2553=2554
<2554=2556,2555
<2557=2576,2567,2564,2558
<2558=2559
<2559=2563,2560
<2560=2562,2561
<2564=2566,2565
<2567=2568
<2568=2575,2569
<2569=2571,2570
<2571=2572
<2572=2574,2573
<2576=2577
<2577=2579,2578
<2580=2581
<2581=2583,2582
<2584=2585
<2585=2588,2587,2586
<2589=2594,2590
<2590=2591
<2591=2593,2592
<2594=2613,2604,2601,2595
<2595=2596
<2596=2600,2597
<2597=2599,2598
<2601=2603,2602
<2604=2605
<2605=2612,2606
<2606=2608,2607
<2608=2609
<2609=2611,2610
<2613=2614
<2614=2616,2615
<2617=2618
<2618=2620,2619
<2620=2621
<2621=2623,2622
<2624=2625
<2625=2627,2626
<2627=2628
<2628=2630,2629
<2631=2637,2632
<2632=2633
<2633=2635,2634
<2635=2636
<2637=2638
<2638=2642,2639
<2639=2641,2640
<2643=2644
<2644=2654,2653,2645
<2645=2651,2646
<2646=2649,2647
<2647=2648
<2649=2650
<2651=2652
<2655=2656
<2657=2663,2658
<2658=2659
<2659=2661,2660
<2661=2662
<2663=2664
<2664=2668,2665
<2665=2667,2666
<2669=2670
<2670=2685,2684,2671
<2671=2682,2672
<2672=2673
<2673=2674
<2674=2680,2675
<2675=2678,2676
<2676=2677
<2678=2679
<2680=2681
<2682=2683
<2686=2687
<2687=2691,2688
<2688=2690,2689
<2692=2702,2693
<2693=2695,2694
<2695=2696
<2696=2698,2697
<2698=2699
<2699=2701,2700
<2702=2703
<2703=2705,2704
<2705=2707,2706
<2708=2710,2709
<2710=2711
<2711=2713,2712
<2713=2715,2714
<2716=2718,2717
<2719=2720
<2720=2727,2721
<2721=2723,2722
<2723=2724
<2724=2726,2725
<2728=2729
<2729=2730
<2730=2740,2739,2731
<2731=2738,2732
<2732=2734,2733
<2734=2735
<2735=2737,2736
<2741=2742
<2742=2744,2743
<2744=2745
<2745=2747,2746
<2748=2749
<2749=2751,2750
<2752=2753
<2754=2755
<2755=2758,2757,2756
<2759=2842,2794,2760
<2760=2761
<2761=2792,2762
<2762=2771,2765,2763
<2763=2764
<2765=2766
<2766=2768,2767
<2768=2770,2769
<2771=2788,2772
<2772=2773
<2773=2786,2774
<2774=2775
<2775=2776
<2776=2784,2777
<2777=2782,2780,2778
<2778=2779
<2780=2781
<2782=2783
<2784=2785
<2786=2787
<2788=2789
<2789=2791,2790
<2792=2793
<2794=2811,2797,2795
<2795=2796
<2797=2798
<2798=2807,2799
<2799=2805,2800
<2800=2801
<2801=2803,2802
<2803=2804
<2805=2806
<2807=2808
<2808=2810,2809
<2811=2838,2812
<2812=2813
<2813=2836,2814
<2814=2815
<2815=2816
<2816=2834,2817
<2817=2832,2830,2818
<2818=2819
<2819=2828,2820
<2820=2826,2821
<2821=2822
<2822=2824,2823
<2824=2825
<2826=2827
<2828=2829
<2830=2831
<2832=2833
<2834=2835
<2836=2837
<2838=2839
<2839=2841,2840
<2842=2843
<2843=2845,2844
<2845=2847,2846
<2847=2848
<2848=2850,2849
<2851=2852
<2852=2862,2861,2853
<2853=2859,2854
<2854=2857,2855
<2855=2856
<2857=2858
<2859=2860
<2863=2864
<2864=2866,2865
<2867=2868
<2868=2870,2869
<2871=2872
<2872=2891,2890,2873
<2873=2883,2882,2874
<2874=2880,2875
<2875=2878,2876
<2876=2877
<2878=2879
<2880=2881
<2883=2884
<2884=2886,2885
<2886=2887
<2887=2889,2888
<2932=2944,2943,2933
<2933=2940,2937,2934
<2934=2936,2935
<2937=2939,2938
<2940=2942,2941
<2944=2980,2979,2978,2977,2976,2975,2974,2973,2972,2945
<2945=2946
<2946=2970,2947
<2947=2968,2956,2954,2952,2950,2948
<2948=2949
<2950=2951
<2952=2953
<2954=2955
<2956=2957
<2957=2966,2958
<2958=2964,2959
<2959=2960
<2960=2962,2961
<2962=2963
<2964=2965
<2966=2967
<2968=2969
<2970=2971
<2991=3000,2999,2992
<2992=2996,2993
<2993=2995,2994
<2996=2998,2997
<3000=3140,3126,3101,3089,3010,3001
<3001=3002
<3002=3008,3003
<3003=3006,3004
<3004=3005
<3006=3007
<3008=3009
<3010=3080,3011
<3011=3066,3012
<3012=3057,3013
<3013=3048,3014
<3014=3046,3015
<3015=3018,3016
<3016=3017
<3018=3042,3026,3019
<3019=3020
<3020=3021
<3021=3023,3022
<3023=3025,3024
<3026=3027
<3027=3040,3028
<3028=3029
<3029=3030
<3030=3038,3031
<3031=3036,3034,3032
<3032=3033
<3034=3035
<3036=3037
<3038=3039
<3040=3041
<3042=3043
<3043=3045,3044
<3046=3047
<3048=3049
<3049=3055,3050
<3050=3053,3051
<3051=3052
<3053=3054
<3055=3056
<3057=3058
<3058=3060,3059
<3060=3062,3061
<3062=3063
<3063=3065,3064
<3066=3067
<3067=3079,3078,3068
<3068=3077,3069
<3069=3075,3070
<3070=3073,3071
<3071=3072
<3073=3074
<3075=3076
<3080=3081
<3081=3088,3082
<3082=3084,3083
<3084=3085
<3085=3087,3086
<3089=3090
<3090=3100,3099,3091
<3091=3098,3092
<3092=3094,3093
<3094=3095
<3095=3097,3096
<3101=3117,3102
<3102=3105,3103
<3103=3104
<3105=3113,3106
<3106=3107
<3107=3109,3108
<3109=3110
<3110=3112,3111
<3113=3114
<3114=3116,3115
<3117=3118
<3118=3120,3119
<3120=3122,3121
<3122=3123
<3123=3125,3124
<3126=3127
<3127=3139,3138,3128
<3128=3137,3129
<3129=3135,3130
<3130=3133,3131
<3131=3132
<3133=3134
<3135=3136
<3140=3141
<3141=3143,3142
<3164=3173,3172,3165
<3165=3169,3166
<3166=3168,3167
<3169=3171,3170
<3173=3260,3255,3251,3222,3176,3174
<3174=3175
<3176=3218,3192,3177
<3177=3178
<3178=3179
<3179=3188,3180
<3180=3186,3181
<3181=3182
<3182=3184,3183
<3184=3185
<3186=3187
<3188=3189
<3189=3191,3190
<3192=3193
<3193=3216,3194
<3194=3195
<3195=3196
<3196=3214,3197
<3197=3212,3210,3198
<3198=3199
<3199=3208,3200
<3200=3206,3201
<3201=3202
<3202=3204,3203
<3204=3205
<3206=3207
<3208=3209
<3210=3211
<3212=3213
<3214=3215
<3216=3217
<3218=3219
<3219=3221,3220
<3222=3238,3223
<3223=3226,3224
<3224=3225
<3226=3234,3227
<3227=3228
<3228=3230,3229
<3230=3231
<3231=3233,3232
<3234=3235
<3235=3237,3236
<3238=3239
<3239=3248,3240
<3240=3246,3241
<3241=3244,3242
<3242=3243
<3244=3245
<3246=3247
<3248=3250,3249
<3251=3252
<3252=3254,3253
<3255=3256
<3256=3259,3258,3257
<3260=3276,3261
<3261=3264,3262
<3262=3263
<3264=3272,3265
<3265=3266
<3266=3268,3267
<3268=3269
<3269=3271,3270
<3272=3273
<3273=3275,3274
<3276=3277
<3277=3286,3278
<3278=3279
<3279=3280
<3280=3282,3281
<3282=3283
<3283=3285,3284
<3286=3287
<3304=3316,3315,3305
<3305=3312,3309,3306
<3306=3308,3307
<3309=3311,3310
<3312=3314,3313
<3316=3446,3445,3441,3440,3405,3400,3396,3367,3319,3317
<3317=3318
<3319=3363,3335,3320
<3320=3321
<3321=3322
<3322=3331,3323
<3323=3329,3324
<3324=3325
<3325=3327,3326
<3327=3328
<3329=3330
<3331=3332
<3332=3334,3333
<3335=3336
<3336=3361,3337
<3337=3338
<3338=3339
<3339=3359,3340
<3340=3357,3355,3353,3341
<3341=3342
<3342=3351,3343
<3343=3349,3344
<3344=3345
<3345=3347,3346
<3347=3348
<3349=3350
<3351=3352
<3353=3354
<3355=3356
<3357=3358
<3359=3360
<3361=3362
<3363=3364
<3364=3366,3365
<3367=3383,3368
<3368=3371,3369
<3369=3370
<3371=3379,3372
<3372=3373
<3373=3375,3374
<3375=3376
<3376=3378,3377
<3379=3380
<3380=3382,3381
<3383=3384
<3384=3393,3385
<3385=3391,3386
<3386=3389,3387
<3387=3388
<3389=3390
<3391=3392
<3393=3395,3394
<3396=3397
<3397=3399,3398
<3400=3401
<3401=3404,3403,3402
<3405=3421,3406
<3406=3409,3407
<3407=3408
<3409=3417,3410
<3410=3411
<3411=3413,3412
<3413=3414
<3414=3416,3415
<3417=3418
<3418=3420,3419
<3421=3422
<3422=3438,3423
<3423=3431,3424
<3424=3425
<3425=3427,3426
<3427=3428
<3428=3430,3429
<3431=3432
<3432=3434,3433
<3434=3435
<3435=3437,3436
<3438=3439
<3441=3442
<3442=3444,3443
<3466=3478,3477,3467
<3467=3474,3471,3468
<3468=3470,3469
<3471=3473,3472
<3474=3476,3475
<3478=3514,3513,3512,3511,3510,3509,3508,3507,3506,3479
<3479=3480
<3480=3504,3481
<3481=3502,3490,3488,3486,3484,3482
<3482=3483
<3484=3485
<3486=3487
<3488=3489
<3490=3491
<3491=3500,3492
<3492=3498,3493
<3493=3494
<3494=3496,3495
<3496=3497
<3498=3499
<3500=3501
<3502=3503
<3504=3505
<3525=3537,3536,3526
<3526=3533,3530,3527
<3527=3529,3528
<3530=3532,3531
<3533=3535,3534
<3537=3573,3572,3571,3570,3569,3568,3567,3566,3565,3538
<3538=3539
<3539=3563,3540
<3540=3561,3549,3547,3545,3543,3541
<3541=3542
<3543=3544
<3545=3546
<3547=3548
<3549=3550
<3550=3559,3551
<3551=3557,3552
<3552=3553
<3553=3555,3554
<3555=3556
<3557=3558
<3559=3560
<3561=3562
<3563=3564
<3584=3596,3595,3585
<3585=3592,3589,3586
<3586=3588,3587
<3589=3591,3590
<3592=3594,3593
<3596=3632,3631,3630,3629,3628,3627,3626,3625,3624,3597
<3597=3598
<3598=3622,3599
<3599=3620,3608,3606,3604,3602,3600
<3600=3601
<3602=3603
<3604=3605
<3606=3607
<3608=3609
<3609=3618,3610
<3610=3616,3611
<3611=3612
<3612=3614,3613
<3614=3615
<3616=3617
<3618=3619
<3620=3621
<3622=3623
<3643=3649,3648,3644
<3644=3645
<3645=3647,3646
<3649=3650
<3650=3651
<3651=3653,3652
<3659=3668,3667,3660
<3660=3664,3661
<3661=3663,3662
<3664=3666,3665
<3668=3669
<3669=3670
<3670=3692,3671
<3671=3678,3676,3674,3672
<3672=3673
<3674=3675
<3676=3677
<3678=3679
<3679=3691,3680
<3680=3689,3681
<3681=3682
<3682=3683
<3683=3685,3684
<3685=3686
<3686=3688,3687
<3689=3690
<3692=3693
<3701=3713,3712,3702
<3702=3709,3706,3703
<3703=3705,3704
<3706=3708,3707
<3709=3711,3710
<3713=4052,4051,4047,4046,4045,4044,4043,4042,4041,4040,4039,4038,4037,4036,4035,4034,4033,4032,4031,4030,4026,4025,4024,4023,4022,4021,4020,4019,4018,4017,4016,4015,4014,4013,4012,4011,4010,4009,3944,3912,3881,3840,3833,3832,3831,3830,3829,3714,3715,3779,3781,3782,3783,3784,3785,3786,3787,3788,3789,3790,3791,3792,3793,3794,3795,3796,3797,3798,3799,3800,3801,3802,3803,3804,3805,3806,3808,3809,3810,3811,3812,3813,3814,3815,3816,3817,3818,3819,3820,3821,3822,3823,3824,3825,3826,3827,3828
<3715=3716
<3716=3772,3717
<3717=3765,3718
<3718=3758,3719
<3719=3751,3720
<3720=3744,3721
<3721=3733,3722
<3722=3728,3723
<3723=3725,3724
<3725=3727,3726
<3728=3730,3729
<3730=3732,3731
<3733=3739,3734
<3734=3736,3735
<3736=3738,3737
<3739=3741,3740
<3741=3743,3742
<3744=3748,3745
<3745=3747,3746
<3748=3750,3749
<3751=3755,3752
<3752=3754,3753
<3755=3757,3756
<3758=3762,3759
<3759=3761,3760
<3762=3764,3763
<3765=3769,3766
<3766=3768,3767
<3769=3771,3770
<3772=3776,3773
<3773=3775,3774
<3776=3778,3777
<3779=3780
<3806=3807
<3833=3837,3834
<3834=3836,3835
<3837=3839,3838
<3840=3869,3841
<3841=3844,3842
<3842=3843
<3844=3845
<3845=3867,3846
<3846=3855,3853,3851,3849,3847
<3847=3848
<3849=3850
<3851=3852
<3853=3854
<3855=3856
<3856=3862,3857
<3857=3859,3858
<3859=3861,3860
<3862=3864,3863
<3864=3866,3865
<3867=3868
<3869=3870
<3870=3876,3871
<3871=3873,3872
<3873=3875,3874
<3876=3878,3877
<3878=3880,3879
<3881=3882
<3882=3911,3910,3883
<3883=3908,3884
<3884=3901,3899,3893,3891,3889,3887,3885
<3885=3886
<3887=3888
<3889=3890
<3891=3892
<3893=3894
<3894=3898,3895
<3895=3897,3896
<3899=3900
<3901=3902
<3902=3904,3903
<3904=3905
<3905=3907,3906
<3908=3909
<3912=3913
<3913=3937,3914
<3914=3930,3915
<3915=3923,3916
<3916=3920,3917
<3917=3919,3918
<3920=3922,3921
<3923=3927,3924
<3924=3926,3925
<3927=3929,3928
<3930=3934,3931
<3931=3933,3932
<3934=3936,3935
<3937=3941,3938
<3938=3940,3939
<3941=3943,3942
<3944=4001,3977,3945
<3945=3946
<3946=3947
<3947=3976,3975,3948
<3948=3973,3949
<3949=3966,3964,3958,3956,3954,3952,3950
<3950=3951
<3952=3953
<3954=3955
<3956=3957
<3958=3959
<3959=3963,3960
<3960=3962,3961
<3964=3965
<3966=3967
<3967=3969,3968
<3969=3970
<3970=3972,3971
<3973=3974
<3977=3980,3978
<3978=3979
<3980=3981
<3981=3999,3982
<3982=3991,3989,3987,3985,3983
<3983=3984
<3985=3986
<3987=3988
<3989=3990
<3991=3992
<3992=3996,3993
<3993=3995,3994
<3996=3998,3997
<3999=4000
<4001=4002
<4002=4006,4003
<4003=4005,4004
<4006=4008,4007
<4026=4027
<4027=4029,4028
<4047=4048
<4048=4050,4049
<4102=4111,4110,4103
<4103=4107,4104
<4104=4106,4105
<4107=4109,4108
<4111=4305,4304,4300,4299,4298,4297,4296,4295,4294,4293,4292,4291,4290,4289,4288,4112,4113,4133,4173,4181,4182,4183,4184,4185,4186,4187,4188,4189,4190,4191,4192,4193,4194,4195,4196,4197,4198,4199,4200,4201,4202,4203,4204,4205,4206,4207,4208,4209,4210,4218,4266,4274,4275,4276,4277,4278,4279,4280,4281,4282,4283,4284,4285,4286,4287
<4113=4114
<4114=4118,4115
<4115=4117,4116
<4118=4132,4119
<4119=4131,4120
<4120=4128,4121
<4121=4123,4122
<4123=4127,4124
<4124=4126,4125
<4128=4130,4129
<4133=4142,4134
<4134=4135
<4135=4141,4136
<4136=4140,4137
<4137=4139,4138
<4142=4143
<4143=4171,4144
<4144=4163,4151,4149,4147,4145
<4145=4146
<4147=4148
<4149=4150
<4151=4152
<4152=4161,4153
<4153=4159,4154
<4154=4155
<4155=4157,4156
<4157=4158
<4159=4160
<4161=4162
<4163=4164
<4164=4166,4165
<4166=4168,4167
<4168=4170,4169
<4171=4172
<4173=4174
<4174=4180,4175
<4175=4179,4176
<4176=4178,4177
<4210=4211
<4211=4217,4212
<4212=4216,4213
<4213=4215,4214
<4218=4232,4224,4219
<4219=4220
<4220=4221
<4221=4223,4222
<4224=4225
<4225=4231,4226
<4226=4230,4227
<4227=4229,4228
<4232=4233
<4233=4264,4234
<4234=4253,4241,4239,4237,4235
<4235=4236
<4237=4238
<4239=4240
<4241=4242
<4242=4251,4243
<4243=4249,4244
<4244=4245
<4245=4247,4246
<4247=4248
<4249=4250
<4251=4252
<4253=4254
<4254=4263,4255
<4255=4261,4256
<4256=4257
<4257=4258
<4258=4260,4259
<4261=4262
<4264=4265
<4266=4267
<4267=4273,4268
<4268=4272,4269
<4269=4271,4270
<4300=4301
<4301=4303,4302
<4327=4336,4335,4328
<4328=4332,4329
<4329=4331,4330
<4332=4334,4333
<4336=4386,4385,4381,4380,4379,4378,4377,4376,4375,4374,4373,4372,4371,4370,4369,4368,4367,4366,4365,4364,4363,4362,4361,4360,4359,4358,4357,4356,4355,4354,4353,4352,4351,4350,4349,4348,4347,4346,4345,4337
<4337=4338
<4338=4344,4339
<4339=4343,4340
<4340=4342,4341
<4381=4382
<4382=4384,4383
<4393=4399,4398,4394
<4394=4395
<4395=4397,4396
<4399=4436,4432,4402,4400
<4400=4401
<4402=4425,4416,4403
<4403=4404
<4404=4412,4405
<4405=4406
<4406=4408,4407
<4408=4409
<4409=4411,4410
<4412=4413
<4413=4415,4414
<4416=4417
<4417=4424,4418
<4418=4422,4419
<4419=4420
<4420=4421
<4422=4423
<4425=4426
<4426=4428,4427
<4428=4429
<4429=4431,4430
<4432=4433
<4433=4435,4434
<4444=4453,4452,4445
<4445=4449,4446
<4446=4448,4447
<4449=4451,4450
<4453=4509,4508,4504,4503,4502,4501,4500,4499,4498,4497,4496,4495,4494,4493,4492,4491,4490,4489,4488,4487,4486,4485,4484,4483,4482,4481,4480,4479,4478,4476,4454
<4454=4455
<4455=4467,4461,4456
<4456=4458,4457
<4458=4460,4459
<4461=4465,4462
<4462=4463
<4463=4464
<4465=4466
<4467=4468
<4468=4474,4469
<4469=4470
<4470=4471
<4471=4473,4472
<4474=4475
<4476=4477
<4504=4505
<4505=4507,4506
<4521=4530,4529,4522
<4522=4526,4523
<4523=4525,4524
<4526=4528,4527
<4530=4575,4574,4570,4569,4568,4567,4566,4565,4564,4563,4562,4561,4560,4559,4558,4557,4556,4555,4554,4553,4552,4551,4550,4549,4548,4547,4546,4545,4544,4535,4531
<4531=4532
<4532=4534,4533
<4535=4536
<4536=4542,4537
<4537=4538
<4538=4539
<4539=4541,4540
<4542=4543
<4570=4571
<4571=4573,4572
<4584=4596,4595,4585
<4585=4592,4589,4586
<4586=4588,4587
<4589=4591,4590
<4592=4594,4593
<4596=4672,4671,4667,4666,4665,4664,4663,4662,4597,4598,4599,4600,4601,4602,4603,4604,4605,4606,4607,4608,4609,4610,4611,4612,4613,4614,4615,4616,4617,4618,4619,4620,4621,4627,4635,4639,4640,4641,4642,4643,4644,4645,4646,4647,4648,4649,4650,4651,4652,4653,4654,4655,4656,4657,4658,4659,4660,4661
<4621=4622
<4622=4624,4623
<4624=4626,4625
<4627=4628
<4628=4632,4629
<4629=4631,4630
<4632=4634,4633
<4635=4636
<4636=4638,4637
<4667=4668
<4668=4670,4669
<4686=4692,4691,4687
<4687=4688
<4688=4690,4689
<4692=4693
<4693=4694
<4694=4696,4695
<4702=4714,4713,4703
<4703=4710,4707,4704
<4704=4706,4705
<4707=4709,4708
<4710=4712,4711
<4714=5070,5060,5056,5031,4977,4944,4943,4942,4941,4940,4939,4938,4937,4936,4935,4934,4933,4932,4931,4930,4929,4928,4927,4926,4925,4924,4923,4922,4921,4920,4919,4918,4917,4916,4915,4914,4913,4912,4911,4910,4909,4908,4907,4906,4905,4904,4903,4902,4901,4900,4899,4898,4897,4896,4895,4894,4893,4892,4891,4890,4889,4888,4887,4886,4885,4884,4883,4882,4881,4880,4879,4878,4877,4876,4875,4715,4716,4717,4718,4719,4720,4721,4722,4723,4724,4725,4726,4727,4728,4729,4730,4731,4732,4733,4734,4735,4736,4737,4738,4739,4777,4794,4806,4807,4808,4809,4810,4857,4858,4859,4860,4861,4862,4863,4864,4865,4866,4867,4868,4869,4870,4871,4872,4873,4874
<4739=4773,4769,4740
<4740=4741
<4741=4765,4761,4742
<4742=4743
<4743=4753,4749,4744
<4744=4745
<4745=4746
<4746=4748,4747
<4749=4750
<4750=4752,4751
<4753=4754
<4754=4760,4755
<4755=4759,4756
<4756=4758,4757
<4761=4762
<4762=4764,4763
<4765=4766
<4766=4768,4767
<4769=4770
<4770=4772,4771
<4773=4774
<4774=4776,4775
<4777=4779,4778
<4779=4780
<4780=4792,4781
<4781=4788,4786,4784,4782
<4782=4783
<4784=4785
<4786=4787
<4788=4789
<4789=4791,4790
<4792=4793
<4794=4795
<4795=4804,4796
<4796=4797
<4797=4798
<4798=4800,4799
<4800=4801
<4801=4803,4802
<4804=4805
<4810=4811
<4811=4853,4827,4812
<4812=4813
<4813=4814
<4814=4823,4815
<4815=4821,4816
<4816=4817
<4817=4819,4818
<4819=4820
<4821=4822
<4823=4824
<4824=4826,4825
<4827=4828
<4828=4851,4829
<4829=4830
<4830=4831
<4831=4849,4832
<4832=4847,4845,4833
<4833=4834
<4834=4843,4835
<4835=4841,4836
<4836=4837
<4837=4839,4838
<4839=4840
<4841=4842
<4843=4844
<4845=4846
<4847=4848
<4849=4850
<4851=4852
<4853=4854
<4854=4856,4855
<4944=4973,4964,4945
<4945=4946
<4946=4960,4949,4947
<4947=4948
<4949=4950
<4950=4959,4951
<4951=4953,4952
<4953=4955,4954
<4955=4956
<4956=4958,4957
<4960=4961
<4961=4963,4962
<4964=4965
<4965=4972,4966
<4966=4968,4967
<4968=4969
<4969=4971,4970
<4973=4974
<4974=4976,4975
<4977=5029,4999,4978
<4978=4979
<4979=4981,4980
<4981=4982
<4982=4998,4983
<4983=4991,4984
<4984=4990,4985
<4985=4989,4986
<4986=4988,4987
<4991=4997,4992
<4992=4996,4993
<4993=4995,4994
<4999=5001,5000
<5001=5025,5009,5002
<5002=5003
<5003=5004
<5004=5006,5005
<5006=5008,5007
<5009=5010
<5010=5023,5011
<5011=5012
<5012=5013
<5013=5021,5014
<5014=5019,5017,5015
<5015=5016
<5017=5018
<5019=5020
<5021=5022
<5023=5024
<5025=5026
<5026=5028,5027
<5029=5030
<5031=5032
<5032=5055,5054,5033
<5033=5050,5042,5034
<5034=5040,5035
<5035=5038,5036
<5036=5037
<5038=5039
<5040=5041
<5042=5048,5043
<5043=5046,5044
<5044=5045
<5046=5047
<5048=5049
<5050=5051
<5051=5053,5052
<5056=5057
<5057=5059,5058
<5060=5062,5061
<5062=5063
<5063=5067,5064
<5064=5066,5065
<5067=5069,5068
<5070=5071
<5071=5085,5072
<5072=5075,5073
<5073=5074
<5075=5076
<5076=5084,5077
<5077=5081,5078
<5078=5080,5079
<5081=5083,5082
<5085=5086
<5113=5122,5121,5114
<5114=5118,5115
<5115=5117,5116
<5118=5120,5119
<5122=5125,5124,5123
<5125=5126
<5126=5128,5127
<5135=5144,5143,5136
<5136=5140,5137
<5137=5139,5138
<5140=5142,5141
<5144=5192,5176,5156,5145
<5145=5146
<5146=5154,5147
<5147=5152,5150,5148
<5148=5149
<5150=5151
<5152=5153
<5154=5155
<5156=5159,5157
<5157=5158
<5159=5160
<5160=5174,5161
<5161=5170,5168,5166,5164,5162
<5162=5163
<5164=5165
<5166=5167
<5168=5169
<5170=5171
<5171=5173,5172
<5174=5175
<5176=5177
<5177=5191,5190,5178
<5178=5189,5179
<5179=5187,5180
<5180=5185,5181
<5181=5182
<5182=5184,5183
<5185=5186
<5187=5188
<5192=5193
<5193=5195,5194
<5209=5218,5217,5210
<5210=5214,5211
<5211=5213,5212
<5214=5216,5215
<5218=5282,5266,5240,5219
<5219=5220
<5220=5232,5222,5221
<5222=5230,5223
<5223=5228,5226,5224
<5224=5225
<5226=5227
<5228=5229
<5230=5231
<5232=5233
<5233=5237,5234
<5234=5236,5235
<5237=5239,5238
<5240=5249,5241
<5241=5242
<5242=5248,5243
<5243=5247,5244
<5244=5246,5245
<5249=5250
<5250=5264,5251
<5251=5260,5258,5256,5254,5252
<5252=5253
<5254=5255
<5256=5257
<5258=5259
<5260=5261
<5261=5263,5262
<5264=5265
<5266=5267
<5267=5281,5280,5268
<5268=5279,5269
<5269=5277,5270
<5270=5275,5271
<5271=5272
<5272=5274,5273
<5275=5276
<5277=5278
<5282=5283
<5283=5285,5284
<5301=5313,5312,5302
<5302=5309,5306,5303
<5303=5305,5304
<5306=5308,5307
<5309=5311,5310
<5313=5314
<5314=5315
<5315=5346,5316
<5316=5325,5323,5321,5319,5317
<5317=5318
<5319=5320
<5321=5322
<5323=5324
<5325=5326
<5326=5345,5327
<5327=5343,5328
<5328=5336,5329
<5329=5330
<5330=5332,5331
<5332=5333
<5333=5335,5334
<5336=5337
<5337=5339,5338
<5339=5340
<5340=5342,5341
<5343=5344
<5346=5347
<5357=5369,5368,5358
<5358=5365,5362,5359
<5359=5361,5360
<5362=5364,5363
<5365=5367,5366
<5369=5370
<5370=5371
<5371=5395,5372
<5372=5379,5377,5375,5373
<5373=5374
<5375=5376
<5377=5378
<5379=5380
<5380=5394,5381
<5381=5392,5382
<5382=5385,5383
<5383=5384
<5385=5386
<5386=5388,5387
<5388=5389
<5389=5391,5390
<5392=5393
<5395=5396
<5405=5414,5413,5406
<5406=5410,5407
<5407=5409,5408
<5410=5412,5411
<5414=5494,5493,5489,5485,5484,5483,5482,5481,5480,5479,5478,5477,5476,5475,5474,5473,5472,5471,5470,5469,5468,5467,5466,5465,5464,5463,5462,5461,5460,5459,5458,5415
<5415=5444,5430,5416
<5416=5417
<5417=5427,5418
<5418=5426,5419
<5419=5425,5420
<5420=5422,5421
<5422=5424,5423
<5427=5429,5428
<5430=5431
<5431=5441,5432
<5432=5440,5433
<5433=5439,5434
<5434=5436,5435
<5436=5438,5437
<5441=5443,5442
<5444=5445
<5445=5455,5446
<5446=5454,5447
<5447=5453,5448
<5448=5450,5449
<5450=5452,5451
<5455=5457,5456
<5485=5486
<5486=5488,5487
<5489=5490
<5490=5492,5491
<5511=5520,5519,5512
<5512=5516,5513
<5513=5515,5514
<5516=5518,5517
<5520=5960,5959,5955,5954,5953,5952,5951,5950,5949,5948,5947,5946,5945,5944,5943,5942,5941,5940,5939,5938,5862,5850,5849,5822,5795,5768,5741,5714,5685,5678,5677,5676,5675,5674,5673,5672,5671,5670,5669,5668,5667,5666,5665,5650,5570,5558,5522,5521
<5522=5523
<5523=5554,5539,5524
<5524=5537,5525
<5525=5535,5526
<5526=5527
<5527=5533,5528
<5528=5531,5529
<5529=5530
<5531=5532
<5533=5534
<5535=5536
<5537=5538
<5539=5552,5540
<5540=5550,5541
<5541=5542
<5542=5548,5543
<5543=5546,5544
<5544=5545
<5546=5547
<5548=5549
<5550=5551
<5552=5553
<5554=5555
<5555=5557,5556
<5558=5566,5559
<5559=5560
<5560=5562,5561
<5562=5563
<5563=5565,5564
<5566=5567
<5567=5569,5568
<5570=5646,5571
<5571=5615,5598,5572
<5572=5589,5573
<5573=5574
<5574=5587,5575
<5575=5585,5576
<5576=5577
<5577=5583,5578
<5578=5581,5579
<5579=5580
<5581=5582
<5583=5584
<5585=5586
<5587=5588
<5589=5590
<5590=5597,5591
<5591=5595,5592
<5592=5593
<5593=5594
<5595=5596
<5598=5609,5599
<5599=5600
<5600=5601
<5601=5607,5602
<5602=5605,5603
<5603=5604
<5605=5606
<5607=5608
<5609=5610
<5610=5612,5611
<5612=5614,5613
<5615=5616
<5616=5645,5644,5617
<5617=5642,5618
<5618=5635,5633,5627,5625,5623,5621,5619
<5619=5620
<5621=5622
<5623=5624
<5625=5626
<5627=5628
<5628=5632,5629
<5629=5631,5630
<5633=5634
<5635=5636
<5636=5638,5637
<5638=5639
<5639=5641,5640
<5642=5643
<5646=5647
<5647=5649,5648
<5650=5661,5651
<5651=5652
<5652=5653
<5653=5659,5654
<5654=5657,5655
<5655=5656
<5657=5658
<5659=5660
<5661=5662
<5662=5664,5663
<5678=5679
<5679=5683,5680
<5680=5681
<5681=5682
<5683=5684
<5685=5705,5688,5686
<5686=5687
<5688=5689
<5689=5703,5690
<5690=5701,5691
<5691=5692
<5692=5694,5693
<5694=5700,5695
<5695=5699,5696
<5696=5698,5697
<5701=5702
<5703=5704
<5705=5706
<5706=5712,5707
<5707=5708
<5708=5709
<5709=5711,5710
<5712=5713
<5714=5732,5715
<5715=5716
<5716=5730,5717
<5717=5728,5718
<5718=5719
<5719=5721,5720
<5721=5727,5722
<5722=5726,5723
<5723=5725,5724
<5728=5729
<5730=5731
<5732=5733
<5733=5739,5734
<5734=5735
<5735=5736
<5736=5738,5737
<5739=5740
<5741=5759,5742
<5742=5743
<5743=5757,5744
<5744=5755,5745
<5745=5746
<5746=5748,5747
<5748=5754,5749
<5749=5753,5750
<5750=5752,5751
<5755=5756
<5757=5758
<5759=5760
<5760=5766,5761
<5761=5762
<5762=5763
<5763=5765,5764
<5766=5767
<5768=5786,5769
<5769=5770
<5770=5784,5771
<5771=5782,5772
<5772=5773
<5773=5775,5774
<5775=5781,5776
<5776=5780,5777
<5777=5779,5778
<5782=5783
<5784=5785
<5786=5787
<5787=5793,5788
<5788=5789
<5789=5790
<5790=5792,5791
<5793=5794
<5795=5813,5796
<5796=5797
<5797=5811,5798
<5798=5809,5799
<5799=5800
<5800=5802,5801
<5802=5808,5803
<5803=5807,5804
<5804=5806,5805
<5809=5810
<5811=5812
<5813=5814
<5814=5820,5815
<5815=5816
<5816=5817
<5817=5819,5818
<5820=5821
<5822=5840,5823
<5823=5824
<5824=5838,5825
<5825=5836,5826
<5826=5827
<5827=5829,5828
<5829=5835,5830
<5830=5834,5831
<5831=5833,5832
<5836=5837
<5838=5839
<5840=5841
<5841=5847,5842
<5842=5843
<5843=5844
<5844=5846,5845
<5847=5848
<5850=5858,5851
<5851=5852
<5852=5854,5853
<5854=5855
<5855=5857,5856
<5858=5859
<5859=5861,5860
<5862=5919,5901,5870,5863
<5863=5864
<5864=5868,5865
<5865=5866
<5866=5867
<5868=5869
<5870=5897,5871
<5871=5872
<5872=5895,5873
<5873=5874
<5874=5875
<5875=5893,5876
<5876=5891,5889,5877
<5877=5878
<5878=5887,5879
<5879=5885,5880
<5880=5881
<5881=5883,5882
<5883=5884
<5885=5886
<5887=5888
<5889=5890
<5891=5892
<5893=5894
<5895=5896
<5897=5898
<5898=5900,5899
<5901=5912,5902
<5902=5903
<5903=5904
<5904=5910,5905
<5905=5908,5906
<5906=5907
<5908=5909
<5910=5911
<5912=5913
<5913=5917,5914
<5914=5915
<5915=5916
<5917=5918
<5919=5934,5920
<5920=5921
<5921=5930,5922
<5922=5928,5923
<5923=5924
<5924=5926,5925
<5926=5927
<5928=5929
<5930=5931
<5931=5933,5932
<5934=5935
<5935=5937,5936
<5955=5956
<5956=5958,5957
<6012=6021,6020,6013
<6013=6017,6014
<6014=6016,6015
<6017=6019,6018
<6021=6452,6451,6447,6446,6445,6444,6443,6442,6441,6440,6439,6438,6437,6436,6435,6434,6433,6432,6431,6430,6353,6341,6314,6287,6260,6233,6206,6179,6150,6143,6142,6141,6140,6139,6138,6137,6136,6135,6134,6133,6132,6131,6130,6115,6103,6059,6023,6022
<6023=6024
<6024=6055,6040,6025
<6025=6038,6026
<6026=6036,6027
<6027=6028
<6028=6034,6029
<6029=6032,6030
<6030=6031
<6032=6033
<6034=6035
<6036=6037
<6038=6039
<6040=6053,6041
<6041=6051,6042
<6042=6043
<6043=6049,6044
<6044=6047,6045
<6045=6046
<6047=6048
<6049=6050
<6051=6052
<6053=6054
<6055=6056
<6056=6058,6057
<6059=6099,6060
<6060=6061
<6061=6092,6077,6062
<6062=6075,6063
<6063=6073,6064
<6064=6065
<6065=6071,6066
<6066=6069,6067
<6067=6068
<6069=6070
<6071=6072
<6073=6074
<6075=6076
<6077=6090,6078
<6078=6088,6079
<6079=6080
<6080=6086,6081
<6081=6084,6082
<6082=6083
<6084=6085
<6086=6087
<6088=6089
<6090=6091
<6092=6093
<6093=6097,6094
<6094=6095
<6095=6096
<6097=6098
<6099=6100
<6100=6102,6101
<6103=6111,6104
<6104=6105
<6105=6107,6106
<6107=6108
<6108=6110,6109
<6111=6112
<6112=6114,6113
<6115=6126,6116
<6116=6117
<6117=6118
<6118=6124,6119
<6119=6122,6120
<6120=6121
<6122=6123
<6124=6125
<6126=6127
<6127=6129,6128
<6143=6144
<6144=6148,6145
<6145=6146
<6146=6147
<6148=6149
<6150=6170,6153,6151
<6151=6152
<6153=6154
<6154=6168,6155
<6155=6166,6156
<6156=6157
<6157=6159,6158
<6159=6165,6160
<6160=6164,6161
<6161=6163,6162
<6166=6167
<6168=6169
<6170=6171
<6171=6177,6172
<6172=6173
<6173=6174
<6174=6176,6175
<6177=6178
<6179=6197,6180
<6180=6181
<6181=6195,6182
<6182=6193,6183
<6183=6184
<6184=6186,6185
<6186=6192,6187
<6187=6191,6188
<6188=6190,6189
<6193=6194
<6195=6196
<6197=6198
<6198=6204,6199
<6199=6200
<6200=6201
<6201=6203,6202
<6204=6205
<6206=6224,6207
<6207=6208
<6208=6222,6209
<6209=6220,6210
<6210=6211
<6211=6213,6212
<6213=6219,6214
<6214=6218,6215
<6215=6217,6216
<6220=6221
<6222=6223
<6224=6225
<6225=6231,6226
<6226=6227
<6227=6228
<6228=6230,6229
<6231=6232
<6233=6251,6234
<6234=6235
<6235=6249,6236
<6236=6247,6237
<6237=6238
<6238=6240,6239
<6240=6246,6241
<6241=6245,6242
<6242=6244,6243
<6247=6248
<6249=6250
<6251=6252
<6252=6258,6253
<6253=6254
<6254=6255
<6255=6257,6256
<6258=6259
<6260=6278,6261
<6261=6262
<6262=6276,6263
<6263=6274,6264
<6264=6265
<6265=6267,6266
<6267=6273,6268
<6268=6272,6269
<6269=6271,6270
<6274=6275
<6276=6277
<6278=6279
<6279=6285,6280
<6280=6281
<6281=6282
<6282=6284,6283
<6285=6286
<6287=6305,6288
<6288=6289
<6289=6303,6290
<6290=6301,6291
<6291=6292
<6292=6294,6293
<6294=6300,6295
<6295=6299,6296
<6296=6298,6297
<6301=6302
<6303=6304
<6305=6306
<6306=6312,6307
<6307=6308
<6308=6309
<6309=6311,6310
<6312=6313
<6314=6332,6315
<6315=6316
<6316=6330,6317
<6317=6328,6318
<6318=6319
<6319=6321,6320
<6321=6327,6322
<6322=6326,6323
<6323=6325,6324
<6328=6329
<6330=6331
<6332=6333
<6333=6339,6334
<6334=6335
<6335=6336
<6336=6338,6337
<6339=6340
<6341=6349,6342
<6342=6343
<6343=6345,6344
<6345=6346
<6346=6348,6347
<6349=6350
<6350=6352,6351
<6353=6411,6392,6361,6354
<6354=6355
<6355=6359,6356
<6356=6357
<6357=6358
<6359=6360
<6361=6388,6362
<6362=6363
<6363=6386,6364
<6364=6365
<6365=6366
<6366=6384,6367
<6367=6382,6380,6368
<6368=6369
<6369=6378,6370
<6370=6376,6371
<6371=6372
<6372=6374,6373
<6374=6375
<6376=6377
<6378=6379
<6380=6381
<6382=6383
<6384=6385
<6386=6387
<6388=6389
<6389=6391,6390
<6392=6403,6393
<6393=6394
<6394=6395
<6395=6401,6396
<6396=6399,6397
<6397=6398
<6399=6400
<6401=6402
<6403=6404
<6404=6408,6405
<6405=6407,6406
<6408=6410,6409
<6411=6426,6412
<6412=6413
<6413=6422,6414
<6414=6420,6415
<6415=6416
<6416=6418,6417
<6418=6419
<6420=6421
<6422=6423
<6423=6425,6424
<6426=6427
<6427=6429,6428
<6447=6448
<6448=6450,6449
<6499=6505,6504,6500
<6500=6501
<6501=6503,6502
<6505=6781,6780,6773,6737,6726,6654,6652,6589,6582,6565,6509,6507,6506
<6507=6508
<6509=6537,6510
<6510=6536,6529,6516,6511
<6511=6512
<6512=6514,6513
<6514=6515
<6516=6517
<6517=6527,6518
<6518=6525,6523,6521,6519
<6519=6520
<6521=6522
<6523=6524
<6525=6526
<6527=6528
<6529=6530
<6530=6534,6531
<6531=6532
<6532=6533
<6534=6535
<6537=6538
<6538=6551,6539
<6539=6548,6540
<6540=6547,6541
<6541=6545,6542
<6542=6543
<6543=6544
<6545=6546
<6548=6550,6549
<6551=6564,6552
<6552=6563,6553
<6553=6561,6554
<6554=6559,6555
<6555=6556
<6556=6558,6557
<6559=6560
<6561=6562
<6565=6566
<6566=6581,6580,6567
<6567=6574,6568
<6568=6570,6569
<6570=6571
<6571=6573,6572
<6574=6576,6575
<6576=6577
<6577=6579,6578
<6582=6583
<6583=6585,6584
<6585=6586
<6586=6588,6587
<6589=6625,6590
<6590=6614,6607,6596,6591
<6591=6592
<6592=6594,6593
<6594=6595
<6596=6597
<6597=6605,6598
<6598=6603,6601,6599
<6599=6600
<6601=6602
<6603=6604
<6605=6606
<6607=6608
<6608=6612,6609
<6609=6610
<6610=6611
<6612=6613
<6614=6616,6615
<6616=6617
<6617=6624,6618
<6618=6620,6619
<6620=6621
<6621=6623,6622
<6625=6626
<6626=6646,6627
<6627=6629,6628
<6629=6644,6630
<6630=6637,6631
<6631=6632
<6632=6636,6633
<6633=6635,6634
<6637=6638
<6638=6640,6639
<6640=6641
<6641=6643,6642
<6644=6645
<6646=6648,6647
<6648=6649
<6649=6651,6650
<6652=6653
<6654=6691,6668,6655
<6655=6656
<6656=6657
<6657=6667,6666,6658
<6658=6664,6659
<6659=6662,6660
<6660=6661
<6662=6663
<6664=6665
<6668=6687,6674,6669
<6669=6670
<6670=6672,6671
<6672=6673
<6674=6675
<6675=6685,6676
<6676=6683,6681,6679,6677
<6677=6678
<6679=6680
<6681=6682
<6683=6684
<6685=6686
<6687=6688
<6688=6690,6689
<6691=6692
<6692=6720,6693
<6693=6706,6694
<6694=6703,6695
<6695=6702,6696
<6696=6700,6697
<6697=6698
<6698=6699
<6700=6701
<6703=6705,6704
<6706=6719,6707
<6707=6718,6708
<6708=6716,6709
<6709=6714,6710
<6710=6711
<6711=6713,6712
<6714=6715
<6716=6717
<6720=6722,6721
<6722=6723
<6723=6725,6724
<6726=6727
<6727=6736,6735,6728
<6728=6731,6730,6729
<6731=6732
<6732=6734,6733
<6737=6738
<6738=6765,6739
<6739=6757,6740
<6740=6749,6741
<6741=6748,6742
<6742=6746,6743
<6743=6744
<6744=6745
<6746=6747
<6749=6756,6750
<6750=6754,6751
<6751=6752
<6752=6753
<6754=6755
<6757=6764,6758
<6758=6762,6759
<6759=6760
<6760=6761
<6762=6763
<6765=6772,6766
<6766=6770,6767
<6767=6768
<6768=6769
<6770=6771
<6773=6774
<6774=6779,6778,6775
<6775=6777,6776
<6802=6811,6810,6803
<6803=6807,6804
<6804=6806,6805
<6807=6809,6808
<6811=6958,6957,6934,6929,6925,6905,6884,6868,6863,6813,6812
<6813=6814
<6814=6830,6826,6815
<6815=6824,6816
<6816=6817
<6817=6818
<6818=6820,6819
<6820=6821
<6821=6823,6822
<6824=6825
<6826=6828,6827
<6828=6829
<6830=6831
<6831=6861,6832
<6832=6839,6837,6835,6833
<6833=6834
<6835=6836
<6837=6838
<6839=6840
<6840=6842,6841
<6842=6859,6843
<6843=6857,6855,6848,6844
<6844=6845
<6845=6847,6846
<6848=6849
<6849=6851,6850
<6851=6852
<6852=6854,6853
<6855=6856
<6857=6858
<6859=6860
<6861=6862
<6863=6864
<6864=6867,6866,6865
<6868=6880,6869
<6869=6870
<6870=6878,6871
<6871=6872
<6872=6873
<6873=6877,6874
<6874=6876,6875
<6878=6879
<6880=6881
<6881=6883,6882
<6884=6890,6885
<6885=6886
<6886=6888,6887
<6888=6889
<6890=6891
<6891=6903,6892
<6892=6899,6897,6895,6893
<6893=6894
<6895=6896
<6897=6898
<6899=6900
<6900=6902,6901
<6903=6904
<6905=6906
<6906=6924,6923,6907
<6907=6922,6908
<6908=6920,6909
<6909=6918,6916,6914,6910
<6910=6911
<6911=6913,6912
<6914=6915
<6916=6917
<6918=6919
<6920=6921
<6925=6926
<6926=6928,6927
<6929=6930
<6930=6933,6932,6931
<6934=6935
<6935=6943,6942,6936
<6936=6938,6937
<6938=6940,6939
<6940=6941
<6943=6944
<6944=6951,6945
<6945=6947,6946
<6947=6948
<6948=6950,6949
<6951=6953,6952
<6953=6954
<6954=6956,6955
<6978=6984,6983,6979
<6979=6980
<6980=6982,6981
<6984=6987,6985
<6985=6986
<6987=7048,7001,6988
<6988=6989
<6989=6997,6990
<6990=6991
<6991=6993,6992
<6993=6994
<6994=6996,6995
<6997=6998
<6998=7000,6999
<7001=7002
<7002=7032,7015,7003
<7003=7004
<7004=7005
<7005=7014,7006
<7006=7012,7007
<7007=7010,7008
<7008=7009
<7010=7011
<7012=7013
<7015=7028,7016
<7016=7024,7017
<7017=7018
<7018=7020,7019
<7020=7021
<7021=7023,7022
<7024=7025
<7025=7027,7026
<7028=7029
<7029=7031,7030
<7032=7033
<7033=7042,7034
<7034=7041,7035
<7035=7039,7036
<7036=7037
<7037=7038
<7039=7040
<7042=7046,7043
<7043=7044
<7044=7045
<7046=7047
<7048=7049
<7049=7056,7050
<7050=7054,7051
<7051=7052
<7052=7053
<7054=7055
<7067=7073,7072,7068
<7068=7069
<7069=7071,7070
<7073=7076,7074
<7074=7075
<7076=7101,7090,7077
<7077=7078
<7078=7086,7079
<7079=7080
<7080=7082,7081
<7082=7083
<7083=7085,7084
<7086=7087
<7087=7089,7088
<7090=7091
<7091=7100,7092
<7092=7098,7093
<7093=7096,7094
<7094=7095
<7096=7097
<7098=7099
<7101=7102
<7102=7109,7103
<7103=7107,7104
<7104=7105
<7105=7106
<7107=7108
<7118=7124,7123,7119
<7119=7120
<7120=7122,7121
<7124=7134,7133,7132,7125
<7125=7126
<7126=7131,7130,7127
<7127=7129,7128
<7147=7159,7158,7148
<7148=7155,7152,7149
<7149=7151,7150
<7152=7154,7153
<7155=7157,7156
<7159=7282,7281,7280,7279,7278,7277,7276,7275,7274,7273,7272,7271,7270,7269,7268,7267,7266,7265,7264,7263,7262,7261,7260,7259,7258,7257,7256,7255,7254,7253,7252,7251,7250,7160,7162,7168,7181,7183,7184,7185,7186,7187,7188,7189,7190,7191,7192,7193,7194,7195,7196,7197,7203,7207,7208,7222,7223,7224,7225,7226,7227,7228,7229,7230,7231,7232,7233,7234,7235,7236,7237,7238,7239,7240,7241,7242,7243,7244,7245,7246,7247,7248,7249
<7160=7161
<7162=7163
<7163=7165,7164
<7165=7167,7166
<7168=7169
<7169=7179,7170
<7170=7175,7171
<7171=7172
<7172=7174,7173
<7175=7176
<7176=7178,7177
<7179=7180
<7181=7182
<7197=7198
<7198=7200,7199
<7200=7202,7201
<7203=7204
<7204=7206,7205
<7208=7221,7220,7209
<7209=7210
<7210=7218,7211
<7211=7216,7214,7212
<7212=7213
<7214=7215
<7216=7217
<7218=7219
<7282=7283
<7283=7285,7284
<7299=7317,7316,7300
<7300=7313,7310,7307,7304,7301
<7301=7303,7302
<7304=7306,7305
<7307=7309,7308
<7310=7312,7311
<7313=7315,7314
<7317=7502,7497,7493,7489,7488,7487,7486,7485,7484,7483,7482,7481,7480,7479,7478,7477,7476,7475,7474,7473,7472,7471,7470,7469,7468,7467,7466,7465,7464,7452,7426,7420,7419,7418,7321,7320,7318
<7318=7319
<7321=7412,7400,7322
<7322=7323
<7323=7324
<7324=7394,7383,7325
<7325=7326
<7326=7377,7366,7327
<7327=7328
<7328=7360,7341,7329
<7329=7330
<7330=7331
<7331=7340,7332
<7332=7339,7333
<7333=7337,7334
<7334=7335
<7335=7336
<7337=7338
<7341=7351,7342
<7342=7343
<7343=7350,7344
<7344=7348,7345
<7345=7346
<7346=7347
<7348=7349
<7351=7352
<7352=7359,7353
<7353=7357,7354
<7354=7355
<7355=7356
<7357=7358
<7360=7361
<7361=7363,7362
<7363=7365,7364
<7366=7367
<7367=7376,7368
<7368=7375,7369
<7369=7373,7370
<7370=7371
<7371=7372
<7373=7374
<7377=7378
<7378=7380,7379
<7380=7382,7381
<7383=7384
<7384=7393,7385
<7385=7392,7386
<7386=7390,7387
<7387=7388
<7388=7389
<7390=7391
<7394=7395
<7395=7397,7396
<7397=7399,7398
<7400=7401
<7401=7402
<7402=7411,7403
<7403=7410,7404
<7404=7408,7405
<7405=7406
<7406=7407
<7408=7409
<7412=7413
<7413=7415,7414
<7415=7417,7416
<7420=7421
<7421=7425,7422
<7422=7424,7423
<7426=7448,7439,7427
<7427=7428
<7428=7429
<7429=7438,7430
<7430=7437,7431
<7431=7435,7432
<7432=7433
<7433=7434
<7435=7436
<7439=7440
<7440=7446,7441
<7441=7444,7442
<7442=7443
<7444=7445
<7446=7447
<7448=7449
<7449=7451,7450
<7452=7453
<7453=7462,7454
<7454=7460,7455
<7455=7456
<7456=7458,7457
<7458=7459
<7460=7461
<7462=7463
<7489=7490
<7490=7492,7491
<7493=7494
<7494=7496,7495
<7497=7498
<7498=7501,7500,7499
<7502=7503
<7503=7509,7504
<7504=7505
<7505=7506
<7506=7508,7507
<7509=7510
<7539=7560,7559,7540
<7540=7556,7553,7550,7547,7544,7541
<7541=7543,7542
<7544=7546,7545
<7547=7549,7548
<7550=7552,7551
<7553=7555,7554
<7556=7558,7557
<7560=7807,7806,7805,7804,7803,7802,7801,7800,7799,7798,7797,7796,7795,7794,7793,7792,7791,7790,7789,7788,7787,7786,7785,7784,7783,7782,7781,7780,7779,7778,7777,7776,7775,7774,7773,7772,7561,7566,7674,7680,7722,7723,7724,7725,7726,7727,7728,7729,7730,7731,7732,7733,7734,7735,7736,7737,7738,7739,7740,7741,7742,7743,7747,7749,7750,7751,7752,7753,7754,7755,7756,7757,7758,7759,7760,7761,7762,7763,7764,7765,7766,7767,7768,7769,7770,7771
<7561=7562
<7562=7564,7563
<7564=7565
<7566=7668,7649,7567
<7567=7568
<7568=7603,7583,7569
<7569=7570
<7570=7579,7571
<7571=7572
<7572=7573
<7573=7575,7574
<7575=7576
<7576=7578,7577
<7579=7580
<7580=7582,7581
<7583=7584
<7584=7599,7585
<7585=7586
<7586=7587
<7587=7597,7588
<7588=7593,7589
<7589=7590
<7590=7592,7591
<7593=7594
<7594=7596,7595
<7597=7598
<7599=7600
<7600=7602,7601
<7603=7643,7624,7604
<7604=7605
<7605=7615,7606
<7606=7607
<7607=7611,7608
<7608=7609
<7609=7610
<7611=7612
<7612=7614,7613
<7615=7616
<7616=7620,7617
<7617=7618
<7618=7619
<7620=7621
<7621=7623,7622
<7624=7634,7625
<7625=7626
<7626=7630,7627
<7627=7628
<7628=7629
<7630=7631
<7631=7633,7632
<7634=7635
<7635=7639,7636
<7636=7637
<7637=7638
<7639=7640
<7640=7642,7641
<7643=7644
<7644=7646,7645
<7646=7648,7647
<7649=7659,7650
<7650=7651
<7651=7655,7652
<7652=7653
<7653=7654
<7655=7656
<7656=7658,7657
<7659=7660
<7660=7664,7661
<7661=7662
<7662=7663
<7664=7665
<7665=7667,7666
<7668=7669
<7669=7671,7670
<7671=7673,7672
<7674=7675
<7675=7679,7676
<7676=7678,7677
<7680=7718,7717,7716,7715,7714,7709,7681
<7681=7682
<7682=7707,7683
<7683=7689,7684
<7684=7685
<7685=7687,7686
<7687=7688
<7689=7690
<7690=7693,7692,7691
<7693=7694
<7694=7704,7695
<7695=7699,7696
<7696=7698,7697
<7699=7703,7700
<7700=7702,7701
<7704=7706,7705
<7707=7708
<7709=7710
<7710=7712,7711
<7712=7713
<7718=7719
<7719=7721,7720
<7743=7744
<7744=7746,7745
<7747=7748
<7807=7808
<7808=7816,7815,7809
<7809=7811,7810
<7811=7812
<7812=7814,7813
<7843=7858,7857,7844
<7844=7854,7851,7848,7845
<7845=7847,7846
<7848=7850,7849
<7851=7853,7852
<7854=7856,7855
<7858=8026,8025,8024,8023,8022,8021,8020,8019,8018,8017,8016,8015,8014,8013,7978,7972,7864,7859
<7859=7860
<7860=7862,7861
<7862=7863
<7864=7966,7947,7865
<7865=7866
<7866=7901,7881,7867
<7867=7868
<7868=7877,7869
<7869=7870
<7870=7871
<7871=7873,7872
<7873=7874
<7874=7876,7875
<7877=7878
<7878=7880,7879
<7881=7882
<7882=7897,7883
<7883=7884
<7884=7885
<7885=7895,7886
<7886=7891,7887
<7887=7888
<7888=7890,7889
<7891=7892
<7892=7894,7893
<7895=7896
<7897=7898
<7898=7900,7899
<7901=7941,7922,7902
<7902=7903
<7903=7913,7904
<7904=7905
<7905=7909,7906
<7906=7907
<7907=7908
<7909=7910
<7910=7912,7911
<7913=7914
<7914=7918,7915
<7915=7916
<7916=7917
<7918=7919
<7919=7921,7920
<7922=7932,7923
<7923=7924
<7924=7928,7925
<7925=7926
<7926=7927
<7928=7929
<7929=7931,7930
<7932=7933
<7933=7937,7934
<7934=7935
<7935=7936
<7937=7938
<7938=7940,7939
<7941=7942
<7942=7944,7943
<7944=7946,7945
<7947=7957,7948
<7948=7949
<7949=7953,7950
<7950=7951
<7951=7952
<7953=7954
<7954=7956,7955
<7957=7958
<7958=7962,7959
<7959=7960
<7960=7961
<7962=7963
<7963=7965,7964
<7966=7967
<7967=7969,7968
<7969=7971,7970
<7972=7973
<7973=7977,7974
<7974=7976,7975
<7978=8012,8011,8010,8009,8004,7997,7979
<7979=7980
<7980=7995,7981
<7981=7987,7982
<7982=7983
<7983=7985,7984
<7985=7986
<7987=7988
<7988=7991,7990,7989
<7991=7992
<7992=7994,7993
<7995=7996
<7997=7998
<7998=8002,7999
<7999=8000
<8000=8001
<8002=8003
<8004=8005
<8005=8007,8006
<8007=8008
<8026=8027
<8027=8029,8028
<8055=8070,8069,8056
<8056=8066,8063,8060,8057
<8057=8059,8058
<8060=8062,8061
<8063=8065,8064
<8066=8068,8067
<8070=8231,8227,8220,8219,8218,8217,8216,8215,8214,8213,8212,8211,8210,8209,8208,8207,8206,8205,8204,8203,8202,8201,8200,8199,8198,8197,8196,8195,8194,8193,8192,8191,8190,8189,8188,8187,8186,8185,8184,8183,8182,8153,8071
<8071=8145,8136,8072
<8072=8073
<8073=8117,8074
<8074=8087,8075
<8075=8076
<8076=8077
<8077=8083,8078
<8078=8079
<8079=8080
<8080=8082,8081
<8083=8084
<8084=8086,8085
<8087=8088
<8088=8112,8089
<8089=8104,8090
<8090=8099,8091
<8091=8093,8092
<8093=8095,8094
<8095=8096
<8096=8098,8097
<8099=8101,8100
<8101=8103,8102
<8104=8106,8105
<8106=8108,8107
<8108=8109
<8109=8111,8110
<8112=8114,8113
<8114=8116,8115
<8117=8118
<8118=8128,8119
<8119=8124,8122,8120
<8120=8121
<8122=8123
<8124=8125
<8125=8127,8126
<8128=8129
<8129=8131,8130
<8131=8133,8132
<8133=8135,8134
<8136=8137
<8137=8139,8138
<8139=8140
<8140=8142,8141
<8142=8144,8143
<8145=8146
<8146=8148,8147
<8148=8150,8149
<8150=8152,8151
<8153=8180,8154
<8154=8171,8156,8155
<8156=8157
<8157=8169,8158
<8158=8167,8165,8163,8161,8159
<8159=8160
<8161=8162
<8163=8164
<8165=8166
<8167=8168
<8169=8170
<8171=8172
<8172=8174,8173
<8174=8175
<8175=8177,8176
<8177=8179,8178
<8180=8181
<8220=8224,8221
<8221=8223,8222
<8224=8226,8225
<8227=8228
<8228=8230,8229
<8231=8233,8232
<8233=8234
<8234=8251,8235
<8235=8244,8242,8240,8238,8236
<8236=8237
<8238=8239
<8240=8241
<8242=8243
<8244=8245
<8245=8247,8246
<8247=8248
<8248=8250,8249
<8251=8252
<8277=8286,8285,8278
<8278=8282,8279
<8279=8281,8280
<8282=8284,8283
<8286=8511,8496,8492,8485,8481,8287
<8287=8288
<8288=8480,8479,8478,8477,8476,8475,8474,8473,8472,8471,8470,8469,8468,8467,8466,8465,8464,8463,8462,8461,8460,8459,8458,8457,8456,8455,8454,8453,8452,8361,8341,8289
<8289=8309,8290
<8290=8292,8291
<8292=8293
<8293=8301,8294
<8294=8299,8297,8295
<8295=8296
<8297=8298
<8299=8300
<8301=8302
<8302=8304,8303
<8304=8306,8305
<8306=8308,8307
<8309=8310
<8310=8340,8311
<8311=8335,8312
<8312=8327,8313
<8313=8322,8314
<8314=8316,8315
<8316=8318,8317
<8318=8319
<8319=8321,8320
<8322=8324,8323
<8324=8326,8325
<8327=8329,8328
<8329=8331,8330
<8331=8332
<8332=8334,8333
<8335=8337,8336
<8337=8339,8338
<8341=8353,8342
<8342=8344,8343
<8344=8345
<8345=8347,8346
<8347=8348
<8348=8350,8349
<8350=8352,8351
<8353=8354
<8354=8356,8355
<8356=8358,8357
<8358=8360,8359
<8361=8450,8375,8362
<8362=8363
<8363=8371,8364
<8364=8365
<8365=8367,8366
<8367=8368
<8368=8370,8369
<8371=8372
<8372=8374,8373
<8375=8431,8422,8391,8377,8376
<8377=8378
<8378=8387,8379
<8379=8385,8380
<8380=8381
<8381=8383,8382
<8383=8384
<8385=8386
<8387=8388
<8388=8390,8389
<8391=8418,8392
<8392=8393
<8393=8416,8394
<8394=8395
<8395=8396
<8396=8414,8397
<8397=8412,8410,8398
<8398=8399
<8399=8408,8400
<8400=8406,8401
<8401=8402
<8402=8404,8403
<8404=8405
<8406=8407
<8408=8409
<8410=8411
<8412=8413
<8414=8415
<8416=8417
<8418=8419
<8419=8421,8420
<8422=8423
<8423=8425,8424
<8425=8426
<8426=8428,8427
<8428=8430,8429
<8431=8432
<8432=8449,8448,8433
<8433=8435,8434
<8435=8436
<8436=8438,8437
<8438=8440,8439
<8440=8441
<8441=8443,8442
<8443=8445,8444
<8445=8447,8446
<8450=8451
<8481=8482
<8482=8484,8483
<8485=8489,8486
<8486=8488,8487
<8489=8491,8490
<8492=8493
<8493=8495,8494
<8496=8497
<8497=8509,8498
<8498=8501,8499
<8499=8500
<8501=8502
<8502=8504,8503
<8504=8506,8505
<8506=8508,8507
<8509=8510
<8511=8512
<8512=8525,8513
<8513=8516,8514
<8514=8515
<8516=8517
<8517=8519,8518
<8519=8520
<8520=8522,8521
<8522=8524,8523
<8525=8526
