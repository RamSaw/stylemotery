>3	FunctionDef	ParticleEffect 
>4	ParameterList	 
>5	CompoundStatement	 
>6	ExpressionStatement	 
>7	AssignmentExpr	cull = false
>8	Identifier	false
>9	Identifier	cull
>10	ExpressionStatement	 
>11	AssignmentExpr	effectLifeCounter = - 1
>12	UnaryOp	- 1
>13	PrimaryExpression	1
>14	UnaryOperator	-
>15	Identifier	effectLifeCounter
>16	ExpressionStatement	 
>17	AssignmentExpr	die = false
>18	Identifier	false
>19	Identifier	die
>20	ExpressionStatement	 
>21	AssignmentExpr	effectLife = - 1
>22	UnaryOp	- 1
>23	PrimaryExpression	1
>24	UnaryOperator	-
>25	Identifier	effectLife
>26	ExpressionStatement	 
>27	AssignmentExpr	waitForParticles = true
>28	Identifier	true
>29	Identifier	waitForParticles
>30	ExpressionStatement	 
>31	AssignmentExpr	running = false
>32	Identifier	false
>33	Identifier	running
>34	ExpressionStatement	 
>35	CallExpression	addType ( SCO_PARTICLE_EFFECT )
>36	ArgumentList	SCO_PARTICLE_EFFECT
>37	Argument	SCO_PARTICLE_EFFECT
>38	Identifier	SCO_PARTICLE_EFFECT
>39	Callee	addType
>40	Identifier	addType
>53	FunctionDef	ParticleEffect 
>54	ParameterList	bool v
>55	Parameter	 
>56	Identifier	v
>57	ParameterType	bool
>58	ReturnType	void
>59	CompoundStatement	 
>60	ExpressionStatement	 
>61	AssignmentExpr	die = v
>62	Identifier	v
>63	Identifier	die
>69	FunctionDef	ParticleEffect 
>70	ParameterList	const std 
>71	Parameter	 
>72	Identifier	name
>73	ParameterType	const std 
>74	ReturnType	void
>75	CompoundStatement	 
>76	ExpressionStatement	 
>77	CallExpression	particleManager -> loadParticleEffectFromBank ( name , this )
>78	ArgumentList	name
>79	Argument	this
>80	Identifier	this
>81	Argument	name
>82	Identifier	name
>83	Callee	particleManager -> loadParticleEffectFromBank
>84	PtrMemberAccess	particleManager -> loadParticleEffectFromBank
>85	Identifier	loadParticleEffectFromBank
>86	Identifier	particleManager
>87	ExpressionStatement	 
>88	CallExpression	BBGE_PROF ( ParticleEffect_load )
>89	ArgumentList	ParticleEffect_load
>90	Argument	ParticleEffect_load
>91	Identifier	ParticleEffect_load
>92	Callee	BBGE_PROF
>93	Identifier	BBGE_PROF
>101	FunctionDef	ParticleEffect 
>102	ParameterList	ParticleEffect * pe
>103	Parameter	 
>104	Identifier	pe
>105	ParameterType	ParticleEffect *
>106	ReturnType	void
>107	CompoundStatement	 
>108	ForStatement	for ( Emitters 
>109	CompoundStatement	 
>110	ExpressionStatement	 
>111	CallExpression	e -> setTexture ( e -> data . texture )
>112	ArgumentList	e -> data . texture
>113	Argument	e -> data . texture
>114	MemberAccess	e -> data . texture
>115	Identifier	texture
>116	PtrMemberAccess	e -> data
>117	Identifier	data
>118	Identifier	e
>119	Callee	e -> setTexture
>120	PtrMemberAccess	e -> setTexture
>121	Identifier	setTexture
>122	Identifier	e
>123	ExpressionStatement	 
>124	AssignmentExpr	e -> data = ( * i ) -> data
>125	PtrMemberAccess	( * i ) -> data
>126	Identifier	data
>127	UnaryOp	* i
>128	Identifier	i
>129	UnaryOperator	*
>130	PtrMemberAccess	e -> data
>131	Identifier	data
>132	Identifier	e
>133	IdentifierDeclStatement	 
>134	IdentifierDecl	* e = pe -> addNewEmitter ( )
>135	AssignmentExpr	* e = pe -> addNewEmitter ( )
>136	CallExpression	pe -> addNewEmitter ( )
>137	ArgumentList	 
>138	Callee	pe -> addNewEmitter
>139	PtrMemberAccess	pe -> addNewEmitter
>140	Identifier	addNewEmitter
>141	Identifier	pe
>142	Identifier	e
>143	Identifier	e
>144	IdentifierDeclType	Emitter *
>145	IncDecOp	 
>146	IncDec	++
>147	Identifier	i
>148	Condition	 
>149	EqualityExpression	i != emitters . end ( )
>150	CallExpression	emitters . end ( )
>151	ArgumentList	 
>152	Callee	emitters . end
>153	MemberAccess	emitters . end
>154	Identifier	end
>155	Identifier	emitters
>156	Identifier	i
>157	ForInit	 
>158	IdentifierDeclStatement	Emitters 
>159	IdentifierDecl	i = emitters . begin ( )
>160	AssignmentExpr	i = emitters . begin ( )
>161	CallExpression	emitters . begin ( )
>162	ArgumentList	 
>163	Callee	emitters . begin
>164	MemberAccess	emitters . begin
>165	Identifier	begin
>166	Identifier	emitters
>167	Identifier	i
>168	Identifier	i
>169	IdentifierDeclType	Emitters 
>170	ExpressionStatement	 
>171	AssignmentExpr	pe -> name = this -> name
>172	PtrMemberAccess	this -> name
>173	Identifier	name
>174	Identifier	this
>175	PtrMemberAccess	pe -> name
>176	Identifier	name
>177	Identifier	pe
>178	ExpressionStatement	 
>179	CallExpression	pe -> clearEmitters ( )
>180	ArgumentList	 
>181	Callee	pe -> clearEmitters
>182	PtrMemberAccess	pe -> clearEmitters
>183	Identifier	clearEmitters
>184	Identifier	pe
>185	ExpressionStatement	 
>186	AssignmentExpr	pe -> effectLife = this -> effectLife
>187	PtrMemberAccess	this -> effectLife
>188	Identifier	effectLife
>189	Identifier	this
>190	PtrMemberAccess	pe -> effectLife
>191	Identifier	effectLife
>192	Identifier	pe
>216	FunctionDef	ParticleEffect 
>217	ParameterList	 
>218	ReturnType	Emitter *
>219	CompoundStatement	 
>220	ReturnStatement	 
>221	Identifier	e
>222	ExpressionStatement	 
>223	CallExpression	addChild ( e , PM_POINTER )
>224	ArgumentList	e
>225	Argument	PM_POINTER
>226	Identifier	PM_POINTER
>227	Argument	e
>228	Identifier	e
>229	Callee	addChild
>230	Identifier	addChild
>231	ExpressionStatement	 
>232	CallExpression	emitters . push_back ( e )
>233	ArgumentList	e
>234	Argument	e
>235	Identifier	e
>236	Callee	emitters . push_back
>237	MemberAccess	emitters . push_back
>238	Identifier	push_back
>239	Identifier	emitters
>240	IdentifierDeclStatement	 
>241	IdentifierDecl	* e = new Emitter ( this )
>242	AssignmentExpr	* e = new Emitter ( this )
>243	Identifier	this
>244	Identifier	this
>245	Identifier	e
>246	IdentifierDeclType	Emitter *
>254	FunctionDef	ParticleEffect 
>255	ParameterList	 
>256	ReturnType	void
>257	CompoundStatement	 
>258	ExpressionStatement	 
>259	CallExpression	children . clear ( )
>260	ArgumentList	 
>261	Callee	children . clear
>262	MemberAccess	children . clear
>263	Identifier	clear
>264	Identifier	children
>265	ExpressionStatement	 
>266	CallExpression	emitters . clear ( )
>267	ArgumentList	 
>268	Callee	emitters . clear
>269	MemberAccess	emitters . clear
>270	Identifier	clear
>271	Identifier	emitters
>272	ForStatement	for ( Emitters 
>273	CompoundStatement	 
>274	ExpressionStatement	 
>275	UnaryOp	* i
>276	Identifier	i
>277	UnaryOperator	*
>278	Statement	 
>279	ExpressionStatement	 
>280	CallExpression	( * i ) -> destroy ( )
>281	ArgumentList	 
>282	Callee	( * i ) -> destroy
>283	PtrMemberAccess	( * i ) -> destroy
>284	Identifier	destroy
>285	UnaryOp	* i
>286	Identifier	i
>287	UnaryOperator	*
>288	IncDecOp	 
>289	IncDec	++
>290	Identifier	i
>291	Condition	 
>292	EqualityExpression	i != emitters . end ( )
>293	CallExpression	emitters . end ( )
>294	ArgumentList	 
>295	Callee	emitters . end
>296	MemberAccess	emitters . end
>297	Identifier	end
>298	Identifier	emitters
>299	Identifier	i
>300	ForInit	 
>301	IdentifierDeclStatement	Emitters 
>302	IdentifierDecl	i = emitters . begin ( )
>303	AssignmentExpr	i = emitters . begin ( )
>304	CallExpression	emitters . begin ( )
>305	ArgumentList	 
>306	Callee	emitters . begin
>307	MemberAccess	emitters . begin
>308	Identifier	begin
>309	Identifier	emitters
>310	Identifier	i
>311	Identifier	i
>312	IdentifierDeclType	Emitters 
>322	FunctionDef	ParticleEffect 
>323	ParameterList	const std 
>324	Parameter	 
>325	Identifier	path
>326	ParameterType	const std 
>327	Parameter	 
>328	Identifier	file
>329	ParameterType	const std 
>330	ReturnType	void
>331	CompoundStatement	 
>332	WhileStatement	while ( inf >> token )
>333	CompoundStatement	 
>334	IfStatement	if ( currentEmitter )
>335	CompoundStatement	 
>336	IfStatement	if ( token == \"SpawnLocal\" )
>337	ElseStatement	else
>338	IfStatement	if ( token == \"Texture\" )
>339	ElseStatement	else
>340	IfStatement	if ( token == \"AvatarVelocity\" )
>341	ElseStatement	else
>342	IfStatement	if ( token == \"AlphaModTimesVel\" )
>343	ElseStatement	else
>344	IfStatement	if ( token == \"RandomScale\" )
>345	ElseStatement	else
>346	IfStatement	if ( token == \"RandomAlphaMod\" )
>347	ElseStatement	else
>348	IfStatement	if ( token == \"RandomSpawnRadius\" )
>349	ElseStatement	else
>350	IfStatement	if ( token == \"RandomSpawnMod\" )
>351	ElseStatement	else
>352	IfStatement	if ( token == \"RandomSpawnRadiusRange\" )
>353	ElseStatement	else
>354	IfStatement	if ( token == \"RandomVelocityMagnitude\" )
>355	ElseStatement	else
>356	IfStatement	if ( token == \"CopyParentRotation\" )
>357	ElseStatement	else
>358	IfStatement	if ( token == \"CopyParentFlip\" )
>359	ElseStatement	else
>360	IfStatement	if ( token == \"JustOne\" )
>361	ElseStatement	else
>362	IfStatement	if ( token == \"SpawnTimeOffset\" )
>363	ElseStatement	else
>364	IfStatement	if ( token == \"RandomRotationRange\" )
>365	ElseStatement	else
>366	IfStatement	if ( token == \"InitialVelocity\" )
>367	ElseStatement	else
>368	IfStatement	if ( token == \"Influenced\" )
>369	ElseStatement	else
>370	IfStatement	if ( token == \"DeathPrt\" )
>371	ElseStatement	else
>372	IfStatement	if ( token == \"Gravity\" )
>373	ElseStatement	else
>374	IfStatement	if ( token == \"PauseLevel\" )
>375	ElseStatement	else
>376	IfStatement	if ( token == \"FlipH\" )
>377	ElseStatement	else
>378	IfStatement	if ( token == \"FlipV\" )
>379	ElseStatement	else
>380	IfStatement	if ( token == \"Blend\" )
>381	ElseStatement	else
>382	IfStatement	if ( token == \"Width\" )
>383	ElseStatement	else
>384	IfStatement	if ( token == \"Height\" )
>385	ElseStatement	else
>386	IfStatement	if ( token == \"Life\" )
>387	ElseStatement	else
>388	IfStatement	if ( token == \"GroupRender\" )
>389	ElseStatement	else
>390	IfStatement	if ( token == \"Shape\" )
>391	ElseStatement	else
>392	IfStatement	if ( token == \"Suck\" )
>393	ElseStatement	else
>394	IfStatement	if ( token == \"InheritColor\" )
>395	ElseStatement	else
>396	IfStatement	if ( token == \"InheritAlpha\" )
>397	CompoundStatement	 
>398	ExpressionStatement	 
>399	ShiftExpression	inf >> currentEmitter -> data . inheritAlpha
>400	MemberAccess	currentEmitter -> data . inheritAlpha
>401	Identifier	inheritAlpha
>402	PtrMemberAccess	currentEmitter -> data
>403	Identifier	data
>404	Identifier	currentEmitter
>405	Identifier	inf
>406	ExpressionStatement	 
>407	ShiftExpression	inf >> tmp
>408	Identifier	tmp
>409	Identifier	inf
>410	Condition	 
>411	EqualityExpression	token == \"InheritAlpha\"
>412	PrimaryExpression	\"InheritAlpha\"
>413	Identifier	token
>414	CompoundStatement	 
>415	ExpressionStatement	 
>416	ShiftExpression	inf >> currentEmitter -> data . inheritColor
>417	MemberAccess	currentEmitter -> data . inheritColor
>418	Identifier	inheritColor
>419	PtrMemberAccess	currentEmitter -> data
>420	Identifier	data
>421	Identifier	currentEmitter
>422	Identifier	inf
>423	ExpressionStatement	 
>424	ShiftExpression	inf >> tmp
>425	Identifier	tmp
>426	Identifier	inf
>427	Condition	 
>428	EqualityExpression	token == \"InheritColor\"
>429	PrimaryExpression	\"InheritColor\"
>430	Identifier	token
>431	CompoundStatement	 
>432	ExpressionStatement	 
>433	ShiftExpression	inf >> currentEmitter -> data . suckIndex >> currentEmitter -> data . suckStr
>434	ShiftExpression	currentEmitter -> data . suckIndex >> currentEmitter -> data . suckStr
>435	MemberAccess	currentEmitter -> data . suckStr
>436	Identifier	suckStr
>437	PtrMemberAccess	currentEmitter -> data
>438	Identifier	data
>439	Identifier	currentEmitter
>440	MemberAccess	currentEmitter -> data . suckIndex
>441	Identifier	suckIndex
>442	PtrMemberAccess	currentEmitter -> data
>443	Identifier	data
>444	Identifier	currentEmitter
>445	Identifier	inf
>446	ExpressionStatement	 
>447	ShiftExpression	inf >> tmp
>448	Identifier	tmp
>449	Identifier	inf
>450	Condition	 
>451	EqualityExpression	token == \"Suck\"
>452	PrimaryExpression	\"Suck\"
>453	Identifier	token
>454	CompoundStatement	 
>455	ExpressionStatement	 
>456	ShiftExpression	inf >> tmp
>457	Identifier	tmp
>458	Identifier	inf
>459	ExpressionStatement	 
>460	ShiftExpression	inf >> tmp
>461	Identifier	tmp
>462	Identifier	inf
>463	Condition	 
>464	EqualityExpression	token == \"Shape\"
>465	PrimaryExpression	\"Shape\"
>466	Identifier	token
>467	CompoundStatement	 
>468	ExpressionStatement	 
>469	ShiftExpression	inf >> currentEmitter -> data . groupRender
>470	MemberAccess	currentEmitter -> data . groupRender
>471	Identifier	groupRender
>472	PtrMemberAccess	currentEmitter -> data
>473	Identifier	data
>474	Identifier	currentEmitter
>475	Identifier	inf
>476	ExpressionStatement	 
>477	ShiftExpression	inf >> tmp
>478	Identifier	tmp
>479	Identifier	inf
>480	Condition	 
>481	EqualityExpression	token == \"GroupRender\"
>482	PrimaryExpression	\"GroupRender\"
>483	Identifier	token
>484	CompoundStatement	 
>485	ExpressionStatement	 
>486	ShiftExpression	inf >> currentEmitter -> data . life
>487	MemberAccess	currentEmitter -> data . life
>488	Identifier	life
>489	PtrMemberAccess	currentEmitter -> data
>490	Identifier	data
>491	Identifier	currentEmitter
>492	Identifier	inf
>493	ExpressionStatement	 
>494	ShiftExpression	inf >> tmp
>495	Identifier	tmp
>496	Identifier	inf
>497	Condition	 
>498	EqualityExpression	token == \"Life\"
>499	PrimaryExpression	\"Life\"
>500	Identifier	token
>501	CompoundStatement	 
>502	ExpressionStatement	 
>503	ShiftExpression	inf >> currentEmitter -> data . height
>504	MemberAccess	currentEmitter -> data . height
>505	Identifier	height
>506	PtrMemberAccess	currentEmitter -> data
>507	Identifier	data
>508	Identifier	currentEmitter
>509	Identifier	inf
>510	ExpressionStatement	 
>511	ShiftExpression	inf >> tmp
>512	Identifier	tmp
>513	Identifier	inf
>514	Condition	 
>515	EqualityExpression	token == \"Height\"
>516	PrimaryExpression	\"Height\"
>517	Identifier	token
>518	CompoundStatement	 
>519	ExpressionStatement	 
>520	ShiftExpression	inf >> currentEmitter -> data . width
>521	MemberAccess	currentEmitter -> data . width
>522	Identifier	width
>523	PtrMemberAccess	currentEmitter -> data
>524	Identifier	data
>525	Identifier	currentEmitter
>526	Identifier	inf
>527	ExpressionStatement	 
>528	ShiftExpression	inf >> tmp
>529	Identifier	tmp
>530	Identifier	inf
>531	Condition	 
>532	EqualityExpression	token == \"Width\"
>533	PrimaryExpression	\"Width\"
>534	Identifier	token
>535	CompoundStatement	 
>536	IfStatement	if ( blendType == \"Add\" )
>537	ElseStatement	else
>538	IfStatement	if ( blendType == \"Sub\" )
>539	ExpressionStatement	 
>540	AssignmentExpr	currentEmitter -> data . blendType = RenderObject 
>541	Identifier	RenderObject 
>542	MemberAccess	currentEmitter -> data . blendType
>543	Identifier	blendType
>544	PtrMemberAccess	currentEmitter -> data
>545	Identifier	data
>546	Identifier	currentEmitter
>547	Condition	 
>548	EqualityExpression	blendType == \"Sub\"
>549	PrimaryExpression	\"Sub\"
>550	Identifier	blendType
>551	ExpressionStatement	 
>552	AssignmentExpr	currentEmitter -> data . blendType = BLEND_ADD
>553	Identifier	BLEND_ADD
>554	MemberAccess	currentEmitter -> data . blendType
>555	Identifier	blendType
>556	PtrMemberAccess	currentEmitter -> data
>557	Identifier	data
>558	Identifier	currentEmitter
>559	Condition	 
>560	EqualityExpression	blendType == \"Add\"
>561	PrimaryExpression	\"Add\"
>562	Identifier	blendType
>563	ExpressionStatement	 
>564	ShiftExpression	inf >> blendType
>565	Identifier	blendType
>566	Identifier	inf
>567	IdentifierDeclStatement	 
>568	IdentifierDecl	blendType
>569	Identifier	blendType
>570	IdentifierDeclType	std 
>571	ExpressionStatement	 
>572	ShiftExpression	inf >> tmp
>573	Identifier	tmp
>574	Identifier	inf
>575	Condition	 
>576	EqualityExpression	token == \"Blend\"
>577	PrimaryExpression	\"Blend\"
>578	Identifier	token
>579	CompoundStatement	 
>580	ExpressionStatement	 
>581	ShiftExpression	inf >> currentEmitter -> data . flipV
>582	MemberAccess	currentEmitter -> data . flipV
>583	Identifier	flipV
>584	PtrMemberAccess	currentEmitter -> data
>585	Identifier	data
>586	Identifier	currentEmitter
>587	Identifier	inf
>588	ExpressionStatement	 
>589	ShiftExpression	inf >> tmp
>590	Identifier	tmp
>591	Identifier	inf
>592	Condition	 
>593	EqualityExpression	token == \"FlipV\"
>594	PrimaryExpression	\"FlipV\"
>595	Identifier	token
>596	CompoundStatement	 
>597	ExpressionStatement	 
>598	ShiftExpression	inf >> currentEmitter -> data . flipH
>599	MemberAccess	currentEmitter -> data . flipH
>600	Identifier	flipH
>601	PtrMemberAccess	currentEmitter -> data
>602	Identifier	data
>603	Identifier	currentEmitter
>604	Identifier	inf
>605	ExpressionStatement	 
>606	ShiftExpression	inf >> tmp
>607	Identifier	tmp
>608	Identifier	inf
>609	Condition	 
>610	EqualityExpression	token == \"FlipH\"
>611	PrimaryExpression	\"FlipH\"
>612	Identifier	token
>613	CompoundStatement	 
>614	ExpressionStatement	 
>615	ShiftExpression	inf >> currentEmitter -> data . pauseLevel
>616	MemberAccess	currentEmitter -> data . pauseLevel
>617	Identifier	pauseLevel
>618	PtrMemberAccess	currentEmitter -> data
>619	Identifier	data
>620	Identifier	currentEmitter
>621	Identifier	inf
>622	ExpressionStatement	 
>623	ShiftExpression	inf >> tmp
>624	Identifier	tmp
>625	Identifier	inf
>626	Condition	 
>627	EqualityExpression	token == \"PauseLevel\"
>628	PrimaryExpression	\"PauseLevel\"
>629	Identifier	token
>630	CompoundStatement	 
>631	ExpressionStatement	 
>632	ShiftExpression	inf >> currentEmitter -> data . gravity . x >> currentEmitter -> data . gravity . y
>633	ShiftExpression	currentEmitter -> data . gravity . x >> currentEmitter -> data . gravity . y
>634	MemberAccess	currentEmitter -> data . gravity . y
>635	Identifier	y
>636	MemberAccess	currentEmitter -> data . gravity
>637	Identifier	gravity
>638	PtrMemberAccess	currentEmitter -> data
>639	Identifier	data
>640	Identifier	currentEmitter
>641	MemberAccess	currentEmitter -> data . gravity . x
>642	Identifier	x
>643	MemberAccess	currentEmitter -> data . gravity
>644	Identifier	gravity
>645	PtrMemberAccess	currentEmitter -> data
>646	Identifier	data
>647	Identifier	currentEmitter
>648	Identifier	inf
>649	ExpressionStatement	 
>650	ShiftExpression	inf >> tmp
>651	Identifier	tmp
>652	Identifier	inf
>653	Condition	 
>654	EqualityExpression	token == \"Gravity\"
>655	PrimaryExpression	\"Gravity\"
>656	Identifier	token
>657	CompoundStatement	 
>658	ExpressionStatement	 
>659	ShiftExpression	inf >> currentEmitter -> data . deathPrt
>660	MemberAccess	currentEmitter -> data . deathPrt
>661	Identifier	deathPrt
>662	PtrMemberAccess	currentEmitter -> data
>663	Identifier	data
>664	Identifier	currentEmitter
>665	Identifier	inf
>666	ExpressionStatement	 
>667	ShiftExpression	inf >> tmp
>668	Identifier	tmp
>669	Identifier	inf
>670	Condition	 
>671	EqualityExpression	token == \"DeathPrt\"
>672	PrimaryExpression	\"DeathPrt\"
>673	Identifier	token
>674	CompoundStatement	 
>675	ExpressionStatement	 
>676	ShiftExpression	inf >> currentEmitter -> data . influenced
>677	MemberAccess	currentEmitter -> data . influenced
>678	Identifier	influenced
>679	PtrMemberAccess	currentEmitter -> data
>680	Identifier	data
>681	Identifier	currentEmitter
>682	Identifier	inf
>683	ExpressionStatement	 
>684	ShiftExpression	inf >> tmp
>685	Identifier	tmp
>686	Identifier	inf
>687	Condition	 
>688	EqualityExpression	token == \"Influenced\"
>689	PrimaryExpression	\"Influenced\"
>690	Identifier	token
>691	CompoundStatement	 
>692	ExpressionStatement	 
>693	ShiftExpression	inf >> currentEmitter -> data . initialVelocity . x >> currentEmitter -> data . initialVelocity . y
>694	ShiftExpression	currentEmitter -> data . initialVelocity . x >> currentEmitter -> data . initialVelocity . y
>695	MemberAccess	currentEmitter -> data . initialVelocity . y
>696	Identifier	y
>697	MemberAccess	currentEmitter -> data . initialVelocity
>698	Identifier	initialVelocity
>699	PtrMemberAccess	currentEmitter -> data
>700	Identifier	data
>701	Identifier	currentEmitter
>702	MemberAccess	currentEmitter -> data . initialVelocity . x
>703	Identifier	x
>704	MemberAccess	currentEmitter -> data . initialVelocity
>705	Identifier	initialVelocity
>706	PtrMemberAccess	currentEmitter -> data
>707	Identifier	data
>708	Identifier	currentEmitter
>709	Identifier	inf
>710	ExpressionStatement	 
>711	ShiftExpression	inf >> tmp
>712	Identifier	tmp
>713	Identifier	inf
>714	Condition	 
>715	EqualityExpression	token == \"InitialVelocity\"
>716	PrimaryExpression	\"InitialVelocity\"
>717	Identifier	token
>718	CompoundStatement	 
>719	ExpressionStatement	 
>720	ShiftExpression	inf >> currentEmitter -> data . randomRotationRange
>721	MemberAccess	currentEmitter -> data . randomRotationRange
>722	Identifier	randomRotationRange
>723	PtrMemberAccess	currentEmitter -> data
>724	Identifier	data
>725	Identifier	currentEmitter
>726	Identifier	inf
>727	ExpressionStatement	 
>728	ShiftExpression	inf >> tmp
>729	Identifier	tmp
>730	Identifier	inf
>731	Condition	 
>732	EqualityExpression	token == \"RandomRotationRange\"
>733	PrimaryExpression	\"RandomRotationRange\"
>734	Identifier	token
>735	CompoundStatement	 
>736	ExpressionStatement	 
>737	ShiftExpression	inf >> currentEmitter -> data . spawnTimeOffset
>738	MemberAccess	currentEmitter -> data . spawnTimeOffset
>739	Identifier	spawnTimeOffset
>740	PtrMemberAccess	currentEmitter -> data
>741	Identifier	data
>742	Identifier	currentEmitter
>743	Identifier	inf
>744	ExpressionStatement	 
>745	ShiftExpression	inf >> tmp
>746	Identifier	tmp
>747	Identifier	inf
>748	Condition	 
>749	EqualityExpression	token == \"SpawnTimeOffset\"
>750	PrimaryExpression	\"SpawnTimeOffset\"
>751	Identifier	token
>752	CompoundStatement	 
>753	ExpressionStatement	 
>754	ShiftExpression	inf >> currentEmitter -> data . justOne
>755	MemberAccess	currentEmitter -> data . justOne
>756	Identifier	justOne
>757	PtrMemberAccess	currentEmitter -> data
>758	Identifier	data
>759	Identifier	currentEmitter
>760	Identifier	inf
>761	ExpressionStatement	 
>762	ShiftExpression	inf >> tmp
>763	Identifier	tmp
>764	Identifier	inf
>765	Condition	 
>766	EqualityExpression	token == \"JustOne\"
>767	PrimaryExpression	\"JustOne\"
>768	Identifier	token
>769	CompoundStatement	 
>770	ExpressionStatement	 
>771	ShiftExpression	inf >> currentEmitter -> data . copyParentFlip
>772	MemberAccess	currentEmitter -> data . copyParentFlip
>773	Identifier	copyParentFlip
>774	PtrMemberAccess	currentEmitter -> data
>775	Identifier	data
>776	Identifier	currentEmitter
>777	Identifier	inf
>778	ExpressionStatement	 
>779	ShiftExpression	inf >> tmp
>780	Identifier	tmp
>781	Identifier	inf
>782	Condition	 
>783	EqualityExpression	token == \"CopyParentFlip\"
>784	PrimaryExpression	\"CopyParentFlip\"
>785	Identifier	token
>786	CompoundStatement	 
>787	ExpressionStatement	 
>788	ShiftExpression	inf >> currentEmitter -> data . copyParentRotation
>789	MemberAccess	currentEmitter -> data . copyParentRotation
>790	Identifier	copyParentRotation
>791	PtrMemberAccess	currentEmitter -> data
>792	Identifier	data
>793	Identifier	currentEmitter
>794	Identifier	inf
>795	ExpressionStatement	 
>796	ShiftExpression	inf >> tmp
>797	Identifier	tmp
>798	Identifier	inf
>799	Condition	 
>800	EqualityExpression	token == \"CopyParentRotation\"
>801	PrimaryExpression	\"CopyParentRotation\"
>802	Identifier	token
>803	CompoundStatement	 
>804	ExpressionStatement	 
>805	ShiftExpression	inf >> currentEmitter -> data . randomVelocityMagnitude
>806	MemberAccess	currentEmitter -> data . randomVelocityMagnitude
>807	Identifier	randomVelocityMagnitude
>808	PtrMemberAccess	currentEmitter -> data
>809	Identifier	data
>810	Identifier	currentEmitter
>811	Identifier	inf
>812	ExpressionStatement	 
>813	ShiftExpression	inf >> tmp
>814	Identifier	tmp
>815	Identifier	inf
>816	Condition	 
>817	EqualityExpression	token == \"RandomVelocityMagnitude\"
>818	PrimaryExpression	\"RandomVelocityMagnitude\"
>819	Identifier	token
>820	CompoundStatement	 
>821	ExpressionStatement	 
>822	ShiftExpression	inf >> currentEmitter -> data . randomSpawnRadiusRange
>823	MemberAccess	currentEmitter -> data . randomSpawnRadiusRange
>824	Identifier	randomSpawnRadiusRange
>825	PtrMemberAccess	currentEmitter -> data
>826	Identifier	data
>827	Identifier	currentEmitter
>828	Identifier	inf
>829	ExpressionStatement	 
>830	ShiftExpression	inf >> tmp
>831	Identifier	tmp
>832	Identifier	inf
>833	Condition	 
>834	EqualityExpression	token == \"RandomSpawnRadiusRange\"
>835	PrimaryExpression	\"RandomSpawnRadiusRange\"
>836	Identifier	token
>837	CompoundStatement	 
>838	ExpressionStatement	 
>839	ShiftExpression	inf >> currentEmitter -> data . randomSpawnMod . x >> currentEmitter -> data . randomSpawnMod . y
>840	ShiftExpression	currentEmitter -> data . randomSpawnMod . x >> currentEmitter -> data . randomSpawnMod . y
>841	MemberAccess	currentEmitter -> data . randomSpawnMod . y
>842	Identifier	y
>843	MemberAccess	currentEmitter -> data . randomSpawnMod
>844	Identifier	randomSpawnMod
>845	PtrMemberAccess	currentEmitter -> data
>846	Identifier	data
>847	Identifier	currentEmitter
>848	MemberAccess	currentEmitter -> data . randomSpawnMod . x
>849	Identifier	x
>850	MemberAccess	currentEmitter -> data . randomSpawnMod
>851	Identifier	randomSpawnMod
>852	PtrMemberAccess	currentEmitter -> data
>853	Identifier	data
>854	Identifier	currentEmitter
>855	Identifier	inf
>856	ExpressionStatement	 
>857	ShiftExpression	inf >> tmp
>858	Identifier	tmp
>859	Identifier	inf
>860	Condition	 
>861	EqualityExpression	token == \"RandomSpawnMod\"
>862	PrimaryExpression	\"RandomSpawnMod\"
>863	Identifier	token
>864	CompoundStatement	 
>865	ExpressionStatement	 
>866	ShiftExpression	inf >> currentEmitter -> data . randomSpawnRadius
>867	MemberAccess	currentEmitter -> data . randomSpawnRadius
>868	Identifier	randomSpawnRadius
>869	PtrMemberAccess	currentEmitter -> data
>870	Identifier	data
>871	Identifier	currentEmitter
>872	Identifier	inf
>873	ExpressionStatement	 
>874	ShiftExpression	inf >> tmp
>875	Identifier	tmp
>876	Identifier	inf
>877	Condition	 
>878	EqualityExpression	token == \"RandomSpawnRadius\"
>879	PrimaryExpression	\"RandomSpawnRadius\"
>880	Identifier	token
>881	CompoundStatement	 
>882	ExpressionStatement	 
>883	ShiftExpression	inf >> currentEmitter -> data . randomAlphaMod1 >> currentEmitter -> data . randomAlphaMod2
>884	ShiftExpression	currentEmitter -> data . randomAlphaMod1 >> currentEmitter -> data . randomAlphaMod2
>885	MemberAccess	currentEmitter -> data . randomAlphaMod2
>886	Identifier	randomAlphaMod2
>887	PtrMemberAccess	currentEmitter -> data
>888	Identifier	data
>889	Identifier	currentEmitter
>890	MemberAccess	currentEmitter -> data . randomAlphaMod1
>891	Identifier	randomAlphaMod1
>892	PtrMemberAccess	currentEmitter -> data
>893	Identifier	data
>894	Identifier	currentEmitter
>895	Identifier	inf
>896	ExpressionStatement	 
>897	ShiftExpression	inf >> tmp
>898	Identifier	tmp
>899	Identifier	inf
>900	Condition	 
>901	EqualityExpression	token == \"RandomAlphaMod\"
>902	PrimaryExpression	\"RandomAlphaMod\"
>903	Identifier	token
>904	CompoundStatement	 
>905	ExpressionStatement	 
>906	ShiftExpression	inf >> currentEmitter -> data . randomScale1 >> currentEmitter -> data . randomScale2
>907	ShiftExpression	currentEmitter -> data . randomScale1 >> currentEmitter -> data . randomScale2
>908	MemberAccess	currentEmitter -> data . randomScale2
>909	Identifier	randomScale2
>910	PtrMemberAccess	currentEmitter -> data
>911	Identifier	data
>912	Identifier	currentEmitter
>913	MemberAccess	currentEmitter -> data . randomScale1
>914	Identifier	randomScale1
>915	PtrMemberAccess	currentEmitter -> data
>916	Identifier	data
>917	Identifier	currentEmitter
>918	Identifier	inf
>919	ExpressionStatement	 
>920	ShiftExpression	inf >> tmp
>921	Identifier	tmp
>922	Identifier	inf
>923	Condition	 
>924	EqualityExpression	token == \"RandomScale\"
>925	PrimaryExpression	\"RandomScale\"
>926	Identifier	token
>927	CompoundStatement	 
>928	ExpressionStatement	 
>929	ShiftExpression	inf >> currentEmitter -> data . alphaModTimesVel
>930	MemberAccess	currentEmitter -> data . alphaModTimesVel
>931	Identifier	alphaModTimesVel
>932	PtrMemberAccess	currentEmitter -> data
>933	Identifier	data
>934	Identifier	currentEmitter
>935	Identifier	inf
>936	ExpressionStatement	 
>937	ShiftExpression	inf >> tmp
>938	Identifier	tmp
>939	Identifier	inf
>940	Condition	 
>941	EqualityExpression	token == \"AlphaModTimesVel\"
>942	PrimaryExpression	\"AlphaModTimesVel\"
>943	Identifier	token
>944	CompoundStatement	 
>945	ExpressionStatement	 
>946	ShiftExpression	inf >> currentEmitter -> data . avatarVelocity
>947	MemberAccess	currentEmitter -> data . avatarVelocity
>948	Identifier	avatarVelocity
>949	PtrMemberAccess	currentEmitter -> data
>950	Identifier	data
>951	Identifier	currentEmitter
>952	Identifier	inf
>953	ExpressionStatement	 
>954	ShiftExpression	inf >> tmp
>955	Identifier	tmp
>956	Identifier	inf
>957	Condition	 
>958	EqualityExpression	token == \"AvatarVelocity\"
>959	PrimaryExpression	\"AvatarVelocity\"
>960	Identifier	token
>961	CompoundStatement	 
>962	ExpressionStatement	 
>963	ShiftExpression	inf >> currentEmitter -> data . texture
>964	MemberAccess	currentEmitter -> data . texture
>965	Identifier	texture
>966	PtrMemberAccess	currentEmitter -> data
>967	Identifier	data
>968	Identifier	currentEmitter
>969	Identifier	inf
>970	ExpressionStatement	 
>971	ShiftExpression	inf >> tmp
>972	Identifier	tmp
>973	Identifier	inf
>974	Condition	 
>975	EqualityExpression	token == \"Texture\"
>976	PrimaryExpression	\"Texture\"
>977	Identifier	token
>978	CompoundStatement	 
>979	ContinueStatement	 
>980	ExpressionStatement	 
>981	ShiftExpression	inf >> currentEmitter -> data . spawnLocal
>982	MemberAccess	currentEmitter -> data . spawnLocal
>983	Identifier	spawnLocal
>984	PtrMemberAccess	currentEmitter -> data
>985	Identifier	data
>986	Identifier	currentEmitter
>987	Identifier	inf
>988	ExpressionStatement	 
>989	ShiftExpression	inf >> tmp
>990	Identifier	tmp
>991	Identifier	inf
>992	Condition	 
>993	EqualityExpression	token == \"SpawnLocal\"
>994	PrimaryExpression	\"SpawnLocal\"
>995	Identifier	token
>996	Condition	 
>997	Identifier	currentEmitter
>998	IfStatement	if ( token == \"EmitterUpdateCull\" )
>999	CompoundStatement	 
>1000	ContinueStatement	 
>1001	ExpressionStatement	 
>1002	ShiftExpression	inf >> updateCull
>1003	Identifier	updateCull
>1004	Identifier	inf
>1005	ExpressionStatement	 
>1006	ShiftExpression	inf >> tmp
>1007	Identifier	tmp
>1008	Identifier	inf
>1009	Condition	 
>1010	EqualityExpression	token == \"EmitterUpdateCull\"
>1011	PrimaryExpression	\"EmitterUpdateCull\"
>1012	Identifier	token
>1013	IfStatement	if ( token == \"EmitterScale\" )
>1014	CompoundStatement	 
>1015	ContinueStatement	 
>1016	ExpressionStatement	 
>1017	AssignmentExpr	scale . y = scale . x
>1018	MemberAccess	scale . x
>1019	Identifier	x
>1020	Identifier	scale
>1021	MemberAccess	scale . y
>1022	Identifier	y
>1023	Identifier	scale
>1024	ExpressionStatement	 
>1025	ShiftExpression	inf >> scale . x
>1026	MemberAccess	scale . x
>1027	Identifier	x
>1028	Identifier	scale
>1029	Identifier	inf
>1030	ExpressionStatement	 
>1031	ShiftExpression	inf >> tmp
>1032	Identifier	tmp
>1033	Identifier	inf
>1034	Condition	 
>1035	EqualityExpression	token == \"EmitterScale\"
>1036	PrimaryExpression	\"EmitterScale\"
>1037	Identifier	token
>1038	IfStatement	if ( token == \"EmitterLife\" )
>1039	CompoundStatement	 
>1040	ContinueStatement	 
>1041	ExpressionStatement	 
>1042	ShiftExpression	inf >> effectLife
>1043	Identifier	effectLife
>1044	Identifier	inf
>1045	ExpressionStatement	 
>1046	ShiftExpression	inf >> tmp
>1047	Identifier	tmp
>1048	Identifier	inf
>1049	Condition	 
>1050	EqualityExpression	token == \"EmitterLife\"
>1051	PrimaryExpression	\"EmitterLife\"
>1052	Identifier	token
>1053	IfStatement	if ( state == 6 && currentEmitter )
>1054	CompoundStatement	 
>1055	ExpressionStatement	 
>1056	CallExpression	currentEmitter -> data . scale . startPath ( currentEmitter -> data . life )
>1057	ArgumentList	currentEmitter -> data . life
>1058	Argument	currentEmitter -> data . life
>1059	MemberAccess	currentEmitter -> data . life
>1060	Identifier	life
>1061	PtrMemberAccess	currentEmitter -> data
>1062	Identifier	data
>1063	Identifier	currentEmitter
>1064	Callee	currentEmitter -> data . scale . startPath
>1065	MemberAccess	currentEmitter -> data . scale . startPath
>1066	Identifier	startPath
>1067	MemberAccess	currentEmitter -> data . scale
>1068	Identifier	scale
>1069	PtrMemberAccess	currentEmitter -> data
>1070	Identifier	data
>1071	Identifier	currentEmitter
>1072	ExpressionStatement	 
>1073	CallExpression	currentEmitter -> data . scale . data -> path . addPathNode ( Vector ( sx , sy ) , t )
>1074	ArgumentList	Vector ( sx , sy )
>1075	Argument	t
>1076	Identifier	t
>1077	Argument	Vector ( sx , sy )
>1078	CallExpression	Vector ( sx , sy )
>1079	ArgumentList	sx
>1080	Argument	sy
>1081	Identifier	sy
>1082	Argument	sx
>1083	Identifier	sx
>1084	Callee	Vector
>1085	Identifier	Vector
>1086	Callee	currentEmitter -> data . scale . data -> path . addPathNode
>1087	MemberAccess	currentEmitter -> data . scale . data -> path . addPathNode
>1088	Identifier	addPathNode
>1089	PtrMemberAccess	currentEmitter -> data . scale . data -> path
>1090	Identifier	path
>1091	MemberAccess	currentEmitter -> data . scale . data
>1092	Identifier	data
>1093	MemberAccess	currentEmitter -> data . scale
>1094	Identifier	scale
>1095	PtrMemberAccess	currentEmitter -> data
>1096	Identifier	data
>1097	Identifier	currentEmitter
>1098	ExpressionStatement	 
>1099	CallExpression	currentEmitter -> data . scale . ensureData ( )
>1100	ArgumentList	 
>1101	Callee	currentEmitter -> data . scale . ensureData
>1102	MemberAccess	currentEmitter -> data . scale . ensureData
>1103	Identifier	ensureData
>1104	MemberAccess	currentEmitter -> data . scale
>1105	Identifier	scale
>1106	PtrMemberAccess	currentEmitter -> data
>1107	Identifier	data
>1108	Identifier	currentEmitter
>1109	ExpressionStatement	 
>1110	ShiftExpression	inf >> sx >> sy
>1111	ShiftExpression	sx >> sy
>1112	Identifier	sy
>1113	Identifier	sx
>1114	Identifier	inf
>1115	ExpressionStatement	 
>1116	ShiftExpression	is >> t
>1117	Identifier	t
>1118	Identifier	is
>1119	IdentifierDeclStatement	 
>1120	IdentifierDecl	is ( token )
>1121	Identifier	token
>1122	Identifier	is
>1123	IdentifierDeclType	SimpleIStringStream
>1124	IdentifierDeclStatement	 
>1125	IdentifierDecl	sy
>1126	Identifier	sy
>1127	IdentifierDeclType	float
>1128	IdentifierDecl	sx
>1129	Identifier	sx
>1130	IdentifierDeclType	float
>1131	IdentifierDecl	t
>1132	Identifier	t
>1133	IdentifierDeclType	float
>1134	Condition	 
>1135	AndExpression	state == 6 && currentEmitter
>1136	Identifier	currentEmitter
>1137	EqualityExpression	state == 6
>1138	PrimaryExpression	6
>1139	Identifier	state
>1140	IfStatement	if ( state == 5 && currentEmitter )
>1141	CompoundStatement	 
>1142	ExpressionStatement	 
>1143	CallExpression	currentEmitter -> data . rotation . startPath ( currentEmitter -> data . life )
>1144	ArgumentList	currentEmitter -> data . life
>1145	Argument	currentEmitter -> data . life
>1146	MemberAccess	currentEmitter -> data . life
>1147	Identifier	life
>1148	PtrMemberAccess	currentEmitter -> data
>1149	Identifier	data
>1150	Identifier	currentEmitter
>1151	Callee	currentEmitter -> data . rotation . startPath
>1152	MemberAccess	currentEmitter -> data . rotation . startPath
>1153	Identifier	startPath
>1154	MemberAccess	currentEmitter -> data . rotation
>1155	Identifier	rotation
>1156	PtrMemberAccess	currentEmitter -> data
>1157	Identifier	data
>1158	Identifier	currentEmitter
>1159	ExpressionStatement	 
>1160	CallExpression	currentEmitter -> data . rotation . data -> path . addPathNode ( Vector ( 0 , 0 , num ) , t )
>1161	ArgumentList	Vector ( 0 , 0 , num )
>1162	Argument	t
>1163	Identifier	t
>1164	Argument	Vector ( 0 , 0 , num )
>1165	CallExpression	Vector ( 0 , 0 , num )
>1166	ArgumentList	0
>1167	Argument	num
>1168	Identifier	num
>1169	Argument	0
>1170	PrimaryExpression	0
>1171	Argument	0
>1172	PrimaryExpression	0
>1173	Callee	Vector
>1174	Identifier	Vector
>1175	Callee	currentEmitter -> data . rotation . data -> path . addPathNode
>1176	MemberAccess	currentEmitter -> data . rotation . data -> path . addPathNode
>1177	Identifier	addPathNode
>1178	PtrMemberAccess	currentEmitter -> data . rotation . data -> path
>1179	Identifier	path
>1180	MemberAccess	currentEmitter -> data . rotation . data
>1181	Identifier	data
>1182	MemberAccess	currentEmitter -> data . rotation
>1183	Identifier	rotation
>1184	PtrMemberAccess	currentEmitter -> data
>1185	Identifier	data
>1186	Identifier	currentEmitter
>1187	ExpressionStatement	 
>1188	CallExpression	currentEmitter -> data . rotation . ensureData ( )
>1189	ArgumentList	 
>1190	Callee	currentEmitter -> data . rotation . ensureData
>1191	MemberAccess	currentEmitter -> data . rotation . ensureData
>1192	Identifier	ensureData
>1193	MemberAccess	currentEmitter -> data . rotation
>1194	Identifier	rotation
>1195	PtrMemberAccess	currentEmitter -> data
>1196	Identifier	data
>1197	Identifier	currentEmitter
>1198	ExpressionStatement	 
>1199	ShiftExpression	inf >> num
>1200	Identifier	num
>1201	Identifier	inf
>1202	ExpressionStatement	 
>1203	ShiftExpression	is >> t
>1204	Identifier	t
>1205	Identifier	is
>1206	IdentifierDeclStatement	 
>1207	IdentifierDecl	is ( token )
>1208	Identifier	token
>1209	Identifier	is
>1210	IdentifierDeclType	SimpleIStringStream
>1211	IdentifierDeclStatement	 
>1212	IdentifierDecl	num
>1213	Identifier	num
>1214	IdentifierDeclType	float
>1215	IdentifierDecl	t
>1216	Identifier	t
>1217	IdentifierDeclType	float
>1218	Condition	 
>1219	AndExpression	state == 5 && currentEmitter
>1220	Identifier	currentEmitter
>1221	EqualityExpression	state == 5
>1222	PrimaryExpression	5
>1223	Identifier	state
>1224	IfStatement	if ( state == 4 && currentEmitter )
>1225	CompoundStatement	 
>1226	ExpressionStatement	 
>1227	CallExpression	currentEmitter -> data . alpha . startPath ( currentEmitter -> data . life )
>1228	ArgumentList	currentEmitter -> data . life
>1229	Argument	currentEmitter -> data . life
>1230	MemberAccess	currentEmitter -> data . life
>1231	Identifier	life
>1232	PtrMemberAccess	currentEmitter -> data
>1233	Identifier	data
>1234	Identifier	currentEmitter
>1235	Callee	currentEmitter -> data . alpha . startPath
>1236	MemberAccess	currentEmitter -> data . alpha . startPath
>1237	Identifier	startPath
>1238	MemberAccess	currentEmitter -> data . alpha
>1239	Identifier	alpha
>1240	PtrMemberAccess	currentEmitter -> data
>1241	Identifier	data
>1242	Identifier	currentEmitter
>1243	ExpressionStatement	 
>1244	CallExpression	currentEmitter -> data . alpha . data -> path . addPathNode ( num , t )
>1245	ArgumentList	num
>1246	Argument	t
>1247	Identifier	t
>1248	Argument	num
>1249	Identifier	num
>1250	Callee	currentEmitter -> data . alpha . data -> path . addPathNode
>1251	MemberAccess	currentEmitter -> data . alpha . data -> path . addPathNode
>1252	Identifier	addPathNode
>1253	PtrMemberAccess	currentEmitter -> data . alpha . data -> path
>1254	Identifier	path
>1255	MemberAccess	currentEmitter -> data . alpha . data
>1256	Identifier	data
>1257	MemberAccess	currentEmitter -> data . alpha
>1258	Identifier	alpha
>1259	PtrMemberAccess	currentEmitter -> data
>1260	Identifier	data
>1261	Identifier	currentEmitter
>1262	ExpressionStatement	 
>1263	CallExpression	currentEmitter -> data . alpha . ensureData ( )
>1264	ArgumentList	 
>1265	Callee	currentEmitter -> data . alpha . ensureData
>1266	MemberAccess	currentEmitter -> data . alpha . ensureData
>1267	Identifier	ensureData
>1268	MemberAccess	currentEmitter -> data . alpha
>1269	Identifier	alpha
>1270	PtrMemberAccess	currentEmitter -> data
>1271	Identifier	data
>1272	Identifier	currentEmitter
>1273	ExpressionStatement	 
>1274	ShiftExpression	inf >> num
>1275	Identifier	num
>1276	Identifier	inf
>1277	ExpressionStatement	 
>1278	ShiftExpression	is >> t
>1279	Identifier	t
>1280	Identifier	is
>1281	IdentifierDeclStatement	 
>1282	IdentifierDecl	is ( token )
>1283	Identifier	token
>1284	Identifier	is
>1285	IdentifierDeclType	SimpleIStringStream
>1286	IdentifierDeclStatement	 
>1287	IdentifierDecl	num
>1288	Identifier	num
>1289	IdentifierDeclType	float
>1290	IdentifierDecl	t
>1291	Identifier	t
>1292	IdentifierDeclType	float
>1293	Condition	 
>1294	AndExpression	state == 4 && currentEmitter
>1295	Identifier	currentEmitter
>1296	EqualityExpression	state == 4
>1297	PrimaryExpression	4
>1298	Identifier	state
>1299	IfStatement	if ( state == 3 && currentEmitter )
>1300	CompoundStatement	 
>1301	ExpressionStatement	 
>1302	CallExpression	currentEmitter -> data . number . startPath ( currentEmitter -> data . life )
>1303	ArgumentList	currentEmitter -> data . life
>1304	Argument	currentEmitter -> data . life
>1305	MemberAccess	currentEmitter -> data . life
>1306	Identifier	life
>1307	PtrMemberAccess	currentEmitter -> data
>1308	Identifier	data
>1309	Identifier	currentEmitter
>1310	Callee	currentEmitter -> data . number . startPath
>1311	MemberAccess	currentEmitter -> data . number . startPath
>1312	Identifier	startPath
>1313	MemberAccess	currentEmitter -> data . number
>1314	Identifier	number
>1315	PtrMemberAccess	currentEmitter -> data
>1316	Identifier	data
>1317	Identifier	currentEmitter
>1318	ExpressionStatement	 
>1319	CallExpression	currentEmitter -> data . number . data -> path . addPathNode ( num , t )
>1320	ArgumentList	num
>1321	Argument	t
>1322	Identifier	t
>1323	Argument	num
>1324	Identifier	num
>1325	Callee	currentEmitter -> data . number . data -> path . addPathNode
>1326	MemberAccess	currentEmitter -> data . number . data -> path . addPathNode
>1327	Identifier	addPathNode
>1328	PtrMemberAccess	currentEmitter -> data . number . data -> path
>1329	Identifier	path
>1330	MemberAccess	currentEmitter -> data . number . data
>1331	Identifier	data
>1332	MemberAccess	currentEmitter -> data . number
>1333	Identifier	number
>1334	PtrMemberAccess	currentEmitter -> data
>1335	Identifier	data
>1336	Identifier	currentEmitter
>1337	ExpressionStatement	 
>1338	CallExpression	currentEmitter -> data . number . ensureData ( )
>1339	ArgumentList	 
>1340	Callee	currentEmitter -> data . number . ensureData
>1341	MemberAccess	currentEmitter -> data . number . ensureData
>1342	Identifier	ensureData
>1343	MemberAccess	currentEmitter -> data . number
>1344	Identifier	number
>1345	PtrMemberAccess	currentEmitter -> data
>1346	Identifier	data
>1347	Identifier	currentEmitter
>1348	ExpressionStatement	 
>1349	ShiftExpression	inf >> num
>1350	Identifier	num
>1351	Identifier	inf
>1352	ExpressionStatement	 
>1353	ShiftExpression	is >> t
>1354	Identifier	t
>1355	Identifier	is
>1356	IdentifierDeclStatement	 
>1357	IdentifierDecl	is ( token )
>1358	Identifier	token
>1359	Identifier	is
>1360	IdentifierDeclType	SimpleIStringStream
>1361	IdentifierDeclStatement	 
>1362	IdentifierDecl	num
>1363	Identifier	num
>1364	IdentifierDeclType	float
>1365	IdentifierDecl	t
>1366	Identifier	t
>1367	IdentifierDeclType	float
>1368	Condition	 
>1369	AndExpression	state == 3 && currentEmitter
>1370	Identifier	currentEmitter
>1371	EqualityExpression	state == 3
>1372	PrimaryExpression	3
>1373	Identifier	state
>1374	IfStatement	if ( state == 2 && currentEmitter )
>1375	CompoundStatement	 
>1376	ExpressionStatement	 
>1377	CallExpression	currentEmitter -> data . color . startPath ( currentEmitter -> data . life )
>1378	ArgumentList	currentEmitter -> data . life
>1379	Argument	currentEmitter -> data . life
>1380	MemberAccess	currentEmitter -> data . life
>1381	Identifier	life
>1382	PtrMemberAccess	currentEmitter -> data
>1383	Identifier	data
>1384	Identifier	currentEmitter
>1385	Callee	currentEmitter -> data . color . startPath
>1386	MemberAccess	currentEmitter -> data . color . startPath
>1387	Identifier	startPath
>1388	MemberAccess	currentEmitter -> data . color
>1389	Identifier	color
>1390	PtrMemberAccess	currentEmitter -> data
>1391	Identifier	data
>1392	Identifier	currentEmitter
>1393	ExpressionStatement	 
>1394	CallExpression	currentEmitter -> data . color . data -> path . addPathNode ( Vector ( x , y , z ) , t )
>1395	ArgumentList	Vector ( x , y , z )
>1396	Argument	t
>1397	Identifier	t
>1398	Argument	Vector ( x , y , z )
>1399	CallExpression	Vector ( x , y , z )
>1400	ArgumentList	x
>1401	Argument	z
>1402	Identifier	z
>1403	Argument	y
>1404	Identifier	y
>1405	Argument	x
>1406	Identifier	x
>1407	Callee	Vector
>1408	Identifier	Vector
>1409	Callee	currentEmitter -> data . color . data -> path . addPathNode
>1410	MemberAccess	currentEmitter -> data . color . data -> path . addPathNode
>1411	Identifier	addPathNode
>1412	PtrMemberAccess	currentEmitter -> data . color . data -> path
>1413	Identifier	path
>1414	MemberAccess	currentEmitter -> data . color . data
>1415	Identifier	data
>1416	MemberAccess	currentEmitter -> data . color
>1417	Identifier	color
>1418	PtrMemberAccess	currentEmitter -> data
>1419	Identifier	data
>1420	Identifier	currentEmitter
>1421	ExpressionStatement	 
>1422	CallExpression	currentEmitter -> data . color . ensureData ( )
>1423	ArgumentList	 
>1424	Callee	currentEmitter -> data . color . ensureData
>1425	MemberAccess	currentEmitter -> data . color . ensureData
>1426	Identifier	ensureData
>1427	MemberAccess	currentEmitter -> data . color
>1428	Identifier	color
>1429	PtrMemberAccess	currentEmitter -> data
>1430	Identifier	data
>1431	Identifier	currentEmitter
>1432	ExpressionStatement	 
>1433	ShiftExpression	inf >> x >> y >> z
>1434	ShiftExpression	x >> y >> z
>1435	ShiftExpression	y >> z
>1436	Identifier	z
>1437	Identifier	y
>1438	Identifier	x
>1439	Identifier	inf
>1440	ExpressionStatement	 
>1441	ShiftExpression	is >> t
>1442	Identifier	t
>1443	Identifier	is
>1444	IdentifierDeclStatement	 
>1445	IdentifierDecl	is ( token )
>1446	Identifier	token
>1447	Identifier	is
>1448	IdentifierDeclType	SimpleIStringStream
>1449	IdentifierDeclStatement	 
>1450	IdentifierDecl	z
>1451	Identifier	z
>1452	IdentifierDeclType	float
>1453	IdentifierDecl	y
>1454	Identifier	y
>1455	IdentifierDeclType	float
>1456	IdentifierDecl	x
>1457	Identifier	x
>1458	IdentifierDeclType	float
>1459	IdentifierDecl	t
>1460	Identifier	t
>1461	IdentifierDeclType	float
>1462	Condition	 
>1463	AndExpression	state == 2 && currentEmitter
>1464	Identifier	currentEmitter
>1465	EqualityExpression	state == 2
>1466	PrimaryExpression	2
>1467	Identifier	state
>1468	IfStatement	if ( token == \"[Scale]\" )
>1469	CompoundStatement	 
>1470	ContinueStatement	 
>1471	ExpressionStatement	 
>1472	AssignmentExpr	state = 6
>1473	PrimaryExpression	6
>1474	Identifier	state
>1475	Condition	 
>1476	EqualityExpression	token == \"[Scale]\"
>1477	PrimaryExpression	\"[Scale]\"
>1478	Identifier	token
>1479	IfStatement	if ( token == \"[Rotation]\" )
>1480	CompoundStatement	 
>1481	ContinueStatement	 
>1482	ExpressionStatement	 
>1483	AssignmentExpr	state = 5
>1484	PrimaryExpression	5
>1485	Identifier	state
>1486	Condition	 
>1487	EqualityExpression	token == \"[Rotation]\"
>1488	PrimaryExpression	\"[Rotation]\"
>1489	Identifier	token
>1490	IfStatement	if ( token == \"[Alpha]\" )
>1491	CompoundStatement	 
>1492	ContinueStatement	 
>1493	ExpressionStatement	 
>1494	AssignmentExpr	state = 4
>1495	PrimaryExpression	4
>1496	Identifier	state
>1497	Condition	 
>1498	EqualityExpression	token == \"[Alpha]\"
>1499	PrimaryExpression	\"[Alpha]\"
>1500	Identifier	token
>1501	IfStatement	if ( token == \"[Number]\" )
>1502	CompoundStatement	 
>1503	ContinueStatement	 
>1504	ExpressionStatement	 
>1505	AssignmentExpr	state = 3
>1506	PrimaryExpression	3
>1507	Identifier	state
>1508	Condition	 
>1509	EqualityExpression	token == \"[Number]\"
>1510	PrimaryExpression	\"[Number]\"
>1511	Identifier	token
>1512	IfStatement	if ( token == \"[Color]\" )
>1513	CompoundStatement	 
>1514	ContinueStatement	 
>1515	ExpressionStatement	 
>1516	AssignmentExpr	state = 2
>1517	PrimaryExpression	2
>1518	Identifier	state
>1519	Condition	 
>1520	EqualityExpression	token == \"[Color]\"
>1521	PrimaryExpression	\"[Color]\"
>1522	Identifier	token
>1523	IfStatement	if ( token == \"[Emitter]\" )
>1524	CompoundStatement	 
>1525	ContinueStatement	 
>1526	ExpressionStatement	 
>1527	AssignmentExpr	currentEmitter = addNewEmitter ( )
>1528	CallExpression	addNewEmitter ( )
>1529	ArgumentList	 
>1530	Callee	addNewEmitter
>1531	Identifier	addNewEmitter
>1532	Identifier	currentEmitter
>1533	ExpressionStatement	 
>1534	AssignmentExpr	state = 1
>1535	PrimaryExpression	1
>1536	Identifier	state
>1537	Condition	 
>1538	EqualityExpression	token == \"[Emitter]\"
>1539	PrimaryExpression	\"[Emitter]\"
>1540	Identifier	token
>1541	Condition	 
>1542	ShiftExpression	inf >> token
>1543	Identifier	token
>1544	Identifier	inf
>1545	IdentifierDeclStatement	 
>1546	IdentifierDecl	* currentEmitter = 0
>1547	AssignmentExpr	* currentEmitter = 0
>1548	PrimaryExpression	0
>1549	Identifier	currentEmitter
>1550	Identifier	currentEmitter
>1551	IdentifierDeclType	Emitter *
>1552	IdentifierDeclStatement	 
>1553	IdentifierDecl	state = 0
>1554	AssignmentExpr	state = 0
>1555	PrimaryExpression	0
>1556	Identifier	state
>1557	Identifier	state
>1558	IdentifierDeclType	int
>1559	IdentifierDeclStatement	 
>1560	IdentifierDecl	tmp
>1561	Identifier	tmp
>1562	IdentifierDeclType	std 
>1563	IdentifierDecl	token
>1564	Identifier	token
>1565	IdentifierDeclType	std 
>1566	IdentifierDeclStatement	 
>1567	IdentifierDecl	inf ( buffer , SimpleIStringStream 
>1568	Expression	buffer , SimpleIStringStream 
>1569	Identifier	SimpleIStringStream 
>1570	Identifier	buffer
>1571	Identifier	inf
>1572	IdentifierDeclType	SimpleIStringStream
>1573	IfStatement	if ( ! buffer )
>1574	CompoundStatement	 
>1575	ReturnStatement	 
>1576	ExpressionStatement	 
>1577	CallExpression	debugLog ( \"Can't read \" + usef )
>1578	ArgumentList	\"Can't read \" + usef
>1579	Argument	\"Can't read \" + usef
>1580	AdditiveExpression	\"Can't read \" + usef
>1581	Identifier	usef
>1582	PrimaryExpression	\"Can't read \"
>1583	Callee	debugLog
>1584	Identifier	debugLog
>1585	Condition	 
>1586	UnaryOp	! buffer
>1587	Identifier	buffer
>1588	UnaryOperator	!
>1589	IdentifierDeclStatement	 
>1590	IdentifierDecl	* buffer = readFile ( usef )
>1591	AssignmentExpr	* buffer = readFile ( usef )
>1592	CallExpression	readFile ( usef )
>1593	ArgumentList	usef
>1594	Argument	usef
>1595	Identifier	usef
>1596	Callee	readFile
>1597	Identifier	readFile
>1598	Identifier	buffer
>1599	Identifier	buffer
>1600	IdentifierDeclType	char *
>1601	ExpressionStatement	 
>1602	CallExpression	debugLog ( usef )
>1603	ArgumentList	usef
>1604	Argument	usef
>1605	Identifier	usef
>1606	Callee	debugLog
>1607	Identifier	debugLog
>1608	ExpressionStatement	 
>1609	AssignmentExpr	usef = core -> adjustFilenameCase ( usef )
>1610	CallExpression	core -> adjustFilenameCase ( usef )
>1611	ArgumentList	usef
>1612	Argument	usef
>1613	Identifier	usef
>1614	Callee	core -> adjustFilenameCase
>1615	PtrMemberAccess	core -> adjustFilenameCase
>1616	Identifier	adjustFilenameCase
>1617	Identifier	core
>1618	Identifier	usef
>1619	ExpressionStatement	 
>1620	CallExpression	clearEmitters ( )
>1621	ArgumentList	 
>1622	Callee	clearEmitters
>1623	Identifier	clearEmitters
>1624	ExpressionStatement	 
>1625	CallExpression	stringToLower ( name )
>1626	ArgumentList	name
>1627	Argument	name
>1628	Identifier	name
>1629	Callee	stringToLower
>1630	Identifier	stringToLower
>1631	ExpressionStatement	 
>1632	AssignmentExpr	name = file
>1633	Identifier	file
>1634	Identifier	name
>1635	IdentifierDeclStatement	 
>1636	IdentifierDecl	usef = path + file + \".txt\"
>1637	AssignmentExpr	usef = path + file + \".txt\"
>1638	AdditiveExpression	path + file + \".txt\"
>1639	AdditiveExpression	file + \".txt\"
>1640	PrimaryExpression	\".txt\"
>1641	Identifier	file
>1642	Identifier	path
>1643	Identifier	usef
>1644	Identifier	usef
>1645	IdentifierDeclType	std 
>1713	FunctionDef	ParticleEffect 
>1714	ParameterList	float dt
>1715	Parameter	 
>1716	Identifier	dt
>1717	ParameterType	float
>1718	ReturnType	void
>1719	CompoundStatement	 
>1720	IfStatement	if ( effectLifeCounter != - 1 && running )
>1721	CompoundStatement	 
>1722	IfStatement	if ( effectLifeCounter <= 0 )
>1723	CompoundStatement	 
>1724	ExpressionStatement	 
>1725	CallExpression	stop ( )
>1726	ArgumentList	 
>1727	Callee	stop
>1728	Identifier	stop
>1729	ExpressionStatement	 
>1730	AssignmentExpr	effectLifeCounter = 0
>1731	PrimaryExpression	0
>1732	Identifier	effectLifeCounter
>1733	Condition	 
>1734	RelationalExpression	effectLifeCounter <= 0
>1735	PrimaryExpression	0
>1736	Identifier	effectLifeCounter
>1737	ExpressionStatement	 
>1738	AssignmentExpr	effectLifeCounter -= dt
>1739	Identifier	dt
>1740	Identifier	effectLifeCounter
>1741	Condition	 
>1742	AndExpression	effectLifeCounter != - 1 && running
>1743	Identifier	running
>1744	EqualityExpression	effectLifeCounter != - 1
>1745	UnaryOp	- 1
>1746	PrimaryExpression	1
>1747	UnaryOperator	-
>1748	Identifier	effectLifeCounter
>1749	IfStatement	if ( effectLifeCounter == 0 )
>1750	CompoundStatement	 
>1751	IfStatement	if ( waitForParticles )
>1752	ElseStatement	else
>1753	CompoundStatement	 
>1754	IfStatement	if ( die )
>1755	ExpressionStatement	 
>1756	CallExpression	safeKill ( )
>1757	ArgumentList	 
>1758	Callee	safeKill
>1759	Identifier	safeKill
>1760	Condition	 
>1761	Identifier	die
>1762	CompoundStatement	 
>1763	IfStatement	if ( c == e )
>1764	CompoundStatement	 
>1765	IfStatement	if ( die )
>1766	ExpressionStatement	 
>1767	CallExpression	safeKill ( )
>1768	ArgumentList	 
>1769	Callee	safeKill
>1770	Identifier	safeKill
>1771	Condition	 
>1772	Identifier	die
>1773	Condition	 
>1774	EqualityExpression	c == e
>1775	Identifier	e
>1776	Identifier	c
>1777	ForStatement	for ( Emitters 
>1778	CompoundStatement	 
>1779	ExpressionStatement	 
>1780	IncDecOp	c ++
>1781	IncDec	++
>1782	Identifier	c
>1783	IfStatement	if ( ( * i ) -> isEmpty ( ) )
>1784	CompoundStatement	 
>1785	ExpressionStatement	 
>1786	IncDecOp	e ++
>1787	IncDec	++
>1788	Identifier	e
>1789	Condition	 
>1790	CallExpression	( * i ) -> isEmpty ( )
>1791	ArgumentList	 
>1792	Callee	( * i ) -> isEmpty
>1793	PtrMemberAccess	( * i ) -> isEmpty
>1794	Identifier	isEmpty
>1795	UnaryOp	* i
>1796	Identifier	i
>1797	UnaryOperator	*
>1798	IncDecOp	 
>1799	IncDec	++
>1800	Identifier	i
>1801	Condition	 
>1802	EqualityExpression	i != emitters . end ( )
>1803	CallExpression	emitters . end ( )
>1804	ArgumentList	 
>1805	Callee	emitters . end
>1806	MemberAccess	emitters . end
>1807	Identifier	end
>1808	Identifier	emitters
>1809	Identifier	i
>1810	ForInit	 
>1811	IdentifierDeclStatement	Emitters 
>1812	IdentifierDecl	i = emitters . begin ( )
>1813	AssignmentExpr	i = emitters . begin ( )
>1814	CallExpression	emitters . begin ( )
>1815	ArgumentList	 
>1816	Callee	emitters . begin
>1817	MemberAccess	emitters . begin
>1818	Identifier	begin
>1819	Identifier	emitters
>1820	Identifier	i
>1821	Identifier	i
>1822	IdentifierDeclType	Emitters 
>1823	IdentifierDeclStatement	 
>1824	IdentifierDecl	e = 0
>1825	AssignmentExpr	e = 0
>1826	PrimaryExpression	0
>1827	Identifier	e
>1828	Identifier	e
>1829	IdentifierDeclType	int
>1830	IdentifierDecl	c = 0
>1831	AssignmentExpr	c = 0
>1832	PrimaryExpression	0
>1833	Identifier	c
>1834	Identifier	c
>1835	IdentifierDeclType	int
>1836	Condition	 
>1837	Identifier	waitForParticles
>1838	Condition	 
>1839	EqualityExpression	effectLifeCounter == 0
>1840	PrimaryExpression	0
>1841	Identifier	effectLifeCounter
>1842	ExpressionStatement	 
>1843	CallExpression	RenderObject 
>1844	ArgumentList	dt
>1845	Argument	dt
>1846	Identifier	dt
>1847	Callee	RenderObject 
>1848	Identifier	RenderObject 
>1866	FunctionDef	ParticleEffect 
>1867	ParameterList	 
>1868	ReturnType	void
>1869	CompoundStatement	 
>1870	ExpressionStatement	 
>1871	AssignmentExpr	die = true
>1872	Identifier	true
>1873	Identifier	die
>1874	ExpressionStatement	 
>1875	AssignmentExpr	effectLifeCounter = 0.0001
>1876	PrimaryExpression	0.0001
>1877	Identifier	effectLifeCounter
>1884	FunctionDef	ParticleEffect 
>1885	ParameterList	 
>1886	ReturnType	void
>1887	CompoundStatement	 
>1888	ForStatement	for ( Emitters 
>1889	CompoundStatement	 
>1890	ExpressionStatement	 
>1891	CallExpression	( * i ) -> start ( )
>1892	ArgumentList	 
>1893	Callee	( * i ) -> start
>1894	PtrMemberAccess	( * i ) -> start
>1895	Identifier	start
>1896	UnaryOp	* i
>1897	Identifier	i
>1898	UnaryOperator	*
>1899	IncDecOp	 
>1900	IncDec	++
>1901	Identifier	i
>1902	Condition	 
>1903	EqualityExpression	i != emitters . end ( )
>1904	CallExpression	emitters . end ( )
>1905	ArgumentList	 
>1906	Callee	emitters . end
>1907	MemberAccess	emitters . end
>1908	Identifier	end
>1909	Identifier	emitters
>1910	Identifier	i
>1911	ForInit	 
>1912	IdentifierDeclStatement	Emitters 
>1913	IdentifierDecl	i = emitters . begin ( )
>1914	AssignmentExpr	i = emitters . begin ( )
>1915	CallExpression	emitters . begin ( )
>1916	ArgumentList	 
>1917	Callee	emitters . begin
>1918	MemberAccess	emitters . begin
>1919	Identifier	begin
>1920	Identifier	emitters
>1921	Identifier	i
>1922	Identifier	i
>1923	IdentifierDeclType	Emitters 
>1924	ExpressionStatement	 
>1925	AssignmentExpr	running = true
>1926	Identifier	true
>1927	Identifier	running
>1928	ExpressionStatement	 
>1929	AssignmentExpr	effectLifeCounter = effectLife
>1930	Identifier	effectLife
>1931	Identifier	effectLifeCounter
>1944	FunctionDef	ParticleEffect 
>1945	ParameterList	 
>1946	ReturnType	void
>1947	CompoundStatement	 
>1948	ForStatement	for ( Emitters 
>1949	CompoundStatement	 
>1950	ExpressionStatement	 
>1951	CallExpression	( * i ) -> stop ( )
>1952	ArgumentList	 
>1953	Callee	( * i ) -> stop
>1954	PtrMemberAccess	( * i ) -> stop
>1955	Identifier	stop
>1956	UnaryOp	* i
>1957	Identifier	i
>1958	UnaryOperator	*
>1959	IncDecOp	 
>1960	IncDec	++
>1961	Identifier	i
>1962	Condition	 
>1963	EqualityExpression	i != emitters . end ( )
>1964	CallExpression	emitters . end ( )
>1965	ArgumentList	 
>1966	Callee	emitters . end
>1967	MemberAccess	emitters . end
>1968	Identifier	end
>1969	Identifier	emitters
>1970	Identifier	i
>1971	ForInit	 
>1972	IdentifierDeclStatement	Emitters 
>1973	IdentifierDecl	i = emitters . begin ( )
>1974	AssignmentExpr	i = emitters . begin ( )
>1975	CallExpression	emitters . begin ( )
>1976	ArgumentList	 
>1977	Callee	emitters . begin
>1978	MemberAccess	emitters . begin
>1979	Identifier	begin
>1980	Identifier	emitters
>1981	Identifier	i
>1982	Identifier	i
>1983	IdentifierDeclType	Emitters 
>1984	ExpressionStatement	 
>1985	AssignmentExpr	running = false
>1986	Identifier	false
>1987	Identifier	running
>1998	FunctionDef	ParticleEffect 
>1999	ParameterList	 
>2000	ReturnType	void
>2001	CompoundStatement	 
>2002	ExpressionStatement	 
>2003	CallExpression	RenderObject 
>2004	ArgumentList	 
>2005	Callee	RenderObject 
>2006	Identifier	RenderObject 
>2007	ExpressionStatement	 
>2008	CallExpression	BBGE_PROF ( ParticleEffect_onRender )
>2009	ArgumentList	ParticleEffect_onRender
>2010	Argument	ParticleEffect_onRender
>2011	Identifier	ParticleEffect_onRender
>2012	Callee	BBGE_PROF
>2013	Identifier	BBGE_PROF
<3=5,4
<5=34,30,26,20,16,10,6
<6=7
<7=9,8
<10=11
<11=15,12
<12=14,13
<16=17
<17=19,18
<20=21
<21=25,22
<22=24,23
<26=27
<27=29,28
<30=31
<31=33,32
<34=35
<35=39,36
<36=37
<37=38
<39=40
<53=59,58,54
<54=55
<55=57,56
<59=60
<60=61
<61=63,62
<69=75,74,70
<70=71
<71=73,72
<75=87,76
<76=77
<77=83,78
<78=81,79
<79=80
<81=82
<83=84
<84=86,85
<87=88
<88=92,89
<89=90
<90=91
<92=93
<101=107,106,102
<102=103
<103=105,104
<107=185,178,170,108
<108=157,148,145,109
<109=133,123,110
<110=111
<111=119,112
<112=113
<113=114
<114=116,115
<116=118,117
<119=120
<120=122,121
<123=124
<124=130,125
<125=127,126
<127=129,128
<130=132,131
<133=134
<134=144,143,135
<135=142,136
<136=138,137
<138=139
<139=141,140
<145=147,146
<148=149
<149=156,150
<150=152,151
<152=153
<153=155,154
<157=158
<158=159
<159=169,168,160
<160=167,161
<161=163,162
<163=164
<164=166,165
<170=171
<171=175,172
<172=174,173
<175=177,176
<178=179
<179=181,180
<181=182
<182=184,183
<185=186
<186=190,187
<187=189,188
<190=192,191
<216=219,218,217
<219=240,231,222,220
<220=221
<222=223
<223=229,224
<224=227,225
<225=226
<227=228
<229=230
<231=232
<232=236,233
<233=234
<234=235
<236=237
<237=239,238
<240=241
<241=246,245,242
<242=244,243
<254=257,256,255
<257=272,265,258
<258=259
<259=261,260
<261=262
<262=264,263
<265=266
<266=268,267
<268=269
<269=271,270
<272=300,291,288,273
<273=279,278,274
<274=275
<275=277,276
<279=280
<280=282,281
<282=283
<283=285,284
<285=287,286
<288=290,289
<291=292
<292=299,293
<293=295,294
<295=296
<296=298,297
<300=301
<301=302
<302=312,311,303
<303=310,304
<304=306,305
<306=307
<307=309,308
<322=331,330,323
<323=327,324
<324=326,325
<327=329,328
<331=1635,1631,1624,1619,1608,1601,1589,1573,1566,1559,1552,1545,332
<332=1541,333
<333=1523,1512,1501,1490,1479,1468,1374,1299,1224,1140,1053,1038,1013,998,334
<334=996,335
<335=336
<336=992,978,337
<337=338
<338=974,961,339
<339=340
<340=957,944,341
<341=342
<342=940,927,343
<343=344
<344=923,904,345
<345=346
<346=900,881,347
<347=348
<348=877,864,349
<349=350
<350=860,837,351
<351=352
<352=833,820,353
<353=354
<354=816,803,355
<355=356
<356=799,786,357
<357=358
<358=782,769,359
<359=360
<360=765,752,361
<361=362
<362=748,735,363
<363=364
<364=731,718,365
<365=366
<366=714,691,367
<367=368
<368=687,674,369
<369=370
<370=670,657,371
<371=372
<372=653,630,373
<373=374
<374=626,613,375
<375=376
<376=609,596,377
<377=378
<378=592,579,379
<379=380
<380=575,535,381
<381=382
<382=531,518,383
<383=384
<384=514,501,385
<385=386
<386=497,484,387
<387=388
<388=480,467,389
<389=390
<390=463,454,391
<391=392
<392=450,431,393
<393=394
<394=427,414,395
<395=396
<396=410,397
<397=406,398
<398=399
<399=405,400
<400=402,401
<402=404,403
<406=407
<407=409,408
<410=411
<411=413,412
<414=423,415
<415=416
<416=422,417
<417=419,418
<419=421,420
<423=424
<424=426,425
<427=428
<428=430,429
<431=446,432
<432=433
<433=445,434
<434=440,435
<435=437,436
<437=439,438
<440=442,441
<442=444,443
<446=447
<447=449,448
<450=451
<451=453,452
<454=459,455
<455=456
<456=458,457
<459=460
<460=462,461
<463=464
<464=466,465
<467=476,468
<468=469
<469=475,470
<470=472,471
<472=474,473
<476=477
<477=479,478
<480=481
<481=483,482
<484=493,485
<485=486
<486=492,487
<487=489,488
<489=491,490
<493=494
<494=496,495
<497=498
<498=500,499
<501=510,502
<502=503
<503=509,504
<504=506,505
<506=508,507
<510=511
<511=513,512
<514=515
<515=517,516
<518=527,519
<519=520
<520=526,521
<521=523,522
<523=525,524
<527=528
<528=530,529
<531=532
<532=534,533
<535=571,567,563,536
<536=559,551,537
<537=538
<538=547,539
<539=540
<540=542,541
<542=544,543
<544=546,545
<547=548
<548=550,549
<551=552
<552=554,553
<554=556,555
<556=558,557
<559=560
<560=562,561
<563=564
<564=566,565
<567=568
<568=570,569
<571=572
<572=574,573
<575=576
<576=578,577
<579=588,580
<580=581
<581=587,582
<582=584,583
<584=586,585
<588=589
<589=591,590
<592=593
<593=595,594
<596=605,597
<597=598
<598=604,599
<599=601,600
<601=603,602
<605=606
<606=608,607
<609=610
<610=612,611
<613=622,614
<614=615
<615=621,616
<616=618,617
<618=620,619
<622=623
<623=625,624
<626=627
<627=629,628
<630=649,631
<631=632
<632=648,633
<633=641,634
<634=636,635
<636=638,637
<638=640,639
<641=643,642
<643=645,644
<645=647,646
<649=650
<650=652,651
<653=654
<654=656,655
<657=666,658
<658=659
<659=665,660
<660=662,661
<662=664,663
<666=667
<667=669,668
<670=671
<671=673,672
<674=683,675
<675=676
<676=682,677
<677=679,678
<679=681,680
<683=684
<684=686,685
<687=688
<688=690,689
<691=710,692
<692=693
<693=709,694
<694=702,695
<695=697,696
<697=699,698
<699=701,700
<702=704,703
<704=706,705
<706=708,707
<710=711
<711=713,712
<714=715
<715=717,716
<718=727,719
<719=720
<720=726,721
<721=723,722
<723=725,724
<727=728
<728=730,729
<731=732
<732=734,733
<735=744,736
<736=737
<737=743,738
<738=740,739
<740=742,741
<744=745
<745=747,746
<748=749
<749=751,750
<752=761,753
<753=754
<754=760,755
<755=757,756
<757=759,758
<761=762
<762=764,763
<765=766
<766=768,767
<769=778,770
<770=771
<771=777,772
<772=774,773
<774=776,775
<778=779
<779=781,780
<782=783
<783=785,784
<786=795,787
<787=788
<788=794,789
<789=791,790
<791=793,792
<795=796
<796=798,797
<799=800
<800=802,801
<803=812,804
<804=805
<805=811,806
<806=808,807
<808=810,809
<812=813
<813=815,814
<816=817
<817=819,818
<820=829,821
<821=822
<822=828,823
<823=825,824
<825=827,826
<829=830
<830=832,831
<833=834
<834=836,835
<837=856,838
<838=839
<839=855,840
<840=848,841
<841=843,842
<843=845,844
<845=847,846
<848=850,849
<850=852,851
<852=854,853
<856=857
<857=859,858
<860=861
<861=863,862
<864=873,865
<865=866
<866=872,867
<867=869,868
<869=871,870
<873=874
<874=876,875
<877=878
<878=880,879
<881=896,882
<882=883
<883=895,884
<884=890,885
<885=887,886
<887=889,888
<890=892,891
<892=894,893
<896=897
<897=899,898
<900=901
<901=903,902
<904=919,905
<905=906
<906=918,907
<907=913,908
<908=910,909
<910=912,911
<913=915,914
<915=917,916
<919=920
<920=922,921
<923=924
<924=926,925
<927=936,928
<928=929
<929=935,930
<930=932,931
<932=934,933
<936=937
<937=939,938
<940=941
<941=943,942
<944=953,945
<945=946
<946=952,947
<947=949,948
<949=951,950
<953=954
<954=956,955
<957=958
<958=960,959
<961=970,962
<962=963
<963=969,964
<964=966,965
<966=968,967
<970=971
<971=973,972
<974=975
<975=977,976
<978=988,980,979
<980=981
<981=987,982
<982=984,983
<984=986,985
<988=989
<989=991,990
<992=993
<993=995,994
<996=997
<998=1009,999
<999=1005,1001,1000
<1001=1002
<1002=1004,1003
<1005=1006
<1006=1008,1007
<1009=1010
<1010=1012,1011
<1013=1034,1014
<1014=1030,1024,1016,1015
<1016=1017
<1017=1021,1018
<1018=1020,1019
<1021=1023,1022
<1024=1025
<1025=1029,1026
<1026=1028,1027
<1030=1031
<1031=1033,1032
<1034=1035
<1035=1037,1036
<1038=1049,1039
<1039=1045,1041,1040
<1041=1042
<1042=1044,1043
<1045=1046
<1046=1048,1047
<1049=1050
<1050=1052,1051
<1053=1134,1054
<1054=1124,1119,1115,1109,1098,1072,1055
<1055=1056
<1056=1064,1057
<1057=1058
<1058=1059
<1059=1061,1060
<1061=1063,1062
<1064=1065
<1065=1067,1066
<1067=1069,1068
<1069=1071,1070
<1072=1073
<1073=1086,1074
<1074=1077,1075
<1075=1076
<1077=1078
<1078=1084,1079
<1079=1082,1080
<1080=1081
<1082=1083
<1084=1085
<1086=1087
<1087=1089,1088
<1089=1091,1090
<1091=1093,1092
<1093=1095,1094
<1095=1097,1096
<1098=1099
<1099=1101,1100
<1101=1102
<1102=1104,1103
<1104=1106,1105
<1106=1108,1107
<1109=1110
<1110=1114,1111
<1111=1113,1112
<1115=1116
<1116=1118,1117
<1119=1120
<1120=1123,1122,1121
<1124=1131,1128,1125
<1125=1127,1126
<1128=1130,1129
<1131=1133,1132
<1134=1135
<1135=1137,1136
<1137=1139,1138
<1140=1218,1141
<1141=1211,1206,1202,1198,1187,1159,1142
<1142=1143
<1143=1151,1144
<1144=1145
<1145=1146
<1146=1148,1147
<1148=1150,1149
<1151=1152
<1152=1154,1153
<1154=1156,1155
<1156=1158,1157
<1159=1160
<1160=1175,1161
<1161=1164,1162
<1162=1163
<1164=1165
<1165=1173,1166
<1166=1171,1169,1167
<1167=1168
<1169=1170
<1171=1172
<1173=1174
<1175=1176
<1176=1178,1177
<1178=1180,1179
<1180=1182,1181
<1182=1184,1183
<1184=1186,1185
<1187=1188
<1188=1190,1189
<1190=1191
<1191=1193,1192
<1193=1195,1194
<1195=1197,1196
<1198=1199
<1199=1201,1200
<1202=1203
<1203=1205,1204
<1206=1207
<1207=1210,1209,1208
<1211=1215,1212
<1212=1214,1213
<1215=1217,1216
<1218=1219
<1219=1221,1220
<1221=1223,1222
<1224=1293,1225
<1225=1286,1281,1277,1273,1262,1243,1226
<1226=1227
<1227=1235,1228
<1228=1229
<1229=1230
<1230=1232,1231
<1232=1234,1233
<1235=1236
<1236=1238,1237
<1238=1240,1239
<1240=1242,1241
<1243=1244
<1244=1250,1245
<1245=1248,1246
<1246=1247
<1248=1249
<1250=1251
<1251=1253,1252
<1253=1255,1254
<1255=1257,1256
<1257=1259,1258
<1259=1261,1260
<1262=1263
<1263=1265,1264
<1265=1266
<1266=1268,1267
<1268=1270,1269
<1270=1272,1271
<1273=1274
<1274=1276,1275
<1277=1278
<1278=1280,1279
<1281=1282
<1282=1285,1284,1283
<1286=1290,1287
<1287=1289,1288
<1290=1292,1291
<1293=1294
<1294=1296,1295
<1296=1298,1297
<1299=1368,1300
<1300=1361,1356,1352,1348,1337,1318,1301
<1301=1302
<1302=1310,1303
<1303=1304
<1304=1305
<1305=1307,1306
<1307=1309,1308
<1310=1311
<1311=1313,1312
<1313=1315,1314
<1315=1317,1316
<1318=1319
<1319=1325,1320
<1320=1323,1321
<1321=1322
<1323=1324
<1325=1326
<1326=1328,1327
<1328=1330,1329
<1330=1332,1331
<1332=1334,1333
<1334=1336,1335
<1337=1338
<1338=1340,1339
<1340=1341
<1341=1343,1342
<1343=1345,1344
<1345=1347,1346
<1348=1349
<1349=1351,1350
<1352=1353
<1353=1355,1354
<1356=1357
<1357=1360,1359,1358
<1361=1365,1362
<1362=1364,1363
<1365=1367,1366
<1368=1369
<1369=1371,1370
<1371=1373,1372
<1374=1462,1375
<1375=1449,1444,1440,1432,1421,1393,1376
<1376=1377
<1377=1385,1378
<1378=1379
<1379=1380
<1380=1382,1381
<1382=1384,1383
<1385=1386
<1386=1388,1387
<1388=1390,1389
<1390=1392,1391
<1393=1394
<1394=1409,1395
<1395=1398,1396
<1396=1397
<1398=1399
<1399=1407,1400
<1400=1405,1403,1401
<1401=1402
<1403=1404
<1405=1406
<1407=1408
<1409=1410
<1410=1412,1411
<1412=1414,1413
<1414=1416,1415
<1416=1418,1417
<1418=1420,1419
<1421=1422
<1422=1424,1423
<1424=1425
<1425=1427,1426
<1427=1429,1428
<1429=1431,1430
<1432=1433
<1433=1439,1434
<1434=1438,1435
<1435=1437,1436
<1440=1441
<1441=1443,1442
<1444=1445
<1445=1448,1447,1446
<1449=1459,1456,1453,1450
<1450=1452,1451
<1453=1455,1454
<1456=1458,1457
<1459=1461,1460
<1462=1463
<1463=1465,1464
<1465=1467,1466
<1468=1475,1469
<1469=1471,1470
<1471=1472
<1472=1474,1473
<1475=1476
<1476=1478,1477
<1479=1486,1480
<1480=1482,1481
<1482=1483
<1483=1485,1484
<1486=1487
<1487=1489,1488
<1490=1497,1491
<1491=1493,1492
<1493=1494
<1494=1496,1495
<1497=1498
<1498=1500,1499
<1501=1508,1502
<1502=1504,1503
<1504=1505
<1505=1507,1506
<1508=1509
<1509=1511,1510
<1512=1519,1513
<1513=1515,1514
<1515=1516
<1516=1518,1517
<1519=1520
<1520=1522,1521
<1523=1537,1524
<1524=1533,1526,1525
<1526=1527
<1527=1532,1528
<1528=1530,1529
<1530=1531
<1533=1534
<1534=1536,1535
<1537=1538
<1538=1540,1539
<1541=1542
<1542=1544,1543
<1545=1546
<1546=1551,1550,1547
<1547=1549,1548
<1552=1553
<1553=1558,1557,1554
<1554=1556,1555
<1559=1560,1563
<1560=1562,1561
<1563=1565,1564
<1566=1567
<1567=1572,1571,1568
<1568=1570,1569
<1573=1585,1574
<1574=1576,1575
<1576=1577
<1577=1583,1578
<1578=1579
<1579=1580
<1580=1582,1581
<1583=1584
<1585=1586
<1586=1588,1587
<1589=1590
<1590=1600,1599,1591
<1591=1598,1592
<1592=1596,1593
<1593=1594
<1594=1595
<1596=1597
<1601=1602
<1602=1606,1603
<1603=1604
<1604=1605
<1606=1607
<1608=1609
<1609=1618,1610
<1610=1614,1611
<1611=1612
<1612=1613
<1614=1615
<1615=1617,1616
<1619=1620
<1620=1622,1621
<1622=1623
<1624=1625
<1625=1629,1626
<1626=1627
<1627=1628
<1629=1630
<1631=1632
<1632=1634,1633
<1635=1636
<1636=1645,1644,1637
<1637=1643,1638
<1638=1642,1639
<1639=1641,1640
<1713=1719,1718,1714
<1714=1715
<1715=1717,1716
<1719=1842,1749,1720
<1720=1741,1721
<1721=1737,1722
<1722=1733,1723
<1723=1729,1724
<1724=1725
<1725=1727,1726
<1727=1728
<1729=1730
<1730=1732,1731
<1733=1734
<1734=1736,1735
<1737=1738
<1738=1740,1739
<1741=1742
<1742=1744,1743
<1744=1748,1745
<1745=1747,1746
<1749=1838,1750
<1750=1751
<1751=1836,1762,1752
<1752=1753
<1753=1754
<1754=1760,1755
<1755=1756
<1756=1758,1757
<1758=1759
<1760=1761
<1762=1823,1777,1763
<1763=1773,1764
<1764=1765
<1765=1771,1766
<1766=1767
<1767=1769,1768
<1769=1770
<1771=1772
<1773=1774
<1774=1776,1775
<1777=1810,1801,1798,1778
<1778=1783,1779
<1779=1780
<1780=1782,1781
<1783=1789,1784
<1784=1785
<1785=1786
<1786=1788,1787
<1789=1790
<1790=1792,1791
<1792=1793
<1793=1795,1794
<1795=1797,1796
<1798=1800,1799
<1801=1802
<1802=1809,1803
<1803=1805,1804
<1805=1806
<1806=1808,1807
<1810=1811
<1811=1812
<1812=1822,1821,1813
<1813=1820,1814
<1814=1816,1815
<1816=1817
<1817=1819,1818
<1823=1830,1824
<1824=1829,1828,1825
<1825=1827,1826
<1830=1835,1834,1831
<1831=1833,1832
<1836=1837
<1838=1839
<1839=1841,1840
<1842=1843
<1843=1847,1844
<1844=1845
<1845=1846
<1847=1848
<1866=1869,1868,1867
<1869=1874,1870
<1870=1871
<1871=1873,1872
<1874=1875
<1875=1877,1876
<1884=1887,1886,1885
<1887=1928,1924,1888
<1888=1911,1902,1899,1889
<1889=1890
<1890=1891
<1891=1893,1892
<1893=1894
<1894=1896,1895
<1896=1898,1897
<1899=1901,1900
<1902=1903
<1903=1910,1904
<1904=1906,1905
<1906=1907
<1907=1909,1908
<1911=1912
<1912=1913
<1913=1923,1922,1914
<1914=1921,1915
<1915=1917,1916
<1917=1918
<1918=1920,1919
<1924=1925
<1925=1927,1926
<1928=1929
<1929=1931,1930
<1944=1947,1946,1945
<1947=1984,1948
<1948=1971,1962,1959,1949
<1949=1950
<1950=1951
<1951=1953,1952
<1953=1954
<1954=1956,1955
<1956=1958,1957
<1959=1961,1960
<1962=1963
<1963=1970,1964
<1964=1966,1965
<1966=1967
<1967=1969,1968
<1971=1972
<1972=1973
<1973=1983,1982,1974
<1974=1981,1975
<1975=1977,1976
<1977=1978
<1978=1980,1979
<1984=1985
<1985=1987,1986
<1998=2001,2000,1999
<2001=2007,2002
<2002=2003
<2003=2005,2004
<2005=2006
<2007=2008
<2008=2012,2009
<2009=2010
<2010=2011
<2012=2013
