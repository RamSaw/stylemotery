>12	FunctionDef	watchSlide (int slide)
>13	ParameterList	int slide
>14	Parameter	 
>15	Identifier	slide
>16	ParameterType	int
>17	ReturnType	void
>18	CompoundStatement	 
>19	ExpressionStatement	 
>20	CallExpression	core -> main ( t )
>21	ArgumentList	t
>22	Argument	t
>23	Identifier	t
>24	Callee	core -> main
>25	PtrMemberAccess	core -> main
>26	Identifier	main
>27	Identifier	core
>28	ExpressionStatement	 
>29	CallExpression	q -> scale . startPath ( t )
>30	ArgumentList	t
>31	Argument	t
>32	Identifier	t
>33	Callee	q -> scale . startPath
>34	MemberAccess	q -> scale . startPath
>35	Identifier	startPath
>36	PtrMemberAccess	q -> scale
>37	Identifier	scale
>38	Identifier	q
>39	ExpressionStatement	 
>40	CallExpression	q -> scale . data -> path . addPathNode ( Vector ( 1.4 , 1.4 ) , 1 )
>41	ArgumentList	Vector ( 1.4 , 1.4 )
>42	Argument	1
>43	PrimaryExpression	1
>44	Argument	Vector ( 1.4 , 1.4 )
>45	CallExpression	Vector ( 1.4 , 1.4 )
>46	ArgumentList	1.4
>47	Argument	1.4
>48	PrimaryExpression	1.4
>49	Argument	1.4
>50	PrimaryExpression	1.4
>51	Callee	Vector
>52	Identifier	Vector
>53	Callee	q -> scale . data -> path . addPathNode
>54	MemberAccess	q -> scale . data -> path . addPathNode
>55	Identifier	addPathNode
>56	PtrMemberAccess	q -> scale . data -> path
>57	Identifier	path
>58	MemberAccess	q -> scale . data
>59	Identifier	data
>60	PtrMemberAccess	q -> scale
>61	Identifier	scale
>62	Identifier	q
>63	ExpressionStatement	 
>64	CallExpression	q -> scale . data -> path . addPathNode ( Vector ( 0.8 , 0.8 ) , 0 )
>65	ArgumentList	Vector ( 0.8 , 0.8 )
>66	Argument	0
>67	PrimaryExpression	0
>68	Argument	Vector ( 0.8 , 0.8 )
>69	CallExpression	Vector ( 0.8 , 0.8 )
>70	ArgumentList	0.8
>71	Argument	0.8
>72	PrimaryExpression	0.8
>73	Argument	0.8
>74	PrimaryExpression	0.8
>75	Callee	Vector
>76	Identifier	Vector
>77	Callee	q -> scale . data -> path . addPathNode
>78	MemberAccess	q -> scale . data -> path . addPathNode
>79	Identifier	addPathNode
>80	PtrMemberAccess	q -> scale . data -> path
>81	Identifier	path
>82	MemberAccess	q -> scale . data
>83	Identifier	data
>84	PtrMemberAccess	q -> scale
>85	Identifier	scale
>86	Identifier	q
>87	ExpressionStatement	 
>88	CallExpression	q -> scale . ensureData ( )
>89	ArgumentList	 
>90	Callee	q -> scale . ensureData
>91	MemberAccess	q -> scale . ensureData
>92	Identifier	ensureData
>93	PtrMemberAccess	q -> scale
>94	Identifier	scale
>95	Identifier	q
>96	ExpressionStatement	 
>97	CallExpression	q -> alpha . startPath ( t )
>98	ArgumentList	t
>99	Argument	t
>100	Identifier	t
>101	Callee	q -> alpha . startPath
>102	MemberAccess	q -> alpha . startPath
>103	Identifier	startPath
>104	PtrMemberAccess	q -> alpha
>105	Identifier	alpha
>106	Identifier	q
>107	ExpressionStatement	 
>108	CallExpression	q -> alpha . data -> path . addPathNode ( 0 , 1 )
>109	ArgumentList	0
>110	Argument	1
>111	PrimaryExpression	1
>112	Argument	0
>113	PrimaryExpression	0
>114	Callee	q -> alpha . data -> path . addPathNode
>115	MemberAccess	q -> alpha . data -> path . addPathNode
>116	Identifier	addPathNode
>117	PtrMemberAccess	q -> alpha . data -> path
>118	Identifier	path
>119	MemberAccess	q -> alpha . data
>120	Identifier	data
>121	PtrMemberAccess	q -> alpha
>122	Identifier	alpha
>123	Identifier	q
>124	ExpressionStatement	 
>125	CallExpression	q -> alpha . data -> path . addPathNode ( 1 , 0.5 )
>126	ArgumentList	1
>127	Argument	0.5
>128	PrimaryExpression	0.5
>129	Argument	1
>130	PrimaryExpression	1
>131	Callee	q -> alpha . data -> path . addPathNode
>132	MemberAccess	q -> alpha . data -> path . addPathNode
>133	Identifier	addPathNode
>134	PtrMemberAccess	q -> alpha . data -> path
>135	Identifier	path
>136	MemberAccess	q -> alpha . data
>137	Identifier	data
>138	PtrMemberAccess	q -> alpha
>139	Identifier	alpha
>140	Identifier	q
>141	ExpressionStatement	 
>142	CallExpression	q -> alpha . data -> path . addPathNode ( 0 , 0 )
>143	ArgumentList	0
>144	Argument	0
>145	PrimaryExpression	0
>146	Argument	0
>147	PrimaryExpression	0
>148	Callee	q -> alpha . data -> path . addPathNode
>149	MemberAccess	q -> alpha . data -> path . addPathNode
>150	Identifier	addPathNode
>151	PtrMemberAccess	q -> alpha . data -> path
>152	Identifier	path
>153	MemberAccess	q -> alpha . data
>154	Identifier	data
>155	PtrMemberAccess	q -> alpha
>156	Identifier	alpha
>157	Identifier	q
>158	ExpressionStatement	 
>159	CallExpression	q -> alpha . ensureData ( )
>160	ArgumentList	 
>161	Callee	q -> alpha . ensureData
>162	MemberAccess	q -> alpha . ensureData
>163	Identifier	ensureData
>164	PtrMemberAccess	q -> alpha
>165	Identifier	alpha
>166	Identifier	q
>167	IdentifierDeclStatement	 
>168	IdentifierDecl	* q = slides [ slide ]
>169	AssignmentExpr	* q = slides [ slide ]
>170	ArrayIndexing	slides [ slide ]
>171	Identifier	slide
>172	Identifier	slides
>173	Identifier	q
>174	Identifier	q
>175	IdentifierDeclType	Quad *
>176	IfStatement	if ( ! ( slide >= 0 && slide < slides . size ( ) ) )
>177	ReturnStatement	 
>178	Condition	 
>179	UnaryOp	! ( slide >= 0 && slide < slides . size ( ) )
>180	AndExpression	slide >= 0 && slide < slides . size ( )
>181	RelationalExpression	slide < slides . size ( )
>182	CallExpression	slides . size ( )
>183	ArgumentList	 
>184	Callee	slides . size
>185	MemberAccess	slides . size
>186	Identifier	size
>187	Identifier	slides
>188	Identifier	slide
>189	RelationalExpression	slide >= 0
>190	PrimaryExpression	0
>191	Identifier	slide
>192	UnaryOperator	!
>193	IdentifierDeclStatement	 
>194	IdentifierDecl	t = 10
>195	AssignmentExpr	t = 10
>196	PrimaryExpression	10
>197	Identifier	t
>198	Identifier	t
>199	IdentifierDeclType	float
>224	FunctionDef	cred (Quad * cred , bool show)
>225	ParameterList	Quad * cred , bool show
>226	Parameter	 
>227	Identifier	show
>228	ParameterType	bool
>229	Parameter	 
>230	Identifier	cred
>231	ParameterType	Quad *
>232	ReturnType	void
>233	CompoundStatement	 
>234	IfStatement	if ( show )
>235	ElseStatement	else
>236	ExpressionStatement	 
>237	CallExpression	cred -> alpha . interpolateTo ( 0 , t , 0 , 0 , 1 )
>238	ArgumentList	0
>239	Argument	1
>240	PrimaryExpression	1
>241	Argument	0
>242	PrimaryExpression	0
>243	Argument	0
>244	PrimaryExpression	0
>245	Argument	t
>246	Identifier	t
>247	Argument	0
>248	PrimaryExpression	0
>249	Callee	cred -> alpha . interpolateTo
>250	MemberAccess	cred -> alpha . interpolateTo
>251	Identifier	interpolateTo
>252	PtrMemberAccess	cred -> alpha
>253	Identifier	alpha
>254	Identifier	cred
>255	CompoundStatement	 
>256	ExpressionStatement	 
>257	CallExpression	cred -> offset . interpolateTo ( Vector ( 100 , 0 ) , 60 )
>258	ArgumentList	Vector ( 100 , 0 )
>259	Argument	60
>260	PrimaryExpression	60
>261	Argument	Vector ( 100 , 0 )
>262	CallExpression	Vector ( 100 , 0 )
>263	ArgumentList	100
>264	Argument	0
>265	PrimaryExpression	0
>266	Argument	100
>267	PrimaryExpression	100
>268	Callee	Vector
>269	Identifier	Vector
>270	Callee	cred -> offset . interpolateTo
>271	MemberAccess	cred -> offset . interpolateTo
>272	Identifier	interpolateTo
>273	PtrMemberAccess	cred -> offset
>274	Identifier	offset
>275	Identifier	cred
>276	ExpressionStatement	 
>277	CallExpression	cred -> alpha . interpolateTo ( 0.7 , t , 0 , 0 , 1 )
>278	ArgumentList	0.7
>279	Argument	1
>280	PrimaryExpression	1
>281	Argument	0
>282	PrimaryExpression	0
>283	Argument	0
>284	PrimaryExpression	0
>285	Argument	t
>286	Identifier	t
>287	Argument	0.7
>288	PrimaryExpression	0.7
>289	Callee	cred -> alpha . interpolateTo
>290	MemberAccess	cred -> alpha . interpolateTo
>291	Identifier	interpolateTo
>292	PtrMemberAccess	cred -> alpha
>293	Identifier	alpha
>294	Identifier	cred
>295	Condition	 
>296	Identifier	show
>297	ExpressionStatement	 
>298	AssignmentExpr	cred -> scale = Vector ( 0.7 , 0.7 )
>299	CallExpression	Vector ( 0.7 , 0.7 )
>300	ArgumentList	0.7
>301	Argument	0.7
>302	PrimaryExpression	0.7
>303	Argument	0.7
>304	PrimaryExpression	0.7
>305	Callee	Vector
>306	Identifier	Vector
>307	PtrMemberAccess	cred -> scale
>308	Identifier	scale
>309	Identifier	cred
>310	IdentifierDeclStatement	 
>311	IdentifierDecl	t = 3
>312	AssignmentExpr	t = 3
>313	PrimaryExpression	3
>314	Identifier	t
>315	Identifier	t
>316	IdentifierDeclType	float
>328	FunctionDef	Credits 
>329	ParameterList	 
>330	CompoundStatement	 
>331	ExpressionStatement	 
>332	CallExpression	registerState ( this , \"Credits\" )
>333	ArgumentList	this
>334	Argument	\"Credits\"
>335	PrimaryExpression	\"Credits\"
>336	Argument	this
>337	Identifier	this
>338	Callee	registerState
>339	Identifier	registerState
>344	FunctionDef	Credits 
>345	ParameterList	 
>346	ReturnType	void
>347	CompoundStatement	 
>348	ExpressionStatement	 
>349	CallExpression	dsq -> game -> transitionToScene ( \"thirteenlair\" )
>350	ArgumentList	\"thirteenlair\"
>351	Argument	\"thirteenlair\"
>352	PrimaryExpression	\"thirteenlair\"
>353	Callee	dsq -> game -> transitionToScene
>354	PtrMemberAccess	dsq -> game -> transitionToScene
>355	Identifier	transitionToScene
>356	PtrMemberAccess	dsq -> game
>357	Identifier	game
>358	Identifier	dsq
>359	ExpressionStatement	 
>360	CallExpression	dsq -> setCutscene ( 0 )
>361	ArgumentList	0
>362	Argument	0
>363	PrimaryExpression	0
>364	Callee	dsq -> setCutscene
>365	PtrMemberAccess	dsq -> setCutscene
>366	Identifier	setCutscene
>367	Identifier	dsq
>368	WhileStatement	while ( dsq -> sound -> isPlayingMusic ( ) && ! dsq -> isSkippingCutscene ( ) )
>369	CompoundStatement	 
>370	ExpressionStatement	 
>371	CallExpression	core -> main ( 1 )
>372	ArgumentList	1
>373	Argument	1
>374	PrimaryExpression	1
>375	Callee	core -> main
>376	PtrMemberAccess	core -> main
>377	Identifier	main
>378	Identifier	core
>379	Condition	 
>380	AndExpression	dsq -> sound -> isPlayingMusic ( ) && ! dsq -> isSkippingCutscene ( )
>381	UnaryOp	! dsq -> isSkippingCutscene ( )
>382	CallExpression	dsq -> isSkippingCutscene ( )
>383	ArgumentList	 
>384	Callee	dsq -> isSkippingCutscene
>385	PtrMemberAccess	dsq -> isSkippingCutscene
>386	Identifier	isSkippingCutscene
>387	Identifier	dsq
>388	UnaryOperator	!
>389	CallExpression	dsq -> sound -> isPlayingMusic ( )
>390	ArgumentList	 
>391	Callee	dsq -> sound -> isPlayingMusic
>392	PtrMemberAccess	dsq -> sound -> isPlayingMusic
>393	Identifier	isPlayingMusic
>394	PtrMemberAccess	dsq -> sound
>395	Identifier	sound
>396	Identifier	dsq
>397	ExpressionStatement	 
>398	CallExpression	core -> main ( 6 )
>399	ArgumentList	6
>400	Argument	6
>401	PrimaryExpression	6
>402	Callee	core -> main
>403	PtrMemberAccess	core -> main
>404	Identifier	main
>405	Identifier	core
>406	ExpressionStatement	 
>407	CallExpression	dsq -> overlay -> alpha . interpolateTo ( 1 , 6 )
>408	ArgumentList	1
>409	Argument	6
>410	PrimaryExpression	6
>411	Argument	1
>412	PrimaryExpression	1
>413	Callee	dsq -> overlay -> alpha . interpolateTo
>414	MemberAccess	dsq -> overlay -> alpha . interpolateTo
>415	Identifier	interpolateTo
>416	PtrMemberAccess	dsq -> overlay -> alpha
>417	Identifier	alpha
>418	PtrMemberAccess	dsq -> overlay
>419	Identifier	overlay
>420	Identifier	dsq
>421	ExpressionStatement	 
>422	CallExpression	watchSlide ( 15 )
>423	ArgumentList	15
>424	Argument	15
>425	PrimaryExpression	15
>426	Callee	watchSlide
>427	Identifier	watchSlide
>428	ExpressionStatement	 
>429	CallExpression	watchSlide ( 14 )
>430	ArgumentList	14
>431	Argument	14
>432	PrimaryExpression	14
>433	Callee	watchSlide
>434	Identifier	watchSlide
>435	ExpressionStatement	 
>436	CallExpression	watchSlide ( 13 )
>437	ArgumentList	13
>438	Argument	13
>439	PrimaryExpression	13
>440	Callee	watchSlide
>441	Identifier	watchSlide
>442	ExpressionStatement	 
>443	CallExpression	watchSlide ( 12 )
>444	ArgumentList	12
>445	Argument	12
>446	PrimaryExpression	12
>447	Callee	watchSlide
>448	Identifier	watchSlide
>449	ExpressionStatement	 
>450	CallExpression	watchSlide ( 11 )
>451	ArgumentList	11
>452	Argument	11
>453	PrimaryExpression	11
>454	Callee	watchSlide
>455	Identifier	watchSlide
>456	ExpressionStatement	 
>457	CallExpression	watchSlide ( 10 )
>458	ArgumentList	10
>459	Argument	10
>460	PrimaryExpression	10
>461	Callee	watchSlide
>462	Identifier	watchSlide
>463	ExpressionStatement	 
>464	CallExpression	watchSlide ( 9 )
>465	ArgumentList	9
>466	Argument	9
>467	PrimaryExpression	9
>468	Callee	watchSlide
>469	Identifier	watchSlide
>470	ExpressionStatement	 
>471	CallExpression	cred ( jenna , false )
>472	ArgumentList	jenna
>473	Argument	false
>474	Identifier	false
>475	Argument	jenna
>476	Identifier	jenna
>477	Callee	cred
>478	Identifier	cred
>479	ExpressionStatement	 
>480	CallExpression	watchSlide ( 8 )
>481	ArgumentList	8
>482	Argument	8
>483	PrimaryExpression	8
>484	Callee	watchSlide
>485	Identifier	watchSlide
>486	ExpressionStatement	 
>487	CallExpression	watchSlide ( 7 )
>488	ArgumentList	7
>489	Argument	7
>490	PrimaryExpression	7
>491	Callee	watchSlide
>492	Identifier	watchSlide
>493	ExpressionStatement	 
>494	CallExpression	watchSlide ( 6 )
>495	ArgumentList	6
>496	Argument	6
>497	PrimaryExpression	6
>498	Callee	watchSlide
>499	Identifier	watchSlide
>500	ExpressionStatement	 
>501	CallExpression	cred ( jenna , true )
>502	ArgumentList	jenna
>503	Argument	true
>504	Identifier	true
>505	Argument	jenna
>506	Identifier	jenna
>507	Callee	cred
>508	Identifier	cred
>509	ExpressionStatement	 
>510	CallExpression	cred ( alec , false )
>511	ArgumentList	alec
>512	Argument	false
>513	Identifier	false
>514	Argument	alec
>515	Identifier	alec
>516	Callee	cred
>517	Identifier	cred
>518	ExpressionStatement	 
>519	CallExpression	watchSlide ( 5 )
>520	ArgumentList	5
>521	Argument	5
>522	PrimaryExpression	5
>523	Callee	watchSlide
>524	Identifier	watchSlide
>525	ExpressionStatement	 
>526	CallExpression	watchSlide ( 4 )
>527	ArgumentList	4
>528	Argument	4
>529	PrimaryExpression	4
>530	Callee	watchSlide
>531	Identifier	watchSlide
>532	ExpressionStatement	 
>533	CallExpression	watchSlide ( 3 )
>534	ArgumentList	3
>535	Argument	3
>536	PrimaryExpression	3
>537	Callee	watchSlide
>538	Identifier	watchSlide
>539	ExpressionStatement	 
>540	CallExpression	cred ( alec , true )
>541	ArgumentList	alec
>542	Argument	true
>543	Identifier	true
>544	Argument	alec
>545	Identifier	alec
>546	Callee	cred
>547	Identifier	cred
>548	ExpressionStatement	 
>549	CallExpression	cred ( derek , false )
>550	ArgumentList	derek
>551	Argument	false
>552	Identifier	false
>553	Argument	derek
>554	Identifier	derek
>555	Callee	cred
>556	Identifier	cred
>557	ExpressionStatement	 
>558	CallExpression	watchSlide ( 2 )
>559	ArgumentList	2
>560	Argument	2
>561	PrimaryExpression	2
>562	Callee	watchSlide
>563	Identifier	watchSlide
>564	ExpressionStatement	 
>565	CallExpression	watchSlide ( 1 )
>566	ArgumentList	1
>567	Argument	1
>568	PrimaryExpression	1
>569	Callee	watchSlide
>570	Identifier	watchSlide
>571	ExpressionStatement	 
>572	CallExpression	watchSlide ( 0 )
>573	ArgumentList	0
>574	Argument	0
>575	PrimaryExpression	0
>576	Callee	watchSlide
>577	Identifier	watchSlide
>578	ExpressionStatement	 
>579	CallExpression	cred ( derek , true )
>580	ArgumentList	derek
>581	Argument	true
>582	Identifier	true
>583	Argument	derek
>584	Identifier	derek
>585	Callee	cred
>586	Identifier	cred
>587	ExpressionStatement	 
>588	CallExpression	core -> main ( 6 )
>589	ArgumentList	6
>590	Argument	6
>591	PrimaryExpression	6
>592	Callee	core -> main
>593	PtrMemberAccess	core -> main
>594	Identifier	main
>595	Identifier	core
>596	ExpressionStatement	 
>597	CallExpression	core -> main ( 12 )
>598	ArgumentList	12
>599	Argument	12
>600	PrimaryExpression	12
>601	Callee	core -> main
>602	PtrMemberAccess	core -> main
>603	Identifier	main
>604	Identifier	core
>605	ExpressionStatement	 
>606	CallExpression	dsq -> overlay2 -> alpha . interpolateTo ( 0 , 12 )
>607	ArgumentList	0
>608	Argument	12
>609	PrimaryExpression	12
>610	Argument	0
>611	PrimaryExpression	0
>612	Callee	dsq -> overlay2 -> alpha . interpolateTo
>613	MemberAccess	dsq -> overlay2 -> alpha . interpolateTo
>614	Identifier	interpolateTo
>615	PtrMemberAccess	dsq -> overlay2 -> alpha
>616	Identifier	alpha
>617	PtrMemberAccess	dsq -> overlay2
>618	Identifier	overlay2
>619	Identifier	dsq
>620	ExpressionStatement	 
>621	CallExpression	dsq -> overlay -> alpha . interpolateTo ( 0 , 12 )
>622	ArgumentList	0
>623	Argument	12
>624	PrimaryExpression	12
>625	Argument	0
>626	PrimaryExpression	0
>627	Callee	dsq -> overlay -> alpha . interpolateTo
>628	MemberAccess	dsq -> overlay -> alpha . interpolateTo
>629	Identifier	interpolateTo
>630	PtrMemberAccess	dsq -> overlay -> alpha
>631	Identifier	alpha
>632	PtrMemberAccess	dsq -> overlay
>633	Identifier	overlay
>634	Identifier	dsq
>635	ExpressionStatement	 
>636	CallExpression	dsq -> sound -> playMusic ( \"losttothewaves\" , SLT_NONE , SFT_CROSS , 1 )
>637	ArgumentList	\"losttothewaves\"
>638	Argument	1
>639	PrimaryExpression	1
>640	Argument	SFT_CROSS
>641	Identifier	SFT_CROSS
>642	Argument	SLT_NONE
>643	Identifier	SLT_NONE
>644	Argument	\"losttothewaves\"
>645	PrimaryExpression	\"losttothewaves\"
>646	Callee	dsq -> sound -> playMusic
>647	PtrMemberAccess	dsq -> sound -> playMusic
>648	Identifier	playMusic
>649	PtrMemberAccess	dsq -> sound
>650	Identifier	sound
>651	Identifier	dsq
>652	ExpressionStatement	 
>653	CallExpression	core -> main ( 1 )
>654	ArgumentList	1
>655	Argument	1
>656	PrimaryExpression	1
>657	Callee	core -> main
>658	PtrMemberAccess	core -> main
>659	Identifier	main
>660	Identifier	core
>661	ForStatement	for ( int i = 0 ; i < slides . size ( ) ; i ++ )
>662	CompoundStatement	 
>663	ExpressionStatement	 
>664	CallExpression	addRenderObject ( slides [ i ] , LR_ENTITIES )
>665	ArgumentList	slides [ i ]
>666	Argument	LR_ENTITIES
>667	Identifier	LR_ENTITIES
>668	Argument	slides [ i ]
>669	ArrayIndexing	slides [ i ]
>670	Identifier	i
>671	Identifier	slides
>672	Callee	addRenderObject
>673	Identifier	addRenderObject
>674	ExpressionStatement	 
>675	CallExpression	slides [ i ] -> setBlendType ( RenderObject 
>676	ArgumentList	RenderObject 
>677	Argument	RenderObject 
>678	Identifier	RenderObject 
>679	Callee	slides [ i ] -> setBlendType
>680	PtrMemberAccess	slides [ i ] -> setBlendType
>681	Identifier	setBlendType
>682	ArrayIndexing	slides [ i ]
>683	Identifier	i
>684	Identifier	slides
>685	ExpressionStatement	 
>686	AssignmentExpr	slides [ i ] -> followCamera = 1
>687	PrimaryExpression	1
>688	PtrMemberAccess	slides [ i ] -> followCamera
>689	Identifier	followCamera
>690	ArrayIndexing	slides [ i ]
>691	Identifier	i
>692	Identifier	slides
>693	ExpressionStatement	 
>694	AssignmentExpr	slides [ i ] -> alpha = 0
>695	PrimaryExpression	0
>696	PtrMemberAccess	slides [ i ] -> alpha
>697	Identifier	alpha
>698	ArrayIndexing	slides [ i ]
>699	Identifier	i
>700	Identifier	slides
>701	ExpressionStatement	 
>702	AssignmentExpr	slides [ i ] = new Quad ( \"credits/slide-\" + numToZeroString ( i , 4 ) , Vector ( 400 , 300 ) )
>703	Expression	\"credits/slide-\" + numToZeroString ( i , 4 ) , Vector ( 400 , 300 )
>704	CallExpression	Vector ( 400 , 300 )
>705	ArgumentList	400
>706	Argument	300
>707	PrimaryExpression	300
>708	Argument	400
>709	PrimaryExpression	400
>710	Callee	Vector
>711	Identifier	Vector
>712	AdditiveExpression	\"credits/slide-\" + numToZeroString ( i , 4 )
>713	CallExpression	numToZeroString ( i , 4 )
>714	ArgumentList	i
>715	Argument	4
>716	PrimaryExpression	4
>717	Argument	i
>718	Identifier	i
>719	Callee	numToZeroString
>720	Identifier	numToZeroString
>721	PrimaryExpression	\"credits/slide-\"
>722	ArrayIndexing	slides [ i ]
>723	Identifier	i
>724	Identifier	slides
>725	IncDecOp	 
>726	IncDec	++
>727	Identifier	i
>728	Condition	 
>729	RelationalExpression	i < slides . size ( )
>730	CallExpression	slides . size ( )
>731	ArgumentList	 
>732	Callee	slides . size
>733	MemberAccess	slides . size
>734	Identifier	size
>735	Identifier	slides
>736	Identifier	i
>737	ForInit	 
>738	IdentifierDeclStatement	int i = 0 ;
>739	IdentifierDecl	i = 0
>740	AssignmentExpr	i = 0
>741	PrimaryExpression	0
>742	Identifier	i
>743	Identifier	i
>744	IdentifierDeclType	int
>745	ExpressionStatement	 
>746	CallExpression	slides . resize ( numSlides )
>747	ArgumentList	numSlides
>748	Argument	numSlides
>749	Identifier	numSlides
>750	Callee	slides . resize
>751	MemberAccess	slides . resize
>752	Identifier	resize
>753	Identifier	slides
>754	IdentifierDeclStatement	 
>755	IdentifierDecl	numSlides = 16
>756	AssignmentExpr	numSlides = 16
>757	PrimaryExpression	16
>758	Identifier	numSlides
>759	Identifier	numSlides
>760	IdentifierDeclType	int
>761	ExpressionStatement	 
>762	CallExpression	bubbles -> start ( )
>763	ArgumentList	 
>764	Callee	bubbles -> start
>765	PtrMemberAccess	bubbles -> start
>766	Identifier	start
>767	Identifier	bubbles
>768	ExpressionStatement	 
>769	CallExpression	addRenderObject ( bubbles , LR_PARTICLES )
>770	ArgumentList	bubbles
>771	Argument	LR_PARTICLES
>772	Identifier	LR_PARTICLES
>773	Argument	bubbles
>774	Identifier	bubbles
>775	Callee	addRenderObject
>776	Identifier	addRenderObject
>777	ExpressionStatement	 
>778	AssignmentExpr	bubbles -> followCamera = 1
>779	PrimaryExpression	1
>780	PtrMemberAccess	bubbles -> followCamera
>781	Identifier	followCamera
>782	Identifier	bubbles
>783	ExpressionStatement	 
>784	AssignmentExpr	bubbles -> position = Vector ( 400 , 300 )
>785	CallExpression	Vector ( 400 , 300 )
>786	ArgumentList	400
>787	Argument	300
>788	PrimaryExpression	300
>789	Argument	400
>790	PrimaryExpression	400
>791	Callee	Vector
>792	Identifier	Vector
>793	PtrMemberAccess	bubbles -> position
>794	Identifier	position
>795	Identifier	bubbles
>796	ExpressionStatement	 
>797	CallExpression	bubbles -> load ( \"credits_idle\" )
>798	ArgumentList	\"credits_idle\"
>799	Argument	\"credits_idle\"
>800	PrimaryExpression	\"credits_idle\"
>801	Callee	bubbles -> load
>802	PtrMemberAccess	bubbles -> load
>803	Identifier	load
>804	Identifier	bubbles
>805	IdentifierDeclStatement	 
>806	IdentifierDecl	* bubbles = new ParticleEffect ( )
>807	AssignmentExpr	* bubbles = new ParticleEffect ( )
>808	UnaryExpression	new ParticleEffect ( )
>809	Identifier	bubbles
>810	Identifier	bubbles
>811	IdentifierDeclType	ParticleEffect *
>812	ExpressionStatement	 
>813	CallExpression	addRenderObject ( jenna , LR_HUD )
>814	ArgumentList	jenna
>815	Argument	LR_HUD
>816	Identifier	LR_HUD
>817	Argument	jenna
>818	Identifier	jenna
>819	Callee	addRenderObject
>820	Identifier	addRenderObject
>821	ExpressionStatement	 
>822	AssignmentExpr	jenna -> alpha = 0
>823	PrimaryExpression	0
>824	PtrMemberAccess	jenna -> alpha
>825	Identifier	alpha
>826	Identifier	jenna
>827	ExpressionStatement	 
>828	AssignmentExpr	jenna = new Quad ( \"credits/jenna\" , Vector ( 200 , 500 ) )
>829	Expression	\"credits/jenna\" , Vector ( 200 , 500 )
>830	CallExpression	Vector ( 200 , 500 )
>831	ArgumentList	200
>832	Argument	500
>833	PrimaryExpression	500
>834	Argument	200
>835	PrimaryExpression	200
>836	Callee	Vector
>837	Identifier	Vector
>838	PrimaryExpression	\"credits/jenna\"
>839	Identifier	jenna
>840	ExpressionStatement	 
>841	CallExpression	addRenderObject ( derek , LR_HUD )
>842	ArgumentList	derek
>843	Argument	LR_HUD
>844	Identifier	LR_HUD
>845	Argument	derek
>846	Identifier	derek
>847	Callee	addRenderObject
>848	Identifier	addRenderObject
>849	ExpressionStatement	 
>850	AssignmentExpr	derek -> alpha = 0
>851	PrimaryExpression	0
>852	PtrMemberAccess	derek -> alpha
>853	Identifier	alpha
>854	Identifier	derek
>855	ExpressionStatement	 
>856	AssignmentExpr	derek = new Quad ( \"credits/derek\" , Vector ( 200 , 500 ) )
>857	Expression	\"credits/derek\" , Vector ( 200 , 500 )
>858	CallExpression	Vector ( 200 , 500 )
>859	ArgumentList	200
>860	Argument	500
>861	PrimaryExpression	500
>862	Argument	200
>863	PrimaryExpression	200
>864	Callee	Vector
>865	Identifier	Vector
>866	PrimaryExpression	\"credits/derek\"
>867	Identifier	derek
>868	ExpressionStatement	 
>869	CallExpression	addRenderObject ( alec , LR_HUD )
>870	ArgumentList	alec
>871	Argument	LR_HUD
>872	Identifier	LR_HUD
>873	Argument	alec
>874	Identifier	alec
>875	Callee	addRenderObject
>876	Identifier	addRenderObject
>877	ExpressionStatement	 
>878	AssignmentExpr	alec -> alpha = 0
>879	PrimaryExpression	0
>880	PtrMemberAccess	alec -> alpha
>881	Identifier	alpha
>882	Identifier	alec
>883	ExpressionStatement	 
>884	AssignmentExpr	alec = new Quad ( \"credits/alec\" , Vector ( 200 , 500 ) )
>885	Expression	\"credits/alec\" , Vector ( 200 , 500 )
>886	CallExpression	Vector ( 200 , 500 )
>887	ArgumentList	200
>888	Argument	500
>889	PrimaryExpression	500
>890	Argument	200
>891	PrimaryExpression	200
>892	Callee	Vector
>893	Identifier	Vector
>894	PrimaryExpression	\"credits/alec\"
>895	Identifier	alec
>896	ExpressionStatement	 
>897	CallExpression	addRenderObject ( bg2 , LR_BACKGROUND )
>898	ArgumentList	bg2
>899	Argument	LR_BACKGROUND
>900	Identifier	LR_BACKGROUND
>901	Argument	bg2
>902	Identifier	bg2
>903	Callee	addRenderObject
>904	Identifier	addRenderObject
>905	ExpressionStatement	 
>906	CallExpression	bg2 -> setSegs ( 32 , 32 , 0.5 , 0.5 , 0.008 , 0.008 , 2.0 , 1 )
>907	ArgumentList	32
>908	Argument	1
>909	PrimaryExpression	1
>910	Argument	2.0
>911	PrimaryExpression	2.0
>912	Argument	0.008
>913	PrimaryExpression	0.008
>914	Argument	0.008
>915	PrimaryExpression	0.008
>916	Argument	0.5
>917	PrimaryExpression	0.5
>918	Argument	0.5
>919	PrimaryExpression	0.5
>920	Argument	32
>921	PrimaryExpression	32
>922	Argument	32
>923	PrimaryExpression	32
>924	Callee	bg2 -> setSegs
>925	PtrMemberAccess	bg2 -> setSegs
>926	Identifier	setSegs
>927	Identifier	bg2
>928	ExpressionStatement	 
>929	AssignmentExpr	bg2 -> alpha = 0.5
>930	PrimaryExpression	0.5
>931	PtrMemberAccess	bg2 -> alpha
>932	Identifier	alpha
>933	Identifier	bg2
>934	ExpressionStatement	 
>935	CallExpression	bg2 -> rotation . interpolateTo ( Vector ( 0 , 0 , - 360 ) , 20 , - 1 )
>936	ArgumentList	Vector ( 0 , 0 , - 360 )
>937	Argument	- 1
>938	UnaryOp	- 1
>939	PrimaryExpression	1
>940	UnaryOperator	-
>941	Argument	20
>942	PrimaryExpression	20
>943	Argument	Vector ( 0 , 0 , - 360 )
>944	CallExpression	Vector ( 0 , 0 , - 360 )
>945	ArgumentList	0
>946	Argument	- 360
>947	UnaryOp	- 360
>948	PrimaryExpression	360
>949	UnaryOperator	-
>950	Argument	0
>951	PrimaryExpression	0
>952	Argument	0
>953	PrimaryExpression	0
>954	Callee	Vector
>955	Identifier	Vector
>956	Callee	bg2 -> rotation . interpolateTo
>957	MemberAccess	bg2 -> rotation . interpolateTo
>958	Identifier	interpolateTo
>959	PtrMemberAccess	bg2 -> rotation
>960	Identifier	rotation
>961	Identifier	bg2
>962	ExpressionStatement	 
>963	AssignmentExpr	bg2 -> followCamera = 1
>964	PrimaryExpression	1
>965	PtrMemberAccess	bg2 -> followCamera
>966	Identifier	followCamera
>967	Identifier	bg2
>968	ExpressionStatement	 
>969	AssignmentExpr	bg2 -> color = Vector ( 0 , 0 , 1 )
>970	CallExpression	Vector ( 0 , 0 , 1 )
>971	ArgumentList	0
>972	Argument	1
>973	PrimaryExpression	1
>974	Argument	0
>975	PrimaryExpression	0
>976	Argument	0
>977	PrimaryExpression	0
>978	Callee	Vector
>979	Identifier	Vector
>980	PtrMemberAccess	bg2 -> color
>981	Identifier	color
>982	Identifier	bg2
>983	ExpressionStatement	 
>984	CallExpression	bg2 -> setWidthHeight ( 1424 , 1424 )
>985	ArgumentList	1424
>986	Argument	1424
>987	PrimaryExpression	1424
>988	Argument	1424
>989	PrimaryExpression	1424
>990	Callee	bg2 -> setWidthHeight
>991	PtrMemberAccess	bg2 -> setWidthHeight
>992	Identifier	setWidthHeight
>993	Identifier	bg2
>994	ExpressionStatement	 
>995	AssignmentExpr	bg2 = new Quad ( \"particles/gas\" , Vector ( 400 , 300 ) )
>996	Expression	\"particles/gas\" , Vector ( 400 , 300 )
>997	CallExpression	Vector ( 400 , 300 )
>998	ArgumentList	400
>999	Argument	300
>1000	PrimaryExpression	300
>1001	Argument	400
>1002	PrimaryExpression	400
>1003	Callee	Vector
>1004	Identifier	Vector
>1005	PrimaryExpression	\"particles/gas\"
>1006	Identifier	bg2
>1007	ExpressionStatement	 
>1008	CallExpression	addRenderObject ( bg1 , LR_BACKGROUND )
>1009	ArgumentList	bg1
>1010	Argument	LR_BACKGROUND
>1011	Identifier	LR_BACKGROUND
>1012	Argument	bg1
>1013	Identifier	bg1
>1014	Callee	addRenderObject
>1015	Identifier	addRenderObject
>1016	ExpressionStatement	 
>1017	CallExpression	bg1 -> setSegs ( 32 , 32 , 0.5 , 0.5 , 0.008 , 0.008 , 2.0 , 1 )
>1018	ArgumentList	32
>1019	Argument	1
>1020	PrimaryExpression	1
>1021	Argument	2.0
>1022	PrimaryExpression	2.0
>1023	Argument	0.008
>1024	PrimaryExpression	0.008
>1025	Argument	0.008
>1026	PrimaryExpression	0.008
>1027	Argument	0.5
>1028	PrimaryExpression	0.5
>1029	Argument	0.5
>1030	PrimaryExpression	0.5
>1031	Argument	32
>1032	PrimaryExpression	32
>1033	Argument	32
>1034	PrimaryExpression	32
>1035	Callee	bg1 -> setSegs
>1036	PtrMemberAccess	bg1 -> setSegs
>1037	Identifier	setSegs
>1038	Identifier	bg1
>1039	ExpressionStatement	 
>1040	AssignmentExpr	bg1 -> alpha = 0.5
>1041	PrimaryExpression	0.5
>1042	PtrMemberAccess	bg1 -> alpha
>1043	Identifier	alpha
>1044	Identifier	bg1
>1045	ExpressionStatement	 
>1046	CallExpression	bg1 -> rotation . interpolateTo ( Vector ( 0 , 0 , 360 ) , 20 , - 1 )
>1047	ArgumentList	Vector ( 0 , 0 , 360 )
>1048	Argument	- 1
>1049	UnaryOp	- 1
>1050	PrimaryExpression	1
>1051	UnaryOperator	-
>1052	Argument	20
>1053	PrimaryExpression	20
>1054	Argument	Vector ( 0 , 0 , 360 )
>1055	CallExpression	Vector ( 0 , 0 , 360 )
>1056	ArgumentList	0
>1057	Argument	360
>1058	PrimaryExpression	360
>1059	Argument	0
>1060	PrimaryExpression	0
>1061	Argument	0
>1062	PrimaryExpression	0
>1063	Callee	Vector
>1064	Identifier	Vector
>1065	Callee	bg1 -> rotation . interpolateTo
>1066	MemberAccess	bg1 -> rotation . interpolateTo
>1067	Identifier	interpolateTo
>1068	PtrMemberAccess	bg1 -> rotation
>1069	Identifier	rotation
>1070	Identifier	bg1
>1071	ExpressionStatement	 
>1072	AssignmentExpr	bg1 -> followCamera = 1
>1073	PrimaryExpression	1
>1074	PtrMemberAccess	bg1 -> followCamera
>1075	Identifier	followCamera
>1076	Identifier	bg1
>1077	ExpressionStatement	 
>1078	AssignmentExpr	bg1 -> color = Vector ( 0 , 0 , 1 )
>1079	CallExpression	Vector ( 0 , 0 , 1 )
>1080	ArgumentList	0
>1081	Argument	1
>1082	PrimaryExpression	1
>1083	Argument	0
>1084	PrimaryExpression	0
>1085	Argument	0
>1086	PrimaryExpression	0
>1087	Callee	Vector
>1088	Identifier	Vector
>1089	PtrMemberAccess	bg1 -> color
>1090	Identifier	color
>1091	Identifier	bg1
>1092	ExpressionStatement	 
>1093	CallExpression	bg1 -> setWidthHeight ( 1424 , 1424 )
>1094	ArgumentList	1424
>1095	Argument	1424
>1096	PrimaryExpression	1424
>1097	Argument	1424
>1098	PrimaryExpression	1424
>1099	Callee	bg1 -> setWidthHeight
>1100	PtrMemberAccess	bg1 -> setWidthHeight
>1101	Identifier	setWidthHeight
>1102	Identifier	bg1
>1103	ExpressionStatement	 
>1104	AssignmentExpr	bg1 = new Quad ( \"particles/gas\" , Vector ( 400 , 300 ) )
>1105	Expression	\"particles/gas\" , Vector ( 400 , 300 )
>1106	CallExpression	Vector ( 400 , 300 )
>1107	ArgumentList	400
>1108	Argument	300
>1109	PrimaryExpression	300
>1110	Argument	400
>1111	PrimaryExpression	400
>1112	Callee	Vector
>1113	Identifier	Vector
>1114	PrimaryExpression	\"particles/gas\"
>1115	Identifier	bg1
>1116	ExpressionStatement	 
>1117	CallExpression	core -> sound -> stopMusic ( )
>1118	ArgumentList	 
>1119	Callee	core -> sound -> stopMusic
>1120	PtrMemberAccess	core -> sound -> stopMusic
>1121	Identifier	stopMusic
>1122	PtrMemberAccess	core -> sound
>1123	Identifier	sound
>1124	Identifier	core
>1125	ExpressionStatement	 
>1126	CallExpression	core -> resetCamera ( )
>1127	ArgumentList	 
>1128	Callee	core -> resetCamera
>1129	PtrMemberAccess	core -> resetCamera
>1130	Identifier	resetCamera
>1131	Identifier	core
>1132	ExpressionStatement	 
>1133	CallExpression	dsq -> setCutscene ( 1 , 0 )
>1134	ArgumentList	1
>1135	Argument	0
>1136	PrimaryExpression	0
>1137	Argument	1
>1138	PrimaryExpression	1
>1139	Callee	dsq -> setCutscene
>1140	PtrMemberAccess	dsq -> setCutscene
>1141	Identifier	setCutscene
>1142	Identifier	dsq
>1143	ExpressionStatement	 
>1144	CallExpression	StateObject 
>1145	ArgumentList	 
>1146	Callee	StateObject 
>1147	Identifier	StateObject 
>1214	FunctionDef	Credits 
>1215	ParameterList	 
>1216	ReturnType	void
>1217	CompoundStatement	 
>1218	ExpressionStatement	 
>1219	CallExpression	StateObject 
>1220	ArgumentList	 
>1221	Callee	StateObject 
>1222	Identifier	StateObject 
>1226	FunctionDef	Credits 
>1227	ParameterList	float dt
>1228	Parameter	 
>1229	Identifier	dt
>1230	ParameterType	float
>1231	ReturnType	void
>1232	CompoundStatement	 
>1233	ExpressionStatement	 
>1234	CallExpression	StateObject 
>1235	ArgumentList	dt
>1236	Argument	dt
>1237	Identifier	dt
>1238	Callee	StateObject 
>1239	Identifier	StateObject 
<12=18,17,13
<13=14
<14=16,15
<18=193,176,167,158,141,124,107,96,87,63,39,28,19
<19=20
<20=24,21
<21=22
<22=23
<24=25
<25=27,26
<28=29
<29=33,30
<30=31
<31=32
<33=34
<34=36,35
<36=38,37
<39=40
<40=53,41
<41=44,42
<42=43
<44=45
<45=51,46
<46=49,47
<47=48
<49=50
<51=52
<53=54
<54=56,55
<56=58,57
<58=60,59
<60=62,61
<63=64
<64=77,65
<65=68,66
<66=67
<68=69
<69=75,70
<70=73,71
<71=72
<73=74
<75=76
<77=78
<78=80,79
<80=82,81
<82=84,83
<84=86,85
<87=88
<88=90,89
<90=91
<91=93,92
<93=95,94
<96=97
<97=101,98
<98=99
<99=100
<101=102
<102=104,103
<104=106,105
<107=108
<108=114,109
<109=112,110
<110=111
<112=113
<114=115
<115=117,116
<117=119,118
<119=121,120
<121=123,122
<124=125
<125=131,126
<126=129,127
<127=128
<129=130
<131=132
<132=134,133
<134=136,135
<136=138,137
<138=140,139
<141=142
<142=148,143
<143=146,144
<144=145
<146=147
<148=149
<149=151,150
<151=153,152
<153=155,154
<155=157,156
<158=159
<159=161,160
<161=162
<162=164,163
<164=166,165
<167=168
<168=175,174,169
<169=173,170
<170=172,171
<176=178,177
<178=179
<179=192,180
<180=189,181
<181=188,182
<182=184,183
<184=185
<185=187,186
<189=191,190
<193=194
<194=199,198,195
<195=197,196
<224=233,232,225
<225=229,226
<226=228,227
<229=231,230
<233=310,297,234
<234=295,255,235
<235=236
<236=237
<237=249,238
<238=247,245,243,241,239
<239=240
<241=242
<243=244
<245=246
<247=248
<249=250
<250=252,251
<252=254,253
<255=276,256
<256=257
<257=270,258
<258=261,259
<259=260
<261=262
<262=268,263
<263=266,264
<264=265
<266=267
<268=269
<270=271
<271=273,272
<273=275,274
<276=277
<277=289,278
<278=287,285,283,281,279
<279=280
<281=282
<283=284
<285=286
<287=288
<289=290
<290=292,291
<292=294,293
<295=296
<297=298
<298=307,299
<299=305,300
<300=303,301
<301=302
<303=304
<305=306
<307=309,308
<310=311
<311=316,315,312
<312=314,313
<328=330,329
<330=331
<331=332
<332=338,333
<333=336,334
<334=335
<336=337
<338=339
<344=347,346,345
<347=1143,1132,1125,1116,1103,1092,1077,1071,1045,1039,1016,1007,994,983,968,962,934,928,905,896,883,348,359,368,397,406,421,428,435,442,449,456,463,470,479,486,493,500,509,518,525,532,539,548,557,564,571,578,587,596,605,620,635,652,661,745,754,761,768,777,783,796,805,812,821,827,840,849,855,868,877
<348=349
<349=353,350
<350=351
<351=352
<353=354
<354=356,355
<356=358,357
<359=360
<360=364,361
<361=362
<362=363
<364=365
<365=367,366
<368=379,369
<369=370
<370=371
<371=375,372
<372=373
<373=374
<375=376
<376=378,377
<379=380
<380=389,381
<381=388,382
<382=384,383
<384=385
<385=387,386
<389=391,390
<391=392
<392=394,393
<394=396,395
<397=398
<398=402,399
<399=400
<400=401
<402=403
<403=405,404
<406=407
<407=413,408
<408=411,409
<409=410
<411=412
<413=414
<414=416,415
<416=418,417
<418=420,419
<421=422
<422=426,423
<423=424
<424=425
<426=427
<428=429
<429=433,430
<430=431
<431=432
<433=434
<435=436
<436=440,437
<437=438
<438=439
<440=441
<442=443
<443=447,444
<444=445
<445=446
<447=448
<449=450
<450=454,451
<451=452
<452=453
<454=455
<456=457
<457=461,458
<458=459
<459=460
<461=462
<463=464
<464=468,465
<465=466
<466=467
<468=469
<470=471
<471=477,472
<472=475,473
<473=474
<475=476
<477=478
<479=480
<480=484,481
<481=482
<482=483
<484=485
<486=487
<487=491,488
<488=489
<489=490
<491=492
<493=494
<494=498,495
<495=496
<496=497
<498=499
<500=501
<501=507,502
<502=505,503
<503=504
<505=506
<507=508
<509=510
<510=516,511
<511=514,512
<512=513
<514=515
<516=517
<518=519
<519=523,520
<520=521
<521=522
<523=524
<525=526
<526=530,527
<527=528
<528=529
<530=531
<532=533
<533=537,534
<534=535
<535=536
<537=538
<539=540
<540=546,541
<541=544,542
<542=543
<544=545
<546=547
<548=549
<549=555,550
<550=553,551
<551=552
<553=554
<555=556
<557=558
<558=562,559
<559=560
<560=561
<562=563
<564=565
<565=569,566
<566=567
<567=568
<569=570
<571=572
<572=576,573
<573=574
<574=575
<576=577
<578=579
<579=585,580
<580=583,581
<581=582
<583=584
<585=586
<587=588
<588=592,589
<589=590
<590=591
<592=593
<593=595,594
<596=597
<597=601,598
<598=599
<599=600
<601=602
<602=604,603
<605=606
<606=612,607
<607=610,608
<608=609
<610=611
<612=613
<613=615,614
<615=617,616
<617=619,618
<620=621
<621=627,622
<622=625,623
<623=624
<625=626
<627=628
<628=630,629
<630=632,631
<632=634,633
<635=636
<636=646,637
<637=644,642,640,638
<638=639
<640=641
<642=643
<644=645
<646=647
<647=649,648
<649=651,650
<652=653
<653=657,654
<654=655
<655=656
<657=658
<658=660,659
<661=737,728,725,662
<662=701,693,685,674,663
<663=664
<664=672,665
<665=668,666
<666=667
<668=669
<669=671,670
<672=673
<674=675
<675=679,676
<676=677
<677=678
<679=680
<680=682,681
<682=684,683
<685=686
<686=688,687
<688=690,689
<690=692,691
<693=694
<694=696,695
<696=698,697
<698=700,699
<701=702
<702=722,703
<703=712,704
<704=710,705
<705=708,706
<706=707
<708=709
<710=711
<712=721,713
<713=719,714
<714=717,715
<715=716
<717=718
<719=720
<722=724,723
<725=727,726
<728=729
<729=736,730
<730=732,731
<732=733
<733=735,734
<737=738
<738=739
<739=744,743,740
<740=742,741
<745=746
<746=750,747
<747=748
<748=749
<750=751
<751=753,752
<754=755
<755=760,759,756
<756=758,757
<761=762
<762=764,763
<764=765
<765=767,766
<768=769
<769=775,770
<770=773,771
<771=772
<773=774
<775=776
<777=778
<778=780,779
<780=782,781
<783=784
<784=793,785
<785=791,786
<786=789,787
<787=788
<789=790
<791=792
<793=795,794
<796=797
<797=801,798
<798=799
<799=800
<801=802
<802=804,803
<805=806
<806=811,810,807
<807=809,808
<812=813
<813=819,814
<814=817,815
<815=816
<817=818
<819=820
<821=822
<822=824,823
<824=826,825
<827=828
<828=839,829
<829=838,830
<830=836,831
<831=834,832
<832=833
<834=835
<836=837
<840=841
<841=847,842
<842=845,843
<843=844
<845=846
<847=848
<849=850
<850=852,851
<852=854,853
<855=856
<856=867,857
<857=866,858
<858=864,859
<859=862,860
<860=861
<862=863
<864=865
<868=869
<869=875,870
<870=873,871
<871=872
<873=874
<875=876
<877=878
<878=880,879
<880=882,881
<883=884
<884=895,885
<885=894,886
<886=892,887
<887=890,888
<888=889
<890=891
<892=893
<896=897
<897=903,898
<898=901,899
<899=900
<901=902
<903=904
<905=906
<906=924,907
<907=922,920,918,916,914,912,910,908
<908=909
<910=911
<912=913
<914=915
<916=917
<918=919
<920=921
<922=923
<924=925
<925=927,926
<928=929
<929=931,930
<931=933,932
<934=935
<935=956,936
<936=943,941,937
<937=938
<938=940,939
<941=942
<943=944
<944=954,945
<945=952,950,946
<946=947
<947=949,948
<950=951
<952=953
<954=955
<956=957
<957=959,958
<959=961,960
<962=963
<963=965,964
<965=967,966
<968=969
<969=980,970
<970=978,971
<971=976,974,972
<972=973
<974=975
<976=977
<978=979
<980=982,981
<983=984
<984=990,985
<985=988,986
<986=987
<988=989
<990=991
<991=993,992
<994=995
<995=1006,996
<996=1005,997
<997=1003,998
<998=1001,999
<999=1000
<1001=1002
<1003=1004
<1007=1008
<1008=1014,1009
<1009=1012,1010
<1010=1011
<1012=1013
<1014=1015
<1016=1017
<1017=1035,1018
<1018=1033,1031,1029,1027,1025,1023,1021,1019
<1019=1020
<1021=1022
<1023=1024
<1025=1026
<1027=1028
<1029=1030
<1031=1032
<1033=1034
<1035=1036
<1036=1038,1037
<1039=1040
<1040=1042,1041
<1042=1044,1043
<1045=1046
<1046=1065,1047
<1047=1054,1052,1048
<1048=1049
<1049=1051,1050
<1052=1053
<1054=1055
<1055=1063,1056
<1056=1061,1059,1057
<1057=1058
<1059=1060
<1061=1062
<1063=1064
<1065=1066
<1066=1068,1067
<1068=1070,1069
<1071=1072
<1072=1074,1073
<1074=1076,1075
<1077=1078
<1078=1089,1079
<1079=1087,1080
<1080=1085,1083,1081
<1081=1082
<1083=1084
<1085=1086
<1087=1088
<1089=1091,1090
<1092=1093
<1093=1099,1094
<1094=1097,1095
<1095=1096
<1097=1098
<1099=1100
<1100=1102,1101
<1103=1104
<1104=1115,1105
<1105=1114,1106
<1106=1112,1107
<1107=1110,1108
<1108=1109
<1110=1111
<1112=1113
<1116=1117
<1117=1119,1118
<1119=1120
<1120=1122,1121
<1122=1124,1123
<1125=1126
<1126=1128,1127
<1128=1129
<1129=1131,1130
<1132=1133
<1133=1139,1134
<1134=1137,1135
<1135=1136
<1137=1138
<1139=1140
<1140=1142,1141
<1143=1144
<1144=1146,1145
<1146=1147
<1214=1217,1216,1215
<1217=1218
<1218=1219
<1219=1221,1220
<1221=1222
<1226=1232,1231,1227
<1227=1228
<1228=1230,1229
<1232=1233
<1233=1234
<1234=1238,1235
<1235=1236
<1236=1237
<1238=1239
