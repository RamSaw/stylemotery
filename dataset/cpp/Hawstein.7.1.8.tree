>3	FunctionDef	isSubstring (string s1 , string s2)
>4	ParameterList	string s1 , string s2
>5	Parameter	 
>6	Identifier	s2
>7	ParameterType	string
>8	Parameter	 
>9	Identifier	s1
>10	ParameterType	string
>11	ReturnType	bool
>12	CompoundStatement	 
>13	IfStatement	if ( s1 . find ( s2 ) != string 
>14	ElseStatement	else
>15	ReturnStatement	 
>16	Identifier	false
>17	ReturnStatement	 
>18	Identifier	true
>19	Condition	 
>20	EqualityExpression	s1 . find ( s2 ) != string 
>21	Identifier	string 
>22	CallExpression	s1 . find ( s2 )
>23	ArgumentList	s2
>24	Argument	s2
>25	Identifier	s2
>26	Callee	s1 . find
>27	MemberAccess	s1 . find
>28	Identifier	find
>29	Identifier	s1
>39	FunctionDef	isRotation (string s1 , string s2)
>40	ParameterList	string s1 , string s2
>41	Parameter	 
>42	Identifier	s2
>43	ParameterType	string
>44	Parameter	 
>45	Identifier	s1
>46	ParameterType	string
>47	ReturnType	bool
>48	CompoundStatement	 
>49	ReturnStatement	 
>50	CallExpression	isSubstring ( s1 + s1 , s2 )
>51	ArgumentList	s1 + s1
>52	Argument	s2
>53	Identifier	s2
>54	Argument	s1 + s1
>55	AdditiveExpression	s1 + s1
>56	Identifier	s1
>57	Identifier	s1
>58	Callee	isSubstring
>59	Identifier	isSubstring
>60	IfStatement	if ( s1 . length ( ) != s2 . length ( ) || s1 . length ( ) <= 0 )
>61	ReturnStatement	 
>62	Identifier	false
>63	Condition	 
>64	OrExpression	s1 . length ( ) != s2 . length ( ) || s1 . length ( ) <= 0
>65	RelationalExpression	s1 . length ( ) <= 0
>66	PrimaryExpression	0
>67	CallExpression	s1 . length ( )
>68	ArgumentList	 
>69	Callee	s1 . length
>70	MemberAccess	s1 . length
>71	Identifier	length
>72	Identifier	s1
>73	EqualityExpression	s1 . length ( ) != s2 . length ( )
>74	CallExpression	s2 . length ( )
>75	ArgumentList	 
>76	Callee	s2 . length
>77	MemberAccess	s2 . length
>78	Identifier	length
>79	Identifier	s2
>80	CallExpression	s1 . length ( )
>81	ArgumentList	 
>82	Callee	s1 . length
>83	MemberAccess	s1 . length
>84	Identifier	length
>85	Identifier	s1
>95	FunctionDef	main ()
>96	ParameterList	 
>97	ReturnType	int
>98	CompoundStatement	 
>99	ReturnStatement	 
>100	PrimaryExpression	0
>101	ExpressionStatement	 
>102	ShiftExpression	cout << isRotation ( s1 , s2 ) << endl
>103	ShiftExpression	isRotation ( s1 , s2 ) << endl
>104	Identifier	endl
>105	CallExpression	isRotation ( s1 , s2 )
>106	ArgumentList	s1
>107	Argument	s2
>108	Identifier	s2
>109	Argument	s1
>110	Identifier	s1
>111	Callee	isRotation
>112	Identifier	isRotation
>113	Identifier	cout
>114	IdentifierDeclStatement	 
>115	IdentifierDecl	s2 = \"pleap\"
>116	AssignmentExpr	s2 = \"pleap\"
>117	PrimaryExpression	\"pleap\"
>118	Identifier	s2
>119	Identifier	s2
>120	IdentifierDeclType	string
>121	IdentifierDeclStatement	 
>122	IdentifierDecl	s1 = \"apple\"
>123	AssignmentExpr	s1 = \"apple\"
>124	PrimaryExpression	\"apple\"
>125	Identifier	s1
>126	Identifier	s1
>127	IdentifierDeclType	string
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=13
<13=19,17,14
<14=15
<15=16
<17=18
<19=20
<20=22,21
<22=26,23
<23=24
<24=25
<26=27
<27=29,28
<39=48,47,40
<40=44,41
<41=43,42
<44=46,45
<48=60,49
<49=50
<50=58,51
<51=54,52
<52=53
<54=55
<55=57,56
<58=59
<60=63,61
<61=62
<63=64
<64=73,65
<65=67,66
<67=69,68
<69=70
<70=72,71
<73=80,74
<74=76,75
<76=77
<77=79,78
<80=82,81
<82=83
<83=85,84
<95=98,97,96
<98=121,114,101,99
<99=100
<101=102
<102=113,103
<103=105,104
<105=111,106
<106=109,107
<107=108
<109=110
<111=112
<114=115
<115=120,119,116
<116=118,117
<121=122
<122=127,126,123
<123=125,124
