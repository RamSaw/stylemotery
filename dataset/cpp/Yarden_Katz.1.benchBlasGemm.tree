>15	FunctionDef	main (int argc , char * argv [ ])
>16	ParameterList	int argc , char * argv [ ]
>17	Parameter	 
>18	Identifier	argv
>19	ParameterType	char * [ ]
>20	Parameter	 
>21	Identifier	argc
>22	ParameterType	int
>23	ReturnType	int
>24	CompoundStatement	 
>25	ReturnStatement	 
>26	PrimaryExpression	0
>27	ExpressionStatement	 
>28	ShiftExpression	std 
>29	ShiftExpression	\"l2
>30	ShiftExpression	Eigen 
>31	Identifier	std 
>32	CallExpression	Eigen 
>33	ArgumentList	 
>34	Callee	Eigen 
>35	Identifier	Eigen 
>36	PrimaryExpression	\"l2
>37	Identifier	std 
>38	ExpressionStatement	 
>39	ShiftExpression	std 
>40	ShiftExpression	\"l1
>41	ShiftExpression	Eigen 
>42	Identifier	std 
>43	CallExpression	Eigen 
>44	ArgumentList	 
>45	Callee	Eigen 
>46	Identifier	Eigen 
>47	PrimaryExpression	\"l1
>48	Identifier	std 
>49	CompoundStatement	 
>50	IfStatement	if ( ! ( std 
>51	ElseStatement	else
>52	ExpressionStatement	 
>53	ShiftExpression	std 
>54	ShiftExpression	M << \" 
>55	ShiftExpression	\" 
>56	ShiftExpression	timer . value ( ) << \" ; \" << 1e-3 * floor ( 1e-6 * nbmad / timer . value ( ) ) << \"\n\"
>57	ShiftExpression	\" ; \" << 1e-3 * floor ( 1e-6 * nbmad / timer . value ( ) ) << \"\n\"
>58	ShiftExpression	1e-3 * floor ( 1e-6 * nbmad / timer . value ( ) ) << \"\n\"
>59	PrimaryExpression	\"\n\"
>60	MultiplicativeExpression	1e-3 * floor ( 1e-6 * nbmad / timer . value ( ) )
>61	CallExpression	floor ( 1e-6 * nbmad / timer . value ( ) )
>62	ArgumentList	1e-6 * nbmad / timer . value ( )
>63	Argument	1e-6 * nbmad / timer . value ( )
>64	MultiplicativeExpression	1e-6 * nbmad / timer . value ( )
>65	MultiplicativeExpression	nbmad / timer . value ( )
>66	CallExpression	timer . value ( )
>67	ArgumentList	 
>68	Callee	timer . value
>69	MemberAccess	timer . value
>70	Identifier	value
>71	Identifier	timer
>72	Identifier	nbmad
>73	PrimaryExpression	1e-6
>74	Callee	floor
>75	Identifier	floor
>76	PrimaryExpression	1e-3
>77	PrimaryExpression	\" ; \"
>78	CallExpression	timer . value ( )
>79	ArgumentList	 
>80	Callee	timer . value
>81	MemberAccess	timer . value
>82	Identifier	value
>83	Identifier	timer
>84	PrimaryExpression	\" 
>85	Identifier	M
>86	Identifier	std 
>87	ExpressionStatement	 
>88	ShiftExpression	std 
>89	ShiftExpression	\"eigen 
>90	ShiftExpression	timer . value ( ) << \" (\" << 1e-3 * floor ( 1e-6 * nbmad / timer . value ( ) ) << \" GFlops/s)\n\"
>91	ShiftExpression	\" (\" << 1e-3 * floor ( 1e-6 * nbmad / timer . value ( ) ) << \" GFlops/s)\n\"
>92	ShiftExpression	1e-3 * floor ( 1e-6 * nbmad / timer . value ( ) ) << \" GFlops/s)\n\"
>93	PrimaryExpression	\" GFlops/s)\n\"
>94	MultiplicativeExpression	1e-3 * floor ( 1e-6 * nbmad / timer . value ( ) )
>95	CallExpression	floor ( 1e-6 * nbmad / timer . value ( ) )
>96	ArgumentList	1e-6 * nbmad / timer . value ( )
>97	Argument	1e-6 * nbmad / timer . value ( )
>98	MultiplicativeExpression	1e-6 * nbmad / timer . value ( )
>99	MultiplicativeExpression	nbmad / timer . value ( )
>100	CallExpression	timer . value ( )
>101	ArgumentList	 
>102	Callee	timer . value
>103	MemberAccess	timer . value
>104	Identifier	value
>105	Identifier	timer
>106	Identifier	nbmad
>107	PrimaryExpression	1e-6
>108	Callee	floor
>109	Identifier	floor
>110	PrimaryExpression	1e-3
>111	PrimaryExpression	\" (\"
>112	CallExpression	timer . value ( )
>113	ArgumentList	 
>114	Callee	timer . value
>115	MemberAccess	timer . value
>116	Identifier	value
>117	Identifier	timer
>118	PrimaryExpression	\"eigen 
>119	Identifier	std 
>120	Condition	 
>121	UnaryOp	! ( std 
>122	EqualityExpression	std 
>123	PrimaryExpression	\"auto\"
>124	CallExpression	std 
>125	ArgumentList	argv [ 1 ]
>126	Argument	argv [ 1 ]
>127	ArrayIndexing	argv [ 1 ]
>128	PrimaryExpression	1
>129	Identifier	argv
>130	Callee	std 
>131	Identifier	std 
>132	UnaryOperator	!
>133	ForStatement	for ( uint k = 0 ; k < nbtries ; ++ k )
>134	CompoundStatement	 
>135	ExpressionStatement	 
>136	CallExpression	timer . stop ( )
>137	ArgumentList	 
>138	Callee	timer . stop
>139	MemberAccess	timer . stop
>140	Identifier	stop
>141	Identifier	timer
>142	ExpressionStatement	 
>143	CallExpression	bench_eigengemm ( mc , ma , mb , nbloops )
>144	ArgumentList	mc
>145	Argument	nbloops
>146	Identifier	nbloops
>147	Argument	mb
>148	Identifier	mb
>149	Argument	ma
>150	Identifier	ma
>151	Argument	mc
>152	Identifier	mc
>153	Callee	bench_eigengemm
>154	Identifier	bench_eigengemm
>155	ExpressionStatement	 
>156	CallExpression	timer . start ( )
>157	ArgumentList	 
>158	Callee	timer . start
>159	MemberAccess	timer . start
>160	Identifier	start
>161	Identifier	timer
>162	UnaryExpression	 
>163	Identifier	k
>164	IncDec	++
>165	Condition	 
>166	RelationalExpression	k < nbtries
>167	Identifier	nbtries
>168	Identifier	k
>169	ForInit	 
>170	IdentifierDeclStatement	uint k = 0 ;
>171	IdentifierDecl	k = 0
>172	AssignmentExpr	k = 0
>173	PrimaryExpression	0
>174	Identifier	k
>175	Identifier	k
>176	IdentifierDeclType	uint
>177	ExpressionStatement	 
>178	CallExpression	timer . reset ( )
>179	ArgumentList	 
>180	Callee	timer . reset
>181	MemberAccess	timer . reset
>182	Identifier	reset
>183	Identifier	timer
>184	ExpressionStatement	 
>185	AssignmentExpr	mc = MyMatrix 
>186	CallExpression	MyMatrix 
>187	ArgumentList	M
>188	Argument	N
>189	Identifier	N
>190	Argument	M
>191	Identifier	M
>192	Callee	MyMatrix 
>193	Identifier	MyMatrix 
>194	Identifier	mc
>195	ExpressionStatement	 
>196	AssignmentExpr	mb = MyMatrix 
>197	CallExpression	MyMatrix 
>198	ArgumentList	K
>199	Argument	N
>200	Identifier	N
>201	Argument	K
>202	Identifier	K
>203	Callee	MyMatrix 
>204	Identifier	MyMatrix 
>205	Identifier	mb
>206	ExpressionStatement	 
>207	AssignmentExpr	ma = MyMatrix 
>208	CallExpression	MyMatrix 
>209	ArgumentList	M
>210	Argument	K
>211	Identifier	K
>212	Argument	M
>213	Identifier	M
>214	Callee	MyMatrix 
>215	Identifier	MyMatrix 
>216	Identifier	ma
>217	IfStatement	if ( ! ( std 
>218	CompoundStatement	 
>219	IfStatement	if ( ! ( std 
>220	ElseStatement	else
>221	ExpressionStatement	 
>222	ShiftExpression	std 
>223	ShiftExpression	M << \" 
>224	ShiftExpression	\" 
>225	ShiftExpression	timer . value ( ) << \" ; \" << 1e-3 * floor ( 1e-6 * nbmad / timer . value ( ) ) << \"\n\"
>226	ShiftExpression	\" ; \" << 1e-3 * floor ( 1e-6 * nbmad / timer . value ( ) ) << \"\n\"
>227	ShiftExpression	1e-3 * floor ( 1e-6 * nbmad / timer . value ( ) ) << \"\n\"
>228	PrimaryExpression	\"\n\"
>229	MultiplicativeExpression	1e-3 * floor ( 1e-6 * nbmad / timer . value ( ) )
>230	CallExpression	floor ( 1e-6 * nbmad / timer . value ( ) )
>231	ArgumentList	1e-6 * nbmad / timer . value ( )
>232	Argument	1e-6 * nbmad / timer . value ( )
>233	MultiplicativeExpression	1e-6 * nbmad / timer . value ( )
>234	MultiplicativeExpression	nbmad / timer . value ( )
>235	CallExpression	timer . value ( )
>236	ArgumentList	 
>237	Callee	timer . value
>238	MemberAccess	timer . value
>239	Identifier	value
>240	Identifier	timer
>241	Identifier	nbmad
>242	PrimaryExpression	1e-6
>243	Callee	floor
>244	Identifier	floor
>245	PrimaryExpression	1e-3
>246	PrimaryExpression	\" ; \"
>247	CallExpression	timer . value ( )
>248	ArgumentList	 
>249	Callee	timer . value
>250	MemberAccess	timer . value
>251	Identifier	value
>252	Identifier	timer
>253	PrimaryExpression	\" 
>254	Identifier	M
>255	Identifier	std 
>256	ExpressionStatement	 
>257	ShiftExpression	std 
>258	ShiftExpression	\"cblas
>259	ShiftExpression	timer . value ( ) << \" (\" << 1e-3 * floor ( 1e-6 * nbmad / timer . value ( ) ) << \" GFlops/s)\n\"
>260	ShiftExpression	\" (\" << 1e-3 * floor ( 1e-6 * nbmad / timer . value ( ) ) << \" GFlops/s)\n\"
>261	ShiftExpression	1e-3 * floor ( 1e-6 * nbmad / timer . value ( ) ) << \" GFlops/s)\n\"
>262	PrimaryExpression	\" GFlops/s)\n\"
>263	MultiplicativeExpression	1e-3 * floor ( 1e-6 * nbmad / timer . value ( ) )
>264	CallExpression	floor ( 1e-6 * nbmad / timer . value ( ) )
>265	ArgumentList	1e-6 * nbmad / timer . value ( )
>266	Argument	1e-6 * nbmad / timer . value ( )
>267	MultiplicativeExpression	1e-6 * nbmad / timer . value ( )
>268	MultiplicativeExpression	nbmad / timer . value ( )
>269	CallExpression	timer . value ( )
>270	ArgumentList	 
>271	Callee	timer . value
>272	MemberAccess	timer . value
>273	Identifier	value
>274	Identifier	timer
>275	Identifier	nbmad
>276	PrimaryExpression	1e-6
>277	Callee	floor
>278	Identifier	floor
>279	PrimaryExpression	1e-3
>280	PrimaryExpression	\" (\"
>281	CallExpression	timer . value ( )
>282	ArgumentList	 
>283	Callee	timer . value
>284	MemberAccess	timer . value
>285	Identifier	value
>286	Identifier	timer
>287	PrimaryExpression	\"cblas
>288	Identifier	std 
>289	Condition	 
>290	UnaryOp	! ( std 
>291	EqualityExpression	std 
>292	PrimaryExpression	\"auto\"
>293	CallExpression	std 
>294	ArgumentList	argv [ 1 ]
>295	Argument	argv [ 1 ]
>296	ArrayIndexing	argv [ 1 ]
>297	PrimaryExpression	1
>298	Identifier	argv
>299	Callee	std 
>300	Identifier	std 
>301	UnaryOperator	!
>302	ForStatement	for ( uint k = 0 ; k < nbtries ; ++ k )
>303	CompoundStatement	 
>304	ExpressionStatement	 
>305	CallExpression	timer . stop ( )
>306	ArgumentList	 
>307	Callee	timer . stop
>308	MemberAccess	timer . stop
>309	Identifier	stop
>310	Identifier	timer
>311	ForStatement	for ( uint j = 0 ; j < nbloops ; ++ j )
>312	ExpressionStatement	 
>313	CallExpression	CBLAS_GEMM ( CblasRowMajor , CblasNoTrans , CblasNoTrans , M , N , K , alpha , ma . data ( ) , K , mb . data ( ) , \
>314	ArgumentList	CblasRowMajor
>315	Argument	N
>316	Identifier	N
>317	Argument	mc . data ( )
>318	CallExpression	mc . data ( )
>319	ArgumentList	 
>320	Callee	mc . data
>321	MemberAccess	mc . data
>322	Identifier	data
>323	Identifier	mc
>324	Argument	beta
>325	Identifier	beta
>326	Argument	N
>327	Identifier	N
>328	Argument	mb . data ( )
>329	CallExpression	mb . data ( )
>330	ArgumentList	 
>331	Callee	mb . data
>332	MemberAccess	mb . data
>333	Identifier	data
>334	Identifier	mb
>335	Argument	K
>336	Identifier	K
>337	Argument	ma . data ( )
>338	CallExpression	ma . data ( )
>339	ArgumentList	 
>340	Callee	ma . data
>341	MemberAccess	ma . data
>342	Identifier	data
>343	Identifier	ma
>344	Argument	alpha
>345	Identifier	alpha
>346	Argument	K
>347	Identifier	K
>348	Argument	N
>349	Identifier	N
>350	Argument	M
>351	Identifier	M
>352	Argument	CblasNoTrans
>353	Identifier	CblasNoTrans
>354	Argument	CblasNoTrans
>355	Identifier	CblasNoTrans
>356	Argument	CblasRowMajor
>357	Identifier	CblasRowMajor
>358	Callee	CBLAS_GEMM
>359	Identifier	CBLAS_GEMM
>360	UnaryExpression	 
>361	Identifier	j
>362	IncDec	++
>363	Condition	 
>364	RelationalExpression	j < nbloops
>365	Identifier	nbloops
>366	Identifier	j
>367	ForInit	 
>368	IdentifierDeclStatement	uint j = 0 ;
>369	IdentifierDecl	j = 0
>370	AssignmentExpr	j = 0
>371	PrimaryExpression	0
>372	Identifier	j
>373	Identifier	j
>374	IdentifierDeclType	uint
>375	ExpressionStatement	 
>376	CallExpression	timer . start ( )
>377	ArgumentList	 
>378	Callee	timer . start
>379	MemberAccess	timer . start
>380	Identifier	start
>381	Identifier	timer
>382	UnaryExpression	 
>383	Identifier	k
>384	IncDec	++
>385	Condition	 
>386	RelationalExpression	k < nbtries
>387	Identifier	nbtries
>388	Identifier	k
>389	ForInit	 
>390	IdentifierDeclStatement	uint k = 0 ;
>391	IdentifierDecl	k = 0
>392	AssignmentExpr	k = 0
>393	PrimaryExpression	0
>394	Identifier	k
>395	Identifier	k
>396	IdentifierDeclType	uint
>397	ExpressionStatement	 
>398	CallExpression	timer . reset ( )
>399	ArgumentList	 
>400	Callee	timer . reset
>401	MemberAccess	timer . reset
>402	Identifier	reset
>403	Identifier	timer
>404	Condition	 
>405	UnaryOp	! ( std 
>406	EqualityExpression	std 
>407	PrimaryExpression	\"auto\"
>408	CallExpression	std 
>409	ArgumentList	argv [ 1 ]
>410	Argument	argv [ 1 ]
>411	ArrayIndexing	argv [ 1 ]
>412	PrimaryExpression	1
>413	Identifier	argv
>414	Callee	std 
>415	Identifier	std 
>416	UnaryOperator	!
>417	ExpressionStatement	 
>418	AssignmentExpr	beta = 1
>419	PrimaryExpression	1
>420	Identifier	beta
>421	ExpressionStatement	 
>422	AssignmentExpr	alpha = 1
>423	PrimaryExpression	1
>424	Identifier	alpha
>425	IdentifierDeclStatement	 
>426	IdentifierDecl	timer
>427	Identifier	timer
>428	IdentifierDeclType	Eigen 
>429	ExpressionStatement	 
>430	AssignmentExpr	mc = MyMatrix 
>431	CallExpression	MyMatrix 
>432	ArgumentList	M
>433	Argument	N
>434	Identifier	N
>435	Argument	M
>436	Identifier	M
>437	Callee	MyMatrix 
>438	Identifier	MyMatrix 
>439	Identifier	mc
>440	ExpressionStatement	 
>441	AssignmentExpr	mb = MyMatrix 
>442	CallExpression	MyMatrix 
>443	ArgumentList	K
>444	Argument	N
>445	Identifier	N
>446	Argument	K
>447	Identifier	K
>448	Callee	MyMatrix 
>449	Identifier	MyMatrix 
>450	Identifier	mb
>451	ExpressionStatement	 
>452	AssignmentExpr	ma = MyMatrix 
>453	CallExpression	MyMatrix 
>454	ArgumentList	M
>455	Argument	K
>456	Identifier	K
>457	Argument	M
>458	Identifier	M
>459	Callee	MyMatrix 
>460	Identifier	MyMatrix 
>461	Identifier	ma
>462	IdentifierDeclStatement	 
>463	IdentifierDecl	mc ( M , N )
>464	Expression	M , N
>465	Identifier	N
>466	Identifier	M
>467	Identifier	mc
>468	IdentifierDeclType	MyMatrix
>469	IdentifierDecl	mb ( K , N )
>470	Expression	K , N
>471	Identifier	N
>472	Identifier	K
>473	Identifier	mb
>474	IdentifierDeclType	MyMatrix
>475	IdentifierDecl	ma ( M , K )
>476	Expression	M , K
>477	Identifier	K
>478	Identifier	M
>479	Identifier	ma
>480	IdentifierDeclType	MyMatrix
>481	IdentifierDeclStatement	 
>482	IdentifierDecl	beta
>483	Identifier	beta
>484	IdentifierDeclType	Scalar
>485	IdentifierDecl	alpha
>486	Identifier	alpha
>487	IdentifierDeclType	Scalar
>488	IfStatement	if ( ! ( std 
>489	ExpressionStatement	 
>490	ShiftExpression	std 
>491	ShiftExpression	M << \" x \" << N << \" x \" << K << \"\n\"
>492	ShiftExpression	\" x \" << N << \" x \" << K << \"\n\"
>493	ShiftExpression	N << \" x \" << K << \"\n\"
>494	ShiftExpression	\" x \" << K << \"\n\"
>495	ShiftExpression	K << \"\n\"
>496	PrimaryExpression	\"\n\"
>497	Identifier	K
>498	PrimaryExpression	\" x \"
>499	Identifier	N
>500	PrimaryExpression	\" x \"
>501	Identifier	M
>502	Identifier	std 
>503	Condition	 
>504	UnaryOp	! ( std 
>505	EqualityExpression	std 
>506	PrimaryExpression	\"auto\"
>507	CallExpression	std 
>508	ArgumentList	argv [ 1 ]
>509	Argument	argv [ 1 ]
>510	ArrayIndexing	argv [ 1 ]
>511	PrimaryExpression	1
>512	Identifier	argv
>513	Callee	std 
>514	Identifier	std 
>515	UnaryOperator	!
>516	IdentifierDeclStatement	 
>517	IdentifierDecl	nbmad = double ( M ) * double ( N ) * double ( K ) * double ( nbloops )
>518	AssignmentExpr	nbmad = double ( M ) * double ( N ) * double ( K ) * double ( nbloops )
>519	MultiplicativeExpression	double ( M ) * double ( N ) * double ( K ) * double ( nbloops )
>520	MultiplicativeExpression	double ( N ) * double ( K ) * double ( nbloops )
>521	MultiplicativeExpression	double ( K ) * double ( nbloops )
>522	CallExpression	double ( nbloops )
>523	ArgumentList	nbloops
>524	Argument	nbloops
>525	Identifier	nbloops
>526	Callee	double
>527	Identifier	double
>528	CallExpression	double ( K )
>529	ArgumentList	K
>530	Argument	K
>531	Identifier	K
>532	Callee	double
>533	Identifier	double
>534	CallExpression	double ( N )
>535	ArgumentList	N
>536	Argument	N
>537	Identifier	N
>538	Callee	double
>539	Identifier	double
>540	CallExpression	double ( M )
>541	ArgumentList	M
>542	Argument	M
>543	Identifier	M
>544	Callee	double
>545	Identifier	double
>546	Identifier	nbmad
>547	Identifier	nbmad
>548	IdentifierDeclType	double
>549	IfStatement	if ( argc == 2 )
>550	ElseStatement	else
>551	IfStatement	if ( ( argc == 3 ) && ( std 
>552	ElseStatement	else
>553	IfStatement	if ( argc == 4 )
>554	ElseStatement	else
>555	IfStatement	if ( argc == 6 )
>556	ElseStatement	else
>557	CompoundStatement	 
>558	ExpressionStatement	 
>559	CallExpression	exit ( 1 )
>560	ArgumentList	1
>561	Argument	1
>562	PrimaryExpression	1
>563	Callee	exit
>564	Identifier	exit
>565	ExpressionStatement	 
>566	ShiftExpression	std 
>567	PrimaryExpression	\"    check      check eigen product using cblas as a reference\n\"
>568	Identifier	std 
>569	ExpressionStatement	 
>570	ShiftExpression	std 
>571	PrimaryExpression	\"    M N K      sizes of the matrices
>572	Identifier	std 
>573	ExpressionStatement	 
>574	ShiftExpression	std 
>575	PrimaryExpression	\"    nbtries    number of times the loop is benched (return the best try)\n\"
>576	Identifier	std 
>577	ExpressionStatement	 
>578	ShiftExpression	std 
>579	PrimaryExpression	\"    nbloops    number of times the GEMM routines is executed\n\"
>580	Identifier	std 
>581	ExpressionStatement	 
>582	ShiftExpression	std 
>583	PrimaryExpression	\"    auto       automatically set the number of repetitions and tries\n\"
>584	Identifier	std 
>585	ExpressionStatement	 
>586	ShiftExpression	std 
>587	PrimaryExpression	\"    size       unique size of the 2 matrices (integer)\n\"
>588	Identifier	std 
>589	ExpressionStatement	 
>590	ShiftExpression	std 
>591	PrimaryExpression	\"Options
>592	Identifier	std 
>593	ExpressionStatement	 
>594	ShiftExpression	std 
>595	ShiftExpression	\"Usage
>596	ShiftExpression	argv [ 0 ] << \" check\n\"
>597	PrimaryExpression	\" check\n\"
>598	ArrayIndexing	argv [ 0 ]
>599	PrimaryExpression	0
>600	Identifier	argv
>601	PrimaryExpression	\"Usage
>602	Identifier	std 
>603	ExpressionStatement	 
>604	ShiftExpression	std 
>605	ShiftExpression	\"Usage
>606	ShiftExpression	argv [ 0 ] << \" M N K nbloops nbtries\n\"
>607	PrimaryExpression	\" M N K nbloops nbtries\n\"
>608	ArrayIndexing	argv [ 0 ]
>609	PrimaryExpression	0
>610	Identifier	argv
>611	PrimaryExpression	\"Usage
>612	Identifier	std 
>613	ExpressionStatement	 
>614	ShiftExpression	std 
>615	ShiftExpression	\"Usage
>616	ShiftExpression	argv [ 0 ] << \" size nbloops nbtries\n\"
>617	PrimaryExpression	\" size nbloops nbtries\n\"
>618	ArrayIndexing	argv [ 0 ]
>619	PrimaryExpression	0
>620	Identifier	argv
>621	PrimaryExpression	\"Usage
>622	Identifier	std 
>623	ExpressionStatement	 
>624	ShiftExpression	std 
>625	ShiftExpression	\"Usage
>626	ShiftExpression	argv [ 0 ] << \" auto size\n\"
>627	PrimaryExpression	\" auto size\n\"
>628	ArrayIndexing	argv [ 0 ]
>629	PrimaryExpression	0
>630	Identifier	argv
>631	PrimaryExpression	\"Usage
>632	Identifier	std 
>633	ExpressionStatement	 
>634	ShiftExpression	std 
>635	ShiftExpression	\"Usage
>636	ShiftExpression	argv [ 0 ] << \" size  \n\"
>637	PrimaryExpression	\" size  \n\"
>638	ArrayIndexing	argv [ 0 ]
>639	PrimaryExpression	0
>640	Identifier	argv
>641	PrimaryExpression	\"Usage
>642	Identifier	std 
>643	CompoundStatement	 
>644	ExpressionStatement	 
>645	AssignmentExpr	nbtries = atoi ( argv [ 5 ] )
>646	CallExpression	atoi ( argv [ 5 ] )
>647	ArgumentList	argv [ 5 ]
>648	Argument	argv [ 5 ]
>649	ArrayIndexing	argv [ 5 ]
>650	PrimaryExpression	5
>651	Identifier	argv
>652	Callee	atoi
>653	Identifier	atoi
>654	Identifier	nbtries
>655	ExpressionStatement	 
>656	AssignmentExpr	nbloops = atoi ( argv [ 4 ] )
>657	CallExpression	atoi ( argv [ 4 ] )
>658	ArgumentList	argv [ 4 ]
>659	Argument	argv [ 4 ]
>660	ArrayIndexing	argv [ 4 ]
>661	PrimaryExpression	4
>662	Identifier	argv
>663	Callee	atoi
>664	Identifier	atoi
>665	Identifier	nbloops
>666	ExpressionStatement	 
>667	AssignmentExpr	K = atoi ( argv [ 3 ] )
>668	CallExpression	atoi ( argv [ 3 ] )
>669	ArgumentList	argv [ 3 ]
>670	Argument	argv [ 3 ]
>671	ArrayIndexing	argv [ 3 ]
>672	PrimaryExpression	3
>673	Identifier	argv
>674	Callee	atoi
>675	Identifier	atoi
>676	Identifier	K
>677	ExpressionStatement	 
>678	AssignmentExpr	N = atoi ( argv [ 2 ] )
>679	CallExpression	atoi ( argv [ 2 ] )
>680	ArgumentList	argv [ 2 ]
>681	Argument	argv [ 2 ]
>682	ArrayIndexing	argv [ 2 ]
>683	PrimaryExpression	2
>684	Identifier	argv
>685	Callee	atoi
>686	Identifier	atoi
>687	Identifier	N
>688	ExpressionStatement	 
>689	AssignmentExpr	M = atoi ( argv [ 1 ] )
>690	CallExpression	atoi ( argv [ 1 ] )
>691	ArgumentList	argv [ 1 ]
>692	Argument	argv [ 1 ]
>693	ArrayIndexing	argv [ 1 ]
>694	PrimaryExpression	1
>695	Identifier	argv
>696	Callee	atoi
>697	Identifier	atoi
>698	Identifier	M
>699	Condition	 
>700	EqualityExpression	argc == 6
>701	PrimaryExpression	6
>702	Identifier	argc
>703	CompoundStatement	 
>704	ExpressionStatement	 
>705	AssignmentExpr	nbtries = atoi ( argv [ 3 ] )
>706	CallExpression	atoi ( argv [ 3 ] )
>707	ArgumentList	argv [ 3 ]
>708	Argument	argv [ 3 ]
>709	ArrayIndexing	argv [ 3 ]
>710	PrimaryExpression	3
>711	Identifier	argv
>712	Callee	atoi
>713	Identifier	atoi
>714	Identifier	nbtries
>715	ExpressionStatement	 
>716	AssignmentExpr	nbloops = atoi ( argv [ 2 ] )
>717	CallExpression	atoi ( argv [ 2 ] )
>718	ArgumentList	argv [ 2 ]
>719	Argument	argv [ 2 ]
>720	ArrayIndexing	argv [ 2 ]
>721	PrimaryExpression	2
>722	Identifier	argv
>723	Callee	atoi
>724	Identifier	atoi
>725	Identifier	nbloops
>726	ExpressionStatement	 
>727	AssignmentExpr	M = N = K = atoi ( argv [ 1 ] )
>728	AssignmentExpr	N = K = atoi ( argv [ 1 ] )
>729	AssignmentExpr	K = atoi ( argv [ 1 ] )
>730	CallExpression	atoi ( argv [ 1 ] )
>731	ArgumentList	argv [ 1 ]
>732	Argument	argv [ 1 ]
>733	ArrayIndexing	argv [ 1 ]
>734	PrimaryExpression	1
>735	Identifier	argv
>736	Callee	atoi
>737	Identifier	atoi
>738	Identifier	K
>739	Identifier	N
>740	Identifier	M
>741	Condition	 
>742	EqualityExpression	argc == 4
>743	PrimaryExpression	4
>744	Identifier	argc
>745	CompoundStatement	 
>746	ExpressionStatement	 
>747	AssignmentExpr	nbtries = 6
>748	PrimaryExpression	6
>749	Identifier	nbtries
>750	IfStatement	if ( nbloops < 1 )
>751	ExpressionStatement	 
>752	AssignmentExpr	nbloops = 1
>753	PrimaryExpression	1
>754	Identifier	nbloops
>755	Condition	 
>756	RelationalExpression	nbloops < 1
>757	PrimaryExpression	1
>758	Identifier	nbloops
>759	ExpressionStatement	 
>760	AssignmentExpr	nbloops = 1000000000 / ( M * M * M )
>761	MultiplicativeExpression	1000000000 / ( M * M * M )
>762	MultiplicativeExpression	M * M * M
>763	MultiplicativeExpression	M * M
>764	Identifier	M
>765	Identifier	M
>766	Identifier	M
>767	PrimaryExpression	1000000000
>768	Identifier	nbloops
>769	ExpressionStatement	 
>770	AssignmentExpr	M = N = K = atoi ( argv [ 2 ] )
>771	AssignmentExpr	N = K = atoi ( argv [ 2 ] )
>772	AssignmentExpr	K = atoi ( argv [ 2 ] )
>773	CallExpression	atoi ( argv [ 2 ] )
>774	ArgumentList	argv [ 2 ]
>775	Argument	argv [ 2 ]
>776	ArrayIndexing	argv [ 2 ]
>777	PrimaryExpression	2
>778	Identifier	argv
>779	Callee	atoi
>780	Identifier	atoi
>781	Identifier	K
>782	Identifier	N
>783	Identifier	M
>784	Condition	 
>785	AndExpression	( argc == 3 ) && ( std 
>786	EqualityExpression	std 
>787	PrimaryExpression	\"auto\"
>788	CallExpression	std 
>789	ArgumentList	argv [ 1 ]
>790	Argument	argv [ 1 ]
>791	ArrayIndexing	argv [ 1 ]
>792	PrimaryExpression	1
>793	Identifier	argv
>794	Callee	std 
>795	Identifier	std 
>796	EqualityExpression	argc == 3
>797	PrimaryExpression	3
>798	Identifier	argc
>799	CompoundStatement	 
>800	IfStatement	if ( std 
>801	ElseStatement	else
>802	ExpressionStatement	 
>803	AssignmentExpr	M = N = K = atoi ( argv [ 1 ] )
>804	AssignmentExpr	N = K = atoi ( argv [ 1 ] )
>805	AssignmentExpr	K = atoi ( argv [ 1 ] )
>806	CallExpression	atoi ( argv [ 1 ] )
>807	ArgumentList	argv [ 1 ]
>808	Argument	argv [ 1 ]
>809	ArrayIndexing	argv [ 1 ]
>810	PrimaryExpression	1
>811	Identifier	argv
>812	Callee	atoi
>813	Identifier	atoi
>814	Identifier	K
>815	Identifier	N
>816	Identifier	M
>817	ExpressionStatement	 
>818	CallExpression	check_product ( )
>819	ArgumentList	 
>820	Callee	check_product
>821	Identifier	check_product
>822	Condition	 
>823	EqualityExpression	std 
>824	PrimaryExpression	\"check\"
>825	CallExpression	std 
>826	ArgumentList	argv [ 1 ]
>827	Argument	argv [ 1 ]
>828	ArrayIndexing	argv [ 1 ]
>829	PrimaryExpression	1
>830	Identifier	argv
>831	Callee	std 
>832	Identifier	std 
>833	Condition	 
>834	EqualityExpression	argc == 2
>835	PrimaryExpression	2
>836	Identifier	argc
>837	IdentifierDeclStatement	 
>838	IdentifierDecl	K
>839	Identifier	K
>840	IdentifierDeclType	int
>841	IdentifierDecl	N
>842	Identifier	N
>843	IdentifierDeclType	int
>844	IdentifierDecl	M
>845	Identifier	M
>846	IdentifierDeclType	int
>847	IdentifierDecl	nbloops = 1
>848	AssignmentExpr	nbloops = 1
>849	PrimaryExpression	1
>850	Identifier	nbloops
>851	Identifier	nbloops
>852	IdentifierDeclType	int
>853	IdentifierDecl	nbtries = 1
>854	AssignmentExpr	nbtries = 1
>855	PrimaryExpression	1
>856	Identifier	nbtries
>857	Identifier	nbtries
>858	IdentifierDeclType	int
>859	CompoundStatement	 
>860	ExpressionStatement	 
>861	Statement	 
>862	Statement	 
>863	Statement	 
>864	Statement	 
>865	Statement	 
>866	Statement	 
>867	Statement	 
>868	Statement	 
>869	Statement	 
>870	Statement	 
>871	Statement	 
>872	Statement	 
>873	Statement	 
>874	Statement	 
>875	Statement	 
>876	IdentifierDeclStatement	 
>877	IdentifierDecl	aux
>878	Identifier	aux
>879	IdentifierDeclType	int
>911	FunctionDef	bench_eigengemm (MyMatrix & mc , const MyMatrix & ma , const MyMatrix & mb , int nbloops)
>912	ParameterList	MyMatrix & mc , const MyMatrix & ma , const MyMatrix & mb , int nbloops
>913	Parameter	 
>914	Identifier	nbloops
>915	ParameterType	int
>916	Parameter	 
>917	Identifier	mb
>918	ParameterType	const MyMatrix &
>919	Parameter	 
>920	Identifier	ma
>921	ParameterType	const MyMatrix &
>922	Parameter	 
>923	Identifier	mc
>924	ParameterType	MyMatrix &
>925	ReturnType	void
>926	CompoundStatement	 
>927	ForStatement	for ( uint j = 0 ; j < nbloops ; ++ j )
>928	ExpressionStatement	 
>929	AssignmentExpr	mc . noalias ( ) += ma * mb
>930	MultiplicativeExpression	ma * mb
>931	Identifier	mb
>932	Identifier	ma
>933	CallExpression	mc . noalias ( )
>934	ArgumentList	 
>935	Callee	mc . noalias
>936	MemberAccess	mc . noalias
>937	Identifier	noalias
>938	Identifier	mc
>939	UnaryExpression	 
>940	Identifier	j
>941	IncDec	++
>942	Condition	 
>943	RelationalExpression	j < nbloops
>944	Identifier	nbloops
>945	Identifier	j
>946	ForInit	 
>947	IdentifierDeclStatement	uint j = 0 ;
>948	IdentifierDecl	j = 0
>949	AssignmentExpr	j = 0
>950	PrimaryExpression	0
>951	Identifier	j
>952	Identifier	j
>953	IdentifierDeclType	uint
>963	FunctionDef	check_product (int M , int N , int K)
>964	ParameterList	int M , int N , int K
>965	Parameter	 
>966	Identifier	K
>967	ParameterType	int
>968	Parameter	 
>969	Identifier	N
>970	ParameterType	int
>971	Parameter	 
>972	Identifier	M
>973	ParameterType	int
>974	ReturnType	void
>975	CompoundStatement	 
>976	ExpressionStatement	 
>977	CallExpression	MYVERIFY ( meigen . isApprox ( mref , eps ) , \". * T\" )
>978	ArgumentList	meigen . isApprox ( mref , eps )
>979	Argument	\". * T\"
>980	PrimaryExpression	\". * T\"
>981	Argument	meigen . isApprox ( mref , eps )
>982	CallExpression	meigen . isApprox ( mref , eps )
>983	ArgumentList	mref
>984	Argument	eps
>985	Identifier	eps
>986	Argument	mref
>987	Identifier	mref
>988	Callee	meigen . isApprox
>989	MemberAccess	meigen . isApprox
>990	Identifier	isApprox
>991	Identifier	meigen
>992	Callee	MYVERIFY
>993	Identifier	MYVERIFY
>994	ExpressionStatement	 
>995	AssignmentExpr	meigen += ma * mbT . transpose ( )
>996	MultiplicativeExpression	ma * mbT . transpose ( )
>997	CallExpression	mbT . transpose ( )
>998	ArgumentList	 
>999	Callee	mbT . transpose
>1000	MemberAccess	mbT . transpose
>1001	Identifier	transpose
>1002	Identifier	mbT
>1003	Identifier	ma
>1004	Identifier	meigen
>1005	ExpressionStatement	 
>1006	CallExpression	CBLAS_GEMM ( CblasColMajor , CblasNoTrans , CblasTrans , M , N , K , 1 , ma . data ( ) , M , mbT . data ( ) , N , \
>1007	ArgumentList	CblasColMajor
>1008	Argument	M
>1009	Identifier	M
>1010	Argument	mref . data ( )
>1011	CallExpression	mref . data ( )
>1012	ArgumentList	 
>1013	Callee	mref . data
>1014	MemberAccess	mref . data
>1015	Identifier	data
>1016	Identifier	mref
>1017	Argument	1
>1018	PrimaryExpression	1
>1019	Argument	N
>1020	Identifier	N
>1021	Argument	mbT . data ( )
>1022	CallExpression	mbT . data ( )
>1023	ArgumentList	 
>1024	Callee	mbT . data
>1025	MemberAccess	mbT . data
>1026	Identifier	data
>1027	Identifier	mbT
>1028	Argument	M
>1029	Identifier	M
>1030	Argument	ma . data ( )
>1031	CallExpression	ma . data ( )
>1032	ArgumentList	 
>1033	Callee	ma . data
>1034	MemberAccess	ma . data
>1035	Identifier	data
>1036	Identifier	ma
>1037	Argument	1
>1038	PrimaryExpression	1
>1039	Argument	K
>1040	Identifier	K
>1041	Argument	N
>1042	Identifier	N
>1043	Argument	M
>1044	Identifier	M
>1045	Argument	CblasTrans
>1046	Identifier	CblasTrans
>1047	Argument	CblasNoTrans
>1048	Identifier	CblasNoTrans
>1049	Argument	CblasColMajor
>1050	Identifier	CblasColMajor
>1051	Callee	CBLAS_GEMM
>1052	Identifier	CBLAS_GEMM
>1053	ExpressionStatement	 
>1054	AssignmentExpr	meigen = mref = mc
>1055	AssignmentExpr	mref = mc
>1056	Identifier	mc
>1057	Identifier	mref
>1058	Identifier	meigen
>1059	ExpressionStatement	 
>1060	CallExpression	MYVERIFY ( meigen . isApprox ( mref , eps ) , \"T * T\" )
>1061	ArgumentList	meigen . isApprox ( mref , eps )
>1062	Argument	\"T * T\"
>1063	PrimaryExpression	\"T * T\"
>1064	Argument	meigen . isApprox ( mref , eps )
>1065	CallExpression	meigen . isApprox ( mref , eps )
>1066	ArgumentList	mref
>1067	Argument	eps
>1068	Identifier	eps
>1069	Argument	mref
>1070	Identifier	mref
>1071	Callee	meigen . isApprox
>1072	MemberAccess	meigen . isApprox
>1073	Identifier	isApprox
>1074	Identifier	meigen
>1075	Callee	MYVERIFY
>1076	Identifier	MYVERIFY
>1077	ExpressionStatement	 
>1078	AssignmentExpr	meigen += ( maT . transpose ( ) ) * ( mbT . transpose ( ) )
>1079	MultiplicativeExpression	( maT . transpose ( ) ) * ( mbT . transpose ( ) )
>1080	CallExpression	mbT . transpose ( )
>1081	ArgumentList	 
>1082	Callee	mbT . transpose
>1083	MemberAccess	mbT . transpose
>1084	Identifier	transpose
>1085	Identifier	mbT
>1086	CallExpression	maT . transpose ( )
>1087	ArgumentList	 
>1088	Callee	maT . transpose
>1089	MemberAccess	maT . transpose
>1090	Identifier	transpose
>1091	Identifier	maT
>1092	Identifier	meigen
>1093	ExpressionStatement	 
>1094	CallExpression	CBLAS_GEMM ( CblasColMajor , CblasTrans , CblasTrans , M , N , K , 1 , maT . data ( ) , K , mbT . data ( ) , N , \
>1095	ArgumentList	CblasColMajor
>1096	Argument	M
>1097	Identifier	M
>1098	Argument	mref . data ( )
>1099	CallExpression	mref . data ( )
>1100	ArgumentList	 
>1101	Callee	mref . data
>1102	MemberAccess	mref . data
>1103	Identifier	data
>1104	Identifier	mref
>1105	Argument	1
>1106	PrimaryExpression	1
>1107	Argument	N
>1108	Identifier	N
>1109	Argument	mbT . data ( )
>1110	CallExpression	mbT . data ( )
>1111	ArgumentList	 
>1112	Callee	mbT . data
>1113	MemberAccess	mbT . data
>1114	Identifier	data
>1115	Identifier	mbT
>1116	Argument	K
>1117	Identifier	K
>1118	Argument	maT . data ( )
>1119	CallExpression	maT . data ( )
>1120	ArgumentList	 
>1121	Callee	maT . data
>1122	MemberAccess	maT . data
>1123	Identifier	data
>1124	Identifier	maT
>1125	Argument	1
>1126	PrimaryExpression	1
>1127	Argument	K
>1128	Identifier	K
>1129	Argument	N
>1130	Identifier	N
>1131	Argument	M
>1132	Identifier	M
>1133	Argument	CblasTrans
>1134	Identifier	CblasTrans
>1135	Argument	CblasTrans
>1136	Identifier	CblasTrans
>1137	Argument	CblasColMajor
>1138	Identifier	CblasColMajor
>1139	Callee	CBLAS_GEMM
>1140	Identifier	CBLAS_GEMM
>1141	ExpressionStatement	 
>1142	AssignmentExpr	meigen = mref = mc
>1143	AssignmentExpr	mref = mc
>1144	Identifier	mc
>1145	Identifier	mref
>1146	Identifier	meigen
>1147	ExpressionStatement	 
>1148	CallExpression	MYVERIFY ( meigen . isApprox ( mref , eps ) , \"T * .\" )
>1149	ArgumentList	meigen . isApprox ( mref , eps )
>1150	Argument	\"T * .\"
>1151	PrimaryExpression	\"T * .\"
>1152	Argument	meigen . isApprox ( mref , eps )
>1153	CallExpression	meigen . isApprox ( mref , eps )
>1154	ArgumentList	mref
>1155	Argument	eps
>1156	Identifier	eps
>1157	Argument	mref
>1158	Identifier	mref
>1159	Callee	meigen . isApprox
>1160	MemberAccess	meigen . isApprox
>1161	Identifier	isApprox
>1162	Identifier	meigen
>1163	Callee	MYVERIFY
>1164	Identifier	MYVERIFY
>1165	ExpressionStatement	 
>1166	AssignmentExpr	meigen += maT . transpose ( ) * mb
>1167	MultiplicativeExpression	maT . transpose ( ) * mb
>1168	Identifier	mb
>1169	CallExpression	maT . transpose ( )
>1170	ArgumentList	 
>1171	Callee	maT . transpose
>1172	MemberAccess	maT . transpose
>1173	Identifier	transpose
>1174	Identifier	maT
>1175	Identifier	meigen
>1176	ExpressionStatement	 
>1177	CallExpression	CBLAS_GEMM ( CblasColMajor , CblasTrans , CblasNoTrans , M , N , K , 1 , maT . data ( ) , K , mb . data ( ) , K , \
>1178	ArgumentList	CblasColMajor
>1179	Argument	M
>1180	Identifier	M
>1181	Argument	mref . data ( )
>1182	CallExpression	mref . data ( )
>1183	ArgumentList	 
>1184	Callee	mref . data
>1185	MemberAccess	mref . data
>1186	Identifier	data
>1187	Identifier	mref
>1188	Argument	1
>1189	PrimaryExpression	1
>1190	Argument	K
>1191	Identifier	K
>1192	Argument	mb . data ( )
>1193	CallExpression	mb . data ( )
>1194	ArgumentList	 
>1195	Callee	mb . data
>1196	MemberAccess	mb . data
>1197	Identifier	data
>1198	Identifier	mb
>1199	Argument	K
>1200	Identifier	K
>1201	Argument	maT . data ( )
>1202	CallExpression	maT . data ( )
>1203	ArgumentList	 
>1204	Callee	maT . data
>1205	MemberAccess	maT . data
>1206	Identifier	data
>1207	Identifier	maT
>1208	Argument	1
>1209	PrimaryExpression	1
>1210	Argument	K
>1211	Identifier	K
>1212	Argument	N
>1213	Identifier	N
>1214	Argument	M
>1215	Identifier	M
>1216	Argument	CblasNoTrans
>1217	Identifier	CblasNoTrans
>1218	Argument	CblasTrans
>1219	Identifier	CblasTrans
>1220	Argument	CblasColMajor
>1221	Identifier	CblasColMajor
>1222	Callee	CBLAS_GEMM
>1223	Identifier	CBLAS_GEMM
>1224	ExpressionStatement	 
>1225	AssignmentExpr	meigen = mref = mc
>1226	AssignmentExpr	mref = mc
>1227	Identifier	mc
>1228	Identifier	mref
>1229	Identifier	meigen
>1230	ExpressionStatement	 
>1231	CallExpression	MYVERIFY ( meigen . isApprox ( mref , eps ) , \". * .\" )
>1232	ArgumentList	meigen . isApprox ( mref , eps )
>1233	Argument	\". * .\"
>1234	PrimaryExpression	\". * .\"
>1235	Argument	meigen . isApprox ( mref , eps )
>1236	CallExpression	meigen . isApprox ( mref , eps )
>1237	ArgumentList	mref
>1238	Argument	eps
>1239	Identifier	eps
>1240	Argument	mref
>1241	Identifier	mref
>1242	Callee	meigen . isApprox
>1243	MemberAccess	meigen . isApprox
>1244	Identifier	isApprox
>1245	Identifier	meigen
>1246	Callee	MYVERIFY
>1247	Identifier	MYVERIFY
>1248	ExpressionStatement	 
>1249	AssignmentExpr	meigen += ma * mb
>1250	MultiplicativeExpression	ma * mb
>1251	Identifier	mb
>1252	Identifier	ma
>1253	Identifier	meigen
>1254	ExpressionStatement	 
>1255	CallExpression	CBLAS_GEMM ( CblasColMajor , CblasNoTrans , CblasNoTrans , M , N , K , 1 , ma . data ( ) , M , mb . data ( ) , K , \
>1256	ArgumentList	CblasColMajor
>1257	Argument	M
>1258	Identifier	M
>1259	Argument	mref . data ( )
>1260	CallExpression	mref . data ( )
>1261	ArgumentList	 
>1262	Callee	mref . data
>1263	MemberAccess	mref . data
>1264	Identifier	data
>1265	Identifier	mref
>1266	Argument	1
>1267	PrimaryExpression	1
>1268	Argument	K
>1269	Identifier	K
>1270	Argument	mb . data ( )
>1271	CallExpression	mb . data ( )
>1272	ArgumentList	 
>1273	Callee	mb . data
>1274	MemberAccess	mb . data
>1275	Identifier	data
>1276	Identifier	mb
>1277	Argument	M
>1278	Identifier	M
>1279	Argument	ma . data ( )
>1280	CallExpression	ma . data ( )
>1281	ArgumentList	 
>1282	Callee	ma . data
>1283	MemberAccess	ma . data
>1284	Identifier	data
>1285	Identifier	ma
>1286	Argument	1
>1287	PrimaryExpression	1
>1288	Argument	K
>1289	Identifier	K
>1290	Argument	N
>1291	Identifier	N
>1292	Argument	M
>1293	Identifier	M
>1294	Argument	CblasNoTrans
>1295	Identifier	CblasNoTrans
>1296	Argument	CblasNoTrans
>1297	Identifier	CblasNoTrans
>1298	Argument	CblasColMajor
>1299	Identifier	CblasColMajor
>1300	Callee	CBLAS_GEMM
>1301	Identifier	CBLAS_GEMM
>1302	ExpressionStatement	 
>1303	AssignmentExpr	meigen = mref = mc
>1304	AssignmentExpr	mref = mc
>1305	Identifier	mc
>1306	Identifier	mref
>1307	Identifier	meigen
>1308	IdentifierDeclStatement	 
>1309	IdentifierDecl	eps = 1e-4
>1310	AssignmentExpr	eps = 1e-4
>1311	PrimaryExpression	1e-4
>1312	Identifier	eps
>1313	Identifier	eps
>1314	IdentifierDeclType	MyMatrix 
>1315	ExpressionStatement	 
>1316	AssignmentExpr	mc = MyMatrix 
>1317	CallExpression	MyMatrix 
>1318	ArgumentList	M
>1319	Argument	N
>1320	Identifier	N
>1321	Argument	M
>1322	Identifier	M
>1323	Callee	MyMatrix 
>1324	Identifier	MyMatrix 
>1325	Identifier	mc
>1326	ExpressionStatement	 
>1327	AssignmentExpr	mbT = mb . transpose ( )
>1328	CallExpression	mb . transpose ( )
>1329	ArgumentList	 
>1330	Callee	mb . transpose
>1331	MemberAccess	mb . transpose
>1332	Identifier	transpose
>1333	Identifier	mb
>1334	Identifier	mbT
>1335	ExpressionStatement	 
>1336	AssignmentExpr	maT = ma . transpose ( )
>1337	CallExpression	ma . transpose ( )
>1338	ArgumentList	 
>1339	Callee	ma . transpose
>1340	MemberAccess	ma . transpose
>1341	Identifier	transpose
>1342	Identifier	ma
>1343	Identifier	maT
>1344	ExpressionStatement	 
>1345	AssignmentExpr	mb = MyMatrix 
>1346	CallExpression	MyMatrix 
>1347	ArgumentList	K
>1348	Argument	N
>1349	Identifier	N
>1350	Argument	K
>1351	Identifier	K
>1352	Callee	MyMatrix 
>1353	Identifier	MyMatrix 
>1354	Identifier	mb
>1355	ExpressionStatement	 
>1356	AssignmentExpr	ma = MyMatrix 
>1357	CallExpression	MyMatrix 
>1358	ArgumentList	M
>1359	Argument	K
>1360	Identifier	K
>1361	Argument	M
>1362	Identifier	M
>1363	Callee	MyMatrix 
>1364	Identifier	MyMatrix 
>1365	Identifier	ma
>1366	IdentifierDeclStatement	 
>1367	IdentifierDecl	mref ( M , N )
>1368	Expression	M , N
>1369	Identifier	N
>1370	Identifier	M
>1371	Identifier	mref
>1372	IdentifierDeclType	MyMatrix
>1373	IdentifierDecl	meigen ( M , N )
>1374	Expression	M , N
>1375	Identifier	N
>1376	Identifier	M
>1377	Identifier	meigen
>1378	IdentifierDeclType	MyMatrix
>1379	IdentifierDecl	mbT ( N , K )
>1380	Expression	N , K
>1381	Identifier	K
>1382	Identifier	N
>1383	Identifier	mbT
>1384	IdentifierDeclType	MyMatrix
>1385	IdentifierDecl	maT ( K , M )
>1386	Expression	K , M
>1387	Identifier	M
>1388	Identifier	K
>1389	Identifier	maT
>1390	IdentifierDeclType	MyMatrix
>1391	IdentifierDecl	mc ( M , N )
>1392	Expression	M , N
>1393	Identifier	N
>1394	Identifier	M
>1395	Identifier	mc
>1396	IdentifierDeclType	MyMatrix
>1397	IdentifierDecl	mb ( K , N )
>1398	Expression	K , N
>1399	Identifier	N
>1400	Identifier	K
>1401	Identifier	mb
>1402	IdentifierDeclType	MyMatrix
>1403	IdentifierDecl	ma ( M , K )
>1404	Expression	M , K
>1405	Identifier	K
>1406	Identifier	M
>1407	Identifier	ma
>1408	IdentifierDeclType	MyMatrix
>1437	FunctionDef	check_product ()
>1438	ParameterList	 
>1439	ReturnType	void
>1440	CompoundStatement	 
>1441	ForStatement	for ( uint i = 0 ; i < 1000 ; ++ i )
>1442	CompoundStatement	 
>1443	ExpressionStatement	 
>1444	CallExpression	check_product ( M , N , K )
>1445	ArgumentList	M
>1446	Argument	K
>1447	Identifier	K
>1448	Argument	N
>1449	Identifier	N
>1450	Argument	M
>1451	Identifier	M
>1452	Callee	check_product
>1453	Identifier	check_product
>1454	ExpressionStatement	 
>1455	ShiftExpression	std 
>1456	ShiftExpression	M << \" x \" << N << \" x \" << K << \"\n\"
>1457	ShiftExpression	\" x \" << N << \" x \" << K << \"\n\"
>1458	ShiftExpression	N << \" x \" << K << \"\n\"
>1459	ShiftExpression	\" x \" << K << \"\n\"
>1460	ShiftExpression	K << \"\n\"
>1461	PrimaryExpression	\"\n\"
>1462	Identifier	K
>1463	PrimaryExpression	\" x \"
>1464	Identifier	N
>1465	PrimaryExpression	\" x \"
>1466	Identifier	M
>1467	Identifier	std 
>1468	ExpressionStatement	 
>1469	AssignmentExpr	M = ( 0 + M ) * 1
>1470	MultiplicativeExpression	( 0 + M ) * 1
>1471	PrimaryExpression	1
>1472	AdditiveExpression	0 + M
>1473	Identifier	M
>1474	PrimaryExpression	0
>1475	Identifier	M
>1476	ExpressionStatement	 
>1477	AssignmentExpr	K = internal 
>1478	RelationalExpression	internal 
>1479	RelationalExpression	int > ( 1 , 768 )
>1480	Expression	1 , 768
>1481	PrimaryExpression	768
>1482	PrimaryExpression	1
>1483	Identifier	int
>1484	Identifier	internal 
>1485	Identifier	K
>1486	ExpressionStatement	 
>1487	AssignmentExpr	N = internal 
>1488	RelationalExpression	internal 
>1489	RelationalExpression	int > ( 1 , 768 )
>1490	Expression	1 , 768
>1491	PrimaryExpression	768
>1492	PrimaryExpression	1
>1493	Identifier	int
>1494	Identifier	internal 
>1495	Identifier	N
>1496	ExpressionStatement	 
>1497	AssignmentExpr	M = internal 
>1498	RelationalExpression	internal 
>1499	RelationalExpression	int > ( 1 , 64 )
>1500	Expression	1 , 64
>1501	PrimaryExpression	64
>1502	PrimaryExpression	1
>1503	Identifier	int
>1504	Identifier	internal 
>1505	Identifier	M
>1506	UnaryExpression	 
>1507	Identifier	i
>1508	IncDec	++
>1509	Condition	 
>1510	RelationalExpression	i < 1000
>1511	PrimaryExpression	1000
>1512	Identifier	i
>1513	ForInit	 
>1514	IdentifierDeclStatement	uint i = 0 ;
>1515	IdentifierDecl	i = 0
>1516	AssignmentExpr	i = 0
>1517	PrimaryExpression	0
>1518	Identifier	i
>1519	Identifier	i
>1520	IdentifierDeclType	uint
>1521	IdentifierDeclStatement	 
>1522	IdentifierDecl	K
>1523	Identifier	K
>1524	IdentifierDeclType	int
>1525	IdentifierDecl	N
>1526	Identifier	N
>1527	IdentifierDeclType	int
>1528	IdentifierDecl	M
>1529	Identifier	M
>1530	IdentifierDeclType	int
<15=24,23,16
<16=20,17
<17=19,18
<20=22,21
<24=859,837,549,516,488,481,462,451,440,429,425,421,417,217,206,195,184,49,38,27,25
<25=26
<27=28
<28=37,29
<29=36,30
<30=32,31
<32=34,33
<34=35
<38=39
<39=48,40
<40=47,41
<41=43,42
<43=45,44
<45=46
<49=177,133,50
<50=120,87,51
<51=52
<52=53
<53=86,54
<54=85,55
<55=84,56
<56=78,57
<57=77,58
<58=60,59
<60=76,61
<61=74,62
<62=63
<63=64
<64=73,65
<65=72,66
<66=68,67
<68=69
<69=71,70
<74=75
<78=80,79
<80=81
<81=83,82
<87=88
<88=119,89
<89=118,90
<90=112,91
<91=111,92
<92=94,93
<94=110,95
<95=108,96
<96=97
<97=98
<98=107,99
<99=106,100
<100=102,101
<102=103
<103=105,104
<108=109
<112=114,113
<114=115
<115=117,116
<120=121
<121=132,122
<122=124,123
<124=130,125
<125=126
<126=127
<127=129,128
<130=131
<133=169,165,162,134
<134=155,142,135
<135=136
<136=138,137
<138=139
<139=141,140
<142=143
<143=153,144
<144=151,149,147,145
<145=146
<147=148
<149=150
<151=152
<153=154
<155=156
<156=158,157
<158=159
<159=161,160
<162=164,163
<165=166
<166=168,167
<169=170
<170=171
<171=176,175,172
<172=174,173
<177=178
<178=180,179
<180=181
<181=183,182
<184=185
<185=194,186
<186=192,187
<187=190,188
<188=189
<190=191
<192=193
<195=196
<196=205,197
<197=203,198
<198=201,199
<199=200
<201=202
<203=204
<206=207
<207=216,208
<208=214,209
<209=212,210
<210=211
<212=213
<214=215
<217=404,218
<218=397,302,219
<219=289,256,220
<220=221
<221=222
<222=255,223
<223=254,224
<224=253,225
<225=247,226
<226=246,227
<227=229,228
<229=245,230
<230=243,231
<231=232
<232=233
<233=242,234
<234=241,235
<235=237,236
<237=238
<238=240,239
<243=244
<247=249,248
<249=250
<250=252,251
<256=257
<257=288,258
<258=287,259
<259=281,260
<260=280,261
<261=263,262
<263=279,264
<264=277,265
<265=266
<266=267
<267=276,268
<268=275,269
<269=271,270
<271=272
<272=274,273
<277=278
<281=283,282
<283=284
<284=286,285
<289=290
<290=301,291
<291=293,292
<293=299,294
<294=295
<295=296
<296=298,297
<299=300
<302=389,385,382,303
<303=375,311,304
<304=305
<305=307,306
<307=308
<308=310,309
<311=367,363,360,312
<312=313
<313=358,314
<314=356,354,352,350,348,346,344,337,335,328,326,324,317,315
<315=316
<317=318
<318=320,319
<320=321
<321=323,322
<324=325
<326=327
<328=329
<329=331,330
<331=332
<332=334,333
<335=336
<337=338
<338=340,339
<340=341
<341=343,342
<344=345
<346=347
<348=349
<350=351
<352=353
<354=355
<356=357
<358=359
<360=362,361
<363=364
<364=366,365
<367=368
<368=369
<369=374,373,370
<370=372,371
<375=376
<376=378,377
<378=379
<379=381,380
<382=384,383
<385=386
<386=388,387
<389=390
<390=391
<391=396,395,392
<392=394,393
<397=398
<398=400,399
<400=401
<401=403,402
<404=405
<405=416,406
<406=408,407
<408=414,409
<409=410
<410=411
<411=413,412
<414=415
<417=418
<418=420,419
<421=422
<422=424,423
<425=426
<426=428,427
<429=430
<430=439,431
<431=437,432
<432=435,433
<433=434
<435=436
<437=438
<440=441
<441=450,442
<442=448,443
<443=446,444
<444=445
<446=447
<448=449
<451=452
<452=461,453
<453=459,454
<454=457,455
<455=456
<457=458
<459=460
<462=475,469,463
<463=468,467,464
<464=466,465
<469=474,473,470
<470=472,471
<475=480,479,476
<476=478,477
<481=485,482
<482=484,483
<485=487,486
<488=503,489
<489=490
<490=502,491
<491=501,492
<492=500,493
<493=499,494
<494=498,495
<495=497,496
<503=504
<504=515,505
<505=507,506
<507=513,508
<508=509
<509=510
<510=512,511
<513=514
<516=517
<517=548,547,518
<518=546,519
<519=540,520
<520=534,521
<521=528,522
<522=526,523
<523=524
<524=525
<526=527
<528=532,529
<529=530
<530=531
<532=533
<534=538,535
<535=536
<536=537
<538=539
<540=544,541
<541=542
<542=543
<544=545
<549=833,799,550
<550=551
<551=784,745,552
<552=553
<553=741,703,554
<554=555
<555=699,643,556
<556=557
<557=633,623,613,603,593,589,585,581,577,573,569,565,558
<558=559
<559=563,560
<560=561
<561=562
<563=564
<565=566
<566=568,567
<569=570
<570=572,571
<573=574
<574=576,575
<577=578
<578=580,579
<581=582
<582=584,583
<585=586
<586=588,587
<589=590
<590=592,591
<593=594
<594=602,595
<595=601,596
<596=598,597
<598=600,599
<603=604
<604=612,605
<605=611,606
<606=608,607
<608=610,609
<613=614
<614=622,615
<615=621,616
<616=618,617
<618=620,619
<623=624
<624=632,625
<625=631,626
<626=628,627
<628=630,629
<633=634
<634=642,635
<635=641,636
<636=638,637
<638=640,639
<643=688,677,666,655,644
<644=645
<645=654,646
<646=652,647
<647=648
<648=649
<649=651,650
<652=653
<655=656
<656=665,657
<657=663,658
<658=659
<659=660
<660=662,661
<663=664
<666=667
<667=676,668
<668=674,669
<669=670
<670=671
<671=673,672
<674=675
<677=678
<678=687,679
<679=685,680
<680=681
<681=682
<682=684,683
<685=686
<688=689
<689=698,690
<690=696,691
<691=692
<692=693
<693=695,694
<696=697
<699=700
<700=702,701
<703=726,715,704
<704=705
<705=714,706
<706=712,707
<707=708
<708=709
<709=711,710
<712=713
<715=716
<716=725,717
<717=723,718
<718=719
<719=720
<720=722,721
<723=724
<726=727
<727=740,728
<728=739,729
<729=738,730
<730=736,731
<731=732
<732=733
<733=735,734
<736=737
<741=742
<742=744,743
<745=769,759,750,746
<746=747
<747=749,748
<750=755,751
<751=752
<752=754,753
<755=756
<756=758,757
<759=760
<760=768,761
<761=767,762
<762=766,763
<763=765,764
<769=770
<770=783,771
<771=782,772
<772=781,773
<773=779,774
<774=775
<775=776
<776=778,777
<779=780
<784=785
<785=796,786
<786=788,787
<788=794,789
<789=790
<790=791
<791=793,792
<794=795
<796=798,797
<799=800
<800=822,817,801
<801=802
<802=803
<803=816,804
<804=815,805
<805=814,806
<806=812,807
<807=808
<808=809
<809=811,810
<812=813
<817=818
<818=820,819
<820=821
<822=823
<823=825,824
<825=831,826
<826=827
<827=828
<828=830,829
<831=832
<833=834
<834=836,835
<837=853,847,844,841,838
<838=840,839
<841=843,842
<844=846,845
<847=852,851,848
<848=850,849
<853=858,857,854
<854=856,855
<859=876,875,874,873,872,871,870,869,868,867,866,865,864,863,862,861,860
<876=877
<877=879,878
<911=926,925,912
<912=922,919,916,913
<913=915,914
<916=918,917
<919=921,920
<922=924,923
<926=927
<927=946,942,939,928
<928=929
<929=933,930
<930=932,931
<933=935,934
<935=936
<936=938,937
<939=941,940
<942=943
<943=945,944
<946=947
<947=948
<948=953,952,949
<949=951,950
<963=975,974,964
<964=971,968,965
<965=967,966
<968=970,969
<971=973,972
<975=1366,1355,1344,1335,1326,1315,1308,1302,1254,1248,1230,1224,1176,1165,1147,1141,1093,1077,1059,1053,1005,994,976
<976=977
<977=992,978
<978=981,979
<979=980
<981=982
<982=988,983
<983=986,984
<984=985
<986=987
<988=989
<989=991,990
<992=993
<994=995
<995=1004,996
<996=1003,997
<997=999,998
<999=1000
<1000=1002,1001
<1005=1006
<1006=1051,1007
<1007=1049,1047,1045,1043,1041,1039,1037,1030,1028,1021,1019,1017,1010,1008
<1008=1009
<1010=1011
<1011=1013,1012
<1013=1014
<1014=1016,1015
<1017=1018
<1019=1020
<1021=1022
<1022=1024,1023
<1024=1025
<1025=1027,1026
<1028=1029
<1030=1031
<1031=1033,1032
<1033=1034
<1034=1036,1035
<1037=1038
<1039=1040
<1041=1042
<1043=1044
<1045=1046
<1047=1048
<1049=1050
<1051=1052
<1053=1054
<1054=1058,1055
<1055=1057,1056
<1059=1060
<1060=1075,1061
<1061=1064,1062
<1062=1063
<1064=1065
<1065=1071,1066
<1066=1069,1067
<1067=1068
<1069=1070
<1071=1072
<1072=1074,1073
<1075=1076
<1077=1078
<1078=1092,1079
<1079=1086,1080
<1080=1082,1081
<1082=1083
<1083=1085,1084
<1086=1088,1087
<1088=1089
<1089=1091,1090
<1093=1094
<1094=1139,1095
<1095=1137,1135,1133,1131,1129,1127,1125,1118,1116,1109,1107,1105,1098,1096
<1096=1097
<1098=1099
<1099=1101,1100
<1101=1102
<1102=1104,1103
<1105=1106
<1107=1108
<1109=1110
<1110=1112,1111
<1112=1113
<1113=1115,1114
<1116=1117
<1118=1119
<1119=1121,1120
<1121=1122
<1122=1124,1123
<1125=1126
<1127=1128
<1129=1130
<1131=1132
<1133=1134
<1135=1136
<1137=1138
<1139=1140
<1141=1142
<1142=1146,1143
<1143=1145,1144
<1147=1148
<1148=1163,1149
<1149=1152,1150
<1150=1151
<1152=1153
<1153=1159,1154
<1154=1157,1155
<1155=1156
<1157=1158
<1159=1160
<1160=1162,1161
<1163=1164
<1165=1166
<1166=1175,1167
<1167=1169,1168
<1169=1171,1170
<1171=1172
<1172=1174,1173
<1176=1177
<1177=1222,1178
<1178=1220,1218,1216,1214,1212,1210,1208,1201,1199,1192,1190,1188,1181,1179
<1179=1180
<1181=1182
<1182=1184,1183
<1184=1185
<1185=1187,1186
<1188=1189
<1190=1191
<1192=1193
<1193=1195,1194
<1195=1196
<1196=1198,1197
<1199=1200
<1201=1202
<1202=1204,1203
<1204=1205
<1205=1207,1206
<1208=1209
<1210=1211
<1212=1213
<1214=1215
<1216=1217
<1218=1219
<1220=1221
<1222=1223
<1224=1225
<1225=1229,1226
<1226=1228,1227
<1230=1231
<1231=1246,1232
<1232=1235,1233
<1233=1234
<1235=1236
<1236=1242,1237
<1237=1240,1238
<1238=1239
<1240=1241
<1242=1243
<1243=1245,1244
<1246=1247
<1248=1249
<1249=1253,1250
<1250=1252,1251
<1254=1255
<1255=1300,1256
<1256=1298,1296,1294,1292,1290,1288,1286,1279,1277,1270,1268,1266,1259,1257
<1257=1258
<1259=1260
<1260=1262,1261
<1262=1263
<1263=1265,1264
<1266=1267
<1268=1269
<1270=1271
<1271=1273,1272
<1273=1274
<1274=1276,1275
<1277=1278
<1279=1280
<1280=1282,1281
<1282=1283
<1283=1285,1284
<1286=1287
<1288=1289
<1290=1291
<1292=1293
<1294=1295
<1296=1297
<1298=1299
<1300=1301
<1302=1303
<1303=1307,1304
<1304=1306,1305
<1308=1309
<1309=1314,1313,1310
<1310=1312,1311
<1315=1316
<1316=1325,1317
<1317=1323,1318
<1318=1321,1319
<1319=1320
<1321=1322
<1323=1324
<1326=1327
<1327=1334,1328
<1328=1330,1329
<1330=1331
<1331=1333,1332
<1335=1336
<1336=1343,1337
<1337=1339,1338
<1339=1340
<1340=1342,1341
<1344=1345
<1345=1354,1346
<1346=1352,1347
<1347=1350,1348
<1348=1349
<1350=1351
<1352=1353
<1355=1356
<1356=1365,1357
<1357=1363,1358
<1358=1361,1359
<1359=1360
<1361=1362
<1363=1364
<1366=1403,1397,1391,1385,1379,1373,1367
<1367=1372,1371,1368
<1368=1370,1369
<1373=1378,1377,1374
<1374=1376,1375
<1379=1384,1383,1380
<1380=1382,1381
<1385=1390,1389,1386
<1386=1388,1387
<1391=1396,1395,1392
<1392=1394,1393
<1397=1402,1401,1398
<1398=1400,1399
<1403=1408,1407,1404
<1404=1406,1405
<1437=1440,1439,1438
<1440=1521,1441
<1441=1513,1509,1506,1442
<1442=1496,1486,1476,1468,1454,1443
<1443=1444
<1444=1452,1445
<1445=1450,1448,1446
<1446=1447
<1448=1449
<1450=1451
<1452=1453
<1454=1455
<1455=1467,1456
<1456=1466,1457
<1457=1465,1458
<1458=1464,1459
<1459=1463,1460
<1460=1462,1461
<1468=1469
<1469=1475,1470
<1470=1472,1471
<1472=1474,1473
<1476=1477
<1477=1485,1478
<1478=1484,1479
<1479=1483,1480
<1480=1482,1481
<1486=1487
<1487=1495,1488
<1488=1494,1489
<1489=1493,1490
<1490=1492,1491
<1496=1497
<1497=1505,1498
<1498=1504,1499
<1499=1503,1500
<1500=1502,1501
<1506=1508,1507
<1509=1510
<1510=1512,1511
<1513=1514
<1514=1515
<1515=1520,1519,1516
<1516=1518,1517
<1521=1528,1525,1522
<1522=1524,1523
<1525=1527,1526
<1528=1530,1529
