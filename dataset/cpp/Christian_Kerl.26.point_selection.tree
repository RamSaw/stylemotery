>3	FunctionDef	PointSelection 
>4	ParameterList	const PointSelectionPredicate & predicate
>5	Parameter	 
>6	Identifier	predicate
>7	ParameterType	const PointSelectionPredicate &
>8	CompoundStatement	 
>13	FunctionDef	PointSelection 
>14	ParameterList	dvo 
>15	Parameter	 
>16	Identifier	predicate
>17	ParameterType	const PointSelectionPredicate &
>18	Parameter	 
>19	Identifier	pyramid
>20	ParameterType	dvo 
>21	CompoundStatement	 
>27	FunctionDef	PointSelection 
>28	ParameterList	 
>29	CompoundStatement	 
>33	FunctionDef	PointSelection 
>34	ParameterList	dvo 
>35	Parameter	 
>36	Identifier	pyramid
>37	ParameterType	dvo 
>38	ReturnType	void
>39	CompoundStatement	 
>40	ExpressionStatement	 
>41	CallExpression	setRgbdImagePyramid ( pyramid )
>42	ArgumentList	pyramid
>43	Argument	pyramid
>44	Identifier	pyramid
>45	Callee	setRgbdImagePyramid
>46	Identifier	setRgbdImagePyramid
>51	FunctionDef	PointSelection 
>52	ParameterList	dvo 
>53	Parameter	 
>54	Identifier	pyramid
>55	ParameterType	dvo 
>56	ReturnType	void
>57	CompoundStatement	 
>58	ForStatement	for ( size_t idx = 0 ; idx < storage_ . size ( ) ; ++ idx )
>59	CompoundStatement	 
>60	ExpressionStatement	 
>61	AssignmentExpr	storage_ [ idx ] . is_cached = false
>62	Identifier	false
>63	MemberAccess	storage_ [ idx ] . is_cached
>64	Identifier	is_cached
>65	ArrayIndexing	storage_ [ idx ]
>66	Identifier	idx
>67	Identifier	storage_
>68	UnaryExpression	 
>69	Identifier	idx
>70	IncDec	++
>71	Condition	 
>72	RelationalExpression	idx < storage_ . size ( )
>73	CallExpression	storage_ . size ( )
>74	ArgumentList	 
>75	Callee	storage_ . size
>76	MemberAccess	storage_ . size
>77	Identifier	size
>78	Identifier	storage_
>79	Identifier	idx
>80	ForInit	 
>81	IdentifierDeclStatement	size_t idx = 0 ;
>82	IdentifierDecl	idx = 0
>83	AssignmentExpr	idx = 0
>84	PrimaryExpression	0
>85	Identifier	idx
>86	Identifier	idx
>87	IdentifierDeclType	size_t
>88	ExpressionStatement	 
>89	AssignmentExpr	pyramid_ = & pyramid
>90	UnaryOp	& pyramid
>91	Identifier	pyramid
>92	UnaryOperator	&
>93	Identifier	pyramid_
>107	FunctionDef	PointSelection 
>108	ParameterList	 
>109	ReturnType	dvo 
>110	CompoundStatement	 
>111	ReturnStatement	 
>112	UnaryOp	* pyramid_
>113	Identifier	pyramid_
>114	UnaryOperator	*
>115	ExpressionStatement	 
>116	CallExpression	assert ( pyramid_ != 0 )
>117	ArgumentList	pyramid_ != 0
>118	Argument	pyramid_ != 0
>119	EqualityExpression	pyramid_ != 0
>120	PrimaryExpression	0
>121	Identifier	pyramid_
>122	Callee	assert
>123	Identifier	assert
>129	FunctionDef	PointSelection 
>130	ParameterList	const size_t & level
>131	Parameter	 
>132	Identifier	level
>133	ParameterType	const size_t &
>134	ReturnType	size_t
>135	CompoundStatement	 
>136	ReturnStatement	 
>137	CallExpression	size_t ( pyramid_ -> level ( 0 ) . intensity . total ( ) * std 
>138	ArgumentList	pyramid_ -> level ( 0 ) . intensity . total ( ) * std 
>139	Argument	pyramid_ -> level ( 0 ) . intensity . total ( ) * std 
>140	MultiplicativeExpression	pyramid_ -> level ( 0 ) . intensity . total ( ) * std 
>141	CallExpression	std 
>142	ArgumentList	0.25
>143	Argument	double ( level )
>144	CallExpression	double ( level )
>145	ArgumentList	level
>146	Argument	level
>147	Identifier	level
>148	Callee	double
>149	Identifier	double
>150	Argument	0.25
>151	PrimaryExpression	0.25
>152	Callee	std 
>153	Identifier	std 
>154	CallExpression	pyramid_ -> level ( 0 ) . intensity . total ( )
>155	ArgumentList	 
>156	Callee	pyramid_ -> level ( 0 ) . intensity . total
>157	MemberAccess	pyramid_ -> level ( 0 ) . intensity . total
>158	Identifier	total
>159	MemberAccess	pyramid_ -> level ( 0 ) . intensity
>160	Identifier	intensity
>161	CallExpression	pyramid_ -> level ( 0 )
>162	ArgumentList	0
>163	Argument	0
>164	PrimaryExpression	0
>165	Callee	pyramid_ -> level
>166	PtrMemberAccess	pyramid_ -> level
>167	Identifier	level
>168	Identifier	pyramid_
>169	Callee	size_t
>170	Identifier	size_t
>183	FunctionDef	PointSelection 
>184	ParameterList	const size_t & level , cv 
>185	Parameter	 
>186	Identifier	dbg_idx
>187	ParameterType	cv 
>188	Parameter	 
>189	Identifier	level
>190	ParameterType	const size_t &
>191	ReturnType	bool
>192	CompoundStatement	 
>193	IfStatement	if ( debug_ && storage_ . size ( ) > level )
>194	ElseStatement	else
>195	CompoundStatement	 
>196	ReturnStatement	 
>197	Identifier	false
>198	CompoundStatement	 
>199	ReturnStatement	 
>200	RelationalExpression	dbg_idx . total ( ) > 0
>201	PrimaryExpression	0
>202	CallExpression	dbg_idx . total ( )
>203	ArgumentList	 
>204	Callee	dbg_idx . total
>205	MemberAccess	dbg_idx . total
>206	Identifier	total
>207	Identifier	dbg_idx
>208	ExpressionStatement	 
>209	AssignmentExpr	dbg_idx = storage_ [ level ] . debug_idx
>210	MemberAccess	storage_ [ level ] . debug_idx
>211	Identifier	debug_idx
>212	ArrayIndexing	storage_ [ level ]
>213	Identifier	level
>214	Identifier	storage_
>215	Identifier	dbg_idx
>216	Condition	 
>217	AndExpression	debug_ && storage_ . size ( ) > level
>218	RelationalExpression	storage_ . size ( ) > level
>219	Identifier	level
>220	CallExpression	storage_ . size ( )
>221	ArgumentList	 
>222	Callee	storage_ . size
>223	MemberAccess	storage_ . size
>224	Identifier	size
>225	Identifier	storage_
>226	Identifier	debug_
>240	FunctionDef	PointSelection 
>241	ParameterList	const size_t & level , PointSelection 
>242	Parameter	 
>243	Identifier	last_point
>244	ParameterType	PointSelection 
>245	Parameter	 
>246	Identifier	first_point
>247	ParameterType	PointSelection 
>248	Parameter	 
>249	Identifier	level
>250	ParameterType	const size_t &
>251	ReturnType	void
>252	CompoundStatement	 
>253	ExpressionStatement	 
>254	AssignmentExpr	last_point = storage . points_end
>255	MemberAccess	storage . points_end
>256	Identifier	points_end
>257	Identifier	storage
>258	Identifier	last_point
>259	ExpressionStatement	 
>260	AssignmentExpr	first_point = storage . points . begin ( )
>261	CallExpression	storage . points . begin ( )
>262	ArgumentList	 
>263	Callee	storage . points . begin
>264	MemberAccess	storage . points . begin
>265	Identifier	begin
>266	MemberAccess	storage . points
>267	Identifier	points
>268	Identifier	storage
>269	Identifier	first_point
>270	IfStatement	if ( ! storage . is_cached || debug_ )
>271	CompoundStatement	 
>272	ExpressionStatement	 
>273	AssignmentExpr	storage . is_cached = true
>274	Identifier	true
>275	MemberAccess	storage . is_cached
>276	Identifier	is_cached
>277	Identifier	storage
>278	ExpressionStatement	 
>279	AssignmentExpr	storage . points_end = selectPointsFromImage ( img , storage . points . begin ( ) , storage . points \
>280	CallExpression	selectPointsFromImage ( img , storage . points . begin ( ) , storage . points . end ( ) , storage . debug_idx )
>281	ArgumentList	img
>282	Argument	storage . debug_idx
>283	MemberAccess	storage . debug_idx
>284	Identifier	debug_idx
>285	Identifier	storage
>286	Argument	storage . points . end ( )
>287	CallExpression	storage . points . end ( )
>288	ArgumentList	 
>289	Callee	storage . points . end
>290	MemberAccess	storage . points . end
>291	Identifier	end
>292	MemberAccess	storage . points
>293	Identifier	points
>294	Identifier	storage
>295	Argument	storage . points . begin ( )
>296	CallExpression	storage . points . begin ( )
>297	ArgumentList	 
>298	Callee	storage . points . begin
>299	MemberAccess	storage . points . begin
>300	Identifier	begin
>301	MemberAccess	storage . points
>302	Identifier	points
>303	Identifier	storage
>304	Argument	img
>305	Identifier	img
>306	Callee	selectPointsFromImage
>307	Identifier	selectPointsFromImage
>308	MemberAccess	storage . points_end
>309	Identifier	points_end
>310	Identifier	storage
>311	ExpressionStatement	 
>312	CallExpression	storage . allocate ( img . intensity . total ( ) )
>313	ArgumentList	img . intensity . total ( )
>314	Argument	img . intensity . total ( )
>315	CallExpression	img . intensity . total ( )
>316	ArgumentList	 
>317	Callee	img . intensity . total
>318	MemberAccess	img . intensity . total
>319	Identifier	total
>320	MemberAccess	img . intensity
>321	Identifier	intensity
>322	Identifier	img
>323	Callee	storage . allocate
>324	MemberAccess	storage . allocate
>325	Identifier	allocate
>326	Identifier	storage
>327	IfStatement	if ( debug_ )
>328	ExpressionStatement	 
>329	AssignmentExpr	storage . debug_idx = cv 
>330	CallExpression	cv 
>331	ArgumentList	img . intensity . size ( )
>332	Argument	CV_8UC1
>333	Identifier	CV_8UC1
>334	Argument	img . intensity . size ( )
>335	CallExpression	img . intensity . size ( )
>336	ArgumentList	 
>337	Callee	img . intensity . size
>338	MemberAccess	img . intensity . size
>339	Identifier	size
>340	MemberAccess	img . intensity
>341	Identifier	intensity
>342	Identifier	img
>343	Callee	cv 
>344	Identifier	cv 
>345	MemberAccess	storage . debug_idx
>346	Identifier	debug_idx
>347	Identifier	storage
>348	Condition	 
>349	Identifier	debug_
>350	ExpressionStatement	 
>351	CallExpression	img . buildAccelerationStructure ( )
>352	ArgumentList	 
>353	Callee	img . buildAccelerationStructure
>354	MemberAccess	img . buildAccelerationStructure
>355	Identifier	buildAccelerationStructure
>356	Identifier	img
>357	ExpressionStatement	 
>358	CallExpression	img . buildPointCloud ( )
>359	ArgumentList	 
>360	Callee	img . buildPointCloud
>361	MemberAccess	img . buildPointCloud
>362	Identifier	buildPointCloud
>363	Identifier	img
>364	IdentifierDeclStatement	 
>365	IdentifierDecl	& img = pyramid_ -> level ( level )
>366	AssignmentExpr	& img = pyramid_ -> level ( level )
>367	CallExpression	pyramid_ -> level ( level )
>368	ArgumentList	level
>369	Argument	level
>370	Identifier	level
>371	Callee	pyramid_ -> level
>372	PtrMemberAccess	pyramid_ -> level
>373	Identifier	level
>374	Identifier	pyramid_
>375	Identifier	img
>376	Identifier	img
>377	IdentifierDeclType	dvo 
>378	Condition	 
>379	OrExpression	! storage . is_cached || debug_
>380	Identifier	debug_
>381	UnaryOp	! storage . is_cached
>382	MemberAccess	storage . is_cached
>383	Identifier	is_cached
>384	Identifier	storage
>385	UnaryOperator	!
>386	IdentifierDeclStatement	 
>387	IdentifierDecl	& storage = storage_ [ level ]
>388	AssignmentExpr	& storage = storage_ [ level ]
>389	ArrayIndexing	storage_ [ level ]
>390	Identifier	level
>391	Identifier	storage_
>392	Identifier	storage
>393	Identifier	storage
>394	IdentifierDeclType	Storage &
>395	IfStatement	if ( storage_ . size ( ) < level + 1 )
>396	ExpressionStatement	 
>397	CallExpression	storage_ . resize ( level + 1 )
>398	ArgumentList	level + 1
>399	Argument	level + 1
>400	AdditiveExpression	level + 1
>401	PrimaryExpression	1
>402	Identifier	level
>403	Callee	storage_ . resize
>404	MemberAccess	storage_ . resize
>405	Identifier	resize
>406	Identifier	storage_
>407	Condition	 
>408	RelationalExpression	storage_ . size ( ) < level + 1
>409	AdditiveExpression	level + 1
>410	PrimaryExpression	1
>411	Identifier	level
>412	CallExpression	storage_ . size ( )
>413	ArgumentList	 
>414	Callee	storage_ . size
>415	MemberAccess	storage_ . size
>416	Identifier	size
>417	Identifier	storage_
>418	ExpressionStatement	 
>419	CallExpression	pyramid_ -> compute ( level + 1 )
>420	ArgumentList	level + 1
>421	Argument	level + 1
>422	AdditiveExpression	level + 1
>423	PrimaryExpression	1
>424	Identifier	level
>425	Callee	pyramid_ -> compute
>426	PtrMemberAccess	pyramid_ -> compute
>427	Identifier	compute
>428	Identifier	pyramid_
>429	ExpressionStatement	 
>430	CallExpression	assert ( pyramid_ != 0 )
>431	ArgumentList	pyramid_ != 0
>432	Argument	pyramid_ != 0
>433	EqualityExpression	pyramid_ != 0
>434	PrimaryExpression	0
>435	Identifier	pyramid_
>436	Callee	assert
>437	Identifier	assert
>467	FunctionDef	PointSelection 
>468	ParameterList	const dvo 
>469	Parameter	 
>470	Identifier	debug_idx
>471	ParameterType	cv 
>472	Parameter	 
>473	Identifier	last_point
>474	ParameterType	const PointSelection 
>475	Parameter	 
>476	Identifier	first_point
>477	ParameterType	const PointSelection 
>478	Parameter	 
>479	Identifier	img
>480	ParameterType	const dvo 
>481	ReturnType	PointSelection 
>482	CompoundStatement	 
>483	ReturnStatement	 
>484	Identifier	selected_points_it
>485	ForStatement	for ( int y = 0 ; y < img . height ; ++ y )
>486	CompoundStatement	 
>487	ForStatement	for ( int x = 0 ; x < img . width ; ++ x , ++ points , ++ intensity_and_depth )
>488	CompoundStatement	 
>489	IfStatement	if ( predicate_ . isPointOk ( x , y , points -> z , intensity_and_depth -> idx , intensity_and_depth -> idy , intensity_\
>490	CompoundStatement	 
>491	IfStatement	if ( selected_points_it == last_point )
>492	ReturnStatement	 
>493	Identifier	selected_points_it
>494	Condition	 
>495	EqualityExpression	selected_points_it == last_point
>496	Identifier	last_point
>497	Identifier	selected_points_it
>498	IfStatement	if ( debug_ )
>499	ExpressionStatement	 
>500	AssignmentExpr	debug_idx . at < uint8_t > ( y , x ) = 1
>501	PrimaryExpression	1
>502	RelationalExpression	debug_idx . at < uint8_t > ( y , x )
>503	RelationalExpression	uint8_t > ( y , x )
>504	Expression	y , x
>505	Identifier	x
>506	Identifier	y
>507	Identifier	uint8_t
>508	MemberAccess	debug_idx . at
>509	Identifier	at
>510	Identifier	debug_idx
>511	Condition	 
>512	Identifier	debug_
>513	ExpressionStatement	 
>514	UnaryExpression	++ selected_points_it
>515	Identifier	selected_points_it
>516	IncDec	++
>517	ExpressionStatement	 
>518	AssignmentExpr	selected_points_it -> intensity_and_depth = * intensity_and_depth
>519	UnaryOp	* intensity_and_depth
>520	Identifier	intensity_and_depth
>521	UnaryOperator	*
>522	PtrMemberAccess	selected_points_it -> intensity_and_depth
>523	Identifier	intensity_and_depth
>524	Identifier	selected_points_it
>525	ExpressionStatement	 
>526	AssignmentExpr	selected_points_it -> point = * points
>527	UnaryOp	* points
>528	Identifier	points
>529	UnaryOperator	*
>530	PtrMemberAccess	selected_points_it -> point
>531	Identifier	point
>532	Identifier	selected_points_it
>533	Condition	 
>534	CallExpression	predicate_ . isPointOk ( x , y , points -> z , intensity_and_depth -> idx , intensity_and_depth -> idy , intensity_\
>535	ArgumentList	x
>536	Argument	intensity_and_depth -> zdy
>537	PtrMemberAccess	intensity_and_depth -> zdy
>538	Identifier	zdy
>539	Identifier	intensity_and_depth
>540	Argument	intensity_and_depth -> zdx
>541	PtrMemberAccess	intensity_and_depth -> zdx
>542	Identifier	zdx
>543	Identifier	intensity_and_depth
>544	Argument	intensity_and_depth -> idy
>545	PtrMemberAccess	intensity_and_depth -> idy
>546	Identifier	idy
>547	Identifier	intensity_and_depth
>548	Argument	intensity_and_depth -> idx
>549	PtrMemberAccess	intensity_and_depth -> idx
>550	Identifier	idx
>551	Identifier	intensity_and_depth
>552	Argument	points -> z
>553	PtrMemberAccess	points -> z
>554	Identifier	z
>555	Identifier	points
>556	Argument	y
>557	Identifier	y
>558	Argument	x
>559	Identifier	x
>560	Callee	predicate_ . isPointOk
>561	MemberAccess	predicate_ . isPointOk
>562	Identifier	isPointOk
>563	Identifier	predicate_
>564	Expression	 
>565	Expression	++ points , ++ intensity_and_depth
>566	UnaryExpression	++ intensity_and_depth
>567	Identifier	intensity_and_depth
>568	IncDec	++
>569	UnaryExpression	++ points
>570	Identifier	points
>571	IncDec	++
>572	UnaryExpression	++ x
>573	Identifier	x
>574	IncDec	++
>575	Condition	 
>576	RelationalExpression	x < img . width
>577	MemberAccess	img . width
>578	Identifier	width
>579	Identifier	img
>580	Identifier	x
>581	ForInit	 
>582	IdentifierDeclStatement	int x = 0 ;
>583	IdentifierDecl	x = 0
>584	AssignmentExpr	x = 0
>585	PrimaryExpression	0
>586	Identifier	x
>587	Identifier	x
>588	IdentifierDeclType	int
>589	UnaryExpression	 
>590	Identifier	y
>591	IncDec	++
>592	Condition	 
>593	RelationalExpression	y < img . height
>594	MemberAccess	img . height
>595	Identifier	height
>596	Identifier	img
>597	Identifier	y
>598	ForInit	 
>599	IdentifierDeclStatement	int y = 0 ;
>600	IdentifierDecl	y = 0
>601	AssignmentExpr	y = 0
>602	PrimaryExpression	0
>603	Identifier	y
>604	Identifier	y
>605	IdentifierDeclType	int
>606	IdentifierDeclStatement	 
>607	IdentifierDecl	selected_points_it = first_point
>608	AssignmentExpr	selected_points_it = first_point
>609	Identifier	first_point
>610	Identifier	first_point
>611	Identifier	selected_points_it
>612	IdentifierDeclType	PointWithIntensityAndDepth 
>613	ExpressionStatement	 
>614	Statement	 
>615	Statement	 
>616	Statement	 
>617	Statement	 
>618	Statement	 
>619	Statement	 
>620	Statement	 
>621	Statement	 
>622	Statement	 
>623	Statement	 
>624	Statement	 
>625	Statement	 
>626	Statement	 
>627	Statement	 
>628	Statement	 
>629	Statement	 
>630	Statement	 
>631	Statement	 
>632	Statement	 
>633	IdentifierDeclStatement	 
>634	IdentifierDecl	* points = ( const PointWithIntensityAndDepth 
>635	AssignmentExpr	* points = ( const PointWithIntensityAndDepth 
>636	CastExpression	( const PointWithIntensityAndDepth 
>637	CallExpression	img . pointcloud . data ( )
>638	ArgumentList	 
>639	Callee	img . pointcloud . data
>640	MemberAccess	img . pointcloud . data
>641	Identifier	data
>642	MemberAccess	img . pointcloud
>643	Identifier	pointcloud
>644	Identifier	img
>645	CastTarget	const PointWithIntensityAndDepth 
>646	Identifier	points
>647	Identifier	points
>648	IdentifierDeclType	const PointWithIntensityAndDepth 
>680	FunctionDef	PointSelection 
>681	ParameterList	 
>682	CompoundStatement	 
>686	FunctionDef	PointSelection 
>687	ParameterList	size_t max_points
>688	Parameter	 
>689	Identifier	max_points
>690	ParameterType	size_t
>691	ReturnType	void
>692	CompoundStatement	 
>693	IfStatement	if ( points . size ( ) < max_points )
>694	CompoundStatement	 
>695	ExpressionStatement	 
>696	CallExpression	points . resize ( max_points )
>697	ArgumentList	max_points
>698	Argument	max_points
>699	Identifier	max_points
>700	Callee	points . resize
>701	MemberAccess	points . resize
>702	Identifier	resize
>703	Identifier	points
>704	Condition	 
>705	RelationalExpression	points . size ( ) < max_points
>706	Identifier	max_points
>707	CallExpression	points . size ( )
>708	ArgumentList	 
>709	Callee	points . size
>710	MemberAccess	points . size
>711	Identifier	size
>712	Identifier	points
<3=8,4
<4=5
<5=7,6
<13=21,14
<14=18,15
<15=17,16
<18=20,19
<27=29,28
<33=39,38,34
<34=35
<35=37,36
<39=40
<40=41
<41=45,42
<42=43
<43=44
<45=46
<51=57,56,52
<52=53
<53=55,54
<57=88,58
<58=80,71,68,59
<59=60
<60=61
<61=63,62
<63=65,64
<65=67,66
<68=70,69
<71=72
<72=79,73
<73=75,74
<75=76
<76=78,77
<80=81
<81=82
<82=87,86,83
<83=85,84
<88=89
<89=93,90
<90=92,91
<107=110,109,108
<110=115,111
<111=112
<112=114,113
<115=116
<116=122,117
<117=118
<118=119
<119=121,120
<122=123
<129=135,134,130
<130=131
<131=133,132
<135=136
<136=137
<137=169,138
<138=139
<139=140
<140=154,141
<141=152,142
<142=150,143
<143=144
<144=148,145
<145=146
<146=147
<148=149
<150=151
<152=153
<154=156,155
<156=157
<157=159,158
<159=161,160
<161=165,162
<162=163
<163=164
<165=166
<166=168,167
<169=170
<183=192,191,184
<184=188,185
<185=187,186
<188=190,189
<192=193
<193=216,198,194
<194=195
<195=196
<196=197
<198=208,199
<199=200
<200=202,201
<202=204,203
<204=205
<205=207,206
<208=209
<209=215,210
<210=212,211
<212=214,213
<216=217
<217=226,218
<218=220,219
<220=222,221
<222=223
<223=225,224
<240=252,251,241
<241=248,245,242
<242=244,243
<245=247,246
<248=250,249
<252=429,418,395,386,270,259,253
<253=254
<254=258,255
<255=257,256
<259=260
<260=269,261
<261=263,262
<263=264
<264=266,265
<266=268,267
<270=378,271
<271=364,357,350,327,311,278,272
<272=273
<273=275,274
<275=277,276
<278=279
<279=308,280
<280=306,281
<281=304,295,286,282
<282=283
<283=285,284
<286=287
<287=289,288
<289=290
<290=292,291
<292=294,293
<295=296
<296=298,297
<298=299
<299=301,300
<301=303,302
<304=305
<306=307
<308=310,309
<311=312
<312=323,313
<313=314
<314=315
<315=317,316
<317=318
<318=320,319
<320=322,321
<323=324
<324=326,325
<327=348,328
<328=329
<329=345,330
<330=343,331
<331=334,332
<332=333
<334=335
<335=337,336
<337=338
<338=340,339
<340=342,341
<343=344
<345=347,346
<348=349
<350=351
<351=353,352
<353=354
<354=356,355
<357=358
<358=360,359
<360=361
<361=363,362
<364=365
<365=377,376,366
<366=375,367
<367=371,368
<368=369
<369=370
<371=372
<372=374,373
<378=379
<379=381,380
<381=385,382
<382=384,383
<386=387
<387=394,393,388
<388=392,389
<389=391,390
<395=407,396
<396=397
<397=403,398
<398=399
<399=400
<400=402,401
<403=404
<404=406,405
<407=408
<408=412,409
<409=411,410
<412=414,413
<414=415
<415=417,416
<418=419
<419=425,420
<420=421
<421=422
<422=424,423
<425=426
<426=428,427
<429=430
<430=436,431
<431=432
<432=433
<433=435,434
<436=437
<467=482,481,468
<468=478,475,472,469
<469=471,470
<472=474,473
<475=477,476
<478=480,479
<482=633,632,631,630,629,628,627,626,625,624,623,622,621,620,619,618,617,616,615,614,613,606,485,483
<483=484
<485=598,592,589,486
<486=487
<487=581,575,564,488
<488=489
<489=533,490
<490=525,517,513,498,491
<491=494,492
<492=493
<494=495
<495=497,496
<498=511,499
<499=500
<500=502,501
<502=508,503
<503=507,504
<504=506,505
<508=510,509
<511=512
<513=514
<514=516,515
<517=518
<518=522,519
<519=521,520
<522=524,523
<525=526
<526=530,527
<527=529,528
<530=532,531
<533=534
<534=560,535
<535=558,556,552,548,544,540,536
<536=537
<537=539,538
<540=541
<541=543,542
<544=545
<545=547,546
<548=549
<549=551,550
<552=553
<553=555,554
<556=557
<558=559
<560=561
<561=563,562
<564=572,565
<565=569,566
<566=568,567
<569=571,570
<572=574,573
<575=576
<576=580,577
<577=579,578
<581=582
<582=583
<583=588,587,584
<584=586,585
<589=591,590
<592=593
<593=597,594
<594=596,595
<598=599
<599=600
<600=605,604,601
<601=603,602
<606=607
<607=612,611,608
<608=610,609
<633=634
<634=648,647,635
<635=646,636
<636=645,637
<637=639,638
<639=640
<640=642,641
<642=644,643
<680=682,681
<686=692,691,687
<687=688
<688=690,689
<692=693
<693=704,694
<694=695
<695=696
<696=700,697
<697=698
<698=699
<700=701
<701=703,702
<704=705
<705=707,706
<707=709,708
<709=710
<710=712,711
