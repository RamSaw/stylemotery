>3	FunctionDef	callFunction (mxArray * plhs [ ] , const mxArray * prhs [ ] , const long nlhs)
>4	ParameterList	mxArray * plhs [ ] , const mxArray * prhs [ ] , const long nlhs
>5	Parameter	 
>6	Identifier	nlhs
>7	ParameterType	const long
>8	Parameter	 
>9	Identifier	prhs
>10	ParameterType	const mxArray * [ ]
>11	Parameter	 
>12	Identifier	plhs
>13	ParameterType	mxArray * [ ]
>14	ReturnType	inline void
>15	CompoundStatement	 
>16	ExpressionStatement	 
>17	Identifier	D
>18	Statement	 
>19	IfStatement	if ( mxIsSparse ( prhs [ 1 ] ) )
>20	CompoundStatement	 
>21	ExpressionStatement	 
>22	RelationalExpression	deleteCopySparse < T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r )
>23	RelationalExpression	T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r )
>24	Expression	D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r
>25	Expression	D_r2 , D_pB2 , D_pE2 , D_v , D_r
>26	Expression	D_pB2 , D_pE2 , D_v , D_r
>27	Expression	D_pE2 , D_v , D_r
>28	Expression	D_v , D_r
>29	Identifier	D_r
>30	Identifier	D_v
>31	Identifier	D_pE2
>32	Identifier	D_pB2
>33	Identifier	D_r2
>34	Identifier	D_v2
>35	Identifier	T
>36	Identifier	deleteCopySparse
>37	Condition	 
>38	CallExpression	mxIsSparse ( prhs [ 1 ] )
>39	ArgumentList	prhs [ 1 ]
>40	Argument	prhs [ 1 ]
>41	ArrayIndexing	prhs [ 1 ]
>42	PrimaryExpression	1
>43	Identifier	prhs
>44	Callee	mxIsSparse
>45	Identifier	mxIsSparse
>46	ExpressionStatement	 
>47	MemberAccess	param . logName
>48	Identifier	logName
>49	Identifier	param
>50	Statement	 
>51	Statement	 
>52	IfStatement	if ( param . logName )
>53	Statement	 
>54	Condition	 
>55	MemberAccess	param . logName
>56	Identifier	logName
>57	Identifier	param
>58	IfStatement	if ( nlhs == 2 )
>59	CompoundStatement	 
>60	ForStatement	for ( long i = 0 ; i < duality_gap . n ( ) * duality_gap . m ( ) ; ++ i )
>61	ExpressionStatement	 
>62	AssignmentExpr	pr_dualitygap [ i ] = duality_gap [ i ]
>63	ArrayIndexing	duality_gap [ i ]
>64	Identifier	i
>65	Identifier	duality_gap
>66	ArrayIndexing	pr_dualitygap [ i ]
>67	Identifier	i
>68	Identifier	pr_dualitygap
>69	UnaryExpression	 
>70	Identifier	i
>71	IncDec	++
>72	Condition	 
>73	RelationalExpression	i < duality_gap . n ( ) * duality_gap . m ( )
>74	MultiplicativeExpression	duality_gap . n ( ) * duality_gap . m ( )
>75	CallExpression	duality_gap . m ( )
>76	ArgumentList	 
>77	Callee	duality_gap . m
>78	MemberAccess	duality_gap . m
>79	Identifier	m
>80	Identifier	duality_gap
>81	CallExpression	duality_gap . n ( )
>82	ArgumentList	 
>83	Callee	duality_gap . n
>84	MemberAccess	duality_gap . n
>85	Identifier	n
>86	Identifier	duality_gap
>87	Identifier	i
>88	ForInit	 
>89	IdentifierDeclStatement	long i = 0 ;
>90	IdentifierDecl	i = 0
>91	AssignmentExpr	i = 0
>92	PrimaryExpression	0
>93	Identifier	i
>94	Identifier	i
>95	IdentifierDeclType	long
>96	ExpressionStatement	 
>97	CallExpression	mxGetPr ( plhs [ 1 ] )
>98	ArgumentList	plhs [ 1 ]
>99	Argument	plhs [ 1 ]
>100	ArrayIndexing	plhs [ 1 ]
>101	PrimaryExpression	1
>102	Identifier	plhs
>103	Callee	mxGetPr
>104	Identifier	mxGetPr
>105	Statement	 
>106	Statement	 
>107	Statement	 
>108	Statement	 
>109	Statement	 
>110	Statement	 
>111	Statement	 
>112	Statement	 
>113	Statement	 
>114	ExpressionStatement	 
>115	AssignmentExpr	plhs [ 1 ] = createMatrix < T > ( duality_gap . m ( ) , duality_gap . n ( ) )
>116	RelationalExpression	createMatrix < T > ( duality_gap . m ( ) , duality_gap . n ( ) )
>117	RelationalExpression	T > ( duality_gap . m ( ) , duality_gap . n ( ) )
>118	Expression	duality_gap . m ( ) , duality_gap . n ( )
>119	CallExpression	duality_gap . n ( )
>120	ArgumentList	 
>121	Callee	duality_gap . n
>122	MemberAccess	duality_gap . n
>123	Identifier	n
>124	Identifier	duality_gap
>125	CallExpression	duality_gap . m ( )
>126	ArgumentList	 
>127	Callee	duality_gap . m
>128	MemberAccess	duality_gap . m
>129	Identifier	m
>130	Identifier	duality_gap
>131	Identifier	T
>132	Identifier	createMatrix
>133	ArrayIndexing	plhs [ 1 ]
>134	PrimaryExpression	1
>135	Identifier	plhs
>136	Condition	 
>137	EqualityExpression	nlhs == 2
>138	PrimaryExpression	2
>139	Identifier	nlhs
>140	ExpressionStatement	 
>141	RelationalExpression	FISTA 
>142	RelationalExpression	T > ( X , * D , alpha0 , alpha , param , duality_gap , NULL , NULL , & graph )
>143	Expression	X , * D , alpha0 , alpha , param , duality_gap , NULL , NULL , & graph
>144	Expression	* D , alpha0 , alpha , param , duality_gap , NULL , NULL , & graph
>145	Expression	alpha0 , alpha , param , duality_gap , NULL , NULL , & graph
>146	Expression	alpha , param , duality_gap , NULL , NULL , & graph
>147	Expression	param , duality_gap , NULL , NULL , & graph
>148	Expression	duality_gap , NULL , NULL , & graph
>149	Expression	NULL , NULL , & graph
>150	Expression	NULL , & graph
>151	UnaryOp	& graph
>152	Identifier	graph
>153	UnaryOperator	&
>154	Identifier	NULL
>155	Identifier	NULL
>156	Identifier	duality_gap
>157	Identifier	param
>158	Identifier	alpha
>159	Identifier	alpha0
>160	UnaryOp	* D
>161	Identifier	D
>162	UnaryOperator	*
>163	Identifier	X
>164	Identifier	T
>165	Identifier	FISTA 
>166	IdentifierDeclStatement	 
>167	IdentifierDecl	duality_gap
>168	Identifier	duality_gap
>169	IdentifierDeclType	Matrix < T >
>170	ExpressionStatement	 
>171	Expression	prhs [ 4 ] , \"precision\" , 10000000000
>172	Expression	\"precision\" , 10000000000
>173	PrimaryExpression	10000000000
>174	PrimaryExpression	\"precision\"
>175	ArrayIndexing	prhs [ 4 ]
>176	PrimaryExpression	4
>177	Identifier	prhs
>178	Statement	 
>179	Statement	 
>180	Statement	 
>181	Statement	 
>182	Statement	 
>183	Statement	 
>184	Statement	 
>185	Statement	 
>186	Statement	 
>187	ExpressionStatement	 
>188	AssignmentExpr	graph . jc = GG_pB
>189	Identifier	GG_pB
>190	MemberAccess	graph . jc
>191	Identifier	jc
>192	Identifier	graph
>193	ExpressionStatement	 
>194	AssignmentExpr	graph . ir = GG_r
>195	Identifier	GG_r
>196	MemberAccess	graph . ir
>197	Identifier	ir
>198	Identifier	graph
>199	ExpressionStatement	 
>200	AssignmentExpr	graph . stop_weights = stop_weights
>201	Identifier	stop_weights
>202	MemberAccess	graph . stop_weights
>203	Identifier	stop_weights
>204	Identifier	graph
>205	ExpressionStatement	 
>206	AssignmentExpr	graph . start_weights = start_weights
>207	Identifier	start_weights
>208	MemberAccess	graph . start_weights
>209	Identifier	start_weights
>210	Identifier	graph
>211	ExpressionStatement	 
>212	AssignmentExpr	graph . weights = graph_weights
>213	Identifier	graph_weights
>214	MemberAccess	graph . weights
>215	Identifier	weights
>216	Identifier	graph
>217	ExpressionStatement	 
>218	AssignmentExpr	graph . m = GG_pB [ graph . n ] - GG_pB [ 0 ]
>219	AdditiveExpression	GG_pB [ graph . n ] - GG_pB [ 0 ]
>220	ArrayIndexing	GG_pB [ 0 ]
>221	PrimaryExpression	0
>222	Identifier	GG_pB
>223	ArrayIndexing	GG_pB [ graph . n ]
>224	MemberAccess	graph . n
>225	Identifier	n
>226	Identifier	graph
>227	Identifier	GG_pB
>228	MemberAccess	graph . m
>229	Identifier	m
>230	Identifier	graph
>231	ExpressionStatement	 
>232	AssignmentExpr	graph . n = param . transpose ? nAlpha 
>233	ConditionalExpression	param . transpose ? nAlpha 
>234	Identifier	pAlpha
>235	Identifier	nAlpha
>236	Condition	param . transpose
>237	MemberAccess	param . transpose
>238	Identifier	transpose
>239	Identifier	param
>240	MemberAccess	graph . n
>241	Identifier	n
>242	Identifier	graph
>243	IdentifierDeclStatement	 
>244	IdentifierDecl	graph
>245	Identifier	graph
>246	IdentifierDeclType	GraphPathStruct < T >
>247	IfStatement	if ( param . num_threads == - 1 )
>248	CompoundStatement	 
>249	ExpressionStatement	 
>250	AssignmentExpr	param . num_threads = MIN ( MAX_THREADS , omp_get_num_procs ( ) )
>251	CallExpression	MIN ( MAX_THREADS , omp_get_num_procs ( ) )
>252	ArgumentList	MAX_THREADS
>253	Argument	omp_get_num_procs ( )
>254	CallExpression	omp_get_num_procs ( )
>255	ArgumentList	 
>256	Callee	omp_get_num_procs
>257	Identifier	omp_get_num_procs
>258	Argument	MAX_THREADS
>259	Identifier	MAX_THREADS
>260	Callee	MIN
>261	Identifier	MIN
>262	MemberAccess	param . num_threads
>263	Identifier	num_threads
>264	Identifier	param
>265	ExpressionStatement	 
>266	AssignmentExpr	param . num_threads = 1
>267	PrimaryExpression	1
>268	MemberAccess	param . num_threads
>269	Identifier	num_threads
>270	Identifier	param
>271	Condition	 
>272	EqualityExpression	param . num_threads == - 1
>273	UnaryOp	- 1
>274	PrimaryExpression	1
>275	UnaryOperator	-
>276	MemberAccess	param . num_threads
>277	Identifier	num_threads
>278	Identifier	param
>279	IfStatement	if ( param . regul == TREE_L0 || param . regul == TREEMULT || param . regul == TREE_L2 || param . regul == TREE_\
>280	ExpressionStatement	 
>281	CallExpression	mexErrMsgTxt ( \"Error
>282	ArgumentList	\"Error
>283	Argument	\"Error
>284	PrimaryExpression	\"Error
>285	Callee	mexErrMsgTxt
>286	Identifier	mexErrMsgTxt
>287	Condition	 
>288	OrExpression	param . regul == TREE_L0 || param . regul == TREEMULT || param . regul == TREE_L2 || param . regul == \
>289	OrExpression	param . regul == TREEMULT || param . regul == TREE_L2 || param . regul == TREE_LINF
>290	OrExpression	param . regul == TREE_L2 || param . regul == TREE_LINF
>291	EqualityExpression	param . regul == TREE_LINF
>292	Identifier	TREE_LINF
>293	MemberAccess	param . regul
>294	Identifier	regul
>295	Identifier	param
>296	EqualityExpression	param . regul == TREE_L2
>297	Identifier	TREE_L2
>298	MemberAccess	param . regul
>299	Identifier	regul
>300	Identifier	param
>301	EqualityExpression	param . regul == TREEMULT
>302	Identifier	TREEMULT
>303	MemberAccess	param . regul
>304	Identifier	regul
>305	Identifier	param
>306	EqualityExpression	param . regul == TREE_L0
>307	Identifier	TREE_L0
>308	MemberAccess	param . regul
>309	Identifier	regul
>310	Identifier	param
>311	IfStatement	if ( param . regul == GRAPH || param . regul == GRAPHMULT )
>312	ExpressionStatement	 
>313	CallExpression	mexErrMsgTxt ( \"Error
>314	ArgumentList	\"Error
>315	Argument	\"Error
>316	PrimaryExpression	\"Error
>317	Callee	mexErrMsgTxt
>318	Identifier	mexErrMsgTxt
>319	Condition	 
>320	OrExpression	param . regul == GRAPH || param . regul == GRAPHMULT
>321	EqualityExpression	param . regul == GRAPHMULT
>322	Identifier	GRAPHMULT
>323	MemberAccess	param . regul
>324	Identifier	regul
>325	Identifier	param
>326	EqualityExpression	param . regul == GRAPH
>327	Identifier	GRAPH
>328	MemberAccess	param . regul
>329	Identifier	regul
>330	Identifier	param
>331	IfStatement	if ( param . log )
>332	CompoundStatement	 
>333	ExpressionStatement	 
>334	CallExpression	mxGetString ( stringData , param . logName , stringLength )
>335	ArgumentList	stringData
>336	Argument	stringLength
>337	Identifier	stringLength
>338	Argument	param . logName
>339	MemberAccess	param . logName
>340	Identifier	logName
>341	Identifier	param
>342	Argument	stringData
>343	Identifier	stringData
>344	Callee	mxGetString
>345	Identifier	mxGetString
>346	ExpressionStatement	 
>347	AssignmentExpr	param . logName = new char [ stringLength ]
>348	Identifier	stringLength
>349	MemberAccess	param . logName
>350	Identifier	logName
>351	Identifier	param
>352	IdentifierDeclStatement	 
>353	IdentifierDecl	stringLength = mxGetN ( stringData ) + 1
>354	AssignmentExpr	stringLength = mxGetN ( stringData ) + 1
>355	AdditiveExpression	mxGetN ( stringData ) + 1
>356	PrimaryExpression	1
>357	CallExpression	mxGetN ( stringData )
>358	ArgumentList	stringData
>359	Argument	stringData
>360	Identifier	stringData
>361	Callee	mxGetN
>362	Identifier	mxGetN
>363	Identifier	stringLength
>364	Identifier	stringLength
>365	IdentifierDeclType	long
>366	IfStatement	if ( ! stringData )
>367	ExpressionStatement	 
>368	CallExpression	mexErrMsgTxt ( \"Missing field logName\" )
>369	ArgumentList	\"Missing field logName\"
>370	Argument	\"Missing field logName\"
>371	PrimaryExpression	\"Missing field logName\"
>372	Callee	mexErrMsgTxt
>373	Identifier	mexErrMsgTxt
>374	Condition	 
>375	UnaryOp	! stringData
>376	Identifier	stringData
>377	UnaryOperator	!
>378	IdentifierDeclStatement	 
>379	IdentifierDecl	* stringData = mxGetField ( prhs [ 4 ] , 0 , \"logName\" )
>380	AssignmentExpr	* stringData = mxGetField ( prhs [ 4 ] , 0 , \"logName\" )
>381	CallExpression	mxGetField ( prhs [ 4 ] , 0 , \"logName\" )
>382	ArgumentList	prhs [ 4 ]
>383	Argument	\"logName\"
>384	PrimaryExpression	\"logName\"
>385	Argument	0
>386	PrimaryExpression	0
>387	Argument	prhs [ 4 ]
>388	ArrayIndexing	prhs [ 4 ]
>389	PrimaryExpression	4
>390	Identifier	prhs
>391	Callee	mxGetField
>392	Identifier	mxGetField
>393	Identifier	stringData
>394	Identifier	stringData
>395	IdentifierDeclType	mxArray *
>396	Condition	 
>397	MemberAccess	param . log
>398	Identifier	log
>399	Identifier	param
>400	IfStatement	if ( param . transpose )
>401	ElseStatement	else
>402	CompoundStatement	 
>403	IfStatement	if ( nweights2 != pAlpha )
>404	ExpressionStatement	 
>405	CallExpression	mexErrMsgTxt ( \"size of field stop_weights is not consistent\" )
>406	ArgumentList	\"size of field stop_weights is not consistent\"
>407	Argument	\"size of field stop_weights is not consistent\"
>408	PrimaryExpression	\"size of field stop_weights is not consistent\"
>409	Callee	mexErrMsgTxt
>410	Identifier	mexErrMsgTxt
>411	Condition	 
>412	EqualityExpression	nweights2 != pAlpha
>413	Identifier	pAlpha
>414	Identifier	nweights2
>415	IfStatement	if ( nweights != pAlpha )
>416	ExpressionStatement	 
>417	CallExpression	mexErrMsgTxt ( \"size of field start_weights is not consistent\" )
>418	ArgumentList	\"size of field start_weights is not consistent\"
>419	Argument	\"size of field start_weights is not consistent\"
>420	PrimaryExpression	\"size of field start_weights is not consistent\"
>421	Callee	mexErrMsgTxt
>422	Identifier	mexErrMsgTxt
>423	Condition	 
>424	EqualityExpression	nweights != pAlpha
>425	Identifier	pAlpha
>426	Identifier	nweights
>427	IfStatement	if ( GGm != GGn || GGm != pAlpha )
>428	ExpressionStatement	 
>429	CallExpression	mexErrMsgTxt ( \"size of field weights is not consistent\" )
>430	ArgumentList	\"size of field weights is not consistent\"
>431	Argument	\"size of field weights is not consistent\"
>432	PrimaryExpression	\"size of field weights is not consistent\"
>433	Callee	mexErrMsgTxt
>434	Identifier	mexErrMsgTxt
>435	Condition	 
>436	OrExpression	GGm != GGn || GGm != pAlpha
>437	EqualityExpression	GGm != pAlpha
>438	Identifier	pAlpha
>439	Identifier	GGm
>440	EqualityExpression	GGm != GGn
>441	Identifier	GGn
>442	Identifier	GGm
>443	CompoundStatement	 
>444	IfStatement	if ( nweights2 != nAlpha )
>445	ExpressionStatement	 
>446	CallExpression	mexErrMsgTxt ( \"size of field stop_weights is not consistent\" )
>447	ArgumentList	\"size of field stop_weights is not consistent\"
>448	Argument	\"size of field stop_weights is not consistent\"
>449	PrimaryExpression	\"size of field stop_weights is not consistent\"
>450	Callee	mexErrMsgTxt
>451	Identifier	mexErrMsgTxt
>452	Condition	 
>453	EqualityExpression	nweights2 != nAlpha
>454	Identifier	nAlpha
>455	Identifier	nweights2
>456	IfStatement	if ( nweights != nAlpha )
>457	ExpressionStatement	 
>458	CallExpression	mexErrMsgTxt ( \"size of field start_weights is not consistent\" )
>459	ArgumentList	\"size of field start_weights is not consistent\"
>460	Argument	\"size of field start_weights is not consistent\"
>461	PrimaryExpression	\"size of field start_weights is not consistent\"
>462	Callee	mexErrMsgTxt
>463	Identifier	mexErrMsgTxt
>464	Condition	 
>465	EqualityExpression	nweights != nAlpha
>466	Identifier	nAlpha
>467	Identifier	nweights
>468	IfStatement	if ( GGm != GGn || GGm != nAlpha )
>469	ExpressionStatement	 
>470	CallExpression	mexErrMsgTxt ( \"size of field weights is not consistent\" )
>471	ArgumentList	\"size of field weights is not consistent\"
>472	Argument	\"size of field weights is not consistent\"
>473	PrimaryExpression	\"size of field weights is not consistent\"
>474	Callee	mexErrMsgTxt
>475	Identifier	mexErrMsgTxt
>476	Condition	 
>477	OrExpression	GGm != GGn || GGm != nAlpha
>478	EqualityExpression	GGm != nAlpha
>479	Identifier	nAlpha
>480	Identifier	GGm
>481	EqualityExpression	GGm != GGn
>482	Identifier	GGn
>483	Identifier	GGm
>484	Condition	 
>485	MemberAccess	param . transpose
>486	Identifier	transpose
>487	Identifier	param
>488	ExpressionStatement	 
>489	AssignmentExpr	param . b = getScalarStructDef < T > ( prhs [ 4 ] , \"b\" , 0 )
>490	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"b\" , 0 )
>491	RelationalExpression	T > ( prhs [ 4 ] , \"b\" , 0 )
>492	Expression	prhs [ 4 ] , \"b\" , 0
>493	Expression	\"b\" , 0
>494	PrimaryExpression	0
>495	PrimaryExpression	\"b\"
>496	ArrayIndexing	prhs [ 4 ]
>497	PrimaryExpression	4
>498	Identifier	prhs
>499	Identifier	T
>500	Identifier	getScalarStructDef
>501	MemberAccess	param . b
>502	Identifier	b
>503	Identifier	param
>504	ExpressionStatement	 
>505	AssignmentExpr	param . a = getScalarStructDef < T > ( prhs [ 4 ] , \"a\" , T ( 1.0 ) )
>506	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"a\" , T ( 1.0 ) )
>507	RelationalExpression	T > ( prhs [ 4 ] , \"a\" , T ( 1.0 ) )
>508	Expression	prhs [ 4 ] , \"a\" , T ( 1.0 )
>509	Expression	\"a\" , T ( 1.0 )
>510	CallExpression	T ( 1.0 )
>511	ArgumentList	1.0
>512	Argument	1.0
>513	PrimaryExpression	1.0
>514	Callee	T
>515	Identifier	T
>516	PrimaryExpression	\"a\"
>517	ArrayIndexing	prhs [ 4 ]
>518	PrimaryExpression	4
>519	Identifier	prhs
>520	Identifier	T
>521	Identifier	getScalarStructDef
>522	MemberAccess	param . a
>523	Identifier	a
>524	Identifier	param
>525	ExpressionStatement	 
>526	AssignmentExpr	param . log = getScalarStructDef < bool > ( prhs [ 4 ] , \"log\" , false )
>527	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"log\" , false )
>528	RelationalExpression	bool > ( prhs [ 4 ] , \"log\" , false )
>529	Expression	prhs [ 4 ] , \"log\" , false
>530	Expression	\"log\" , false
>531	Identifier	false
>532	PrimaryExpression	\"log\"
>533	ArrayIndexing	prhs [ 4 ]
>534	PrimaryExpression	4
>535	Identifier	prhs
>536	Identifier	bool
>537	Identifier	getScalarStructDef
>538	MemberAccess	param . log
>539	Identifier	log
>540	Identifier	param
>541	ExpressionStatement	 
>542	AssignmentExpr	param . transpose = getScalarStructDef < bool > ( prhs [ 4 ] , \"transpose\" , false )
>543	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"transpose\" , false )
>544	RelationalExpression	bool > ( prhs [ 4 ] , \"transpose\" , false )
>545	Expression	prhs [ 4 ] , \"transpose\" , false
>546	Expression	\"transpose\" , false
>547	Identifier	false
>548	PrimaryExpression	\"transpose\"
>549	ArrayIndexing	prhs [ 4 ]
>550	PrimaryExpression	4
>551	Identifier	prhs
>552	Identifier	bool
>553	Identifier	getScalarStructDef
>554	MemberAccess	param . transpose
>555	Identifier	transpose
>556	Identifier	param
>557	ExpressionStatement	 
>558	AssignmentExpr	param . subgrad = getScalarStructDef < bool > ( prhs [ 4 ] , \"subgrad\" , false )
>559	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"subgrad\" , false )
>560	RelationalExpression	bool > ( prhs [ 4 ] , \"subgrad\" , false )
>561	Expression	prhs [ 4 ] , \"subgrad\" , false
>562	Expression	\"subgrad\" , false
>563	Identifier	false
>564	PrimaryExpression	\"subgrad\"
>565	ArrayIndexing	prhs [ 4 ]
>566	PrimaryExpression	4
>567	Identifier	prhs
>568	Identifier	bool
>569	Identifier	getScalarStructDef
>570	MemberAccess	param . subgrad
>571	Identifier	subgrad
>572	Identifier	param
>573	ExpressionStatement	 
>574	AssignmentExpr	param . ista = getScalarStructDef < bool > ( prhs [ 4 ] , \"ista\" , false )
>575	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"ista\" , false )
>576	RelationalExpression	bool > ( prhs [ 4 ] , \"ista\" , false )
>577	Expression	prhs [ 4 ] , \"ista\" , false
>578	Expression	\"ista\" , false
>579	Identifier	false
>580	PrimaryExpression	\"ista\"
>581	ArrayIndexing	prhs [ 4 ]
>582	PrimaryExpression	4
>583	Identifier	prhs
>584	Identifier	bool
>585	Identifier	getScalarStructDef
>586	MemberAccess	param . ista
>587	Identifier	ista
>588	Identifier	param
>589	ExpressionStatement	 
>590	AssignmentExpr	param . clever = getScalarStructDef < bool > ( prhs [ 4 ] , \"clever\" , false )
>591	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"clever\" , false )
>592	RelationalExpression	bool > ( prhs [ 4 ] , \"clever\" , false )
>593	Expression	prhs [ 4 ] , \"clever\" , false
>594	Expression	\"clever\" , false
>595	Identifier	false
>596	PrimaryExpression	\"clever\"
>597	ArrayIndexing	prhs [ 4 ]
>598	PrimaryExpression	4
>599	Identifier	prhs
>600	Identifier	bool
>601	Identifier	getScalarStructDef
>602	MemberAccess	param . clever
>603	Identifier	clever
>604	Identifier	param
>605	ExpressionStatement	 
>606	AssignmentExpr	param . verbose = getScalarStructDef < bool > ( prhs [ 4 ] , \"verbose\" , false )
>607	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"verbose\" , false )
>608	RelationalExpression	bool > ( prhs [ 4 ] , \"verbose\" , false )
>609	Expression	prhs [ 4 ] , \"verbose\" , false
>610	Expression	\"verbose\" , false
>611	Identifier	false
>612	PrimaryExpression	\"verbose\"
>613	ArrayIndexing	prhs [ 4 ]
>614	PrimaryExpression	4
>615	Identifier	prhs
>616	Identifier	bool
>617	Identifier	getScalarStructDef
>618	MemberAccess	param . verbose
>619	Identifier	verbose
>620	Identifier	param
>621	ExpressionStatement	 
>622	AssignmentExpr	param . resetflow = getScalarStructDef < bool > ( prhs [ 4 ] , \"resetflow\" , false )
>623	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"resetflow\" , false )
>624	RelationalExpression	bool > ( prhs [ 4 ] , \"resetflow\" , false )
>625	Expression	prhs [ 4 ] , \"resetflow\" , false
>626	Expression	\"resetflow\" , false
>627	Identifier	false
>628	PrimaryExpression	\"resetflow\"
>629	ArrayIndexing	prhs [ 4 ]
>630	PrimaryExpression	4
>631	Identifier	prhs
>632	Identifier	bool
>633	Identifier	getScalarStructDef
>634	MemberAccess	param . resetflow
>635	Identifier	resetflow
>636	Identifier	param
>637	ExpressionStatement	 
>638	AssignmentExpr	param . intercept = getScalarStructDef < bool > ( prhs [ 4 ] , \"intercept\" , false )
>639	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"intercept\" , false )
>640	RelationalExpression	bool > ( prhs [ 4 ] , \"intercept\" , false )
>641	Expression	prhs [ 4 ] , \"intercept\" , false
>642	Expression	\"intercept\" , false
>643	Identifier	false
>644	PrimaryExpression	\"intercept\"
>645	ArrayIndexing	prhs [ 4 ]
>646	PrimaryExpression	4
>647	Identifier	prhs
>648	Identifier	bool
>649	Identifier	getScalarStructDef
>650	MemberAccess	param . intercept
>651	Identifier	intercept
>652	Identifier	param
>653	ExpressionStatement	 
>654	AssignmentExpr	param . is_inner_weights = getScalarStructDef < bool > ( prhs [ 4 ] , \"is_inner_weights\" , false )
>655	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"is_inner_weights\" , false )
>656	RelationalExpression	bool > ( prhs [ 4 ] , \"is_inner_weights\" , false )
>657	Expression	prhs [ 4 ] , \"is_inner_weights\" , false
>658	Expression	\"is_inner_weights\" , false
>659	Identifier	false
>660	PrimaryExpression	\"is_inner_weights\"
>661	ArrayIndexing	prhs [ 4 ]
>662	PrimaryExpression	4
>663	Identifier	prhs
>664	Identifier	bool
>665	Identifier	getScalarStructDef
>666	MemberAccess	param . is_inner_weights
>667	Identifier	is_inner_weights
>668	Identifier	param
>669	ExpressionStatement	 
>670	AssignmentExpr	param . sqrt_step = getScalarStructDef < bool > ( prhs [ 4 ] , \"sqrt_step\" , true )
>671	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"sqrt_step\" , true )
>672	RelationalExpression	bool > ( prhs [ 4 ] , \"sqrt_step\" , true )
>673	Expression	prhs [ 4 ] , \"sqrt_step\" , true
>674	Expression	\"sqrt_step\" , true
>675	Identifier	true
>676	PrimaryExpression	\"sqrt_step\"
>677	ArrayIndexing	prhs [ 4 ]
>678	PrimaryExpression	4
>679	Identifier	prhs
>680	Identifier	bool
>681	Identifier	getScalarStructDef
>682	MemberAccess	param . sqrt_step
>683	Identifier	sqrt_step
>684	Identifier	param
>685	ExpressionStatement	 
>686	AssignmentExpr	param . lin_admm = getScalarStructDef < bool > ( prhs [ 4 ] , \"lin_admm\" , false )
>687	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"lin_admm\" , false )
>688	RelationalExpression	bool > ( prhs [ 4 ] , \"lin_admm\" , false )
>689	Expression	prhs [ 4 ] , \"lin_admm\" , false
>690	Expression	\"lin_admm\" , false
>691	Identifier	false
>692	PrimaryExpression	\"lin_admm\"
>693	ArrayIndexing	prhs [ 4 ]
>694	PrimaryExpression	4
>695	Identifier	prhs
>696	Identifier	bool
>697	Identifier	getScalarStructDef
>698	MemberAccess	param . lin_admm
>699	Identifier	lin_admm
>700	Identifier	param
>701	ExpressionStatement	 
>702	AssignmentExpr	param . admm = getScalarStructDef < bool > ( prhs [ 4 ] , \"admm\" , false )
>703	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"admm\" , false )
>704	RelationalExpression	bool > ( prhs [ 4 ] , \"admm\" , false )
>705	Expression	prhs [ 4 ] , \"admm\" , false
>706	Expression	\"admm\" , false
>707	Identifier	false
>708	PrimaryExpression	\"admm\"
>709	ArrayIndexing	prhs [ 4 ]
>710	PrimaryExpression	4
>711	Identifier	prhs
>712	Identifier	bool
>713	Identifier	getScalarStructDef
>714	MemberAccess	param . admm
>715	Identifier	admm
>716	Identifier	param
>717	ExpressionStatement	 
>718	Expression	prhs [ 4 ] , \"size_group\" , 1
>719	Expression	\"size_group\" , 1
>720	PrimaryExpression	1
>721	PrimaryExpression	\"size_group\"
>722	ArrayIndexing	prhs [ 4 ]
>723	PrimaryExpression	4
>724	Identifier	prhs
>725	Statement	 
>726	Statement	 
>727	Statement	 
>728	Statement	 
>729	Statement	 
>730	Statement	 
>731	Statement	 
>732	Statement	 
>733	ExpressionStatement	 
>734	AssignmentExpr	param . lambda3 = getScalarStructDef < T > ( prhs [ 4 ] , \"lambda3\" , 0.0 )
>735	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"lambda3\" , 0.0 )
>736	RelationalExpression	T > ( prhs [ 4 ] , \"lambda3\" , 0.0 )
>737	Expression	prhs [ 4 ] , \"lambda3\" , 0.0
>738	Expression	\"lambda3\" , 0.0
>739	PrimaryExpression	0.0
>740	PrimaryExpression	\"lambda3\"
>741	ArrayIndexing	prhs [ 4 ]
>742	PrimaryExpression	4
>743	Identifier	prhs
>744	Identifier	T
>745	Identifier	getScalarStructDef
>746	MemberAccess	param . lambda3
>747	Identifier	lambda3
>748	Identifier	param
>749	ExpressionStatement	 
>750	AssignmentExpr	param . lambda2 = getScalarStructDef < T > ( prhs [ 4 ] , \"lambda2\" , 0.0 )
>751	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"lambda2\" , 0.0 )
>752	RelationalExpression	T > ( prhs [ 4 ] , \"lambda2\" , 0.0 )
>753	Expression	prhs [ 4 ] , \"lambda2\" , 0.0
>754	Expression	\"lambda2\" , 0.0
>755	PrimaryExpression	0.0
>756	PrimaryExpression	\"lambda2\"
>757	ArrayIndexing	prhs [ 4 ]
>758	PrimaryExpression	4
>759	Identifier	prhs
>760	Identifier	T
>761	Identifier	getScalarStructDef
>762	MemberAccess	param . lambda2
>763	Identifier	lambda2
>764	Identifier	param
>765	ExpressionStatement	 
>766	AssignmentExpr	param . delta = getScalarStructDef < T > ( prhs [ 4 ] , \"delta\" , 1.0 )
>767	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"delta\" , 1.0 )
>768	RelationalExpression	T > ( prhs [ 4 ] , \"delta\" , 1.0 )
>769	Expression	prhs [ 4 ] , \"delta\" , 1.0
>770	Expression	\"delta\" , 1.0
>771	PrimaryExpression	1.0
>772	PrimaryExpression	\"delta\"
>773	ArrayIndexing	prhs [ 4 ]
>774	PrimaryExpression	4
>775	Identifier	prhs
>776	Identifier	T
>777	Identifier	getScalarStructDef
>778	MemberAccess	param . delta
>779	Identifier	delta
>780	Identifier	param
>781	ExpressionStatement	 
>782	AssignmentExpr	param . eval = nlhs == 2
>783	EqualityExpression	nlhs == 2
>784	PrimaryExpression	2
>785	Identifier	nlhs
>786	MemberAccess	param . eval
>787	Identifier	eval
>788	Identifier	param
>789	ExpressionStatement	 
>790	AssignmentExpr	param . verbose = getScalarStructDef < bool > ( prhs [ 4 ] , \"verbose\" , false )
>791	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"verbose\" , false )
>792	RelationalExpression	bool > ( prhs [ 4 ] , \"verbose\" , false )
>793	Expression	prhs [ 4 ] , \"verbose\" , false
>794	Expression	\"verbose\" , false
>795	Identifier	false
>796	PrimaryExpression	\"verbose\"
>797	ArrayIndexing	prhs [ 4 ]
>798	PrimaryExpression	4
>799	Identifier	prhs
>800	Identifier	bool
>801	Identifier	getScalarStructDef
>802	MemberAccess	param . verbose
>803	Identifier	verbose
>804	Identifier	param
>805	ExpressionStatement	 
>806	AssignmentExpr	param . intercept = getScalarStructDef < bool > ( prhs [ 4 ] , \"intercept\" , false )
>807	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"intercept\" , false )
>808	RelationalExpression	bool > ( prhs [ 4 ] , \"intercept\" , false )
>809	Expression	prhs [ 4 ] , \"intercept\" , false
>810	Expression	\"intercept\" , false
>811	Identifier	false
>812	PrimaryExpression	\"intercept\"
>813	ArrayIndexing	prhs [ 4 ]
>814	PrimaryExpression	4
>815	Identifier	prhs
>816	Identifier	bool
>817	Identifier	getScalarStructDef
>818	MemberAccess	param . intercept
>819	Identifier	intercept
>820	Identifier	param
>821	IfStatement	if ( param . loss == INCORRECT_LOSS )
>822	ExpressionStatement	 
>823	CallExpression	mexErrMsgTxt ( \"Unknown loss\" )
>824	ArgumentList	\"Unknown loss\"
>825	Argument	\"Unknown loss\"
>826	PrimaryExpression	\"Unknown loss\"
>827	Callee	mexErrMsgTxt
>828	Identifier	mexErrMsgTxt
>829	Condition	 
>830	EqualityExpression	param . loss == INCORRECT_LOSS
>831	Identifier	INCORRECT_LOSS
>832	MemberAccess	param . loss
>833	Identifier	loss
>834	Identifier	param
>835	ExpressionStatement	 
>836	AssignmentExpr	param . loss = loss_from_string ( param . name_loss )
>837	CallExpression	loss_from_string ( param . name_loss )
>838	ArgumentList	param . name_loss
>839	Argument	param . name_loss
>840	MemberAccess	param . name_loss
>841	Identifier	name_loss
>842	Identifier	param
>843	Callee	loss_from_string
>844	Identifier	loss_from_string
>845	MemberAccess	param . loss
>846	Identifier	loss
>847	Identifier	param
>848	ExpressionStatement	 
>849	CallExpression	getStringStruct ( prhs [ 4 ] , \"loss\" , param . name_loss , param . length_names )
>850	ArgumentList	prhs [ 4 ]
>851	Argument	param . length_names
>852	MemberAccess	param . length_names
>853	Identifier	length_names
>854	Identifier	param
>855	Argument	param . name_loss
>856	MemberAccess	param . name_loss
>857	Identifier	name_loss
>858	Identifier	param
>859	Argument	\"loss\"
>860	PrimaryExpression	\"loss\"
>861	Argument	prhs [ 4 ]
>862	ArrayIndexing	prhs [ 4 ]
>863	PrimaryExpression	4
>864	Identifier	prhs
>865	Callee	getStringStruct
>866	Identifier	getStringStruct
>867	IfStatement	if ( param . regul == INCORRECT_REG )
>868	ExpressionStatement	 
>869	CallExpression	mexErrMsgTxt ( \"Unknown regularization\" )
>870	ArgumentList	\"Unknown regularization\"
>871	Argument	\"Unknown regularization\"
>872	PrimaryExpression	\"Unknown regularization\"
>873	Callee	mexErrMsgTxt
>874	Identifier	mexErrMsgTxt
>875	Condition	 
>876	EqualityExpression	param . regul == INCORRECT_REG
>877	Identifier	INCORRECT_REG
>878	MemberAccess	param . regul
>879	Identifier	regul
>880	Identifier	param
>881	ExpressionStatement	 
>882	AssignmentExpr	param . regul = regul_from_string ( param . name_regul )
>883	CallExpression	regul_from_string ( param . name_regul )
>884	ArgumentList	param . name_regul
>885	Argument	param . name_regul
>886	MemberAccess	param . name_regul
>887	Identifier	name_regul
>888	Identifier	param
>889	Callee	regul_from_string
>890	Identifier	regul_from_string
>891	MemberAccess	param . regul
>892	Identifier	regul
>893	Identifier	param
>894	ExpressionStatement	 
>895	CallExpression	getStringStruct ( prhs [ 4 ] , \"regul\" , param . name_regul , param . length_names )
>896	ArgumentList	prhs [ 4 ]
>897	Argument	param . length_names
>898	MemberAccess	param . length_names
>899	Identifier	length_names
>900	Identifier	param
>901	Argument	param . name_regul
>902	MemberAccess	param . name_regul
>903	Identifier	name_regul
>904	Identifier	param
>905	Argument	\"regul\"
>906	PrimaryExpression	\"regul\"
>907	Argument	prhs [ 4 ]
>908	ArrayIndexing	prhs [ 4 ]
>909	PrimaryExpression	4
>910	Identifier	prhs
>911	Callee	getStringStruct
>912	Identifier	getStringStruct
>913	ExpressionStatement	 
>914	AssignmentExpr	param . lambda = getScalarStructDef < T > ( prhs [ 4 ] , \"lambda\" , T ( 1.0 ) )
>915	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"lambda\" , T ( 1.0 ) )
>916	RelationalExpression	T > ( prhs [ 4 ] , \"lambda\" , T ( 1.0 ) )
>917	Expression	prhs [ 4 ] , \"lambda\" , T ( 1.0 )
>918	Expression	\"lambda\" , T ( 1.0 )
>919	CallExpression	T ( 1.0 )
>920	ArgumentList	1.0
>921	Argument	1.0
>922	PrimaryExpression	1.0
>923	Callee	T
>924	Identifier	T
>925	PrimaryExpression	\"lambda\"
>926	ArrayIndexing	prhs [ 4 ]
>927	PrimaryExpression	4
>928	Identifier	prhs
>929	Identifier	T
>930	Identifier	getScalarStructDef
>931	MemberAccess	param . lambda
>932	Identifier	lambda
>933	Identifier	param
>934	ExpressionStatement	 
>935	AssignmentExpr	param . c = getScalarStructDef < T > ( prhs [ 4 ] , \"c\" , 1.0 )
>936	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"c\" , 1.0 )
>937	RelationalExpression	T > ( prhs [ 4 ] , \"c\" , 1.0 )
>938	Expression	prhs [ 4 ] , \"c\" , 1.0
>939	Expression	\"c\" , 1.0
>940	PrimaryExpression	1.0
>941	PrimaryExpression	\"c\"
>942	ArrayIndexing	prhs [ 4 ]
>943	PrimaryExpression	4
>944	Identifier	prhs
>945	Identifier	T
>946	Identifier	getScalarStructDef
>947	MemberAccess	param . c
>948	Identifier	c
>949	Identifier	param
>950	ExpressionStatement	 
>951	AssignmentExpr	param . gamma = MAX ( 1.01 , getScalarStructDef < T > ( prhs [ 4 ] , \"gamma\" , 1.5 ) )
>952	CallExpression	MAX ( 1.01 , getScalarStructDef < T > ( prhs [ 4 ] , \"gamma\" , 1.5 ) )
>953	ArgumentList	1.01
>954	Argument	getScalarStructDef < T > ( prhs [ 4 ] , \"gamma\" , 1.5 )
>955	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"gamma\" , 1.5 )
>956	RelationalExpression	T > ( prhs [ 4 ] , \"gamma\" , 1.5 )
>957	Expression	prhs [ 4 ] , \"gamma\" , 1.5
>958	Expression	\"gamma\" , 1.5
>959	PrimaryExpression	1.5
>960	PrimaryExpression	\"gamma\"
>961	ArrayIndexing	prhs [ 4 ]
>962	PrimaryExpression	4
>963	Identifier	prhs
>964	Identifier	T
>965	Identifier	getScalarStructDef
>966	Argument	1.01
>967	PrimaryExpression	1.01
>968	Callee	MAX
>969	Identifier	MAX
>970	MemberAccess	param . gamma
>971	Identifier	gamma
>972	Identifier	param
>973	ExpressionStatement	 
>974	AssignmentExpr	param . L0 = getScalarStructDef < T > ( prhs [ 4 ] , \"L0\" , 1.0 )
>975	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"L0\" , 1.0 )
>976	RelationalExpression	T > ( prhs [ 4 ] , \"L0\" , 1.0 )
>977	Expression	prhs [ 4 ] , \"L0\" , 1.0
>978	Expression	\"L0\" , 1.0
>979	PrimaryExpression	1.0
>980	PrimaryExpression	\"L0\"
>981	ArrayIndexing	prhs [ 4 ]
>982	PrimaryExpression	4
>983	Identifier	prhs
>984	Identifier	T
>985	Identifier	getScalarStructDef
>986	MemberAccess	param . L0
>987	Identifier	L0
>988	Identifier	param
>989	ExpressionStatement	 
>990	Expression	prhs [ 4 ] , \"max_iter_backtracking\" , 1000
>991	Expression	\"max_iter_backtracking\" , 1000
>992	PrimaryExpression	1000
>993	PrimaryExpression	\"max_iter_backtracking\"
>994	ArrayIndexing	prhs [ 4 ]
>995	PrimaryExpression	4
>996	Identifier	prhs
>997	Statement	 
>998	Statement	 
>999	Statement	 
>1000	Statement	 
>1001	Statement	 
>1002	Statement	 
>1003	Statement	 
>1004	Statement	 
>1005	ExpressionStatement	 
>1006	AssignmentExpr	param . compute_gram = getScalarStructDef < bool > ( prhs [ 4 ] , \"compute_gram\" , false )
>1007	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"compute_gram\" , false )
>1008	RelationalExpression	bool > ( prhs [ 4 ] , \"compute_gram\" , false )
>1009	Expression	prhs [ 4 ] , \"compute_gram\" , false
>1010	Expression	\"compute_gram\" , false
>1011	Identifier	false
>1012	PrimaryExpression	\"compute_gram\"
>1013	ArrayIndexing	prhs [ 4 ]
>1014	PrimaryExpression	4
>1015	Identifier	prhs
>1016	Identifier	bool
>1017	Identifier	getScalarStructDef
>1018	MemberAccess	param . compute_gram
>1019	Identifier	compute_gram
>1020	Identifier	param
>1021	ExpressionStatement	 
>1022	Expression	prhs [ 4 ] , \"it0\" , 100
>1023	Expression	\"it0\" , 100
>1024	PrimaryExpression	100
>1025	PrimaryExpression	\"it0\"
>1026	ArrayIndexing	prhs [ 4 ]
>1027	PrimaryExpression	4
>1028	Identifier	prhs
>1029	Statement	 
>1030	Statement	 
>1031	Statement	 
>1032	Statement	 
>1033	Statement	 
>1034	Statement	 
>1035	Statement	 
>1036	Statement	 
>1037	ExpressionStatement	 
>1038	AssignmentExpr	param . tol = getScalarStructDef < T > ( prhs [ 4 ] , \"tol\" , 0.000001 )
>1039	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"tol\" , 0.000001 )
>1040	RelationalExpression	T > ( prhs [ 4 ] , \"tol\" , 0.000001 )
>1041	Expression	prhs [ 4 ] , \"tol\" , 0.000001
>1042	Expression	\"tol\" , 0.000001
>1043	PrimaryExpression	0.000001
>1044	PrimaryExpression	\"tol\"
>1045	ArrayIndexing	prhs [ 4 ]
>1046	PrimaryExpression	4
>1047	Identifier	prhs
>1048	Identifier	T
>1049	Identifier	getScalarStructDef
>1050	MemberAccess	param . tol
>1051	Identifier	tol
>1052	Identifier	param
>1053	ExpressionStatement	 
>1054	Expression	prhs [ 4 ] , \"max_it\" , 1000
>1055	Expression	\"max_it\" , 1000
>1056	PrimaryExpression	1000
>1057	PrimaryExpression	\"max_it\"
>1058	ArrayIndexing	prhs [ 4 ]
>1059	PrimaryExpression	4
>1060	Identifier	prhs
>1061	Statement	 
>1062	Statement	 
>1063	Statement	 
>1064	Statement	 
>1065	Statement	 
>1066	Statement	 
>1067	Statement	 
>1068	Statement	 
>1069	ExpressionStatement	 
>1070	AssignmentExpr	param . pos = getScalarStructDef < bool > ( prhs [ 4 ] , \"pos\" , false )
>1071	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"pos\" , false )
>1072	RelationalExpression	bool > ( prhs [ 4 ] , \"pos\" , false )
>1073	Expression	prhs [ 4 ] , \"pos\" , false
>1074	Expression	\"pos\" , false
>1075	Identifier	false
>1076	PrimaryExpression	\"pos\"
>1077	ArrayIndexing	prhs [ 4 ]
>1078	PrimaryExpression	4
>1079	Identifier	prhs
>1080	Identifier	bool
>1081	Identifier	getScalarStructDef
>1082	MemberAccess	param . pos
>1083	Identifier	pos
>1084	Identifier	param
>1085	ExpressionStatement	 
>1086	Expression	prhs [ 4 ] , \"numThreads\" , - 1
>1087	Expression	\"numThreads\" , - 1
>1088	UnaryOp	- 1
>1089	PrimaryExpression	1
>1090	UnaryOperator	-
>1091	PrimaryExpression	\"numThreads\"
>1092	ArrayIndexing	prhs [ 4 ]
>1093	PrimaryExpression	4
>1094	Identifier	prhs
>1095	Statement	 
>1096	Statement	 
>1097	Statement	 
>1098	Statement	 
>1099	Statement	 
>1100	Statement	 
>1101	Statement	 
>1102	Statement	 
>1103	IdentifierDeclStatement	 
>1104	IdentifierDecl	param
>1105	Identifier	param
>1106	IdentifierDeclType	FISTA 
>1107	IdentifierDeclStatement	 
>1108	IdentifierDecl	alpha ( pr_alpha , pAlpha , nAlpha )
>1109	Expression	pr_alpha , pAlpha , nAlpha
>1110	Expression	pAlpha , nAlpha
>1111	Identifier	nAlpha
>1112	Identifier	pAlpha
>1113	Identifier	pr_alpha
>1114	Identifier	alpha
>1115	IdentifierDeclType	Matrix < T >
>1116	ExpressionStatement	 
>1117	CallExpression	mxGetPr ( plhs [ 0 ] )
>1118	ArgumentList	plhs [ 0 ]
>1119	Argument	plhs [ 0 ]
>1120	ArrayIndexing	plhs [ 0 ]
>1121	PrimaryExpression	0
>1122	Identifier	plhs
>1123	Callee	mxGetPr
>1124	Identifier	mxGetPr
>1125	Statement	 
>1126	Statement	 
>1127	Statement	 
>1128	Statement	 
>1129	Statement	 
>1130	Statement	 
>1131	Statement	 
>1132	Statement	 
>1133	Statement	 
>1134	ExpressionStatement	 
>1135	AssignmentExpr	plhs [ 0 ] = createMatrix < T > ( pAlpha , nAlpha )
>1136	RelationalExpression	createMatrix < T > ( pAlpha , nAlpha )
>1137	RelationalExpression	T > ( pAlpha , nAlpha )
>1138	Expression	pAlpha , nAlpha
>1139	Identifier	nAlpha
>1140	Identifier	pAlpha
>1141	Identifier	T
>1142	Identifier	createMatrix
>1143	ArrayIndexing	plhs [ 0 ]
>1144	PrimaryExpression	0
>1145	Identifier	plhs
>1146	ExpressionStatement	 
>1147	ArrayIndexing	dims_weights2 [ 1 ]
>1148	PrimaryExpression	1
>1149	Identifier	dims_weights2
>1150	Statement	 
>1151	Statement	 
>1152	Statement	 
>1153	Statement	 
>1154	Statement	 
>1155	Statement	 
>1156	Statement	 
>1157	Statement	 
>1158	Statement	 
>1159	Statement	 
>1160	Statement	 
>1161	Statement	 
>1162	Statement	 
>1163	Statement	 
>1164	Statement	 
>1165	Statement	 
>1166	Statement	 
>1167	Statement	 
>1168	IdentifierDeclStatement	 
>1169	IdentifierDecl	* dims_weights2 = mxGetDimensions ( ppr_weights2 )
>1170	AssignmentExpr	* dims_weights2 = mxGetDimensions ( ppr_weights2 )
>1171	CallExpression	mxGetDimensions ( ppr_weights2 )
>1172	ArgumentList	ppr_weights2
>1173	Argument	ppr_weights2
>1174	Identifier	ppr_weights2
>1175	Callee	mxGetDimensions
>1176	Identifier	mxGetDimensions
>1177	Identifier	dims_weights2
>1178	Identifier	dims_weights2
>1179	IdentifierDeclType	const mwSize *
>1180	ExpressionStatement	 
>1181	CallExpression	mxGetPr ( ppr_weights2 )
>1182	ArgumentList	ppr_weights2
>1183	Argument	ppr_weights2
>1184	Identifier	ppr_weights2
>1185	Callee	mxGetPr
>1186	Identifier	mxGetPr
>1187	Statement	 
>1188	Statement	 
>1189	Statement	 
>1190	Statement	 
>1191	Statement	 
>1192	Statement	 
>1193	Statement	 
>1194	Statement	 
>1195	Statement	 
>1196	IfStatement	if ( mxIsSparse ( ppr_weights2 ) )
>1197	ExpressionStatement	 
>1198	CallExpression	mexErrMsgTxt ( \"field stop_weights should not be sparse\" )
>1199	ArgumentList	\"field stop_weights should not be sparse\"
>1200	Argument	\"field stop_weights should not be sparse\"
>1201	PrimaryExpression	\"field stop_weights should not be sparse\"
>1202	Callee	mexErrMsgTxt
>1203	Identifier	mexErrMsgTxt
>1204	Condition	 
>1205	CallExpression	mxIsSparse ( ppr_weights2 )
>1206	ArgumentList	ppr_weights2
>1207	Argument	ppr_weights2
>1208	Identifier	ppr_weights2
>1209	Callee	mxIsSparse
>1210	Identifier	mxIsSparse
>1211	IdentifierDeclStatement	 
>1212	IdentifierDecl	* ppr_weights2 = mxGetField ( prhs [ 3 ] , 0 , \"stop_weights\" )
>1213	AssignmentExpr	* ppr_weights2 = mxGetField ( prhs [ 3 ] , 0 , \"stop_weights\" )
>1214	CallExpression	mxGetField ( prhs [ 3 ] , 0 , \"stop_weights\" )
>1215	ArgumentList	prhs [ 3 ]
>1216	Argument	\"stop_weights\"
>1217	PrimaryExpression	\"stop_weights\"
>1218	Argument	0
>1219	PrimaryExpression	0
>1220	Argument	prhs [ 3 ]
>1221	ArrayIndexing	prhs [ 3 ]
>1222	PrimaryExpression	3
>1223	Identifier	prhs
>1224	Callee	mxGetField
>1225	Identifier	mxGetField
>1226	Identifier	ppr_weights2
>1227	Identifier	ppr_weights2
>1228	IdentifierDeclType	mxArray *
>1229	ExpressionStatement	 
>1230	ArrayIndexing	dims_weights [ 1 ]
>1231	PrimaryExpression	1
>1232	Identifier	dims_weights
>1233	Statement	 
>1234	Statement	 
>1235	Statement	 
>1236	Statement	 
>1237	Statement	 
>1238	Statement	 
>1239	Statement	 
>1240	Statement	 
>1241	Statement	 
>1242	Statement	 
>1243	Statement	 
>1244	Statement	 
>1245	Statement	 
>1246	Statement	 
>1247	Statement	 
>1248	Statement	 
>1249	Statement	 
>1250	Statement	 
>1251	IdentifierDeclStatement	 
>1252	IdentifierDecl	* dims_weights = mxGetDimensions ( ppr_weights )
>1253	AssignmentExpr	* dims_weights = mxGetDimensions ( ppr_weights )
>1254	CallExpression	mxGetDimensions ( ppr_weights )
>1255	ArgumentList	ppr_weights
>1256	Argument	ppr_weights
>1257	Identifier	ppr_weights
>1258	Callee	mxGetDimensions
>1259	Identifier	mxGetDimensions
>1260	Identifier	dims_weights
>1261	Identifier	dims_weights
>1262	IdentifierDeclType	const mwSize *
>1263	ExpressionStatement	 
>1264	CallExpression	mxGetPr ( ppr_weights )
>1265	ArgumentList	ppr_weights
>1266	Argument	ppr_weights
>1267	Identifier	ppr_weights
>1268	Callee	mxGetPr
>1269	Identifier	mxGetPr
>1270	Statement	 
>1271	Statement	 
>1272	Statement	 
>1273	Statement	 
>1274	Statement	 
>1275	Statement	 
>1276	Statement	 
>1277	Statement	 
>1278	Statement	 
>1279	IfStatement	if ( mxIsSparse ( ppr_weights ) )
>1280	ExpressionStatement	 
>1281	CallExpression	mexErrMsgTxt ( \"field start_weights should not be sparse\" )
>1282	ArgumentList	\"field start_weights should not be sparse\"
>1283	Argument	\"field start_weights should not be sparse\"
>1284	PrimaryExpression	\"field start_weights should not be sparse\"
>1285	Callee	mexErrMsgTxt
>1286	Identifier	mexErrMsgTxt
>1287	Condition	 
>1288	CallExpression	mxIsSparse ( ppr_weights )
>1289	ArgumentList	ppr_weights
>1290	Argument	ppr_weights
>1291	Identifier	ppr_weights
>1292	Callee	mxIsSparse
>1293	Identifier	mxIsSparse
>1294	IdentifierDeclStatement	 
>1295	IdentifierDecl	* ppr_weights = mxGetField ( prhs [ 3 ] , 0 , \"start_weights\" )
>1296	AssignmentExpr	* ppr_weights = mxGetField ( prhs [ 3 ] , 0 , \"start_weights\" )
>1297	CallExpression	mxGetField ( prhs [ 3 ] , 0 , \"start_weights\" )
>1298	ArgumentList	prhs [ 3 ]
>1299	Argument	\"start_weights\"
>1300	PrimaryExpression	\"start_weights\"
>1301	Argument	0
>1302	PrimaryExpression	0
>1303	Argument	prhs [ 3 ]
>1304	ArrayIndexing	prhs [ 3 ]
>1305	PrimaryExpression	3
>1306	Identifier	prhs
>1307	Callee	mxGetField
>1308	Identifier	mxGetField
>1309	Identifier	ppr_weights
>1310	Identifier	ppr_weights
>1311	IdentifierDeclType	mxArray *
>1312	ExpressionStatement	 
>1313	ArrayIndexing	dims_GG [ 1 ]
>1314	PrimaryExpression	1
>1315	Identifier	dims_GG
>1316	Statement	 
>1317	Statement	 
>1318	Statement	 
>1319	Statement	 
>1320	Statement	 
>1321	Statement	 
>1322	Statement	 
>1323	ExpressionStatement	 
>1324	ArrayIndexing	dims_GG [ 0 ]
>1325	PrimaryExpression	0
>1326	Identifier	dims_GG
>1327	Statement	 
>1328	Statement	 
>1329	Statement	 
>1330	Statement	 
>1331	Statement	 
>1332	Statement	 
>1333	Statement	 
>1334	IdentifierDeclStatement	 
>1335	IdentifierDecl	* dims_GG = mxGetDimensions ( ppr_GG )
>1336	AssignmentExpr	* dims_GG = mxGetDimensions ( ppr_GG )
>1337	CallExpression	mxGetDimensions ( ppr_GG )
>1338	ArgumentList	ppr_GG
>1339	Argument	ppr_GG
>1340	Identifier	ppr_GG
>1341	Callee	mxGetDimensions
>1342	Identifier	mxGetDimensions
>1343	Identifier	dims_GG
>1344	Identifier	dims_GG
>1345	IdentifierDeclType	const mwSize *
>1346	IdentifierDeclStatement	 
>1347	IdentifierDecl	* GG_pB = mxGetJc ( ppr_GG )
>1348	AssignmentExpr	* GG_pB = mxGetJc ( ppr_GG )
>1349	CallExpression	mxGetJc ( ppr_GG )
>1350	ArgumentList	ppr_GG
>1351	Argument	ppr_GG
>1352	Identifier	ppr_GG
>1353	Callee	mxGetJc
>1354	Identifier	mxGetJc
>1355	Identifier	GG_pB
>1356	Identifier	GG_pB
>1357	IdentifierDeclType	mwSize *
>1358	IdentifierDeclStatement	 
>1359	IdentifierDecl	* GG_r = mxGetIr ( ppr_GG )
>1360	AssignmentExpr	* GG_r = mxGetIr ( ppr_GG )
>1361	CallExpression	mxGetIr ( ppr_GG )
>1362	ArgumentList	ppr_GG
>1363	Argument	ppr_GG
>1364	Identifier	ppr_GG
>1365	Callee	mxGetIr
>1366	Identifier	mxGetIr
>1367	Identifier	GG_r
>1368	Identifier	GG_r
>1369	IdentifierDeclType	mwSize *
>1370	ExpressionStatement	 
>1371	CallExpression	mxGetPr ( ppr_GG )
>1372	ArgumentList	ppr_GG
>1373	Argument	ppr_GG
>1374	Identifier	ppr_GG
>1375	Callee	mxGetPr
>1376	Identifier	mxGetPr
>1377	Statement	 
>1378	Statement	 
>1379	Statement	 
>1380	Statement	 
>1381	Statement	 
>1382	Statement	 
>1383	Statement	 
>1384	Statement	 
>1385	Statement	 
>1386	IfStatement	if ( ! mxIsSparse ( ppr_GG ) )
>1387	ExpressionStatement	 
>1388	CallExpression	mexErrMsgTxt ( \"field weights should be sparse\" )
>1389	ArgumentList	\"field weights should be sparse\"
>1390	Argument	\"field weights should be sparse\"
>1391	PrimaryExpression	\"field weights should be sparse\"
>1392	Callee	mexErrMsgTxt
>1393	Identifier	mexErrMsgTxt
>1394	Condition	 
>1395	UnaryOp	! mxIsSparse ( ppr_GG )
>1396	CallExpression	mxIsSparse ( ppr_GG )
>1397	ArgumentList	ppr_GG
>1398	Argument	ppr_GG
>1399	Identifier	ppr_GG
>1400	Callee	mxIsSparse
>1401	Identifier	mxIsSparse
>1402	UnaryOperator	!
>1403	IdentifierDeclStatement	 
>1404	IdentifierDecl	* ppr_GG = mxGetField ( prhs [ 3 ] , 0 , \"weights\" )
>1405	AssignmentExpr	* ppr_GG = mxGetField ( prhs [ 3 ] , 0 , \"weights\" )
>1406	CallExpression	mxGetField ( prhs [ 3 ] , 0 , \"weights\" )
>1407	ArgumentList	prhs [ 3 ]
>1408	Argument	\"weights\"
>1409	PrimaryExpression	\"weights\"
>1410	Argument	0
>1411	PrimaryExpression	0
>1412	Argument	prhs [ 3 ]
>1413	ArrayIndexing	prhs [ 3 ]
>1414	PrimaryExpression	3
>1415	Identifier	prhs
>1416	Callee	mxGetField
>1417	Identifier	mxGetField
>1418	Identifier	ppr_GG
>1419	Identifier	ppr_GG
>1420	IdentifierDeclType	mxArray *
>1421	IdentifierDeclStatement	 
>1422	IdentifierDecl	alpha0 ( pr_alpha0 , pAlpha , nAlpha )
>1423	Expression	pr_alpha0 , pAlpha , nAlpha
>1424	Expression	pAlpha , nAlpha
>1425	Identifier	nAlpha
>1426	Identifier	pAlpha
>1427	Identifier	pr_alpha0
>1428	Identifier	alpha0
>1429	IdentifierDeclType	Matrix < T >
>1430	ExpressionStatement	 
>1431	ArrayIndexing	dimsAlpha [ 1 ]
>1432	PrimaryExpression	1
>1433	Identifier	dimsAlpha
>1434	Statement	 
>1435	Statement	 
>1436	Statement	 
>1437	Statement	 
>1438	Statement	 
>1439	Statement	 
>1440	Statement	 
>1441	ExpressionStatement	 
>1442	ArrayIndexing	dimsAlpha [ 0 ]
>1443	PrimaryExpression	0
>1444	Identifier	dimsAlpha
>1445	Statement	 
>1446	Statement	 
>1447	Statement	 
>1448	Statement	 
>1449	Statement	 
>1450	Statement	 
>1451	Statement	 
>1452	IdentifierDeclStatement	 
>1453	IdentifierDecl	* dimsAlpha = mxGetDimensions ( prhs [ 2 ] )
>1454	AssignmentExpr	* dimsAlpha = mxGetDimensions ( prhs [ 2 ] )
>1455	CallExpression	mxGetDimensions ( prhs [ 2 ] )
>1456	ArgumentList	prhs [ 2 ]
>1457	Argument	prhs [ 2 ]
>1458	ArrayIndexing	prhs [ 2 ]
>1459	PrimaryExpression	2
>1460	Identifier	prhs
>1461	Callee	mxGetDimensions
>1462	Identifier	mxGetDimensions
>1463	Identifier	dimsAlpha
>1464	Identifier	dimsAlpha
>1465	IdentifierDeclType	const mwSize *
>1466	ExpressionStatement	 
>1467	CallExpression	mxGetPr ( prhs [ 2 ] )
>1468	ArgumentList	prhs [ 2 ]
>1469	Argument	prhs [ 2 ]
>1470	ArrayIndexing	prhs [ 2 ]
>1471	PrimaryExpression	2
>1472	Identifier	prhs
>1473	Callee	mxGetPr
>1474	Identifier	mxGetPr
>1475	Statement	 
>1476	Statement	 
>1477	Statement	 
>1478	Statement	 
>1479	Statement	 
>1480	Statement	 
>1481	Statement	 
>1482	Statement	 
>1483	Statement	 
>1484	IfStatement	if ( mxIsSparse ( prhs [ 1 ] ) )
>1485	ElseStatement	else
>1486	CompoundStatement	 
>1487	ExpressionStatement	 
>1488	AssignmentExpr	D = new Matrix < T > ( prD , m , p )
>1489	Expression	prD , m , p
>1490	Expression	m , p
>1491	Identifier	p
>1492	Identifier	m
>1493	Identifier	prD
>1494	Identifier	D
>1495	ExpressionStatement	 
>1496	CallExpression	mxGetPr ( prhs [ 1 ] )
>1497	ArgumentList	prhs [ 1 ]
>1498	Argument	prhs [ 1 ]
>1499	ArrayIndexing	prhs [ 1 ]
>1500	PrimaryExpression	1
>1501	Identifier	prhs
>1502	Callee	mxGetPr
>1503	Identifier	mxGetPr
>1504	Statement	 
>1505	Statement	 
>1506	Statement	 
>1507	Statement	 
>1508	Statement	 
>1509	Statement	 
>1510	Statement	 
>1511	Statement	 
>1512	Statement	 
>1513	CompoundStatement	 
>1514	ExpressionStatement	 
>1515	AssignmentExpr	D = new SpMatrix < T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , mD , p , D_pB2 [ p ] )
>1516	Expression	D_v2 , D_r2 , D_pB2 , D_pE2 , mD , p , D_pB2 [ p ]
>1517	Expression	D_r2 , D_pB2 , D_pE2 , mD , p , D_pB2 [ p ]
>1518	Expression	D_pB2 , D_pE2 , mD , p , D_pB2 [ p ]
>1519	Expression	D_pE2 , mD , p , D_pB2 [ p ]
>1520	Expression	mD , p , D_pB2 [ p ]
>1521	Expression	p , D_pB2 [ p ]
>1522	ArrayIndexing	D_pB2 [ p ]
>1523	Identifier	p
>1524	Identifier	D_pB2
>1525	Identifier	p
>1526	Identifier	mD
>1527	Identifier	D_pE2
>1528	Identifier	D_pB2
>1529	Identifier	D_r2
>1530	Identifier	D_v2
>1531	Identifier	D
>1532	ExpressionStatement	 
>1533	RelationalExpression	createCopySparse < T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p )
>1534	RelationalExpression	T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p )
>1535	Expression	D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p
>1536	Expression	D_r2 , D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p
>1537	Expression	D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p
>1538	Expression	D_pE2 , D_v , D_r , D_pB , D_pE , p
>1539	Expression	D_v , D_r , D_pB , D_pE , p
>1540	Expression	D_r , D_pB , D_pE , p
>1541	Expression	D_pB , D_pE , p
>1542	Expression	D_pE , p
>1543	Identifier	p
>1544	Identifier	D_pE
>1545	Identifier	D_pB
>1546	Identifier	D_r
>1547	Identifier	D_v
>1548	Identifier	D_pE2
>1549	Identifier	D_pB2
>1550	Identifier	D_r2
>1551	Identifier	D_v2
>1552	Identifier	T
>1553	Identifier	createCopySparse
>1554	ExpressionStatement	 
>1555	AssignmentExpr	D_pE = D_pB + 1
>1556	AdditiveExpression	D_pB + 1
>1557	PrimaryExpression	1
>1558	Identifier	D_pB
>1559	Identifier	D_pE
>1560	ExpressionStatement	 
>1561	AssignmentExpr	D_pB = mxGetJc ( prhs [ 1 ] )
>1562	CallExpression	mxGetJc ( prhs [ 1 ] )
>1563	ArgumentList	prhs [ 1 ]
>1564	Argument	prhs [ 1 ]
>1565	ArrayIndexing	prhs [ 1 ]
>1566	PrimaryExpression	1
>1567	Identifier	prhs
>1568	Callee	mxGetJc
>1569	Identifier	mxGetJc
>1570	Identifier	D_pB
>1571	ExpressionStatement	 
>1572	AssignmentExpr	D_r = mxGetIr ( prhs [ 1 ] )
>1573	CallExpression	mxGetIr ( prhs [ 1 ] )
>1574	ArgumentList	prhs [ 1 ]
>1575	Argument	prhs [ 1 ]
>1576	ArrayIndexing	prhs [ 1 ]
>1577	PrimaryExpression	1
>1578	Identifier	prhs
>1579	Callee	mxGetIr
>1580	Identifier	mxGetIr
>1581	Identifier	D_r
>1582	ExpressionStatement	 
>1583	CallExpression	mxGetPr ( prhs [ 1 ] )
>1584	ArgumentList	prhs [ 1 ]
>1585	Argument	prhs [ 1 ]
>1586	ArrayIndexing	prhs [ 1 ]
>1587	PrimaryExpression	1
>1588	Identifier	prhs
>1589	Callee	mxGetPr
>1590	Identifier	mxGetPr
>1591	Statement	 
>1592	Statement	 
>1593	Statement	 
>1594	Statement	 
>1595	Statement	 
>1596	Statement	 
>1597	Statement	 
>1598	Condition	 
>1599	CallExpression	mxIsSparse ( prhs [ 1 ] )
>1600	ArgumentList	prhs [ 1 ]
>1601	Argument	prhs [ 1 ]
>1602	ArrayIndexing	prhs [ 1 ]
>1603	PrimaryExpression	1
>1604	Identifier	prhs
>1605	Callee	mxIsSparse
>1606	Identifier	mxIsSparse
>1607	IdentifierDeclStatement	 
>1608	IdentifierDecl	* D_v2
>1609	Identifier	D_v2
>1610	IdentifierDeclType	T *
>1611	IdentifierDeclStatement	 
>1612	IdentifierDecl	* D_pE2
>1613	Identifier	D_pE2
>1614	IdentifierDeclType	long *
>1615	IdentifierDecl	* D_pB2
>1616	Identifier	D_pB2
>1617	IdentifierDeclType	long *
>1618	IdentifierDecl	* D_r2
>1619	Identifier	D_r2
>1620	IdentifierDeclType	long *
>1621	IdentifierDeclStatement	 
>1622	IdentifierDecl	* D_pE
>1623	Identifier	D_pE
>1624	IdentifierDeclType	mwSize *
>1625	IdentifierDecl	* D_pB
>1626	Identifier	D_pB
>1627	IdentifierDeclType	mwSize *
>1628	IdentifierDecl	* D_r
>1629	Identifier	D_r
>1630	IdentifierDeclType	mwSize *
>1631	IdentifierDeclStatement	 
>1632	IdentifierDecl	* D_v
>1633	Identifier	D_v
>1634	IdentifierDeclType	double *
>1635	IdentifierDeclStatement	 
>1636	IdentifierDecl	* D
>1637	Identifier	D
>1638	IdentifierDeclType	AbstractMatrixB < T > *
>1639	ExpressionStatement	 
>1640	ArrayIndexing	dimsD [ 1 ]
>1641	PrimaryExpression	1
>1642	Identifier	dimsD
>1643	Statement	 
>1644	Statement	 
>1645	Statement	 
>1646	Statement	 
>1647	Statement	 
>1648	Statement	 
>1649	Statement	 
>1650	ExpressionStatement	 
>1651	ArrayIndexing	dimsD [ 0 ]
>1652	PrimaryExpression	0
>1653	Identifier	dimsD
>1654	Statement	 
>1655	Statement	 
>1656	Statement	 
>1657	Statement	 
>1658	Statement	 
>1659	Statement	 
>1660	Statement	 
>1661	IdentifierDeclStatement	 
>1662	IdentifierDecl	* dimsD = mxGetDimensions ( prhs [ 1 ] )
>1663	AssignmentExpr	* dimsD = mxGetDimensions ( prhs [ 1 ] )
>1664	CallExpression	mxGetDimensions ( prhs [ 1 ] )
>1665	ArgumentList	prhs [ 1 ]
>1666	Argument	prhs [ 1 ]
>1667	ArrayIndexing	prhs [ 1 ]
>1668	PrimaryExpression	1
>1669	Identifier	prhs
>1670	Callee	mxGetDimensions
>1671	Identifier	mxGetDimensions
>1672	Identifier	dimsD
>1673	Identifier	dimsD
>1674	IdentifierDeclType	const mwSize *
>1675	IdentifierDeclStatement	 
>1676	IdentifierDecl	X ( prX , m , n )
>1677	Expression	prX , m , n
>1678	Expression	m , n
>1679	Identifier	n
>1680	Identifier	m
>1681	Identifier	prX
>1682	Identifier	X
>1683	IdentifierDeclType	Matrix < T >
>1684	ExpressionStatement	 
>1685	ArrayIndexing	dimsX [ 1 ]
>1686	PrimaryExpression	1
>1687	Identifier	dimsX
>1688	Statement	 
>1689	Statement	 
>1690	Statement	 
>1691	Statement	 
>1692	Statement	 
>1693	Statement	 
>1694	Statement	 
>1695	ExpressionStatement	 
>1696	ArrayIndexing	dimsX [ 0 ]
>1697	PrimaryExpression	0
>1698	Identifier	dimsX
>1699	Statement	 
>1700	Statement	 
>1701	Statement	 
>1702	Statement	 
>1703	Statement	 
>1704	Statement	 
>1705	Statement	 
>1706	IdentifierDeclStatement	 
>1707	IdentifierDecl	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>1708	AssignmentExpr	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>1709	CallExpression	mxGetDimensions ( prhs [ 0 ] )
>1710	ArgumentList	prhs [ 0 ]
>1711	Argument	prhs [ 0 ]
>1712	ArrayIndexing	prhs [ 0 ]
>1713	PrimaryExpression	0
>1714	Identifier	prhs
>1715	Callee	mxGetDimensions
>1716	Identifier	mxGetDimensions
>1717	Identifier	dimsX
>1718	Identifier	dimsX
>1719	IdentifierDeclType	const mwSize *
>1720	ExpressionStatement	 
>1721	CallExpression	mxGetPr ( prhs [ 0 ] )
>1722	ArgumentList	prhs [ 0 ]
>1723	Argument	prhs [ 0 ]
>1724	ArrayIndexing	prhs [ 0 ]
>1725	PrimaryExpression	0
>1726	Identifier	prhs
>1727	Callee	mxGetPr
>1728	Identifier	mxGetPr
>1729	Statement	 
>1730	Statement	 
>1731	Statement	 
>1732	Statement	 
>1733	Statement	 
>1734	Statement	 
>1735	Statement	 
>1736	Statement	 
>1737	Statement	 
>1738	IfStatement	if ( ! mxIsStruct ( prhs [ 4 ] ) )
>1739	ExpressionStatement	 
>1740	CallExpression	mexErrMsgTxt ( \"argument 5 should be struct\" )
>1741	ArgumentList	\"argument 5 should be struct\"
>1742	Argument	\"argument 5 should be struct\"
>1743	PrimaryExpression	\"argument 5 should be struct\"
>1744	Callee	mexErrMsgTxt
>1745	Identifier	mexErrMsgTxt
>1746	Condition	 
>1747	UnaryOp	! mxIsStruct ( prhs [ 4 ] )
>1748	CallExpression	mxIsStruct ( prhs [ 4 ] )
>1749	ArgumentList	prhs [ 4 ]
>1750	Argument	prhs [ 4 ]
>1751	ArrayIndexing	prhs [ 4 ]
>1752	PrimaryExpression	4
>1753	Identifier	prhs
>1754	Callee	mxIsStruct
>1755	Identifier	mxIsStruct
>1756	UnaryOperator	!
>1757	IfStatement	if ( ! mxIsStruct ( prhs [ 3 ] ) )
>1758	ExpressionStatement	 
>1759	CallExpression	mexErrMsgTxt ( \"argument 4 should be struct\" )
>1760	ArgumentList	\"argument 4 should be struct\"
>1761	Argument	\"argument 4 should be struct\"
>1762	PrimaryExpression	\"argument 4 should be struct\"
>1763	Callee	mexErrMsgTxt
>1764	Identifier	mexErrMsgTxt
>1765	Condition	 
>1766	UnaryOp	! mxIsStruct ( prhs [ 3 ] )
>1767	CallExpression	mxIsStruct ( prhs [ 3 ] )
>1768	ArgumentList	prhs [ 3 ]
>1769	Argument	prhs [ 3 ]
>1770	ArrayIndexing	prhs [ 3 ]
>1771	PrimaryExpression	3
>1772	Identifier	prhs
>1773	Callee	mxIsStruct
>1774	Identifier	mxIsStruct
>1775	UnaryOperator	!
>1776	IfStatement	if ( mxIsSparse ( prhs [ 2 ] ) )
>1777	ExpressionStatement	 
>1778	CallExpression	mexErrMsgTxt ( \"argument 3 should not be sparse\" )
>1779	ArgumentList	\"argument 3 should not be sparse\"
>1780	Argument	\"argument 3 should not be sparse\"
>1781	PrimaryExpression	\"argument 3 should not be sparse\"
>1782	Callee	mexErrMsgTxt
>1783	Identifier	mexErrMsgTxt
>1784	Condition	 
>1785	CallExpression	mxIsSparse ( prhs [ 2 ] )
>1786	ArgumentList	prhs [ 2 ]
>1787	Argument	prhs [ 2 ]
>1788	ArrayIndexing	prhs [ 2 ]
>1789	PrimaryExpression	2
>1790	Identifier	prhs
>1791	Callee	mxIsSparse
>1792	Identifier	mxIsSparse
>1793	IfStatement	if ( ! mexCheckType < T > ( prhs [ 2 ] ) )
>1794	ExpressionStatement	 
>1795	CallExpression	mexErrMsgTxt ( \"type of argument 3 is not consistent\" )
>1796	ArgumentList	\"type of argument 3 is not consistent\"
>1797	Argument	\"type of argument 3 is not consistent\"
>1798	PrimaryExpression	\"type of argument 3 is not consistent\"
>1799	Callee	mexErrMsgTxt
>1800	Identifier	mexErrMsgTxt
>1801	Condition	 
>1802	RelationalExpression	! mexCheckType < T > ( prhs [ 2 ] )
>1803	RelationalExpression	T > ( prhs [ 2 ] )
>1804	ArrayIndexing	prhs [ 2 ]
>1805	PrimaryExpression	2
>1806	Identifier	prhs
>1807	Identifier	T
>1808	UnaryOp	! mexCheckType
>1809	Identifier	mexCheckType
>1810	UnaryOperator	!
>1811	IfStatement	if ( ! mexCheckType < T > ( prhs [ 1 ] ) )
>1812	ExpressionStatement	 
>1813	CallExpression	mexErrMsgTxt ( \"type of argument 2 is not consistent\" )
>1814	ArgumentList	\"type of argument 2 is not consistent\"
>1815	Argument	\"type of argument 2 is not consistent\"
>1816	PrimaryExpression	\"type of argument 2 is not consistent\"
>1817	Callee	mexErrMsgTxt
>1818	Identifier	mexErrMsgTxt
>1819	Condition	 
>1820	RelationalExpression	! mexCheckType < T > ( prhs [ 1 ] )
>1821	RelationalExpression	T > ( prhs [ 1 ] )
>1822	ArrayIndexing	prhs [ 1 ]
>1823	PrimaryExpression	1
>1824	Identifier	prhs
>1825	Identifier	T
>1826	UnaryOp	! mexCheckType
>1827	Identifier	mexCheckType
>1828	UnaryOperator	!
>1829	IfStatement	if ( mxIsSparse ( prhs [ 0 ] ) )
>1830	ExpressionStatement	 
>1831	CallExpression	mexErrMsgTxt ( \"argument 1 should not be sparse\" )
>1832	ArgumentList	\"argument 1 should not be sparse\"
>1833	Argument	\"argument 1 should not be sparse\"
>1834	PrimaryExpression	\"argument 1 should not be sparse\"
>1835	Callee	mexErrMsgTxt
>1836	Identifier	mexErrMsgTxt
>1837	Condition	 
>1838	CallExpression	mxIsSparse ( prhs [ 0 ] )
>1839	ArgumentList	prhs [ 0 ]
>1840	Argument	prhs [ 0 ]
>1841	ArrayIndexing	prhs [ 0 ]
>1842	PrimaryExpression	0
>1843	Identifier	prhs
>1844	Callee	mxIsSparse
>1845	Identifier	mxIsSparse
>1846	IfStatement	if ( ! mexCheckType < T > ( prhs [ 0 ] ) )
>1847	ExpressionStatement	 
>1848	CallExpression	mexErrMsgTxt ( \"type of argument 1 is not consistent\" )
>1849	ArgumentList	\"type of argument 1 is not consistent\"
>1850	Argument	\"type of argument 1 is not consistent\"
>1851	PrimaryExpression	\"type of argument 1 is not consistent\"
>1852	Callee	mexErrMsgTxt
>1853	Identifier	mexErrMsgTxt
>1854	Condition	 
>1855	RelationalExpression	! mexCheckType < T > ( prhs [ 0 ] )
>1856	RelationalExpression	T > ( prhs [ 0 ] )
>1857	ArrayIndexing	prhs [ 0 ]
>1858	PrimaryExpression	0
>1859	Identifier	prhs
>1860	Identifier	T
>1861	UnaryOp	! mexCheckType
>1862	Identifier	mexCheckType
>1863	UnaryOperator	!
>1992	FunctionDef	mexFunction (int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ])
>1993	ParameterList	int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ]
>1994	Parameter	 
>1995	Identifier	prhs
>1996	ParameterType	const mxArray * [ ]
>1997	Parameter	 
>1998	Identifier	nrhs
>1999	ParameterType	int
>2000	Parameter	 
>2001	Identifier	plhs
>2002	ParameterType	mxArray * [ ]
>2003	Parameter	 
>2004	Identifier	nlhs
>2005	ParameterType	int
>2006	ReturnType	void
>2007	CompoundStatement	 
>2008	IfStatement	if ( mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS )
>2009	ElseStatement	else
>2010	CompoundStatement	 
>2011	ExpressionStatement	 
>2012	RelationalExpression	callFunction < float > ( plhs , prhs , nlhs )
>2013	RelationalExpression	float > ( plhs , prhs , nlhs )
>2014	Expression	plhs , prhs , nlhs
>2015	Expression	prhs , nlhs
>2016	Identifier	nlhs
>2017	Identifier	prhs
>2018	Identifier	plhs
>2019	Identifier	float
>2020	Identifier	callFunction
>2021	CompoundStatement	 
>2022	ExpressionStatement	 
>2023	RelationalExpression	callFunction < double > ( plhs , prhs , nlhs )
>2024	RelationalExpression	double > ( plhs , prhs , nlhs )
>2025	Expression	plhs , prhs , nlhs
>2026	Expression	prhs , nlhs
>2027	Identifier	nlhs
>2028	Identifier	prhs
>2029	Identifier	plhs
>2030	Identifier	double
>2031	Identifier	callFunction
>2032	Condition	 
>2033	EqualityExpression	mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS
>2034	Identifier	mxDOUBLE_CLASS
>2035	CallExpression	mxGetClassID ( prhs [ 0 ] )
>2036	ArgumentList	prhs [ 0 ]
>2037	Argument	prhs [ 0 ]
>2038	ArrayIndexing	prhs [ 0 ]
>2039	PrimaryExpression	0
>2040	Identifier	prhs
>2041	Callee	mxGetClassID
>2042	Identifier	mxGetClassID
>2043	IfStatement	if ( nlhs != 1 && nlhs != 2 )
>2044	ExpressionStatement	 
>2045	CallExpression	mexErrMsgTxt ( \"Bad number of output arguments\" )
>2046	ArgumentList	\"Bad number of output arguments\"
>2047	Argument	\"Bad number of output arguments\"
>2048	PrimaryExpression	\"Bad number of output arguments\"
>2049	Callee	mexErrMsgTxt
>2050	Identifier	mexErrMsgTxt
>2051	Condition	 
>2052	AndExpression	nlhs != 1 && nlhs != 2
>2053	EqualityExpression	nlhs != 2
>2054	PrimaryExpression	2
>2055	Identifier	nlhs
>2056	EqualityExpression	nlhs != 1
>2057	PrimaryExpression	1
>2058	Identifier	nlhs
>2059	IfStatement	if ( nrhs != 5 )
>2060	ExpressionStatement	 
>2061	CallExpression	mexErrMsgTxt ( \"Bad number of inputs arguments\" )
>2062	ArgumentList	\"Bad number of inputs arguments\"
>2063	Argument	\"Bad number of inputs arguments\"
>2064	PrimaryExpression	\"Bad number of inputs arguments\"
>2065	Callee	mexErrMsgTxt
>2066	Identifier	mexErrMsgTxt
>2067	Condition	 
>2068	EqualityExpression	nrhs != 5
>2069	PrimaryExpression	5
>2070	Identifier	nrhs
<3=15,14,4
<4=11,8,5
<5=7,6
<8=9,10
<11=13,12
<15=1846,1829,1811,1793,1776,1757,1738,1737,1736,1735,1734,1733,1732,1731,1730,1729,1720,1706,1705,1704,1703,1702,1701,1700,1699,1695,1694,1693,1692,1691,1690,1689,1688,1684,1675,1661,1660,1659,1658,1657,1656,1655,1654,1650,1649,1648,1647,1646,1645,1644,1643,1639,1635,1631,1621,1611,1607,1484,1483,1482,1481,1480,1479,1478,1477,1476,1475,1466,1452,1451,1450,1449,1448,1447,1446,1445,1441,1440,1439,1438,1437,1436,1435,1434,1430,1421,1403,1386,1385,1384,1383,1382,1381,1380,1379,1378,1377,1370,1358,1346,1334,1333,1332,1331,1330,1329,1328,1327,1323,1322,1321,1320,1319,1318,1317,1316,1312,1294,1279,1278,1277,1276,1275,1274,1273,1272,1271,1270,1263,1251,1250,1249,1248,1247,1246,1245,1244,1243,1242,1241,1240,1239,1238,1237,1236,1235,1234,1233,1229,1211,1196,1195,1194,1193,1192,1191,1190,1189,1188,1187,1180,1168,1167,1166,1165,1164,1163,1162,1161,1160,1159,1158,1157,1156,1155,1154,1153,1152,1151,1150,1146,1134,1133,1132,1131,1130,1129,1128,1127,1126,1125,1116,1107,1103,1102,1101,1100,1099,1098,1097,1096,1095,1085,1069,1068,1067,1066,1065,1064,1063,1062,1061,1053,1037,1036,1035,1034,1033,1032,1031,1030,1029,1021,1005,1004,1003,1002,1001,1000,999,998,997,989,973,950,934,913,894,881,867,848,835,821,805,789,781,765,749,733,732,731,730,729,728,727,16,18,19,46,50,51,52,58,140,166,170,178,179,180,181,182,183,184,185,186,187,193,199,205,211,217,231,243,247,279,311,331,400,488,504,525,541,557,573,589,605,621,637,653,669,685,701,717,725,726
<16=17
<19=37,20
<20=21
<21=22
<22=36,23
<23=35,24
<24=34,25
<25=33,26
<26=32,27
<27=31,28
<28=30,29
<37=38
<38=44,39
<39=40
<40=41
<41=43,42
<44=45
<46=47
<47=49,48
<52=54,53
<54=55
<55=57,56
<58=136,59
<59=114,113,112,111,110,109,108,107,106,105,96,60
<60=88,72,69,61
<61=62
<62=66,63
<63=65,64
<66=68,67
<69=71,70
<72=73
<73=87,74
<74=81,75
<75=77,76
<77=78
<78=80,79
<81=83,82
<83=84
<84=86,85
<88=89
<89=90
<90=95,94,91
<91=93,92
<96=97
<97=103,98
<98=99
<99=100
<100=102,101
<103=104
<114=115
<115=133,116
<116=132,117
<117=131,118
<118=125,119
<119=121,120
<121=122
<122=124,123
<125=127,126
<127=128
<128=130,129
<133=135,134
<136=137
<137=139,138
<140=141
<141=165,142
<142=164,143
<143=163,144
<144=160,145
<145=159,146
<146=158,147
<147=157,148
<148=156,149
<149=155,150
<150=154,151
<151=153,152
<160=162,161
<166=167
<167=169,168
<170=171
<171=175,172
<172=174,173
<175=177,176
<187=188
<188=190,189
<190=192,191
<193=194
<194=196,195
<196=198,197
<199=200
<200=202,201
<202=204,203
<205=206
<206=208,207
<208=210,209
<211=212
<212=214,213
<214=216,215
<217=218
<218=228,219
<219=223,220
<220=222,221
<223=227,224
<224=226,225
<228=230,229
<231=232
<232=240,233
<233=236,235,234
<236=237
<237=239,238
<240=242,241
<243=244
<244=246,245
<247=271,248
<248=265,249
<249=250
<250=262,251
<251=260,252
<252=258,253
<253=254
<254=256,255
<256=257
<258=259
<260=261
<262=264,263
<265=266
<266=268,267
<268=270,269
<271=272
<272=276,273
<273=275,274
<276=278,277
<279=287,280
<280=281
<281=285,282
<282=283
<283=284
<285=286
<287=288
<288=306,289
<289=301,290
<290=296,291
<291=293,292
<293=295,294
<296=298,297
<298=300,299
<301=303,302
<303=305,304
<306=308,307
<308=310,309
<311=319,312
<312=313
<313=317,314
<314=315
<315=316
<317=318
<319=320
<320=326,321
<321=323,322
<323=325,324
<326=328,327
<328=330,329
<331=396,332
<332=378,366,352,346,333
<333=334
<334=344,335
<335=342,338,336
<336=337
<338=339
<339=341,340
<342=343
<344=345
<346=347
<347=349,348
<349=351,350
<352=353
<353=365,364,354
<354=363,355
<355=357,356
<357=361,358
<358=359
<359=360
<361=362
<366=374,367
<367=368
<368=372,369
<369=370
<370=371
<372=373
<374=375
<375=377,376
<378=379
<379=395,394,380
<380=393,381
<381=391,382
<382=387,385,383
<383=384
<385=386
<387=388
<388=390,389
<391=392
<396=397
<397=399,398
<400=484,443,401
<401=402
<402=427,415,403
<403=411,404
<404=405
<405=409,406
<406=407
<407=408
<409=410
<411=412
<412=414,413
<415=423,416
<416=417
<417=421,418
<418=419
<419=420
<421=422
<423=424
<424=426,425
<427=435,428
<428=429
<429=433,430
<430=431
<431=432
<433=434
<435=436
<436=440,437
<437=439,438
<440=442,441
<443=468,456,444
<444=452,445
<445=446
<446=450,447
<447=448
<448=449
<450=451
<452=453
<453=455,454
<456=464,457
<457=458
<458=462,459
<459=460
<460=461
<462=463
<464=465
<465=467,466
<468=476,469
<469=470
<470=474,471
<471=472
<472=473
<474=475
<476=477
<477=481,478
<478=480,479
<481=483,482
<484=485
<485=487,486
<488=489
<489=501,490
<490=500,491
<491=499,492
<492=496,493
<493=495,494
<496=498,497
<501=503,502
<504=505
<505=522,506
<506=521,507
<507=520,508
<508=517,509
<509=516,510
<510=514,511
<511=512
<512=513
<514=515
<517=519,518
<522=524,523
<525=526
<526=538,527
<527=537,528
<528=536,529
<529=533,530
<530=532,531
<533=535,534
<538=540,539
<541=542
<542=554,543
<543=553,544
<544=552,545
<545=549,546
<546=548,547
<549=551,550
<554=556,555
<557=558
<558=570,559
<559=569,560
<560=568,561
<561=565,562
<562=564,563
<565=567,566
<570=572,571
<573=574
<574=586,575
<575=585,576
<576=584,577
<577=581,578
<578=580,579
<581=583,582
<586=588,587
<589=590
<590=602,591
<591=601,592
<592=600,593
<593=597,594
<594=596,595
<597=599,598
<602=604,603
<605=606
<606=618,607
<607=617,608
<608=616,609
<609=613,610
<610=612,611
<613=615,614
<618=620,619
<621=622
<622=634,623
<623=633,624
<624=632,625
<625=629,626
<626=628,627
<629=631,630
<634=636,635
<637=638
<638=650,639
<639=649,640
<640=648,641
<641=645,642
<642=644,643
<645=647,646
<650=652,651
<653=654
<654=666,655
<655=665,656
<656=664,657
<657=661,658
<658=660,659
<661=663,662
<666=668,667
<669=670
<670=682,671
<671=681,672
<672=680,673
<673=677,674
<674=676,675
<677=679,678
<682=684,683
<685=686
<686=698,687
<687=697,688
<688=696,689
<689=693,690
<690=692,691
<693=695,694
<698=700,699
<701=702
<702=714,703
<703=713,704
<704=712,705
<705=709,706
<706=708,707
<709=711,710
<714=716,715
<717=718
<718=722,719
<719=721,720
<722=724,723
<733=734
<734=746,735
<735=745,736
<736=744,737
<737=741,738
<738=740,739
<741=743,742
<746=748,747
<749=750
<750=762,751
<751=761,752
<752=760,753
<753=757,754
<754=756,755
<757=759,758
<762=764,763
<765=766
<766=778,767
<767=777,768
<768=776,769
<769=773,770
<770=772,771
<773=775,774
<778=780,779
<781=782
<782=786,783
<783=785,784
<786=788,787
<789=790
<790=802,791
<791=801,792
<792=800,793
<793=797,794
<794=796,795
<797=799,798
<802=804,803
<805=806
<806=818,807
<807=817,808
<808=816,809
<809=813,810
<810=812,811
<813=815,814
<818=820,819
<821=829,822
<822=823
<823=827,824
<824=825
<825=826
<827=828
<829=830
<830=832,831
<832=834,833
<835=836
<836=845,837
<837=843,838
<838=839
<839=840
<840=842,841
<843=844
<845=847,846
<848=849
<849=865,850
<850=861,859,855,851
<851=852
<852=854,853
<855=856
<856=858,857
<859=860
<861=862
<862=864,863
<865=866
<867=875,868
<868=869
<869=873,870
<870=871
<871=872
<873=874
<875=876
<876=878,877
<878=880,879
<881=882
<882=891,883
<883=889,884
<884=885
<885=886
<886=888,887
<889=890
<891=893,892
<894=895
<895=911,896
<896=907,905,901,897
<897=898
<898=900,899
<901=902
<902=904,903
<905=906
<907=908
<908=910,909
<911=912
<913=914
<914=931,915
<915=930,916
<916=929,917
<917=926,918
<918=925,919
<919=923,920
<920=921
<921=922
<923=924
<926=928,927
<931=933,932
<934=935
<935=947,936
<936=946,937
<937=945,938
<938=942,939
<939=941,940
<942=944,943
<947=949,948
<950=951
<951=970,952
<952=968,953
<953=966,954
<954=955
<955=965,956
<956=964,957
<957=961,958
<958=960,959
<961=963,962
<966=967
<968=969
<970=972,971
<973=974
<974=986,975
<975=985,976
<976=984,977
<977=981,978
<978=980,979
<981=983,982
<986=988,987
<989=990
<990=994,991
<991=993,992
<994=996,995
<1005=1006
<1006=1018,1007
<1007=1017,1008
<1008=1016,1009
<1009=1013,1010
<1010=1012,1011
<1013=1015,1014
<1018=1020,1019
<1021=1022
<1022=1026,1023
<1023=1025,1024
<1026=1028,1027
<1037=1038
<1038=1050,1039
<1039=1049,1040
<1040=1048,1041
<1041=1045,1042
<1042=1044,1043
<1045=1047,1046
<1050=1052,1051
<1053=1054
<1054=1058,1055
<1055=1057,1056
<1058=1060,1059
<1069=1070
<1070=1082,1071
<1071=1081,1072
<1072=1080,1073
<1073=1077,1074
<1074=1076,1075
<1077=1079,1078
<1082=1084,1083
<1085=1086
<1086=1092,1087
<1087=1091,1088
<1088=1090,1089
<1092=1094,1093
<1103=1104
<1104=1106,1105
<1107=1108
<1108=1115,1114,1109
<1109=1113,1110
<1110=1112,1111
<1116=1117
<1117=1123,1118
<1118=1119
<1119=1120
<1120=1122,1121
<1123=1124
<1134=1135
<1135=1143,1136
<1136=1142,1137
<1137=1141,1138
<1138=1140,1139
<1143=1145,1144
<1146=1147
<1147=1149,1148
<1168=1169
<1169=1179,1178,1170
<1170=1177,1171
<1171=1175,1172
<1172=1173
<1173=1174
<1175=1176
<1180=1181
<1181=1185,1182
<1182=1183
<1183=1184
<1185=1186
<1196=1204,1197
<1197=1198
<1198=1202,1199
<1199=1200
<1200=1201
<1202=1203
<1204=1205
<1205=1209,1206
<1206=1207
<1207=1208
<1209=1210
<1211=1212
<1212=1228,1227,1213
<1213=1226,1214
<1214=1224,1215
<1215=1220,1218,1216
<1216=1217
<1218=1219
<1220=1221
<1221=1223,1222
<1224=1225
<1229=1230
<1230=1232,1231
<1251=1252
<1252=1262,1261,1253
<1253=1260,1254
<1254=1258,1255
<1255=1256
<1256=1257
<1258=1259
<1263=1264
<1264=1268,1265
<1265=1266
<1266=1267
<1268=1269
<1279=1287,1280
<1280=1281
<1281=1285,1282
<1282=1283
<1283=1284
<1285=1286
<1287=1288
<1288=1292,1289
<1289=1290
<1290=1291
<1292=1293
<1294=1295
<1295=1311,1310,1296
<1296=1309,1297
<1297=1307,1298
<1298=1303,1301,1299
<1299=1300
<1301=1302
<1303=1304
<1304=1306,1305
<1307=1308
<1312=1313
<1313=1315,1314
<1323=1324
<1324=1326,1325
<1334=1335
<1335=1345,1344,1336
<1336=1343,1337
<1337=1341,1338
<1338=1339
<1339=1340
<1341=1342
<1346=1347
<1347=1357,1356,1348
<1348=1355,1349
<1349=1353,1350
<1350=1351
<1351=1352
<1353=1354
<1358=1359
<1359=1369,1368,1360
<1360=1367,1361
<1361=1365,1362
<1362=1363
<1363=1364
<1365=1366
<1370=1371
<1371=1375,1372
<1372=1373
<1373=1374
<1375=1376
<1386=1394,1387
<1387=1388
<1388=1392,1389
<1389=1390
<1390=1391
<1392=1393
<1394=1395
<1395=1402,1396
<1396=1400,1397
<1397=1398
<1398=1399
<1400=1401
<1403=1404
<1404=1420,1419,1405
<1405=1418,1406
<1406=1416,1407
<1407=1412,1410,1408
<1408=1409
<1410=1411
<1412=1413
<1413=1415,1414
<1416=1417
<1421=1422
<1422=1429,1428,1423
<1423=1427,1424
<1424=1426,1425
<1430=1431
<1431=1433,1432
<1441=1442
<1442=1444,1443
<1452=1453
<1453=1465,1464,1454
<1454=1463,1455
<1455=1461,1456
<1456=1457
<1457=1458
<1458=1460,1459
<1461=1462
<1466=1467
<1467=1473,1468
<1468=1469
<1469=1470
<1470=1472,1471
<1473=1474
<1484=1598,1513,1485
<1485=1486
<1486=1512,1511,1510,1509,1508,1507,1506,1505,1504,1495,1487
<1487=1488
<1488=1494,1489
<1489=1493,1490
<1490=1492,1491
<1495=1496
<1496=1502,1497
<1497=1498
<1498=1499
<1499=1501,1500
<1502=1503
<1513=1597,1596,1595,1594,1593,1592,1591,1582,1571,1560,1554,1532,1514
<1514=1515
<1515=1531,1516
<1516=1530,1517
<1517=1529,1518
<1518=1528,1519
<1519=1527,1520
<1520=1526,1521
<1521=1525,1522
<1522=1524,1523
<1532=1533
<1533=1553,1534
<1534=1552,1535
<1535=1551,1536
<1536=1550,1537
<1537=1549,1538
<1538=1548,1539
<1539=1547,1540
<1540=1546,1541
<1541=1545,1542
<1542=1544,1543
<1554=1555
<1555=1559,1556
<1556=1558,1557
<1560=1561
<1561=1570,1562
<1562=1568,1563
<1563=1564
<1564=1565
<1565=1567,1566
<1568=1569
<1571=1572
<1572=1581,1573
<1573=1579,1574
<1574=1575
<1575=1576
<1576=1578,1577
<1579=1580
<1582=1583
<1583=1589,1584
<1584=1585
<1585=1586
<1586=1588,1587
<1589=1590
<1598=1599
<1599=1605,1600
<1600=1601
<1601=1602
<1602=1604,1603
<1605=1606
<1607=1608
<1608=1610,1609
<1611=1618,1615,1612
<1612=1614,1613
<1615=1617,1616
<1618=1620,1619
<1621=1628,1625,1622
<1622=1624,1623
<1625=1627,1626
<1628=1630,1629
<1631=1632
<1632=1634,1633
<1635=1636
<1636=1638,1637
<1639=1640
<1640=1642,1641
<1650=1651
<1651=1653,1652
<1661=1662
<1662=1674,1673,1663
<1663=1672,1664
<1664=1670,1665
<1665=1666
<1666=1667
<1667=1669,1668
<1670=1671
<1675=1676
<1676=1683,1682,1677
<1677=1681,1678
<1678=1680,1679
<1684=1685
<1685=1687,1686
<1695=1696
<1696=1698,1697
<1706=1707
<1707=1719,1718,1708
<1708=1717,1709
<1709=1715,1710
<1710=1711
<1711=1712
<1712=1714,1713
<1715=1716
<1720=1721
<1721=1727,1722
<1722=1723
<1723=1724
<1724=1726,1725
<1727=1728
<1738=1746,1739
<1739=1740
<1740=1744,1741
<1741=1742
<1742=1743
<1744=1745
<1746=1747
<1747=1756,1748
<1748=1754,1749
<1749=1750
<1750=1751
<1751=1753,1752
<1754=1755
<1757=1765,1758
<1758=1759
<1759=1763,1760
<1760=1761
<1761=1762
<1763=1764
<1765=1766
<1766=1775,1767
<1767=1773,1768
<1768=1769
<1769=1770
<1770=1772,1771
<1773=1774
<1776=1784,1777
<1777=1778
<1778=1782,1779
<1779=1780
<1780=1781
<1782=1783
<1784=1785
<1785=1791,1786
<1786=1787
<1787=1788
<1788=1790,1789
<1791=1792
<1793=1801,1794
<1794=1795
<1795=1799,1796
<1796=1797
<1797=1798
<1799=1800
<1801=1802
<1802=1808,1803
<1803=1807,1804
<1804=1806,1805
<1808=1810,1809
<1811=1819,1812
<1812=1813
<1813=1817,1814
<1814=1815
<1815=1816
<1817=1818
<1819=1820
<1820=1826,1821
<1821=1825,1822
<1822=1824,1823
<1826=1828,1827
<1829=1837,1830
<1830=1831
<1831=1835,1832
<1832=1833
<1833=1834
<1835=1836
<1837=1838
<1838=1844,1839
<1839=1840
<1840=1841
<1841=1843,1842
<1844=1845
<1846=1854,1847
<1847=1848
<1848=1852,1849
<1849=1850
<1850=1851
<1852=1853
<1854=1855
<1855=1861,1856
<1856=1860,1857
<1857=1859,1858
<1861=1863,1862
<1992=2007,2006,1993
<1993=2003,2000,1997,1994
<1994=1996,1995
<1997=1999,1998
<2000=2002,2001
<2003=2005,2004
<2007=2059,2043,2008
<2008=2032,2021,2009
<2009=2010
<2010=2011
<2011=2012
<2012=2020,2013
<2013=2019,2014
<2014=2018,2015
<2015=2017,2016
<2021=2022
<2022=2023
<2023=2031,2024
<2024=2030,2025
<2025=2029,2026
<2026=2028,2027
<2032=2033
<2033=2035,2034
<2035=2041,2036
<2036=2037
<2037=2038
<2038=2040,2039
<2041=2042
<2043=2051,2044
<2044=2045
<2045=2049,2046
<2046=2047
<2047=2048
<2049=2050
<2051=2052
<2052=2056,2053
<2053=2055,2054
<2056=2058,2057
<2059=2067,2060
<2060=2061
<2061=2065,2062
<2062=2063
<2063=2064
<2065=2066
<2067=2068
<2068=2070,2069
