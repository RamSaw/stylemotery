>5	FunctionDef	GWKGetFilterRadius (GDALResampleAlg eResampleAlg)
>6	ParameterList	GDALResampleAlg eResampleAlg
>7	Parameter	 
>8	Identifier	eResampleAlg
>9	ParameterType	GDALResampleAlg
>10	ReturnType	int
>11	CompoundStatement	 
>12	ReturnStatement	 
>13	ArrayIndexing	anGWKFilterRadius [ eResampleAlg ]
>14	Identifier	eResampleAlg
>15	Identifier	anGWKFilterRadius
>74	FunctionDef	GWKProgressThread (GWKJobStruct * psJob)
>75	ParameterList	GWKJobStruct * psJob
>76	Parameter	 
>77	Identifier	psJob
>78	ParameterType	GWKJobStruct *
>79	ReturnType	static int
>80	CompoundStatement	 
>81	ReturnStatement	 
>82	Identifier	bStop
>83	ExpressionStatement	 
>84	CallExpression	CPLReleaseMutex ( psJob -> hCondMutex )
>85	ArgumentList	psJob -> hCondMutex
>86	Argument	psJob -> hCondMutex
>87	PtrMemberAccess	psJob -> hCondMutex
>88	Identifier	hCondMutex
>89	Identifier	psJob
>90	Callee	CPLReleaseMutex
>91	Identifier	CPLReleaseMutex
>92	IdentifierDeclStatement	 
>93	IdentifierDecl	bStop = * ( psJob -> pbStop )
>94	AssignmentExpr	bStop = * ( psJob -> pbStop )
>95	UnaryOp	* ( psJob -> pbStop )
>96	PtrMemberAccess	psJob -> pbStop
>97	Identifier	pbStop
>98	Identifier	psJob
>99	UnaryOperator	*
>100	Identifier	bStop
>101	Identifier	bStop
>102	IdentifierDeclType	int
>103	ExpressionStatement	 
>104	CallExpression	CPLCondSignal ( psJob -> hCond )
>105	ArgumentList	psJob -> hCond
>106	Argument	psJob -> hCond
>107	PtrMemberAccess	psJob -> hCond
>108	Identifier	hCond
>109	Identifier	psJob
>110	Callee	CPLCondSignal
>111	Identifier	CPLCondSignal
>112	ExpressionStatement	 
>113	IncDecOp	( * ( psJob -> pnCounter ) ) ++
>114	IncDec	++
>115	UnaryOp	* ( psJob -> pnCounter )
>116	PtrMemberAccess	psJob -> pnCounter
>117	Identifier	pnCounter
>118	Identifier	psJob
>119	UnaryOperator	*
>120	ExpressionStatement	 
>121	CallExpression	CPLAcquireMutex ( psJob -> hCondMutex , 1.0 )
>122	ArgumentList	psJob -> hCondMutex
>123	Argument	1.0
>124	PrimaryExpression	1.0
>125	Argument	psJob -> hCondMutex
>126	PtrMemberAccess	psJob -> hCondMutex
>127	Identifier	hCondMutex
>128	Identifier	psJob
>129	Callee	CPLAcquireMutex
>130	Identifier	CPLAcquireMutex
>146	FunctionDef	GWKProgressMonoThread (GWKJobStruct * psJob)
>147	ParameterList	GWKJobStruct * psJob
>148	Parameter	 
>149	Identifier	psJob
>150	ParameterType	GWKJobStruct *
>151	ReturnType	static int
>152	CompoundStatement	 
>153	ReturnStatement	 
>154	Identifier	FALSE
>155	IfStatement	if ( ! poWK -> pfnProgress ( poWK -> dfProgressBase + poWK -> dfProgressScale * ( nCounter / ( double ) psJob -> \
>156	CompoundStatement	 
>157	ReturnStatement	 
>158	Identifier	TRUE
>159	ExpressionStatement	 
>160	AssignmentExpr	* ( psJob -> pbStop ) = TRUE
>161	Identifier	TRUE
>162	UnaryOp	* ( psJob -> pbStop )
>163	PtrMemberAccess	psJob -> pbStop
>164	Identifier	pbStop
>165	Identifier	psJob
>166	UnaryOperator	*
>167	ExpressionStatement	 
>168	CallExpression	CPLError ( CE_Failure , CPLE_UserInterrupt , \"User terminated\" )
>169	ArgumentList	CE_Failure
>170	Argument	\"User terminated\"
>171	PrimaryExpression	\"User terminated\"
>172	Argument	CPLE_UserInterrupt
>173	Identifier	CPLE_UserInterrupt
>174	Argument	CE_Failure
>175	Identifier	CE_Failure
>176	Callee	CPLError
>177	Identifier	CPLError
>178	Condition	 
>179	UnaryOp	! poWK -> pfnProgress ( poWK -> dfProgressBase + poWK -> dfProgressScale * ( nCounter / ( double ) psJob -> iYMax ) , \"\" , \
>180	CallExpression	poWK -> pfnProgress ( poWK -> dfProgressBase + poWK -> dfProgressScale * ( nCounter / ( double ) psJob -> iYMax ) , \"\" , \
>181	ArgumentList	poWK -> dfProgressBase + poWK -> dfProgressScale * ( nCounter / ( double ) psJob -> iYMax )
>182	Argument	poWK -> pProgress
>183	PtrMemberAccess	poWK -> pProgress
>184	Identifier	pProgress
>185	Identifier	poWK
>186	Argument	\"\"
>187	PrimaryExpression	\"\"
>188	Argument	poWK -> dfProgressBase + poWK -> dfProgressScale * ( nCounter / ( double ) psJob -> iYMax )
>189	AdditiveExpression	poWK -> dfProgressBase + poWK -> dfProgressScale * ( nCounter / ( double ) psJob -> iYMax )
>190	MultiplicativeExpression	poWK -> dfProgressScale * ( nCounter / ( double ) psJob -> iYMax )
>191	MultiplicativeExpression	nCounter / ( double ) psJob -> iYMax
>192	CastExpression	( double ) psJob -> iYMax
>193	PtrMemberAccess	psJob -> iYMax
>194	Identifier	iYMax
>195	Identifier	psJob
>196	CastTarget	double
>197	Identifier	nCounter
>198	PtrMemberAccess	poWK -> dfProgressScale
>199	Identifier	dfProgressScale
>200	Identifier	poWK
>201	PtrMemberAccess	poWK -> dfProgressBase
>202	Identifier	dfProgressBase
>203	Identifier	poWK
>204	Callee	poWK -> pfnProgress
>205	PtrMemberAccess	poWK -> pfnProgress
>206	Identifier	pfnProgress
>207	Identifier	poWK
>208	UnaryOperator	!
>209	IdentifierDeclStatement	 
>210	IdentifierDecl	nCounter = ++ ( * ( psJob -> pnCounter ) )
>211	AssignmentExpr	nCounter = ++ ( * ( psJob -> pnCounter ) )
>212	UnaryExpression	++ ( * ( psJob -> pnCounter ) )
>213	UnaryOp	* ( psJob -> pnCounter )
>214	PtrMemberAccess	psJob -> pnCounter
>215	Identifier	pnCounter
>216	Identifier	psJob
>217	UnaryOperator	*
>218	IncDec	++
>219	Identifier	nCounter
>220	Identifier	nCounter
>221	IdentifierDeclType	int
>222	IdentifierDeclStatement	 
>223	IdentifierDecl	* poWK = psJob -> poWK
>224	AssignmentExpr	* poWK = psJob -> poWK
>225	PtrMemberAccess	psJob -> poWK
>226	Identifier	poWK
>227	Identifier	psJob
>228	Identifier	poWK
>229	Identifier	poWK
>230	IdentifierDeclType	GDALWarpKernel *
>256	FunctionDef	GWKGenericMonoThread (GDALWarpKernel * poWK , void ( * pfnFunc ) ( void * pUserData ))
>257	ParameterList	GDALWarpKernel * poWK , void ( * pfnFunc ) ( void * pUserData )
>258	Parameter	 
>259	Identifier	pfnFunc
>260	ParameterType	(( void * pUserData ) void) *
>261	Parameter	 
>262	Identifier	poWK
>263	ParameterType	GDALWarpKernel *
>264	ReturnType	static CPLErr
>265	CompoundStatement	 
>266	ReturnStatement	 
>267	ConditionalExpression	! bStop ? CE_None 
>268	Identifier	CE_Failure
>269	Identifier	CE_None
>270	Condition	! bStop
>271	UnaryOp	! bStop
>272	Identifier	bStop
>273	UnaryOperator	!
>274	ExpressionStatement	 
>275	CallExpression	pfnFunc ( & sThreadJob )
>276	ArgumentList	& sThreadJob
>277	Argument	& sThreadJob
>278	UnaryOp	& sThreadJob
>279	Identifier	sThreadJob
>280	UnaryOperator	&
>281	Callee	pfnFunc
>282	Identifier	pfnFunc
>283	ExpressionStatement	 
>284	AssignmentExpr	sThreadJob . pTransformerArg = poWK -> pTransformerArg
>285	PtrMemberAccess	poWK -> pTransformerArg
>286	Identifier	pTransformerArg
>287	Identifier	poWK
>288	MemberAccess	sThreadJob . pTransformerArg
>289	Identifier	pTransformerArg
>290	Identifier	sThreadJob
>291	ExpressionStatement	 
>292	AssignmentExpr	sThreadJob . pfnProgress = GWKProgressMonoThread
>293	Identifier	GWKProgressMonoThread
>294	MemberAccess	sThreadJob . pfnProgress
>295	Identifier	pfnProgress
>296	Identifier	sThreadJob
>297	ExpressionStatement	 
>298	AssignmentExpr	sThreadJob . hThread = NULL
>299	Identifier	NULL
>300	MemberAccess	sThreadJob . hThread
>301	Identifier	hThread
>302	Identifier	sThreadJob
>303	ExpressionStatement	 
>304	AssignmentExpr	sThreadJob . hCondMutex = NULL
>305	Identifier	NULL
>306	MemberAccess	sThreadJob . hCondMutex
>307	Identifier	hCondMutex
>308	Identifier	sThreadJob
>309	ExpressionStatement	 
>310	AssignmentExpr	sThreadJob . hCond = NULL
>311	Identifier	NULL
>312	MemberAccess	sThreadJob . hCond
>313	Identifier	hCond
>314	Identifier	sThreadJob
>315	ExpressionStatement	 
>316	AssignmentExpr	sThreadJob . pbStop = & bStop
>317	UnaryOp	& bStop
>318	Identifier	bStop
>319	UnaryOperator	&
>320	MemberAccess	sThreadJob . pbStop
>321	Identifier	pbStop
>322	Identifier	sThreadJob
>323	ExpressionStatement	 
>324	AssignmentExpr	sThreadJob . iYMax = poWK -> nDstYSize
>325	PtrMemberAccess	poWK -> nDstYSize
>326	Identifier	nDstYSize
>327	Identifier	poWK
>328	MemberAccess	sThreadJob . iYMax
>329	Identifier	iYMax
>330	Identifier	sThreadJob
>331	ExpressionStatement	 
>332	AssignmentExpr	sThreadJob . iYMin = 0
>333	PrimaryExpression	0
>334	MemberAccess	sThreadJob . iYMin
>335	Identifier	iYMin
>336	Identifier	sThreadJob
>337	ExpressionStatement	 
>338	AssignmentExpr	sThreadJob . pnCounter = & nCounter
>339	UnaryOp	& nCounter
>340	Identifier	nCounter
>341	UnaryOperator	&
>342	MemberAccess	sThreadJob . pnCounter
>343	Identifier	pnCounter
>344	Identifier	sThreadJob
>345	ExpressionStatement	 
>346	AssignmentExpr	sThreadJob . poWK = poWK
>347	Identifier	poWK
>348	MemberAccess	sThreadJob . poWK
>349	Identifier	poWK
>350	Identifier	sThreadJob
>351	IdentifierDeclStatement	 
>352	IdentifierDecl	sThreadJob
>353	Identifier	sThreadJob
>354	IdentifierDeclType	GWKJobStruct
>355	IdentifierDeclStatement	 
>356	IdentifierDecl	nCounter = 0
>357	AssignmentExpr	nCounter = 0
>358	PrimaryExpression	0
>359	Identifier	nCounter
>360	Identifier	nCounter
>361	IdentifierDeclType	volatile int
>362	IdentifierDeclStatement	 
>363	IdentifierDecl	bStop = FALSE
>364	AssignmentExpr	bStop = FALSE
>365	Identifier	FALSE
>366	Identifier	FALSE
>367	Identifier	bStop
>368	IdentifierDeclType	volatile int
>398	FunctionDef	GWKRun (GDALWarpKernel * poWK , const char * pszFuncName , void ( * pfnFunc ) ( void * pUserData ))
>399	ParameterList	GDALWarpKernel * poWK , const char * pszFuncName , void ( * pfnFunc ) ( void * pUserData )
>400	Parameter	 
>401	Identifier	pfnFunc
>402	ParameterType	(( void * pUserData ) void) *
>403	Parameter	 
>404	Identifier	pszFuncName
>405	ParameterType	const char *
>406	Parameter	 
>407	Identifier	poWK
>408	ParameterType	GDALWarpKernel *
>409	ReturnType	static CPLErr
>410	CompoundStatement	 
>411	IfStatement	if ( nThreads <= 1 )
>412	ElseStatement	else
>413	CompoundStatement	 
>414	ReturnStatement	 
>415	ConditionalExpression	! bStop ? CE_None 
>416	Identifier	CE_Failure
>417	Identifier	CE_None
>418	Condition	! bStop
>419	UnaryOp	! bStop
>420	Identifier	bStop
>421	UnaryOperator	!
>422	ExpressionStatement	 
>423	CallExpression	CPLDestroyMutex ( hCondMutex )
>424	ArgumentList	hCondMutex
>425	Argument	hCondMutex
>426	Identifier	hCondMutex
>427	Callee	CPLDestroyMutex
>428	Identifier	CPLDestroyMutex
>429	ExpressionStatement	 
>430	CallExpression	CPLDestroyCond ( hCond )
>431	ArgumentList	hCond
>432	Argument	hCond
>433	Identifier	hCond
>434	Callee	CPLDestroyCond
>435	Identifier	CPLDestroyCond
>436	ExpressionStatement	 
>437	CallExpression	CPLFree ( pasThreadJob )
>438	ArgumentList	pasThreadJob
>439	Argument	pasThreadJob
>440	Identifier	pasThreadJob
>441	Callee	CPLFree
>442	Identifier	CPLFree
>443	ForStatement	for ( i = 0 ; i < nThreads ; i ++ )
>444	CompoundStatement	 
>445	ExpressionStatement	 
>446	CallExpression	GDALDestroyTransformer ( pasThreadJob [ i ] . pTransformerArg )
>447	ArgumentList	pasThreadJob [ i ] . pTransformerArg
>448	Argument	pasThreadJob [ i ] . pTransformerArg
>449	MemberAccess	pasThreadJob [ i ] . pTransformerArg
>450	Identifier	pTransformerArg
>451	ArrayIndexing	pasThreadJob [ i ]
>452	Identifier	i
>453	Identifier	pasThreadJob
>454	Callee	GDALDestroyTransformer
>455	Identifier	GDALDestroyTransformer
>456	ExpressionStatement	 
>457	CallExpression	CPLJoinThread ( pasThreadJob [ i ] . hThread )
>458	ArgumentList	pasThreadJob [ i ] . hThread
>459	Argument	pasThreadJob [ i ] . hThread
>460	MemberAccess	pasThreadJob [ i ] . hThread
>461	Identifier	hThread
>462	ArrayIndexing	pasThreadJob [ i ]
>463	Identifier	i
>464	Identifier	pasThreadJob
>465	Callee	CPLJoinThread
>466	Identifier	CPLJoinThread
>467	IncDecOp	 
>468	IncDec	++
>469	Identifier	i
>470	Condition	 
>471	RelationalExpression	i < nThreads
>472	Identifier	nThreads
>473	Identifier	i
>474	ForInit	 
>475	AssignmentExpr	i = 0
>476	PrimaryExpression	0
>477	Identifier	i
>478	ExpressionStatement	 
>479	CallExpression	CPLReleaseMutex ( hCondMutex )
>480	ArgumentList	hCondMutex
>481	Argument	hCondMutex
>482	Identifier	hCondMutex
>483	Callee	CPLReleaseMutex
>484	Identifier	CPLReleaseMutex
>485	WhileStatement	while ( nCounter < nDstYSize )
>486	CompoundStatement	 
>487	IfStatement	if ( ! poWK -> pfnProgress ( poWK -> dfProgressBase + poWK -> dfProgressScale * ( nCounter / ( double ) nDstYSize ) , \"\" , \
>488	CompoundStatement	 
>489	BreakStatement	 
>490	ExpressionStatement	 
>491	AssignmentExpr	bStop = TRUE
>492	Identifier	TRUE
>493	Identifier	bStop
>494	ExpressionStatement	 
>495	CallExpression	CPLError ( CE_Failure , CPLE_UserInterrupt , \"User terminated\" )
>496	ArgumentList	CE_Failure
>497	Argument	\"User terminated\"
>498	PrimaryExpression	\"User terminated\"
>499	Argument	CPLE_UserInterrupt
>500	Identifier	CPLE_UserInterrupt
>501	Argument	CE_Failure
>502	Identifier	CE_Failure
>503	Callee	CPLError
>504	Identifier	CPLError
>505	Condition	 
>506	UnaryOp	! poWK -> pfnProgress ( poWK -> dfProgressBase + poWK -> dfProgressScale * ( nCounter / ( double ) nDstYSize ) , \"\" , \
>507	CallExpression	poWK -> pfnProgress ( poWK -> dfProgressBase + poWK -> dfProgressScale * ( nCounter / ( double ) nDstYSize ) , \"\" , \
>508	ArgumentList	poWK -> dfProgressBase + poWK -> dfProgressScale * ( nCounter / ( double ) nDstYSize )
>509	Argument	poWK -> pProgress
>510	PtrMemberAccess	poWK -> pProgress
>511	Identifier	pProgress
>512	Identifier	poWK
>513	Argument	\"\"
>514	PrimaryExpression	\"\"
>515	Argument	poWK -> dfProgressBase + poWK -> dfProgressScale * ( nCounter / ( double ) nDstYSize )
>516	AdditiveExpression	poWK -> dfProgressBase + poWK -> dfProgressScale * ( nCounter / ( double ) nDstYSize )
>517	MultiplicativeExpression	poWK -> dfProgressScale * ( nCounter / ( double ) nDstYSize )
>518	MultiplicativeExpression	nCounter / ( double ) nDstYSize
>519	CastExpression	( double ) nDstYSize
>520	Identifier	nDstYSize
>521	CastTarget	double
>522	Identifier	nCounter
>523	PtrMemberAccess	poWK -> dfProgressScale
>524	Identifier	dfProgressScale
>525	Identifier	poWK
>526	PtrMemberAccess	poWK -> dfProgressBase
>527	Identifier	dfProgressBase
>528	Identifier	poWK
>529	Callee	poWK -> pfnProgress
>530	PtrMemberAccess	poWK -> pfnProgress
>531	Identifier	pfnProgress
>532	Identifier	poWK
>533	UnaryOperator	!
>534	ExpressionStatement	 
>535	CallExpression	CPLCondWait ( hCond , hCondMutex )
>536	ArgumentList	hCond
>537	Argument	hCondMutex
>538	Identifier	hCondMutex
>539	Argument	hCond
>540	Identifier	hCond
>541	Callee	CPLCondWait
>542	Identifier	CPLCondWait
>543	Condition	 
>544	RelationalExpression	nCounter < nDstYSize
>545	Identifier	nDstYSize
>546	Identifier	nCounter
>547	ForStatement	for ( i = 0 ; i < nThreads ; i ++ )
>548	CompoundStatement	 
>549	ExpressionStatement	 
>550	AssignmentExpr	pasThreadJob [ i ] . hThread = CPLCreateJoinableThread ( pfnFunc , ( void * ) & pasThreadJob [ i ] )
>551	CallExpression	CPLCreateJoinableThread ( pfnFunc , ( void * ) & pasThreadJob [ i ] )
>552	ArgumentList	pfnFunc
>553	Argument	( void * ) & pasThreadJob [ i ]
>554	CastExpression	( void * ) & pasThreadJob [ i ]
>555	UnaryOp	& pasThreadJob [ i ]
>556	ArrayIndexing	pasThreadJob [ i ]
>557	Identifier	i
>558	Identifier	pasThreadJob
>559	UnaryOperator	&
>560	CastTarget	void *
>561	Argument	pfnFunc
>562	Identifier	pfnFunc
>563	Callee	CPLCreateJoinableThread
>564	Identifier	CPLCreateJoinableThread
>565	MemberAccess	pasThreadJob [ i ] . hThread
>566	Identifier	hThread
>567	ArrayIndexing	pasThreadJob [ i ]
>568	Identifier	i
>569	Identifier	pasThreadJob
>570	ExpressionStatement	 
>571	AssignmentExpr	pasThreadJob [ i ] . pfnProgress = GWKProgressThread
>572	Identifier	GWKProgressThread
>573	MemberAccess	pasThreadJob [ i ] . pfnProgress
>574	Identifier	pfnProgress
>575	ArrayIndexing	pasThreadJob [ i ]
>576	Identifier	i
>577	Identifier	pasThreadJob
>578	ExpressionStatement	 
>579	AssignmentExpr	pasThreadJob [ i ] . hCondMutex = hCondMutex
>580	Identifier	hCondMutex
>581	MemberAccess	pasThreadJob [ i ] . hCondMutex
>582	Identifier	hCondMutex
>583	ArrayIndexing	pasThreadJob [ i ]
>584	Identifier	i
>585	Identifier	pasThreadJob
>586	ExpressionStatement	 
>587	AssignmentExpr	pasThreadJob [ i ] . hCond = hCond
>588	Identifier	hCond
>589	MemberAccess	pasThreadJob [ i ] . hCond
>590	Identifier	hCond
>591	ArrayIndexing	pasThreadJob [ i ]
>592	Identifier	i
>593	Identifier	pasThreadJob
>594	ExpressionStatement	 
>595	AssignmentExpr	pasThreadJob [ i ] . pbStop = & bStop
>596	UnaryOp	& bStop
>597	Identifier	bStop
>598	UnaryOperator	&
>599	MemberAccess	pasThreadJob [ i ] . pbStop
>600	Identifier	pbStop
>601	ArrayIndexing	pasThreadJob [ i ]
>602	Identifier	i
>603	Identifier	pasThreadJob
>604	ExpressionStatement	 
>605	AssignmentExpr	pasThreadJob [ i ] . iYMax = ( int ) ( ( ( GIntBig ) ( i + 1 ) ) * nDstYSize / nThreads )
>606	CastExpression	( int ) ( ( ( GIntBig ) ( i + 1 ) ) * nDstYSize / nThreads )
>607	MultiplicativeExpression	( ( GIntBig ) ( i + 1 ) ) * nDstYSize / nThreads
>608	MultiplicativeExpression	nDstYSize / nThreads
>609	Identifier	nThreads
>610	Identifier	nDstYSize
>611	CastExpression	( GIntBig ) ( i + 1 )
>612	AdditiveExpression	i + 1
>613	PrimaryExpression	1
>614	Identifier	i
>615	CastTarget	GIntBig
>616	CastTarget	int
>617	MemberAccess	pasThreadJob [ i ] . iYMax
>618	Identifier	iYMax
>619	ArrayIndexing	pasThreadJob [ i ]
>620	Identifier	i
>621	Identifier	pasThreadJob
>622	ExpressionStatement	 
>623	AssignmentExpr	pasThreadJob [ i ] . iYMin = ( int ) ( ( ( GIntBig ) i ) * nDstYSize / nThreads )
>624	CastExpression	( int ) ( ( ( GIntBig ) i ) * nDstYSize / nThreads )
>625	MultiplicativeExpression	( ( GIntBig ) i ) * nDstYSize / nThreads
>626	MultiplicativeExpression	nDstYSize / nThreads
>627	Identifier	nThreads
>628	Identifier	nDstYSize
>629	CastExpression	( GIntBig ) i
>630	Identifier	i
>631	CastTarget	GIntBig
>632	CastTarget	int
>633	MemberAccess	pasThreadJob [ i ] . iYMin
>634	Identifier	iYMin
>635	ArrayIndexing	pasThreadJob [ i ]
>636	Identifier	i
>637	Identifier	pasThreadJob
>638	ExpressionStatement	 
>639	AssignmentExpr	pasThreadJob [ i ] . pnCounter = & nCounter
>640	UnaryOp	& nCounter
>641	Identifier	nCounter
>642	UnaryOperator	&
>643	MemberAccess	pasThreadJob [ i ] . pnCounter
>644	Identifier	pnCounter
>645	ArrayIndexing	pasThreadJob [ i ]
>646	Identifier	i
>647	Identifier	pasThreadJob
>648	ExpressionStatement	 
>649	AssignmentExpr	pasThreadJob [ i ] . poWK = poWK
>650	Identifier	poWK
>651	MemberAccess	pasThreadJob [ i ] . poWK
>652	Identifier	poWK
>653	ArrayIndexing	pasThreadJob [ i ]
>654	Identifier	i
>655	Identifier	pasThreadJob
>656	IncDecOp	 
>657	IncDec	++
>658	Identifier	i
>659	Condition	 
>660	RelationalExpression	i < nThreads
>661	Identifier	nThreads
>662	Identifier	i
>663	ForInit	 
>664	AssignmentExpr	i = 0
>665	PrimaryExpression	0
>666	Identifier	i
>667	IdentifierDeclStatement	 
>668	IdentifierDecl	nCounter = 0
>669	AssignmentExpr	nCounter = 0
>670	PrimaryExpression	0
>671	Identifier	nCounter
>672	Identifier	nCounter
>673	IdentifierDeclType	volatile int
>674	IdentifierDeclStatement	 
>675	IdentifierDecl	bStop = FALSE
>676	AssignmentExpr	bStop = FALSE
>677	Identifier	FALSE
>678	Identifier	FALSE
>679	Identifier	bStop
>680	IdentifierDeclType	volatile int
>681	IdentifierDeclStatement	 
>682	IdentifierDecl	* hCondMutex = CPLCreateMutex ( )
>683	AssignmentExpr	* hCondMutex = CPLCreateMutex ( )
>684	CallExpression	CPLCreateMutex ( )
>685	ArgumentList	 
>686	Callee	CPLCreateMutex
>687	Identifier	CPLCreateMutex
>688	Identifier	hCondMutex
>689	Identifier	hCondMutex
>690	IdentifierDeclType	void *
>691	ExpressionStatement	 
>692	CallExpression	CPLDebug ( \"WARP\" , \"Using %d threads\" , nThreads )
>693	ArgumentList	\"WARP\"
>694	Argument	nThreads
>695	Identifier	nThreads
>696	Argument	\"Using %d threads\"
>697	PrimaryExpression	\"Using %d threads\"
>698	Argument	\"WARP\"
>699	PrimaryExpression	\"WARP\"
>700	Callee	CPLDebug
>701	Identifier	CPLDebug
>702	IfStatement	if ( hCond == NULL )
>703	CompoundStatement	 
>704	ReturnStatement	 
>705	CallExpression	GWKGenericMonoThread ( poWK , pfnFunc )
>706	ArgumentList	poWK
>707	Argument	pfnFunc
>708	Identifier	pfnFunc
>709	Argument	poWK
>710	Identifier	poWK
>711	Callee	GWKGenericMonoThread
>712	Identifier	GWKGenericMonoThread
>713	ExpressionStatement	 
>714	Statement	 
>715	Statement	 
>716	Statement	 
>717	Statement	 
>718	Statement	 
>719	Statement	 
>720	Statement	 
>721	ExpressionStatement	 
>722	CallExpression	CPLFree ( pasThreadJob )
>723	ArgumentList	pasThreadJob
>724	Argument	pasThreadJob
>725	Identifier	pasThreadJob
>726	Callee	CPLFree
>727	Identifier	CPLFree
>728	ForStatement	for ( i = 0 ; i < nThreads ; i ++ )
>729	CompoundStatement	 
>730	IfStatement	if ( pasThreadJob [ i ] . pTransformerArg )
>731	ExpressionStatement	 
>732	CallExpression	GDALDestroyTransformer ( pasThreadJob [ i ] . pTransformerArg )
>733	ArgumentList	pasThreadJob [ i ] . pTransformerArg
>734	Argument	pasThreadJob [ i ] . pTransformerArg
>735	MemberAccess	pasThreadJob [ i ] . pTransformerArg
>736	Identifier	pTransformerArg
>737	ArrayIndexing	pasThreadJob [ i ]
>738	Identifier	i
>739	Identifier	pasThreadJob
>740	Callee	GDALDestroyTransformer
>741	Identifier	GDALDestroyTransformer
>742	Condition	 
>743	MemberAccess	pasThreadJob [ i ] . pTransformerArg
>744	Identifier	pTransformerArg
>745	ArrayIndexing	pasThreadJob [ i ]
>746	Identifier	i
>747	Identifier	pasThreadJob
>748	IncDecOp	 
>749	IncDec	++
>750	Identifier	i
>751	Condition	 
>752	RelationalExpression	i < nThreads
>753	Identifier	nThreads
>754	Identifier	i
>755	ForInit	 
>756	AssignmentExpr	i = 0
>757	PrimaryExpression	0
>758	Identifier	i
>759	Condition	 
>760	EqualityExpression	hCond == NULL
>761	Identifier	NULL
>762	Identifier	hCond
>763	IdentifierDeclStatement	 
>764	IdentifierDecl	* hCond = CPLCreateCond ( )
>765	AssignmentExpr	* hCond = CPLCreateCond ( )
>766	CallExpression	CPLCreateCond ( )
>767	ArgumentList	 
>768	Callee	CPLCreateCond
>769	Identifier	CPLCreateCond
>770	Identifier	hCond
>771	Identifier	hCond
>772	IdentifierDeclType	void *
>773	IfStatement	if ( ! bTransformerCloningSuccess )
>774	CompoundStatement	 
>775	ReturnStatement	 
>776	CallExpression	GWKGenericMonoThread ( poWK , pfnFunc )
>777	ArgumentList	poWK
>778	Argument	pfnFunc
>779	Identifier	pfnFunc
>780	Argument	poWK
>781	Identifier	poWK
>782	Callee	GWKGenericMonoThread
>783	Identifier	GWKGenericMonoThread
>784	ExpressionStatement	 
>785	Statement	 
>786	Statement	 
>787	Statement	 
>788	Statement	 
>789	Statement	 
>790	Statement	 
>791	Statement	 
>792	ExpressionStatement	 
>793	CallExpression	CPLFree ( pasThreadJob )
>794	ArgumentList	pasThreadJob
>795	Argument	pasThreadJob
>796	Identifier	pasThreadJob
>797	Callee	CPLFree
>798	Identifier	CPLFree
>799	ForStatement	for ( i = 0 ; i < nThreads ; i ++ )
>800	CompoundStatement	 
>801	IfStatement	if ( pasThreadJob [ i ] . pTransformerArg )
>802	ExpressionStatement	 
>803	CallExpression	GDALDestroyTransformer ( pasThreadJob [ i ] . pTransformerArg )
>804	ArgumentList	pasThreadJob [ i ] . pTransformerArg
>805	Argument	pasThreadJob [ i ] . pTransformerArg
>806	MemberAccess	pasThreadJob [ i ] . pTransformerArg
>807	Identifier	pTransformerArg
>808	ArrayIndexing	pasThreadJob [ i ]
>809	Identifier	i
>810	Identifier	pasThreadJob
>811	Callee	GDALDestroyTransformer
>812	Identifier	GDALDestroyTransformer
>813	Condition	 
>814	MemberAccess	pasThreadJob [ i ] . pTransformerArg
>815	Identifier	pTransformerArg
>816	ArrayIndexing	pasThreadJob [ i ]
>817	Identifier	i
>818	Identifier	pasThreadJob
>819	IncDecOp	 
>820	IncDec	++
>821	Identifier	i
>822	Condition	 
>823	RelationalExpression	i < nThreads
>824	Identifier	nThreads
>825	Identifier	i
>826	ForInit	 
>827	AssignmentExpr	i = 0
>828	PrimaryExpression	0
>829	Identifier	i
>830	Condition	 
>831	UnaryOp	! bTransformerCloningSuccess
>832	Identifier	bTransformerCloningSuccess
>833	UnaryOperator	!
>834	ForStatement	for ( i = 0 ; i < nThreads ; i ++ )
>835	CompoundStatement	 
>836	IfStatement	if ( pasThreadJob [ i ] . pTransformerArg == NULL )
>837	CompoundStatement	 
>838	BreakStatement	 
>839	ExpressionStatement	 
>840	AssignmentExpr	bTransformerCloningSuccess = FALSE
>841	Identifier	FALSE
>842	Identifier	bTransformerCloningSuccess
>843	ExpressionStatement	 
>844	CallExpression	CPLDebug ( \"WARP\" , \"Cannot deserialize transformer\" )
>845	ArgumentList	\"WARP\"
>846	Argument	\"Cannot deserialize transformer\"
>847	PrimaryExpression	\"Cannot deserialize transformer\"
>848	Argument	\"WARP\"
>849	PrimaryExpression	\"WARP\"
>850	Callee	CPLDebug
>851	Identifier	CPLDebug
>852	Condition	 
>853	EqualityExpression	pasThreadJob [ i ] . pTransformerArg == NULL
>854	Identifier	NULL
>855	MemberAccess	pasThreadJob [ i ] . pTransformerArg
>856	Identifier	pTransformerArg
>857	ArrayIndexing	pasThreadJob [ i ]
>858	Identifier	i
>859	Identifier	pasThreadJob
>860	ExpressionStatement	 
>861	AssignmentExpr	pasThreadJob [ i ] . pTransformerArg = GDALCloneTransformer ( poWK -> pTransformerArg )
>862	CallExpression	GDALCloneTransformer ( poWK -> pTransformerArg )
>863	ArgumentList	poWK -> pTransformerArg
>864	Argument	poWK -> pTransformerArg
>865	PtrMemberAccess	poWK -> pTransformerArg
>866	Identifier	pTransformerArg
>867	Identifier	poWK
>868	Callee	GDALCloneTransformer
>869	Identifier	GDALCloneTransformer
>870	MemberAccess	pasThreadJob [ i ] . pTransformerArg
>871	Identifier	pTransformerArg
>872	ArrayIndexing	pasThreadJob [ i ]
>873	Identifier	i
>874	Identifier	pasThreadJob
>875	IncDecOp	 
>876	IncDec	++
>877	Identifier	i
>878	Condition	 
>879	RelationalExpression	i < nThreads
>880	Identifier	nThreads
>881	Identifier	i
>882	ForInit	 
>883	AssignmentExpr	i = 0
>884	PrimaryExpression	0
>885	Identifier	i
>886	IdentifierDeclStatement	 
>887	IdentifierDecl	bTransformerCloningSuccess = TRUE
>888	AssignmentExpr	bTransformerCloningSuccess = TRUE
>889	Identifier	TRUE
>890	Identifier	TRUE
>891	Identifier	bTransformerCloningSuccess
>892	IdentifierDeclType	int
>893	IdentifierDeclStatement	 
>894	IdentifierDecl	i
>895	Identifier	i
>896	IdentifierDeclType	int
>897	IdentifierDeclStatement	 
>898	IdentifierDecl	* pasThreadJob = ( GWKJobStruct * ) CPLCalloc ( sizeof ( GWKJobStruct ) , nThreads )
>899	AssignmentExpr	* pasThreadJob = ( GWKJobStruct * ) CPLCalloc ( sizeof ( GWKJobStruct ) , nThreads )
>900	CastExpression	( GWKJobStruct * ) CPLCalloc ( sizeof ( GWKJobStruct ) , nThreads )
>901	CallExpression	CPLCalloc ( sizeof ( GWKJobStruct ) , nThreads )
>902	ArgumentList	sizeof ( GWKJobStruct )
>903	Argument	nThreads
>904	Identifier	nThreads
>905	Argument	sizeof ( GWKJobStruct )
>906	SizeofExpr	sizeof ( GWKJobStruct )
>907	SizeofOperand	GWKJobStruct
>908	Sizeof	sizeof
>909	Callee	CPLCalloc
>910	Identifier	CPLCalloc
>911	CastTarget	GWKJobStruct *
>912	Identifier	pasThreadJob
>913	Identifier	pasThreadJob
>914	IdentifierDeclType	GWKJobStruct *
>915	CompoundStatement	 
>916	ReturnStatement	 
>917	CallExpression	GWKGenericMonoThread ( poWK , pfnFunc )
>918	ArgumentList	poWK
>919	Argument	pfnFunc
>920	Identifier	pfnFunc
>921	Argument	poWK
>922	Identifier	poWK
>923	Callee	GWKGenericMonoThread
>924	Identifier	GWKGenericMonoThread
>925	Condition	 
>926	RelationalExpression	nThreads <= 1
>927	PrimaryExpression	1
>928	Identifier	nThreads
>929	IfStatement	if ( nThreads >= nDstYSize / 2 )
>930	ExpressionStatement	 
>931	AssignmentExpr	nThreads = nDstYSize / 2
>932	MultiplicativeExpression	nDstYSize / 2
>933	PrimaryExpression	2
>934	Identifier	nDstYSize
>935	Identifier	nThreads
>936	Condition	 
>937	RelationalExpression	nThreads >= nDstYSize / 2
>938	MultiplicativeExpression	nDstYSize / 2
>939	PrimaryExpression	2
>940	Identifier	nDstYSize
>941	Identifier	nThreads
>942	IfStatement	if ( nThreads > 128 )
>943	ExpressionStatement	 
>944	AssignmentExpr	nThreads = 128
>945	PrimaryExpression	128
>946	Identifier	nThreads
>947	Condition	 
>948	RelationalExpression	nThreads > 128
>949	PrimaryExpression	128
>950	Identifier	nThreads
>951	IfStatement	if ( EQUAL ( pszWarpThreads , \"ALL_CPUS\" ) )
>952	ElseStatement	else
>953	ExpressionStatement	 
>954	AssignmentExpr	nThreads = atoi ( pszWarpThreads )
>955	CallExpression	atoi ( pszWarpThreads )
>956	ArgumentList	pszWarpThreads
>957	Argument	pszWarpThreads
>958	Identifier	pszWarpThreads
>959	Callee	atoi
>960	Identifier	atoi
>961	Identifier	nThreads
>962	ExpressionStatement	 
>963	AssignmentExpr	nThreads = CPLGetNumCPUs ( )
>964	CallExpression	CPLGetNumCPUs ( )
>965	ArgumentList	 
>966	Callee	CPLGetNumCPUs
>967	Identifier	CPLGetNumCPUs
>968	Identifier	nThreads
>969	Condition	 
>970	CallExpression	EQUAL ( pszWarpThreads , \"ALL_CPUS\" )
>971	ArgumentList	pszWarpThreads
>972	Argument	\"ALL_CPUS\"
>973	PrimaryExpression	\"ALL_CPUS\"
>974	Argument	pszWarpThreads
>975	Identifier	pszWarpThreads
>976	Callee	EQUAL
>977	Identifier	EQUAL
>978	IfStatement	if ( pszWarpThreads == NULL )
>979	ExpressionStatement	 
>980	AssignmentExpr	pszWarpThreads = CPLGetConfigOption ( \"GDAL_NUM_THREADS\" , \"1\" )
>981	CallExpression	CPLGetConfigOption ( \"GDAL_NUM_THREADS\" , \"1\" )
>982	ArgumentList	\"GDAL_NUM_THREADS\"
>983	Argument	\"1\"
>984	PrimaryExpression	\"1\"
>985	Argument	\"GDAL_NUM_THREADS\"
>986	PrimaryExpression	\"GDAL_NUM_THREADS\"
>987	Callee	CPLGetConfigOption
>988	Identifier	CPLGetConfigOption
>989	Identifier	pszWarpThreads
>990	Condition	 
>991	EqualityExpression	pszWarpThreads == NULL
>992	Identifier	NULL
>993	Identifier	pszWarpThreads
>994	IdentifierDeclStatement	 
>995	IdentifierDecl	nThreads
>996	Identifier	nThreads
>997	IdentifierDeclType	int
>998	IdentifierDeclStatement	 
>999	IdentifierDecl	* pszWarpThreads = CSLFetchNameValue ( poWK -> papszWarpOptions , \"NUM_THREADS\" )
>1000	AssignmentExpr	* pszWarpThreads = CSLFetchNameValue ( poWK -> papszWarpOptions , \"NUM_THREADS\" )
>1001	CallExpression	CSLFetchNameValue ( poWK -> papszWarpOptions , \"NUM_THREADS\" )
>1002	ArgumentList	poWK -> papszWarpOptions
>1003	Argument	\"NUM_THREADS\"
>1004	PrimaryExpression	\"NUM_THREADS\"
>1005	Argument	poWK -> papszWarpOptions
>1006	PtrMemberAccess	poWK -> papszWarpOptions
>1007	Identifier	papszWarpOptions
>1008	Identifier	poWK
>1009	Callee	CSLFetchNameValue
>1010	Identifier	CSLFetchNameValue
>1011	Identifier	pszWarpThreads
>1012	Identifier	pszWarpThreads
>1013	IdentifierDeclType	const char *
>1014	IfStatement	if ( ! poWK -> pfnProgress ( poWK -> dfProgressBase , \"\" , poWK -> pProgress ) )
>1015	CompoundStatement	 
>1016	ReturnStatement	 
>1017	Identifier	CE_Failure
>1018	ExpressionStatement	 
>1019	CallExpression	CPLError ( CE_Failure , CPLE_UserInterrupt , \"User terminated\" )
>1020	ArgumentList	CE_Failure
>1021	Argument	\"User terminated\"
>1022	PrimaryExpression	\"User terminated\"
>1023	Argument	CPLE_UserInterrupt
>1024	Identifier	CPLE_UserInterrupt
>1025	Argument	CE_Failure
>1026	Identifier	CE_Failure
>1027	Callee	CPLError
>1028	Identifier	CPLError
>1029	Condition	 
>1030	UnaryOp	! poWK -> pfnProgress ( poWK -> dfProgressBase , \"\" , poWK -> pProgress )
>1031	CallExpression	poWK -> pfnProgress ( poWK -> dfProgressBase , \"\" , poWK -> pProgress )
>1032	ArgumentList	poWK -> dfProgressBase
>1033	Argument	poWK -> pProgress
>1034	PtrMemberAccess	poWK -> pProgress
>1035	Identifier	pProgress
>1036	Identifier	poWK
>1037	Argument	\"\"
>1038	PrimaryExpression	\"\"
>1039	Argument	poWK -> dfProgressBase
>1040	PtrMemberAccess	poWK -> dfProgressBase
>1041	Identifier	dfProgressBase
>1042	Identifier	poWK
>1043	Callee	poWK -> pfnProgress
>1044	PtrMemberAccess	poWK -> pfnProgress
>1045	Identifier	pfnProgress
>1046	Identifier	poWK
>1047	UnaryOperator	!
>1048	ExpressionStatement	 
>1049	Statement	 
>1050	Statement	 
>1051	Statement	 
>1052	Statement	 
>1053	Statement	 
>1054	Statement	 
>1055	Statement	 
>1056	Statement	 
>1057	Statement	 
>1058	Statement	 
>1059	Statement	 
>1060	Statement	 
>1061	Statement	 
>1062	Statement	 
>1063	Statement	 
>1064	Statement	 
>1065	Statement	 
>1066	Statement	 
>1067	Statement	 
>1068	Statement	 
>1069	Statement	 
>1070	Statement	 
>1071	Statement	 
>1072	Statement	 
>1073	Statement	 
>1074	Statement	 
>1075	Statement	 
>1076	Statement	 
>1077	Statement	 
>1078	Statement	 
>1079	Statement	 
>1080	Statement	 
>1081	Statement	 
>1082	Statement	 
>1083	Statement	 
>1084	Statement	 
>1085	Statement	 
>1086	Statement	 
>1087	Statement	 
>1088	Statement	 
>1089	Statement	 
>1090	IdentifierDeclStatement	 
>1091	IdentifierDecl	nDstYSize = poWK -> nDstYSize
>1092	AssignmentExpr	nDstYSize = poWK -> nDstYSize
>1093	PtrMemberAccess	poWK -> nDstYSize
>1094	Identifier	nDstYSize
>1095	Identifier	poWK
>1096	Identifier	nDstYSize
>1097	Identifier	nDstYSize
>1098	IdentifierDeclType	int
>1157	FunctionDef	GDALWarpKernel 
>1158	ParameterList	 
>1159	CompoundStatement	 
>1160	ExpressionStatement	 
>1161	AssignmentExpr	papszWarpOptions = NULL
>1162	Identifier	NULL
>1163	Identifier	papszWarpOptions
>1164	ExpressionStatement	 
>1165	AssignmentExpr	pTransformerArg = NULL
>1166	Identifier	NULL
>1167	Identifier	pTransformerArg
>1168	ExpressionStatement	 
>1169	AssignmentExpr	pfnTransformer = NULL
>1170	Identifier	NULL
>1171	Identifier	pfnTransformer
>1172	ExpressionStatement	 
>1173	AssignmentExpr	dfProgressScale = 1.0
>1174	PrimaryExpression	1.0
>1175	Identifier	dfProgressScale
>1176	ExpressionStatement	 
>1177	AssignmentExpr	dfProgressBase = 0.0
>1178	PrimaryExpression	0.0
>1179	Identifier	dfProgressBase
>1180	ExpressionStatement	 
>1181	AssignmentExpr	pProgress = NULL
>1182	Identifier	NULL
>1183	Identifier	pProgress
>1184	ExpressionStatement	 
>1185	AssignmentExpr	pfnProgress = GDALDummyProgress
>1186	Identifier	GDALDummyProgress
>1187	Identifier	pfnProgress
>1188	ExpressionStatement	 
>1189	AssignmentExpr	papanBandSrcValid = NULL
>1190	Identifier	NULL
>1191	Identifier	papanBandSrcValid
>1192	ExpressionStatement	 
>1193	AssignmentExpr	papabySrcImage = NULL
>1194	Identifier	NULL
>1195	Identifier	papabySrcImage
>1196	ExpressionStatement	 
>1197	AssignmentExpr	papabyDstImage = NULL
>1198	Identifier	NULL
>1199	Identifier	papabyDstImage
>1200	ExpressionStatement	 
>1201	AssignmentExpr	panUnifiedSrcValid = NULL
>1202	Identifier	NULL
>1203	Identifier	panUnifiedSrcValid
>1204	ExpressionStatement	 
>1205	AssignmentExpr	panDstValid = NULL
>1206	Identifier	NULL
>1207	Identifier	panDstValid
>1208	ExpressionStatement	 
>1209	AssignmentExpr	pafUnifiedSrcDensity = NULL
>1210	Identifier	NULL
>1211	Identifier	pafUnifiedSrcDensity
>1212	ExpressionStatement	 
>1213	AssignmentExpr	pafDstDensity = NULL
>1214	Identifier	NULL
>1215	Identifier	pafDstDensity
>1216	ExpressionStatement	 
>1217	AssignmentExpr	nFiltInitY = 0
>1218	PrimaryExpression	0
>1219	Identifier	nFiltInitY
>1220	ExpressionStatement	 
>1221	AssignmentExpr	nFiltInitX = 0
>1222	PrimaryExpression	0
>1223	Identifier	nFiltInitX
>1224	ExpressionStatement	 
>1225	AssignmentExpr	nYRadius = 0
>1226	PrimaryExpression	0
>1227	Identifier	nYRadius
>1228	ExpressionStatement	 
>1229	AssignmentExpr	nXRadius = 0
>1230	PrimaryExpression	0
>1231	Identifier	nXRadius
>1232	ExpressionStatement	 
>1233	AssignmentExpr	dfYFilter = 0.0
>1234	PrimaryExpression	0.0
>1235	Identifier	dfYFilter
>1236	ExpressionStatement	 
>1237	AssignmentExpr	dfXFilter = 0.0
>1238	PrimaryExpression	0.0
>1239	Identifier	dfXFilter
>1240	ExpressionStatement	 
>1241	AssignmentExpr	dfYScale = 1.0
>1242	PrimaryExpression	1.0
>1243	Identifier	dfYScale
>1244	ExpressionStatement	 
>1245	AssignmentExpr	dfXScale = 1.0
>1246	PrimaryExpression	1.0
>1247	Identifier	dfXScale
>1248	ExpressionStatement	 
>1249	AssignmentExpr	nSrcYSize = 0
>1250	PrimaryExpression	0
>1251	Identifier	nSrcYSize
>1252	ExpressionStatement	 
>1253	AssignmentExpr	nSrcXSize = 0
>1254	PrimaryExpression	0
>1255	Identifier	nSrcXSize
>1256	ExpressionStatement	 
>1257	AssignmentExpr	nSrcYOff = 0
>1258	PrimaryExpression	0
>1259	Identifier	nSrcYOff
>1260	ExpressionStatement	 
>1261	AssignmentExpr	nSrcXOff = 0
>1262	PrimaryExpression	0
>1263	Identifier	nSrcXOff
>1264	ExpressionStatement	 
>1265	AssignmentExpr	nDstYSize = 0
>1266	PrimaryExpression	0
>1267	Identifier	nDstYSize
>1268	ExpressionStatement	 
>1269	AssignmentExpr	nDstXSize = 0
>1270	PrimaryExpression	0
>1271	Identifier	nDstXSize
>1272	ExpressionStatement	 
>1273	AssignmentExpr	nDstYOff = 0
>1274	PrimaryExpression	0
>1275	Identifier	nDstYOff
>1276	ExpressionStatement	 
>1277	AssignmentExpr	nDstXOff = 0
>1278	PrimaryExpression	0
>1279	Identifier	nDstXOff
>1280	ExpressionStatement	 
>1281	AssignmentExpr	nBands = 0
>1282	PrimaryExpression	0
>1283	Identifier	nBands
>1284	ExpressionStatement	 
>1285	AssignmentExpr	eWorkingDataType = GDT_Unknown
>1286	Identifier	GDT_Unknown
>1287	Identifier	eWorkingDataType
>1288	ExpressionStatement	 
>1289	AssignmentExpr	eResample = GRA_NearestNeighbour
>1290	Identifier	GRA_NearestNeighbour
>1291	Identifier	eResample
>1332	FunctionDef	GDALWarpKernel 
>1333	ParameterList	 
>1334	CompoundStatement	 
>1338	FunctionDef	GDALWarpKernel 
>1339	ParameterList	 
>1340	ReturnType	CPLErr
>1341	CompoundStatement	 
>1342	ReturnStatement	 
>1343	CallExpression	GWKGeneralCase ( this )
>1344	ArgumentList	this
>1345	Argument	this
>1346	Identifier	this
>1347	Callee	GWKGeneralCase
>1348	Identifier	GWKGeneralCase
>1349	IfStatement	if ( eResample == GRA_Mode )
>1350	ReturnStatement	 
>1351	CallExpression	GWKAverageOrMode ( this )
>1352	ArgumentList	this
>1353	Argument	this
>1354	Identifier	this
>1355	Callee	GWKAverageOrMode
>1356	Identifier	GWKAverageOrMode
>1357	Condition	 
>1358	EqualityExpression	eResample == GRA_Mode
>1359	Identifier	GRA_Mode
>1360	Identifier	eResample
>1361	IfStatement	if ( eResample == GRA_Average )
>1362	ReturnStatement	 
>1363	CallExpression	GWKAverageOrMode ( this )
>1364	ArgumentList	this
>1365	Argument	this
>1366	Identifier	this
>1367	Callee	GWKAverageOrMode
>1368	Identifier	GWKAverageOrMode
>1369	Condition	 
>1370	EqualityExpression	eResample == GRA_Average
>1371	Identifier	GRA_Average
>1372	Identifier	eResample
>1373	IfStatement	if ( eWorkingDataType == GDT_Float32 && eResample == GRA_NearestNeighbour )
>1374	ReturnStatement	 
>1375	CallExpression	GWKNearestFloat ( this )
>1376	ArgumentList	this
>1377	Argument	this
>1378	Identifier	this
>1379	Callee	GWKNearestFloat
>1380	Identifier	GWKNearestFloat
>1381	Condition	 
>1382	AndExpression	eWorkingDataType == GDT_Float32 && eResample == GRA_NearestNeighbour
>1383	EqualityExpression	eResample == GRA_NearestNeighbour
>1384	Identifier	GRA_NearestNeighbour
>1385	Identifier	eResample
>1386	EqualityExpression	eWorkingDataType == GDT_Float32
>1387	Identifier	GDT_Float32
>1388	Identifier	eWorkingDataType
>1389	IfStatement	if ( eWorkingDataType == GDT_Float32 && eResample == GRA_NearestNeighbour && papanBandSrcValid == NULL && panUnifiedSrcValid == \
>1390	ReturnStatement	 
>1391	CallExpression	GWKNearestNoMasksFloat ( this )
>1392	ArgumentList	this
>1393	Argument	this
>1394	Identifier	this
>1395	Callee	GWKNearestNoMasksFloat
>1396	Identifier	GWKNearestNoMasksFloat
>1397	Condition	 
>1398	AndExpression	eWorkingDataType == GDT_Float32 && eResample == GRA_NearestNeighbour && papanBandSrcValid == NULL && \
>1399	AndExpression	eResample == GRA_NearestNeighbour && papanBandSrcValid == NULL && panUnifiedSrcValid == NULL && pafUnifiedSrcDensity == \
>1400	AndExpression	papanBandSrcValid == NULL && panUnifiedSrcValid == NULL && pafUnifiedSrcDensity == NULL && panDstValid == \
>1401	AndExpression	panUnifiedSrcValid == NULL && pafUnifiedSrcDensity == NULL && panDstValid == NULL && pafDstDensity == \
>1402	AndExpression	pafUnifiedSrcDensity == NULL && panDstValid == NULL && pafDstDensity == NULL
>1403	AndExpression	panDstValid == NULL && pafDstDensity == NULL
>1404	EqualityExpression	pafDstDensity == NULL
>1405	Identifier	NULL
>1406	Identifier	pafDstDensity
>1407	EqualityExpression	panDstValid == NULL
>1408	Identifier	NULL
>1409	Identifier	panDstValid
>1410	EqualityExpression	pafUnifiedSrcDensity == NULL
>1411	Identifier	NULL
>1412	Identifier	pafUnifiedSrcDensity
>1413	EqualityExpression	panUnifiedSrcValid == NULL
>1414	Identifier	NULL
>1415	Identifier	panUnifiedSrcValid
>1416	EqualityExpression	papanBandSrcValid == NULL
>1417	Identifier	NULL
>1418	Identifier	papanBandSrcValid
>1419	EqualityExpression	eResample == GRA_NearestNeighbour
>1420	Identifier	GRA_NearestNeighbour
>1421	Identifier	eResample
>1422	EqualityExpression	eWorkingDataType == GDT_Float32
>1423	Identifier	GDT_Float32
>1424	Identifier	eWorkingDataType
>1425	IfStatement	if ( ( eWorkingDataType == GDT_Int16 || eWorkingDataType == GDT_UInt16 ) && eResample == GRA_NearestNeighbour )
>1426	ReturnStatement	 
>1427	CallExpression	GWKNearestShort ( this )
>1428	ArgumentList	this
>1429	Argument	this
>1430	Identifier	this
>1431	Callee	GWKNearestShort
>1432	Identifier	GWKNearestShort
>1433	Condition	 
>1434	AndExpression	( eWorkingDataType == GDT_Int16 || eWorkingDataType == GDT_UInt16 ) && eResample == GRA_NearestNeighbour
>1435	EqualityExpression	eResample == GRA_NearestNeighbour
>1436	Identifier	GRA_NearestNeighbour
>1437	Identifier	eResample
>1438	OrExpression	eWorkingDataType == GDT_Int16 || eWorkingDataType == GDT_UInt16
>1439	EqualityExpression	eWorkingDataType == GDT_UInt16
>1440	Identifier	GDT_UInt16
>1441	Identifier	eWorkingDataType
>1442	EqualityExpression	eWorkingDataType == GDT_Int16
>1443	Identifier	GDT_Int16
>1444	Identifier	eWorkingDataType
>1445	IfStatement	if ( ( eWorkingDataType == GDT_Int16 ) && eResample == GRA_Bilinear && papanBandSrcValid == NULL && panUnifiedSrcValid == \
>1446	ReturnStatement	 
>1447	CallExpression	GWKBilinearNoMasksShort ( this )
>1448	ArgumentList	this
>1449	Argument	this
>1450	Identifier	this
>1451	Callee	GWKBilinearNoMasksShort
>1452	Identifier	GWKBilinearNoMasksShort
>1453	Condition	 
>1454	AndExpression	( eWorkingDataType == GDT_Int16 ) && eResample == GRA_Bilinear && papanBandSrcValid == NULL && panUnifiedSrcValid == \
>1455	AndExpression	eResample == GRA_Bilinear && papanBandSrcValid == NULL && panUnifiedSrcValid == NULL && pafUnifiedSrcDensity == \
>1456	AndExpression	papanBandSrcValid == NULL && panUnifiedSrcValid == NULL && pafUnifiedSrcDensity == NULL && panDstValid == \
>1457	AndExpression	panUnifiedSrcValid == NULL && pafUnifiedSrcDensity == NULL && panDstValid == NULL && pafDstDensity == \
>1458	AndExpression	pafUnifiedSrcDensity == NULL && panDstValid == NULL && pafDstDensity == NULL
>1459	AndExpression	panDstValid == NULL && pafDstDensity == NULL
>1460	EqualityExpression	pafDstDensity == NULL
>1461	Identifier	NULL
>1462	Identifier	pafDstDensity
>1463	EqualityExpression	panDstValid == NULL
>1464	Identifier	NULL
>1465	Identifier	panDstValid
>1466	EqualityExpression	pafUnifiedSrcDensity == NULL
>1467	Identifier	NULL
>1468	Identifier	pafUnifiedSrcDensity
>1469	EqualityExpression	panUnifiedSrcValid == NULL
>1470	Identifier	NULL
>1471	Identifier	panUnifiedSrcValid
>1472	EqualityExpression	papanBandSrcValid == NULL
>1473	Identifier	NULL
>1474	Identifier	papanBandSrcValid
>1475	EqualityExpression	eResample == GRA_Bilinear
>1476	Identifier	GRA_Bilinear
>1477	Identifier	eResample
>1478	EqualityExpression	eWorkingDataType == GDT_Int16
>1479	Identifier	GDT_Int16
>1480	Identifier	eWorkingDataType
>1481	IfStatement	if ( ( eWorkingDataType == GDT_Int16 ) && eResample == GRA_CubicSpline && papanBandSrcValid == NULL && panUnifiedSrcValid == \
>1482	ReturnStatement	 
>1483	CallExpression	GWKCubicSplineNoMasksShort ( this )
>1484	ArgumentList	this
>1485	Argument	this
>1486	Identifier	this
>1487	Callee	GWKCubicSplineNoMasksShort
>1488	Identifier	GWKCubicSplineNoMasksShort
>1489	Condition	 
>1490	AndExpression	( eWorkingDataType == GDT_Int16 ) && eResample == GRA_CubicSpline && papanBandSrcValid == NULL && panUnifiedSrcValid == \
>1491	AndExpression	eResample == GRA_CubicSpline && papanBandSrcValid == NULL && panUnifiedSrcValid == NULL && pafUnifiedSrcDensity == \
>1492	AndExpression	papanBandSrcValid == NULL && panUnifiedSrcValid == NULL && pafUnifiedSrcDensity == NULL && panDstValid == \
>1493	AndExpression	panUnifiedSrcValid == NULL && pafUnifiedSrcDensity == NULL && panDstValid == NULL && pafDstDensity == \
>1494	AndExpression	pafUnifiedSrcDensity == NULL && panDstValid == NULL && pafDstDensity == NULL
>1495	AndExpression	panDstValid == NULL && pafDstDensity == NULL
>1496	EqualityExpression	pafDstDensity == NULL
>1497	Identifier	NULL
>1498	Identifier	pafDstDensity
>1499	EqualityExpression	panDstValid == NULL
>1500	Identifier	NULL
>1501	Identifier	panDstValid
>1502	EqualityExpression	pafUnifiedSrcDensity == NULL
>1503	Identifier	NULL
>1504	Identifier	pafUnifiedSrcDensity
>1505	EqualityExpression	panUnifiedSrcValid == NULL
>1506	Identifier	NULL
>1507	Identifier	panUnifiedSrcValid
>1508	EqualityExpression	papanBandSrcValid == NULL
>1509	Identifier	NULL
>1510	Identifier	papanBandSrcValid
>1511	EqualityExpression	eResample == GRA_CubicSpline
>1512	Identifier	GRA_CubicSpline
>1513	Identifier	eResample
>1514	EqualityExpression	eWorkingDataType == GDT_Int16
>1515	Identifier	GDT_Int16
>1516	Identifier	eWorkingDataType
>1517	IfStatement	if ( ( eWorkingDataType == GDT_Int16 ) && eResample == GRA_Cubic && papanBandSrcValid == NULL && panUnifiedSrcValid == \
>1518	ReturnStatement	 
>1519	CallExpression	GWKCubicNoMasksShort ( this )
>1520	ArgumentList	this
>1521	Argument	this
>1522	Identifier	this
>1523	Callee	GWKCubicNoMasksShort
>1524	Identifier	GWKCubicNoMasksShort
>1525	Condition	 
>1526	AndExpression	( eWorkingDataType == GDT_Int16 ) && eResample == GRA_Cubic && papanBandSrcValid == NULL && panUnifiedSrcValid == \
>1527	AndExpression	eResample == GRA_Cubic && papanBandSrcValid == NULL && panUnifiedSrcValid == NULL && pafUnifiedSrcDensity == \
>1528	AndExpression	papanBandSrcValid == NULL && panUnifiedSrcValid == NULL && pafUnifiedSrcDensity == NULL && panDstValid == \
>1529	AndExpression	panUnifiedSrcValid == NULL && pafUnifiedSrcDensity == NULL && panDstValid == NULL && pafDstDensity == \
>1530	AndExpression	pafUnifiedSrcDensity == NULL && panDstValid == NULL && pafDstDensity == NULL
>1531	AndExpression	panDstValid == NULL && pafDstDensity == NULL
>1532	EqualityExpression	pafDstDensity == NULL
>1533	Identifier	NULL
>1534	Identifier	pafDstDensity
>1535	EqualityExpression	panDstValid == NULL
>1536	Identifier	NULL
>1537	Identifier	panDstValid
>1538	EqualityExpression	pafUnifiedSrcDensity == NULL
>1539	Identifier	NULL
>1540	Identifier	pafUnifiedSrcDensity
>1541	EqualityExpression	panUnifiedSrcValid == NULL
>1542	Identifier	NULL
>1543	Identifier	panUnifiedSrcValid
>1544	EqualityExpression	papanBandSrcValid == NULL
>1545	Identifier	NULL
>1546	Identifier	papanBandSrcValid
>1547	EqualityExpression	eResample == GRA_Cubic
>1548	Identifier	GRA_Cubic
>1549	Identifier	eResample
>1550	EqualityExpression	eWorkingDataType == GDT_Int16
>1551	Identifier	GDT_Int16
>1552	Identifier	eWorkingDataType
>1553	IfStatement	if ( ( eWorkingDataType == GDT_Int16 || eWorkingDataType == GDT_UInt16 ) && eResample == GRA_NearestNeighbour && \
>1554	ReturnStatement	 
>1555	CallExpression	GWKNearestNoMasksShort ( this )
>1556	ArgumentList	this
>1557	Argument	this
>1558	Identifier	this
>1559	Callee	GWKNearestNoMasksShort
>1560	Identifier	GWKNearestNoMasksShort
>1561	Condition	 
>1562	AndExpression	( eWorkingDataType == GDT_Int16 || eWorkingDataType == GDT_UInt16 ) && eResample == GRA_NearestNeighbour && \
>1563	AndExpression	eResample == GRA_NearestNeighbour && papanBandSrcValid == NULL && panUnifiedSrcValid == NULL && pafUnifiedSrcDensity == \
>1564	AndExpression	papanBandSrcValid == NULL && panUnifiedSrcValid == NULL && pafUnifiedSrcDensity == NULL && panDstValid == \
>1565	AndExpression	panUnifiedSrcValid == NULL && pafUnifiedSrcDensity == NULL && panDstValid == NULL && pafDstDensity == \
>1566	AndExpression	pafUnifiedSrcDensity == NULL && panDstValid == NULL && pafDstDensity == NULL
>1567	AndExpression	panDstValid == NULL && pafDstDensity == NULL
>1568	EqualityExpression	pafDstDensity == NULL
>1569	Identifier	NULL
>1570	Identifier	pafDstDensity
>1571	EqualityExpression	panDstValid == NULL
>1572	Identifier	NULL
>1573	Identifier	panDstValid
>1574	EqualityExpression	pafUnifiedSrcDensity == NULL
>1575	Identifier	NULL
>1576	Identifier	pafUnifiedSrcDensity
>1577	EqualityExpression	panUnifiedSrcValid == NULL
>1578	Identifier	NULL
>1579	Identifier	panUnifiedSrcValid
>1580	EqualityExpression	papanBandSrcValid == NULL
>1581	Identifier	NULL
>1582	Identifier	papanBandSrcValid
>1583	EqualityExpression	eResample == GRA_NearestNeighbour
>1584	Identifier	GRA_NearestNeighbour
>1585	Identifier	eResample
>1586	OrExpression	eWorkingDataType == GDT_Int16 || eWorkingDataType == GDT_UInt16
>1587	EqualityExpression	eWorkingDataType == GDT_UInt16
>1588	Identifier	GDT_UInt16
>1589	Identifier	eWorkingDataType
>1590	EqualityExpression	eWorkingDataType == GDT_Int16
>1591	Identifier	GDT_Int16
>1592	Identifier	eWorkingDataType
>1593	IfStatement	if ( eWorkingDataType == GDT_Byte && eResample == GRA_NearestNeighbour )
>1594	ReturnStatement	 
>1595	CallExpression	GWKNearestByte ( this )
>1596	ArgumentList	this
>1597	Argument	this
>1598	Identifier	this
>1599	Callee	GWKNearestByte
>1600	Identifier	GWKNearestByte
>1601	Condition	 
>1602	AndExpression	eWorkingDataType == GDT_Byte && eResample == GRA_NearestNeighbour
>1603	EqualityExpression	eResample == GRA_NearestNeighbour
>1604	Identifier	GRA_NearestNeighbour
>1605	Identifier	eResample
>1606	EqualityExpression	eWorkingDataType == GDT_Byte
>1607	Identifier	GDT_Byte
>1608	Identifier	eWorkingDataType
>1609	IfStatement	if ( eWorkingDataType == GDT_Byte && eResample == GRA_CubicSpline && papanBandSrcValid == NULL && panUnifiedSrcValid == \
>1610	ReturnStatement	 
>1611	CallExpression	GWKCubicSplineNoMasksByte ( this )
>1612	ArgumentList	this
>1613	Argument	this
>1614	Identifier	this
>1615	Callee	GWKCubicSplineNoMasksByte
>1616	Identifier	GWKCubicSplineNoMasksByte
>1617	Condition	 
>1618	AndExpression	eWorkingDataType == GDT_Byte && eResample == GRA_CubicSpline && papanBandSrcValid == NULL && panUnifiedSrcValid == \
>1619	AndExpression	eResample == GRA_CubicSpline && papanBandSrcValid == NULL && panUnifiedSrcValid == NULL && pafUnifiedSrcDensity == \
>1620	AndExpression	papanBandSrcValid == NULL && panUnifiedSrcValid == NULL && pafUnifiedSrcDensity == NULL && panDstValid == \
>1621	AndExpression	panUnifiedSrcValid == NULL && pafUnifiedSrcDensity == NULL && panDstValid == NULL && pafDstDensity == \
>1622	AndExpression	pafUnifiedSrcDensity == NULL && panDstValid == NULL && pafDstDensity == NULL
>1623	AndExpression	panDstValid == NULL && pafDstDensity == NULL
>1624	EqualityExpression	pafDstDensity == NULL
>1625	Identifier	NULL
>1626	Identifier	pafDstDensity
>1627	EqualityExpression	panDstValid == NULL
>1628	Identifier	NULL
>1629	Identifier	panDstValid
>1630	EqualityExpression	pafUnifiedSrcDensity == NULL
>1631	Identifier	NULL
>1632	Identifier	pafUnifiedSrcDensity
>1633	EqualityExpression	panUnifiedSrcValid == NULL
>1634	Identifier	NULL
>1635	Identifier	panUnifiedSrcValid
>1636	EqualityExpression	papanBandSrcValid == NULL
>1637	Identifier	NULL
>1638	Identifier	papanBandSrcValid
>1639	EqualityExpression	eResample == GRA_CubicSpline
>1640	Identifier	GRA_CubicSpline
>1641	Identifier	eResample
>1642	EqualityExpression	eWorkingDataType == GDT_Byte
>1643	Identifier	GDT_Byte
>1644	Identifier	eWorkingDataType
>1645	IfStatement	if ( eWorkingDataType == GDT_Byte && eResample == GRA_Cubic && papanBandSrcValid == NULL && panUnifiedSrcValid == \
>1646	ReturnStatement	 
>1647	CallExpression	GWKCubicNoMasksByte ( this )
>1648	ArgumentList	this
>1649	Argument	this
>1650	Identifier	this
>1651	Callee	GWKCubicNoMasksByte
>1652	Identifier	GWKCubicNoMasksByte
>1653	Condition	 
>1654	AndExpression	eWorkingDataType == GDT_Byte && eResample == GRA_Cubic && papanBandSrcValid == NULL && panUnifiedSrcValid == \
>1655	AndExpression	eResample == GRA_Cubic && papanBandSrcValid == NULL && panUnifiedSrcValid == NULL && pafUnifiedSrcDensity == \
>1656	AndExpression	papanBandSrcValid == NULL && panUnifiedSrcValid == NULL && pafUnifiedSrcDensity == NULL && panDstValid == \
>1657	AndExpression	panUnifiedSrcValid == NULL && pafUnifiedSrcDensity == NULL && panDstValid == NULL && pafDstDensity == \
>1658	AndExpression	pafUnifiedSrcDensity == NULL && panDstValid == NULL && pafDstDensity == NULL
>1659	AndExpression	panDstValid == NULL && pafDstDensity == NULL
>1660	EqualityExpression	pafDstDensity == NULL
>1661	Identifier	NULL
>1662	Identifier	pafDstDensity
>1663	EqualityExpression	panDstValid == NULL
>1664	Identifier	NULL
>1665	Identifier	panDstValid
>1666	EqualityExpression	pafUnifiedSrcDensity == NULL
>1667	Identifier	NULL
>1668	Identifier	pafUnifiedSrcDensity
>1669	EqualityExpression	panUnifiedSrcValid == NULL
>1670	Identifier	NULL
>1671	Identifier	panUnifiedSrcValid
>1672	EqualityExpression	papanBandSrcValid == NULL
>1673	Identifier	NULL
>1674	Identifier	papanBandSrcValid
>1675	EqualityExpression	eResample == GRA_Cubic
>1676	Identifier	GRA_Cubic
>1677	Identifier	eResample
>1678	EqualityExpression	eWorkingDataType == GDT_Byte
>1679	Identifier	GDT_Byte
>1680	Identifier	eWorkingDataType
>1681	IfStatement	if ( eWorkingDataType == GDT_Byte && eResample == GRA_Bilinear && papanBandSrcValid == NULL && panUnifiedSrcValid == \
>1682	ReturnStatement	 
>1683	CallExpression	GWKBilinearNoMasksByte ( this )
>1684	ArgumentList	this
>1685	Argument	this
>1686	Identifier	this
>1687	Callee	GWKBilinearNoMasksByte
>1688	Identifier	GWKBilinearNoMasksByte
>1689	Condition	 
>1690	AndExpression	eWorkingDataType == GDT_Byte && eResample == GRA_Bilinear && papanBandSrcValid == NULL && panUnifiedSrcValid == \
>1691	AndExpression	eResample == GRA_Bilinear && papanBandSrcValid == NULL && panUnifiedSrcValid == NULL && pafUnifiedSrcDensity == \
>1692	AndExpression	papanBandSrcValid == NULL && panUnifiedSrcValid == NULL && pafUnifiedSrcDensity == NULL && panDstValid == \
>1693	AndExpression	panUnifiedSrcValid == NULL && pafUnifiedSrcDensity == NULL && panDstValid == NULL && pafDstDensity == \
>1694	AndExpression	pafUnifiedSrcDensity == NULL && panDstValid == NULL && pafDstDensity == NULL
>1695	AndExpression	panDstValid == NULL && pafDstDensity == NULL
>1696	EqualityExpression	pafDstDensity == NULL
>1697	Identifier	NULL
>1698	Identifier	pafDstDensity
>1699	EqualityExpression	panDstValid == NULL
>1700	Identifier	NULL
>1701	Identifier	panDstValid
>1702	EqualityExpression	pafUnifiedSrcDensity == NULL
>1703	Identifier	NULL
>1704	Identifier	pafUnifiedSrcDensity
>1705	EqualityExpression	panUnifiedSrcValid == NULL
>1706	Identifier	NULL
>1707	Identifier	panUnifiedSrcValid
>1708	EqualityExpression	papanBandSrcValid == NULL
>1709	Identifier	NULL
>1710	Identifier	papanBandSrcValid
>1711	EqualityExpression	eResample == GRA_Bilinear
>1712	Identifier	GRA_Bilinear
>1713	Identifier	eResample
>1714	EqualityExpression	eWorkingDataType == GDT_Byte
>1715	Identifier	GDT_Byte
>1716	Identifier	eWorkingDataType
>1717	IfStatement	if ( eWorkingDataType == GDT_Byte && eResample == GRA_NearestNeighbour && papanBandSrcValid == NULL && panUnifiedSrcValid == \
>1718	ReturnStatement	 
>1719	CallExpression	GWKNearestNoMasksByte ( this )
>1720	ArgumentList	this
>1721	Argument	this
>1722	Identifier	this
>1723	Callee	GWKNearestNoMasksByte
>1724	Identifier	GWKNearestNoMasksByte
>1725	Condition	 
>1726	AndExpression	eWorkingDataType == GDT_Byte && eResample == GRA_NearestNeighbour && papanBandSrcValid == NULL && panUnifiedSrcValid == \
>1727	AndExpression	eResample == GRA_NearestNeighbour && papanBandSrcValid == NULL && panUnifiedSrcValid == NULL && pafUnifiedSrcDensity == \
>1728	AndExpression	papanBandSrcValid == NULL && panUnifiedSrcValid == NULL && pafUnifiedSrcDensity == NULL && panDstValid == \
>1729	AndExpression	panUnifiedSrcValid == NULL && pafUnifiedSrcDensity == NULL && panDstValid == NULL && pafDstDensity == \
>1730	AndExpression	pafUnifiedSrcDensity == NULL && panDstValid == NULL && pafDstDensity == NULL
>1731	AndExpression	panDstValid == NULL && pafDstDensity == NULL
>1732	EqualityExpression	pafDstDensity == NULL
>1733	Identifier	NULL
>1734	Identifier	pafDstDensity
>1735	EqualityExpression	panDstValid == NULL
>1736	Identifier	NULL
>1737	Identifier	panDstValid
>1738	EqualityExpression	pafUnifiedSrcDensity == NULL
>1739	Identifier	NULL
>1740	Identifier	pafUnifiedSrcDensity
>1741	EqualityExpression	panUnifiedSrcValid == NULL
>1742	Identifier	NULL
>1743	Identifier	panUnifiedSrcValid
>1744	EqualityExpression	papanBandSrcValid == NULL
>1745	Identifier	NULL
>1746	Identifier	papanBandSrcValid
>1747	EqualityExpression	eResample == GRA_NearestNeighbour
>1748	Identifier	GRA_NearestNeighbour
>1749	Identifier	eResample
>1750	EqualityExpression	eWorkingDataType == GDT_Byte
>1751	Identifier	GDT_Byte
>1752	Identifier	eWorkingDataType
>1753	IfStatement	if ( ( eWorkingDataType == GDT_Byte || eWorkingDataType == GDT_CInt16 || eWorkingDataType == GDT_UInt16 || eWorkingDataType == \
>1754	CompoundStatement	 
>1755	IfStatement	if ( eResult != CE_Warning )
>1756	ReturnStatement	 
>1757	Identifier	eResult
>1758	Condition	 
>1759	EqualityExpression	eResult != CE_Warning
>1760	Identifier	CE_Warning
>1761	Identifier	eResult
>1762	IdentifierDeclStatement	 
>1763	IdentifierDecl	eResult = GWKOpenCLCase ( this )
>1764	AssignmentExpr	eResult = GWKOpenCLCase ( this )
>1765	CallExpression	GWKOpenCLCase ( this )
>1766	ArgumentList	this
>1767	Argument	this
>1768	Identifier	this
>1769	Callee	GWKOpenCLCase
>1770	Identifier	GWKOpenCLCase
>1771	Identifier	eResult
>1772	Identifier	eResult
>1773	IdentifierDeclType	CPLErr
>1774	Condition	 
>1775	AndExpression	( eWorkingDataType == GDT_Byte || eWorkingDataType == GDT_CInt16 || eWorkingDataType == GDT_UInt16 || \
>1776	AndExpression	( eResample == GRA_Bilinear || eResample == GRA_Cubic || eResample == GRA_CubicSpline || eResample == \
>1777	CallExpression	CSLFetchBoolean ( papszWarpOptions , \"USE_OPENCL\" , TRUE )
>1778	ArgumentList	papszWarpOptions
>1779	Argument	TRUE
>1780	Identifier	TRUE
>1781	Argument	\"USE_OPENCL\"
>1782	PrimaryExpression	\"USE_OPENCL\"
>1783	Argument	papszWarpOptions
>1784	Identifier	papszWarpOptions
>1785	Callee	CSLFetchBoolean
>1786	Identifier	CSLFetchBoolean
>1787	OrExpression	eResample == GRA_Bilinear || eResample == GRA_Cubic || eResample == GRA_CubicSpline || eResample == \
>1788	OrExpression	eResample == GRA_Cubic || eResample == GRA_CubicSpline || eResample == GRA_Lanczos
>1789	OrExpression	eResample == GRA_CubicSpline || eResample == GRA_Lanczos
>1790	EqualityExpression	eResample == GRA_Lanczos
>1791	Identifier	GRA_Lanczos
>1792	Identifier	eResample
>1793	EqualityExpression	eResample == GRA_CubicSpline
>1794	Identifier	GRA_CubicSpline
>1795	Identifier	eResample
>1796	EqualityExpression	eResample == GRA_Cubic
>1797	Identifier	GRA_Cubic
>1798	Identifier	eResample
>1799	EqualityExpression	eResample == GRA_Bilinear
>1800	Identifier	GRA_Bilinear
>1801	Identifier	eResample
>1802	OrExpression	eWorkingDataType == GDT_Byte || eWorkingDataType == GDT_CInt16 || eWorkingDataType == GDT_UInt16 || \
>1803	OrExpression	eWorkingDataType == GDT_CInt16 || eWorkingDataType == GDT_UInt16 || eWorkingDataType == GDT_Int16 || \
>1804	OrExpression	eWorkingDataType == GDT_UInt16 || eWorkingDataType == GDT_Int16 || eWorkingDataType == GDT_CFloat32 || \
>1805	OrExpression	eWorkingDataType == GDT_Int16 || eWorkingDataType == GDT_CFloat32 || eWorkingDataType == GDT_Float32
>1806	OrExpression	eWorkingDataType == GDT_CFloat32 || eWorkingDataType == GDT_Float32
>1807	EqualityExpression	eWorkingDataType == GDT_Float32
>1808	Identifier	GDT_Float32
>1809	Identifier	eWorkingDataType
>1810	EqualityExpression	eWorkingDataType == GDT_CFloat32
>1811	Identifier	GDT_CFloat32
>1812	Identifier	eWorkingDataType
>1813	EqualityExpression	eWorkingDataType == GDT_Int16
>1814	Identifier	GDT_Int16
>1815	Identifier	eWorkingDataType
>1816	EqualityExpression	eWorkingDataType == GDT_UInt16
>1817	Identifier	GDT_UInt16
>1818	Identifier	eWorkingDataType
>1819	EqualityExpression	eWorkingDataType == GDT_CInt16
>1820	Identifier	GDT_CInt16
>1821	Identifier	eWorkingDataType
>1822	EqualityExpression	eWorkingDataType == GDT_Byte
>1823	Identifier	GDT_Byte
>1824	Identifier	eWorkingDataType
>1825	IfStatement	if ( CSLFetchBoolean ( papszWarpOptions , \"USE_GENERAL_CASE\" , FALSE ) )
>1826	ReturnStatement	 
>1827	CallExpression	GWKGeneralCase ( this )
>1828	ArgumentList	this
>1829	Argument	this
>1830	Identifier	this
>1831	Callee	GWKGeneralCase
>1832	Identifier	GWKGeneralCase
>1833	Condition	 
>1834	CallExpression	CSLFetchBoolean ( papszWarpOptions , \"USE_GENERAL_CASE\" , FALSE )
>1835	ArgumentList	papszWarpOptions
>1836	Argument	FALSE
>1837	Identifier	FALSE
>1838	Argument	\"USE_GENERAL_CASE\"
>1839	PrimaryExpression	\"USE_GENERAL_CASE\"
>1840	Argument	papszWarpOptions
>1841	Identifier	papszWarpOptions
>1842	Callee	CSLFetchBoolean
>1843	Identifier	CSLFetchBoolean
>1844	ExpressionStatement	 
>1845	AssignmentExpr	nFiltInitY = ( ( anGWKFilterRadius [ eResample ] + 1 ) % 2 ) - nYRadius
>1846	AdditiveExpression	( ( anGWKFilterRadius [ eResample ] + 1 ) % 2 ) - nYRadius
>1847	Identifier	nYRadius
>1848	MultiplicativeExpression	( anGWKFilterRadius [ eResample ] + 1 ) % 2
>1849	PrimaryExpression	2
>1850	AdditiveExpression	anGWKFilterRadius [ eResample ] + 1
>1851	PrimaryExpression	1
>1852	ArrayIndexing	anGWKFilterRadius [ eResample ]
>1853	Identifier	eResample
>1854	Identifier	anGWKFilterRadius
>1855	Identifier	nFiltInitY
>1856	ExpressionStatement	 
>1857	AssignmentExpr	nFiltInitX = ( ( anGWKFilterRadius [ eResample ] + 1 ) % 2 ) - nXRadius
>1858	AdditiveExpression	( ( anGWKFilterRadius [ eResample ] + 1 ) % 2 ) - nXRadius
>1859	Identifier	nXRadius
>1860	MultiplicativeExpression	( anGWKFilterRadius [ eResample ] + 1 ) % 2
>1861	PrimaryExpression	2
>1862	AdditiveExpression	anGWKFilterRadius [ eResample ] + 1
>1863	PrimaryExpression	1
>1864	ArrayIndexing	anGWKFilterRadius [ eResample ]
>1865	Identifier	eResample
>1866	Identifier	anGWKFilterRadius
>1867	Identifier	nFiltInitX
>1868	ExpressionStatement	 
>1869	AssignmentExpr	nYRadius = ( dfYScale < 1.0 ) ? ( int ) ceil ( dfYFilter / dfYScale ) 
>1870	ConditionalExpression	( dfYScale < 1.0 ) ? ( int ) ceil ( dfYFilter / dfYScale ) 
>1871	CastExpression	( int ) dfYFilter
>1872	Identifier	dfYFilter
>1873	CastTarget	int
>1874	CastExpression	( int ) ceil ( dfYFilter / dfYScale )
>1875	CallExpression	ceil ( dfYFilter / dfYScale )
>1876	ArgumentList	dfYFilter / dfYScale
>1877	Argument	dfYFilter / dfYScale
>1878	MultiplicativeExpression	dfYFilter / dfYScale
>1879	Identifier	dfYScale
>1880	Identifier	dfYFilter
>1881	Callee	ceil
>1882	Identifier	ceil
>1883	CastTarget	int
>1884	Condition	dfYScale < 1.0
>1885	RelationalExpression	dfYScale < 1.0
>1886	PrimaryExpression	1.0
>1887	Identifier	dfYScale
>1888	Identifier	nYRadius
>1889	ExpressionStatement	 
>1890	AssignmentExpr	nXRadius = ( dfXScale < 1.0 ) ? ( int ) ceil ( dfXFilter / dfXScale ) 
>1891	ConditionalExpression	( dfXScale < 1.0 ) ? ( int ) ceil ( dfXFilter / dfXScale ) 
>1892	CastExpression	( int ) dfXFilter
>1893	Identifier	dfXFilter
>1894	CastTarget	int
>1895	CastExpression	( int ) ceil ( dfXFilter / dfXScale )
>1896	CallExpression	ceil ( dfXFilter / dfXScale )
>1897	ArgumentList	dfXFilter / dfXScale
>1898	Argument	dfXFilter / dfXScale
>1899	MultiplicativeExpression	dfXFilter / dfXScale
>1900	Identifier	dfXScale
>1901	Identifier	dfXFilter
>1902	Callee	ceil
>1903	Identifier	ceil
>1904	CastTarget	int
>1905	Condition	dfXScale < 1.0
>1906	RelationalExpression	dfXScale < 1.0
>1907	PrimaryExpression	1.0
>1908	Identifier	dfXScale
>1909	Identifier	nXRadius
>1910	ExpressionStatement	 
>1911	AssignmentExpr	dfYFilter = anGWKFilterRadius [ eResample ]
>1912	ArrayIndexing	anGWKFilterRadius [ eResample ]
>1913	Identifier	eResample
>1914	Identifier	anGWKFilterRadius
>1915	Identifier	dfYFilter
>1916	ExpressionStatement	 
>1917	AssignmentExpr	dfXFilter = anGWKFilterRadius [ eResample ]
>1918	ArrayIndexing	anGWKFilterRadius [ eResample ]
>1919	Identifier	eResample
>1920	Identifier	anGWKFilterRadius
>1921	Identifier	dfXFilter
>1922	IfStatement	if ( nSrcYSize >= nDstYSize && nSrcYSize <= nDstYSize + 1 + 2 * anGWKFilterRadius [ eResample ] )
>1923	ExpressionStatement	 
>1924	AssignmentExpr	dfYScale = 1
>1925	PrimaryExpression	1
>1926	Identifier	dfYScale
>1927	Condition	 
>1928	AndExpression	nSrcYSize >= nDstYSize && nSrcYSize <= nDstYSize + 1 + 2 * anGWKFilterRadius [ eResample ]
>1929	RelationalExpression	nSrcYSize <= nDstYSize + 1 + 2 * anGWKFilterRadius [ eResample ]
>1930	AdditiveExpression	nDstYSize + 1 + 2 * anGWKFilterRadius [ eResample ]
>1931	AdditiveExpression	1 + 2 * anGWKFilterRadius [ eResample ]
>1932	MultiplicativeExpression	2 * anGWKFilterRadius [ eResample ]
>1933	ArrayIndexing	anGWKFilterRadius [ eResample ]
>1934	Identifier	eResample
>1935	Identifier	anGWKFilterRadius
>1936	PrimaryExpression	2
>1937	PrimaryExpression	1
>1938	Identifier	nDstYSize
>1939	Identifier	nSrcYSize
>1940	RelationalExpression	nSrcYSize >= nDstYSize
>1941	Identifier	nDstYSize
>1942	Identifier	nSrcYSize
>1943	IfStatement	if ( nSrcXSize >= nDstXSize && nSrcXSize <= nDstXSize + 1 + 2 * anGWKFilterRadius [ eResample ] )
>1944	ExpressionStatement	 
>1945	AssignmentExpr	dfXScale = 1
>1946	PrimaryExpression	1
>1947	Identifier	dfXScale
>1948	Condition	 
>1949	AndExpression	nSrcXSize >= nDstXSize && nSrcXSize <= nDstXSize + 1 + 2 * anGWKFilterRadius [ eResample ]
>1950	RelationalExpression	nSrcXSize <= nDstXSize + 1 + 2 * anGWKFilterRadius [ eResample ]
>1951	AdditiveExpression	nDstXSize + 1 + 2 * anGWKFilterRadius [ eResample ]
>1952	AdditiveExpression	1 + 2 * anGWKFilterRadius [ eResample ]
>1953	MultiplicativeExpression	2 * anGWKFilterRadius [ eResample ]
>1954	ArrayIndexing	anGWKFilterRadius [ eResample ]
>1955	Identifier	eResample
>1956	Identifier	anGWKFilterRadius
>1957	PrimaryExpression	2
>1958	PrimaryExpression	1
>1959	Identifier	nDstXSize
>1960	Identifier	nSrcXSize
>1961	RelationalExpression	nSrcXSize >= nDstXSize
>1962	Identifier	nDstXSize
>1963	Identifier	nSrcXSize
>1964	ExpressionStatement	 
>1965	AssignmentExpr	dfYScale = ( double ) nDstYSize / nSrcYSize
>1966	MultiplicativeExpression	( double ) nDstYSize / nSrcYSize
>1967	Identifier	nSrcYSize
>1968	CastExpression	( double ) nDstYSize
>1969	Identifier	nDstYSize
>1970	CastTarget	double
>1971	Identifier	dfYScale
>1972	ExpressionStatement	 
>1973	AssignmentExpr	dfXScale = ( double ) nDstXSize / nSrcXSize
>1974	MultiplicativeExpression	( double ) nDstXSize / nSrcXSize
>1975	Identifier	nSrcXSize
>1976	CastExpression	( double ) nDstXSize
>1977	Identifier	nDstXSize
>1978	CastTarget	double
>1979	Identifier	dfXScale
>1980	IfStatement	if ( nSrcXSize <= 0 || nSrcYSize <= 0 )
>1981	CompoundStatement	 
>1982	ReturnStatement	 
>1983	Identifier	CE_None
>1984	IfStatement	if ( ! pfnProgress ( dfProgressBase + dfProgressScale , \"\" , pProgress ) )
>1985	CompoundStatement	 
>1986	ReturnStatement	 
>1987	Identifier	CE_Failure
>1988	ExpressionStatement	 
>1989	CallExpression	CPLError ( CE_Failure , CPLE_UserInterrupt , \"User terminated\" )
>1990	ArgumentList	CE_Failure
>1991	Argument	\"User terminated\"
>1992	PrimaryExpression	\"User terminated\"
>1993	Argument	CPLE_UserInterrupt
>1994	Identifier	CPLE_UserInterrupt
>1995	Argument	CE_Failure
>1996	Identifier	CE_Failure
>1997	Callee	CPLError
>1998	Identifier	CPLError
>1999	Condition	 
>2000	UnaryOp	! pfnProgress ( dfProgressBase + dfProgressScale , \"\" , pProgress )
>2001	CallExpression	pfnProgress ( dfProgressBase + dfProgressScale , \"\" , pProgress )
>2002	ArgumentList	dfProgressBase + dfProgressScale
>2003	Argument	pProgress
>2004	Identifier	pProgress
>2005	Argument	\"\"
>2006	PrimaryExpression	\"\"
>2007	Argument	dfProgressBase + dfProgressScale
>2008	AdditiveExpression	dfProgressBase + dfProgressScale
>2009	Identifier	dfProgressScale
>2010	Identifier	dfProgressBase
>2011	Callee	pfnProgress
>2012	Identifier	pfnProgress
>2013	UnaryOperator	!
>2014	Condition	 
>2015	OrExpression	nSrcXSize <= 0 || nSrcYSize <= 0
>2016	RelationalExpression	nSrcYSize <= 0
>2017	PrimaryExpression	0
>2018	Identifier	nSrcYSize
>2019	RelationalExpression	nSrcXSize <= 0
>2020	PrimaryExpression	0
>2021	Identifier	nSrcXSize
>2022	IfStatement	if ( ( eErr = Validate ( ) ) != CE_None )
>2023	ReturnStatement	 
>2024	Identifier	eErr
>2025	Condition	 
>2026	EqualityExpression	( eErr = Validate ( ) ) != CE_None
>2027	Identifier	CE_None
>2028	AssignmentExpr	eErr = Validate ( )
>2029	CallExpression	Validate ( )
>2030	ArgumentList	 
>2031	Callee	Validate
>2032	Identifier	Validate
>2033	Identifier	eErr
>2034	IdentifierDeclStatement	 
>2035	IdentifierDecl	eErr
>2036	Identifier	eErr
>2037	IdentifierDeclType	CPLErr
>2109	FunctionDef	GDALWarpKernel 
>2110	ParameterList	 
>2111	ReturnType	CPLErr
>2112	CompoundStatement	 
>2113	ReturnStatement	 
>2114	Identifier	CE_None
>2115	IfStatement	if ( ( eResample == GRA_CubicSpline || eResample == GRA_Lanczos ) && atoi ( CSLFetchNameValueDef ( papszWarpOptions , \"\
>2116	CompoundStatement	 
>2117	ReturnStatement	 
>2118	Identifier	CE_Failure
>2119	ExpressionStatement	 
>2120	Statement	 
>2121	Statement	 
>2122	Statement	 
>2123	Statement	 
>2124	Statement	 
>2125	Statement	 
>2126	Statement	 
>2127	Statement	 
>2128	Statement	 
>2129	Statement	 
>2130	Statement	 
>2131	Statement	 
>2132	Condition	 
>2133	AndExpression	( eResample == GRA_CubicSpline || eResample == GRA_Lanczos ) && atoi ( CSLFetchNameValueDef ( papszWarpOptions , \"\
>2134	EqualityExpression	atoi ( CSLFetchNameValueDef ( papszWarpOptions , \"EXTRA_ELTS\" , \"0\" ) ) != WARP_EXTRA_ELTS
>2135	Identifier	WARP_EXTRA_ELTS
>2136	CallExpression	atoi ( CSLFetchNameValueDef ( papszWarpOptions , \"EXTRA_ELTS\" , \"0\" ) )
>2137	ArgumentList	CSLFetchNameValueDef ( papszWarpOptions , \"EXTRA_ELTS\" , \"0\" )
>2138	Argument	CSLFetchNameValueDef ( papszWarpOptions , \"EXTRA_ELTS\" , \"0\" )
>2139	CallExpression	CSLFetchNameValueDef ( papszWarpOptions , \"EXTRA_ELTS\" , \"0\" )
>2140	ArgumentList	papszWarpOptions
>2141	Argument	\"0\"
>2142	PrimaryExpression	\"0\"
>2143	Argument	\"EXTRA_ELTS\"
>2144	PrimaryExpression	\"EXTRA_ELTS\"
>2145	Argument	papszWarpOptions
>2146	Identifier	papszWarpOptions
>2147	Callee	CSLFetchNameValueDef
>2148	Identifier	CSLFetchNameValueDef
>2149	Callee	atoi
>2150	Identifier	atoi
>2151	OrExpression	eResample == GRA_CubicSpline || eResample == GRA_Lanczos
>2152	EqualityExpression	eResample == GRA_Lanczos
>2153	Identifier	GRA_Lanczos
>2154	Identifier	eResample
>2155	EqualityExpression	eResample == GRA_CubicSpline
>2156	Identifier	GRA_CubicSpline
>2157	Identifier	eResample
>2158	IfStatement	if ( ( size_t ) eResample >= ( sizeof ( anGWKFilterRadius ) / sizeof ( anGWKFilterRadius [ 0 ] ) ) )
>2159	CompoundStatement	 
>2160	ReturnStatement	 
>2161	Identifier	CE_Failure
>2162	ExpressionStatement	 
>2163	CallExpression	CPLError ( CE_Failure , CPLE_AppDefined , \"Unsupported resampling method %d.\" , ( int ) eResample )
>2164	ArgumentList	CE_Failure
>2165	Argument	( int ) eResample
>2166	CastExpression	( int ) eResample
>2167	Identifier	eResample
>2168	CastTarget	int
>2169	Argument	\"Unsupported resampling method %d.\"
>2170	PrimaryExpression	\"Unsupported resampling method %d.\"
>2171	Argument	CPLE_AppDefined
>2172	Identifier	CPLE_AppDefined
>2173	Argument	CE_Failure
>2174	Identifier	CE_Failure
>2175	Callee	CPLError
>2176	Identifier	CPLError
>2177	Condition	 
>2178	RelationalExpression	( size_t ) eResample >= ( sizeof ( anGWKFilterRadius ) / sizeof ( anGWKFilterRadius [ 0 ] ) )
>2179	MultiplicativeExpression	sizeof ( anGWKFilterRadius ) / sizeof ( anGWKFilterRadius [ 0 ] )
>2180	SizeofExpr	sizeof ( anGWKFilterRadius [ 0 ] )
>2181	ArrayIndexing	anGWKFilterRadius [ 0 ]
>2182	PrimaryExpression	0
>2183	Identifier	anGWKFilterRadius
>2184	Sizeof	sizeof
>2185	SizeofExpr	sizeof ( anGWKFilterRadius )
>2186	SizeofOperand	anGWKFilterRadius
>2187	Sizeof	sizeof
>2188	CastExpression	( size_t ) eResample
>2189	Identifier	eResample
>2190	CastTarget	size_t
>2206	FunctionDef	GWKOverlayDensity (GDALWarpKernel * poWK , int iDstOffset , double dfDensity)
>2207	ParameterList	GDALWarpKernel * poWK , int iDstOffset , double dfDensity
>2208	Parameter	 
>2209	Identifier	dfDensity
>2210	ParameterType	double
>2211	Parameter	 
>2212	Identifier	iDstOffset
>2213	ParameterType	int
>2214	Parameter	 
>2215	Identifier	poWK
>2216	ParameterType	GDALWarpKernel *
>2217	ReturnType	static void
>2218	CompoundStatement	 
>2219	ExpressionStatement	 
>2220	AssignmentExpr	poWK -> pafDstDensity [ iDstOffset ] = ( float ) ( 1.0 - ( 1.0 - dfDensity ) * ( 1.0 - poWK -> pafDstDensity [ \
>2221	CastExpression	( float ) ( 1.0 - ( 1.0 - dfDensity ) * ( 1.0 - poWK -> pafDstDensity [ iDstOffset ] ) )
>2222	AdditiveExpression	1.0 - ( 1.0 - dfDensity ) * ( 1.0 - poWK -> pafDstDensity [ iDstOffset ] )
>2223	MultiplicativeExpression	( 1.0 - dfDensity ) * ( 1.0 - poWK -> pafDstDensity [ iDstOffset ] )
>2224	AdditiveExpression	1.0 - poWK -> pafDstDensity [ iDstOffset ]
>2225	ArrayIndexing	poWK -> pafDstDensity [ iDstOffset ]
>2226	Identifier	iDstOffset
>2227	PtrMemberAccess	poWK -> pafDstDensity
>2228	Identifier	pafDstDensity
>2229	Identifier	poWK
>2230	PrimaryExpression	1.0
>2231	AdditiveExpression	1.0 - dfDensity
>2232	Identifier	dfDensity
>2233	PrimaryExpression	1.0
>2234	PrimaryExpression	1.0
>2235	CastTarget	float
>2236	ArrayIndexing	poWK -> pafDstDensity [ iDstOffset ]
>2237	Identifier	iDstOffset
>2238	PtrMemberAccess	poWK -> pafDstDensity
>2239	Identifier	pafDstDensity
>2240	Identifier	poWK
>2241	IfStatement	if ( dfDensity < 0.0001 || poWK -> pafDstDensity == NULL )
>2242	ReturnStatement	 
>2243	Condition	 
>2244	OrExpression	dfDensity < 0.0001 || poWK -> pafDstDensity == NULL
>2245	EqualityExpression	poWK -> pafDstDensity == NULL
>2246	Identifier	NULL
>2247	PtrMemberAccess	poWK -> pafDstDensity
>2248	Identifier	pafDstDensity
>2249	Identifier	poWK
>2250	RelationalExpression	dfDensity < 0.0001
>2251	PrimaryExpression	0.0001
>2252	Identifier	dfDensity
>2265	FunctionDef	GWKSetPixelValue (GDALWarpKernel * poWK , int iBand , int iDstOffset , double dfDensity , double dfReal , double \
>2266	ParameterList	GDALWarpKernel * poWK , int iBand , int iDstOffset , double dfDensity , double dfReal , double dfImag
>2267	Parameter	 
>2268	Identifier	dfImag
>2269	ParameterType	double
>2270	Parameter	 
>2271	Identifier	dfReal
>2272	ParameterType	double
>2273	Parameter	 
>2274	Identifier	dfDensity
>2275	ParameterType	double
>2276	Parameter	 
>2277	Identifier	iDstOffset
>2278	ParameterType	int
>2279	Parameter	 
>2280	Identifier	iBand
>2281	ParameterType	int
>2282	Parameter	 
>2283	Identifier	poWK
>2284	ParameterType	GDALWarpKernel *
>2285	ReturnType	static int
>2286	CompoundStatement	 
>2287	ReturnStatement	 
>2288	Identifier	TRUE
>2289	DoStatement	do
>2290	Condition	 
>2291	PrimaryExpression	0
>2292	CompoundStatement	 
>2293	IfStatement	if ( poWK -> padfDstNoDataReal != NULL && poWK -> padfDstNoDataReal [ iBand ] == ( double ) ( ( type * ) pabyDst ) [ \
>2294	CompoundStatement	 
>2295	IfStatement	if ( ( ( type * ) pabyDst ) [ iDstOffset ] == minval )
>2296	ElseStatement	else
>2297	ExpressionStatement	 
>2298	IncDecOp	( ( type * ) pabyDst ) [ iDstOffset ] --
>2299	IncDec	--
>2300	ArrayIndexing	( ( type * ) pabyDst ) [ iDstOffset ]
>2301	Identifier	iDstOffset
>2302	CastExpression	( type * ) pabyDst
>2303	Identifier	pabyDst
>2304	CastTarget	type *
>2305	ExpressionStatement	 
>2306	AssignmentExpr	( ( type * ) pabyDst ) [ iDstOffset ] = ( type ) ( minval + 1 )
>2307	CastExpression	( type ) ( minval + 1 )
>2308	AdditiveExpression	minval + 1
>2309	PrimaryExpression	1
>2310	Identifier	minval
>2311	CastTarget	type
>2312	ArrayIndexing	( ( type * ) pabyDst ) [ iDstOffset ]
>2313	Identifier	iDstOffset
>2314	CastExpression	( type * ) pabyDst
>2315	Identifier	pabyDst
>2316	CastTarget	type *
>2317	Condition	 
>2318	EqualityExpression	( ( type * ) pabyDst ) [ iDstOffset ] == minval
>2319	Identifier	minval
>2320	ArrayIndexing	( ( type * ) pabyDst ) [ iDstOffset ]
>2321	Identifier	iDstOffset
>2322	CastExpression	( type * ) pabyDst
>2323	Identifier	pabyDst
>2324	CastTarget	type *
>2325	Condition	 
>2326	AndExpression	poWK -> padfDstNoDataReal != NULL && poWK -> padfDstNoDataReal [ iBand ] == ( double ) ( ( type * ) \
>2327	EqualityExpression	poWK -> padfDstNoDataReal [ iBand ] == ( double ) ( ( type * ) pabyDst ) [ iDstOffset ]
>2328	CastExpression	( double ) ( ( type * ) pabyDst ) [ iDstOffset ]
>2329	ArrayIndexing	( ( type * ) pabyDst ) [ iDstOffset ]
>2330	Identifier	iDstOffset
>2331	CastExpression	( type * ) pabyDst
>2332	Identifier	pabyDst
>2333	CastTarget	type *
>2334	CastTarget	double
>2335	ArrayIndexing	poWK -> padfDstNoDataReal [ iBand ]
>2336	Identifier	iBand
>2337	PtrMemberAccess	poWK -> padfDstNoDataReal
>2338	Identifier	padfDstNoDataReal
>2339	Identifier	poWK
>2340	EqualityExpression	poWK -> padfDstNoDataReal != NULL
>2341	Identifier	NULL
>2342	PtrMemberAccess	poWK -> padfDstNoDataReal
>2343	Identifier	padfDstNoDataReal
>2344	Identifier	poWK
>2345	IfStatement	if ( dfReal < minval )
>2346	ElseStatement	else
>2347	IfStatement	if ( dfReal > maxval )
>2348	ElseStatement	else
>2349	ExpressionStatement	 
>2350	AssignmentExpr	( ( type * ) pabyDst ) [ iDstOffset ] = ( minval < 0 ) ? ( type ) floor ( dfReal + 0.5 ) 
>2351	ConditionalExpression	( minval < 0 ) ? ( type ) floor ( dfReal + 0.5 ) 
>2352	CastExpression	( type ) ( dfReal + 0.5 )
>2353	AdditiveExpression	dfReal + 0.5
>2354	PrimaryExpression	0.5
>2355	Identifier	dfReal
>2356	CastTarget	type
>2357	CastExpression	( type ) floor ( dfReal + 0.5 )
>2358	CallExpression	floor ( dfReal + 0.5 )
>2359	ArgumentList	dfReal + 0.5
>2360	Argument	dfReal + 0.5
>2361	AdditiveExpression	dfReal + 0.5
>2362	PrimaryExpression	0.5
>2363	Identifier	dfReal
>2364	Callee	floor
>2365	Identifier	floor
>2366	CastTarget	type
>2367	Condition	minval < 0
>2368	RelationalExpression	minval < 0
>2369	PrimaryExpression	0
>2370	Identifier	minval
>2371	ArrayIndexing	( ( type * ) pabyDst ) [ iDstOffset ]
>2372	Identifier	iDstOffset
>2373	CastExpression	( type * ) pabyDst
>2374	Identifier	pabyDst
>2375	CastTarget	type *
>2376	ExpressionStatement	 
>2377	AssignmentExpr	( ( type * ) pabyDst ) [ iDstOffset ] = ( type ) maxval
>2378	CastExpression	( type ) maxval
>2379	Identifier	maxval
>2380	CastTarget	type
>2381	ArrayIndexing	( ( type * ) pabyDst ) [ iDstOffset ]
>2382	Identifier	iDstOffset
>2383	CastExpression	( type * ) pabyDst
>2384	Identifier	pabyDst
>2385	CastTarget	type *
>2386	Condition	 
>2387	RelationalExpression	dfReal > maxval
>2388	Identifier	maxval
>2389	Identifier	dfReal
>2390	ExpressionStatement	 
>2391	AssignmentExpr	( ( type * ) pabyDst ) [ iDstOffset ] = ( type ) minval
>2392	CastExpression	( type ) minval
>2393	Identifier	minval
>2394	CastTarget	type
>2395	ArrayIndexing	( ( type * ) pabyDst ) [ iDstOffset ]
>2396	Identifier	iDstOffset
>2397	CastExpression	( type * ) pabyDst
>2398	Identifier	pabyDst
>2399	CastTarget	type *
>2400	Condition	 
>2401	RelationalExpression	dfReal < minval
>2402	Identifier	minval
>2403	Identifier	dfReal
>2404	Statement	 
>2405	Statement	 
>2406	Statement	 
>2407	Statement	 
>2408	Statement	 
>2409	Statement	 
>2410	Statement	 
>2411	Statement	 
>2412	Statement	 
>2413	IfStatement	if ( dfDensity < 0.9999 )
>2414	CompoundStatement	 
>2415	ExpressionStatement	 
>2416	AssignmentExpr	dfImag = ( dfImag * dfDensity + dfDstImag * dfDstInfluence ) / ( dfDensity + dfDstInfluence )
>2417	MultiplicativeExpression	( dfImag * dfDensity + dfDstImag * dfDstInfluence ) / ( dfDensity + dfDstInfluence )
>2418	AdditiveExpression	dfDensity + dfDstInfluence
>2419	Identifier	dfDstInfluence
>2420	Identifier	dfDensity
>2421	AdditiveExpression	dfImag * dfDensity + dfDstImag * dfDstInfluence
>2422	MultiplicativeExpression	dfDstImag * dfDstInfluence
>2423	Identifier	dfDstInfluence
>2424	Identifier	dfDstImag
>2425	MultiplicativeExpression	dfImag * dfDensity
>2426	Identifier	dfDensity
>2427	Identifier	dfImag
>2428	Identifier	dfImag
>2429	ExpressionStatement	 
>2430	AssignmentExpr	dfReal = ( dfReal * dfDensity + dfDstReal * dfDstInfluence ) / ( dfDensity + dfDstInfluence )
>2431	MultiplicativeExpression	( dfReal * dfDensity + dfDstReal * dfDstInfluence ) / ( dfDensity + dfDstInfluence )
>2432	AdditiveExpression	dfDensity + dfDstInfluence
>2433	Identifier	dfDstInfluence
>2434	Identifier	dfDensity
>2435	AdditiveExpression	dfReal * dfDensity + dfDstReal * dfDstInfluence
>2436	MultiplicativeExpression	dfDstReal * dfDstInfluence
>2437	Identifier	dfDstInfluence
>2438	Identifier	dfDstReal
>2439	MultiplicativeExpression	dfReal * dfDensity
>2440	Identifier	dfDensity
>2441	Identifier	dfReal
>2442	Identifier	dfReal
>2443	IdentifierDeclStatement	 
>2444	IdentifierDecl	dfDstInfluence = ( 1.0 - dfDensity ) * dfDstDensity
>2445	AssignmentExpr	dfDstInfluence = ( 1.0 - dfDensity ) * dfDstDensity
>2446	MultiplicativeExpression	( 1.0 - dfDensity ) * dfDstDensity
>2447	Identifier	dfDstDensity
>2448	AdditiveExpression	1.0 - dfDensity
>2449	Identifier	dfDensity
>2450	PrimaryExpression	1.0
>2451	Identifier	dfDstInfluence
>2452	Identifier	dfDstInfluence
>2453	IdentifierDeclType	double
>2454	SwitchStatement	switch ( poWK -> eWorkingDataType )
>2455	CompoundStatement	 
>2456	ReturnStatement	 
>2457	Identifier	FALSE
>2458	ExpressionStatement	 
>2459	AssignmentExpr	dfDstDensity = 0.0
>2460	PrimaryExpression	0.0
>2461	Identifier	dfDstDensity
>2462	ExpressionStatement	 
>2463	CallExpression	CPLAssert ( FALSE )
>2464	ArgumentList	FALSE
>2465	Argument	FALSE
>2466	Identifier	FALSE
>2467	Callee	CPLAssert
>2468	Identifier	CPLAssert
>2469	Label	 
>2470	Identifier	default
>2471	BreakStatement	 
>2472	ExpressionStatement	 
>2473	AssignmentExpr	dfDstImag = ( ( double * ) pabyDst ) [ iDstOffset * 2 + 1 ]
>2474	ArrayIndexing	( ( double * ) pabyDst ) [ iDstOffset * 2 + 1 ]
>2475	AdditiveExpression	iDstOffset * 2 + 1
>2476	PrimaryExpression	1
>2477	MultiplicativeExpression	iDstOffset * 2
>2478	PrimaryExpression	2
>2479	Identifier	iDstOffset
>2480	CastExpression	( double * ) pabyDst
>2481	Identifier	pabyDst
>2482	CastTarget	double *
>2483	Identifier	dfDstImag
>2484	ExpressionStatement	 
>2485	AssignmentExpr	dfDstReal = ( ( double * ) pabyDst ) [ iDstOffset * 2 ]
>2486	ArrayIndexing	( ( double * ) pabyDst ) [ iDstOffset * 2 ]
>2487	MultiplicativeExpression	iDstOffset * 2
>2488	PrimaryExpression	2
>2489	Identifier	iDstOffset
>2490	CastExpression	( double * ) pabyDst
>2491	Identifier	pabyDst
>2492	CastTarget	double *
>2493	Identifier	dfDstReal
>2494	Label	 
>2495	Identifier	GDT_CFloat64
>2496	BreakStatement	 
>2497	ExpressionStatement	 
>2498	AssignmentExpr	dfDstImag = ( ( float * ) pabyDst ) [ iDstOffset * 2 + 1 ]
>2499	ArrayIndexing	( ( float * ) pabyDst ) [ iDstOffset * 2 + 1 ]
>2500	AdditiveExpression	iDstOffset * 2 + 1
>2501	PrimaryExpression	1
>2502	MultiplicativeExpression	iDstOffset * 2
>2503	PrimaryExpression	2
>2504	Identifier	iDstOffset
>2505	CastExpression	( float * ) pabyDst
>2506	Identifier	pabyDst
>2507	CastTarget	float *
>2508	Identifier	dfDstImag
>2509	ExpressionStatement	 
>2510	AssignmentExpr	dfDstReal = ( ( float * ) pabyDst ) [ iDstOffset * 2 ]
>2511	ArrayIndexing	( ( float * ) pabyDst ) [ iDstOffset * 2 ]
>2512	MultiplicativeExpression	iDstOffset * 2
>2513	PrimaryExpression	2
>2514	Identifier	iDstOffset
>2515	CastExpression	( float * ) pabyDst
>2516	Identifier	pabyDst
>2517	CastTarget	float *
>2518	Identifier	dfDstReal
>2519	Label	 
>2520	Identifier	GDT_CFloat32
>2521	BreakStatement	 
>2522	ExpressionStatement	 
>2523	AssignmentExpr	dfDstImag = ( ( GInt32 * ) pabyDst ) [ iDstOffset * 2 + 1 ]
>2524	ArrayIndexing	( ( GInt32 * ) pabyDst ) [ iDstOffset * 2 + 1 ]
>2525	AdditiveExpression	iDstOffset * 2 + 1
>2526	PrimaryExpression	1
>2527	MultiplicativeExpression	iDstOffset * 2
>2528	PrimaryExpression	2
>2529	Identifier	iDstOffset
>2530	CastExpression	( GInt32 * ) pabyDst
>2531	Identifier	pabyDst
>2532	CastTarget	GInt32 *
>2533	Identifier	dfDstImag
>2534	ExpressionStatement	 
>2535	AssignmentExpr	dfDstReal = ( ( GInt32 * ) pabyDst ) [ iDstOffset * 2 ]
>2536	ArrayIndexing	( ( GInt32 * ) pabyDst ) [ iDstOffset * 2 ]
>2537	MultiplicativeExpression	iDstOffset * 2
>2538	PrimaryExpression	2
>2539	Identifier	iDstOffset
>2540	CastExpression	( GInt32 * ) pabyDst
>2541	Identifier	pabyDst
>2542	CastTarget	GInt32 *
>2543	Identifier	dfDstReal
>2544	Label	 
>2545	Identifier	GDT_CInt32
>2546	BreakStatement	 
>2547	ExpressionStatement	 
>2548	AssignmentExpr	dfDstImag = ( ( GInt16 * ) pabyDst ) [ iDstOffset * 2 + 1 ]
>2549	ArrayIndexing	( ( GInt16 * ) pabyDst ) [ iDstOffset * 2 + 1 ]
>2550	AdditiveExpression	iDstOffset * 2 + 1
>2551	PrimaryExpression	1
>2552	MultiplicativeExpression	iDstOffset * 2
>2553	PrimaryExpression	2
>2554	Identifier	iDstOffset
>2555	CastExpression	( GInt16 * ) pabyDst
>2556	Identifier	pabyDst
>2557	CastTarget	GInt16 *
>2558	Identifier	dfDstImag
>2559	ExpressionStatement	 
>2560	AssignmentExpr	dfDstReal = ( ( GInt16 * ) pabyDst ) [ iDstOffset * 2 ]
>2561	ArrayIndexing	( ( GInt16 * ) pabyDst ) [ iDstOffset * 2 ]
>2562	MultiplicativeExpression	iDstOffset * 2
>2563	PrimaryExpression	2
>2564	Identifier	iDstOffset
>2565	CastExpression	( GInt16 * ) pabyDst
>2566	Identifier	pabyDst
>2567	CastTarget	GInt16 *
>2568	Identifier	dfDstReal
>2569	Label	 
>2570	Identifier	GDT_CInt16
>2571	BreakStatement	 
>2572	ExpressionStatement	 
>2573	AssignmentExpr	dfDstImag = 0.0
>2574	PrimaryExpression	0.0
>2575	Identifier	dfDstImag
>2576	ExpressionStatement	 
>2577	AssignmentExpr	dfDstReal = ( ( double * ) pabyDst ) [ iDstOffset ]
>2578	ArrayIndexing	( ( double * ) pabyDst ) [ iDstOffset ]
>2579	Identifier	iDstOffset
>2580	CastExpression	( double * ) pabyDst
>2581	Identifier	pabyDst
>2582	CastTarget	double *
>2583	Identifier	dfDstReal
>2584	Label	 
>2585	Identifier	GDT_Float64
>2586	BreakStatement	 
>2587	ExpressionStatement	 
>2588	AssignmentExpr	dfDstImag = 0.0
>2589	PrimaryExpression	0.0
>2590	Identifier	dfDstImag
>2591	ExpressionStatement	 
>2592	AssignmentExpr	dfDstReal = ( ( float * ) pabyDst ) [ iDstOffset ]
>2593	ArrayIndexing	( ( float * ) pabyDst ) [ iDstOffset ]
>2594	Identifier	iDstOffset
>2595	CastExpression	( float * ) pabyDst
>2596	Identifier	pabyDst
>2597	CastTarget	float *
>2598	Identifier	dfDstReal
>2599	Label	 
>2600	Identifier	GDT_Float32
>2601	BreakStatement	 
>2602	ExpressionStatement	 
>2603	AssignmentExpr	dfDstImag = 0.0
>2604	PrimaryExpression	0.0
>2605	Identifier	dfDstImag
>2606	ExpressionStatement	 
>2607	AssignmentExpr	dfDstReal = ( ( GUInt32 * ) pabyDst ) [ iDstOffset ]
>2608	ArrayIndexing	( ( GUInt32 * ) pabyDst ) [ iDstOffset ]
>2609	Identifier	iDstOffset
>2610	CastExpression	( GUInt32 * ) pabyDst
>2611	Identifier	pabyDst
>2612	CastTarget	GUInt32 *
>2613	Identifier	dfDstReal
>2614	Label	 
>2615	Identifier	GDT_UInt32
>2616	BreakStatement	 
>2617	ExpressionStatement	 
>2618	AssignmentExpr	dfDstImag = 0.0
>2619	PrimaryExpression	0.0
>2620	Identifier	dfDstImag
>2621	ExpressionStatement	 
>2622	AssignmentExpr	dfDstReal = ( ( GInt32 * ) pabyDst ) [ iDstOffset ]
>2623	ArrayIndexing	( ( GInt32 * ) pabyDst ) [ iDstOffset ]
>2624	Identifier	iDstOffset
>2625	CastExpression	( GInt32 * ) pabyDst
>2626	Identifier	pabyDst
>2627	CastTarget	GInt32 *
>2628	Identifier	dfDstReal
>2629	Label	 
>2630	Identifier	GDT_Int32
>2631	BreakStatement	 
>2632	ExpressionStatement	 
>2633	AssignmentExpr	dfDstImag = 0.0
>2634	PrimaryExpression	0.0
>2635	Identifier	dfDstImag
>2636	ExpressionStatement	 
>2637	AssignmentExpr	dfDstReal = ( ( GUInt16 * ) pabyDst ) [ iDstOffset ]
>2638	ArrayIndexing	( ( GUInt16 * ) pabyDst ) [ iDstOffset ]
>2639	Identifier	iDstOffset
>2640	CastExpression	( GUInt16 * ) pabyDst
>2641	Identifier	pabyDst
>2642	CastTarget	GUInt16 *
>2643	Identifier	dfDstReal
>2644	Label	 
>2645	Identifier	GDT_UInt16
>2646	BreakStatement	 
>2647	ExpressionStatement	 
>2648	AssignmentExpr	dfDstImag = 0.0
>2649	PrimaryExpression	0.0
>2650	Identifier	dfDstImag
>2651	ExpressionStatement	 
>2652	AssignmentExpr	dfDstReal = ( ( GInt16 * ) pabyDst ) [ iDstOffset ]
>2653	ArrayIndexing	( ( GInt16 * ) pabyDst ) [ iDstOffset ]
>2654	Identifier	iDstOffset
>2655	CastExpression	( GInt16 * ) pabyDst
>2656	Identifier	pabyDst
>2657	CastTarget	GInt16 *
>2658	Identifier	dfDstReal
>2659	Label	 
>2660	Identifier	GDT_Int16
>2661	BreakStatement	 
>2662	ExpressionStatement	 
>2663	AssignmentExpr	dfDstImag = 0.0
>2664	PrimaryExpression	0.0
>2665	Identifier	dfDstImag
>2666	ExpressionStatement	 
>2667	AssignmentExpr	dfDstReal = pabyDst [ iDstOffset ]
>2668	ArrayIndexing	pabyDst [ iDstOffset ]
>2669	Identifier	iDstOffset
>2670	Identifier	pabyDst
>2671	Identifier	dfDstReal
>2672	Label	 
>2673	Identifier	GDT_Byte
>2674	Condition	 
>2675	PtrMemberAccess	poWK -> eWorkingDataType
>2676	Identifier	eWorkingDataType
>2677	Identifier	poWK
>2678	IfStatement	if ( poWK -> pafDstDensity != NULL )
>2679	ElseStatement	else
>2680	IfStatement	if ( poWK -> panDstValid != NULL && ! ( ( poWK -> panDstValid [ iDstOffset >> 5 ] & ( 0x01 << ( iDstOffset & 0x1f ) ) ) ) )
>2681	ExpressionStatement	 
>2682	AssignmentExpr	dfDstDensity = 0.0
>2683	PrimaryExpression	0.0
>2684	Identifier	dfDstDensity
>2685	Condition	 
>2686	AndExpression	poWK -> panDstValid != NULL && ! ( ( poWK -> panDstValid [ iDstOffset >> 5 ] & ( 0x01 << ( iDstOffset & \
>2687	UnaryOp	! ( ( poWK -> panDstValid [ iDstOffset >> 5 ] & ( 0x01 << ( iDstOffset & 0x1f ) ) ) )
>2688	BitAndExpression	poWK -> panDstValid [ iDstOffset >> 5 ] & ( 0x01 << ( iDstOffset & 0x1f ) )
>2689	ShiftExpression	0x01 << ( iDstOffset & 0x1f )
>2690	BitAndExpression	iDstOffset & 0x1f
>2691	PrimaryExpression	0x1f
>2692	Identifier	iDstOffset
>2693	PrimaryExpression	0x01
>2694	ArrayIndexing	poWK -> panDstValid [ iDstOffset >> 5 ]
>2695	ShiftExpression	iDstOffset >> 5
>2696	PrimaryExpression	5
>2697	Identifier	iDstOffset
>2698	PtrMemberAccess	poWK -> panDstValid
>2699	Identifier	panDstValid
>2700	Identifier	poWK
>2701	UnaryOperator	!
>2702	EqualityExpression	poWK -> panDstValid != NULL
>2703	Identifier	NULL
>2704	PtrMemberAccess	poWK -> panDstValid
>2705	Identifier	panDstValid
>2706	Identifier	poWK
>2707	ExpressionStatement	 
>2708	AssignmentExpr	dfDstDensity = poWK -> pafDstDensity [ iDstOffset ]
>2709	ArrayIndexing	poWK -> pafDstDensity [ iDstOffset ]
>2710	Identifier	iDstOffset
>2711	PtrMemberAccess	poWK -> pafDstDensity
>2712	Identifier	pafDstDensity
>2713	Identifier	poWK
>2714	Identifier	dfDstDensity
>2715	Condition	 
>2716	EqualityExpression	poWK -> pafDstDensity != NULL
>2717	Identifier	NULL
>2718	PtrMemberAccess	poWK -> pafDstDensity
>2719	Identifier	pafDstDensity
>2720	Identifier	poWK
>2721	IfStatement	if ( dfDensity < 0.0001 )
>2722	ReturnStatement	 
>2723	Identifier	TRUE
>2724	Condition	 
>2725	RelationalExpression	dfDensity < 0.0001
>2726	PrimaryExpression	0.0001
>2727	Identifier	dfDensity
>2728	IdentifierDeclStatement	 
>2729	IdentifierDecl	dfDstDensity = 1.0
>2730	AssignmentExpr	dfDstDensity = 1.0
>2731	PrimaryExpression	1.0
>2732	Identifier	dfDstDensity
>2733	Identifier	dfDstDensity
>2734	IdentifierDeclType	double
>2735	IdentifierDecl	dfDstImag
>2736	Identifier	dfDstImag
>2737	IdentifierDeclType	double
>2738	IdentifierDecl	dfDstReal
>2739	Identifier	dfDstReal
>2740	IdentifierDeclType	double
>2741	Condition	 
>2742	RelationalExpression	dfDensity < 0.9999
>2743	PrimaryExpression	0.9999
>2744	Identifier	dfDensity
>2745	IdentifierDeclStatement	 
>2746	IdentifierDecl	* pabyDst = poWK -> papabyDstImage [ iBand ]
>2747	AssignmentExpr	* pabyDst = poWK -> papabyDstImage [ iBand ]
>2748	ArrayIndexing	poWK -> papabyDstImage [ iBand ]
>2749	Identifier	iBand
>2750	PtrMemberAccess	poWK -> papabyDstImage
>2751	Identifier	papabyDstImage
>2752	Identifier	poWK
>2753	Identifier	pabyDst
>2754	Identifier	pabyDst
>2755	IdentifierDeclType	GByte *
>2790	FunctionDef	GWKGetPixelValue (GDALWarpKernel * poWK , int iBand , int iSrcOffset , double * pdfDensity , double * pdfReal , \
>2791	ParameterList	GDALWarpKernel * poWK , int iBand , int iSrcOffset , double * pdfDensity , double * pdfReal , double * pdfImag
>2792	Parameter	 
>2793	Identifier	pdfImag
>2794	ParameterType	double *
>2795	Parameter	 
>2796	Identifier	pdfReal
>2797	ParameterType	double *
>2798	Parameter	 
>2799	Identifier	pdfDensity
>2800	ParameterType	double *
>2801	Parameter	 
>2802	Identifier	iSrcOffset
>2803	ParameterType	int
>2804	Parameter	 
>2805	Identifier	iBand
>2806	ParameterType	int
>2807	Parameter	 
>2808	Identifier	poWK
>2809	ParameterType	GDALWarpKernel *
>2810	ReturnType	static int
>2811	CompoundStatement	 
>2812	ReturnStatement	 
>2813	EqualityExpression	* pdfDensity != 0.0
>2814	PrimaryExpression	0.0
>2815	UnaryOp	* pdfDensity
>2816	Identifier	pdfDensity
>2817	UnaryOperator	*
>2818	IfStatement	if ( poWK -> pafUnifiedSrcDensity != NULL )
>2819	ElseStatement	else
>2820	ExpressionStatement	 
>2821	AssignmentExpr	* pdfDensity = 1.0
>2822	PrimaryExpression	1.0
>2823	UnaryOp	* pdfDensity
>2824	Identifier	pdfDensity
>2825	UnaryOperator	*
>2826	ExpressionStatement	 
>2827	AssignmentExpr	* pdfDensity = poWK -> pafUnifiedSrcDensity [ iSrcOffset ]
>2828	ArrayIndexing	poWK -> pafUnifiedSrcDensity [ iSrcOffset ]
>2829	Identifier	iSrcOffset
>2830	PtrMemberAccess	poWK -> pafUnifiedSrcDensity
>2831	Identifier	pafUnifiedSrcDensity
>2832	Identifier	poWK
>2833	UnaryOp	* pdfDensity
>2834	Identifier	pdfDensity
>2835	UnaryOperator	*
>2836	Condition	 
>2837	EqualityExpression	poWK -> pafUnifiedSrcDensity != NULL
>2838	Identifier	NULL
>2839	PtrMemberAccess	poWK -> pafUnifiedSrcDensity
>2840	Identifier	pafUnifiedSrcDensity
>2841	Identifier	poWK
>2842	SwitchStatement	switch ( poWK -> eWorkingDataType )
>2843	CompoundStatement	 
>2844	ReturnStatement	 
>2845	Identifier	FALSE
>2846	ExpressionStatement	 
>2847	AssignmentExpr	* pdfDensity = 0.0
>2848	PrimaryExpression	0.0
>2849	UnaryOp	* pdfDensity
>2850	Identifier	pdfDensity
>2851	UnaryOperator	*
>2852	Label	 
>2853	Identifier	default
>2854	BreakStatement	 
>2855	ExpressionStatement	 
>2856	AssignmentExpr	* pdfImag = ( ( double * ) pabySrc ) [ iSrcOffset * 2 + 1 ]
>2857	ArrayIndexing	( ( double * ) pabySrc ) [ iSrcOffset * 2 + 1 ]
>2858	AdditiveExpression	iSrcOffset * 2 + 1
>2859	PrimaryExpression	1
>2860	MultiplicativeExpression	iSrcOffset * 2
>2861	PrimaryExpression	2
>2862	Identifier	iSrcOffset
>2863	CastExpression	( double * ) pabySrc
>2864	Identifier	pabySrc
>2865	CastTarget	double *
>2866	UnaryOp	* pdfImag
>2867	Identifier	pdfImag
>2868	UnaryOperator	*
>2869	ExpressionStatement	 
>2870	AssignmentExpr	* pdfReal = ( ( double * ) pabySrc ) [ iSrcOffset * 2 ]
>2871	ArrayIndexing	( ( double * ) pabySrc ) [ iSrcOffset * 2 ]
>2872	MultiplicativeExpression	iSrcOffset * 2
>2873	PrimaryExpression	2
>2874	Identifier	iSrcOffset
>2875	CastExpression	( double * ) pabySrc
>2876	Identifier	pabySrc
>2877	CastTarget	double *
>2878	UnaryOp	* pdfReal
>2879	Identifier	pdfReal
>2880	UnaryOperator	*
>2881	Label	 
>2882	Identifier	GDT_CFloat64
>2883	BreakStatement	 
>2884	ExpressionStatement	 
>2885	AssignmentExpr	* pdfImag = ( ( float * ) pabySrc ) [ iSrcOffset * 2 + 1 ]
>2886	ArrayIndexing	( ( float * ) pabySrc ) [ iSrcOffset * 2 + 1 ]
>2887	AdditiveExpression	iSrcOffset * 2 + 1
>2888	PrimaryExpression	1
>2889	MultiplicativeExpression	iSrcOffset * 2
>2890	PrimaryExpression	2
>2891	Identifier	iSrcOffset
>2892	CastExpression	( float * ) pabySrc
>2893	Identifier	pabySrc
>2894	CastTarget	float *
>2895	UnaryOp	* pdfImag
>2896	Identifier	pdfImag
>2897	UnaryOperator	*
>2898	ExpressionStatement	 
>2899	AssignmentExpr	* pdfReal = ( ( float * ) pabySrc ) [ iSrcOffset * 2 ]
>2900	ArrayIndexing	( ( float * ) pabySrc ) [ iSrcOffset * 2 ]
>2901	MultiplicativeExpression	iSrcOffset * 2
>2902	PrimaryExpression	2
>2903	Identifier	iSrcOffset
>2904	CastExpression	( float * ) pabySrc
>2905	Identifier	pabySrc
>2906	CastTarget	float *
>2907	UnaryOp	* pdfReal
>2908	Identifier	pdfReal
>2909	UnaryOperator	*
>2910	Label	 
>2911	Identifier	GDT_CFloat32
>2912	BreakStatement	 
>2913	ExpressionStatement	 
>2914	AssignmentExpr	* pdfImag = ( ( GInt32 * ) pabySrc ) [ iSrcOffset * 2 + 1 ]
>2915	ArrayIndexing	( ( GInt32 * ) pabySrc ) [ iSrcOffset * 2 + 1 ]
>2916	AdditiveExpression	iSrcOffset * 2 + 1
>2917	PrimaryExpression	1
>2918	MultiplicativeExpression	iSrcOffset * 2
>2919	PrimaryExpression	2
>2920	Identifier	iSrcOffset
>2921	CastExpression	( GInt32 * ) pabySrc
>2922	Identifier	pabySrc
>2923	CastTarget	GInt32 *
>2924	UnaryOp	* pdfImag
>2925	Identifier	pdfImag
>2926	UnaryOperator	*
>2927	ExpressionStatement	 
>2928	AssignmentExpr	* pdfReal = ( ( GInt32 * ) pabySrc ) [ iSrcOffset * 2 ]
>2929	ArrayIndexing	( ( GInt32 * ) pabySrc ) [ iSrcOffset * 2 ]
>2930	MultiplicativeExpression	iSrcOffset * 2
>2931	PrimaryExpression	2
>2932	Identifier	iSrcOffset
>2933	CastExpression	( GInt32 * ) pabySrc
>2934	Identifier	pabySrc
>2935	CastTarget	GInt32 *
>2936	UnaryOp	* pdfReal
>2937	Identifier	pdfReal
>2938	UnaryOperator	*
>2939	Label	 
>2940	Identifier	GDT_CInt32
>2941	BreakStatement	 
>2942	ExpressionStatement	 
>2943	AssignmentExpr	* pdfImag = ( ( GInt16 * ) pabySrc ) [ iSrcOffset * 2 + 1 ]
>2944	ArrayIndexing	( ( GInt16 * ) pabySrc ) [ iSrcOffset * 2 + 1 ]
>2945	AdditiveExpression	iSrcOffset * 2 + 1
>2946	PrimaryExpression	1
>2947	MultiplicativeExpression	iSrcOffset * 2
>2948	PrimaryExpression	2
>2949	Identifier	iSrcOffset
>2950	CastExpression	( GInt16 * ) pabySrc
>2951	Identifier	pabySrc
>2952	CastTarget	GInt16 *
>2953	UnaryOp	* pdfImag
>2954	Identifier	pdfImag
>2955	UnaryOperator	*
>2956	ExpressionStatement	 
>2957	AssignmentExpr	* pdfReal = ( ( GInt16 * ) pabySrc ) [ iSrcOffset * 2 ]
>2958	ArrayIndexing	( ( GInt16 * ) pabySrc ) [ iSrcOffset * 2 ]
>2959	MultiplicativeExpression	iSrcOffset * 2
>2960	PrimaryExpression	2
>2961	Identifier	iSrcOffset
>2962	CastExpression	( GInt16 * ) pabySrc
>2963	Identifier	pabySrc
>2964	CastTarget	GInt16 *
>2965	UnaryOp	* pdfReal
>2966	Identifier	pdfReal
>2967	UnaryOperator	*
>2968	Label	 
>2969	Identifier	GDT_CInt16
>2970	BreakStatement	 
>2971	ExpressionStatement	 
>2972	AssignmentExpr	* pdfImag = 0.0
>2973	PrimaryExpression	0.0
>2974	UnaryOp	* pdfImag
>2975	Identifier	pdfImag
>2976	UnaryOperator	*
>2977	ExpressionStatement	 
>2978	AssignmentExpr	* pdfReal = ( ( double * ) pabySrc ) [ iSrcOffset ]
>2979	ArrayIndexing	( ( double * ) pabySrc ) [ iSrcOffset ]
>2980	Identifier	iSrcOffset
>2981	CastExpression	( double * ) pabySrc
>2982	Identifier	pabySrc
>2983	CastTarget	double *
>2984	UnaryOp	* pdfReal
>2985	Identifier	pdfReal
>2986	UnaryOperator	*
>2987	Label	 
>2988	Identifier	GDT_Float64
>2989	BreakStatement	 
>2990	ExpressionStatement	 
>2991	AssignmentExpr	* pdfImag = 0.0
>2992	PrimaryExpression	0.0
>2993	UnaryOp	* pdfImag
>2994	Identifier	pdfImag
>2995	UnaryOperator	*
>2996	ExpressionStatement	 
>2997	AssignmentExpr	* pdfReal = ( ( float * ) pabySrc ) [ iSrcOffset ]
>2998	ArrayIndexing	( ( float * ) pabySrc ) [ iSrcOffset ]
>2999	Identifier	iSrcOffset
>3000	CastExpression	( float * ) pabySrc
>3001	Identifier	pabySrc
>3002	CastTarget	float *
>3003	UnaryOp	* pdfReal
>3004	Identifier	pdfReal
>3005	UnaryOperator	*
>3006	Label	 
>3007	Identifier	GDT_Float32
>3008	BreakStatement	 
>3009	ExpressionStatement	 
>3010	AssignmentExpr	* pdfImag = 0.0
>3011	PrimaryExpression	0.0
>3012	UnaryOp	* pdfImag
>3013	Identifier	pdfImag
>3014	UnaryOperator	*
>3015	ExpressionStatement	 
>3016	AssignmentExpr	* pdfReal = ( ( GUInt32 * ) pabySrc ) [ iSrcOffset ]
>3017	ArrayIndexing	( ( GUInt32 * ) pabySrc ) [ iSrcOffset ]
>3018	Identifier	iSrcOffset
>3019	CastExpression	( GUInt32 * ) pabySrc
>3020	Identifier	pabySrc
>3021	CastTarget	GUInt32 *
>3022	UnaryOp	* pdfReal
>3023	Identifier	pdfReal
>3024	UnaryOperator	*
>3025	Label	 
>3026	Identifier	GDT_UInt32
>3027	BreakStatement	 
>3028	ExpressionStatement	 
>3029	AssignmentExpr	* pdfImag = 0.0
>3030	PrimaryExpression	0.0
>3031	UnaryOp	* pdfImag
>3032	Identifier	pdfImag
>3033	UnaryOperator	*
>3034	ExpressionStatement	 
>3035	AssignmentExpr	* pdfReal = ( ( GInt32 * ) pabySrc ) [ iSrcOffset ]
>3036	ArrayIndexing	( ( GInt32 * ) pabySrc ) [ iSrcOffset ]
>3037	Identifier	iSrcOffset
>3038	CastExpression	( GInt32 * ) pabySrc
>3039	Identifier	pabySrc
>3040	CastTarget	GInt32 *
>3041	UnaryOp	* pdfReal
>3042	Identifier	pdfReal
>3043	UnaryOperator	*
>3044	Label	 
>3045	Identifier	GDT_Int32
>3046	BreakStatement	 
>3047	ExpressionStatement	 
>3048	AssignmentExpr	* pdfImag = 0.0
>3049	PrimaryExpression	0.0
>3050	UnaryOp	* pdfImag
>3051	Identifier	pdfImag
>3052	UnaryOperator	*
>3053	ExpressionStatement	 
>3054	AssignmentExpr	* pdfReal = ( ( GUInt16 * ) pabySrc ) [ iSrcOffset ]
>3055	ArrayIndexing	( ( GUInt16 * ) pabySrc ) [ iSrcOffset ]
>3056	Identifier	iSrcOffset
>3057	CastExpression	( GUInt16 * ) pabySrc
>3058	Identifier	pabySrc
>3059	CastTarget	GUInt16 *
>3060	UnaryOp	* pdfReal
>3061	Identifier	pdfReal
>3062	UnaryOperator	*
>3063	Label	 
>3064	Identifier	GDT_UInt16
>3065	BreakStatement	 
>3066	ExpressionStatement	 
>3067	AssignmentExpr	* pdfImag = 0.0
>3068	PrimaryExpression	0.0
>3069	UnaryOp	* pdfImag
>3070	Identifier	pdfImag
>3071	UnaryOperator	*
>3072	ExpressionStatement	 
>3073	AssignmentExpr	* pdfReal = ( ( GInt16 * ) pabySrc ) [ iSrcOffset ]
>3074	ArrayIndexing	( ( GInt16 * ) pabySrc ) [ iSrcOffset ]
>3075	Identifier	iSrcOffset
>3076	CastExpression	( GInt16 * ) pabySrc
>3077	Identifier	pabySrc
>3078	CastTarget	GInt16 *
>3079	UnaryOp	* pdfReal
>3080	Identifier	pdfReal
>3081	UnaryOperator	*
>3082	Label	 
>3083	Identifier	GDT_Int16
>3084	BreakStatement	 
>3085	ExpressionStatement	 
>3086	AssignmentExpr	* pdfImag = 0.0
>3087	PrimaryExpression	0.0
>3088	UnaryOp	* pdfImag
>3089	Identifier	pdfImag
>3090	UnaryOperator	*
>3091	ExpressionStatement	 
>3092	AssignmentExpr	* pdfReal = pabySrc [ iSrcOffset ]
>3093	ArrayIndexing	pabySrc [ iSrcOffset ]
>3094	Identifier	iSrcOffset
>3095	Identifier	pabySrc
>3096	UnaryOp	* pdfReal
>3097	Identifier	pdfReal
>3098	UnaryOperator	*
>3099	Label	 
>3100	Identifier	GDT_Byte
>3101	Condition	 
>3102	PtrMemberAccess	poWK -> eWorkingDataType
>3103	Identifier	eWorkingDataType
>3104	Identifier	poWK
>3105	IfStatement	if ( poWK -> papanBandSrcValid != NULL && poWK -> papanBandSrcValid [ iBand ] != NULL && ! ( ( poWK -> papanBandSrcValid [ \
>3106	CompoundStatement	 
>3107	ReturnStatement	 
>3108	Identifier	FALSE
>3109	ExpressionStatement	 
>3110	AssignmentExpr	* pdfDensity = 0.0
>3111	PrimaryExpression	0.0
>3112	UnaryOp	* pdfDensity
>3113	Identifier	pdfDensity
>3114	UnaryOperator	*
>3115	Condition	 
>3116	AndExpression	poWK -> papanBandSrcValid != NULL && poWK -> papanBandSrcValid [ iBand ] != NULL && ! ( ( poWK -> papanBandSrcValid [ \
>3117	AndExpression	poWK -> papanBandSrcValid [ iBand ] != NULL && ! ( ( poWK -> papanBandSrcValid [ iBand ] [ iSrcOffset >> \
>3118	UnaryOp	! ( ( poWK -> papanBandSrcValid [ iBand ] [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) ) ) )
>3119	BitAndExpression	poWK -> papanBandSrcValid [ iBand ] [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) )
>3120	ShiftExpression	0x01 << ( iSrcOffset & 0x1f )
>3121	BitAndExpression	iSrcOffset & 0x1f
>3122	PrimaryExpression	0x1f
>3123	Identifier	iSrcOffset
>3124	PrimaryExpression	0x01
>3125	ArrayIndexing	poWK -> papanBandSrcValid [ iBand ] [ iSrcOffset >> 5 ]
>3126	ShiftExpression	iSrcOffset >> 5
>3127	PrimaryExpression	5
>3128	Identifier	iSrcOffset
>3129	ArrayIndexing	poWK -> papanBandSrcValid [ iBand ]
>3130	Identifier	iBand
>3131	PtrMemberAccess	poWK -> papanBandSrcValid
>3132	Identifier	papanBandSrcValid
>3133	Identifier	poWK
>3134	UnaryOperator	!
>3135	EqualityExpression	poWK -> papanBandSrcValid [ iBand ] != NULL
>3136	Identifier	NULL
>3137	ArrayIndexing	poWK -> papanBandSrcValid [ iBand ]
>3138	Identifier	iBand
>3139	PtrMemberAccess	poWK -> papanBandSrcValid
>3140	Identifier	papanBandSrcValid
>3141	Identifier	poWK
>3142	EqualityExpression	poWK -> papanBandSrcValid != NULL
>3143	Identifier	NULL
>3144	PtrMemberAccess	poWK -> papanBandSrcValid
>3145	Identifier	papanBandSrcValid
>3146	Identifier	poWK
>3147	IfStatement	if ( poWK -> panUnifiedSrcValid != NULL && ! ( ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & \
>3148	CompoundStatement	 
>3149	ReturnStatement	 
>3150	Identifier	FALSE
>3151	ExpressionStatement	 
>3152	AssignmentExpr	* pdfDensity = 0.0
>3153	PrimaryExpression	0.0
>3154	UnaryOp	* pdfDensity
>3155	Identifier	pdfDensity
>3156	UnaryOperator	*
>3157	Condition	 
>3158	AndExpression	poWK -> panUnifiedSrcValid != NULL && ! ( ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( \
>3159	UnaryOp	! ( ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) ) ) )
>3160	BitAndExpression	poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) )
>3161	ShiftExpression	0x01 << ( iSrcOffset & 0x1f )
>3162	BitAndExpression	iSrcOffset & 0x1f
>3163	PrimaryExpression	0x1f
>3164	Identifier	iSrcOffset
>3165	PrimaryExpression	0x01
>3166	ArrayIndexing	poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ]
>3167	ShiftExpression	iSrcOffset >> 5
>3168	PrimaryExpression	5
>3169	Identifier	iSrcOffset
>3170	PtrMemberAccess	poWK -> panUnifiedSrcValid
>3171	Identifier	panUnifiedSrcValid
>3172	Identifier	poWK
>3173	UnaryOperator	!
>3174	EqualityExpression	poWK -> panUnifiedSrcValid != NULL
>3175	Identifier	NULL
>3176	PtrMemberAccess	poWK -> panUnifiedSrcValid
>3177	Identifier	panUnifiedSrcValid
>3178	Identifier	poWK
>3179	IdentifierDeclStatement	 
>3180	IdentifierDecl	* pabySrc = poWK -> papabySrcImage [ iBand ]
>3181	AssignmentExpr	* pabySrc = poWK -> papabySrcImage [ iBand ]
>3182	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>3183	Identifier	iBand
>3184	PtrMemberAccess	poWK -> papabySrcImage
>3185	Identifier	papabySrcImage
>3186	Identifier	poWK
>3187	Identifier	pabySrc
>3188	Identifier	pabySrc
>3189	IdentifierDeclType	GByte *
>3222	FunctionDef	GWKGetPixelRow (GDALWarpKernel * poWK , int iBand , int iSrcOffset , int nHalfSrcLen , double * padfDensity , double \
>3223	ParameterList	GDALWarpKernel * poWK , int iBand , int iSrcOffset , int nHalfSrcLen , double * padfDensity , double adfReal [ ] , \
>3224	Parameter	 
>3225	Identifier	padfImag
>3226	ParameterType	double *
>3227	Parameter	 
>3228	Identifier	adfReal
>3229	ParameterType	double [ ]
>3230	Parameter	 
>3231	Identifier	padfDensity
>3232	ParameterType	double *
>3233	Parameter	 
>3234	Identifier	nHalfSrcLen
>3235	ParameterType	int
>3236	Parameter	 
>3237	Identifier	iSrcOffset
>3238	ParameterType	int
>3239	Parameter	 
>3240	Identifier	iBand
>3241	ParameterType	int
>3242	Parameter	 
>3243	Identifier	poWK
>3244	ParameterType	GDALWarpKernel *
>3245	ReturnType	static int
>3246	CompoundStatement	 
>3247	ReturnStatement	 
>3248	Identifier	bHasValid
>3249	IfStatement	if ( poWK -> pafUnifiedSrcDensity == NULL )
>3250	ElseStatement	else
>3251	CompoundStatement	 
>3252	ForStatement	for ( i = 0 ; i < nSrcLen ; i += 2 )
>3253	CompoundStatement	 
>3254	IfStatement	if ( padfDensity [ i + 1 ] > 0.000000001 )
>3255	ExpressionStatement	 
>3256	AssignmentExpr	bHasValid = TRUE
>3257	Identifier	TRUE
>3258	Identifier	bHasValid
>3259	Condition	 
>3260	RelationalExpression	padfDensity [ i + 1 ] > 0.000000001
>3261	PrimaryExpression	0.000000001
>3262	ArrayIndexing	padfDensity [ i + 1 ]
>3263	AdditiveExpression	i + 1
>3264	PrimaryExpression	1
>3265	Identifier	i
>3266	Identifier	padfDensity
>3267	IfStatement	if ( padfDensity [ i + 1 ] > 0.000000001 )
>3268	ExpressionStatement	 
>3269	AssignmentExpr	padfDensity [ i + 1 ] = poWK -> pafUnifiedSrcDensity [ iSrcOffset + i + 1 ]
>3270	ArrayIndexing	poWK -> pafUnifiedSrcDensity [ iSrcOffset + i + 1 ]
>3271	AdditiveExpression	iSrcOffset + i + 1
>3272	AdditiveExpression	i + 1
>3273	PrimaryExpression	1
>3274	Identifier	i
>3275	Identifier	iSrcOffset
>3276	PtrMemberAccess	poWK -> pafUnifiedSrcDensity
>3277	Identifier	pafUnifiedSrcDensity
>3278	Identifier	poWK
>3279	ArrayIndexing	padfDensity [ i + 1 ]
>3280	AdditiveExpression	i + 1
>3281	PrimaryExpression	1
>3282	Identifier	i
>3283	Identifier	padfDensity
>3284	Condition	 
>3285	RelationalExpression	padfDensity [ i + 1 ] > 0.000000001
>3286	PrimaryExpression	0.000000001
>3287	ArrayIndexing	padfDensity [ i + 1 ]
>3288	AdditiveExpression	i + 1
>3289	PrimaryExpression	1
>3290	Identifier	i
>3291	Identifier	padfDensity
>3292	IfStatement	if ( padfDensity [ i ] > 0.000000001 )
>3293	ExpressionStatement	 
>3294	AssignmentExpr	bHasValid = TRUE
>3295	Identifier	TRUE
>3296	Identifier	bHasValid
>3297	Condition	 
>3298	RelationalExpression	padfDensity [ i ] > 0.000000001
>3299	PrimaryExpression	0.000000001
>3300	ArrayIndexing	padfDensity [ i ]
>3301	Identifier	i
>3302	Identifier	padfDensity
>3303	IfStatement	if ( padfDensity [ i ] > 0.000000001 )
>3304	ExpressionStatement	 
>3305	AssignmentExpr	padfDensity [ i ] = poWK -> pafUnifiedSrcDensity [ iSrcOffset + i ]
>3306	ArrayIndexing	poWK -> pafUnifiedSrcDensity [ iSrcOffset + i ]
>3307	AdditiveExpression	iSrcOffset + i
>3308	Identifier	i
>3309	Identifier	iSrcOffset
>3310	PtrMemberAccess	poWK -> pafUnifiedSrcDensity
>3311	Identifier	pafUnifiedSrcDensity
>3312	Identifier	poWK
>3313	ArrayIndexing	padfDensity [ i ]
>3314	Identifier	i
>3315	Identifier	padfDensity
>3316	Condition	 
>3317	RelationalExpression	padfDensity [ i ] > 0.000000001
>3318	PrimaryExpression	0.000000001
>3319	ArrayIndexing	padfDensity [ i ]
>3320	Identifier	i
>3321	Identifier	padfDensity
>3322	AssignmentExpr	 
>3323	PrimaryExpression	2
>3324	Identifier	i
>3325	Condition	 
>3326	RelationalExpression	i < nSrcLen
>3327	Identifier	nSrcLen
>3328	Identifier	i
>3329	ForInit	 
>3330	AssignmentExpr	i = 0
>3331	PrimaryExpression	0
>3332	Identifier	i
>3333	CompoundStatement	 
>3334	ForStatement	for ( i = 0 ; i < nSrcLen ; i += 2 )
>3335	CompoundStatement	 
>3336	IfStatement	if ( padfDensity [ i + 1 ] > 0.000000001 )
>3337	CompoundStatement	 
>3338	ExpressionStatement	 
>3339	AssignmentExpr	bHasValid = TRUE
>3340	Identifier	TRUE
>3341	Identifier	bHasValid
>3342	ExpressionStatement	 
>3343	AssignmentExpr	padfDensity [ i + 1 ] = 1.0
>3344	PrimaryExpression	1.0
>3345	ArrayIndexing	padfDensity [ i + 1 ]
>3346	AdditiveExpression	i + 1
>3347	PrimaryExpression	1
>3348	Identifier	i
>3349	Identifier	padfDensity
>3350	Condition	 
>3351	RelationalExpression	padfDensity [ i + 1 ] > 0.000000001
>3352	PrimaryExpression	0.000000001
>3353	ArrayIndexing	padfDensity [ i + 1 ]
>3354	AdditiveExpression	i + 1
>3355	PrimaryExpression	1
>3356	Identifier	i
>3357	Identifier	padfDensity
>3358	IfStatement	if ( padfDensity [ i ] > 0.000000001 )
>3359	CompoundStatement	 
>3360	ExpressionStatement	 
>3361	AssignmentExpr	bHasValid = TRUE
>3362	Identifier	TRUE
>3363	Identifier	bHasValid
>3364	ExpressionStatement	 
>3365	AssignmentExpr	padfDensity [ i ] = 1.0
>3366	PrimaryExpression	1.0
>3367	ArrayIndexing	padfDensity [ i ]
>3368	Identifier	i
>3369	Identifier	padfDensity
>3370	Condition	 
>3371	RelationalExpression	padfDensity [ i ] > 0.000000001
>3372	PrimaryExpression	0.000000001
>3373	ArrayIndexing	padfDensity [ i ]
>3374	Identifier	i
>3375	Identifier	padfDensity
>3376	AssignmentExpr	 
>3377	PrimaryExpression	2
>3378	Identifier	i
>3379	Condition	 
>3380	RelationalExpression	i < nSrcLen
>3381	Identifier	nSrcLen
>3382	Identifier	i
>3383	ForInit	 
>3384	AssignmentExpr	i = 0
>3385	PrimaryExpression	0
>3386	Identifier	i
>3387	Condition	 
>3388	EqualityExpression	poWK -> pafUnifiedSrcDensity == NULL
>3389	Identifier	NULL
>3390	PtrMemberAccess	poWK -> pafUnifiedSrcDensity
>3391	Identifier	pafUnifiedSrcDensity
>3392	Identifier	poWK
>3393	IfStatement	if ( padfDensity == NULL )
>3394	ReturnStatement	 
>3395	Identifier	TRUE
>3396	Condition	 
>3397	EqualityExpression	padfDensity == NULL
>3398	Identifier	NULL
>3399	Identifier	padfDensity
>3400	SwitchStatement	switch ( poWK -> eWorkingDataType )
>3401	CompoundStatement	 
>3402	ReturnStatement	 
>3403	Identifier	FALSE
>3404	IfStatement	if ( padfDensity )
>3405	ExpressionStatement	 
>3406	CallExpression	memset ( padfDensity , 0 , nSrcLen * sizeof ( double ) )
>3407	ArgumentList	padfDensity
>3408	Argument	nSrcLen * sizeof ( double )
>3409	MultiplicativeExpression	nSrcLen * sizeof ( double )
>3410	SizeofExpr	sizeof ( double )
>3411	SizeofOperand	double
>3412	Sizeof	sizeof
>3413	Identifier	nSrcLen
>3414	Argument	0
>3415	PrimaryExpression	0
>3416	Argument	padfDensity
>3417	Identifier	padfDensity
>3418	Callee	memset
>3419	Identifier	memset
>3420	Condition	 
>3421	Identifier	padfDensity
>3422	ExpressionStatement	 
>3423	CallExpression	CPLAssert ( FALSE )
>3424	ArgumentList	FALSE
>3425	Argument	FALSE
>3426	Identifier	FALSE
>3427	Callee	CPLAssert
>3428	Identifier	CPLAssert
>3429	Label	 
>3430	Identifier	default
>3431	CompoundStatement	 
>3432	BreakStatement	 
>3433	ForStatement	for ( i = 0 ; i < nSrcLen ; i += 2 )
>3434	CompoundStatement	 
>3435	ExpressionStatement	 
>3436	AssignmentExpr	padfImag [ i + 1 ] = pSrc [ 2 * i + 3 ]
>3437	ArrayIndexing	pSrc [ 2 * i + 3 ]
>3438	AdditiveExpression	2 * i + 3
>3439	PrimaryExpression	3
>3440	MultiplicativeExpression	2 * i
>3441	Identifier	i
>3442	PrimaryExpression	2
>3443	Identifier	pSrc
>3444	ArrayIndexing	padfImag [ i + 1 ]
>3445	AdditiveExpression	i + 1
>3446	PrimaryExpression	1
>3447	Identifier	i
>3448	Identifier	padfImag
>3449	ExpressionStatement	 
>3450	AssignmentExpr	adfReal [ i + 1 ] = pSrc [ 2 * i + 2 ]
>3451	ArrayIndexing	pSrc [ 2 * i + 2 ]
>3452	AdditiveExpression	2 * i + 2
>3453	PrimaryExpression	2
>3454	MultiplicativeExpression	2 * i
>3455	Identifier	i
>3456	PrimaryExpression	2
>3457	Identifier	pSrc
>3458	ArrayIndexing	adfReal [ i + 1 ]
>3459	AdditiveExpression	i + 1
>3460	PrimaryExpression	1
>3461	Identifier	i
>3462	Identifier	adfReal
>3463	ExpressionStatement	 
>3464	AssignmentExpr	padfImag [ i ] = pSrc [ 2 * i + 1 ]
>3465	ArrayIndexing	pSrc [ 2 * i + 1 ]
>3466	AdditiveExpression	2 * i + 1
>3467	PrimaryExpression	1
>3468	MultiplicativeExpression	2 * i
>3469	Identifier	i
>3470	PrimaryExpression	2
>3471	Identifier	pSrc
>3472	ArrayIndexing	padfImag [ i ]
>3473	Identifier	i
>3474	Identifier	padfImag
>3475	ExpressionStatement	 
>3476	AssignmentExpr	adfReal [ i ] = pSrc [ 2 * i ]
>3477	ArrayIndexing	pSrc [ 2 * i ]
>3478	MultiplicativeExpression	2 * i
>3479	Identifier	i
>3480	PrimaryExpression	2
>3481	Identifier	pSrc
>3482	ArrayIndexing	adfReal [ i ]
>3483	Identifier	i
>3484	Identifier	adfReal
>3485	AssignmentExpr	 
>3486	PrimaryExpression	2
>3487	Identifier	i
>3488	Condition	 
>3489	RelationalExpression	i < nSrcLen
>3490	Identifier	nSrcLen
>3491	Identifier	i
>3492	ForInit	 
>3493	AssignmentExpr	i = 0
>3494	PrimaryExpression	0
>3495	Identifier	i
>3496	ExpressionStatement	 
>3497	AssignmentExpr	pSrc += 2 * iSrcOffset
>3498	MultiplicativeExpression	2 * iSrcOffset
>3499	Identifier	iSrcOffset
>3500	PrimaryExpression	2
>3501	Identifier	pSrc
>3502	IdentifierDeclStatement	 
>3503	IdentifierDecl	* pSrc = ( double * ) poWK -> papabySrcImage [ iBand ]
>3504	AssignmentExpr	* pSrc = ( double * ) poWK -> papabySrcImage [ iBand ]
>3505	CastExpression	( double * ) poWK -> papabySrcImage [ iBand ]
>3506	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>3507	Identifier	iBand
>3508	PtrMemberAccess	poWK -> papabySrcImage
>3509	Identifier	papabySrcImage
>3510	Identifier	poWK
>3511	CastTarget	double *
>3512	Identifier	pSrc
>3513	Identifier	pSrc
>3514	IdentifierDeclType	double *
>3515	Label	 
>3516	Identifier	GDT_CFloat64
>3517	CompoundStatement	 
>3518	BreakStatement	 
>3519	ForStatement	for ( i = 0 ; i < nSrcLen ; i += 2 )
>3520	CompoundStatement	 
>3521	ExpressionStatement	 
>3522	AssignmentExpr	padfImag [ i + 1 ] = pSrc [ 2 * i + 3 ]
>3523	ArrayIndexing	pSrc [ 2 * i + 3 ]
>3524	AdditiveExpression	2 * i + 3
>3525	PrimaryExpression	3
>3526	MultiplicativeExpression	2 * i
>3527	Identifier	i
>3528	PrimaryExpression	2
>3529	Identifier	pSrc
>3530	ArrayIndexing	padfImag [ i + 1 ]
>3531	AdditiveExpression	i + 1
>3532	PrimaryExpression	1
>3533	Identifier	i
>3534	Identifier	padfImag
>3535	ExpressionStatement	 
>3536	AssignmentExpr	adfReal [ i + 1 ] = pSrc [ 2 * i + 2 ]
>3537	ArrayIndexing	pSrc [ 2 * i + 2 ]
>3538	AdditiveExpression	2 * i + 2
>3539	PrimaryExpression	2
>3540	MultiplicativeExpression	2 * i
>3541	Identifier	i
>3542	PrimaryExpression	2
>3543	Identifier	pSrc
>3544	ArrayIndexing	adfReal [ i + 1 ]
>3545	AdditiveExpression	i + 1
>3546	PrimaryExpression	1
>3547	Identifier	i
>3548	Identifier	adfReal
>3549	ExpressionStatement	 
>3550	AssignmentExpr	padfImag [ i ] = pSrc [ 2 * i + 1 ]
>3551	ArrayIndexing	pSrc [ 2 * i + 1 ]
>3552	AdditiveExpression	2 * i + 1
>3553	PrimaryExpression	1
>3554	MultiplicativeExpression	2 * i
>3555	Identifier	i
>3556	PrimaryExpression	2
>3557	Identifier	pSrc
>3558	ArrayIndexing	padfImag [ i ]
>3559	Identifier	i
>3560	Identifier	padfImag
>3561	ExpressionStatement	 
>3562	AssignmentExpr	adfReal [ i ] = pSrc [ 2 * i ]
>3563	ArrayIndexing	pSrc [ 2 * i ]
>3564	MultiplicativeExpression	2 * i
>3565	Identifier	i
>3566	PrimaryExpression	2
>3567	Identifier	pSrc
>3568	ArrayIndexing	adfReal [ i ]
>3569	Identifier	i
>3570	Identifier	adfReal
>3571	AssignmentExpr	 
>3572	PrimaryExpression	2
>3573	Identifier	i
>3574	Condition	 
>3575	RelationalExpression	i < nSrcLen
>3576	Identifier	nSrcLen
>3577	Identifier	i
>3578	ForInit	 
>3579	AssignmentExpr	i = 0
>3580	PrimaryExpression	0
>3581	Identifier	i
>3582	ExpressionStatement	 
>3583	AssignmentExpr	pSrc += 2 * iSrcOffset
>3584	MultiplicativeExpression	2 * iSrcOffset
>3585	Identifier	iSrcOffset
>3586	PrimaryExpression	2
>3587	Identifier	pSrc
>3588	IdentifierDeclStatement	 
>3589	IdentifierDecl	* pSrc = ( float * ) poWK -> papabySrcImage [ iBand ]
>3590	AssignmentExpr	* pSrc = ( float * ) poWK -> papabySrcImage [ iBand ]
>3591	CastExpression	( float * ) poWK -> papabySrcImage [ iBand ]
>3592	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>3593	Identifier	iBand
>3594	PtrMemberAccess	poWK -> papabySrcImage
>3595	Identifier	papabySrcImage
>3596	Identifier	poWK
>3597	CastTarget	float *
>3598	Identifier	pSrc
>3599	Identifier	pSrc
>3600	IdentifierDeclType	float *
>3601	Label	 
>3602	Identifier	GDT_CFloat32
>3603	CompoundStatement	 
>3604	BreakStatement	 
>3605	ForStatement	for ( i = 0 ; i < nSrcLen ; i += 2 )
>3606	CompoundStatement	 
>3607	ExpressionStatement	 
>3608	AssignmentExpr	padfImag [ i + 1 ] = pSrc [ 2 * i + 3 ]
>3609	ArrayIndexing	pSrc [ 2 * i + 3 ]
>3610	AdditiveExpression	2 * i + 3
>3611	PrimaryExpression	3
>3612	MultiplicativeExpression	2 * i
>3613	Identifier	i
>3614	PrimaryExpression	2
>3615	Identifier	pSrc
>3616	ArrayIndexing	padfImag [ i + 1 ]
>3617	AdditiveExpression	i + 1
>3618	PrimaryExpression	1
>3619	Identifier	i
>3620	Identifier	padfImag
>3621	ExpressionStatement	 
>3622	AssignmentExpr	adfReal [ i + 1 ] = pSrc [ 2 * i + 2 ]
>3623	ArrayIndexing	pSrc [ 2 * i + 2 ]
>3624	AdditiveExpression	2 * i + 2
>3625	PrimaryExpression	2
>3626	MultiplicativeExpression	2 * i
>3627	Identifier	i
>3628	PrimaryExpression	2
>3629	Identifier	pSrc
>3630	ArrayIndexing	adfReal [ i + 1 ]
>3631	AdditiveExpression	i + 1
>3632	PrimaryExpression	1
>3633	Identifier	i
>3634	Identifier	adfReal
>3635	ExpressionStatement	 
>3636	AssignmentExpr	padfImag [ i ] = pSrc [ 2 * i + 1 ]
>3637	ArrayIndexing	pSrc [ 2 * i + 1 ]
>3638	AdditiveExpression	2 * i + 1
>3639	PrimaryExpression	1
>3640	MultiplicativeExpression	2 * i
>3641	Identifier	i
>3642	PrimaryExpression	2
>3643	Identifier	pSrc
>3644	ArrayIndexing	padfImag [ i ]
>3645	Identifier	i
>3646	Identifier	padfImag
>3647	ExpressionStatement	 
>3648	AssignmentExpr	adfReal [ i ] = pSrc [ 2 * i ]
>3649	ArrayIndexing	pSrc [ 2 * i ]
>3650	MultiplicativeExpression	2 * i
>3651	Identifier	i
>3652	PrimaryExpression	2
>3653	Identifier	pSrc
>3654	ArrayIndexing	adfReal [ i ]
>3655	Identifier	i
>3656	Identifier	adfReal
>3657	AssignmentExpr	 
>3658	PrimaryExpression	2
>3659	Identifier	i
>3660	Condition	 
>3661	RelationalExpression	i < nSrcLen
>3662	Identifier	nSrcLen
>3663	Identifier	i
>3664	ForInit	 
>3665	AssignmentExpr	i = 0
>3666	PrimaryExpression	0
>3667	Identifier	i
>3668	ExpressionStatement	 
>3669	AssignmentExpr	pSrc += 2 * iSrcOffset
>3670	MultiplicativeExpression	2 * iSrcOffset
>3671	Identifier	iSrcOffset
>3672	PrimaryExpression	2
>3673	Identifier	pSrc
>3674	IdentifierDeclStatement	 
>3675	IdentifierDecl	* pSrc = ( GInt32 * ) poWK -> papabySrcImage [ iBand ]
>3676	AssignmentExpr	* pSrc = ( GInt32 * ) poWK -> papabySrcImage [ iBand ]
>3677	CastExpression	( GInt32 * ) poWK -> papabySrcImage [ iBand ]
>3678	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>3679	Identifier	iBand
>3680	PtrMemberAccess	poWK -> papabySrcImage
>3681	Identifier	papabySrcImage
>3682	Identifier	poWK
>3683	CastTarget	GInt32 *
>3684	Identifier	pSrc
>3685	Identifier	pSrc
>3686	IdentifierDeclType	GInt32 *
>3687	Label	 
>3688	Identifier	GDT_CInt32
>3689	CompoundStatement	 
>3690	BreakStatement	 
>3691	ForStatement	for ( i = 0 ; i < nSrcLen ; i += 2 )
>3692	CompoundStatement	 
>3693	ExpressionStatement	 
>3694	AssignmentExpr	padfImag [ i + 1 ] = pSrc [ 2 * i + 3 ]
>3695	ArrayIndexing	pSrc [ 2 * i + 3 ]
>3696	AdditiveExpression	2 * i + 3
>3697	PrimaryExpression	3
>3698	MultiplicativeExpression	2 * i
>3699	Identifier	i
>3700	PrimaryExpression	2
>3701	Identifier	pSrc
>3702	ArrayIndexing	padfImag [ i + 1 ]
>3703	AdditiveExpression	i + 1
>3704	PrimaryExpression	1
>3705	Identifier	i
>3706	Identifier	padfImag
>3707	ExpressionStatement	 
>3708	AssignmentExpr	adfReal [ i + 1 ] = pSrc [ 2 * i + 2 ]
>3709	ArrayIndexing	pSrc [ 2 * i + 2 ]
>3710	AdditiveExpression	2 * i + 2
>3711	PrimaryExpression	2
>3712	MultiplicativeExpression	2 * i
>3713	Identifier	i
>3714	PrimaryExpression	2
>3715	Identifier	pSrc
>3716	ArrayIndexing	adfReal [ i + 1 ]
>3717	AdditiveExpression	i + 1
>3718	PrimaryExpression	1
>3719	Identifier	i
>3720	Identifier	adfReal
>3721	ExpressionStatement	 
>3722	AssignmentExpr	padfImag [ i ] = pSrc [ 2 * i + 1 ]
>3723	ArrayIndexing	pSrc [ 2 * i + 1 ]
>3724	AdditiveExpression	2 * i + 1
>3725	PrimaryExpression	1
>3726	MultiplicativeExpression	2 * i
>3727	Identifier	i
>3728	PrimaryExpression	2
>3729	Identifier	pSrc
>3730	ArrayIndexing	padfImag [ i ]
>3731	Identifier	i
>3732	Identifier	padfImag
>3733	ExpressionStatement	 
>3734	AssignmentExpr	adfReal [ i ] = pSrc [ 2 * i ]
>3735	ArrayIndexing	pSrc [ 2 * i ]
>3736	MultiplicativeExpression	2 * i
>3737	Identifier	i
>3738	PrimaryExpression	2
>3739	Identifier	pSrc
>3740	ArrayIndexing	adfReal [ i ]
>3741	Identifier	i
>3742	Identifier	adfReal
>3743	AssignmentExpr	 
>3744	PrimaryExpression	2
>3745	Identifier	i
>3746	Condition	 
>3747	RelationalExpression	i < nSrcLen
>3748	Identifier	nSrcLen
>3749	Identifier	i
>3750	ForInit	 
>3751	AssignmentExpr	i = 0
>3752	PrimaryExpression	0
>3753	Identifier	i
>3754	ExpressionStatement	 
>3755	AssignmentExpr	pSrc += 2 * iSrcOffset
>3756	MultiplicativeExpression	2 * iSrcOffset
>3757	Identifier	iSrcOffset
>3758	PrimaryExpression	2
>3759	Identifier	pSrc
>3760	IdentifierDeclStatement	 
>3761	IdentifierDecl	* pSrc = ( GInt16 * ) poWK -> papabySrcImage [ iBand ]
>3762	AssignmentExpr	* pSrc = ( GInt16 * ) poWK -> papabySrcImage [ iBand ]
>3763	CastExpression	( GInt16 * ) poWK -> papabySrcImage [ iBand ]
>3764	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>3765	Identifier	iBand
>3766	PtrMemberAccess	poWK -> papabySrcImage
>3767	Identifier	papabySrcImage
>3768	Identifier	poWK
>3769	CastTarget	GInt16 *
>3770	Identifier	pSrc
>3771	Identifier	pSrc
>3772	IdentifierDeclType	GInt16 *
>3773	Label	 
>3774	Identifier	GDT_CInt16
>3775	CompoundStatement	 
>3776	BreakStatement	 
>3777	ForStatement	for ( i = 0 ; i < nSrcLen ; i += 2 )
>3778	CompoundStatement	 
>3779	ExpressionStatement	 
>3780	AssignmentExpr	adfReal [ i + 1 ] = pSrc [ i + 1 ]
>3781	ArrayIndexing	pSrc [ i + 1 ]
>3782	AdditiveExpression	i + 1
>3783	PrimaryExpression	1
>3784	Identifier	i
>3785	Identifier	pSrc
>3786	ArrayIndexing	adfReal [ i + 1 ]
>3787	AdditiveExpression	i + 1
>3788	PrimaryExpression	1
>3789	Identifier	i
>3790	Identifier	adfReal
>3791	ExpressionStatement	 
>3792	AssignmentExpr	adfReal [ i ] = pSrc [ i ]
>3793	ArrayIndexing	pSrc [ i ]
>3794	Identifier	i
>3795	Identifier	pSrc
>3796	ArrayIndexing	adfReal [ i ]
>3797	Identifier	i
>3798	Identifier	adfReal
>3799	AssignmentExpr	 
>3800	PrimaryExpression	2
>3801	Identifier	i
>3802	Condition	 
>3803	RelationalExpression	i < nSrcLen
>3804	Identifier	nSrcLen
>3805	Identifier	i
>3806	ForInit	 
>3807	AssignmentExpr	i = 0
>3808	PrimaryExpression	0
>3809	Identifier	i
>3810	ExpressionStatement	 
>3811	AssignmentExpr	pSrc += iSrcOffset
>3812	Identifier	iSrcOffset
>3813	Identifier	pSrc
>3814	IdentifierDeclStatement	 
>3815	IdentifierDecl	* pSrc = ( double * ) poWK -> papabySrcImage [ iBand ]
>3816	AssignmentExpr	* pSrc = ( double * ) poWK -> papabySrcImage [ iBand ]
>3817	CastExpression	( double * ) poWK -> papabySrcImage [ iBand ]
>3818	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>3819	Identifier	iBand
>3820	PtrMemberAccess	poWK -> papabySrcImage
>3821	Identifier	papabySrcImage
>3822	Identifier	poWK
>3823	CastTarget	double *
>3824	Identifier	pSrc
>3825	Identifier	pSrc
>3826	IdentifierDeclType	double *
>3827	Label	 
>3828	Identifier	GDT_Float64
>3829	CompoundStatement	 
>3830	BreakStatement	 
>3831	ForStatement	for ( i = 0 ; i < nSrcLen ; i += 2 )
>3832	CompoundStatement	 
>3833	ExpressionStatement	 
>3834	AssignmentExpr	adfReal [ i + 1 ] = pSrc [ i + 1 ]
>3835	ArrayIndexing	pSrc [ i + 1 ]
>3836	AdditiveExpression	i + 1
>3837	PrimaryExpression	1
>3838	Identifier	i
>3839	Identifier	pSrc
>3840	ArrayIndexing	adfReal [ i + 1 ]
>3841	AdditiveExpression	i + 1
>3842	PrimaryExpression	1
>3843	Identifier	i
>3844	Identifier	adfReal
>3845	ExpressionStatement	 
>3846	AssignmentExpr	adfReal [ i ] = pSrc [ i ]
>3847	ArrayIndexing	pSrc [ i ]
>3848	Identifier	i
>3849	Identifier	pSrc
>3850	ArrayIndexing	adfReal [ i ]
>3851	Identifier	i
>3852	Identifier	adfReal
>3853	AssignmentExpr	 
>3854	PrimaryExpression	2
>3855	Identifier	i
>3856	Condition	 
>3857	RelationalExpression	i < nSrcLen
>3858	Identifier	nSrcLen
>3859	Identifier	i
>3860	ForInit	 
>3861	AssignmentExpr	i = 0
>3862	PrimaryExpression	0
>3863	Identifier	i
>3864	ExpressionStatement	 
>3865	AssignmentExpr	pSrc += iSrcOffset
>3866	Identifier	iSrcOffset
>3867	Identifier	pSrc
>3868	IdentifierDeclStatement	 
>3869	IdentifierDecl	* pSrc = ( float * ) poWK -> papabySrcImage [ iBand ]
>3870	AssignmentExpr	* pSrc = ( float * ) poWK -> papabySrcImage [ iBand ]
>3871	CastExpression	( float * ) poWK -> papabySrcImage [ iBand ]
>3872	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>3873	Identifier	iBand
>3874	PtrMemberAccess	poWK -> papabySrcImage
>3875	Identifier	papabySrcImage
>3876	Identifier	poWK
>3877	CastTarget	float *
>3878	Identifier	pSrc
>3879	Identifier	pSrc
>3880	IdentifierDeclType	float *
>3881	Label	 
>3882	Identifier	GDT_Float32
>3883	CompoundStatement	 
>3884	BreakStatement	 
>3885	ForStatement	for ( i = 0 ; i < nSrcLen ; i += 2 )
>3886	CompoundStatement	 
>3887	ExpressionStatement	 
>3888	AssignmentExpr	adfReal [ i + 1 ] = pSrc [ i + 1 ]
>3889	ArrayIndexing	pSrc [ i + 1 ]
>3890	AdditiveExpression	i + 1
>3891	PrimaryExpression	1
>3892	Identifier	i
>3893	Identifier	pSrc
>3894	ArrayIndexing	adfReal [ i + 1 ]
>3895	AdditiveExpression	i + 1
>3896	PrimaryExpression	1
>3897	Identifier	i
>3898	Identifier	adfReal
>3899	ExpressionStatement	 
>3900	AssignmentExpr	adfReal [ i ] = pSrc [ i ]
>3901	ArrayIndexing	pSrc [ i ]
>3902	Identifier	i
>3903	Identifier	pSrc
>3904	ArrayIndexing	adfReal [ i ]
>3905	Identifier	i
>3906	Identifier	adfReal
>3907	AssignmentExpr	 
>3908	PrimaryExpression	2
>3909	Identifier	i
>3910	Condition	 
>3911	RelationalExpression	i < nSrcLen
>3912	Identifier	nSrcLen
>3913	Identifier	i
>3914	ForInit	 
>3915	AssignmentExpr	i = 0
>3916	PrimaryExpression	0
>3917	Identifier	i
>3918	ExpressionStatement	 
>3919	AssignmentExpr	pSrc += iSrcOffset
>3920	Identifier	iSrcOffset
>3921	Identifier	pSrc
>3922	IdentifierDeclStatement	 
>3923	IdentifierDecl	* pSrc = ( GUInt32 * ) poWK -> papabySrcImage [ iBand ]
>3924	AssignmentExpr	* pSrc = ( GUInt32 * ) poWK -> papabySrcImage [ iBand ]
>3925	CastExpression	( GUInt32 * ) poWK -> papabySrcImage [ iBand ]
>3926	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>3927	Identifier	iBand
>3928	PtrMemberAccess	poWK -> papabySrcImage
>3929	Identifier	papabySrcImage
>3930	Identifier	poWK
>3931	CastTarget	GUInt32 *
>3932	Identifier	pSrc
>3933	Identifier	pSrc
>3934	IdentifierDeclType	GUInt32 *
>3935	Label	 
>3936	Identifier	GDT_UInt32
>3937	CompoundStatement	 
>3938	BreakStatement	 
>3939	ForStatement	for ( i = 0 ; i < nSrcLen ; i += 2 )
>3940	CompoundStatement	 
>3941	ExpressionStatement	 
>3942	AssignmentExpr	adfReal [ i + 1 ] = pSrc [ i + 1 ]
>3943	ArrayIndexing	pSrc [ i + 1 ]
>3944	AdditiveExpression	i + 1
>3945	PrimaryExpression	1
>3946	Identifier	i
>3947	Identifier	pSrc
>3948	ArrayIndexing	adfReal [ i + 1 ]
>3949	AdditiveExpression	i + 1
>3950	PrimaryExpression	1
>3951	Identifier	i
>3952	Identifier	adfReal
>3953	ExpressionStatement	 
>3954	AssignmentExpr	adfReal [ i ] = pSrc [ i ]
>3955	ArrayIndexing	pSrc [ i ]
>3956	Identifier	i
>3957	Identifier	pSrc
>3958	ArrayIndexing	adfReal [ i ]
>3959	Identifier	i
>3960	Identifier	adfReal
>3961	AssignmentExpr	 
>3962	PrimaryExpression	2
>3963	Identifier	i
>3964	Condition	 
>3965	RelationalExpression	i < nSrcLen
>3966	Identifier	nSrcLen
>3967	Identifier	i
>3968	ForInit	 
>3969	AssignmentExpr	i = 0
>3970	PrimaryExpression	0
>3971	Identifier	i
>3972	ExpressionStatement	 
>3973	AssignmentExpr	pSrc += iSrcOffset
>3974	Identifier	iSrcOffset
>3975	Identifier	pSrc
>3976	IdentifierDeclStatement	 
>3977	IdentifierDecl	* pSrc = ( GInt32 * ) poWK -> papabySrcImage [ iBand ]
>3978	AssignmentExpr	* pSrc = ( GInt32 * ) poWK -> papabySrcImage [ iBand ]
>3979	CastExpression	( GInt32 * ) poWK -> papabySrcImage [ iBand ]
>3980	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>3981	Identifier	iBand
>3982	PtrMemberAccess	poWK -> papabySrcImage
>3983	Identifier	papabySrcImage
>3984	Identifier	poWK
>3985	CastTarget	GInt32 *
>3986	Identifier	pSrc
>3987	Identifier	pSrc
>3988	IdentifierDeclType	GInt32 *
>3989	Label	 
>3990	Identifier	GDT_Int32
>3991	CompoundStatement	 
>3992	BreakStatement	 
>3993	ForStatement	for ( i = 0 ; i < nSrcLen ; i += 2 )
>3994	CompoundStatement	 
>3995	ExpressionStatement	 
>3996	AssignmentExpr	adfReal [ i + 1 ] = pSrc [ i + 1 ]
>3997	ArrayIndexing	pSrc [ i + 1 ]
>3998	AdditiveExpression	i + 1
>3999	PrimaryExpression	1
>4000	Identifier	i
>4001	Identifier	pSrc
>4002	ArrayIndexing	adfReal [ i + 1 ]
>4003	AdditiveExpression	i + 1
>4004	PrimaryExpression	1
>4005	Identifier	i
>4006	Identifier	adfReal
>4007	ExpressionStatement	 
>4008	AssignmentExpr	adfReal [ i ] = pSrc [ i ]
>4009	ArrayIndexing	pSrc [ i ]
>4010	Identifier	i
>4011	Identifier	pSrc
>4012	ArrayIndexing	adfReal [ i ]
>4013	Identifier	i
>4014	Identifier	adfReal
>4015	AssignmentExpr	 
>4016	PrimaryExpression	2
>4017	Identifier	i
>4018	Condition	 
>4019	RelationalExpression	i < nSrcLen
>4020	Identifier	nSrcLen
>4021	Identifier	i
>4022	ForInit	 
>4023	AssignmentExpr	i = 0
>4024	PrimaryExpression	0
>4025	Identifier	i
>4026	ExpressionStatement	 
>4027	AssignmentExpr	pSrc += iSrcOffset
>4028	Identifier	iSrcOffset
>4029	Identifier	pSrc
>4030	IdentifierDeclStatement	 
>4031	IdentifierDecl	* pSrc = ( GUInt16 * ) poWK -> papabySrcImage [ iBand ]
>4032	AssignmentExpr	* pSrc = ( GUInt16 * ) poWK -> papabySrcImage [ iBand ]
>4033	CastExpression	( GUInt16 * ) poWK -> papabySrcImage [ iBand ]
>4034	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>4035	Identifier	iBand
>4036	PtrMemberAccess	poWK -> papabySrcImage
>4037	Identifier	papabySrcImage
>4038	Identifier	poWK
>4039	CastTarget	GUInt16 *
>4040	Identifier	pSrc
>4041	Identifier	pSrc
>4042	IdentifierDeclType	GUInt16 *
>4043	Label	 
>4044	Identifier	GDT_UInt16
>4045	CompoundStatement	 
>4046	BreakStatement	 
>4047	ForStatement	for ( i = 0 ; i < nSrcLen ; i += 2 )
>4048	CompoundStatement	 
>4049	ExpressionStatement	 
>4050	AssignmentExpr	adfReal [ i + 1 ] = pSrc [ i + 1 ]
>4051	ArrayIndexing	pSrc [ i + 1 ]
>4052	AdditiveExpression	i + 1
>4053	PrimaryExpression	1
>4054	Identifier	i
>4055	Identifier	pSrc
>4056	ArrayIndexing	adfReal [ i + 1 ]
>4057	AdditiveExpression	i + 1
>4058	PrimaryExpression	1
>4059	Identifier	i
>4060	Identifier	adfReal
>4061	ExpressionStatement	 
>4062	AssignmentExpr	adfReal [ i ] = pSrc [ i ]
>4063	ArrayIndexing	pSrc [ i ]
>4064	Identifier	i
>4065	Identifier	pSrc
>4066	ArrayIndexing	adfReal [ i ]
>4067	Identifier	i
>4068	Identifier	adfReal
>4069	AssignmentExpr	 
>4070	PrimaryExpression	2
>4071	Identifier	i
>4072	Condition	 
>4073	RelationalExpression	i < nSrcLen
>4074	Identifier	nSrcLen
>4075	Identifier	i
>4076	ForInit	 
>4077	AssignmentExpr	i = 0
>4078	PrimaryExpression	0
>4079	Identifier	i
>4080	ExpressionStatement	 
>4081	AssignmentExpr	pSrc += iSrcOffset
>4082	Identifier	iSrcOffset
>4083	Identifier	pSrc
>4084	IdentifierDeclStatement	 
>4085	IdentifierDecl	* pSrc = ( GInt16 * ) poWK -> papabySrcImage [ iBand ]
>4086	AssignmentExpr	* pSrc = ( GInt16 * ) poWK -> papabySrcImage [ iBand ]
>4087	CastExpression	( GInt16 * ) poWK -> papabySrcImage [ iBand ]
>4088	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>4089	Identifier	iBand
>4090	PtrMemberAccess	poWK -> papabySrcImage
>4091	Identifier	papabySrcImage
>4092	Identifier	poWK
>4093	CastTarget	GInt16 *
>4094	Identifier	pSrc
>4095	Identifier	pSrc
>4096	IdentifierDeclType	GInt16 *
>4097	Label	 
>4098	Identifier	GDT_Int16
>4099	CompoundStatement	 
>4100	BreakStatement	 
>4101	ForStatement	for ( i = 0 ; i < nSrcLen ; i += 2 )
>4102	CompoundStatement	 
>4103	ExpressionStatement	 
>4104	AssignmentExpr	adfReal [ i + 1 ] = pSrc [ i + 1 ]
>4105	ArrayIndexing	pSrc [ i + 1 ]
>4106	AdditiveExpression	i + 1
>4107	PrimaryExpression	1
>4108	Identifier	i
>4109	Identifier	pSrc
>4110	ArrayIndexing	adfReal [ i + 1 ]
>4111	AdditiveExpression	i + 1
>4112	PrimaryExpression	1
>4113	Identifier	i
>4114	Identifier	adfReal
>4115	ExpressionStatement	 
>4116	AssignmentExpr	adfReal [ i ] = pSrc [ i ]
>4117	ArrayIndexing	pSrc [ i ]
>4118	Identifier	i
>4119	Identifier	pSrc
>4120	ArrayIndexing	adfReal [ i ]
>4121	Identifier	i
>4122	Identifier	adfReal
>4123	AssignmentExpr	 
>4124	PrimaryExpression	2
>4125	Identifier	i
>4126	Condition	 
>4127	RelationalExpression	i < nSrcLen
>4128	Identifier	nSrcLen
>4129	Identifier	i
>4130	ForInit	 
>4131	AssignmentExpr	i = 0
>4132	PrimaryExpression	0
>4133	Identifier	i
>4134	ExpressionStatement	 
>4135	AssignmentExpr	pSrc += iSrcOffset
>4136	Identifier	iSrcOffset
>4137	Identifier	pSrc
>4138	IdentifierDeclStatement	 
>4139	IdentifierDecl	* pSrc = ( GByte * ) poWK -> papabySrcImage [ iBand ]
>4140	AssignmentExpr	* pSrc = ( GByte * ) poWK -> papabySrcImage [ iBand ]
>4141	CastExpression	( GByte * ) poWK -> papabySrcImage [ iBand ]
>4142	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>4143	Identifier	iBand
>4144	PtrMemberAccess	poWK -> papabySrcImage
>4145	Identifier	papabySrcImage
>4146	Identifier	poWK
>4147	CastTarget	GByte *
>4148	Identifier	pSrc
>4149	Identifier	pSrc
>4150	IdentifierDeclType	GByte *
>4151	Label	 
>4152	Identifier	GDT_Byte
>4153	Condition	 
>4154	PtrMemberAccess	poWK -> eWorkingDataType
>4155	Identifier	eWorkingDataType
>4156	Identifier	poWK
>4157	IfStatement	if ( padfDensity != NULL )
>4158	CompoundStatement	 
>4159	IfStatement	if ( poWK -> papanBandSrcValid != NULL && poWK -> papanBandSrcValid [ iBand ] != NULL )
>4160	CompoundStatement	 
>4161	IfStatement	if ( bHasValid )
>4162	ElseStatement	else
>4163	ReturnStatement	 
>4164	Identifier	FALSE
>4165	ExpressionStatement	 
>4166	AssignmentExpr	bHasValid = FALSE
>4167	Identifier	FALSE
>4168	Identifier	bHasValid
>4169	Condition	 
>4170	Identifier	bHasValid
>4171	ForStatement	for ( i = 0 ; i < nSrcLen ; i += 2 )
>4172	CompoundStatement	 
>4173	IfStatement	if ( poWK -> papanBandSrcValid [ iBand ] [ ( iSrcOffset + i + 1 ) >> 5 ] & ( 0x01 << ( ( iSrcOffset + i + 1 ) & \
>4174	ElseStatement	else
>4175	ExpressionStatement	 
>4176	AssignmentExpr	padfDensity [ i + 1 ] = 0.0
>4177	PrimaryExpression	0.0
>4178	ArrayIndexing	padfDensity [ i + 1 ]
>4179	AdditiveExpression	i + 1
>4180	PrimaryExpression	1
>4181	Identifier	i
>4182	Identifier	padfDensity
>4183	ExpressionStatement	 
>4184	AssignmentExpr	bHasValid = TRUE
>4185	Identifier	TRUE
>4186	Identifier	bHasValid
>4187	Condition	 
>4188	BitAndExpression	poWK -> papanBandSrcValid [ iBand ] [ ( iSrcOffset + i + 1 ) >> 5 ] & ( 0x01 << ( ( iSrcOffset + i + \
>4189	ShiftExpression	0x01 << ( ( iSrcOffset + i + 1 ) & 0x1f )
>4190	BitAndExpression	( iSrcOffset + i + 1 ) & 0x1f
>4191	PrimaryExpression	0x1f
>4192	AdditiveExpression	iSrcOffset + i + 1
>4193	AdditiveExpression	i + 1
>4194	PrimaryExpression	1
>4195	Identifier	i
>4196	Identifier	iSrcOffset
>4197	PrimaryExpression	0x01
>4198	ArrayIndexing	poWK -> papanBandSrcValid [ iBand ] [ ( iSrcOffset + i + 1 ) >> 5 ]
>4199	ShiftExpression	( iSrcOffset + i + 1 ) >> 5
>4200	PrimaryExpression	5
>4201	AdditiveExpression	iSrcOffset + i + 1
>4202	AdditiveExpression	i + 1
>4203	PrimaryExpression	1
>4204	Identifier	i
>4205	Identifier	iSrcOffset
>4206	ArrayIndexing	poWK -> papanBandSrcValid [ iBand ]
>4207	Identifier	iBand
>4208	PtrMemberAccess	poWK -> papanBandSrcValid
>4209	Identifier	papanBandSrcValid
>4210	Identifier	poWK
>4211	IfStatement	if ( poWK -> papanBandSrcValid [ iBand ] [ ( iSrcOffset + i ) >> 5 ] & ( 0x01 << ( ( iSrcOffset + i ) & 0x1f ) ) )
>4212	ElseStatement	else
>4213	ExpressionStatement	 
>4214	AssignmentExpr	padfDensity [ i ] = 0.0
>4215	PrimaryExpression	0.0
>4216	ArrayIndexing	padfDensity [ i ]
>4217	Identifier	i
>4218	Identifier	padfDensity
>4219	ExpressionStatement	 
>4220	AssignmentExpr	bHasValid = TRUE
>4221	Identifier	TRUE
>4222	Identifier	bHasValid
>4223	Condition	 
>4224	BitAndExpression	poWK -> papanBandSrcValid [ iBand ] [ ( iSrcOffset + i ) >> 5 ] & ( 0x01 << ( ( iSrcOffset + i ) & 0x1f ) )
>4225	ShiftExpression	0x01 << ( ( iSrcOffset + i ) & 0x1f )
>4226	BitAndExpression	( iSrcOffset + i ) & 0x1f
>4227	PrimaryExpression	0x1f
>4228	AdditiveExpression	iSrcOffset + i
>4229	Identifier	i
>4230	Identifier	iSrcOffset
>4231	PrimaryExpression	0x01
>4232	ArrayIndexing	poWK -> papanBandSrcValid [ iBand ] [ ( iSrcOffset + i ) >> 5 ]
>4233	ShiftExpression	( iSrcOffset + i ) >> 5
>4234	PrimaryExpression	5
>4235	AdditiveExpression	iSrcOffset + i
>4236	Identifier	i
>4237	Identifier	iSrcOffset
>4238	ArrayIndexing	poWK -> papanBandSrcValid [ iBand ]
>4239	Identifier	iBand
>4240	PtrMemberAccess	poWK -> papanBandSrcValid
>4241	Identifier	papanBandSrcValid
>4242	Identifier	poWK
>4243	AssignmentExpr	 
>4244	PrimaryExpression	2
>4245	Identifier	i
>4246	Condition	 
>4247	RelationalExpression	i < nSrcLen
>4248	Identifier	nSrcLen
>4249	Identifier	i
>4250	ForInit	 
>4251	AssignmentExpr	i = 0
>4252	PrimaryExpression	0
>4253	Identifier	i
>4254	Condition	 
>4255	AndExpression	poWK -> papanBandSrcValid != NULL && poWK -> papanBandSrcValid [ iBand ] != NULL
>4256	EqualityExpression	poWK -> papanBandSrcValid [ iBand ] != NULL
>4257	Identifier	NULL
>4258	ArrayIndexing	poWK -> papanBandSrcValid [ iBand ]
>4259	Identifier	iBand
>4260	PtrMemberAccess	poWK -> papanBandSrcValid
>4261	Identifier	papanBandSrcValid
>4262	Identifier	poWK
>4263	EqualityExpression	poWK -> papanBandSrcValid != NULL
>4264	Identifier	NULL
>4265	PtrMemberAccess	poWK -> papanBandSrcValid
>4266	Identifier	papanBandSrcValid
>4267	Identifier	poWK
>4268	IfStatement	if ( poWK -> panUnifiedSrcValid != NULL )
>4269	CompoundStatement	 
>4270	IfStatement	if ( bHasValid )
>4271	ElseStatement	else
>4272	ReturnStatement	 
>4273	Identifier	FALSE
>4274	ExpressionStatement	 
>4275	AssignmentExpr	bHasValid = FALSE
>4276	Identifier	FALSE
>4277	Identifier	bHasValid
>4278	Condition	 
>4279	Identifier	bHasValid
>4280	ForStatement	for ( i = 0 ; i < nSrcLen ; i += 2 )
>4281	CompoundStatement	 
>4282	IfStatement	if ( poWK -> panUnifiedSrcValid [ ( iSrcOffset + i + 1 ) >> 5 ] & ( 0x01 << ( ( iSrcOffset + i + 1 ) & 0x1f ) ) )
>4283	ElseStatement	else
>4284	ExpressionStatement	 
>4285	AssignmentExpr	padfDensity [ i + 1 ] = 0.0
>4286	PrimaryExpression	0.0
>4287	ArrayIndexing	padfDensity [ i + 1 ]
>4288	AdditiveExpression	i + 1
>4289	PrimaryExpression	1
>4290	Identifier	i
>4291	Identifier	padfDensity
>4292	ExpressionStatement	 
>4293	AssignmentExpr	bHasValid = TRUE
>4294	Identifier	TRUE
>4295	Identifier	bHasValid
>4296	Condition	 
>4297	BitAndExpression	poWK -> panUnifiedSrcValid [ ( iSrcOffset + i + 1 ) >> 5 ] & ( 0x01 << ( ( iSrcOffset + i + 1 ) & 0x1f ) )
>4298	ShiftExpression	0x01 << ( ( iSrcOffset + i + 1 ) & 0x1f )
>4299	BitAndExpression	( iSrcOffset + i + 1 ) & 0x1f
>4300	PrimaryExpression	0x1f
>4301	AdditiveExpression	iSrcOffset + i + 1
>4302	AdditiveExpression	i + 1
>4303	PrimaryExpression	1
>4304	Identifier	i
>4305	Identifier	iSrcOffset
>4306	PrimaryExpression	0x01
>4307	ArrayIndexing	poWK -> panUnifiedSrcValid [ ( iSrcOffset + i + 1 ) >> 5 ]
>4308	ShiftExpression	( iSrcOffset + i + 1 ) >> 5
>4309	PrimaryExpression	5
>4310	AdditiveExpression	iSrcOffset + i + 1
>4311	AdditiveExpression	i + 1
>4312	PrimaryExpression	1
>4313	Identifier	i
>4314	Identifier	iSrcOffset
>4315	PtrMemberAccess	poWK -> panUnifiedSrcValid
>4316	Identifier	panUnifiedSrcValid
>4317	Identifier	poWK
>4318	IfStatement	if ( poWK -> panUnifiedSrcValid [ ( iSrcOffset + i ) >> 5 ] & ( 0x01 << ( ( iSrcOffset + i ) & 0x1f ) ) )
>4319	ElseStatement	else
>4320	ExpressionStatement	 
>4321	AssignmentExpr	padfDensity [ i ] = 0.0
>4322	PrimaryExpression	0.0
>4323	ArrayIndexing	padfDensity [ i ]
>4324	Identifier	i
>4325	Identifier	padfDensity
>4326	ExpressionStatement	 
>4327	AssignmentExpr	bHasValid = TRUE
>4328	Identifier	TRUE
>4329	Identifier	bHasValid
>4330	Condition	 
>4331	BitAndExpression	poWK -> panUnifiedSrcValid [ ( iSrcOffset + i ) >> 5 ] & ( 0x01 << ( ( iSrcOffset + i ) & 0x1f ) )
>4332	ShiftExpression	0x01 << ( ( iSrcOffset + i ) & 0x1f )
>4333	BitAndExpression	( iSrcOffset + i ) & 0x1f
>4334	PrimaryExpression	0x1f
>4335	AdditiveExpression	iSrcOffset + i
>4336	Identifier	i
>4337	Identifier	iSrcOffset
>4338	PrimaryExpression	0x01
>4339	ArrayIndexing	poWK -> panUnifiedSrcValid [ ( iSrcOffset + i ) >> 5 ]
>4340	ShiftExpression	( iSrcOffset + i ) >> 5
>4341	PrimaryExpression	5
>4342	AdditiveExpression	iSrcOffset + i
>4343	Identifier	i
>4344	Identifier	iSrcOffset
>4345	PtrMemberAccess	poWK -> panUnifiedSrcValid
>4346	Identifier	panUnifiedSrcValid
>4347	Identifier	poWK
>4348	AssignmentExpr	 
>4349	PrimaryExpression	2
>4350	Identifier	i
>4351	Condition	 
>4352	RelationalExpression	i < nSrcLen
>4353	Identifier	nSrcLen
>4354	Identifier	i
>4355	ForInit	 
>4356	AssignmentExpr	i = 0
>4357	PrimaryExpression	0
>4358	Identifier	i
>4359	Condition	 
>4360	EqualityExpression	poWK -> panUnifiedSrcValid != NULL
>4361	Identifier	NULL
>4362	PtrMemberAccess	poWK -> panUnifiedSrcValid
>4363	Identifier	panUnifiedSrcValid
>4364	Identifier	poWK
>4365	ForStatement	for ( i = 0 ; i < nSrcLen ; i += 2 )
>4366	CompoundStatement	 
>4367	ExpressionStatement	 
>4368	AssignmentExpr	padfDensity [ i + 1 ] = 1.0
>4369	PrimaryExpression	1.0
>4370	ArrayIndexing	padfDensity [ i + 1 ]
>4371	AdditiveExpression	i + 1
>4372	PrimaryExpression	1
>4373	Identifier	i
>4374	Identifier	padfDensity
>4375	ExpressionStatement	 
>4376	AssignmentExpr	padfDensity [ i ] = 1.0
>4377	PrimaryExpression	1.0
>4378	ArrayIndexing	padfDensity [ i ]
>4379	Identifier	i
>4380	Identifier	padfDensity
>4381	AssignmentExpr	 
>4382	PrimaryExpression	2
>4383	Identifier	i
>4384	Condition	 
>4385	RelationalExpression	i < nSrcLen
>4386	Identifier	nSrcLen
>4387	Identifier	i
>4388	ForInit	 
>4389	AssignmentExpr	i = 0
>4390	PrimaryExpression	0
>4391	Identifier	i
>4392	Condition	 
>4393	EqualityExpression	padfDensity != NULL
>4394	Identifier	NULL
>4395	Identifier	padfDensity
>4396	IdentifierDeclStatement	 
>4397	IdentifierDecl	i
>4398	Identifier	i
>4399	IdentifierDeclType	int
>4400	IdentifierDeclStatement	 
>4401	IdentifierDecl	bHasValid = FALSE
>4402	AssignmentExpr	bHasValid = FALSE
>4403	Identifier	FALSE
>4404	Identifier	FALSE
>4405	Identifier	bHasValid
>4406	IdentifierDeclType	int
>4407	IdentifierDeclStatement	 
>4408	IdentifierDecl	nSrcLen = nHalfSrcLen * 2
>4409	AssignmentExpr	nSrcLen = nHalfSrcLen * 2
>4410	MultiplicativeExpression	nHalfSrcLen * 2
>4411	PrimaryExpression	2
>4412	Identifier	nHalfSrcLen
>4413	Identifier	nSrcLen
>4414	Identifier	nSrcLen
>4415	IdentifierDeclType	int
>4454	FunctionDef	GWKGetPixelByte (GDALWarpKernel * poWK , int iBand , int iSrcOffset , double * pdfDensity , GByte * pbValue)
>4455	ParameterList	GDALWarpKernel * poWK , int iBand , int iSrcOffset , double * pdfDensity , GByte * pbValue
>4456	Parameter	 
>4457	Identifier	pbValue
>4458	ParameterType	GByte *
>4459	Parameter	 
>4460	Identifier	pdfDensity
>4461	ParameterType	double *
>4462	Parameter	 
>4463	Identifier	iSrcOffset
>4464	ParameterType	int
>4465	Parameter	 
>4466	Identifier	iBand
>4467	ParameterType	int
>4468	Parameter	 
>4469	Identifier	poWK
>4470	ParameterType	GDALWarpKernel *
>4471	ReturnType	static int
>4472	CompoundStatement	 
>4473	ReturnStatement	 
>4474	EqualityExpression	* pdfDensity != 0.0
>4475	PrimaryExpression	0.0
>4476	UnaryOp	* pdfDensity
>4477	Identifier	pdfDensity
>4478	UnaryOperator	*
>4479	IfStatement	if ( poWK -> pafUnifiedSrcDensity == NULL )
>4480	ElseStatement	else
>4481	ExpressionStatement	 
>4482	AssignmentExpr	* pdfDensity = poWK -> pafUnifiedSrcDensity [ iSrcOffset ]
>4483	ArrayIndexing	poWK -> pafUnifiedSrcDensity [ iSrcOffset ]
>4484	Identifier	iSrcOffset
>4485	PtrMemberAccess	poWK -> pafUnifiedSrcDensity
>4486	Identifier	pafUnifiedSrcDensity
>4487	Identifier	poWK
>4488	UnaryOp	* pdfDensity
>4489	Identifier	pdfDensity
>4490	UnaryOperator	*
>4491	ExpressionStatement	 
>4492	AssignmentExpr	* pdfDensity = 1.0
>4493	PrimaryExpression	1.0
>4494	UnaryOp	* pdfDensity
>4495	Identifier	pdfDensity
>4496	UnaryOperator	*
>4497	Condition	 
>4498	EqualityExpression	poWK -> pafUnifiedSrcDensity == NULL
>4499	Identifier	NULL
>4500	PtrMemberAccess	poWK -> pafUnifiedSrcDensity
>4501	Identifier	pafUnifiedSrcDensity
>4502	Identifier	poWK
>4503	ExpressionStatement	 
>4504	AssignmentExpr	* pbValue = pabySrc [ iSrcOffset ]
>4505	ArrayIndexing	pabySrc [ iSrcOffset ]
>4506	Identifier	iSrcOffset
>4507	Identifier	pabySrc
>4508	UnaryOp	* pbValue
>4509	Identifier	pbValue
>4510	UnaryOperator	*
>4511	IfStatement	if ( ( poWK -> panUnifiedSrcValid != NULL && ! ( ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( \
>4512	CompoundStatement	 
>4513	ReturnStatement	 
>4514	Identifier	FALSE
>4515	ExpressionStatement	 
>4516	AssignmentExpr	* pdfDensity = 0.0
>4517	PrimaryExpression	0.0
>4518	UnaryOp	* pdfDensity
>4519	Identifier	pdfDensity
>4520	UnaryOperator	*
>4521	Condition	 
>4522	OrExpression	( poWK -> panUnifiedSrcValid != NULL && ! ( ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( \
>4523	AndExpression	poWK -> papanBandSrcValid != NULL && poWK -> papanBandSrcValid [ iBand ] != NULL && ! ( ( poWK -> papanBandSrcValid [ \
>4524	AndExpression	poWK -> papanBandSrcValid [ iBand ] != NULL && ! ( ( poWK -> papanBandSrcValid [ iBand ] [ iSrcOffset >> \
>4525	UnaryOp	! ( ( poWK -> papanBandSrcValid [ iBand ] [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) ) ) )
>4526	BitAndExpression	poWK -> papanBandSrcValid [ iBand ] [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) )
>4527	ShiftExpression	0x01 << ( iSrcOffset & 0x1f )
>4528	BitAndExpression	iSrcOffset & 0x1f
>4529	PrimaryExpression	0x1f
>4530	Identifier	iSrcOffset
>4531	PrimaryExpression	0x01
>4532	ArrayIndexing	poWK -> papanBandSrcValid [ iBand ] [ iSrcOffset >> 5 ]
>4533	ShiftExpression	iSrcOffset >> 5
>4534	PrimaryExpression	5
>4535	Identifier	iSrcOffset
>4536	ArrayIndexing	poWK -> papanBandSrcValid [ iBand ]
>4537	Identifier	iBand
>4538	PtrMemberAccess	poWK -> papanBandSrcValid
>4539	Identifier	papanBandSrcValid
>4540	Identifier	poWK
>4541	UnaryOperator	!
>4542	EqualityExpression	poWK -> papanBandSrcValid [ iBand ] != NULL
>4543	Identifier	NULL
>4544	ArrayIndexing	poWK -> papanBandSrcValid [ iBand ]
>4545	Identifier	iBand
>4546	PtrMemberAccess	poWK -> papanBandSrcValid
>4547	Identifier	papanBandSrcValid
>4548	Identifier	poWK
>4549	EqualityExpression	poWK -> papanBandSrcValid != NULL
>4550	Identifier	NULL
>4551	PtrMemberAccess	poWK -> papanBandSrcValid
>4552	Identifier	papanBandSrcValid
>4553	Identifier	poWK
>4554	AndExpression	poWK -> panUnifiedSrcValid != NULL && ! ( ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( \
>4555	UnaryOp	! ( ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) ) ) )
>4556	BitAndExpression	poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) )
>4557	ShiftExpression	0x01 << ( iSrcOffset & 0x1f )
>4558	BitAndExpression	iSrcOffset & 0x1f
>4559	PrimaryExpression	0x1f
>4560	Identifier	iSrcOffset
>4561	PrimaryExpression	0x01
>4562	ArrayIndexing	poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ]
>4563	ShiftExpression	iSrcOffset >> 5
>4564	PrimaryExpression	5
>4565	Identifier	iSrcOffset
>4566	PtrMemberAccess	poWK -> panUnifiedSrcValid
>4567	Identifier	panUnifiedSrcValid
>4568	Identifier	poWK
>4569	UnaryOperator	!
>4570	EqualityExpression	poWK -> panUnifiedSrcValid != NULL
>4571	Identifier	NULL
>4572	PtrMemberAccess	poWK -> panUnifiedSrcValid
>4573	Identifier	panUnifiedSrcValid
>4574	Identifier	poWK
>4575	IdentifierDeclStatement	 
>4576	IdentifierDecl	* pabySrc = poWK -> papabySrcImage [ iBand ]
>4577	AssignmentExpr	* pabySrc = poWK -> papabySrcImage [ iBand ]
>4578	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>4579	Identifier	iBand
>4580	PtrMemberAccess	poWK -> papabySrcImage
>4581	Identifier	papabySrcImage
>4582	Identifier	poWK
>4583	Identifier	pabySrc
>4584	Identifier	pabySrc
>4585	IdentifierDeclType	GByte *
>4615	FunctionDef	GWKGetPixelShort (GDALWarpKernel * poWK , int iBand , int iSrcOffset , double * pdfDensity , GInt16 * piValue)
>4616	ParameterList	GDALWarpKernel * poWK , int iBand , int iSrcOffset , double * pdfDensity , GInt16 * piValue
>4617	Parameter	 
>4618	Identifier	piValue
>4619	ParameterType	GInt16 *
>4620	Parameter	 
>4621	Identifier	pdfDensity
>4622	ParameterType	double *
>4623	Parameter	 
>4624	Identifier	iSrcOffset
>4625	ParameterType	int
>4626	Parameter	 
>4627	Identifier	iBand
>4628	ParameterType	int
>4629	Parameter	 
>4630	Identifier	poWK
>4631	ParameterType	GDALWarpKernel *
>4632	ReturnType	static int
>4633	CompoundStatement	 
>4634	ReturnStatement	 
>4635	EqualityExpression	* pdfDensity != 0.0
>4636	PrimaryExpression	0.0
>4637	UnaryOp	* pdfDensity
>4638	Identifier	pdfDensity
>4639	UnaryOperator	*
>4640	IfStatement	if ( poWK -> pafUnifiedSrcDensity == NULL )
>4641	ElseStatement	else
>4642	ExpressionStatement	 
>4643	AssignmentExpr	* pdfDensity = poWK -> pafUnifiedSrcDensity [ iSrcOffset ]
>4644	ArrayIndexing	poWK -> pafUnifiedSrcDensity [ iSrcOffset ]
>4645	Identifier	iSrcOffset
>4646	PtrMemberAccess	poWK -> pafUnifiedSrcDensity
>4647	Identifier	pafUnifiedSrcDensity
>4648	Identifier	poWK
>4649	UnaryOp	* pdfDensity
>4650	Identifier	pdfDensity
>4651	UnaryOperator	*
>4652	ExpressionStatement	 
>4653	AssignmentExpr	* pdfDensity = 1.0
>4654	PrimaryExpression	1.0
>4655	UnaryOp	* pdfDensity
>4656	Identifier	pdfDensity
>4657	UnaryOperator	*
>4658	Condition	 
>4659	EqualityExpression	poWK -> pafUnifiedSrcDensity == NULL
>4660	Identifier	NULL
>4661	PtrMemberAccess	poWK -> pafUnifiedSrcDensity
>4662	Identifier	pafUnifiedSrcDensity
>4663	Identifier	poWK
>4664	ExpressionStatement	 
>4665	AssignmentExpr	* piValue = pabySrc [ iSrcOffset ]
>4666	ArrayIndexing	pabySrc [ iSrcOffset ]
>4667	Identifier	iSrcOffset
>4668	Identifier	pabySrc
>4669	UnaryOp	* piValue
>4670	Identifier	piValue
>4671	UnaryOperator	*
>4672	IfStatement	if ( ( poWK -> panUnifiedSrcValid != NULL && ! ( ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( \
>4673	CompoundStatement	 
>4674	ReturnStatement	 
>4675	Identifier	FALSE
>4676	ExpressionStatement	 
>4677	AssignmentExpr	* pdfDensity = 0.0
>4678	PrimaryExpression	0.0
>4679	UnaryOp	* pdfDensity
>4680	Identifier	pdfDensity
>4681	UnaryOperator	*
>4682	Condition	 
>4683	OrExpression	( poWK -> panUnifiedSrcValid != NULL && ! ( ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( \
>4684	AndExpression	poWK -> papanBandSrcValid != NULL && poWK -> papanBandSrcValid [ iBand ] != NULL && ! ( ( poWK -> papanBandSrcValid [ \
>4685	AndExpression	poWK -> papanBandSrcValid [ iBand ] != NULL && ! ( ( poWK -> papanBandSrcValid [ iBand ] [ iSrcOffset >> \
>4686	UnaryOp	! ( ( poWK -> papanBandSrcValid [ iBand ] [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) ) ) )
>4687	BitAndExpression	poWK -> papanBandSrcValid [ iBand ] [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) )
>4688	ShiftExpression	0x01 << ( iSrcOffset & 0x1f )
>4689	BitAndExpression	iSrcOffset & 0x1f
>4690	PrimaryExpression	0x1f
>4691	Identifier	iSrcOffset
>4692	PrimaryExpression	0x01
>4693	ArrayIndexing	poWK -> papanBandSrcValid [ iBand ] [ iSrcOffset >> 5 ]
>4694	ShiftExpression	iSrcOffset >> 5
>4695	PrimaryExpression	5
>4696	Identifier	iSrcOffset
>4697	ArrayIndexing	poWK -> papanBandSrcValid [ iBand ]
>4698	Identifier	iBand
>4699	PtrMemberAccess	poWK -> papanBandSrcValid
>4700	Identifier	papanBandSrcValid
>4701	Identifier	poWK
>4702	UnaryOperator	!
>4703	EqualityExpression	poWK -> papanBandSrcValid [ iBand ] != NULL
>4704	Identifier	NULL
>4705	ArrayIndexing	poWK -> papanBandSrcValid [ iBand ]
>4706	Identifier	iBand
>4707	PtrMemberAccess	poWK -> papanBandSrcValid
>4708	Identifier	papanBandSrcValid
>4709	Identifier	poWK
>4710	EqualityExpression	poWK -> papanBandSrcValid != NULL
>4711	Identifier	NULL
>4712	PtrMemberAccess	poWK -> papanBandSrcValid
>4713	Identifier	papanBandSrcValid
>4714	Identifier	poWK
>4715	AndExpression	poWK -> panUnifiedSrcValid != NULL && ! ( ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( \
>4716	UnaryOp	! ( ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) ) ) )
>4717	BitAndExpression	poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) )
>4718	ShiftExpression	0x01 << ( iSrcOffset & 0x1f )
>4719	BitAndExpression	iSrcOffset & 0x1f
>4720	PrimaryExpression	0x1f
>4721	Identifier	iSrcOffset
>4722	PrimaryExpression	0x01
>4723	ArrayIndexing	poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ]
>4724	ShiftExpression	iSrcOffset >> 5
>4725	PrimaryExpression	5
>4726	Identifier	iSrcOffset
>4727	PtrMemberAccess	poWK -> panUnifiedSrcValid
>4728	Identifier	panUnifiedSrcValid
>4729	Identifier	poWK
>4730	UnaryOperator	!
>4731	EqualityExpression	poWK -> panUnifiedSrcValid != NULL
>4732	Identifier	NULL
>4733	PtrMemberAccess	poWK -> panUnifiedSrcValid
>4734	Identifier	panUnifiedSrcValid
>4735	Identifier	poWK
>4736	IdentifierDeclStatement	 
>4737	IdentifierDecl	* pabySrc = ( GInt16 * ) poWK -> papabySrcImage [ iBand ]
>4738	AssignmentExpr	* pabySrc = ( GInt16 * ) poWK -> papabySrcImage [ iBand ]
>4739	CastExpression	( GInt16 * ) poWK -> papabySrcImage [ iBand ]
>4740	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>4741	Identifier	iBand
>4742	PtrMemberAccess	poWK -> papabySrcImage
>4743	Identifier	papabySrcImage
>4744	Identifier	poWK
>4745	CastTarget	GInt16 *
>4746	Identifier	pabySrc
>4747	Identifier	pabySrc
>4748	IdentifierDeclType	GInt16 *
>4778	FunctionDef	GWKGetPixelFloat (GDALWarpKernel * poWK , int iBand , int iSrcOffset , double * pdfDensity , float * pfValue)
>4779	ParameterList	GDALWarpKernel * poWK , int iBand , int iSrcOffset , double * pdfDensity , float * pfValue
>4780	Parameter	 
>4781	Identifier	pfValue
>4782	ParameterType	float *
>4783	Parameter	 
>4784	Identifier	pdfDensity
>4785	ParameterType	double *
>4786	Parameter	 
>4787	Identifier	iSrcOffset
>4788	ParameterType	int
>4789	Parameter	 
>4790	Identifier	iBand
>4791	ParameterType	int
>4792	Parameter	 
>4793	Identifier	poWK
>4794	ParameterType	GDALWarpKernel *
>4795	ReturnType	static int
>4796	CompoundStatement	 
>4797	ReturnStatement	 
>4798	EqualityExpression	* pdfDensity != 0.0
>4799	PrimaryExpression	0.0
>4800	UnaryOp	* pdfDensity
>4801	Identifier	pdfDensity
>4802	UnaryOperator	*
>4803	IfStatement	if ( poWK -> pafUnifiedSrcDensity == NULL )
>4804	ElseStatement	else
>4805	ExpressionStatement	 
>4806	AssignmentExpr	* pdfDensity = poWK -> pafUnifiedSrcDensity [ iSrcOffset ]
>4807	ArrayIndexing	poWK -> pafUnifiedSrcDensity [ iSrcOffset ]
>4808	Identifier	iSrcOffset
>4809	PtrMemberAccess	poWK -> pafUnifiedSrcDensity
>4810	Identifier	pafUnifiedSrcDensity
>4811	Identifier	poWK
>4812	UnaryOp	* pdfDensity
>4813	Identifier	pdfDensity
>4814	UnaryOperator	*
>4815	ExpressionStatement	 
>4816	AssignmentExpr	* pdfDensity = 1.0
>4817	PrimaryExpression	1.0
>4818	UnaryOp	* pdfDensity
>4819	Identifier	pdfDensity
>4820	UnaryOperator	*
>4821	Condition	 
>4822	EqualityExpression	poWK -> pafUnifiedSrcDensity == NULL
>4823	Identifier	NULL
>4824	PtrMemberAccess	poWK -> pafUnifiedSrcDensity
>4825	Identifier	pafUnifiedSrcDensity
>4826	Identifier	poWK
>4827	ExpressionStatement	 
>4828	AssignmentExpr	* pfValue = pabySrc [ iSrcOffset ]
>4829	ArrayIndexing	pabySrc [ iSrcOffset ]
>4830	Identifier	iSrcOffset
>4831	Identifier	pabySrc
>4832	UnaryOp	* pfValue
>4833	Identifier	pfValue
>4834	UnaryOperator	*
>4835	IfStatement	if ( ( poWK -> panUnifiedSrcValid != NULL && ! ( ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( \
>4836	CompoundStatement	 
>4837	ReturnStatement	 
>4838	Identifier	FALSE
>4839	ExpressionStatement	 
>4840	AssignmentExpr	* pdfDensity = 0.0
>4841	PrimaryExpression	0.0
>4842	UnaryOp	* pdfDensity
>4843	Identifier	pdfDensity
>4844	UnaryOperator	*
>4845	Condition	 
>4846	OrExpression	( poWK -> panUnifiedSrcValid != NULL && ! ( ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( \
>4847	AndExpression	poWK -> papanBandSrcValid != NULL && poWK -> papanBandSrcValid [ iBand ] != NULL && ! ( ( poWK -> papanBandSrcValid [ \
>4848	AndExpression	poWK -> papanBandSrcValid [ iBand ] != NULL && ! ( ( poWK -> papanBandSrcValid [ iBand ] [ iSrcOffset >> \
>4849	UnaryOp	! ( ( poWK -> papanBandSrcValid [ iBand ] [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) ) ) )
>4850	BitAndExpression	poWK -> papanBandSrcValid [ iBand ] [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) )
>4851	ShiftExpression	0x01 << ( iSrcOffset & 0x1f )
>4852	BitAndExpression	iSrcOffset & 0x1f
>4853	PrimaryExpression	0x1f
>4854	Identifier	iSrcOffset
>4855	PrimaryExpression	0x01
>4856	ArrayIndexing	poWK -> papanBandSrcValid [ iBand ] [ iSrcOffset >> 5 ]
>4857	ShiftExpression	iSrcOffset >> 5
>4858	PrimaryExpression	5
>4859	Identifier	iSrcOffset
>4860	ArrayIndexing	poWK -> papanBandSrcValid [ iBand ]
>4861	Identifier	iBand
>4862	PtrMemberAccess	poWK -> papanBandSrcValid
>4863	Identifier	papanBandSrcValid
>4864	Identifier	poWK
>4865	UnaryOperator	!
>4866	EqualityExpression	poWK -> papanBandSrcValid [ iBand ] != NULL
>4867	Identifier	NULL
>4868	ArrayIndexing	poWK -> papanBandSrcValid [ iBand ]
>4869	Identifier	iBand
>4870	PtrMemberAccess	poWK -> papanBandSrcValid
>4871	Identifier	papanBandSrcValid
>4872	Identifier	poWK
>4873	EqualityExpression	poWK -> papanBandSrcValid != NULL
>4874	Identifier	NULL
>4875	PtrMemberAccess	poWK -> papanBandSrcValid
>4876	Identifier	papanBandSrcValid
>4877	Identifier	poWK
>4878	AndExpression	poWK -> panUnifiedSrcValid != NULL && ! ( ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( \
>4879	UnaryOp	! ( ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) ) ) )
>4880	BitAndExpression	poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) )
>4881	ShiftExpression	0x01 << ( iSrcOffset & 0x1f )
>4882	BitAndExpression	iSrcOffset & 0x1f
>4883	PrimaryExpression	0x1f
>4884	Identifier	iSrcOffset
>4885	PrimaryExpression	0x01
>4886	ArrayIndexing	poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ]
>4887	ShiftExpression	iSrcOffset >> 5
>4888	PrimaryExpression	5
>4889	Identifier	iSrcOffset
>4890	PtrMemberAccess	poWK -> panUnifiedSrcValid
>4891	Identifier	panUnifiedSrcValid
>4892	Identifier	poWK
>4893	UnaryOperator	!
>4894	EqualityExpression	poWK -> panUnifiedSrcValid != NULL
>4895	Identifier	NULL
>4896	PtrMemberAccess	poWK -> panUnifiedSrcValid
>4897	Identifier	panUnifiedSrcValid
>4898	Identifier	poWK
>4899	IdentifierDeclStatement	 
>4900	IdentifierDecl	* pabySrc = ( float * ) poWK -> papabySrcImage [ iBand ]
>4901	AssignmentExpr	* pabySrc = ( float * ) poWK -> papabySrcImage [ iBand ]
>4902	CastExpression	( float * ) poWK -> papabySrcImage [ iBand ]
>4903	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>4904	Identifier	iBand
>4905	PtrMemberAccess	poWK -> papabySrcImage
>4906	Identifier	papabySrcImage
>4907	Identifier	poWK
>4908	CastTarget	float *
>4909	Identifier	pabySrc
>4910	Identifier	pabySrc
>4911	IdentifierDeclType	float *
>4941	FunctionDef	GWKBilinearResample (GDALWarpKernel * poWK , int iBand , double dfSrcX , double dfSrcY , double * pdfDensity , double * \
>4942	ParameterList	GDALWarpKernel * poWK , int iBand , double dfSrcX , double dfSrcY , double * pdfDensity , double * pdfReal , double * \
>4943	Parameter	 
>4944	Identifier	pdfImag
>4945	ParameterType	double *
>4946	Parameter	 
>4947	Identifier	pdfReal
>4948	ParameterType	double *
>4949	Parameter	 
>4950	Identifier	pdfDensity
>4951	ParameterType	double *
>4952	Parameter	 
>4953	Identifier	dfSrcY
>4954	ParameterType	double
>4955	Parameter	 
>4956	Identifier	dfSrcX
>4957	ParameterType	double
>4958	Parameter	 
>4959	Identifier	iBand
>4960	ParameterType	int
>4961	Parameter	 
>4962	Identifier	poWK
>4963	ParameterType	GDALWarpKernel *
>4964	ReturnType	static int
>4965	CompoundStatement	 
>4966	IfStatement	if ( dfAccumulatorDivisor == 1.0 )
>4967	ElseStatement	else
>4968	IfStatement	if ( dfAccumulatorDivisor < 0.00001 )
>4969	ElseStatement	else
>4970	CompoundStatement	 
>4971	ReturnStatement	 
>4972	Identifier	TRUE
>4973	ExpressionStatement	 
>4974	AssignmentExpr	* pdfDensity = dfAccumulatorDensity / dfAccumulatorDivisor
>4975	MultiplicativeExpression	dfAccumulatorDensity / dfAccumulatorDivisor
>4976	Identifier	dfAccumulatorDivisor
>4977	Identifier	dfAccumulatorDensity
>4978	UnaryOp	* pdfDensity
>4979	Identifier	pdfDensity
>4980	UnaryOperator	*
>4981	ExpressionStatement	 
>4982	AssignmentExpr	* pdfImag = dfAccumulatorImag / dfAccumulatorDivisor
>4983	MultiplicativeExpression	dfAccumulatorImag / dfAccumulatorDivisor
>4984	Identifier	dfAccumulatorDivisor
>4985	Identifier	dfAccumulatorImag
>4986	UnaryOp	* pdfImag
>4987	Identifier	pdfImag
>4988	UnaryOperator	*
>4989	ExpressionStatement	 
>4990	AssignmentExpr	* pdfReal = dfAccumulatorReal / dfAccumulatorDivisor
>4991	MultiplicativeExpression	dfAccumulatorReal / dfAccumulatorDivisor
>4992	Identifier	dfAccumulatorDivisor
>4993	Identifier	dfAccumulatorReal
>4994	UnaryOp	* pdfReal
>4995	Identifier	pdfReal
>4996	UnaryOperator	*
>4997	CompoundStatement	 
>4998	ReturnStatement	 
>4999	Identifier	FALSE
>5000	ExpressionStatement	 
>5001	AssignmentExpr	* pdfDensity = 0.0
>5002	PrimaryExpression	0.0
>5003	UnaryOp	* pdfDensity
>5004	Identifier	pdfDensity
>5005	UnaryOperator	*
>5006	ExpressionStatement	 
>5007	AssignmentExpr	* pdfImag = 0.0
>5008	PrimaryExpression	0.0
>5009	UnaryOp	* pdfImag
>5010	Identifier	pdfImag
>5011	UnaryOperator	*
>5012	ExpressionStatement	 
>5013	AssignmentExpr	* pdfReal = 0.0
>5014	PrimaryExpression	0.0
>5015	UnaryOp	* pdfReal
>5016	Identifier	pdfReal
>5017	UnaryOperator	*
>5018	Condition	 
>5019	RelationalExpression	dfAccumulatorDivisor < 0.00001
>5020	PrimaryExpression	0.00001
>5021	Identifier	dfAccumulatorDivisor
>5022	CompoundStatement	 
>5023	ReturnStatement	 
>5024	Identifier	TRUE
>5025	ExpressionStatement	 
>5026	AssignmentExpr	* pdfDensity = dfAccumulatorDensity
>5027	Identifier	dfAccumulatorDensity
>5028	UnaryOp	* pdfDensity
>5029	Identifier	pdfDensity
>5030	UnaryOperator	*
>5031	ExpressionStatement	 
>5032	AssignmentExpr	* pdfImag = dfAccumulatorImag
>5033	Identifier	dfAccumulatorImag
>5034	UnaryOp	* pdfImag
>5035	Identifier	pdfImag
>5036	UnaryOperator	*
>5037	ExpressionStatement	 
>5038	AssignmentExpr	* pdfReal = dfAccumulatorReal
>5039	Identifier	dfAccumulatorReal
>5040	UnaryOp	* pdfReal
>5041	Identifier	pdfReal
>5042	UnaryOperator	*
>5043	Condition	 
>5044	EqualityExpression	dfAccumulatorDivisor == 1.0
>5045	PrimaryExpression	1.0
>5046	Identifier	dfAccumulatorDivisor
>5047	IfStatement	if ( iSrcY + 1 >= 0 && iSrcY + 1 < nSrcYSize && iSrcOffset + nSrcXSize >= 0 && iSrcOffset + nSrcXSize < nSrcXSize * \
>5048	CompoundStatement	 
>5049	IfStatement	if ( iSrcX + 1 >= 0 && iSrcX + 1 < nSrcXSize && adfDensity [ 1 ] > 0.000000001 )
>5050	CompoundStatement	 
>5051	ExpressionStatement	 
>5052	AssignmentExpr	dfAccumulatorDensity += adfDensity [ 1 ] * dfMult2
>5053	MultiplicativeExpression	adfDensity [ 1 ] * dfMult2
>5054	Identifier	dfMult2
>5055	ArrayIndexing	adfDensity [ 1 ]
>5056	PrimaryExpression	1
>5057	Identifier	adfDensity
>5058	Identifier	dfAccumulatorDensity
>5059	ExpressionStatement	 
>5060	AssignmentExpr	dfAccumulatorImag += adfImag [ 1 ] * dfMult2
>5061	MultiplicativeExpression	adfImag [ 1 ] * dfMult2
>5062	Identifier	dfMult2
>5063	ArrayIndexing	adfImag [ 1 ]
>5064	PrimaryExpression	1
>5065	Identifier	adfImag
>5066	Identifier	dfAccumulatorImag
>5067	ExpressionStatement	 
>5068	AssignmentExpr	dfAccumulatorReal += adfReal [ 1 ] * dfMult2
>5069	MultiplicativeExpression	adfReal [ 1 ] * dfMult2
>5070	Identifier	dfMult2
>5071	ArrayIndexing	adfReal [ 1 ]
>5072	PrimaryExpression	1
>5073	Identifier	adfReal
>5074	Identifier	dfAccumulatorReal
>5075	ExpressionStatement	 
>5076	AssignmentExpr	dfAccumulatorDivisor += dfMult2
>5077	Identifier	dfMult2
>5078	Identifier	dfAccumulatorDivisor
>5079	Condition	 
>5080	AndExpression	iSrcX + 1 >= 0 && iSrcX + 1 < nSrcXSize && adfDensity [ 1 ] > 0.000000001
>5081	AndExpression	iSrcX + 1 < nSrcXSize && adfDensity [ 1 ] > 0.000000001
>5082	RelationalExpression	adfDensity [ 1 ] > 0.000000001
>5083	PrimaryExpression	0.000000001
>5084	ArrayIndexing	adfDensity [ 1 ]
>5085	PrimaryExpression	1
>5086	Identifier	adfDensity
>5087	RelationalExpression	iSrcX + 1 < nSrcXSize
>5088	Identifier	nSrcXSize
>5089	AdditiveExpression	iSrcX + 1
>5090	PrimaryExpression	1
>5091	Identifier	iSrcX
>5092	RelationalExpression	iSrcX + 1 >= 0
>5093	PrimaryExpression	0
>5094	AdditiveExpression	iSrcX + 1
>5095	PrimaryExpression	1
>5096	Identifier	iSrcX
>5097	IfStatement	if ( iSrcX >= 0 && iSrcX < nSrcXSize && adfDensity [ 0 ] > 0.000000001 )
>5098	CompoundStatement	 
>5099	ExpressionStatement	 
>5100	AssignmentExpr	dfAccumulatorDensity += adfDensity [ 0 ] * dfMult1
>5101	MultiplicativeExpression	adfDensity [ 0 ] * dfMult1
>5102	Identifier	dfMult1
>5103	ArrayIndexing	adfDensity [ 0 ]
>5104	PrimaryExpression	0
>5105	Identifier	adfDensity
>5106	Identifier	dfAccumulatorDensity
>5107	ExpressionStatement	 
>5108	AssignmentExpr	dfAccumulatorImag += adfImag [ 0 ] * dfMult1
>5109	MultiplicativeExpression	adfImag [ 0 ] * dfMult1
>5110	Identifier	dfMult1
>5111	ArrayIndexing	adfImag [ 0 ]
>5112	PrimaryExpression	0
>5113	Identifier	adfImag
>5114	Identifier	dfAccumulatorImag
>5115	ExpressionStatement	 
>5116	AssignmentExpr	dfAccumulatorReal += adfReal [ 0 ] * dfMult1
>5117	MultiplicativeExpression	adfReal [ 0 ] * dfMult1
>5118	Identifier	dfMult1
>5119	ArrayIndexing	adfReal [ 0 ]
>5120	PrimaryExpression	0
>5121	Identifier	adfReal
>5122	Identifier	dfAccumulatorReal
>5123	ExpressionStatement	 
>5124	AssignmentExpr	dfAccumulatorDivisor += dfMult1
>5125	Identifier	dfMult1
>5126	Identifier	dfAccumulatorDivisor
>5127	Condition	 
>5128	AndExpression	iSrcX >= 0 && iSrcX < nSrcXSize && adfDensity [ 0 ] > 0.000000001
>5129	AndExpression	iSrcX < nSrcXSize && adfDensity [ 0 ] > 0.000000001
>5130	RelationalExpression	adfDensity [ 0 ] > 0.000000001
>5131	PrimaryExpression	0.000000001
>5132	ArrayIndexing	adfDensity [ 0 ]
>5133	PrimaryExpression	0
>5134	Identifier	adfDensity
>5135	RelationalExpression	iSrcX < nSrcXSize
>5136	Identifier	nSrcXSize
>5137	Identifier	iSrcX
>5138	RelationalExpression	iSrcX >= 0
>5139	PrimaryExpression	0
>5140	Identifier	iSrcX
>5141	IfStatement	if ( bShifted )
>5142	CompoundStatement	 
>5143	ExpressionStatement	 
>5144	AssignmentExpr	adfDensity [ 0 ] = adfDensity [ 1 ]
>5145	ArrayIndexing	adfDensity [ 1 ]
>5146	PrimaryExpression	1
>5147	Identifier	adfDensity
>5148	ArrayIndexing	adfDensity [ 0 ]
>5149	PrimaryExpression	0
>5150	Identifier	adfDensity
>5151	ExpressionStatement	 
>5152	AssignmentExpr	adfImag [ 0 ] = adfImag [ 1 ]
>5153	ArrayIndexing	adfImag [ 1 ]
>5154	PrimaryExpression	1
>5155	Identifier	adfImag
>5156	ArrayIndexing	adfImag [ 0 ]
>5157	PrimaryExpression	0
>5158	Identifier	adfImag
>5159	ExpressionStatement	 
>5160	AssignmentExpr	adfReal [ 0 ] = adfReal [ 1 ]
>5161	ArrayIndexing	adfReal [ 1 ]
>5162	PrimaryExpression	1
>5163	Identifier	adfReal
>5164	ArrayIndexing	adfReal [ 0 ]
>5165	PrimaryExpression	0
>5166	Identifier	adfReal
>5167	Condition	 
>5168	Identifier	bShifted
>5169	IdentifierDeclStatement	 
>5170	IdentifierDecl	dfMult2 = ( 1.0 - dfRatioX ) * ( 1.0 - dfRatioY )
>5171	AssignmentExpr	dfMult2 = ( 1.0 - dfRatioX ) * ( 1.0 - dfRatioY )
>5172	MultiplicativeExpression	( 1.0 - dfRatioX ) * ( 1.0 - dfRatioY )
>5173	AdditiveExpression	1.0 - dfRatioY
>5174	Identifier	dfRatioY
>5175	PrimaryExpression	1.0
>5176	AdditiveExpression	1.0 - dfRatioX
>5177	Identifier	dfRatioX
>5178	PrimaryExpression	1.0
>5179	Identifier	dfMult2
>5180	Identifier	dfMult2
>5181	IdentifierDeclType	double
>5182	IdentifierDeclStatement	 
>5183	IdentifierDecl	dfMult1 = dfRatioX * ( 1.0 - dfRatioY )
>5184	AssignmentExpr	dfMult1 = dfRatioX * ( 1.0 - dfRatioY )
>5185	MultiplicativeExpression	dfRatioX * ( 1.0 - dfRatioY )
>5186	AdditiveExpression	1.0 - dfRatioY
>5187	Identifier	dfRatioY
>5188	PrimaryExpression	1.0
>5189	Identifier	dfRatioX
>5190	Identifier	dfMult1
>5191	Identifier	dfMult1
>5192	IdentifierDeclType	double
>5193	Condition	 
>5194	AndExpression	iSrcY + 1 >= 0 && iSrcY + 1 < nSrcYSize && iSrcOffset + nSrcXSize >= 0 && iSrcOffset + nSrcXSize < nSrcXSize * \
>5195	AndExpression	iSrcY + 1 < nSrcYSize && iSrcOffset + nSrcXSize >= 0 && iSrcOffset + nSrcXSize < nSrcXSize * nSrcYSize && \
>5196	AndExpression	iSrcOffset + nSrcXSize >= 0 && iSrcOffset + nSrcXSize < nSrcXSize * nSrcYSize && GWKGetPixelRow ( poWK , \
>5197	AndExpression	iSrcOffset + nSrcXSize < nSrcXSize * nSrcYSize && GWKGetPixelRow ( poWK , iBand , iSrcOffset + nSrcXSize , \
>5198	CallExpression	GWKGetPixelRow ( poWK , iBand , iSrcOffset + nSrcXSize , 1 , adfDensity , adfReal , adfImag )
>5199	ArgumentList	poWK
>5200	Argument	adfImag
>5201	Identifier	adfImag
>5202	Argument	adfReal
>5203	Identifier	adfReal
>5204	Argument	adfDensity
>5205	Identifier	adfDensity
>5206	Argument	1
>5207	PrimaryExpression	1
>5208	Argument	iSrcOffset + nSrcXSize
>5209	AdditiveExpression	iSrcOffset + nSrcXSize
>5210	Identifier	nSrcXSize
>5211	Identifier	iSrcOffset
>5212	Argument	iBand
>5213	Identifier	iBand
>5214	Argument	poWK
>5215	Identifier	poWK
>5216	Callee	GWKGetPixelRow
>5217	Identifier	GWKGetPixelRow
>5218	RelationalExpression	iSrcOffset + nSrcXSize < nSrcXSize * nSrcYSize
>5219	MultiplicativeExpression	nSrcXSize * nSrcYSize
>5220	Identifier	nSrcYSize
>5221	Identifier	nSrcXSize
>5222	AdditiveExpression	iSrcOffset + nSrcXSize
>5223	Identifier	nSrcXSize
>5224	Identifier	iSrcOffset
>5225	RelationalExpression	iSrcOffset + nSrcXSize >= 0
>5226	PrimaryExpression	0
>5227	AdditiveExpression	iSrcOffset + nSrcXSize
>5228	Identifier	nSrcXSize
>5229	Identifier	iSrcOffset
>5230	RelationalExpression	iSrcY + 1 < nSrcYSize
>5231	Identifier	nSrcYSize
>5232	AdditiveExpression	iSrcY + 1
>5233	PrimaryExpression	1
>5234	Identifier	iSrcY
>5235	RelationalExpression	iSrcY + 1 >= 0
>5236	PrimaryExpression	0
>5237	AdditiveExpression	iSrcY + 1
>5238	PrimaryExpression	1
>5239	Identifier	iSrcY
>5240	IfStatement	if ( iSrcY >= 0 && iSrcY < nSrcYSize && iSrcOffset >= 0 && iSrcOffset < nSrcXSize * nSrcYSize && GWKGetPixelRow ( \
>5241	CompoundStatement	 
>5242	IfStatement	if ( iSrcX + 1 >= 0 && iSrcX + 1 < nSrcXSize && adfDensity [ 1 ] > 0.000000001 )
>5243	CompoundStatement	 
>5244	ExpressionStatement	 
>5245	AssignmentExpr	dfAccumulatorDensity += adfDensity [ 1 ] * dfMult2
>5246	MultiplicativeExpression	adfDensity [ 1 ] * dfMult2
>5247	Identifier	dfMult2
>5248	ArrayIndexing	adfDensity [ 1 ]
>5249	PrimaryExpression	1
>5250	Identifier	adfDensity
>5251	Identifier	dfAccumulatorDensity
>5252	ExpressionStatement	 
>5253	AssignmentExpr	dfAccumulatorImag += adfImag [ 1 ] * dfMult2
>5254	MultiplicativeExpression	adfImag [ 1 ] * dfMult2
>5255	Identifier	dfMult2
>5256	ArrayIndexing	adfImag [ 1 ]
>5257	PrimaryExpression	1
>5258	Identifier	adfImag
>5259	Identifier	dfAccumulatorImag
>5260	ExpressionStatement	 
>5261	AssignmentExpr	dfAccumulatorReal += adfReal [ 1 ] * dfMult2
>5262	MultiplicativeExpression	adfReal [ 1 ] * dfMult2
>5263	Identifier	dfMult2
>5264	ArrayIndexing	adfReal [ 1 ]
>5265	PrimaryExpression	1
>5266	Identifier	adfReal
>5267	Identifier	dfAccumulatorReal
>5268	ExpressionStatement	 
>5269	AssignmentExpr	dfAccumulatorDivisor += dfMult2
>5270	Identifier	dfMult2
>5271	Identifier	dfAccumulatorDivisor
>5272	Condition	 
>5273	AndExpression	iSrcX + 1 >= 0 && iSrcX + 1 < nSrcXSize && adfDensity [ 1 ] > 0.000000001
>5274	AndExpression	iSrcX + 1 < nSrcXSize && adfDensity [ 1 ] > 0.000000001
>5275	RelationalExpression	adfDensity [ 1 ] > 0.000000001
>5276	PrimaryExpression	0.000000001
>5277	ArrayIndexing	adfDensity [ 1 ]
>5278	PrimaryExpression	1
>5279	Identifier	adfDensity
>5280	RelationalExpression	iSrcX + 1 < nSrcXSize
>5281	Identifier	nSrcXSize
>5282	AdditiveExpression	iSrcX + 1
>5283	PrimaryExpression	1
>5284	Identifier	iSrcX
>5285	RelationalExpression	iSrcX + 1 >= 0
>5286	PrimaryExpression	0
>5287	AdditiveExpression	iSrcX + 1
>5288	PrimaryExpression	1
>5289	Identifier	iSrcX
>5290	IfStatement	if ( iSrcX >= 0 && iSrcX < nSrcXSize && adfDensity [ 0 ] > 0.000000001 )
>5291	CompoundStatement	 
>5292	ExpressionStatement	 
>5293	AssignmentExpr	dfAccumulatorDensity += adfDensity [ 0 ] * dfMult1
>5294	MultiplicativeExpression	adfDensity [ 0 ] * dfMult1
>5295	Identifier	dfMult1
>5296	ArrayIndexing	adfDensity [ 0 ]
>5297	PrimaryExpression	0
>5298	Identifier	adfDensity
>5299	Identifier	dfAccumulatorDensity
>5300	ExpressionStatement	 
>5301	AssignmentExpr	dfAccumulatorImag += adfImag [ 0 ] * dfMult1
>5302	MultiplicativeExpression	adfImag [ 0 ] * dfMult1
>5303	Identifier	dfMult1
>5304	ArrayIndexing	adfImag [ 0 ]
>5305	PrimaryExpression	0
>5306	Identifier	adfImag
>5307	Identifier	dfAccumulatorImag
>5308	ExpressionStatement	 
>5309	AssignmentExpr	dfAccumulatorReal += adfReal [ 0 ] * dfMult1
>5310	MultiplicativeExpression	adfReal [ 0 ] * dfMult1
>5311	Identifier	dfMult1
>5312	ArrayIndexing	adfReal [ 0 ]
>5313	PrimaryExpression	0
>5314	Identifier	adfReal
>5315	Identifier	dfAccumulatorReal
>5316	ExpressionStatement	 
>5317	AssignmentExpr	dfAccumulatorDivisor += dfMult1
>5318	Identifier	dfMult1
>5319	Identifier	dfAccumulatorDivisor
>5320	Condition	 
>5321	AndExpression	iSrcX >= 0 && iSrcX < nSrcXSize && adfDensity [ 0 ] > 0.000000001
>5322	AndExpression	iSrcX < nSrcXSize && adfDensity [ 0 ] > 0.000000001
>5323	RelationalExpression	adfDensity [ 0 ] > 0.000000001
>5324	PrimaryExpression	0.000000001
>5325	ArrayIndexing	adfDensity [ 0 ]
>5326	PrimaryExpression	0
>5327	Identifier	adfDensity
>5328	RelationalExpression	iSrcX < nSrcXSize
>5329	Identifier	nSrcXSize
>5330	Identifier	iSrcX
>5331	RelationalExpression	iSrcX >= 0
>5332	PrimaryExpression	0
>5333	Identifier	iSrcX
>5334	IfStatement	if ( bShifted )
>5335	CompoundStatement	 
>5336	ExpressionStatement	 
>5337	AssignmentExpr	adfDensity [ 0 ] = adfDensity [ 1 ]
>5338	ArrayIndexing	adfDensity [ 1 ]
>5339	PrimaryExpression	1
>5340	Identifier	adfDensity
>5341	ArrayIndexing	adfDensity [ 0 ]
>5342	PrimaryExpression	0
>5343	Identifier	adfDensity
>5344	ExpressionStatement	 
>5345	AssignmentExpr	adfImag [ 0 ] = adfImag [ 1 ]
>5346	ArrayIndexing	adfImag [ 1 ]
>5347	PrimaryExpression	1
>5348	Identifier	adfImag
>5349	ArrayIndexing	adfImag [ 0 ]
>5350	PrimaryExpression	0
>5351	Identifier	adfImag
>5352	ExpressionStatement	 
>5353	AssignmentExpr	adfReal [ 0 ] = adfReal [ 1 ]
>5354	ArrayIndexing	adfReal [ 1 ]
>5355	PrimaryExpression	1
>5356	Identifier	adfReal
>5357	ArrayIndexing	adfReal [ 0 ]
>5358	PrimaryExpression	0
>5359	Identifier	adfReal
>5360	Condition	 
>5361	Identifier	bShifted
>5362	IdentifierDeclStatement	 
>5363	IdentifierDecl	dfMult2 = ( 1.0 - dfRatioX ) * dfRatioY
>5364	AssignmentExpr	dfMult2 = ( 1.0 - dfRatioX ) * dfRatioY
>5365	MultiplicativeExpression	( 1.0 - dfRatioX ) * dfRatioY
>5366	Identifier	dfRatioY
>5367	AdditiveExpression	1.0 - dfRatioX
>5368	Identifier	dfRatioX
>5369	PrimaryExpression	1.0
>5370	Identifier	dfMult2
>5371	Identifier	dfMult2
>5372	IdentifierDeclType	double
>5373	IdentifierDeclStatement	 
>5374	IdentifierDecl	dfMult1 = dfRatioX * dfRatioY
>5375	AssignmentExpr	dfMult1 = dfRatioX * dfRatioY
>5376	MultiplicativeExpression	dfRatioX * dfRatioY
>5377	Identifier	dfRatioY
>5378	Identifier	dfRatioX
>5379	Identifier	dfMult1
>5380	Identifier	dfMult1
>5381	IdentifierDeclType	double
>5382	Condition	 
>5383	AndExpression	iSrcY >= 0 && iSrcY < nSrcYSize && iSrcOffset >= 0 && iSrcOffset < nSrcXSize * nSrcYSize && GWKGetPixelRow ( \
>5384	AndExpression	iSrcY < nSrcYSize && iSrcOffset >= 0 && iSrcOffset < nSrcXSize * nSrcYSize && GWKGetPixelRow ( poWK , \
>5385	AndExpression	iSrcOffset >= 0 && iSrcOffset < nSrcXSize * nSrcYSize && GWKGetPixelRow ( poWK , iBand , iSrcOffset , \
>5386	AndExpression	iSrcOffset < nSrcXSize * nSrcYSize && GWKGetPixelRow ( poWK , iBand , iSrcOffset , 1 , adfDensity , \
>5387	CallExpression	GWKGetPixelRow ( poWK , iBand , iSrcOffset , 1 , adfDensity , adfReal , adfImag )
>5388	ArgumentList	poWK
>5389	Argument	adfImag
>5390	Identifier	adfImag
>5391	Argument	adfReal
>5392	Identifier	adfReal
>5393	Argument	adfDensity
>5394	Identifier	adfDensity
>5395	Argument	1
>5396	PrimaryExpression	1
>5397	Argument	iSrcOffset
>5398	Identifier	iSrcOffset
>5399	Argument	iBand
>5400	Identifier	iBand
>5401	Argument	poWK
>5402	Identifier	poWK
>5403	Callee	GWKGetPixelRow
>5404	Identifier	GWKGetPixelRow
>5405	RelationalExpression	iSrcOffset < nSrcXSize * nSrcYSize
>5406	MultiplicativeExpression	nSrcXSize * nSrcYSize
>5407	Identifier	nSrcYSize
>5408	Identifier	nSrcXSize
>5409	Identifier	iSrcOffset
>5410	RelationalExpression	iSrcOffset >= 0
>5411	PrimaryExpression	0
>5412	Identifier	iSrcOffset
>5413	RelationalExpression	iSrcY < nSrcYSize
>5414	Identifier	nSrcYSize
>5415	Identifier	iSrcY
>5416	RelationalExpression	iSrcY >= 0
>5417	PrimaryExpression	0
>5418	Identifier	iSrcY
>5419	IfStatement	if ( nSrcXSize * nSrcYSize == iSrcOffset + 1 || nSrcXSize * nSrcYSize == iSrcOffset + nSrcXSize + 1 )
>5420	CompoundStatement	 
>5421	ExpressionStatement	 
>5422	UnaryExpression	-- iSrcOffset
>5423	Identifier	iSrcOffset
>5424	IncDec	--
>5425	ExpressionStatement	 
>5426	AssignmentExpr	bShifted = TRUE
>5427	Identifier	TRUE
>5428	Identifier	bShifted
>5429	Condition	 
>5430	OrExpression	nSrcXSize * nSrcYSize == iSrcOffset + 1 || nSrcXSize * nSrcYSize == iSrcOffset + nSrcXSize + 1
>5431	EqualityExpression	nSrcXSize * nSrcYSize == iSrcOffset + nSrcXSize + 1
>5432	AdditiveExpression	iSrcOffset + nSrcXSize + 1
>5433	AdditiveExpression	nSrcXSize + 1
>5434	PrimaryExpression	1
>5435	Identifier	nSrcXSize
>5436	Identifier	iSrcOffset
>5437	MultiplicativeExpression	nSrcXSize * nSrcYSize
>5438	Identifier	nSrcYSize
>5439	Identifier	nSrcXSize
>5440	EqualityExpression	nSrcXSize * nSrcYSize == iSrcOffset + 1
>5441	AdditiveExpression	iSrcOffset + 1
>5442	PrimaryExpression	1
>5443	Identifier	iSrcOffset
>5444	MultiplicativeExpression	nSrcXSize * nSrcYSize
>5445	Identifier	nSrcYSize
>5446	Identifier	nSrcXSize
>5447	ExpressionStatement	 
>5448	AssignmentExpr	iSrcOffset = iSrcX + iSrcY * nSrcXSize
>5449	AdditiveExpression	iSrcX + iSrcY * nSrcXSize
>5450	MultiplicativeExpression	iSrcY * nSrcXSize
>5451	Identifier	nSrcXSize
>5452	Identifier	iSrcY
>5453	Identifier	iSrcX
>5454	Identifier	iSrcOffset
>5455	IfStatement	if ( iSrcY == - 1 )
>5456	CompoundStatement	 
>5457	ExpressionStatement	 
>5458	AssignmentExpr	dfRatioY = 1
>5459	PrimaryExpression	1
>5460	Identifier	dfRatioY
>5461	ExpressionStatement	 
>5462	AssignmentExpr	iSrcY = 0
>5463	PrimaryExpression	0
>5464	Identifier	iSrcY
>5465	Condition	 
>5466	EqualityExpression	iSrcY == - 1
>5467	UnaryOp	- 1
>5468	PrimaryExpression	1
>5469	UnaryOperator	-
>5470	Identifier	iSrcY
>5471	IfStatement	if ( iSrcX == - 1 )
>5472	CompoundStatement	 
>5473	ExpressionStatement	 
>5474	AssignmentExpr	dfRatioX = 1
>5475	PrimaryExpression	1
>5476	Identifier	dfRatioX
>5477	ExpressionStatement	 
>5478	AssignmentExpr	iSrcX = 0
>5479	PrimaryExpression	0
>5480	Identifier	iSrcX
>5481	Condition	 
>5482	EqualityExpression	iSrcX == - 1
>5483	UnaryOp	- 1
>5484	PrimaryExpression	1
>5485	UnaryOperator	-
>5486	Identifier	iSrcX
>5487	IdentifierDeclStatement	 
>5488	IdentifierDecl	bShifted = FALSE
>5489	AssignmentExpr	bShifted = FALSE
>5490	Identifier	FALSE
>5491	Identifier	FALSE
>5492	Identifier	bShifted
>5493	IdentifierDeclType	int
>5494	IdentifierDeclStatement	 
>5495	IdentifierDecl	dfAccumulatorDivisor = 0.0
>5496	AssignmentExpr	dfAccumulatorDivisor = 0.0
>5497	PrimaryExpression	0.0
>5498	Identifier	dfAccumulatorDivisor
>5499	Identifier	dfAccumulatorDivisor
>5500	IdentifierDeclType	double
>5501	IdentifierDeclStatement	 
>5502	IdentifierDecl	dfAccumulatorDensity = 0.0
>5503	AssignmentExpr	dfAccumulatorDensity = 0.0
>5504	PrimaryExpression	0.0
>5505	Identifier	dfAccumulatorDensity
>5506	Identifier	dfAccumulatorDensity
>5507	IdentifierDeclType	double
>5508	IdentifierDeclStatement	 
>5509	IdentifierDecl	dfAccumulatorImag = 0.0
>5510	AssignmentExpr	dfAccumulatorImag = 0.0
>5511	PrimaryExpression	0.0
>5512	Identifier	dfAccumulatorImag
>5513	Identifier	dfAccumulatorImag
>5514	IdentifierDeclType	double
>5515	IdentifierDecl	dfAccumulatorReal = 0.0
>5516	AssignmentExpr	dfAccumulatorReal = 0.0
>5517	PrimaryExpression	0.0
>5518	Identifier	dfAccumulatorReal
>5519	Identifier	dfAccumulatorReal
>5520	IdentifierDeclType	double
>5521	IdentifierDeclStatement	 
>5522	IdentifierDecl	adfImag [ 2 ] = { 0 , 0 }
>5523	AssignmentExpr	adfImag [ 2 ] = { 0 , 0 }
>5524	InitializerList	0
>5525	PrimaryExpression	0
>5526	PrimaryExpression	0
>5527	Identifier	adfImag
>5528	PrimaryExpression	2
>5529	Identifier	adfImag
>5530	IdentifierDeclType	double [ 2 ]
>5531	IdentifierDecl	adfReal [ 2 ]
>5532	PrimaryExpression	2
>5533	Identifier	adfReal
>5534	IdentifierDeclType	double [ 2 ]
>5535	IdentifierDecl	adfDensity [ 2 ]
>5536	PrimaryExpression	2
>5537	Identifier	adfDensity
>5538	IdentifierDeclType	double [ 2 ]
>5539	IdentifierDeclStatement	 
>5540	IdentifierDecl	dfRatioY = 1.5 - ( dfSrcY - iSrcY )
>5541	AssignmentExpr	dfRatioY = 1.5 - ( dfSrcY - iSrcY )
>5542	AdditiveExpression	1.5 - ( dfSrcY - iSrcY )
>5543	AdditiveExpression	dfSrcY - iSrcY
>5544	Identifier	iSrcY
>5545	Identifier	dfSrcY
>5546	PrimaryExpression	1.5
>5547	Identifier	dfRatioY
>5548	Identifier	dfRatioY
>5549	IdentifierDeclType	double
>5550	IdentifierDeclStatement	 
>5551	IdentifierDecl	dfRatioX = 1.5 - ( dfSrcX - iSrcX )
>5552	AssignmentExpr	dfRatioX = 1.5 - ( dfSrcX - iSrcX )
>5553	AdditiveExpression	1.5 - ( dfSrcX - iSrcX )
>5554	AdditiveExpression	dfSrcX - iSrcX
>5555	Identifier	iSrcX
>5556	Identifier	dfSrcX
>5557	PrimaryExpression	1.5
>5558	Identifier	dfRatioX
>5559	Identifier	dfRatioX
>5560	IdentifierDeclType	double
>5561	IdentifierDeclStatement	 
>5562	IdentifierDecl	iSrcOffset
>5563	Identifier	iSrcOffset
>5564	IdentifierDeclType	int
>5565	IdentifierDeclStatement	 
>5566	IdentifierDecl	iSrcY = ( int ) floor ( dfSrcY - 0.5 )
>5567	AssignmentExpr	iSrcY = ( int ) floor ( dfSrcY - 0.5 )
>5568	CastExpression	( int ) floor ( dfSrcY - 0.5 )
>5569	CallExpression	floor ( dfSrcY - 0.5 )
>5570	ArgumentList	dfSrcY - 0.5
>5571	Argument	dfSrcY - 0.5
>5572	AdditiveExpression	dfSrcY - 0.5
>5573	PrimaryExpression	0.5
>5574	Identifier	dfSrcY
>5575	Callee	floor
>5576	Identifier	floor
>5577	CastTarget	int
>5578	Identifier	iSrcY
>5579	Identifier	iSrcY
>5580	IdentifierDeclType	int
>5581	IdentifierDeclStatement	 
>5582	IdentifierDecl	iSrcX = ( int ) floor ( dfSrcX - 0.5 )
>5583	AssignmentExpr	iSrcX = ( int ) floor ( dfSrcX - 0.5 )
>5584	CastExpression	( int ) floor ( dfSrcX - 0.5 )
>5585	CallExpression	floor ( dfSrcX - 0.5 )
>5586	ArgumentList	dfSrcX - 0.5
>5587	Argument	dfSrcX - 0.5
>5588	AdditiveExpression	dfSrcX - 0.5
>5589	PrimaryExpression	0.5
>5590	Identifier	dfSrcX
>5591	Callee	floor
>5592	Identifier	floor
>5593	CastTarget	int
>5594	Identifier	iSrcX
>5595	Identifier	iSrcX
>5596	IdentifierDeclType	int
>5597	IdentifierDeclStatement	 
>5598	IdentifierDecl	nSrcYSize = poWK -> nSrcYSize
>5599	AssignmentExpr	nSrcYSize = poWK -> nSrcYSize
>5600	PtrMemberAccess	poWK -> nSrcYSize
>5601	Identifier	nSrcYSize
>5602	Identifier	poWK
>5603	Identifier	nSrcYSize
>5604	Identifier	nSrcYSize
>5605	IdentifierDeclType	int
>5606	IdentifierDeclStatement	 
>5607	IdentifierDecl	nSrcXSize = poWK -> nSrcXSize
>5608	AssignmentExpr	nSrcXSize = poWK -> nSrcXSize
>5609	PtrMemberAccess	poWK -> nSrcXSize
>5610	Identifier	nSrcXSize
>5611	Identifier	poWK
>5612	Identifier	nSrcXSize
>5613	Identifier	nSrcXSize
>5614	IdentifierDeclType	int
>5655	FunctionDef	GWKBilinearResampleNoMasksByte (GDALWarpKernel * poWK , int iBand , double dfSrcX , double dfSrcY , GByte * pbValue)
>5656	ParameterList	GDALWarpKernel * poWK , int iBand , double dfSrcX , double dfSrcY , GByte * pbValue
>5657	Parameter	 
>5658	Identifier	pbValue
>5659	ParameterType	GByte *
>5660	Parameter	 
>5661	Identifier	dfSrcY
>5662	ParameterType	double
>5663	Parameter	 
>5664	Identifier	dfSrcX
>5665	ParameterType	double
>5666	Parameter	 
>5667	Identifier	iBand
>5668	ParameterType	int
>5669	Parameter	 
>5670	Identifier	poWK
>5671	ParameterType	GDALWarpKernel *
>5672	ReturnType	static int
>5673	CompoundStatement	 
>5674	ReturnStatement	 
>5675	Identifier	TRUE
>5676	IfStatement	if ( dfValue < 0.0 )
>5677	ElseStatement	else
>5678	IfStatement	if ( dfValue > 255.0 )
>5679	ElseStatement	else
>5680	ExpressionStatement	 
>5681	AssignmentExpr	* pbValue = ( GByte ) ( 0.5 + dfValue )
>5682	CastExpression	( GByte ) ( 0.5 + dfValue )
>5683	AdditiveExpression	0.5 + dfValue
>5684	Identifier	dfValue
>5685	PrimaryExpression	0.5
>5686	CastTarget	GByte
>5687	UnaryOp	* pbValue
>5688	Identifier	pbValue
>5689	UnaryOperator	*
>5690	ExpressionStatement	 
>5691	AssignmentExpr	* pbValue = 255
>5692	PrimaryExpression	255
>5693	UnaryOp	* pbValue
>5694	Identifier	pbValue
>5695	UnaryOperator	*
>5696	Condition	 
>5697	RelationalExpression	dfValue > 255.0
>5698	PrimaryExpression	255.0
>5699	Identifier	dfValue
>5700	ExpressionStatement	 
>5701	AssignmentExpr	* pbValue = 0
>5702	PrimaryExpression	0
>5703	UnaryOp	* pbValue
>5704	Identifier	pbValue
>5705	UnaryOperator	*
>5706	Condition	 
>5707	RelationalExpression	dfValue < 0.0
>5708	PrimaryExpression	0.0
>5709	Identifier	dfValue
>5710	IfStatement	if ( dfAccumulatorDivisor < 0.00001 )
>5711	ElseStatement	else
>5712	IfStatement	if ( dfAccumulatorDivisor == 1.0 )
>5713	ElseStatement	else
>5714	CompoundStatement	 
>5715	ExpressionStatement	 
>5716	AssignmentExpr	dfValue = dfAccumulator / dfAccumulatorDivisor
>5717	MultiplicativeExpression	dfAccumulator / dfAccumulatorDivisor
>5718	Identifier	dfAccumulatorDivisor
>5719	Identifier	dfAccumulator
>5720	Identifier	dfValue
>5721	CompoundStatement	 
>5722	ExpressionStatement	 
>5723	AssignmentExpr	dfValue = dfAccumulator
>5724	Identifier	dfAccumulator
>5725	Identifier	dfValue
>5726	Condition	 
>5727	EqualityExpression	dfAccumulatorDivisor == 1.0
>5728	PrimaryExpression	1.0
>5729	Identifier	dfAccumulatorDivisor
>5730	CompoundStatement	 
>5731	ReturnStatement	 
>5732	Identifier	FALSE
>5733	ExpressionStatement	 
>5734	AssignmentExpr	* pbValue = 0
>5735	PrimaryExpression	0
>5736	UnaryOp	* pbValue
>5737	Identifier	pbValue
>5738	UnaryOperator	*
>5739	Condition	 
>5740	RelationalExpression	dfAccumulatorDivisor < 0.00001
>5741	PrimaryExpression	0.00001
>5742	Identifier	dfAccumulatorDivisor
>5743	IdentifierDeclStatement	 
>5744	IdentifierDecl	dfValue
>5745	Identifier	dfValue
>5746	IdentifierDeclType	double
>5747	IfStatement	if ( iSrcX >= 0 && iSrcX < poWK -> nSrcXSize && iSrcY + 1 >= 0 && iSrcY + 1 < poWK -> nSrcYSize )
>5748	CompoundStatement	 
>5749	ExpressionStatement	 
>5750	AssignmentExpr	dfAccumulator += ( double ) poWK -> papabySrcImage [ iBand ] [ iSrcOffset + poWK -> nSrcXSize ] * dfMult
>5751	MultiplicativeExpression	( double ) poWK -> papabySrcImage [ iBand ] [ iSrcOffset + poWK -> nSrcXSize ] * dfMult
>5752	Identifier	dfMult
>5753	CastExpression	( double ) poWK -> papabySrcImage [ iBand ] [ iSrcOffset + poWK -> nSrcXSize ]
>5754	ArrayIndexing	poWK -> papabySrcImage [ iBand ] [ iSrcOffset + poWK -> nSrcXSize ]
>5755	AdditiveExpression	iSrcOffset + poWK -> nSrcXSize
>5756	PtrMemberAccess	poWK -> nSrcXSize
>5757	Identifier	nSrcXSize
>5758	Identifier	poWK
>5759	Identifier	iSrcOffset
>5760	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>5761	Identifier	iBand
>5762	PtrMemberAccess	poWK -> papabySrcImage
>5763	Identifier	papabySrcImage
>5764	Identifier	poWK
>5765	CastTarget	double
>5766	Identifier	dfAccumulator
>5767	ExpressionStatement	 
>5768	AssignmentExpr	dfAccumulatorDivisor += dfMult
>5769	Identifier	dfMult
>5770	Identifier	dfAccumulatorDivisor
>5771	IdentifierDeclStatement	 
>5772	IdentifierDecl	dfMult = dfRatioX * ( 1.0 - dfRatioY )
>5773	AssignmentExpr	dfMult = dfRatioX * ( 1.0 - dfRatioY )
>5774	MultiplicativeExpression	dfRatioX * ( 1.0 - dfRatioY )
>5775	AdditiveExpression	1.0 - dfRatioY
>5776	Identifier	dfRatioY
>5777	PrimaryExpression	1.0
>5778	Identifier	dfRatioX
>5779	Identifier	dfMult
>5780	Identifier	dfMult
>5781	IdentifierDeclType	double
>5782	Condition	 
>5783	AndExpression	iSrcX >= 0 && iSrcX < poWK -> nSrcXSize && iSrcY + 1 >= 0 && iSrcY + 1 < poWK -> nSrcYSize
>5784	AndExpression	iSrcX < poWK -> nSrcXSize && iSrcY + 1 >= 0 && iSrcY + 1 < poWK -> nSrcYSize
>5785	AndExpression	iSrcY + 1 >= 0 && iSrcY + 1 < poWK -> nSrcYSize
>5786	RelationalExpression	iSrcY + 1 < poWK -> nSrcYSize
>5787	PtrMemberAccess	poWK -> nSrcYSize
>5788	Identifier	nSrcYSize
>5789	Identifier	poWK
>5790	AdditiveExpression	iSrcY + 1
>5791	PrimaryExpression	1
>5792	Identifier	iSrcY
>5793	RelationalExpression	iSrcY + 1 >= 0
>5794	PrimaryExpression	0
>5795	AdditiveExpression	iSrcY + 1
>5796	PrimaryExpression	1
>5797	Identifier	iSrcY
>5798	RelationalExpression	iSrcX < poWK -> nSrcXSize
>5799	PtrMemberAccess	poWK -> nSrcXSize
>5800	Identifier	nSrcXSize
>5801	Identifier	poWK
>5802	Identifier	iSrcX
>5803	RelationalExpression	iSrcX >= 0
>5804	PrimaryExpression	0
>5805	Identifier	iSrcX
>5806	IfStatement	if ( iSrcX + 1 >= 0 && iSrcX + 1 < poWK -> nSrcXSize && iSrcY + 1 >= 0 && iSrcY + 1 < poWK -> nSrcYSize )
>5807	CompoundStatement	 
>5808	ExpressionStatement	 
>5809	AssignmentExpr	dfAccumulator += ( double ) poWK -> papabySrcImage [ iBand ] [ iSrcOffset + 1 + poWK -> nSrcXSize ] * \
>5810	MultiplicativeExpression	( double ) poWK -> papabySrcImage [ iBand ] [ iSrcOffset + 1 + poWK -> nSrcXSize ] * dfMult
>5811	Identifier	dfMult
>5812	CastExpression	( double ) poWK -> papabySrcImage [ iBand ] [ iSrcOffset + 1 + poWK -> nSrcXSize ]
>5813	ArrayIndexing	poWK -> papabySrcImage [ iBand ] [ iSrcOffset + 1 + poWK -> nSrcXSize ]
>5814	AdditiveExpression	iSrcOffset + 1 + poWK -> nSrcXSize
>5815	AdditiveExpression	1 + poWK -> nSrcXSize
>5816	PtrMemberAccess	poWK -> nSrcXSize
>5817	Identifier	nSrcXSize
>5818	Identifier	poWK
>5819	PrimaryExpression	1
>5820	Identifier	iSrcOffset
>5821	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>5822	Identifier	iBand
>5823	PtrMemberAccess	poWK -> papabySrcImage
>5824	Identifier	papabySrcImage
>5825	Identifier	poWK
>5826	CastTarget	double
>5827	Identifier	dfAccumulator
>5828	ExpressionStatement	 
>5829	AssignmentExpr	dfAccumulatorDivisor += dfMult
>5830	Identifier	dfMult
>5831	Identifier	dfAccumulatorDivisor
>5832	IdentifierDeclStatement	 
>5833	IdentifierDecl	dfMult = ( 1.0 - dfRatioX ) * ( 1.0 - dfRatioY )
>5834	AssignmentExpr	dfMult = ( 1.0 - dfRatioX ) * ( 1.0 - dfRatioY )
>5835	MultiplicativeExpression	( 1.0 - dfRatioX ) * ( 1.0 - dfRatioY )
>5836	AdditiveExpression	1.0 - dfRatioY
>5837	Identifier	dfRatioY
>5838	PrimaryExpression	1.0
>5839	AdditiveExpression	1.0 - dfRatioX
>5840	Identifier	dfRatioX
>5841	PrimaryExpression	1.0
>5842	Identifier	dfMult
>5843	Identifier	dfMult
>5844	IdentifierDeclType	double
>5845	Condition	 
>5846	AndExpression	iSrcX + 1 >= 0 && iSrcX + 1 < poWK -> nSrcXSize && iSrcY + 1 >= 0 && iSrcY + 1 < poWK -> nSrcYSize
>5847	AndExpression	iSrcX + 1 < poWK -> nSrcXSize && iSrcY + 1 >= 0 && iSrcY + 1 < poWK -> nSrcYSize
>5848	AndExpression	iSrcY + 1 >= 0 && iSrcY + 1 < poWK -> nSrcYSize
>5849	RelationalExpression	iSrcY + 1 < poWK -> nSrcYSize
>5850	PtrMemberAccess	poWK -> nSrcYSize
>5851	Identifier	nSrcYSize
>5852	Identifier	poWK
>5853	AdditiveExpression	iSrcY + 1
>5854	PrimaryExpression	1
>5855	Identifier	iSrcY
>5856	RelationalExpression	iSrcY + 1 >= 0
>5857	PrimaryExpression	0
>5858	AdditiveExpression	iSrcY + 1
>5859	PrimaryExpression	1
>5860	Identifier	iSrcY
>5861	RelationalExpression	iSrcX + 1 < poWK -> nSrcXSize
>5862	PtrMemberAccess	poWK -> nSrcXSize
>5863	Identifier	nSrcXSize
>5864	Identifier	poWK
>5865	AdditiveExpression	iSrcX + 1
>5866	PrimaryExpression	1
>5867	Identifier	iSrcX
>5868	RelationalExpression	iSrcX + 1 >= 0
>5869	PrimaryExpression	0
>5870	AdditiveExpression	iSrcX + 1
>5871	PrimaryExpression	1
>5872	Identifier	iSrcX
>5873	IfStatement	if ( iSrcX + 1 >= 0 && iSrcX + 1 < poWK -> nSrcXSize && iSrcY >= 0 && iSrcY < poWK -> nSrcYSize )
>5874	CompoundStatement	 
>5875	ExpressionStatement	 
>5876	AssignmentExpr	dfAccumulator += ( double ) poWK -> papabySrcImage [ iBand ] [ iSrcOffset + 1 ] * dfMult
>5877	MultiplicativeExpression	( double ) poWK -> papabySrcImage [ iBand ] [ iSrcOffset + 1 ] * dfMult
>5878	Identifier	dfMult
>5879	CastExpression	( double ) poWK -> papabySrcImage [ iBand ] [ iSrcOffset + 1 ]
>5880	ArrayIndexing	poWK -> papabySrcImage [ iBand ] [ iSrcOffset + 1 ]
>5881	AdditiveExpression	iSrcOffset + 1
>5882	PrimaryExpression	1
>5883	Identifier	iSrcOffset
>5884	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>5885	Identifier	iBand
>5886	PtrMemberAccess	poWK -> papabySrcImage
>5887	Identifier	papabySrcImage
>5888	Identifier	poWK
>5889	CastTarget	double
>5890	Identifier	dfAccumulator
>5891	ExpressionStatement	 
>5892	AssignmentExpr	dfAccumulatorDivisor += dfMult
>5893	Identifier	dfMult
>5894	Identifier	dfAccumulatorDivisor
>5895	IdentifierDeclStatement	 
>5896	IdentifierDecl	dfMult = ( 1.0 - dfRatioX ) * dfRatioY
>5897	AssignmentExpr	dfMult = ( 1.0 - dfRatioX ) * dfRatioY
>5898	MultiplicativeExpression	( 1.0 - dfRatioX ) * dfRatioY
>5899	Identifier	dfRatioY
>5900	AdditiveExpression	1.0 - dfRatioX
>5901	Identifier	dfRatioX
>5902	PrimaryExpression	1.0
>5903	Identifier	dfMult
>5904	Identifier	dfMult
>5905	IdentifierDeclType	double
>5906	Condition	 
>5907	AndExpression	iSrcX + 1 >= 0 && iSrcX + 1 < poWK -> nSrcXSize && iSrcY >= 0 && iSrcY < poWK -> nSrcYSize
>5908	AndExpression	iSrcX + 1 < poWK -> nSrcXSize && iSrcY >= 0 && iSrcY < poWK -> nSrcYSize
>5909	AndExpression	iSrcY >= 0 && iSrcY < poWK -> nSrcYSize
>5910	RelationalExpression	iSrcY < poWK -> nSrcYSize
>5911	PtrMemberAccess	poWK -> nSrcYSize
>5912	Identifier	nSrcYSize
>5913	Identifier	poWK
>5914	Identifier	iSrcY
>5915	RelationalExpression	iSrcY >= 0
>5916	PrimaryExpression	0
>5917	Identifier	iSrcY
>5918	RelationalExpression	iSrcX + 1 < poWK -> nSrcXSize
>5919	PtrMemberAccess	poWK -> nSrcXSize
>5920	Identifier	nSrcXSize
>5921	Identifier	poWK
>5922	AdditiveExpression	iSrcX + 1
>5923	PrimaryExpression	1
>5924	Identifier	iSrcX
>5925	RelationalExpression	iSrcX + 1 >= 0
>5926	PrimaryExpression	0
>5927	AdditiveExpression	iSrcX + 1
>5928	PrimaryExpression	1
>5929	Identifier	iSrcX
>5930	IfStatement	if ( iSrcX >= 0 && iSrcX < poWK -> nSrcXSize && iSrcY >= 0 && iSrcY < poWK -> nSrcYSize )
>5931	CompoundStatement	 
>5932	ExpressionStatement	 
>5933	AssignmentExpr	dfAccumulator += ( double ) poWK -> papabySrcImage [ iBand ] [ iSrcOffset ] * dfMult
>5934	MultiplicativeExpression	( double ) poWK -> papabySrcImage [ iBand ] [ iSrcOffset ] * dfMult
>5935	Identifier	dfMult
>5936	CastExpression	( double ) poWK -> papabySrcImage [ iBand ] [ iSrcOffset ]
>5937	ArrayIndexing	poWK -> papabySrcImage [ iBand ] [ iSrcOffset ]
>5938	Identifier	iSrcOffset
>5939	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>5940	Identifier	iBand
>5941	PtrMemberAccess	poWK -> papabySrcImage
>5942	Identifier	papabySrcImage
>5943	Identifier	poWK
>5944	CastTarget	double
>5945	Identifier	dfAccumulator
>5946	ExpressionStatement	 
>5947	AssignmentExpr	dfAccumulatorDivisor += dfMult
>5948	Identifier	dfMult
>5949	Identifier	dfAccumulatorDivisor
>5950	IdentifierDeclStatement	 
>5951	IdentifierDecl	dfMult = dfRatioX * dfRatioY
>5952	AssignmentExpr	dfMult = dfRatioX * dfRatioY
>5953	MultiplicativeExpression	dfRatioX * dfRatioY
>5954	Identifier	dfRatioY
>5955	Identifier	dfRatioX
>5956	Identifier	dfMult
>5957	Identifier	dfMult
>5958	IdentifierDeclType	double
>5959	Condition	 
>5960	AndExpression	iSrcX >= 0 && iSrcX < poWK -> nSrcXSize && iSrcY >= 0 && iSrcY < poWK -> nSrcYSize
>5961	AndExpression	iSrcX < poWK -> nSrcXSize && iSrcY >= 0 && iSrcY < poWK -> nSrcYSize
>5962	AndExpression	iSrcY >= 0 && iSrcY < poWK -> nSrcYSize
>5963	RelationalExpression	iSrcY < poWK -> nSrcYSize
>5964	PtrMemberAccess	poWK -> nSrcYSize
>5965	Identifier	nSrcYSize
>5966	Identifier	poWK
>5967	Identifier	iSrcY
>5968	RelationalExpression	iSrcY >= 0
>5969	PrimaryExpression	0
>5970	Identifier	iSrcY
>5971	RelationalExpression	iSrcX < poWK -> nSrcXSize
>5972	PtrMemberAccess	poWK -> nSrcXSize
>5973	Identifier	nSrcXSize
>5974	Identifier	poWK
>5975	Identifier	iSrcX
>5976	RelationalExpression	iSrcX >= 0
>5977	PrimaryExpression	0
>5978	Identifier	iSrcX
>5979	IdentifierDeclStatement	 
>5980	IdentifierDecl	dfRatioY = 1.5 - ( dfSrcY - iSrcY )
>5981	AssignmentExpr	dfRatioY = 1.5 - ( dfSrcY - iSrcY )
>5982	AdditiveExpression	1.5 - ( dfSrcY - iSrcY )
>5983	AdditiveExpression	dfSrcY - iSrcY
>5984	Identifier	iSrcY
>5985	Identifier	dfSrcY
>5986	PrimaryExpression	1.5
>5987	Identifier	dfRatioY
>5988	Identifier	dfRatioY
>5989	IdentifierDeclType	double
>5990	IdentifierDeclStatement	 
>5991	IdentifierDecl	dfRatioX = 1.5 - ( dfSrcX - iSrcX )
>5992	AssignmentExpr	dfRatioX = 1.5 - ( dfSrcX - iSrcX )
>5993	AdditiveExpression	1.5 - ( dfSrcX - iSrcX )
>5994	AdditiveExpression	dfSrcX - iSrcX
>5995	Identifier	iSrcX
>5996	Identifier	dfSrcX
>5997	PrimaryExpression	1.5
>5998	Identifier	dfRatioX
>5999	Identifier	dfRatioX
>6000	IdentifierDeclType	double
>6001	IdentifierDeclStatement	 
>6002	IdentifierDecl	iSrcOffset = iSrcX + iSrcY * poWK -> nSrcXSize
>6003	AssignmentExpr	iSrcOffset = iSrcX + iSrcY * poWK -> nSrcXSize
>6004	AdditiveExpression	iSrcX + iSrcY * poWK -> nSrcXSize
>6005	MultiplicativeExpression	iSrcY * poWK -> nSrcXSize
>6006	PtrMemberAccess	poWK -> nSrcXSize
>6007	Identifier	nSrcXSize
>6008	Identifier	poWK
>6009	Identifier	iSrcY
>6010	Identifier	iSrcX
>6011	Identifier	iSrcOffset
>6012	Identifier	iSrcOffset
>6013	IdentifierDeclType	int
>6014	IdentifierDeclStatement	 
>6015	IdentifierDecl	iSrcY = ( int ) floor ( dfSrcY - 0.5 )
>6016	AssignmentExpr	iSrcY = ( int ) floor ( dfSrcY - 0.5 )
>6017	CastExpression	( int ) floor ( dfSrcY - 0.5 )
>6018	CallExpression	floor ( dfSrcY - 0.5 )
>6019	ArgumentList	dfSrcY - 0.5
>6020	Argument	dfSrcY - 0.5
>6021	AdditiveExpression	dfSrcY - 0.5
>6022	PrimaryExpression	0.5
>6023	Identifier	dfSrcY
>6024	Callee	floor
>6025	Identifier	floor
>6026	CastTarget	int
>6027	Identifier	iSrcY
>6028	Identifier	iSrcY
>6029	IdentifierDeclType	int
>6030	IdentifierDeclStatement	 
>6031	IdentifierDecl	iSrcX = ( int ) floor ( dfSrcX - 0.5 )
>6032	AssignmentExpr	iSrcX = ( int ) floor ( dfSrcX - 0.5 )
>6033	CastExpression	( int ) floor ( dfSrcX - 0.5 )
>6034	CallExpression	floor ( dfSrcX - 0.5 )
>6035	ArgumentList	dfSrcX - 0.5
>6036	Argument	dfSrcX - 0.5
>6037	AdditiveExpression	dfSrcX - 0.5
>6038	PrimaryExpression	0.5
>6039	Identifier	dfSrcX
>6040	Callee	floor
>6041	Identifier	floor
>6042	CastTarget	int
>6043	Identifier	iSrcX
>6044	Identifier	iSrcX
>6045	IdentifierDeclType	int
>6046	IdentifierDeclStatement	 
>6047	IdentifierDecl	dfAccumulatorDivisor = 0.0
>6048	AssignmentExpr	dfAccumulatorDivisor = 0.0
>6049	PrimaryExpression	0.0
>6050	Identifier	dfAccumulatorDivisor
>6051	Identifier	dfAccumulatorDivisor
>6052	IdentifierDeclType	double
>6053	IdentifierDeclStatement	 
>6054	IdentifierDecl	dfAccumulator = 0.0
>6055	AssignmentExpr	dfAccumulator = 0.0
>6056	PrimaryExpression	0.0
>6057	Identifier	dfAccumulator
>6058	Identifier	dfAccumulator
>6059	IdentifierDeclType	double
>6093	FunctionDef	GWKBilinearResampleNoMasksShort (GDALWarpKernel * poWK , int iBand , double dfSrcX , double dfSrcY , GInt16 * piValue)
>6094	ParameterList	GDALWarpKernel * poWK , int iBand , double dfSrcX , double dfSrcY , GInt16 * piValue
>6095	Parameter	 
>6096	Identifier	piValue
>6097	ParameterType	GInt16 *
>6098	Parameter	 
>6099	Identifier	dfSrcY
>6100	ParameterType	double
>6101	Parameter	 
>6102	Identifier	dfSrcX
>6103	ParameterType	double
>6104	Parameter	 
>6105	Identifier	iBand
>6106	ParameterType	int
>6107	Parameter	 
>6108	Identifier	poWK
>6109	ParameterType	GDALWarpKernel *
>6110	ReturnType	static int
>6111	CompoundStatement	 
>6112	IfStatement	if ( dfAccumulatorDivisor == 1.0 )
>6113	ElseStatement	else
>6114	IfStatement	if ( dfAccumulatorDivisor < 0.00001 )
>6115	ElseStatement	else
>6116	CompoundStatement	 
>6117	ReturnStatement	 
>6118	Identifier	TRUE
>6119	ExpressionStatement	 
>6120	AssignmentExpr	* piValue = ( GInt16 ) ( 0.5 + dfAccumulator / dfAccumulatorDivisor )
>6121	CastExpression	( GInt16 ) ( 0.5 + dfAccumulator / dfAccumulatorDivisor )
>6122	AdditiveExpression	0.5 + dfAccumulator / dfAccumulatorDivisor
>6123	MultiplicativeExpression	dfAccumulator / dfAccumulatorDivisor
>6124	Identifier	dfAccumulatorDivisor
>6125	Identifier	dfAccumulator
>6126	PrimaryExpression	0.5
>6127	CastTarget	GInt16
>6128	UnaryOp	* piValue
>6129	Identifier	piValue
>6130	UnaryOperator	*
>6131	CompoundStatement	 
>6132	ReturnStatement	 
>6133	Identifier	FALSE
>6134	ExpressionStatement	 
>6135	AssignmentExpr	* piValue = 0
>6136	PrimaryExpression	0
>6137	UnaryOp	* piValue
>6138	Identifier	piValue
>6139	UnaryOperator	*
>6140	Condition	 
>6141	RelationalExpression	dfAccumulatorDivisor < 0.00001
>6142	PrimaryExpression	0.00001
>6143	Identifier	dfAccumulatorDivisor
>6144	CompoundStatement	 
>6145	ReturnStatement	 
>6146	Identifier	TRUE
>6147	ExpressionStatement	 
>6148	AssignmentExpr	* piValue = ( GInt16 ) ( 0.5 + dfAccumulator )
>6149	CastExpression	( GInt16 ) ( 0.5 + dfAccumulator )
>6150	AdditiveExpression	0.5 + dfAccumulator
>6151	Identifier	dfAccumulator
>6152	PrimaryExpression	0.5
>6153	CastTarget	GInt16
>6154	UnaryOp	* piValue
>6155	Identifier	piValue
>6156	UnaryOperator	*
>6157	Condition	 
>6158	EqualityExpression	dfAccumulatorDivisor == 1.0
>6159	PrimaryExpression	1.0
>6160	Identifier	dfAccumulatorDivisor
>6161	IfStatement	if ( iSrcX >= 0 && iSrcX < poWK -> nSrcXSize && iSrcY + 1 >= 0 && iSrcY + 1 < poWK -> nSrcYSize )
>6162	CompoundStatement	 
>6163	ExpressionStatement	 
>6164	AssignmentExpr	dfAccumulator += ( double ) ( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iSrcOffset + poWK -> \
>6165	MultiplicativeExpression	( double ) ( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iSrcOffset + poWK -> nSrcXSize ] * dfMult
>6166	Identifier	dfMult
>6167	CastExpression	( double ) ( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iSrcOffset + poWK -> nSrcXSize ]
>6168	ArrayIndexing	( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iSrcOffset + poWK -> nSrcXSize ]
>6169	AdditiveExpression	iSrcOffset + poWK -> nSrcXSize
>6170	PtrMemberAccess	poWK -> nSrcXSize
>6171	Identifier	nSrcXSize
>6172	Identifier	poWK
>6173	Identifier	iSrcOffset
>6174	CastExpression	( GInt16 * ) poWK -> papabySrcImage [ iBand ]
>6175	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>6176	Identifier	iBand
>6177	PtrMemberAccess	poWK -> papabySrcImage
>6178	Identifier	papabySrcImage
>6179	Identifier	poWK
>6180	CastTarget	GInt16 *
>6181	CastTarget	double
>6182	Identifier	dfAccumulator
>6183	ExpressionStatement	 
>6184	AssignmentExpr	dfAccumulatorDivisor += dfMult
>6185	Identifier	dfMult
>6186	Identifier	dfAccumulatorDivisor
>6187	IdentifierDeclStatement	 
>6188	IdentifierDecl	dfMult = dfRatioX * ( 1.0 - dfRatioY )
>6189	AssignmentExpr	dfMult = dfRatioX * ( 1.0 - dfRatioY )
>6190	MultiplicativeExpression	dfRatioX * ( 1.0 - dfRatioY )
>6191	AdditiveExpression	1.0 - dfRatioY
>6192	Identifier	dfRatioY
>6193	PrimaryExpression	1.0
>6194	Identifier	dfRatioX
>6195	Identifier	dfMult
>6196	Identifier	dfMult
>6197	IdentifierDeclType	double
>6198	Condition	 
>6199	AndExpression	iSrcX >= 0 && iSrcX < poWK -> nSrcXSize && iSrcY + 1 >= 0 && iSrcY + 1 < poWK -> nSrcYSize
>6200	AndExpression	iSrcX < poWK -> nSrcXSize && iSrcY + 1 >= 0 && iSrcY + 1 < poWK -> nSrcYSize
>6201	AndExpression	iSrcY + 1 >= 0 && iSrcY + 1 < poWK -> nSrcYSize
>6202	RelationalExpression	iSrcY + 1 < poWK -> nSrcYSize
>6203	PtrMemberAccess	poWK -> nSrcYSize
>6204	Identifier	nSrcYSize
>6205	Identifier	poWK
>6206	AdditiveExpression	iSrcY + 1
>6207	PrimaryExpression	1
>6208	Identifier	iSrcY
>6209	RelationalExpression	iSrcY + 1 >= 0
>6210	PrimaryExpression	0
>6211	AdditiveExpression	iSrcY + 1
>6212	PrimaryExpression	1
>6213	Identifier	iSrcY
>6214	RelationalExpression	iSrcX < poWK -> nSrcXSize
>6215	PtrMemberAccess	poWK -> nSrcXSize
>6216	Identifier	nSrcXSize
>6217	Identifier	poWK
>6218	Identifier	iSrcX
>6219	RelationalExpression	iSrcX >= 0
>6220	PrimaryExpression	0
>6221	Identifier	iSrcX
>6222	IfStatement	if ( iSrcX + 1 >= 0 && iSrcX + 1 < poWK -> nSrcXSize && iSrcY + 1 >= 0 && iSrcY + 1 < poWK -> nSrcYSize )
>6223	CompoundStatement	 
>6224	ExpressionStatement	 
>6225	AssignmentExpr	dfAccumulator += ( double ) ( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iSrcOffset + 1 + poWK \
>6226	MultiplicativeExpression	( double ) ( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iSrcOffset + 1 + poWK -> nSrcXSize ] * \
>6227	Identifier	dfMult
>6228	CastExpression	( double ) ( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iSrcOffset + 1 + poWK -> nSrcXSize ]
>6229	ArrayIndexing	( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iSrcOffset + 1 + poWK -> nSrcXSize ]
>6230	AdditiveExpression	iSrcOffset + 1 + poWK -> nSrcXSize
>6231	AdditiveExpression	1 + poWK -> nSrcXSize
>6232	PtrMemberAccess	poWK -> nSrcXSize
>6233	Identifier	nSrcXSize
>6234	Identifier	poWK
>6235	PrimaryExpression	1
>6236	Identifier	iSrcOffset
>6237	CastExpression	( GInt16 * ) poWK -> papabySrcImage [ iBand ]
>6238	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>6239	Identifier	iBand
>6240	PtrMemberAccess	poWK -> papabySrcImage
>6241	Identifier	papabySrcImage
>6242	Identifier	poWK
>6243	CastTarget	GInt16 *
>6244	CastTarget	double
>6245	Identifier	dfAccumulator
>6246	ExpressionStatement	 
>6247	AssignmentExpr	dfAccumulatorDivisor += dfMult
>6248	Identifier	dfMult
>6249	Identifier	dfAccumulatorDivisor
>6250	IdentifierDeclStatement	 
>6251	IdentifierDecl	dfMult = ( 1.0 - dfRatioX ) * ( 1.0 - dfRatioY )
>6252	AssignmentExpr	dfMult = ( 1.0 - dfRatioX ) * ( 1.0 - dfRatioY )
>6253	MultiplicativeExpression	( 1.0 - dfRatioX ) * ( 1.0 - dfRatioY )
>6254	AdditiveExpression	1.0 - dfRatioY
>6255	Identifier	dfRatioY
>6256	PrimaryExpression	1.0
>6257	AdditiveExpression	1.0 - dfRatioX
>6258	Identifier	dfRatioX
>6259	PrimaryExpression	1.0
>6260	Identifier	dfMult
>6261	Identifier	dfMult
>6262	IdentifierDeclType	double
>6263	Condition	 
>6264	AndExpression	iSrcX + 1 >= 0 && iSrcX + 1 < poWK -> nSrcXSize && iSrcY + 1 >= 0 && iSrcY + 1 < poWK -> nSrcYSize
>6265	AndExpression	iSrcX + 1 < poWK -> nSrcXSize && iSrcY + 1 >= 0 && iSrcY + 1 < poWK -> nSrcYSize
>6266	AndExpression	iSrcY + 1 >= 0 && iSrcY + 1 < poWK -> nSrcYSize
>6267	RelationalExpression	iSrcY + 1 < poWK -> nSrcYSize
>6268	PtrMemberAccess	poWK -> nSrcYSize
>6269	Identifier	nSrcYSize
>6270	Identifier	poWK
>6271	AdditiveExpression	iSrcY + 1
>6272	PrimaryExpression	1
>6273	Identifier	iSrcY
>6274	RelationalExpression	iSrcY + 1 >= 0
>6275	PrimaryExpression	0
>6276	AdditiveExpression	iSrcY + 1
>6277	PrimaryExpression	1
>6278	Identifier	iSrcY
>6279	RelationalExpression	iSrcX + 1 < poWK -> nSrcXSize
>6280	PtrMemberAccess	poWK -> nSrcXSize
>6281	Identifier	nSrcXSize
>6282	Identifier	poWK
>6283	AdditiveExpression	iSrcX + 1
>6284	PrimaryExpression	1
>6285	Identifier	iSrcX
>6286	RelationalExpression	iSrcX + 1 >= 0
>6287	PrimaryExpression	0
>6288	AdditiveExpression	iSrcX + 1
>6289	PrimaryExpression	1
>6290	Identifier	iSrcX
>6291	IfStatement	if ( iSrcX + 1 >= 0 && iSrcX + 1 < poWK -> nSrcXSize && iSrcY >= 0 && iSrcY < poWK -> nSrcYSize )
>6292	CompoundStatement	 
>6293	ExpressionStatement	 
>6294	AssignmentExpr	dfAccumulator += ( double ) ( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iSrcOffset + 1 ] * dfMult
>6295	MultiplicativeExpression	( double ) ( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iSrcOffset + 1 ] * dfMult
>6296	Identifier	dfMult
>6297	CastExpression	( double ) ( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iSrcOffset + 1 ]
>6298	ArrayIndexing	( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iSrcOffset + 1 ]
>6299	AdditiveExpression	iSrcOffset + 1
>6300	PrimaryExpression	1
>6301	Identifier	iSrcOffset
>6302	CastExpression	( GInt16 * ) poWK -> papabySrcImage [ iBand ]
>6303	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>6304	Identifier	iBand
>6305	PtrMemberAccess	poWK -> papabySrcImage
>6306	Identifier	papabySrcImage
>6307	Identifier	poWK
>6308	CastTarget	GInt16 *
>6309	CastTarget	double
>6310	Identifier	dfAccumulator
>6311	ExpressionStatement	 
>6312	AssignmentExpr	dfAccumulatorDivisor += dfMult
>6313	Identifier	dfMult
>6314	Identifier	dfAccumulatorDivisor
>6315	IdentifierDeclStatement	 
>6316	IdentifierDecl	dfMult = ( 1.0 - dfRatioX ) * dfRatioY
>6317	AssignmentExpr	dfMult = ( 1.0 - dfRatioX ) * dfRatioY
>6318	MultiplicativeExpression	( 1.0 - dfRatioX ) * dfRatioY
>6319	Identifier	dfRatioY
>6320	AdditiveExpression	1.0 - dfRatioX
>6321	Identifier	dfRatioX
>6322	PrimaryExpression	1.0
>6323	Identifier	dfMult
>6324	Identifier	dfMult
>6325	IdentifierDeclType	double
>6326	Condition	 
>6327	AndExpression	iSrcX + 1 >= 0 && iSrcX + 1 < poWK -> nSrcXSize && iSrcY >= 0 && iSrcY < poWK -> nSrcYSize
>6328	AndExpression	iSrcX + 1 < poWK -> nSrcXSize && iSrcY >= 0 && iSrcY < poWK -> nSrcYSize
>6329	AndExpression	iSrcY >= 0 && iSrcY < poWK -> nSrcYSize
>6330	RelationalExpression	iSrcY < poWK -> nSrcYSize
>6331	PtrMemberAccess	poWK -> nSrcYSize
>6332	Identifier	nSrcYSize
>6333	Identifier	poWK
>6334	Identifier	iSrcY
>6335	RelationalExpression	iSrcY >= 0
>6336	PrimaryExpression	0
>6337	Identifier	iSrcY
>6338	RelationalExpression	iSrcX + 1 < poWK -> nSrcXSize
>6339	PtrMemberAccess	poWK -> nSrcXSize
>6340	Identifier	nSrcXSize
>6341	Identifier	poWK
>6342	AdditiveExpression	iSrcX + 1
>6343	PrimaryExpression	1
>6344	Identifier	iSrcX
>6345	RelationalExpression	iSrcX + 1 >= 0
>6346	PrimaryExpression	0
>6347	AdditiveExpression	iSrcX + 1
>6348	PrimaryExpression	1
>6349	Identifier	iSrcX
>6350	IfStatement	if ( iSrcX >= 0 && iSrcX < poWK -> nSrcXSize && iSrcY >= 0 && iSrcY < poWK -> nSrcYSize )
>6351	CompoundStatement	 
>6352	ExpressionStatement	 
>6353	AssignmentExpr	dfAccumulator += ( double ) ( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iSrcOffset ] * dfMult
>6354	MultiplicativeExpression	( double ) ( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iSrcOffset ] * dfMult
>6355	Identifier	dfMult
>6356	CastExpression	( double ) ( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iSrcOffset ]
>6357	ArrayIndexing	( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iSrcOffset ]
>6358	Identifier	iSrcOffset
>6359	CastExpression	( GInt16 * ) poWK -> papabySrcImage [ iBand ]
>6360	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>6361	Identifier	iBand
>6362	PtrMemberAccess	poWK -> papabySrcImage
>6363	Identifier	papabySrcImage
>6364	Identifier	poWK
>6365	CastTarget	GInt16 *
>6366	CastTarget	double
>6367	Identifier	dfAccumulator
>6368	ExpressionStatement	 
>6369	AssignmentExpr	dfAccumulatorDivisor += dfMult
>6370	Identifier	dfMult
>6371	Identifier	dfAccumulatorDivisor
>6372	IdentifierDeclStatement	 
>6373	IdentifierDecl	dfMult = dfRatioX * dfRatioY
>6374	AssignmentExpr	dfMult = dfRatioX * dfRatioY
>6375	MultiplicativeExpression	dfRatioX * dfRatioY
>6376	Identifier	dfRatioY
>6377	Identifier	dfRatioX
>6378	Identifier	dfMult
>6379	Identifier	dfMult
>6380	IdentifierDeclType	double
>6381	Condition	 
>6382	AndExpression	iSrcX >= 0 && iSrcX < poWK -> nSrcXSize && iSrcY >= 0 && iSrcY < poWK -> nSrcYSize
>6383	AndExpression	iSrcX < poWK -> nSrcXSize && iSrcY >= 0 && iSrcY < poWK -> nSrcYSize
>6384	AndExpression	iSrcY >= 0 && iSrcY < poWK -> nSrcYSize
>6385	RelationalExpression	iSrcY < poWK -> nSrcYSize
>6386	PtrMemberAccess	poWK -> nSrcYSize
>6387	Identifier	nSrcYSize
>6388	Identifier	poWK
>6389	Identifier	iSrcY
>6390	RelationalExpression	iSrcY >= 0
>6391	PrimaryExpression	0
>6392	Identifier	iSrcY
>6393	RelationalExpression	iSrcX < poWK -> nSrcXSize
>6394	PtrMemberAccess	poWK -> nSrcXSize
>6395	Identifier	nSrcXSize
>6396	Identifier	poWK
>6397	Identifier	iSrcX
>6398	RelationalExpression	iSrcX >= 0
>6399	PrimaryExpression	0
>6400	Identifier	iSrcX
>6401	IdentifierDeclStatement	 
>6402	IdentifierDecl	dfRatioY = 1.5 - ( dfSrcY - iSrcY )
>6403	AssignmentExpr	dfRatioY = 1.5 - ( dfSrcY - iSrcY )
>6404	AdditiveExpression	1.5 - ( dfSrcY - iSrcY )
>6405	AdditiveExpression	dfSrcY - iSrcY
>6406	Identifier	iSrcY
>6407	Identifier	dfSrcY
>6408	PrimaryExpression	1.5
>6409	Identifier	dfRatioY
>6410	Identifier	dfRatioY
>6411	IdentifierDeclType	double
>6412	IdentifierDeclStatement	 
>6413	IdentifierDecl	dfRatioX = 1.5 - ( dfSrcX - iSrcX )
>6414	AssignmentExpr	dfRatioX = 1.5 - ( dfSrcX - iSrcX )
>6415	AdditiveExpression	1.5 - ( dfSrcX - iSrcX )
>6416	AdditiveExpression	dfSrcX - iSrcX
>6417	Identifier	iSrcX
>6418	Identifier	dfSrcX
>6419	PrimaryExpression	1.5
>6420	Identifier	dfRatioX
>6421	Identifier	dfRatioX
>6422	IdentifierDeclType	double
>6423	IdentifierDeclStatement	 
>6424	IdentifierDecl	iSrcOffset = iSrcX + iSrcY * poWK -> nSrcXSize
>6425	AssignmentExpr	iSrcOffset = iSrcX + iSrcY * poWK -> nSrcXSize
>6426	AdditiveExpression	iSrcX + iSrcY * poWK -> nSrcXSize
>6427	MultiplicativeExpression	iSrcY * poWK -> nSrcXSize
>6428	PtrMemberAccess	poWK -> nSrcXSize
>6429	Identifier	nSrcXSize
>6430	Identifier	poWK
>6431	Identifier	iSrcY
>6432	Identifier	iSrcX
>6433	Identifier	iSrcOffset
>6434	Identifier	iSrcOffset
>6435	IdentifierDeclType	int
>6436	IdentifierDeclStatement	 
>6437	IdentifierDecl	iSrcY = ( int ) floor ( dfSrcY - 0.5 )
>6438	AssignmentExpr	iSrcY = ( int ) floor ( dfSrcY - 0.5 )
>6439	CastExpression	( int ) floor ( dfSrcY - 0.5 )
>6440	CallExpression	floor ( dfSrcY - 0.5 )
>6441	ArgumentList	dfSrcY - 0.5
>6442	Argument	dfSrcY - 0.5
>6443	AdditiveExpression	dfSrcY - 0.5
>6444	PrimaryExpression	0.5
>6445	Identifier	dfSrcY
>6446	Callee	floor
>6447	Identifier	floor
>6448	CastTarget	int
>6449	Identifier	iSrcY
>6450	Identifier	iSrcY
>6451	IdentifierDeclType	int
>6452	IdentifierDeclStatement	 
>6453	IdentifierDecl	iSrcX = ( int ) floor ( dfSrcX - 0.5 )
>6454	AssignmentExpr	iSrcX = ( int ) floor ( dfSrcX - 0.5 )
>6455	CastExpression	( int ) floor ( dfSrcX - 0.5 )
>6456	CallExpression	floor ( dfSrcX - 0.5 )
>6457	ArgumentList	dfSrcX - 0.5
>6458	Argument	dfSrcX - 0.5
>6459	AdditiveExpression	dfSrcX - 0.5
>6460	PrimaryExpression	0.5
>6461	Identifier	dfSrcX
>6462	Callee	floor
>6463	Identifier	floor
>6464	CastTarget	int
>6465	Identifier	iSrcX
>6466	Identifier	iSrcX
>6467	IdentifierDeclType	int
>6468	IdentifierDeclStatement	 
>6469	IdentifierDecl	dfAccumulatorDivisor = 0.0
>6470	AssignmentExpr	dfAccumulatorDivisor = 0.0
>6471	PrimaryExpression	0.0
>6472	Identifier	dfAccumulatorDivisor
>6473	Identifier	dfAccumulatorDivisor
>6474	IdentifierDeclType	double
>6475	IdentifierDeclStatement	 
>6476	IdentifierDecl	dfAccumulator = 0.0
>6477	AssignmentExpr	dfAccumulator = 0.0
>6478	PrimaryExpression	0.0
>6479	Identifier	dfAccumulator
>6480	Identifier	dfAccumulator
>6481	IdentifierDeclType	double
>6514	FunctionDef	GWKCubicResample (GDALWarpKernel * poWK , int iBand , double dfSrcX , double dfSrcY , double * pdfDensity , double * \
>6515	ParameterList	GDALWarpKernel * poWK , int iBand , double dfSrcX , double dfSrcY , double * pdfDensity , double * pdfReal , double * \
>6516	Parameter	 
>6517	Identifier	pdfImag
>6518	ParameterType	double *
>6519	Parameter	 
>6520	Identifier	pdfReal
>6521	ParameterType	double *
>6522	Parameter	 
>6523	Identifier	pdfDensity
>6524	ParameterType	double *
>6525	Parameter	 
>6526	Identifier	dfSrcY
>6527	ParameterType	double
>6528	Parameter	 
>6529	Identifier	dfSrcX
>6530	ParameterType	double
>6531	Parameter	 
>6532	Identifier	iBand
>6533	ParameterType	int
>6534	Parameter	 
>6535	Identifier	poWK
>6536	ParameterType	GDALWarpKernel *
>6537	ReturnType	static int
>6538	CompoundStatement	 
>6539	ReturnStatement	 
>6540	Identifier	TRUE
>6541	ExpressionStatement	 
>6542	AssignmentExpr	* pdfImag = CubicConvolution ( dfDeltaY , dfDeltaY2 , dfDeltaY3 , adfValueImag [ 0 ] , adfValueImag [ \
>6543	CallExpression	CubicConvolution ( dfDeltaY , dfDeltaY2 , dfDeltaY3 , adfValueImag [ 0 ] , adfValueImag [ 1 ] , adfValueImag [ 2 ] , \
>6544	ArgumentList	dfDeltaY
>6545	Argument	adfValueImag [ 3 ]
>6546	ArrayIndexing	adfValueImag [ 3 ]
>6547	PrimaryExpression	3
>6548	Identifier	adfValueImag
>6549	Argument	adfValueImag [ 2 ]
>6550	ArrayIndexing	adfValueImag [ 2 ]
>6551	PrimaryExpression	2
>6552	Identifier	adfValueImag
>6553	Argument	adfValueImag [ 1 ]
>6554	ArrayIndexing	adfValueImag [ 1 ]
>6555	PrimaryExpression	1
>6556	Identifier	adfValueImag
>6557	Argument	adfValueImag [ 0 ]
>6558	ArrayIndexing	adfValueImag [ 0 ]
>6559	PrimaryExpression	0
>6560	Identifier	adfValueImag
>6561	Argument	dfDeltaY3
>6562	Identifier	dfDeltaY3
>6563	Argument	dfDeltaY2
>6564	Identifier	dfDeltaY2
>6565	Argument	dfDeltaY
>6566	Identifier	dfDeltaY
>6567	Callee	CubicConvolution
>6568	Identifier	CubicConvolution
>6569	UnaryOp	* pdfImag
>6570	Identifier	pdfImag
>6571	UnaryOperator	*
>6572	ExpressionStatement	 
>6573	AssignmentExpr	* pdfReal = CubicConvolution ( dfDeltaY , dfDeltaY2 , dfDeltaY3 , adfValueReal [ 0 ] , adfValueReal [ \
>6574	CallExpression	CubicConvolution ( dfDeltaY , dfDeltaY2 , dfDeltaY3 , adfValueReal [ 0 ] , adfValueReal [ 1 ] , adfValueReal [ 2 ] , \
>6575	ArgumentList	dfDeltaY
>6576	Argument	adfValueReal [ 3 ]
>6577	ArrayIndexing	adfValueReal [ 3 ]
>6578	PrimaryExpression	3
>6579	Identifier	adfValueReal
>6580	Argument	adfValueReal [ 2 ]
>6581	ArrayIndexing	adfValueReal [ 2 ]
>6582	PrimaryExpression	2
>6583	Identifier	adfValueReal
>6584	Argument	adfValueReal [ 1 ]
>6585	ArrayIndexing	adfValueReal [ 1 ]
>6586	PrimaryExpression	1
>6587	Identifier	adfValueReal
>6588	Argument	adfValueReal [ 0 ]
>6589	ArrayIndexing	adfValueReal [ 0 ]
>6590	PrimaryExpression	0
>6591	Identifier	adfValueReal
>6592	Argument	dfDeltaY3
>6593	Identifier	dfDeltaY3
>6594	Argument	dfDeltaY2
>6595	Identifier	dfDeltaY2
>6596	Argument	dfDeltaY
>6597	Identifier	dfDeltaY
>6598	Callee	CubicConvolution
>6599	Identifier	CubicConvolution
>6600	UnaryOp	* pdfReal
>6601	Identifier	pdfReal
>6602	UnaryOperator	*
>6603	ExpressionStatement	 
>6604	AssignmentExpr	* pdfDensity = CubicConvolution ( dfDeltaY , dfDeltaY2 , dfDeltaY3 , adfValueDens [ 0 ] , adfValueDens [ \
>6605	CallExpression	CubicConvolution ( dfDeltaY , dfDeltaY2 , dfDeltaY3 , adfValueDens [ 0 ] , adfValueDens [ 1 ] , adfValueDens [ 2 ] , \
>6606	ArgumentList	dfDeltaY
>6607	Argument	adfValueDens [ 3 ]
>6608	ArrayIndexing	adfValueDens [ 3 ]
>6609	PrimaryExpression	3
>6610	Identifier	adfValueDens
>6611	Argument	adfValueDens [ 2 ]
>6612	ArrayIndexing	adfValueDens [ 2 ]
>6613	PrimaryExpression	2
>6614	Identifier	adfValueDens
>6615	Argument	adfValueDens [ 1 ]
>6616	ArrayIndexing	adfValueDens [ 1 ]
>6617	PrimaryExpression	1
>6618	Identifier	adfValueDens
>6619	Argument	adfValueDens [ 0 ]
>6620	ArrayIndexing	adfValueDens [ 0 ]
>6621	PrimaryExpression	0
>6622	Identifier	adfValueDens
>6623	Argument	dfDeltaY3
>6624	Identifier	dfDeltaY3
>6625	Argument	dfDeltaY2
>6626	Identifier	dfDeltaY2
>6627	Argument	dfDeltaY
>6628	Identifier	dfDeltaY
>6629	Callee	CubicConvolution
>6630	Identifier	CubicConvolution
>6631	UnaryOp	* pdfDensity
>6632	Identifier	pdfDensity
>6633	UnaryOperator	*
>6634	ForStatement	for ( i = - 1 ; i < 3 ; i ++ )
>6635	CompoundStatement	 
>6636	ExpressionStatement	 
>6637	AssignmentExpr	adfValueImag [ i + 1 ] = CubicConvolution ( dfDeltaX , dfDeltaX2 , dfDeltaX3 , adfImag [ 0 ] , adfImag [ \
>6638	CallExpression	CubicConvolution ( dfDeltaX , dfDeltaX2 , dfDeltaX3 , adfImag [ 0 ] , adfImag [ 1 ] , adfImag [ 2 ] , adfImag [ \
>6639	ArgumentList	dfDeltaX
>6640	Argument	adfImag [ 3 ]
>6641	ArrayIndexing	adfImag [ 3 ]
>6642	PrimaryExpression	3
>6643	Identifier	adfImag
>6644	Argument	adfImag [ 2 ]
>6645	ArrayIndexing	adfImag [ 2 ]
>6646	PrimaryExpression	2
>6647	Identifier	adfImag
>6648	Argument	adfImag [ 1 ]
>6649	ArrayIndexing	adfImag [ 1 ]
>6650	PrimaryExpression	1
>6651	Identifier	adfImag
>6652	Argument	adfImag [ 0 ]
>6653	ArrayIndexing	adfImag [ 0 ]
>6654	PrimaryExpression	0
>6655	Identifier	adfImag
>6656	Argument	dfDeltaX3
>6657	Identifier	dfDeltaX3
>6658	Argument	dfDeltaX2
>6659	Identifier	dfDeltaX2
>6660	Argument	dfDeltaX
>6661	Identifier	dfDeltaX
>6662	Callee	CubicConvolution
>6663	Identifier	CubicConvolution
>6664	ArrayIndexing	adfValueImag [ i + 1 ]
>6665	AdditiveExpression	i + 1
>6666	PrimaryExpression	1
>6667	Identifier	i
>6668	Identifier	adfValueImag
>6669	ExpressionStatement	 
>6670	AssignmentExpr	adfValueReal [ i + 1 ] = CubicConvolution ( dfDeltaX , dfDeltaX2 , dfDeltaX3 , adfReal [ 0 ] , adfReal [ \
>6671	CallExpression	CubicConvolution ( dfDeltaX , dfDeltaX2 , dfDeltaX3 , adfReal [ 0 ] , adfReal [ 1 ] , adfReal [ 2 ] , adfReal [ \
>6672	ArgumentList	dfDeltaX
>6673	Argument	adfReal [ 3 ]
>6674	ArrayIndexing	adfReal [ 3 ]
>6675	PrimaryExpression	3
>6676	Identifier	adfReal
>6677	Argument	adfReal [ 2 ]
>6678	ArrayIndexing	adfReal [ 2 ]
>6679	PrimaryExpression	2
>6680	Identifier	adfReal
>6681	Argument	adfReal [ 1 ]
>6682	ArrayIndexing	adfReal [ 1 ]
>6683	PrimaryExpression	1
>6684	Identifier	adfReal
>6685	Argument	adfReal [ 0 ]
>6686	ArrayIndexing	adfReal [ 0 ]
>6687	PrimaryExpression	0
>6688	Identifier	adfReal
>6689	Argument	dfDeltaX3
>6690	Identifier	dfDeltaX3
>6691	Argument	dfDeltaX2
>6692	Identifier	dfDeltaX2
>6693	Argument	dfDeltaX
>6694	Identifier	dfDeltaX
>6695	Callee	CubicConvolution
>6696	Identifier	CubicConvolution
>6697	ArrayIndexing	adfValueReal [ i + 1 ]
>6698	AdditiveExpression	i + 1
>6699	PrimaryExpression	1
>6700	Identifier	i
>6701	Identifier	adfValueReal
>6702	ExpressionStatement	 
>6703	AssignmentExpr	adfValueDens [ i + 1 ] = CubicConvolution ( dfDeltaX , dfDeltaX2 , dfDeltaX3 , adfDensity [ 0 ] , adfDensity [ \
>6704	CallExpression	CubicConvolution ( dfDeltaX , dfDeltaX2 , dfDeltaX3 , adfDensity [ 0 ] , adfDensity [ 1 ] , adfDensity [ 2 ] , adfDensity [ \
>6705	ArgumentList	dfDeltaX
>6706	Argument	adfDensity [ 3 ]
>6707	ArrayIndexing	adfDensity [ 3 ]
>6708	PrimaryExpression	3
>6709	Identifier	adfDensity
>6710	Argument	adfDensity [ 2 ]
>6711	ArrayIndexing	adfDensity [ 2 ]
>6712	PrimaryExpression	2
>6713	Identifier	adfDensity
>6714	Argument	adfDensity [ 1 ]
>6715	ArrayIndexing	adfDensity [ 1 ]
>6716	PrimaryExpression	1
>6717	Identifier	adfDensity
>6718	Argument	adfDensity [ 0 ]
>6719	ArrayIndexing	adfDensity [ 0 ]
>6720	PrimaryExpression	0
>6721	Identifier	adfDensity
>6722	Argument	dfDeltaX3
>6723	Identifier	dfDeltaX3
>6724	Argument	dfDeltaX2
>6725	Identifier	dfDeltaX2
>6726	Argument	dfDeltaX
>6727	Identifier	dfDeltaX
>6728	Callee	CubicConvolution
>6729	Identifier	CubicConvolution
>6730	ArrayIndexing	adfValueDens [ i + 1 ]
>6731	AdditiveExpression	i + 1
>6732	PrimaryExpression	1
>6733	Identifier	i
>6734	Identifier	adfValueDens
>6735	IfStatement	if ( ! GWKGetPixelRow ( poWK , iBand , iSrcOffset + i * poWK -> nSrcXSize - 1 , 2 , adfDensity , adfReal , adfImag ) || \
>6736	CompoundStatement	 
>6737	ReturnStatement	 
>6738	CallExpression	GWKBilinearResample ( poWK , iBand , dfSrcX , dfSrcY , pdfDensity , pdfReal , pdfImag )
>6739	ArgumentList	poWK
>6740	Argument	pdfImag
>6741	Identifier	pdfImag
>6742	Argument	pdfReal
>6743	Identifier	pdfReal
>6744	Argument	pdfDensity
>6745	Identifier	pdfDensity
>6746	Argument	dfSrcY
>6747	Identifier	dfSrcY
>6748	Argument	dfSrcX
>6749	Identifier	dfSrcX
>6750	Argument	iBand
>6751	Identifier	iBand
>6752	Argument	poWK
>6753	Identifier	poWK
>6754	Callee	GWKBilinearResample
>6755	Identifier	GWKBilinearResample
>6756	Condition	 
>6757	OrExpression	! GWKGetPixelRow ( poWK , iBand , iSrcOffset + i * poWK -> nSrcXSize - 1 , 2 , adfDensity , adfReal , \
>6758	OrExpression	adfDensity [ 0 ] < 0.000000001 || adfDensity [ 1 ] < 0.000000001 || adfDensity [ 2 ] < 0.000000001 || \
>6759	OrExpression	adfDensity [ 1 ] < 0.000000001 || adfDensity [ 2 ] < 0.000000001 || adfDensity [ 3 ] < 0.000000001
>6760	OrExpression	adfDensity [ 2 ] < 0.000000001 || adfDensity [ 3 ] < 0.000000001
>6761	RelationalExpression	adfDensity [ 3 ] < 0.000000001
>6762	PrimaryExpression	0.000000001
>6763	ArrayIndexing	adfDensity [ 3 ]
>6764	PrimaryExpression	3
>6765	Identifier	adfDensity
>6766	RelationalExpression	adfDensity [ 2 ] < 0.000000001
>6767	PrimaryExpression	0.000000001
>6768	ArrayIndexing	adfDensity [ 2 ]
>6769	PrimaryExpression	2
>6770	Identifier	adfDensity
>6771	RelationalExpression	adfDensity [ 1 ] < 0.000000001
>6772	PrimaryExpression	0.000000001
>6773	ArrayIndexing	adfDensity [ 1 ]
>6774	PrimaryExpression	1
>6775	Identifier	adfDensity
>6776	RelationalExpression	adfDensity [ 0 ] < 0.000000001
>6777	PrimaryExpression	0.000000001
>6778	ArrayIndexing	adfDensity [ 0 ]
>6779	PrimaryExpression	0
>6780	Identifier	adfDensity
>6781	UnaryOp	! GWKGetPixelRow ( poWK , iBand , iSrcOffset + i * poWK -> nSrcXSize - 1 , 2 , adfDensity , adfReal , adfImag )
>6782	CallExpression	GWKGetPixelRow ( poWK , iBand , iSrcOffset + i * poWK -> nSrcXSize - 1 , 2 , adfDensity , adfReal , adfImag )
>6783	ArgumentList	poWK
>6784	Argument	adfImag
>6785	Identifier	adfImag
>6786	Argument	adfReal
>6787	Identifier	adfReal
>6788	Argument	adfDensity
>6789	Identifier	adfDensity
>6790	Argument	2
>6791	PrimaryExpression	2
>6792	Argument	iSrcOffset + i * poWK -> nSrcXSize - 1
>6793	AdditiveExpression	iSrcOffset + i * poWK -> nSrcXSize - 1
>6794	AdditiveExpression	i * poWK -> nSrcXSize - 1
>6795	PrimaryExpression	1
>6796	MultiplicativeExpression	i * poWK -> nSrcXSize
>6797	PtrMemberAccess	poWK -> nSrcXSize
>6798	Identifier	nSrcXSize
>6799	Identifier	poWK
>6800	Identifier	i
>6801	Identifier	iSrcOffset
>6802	Argument	iBand
>6803	Identifier	iBand
>6804	Argument	poWK
>6805	Identifier	poWK
>6806	Callee	GWKGetPixelRow
>6807	Identifier	GWKGetPixelRow
>6808	UnaryOperator	!
>6809	IncDecOp	 
>6810	IncDec	++
>6811	Identifier	i
>6812	Condition	 
>6813	RelationalExpression	i < 3
>6814	PrimaryExpression	3
>6815	Identifier	i
>6816	ForInit	 
>6817	AssignmentExpr	i = - 1
>6818	UnaryOp	- 1
>6819	PrimaryExpression	1
>6820	UnaryOperator	-
>6821	Identifier	i
>6822	IfStatement	if ( iSrcX - 1 < 0 || iSrcX + 2 >= poWK -> nSrcXSize || iSrcY - 1 < 0 || iSrcY + 2 >= poWK -> nSrcYSize )
>6823	ReturnStatement	 
>6824	CallExpression	GWKBilinearResample ( poWK , iBand , dfSrcX , dfSrcY , pdfDensity , pdfReal , pdfImag )
>6825	ArgumentList	poWK
>6826	Argument	pdfImag
>6827	Identifier	pdfImag
>6828	Argument	pdfReal
>6829	Identifier	pdfReal
>6830	Argument	pdfDensity
>6831	Identifier	pdfDensity
>6832	Argument	dfSrcY
>6833	Identifier	dfSrcY
>6834	Argument	dfSrcX
>6835	Identifier	dfSrcX
>6836	Argument	iBand
>6837	Identifier	iBand
>6838	Argument	poWK
>6839	Identifier	poWK
>6840	Callee	GWKBilinearResample
>6841	Identifier	GWKBilinearResample
>6842	Condition	 
>6843	OrExpression	iSrcX - 1 < 0 || iSrcX + 2 >= poWK -> nSrcXSize || iSrcY - 1 < 0 || iSrcY + 2 >= poWK -> nSrcYSize
>6844	OrExpression	iSrcX + 2 >= poWK -> nSrcXSize || iSrcY - 1 < 0 || iSrcY + 2 >= poWK -> nSrcYSize
>6845	OrExpression	iSrcY - 1 < 0 || iSrcY + 2 >= poWK -> nSrcYSize
>6846	RelationalExpression	iSrcY + 2 >= poWK -> nSrcYSize
>6847	PtrMemberAccess	poWK -> nSrcYSize
>6848	Identifier	nSrcYSize
>6849	Identifier	poWK
>6850	AdditiveExpression	iSrcY + 2
>6851	PrimaryExpression	2
>6852	Identifier	iSrcY
>6853	RelationalExpression	iSrcY - 1 < 0
>6854	PrimaryExpression	0
>6855	AdditiveExpression	iSrcY - 1
>6856	PrimaryExpression	1
>6857	Identifier	iSrcY
>6858	RelationalExpression	iSrcX + 2 >= poWK -> nSrcXSize
>6859	PtrMemberAccess	poWK -> nSrcXSize
>6860	Identifier	nSrcXSize
>6861	Identifier	poWK
>6862	AdditiveExpression	iSrcX + 2
>6863	PrimaryExpression	2
>6864	Identifier	iSrcX
>6865	RelationalExpression	iSrcX - 1 < 0
>6866	PrimaryExpression	0
>6867	AdditiveExpression	iSrcX - 1
>6868	PrimaryExpression	1
>6869	Identifier	iSrcX
>6870	IdentifierDeclStatement	 
>6871	IdentifierDecl	i
>6872	Identifier	i
>6873	IdentifierDeclType	int
>6874	IdentifierDeclStatement	 
>6875	IdentifierDecl	adfImag [ 4 ] = { 0 , 0 , 0 , 0 }
>6876	AssignmentExpr	adfImag [ 4 ] = { 0 , 0 , 0 , 0 }
>6877	InitializerList	0
>6878	PrimaryExpression	0
>6879	PrimaryExpression	0
>6880	PrimaryExpression	0
>6881	PrimaryExpression	0
>6882	Identifier	adfImag
>6883	PrimaryExpression	4
>6884	Identifier	adfImag
>6885	IdentifierDeclType	double [ 4 ]
>6886	IdentifierDecl	adfReal [ 4 ]
>6887	PrimaryExpression	4
>6888	Identifier	adfReal
>6889	IdentifierDeclType	double [ 4 ]
>6890	IdentifierDecl	adfDensity [ 4 ]
>6891	PrimaryExpression	4
>6892	Identifier	adfDensity
>6893	IdentifierDeclType	double [ 4 ]
>6894	IdentifierDeclStatement	 
>6895	IdentifierDecl	adfValueImag [ 4 ]
>6896	PrimaryExpression	4
>6897	Identifier	adfValueImag
>6898	IdentifierDeclType	double [ 4 ]
>6899	IdentifierDecl	adfValueReal [ 4 ]
>6900	PrimaryExpression	4
>6901	Identifier	adfValueReal
>6902	IdentifierDeclType	double [ 4 ]
>6903	IdentifierDecl	adfValueDens [ 4 ]
>6904	PrimaryExpression	4
>6905	Identifier	adfValueDens
>6906	IdentifierDeclType	double [ 4 ]
>6907	IdentifierDeclStatement	 
>6908	IdentifierDecl	dfDeltaY3 = dfDeltaY2 * dfDeltaY
>6909	AssignmentExpr	dfDeltaY3 = dfDeltaY2 * dfDeltaY
>6910	MultiplicativeExpression	dfDeltaY2 * dfDeltaY
>6911	Identifier	dfDeltaY
>6912	Identifier	dfDeltaY2
>6913	Identifier	dfDeltaY3
>6914	Identifier	dfDeltaY3
>6915	IdentifierDeclType	double
>6916	IdentifierDeclStatement	 
>6917	IdentifierDecl	dfDeltaX3 = dfDeltaX2 * dfDeltaX
>6918	AssignmentExpr	dfDeltaX3 = dfDeltaX2 * dfDeltaX
>6919	MultiplicativeExpression	dfDeltaX2 * dfDeltaX
>6920	Identifier	dfDeltaX
>6921	Identifier	dfDeltaX2
>6922	Identifier	dfDeltaX3
>6923	Identifier	dfDeltaX3
>6924	IdentifierDeclType	double
>6925	IdentifierDeclStatement	 
>6926	IdentifierDecl	dfDeltaY2 = dfDeltaY * dfDeltaY
>6927	AssignmentExpr	dfDeltaY2 = dfDeltaY * dfDeltaY
>6928	MultiplicativeExpression	dfDeltaY * dfDeltaY
>6929	Identifier	dfDeltaY
>6930	Identifier	dfDeltaY
>6931	Identifier	dfDeltaY2
>6932	Identifier	dfDeltaY2
>6933	IdentifierDeclType	double
>6934	IdentifierDeclStatement	 
>6935	IdentifierDecl	dfDeltaX2 = dfDeltaX * dfDeltaX
>6936	AssignmentExpr	dfDeltaX2 = dfDeltaX * dfDeltaX
>6937	MultiplicativeExpression	dfDeltaX * dfDeltaX
>6938	Identifier	dfDeltaX
>6939	Identifier	dfDeltaX
>6940	Identifier	dfDeltaX2
>6941	Identifier	dfDeltaX2
>6942	IdentifierDeclType	double
>6943	IdentifierDeclStatement	 
>6944	IdentifierDecl	dfDeltaY = dfSrcY - 0.5 - iSrcY
>6945	AssignmentExpr	dfDeltaY = dfSrcY - 0.5 - iSrcY
>6946	AdditiveExpression	dfSrcY - 0.5 - iSrcY
>6947	AdditiveExpression	0.5 - iSrcY
>6948	Identifier	iSrcY
>6949	PrimaryExpression	0.5
>6950	Identifier	dfSrcY
>6951	Identifier	dfDeltaY
>6952	Identifier	dfDeltaY
>6953	IdentifierDeclType	double
>6954	IdentifierDeclStatement	 
>6955	IdentifierDecl	dfDeltaX = dfSrcX - 0.5 - iSrcX
>6956	AssignmentExpr	dfDeltaX = dfSrcX - 0.5 - iSrcX
>6957	AdditiveExpression	dfSrcX - 0.5 - iSrcX
>6958	AdditiveExpression	0.5 - iSrcX
>6959	Identifier	iSrcX
>6960	PrimaryExpression	0.5
>6961	Identifier	dfSrcX
>6962	Identifier	dfDeltaX
>6963	Identifier	dfDeltaX
>6964	IdentifierDeclType	double
>6965	IdentifierDeclStatement	 
>6966	IdentifierDecl	iSrcOffset = iSrcX + iSrcY * poWK -> nSrcXSize
>6967	AssignmentExpr	iSrcOffset = iSrcX + iSrcY * poWK -> nSrcXSize
>6968	AdditiveExpression	iSrcX + iSrcY * poWK -> nSrcXSize
>6969	MultiplicativeExpression	iSrcY * poWK -> nSrcXSize
>6970	PtrMemberAccess	poWK -> nSrcXSize
>6971	Identifier	nSrcXSize
>6972	Identifier	poWK
>6973	Identifier	iSrcY
>6974	Identifier	iSrcX
>6975	Identifier	iSrcOffset
>6976	Identifier	iSrcOffset
>6977	IdentifierDeclType	int
>6978	IdentifierDeclStatement	 
>6979	IdentifierDecl	iSrcY = ( int ) floor ( dfSrcY - 0.5 )
>6980	AssignmentExpr	iSrcY = ( int ) floor ( dfSrcY - 0.5 )
>6981	CastExpression	( int ) floor ( dfSrcY - 0.5 )
>6982	CallExpression	floor ( dfSrcY - 0.5 )
>6983	ArgumentList	dfSrcY - 0.5
>6984	Argument	dfSrcY - 0.5
>6985	AdditiveExpression	dfSrcY - 0.5
>6986	PrimaryExpression	0.5
>6987	Identifier	dfSrcY
>6988	Callee	floor
>6989	Identifier	floor
>6990	CastTarget	int
>6991	Identifier	iSrcY
>6992	Identifier	iSrcY
>6993	IdentifierDeclType	int
>6994	IdentifierDeclStatement	 
>6995	IdentifierDecl	iSrcX = ( int ) floor ( dfSrcX - 0.5 )
>6996	AssignmentExpr	iSrcX = ( int ) floor ( dfSrcX - 0.5 )
>6997	CastExpression	( int ) floor ( dfSrcX - 0.5 )
>6998	CallExpression	floor ( dfSrcX - 0.5 )
>6999	ArgumentList	dfSrcX - 0.5
>7000	Argument	dfSrcX - 0.5
>7001	AdditiveExpression	dfSrcX - 0.5
>7002	PrimaryExpression	0.5
>7003	Identifier	dfSrcX
>7004	Callee	floor
>7005	Identifier	floor
>7006	CastTarget	int
>7007	Identifier	iSrcX
>7008	Identifier	iSrcX
>7009	IdentifierDeclType	int
>7054	FunctionDef	GWKCubicResampleNoMasksByte (GDALWarpKernel * poWK , int iBand , double dfSrcX , double dfSrcY , GByte * pbValue)
>7055	ParameterList	GDALWarpKernel * poWK , int iBand , double dfSrcX , double dfSrcY , GByte * pbValue
>7056	Parameter	 
>7057	Identifier	pbValue
>7058	ParameterType	GByte *
>7059	Parameter	 
>7060	Identifier	dfSrcY
>7061	ParameterType	double
>7062	Parameter	 
>7063	Identifier	dfSrcX
>7064	ParameterType	double
>7065	Parameter	 
>7066	Identifier	iBand
>7067	ParameterType	int
>7068	Parameter	 
>7069	Identifier	poWK
>7070	ParameterType	GDALWarpKernel *
>7071	ReturnType	static int
>7072	CompoundStatement	 
>7073	ReturnStatement	 
>7074	Identifier	TRUE
>7075	IfStatement	if ( dfValue < 0.0 )
>7076	ElseStatement	else
>7077	IfStatement	if ( dfValue > 255.0 )
>7078	ElseStatement	else
>7079	ExpressionStatement	 
>7080	AssignmentExpr	* pbValue = ( GByte ) ( 0.5 + dfValue )
>7081	CastExpression	( GByte ) ( 0.5 + dfValue )
>7082	AdditiveExpression	0.5 + dfValue
>7083	Identifier	dfValue
>7084	PrimaryExpression	0.5
>7085	CastTarget	GByte
>7086	UnaryOp	* pbValue
>7087	Identifier	pbValue
>7088	UnaryOperator	*
>7089	ExpressionStatement	 
>7090	AssignmentExpr	* pbValue = 255
>7091	PrimaryExpression	255
>7092	UnaryOp	* pbValue
>7093	Identifier	pbValue
>7094	UnaryOperator	*
>7095	Condition	 
>7096	RelationalExpression	dfValue > 255.0
>7097	PrimaryExpression	255.0
>7098	Identifier	dfValue
>7099	ExpressionStatement	 
>7100	AssignmentExpr	* pbValue = 0
>7101	PrimaryExpression	0
>7102	UnaryOp	* pbValue
>7103	Identifier	pbValue
>7104	UnaryOperator	*
>7105	Condition	 
>7106	RelationalExpression	dfValue < 0.0
>7107	PrimaryExpression	0.0
>7108	Identifier	dfValue
>7109	IdentifierDeclStatement	 
>7110	IdentifierDecl	dfValue = CubicConvolution ( dfDeltaY , dfDeltaY2 , dfDeltaY3 , adfValue [ 0 ] , adfValue [ 1 ] , adfValue [ 2 ] , \
>7111	AssignmentExpr	dfValue = CubicConvolution ( dfDeltaY , dfDeltaY2 , dfDeltaY3 , adfValue [ 0 ] , adfValue [ 1 ] , adfValue [ \
>7112	CallExpression	CubicConvolution ( dfDeltaY , dfDeltaY2 , dfDeltaY3 , adfValue [ 0 ] , adfValue [ 1 ] , adfValue [ 2 ] , adfValue [ \
>7113	ArgumentList	dfDeltaY
>7114	Argument	adfValue [ 3 ]
>7115	ArrayIndexing	adfValue [ 3 ]
>7116	PrimaryExpression	3
>7117	Identifier	adfValue
>7118	Argument	adfValue [ 2 ]
>7119	ArrayIndexing	adfValue [ 2 ]
>7120	PrimaryExpression	2
>7121	Identifier	adfValue
>7122	Argument	adfValue [ 1 ]
>7123	ArrayIndexing	adfValue [ 1 ]
>7124	PrimaryExpression	1
>7125	Identifier	adfValue
>7126	Argument	adfValue [ 0 ]
>7127	ArrayIndexing	adfValue [ 0 ]
>7128	PrimaryExpression	0
>7129	Identifier	adfValue
>7130	Argument	dfDeltaY3
>7131	Identifier	dfDeltaY3
>7132	Argument	dfDeltaY2
>7133	Identifier	dfDeltaY2
>7134	Argument	dfDeltaY
>7135	Identifier	dfDeltaY
>7136	Callee	CubicConvolution
>7137	Identifier	CubicConvolution
>7138	Identifier	dfValue
>7139	Identifier	dfValue
>7140	IdentifierDeclType	double
>7141	ForStatement	for ( i = - 1 ; i < 3 ; i ++ )
>7142	CompoundStatement	 
>7143	ExpressionStatement	 
>7144	AssignmentExpr	adfValue [ i + 1 ] = CubicConvolution ( dfDeltaX , dfDeltaX2 , dfDeltaX3 , ( double ) poWK -> papabySrcImage [ \
>7145	CallExpression	CubicConvolution ( dfDeltaX , dfDeltaX2 , dfDeltaX3 , ( double ) poWK -> papabySrcImage [ iBand ] [ iOffset - 1 ] , ( \
>7146	ArgumentList	dfDeltaX
>7147	Argument	( double ) poWK -> papabySrcImage [ iBand ] [ iOffset + 2 ]
>7148	CastExpression	( double ) poWK -> papabySrcImage [ iBand ] [ iOffset + 2 ]
>7149	ArrayIndexing	poWK -> papabySrcImage [ iBand ] [ iOffset + 2 ]
>7150	AdditiveExpression	iOffset + 2
>7151	PrimaryExpression	2
>7152	Identifier	iOffset
>7153	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>7154	Identifier	iBand
>7155	PtrMemberAccess	poWK -> papabySrcImage
>7156	Identifier	papabySrcImage
>7157	Identifier	poWK
>7158	CastTarget	double
>7159	Argument	( double ) poWK -> papabySrcImage [ iBand ] [ iOffset + 1 ]
>7160	CastExpression	( double ) poWK -> papabySrcImage [ iBand ] [ iOffset + 1 ]
>7161	ArrayIndexing	poWK -> papabySrcImage [ iBand ] [ iOffset + 1 ]
>7162	AdditiveExpression	iOffset + 1
>7163	PrimaryExpression	1
>7164	Identifier	iOffset
>7165	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>7166	Identifier	iBand
>7167	PtrMemberAccess	poWK -> papabySrcImage
>7168	Identifier	papabySrcImage
>7169	Identifier	poWK
>7170	CastTarget	double
>7171	Argument	( double ) poWK -> papabySrcImage [ iBand ] [ iOffset ]
>7172	CastExpression	( double ) poWK -> papabySrcImage [ iBand ] [ iOffset ]
>7173	ArrayIndexing	poWK -> papabySrcImage [ iBand ] [ iOffset ]
>7174	Identifier	iOffset
>7175	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>7176	Identifier	iBand
>7177	PtrMemberAccess	poWK -> papabySrcImage
>7178	Identifier	papabySrcImage
>7179	Identifier	poWK
>7180	CastTarget	double
>7181	Argument	( double ) poWK -> papabySrcImage [ iBand ] [ iOffset - 1 ]
>7182	CastExpression	( double ) poWK -> papabySrcImage [ iBand ] [ iOffset - 1 ]
>7183	ArrayIndexing	poWK -> papabySrcImage [ iBand ] [ iOffset - 1 ]
>7184	AdditiveExpression	iOffset - 1
>7185	PrimaryExpression	1
>7186	Identifier	iOffset
>7187	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>7188	Identifier	iBand
>7189	PtrMemberAccess	poWK -> papabySrcImage
>7190	Identifier	papabySrcImage
>7191	Identifier	poWK
>7192	CastTarget	double
>7193	Argument	dfDeltaX3
>7194	Identifier	dfDeltaX3
>7195	Argument	dfDeltaX2
>7196	Identifier	dfDeltaX2
>7197	Argument	dfDeltaX
>7198	Identifier	dfDeltaX
>7199	Callee	CubicConvolution
>7200	Identifier	CubicConvolution
>7201	ArrayIndexing	adfValue [ i + 1 ]
>7202	AdditiveExpression	i + 1
>7203	PrimaryExpression	1
>7204	Identifier	i
>7205	Identifier	adfValue
>7206	IdentifierDeclStatement	 
>7207	IdentifierDecl	iOffset = iSrcOffset + i * poWK -> nSrcXSize
>7208	AssignmentExpr	iOffset = iSrcOffset + i * poWK -> nSrcXSize
>7209	AdditiveExpression	iSrcOffset + i * poWK -> nSrcXSize
>7210	MultiplicativeExpression	i * poWK -> nSrcXSize
>7211	PtrMemberAccess	poWK -> nSrcXSize
>7212	Identifier	nSrcXSize
>7213	Identifier	poWK
>7214	Identifier	i
>7215	Identifier	iSrcOffset
>7216	Identifier	iOffset
>7217	Identifier	iOffset
>7218	IdentifierDeclType	int
>7219	IncDecOp	 
>7220	IncDec	++
>7221	Identifier	i
>7222	Condition	 
>7223	RelationalExpression	i < 3
>7224	PrimaryExpression	3
>7225	Identifier	i
>7226	ForInit	 
>7227	AssignmentExpr	i = - 1
>7228	UnaryOp	- 1
>7229	PrimaryExpression	1
>7230	UnaryOperator	-
>7231	Identifier	i
>7232	IfStatement	if ( iSrcX - 1 < 0 || iSrcX + 2 >= poWK -> nSrcXSize || iSrcY - 1 < 0 || iSrcY + 2 >= poWK -> nSrcYSize )
>7233	ReturnStatement	 
>7234	CallExpression	GWKBilinearResampleNoMasksByte ( poWK , iBand , dfSrcX , dfSrcY , pbValue )
>7235	ArgumentList	poWK
>7236	Argument	pbValue
>7237	Identifier	pbValue
>7238	Argument	dfSrcY
>7239	Identifier	dfSrcY
>7240	Argument	dfSrcX
>7241	Identifier	dfSrcX
>7242	Argument	iBand
>7243	Identifier	iBand
>7244	Argument	poWK
>7245	Identifier	poWK
>7246	Callee	GWKBilinearResampleNoMasksByte
>7247	Identifier	GWKBilinearResampleNoMasksByte
>7248	Condition	 
>7249	OrExpression	iSrcX - 1 < 0 || iSrcX + 2 >= poWK -> nSrcXSize || iSrcY - 1 < 0 || iSrcY + 2 >= poWK -> nSrcYSize
>7250	OrExpression	iSrcX + 2 >= poWK -> nSrcXSize || iSrcY - 1 < 0 || iSrcY + 2 >= poWK -> nSrcYSize
>7251	OrExpression	iSrcY - 1 < 0 || iSrcY + 2 >= poWK -> nSrcYSize
>7252	RelationalExpression	iSrcY + 2 >= poWK -> nSrcYSize
>7253	PtrMemberAccess	poWK -> nSrcYSize
>7254	Identifier	nSrcYSize
>7255	Identifier	poWK
>7256	AdditiveExpression	iSrcY + 2
>7257	PrimaryExpression	2
>7258	Identifier	iSrcY
>7259	RelationalExpression	iSrcY - 1 < 0
>7260	PrimaryExpression	0
>7261	AdditiveExpression	iSrcY - 1
>7262	PrimaryExpression	1
>7263	Identifier	iSrcY
>7264	RelationalExpression	iSrcX + 2 >= poWK -> nSrcXSize
>7265	PtrMemberAccess	poWK -> nSrcXSize
>7266	Identifier	nSrcXSize
>7267	Identifier	poWK
>7268	AdditiveExpression	iSrcX + 2
>7269	PrimaryExpression	2
>7270	Identifier	iSrcX
>7271	RelationalExpression	iSrcX - 1 < 0
>7272	PrimaryExpression	0
>7273	AdditiveExpression	iSrcX - 1
>7274	PrimaryExpression	1
>7275	Identifier	iSrcX
>7276	IdentifierDeclStatement	 
>7277	IdentifierDecl	i
>7278	Identifier	i
>7279	IdentifierDeclType	int
>7280	IdentifierDeclStatement	 
>7281	IdentifierDecl	adfValue [ 4 ]
>7282	PrimaryExpression	4
>7283	Identifier	adfValue
>7284	IdentifierDeclType	double [ 4 ]
>7285	IdentifierDeclStatement	 
>7286	IdentifierDecl	dfDeltaY3 = dfDeltaY2 * dfDeltaY
>7287	AssignmentExpr	dfDeltaY3 = dfDeltaY2 * dfDeltaY
>7288	MultiplicativeExpression	dfDeltaY2 * dfDeltaY
>7289	Identifier	dfDeltaY
>7290	Identifier	dfDeltaY2
>7291	Identifier	dfDeltaY3
>7292	Identifier	dfDeltaY3
>7293	IdentifierDeclType	double
>7294	IdentifierDeclStatement	 
>7295	IdentifierDecl	dfDeltaX3 = dfDeltaX2 * dfDeltaX
>7296	AssignmentExpr	dfDeltaX3 = dfDeltaX2 * dfDeltaX
>7297	MultiplicativeExpression	dfDeltaX2 * dfDeltaX
>7298	Identifier	dfDeltaX
>7299	Identifier	dfDeltaX2
>7300	Identifier	dfDeltaX3
>7301	Identifier	dfDeltaX3
>7302	IdentifierDeclType	double
>7303	IdentifierDeclStatement	 
>7304	IdentifierDecl	dfDeltaY2 = dfDeltaY * dfDeltaY
>7305	AssignmentExpr	dfDeltaY2 = dfDeltaY * dfDeltaY
>7306	MultiplicativeExpression	dfDeltaY * dfDeltaY
>7307	Identifier	dfDeltaY
>7308	Identifier	dfDeltaY
>7309	Identifier	dfDeltaY2
>7310	Identifier	dfDeltaY2
>7311	IdentifierDeclType	double
>7312	IdentifierDeclStatement	 
>7313	IdentifierDecl	dfDeltaX2 = dfDeltaX * dfDeltaX
>7314	AssignmentExpr	dfDeltaX2 = dfDeltaX * dfDeltaX
>7315	MultiplicativeExpression	dfDeltaX * dfDeltaX
>7316	Identifier	dfDeltaX
>7317	Identifier	dfDeltaX
>7318	Identifier	dfDeltaX2
>7319	Identifier	dfDeltaX2
>7320	IdentifierDeclType	double
>7321	IdentifierDeclStatement	 
>7322	IdentifierDecl	dfDeltaY = dfSrcY - 0.5 - iSrcY
>7323	AssignmentExpr	dfDeltaY = dfSrcY - 0.5 - iSrcY
>7324	AdditiveExpression	dfSrcY - 0.5 - iSrcY
>7325	AdditiveExpression	0.5 - iSrcY
>7326	Identifier	iSrcY
>7327	PrimaryExpression	0.5
>7328	Identifier	dfSrcY
>7329	Identifier	dfDeltaY
>7330	Identifier	dfDeltaY
>7331	IdentifierDeclType	double
>7332	IdentifierDeclStatement	 
>7333	IdentifierDecl	dfDeltaX = dfSrcX - 0.5 - iSrcX
>7334	AssignmentExpr	dfDeltaX = dfSrcX - 0.5 - iSrcX
>7335	AdditiveExpression	dfSrcX - 0.5 - iSrcX
>7336	AdditiveExpression	0.5 - iSrcX
>7337	Identifier	iSrcX
>7338	PrimaryExpression	0.5
>7339	Identifier	dfSrcX
>7340	Identifier	dfDeltaX
>7341	Identifier	dfDeltaX
>7342	IdentifierDeclType	double
>7343	IdentifierDeclStatement	 
>7344	IdentifierDecl	iSrcOffset = iSrcX + iSrcY * poWK -> nSrcXSize
>7345	AssignmentExpr	iSrcOffset = iSrcX + iSrcY * poWK -> nSrcXSize
>7346	AdditiveExpression	iSrcX + iSrcY * poWK -> nSrcXSize
>7347	MultiplicativeExpression	iSrcY * poWK -> nSrcXSize
>7348	PtrMemberAccess	poWK -> nSrcXSize
>7349	Identifier	nSrcXSize
>7350	Identifier	poWK
>7351	Identifier	iSrcY
>7352	Identifier	iSrcX
>7353	Identifier	iSrcOffset
>7354	Identifier	iSrcOffset
>7355	IdentifierDeclType	int
>7356	IdentifierDeclStatement	 
>7357	IdentifierDecl	iSrcY = ( int ) floor ( dfSrcY - 0.5 )
>7358	AssignmentExpr	iSrcY = ( int ) floor ( dfSrcY - 0.5 )
>7359	CastExpression	( int ) floor ( dfSrcY - 0.5 )
>7360	CallExpression	floor ( dfSrcY - 0.5 )
>7361	ArgumentList	dfSrcY - 0.5
>7362	Argument	dfSrcY - 0.5
>7363	AdditiveExpression	dfSrcY - 0.5
>7364	PrimaryExpression	0.5
>7365	Identifier	dfSrcY
>7366	Callee	floor
>7367	Identifier	floor
>7368	CastTarget	int
>7369	Identifier	iSrcY
>7370	Identifier	iSrcY
>7371	IdentifierDeclType	int
>7372	IdentifierDeclStatement	 
>7373	IdentifierDecl	iSrcX = ( int ) floor ( dfSrcX - 0.5 )
>7374	AssignmentExpr	iSrcX = ( int ) floor ( dfSrcX - 0.5 )
>7375	CastExpression	( int ) floor ( dfSrcX - 0.5 )
>7376	CallExpression	floor ( dfSrcX - 0.5 )
>7377	ArgumentList	dfSrcX - 0.5
>7378	Argument	dfSrcX - 0.5
>7379	AdditiveExpression	dfSrcX - 0.5
>7380	PrimaryExpression	0.5
>7381	Identifier	dfSrcX
>7382	Callee	floor
>7383	Identifier	floor
>7384	CastTarget	int
>7385	Identifier	iSrcX
>7386	Identifier	iSrcX
>7387	IdentifierDeclType	int
>7427	FunctionDef	GWKCubicResampleNoMasksShort (GDALWarpKernel * poWK , int iBand , double dfSrcX , double dfSrcY , GInt16 * piValue)
>7428	ParameterList	GDALWarpKernel * poWK , int iBand , double dfSrcX , double dfSrcY , GInt16 * piValue
>7429	Parameter	 
>7430	Identifier	piValue
>7431	ParameterType	GInt16 *
>7432	Parameter	 
>7433	Identifier	dfSrcY
>7434	ParameterType	double
>7435	Parameter	 
>7436	Identifier	dfSrcX
>7437	ParameterType	double
>7438	Parameter	 
>7439	Identifier	iBand
>7440	ParameterType	int
>7441	Parameter	 
>7442	Identifier	poWK
>7443	ParameterType	GDALWarpKernel *
>7444	ReturnType	static int
>7445	CompoundStatement	 
>7446	ReturnStatement	 
>7447	Identifier	TRUE
>7448	ExpressionStatement	 
>7449	AssignmentExpr	* piValue = ( GInt16 ) CubicConvolution ( dfDeltaY , dfDeltaY2 , dfDeltaY3 , adfValue [ 0 ] , adfValue [ \
>7450	CastExpression	( GInt16 ) CubicConvolution ( dfDeltaY , dfDeltaY2 , dfDeltaY3 , adfValue [ 0 ] , adfValue [ 1 ] , adfValue [ 2 ] , \
>7451	CallExpression	CubicConvolution ( dfDeltaY , dfDeltaY2 , dfDeltaY3 , adfValue [ 0 ] , adfValue [ 1 ] , adfValue [ 2 ] , adfValue [ \
>7452	ArgumentList	dfDeltaY
>7453	Argument	adfValue [ 3 ]
>7454	ArrayIndexing	adfValue [ 3 ]
>7455	PrimaryExpression	3
>7456	Identifier	adfValue
>7457	Argument	adfValue [ 2 ]
>7458	ArrayIndexing	adfValue [ 2 ]
>7459	PrimaryExpression	2
>7460	Identifier	adfValue
>7461	Argument	adfValue [ 1 ]
>7462	ArrayIndexing	adfValue [ 1 ]
>7463	PrimaryExpression	1
>7464	Identifier	adfValue
>7465	Argument	adfValue [ 0 ]
>7466	ArrayIndexing	adfValue [ 0 ]
>7467	PrimaryExpression	0
>7468	Identifier	adfValue
>7469	Argument	dfDeltaY3
>7470	Identifier	dfDeltaY3
>7471	Argument	dfDeltaY2
>7472	Identifier	dfDeltaY2
>7473	Argument	dfDeltaY
>7474	Identifier	dfDeltaY
>7475	Callee	CubicConvolution
>7476	Identifier	CubicConvolution
>7477	CastTarget	GInt16
>7478	UnaryOp	* piValue
>7479	Identifier	piValue
>7480	UnaryOperator	*
>7481	ForStatement	for ( i = - 1 ; i < 3 ; i ++ )
>7482	CompoundStatement	 
>7483	ExpressionStatement	 
>7484	AssignmentExpr	adfValue [ i + 1 ] = CubicConvolution ( dfDeltaX , dfDeltaX2 , dfDeltaX3 , ( double ) ( ( GInt16 * ) \
>7485	CallExpression	CubicConvolution ( dfDeltaX , dfDeltaX2 , dfDeltaX3 , ( double ) ( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ \
>7486	ArgumentList	dfDeltaX
>7487	Argument	( double ) ( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iOffset + 2 ]
>7488	CastExpression	( double ) ( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iOffset + 2 ]
>7489	ArrayIndexing	( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iOffset + 2 ]
>7490	AdditiveExpression	iOffset + 2
>7491	PrimaryExpression	2
>7492	Identifier	iOffset
>7493	CastExpression	( GInt16 * ) poWK -> papabySrcImage [ iBand ]
>7494	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>7495	Identifier	iBand
>7496	PtrMemberAccess	poWK -> papabySrcImage
>7497	Identifier	papabySrcImage
>7498	Identifier	poWK
>7499	CastTarget	GInt16 *
>7500	CastTarget	double
>7501	Argument	( double ) ( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iOffset + 1 ]
>7502	CastExpression	( double ) ( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iOffset + 1 ]
>7503	ArrayIndexing	( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iOffset + 1 ]
>7504	AdditiveExpression	iOffset + 1
>7505	PrimaryExpression	1
>7506	Identifier	iOffset
>7507	CastExpression	( GInt16 * ) poWK -> papabySrcImage [ iBand ]
>7508	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>7509	Identifier	iBand
>7510	PtrMemberAccess	poWK -> papabySrcImage
>7511	Identifier	papabySrcImage
>7512	Identifier	poWK
>7513	CastTarget	GInt16 *
>7514	CastTarget	double
>7515	Argument	( double ) ( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iOffset ]
>7516	CastExpression	( double ) ( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iOffset ]
>7517	ArrayIndexing	( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iOffset ]
>7518	Identifier	iOffset
>7519	CastExpression	( GInt16 * ) poWK -> papabySrcImage [ iBand ]
>7520	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>7521	Identifier	iBand
>7522	PtrMemberAccess	poWK -> papabySrcImage
>7523	Identifier	papabySrcImage
>7524	Identifier	poWK
>7525	CastTarget	GInt16 *
>7526	CastTarget	double
>7527	Argument	( double ) ( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iOffset - 1 ]
>7528	CastExpression	( double ) ( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iOffset - 1 ]
>7529	ArrayIndexing	( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iOffset - 1 ]
>7530	AdditiveExpression	iOffset - 1
>7531	PrimaryExpression	1
>7532	Identifier	iOffset
>7533	CastExpression	( GInt16 * ) poWK -> papabySrcImage [ iBand ]
>7534	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>7535	Identifier	iBand
>7536	PtrMemberAccess	poWK -> papabySrcImage
>7537	Identifier	papabySrcImage
>7538	Identifier	poWK
>7539	CastTarget	GInt16 *
>7540	CastTarget	double
>7541	Argument	dfDeltaX3
>7542	Identifier	dfDeltaX3
>7543	Argument	dfDeltaX2
>7544	Identifier	dfDeltaX2
>7545	Argument	dfDeltaX
>7546	Identifier	dfDeltaX
>7547	Callee	CubicConvolution
>7548	Identifier	CubicConvolution
>7549	ArrayIndexing	adfValue [ i + 1 ]
>7550	AdditiveExpression	i + 1
>7551	PrimaryExpression	1
>7552	Identifier	i
>7553	Identifier	adfValue
>7554	IdentifierDeclStatement	 
>7555	IdentifierDecl	iOffset = iSrcOffset + i * poWK -> nSrcXSize
>7556	AssignmentExpr	iOffset = iSrcOffset + i * poWK -> nSrcXSize
>7557	AdditiveExpression	iSrcOffset + i * poWK -> nSrcXSize
>7558	MultiplicativeExpression	i * poWK -> nSrcXSize
>7559	PtrMemberAccess	poWK -> nSrcXSize
>7560	Identifier	nSrcXSize
>7561	Identifier	poWK
>7562	Identifier	i
>7563	Identifier	iSrcOffset
>7564	Identifier	iOffset
>7565	Identifier	iOffset
>7566	IdentifierDeclType	int
>7567	IncDecOp	 
>7568	IncDec	++
>7569	Identifier	i
>7570	Condition	 
>7571	RelationalExpression	i < 3
>7572	PrimaryExpression	3
>7573	Identifier	i
>7574	ForInit	 
>7575	AssignmentExpr	i = - 1
>7576	UnaryOp	- 1
>7577	PrimaryExpression	1
>7578	UnaryOperator	-
>7579	Identifier	i
>7580	IfStatement	if ( iSrcX - 1 < 0 || iSrcX + 2 >= poWK -> nSrcXSize || iSrcY - 1 < 0 || iSrcY + 2 >= poWK -> nSrcYSize )
>7581	ReturnStatement	 
>7582	CallExpression	GWKBilinearResampleNoMasksShort ( poWK , iBand , dfSrcX , dfSrcY , piValue )
>7583	ArgumentList	poWK
>7584	Argument	piValue
>7585	Identifier	piValue
>7586	Argument	dfSrcY
>7587	Identifier	dfSrcY
>7588	Argument	dfSrcX
>7589	Identifier	dfSrcX
>7590	Argument	iBand
>7591	Identifier	iBand
>7592	Argument	poWK
>7593	Identifier	poWK
>7594	Callee	GWKBilinearResampleNoMasksShort
>7595	Identifier	GWKBilinearResampleNoMasksShort
>7596	Condition	 
>7597	OrExpression	iSrcX - 1 < 0 || iSrcX + 2 >= poWK -> nSrcXSize || iSrcY - 1 < 0 || iSrcY + 2 >= poWK -> nSrcYSize
>7598	OrExpression	iSrcX + 2 >= poWK -> nSrcXSize || iSrcY - 1 < 0 || iSrcY + 2 >= poWK -> nSrcYSize
>7599	OrExpression	iSrcY - 1 < 0 || iSrcY + 2 >= poWK -> nSrcYSize
>7600	RelationalExpression	iSrcY + 2 >= poWK -> nSrcYSize
>7601	PtrMemberAccess	poWK -> nSrcYSize
>7602	Identifier	nSrcYSize
>7603	Identifier	poWK
>7604	AdditiveExpression	iSrcY + 2
>7605	PrimaryExpression	2
>7606	Identifier	iSrcY
>7607	RelationalExpression	iSrcY - 1 < 0
>7608	PrimaryExpression	0
>7609	AdditiveExpression	iSrcY - 1
>7610	PrimaryExpression	1
>7611	Identifier	iSrcY
>7612	RelationalExpression	iSrcX + 2 >= poWK -> nSrcXSize
>7613	PtrMemberAccess	poWK -> nSrcXSize
>7614	Identifier	nSrcXSize
>7615	Identifier	poWK
>7616	AdditiveExpression	iSrcX + 2
>7617	PrimaryExpression	2
>7618	Identifier	iSrcX
>7619	RelationalExpression	iSrcX - 1 < 0
>7620	PrimaryExpression	0
>7621	AdditiveExpression	iSrcX - 1
>7622	PrimaryExpression	1
>7623	Identifier	iSrcX
>7624	IdentifierDeclStatement	 
>7625	IdentifierDecl	i
>7626	Identifier	i
>7627	IdentifierDeclType	int
>7628	IdentifierDeclStatement	 
>7629	IdentifierDecl	adfValue [ 4 ]
>7630	PrimaryExpression	4
>7631	Identifier	adfValue
>7632	IdentifierDeclType	double [ 4 ]
>7633	IdentifierDeclStatement	 
>7634	IdentifierDecl	dfDeltaY3 = dfDeltaY2 * dfDeltaY
>7635	AssignmentExpr	dfDeltaY3 = dfDeltaY2 * dfDeltaY
>7636	MultiplicativeExpression	dfDeltaY2 * dfDeltaY
>7637	Identifier	dfDeltaY
>7638	Identifier	dfDeltaY2
>7639	Identifier	dfDeltaY3
>7640	Identifier	dfDeltaY3
>7641	IdentifierDeclType	double
>7642	IdentifierDeclStatement	 
>7643	IdentifierDecl	dfDeltaX3 = dfDeltaX2 * dfDeltaX
>7644	AssignmentExpr	dfDeltaX3 = dfDeltaX2 * dfDeltaX
>7645	MultiplicativeExpression	dfDeltaX2 * dfDeltaX
>7646	Identifier	dfDeltaX
>7647	Identifier	dfDeltaX2
>7648	Identifier	dfDeltaX3
>7649	Identifier	dfDeltaX3
>7650	IdentifierDeclType	double
>7651	IdentifierDeclStatement	 
>7652	IdentifierDecl	dfDeltaY2 = dfDeltaY * dfDeltaY
>7653	AssignmentExpr	dfDeltaY2 = dfDeltaY * dfDeltaY
>7654	MultiplicativeExpression	dfDeltaY * dfDeltaY
>7655	Identifier	dfDeltaY
>7656	Identifier	dfDeltaY
>7657	Identifier	dfDeltaY2
>7658	Identifier	dfDeltaY2
>7659	IdentifierDeclType	double
>7660	IdentifierDeclStatement	 
>7661	IdentifierDecl	dfDeltaX2 = dfDeltaX * dfDeltaX
>7662	AssignmentExpr	dfDeltaX2 = dfDeltaX * dfDeltaX
>7663	MultiplicativeExpression	dfDeltaX * dfDeltaX
>7664	Identifier	dfDeltaX
>7665	Identifier	dfDeltaX
>7666	Identifier	dfDeltaX2
>7667	Identifier	dfDeltaX2
>7668	IdentifierDeclType	double
>7669	IdentifierDeclStatement	 
>7670	IdentifierDecl	dfDeltaY = dfSrcY - 0.5 - iSrcY
>7671	AssignmentExpr	dfDeltaY = dfSrcY - 0.5 - iSrcY
>7672	AdditiveExpression	dfSrcY - 0.5 - iSrcY
>7673	AdditiveExpression	0.5 - iSrcY
>7674	Identifier	iSrcY
>7675	PrimaryExpression	0.5
>7676	Identifier	dfSrcY
>7677	Identifier	dfDeltaY
>7678	Identifier	dfDeltaY
>7679	IdentifierDeclType	double
>7680	IdentifierDeclStatement	 
>7681	IdentifierDecl	dfDeltaX = dfSrcX - 0.5 - iSrcX
>7682	AssignmentExpr	dfDeltaX = dfSrcX - 0.5 - iSrcX
>7683	AdditiveExpression	dfSrcX - 0.5 - iSrcX
>7684	AdditiveExpression	0.5 - iSrcX
>7685	Identifier	iSrcX
>7686	PrimaryExpression	0.5
>7687	Identifier	dfSrcX
>7688	Identifier	dfDeltaX
>7689	Identifier	dfDeltaX
>7690	IdentifierDeclType	double
>7691	IdentifierDeclStatement	 
>7692	IdentifierDecl	iSrcOffset = iSrcX + iSrcY * poWK -> nSrcXSize
>7693	AssignmentExpr	iSrcOffset = iSrcX + iSrcY * poWK -> nSrcXSize
>7694	AdditiveExpression	iSrcX + iSrcY * poWK -> nSrcXSize
>7695	MultiplicativeExpression	iSrcY * poWK -> nSrcXSize
>7696	PtrMemberAccess	poWK -> nSrcXSize
>7697	Identifier	nSrcXSize
>7698	Identifier	poWK
>7699	Identifier	iSrcY
>7700	Identifier	iSrcX
>7701	Identifier	iSrcOffset
>7702	Identifier	iSrcOffset
>7703	IdentifierDeclType	int
>7704	IdentifierDeclStatement	 
>7705	IdentifierDecl	iSrcY = ( int ) floor ( dfSrcY - 0.5 )
>7706	AssignmentExpr	iSrcY = ( int ) floor ( dfSrcY - 0.5 )
>7707	CastExpression	( int ) floor ( dfSrcY - 0.5 )
>7708	CallExpression	floor ( dfSrcY - 0.5 )
>7709	ArgumentList	dfSrcY - 0.5
>7710	Argument	dfSrcY - 0.5
>7711	AdditiveExpression	dfSrcY - 0.5
>7712	PrimaryExpression	0.5
>7713	Identifier	dfSrcY
>7714	Callee	floor
>7715	Identifier	floor
>7716	CastTarget	int
>7717	Identifier	iSrcY
>7718	Identifier	iSrcY
>7719	IdentifierDeclType	int
>7720	IdentifierDeclStatement	 
>7721	IdentifierDecl	iSrcX = ( int ) floor ( dfSrcX - 0.5 )
>7722	AssignmentExpr	iSrcX = ( int ) floor ( dfSrcX - 0.5 )
>7723	CastExpression	( int ) floor ( dfSrcX - 0.5 )
>7724	CallExpression	floor ( dfSrcX - 0.5 )
>7725	ArgumentList	dfSrcX - 0.5
>7726	Argument	dfSrcX - 0.5
>7727	AdditiveExpression	dfSrcX - 0.5
>7728	PrimaryExpression	0.5
>7729	Identifier	dfSrcX
>7730	Callee	floor
>7731	Identifier	floor
>7732	CastTarget	int
>7733	Identifier	iSrcX
>7734	Identifier	iSrcX
>7735	IdentifierDeclType	int
>7774	FunctionDef	GWKLanczosSinc (double dfX , double dfR)
>7775	ParameterList	double dfX , double dfR
>7776	Parameter	 
>7777	Identifier	dfR
>7778	ParameterType	double
>7779	Parameter	 
>7780	Identifier	dfX
>7781	ParameterType	double
>7782	ReturnType	static double
>7783	CompoundStatement	 
>7784	ReturnStatement	 
>7785	MultiplicativeExpression	sin ( dfPIX ) * sin ( dfPIXoverR ) / dfPIX2overR
>7786	MultiplicativeExpression	sin ( dfPIXoverR ) / dfPIX2overR
>7787	Identifier	dfPIX2overR
>7788	CallExpression	sin ( dfPIXoverR )
>7789	ArgumentList	dfPIXoverR
>7790	Argument	dfPIXoverR
>7791	Identifier	dfPIXoverR
>7792	Callee	sin
>7793	Identifier	sin
>7794	CallExpression	sin ( dfPIX )
>7795	ArgumentList	dfPIX
>7796	Argument	dfPIX
>7797	Identifier	dfPIX
>7798	Callee	sin
>7799	Identifier	sin
>7800	IdentifierDeclStatement	 
>7801	IdentifierDecl	dfPIX2overR = dfPIX * dfPIXoverR
>7802	AssignmentExpr	dfPIX2overR = dfPIX * dfPIXoverR
>7803	MultiplicativeExpression	dfPIX * dfPIXoverR
>7804	Identifier	dfPIXoverR
>7805	Identifier	dfPIX
>7806	Identifier	dfPIX2overR
>7807	Identifier	dfPIX2overR
>7808	IdentifierDeclType	const double
>7809	IdentifierDeclStatement	 
>7810	IdentifierDecl	dfPIXoverR = dfPIX / dfR
>7811	AssignmentExpr	dfPIXoverR = dfPIX / dfR
>7812	MultiplicativeExpression	dfPIX / dfR
>7813	Identifier	dfR
>7814	Identifier	dfPIX
>7815	Identifier	dfPIXoverR
>7816	Identifier	dfPIXoverR
>7817	IdentifierDeclType	const double
>7818	IdentifierDeclStatement	 
>7819	IdentifierDecl	dfPIX = GWK_PI * dfX
>7820	AssignmentExpr	dfPIX = GWK_PI * dfX
>7821	MultiplicativeExpression	GWK_PI * dfX
>7822	Identifier	dfX
>7823	Identifier	GWK_PI
>7824	Identifier	dfPIX
>7825	Identifier	dfPIX
>7826	IdentifierDeclType	const double
>7827	IfStatement	if ( dfX == 0.0 )
>7828	ReturnStatement	 
>7829	PrimaryExpression	1.0
>7830	Condition	 
>7831	EqualityExpression	dfX == 0.0
>7832	PrimaryExpression	0.0
>7833	Identifier	dfX
>7844	FunctionDef	GWKBSpline (double x)
>7845	ParameterList	double x
>7846	Parameter	 
>7847	Identifier	x
>7848	ParameterType	double
>7849	ReturnType	static double
>7850	CompoundStatement	 
>7851	ReturnStatement	 
>7852	MultiplicativeExpression	( ( ( xp2 > 0.0 ) ? ( ( xp1 > 0.0 ) ? ( ( x > 0.0 ) ? ( ( xm1 > 0.0 ) ? - 4.0 * xm1 * xm1 * xm1 
>7853	PrimaryExpression	0.166666666666666666666
>7854	ConditionalExpression	( xp2 > 0.0 ) ? ( ( xp1 > 0.0 ) ? ( ( x > 0.0 ) ? ( ( xm1 > 0.0 ) ? - 4.0 * xm1 * xm1 * xm1 
>7855	PrimaryExpression	0.0
>7856	AdditiveExpression	( ( xp1 > 0.0 ) ? ( ( x > 0.0 ) ? ( ( xm1 > 0.0 ) ? - 4.0 * xm1 * xm1 * xm1 
>7857	Identifier	xp2c
>7858	ConditionalExpression	( xp1 > 0.0 ) ? ( ( x > 0.0 ) ? ( ( xm1 > 0.0 ) ? - 4.0 * xm1 * xm1 * xm1 
>7859	PrimaryExpression	0.0
>7860	AdditiveExpression	( ( x > 0.0 ) ? ( ( xm1 > 0.0 ) ? - 4.0 * xm1 * xm1 * xm1 
>7861	MultiplicativeExpression	- 4.0 * xp1 * xp1 * xp1
>7862	MultiplicativeExpression	xp1 * xp1 * xp1
>7863	MultiplicativeExpression	xp1 * xp1
>7864	Identifier	xp1
>7865	Identifier	xp1
>7866	Identifier	xp1
>7867	UnaryOp	- 4.0
>7868	PrimaryExpression	4.0
>7869	UnaryOperator	-
>7870	ConditionalExpression	( x > 0.0 ) ? ( ( xm1 > 0.0 ) ? - 4.0 * xm1 * xm1 * xm1 
>7871	PrimaryExpression	0.0
>7872	AdditiveExpression	( ( xm1 > 0.0 ) ? - 4.0 * xm1 * xm1 * xm1 
>7873	MultiplicativeExpression	6.0 * x * x * x
>7874	MultiplicativeExpression	x * x * x
>7875	MultiplicativeExpression	x * x
>7876	Identifier	x
>7877	Identifier	x
>7878	Identifier	x
>7879	PrimaryExpression	6.0
>7880	ConditionalExpression	( xm1 > 0.0 ) ? - 4.0 * xm1 * xm1 * xm1 
>7881	PrimaryExpression	0.0
>7882	MultiplicativeExpression	- 4.0 * xm1 * xm1 * xm1
>7883	MultiplicativeExpression	xm1 * xm1 * xm1
>7884	MultiplicativeExpression	xm1 * xm1
>7885	Identifier	xm1
>7886	Identifier	xm1
>7887	Identifier	xm1
>7888	UnaryOp	- 4.0
>7889	PrimaryExpression	4.0
>7890	UnaryOperator	-
>7891	Condition	xm1 > 0.0
>7892	RelationalExpression	xm1 > 0.0
>7893	PrimaryExpression	0.0
>7894	Identifier	xm1
>7895	Condition	x > 0.0
>7896	RelationalExpression	x > 0.0
>7897	PrimaryExpression	0.0
>7898	Identifier	x
>7899	Condition	xp1 > 0.0
>7900	RelationalExpression	xp1 > 0.0
>7901	PrimaryExpression	0.0
>7902	Identifier	xp1
>7903	Condition	xp2 > 0.0
>7904	RelationalExpression	xp2 > 0.0
>7905	PrimaryExpression	0.0
>7906	Identifier	xp2
>7907	IdentifierDeclStatement	 
>7908	IdentifierDecl	xp2c = xp2 * xp2 * xp2
>7909	AssignmentExpr	xp2c = xp2 * xp2 * xp2
>7910	MultiplicativeExpression	xp2 * xp2 * xp2
>7911	MultiplicativeExpression	xp2 * xp2
>7912	Identifier	xp2
>7913	Identifier	xp2
>7914	Identifier	xp2
>7915	Identifier	xp2c
>7916	Identifier	xp2c
>7917	IdentifierDeclType	double
>7918	IdentifierDeclStatement	 
>7919	IdentifierDecl	xm1 = x - 1.0
>7920	AssignmentExpr	xm1 = x - 1.0
>7921	AdditiveExpression	x - 1.0
>7922	PrimaryExpression	1.0
>7923	Identifier	x
>7924	Identifier	xm1
>7925	Identifier	xm1
>7926	IdentifierDeclType	double
>7927	IdentifierDeclStatement	 
>7928	IdentifierDecl	xp1 = x + 1.0
>7929	AssignmentExpr	xp1 = x + 1.0
>7930	AdditiveExpression	x + 1.0
>7931	PrimaryExpression	1.0
>7932	Identifier	x
>7933	Identifier	xp1
>7934	Identifier	xp1
>7935	IdentifierDeclType	double
>7936	IdentifierDeclStatement	 
>7937	IdentifierDecl	xp2 = x + 2.0
>7938	AssignmentExpr	xp2 = x + 2.0
>7939	AdditiveExpression	x + 2.0
>7940	PrimaryExpression	2.0
>7941	Identifier	x
>7942	Identifier	xp2
>7943	Identifier	xp2
>7944	IdentifierDeclType	double
>7982	FunctionDef	GWKResampleCreateWrkStruct (GDALWarpKernel * poWK)
>7983	ParameterList	GDALWarpKernel * poWK
>7984	Parameter	 
>7985	Identifier	poWK
>7986	ParameterType	GDALWarpKernel *
>7987	ReturnType	static GWKResampleWrkStruct *
>7988	CompoundStatement	 
>7989	ReturnStatement	 
>7990	Identifier	psWrkStruct
>7991	IfStatement	if ( poWK -> eResample == GRA_Lanczos && poWK -> dfXFilter == 3.0 && poWK -> dfYFilter == 3.0 )
>7992	ElseStatement	else
>7993	ExpressionStatement	 
>7994	AssignmentExpr	psWrkStruct -> pfnGWKResample = GWKResample
>7995	Identifier	GWKResample
>7996	PtrMemberAccess	psWrkStruct -> pfnGWKResample
>7997	Identifier	pfnGWKResample
>7998	Identifier	psWrkStruct
>7999	CompoundStatement	 
>8000	IfStatement	if ( dfYScale < 1.0 )
>8001	CompoundStatement	 
>8002	ForStatement	for ( int j = jMin ; j <= jMax ; ++ j )
>8003	CompoundStatement	 
>8004	ExpressionStatement	 
>8005	AssignmentExpr	psWrkStruct -> padfWeightsY [ j - poWK -> nFiltInitY ] = GWKLanczosSinc ( j * dfYScale , poWK -> dfYFilter ) * \
>8006	MultiplicativeExpression	GWKLanczosSinc ( j * dfYScale , poWK -> dfYFilter ) * dfYScale
>8007	Identifier	dfYScale
>8008	CallExpression	GWKLanczosSinc ( j * dfYScale , poWK -> dfYFilter )
>8009	ArgumentList	j * dfYScale
>8010	Argument	poWK -> dfYFilter
>8011	PtrMemberAccess	poWK -> dfYFilter
>8012	Identifier	dfYFilter
>8013	Identifier	poWK
>8014	Argument	j * dfYScale
>8015	MultiplicativeExpression	j * dfYScale
>8016	Identifier	dfYScale
>8017	Identifier	j
>8018	Callee	GWKLanczosSinc
>8019	Identifier	GWKLanczosSinc
>8020	ArrayIndexing	psWrkStruct -> padfWeightsY [ j - poWK -> nFiltInitY ]
>8021	AdditiveExpression	j - poWK -> nFiltInitY
>8022	PtrMemberAccess	poWK -> nFiltInitY
>8023	Identifier	nFiltInitY
>8024	Identifier	poWK
>8025	Identifier	j
>8026	PtrMemberAccess	psWrkStruct -> padfWeightsY
>8027	Identifier	padfWeightsY
>8028	Identifier	psWrkStruct
>8029	UnaryExpression	 
>8030	Identifier	j
>8031	IncDec	++
>8032	Condition	 
>8033	RelationalExpression	j <= jMax
>8034	Identifier	jMax
>8035	Identifier	j
>8036	ForInit	 
>8037	IdentifierDeclStatement	int j = jMin ;
>8038	IdentifierDecl	j = jMin
>8039	AssignmentExpr	j = jMin
>8040	Identifier	jMin
>8041	Identifier	jMin
>8042	Identifier	j
>8043	IdentifierDeclType	int
>8044	WhileStatement	while ( jMax * dfYScale > 3.0 )
>8045	ExpressionStatement	 
>8046	IncDecOp	jMax --
>8047	IncDec	--
>8048	Identifier	jMax
>8049	Condition	 
>8050	RelationalExpression	jMax * dfYScale > 3.0
>8051	PrimaryExpression	3.0
>8052	MultiplicativeExpression	jMax * dfYScale
>8053	Identifier	dfYScale
>8054	Identifier	jMax
>8055	WhileStatement	while ( jMin * dfYScale < - 3.0 )
>8056	ExpressionStatement	 
>8057	IncDecOp	jMin ++
>8058	IncDec	++
>8059	Identifier	jMin
>8060	Condition	 
>8061	RelationalExpression	jMin * dfYScale < - 3.0
>8062	UnaryOp	- 3.0
>8063	PrimaryExpression	3.0
>8064	UnaryOperator	-
>8065	MultiplicativeExpression	jMin * dfYScale
>8066	Identifier	dfYScale
>8067	Identifier	jMin
>8068	IdentifierDeclStatement	 
>8069	IdentifierDecl	jMax = poWK -> nYRadius
>8070	AssignmentExpr	jMax = poWK -> nYRadius
>8071	PtrMemberAccess	poWK -> nYRadius
>8072	Identifier	nYRadius
>8073	Identifier	poWK
>8074	Identifier	jMax
>8075	Identifier	jMax
>8076	IdentifierDeclType	int
>8077	IdentifierDecl	jMin = poWK -> nFiltInitY
>8078	AssignmentExpr	jMin = poWK -> nFiltInitY
>8079	PtrMemberAccess	poWK -> nFiltInitY
>8080	Identifier	nFiltInitY
>8081	Identifier	poWK
>8082	Identifier	jMin
>8083	Identifier	jMin
>8084	IdentifierDeclType	int
>8085	Condition	 
>8086	RelationalExpression	dfYScale < 1.0
>8087	PrimaryExpression	1.0
>8088	Identifier	dfYScale
>8089	IdentifierDeclStatement	 
>8090	IdentifierDecl	dfYScale = poWK -> dfYScale
>8091	AssignmentExpr	dfYScale = poWK -> dfYScale
>8092	PtrMemberAccess	poWK -> dfYScale
>8093	Identifier	dfYScale
>8094	Identifier	poWK
>8095	Identifier	dfYScale
>8096	Identifier	dfYScale
>8097	IdentifierDeclType	const double
>8098	IfStatement	if ( dfXScale < 1.0 )
>8099	CompoundStatement	 
>8100	ForStatement	for ( int i = iMin ; i <= iMax ; ++ i )
>8101	CompoundStatement	 
>8102	ExpressionStatement	 
>8103	AssignmentExpr	psWrkStruct -> padfWeightsX [ i - poWK -> nFiltInitX ] = GWKLanczosSinc ( i * dfXScale , poWK -> dfXFilter ) * \
>8104	MultiplicativeExpression	GWKLanczosSinc ( i * dfXScale , poWK -> dfXFilter ) * dfXScale
>8105	Identifier	dfXScale
>8106	CallExpression	GWKLanczosSinc ( i * dfXScale , poWK -> dfXFilter )
>8107	ArgumentList	i * dfXScale
>8108	Argument	poWK -> dfXFilter
>8109	PtrMemberAccess	poWK -> dfXFilter
>8110	Identifier	dfXFilter
>8111	Identifier	poWK
>8112	Argument	i * dfXScale
>8113	MultiplicativeExpression	i * dfXScale
>8114	Identifier	dfXScale
>8115	Identifier	i
>8116	Callee	GWKLanczosSinc
>8117	Identifier	GWKLanczosSinc
>8118	ArrayIndexing	psWrkStruct -> padfWeightsX [ i - poWK -> nFiltInitX ]
>8119	AdditiveExpression	i - poWK -> nFiltInitX
>8120	PtrMemberAccess	poWK -> nFiltInitX
>8121	Identifier	nFiltInitX
>8122	Identifier	poWK
>8123	Identifier	i
>8124	PtrMemberAccess	psWrkStruct -> padfWeightsX
>8125	Identifier	padfWeightsX
>8126	Identifier	psWrkStruct
>8127	UnaryExpression	 
>8128	Identifier	i
>8129	IncDec	++
>8130	Condition	 
>8131	RelationalExpression	i <= iMax
>8132	Identifier	iMax
>8133	Identifier	i
>8134	ForInit	 
>8135	IdentifierDeclStatement	int i = iMin ;
>8136	IdentifierDecl	i = iMin
>8137	AssignmentExpr	i = iMin
>8138	Identifier	iMin
>8139	Identifier	iMin
>8140	Identifier	i
>8141	IdentifierDeclType	int
>8142	WhileStatement	while ( iMax * dfXScale > 3.0 )
>8143	ExpressionStatement	 
>8144	IncDecOp	iMax --
>8145	IncDec	--
>8146	Identifier	iMax
>8147	Condition	 
>8148	RelationalExpression	iMax * dfXScale > 3.0
>8149	PrimaryExpression	3.0
>8150	MultiplicativeExpression	iMax * dfXScale
>8151	Identifier	dfXScale
>8152	Identifier	iMax
>8153	WhileStatement	while ( iMin * dfXScale < - 3.0 )
>8154	ExpressionStatement	 
>8155	IncDecOp	iMin ++
>8156	IncDec	++
>8157	Identifier	iMin
>8158	Condition	 
>8159	RelationalExpression	iMin * dfXScale < - 3.0
>8160	UnaryOp	- 3.0
>8161	PrimaryExpression	3.0
>8162	UnaryOperator	-
>8163	MultiplicativeExpression	iMin * dfXScale
>8164	Identifier	dfXScale
>8165	Identifier	iMin
>8166	IdentifierDeclStatement	 
>8167	IdentifierDecl	iMax = poWK -> nXRadius
>8168	AssignmentExpr	iMax = poWK -> nXRadius
>8169	PtrMemberAccess	poWK -> nXRadius
>8170	Identifier	nXRadius
>8171	Identifier	poWK
>8172	Identifier	iMax
>8173	Identifier	iMax
>8174	IdentifierDeclType	int
>8175	IdentifierDecl	iMin = poWK -> nFiltInitX
>8176	AssignmentExpr	iMin = poWK -> nFiltInitX
>8177	PtrMemberAccess	poWK -> nFiltInitX
>8178	Identifier	nFiltInitX
>8179	Identifier	poWK
>8180	Identifier	iMin
>8181	Identifier	iMin
>8182	IdentifierDeclType	int
>8183	Condition	 
>8184	RelationalExpression	dfXScale < 1.0
>8185	PrimaryExpression	1.0
>8186	Identifier	dfXScale
>8187	IdentifierDeclStatement	 
>8188	IdentifierDecl	dfXScale = poWK -> dfXScale
>8189	AssignmentExpr	dfXScale = poWK -> dfXScale
>8190	PtrMemberAccess	poWK -> dfXScale
>8191	Identifier	dfXScale
>8192	Identifier	poWK
>8193	Identifier	dfXScale
>8194	Identifier	dfXScale
>8195	IdentifierDeclType	const double
>8196	ExpressionStatement	 
>8197	AssignmentExpr	psWrkStruct -> pfnGWKResample = GWKResampleOptimizedLanczos
>8198	Identifier	GWKResampleOptimizedLanczos
>8199	PtrMemberAccess	psWrkStruct -> pfnGWKResample
>8200	Identifier	pfnGWKResample
>8201	Identifier	psWrkStruct
>8202	Condition	 
>8203	AndExpression	poWK -> eResample == GRA_Lanczos && poWK -> dfXFilter == 3.0 && poWK -> dfYFilter == 3.0
>8204	AndExpression	poWK -> dfXFilter == 3.0 && poWK -> dfYFilter == 3.0
>8205	EqualityExpression	poWK -> dfYFilter == 3.0
>8206	PrimaryExpression	3.0
>8207	PtrMemberAccess	poWK -> dfYFilter
>8208	Identifier	dfYFilter
>8209	Identifier	poWK
>8210	EqualityExpression	poWK -> dfXFilter == 3.0
>8211	PrimaryExpression	3.0
>8212	PtrMemberAccess	poWK -> dfXFilter
>8213	Identifier	dfXFilter
>8214	Identifier	poWK
>8215	EqualityExpression	poWK -> eResample == GRA_Lanczos
>8216	Identifier	GRA_Lanczos
>8217	PtrMemberAccess	poWK -> eResample
>8218	Identifier	eResample
>8219	Identifier	poWK
>8220	ExpressionStatement	 
>8221	AssignmentExpr	psWrkStruct -> padfRowImag = ( double * ) CPLCalloc ( nXDist , sizeof ( double ) )
>8222	CastExpression	( double * ) CPLCalloc ( nXDist , sizeof ( double ) )
>8223	CallExpression	CPLCalloc ( nXDist , sizeof ( double ) )
>8224	ArgumentList	nXDist
>8225	Argument	sizeof ( double )
>8226	SizeofExpr	sizeof ( double )
>8227	SizeofOperand	double
>8228	Sizeof	sizeof
>8229	Argument	nXDist
>8230	Identifier	nXDist
>8231	Callee	CPLCalloc
>8232	Identifier	CPLCalloc
>8233	CastTarget	double *
>8234	PtrMemberAccess	psWrkStruct -> padfRowImag
>8235	Identifier	padfRowImag
>8236	Identifier	psWrkStruct
>8237	ExpressionStatement	 
>8238	AssignmentExpr	psWrkStruct -> padfRowReal = ( double * ) CPLCalloc ( nXDist , sizeof ( double ) )
>8239	CastExpression	( double * ) CPLCalloc ( nXDist , sizeof ( double ) )
>8240	CallExpression	CPLCalloc ( nXDist , sizeof ( double ) )
>8241	ArgumentList	nXDist
>8242	Argument	sizeof ( double )
>8243	SizeofExpr	sizeof ( double )
>8244	SizeofOperand	double
>8245	Sizeof	sizeof
>8246	Argument	nXDist
>8247	Identifier	nXDist
>8248	Callee	CPLCalloc
>8249	Identifier	CPLCalloc
>8250	CastTarget	double *
>8251	PtrMemberAccess	psWrkStruct -> padfRowReal
>8252	Identifier	padfRowReal
>8253	Identifier	psWrkStruct
>8254	IfStatement	if ( poWK -> pafUnifiedSrcDensity == NULL && poWK -> panUnifiedSrcValid == NULL && poWK -> papanBandSrcValid == \
>8255	ElseStatement	else
>8256	CompoundStatement	 
>8257	ExpressionStatement	 
>8258	AssignmentExpr	psWrkStruct -> padfRowDensity = ( double * ) CPLCalloc ( nXDist , sizeof ( double ) )
>8259	CastExpression	( double * ) CPLCalloc ( nXDist , sizeof ( double ) )
>8260	CallExpression	CPLCalloc ( nXDist , sizeof ( double ) )
>8261	ArgumentList	nXDist
>8262	Argument	sizeof ( double )
>8263	SizeofExpr	sizeof ( double )
>8264	SizeofOperand	double
>8265	Sizeof	sizeof
>8266	Argument	nXDist
>8267	Identifier	nXDist
>8268	Callee	CPLCalloc
>8269	Identifier	CPLCalloc
>8270	CastTarget	double *
>8271	PtrMemberAccess	psWrkStruct -> padfRowDensity
>8272	Identifier	padfRowDensity
>8273	Identifier	psWrkStruct
>8274	CompoundStatement	 
>8275	ExpressionStatement	 
>8276	AssignmentExpr	psWrkStruct -> padfRowDensity = NULL
>8277	Identifier	NULL
>8278	PtrMemberAccess	psWrkStruct -> padfRowDensity
>8279	Identifier	padfRowDensity
>8280	Identifier	psWrkStruct
>8281	Condition	 
>8282	AndExpression	poWK -> pafUnifiedSrcDensity == NULL && poWK -> panUnifiedSrcValid == NULL && poWK -> papanBandSrcValid == \
>8283	AndExpression	poWK -> panUnifiedSrcValid == NULL && poWK -> papanBandSrcValid == NULL
>8284	EqualityExpression	poWK -> papanBandSrcValid == NULL
>8285	Identifier	NULL
>8286	PtrMemberAccess	poWK -> papanBandSrcValid
>8287	Identifier	papanBandSrcValid
>8288	Identifier	poWK
>8289	EqualityExpression	poWK -> panUnifiedSrcValid == NULL
>8290	Identifier	NULL
>8291	PtrMemberAccess	poWK -> panUnifiedSrcValid
>8292	Identifier	panUnifiedSrcValid
>8293	Identifier	poWK
>8294	EqualityExpression	poWK -> pafUnifiedSrcDensity == NULL
>8295	Identifier	NULL
>8296	PtrMemberAccess	poWK -> pafUnifiedSrcDensity
>8297	Identifier	pafUnifiedSrcDensity
>8298	Identifier	poWK
>8299	ExpressionStatement	 
>8300	AssignmentExpr	psWrkStruct -> dfLastDeltaY = - 10
>8301	UnaryOp	- 10
>8302	PrimaryExpression	10
>8303	UnaryOperator	-
>8304	PtrMemberAccess	psWrkStruct -> dfLastDeltaY
>8305	Identifier	dfLastDeltaY
>8306	Identifier	psWrkStruct
>8307	ExpressionStatement	 
>8308	AssignmentExpr	psWrkStruct -> dfLastDeltaX = - 10
>8309	UnaryOp	- 10
>8310	PrimaryExpression	10
>8311	UnaryOperator	-
>8312	PtrMemberAccess	psWrkStruct -> dfLastDeltaX
>8313	Identifier	dfLastDeltaX
>8314	Identifier	psWrkStruct
>8315	ExpressionStatement	 
>8316	AssignmentExpr	psWrkStruct -> iLastSrcY = - 10
>8317	UnaryOp	- 10
>8318	PrimaryExpression	10
>8319	UnaryOperator	-
>8320	PtrMemberAccess	psWrkStruct -> iLastSrcY
>8321	Identifier	iLastSrcY
>8322	Identifier	psWrkStruct
>8323	ExpressionStatement	 
>8324	AssignmentExpr	psWrkStruct -> iLastSrcX = - 10
>8325	UnaryOp	- 10
>8326	PrimaryExpression	10
>8327	UnaryOperator	-
>8328	PtrMemberAccess	psWrkStruct -> iLastSrcX
>8329	Identifier	iLastSrcX
>8330	Identifier	psWrkStruct
>8331	ExpressionStatement	 
>8332	AssignmentExpr	psWrkStruct -> padfWeightsY = ( double * ) CPLCalloc ( nYDist , sizeof ( double ) )
>8333	CastExpression	( double * ) CPLCalloc ( nYDist , sizeof ( double ) )
>8334	CallExpression	CPLCalloc ( nYDist , sizeof ( double ) )
>8335	ArgumentList	nYDist
>8336	Argument	sizeof ( double )
>8337	SizeofExpr	sizeof ( double )
>8338	SizeofOperand	double
>8339	Sizeof	sizeof
>8340	Argument	nYDist
>8341	Identifier	nYDist
>8342	Callee	CPLCalloc
>8343	Identifier	CPLCalloc
>8344	CastTarget	double *
>8345	PtrMemberAccess	psWrkStruct -> padfWeightsY
>8346	Identifier	padfWeightsY
>8347	Identifier	psWrkStruct
>8348	ExpressionStatement	 
>8349	AssignmentExpr	psWrkStruct -> panCalcX = ( char * ) CPLMalloc ( nXDist * sizeof ( char ) )
>8350	CastExpression	( char * ) CPLMalloc ( nXDist * sizeof ( char ) )
>8351	CallExpression	CPLMalloc ( nXDist * sizeof ( char ) )
>8352	ArgumentList	nXDist * sizeof ( char )
>8353	Argument	nXDist * sizeof ( char )
>8354	MultiplicativeExpression	nXDist * sizeof ( char )
>8355	SizeofExpr	sizeof ( char )
>8356	SizeofOperand	char
>8357	Sizeof	sizeof
>8358	Identifier	nXDist
>8359	Callee	CPLMalloc
>8360	Identifier	CPLMalloc
>8361	CastTarget	char *
>8362	PtrMemberAccess	psWrkStruct -> panCalcX
>8363	Identifier	panCalcX
>8364	Identifier	psWrkStruct
>8365	ExpressionStatement	 
>8366	AssignmentExpr	psWrkStruct -> padfWeightsX = ( double * ) CPLCalloc ( nXDist , sizeof ( double ) )
>8367	CastExpression	( double * ) CPLCalloc ( nXDist , sizeof ( double ) )
>8368	CallExpression	CPLCalloc ( nXDist , sizeof ( double ) )
>8369	ArgumentList	nXDist
>8370	Argument	sizeof ( double )
>8371	SizeofExpr	sizeof ( double )
>8372	SizeofOperand	double
>8373	Sizeof	sizeof
>8374	Argument	nXDist
>8375	Identifier	nXDist
>8376	Callee	CPLCalloc
>8377	Identifier	CPLCalloc
>8378	CastTarget	double *
>8379	PtrMemberAccess	psWrkStruct -> padfWeightsX
>8380	Identifier	padfWeightsX
>8381	Identifier	psWrkStruct
>8382	IdentifierDeclStatement	 
>8383	IdentifierDecl	* psWrkStruct = ( GWKResampleWrkStruct * ) CPLMalloc ( sizeof ( GWKResampleWrkStruct ) )
>8384	AssignmentExpr	* psWrkStruct = ( GWKResampleWrkStruct * ) CPLMalloc ( sizeof ( GWKResampleWrkStruct ) )
>8385	CastExpression	( GWKResampleWrkStruct * ) CPLMalloc ( sizeof ( GWKResampleWrkStruct ) )
>8386	CallExpression	CPLMalloc ( sizeof ( GWKResampleWrkStruct ) )
>8387	ArgumentList	sizeof ( GWKResampleWrkStruct )
>8388	Argument	sizeof ( GWKResampleWrkStruct )
>8389	SizeofExpr	sizeof ( GWKResampleWrkStruct )
>8390	SizeofOperand	GWKResampleWrkStruct
>8391	Sizeof	sizeof
>8392	Callee	CPLMalloc
>8393	Identifier	CPLMalloc
>8394	CastTarget	GWKResampleWrkStruct *
>8395	Identifier	psWrkStruct
>8396	Identifier	psWrkStruct
>8397	IdentifierDeclType	GWKResampleWrkStruct *
>8398	IdentifierDeclStatement	 
>8399	IdentifierDecl	nYDist = ( poWK -> nYRadius + 1 ) * 2
>8400	AssignmentExpr	nYDist = ( poWK -> nYRadius + 1 ) * 2
>8401	MultiplicativeExpression	( poWK -> nYRadius + 1 ) * 2
>8402	PrimaryExpression	2
>8403	AdditiveExpression	poWK -> nYRadius + 1
>8404	PrimaryExpression	1
>8405	PtrMemberAccess	poWK -> nYRadius
>8406	Identifier	nYRadius
>8407	Identifier	poWK
>8408	Identifier	nYDist
>8409	Identifier	nYDist
>8410	IdentifierDeclType	int
>8411	IdentifierDeclStatement	 
>8412	IdentifierDecl	nXDist = ( poWK -> nXRadius + 1 ) * 2
>8413	AssignmentExpr	nXDist = ( poWK -> nXRadius + 1 ) * 2
>8414	MultiplicativeExpression	( poWK -> nXRadius + 1 ) * 2
>8415	PrimaryExpression	2
>8416	AdditiveExpression	poWK -> nXRadius + 1
>8417	PrimaryExpression	1
>8418	PtrMemberAccess	poWK -> nXRadius
>8419	Identifier	nXRadius
>8420	Identifier	poWK
>8421	Identifier	nXDist
>8422	Identifier	nXDist
>8423	IdentifierDeclType	int
>8479	FunctionDef	GWKResampleDeleteWrkStruct (GWKResampleWrkStruct * psWrkStruct)
>8480	ParameterList	GWKResampleWrkStruct * psWrkStruct
>8481	Parameter	 
>8482	Identifier	psWrkStruct
>8483	ParameterType	GWKResampleWrkStruct *
>8484	ReturnType	static void
>8485	CompoundStatement	 
>8486	ExpressionStatement	 
>8487	CallExpression	CPLFree ( psWrkStruct )
>8488	ArgumentList	psWrkStruct
>8489	Argument	psWrkStruct
>8490	Identifier	psWrkStruct
>8491	Callee	CPLFree
>8492	Identifier	CPLFree
>8493	ExpressionStatement	 
>8494	CallExpression	CPLFree ( psWrkStruct -> padfRowImag )
>8495	ArgumentList	psWrkStruct -> padfRowImag
>8496	Argument	psWrkStruct -> padfRowImag
>8497	PtrMemberAccess	psWrkStruct -> padfRowImag
>8498	Identifier	padfRowImag
>8499	Identifier	psWrkStruct
>8500	Callee	CPLFree
>8501	Identifier	CPLFree
>8502	ExpressionStatement	 
>8503	CallExpression	CPLFree ( psWrkStruct -> padfRowReal )
>8504	ArgumentList	psWrkStruct -> padfRowReal
>8505	Argument	psWrkStruct -> padfRowReal
>8506	PtrMemberAccess	psWrkStruct -> padfRowReal
>8507	Identifier	padfRowReal
>8508	Identifier	psWrkStruct
>8509	Callee	CPLFree
>8510	Identifier	CPLFree
>8511	ExpressionStatement	 
>8512	CallExpression	CPLFree ( psWrkStruct -> padfRowDensity )
>8513	ArgumentList	psWrkStruct -> padfRowDensity
>8514	Argument	psWrkStruct -> padfRowDensity
>8515	PtrMemberAccess	psWrkStruct -> padfRowDensity
>8516	Identifier	padfRowDensity
>8517	Identifier	psWrkStruct
>8518	Callee	CPLFree
>8519	Identifier	CPLFree
>8520	ExpressionStatement	 
>8521	CallExpression	CPLFree ( psWrkStruct -> panCalcX )
>8522	ArgumentList	psWrkStruct -> panCalcX
>8523	Argument	psWrkStruct -> panCalcX
>8524	PtrMemberAccess	psWrkStruct -> panCalcX
>8525	Identifier	panCalcX
>8526	Identifier	psWrkStruct
>8527	Callee	CPLFree
>8528	Identifier	CPLFree
>8529	ExpressionStatement	 
>8530	CallExpression	CPLFree ( psWrkStruct -> padfWeightsY )
>8531	ArgumentList	psWrkStruct -> padfWeightsY
>8532	Argument	psWrkStruct -> padfWeightsY
>8533	PtrMemberAccess	psWrkStruct -> padfWeightsY
>8534	Identifier	padfWeightsY
>8535	Identifier	psWrkStruct
>8536	Callee	CPLFree
>8537	Identifier	CPLFree
>8538	ExpressionStatement	 
>8539	CallExpression	CPLFree ( psWrkStruct -> padfWeightsX )
>8540	ArgumentList	psWrkStruct -> padfWeightsX
>8541	Argument	psWrkStruct -> padfWeightsX
>8542	PtrMemberAccess	psWrkStruct -> padfWeightsX
>8543	Identifier	padfWeightsX
>8544	Identifier	psWrkStruct
>8545	Callee	CPLFree
>8546	Identifier	CPLFree
>8558	FunctionDef	GWKResample (GDALWarpKernel * poWK , int iBand , double dfSrcX , double dfSrcY , double * pdfDensity , double * \
>8559	ParameterList	GDALWarpKernel * poWK , int iBand , double dfSrcX , double dfSrcY , double * pdfDensity , double * pdfReal , double * \
>8560	Parameter	 
>8561	Identifier	psWrkStruct
>8562	ParameterType	GWKResampleWrkStruct *
>8563	Parameter	 
>8564	Identifier	pdfImag
>8565	ParameterType	double *
>8566	Parameter	 
>8567	Identifier	pdfReal
>8568	ParameterType	double *
>8569	Parameter	 
>8570	Identifier	pdfDensity
>8571	ParameterType	double *
>8572	Parameter	 
>8573	Identifier	dfSrcY
>8574	ParameterType	double
>8575	Parameter	 
>8576	Identifier	dfSrcX
>8577	ParameterType	double
>8578	Parameter	 
>8579	Identifier	iBand
>8580	ParameterType	int
>8581	Parameter	 
>8582	Identifier	poWK
>8583	ParameterType	GDALWarpKernel *
>8584	ReturnType	static int
>8585	CompoundStatement	 
>8586	ReturnStatement	 
>8587	Identifier	TRUE
>8588	IfStatement	if ( dfAccumulatorWeight < 0.99999 || dfAccumulatorWeight > 1.00001 )
>8589	ElseStatement	else
>8590	CompoundStatement	 
>8591	IfStatement	if ( padfRowDensity != NULL )
>8592	ElseStatement	else
>8593	ExpressionStatement	 
>8594	AssignmentExpr	* pdfDensity = 1.0
>8595	PrimaryExpression	1.0
>8596	UnaryOp	* pdfDensity
>8597	Identifier	pdfDensity
>8598	UnaryOperator	*
>8599	ExpressionStatement	 
>8600	AssignmentExpr	* pdfDensity = dfAccumulatorDensity
>8601	Identifier	dfAccumulatorDensity
>8602	UnaryOp	* pdfDensity
>8603	Identifier	pdfDensity
>8604	UnaryOperator	*
>8605	Condition	 
>8606	EqualityExpression	padfRowDensity != NULL
>8607	Identifier	NULL
>8608	Identifier	padfRowDensity
>8609	ExpressionStatement	 
>8610	AssignmentExpr	* pdfImag = dfAccumulatorImag
>8611	Identifier	dfAccumulatorImag
>8612	UnaryOp	* pdfImag
>8613	Identifier	pdfImag
>8614	UnaryOperator	*
>8615	ExpressionStatement	 
>8616	AssignmentExpr	* pdfReal = dfAccumulatorReal
>8617	Identifier	dfAccumulatorReal
>8618	UnaryOp	* pdfReal
>8619	Identifier	pdfReal
>8620	UnaryOperator	*
>8621	CompoundStatement	 
>8622	IfStatement	if ( padfRowDensity != NULL )
>8623	ElseStatement	else
>8624	ExpressionStatement	 
>8625	AssignmentExpr	* pdfDensity = 1.0
>8626	PrimaryExpression	1.0
>8627	UnaryOp	* pdfDensity
>8628	Identifier	pdfDensity
>8629	UnaryOperator	*
>8630	ExpressionStatement	 
>8631	AssignmentExpr	* pdfDensity = dfAccumulatorDensity / dfAccumulatorWeight
>8632	MultiplicativeExpression	dfAccumulatorDensity / dfAccumulatorWeight
>8633	Identifier	dfAccumulatorWeight
>8634	Identifier	dfAccumulatorDensity
>8635	UnaryOp	* pdfDensity
>8636	Identifier	pdfDensity
>8637	UnaryOperator	*
>8638	Condition	 
>8639	EqualityExpression	padfRowDensity != NULL
>8640	Identifier	NULL
>8641	Identifier	padfRowDensity
>8642	ExpressionStatement	 
>8643	AssignmentExpr	* pdfImag = dfAccumulatorImag / dfAccumulatorWeight
>8644	MultiplicativeExpression	dfAccumulatorImag / dfAccumulatorWeight
>8645	Identifier	dfAccumulatorWeight
>8646	Identifier	dfAccumulatorImag
>8647	UnaryOp	* pdfImag
>8648	Identifier	pdfImag
>8649	UnaryOperator	*
>8650	ExpressionStatement	 
>8651	AssignmentExpr	* pdfReal = dfAccumulatorReal / dfAccumulatorWeight
>8652	MultiplicativeExpression	dfAccumulatorReal / dfAccumulatorWeight
>8653	Identifier	dfAccumulatorWeight
>8654	Identifier	dfAccumulatorReal
>8655	UnaryOp	* pdfReal
>8656	Identifier	pdfReal
>8657	UnaryOperator	*
>8658	Condition	 
>8659	OrExpression	dfAccumulatorWeight < 0.99999 || dfAccumulatorWeight > 1.00001
>8660	RelationalExpression	dfAccumulatorWeight > 1.00001
>8661	PrimaryExpression	1.00001
>8662	Identifier	dfAccumulatorWeight
>8663	RelationalExpression	dfAccumulatorWeight < 0.99999
>8664	PrimaryExpression	0.99999
>8665	Identifier	dfAccumulatorWeight
>8666	IfStatement	if ( dfAccumulatorWeight < 0.000001 || ( padfRowDensity != NULL && dfAccumulatorDensity < 0.000001 ) )
>8667	CompoundStatement	 
>8668	ReturnStatement	 
>8669	Identifier	FALSE
>8670	ExpressionStatement	 
>8671	AssignmentExpr	* pdfDensity = 0.0
>8672	PrimaryExpression	0.0
>8673	UnaryOp	* pdfDensity
>8674	Identifier	pdfDensity
>8675	UnaryOperator	*
>8676	Condition	 
>8677	OrExpression	dfAccumulatorWeight < 0.000001 || ( padfRowDensity != NULL && dfAccumulatorDensity < 0.000001 )
>8678	AndExpression	padfRowDensity != NULL && dfAccumulatorDensity < 0.000001
>8679	RelationalExpression	dfAccumulatorDensity < 0.000001
>8680	PrimaryExpression	0.000001
>8681	Identifier	dfAccumulatorDensity
>8682	EqualityExpression	padfRowDensity != NULL
>8683	Identifier	NULL
>8684	Identifier	padfRowDensity
>8685	RelationalExpression	dfAccumulatorWeight < 0.000001
>8686	PrimaryExpression	0.000001
>8687	Identifier	dfAccumulatorWeight
>8688	ForStatement	for ( ; j <= jMax ; ++ j )
>8689	CompoundStatement	 
>8690	ForStatement	for ( i = iMin ; i <= iMax ; ++ i )
>8691	CompoundStatement	 
>8692	ExpressionStatement	 
>8693	AssignmentExpr	dfAccumulatorWeight += dfWeight2
>8694	Identifier	dfWeight2
>8695	Identifier	dfAccumulatorWeight
>8696	IfStatement	if ( padfRowDensity != NULL )
>8697	ExpressionStatement	 
>8698	AssignmentExpr	dfAccumulatorDensity += padfRowDensity [ i - iMin ] * dfWeight2
>8699	MultiplicativeExpression	padfRowDensity [ i - iMin ] * dfWeight2
>8700	Identifier	dfWeight2
>8701	ArrayIndexing	padfRowDensity [ i - iMin ]
>8702	AdditiveExpression	i - iMin
>8703	Identifier	iMin
>8704	Identifier	i
>8705	Identifier	padfRowDensity
>8706	Identifier	dfAccumulatorDensity
>8707	Condition	 
>8708	EqualityExpression	padfRowDensity != NULL
>8709	Identifier	NULL
>8710	Identifier	padfRowDensity
>8711	ExpressionStatement	 
>8712	AssignmentExpr	dfAccumulatorImag += padfRowImag [ i - iMin ] * dfWeight2
>8713	MultiplicativeExpression	padfRowImag [ i - iMin ] * dfWeight2
>8714	Identifier	dfWeight2
>8715	ArrayIndexing	padfRowImag [ i - iMin ]
>8716	AdditiveExpression	i - iMin
>8717	Identifier	iMin
>8718	Identifier	i
>8719	Identifier	padfRowImag
>8720	Identifier	dfAccumulatorImag
>8721	ExpressionStatement	 
>8722	AssignmentExpr	dfAccumulatorReal += padfRowReal [ i - iMin ] * dfWeight2
>8723	MultiplicativeExpression	padfRowReal [ i - iMin ] * dfWeight2
>8724	Identifier	dfWeight2
>8725	ArrayIndexing	padfRowReal [ i - iMin ]
>8726	AdditiveExpression	i - iMin
>8727	Identifier	iMin
>8728	Identifier	i
>8729	Identifier	padfRowReal
>8730	Identifier	dfAccumulatorReal
>8731	IfStatement	if ( panCalcX [ i - iMin ] )
>8732	ElseStatement	else
>8733	CompoundStatement	 
>8734	ExpressionStatement	 
>8735	AssignmentExpr	panCalcX [ i - iMin ] = TRUE
>8736	Identifier	TRUE
>8737	ArrayIndexing	panCalcX [ i - iMin ]
>8738	AdditiveExpression	i - iMin
>8739	Identifier	iMin
>8740	Identifier	i
>8741	Identifier	panCalcX
>8742	ExpressionStatement	 
>8743	AssignmentExpr	dfWeight2 *= dfWeight1
>8744	Identifier	dfWeight1
>8745	Identifier	dfWeight2
>8746	IfStatement	if ( eResample == GRA_CubicSpline )
>8747	ElseStatement	else
>8748	CompoundStatement	 
>8749	IfStatement	if ( bXScaleBelow1 )
>8750	ElseStatement	else
>8751	ExpressionStatement	 
>8752	AssignmentExpr	padfWeightsX [ i - iMin ] = dfWeight2 = GWKLanczosSinc ( i - dfDeltaX , dfXFilter )
>8753	AssignmentExpr	dfWeight2 = GWKLanczosSinc ( i - dfDeltaX , dfXFilter )
>8754	CallExpression	GWKLanczosSinc ( i - dfDeltaX , dfXFilter )
>8755	ArgumentList	i - dfDeltaX
>8756	Argument	dfXFilter
>8757	Identifier	dfXFilter
>8758	Argument	i - dfDeltaX
>8759	AdditiveExpression	i - dfDeltaX
>8760	Identifier	dfDeltaX
>8761	Identifier	i
>8762	Callee	GWKLanczosSinc
>8763	Identifier	GWKLanczosSinc
>8764	Identifier	dfWeight2
>8765	ArrayIndexing	padfWeightsX [ i - iMin ]
>8766	AdditiveExpression	i - iMin
>8767	Identifier	iMin
>8768	Identifier	i
>8769	Identifier	padfWeightsX
>8770	ExpressionStatement	 
>8771	AssignmentExpr	padfWeightsX [ i - iMin ] = dfWeight2 = GWKLanczosSinc ( i * dfXScale , dfXFilter ) * dfXScale
>8772	AssignmentExpr	dfWeight2 = GWKLanczosSinc ( i * dfXScale , dfXFilter ) * dfXScale
>8773	MultiplicativeExpression	GWKLanczosSinc ( i * dfXScale , dfXFilter ) * dfXScale
>8774	Identifier	dfXScale
>8775	CallExpression	GWKLanczosSinc ( i * dfXScale , dfXFilter )
>8776	ArgumentList	i * dfXScale
>8777	Argument	dfXFilter
>8778	Identifier	dfXFilter
>8779	Argument	i * dfXScale
>8780	MultiplicativeExpression	i * dfXScale
>8781	Identifier	dfXScale
>8782	Identifier	i
>8783	Callee	GWKLanczosSinc
>8784	Identifier	GWKLanczosSinc
>8785	Identifier	dfWeight2
>8786	ArrayIndexing	padfWeightsX [ i - iMin ]
>8787	AdditiveExpression	i - iMin
>8788	Identifier	iMin
>8789	Identifier	i
>8790	Identifier	padfWeightsX
>8791	Condition	 
>8792	Identifier	bXScaleBelow1
>8793	ExpressionStatement	 
>8794	AssignmentExpr	padfWeightsX [ i - iMin ] = dfWeight2 = ( bXScaleBelow1 ) ? GWKBSpline ( ( double ) i * dfXScale ) * \
>8795	AssignmentExpr	dfWeight2 = ( bXScaleBelow1 ) ? GWKBSpline ( ( double ) i * dfXScale ) * dfXScale 
>8796	ConditionalExpression	( bXScaleBelow1 ) ? GWKBSpline ( ( double ) i * dfXScale ) * dfXScale 
>8797	CallExpression	GWKBSpline ( dfDeltaX - ( double ) i )
>8798	ArgumentList	dfDeltaX - ( double ) i
>8799	Argument	dfDeltaX - ( double ) i
>8800	AdditiveExpression	dfDeltaX - ( double ) i
>8801	CastExpression	( double ) i
>8802	Identifier	i
>8803	CastTarget	double
>8804	Identifier	dfDeltaX
>8805	Callee	GWKBSpline
>8806	Identifier	GWKBSpline
>8807	MultiplicativeExpression	GWKBSpline ( ( double ) i * dfXScale ) * dfXScale
>8808	Identifier	dfXScale
>8809	CallExpression	GWKBSpline ( ( double ) i * dfXScale )
>8810	ArgumentList	( double ) i * dfXScale
>8811	Argument	( double ) i * dfXScale
>8812	MultiplicativeExpression	( double ) i * dfXScale
>8813	Identifier	dfXScale
>8814	CastExpression	( double ) i
>8815	Identifier	i
>8816	CastTarget	double
>8817	Callee	GWKBSpline
>8818	Identifier	GWKBSpline
>8819	Condition	bXScaleBelow1
>8820	Identifier	bXScaleBelow1
>8821	Identifier	dfWeight2
>8822	ArrayIndexing	padfWeightsX [ i - iMin ]
>8823	AdditiveExpression	i - iMin
>8824	Identifier	iMin
>8825	Identifier	i
>8826	Identifier	padfWeightsX
>8827	Condition	 
>8828	EqualityExpression	eResample == GRA_CubicSpline
>8829	Identifier	GRA_CubicSpline
>8830	Identifier	eResample
>8831	ExpressionStatement	 
>8832	AssignmentExpr	dfWeight2 = dfWeight1 * padfWeightsX [ i - iMin ]
>8833	MultiplicativeExpression	dfWeight1 * padfWeightsX [ i - iMin ]
>8834	ArrayIndexing	padfWeightsX [ i - iMin ]
>8835	AdditiveExpression	i - iMin
>8836	Identifier	iMin
>8837	Identifier	i
>8838	Identifier	padfWeightsX
>8839	Identifier	dfWeight1
>8840	Identifier	dfWeight2
>8841	Condition	 
>8842	ArrayIndexing	panCalcX [ i - iMin ]
>8843	AdditiveExpression	i - iMin
>8844	Identifier	iMin
>8845	Identifier	i
>8846	Identifier	panCalcX
>8847	IfStatement	if ( padfRowDensity != NULL && padfRowDensity [ i - iMin ] < 0.000000001 )
>8848	ContinueStatement	 
>8849	Condition	 
>8850	AndExpression	padfRowDensity != NULL && padfRowDensity [ i - iMin ] < 0.000000001
>8851	RelationalExpression	padfRowDensity [ i - iMin ] < 0.000000001
>8852	PrimaryExpression	0.000000001
>8853	ArrayIndexing	padfRowDensity [ i - iMin ]
>8854	AdditiveExpression	i - iMin
>8855	Identifier	iMin
>8856	Identifier	i
>8857	Identifier	padfRowDensity
>8858	EqualityExpression	padfRowDensity != NULL
>8859	Identifier	NULL
>8860	Identifier	padfRowDensity
>8861	IdentifierDeclStatement	 
>8862	IdentifierDecl	dfWeight2
>8863	Identifier	dfWeight2
>8864	IdentifierDeclType	double
>8865	UnaryExpression	 
>8866	Identifier	i
>8867	IncDec	++
>8868	Condition	 
>8869	RelationalExpression	i <= iMax
>8870	Identifier	iMax
>8871	Identifier	i
>8872	ForInit	 
>8873	AssignmentExpr	i = iMin
>8874	Identifier	iMin
>8875	Identifier	i
>8876	IfStatement	if ( eResample == GRA_CubicSpline )
>8877	ElseStatement	else
>8878	CompoundStatement	 
>8879	IfStatement	if ( bYScaleBelow1 )
>8880	ElseStatement	else
>8881	ExpressionStatement	 
>8882	AssignmentExpr	dfWeight1 = GWKLanczosSinc ( j - dfDeltaY , dfYFilter )
>8883	CallExpression	GWKLanczosSinc ( j - dfDeltaY , dfYFilter )
>8884	ArgumentList	j - dfDeltaY
>8885	Argument	dfYFilter
>8886	Identifier	dfYFilter
>8887	Argument	j - dfDeltaY
>8888	AdditiveExpression	j - dfDeltaY
>8889	Identifier	dfDeltaY
>8890	Identifier	j
>8891	Callee	GWKLanczosSinc
>8892	Identifier	GWKLanczosSinc
>8893	Identifier	dfWeight1
>8894	ExpressionStatement	 
>8895	AssignmentExpr	dfWeight1 = GWKLanczosSinc ( j * dfYScale , dfYFilter ) * dfYScale
>8896	MultiplicativeExpression	GWKLanczosSinc ( j * dfYScale , dfYFilter ) * dfYScale
>8897	Identifier	dfYScale
>8898	CallExpression	GWKLanczosSinc ( j * dfYScale , dfYFilter )
>8899	ArgumentList	j * dfYScale
>8900	Argument	dfYFilter
>8901	Identifier	dfYFilter
>8902	Argument	j * dfYScale
>8903	MultiplicativeExpression	j * dfYScale
>8904	Identifier	dfYScale
>8905	Identifier	j
>8906	Callee	GWKLanczosSinc
>8907	Identifier	GWKLanczosSinc
>8908	Identifier	dfWeight1
>8909	Condition	 
>8910	Identifier	bYScaleBelow1
>8911	ExpressionStatement	 
>8912	AssignmentExpr	dfWeight1 = ( bYScaleBelow1 ) ? GWKBSpline ( ( ( double ) j ) * dfYScale ) * dfYScale 
>8913	ConditionalExpression	( bYScaleBelow1 ) ? GWKBSpline ( ( ( double ) j ) * dfYScale ) * dfYScale 
>8914	CallExpression	GWKBSpline ( ( ( double ) j ) - dfDeltaY )
>8915	ArgumentList	( ( double ) j ) - dfDeltaY
>8916	Argument	( ( double ) j ) - dfDeltaY
>8917	AdditiveExpression	( ( double ) j ) - dfDeltaY
>8918	Identifier	dfDeltaY
>8919	CastExpression	( double ) j
>8920	Identifier	j
>8921	CastTarget	double
>8922	Callee	GWKBSpline
>8923	Identifier	GWKBSpline
>8924	MultiplicativeExpression	GWKBSpline ( ( ( double ) j ) * dfYScale ) * dfYScale
>8925	Identifier	dfYScale
>8926	CallExpression	GWKBSpline ( ( ( double ) j ) * dfYScale )
>8927	ArgumentList	( ( double ) j ) * dfYScale
>8928	Argument	( ( double ) j ) * dfYScale
>8929	MultiplicativeExpression	( ( double ) j ) * dfYScale
>8930	Identifier	dfYScale
>8931	CastExpression	( double ) j
>8932	Identifier	j
>8933	CastTarget	double
>8934	Callee	GWKBSpline
>8935	Identifier	GWKBSpline
>8936	Condition	bYScaleBelow1
>8937	Identifier	bYScaleBelow1
>8938	Identifier	dfWeight1
>8939	Condition	 
>8940	EqualityExpression	eResample == GRA_CubicSpline
>8941	Identifier	GRA_CubicSpline
>8942	Identifier	eResample
>8943	IfStatement	if ( ! GWKGetPixelRow ( poWK , iBand , iRowOffset , ( iMax - iMin + 2 ) / 2 , padfRowDensity , padfRowReal , padfRowImag ) )
>8944	ContinueStatement	 
>8945	Condition	 
>8946	UnaryOp	! GWKGetPixelRow ( poWK , iBand , iRowOffset , ( iMax - iMin + 2 ) / 2 , padfRowDensity , padfRowReal , padfRowImag )
>8947	CallExpression	GWKGetPixelRow ( poWK , iBand , iRowOffset , ( iMax - iMin + 2 ) / 2 , padfRowDensity , padfRowReal , padfRowImag )
>8948	ArgumentList	poWK
>8949	Argument	padfRowImag
>8950	Identifier	padfRowImag
>8951	Argument	padfRowReal
>8952	Identifier	padfRowReal
>8953	Argument	padfRowDensity
>8954	Identifier	padfRowDensity
>8955	Argument	( iMax - iMin + 2 ) / 2
>8956	MultiplicativeExpression	( iMax - iMin + 2 ) / 2
>8957	PrimaryExpression	2
>8958	AdditiveExpression	iMax - iMin + 2
>8959	AdditiveExpression	iMin + 2
>8960	PrimaryExpression	2
>8961	Identifier	iMin
>8962	Identifier	iMax
>8963	Argument	iRowOffset
>8964	Identifier	iRowOffset
>8965	Argument	iBand
>8966	Identifier	iBand
>8967	Argument	poWK
>8968	Identifier	poWK
>8969	Callee	GWKGetPixelRow
>8970	Identifier	GWKGetPixelRow
>8971	UnaryOperator	!
>8972	ExpressionStatement	 
>8973	AssignmentExpr	iRowOffset += nSrcXSize
>8974	Identifier	nSrcXSize
>8975	Identifier	iRowOffset
>8976	IdentifierDeclStatement	 
>8977	IdentifierDecl	dfWeight1
>8978	Identifier	dfWeight1
>8979	IdentifierDeclType	double
>8980	UnaryExpression	 
>8981	Identifier	j
>8982	IncDec	++
>8983	Condition	 
>8984	RelationalExpression	j <= jMax
>8985	Identifier	jMax
>8986	Identifier	j
>8987	IdentifierDeclStatement	 
>8988	IdentifierDecl	iRowOffset = iSrcOffset + ( j - 1 ) * nSrcXSize + iMin
>8989	AssignmentExpr	iRowOffset = iSrcOffset + ( j - 1 ) * nSrcXSize + iMin
>8990	AdditiveExpression	iSrcOffset + ( j - 1 ) * nSrcXSize + iMin
>8991	AdditiveExpression	( j - 1 ) * nSrcXSize + iMin
>8992	Identifier	iMin
>8993	MultiplicativeExpression	( j - 1 ) * nSrcXSize
>8994	Identifier	nSrcXSize
>8995	AdditiveExpression	j - 1
>8996	PrimaryExpression	1
>8997	Identifier	j
>8998	Identifier	iSrcOffset
>8999	Identifier	iRowOffset
>9000	Identifier	iRowOffset
>9001	IdentifierDeclType	int
>9002	IdentifierDeclStatement	 
>9003	IdentifierDecl	bYScaleBelow1 = ( dfYScale < 1.0 )
>9004	AssignmentExpr	bYScaleBelow1 = ( dfYScale < 1.0 )
>9005	RelationalExpression	dfYScale < 1.0
>9006	PrimaryExpression	1.0
>9007	Identifier	dfYScale
>9008	Identifier	bYScaleBelow1
>9009	Identifier	bYScaleBelow1
>9010	IdentifierDeclType	const int
>9011	IdentifierDeclStatement	 
>9012	IdentifierDecl	bXScaleBelow1 = ( dfXScale < 1.0 )
>9013	AssignmentExpr	bXScaleBelow1 = ( dfXScale < 1.0 )
>9014	RelationalExpression	dfXScale < 1.0
>9015	PrimaryExpression	1.0
>9016	Identifier	dfXScale
>9017	Identifier	bXScaleBelow1
>9018	Identifier	bXScaleBelow1
>9019	IdentifierDeclType	const int
>9020	IfStatement	if ( iSrcX + iMax >= nSrcXSize )
>9021	ExpressionStatement	 
>9022	AssignmentExpr	iMax = nSrcXSize - iSrcX - 1
>9023	AdditiveExpression	nSrcXSize - iSrcX - 1
>9024	AdditiveExpression	iSrcX - 1
>9025	PrimaryExpression	1
>9026	Identifier	iSrcX
>9027	Identifier	nSrcXSize
>9028	Identifier	iMax
>9029	Condition	 
>9030	RelationalExpression	iSrcX + iMax >= nSrcXSize
>9031	Identifier	nSrcXSize
>9032	AdditiveExpression	iSrcX + iMax
>9033	Identifier	iMax
>9034	Identifier	iSrcX
>9035	IfStatement	if ( iSrcX + iMin < 0 )
>9036	ExpressionStatement	 
>9037	AssignmentExpr	iMin = - iSrcX
>9038	UnaryOp	- iSrcX
>9039	Identifier	iSrcX
>9040	UnaryOperator	-
>9041	Identifier	iMin
>9042	Condition	 
>9043	RelationalExpression	iSrcX + iMin < 0
>9044	PrimaryExpression	0
>9045	AdditiveExpression	iSrcX + iMin
>9046	Identifier	iMin
>9047	Identifier	iSrcX
>9048	IdentifierDeclStatement	 
>9049	IdentifierDecl	iMax = poWK -> nXRadius
>9050	AssignmentExpr	iMax = poWK -> nXRadius
>9051	PtrMemberAccess	poWK -> nXRadius
>9052	Identifier	nXRadius
>9053	Identifier	poWK
>9054	Identifier	iMax
>9055	Identifier	iMax
>9056	IdentifierDeclType	int
>9057	IdentifierDecl	iMin = poWK -> nFiltInitX
>9058	AssignmentExpr	iMin = poWK -> nFiltInitX
>9059	PtrMemberAccess	poWK -> nFiltInitX
>9060	Identifier	nFiltInitX
>9061	Identifier	poWK
>9062	Identifier	iMin
>9063	Identifier	iMin
>9064	IdentifierDeclType	int
>9065	IfStatement	if ( iSrcY + jMax >= nSrcYSize )
>9066	ExpressionStatement	 
>9067	AssignmentExpr	jMax = nSrcYSize - iSrcY - 1
>9068	AdditiveExpression	nSrcYSize - iSrcY - 1
>9069	AdditiveExpression	iSrcY - 1
>9070	PrimaryExpression	1
>9071	Identifier	iSrcY
>9072	Identifier	nSrcYSize
>9073	Identifier	jMax
>9074	Condition	 
>9075	RelationalExpression	iSrcY + jMax >= nSrcYSize
>9076	Identifier	nSrcYSize
>9077	AdditiveExpression	iSrcY + jMax
>9078	Identifier	jMax
>9079	Identifier	iSrcY
>9080	IfStatement	if ( iSrcY + j < 0 )
>9081	ExpressionStatement	 
>9082	AssignmentExpr	j = - iSrcY
>9083	UnaryOp	- iSrcY
>9084	Identifier	iSrcY
>9085	UnaryOperator	-
>9086	Identifier	j
>9087	Condition	 
>9088	RelationalExpression	iSrcY + j < 0
>9089	PrimaryExpression	0
>9090	AdditiveExpression	iSrcY + j
>9091	Identifier	j
>9092	Identifier	iSrcY
>9093	IdentifierDeclStatement	 
>9094	IdentifierDecl	jMax = poWK -> nYRadius
>9095	AssignmentExpr	jMax = poWK -> nYRadius
>9096	PtrMemberAccess	poWK -> nYRadius
>9097	Identifier	nYRadius
>9098	Identifier	poWK
>9099	Identifier	jMax
>9100	Identifier	jMax
>9101	IdentifierDeclType	int
>9102	ExpressionStatement	 
>9103	AssignmentExpr	j = poWK -> nFiltInitY
>9104	PtrMemberAccess	poWK -> nFiltInitY
>9105	Identifier	nFiltInitY
>9106	Identifier	poWK
>9107	Identifier	j
>9108	ExpressionStatement	 
>9109	CallExpression	CPLAssert ( eResample == GRA_CubicSpline || eResample == GRA_Lanczos )
>9110	ArgumentList	eResample == GRA_CubicSpline || eResample == GRA_Lanczos
>9111	Argument	eResample == GRA_CubicSpline || eResample == GRA_Lanczos
>9112	OrExpression	eResample == GRA_CubicSpline || eResample == GRA_Lanczos
>9113	EqualityExpression	eResample == GRA_Lanczos
>9114	Identifier	GRA_Lanczos
>9115	Identifier	eResample
>9116	EqualityExpression	eResample == GRA_CubicSpline
>9117	Identifier	GRA_CubicSpline
>9118	Identifier	eResample
>9119	Callee	CPLAssert
>9120	Identifier	CPLAssert
>9121	ExpressionStatement	 
>9122	CallExpression	memset ( panCalcX , FALSE , nXDist * sizeof ( char ) )
>9123	ArgumentList	panCalcX
>9124	Argument	nXDist * sizeof ( char )
>9125	MultiplicativeExpression	nXDist * sizeof ( char )
>9126	SizeofExpr	sizeof ( char )
>9127	SizeofOperand	char
>9128	Sizeof	sizeof
>9129	Identifier	nXDist
>9130	Argument	FALSE
>9131	Identifier	FALSE
>9132	Argument	panCalcX
>9133	Identifier	panCalcX
>9134	Callee	memset
>9135	Identifier	memset
>9136	IdentifierDeclStatement	 
>9137	IdentifierDecl	* padfRowImag = psWrkStruct -> padfRowImag
>9138	AssignmentExpr	* padfRowImag = psWrkStruct -> padfRowImag
>9139	PtrMemberAccess	psWrkStruct -> padfRowImag
>9140	Identifier	padfRowImag
>9141	Identifier	psWrkStruct
>9142	Identifier	padfRowImag
>9143	Identifier	padfRowImag
>9144	IdentifierDeclType	double *
>9145	IdentifierDeclStatement	 
>9146	IdentifierDecl	* padfRowReal = psWrkStruct -> padfRowReal
>9147	AssignmentExpr	* padfRowReal = psWrkStruct -> padfRowReal
>9148	PtrMemberAccess	psWrkStruct -> padfRowReal
>9149	Identifier	padfRowReal
>9150	Identifier	psWrkStruct
>9151	Identifier	padfRowReal
>9152	Identifier	padfRowReal
>9153	IdentifierDeclType	double *
>9154	IdentifierDeclStatement	 
>9155	IdentifierDecl	* padfRowDensity = psWrkStruct -> padfRowDensity
>9156	AssignmentExpr	* padfRowDensity = psWrkStruct -> padfRowDensity
>9157	PtrMemberAccess	psWrkStruct -> padfRowDensity
>9158	Identifier	padfRowDensity
>9159	Identifier	psWrkStruct
>9160	Identifier	padfRowDensity
>9161	Identifier	padfRowDensity
>9162	IdentifierDeclType	double *
>9163	IdentifierDeclStatement	 
>9164	IdentifierDecl	* panCalcX = psWrkStruct -> panCalcX
>9165	AssignmentExpr	* panCalcX = psWrkStruct -> panCalcX
>9166	PtrMemberAccess	psWrkStruct -> panCalcX
>9167	Identifier	panCalcX
>9168	Identifier	psWrkStruct
>9169	Identifier	panCalcX
>9170	Identifier	panCalcX
>9171	IdentifierDeclType	char *
>9172	IdentifierDeclStatement	 
>9173	IdentifierDecl	* padfWeightsX = psWrkStruct -> padfWeightsX
>9174	AssignmentExpr	* padfWeightsX = psWrkStruct -> padfWeightsX
>9175	PtrMemberAccess	psWrkStruct -> padfWeightsX
>9176	Identifier	padfWeightsX
>9177	Identifier	psWrkStruct
>9178	Identifier	padfWeightsX
>9179	Identifier	padfWeightsX
>9180	IdentifierDeclType	double *
>9181	IdentifierDeclStatement	 
>9182	IdentifierDecl	nXDist = ( poWK -> nXRadius + 1 ) * 2
>9183	AssignmentExpr	nXDist = ( poWK -> nXRadius + 1 ) * 2
>9184	MultiplicativeExpression	( poWK -> nXRadius + 1 ) * 2
>9185	PrimaryExpression	2
>9186	AdditiveExpression	poWK -> nXRadius + 1
>9187	PrimaryExpression	1
>9188	PtrMemberAccess	poWK -> nXRadius
>9189	Identifier	nXRadius
>9190	Identifier	poWK
>9191	Identifier	nXDist
>9192	Identifier	nXDist
>9193	IdentifierDeclType	const int
>9194	IdentifierDeclStatement	 
>9195	IdentifierDecl	j
>9196	Identifier	j
>9197	IdentifierDeclType	int
>9198	IdentifierDecl	i
>9199	Identifier	i
>9200	IdentifierDeclType	int
>9201	IdentifierDeclStatement	 
>9202	IdentifierDecl	dfYFilter = poWK -> dfYFilter
>9203	AssignmentExpr	dfYFilter = poWK -> dfYFilter
>9204	PtrMemberAccess	poWK -> dfYFilter
>9205	Identifier	dfYFilter
>9206	Identifier	poWK
>9207	Identifier	dfYFilter
>9208	Identifier	dfYFilter
>9209	IdentifierDeclType	const double
>9210	IdentifierDecl	dfXFilter = poWK -> dfXFilter
>9211	AssignmentExpr	dfXFilter = poWK -> dfXFilter
>9212	PtrMemberAccess	poWK -> dfXFilter
>9213	Identifier	dfXFilter
>9214	Identifier	poWK
>9215	Identifier	dfXFilter
>9216	Identifier	dfXFilter
>9217	IdentifierDeclType	const double
>9218	IdentifierDeclStatement	 
>9219	IdentifierDecl	dfYScale = poWK -> dfYScale
>9220	AssignmentExpr	dfYScale = poWK -> dfYScale
>9221	PtrMemberAccess	poWK -> dfYScale
>9222	Identifier	dfYScale
>9223	Identifier	poWK
>9224	Identifier	dfYScale
>9225	Identifier	dfYScale
>9226	IdentifierDeclType	const double
>9227	IdentifierDecl	dfXScale = poWK -> dfXScale
>9228	AssignmentExpr	dfXScale = poWK -> dfXScale
>9229	PtrMemberAccess	poWK -> dfXScale
>9230	Identifier	dfXScale
>9231	Identifier	poWK
>9232	Identifier	dfXScale
>9233	Identifier	dfXScale
>9234	IdentifierDeclType	const double
>9235	IdentifierDeclStatement	 
>9236	IdentifierDecl	eResample = poWK -> eResample
>9237	AssignmentExpr	eResample = poWK -> eResample
>9238	PtrMemberAccess	poWK -> eResample
>9239	Identifier	eResample
>9240	Identifier	poWK
>9241	Identifier	eResample
>9242	Identifier	eResample
>9243	IdentifierDeclType	const int
>9244	IdentifierDeclStatement	 
>9245	IdentifierDecl	dfDeltaY = dfSrcY - 0.5 - iSrcY
>9246	AssignmentExpr	dfDeltaY = dfSrcY - 0.5 - iSrcY
>9247	AdditiveExpression	dfSrcY - 0.5 - iSrcY
>9248	AdditiveExpression	0.5 - iSrcY
>9249	Identifier	iSrcY
>9250	PrimaryExpression	0.5
>9251	Identifier	dfSrcY
>9252	Identifier	dfDeltaY
>9253	Identifier	dfDeltaY
>9254	IdentifierDeclType	const double
>9255	IdentifierDeclStatement	 
>9256	IdentifierDecl	dfDeltaX = dfSrcX - 0.5 - iSrcX
>9257	AssignmentExpr	dfDeltaX = dfSrcX - 0.5 - iSrcX
>9258	AdditiveExpression	dfSrcX - 0.5 - iSrcX
>9259	AdditiveExpression	0.5 - iSrcX
>9260	Identifier	iSrcX
>9261	PrimaryExpression	0.5
>9262	Identifier	dfSrcX
>9263	Identifier	dfDeltaX
>9264	Identifier	dfDeltaX
>9265	IdentifierDeclType	const double
>9266	IdentifierDeclStatement	 
>9267	IdentifierDecl	iSrcOffset = iSrcX + iSrcY * nSrcXSize
>9268	AssignmentExpr	iSrcOffset = iSrcX + iSrcY * nSrcXSize
>9269	AdditiveExpression	iSrcX + iSrcY * nSrcXSize
>9270	MultiplicativeExpression	iSrcY * nSrcXSize
>9271	Identifier	nSrcXSize
>9272	Identifier	iSrcY
>9273	Identifier	iSrcX
>9274	Identifier	iSrcOffset
>9275	Identifier	iSrcOffset
>9276	IdentifierDeclType	const int
>9277	IdentifierDeclStatement	 
>9278	IdentifierDecl	iSrcY = ( int ) floor ( dfSrcY - 0.5 )
>9279	AssignmentExpr	iSrcY = ( int ) floor ( dfSrcY - 0.5 )
>9280	CastExpression	( int ) floor ( dfSrcY - 0.5 )
>9281	CallExpression	floor ( dfSrcY - 0.5 )
>9282	ArgumentList	dfSrcY - 0.5
>9283	Argument	dfSrcY - 0.5
>9284	AdditiveExpression	dfSrcY - 0.5
>9285	PrimaryExpression	0.5
>9286	Identifier	dfSrcY
>9287	Callee	floor
>9288	Identifier	floor
>9289	CastTarget	int
>9290	Identifier	iSrcY
>9291	Identifier	iSrcY
>9292	IdentifierDeclType	const int
>9293	IdentifierDeclStatement	 
>9294	IdentifierDecl	iSrcX = ( int ) floor ( dfSrcX - 0.5 )
>9295	AssignmentExpr	iSrcX = ( int ) floor ( dfSrcX - 0.5 )
>9296	CastExpression	( int ) floor ( dfSrcX - 0.5 )
>9297	CallExpression	floor ( dfSrcX - 0.5 )
>9298	ArgumentList	dfSrcX - 0.5
>9299	Argument	dfSrcX - 0.5
>9300	AdditiveExpression	dfSrcX - 0.5
>9301	PrimaryExpression	0.5
>9302	Identifier	dfSrcX
>9303	Callee	floor
>9304	Identifier	floor
>9305	CastTarget	int
>9306	Identifier	iSrcX
>9307	Identifier	iSrcX
>9308	IdentifierDeclType	const int
>9309	IdentifierDeclStatement	 
>9310	IdentifierDecl	dfAccumulatorWeight = 0.0
>9311	AssignmentExpr	dfAccumulatorWeight = 0.0
>9312	PrimaryExpression	0.0
>9313	Identifier	dfAccumulatorWeight
>9314	Identifier	dfAccumulatorWeight
>9315	IdentifierDeclType	double
>9316	IdentifierDeclStatement	 
>9317	IdentifierDecl	dfAccumulatorDensity = 0.0
>9318	AssignmentExpr	dfAccumulatorDensity = 0.0
>9319	PrimaryExpression	0.0
>9320	Identifier	dfAccumulatorDensity
>9321	Identifier	dfAccumulatorDensity
>9322	IdentifierDeclType	double
>9323	IdentifierDeclStatement	 
>9324	IdentifierDecl	dfAccumulatorImag = 0.0
>9325	AssignmentExpr	dfAccumulatorImag = 0.0
>9326	PrimaryExpression	0.0
>9327	Identifier	dfAccumulatorImag
>9328	Identifier	dfAccumulatorImag
>9329	IdentifierDeclType	double
>9330	IdentifierDecl	dfAccumulatorReal = 0.0
>9331	AssignmentExpr	dfAccumulatorReal = 0.0
>9332	PrimaryExpression	0.0
>9333	Identifier	dfAccumulatorReal
>9334	Identifier	dfAccumulatorReal
>9335	IdentifierDeclType	double
>9336	IdentifierDeclStatement	 
>9337	IdentifierDecl	nSrcYSize = poWK -> nSrcYSize
>9338	AssignmentExpr	nSrcYSize = poWK -> nSrcYSize
>9339	PtrMemberAccess	poWK -> nSrcYSize
>9340	Identifier	nSrcYSize
>9341	Identifier	poWK
>9342	Identifier	nSrcYSize
>9343	Identifier	nSrcYSize
>9344	IdentifierDeclType	const int
>9345	IdentifierDeclStatement	 
>9346	IdentifierDecl	nSrcXSize = poWK -> nSrcXSize
>9347	AssignmentExpr	nSrcXSize = poWK -> nSrcXSize
>9348	PtrMemberAccess	poWK -> nSrcXSize
>9349	Identifier	nSrcXSize
>9350	Identifier	poWK
>9351	Identifier	nSrcXSize
>9352	Identifier	nSrcXSize
>9353	IdentifierDeclType	const int
>9434	FunctionDef	GWKResampleOptimizedLanczos (GDALWarpKernel * poWK , int iBand , double dfSrcX , double dfSrcY , double * pdfDensity , \
>9435	ParameterList	GDALWarpKernel * poWK , int iBand , double dfSrcX , double dfSrcY , double * pdfDensity , double * pdfReal , double * \
>9436	Parameter	 
>9437	Identifier	psWrkStruct
>9438	ParameterType	GWKResampleWrkStruct *
>9439	Parameter	 
>9440	Identifier	pdfImag
>9441	ParameterType	double *
>9442	Parameter	 
>9443	Identifier	pdfReal
>9444	ParameterType	double *
>9445	Parameter	 
>9446	Identifier	pdfDensity
>9447	ParameterType	double *
>9448	Parameter	 
>9449	Identifier	dfSrcY
>9450	ParameterType	double
>9451	Parameter	 
>9452	Identifier	dfSrcX
>9453	ParameterType	double
>9454	Parameter	 
>9455	Identifier	iBand
>9456	ParameterType	int
>9457	Parameter	 
>9458	Identifier	poWK
>9459	ParameterType	GDALWarpKernel *
>9460	ReturnType	static int
>9461	CompoundStatement	 
>9462	ReturnStatement	 
>9463	Identifier	TRUE
>9464	IfStatement	if ( dfAccumulatorWeight < 0.99999 || dfAccumulatorWeight > 1.00001 )
>9465	ElseStatement	else
>9466	CompoundStatement	 
>9467	IfStatement	if ( padfRowDensity != NULL )
>9468	ElseStatement	else
>9469	ExpressionStatement	 
>9470	AssignmentExpr	* pdfDensity = 1.0
>9471	PrimaryExpression	1.0
>9472	UnaryOp	* pdfDensity
>9473	Identifier	pdfDensity
>9474	UnaryOperator	*
>9475	ExpressionStatement	 
>9476	AssignmentExpr	* pdfDensity = dfAccumulatorDensity
>9477	Identifier	dfAccumulatorDensity
>9478	UnaryOp	* pdfDensity
>9479	Identifier	pdfDensity
>9480	UnaryOperator	*
>9481	Condition	 
>9482	EqualityExpression	padfRowDensity != NULL
>9483	Identifier	NULL
>9484	Identifier	padfRowDensity
>9485	ExpressionStatement	 
>9486	AssignmentExpr	* pdfImag = dfAccumulatorImag
>9487	Identifier	dfAccumulatorImag
>9488	UnaryOp	* pdfImag
>9489	Identifier	pdfImag
>9490	UnaryOperator	*
>9491	ExpressionStatement	 
>9492	AssignmentExpr	* pdfReal = dfAccumulatorReal
>9493	Identifier	dfAccumulatorReal
>9494	UnaryOp	* pdfReal
>9495	Identifier	pdfReal
>9496	UnaryOperator	*
>9497	CompoundStatement	 
>9498	IfStatement	if ( padfRowDensity != NULL )
>9499	ElseStatement	else
>9500	ExpressionStatement	 
>9501	AssignmentExpr	* pdfDensity = 1.0
>9502	PrimaryExpression	1.0
>9503	UnaryOp	* pdfDensity
>9504	Identifier	pdfDensity
>9505	UnaryOperator	*
>9506	ExpressionStatement	 
>9507	AssignmentExpr	* pdfDensity = dfAccumulatorDensity * dfInvAcc
>9508	MultiplicativeExpression	dfAccumulatorDensity * dfInvAcc
>9509	Identifier	dfInvAcc
>9510	Identifier	dfAccumulatorDensity
>9511	UnaryOp	* pdfDensity
>9512	Identifier	pdfDensity
>9513	UnaryOperator	*
>9514	Condition	 
>9515	EqualityExpression	padfRowDensity != NULL
>9516	Identifier	NULL
>9517	Identifier	padfRowDensity
>9518	ExpressionStatement	 
>9519	AssignmentExpr	* pdfImag = dfAccumulatorImag * dfInvAcc
>9520	MultiplicativeExpression	dfAccumulatorImag * dfInvAcc
>9521	Identifier	dfInvAcc
>9522	Identifier	dfAccumulatorImag
>9523	UnaryOp	* pdfImag
>9524	Identifier	pdfImag
>9525	UnaryOperator	*
>9526	ExpressionStatement	 
>9527	AssignmentExpr	* pdfReal = dfAccumulatorReal * dfInvAcc
>9528	MultiplicativeExpression	dfAccumulatorReal * dfInvAcc
>9529	Identifier	dfInvAcc
>9530	Identifier	dfAccumulatorReal
>9531	UnaryOp	* pdfReal
>9532	Identifier	pdfReal
>9533	UnaryOperator	*
>9534	IdentifierDeclStatement	 
>9535	IdentifierDecl	dfInvAcc = 1.0 / dfAccumulatorWeight
>9536	AssignmentExpr	dfInvAcc = 1.0 / dfAccumulatorWeight
>9537	MultiplicativeExpression	1.0 / dfAccumulatorWeight
>9538	Identifier	dfAccumulatorWeight
>9539	PrimaryExpression	1.0
>9540	Identifier	dfInvAcc
>9541	Identifier	dfInvAcc
>9542	IdentifierDeclType	const double
>9543	Condition	 
>9544	OrExpression	dfAccumulatorWeight < 0.99999 || dfAccumulatorWeight > 1.00001
>9545	RelationalExpression	dfAccumulatorWeight > 1.00001
>9546	PrimaryExpression	1.00001
>9547	Identifier	dfAccumulatorWeight
>9548	RelationalExpression	dfAccumulatorWeight < 0.99999
>9549	PrimaryExpression	0.99999
>9550	Identifier	dfAccumulatorWeight
>9551	IfStatement	if ( dfAccumulatorWeight < 0.000001 || ( padfRowDensity != NULL && dfAccumulatorDensity < 0.000001 ) )
>9552	CompoundStatement	 
>9553	ReturnStatement	 
>9554	Identifier	FALSE
>9555	ExpressionStatement	 
>9556	AssignmentExpr	* pdfDensity = 0.0
>9557	PrimaryExpression	0.0
>9558	UnaryOp	* pdfDensity
>9559	Identifier	pdfDensity
>9560	UnaryOperator	*
>9561	Condition	 
>9562	OrExpression	dfAccumulatorWeight < 0.000001 || ( padfRowDensity != NULL && dfAccumulatorDensity < 0.000001 )
>9563	AndExpression	padfRowDensity != NULL && dfAccumulatorDensity < 0.000001
>9564	RelationalExpression	dfAccumulatorDensity < 0.000001
>9565	PrimaryExpression	0.000001
>9566	Identifier	dfAccumulatorDensity
>9567	EqualityExpression	padfRowDensity != NULL
>9568	Identifier	NULL
>9569	Identifier	padfRowDensity
>9570	RelationalExpression	dfAccumulatorWeight < 0.000001
>9571	PrimaryExpression	0.000001
>9572	Identifier	dfAccumulatorWeight
>9573	ForStatement	for ( int j = jMin ; j <= jMax ; ++ j )
>9574	CompoundStatement	 
>9575	IfStatement	if ( padfRowDensity != NULL )
>9576	ElseStatement	else
>9577	IfStatement	if ( padfRowImag == NULL )
>9578	ElseStatement	else
>9579	CompoundStatement	 
>9580	ExpressionStatement	 
>9581	AssignmentExpr	dfAccumulatorImag += dfRowAccImag * dfWeight1
>9582	MultiplicativeExpression	dfRowAccImag * dfWeight1
>9583	Identifier	dfWeight1
>9584	Identifier	dfRowAccImag
>9585	Identifier	dfAccumulatorImag
>9586	ExpressionStatement	 
>9587	AssignmentExpr	dfAccumulatorReal += dfRowAccReal * dfWeight1
>9588	MultiplicativeExpression	dfRowAccReal * dfWeight1
>9589	Identifier	dfWeight1
>9590	Identifier	dfRowAccReal
>9591	Identifier	dfAccumulatorReal
>9592	ForStatement	for ( int i = iMin ; i <= iMax ; ++ i )
>9593	CompoundStatement	 
>9594	ExpressionStatement	 
>9595	AssignmentExpr	dfRowAccImag += padfRowImag [ i - iMin ] * dfWeight2
>9596	MultiplicativeExpression	padfRowImag [ i - iMin ] * dfWeight2
>9597	Identifier	dfWeight2
>9598	ArrayIndexing	padfRowImag [ i - iMin ]
>9599	AdditiveExpression	i - iMin
>9600	Identifier	iMin
>9601	Identifier	i
>9602	Identifier	padfRowImag
>9603	Identifier	dfRowAccImag
>9604	ExpressionStatement	 
>9605	AssignmentExpr	dfRowAccReal += padfRowReal [ i - iMin ] * dfWeight2
>9606	MultiplicativeExpression	padfRowReal [ i - iMin ] * dfWeight2
>9607	Identifier	dfWeight2
>9608	ArrayIndexing	padfRowReal [ i - iMin ]
>9609	AdditiveExpression	i - iMin
>9610	Identifier	iMin
>9611	Identifier	i
>9612	Identifier	padfRowReal
>9613	Identifier	dfRowAccReal
>9614	IdentifierDeclStatement	 
>9615	IdentifierDecl	dfWeight2 = padfWeightsX [ i - poWK -> nFiltInitX ]
>9616	AssignmentExpr	dfWeight2 = padfWeightsX [ i - poWK -> nFiltInitX ]
>9617	ArrayIndexing	padfWeightsX [ i - poWK -> nFiltInitX ]
>9618	AdditiveExpression	i - poWK -> nFiltInitX
>9619	PtrMemberAccess	poWK -> nFiltInitX
>9620	Identifier	nFiltInitX
>9621	Identifier	poWK
>9622	Identifier	i
>9623	Identifier	padfWeightsX
>9624	Identifier	dfWeight2
>9625	Identifier	dfWeight2
>9626	IdentifierDeclType	double
>9627	UnaryExpression	 
>9628	Identifier	i
>9629	IncDec	++
>9630	Condition	 
>9631	RelationalExpression	i <= iMax
>9632	Identifier	iMax
>9633	Identifier	i
>9634	ForInit	 
>9635	IdentifierDeclStatement	int i = iMin ;
>9636	IdentifierDecl	i = iMin
>9637	AssignmentExpr	i = iMin
>9638	Identifier	iMin
>9639	Identifier	iMin
>9640	Identifier	i
>9641	IdentifierDeclType	int
>9642	IdentifierDeclStatement	 
>9643	IdentifierDecl	dfRowAccImag = 0.0
>9644	AssignmentExpr	dfRowAccImag = 0.0
>9645	PrimaryExpression	0.0
>9646	Identifier	dfRowAccImag
>9647	Identifier	dfRowAccImag
>9648	IdentifierDeclType	double
>9649	IdentifierDeclStatement	 
>9650	IdentifierDecl	dfRowAccReal = 0.0
>9651	AssignmentExpr	dfRowAccReal = 0.0
>9652	PrimaryExpression	0.0
>9653	Identifier	dfRowAccReal
>9654	Identifier	dfRowAccReal
>9655	IdentifierDeclType	double
>9656	CompoundStatement	 
>9657	ExpressionStatement	 
>9658	AssignmentExpr	dfAccumulatorReal += dfRowAccReal * dfWeight1
>9659	MultiplicativeExpression	dfRowAccReal * dfWeight1
>9660	Identifier	dfWeight1
>9661	Identifier	dfRowAccReal
>9662	Identifier	dfAccumulatorReal
>9663	ForStatement	for ( int i = iMin ; i <= iMax ; ++ i )
>9664	CompoundStatement	 
>9665	ExpressionStatement	 
>9666	AssignmentExpr	dfRowAccReal += padfRowReal [ i - iMin ] * dfWeight2
>9667	MultiplicativeExpression	padfRowReal [ i - iMin ] * dfWeight2
>9668	Identifier	dfWeight2
>9669	ArrayIndexing	padfRowReal [ i - iMin ]
>9670	AdditiveExpression	i - iMin
>9671	Identifier	iMin
>9672	Identifier	i
>9673	Identifier	padfRowReal
>9674	Identifier	dfRowAccReal
>9675	IdentifierDeclStatement	 
>9676	IdentifierDecl	dfWeight2 = padfWeightsX [ i - poWK -> nFiltInitX ]
>9677	AssignmentExpr	dfWeight2 = padfWeightsX [ i - poWK -> nFiltInitX ]
>9678	ArrayIndexing	padfWeightsX [ i - poWK -> nFiltInitX ]
>9679	AdditiveExpression	i - poWK -> nFiltInitX
>9680	PtrMemberAccess	poWK -> nFiltInitX
>9681	Identifier	nFiltInitX
>9682	Identifier	poWK
>9683	Identifier	i
>9684	Identifier	padfWeightsX
>9685	Identifier	dfWeight2
>9686	Identifier	dfWeight2
>9687	IdentifierDeclType	double
>9688	UnaryExpression	 
>9689	Identifier	i
>9690	IncDec	++
>9691	Condition	 
>9692	RelationalExpression	i <= iMax
>9693	Identifier	iMax
>9694	Identifier	i
>9695	ForInit	 
>9696	IdentifierDeclStatement	int i = iMin ;
>9697	IdentifierDecl	i = iMin
>9698	AssignmentExpr	i = iMin
>9699	Identifier	iMin
>9700	Identifier	iMin
>9701	Identifier	i
>9702	IdentifierDeclType	int
>9703	IdentifierDeclStatement	 
>9704	IdentifierDecl	dfRowAccReal = 0.0
>9705	AssignmentExpr	dfRowAccReal = 0.0
>9706	PrimaryExpression	0.0
>9707	Identifier	dfRowAccReal
>9708	Identifier	dfRowAccReal
>9709	IdentifierDeclType	double
>9710	Condition	 
>9711	EqualityExpression	padfRowImag == NULL
>9712	Identifier	NULL
>9713	Identifier	padfRowImag
>9714	CompoundStatement	 
>9715	ForStatement	for ( int i = iMin ; i <= iMax ; ++ i )
>9716	CompoundStatement	 
>9717	ExpressionStatement	 
>9718	AssignmentExpr	dfAccumulatorWeight += dfWeight2
>9719	Identifier	dfWeight2
>9720	Identifier	dfAccumulatorWeight
>9721	ExpressionStatement	 
>9722	AssignmentExpr	dfAccumulatorDensity += padfRowDensity [ i - iMin ] * dfWeight2
>9723	MultiplicativeExpression	padfRowDensity [ i - iMin ] * dfWeight2
>9724	Identifier	dfWeight2
>9725	ArrayIndexing	padfRowDensity [ i - iMin ]
>9726	AdditiveExpression	i - iMin
>9727	Identifier	iMin
>9728	Identifier	i
>9729	Identifier	padfRowDensity
>9730	Identifier	dfAccumulatorDensity
>9731	ExpressionStatement	 
>9732	AssignmentExpr	dfAccumulatorImag += padfRowImag [ i - iMin ] * dfWeight2
>9733	MultiplicativeExpression	padfRowImag [ i - iMin ] * dfWeight2
>9734	Identifier	dfWeight2
>9735	ArrayIndexing	padfRowImag [ i - iMin ]
>9736	AdditiveExpression	i - iMin
>9737	Identifier	iMin
>9738	Identifier	i
>9739	Identifier	padfRowImag
>9740	Identifier	dfAccumulatorImag
>9741	ExpressionStatement	 
>9742	AssignmentExpr	dfAccumulatorReal += padfRowReal [ i - iMin ] * dfWeight2
>9743	MultiplicativeExpression	padfRowReal [ i - iMin ] * dfWeight2
>9744	Identifier	dfWeight2
>9745	ArrayIndexing	padfRowReal [ i - iMin ]
>9746	AdditiveExpression	i - iMin
>9747	Identifier	iMin
>9748	Identifier	i
>9749	Identifier	padfRowReal
>9750	Identifier	dfAccumulatorReal
>9751	ExpressionStatement	 
>9752	AssignmentExpr	dfWeight2 = dfWeight1 * padfWeightsX [ i - poWK -> nFiltInitX ]
>9753	MultiplicativeExpression	dfWeight1 * padfWeightsX [ i - poWK -> nFiltInitX ]
>9754	ArrayIndexing	padfWeightsX [ i - poWK -> nFiltInitX ]
>9755	AdditiveExpression	i - poWK -> nFiltInitX
>9756	PtrMemberAccess	poWK -> nFiltInitX
>9757	Identifier	nFiltInitX
>9758	Identifier	poWK
>9759	Identifier	i
>9760	Identifier	padfWeightsX
>9761	Identifier	dfWeight1
>9762	Identifier	dfWeight2
>9763	IfStatement	if ( padfRowDensity [ i - iMin ] < 0.000000001 )
>9764	ContinueStatement	 
>9765	Condition	 
>9766	RelationalExpression	padfRowDensity [ i - iMin ] < 0.000000001
>9767	PrimaryExpression	0.000000001
>9768	ArrayIndexing	padfRowDensity [ i - iMin ]
>9769	AdditiveExpression	i - iMin
>9770	Identifier	iMin
>9771	Identifier	i
>9772	Identifier	padfRowDensity
>9773	IdentifierDeclStatement	 
>9774	IdentifierDecl	dfWeight2
>9775	Identifier	dfWeight2
>9776	IdentifierDeclType	double
>9777	UnaryExpression	 
>9778	Identifier	i
>9779	IncDec	++
>9780	Condition	 
>9781	RelationalExpression	i <= iMax
>9782	Identifier	iMax
>9783	Identifier	i
>9784	ForInit	 
>9785	IdentifierDeclStatement	int i = iMin ;
>9786	IdentifierDecl	i = iMin
>9787	AssignmentExpr	i = iMin
>9788	Identifier	iMin
>9789	Identifier	iMin
>9790	Identifier	i
>9791	IdentifierDeclType	int
>9792	Condition	 
>9793	EqualityExpression	padfRowDensity != NULL
>9794	Identifier	NULL
>9795	Identifier	padfRowDensity
>9796	ExpressionStatement	 
>9797	AssignmentExpr	dfWeight1 = padfWeightsY [ j - poWK -> nFiltInitY ]
>9798	ArrayIndexing	padfWeightsY [ j - poWK -> nFiltInitY ]
>9799	AdditiveExpression	j - poWK -> nFiltInitY
>9800	PtrMemberAccess	poWK -> nFiltInitY
>9801	Identifier	nFiltInitY
>9802	Identifier	poWK
>9803	Identifier	j
>9804	Identifier	padfWeightsY
>9805	Identifier	dfWeight1
>9806	IfStatement	if ( ! GWKGetPixelRow ( poWK , iBand , iRowOffset , ( iMax - iMin + 2 ) / 2 , padfRowDensity , padfRowReal , padfRowImag ) )
>9807	ContinueStatement	 
>9808	Condition	 
>9809	UnaryOp	! GWKGetPixelRow ( poWK , iBand , iRowOffset , ( iMax - iMin + 2 ) / 2 , padfRowDensity , padfRowReal , padfRowImag )
>9810	CallExpression	GWKGetPixelRow ( poWK , iBand , iRowOffset , ( iMax - iMin + 2 ) / 2 , padfRowDensity , padfRowReal , padfRowImag )
>9811	ArgumentList	poWK
>9812	Argument	padfRowImag
>9813	Identifier	padfRowImag
>9814	Argument	padfRowReal
>9815	Identifier	padfRowReal
>9816	Argument	padfRowDensity
>9817	Identifier	padfRowDensity
>9818	Argument	( iMax - iMin + 2 ) / 2
>9819	MultiplicativeExpression	( iMax - iMin + 2 ) / 2
>9820	PrimaryExpression	2
>9821	AdditiveExpression	iMax - iMin + 2
>9822	AdditiveExpression	iMin + 2
>9823	PrimaryExpression	2
>9824	Identifier	iMin
>9825	Identifier	iMax
>9826	Argument	iRowOffset
>9827	Identifier	iRowOffset
>9828	Argument	iBand
>9829	Identifier	iBand
>9830	Argument	poWK
>9831	Identifier	poWK
>9832	Callee	GWKGetPixelRow
>9833	Identifier	GWKGetPixelRow
>9834	UnaryOperator	!
>9835	ExpressionStatement	 
>9836	AssignmentExpr	iRowOffset += nSrcXSize
>9837	Identifier	nSrcXSize
>9838	Identifier	iRowOffset
>9839	IdentifierDeclStatement	 
>9840	IdentifierDecl	dfWeight1
>9841	Identifier	dfWeight1
>9842	IdentifierDeclType	double
>9843	UnaryExpression	 
>9844	Identifier	j
>9845	IncDec	++
>9846	Condition	 
>9847	RelationalExpression	j <= jMax
>9848	Identifier	jMax
>9849	Identifier	j
>9850	ForInit	 
>9851	IdentifierDeclStatement	int j = jMin ;
>9852	IdentifierDecl	j = jMin
>9853	AssignmentExpr	j = jMin
>9854	Identifier	jMin
>9855	Identifier	jMin
>9856	Identifier	j
>9857	IdentifierDeclType	int
>9858	IfStatement	if ( padfRowDensity == NULL )
>9859	CompoundStatement	 
>9860	IfStatement	if ( ! GDALDataTypeIsComplex ( poWK -> eWorkingDataType ) )
>9861	ExpressionStatement	 
>9862	AssignmentExpr	padfRowImag = NULL
>9863	Identifier	NULL
>9864	Identifier	padfRowImag
>9865	Condition	 
>9866	UnaryOp	! GDALDataTypeIsComplex ( poWK -> eWorkingDataType )
>9867	CallExpression	GDALDataTypeIsComplex ( poWK -> eWorkingDataType )
>9868	ArgumentList	poWK -> eWorkingDataType
>9869	Argument	poWK -> eWorkingDataType
>9870	PtrMemberAccess	poWK -> eWorkingDataType
>9871	Identifier	eWorkingDataType
>9872	Identifier	poWK
>9873	Callee	GDALDataTypeIsComplex
>9874	Identifier	GDALDataTypeIsComplex
>9875	UnaryOperator	!
>9876	ExpressionStatement	 
>9877	AssignmentExpr	dfAccumulatorWeight = dfRowAccWeight * dfColAccWeight
>9878	MultiplicativeExpression	dfRowAccWeight * dfColAccWeight
>9879	Identifier	dfColAccWeight
>9880	Identifier	dfRowAccWeight
>9881	Identifier	dfAccumulatorWeight
>9882	ForStatement	for ( int j = jMin ; j <= jMax ; ++ j )
>9883	CompoundStatement	 
>9884	ExpressionStatement	 
>9885	AssignmentExpr	dfColAccWeight += padfWeightsY [ j - poWK -> nFiltInitY ]
>9886	ArrayIndexing	padfWeightsY [ j - poWK -> nFiltInitY ]
>9887	AdditiveExpression	j - poWK -> nFiltInitY
>9888	PtrMemberAccess	poWK -> nFiltInitY
>9889	Identifier	nFiltInitY
>9890	Identifier	poWK
>9891	Identifier	j
>9892	Identifier	padfWeightsY
>9893	Identifier	dfColAccWeight
>9894	UnaryExpression	 
>9895	Identifier	j
>9896	IncDec	++
>9897	Condition	 
>9898	RelationalExpression	j <= jMax
>9899	Identifier	jMax
>9900	Identifier	j
>9901	ForInit	 
>9902	IdentifierDeclStatement	int j = jMin ;
>9903	IdentifierDecl	j = jMin
>9904	AssignmentExpr	j = jMin
>9905	Identifier	jMin
>9906	Identifier	jMin
>9907	Identifier	j
>9908	IdentifierDeclType	int
>9909	IdentifierDeclStatement	 
>9910	IdentifierDecl	dfColAccWeight = 0.0
>9911	AssignmentExpr	dfColAccWeight = 0.0
>9912	PrimaryExpression	0.0
>9913	Identifier	dfColAccWeight
>9914	Identifier	dfColAccWeight
>9915	IdentifierDeclType	double
>9916	ForStatement	for ( int i = iMin ; i <= iMax ; ++ i )
>9917	CompoundStatement	 
>9918	ExpressionStatement	 
>9919	AssignmentExpr	dfRowAccWeight += padfWeightsX [ i - poWK -> nFiltInitX ]
>9920	ArrayIndexing	padfWeightsX [ i - poWK -> nFiltInitX ]
>9921	AdditiveExpression	i - poWK -> nFiltInitX
>9922	PtrMemberAccess	poWK -> nFiltInitX
>9923	Identifier	nFiltInitX
>9924	Identifier	poWK
>9925	Identifier	i
>9926	Identifier	padfWeightsX
>9927	Identifier	dfRowAccWeight
>9928	UnaryExpression	 
>9929	Identifier	i
>9930	IncDec	++
>9931	Condition	 
>9932	RelationalExpression	i <= iMax
>9933	Identifier	iMax
>9934	Identifier	i
>9935	ForInit	 
>9936	IdentifierDeclStatement	int i = iMin ;
>9937	IdentifierDecl	i = iMin
>9938	AssignmentExpr	i = iMin
>9939	Identifier	iMin
>9940	Identifier	iMin
>9941	Identifier	i
>9942	IdentifierDeclType	int
>9943	IdentifierDeclStatement	 
>9944	IdentifierDecl	dfRowAccWeight = 0.0
>9945	AssignmentExpr	dfRowAccWeight = 0.0
>9946	PrimaryExpression	0.0
>9947	Identifier	dfRowAccWeight
>9948	Identifier	dfRowAccWeight
>9949	IdentifierDeclType	double
>9950	Condition	 
>9951	EqualityExpression	padfRowDensity == NULL
>9952	Identifier	NULL
>9953	Identifier	padfRowDensity
>9954	IdentifierDeclStatement	 
>9955	IdentifierDecl	iRowOffset = iSrcOffset + ( jMin - 1 ) * nSrcXSize + iMin
>9956	AssignmentExpr	iRowOffset = iSrcOffset + ( jMin - 1 ) * nSrcXSize + iMin
>9957	AdditiveExpression	iSrcOffset + ( jMin - 1 ) * nSrcXSize + iMin
>9958	AdditiveExpression	( jMin - 1 ) * nSrcXSize + iMin
>9959	Identifier	iMin
>9960	MultiplicativeExpression	( jMin - 1 ) * nSrcXSize
>9961	Identifier	nSrcXSize
>9962	AdditiveExpression	jMin - 1
>9963	PrimaryExpression	1
>9964	Identifier	jMin
>9965	Identifier	iSrcOffset
>9966	Identifier	iRowOffset
>9967	Identifier	iRowOffset
>9968	IdentifierDeclType	int
>9969	IfStatement	if ( dfYScale < 1.0 )
>9970	ElseStatement	else
>9971	CompoundStatement	 
>9972	IfStatement	if ( iSrcY != psWrkStruct -> iLastSrcY || dfDeltaY != psWrkStruct -> dfLastDeltaY )
>9973	CompoundStatement	 
>9974	ExpressionStatement	 
>9975	AssignmentExpr	psWrkStruct -> dfLastDeltaY = dfDeltaY
>9976	Identifier	dfDeltaY
>9977	PtrMemberAccess	psWrkStruct -> dfLastDeltaY
>9978	Identifier	dfLastDeltaY
>9979	Identifier	psWrkStruct
>9980	ExpressionStatement	 
>9981	AssignmentExpr	psWrkStruct -> iLastSrcY = iSrcY
>9982	Identifier	iSrcY
>9983	PtrMemberAccess	psWrkStruct -> iLastSrcY
>9984	Identifier	iLastSrcY
>9985	Identifier	psWrkStruct
>9986	ForStatement	for ( int j = jMin ; j <= jMax ; ++ j )
>9987	CompoundStatement	 
>9988	IfStatement	if ( dfY == 0.0 )
>9989	ElseStatement	else
>9990	ExpressionStatement	 
>9991	AssignmentExpr	padfWeightsY [ j - poWK -> nFiltInitY ] = padfCst [ ( j + 3 ) % 3 ] / ( dfY * dfY )
>9992	MultiplicativeExpression	padfCst [ ( j + 3 ) % 3 ] / ( dfY * dfY )
>9993	MultiplicativeExpression	dfY * dfY
>9994	Identifier	dfY
>9995	Identifier	dfY
>9996	ArrayIndexing	padfCst [ ( j + 3 ) % 3 ]
>9997	MultiplicativeExpression	( j + 3 ) % 3
>9998	PrimaryExpression	3
>9999	AdditiveExpression	j + 3
>10000	PrimaryExpression	3
>10001	Identifier	j
>10002	Identifier	padfCst
>10003	ArrayIndexing	padfWeightsY [ j - poWK -> nFiltInitY ]
>10004	AdditiveExpression	j - poWK -> nFiltInitY
>10005	PtrMemberAccess	poWK -> nFiltInitY
>10006	Identifier	nFiltInitY
>10007	Identifier	poWK
>10008	Identifier	j
>10009	Identifier	padfWeightsY
>10010	ExpressionStatement	 
>10011	AssignmentExpr	padfWeightsY [ j - poWK -> nFiltInitY ] = 1.0
>10012	PrimaryExpression	1.0
>10013	ArrayIndexing	padfWeightsY [ j - poWK -> nFiltInitY ]
>10014	AdditiveExpression	j - poWK -> nFiltInitY
>10015	PtrMemberAccess	poWK -> nFiltInitY
>10016	Identifier	nFiltInitY
>10017	Identifier	poWK
>10018	Identifier	j
>10019	Identifier	padfWeightsY
>10020	Condition	 
>10021	EqualityExpression	dfY == 0.0
>10022	PrimaryExpression	0.0
>10023	Identifier	dfY
>10024	IdentifierDeclStatement	 
>10025	IdentifierDecl	dfY = j - dfDeltaY
>10026	AssignmentExpr	dfY = j - dfDeltaY
>10027	AdditiveExpression	j - dfDeltaY
>10028	Identifier	dfDeltaY
>10029	Identifier	j
>10030	Identifier	dfY
>10031	Identifier	dfY
>10032	IdentifierDeclType	const double
>10033	UnaryExpression	 
>10034	Identifier	j
>10035	IncDec	++
>10036	Condition	 
>10037	RelationalExpression	j <= jMax
>10038	Identifier	jMax
>10039	Identifier	j
>10040	ForInit	 
>10041	IdentifierDeclStatement	int j = jMin ;
>10042	IdentifierDecl	j = jMin
>10043	AssignmentExpr	j = jMin
>10044	Identifier	jMin
>10045	Identifier	jMin
>10046	Identifier	j
>10047	IdentifierDeclType	int
>10048	IdentifierDeclStatement	 
>10049	IdentifierDecl	padfCst [ ] = { dfInvPI2Over3xSinPIDeltaY * dfSinPIDeltaYOver3 , dfInvPI2Over3xSinPIDeltaYxm0d5SinPIDeltaYOver3 \
>10050	AssignmentExpr	padfCst [ ] = { dfInvPI2Over3xSinPIDeltaY * dfSinPIDeltaYOver3 , dfInvPI2Over3xSinPIDeltaYxm0d5SinPIDeltaYOver3 \
>10051	InitializerList	dfInvPI2Over3xSinPIDeltaY * dfSinPIDeltaYOver3
>10052	AdditiveExpression	dfInvPI2Over3xSinPIDeltaYxm0d5SinPIDeltaYOver3 + dfInvPI2Over3xSinPIDeltaYxSinPIOver3xCosPIDeltaYOver3
>10053	Identifier	dfInvPI2Over3xSinPIDeltaYxSinPIOver3xCosPIDeltaYOver3
>10054	Identifier	dfInvPI2Over3xSinPIDeltaYxm0d5SinPIDeltaYOver3
>10055	AdditiveExpression	dfInvPI2Over3xSinPIDeltaYxm0d5SinPIDeltaYOver3 - dfInvPI2Over3xSinPIDeltaYxSinPIOver3xCosPIDeltaYOver3
>10056	Identifier	dfInvPI2Over3xSinPIDeltaYxSinPIOver3xCosPIDeltaYOver3
>10057	Identifier	dfInvPI2Over3xSinPIDeltaYxm0d5SinPIDeltaYOver3
>10058	MultiplicativeExpression	dfInvPI2Over3xSinPIDeltaY * dfSinPIDeltaYOver3
>10059	Identifier	dfSinPIDeltaYOver3
>10060	Identifier	dfInvPI2Over3xSinPIDeltaY
>10061	Identifier	padfCst
>10062	Identifier	padfCst
>10063	IdentifierDeclType	double [ ]
>10064	IdentifierDeclStatement	 
>10065	IdentifierDecl	dfInvPI2Over3xSinPIDeltaYxSinPIOver3xCosPIDeltaYOver3 = dfSinPIOver3 * dfInvPI2Over3xSinPIDeltaY * dfCosPIDeltaYOver3
>10066	AssignmentExpr	dfInvPI2Over3xSinPIDeltaYxSinPIOver3xCosPIDeltaYOver3 = dfSinPIOver3 * dfInvPI2Over3xSinPIDeltaY * dfCosPIDeltaYOver3
>10067	MultiplicativeExpression	dfSinPIOver3 * dfInvPI2Over3xSinPIDeltaY * dfCosPIDeltaYOver3
>10068	MultiplicativeExpression	dfInvPI2Over3xSinPIDeltaY * dfCosPIDeltaYOver3
>10069	Identifier	dfCosPIDeltaYOver3
>10070	Identifier	dfInvPI2Over3xSinPIDeltaY
>10071	Identifier	dfSinPIOver3
>10072	Identifier	dfInvPI2Over3xSinPIDeltaYxSinPIOver3xCosPIDeltaYOver3
>10073	Identifier	dfInvPI2Over3xSinPIDeltaYxSinPIOver3xCosPIDeltaYOver3
>10074	IdentifierDeclType	double
>10075	IdentifierDeclStatement	 
>10076	IdentifierDecl	dfSinPIOver3 = 0.8660254037844386
>10077	AssignmentExpr	dfSinPIOver3 = 0.8660254037844386
>10078	PrimaryExpression	0.8660254037844386
>10079	Identifier	dfSinPIOver3
>10080	Identifier	dfSinPIOver3
>10081	IdentifierDeclType	const double
>10082	IdentifierDeclStatement	 
>10083	IdentifierDecl	dfInvPI2Over3xSinPIDeltaYxm0d5SinPIDeltaYOver3 = - 0.5 * dfInvPI2Over3xSinPIDeltaY * dfSinPIDeltaYOver3
>10084	AssignmentExpr	dfInvPI2Over3xSinPIDeltaYxm0d5SinPIDeltaYOver3 = - 0.5 * dfInvPI2Over3xSinPIDeltaY * dfSinPIDeltaYOver3
>10085	MultiplicativeExpression	- 0.5 * dfInvPI2Over3xSinPIDeltaY * dfSinPIDeltaYOver3
>10086	MultiplicativeExpression	dfInvPI2Over3xSinPIDeltaY * dfSinPIDeltaYOver3
>10087	Identifier	dfSinPIDeltaYOver3
>10088	Identifier	dfInvPI2Over3xSinPIDeltaY
>10089	UnaryOp	- 0.5
>10090	PrimaryExpression	0.5
>10091	UnaryOperator	-
>10092	Identifier	dfInvPI2Over3xSinPIDeltaYxm0d5SinPIDeltaYOver3
>10093	Identifier	dfInvPI2Over3xSinPIDeltaYxm0d5SinPIDeltaYOver3
>10094	IdentifierDeclType	double
>10095	IdentifierDeclStatement	 
>10096	IdentifierDecl	dfInvPI2Over3xSinPIDeltaY = dfInvPI2Over3 * dfSinPIDeltaY
>10097	AssignmentExpr	dfInvPI2Over3xSinPIDeltaY = dfInvPI2Over3 * dfSinPIDeltaY
>10098	MultiplicativeExpression	dfInvPI2Over3 * dfSinPIDeltaY
>10099	Identifier	dfSinPIDeltaY
>10100	Identifier	dfInvPI2Over3
>10101	Identifier	dfInvPI2Over3xSinPIDeltaY
>10102	Identifier	dfInvPI2Over3xSinPIDeltaY
>10103	IdentifierDeclType	double
>10104	IdentifierDeclStatement	 
>10105	IdentifierDecl	dfInvPI2Over3 = 3.0 / ( GWK_PI * GWK_PI )
>10106	AssignmentExpr	dfInvPI2Over3 = 3.0 / ( GWK_PI * GWK_PI )
>10107	MultiplicativeExpression	3.0 / ( GWK_PI * GWK_PI )
>10108	MultiplicativeExpression	GWK_PI * GWK_PI
>10109	Identifier	GWK_PI
>10110	Identifier	GWK_PI
>10111	PrimaryExpression	3.0
>10112	Identifier	dfInvPI2Over3
>10113	Identifier	dfInvPI2Over3
>10114	IdentifierDeclType	const double
>10115	IdentifierDeclStatement	 
>10116	IdentifierDecl	dfSinPIDeltaY = ( 3 - 4 * dfSin2PIDeltaYOver3 ) * dfSinPIDeltaYOver3
>10117	AssignmentExpr	dfSinPIDeltaY = ( 3 - 4 * dfSin2PIDeltaYOver3 ) * dfSinPIDeltaYOver3
>10118	MultiplicativeExpression	( 3 - 4 * dfSin2PIDeltaYOver3 ) * dfSinPIDeltaYOver3
>10119	Identifier	dfSinPIDeltaYOver3
>10120	AdditiveExpression	3 - 4 * dfSin2PIDeltaYOver3
>10121	MultiplicativeExpression	4 * dfSin2PIDeltaYOver3
>10122	Identifier	dfSin2PIDeltaYOver3
>10123	PrimaryExpression	4
>10124	PrimaryExpression	3
>10125	Identifier	dfSinPIDeltaY
>10126	Identifier	dfSinPIDeltaY
>10127	IdentifierDeclType	double
>10128	IdentifierDeclStatement	 
>10129	IdentifierDecl	dfCosPIDeltaYOver3 = sqrt ( 1 - dfSin2PIDeltaYOver3 )
>10130	AssignmentExpr	dfCosPIDeltaYOver3 = sqrt ( 1 - dfSin2PIDeltaYOver3 )
>10131	CallExpression	sqrt ( 1 - dfSin2PIDeltaYOver3 )
>10132	ArgumentList	1 - dfSin2PIDeltaYOver3
>10133	Argument	1 - dfSin2PIDeltaYOver3
>10134	AdditiveExpression	1 - dfSin2PIDeltaYOver3
>10135	Identifier	dfSin2PIDeltaYOver3
>10136	PrimaryExpression	1
>10137	Callee	sqrt
>10138	Identifier	sqrt
>10139	Identifier	dfCosPIDeltaYOver3
>10140	Identifier	dfCosPIDeltaYOver3
>10141	IdentifierDeclType	double
>10142	IdentifierDeclStatement	 
>10143	IdentifierDecl	dfSin2PIDeltaYOver3 = dfSinPIDeltaYOver3 * dfSinPIDeltaYOver3
>10144	AssignmentExpr	dfSin2PIDeltaYOver3 = dfSinPIDeltaYOver3 * dfSinPIDeltaYOver3
>10145	MultiplicativeExpression	dfSinPIDeltaYOver3 * dfSinPIDeltaYOver3
>10146	Identifier	dfSinPIDeltaYOver3
>10147	Identifier	dfSinPIDeltaYOver3
>10148	Identifier	dfSin2PIDeltaYOver3
>10149	Identifier	dfSin2PIDeltaYOver3
>10150	IdentifierDeclType	double
>10151	IdentifierDeclStatement	 
>10152	IdentifierDecl	dfSinPIDeltaYOver3 = sin ( ( - GWK_PI / 3 ) * dfDeltaY )
>10153	AssignmentExpr	dfSinPIDeltaYOver3 = sin ( ( - GWK_PI / 3 ) * dfDeltaY )
>10154	CallExpression	sin ( ( - GWK_PI / 3 ) * dfDeltaY )
>10155	ArgumentList	( - GWK_PI / 3 ) * dfDeltaY
>10156	Argument	( - GWK_PI / 3 ) * dfDeltaY
>10157	MultiplicativeExpression	( - GWK_PI / 3 ) * dfDeltaY
>10158	Identifier	dfDeltaY
>10159	MultiplicativeExpression	- GWK_PI / 3
>10160	PrimaryExpression	3
>10161	UnaryOp	- GWK_PI
>10162	Identifier	GWK_PI
>10163	UnaryOperator	-
>10164	Callee	sin
>10165	Identifier	sin
>10166	Identifier	dfSinPIDeltaYOver3
>10167	Identifier	dfSinPIDeltaYOver3
>10168	IdentifierDeclType	double
>10169	Condition	 
>10170	OrExpression	iSrcY != psWrkStruct -> iLastSrcY || dfDeltaY != psWrkStruct -> dfLastDeltaY
>10171	EqualityExpression	dfDeltaY != psWrkStruct -> dfLastDeltaY
>10172	PtrMemberAccess	psWrkStruct -> dfLastDeltaY
>10173	Identifier	dfLastDeltaY
>10174	Identifier	psWrkStruct
>10175	Identifier	dfDeltaY
>10176	EqualityExpression	iSrcY != psWrkStruct -> iLastSrcY
>10177	PtrMemberAccess	psWrkStruct -> iLastSrcY
>10178	Identifier	iLastSrcY
>10179	Identifier	psWrkStruct
>10180	Identifier	iSrcY
>10181	WhileStatement	while ( jMax - dfDeltaY > 3.0 )
>10182	ExpressionStatement	 
>10183	IncDecOp	jMax --
>10184	IncDec	--
>10185	Identifier	jMax
>10186	Condition	 
>10187	RelationalExpression	jMax - dfDeltaY > 3.0
>10188	PrimaryExpression	3.0
>10189	AdditiveExpression	jMax - dfDeltaY
>10190	Identifier	dfDeltaY
>10191	Identifier	jMax
>10192	WhileStatement	while ( jMin - dfDeltaY < - 3.0 )
>10193	ExpressionStatement	 
>10194	IncDecOp	jMin ++
>10195	IncDec	++
>10196	Identifier	jMin
>10197	Condition	 
>10198	RelationalExpression	jMin - dfDeltaY < - 3.0
>10199	UnaryOp	- 3.0
>10200	PrimaryExpression	3.0
>10201	UnaryOperator	-
>10202	AdditiveExpression	jMin - dfDeltaY
>10203	Identifier	dfDeltaY
>10204	Identifier	jMin
>10205	CompoundStatement	 
>10206	WhileStatement	while ( jMax * dfYScale > 3.0 )
>10207	ExpressionStatement	 
>10208	IncDecOp	jMax --
>10209	IncDec	--
>10210	Identifier	jMax
>10211	Condition	 
>10212	RelationalExpression	jMax * dfYScale > 3.0
>10213	PrimaryExpression	3.0
>10214	MultiplicativeExpression	jMax * dfYScale
>10215	Identifier	dfYScale
>10216	Identifier	jMax
>10217	WhileStatement	while ( jMin * dfYScale < - 3.0 )
>10218	ExpressionStatement	 
>10219	IncDecOp	jMin ++
>10220	IncDec	++
>10221	Identifier	jMin
>10222	Condition	 
>10223	RelationalExpression	jMin * dfYScale < - 3.0
>10224	UnaryOp	- 3.0
>10225	PrimaryExpression	3.0
>10226	UnaryOperator	-
>10227	MultiplicativeExpression	jMin * dfYScale
>10228	Identifier	dfYScale
>10229	Identifier	jMin
>10230	Condition	 
>10231	RelationalExpression	dfYScale < 1.0
>10232	PrimaryExpression	1.0
>10233	Identifier	dfYScale
>10234	IfStatement	if ( dfXScale < 1.0 )
>10235	ElseStatement	else
>10236	CompoundStatement	 
>10237	IfStatement	if ( iSrcX != psWrkStruct -> iLastSrcX || dfDeltaX != psWrkStruct -> dfLastDeltaX )
>10238	CompoundStatement	 
>10239	ExpressionStatement	 
>10240	AssignmentExpr	psWrkStruct -> dfLastDeltaX = dfDeltaX
>10241	Identifier	dfDeltaX
>10242	PtrMemberAccess	psWrkStruct -> dfLastDeltaX
>10243	Identifier	dfLastDeltaX
>10244	Identifier	psWrkStruct
>10245	ExpressionStatement	 
>10246	AssignmentExpr	psWrkStruct -> iLastSrcX = iSrcX
>10247	Identifier	iSrcX
>10248	PtrMemberAccess	psWrkStruct -> iLastSrcX
>10249	Identifier	iLastSrcX
>10250	Identifier	psWrkStruct
>10251	ForStatement	for ( int i = iMin ; i <= iMax ; ++ i )
>10252	CompoundStatement	 
>10253	IfStatement	if ( dfX == 0.0 )
>10254	ElseStatement	else
>10255	ExpressionStatement	 
>10256	AssignmentExpr	padfWeightsX [ i - poWK -> nFiltInitX ] = padfCst [ ( i + 3 ) % 3 ] / ( dfX * dfX )
>10257	MultiplicativeExpression	padfCst [ ( i + 3 ) % 3 ] / ( dfX * dfX )
>10258	MultiplicativeExpression	dfX * dfX
>10259	Identifier	dfX
>10260	Identifier	dfX
>10261	ArrayIndexing	padfCst [ ( i + 3 ) % 3 ]
>10262	MultiplicativeExpression	( i + 3 ) % 3
>10263	PrimaryExpression	3
>10264	AdditiveExpression	i + 3
>10265	PrimaryExpression	3
>10266	Identifier	i
>10267	Identifier	padfCst
>10268	ArrayIndexing	padfWeightsX [ i - poWK -> nFiltInitX ]
>10269	AdditiveExpression	i - poWK -> nFiltInitX
>10270	PtrMemberAccess	poWK -> nFiltInitX
>10271	Identifier	nFiltInitX
>10272	Identifier	poWK
>10273	Identifier	i
>10274	Identifier	padfWeightsX
>10275	ExpressionStatement	 
>10276	AssignmentExpr	padfWeightsX [ i - poWK -> nFiltInitX ] = 1.0
>10277	PrimaryExpression	1.0
>10278	ArrayIndexing	padfWeightsX [ i - poWK -> nFiltInitX ]
>10279	AdditiveExpression	i - poWK -> nFiltInitX
>10280	PtrMemberAccess	poWK -> nFiltInitX
>10281	Identifier	nFiltInitX
>10282	Identifier	poWK
>10283	Identifier	i
>10284	Identifier	padfWeightsX
>10285	Condition	 
>10286	EqualityExpression	dfX == 0.0
>10287	PrimaryExpression	0.0
>10288	Identifier	dfX
>10289	IdentifierDeclStatement	 
>10290	IdentifierDecl	dfX = i - dfDeltaX
>10291	AssignmentExpr	dfX = i - dfDeltaX
>10292	AdditiveExpression	i - dfDeltaX
>10293	Identifier	dfDeltaX
>10294	Identifier	i
>10295	Identifier	dfX
>10296	Identifier	dfX
>10297	IdentifierDeclType	const double
>10298	UnaryExpression	 
>10299	Identifier	i
>10300	IncDec	++
>10301	Condition	 
>10302	RelationalExpression	i <= iMax
>10303	Identifier	iMax
>10304	Identifier	i
>10305	ForInit	 
>10306	IdentifierDeclStatement	int i = iMin ;
>10307	IdentifierDecl	i = iMin
>10308	AssignmentExpr	i = iMin
>10309	Identifier	iMin
>10310	Identifier	iMin
>10311	Identifier	i
>10312	IdentifierDeclType	int
>10313	IdentifierDeclStatement	 
>10314	IdentifierDecl	padfCst [ ] = { dfInvPI2Over3xSinPIDeltaX * dfSinPIDeltaXOver3 , dfInvPI2Over3xSinPIDeltaXxm0d5SinPIDeltaXOver3 \
>10315	AssignmentExpr	padfCst [ ] = { dfInvPI2Over3xSinPIDeltaX * dfSinPIDeltaXOver3 , dfInvPI2Over3xSinPIDeltaXxm0d5SinPIDeltaXOver3 \
>10316	InitializerList	dfInvPI2Over3xSinPIDeltaX * dfSinPIDeltaXOver3
>10317	AdditiveExpression	dfInvPI2Over3xSinPIDeltaXxm0d5SinPIDeltaXOver3 + dfInvPI2Over3xSinPIDeltaXxSinPIOver3xCosPIDeltaXOver3
>10318	Identifier	dfInvPI2Over3xSinPIDeltaXxSinPIOver3xCosPIDeltaXOver3
>10319	Identifier	dfInvPI2Over3xSinPIDeltaXxm0d5SinPIDeltaXOver3
>10320	AdditiveExpression	dfInvPI2Over3xSinPIDeltaXxm0d5SinPIDeltaXOver3 - dfInvPI2Over3xSinPIDeltaXxSinPIOver3xCosPIDeltaXOver3
>10321	Identifier	dfInvPI2Over3xSinPIDeltaXxSinPIOver3xCosPIDeltaXOver3
>10322	Identifier	dfInvPI2Over3xSinPIDeltaXxm0d5SinPIDeltaXOver3
>10323	MultiplicativeExpression	dfInvPI2Over3xSinPIDeltaX * dfSinPIDeltaXOver3
>10324	Identifier	dfSinPIDeltaXOver3
>10325	Identifier	dfInvPI2Over3xSinPIDeltaX
>10326	Identifier	padfCst
>10327	Identifier	padfCst
>10328	IdentifierDeclType	double [ ]
>10329	IdentifierDeclStatement	 
>10330	IdentifierDecl	dfInvPI2Over3xSinPIDeltaXxSinPIOver3xCosPIDeltaXOver3 = dfSinPIOver3 * dfInvPI2Over3xSinPIDeltaX * dfCosPIDeltaXOver3
>10331	AssignmentExpr	dfInvPI2Over3xSinPIDeltaXxSinPIOver3xCosPIDeltaXOver3 = dfSinPIOver3 * dfInvPI2Over3xSinPIDeltaX * dfCosPIDeltaXOver3
>10332	MultiplicativeExpression	dfSinPIOver3 * dfInvPI2Over3xSinPIDeltaX * dfCosPIDeltaXOver3
>10333	MultiplicativeExpression	dfInvPI2Over3xSinPIDeltaX * dfCosPIDeltaXOver3
>10334	Identifier	dfCosPIDeltaXOver3
>10335	Identifier	dfInvPI2Over3xSinPIDeltaX
>10336	Identifier	dfSinPIOver3
>10337	Identifier	dfInvPI2Over3xSinPIDeltaXxSinPIOver3xCosPIDeltaXOver3
>10338	Identifier	dfInvPI2Over3xSinPIDeltaXxSinPIOver3xCosPIDeltaXOver3
>10339	IdentifierDeclType	double
>10340	IdentifierDeclStatement	 
>10341	IdentifierDecl	dfSinPIOver3 = 0.8660254037844386
>10342	AssignmentExpr	dfSinPIOver3 = 0.8660254037844386
>10343	PrimaryExpression	0.8660254037844386
>10344	Identifier	dfSinPIOver3
>10345	Identifier	dfSinPIOver3
>10346	IdentifierDeclType	const double
>10347	IdentifierDeclStatement	 
>10348	IdentifierDecl	dfInvPI2Over3xSinPIDeltaXxm0d5SinPIDeltaXOver3 = - 0.5 * dfInvPI2Over3xSinPIDeltaX * dfSinPIDeltaXOver3
>10349	AssignmentExpr	dfInvPI2Over3xSinPIDeltaXxm0d5SinPIDeltaXOver3 = - 0.5 * dfInvPI2Over3xSinPIDeltaX * dfSinPIDeltaXOver3
>10350	MultiplicativeExpression	- 0.5 * dfInvPI2Over3xSinPIDeltaX * dfSinPIDeltaXOver3
>10351	MultiplicativeExpression	dfInvPI2Over3xSinPIDeltaX * dfSinPIDeltaXOver3
>10352	Identifier	dfSinPIDeltaXOver3
>10353	Identifier	dfInvPI2Over3xSinPIDeltaX
>10354	UnaryOp	- 0.5
>10355	PrimaryExpression	0.5
>10356	UnaryOperator	-
>10357	Identifier	dfInvPI2Over3xSinPIDeltaXxm0d5SinPIDeltaXOver3
>10358	Identifier	dfInvPI2Over3xSinPIDeltaXxm0d5SinPIDeltaXOver3
>10359	IdentifierDeclType	double
>10360	IdentifierDeclStatement	 
>10361	IdentifierDecl	dfInvPI2Over3xSinPIDeltaX = dfInvPI2Over3 * dfSinPIDeltaX
>10362	AssignmentExpr	dfInvPI2Over3xSinPIDeltaX = dfInvPI2Over3 * dfSinPIDeltaX
>10363	MultiplicativeExpression	dfInvPI2Over3 * dfSinPIDeltaX
>10364	Identifier	dfSinPIDeltaX
>10365	Identifier	dfInvPI2Over3
>10366	Identifier	dfInvPI2Over3xSinPIDeltaX
>10367	Identifier	dfInvPI2Over3xSinPIDeltaX
>10368	IdentifierDeclType	double
>10369	IdentifierDeclStatement	 
>10370	IdentifierDecl	dfInvPI2Over3 = 3.0 / ( GWK_PI * GWK_PI )
>10371	AssignmentExpr	dfInvPI2Over3 = 3.0 / ( GWK_PI * GWK_PI )
>10372	MultiplicativeExpression	3.0 / ( GWK_PI * GWK_PI )
>10373	MultiplicativeExpression	GWK_PI * GWK_PI
>10374	Identifier	GWK_PI
>10375	Identifier	GWK_PI
>10376	PrimaryExpression	3.0
>10377	Identifier	dfInvPI2Over3
>10378	Identifier	dfInvPI2Over3
>10379	IdentifierDeclType	const double
>10380	IdentifierDeclStatement	 
>10381	IdentifierDecl	dfSinPIDeltaX = ( 3 - 4 * dfSin2PIDeltaXOver3 ) * dfSinPIDeltaXOver3
>10382	AssignmentExpr	dfSinPIDeltaX = ( 3 - 4 * dfSin2PIDeltaXOver3 ) * dfSinPIDeltaXOver3
>10383	MultiplicativeExpression	( 3 - 4 * dfSin2PIDeltaXOver3 ) * dfSinPIDeltaXOver3
>10384	Identifier	dfSinPIDeltaXOver3
>10385	AdditiveExpression	3 - 4 * dfSin2PIDeltaXOver3
>10386	MultiplicativeExpression	4 * dfSin2PIDeltaXOver3
>10387	Identifier	dfSin2PIDeltaXOver3
>10388	PrimaryExpression	4
>10389	PrimaryExpression	3
>10390	Identifier	dfSinPIDeltaX
>10391	Identifier	dfSinPIDeltaX
>10392	IdentifierDeclType	double
>10393	IdentifierDeclStatement	 
>10394	IdentifierDecl	dfCosPIDeltaXOver3 = sqrt ( 1 - dfSin2PIDeltaXOver3 )
>10395	AssignmentExpr	dfCosPIDeltaXOver3 = sqrt ( 1 - dfSin2PIDeltaXOver3 )
>10396	CallExpression	sqrt ( 1 - dfSin2PIDeltaXOver3 )
>10397	ArgumentList	1 - dfSin2PIDeltaXOver3
>10398	Argument	1 - dfSin2PIDeltaXOver3
>10399	AdditiveExpression	1 - dfSin2PIDeltaXOver3
>10400	Identifier	dfSin2PIDeltaXOver3
>10401	PrimaryExpression	1
>10402	Callee	sqrt
>10403	Identifier	sqrt
>10404	Identifier	dfCosPIDeltaXOver3
>10405	Identifier	dfCosPIDeltaXOver3
>10406	IdentifierDeclType	double
>10407	IdentifierDeclStatement	 
>10408	IdentifierDecl	dfSin2PIDeltaXOver3 = dfSinPIDeltaXOver3 * dfSinPIDeltaXOver3
>10409	AssignmentExpr	dfSin2PIDeltaXOver3 = dfSinPIDeltaXOver3 * dfSinPIDeltaXOver3
>10410	MultiplicativeExpression	dfSinPIDeltaXOver3 * dfSinPIDeltaXOver3
>10411	Identifier	dfSinPIDeltaXOver3
>10412	Identifier	dfSinPIDeltaXOver3
>10413	Identifier	dfSin2PIDeltaXOver3
>10414	Identifier	dfSin2PIDeltaXOver3
>10415	IdentifierDeclType	double
>10416	IdentifierDeclStatement	 
>10417	IdentifierDecl	dfSinPIDeltaXOver3 = sin ( ( - GWK_PI / 3 ) * dfDeltaX )
>10418	AssignmentExpr	dfSinPIDeltaXOver3 = sin ( ( - GWK_PI / 3 ) * dfDeltaX )
>10419	CallExpression	sin ( ( - GWK_PI / 3 ) * dfDeltaX )
>10420	ArgumentList	( - GWK_PI / 3 ) * dfDeltaX
>10421	Argument	( - GWK_PI / 3 ) * dfDeltaX
>10422	MultiplicativeExpression	( - GWK_PI / 3 ) * dfDeltaX
>10423	Identifier	dfDeltaX
>10424	MultiplicativeExpression	- GWK_PI / 3
>10425	PrimaryExpression	3
>10426	UnaryOp	- GWK_PI
>10427	Identifier	GWK_PI
>10428	UnaryOperator	-
>10429	Callee	sin
>10430	Identifier	sin
>10431	Identifier	dfSinPIDeltaXOver3
>10432	Identifier	dfSinPIDeltaXOver3
>10433	IdentifierDeclType	double
>10434	Condition	 
>10435	OrExpression	iSrcX != psWrkStruct -> iLastSrcX || dfDeltaX != psWrkStruct -> dfLastDeltaX
>10436	EqualityExpression	dfDeltaX != psWrkStruct -> dfLastDeltaX
>10437	PtrMemberAccess	psWrkStruct -> dfLastDeltaX
>10438	Identifier	dfLastDeltaX
>10439	Identifier	psWrkStruct
>10440	Identifier	dfDeltaX
>10441	EqualityExpression	iSrcX != psWrkStruct -> iLastSrcX
>10442	PtrMemberAccess	psWrkStruct -> iLastSrcX
>10443	Identifier	iLastSrcX
>10444	Identifier	psWrkStruct
>10445	Identifier	iSrcX
>10446	WhileStatement	while ( iMax - dfDeltaX > 3.0 )
>10447	ExpressionStatement	 
>10448	IncDecOp	iMax --
>10449	IncDec	--
>10450	Identifier	iMax
>10451	Condition	 
>10452	RelationalExpression	iMax - dfDeltaX > 3.0
>10453	PrimaryExpression	3.0
>10454	AdditiveExpression	iMax - dfDeltaX
>10455	Identifier	dfDeltaX
>10456	Identifier	iMax
>10457	WhileStatement	while ( iMin - dfDeltaX < - 3.0 )
>10458	ExpressionStatement	 
>10459	IncDecOp	iMin ++
>10460	IncDec	++
>10461	Identifier	iMin
>10462	Condition	 
>10463	RelationalExpression	iMin - dfDeltaX < - 3.0
>10464	UnaryOp	- 3.0
>10465	PrimaryExpression	3.0
>10466	UnaryOperator	-
>10467	AdditiveExpression	iMin - dfDeltaX
>10468	Identifier	dfDeltaX
>10469	Identifier	iMin
>10470	CompoundStatement	 
>10471	WhileStatement	while ( iMax * dfXScale > 3.0 )
>10472	ExpressionStatement	 
>10473	IncDecOp	iMax --
>10474	IncDec	--
>10475	Identifier	iMax
>10476	Condition	 
>10477	RelationalExpression	iMax * dfXScale > 3.0
>10478	PrimaryExpression	3.0
>10479	MultiplicativeExpression	iMax * dfXScale
>10480	Identifier	dfXScale
>10481	Identifier	iMax
>10482	WhileStatement	while ( iMin * dfXScale < - 3.0 )
>10483	ExpressionStatement	 
>10484	IncDecOp	iMin ++
>10485	IncDec	++
>10486	Identifier	iMin
>10487	Condition	 
>10488	RelationalExpression	iMin * dfXScale < - 3.0
>10489	UnaryOp	- 3.0
>10490	PrimaryExpression	3.0
>10491	UnaryOperator	-
>10492	MultiplicativeExpression	iMin * dfXScale
>10493	Identifier	dfXScale
>10494	Identifier	iMin
>10495	Condition	 
>10496	RelationalExpression	dfXScale < 1.0
>10497	PrimaryExpression	1.0
>10498	Identifier	dfXScale
>10499	IfStatement	if ( iSrcX + iMax >= nSrcXSize )
>10500	ExpressionStatement	 
>10501	AssignmentExpr	iMax = nSrcXSize - iSrcX - 1
>10502	AdditiveExpression	nSrcXSize - iSrcX - 1
>10503	AdditiveExpression	iSrcX - 1
>10504	PrimaryExpression	1
>10505	Identifier	iSrcX
>10506	Identifier	nSrcXSize
>10507	Identifier	iMax
>10508	Condition	 
>10509	RelationalExpression	iSrcX + iMax >= nSrcXSize
>10510	Identifier	nSrcXSize
>10511	AdditiveExpression	iSrcX + iMax
>10512	Identifier	iMax
>10513	Identifier	iSrcX
>10514	IfStatement	if ( iSrcX + iMin < 0 )
>10515	ExpressionStatement	 
>10516	AssignmentExpr	iMin = - iSrcX
>10517	UnaryOp	- iSrcX
>10518	Identifier	iSrcX
>10519	UnaryOperator	-
>10520	Identifier	iMin
>10521	Condition	 
>10522	RelationalExpression	iSrcX + iMin < 0
>10523	PrimaryExpression	0
>10524	AdditiveExpression	iSrcX + iMin
>10525	Identifier	iMin
>10526	Identifier	iSrcX
>10527	IdentifierDeclStatement	 
>10528	IdentifierDecl	iMax = poWK -> nXRadius
>10529	AssignmentExpr	iMax = poWK -> nXRadius
>10530	PtrMemberAccess	poWK -> nXRadius
>10531	Identifier	nXRadius
>10532	Identifier	poWK
>10533	Identifier	iMax
>10534	Identifier	iMax
>10535	IdentifierDeclType	int
>10536	IdentifierDecl	iMin = poWK -> nFiltInitX
>10537	AssignmentExpr	iMin = poWK -> nFiltInitX
>10538	PtrMemberAccess	poWK -> nFiltInitX
>10539	Identifier	nFiltInitX
>10540	Identifier	poWK
>10541	Identifier	iMin
>10542	Identifier	iMin
>10543	IdentifierDeclType	int
>10544	IfStatement	if ( iSrcY + jMax >= nSrcYSize )
>10545	ExpressionStatement	 
>10546	AssignmentExpr	jMax = nSrcYSize - iSrcY - 1
>10547	AdditiveExpression	nSrcYSize - iSrcY - 1
>10548	AdditiveExpression	iSrcY - 1
>10549	PrimaryExpression	1
>10550	Identifier	iSrcY
>10551	Identifier	nSrcYSize
>10552	Identifier	jMax
>10553	Condition	 
>10554	RelationalExpression	iSrcY + jMax >= nSrcYSize
>10555	Identifier	nSrcYSize
>10556	AdditiveExpression	iSrcY + jMax
>10557	Identifier	jMax
>10558	Identifier	iSrcY
>10559	IfStatement	if ( iSrcY + jMin < 0 )
>10560	ExpressionStatement	 
>10561	AssignmentExpr	jMin = - iSrcY
>10562	UnaryOp	- iSrcY
>10563	Identifier	iSrcY
>10564	UnaryOperator	-
>10565	Identifier	jMin
>10566	Condition	 
>10567	RelationalExpression	iSrcY + jMin < 0
>10568	PrimaryExpression	0
>10569	AdditiveExpression	iSrcY + jMin
>10570	Identifier	jMin
>10571	Identifier	iSrcY
>10572	IdentifierDeclStatement	 
>10573	IdentifierDecl	jMax = poWK -> nYRadius
>10574	AssignmentExpr	jMax = poWK -> nYRadius
>10575	PtrMemberAccess	poWK -> nYRadius
>10576	Identifier	nYRadius
>10577	Identifier	poWK
>10578	Identifier	jMax
>10579	Identifier	jMax
>10580	IdentifierDeclType	int
>10581	IdentifierDecl	jMin = poWK -> nFiltInitY
>10582	AssignmentExpr	jMin = poWK -> nFiltInitY
>10583	PtrMemberAccess	poWK -> nFiltInitY
>10584	Identifier	nFiltInitY
>10585	Identifier	poWK
>10586	Identifier	jMin
>10587	Identifier	jMin
>10588	IdentifierDeclType	int
>10589	IdentifierDeclStatement	 
>10590	IdentifierDecl	* padfRowImag = psWrkStruct -> padfRowImag
>10591	AssignmentExpr	* padfRowImag = psWrkStruct -> padfRowImag
>10592	PtrMemberAccess	psWrkStruct -> padfRowImag
>10593	Identifier	padfRowImag
>10594	Identifier	psWrkStruct
>10595	Identifier	padfRowImag
>10596	Identifier	padfRowImag
>10597	IdentifierDeclType	double *
>10598	IdentifierDeclStatement	 
>10599	IdentifierDecl	* padfRowReal = psWrkStruct -> padfRowReal
>10600	AssignmentExpr	* padfRowReal = psWrkStruct -> padfRowReal
>10601	PtrMemberAccess	psWrkStruct -> padfRowReal
>10602	Identifier	padfRowReal
>10603	Identifier	psWrkStruct
>10604	Identifier	padfRowReal
>10605	Identifier	padfRowReal
>10606	IdentifierDeclType	double *
>10607	IdentifierDeclStatement	 
>10608	IdentifierDecl	* padfRowDensity = psWrkStruct -> padfRowDensity
>10609	AssignmentExpr	* padfRowDensity = psWrkStruct -> padfRowDensity
>10610	PtrMemberAccess	psWrkStruct -> padfRowDensity
>10611	Identifier	padfRowDensity
>10612	Identifier	psWrkStruct
>10613	Identifier	padfRowDensity
>10614	Identifier	padfRowDensity
>10615	IdentifierDeclType	double *
>10616	IdentifierDeclStatement	 
>10617	IdentifierDecl	* padfWeightsY = psWrkStruct -> padfWeightsY
>10618	AssignmentExpr	* padfWeightsY = psWrkStruct -> padfWeightsY
>10619	PtrMemberAccess	psWrkStruct -> padfWeightsY
>10620	Identifier	padfWeightsY
>10621	Identifier	psWrkStruct
>10622	Identifier	padfWeightsY
>10623	Identifier	padfWeightsY
>10624	IdentifierDeclType	double *
>10625	IdentifierDeclStatement	 
>10626	IdentifierDecl	* padfWeightsX = psWrkStruct -> padfWeightsX
>10627	AssignmentExpr	* padfWeightsX = psWrkStruct -> padfWeightsX
>10628	PtrMemberAccess	psWrkStruct -> padfWeightsX
>10629	Identifier	padfWeightsX
>10630	Identifier	psWrkStruct
>10631	Identifier	padfWeightsX
>10632	Identifier	padfWeightsX
>10633	IdentifierDeclType	double *
>10634	IdentifierDeclStatement	 
>10635	IdentifierDecl	dfYScale = poWK -> dfYScale
>10636	AssignmentExpr	dfYScale = poWK -> dfYScale
>10637	PtrMemberAccess	poWK -> dfYScale
>10638	Identifier	dfYScale
>10639	Identifier	poWK
>10640	Identifier	dfYScale
>10641	Identifier	dfYScale
>10642	IdentifierDeclType	const double
>10643	IdentifierDecl	dfXScale = poWK -> dfXScale
>10644	AssignmentExpr	dfXScale = poWK -> dfXScale
>10645	PtrMemberAccess	poWK -> dfXScale
>10646	Identifier	dfXScale
>10647	Identifier	poWK
>10648	Identifier	dfXScale
>10649	Identifier	dfXScale
>10650	IdentifierDeclType	const double
>10651	IdentifierDeclStatement	 
>10652	IdentifierDecl	dfDeltaY = dfSrcY - 0.5 - iSrcY
>10653	AssignmentExpr	dfDeltaY = dfSrcY - 0.5 - iSrcY
>10654	AdditiveExpression	dfSrcY - 0.5 - iSrcY
>10655	AdditiveExpression	0.5 - iSrcY
>10656	Identifier	iSrcY
>10657	PrimaryExpression	0.5
>10658	Identifier	dfSrcY
>10659	Identifier	dfDeltaY
>10660	Identifier	dfDeltaY
>10661	IdentifierDeclType	const double
>10662	IdentifierDeclStatement	 
>10663	IdentifierDecl	dfDeltaX = dfSrcX - 0.5 - iSrcX
>10664	AssignmentExpr	dfDeltaX = dfSrcX - 0.5 - iSrcX
>10665	AdditiveExpression	dfSrcX - 0.5 - iSrcX
>10666	AdditiveExpression	0.5 - iSrcX
>10667	Identifier	iSrcX
>10668	PrimaryExpression	0.5
>10669	Identifier	dfSrcX
>10670	Identifier	dfDeltaX
>10671	Identifier	dfDeltaX
>10672	IdentifierDeclType	const double
>10673	IdentifierDeclStatement	 
>10674	IdentifierDecl	iSrcOffset = iSrcX + iSrcY * nSrcXSize
>10675	AssignmentExpr	iSrcOffset = iSrcX + iSrcY * nSrcXSize
>10676	AdditiveExpression	iSrcX + iSrcY * nSrcXSize
>10677	MultiplicativeExpression	iSrcY * nSrcXSize
>10678	Identifier	nSrcXSize
>10679	Identifier	iSrcY
>10680	Identifier	iSrcX
>10681	Identifier	iSrcOffset
>10682	Identifier	iSrcOffset
>10683	IdentifierDeclType	const int
>10684	IdentifierDeclStatement	 
>10685	IdentifierDecl	iSrcY = ( int ) floor ( dfSrcY - 0.5 )
>10686	AssignmentExpr	iSrcY = ( int ) floor ( dfSrcY - 0.5 )
>10687	CastExpression	( int ) floor ( dfSrcY - 0.5 )
>10688	CallExpression	floor ( dfSrcY - 0.5 )
>10689	ArgumentList	dfSrcY - 0.5
>10690	Argument	dfSrcY - 0.5
>10691	AdditiveExpression	dfSrcY - 0.5
>10692	PrimaryExpression	0.5
>10693	Identifier	dfSrcY
>10694	Callee	floor
>10695	Identifier	floor
>10696	CastTarget	int
>10697	Identifier	iSrcY
>10698	Identifier	iSrcY
>10699	IdentifierDeclType	const int
>10700	IdentifierDeclStatement	 
>10701	IdentifierDecl	iSrcX = ( int ) floor ( dfSrcX - 0.5 )
>10702	AssignmentExpr	iSrcX = ( int ) floor ( dfSrcX - 0.5 )
>10703	CastExpression	( int ) floor ( dfSrcX - 0.5 )
>10704	CallExpression	floor ( dfSrcX - 0.5 )
>10705	ArgumentList	dfSrcX - 0.5
>10706	Argument	dfSrcX - 0.5
>10707	AdditiveExpression	dfSrcX - 0.5
>10708	PrimaryExpression	0.5
>10709	Identifier	dfSrcX
>10710	Callee	floor
>10711	Identifier	floor
>10712	CastTarget	int
>10713	Identifier	iSrcX
>10714	Identifier	iSrcX
>10715	IdentifierDeclType	const int
>10716	IdentifierDeclStatement	 
>10717	IdentifierDecl	dfAccumulatorWeight = 0.0
>10718	AssignmentExpr	dfAccumulatorWeight = 0.0
>10719	PrimaryExpression	0.0
>10720	Identifier	dfAccumulatorWeight
>10721	Identifier	dfAccumulatorWeight
>10722	IdentifierDeclType	double
>10723	IdentifierDeclStatement	 
>10724	IdentifierDecl	dfAccumulatorDensity = 0.0
>10725	AssignmentExpr	dfAccumulatorDensity = 0.0
>10726	PrimaryExpression	0.0
>10727	Identifier	dfAccumulatorDensity
>10728	Identifier	dfAccumulatorDensity
>10729	IdentifierDeclType	double
>10730	IdentifierDeclStatement	 
>10731	IdentifierDecl	dfAccumulatorImag = 0.0
>10732	AssignmentExpr	dfAccumulatorImag = 0.0
>10733	PrimaryExpression	0.0
>10734	Identifier	dfAccumulatorImag
>10735	Identifier	dfAccumulatorImag
>10736	IdentifierDeclType	double
>10737	IdentifierDecl	dfAccumulatorReal = 0.0
>10738	AssignmentExpr	dfAccumulatorReal = 0.0
>10739	PrimaryExpression	0.0
>10740	Identifier	dfAccumulatorReal
>10741	Identifier	dfAccumulatorReal
>10742	IdentifierDeclType	double
>10743	IdentifierDeclStatement	 
>10744	IdentifierDecl	nSrcYSize = poWK -> nSrcYSize
>10745	AssignmentExpr	nSrcYSize = poWK -> nSrcYSize
>10746	PtrMemberAccess	poWK -> nSrcYSize
>10747	Identifier	nSrcYSize
>10748	Identifier	poWK
>10749	Identifier	nSrcYSize
>10750	Identifier	nSrcYSize
>10751	IdentifierDeclType	const int
>10752	IdentifierDeclStatement	 
>10753	IdentifierDecl	nSrcXSize = poWK -> nSrcXSize
>10754	AssignmentExpr	nSrcXSize = poWK -> nSrcXSize
>10755	PtrMemberAccess	poWK -> nSrcXSize
>10756	Identifier	nSrcXSize
>10757	Identifier	poWK
>10758	Identifier	nSrcXSize
>10759	Identifier	nSrcXSize
>10760	IdentifierDeclType	const int
>10867	FunctionDef	GWKCubicSplineResampleNoMasksByte (GDALWarpKernel * poWK , int iBand , double dfSrcX , double dfSrcY , GByte * pbValue , \
>10868	ParameterList	GDALWarpKernel * poWK , int iBand , double dfSrcX , double dfSrcY , GByte * pbValue , double * padfBSpline
>10869	Parameter	 
>10870	Identifier	padfBSpline
>10871	ParameterType	double *
>10872	Parameter	 
>10873	Identifier	pbValue
>10874	ParameterType	GByte *
>10875	Parameter	 
>10876	Identifier	dfSrcY
>10877	ParameterType	double
>10878	Parameter	 
>10879	Identifier	dfSrcX
>10880	ParameterType	double
>10881	Parameter	 
>10882	Identifier	iBand
>10883	ParameterType	int
>10884	Parameter	 
>10885	Identifier	poWK
>10886	ParameterType	GDALWarpKernel *
>10887	ReturnType	static int
>10888	CompoundStatement	 
>10889	ReturnStatement	 
>10890	Identifier	TRUE
>10891	IfStatement	if ( dfAccumulator < 0.0 )
>10892	ElseStatement	else
>10893	IfStatement	if ( dfAccumulator > 255.0 )
>10894	ElseStatement	else
>10895	ExpressionStatement	 
>10896	AssignmentExpr	* pbValue = ( GByte ) ( 0.5 + dfAccumulator )
>10897	CastExpression	( GByte ) ( 0.5 + dfAccumulator )
>10898	AdditiveExpression	0.5 + dfAccumulator
>10899	Identifier	dfAccumulator
>10900	PrimaryExpression	0.5
>10901	CastTarget	GByte
>10902	UnaryOp	* pbValue
>10903	Identifier	pbValue
>10904	UnaryOperator	*
>10905	ExpressionStatement	 
>10906	AssignmentExpr	* pbValue = 255
>10907	PrimaryExpression	255
>10908	UnaryOp	* pbValue
>10909	Identifier	pbValue
>10910	UnaryOperator	*
>10911	Condition	 
>10912	RelationalExpression	dfAccumulator > 255.0
>10913	PrimaryExpression	255.0
>10914	Identifier	dfAccumulator
>10915	ExpressionStatement	 
>10916	AssignmentExpr	* pbValue = 0
>10917	PrimaryExpression	0
>10918	UnaryOp	* pbValue
>10919	Identifier	pbValue
>10920	UnaryOperator	*
>10921	Condition	 
>10922	RelationalExpression	dfAccumulator < 0.0
>10923	PrimaryExpression	0.0
>10924	Identifier	dfAccumulator
>10925	ForStatement	for ( jC = 0 , j = 1 - nYRadius ; j <= nYRadius ; ++ j , ++ jC )
>10926	CompoundStatement	 
>10927	ForStatement	for ( iC = 0 , i = 1 - nXRadius ; i <= nXRadius ; ++ i , ++ iC )
>10928	CompoundStatement	 
>10929	ExpressionStatement	 
>10930	AssignmentExpr	dfAccumulator += ( double ) pabySrcBand [ iSampI + iSampJ ] * dfWeight2
>10931	MultiplicativeExpression	( double ) pabySrcBand [ iSampI + iSampJ ] * dfWeight2
>10932	Identifier	dfWeight2
>10933	CastExpression	( double ) pabySrcBand [ iSampI + iSampJ ]
>10934	ArrayIndexing	pabySrcBand [ iSampI + iSampJ ]
>10935	AdditiveExpression	iSampI + iSampJ
>10936	Identifier	iSampJ
>10937	Identifier	iSampI
>10938	Identifier	pabySrcBand
>10939	CastTarget	double
>10940	Identifier	dfAccumulator
>10941	IfStatement	if ( jC == 0 )
>10942	ElseStatement	else
>10943	ExpressionStatement	 
>10944	AssignmentExpr	dfWeight2 = dfWeight1 * padfBSpline [ iC ]
>10945	MultiplicativeExpression	dfWeight1 * padfBSpline [ iC ]
>10946	ArrayIndexing	padfBSpline [ iC ]
>10947	Identifier	iC
>10948	Identifier	padfBSpline
>10949	Identifier	dfWeight1
>10950	Identifier	dfWeight2
>10951	CompoundStatement	 
>10952	ExpressionStatement	 
>10953	AssignmentExpr	dfWeight2 *= dfWeight1
>10954	Identifier	dfWeight1
>10955	Identifier	dfWeight2
>10956	ExpressionStatement	 
>10957	AssignmentExpr	dfWeight2 = padfBSpline [ iC ] = ( ( dfXScale < 1.0 ) ? GWKBSpline ( ( double ) i * dfXScale ) * dfXScale 
>10958	AssignmentExpr	padfBSpline [ iC ] = ( ( dfXScale < 1.0 ) ? GWKBSpline ( ( double ) i * dfXScale ) * dfXScale 
>10959	ConditionalExpression	( dfXScale < 1.0 ) ? GWKBSpline ( ( double ) i * dfXScale ) * dfXScale 
>10960	CallExpression	GWKBSpline ( dfDeltaX - ( double ) i )
>10961	ArgumentList	dfDeltaX - ( double ) i
>10962	Argument	dfDeltaX - ( double ) i
>10963	AdditiveExpression	dfDeltaX - ( double ) i
>10964	CastExpression	( double ) i
>10965	Identifier	i
>10966	CastTarget	double
>10967	Identifier	dfDeltaX
>10968	Callee	GWKBSpline
>10969	Identifier	GWKBSpline
>10970	MultiplicativeExpression	GWKBSpline ( ( double ) i * dfXScale ) * dfXScale
>10971	Identifier	dfXScale
>10972	CallExpression	GWKBSpline ( ( double ) i * dfXScale )
>10973	ArgumentList	( double ) i * dfXScale
>10974	Argument	( double ) i * dfXScale
>10975	MultiplicativeExpression	( double ) i * dfXScale
>10976	Identifier	dfXScale
>10977	CastExpression	( double ) i
>10978	Identifier	i
>10979	CastTarget	double
>10980	Callee	GWKBSpline
>10981	Identifier	GWKBSpline
>10982	Condition	dfXScale < 1.0
>10983	RelationalExpression	dfXScale < 1.0
>10984	PrimaryExpression	1.0
>10985	Identifier	dfXScale
>10986	ArrayIndexing	padfBSpline [ iC ]
>10987	Identifier	iC
>10988	Identifier	padfBSpline
>10989	Identifier	dfWeight2
>10990	Condition	 
>10991	EqualityExpression	jC == 0
>10992	PrimaryExpression	0
>10993	Identifier	jC
>10994	IfStatement	if ( iSrcX + i < 0 )
>10995	ElseStatement	else
>10996	IfStatement	if ( iSrcX + i >= nSrcXSize )
>10997	ElseStatement	else
>10998	ExpressionStatement	 
>10999	AssignmentExpr	iSampI = i
>11000	Identifier	i
>11001	Identifier	iSampI
>11002	ExpressionStatement	 
>11003	AssignmentExpr	iSampI = 2 * nSrcXSize - 2 * iSrcX - i - 1
>11004	AdditiveExpression	2 * nSrcXSize - 2 * iSrcX - i - 1
>11005	AdditiveExpression	2 * iSrcX - i - 1
>11006	AdditiveExpression	i - 1
>11007	PrimaryExpression	1
>11008	Identifier	i
>11009	MultiplicativeExpression	2 * iSrcX
>11010	Identifier	iSrcX
>11011	PrimaryExpression	2
>11012	MultiplicativeExpression	2 * nSrcXSize
>11013	Identifier	nSrcXSize
>11014	PrimaryExpression	2
>11015	Identifier	iSampI
>11016	Condition	 
>11017	RelationalExpression	iSrcX + i >= nSrcXSize
>11018	Identifier	nSrcXSize
>11019	AdditiveExpression	iSrcX + i
>11020	Identifier	i
>11021	Identifier	iSrcX
>11022	ExpressionStatement	 
>11023	AssignmentExpr	iSampI = - iSrcX - i
>11024	AdditiveExpression	- iSrcX - i
>11025	Identifier	i
>11026	UnaryOp	- iSrcX
>11027	Identifier	iSrcX
>11028	UnaryOperator	-
>11029	Identifier	iSampI
>11030	Condition	 
>11031	RelationalExpression	iSrcX + i < 0
>11032	PrimaryExpression	0
>11033	AdditiveExpression	iSrcX + i
>11034	Identifier	i
>11035	Identifier	iSrcX
>11036	IdentifierDeclStatement	 
>11037	IdentifierDecl	dfWeight2
>11038	Identifier	dfWeight2
>11039	IdentifierDeclType	double
>11040	IdentifierDeclStatement	 
>11041	IdentifierDecl	iSampI
>11042	Identifier	iSampI
>11043	IdentifierDeclType	int
>11044	Expression	 
>11045	UnaryExpression	++ iC
>11046	Identifier	iC
>11047	IncDec	++
>11048	UnaryExpression	++ i
>11049	Identifier	i
>11050	IncDec	++
>11051	Condition	 
>11052	RelationalExpression	i <= nXRadius
>11053	Identifier	nXRadius
>11054	Identifier	i
>11055	ForInit	 
>11056	Expression	iC = 0 , i = 1 - nXRadius
>11057	AssignmentExpr	i = 1 - nXRadius
>11058	AdditiveExpression	1 - nXRadius
>11059	Identifier	nXRadius
>11060	PrimaryExpression	1
>11061	Identifier	i
>11062	AssignmentExpr	iC = 0
>11063	PrimaryExpression	0
>11064	Identifier	iC
>11065	IdentifierDeclStatement	 
>11066	IdentifierDecl	iC
>11067	Identifier	iC
>11068	IdentifierDeclType	int
>11069	IdentifierDecl	i
>11070	Identifier	i
>11071	IdentifierDeclType	int
>11072	IfStatement	if ( iSrcY + j < 0 )
>11073	ElseStatement	else
>11074	IfStatement	if ( iSrcY + j >= nSrcYSize )
>11075	ElseStatement	else
>11076	ExpressionStatement	 
>11077	AssignmentExpr	iSampJ = iSrcOffset + j * nSrcXSize
>11078	AdditiveExpression	iSrcOffset + j * nSrcXSize
>11079	MultiplicativeExpression	j * nSrcXSize
>11080	Identifier	nSrcXSize
>11081	Identifier	j
>11082	Identifier	iSrcOffset
>11083	Identifier	iSampJ
>11084	ExpressionStatement	 
>11085	AssignmentExpr	iSampJ = iSrcOffset + ( 2 * nSrcYSize - 2 * iSrcY - j - 1 ) * nSrcXSize
>11086	AdditiveExpression	iSrcOffset + ( 2 * nSrcYSize - 2 * iSrcY - j - 1 ) * nSrcXSize
>11087	MultiplicativeExpression	( 2 * nSrcYSize - 2 * iSrcY - j - 1 ) * nSrcXSize
>11088	Identifier	nSrcXSize
>11089	AdditiveExpression	2 * nSrcYSize - 2 * iSrcY - j - 1
>11090	AdditiveExpression	2 * iSrcY - j - 1
>11091	AdditiveExpression	j - 1
>11092	PrimaryExpression	1
>11093	Identifier	j
>11094	MultiplicativeExpression	2 * iSrcY
>11095	Identifier	iSrcY
>11096	PrimaryExpression	2
>11097	MultiplicativeExpression	2 * nSrcYSize
>11098	Identifier	nSrcYSize
>11099	PrimaryExpression	2
>11100	Identifier	iSrcOffset
>11101	Identifier	iSampJ
>11102	Condition	 
>11103	RelationalExpression	iSrcY + j >= nSrcYSize
>11104	Identifier	nSrcYSize
>11105	AdditiveExpression	iSrcY + j
>11106	Identifier	j
>11107	Identifier	iSrcY
>11108	ExpressionStatement	 
>11109	AssignmentExpr	iSampJ = iSrcOffset - ( iSrcY + j ) * nSrcXSize
>11110	AdditiveExpression	iSrcOffset - ( iSrcY + j ) * nSrcXSize
>11111	MultiplicativeExpression	( iSrcY + j ) * nSrcXSize
>11112	Identifier	nSrcXSize
>11113	AdditiveExpression	iSrcY + j
>11114	Identifier	j
>11115	Identifier	iSrcY
>11116	Identifier	iSrcOffset
>11117	Identifier	iSampJ
>11118	Condition	 
>11119	RelationalExpression	iSrcY + j < 0
>11120	PrimaryExpression	0
>11121	AdditiveExpression	iSrcY + j
>11122	Identifier	j
>11123	Identifier	iSrcY
>11124	IdentifierDeclStatement	 
>11125	IdentifierDecl	dfWeight1 = ( dfYScale < 1.0 ) ? GWKBSpline ( ( double ) j * dfYScale ) * dfYScale 
>11126	AssignmentExpr	dfWeight1 = ( dfYScale < 1.0 ) ? GWKBSpline ( ( double ) j * dfYScale ) * dfYScale 
>11127	ConditionalExpression	( dfYScale < 1.0 ) ? GWKBSpline ( ( double ) j * dfYScale ) * dfYScale 
>11128	CallExpression	GWKBSpline ( ( double ) j - dfDeltaY )
>11129	ArgumentList	( double ) j - dfDeltaY
>11130	Argument	( double ) j - dfDeltaY
>11131	AdditiveExpression	( double ) j - dfDeltaY
>11132	Identifier	dfDeltaY
>11133	CastExpression	( double ) j
>11134	Identifier	j
>11135	CastTarget	double
>11136	Callee	GWKBSpline
>11137	Identifier	GWKBSpline
>11138	MultiplicativeExpression	GWKBSpline ( ( double ) j * dfYScale ) * dfYScale
>11139	Identifier	dfYScale
>11140	CallExpression	GWKBSpline ( ( double ) j * dfYScale )
>11141	ArgumentList	( double ) j * dfYScale
>11142	Argument	( double ) j * dfYScale
>11143	MultiplicativeExpression	( double ) j * dfYScale
>11144	Identifier	dfYScale
>11145	CastExpression	( double ) j
>11146	Identifier	j
>11147	CastTarget	double
>11148	Callee	GWKBSpline
>11149	Identifier	GWKBSpline
>11150	Condition	dfYScale < 1.0
>11151	RelationalExpression	dfYScale < 1.0
>11152	PrimaryExpression	1.0
>11153	Identifier	dfYScale
>11154	Identifier	dfWeight1
>11155	Identifier	dfWeight1
>11156	IdentifierDeclType	double
>11157	IdentifierDeclStatement	 
>11158	IdentifierDecl	iSampJ
>11159	Identifier	iSampJ
>11160	IdentifierDeclType	int
>11161	Expression	 
>11162	UnaryExpression	++ jC
>11163	Identifier	jC
>11164	IncDec	++
>11165	UnaryExpression	++ j
>11166	Identifier	j
>11167	IncDec	++
>11168	Condition	 
>11169	RelationalExpression	j <= nYRadius
>11170	Identifier	nYRadius
>11171	Identifier	j
>11172	ForInit	 
>11173	Expression	jC = 0 , j = 1 - nYRadius
>11174	AssignmentExpr	j = 1 - nYRadius
>11175	AdditiveExpression	1 - nYRadius
>11176	Identifier	nYRadius
>11177	PrimaryExpression	1
>11178	Identifier	j
>11179	AssignmentExpr	jC = 0
>11180	PrimaryExpression	0
>11181	Identifier	jC
>11182	IdentifierDeclStatement	 
>11183	IdentifierDecl	jC
>11184	Identifier	jC
>11185	IdentifierDeclType	int
>11186	IdentifierDecl	j
>11187	Identifier	j
>11188	IdentifierDeclType	int
>11189	IfStatement	if ( iSrcX >= nSrcXSize || iSrcY >= nSrcYSize || nXRadius > nSrcXSize || nYRadius > nSrcYSize )
>11190	ReturnStatement	 
>11191	CallExpression	GWKBilinearResampleNoMasksByte ( poWK , iBand , dfSrcX , dfSrcY , pbValue )
>11192	ArgumentList	poWK
>11193	Argument	pbValue
>11194	Identifier	pbValue
>11195	Argument	dfSrcY
>11196	Identifier	dfSrcY
>11197	Argument	dfSrcX
>11198	Identifier	dfSrcX
>11199	Argument	iBand
>11200	Identifier	iBand
>11201	Argument	poWK
>11202	Identifier	poWK
>11203	Callee	GWKBilinearResampleNoMasksByte
>11204	Identifier	GWKBilinearResampleNoMasksByte
>11205	Condition	 
>11206	OrExpression	iSrcX >= nSrcXSize || iSrcY >= nSrcYSize || nXRadius > nSrcXSize || nYRadius > nSrcYSize
>11207	OrExpression	iSrcY >= nSrcYSize || nXRadius > nSrcXSize || nYRadius > nSrcYSize
>11208	OrExpression	nXRadius > nSrcXSize || nYRadius > nSrcYSize
>11209	RelationalExpression	nYRadius > nSrcYSize
>11210	Identifier	nSrcYSize
>11211	Identifier	nYRadius
>11212	RelationalExpression	nXRadius > nSrcXSize
>11213	Identifier	nSrcXSize
>11214	Identifier	nXRadius
>11215	RelationalExpression	iSrcY >= nSrcYSize
>11216	Identifier	nSrcYSize
>11217	Identifier	iSrcY
>11218	RelationalExpression	iSrcX >= nSrcXSize
>11219	Identifier	nSrcXSize
>11220	Identifier	iSrcX
>11221	IdentifierDeclStatement	 
>11222	IdentifierDecl	* pabySrcBand = poWK -> papabySrcImage [ iBand ]
>11223	AssignmentExpr	* pabySrcBand = poWK -> papabySrcImage [ iBand ]
>11224	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>11225	Identifier	iBand
>11226	PtrMemberAccess	poWK -> papabySrcImage
>11227	Identifier	papabySrcImage
>11228	Identifier	poWK
>11229	Identifier	pabySrcBand
>11230	Identifier	pabySrcBand
>11231	IdentifierDeclType	GByte *
>11232	IdentifierDeclStatement	 
>11233	IdentifierDecl	nYRadius = poWK -> nYRadius
>11234	AssignmentExpr	nYRadius = poWK -> nYRadius
>11235	PtrMemberAccess	poWK -> nYRadius
>11236	Identifier	nYRadius
>11237	Identifier	poWK
>11238	Identifier	nYRadius
>11239	Identifier	nYRadius
>11240	IdentifierDeclType	int
>11241	IdentifierDeclStatement	 
>11242	IdentifierDecl	nXRadius = poWK -> nXRadius
>11243	AssignmentExpr	nXRadius = poWK -> nXRadius
>11244	PtrMemberAccess	poWK -> nXRadius
>11245	Identifier	nXRadius
>11246	Identifier	poWK
>11247	Identifier	nXRadius
>11248	Identifier	nXRadius
>11249	IdentifierDeclType	int
>11250	IdentifierDeclStatement	 
>11251	IdentifierDecl	dfYScale = poWK -> dfYScale
>11252	AssignmentExpr	dfYScale = poWK -> dfYScale
>11253	PtrMemberAccess	poWK -> dfYScale
>11254	Identifier	dfYScale
>11255	Identifier	poWK
>11256	Identifier	dfYScale
>11257	Identifier	dfYScale
>11258	IdentifierDeclType	double
>11259	IdentifierDeclStatement	 
>11260	IdentifierDecl	dfXScale = poWK -> dfXScale
>11261	AssignmentExpr	dfXScale = poWK -> dfXScale
>11262	PtrMemberAccess	poWK -> dfXScale
>11263	Identifier	dfXScale
>11264	Identifier	poWK
>11265	Identifier	dfXScale
>11266	Identifier	dfXScale
>11267	IdentifierDeclType	double
>11268	IdentifierDeclStatement	 
>11269	IdentifierDecl	dfDeltaY = dfSrcY - 0.5 - iSrcY
>11270	AssignmentExpr	dfDeltaY = dfSrcY - 0.5 - iSrcY
>11271	AdditiveExpression	dfSrcY - 0.5 - iSrcY
>11272	AdditiveExpression	0.5 - iSrcY
>11273	Identifier	iSrcY
>11274	PrimaryExpression	0.5
>11275	Identifier	dfSrcY
>11276	Identifier	dfDeltaY
>11277	Identifier	dfDeltaY
>11278	IdentifierDeclType	double
>11279	IdentifierDeclStatement	 
>11280	IdentifierDecl	dfDeltaX = dfSrcX - 0.5 - iSrcX
>11281	AssignmentExpr	dfDeltaX = dfSrcX - 0.5 - iSrcX
>11282	AdditiveExpression	dfSrcX - 0.5 - iSrcX
>11283	AdditiveExpression	0.5 - iSrcX
>11284	Identifier	iSrcX
>11285	PrimaryExpression	0.5
>11286	Identifier	dfSrcX
>11287	Identifier	dfDeltaX
>11288	Identifier	dfDeltaX
>11289	IdentifierDeclType	double
>11290	IdentifierDeclStatement	 
>11291	IdentifierDecl	iSrcOffset = iSrcX + iSrcY * nSrcXSize
>11292	AssignmentExpr	iSrcOffset = iSrcX + iSrcY * nSrcXSize
>11293	AdditiveExpression	iSrcX + iSrcY * nSrcXSize
>11294	MultiplicativeExpression	iSrcY * nSrcXSize
>11295	Identifier	nSrcXSize
>11296	Identifier	iSrcY
>11297	Identifier	iSrcX
>11298	Identifier	iSrcOffset
>11299	Identifier	iSrcOffset
>11300	IdentifierDeclType	int
>11301	IdentifierDeclStatement	 
>11302	IdentifierDecl	iSrcY = ( int ) floor ( dfSrcY - 0.5 )
>11303	AssignmentExpr	iSrcY = ( int ) floor ( dfSrcY - 0.5 )
>11304	CastExpression	( int ) floor ( dfSrcY - 0.5 )
>11305	CallExpression	floor ( dfSrcY - 0.5 )
>11306	ArgumentList	dfSrcY - 0.5
>11307	Argument	dfSrcY - 0.5
>11308	AdditiveExpression	dfSrcY - 0.5
>11309	PrimaryExpression	0.5
>11310	Identifier	dfSrcY
>11311	Callee	floor
>11312	Identifier	floor
>11313	CastTarget	int
>11314	Identifier	iSrcY
>11315	Identifier	iSrcY
>11316	IdentifierDeclType	int
>11317	IdentifierDeclStatement	 
>11318	IdentifierDecl	iSrcX = ( int ) floor ( dfSrcX - 0.5 )
>11319	AssignmentExpr	iSrcX = ( int ) floor ( dfSrcX - 0.5 )
>11320	CastExpression	( int ) floor ( dfSrcX - 0.5 )
>11321	CallExpression	floor ( dfSrcX - 0.5 )
>11322	ArgumentList	dfSrcX - 0.5
>11323	Argument	dfSrcX - 0.5
>11324	AdditiveExpression	dfSrcX - 0.5
>11325	PrimaryExpression	0.5
>11326	Identifier	dfSrcX
>11327	Callee	floor
>11328	Identifier	floor
>11329	CastTarget	int
>11330	Identifier	iSrcX
>11331	Identifier	iSrcX
>11332	IdentifierDeclType	int
>11333	IdentifierDeclStatement	 
>11334	IdentifierDecl	dfAccumulator = 0.0
>11335	AssignmentExpr	dfAccumulator = 0.0
>11336	PrimaryExpression	0.0
>11337	Identifier	dfAccumulator
>11338	Identifier	dfAccumulator
>11339	IdentifierDeclType	double
>11340	IdentifierDeclStatement	 
>11341	IdentifierDecl	nSrcYSize = poWK -> nSrcYSize
>11342	AssignmentExpr	nSrcYSize = poWK -> nSrcYSize
>11343	PtrMemberAccess	poWK -> nSrcYSize
>11344	Identifier	nSrcYSize
>11345	Identifier	poWK
>11346	Identifier	nSrcYSize
>11347	Identifier	nSrcYSize
>11348	IdentifierDeclType	int
>11349	IdentifierDeclStatement	 
>11350	IdentifierDecl	nSrcXSize = poWK -> nSrcXSize
>11351	AssignmentExpr	nSrcXSize = poWK -> nSrcXSize
>11352	PtrMemberAccess	poWK -> nSrcXSize
>11353	Identifier	nSrcXSize
>11354	Identifier	poWK
>11355	Identifier	nSrcXSize
>11356	Identifier	nSrcXSize
>11357	IdentifierDeclType	int
>11409	FunctionDef	GWKCubicSplineResampleNoMasksShort (GDALWarpKernel * poWK , int iBand , double dfSrcX , double dfSrcY , GInt16 * \
>11410	ParameterList	GDALWarpKernel * poWK , int iBand , double dfSrcX , double dfSrcY , GInt16 * piValue , double * padfBSpline
>11411	Parameter	 
>11412	Identifier	padfBSpline
>11413	ParameterType	double *
>11414	Parameter	 
>11415	Identifier	piValue
>11416	ParameterType	GInt16 *
>11417	Parameter	 
>11418	Identifier	dfSrcY
>11419	ParameterType	double
>11420	Parameter	 
>11421	Identifier	dfSrcX
>11422	ParameterType	double
>11423	Parameter	 
>11424	Identifier	iBand
>11425	ParameterType	int
>11426	Parameter	 
>11427	Identifier	poWK
>11428	ParameterType	GDALWarpKernel *
>11429	ReturnType	static int
>11430	CompoundStatement	 
>11431	ReturnStatement	 
>11432	Identifier	TRUE
>11433	ExpressionStatement	 
>11434	AssignmentExpr	* piValue = ( GInt16 ) ( 0.5 + dfAccumulator )
>11435	CastExpression	( GInt16 ) ( 0.5 + dfAccumulator )
>11436	AdditiveExpression	0.5 + dfAccumulator
>11437	Identifier	dfAccumulator
>11438	PrimaryExpression	0.5
>11439	CastTarget	GInt16
>11440	UnaryOp	* piValue
>11441	Identifier	piValue
>11442	UnaryOperator	*
>11443	ForStatement	for ( jC = 0 , j = 1 - nYRadius ; j <= nYRadius ; ++ j , ++ jC )
>11444	CompoundStatement	 
>11445	ForStatement	for ( iC = 0 , i = 1 - nXRadius ; i <= nXRadius ; ++ i , ++ iC )
>11446	CompoundStatement	 
>11447	ExpressionStatement	 
>11448	AssignmentExpr	dfAccumulator += ( double ) pabySrcBand [ iSampI + iSampJ ] * dfWeight2
>11449	MultiplicativeExpression	( double ) pabySrcBand [ iSampI + iSampJ ] * dfWeight2
>11450	Identifier	dfWeight2
>11451	CastExpression	( double ) pabySrcBand [ iSampI + iSampJ ]
>11452	ArrayIndexing	pabySrcBand [ iSampI + iSampJ ]
>11453	AdditiveExpression	iSampI + iSampJ
>11454	Identifier	iSampJ
>11455	Identifier	iSampI
>11456	Identifier	pabySrcBand
>11457	CastTarget	double
>11458	Identifier	dfAccumulator
>11459	IfStatement	if ( jC == 0 )
>11460	ElseStatement	else
>11461	ExpressionStatement	 
>11462	AssignmentExpr	dfWeight2 = dfWeight1 * padfBSpline [ iC ]
>11463	MultiplicativeExpression	dfWeight1 * padfBSpline [ iC ]
>11464	ArrayIndexing	padfBSpline [ iC ]
>11465	Identifier	iC
>11466	Identifier	padfBSpline
>11467	Identifier	dfWeight1
>11468	Identifier	dfWeight2
>11469	CompoundStatement	 
>11470	ExpressionStatement	 
>11471	AssignmentExpr	dfWeight2 *= dfWeight1
>11472	Identifier	dfWeight1
>11473	Identifier	dfWeight2
>11474	ExpressionStatement	 
>11475	AssignmentExpr	dfWeight2 = padfBSpline [ iC ] = ( ( dfXScale < 1.0 ) ? GWKBSpline ( ( double ) i * dfXScale ) * dfXScale 
>11476	AssignmentExpr	padfBSpline [ iC ] = ( ( dfXScale < 1.0 ) ? GWKBSpline ( ( double ) i * dfXScale ) * dfXScale 
>11477	ConditionalExpression	( dfXScale < 1.0 ) ? GWKBSpline ( ( double ) i * dfXScale ) * dfXScale 
>11478	CallExpression	GWKBSpline ( dfDeltaX - ( double ) i )
>11479	ArgumentList	dfDeltaX - ( double ) i
>11480	Argument	dfDeltaX - ( double ) i
>11481	AdditiveExpression	dfDeltaX - ( double ) i
>11482	CastExpression	( double ) i
>11483	Identifier	i
>11484	CastTarget	double
>11485	Identifier	dfDeltaX
>11486	Callee	GWKBSpline
>11487	Identifier	GWKBSpline
>11488	MultiplicativeExpression	GWKBSpline ( ( double ) i * dfXScale ) * dfXScale
>11489	Identifier	dfXScale
>11490	CallExpression	GWKBSpline ( ( double ) i * dfXScale )
>11491	ArgumentList	( double ) i * dfXScale
>11492	Argument	( double ) i * dfXScale
>11493	MultiplicativeExpression	( double ) i * dfXScale
>11494	Identifier	dfXScale
>11495	CastExpression	( double ) i
>11496	Identifier	i
>11497	CastTarget	double
>11498	Callee	GWKBSpline
>11499	Identifier	GWKBSpline
>11500	Condition	dfXScale < 1.0
>11501	RelationalExpression	dfXScale < 1.0
>11502	PrimaryExpression	1.0
>11503	Identifier	dfXScale
>11504	ArrayIndexing	padfBSpline [ iC ]
>11505	Identifier	iC
>11506	Identifier	padfBSpline
>11507	Identifier	dfWeight2
>11508	Condition	 
>11509	EqualityExpression	jC == 0
>11510	PrimaryExpression	0
>11511	Identifier	jC
>11512	IfStatement	if ( iSrcX + i < 0 )
>11513	ElseStatement	else
>11514	IfStatement	if ( iSrcX + i >= nSrcXSize )
>11515	ElseStatement	else
>11516	ExpressionStatement	 
>11517	AssignmentExpr	iSampI = i
>11518	Identifier	i
>11519	Identifier	iSampI
>11520	ExpressionStatement	 
>11521	AssignmentExpr	iSampI = 2 * nSrcXSize - 2 * iSrcX - i - 1
>11522	AdditiveExpression	2 * nSrcXSize - 2 * iSrcX - i - 1
>11523	AdditiveExpression	2 * iSrcX - i - 1
>11524	AdditiveExpression	i - 1
>11525	PrimaryExpression	1
>11526	Identifier	i
>11527	MultiplicativeExpression	2 * iSrcX
>11528	Identifier	iSrcX
>11529	PrimaryExpression	2
>11530	MultiplicativeExpression	2 * nSrcXSize
>11531	Identifier	nSrcXSize
>11532	PrimaryExpression	2
>11533	Identifier	iSampI
>11534	Condition	 
>11535	RelationalExpression	iSrcX + i >= nSrcXSize
>11536	Identifier	nSrcXSize
>11537	AdditiveExpression	iSrcX + i
>11538	Identifier	i
>11539	Identifier	iSrcX
>11540	ExpressionStatement	 
>11541	AssignmentExpr	iSampI = - iSrcX - i
>11542	AdditiveExpression	- iSrcX - i
>11543	Identifier	i
>11544	UnaryOp	- iSrcX
>11545	Identifier	iSrcX
>11546	UnaryOperator	-
>11547	Identifier	iSampI
>11548	Condition	 
>11549	RelationalExpression	iSrcX + i < 0
>11550	PrimaryExpression	0
>11551	AdditiveExpression	iSrcX + i
>11552	Identifier	i
>11553	Identifier	iSrcX
>11554	IdentifierDeclStatement	 
>11555	IdentifierDecl	dfWeight2
>11556	Identifier	dfWeight2
>11557	IdentifierDeclType	double
>11558	IdentifierDeclStatement	 
>11559	IdentifierDecl	iSampI
>11560	Identifier	iSampI
>11561	IdentifierDeclType	int
>11562	Expression	 
>11563	UnaryExpression	++ iC
>11564	Identifier	iC
>11565	IncDec	++
>11566	UnaryExpression	++ i
>11567	Identifier	i
>11568	IncDec	++
>11569	Condition	 
>11570	RelationalExpression	i <= nXRadius
>11571	Identifier	nXRadius
>11572	Identifier	i
>11573	ForInit	 
>11574	Expression	iC = 0 , i = 1 - nXRadius
>11575	AssignmentExpr	i = 1 - nXRadius
>11576	AdditiveExpression	1 - nXRadius
>11577	Identifier	nXRadius
>11578	PrimaryExpression	1
>11579	Identifier	i
>11580	AssignmentExpr	iC = 0
>11581	PrimaryExpression	0
>11582	Identifier	iC
>11583	IdentifierDeclStatement	 
>11584	IdentifierDecl	iC
>11585	Identifier	iC
>11586	IdentifierDeclType	int
>11587	IdentifierDecl	i
>11588	Identifier	i
>11589	IdentifierDeclType	int
>11590	IfStatement	if ( iSrcY + j < 0 )
>11591	ElseStatement	else
>11592	IfStatement	if ( iSrcY + j >= nSrcYSize )
>11593	ElseStatement	else
>11594	ExpressionStatement	 
>11595	AssignmentExpr	iSampJ = iSrcOffset + j * nSrcXSize
>11596	AdditiveExpression	iSrcOffset + j * nSrcXSize
>11597	MultiplicativeExpression	j * nSrcXSize
>11598	Identifier	nSrcXSize
>11599	Identifier	j
>11600	Identifier	iSrcOffset
>11601	Identifier	iSampJ
>11602	ExpressionStatement	 
>11603	AssignmentExpr	iSampJ = iSrcOffset + ( 2 * nSrcYSize - 2 * iSrcY - j - 1 ) * nSrcXSize
>11604	AdditiveExpression	iSrcOffset + ( 2 * nSrcYSize - 2 * iSrcY - j - 1 ) * nSrcXSize
>11605	MultiplicativeExpression	( 2 * nSrcYSize - 2 * iSrcY - j - 1 ) * nSrcXSize
>11606	Identifier	nSrcXSize
>11607	AdditiveExpression	2 * nSrcYSize - 2 * iSrcY - j - 1
>11608	AdditiveExpression	2 * iSrcY - j - 1
>11609	AdditiveExpression	j - 1
>11610	PrimaryExpression	1
>11611	Identifier	j
>11612	MultiplicativeExpression	2 * iSrcY
>11613	Identifier	iSrcY
>11614	PrimaryExpression	2
>11615	MultiplicativeExpression	2 * nSrcYSize
>11616	Identifier	nSrcYSize
>11617	PrimaryExpression	2
>11618	Identifier	iSrcOffset
>11619	Identifier	iSampJ
>11620	Condition	 
>11621	RelationalExpression	iSrcY + j >= nSrcYSize
>11622	Identifier	nSrcYSize
>11623	AdditiveExpression	iSrcY + j
>11624	Identifier	j
>11625	Identifier	iSrcY
>11626	ExpressionStatement	 
>11627	AssignmentExpr	iSampJ = iSrcOffset - ( iSrcY + j ) * nSrcXSize
>11628	AdditiveExpression	iSrcOffset - ( iSrcY + j ) * nSrcXSize
>11629	MultiplicativeExpression	( iSrcY + j ) * nSrcXSize
>11630	Identifier	nSrcXSize
>11631	AdditiveExpression	iSrcY + j
>11632	Identifier	j
>11633	Identifier	iSrcY
>11634	Identifier	iSrcOffset
>11635	Identifier	iSampJ
>11636	Condition	 
>11637	RelationalExpression	iSrcY + j < 0
>11638	PrimaryExpression	0
>11639	AdditiveExpression	iSrcY + j
>11640	Identifier	j
>11641	Identifier	iSrcY
>11642	IdentifierDeclStatement	 
>11643	IdentifierDecl	dfWeight1 = ( dfYScale < 1.0 ) ? GWKBSpline ( ( double ) j * dfYScale ) * dfYScale 
>11644	AssignmentExpr	dfWeight1 = ( dfYScale < 1.0 ) ? GWKBSpline ( ( double ) j * dfYScale ) * dfYScale 
>11645	ConditionalExpression	( dfYScale < 1.0 ) ? GWKBSpline ( ( double ) j * dfYScale ) * dfYScale 
>11646	CallExpression	GWKBSpline ( ( double ) j - dfDeltaY )
>11647	ArgumentList	( double ) j - dfDeltaY
>11648	Argument	( double ) j - dfDeltaY
>11649	AdditiveExpression	( double ) j - dfDeltaY
>11650	Identifier	dfDeltaY
>11651	CastExpression	( double ) j
>11652	Identifier	j
>11653	CastTarget	double
>11654	Callee	GWKBSpline
>11655	Identifier	GWKBSpline
>11656	MultiplicativeExpression	GWKBSpline ( ( double ) j * dfYScale ) * dfYScale
>11657	Identifier	dfYScale
>11658	CallExpression	GWKBSpline ( ( double ) j * dfYScale )
>11659	ArgumentList	( double ) j * dfYScale
>11660	Argument	( double ) j * dfYScale
>11661	MultiplicativeExpression	( double ) j * dfYScale
>11662	Identifier	dfYScale
>11663	CastExpression	( double ) j
>11664	Identifier	j
>11665	CastTarget	double
>11666	Callee	GWKBSpline
>11667	Identifier	GWKBSpline
>11668	Condition	dfYScale < 1.0
>11669	RelationalExpression	dfYScale < 1.0
>11670	PrimaryExpression	1.0
>11671	Identifier	dfYScale
>11672	Identifier	dfWeight1
>11673	Identifier	dfWeight1
>11674	IdentifierDeclType	double
>11675	IdentifierDeclStatement	 
>11676	IdentifierDecl	iSampJ
>11677	Identifier	iSampJ
>11678	IdentifierDeclType	int
>11679	Expression	 
>11680	UnaryExpression	++ jC
>11681	Identifier	jC
>11682	IncDec	++
>11683	UnaryExpression	++ j
>11684	Identifier	j
>11685	IncDec	++
>11686	Condition	 
>11687	RelationalExpression	j <= nYRadius
>11688	Identifier	nYRadius
>11689	Identifier	j
>11690	ForInit	 
>11691	Expression	jC = 0 , j = 1 - nYRadius
>11692	AssignmentExpr	j = 1 - nYRadius
>11693	AdditiveExpression	1 - nYRadius
>11694	Identifier	nYRadius
>11695	PrimaryExpression	1
>11696	Identifier	j
>11697	AssignmentExpr	jC = 0
>11698	PrimaryExpression	0
>11699	Identifier	jC
>11700	IdentifierDeclStatement	 
>11701	IdentifierDecl	jC
>11702	Identifier	jC
>11703	IdentifierDeclType	int
>11704	IdentifierDecl	j
>11705	Identifier	j
>11706	IdentifierDeclType	int
>11707	IfStatement	if ( iSrcX >= nSrcXSize || iSrcY >= nSrcYSize || nXRadius > nSrcXSize || nYRadius > nSrcYSize )
>11708	ReturnStatement	 
>11709	CallExpression	GWKBilinearResampleNoMasksShort ( poWK , iBand , dfSrcX , dfSrcY , piValue )
>11710	ArgumentList	poWK
>11711	Argument	piValue
>11712	Identifier	piValue
>11713	Argument	dfSrcY
>11714	Identifier	dfSrcY
>11715	Argument	dfSrcX
>11716	Identifier	dfSrcX
>11717	Argument	iBand
>11718	Identifier	iBand
>11719	Argument	poWK
>11720	Identifier	poWK
>11721	Callee	GWKBilinearResampleNoMasksShort
>11722	Identifier	GWKBilinearResampleNoMasksShort
>11723	Condition	 
>11724	OrExpression	iSrcX >= nSrcXSize || iSrcY >= nSrcYSize || nXRadius > nSrcXSize || nYRadius > nSrcYSize
>11725	OrExpression	iSrcY >= nSrcYSize || nXRadius > nSrcXSize || nYRadius > nSrcYSize
>11726	OrExpression	nXRadius > nSrcXSize || nYRadius > nSrcYSize
>11727	RelationalExpression	nYRadius > nSrcYSize
>11728	Identifier	nSrcYSize
>11729	Identifier	nYRadius
>11730	RelationalExpression	nXRadius > nSrcXSize
>11731	Identifier	nSrcXSize
>11732	Identifier	nXRadius
>11733	RelationalExpression	iSrcY >= nSrcYSize
>11734	Identifier	nSrcYSize
>11735	Identifier	iSrcY
>11736	RelationalExpression	iSrcX >= nSrcXSize
>11737	Identifier	nSrcXSize
>11738	Identifier	iSrcX
>11739	IdentifierDeclStatement	 
>11740	IdentifierDecl	* pabySrcBand = ( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] )
>11741	AssignmentExpr	* pabySrcBand = ( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] )
>11742	CastExpression	( GInt16 * ) poWK -> papabySrcImage [ iBand ]
>11743	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>11744	Identifier	iBand
>11745	PtrMemberAccess	poWK -> papabySrcImage
>11746	Identifier	papabySrcImage
>11747	Identifier	poWK
>11748	CastTarget	GInt16 *
>11749	Identifier	pabySrcBand
>11750	Identifier	pabySrcBand
>11751	IdentifierDeclType	GInt16 *
>11752	IdentifierDeclStatement	 
>11753	IdentifierDecl	nYRadius = poWK -> nYRadius
>11754	AssignmentExpr	nYRadius = poWK -> nYRadius
>11755	PtrMemberAccess	poWK -> nYRadius
>11756	Identifier	nYRadius
>11757	Identifier	poWK
>11758	Identifier	nYRadius
>11759	Identifier	nYRadius
>11760	IdentifierDeclType	int
>11761	IdentifierDeclStatement	 
>11762	IdentifierDecl	nXRadius = poWK -> nXRadius
>11763	AssignmentExpr	nXRadius = poWK -> nXRadius
>11764	PtrMemberAccess	poWK -> nXRadius
>11765	Identifier	nXRadius
>11766	Identifier	poWK
>11767	Identifier	nXRadius
>11768	Identifier	nXRadius
>11769	IdentifierDeclType	int
>11770	IdentifierDeclStatement	 
>11771	IdentifierDecl	dfYScale = poWK -> dfYScale
>11772	AssignmentExpr	dfYScale = poWK -> dfYScale
>11773	PtrMemberAccess	poWK -> dfYScale
>11774	Identifier	dfYScale
>11775	Identifier	poWK
>11776	Identifier	dfYScale
>11777	Identifier	dfYScale
>11778	IdentifierDeclType	double
>11779	IdentifierDeclStatement	 
>11780	IdentifierDecl	dfXScale = poWK -> dfXScale
>11781	AssignmentExpr	dfXScale = poWK -> dfXScale
>11782	PtrMemberAccess	poWK -> dfXScale
>11783	Identifier	dfXScale
>11784	Identifier	poWK
>11785	Identifier	dfXScale
>11786	Identifier	dfXScale
>11787	IdentifierDeclType	double
>11788	IdentifierDeclStatement	 
>11789	IdentifierDecl	dfDeltaY = dfSrcY - 0.5 - iSrcY
>11790	AssignmentExpr	dfDeltaY = dfSrcY - 0.5 - iSrcY
>11791	AdditiveExpression	dfSrcY - 0.5 - iSrcY
>11792	AdditiveExpression	0.5 - iSrcY
>11793	Identifier	iSrcY
>11794	PrimaryExpression	0.5
>11795	Identifier	dfSrcY
>11796	Identifier	dfDeltaY
>11797	Identifier	dfDeltaY
>11798	IdentifierDeclType	double
>11799	IdentifierDeclStatement	 
>11800	IdentifierDecl	dfDeltaX = dfSrcX - 0.5 - iSrcX
>11801	AssignmentExpr	dfDeltaX = dfSrcX - 0.5 - iSrcX
>11802	AdditiveExpression	dfSrcX - 0.5 - iSrcX
>11803	AdditiveExpression	0.5 - iSrcX
>11804	Identifier	iSrcX
>11805	PrimaryExpression	0.5
>11806	Identifier	dfSrcX
>11807	Identifier	dfDeltaX
>11808	Identifier	dfDeltaX
>11809	IdentifierDeclType	double
>11810	IdentifierDeclStatement	 
>11811	IdentifierDecl	iSrcOffset = iSrcX + iSrcY * nSrcXSize
>11812	AssignmentExpr	iSrcOffset = iSrcX + iSrcY * nSrcXSize
>11813	AdditiveExpression	iSrcX + iSrcY * nSrcXSize
>11814	MultiplicativeExpression	iSrcY * nSrcXSize
>11815	Identifier	nSrcXSize
>11816	Identifier	iSrcY
>11817	Identifier	iSrcX
>11818	Identifier	iSrcOffset
>11819	Identifier	iSrcOffset
>11820	IdentifierDeclType	int
>11821	IdentifierDeclStatement	 
>11822	IdentifierDecl	iSrcY = ( int ) floor ( dfSrcY - 0.5 )
>11823	AssignmentExpr	iSrcY = ( int ) floor ( dfSrcY - 0.5 )
>11824	CastExpression	( int ) floor ( dfSrcY - 0.5 )
>11825	CallExpression	floor ( dfSrcY - 0.5 )
>11826	ArgumentList	dfSrcY - 0.5
>11827	Argument	dfSrcY - 0.5
>11828	AdditiveExpression	dfSrcY - 0.5
>11829	PrimaryExpression	0.5
>11830	Identifier	dfSrcY
>11831	Callee	floor
>11832	Identifier	floor
>11833	CastTarget	int
>11834	Identifier	iSrcY
>11835	Identifier	iSrcY
>11836	IdentifierDeclType	int
>11837	IdentifierDeclStatement	 
>11838	IdentifierDecl	iSrcX = ( int ) floor ( dfSrcX - 0.5 )
>11839	AssignmentExpr	iSrcX = ( int ) floor ( dfSrcX - 0.5 )
>11840	CastExpression	( int ) floor ( dfSrcX - 0.5 )
>11841	CallExpression	floor ( dfSrcX - 0.5 )
>11842	ArgumentList	dfSrcX - 0.5
>11843	Argument	dfSrcX - 0.5
>11844	AdditiveExpression	dfSrcX - 0.5
>11845	PrimaryExpression	0.5
>11846	Identifier	dfSrcX
>11847	Callee	floor
>11848	Identifier	floor
>11849	CastTarget	int
>11850	Identifier	iSrcX
>11851	Identifier	iSrcX
>11852	IdentifierDeclType	int
>11853	IdentifierDeclStatement	 
>11854	IdentifierDecl	dfAccumulator = 0.0
>11855	AssignmentExpr	dfAccumulator = 0.0
>11856	PrimaryExpression	0.0
>11857	Identifier	dfAccumulator
>11858	Identifier	dfAccumulator
>11859	IdentifierDeclType	double
>11860	IdentifierDeclStatement	 
>11861	IdentifierDecl	nSrcYSize = poWK -> nSrcYSize
>11862	AssignmentExpr	nSrcYSize = poWK -> nSrcYSize
>11863	PtrMemberAccess	poWK -> nSrcYSize
>11864	Identifier	nSrcYSize
>11865	Identifier	poWK
>11866	Identifier	nSrcYSize
>11867	Identifier	nSrcYSize
>11868	IdentifierDeclType	int
>11869	IdentifierDeclStatement	 
>11870	IdentifierDecl	nSrcXSize = poWK -> nSrcXSize
>11871	AssignmentExpr	nSrcXSize = poWK -> nSrcXSize
>11872	PtrMemberAccess	poWK -> nSrcXSize
>11873	Identifier	nSrcXSize
>11874	Identifier	poWK
>11875	Identifier	nSrcXSize
>11876	Identifier	nSrcXSize
>11877	IdentifierDeclType	int
>11929	FunctionDef	GWKOpenCLCase (GDALWarpKernel * poWK)
>11930	ParameterList	GDALWarpKernel * poWK
>11931	Parameter	 
>11932	Identifier	poWK
>11933	ParameterType	GDALWarpKernel *
>11934	ReturnType	static CPLErr
>11935	CompoundStatement	 
>11936	ReturnStatement	 
>11937	Identifier	eErr
>11938	IfStatement	if ( ( err = GDALWarpKernelOpenCL_deleteEnv ( warper ) ) != CL_SUCCESS )
>11939	CompoundStatement	 
>11940	ReturnStatement	 
>11941	Identifier	CE_Failure
>11942	ExpressionStatement	 
>11943	CallExpression	CPLError ( CE_Failure , CPLE_AppDefined , \"OpenCL routines reported failure (%d) on line %d.\" , ( int ) err , __\
>11944	ArgumentList	CE_Failure
>11945	Argument	__LINE__
>11946	Identifier	__LINE__
>11947	Argument	( int ) err
>11948	CastExpression	( int ) err
>11949	Identifier	err
>11950	CastTarget	int
>11951	Argument	\"OpenCL routines reported failure (%d) on line %d.\"
>11952	PrimaryExpression	\"OpenCL routines reported failure (%d) on line %d.\"
>11953	Argument	CPLE_AppDefined
>11954	Identifier	CPLE_AppDefined
>11955	Argument	CE_Failure
>11956	Identifier	CE_Failure
>11957	Callee	CPLError
>11958	Identifier	CPLError
>11959	Condition	 
>11960	EqualityExpression	( err = GDALWarpKernelOpenCL_deleteEnv ( warper ) ) != CL_SUCCESS
>11961	Identifier	CL_SUCCESS
>11962	AssignmentExpr	err = GDALWarpKernelOpenCL_deleteEnv ( warper )
>11963	CallExpression	GDALWarpKernelOpenCL_deleteEnv ( warper )
>11964	ArgumentList	warper
>11965	Argument	warper
>11966	Identifier	warper
>11967	Callee	GDALWarpKernelOpenCL_deleteEnv
>11968	Identifier	GDALWarpKernelOpenCL_deleteEnv
>11969	Identifier	err
>11970	Label	 
>11971	Identifier	free_warper
>11972	ForStatement	for ( iDstY = 0 ; iDstY < nDstYSize && eErr == CE_None ; iDstY ++ )
>11973	CompoundStatement	 
>11974	ForStatement	for ( iBand = 0 ; iBand < poWK -> nBands ; iBand ++ )
>11975	CompoundStatement	 
>11976	SwitchStatement	switch ( poWK -> eWorkingDataType )
>11977	CompoundStatement	 
>11978	GotoStatement	 
>11979	Identifier	free_warper
>11980	ExpressionStatement	 
>11981	AssignmentExpr	eErr = CE_Failure
>11982	Identifier	CE_Failure
>11983	Identifier	eErr
>11984	ExpressionStatement	 
>11985	CallExpression	CPLError ( CE_Failure , CPLE_AppDefined , \"Unsupported resampling OpenCL data type %d.\" , ( int ) poWK -> eWorkingDataType )
>11986	ArgumentList	CE_Failure
>11987	Argument	( int ) poWK -> eWorkingDataType
>11988	CastExpression	( int ) poWK -> eWorkingDataType
>11989	PtrMemberAccess	poWK -> eWorkingDataType
>11990	Identifier	eWorkingDataType
>11991	Identifier	poWK
>11992	CastTarget	int
>11993	Argument	\"Unsupported resampling OpenCL data type %d.\"
>11994	PrimaryExpression	\"Unsupported resampling OpenCL data type %d.\"
>11995	Argument	CPLE_AppDefined
>11996	Identifier	CPLE_AppDefined
>11997	Argument	CE_Failure
>11998	Identifier	CE_Failure
>11999	Callee	CPLError
>12000	Identifier	CPLError
>12001	Label	 
>12002	Identifier	default
>12003	BreakStatement	 
>12004	CompoundStatement	 
>12005	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>12006	CompoundStatement	 
>12007	ExpressionStatement	 
>12008	AssignmentExpr	pabyDstF32 [ iDstX * 2 + 1 ] = ( ( float * ) rowImag ) [ iDstX ]
>12009	ArrayIndexing	( ( float * ) rowImag ) [ iDstX ]
>12010	Identifier	iDstX
>12011	CastExpression	( float * ) rowImag
>12012	Identifier	rowImag
>12013	CastTarget	float *
>12014	ArrayIndexing	pabyDstF32 [ iDstX * 2 + 1 ]
>12015	AdditiveExpression	iDstX * 2 + 1
>12016	PrimaryExpression	1
>12017	MultiplicativeExpression	iDstX * 2
>12018	PrimaryExpression	2
>12019	Identifier	iDstX
>12020	Identifier	pabyDstF32
>12021	ExpressionStatement	 
>12022	AssignmentExpr	pabyDstF32 [ iDstX * 2 ] = ( ( float * ) rowReal ) [ iDstX ]
>12023	ArrayIndexing	( ( float * ) rowReal ) [ iDstX ]
>12024	Identifier	iDstX
>12025	CastExpression	( float * ) rowReal
>12026	Identifier	rowReal
>12027	CastTarget	float *
>12028	ArrayIndexing	pabyDstF32 [ iDstX * 2 ]
>12029	MultiplicativeExpression	iDstX * 2
>12030	PrimaryExpression	2
>12031	Identifier	iDstX
>12032	Identifier	pabyDstF32
>12033	IncDecOp	 
>12034	IncDec	++
>12035	Identifier	iDstX
>12036	Condition	 
>12037	RelationalExpression	iDstX < nDstXSize
>12038	Identifier	nDstXSize
>12039	Identifier	iDstX
>12040	ForInit	 
>12041	AssignmentExpr	iDstX = 0
>12042	PrimaryExpression	0
>12043	Identifier	iDstX
>12044	IdentifierDeclStatement	 
>12045	IdentifierDecl	* pabyDstF32 = & ( ( ( float * ) pabyDst ) [ iDstY * nDstXSize ] )
>12046	AssignmentExpr	* pabyDstF32 = & ( ( ( float * ) pabyDst ) [ iDstY * nDstXSize ] )
>12047	UnaryOp	& ( ( ( float * ) pabyDst ) [ iDstY * nDstXSize ] )
>12048	ArrayIndexing	( ( float * ) pabyDst ) [ iDstY * nDstXSize ]
>12049	MultiplicativeExpression	iDstY * nDstXSize
>12050	Identifier	nDstXSize
>12051	Identifier	iDstY
>12052	CastExpression	( float * ) pabyDst
>12053	Identifier	pabyDst
>12054	CastTarget	float *
>12055	UnaryOperator	&
>12056	Identifier	pabyDstF32
>12057	Identifier	pabyDstF32
>12058	IdentifierDeclType	float *
>12059	Label	 
>12060	Identifier	GDT_CFloat32
>12061	BreakStatement	 
>12062	CompoundStatement	 
>12063	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>12064	CompoundStatement	 
>12065	ExpressionStatement	 
>12066	AssignmentExpr	pabyDstI16 [ iDstX * 2 + 1 ] = ( ( GInt16 * ) rowImag ) [ iDstX ]
>12067	ArrayIndexing	( ( GInt16 * ) rowImag ) [ iDstX ]
>12068	Identifier	iDstX
>12069	CastExpression	( GInt16 * ) rowImag
>12070	Identifier	rowImag
>12071	CastTarget	GInt16 *
>12072	ArrayIndexing	pabyDstI16 [ iDstX * 2 + 1 ]
>12073	AdditiveExpression	iDstX * 2 + 1
>12074	PrimaryExpression	1
>12075	MultiplicativeExpression	iDstX * 2
>12076	PrimaryExpression	2
>12077	Identifier	iDstX
>12078	Identifier	pabyDstI16
>12079	ExpressionStatement	 
>12080	AssignmentExpr	pabyDstI16 [ iDstX * 2 ] = ( ( GInt16 * ) rowReal ) [ iDstX ]
>12081	ArrayIndexing	( ( GInt16 * ) rowReal ) [ iDstX ]
>12082	Identifier	iDstX
>12083	CastExpression	( GInt16 * ) rowReal
>12084	Identifier	rowReal
>12085	CastTarget	GInt16 *
>12086	ArrayIndexing	pabyDstI16 [ iDstX * 2 ]
>12087	MultiplicativeExpression	iDstX * 2
>12088	PrimaryExpression	2
>12089	Identifier	iDstX
>12090	Identifier	pabyDstI16
>12091	IncDecOp	 
>12092	IncDec	++
>12093	Identifier	iDstX
>12094	Condition	 
>12095	RelationalExpression	iDstX < nDstXSize
>12096	Identifier	nDstXSize
>12097	Identifier	iDstX
>12098	ForInit	 
>12099	AssignmentExpr	iDstX = 0
>12100	PrimaryExpression	0
>12101	Identifier	iDstX
>12102	IdentifierDeclStatement	 
>12103	IdentifierDecl	* pabyDstI16 = & ( ( ( GInt16 * ) pabyDst ) [ iDstY * nDstXSize ] )
>12104	AssignmentExpr	* pabyDstI16 = & ( ( ( GInt16 * ) pabyDst ) [ iDstY * nDstXSize ] )
>12105	UnaryOp	& ( ( ( GInt16 * ) pabyDst ) [ iDstY * nDstXSize ] )
>12106	ArrayIndexing	( ( GInt16 * ) pabyDst ) [ iDstY * nDstXSize ]
>12107	MultiplicativeExpression	iDstY * nDstXSize
>12108	Identifier	nDstXSize
>12109	Identifier	iDstY
>12110	CastExpression	( GInt16 * ) pabyDst
>12111	Identifier	pabyDst
>12112	CastTarget	GInt16 *
>12113	UnaryOperator	&
>12114	Identifier	pabyDstI16
>12115	Identifier	pabyDstI16
>12116	IdentifierDeclType	GInt16 *
>12117	Label	 
>12118	Identifier	GDT_CInt16
>12119	BreakStatement	 
>12120	ExpressionStatement	 
>12121	CallExpression	memcpy ( ( void * * ) & ( ( ( float * ) pabyDst ) [ iDstY * nDstXSize ] ) , rowReal , sizeof ( float ) * nDstXSize )
>12122	ArgumentList	( void * * ) & ( ( ( float * ) pabyDst ) [ iDstY * nDstXSize ] )
>12123	Argument	sizeof ( float ) * nDstXSize
>12124	MultiplicativeExpression	sizeof ( float ) * nDstXSize
>12125	Identifier	nDstXSize
>12126	SizeofExpr	sizeof ( float )
>12127	SizeofOperand	float
>12128	Sizeof	sizeof
>12129	Argument	rowReal
>12130	Identifier	rowReal
>12131	Argument	( void * * ) & ( ( ( float * ) pabyDst ) [ iDstY * nDstXSize ] )
>12132	CastExpression	( void * * ) & ( ( ( float * ) pabyDst ) [ iDstY * nDstXSize ] )
>12133	UnaryOp	& ( ( ( float * ) pabyDst ) [ iDstY * nDstXSize ] )
>12134	ArrayIndexing	( ( float * ) pabyDst ) [ iDstY * nDstXSize ]
>12135	MultiplicativeExpression	iDstY * nDstXSize
>12136	Identifier	nDstXSize
>12137	Identifier	iDstY
>12138	CastExpression	( float * ) pabyDst
>12139	Identifier	pabyDst
>12140	CastTarget	float *
>12141	UnaryOperator	&
>12142	CastTarget	void * *
>12143	Callee	memcpy
>12144	Identifier	memcpy
>12145	Label	 
>12146	Identifier	GDT_Float32
>12147	BreakStatement	 
>12148	ExpressionStatement	 
>12149	CallExpression	memcpy ( ( void * * ) & ( ( ( GUInt16 * ) pabyDst ) [ iDstY * nDstXSize ] ) , rowReal , sizeof ( GUInt16 ) * nDstXSize )
>12150	ArgumentList	( void * * ) & ( ( ( GUInt16 * ) pabyDst ) [ iDstY * nDstXSize ] )
>12151	Argument	sizeof ( GUInt16 ) * nDstXSize
>12152	MultiplicativeExpression	sizeof ( GUInt16 ) * nDstXSize
>12153	Identifier	nDstXSize
>12154	SizeofExpr	sizeof ( GUInt16 )
>12155	SizeofOperand	GUInt16
>12156	Sizeof	sizeof
>12157	Argument	rowReal
>12158	Identifier	rowReal
>12159	Argument	( void * * ) & ( ( ( GUInt16 * ) pabyDst ) [ iDstY * nDstXSize ] )
>12160	CastExpression	( void * * ) & ( ( ( GUInt16 * ) pabyDst ) [ iDstY * nDstXSize ] )
>12161	UnaryOp	& ( ( ( GUInt16 * ) pabyDst ) [ iDstY * nDstXSize ] )
>12162	ArrayIndexing	( ( GUInt16 * ) pabyDst ) [ iDstY * nDstXSize ]
>12163	MultiplicativeExpression	iDstY * nDstXSize
>12164	Identifier	nDstXSize
>12165	Identifier	iDstY
>12166	CastExpression	( GUInt16 * ) pabyDst
>12167	Identifier	pabyDst
>12168	CastTarget	GUInt16 *
>12169	UnaryOperator	&
>12170	CastTarget	void * *
>12171	Callee	memcpy
>12172	Identifier	memcpy
>12173	Label	 
>12174	Identifier	GDT_UInt16
>12175	BreakStatement	 
>12176	ExpressionStatement	 
>12177	CallExpression	memcpy ( ( void * * ) & ( ( ( GInt16 * ) pabyDst ) [ iDstY * nDstXSize ] ) , rowReal , sizeof ( GInt16 ) * nDstXSize )
>12178	ArgumentList	( void * * ) & ( ( ( GInt16 * ) pabyDst ) [ iDstY * nDstXSize ] )
>12179	Argument	sizeof ( GInt16 ) * nDstXSize
>12180	MultiplicativeExpression	sizeof ( GInt16 ) * nDstXSize
>12181	Identifier	nDstXSize
>12182	SizeofExpr	sizeof ( GInt16 )
>12183	SizeofOperand	GInt16
>12184	Sizeof	sizeof
>12185	Argument	rowReal
>12186	Identifier	rowReal
>12187	Argument	( void * * ) & ( ( ( GInt16 * ) pabyDst ) [ iDstY * nDstXSize ] )
>12188	CastExpression	( void * * ) & ( ( ( GInt16 * ) pabyDst ) [ iDstY * nDstXSize ] )
>12189	UnaryOp	& ( ( ( GInt16 * ) pabyDst ) [ iDstY * nDstXSize ] )
>12190	ArrayIndexing	( ( GInt16 * ) pabyDst ) [ iDstY * nDstXSize ]
>12191	MultiplicativeExpression	iDstY * nDstXSize
>12192	Identifier	nDstXSize
>12193	Identifier	iDstY
>12194	CastExpression	( GInt16 * ) pabyDst
>12195	Identifier	pabyDst
>12196	CastTarget	GInt16 *
>12197	UnaryOperator	&
>12198	CastTarget	void * *
>12199	Callee	memcpy
>12200	Identifier	memcpy
>12201	Label	 
>12202	Identifier	GDT_Int16
>12203	BreakStatement	 
>12204	ExpressionStatement	 
>12205	CallExpression	memcpy ( ( void * * ) & ( ( ( GByte * ) pabyDst ) [ iDstY * nDstXSize ] ) , rowReal , sizeof ( GByte ) * nDstXSize )
>12206	ArgumentList	( void * * ) & ( ( ( GByte * ) pabyDst ) [ iDstY * nDstXSize ] )
>12207	Argument	sizeof ( GByte ) * nDstXSize
>12208	MultiplicativeExpression	sizeof ( GByte ) * nDstXSize
>12209	Identifier	nDstXSize
>12210	SizeofExpr	sizeof ( GByte )
>12211	SizeofOperand	GByte
>12212	Sizeof	sizeof
>12213	Argument	rowReal
>12214	Identifier	rowReal
>12215	Argument	( void * * ) & ( ( ( GByte * ) pabyDst ) [ iDstY * nDstXSize ] )
>12216	CastExpression	( void * * ) & ( ( ( GByte * ) pabyDst ) [ iDstY * nDstXSize ] )
>12217	UnaryOp	& ( ( ( GByte * ) pabyDst ) [ iDstY * nDstXSize ] )
>12218	ArrayIndexing	( ( GByte * ) pabyDst ) [ iDstY * nDstXSize ]
>12219	MultiplicativeExpression	iDstY * nDstXSize
>12220	Identifier	nDstXSize
>12221	Identifier	iDstY
>12222	CastExpression	( GByte * ) pabyDst
>12223	Identifier	pabyDst
>12224	CastTarget	GByte *
>12225	UnaryOperator	&
>12226	CastTarget	void * *
>12227	Callee	memcpy
>12228	Identifier	memcpy
>12229	Label	 
>12230	Identifier	GDT_Byte
>12231	Condition	 
>12232	PtrMemberAccess	poWK -> eWorkingDataType
>12233	Identifier	eWorkingDataType
>12234	Identifier	poWK
>12235	IfStatement	if ( err != CL_SUCCESS )
>12236	CompoundStatement	 
>12237	GotoStatement	 
>12238	Identifier	free_warper
>12239	ExpressionStatement	 
>12240	AssignmentExpr	eErr = CE_Failure
>12241	Identifier	CE_Failure
>12242	Identifier	eErr
>12243	ExpressionStatement	 
>12244	CallExpression	CPLError ( CE_Failure , CPLE_AppDefined , \"OpenCL routines reported failure (%d) on line %d.\" , ( int ) err , __\
>12245	ArgumentList	CE_Failure
>12246	Argument	__LINE__
>12247	Identifier	__LINE__
>12248	Argument	( int ) err
>12249	CastExpression	( int ) err
>12250	Identifier	err
>12251	CastTarget	int
>12252	Argument	\"OpenCL routines reported failure (%d) on line %d.\"
>12253	PrimaryExpression	\"OpenCL routines reported failure (%d) on line %d.\"
>12254	Argument	CPLE_AppDefined
>12255	Identifier	CPLE_AppDefined
>12256	Argument	CE_Failure
>12257	Identifier	CE_Failure
>12258	Callee	CPLError
>12259	Identifier	CPLError
>12260	Condition	 
>12261	EqualityExpression	err != CL_SUCCESS
>12262	Identifier	CL_SUCCESS
>12263	Identifier	err
>12264	ExpressionStatement	 
>12265	AssignmentExpr	err = GDALWarpKernelOpenCL_getRow ( warper , & rowReal , & rowImag , iDstY , iBand )
>12266	CallExpression	GDALWarpKernelOpenCL_getRow ( warper , & rowReal , & rowImag , iDstY , iBand )
>12267	ArgumentList	warper
>12268	Argument	iBand
>12269	Identifier	iBand
>12270	Argument	iDstY
>12271	Identifier	iDstY
>12272	Argument	& rowImag
>12273	UnaryOp	& rowImag
>12274	Identifier	rowImag
>12275	UnaryOperator	&
>12276	Argument	& rowReal
>12277	UnaryOp	& rowReal
>12278	Identifier	rowReal
>12279	UnaryOperator	&
>12280	Argument	warper
>12281	Identifier	warper
>12282	Callee	GDALWarpKernelOpenCL_getRow
>12283	Identifier	GDALWarpKernelOpenCL_getRow
>12284	Identifier	err
>12285	IdentifierDeclStatement	 
>12286	IdentifierDecl	* pabyDst = poWK -> papabyDstImage [ iBand ]
>12287	AssignmentExpr	* pabyDst = poWK -> papabyDstImage [ iBand ]
>12288	ArrayIndexing	poWK -> papabyDstImage [ iBand ]
>12289	Identifier	iBand
>12290	PtrMemberAccess	poWK -> papabyDstImage
>12291	Identifier	papabyDstImage
>12292	Identifier	poWK
>12293	Identifier	pabyDst
>12294	Identifier	pabyDst
>12295	IdentifierDeclType	GByte *
>12296	IdentifierDeclStatement	 
>12297	IdentifierDecl	* rowImag
>12298	Identifier	rowImag
>12299	IdentifierDeclType	void *
>12300	IdentifierDecl	* rowReal
>12301	Identifier	rowReal
>12302	IdentifierDeclType	void *
>12303	IdentifierDeclStatement	 
>12304	IdentifierDecl	iDstX
>12305	Identifier	iDstX
>12306	IdentifierDeclType	int
>12307	IncDecOp	 
>12308	IncDec	++
>12309	Identifier	iBand
>12310	Condition	 
>12311	RelationalExpression	iBand < poWK -> nBands
>12312	PtrMemberAccess	poWK -> nBands
>12313	Identifier	nBands
>12314	Identifier	poWK
>12315	Identifier	iBand
>12316	ForInit	 
>12317	AssignmentExpr	iBand = 0
>12318	PrimaryExpression	0
>12319	Identifier	iBand
>12320	IncDecOp	 
>12321	IncDec	++
>12322	Identifier	iDstY
>12323	Condition	 
>12324	AndExpression	iDstY < nDstYSize && eErr == CE_None
>12325	EqualityExpression	eErr == CE_None
>12326	Identifier	CE_None
>12327	Identifier	eErr
>12328	RelationalExpression	iDstY < nDstYSize
>12329	Identifier	nDstYSize
>12330	Identifier	iDstY
>12331	ForInit	 
>12332	AssignmentExpr	iDstY = 0
>12333	PrimaryExpression	0
>12334	Identifier	iDstY
>12335	IfStatement	if ( err != CL_SUCCESS )
>12336	CompoundStatement	 
>12337	GotoStatement	 
>12338	Identifier	free_warper
>12339	ExpressionStatement	 
>12340	AssignmentExpr	eErr = CE_Failure
>12341	Identifier	CE_Failure
>12342	Identifier	eErr
>12343	ExpressionStatement	 
>12344	CallExpression	CPLError ( CE_Failure , CPLE_AppDefined , \"OpenCL routines reported failure (%d) on line %d.\" , ( int ) err , __\
>12345	ArgumentList	CE_Failure
>12346	Argument	__LINE__
>12347	Identifier	__LINE__
>12348	Argument	( int ) err
>12349	CastExpression	( int ) err
>12350	Identifier	err
>12351	CastTarget	int
>12352	Argument	\"OpenCL routines reported failure (%d) on line %d.\"
>12353	PrimaryExpression	\"OpenCL routines reported failure (%d) on line %d.\"
>12354	Argument	CPLE_AppDefined
>12355	Identifier	CPLE_AppDefined
>12356	Argument	CE_Failure
>12357	Identifier	CE_Failure
>12358	Callee	CPLError
>12359	Identifier	CPLError
>12360	Condition	 
>12361	EqualityExpression	err != CL_SUCCESS
>12362	Identifier	CL_SUCCESS
>12363	Identifier	err
>12364	ExpressionStatement	 
>12365	AssignmentExpr	err = GDALWarpKernelOpenCL_runResamp ( warper , poWK -> pafUnifiedSrcDensity , poWK -> panUnifiedSrcValid , \
>12366	CallExpression	GDALWarpKernelOpenCL_runResamp ( warper , poWK -> pafUnifiedSrcDensity , poWK -> panUnifiedSrcValid , poWK -> pafDstDensity , \
>12367	ArgumentList	warper
>12368	Argument	poWK -> nFiltInitY
>12369	PtrMemberAccess	poWK -> nFiltInitY
>12370	Identifier	nFiltInitY
>12371	Identifier	poWK
>12372	Argument	poWK -> nFiltInitX
>12373	PtrMemberAccess	poWK -> nFiltInitX
>12374	Identifier	nFiltInitX
>12375	Identifier	poWK
>12376	Argument	poWK -> nYRadius
>12377	PtrMemberAccess	poWK -> nYRadius
>12378	Identifier	nYRadius
>12379	Identifier	poWK
>12380	Argument	poWK -> nXRadius
>12381	PtrMemberAccess	poWK -> nXRadius
>12382	Identifier	nXRadius
>12383	Identifier	poWK
>12384	Argument	poWK -> dfYFilter
>12385	PtrMemberAccess	poWK -> dfYFilter
>12386	Identifier	dfYFilter
>12387	Identifier	poWK
>12388	Argument	poWK -> dfXFilter
>12389	PtrMemberAccess	poWK -> dfXFilter
>12390	Identifier	dfXFilter
>12391	Identifier	poWK
>12392	Argument	poWK -> dfYScale
>12393	PtrMemberAccess	poWK -> dfYScale
>12394	Identifier	dfYScale
>12395	Identifier	poWK
>12396	Argument	poWK -> dfXScale
>12397	PtrMemberAccess	poWK -> dfXScale
>12398	Identifier	dfXScale
>12399	Identifier	poWK
>12400	Argument	poWK -> panDstValid
>12401	PtrMemberAccess	poWK -> panDstValid
>12402	Identifier	panDstValid
>12403	Identifier	poWK
>12404	Argument	poWK -> pafDstDensity
>12405	PtrMemberAccess	poWK -> pafDstDensity
>12406	Identifier	pafDstDensity
>12407	Identifier	poWK
>12408	Argument	poWK -> panUnifiedSrcValid
>12409	PtrMemberAccess	poWK -> panUnifiedSrcValid
>12410	Identifier	panUnifiedSrcValid
>12411	Identifier	poWK
>12412	Argument	poWK -> pafUnifiedSrcDensity
>12413	PtrMemberAccess	poWK -> pafUnifiedSrcDensity
>12414	Identifier	pafUnifiedSrcDensity
>12415	Identifier	poWK
>12416	Argument	warper
>12417	Identifier	warper
>12418	Callee	GDALWarpKernelOpenCL_runResamp
>12419	Identifier	GDALWarpKernelOpenCL_runResamp
>12420	Identifier	err
>12421	ExpressionStatement	 
>12422	CallExpression	CPLFree ( pabSuccess )
>12423	ArgumentList	pabSuccess
>12424	Argument	pabSuccess
>12425	Identifier	pabSuccess
>12426	Callee	CPLFree
>12427	Identifier	CPLFree
>12428	ExpressionStatement	 
>12429	CallExpression	CPLFree ( padfZ )
>12430	ArgumentList	padfZ
>12431	Argument	padfZ
>12432	Identifier	padfZ
>12433	Callee	CPLFree
>12434	Identifier	CPLFree
>12435	ExpressionStatement	 
>12436	CallExpression	CPLFree ( padfY )
>12437	ArgumentList	padfY
>12438	Argument	padfY
>12439	Identifier	padfY
>12440	Callee	CPLFree
>12441	Identifier	CPLFree
>12442	ExpressionStatement	 
>12443	CallExpression	CPLFree ( padfX )
>12444	ArgumentList	padfX
>12445	Argument	padfX
>12446	Identifier	padfX
>12447	Callee	CPLFree
>12448	Identifier	CPLFree
>12449	ForStatement	for ( iDstY = 0 ; iDstY < nDstYSize && eErr == CE_None ; ++ iDstY )
>12450	CompoundStatement	 
>12451	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize && eErr == CE_None ; iDstX ++ )
>12452	CompoundStatement	 
>12453	IfStatement	if ( poWK -> panDstValid != NULL )
>12454	ExpressionStatement	 
>12455	AssignmentExpr	poWK -> panDstValid [ iDstOffset >> 5 ] |= 0x01 << ( iDstOffset & 0x1f )
>12456	ShiftExpression	0x01 << ( iDstOffset & 0x1f )
>12457	BitAndExpression	iDstOffset & 0x1f
>12458	PrimaryExpression	0x1f
>12459	Identifier	iDstOffset
>12460	PrimaryExpression	0x01
>12461	ArrayIndexing	poWK -> panDstValid [ iDstOffset >> 5 ]
>12462	ShiftExpression	iDstOffset >> 5
>12463	PrimaryExpression	5
>12464	Identifier	iDstOffset
>12465	PtrMemberAccess	poWK -> panDstValid
>12466	Identifier	panDstValid
>12467	Identifier	poWK
>12468	Condition	 
>12469	EqualityExpression	poWK -> panDstValid != NULL
>12470	Identifier	NULL
>12471	PtrMemberAccess	poWK -> panDstValid
>12472	Identifier	panDstValid
>12473	Identifier	poWK
>12474	ExpressionStatement	 
>12475	CallExpression	GWKOverlayDensity ( poWK , iDstOffset , dfDensity )
>12476	ArgumentList	poWK
>12477	Argument	dfDensity
>12478	Identifier	dfDensity
>12479	Argument	iDstOffset
>12480	Identifier	iDstOffset
>12481	Argument	poWK
>12482	Identifier	poWK
>12483	Callee	GWKOverlayDensity
>12484	Identifier	GWKOverlayDensity
>12485	IfStatement	if ( poWK -> pafUnifiedSrcDensity != NULL && iSrcX >= 0 && iSrcY >= 0 && iSrcX < nSrcXSize && iSrcY < nSrcYSize )
>12486	ExpressionStatement	 
>12487	AssignmentExpr	dfDensity = poWK -> pafUnifiedSrcDensity [ iSrcOffset ]
>12488	ArrayIndexing	poWK -> pafUnifiedSrcDensity [ iSrcOffset ]
>12489	Identifier	iSrcOffset
>12490	PtrMemberAccess	poWK -> pafUnifiedSrcDensity
>12491	Identifier	pafUnifiedSrcDensity
>12492	Identifier	poWK
>12493	Identifier	dfDensity
>12494	Condition	 
>12495	AndExpression	poWK -> pafUnifiedSrcDensity != NULL && iSrcX >= 0 && iSrcY >= 0 && iSrcX < nSrcXSize && iSrcY < nSrcYSize
>12496	AndExpression	iSrcX >= 0 && iSrcY >= 0 && iSrcX < nSrcXSize && iSrcY < nSrcYSize
>12497	AndExpression	iSrcY >= 0 && iSrcX < nSrcXSize && iSrcY < nSrcYSize
>12498	AndExpression	iSrcX < nSrcXSize && iSrcY < nSrcYSize
>12499	RelationalExpression	iSrcY < nSrcYSize
>12500	Identifier	nSrcYSize
>12501	Identifier	iSrcY
>12502	RelationalExpression	iSrcX < nSrcXSize
>12503	Identifier	nSrcXSize
>12504	Identifier	iSrcX
>12505	RelationalExpression	iSrcY >= 0
>12506	PrimaryExpression	0
>12507	Identifier	iSrcY
>12508	RelationalExpression	iSrcX >= 0
>12509	PrimaryExpression	0
>12510	Identifier	iSrcX
>12511	EqualityExpression	poWK -> pafUnifiedSrcDensity != NULL
>12512	Identifier	NULL
>12513	PtrMemberAccess	poWK -> pafUnifiedSrcDensity
>12514	Identifier	pafUnifiedSrcDensity
>12515	Identifier	poWK
>12516	IdentifierDeclStatement	 
>12517	IdentifierDecl	dfDensity = 1.0
>12518	AssignmentExpr	dfDensity = 1.0
>12519	PrimaryExpression	1.0
>12520	Identifier	dfDensity
>12521	Identifier	dfDensity
>12522	IdentifierDeclType	double
>12523	IdentifierDeclStatement	 
>12524	IdentifierDecl	iSrcOffset = iSrcX + iSrcY * nSrcXSize
>12525	AssignmentExpr	iSrcOffset = iSrcX + iSrcY * nSrcXSize
>12526	AdditiveExpression	iSrcX + iSrcY * nSrcXSize
>12527	MultiplicativeExpression	iSrcY * nSrcXSize
>12528	Identifier	nSrcXSize
>12529	Identifier	iSrcY
>12530	Identifier	iSrcX
>12531	Identifier	iSrcOffset
>12532	Identifier	iSrcOffset
>12533	IdentifierDeclType	int
>12534	IfStatement	if ( iSrcX < 0 || iSrcX >= nSrcXSize || iSrcY < 0 || iSrcY >= nSrcYSize )
>12535	ContinueStatement	 
>12536	Condition	 
>12537	OrExpression	iSrcX < 0 || iSrcX >= nSrcXSize || iSrcY < 0 || iSrcY >= nSrcYSize
>12538	OrExpression	iSrcX >= nSrcXSize || iSrcY < 0 || iSrcY >= nSrcYSize
>12539	OrExpression	iSrcY < 0 || iSrcY >= nSrcYSize
>12540	RelationalExpression	iSrcY >= nSrcYSize
>12541	Identifier	nSrcYSize
>12542	Identifier	iSrcY
>12543	RelationalExpression	iSrcY < 0
>12544	PrimaryExpression	0
>12545	Identifier	iSrcY
>12546	RelationalExpression	iSrcX >= nSrcXSize
>12547	Identifier	nSrcXSize
>12548	Identifier	iSrcX
>12549	RelationalExpression	iSrcX < 0
>12550	PrimaryExpression	0
>12551	Identifier	iSrcX
>12552	IdentifierDeclStatement	 
>12553	IdentifierDecl	iSrcY = ( ( int ) dfY ) - nSrcYOff
>12554	AssignmentExpr	iSrcY = ( ( int ) dfY ) - nSrcYOff
>12555	AdditiveExpression	( ( int ) dfY ) - nSrcYOff
>12556	Identifier	nSrcYOff
>12557	CastExpression	( int ) dfY
>12558	Identifier	dfY
>12559	CastTarget	int
>12560	Identifier	iSrcY
>12561	Identifier	iSrcY
>12562	IdentifierDeclType	int
>12563	IdentifierDeclStatement	 
>12564	IdentifierDecl	iSrcX = ( ( int ) dfX ) - nSrcXOff
>12565	AssignmentExpr	iSrcX = ( ( int ) dfX ) - nSrcXOff
>12566	AdditiveExpression	( ( int ) dfX ) - nSrcXOff
>12567	Identifier	nSrcXOff
>12568	CastExpression	( int ) dfX
>12569	Identifier	dfX
>12570	CastTarget	int
>12571	Identifier	iSrcX
>12572	Identifier	iSrcX
>12573	IdentifierDeclType	int
>12574	IfStatement	if ( ! pabSuccess [ iDstX ] || dfX < nSrcXOff || dfY < nSrcYOff )
>12575	ContinueStatement	 
>12576	Condition	 
>12577	OrExpression	! pabSuccess [ iDstX ] || dfX < nSrcXOff || dfY < nSrcYOff
>12578	OrExpression	dfX < nSrcXOff || dfY < nSrcYOff
>12579	RelationalExpression	dfY < nSrcYOff
>12580	Identifier	nSrcYOff
>12581	Identifier	dfY
>12582	RelationalExpression	dfX < nSrcXOff
>12583	Identifier	nSrcXOff
>12584	Identifier	dfX
>12585	UnaryOp	! pabSuccess [ iDstX ]
>12586	ArrayIndexing	pabSuccess [ iDstX ]
>12587	Identifier	iDstX
>12588	Identifier	pabSuccess
>12589	UnaryOperator	!
>12590	IdentifierDeclStatement	 
>12591	IdentifierDecl	iDstOffset = iDstX + iDstY * nDstXSize
>12592	AssignmentExpr	iDstOffset = iDstX + iDstY * nDstXSize
>12593	AdditiveExpression	iDstX + iDstY * nDstXSize
>12594	MultiplicativeExpression	iDstY * nDstXSize
>12595	Identifier	nDstXSize
>12596	Identifier	iDstY
>12597	Identifier	iDstX
>12598	Identifier	iDstOffset
>12599	Identifier	iDstOffset
>12600	IdentifierDeclType	int
>12601	IdentifierDeclStatement	 
>12602	IdentifierDecl	dfY = padfY [ iDstX ]
>12603	AssignmentExpr	dfY = padfY [ iDstX ]
>12604	ArrayIndexing	padfY [ iDstX ]
>12605	Identifier	iDstX
>12606	Identifier	padfY
>12607	Identifier	dfY
>12608	Identifier	dfY
>12609	IdentifierDeclType	double
>12610	IdentifierDeclStatement	 
>12611	IdentifierDecl	dfX = padfX [ iDstX ]
>12612	AssignmentExpr	dfX = padfX [ iDstX ]
>12613	ArrayIndexing	padfX [ iDstX ]
>12614	Identifier	iDstX
>12615	Identifier	padfX
>12616	Identifier	dfX
>12617	Identifier	dfX
>12618	IdentifierDeclType	double
>12619	IncDecOp	 
>12620	IncDec	++
>12621	Identifier	iDstX
>12622	Condition	 
>12623	AndExpression	iDstX < nDstXSize && eErr == CE_None
>12624	EqualityExpression	eErr == CE_None
>12625	Identifier	CE_None
>12626	Identifier	eErr
>12627	RelationalExpression	iDstX < nDstXSize
>12628	Identifier	nDstXSize
>12629	Identifier	iDstX
>12630	ForInit	 
>12631	AssignmentExpr	iDstX = 0
>12632	PrimaryExpression	0
>12633	Identifier	iDstX
>12634	IfStatement	if ( err != CL_SUCCESS )
>12635	CompoundStatement	 
>12636	ReturnStatement	 
>12637	Identifier	CE_Failure
>12638	ExpressionStatement	 
>12639	CallExpression	CPLError ( CE_Failure , CPLE_AppDefined , \"OpenCL routines reported failure (%d) on line %d.\" , ( int ) err , __\
>12640	ArgumentList	CE_Failure
>12641	Argument	__LINE__
>12642	Identifier	__LINE__
>12643	Argument	( int ) err
>12644	CastExpression	( int ) err
>12645	Identifier	err
>12646	CastTarget	int
>12647	Argument	\"OpenCL routines reported failure (%d) on line %d.\"
>12648	PrimaryExpression	\"OpenCL routines reported failure (%d) on line %d.\"
>12649	Argument	CPLE_AppDefined
>12650	Identifier	CPLE_AppDefined
>12651	Argument	CE_Failure
>12652	Identifier	CE_Failure
>12653	Callee	CPLError
>12654	Identifier	CPLError
>12655	Condition	 
>12656	EqualityExpression	err != CL_SUCCESS
>12657	Identifier	CL_SUCCESS
>12658	Identifier	err
>12659	ExpressionStatement	 
>12660	AssignmentExpr	err = GDALWarpKernelOpenCL_setCoordRow ( warper , padfX , padfY , nSrcXOff , nSrcYOff , pabSuccess , \
>12661	CallExpression	GDALWarpKernelOpenCL_setCoordRow ( warper , padfX , padfY , nSrcXOff , nSrcYOff , pabSuccess , iDstY )
>12662	ArgumentList	warper
>12663	Argument	iDstY
>12664	Identifier	iDstY
>12665	Argument	pabSuccess
>12666	Identifier	pabSuccess
>12667	Argument	nSrcYOff
>12668	Identifier	nSrcYOff
>12669	Argument	nSrcXOff
>12670	Identifier	nSrcXOff
>12671	Argument	padfY
>12672	Identifier	padfY
>12673	Argument	padfX
>12674	Identifier	padfX
>12675	Argument	warper
>12676	Identifier	warper
>12677	Callee	GDALWarpKernelOpenCL_setCoordRow
>12678	Identifier	GDALWarpKernelOpenCL_setCoordRow
>12679	Identifier	err
>12680	ExpressionStatement	 
>12681	CallExpression	poWK -> pfnTransformer ( poWK -> pTransformerArg , TRUE , nDstXSize , padfX , padfY , padfZ , pabSuccess )
>12682	ArgumentList	poWK -> pTransformerArg
>12683	Argument	pabSuccess
>12684	Identifier	pabSuccess
>12685	Argument	padfZ
>12686	Identifier	padfZ
>12687	Argument	padfY
>12688	Identifier	padfY
>12689	Argument	padfX
>12690	Identifier	padfX
>12691	Argument	nDstXSize
>12692	Identifier	nDstXSize
>12693	Argument	TRUE
>12694	Identifier	TRUE
>12695	Argument	poWK -> pTransformerArg
>12696	PtrMemberAccess	poWK -> pTransformerArg
>12697	Identifier	pTransformerArg
>12698	Identifier	poWK
>12699	Callee	poWK -> pfnTransformer
>12700	PtrMemberAccess	poWK -> pfnTransformer
>12701	Identifier	pfnTransformer
>12702	Identifier	poWK
>12703	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; ++ iDstX )
>12704	CompoundStatement	 
>12705	ExpressionStatement	 
>12706	AssignmentExpr	padfZ [ iDstX ] = 0.0
>12707	PrimaryExpression	0.0
>12708	ArrayIndexing	padfZ [ iDstX ]
>12709	Identifier	iDstX
>12710	Identifier	padfZ
>12711	ExpressionStatement	 
>12712	AssignmentExpr	padfY [ iDstX ] = iDstY + 0.5 + nDstYOff
>12713	AdditiveExpression	iDstY + 0.5 + nDstYOff
>12714	AdditiveExpression	0.5 + nDstYOff
>12715	Identifier	nDstYOff
>12716	PrimaryExpression	0.5
>12717	Identifier	iDstY
>12718	ArrayIndexing	padfY [ iDstX ]
>12719	Identifier	iDstX
>12720	Identifier	padfY
>12721	ExpressionStatement	 
>12722	AssignmentExpr	padfX [ iDstX ] = iDstX + 0.5 + nDstXOff
>12723	AdditiveExpression	iDstX + 0.5 + nDstXOff
>12724	AdditiveExpression	0.5 + nDstXOff
>12725	Identifier	nDstXOff
>12726	PrimaryExpression	0.5
>12727	Identifier	iDstX
>12728	ArrayIndexing	padfX [ iDstX ]
>12729	Identifier	iDstX
>12730	Identifier	padfX
>12731	UnaryExpression	 
>12732	Identifier	iDstX
>12733	IncDec	++
>12734	Condition	 
>12735	RelationalExpression	iDstX < nDstXSize
>12736	Identifier	nDstXSize
>12737	Identifier	iDstX
>12738	ForInit	 
>12739	AssignmentExpr	iDstX = 0
>12740	PrimaryExpression	0
>12741	Identifier	iDstX
>12742	IdentifierDeclStatement	 
>12743	IdentifierDecl	iDstX
>12744	Identifier	iDstX
>12745	IdentifierDeclType	int
>12746	UnaryExpression	 
>12747	Identifier	iDstY
>12748	IncDec	++
>12749	Condition	 
>12750	AndExpression	iDstY < nDstYSize && eErr == CE_None
>12751	EqualityExpression	eErr == CE_None
>12752	Identifier	CE_None
>12753	Identifier	eErr
>12754	RelationalExpression	iDstY < nDstYSize
>12755	Identifier	nDstYSize
>12756	Identifier	iDstY
>12757	ForInit	 
>12758	AssignmentExpr	iDstY = 0
>12759	PrimaryExpression	0
>12760	Identifier	iDstY
>12761	ExpressionStatement	 
>12762	AssignmentExpr	pabSuccess = ( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>12763	CastExpression	( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>12764	CallExpression	CPLMalloc ( sizeof ( int ) * nDstXSize )
>12765	ArgumentList	sizeof ( int ) * nDstXSize
>12766	Argument	sizeof ( int ) * nDstXSize
>12767	MultiplicativeExpression	sizeof ( int ) * nDstXSize
>12768	Identifier	nDstXSize
>12769	SizeofExpr	sizeof ( int )
>12770	SizeofOperand	int
>12771	Sizeof	sizeof
>12772	Callee	CPLMalloc
>12773	Identifier	CPLMalloc
>12774	CastTarget	int *
>12775	Identifier	pabSuccess
>12776	ExpressionStatement	 
>12777	AssignmentExpr	padfZ = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>12778	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>12779	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>12780	ArgumentList	sizeof ( double ) * nDstXSize
>12781	Argument	sizeof ( double ) * nDstXSize
>12782	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>12783	Identifier	nDstXSize
>12784	SizeofExpr	sizeof ( double )
>12785	SizeofOperand	double
>12786	Sizeof	sizeof
>12787	Callee	CPLMalloc
>12788	Identifier	CPLMalloc
>12789	CastTarget	double *
>12790	Identifier	padfZ
>12791	ExpressionStatement	 
>12792	AssignmentExpr	padfY = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>12793	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>12794	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>12795	ArgumentList	sizeof ( double ) * nDstXSize
>12796	Argument	sizeof ( double ) * nDstXSize
>12797	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>12798	Identifier	nDstXSize
>12799	SizeofExpr	sizeof ( double )
>12800	SizeofOperand	double
>12801	Sizeof	sizeof
>12802	Callee	CPLMalloc
>12803	Identifier	CPLMalloc
>12804	CastTarget	double *
>12805	Identifier	padfY
>12806	ExpressionStatement	 
>12807	AssignmentExpr	padfX = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>12808	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>12809	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>12810	ArgumentList	sizeof ( double ) * nDstXSize
>12811	Argument	sizeof ( double ) * nDstXSize
>12812	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>12813	Identifier	nDstXSize
>12814	SizeofExpr	sizeof ( double )
>12815	SizeofOperand	double
>12816	Sizeof	sizeof
>12817	Callee	CPLMalloc
>12818	Identifier	CPLMalloc
>12819	CastTarget	double *
>12820	Identifier	padfX
>12821	IdentifierDeclStatement	 
>12822	IdentifierDecl	* pabSuccess
>12823	Identifier	pabSuccess
>12824	IdentifierDeclType	int *
>12825	IdentifierDeclStatement	 
>12826	IdentifierDecl	* padfZ
>12827	Identifier	padfZ
>12828	IdentifierDeclType	double *
>12829	IdentifierDecl	* padfY
>12830	Identifier	padfY
>12831	IdentifierDeclType	double *
>12832	IdentifierDecl	* padfX
>12833	Identifier	padfX
>12834	IdentifierDeclType	double *
>12835	ForStatement	for ( iBand = 0 ; iBand < poWK -> nBands ; iBand ++ )
>12836	CompoundStatement	 
>12837	IfStatement	if ( err != CL_SUCCESS )
>12838	CompoundStatement	 
>12839	GotoStatement	 
>12840	Identifier	free_warper
>12841	ExpressionStatement	 
>12842	AssignmentExpr	eErr = CE_Failure
>12843	Identifier	CE_Failure
>12844	Identifier	eErr
>12845	ExpressionStatement	 
>12846	CallExpression	CPLError ( CE_Failure , CPLE_AppDefined , \"OpenCL routines reported failure (%d) on line %d.\" , ( int ) err , __\
>12847	ArgumentList	CE_Failure
>12848	Argument	__LINE__
>12849	Identifier	__LINE__
>12850	Argument	( int ) err
>12851	CastExpression	( int ) err
>12852	Identifier	err
>12853	CastTarget	int
>12854	Argument	\"OpenCL routines reported failure (%d) on line %d.\"
>12855	PrimaryExpression	\"OpenCL routines reported failure (%d) on line %d.\"
>12856	Argument	CPLE_AppDefined
>12857	Identifier	CPLE_AppDefined
>12858	Argument	CE_Failure
>12859	Identifier	CE_Failure
>12860	Callee	CPLError
>12861	Identifier	CPLError
>12862	Condition	 
>12863	EqualityExpression	err != CL_SUCCESS
>12864	Identifier	CL_SUCCESS
>12865	Identifier	err
>12866	ExpressionStatement	 
>12867	AssignmentExpr	err = GDALWarpKernelOpenCL_setDstImg ( warper , poWK -> papabyDstImage [ iBand ] , iBand )
>12868	CallExpression	GDALWarpKernelOpenCL_setDstImg ( warper , poWK -> papabyDstImage [ iBand ] , iBand )
>12869	ArgumentList	warper
>12870	Argument	iBand
>12871	Identifier	iBand
>12872	Argument	poWK -> papabyDstImage [ iBand ]
>12873	ArrayIndexing	poWK -> papabyDstImage [ iBand ]
>12874	Identifier	iBand
>12875	PtrMemberAccess	poWK -> papabyDstImage
>12876	Identifier	papabyDstImage
>12877	Identifier	poWK
>12878	Argument	warper
>12879	Identifier	warper
>12880	Callee	GDALWarpKernelOpenCL_setDstImg
>12881	Identifier	GDALWarpKernelOpenCL_setDstImg
>12882	Identifier	err
>12883	IfStatement	if ( err != CL_SUCCESS )
>12884	CompoundStatement	 
>12885	GotoStatement	 
>12886	Identifier	free_warper
>12887	ExpressionStatement	 
>12888	AssignmentExpr	eErr = CE_Failure
>12889	Identifier	CE_Failure
>12890	Identifier	eErr
>12891	ExpressionStatement	 
>12892	CallExpression	CPLError ( CE_Failure , CPLE_AppDefined , \"OpenCL routines reported failure (%d) on line %d.\" , ( int ) err , __\
>12893	ArgumentList	CE_Failure
>12894	Argument	__LINE__
>12895	Identifier	__LINE__
>12896	Argument	( int ) err
>12897	CastExpression	( int ) err
>12898	Identifier	err
>12899	CastTarget	int
>12900	Argument	\"OpenCL routines reported failure (%d) on line %d.\"
>12901	PrimaryExpression	\"OpenCL routines reported failure (%d) on line %d.\"
>12902	Argument	CPLE_AppDefined
>12903	Identifier	CPLE_AppDefined
>12904	Argument	CE_Failure
>12905	Identifier	CE_Failure
>12906	Callee	CPLError
>12907	Identifier	CPLError
>12908	Condition	 
>12909	EqualityExpression	err != CL_SUCCESS
>12910	Identifier	CL_SUCCESS
>12911	Identifier	err
>12912	ExpressionStatement	 
>12913	AssignmentExpr	err = GDALWarpKernelOpenCL_setSrcImg ( warper , poWK -> papabySrcImage [ iBand ] , iBand )
>12914	CallExpression	GDALWarpKernelOpenCL_setSrcImg ( warper , poWK -> papabySrcImage [ iBand ] , iBand )
>12915	ArgumentList	warper
>12916	Argument	iBand
>12917	Identifier	iBand
>12918	Argument	poWK -> papabySrcImage [ iBand ]
>12919	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>12920	Identifier	iBand
>12921	PtrMemberAccess	poWK -> papabySrcImage
>12922	Identifier	papabySrcImage
>12923	Identifier	poWK
>12924	Argument	warper
>12925	Identifier	warper
>12926	Callee	GDALWarpKernelOpenCL_setSrcImg
>12927	Identifier	GDALWarpKernelOpenCL_setSrcImg
>12928	Identifier	err
>12929	IfStatement	if ( poWK -> papanBandSrcValid != NULL && poWK -> papanBandSrcValid [ iBand ] != NULL )
>12930	CompoundStatement	 
>12931	IfStatement	if ( err != CL_SUCCESS )
>12932	CompoundStatement	 
>12933	GotoStatement	 
>12934	Identifier	free_warper
>12935	ExpressionStatement	 
>12936	AssignmentExpr	eErr = CE_Failure
>12937	Identifier	CE_Failure
>12938	Identifier	eErr
>12939	ExpressionStatement	 
>12940	CallExpression	CPLError ( CE_Failure , CPLE_AppDefined , \"OpenCL routines reported failure (%d) on line %d.\" , ( int ) err , __\
>12941	ArgumentList	CE_Failure
>12942	Argument	__LINE__
>12943	Identifier	__LINE__
>12944	Argument	( int ) err
>12945	CastExpression	( int ) err
>12946	Identifier	err
>12947	CastTarget	int
>12948	Argument	\"OpenCL routines reported failure (%d) on line %d.\"
>12949	PrimaryExpression	\"OpenCL routines reported failure (%d) on line %d.\"
>12950	Argument	CPLE_AppDefined
>12951	Identifier	CPLE_AppDefined
>12952	Argument	CE_Failure
>12953	Identifier	CE_Failure
>12954	Callee	CPLError
>12955	Identifier	CPLError
>12956	Condition	 
>12957	EqualityExpression	err != CL_SUCCESS
>12958	Identifier	CL_SUCCESS
>12959	Identifier	err
>12960	ExpressionStatement	 
>12961	CallExpression	GDALWarpKernelOpenCL_setSrcValid ( warper , ( int * ) poWK -> papanBandSrcValid [ iBand ] , iBand )
>12962	ArgumentList	warper
>12963	Argument	iBand
>12964	Identifier	iBand
>12965	Argument	( int * ) poWK -> papanBandSrcValid [ iBand ]
>12966	CastExpression	( int * ) poWK -> papanBandSrcValid [ iBand ]
>12967	ArrayIndexing	poWK -> papanBandSrcValid [ iBand ]
>12968	Identifier	iBand
>12969	PtrMemberAccess	poWK -> papanBandSrcValid
>12970	Identifier	papanBandSrcValid
>12971	Identifier	poWK
>12972	CastTarget	int *
>12973	Argument	warper
>12974	Identifier	warper
>12975	Callee	GDALWarpKernelOpenCL_setSrcValid
>12976	Identifier	GDALWarpKernelOpenCL_setSrcValid
>12977	Condition	 
>12978	AndExpression	poWK -> papanBandSrcValid != NULL && poWK -> papanBandSrcValid [ iBand ] != NULL
>12979	EqualityExpression	poWK -> papanBandSrcValid [ iBand ] != NULL
>12980	Identifier	NULL
>12981	ArrayIndexing	poWK -> papanBandSrcValid [ iBand ]
>12982	Identifier	iBand
>12983	PtrMemberAccess	poWK -> papanBandSrcValid
>12984	Identifier	papanBandSrcValid
>12985	Identifier	poWK
>12986	EqualityExpression	poWK -> papanBandSrcValid != NULL
>12987	Identifier	NULL
>12988	PtrMemberAccess	poWK -> papanBandSrcValid
>12989	Identifier	papanBandSrcValid
>12990	Identifier	poWK
>12991	IncDecOp	 
>12992	IncDec	++
>12993	Identifier	iBand
>12994	Condition	 
>12995	RelationalExpression	iBand < poWK -> nBands
>12996	PtrMemberAccess	poWK -> nBands
>12997	Identifier	nBands
>12998	Identifier	poWK
>12999	Identifier	iBand
>13000	ForInit	 
>13001	AssignmentExpr	iBand = 0
>13002	PrimaryExpression	0
>13003	Identifier	iBand
>13004	IfStatement	if ( ! poWK -> pfnProgress ( poWK -> dfProgressBase , \"\" , poWK -> pProgress ) )
>13005	CompoundStatement	 
>13006	GotoStatement	 
>13007	Identifier	free_warper
>13008	ExpressionStatement	 
>13009	AssignmentExpr	eErr = CE_Failure
>13010	Identifier	CE_Failure
>13011	Identifier	eErr
>13012	ExpressionStatement	 
>13013	CallExpression	CPLError ( CE_Failure , CPLE_UserInterrupt , \"User terminated\" )
>13014	ArgumentList	CE_Failure
>13015	Argument	\"User terminated\"
>13016	PrimaryExpression	\"User terminated\"
>13017	Argument	CPLE_UserInterrupt
>13018	Identifier	CPLE_UserInterrupt
>13019	Argument	CE_Failure
>13020	Identifier	CE_Failure
>13021	Callee	CPLError
>13022	Identifier	CPLError
>13023	Condition	 
>13024	UnaryOp	! poWK -> pfnProgress ( poWK -> dfProgressBase , \"\" , poWK -> pProgress )
>13025	CallExpression	poWK -> pfnProgress ( poWK -> dfProgressBase , \"\" , poWK -> pProgress )
>13026	ArgumentList	poWK -> dfProgressBase
>13027	Argument	poWK -> pProgress
>13028	PtrMemberAccess	poWK -> pProgress
>13029	Identifier	pProgress
>13030	Identifier	poWK
>13031	Argument	\"\"
>13032	PrimaryExpression	\"\"
>13033	Argument	poWK -> dfProgressBase
>13034	PtrMemberAccess	poWK -> dfProgressBase
>13035	Identifier	dfProgressBase
>13036	Identifier	poWK
>13037	Callee	poWK -> pfnProgress
>13038	PtrMemberAccess	poWK -> pfnProgress
>13039	Identifier	pfnProgress
>13040	Identifier	poWK
>13041	UnaryOperator	!
>13042	ExpressionStatement	 
>13043	Statement	 
>13044	Statement	 
>13045	Statement	 
>13046	Statement	 
>13047	Statement	 
>13048	Statement	 
>13049	Statement	 
>13050	Statement	 
>13051	Statement	 
>13052	Statement	 
>13053	Statement	 
>13054	Statement	 
>13055	Statement	 
>13056	Statement	 
>13057	Statement	 
>13058	Statement	 
>13059	Statement	 
>13060	Statement	 
>13061	Statement	 
>13062	Statement	 
>13063	Statement	 
>13064	Statement	 
>13065	Statement	 
>13066	IfStatement	if ( err != CL_SUCCESS || warper == NULL )
>13067	CompoundStatement	 
>13068	ReturnStatement	 
>13069	Identifier	eErr
>13070	IfStatement	if ( warper != NULL )
>13071	GotoStatement	 
>13072	Identifier	free_warper
>13073	Condition	 
>13074	EqualityExpression	warper != NULL
>13075	Identifier	NULL
>13076	Identifier	warper
>13077	ExpressionStatement	 
>13078	AssignmentExpr	eErr = CE_Warning
>13079	Identifier	CE_Warning
>13080	Identifier	eErr
>13081	Condition	 
>13082	OrExpression	err != CL_SUCCESS || warper == NULL
>13083	EqualityExpression	warper == NULL
>13084	Identifier	NULL
>13085	Identifier	warper
>13086	EqualityExpression	err != CL_SUCCESS
>13087	Identifier	CL_SUCCESS
>13088	Identifier	err
>13089	ExpressionStatement	 
>13090	AssignmentExpr	warper = GDALWarpKernelOpenCL_createEnv ( nSrcXSize , nSrcYSize , nDstXSize , nDstYSize , imageFormat , \
>13091	CallExpression	GDALWarpKernelOpenCL_createEnv ( nSrcXSize , nSrcYSize , nDstXSize , nDstYSize , imageFormat , poWK -> nBands , \
>13092	ArgumentList	nSrcXSize
>13093	Argument	& err
>13094	UnaryOp	& err
>13095	Identifier	err
>13096	UnaryOperator	&
>13097	Argument	resampAlg
>13098	Identifier	resampAlg
>13099	Argument	poWK -> padfDstNoDataReal
>13100	PtrMemberAccess	poWK -> padfDstNoDataReal
>13101	Identifier	padfDstNoDataReal
>13102	Identifier	poWK
>13103	Argument	poWK -> pafDstDensity
>13104	PtrMemberAccess	poWK -> pafDstDensity
>13105	Identifier	pafDstDensity
>13106	Identifier	poWK
>13107	Argument	poWK -> papanBandSrcValid != NULL
>13108	EqualityExpression	poWK -> papanBandSrcValid != NULL
>13109	Identifier	NULL
>13110	PtrMemberAccess	poWK -> papanBandSrcValid
>13111	Identifier	papanBandSrcValid
>13112	Identifier	poWK
>13113	Argument	useImag
>13114	Identifier	useImag
>13115	Argument	4
>13116	PrimaryExpression	4
>13117	Argument	poWK -> nBands
>13118	PtrMemberAccess	poWK -> nBands
>13119	Identifier	nBands
>13120	Identifier	poWK
>13121	Argument	imageFormat
>13122	Identifier	imageFormat
>13123	Argument	nDstYSize
>13124	Identifier	nDstYSize
>13125	Argument	nDstXSize
>13126	Identifier	nDstXSize
>13127	Argument	nSrcYSize
>13128	Identifier	nSrcYSize
>13129	Argument	nSrcXSize
>13130	Identifier	nSrcXSize
>13131	Callee	GDALWarpKernelOpenCL_createEnv
>13132	Identifier	GDALWarpKernelOpenCL_createEnv
>13133	Identifier	warper
>13134	SwitchStatement	switch ( poWK -> eResample )
>13135	CompoundStatement	 
>13136	ReturnStatement	 
>13137	Identifier	CE_Warning
>13138	ExpressionStatement	 
>13139	CallExpression	CPLDebug ( \"OpenCL\" , \"Unsupported resampling OpenCL resampling alg %d.\" , ( int ) poWK -> eResample )
>13140	ArgumentList	\"OpenCL\"
>13141	Argument	( int ) poWK -> eResample
>13142	CastExpression	( int ) poWK -> eResample
>13143	PtrMemberAccess	poWK -> eResample
>13144	Identifier	eResample
>13145	Identifier	poWK
>13146	CastTarget	int
>13147	Argument	\"Unsupported resampling OpenCL resampling alg %d.\"
>13148	PrimaryExpression	\"Unsupported resampling OpenCL resampling alg %d.\"
>13149	Argument	\"OpenCL\"
>13150	PrimaryExpression	\"OpenCL\"
>13151	Callee	CPLDebug
>13152	Identifier	CPLDebug
>13153	Label	 
>13154	Identifier	default
>13155	BreakStatement	 
>13156	ExpressionStatement	 
>13157	AssignmentExpr	resampAlg = OCL_Lanczos
>13158	Identifier	OCL_Lanczos
>13159	Identifier	resampAlg
>13160	Label	 
>13161	Identifier	GRA_Lanczos
>13162	BreakStatement	 
>13163	ExpressionStatement	 
>13164	AssignmentExpr	resampAlg = OCL_CubicSpline
>13165	Identifier	OCL_CubicSpline
>13166	Identifier	resampAlg
>13167	Label	 
>13168	Identifier	GRA_CubicSpline
>13169	BreakStatement	 
>13170	ExpressionStatement	 
>13171	AssignmentExpr	resampAlg = OCL_Cubic
>13172	Identifier	OCL_Cubic
>13173	Identifier	resampAlg
>13174	Label	 
>13175	Identifier	GRA_Cubic
>13176	BreakStatement	 
>13177	ExpressionStatement	 
>13178	AssignmentExpr	resampAlg = OCL_Bilinear
>13179	Identifier	OCL_Bilinear
>13180	Identifier	resampAlg
>13181	Label	 
>13182	Identifier	GRA_Bilinear
>13183	Condition	 
>13184	PtrMemberAccess	poWK -> eResample
>13185	Identifier	eResample
>13186	Identifier	poWK
>13187	SwitchStatement	switch ( poWK -> eWorkingDataType )
>13188	CompoundStatement	 
>13189	ReturnStatement	 
>13190	Identifier	CE_Warning
>13191	ExpressionStatement	 
>13192	CallExpression	CPLDebug ( \"OpenCL\" , \"Unsupported resampling OpenCL data type %d.\" , ( int ) poWK -> eWorkingDataType )
>13193	ArgumentList	\"OpenCL\"
>13194	Argument	( int ) poWK -> eWorkingDataType
>13195	CastExpression	( int ) poWK -> eWorkingDataType
>13196	PtrMemberAccess	poWK -> eWorkingDataType
>13197	Identifier	eWorkingDataType
>13198	Identifier	poWK
>13199	CastTarget	int
>13200	Argument	\"Unsupported resampling OpenCL data type %d.\"
>13201	PrimaryExpression	\"Unsupported resampling OpenCL data type %d.\"
>13202	Argument	\"OpenCL\"
>13203	PrimaryExpression	\"OpenCL\"
>13204	Callee	CPLDebug
>13205	Identifier	CPLDebug
>13206	Label	 
>13207	Identifier	default
>13208	BreakStatement	 
>13209	ExpressionStatement	 
>13210	AssignmentExpr	imageFormat = CL_FLOAT
>13211	Identifier	CL_FLOAT
>13212	Identifier	imageFormat
>13213	Label	 
>13214	Identifier	GDT_Float32
>13215	ExpressionStatement	 
>13216	AssignmentExpr	useImag = TRUE
>13217	Identifier	TRUE
>13218	Identifier	useImag
>13219	Label	 
>13220	Identifier	GDT_CFloat32
>13221	BreakStatement	 
>13222	ExpressionStatement	 
>13223	AssignmentExpr	imageFormat = CL_SNORM_INT16
>13224	Identifier	CL_SNORM_INT16
>13225	Identifier	imageFormat
>13226	Label	 
>13227	Identifier	GDT_Int16
>13228	ExpressionStatement	 
>13229	AssignmentExpr	useImag = TRUE
>13230	Identifier	TRUE
>13231	Identifier	useImag
>13232	Label	 
>13233	Identifier	GDT_CInt16
>13234	BreakStatement	 
>13235	ExpressionStatement	 
>13236	AssignmentExpr	imageFormat = CL_UNORM_INT16
>13237	Identifier	CL_UNORM_INT16
>13238	Identifier	imageFormat
>13239	Label	 
>13240	Identifier	GDT_UInt16
>13241	BreakStatement	 
>13242	ExpressionStatement	 
>13243	AssignmentExpr	imageFormat = CL_UNORM_INT8
>13244	Identifier	CL_UNORM_INT8
>13245	Identifier	imageFormat
>13246	Label	 
>13247	Identifier	GDT_Byte
>13248	Condition	 
>13249	PtrMemberAccess	poWK -> eWorkingDataType
>13250	Identifier	eWorkingDataType
>13251	Identifier	poWK
>13252	IdentifierDeclStatement	 
>13253	IdentifierDecl	err
>13254	Identifier	err
>13255	IdentifierDeclType	cl_int
>13256	IdentifierDeclStatement	 
>13257	IdentifierDecl	resampAlg
>13258	Identifier	resampAlg
>13259	IdentifierDeclType	OCLResampAlg
>13260	IdentifierDeclStatement	 
>13261	IdentifierDecl	useImag = FALSE
>13262	AssignmentExpr	useImag = FALSE
>13263	Identifier	FALSE
>13264	Identifier	FALSE
>13265	Identifier	useImag
>13266	IdentifierDeclType	int
>13267	IdentifierDeclStatement	 
>13268	IdentifierDecl	imageFormat
>13269	Identifier	imageFormat
>13270	IdentifierDeclType	cl_channel_type
>13271	IdentifierDeclStatement	 
>13272	IdentifierDecl	* warper
>13273	Identifier	warper
>13274	IdentifierDeclType	struct oclWarper *
>13275	IdentifierDeclStatement	 
>13276	IdentifierDecl	eErr = CE_None
>13277	AssignmentExpr	eErr = CE_None
>13278	Identifier	CE_None
>13279	Identifier	CE_None
>13280	Identifier	eErr
>13281	IdentifierDeclType	CPLErr
>13282	IdentifierDeclStatement	 
>13283	IdentifierDecl	nSrcYOff = poWK -> nSrcYOff
>13284	AssignmentExpr	nSrcYOff = poWK -> nSrcYOff
>13285	PtrMemberAccess	poWK -> nSrcYOff
>13286	Identifier	nSrcYOff
>13287	Identifier	poWK
>13288	Identifier	nSrcYOff
>13289	Identifier	nSrcYOff
>13290	IdentifierDeclType	int
>13291	IdentifierDecl	nSrcXOff = poWK -> nSrcXOff
>13292	AssignmentExpr	nSrcXOff = poWK -> nSrcXOff
>13293	PtrMemberAccess	poWK -> nSrcXOff
>13294	Identifier	nSrcXOff
>13295	Identifier	poWK
>13296	Identifier	nSrcXOff
>13297	Identifier	nSrcXOff
>13298	IdentifierDeclType	int
>13299	IdentifierDeclStatement	 
>13300	IdentifierDecl	nDstYOff = poWK -> nDstYOff
>13301	AssignmentExpr	nDstYOff = poWK -> nDstYOff
>13302	PtrMemberAccess	poWK -> nDstYOff
>13303	Identifier	nDstYOff
>13304	Identifier	poWK
>13305	Identifier	nDstYOff
>13306	Identifier	nDstYOff
>13307	IdentifierDeclType	int
>13308	IdentifierDecl	nDstXOff = poWK -> nDstXOff
>13309	AssignmentExpr	nDstXOff = poWK -> nDstXOff
>13310	PtrMemberAccess	poWK -> nDstXOff
>13311	Identifier	nDstXOff
>13312	Identifier	poWK
>13313	Identifier	nDstXOff
>13314	Identifier	nDstXOff
>13315	IdentifierDeclType	int
>13316	IdentifierDeclStatement	 
>13317	IdentifierDecl	nSrcYSize = poWK -> nSrcYSize
>13318	AssignmentExpr	nSrcYSize = poWK -> nSrcYSize
>13319	PtrMemberAccess	poWK -> nSrcYSize
>13320	Identifier	nSrcYSize
>13321	Identifier	poWK
>13322	Identifier	nSrcYSize
>13323	Identifier	nSrcYSize
>13324	IdentifierDeclType	int
>13325	IdentifierDecl	nSrcXSize = poWK -> nSrcXSize
>13326	AssignmentExpr	nSrcXSize = poWK -> nSrcXSize
>13327	PtrMemberAccess	poWK -> nSrcXSize
>13328	Identifier	nSrcXSize
>13329	Identifier	poWK
>13330	Identifier	nSrcXSize
>13331	Identifier	nSrcXSize
>13332	IdentifierDeclType	int
>13333	IdentifierDeclStatement	 
>13334	IdentifierDecl	nDstYSize = poWK -> nDstYSize
>13335	AssignmentExpr	nDstYSize = poWK -> nDstYSize
>13336	PtrMemberAccess	poWK -> nDstYSize
>13337	Identifier	nDstYSize
>13338	Identifier	poWK
>13339	Identifier	nDstYSize
>13340	Identifier	nDstYSize
>13341	IdentifierDeclType	int
>13342	IdentifierDecl	nDstXSize = poWK -> nDstXSize
>13343	AssignmentExpr	nDstXSize = poWK -> nDstXSize
>13344	PtrMemberAccess	poWK -> nDstXSize
>13345	Identifier	nDstXSize
>13346	Identifier	poWK
>13347	Identifier	nDstXSize
>13348	Identifier	nDstXSize
>13349	IdentifierDeclType	int
>13350	IdentifierDeclStatement	 
>13351	IdentifierDecl	iBand
>13352	Identifier	iBand
>13353	IdentifierDeclType	int
>13354	IdentifierDecl	iDstY
>13355	Identifier	iDstY
>13356	IdentifierDeclType	int
>13484	FunctionDef	GWKGeneralCase (GDALWarpKernel * poWK)
>13485	ParameterList	GDALWarpKernel * poWK
>13486	Parameter	 
>13487	Identifier	poWK
>13488	ParameterType	GDALWarpKernel *
>13489	ReturnType	static CPLErr
>13490	CompoundStatement	 
>13491	ReturnStatement	 
>13492	CallExpression	GWKRun ( poWK , \"GWKGeneralCase\" , GWKGeneralCaseThread )
>13493	ArgumentList	poWK
>13494	Argument	GWKGeneralCaseThread
>13495	Identifier	GWKGeneralCaseThread
>13496	Argument	\"GWKGeneralCase\"
>13497	PrimaryExpression	\"GWKGeneralCase\"
>13498	Argument	poWK
>13499	Identifier	poWK
>13500	Callee	GWKRun
>13501	Identifier	GWKRun
>13508	FunctionDef	GWKGeneralCaseThread (void * pData)
>13509	ParameterList	void * pData
>13510	Parameter	 
>13511	Identifier	pData
>13512	ParameterType	void *
>13513	ReturnType	static void
>13514	CompoundStatement	 
>13515	IfStatement	if ( psWrkStruct )
>13516	ExpressionStatement	 
>13517	CallExpression	GWKResampleDeleteWrkStruct ( psWrkStruct )
>13518	ArgumentList	psWrkStruct
>13519	Argument	psWrkStruct
>13520	Identifier	psWrkStruct
>13521	Callee	GWKResampleDeleteWrkStruct
>13522	Identifier	GWKResampleDeleteWrkStruct
>13523	Condition	 
>13524	Identifier	psWrkStruct
>13525	ExpressionStatement	 
>13526	CallExpression	CPLFree ( pabSuccess )
>13527	ArgumentList	pabSuccess
>13528	Argument	pabSuccess
>13529	Identifier	pabSuccess
>13530	Callee	CPLFree
>13531	Identifier	CPLFree
>13532	ExpressionStatement	 
>13533	CallExpression	CPLFree ( padfZ )
>13534	ArgumentList	padfZ
>13535	Argument	padfZ
>13536	Identifier	padfZ
>13537	Callee	CPLFree
>13538	Identifier	CPLFree
>13539	ExpressionStatement	 
>13540	CallExpression	CPLFree ( padfY )
>13541	ArgumentList	padfY
>13542	Argument	padfY
>13543	Identifier	padfY
>13544	Callee	CPLFree
>13545	Identifier	CPLFree
>13546	ExpressionStatement	 
>13547	CallExpression	CPLFree ( padfX )
>13548	ArgumentList	padfX
>13549	Argument	padfX
>13550	Identifier	padfX
>13551	Callee	CPLFree
>13552	Identifier	CPLFree
>13553	ForStatement	for ( iDstY = iYMin ; iDstY < iYMax ; iDstY ++ )
>13554	CompoundStatement	 
>13555	IfStatement	if ( psJob -> pfnProgress ( psJob ) )
>13556	BreakStatement	 
>13557	Condition	 
>13558	CallExpression	psJob -> pfnProgress ( psJob )
>13559	ArgumentList	psJob
>13560	Argument	psJob
>13561	Identifier	psJob
>13562	Callee	psJob -> pfnProgress
>13563	PtrMemberAccess	psJob -> pfnProgress
>13564	Identifier	pfnProgress
>13565	Identifier	psJob
>13566	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>13567	CompoundStatement	 
>13568	IfStatement	if ( poWK -> panDstValid != NULL )
>13569	CompoundStatement	 
>13570	ExpressionStatement	 
>13571	AssignmentExpr	poWK -> panDstValid [ iDstOffset >> 5 ] |= 0x01 << ( iDstOffset & 0x1f )
>13572	ShiftExpression	0x01 << ( iDstOffset & 0x1f )
>13573	BitAndExpression	iDstOffset & 0x1f
>13574	PrimaryExpression	0x1f
>13575	Identifier	iDstOffset
>13576	PrimaryExpression	0x01
>13577	ArrayIndexing	poWK -> panDstValid [ iDstOffset >> 5 ]
>13578	ShiftExpression	iDstOffset >> 5
>13579	PrimaryExpression	5
>13580	Identifier	iDstOffset
>13581	PtrMemberAccess	poWK -> panDstValid
>13582	Identifier	panDstValid
>13583	Identifier	poWK
>13584	Condition	 
>13585	EqualityExpression	poWK -> panDstValid != NULL
>13586	Identifier	NULL
>13587	PtrMemberAccess	poWK -> panDstValid
>13588	Identifier	panDstValid
>13589	Identifier	poWK
>13590	ExpressionStatement	 
>13591	CallExpression	GWKOverlayDensity ( poWK , iDstOffset , dfDensity )
>13592	ArgumentList	poWK
>13593	Argument	dfDensity
>13594	Identifier	dfDensity
>13595	Argument	iDstOffset
>13596	Identifier	iDstOffset
>13597	Argument	poWK
>13598	Identifier	poWK
>13599	Callee	GWKOverlayDensity
>13600	Identifier	GWKOverlayDensity
>13601	IfStatement	if ( ! bHasFoundDensity )
>13602	ContinueStatement	 
>13603	Condition	 
>13604	UnaryOp	! bHasFoundDensity
>13605	Identifier	bHasFoundDensity
>13606	UnaryOperator	!
>13607	ForStatement	for ( iBand = 0 ; iBand < poWK -> nBands ; iBand ++ )
>13608	CompoundStatement	 
>13609	ExpressionStatement	 
>13610	CallExpression	GWKSetPixelValue ( poWK , iBand , iDstOffset , dfBandDensity , dfValueReal , dfValueImag )
>13611	ArgumentList	poWK
>13612	Argument	dfValueImag
>13613	Identifier	dfValueImag
>13614	Argument	dfValueReal
>13615	Identifier	dfValueReal
>13616	Argument	dfBandDensity
>13617	Identifier	dfBandDensity
>13618	Argument	iDstOffset
>13619	Identifier	iDstOffset
>13620	Argument	iBand
>13621	Identifier	iBand
>13622	Argument	poWK
>13623	Identifier	poWK
>13624	Callee	GWKSetPixelValue
>13625	Identifier	GWKSetPixelValue
>13626	ExpressionStatement	 
>13627	AssignmentExpr	bHasFoundDensity = TRUE
>13628	Identifier	TRUE
>13629	Identifier	bHasFoundDensity
>13630	IfStatement	if ( dfBandDensity < 0.0000000001 )
>13631	ContinueStatement	 
>13632	Condition	 
>13633	RelationalExpression	dfBandDensity < 0.0000000001
>13634	PrimaryExpression	0.0000000001
>13635	Identifier	dfBandDensity
>13636	IfStatement	if ( poWK -> eResample == GRA_NearestNeighbour || nSrcXSize == 1 || nSrcYSize == 1 )
>13637	ElseStatement	else
>13638	IfStatement	if ( poWK -> eResample == GRA_Bilinear )
>13639	ElseStatement	else
>13640	IfStatement	if ( poWK -> eResample == GRA_Cubic )
>13641	ElseStatement	else
>13642	IfStatement	if ( poWK -> eResample == GRA_CubicSpline || poWK -> eResample == GRA_Lanczos )
>13643	CompoundStatement	 
>13644	ExpressionStatement	 
>13645	CallExpression	psWrkStruct -> pfnGWKResample ( poWK , iBand , padfX [ iDstX ] - poWK -> nSrcXOff , padfY [ iDstX ] - poWK -> nSrcYOff , & \
>13646	ArgumentList	poWK
>13647	Argument	psWrkStruct
>13648	Identifier	psWrkStruct
>13649	Argument	& dfValueImag
>13650	UnaryOp	& dfValueImag
>13651	Identifier	dfValueImag
>13652	UnaryOperator	&
>13653	Argument	& dfValueReal
>13654	UnaryOp	& dfValueReal
>13655	Identifier	dfValueReal
>13656	UnaryOperator	&
>13657	Argument	& dfBandDensity
>13658	UnaryOp	& dfBandDensity
>13659	Identifier	dfBandDensity
>13660	UnaryOperator	&
>13661	Argument	padfY [ iDstX ] - poWK -> nSrcYOff
>13662	AdditiveExpression	padfY [ iDstX ] - poWK -> nSrcYOff
>13663	PtrMemberAccess	poWK -> nSrcYOff
>13664	Identifier	nSrcYOff
>13665	Identifier	poWK
>13666	ArrayIndexing	padfY [ iDstX ]
>13667	Identifier	iDstX
>13668	Identifier	padfY
>13669	Argument	padfX [ iDstX ] - poWK -> nSrcXOff
>13670	AdditiveExpression	padfX [ iDstX ] - poWK -> nSrcXOff
>13671	PtrMemberAccess	poWK -> nSrcXOff
>13672	Identifier	nSrcXOff
>13673	Identifier	poWK
>13674	ArrayIndexing	padfX [ iDstX ]
>13675	Identifier	iDstX
>13676	Identifier	padfX
>13677	Argument	iBand
>13678	Identifier	iBand
>13679	Argument	poWK
>13680	Identifier	poWK
>13681	Callee	psWrkStruct -> pfnGWKResample
>13682	PtrMemberAccess	psWrkStruct -> pfnGWKResample
>13683	Identifier	pfnGWKResample
>13684	Identifier	psWrkStruct
>13685	Condition	 
>13686	OrExpression	poWK -> eResample == GRA_CubicSpline || poWK -> eResample == GRA_Lanczos
>13687	EqualityExpression	poWK -> eResample == GRA_Lanczos
>13688	Identifier	GRA_Lanczos
>13689	PtrMemberAccess	poWK -> eResample
>13690	Identifier	eResample
>13691	Identifier	poWK
>13692	EqualityExpression	poWK -> eResample == GRA_CubicSpline
>13693	Identifier	GRA_CubicSpline
>13694	PtrMemberAccess	poWK -> eResample
>13695	Identifier	eResample
>13696	Identifier	poWK
>13697	CompoundStatement	 
>13698	ExpressionStatement	 
>13699	CallExpression	GWKCubicResample ( poWK , iBand , padfX [ iDstX ] - poWK -> nSrcXOff , padfY [ iDstX ] - poWK -> nSrcYOff , & dfBandDensity , & \
>13700	ArgumentList	poWK
>13701	Argument	& dfValueImag
>13702	UnaryOp	& dfValueImag
>13703	Identifier	dfValueImag
>13704	UnaryOperator	&
>13705	Argument	& dfValueReal
>13706	UnaryOp	& dfValueReal
>13707	Identifier	dfValueReal
>13708	UnaryOperator	&
>13709	Argument	& dfBandDensity
>13710	UnaryOp	& dfBandDensity
>13711	Identifier	dfBandDensity
>13712	UnaryOperator	&
>13713	Argument	padfY [ iDstX ] - poWK -> nSrcYOff
>13714	AdditiveExpression	padfY [ iDstX ] - poWK -> nSrcYOff
>13715	PtrMemberAccess	poWK -> nSrcYOff
>13716	Identifier	nSrcYOff
>13717	Identifier	poWK
>13718	ArrayIndexing	padfY [ iDstX ]
>13719	Identifier	iDstX
>13720	Identifier	padfY
>13721	Argument	padfX [ iDstX ] - poWK -> nSrcXOff
>13722	AdditiveExpression	padfX [ iDstX ] - poWK -> nSrcXOff
>13723	PtrMemberAccess	poWK -> nSrcXOff
>13724	Identifier	nSrcXOff
>13725	Identifier	poWK
>13726	ArrayIndexing	padfX [ iDstX ]
>13727	Identifier	iDstX
>13728	Identifier	padfX
>13729	Argument	iBand
>13730	Identifier	iBand
>13731	Argument	poWK
>13732	Identifier	poWK
>13733	Callee	GWKCubicResample
>13734	Identifier	GWKCubicResample
>13735	Condition	 
>13736	EqualityExpression	poWK -> eResample == GRA_Cubic
>13737	Identifier	GRA_Cubic
>13738	PtrMemberAccess	poWK -> eResample
>13739	Identifier	eResample
>13740	Identifier	poWK
>13741	CompoundStatement	 
>13742	ExpressionStatement	 
>13743	CallExpression	GWKBilinearResample ( poWK , iBand , padfX [ iDstX ] - poWK -> nSrcXOff , padfY [ iDstX ] - poWK -> nSrcYOff , & \
>13744	ArgumentList	poWK
>13745	Argument	& dfValueImag
>13746	UnaryOp	& dfValueImag
>13747	Identifier	dfValueImag
>13748	UnaryOperator	&
>13749	Argument	& dfValueReal
>13750	UnaryOp	& dfValueReal
>13751	Identifier	dfValueReal
>13752	UnaryOperator	&
>13753	Argument	& dfBandDensity
>13754	UnaryOp	& dfBandDensity
>13755	Identifier	dfBandDensity
>13756	UnaryOperator	&
>13757	Argument	padfY [ iDstX ] - poWK -> nSrcYOff
>13758	AdditiveExpression	padfY [ iDstX ] - poWK -> nSrcYOff
>13759	PtrMemberAccess	poWK -> nSrcYOff
>13760	Identifier	nSrcYOff
>13761	Identifier	poWK
>13762	ArrayIndexing	padfY [ iDstX ]
>13763	Identifier	iDstX
>13764	Identifier	padfY
>13765	Argument	padfX [ iDstX ] - poWK -> nSrcXOff
>13766	AdditiveExpression	padfX [ iDstX ] - poWK -> nSrcXOff
>13767	PtrMemberAccess	poWK -> nSrcXOff
>13768	Identifier	nSrcXOff
>13769	Identifier	poWK
>13770	ArrayIndexing	padfX [ iDstX ]
>13771	Identifier	iDstX
>13772	Identifier	padfX
>13773	Argument	iBand
>13774	Identifier	iBand
>13775	Argument	poWK
>13776	Identifier	poWK
>13777	Callee	GWKBilinearResample
>13778	Identifier	GWKBilinearResample
>13779	Condition	 
>13780	EqualityExpression	poWK -> eResample == GRA_Bilinear
>13781	Identifier	GRA_Bilinear
>13782	PtrMemberAccess	poWK -> eResample
>13783	Identifier	eResample
>13784	Identifier	poWK
>13785	CompoundStatement	 
>13786	ExpressionStatement	 
>13787	CallExpression	GWKGetPixelValue ( poWK , iBand , iSrcOffset , & dfBandDensity , & dfValueReal , & dfValueImag )
>13788	ArgumentList	poWK
>13789	Argument	& dfValueImag
>13790	UnaryOp	& dfValueImag
>13791	Identifier	dfValueImag
>13792	UnaryOperator	&
>13793	Argument	& dfValueReal
>13794	UnaryOp	& dfValueReal
>13795	Identifier	dfValueReal
>13796	UnaryOperator	&
>13797	Argument	& dfBandDensity
>13798	UnaryOp	& dfBandDensity
>13799	Identifier	dfBandDensity
>13800	UnaryOperator	&
>13801	Argument	iSrcOffset
>13802	Identifier	iSrcOffset
>13803	Argument	iBand
>13804	Identifier	iBand
>13805	Argument	poWK
>13806	Identifier	poWK
>13807	Callee	GWKGetPixelValue
>13808	Identifier	GWKGetPixelValue
>13809	Condition	 
>13810	OrExpression	poWK -> eResample == GRA_NearestNeighbour || nSrcXSize == 1 || nSrcYSize == 1
>13811	OrExpression	nSrcXSize == 1 || nSrcYSize == 1
>13812	EqualityExpression	nSrcYSize == 1
>13813	PrimaryExpression	1
>13814	Identifier	nSrcYSize
>13815	EqualityExpression	nSrcXSize == 1
>13816	PrimaryExpression	1
>13817	Identifier	nSrcXSize
>13818	EqualityExpression	poWK -> eResample == GRA_NearestNeighbour
>13819	Identifier	GRA_NearestNeighbour
>13820	PtrMemberAccess	poWK -> eResample
>13821	Identifier	eResample
>13822	Identifier	poWK
>13823	IdentifierDeclStatement	 
>13824	IdentifierDecl	dfValueImag = 0.0
>13825	AssignmentExpr	dfValueImag = 0.0
>13826	PrimaryExpression	0.0
>13827	Identifier	dfValueImag
>13828	Identifier	dfValueImag
>13829	IdentifierDeclType	double
>13830	IdentifierDeclStatement	 
>13831	IdentifierDecl	dfValueReal = 0.0
>13832	AssignmentExpr	dfValueReal = 0.0
>13833	PrimaryExpression	0.0
>13834	Identifier	dfValueReal
>13835	Identifier	dfValueReal
>13836	IdentifierDeclType	double
>13837	IdentifierDeclStatement	 
>13838	IdentifierDecl	dfBandDensity = 0.0
>13839	AssignmentExpr	dfBandDensity = 0.0
>13840	PrimaryExpression	0.0
>13841	Identifier	dfBandDensity
>13842	Identifier	dfBandDensity
>13843	IdentifierDeclType	double
>13844	IncDecOp	 
>13845	IncDec	++
>13846	Identifier	iBand
>13847	Condition	 
>13848	RelationalExpression	iBand < poWK -> nBands
>13849	PtrMemberAccess	poWK -> nBands
>13850	Identifier	nBands
>13851	Identifier	poWK
>13852	Identifier	iBand
>13853	ForInit	 
>13854	AssignmentExpr	iBand = 0
>13855	PrimaryExpression	0
>13856	Identifier	iBand
>13857	ExpressionStatement	 
>13858	AssignmentExpr	iDstOffset = iDstX + iDstY * nDstXSize
>13859	AdditiveExpression	iDstX + iDstY * nDstXSize
>13860	MultiplicativeExpression	iDstY * nDstXSize
>13861	Identifier	nDstXSize
>13862	Identifier	iDstY
>13863	Identifier	iDstX
>13864	Identifier	iDstOffset
>13865	IdentifierDeclStatement	 
>13866	IdentifierDecl	bHasFoundDensity = FALSE
>13867	AssignmentExpr	bHasFoundDensity = FALSE
>13868	Identifier	FALSE
>13869	Identifier	FALSE
>13870	Identifier	bHasFoundDensity
>13871	IdentifierDeclType	int
>13872	IdentifierDeclStatement	 
>13873	IdentifierDecl	iBand
>13874	Identifier	iBand
>13875	IdentifierDeclType	int
>13876	IfStatement	if ( poWK -> panUnifiedSrcValid != NULL && ! ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & \
>13877	ContinueStatement	 
>13878	Condition	 
>13879	AndExpression	poWK -> panUnifiedSrcValid != NULL && ! ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( \
>13880	UnaryOp	! ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) ) )
>13881	BitAndExpression	poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) )
>13882	ShiftExpression	0x01 << ( iSrcOffset & 0x1f )
>13883	BitAndExpression	iSrcOffset & 0x1f
>13884	PrimaryExpression	0x1f
>13885	Identifier	iSrcOffset
>13886	PrimaryExpression	0x01
>13887	ArrayIndexing	poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ]
>13888	ShiftExpression	iSrcOffset >> 5
>13889	PrimaryExpression	5
>13890	Identifier	iSrcOffset
>13891	PtrMemberAccess	poWK -> panUnifiedSrcValid
>13892	Identifier	panUnifiedSrcValid
>13893	Identifier	poWK
>13894	UnaryOperator	!
>13895	EqualityExpression	poWK -> panUnifiedSrcValid != NULL
>13896	Identifier	NULL
>13897	PtrMemberAccess	poWK -> panUnifiedSrcValid
>13898	Identifier	panUnifiedSrcValid
>13899	Identifier	poWK
>13900	IfStatement	if ( poWK -> pafUnifiedSrcDensity != NULL )
>13901	CompoundStatement	 
>13902	IfStatement	if ( dfDensity < 0.00001 )
>13903	ContinueStatement	 
>13904	Condition	 
>13905	RelationalExpression	dfDensity < 0.00001
>13906	PrimaryExpression	0.00001
>13907	Identifier	dfDensity
>13908	ExpressionStatement	 
>13909	AssignmentExpr	dfDensity = poWK -> pafUnifiedSrcDensity [ iSrcOffset ]
>13910	ArrayIndexing	poWK -> pafUnifiedSrcDensity [ iSrcOffset ]
>13911	Identifier	iSrcOffset
>13912	PtrMemberAccess	poWK -> pafUnifiedSrcDensity
>13913	Identifier	pafUnifiedSrcDensity
>13914	Identifier	poWK
>13915	Identifier	dfDensity
>13916	Condition	 
>13917	EqualityExpression	poWK -> pafUnifiedSrcDensity != NULL
>13918	Identifier	NULL
>13919	PtrMemberAccess	poWK -> pafUnifiedSrcDensity
>13920	Identifier	pafUnifiedSrcDensity
>13921	Identifier	poWK
>13922	IdentifierDeclStatement	 
>13923	IdentifierDecl	dfDensity = 1.0
>13924	AssignmentExpr	dfDensity = 1.0
>13925	PrimaryExpression	1.0
>13926	Identifier	dfDensity
>13927	Identifier	dfDensity
>13928	IdentifierDeclType	double
>13929	ExpressionStatement	 
>13930	CallExpression	COMPUTE_iSrcOffset ( pabSuccess , iDstX , padfX , padfY , poWK , nSrcXSize , nSrcYSize )
>13931	ArgumentList	pabSuccess
>13932	Argument	nSrcYSize
>13933	Identifier	nSrcYSize
>13934	Argument	nSrcXSize
>13935	Identifier	nSrcXSize
>13936	Argument	poWK
>13937	Identifier	poWK
>13938	Argument	padfY
>13939	Identifier	padfY
>13940	Argument	padfX
>13941	Identifier	padfX
>13942	Argument	iDstX
>13943	Identifier	iDstX
>13944	Argument	pabSuccess
>13945	Identifier	pabSuccess
>13946	Callee	COMPUTE_iSrcOffset
>13947	Identifier	COMPUTE_iSrcOffset
>13948	IdentifierDeclStatement	 
>13949	IdentifierDecl	iDstOffset
>13950	Identifier	iDstOffset
>13951	IdentifierDeclType	int
>13952	IncDecOp	 
>13953	IncDec	++
>13954	Identifier	iDstX
>13955	Condition	 
>13956	RelationalExpression	iDstX < nDstXSize
>13957	Identifier	nDstXSize
>13958	Identifier	iDstX
>13959	ForInit	 
>13960	AssignmentExpr	iDstX = 0
>13961	PrimaryExpression	0
>13962	Identifier	iDstX
>13963	ExpressionStatement	 
>13964	CallExpression	poWK -> pfnTransformer ( psJob -> pTransformerArg , TRUE , nDstXSize , padfX , padfY , padfZ , pabSuccess )
>13965	ArgumentList	psJob -> pTransformerArg
>13966	Argument	pabSuccess
>13967	Identifier	pabSuccess
>13968	Argument	padfZ
>13969	Identifier	padfZ
>13970	Argument	padfY
>13971	Identifier	padfY
>13972	Argument	padfX
>13973	Identifier	padfX
>13974	Argument	nDstXSize
>13975	Identifier	nDstXSize
>13976	Argument	TRUE
>13977	Identifier	TRUE
>13978	Argument	psJob -> pTransformerArg
>13979	PtrMemberAccess	psJob -> pTransformerArg
>13980	Identifier	pTransformerArg
>13981	Identifier	psJob
>13982	Callee	poWK -> pfnTransformer
>13983	PtrMemberAccess	poWK -> pfnTransformer
>13984	Identifier	pfnTransformer
>13985	Identifier	poWK
>13986	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>13987	CompoundStatement	 
>13988	ExpressionStatement	 
>13989	AssignmentExpr	padfZ [ iDstX ] = 0.0
>13990	PrimaryExpression	0.0
>13991	ArrayIndexing	padfZ [ iDstX ]
>13992	Identifier	iDstX
>13993	Identifier	padfZ
>13994	ExpressionStatement	 
>13995	AssignmentExpr	padfY [ iDstX ] = iDstY + 0.5 + poWK -> nDstYOff
>13996	AdditiveExpression	iDstY + 0.5 + poWK -> nDstYOff
>13997	AdditiveExpression	0.5 + poWK -> nDstYOff
>13998	PtrMemberAccess	poWK -> nDstYOff
>13999	Identifier	nDstYOff
>14000	Identifier	poWK
>14001	PrimaryExpression	0.5
>14002	Identifier	iDstY
>14003	ArrayIndexing	padfY [ iDstX ]
>14004	Identifier	iDstX
>14005	Identifier	padfY
>14006	ExpressionStatement	 
>14007	AssignmentExpr	padfX [ iDstX ] = iDstX + 0.5 + poWK -> nDstXOff
>14008	AdditiveExpression	iDstX + 0.5 + poWK -> nDstXOff
>14009	AdditiveExpression	0.5 + poWK -> nDstXOff
>14010	PtrMemberAccess	poWK -> nDstXOff
>14011	Identifier	nDstXOff
>14012	Identifier	poWK
>14013	PrimaryExpression	0.5
>14014	Identifier	iDstX
>14015	ArrayIndexing	padfX [ iDstX ]
>14016	Identifier	iDstX
>14017	Identifier	padfX
>14018	IncDecOp	 
>14019	IncDec	++
>14020	Identifier	iDstX
>14021	Condition	 
>14022	RelationalExpression	iDstX < nDstXSize
>14023	Identifier	nDstXSize
>14024	Identifier	iDstX
>14025	ForInit	 
>14026	AssignmentExpr	iDstX = 0
>14027	PrimaryExpression	0
>14028	Identifier	iDstX
>14029	IdentifierDeclStatement	 
>14030	IdentifierDecl	iDstX
>14031	Identifier	iDstX
>14032	IdentifierDeclType	int
>14033	IncDecOp	 
>14034	IncDec	++
>14035	Identifier	iDstY
>14036	Condition	 
>14037	RelationalExpression	iDstY < iYMax
>14038	Identifier	iYMax
>14039	Identifier	iDstY
>14040	ForInit	 
>14041	AssignmentExpr	iDstY = iYMin
>14042	Identifier	iYMin
>14043	Identifier	iDstY
>14044	IfStatement	if ( poWK -> eResample == GRA_CubicSpline || poWK -> eResample == GRA_Lanczos )
>14045	CompoundStatement	 
>14046	ExpressionStatement	 
>14047	AssignmentExpr	psWrkStruct = GWKResampleCreateWrkStruct ( poWK )
>14048	CallExpression	GWKResampleCreateWrkStruct ( poWK )
>14049	ArgumentList	poWK
>14050	Argument	poWK
>14051	Identifier	poWK
>14052	Callee	GWKResampleCreateWrkStruct
>14053	Identifier	GWKResampleCreateWrkStruct
>14054	Identifier	psWrkStruct
>14055	Condition	 
>14056	OrExpression	poWK -> eResample == GRA_CubicSpline || poWK -> eResample == GRA_Lanczos
>14057	EqualityExpression	poWK -> eResample == GRA_Lanczos
>14058	Identifier	GRA_Lanczos
>14059	PtrMemberAccess	poWK -> eResample
>14060	Identifier	eResample
>14061	Identifier	poWK
>14062	EqualityExpression	poWK -> eResample == GRA_CubicSpline
>14063	Identifier	GRA_CubicSpline
>14064	PtrMemberAccess	poWK -> eResample
>14065	Identifier	eResample
>14066	Identifier	poWK
>14067	IdentifierDeclStatement	 
>14068	IdentifierDecl	* psWrkStruct = NULL
>14069	AssignmentExpr	* psWrkStruct = NULL
>14070	Identifier	NULL
>14071	Identifier	NULL
>14072	Identifier	psWrkStruct
>14073	IdentifierDeclType	GWKResampleWrkStruct *
>14074	ExpressionStatement	 
>14075	AssignmentExpr	pabSuccess = ( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>14076	CastExpression	( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>14077	CallExpression	CPLMalloc ( sizeof ( int ) * nDstXSize )
>14078	ArgumentList	sizeof ( int ) * nDstXSize
>14079	Argument	sizeof ( int ) * nDstXSize
>14080	MultiplicativeExpression	sizeof ( int ) * nDstXSize
>14081	Identifier	nDstXSize
>14082	SizeofExpr	sizeof ( int )
>14083	SizeofOperand	int
>14084	Sizeof	sizeof
>14085	Callee	CPLMalloc
>14086	Identifier	CPLMalloc
>14087	CastTarget	int *
>14088	Identifier	pabSuccess
>14089	ExpressionStatement	 
>14090	AssignmentExpr	padfZ = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>14091	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>14092	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>14093	ArgumentList	sizeof ( double ) * nDstXSize
>14094	Argument	sizeof ( double ) * nDstXSize
>14095	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>14096	Identifier	nDstXSize
>14097	SizeofExpr	sizeof ( double )
>14098	SizeofOperand	double
>14099	Sizeof	sizeof
>14100	Callee	CPLMalloc
>14101	Identifier	CPLMalloc
>14102	CastTarget	double *
>14103	Identifier	padfZ
>14104	ExpressionStatement	 
>14105	AssignmentExpr	padfY = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>14106	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>14107	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>14108	ArgumentList	sizeof ( double ) * nDstXSize
>14109	Argument	sizeof ( double ) * nDstXSize
>14110	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>14111	Identifier	nDstXSize
>14112	SizeofExpr	sizeof ( double )
>14113	SizeofOperand	double
>14114	Sizeof	sizeof
>14115	Callee	CPLMalloc
>14116	Identifier	CPLMalloc
>14117	CastTarget	double *
>14118	Identifier	padfY
>14119	ExpressionStatement	 
>14120	AssignmentExpr	padfX = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>14121	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>14122	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>14123	ArgumentList	sizeof ( double ) * nDstXSize
>14124	Argument	sizeof ( double ) * nDstXSize
>14125	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>14126	Identifier	nDstXSize
>14127	SizeofExpr	sizeof ( double )
>14128	SizeofOperand	double
>14129	Sizeof	sizeof
>14130	Callee	CPLMalloc
>14131	Identifier	CPLMalloc
>14132	CastTarget	double *
>14133	Identifier	padfX
>14134	IdentifierDeclStatement	 
>14135	IdentifierDecl	* pabSuccess
>14136	Identifier	pabSuccess
>14137	IdentifierDeclType	int *
>14138	IdentifierDeclStatement	 
>14139	IdentifierDecl	* padfZ
>14140	Identifier	padfZ
>14141	IdentifierDeclType	double *
>14142	IdentifierDecl	* padfY
>14143	Identifier	padfY
>14144	IdentifierDeclType	double *
>14145	IdentifierDecl	* padfX
>14146	Identifier	padfX
>14147	IdentifierDeclType	double *
>14148	IdentifierDeclStatement	 
>14149	IdentifierDecl	nSrcYSize = poWK -> nSrcYSize
>14150	AssignmentExpr	nSrcYSize = poWK -> nSrcYSize
>14151	PtrMemberAccess	poWK -> nSrcYSize
>14152	Identifier	nSrcYSize
>14153	Identifier	poWK
>14154	Identifier	nSrcYSize
>14155	Identifier	nSrcYSize
>14156	IdentifierDeclType	int
>14157	IdentifierDecl	nSrcXSize = poWK -> nSrcXSize
>14158	AssignmentExpr	nSrcXSize = poWK -> nSrcXSize
>14159	PtrMemberAccess	poWK -> nSrcXSize
>14160	Identifier	nSrcXSize
>14161	Identifier	poWK
>14162	Identifier	nSrcXSize
>14163	Identifier	nSrcXSize
>14164	IdentifierDeclType	int
>14165	IdentifierDeclStatement	 
>14166	IdentifierDecl	nDstXSize = poWK -> nDstXSize
>14167	AssignmentExpr	nDstXSize = poWK -> nDstXSize
>14168	PtrMemberAccess	poWK -> nDstXSize
>14169	Identifier	nDstXSize
>14170	Identifier	poWK
>14171	Identifier	nDstXSize
>14172	Identifier	nDstXSize
>14173	IdentifierDeclType	int
>14174	IdentifierDeclStatement	 
>14175	IdentifierDecl	iDstY
>14176	Identifier	iDstY
>14177	IdentifierDeclType	int
>14178	IdentifierDeclStatement	 
>14179	IdentifierDecl	iYMax = psJob -> iYMax
>14180	AssignmentExpr	iYMax = psJob -> iYMax
>14181	PtrMemberAccess	psJob -> iYMax
>14182	Identifier	iYMax
>14183	Identifier	psJob
>14184	Identifier	iYMax
>14185	Identifier	iYMax
>14186	IdentifierDeclType	int
>14187	IdentifierDeclStatement	 
>14188	IdentifierDecl	iYMin = psJob -> iYMin
>14189	AssignmentExpr	iYMin = psJob -> iYMin
>14190	PtrMemberAccess	psJob -> iYMin
>14191	Identifier	iYMin
>14192	Identifier	psJob
>14193	Identifier	iYMin
>14194	Identifier	iYMin
>14195	IdentifierDeclType	int
>14196	IdentifierDeclStatement	 
>14197	IdentifierDecl	* poWK = psJob -> poWK
>14198	AssignmentExpr	* poWK = psJob -> poWK
>14199	PtrMemberAccess	psJob -> poWK
>14200	Identifier	poWK
>14201	Identifier	psJob
>14202	Identifier	poWK
>14203	Identifier	poWK
>14204	IdentifierDeclType	GDALWarpKernel *
>14205	IdentifierDeclStatement	 
>14206	IdentifierDecl	* psJob = ( GWKJobStruct * ) pData
>14207	AssignmentExpr	* psJob = ( GWKJobStruct * ) pData
>14208	CastExpression	( GWKJobStruct * ) pData
>14209	Identifier	pData
>14210	CastTarget	GWKJobStruct *
>14211	Identifier	psJob
>14212	Identifier	psJob
>14213	IdentifierDeclType	GWKJobStruct *
>14284	FunctionDef	GWKNearestNoMasksByte (GDALWarpKernel * poWK)
>14285	ParameterList	GDALWarpKernel * poWK
>14286	Parameter	 
>14287	Identifier	poWK
>14288	ParameterType	GDALWarpKernel *
>14289	ReturnType	static CPLErr
>14290	CompoundStatement	 
>14291	ReturnStatement	 
>14292	CallExpression	GWKRun ( poWK , \"GWKNearestNoMasksByte\" , GWKNearestNoMasksByteThread )
>14293	ArgumentList	poWK
>14294	Argument	GWKNearestNoMasksByteThread
>14295	Identifier	GWKNearestNoMasksByteThread
>14296	Argument	\"GWKNearestNoMasksByte\"
>14297	PrimaryExpression	\"GWKNearestNoMasksByte\"
>14298	Argument	poWK
>14299	Identifier	poWK
>14300	Callee	GWKRun
>14301	Identifier	GWKRun
>14308	FunctionDef	GWKNearestNoMasksByteThread (void * pData)
>14309	ParameterList	void * pData
>14310	Parameter	 
>14311	Identifier	pData
>14312	ParameterType	void *
>14313	ReturnType	static void
>14314	CompoundStatement	 
>14315	ExpressionStatement	 
>14316	CallExpression	CPLFree ( pabSuccess )
>14317	ArgumentList	pabSuccess
>14318	Argument	pabSuccess
>14319	Identifier	pabSuccess
>14320	Callee	CPLFree
>14321	Identifier	CPLFree
>14322	ExpressionStatement	 
>14323	CallExpression	CPLFree ( padfZ )
>14324	ArgumentList	padfZ
>14325	Argument	padfZ
>14326	Identifier	padfZ
>14327	Callee	CPLFree
>14328	Identifier	CPLFree
>14329	ExpressionStatement	 
>14330	CallExpression	CPLFree ( padfY )
>14331	ArgumentList	padfY
>14332	Argument	padfY
>14333	Identifier	padfY
>14334	Callee	CPLFree
>14335	Identifier	CPLFree
>14336	ExpressionStatement	 
>14337	CallExpression	CPLFree ( padfX )
>14338	ArgumentList	padfX
>14339	Argument	padfX
>14340	Identifier	padfX
>14341	Callee	CPLFree
>14342	Identifier	CPLFree
>14343	ForStatement	for ( iDstY = iYMin ; iDstY < iYMax ; iDstY ++ )
>14344	CompoundStatement	 
>14345	IfStatement	if ( psJob -> pfnProgress ( psJob ) )
>14346	BreakStatement	 
>14347	Condition	 
>14348	CallExpression	psJob -> pfnProgress ( psJob )
>14349	ArgumentList	psJob
>14350	Argument	psJob
>14351	Identifier	psJob
>14352	Callee	psJob -> pfnProgress
>14353	PtrMemberAccess	psJob -> pfnProgress
>14354	Identifier	pfnProgress
>14355	Identifier	psJob
>14356	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>14357	CompoundStatement	 
>14358	ForStatement	for ( iBand = 0 ; iBand < poWK -> nBands ; iBand ++ )
>14359	CompoundStatement	 
>14360	ExpressionStatement	 
>14361	AssignmentExpr	poWK -> papabyDstImage [ iBand ] [ iDstOffset ] = poWK -> papabySrcImage [ iBand ] [ iSrcOffset ]
>14362	ArrayIndexing	poWK -> papabySrcImage [ iBand ] [ iSrcOffset ]
>14363	Identifier	iSrcOffset
>14364	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>14365	Identifier	iBand
>14366	PtrMemberAccess	poWK -> papabySrcImage
>14367	Identifier	papabySrcImage
>14368	Identifier	poWK
>14369	ArrayIndexing	poWK -> papabyDstImage [ iBand ] [ iDstOffset ]
>14370	Identifier	iDstOffset
>14371	ArrayIndexing	poWK -> papabyDstImage [ iBand ]
>14372	Identifier	iBand
>14373	PtrMemberAccess	poWK -> papabyDstImage
>14374	Identifier	papabyDstImage
>14375	Identifier	poWK
>14376	IncDecOp	 
>14377	IncDec	++
>14378	Identifier	iBand
>14379	Condition	 
>14380	RelationalExpression	iBand < poWK -> nBands
>14381	PtrMemberAccess	poWK -> nBands
>14382	Identifier	nBands
>14383	Identifier	poWK
>14384	Identifier	iBand
>14385	ForInit	 
>14386	AssignmentExpr	iBand = 0
>14387	PrimaryExpression	0
>14388	Identifier	iBand
>14389	ExpressionStatement	 
>14390	AssignmentExpr	iDstOffset = iDstX + iDstY * nDstXSize
>14391	AdditiveExpression	iDstX + iDstY * nDstXSize
>14392	MultiplicativeExpression	iDstY * nDstXSize
>14393	Identifier	nDstXSize
>14394	Identifier	iDstY
>14395	Identifier	iDstX
>14396	Identifier	iDstOffset
>14397	IdentifierDeclStatement	 
>14398	IdentifierDecl	iDstOffset
>14399	Identifier	iDstOffset
>14400	IdentifierDeclType	int
>14401	IdentifierDeclStatement	 
>14402	IdentifierDecl	iBand
>14403	Identifier	iBand
>14404	IdentifierDeclType	int
>14405	ExpressionStatement	 
>14406	CallExpression	COMPUTE_iSrcOffset ( pabSuccess , iDstX , padfX , padfY , poWK , nSrcXSize , nSrcYSize )
>14407	ArgumentList	pabSuccess
>14408	Argument	nSrcYSize
>14409	Identifier	nSrcYSize
>14410	Argument	nSrcXSize
>14411	Identifier	nSrcXSize
>14412	Argument	poWK
>14413	Identifier	poWK
>14414	Argument	padfY
>14415	Identifier	padfY
>14416	Argument	padfX
>14417	Identifier	padfX
>14418	Argument	iDstX
>14419	Identifier	iDstX
>14420	Argument	pabSuccess
>14421	Identifier	pabSuccess
>14422	Callee	COMPUTE_iSrcOffset
>14423	Identifier	COMPUTE_iSrcOffset
>14424	IncDecOp	 
>14425	IncDec	++
>14426	Identifier	iDstX
>14427	Condition	 
>14428	RelationalExpression	iDstX < nDstXSize
>14429	Identifier	nDstXSize
>14430	Identifier	iDstX
>14431	ForInit	 
>14432	AssignmentExpr	iDstX = 0
>14433	PrimaryExpression	0
>14434	Identifier	iDstX
>14435	ExpressionStatement	 
>14436	CallExpression	poWK -> pfnTransformer ( psJob -> pTransformerArg , TRUE , nDstXSize , padfX , padfY , padfZ , pabSuccess )
>14437	ArgumentList	psJob -> pTransformerArg
>14438	Argument	pabSuccess
>14439	Identifier	pabSuccess
>14440	Argument	padfZ
>14441	Identifier	padfZ
>14442	Argument	padfY
>14443	Identifier	padfY
>14444	Argument	padfX
>14445	Identifier	padfX
>14446	Argument	nDstXSize
>14447	Identifier	nDstXSize
>14448	Argument	TRUE
>14449	Identifier	TRUE
>14450	Argument	psJob -> pTransformerArg
>14451	PtrMemberAccess	psJob -> pTransformerArg
>14452	Identifier	pTransformerArg
>14453	Identifier	psJob
>14454	Callee	poWK -> pfnTransformer
>14455	PtrMemberAccess	poWK -> pfnTransformer
>14456	Identifier	pfnTransformer
>14457	Identifier	poWK
>14458	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>14459	CompoundStatement	 
>14460	ExpressionStatement	 
>14461	AssignmentExpr	padfZ [ iDstX ] = 0.0
>14462	PrimaryExpression	0.0
>14463	ArrayIndexing	padfZ [ iDstX ]
>14464	Identifier	iDstX
>14465	Identifier	padfZ
>14466	ExpressionStatement	 
>14467	AssignmentExpr	padfY [ iDstX ] = iDstY + 0.5 + poWK -> nDstYOff
>14468	AdditiveExpression	iDstY + 0.5 + poWK -> nDstYOff
>14469	AdditiveExpression	0.5 + poWK -> nDstYOff
>14470	PtrMemberAccess	poWK -> nDstYOff
>14471	Identifier	nDstYOff
>14472	Identifier	poWK
>14473	PrimaryExpression	0.5
>14474	Identifier	iDstY
>14475	ArrayIndexing	padfY [ iDstX ]
>14476	Identifier	iDstX
>14477	Identifier	padfY
>14478	ExpressionStatement	 
>14479	AssignmentExpr	padfX [ iDstX ] = iDstX + 0.5 + poWK -> nDstXOff
>14480	AdditiveExpression	iDstX + 0.5 + poWK -> nDstXOff
>14481	AdditiveExpression	0.5 + poWK -> nDstXOff
>14482	PtrMemberAccess	poWK -> nDstXOff
>14483	Identifier	nDstXOff
>14484	Identifier	poWK
>14485	PrimaryExpression	0.5
>14486	Identifier	iDstX
>14487	ArrayIndexing	padfX [ iDstX ]
>14488	Identifier	iDstX
>14489	Identifier	padfX
>14490	IncDecOp	 
>14491	IncDec	++
>14492	Identifier	iDstX
>14493	Condition	 
>14494	RelationalExpression	iDstX < nDstXSize
>14495	Identifier	nDstXSize
>14496	Identifier	iDstX
>14497	ForInit	 
>14498	AssignmentExpr	iDstX = 0
>14499	PrimaryExpression	0
>14500	Identifier	iDstX
>14501	IdentifierDeclStatement	 
>14502	IdentifierDecl	iDstX
>14503	Identifier	iDstX
>14504	IdentifierDeclType	int
>14505	IncDecOp	 
>14506	IncDec	++
>14507	Identifier	iDstY
>14508	Condition	 
>14509	RelationalExpression	iDstY < iYMax
>14510	Identifier	iYMax
>14511	Identifier	iDstY
>14512	ForInit	 
>14513	AssignmentExpr	iDstY = iYMin
>14514	Identifier	iYMin
>14515	Identifier	iDstY
>14516	ExpressionStatement	 
>14517	AssignmentExpr	pabSuccess = ( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>14518	CastExpression	( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>14519	CallExpression	CPLMalloc ( sizeof ( int ) * nDstXSize )
>14520	ArgumentList	sizeof ( int ) * nDstXSize
>14521	Argument	sizeof ( int ) * nDstXSize
>14522	MultiplicativeExpression	sizeof ( int ) * nDstXSize
>14523	Identifier	nDstXSize
>14524	SizeofExpr	sizeof ( int )
>14525	SizeofOperand	int
>14526	Sizeof	sizeof
>14527	Callee	CPLMalloc
>14528	Identifier	CPLMalloc
>14529	CastTarget	int *
>14530	Identifier	pabSuccess
>14531	ExpressionStatement	 
>14532	AssignmentExpr	padfZ = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>14533	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>14534	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>14535	ArgumentList	sizeof ( double ) * nDstXSize
>14536	Argument	sizeof ( double ) * nDstXSize
>14537	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>14538	Identifier	nDstXSize
>14539	SizeofExpr	sizeof ( double )
>14540	SizeofOperand	double
>14541	Sizeof	sizeof
>14542	Callee	CPLMalloc
>14543	Identifier	CPLMalloc
>14544	CastTarget	double *
>14545	Identifier	padfZ
>14546	ExpressionStatement	 
>14547	AssignmentExpr	padfY = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>14548	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>14549	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>14550	ArgumentList	sizeof ( double ) * nDstXSize
>14551	Argument	sizeof ( double ) * nDstXSize
>14552	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>14553	Identifier	nDstXSize
>14554	SizeofExpr	sizeof ( double )
>14555	SizeofOperand	double
>14556	Sizeof	sizeof
>14557	Callee	CPLMalloc
>14558	Identifier	CPLMalloc
>14559	CastTarget	double *
>14560	Identifier	padfY
>14561	ExpressionStatement	 
>14562	AssignmentExpr	padfX = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>14563	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>14564	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>14565	ArgumentList	sizeof ( double ) * nDstXSize
>14566	Argument	sizeof ( double ) * nDstXSize
>14567	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>14568	Identifier	nDstXSize
>14569	SizeofExpr	sizeof ( double )
>14570	SizeofOperand	double
>14571	Sizeof	sizeof
>14572	Callee	CPLMalloc
>14573	Identifier	CPLMalloc
>14574	CastTarget	double *
>14575	Identifier	padfX
>14576	IdentifierDeclStatement	 
>14577	IdentifierDecl	* pabSuccess
>14578	Identifier	pabSuccess
>14579	IdentifierDeclType	int *
>14580	IdentifierDeclStatement	 
>14581	IdentifierDecl	* padfZ
>14582	Identifier	padfZ
>14583	IdentifierDeclType	double *
>14584	IdentifierDecl	* padfY
>14585	Identifier	padfY
>14586	IdentifierDeclType	double *
>14587	IdentifierDecl	* padfX
>14588	Identifier	padfX
>14589	IdentifierDeclType	double *
>14590	IdentifierDeclStatement	 
>14591	IdentifierDecl	nSrcYSize = poWK -> nSrcYSize
>14592	AssignmentExpr	nSrcYSize = poWK -> nSrcYSize
>14593	PtrMemberAccess	poWK -> nSrcYSize
>14594	Identifier	nSrcYSize
>14595	Identifier	poWK
>14596	Identifier	nSrcYSize
>14597	Identifier	nSrcYSize
>14598	IdentifierDeclType	int
>14599	IdentifierDecl	nSrcXSize = poWK -> nSrcXSize
>14600	AssignmentExpr	nSrcXSize = poWK -> nSrcXSize
>14601	PtrMemberAccess	poWK -> nSrcXSize
>14602	Identifier	nSrcXSize
>14603	Identifier	poWK
>14604	Identifier	nSrcXSize
>14605	Identifier	nSrcXSize
>14606	IdentifierDeclType	int
>14607	IdentifierDeclStatement	 
>14608	IdentifierDecl	nDstXSize = poWK -> nDstXSize
>14609	AssignmentExpr	nDstXSize = poWK -> nDstXSize
>14610	PtrMemberAccess	poWK -> nDstXSize
>14611	Identifier	nDstXSize
>14612	Identifier	poWK
>14613	Identifier	nDstXSize
>14614	Identifier	nDstXSize
>14615	IdentifierDeclType	int
>14616	IdentifierDeclStatement	 
>14617	IdentifierDecl	iDstY
>14618	Identifier	iDstY
>14619	IdentifierDeclType	int
>14620	IdentifierDeclStatement	 
>14621	IdentifierDecl	iYMax = psJob -> iYMax
>14622	AssignmentExpr	iYMax = psJob -> iYMax
>14623	PtrMemberAccess	psJob -> iYMax
>14624	Identifier	iYMax
>14625	Identifier	psJob
>14626	Identifier	iYMax
>14627	Identifier	iYMax
>14628	IdentifierDeclType	int
>14629	IdentifierDeclStatement	 
>14630	IdentifierDecl	iYMin = psJob -> iYMin
>14631	AssignmentExpr	iYMin = psJob -> iYMin
>14632	PtrMemberAccess	psJob -> iYMin
>14633	Identifier	iYMin
>14634	Identifier	psJob
>14635	Identifier	iYMin
>14636	Identifier	iYMin
>14637	IdentifierDeclType	int
>14638	IdentifierDeclStatement	 
>14639	IdentifierDecl	* poWK = psJob -> poWK
>14640	AssignmentExpr	* poWK = psJob -> poWK
>14641	PtrMemberAccess	psJob -> poWK
>14642	Identifier	poWK
>14643	Identifier	psJob
>14644	Identifier	poWK
>14645	Identifier	poWK
>14646	IdentifierDeclType	GDALWarpKernel *
>14647	IdentifierDeclStatement	 
>14648	IdentifierDecl	* psJob = ( GWKJobStruct * ) pData
>14649	AssignmentExpr	* psJob = ( GWKJobStruct * ) pData
>14650	CastExpression	( GWKJobStruct * ) pData
>14651	Identifier	pData
>14652	CastTarget	GWKJobStruct *
>14653	Identifier	psJob
>14654	Identifier	psJob
>14655	IdentifierDeclType	GWKJobStruct *
>14709	FunctionDef	GWKBilinearNoMasksByte (GDALWarpKernel * poWK)
>14710	ParameterList	GDALWarpKernel * poWK
>14711	Parameter	 
>14712	Identifier	poWK
>14713	ParameterType	GDALWarpKernel *
>14714	ReturnType	static CPLErr
>14715	CompoundStatement	 
>14716	ReturnStatement	 
>14717	CallExpression	GWKRun ( poWK , \"GWKBilinearNoMasksByte\" , GWKBilinearNoMasksByteThread )
>14718	ArgumentList	poWK
>14719	Argument	GWKBilinearNoMasksByteThread
>14720	Identifier	GWKBilinearNoMasksByteThread
>14721	Argument	\"GWKBilinearNoMasksByte\"
>14722	PrimaryExpression	\"GWKBilinearNoMasksByte\"
>14723	Argument	poWK
>14724	Identifier	poWK
>14725	Callee	GWKRun
>14726	Identifier	GWKRun
>14733	FunctionDef	GWKBilinearNoMasksByteThread (void * pData)
>14734	ParameterList	void * pData
>14735	Parameter	 
>14736	Identifier	pData
>14737	ParameterType	void *
>14738	ReturnType	static void
>14739	CompoundStatement	 
>14740	ExpressionStatement	 
>14741	CallExpression	CPLFree ( pabSuccess )
>14742	ArgumentList	pabSuccess
>14743	Argument	pabSuccess
>14744	Identifier	pabSuccess
>14745	Callee	CPLFree
>14746	Identifier	CPLFree
>14747	ExpressionStatement	 
>14748	CallExpression	CPLFree ( padfZ )
>14749	ArgumentList	padfZ
>14750	Argument	padfZ
>14751	Identifier	padfZ
>14752	Callee	CPLFree
>14753	Identifier	CPLFree
>14754	ExpressionStatement	 
>14755	CallExpression	CPLFree ( padfY )
>14756	ArgumentList	padfY
>14757	Argument	padfY
>14758	Identifier	padfY
>14759	Callee	CPLFree
>14760	Identifier	CPLFree
>14761	ExpressionStatement	 
>14762	CallExpression	CPLFree ( padfX )
>14763	ArgumentList	padfX
>14764	Argument	padfX
>14765	Identifier	padfX
>14766	Callee	CPLFree
>14767	Identifier	CPLFree
>14768	ForStatement	for ( iDstY = iYMin ; iDstY < iYMax ; iDstY ++ )
>14769	CompoundStatement	 
>14770	IfStatement	if ( psJob -> pfnProgress ( psJob ) )
>14771	BreakStatement	 
>14772	Condition	 
>14773	CallExpression	psJob -> pfnProgress ( psJob )
>14774	ArgumentList	psJob
>14775	Argument	psJob
>14776	Identifier	psJob
>14777	Callee	psJob -> pfnProgress
>14778	PtrMemberAccess	psJob -> pfnProgress
>14779	Identifier	pfnProgress
>14780	Identifier	psJob
>14781	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>14782	CompoundStatement	 
>14783	ForStatement	for ( iBand = 0 ; iBand < poWK -> nBands ; iBand ++ )
>14784	CompoundStatement	 
>14785	ExpressionStatement	 
>14786	CallExpression	GWKBilinearResampleNoMasksByte ( poWK , iBand , padfX [ iDstX ] - poWK -> nSrcXOff , padfY [ iDstX ] - poWK -> nSrcYOff , & \
>14787	ArgumentList	poWK
>14788	Argument	& poWK -> papabyDstImage [ iBand ] [ iDstOffset ]
>14789	UnaryOp	& poWK -> papabyDstImage [ iBand ] [ iDstOffset ]
>14790	ArrayIndexing	poWK -> papabyDstImage [ iBand ] [ iDstOffset ]
>14791	Identifier	iDstOffset
>14792	ArrayIndexing	poWK -> papabyDstImage [ iBand ]
>14793	Identifier	iBand
>14794	PtrMemberAccess	poWK -> papabyDstImage
>14795	Identifier	papabyDstImage
>14796	Identifier	poWK
>14797	UnaryOperator	&
>14798	Argument	padfY [ iDstX ] - poWK -> nSrcYOff
>14799	AdditiveExpression	padfY [ iDstX ] - poWK -> nSrcYOff
>14800	PtrMemberAccess	poWK -> nSrcYOff
>14801	Identifier	nSrcYOff
>14802	Identifier	poWK
>14803	ArrayIndexing	padfY [ iDstX ]
>14804	Identifier	iDstX
>14805	Identifier	padfY
>14806	Argument	padfX [ iDstX ] - poWK -> nSrcXOff
>14807	AdditiveExpression	padfX [ iDstX ] - poWK -> nSrcXOff
>14808	PtrMemberAccess	poWK -> nSrcXOff
>14809	Identifier	nSrcXOff
>14810	Identifier	poWK
>14811	ArrayIndexing	padfX [ iDstX ]
>14812	Identifier	iDstX
>14813	Identifier	padfX
>14814	Argument	iBand
>14815	Identifier	iBand
>14816	Argument	poWK
>14817	Identifier	poWK
>14818	Callee	GWKBilinearResampleNoMasksByte
>14819	Identifier	GWKBilinearResampleNoMasksByte
>14820	IncDecOp	 
>14821	IncDec	++
>14822	Identifier	iBand
>14823	Condition	 
>14824	RelationalExpression	iBand < poWK -> nBands
>14825	PtrMemberAccess	poWK -> nBands
>14826	Identifier	nBands
>14827	Identifier	poWK
>14828	Identifier	iBand
>14829	ForInit	 
>14830	AssignmentExpr	iBand = 0
>14831	PrimaryExpression	0
>14832	Identifier	iBand
>14833	ExpressionStatement	 
>14834	AssignmentExpr	iDstOffset = iDstX + iDstY * nDstXSize
>14835	AdditiveExpression	iDstX + iDstY * nDstXSize
>14836	MultiplicativeExpression	iDstY * nDstXSize
>14837	Identifier	nDstXSize
>14838	Identifier	iDstY
>14839	Identifier	iDstX
>14840	Identifier	iDstOffset
>14841	IdentifierDeclStatement	 
>14842	IdentifierDecl	iDstOffset
>14843	Identifier	iDstOffset
>14844	IdentifierDeclType	int
>14845	IdentifierDeclStatement	 
>14846	IdentifierDecl	iBand
>14847	Identifier	iBand
>14848	IdentifierDeclType	int
>14849	ExpressionStatement	 
>14850	CallExpression	COMPUTE_iSrcOffset ( pabSuccess , iDstX , padfX , padfY , poWK , nSrcXSize , nSrcYSize )
>14851	ArgumentList	pabSuccess
>14852	Argument	nSrcYSize
>14853	Identifier	nSrcYSize
>14854	Argument	nSrcXSize
>14855	Identifier	nSrcXSize
>14856	Argument	poWK
>14857	Identifier	poWK
>14858	Argument	padfY
>14859	Identifier	padfY
>14860	Argument	padfX
>14861	Identifier	padfX
>14862	Argument	iDstX
>14863	Identifier	iDstX
>14864	Argument	pabSuccess
>14865	Identifier	pabSuccess
>14866	Callee	COMPUTE_iSrcOffset
>14867	Identifier	COMPUTE_iSrcOffset
>14868	IncDecOp	 
>14869	IncDec	++
>14870	Identifier	iDstX
>14871	Condition	 
>14872	RelationalExpression	iDstX < nDstXSize
>14873	Identifier	nDstXSize
>14874	Identifier	iDstX
>14875	ForInit	 
>14876	AssignmentExpr	iDstX = 0
>14877	PrimaryExpression	0
>14878	Identifier	iDstX
>14879	ExpressionStatement	 
>14880	CallExpression	poWK -> pfnTransformer ( psJob -> pTransformerArg , TRUE , nDstXSize , padfX , padfY , padfZ , pabSuccess )
>14881	ArgumentList	psJob -> pTransformerArg
>14882	Argument	pabSuccess
>14883	Identifier	pabSuccess
>14884	Argument	padfZ
>14885	Identifier	padfZ
>14886	Argument	padfY
>14887	Identifier	padfY
>14888	Argument	padfX
>14889	Identifier	padfX
>14890	Argument	nDstXSize
>14891	Identifier	nDstXSize
>14892	Argument	TRUE
>14893	Identifier	TRUE
>14894	Argument	psJob -> pTransformerArg
>14895	PtrMemberAccess	psJob -> pTransformerArg
>14896	Identifier	pTransformerArg
>14897	Identifier	psJob
>14898	Callee	poWK -> pfnTransformer
>14899	PtrMemberAccess	poWK -> pfnTransformer
>14900	Identifier	pfnTransformer
>14901	Identifier	poWK
>14902	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>14903	CompoundStatement	 
>14904	ExpressionStatement	 
>14905	AssignmentExpr	padfZ [ iDstX ] = 0.0
>14906	PrimaryExpression	0.0
>14907	ArrayIndexing	padfZ [ iDstX ]
>14908	Identifier	iDstX
>14909	Identifier	padfZ
>14910	ExpressionStatement	 
>14911	AssignmentExpr	padfY [ iDstX ] = iDstY + 0.5 + poWK -> nDstYOff
>14912	AdditiveExpression	iDstY + 0.5 + poWK -> nDstYOff
>14913	AdditiveExpression	0.5 + poWK -> nDstYOff
>14914	PtrMemberAccess	poWK -> nDstYOff
>14915	Identifier	nDstYOff
>14916	Identifier	poWK
>14917	PrimaryExpression	0.5
>14918	Identifier	iDstY
>14919	ArrayIndexing	padfY [ iDstX ]
>14920	Identifier	iDstX
>14921	Identifier	padfY
>14922	ExpressionStatement	 
>14923	AssignmentExpr	padfX [ iDstX ] = iDstX + 0.5 + poWK -> nDstXOff
>14924	AdditiveExpression	iDstX + 0.5 + poWK -> nDstXOff
>14925	AdditiveExpression	0.5 + poWK -> nDstXOff
>14926	PtrMemberAccess	poWK -> nDstXOff
>14927	Identifier	nDstXOff
>14928	Identifier	poWK
>14929	PrimaryExpression	0.5
>14930	Identifier	iDstX
>14931	ArrayIndexing	padfX [ iDstX ]
>14932	Identifier	iDstX
>14933	Identifier	padfX
>14934	IncDecOp	 
>14935	IncDec	++
>14936	Identifier	iDstX
>14937	Condition	 
>14938	RelationalExpression	iDstX < nDstXSize
>14939	Identifier	nDstXSize
>14940	Identifier	iDstX
>14941	ForInit	 
>14942	AssignmentExpr	iDstX = 0
>14943	PrimaryExpression	0
>14944	Identifier	iDstX
>14945	IdentifierDeclStatement	 
>14946	IdentifierDecl	iDstX
>14947	Identifier	iDstX
>14948	IdentifierDeclType	int
>14949	IncDecOp	 
>14950	IncDec	++
>14951	Identifier	iDstY
>14952	Condition	 
>14953	RelationalExpression	iDstY < iYMax
>14954	Identifier	iYMax
>14955	Identifier	iDstY
>14956	ForInit	 
>14957	AssignmentExpr	iDstY = iYMin
>14958	Identifier	iYMin
>14959	Identifier	iDstY
>14960	ExpressionStatement	 
>14961	AssignmentExpr	pabSuccess = ( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>14962	CastExpression	( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>14963	CallExpression	CPLMalloc ( sizeof ( int ) * nDstXSize )
>14964	ArgumentList	sizeof ( int ) * nDstXSize
>14965	Argument	sizeof ( int ) * nDstXSize
>14966	MultiplicativeExpression	sizeof ( int ) * nDstXSize
>14967	Identifier	nDstXSize
>14968	SizeofExpr	sizeof ( int )
>14969	SizeofOperand	int
>14970	Sizeof	sizeof
>14971	Callee	CPLMalloc
>14972	Identifier	CPLMalloc
>14973	CastTarget	int *
>14974	Identifier	pabSuccess
>14975	ExpressionStatement	 
>14976	AssignmentExpr	padfZ = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>14977	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>14978	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>14979	ArgumentList	sizeof ( double ) * nDstXSize
>14980	Argument	sizeof ( double ) * nDstXSize
>14981	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>14982	Identifier	nDstXSize
>14983	SizeofExpr	sizeof ( double )
>14984	SizeofOperand	double
>14985	Sizeof	sizeof
>14986	Callee	CPLMalloc
>14987	Identifier	CPLMalloc
>14988	CastTarget	double *
>14989	Identifier	padfZ
>14990	ExpressionStatement	 
>14991	AssignmentExpr	padfY = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>14992	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>14993	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>14994	ArgumentList	sizeof ( double ) * nDstXSize
>14995	Argument	sizeof ( double ) * nDstXSize
>14996	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>14997	Identifier	nDstXSize
>14998	SizeofExpr	sizeof ( double )
>14999	SizeofOperand	double
>15000	Sizeof	sizeof
>15001	Callee	CPLMalloc
>15002	Identifier	CPLMalloc
>15003	CastTarget	double *
>15004	Identifier	padfY
>15005	ExpressionStatement	 
>15006	AssignmentExpr	padfX = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>15007	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>15008	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>15009	ArgumentList	sizeof ( double ) * nDstXSize
>15010	Argument	sizeof ( double ) * nDstXSize
>15011	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>15012	Identifier	nDstXSize
>15013	SizeofExpr	sizeof ( double )
>15014	SizeofOperand	double
>15015	Sizeof	sizeof
>15016	Callee	CPLMalloc
>15017	Identifier	CPLMalloc
>15018	CastTarget	double *
>15019	Identifier	padfX
>15020	IdentifierDeclStatement	 
>15021	IdentifierDecl	* pabSuccess
>15022	Identifier	pabSuccess
>15023	IdentifierDeclType	int *
>15024	IdentifierDeclStatement	 
>15025	IdentifierDecl	* padfZ
>15026	Identifier	padfZ
>15027	IdentifierDeclType	double *
>15028	IdentifierDecl	* padfY
>15029	Identifier	padfY
>15030	IdentifierDeclType	double *
>15031	IdentifierDecl	* padfX
>15032	Identifier	padfX
>15033	IdentifierDeclType	double *
>15034	IdentifierDeclStatement	 
>15035	IdentifierDecl	nSrcYSize = poWK -> nSrcYSize
>15036	AssignmentExpr	nSrcYSize = poWK -> nSrcYSize
>15037	PtrMemberAccess	poWK -> nSrcYSize
>15038	Identifier	nSrcYSize
>15039	Identifier	poWK
>15040	Identifier	nSrcYSize
>15041	Identifier	nSrcYSize
>15042	IdentifierDeclType	int
>15043	IdentifierDecl	nSrcXSize = poWK -> nSrcXSize
>15044	AssignmentExpr	nSrcXSize = poWK -> nSrcXSize
>15045	PtrMemberAccess	poWK -> nSrcXSize
>15046	Identifier	nSrcXSize
>15047	Identifier	poWK
>15048	Identifier	nSrcXSize
>15049	Identifier	nSrcXSize
>15050	IdentifierDeclType	int
>15051	IdentifierDeclStatement	 
>15052	IdentifierDecl	nDstXSize = poWK -> nDstXSize
>15053	AssignmentExpr	nDstXSize = poWK -> nDstXSize
>15054	PtrMemberAccess	poWK -> nDstXSize
>15055	Identifier	nDstXSize
>15056	Identifier	poWK
>15057	Identifier	nDstXSize
>15058	Identifier	nDstXSize
>15059	IdentifierDeclType	int
>15060	IdentifierDeclStatement	 
>15061	IdentifierDecl	iDstY
>15062	Identifier	iDstY
>15063	IdentifierDeclType	int
>15064	IdentifierDeclStatement	 
>15065	IdentifierDecl	iYMax = psJob -> iYMax
>15066	AssignmentExpr	iYMax = psJob -> iYMax
>15067	PtrMemberAccess	psJob -> iYMax
>15068	Identifier	iYMax
>15069	Identifier	psJob
>15070	Identifier	iYMax
>15071	Identifier	iYMax
>15072	IdentifierDeclType	int
>15073	IdentifierDeclStatement	 
>15074	IdentifierDecl	iYMin = psJob -> iYMin
>15075	AssignmentExpr	iYMin = psJob -> iYMin
>15076	PtrMemberAccess	psJob -> iYMin
>15077	Identifier	iYMin
>15078	Identifier	psJob
>15079	Identifier	iYMin
>15080	Identifier	iYMin
>15081	IdentifierDeclType	int
>15082	IdentifierDeclStatement	 
>15083	IdentifierDecl	* poWK = psJob -> poWK
>15084	AssignmentExpr	* poWK = psJob -> poWK
>15085	PtrMemberAccess	psJob -> poWK
>15086	Identifier	poWK
>15087	Identifier	psJob
>15088	Identifier	poWK
>15089	Identifier	poWK
>15090	IdentifierDeclType	GDALWarpKernel *
>15091	IdentifierDeclStatement	 
>15092	IdentifierDecl	* psJob = ( GWKJobStruct * ) pData
>15093	AssignmentExpr	* psJob = ( GWKJobStruct * ) pData
>15094	CastExpression	( GWKJobStruct * ) pData
>15095	Identifier	pData
>15096	CastTarget	GWKJobStruct *
>15097	Identifier	psJob
>15098	Identifier	psJob
>15099	IdentifierDeclType	GWKJobStruct *
>15150	FunctionDef	GWKCubicNoMasksByte (GDALWarpKernel * poWK)
>15151	ParameterList	GDALWarpKernel * poWK
>15152	Parameter	 
>15153	Identifier	poWK
>15154	ParameterType	GDALWarpKernel *
>15155	ReturnType	static CPLErr
>15156	CompoundStatement	 
>15157	ReturnStatement	 
>15158	CallExpression	GWKRun ( poWK , \"GWKCubicNoMasksByte\" , GWKCubicNoMasksByteThread )
>15159	ArgumentList	poWK
>15160	Argument	GWKCubicNoMasksByteThread
>15161	Identifier	GWKCubicNoMasksByteThread
>15162	Argument	\"GWKCubicNoMasksByte\"
>15163	PrimaryExpression	\"GWKCubicNoMasksByte\"
>15164	Argument	poWK
>15165	Identifier	poWK
>15166	Callee	GWKRun
>15167	Identifier	GWKRun
>15174	FunctionDef	GWKCubicNoMasksByteThread (void * pData)
>15175	ParameterList	void * pData
>15176	Parameter	 
>15177	Identifier	pData
>15178	ParameterType	void *
>15179	ReturnType	static void
>15180	CompoundStatement	 
>15181	ExpressionStatement	 
>15182	CallExpression	CPLFree ( pabSuccess )
>15183	ArgumentList	pabSuccess
>15184	Argument	pabSuccess
>15185	Identifier	pabSuccess
>15186	Callee	CPLFree
>15187	Identifier	CPLFree
>15188	ExpressionStatement	 
>15189	CallExpression	CPLFree ( padfZ )
>15190	ArgumentList	padfZ
>15191	Argument	padfZ
>15192	Identifier	padfZ
>15193	Callee	CPLFree
>15194	Identifier	CPLFree
>15195	ExpressionStatement	 
>15196	CallExpression	CPLFree ( padfY )
>15197	ArgumentList	padfY
>15198	Argument	padfY
>15199	Identifier	padfY
>15200	Callee	CPLFree
>15201	Identifier	CPLFree
>15202	ExpressionStatement	 
>15203	CallExpression	CPLFree ( padfX )
>15204	ArgumentList	padfX
>15205	Argument	padfX
>15206	Identifier	padfX
>15207	Callee	CPLFree
>15208	Identifier	CPLFree
>15209	ForStatement	for ( iDstY = iYMin ; iDstY < iYMax ; iDstY ++ )
>15210	CompoundStatement	 
>15211	IfStatement	if ( psJob -> pfnProgress ( psJob ) )
>15212	BreakStatement	 
>15213	Condition	 
>15214	CallExpression	psJob -> pfnProgress ( psJob )
>15215	ArgumentList	psJob
>15216	Argument	psJob
>15217	Identifier	psJob
>15218	Callee	psJob -> pfnProgress
>15219	PtrMemberAccess	psJob -> pfnProgress
>15220	Identifier	pfnProgress
>15221	Identifier	psJob
>15222	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>15223	CompoundStatement	 
>15224	ForStatement	for ( iBand = 0 ; iBand < poWK -> nBands ; iBand ++ )
>15225	CompoundStatement	 
>15226	ExpressionStatement	 
>15227	CallExpression	GWKCubicResampleNoMasksByte ( poWK , iBand , padfX [ iDstX ] - poWK -> nSrcXOff , padfY [ iDstX ] - poWK -> nSrcYOff , & \
>15228	ArgumentList	poWK
>15229	Argument	& poWK -> papabyDstImage [ iBand ] [ iDstOffset ]
>15230	UnaryOp	& poWK -> papabyDstImage [ iBand ] [ iDstOffset ]
>15231	ArrayIndexing	poWK -> papabyDstImage [ iBand ] [ iDstOffset ]
>15232	Identifier	iDstOffset
>15233	ArrayIndexing	poWK -> papabyDstImage [ iBand ]
>15234	Identifier	iBand
>15235	PtrMemberAccess	poWK -> papabyDstImage
>15236	Identifier	papabyDstImage
>15237	Identifier	poWK
>15238	UnaryOperator	&
>15239	Argument	padfY [ iDstX ] - poWK -> nSrcYOff
>15240	AdditiveExpression	padfY [ iDstX ] - poWK -> nSrcYOff
>15241	PtrMemberAccess	poWK -> nSrcYOff
>15242	Identifier	nSrcYOff
>15243	Identifier	poWK
>15244	ArrayIndexing	padfY [ iDstX ]
>15245	Identifier	iDstX
>15246	Identifier	padfY
>15247	Argument	padfX [ iDstX ] - poWK -> nSrcXOff
>15248	AdditiveExpression	padfX [ iDstX ] - poWK -> nSrcXOff
>15249	PtrMemberAccess	poWK -> nSrcXOff
>15250	Identifier	nSrcXOff
>15251	Identifier	poWK
>15252	ArrayIndexing	padfX [ iDstX ]
>15253	Identifier	iDstX
>15254	Identifier	padfX
>15255	Argument	iBand
>15256	Identifier	iBand
>15257	Argument	poWK
>15258	Identifier	poWK
>15259	Callee	GWKCubicResampleNoMasksByte
>15260	Identifier	GWKCubicResampleNoMasksByte
>15261	IncDecOp	 
>15262	IncDec	++
>15263	Identifier	iBand
>15264	Condition	 
>15265	RelationalExpression	iBand < poWK -> nBands
>15266	PtrMemberAccess	poWK -> nBands
>15267	Identifier	nBands
>15268	Identifier	poWK
>15269	Identifier	iBand
>15270	ForInit	 
>15271	AssignmentExpr	iBand = 0
>15272	PrimaryExpression	0
>15273	Identifier	iBand
>15274	ExpressionStatement	 
>15275	AssignmentExpr	iDstOffset = iDstX + iDstY * nDstXSize
>15276	AdditiveExpression	iDstX + iDstY * nDstXSize
>15277	MultiplicativeExpression	iDstY * nDstXSize
>15278	Identifier	nDstXSize
>15279	Identifier	iDstY
>15280	Identifier	iDstX
>15281	Identifier	iDstOffset
>15282	IdentifierDeclStatement	 
>15283	IdentifierDecl	iDstOffset
>15284	Identifier	iDstOffset
>15285	IdentifierDeclType	int
>15286	IdentifierDeclStatement	 
>15287	IdentifierDecl	iBand
>15288	Identifier	iBand
>15289	IdentifierDeclType	int
>15290	ExpressionStatement	 
>15291	CallExpression	COMPUTE_iSrcOffset ( pabSuccess , iDstX , padfX , padfY , poWK , nSrcXSize , nSrcYSize )
>15292	ArgumentList	pabSuccess
>15293	Argument	nSrcYSize
>15294	Identifier	nSrcYSize
>15295	Argument	nSrcXSize
>15296	Identifier	nSrcXSize
>15297	Argument	poWK
>15298	Identifier	poWK
>15299	Argument	padfY
>15300	Identifier	padfY
>15301	Argument	padfX
>15302	Identifier	padfX
>15303	Argument	iDstX
>15304	Identifier	iDstX
>15305	Argument	pabSuccess
>15306	Identifier	pabSuccess
>15307	Callee	COMPUTE_iSrcOffset
>15308	Identifier	COMPUTE_iSrcOffset
>15309	IncDecOp	 
>15310	IncDec	++
>15311	Identifier	iDstX
>15312	Condition	 
>15313	RelationalExpression	iDstX < nDstXSize
>15314	Identifier	nDstXSize
>15315	Identifier	iDstX
>15316	ForInit	 
>15317	AssignmentExpr	iDstX = 0
>15318	PrimaryExpression	0
>15319	Identifier	iDstX
>15320	ExpressionStatement	 
>15321	CallExpression	poWK -> pfnTransformer ( psJob -> pTransformerArg , TRUE , nDstXSize , padfX , padfY , padfZ , pabSuccess )
>15322	ArgumentList	psJob -> pTransformerArg
>15323	Argument	pabSuccess
>15324	Identifier	pabSuccess
>15325	Argument	padfZ
>15326	Identifier	padfZ
>15327	Argument	padfY
>15328	Identifier	padfY
>15329	Argument	padfX
>15330	Identifier	padfX
>15331	Argument	nDstXSize
>15332	Identifier	nDstXSize
>15333	Argument	TRUE
>15334	Identifier	TRUE
>15335	Argument	psJob -> pTransformerArg
>15336	PtrMemberAccess	psJob -> pTransformerArg
>15337	Identifier	pTransformerArg
>15338	Identifier	psJob
>15339	Callee	poWK -> pfnTransformer
>15340	PtrMemberAccess	poWK -> pfnTransformer
>15341	Identifier	pfnTransformer
>15342	Identifier	poWK
>15343	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>15344	CompoundStatement	 
>15345	ExpressionStatement	 
>15346	AssignmentExpr	padfZ [ iDstX ] = 0.0
>15347	PrimaryExpression	0.0
>15348	ArrayIndexing	padfZ [ iDstX ]
>15349	Identifier	iDstX
>15350	Identifier	padfZ
>15351	ExpressionStatement	 
>15352	AssignmentExpr	padfY [ iDstX ] = iDstY + 0.5 + poWK -> nDstYOff
>15353	AdditiveExpression	iDstY + 0.5 + poWK -> nDstYOff
>15354	AdditiveExpression	0.5 + poWK -> nDstYOff
>15355	PtrMemberAccess	poWK -> nDstYOff
>15356	Identifier	nDstYOff
>15357	Identifier	poWK
>15358	PrimaryExpression	0.5
>15359	Identifier	iDstY
>15360	ArrayIndexing	padfY [ iDstX ]
>15361	Identifier	iDstX
>15362	Identifier	padfY
>15363	ExpressionStatement	 
>15364	AssignmentExpr	padfX [ iDstX ] = iDstX + 0.5 + poWK -> nDstXOff
>15365	AdditiveExpression	iDstX + 0.5 + poWK -> nDstXOff
>15366	AdditiveExpression	0.5 + poWK -> nDstXOff
>15367	PtrMemberAccess	poWK -> nDstXOff
>15368	Identifier	nDstXOff
>15369	Identifier	poWK
>15370	PrimaryExpression	0.5
>15371	Identifier	iDstX
>15372	ArrayIndexing	padfX [ iDstX ]
>15373	Identifier	iDstX
>15374	Identifier	padfX
>15375	IncDecOp	 
>15376	IncDec	++
>15377	Identifier	iDstX
>15378	Condition	 
>15379	RelationalExpression	iDstX < nDstXSize
>15380	Identifier	nDstXSize
>15381	Identifier	iDstX
>15382	ForInit	 
>15383	AssignmentExpr	iDstX = 0
>15384	PrimaryExpression	0
>15385	Identifier	iDstX
>15386	IdentifierDeclStatement	 
>15387	IdentifierDecl	iDstX
>15388	Identifier	iDstX
>15389	IdentifierDeclType	int
>15390	IncDecOp	 
>15391	IncDec	++
>15392	Identifier	iDstY
>15393	Condition	 
>15394	RelationalExpression	iDstY < iYMax
>15395	Identifier	iYMax
>15396	Identifier	iDstY
>15397	ForInit	 
>15398	AssignmentExpr	iDstY = iYMin
>15399	Identifier	iYMin
>15400	Identifier	iDstY
>15401	ExpressionStatement	 
>15402	AssignmentExpr	pabSuccess = ( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>15403	CastExpression	( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>15404	CallExpression	CPLMalloc ( sizeof ( int ) * nDstXSize )
>15405	ArgumentList	sizeof ( int ) * nDstXSize
>15406	Argument	sizeof ( int ) * nDstXSize
>15407	MultiplicativeExpression	sizeof ( int ) * nDstXSize
>15408	Identifier	nDstXSize
>15409	SizeofExpr	sizeof ( int )
>15410	SizeofOperand	int
>15411	Sizeof	sizeof
>15412	Callee	CPLMalloc
>15413	Identifier	CPLMalloc
>15414	CastTarget	int *
>15415	Identifier	pabSuccess
>15416	ExpressionStatement	 
>15417	AssignmentExpr	padfZ = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>15418	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>15419	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>15420	ArgumentList	sizeof ( double ) * nDstXSize
>15421	Argument	sizeof ( double ) * nDstXSize
>15422	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>15423	Identifier	nDstXSize
>15424	SizeofExpr	sizeof ( double )
>15425	SizeofOperand	double
>15426	Sizeof	sizeof
>15427	Callee	CPLMalloc
>15428	Identifier	CPLMalloc
>15429	CastTarget	double *
>15430	Identifier	padfZ
>15431	ExpressionStatement	 
>15432	AssignmentExpr	padfY = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>15433	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>15434	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>15435	ArgumentList	sizeof ( double ) * nDstXSize
>15436	Argument	sizeof ( double ) * nDstXSize
>15437	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>15438	Identifier	nDstXSize
>15439	SizeofExpr	sizeof ( double )
>15440	SizeofOperand	double
>15441	Sizeof	sizeof
>15442	Callee	CPLMalloc
>15443	Identifier	CPLMalloc
>15444	CastTarget	double *
>15445	Identifier	padfY
>15446	ExpressionStatement	 
>15447	AssignmentExpr	padfX = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>15448	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>15449	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>15450	ArgumentList	sizeof ( double ) * nDstXSize
>15451	Argument	sizeof ( double ) * nDstXSize
>15452	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>15453	Identifier	nDstXSize
>15454	SizeofExpr	sizeof ( double )
>15455	SizeofOperand	double
>15456	Sizeof	sizeof
>15457	Callee	CPLMalloc
>15458	Identifier	CPLMalloc
>15459	CastTarget	double *
>15460	Identifier	padfX
>15461	IdentifierDeclStatement	 
>15462	IdentifierDecl	* pabSuccess
>15463	Identifier	pabSuccess
>15464	IdentifierDeclType	int *
>15465	IdentifierDeclStatement	 
>15466	IdentifierDecl	* padfZ
>15467	Identifier	padfZ
>15468	IdentifierDeclType	double *
>15469	IdentifierDecl	* padfY
>15470	Identifier	padfY
>15471	IdentifierDeclType	double *
>15472	IdentifierDecl	* padfX
>15473	Identifier	padfX
>15474	IdentifierDeclType	double *
>15475	IdentifierDeclStatement	 
>15476	IdentifierDecl	nSrcYSize = poWK -> nSrcYSize
>15477	AssignmentExpr	nSrcYSize = poWK -> nSrcYSize
>15478	PtrMemberAccess	poWK -> nSrcYSize
>15479	Identifier	nSrcYSize
>15480	Identifier	poWK
>15481	Identifier	nSrcYSize
>15482	Identifier	nSrcYSize
>15483	IdentifierDeclType	int
>15484	IdentifierDecl	nSrcXSize = poWK -> nSrcXSize
>15485	AssignmentExpr	nSrcXSize = poWK -> nSrcXSize
>15486	PtrMemberAccess	poWK -> nSrcXSize
>15487	Identifier	nSrcXSize
>15488	Identifier	poWK
>15489	Identifier	nSrcXSize
>15490	Identifier	nSrcXSize
>15491	IdentifierDeclType	int
>15492	IdentifierDeclStatement	 
>15493	IdentifierDecl	nDstXSize = poWK -> nDstXSize
>15494	AssignmentExpr	nDstXSize = poWK -> nDstXSize
>15495	PtrMemberAccess	poWK -> nDstXSize
>15496	Identifier	nDstXSize
>15497	Identifier	poWK
>15498	Identifier	nDstXSize
>15499	Identifier	nDstXSize
>15500	IdentifierDeclType	int
>15501	IdentifierDeclStatement	 
>15502	IdentifierDecl	iDstY
>15503	Identifier	iDstY
>15504	IdentifierDeclType	int
>15505	IdentifierDeclStatement	 
>15506	IdentifierDecl	iYMax = psJob -> iYMax
>15507	AssignmentExpr	iYMax = psJob -> iYMax
>15508	PtrMemberAccess	psJob -> iYMax
>15509	Identifier	iYMax
>15510	Identifier	psJob
>15511	Identifier	iYMax
>15512	Identifier	iYMax
>15513	IdentifierDeclType	int
>15514	IdentifierDeclStatement	 
>15515	IdentifierDecl	iYMin = psJob -> iYMin
>15516	AssignmentExpr	iYMin = psJob -> iYMin
>15517	PtrMemberAccess	psJob -> iYMin
>15518	Identifier	iYMin
>15519	Identifier	psJob
>15520	Identifier	iYMin
>15521	Identifier	iYMin
>15522	IdentifierDeclType	int
>15523	IdentifierDeclStatement	 
>15524	IdentifierDecl	* poWK = psJob -> poWK
>15525	AssignmentExpr	* poWK = psJob -> poWK
>15526	PtrMemberAccess	psJob -> poWK
>15527	Identifier	poWK
>15528	Identifier	psJob
>15529	Identifier	poWK
>15530	Identifier	poWK
>15531	IdentifierDeclType	GDALWarpKernel *
>15532	IdentifierDeclStatement	 
>15533	IdentifierDecl	* psJob = ( GWKJobStruct * ) pData
>15534	AssignmentExpr	* psJob = ( GWKJobStruct * ) pData
>15535	CastExpression	( GWKJobStruct * ) pData
>15536	Identifier	pData
>15537	CastTarget	GWKJobStruct *
>15538	Identifier	psJob
>15539	Identifier	psJob
>15540	IdentifierDeclType	GWKJobStruct *
>15591	FunctionDef	GWKCubicSplineNoMasksByte (GDALWarpKernel * poWK)
>15592	ParameterList	GDALWarpKernel * poWK
>15593	Parameter	 
>15594	Identifier	poWK
>15595	ParameterType	GDALWarpKernel *
>15596	ReturnType	static CPLErr
>15597	CompoundStatement	 
>15598	ReturnStatement	 
>15599	CallExpression	GWKRun ( poWK , \"GWKCubicSplineNoMasksByte\" , GWKCubicSplineNoMasksByteThread )
>15600	ArgumentList	poWK
>15601	Argument	GWKCubicSplineNoMasksByteThread
>15602	Identifier	GWKCubicSplineNoMasksByteThread
>15603	Argument	\"GWKCubicSplineNoMasksByte\"
>15604	PrimaryExpression	\"GWKCubicSplineNoMasksByte\"
>15605	Argument	poWK
>15606	Identifier	poWK
>15607	Callee	GWKRun
>15608	Identifier	GWKRun
>15615	FunctionDef	GWKCubicSplineNoMasksByteThread (void * pData)
>15616	ParameterList	void * pData
>15617	Parameter	 
>15618	Identifier	pData
>15619	ParameterType	void *
>15620	ReturnType	static void
>15621	CompoundStatement	 
>15622	ExpressionStatement	 
>15623	CallExpression	CPLFree ( padfBSpline )
>15624	ArgumentList	padfBSpline
>15625	Argument	padfBSpline
>15626	Identifier	padfBSpline
>15627	Callee	CPLFree
>15628	Identifier	CPLFree
>15629	ExpressionStatement	 
>15630	CallExpression	CPLFree ( pabSuccess )
>15631	ArgumentList	pabSuccess
>15632	Argument	pabSuccess
>15633	Identifier	pabSuccess
>15634	Callee	CPLFree
>15635	Identifier	CPLFree
>15636	ExpressionStatement	 
>15637	CallExpression	CPLFree ( padfZ )
>15638	ArgumentList	padfZ
>15639	Argument	padfZ
>15640	Identifier	padfZ
>15641	Callee	CPLFree
>15642	Identifier	CPLFree
>15643	ExpressionStatement	 
>15644	CallExpression	CPLFree ( padfY )
>15645	ArgumentList	padfY
>15646	Argument	padfY
>15647	Identifier	padfY
>15648	Callee	CPLFree
>15649	Identifier	CPLFree
>15650	ExpressionStatement	 
>15651	CallExpression	CPLFree ( padfX )
>15652	ArgumentList	padfX
>15653	Argument	padfX
>15654	Identifier	padfX
>15655	Callee	CPLFree
>15656	Identifier	CPLFree
>15657	ForStatement	for ( iDstY = iYMin ; iDstY < iYMax ; iDstY ++ )
>15658	CompoundStatement	 
>15659	IfStatement	if ( psJob -> pfnProgress ( psJob ) )
>15660	BreakStatement	 
>15661	Condition	 
>15662	CallExpression	psJob -> pfnProgress ( psJob )
>15663	ArgumentList	psJob
>15664	Argument	psJob
>15665	Identifier	psJob
>15666	Callee	psJob -> pfnProgress
>15667	PtrMemberAccess	psJob -> pfnProgress
>15668	Identifier	pfnProgress
>15669	Identifier	psJob
>15670	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>15671	CompoundStatement	 
>15672	ForStatement	for ( iBand = 0 ; iBand < poWK -> nBands ; iBand ++ )
>15673	CompoundStatement	 
>15674	ExpressionStatement	 
>15675	CallExpression	GWKCubicSplineResampleNoMasksByte ( poWK , iBand , padfX [ iDstX ] - poWK -> nSrcXOff , padfY [ iDstX ] - poWK -> \
>15676	ArgumentList	poWK
>15677	Argument	padfBSpline
>15678	Identifier	padfBSpline
>15679	Argument	& poWK -> papabyDstImage [ iBand ] [ iDstOffset ]
>15680	UnaryOp	& poWK -> papabyDstImage [ iBand ] [ iDstOffset ]
>15681	ArrayIndexing	poWK -> papabyDstImage [ iBand ] [ iDstOffset ]
>15682	Identifier	iDstOffset
>15683	ArrayIndexing	poWK -> papabyDstImage [ iBand ]
>15684	Identifier	iBand
>15685	PtrMemberAccess	poWK -> papabyDstImage
>15686	Identifier	papabyDstImage
>15687	Identifier	poWK
>15688	UnaryOperator	&
>15689	Argument	padfY [ iDstX ] - poWK -> nSrcYOff
>15690	AdditiveExpression	padfY [ iDstX ] - poWK -> nSrcYOff
>15691	PtrMemberAccess	poWK -> nSrcYOff
>15692	Identifier	nSrcYOff
>15693	Identifier	poWK
>15694	ArrayIndexing	padfY [ iDstX ]
>15695	Identifier	iDstX
>15696	Identifier	padfY
>15697	Argument	padfX [ iDstX ] - poWK -> nSrcXOff
>15698	AdditiveExpression	padfX [ iDstX ] - poWK -> nSrcXOff
>15699	PtrMemberAccess	poWK -> nSrcXOff
>15700	Identifier	nSrcXOff
>15701	Identifier	poWK
>15702	ArrayIndexing	padfX [ iDstX ]
>15703	Identifier	iDstX
>15704	Identifier	padfX
>15705	Argument	iBand
>15706	Identifier	iBand
>15707	Argument	poWK
>15708	Identifier	poWK
>15709	Callee	GWKCubicSplineResampleNoMasksByte
>15710	Identifier	GWKCubicSplineResampleNoMasksByte
>15711	IncDecOp	 
>15712	IncDec	++
>15713	Identifier	iBand
>15714	Condition	 
>15715	RelationalExpression	iBand < poWK -> nBands
>15716	PtrMemberAccess	poWK -> nBands
>15717	Identifier	nBands
>15718	Identifier	poWK
>15719	Identifier	iBand
>15720	ForInit	 
>15721	AssignmentExpr	iBand = 0
>15722	PrimaryExpression	0
>15723	Identifier	iBand
>15724	ExpressionStatement	 
>15725	AssignmentExpr	iDstOffset = iDstX + iDstY * nDstXSize
>15726	AdditiveExpression	iDstX + iDstY * nDstXSize
>15727	MultiplicativeExpression	iDstY * nDstXSize
>15728	Identifier	nDstXSize
>15729	Identifier	iDstY
>15730	Identifier	iDstX
>15731	Identifier	iDstOffset
>15732	IdentifierDeclStatement	 
>15733	IdentifierDecl	iDstOffset
>15734	Identifier	iDstOffset
>15735	IdentifierDeclType	int
>15736	IdentifierDeclStatement	 
>15737	IdentifierDecl	iBand
>15738	Identifier	iBand
>15739	IdentifierDeclType	int
>15740	ExpressionStatement	 
>15741	CallExpression	COMPUTE_iSrcOffset ( pabSuccess , iDstX , padfX , padfY , poWK , nSrcXSize , nSrcYSize )
>15742	ArgumentList	pabSuccess
>15743	Argument	nSrcYSize
>15744	Identifier	nSrcYSize
>15745	Argument	nSrcXSize
>15746	Identifier	nSrcXSize
>15747	Argument	poWK
>15748	Identifier	poWK
>15749	Argument	padfY
>15750	Identifier	padfY
>15751	Argument	padfX
>15752	Identifier	padfX
>15753	Argument	iDstX
>15754	Identifier	iDstX
>15755	Argument	pabSuccess
>15756	Identifier	pabSuccess
>15757	Callee	COMPUTE_iSrcOffset
>15758	Identifier	COMPUTE_iSrcOffset
>15759	IncDecOp	 
>15760	IncDec	++
>15761	Identifier	iDstX
>15762	Condition	 
>15763	RelationalExpression	iDstX < nDstXSize
>15764	Identifier	nDstXSize
>15765	Identifier	iDstX
>15766	ForInit	 
>15767	AssignmentExpr	iDstX = 0
>15768	PrimaryExpression	0
>15769	Identifier	iDstX
>15770	ExpressionStatement	 
>15771	CallExpression	poWK -> pfnTransformer ( psJob -> pTransformerArg , TRUE , nDstXSize , padfX , padfY , padfZ , pabSuccess )
>15772	ArgumentList	psJob -> pTransformerArg
>15773	Argument	pabSuccess
>15774	Identifier	pabSuccess
>15775	Argument	padfZ
>15776	Identifier	padfZ
>15777	Argument	padfY
>15778	Identifier	padfY
>15779	Argument	padfX
>15780	Identifier	padfX
>15781	Argument	nDstXSize
>15782	Identifier	nDstXSize
>15783	Argument	TRUE
>15784	Identifier	TRUE
>15785	Argument	psJob -> pTransformerArg
>15786	PtrMemberAccess	psJob -> pTransformerArg
>15787	Identifier	pTransformerArg
>15788	Identifier	psJob
>15789	Callee	poWK -> pfnTransformer
>15790	PtrMemberAccess	poWK -> pfnTransformer
>15791	Identifier	pfnTransformer
>15792	Identifier	poWK
>15793	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>15794	CompoundStatement	 
>15795	ExpressionStatement	 
>15796	AssignmentExpr	padfZ [ iDstX ] = 0.0
>15797	PrimaryExpression	0.0
>15798	ArrayIndexing	padfZ [ iDstX ]
>15799	Identifier	iDstX
>15800	Identifier	padfZ
>15801	ExpressionStatement	 
>15802	AssignmentExpr	padfY [ iDstX ] = iDstY + 0.5 + poWK -> nDstYOff
>15803	AdditiveExpression	iDstY + 0.5 + poWK -> nDstYOff
>15804	AdditiveExpression	0.5 + poWK -> nDstYOff
>15805	PtrMemberAccess	poWK -> nDstYOff
>15806	Identifier	nDstYOff
>15807	Identifier	poWK
>15808	PrimaryExpression	0.5
>15809	Identifier	iDstY
>15810	ArrayIndexing	padfY [ iDstX ]
>15811	Identifier	iDstX
>15812	Identifier	padfY
>15813	ExpressionStatement	 
>15814	AssignmentExpr	padfX [ iDstX ] = iDstX + 0.5 + poWK -> nDstXOff
>15815	AdditiveExpression	iDstX + 0.5 + poWK -> nDstXOff
>15816	AdditiveExpression	0.5 + poWK -> nDstXOff
>15817	PtrMemberAccess	poWK -> nDstXOff
>15818	Identifier	nDstXOff
>15819	Identifier	poWK
>15820	PrimaryExpression	0.5
>15821	Identifier	iDstX
>15822	ArrayIndexing	padfX [ iDstX ]
>15823	Identifier	iDstX
>15824	Identifier	padfX
>15825	IncDecOp	 
>15826	IncDec	++
>15827	Identifier	iDstX
>15828	Condition	 
>15829	RelationalExpression	iDstX < nDstXSize
>15830	Identifier	nDstXSize
>15831	Identifier	iDstX
>15832	ForInit	 
>15833	AssignmentExpr	iDstX = 0
>15834	PrimaryExpression	0
>15835	Identifier	iDstX
>15836	IdentifierDeclStatement	 
>15837	IdentifierDecl	iDstX
>15838	Identifier	iDstX
>15839	IdentifierDeclType	int
>15840	IncDecOp	 
>15841	IncDec	++
>15842	Identifier	iDstY
>15843	Condition	 
>15844	RelationalExpression	iDstY < iYMax
>15845	Identifier	iYMax
>15846	Identifier	iDstY
>15847	ForInit	 
>15848	AssignmentExpr	iDstY = iYMin
>15849	Identifier	iYMin
>15850	Identifier	iDstY
>15851	IdentifierDeclStatement	 
>15852	IdentifierDecl	* padfBSpline = ( double * ) CPLCalloc ( nXRadius * 2 , sizeof ( double ) )
>15853	AssignmentExpr	* padfBSpline = ( double * ) CPLCalloc ( nXRadius * 2 , sizeof ( double ) )
>15854	CastExpression	( double * ) CPLCalloc ( nXRadius * 2 , sizeof ( double ) )
>15855	CallExpression	CPLCalloc ( nXRadius * 2 , sizeof ( double ) )
>15856	ArgumentList	nXRadius * 2
>15857	Argument	sizeof ( double )
>15858	SizeofExpr	sizeof ( double )
>15859	SizeofOperand	double
>15860	Sizeof	sizeof
>15861	Argument	nXRadius * 2
>15862	MultiplicativeExpression	nXRadius * 2
>15863	PrimaryExpression	2
>15864	Identifier	nXRadius
>15865	Callee	CPLCalloc
>15866	Identifier	CPLCalloc
>15867	CastTarget	double *
>15868	Identifier	padfBSpline
>15869	Identifier	padfBSpline
>15870	IdentifierDeclType	double *
>15871	IdentifierDeclStatement	 
>15872	IdentifierDecl	nXRadius = poWK -> nXRadius
>15873	AssignmentExpr	nXRadius = poWK -> nXRadius
>15874	PtrMemberAccess	poWK -> nXRadius
>15875	Identifier	nXRadius
>15876	Identifier	poWK
>15877	Identifier	nXRadius
>15878	Identifier	nXRadius
>15879	IdentifierDeclType	int
>15880	ExpressionStatement	 
>15881	AssignmentExpr	pabSuccess = ( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>15882	CastExpression	( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>15883	CallExpression	CPLMalloc ( sizeof ( int ) * nDstXSize )
>15884	ArgumentList	sizeof ( int ) * nDstXSize
>15885	Argument	sizeof ( int ) * nDstXSize
>15886	MultiplicativeExpression	sizeof ( int ) * nDstXSize
>15887	Identifier	nDstXSize
>15888	SizeofExpr	sizeof ( int )
>15889	SizeofOperand	int
>15890	Sizeof	sizeof
>15891	Callee	CPLMalloc
>15892	Identifier	CPLMalloc
>15893	CastTarget	int *
>15894	Identifier	pabSuccess
>15895	ExpressionStatement	 
>15896	AssignmentExpr	padfZ = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>15897	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>15898	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>15899	ArgumentList	sizeof ( double ) * nDstXSize
>15900	Argument	sizeof ( double ) * nDstXSize
>15901	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>15902	Identifier	nDstXSize
>15903	SizeofExpr	sizeof ( double )
>15904	SizeofOperand	double
>15905	Sizeof	sizeof
>15906	Callee	CPLMalloc
>15907	Identifier	CPLMalloc
>15908	CastTarget	double *
>15909	Identifier	padfZ
>15910	ExpressionStatement	 
>15911	AssignmentExpr	padfY = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>15912	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>15913	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>15914	ArgumentList	sizeof ( double ) * nDstXSize
>15915	Argument	sizeof ( double ) * nDstXSize
>15916	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>15917	Identifier	nDstXSize
>15918	SizeofExpr	sizeof ( double )
>15919	SizeofOperand	double
>15920	Sizeof	sizeof
>15921	Callee	CPLMalloc
>15922	Identifier	CPLMalloc
>15923	CastTarget	double *
>15924	Identifier	padfY
>15925	ExpressionStatement	 
>15926	AssignmentExpr	padfX = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>15927	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>15928	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>15929	ArgumentList	sizeof ( double ) * nDstXSize
>15930	Argument	sizeof ( double ) * nDstXSize
>15931	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>15932	Identifier	nDstXSize
>15933	SizeofExpr	sizeof ( double )
>15934	SizeofOperand	double
>15935	Sizeof	sizeof
>15936	Callee	CPLMalloc
>15937	Identifier	CPLMalloc
>15938	CastTarget	double *
>15939	Identifier	padfX
>15940	IdentifierDeclStatement	 
>15941	IdentifierDecl	* pabSuccess
>15942	Identifier	pabSuccess
>15943	IdentifierDeclType	int *
>15944	IdentifierDeclStatement	 
>15945	IdentifierDecl	* padfZ
>15946	Identifier	padfZ
>15947	IdentifierDeclType	double *
>15948	IdentifierDecl	* padfY
>15949	Identifier	padfY
>15950	IdentifierDeclType	double *
>15951	IdentifierDecl	* padfX
>15952	Identifier	padfX
>15953	IdentifierDeclType	double *
>15954	IdentifierDeclStatement	 
>15955	IdentifierDecl	nSrcYSize = poWK -> nSrcYSize
>15956	AssignmentExpr	nSrcYSize = poWK -> nSrcYSize
>15957	PtrMemberAccess	poWK -> nSrcYSize
>15958	Identifier	nSrcYSize
>15959	Identifier	poWK
>15960	Identifier	nSrcYSize
>15961	Identifier	nSrcYSize
>15962	IdentifierDeclType	int
>15963	IdentifierDecl	nSrcXSize = poWK -> nSrcXSize
>15964	AssignmentExpr	nSrcXSize = poWK -> nSrcXSize
>15965	PtrMemberAccess	poWK -> nSrcXSize
>15966	Identifier	nSrcXSize
>15967	Identifier	poWK
>15968	Identifier	nSrcXSize
>15969	Identifier	nSrcXSize
>15970	IdentifierDeclType	int
>15971	IdentifierDeclStatement	 
>15972	IdentifierDecl	nDstXSize = poWK -> nDstXSize
>15973	AssignmentExpr	nDstXSize = poWK -> nDstXSize
>15974	PtrMemberAccess	poWK -> nDstXSize
>15975	Identifier	nDstXSize
>15976	Identifier	poWK
>15977	Identifier	nDstXSize
>15978	Identifier	nDstXSize
>15979	IdentifierDeclType	int
>15980	IdentifierDeclStatement	 
>15981	IdentifierDecl	iDstY
>15982	Identifier	iDstY
>15983	IdentifierDeclType	int
>15984	IdentifierDeclStatement	 
>15985	IdentifierDecl	iYMax = psJob -> iYMax
>15986	AssignmentExpr	iYMax = psJob -> iYMax
>15987	PtrMemberAccess	psJob -> iYMax
>15988	Identifier	iYMax
>15989	Identifier	psJob
>15990	Identifier	iYMax
>15991	Identifier	iYMax
>15992	IdentifierDeclType	int
>15993	IdentifierDeclStatement	 
>15994	IdentifierDecl	iYMin = psJob -> iYMin
>15995	AssignmentExpr	iYMin = psJob -> iYMin
>15996	PtrMemberAccess	psJob -> iYMin
>15997	Identifier	iYMin
>15998	Identifier	psJob
>15999	Identifier	iYMin
>16000	Identifier	iYMin
>16001	IdentifierDeclType	int
>16002	IdentifierDeclStatement	 
>16003	IdentifierDecl	* poWK = psJob -> poWK
>16004	AssignmentExpr	* poWK = psJob -> poWK
>16005	PtrMemberAccess	psJob -> poWK
>16006	Identifier	poWK
>16007	Identifier	psJob
>16008	Identifier	poWK
>16009	Identifier	poWK
>16010	IdentifierDeclType	GDALWarpKernel *
>16011	IdentifierDeclStatement	 
>16012	IdentifierDecl	* psJob = ( GWKJobStruct * ) pData
>16013	AssignmentExpr	* psJob = ( GWKJobStruct * ) pData
>16014	CastExpression	( GWKJobStruct * ) pData
>16015	Identifier	pData
>16016	CastTarget	GWKJobStruct *
>16017	Identifier	psJob
>16018	Identifier	psJob
>16019	IdentifierDeclType	GWKJobStruct *
>16074	FunctionDef	GWKNearestByte (GDALWarpKernel * poWK)
>16075	ParameterList	GDALWarpKernel * poWK
>16076	Parameter	 
>16077	Identifier	poWK
>16078	ParameterType	GDALWarpKernel *
>16079	ReturnType	static CPLErr
>16080	CompoundStatement	 
>16081	ReturnStatement	 
>16082	CallExpression	GWKRun ( poWK , \"GWKNearestByte\" , GWKNearestByteThread )
>16083	ArgumentList	poWK
>16084	Argument	GWKNearestByteThread
>16085	Identifier	GWKNearestByteThread
>16086	Argument	\"GWKNearestByte\"
>16087	PrimaryExpression	\"GWKNearestByte\"
>16088	Argument	poWK
>16089	Identifier	poWK
>16090	Callee	GWKRun
>16091	Identifier	GWKRun
>16098	FunctionDef	GWKNearestByteThread (void * pData)
>16099	ParameterList	void * pData
>16100	Parameter	 
>16101	Identifier	pData
>16102	ParameterType	void *
>16103	ReturnType	static void
>16104	CompoundStatement	 
>16105	ExpressionStatement	 
>16106	CallExpression	CPLFree ( pabSuccess )
>16107	ArgumentList	pabSuccess
>16108	Argument	pabSuccess
>16109	Identifier	pabSuccess
>16110	Callee	CPLFree
>16111	Identifier	CPLFree
>16112	ExpressionStatement	 
>16113	CallExpression	CPLFree ( padfZ )
>16114	ArgumentList	padfZ
>16115	Argument	padfZ
>16116	Identifier	padfZ
>16117	Callee	CPLFree
>16118	Identifier	CPLFree
>16119	ExpressionStatement	 
>16120	CallExpression	CPLFree ( padfY )
>16121	ArgumentList	padfY
>16122	Argument	padfY
>16123	Identifier	padfY
>16124	Callee	CPLFree
>16125	Identifier	CPLFree
>16126	ExpressionStatement	 
>16127	CallExpression	CPLFree ( padfX )
>16128	ArgumentList	padfX
>16129	Argument	padfX
>16130	Identifier	padfX
>16131	Callee	CPLFree
>16132	Identifier	CPLFree
>16133	ForStatement	for ( iDstY = iYMin ; iDstY < iYMax ; iDstY ++ )
>16134	CompoundStatement	 
>16135	IfStatement	if ( psJob -> pfnProgress ( psJob ) )
>16136	BreakStatement	 
>16137	Condition	 
>16138	CallExpression	psJob -> pfnProgress ( psJob )
>16139	ArgumentList	psJob
>16140	Argument	psJob
>16141	Identifier	psJob
>16142	Callee	psJob -> pfnProgress
>16143	PtrMemberAccess	psJob -> pfnProgress
>16144	Identifier	pfnProgress
>16145	Identifier	psJob
>16146	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>16147	CompoundStatement	 
>16148	IfStatement	if ( poWK -> panDstValid != NULL )
>16149	CompoundStatement	 
>16150	ExpressionStatement	 
>16151	AssignmentExpr	poWK -> panDstValid [ iDstOffset >> 5 ] |= 0x01 << ( iDstOffset & 0x1f )
>16152	ShiftExpression	0x01 << ( iDstOffset & 0x1f )
>16153	BitAndExpression	iDstOffset & 0x1f
>16154	PrimaryExpression	0x1f
>16155	Identifier	iDstOffset
>16156	PrimaryExpression	0x01
>16157	ArrayIndexing	poWK -> panDstValid [ iDstOffset >> 5 ]
>16158	ShiftExpression	iDstOffset >> 5
>16159	PrimaryExpression	5
>16160	Identifier	iDstOffset
>16161	PtrMemberAccess	poWK -> panDstValid
>16162	Identifier	panDstValid
>16163	Identifier	poWK
>16164	Condition	 
>16165	EqualityExpression	poWK -> panDstValid != NULL
>16166	Identifier	NULL
>16167	PtrMemberAccess	poWK -> panDstValid
>16168	Identifier	panDstValid
>16169	Identifier	poWK
>16170	ExpressionStatement	 
>16171	CallExpression	GWKOverlayDensity ( poWK , iDstOffset , dfDensity )
>16172	ArgumentList	poWK
>16173	Argument	dfDensity
>16174	Identifier	dfDensity
>16175	Argument	iDstOffset
>16176	Identifier	iDstOffset
>16177	Argument	poWK
>16178	Identifier	poWK
>16179	Callee	GWKOverlayDensity
>16180	Identifier	GWKOverlayDensity
>16181	ForStatement	for ( iBand = 0 ; iBand < poWK -> nBands ; iBand ++ )
>16182	CompoundStatement	 
>16183	IfStatement	if ( GWKGetPixelByte ( poWK , iBand , iSrcOffset , & dfBandDensity , & bValue ) )
>16184	CompoundStatement	 
>16185	IfStatement	if ( dfBandDensity < 1.0 )
>16186	ElseStatement	else
>16187	CompoundStatement	 
>16188	ExpressionStatement	 
>16189	AssignmentExpr	poWK -> papabyDstImage [ iBand ] [ iDstOffset ] = bValue
>16190	Identifier	bValue
>16191	ArrayIndexing	poWK -> papabyDstImage [ iBand ] [ iDstOffset ]
>16192	Identifier	iDstOffset
>16193	ArrayIndexing	poWK -> papabyDstImage [ iBand ]
>16194	Identifier	iBand
>16195	PtrMemberAccess	poWK -> papabyDstImage
>16196	Identifier	papabyDstImage
>16197	Identifier	poWK
>16198	CompoundStatement	 
>16199	IfStatement	if ( dfBandDensity == 0.0 )
>16200	ElseStatement	else
>16201	CompoundStatement	 
>16202	ExpressionStatement	 
>16203	CallExpression	GWKSetPixelValue ( poWK , iBand , iDstOffset , dfBandDensity , ( double ) bValue , 0.0 )
>16204	ArgumentList	poWK
>16205	Argument	0.0
>16206	PrimaryExpression	0.0
>16207	Argument	( double ) bValue
>16208	CastExpression	( double ) bValue
>16209	Identifier	bValue
>16210	CastTarget	double
>16211	Argument	dfBandDensity
>16212	Identifier	dfBandDensity
>16213	Argument	iDstOffset
>16214	Identifier	iDstOffset
>16215	Argument	iBand
>16216	Identifier	iBand
>16217	Argument	poWK
>16218	Identifier	poWK
>16219	Callee	GWKSetPixelValue
>16220	Identifier	GWKSetPixelValue
>16221	ExpressionStatement	 
>16222	Condition	 
>16223	EqualityExpression	dfBandDensity == 0.0
>16224	PrimaryExpression	0.0
>16225	Identifier	dfBandDensity
>16226	Condition	 
>16227	RelationalExpression	dfBandDensity < 1.0
>16228	PrimaryExpression	1.0
>16229	Identifier	dfBandDensity
>16230	Condition	 
>16231	CallExpression	GWKGetPixelByte ( poWK , iBand , iSrcOffset , & dfBandDensity , & bValue )
>16232	ArgumentList	poWK
>16233	Argument	& bValue
>16234	UnaryOp	& bValue
>16235	Identifier	bValue
>16236	UnaryOperator	&
>16237	Argument	& dfBandDensity
>16238	UnaryOp	& dfBandDensity
>16239	Identifier	dfBandDensity
>16240	UnaryOperator	&
>16241	Argument	iSrcOffset
>16242	Identifier	iSrcOffset
>16243	Argument	iBand
>16244	Identifier	iBand
>16245	Argument	poWK
>16246	Identifier	poWK
>16247	Callee	GWKGetPixelByte
>16248	Identifier	GWKGetPixelByte
>16249	IdentifierDeclStatement	 
>16250	IdentifierDecl	dfBandDensity = 0.0
>16251	AssignmentExpr	dfBandDensity = 0.0
>16252	PrimaryExpression	0.0
>16253	Identifier	dfBandDensity
>16254	Identifier	dfBandDensity
>16255	IdentifierDeclType	double
>16256	IdentifierDeclStatement	 
>16257	IdentifierDecl	bValue = 0
>16258	AssignmentExpr	bValue = 0
>16259	PrimaryExpression	0
>16260	Identifier	bValue
>16261	Identifier	bValue
>16262	IdentifierDeclType	GByte
>16263	IncDecOp	 
>16264	IncDec	++
>16265	Identifier	iBand
>16266	Condition	 
>16267	RelationalExpression	iBand < poWK -> nBands
>16268	PtrMemberAccess	poWK -> nBands
>16269	Identifier	nBands
>16270	Identifier	poWK
>16271	Identifier	iBand
>16272	ForInit	 
>16273	AssignmentExpr	iBand = 0
>16274	PrimaryExpression	0
>16275	Identifier	iBand
>16276	ExpressionStatement	 
>16277	AssignmentExpr	iDstOffset = iDstX + iDstY * nDstXSize
>16278	AdditiveExpression	iDstX + iDstY * nDstXSize
>16279	MultiplicativeExpression	iDstY * nDstXSize
>16280	Identifier	nDstXSize
>16281	Identifier	iDstY
>16282	Identifier	iDstX
>16283	Identifier	iDstOffset
>16284	IdentifierDeclStatement	 
>16285	IdentifierDecl	iBand
>16286	Identifier	iBand
>16287	IdentifierDeclType	int
>16288	IfStatement	if ( poWK -> pafUnifiedSrcDensity != NULL )
>16289	CompoundStatement	 
>16290	IfStatement	if ( dfDensity < 0.00001 )
>16291	ContinueStatement	 
>16292	Condition	 
>16293	RelationalExpression	dfDensity < 0.00001
>16294	PrimaryExpression	0.00001
>16295	Identifier	dfDensity
>16296	ExpressionStatement	 
>16297	AssignmentExpr	dfDensity = poWK -> pafUnifiedSrcDensity [ iSrcOffset ]
>16298	ArrayIndexing	poWK -> pafUnifiedSrcDensity [ iSrcOffset ]
>16299	Identifier	iSrcOffset
>16300	PtrMemberAccess	poWK -> pafUnifiedSrcDensity
>16301	Identifier	pafUnifiedSrcDensity
>16302	Identifier	poWK
>16303	Identifier	dfDensity
>16304	Condition	 
>16305	EqualityExpression	poWK -> pafUnifiedSrcDensity != NULL
>16306	Identifier	NULL
>16307	PtrMemberAccess	poWK -> pafUnifiedSrcDensity
>16308	Identifier	pafUnifiedSrcDensity
>16309	Identifier	poWK
>16310	IdentifierDeclStatement	 
>16311	IdentifierDecl	dfDensity = 1.0
>16312	AssignmentExpr	dfDensity = 1.0
>16313	PrimaryExpression	1.0
>16314	Identifier	dfDensity
>16315	Identifier	dfDensity
>16316	IdentifierDeclType	double
>16317	IfStatement	if ( poWK -> panUnifiedSrcValid != NULL && ! ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & \
>16318	ContinueStatement	 
>16319	Condition	 
>16320	AndExpression	poWK -> panUnifiedSrcValid != NULL && ! ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( \
>16321	UnaryOp	! ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) ) )
>16322	BitAndExpression	poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) )
>16323	ShiftExpression	0x01 << ( iSrcOffset & 0x1f )
>16324	BitAndExpression	iSrcOffset & 0x1f
>16325	PrimaryExpression	0x1f
>16326	Identifier	iSrcOffset
>16327	PrimaryExpression	0x01
>16328	ArrayIndexing	poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ]
>16329	ShiftExpression	iSrcOffset >> 5
>16330	PrimaryExpression	5
>16331	Identifier	iSrcOffset
>16332	PtrMemberAccess	poWK -> panUnifiedSrcValid
>16333	Identifier	panUnifiedSrcValid
>16334	Identifier	poWK
>16335	UnaryOperator	!
>16336	EqualityExpression	poWK -> panUnifiedSrcValid != NULL
>16337	Identifier	NULL
>16338	PtrMemberAccess	poWK -> panUnifiedSrcValid
>16339	Identifier	panUnifiedSrcValid
>16340	Identifier	poWK
>16341	ExpressionStatement	 
>16342	CallExpression	COMPUTE_iSrcOffset ( pabSuccess , iDstX , padfX , padfY , poWK , nSrcXSize , nSrcYSize )
>16343	ArgumentList	pabSuccess
>16344	Argument	nSrcYSize
>16345	Identifier	nSrcYSize
>16346	Argument	nSrcXSize
>16347	Identifier	nSrcXSize
>16348	Argument	poWK
>16349	Identifier	poWK
>16350	Argument	padfY
>16351	Identifier	padfY
>16352	Argument	padfX
>16353	Identifier	padfX
>16354	Argument	iDstX
>16355	Identifier	iDstX
>16356	Argument	pabSuccess
>16357	Identifier	pabSuccess
>16358	Callee	COMPUTE_iSrcOffset
>16359	Identifier	COMPUTE_iSrcOffset
>16360	IdentifierDeclStatement	 
>16361	IdentifierDecl	iDstOffset
>16362	Identifier	iDstOffset
>16363	IdentifierDeclType	int
>16364	IncDecOp	 
>16365	IncDec	++
>16366	Identifier	iDstX
>16367	Condition	 
>16368	RelationalExpression	iDstX < nDstXSize
>16369	Identifier	nDstXSize
>16370	Identifier	iDstX
>16371	ForInit	 
>16372	AssignmentExpr	iDstX = 0
>16373	PrimaryExpression	0
>16374	Identifier	iDstX
>16375	ExpressionStatement	 
>16376	CallExpression	poWK -> pfnTransformer ( psJob -> pTransformerArg , TRUE , nDstXSize , padfX , padfY , padfZ , pabSuccess )
>16377	ArgumentList	psJob -> pTransformerArg
>16378	Argument	pabSuccess
>16379	Identifier	pabSuccess
>16380	Argument	padfZ
>16381	Identifier	padfZ
>16382	Argument	padfY
>16383	Identifier	padfY
>16384	Argument	padfX
>16385	Identifier	padfX
>16386	Argument	nDstXSize
>16387	Identifier	nDstXSize
>16388	Argument	TRUE
>16389	Identifier	TRUE
>16390	Argument	psJob -> pTransformerArg
>16391	PtrMemberAccess	psJob -> pTransformerArg
>16392	Identifier	pTransformerArg
>16393	Identifier	psJob
>16394	Callee	poWK -> pfnTransformer
>16395	PtrMemberAccess	poWK -> pfnTransformer
>16396	Identifier	pfnTransformer
>16397	Identifier	poWK
>16398	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>16399	CompoundStatement	 
>16400	ExpressionStatement	 
>16401	AssignmentExpr	padfZ [ iDstX ] = 0.0
>16402	PrimaryExpression	0.0
>16403	ArrayIndexing	padfZ [ iDstX ]
>16404	Identifier	iDstX
>16405	Identifier	padfZ
>16406	ExpressionStatement	 
>16407	AssignmentExpr	padfY [ iDstX ] = iDstY + 0.5 + poWK -> nDstYOff
>16408	AdditiveExpression	iDstY + 0.5 + poWK -> nDstYOff
>16409	AdditiveExpression	0.5 + poWK -> nDstYOff
>16410	PtrMemberAccess	poWK -> nDstYOff
>16411	Identifier	nDstYOff
>16412	Identifier	poWK
>16413	PrimaryExpression	0.5
>16414	Identifier	iDstY
>16415	ArrayIndexing	padfY [ iDstX ]
>16416	Identifier	iDstX
>16417	Identifier	padfY
>16418	ExpressionStatement	 
>16419	AssignmentExpr	padfX [ iDstX ] = iDstX + 0.5 + poWK -> nDstXOff
>16420	AdditiveExpression	iDstX + 0.5 + poWK -> nDstXOff
>16421	AdditiveExpression	0.5 + poWK -> nDstXOff
>16422	PtrMemberAccess	poWK -> nDstXOff
>16423	Identifier	nDstXOff
>16424	Identifier	poWK
>16425	PrimaryExpression	0.5
>16426	Identifier	iDstX
>16427	ArrayIndexing	padfX [ iDstX ]
>16428	Identifier	iDstX
>16429	Identifier	padfX
>16430	IncDecOp	 
>16431	IncDec	++
>16432	Identifier	iDstX
>16433	Condition	 
>16434	RelationalExpression	iDstX < nDstXSize
>16435	Identifier	nDstXSize
>16436	Identifier	iDstX
>16437	ForInit	 
>16438	AssignmentExpr	iDstX = 0
>16439	PrimaryExpression	0
>16440	Identifier	iDstX
>16441	IdentifierDeclStatement	 
>16442	IdentifierDecl	iDstX
>16443	Identifier	iDstX
>16444	IdentifierDeclType	int
>16445	IncDecOp	 
>16446	IncDec	++
>16447	Identifier	iDstY
>16448	Condition	 
>16449	RelationalExpression	iDstY < iYMax
>16450	Identifier	iYMax
>16451	Identifier	iDstY
>16452	ForInit	 
>16453	AssignmentExpr	iDstY = iYMin
>16454	Identifier	iYMin
>16455	Identifier	iDstY
>16456	ExpressionStatement	 
>16457	AssignmentExpr	pabSuccess = ( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>16458	CastExpression	( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>16459	CallExpression	CPLMalloc ( sizeof ( int ) * nDstXSize )
>16460	ArgumentList	sizeof ( int ) * nDstXSize
>16461	Argument	sizeof ( int ) * nDstXSize
>16462	MultiplicativeExpression	sizeof ( int ) * nDstXSize
>16463	Identifier	nDstXSize
>16464	SizeofExpr	sizeof ( int )
>16465	SizeofOperand	int
>16466	Sizeof	sizeof
>16467	Callee	CPLMalloc
>16468	Identifier	CPLMalloc
>16469	CastTarget	int *
>16470	Identifier	pabSuccess
>16471	ExpressionStatement	 
>16472	AssignmentExpr	padfZ = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>16473	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>16474	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>16475	ArgumentList	sizeof ( double ) * nDstXSize
>16476	Argument	sizeof ( double ) * nDstXSize
>16477	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>16478	Identifier	nDstXSize
>16479	SizeofExpr	sizeof ( double )
>16480	SizeofOperand	double
>16481	Sizeof	sizeof
>16482	Callee	CPLMalloc
>16483	Identifier	CPLMalloc
>16484	CastTarget	double *
>16485	Identifier	padfZ
>16486	ExpressionStatement	 
>16487	AssignmentExpr	padfY = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>16488	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>16489	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>16490	ArgumentList	sizeof ( double ) * nDstXSize
>16491	Argument	sizeof ( double ) * nDstXSize
>16492	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>16493	Identifier	nDstXSize
>16494	SizeofExpr	sizeof ( double )
>16495	SizeofOperand	double
>16496	Sizeof	sizeof
>16497	Callee	CPLMalloc
>16498	Identifier	CPLMalloc
>16499	CastTarget	double *
>16500	Identifier	padfY
>16501	ExpressionStatement	 
>16502	AssignmentExpr	padfX = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>16503	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>16504	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>16505	ArgumentList	sizeof ( double ) * nDstXSize
>16506	Argument	sizeof ( double ) * nDstXSize
>16507	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>16508	Identifier	nDstXSize
>16509	SizeofExpr	sizeof ( double )
>16510	SizeofOperand	double
>16511	Sizeof	sizeof
>16512	Callee	CPLMalloc
>16513	Identifier	CPLMalloc
>16514	CastTarget	double *
>16515	Identifier	padfX
>16516	IdentifierDeclStatement	 
>16517	IdentifierDecl	* pabSuccess
>16518	Identifier	pabSuccess
>16519	IdentifierDeclType	int *
>16520	IdentifierDeclStatement	 
>16521	IdentifierDecl	* padfZ
>16522	Identifier	padfZ
>16523	IdentifierDeclType	double *
>16524	IdentifierDecl	* padfY
>16525	Identifier	padfY
>16526	IdentifierDeclType	double *
>16527	IdentifierDecl	* padfX
>16528	Identifier	padfX
>16529	IdentifierDeclType	double *
>16530	IdentifierDeclStatement	 
>16531	IdentifierDecl	nSrcYSize = poWK -> nSrcYSize
>16532	AssignmentExpr	nSrcYSize = poWK -> nSrcYSize
>16533	PtrMemberAccess	poWK -> nSrcYSize
>16534	Identifier	nSrcYSize
>16535	Identifier	poWK
>16536	Identifier	nSrcYSize
>16537	Identifier	nSrcYSize
>16538	IdentifierDeclType	int
>16539	IdentifierDecl	nSrcXSize = poWK -> nSrcXSize
>16540	AssignmentExpr	nSrcXSize = poWK -> nSrcXSize
>16541	PtrMemberAccess	poWK -> nSrcXSize
>16542	Identifier	nSrcXSize
>16543	Identifier	poWK
>16544	Identifier	nSrcXSize
>16545	Identifier	nSrcXSize
>16546	IdentifierDeclType	int
>16547	IdentifierDeclStatement	 
>16548	IdentifierDecl	nDstXSize = poWK -> nDstXSize
>16549	AssignmentExpr	nDstXSize = poWK -> nDstXSize
>16550	PtrMemberAccess	poWK -> nDstXSize
>16551	Identifier	nDstXSize
>16552	Identifier	poWK
>16553	Identifier	nDstXSize
>16554	Identifier	nDstXSize
>16555	IdentifierDeclType	int
>16556	IdentifierDeclStatement	 
>16557	IdentifierDecl	iDstY
>16558	Identifier	iDstY
>16559	IdentifierDeclType	int
>16560	IdentifierDeclStatement	 
>16561	IdentifierDecl	iYMax = psJob -> iYMax
>16562	AssignmentExpr	iYMax = psJob -> iYMax
>16563	PtrMemberAccess	psJob -> iYMax
>16564	Identifier	iYMax
>16565	Identifier	psJob
>16566	Identifier	iYMax
>16567	Identifier	iYMax
>16568	IdentifierDeclType	int
>16569	IdentifierDeclStatement	 
>16570	IdentifierDecl	iYMin = psJob -> iYMin
>16571	AssignmentExpr	iYMin = psJob -> iYMin
>16572	PtrMemberAccess	psJob -> iYMin
>16573	Identifier	iYMin
>16574	Identifier	psJob
>16575	Identifier	iYMin
>16576	Identifier	iYMin
>16577	IdentifierDeclType	int
>16578	IdentifierDeclStatement	 
>16579	IdentifierDecl	* poWK = psJob -> poWK
>16580	AssignmentExpr	* poWK = psJob -> poWK
>16581	PtrMemberAccess	psJob -> poWK
>16582	Identifier	poWK
>16583	Identifier	psJob
>16584	Identifier	poWK
>16585	Identifier	poWK
>16586	IdentifierDeclType	GDALWarpKernel *
>16587	IdentifierDeclStatement	 
>16588	IdentifierDecl	* psJob = ( GWKJobStruct * ) pData
>16589	AssignmentExpr	* psJob = ( GWKJobStruct * ) pData
>16590	CastExpression	( GWKJobStruct * ) pData
>16591	Identifier	pData
>16592	CastTarget	GWKJobStruct *
>16593	Identifier	psJob
>16594	Identifier	psJob
>16595	IdentifierDeclType	GWKJobStruct *
>16659	FunctionDef	GWKNearestNoMasksShort (GDALWarpKernel * poWK)
>16660	ParameterList	GDALWarpKernel * poWK
>16661	Parameter	 
>16662	Identifier	poWK
>16663	ParameterType	GDALWarpKernel *
>16664	ReturnType	static CPLErr
>16665	CompoundStatement	 
>16666	ReturnStatement	 
>16667	CallExpression	GWKRun ( poWK , \"GWKNearestNoMasksShort\" , GWKNearestNoMasksShortThread )
>16668	ArgumentList	poWK
>16669	Argument	GWKNearestNoMasksShortThread
>16670	Identifier	GWKNearestNoMasksShortThread
>16671	Argument	\"GWKNearestNoMasksShort\"
>16672	PrimaryExpression	\"GWKNearestNoMasksShort\"
>16673	Argument	poWK
>16674	Identifier	poWK
>16675	Callee	GWKRun
>16676	Identifier	GWKRun
>16683	FunctionDef	GWKNearestNoMasksShortThread (void * pData)
>16684	ParameterList	void * pData
>16685	Parameter	 
>16686	Identifier	pData
>16687	ParameterType	void *
>16688	ReturnType	static void
>16689	CompoundStatement	 
>16690	ExpressionStatement	 
>16691	CallExpression	CPLFree ( pabSuccess )
>16692	ArgumentList	pabSuccess
>16693	Argument	pabSuccess
>16694	Identifier	pabSuccess
>16695	Callee	CPLFree
>16696	Identifier	CPLFree
>16697	ExpressionStatement	 
>16698	CallExpression	CPLFree ( padfZ )
>16699	ArgumentList	padfZ
>16700	Argument	padfZ
>16701	Identifier	padfZ
>16702	Callee	CPLFree
>16703	Identifier	CPLFree
>16704	ExpressionStatement	 
>16705	CallExpression	CPLFree ( padfY )
>16706	ArgumentList	padfY
>16707	Argument	padfY
>16708	Identifier	padfY
>16709	Callee	CPLFree
>16710	Identifier	CPLFree
>16711	ExpressionStatement	 
>16712	CallExpression	CPLFree ( padfX )
>16713	ArgumentList	padfX
>16714	Argument	padfX
>16715	Identifier	padfX
>16716	Callee	CPLFree
>16717	Identifier	CPLFree
>16718	ForStatement	for ( iDstY = iYMin ; iDstY < iYMax ; iDstY ++ )
>16719	CompoundStatement	 
>16720	IfStatement	if ( psJob -> pfnProgress ( psJob ) )
>16721	BreakStatement	 
>16722	Condition	 
>16723	CallExpression	psJob -> pfnProgress ( psJob )
>16724	ArgumentList	psJob
>16725	Argument	psJob
>16726	Identifier	psJob
>16727	Callee	psJob -> pfnProgress
>16728	PtrMemberAccess	psJob -> pfnProgress
>16729	Identifier	pfnProgress
>16730	Identifier	psJob
>16731	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>16732	CompoundStatement	 
>16733	ForStatement	for ( iBand = 0 ; iBand < poWK -> nBands ; iBand ++ )
>16734	CompoundStatement	 
>16735	ExpressionStatement	 
>16736	AssignmentExpr	( ( GInt16 * ) poWK -> papabyDstImage [ iBand ] ) [ iDstOffset ] = ( ( GInt16 * ) poWK -> papabySrcImage [ \
>16737	ArrayIndexing	( ( GInt16 * ) poWK -> papabySrcImage [ iBand ] ) [ iSrcOffset ]
>16738	Identifier	iSrcOffset
>16739	CastExpression	( GInt16 * ) poWK -> papabySrcImage [ iBand ]
>16740	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>16741	Identifier	iBand
>16742	PtrMemberAccess	poWK -> papabySrcImage
>16743	Identifier	papabySrcImage
>16744	Identifier	poWK
>16745	CastTarget	GInt16 *
>16746	ArrayIndexing	( ( GInt16 * ) poWK -> papabyDstImage [ iBand ] ) [ iDstOffset ]
>16747	Identifier	iDstOffset
>16748	CastExpression	( GInt16 * ) poWK -> papabyDstImage [ iBand ]
>16749	ArrayIndexing	poWK -> papabyDstImage [ iBand ]
>16750	Identifier	iBand
>16751	PtrMemberAccess	poWK -> papabyDstImage
>16752	Identifier	papabyDstImage
>16753	Identifier	poWK
>16754	CastTarget	GInt16 *
>16755	IncDecOp	 
>16756	IncDec	++
>16757	Identifier	iBand
>16758	Condition	 
>16759	RelationalExpression	iBand < poWK -> nBands
>16760	PtrMemberAccess	poWK -> nBands
>16761	Identifier	nBands
>16762	Identifier	poWK
>16763	Identifier	iBand
>16764	ForInit	 
>16765	AssignmentExpr	iBand = 0
>16766	PrimaryExpression	0
>16767	Identifier	iBand
>16768	ExpressionStatement	 
>16769	AssignmentExpr	iDstOffset = iDstX + iDstY * nDstXSize
>16770	AdditiveExpression	iDstX + iDstY * nDstXSize
>16771	MultiplicativeExpression	iDstY * nDstXSize
>16772	Identifier	nDstXSize
>16773	Identifier	iDstY
>16774	Identifier	iDstX
>16775	Identifier	iDstOffset
>16776	IdentifierDeclStatement	 
>16777	IdentifierDecl	iBand
>16778	Identifier	iBand
>16779	IdentifierDeclType	int
>16780	ExpressionStatement	 
>16781	CallExpression	COMPUTE_iSrcOffset ( pabSuccess , iDstX , padfX , padfY , poWK , nSrcXSize , nSrcYSize )
>16782	ArgumentList	pabSuccess
>16783	Argument	nSrcYSize
>16784	Identifier	nSrcYSize
>16785	Argument	nSrcXSize
>16786	Identifier	nSrcXSize
>16787	Argument	poWK
>16788	Identifier	poWK
>16789	Argument	padfY
>16790	Identifier	padfY
>16791	Argument	padfX
>16792	Identifier	padfX
>16793	Argument	iDstX
>16794	Identifier	iDstX
>16795	Argument	pabSuccess
>16796	Identifier	pabSuccess
>16797	Callee	COMPUTE_iSrcOffset
>16798	Identifier	COMPUTE_iSrcOffset
>16799	IdentifierDeclStatement	 
>16800	IdentifierDecl	iDstOffset
>16801	Identifier	iDstOffset
>16802	IdentifierDeclType	int
>16803	IncDecOp	 
>16804	IncDec	++
>16805	Identifier	iDstX
>16806	Condition	 
>16807	RelationalExpression	iDstX < nDstXSize
>16808	Identifier	nDstXSize
>16809	Identifier	iDstX
>16810	ForInit	 
>16811	AssignmentExpr	iDstX = 0
>16812	PrimaryExpression	0
>16813	Identifier	iDstX
>16814	ExpressionStatement	 
>16815	CallExpression	poWK -> pfnTransformer ( psJob -> pTransformerArg , TRUE , nDstXSize , padfX , padfY , padfZ , pabSuccess )
>16816	ArgumentList	psJob -> pTransformerArg
>16817	Argument	pabSuccess
>16818	Identifier	pabSuccess
>16819	Argument	padfZ
>16820	Identifier	padfZ
>16821	Argument	padfY
>16822	Identifier	padfY
>16823	Argument	padfX
>16824	Identifier	padfX
>16825	Argument	nDstXSize
>16826	Identifier	nDstXSize
>16827	Argument	TRUE
>16828	Identifier	TRUE
>16829	Argument	psJob -> pTransformerArg
>16830	PtrMemberAccess	psJob -> pTransformerArg
>16831	Identifier	pTransformerArg
>16832	Identifier	psJob
>16833	Callee	poWK -> pfnTransformer
>16834	PtrMemberAccess	poWK -> pfnTransformer
>16835	Identifier	pfnTransformer
>16836	Identifier	poWK
>16837	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>16838	CompoundStatement	 
>16839	ExpressionStatement	 
>16840	AssignmentExpr	padfZ [ iDstX ] = 0.0
>16841	PrimaryExpression	0.0
>16842	ArrayIndexing	padfZ [ iDstX ]
>16843	Identifier	iDstX
>16844	Identifier	padfZ
>16845	ExpressionStatement	 
>16846	AssignmentExpr	padfY [ iDstX ] = iDstY + 0.5 + poWK -> nDstYOff
>16847	AdditiveExpression	iDstY + 0.5 + poWK -> nDstYOff
>16848	AdditiveExpression	0.5 + poWK -> nDstYOff
>16849	PtrMemberAccess	poWK -> nDstYOff
>16850	Identifier	nDstYOff
>16851	Identifier	poWK
>16852	PrimaryExpression	0.5
>16853	Identifier	iDstY
>16854	ArrayIndexing	padfY [ iDstX ]
>16855	Identifier	iDstX
>16856	Identifier	padfY
>16857	ExpressionStatement	 
>16858	AssignmentExpr	padfX [ iDstX ] = iDstX + 0.5 + poWK -> nDstXOff
>16859	AdditiveExpression	iDstX + 0.5 + poWK -> nDstXOff
>16860	AdditiveExpression	0.5 + poWK -> nDstXOff
>16861	PtrMemberAccess	poWK -> nDstXOff
>16862	Identifier	nDstXOff
>16863	Identifier	poWK
>16864	PrimaryExpression	0.5
>16865	Identifier	iDstX
>16866	ArrayIndexing	padfX [ iDstX ]
>16867	Identifier	iDstX
>16868	Identifier	padfX
>16869	IncDecOp	 
>16870	IncDec	++
>16871	Identifier	iDstX
>16872	Condition	 
>16873	RelationalExpression	iDstX < nDstXSize
>16874	Identifier	nDstXSize
>16875	Identifier	iDstX
>16876	ForInit	 
>16877	AssignmentExpr	iDstX = 0
>16878	PrimaryExpression	0
>16879	Identifier	iDstX
>16880	IdentifierDeclStatement	 
>16881	IdentifierDecl	iDstX
>16882	Identifier	iDstX
>16883	IdentifierDeclType	int
>16884	IncDecOp	 
>16885	IncDec	++
>16886	Identifier	iDstY
>16887	Condition	 
>16888	RelationalExpression	iDstY < iYMax
>16889	Identifier	iYMax
>16890	Identifier	iDstY
>16891	ForInit	 
>16892	AssignmentExpr	iDstY = iYMin
>16893	Identifier	iYMin
>16894	Identifier	iDstY
>16895	ExpressionStatement	 
>16896	AssignmentExpr	pabSuccess = ( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>16897	CastExpression	( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>16898	CallExpression	CPLMalloc ( sizeof ( int ) * nDstXSize )
>16899	ArgumentList	sizeof ( int ) * nDstXSize
>16900	Argument	sizeof ( int ) * nDstXSize
>16901	MultiplicativeExpression	sizeof ( int ) * nDstXSize
>16902	Identifier	nDstXSize
>16903	SizeofExpr	sizeof ( int )
>16904	SizeofOperand	int
>16905	Sizeof	sizeof
>16906	Callee	CPLMalloc
>16907	Identifier	CPLMalloc
>16908	CastTarget	int *
>16909	Identifier	pabSuccess
>16910	ExpressionStatement	 
>16911	AssignmentExpr	padfZ = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>16912	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>16913	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>16914	ArgumentList	sizeof ( double ) * nDstXSize
>16915	Argument	sizeof ( double ) * nDstXSize
>16916	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>16917	Identifier	nDstXSize
>16918	SizeofExpr	sizeof ( double )
>16919	SizeofOperand	double
>16920	Sizeof	sizeof
>16921	Callee	CPLMalloc
>16922	Identifier	CPLMalloc
>16923	CastTarget	double *
>16924	Identifier	padfZ
>16925	ExpressionStatement	 
>16926	AssignmentExpr	padfY = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>16927	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>16928	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>16929	ArgumentList	sizeof ( double ) * nDstXSize
>16930	Argument	sizeof ( double ) * nDstXSize
>16931	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>16932	Identifier	nDstXSize
>16933	SizeofExpr	sizeof ( double )
>16934	SizeofOperand	double
>16935	Sizeof	sizeof
>16936	Callee	CPLMalloc
>16937	Identifier	CPLMalloc
>16938	CastTarget	double *
>16939	Identifier	padfY
>16940	ExpressionStatement	 
>16941	AssignmentExpr	padfX = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>16942	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>16943	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>16944	ArgumentList	sizeof ( double ) * nDstXSize
>16945	Argument	sizeof ( double ) * nDstXSize
>16946	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>16947	Identifier	nDstXSize
>16948	SizeofExpr	sizeof ( double )
>16949	SizeofOperand	double
>16950	Sizeof	sizeof
>16951	Callee	CPLMalloc
>16952	Identifier	CPLMalloc
>16953	CastTarget	double *
>16954	Identifier	padfX
>16955	IdentifierDeclStatement	 
>16956	IdentifierDecl	* pabSuccess
>16957	Identifier	pabSuccess
>16958	IdentifierDeclType	int *
>16959	IdentifierDeclStatement	 
>16960	IdentifierDecl	* padfZ
>16961	Identifier	padfZ
>16962	IdentifierDeclType	double *
>16963	IdentifierDecl	* padfY
>16964	Identifier	padfY
>16965	IdentifierDeclType	double *
>16966	IdentifierDecl	* padfX
>16967	Identifier	padfX
>16968	IdentifierDeclType	double *
>16969	IdentifierDeclStatement	 
>16970	IdentifierDecl	nSrcYSize = poWK -> nSrcYSize
>16971	AssignmentExpr	nSrcYSize = poWK -> nSrcYSize
>16972	PtrMemberAccess	poWK -> nSrcYSize
>16973	Identifier	nSrcYSize
>16974	Identifier	poWK
>16975	Identifier	nSrcYSize
>16976	Identifier	nSrcYSize
>16977	IdentifierDeclType	int
>16978	IdentifierDecl	nSrcXSize = poWK -> nSrcXSize
>16979	AssignmentExpr	nSrcXSize = poWK -> nSrcXSize
>16980	PtrMemberAccess	poWK -> nSrcXSize
>16981	Identifier	nSrcXSize
>16982	Identifier	poWK
>16983	Identifier	nSrcXSize
>16984	Identifier	nSrcXSize
>16985	IdentifierDeclType	int
>16986	IdentifierDeclStatement	 
>16987	IdentifierDecl	nDstXSize = poWK -> nDstXSize
>16988	AssignmentExpr	nDstXSize = poWK -> nDstXSize
>16989	PtrMemberAccess	poWK -> nDstXSize
>16990	Identifier	nDstXSize
>16991	Identifier	poWK
>16992	Identifier	nDstXSize
>16993	Identifier	nDstXSize
>16994	IdentifierDeclType	int
>16995	IdentifierDeclStatement	 
>16996	IdentifierDecl	iDstY
>16997	Identifier	iDstY
>16998	IdentifierDeclType	int
>16999	IdentifierDeclStatement	 
>17000	IdentifierDecl	iYMax = psJob -> iYMax
>17001	AssignmentExpr	iYMax = psJob -> iYMax
>17002	PtrMemberAccess	psJob -> iYMax
>17003	Identifier	iYMax
>17004	Identifier	psJob
>17005	Identifier	iYMax
>17006	Identifier	iYMax
>17007	IdentifierDeclType	int
>17008	IdentifierDeclStatement	 
>17009	IdentifierDecl	iYMin = psJob -> iYMin
>17010	AssignmentExpr	iYMin = psJob -> iYMin
>17011	PtrMemberAccess	psJob -> iYMin
>17012	Identifier	iYMin
>17013	Identifier	psJob
>17014	Identifier	iYMin
>17015	Identifier	iYMin
>17016	IdentifierDeclType	int
>17017	IdentifierDeclStatement	 
>17018	IdentifierDecl	* poWK = psJob -> poWK
>17019	AssignmentExpr	* poWK = psJob -> poWK
>17020	PtrMemberAccess	psJob -> poWK
>17021	Identifier	poWK
>17022	Identifier	psJob
>17023	Identifier	poWK
>17024	Identifier	poWK
>17025	IdentifierDeclType	GDALWarpKernel *
>17026	IdentifierDeclStatement	 
>17027	IdentifierDecl	* psJob = ( GWKJobStruct * ) pData
>17028	AssignmentExpr	* psJob = ( GWKJobStruct * ) pData
>17029	CastExpression	( GWKJobStruct * ) pData
>17030	Identifier	pData
>17031	CastTarget	GWKJobStruct *
>17032	Identifier	psJob
>17033	Identifier	psJob
>17034	IdentifierDeclType	GWKJobStruct *
>17088	FunctionDef	GWKBilinearNoMasksShort (GDALWarpKernel * poWK)
>17089	ParameterList	GDALWarpKernel * poWK
>17090	Parameter	 
>17091	Identifier	poWK
>17092	ParameterType	GDALWarpKernel *
>17093	ReturnType	static CPLErr
>17094	CompoundStatement	 
>17095	ReturnStatement	 
>17096	CallExpression	GWKRun ( poWK , \"GWKBilinearNoMasksShort\" , GWKBilinearNoMasksShortThread )
>17097	ArgumentList	poWK
>17098	Argument	GWKBilinearNoMasksShortThread
>17099	Identifier	GWKBilinearNoMasksShortThread
>17100	Argument	\"GWKBilinearNoMasksShort\"
>17101	PrimaryExpression	\"GWKBilinearNoMasksShort\"
>17102	Argument	poWK
>17103	Identifier	poWK
>17104	Callee	GWKRun
>17105	Identifier	GWKRun
>17112	FunctionDef	GWKBilinearNoMasksShortThread (void * pData)
>17113	ParameterList	void * pData
>17114	Parameter	 
>17115	Identifier	pData
>17116	ParameterType	void *
>17117	ReturnType	static void
>17118	CompoundStatement	 
>17119	ExpressionStatement	 
>17120	CallExpression	CPLFree ( pabSuccess )
>17121	ArgumentList	pabSuccess
>17122	Argument	pabSuccess
>17123	Identifier	pabSuccess
>17124	Callee	CPLFree
>17125	Identifier	CPLFree
>17126	ExpressionStatement	 
>17127	CallExpression	CPLFree ( padfZ )
>17128	ArgumentList	padfZ
>17129	Argument	padfZ
>17130	Identifier	padfZ
>17131	Callee	CPLFree
>17132	Identifier	CPLFree
>17133	ExpressionStatement	 
>17134	CallExpression	CPLFree ( padfY )
>17135	ArgumentList	padfY
>17136	Argument	padfY
>17137	Identifier	padfY
>17138	Callee	CPLFree
>17139	Identifier	CPLFree
>17140	ExpressionStatement	 
>17141	CallExpression	CPLFree ( padfX )
>17142	ArgumentList	padfX
>17143	Argument	padfX
>17144	Identifier	padfX
>17145	Callee	CPLFree
>17146	Identifier	CPLFree
>17147	ForStatement	for ( iDstY = iYMin ; iDstY < iYMax ; iDstY ++ )
>17148	CompoundStatement	 
>17149	IfStatement	if ( psJob -> pfnProgress ( psJob ) )
>17150	BreakStatement	 
>17151	Condition	 
>17152	CallExpression	psJob -> pfnProgress ( psJob )
>17153	ArgumentList	psJob
>17154	Argument	psJob
>17155	Identifier	psJob
>17156	Callee	psJob -> pfnProgress
>17157	PtrMemberAccess	psJob -> pfnProgress
>17158	Identifier	pfnProgress
>17159	Identifier	psJob
>17160	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>17161	CompoundStatement	 
>17162	ForStatement	for ( iBand = 0 ; iBand < poWK -> nBands ; iBand ++ )
>17163	CompoundStatement	 
>17164	ExpressionStatement	 
>17165	AssignmentExpr	( ( GInt16 * ) poWK -> papabyDstImage [ iBand ] ) [ iDstOffset ] = iValue
>17166	Identifier	iValue
>17167	ArrayIndexing	( ( GInt16 * ) poWK -> papabyDstImage [ iBand ] ) [ iDstOffset ]
>17168	Identifier	iDstOffset
>17169	CastExpression	( GInt16 * ) poWK -> papabyDstImage [ iBand ]
>17170	ArrayIndexing	poWK -> papabyDstImage [ iBand ]
>17171	Identifier	iBand
>17172	PtrMemberAccess	poWK -> papabyDstImage
>17173	Identifier	papabyDstImage
>17174	Identifier	poWK
>17175	CastTarget	GInt16 *
>17176	ExpressionStatement	 
>17177	CallExpression	GWKBilinearResampleNoMasksShort ( poWK , iBand , padfX [ iDstX ] - poWK -> nSrcXOff , padfY [ iDstX ] - poWK -> \
>17178	ArgumentList	poWK
>17179	Argument	& iValue
>17180	UnaryOp	& iValue
>17181	Identifier	iValue
>17182	UnaryOperator	&
>17183	Argument	padfY [ iDstX ] - poWK -> nSrcYOff
>17184	AdditiveExpression	padfY [ iDstX ] - poWK -> nSrcYOff
>17185	PtrMemberAccess	poWK -> nSrcYOff
>17186	Identifier	nSrcYOff
>17187	Identifier	poWK
>17188	ArrayIndexing	padfY [ iDstX ]
>17189	Identifier	iDstX
>17190	Identifier	padfY
>17191	Argument	padfX [ iDstX ] - poWK -> nSrcXOff
>17192	AdditiveExpression	padfX [ iDstX ] - poWK -> nSrcXOff
>17193	PtrMemberAccess	poWK -> nSrcXOff
>17194	Identifier	nSrcXOff
>17195	Identifier	poWK
>17196	ArrayIndexing	padfX [ iDstX ]
>17197	Identifier	iDstX
>17198	Identifier	padfX
>17199	Argument	iBand
>17200	Identifier	iBand
>17201	Argument	poWK
>17202	Identifier	poWK
>17203	Callee	GWKBilinearResampleNoMasksShort
>17204	Identifier	GWKBilinearResampleNoMasksShort
>17205	IdentifierDeclStatement	 
>17206	IdentifierDecl	iValue = 0
>17207	AssignmentExpr	iValue = 0
>17208	PrimaryExpression	0
>17209	Identifier	iValue
>17210	Identifier	iValue
>17211	IdentifierDeclType	GInt16
>17212	IncDecOp	 
>17213	IncDec	++
>17214	Identifier	iBand
>17215	Condition	 
>17216	RelationalExpression	iBand < poWK -> nBands
>17217	PtrMemberAccess	poWK -> nBands
>17218	Identifier	nBands
>17219	Identifier	poWK
>17220	Identifier	iBand
>17221	ForInit	 
>17222	AssignmentExpr	iBand = 0
>17223	PrimaryExpression	0
>17224	Identifier	iBand
>17225	ExpressionStatement	 
>17226	AssignmentExpr	iDstOffset = iDstX + iDstY * nDstXSize
>17227	AdditiveExpression	iDstX + iDstY * nDstXSize
>17228	MultiplicativeExpression	iDstY * nDstXSize
>17229	Identifier	nDstXSize
>17230	Identifier	iDstY
>17231	Identifier	iDstX
>17232	Identifier	iDstOffset
>17233	IdentifierDeclStatement	 
>17234	IdentifierDecl	iDstOffset
>17235	Identifier	iDstOffset
>17236	IdentifierDeclType	int
>17237	IdentifierDeclStatement	 
>17238	IdentifierDecl	iBand
>17239	Identifier	iBand
>17240	IdentifierDeclType	int
>17241	ExpressionStatement	 
>17242	CallExpression	COMPUTE_iSrcOffset ( pabSuccess , iDstX , padfX , padfY , poWK , nSrcXSize , nSrcYSize )
>17243	ArgumentList	pabSuccess
>17244	Argument	nSrcYSize
>17245	Identifier	nSrcYSize
>17246	Argument	nSrcXSize
>17247	Identifier	nSrcXSize
>17248	Argument	poWK
>17249	Identifier	poWK
>17250	Argument	padfY
>17251	Identifier	padfY
>17252	Argument	padfX
>17253	Identifier	padfX
>17254	Argument	iDstX
>17255	Identifier	iDstX
>17256	Argument	pabSuccess
>17257	Identifier	pabSuccess
>17258	Callee	COMPUTE_iSrcOffset
>17259	Identifier	COMPUTE_iSrcOffset
>17260	IncDecOp	 
>17261	IncDec	++
>17262	Identifier	iDstX
>17263	Condition	 
>17264	RelationalExpression	iDstX < nDstXSize
>17265	Identifier	nDstXSize
>17266	Identifier	iDstX
>17267	ForInit	 
>17268	AssignmentExpr	iDstX = 0
>17269	PrimaryExpression	0
>17270	Identifier	iDstX
>17271	ExpressionStatement	 
>17272	CallExpression	poWK -> pfnTransformer ( psJob -> pTransformerArg , TRUE , nDstXSize , padfX , padfY , padfZ , pabSuccess )
>17273	ArgumentList	psJob -> pTransformerArg
>17274	Argument	pabSuccess
>17275	Identifier	pabSuccess
>17276	Argument	padfZ
>17277	Identifier	padfZ
>17278	Argument	padfY
>17279	Identifier	padfY
>17280	Argument	padfX
>17281	Identifier	padfX
>17282	Argument	nDstXSize
>17283	Identifier	nDstXSize
>17284	Argument	TRUE
>17285	Identifier	TRUE
>17286	Argument	psJob -> pTransformerArg
>17287	PtrMemberAccess	psJob -> pTransformerArg
>17288	Identifier	pTransformerArg
>17289	Identifier	psJob
>17290	Callee	poWK -> pfnTransformer
>17291	PtrMemberAccess	poWK -> pfnTransformer
>17292	Identifier	pfnTransformer
>17293	Identifier	poWK
>17294	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>17295	CompoundStatement	 
>17296	ExpressionStatement	 
>17297	AssignmentExpr	padfZ [ iDstX ] = 0.0
>17298	PrimaryExpression	0.0
>17299	ArrayIndexing	padfZ [ iDstX ]
>17300	Identifier	iDstX
>17301	Identifier	padfZ
>17302	ExpressionStatement	 
>17303	AssignmentExpr	padfY [ iDstX ] = iDstY + 0.5 + poWK -> nDstYOff
>17304	AdditiveExpression	iDstY + 0.5 + poWK -> nDstYOff
>17305	AdditiveExpression	0.5 + poWK -> nDstYOff
>17306	PtrMemberAccess	poWK -> nDstYOff
>17307	Identifier	nDstYOff
>17308	Identifier	poWK
>17309	PrimaryExpression	0.5
>17310	Identifier	iDstY
>17311	ArrayIndexing	padfY [ iDstX ]
>17312	Identifier	iDstX
>17313	Identifier	padfY
>17314	ExpressionStatement	 
>17315	AssignmentExpr	padfX [ iDstX ] = iDstX + 0.5 + poWK -> nDstXOff
>17316	AdditiveExpression	iDstX + 0.5 + poWK -> nDstXOff
>17317	AdditiveExpression	0.5 + poWK -> nDstXOff
>17318	PtrMemberAccess	poWK -> nDstXOff
>17319	Identifier	nDstXOff
>17320	Identifier	poWK
>17321	PrimaryExpression	0.5
>17322	Identifier	iDstX
>17323	ArrayIndexing	padfX [ iDstX ]
>17324	Identifier	iDstX
>17325	Identifier	padfX
>17326	IncDecOp	 
>17327	IncDec	++
>17328	Identifier	iDstX
>17329	Condition	 
>17330	RelationalExpression	iDstX < nDstXSize
>17331	Identifier	nDstXSize
>17332	Identifier	iDstX
>17333	ForInit	 
>17334	AssignmentExpr	iDstX = 0
>17335	PrimaryExpression	0
>17336	Identifier	iDstX
>17337	IdentifierDeclStatement	 
>17338	IdentifierDecl	iDstX
>17339	Identifier	iDstX
>17340	IdentifierDeclType	int
>17341	IncDecOp	 
>17342	IncDec	++
>17343	Identifier	iDstY
>17344	Condition	 
>17345	RelationalExpression	iDstY < iYMax
>17346	Identifier	iYMax
>17347	Identifier	iDstY
>17348	ForInit	 
>17349	AssignmentExpr	iDstY = iYMin
>17350	Identifier	iYMin
>17351	Identifier	iDstY
>17352	ExpressionStatement	 
>17353	AssignmentExpr	pabSuccess = ( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>17354	CastExpression	( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>17355	CallExpression	CPLMalloc ( sizeof ( int ) * nDstXSize )
>17356	ArgumentList	sizeof ( int ) * nDstXSize
>17357	Argument	sizeof ( int ) * nDstXSize
>17358	MultiplicativeExpression	sizeof ( int ) * nDstXSize
>17359	Identifier	nDstXSize
>17360	SizeofExpr	sizeof ( int )
>17361	SizeofOperand	int
>17362	Sizeof	sizeof
>17363	Callee	CPLMalloc
>17364	Identifier	CPLMalloc
>17365	CastTarget	int *
>17366	Identifier	pabSuccess
>17367	ExpressionStatement	 
>17368	AssignmentExpr	padfZ = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>17369	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>17370	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>17371	ArgumentList	sizeof ( double ) * nDstXSize
>17372	Argument	sizeof ( double ) * nDstXSize
>17373	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>17374	Identifier	nDstXSize
>17375	SizeofExpr	sizeof ( double )
>17376	SizeofOperand	double
>17377	Sizeof	sizeof
>17378	Callee	CPLMalloc
>17379	Identifier	CPLMalloc
>17380	CastTarget	double *
>17381	Identifier	padfZ
>17382	ExpressionStatement	 
>17383	AssignmentExpr	padfY = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>17384	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>17385	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>17386	ArgumentList	sizeof ( double ) * nDstXSize
>17387	Argument	sizeof ( double ) * nDstXSize
>17388	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>17389	Identifier	nDstXSize
>17390	SizeofExpr	sizeof ( double )
>17391	SizeofOperand	double
>17392	Sizeof	sizeof
>17393	Callee	CPLMalloc
>17394	Identifier	CPLMalloc
>17395	CastTarget	double *
>17396	Identifier	padfY
>17397	ExpressionStatement	 
>17398	AssignmentExpr	padfX = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>17399	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>17400	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>17401	ArgumentList	sizeof ( double ) * nDstXSize
>17402	Argument	sizeof ( double ) * nDstXSize
>17403	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>17404	Identifier	nDstXSize
>17405	SizeofExpr	sizeof ( double )
>17406	SizeofOperand	double
>17407	Sizeof	sizeof
>17408	Callee	CPLMalloc
>17409	Identifier	CPLMalloc
>17410	CastTarget	double *
>17411	Identifier	padfX
>17412	IdentifierDeclStatement	 
>17413	IdentifierDecl	* pabSuccess
>17414	Identifier	pabSuccess
>17415	IdentifierDeclType	int *
>17416	IdentifierDeclStatement	 
>17417	IdentifierDecl	* padfZ
>17418	Identifier	padfZ
>17419	IdentifierDeclType	double *
>17420	IdentifierDecl	* padfY
>17421	Identifier	padfY
>17422	IdentifierDeclType	double *
>17423	IdentifierDecl	* padfX
>17424	Identifier	padfX
>17425	IdentifierDeclType	double *
>17426	IdentifierDeclStatement	 
>17427	IdentifierDecl	nSrcYSize = poWK -> nSrcYSize
>17428	AssignmentExpr	nSrcYSize = poWK -> nSrcYSize
>17429	PtrMemberAccess	poWK -> nSrcYSize
>17430	Identifier	nSrcYSize
>17431	Identifier	poWK
>17432	Identifier	nSrcYSize
>17433	Identifier	nSrcYSize
>17434	IdentifierDeclType	int
>17435	IdentifierDecl	nSrcXSize = poWK -> nSrcXSize
>17436	AssignmentExpr	nSrcXSize = poWK -> nSrcXSize
>17437	PtrMemberAccess	poWK -> nSrcXSize
>17438	Identifier	nSrcXSize
>17439	Identifier	poWK
>17440	Identifier	nSrcXSize
>17441	Identifier	nSrcXSize
>17442	IdentifierDeclType	int
>17443	IdentifierDeclStatement	 
>17444	IdentifierDecl	nDstXSize = poWK -> nDstXSize
>17445	AssignmentExpr	nDstXSize = poWK -> nDstXSize
>17446	PtrMemberAccess	poWK -> nDstXSize
>17447	Identifier	nDstXSize
>17448	Identifier	poWK
>17449	Identifier	nDstXSize
>17450	Identifier	nDstXSize
>17451	IdentifierDeclType	int
>17452	IdentifierDeclStatement	 
>17453	IdentifierDecl	iDstY
>17454	Identifier	iDstY
>17455	IdentifierDeclType	int
>17456	IdentifierDeclStatement	 
>17457	IdentifierDecl	iYMax = psJob -> iYMax
>17458	AssignmentExpr	iYMax = psJob -> iYMax
>17459	PtrMemberAccess	psJob -> iYMax
>17460	Identifier	iYMax
>17461	Identifier	psJob
>17462	Identifier	iYMax
>17463	Identifier	iYMax
>17464	IdentifierDeclType	int
>17465	IdentifierDeclStatement	 
>17466	IdentifierDecl	iYMin = psJob -> iYMin
>17467	AssignmentExpr	iYMin = psJob -> iYMin
>17468	PtrMemberAccess	psJob -> iYMin
>17469	Identifier	iYMin
>17470	Identifier	psJob
>17471	Identifier	iYMin
>17472	Identifier	iYMin
>17473	IdentifierDeclType	int
>17474	IdentifierDeclStatement	 
>17475	IdentifierDecl	* poWK = psJob -> poWK
>17476	AssignmentExpr	* poWK = psJob -> poWK
>17477	PtrMemberAccess	psJob -> poWK
>17478	Identifier	poWK
>17479	Identifier	psJob
>17480	Identifier	poWK
>17481	Identifier	poWK
>17482	IdentifierDeclType	GDALWarpKernel *
>17483	IdentifierDeclStatement	 
>17484	IdentifierDecl	* psJob = ( GWKJobStruct * ) pData
>17485	AssignmentExpr	* psJob = ( GWKJobStruct * ) pData
>17486	CastExpression	( GWKJobStruct * ) pData
>17487	Identifier	pData
>17488	CastTarget	GWKJobStruct *
>17489	Identifier	psJob
>17490	Identifier	psJob
>17491	IdentifierDeclType	GWKJobStruct *
>17544	FunctionDef	GWKCubicNoMasksShort (GDALWarpKernel * poWK)
>17545	ParameterList	GDALWarpKernel * poWK
>17546	Parameter	 
>17547	Identifier	poWK
>17548	ParameterType	GDALWarpKernel *
>17549	ReturnType	static CPLErr
>17550	CompoundStatement	 
>17551	ReturnStatement	 
>17552	CallExpression	GWKRun ( poWK , \"GWKCubicNoMasksShort\" , GWKCubicNoMasksShortThread )
>17553	ArgumentList	poWK
>17554	Argument	GWKCubicNoMasksShortThread
>17555	Identifier	GWKCubicNoMasksShortThread
>17556	Argument	\"GWKCubicNoMasksShort\"
>17557	PrimaryExpression	\"GWKCubicNoMasksShort\"
>17558	Argument	poWK
>17559	Identifier	poWK
>17560	Callee	GWKRun
>17561	Identifier	GWKRun
>17568	FunctionDef	GWKCubicNoMasksShortThread (void * pData)
>17569	ParameterList	void * pData
>17570	Parameter	 
>17571	Identifier	pData
>17572	ParameterType	void *
>17573	ReturnType	static void
>17574	CompoundStatement	 
>17575	ExpressionStatement	 
>17576	CallExpression	CPLFree ( pabSuccess )
>17577	ArgumentList	pabSuccess
>17578	Argument	pabSuccess
>17579	Identifier	pabSuccess
>17580	Callee	CPLFree
>17581	Identifier	CPLFree
>17582	ExpressionStatement	 
>17583	CallExpression	CPLFree ( padfZ )
>17584	ArgumentList	padfZ
>17585	Argument	padfZ
>17586	Identifier	padfZ
>17587	Callee	CPLFree
>17588	Identifier	CPLFree
>17589	ExpressionStatement	 
>17590	CallExpression	CPLFree ( padfY )
>17591	ArgumentList	padfY
>17592	Argument	padfY
>17593	Identifier	padfY
>17594	Callee	CPLFree
>17595	Identifier	CPLFree
>17596	ExpressionStatement	 
>17597	CallExpression	CPLFree ( padfX )
>17598	ArgumentList	padfX
>17599	Argument	padfX
>17600	Identifier	padfX
>17601	Callee	CPLFree
>17602	Identifier	CPLFree
>17603	ForStatement	for ( iDstY = iYMin ; iDstY < iYMax ; iDstY ++ )
>17604	CompoundStatement	 
>17605	IfStatement	if ( psJob -> pfnProgress ( psJob ) )
>17606	BreakStatement	 
>17607	Condition	 
>17608	CallExpression	psJob -> pfnProgress ( psJob )
>17609	ArgumentList	psJob
>17610	Argument	psJob
>17611	Identifier	psJob
>17612	Callee	psJob -> pfnProgress
>17613	PtrMemberAccess	psJob -> pfnProgress
>17614	Identifier	pfnProgress
>17615	Identifier	psJob
>17616	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>17617	CompoundStatement	 
>17618	ForStatement	for ( iBand = 0 ; iBand < poWK -> nBands ; iBand ++ )
>17619	CompoundStatement	 
>17620	ExpressionStatement	 
>17621	AssignmentExpr	( ( GInt16 * ) poWK -> papabyDstImage [ iBand ] ) [ iDstOffset ] = iValue
>17622	Identifier	iValue
>17623	ArrayIndexing	( ( GInt16 * ) poWK -> papabyDstImage [ iBand ] ) [ iDstOffset ]
>17624	Identifier	iDstOffset
>17625	CastExpression	( GInt16 * ) poWK -> papabyDstImage [ iBand ]
>17626	ArrayIndexing	poWK -> papabyDstImage [ iBand ]
>17627	Identifier	iBand
>17628	PtrMemberAccess	poWK -> papabyDstImage
>17629	Identifier	papabyDstImage
>17630	Identifier	poWK
>17631	CastTarget	GInt16 *
>17632	ExpressionStatement	 
>17633	CallExpression	GWKCubicResampleNoMasksShort ( poWK , iBand , padfX [ iDstX ] - poWK -> nSrcXOff , padfY [ iDstX ] - poWK -> nSrcYOff , & \
>17634	ArgumentList	poWK
>17635	Argument	& iValue
>17636	UnaryOp	& iValue
>17637	Identifier	iValue
>17638	UnaryOperator	&
>17639	Argument	padfY [ iDstX ] - poWK -> nSrcYOff
>17640	AdditiveExpression	padfY [ iDstX ] - poWK -> nSrcYOff
>17641	PtrMemberAccess	poWK -> nSrcYOff
>17642	Identifier	nSrcYOff
>17643	Identifier	poWK
>17644	ArrayIndexing	padfY [ iDstX ]
>17645	Identifier	iDstX
>17646	Identifier	padfY
>17647	Argument	padfX [ iDstX ] - poWK -> nSrcXOff
>17648	AdditiveExpression	padfX [ iDstX ] - poWK -> nSrcXOff
>17649	PtrMemberAccess	poWK -> nSrcXOff
>17650	Identifier	nSrcXOff
>17651	Identifier	poWK
>17652	ArrayIndexing	padfX [ iDstX ]
>17653	Identifier	iDstX
>17654	Identifier	padfX
>17655	Argument	iBand
>17656	Identifier	iBand
>17657	Argument	poWK
>17658	Identifier	poWK
>17659	Callee	GWKCubicResampleNoMasksShort
>17660	Identifier	GWKCubicResampleNoMasksShort
>17661	IdentifierDeclStatement	 
>17662	IdentifierDecl	iValue = 0
>17663	AssignmentExpr	iValue = 0
>17664	PrimaryExpression	0
>17665	Identifier	iValue
>17666	Identifier	iValue
>17667	IdentifierDeclType	GInt16
>17668	IncDecOp	 
>17669	IncDec	++
>17670	Identifier	iBand
>17671	Condition	 
>17672	RelationalExpression	iBand < poWK -> nBands
>17673	PtrMemberAccess	poWK -> nBands
>17674	Identifier	nBands
>17675	Identifier	poWK
>17676	Identifier	iBand
>17677	ForInit	 
>17678	AssignmentExpr	iBand = 0
>17679	PrimaryExpression	0
>17680	Identifier	iBand
>17681	ExpressionStatement	 
>17682	AssignmentExpr	iDstOffset = iDstX + iDstY * nDstXSize
>17683	AdditiveExpression	iDstX + iDstY * nDstXSize
>17684	MultiplicativeExpression	iDstY * nDstXSize
>17685	Identifier	nDstXSize
>17686	Identifier	iDstY
>17687	Identifier	iDstX
>17688	Identifier	iDstOffset
>17689	IdentifierDeclStatement	 
>17690	IdentifierDecl	iDstOffset
>17691	Identifier	iDstOffset
>17692	IdentifierDeclType	int
>17693	IdentifierDeclStatement	 
>17694	IdentifierDecl	iBand
>17695	Identifier	iBand
>17696	IdentifierDeclType	int
>17697	ExpressionStatement	 
>17698	CallExpression	COMPUTE_iSrcOffset ( pabSuccess , iDstX , padfX , padfY , poWK , nSrcXSize , nSrcYSize )
>17699	ArgumentList	pabSuccess
>17700	Argument	nSrcYSize
>17701	Identifier	nSrcYSize
>17702	Argument	nSrcXSize
>17703	Identifier	nSrcXSize
>17704	Argument	poWK
>17705	Identifier	poWK
>17706	Argument	padfY
>17707	Identifier	padfY
>17708	Argument	padfX
>17709	Identifier	padfX
>17710	Argument	iDstX
>17711	Identifier	iDstX
>17712	Argument	pabSuccess
>17713	Identifier	pabSuccess
>17714	Callee	COMPUTE_iSrcOffset
>17715	Identifier	COMPUTE_iSrcOffset
>17716	IncDecOp	 
>17717	IncDec	++
>17718	Identifier	iDstX
>17719	Condition	 
>17720	RelationalExpression	iDstX < nDstXSize
>17721	Identifier	nDstXSize
>17722	Identifier	iDstX
>17723	ForInit	 
>17724	AssignmentExpr	iDstX = 0
>17725	PrimaryExpression	0
>17726	Identifier	iDstX
>17727	ExpressionStatement	 
>17728	CallExpression	poWK -> pfnTransformer ( psJob -> pTransformerArg , TRUE , nDstXSize , padfX , padfY , padfZ , pabSuccess )
>17729	ArgumentList	psJob -> pTransformerArg
>17730	Argument	pabSuccess
>17731	Identifier	pabSuccess
>17732	Argument	padfZ
>17733	Identifier	padfZ
>17734	Argument	padfY
>17735	Identifier	padfY
>17736	Argument	padfX
>17737	Identifier	padfX
>17738	Argument	nDstXSize
>17739	Identifier	nDstXSize
>17740	Argument	TRUE
>17741	Identifier	TRUE
>17742	Argument	psJob -> pTransformerArg
>17743	PtrMemberAccess	psJob -> pTransformerArg
>17744	Identifier	pTransformerArg
>17745	Identifier	psJob
>17746	Callee	poWK -> pfnTransformer
>17747	PtrMemberAccess	poWK -> pfnTransformer
>17748	Identifier	pfnTransformer
>17749	Identifier	poWK
>17750	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>17751	CompoundStatement	 
>17752	ExpressionStatement	 
>17753	AssignmentExpr	padfZ [ iDstX ] = 0.0
>17754	PrimaryExpression	0.0
>17755	ArrayIndexing	padfZ [ iDstX ]
>17756	Identifier	iDstX
>17757	Identifier	padfZ
>17758	ExpressionStatement	 
>17759	AssignmentExpr	padfY [ iDstX ] = iDstY + 0.5 + poWK -> nDstYOff
>17760	AdditiveExpression	iDstY + 0.5 + poWK -> nDstYOff
>17761	AdditiveExpression	0.5 + poWK -> nDstYOff
>17762	PtrMemberAccess	poWK -> nDstYOff
>17763	Identifier	nDstYOff
>17764	Identifier	poWK
>17765	PrimaryExpression	0.5
>17766	Identifier	iDstY
>17767	ArrayIndexing	padfY [ iDstX ]
>17768	Identifier	iDstX
>17769	Identifier	padfY
>17770	ExpressionStatement	 
>17771	AssignmentExpr	padfX [ iDstX ] = iDstX + 0.5 + poWK -> nDstXOff
>17772	AdditiveExpression	iDstX + 0.5 + poWK -> nDstXOff
>17773	AdditiveExpression	0.5 + poWK -> nDstXOff
>17774	PtrMemberAccess	poWK -> nDstXOff
>17775	Identifier	nDstXOff
>17776	Identifier	poWK
>17777	PrimaryExpression	0.5
>17778	Identifier	iDstX
>17779	ArrayIndexing	padfX [ iDstX ]
>17780	Identifier	iDstX
>17781	Identifier	padfX
>17782	IncDecOp	 
>17783	IncDec	++
>17784	Identifier	iDstX
>17785	Condition	 
>17786	RelationalExpression	iDstX < nDstXSize
>17787	Identifier	nDstXSize
>17788	Identifier	iDstX
>17789	ForInit	 
>17790	AssignmentExpr	iDstX = 0
>17791	PrimaryExpression	0
>17792	Identifier	iDstX
>17793	IdentifierDeclStatement	 
>17794	IdentifierDecl	iDstX
>17795	Identifier	iDstX
>17796	IdentifierDeclType	int
>17797	IncDecOp	 
>17798	IncDec	++
>17799	Identifier	iDstY
>17800	Condition	 
>17801	RelationalExpression	iDstY < iYMax
>17802	Identifier	iYMax
>17803	Identifier	iDstY
>17804	ForInit	 
>17805	AssignmentExpr	iDstY = iYMin
>17806	Identifier	iYMin
>17807	Identifier	iDstY
>17808	ExpressionStatement	 
>17809	AssignmentExpr	pabSuccess = ( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>17810	CastExpression	( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>17811	CallExpression	CPLMalloc ( sizeof ( int ) * nDstXSize )
>17812	ArgumentList	sizeof ( int ) * nDstXSize
>17813	Argument	sizeof ( int ) * nDstXSize
>17814	MultiplicativeExpression	sizeof ( int ) * nDstXSize
>17815	Identifier	nDstXSize
>17816	SizeofExpr	sizeof ( int )
>17817	SizeofOperand	int
>17818	Sizeof	sizeof
>17819	Callee	CPLMalloc
>17820	Identifier	CPLMalloc
>17821	CastTarget	int *
>17822	Identifier	pabSuccess
>17823	ExpressionStatement	 
>17824	AssignmentExpr	padfZ = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>17825	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>17826	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>17827	ArgumentList	sizeof ( double ) * nDstXSize
>17828	Argument	sizeof ( double ) * nDstXSize
>17829	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>17830	Identifier	nDstXSize
>17831	SizeofExpr	sizeof ( double )
>17832	SizeofOperand	double
>17833	Sizeof	sizeof
>17834	Callee	CPLMalloc
>17835	Identifier	CPLMalloc
>17836	CastTarget	double *
>17837	Identifier	padfZ
>17838	ExpressionStatement	 
>17839	AssignmentExpr	padfY = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>17840	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>17841	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>17842	ArgumentList	sizeof ( double ) * nDstXSize
>17843	Argument	sizeof ( double ) * nDstXSize
>17844	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>17845	Identifier	nDstXSize
>17846	SizeofExpr	sizeof ( double )
>17847	SizeofOperand	double
>17848	Sizeof	sizeof
>17849	Callee	CPLMalloc
>17850	Identifier	CPLMalloc
>17851	CastTarget	double *
>17852	Identifier	padfY
>17853	ExpressionStatement	 
>17854	AssignmentExpr	padfX = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>17855	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>17856	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>17857	ArgumentList	sizeof ( double ) * nDstXSize
>17858	Argument	sizeof ( double ) * nDstXSize
>17859	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>17860	Identifier	nDstXSize
>17861	SizeofExpr	sizeof ( double )
>17862	SizeofOperand	double
>17863	Sizeof	sizeof
>17864	Callee	CPLMalloc
>17865	Identifier	CPLMalloc
>17866	CastTarget	double *
>17867	Identifier	padfX
>17868	IdentifierDeclStatement	 
>17869	IdentifierDecl	* pabSuccess
>17870	Identifier	pabSuccess
>17871	IdentifierDeclType	int *
>17872	IdentifierDeclStatement	 
>17873	IdentifierDecl	* padfZ
>17874	Identifier	padfZ
>17875	IdentifierDeclType	double *
>17876	IdentifierDecl	* padfY
>17877	Identifier	padfY
>17878	IdentifierDeclType	double *
>17879	IdentifierDecl	* padfX
>17880	Identifier	padfX
>17881	IdentifierDeclType	double *
>17882	IdentifierDeclStatement	 
>17883	IdentifierDecl	nSrcYSize = poWK -> nSrcYSize
>17884	AssignmentExpr	nSrcYSize = poWK -> nSrcYSize
>17885	PtrMemberAccess	poWK -> nSrcYSize
>17886	Identifier	nSrcYSize
>17887	Identifier	poWK
>17888	Identifier	nSrcYSize
>17889	Identifier	nSrcYSize
>17890	IdentifierDeclType	int
>17891	IdentifierDecl	nSrcXSize = poWK -> nSrcXSize
>17892	AssignmentExpr	nSrcXSize = poWK -> nSrcXSize
>17893	PtrMemberAccess	poWK -> nSrcXSize
>17894	Identifier	nSrcXSize
>17895	Identifier	poWK
>17896	Identifier	nSrcXSize
>17897	Identifier	nSrcXSize
>17898	IdentifierDeclType	int
>17899	IdentifierDeclStatement	 
>17900	IdentifierDecl	nDstXSize = poWK -> nDstXSize
>17901	AssignmentExpr	nDstXSize = poWK -> nDstXSize
>17902	PtrMemberAccess	poWK -> nDstXSize
>17903	Identifier	nDstXSize
>17904	Identifier	poWK
>17905	Identifier	nDstXSize
>17906	Identifier	nDstXSize
>17907	IdentifierDeclType	int
>17908	IdentifierDeclStatement	 
>17909	IdentifierDecl	iDstY
>17910	Identifier	iDstY
>17911	IdentifierDeclType	int
>17912	IdentifierDeclStatement	 
>17913	IdentifierDecl	iYMax = psJob -> iYMax
>17914	AssignmentExpr	iYMax = psJob -> iYMax
>17915	PtrMemberAccess	psJob -> iYMax
>17916	Identifier	iYMax
>17917	Identifier	psJob
>17918	Identifier	iYMax
>17919	Identifier	iYMax
>17920	IdentifierDeclType	int
>17921	IdentifierDeclStatement	 
>17922	IdentifierDecl	iYMin = psJob -> iYMin
>17923	AssignmentExpr	iYMin = psJob -> iYMin
>17924	PtrMemberAccess	psJob -> iYMin
>17925	Identifier	iYMin
>17926	Identifier	psJob
>17927	Identifier	iYMin
>17928	Identifier	iYMin
>17929	IdentifierDeclType	int
>17930	IdentifierDeclStatement	 
>17931	IdentifierDecl	* poWK = psJob -> poWK
>17932	AssignmentExpr	* poWK = psJob -> poWK
>17933	PtrMemberAccess	psJob -> poWK
>17934	Identifier	poWK
>17935	Identifier	psJob
>17936	Identifier	poWK
>17937	Identifier	poWK
>17938	IdentifierDeclType	GDALWarpKernel *
>17939	IdentifierDeclStatement	 
>17940	IdentifierDecl	* psJob = ( GWKJobStruct * ) pData
>17941	AssignmentExpr	* psJob = ( GWKJobStruct * ) pData
>17942	CastExpression	( GWKJobStruct * ) pData
>17943	Identifier	pData
>17944	CastTarget	GWKJobStruct *
>17945	Identifier	psJob
>17946	Identifier	psJob
>17947	IdentifierDeclType	GWKJobStruct *
>18000	FunctionDef	GWKCubicSplineNoMasksShort (GDALWarpKernel * poWK)
>18001	ParameterList	GDALWarpKernel * poWK
>18002	Parameter	 
>18003	Identifier	poWK
>18004	ParameterType	GDALWarpKernel *
>18005	ReturnType	static CPLErr
>18006	CompoundStatement	 
>18007	ReturnStatement	 
>18008	CallExpression	GWKRun ( poWK , \"GWKCubicSplineNoMasksShort\" , GWKCubicSplineNoMasksShortThread )
>18009	ArgumentList	poWK
>18010	Argument	GWKCubicSplineNoMasksShortThread
>18011	Identifier	GWKCubicSplineNoMasksShortThread
>18012	Argument	\"GWKCubicSplineNoMasksShort\"
>18013	PrimaryExpression	\"GWKCubicSplineNoMasksShort\"
>18014	Argument	poWK
>18015	Identifier	poWK
>18016	Callee	GWKRun
>18017	Identifier	GWKRun
>18024	FunctionDef	GWKCubicSplineNoMasksShortThread (void * pData)
>18025	ParameterList	void * pData
>18026	Parameter	 
>18027	Identifier	pData
>18028	ParameterType	void *
>18029	ReturnType	static void
>18030	CompoundStatement	 
>18031	ExpressionStatement	 
>18032	CallExpression	CPLFree ( padfBSpline )
>18033	ArgumentList	padfBSpline
>18034	Argument	padfBSpline
>18035	Identifier	padfBSpline
>18036	Callee	CPLFree
>18037	Identifier	CPLFree
>18038	ExpressionStatement	 
>18039	CallExpression	CPLFree ( pabSuccess )
>18040	ArgumentList	pabSuccess
>18041	Argument	pabSuccess
>18042	Identifier	pabSuccess
>18043	Callee	CPLFree
>18044	Identifier	CPLFree
>18045	ExpressionStatement	 
>18046	CallExpression	CPLFree ( padfZ )
>18047	ArgumentList	padfZ
>18048	Argument	padfZ
>18049	Identifier	padfZ
>18050	Callee	CPLFree
>18051	Identifier	CPLFree
>18052	ExpressionStatement	 
>18053	CallExpression	CPLFree ( padfY )
>18054	ArgumentList	padfY
>18055	Argument	padfY
>18056	Identifier	padfY
>18057	Callee	CPLFree
>18058	Identifier	CPLFree
>18059	ExpressionStatement	 
>18060	CallExpression	CPLFree ( padfX )
>18061	ArgumentList	padfX
>18062	Argument	padfX
>18063	Identifier	padfX
>18064	Callee	CPLFree
>18065	Identifier	CPLFree
>18066	ForStatement	for ( iDstY = iYMin ; iDstY < iYMax ; iDstY ++ )
>18067	CompoundStatement	 
>18068	IfStatement	if ( psJob -> pfnProgress ( psJob ) )
>18069	BreakStatement	 
>18070	Condition	 
>18071	CallExpression	psJob -> pfnProgress ( psJob )
>18072	ArgumentList	psJob
>18073	Argument	psJob
>18074	Identifier	psJob
>18075	Callee	psJob -> pfnProgress
>18076	PtrMemberAccess	psJob -> pfnProgress
>18077	Identifier	pfnProgress
>18078	Identifier	psJob
>18079	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>18080	CompoundStatement	 
>18081	ForStatement	for ( iBand = 0 ; iBand < poWK -> nBands ; iBand ++ )
>18082	CompoundStatement	 
>18083	ExpressionStatement	 
>18084	AssignmentExpr	( ( GInt16 * ) poWK -> papabyDstImage [ iBand ] ) [ iDstOffset ] = iValue
>18085	Identifier	iValue
>18086	ArrayIndexing	( ( GInt16 * ) poWK -> papabyDstImage [ iBand ] ) [ iDstOffset ]
>18087	Identifier	iDstOffset
>18088	CastExpression	( GInt16 * ) poWK -> papabyDstImage [ iBand ]
>18089	ArrayIndexing	poWK -> papabyDstImage [ iBand ]
>18090	Identifier	iBand
>18091	PtrMemberAccess	poWK -> papabyDstImage
>18092	Identifier	papabyDstImage
>18093	Identifier	poWK
>18094	CastTarget	GInt16 *
>18095	ExpressionStatement	 
>18096	CallExpression	GWKCubicSplineResampleNoMasksShort ( poWK , iBand , padfX [ iDstX ] - poWK -> nSrcXOff , padfY [ iDstX ] - poWK \
>18097	ArgumentList	poWK
>18098	Argument	padfBSpline
>18099	Identifier	padfBSpline
>18100	Argument	& iValue
>18101	UnaryOp	& iValue
>18102	Identifier	iValue
>18103	UnaryOperator	&
>18104	Argument	padfY [ iDstX ] - poWK -> nSrcYOff
>18105	AdditiveExpression	padfY [ iDstX ] - poWK -> nSrcYOff
>18106	PtrMemberAccess	poWK -> nSrcYOff
>18107	Identifier	nSrcYOff
>18108	Identifier	poWK
>18109	ArrayIndexing	padfY [ iDstX ]
>18110	Identifier	iDstX
>18111	Identifier	padfY
>18112	Argument	padfX [ iDstX ] - poWK -> nSrcXOff
>18113	AdditiveExpression	padfX [ iDstX ] - poWK -> nSrcXOff
>18114	PtrMemberAccess	poWK -> nSrcXOff
>18115	Identifier	nSrcXOff
>18116	Identifier	poWK
>18117	ArrayIndexing	padfX [ iDstX ]
>18118	Identifier	iDstX
>18119	Identifier	padfX
>18120	Argument	iBand
>18121	Identifier	iBand
>18122	Argument	poWK
>18123	Identifier	poWK
>18124	Callee	GWKCubicSplineResampleNoMasksShort
>18125	Identifier	GWKCubicSplineResampleNoMasksShort
>18126	IdentifierDeclStatement	 
>18127	IdentifierDecl	iValue = 0
>18128	AssignmentExpr	iValue = 0
>18129	PrimaryExpression	0
>18130	Identifier	iValue
>18131	Identifier	iValue
>18132	IdentifierDeclType	GInt16
>18133	IncDecOp	 
>18134	IncDec	++
>18135	Identifier	iBand
>18136	Condition	 
>18137	RelationalExpression	iBand < poWK -> nBands
>18138	PtrMemberAccess	poWK -> nBands
>18139	Identifier	nBands
>18140	Identifier	poWK
>18141	Identifier	iBand
>18142	ForInit	 
>18143	AssignmentExpr	iBand = 0
>18144	PrimaryExpression	0
>18145	Identifier	iBand
>18146	ExpressionStatement	 
>18147	AssignmentExpr	iDstOffset = iDstX + iDstY * nDstXSize
>18148	AdditiveExpression	iDstX + iDstY * nDstXSize
>18149	MultiplicativeExpression	iDstY * nDstXSize
>18150	Identifier	nDstXSize
>18151	Identifier	iDstY
>18152	Identifier	iDstX
>18153	Identifier	iDstOffset
>18154	IdentifierDeclStatement	 
>18155	IdentifierDecl	iDstOffset
>18156	Identifier	iDstOffset
>18157	IdentifierDeclType	int
>18158	IdentifierDeclStatement	 
>18159	IdentifierDecl	iBand
>18160	Identifier	iBand
>18161	IdentifierDeclType	int
>18162	ExpressionStatement	 
>18163	CallExpression	COMPUTE_iSrcOffset ( pabSuccess , iDstX , padfX , padfY , poWK , nSrcXSize , nSrcYSize )
>18164	ArgumentList	pabSuccess
>18165	Argument	nSrcYSize
>18166	Identifier	nSrcYSize
>18167	Argument	nSrcXSize
>18168	Identifier	nSrcXSize
>18169	Argument	poWK
>18170	Identifier	poWK
>18171	Argument	padfY
>18172	Identifier	padfY
>18173	Argument	padfX
>18174	Identifier	padfX
>18175	Argument	iDstX
>18176	Identifier	iDstX
>18177	Argument	pabSuccess
>18178	Identifier	pabSuccess
>18179	Callee	COMPUTE_iSrcOffset
>18180	Identifier	COMPUTE_iSrcOffset
>18181	IncDecOp	 
>18182	IncDec	++
>18183	Identifier	iDstX
>18184	Condition	 
>18185	RelationalExpression	iDstX < nDstXSize
>18186	Identifier	nDstXSize
>18187	Identifier	iDstX
>18188	ForInit	 
>18189	AssignmentExpr	iDstX = 0
>18190	PrimaryExpression	0
>18191	Identifier	iDstX
>18192	ExpressionStatement	 
>18193	CallExpression	poWK -> pfnTransformer ( psJob -> pTransformerArg , TRUE , nDstXSize , padfX , padfY , padfZ , pabSuccess )
>18194	ArgumentList	psJob -> pTransformerArg
>18195	Argument	pabSuccess
>18196	Identifier	pabSuccess
>18197	Argument	padfZ
>18198	Identifier	padfZ
>18199	Argument	padfY
>18200	Identifier	padfY
>18201	Argument	padfX
>18202	Identifier	padfX
>18203	Argument	nDstXSize
>18204	Identifier	nDstXSize
>18205	Argument	TRUE
>18206	Identifier	TRUE
>18207	Argument	psJob -> pTransformerArg
>18208	PtrMemberAccess	psJob -> pTransformerArg
>18209	Identifier	pTransformerArg
>18210	Identifier	psJob
>18211	Callee	poWK -> pfnTransformer
>18212	PtrMemberAccess	poWK -> pfnTransformer
>18213	Identifier	pfnTransformer
>18214	Identifier	poWK
>18215	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>18216	CompoundStatement	 
>18217	ExpressionStatement	 
>18218	AssignmentExpr	padfZ [ iDstX ] = 0.0
>18219	PrimaryExpression	0.0
>18220	ArrayIndexing	padfZ [ iDstX ]
>18221	Identifier	iDstX
>18222	Identifier	padfZ
>18223	ExpressionStatement	 
>18224	AssignmentExpr	padfY [ iDstX ] = iDstY + 0.5 + poWK -> nDstYOff
>18225	AdditiveExpression	iDstY + 0.5 + poWK -> nDstYOff
>18226	AdditiveExpression	0.5 + poWK -> nDstYOff
>18227	PtrMemberAccess	poWK -> nDstYOff
>18228	Identifier	nDstYOff
>18229	Identifier	poWK
>18230	PrimaryExpression	0.5
>18231	Identifier	iDstY
>18232	ArrayIndexing	padfY [ iDstX ]
>18233	Identifier	iDstX
>18234	Identifier	padfY
>18235	ExpressionStatement	 
>18236	AssignmentExpr	padfX [ iDstX ] = iDstX + 0.5 + poWK -> nDstXOff
>18237	AdditiveExpression	iDstX + 0.5 + poWK -> nDstXOff
>18238	AdditiveExpression	0.5 + poWK -> nDstXOff
>18239	PtrMemberAccess	poWK -> nDstXOff
>18240	Identifier	nDstXOff
>18241	Identifier	poWK
>18242	PrimaryExpression	0.5
>18243	Identifier	iDstX
>18244	ArrayIndexing	padfX [ iDstX ]
>18245	Identifier	iDstX
>18246	Identifier	padfX
>18247	IncDecOp	 
>18248	IncDec	++
>18249	Identifier	iDstX
>18250	Condition	 
>18251	RelationalExpression	iDstX < nDstXSize
>18252	Identifier	nDstXSize
>18253	Identifier	iDstX
>18254	ForInit	 
>18255	AssignmentExpr	iDstX = 0
>18256	PrimaryExpression	0
>18257	Identifier	iDstX
>18258	IdentifierDeclStatement	 
>18259	IdentifierDecl	iDstX
>18260	Identifier	iDstX
>18261	IdentifierDeclType	int
>18262	IncDecOp	 
>18263	IncDec	++
>18264	Identifier	iDstY
>18265	Condition	 
>18266	RelationalExpression	iDstY < iYMax
>18267	Identifier	iYMax
>18268	Identifier	iDstY
>18269	ForInit	 
>18270	AssignmentExpr	iDstY = iYMin
>18271	Identifier	iYMin
>18272	Identifier	iDstY
>18273	IdentifierDeclStatement	 
>18274	IdentifierDecl	* padfBSpline = ( double * ) CPLCalloc ( nXRadius * 2 , sizeof ( double ) )
>18275	AssignmentExpr	* padfBSpline = ( double * ) CPLCalloc ( nXRadius * 2 , sizeof ( double ) )
>18276	CastExpression	( double * ) CPLCalloc ( nXRadius * 2 , sizeof ( double ) )
>18277	CallExpression	CPLCalloc ( nXRadius * 2 , sizeof ( double ) )
>18278	ArgumentList	nXRadius * 2
>18279	Argument	sizeof ( double )
>18280	SizeofExpr	sizeof ( double )
>18281	SizeofOperand	double
>18282	Sizeof	sizeof
>18283	Argument	nXRadius * 2
>18284	MultiplicativeExpression	nXRadius * 2
>18285	PrimaryExpression	2
>18286	Identifier	nXRadius
>18287	Callee	CPLCalloc
>18288	Identifier	CPLCalloc
>18289	CastTarget	double *
>18290	Identifier	padfBSpline
>18291	Identifier	padfBSpline
>18292	IdentifierDeclType	double *
>18293	IdentifierDeclStatement	 
>18294	IdentifierDecl	nXRadius = poWK -> nXRadius
>18295	AssignmentExpr	nXRadius = poWK -> nXRadius
>18296	PtrMemberAccess	poWK -> nXRadius
>18297	Identifier	nXRadius
>18298	Identifier	poWK
>18299	Identifier	nXRadius
>18300	Identifier	nXRadius
>18301	IdentifierDeclType	int
>18302	ExpressionStatement	 
>18303	AssignmentExpr	pabSuccess = ( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>18304	CastExpression	( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>18305	CallExpression	CPLMalloc ( sizeof ( int ) * nDstXSize )
>18306	ArgumentList	sizeof ( int ) * nDstXSize
>18307	Argument	sizeof ( int ) * nDstXSize
>18308	MultiplicativeExpression	sizeof ( int ) * nDstXSize
>18309	Identifier	nDstXSize
>18310	SizeofExpr	sizeof ( int )
>18311	SizeofOperand	int
>18312	Sizeof	sizeof
>18313	Callee	CPLMalloc
>18314	Identifier	CPLMalloc
>18315	CastTarget	int *
>18316	Identifier	pabSuccess
>18317	ExpressionStatement	 
>18318	AssignmentExpr	padfZ = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>18319	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>18320	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>18321	ArgumentList	sizeof ( double ) * nDstXSize
>18322	Argument	sizeof ( double ) * nDstXSize
>18323	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>18324	Identifier	nDstXSize
>18325	SizeofExpr	sizeof ( double )
>18326	SizeofOperand	double
>18327	Sizeof	sizeof
>18328	Callee	CPLMalloc
>18329	Identifier	CPLMalloc
>18330	CastTarget	double *
>18331	Identifier	padfZ
>18332	ExpressionStatement	 
>18333	AssignmentExpr	padfY = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>18334	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>18335	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>18336	ArgumentList	sizeof ( double ) * nDstXSize
>18337	Argument	sizeof ( double ) * nDstXSize
>18338	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>18339	Identifier	nDstXSize
>18340	SizeofExpr	sizeof ( double )
>18341	SizeofOperand	double
>18342	Sizeof	sizeof
>18343	Callee	CPLMalloc
>18344	Identifier	CPLMalloc
>18345	CastTarget	double *
>18346	Identifier	padfY
>18347	ExpressionStatement	 
>18348	AssignmentExpr	padfX = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>18349	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>18350	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>18351	ArgumentList	sizeof ( double ) * nDstXSize
>18352	Argument	sizeof ( double ) * nDstXSize
>18353	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>18354	Identifier	nDstXSize
>18355	SizeofExpr	sizeof ( double )
>18356	SizeofOperand	double
>18357	Sizeof	sizeof
>18358	Callee	CPLMalloc
>18359	Identifier	CPLMalloc
>18360	CastTarget	double *
>18361	Identifier	padfX
>18362	IdentifierDeclStatement	 
>18363	IdentifierDecl	* pabSuccess
>18364	Identifier	pabSuccess
>18365	IdentifierDeclType	int *
>18366	IdentifierDeclStatement	 
>18367	IdentifierDecl	* padfZ
>18368	Identifier	padfZ
>18369	IdentifierDeclType	double *
>18370	IdentifierDecl	* padfY
>18371	Identifier	padfY
>18372	IdentifierDeclType	double *
>18373	IdentifierDecl	* padfX
>18374	Identifier	padfX
>18375	IdentifierDeclType	double *
>18376	IdentifierDeclStatement	 
>18377	IdentifierDecl	nSrcYSize = poWK -> nSrcYSize
>18378	AssignmentExpr	nSrcYSize = poWK -> nSrcYSize
>18379	PtrMemberAccess	poWK -> nSrcYSize
>18380	Identifier	nSrcYSize
>18381	Identifier	poWK
>18382	Identifier	nSrcYSize
>18383	Identifier	nSrcYSize
>18384	IdentifierDeclType	int
>18385	IdentifierDecl	nSrcXSize = poWK -> nSrcXSize
>18386	AssignmentExpr	nSrcXSize = poWK -> nSrcXSize
>18387	PtrMemberAccess	poWK -> nSrcXSize
>18388	Identifier	nSrcXSize
>18389	Identifier	poWK
>18390	Identifier	nSrcXSize
>18391	Identifier	nSrcXSize
>18392	IdentifierDeclType	int
>18393	IdentifierDeclStatement	 
>18394	IdentifierDecl	nDstXSize = poWK -> nDstXSize
>18395	AssignmentExpr	nDstXSize = poWK -> nDstXSize
>18396	PtrMemberAccess	poWK -> nDstXSize
>18397	Identifier	nDstXSize
>18398	Identifier	poWK
>18399	Identifier	nDstXSize
>18400	Identifier	nDstXSize
>18401	IdentifierDeclType	int
>18402	IdentifierDeclStatement	 
>18403	IdentifierDecl	iDstY
>18404	Identifier	iDstY
>18405	IdentifierDeclType	int
>18406	IdentifierDeclStatement	 
>18407	IdentifierDecl	iYMax = psJob -> iYMax
>18408	AssignmentExpr	iYMax = psJob -> iYMax
>18409	PtrMemberAccess	psJob -> iYMax
>18410	Identifier	iYMax
>18411	Identifier	psJob
>18412	Identifier	iYMax
>18413	Identifier	iYMax
>18414	IdentifierDeclType	int
>18415	IdentifierDeclStatement	 
>18416	IdentifierDecl	iYMin = psJob -> iYMin
>18417	AssignmentExpr	iYMin = psJob -> iYMin
>18418	PtrMemberAccess	psJob -> iYMin
>18419	Identifier	iYMin
>18420	Identifier	psJob
>18421	Identifier	iYMin
>18422	Identifier	iYMin
>18423	IdentifierDeclType	int
>18424	IdentifierDeclStatement	 
>18425	IdentifierDecl	* poWK = psJob -> poWK
>18426	AssignmentExpr	* poWK = psJob -> poWK
>18427	PtrMemberAccess	psJob -> poWK
>18428	Identifier	poWK
>18429	Identifier	psJob
>18430	Identifier	poWK
>18431	Identifier	poWK
>18432	IdentifierDeclType	GDALWarpKernel *
>18433	IdentifierDeclStatement	 
>18434	IdentifierDecl	* psJob = ( GWKJobStruct * ) pData
>18435	AssignmentExpr	* psJob = ( GWKJobStruct * ) pData
>18436	CastExpression	( GWKJobStruct * ) pData
>18437	Identifier	pData
>18438	CastTarget	GWKJobStruct *
>18439	Identifier	psJob
>18440	Identifier	psJob
>18441	IdentifierDeclType	GWKJobStruct *
>18498	FunctionDef	GWKNearestShort (GDALWarpKernel * poWK)
>18499	ParameterList	GDALWarpKernel * poWK
>18500	Parameter	 
>18501	Identifier	poWK
>18502	ParameterType	GDALWarpKernel *
>18503	ReturnType	static CPLErr
>18504	CompoundStatement	 
>18505	ReturnStatement	 
>18506	CallExpression	GWKRun ( poWK , \"GWKNearestShort\" , GWKNearestShortThread )
>18507	ArgumentList	poWK
>18508	Argument	GWKNearestShortThread
>18509	Identifier	GWKNearestShortThread
>18510	Argument	\"GWKNearestShort\"
>18511	PrimaryExpression	\"GWKNearestShort\"
>18512	Argument	poWK
>18513	Identifier	poWK
>18514	Callee	GWKRun
>18515	Identifier	GWKRun
>18522	FunctionDef	GWKNearestShortThread (void * pData)
>18523	ParameterList	void * pData
>18524	Parameter	 
>18525	Identifier	pData
>18526	ParameterType	void *
>18527	ReturnType	static void
>18528	CompoundStatement	 
>18529	ExpressionStatement	 
>18530	CallExpression	CPLFree ( pabSuccess )
>18531	ArgumentList	pabSuccess
>18532	Argument	pabSuccess
>18533	Identifier	pabSuccess
>18534	Callee	CPLFree
>18535	Identifier	CPLFree
>18536	ExpressionStatement	 
>18537	CallExpression	CPLFree ( padfZ )
>18538	ArgumentList	padfZ
>18539	Argument	padfZ
>18540	Identifier	padfZ
>18541	Callee	CPLFree
>18542	Identifier	CPLFree
>18543	ExpressionStatement	 
>18544	CallExpression	CPLFree ( padfY )
>18545	ArgumentList	padfY
>18546	Argument	padfY
>18547	Identifier	padfY
>18548	Callee	CPLFree
>18549	Identifier	CPLFree
>18550	ExpressionStatement	 
>18551	CallExpression	CPLFree ( padfX )
>18552	ArgumentList	padfX
>18553	Argument	padfX
>18554	Identifier	padfX
>18555	Callee	CPLFree
>18556	Identifier	CPLFree
>18557	ForStatement	for ( iDstY = iYMin ; iDstY < iYMax ; iDstY ++ )
>18558	CompoundStatement	 
>18559	IfStatement	if ( psJob -> pfnProgress ( psJob ) )
>18560	BreakStatement	 
>18561	Condition	 
>18562	CallExpression	psJob -> pfnProgress ( psJob )
>18563	ArgumentList	psJob
>18564	Argument	psJob
>18565	Identifier	psJob
>18566	Callee	psJob -> pfnProgress
>18567	PtrMemberAccess	psJob -> pfnProgress
>18568	Identifier	pfnProgress
>18569	Identifier	psJob
>18570	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>18571	CompoundStatement	 
>18572	IfStatement	if ( poWK -> panDstValid != NULL )
>18573	CompoundStatement	 
>18574	ExpressionStatement	 
>18575	AssignmentExpr	poWK -> panDstValid [ iDstOffset >> 5 ] |= 0x01 << ( iDstOffset & 0x1f )
>18576	ShiftExpression	0x01 << ( iDstOffset & 0x1f )
>18577	BitAndExpression	iDstOffset & 0x1f
>18578	PrimaryExpression	0x1f
>18579	Identifier	iDstOffset
>18580	PrimaryExpression	0x01
>18581	ArrayIndexing	poWK -> panDstValid [ iDstOffset >> 5 ]
>18582	ShiftExpression	iDstOffset >> 5
>18583	PrimaryExpression	5
>18584	Identifier	iDstOffset
>18585	PtrMemberAccess	poWK -> panDstValid
>18586	Identifier	panDstValid
>18587	Identifier	poWK
>18588	Condition	 
>18589	EqualityExpression	poWK -> panDstValid != NULL
>18590	Identifier	NULL
>18591	PtrMemberAccess	poWK -> panDstValid
>18592	Identifier	panDstValid
>18593	Identifier	poWK
>18594	ExpressionStatement	 
>18595	CallExpression	GWKOverlayDensity ( poWK , iDstOffset , dfDensity )
>18596	ArgumentList	poWK
>18597	Argument	dfDensity
>18598	Identifier	dfDensity
>18599	Argument	iDstOffset
>18600	Identifier	iDstOffset
>18601	Argument	poWK
>18602	Identifier	poWK
>18603	Callee	GWKOverlayDensity
>18604	Identifier	GWKOverlayDensity
>18605	ForStatement	for ( iBand = 0 ; iBand < poWK -> nBands ; iBand ++ )
>18606	CompoundStatement	 
>18607	IfStatement	if ( GWKGetPixelShort ( poWK , iBand , iSrcOffset , & dfBandDensity , & iValue ) )
>18608	CompoundStatement	 
>18609	IfStatement	if ( dfBandDensity < 1.0 )
>18610	ElseStatement	else
>18611	CompoundStatement	 
>18612	ExpressionStatement	 
>18613	AssignmentExpr	( ( GInt16 * ) poWK -> papabyDstImage [ iBand ] ) [ iDstOffset ] = iValue
>18614	Identifier	iValue
>18615	ArrayIndexing	( ( GInt16 * ) poWK -> papabyDstImage [ iBand ] ) [ iDstOffset ]
>18616	Identifier	iDstOffset
>18617	CastExpression	( GInt16 * ) poWK -> papabyDstImage [ iBand ]
>18618	ArrayIndexing	poWK -> papabyDstImage [ iBand ]
>18619	Identifier	iBand
>18620	PtrMemberAccess	poWK -> papabyDstImage
>18621	Identifier	papabyDstImage
>18622	Identifier	poWK
>18623	CastTarget	GInt16 *
>18624	CompoundStatement	 
>18625	IfStatement	if ( dfBandDensity == 0.0 )
>18626	ElseStatement	else
>18627	CompoundStatement	 
>18628	ExpressionStatement	 
>18629	CallExpression	GWKSetPixelValue ( poWK , iBand , iDstOffset , dfBandDensity , ( double ) iValue , 0.0 )
>18630	ArgumentList	poWK
>18631	Argument	0.0
>18632	PrimaryExpression	0.0
>18633	Argument	( double ) iValue
>18634	CastExpression	( double ) iValue
>18635	Identifier	iValue
>18636	CastTarget	double
>18637	Argument	dfBandDensity
>18638	Identifier	dfBandDensity
>18639	Argument	iDstOffset
>18640	Identifier	iDstOffset
>18641	Argument	iBand
>18642	Identifier	iBand
>18643	Argument	poWK
>18644	Identifier	poWK
>18645	Callee	GWKSetPixelValue
>18646	Identifier	GWKSetPixelValue
>18647	ExpressionStatement	 
>18648	Condition	 
>18649	EqualityExpression	dfBandDensity == 0.0
>18650	PrimaryExpression	0.0
>18651	Identifier	dfBandDensity
>18652	Condition	 
>18653	RelationalExpression	dfBandDensity < 1.0
>18654	PrimaryExpression	1.0
>18655	Identifier	dfBandDensity
>18656	Condition	 
>18657	CallExpression	GWKGetPixelShort ( poWK , iBand , iSrcOffset , & dfBandDensity , & iValue )
>18658	ArgumentList	poWK
>18659	Argument	& iValue
>18660	UnaryOp	& iValue
>18661	Identifier	iValue
>18662	UnaryOperator	&
>18663	Argument	& dfBandDensity
>18664	UnaryOp	& dfBandDensity
>18665	Identifier	dfBandDensity
>18666	UnaryOperator	&
>18667	Argument	iSrcOffset
>18668	Identifier	iSrcOffset
>18669	Argument	iBand
>18670	Identifier	iBand
>18671	Argument	poWK
>18672	Identifier	poWK
>18673	Callee	GWKGetPixelShort
>18674	Identifier	GWKGetPixelShort
>18675	IdentifierDeclStatement	 
>18676	IdentifierDecl	dfBandDensity = 0.0
>18677	AssignmentExpr	dfBandDensity = 0.0
>18678	PrimaryExpression	0.0
>18679	Identifier	dfBandDensity
>18680	Identifier	dfBandDensity
>18681	IdentifierDeclType	double
>18682	IdentifierDeclStatement	 
>18683	IdentifierDecl	iValue = 0
>18684	AssignmentExpr	iValue = 0
>18685	PrimaryExpression	0
>18686	Identifier	iValue
>18687	Identifier	iValue
>18688	IdentifierDeclType	GInt16
>18689	IncDecOp	 
>18690	IncDec	++
>18691	Identifier	iBand
>18692	Condition	 
>18693	RelationalExpression	iBand < poWK -> nBands
>18694	PtrMemberAccess	poWK -> nBands
>18695	Identifier	nBands
>18696	Identifier	poWK
>18697	Identifier	iBand
>18698	ForInit	 
>18699	AssignmentExpr	iBand = 0
>18700	PrimaryExpression	0
>18701	Identifier	iBand
>18702	ExpressionStatement	 
>18703	AssignmentExpr	iDstOffset = iDstX + iDstY * nDstXSize
>18704	AdditiveExpression	iDstX + iDstY * nDstXSize
>18705	MultiplicativeExpression	iDstY * nDstXSize
>18706	Identifier	nDstXSize
>18707	Identifier	iDstY
>18708	Identifier	iDstX
>18709	Identifier	iDstOffset
>18710	IdentifierDeclStatement	 
>18711	IdentifierDecl	iBand
>18712	Identifier	iBand
>18713	IdentifierDeclType	int
>18714	IfStatement	if ( poWK -> pafUnifiedSrcDensity != NULL )
>18715	CompoundStatement	 
>18716	IfStatement	if ( dfDensity < 0.00001 )
>18717	ContinueStatement	 
>18718	Condition	 
>18719	RelationalExpression	dfDensity < 0.00001
>18720	PrimaryExpression	0.00001
>18721	Identifier	dfDensity
>18722	ExpressionStatement	 
>18723	AssignmentExpr	dfDensity = poWK -> pafUnifiedSrcDensity [ iSrcOffset ]
>18724	ArrayIndexing	poWK -> pafUnifiedSrcDensity [ iSrcOffset ]
>18725	Identifier	iSrcOffset
>18726	PtrMemberAccess	poWK -> pafUnifiedSrcDensity
>18727	Identifier	pafUnifiedSrcDensity
>18728	Identifier	poWK
>18729	Identifier	dfDensity
>18730	Condition	 
>18731	EqualityExpression	poWK -> pafUnifiedSrcDensity != NULL
>18732	Identifier	NULL
>18733	PtrMemberAccess	poWK -> pafUnifiedSrcDensity
>18734	Identifier	pafUnifiedSrcDensity
>18735	Identifier	poWK
>18736	IdentifierDeclStatement	 
>18737	IdentifierDecl	dfDensity = 1.0
>18738	AssignmentExpr	dfDensity = 1.0
>18739	PrimaryExpression	1.0
>18740	Identifier	dfDensity
>18741	Identifier	dfDensity
>18742	IdentifierDeclType	double
>18743	IfStatement	if ( poWK -> panUnifiedSrcValid != NULL && ! ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & \
>18744	ContinueStatement	 
>18745	Condition	 
>18746	AndExpression	poWK -> panUnifiedSrcValid != NULL && ! ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( \
>18747	UnaryOp	! ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) ) )
>18748	BitAndExpression	poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) )
>18749	ShiftExpression	0x01 << ( iSrcOffset & 0x1f )
>18750	BitAndExpression	iSrcOffset & 0x1f
>18751	PrimaryExpression	0x1f
>18752	Identifier	iSrcOffset
>18753	PrimaryExpression	0x01
>18754	ArrayIndexing	poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ]
>18755	ShiftExpression	iSrcOffset >> 5
>18756	PrimaryExpression	5
>18757	Identifier	iSrcOffset
>18758	PtrMemberAccess	poWK -> panUnifiedSrcValid
>18759	Identifier	panUnifiedSrcValid
>18760	Identifier	poWK
>18761	UnaryOperator	!
>18762	EqualityExpression	poWK -> panUnifiedSrcValid != NULL
>18763	Identifier	NULL
>18764	PtrMemberAccess	poWK -> panUnifiedSrcValid
>18765	Identifier	panUnifiedSrcValid
>18766	Identifier	poWK
>18767	ExpressionStatement	 
>18768	CallExpression	COMPUTE_iSrcOffset ( pabSuccess , iDstX , padfX , padfY , poWK , nSrcXSize , nSrcYSize )
>18769	ArgumentList	pabSuccess
>18770	Argument	nSrcYSize
>18771	Identifier	nSrcYSize
>18772	Argument	nSrcXSize
>18773	Identifier	nSrcXSize
>18774	Argument	poWK
>18775	Identifier	poWK
>18776	Argument	padfY
>18777	Identifier	padfY
>18778	Argument	padfX
>18779	Identifier	padfX
>18780	Argument	iDstX
>18781	Identifier	iDstX
>18782	Argument	pabSuccess
>18783	Identifier	pabSuccess
>18784	Callee	COMPUTE_iSrcOffset
>18785	Identifier	COMPUTE_iSrcOffset
>18786	IdentifierDeclStatement	 
>18787	IdentifierDecl	iDstOffset
>18788	Identifier	iDstOffset
>18789	IdentifierDeclType	int
>18790	IncDecOp	 
>18791	IncDec	++
>18792	Identifier	iDstX
>18793	Condition	 
>18794	RelationalExpression	iDstX < nDstXSize
>18795	Identifier	nDstXSize
>18796	Identifier	iDstX
>18797	ForInit	 
>18798	AssignmentExpr	iDstX = 0
>18799	PrimaryExpression	0
>18800	Identifier	iDstX
>18801	ExpressionStatement	 
>18802	CallExpression	poWK -> pfnTransformer ( psJob -> pTransformerArg , TRUE , nDstXSize , padfX , padfY , padfZ , pabSuccess )
>18803	ArgumentList	psJob -> pTransformerArg
>18804	Argument	pabSuccess
>18805	Identifier	pabSuccess
>18806	Argument	padfZ
>18807	Identifier	padfZ
>18808	Argument	padfY
>18809	Identifier	padfY
>18810	Argument	padfX
>18811	Identifier	padfX
>18812	Argument	nDstXSize
>18813	Identifier	nDstXSize
>18814	Argument	TRUE
>18815	Identifier	TRUE
>18816	Argument	psJob -> pTransformerArg
>18817	PtrMemberAccess	psJob -> pTransformerArg
>18818	Identifier	pTransformerArg
>18819	Identifier	psJob
>18820	Callee	poWK -> pfnTransformer
>18821	PtrMemberAccess	poWK -> pfnTransformer
>18822	Identifier	pfnTransformer
>18823	Identifier	poWK
>18824	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>18825	CompoundStatement	 
>18826	ExpressionStatement	 
>18827	AssignmentExpr	padfZ [ iDstX ] = 0.0
>18828	PrimaryExpression	0.0
>18829	ArrayIndexing	padfZ [ iDstX ]
>18830	Identifier	iDstX
>18831	Identifier	padfZ
>18832	ExpressionStatement	 
>18833	AssignmentExpr	padfY [ iDstX ] = iDstY + 0.5 + poWK -> nDstYOff
>18834	AdditiveExpression	iDstY + 0.5 + poWK -> nDstYOff
>18835	AdditiveExpression	0.5 + poWK -> nDstYOff
>18836	PtrMemberAccess	poWK -> nDstYOff
>18837	Identifier	nDstYOff
>18838	Identifier	poWK
>18839	PrimaryExpression	0.5
>18840	Identifier	iDstY
>18841	ArrayIndexing	padfY [ iDstX ]
>18842	Identifier	iDstX
>18843	Identifier	padfY
>18844	ExpressionStatement	 
>18845	AssignmentExpr	padfX [ iDstX ] = iDstX + 0.5 + poWK -> nDstXOff
>18846	AdditiveExpression	iDstX + 0.5 + poWK -> nDstXOff
>18847	AdditiveExpression	0.5 + poWK -> nDstXOff
>18848	PtrMemberAccess	poWK -> nDstXOff
>18849	Identifier	nDstXOff
>18850	Identifier	poWK
>18851	PrimaryExpression	0.5
>18852	Identifier	iDstX
>18853	ArrayIndexing	padfX [ iDstX ]
>18854	Identifier	iDstX
>18855	Identifier	padfX
>18856	IncDecOp	 
>18857	IncDec	++
>18858	Identifier	iDstX
>18859	Condition	 
>18860	RelationalExpression	iDstX < nDstXSize
>18861	Identifier	nDstXSize
>18862	Identifier	iDstX
>18863	ForInit	 
>18864	AssignmentExpr	iDstX = 0
>18865	PrimaryExpression	0
>18866	Identifier	iDstX
>18867	IdentifierDeclStatement	 
>18868	IdentifierDecl	iDstX
>18869	Identifier	iDstX
>18870	IdentifierDeclType	int
>18871	IncDecOp	 
>18872	IncDec	++
>18873	Identifier	iDstY
>18874	Condition	 
>18875	RelationalExpression	iDstY < iYMax
>18876	Identifier	iYMax
>18877	Identifier	iDstY
>18878	ForInit	 
>18879	AssignmentExpr	iDstY = iYMin
>18880	Identifier	iYMin
>18881	Identifier	iDstY
>18882	ExpressionStatement	 
>18883	AssignmentExpr	pabSuccess = ( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>18884	CastExpression	( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>18885	CallExpression	CPLMalloc ( sizeof ( int ) * nDstXSize )
>18886	ArgumentList	sizeof ( int ) * nDstXSize
>18887	Argument	sizeof ( int ) * nDstXSize
>18888	MultiplicativeExpression	sizeof ( int ) * nDstXSize
>18889	Identifier	nDstXSize
>18890	SizeofExpr	sizeof ( int )
>18891	SizeofOperand	int
>18892	Sizeof	sizeof
>18893	Callee	CPLMalloc
>18894	Identifier	CPLMalloc
>18895	CastTarget	int *
>18896	Identifier	pabSuccess
>18897	ExpressionStatement	 
>18898	AssignmentExpr	padfZ = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>18899	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>18900	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>18901	ArgumentList	sizeof ( double ) * nDstXSize
>18902	Argument	sizeof ( double ) * nDstXSize
>18903	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>18904	Identifier	nDstXSize
>18905	SizeofExpr	sizeof ( double )
>18906	SizeofOperand	double
>18907	Sizeof	sizeof
>18908	Callee	CPLMalloc
>18909	Identifier	CPLMalloc
>18910	CastTarget	double *
>18911	Identifier	padfZ
>18912	ExpressionStatement	 
>18913	AssignmentExpr	padfY = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>18914	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>18915	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>18916	ArgumentList	sizeof ( double ) * nDstXSize
>18917	Argument	sizeof ( double ) * nDstXSize
>18918	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>18919	Identifier	nDstXSize
>18920	SizeofExpr	sizeof ( double )
>18921	SizeofOperand	double
>18922	Sizeof	sizeof
>18923	Callee	CPLMalloc
>18924	Identifier	CPLMalloc
>18925	CastTarget	double *
>18926	Identifier	padfY
>18927	ExpressionStatement	 
>18928	AssignmentExpr	padfX = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>18929	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>18930	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>18931	ArgumentList	sizeof ( double ) * nDstXSize
>18932	Argument	sizeof ( double ) * nDstXSize
>18933	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>18934	Identifier	nDstXSize
>18935	SizeofExpr	sizeof ( double )
>18936	SizeofOperand	double
>18937	Sizeof	sizeof
>18938	Callee	CPLMalloc
>18939	Identifier	CPLMalloc
>18940	CastTarget	double *
>18941	Identifier	padfX
>18942	IdentifierDeclStatement	 
>18943	IdentifierDecl	* pabSuccess
>18944	Identifier	pabSuccess
>18945	IdentifierDeclType	int *
>18946	IdentifierDeclStatement	 
>18947	IdentifierDecl	* padfZ
>18948	Identifier	padfZ
>18949	IdentifierDeclType	double *
>18950	IdentifierDecl	* padfY
>18951	Identifier	padfY
>18952	IdentifierDeclType	double *
>18953	IdentifierDecl	* padfX
>18954	Identifier	padfX
>18955	IdentifierDeclType	double *
>18956	IdentifierDeclStatement	 
>18957	IdentifierDecl	nSrcYSize = poWK -> nSrcYSize
>18958	AssignmentExpr	nSrcYSize = poWK -> nSrcYSize
>18959	PtrMemberAccess	poWK -> nSrcYSize
>18960	Identifier	nSrcYSize
>18961	Identifier	poWK
>18962	Identifier	nSrcYSize
>18963	Identifier	nSrcYSize
>18964	IdentifierDeclType	int
>18965	IdentifierDecl	nSrcXSize = poWK -> nSrcXSize
>18966	AssignmentExpr	nSrcXSize = poWK -> nSrcXSize
>18967	PtrMemberAccess	poWK -> nSrcXSize
>18968	Identifier	nSrcXSize
>18969	Identifier	poWK
>18970	Identifier	nSrcXSize
>18971	Identifier	nSrcXSize
>18972	IdentifierDeclType	int
>18973	IdentifierDeclStatement	 
>18974	IdentifierDecl	nDstXSize = poWK -> nDstXSize
>18975	AssignmentExpr	nDstXSize = poWK -> nDstXSize
>18976	PtrMemberAccess	poWK -> nDstXSize
>18977	Identifier	nDstXSize
>18978	Identifier	poWK
>18979	Identifier	nDstXSize
>18980	Identifier	nDstXSize
>18981	IdentifierDeclType	int
>18982	IdentifierDeclStatement	 
>18983	IdentifierDecl	iDstY
>18984	Identifier	iDstY
>18985	IdentifierDeclType	int
>18986	IdentifierDeclStatement	 
>18987	IdentifierDecl	iYMax = psJob -> iYMax
>18988	AssignmentExpr	iYMax = psJob -> iYMax
>18989	PtrMemberAccess	psJob -> iYMax
>18990	Identifier	iYMax
>18991	Identifier	psJob
>18992	Identifier	iYMax
>18993	Identifier	iYMax
>18994	IdentifierDeclType	int
>18995	IdentifierDeclStatement	 
>18996	IdentifierDecl	iYMin = psJob -> iYMin
>18997	AssignmentExpr	iYMin = psJob -> iYMin
>18998	PtrMemberAccess	psJob -> iYMin
>18999	Identifier	iYMin
>19000	Identifier	psJob
>19001	Identifier	iYMin
>19002	Identifier	iYMin
>19003	IdentifierDeclType	int
>19004	IdentifierDeclStatement	 
>19005	IdentifierDecl	* poWK = psJob -> poWK
>19006	AssignmentExpr	* poWK = psJob -> poWK
>19007	PtrMemberAccess	psJob -> poWK
>19008	Identifier	poWK
>19009	Identifier	psJob
>19010	Identifier	poWK
>19011	Identifier	poWK
>19012	IdentifierDeclType	GDALWarpKernel *
>19013	IdentifierDeclStatement	 
>19014	IdentifierDecl	* psJob = ( GWKJobStruct * ) pData
>19015	AssignmentExpr	* psJob = ( GWKJobStruct * ) pData
>19016	CastExpression	( GWKJobStruct * ) pData
>19017	Identifier	pData
>19018	CastTarget	GWKJobStruct *
>19019	Identifier	psJob
>19020	Identifier	psJob
>19021	IdentifierDeclType	GWKJobStruct *
>19085	FunctionDef	GWKNearestNoMasksFloat (GDALWarpKernel * poWK)
>19086	ParameterList	GDALWarpKernel * poWK
>19087	Parameter	 
>19088	Identifier	poWK
>19089	ParameterType	GDALWarpKernel *
>19090	ReturnType	static CPLErr
>19091	CompoundStatement	 
>19092	ReturnStatement	 
>19093	CallExpression	GWKRun ( poWK , \"GWKNearestNoMasksFloat\" , GWKNearestNoMasksFloatThread )
>19094	ArgumentList	poWK
>19095	Argument	GWKNearestNoMasksFloatThread
>19096	Identifier	GWKNearestNoMasksFloatThread
>19097	Argument	\"GWKNearestNoMasksFloat\"
>19098	PrimaryExpression	\"GWKNearestNoMasksFloat\"
>19099	Argument	poWK
>19100	Identifier	poWK
>19101	Callee	GWKRun
>19102	Identifier	GWKRun
>19109	FunctionDef	GWKNearestNoMasksFloatThread (void * pData)
>19110	ParameterList	void * pData
>19111	Parameter	 
>19112	Identifier	pData
>19113	ParameterType	void *
>19114	ReturnType	static void
>19115	CompoundStatement	 
>19116	ExpressionStatement	 
>19117	CallExpression	CPLFree ( pabSuccess )
>19118	ArgumentList	pabSuccess
>19119	Argument	pabSuccess
>19120	Identifier	pabSuccess
>19121	Callee	CPLFree
>19122	Identifier	CPLFree
>19123	ExpressionStatement	 
>19124	CallExpression	CPLFree ( padfZ )
>19125	ArgumentList	padfZ
>19126	Argument	padfZ
>19127	Identifier	padfZ
>19128	Callee	CPLFree
>19129	Identifier	CPLFree
>19130	ExpressionStatement	 
>19131	CallExpression	CPLFree ( padfY )
>19132	ArgumentList	padfY
>19133	Argument	padfY
>19134	Identifier	padfY
>19135	Callee	CPLFree
>19136	Identifier	CPLFree
>19137	ExpressionStatement	 
>19138	CallExpression	CPLFree ( padfX )
>19139	ArgumentList	padfX
>19140	Argument	padfX
>19141	Identifier	padfX
>19142	Callee	CPLFree
>19143	Identifier	CPLFree
>19144	ForStatement	for ( iDstY = iYMin ; iDstY < iYMax ; iDstY ++ )
>19145	CompoundStatement	 
>19146	IfStatement	if ( psJob -> pfnProgress ( psJob ) )
>19147	BreakStatement	 
>19148	Condition	 
>19149	CallExpression	psJob -> pfnProgress ( psJob )
>19150	ArgumentList	psJob
>19151	Argument	psJob
>19152	Identifier	psJob
>19153	Callee	psJob -> pfnProgress
>19154	PtrMemberAccess	psJob -> pfnProgress
>19155	Identifier	pfnProgress
>19156	Identifier	psJob
>19157	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>19158	CompoundStatement	 
>19159	ForStatement	for ( iBand = 0 ; iBand < poWK -> nBands ; iBand ++ )
>19160	CompoundStatement	 
>19161	ExpressionStatement	 
>19162	AssignmentExpr	( ( float * ) poWK -> papabyDstImage [ iBand ] ) [ iDstOffset ] = ( ( float * ) poWK -> papabySrcImage [ \
>19163	ArrayIndexing	( ( float * ) poWK -> papabySrcImage [ iBand ] ) [ iSrcOffset ]
>19164	Identifier	iSrcOffset
>19165	CastExpression	( float * ) poWK -> papabySrcImage [ iBand ]
>19166	ArrayIndexing	poWK -> papabySrcImage [ iBand ]
>19167	Identifier	iBand
>19168	PtrMemberAccess	poWK -> papabySrcImage
>19169	Identifier	papabySrcImage
>19170	Identifier	poWK
>19171	CastTarget	float *
>19172	ArrayIndexing	( ( float * ) poWK -> papabyDstImage [ iBand ] ) [ iDstOffset ]
>19173	Identifier	iDstOffset
>19174	CastExpression	( float * ) poWK -> papabyDstImage [ iBand ]
>19175	ArrayIndexing	poWK -> papabyDstImage [ iBand ]
>19176	Identifier	iBand
>19177	PtrMemberAccess	poWK -> papabyDstImage
>19178	Identifier	papabyDstImage
>19179	Identifier	poWK
>19180	CastTarget	float *
>19181	IncDecOp	 
>19182	IncDec	++
>19183	Identifier	iBand
>19184	Condition	 
>19185	RelationalExpression	iBand < poWK -> nBands
>19186	PtrMemberAccess	poWK -> nBands
>19187	Identifier	nBands
>19188	Identifier	poWK
>19189	Identifier	iBand
>19190	ForInit	 
>19191	AssignmentExpr	iBand = 0
>19192	PrimaryExpression	0
>19193	Identifier	iBand
>19194	ExpressionStatement	 
>19195	AssignmentExpr	iDstOffset = iDstX + iDstY * nDstXSize
>19196	AdditiveExpression	iDstX + iDstY * nDstXSize
>19197	MultiplicativeExpression	iDstY * nDstXSize
>19198	Identifier	nDstXSize
>19199	Identifier	iDstY
>19200	Identifier	iDstX
>19201	Identifier	iDstOffset
>19202	IdentifierDeclStatement	 
>19203	IdentifierDecl	iBand
>19204	Identifier	iBand
>19205	IdentifierDeclType	int
>19206	ExpressionStatement	 
>19207	CallExpression	COMPUTE_iSrcOffset ( pabSuccess , iDstX , padfX , padfY , poWK , nSrcXSize , nSrcYSize )
>19208	ArgumentList	pabSuccess
>19209	Argument	nSrcYSize
>19210	Identifier	nSrcYSize
>19211	Argument	nSrcXSize
>19212	Identifier	nSrcXSize
>19213	Argument	poWK
>19214	Identifier	poWK
>19215	Argument	padfY
>19216	Identifier	padfY
>19217	Argument	padfX
>19218	Identifier	padfX
>19219	Argument	iDstX
>19220	Identifier	iDstX
>19221	Argument	pabSuccess
>19222	Identifier	pabSuccess
>19223	Callee	COMPUTE_iSrcOffset
>19224	Identifier	COMPUTE_iSrcOffset
>19225	IdentifierDeclStatement	 
>19226	IdentifierDecl	iDstOffset
>19227	Identifier	iDstOffset
>19228	IdentifierDeclType	int
>19229	IncDecOp	 
>19230	IncDec	++
>19231	Identifier	iDstX
>19232	Condition	 
>19233	RelationalExpression	iDstX < nDstXSize
>19234	Identifier	nDstXSize
>19235	Identifier	iDstX
>19236	ForInit	 
>19237	AssignmentExpr	iDstX = 0
>19238	PrimaryExpression	0
>19239	Identifier	iDstX
>19240	ExpressionStatement	 
>19241	CallExpression	poWK -> pfnTransformer ( psJob -> pTransformerArg , TRUE , nDstXSize , padfX , padfY , padfZ , pabSuccess )
>19242	ArgumentList	psJob -> pTransformerArg
>19243	Argument	pabSuccess
>19244	Identifier	pabSuccess
>19245	Argument	padfZ
>19246	Identifier	padfZ
>19247	Argument	padfY
>19248	Identifier	padfY
>19249	Argument	padfX
>19250	Identifier	padfX
>19251	Argument	nDstXSize
>19252	Identifier	nDstXSize
>19253	Argument	TRUE
>19254	Identifier	TRUE
>19255	Argument	psJob -> pTransformerArg
>19256	PtrMemberAccess	psJob -> pTransformerArg
>19257	Identifier	pTransformerArg
>19258	Identifier	psJob
>19259	Callee	poWK -> pfnTransformer
>19260	PtrMemberAccess	poWK -> pfnTransformer
>19261	Identifier	pfnTransformer
>19262	Identifier	poWK
>19263	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>19264	CompoundStatement	 
>19265	ExpressionStatement	 
>19266	AssignmentExpr	padfZ [ iDstX ] = 0.0
>19267	PrimaryExpression	0.0
>19268	ArrayIndexing	padfZ [ iDstX ]
>19269	Identifier	iDstX
>19270	Identifier	padfZ
>19271	ExpressionStatement	 
>19272	AssignmentExpr	padfY [ iDstX ] = iDstY + 0.5 + poWK -> nDstYOff
>19273	AdditiveExpression	iDstY + 0.5 + poWK -> nDstYOff
>19274	AdditiveExpression	0.5 + poWK -> nDstYOff
>19275	PtrMemberAccess	poWK -> nDstYOff
>19276	Identifier	nDstYOff
>19277	Identifier	poWK
>19278	PrimaryExpression	0.5
>19279	Identifier	iDstY
>19280	ArrayIndexing	padfY [ iDstX ]
>19281	Identifier	iDstX
>19282	Identifier	padfY
>19283	ExpressionStatement	 
>19284	AssignmentExpr	padfX [ iDstX ] = iDstX + 0.5 + poWK -> nDstXOff
>19285	AdditiveExpression	iDstX + 0.5 + poWK -> nDstXOff
>19286	AdditiveExpression	0.5 + poWK -> nDstXOff
>19287	PtrMemberAccess	poWK -> nDstXOff
>19288	Identifier	nDstXOff
>19289	Identifier	poWK
>19290	PrimaryExpression	0.5
>19291	Identifier	iDstX
>19292	ArrayIndexing	padfX [ iDstX ]
>19293	Identifier	iDstX
>19294	Identifier	padfX
>19295	IncDecOp	 
>19296	IncDec	++
>19297	Identifier	iDstX
>19298	Condition	 
>19299	RelationalExpression	iDstX < nDstXSize
>19300	Identifier	nDstXSize
>19301	Identifier	iDstX
>19302	ForInit	 
>19303	AssignmentExpr	iDstX = 0
>19304	PrimaryExpression	0
>19305	Identifier	iDstX
>19306	IdentifierDeclStatement	 
>19307	IdentifierDecl	iDstX
>19308	Identifier	iDstX
>19309	IdentifierDeclType	int
>19310	IncDecOp	 
>19311	IncDec	++
>19312	Identifier	iDstY
>19313	Condition	 
>19314	RelationalExpression	iDstY < iYMax
>19315	Identifier	iYMax
>19316	Identifier	iDstY
>19317	ForInit	 
>19318	AssignmentExpr	iDstY = iYMin
>19319	Identifier	iYMin
>19320	Identifier	iDstY
>19321	ExpressionStatement	 
>19322	AssignmentExpr	pabSuccess = ( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>19323	CastExpression	( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>19324	CallExpression	CPLMalloc ( sizeof ( int ) * nDstXSize )
>19325	ArgumentList	sizeof ( int ) * nDstXSize
>19326	Argument	sizeof ( int ) * nDstXSize
>19327	MultiplicativeExpression	sizeof ( int ) * nDstXSize
>19328	Identifier	nDstXSize
>19329	SizeofExpr	sizeof ( int )
>19330	SizeofOperand	int
>19331	Sizeof	sizeof
>19332	Callee	CPLMalloc
>19333	Identifier	CPLMalloc
>19334	CastTarget	int *
>19335	Identifier	pabSuccess
>19336	ExpressionStatement	 
>19337	AssignmentExpr	padfZ = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>19338	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>19339	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>19340	ArgumentList	sizeof ( double ) * nDstXSize
>19341	Argument	sizeof ( double ) * nDstXSize
>19342	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>19343	Identifier	nDstXSize
>19344	SizeofExpr	sizeof ( double )
>19345	SizeofOperand	double
>19346	Sizeof	sizeof
>19347	Callee	CPLMalloc
>19348	Identifier	CPLMalloc
>19349	CastTarget	double *
>19350	Identifier	padfZ
>19351	ExpressionStatement	 
>19352	AssignmentExpr	padfY = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>19353	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>19354	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>19355	ArgumentList	sizeof ( double ) * nDstXSize
>19356	Argument	sizeof ( double ) * nDstXSize
>19357	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>19358	Identifier	nDstXSize
>19359	SizeofExpr	sizeof ( double )
>19360	SizeofOperand	double
>19361	Sizeof	sizeof
>19362	Callee	CPLMalloc
>19363	Identifier	CPLMalloc
>19364	CastTarget	double *
>19365	Identifier	padfY
>19366	ExpressionStatement	 
>19367	AssignmentExpr	padfX = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>19368	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>19369	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>19370	ArgumentList	sizeof ( double ) * nDstXSize
>19371	Argument	sizeof ( double ) * nDstXSize
>19372	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>19373	Identifier	nDstXSize
>19374	SizeofExpr	sizeof ( double )
>19375	SizeofOperand	double
>19376	Sizeof	sizeof
>19377	Callee	CPLMalloc
>19378	Identifier	CPLMalloc
>19379	CastTarget	double *
>19380	Identifier	padfX
>19381	IdentifierDeclStatement	 
>19382	IdentifierDecl	* pabSuccess
>19383	Identifier	pabSuccess
>19384	IdentifierDeclType	int *
>19385	IdentifierDeclStatement	 
>19386	IdentifierDecl	* padfZ
>19387	Identifier	padfZ
>19388	IdentifierDeclType	double *
>19389	IdentifierDecl	* padfY
>19390	Identifier	padfY
>19391	IdentifierDeclType	double *
>19392	IdentifierDecl	* padfX
>19393	Identifier	padfX
>19394	IdentifierDeclType	double *
>19395	IdentifierDeclStatement	 
>19396	IdentifierDecl	nSrcYSize = poWK -> nSrcYSize
>19397	AssignmentExpr	nSrcYSize = poWK -> nSrcYSize
>19398	PtrMemberAccess	poWK -> nSrcYSize
>19399	Identifier	nSrcYSize
>19400	Identifier	poWK
>19401	Identifier	nSrcYSize
>19402	Identifier	nSrcYSize
>19403	IdentifierDeclType	int
>19404	IdentifierDecl	nSrcXSize = poWK -> nSrcXSize
>19405	AssignmentExpr	nSrcXSize = poWK -> nSrcXSize
>19406	PtrMemberAccess	poWK -> nSrcXSize
>19407	Identifier	nSrcXSize
>19408	Identifier	poWK
>19409	Identifier	nSrcXSize
>19410	Identifier	nSrcXSize
>19411	IdentifierDeclType	int
>19412	IdentifierDeclStatement	 
>19413	IdentifierDecl	nDstXSize = poWK -> nDstXSize
>19414	AssignmentExpr	nDstXSize = poWK -> nDstXSize
>19415	PtrMemberAccess	poWK -> nDstXSize
>19416	Identifier	nDstXSize
>19417	Identifier	poWK
>19418	Identifier	nDstXSize
>19419	Identifier	nDstXSize
>19420	IdentifierDeclType	int
>19421	IdentifierDeclStatement	 
>19422	IdentifierDecl	iDstY
>19423	Identifier	iDstY
>19424	IdentifierDeclType	int
>19425	IdentifierDeclStatement	 
>19426	IdentifierDecl	iYMax = psJob -> iYMax
>19427	AssignmentExpr	iYMax = psJob -> iYMax
>19428	PtrMemberAccess	psJob -> iYMax
>19429	Identifier	iYMax
>19430	Identifier	psJob
>19431	Identifier	iYMax
>19432	Identifier	iYMax
>19433	IdentifierDeclType	int
>19434	IdentifierDeclStatement	 
>19435	IdentifierDecl	iYMin = psJob -> iYMin
>19436	AssignmentExpr	iYMin = psJob -> iYMin
>19437	PtrMemberAccess	psJob -> iYMin
>19438	Identifier	iYMin
>19439	Identifier	psJob
>19440	Identifier	iYMin
>19441	Identifier	iYMin
>19442	IdentifierDeclType	int
>19443	IdentifierDeclStatement	 
>19444	IdentifierDecl	* poWK = psJob -> poWK
>19445	AssignmentExpr	* poWK = psJob -> poWK
>19446	PtrMemberAccess	psJob -> poWK
>19447	Identifier	poWK
>19448	Identifier	psJob
>19449	Identifier	poWK
>19450	Identifier	poWK
>19451	IdentifierDeclType	GDALWarpKernel *
>19452	IdentifierDeclStatement	 
>19453	IdentifierDecl	* psJob = ( GWKJobStruct * ) pData
>19454	AssignmentExpr	* psJob = ( GWKJobStruct * ) pData
>19455	CastExpression	( GWKJobStruct * ) pData
>19456	Identifier	pData
>19457	CastTarget	GWKJobStruct *
>19458	Identifier	psJob
>19459	Identifier	psJob
>19460	IdentifierDeclType	GWKJobStruct *
>19514	FunctionDef	GWKNearestFloat (GDALWarpKernel * poWK)
>19515	ParameterList	GDALWarpKernel * poWK
>19516	Parameter	 
>19517	Identifier	poWK
>19518	ParameterType	GDALWarpKernel *
>19519	ReturnType	static CPLErr
>19520	CompoundStatement	 
>19521	ReturnStatement	 
>19522	CallExpression	GWKRun ( poWK , \"GWKNearestFloat\" , GWKNearestFloatThread )
>19523	ArgumentList	poWK
>19524	Argument	GWKNearestFloatThread
>19525	Identifier	GWKNearestFloatThread
>19526	Argument	\"GWKNearestFloat\"
>19527	PrimaryExpression	\"GWKNearestFloat\"
>19528	Argument	poWK
>19529	Identifier	poWK
>19530	Callee	GWKRun
>19531	Identifier	GWKRun
>19538	FunctionDef	GWKNearestFloatThread (void * pData)
>19539	ParameterList	void * pData
>19540	Parameter	 
>19541	Identifier	pData
>19542	ParameterType	void *
>19543	ReturnType	static void
>19544	CompoundStatement	 
>19545	ExpressionStatement	 
>19546	CallExpression	CPLFree ( pabSuccess )
>19547	ArgumentList	pabSuccess
>19548	Argument	pabSuccess
>19549	Identifier	pabSuccess
>19550	Callee	CPLFree
>19551	Identifier	CPLFree
>19552	ExpressionStatement	 
>19553	CallExpression	CPLFree ( padfZ )
>19554	ArgumentList	padfZ
>19555	Argument	padfZ
>19556	Identifier	padfZ
>19557	Callee	CPLFree
>19558	Identifier	CPLFree
>19559	ExpressionStatement	 
>19560	CallExpression	CPLFree ( padfY )
>19561	ArgumentList	padfY
>19562	Argument	padfY
>19563	Identifier	padfY
>19564	Callee	CPLFree
>19565	Identifier	CPLFree
>19566	ExpressionStatement	 
>19567	CallExpression	CPLFree ( padfX )
>19568	ArgumentList	padfX
>19569	Argument	padfX
>19570	Identifier	padfX
>19571	Callee	CPLFree
>19572	Identifier	CPLFree
>19573	ForStatement	for ( iDstY = iYMin ; iDstY < iYMax ; iDstY ++ )
>19574	CompoundStatement	 
>19575	IfStatement	if ( psJob -> pfnProgress ( psJob ) )
>19576	BreakStatement	 
>19577	Condition	 
>19578	CallExpression	psJob -> pfnProgress ( psJob )
>19579	ArgumentList	psJob
>19580	Argument	psJob
>19581	Identifier	psJob
>19582	Callee	psJob -> pfnProgress
>19583	PtrMemberAccess	psJob -> pfnProgress
>19584	Identifier	pfnProgress
>19585	Identifier	psJob
>19586	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>19587	CompoundStatement	 
>19588	IfStatement	if ( poWK -> panDstValid != NULL )
>19589	CompoundStatement	 
>19590	ExpressionStatement	 
>19591	AssignmentExpr	poWK -> panDstValid [ iDstOffset >> 5 ] |= 0x01 << ( iDstOffset & 0x1f )
>19592	ShiftExpression	0x01 << ( iDstOffset & 0x1f )
>19593	BitAndExpression	iDstOffset & 0x1f
>19594	PrimaryExpression	0x1f
>19595	Identifier	iDstOffset
>19596	PrimaryExpression	0x01
>19597	ArrayIndexing	poWK -> panDstValid [ iDstOffset >> 5 ]
>19598	ShiftExpression	iDstOffset >> 5
>19599	PrimaryExpression	5
>19600	Identifier	iDstOffset
>19601	PtrMemberAccess	poWK -> panDstValid
>19602	Identifier	panDstValid
>19603	Identifier	poWK
>19604	Condition	 
>19605	EqualityExpression	poWK -> panDstValid != NULL
>19606	Identifier	NULL
>19607	PtrMemberAccess	poWK -> panDstValid
>19608	Identifier	panDstValid
>19609	Identifier	poWK
>19610	ExpressionStatement	 
>19611	CallExpression	GWKOverlayDensity ( poWK , iDstOffset , dfDensity )
>19612	ArgumentList	poWK
>19613	Argument	dfDensity
>19614	Identifier	dfDensity
>19615	Argument	iDstOffset
>19616	Identifier	iDstOffset
>19617	Argument	poWK
>19618	Identifier	poWK
>19619	Callee	GWKOverlayDensity
>19620	Identifier	GWKOverlayDensity
>19621	ForStatement	for ( iBand = 0 ; iBand < poWK -> nBands ; iBand ++ )
>19622	CompoundStatement	 
>19623	IfStatement	if ( GWKGetPixelFloat ( poWK , iBand , iSrcOffset , & dfBandDensity , & fValue ) )
>19624	CompoundStatement	 
>19625	IfStatement	if ( dfBandDensity < 1.0 )
>19626	ElseStatement	else
>19627	CompoundStatement	 
>19628	ExpressionStatement	 
>19629	AssignmentExpr	( ( float * ) poWK -> papabyDstImage [ iBand ] ) [ iDstOffset ] = fValue
>19630	Identifier	fValue
>19631	ArrayIndexing	( ( float * ) poWK -> papabyDstImage [ iBand ] ) [ iDstOffset ]
>19632	Identifier	iDstOffset
>19633	CastExpression	( float * ) poWK -> papabyDstImage [ iBand ]
>19634	ArrayIndexing	poWK -> papabyDstImage [ iBand ]
>19635	Identifier	iBand
>19636	PtrMemberAccess	poWK -> papabyDstImage
>19637	Identifier	papabyDstImage
>19638	Identifier	poWK
>19639	CastTarget	float *
>19640	CompoundStatement	 
>19641	IfStatement	if ( dfBandDensity == 0.0 )
>19642	ElseStatement	else
>19643	CompoundStatement	 
>19644	ExpressionStatement	 
>19645	CallExpression	GWKSetPixelValue ( poWK , iBand , iDstOffset , dfBandDensity , ( double ) fValue , 0.0 )
>19646	ArgumentList	poWK
>19647	Argument	0.0
>19648	PrimaryExpression	0.0
>19649	Argument	( double ) fValue
>19650	CastExpression	( double ) fValue
>19651	Identifier	fValue
>19652	CastTarget	double
>19653	Argument	dfBandDensity
>19654	Identifier	dfBandDensity
>19655	Argument	iDstOffset
>19656	Identifier	iDstOffset
>19657	Argument	iBand
>19658	Identifier	iBand
>19659	Argument	poWK
>19660	Identifier	poWK
>19661	Callee	GWKSetPixelValue
>19662	Identifier	GWKSetPixelValue
>19663	ExpressionStatement	 
>19664	Condition	 
>19665	EqualityExpression	dfBandDensity == 0.0
>19666	PrimaryExpression	0.0
>19667	Identifier	dfBandDensity
>19668	Condition	 
>19669	RelationalExpression	dfBandDensity < 1.0
>19670	PrimaryExpression	1.0
>19671	Identifier	dfBandDensity
>19672	Condition	 
>19673	CallExpression	GWKGetPixelFloat ( poWK , iBand , iSrcOffset , & dfBandDensity , & fValue )
>19674	ArgumentList	poWK
>19675	Argument	& fValue
>19676	UnaryOp	& fValue
>19677	Identifier	fValue
>19678	UnaryOperator	&
>19679	Argument	& dfBandDensity
>19680	UnaryOp	& dfBandDensity
>19681	Identifier	dfBandDensity
>19682	UnaryOperator	&
>19683	Argument	iSrcOffset
>19684	Identifier	iSrcOffset
>19685	Argument	iBand
>19686	Identifier	iBand
>19687	Argument	poWK
>19688	Identifier	poWK
>19689	Callee	GWKGetPixelFloat
>19690	Identifier	GWKGetPixelFloat
>19691	IdentifierDeclStatement	 
>19692	IdentifierDecl	dfBandDensity = 0.0
>19693	AssignmentExpr	dfBandDensity = 0.0
>19694	PrimaryExpression	0.0
>19695	Identifier	dfBandDensity
>19696	Identifier	dfBandDensity
>19697	IdentifierDeclType	double
>19698	IdentifierDeclStatement	 
>19699	IdentifierDecl	fValue = 0
>19700	AssignmentExpr	fValue = 0
>19701	PrimaryExpression	0
>19702	Identifier	fValue
>19703	Identifier	fValue
>19704	IdentifierDeclType	float
>19705	IncDecOp	 
>19706	IncDec	++
>19707	Identifier	iBand
>19708	Condition	 
>19709	RelationalExpression	iBand < poWK -> nBands
>19710	PtrMemberAccess	poWK -> nBands
>19711	Identifier	nBands
>19712	Identifier	poWK
>19713	Identifier	iBand
>19714	ForInit	 
>19715	AssignmentExpr	iBand = 0
>19716	PrimaryExpression	0
>19717	Identifier	iBand
>19718	ExpressionStatement	 
>19719	AssignmentExpr	iDstOffset = iDstX + iDstY * nDstXSize
>19720	AdditiveExpression	iDstX + iDstY * nDstXSize
>19721	MultiplicativeExpression	iDstY * nDstXSize
>19722	Identifier	nDstXSize
>19723	Identifier	iDstY
>19724	Identifier	iDstX
>19725	Identifier	iDstOffset
>19726	IdentifierDeclStatement	 
>19727	IdentifierDecl	iBand
>19728	Identifier	iBand
>19729	IdentifierDeclType	int
>19730	IfStatement	if ( poWK -> pafUnifiedSrcDensity != NULL )
>19731	CompoundStatement	 
>19732	IfStatement	if ( dfDensity < 0.00001 )
>19733	ContinueStatement	 
>19734	Condition	 
>19735	RelationalExpression	dfDensity < 0.00001
>19736	PrimaryExpression	0.00001
>19737	Identifier	dfDensity
>19738	ExpressionStatement	 
>19739	AssignmentExpr	dfDensity = poWK -> pafUnifiedSrcDensity [ iSrcOffset ]
>19740	ArrayIndexing	poWK -> pafUnifiedSrcDensity [ iSrcOffset ]
>19741	Identifier	iSrcOffset
>19742	PtrMemberAccess	poWK -> pafUnifiedSrcDensity
>19743	Identifier	pafUnifiedSrcDensity
>19744	Identifier	poWK
>19745	Identifier	dfDensity
>19746	Condition	 
>19747	EqualityExpression	poWK -> pafUnifiedSrcDensity != NULL
>19748	Identifier	NULL
>19749	PtrMemberAccess	poWK -> pafUnifiedSrcDensity
>19750	Identifier	pafUnifiedSrcDensity
>19751	Identifier	poWK
>19752	IdentifierDeclStatement	 
>19753	IdentifierDecl	dfDensity = 1.0
>19754	AssignmentExpr	dfDensity = 1.0
>19755	PrimaryExpression	1.0
>19756	Identifier	dfDensity
>19757	Identifier	dfDensity
>19758	IdentifierDeclType	double
>19759	IfStatement	if ( poWK -> panUnifiedSrcValid != NULL && ! ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & \
>19760	ContinueStatement	 
>19761	Condition	 
>19762	AndExpression	poWK -> panUnifiedSrcValid != NULL && ! ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( \
>19763	UnaryOp	! ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) ) )
>19764	BitAndExpression	poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) )
>19765	ShiftExpression	0x01 << ( iSrcOffset & 0x1f )
>19766	BitAndExpression	iSrcOffset & 0x1f
>19767	PrimaryExpression	0x1f
>19768	Identifier	iSrcOffset
>19769	PrimaryExpression	0x01
>19770	ArrayIndexing	poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ]
>19771	ShiftExpression	iSrcOffset >> 5
>19772	PrimaryExpression	5
>19773	Identifier	iSrcOffset
>19774	PtrMemberAccess	poWK -> panUnifiedSrcValid
>19775	Identifier	panUnifiedSrcValid
>19776	Identifier	poWK
>19777	UnaryOperator	!
>19778	EqualityExpression	poWK -> panUnifiedSrcValid != NULL
>19779	Identifier	NULL
>19780	PtrMemberAccess	poWK -> panUnifiedSrcValid
>19781	Identifier	panUnifiedSrcValid
>19782	Identifier	poWK
>19783	ExpressionStatement	 
>19784	CallExpression	COMPUTE_iSrcOffset ( pabSuccess , iDstX , padfX , padfY , poWK , nSrcXSize , nSrcYSize )
>19785	ArgumentList	pabSuccess
>19786	Argument	nSrcYSize
>19787	Identifier	nSrcYSize
>19788	Argument	nSrcXSize
>19789	Identifier	nSrcXSize
>19790	Argument	poWK
>19791	Identifier	poWK
>19792	Argument	padfY
>19793	Identifier	padfY
>19794	Argument	padfX
>19795	Identifier	padfX
>19796	Argument	iDstX
>19797	Identifier	iDstX
>19798	Argument	pabSuccess
>19799	Identifier	pabSuccess
>19800	Callee	COMPUTE_iSrcOffset
>19801	Identifier	COMPUTE_iSrcOffset
>19802	IdentifierDeclStatement	 
>19803	IdentifierDecl	iDstOffset
>19804	Identifier	iDstOffset
>19805	IdentifierDeclType	int
>19806	IncDecOp	 
>19807	IncDec	++
>19808	Identifier	iDstX
>19809	Condition	 
>19810	RelationalExpression	iDstX < nDstXSize
>19811	Identifier	nDstXSize
>19812	Identifier	iDstX
>19813	ForInit	 
>19814	AssignmentExpr	iDstX = 0
>19815	PrimaryExpression	0
>19816	Identifier	iDstX
>19817	ExpressionStatement	 
>19818	CallExpression	poWK -> pfnTransformer ( psJob -> pTransformerArg , TRUE , nDstXSize , padfX , padfY , padfZ , pabSuccess )
>19819	ArgumentList	psJob -> pTransformerArg
>19820	Argument	pabSuccess
>19821	Identifier	pabSuccess
>19822	Argument	padfZ
>19823	Identifier	padfZ
>19824	Argument	padfY
>19825	Identifier	padfY
>19826	Argument	padfX
>19827	Identifier	padfX
>19828	Argument	nDstXSize
>19829	Identifier	nDstXSize
>19830	Argument	TRUE
>19831	Identifier	TRUE
>19832	Argument	psJob -> pTransformerArg
>19833	PtrMemberAccess	psJob -> pTransformerArg
>19834	Identifier	pTransformerArg
>19835	Identifier	psJob
>19836	Callee	poWK -> pfnTransformer
>19837	PtrMemberAccess	poWK -> pfnTransformer
>19838	Identifier	pfnTransformer
>19839	Identifier	poWK
>19840	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>19841	CompoundStatement	 
>19842	ExpressionStatement	 
>19843	AssignmentExpr	padfZ [ iDstX ] = 0.0
>19844	PrimaryExpression	0.0
>19845	ArrayIndexing	padfZ [ iDstX ]
>19846	Identifier	iDstX
>19847	Identifier	padfZ
>19848	ExpressionStatement	 
>19849	AssignmentExpr	padfY [ iDstX ] = iDstY + 0.5 + poWK -> nDstYOff
>19850	AdditiveExpression	iDstY + 0.5 + poWK -> nDstYOff
>19851	AdditiveExpression	0.5 + poWK -> nDstYOff
>19852	PtrMemberAccess	poWK -> nDstYOff
>19853	Identifier	nDstYOff
>19854	Identifier	poWK
>19855	PrimaryExpression	0.5
>19856	Identifier	iDstY
>19857	ArrayIndexing	padfY [ iDstX ]
>19858	Identifier	iDstX
>19859	Identifier	padfY
>19860	ExpressionStatement	 
>19861	AssignmentExpr	padfX [ iDstX ] = iDstX + 0.5 + poWK -> nDstXOff
>19862	AdditiveExpression	iDstX + 0.5 + poWK -> nDstXOff
>19863	AdditiveExpression	0.5 + poWK -> nDstXOff
>19864	PtrMemberAccess	poWK -> nDstXOff
>19865	Identifier	nDstXOff
>19866	Identifier	poWK
>19867	PrimaryExpression	0.5
>19868	Identifier	iDstX
>19869	ArrayIndexing	padfX [ iDstX ]
>19870	Identifier	iDstX
>19871	Identifier	padfX
>19872	IncDecOp	 
>19873	IncDec	++
>19874	Identifier	iDstX
>19875	Condition	 
>19876	RelationalExpression	iDstX < nDstXSize
>19877	Identifier	nDstXSize
>19878	Identifier	iDstX
>19879	ForInit	 
>19880	AssignmentExpr	iDstX = 0
>19881	PrimaryExpression	0
>19882	Identifier	iDstX
>19883	IdentifierDeclStatement	 
>19884	IdentifierDecl	iDstX
>19885	Identifier	iDstX
>19886	IdentifierDeclType	int
>19887	IncDecOp	 
>19888	IncDec	++
>19889	Identifier	iDstY
>19890	Condition	 
>19891	RelationalExpression	iDstY < iYMax
>19892	Identifier	iYMax
>19893	Identifier	iDstY
>19894	ForInit	 
>19895	AssignmentExpr	iDstY = iYMin
>19896	Identifier	iYMin
>19897	Identifier	iDstY
>19898	ExpressionStatement	 
>19899	AssignmentExpr	pabSuccess = ( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>19900	CastExpression	( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>19901	CallExpression	CPLMalloc ( sizeof ( int ) * nDstXSize )
>19902	ArgumentList	sizeof ( int ) * nDstXSize
>19903	Argument	sizeof ( int ) * nDstXSize
>19904	MultiplicativeExpression	sizeof ( int ) * nDstXSize
>19905	Identifier	nDstXSize
>19906	SizeofExpr	sizeof ( int )
>19907	SizeofOperand	int
>19908	Sizeof	sizeof
>19909	Callee	CPLMalloc
>19910	Identifier	CPLMalloc
>19911	CastTarget	int *
>19912	Identifier	pabSuccess
>19913	ExpressionStatement	 
>19914	AssignmentExpr	padfZ = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>19915	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>19916	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>19917	ArgumentList	sizeof ( double ) * nDstXSize
>19918	Argument	sizeof ( double ) * nDstXSize
>19919	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>19920	Identifier	nDstXSize
>19921	SizeofExpr	sizeof ( double )
>19922	SizeofOperand	double
>19923	Sizeof	sizeof
>19924	Callee	CPLMalloc
>19925	Identifier	CPLMalloc
>19926	CastTarget	double *
>19927	Identifier	padfZ
>19928	ExpressionStatement	 
>19929	AssignmentExpr	padfY = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>19930	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>19931	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>19932	ArgumentList	sizeof ( double ) * nDstXSize
>19933	Argument	sizeof ( double ) * nDstXSize
>19934	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>19935	Identifier	nDstXSize
>19936	SizeofExpr	sizeof ( double )
>19937	SizeofOperand	double
>19938	Sizeof	sizeof
>19939	Callee	CPLMalloc
>19940	Identifier	CPLMalloc
>19941	CastTarget	double *
>19942	Identifier	padfY
>19943	ExpressionStatement	 
>19944	AssignmentExpr	padfX = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>19945	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>19946	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>19947	ArgumentList	sizeof ( double ) * nDstXSize
>19948	Argument	sizeof ( double ) * nDstXSize
>19949	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>19950	Identifier	nDstXSize
>19951	SizeofExpr	sizeof ( double )
>19952	SizeofOperand	double
>19953	Sizeof	sizeof
>19954	Callee	CPLMalloc
>19955	Identifier	CPLMalloc
>19956	CastTarget	double *
>19957	Identifier	padfX
>19958	IdentifierDeclStatement	 
>19959	IdentifierDecl	* pabSuccess
>19960	Identifier	pabSuccess
>19961	IdentifierDeclType	int *
>19962	IdentifierDeclStatement	 
>19963	IdentifierDecl	* padfZ
>19964	Identifier	padfZ
>19965	IdentifierDeclType	double *
>19966	IdentifierDecl	* padfY
>19967	Identifier	padfY
>19968	IdentifierDeclType	double *
>19969	IdentifierDecl	* padfX
>19970	Identifier	padfX
>19971	IdentifierDeclType	double *
>19972	IdentifierDeclStatement	 
>19973	IdentifierDecl	nSrcYSize = poWK -> nSrcYSize
>19974	AssignmentExpr	nSrcYSize = poWK -> nSrcYSize
>19975	PtrMemberAccess	poWK -> nSrcYSize
>19976	Identifier	nSrcYSize
>19977	Identifier	poWK
>19978	Identifier	nSrcYSize
>19979	Identifier	nSrcYSize
>19980	IdentifierDeclType	int
>19981	IdentifierDecl	nSrcXSize = poWK -> nSrcXSize
>19982	AssignmentExpr	nSrcXSize = poWK -> nSrcXSize
>19983	PtrMemberAccess	poWK -> nSrcXSize
>19984	Identifier	nSrcXSize
>19985	Identifier	poWK
>19986	Identifier	nSrcXSize
>19987	Identifier	nSrcXSize
>19988	IdentifierDeclType	int
>19989	IdentifierDeclStatement	 
>19990	IdentifierDecl	nDstXSize = poWK -> nDstXSize
>19991	AssignmentExpr	nDstXSize = poWK -> nDstXSize
>19992	PtrMemberAccess	poWK -> nDstXSize
>19993	Identifier	nDstXSize
>19994	Identifier	poWK
>19995	Identifier	nDstXSize
>19996	Identifier	nDstXSize
>19997	IdentifierDeclType	int
>19998	IdentifierDeclStatement	 
>19999	IdentifierDecl	iDstY
>20000	Identifier	iDstY
>20001	IdentifierDeclType	int
>20002	IdentifierDeclStatement	 
>20003	IdentifierDecl	iYMax = psJob -> iYMax
>20004	AssignmentExpr	iYMax = psJob -> iYMax
>20005	PtrMemberAccess	psJob -> iYMax
>20006	Identifier	iYMax
>20007	Identifier	psJob
>20008	Identifier	iYMax
>20009	Identifier	iYMax
>20010	IdentifierDeclType	int
>20011	IdentifierDeclStatement	 
>20012	IdentifierDecl	iYMin = psJob -> iYMin
>20013	AssignmentExpr	iYMin = psJob -> iYMin
>20014	PtrMemberAccess	psJob -> iYMin
>20015	Identifier	iYMin
>20016	Identifier	psJob
>20017	Identifier	iYMin
>20018	Identifier	iYMin
>20019	IdentifierDeclType	int
>20020	IdentifierDeclStatement	 
>20021	IdentifierDecl	* poWK = psJob -> poWK
>20022	AssignmentExpr	* poWK = psJob -> poWK
>20023	PtrMemberAccess	psJob -> poWK
>20024	Identifier	poWK
>20025	Identifier	psJob
>20026	Identifier	poWK
>20027	Identifier	poWK
>20028	IdentifierDeclType	GDALWarpKernel *
>20029	IdentifierDeclStatement	 
>20030	IdentifierDecl	* psJob = ( GWKJobStruct * ) pData
>20031	AssignmentExpr	* psJob = ( GWKJobStruct * ) pData
>20032	CastExpression	( GWKJobStruct * ) pData
>20033	Identifier	pData
>20034	CastTarget	GWKJobStruct *
>20035	Identifier	psJob
>20036	Identifier	psJob
>20037	IdentifierDeclType	GWKJobStruct *
>20101	FunctionDef	GWKAverageOrMode (GDALWarpKernel * poWK)
>20102	ParameterList	GDALWarpKernel * poWK
>20103	Parameter	 
>20104	Identifier	poWK
>20105	ParameterType	GDALWarpKernel *
>20106	ReturnType	static CPLErr
>20107	CompoundStatement	 
>20108	ReturnStatement	 
>20109	CallExpression	GWKRun ( poWK , \"GWKAverageOrMode\" , GWKAverageOrModeThread )
>20110	ArgumentList	poWK
>20111	Argument	GWKAverageOrModeThread
>20112	Identifier	GWKAverageOrModeThread
>20113	Argument	\"GWKAverageOrMode\"
>20114	PrimaryExpression	\"GWKAverageOrMode\"
>20115	Argument	poWK
>20116	Identifier	poWK
>20117	Callee	GWKRun
>20118	Identifier	GWKRun
>20125	FunctionDef	GWKAverageOrModeThread (void * pData)
>20126	ParameterList	void * pData
>20127	Parameter	 
>20128	Identifier	pData
>20129	ParameterType	void *
>20130	ReturnType	static void
>20131	CompoundStatement	 
>20132	IfStatement	if ( panVals )
>20133	ExpressionStatement	 
>20134	CallExpression	CPLFree ( panVals )
>20135	ArgumentList	panVals
>20136	Argument	panVals
>20137	Identifier	panVals
>20138	Callee	CPLFree
>20139	Identifier	CPLFree
>20140	Condition	 
>20141	Identifier	panVals
>20142	ExpressionStatement	 
>20143	CallExpression	CPLFree ( pabSuccess2 )
>20144	ArgumentList	pabSuccess2
>20145	Argument	pabSuccess2
>20146	Identifier	pabSuccess2
>20147	Callee	CPLFree
>20148	Identifier	CPLFree
>20149	ExpressionStatement	 
>20150	CallExpression	CPLFree ( pabSuccess )
>20151	ArgumentList	pabSuccess
>20152	Argument	pabSuccess
>20153	Identifier	pabSuccess
>20154	Callee	CPLFree
>20155	Identifier	CPLFree
>20156	ExpressionStatement	 
>20157	CallExpression	CPLFree ( padfZ2 )
>20158	ArgumentList	padfZ2
>20159	Argument	padfZ2
>20160	Identifier	padfZ2
>20161	Callee	CPLFree
>20162	Identifier	CPLFree
>20163	ExpressionStatement	 
>20164	CallExpression	CPLFree ( padfY2 )
>20165	ArgumentList	padfY2
>20166	Argument	padfY2
>20167	Identifier	padfY2
>20168	Callee	CPLFree
>20169	Identifier	CPLFree
>20170	ExpressionStatement	 
>20171	CallExpression	CPLFree ( padfX2 )
>20172	ArgumentList	padfX2
>20173	Argument	padfX2
>20174	Identifier	padfX2
>20175	Callee	CPLFree
>20176	Identifier	CPLFree
>20177	ExpressionStatement	 
>20178	CallExpression	CPLFree ( padfZ )
>20179	ArgumentList	padfZ
>20180	Argument	padfZ
>20181	Identifier	padfZ
>20182	Callee	CPLFree
>20183	Identifier	CPLFree
>20184	ExpressionStatement	 
>20185	CallExpression	CPLFree ( padfY )
>20186	ArgumentList	padfY
>20187	Argument	padfY
>20188	Identifier	padfY
>20189	Callee	CPLFree
>20190	Identifier	CPLFree
>20191	ExpressionStatement	 
>20192	CallExpression	CPLFree ( padfX )
>20193	ArgumentList	padfX
>20194	Argument	padfX
>20195	Identifier	padfX
>20196	Callee	CPLFree
>20197	Identifier	CPLFree
>20198	ForStatement	for ( iDstY = iYMin ; iDstY < iYMax ; iDstY ++ )
>20199	CompoundStatement	 
>20200	IfStatement	if ( psJob -> pfnProgress ( psJob ) )
>20201	BreakStatement	 
>20202	Condition	 
>20203	CallExpression	psJob -> pfnProgress ( psJob )
>20204	ArgumentList	psJob
>20205	Argument	psJob
>20206	Identifier	psJob
>20207	Callee	psJob -> pfnProgress
>20208	PtrMemberAccess	psJob -> pfnProgress
>20209	Identifier	pfnProgress
>20210	Identifier	psJob
>20211	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>20212	CompoundStatement	 
>20213	IfStatement	if ( poWK -> panDstValid != NULL )
>20214	CompoundStatement	 
>20215	ExpressionStatement	 
>20216	AssignmentExpr	poWK -> panDstValid [ iDstOffset >> 5 ] |= 0x01 << ( iDstOffset & 0x1f )
>20217	ShiftExpression	0x01 << ( iDstOffset & 0x1f )
>20218	BitAndExpression	iDstOffset & 0x1f
>20219	PrimaryExpression	0x1f
>20220	Identifier	iDstOffset
>20221	PrimaryExpression	0x01
>20222	ArrayIndexing	poWK -> panDstValid [ iDstOffset >> 5 ]
>20223	ShiftExpression	iDstOffset >> 5
>20224	PrimaryExpression	5
>20225	Identifier	iDstOffset
>20226	PtrMemberAccess	poWK -> panDstValid
>20227	Identifier	panDstValid
>20228	Identifier	poWK
>20229	Condition	 
>20230	EqualityExpression	poWK -> panDstValid != NULL
>20231	Identifier	NULL
>20232	PtrMemberAccess	poWK -> panDstValid
>20233	Identifier	panDstValid
>20234	Identifier	poWK
>20235	ExpressionStatement	 
>20236	CallExpression	GWKOverlayDensity ( poWK , iDstOffset , dfDensity )
>20237	ArgumentList	poWK
>20238	Argument	dfDensity
>20239	Identifier	dfDensity
>20240	Argument	iDstOffset
>20241	Identifier	iDstOffset
>20242	Argument	poWK
>20243	Identifier	poWK
>20244	Callee	GWKOverlayDensity
>20245	Identifier	GWKOverlayDensity
>20246	IfStatement	if ( ! bHasFoundDensity )
>20247	ContinueStatement	 
>20248	Condition	 
>20249	UnaryOp	! bHasFoundDensity
>20250	Identifier	bHasFoundDensity
>20251	UnaryOperator	!
>20252	ForStatement	for ( int iBand = 0 ; iBand < poWK -> nBands ; iBand ++ )
>20253	CompoundStatement	 
>20254	IfStatement	if ( bHasFoundDensity )
>20255	CompoundStatement	 
>20256	ExpressionStatement	 
>20257	CallExpression	GWKSetPixelValue ( poWK , iBand , iDstOffset , dfBandDensity , dfValueReal , dfValueImag )
>20258	ArgumentList	poWK
>20259	Argument	dfValueImag
>20260	Identifier	dfValueImag
>20261	Argument	dfValueReal
>20262	Identifier	dfValueReal
>20263	Argument	dfBandDensity
>20264	Identifier	dfBandDensity
>20265	Argument	iDstOffset
>20266	Identifier	iDstOffset
>20267	Argument	iBand
>20268	Identifier	iBand
>20269	Argument	poWK
>20270	Identifier	poWK
>20271	Callee	GWKSetPixelValue
>20272	Identifier	GWKSetPixelValue
>20273	Condition	 
>20274	Identifier	bHasFoundDensity
>20275	IfStatement	if ( nAlgo == 1 )
>20276	ElseStatement	else
>20277	IfStatement	if ( nAlgo == 2 || nAlgo == 3 )
>20278	CompoundStatement	 
>20279	IfStatement	if ( nAlgo == 2 )
>20280	ElseStatement	else
>20281	CompoundStatement	 
>20282	IfStatement	if ( iMaxInd != - 1 )
>20283	CompoundStatement	 
>20284	ExpressionStatement	 
>20285	AssignmentExpr	bHasFoundDensity = TRUE
>20286	Identifier	TRUE
>20287	Identifier	bHasFoundDensity
>20288	ExpressionStatement	 
>20289	AssignmentExpr	dfBandDensity = 1
>20290	PrimaryExpression	1
>20291	Identifier	dfBandDensity
>20292	ExpressionStatement	 
>20293	AssignmentExpr	dfValueReal = ( float ) iMaxInd
>20294	CastExpression	( float ) iMaxInd
>20295	Identifier	iMaxInd
>20296	CastTarget	float
>20297	Identifier	dfValueReal
>20298	Condition	 
>20299	EqualityExpression	iMaxInd != - 1
>20300	UnaryOp	- 1
>20301	PrimaryExpression	1
>20302	UnaryOperator	-
>20303	Identifier	iMaxInd
>20304	ForStatement	for ( iSrcY = iSrcYMin ; iSrcY < iSrcYMax ; iSrcY ++ )
>20305	CompoundStatement	 
>20306	ForStatement	for ( iSrcX = iSrcXMin ; iSrcX < iSrcXMax ; iSrcX ++ )
>20307	CompoundStatement	 
>20308	IfStatement	if ( GWKGetPixelValue ( poWK , iBand , iSrcOffset , & dfBandDensity , & dfValueRealTmp , & dfValueImagTmp ) && dfBandDensity > \
>20309	CompoundStatement	 
>20310	IfStatement	if ( ++ panVals [ nVal + nBinsOffset ] > nMaxVal )
>20311	CompoundStatement	 
>20312	ExpressionStatement	 
>20313	AssignmentExpr	nMaxVal = panVals [ nVal + nBinsOffset ]
>20314	ArrayIndexing	panVals [ nVal + nBinsOffset ]
>20315	AdditiveExpression	nVal + nBinsOffset
>20316	Identifier	nBinsOffset
>20317	Identifier	nVal
>20318	Identifier	panVals
>20319	Identifier	nMaxVal
>20320	ExpressionStatement	 
>20321	AssignmentExpr	iMaxInd = nVal
>20322	Identifier	nVal
>20323	Identifier	iMaxInd
>20324	Condition	 
>20325	RelationalExpression	++ panVals [ nVal + nBinsOffset ] > nMaxVal
>20326	Identifier	nMaxVal
>20327	UnaryExpression	++ panVals [ nVal + nBinsOffset ]
>20328	ArrayIndexing	panVals [ nVal + nBinsOffset ]
>20329	AdditiveExpression	nVal + nBinsOffset
>20330	Identifier	nBinsOffset
>20331	Identifier	nVal
>20332	Identifier	panVals
>20333	IncDec	++
>20334	IdentifierDeclStatement	 
>20335	IdentifierDecl	nVal = ( int ) dfValueRealTmp
>20336	AssignmentExpr	nVal = ( int ) dfValueRealTmp
>20337	CastExpression	( int ) dfValueRealTmp
>20338	Identifier	dfValueRealTmp
>20339	CastTarget	int
>20340	Identifier	nVal
>20341	Identifier	nVal
>20342	IdentifierDeclType	int
>20343	ExpressionStatement	 
>20344	IncDecOp	nCount ++
>20345	IncDec	++
>20346	Identifier	nCount
>20347	Condition	 
>20348	AndExpression	GWKGetPixelValue ( poWK , iBand , iSrcOffset , & dfBandDensity , & dfValueRealTmp , & dfValueImagTmp ) && \
>20349	RelationalExpression	dfBandDensity > 0.0000000001
>20350	PrimaryExpression	0.0000000001
>20351	Identifier	dfBandDensity
>20352	CallExpression	GWKGetPixelValue ( poWK , iBand , iSrcOffset , & dfBandDensity , & dfValueRealTmp , & dfValueImagTmp )
>20353	ArgumentList	poWK
>20354	Argument	& dfValueImagTmp
>20355	UnaryOp	& dfValueImagTmp
>20356	Identifier	dfValueImagTmp
>20357	UnaryOperator	&
>20358	Argument	& dfValueRealTmp
>20359	UnaryOp	& dfValueRealTmp
>20360	Identifier	dfValueRealTmp
>20361	UnaryOperator	&
>20362	Argument	& dfBandDensity
>20363	UnaryOp	& dfBandDensity
>20364	Identifier	dfBandDensity
>20365	UnaryOperator	&
>20366	Argument	iSrcOffset
>20367	Identifier	iSrcOffset
>20368	Argument	iBand
>20369	Identifier	iBand
>20370	Argument	poWK
>20371	Identifier	poWK
>20372	Callee	GWKGetPixelValue
>20373	Identifier	GWKGetPixelValue
>20374	ExpressionStatement	 
>20375	IncDecOp	nCount2 ++
>20376	IncDec	++
>20377	Identifier	nCount2
>20378	IfStatement	if ( poWK -> panUnifiedSrcValid != NULL && ! ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & \
>20379	ContinueStatement	 
>20380	Condition	 
>20381	AndExpression	poWK -> panUnifiedSrcValid != NULL && ! ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( \
>20382	UnaryOp	! ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) ) )
>20383	BitAndExpression	poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) )
>20384	ShiftExpression	0x01 << ( iSrcOffset & 0x1f )
>20385	BitAndExpression	iSrcOffset & 0x1f
>20386	PrimaryExpression	0x1f
>20387	Identifier	iSrcOffset
>20388	PrimaryExpression	0x01
>20389	ArrayIndexing	poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ]
>20390	ShiftExpression	iSrcOffset >> 5
>20391	PrimaryExpression	5
>20392	Identifier	iSrcOffset
>20393	PtrMemberAccess	poWK -> panUnifiedSrcValid
>20394	Identifier	panUnifiedSrcValid
>20395	Identifier	poWK
>20396	UnaryOperator	!
>20397	EqualityExpression	poWK -> panUnifiedSrcValid != NULL
>20398	Identifier	NULL
>20399	PtrMemberAccess	poWK -> panUnifiedSrcValid
>20400	Identifier	panUnifiedSrcValid
>20401	Identifier	poWK
>20402	ExpressionStatement	 
>20403	AssignmentExpr	iSrcOffset = iSrcX + iSrcY * nSrcXSize
>20404	AdditiveExpression	iSrcX + iSrcY * nSrcXSize
>20405	MultiplicativeExpression	iSrcY * nSrcXSize
>20406	Identifier	nSrcXSize
>20407	Identifier	iSrcY
>20408	Identifier	iSrcX
>20409	Identifier	iSrcOffset
>20410	IncDecOp	 
>20411	IncDec	++
>20412	Identifier	iSrcX
>20413	Condition	 
>20414	RelationalExpression	iSrcX < iSrcXMax
>20415	Identifier	iSrcXMax
>20416	Identifier	iSrcX
>20417	ForInit	 
>20418	AssignmentExpr	iSrcX = iSrcXMin
>20419	Identifier	iSrcXMin
>20420	Identifier	iSrcX
>20421	IncDecOp	 
>20422	IncDec	++
>20423	Identifier	iSrcY
>20424	Condition	 
>20425	RelationalExpression	iSrcY < iSrcYMax
>20426	Identifier	iSrcYMax
>20427	Identifier	iSrcY
>20428	ForInit	 
>20429	AssignmentExpr	iSrcY = iSrcYMin
>20430	Identifier	iSrcYMin
>20431	Identifier	iSrcY
>20432	ExpressionStatement	 
>20433	CallExpression	memset ( panVals , 0 , nBins * sizeof ( int ) )
>20434	ArgumentList	panVals
>20435	Argument	nBins * sizeof ( int )
>20436	MultiplicativeExpression	nBins * sizeof ( int )
>20437	SizeofExpr	sizeof ( int )
>20438	SizeofOperand	int
>20439	Sizeof	sizeof
>20440	Identifier	nBins
>20441	Argument	0
>20442	PrimaryExpression	0
>20443	Argument	panVals
>20444	Identifier	panVals
>20445	Callee	memset
>20446	Identifier	memset
>20447	IdentifierDeclStatement	 
>20448	IdentifierDecl	iMaxInd = - 1
>20449	AssignmentExpr	iMaxInd = - 1
>20450	UnaryOp	- 1
>20451	PrimaryExpression	1
>20452	UnaryOperator	-
>20453	Identifier	iMaxInd
>20454	Identifier	iMaxInd
>20455	IdentifierDeclType	int
>20456	IdentifierDecl	nMaxVal = 0
>20457	AssignmentExpr	nMaxVal = 0
>20458	PrimaryExpression	0
>20459	Identifier	nMaxVal
>20460	Identifier	nMaxVal
>20461	IdentifierDeclType	int
>20462	CompoundStatement	 
>20463	ExpressionStatement	 
>20464	CallExpression	CPLFree ( panSums )
>20465	ArgumentList	panSums
>20466	Argument	panSums
>20467	Identifier	panSums
>20468	Callee	CPLFree
>20469	Identifier	CPLFree
>20470	ExpressionStatement	 
>20471	CallExpression	CPLFree ( pafVals )
>20472	ArgumentList	pafVals
>20473	Argument	pafVals
>20474	Identifier	pafVals
>20475	Callee	CPLFree
>20476	Identifier	CPLFree
>20477	IfStatement	if ( iMaxVal != - 1 )
>20478	CompoundStatement	 
>20479	ExpressionStatement	 
>20480	AssignmentExpr	bHasFoundDensity = TRUE
>20481	Identifier	TRUE
>20482	Identifier	bHasFoundDensity
>20483	ExpressionStatement	 
>20484	AssignmentExpr	dfBandDensity = 1
>20485	PrimaryExpression	1
>20486	Identifier	dfBandDensity
>20487	ExpressionStatement	 
>20488	AssignmentExpr	dfValueReal = pafVals [ iMaxVal ]
>20489	ArrayIndexing	pafVals [ iMaxVal ]
>20490	Identifier	iMaxVal
>20491	Identifier	pafVals
>20492	Identifier	dfValueReal
>20493	Condition	 
>20494	EqualityExpression	iMaxVal != - 1
>20495	UnaryOp	- 1
>20496	PrimaryExpression	1
>20497	UnaryOperator	-
>20498	Identifier	iMaxVal
>20499	ForStatement	for ( iSrcY = iSrcYMin ; iSrcY < iSrcYMax ; iSrcY ++ )
>20500	CompoundStatement	 
>20501	ForStatement	for ( iSrcX = iSrcXMin ; iSrcX < iSrcXMax ; iSrcX ++ )
>20502	CompoundStatement	 
>20503	IfStatement	if ( GWKGetPixelValue ( poWK , iBand , iSrcOffset , & dfBandDensity , & dfValueRealTmp , & dfValueImagTmp ) && dfBandDensity > \
>20504	CompoundStatement	 
>20505	IfStatement	if ( i == iMaxInd )
>20506	CompoundStatement	 
>20507	ExpressionStatement	 
>20508	UnaryExpression	++ iMaxInd
>20509	Identifier	iMaxInd
>20510	IncDec	++
>20511	IfStatement	if ( iMaxVal < 0 )
>20512	ExpressionStatement	 
>20513	AssignmentExpr	iMaxVal = iMaxInd
>20514	Identifier	iMaxInd
>20515	Identifier	iMaxVal
>20516	Condition	 
>20517	RelationalExpression	iMaxVal < 0
>20518	PrimaryExpression	0
>20519	Identifier	iMaxVal
>20520	ExpressionStatement	 
>20521	AssignmentExpr	panSums [ iMaxInd ] = 1
>20522	PrimaryExpression	1
>20523	ArrayIndexing	panSums [ iMaxInd ]
>20524	Identifier	iMaxInd
>20525	Identifier	panSums
>20526	ExpressionStatement	 
>20527	AssignmentExpr	pafVals [ iMaxInd ] = fVal
>20528	Identifier	fVal
>20529	ArrayIndexing	pafVals [ iMaxInd ]
>20530	Identifier	iMaxInd
>20531	Identifier	pafVals
>20532	Condition	 
>20533	EqualityExpression	i == iMaxInd
>20534	Identifier	iMaxInd
>20535	Identifier	i
>20536	ForStatement	for ( i = 0 ; i < iMaxInd ; ++ i )
>20537	IfStatement	if ( pafVals [ i ] == fVal && ++ panSums [ i ] > panSums [ iMaxVal ] )
>20538	CompoundStatement	 
>20539	BreakStatement	 
>20540	ExpressionStatement	 
>20541	AssignmentExpr	iMaxVal = i
>20542	Identifier	i
>20543	Identifier	iMaxVal
>20544	Condition	 
>20545	AndExpression	pafVals [ i ] == fVal && ++ panSums [ i ] > panSums [ iMaxVal ]
>20546	RelationalExpression	++ panSums [ i ] > panSums [ iMaxVal ]
>20547	ArrayIndexing	panSums [ iMaxVal ]
>20548	Identifier	iMaxVal
>20549	Identifier	panSums
>20550	UnaryExpression	++ panSums [ i ]
>20551	ArrayIndexing	panSums [ i ]
>20552	Identifier	i
>20553	Identifier	panSums
>20554	IncDec	++
>20555	EqualityExpression	pafVals [ i ] == fVal
>20556	Identifier	fVal
>20557	ArrayIndexing	pafVals [ i ]
>20558	Identifier	i
>20559	Identifier	pafVals
>20560	UnaryExpression	 
>20561	Identifier	i
>20562	IncDec	++
>20563	Condition	 
>20564	RelationalExpression	i < iMaxInd
>20565	Identifier	iMaxInd
>20566	Identifier	i
>20567	ForInit	 
>20568	AssignmentExpr	i = 0
>20569	PrimaryExpression	0
>20570	Identifier	i
>20571	IdentifierDeclStatement	 
>20572	IdentifierDecl	fVal = dfValueRealTmp
>20573	AssignmentExpr	fVal = dfValueRealTmp
>20574	Identifier	dfValueRealTmp
>20575	Identifier	dfValueRealTmp
>20576	Identifier	fVal
>20577	IdentifierDeclType	float
>20578	ExpressionStatement	 
>20579	IncDecOp	nCount ++
>20580	IncDec	++
>20581	Identifier	nCount
>20582	Condition	 
>20583	AndExpression	GWKGetPixelValue ( poWK , iBand , iSrcOffset , & dfBandDensity , & dfValueRealTmp , & dfValueImagTmp ) && \
>20584	RelationalExpression	dfBandDensity > 0.0000000001
>20585	PrimaryExpression	0.0000000001
>20586	Identifier	dfBandDensity
>20587	CallExpression	GWKGetPixelValue ( poWK , iBand , iSrcOffset , & dfBandDensity , & dfValueRealTmp , & dfValueImagTmp )
>20588	ArgumentList	poWK
>20589	Argument	& dfValueImagTmp
>20590	UnaryOp	& dfValueImagTmp
>20591	Identifier	dfValueImagTmp
>20592	UnaryOperator	&
>20593	Argument	& dfValueRealTmp
>20594	UnaryOp	& dfValueRealTmp
>20595	Identifier	dfValueRealTmp
>20596	UnaryOperator	&
>20597	Argument	& dfBandDensity
>20598	UnaryOp	& dfBandDensity
>20599	Identifier	dfBandDensity
>20600	UnaryOperator	&
>20601	Argument	iSrcOffset
>20602	Identifier	iSrcOffset
>20603	Argument	iBand
>20604	Identifier	iBand
>20605	Argument	poWK
>20606	Identifier	poWK
>20607	Callee	GWKGetPixelValue
>20608	Identifier	GWKGetPixelValue
>20609	ExpressionStatement	 
>20610	IncDecOp	nCount2 ++
>20611	IncDec	++
>20612	Identifier	nCount2
>20613	IfStatement	if ( poWK -> panUnifiedSrcValid != NULL && ! ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & \
>20614	ContinueStatement	 
>20615	Condition	 
>20616	AndExpression	poWK -> panUnifiedSrcValid != NULL && ! ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( \
>20617	UnaryOp	! ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) ) )
>20618	BitAndExpression	poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) )
>20619	ShiftExpression	0x01 << ( iSrcOffset & 0x1f )
>20620	BitAndExpression	iSrcOffset & 0x1f
>20621	PrimaryExpression	0x1f
>20622	Identifier	iSrcOffset
>20623	PrimaryExpression	0x01
>20624	ArrayIndexing	poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ]
>20625	ShiftExpression	iSrcOffset >> 5
>20626	PrimaryExpression	5
>20627	Identifier	iSrcOffset
>20628	PtrMemberAccess	poWK -> panUnifiedSrcValid
>20629	Identifier	panUnifiedSrcValid
>20630	Identifier	poWK
>20631	UnaryOperator	!
>20632	EqualityExpression	poWK -> panUnifiedSrcValid != NULL
>20633	Identifier	NULL
>20634	PtrMemberAccess	poWK -> panUnifiedSrcValid
>20635	Identifier	panUnifiedSrcValid
>20636	Identifier	poWK
>20637	ExpressionStatement	 
>20638	AssignmentExpr	iSrcOffset = iSrcX + iSrcY * nSrcXSize
>20639	AdditiveExpression	iSrcX + iSrcY * nSrcXSize
>20640	MultiplicativeExpression	iSrcY * nSrcXSize
>20641	Identifier	nSrcXSize
>20642	Identifier	iSrcY
>20643	Identifier	iSrcX
>20644	Identifier	iSrcOffset
>20645	IncDecOp	 
>20646	IncDec	++
>20647	Identifier	iSrcX
>20648	Condition	 
>20649	RelationalExpression	iSrcX < iSrcXMax
>20650	Identifier	iSrcXMax
>20651	Identifier	iSrcX
>20652	ForInit	 
>20653	AssignmentExpr	iSrcX = iSrcXMin
>20654	Identifier	iSrcXMin
>20655	Identifier	iSrcX
>20656	IncDecOp	 
>20657	IncDec	++
>20658	Identifier	iSrcY
>20659	Condition	 
>20660	RelationalExpression	iSrcY < iSrcYMax
>20661	Identifier	iSrcYMax
>20662	Identifier	iSrcY
>20663	ForInit	 
>20664	AssignmentExpr	iSrcY = iSrcYMin
>20665	Identifier	iSrcYMin
>20666	Identifier	iSrcY
>20667	IdentifierDeclStatement	 
>20668	IdentifierDecl	* panSums = ( int * ) CPLMalloc ( nNumPx * sizeof ( int ) )
>20669	AssignmentExpr	* panSums = ( int * ) CPLMalloc ( nNumPx * sizeof ( int ) )
>20670	CastExpression	( int * ) CPLMalloc ( nNumPx * sizeof ( int ) )
>20671	CallExpression	CPLMalloc ( nNumPx * sizeof ( int ) )
>20672	ArgumentList	nNumPx * sizeof ( int )
>20673	Argument	nNumPx * sizeof ( int )
>20674	MultiplicativeExpression	nNumPx * sizeof ( int )
>20675	SizeofExpr	sizeof ( int )
>20676	SizeofOperand	int
>20677	Sizeof	sizeof
>20678	Identifier	nNumPx
>20679	Callee	CPLMalloc
>20680	Identifier	CPLMalloc
>20681	CastTarget	int *
>20682	Identifier	panSums
>20683	Identifier	panSums
>20684	IdentifierDeclType	int *
>20685	IdentifierDeclStatement	 
>20686	IdentifierDecl	* pafVals = ( float * ) CPLMalloc ( nNumPx * sizeof ( float ) )
>20687	AssignmentExpr	* pafVals = ( float * ) CPLMalloc ( nNumPx * sizeof ( float ) )
>20688	CastExpression	( float * ) CPLMalloc ( nNumPx * sizeof ( float ) )
>20689	CallExpression	CPLMalloc ( nNumPx * sizeof ( float ) )
>20690	ArgumentList	nNumPx * sizeof ( float )
>20691	Argument	nNumPx * sizeof ( float )
>20692	MultiplicativeExpression	nNumPx * sizeof ( float )
>20693	SizeofExpr	sizeof ( float )
>20694	SizeofOperand	float
>20695	Sizeof	sizeof
>20696	Identifier	nNumPx
>20697	Callee	CPLMalloc
>20698	Identifier	CPLMalloc
>20699	CastTarget	float *
>20700	Identifier	pafVals
>20701	Identifier	pafVals
>20702	IdentifierDeclType	float *
>20703	IfStatement	if ( nNumPx == 0 )
>20704	ContinueStatement	 
>20705	Condition	 
>20706	EqualityExpression	nNumPx == 0
>20707	PrimaryExpression	0
>20708	Identifier	nNumPx
>20709	IdentifierDeclStatement	 
>20710	IdentifierDecl	nNumPx = nSrcXSize * nSrcYSize
>20711	AssignmentExpr	nNumPx = nSrcXSize * nSrcYSize
>20712	MultiplicativeExpression	nSrcXSize * nSrcYSize
>20713	Identifier	nSrcYSize
>20714	Identifier	nSrcXSize
>20715	Identifier	nNumPx
>20716	Identifier	nNumPx
>20717	IdentifierDeclType	int
>20718	IdentifierDeclStatement	 
>20719	IdentifierDecl	i = 0
>20720	AssignmentExpr	i = 0
>20721	PrimaryExpression	0
>20722	Identifier	i
>20723	Identifier	i
>20724	IdentifierDeclType	int
>20725	IdentifierDecl	iMaxVal = - 1
>20726	AssignmentExpr	iMaxVal = - 1
>20727	UnaryOp	- 1
>20728	PrimaryExpression	1
>20729	UnaryOperator	-
>20730	Identifier	iMaxVal
>20731	Identifier	iMaxVal
>20732	IdentifierDeclType	int
>20733	IdentifierDecl	iMaxInd = 0
>20734	AssignmentExpr	iMaxInd = 0
>20735	PrimaryExpression	0
>20736	Identifier	iMaxInd
>20737	Identifier	iMaxInd
>20738	IdentifierDeclType	int
>20739	Condition	 
>20740	EqualityExpression	nAlgo == 2
>20741	PrimaryExpression	2
>20742	Identifier	nAlgo
>20743	Condition	 
>20744	OrExpression	nAlgo == 2 || nAlgo == 3
>20745	EqualityExpression	nAlgo == 3
>20746	PrimaryExpression	3
>20747	Identifier	nAlgo
>20748	EqualityExpression	nAlgo == 2
>20749	PrimaryExpression	2
>20750	Identifier	nAlgo
>20751	CompoundStatement	 
>20752	IfStatement	if ( nCount > 0 )
>20753	CompoundStatement	 
>20754	ExpressionStatement	 
>20755	AssignmentExpr	bHasFoundDensity = TRUE
>20756	Identifier	TRUE
>20757	Identifier	bHasFoundDensity
>20758	ExpressionStatement	 
>20759	AssignmentExpr	dfBandDensity = 1
>20760	PrimaryExpression	1
>20761	Identifier	dfBandDensity
>20762	ExpressionStatement	 
>20763	AssignmentExpr	dfValueReal = dfTotal / nCount
>20764	MultiplicativeExpression	dfTotal / nCount
>20765	Identifier	nCount
>20766	Identifier	dfTotal
>20767	Identifier	dfValueReal
>20768	Condition	 
>20769	RelationalExpression	nCount > 0
>20770	PrimaryExpression	0
>20771	Identifier	nCount
>20772	ForStatement	for ( iSrcY = iSrcYMin ; iSrcY < iSrcYMax ; iSrcY ++ )
>20773	CompoundStatement	 
>20774	ForStatement	for ( iSrcX = iSrcXMin ; iSrcX < iSrcXMax ; iSrcX ++ )
>20775	CompoundStatement	 
>20776	IfStatement	if ( GWKGetPixelValue ( poWK , iBand , iSrcOffset , & dfBandDensity , & dfValueRealTmp , & dfValueImagTmp ) && dfBandDensity > \
>20777	CompoundStatement	 
>20778	ExpressionStatement	 
>20779	AssignmentExpr	dfTotal += dfValueRealTmp
>20780	Identifier	dfValueRealTmp
>20781	Identifier	dfTotal
>20782	ExpressionStatement	 
>20783	IncDecOp	nCount ++
>20784	IncDec	++
>20785	Identifier	nCount
>20786	Condition	 
>20787	AndExpression	GWKGetPixelValue ( poWK , iBand , iSrcOffset , & dfBandDensity , & dfValueRealTmp , & dfValueImagTmp ) && \
>20788	RelationalExpression	dfBandDensity > 0.0000000001
>20789	PrimaryExpression	0.0000000001
>20790	Identifier	dfBandDensity
>20791	CallExpression	GWKGetPixelValue ( poWK , iBand , iSrcOffset , & dfBandDensity , & dfValueRealTmp , & dfValueImagTmp )
>20792	ArgumentList	poWK
>20793	Argument	& dfValueImagTmp
>20794	UnaryOp	& dfValueImagTmp
>20795	Identifier	dfValueImagTmp
>20796	UnaryOperator	&
>20797	Argument	& dfValueRealTmp
>20798	UnaryOp	& dfValueRealTmp
>20799	Identifier	dfValueRealTmp
>20800	UnaryOperator	&
>20801	Argument	& dfBandDensity
>20802	UnaryOp	& dfBandDensity
>20803	Identifier	dfBandDensity
>20804	UnaryOperator	&
>20805	Argument	iSrcOffset
>20806	Identifier	iSrcOffset
>20807	Argument	iBand
>20808	Identifier	iBand
>20809	Argument	poWK
>20810	Identifier	poWK
>20811	Callee	GWKGetPixelValue
>20812	Identifier	GWKGetPixelValue
>20813	ExpressionStatement	 
>20814	IncDecOp	nCount2 ++
>20815	IncDec	++
>20816	Identifier	nCount2
>20817	IfStatement	if ( poWK -> panUnifiedSrcValid != NULL && ! ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & \
>20818	CompoundStatement	 
>20819	ContinueStatement	 
>20820	Condition	 
>20821	AndExpression	poWK -> panUnifiedSrcValid != NULL && ! ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( \
>20822	UnaryOp	! ( poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) ) )
>20823	BitAndExpression	poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ] & ( 0x01 << ( iSrcOffset & 0x1f ) )
>20824	ShiftExpression	0x01 << ( iSrcOffset & 0x1f )
>20825	BitAndExpression	iSrcOffset & 0x1f
>20826	PrimaryExpression	0x1f
>20827	Identifier	iSrcOffset
>20828	PrimaryExpression	0x01
>20829	ArrayIndexing	poWK -> panUnifiedSrcValid [ iSrcOffset >> 5 ]
>20830	ShiftExpression	iSrcOffset >> 5
>20831	PrimaryExpression	5
>20832	Identifier	iSrcOffset
>20833	PtrMemberAccess	poWK -> panUnifiedSrcValid
>20834	Identifier	panUnifiedSrcValid
>20835	Identifier	poWK
>20836	UnaryOperator	!
>20837	EqualityExpression	poWK -> panUnifiedSrcValid != NULL
>20838	Identifier	NULL
>20839	PtrMemberAccess	poWK -> panUnifiedSrcValid
>20840	Identifier	panUnifiedSrcValid
>20841	Identifier	poWK
>20842	ExpressionStatement	 
>20843	AssignmentExpr	iSrcOffset = iSrcX + iSrcY * nSrcXSize
>20844	AdditiveExpression	iSrcX + iSrcY * nSrcXSize
>20845	MultiplicativeExpression	iSrcY * nSrcXSize
>20846	Identifier	nSrcXSize
>20847	Identifier	iSrcY
>20848	Identifier	iSrcX
>20849	Identifier	iSrcOffset
>20850	IncDecOp	 
>20851	IncDec	++
>20852	Identifier	iSrcX
>20853	Condition	 
>20854	RelationalExpression	iSrcX < iSrcXMax
>20855	Identifier	iSrcXMax
>20856	Identifier	iSrcX
>20857	ForInit	 
>20858	AssignmentExpr	iSrcX = iSrcXMin
>20859	Identifier	iSrcXMin
>20860	Identifier	iSrcX
>20861	IncDecOp	 
>20862	IncDec	++
>20863	Identifier	iSrcY
>20864	Condition	 
>20865	RelationalExpression	iSrcY < iSrcYMax
>20866	Identifier	iSrcYMax
>20867	Identifier	iSrcY
>20868	ForInit	 
>20869	AssignmentExpr	iSrcY = iSrcYMin
>20870	Identifier	iSrcYMin
>20871	Identifier	iSrcY
>20872	Condition	 
>20873	EqualityExpression	nAlgo == 1
>20874	PrimaryExpression	1
>20875	Identifier	nAlgo
>20876	ExpressionStatement	 
>20877	AssignmentExpr	iSrcYMax = MIN ( ( ( int ) ceil ( ( padfY2 [ iDstX ] + 1e-10 ) ) ) - poWK -> nSrcYOff , nSrcYSize )
>20878	CallExpression	MIN ( ( ( int ) ceil ( ( padfY2 [ iDstX ] + 1e-10 ) ) ) - poWK -> nSrcYOff , nSrcYSize )
>20879	ArgumentList	( ( int ) ceil ( ( padfY2 [ iDstX ] + 1e-10 ) ) ) - poWK -> nSrcYOff
>20880	Argument	nSrcYSize
>20881	Identifier	nSrcYSize
>20882	Argument	( ( int ) ceil ( ( padfY2 [ iDstX ] + 1e-10 ) ) ) - poWK -> nSrcYOff
>20883	AdditiveExpression	( ( int ) ceil ( ( padfY2 [ iDstX ] + 1e-10 ) ) ) - poWK -> nSrcYOff
>20884	PtrMemberAccess	poWK -> nSrcYOff
>20885	Identifier	nSrcYOff
>20886	Identifier	poWK
>20887	CastExpression	( int ) ceil ( ( padfY2 [ iDstX ] + 1e-10 ) )
>20888	CallExpression	ceil ( ( padfY2 [ iDstX ] + 1e-10 ) )
>20889	ArgumentList	padfY2 [ iDstX ] + 1e-10
>20890	Argument	padfY2 [ iDstX ] + 1e-10
>20891	AdditiveExpression	padfY2 [ iDstX ] + 1e-10
>20892	PrimaryExpression	1e-10
>20893	ArrayIndexing	padfY2 [ iDstX ]
>20894	Identifier	iDstX
>20895	Identifier	padfY2
>20896	Callee	ceil
>20897	Identifier	ceil
>20898	CastTarget	int
>20899	Callee	MIN
>20900	Identifier	MIN
>20901	Identifier	iSrcYMax
>20902	ExpressionStatement	 
>20903	AssignmentExpr	iSrcYMin = MAX ( ( ( int ) floor ( ( padfY [ iDstX ] + 1e-10 ) ) ) - poWK -> nSrcYOff , 0 )
>20904	CallExpression	MAX ( ( ( int ) floor ( ( padfY [ iDstX ] + 1e-10 ) ) ) - poWK -> nSrcYOff , 0 )
>20905	ArgumentList	( ( int ) floor ( ( padfY [ iDstX ] + 1e-10 ) ) ) - poWK -> nSrcYOff
>20906	Argument	0
>20907	PrimaryExpression	0
>20908	Argument	( ( int ) floor ( ( padfY [ iDstX ] + 1e-10 ) ) ) - poWK -> nSrcYOff
>20909	AdditiveExpression	( ( int ) floor ( ( padfY [ iDstX ] + 1e-10 ) ) ) - poWK -> nSrcYOff
>20910	PtrMemberAccess	poWK -> nSrcYOff
>20911	Identifier	nSrcYOff
>20912	Identifier	poWK
>20913	CastExpression	( int ) floor ( ( padfY [ iDstX ] + 1e-10 ) )
>20914	CallExpression	floor ( ( padfY [ iDstX ] + 1e-10 ) )
>20915	ArgumentList	padfY [ iDstX ] + 1e-10
>20916	Argument	padfY [ iDstX ] + 1e-10
>20917	AdditiveExpression	padfY [ iDstX ] + 1e-10
>20918	PrimaryExpression	1e-10
>20919	ArrayIndexing	padfY [ iDstX ]
>20920	Identifier	iDstX
>20921	Identifier	padfY
>20922	Callee	floor
>20923	Identifier	floor
>20924	CastTarget	int
>20925	Callee	MAX
>20926	Identifier	MAX
>20927	Identifier	iSrcYMin
>20928	ExpressionStatement	 
>20929	AssignmentExpr	iSrcXMax = MIN ( ( ( int ) ceil ( ( padfX2 [ iDstX ] + 1e-10 ) ) ) - poWK -> nSrcXOff , nSrcXSize )
>20930	CallExpression	MIN ( ( ( int ) ceil ( ( padfX2 [ iDstX ] + 1e-10 ) ) ) - poWK -> nSrcXOff , nSrcXSize )
>20931	ArgumentList	( ( int ) ceil ( ( padfX2 [ iDstX ] + 1e-10 ) ) ) - poWK -> nSrcXOff
>20932	Argument	nSrcXSize
>20933	Identifier	nSrcXSize
>20934	Argument	( ( int ) ceil ( ( padfX2 [ iDstX ] + 1e-10 ) ) ) - poWK -> nSrcXOff
>20935	AdditiveExpression	( ( int ) ceil ( ( padfX2 [ iDstX ] + 1e-10 ) ) ) - poWK -> nSrcXOff
>20936	PtrMemberAccess	poWK -> nSrcXOff
>20937	Identifier	nSrcXOff
>20938	Identifier	poWK
>20939	CastExpression	( int ) ceil ( ( padfX2 [ iDstX ] + 1e-10 ) )
>20940	CallExpression	ceil ( ( padfX2 [ iDstX ] + 1e-10 ) )
>20941	ArgumentList	padfX2 [ iDstX ] + 1e-10
>20942	Argument	padfX2 [ iDstX ] + 1e-10
>20943	AdditiveExpression	padfX2 [ iDstX ] + 1e-10
>20944	PrimaryExpression	1e-10
>20945	ArrayIndexing	padfX2 [ iDstX ]
>20946	Identifier	iDstX
>20947	Identifier	padfX2
>20948	Callee	ceil
>20949	Identifier	ceil
>20950	CastTarget	int
>20951	Callee	MIN
>20952	Identifier	MIN
>20953	Identifier	iSrcXMax
>20954	ExpressionStatement	 
>20955	AssignmentExpr	iSrcXMin = MAX ( ( ( int ) floor ( ( padfX [ iDstX ] + 1e-10 ) ) ) - poWK -> nSrcXOff , 0 )
>20956	CallExpression	MAX ( ( ( int ) floor ( ( padfX [ iDstX ] + 1e-10 ) ) ) - poWK -> nSrcXOff , 0 )
>20957	ArgumentList	( ( int ) floor ( ( padfX [ iDstX ] + 1e-10 ) ) ) - poWK -> nSrcXOff
>20958	Argument	0
>20959	PrimaryExpression	0
>20960	Argument	( ( int ) floor ( ( padfX [ iDstX ] + 1e-10 ) ) ) - poWK -> nSrcXOff
>20961	AdditiveExpression	( ( int ) floor ( ( padfX [ iDstX ] + 1e-10 ) ) ) - poWK -> nSrcXOff
>20962	PtrMemberAccess	poWK -> nSrcXOff
>20963	Identifier	nSrcXOff
>20964	Identifier	poWK
>20965	CastExpression	( int ) floor ( ( padfX [ iDstX ] + 1e-10 ) )
>20966	CallExpression	floor ( ( padfX [ iDstX ] + 1e-10 ) )
>20967	ArgumentList	padfX [ iDstX ] + 1e-10
>20968	Argument	padfX [ iDstX ] + 1e-10
>20969	AdditiveExpression	padfX [ iDstX ] + 1e-10
>20970	PrimaryExpression	1e-10
>20971	ArrayIndexing	padfX [ iDstX ]
>20972	Identifier	iDstX
>20973	Identifier	padfX
>20974	Callee	floor
>20975	Identifier	floor
>20976	CastTarget	int
>20977	Callee	MAX
>20978	Identifier	MAX
>20979	Identifier	iSrcXMin
>20980	IdentifierDeclStatement	 
>20981	IdentifierDecl	iSrcYMax
>20982	Identifier	iSrcYMax
>20983	IdentifierDeclType	int
>20984	IdentifierDecl	iSrcYMin
>20985	Identifier	iSrcYMin
>20986	IdentifierDeclType	int
>20987	IdentifierDecl	iSrcXMax
>20988	Identifier	iSrcXMax
>20989	IdentifierDeclType	int
>20990	IdentifierDecl	iSrcXMin
>20991	Identifier	iSrcXMin
>20992	IdentifierDeclType	int
>20993	IdentifierDeclStatement	 
>20994	IdentifierDecl	nCount2 = 0
>20995	AssignmentExpr	nCount2 = 0
>20996	PrimaryExpression	0
>20997	Identifier	nCount2
>20998	Identifier	nCount2
>20999	IdentifierDeclType	int
>21000	IdentifierDeclStatement	 
>21001	IdentifierDecl	nCount = 0
>21002	AssignmentExpr	nCount = 0
>21003	PrimaryExpression	0
>21004	Identifier	nCount
>21005	Identifier	nCount
>21006	IdentifierDeclType	int
>21007	IdentifierDeclStatement	 
>21008	IdentifierDecl	dfTotal = 0
>21009	AssignmentExpr	dfTotal = 0
>21010	PrimaryExpression	0
>21011	Identifier	dfTotal
>21012	Identifier	dfTotal
>21013	IdentifierDeclType	double
>21014	IdentifierDeclStatement	 
>21015	IdentifierDecl	dfValueImagTmp = 0.0
>21016	AssignmentExpr	dfValueImagTmp = 0.0
>21017	PrimaryExpression	0.0
>21018	Identifier	dfValueImagTmp
>21019	Identifier	dfValueImagTmp
>21020	IdentifierDeclType	double
>21021	IdentifierDeclStatement	 
>21022	IdentifierDecl	dfValueRealTmp = 0.0
>21023	AssignmentExpr	dfValueRealTmp = 0.0
>21024	PrimaryExpression	0.0
>21025	Identifier	dfValueRealTmp
>21026	Identifier	dfValueRealTmp
>21027	IdentifierDeclType	double
>21028	IdentifierDeclStatement	 
>21029	IdentifierDecl	dfValueImag = 0.0
>21030	AssignmentExpr	dfValueImag = 0.0
>21031	PrimaryExpression	0.0
>21032	Identifier	dfValueImag
>21033	Identifier	dfValueImag
>21034	IdentifierDeclType	double
>21035	IdentifierDeclStatement	 
>21036	IdentifierDecl	dfValueReal = 0.0
>21037	AssignmentExpr	dfValueReal = 0.0
>21038	PrimaryExpression	0.0
>21039	Identifier	dfValueReal
>21040	Identifier	dfValueReal
>21041	IdentifierDeclType	double
>21042	IdentifierDeclStatement	 
>21043	IdentifierDecl	dfBandDensity = 0.0
>21044	AssignmentExpr	dfBandDensity = 0.0
>21045	PrimaryExpression	0.0
>21046	Identifier	dfBandDensity
>21047	Identifier	dfBandDensity
>21048	IdentifierDeclType	double
>21049	IncDecOp	 
>21050	IncDec	++
>21051	Identifier	iBand
>21052	Condition	 
>21053	RelationalExpression	iBand < poWK -> nBands
>21054	PtrMemberAccess	poWK -> nBands
>21055	Identifier	nBands
>21056	Identifier	poWK
>21057	Identifier	iBand
>21058	ForInit	 
>21059	IdentifierDeclStatement	int iBand = 0 ;
>21060	IdentifierDecl	iBand = 0
>21061	AssignmentExpr	iBand = 0
>21062	PrimaryExpression	0
>21063	Identifier	iBand
>21064	Identifier	iBand
>21065	IdentifierDeclType	int
>21066	ExpressionStatement	 
>21067	AssignmentExpr	iDstOffset = iDstX + iDstY * nDstXSize
>21068	AdditiveExpression	iDstX + iDstY * nDstXSize
>21069	MultiplicativeExpression	iDstY * nDstXSize
>21070	Identifier	nDstXSize
>21071	Identifier	iDstY
>21072	Identifier	iDstX
>21073	Identifier	iDstOffset
>21074	IfStatement	if ( ! pabSuccess [ iDstX ] || ! pabSuccess2 [ iDstX ] )
>21075	ContinueStatement	 
>21076	Condition	 
>21077	OrExpression	! pabSuccess [ iDstX ] || ! pabSuccess2 [ iDstX ]
>21078	UnaryOp	! pabSuccess2 [ iDstX ]
>21079	ArrayIndexing	pabSuccess2 [ iDstX ]
>21080	Identifier	iDstX
>21081	Identifier	pabSuccess2
>21082	UnaryOperator	!
>21083	UnaryOp	! pabSuccess [ iDstX ]
>21084	ArrayIndexing	pabSuccess [ iDstX ]
>21085	Identifier	iDstX
>21086	Identifier	pabSuccess
>21087	UnaryOperator	!
>21088	IdentifierDeclStatement	 
>21089	IdentifierDecl	bHasFoundDensity = FALSE
>21090	AssignmentExpr	bHasFoundDensity = FALSE
>21091	Identifier	FALSE
>21092	Identifier	FALSE
>21093	Identifier	bHasFoundDensity
>21094	IdentifierDeclType	int
>21095	IdentifierDeclStatement	 
>21096	IdentifierDecl	dfDensity = 1.0
>21097	AssignmentExpr	dfDensity = 1.0
>21098	PrimaryExpression	1.0
>21099	Identifier	dfDensity
>21100	Identifier	dfDensity
>21101	IdentifierDeclType	double
>21102	IdentifierDeclStatement	 
>21103	IdentifierDecl	iSrcOffset = 0
>21104	AssignmentExpr	iSrcOffset = 0
>21105	PrimaryExpression	0
>21106	Identifier	iSrcOffset
>21107	Identifier	iSrcOffset
>21108	IdentifierDeclType	int
>21109	IncDecOp	 
>21110	IncDec	++
>21111	Identifier	iDstX
>21112	Condition	 
>21113	RelationalExpression	iDstX < nDstXSize
>21114	Identifier	nDstXSize
>21115	Identifier	iDstX
>21116	ForInit	 
>21117	AssignmentExpr	iDstX = 0
>21118	PrimaryExpression	0
>21119	Identifier	iDstX
>21120	ExpressionStatement	 
>21121	CallExpression	poWK -> pfnTransformer ( psJob -> pTransformerArg , TRUE , nDstXSize , padfX2 , padfY2 , padfZ2 , pabSuccess2 )
>21122	ArgumentList	psJob -> pTransformerArg
>21123	Argument	pabSuccess2
>21124	Identifier	pabSuccess2
>21125	Argument	padfZ2
>21126	Identifier	padfZ2
>21127	Argument	padfY2
>21128	Identifier	padfY2
>21129	Argument	padfX2
>21130	Identifier	padfX2
>21131	Argument	nDstXSize
>21132	Identifier	nDstXSize
>21133	Argument	TRUE
>21134	Identifier	TRUE
>21135	Argument	psJob -> pTransformerArg
>21136	PtrMemberAccess	psJob -> pTransformerArg
>21137	Identifier	pTransformerArg
>21138	Identifier	psJob
>21139	Callee	poWK -> pfnTransformer
>21140	PtrMemberAccess	poWK -> pfnTransformer
>21141	Identifier	pfnTransformer
>21142	Identifier	poWK
>21143	ExpressionStatement	 
>21144	CallExpression	poWK -> pfnTransformer ( psJob -> pTransformerArg , TRUE , nDstXSize , padfX , padfY , padfZ , pabSuccess )
>21145	ArgumentList	psJob -> pTransformerArg
>21146	Argument	pabSuccess
>21147	Identifier	pabSuccess
>21148	Argument	padfZ
>21149	Identifier	padfZ
>21150	Argument	padfY
>21151	Identifier	padfY
>21152	Argument	padfX
>21153	Identifier	padfX
>21154	Argument	nDstXSize
>21155	Identifier	nDstXSize
>21156	Argument	TRUE
>21157	Identifier	TRUE
>21158	Argument	psJob -> pTransformerArg
>21159	PtrMemberAccess	psJob -> pTransformerArg
>21160	Identifier	pTransformerArg
>21161	Identifier	psJob
>21162	Callee	poWK -> pfnTransformer
>21163	PtrMemberAccess	poWK -> pfnTransformer
>21164	Identifier	pfnTransformer
>21165	Identifier	poWK
>21166	ForStatement	for ( iDstX = 0 ; iDstX < nDstXSize ; iDstX ++ )
>21167	CompoundStatement	 
>21168	ExpressionStatement	 
>21169	AssignmentExpr	padfZ2 [ iDstX ] = 0.0
>21170	PrimaryExpression	0.0
>21171	ArrayIndexing	padfZ2 [ iDstX ]
>21172	Identifier	iDstX
>21173	Identifier	padfZ2
>21174	ExpressionStatement	 
>21175	AssignmentExpr	padfY2 [ iDstX ] = iDstY + 1.0 + poWK -> nDstYOff
>21176	AdditiveExpression	iDstY + 1.0 + poWK -> nDstYOff
>21177	AdditiveExpression	1.0 + poWK -> nDstYOff
>21178	PtrMemberAccess	poWK -> nDstYOff
>21179	Identifier	nDstYOff
>21180	Identifier	poWK
>21181	PrimaryExpression	1.0
>21182	Identifier	iDstY
>21183	ArrayIndexing	padfY2 [ iDstX ]
>21184	Identifier	iDstX
>21185	Identifier	padfY2
>21186	ExpressionStatement	 
>21187	AssignmentExpr	padfX2 [ iDstX ] = iDstX + 1.0 + poWK -> nDstXOff
>21188	AdditiveExpression	iDstX + 1.0 + poWK -> nDstXOff
>21189	AdditiveExpression	1.0 + poWK -> nDstXOff
>21190	PtrMemberAccess	poWK -> nDstXOff
>21191	Identifier	nDstXOff
>21192	Identifier	poWK
>21193	PrimaryExpression	1.0
>21194	Identifier	iDstX
>21195	ArrayIndexing	padfX2 [ iDstX ]
>21196	Identifier	iDstX
>21197	Identifier	padfX2
>21198	ExpressionStatement	 
>21199	AssignmentExpr	padfZ [ iDstX ] = 0.0
>21200	PrimaryExpression	0.0
>21201	ArrayIndexing	padfZ [ iDstX ]
>21202	Identifier	iDstX
>21203	Identifier	padfZ
>21204	ExpressionStatement	 
>21205	AssignmentExpr	padfY [ iDstX ] = iDstY + poWK -> nDstYOff
>21206	AdditiveExpression	iDstY + poWK -> nDstYOff
>21207	PtrMemberAccess	poWK -> nDstYOff
>21208	Identifier	nDstYOff
>21209	Identifier	poWK
>21210	Identifier	iDstY
>21211	ArrayIndexing	padfY [ iDstX ]
>21212	Identifier	iDstX
>21213	Identifier	padfY
>21214	ExpressionStatement	 
>21215	AssignmentExpr	padfX [ iDstX ] = iDstX + poWK -> nDstXOff
>21216	AdditiveExpression	iDstX + poWK -> nDstXOff
>21217	PtrMemberAccess	poWK -> nDstXOff
>21218	Identifier	nDstXOff
>21219	Identifier	poWK
>21220	Identifier	iDstX
>21221	ArrayIndexing	padfX [ iDstX ]
>21222	Identifier	iDstX
>21223	Identifier	padfX
>21224	IncDecOp	 
>21225	IncDec	++
>21226	Identifier	iDstX
>21227	Condition	 
>21228	RelationalExpression	iDstX < nDstXSize
>21229	Identifier	nDstXSize
>21230	Identifier	iDstX
>21231	ForInit	 
>21232	AssignmentExpr	iDstX = 0
>21233	PrimaryExpression	0
>21234	Identifier	iDstX
>21235	IncDecOp	 
>21236	IncDec	++
>21237	Identifier	iDstY
>21238	Condition	 
>21239	RelationalExpression	iDstY < iYMax
>21240	Identifier	iYMax
>21241	Identifier	iDstY
>21242	ForInit	 
>21243	AssignmentExpr	iDstY = iYMin
>21244	Identifier	iYMin
>21245	Identifier	iDstY
>21246	ExpressionStatement	 
>21247	AssignmentExpr	pabSuccess2 = ( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>21248	CastExpression	( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>21249	CallExpression	CPLMalloc ( sizeof ( int ) * nDstXSize )
>21250	ArgumentList	sizeof ( int ) * nDstXSize
>21251	Argument	sizeof ( int ) * nDstXSize
>21252	MultiplicativeExpression	sizeof ( int ) * nDstXSize
>21253	Identifier	nDstXSize
>21254	SizeofExpr	sizeof ( int )
>21255	SizeofOperand	int
>21256	Sizeof	sizeof
>21257	Callee	CPLMalloc
>21258	Identifier	CPLMalloc
>21259	CastTarget	int *
>21260	Identifier	pabSuccess2
>21261	ExpressionStatement	 
>21262	AssignmentExpr	pabSuccess = ( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>21263	CastExpression	( int * ) CPLMalloc ( sizeof ( int ) * nDstXSize )
>21264	CallExpression	CPLMalloc ( sizeof ( int ) * nDstXSize )
>21265	ArgumentList	sizeof ( int ) * nDstXSize
>21266	Argument	sizeof ( int ) * nDstXSize
>21267	MultiplicativeExpression	sizeof ( int ) * nDstXSize
>21268	Identifier	nDstXSize
>21269	SizeofExpr	sizeof ( int )
>21270	SizeofOperand	int
>21271	Sizeof	sizeof
>21272	Callee	CPLMalloc
>21273	Identifier	CPLMalloc
>21274	CastTarget	int *
>21275	Identifier	pabSuccess
>21276	ExpressionStatement	 
>21277	AssignmentExpr	padfZ2 = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>21278	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>21279	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>21280	ArgumentList	sizeof ( double ) * nDstXSize
>21281	Argument	sizeof ( double ) * nDstXSize
>21282	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>21283	Identifier	nDstXSize
>21284	SizeofExpr	sizeof ( double )
>21285	SizeofOperand	double
>21286	Sizeof	sizeof
>21287	Callee	CPLMalloc
>21288	Identifier	CPLMalloc
>21289	CastTarget	double *
>21290	Identifier	padfZ2
>21291	ExpressionStatement	 
>21292	AssignmentExpr	padfY2 = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>21293	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>21294	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>21295	ArgumentList	sizeof ( double ) * nDstXSize
>21296	Argument	sizeof ( double ) * nDstXSize
>21297	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>21298	Identifier	nDstXSize
>21299	SizeofExpr	sizeof ( double )
>21300	SizeofOperand	double
>21301	Sizeof	sizeof
>21302	Callee	CPLMalloc
>21303	Identifier	CPLMalloc
>21304	CastTarget	double *
>21305	Identifier	padfY2
>21306	ExpressionStatement	 
>21307	AssignmentExpr	padfX2 = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>21308	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>21309	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>21310	ArgumentList	sizeof ( double ) * nDstXSize
>21311	Argument	sizeof ( double ) * nDstXSize
>21312	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>21313	Identifier	nDstXSize
>21314	SizeofExpr	sizeof ( double )
>21315	SizeofOperand	double
>21316	Sizeof	sizeof
>21317	Callee	CPLMalloc
>21318	Identifier	CPLMalloc
>21319	CastTarget	double *
>21320	Identifier	padfX2
>21321	ExpressionStatement	 
>21322	AssignmentExpr	padfZ = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>21323	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>21324	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>21325	ArgumentList	sizeof ( double ) * nDstXSize
>21326	Argument	sizeof ( double ) * nDstXSize
>21327	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>21328	Identifier	nDstXSize
>21329	SizeofExpr	sizeof ( double )
>21330	SizeofOperand	double
>21331	Sizeof	sizeof
>21332	Callee	CPLMalloc
>21333	Identifier	CPLMalloc
>21334	CastTarget	double *
>21335	Identifier	padfZ
>21336	ExpressionStatement	 
>21337	AssignmentExpr	padfY = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>21338	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>21339	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>21340	ArgumentList	sizeof ( double ) * nDstXSize
>21341	Argument	sizeof ( double ) * nDstXSize
>21342	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>21343	Identifier	nDstXSize
>21344	SizeofExpr	sizeof ( double )
>21345	SizeofOperand	double
>21346	Sizeof	sizeof
>21347	Callee	CPLMalloc
>21348	Identifier	CPLMalloc
>21349	CastTarget	double *
>21350	Identifier	padfY
>21351	ExpressionStatement	 
>21352	AssignmentExpr	padfX = ( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>21353	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nDstXSize )
>21354	CallExpression	CPLMalloc ( sizeof ( double ) * nDstXSize )
>21355	ArgumentList	sizeof ( double ) * nDstXSize
>21356	Argument	sizeof ( double ) * nDstXSize
>21357	MultiplicativeExpression	sizeof ( double ) * nDstXSize
>21358	Identifier	nDstXSize
>21359	SizeofExpr	sizeof ( double )
>21360	SizeofOperand	double
>21361	Sizeof	sizeof
>21362	Callee	CPLMalloc
>21363	Identifier	CPLMalloc
>21364	CastTarget	double *
>21365	Identifier	padfX
>21366	IdentifierDeclStatement	 
>21367	IdentifierDecl	* pabSuccess2
>21368	Identifier	pabSuccess2
>21369	IdentifierDeclType	int *
>21370	IdentifierDecl	* pabSuccess
>21371	Identifier	pabSuccess
>21372	IdentifierDeclType	int *
>21373	IdentifierDeclStatement	 
>21374	IdentifierDecl	* padfZ2
>21375	Identifier	padfZ2
>21376	IdentifierDeclType	double *
>21377	IdentifierDecl	* padfY2
>21378	Identifier	padfY2
>21379	IdentifierDeclType	double *
>21380	IdentifierDecl	* padfX2
>21381	Identifier	padfX2
>21382	IdentifierDeclType	double *
>21383	IdentifierDeclStatement	 
>21384	IdentifierDecl	* padfZ
>21385	Identifier	padfZ
>21386	IdentifierDeclType	double *
>21387	IdentifierDecl	* padfY
>21388	Identifier	padfY
>21389	IdentifierDeclType	double *
>21390	IdentifierDecl	* padfX
>21391	Identifier	padfX
>21392	IdentifierDeclType	double *
>21393	ExpressionStatement	 
>21394	CallExpression	CPLDebug ( \"GDAL\" , \"GDALWarpKernel()
>21395	ArgumentList	\"GDAL\"
>21396	Argument	nAlgo
>21397	Identifier	nAlgo
>21398	Argument	\"GDALWarpKernel()
>21399	PrimaryExpression	\"GDALWarpKernel()
>21400	Argument	\"GDAL\"
>21401	PrimaryExpression	\"GDAL\"
>21402	Callee	CPLDebug
>21403	Identifier	CPLDebug
>21404	IfStatement	if ( poWK -> eResample == GRA_Average )
>21405	ElseStatement	else
>21406	IfStatement	if ( poWK -> eResample == GRA_Mode )
>21407	ElseStatement	else
>21408	CompoundStatement	 
>21409	ReturnStatement	 
>21410	ExpressionStatement	 
>21411	CallExpression	CPLDebug ( \"GDAL\" , \"GDALWarpKernel()
>21412	ArgumentList	\"GDAL\"
>21413	Argument	\"GDALWarpKernel()
>21414	PrimaryExpression	\"GDALWarpKernel()
>21415	Argument	\"GDAL\"
>21416	PrimaryExpression	\"GDAL\"
>21417	Callee	CPLDebug
>21418	Identifier	CPLDebug
>21419	CompoundStatement	 
>21420	IfStatement	if ( poWK -> eWorkingDataType == GDT_Byte || poWK -> eWorkingDataType == GDT_UInt16 || poWK -> eWorkingDataType == \
>21421	ElseStatement	else
>21422	CompoundStatement	 
>21423	ExpressionStatement	 
>21424	AssignmentExpr	nAlgo = 2
>21425	PrimaryExpression	2
>21426	Identifier	nAlgo
>21427	CompoundStatement	 
>21428	ExpressionStatement	 
>21429	AssignmentExpr	panVals = ( int * ) CPLMalloc ( nBins * sizeof ( int ) )
>21430	CastExpression	( int * ) CPLMalloc ( nBins * sizeof ( int ) )
>21431	CallExpression	CPLMalloc ( nBins * sizeof ( int ) )
>21432	ArgumentList	nBins * sizeof ( int )
>21433	Argument	nBins * sizeof ( int )
>21434	MultiplicativeExpression	nBins * sizeof ( int )
>21435	SizeofExpr	sizeof ( int )
>21436	SizeofOperand	int
>21437	Sizeof	sizeof
>21438	Identifier	nBins
>21439	Callee	CPLMalloc
>21440	Identifier	CPLMalloc
>21441	CastTarget	int *
>21442	Identifier	panVals
>21443	IfStatement	if ( poWK -> eWorkingDataType == GDT_Byte )
>21444	ElseStatement	else
>21445	IfStatement	if ( poWK -> eWorkingDataType == GDT_Int16 )
>21446	ElseStatement	else
>21447	IfStatement	if ( poWK -> eWorkingDataType == GDT_UInt16 )
>21448	CompoundStatement	 
>21449	ExpressionStatement	 
>21450	AssignmentExpr	nBins = 65536
>21451	PrimaryExpression	65536
>21452	Identifier	nBins
>21453	Condition	 
>21454	EqualityExpression	poWK -> eWorkingDataType == GDT_UInt16
>21455	Identifier	GDT_UInt16
>21456	PtrMemberAccess	poWK -> eWorkingDataType
>21457	Identifier	eWorkingDataType
>21458	Identifier	poWK
>21459	CompoundStatement	 
>21460	ExpressionStatement	 
>21461	AssignmentExpr	nBinsOffset = 32768
>21462	PrimaryExpression	32768
>21463	Identifier	nBinsOffset
>21464	ExpressionStatement	 
>21465	AssignmentExpr	nBins = 65536
>21466	PrimaryExpression	65536
>21467	Identifier	nBins
>21468	Condition	 
>21469	EqualityExpression	poWK -> eWorkingDataType == GDT_Int16
>21470	Identifier	GDT_Int16
>21471	PtrMemberAccess	poWK -> eWorkingDataType
>21472	Identifier	eWorkingDataType
>21473	Identifier	poWK
>21474	CompoundStatement	 
>21475	ExpressionStatement	 
>21476	AssignmentExpr	nBins = 256
>21477	PrimaryExpression	256
>21478	Identifier	nBins
>21479	Condition	 
>21480	EqualityExpression	poWK -> eWorkingDataType == GDT_Byte
>21481	Identifier	GDT_Byte
>21482	PtrMemberAccess	poWK -> eWorkingDataType
>21483	Identifier	eWorkingDataType
>21484	Identifier	poWK
>21485	ExpressionStatement	 
>21486	AssignmentExpr	nAlgo = 3
>21487	PrimaryExpression	3
>21488	Identifier	nAlgo
>21489	Condition	 
>21490	OrExpression	poWK -> eWorkingDataType == GDT_Byte || poWK -> eWorkingDataType == GDT_UInt16 || poWK -> eWorkingDataType == \
>21491	OrExpression	poWK -> eWorkingDataType == GDT_UInt16 || poWK -> eWorkingDataType == GDT_Int16
>21492	EqualityExpression	poWK -> eWorkingDataType == GDT_Int16
>21493	Identifier	GDT_Int16
>21494	PtrMemberAccess	poWK -> eWorkingDataType
>21495	Identifier	eWorkingDataType
>21496	Identifier	poWK
>21497	EqualityExpression	poWK -> eWorkingDataType == GDT_UInt16
>21498	Identifier	GDT_UInt16
>21499	PtrMemberAccess	poWK -> eWorkingDataType
>21500	Identifier	eWorkingDataType
>21501	Identifier	poWK
>21502	EqualityExpression	poWK -> eWorkingDataType == GDT_Byte
>21503	Identifier	GDT_Byte
>21504	PtrMemberAccess	poWK -> eWorkingDataType
>21505	Identifier	eWorkingDataType
>21506	Identifier	poWK
>21507	Condition	 
>21508	EqualityExpression	poWK -> eResample == GRA_Mode
>21509	Identifier	GRA_Mode
>21510	PtrMemberAccess	poWK -> eResample
>21511	Identifier	eResample
>21512	Identifier	poWK
>21513	CompoundStatement	 
>21514	ExpressionStatement	 
>21515	AssignmentExpr	nAlgo = 1
>21516	PrimaryExpression	1
>21517	Identifier	nAlgo
>21518	Condition	 
>21519	EqualityExpression	poWK -> eResample == GRA_Average
>21520	Identifier	GRA_Average
>21521	PtrMemberAccess	poWK -> eResample
>21522	Identifier	eResample
>21523	Identifier	poWK
>21524	IdentifierDeclStatement	 
>21525	IdentifierDecl	nBinsOffset = 0
>21526	AssignmentExpr	nBinsOffset = 0
>21527	PrimaryExpression	0
>21528	Identifier	nBinsOffset
>21529	Identifier	nBinsOffset
>21530	IdentifierDeclType	int
>21531	IdentifierDecl	nBins = 0
>21532	AssignmentExpr	nBins = 0
>21533	PrimaryExpression	0
>21534	Identifier	nBins
>21535	Identifier	nBins
>21536	IdentifierDeclType	int
>21537	IdentifierDeclStatement	 
>21538	IdentifierDecl	* panVals = NULL
>21539	AssignmentExpr	* panVals = NULL
>21540	Identifier	NULL
>21541	Identifier	NULL
>21542	Identifier	panVals
>21543	IdentifierDeclType	int *
>21544	IdentifierDeclStatement	 
>21545	IdentifierDecl	nAlgo = 0
>21546	AssignmentExpr	nAlgo = 0
>21547	PrimaryExpression	0
>21548	Identifier	nAlgo
>21549	Identifier	nAlgo
>21550	IdentifierDeclType	int
>21551	IdentifierDeclStatement	 
>21552	IdentifierDecl	nSrcYSize = poWK -> nSrcYSize
>21553	AssignmentExpr	nSrcYSize = poWK -> nSrcYSize
>21554	PtrMemberAccess	poWK -> nSrcYSize
>21555	Identifier	nSrcYSize
>21556	Identifier	poWK
>21557	Identifier	nSrcYSize
>21558	Identifier	nSrcYSize
>21559	IdentifierDeclType	int
>21560	IdentifierDecl	nSrcXSize = poWK -> nSrcXSize
>21561	AssignmentExpr	nSrcXSize = poWK -> nSrcXSize
>21562	PtrMemberAccess	poWK -> nSrcXSize
>21563	Identifier	nSrcXSize
>21564	Identifier	poWK
>21565	Identifier	nSrcXSize
>21566	Identifier	nSrcXSize
>21567	IdentifierDeclType	int
>21568	IdentifierDeclStatement	 
>21569	IdentifierDecl	nDstXSize = poWK -> nDstXSize
>21570	AssignmentExpr	nDstXSize = poWK -> nDstXSize
>21571	PtrMemberAccess	poWK -> nDstXSize
>21572	Identifier	nDstXSize
>21573	Identifier	poWK
>21574	Identifier	nDstXSize
>21575	Identifier	nDstXSize
>21576	IdentifierDeclType	int
>21577	IdentifierDeclStatement	 
>21578	IdentifierDecl	iDstOffset
>21579	Identifier	iDstOffset
>21580	IdentifierDeclType	int
>21581	IdentifierDecl	iSrcY
>21582	Identifier	iSrcY
>21583	IdentifierDeclType	int
>21584	IdentifierDecl	iSrcX
>21585	Identifier	iSrcX
>21586	IdentifierDeclType	int
>21587	IdentifierDecl	iDstX
>21588	Identifier	iDstX
>21589	IdentifierDeclType	int
>21590	IdentifierDecl	iDstY
>21591	Identifier	iDstY
>21592	IdentifierDeclType	int
>21593	IdentifierDeclStatement	 
>21594	IdentifierDecl	iYMax = psJob -> iYMax
>21595	AssignmentExpr	iYMax = psJob -> iYMax
>21596	PtrMemberAccess	psJob -> iYMax
>21597	Identifier	iYMax
>21598	Identifier	psJob
>21599	Identifier	iYMax
>21600	Identifier	iYMax
>21601	IdentifierDeclType	int
>21602	IdentifierDeclStatement	 
>21603	IdentifierDecl	iYMin = psJob -> iYMin
>21604	AssignmentExpr	iYMin = psJob -> iYMin
>21605	PtrMemberAccess	psJob -> iYMin
>21606	Identifier	iYMin
>21607	Identifier	psJob
>21608	Identifier	iYMin
>21609	Identifier	iYMin
>21610	IdentifierDeclType	int
>21611	IdentifierDeclStatement	 
>21612	IdentifierDecl	* poWK = psJob -> poWK
>21613	AssignmentExpr	* poWK = psJob -> poWK
>21614	PtrMemberAccess	psJob -> poWK
>21615	Identifier	poWK
>21616	Identifier	psJob
>21617	Identifier	poWK
>21618	Identifier	poWK
>21619	IdentifierDeclType	GDALWarpKernel *
>21620	IdentifierDeclStatement	 
>21621	IdentifierDecl	* psJob = ( GWKJobStruct * ) pData
>21622	AssignmentExpr	* psJob = ( GWKJobStruct * ) pData
>21623	CastExpression	( GWKJobStruct * ) pData
>21624	Identifier	pData
>21625	CastTarget	GWKJobStruct *
>21626	Identifier	psJob
>21627	Identifier	psJob
>21628	IdentifierDeclType	GWKJobStruct *
<5=11,10,6
<6=7
<7=9,8
<11=12
<12=13
<13=15,14
<74=80,79,75
<75=76
<76=78,77
<80=120,112,103,92,83,81
<81=82
<83=84
<84=90,85
<85=86
<86=87
<87=89,88
<90=91
<92=93
<93=102,101,94
<94=100,95
<95=99,96
<96=98,97
<103=104
<104=110,105
<105=106
<106=107
<107=109,108
<110=111
<112=113
<113=115,114
<115=119,116
<116=118,117
<120=121
<121=129,122
<122=125,123
<123=124
<125=126
<126=128,127
<129=130
<146=152,151,147
<147=148
<148=150,149
<152=222,209,155,153
<153=154
<155=178,156
<156=167,159,157
<157=158
<159=160
<160=162,161
<162=166,163
<163=165,164
<167=168
<168=176,169
<169=174,172,170
<170=171
<172=173
<174=175
<176=177
<178=179
<179=208,180
<180=204,181
<181=188,186,182
<182=183
<183=185,184
<186=187
<188=189
<189=201,190
<190=198,191
<191=197,192
<192=196,193
<193=195,194
<198=200,199
<201=203,202
<204=205
<205=207,206
<209=210
<210=221,220,211
<211=219,212
<212=218,213
<213=217,214
<214=216,215
<222=223
<223=230,229,224
<224=228,225
<225=227,226
<256=265,264,257
<257=261,258
<258=260,259
<261=263,262
<265=362,355,351,345,337,331,323,315,309,303,297,291,283,274,266
<266=267
<267=270,269,268
<270=271
<271=273,272
<274=275
<275=281,276
<276=277
<277=278
<278=280,279
<281=282
<283=284
<284=288,285
<285=287,286
<288=290,289
<291=292
<292=294,293
<294=296,295
<297=298
<298=300,299
<300=302,301
<303=304
<304=306,305
<306=308,307
<309=310
<310=312,311
<312=314,313
<315=316
<316=320,317
<317=319,318
<320=322,321
<323=324
<324=328,325
<325=327,326
<328=330,329
<331=332
<332=334,333
<334=336,335
<337=338
<338=342,339
<339=341,340
<342=344,343
<345=346
<346=348,347
<348=350,349
<351=352
<352=354,353
<355=356
<356=361,360,357
<357=359,358
<362=363
<363=368,367,364
<364=366,365
<398=410,409,399
<399=406,403,400
<400=402,401
<403=405,404
<406=408,407
<410=1090,411,929,942,951,978,994,998,1014,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089
<411=925,915,412
<412=413
<413=897,893,886,834,773,763,702,691,681,674,667,547,485,478,443,436,429,422,414
<414=415
<415=418,417,416
<418=419
<419=421,420
<422=423
<423=427,424
<424=425
<425=426
<427=428
<429=430
<430=434,431
<431=432
<432=433
<434=435
<436=437
<437=441,438
<438=439
<439=440
<441=442
<443=474,470,467,444
<444=456,445
<445=446
<446=454,447
<447=448
<448=449
<449=451,450
<451=453,452
<454=455
<456=457
<457=465,458
<458=459
<459=460
<460=462,461
<462=464,463
<465=466
<467=469,468
<470=471
<471=473,472
<474=475
<475=477,476
<478=479
<479=483,480
<480=481
<481=482
<483=484
<485=543,486
<486=534,487
<487=505,488
<488=494,490,489
<490=491
<491=493,492
<494=495
<495=503,496
<496=501,499,497
<497=498
<499=500
<501=502
<503=504
<505=506
<506=533,507
<507=529,508
<508=515,513,509
<509=510
<510=512,511
<513=514
<515=516
<516=526,517
<517=523,518
<518=522,519
<519=521,520
<523=525,524
<526=528,527
<529=530
<530=532,531
<534=535
<535=541,536
<536=539,537
<537=538
<539=540
<541=542
<543=544
<544=546,545
<547=663,659,656,548
<548=648,638,622,604,594,586,578,570,549
<549=550
<550=565,551
<551=563,552
<552=561,553
<553=554
<554=560,555
<555=559,556
<556=558,557
<561=562
<563=564
<565=567,566
<567=569,568
<570=571
<571=573,572
<573=575,574
<575=577,576
<578=579
<579=581,580
<581=583,582
<583=585,584
<586=587
<587=589,588
<589=591,590
<591=593,592
<594=595
<595=599,596
<596=598,597
<599=601,600
<601=603,602
<604=605
<605=617,606
<606=616,607
<607=611,608
<608=610,609
<611=615,612
<612=614,613
<617=619,618
<619=621,620
<622=623
<623=633,624
<624=632,625
<625=629,626
<626=628,627
<629=631,630
<633=635,634
<635=637,636
<638=639
<639=643,640
<640=642,641
<643=645,644
<645=647,646
<648=649
<649=651,650
<651=653,652
<653=655,654
<656=658,657
<659=660
<660=662,661
<663=664
<664=666,665
<667=668
<668=673,672,669
<669=671,670
<674=675
<675=680,679,676
<676=678,677
<681=682
<682=690,689,683
<683=688,684
<684=686,685
<686=687
<691=692
<692=700,693
<693=698,696,694
<694=695
<696=697
<698=699
<700=701
<702=759,703
<703=728,721,720,719,718,717,716,715,714,713,704
<704=705
<705=711,706
<706=709,707
<707=708
<709=710
<711=712
<721=722
<722=726,723
<723=724
<724=725
<726=727
<728=755,751,748,729
<729=730
<730=742,731
<731=732
<732=740,733
<733=734
<734=735
<735=737,736
<737=739,738
<740=741
<742=743
<743=745,744
<745=747,746
<748=750,749
<751=752
<752=754,753
<755=756
<756=758,757
<759=760
<760=762,761
<763=764
<764=772,771,765
<765=770,766
<766=768,767
<768=769
<773=830,774
<774=799,792,791,790,789,788,787,786,785,784,775
<775=776
<776=782,777
<777=780,778
<778=779
<780=781
<782=783
<792=793
<793=797,794
<794=795
<795=796
<797=798
<799=826,822,819,800
<800=801
<801=813,802
<802=803
<803=811,804
<804=805
<805=806
<806=808,807
<808=810,809
<811=812
<813=814
<814=816,815
<816=818,817
<819=821,820
<822=823
<823=825,824
<826=827
<827=829,828
<830=831
<831=833,832
<834=882,878,875,835
<835=860,836
<836=852,837
<837=843,839,838
<839=840
<840=842,841
<843=844
<844=850,845
<845=848,846
<846=847
<848=849
<850=851
<852=853
<853=855,854
<855=857,856
<857=859,858
<860=861
<861=870,862
<862=868,863
<863=864
<864=865
<865=867,866
<868=869
<870=872,871
<872=874,873
<875=877,876
<878=879
<879=881,880
<882=883
<883=885,884
<886=887
<887=892,891,888
<888=890,889
<893=894
<894=896,895
<897=898
<898=914,913,899
<899=912,900
<900=911,901
<901=909,902
<902=905,903
<903=904
<905=906
<906=908,907
<909=910
<915=916
<916=917
<917=923,918
<918=921,919
<919=920
<921=922
<923=924
<925=926
<926=928,927
<929=936,930
<930=931
<931=935,932
<932=934,933
<936=937
<937=941,938
<938=940,939
<942=947,943
<943=944
<944=946,945
<947=948
<948=950,949
<951=969,962,952
<952=953
<953=954
<954=961,955
<955=959,956
<956=957
<957=958
<959=960
<962=963
<963=968,964
<964=966,965
<966=967
<969=970
<970=976,971
<971=974,972
<972=973
<974=975
<976=977
<978=990,979
<979=980
<980=989,981
<981=987,982
<982=985,983
<983=984
<985=986
<987=988
<990=991
<991=993,992
<994=995
<995=997,996
<998=999
<999=1013,1012,1000
<1000=1011,1001
<1001=1009,1002
<1002=1005,1003
<1003=1004
<1005=1006
<1006=1008,1007
<1009=1010
<1014=1029,1015
<1015=1018,1016
<1016=1017
<1018=1019
<1019=1027,1020
<1020=1025,1023,1021
<1021=1022
<1023=1024
<1025=1026
<1027=1028
<1029=1030
<1030=1047,1031
<1031=1043,1032
<1032=1039,1037,1033
<1033=1034
<1034=1036,1035
<1037=1038
<1039=1040
<1040=1042,1041
<1043=1044
<1044=1046,1045
<1090=1091
<1091=1098,1097,1092
<1092=1096,1093
<1093=1095,1094
<1157=1159,1158
<1159=1288,1284,1280,1276,1272,1268,1264,1260,1256,1252,1248,1244,1240,1236,1232,1228,1224,1220,1216,1212,1208,1204,1200,1196,1192,1188,1184,1180,1176,1172,1168,1164,1160
<1160=1161
<1161=1163,1162
<1164=1165
<1165=1167,1166
<1168=1169
<1169=1171,1170
<1172=1173
<1173=1175,1174
<1176=1177
<1177=1179,1178
<1180=1181
<1181=1183,1182
<1184=1185
<1185=1187,1186
<1188=1189
<1189=1191,1190
<1192=1193
<1193=1195,1194
<1196=1197
<1197=1199,1198
<1200=1201
<1201=1203,1202
<1204=1205
<1205=1207,1206
<1208=1209
<1209=1211,1210
<1212=1213
<1213=1215,1214
<1216=1217
<1217=1219,1218
<1220=1221
<1221=1223,1222
<1224=1225
<1225=1227,1226
<1228=1229
<1229=1231,1230
<1232=1233
<1233=1235,1234
<1236=1237
<1237=1239,1238
<1240=1241
<1241=1243,1242
<1244=1245
<1245=1247,1246
<1248=1249
<1249=1251,1250
<1252=1253
<1253=1255,1254
<1256=1257
<1257=1259,1258
<1260=1261
<1261=1263,1262
<1264=1265
<1265=1267,1266
<1268=1269
<1269=1271,1270
<1272=1273
<1273=1275,1274
<1276=1277
<1277=1279,1278
<1280=1281
<1281=1283,1282
<1284=1285
<1285=1287,1286
<1288=1289
<1289=1291,1290
<1332=1334,1333
<1338=1341,1340,1339
<1341=2034,2022,1980,1972,1964,1943,1922,1916,1910,1889,1868,1856,1844,1825,1753,1717,1681,1645,1609,1593,1553,1517,1481,1445,1425,1389,1373,1361,1349,1342
<1342=1343
<1343=1347,1344
<1344=1345
<1345=1346
<1347=1348
<1349=1357,1350
<1350=1351
<1351=1355,1352
<1352=1353
<1353=1354
<1355=1356
<1357=1358
<1358=1360,1359
<1361=1369,1362
<1362=1363
<1363=1367,1364
<1364=1365
<1365=1366
<1367=1368
<1369=1370
<1370=1372,1371
<1373=1381,1374
<1374=1375
<1375=1379,1376
<1376=1377
<1377=1378
<1379=1380
<1381=1382
<1382=1386,1383
<1383=1385,1384
<1386=1388,1387
<1389=1397,1390
<1390=1391
<1391=1395,1392
<1392=1393
<1393=1394
<1395=1396
<1397=1398
<1398=1422,1399
<1399=1419,1400
<1400=1416,1401
<1401=1413,1402
<1402=1410,1403
<1403=1407,1404
<1404=1406,1405
<1407=1409,1408
<1410=1412,1411
<1413=1415,1414
<1416=1418,1417
<1419=1421,1420
<1422=1424,1423
<1425=1433,1426
<1426=1427
<1427=1431,1428
<1428=1429
<1429=1430
<1431=1432
<1433=1434
<1434=1438,1435
<1435=1437,1436
<1438=1442,1439
<1439=1441,1440
<1442=1444,1443
<1445=1453,1446
<1446=1447
<1447=1451,1448
<1448=1449
<1449=1450
<1451=1452
<1453=1454
<1454=1478,1455
<1455=1475,1456
<1456=1472,1457
<1457=1469,1458
<1458=1466,1459
<1459=1463,1460
<1460=1462,1461
<1463=1465,1464
<1466=1468,1467
<1469=1471,1470
<1472=1474,1473
<1475=1477,1476
<1478=1480,1479
<1481=1489,1482
<1482=1483
<1483=1487,1484
<1484=1485
<1485=1486
<1487=1488
<1489=1490
<1490=1514,1491
<1491=1511,1492
<1492=1508,1493
<1493=1505,1494
<1494=1502,1495
<1495=1499,1496
<1496=1498,1497
<1499=1501,1500
<1502=1504,1503
<1505=1507,1506
<1508=1510,1509
<1511=1513,1512
<1514=1516,1515
<1517=1525,1518
<1518=1519
<1519=1523,1520
<1520=1521
<1521=1522
<1523=1524
<1525=1526
<1526=1550,1527
<1527=1547,1528
<1528=1544,1529
<1529=1541,1530
<1530=1538,1531
<1531=1535,1532
<1532=1534,1533
<1535=1537,1536
<1538=1540,1539
<1541=1543,1542
<1544=1546,1545
<1547=1549,1548
<1550=1552,1551
<1553=1561,1554
<1554=1555
<1555=1559,1556
<1556=1557
<1557=1558
<1559=1560
<1561=1562
<1562=1586,1563
<1563=1583,1564
<1564=1580,1565
<1565=1577,1566
<1566=1574,1567
<1567=1571,1568
<1568=1570,1569
<1571=1573,1572
<1574=1576,1575
<1577=1579,1578
<1580=1582,1581
<1583=1585,1584
<1586=1590,1587
<1587=1589,1588
<1590=1592,1591
<1593=1601,1594
<1594=1595
<1595=1599,1596
<1596=1597
<1597=1598
<1599=1600
<1601=1602
<1602=1606,1603
<1603=1605,1604
<1606=1608,1607
<1609=1617,1610
<1610=1611
<1611=1615,1612
<1612=1613
<1613=1614
<1615=1616
<1617=1618
<1618=1642,1619
<1619=1639,1620
<1620=1636,1621
<1621=1633,1622
<1622=1630,1623
<1623=1627,1624
<1624=1626,1625
<1627=1629,1628
<1630=1632,1631
<1633=1635,1634
<1636=1638,1637
<1639=1641,1640
<1642=1644,1643
<1645=1653,1646
<1646=1647
<1647=1651,1648
<1648=1649
<1649=1650
<1651=1652
<1653=1654
<1654=1678,1655
<1655=1675,1656
<1656=1672,1657
<1657=1669,1658
<1658=1666,1659
<1659=1663,1660
<1660=1662,1661
<1663=1665,1664
<1666=1668,1667
<1669=1671,1670
<1672=1674,1673
<1675=1677,1676
<1678=1680,1679
<1681=1689,1682
<1682=1683
<1683=1687,1684
<1684=1685
<1685=1686
<1687=1688
<1689=1690
<1690=1714,1691
<1691=1711,1692
<1692=1708,1693
<1693=1705,1694
<1694=1702,1695
<1695=1699,1696
<1696=1698,1697
<1699=1701,1700
<1702=1704,1703
<1705=1707,1706
<1708=1710,1709
<1711=1713,1712
<1714=1716,1715
<1717=1725,1718
<1718=1719
<1719=1723,1720
<1720=1721
<1721=1722
<1723=1724
<1725=1726
<1726=1750,1727
<1727=1747,1728
<1728=1744,1729
<1729=1741,1730
<1730=1738,1731
<1731=1735,1732
<1732=1734,1733
<1735=1737,1736
<1738=1740,1739
<1741=1743,1742
<1744=1746,1745
<1747=1749,1748
<1750=1752,1751
<1753=1774,1754
<1754=1762,1755
<1755=1758,1756
<1756=1757
<1758=1759
<1759=1761,1760
<1762=1763
<1763=1773,1772,1764
<1764=1771,1765
<1765=1769,1766
<1766=1767
<1767=1768
<1769=1770
<1774=1775
<1775=1802,1776
<1776=1787,1777
<1777=1785,1778
<1778=1783,1781,1779
<1779=1780
<1781=1782
<1783=1784
<1785=1786
<1787=1799,1788
<1788=1796,1789
<1789=1793,1790
<1790=1792,1791
<1793=1795,1794
<1796=1798,1797
<1799=1801,1800
<1802=1822,1803
<1803=1819,1804
<1804=1816,1805
<1805=1813,1806
<1806=1810,1807
<1807=1809,1808
<1810=1812,1811
<1813=1815,1814
<1816=1818,1817
<1819=1821,1820
<1822=1824,1823
<1825=1833,1826
<1826=1827
<1827=1831,1828
<1828=1829
<1829=1830
<1831=1832
<1833=1834
<1834=1842,1835
<1835=1840,1838,1836
<1836=1837
<1838=1839
<1840=1841
<1842=1843
<1844=1845
<1845=1855,1846
<1846=1848,1847
<1848=1850,1849
<1850=1852,1851
<1852=1854,1853
<1856=1857
<1857=1867,1858
<1858=1860,1859
<1860=1862,1861
<1862=1864,1863
<1864=1866,1865
<1868=1869
<1869=1888,1870
<1870=1884,1874,1871
<1871=1873,1872
<1874=1883,1875
<1875=1881,1876
<1876=1877
<1877=1878
<1878=1880,1879
<1881=1882
<1884=1885
<1885=1887,1886
<1889=1890
<1890=1909,1891
<1891=1905,1895,1892
<1892=1894,1893
<1895=1904,1896
<1896=1902,1897
<1897=1898
<1898=1899
<1899=1901,1900
<1902=1903
<1905=1906
<1906=1908,1907
<1910=1911
<1911=1915,1912
<1912=1914,1913
<1916=1917
<1917=1921,1918
<1918=1920,1919
<1922=1927,1923
<1923=1924
<1924=1926,1925
<1927=1928
<1928=1940,1929
<1929=1939,1930
<1930=1938,1931
<1931=1937,1932
<1932=1936,1933
<1933=1935,1934
<1940=1942,1941
<1943=1948,1944
<1944=1945
<1945=1947,1946
<1948=1949
<1949=1961,1950
<1950=1960,1951
<1951=1959,1952
<1952=1958,1953
<1953=1957,1954
<1954=1956,1955
<1961=1963,1962
<1964=1965
<1965=1971,1966
<1966=1968,1967
<1968=1970,1969
<1972=1973
<1973=1979,1974
<1974=1976,1975
<1976=1978,1977
<1980=2014,1981
<1981=1984,1982
<1982=1983
<1984=1999,1985
<1985=1988,1986
<1986=1987
<1988=1989
<1989=1997,1990
<1990=1995,1993,1991
<1991=1992
<1993=1994
<1995=1996
<1997=1998
<1999=2000
<2000=2013,2001
<2001=2011,2002
<2002=2007,2005,2003
<2003=2004
<2005=2006
<2007=2008
<2008=2010,2009
<2011=2012
<2014=2015
<2015=2019,2016
<2016=2018,2017
<2019=2021,2020
<2022=2025,2023
<2023=2024
<2025=2026
<2026=2028,2027
<2028=2033,2029
<2029=2031,2030
<2031=2032
<2034=2035
<2035=2037,2036
<2109=2112,2111,2110
<2112=2158,2115,2113
<2113=2114
<2115=2132,2116
<2116=2131,2130,2129,2128,2127,2126,2125,2124,2123,2122,2121,2120,2119,2117
<2117=2118
<2132=2133
<2133=2151,2134
<2134=2136,2135
<2136=2149,2137
<2137=2138
<2138=2139
<2139=2147,2140
<2140=2145,2143,2141
<2141=2142
<2143=2144
<2145=2146
<2147=2148
<2149=2150
<2151=2155,2152
<2152=2154,2153
<2155=2157,2156
<2158=2177,2159
<2159=2162,2160
<2160=2161
<2162=2163
<2163=2175,2164
<2164=2173,2171,2169,2165
<2165=2166
<2166=2168,2167
<2169=2170
<2171=2172
<2173=2174
<2175=2176
<2177=2178
<2178=2188,2179
<2179=2185,2180
<2180=2184,2181
<2181=2183,2182
<2185=2187,2186
<2188=2190,2189
<2206=2218,2217,2207
<2207=2214,2211,2208
<2208=2210,2209
<2211=2213,2212
<2214=2216,2215
<2218=2241,2219
<2219=2220
<2220=2236,2221
<2221=2235,2222
<2222=2234,2223
<2223=2231,2224
<2224=2230,2225
<2225=2227,2226
<2227=2229,2228
<2231=2233,2232
<2236=2238,2237
<2238=2240,2239
<2241=2243,2242
<2243=2244
<2244=2250,2245
<2245=2247,2246
<2247=2249,2248
<2250=2252,2251
<2265=2286,2285,2266
<2266=2282,2279,2276,2273,2270,2267
<2267=2269,2268
<2270=2272,2271
<2273=2275,2274
<2276=2278,2277
<2279=2281,2280
<2282=2284,2283
<2286=2745,2413,2412,2411,2410,2409,2408,2407,2406,2405,2404,2289,2287
<2287=2288
<2289=2292,2290
<2290=2291
<2292=2345,2293
<2293=2325,2294
<2294=2295
<2295=2317,2305,2296
<2296=2297
<2297=2298
<2298=2300,2299
<2300=2302,2301
<2302=2304,2303
<2305=2306
<2306=2312,2307
<2307=2311,2308
<2308=2310,2309
<2312=2314,2313
<2314=2316,2315
<2317=2318
<2318=2320,2319
<2320=2322,2321
<2322=2324,2323
<2325=2326
<2326=2340,2327
<2327=2335,2328
<2328=2334,2329
<2329=2331,2330
<2331=2333,2332
<2335=2337,2336
<2337=2339,2338
<2340=2342,2341
<2342=2344,2343
<2345=2400,2390,2346
<2346=2347
<2347=2386,2376,2348
<2348=2349
<2349=2350
<2350=2371,2351
<2351=2367,2357,2352
<2352=2356,2353
<2353=2355,2354
<2357=2366,2358
<2358=2364,2359
<2359=2360
<2360=2361
<2361=2363,2362
<2364=2365
<2367=2368
<2368=2370,2369
<2371=2373,2372
<2373=2375,2374
<2376=2377
<2377=2381,2378
<2378=2380,2379
<2381=2383,2382
<2383=2385,2384
<2386=2387
<2387=2389,2388
<2390=2391
<2391=2395,2392
<2392=2394,2393
<2395=2397,2396
<2397=2399,2398
<2400=2401
<2401=2403,2402
<2413=2741,2414
<2414=2728,2721,2678,2454,2443,2429,2415
<2415=2416
<2416=2428,2417
<2417=2421,2418
<2418=2420,2419
<2421=2425,2422
<2422=2424,2423
<2425=2427,2426
<2429=2430
<2430=2442,2431
<2431=2435,2432
<2432=2434,2433
<2435=2439,2436
<2436=2438,2437
<2439=2441,2440
<2443=2444
<2444=2453,2452,2445
<2445=2451,2446
<2446=2448,2447
<2448=2450,2449
<2454=2674,2455
<2455=2672,2666,2662,2661,2659,2651,2647,2646,2644,2636,2632,2631,2629,2621,2617,2616,2614,2606,2602,2601,2599,2591,2587,2586,2584,2576,2572,2571,2569,2559,2547,2546,2544,2534,2522,2521,2519,2509,2497,2496,2494,2484,2472,2471,2469,2462,2458,2456
<2456=2457
<2458=2459
<2459=2461,2460
<2462=2463
<2463=2467,2464
<2464=2465
<2465=2466
<2467=2468
<2469=2470
<2472=2473
<2473=2483,2474
<2474=2480,2475
<2475=2477,2476
<2477=2479,2478
<2480=2482,2481
<2484=2485
<2485=2493,2486
<2486=2490,2487
<2487=2489,2488
<2490=2492,2491
<2494=2495
<2497=2498
<2498=2508,2499
<2499=2505,2500
<2500=2502,2501
<2502=2504,2503
<2505=2507,2506
<2509=2510
<2510=2518,2511
<2511=2515,2512
<2512=2514,2513
<2515=2517,2516
<2519=2520
<2522=2523
<2523=2533,2524
<2524=2530,2525
<2525=2527,2526
<2527=2529,2528
<2530=2532,2531
<2534=2535
<2535=2543,2536
<2536=2540,2537
<2537=2539,2538
<2540=2542,2541
<2544=2545
<2547=2548
<2548=2558,2549
<2549=2555,2550
<2550=2552,2551
<2552=2554,2553
<2555=2557,2556
<2559=2560
<2560=2568,2561
<2561=2565,2562
<2562=2564,2563
<2565=2567,2566
<2569=2570
<2572=2573
<2573=2575,2574
<2576=2577
<2577=2583,2578
<2578=2580,2579
<2580=2582,2581
<2584=2585
<2587=2588
<2588=2590,2589
<2591=2592
<2592=2598,2593
<2593=2595,2594
<2595=2597,2596
<2599=2600
<2602=2603
<2603=2605,2604
<2606=2607
<2607=2613,2608
<2608=2610,2609
<2610=2612,2611
<2614=2615
<2617=2618
<2618=2620,2619
<2621=2622
<2622=2628,2623
<2623=2625,2624
<2625=2627,2626
<2629=2630
<2632=2633
<2633=2635,2634
<2636=2637
<2637=2643,2638
<2638=2640,2639
<2640=2642,2641
<2644=2645
<2647=2648
<2648=2650,2649
<2651=2652
<2652=2658,2653
<2653=2655,2654
<2655=2657,2656
<2659=2660
<2662=2663
<2663=2665,2664
<2666=2667
<2667=2671,2668
<2668=2670,2669
<2672=2673
<2674=2675
<2675=2677,2676
<2678=2715,2707,2679
<2679=2680
<2680=2685,2681
<2681=2682
<2682=2684,2683
<2685=2686
<2686=2702,2687
<2687=2701,2688
<2688=2694,2689
<2689=2693,2690
<2690=2692,2691
<2694=2698,2695
<2695=2697,2696
<2698=2700,2699
<2702=2704,2703
<2704=2706,2705
<2707=2708
<2708=2714,2709
<2709=2711,2710
<2711=2713,2712
<2715=2716
<2716=2718,2717
<2718=2720,2719
<2721=2724,2722
<2722=2723
<2724=2725
<2725=2727,2726
<2728=2738,2735,2729
<2729=2734,2733,2730
<2730=2732,2731
<2735=2737,2736
<2738=2740,2739
<2741=2742
<2742=2744,2743
<2745=2746
<2746=2755,2754,2747
<2747=2753,2748
<2748=2750,2749
<2750=2752,2751
<2790=2811,2810,2791
<2791=2807,2804,2801,2798,2795,2792
<2792=2794,2793
<2795=2797,2796
<2798=2800,2799
<2801=2803,2802
<2804=2806,2805
<2807=2809,2808
<2811=3179,3147,3105,2842,2818,2812
<2812=2813
<2813=2815,2814
<2815=2817,2816
<2818=2836,2826,2819
<2819=2820
<2820=2821
<2821=2823,2822
<2823=2825,2824
<2826=2827
<2827=2833,2828
<2828=2830,2829
<2830=2832,2831
<2833=2835,2834
<2836=2837
<2837=2839,2838
<2839=2841,2840
<2842=3101,2843
<2843=3099,3091,3085,3084,3082,3072,3066,3065,3063,3053,3047,3046,3044,3034,3028,3027,3025,3015,3009,3008,3006,2996,2990,2989,2987,2977,2971,2970,2968,2956,2942,2941,2939,2927,2913,2912,2910,2898,2884,2883,2881,2869,2855,2854,2852,2846,2844
<2844=2845
<2846=2847
<2847=2849,2848
<2849=2851,2850
<2852=2853
<2855=2856
<2856=2866,2857
<2857=2863,2858
<2858=2860,2859
<2860=2862,2861
<2863=2865,2864
<2866=2868,2867
<2869=2870
<2870=2878,2871
<2871=2875,2872
<2872=2874,2873
<2875=2877,2876
<2878=2880,2879
<2881=2882
<2884=2885
<2885=2895,2886
<2886=2892,2887
<2887=2889,2888
<2889=2891,2890
<2892=2894,2893
<2895=2897,2896
<2898=2899
<2899=2907,2900
<2900=2904,2901
<2901=2903,2902
<2904=2906,2905
<2907=2909,2908
<2910=2911
<2913=2914
<2914=2924,2915
<2915=2921,2916
<2916=2918,2917
<2918=2920,2919
<2921=2923,2922
<2924=2926,2925
<2927=2928
<2928=2936,2929
<2929=2933,2930
<2930=2932,2931
<2933=2935,2934
<2936=2938,2937
<2939=2940
<2942=2943
<2943=2953,2944
<2944=2950,2945
<2945=2947,2946
<2947=2949,2948
<2950=2952,2951
<2953=2955,2954
<2956=2957
<2957=2965,2958
<2958=2962,2959
<2959=2961,2960
<2962=2964,2963
<2965=2967,2966
<2968=2969
<2971=2972
<2972=2974,2973
<2974=2976,2975
<2977=2978
<2978=2984,2979
<2979=2981,2980
<2981=2983,2982
<2984=2986,2985
<2987=2988
<2990=2991
<2991=2993,2992
<2993=2995,2994
<2996=2997
<2997=3003,2998
<2998=3000,2999
<3000=3002,3001
<3003=3005,3004
<3006=3007
<3009=3010
<3010=3012,3011
<3012=3014,3013
<3015=3016
<3016=3022,3017
<3017=3019,3018
<3019=3021,3020
<3022=3024,3023
<3025=3026
<3028=3029
<3029=3031,3030
<3031=3033,3032
<3034=3035
<3035=3041,3036
<3036=3038,3037
<3038=3040,3039
<3041=3043,3042
<3044=3045
<3047=3048
<3048=3050,3049
<3050=3052,3051
<3053=3054
<3054=3060,3055
<3055=3057,3056
<3057=3059,3058
<3060=3062,3061
<3063=3064
<3066=3067
<3067=3069,3068
<3069=3071,3070
<3072=3073
<3073=3079,3074
<3074=3076,3075
<3076=3078,3077
<3079=3081,3080
<3082=3083
<3085=3086
<3086=3088,3087
<3088=3090,3089
<3091=3092
<3092=3096,3093
<3093=3095,3094
<3096=3098,3097
<3099=3100
<3101=3102
<3102=3104,3103
<3105=3115,3106
<3106=3109,3107
<3107=3108
<3109=3110
<3110=3112,3111
<3112=3114,3113
<3115=3116
<3116=3142,3117
<3117=3135,3118
<3118=3134,3119
<3119=3125,3120
<3120=3124,3121
<3121=3123,3122
<3125=3129,3126
<3126=3128,3127
<3129=3131,3130
<3131=3133,3132
<3135=3137,3136
<3137=3139,3138
<3139=3141,3140
<3142=3144,3143
<3144=3146,3145
<3147=3157,3148
<3148=3151,3149
<3149=3150
<3151=3152
<3152=3154,3153
<3154=3156,3155
<3157=3158
<3158=3174,3159
<3159=3173,3160
<3160=3166,3161
<3161=3165,3162
<3162=3164,3163
<3166=3170,3167
<3167=3169,3168
<3170=3172,3171
<3174=3176,3175
<3176=3178,3177
<3179=3180
<3180=3189,3188,3181
<3181=3187,3182
<3182=3184,3183
<3184=3186,3185
<3222=3246,3245,3223
<3223=3242,3239,3236,3233,3230,3227,3224
<3224=3226,3225
<3227=3229,3228
<3230=3232,3231
<3233=3235,3234
<3236=3238,3237
<3239=3241,3240
<3242=3244,3243
<3246=4407,4400,4396,4157,3400,3393,3249,3247
<3247=3248
<3249=3387,3333,3250
<3250=3251
<3251=3252
<3252=3329,3325,3322,3253
<3253=3303,3292,3267,3254
<3254=3259,3255
<3255=3256
<3256=3258,3257
<3259=3260
<3260=3262,3261
<3262=3266,3263
<3263=3265,3264
<3267=3284,3268
<3268=3269
<3269=3279,3270
<3270=3276,3271
<3271=3275,3272
<3272=3274,3273
<3276=3278,3277
<3279=3283,3280
<3280=3282,3281
<3284=3285
<3285=3287,3286
<3287=3291,3288
<3288=3290,3289
<3292=3297,3293
<3293=3294
<3294=3296,3295
<3297=3298
<3298=3300,3299
<3300=3302,3301
<3303=3316,3304
<3304=3305
<3305=3313,3306
<3306=3310,3307
<3307=3309,3308
<3310=3312,3311
<3313=3315,3314
<3316=3317
<3317=3319,3318
<3319=3321,3320
<3322=3324,3323
<3325=3326
<3326=3328,3327
<3329=3330
<3330=3332,3331
<3333=3334
<3334=3383,3379,3376,3335
<3335=3358,3336
<3336=3350,3337
<3337=3342,3338
<3338=3339
<3339=3341,3340
<3342=3343
<3343=3345,3344
<3345=3349,3346
<3346=3348,3347
<3350=3351
<3351=3353,3352
<3353=3357,3354
<3354=3356,3355
<3358=3370,3359
<3359=3364,3360
<3360=3361
<3361=3363,3362
<3364=3365
<3365=3367,3366
<3367=3369,3368
<3370=3371
<3371=3373,3372
<3373=3375,3374
<3376=3378,3377
<3379=3380
<3380=3382,3381
<3383=3384
<3384=3386,3385
<3387=3388
<3388=3390,3389
<3390=3392,3391
<3393=3396,3394
<3394=3395
<3396=3397
<3397=3399,3398
<3400=4153,3401
<3401=4151,4099,4097,4045,4043,3991,3989,3937,3935,3883,3881,3829,3827,3775,3773,3689,3687,3603,3601,3517,3515,3431,3429,3422,3404,3402
<3402=3403
<3404=3420,3405
<3405=3406
<3406=3418,3407
<3407=3416,3414,3408
<3408=3409
<3409=3413,3410
<3410=3412,3411
<3414=3415
<3416=3417
<3418=3419
<3420=3421
<3422=3423
<3423=3427,3424
<3424=3425
<3425=3426
<3427=3428
<3429=3430
<3431=3502,3496,3433,3432
<3433=3492,3488,3485,3434
<3434=3475,3463,3449,3435
<3435=3436
<3436=3444,3437
<3437=3443,3438
<3438=3440,3439
<3440=3442,3441
<3444=3448,3445
<3445=3447,3446
<3449=3450
<3450=3458,3451
<3451=3457,3452
<3452=3454,3453
<3454=3456,3455
<3458=3462,3459
<3459=3461,3460
<3463=3464
<3464=3472,3465
<3465=3471,3466
<3466=3468,3467
<3468=3470,3469
<3472=3474,3473
<3475=3476
<3476=3482,3477
<3477=3481,3478
<3478=3480,3479
<3482=3484,3483
<3485=3487,3486
<3488=3489
<3489=3491,3490
<3492=3493
<3493=3495,3494
<3496=3497
<3497=3501,3498
<3498=3500,3499
<3502=3503
<3503=3514,3513,3504
<3504=3512,3505
<3505=3511,3506
<3506=3508,3507
<3508=3510,3509
<3515=3516
<3517=3588,3582,3519,3518
<3519=3578,3574,3571,3520
<3520=3561,3549,3535,3521
<3521=3522
<3522=3530,3523
<3523=3529,3524
<3524=3526,3525
<3526=3528,3527
<3530=3534,3531
<3531=3533,3532
<3535=3536
<3536=3544,3537
<3537=3543,3538
<3538=3540,3539
<3540=3542,3541
<3544=3548,3545
<3545=3547,3546
<3549=3550
<3550=3558,3551
<3551=3557,3552
<3552=3554,3553
<3554=3556,3555
<3558=3560,3559
<3561=3562
<3562=3568,3563
<3563=3567,3564
<3564=3566,3565
<3568=3570,3569
<3571=3573,3572
<3574=3575
<3575=3577,3576
<3578=3579
<3579=3581,3580
<3582=3583
<3583=3587,3584
<3584=3586,3585
<3588=3589
<3589=3600,3599,3590
<3590=3598,3591
<3591=3597,3592
<3592=3594,3593
<3594=3596,3595
<3601=3602
<3603=3674,3668,3605,3604
<3605=3664,3660,3657,3606
<3606=3647,3635,3621,3607
<3607=3608
<3608=3616,3609
<3609=3615,3610
<3610=3612,3611
<3612=3614,3613
<3616=3620,3617
<3617=3619,3618
<3621=3622
<3622=3630,3623
<3623=3629,3624
<3624=3626,3625
<3626=3628,3627
<3630=3634,3631
<3631=3633,3632
<3635=3636
<3636=3644,3637
<3637=3643,3638
<3638=3640,3639
<3640=3642,3641
<3644=3646,3645
<3647=3648
<3648=3654,3649
<3649=3653,3650
<3650=3652,3651
<3654=3656,3655
<3657=3659,3658
<3660=3661
<3661=3663,3662
<3664=3665
<3665=3667,3666
<3668=3669
<3669=3673,3670
<3670=3672,3671
<3674=3675
<3675=3686,3685,3676
<3676=3684,3677
<3677=3683,3678
<3678=3680,3679
<3680=3682,3681
<3687=3688
<3689=3760,3754,3691,3690
<3691=3750,3746,3743,3692
<3692=3733,3721,3707,3693
<3693=3694
<3694=3702,3695
<3695=3701,3696
<3696=3698,3697
<3698=3700,3699
<3702=3706,3703
<3703=3705,3704
<3707=3708
<3708=3716,3709
<3709=3715,3710
<3710=3712,3711
<3712=3714,3713
<3716=3720,3717
<3717=3719,3718
<3721=3722
<3722=3730,3723
<3723=3729,3724
<3724=3726,3725
<3726=3728,3727
<3730=3732,3731
<3733=3734
<3734=3740,3735
<3735=3739,3736
<3736=3738,3737
<3740=3742,3741
<3743=3745,3744
<3746=3747
<3747=3749,3748
<3750=3751
<3751=3753,3752
<3754=3755
<3755=3759,3756
<3756=3758,3757
<3760=3761
<3761=3772,3771,3762
<3762=3770,3763
<3763=3769,3764
<3764=3766,3765
<3766=3768,3767
<3773=3774
<3775=3814,3810,3777,3776
<3777=3806,3802,3799,3778
<3778=3791,3779
<3779=3780
<3780=3786,3781
<3781=3785,3782
<3782=3784,3783
<3786=3790,3787
<3787=3789,3788
<3791=3792
<3792=3796,3793
<3793=3795,3794
<3796=3798,3797
<3799=3801,3800
<3802=3803
<3803=3805,3804
<3806=3807
<3807=3809,3808
<3810=3811
<3811=3813,3812
<3814=3815
<3815=3826,3825,3816
<3816=3824,3817
<3817=3823,3818
<3818=3820,3819
<3820=3822,3821
<3827=3828
<3829=3868,3864,3831,3830
<3831=3860,3856,3853,3832
<3832=3845,3833
<3833=3834
<3834=3840,3835
<3835=3839,3836
<3836=3838,3837
<3840=3844,3841
<3841=3843,3842
<3845=3846
<3846=3850,3847
<3847=3849,3848
<3850=3852,3851
<3853=3855,3854
<3856=3857
<3857=3859,3858
<3860=3861
<3861=3863,3862
<3864=3865
<3865=3867,3866
<3868=3869
<3869=3880,3879,3870
<3870=3878,3871
<3871=3877,3872
<3872=3874,3873
<3874=3876,3875
<3881=3882
<3883=3922,3918,3885,3884
<3885=3914,3910,3907,3886
<3886=3899,3887
<3887=3888
<3888=3894,3889
<3889=3893,3890
<3890=3892,3891
<3894=3898,3895
<3895=3897,3896
<3899=3900
<3900=3904,3901
<3901=3903,3902
<3904=3906,3905
<3907=3909,3908
<3910=3911
<3911=3913,3912
<3914=3915
<3915=3917,3916
<3918=3919
<3919=3921,3920
<3922=3923
<3923=3934,3933,3924
<3924=3932,3925
<3925=3931,3926
<3926=3928,3927
<3928=3930,3929
<3935=3936
<3937=3976,3972,3939,3938
<3939=3968,3964,3961,3940
<3940=3953,3941
<3941=3942
<3942=3948,3943
<3943=3947,3944
<3944=3946,3945
<3948=3952,3949
<3949=3951,3950
<3953=3954
<3954=3958,3955
<3955=3957,3956
<3958=3960,3959
<3961=3963,3962
<3964=3965
<3965=3967,3966
<3968=3969
<3969=3971,3970
<3972=3973
<3973=3975,3974
<3976=3977
<3977=3988,3987,3978
<3978=3986,3979
<3979=3985,3980
<3980=3982,3981
<3982=3984,3983
<3989=3990
<3991=4030,4026,3993,3992
<3993=4022,4018,4015,3994
<3994=4007,3995
<3995=3996
<3996=4002,3997
<3997=4001,3998
<3998=4000,3999
<4002=4006,4003
<4003=4005,4004
<4007=4008
<4008=4012,4009
<4009=4011,4010
<4012=4014,4013
<4015=4017,4016
<4018=4019
<4019=4021,4020
<4022=4023
<4023=4025,4024
<4026=4027
<4027=4029,4028
<4030=4031
<4031=4042,4041,4032
<4032=4040,4033
<4033=4039,4034
<4034=4036,4035
<4036=4038,4037
<4043=4044
<4045=4084,4080,4047,4046
<4047=4076,4072,4069,4048
<4048=4061,4049
<4049=4050
<4050=4056,4051
<4051=4055,4052
<4052=4054,4053
<4056=4060,4057
<4057=4059,4058
<4061=4062
<4062=4066,4063
<4063=4065,4064
<4066=4068,4067
<4069=4071,4070
<4072=4073
<4073=4075,4074
<4076=4077
<4077=4079,4078
<4080=4081
<4081=4083,4082
<4084=4085
<4085=4096,4095,4086
<4086=4094,4087
<4087=4093,4088
<4088=4090,4089
<4090=4092,4091
<4097=4098
<4099=4138,4134,4101,4100
<4101=4130,4126,4123,4102
<4102=4115,4103
<4103=4104
<4104=4110,4105
<4105=4109,4106
<4106=4108,4107
<4110=4114,4111
<4111=4113,4112
<4115=4116
<4116=4120,4117
<4117=4119,4118
<4120=4122,4121
<4123=4125,4124
<4126=4127
<4127=4129,4128
<4130=4131
<4131=4133,4132
<4134=4135
<4135=4137,4136
<4138=4139
<4139=4150,4149,4140
<4140=4148,4141
<4141=4147,4142
<4142=4144,4143
<4144=4146,4145
<4151=4152
<4153=4154
<4154=4156,4155
<4157=4392,4158
<4158=4365,4268,4159
<4159=4254,4160
<4160=4171,4161
<4161=4169,4165,4162
<4162=4163
<4163=4164
<4165=4166
<4166=4168,4167
<4169=4170
<4171=4250,4246,4243,4172
<4172=4211,4173
<4173=4187,4183,4174
<4174=4175
<4175=4176
<4176=4178,4177
<4178=4182,4179
<4179=4181,4180
<4183=4184
<4184=4186,4185
<4187=4188
<4188=4198,4189
<4189=4197,4190
<4190=4192,4191
<4192=4196,4193
<4193=4195,4194
<4198=4206,4199
<4199=4201,4200
<4201=4205,4202
<4202=4204,4203
<4206=4208,4207
<4208=4210,4209
<4211=4223,4219,4212
<4212=4213
<4213=4214
<4214=4216,4215
<4216=4218,4217
<4219=4220
<4220=4222,4221
<4223=4224
<4224=4232,4225
<4225=4231,4226
<4226=4228,4227
<4228=4230,4229
<4232=4238,4233
<4233=4235,4234
<4235=4237,4236
<4238=4240,4239
<4240=4242,4241
<4243=4245,4244
<4246=4247
<4247=4249,4248
<4250=4251
<4251=4253,4252
<4254=4255
<4255=4263,4256
<4256=4258,4257
<4258=4260,4259
<4260=4262,4261
<4263=4265,4264
<4265=4267,4266
<4268=4359,4269
<4269=4280,4270
<4270=4278,4274,4271
<4271=4272
<4272=4273
<4274=4275
<4275=4277,4276
<4278=4279
<4280=4355,4351,4348,4281
<4281=4318,4282
<4282=4296,4292,4283
<4283=4284
<4284=4285
<4285=4287,4286
<4287=4291,4288
<4288=4290,4289
<4292=4293
<4293=4295,4294
<4296=4297
<4297=4307,4298
<4298=4306,4299
<4299=4301,4300
<4301=4305,4302
<4302=4304,4303
<4307=4315,4308
<4308=4310,4309
<4310=4314,4311
<4311=4313,4312
<4315=4317,4316
<4318=4330,4326,4319
<4319=4320
<4320=4321
<4321=4323,4322
<4323=4325,4324
<4326=4327
<4327=4329,4328
<4330=4331
<4331=4339,4332
<4332=4338,4333
<4333=4335,4334
<4335=4337,4336
<4339=4345,4340
<4340=4342,4341
<4342=4344,4343
<4345=4347,4346
<4348=4350,4349
<4351=4352
<4352=4354,4353
<4355=4356
<4356=4358,4357
<4359=4360
<4360=4362,4361
<4362=4364,4363
<4365=4388,4384,4381,4366
<4366=4375,4367
<4367=4368
<4368=4370,4369
<4370=4374,4371
<4371=4373,4372
<4375=4376
<4376=4378,4377
<4378=4380,4379
<4381=4383,4382
<4384=4385
<4385=4387,4386
<4388=4389
<4389=4391,4390
<4392=4393
<4393=4395,4394
<4396=4397
<4397=4399,4398
<4400=4401
<4401=4406,4405,4402
<4402=4404,4403
<4407=4408
<4408=4415,4414,4409
<4409=4413,4410
<4410=4412,4411
<4454=4472,4471,4455
<4455=4468,4465,4462,4459,4456
<4456=4458,4457
<4459=4461,4460
<4462=4464,4463
<4465=4467,4466
<4468=4470,4469
<4472=4575,4511,4503,4479,4473
<4473=4474
<4474=4476,4475
<4476=4478,4477
<4479=4497,4491,4480
<4480=4481
<4481=4482
<4482=4488,4483
<4483=4485,4484
<4485=4487,4486
<4488=4490,4489
<4491=4492
<4492=4494,4493
<4494=4496,4495
<4497=4498
<4498=4500,4499
<4500=4502,4501
<4503=4504
<4504=4508,4505
<4505=4507,4506
<4508=4510,4509
<4511=4521,4512
<4512=4515,4513
<4513=4514
<4515=4516
<4516=4518,4517
<4518=4520,4519
<4521=4522
<4522=4554,4523
<4523=4549,4524
<4524=4542,4525
<4525=4541,4526
<4526=4532,4527
<4527=4531,4528
<4528=4530,4529
<4532=4536,4533
<4533=4535,4534
<4536=4538,4537
<4538=4540,4539
<4542=4544,4543
<4544=4546,4545
<4546=4548,4547
<4549=4551,4550
<4551=4553,4552
<4554=4570,4555
<4555=4569,4556
<4556=4562,4557
<4557=4561,4558
<4558=4560,4559
<4562=4566,4563
<4563=4565,4564
<4566=4568,4567
<4570=4572,4571
<4572=4574,4573
<4575=4576
<4576=4585,4584,4577
<4577=4583,4578
<4578=4580,4579
<4580=4582,4581
<4615=4633,4632,4616
<4616=4629,4626,4623,4620,4617
<4617=4619,4618
<4620=4622,4621
<4623=4625,4624
<4626=4628,4627
<4629=4631,4630
<4633=4736,4672,4664,4640,4634
<4634=4635
<4635=4637,4636
<4637=4639,4638
<4640=4658,4652,4641
<4641=4642
<4642=4643
<4643=4649,4644
<4644=4646,4645
<4646=4648,4647
<4649=4651,4650
<4652=4653
<4653=4655,4654
<4655=4657,4656
<4658=4659
<4659=4661,4660
<4661=4663,4662
<4664=4665
<4665=4669,4666
<4666=4668,4667
<4669=4671,4670
<4672=4682,4673
<4673=4676,4674
<4674=4675
<4676=4677
<4677=4679,4678
<4679=4681,4680
<4682=4683
<4683=4715,4684
<4684=4710,4685
<4685=4703,4686
<4686=4702,4687
<4687=4693,4688
<4688=4692,4689
<4689=4691,4690
<4693=4697,4694
<4694=4696,4695
<4697=4699,4698
<4699=4701,4700
<4703=4705,4704
<4705=4707,4706
<4707=4709,4708
<4710=4712,4711
<4712=4714,4713
<4715=4731,4716
<4716=4730,4717
<4717=4723,4718
<4718=4722,4719
<4719=4721,4720
<4723=4727,4724
<4724=4726,4725
<4727=4729,4728
<4731=4733,4732
<4733=4735,4734
<4736=4737
<4737=4748,4747,4738
<4738=4746,4739
<4739=4745,4740
<4740=4742,4741
<4742=4744,4743
<4778=4796,4795,4779
<4779=4792,4789,4786,4783,4780
<4780=4782,4781
<4783=4785,4784
<4786=4788,4787
<4789=4791,4790
<4792=4794,4793
<4796=4899,4835,4827,4803,4797
<4797=4798
<4798=4800,4799
<4800=4802,4801
<4803=4821,4815,4804
<4804=4805
<4805=4806
<4806=4812,4807
<4807=4809,4808
<4809=4811,4810
<4812=4814,4813
<4815=4816
<4816=4818,4817
<4818=4820,4819
<4821=4822
<4822=4824,4823
<4824=4826,4825
<4827=4828
<4828=4832,4829
<4829=4831,4830
<4832=4834,4833
<4835=4845,4836
<4836=4839,4837
<4837=4838
<4839=4840
<4840=4842,4841
<4842=4844,4843
<4845=4846
<4846=4878,4847
<4847=4873,4848
<4848=4866,4849
<4849=4865,4850
<4850=4856,4851
<4851=4855,4852
<4852=4854,4853
<4856=4860,4857
<4857=4859,4858
<4860=4862,4861
<4862=4864,4863
<4866=4868,4867
<4868=4870,4869
<4870=4872,4871
<4873=4875,4874
<4875=4877,4876
<4878=4894,4879
<4879=4893,4880
<4880=4886,4881
<4881=4885,4882
<4882=4884,4883
<4886=4890,4887
<4887=4889,4888
<4890=4892,4891
<4894=4896,4895
<4896=4898,4897
<4899=4900
<4900=4911,4910,4901
<4901=4909,4902
<4902=4908,4903
<4903=4905,4904
<4905=4907,4906
<4941=4965,4964,4942
<4942=4961,4958,4955,4952,4949,4946,4943
<4943=4945,4944
<4946=4948,4947
<4949=4951,4950
<4952=4954,4953
<4955=4957,4956
<4958=4960,4959
<4961=4963,4962
<4965=5606,5597,5581,5565,5561,5550,5539,5521,5508,5501,5494,5487,5471,5455,5447,5419,5240,5047,4966
<4966=5043,5022,4967
<4967=4968
<4968=5018,4997,4969
<4969=4970
<4970=4989,4981,4973,4971
<4971=4972
<4973=4974
<4974=4978,4975
<4975=4977,4976
<4978=4980,4979
<4981=4982
<4982=4986,4983
<4983=4985,4984
<4986=4988,4987
<4989=4990
<4990=4994,4991
<4991=4993,4992
<4994=4996,4995
<4997=5012,5006,5000,4998
<4998=4999
<5000=5001
<5001=5003,5002
<5003=5005,5004
<5006=5007
<5007=5009,5008
<5009=5011,5010
<5012=5013
<5013=5015,5014
<5015=5017,5016
<5018=5019
<5019=5021,5020
<5022=5037,5031,5025,5023
<5023=5024
<5025=5026
<5026=5028,5027
<5028=5030,5029
<5031=5032
<5032=5034,5033
<5034=5036,5035
<5037=5038
<5038=5040,5039
<5040=5042,5041
<5043=5044
<5044=5046,5045
<5047=5193,5048
<5048=5182,5169,5141,5097,5049
<5049=5079,5050
<5050=5075,5067,5059,5051
<5051=5052
<5052=5058,5053
<5053=5055,5054
<5055=5057,5056
<5059=5060
<5060=5066,5061
<5061=5063,5062
<5063=5065,5064
<5067=5068
<5068=5074,5069
<5069=5071,5070
<5071=5073,5072
<5075=5076
<5076=5078,5077
<5079=5080
<5080=5092,5081
<5081=5087,5082
<5082=5084,5083
<5084=5086,5085
<5087=5089,5088
<5089=5091,5090
<5092=5094,5093
<5094=5096,5095
<5097=5127,5098
<5098=5123,5115,5107,5099
<5099=5100
<5100=5106,5101
<5101=5103,5102
<5103=5105,5104
<5107=5108
<5108=5114,5109
<5109=5111,5110
<5111=5113,5112
<5115=5116
<5116=5122,5117
<5117=5119,5118
<5119=5121,5120
<5123=5124
<5124=5126,5125
<5127=5128
<5128=5138,5129
<5129=5135,5130
<5130=5132,5131
<5132=5134,5133
<5135=5137,5136
<5138=5140,5139
<5141=5167,5142
<5142=5159,5151,5143
<5143=5144
<5144=5148,5145
<5145=5147,5146
<5148=5150,5149
<5151=5152
<5152=5156,5153
<5153=5155,5154
<5156=5158,5157
<5159=5160
<5160=5164,5161
<5161=5163,5162
<5164=5166,5165
<5167=5168
<5169=5170
<5170=5181,5180,5171
<5171=5179,5172
<5172=5176,5173
<5173=5175,5174
<5176=5178,5177
<5182=5183
<5183=5192,5191,5184
<5184=5190,5185
<5185=5189,5186
<5186=5188,5187
<5193=5194
<5194=5235,5195
<5195=5230,5196
<5196=5225,5197
<5197=5218,5198
<5198=5216,5199
<5199=5214,5212,5208,5206,5204,5202,5200
<5200=5201
<5202=5203
<5204=5205
<5206=5207
<5208=5209
<5209=5211,5210
<5212=5213
<5214=5215
<5216=5217
<5218=5222,5219
<5219=5221,5220
<5222=5224,5223
<5225=5227,5226
<5227=5229,5228
<5230=5232,5231
<5232=5234,5233
<5235=5237,5236
<5237=5239,5238
<5240=5382,5241
<5241=5373,5362,5334,5290,5242
<5242=5272,5243
<5243=5268,5260,5252,5244
<5244=5245
<5245=5251,5246
<5246=5248,5247
<5248=5250,5249
<5252=5253
<5253=5259,5254
<5254=5256,5255
<5256=5258,5257
<5260=5261
<5261=5267,5262
<5262=5264,5263
<5264=5266,5265
<5268=5269
<5269=5271,5270
<5272=5273
<5273=5285,5274
<5274=5280,5275
<5275=5277,5276
<5277=5279,5278
<5280=5282,5281
<5282=5284,5283
<5285=5287,5286
<5287=5289,5288
<5290=5320,5291
<5291=5316,5308,5300,5292
<5292=5293
<5293=5299,5294
<5294=5296,5295
<5296=5298,5297
<5300=5301
<5301=5307,5302
<5302=5304,5303
<5304=5306,5305
<5308=5309
<5309=5315,5310
<5310=5312,5311
<5312=5314,5313
<5316=5317
<5317=5319,5318
<5320=5321
<5321=5331,5322
<5322=5328,5323
<5323=5325,5324
<5325=5327,5326
<5328=5330,5329
<5331=5333,5332
<5334=5360,5335
<5335=5352,5344,5336
<5336=5337
<5337=5341,5338
<5338=5340,5339
<5341=5343,5342
<5344=5345
<5345=5349,5346
<5346=5348,5347
<5349=5351,5350
<5352=5353
<5353=5357,5354
<5354=5356,5355
<5357=5359,5358
<5360=5361
<5362=5363
<5363=5372,5371,5364
<5364=5370,5365
<5365=5367,5366
<5367=5369,5368
<5373=5374
<5374=5381,5380,5375
<5375=5379,5376
<5376=5378,5377
<5382=5383
<5383=5416,5384
<5384=5413,5385
<5385=5410,5386
<5386=5405,5387
<5387=5403,5388
<5388=5401,5399,5397,5395,5393,5391,5389
<5389=5390
<5391=5392
<5393=5394
<5395=5396
<5397=5398
<5399=5400
<5401=5402
<5403=5404
<5405=5409,5406
<5406=5408,5407
<5410=5412,5411
<5413=5415,5414
<5416=5418,5417
<5419=5429,5420
<5420=5425,5421
<5421=5422
<5422=5424,5423
<5425=5426
<5426=5428,5427
<5429=5430
<5430=5440,5431
<5431=5437,5432
<5432=5436,5433
<5433=5435,5434
<5437=5439,5438
<5440=5444,5441
<5441=5443,5442
<5444=5446,5445
<5447=5448
<5448=5454,5449
<5449=5453,5450
<5450=5452,5451
<5455=5465,5456
<5456=5461,5457
<5457=5458
<5458=5460,5459
<5461=5462
<5462=5464,5463
<5465=5466
<5466=5470,5467
<5467=5469,5468
<5471=5481,5472
<5472=5477,5473
<5473=5474
<5474=5476,5475
<5477=5478
<5478=5480,5479
<5481=5482
<5482=5486,5483
<5483=5485,5484
<5487=5488
<5488=5493,5492,5489
<5489=5491,5490
<5494=5495
<5495=5500,5499,5496
<5496=5498,5497
<5501=5502
<5502=5507,5506,5503
<5503=5505,5504
<5508=5515,5509
<5509=5514,5513,5510
<5510=5512,5511
<5515=5520,5519,5516
<5516=5518,5517
<5521=5535,5531,5522
<5522=5530,5529,5528,5523
<5523=5527,5524
<5524=5526,5525
<5531=5534,5533,5532
<5535=5538,5537,5536
<5539=5540
<5540=5549,5548,5541
<5541=5547,5542
<5542=5546,5543
<5543=5545,5544
<5550=5551
<5551=5560,5559,5552
<5552=5558,5553
<5553=5557,5554
<5554=5556,5555
<5561=5562
<5562=5564,5563
<5565=5566
<5566=5580,5579,5567
<5567=5578,5568
<5568=5577,5569
<5569=5575,5570
<5570=5571
<5571=5572
<5572=5574,5573
<5575=5576
<5581=5582
<5582=5596,5595,5583
<5583=5594,5584
<5584=5593,5585
<5585=5591,5586
<5586=5587
<5587=5588
<5588=5590,5589
<5591=5592
<5597=5598
<5598=5605,5604,5599
<5599=5603,5600
<5600=5602,5601
<5606=5607
<5607=5614,5613,5608
<5608=5612,5609
<5609=5611,5610
<5655=5673,5672,5656
<5656=5669,5666,5663,5660,5657
<5657=5659,5658
<5660=5662,5661
<5663=5665,5664
<5666=5668,5667
<5669=5671,5670
<5673=6053,6046,6030,6014,6001,5990,5979,5930,5873,5806,5747,5743,5710,5676,5674
<5674=5675
<5676=5706,5700,5677
<5677=5678
<5678=5696,5690,5679
<5679=5680
<5680=5681
<5681=5687,5682
<5682=5686,5683
<5683=5685,5684
<5687=5689,5688
<5690=5691
<5691=5693,5692
<5693=5695,5694
<5696=5697
<5697=5699,5698
<5700=5701
<5701=5703,5702
<5703=5705,5704
<5706=5707
<5707=5709,5708
<5710=5739,5730,5711
<5711=5712
<5712=5726,5721,5713
<5713=5714
<5714=5715
<5715=5716
<5716=5720,5717
<5717=5719,5718
<5721=5722
<5722=5723
<5723=5725,5724
<5726=5727
<5727=5729,5728
<5730=5733,5731
<5731=5732
<5733=5734
<5734=5736,5735
<5736=5738,5737
<5739=5740
<5740=5742,5741
<5743=5744
<5744=5746,5745
<5747=5782,5748
<5748=5771,5767,5749
<5749=5750
<5750=5766,5751
<5751=5753,5752
<5753=5765,5754
<5754=5760,5755
<5755=5759,5756
<5756=5758,5757
<5760=5762,5761
<5762=5764,5763
<5767=5768
<5768=5770,5769
<5771=5772
<5772=5781,5780,5773
<5773=5779,5774
<5774=5778,5775
<5775=5777,5776
<5782=5783
<5783=5803,5784
<5784=5798,5785
<5785=5793,5786
<5786=5790,5787
<5787=5789,5788
<5790=5792,5791
<5793=5795,5794
<5795=5797,5796
<5798=5802,5799
<5799=5801,5800
<5803=5805,5804
<5806=5845,5807
<5807=5832,5828,5808
<5808=5809
<5809=5827,5810
<5810=5812,5811
<5812=5826,5813
<5813=5821,5814
<5814=5820,5815
<5815=5819,5816
<5816=5818,5817
<5821=5823,5822
<5823=5825,5824
<5828=5829
<5829=5831,5830
<5832=5833
<5833=5844,5843,5834
<5834=5842,5835
<5835=5839,5836
<5836=5838,5837
<5839=5841,5840
<5845=5846
<5846=5868,5847
<5847=5861,5848
<5848=5856,5849
<5849=5853,5850
<5850=5852,5851
<5853=5855,5854
<5856=5858,5857
<5858=5860,5859
<5861=5865,5862
<5862=5864,5863
<5865=5867,5866
<5868=5870,5869
<5870=5872,5871
<5873=5906,5874
<5874=5895,5891,5875
<5875=5876
<5876=5890,5877
<5877=5879,5878
<5879=5889,5880
<5880=5884,5881
<5881=5883,5882
<5884=5886,5885
<5886=5888,5887
<5891=5892
<5892=5894,5893
<5895=5896
<5896=5905,5904,5897
<5897=5903,5898
<5898=5900,5899
<5900=5902,5901
<5906=5907
<5907=5925,5908
<5908=5918,5909
<5909=5915,5910
<5910=5914,5911
<5911=5913,5912
<5915=5917,5916
<5918=5922,5919
<5919=5921,5920
<5922=5924,5923
<5925=5927,5926
<5927=5929,5928
<5930=5959,5931
<5931=5950,5946,5932
<5932=5933
<5933=5945,5934
<5934=5936,5935
<5936=5944,5937
<5937=5939,5938
<5939=5941,5940
<5941=5943,5942
<5946=5947
<5947=5949,5948
<5950=5951
<5951=5958,5957,5952
<5952=5956,5953
<5953=5955,5954
<5959=5960
<5960=5976,5961
<5961=5971,5962
<5962=5968,5963
<5963=5967,5964
<5964=5966,5965
<5968=5970,5969
<5971=5975,5972
<5972=5974,5973
<5976=5978,5977
<5979=5980
<5980=5989,5988,5981
<5981=5987,5982
<5982=5986,5983
<5983=5985,5984
<5990=5991
<5991=6000,5999,5992
<5992=5998,5993
<5993=5997,5994
<5994=5996,5995
<6001=6002
<6002=6013,6012,6003
<6003=6011,6004
<6004=6010,6005
<6005=6009,6006
<6006=6008,6007
<6014=6015
<6015=6029,6028,6016
<6016=6027,6017
<6017=6026,6018
<6018=6024,6019
<6019=6020
<6020=6021
<6021=6023,6022
<6024=6025
<6030=6031
<6031=6045,6044,6032
<6032=6043,6033
<6033=6042,6034
<6034=6040,6035
<6035=6036
<6036=6037
<6037=6039,6038
<6040=6041
<6046=6047
<6047=6052,6051,6048
<6048=6050,6049
<6053=6054
<6054=6059,6058,6055
<6055=6057,6056
<6093=6111,6110,6094
<6094=6107,6104,6101,6098,6095
<6095=6097,6096
<6098=6100,6099
<6101=6103,6102
<6104=6106,6105
<6107=6109,6108
<6111=6475,6468,6452,6436,6423,6412,6401,6350,6291,6222,6161,6112
<6112=6157,6144,6113
<6113=6114
<6114=6140,6131,6115
<6115=6116
<6116=6119,6117
<6117=6118
<6119=6120
<6120=6128,6121
<6121=6127,6122
<6122=6126,6123
<6123=6125,6124
<6128=6130,6129
<6131=6134,6132
<6132=6133
<6134=6135
<6135=6137,6136
<6137=6139,6138
<6140=6141
<6141=6143,6142
<6144=6147,6145
<6145=6146
<6147=6148
<6148=6154,6149
<6149=6153,6150
<6150=6152,6151
<6154=6156,6155
<6157=6158
<6158=6160,6159
<6161=6198,6162
<6162=6187,6183,6163
<6163=6164
<6164=6182,6165
<6165=6167,6166
<6167=6181,6168
<6168=6174,6169
<6169=6173,6170
<6170=6172,6171
<6174=6180,6175
<6175=6177,6176
<6177=6179,6178
<6183=6184
<6184=6186,6185
<6187=6188
<6188=6197,6196,6189
<6189=6195,6190
<6190=6194,6191
<6191=6193,6192
<6198=6199
<6199=6219,6200
<6200=6214,6201
<6201=6209,6202
<6202=6206,6203
<6203=6205,6204
<6206=6208,6207
<6209=6211,6210
<6211=6213,6212
<6214=6218,6215
<6215=6217,6216
<6219=6221,6220
<6222=6263,6223
<6223=6250,6246,6224
<6224=6225
<6225=6245,6226
<6226=6228,6227
<6228=6244,6229
<6229=6237,6230
<6230=6236,6231
<6231=6235,6232
<6232=6234,6233
<6237=6243,6238
<6238=6240,6239
<6240=6242,6241
<6246=6247
<6247=6249,6248
<6250=6251
<6251=6262,6261,6252
<6252=6260,6253
<6253=6257,6254
<6254=6256,6255
<6257=6259,6258
<6263=6264
<6264=6286,6265
<6265=6279,6266
<6266=6274,6267
<6267=6271,6268
<6268=6270,6269
<6271=6273,6272
<6274=6276,6275
<6276=6278,6277
<6279=6283,6280
<6280=6282,6281
<6283=6285,6284
<6286=6288,6287
<6288=6290,6289
<6291=6326,6292
<6292=6315,6311,6293
<6293=6294
<6294=6310,6295
<6295=6297,6296
<6297=6309,6298
<6298=6302,6299
<6299=6301,6300
<6302=6308,6303
<6303=6305,6304
<6305=6307,6306
<6311=6312
<6312=6314,6313
<6315=6316
<6316=6325,6324,6317
<6317=6323,6318
<6318=6320,6319
<6320=6322,6321
<6326=6327
<6327=6345,6328
<6328=6338,6329
<6329=6335,6330
<6330=6334,6331
<6331=6333,6332
<6335=6337,6336
<6338=6342,6339
<6339=6341,6340
<6342=6344,6343
<6345=6347,6346
<6347=6349,6348
<6350=6381,6351
<6351=6372,6368,6352
<6352=6353
<6353=6367,6354
<6354=6356,6355
<6356=6366,6357
<6357=6359,6358
<6359=6365,6360
<6360=6362,6361
<6362=6364,6363
<6368=6369
<6369=6371,6370
<6372=6373
<6373=6380,6379,6374
<6374=6378,6375
<6375=6377,6376
<6381=6382
<6382=6398,6383
<6383=6393,6384
<6384=6390,6385
<6385=6389,6386
<6386=6388,6387
<6390=6392,6391
<6393=6397,6394
<6394=6396,6395
<6398=6400,6399
<6401=6402
<6402=6411,6410,6403
<6403=6409,6404
<6404=6408,6405
<6405=6407,6406
<6412=6413
<6413=6422,6421,6414
<6414=6420,6415
<6415=6419,6416
<6416=6418,6417
<6423=6424
<6424=6435,6434,6425
<6425=6433,6426
<6426=6432,6427
<6427=6431,6428
<6428=6430,6429
<6436=6437
<6437=6451,6450,6438
<6438=6449,6439
<6439=6448,6440
<6440=6446,6441
<6441=6442
<6442=6443
<6443=6445,6444
<6446=6447
<6452=6453
<6453=6467,6466,6454
<6454=6465,6455
<6455=6464,6456
<6456=6462,6457
<6457=6458
<6458=6459
<6459=6461,6460
<6462=6463
<6468=6469
<6469=6474,6473,6470
<6470=6472,6471
<6475=6476
<6476=6481,6480,6477
<6477=6479,6478
<6514=6538,6537,6515
<6515=6534,6531,6528,6525,6522,6519,6516
<6516=6518,6517
<6519=6521,6520
<6522=6524,6523
<6525=6527,6526
<6528=6530,6529
<6531=6533,6532
<6534=6536,6535
<6538=6994,6978,6965,6954,6943,6934,6925,6916,6907,6894,6874,6870,6822,6634,6603,6572,6541,6539
<6539=6540
<6541=6542
<6542=6569,6543
<6543=6567,6544
<6544=6565,6563,6561,6557,6553,6549,6545
<6545=6546
<6546=6548,6547
<6549=6550
<6550=6552,6551
<6553=6554
<6554=6556,6555
<6557=6558
<6558=6560,6559
<6561=6562
<6563=6564
<6565=6566
<6567=6568
<6569=6571,6570
<6572=6573
<6573=6600,6574
<6574=6598,6575
<6575=6596,6594,6592,6588,6584,6580,6576
<6576=6577
<6577=6579,6578
<6580=6581
<6581=6583,6582
<6584=6585
<6585=6587,6586
<6588=6589
<6589=6591,6590
<6592=6593
<6594=6595
<6596=6597
<6598=6599
<6600=6602,6601
<6603=6604
<6604=6631,6605
<6605=6629,6606
<6606=6627,6625,6623,6619,6615,6611,6607
<6607=6608
<6608=6610,6609
<6611=6612
<6612=6614,6613
<6615=6616
<6616=6618,6617
<6619=6620
<6620=6622,6621
<6623=6624
<6625=6626
<6627=6628
<6629=6630
<6631=6633,6632
<6634=6816,6812,6809,6635
<6635=6735,6702,6669,6636
<6636=6637
<6637=6664,6638
<6638=6662,6639
<6639=6660,6658,6656,6652,6648,6644,6640
<6640=6641
<6641=6643,6642
<6644=6645
<6645=6647,6646
<6648=6649
<6649=6651,6650
<6652=6653
<6653=6655,6654
<6656=6657
<6658=6659
<6660=6661
<6662=6663
<6664=6668,6665
<6665=6667,6666
<6669=6670
<6670=6697,6671
<6671=6695,6672
<6672=6693,6691,6689,6685,6681,6677,6673
<6673=6674
<6674=6676,6675
<6677=6678
<6678=6680,6679
<6681=6682
<6682=6684,6683
<6685=6686
<6686=6688,6687
<6689=6690
<6691=6692
<6693=6694
<6695=6696
<6697=6701,6698
<6698=6700,6699
<6702=6703
<6703=6730,6704
<6704=6728,6705
<6705=6726,6724,6722,6718,6714,6710,6706
<6706=6707
<6707=6709,6708
<6710=6711
<6711=6713,6712
<6714=6715
<6715=6717,6716
<6718=6719
<6719=6721,6720
<6722=6723
<6724=6725
<6726=6727
<6728=6729
<6730=6734,6731
<6731=6733,6732
<6735=6756,6736
<6736=6737
<6737=6738
<6738=6754,6739
<6739=6752,6750,6748,6746,6744,6742,6740
<6740=6741
<6742=6743
<6744=6745
<6746=6747
<6748=6749
<6750=6751
<6752=6753
<6754=6755
<6756=6757
<6757=6781,6758
<6758=6776,6759
<6759=6771,6760
<6760=6766,6761
<6761=6763,6762
<6763=6765,6764
<6766=6768,6767
<6768=6770,6769
<6771=6773,6772
<6773=6775,6774
<6776=6778,6777
<6778=6780,6779
<6781=6808,6782
<6782=6806,6783
<6783=6804,6802,6792,6790,6788,6786,6784
<6784=6785
<6786=6787
<6788=6789
<6790=6791
<6792=6793
<6793=6801,6794
<6794=6796,6795
<6796=6800,6797
<6797=6799,6798
<6802=6803
<6804=6805
<6806=6807
<6809=6811,6810
<6812=6813
<6813=6815,6814
<6816=6817
<6817=6821,6818
<6818=6820,6819
<6822=6842,6823
<6823=6824
<6824=6840,6825
<6825=6838,6836,6834,6832,6830,6828,6826
<6826=6827
<6828=6829
<6830=6831
<6832=6833
<6834=6835
<6836=6837
<6838=6839
<6840=6841
<6842=6843
<6843=6865,6844
<6844=6858,6845
<6845=6853,6846
<6846=6850,6847
<6847=6849,6848
<6850=6852,6851
<6853=6855,6854
<6855=6857,6856
<6858=6862,6859
<6859=6861,6860
<6862=6864,6863
<6865=6867,6866
<6867=6869,6868
<6870=6871
<6871=6873,6872
<6874=6890,6886,6875
<6875=6885,6884,6883,6876
<6876=6882,6877
<6877=6881,6880,6879,6878
<6886=6889,6888,6887
<6890=6893,6892,6891
<6894=6903,6899,6895
<6895=6898,6897,6896
<6899=6902,6901,6900
<6903=6906,6905,6904
<6907=6908
<6908=6915,6914,6909
<6909=6913,6910
<6910=6912,6911
<6916=6917
<6917=6924,6923,6918
<6918=6922,6919
<6919=6921,6920
<6925=6926
<6926=6933,6932,6927
<6927=6931,6928
<6928=6930,6929
<6934=6935
<6935=6942,6941,6936
<6936=6940,6937
<6937=6939,6938
<6943=6944
<6944=6953,6952,6945
<6945=6951,6946
<6946=6950,6947
<6947=6949,6948
<6954=6955
<6955=6964,6963,6956
<6956=6962,6957
<6957=6961,6958
<6958=6960,6959
<6965=6966
<6966=6977,6976,6967
<6967=6975,6968
<6968=6974,6969
<6969=6973,6970
<6970=6972,6971
<6978=6979
<6979=6993,6992,6980
<6980=6991,6981
<6981=6990,6982
<6982=6988,6983
<6983=6984
<6984=6985
<6985=6987,6986
<6988=6989
<6994=6995
<6995=7009,7008,6996
<6996=7007,6997
<6997=7006,6998
<6998=7004,6999
<6999=7000
<7000=7001
<7001=7003,7002
<7004=7005
<7054=7072,7071,7055
<7055=7068,7065,7062,7059,7056
<7056=7058,7057
<7059=7061,7060
<7062=7064,7063
<7065=7067,7066
<7068=7070,7069
<7072=7372,7356,7343,7332,7321,7312,7303,7294,7285,7280,7276,7232,7141,7109,7075,7073
<7073=7074
<7075=7105,7099,7076
<7076=7077
<7077=7095,7089,7078
<7078=7079
<7079=7080
<7080=7086,7081
<7081=7085,7082
<7082=7084,7083
<7086=7088,7087
<7089=7090
<7090=7092,7091
<7092=7094,7093
<7095=7096
<7096=7098,7097
<7099=7100
<7100=7102,7101
<7102=7104,7103
<7105=7106
<7106=7108,7107
<7109=7110
<7110=7140,7139,7111
<7111=7138,7112
<7112=7136,7113
<7113=7134,7132,7130,7126,7122,7118,7114
<7114=7115
<7115=7117,7116
<7118=7119
<7119=7121,7120
<7122=7123
<7123=7125,7124
<7126=7127
<7127=7129,7128
<7130=7131
<7132=7133
<7134=7135
<7136=7137
<7141=7226,7222,7219,7142
<7142=7206,7143
<7143=7144
<7144=7201,7145
<7145=7199,7146
<7146=7197,7195,7193,7181,7171,7159,7147
<7147=7148
<7148=7158,7149
<7149=7153,7150
<7150=7152,7151
<7153=7155,7154
<7155=7157,7156
<7159=7160
<7160=7170,7161
<7161=7165,7162
<7162=7164,7163
<7165=7167,7166
<7167=7169,7168
<7171=7172
<7172=7180,7173
<7173=7175,7174
<7175=7177,7176
<7177=7179,7178
<7181=7182
<7182=7192,7183
<7183=7187,7184
<7184=7186,7185
<7187=7189,7188
<7189=7191,7190
<7193=7194
<7195=7196
<7197=7198
<7199=7200
<7201=7205,7202
<7202=7204,7203
<7206=7207
<7207=7218,7217,7208
<7208=7216,7209
<7209=7215,7210
<7210=7214,7211
<7211=7213,7212
<7219=7221,7220
<7222=7223
<7223=7225,7224
<7226=7227
<7227=7231,7228
<7228=7230,7229
<7232=7248,7233
<7233=7234
<7234=7246,7235
<7235=7244,7242,7240,7238,7236
<7236=7237
<7238=7239
<7240=7241
<7242=7243
<7244=7245
<7246=7247
<7248=7249
<7249=7271,7250
<7250=7264,7251
<7251=7259,7252
<7252=7256,7253
<7253=7255,7254
<7256=7258,7257
<7259=7261,7260
<7261=7263,7262
<7264=7268,7265
<7265=7267,7266
<7268=7270,7269
<7271=7273,7272
<7273=7275,7274
<7276=7277
<7277=7279,7278
<7280=7281
<7281=7284,7283,7282
<7285=7286
<7286=7293,7292,7287
<7287=7291,7288
<7288=7290,7289
<7294=7295
<7295=7302,7301,7296
<7296=7300,7297
<7297=7299,7298
<7303=7304
<7304=7311,7310,7305
<7305=7309,7306
<7306=7308,7307
<7312=7313
<7313=7320,7319,7314
<7314=7318,7315
<7315=7317,7316
<7321=7322
<7322=7331,7330,7323
<7323=7329,7324
<7324=7328,7325
<7325=7327,7326
<7332=7333
<7333=7342,7341,7334
<7334=7340,7335
<7335=7339,7336
<7336=7338,7337
<7343=7344
<7344=7355,7354,7345
<7345=7353,7346
<7346=7352,7347
<7347=7351,7348
<7348=7350,7349
<7356=7357
<7357=7371,7370,7358
<7358=7369,7359
<7359=7368,7360
<7360=7366,7361
<7361=7362
<7362=7363
<7363=7365,7364
<7366=7367
<7372=7373
<7373=7387,7386,7374
<7374=7385,7375
<7375=7384,7376
<7376=7382,7377
<7377=7378
<7378=7379
<7379=7381,7380
<7382=7383
<7427=7445,7444,7428
<7428=7441,7438,7435,7432,7429
<7429=7431,7430
<7432=7434,7433
<7435=7437,7436
<7438=7440,7439
<7441=7443,7442
<7445=7720,7704,7691,7680,7669,7660,7651,7642,7633,7628,7624,7580,7481,7448,7446
<7446=7447
<7448=7449
<7449=7478,7450
<7450=7477,7451
<7451=7475,7452
<7452=7473,7471,7469,7465,7461,7457,7453
<7453=7454
<7454=7456,7455
<7457=7458
<7458=7460,7459
<7461=7462
<7462=7464,7463
<7465=7466
<7466=7468,7467
<7469=7470
<7471=7472
<7473=7474
<7475=7476
<7478=7480,7479
<7481=7574,7570,7567,7482
<7482=7554,7483
<7483=7484
<7484=7549,7485
<7485=7547,7486
<7486=7545,7543,7541,7527,7515,7501,7487
<7487=7488
<7488=7500,7489
<7489=7493,7490
<7490=7492,7491
<7493=7499,7494
<7494=7496,7495
<7496=7498,7497
<7501=7502
<7502=7514,7503
<7503=7507,7504
<7504=7506,7505
<7507=7513,7508
<7508=7510,7509
<7510=7512,7511
<7515=7516
<7516=7526,7517
<7517=7519,7518
<7519=7525,7520
<7520=7522,7521
<7522=7524,7523
<7527=7528
<7528=7540,7529
<7529=7533,7530
<7530=7532,7531
<7533=7539,7534
<7534=7536,7535
<7536=7538,7537
<7541=7542
<7543=7544
<7545=7546
<7547=7548
<7549=7553,7550
<7550=7552,7551
<7554=7555
<7555=7566,7565,7556
<7556=7564,7557
<7557=7563,7558
<7558=7562,7559
<7559=7561,7560
<7567=7569,7568
<7570=7571
<7571=7573,7572
<7574=7575
<7575=7579,7576
<7576=7578,7577
<7580=7596,7581
<7581=7582
<7582=7594,7583
<7583=7592,7590,7588,7586,7584
<7584=7585
<7586=7587
<7588=7589
<7590=7591
<7592=7593
<7594=7595
<7596=7597
<7597=7619,7598
<7598=7612,7599
<7599=7607,7600
<7600=7604,7601
<7601=7603,7602
<7604=7606,7605
<7607=7609,7608
<7609=7611,7610
<7612=7616,7613
<7613=7615,7614
<7616=7618,7617
<7619=7621,7620
<7621=7623,7622
<7624=7625
<7625=7627,7626
<7628=7629
<7629=7632,7631,7630
<7633=7634
<7634=7641,7640,7635
<7635=7639,7636
<7636=7638,7637
<7642=7643
<7643=7650,7649,7644
<7644=7648,7645
<7645=7647,7646
<7651=7652
<7652=7659,7658,7653
<7653=7657,7654
<7654=7656,7655
<7660=7661
<7661=7668,7667,7662
<7662=7666,7663
<7663=7665,7664
<7669=7670
<7670=7679,7678,7671
<7671=7677,7672
<7672=7676,7673
<7673=7675,7674
<7680=7681
<7681=7690,7689,7682
<7682=7688,7683
<7683=7687,7684
<7684=7686,7685
<7691=7692
<7692=7703,7702,7693
<7693=7701,7694
<7694=7700,7695
<7695=7699,7696
<7696=7698,7697
<7704=7705
<7705=7719,7718,7706
<7706=7717,7707
<7707=7716,7708
<7708=7714,7709
<7709=7710
<7710=7711
<7711=7713,7712
<7714=7715
<7720=7721
<7721=7735,7734,7722
<7722=7733,7723
<7723=7732,7724
<7724=7730,7725
<7725=7726
<7726=7727
<7727=7729,7728
<7730=7731
<7774=7783,7782,7775
<7775=7779,7776
<7776=7778,7777
<7779=7781,7780
<7783=7827,7818,7809,7800,7784
<7784=7785
<7785=7794,7786
<7786=7788,7787
<7788=7792,7789
<7789=7790
<7790=7791
<7792=7793
<7794=7798,7795
<7795=7796
<7796=7797
<7798=7799
<7800=7801
<7801=7808,7807,7802
<7802=7806,7803
<7803=7805,7804
<7809=7810
<7810=7817,7816,7811
<7811=7815,7812
<7812=7814,7813
<7818=7819
<7819=7826,7825,7820
<7820=7824,7821
<7821=7823,7822
<7827=7830,7828
<7828=7829
<7830=7831
<7831=7833,7832
<7844=7850,7849,7845
<7845=7846
<7846=7848,7847
<7850=7936,7927,7918,7907,7851
<7851=7852
<7852=7854,7853
<7854=7903,7856,7855
<7856=7858,7857
<7858=7899,7860,7859
<7860=7870,7861
<7861=7867,7862
<7862=7866,7863
<7863=7865,7864
<7867=7869,7868
<7870=7895,7872,7871
<7872=7880,7873
<7873=7879,7874
<7874=7878,7875
<7875=7877,7876
<7880=7891,7882,7881
<7882=7888,7883
<7883=7887,7884
<7884=7886,7885
<7888=7890,7889
<7891=7892
<7892=7894,7893
<7895=7896
<7896=7898,7897
<7899=7900
<7900=7902,7901
<7903=7904
<7904=7906,7905
<7907=7908
<7908=7917,7916,7909
<7909=7915,7910
<7910=7914,7911
<7911=7913,7912
<7918=7919
<7919=7926,7925,7920
<7920=7924,7921
<7921=7923,7922
<7927=7928
<7928=7935,7934,7929
<7929=7933,7930
<7930=7932,7931
<7936=7937
<7937=7944,7943,7938
<7938=7942,7939
<7939=7941,7940
<7982=7988,7987,7983
<7983=7984
<7984=7986,7985
<7988=8411,8398,8382,8365,8348,8331,8323,8315,8307,8299,8254,8237,8220,7991,7989
<7989=7990
<7991=8202,7999,7992
<7992=7993
<7993=7994
<7994=7996,7995
<7996=7998,7997
<7999=8196,8187,8098,8089,8000
<8000=8085,8001
<8001=8068,8055,8044,8002
<8002=8036,8032,8029,8003
<8003=8004
<8004=8005
<8005=8020,8006
<8006=8008,8007
<8008=8018,8009
<8009=8014,8010
<8010=8011
<8011=8013,8012
<8014=8015
<8015=8017,8016
<8018=8019
<8020=8026,8021
<8021=8025,8022
<8022=8024,8023
<8026=8028,8027
<8029=8031,8030
<8032=8033
<8033=8035,8034
<8036=8037
<8037=8038
<8038=8043,8042,8039
<8039=8041,8040
<8044=8049,8045
<8045=8046
<8046=8048,8047
<8049=8050
<8050=8052,8051
<8052=8054,8053
<8055=8060,8056
<8056=8057
<8057=8059,8058
<8060=8061
<8061=8065,8062
<8062=8064,8063
<8065=8067,8066
<8068=8077,8069
<8069=8076,8075,8070
<8070=8074,8071
<8071=8073,8072
<8077=8084,8083,8078
<8078=8082,8079
<8079=8081,8080
<8085=8086
<8086=8088,8087
<8089=8090
<8090=8097,8096,8091
<8091=8095,8092
<8092=8094,8093
<8098=8183,8099
<8099=8166,8153,8142,8100
<8100=8134,8130,8127,8101
<8101=8102
<8102=8103
<8103=8118,8104
<8104=8106,8105
<8106=8116,8107
<8107=8112,8108
<8108=8109
<8109=8111,8110
<8112=8113
<8113=8115,8114
<8116=8117
<8118=8124,8119
<8119=8123,8120
<8120=8122,8121
<8124=8126,8125
<8127=8129,8128
<8130=8131
<8131=8133,8132
<8134=8135
<8135=8136
<8136=8141,8140,8137
<8137=8139,8138
<8142=8147,8143
<8143=8144
<8144=8146,8145
<8147=8148
<8148=8150,8149
<8150=8152,8151
<8153=8158,8154
<8154=8155
<8155=8157,8156
<8158=8159
<8159=8163,8160
<8160=8162,8161
<8163=8165,8164
<8166=8175,8167
<8167=8174,8173,8168
<8168=8172,8169
<8169=8171,8170
<8175=8182,8181,8176
<8176=8180,8177
<8177=8179,8178
<8183=8184
<8184=8186,8185
<8187=8188
<8188=8195,8194,8189
<8189=8193,8190
<8190=8192,8191
<8196=8197
<8197=8199,8198
<8199=8201,8200
<8202=8203
<8203=8215,8204
<8204=8210,8205
<8205=8207,8206
<8207=8209,8208
<8210=8212,8211
<8212=8214,8213
<8215=8217,8216
<8217=8219,8218
<8220=8221
<8221=8234,8222
<8222=8233,8223
<8223=8231,8224
<8224=8229,8225
<8225=8226
<8226=8228,8227
<8229=8230
<8231=8232
<8234=8236,8235
<8237=8238
<8238=8251,8239
<8239=8250,8240
<8240=8248,8241
<8241=8246,8242
<8242=8243
<8243=8245,8244
<8246=8247
<8248=8249
<8251=8253,8252
<8254=8281,8274,8255
<8255=8256
<8256=8257
<8257=8258
<8258=8271,8259
<8259=8270,8260
<8260=8268,8261
<8261=8266,8262
<8262=8263
<8263=8265,8264
<8266=8267
<8268=8269
<8271=8273,8272
<8274=8275
<8275=8276
<8276=8278,8277
<8278=8280,8279
<8281=8282
<8282=8294,8283
<8283=8289,8284
<8284=8286,8285
<8286=8288,8287
<8289=8291,8290
<8291=8293,8292
<8294=8296,8295
<8296=8298,8297
<8299=8300
<8300=8304,8301
<8301=8303,8302
<8304=8306,8305
<8307=8308
<8308=8312,8309
<8309=8311,8310
<8312=8314,8313
<8315=8316
<8316=8320,8317
<8317=8319,8318
<8320=8322,8321
<8323=8324
<8324=8328,8325
<8325=8327,8326
<8328=8330,8329
<8331=8332
<8332=8345,8333
<8333=8344,8334
<8334=8342,8335
<8335=8340,8336
<8336=8337
<8337=8339,8338
<8340=8341
<8342=8343
<8345=8347,8346
<8348=8349
<8349=8362,8350
<8350=8361,8351
<8351=8359,8352
<8352=8353
<8353=8354
<8354=8358,8355
<8355=8357,8356
<8359=8360
<8362=8364,8363
<8365=8366
<8366=8379,8367
<8367=8378,8368
<8368=8376,8369
<8369=8374,8370
<8370=8371
<8371=8373,8372
<8374=8375
<8376=8377
<8379=8381,8380
<8382=8383
<8383=8397,8396,8384
<8384=8395,8385
<8385=8394,8386
<8386=8392,8387
<8387=8388
<8388=8389
<8389=8391,8390
<8392=8393
<8398=8399
<8399=8410,8409,8400
<8400=8408,8401
<8401=8403,8402
<8403=8405,8404
<8405=8407,8406
<8411=8412
<8412=8423,8422,8413
<8413=8421,8414
<8414=8416,8415
<8416=8418,8417
<8418=8420,8419
<8479=8485,8484,8480
<8480=8481
<8481=8483,8482
<8485=8538,8529,8520,8511,8502,8493,8486
<8486=8487
<8487=8491,8488
<8488=8489
<8489=8490
<8491=8492
<8493=8494
<8494=8500,8495
<8495=8496
<8496=8497
<8497=8499,8498
<8500=8501
<8502=8503
<8503=8509,8504
<8504=8505
<8505=8506
<8506=8508,8507
<8509=8510
<8511=8512
<8512=8518,8513
<8513=8514
<8514=8515
<8515=8517,8516
<8518=8519
<8520=8521
<8521=8527,8522
<8522=8523
<8523=8524
<8524=8526,8525
<8527=8528
<8529=8530
<8530=8536,8531
<8531=8532
<8532=8533
<8533=8535,8534
<8536=8537
<8538=8539
<8539=8545,8540
<8540=8541
<8541=8542
<8542=8544,8543
<8545=8546
<8558=8585,8584,8559
<8559=8581,8578,8575,8572,8569,8566,8563,8560
<8560=8562,8561
<8563=8565,8564
<8566=8568,8567
<8569=8571,8570
<8572=8574,8573
<8575=8577,8576
<8578=8580,8579
<8581=8583,8582
<8585=9345,9336,9323,9316,9309,9293,9277,9266,9255,9244,9235,9218,9201,9194,9181,9172,9163,9154,9145,9136,9121,9108,9102,9093,9080,9065,9048,9035,9020,9011,9002,8987,8688,8666,8588,8586
<8586=8587
<8588=8658,8621,8589
<8589=8590
<8590=8615,8609,8591
<8591=8605,8599,8592
<8592=8593
<8593=8594
<8594=8596,8595
<8596=8598,8597
<8599=8600
<8600=8602,8601
<8602=8604,8603
<8605=8606
<8606=8608,8607
<8609=8610
<8610=8612,8611
<8612=8614,8613
<8615=8616
<8616=8618,8617
<8618=8620,8619
<8621=8650,8642,8622
<8622=8638,8630,8623
<8623=8624
<8624=8625
<8625=8627,8626
<8627=8629,8628
<8630=8631
<8631=8635,8632
<8632=8634,8633
<8635=8637,8636
<8638=8639
<8639=8641,8640
<8642=8643
<8643=8647,8644
<8644=8646,8645
<8647=8649,8648
<8650=8651
<8651=8655,8652
<8652=8654,8653
<8655=8657,8656
<8658=8659
<8659=8663,8660
<8660=8662,8661
<8663=8665,8664
<8666=8676,8667
<8667=8670,8668
<8668=8669
<8670=8671
<8671=8673,8672
<8673=8675,8674
<8676=8677
<8677=8685,8678
<8678=8682,8679
<8679=8681,8680
<8682=8684,8683
<8685=8687,8686
<8688=8983,8980,8689
<8689=8976,8972,8943,8876,8690
<8690=8872,8868,8865,8691
<8691=8861,8847,8731,8721,8711,8696,8692
<8692=8693
<8693=8695,8694
<8696=8707,8697
<8697=8698
<8698=8706,8699
<8699=8701,8700
<8701=8705,8702
<8702=8704,8703
<8707=8708
<8708=8710,8709
<8711=8712
<8712=8720,8713
<8713=8715,8714
<8715=8719,8716
<8716=8718,8717
<8721=8722
<8722=8730,8723
<8723=8725,8724
<8725=8729,8726
<8726=8728,8727
<8731=8841,8831,8732
<8732=8733
<8733=8746,8742,8734
<8734=8735
<8735=8737,8736
<8737=8741,8738
<8738=8740,8739
<8742=8743
<8743=8745,8744
<8746=8827,8793,8747
<8747=8748
<8748=8749
<8749=8791,8770,8750
<8750=8751
<8751=8752
<8752=8765,8753
<8753=8764,8754
<8754=8762,8755
<8755=8758,8756
<8756=8757
<8758=8759
<8759=8761,8760
<8762=8763
<8765=8769,8766
<8766=8768,8767
<8770=8771
<8771=8786,8772
<8772=8785,8773
<8773=8775,8774
<8775=8783,8776
<8776=8779,8777
<8777=8778
<8779=8780
<8780=8782,8781
<8783=8784
<8786=8790,8787
<8787=8789,8788
<8791=8792
<8793=8794
<8794=8822,8795
<8795=8821,8796
<8796=8819,8807,8797
<8797=8805,8798
<8798=8799
<8799=8800
<8800=8804,8801
<8801=8803,8802
<8805=8806
<8807=8809,8808
<8809=8817,8810
<8810=8811
<8811=8812
<8812=8814,8813
<8814=8816,8815
<8817=8818
<8819=8820
<8822=8826,8823
<8823=8825,8824
<8827=8828
<8828=8830,8829
<8831=8832
<8832=8840,8833
<8833=8839,8834
<8834=8838,8835
<8835=8837,8836
<8841=8842
<8842=8846,8843
<8843=8845,8844
<8847=8849,8848
<8849=8850
<8850=8858,8851
<8851=8853,8852
<8853=8857,8854
<8854=8856,8855
<8858=8860,8859
<8861=8862
<8862=8864,8863
<8865=8867,8866
<8868=8869
<8869=8871,8870
<8872=8873
<8873=8875,8874
<8876=8939,8911,8877
<8877=8878
<8878=8879
<8879=8909,8894,8880
<8880=8881
<8881=8882
<8882=8893,8883
<8883=8891,8884
<8884=8887,8885
<8885=8886
<8887=8888
<8888=8890,8889
<8891=8892
<8894=8895
<8895=8908,8896
<8896=8898,8897
<8898=8906,8899
<8899=8902,8900
<8900=8901
<8902=8903
<8903=8905,8904
<8906=8907
<8909=8910
<8911=8912
<8912=8938,8913
<8913=8936,8924,8914
<8914=8922,8915
<8915=8916
<8916=8917
<8917=8919,8918
<8919=8921,8920
<8922=8923
<8924=8926,8925
<8926=8934,8927
<8927=8928
<8928=8929
<8929=8931,8930
<8931=8933,8932
<8934=8935
<8936=8937
<8939=8940
<8940=8942,8941
<8943=8945,8944
<8945=8946
<8946=8971,8947
<8947=8969,8948
<8948=8967,8965,8963,8955,8953,8951,8949
<8949=8950
<8951=8952
<8953=8954
<8955=8956
<8956=8958,8957
<8958=8962,8959
<8959=8961,8960
<8963=8964
<8965=8966
<8967=8968
<8969=8970
<8972=8973
<8973=8975,8974
<8976=8977
<8977=8979,8978
<8980=8982,8981
<8983=8984
<8984=8986,8985
<8987=8988
<8988=9001,9000,8989
<8989=8999,8990
<8990=8998,8991
<8991=8993,8992
<8993=8995,8994
<8995=8997,8996
<9002=9003
<9003=9010,9009,9004
<9004=9008,9005
<9005=9007,9006
<9011=9012
<9012=9019,9018,9013
<9013=9017,9014
<9014=9016,9015
<9020=9029,9021
<9021=9022
<9022=9028,9023
<9023=9027,9024
<9024=9026,9025
<9029=9030
<9030=9032,9031
<9032=9034,9033
<9035=9042,9036
<9036=9037
<9037=9041,9038
<9038=9040,9039
<9042=9043
<9043=9045,9044
<9045=9047,9046
<9048=9057,9049
<9049=9056,9055,9050
<9050=9054,9051
<9051=9053,9052
<9057=9064,9063,9058
<9058=9062,9059
<9059=9061,9060
<9065=9074,9066
<9066=9067
<9067=9073,9068
<9068=9072,9069
<9069=9071,9070
<9074=9075
<9075=9077,9076
<9077=9079,9078
<9080=9087,9081
<9081=9082
<9082=9086,9083
<9083=9085,9084
<9087=9088
<9088=9090,9089
<9090=9092,9091
<9093=9094
<9094=9101,9100,9095
<9095=9099,9096
<9096=9098,9097
<9102=9103
<9103=9107,9104
<9104=9106,9105
<9108=9109
<9109=9119,9110
<9110=9111
<9111=9112
<9112=9116,9113
<9113=9115,9114
<9116=9118,9117
<9119=9120
<9121=9122
<9122=9134,9123
<9123=9132,9130,9124
<9124=9125
<9125=9129,9126
<9126=9128,9127
<9130=9131
<9132=9133
<9134=9135
<9136=9137
<9137=9144,9143,9138
<9138=9142,9139
<9139=9141,9140
<9145=9146
<9146=9153,9152,9147
<9147=9151,9148
<9148=9150,9149
<9154=9155
<9155=9162,9161,9156
<9156=9160,9157
<9157=9159,9158
<9163=9164
<9164=9171,9170,9165
<9165=9169,9166
<9166=9168,9167
<9172=9173
<9173=9180,9179,9174
<9174=9178,9175
<9175=9177,9176
<9181=9182
<9182=9193,9192,9183
<9183=9191,9184
<9184=9186,9185
<9186=9188,9187
<9188=9190,9189
<9194=9198,9195
<9195=9197,9196
<9198=9200,9199
<9201=9210,9202
<9202=9209,9208,9203
<9203=9207,9204
<9204=9206,9205
<9210=9217,9216,9211
<9211=9215,9212
<9212=9214,9213
<9218=9227,9219
<9219=9226,9225,9220
<9220=9224,9221
<9221=9223,9222
<9227=9234,9233,9228
<9228=9232,9229
<9229=9231,9230
<9235=9236
<9236=9243,9242,9237
<9237=9241,9238
<9238=9240,9239
<9244=9245
<9245=9254,9253,9246
<9246=9252,9247
<9247=9251,9248
<9248=9250,9249
<9255=9256
<9256=9265,9264,9257
<9257=9263,9258
<9258=9262,9259
<9259=9261,9260
<9266=9267
<9267=9276,9275,9268
<9268=9274,9269
<9269=9273,9270
<9270=9272,9271
<9277=9278
<9278=9292,9291,9279
<9279=9290,9280
<9280=9289,9281
<9281=9287,9282
<9282=9283
<9283=9284
<9284=9286,9285
<9287=9288
<9293=9294
<9294=9308,9307,9295
<9295=9306,9296
<9296=9305,9297
<9297=9303,9298
<9298=9299
<9299=9300
<9300=9302,9301
<9303=9304
<9309=9310
<9310=9315,9314,9311
<9311=9313,9312
<9316=9317
<9317=9322,9321,9318
<9318=9320,9319
<9323=9330,9324
<9324=9329,9328,9325
<9325=9327,9326
<9330=9335,9334,9331
<9331=9333,9332
<9336=9337
<9337=9344,9343,9338
<9338=9342,9339
<9339=9341,9340
<9345=9346
<9346=9353,9352,9347
<9347=9351,9348
<9348=9350,9349
<9434=9461,9460,9435
<9435=9457,9454,9451,9448,9445,9442,9439,9436
<9436=9438,9437
<9439=9441,9440
<9442=9444,9443
<9445=9447,9446
<9448=9450,9449
<9451=9453,9452
<9454=9456,9455
<9457=9459,9458
<9461=10752,10743,10730,10723,10716,10700,10684,10673,10662,10651,10634,10625,10616,10607,10598,10589,10572,10559,10544,10527,10514,10499,10234,9969,9954,9858,9573,9551,9464,9462
<9462=9463
<9464=9543,9497,9465
<9465=9466
<9466=9491,9485,9467
<9467=9481,9475,9468
<9468=9469
<9469=9470
<9470=9472,9471
<9472=9474,9473
<9475=9476
<9476=9478,9477
<9478=9480,9479
<9481=9482
<9482=9484,9483
<9485=9486
<9486=9488,9487
<9488=9490,9489
<9491=9492
<9492=9494,9493
<9494=9496,9495
<9497=9534,9526,9518,9498
<9498=9514,9506,9499
<9499=9500
<9500=9501
<9501=9503,9502
<9503=9505,9504
<9506=9507
<9507=9511,9508
<9508=9510,9509
<9511=9513,9512
<9514=9515
<9515=9517,9516
<9518=9519
<9519=9523,9520
<9520=9522,9521
<9523=9525,9524
<9526=9527
<9527=9531,9528
<9528=9530,9529
<9531=9533,9532
<9534=9535
<9535=9542,9541,9536
<9536=9540,9537
<9537=9539,9538
<9543=9544
<9544=9548,9545
<9545=9547,9546
<9548=9550,9549
<9551=9561,9552
<9552=9555,9553
<9553=9554
<9555=9556
<9556=9558,9557
<9558=9560,9559
<9561=9562
<9562=9570,9563
<9563=9567,9564
<9564=9566,9565
<9567=9569,9568
<9570=9572,9571
<9573=9850,9846,9843,9574
<9574=9839,9835,9806,9796,9575
<9575=9792,9714,9576
<9576=9577
<9577=9710,9656,9578
<9578=9579
<9579=9649,9642,9592,9586,9580
<9580=9581
<9581=9585,9582
<9582=9584,9583
<9586=9587
<9587=9591,9588
<9588=9590,9589
<9592=9634,9630,9627,9593
<9593=9614,9604,9594
<9594=9595
<9595=9603,9596
<9596=9598,9597
<9598=9602,9599
<9599=9601,9600
<9604=9605
<9605=9613,9606
<9606=9608,9607
<9608=9612,9609
<9609=9611,9610
<9614=9615
<9615=9626,9625,9616
<9616=9624,9617
<9617=9623,9618
<9618=9622,9619
<9619=9621,9620
<9627=9629,9628
<9630=9631
<9631=9633,9632
<9634=9635
<9635=9636
<9636=9641,9640,9637
<9637=9639,9638
<9642=9643
<9643=9648,9647,9644
<9644=9646,9645
<9649=9650
<9650=9655,9654,9651
<9651=9653,9652
<9656=9703,9663,9657
<9657=9658
<9658=9662,9659
<9659=9661,9660
<9663=9695,9691,9688,9664
<9664=9675,9665
<9665=9666
<9666=9674,9667
<9667=9669,9668
<9669=9673,9670
<9670=9672,9671
<9675=9676
<9676=9687,9686,9677
<9677=9685,9678
<9678=9684,9679
<9679=9683,9680
<9680=9682,9681
<9688=9690,9689
<9691=9692
<9692=9694,9693
<9695=9696
<9696=9697
<9697=9702,9701,9698
<9698=9700,9699
<9703=9704
<9704=9709,9708,9705
<9705=9707,9706
<9710=9711
<9711=9713,9712
<9714=9715
<9715=9784,9780,9777,9716
<9716=9773,9763,9751,9741,9731,9721,9717
<9717=9718
<9718=9720,9719
<9721=9722
<9722=9730,9723
<9723=9725,9724
<9725=9729,9726
<9726=9728,9727
<9731=9732
<9732=9740,9733
<9733=9735,9734
<9735=9739,9736
<9736=9738,9737
<9741=9742
<9742=9750,9743
<9743=9745,9744
<9745=9749,9746
<9746=9748,9747
<9751=9752
<9752=9762,9753
<9753=9761,9754
<9754=9760,9755
<9755=9759,9756
<9756=9758,9757
<9763=9765,9764
<9765=9766
<9766=9768,9767
<9768=9772,9769
<9769=9771,9770
<9773=9774
<9774=9776,9775
<9777=9779,9778
<9780=9781
<9781=9783,9782
<9784=9785
<9785=9786
<9786=9791,9790,9787
<9787=9789,9788
<9792=9793
<9793=9795,9794
<9796=9797
<9797=9805,9798
<9798=9804,9799
<9799=9803,9800
<9800=9802,9801
<9806=9808,9807
<9808=9809
<9809=9834,9810
<9810=9832,9811
<9811=9830,9828,9826,9818,9816,9814,9812
<9812=9813
<9814=9815
<9816=9817
<9818=9819
<9819=9821,9820
<9821=9825,9822
<9822=9824,9823
<9826=9827
<9828=9829
<9830=9831
<9832=9833
<9835=9836
<9836=9838,9837
<9839=9840
<9840=9842,9841
<9843=9845,9844
<9846=9847
<9847=9849,9848
<9850=9851
<9851=9852
<9852=9857,9856,9853
<9853=9855,9854
<9858=9950,9859
<9859=9943,9916,9909,9882,9876,9860
<9860=9865,9861
<9861=9862
<9862=9864,9863
<9865=9866
<9866=9875,9867
<9867=9873,9868
<9868=9869
<9869=9870
<9870=9872,9871
<9873=9874
<9876=9877
<9877=9881,9878
<9878=9880,9879
<9882=9901,9897,9894,9883
<9883=9884
<9884=9885
<9885=9893,9886
<9886=9892,9887
<9887=9891,9888
<9888=9890,9889
<9894=9896,9895
<9897=9898
<9898=9900,9899
<9901=9902
<9902=9903
<9903=9908,9907,9904
<9904=9906,9905
<9909=9910
<9910=9915,9914,9911
<9911=9913,9912
<9916=9935,9931,9928,9917
<9917=9918
<9918=9919
<9919=9927,9920
<9920=9926,9921
<9921=9925,9922
<9922=9924,9923
<9928=9930,9929
<9931=9932
<9932=9934,9933
<9935=9936
<9936=9937
<9937=9942,9941,9938
<9938=9940,9939
<9943=9944
<9944=9949,9948,9945
<9945=9947,9946
<9950=9951
<9951=9953,9952
<9954=9955
<9955=9968,9967,9956
<9956=9966,9957
<9957=9965,9958
<9958=9960,9959
<9960=9962,9961
<9962=9964,9963
<9969=10230,10205,9970
<9970=9971
<9971=10192,10181,9972
<9972=10169,9973
<9973=10151,10142,10128,10115,10104,10095,10082,10075,10064,10048,9986,9980,9974
<9974=9975
<9975=9977,9976
<9977=9979,9978
<9980=9981
<9981=9983,9982
<9983=9985,9984
<9986=10040,10036,10033,9987
<9987=10024,9988
<9988=10020,10010,9989
<9989=9990
<9990=9991
<9991=10003,9992
<9992=9996,9993
<9993=9995,9994
<9996=10002,9997
<9997=9999,9998
<9999=10001,10000
<10003=10009,10004
<10004=10008,10005
<10005=10007,10006
<10010=10011
<10011=10013,10012
<10013=10019,10014
<10014=10018,10015
<10015=10017,10016
<10020=10021
<10021=10023,10022
<10024=10025
<10025=10032,10031,10026
<10026=10030,10027
<10027=10029,10028
<10033=10035,10034
<10036=10037
<10037=10039,10038
<10040=10041
<10041=10042
<10042=10047,10046,10043
<10043=10045,10044
<10048=10049
<10049=10063,10062,10050
<10050=10061,10051
<10051=10058,10055,10052
<10052=10054,10053
<10055=10057,10056
<10058=10060,10059
<10064=10065
<10065=10074,10073,10066
<10066=10072,10067
<10067=10071,10068
<10068=10070,10069
<10075=10076
<10076=10081,10080,10077
<10077=10079,10078
<10082=10083
<10083=10094,10093,10084
<10084=10092,10085
<10085=10089,10086
<10086=10088,10087
<10089=10091,10090
<10095=10096
<10096=10103,10102,10097
<10097=10101,10098
<10098=10100,10099
<10104=10105
<10105=10114,10113,10106
<10106=10112,10107
<10107=10111,10108
<10108=10110,10109
<10115=10116
<10116=10127,10126,10117
<10117=10125,10118
<10118=10120,10119
<10120=10124,10121
<10121=10123,10122
<10128=10129
<10129=10141,10140,10130
<10130=10139,10131
<10131=10137,10132
<10132=10133
<10133=10134
<10134=10136,10135
<10137=10138
<10142=10143
<10143=10150,10149,10144
<10144=10148,10145
<10145=10147,10146
<10151=10152
<10152=10168,10167,10153
<10153=10166,10154
<10154=10164,10155
<10155=10156
<10156=10157
<10157=10159,10158
<10159=10161,10160
<10161=10163,10162
<10164=10165
<10169=10170
<10170=10176,10171
<10171=10175,10172
<10172=10174,10173
<10176=10180,10177
<10177=10179,10178
<10181=10186,10182
<10182=10183
<10183=10185,10184
<10186=10187
<10187=10189,10188
<10189=10191,10190
<10192=10197,10193
<10193=10194
<10194=10196,10195
<10197=10198
<10198=10202,10199
<10199=10201,10200
<10202=10204,10203
<10205=10217,10206
<10206=10211,10207
<10207=10208
<10208=10210,10209
<10211=10212
<10212=10214,10213
<10214=10216,10215
<10217=10222,10218
<10218=10219
<10219=10221,10220
<10222=10223
<10223=10227,10224
<10224=10226,10225
<10227=10229,10228
<10230=10231
<10231=10233,10232
<10234=10495,10470,10235
<10235=10236
<10236=10457,10446,10237
<10237=10434,10238
<10238=10416,10407,10393,10380,10369,10360,10347,10340,10329,10313,10251,10245,10239
<10239=10240
<10240=10242,10241
<10242=10244,10243
<10245=10246
<10246=10248,10247
<10248=10250,10249
<10251=10305,10301,10298,10252
<10252=10289,10253
<10253=10285,10275,10254
<10254=10255
<10255=10256
<10256=10268,10257
<10257=10261,10258
<10258=10260,10259
<10261=10267,10262
<10262=10264,10263
<10264=10266,10265
<10268=10274,10269
<10269=10273,10270
<10270=10272,10271
<10275=10276
<10276=10278,10277
<10278=10284,10279
<10279=10283,10280
<10280=10282,10281
<10285=10286
<10286=10288,10287
<10289=10290
<10290=10297,10296,10291
<10291=10295,10292
<10292=10294,10293
<10298=10300,10299
<10301=10302
<10302=10304,10303
<10305=10306
<10306=10307
<10307=10312,10311,10308
<10308=10310,10309
<10313=10314
<10314=10328,10327,10315
<10315=10326,10316
<10316=10323,10320,10317
<10317=10319,10318
<10320=10322,10321
<10323=10325,10324
<10329=10330
<10330=10339,10338,10331
<10331=10337,10332
<10332=10336,10333
<10333=10335,10334
<10340=10341
<10341=10346,10345,10342
<10342=10344,10343
<10347=10348
<10348=10359,10358,10349
<10349=10357,10350
<10350=10354,10351
<10351=10353,10352
<10354=10356,10355
<10360=10361
<10361=10368,10367,10362
<10362=10366,10363
<10363=10365,10364
<10369=10370
<10370=10379,10378,10371
<10371=10377,10372
<10372=10376,10373
<10373=10375,10374
<10380=10381
<10381=10392,10391,10382
<10382=10390,10383
<10383=10385,10384
<10385=10389,10386
<10386=10388,10387
<10393=10394
<10394=10406,10405,10395
<10395=10404,10396
<10396=10402,10397
<10397=10398
<10398=10399
<10399=10401,10400
<10402=10403
<10407=10408
<10408=10415,10414,10409
<10409=10413,10410
<10410=10412,10411
<10416=10417
<10417=10433,10432,10418
<10418=10431,10419
<10419=10429,10420
<10420=10421
<10421=10422
<10422=10424,10423
<10424=10426,10425
<10426=10428,10427
<10429=10430
<10434=10435
<10435=10441,10436
<10436=10440,10437
<10437=10439,10438
<10441=10445,10442
<10442=10444,10443
<10446=10451,10447
<10447=10448
<10448=10450,10449
<10451=10452
<10452=10454,10453
<10454=10456,10455
<10457=10462,10458
<10458=10459
<10459=10461,10460
<10462=10463
<10463=10467,10464
<10464=10466,10465
<10467=10469,10468
<10470=10482,10471
<10471=10476,10472
<10472=10473
<10473=10475,10474
<10476=10477
<10477=10479,10478
<10479=10481,10480
<10482=10487,10483
<10483=10484
<10484=10486,10485
<10487=10488
<10488=10492,10489
<10489=10491,10490
<10492=10494,10493
<10495=10496
<10496=10498,10497
<10499=10508,10500
<10500=10501
<10501=10507,10502
<10502=10506,10503
<10503=10505,10504
<10508=10509
<10509=10511,10510
<10511=10513,10512
<10514=10521,10515
<10515=10516
<10516=10520,10517
<10517=10519,10518
<10521=10522
<10522=10524,10523
<10524=10526,10525
<10527=10536,10528
<10528=10535,10534,10529
<10529=10533,10530
<10530=10532,10531
<10536=10543,10542,10537
<10537=10541,10538
<10538=10540,10539
<10544=10553,10545
<10545=10546
<10546=10552,10547
<10547=10551,10548
<10548=10550,10549
<10553=10554
<10554=10556,10555
<10556=10558,10557
<10559=10566,10560
<10560=10561
<10561=10565,10562
<10562=10564,10563
<10566=10567
<10567=10569,10568
<10569=10571,10570
<10572=10581,10573
<10573=10580,10579,10574
<10574=10578,10575
<10575=10577,10576
<10581=10588,10587,10582
<10582=10586,10583
<10583=10585,10584
<10589=10590
<10590=10597,10596,10591
<10591=10595,10592
<10592=10594,10593
<10598=10599
<10599=10606,10605,10600
<10600=10604,10601
<10601=10603,10602
<10607=10608
<10608=10615,10614,10609
<10609=10613,10610
<10610=10612,10611
<10616=10617
<10617=10624,10623,10618
<10618=10622,10619
<10619=10621,10620
<10625=10626
<10626=10633,10632,10627
<10627=10631,10628
<10628=10630,10629
<10634=10643,10635
<10635=10642,10641,10636
<10636=10640,10637
<10637=10639,10638
<10643=10650,10649,10644
<10644=10648,10645
<10645=10647,10646
<10651=10652
<10652=10661,10660,10653
<10653=10659,10654
<10654=10658,10655
<10655=10657,10656
<10662=10663
<10663=10672,10671,10664
<10664=10670,10665
<10665=10669,10666
<10666=10668,10667
<10673=10674
<10674=10683,10682,10675
<10675=10681,10676
<10676=10680,10677
<10677=10679,10678
<10684=10685
<10685=10699,10698,10686
<10686=10697,10687
<10687=10696,10688
<10688=10694,10689
<10689=10690
<10690=10691
<10691=10693,10692
<10694=10695
<10700=10701
<10701=10715,10714,10702
<10702=10713,10703
<10703=10712,10704
<10704=10710,10705
<10705=10706
<10706=10707
<10707=10709,10708
<10710=10711
<10716=10717
<10717=10722,10721,10718
<10718=10720,10719
<10723=10724
<10724=10729,10728,10725
<10725=10727,10726
<10730=10737,10731
<10731=10736,10735,10732
<10732=10734,10733
<10737=10742,10741,10738
<10738=10740,10739
<10743=10744
<10744=10751,10750,10745
<10745=10749,10746
<10746=10748,10747
<10752=10753
<10753=10760,10759,10754
<10754=10758,10755
<10755=10757,10756
<10867=10888,10887,10868
<10868=10884,10881,10878,10875,10872,10869
<10869=10871,10870
<10872=10874,10873
<10875=10877,10876
<10878=10880,10879
<10881=10883,10882
<10884=10886,10885
<10888=11349,11340,11333,11317,11301,11290,11279,11268,11259,11250,11241,11232,11221,11189,11182,10925,10891,10889
<10889=10890
<10891=10921,10915,10892
<10892=10893
<10893=10911,10905,10894
<10894=10895
<10895=10896
<10896=10902,10897
<10897=10901,10898
<10898=10900,10899
<10902=10904,10903
<10905=10906
<10906=10908,10907
<10908=10910,10909
<10911=10912
<10912=10914,10913
<10915=10916
<10916=10918,10917
<10918=10920,10919
<10921=10922
<10922=10924,10923
<10925=11172,11168,11161,10926
<10926=11157,11124,11072,11065,10927
<10927=11055,11051,11044,10928
<10928=11040,11036,10994,10941,10929
<10929=10930
<10930=10940,10931
<10931=10933,10932
<10933=10939,10934
<10934=10938,10935
<10935=10937,10936
<10941=10990,10951,10942
<10942=10943
<10943=10944
<10944=10950,10945
<10945=10949,10946
<10946=10948,10947
<10951=10956,10952
<10952=10953
<10953=10955,10954
<10956=10957
<10957=10989,10958
<10958=10986,10959
<10959=10982,10970,10960
<10960=10968,10961
<10961=10962
<10962=10963
<10963=10967,10964
<10964=10966,10965
<10968=10969
<10970=10972,10971
<10972=10980,10973
<10973=10974
<10974=10975
<10975=10977,10976
<10977=10979,10978
<10980=10981
<10982=10983
<10983=10985,10984
<10986=10988,10987
<10990=10991
<10991=10993,10992
<10994=11030,11022,10995
<10995=10996
<10996=11016,11002,10997
<10997=10998
<10998=10999
<10999=11001,11000
<11002=11003
<11003=11015,11004
<11004=11012,11005
<11005=11009,11006
<11006=11008,11007
<11009=11011,11010
<11012=11014,11013
<11016=11017
<11017=11019,11018
<11019=11021,11020
<11022=11023
<11023=11029,11024
<11024=11026,11025
<11026=11028,11027
<11030=11031
<11031=11033,11032
<11033=11035,11034
<11036=11037
<11037=11039,11038
<11040=11041
<11041=11043,11042
<11044=11048,11045
<11045=11047,11046
<11048=11050,11049
<11051=11052
<11052=11054,11053
<11055=11056
<11056=11062,11057
<11057=11061,11058
<11058=11060,11059
<11062=11064,11063
<11065=11069,11066
<11066=11068,11067
<11069=11071,11070
<11072=11118,11108,11073
<11073=11074
<11074=11102,11084,11075
<11075=11076
<11076=11077
<11077=11083,11078
<11078=11082,11079
<11079=11081,11080
<11084=11085
<11085=11101,11086
<11086=11100,11087
<11087=11089,11088
<11089=11097,11090
<11090=11094,11091
<11091=11093,11092
<11094=11096,11095
<11097=11099,11098
<11102=11103
<11103=11105,11104
<11105=11107,11106
<11108=11109
<11109=11117,11110
<11110=11116,11111
<11111=11113,11112
<11113=11115,11114
<11118=11119
<11119=11121,11120
<11121=11123,11122
<11124=11125
<11125=11156,11155,11126
<11126=11154,11127
<11127=11150,11138,11128
<11128=11136,11129
<11129=11130
<11130=11131
<11131=11133,11132
<11133=11135,11134
<11136=11137
<11138=11140,11139
<11140=11148,11141
<11141=11142
<11142=11143
<11143=11145,11144
<11145=11147,11146
<11148=11149
<11150=11151
<11151=11153,11152
<11157=11158
<11158=11160,11159
<11161=11165,11162
<11162=11164,11163
<11165=11167,11166
<11168=11169
<11169=11171,11170
<11172=11173
<11173=11179,11174
<11174=11178,11175
<11175=11177,11176
<11179=11181,11180
<11182=11186,11183
<11183=11185,11184
<11186=11188,11187
<11189=11205,11190
<11190=11191
<11191=11203,11192
<11192=11201,11199,11197,11195,11193
<11193=11194
<11195=11196
<11197=11198
<11199=11200
<11201=11202
<11203=11204
<11205=11206
<11206=11218,11207
<11207=11215,11208
<11208=11212,11209
<11209=11211,11210
<11212=11214,11213
<11215=11217,11216
<11218=11220,11219
<11221=11222
<11222=11231,11230,11223
<11223=11229,11224
<11224=11226,11225
<11226=11228,11227
<11232=11233
<11233=11240,11239,11234
<11234=11238,11235
<11235=11237,11236
<11241=11242
<11242=11249,11248,11243
<11243=11247,11244
<11244=11246,11245
<11250=11251
<11251=11258,11257,11252
<11252=11256,11253
<11253=11255,11254
<11259=11260
<11260=11267,11266,11261
<11261=11265,11262
<11262=11264,11263
<11268=11269
<11269=11278,11277,11270
<11270=11276,11271
<11271=11275,11272
<11272=11274,11273
<11279=11280
<11280=11289,11288,11281
<11281=11287,11282
<11282=11286,11283
<11283=11285,11284
<11290=11291
<11291=11300,11299,11292
<11292=11298,11293
<11293=11297,11294
<11294=11296,11295
<11301=11302
<11302=11316,11315,11303
<11303=11314,11304
<11304=11313,11305
<11305=11311,11306
<11306=11307
<11307=11308
<11308=11310,11309
<11311=11312
<11317=11318
<11318=11332,11331,11319
<11319=11330,11320
<11320=11329,11321
<11321=11327,11322
<11322=11323
<11323=11324
<11324=11326,11325
<11327=11328
<11333=11334
<11334=11339,11338,11335
<11335=11337,11336
<11340=11341
<11341=11348,11347,11342
<11342=11346,11343
<11343=11345,11344
<11349=11350
<11350=11357,11356,11351
<11351=11355,11352
<11352=11354,11353
<11409=11430,11429,11410
<11410=11426,11423,11420,11417,11414,11411
<11411=11413,11412
<11414=11416,11415
<11417=11419,11418
<11420=11422,11421
<11423=11425,11424
<11426=11428,11427
<11430=11869,11860,11853,11837,11821,11810,11799,11788,11779,11770,11761,11752,11739,11707,11700,11443,11433,11431
<11431=11432
<11433=11434
<11434=11440,11435
<11435=11439,11436
<11436=11438,11437
<11440=11442,11441
<11443=11690,11686,11679,11444
<11444=11675,11642,11590,11583,11445
<11445=11573,11569,11562,11446
<11446=11558,11554,11512,11459,11447
<11447=11448
<11448=11458,11449
<11449=11451,11450
<11451=11457,11452
<11452=11456,11453
<11453=11455,11454
<11459=11508,11469,11460
<11460=11461
<11461=11462
<11462=11468,11463
<11463=11467,11464
<11464=11466,11465
<11469=11474,11470
<11470=11471
<11471=11473,11472
<11474=11475
<11475=11507,11476
<11476=11504,11477
<11477=11500,11488,11478
<11478=11486,11479
<11479=11480
<11480=11481
<11481=11485,11482
<11482=11484,11483
<11486=11487
<11488=11490,11489
<11490=11498,11491
<11491=11492
<11492=11493
<11493=11495,11494
<11495=11497,11496
<11498=11499
<11500=11501
<11501=11503,11502
<11504=11506,11505
<11508=11509
<11509=11511,11510
<11512=11548,11540,11513
<11513=11514
<11514=11534,11520,11515
<11515=11516
<11516=11517
<11517=11519,11518
<11520=11521
<11521=11533,11522
<11522=11530,11523
<11523=11527,11524
<11524=11526,11525
<11527=11529,11528
<11530=11532,11531
<11534=11535
<11535=11537,11536
<11537=11539,11538
<11540=11541
<11541=11547,11542
<11542=11544,11543
<11544=11546,11545
<11548=11549
<11549=11551,11550
<11551=11553,11552
<11554=11555
<11555=11557,11556
<11558=11559
<11559=11561,11560
<11562=11566,11563
<11563=11565,11564
<11566=11568,11567
<11569=11570
<11570=11572,11571
<11573=11574
<11574=11580,11575
<11575=11579,11576
<11576=11578,11577
<11580=11582,11581
<11583=11587,11584
<11584=11586,11585
<11587=11589,11588
<11590=11636,11626,11591
<11591=11592
<11592=11620,11602,11593
<11593=11594
<11594=11595
<11595=11601,11596
<11596=11600,11597
<11597=11599,11598
<11602=11603
<11603=11619,11604
<11604=11618,11605
<11605=11607,11606
<11607=11615,11608
<11608=11612,11609
<11609=11611,11610
<11612=11614,11613
<11615=11617,11616
<11620=11621
<11621=11623,11622
<11623=11625,11624
<11626=11627
<11627=11635,11628
<11628=11634,11629
<11629=11631,11630
<11631=11633,11632
<11636=11637
<11637=11639,11638
<11639=11641,11640
<11642=11643
<11643=11674,11673,11644
<11644=11672,11645
<11645=11668,11656,11646
<11646=11654,11647
<11647=11648
<11648=11649
<11649=11651,11650
<11651=11653,11652
<11654=11655
<11656=11658,11657
<11658=11666,11659
<11659=11660
<11660=11661
<11661=11663,11662
<11663=11665,11664
<11666=11667
<11668=11669
<11669=11671,11670
<11675=11676
<11676=11678,11677
<11679=11683,11680
<11680=11682,11681
<11683=11685,11684
<11686=11687
<11687=11689,11688
<11690=11691
<11691=11697,11692
<11692=11696,11693
<11693=11695,11694
<11697=11699,11698
<11700=11704,11701
<11701=11703,11702
<11704=11706,11705
<11707=11723,11708
<11708=11709
<11709=11721,11710
<11710=11719,11717,11715,11713,11711
<11711=11712
<11713=11714
<11715=11716
<11717=11718
<11719=11720
<11721=11722
<11723=11724
<11724=11736,11725
<11725=11733,11726
<11726=11730,11727
<11727=11729,11728
<11730=11732,11731
<11733=11735,11734
<11736=11738,11737
<11739=11740
<11740=11751,11750,11741
<11741=11749,11742
<11742=11748,11743
<11743=11745,11744
<11745=11747,11746
<11752=11753
<11753=11760,11759,11754
<11754=11758,11755
<11755=11757,11756
<11761=11762
<11762=11769,11768,11763
<11763=11767,11764
<11764=11766,11765
<11770=11771
<11771=11778,11777,11772
<11772=11776,11773
<11773=11775,11774
<11779=11780
<11780=11787,11786,11781
<11781=11785,11782
<11782=11784,11783
<11788=11789
<11789=11798,11797,11790
<11790=11796,11791
<11791=11795,11792
<11792=11794,11793
<11799=11800
<11800=11809,11808,11801
<11801=11807,11802
<11802=11806,11803
<11803=11805,11804
<11810=11811
<11811=11820,11819,11812
<11812=11818,11813
<11813=11817,11814
<11814=11816,11815
<11821=11822
<11822=11836,11835,11823
<11823=11834,11824
<11824=11833,11825
<11825=11831,11826
<11826=11827
<11827=11828
<11828=11830,11829
<11831=11832
<11837=11838
<11838=11852,11851,11839
<11839=11850,11840
<11840=11849,11841
<11841=11847,11842
<11842=11843
<11843=11844
<11844=11846,11845
<11847=11848
<11853=11854
<11854=11859,11858,11855
<11855=11857,11856
<11860=11861
<11861=11868,11867,11862
<11862=11866,11863
<11863=11865,11864
<11869=11870
<11870=11877,11876,11871
<11871=11875,11872
<11872=11874,11873
<11929=11935,11934,11930
<11930=11931
<11931=11933,11932
<11935=13350,13333,13316,13299,13282,13275,13271,13267,11936,11938,11970,11972,12335,12364,12421,12428,12435,12442,12449,12761,12776,12791,12806,12821,12825,12835,13004,13042,13043,13044,13045,13046,13047,13048,13049,13050,13051,13052,13053,13054,13055,13056,13057,13058,13059,13060,13061,13062,13063,13064,13065,13066,13089,13134,13187,13252,13256,13260
<11936=11937
<11938=11959,11939
<11939=11942,11940
<11940=11941
<11942=11943
<11943=11957,11944
<11944=11955,11953,11951,11947,11945
<11945=11946
<11947=11948
<11948=11950,11949
<11951=11952
<11953=11954
<11955=11956
<11957=11958
<11959=11960
<11960=11962,11961
<11962=11969,11963
<11963=11967,11964
<11964=11965
<11965=11966
<11967=11968
<11970=11971
<11972=12331,12323,12320,11973
<11973=11974
<11974=12316,12310,12307,11975
<11975=12303,12296,12285,12264,12235,11976
<11976=12231,11977
<11977=12229,12204,12203,12201,12176,12175,12173,12148,12147,12145,12120,12119,12117,12062,12061,12059,12004,12003,12001,11984,11980,11978
<11978=11979
<11980=11981
<11981=11983,11982
<11984=11985
<11985=11999,11986
<11986=11997,11995,11993,11987
<11987=11988
<11988=11992,11989
<11989=11991,11990
<11993=11994
<11995=11996
<11997=11998
<11999=12000
<12001=12002
<12004=12044,12005
<12005=12040,12036,12033,12006
<12006=12021,12007
<12007=12008
<12008=12014,12009
<12009=12011,12010
<12011=12013,12012
<12014=12020,12015
<12015=12017,12016
<12017=12019,12018
<12021=12022
<12022=12028,12023
<12023=12025,12024
<12025=12027,12026
<12028=12032,12029
<12029=12031,12030
<12033=12035,12034
<12036=12037
<12037=12039,12038
<12040=12041
<12041=12043,12042
<12044=12045
<12045=12058,12057,12046
<12046=12056,12047
<12047=12055,12048
<12048=12052,12049
<12049=12051,12050
<12052=12054,12053
<12059=12060
<12062=12102,12063
<12063=12098,12094,12091,12064
<12064=12079,12065
<12065=12066
<12066=12072,12067
<12067=12069,12068
<12069=12071,12070
<12072=12078,12073
<12073=12075,12074
<12075=12077,12076
<12079=12080
<12080=12086,12081
<12081=12083,12082
<12083=12085,12084
<12086=12090,12087
<12087=12089,12088
<12091=12093,12092
<12094=12095
<12095=12097,12096
<12098=12099
<12099=12101,12100
<12102=12103
<12103=12116,12115,12104
<12104=12114,12105
<12105=12113,12106
<12106=12110,12107
<12107=12109,12108
<12110=12112,12111
<12117=12118
<12120=12121
<12121=12143,12122
<12122=12131,12129,12123
<12123=12124
<12124=12126,12125
<12126=12128,12127
<12129=12130
<12131=12132
<12132=12142,12133
<12133=12141,12134
<12134=12138,12135
<12135=12137,12136
<12138=12140,12139
<12143=12144
<12145=12146
<12148=12149
<12149=12171,12150
<12150=12159,12157,12151
<12151=12152
<12152=12154,12153
<12154=12156,12155
<12157=12158
<12159=12160
<12160=12170,12161
<12161=12169,12162
<12162=12166,12163
<12163=12165,12164
<12166=12168,12167
<12171=12172
<12173=12174
<12176=12177
<12177=12199,12178
<12178=12187,12185,12179
<12179=12180
<12180=12182,12181
<12182=12184,12183
<12185=12186
<12187=12188
<12188=12198,12189
<12189=12197,12190
<12190=12194,12191
<12191=12193,12192
<12194=12196,12195
<12199=12200
<12201=12202
<12204=12205
<12205=12227,12206
<12206=12215,12213,12207
<12207=12208
<12208=12210,12209
<12210=12212,12211
<12213=12214
<12215=12216
<12216=12226,12217
<12217=12225,12218
<12218=12222,12219
<12219=12221,12220
<12222=12224,12223
<12227=12228
<12229=12230
<12231=12232
<12232=12234,12233
<12235=12260,12236
<12236=12243,12239,12237
<12237=12238
<12239=12240
<12240=12242,12241
<12243=12244
<12244=12258,12245
<12245=12256,12254,12252,12248,12246
<12246=12247
<12248=12249
<12249=12251,12250
<12252=12253
<12254=12255
<12256=12257
<12258=12259
<12260=12261
<12261=12263,12262
<12264=12265
<12265=12284,12266
<12266=12282,12267
<12267=12280,12276,12272,12270,12268
<12268=12269
<12270=12271
<12272=12273
<12273=12275,12274
<12276=12277
<12277=12279,12278
<12280=12281
<12282=12283
<12285=12286
<12286=12295,12294,12287
<12287=12293,12288
<12288=12290,12289
<12290=12292,12291
<12296=12300,12297
<12297=12299,12298
<12300=12302,12301
<12303=12304
<12304=12306,12305
<12307=12309,12308
<12310=12311
<12311=12315,12312
<12312=12314,12313
<12316=12317
<12317=12319,12318
<12320=12322,12321
<12323=12324
<12324=12328,12325
<12325=12327,12326
<12328=12330,12329
<12331=12332
<12332=12334,12333
<12335=12360,12336
<12336=12343,12339,12337
<12337=12338
<12339=12340
<12340=12342,12341
<12343=12344
<12344=12358,12345
<12345=12356,12354,12352,12348,12346
<12346=12347
<12348=12349
<12349=12351,12350
<12352=12353
<12354=12355
<12356=12357
<12358=12359
<12360=12361
<12361=12363,12362
<12364=12365
<12365=12420,12366
<12366=12418,12367
<12367=12416,12412,12408,12404,12400,12396,12392,12388,12384,12380,12376,12372,12368
<12368=12369
<12369=12371,12370
<12372=12373
<12373=12375,12374
<12376=12377
<12377=12379,12378
<12380=12381
<12381=12383,12382
<12384=12385
<12385=12387,12386
<12388=12389
<12389=12391,12390
<12392=12393
<12393=12395,12394
<12396=12397
<12397=12399,12398
<12400=12401
<12401=12403,12402
<12404=12405
<12405=12407,12406
<12408=12409
<12409=12411,12410
<12412=12413
<12413=12415,12414
<12416=12417
<12418=12419
<12421=12422
<12422=12426,12423
<12423=12424
<12424=12425
<12426=12427
<12428=12429
<12429=12433,12430
<12430=12431
<12431=12432
<12433=12434
<12435=12436
<12436=12440,12437
<12437=12438
<12438=12439
<12440=12441
<12442=12443
<12443=12447,12444
<12444=12445
<12445=12446
<12447=12448
<12449=12757,12749,12746,12450
<12450=12742,12703,12680,12659,12634,12451
<12451=12630,12622,12619,12452
<12452=12610,12601,12590,12574,12563,12552,12534,12523,12516,12485,12474,12453
<12453=12468,12454
<12454=12455
<12455=12461,12456
<12456=12460,12457
<12457=12459,12458
<12461=12465,12462
<12462=12464,12463
<12465=12467,12466
<12468=12469
<12469=12471,12470
<12471=12473,12472
<12474=12475
<12475=12483,12476
<12476=12481,12479,12477
<12477=12478
<12479=12480
<12481=12482
<12483=12484
<12485=12494,12486
<12486=12487
<12487=12493,12488
<12488=12490,12489
<12490=12492,12491
<12494=12495
<12495=12511,12496
<12496=12508,12497
<12497=12505,12498
<12498=12502,12499
<12499=12501,12500
<12502=12504,12503
<12505=12507,12506
<12508=12510,12509
<12511=12513,12512
<12513=12515,12514
<12516=12517
<12517=12522,12521,12518
<12518=12520,12519
<12523=12524
<12524=12533,12532,12525
<12525=12531,12526
<12526=12530,12527
<12527=12529,12528
<12534=12536,12535
<12536=12537
<12537=12549,12538
<12538=12546,12539
<12539=12543,12540
<12540=12542,12541
<12543=12545,12544
<12546=12548,12547
<12549=12551,12550
<12552=12553
<12553=12562,12561,12554
<12554=12560,12555
<12555=12557,12556
<12557=12559,12558
<12563=12564
<12564=12573,12572,12565
<12565=12571,12566
<12566=12568,12567
<12568=12570,12569
<12574=12576,12575
<12576=12577
<12577=12585,12578
<12578=12582,12579
<12579=12581,12580
<12582=12584,12583
<12585=12589,12586
<12586=12588,12587
<12590=12591
<12591=12600,12599,12592
<12592=12598,12593
<12593=12597,12594
<12594=12596,12595
<12601=12602
<12602=12609,12608,12603
<12603=12607,12604
<12604=12606,12605
<12610=12611
<12611=12618,12617,12612
<12612=12616,12613
<12613=12615,12614
<12619=12621,12620
<12622=12623
<12623=12627,12624
<12624=12626,12625
<12627=12629,12628
<12630=12631
<12631=12633,12632
<12634=12655,12635
<12635=12638,12636
<12636=12637
<12638=12639
<12639=12653,12640
<12640=12651,12649,12647,12643,12641
<12641=12642
<12643=12644
<12644=12646,12645
<12647=12648
<12649=12650
<12651=12652
<12653=12654
<12655=12656
<12656=12658,12657
<12659=12660
<12660=12679,12661
<12661=12677,12662
<12662=12675,12673,12671,12669,12667,12665,12663
<12663=12664
<12665=12666
<12667=12668
<12669=12670
<12671=12672
<12673=12674
<12675=12676
<12677=12678
<12680=12681
<12681=12699,12682
<12682=12695,12693,12691,12689,12687,12685,12683
<12683=12684
<12685=12686
<12687=12688
<12689=12690
<12691=12692
<12693=12694
<12695=12696
<12696=12698,12697
<12699=12700
<12700=12702,12701
<12703=12738,12734,12731,12704
<12704=12721,12711,12705
<12705=12706
<12706=12708,12707
<12708=12710,12709
<12711=12712
<12712=12718,12713
<12713=12717,12714
<12714=12716,12715
<12718=12720,12719
<12721=12722
<12722=12728,12723
<12723=12727,12724
<12724=12726,12725
<12728=12730,12729
<12731=12733,12732
<12734=12735
<12735=12737,12736
<12738=12739
<12739=12741,12740
<12742=12743
<12743=12745,12744
<12746=12748,12747
<12749=12750
<12750=12754,12751
<12751=12753,12752
<12754=12756,12755
<12757=12758
<12758=12760,12759
<12761=12762
<12762=12775,12763
<12763=12774,12764
<12764=12772,12765
<12765=12766
<12766=12767
<12767=12769,12768
<12769=12771,12770
<12772=12773
<12776=12777
<12777=12790,12778
<12778=12789,12779
<12779=12787,12780
<12780=12781
<12781=12782
<12782=12784,12783
<12784=12786,12785
<12787=12788
<12791=12792
<12792=12805,12793
<12793=12804,12794
<12794=12802,12795
<12795=12796
<12796=12797
<12797=12799,12798
<12799=12801,12800
<12802=12803
<12806=12807
<12807=12820,12808
<12808=12819,12809
<12809=12817,12810
<12810=12811
<12811=12812
<12812=12814,12813
<12814=12816,12815
<12817=12818
<12821=12822
<12822=12824,12823
<12825=12832,12829,12826
<12826=12828,12827
<12829=12831,12830
<12832=12834,12833
<12835=13000,12994,12991,12836
<12836=12929,12912,12883,12866,12837
<12837=12862,12838
<12838=12845,12841,12839
<12839=12840
<12841=12842
<12842=12844,12843
<12845=12846
<12846=12860,12847
<12847=12858,12856,12854,12850,12848
<12848=12849
<12850=12851
<12851=12853,12852
<12854=12855
<12856=12857
<12858=12859
<12860=12861
<12862=12863
<12863=12865,12864
<12866=12867
<12867=12882,12868
<12868=12880,12869
<12869=12878,12872,12870
<12870=12871
<12872=12873
<12873=12875,12874
<12875=12877,12876
<12878=12879
<12880=12881
<12883=12908,12884
<12884=12891,12887,12885
<12885=12886
<12887=12888
<12888=12890,12889
<12891=12892
<12892=12906,12893
<12893=12904,12902,12900,12896,12894
<12894=12895
<12896=12897
<12897=12899,12898
<12900=12901
<12902=12903
<12904=12905
<12906=12907
<12908=12909
<12909=12911,12910
<12912=12913
<12913=12928,12914
<12914=12926,12915
<12915=12924,12918,12916
<12916=12917
<12918=12919
<12919=12921,12920
<12921=12923,12922
<12924=12925
<12926=12927
<12929=12977,12930
<12930=12960,12931
<12931=12956,12932
<12932=12939,12935,12933
<12933=12934
<12935=12936
<12936=12938,12937
<12939=12940
<12940=12954,12941
<12941=12952,12950,12948,12944,12942
<12942=12943
<12944=12945
<12945=12947,12946
<12948=12949
<12950=12951
<12952=12953
<12954=12955
<12956=12957
<12957=12959,12958
<12960=12961
<12961=12975,12962
<12962=12973,12965,12963
<12963=12964
<12965=12966
<12966=12972,12967
<12967=12969,12968
<12969=12971,12970
<12973=12974
<12975=12976
<12977=12978
<12978=12986,12979
<12979=12981,12980
<12981=12983,12982
<12983=12985,12984
<12986=12988,12987
<12988=12990,12989
<12991=12993,12992
<12994=12995
<12995=12999,12996
<12996=12998,12997
<13000=13001
<13001=13003,13002
<13004=13023,13005
<13005=13012,13008,13006
<13006=13007
<13008=13009
<13009=13011,13010
<13012=13013
<13013=13021,13014
<13014=13019,13017,13015
<13015=13016
<13017=13018
<13019=13020
<13021=13022
<13023=13024
<13024=13041,13025
<13025=13037,13026
<13026=13033,13031,13027
<13027=13028
<13028=13030,13029
<13031=13032
<13033=13034
<13034=13036,13035
<13037=13038
<13038=13040,13039
<13066=13081,13067
<13067=13077,13070,13068
<13068=13069
<13070=13073,13071
<13071=13072
<13073=13074
<13074=13076,13075
<13077=13078
<13078=13080,13079
<13081=13082
<13082=13086,13083
<13083=13085,13084
<13086=13088,13087
<13089=13090
<13090=13133,13091
<13091=13131,13092
<13092=13129,13127,13125,13123,13121,13117,13115,13113,13107,13103,13099,13097,13093
<13093=13094
<13094=13096,13095
<13097=13098
<13099=13100
<13100=13102,13101
<13103=13104
<13104=13106,13105
<13107=13108
<13108=13110,13109
<13110=13112,13111
<13113=13114
<13115=13116
<13117=13118
<13118=13120,13119
<13121=13122
<13123=13124
<13125=13126
<13127=13128
<13129=13130
<13131=13132
<13134=13183,13135
<13135=13181,13177,13176,13174,13170,13169,13167,13163,13162,13160,13156,13155,13153,13138,13136
<13136=13137
<13138=13139
<13139=13151,13140
<13140=13149,13147,13141
<13141=13142
<13142=13146,13143
<13143=13145,13144
<13147=13148
<13149=13150
<13151=13152
<13153=13154
<13156=13157
<13157=13159,13158
<13160=13161
<13163=13164
<13164=13166,13165
<13167=13168
<13170=13171
<13171=13173,13172
<13174=13175
<13177=13178
<13178=13180,13179
<13181=13182
<13183=13184
<13184=13186,13185
<13187=13248,13188
<13188=13246,13242,13241,13239,13235,13234,13232,13228,13226,13222,13221,13219,13215,13213,13209,13208,13206,13191,13189
<13189=13190
<13191=13192
<13192=13204,13193
<13193=13202,13200,13194
<13194=13195
<13195=13199,13196
<13196=13198,13197
<13200=13201
<13202=13203
<13204=13205
<13206=13207
<13209=13210
<13210=13212,13211
<13213=13214
<13215=13216
<13216=13218,13217
<13219=13220
<13222=13223
<13223=13225,13224
<13226=13227
<13228=13229
<13229=13231,13230
<13232=13233
<13235=13236
<13236=13238,13237
<13239=13240
<13242=13243
<13243=13245,13244
<13246=13247
<13248=13249
<13249=13251,13250
<13252=13253
<13253=13255,13254
<13256=13257
<13257=13259,13258
<13260=13261
<13261=13266,13265,13262
<13262=13264,13263
<13267=13268
<13268=13270,13269
<13271=13272
<13272=13274,13273
<13275=13276
<13276=13281,13280,13277
<13277=13279,13278
<13282=13291,13283
<13283=13290,13289,13284
<13284=13288,13285
<13285=13287,13286
<13291=13298,13297,13292
<13292=13296,13293
<13293=13295,13294
<13299=13308,13300
<13300=13307,13306,13301
<13301=13305,13302
<13302=13304,13303
<13308=13315,13314,13309
<13309=13313,13310
<13310=13312,13311
<13316=13325,13317
<13317=13324,13323,13318
<13318=13322,13319
<13319=13321,13320
<13325=13332,13331,13326
<13326=13330,13327
<13327=13329,13328
<13333=13342,13334
<13334=13341,13340,13335
<13335=13339,13336
<13336=13338,13337
<13342=13349,13348,13343
<13343=13347,13344
<13344=13346,13345
<13350=13354,13351
<13351=13353,13352
<13354=13356,13355
<13484=13490,13489,13485
<13485=13486
<13486=13488,13487
<13490=13491
<13491=13492
<13492=13500,13493
<13493=13498,13496,13494
<13494=13495
<13496=13497
<13498=13499
<13500=13501
<13508=13514,13513,13509
<13509=13510
<13510=13512,13511
<13514=14205,14196,14187,14178,14174,14165,14148,14138,14134,14119,14104,14089,14074,14067,14044,13553,13546,13539,13532,13525,13515
<13515=13523,13516
<13516=13517
<13517=13521,13518
<13518=13519
<13519=13520
<13521=13522
<13523=13524
<13525=13526
<13526=13530,13527
<13527=13528
<13528=13529
<13530=13531
<13532=13533
<13533=13537,13534
<13534=13535
<13535=13536
<13537=13538
<13539=13540
<13540=13544,13541
<13541=13542
<13542=13543
<13544=13545
<13546=13547
<13547=13551,13548
<13548=13549
<13549=13550
<13551=13552
<13553=14040,14036,14033,13554
<13554=14029,13986,13963,13566,13555
<13555=13557,13556
<13557=13558
<13558=13562,13559
<13559=13560
<13560=13561
<13562=13563
<13563=13565,13564
<13566=13959,13955,13952,13567
<13567=13948,13929,13922,13900,13876,13872,13865,13857,13607,13601,13590,13568
<13568=13584,13569
<13569=13570
<13570=13571
<13571=13577,13572
<13572=13576,13573
<13573=13575,13574
<13577=13581,13578
<13578=13580,13579
<13581=13583,13582
<13584=13585
<13585=13587,13586
<13587=13589,13588
<13590=13591
<13591=13599,13592
<13592=13597,13595,13593
<13593=13594
<13595=13596
<13597=13598
<13599=13600
<13601=13603,13602
<13603=13604
<13604=13606,13605
<13607=13853,13847,13844,13608
<13608=13837,13830,13823,13636,13630,13626,13609
<13609=13610
<13610=13624,13611
<13611=13622,13620,13618,13616,13614,13612
<13612=13613
<13614=13615
<13616=13617
<13618=13619
<13620=13621
<13622=13623
<13624=13625
<13626=13627
<13627=13629,13628
<13630=13632,13631
<13632=13633
<13633=13635,13634
<13636=13809,13785,13637
<13637=13638
<13638=13779,13741,13639
<13639=13640
<13640=13735,13697,13641
<13641=13642
<13642=13685,13643
<13643=13644
<13644=13645
<13645=13681,13646
<13646=13679,13677,13669,13661,13657,13653,13649,13647
<13647=13648
<13649=13650
<13650=13652,13651
<13653=13654
<13654=13656,13655
<13657=13658
<13658=13660,13659
<13661=13662
<13662=13666,13663
<13663=13665,13664
<13666=13668,13667
<13669=13670
<13670=13674,13671
<13671=13673,13672
<13674=13676,13675
<13677=13678
<13679=13680
<13681=13682
<13682=13684,13683
<13685=13686
<13686=13692,13687
<13687=13689,13688
<13689=13691,13690
<13692=13694,13693
<13694=13696,13695
<13697=13698
<13698=13699
<13699=13733,13700
<13700=13731,13729,13721,13713,13709,13705,13701
<13701=13702
<13702=13704,13703
<13705=13706
<13706=13708,13707
<13709=13710
<13710=13712,13711
<13713=13714
<13714=13718,13715
<13715=13717,13716
<13718=13720,13719
<13721=13722
<13722=13726,13723
<13723=13725,13724
<13726=13728,13727
<13729=13730
<13731=13732
<13733=13734
<13735=13736
<13736=13738,13737
<13738=13740,13739
<13741=13742
<13742=13743
<13743=13777,13744
<13744=13775,13773,13765,13757,13753,13749,13745
<13745=13746
<13746=13748,13747
<13749=13750
<13750=13752,13751
<13753=13754
<13754=13756,13755
<13757=13758
<13758=13762,13759
<13759=13761,13760
<13762=13764,13763
<13765=13766
<13766=13770,13767
<13767=13769,13768
<13770=13772,13771
<13773=13774
<13775=13776
<13777=13778
<13779=13780
<13780=13782,13781
<13782=13784,13783
<13785=13786
<13786=13787
<13787=13807,13788
<13788=13805,13803,13801,13797,13793,13789
<13789=13790
<13790=13792,13791
<13793=13794
<13794=13796,13795
<13797=13798
<13798=13800,13799
<13801=13802
<13803=13804
<13805=13806
<13807=13808
<13809=13810
<13810=13818,13811
<13811=13815,13812
<13812=13814,13813
<13815=13817,13816
<13818=13820,13819
<13820=13822,13821
<13823=13824
<13824=13829,13828,13825
<13825=13827,13826
<13830=13831
<13831=13836,13835,13832
<13832=13834,13833
<13837=13838
<13838=13843,13842,13839
<13839=13841,13840
<13844=13846,13845
<13847=13848
<13848=13852,13849
<13849=13851,13850
<13853=13854
<13854=13856,13855
<13857=13858
<13858=13864,13859
<13859=13863,13860
<13860=13862,13861
<13865=13866
<13866=13871,13870,13867
<13867=13869,13868
<13872=13873
<13873=13875,13874
<13876=13878,13877
<13878=13879
<13879=13895,13880
<13880=13894,13881
<13881=13887,13882
<13882=13886,13883
<13883=13885,13884
<13887=13891,13888
<13888=13890,13889
<13891=13893,13892
<13895=13897,13896
<13897=13899,13898
<13900=13916,13901
<13901=13908,13902
<13902=13904,13903
<13904=13905
<13905=13907,13906
<13908=13909
<13909=13915,13910
<13910=13912,13911
<13912=13914,13913
<13916=13917
<13917=13919,13918
<13919=13921,13920
<13922=13923
<13923=13928,13927,13924
<13924=13926,13925
<13929=13930
<13930=13946,13931
<13931=13944,13942,13940,13938,13936,13934,13932
<13932=13933
<13934=13935
<13936=13937
<13938=13939
<13940=13941
<13942=13943
<13944=13945
<13946=13947
<13948=13949
<13949=13951,13950
<13952=13954,13953
<13955=13956
<13956=13958,13957
<13959=13960
<13960=13962,13961
<13963=13964
<13964=13982,13965
<13965=13978,13976,13974,13972,13970,13968,13966
<13966=13967
<13968=13969
<13970=13971
<13972=13973
<13974=13975
<13976=13977
<13978=13979
<13979=13981,13980
<13982=13983
<13983=13985,13984
<13986=14025,14021,14018,13987
<13987=14006,13994,13988
<13988=13989
<13989=13991,13990
<13991=13993,13992
<13994=13995
<13995=14003,13996
<13996=14002,13997
<13997=14001,13998
<13998=14000,13999
<14003=14005,14004
<14006=14007
<14007=14015,14008
<14008=14014,14009
<14009=14013,14010
<14010=14012,14011
<14015=14017,14016
<14018=14020,14019
<14021=14022
<14022=14024,14023
<14025=14026
<14026=14028,14027
<14029=14030
<14030=14032,14031
<14033=14035,14034
<14036=14037
<14037=14039,14038
<14040=14041
<14041=14043,14042
<14044=14055,14045
<14045=14046
<14046=14047
<14047=14054,14048
<14048=14052,14049
<14049=14050
<14050=14051
<14052=14053
<14055=14056
<14056=14062,14057
<14057=14059,14058
<14059=14061,14060
<14062=14064,14063
<14064=14066,14065
<14067=14068
<14068=14073,14072,14069
<14069=14071,14070
<14074=14075
<14075=14088,14076
<14076=14087,14077
<14077=14085,14078
<14078=14079
<14079=14080
<14080=14082,14081
<14082=14084,14083
<14085=14086
<14089=14090
<14090=14103,14091
<14091=14102,14092
<14092=14100,14093
<14093=14094
<14094=14095
<14095=14097,14096
<14097=14099,14098
<14100=14101
<14104=14105
<14105=14118,14106
<14106=14117,14107
<14107=14115,14108
<14108=14109
<14109=14110
<14110=14112,14111
<14112=14114,14113
<14115=14116
<14119=14120
<14120=14133,14121
<14121=14132,14122
<14122=14130,14123
<14123=14124
<14124=14125
<14125=14127,14126
<14127=14129,14128
<14130=14131
<14134=14135
<14135=14137,14136
<14138=14145,14142,14139
<14139=14141,14140
<14142=14144,14143
<14145=14147,14146
<14148=14157,14149
<14149=14156,14155,14150
<14150=14154,14151
<14151=14153,14152
<14157=14164,14163,14158
<14158=14162,14159
<14159=14161,14160
<14165=14166
<14166=14173,14172,14167
<14167=14171,14168
<14168=14170,14169
<14174=14175
<14175=14177,14176
<14178=14179
<14179=14186,14185,14180
<14180=14184,14181
<14181=14183,14182
<14187=14188
<14188=14195,14194,14189
<14189=14193,14190
<14190=14192,14191
<14196=14197
<14197=14204,14203,14198
<14198=14202,14199
<14199=14201,14200
<14205=14206
<14206=14213,14212,14207
<14207=14211,14208
<14208=14210,14209
<14284=14290,14289,14285
<14285=14286
<14286=14288,14287
<14290=14291
<14291=14292
<14292=14300,14293
<14293=14298,14296,14294
<14294=14295
<14296=14297
<14298=14299
<14300=14301
<14308=14314,14313,14309
<14309=14310
<14310=14312,14311
<14314=14647,14638,14629,14620,14616,14607,14590,14580,14576,14561,14546,14531,14516,14343,14336,14329,14322,14315
<14315=14316
<14316=14320,14317
<14317=14318
<14318=14319
<14320=14321
<14322=14323
<14323=14327,14324
<14324=14325
<14325=14326
<14327=14328
<14329=14330
<14330=14334,14331
<14331=14332
<14332=14333
<14334=14335
<14336=14337
<14337=14341,14338
<14338=14339
<14339=14340
<14341=14342
<14343=14512,14508,14505,14344
<14344=14501,14458,14435,14356,14345
<14345=14347,14346
<14347=14348
<14348=14352,14349
<14349=14350
<14350=14351
<14352=14353
<14353=14355,14354
<14356=14431,14427,14424,14357
<14357=14405,14401,14397,14389,14358
<14358=14385,14379,14376,14359
<14359=14360
<14360=14361
<14361=14369,14362
<14362=14364,14363
<14364=14366,14365
<14366=14368,14367
<14369=14371,14370
<14371=14373,14372
<14373=14375,14374
<14376=14378,14377
<14379=14380
<14380=14384,14381
<14381=14383,14382
<14385=14386
<14386=14388,14387
<14389=14390
<14390=14396,14391
<14391=14395,14392
<14392=14394,14393
<14397=14398
<14398=14400,14399
<14401=14402
<14402=14404,14403
<14405=14406
<14406=14422,14407
<14407=14420,14418,14416,14414,14412,14410,14408
<14408=14409
<14410=14411
<14412=14413
<14414=14415
<14416=14417
<14418=14419
<14420=14421
<14422=14423
<14424=14426,14425
<14427=14428
<14428=14430,14429
<14431=14432
<14432=14434,14433
<14435=14436
<14436=14454,14437
<14437=14450,14448,14446,14444,14442,14440,14438
<14438=14439
<14440=14441
<14442=14443
<14444=14445
<14446=14447
<14448=14449
<14450=14451
<14451=14453,14452
<14454=14455
<14455=14457,14456
<14458=14497,14493,14490,14459
<14459=14478,14466,14460
<14460=14461
<14461=14463,14462
<14463=14465,14464
<14466=14467
<14467=14475,14468
<14468=14474,14469
<14469=14473,14470
<14470=14472,14471
<14475=14477,14476
<14478=14479
<14479=14487,14480
<14480=14486,14481
<14481=14485,14482
<14482=14484,14483
<14487=14489,14488
<14490=14492,14491
<14493=14494
<14494=14496,14495
<14497=14498
<14498=14500,14499
<14501=14502
<14502=14504,14503
<14505=14507,14506
<14508=14509
<14509=14511,14510
<14512=14513
<14513=14515,14514
<14516=14517
<14517=14530,14518
<14518=14529,14519
<14519=14527,14520
<14520=14521
<14521=14522
<14522=14524,14523
<14524=14526,14525
<14527=14528
<14531=14532
<14532=14545,14533
<14533=14544,14534
<14534=14542,14535
<14535=14536
<14536=14537
<14537=14539,14538
<14539=14541,14540
<14542=14543
<14546=14547
<14547=14560,14548
<14548=14559,14549
<14549=14557,14550
<14550=14551
<14551=14552
<14552=14554,14553
<14554=14556,14555
<14557=14558
<14561=14562
<14562=14575,14563
<14563=14574,14564
<14564=14572,14565
<14565=14566
<14566=14567
<14567=14569,14568
<14569=14571,14570
<14572=14573
<14576=14577
<14577=14579,14578
<14580=14587,14584,14581
<14581=14583,14582
<14584=14586,14585
<14587=14589,14588
<14590=14599,14591
<14591=14598,14597,14592
<14592=14596,14593
<14593=14595,14594
<14599=14606,14605,14600
<14600=14604,14601
<14601=14603,14602
<14607=14608
<14608=14615,14614,14609
<14609=14613,14610
<14610=14612,14611
<14616=14617
<14617=14619,14618
<14620=14621
<14621=14628,14627,14622
<14622=14626,14623
<14623=14625,14624
<14629=14630
<14630=14637,14636,14631
<14631=14635,14632
<14632=14634,14633
<14638=14639
<14639=14646,14645,14640
<14640=14644,14641
<14641=14643,14642
<14647=14648
<14648=14655,14654,14649
<14649=14653,14650
<14650=14652,14651
<14709=14715,14714,14710
<14710=14711
<14711=14713,14712
<14715=14716
<14716=14717
<14717=14725,14718
<14718=14723,14721,14719
<14719=14720
<14721=14722
<14723=14724
<14725=14726
<14733=14739,14738,14734
<14734=14735
<14735=14737,14736
<14739=15091,15082,15073,15064,15060,15051,15034,15024,15020,15005,14990,14975,14960,14768,14761,14754,14747,14740
<14740=14741
<14741=14745,14742
<14742=14743
<14743=14744
<14745=14746
<14747=14748
<14748=14752,14749
<14749=14750
<14750=14751
<14752=14753
<14754=14755
<14755=14759,14756
<14756=14757
<14757=14758
<14759=14760
<14761=14762
<14762=14766,14763
<14763=14764
<14764=14765
<14766=14767
<14768=14956,14952,14949,14769
<14769=14945,14902,14879,14781,14770
<14770=14772,14771
<14772=14773
<14773=14777,14774
<14774=14775
<14775=14776
<14777=14778
<14778=14780,14779
<14781=14875,14871,14868,14782
<14782=14849,14845,14841,14833,14783
<14783=14829,14823,14820,14784
<14784=14785
<14785=14786
<14786=14818,14787
<14787=14816,14814,14806,14798,14788
<14788=14789
<14789=14797,14790
<14790=14792,14791
<14792=14794,14793
<14794=14796,14795
<14798=14799
<14799=14803,14800
<14800=14802,14801
<14803=14805,14804
<14806=14807
<14807=14811,14808
<14808=14810,14809
<14811=14813,14812
<14814=14815
<14816=14817
<14818=14819
<14820=14822,14821
<14823=14824
<14824=14828,14825
<14825=14827,14826
<14829=14830
<14830=14832,14831
<14833=14834
<14834=14840,14835
<14835=14839,14836
<14836=14838,14837
<14841=14842
<14842=14844,14843
<14845=14846
<14846=14848,14847
<14849=14850
<14850=14866,14851
<14851=14864,14862,14860,14858,14856,14854,14852
<14852=14853
<14854=14855
<14856=14857
<14858=14859
<14860=14861
<14862=14863
<14864=14865
<14866=14867
<14868=14870,14869
<14871=14872
<14872=14874,14873
<14875=14876
<14876=14878,14877
<14879=14880
<14880=14898,14881
<14881=14894,14892,14890,14888,14886,14884,14882
<14882=14883
<14884=14885
<14886=14887
<14888=14889
<14890=14891
<14892=14893
<14894=14895
<14895=14897,14896
<14898=14899
<14899=14901,14900
<14902=14941,14937,14934,14903
<14903=14922,14910,14904
<14904=14905
<14905=14907,14906
<14907=14909,14908
<14910=14911
<14911=14919,14912
<14912=14918,14913
<14913=14917,14914
<14914=14916,14915
<14919=14921,14920
<14922=14923
<14923=14931,14924
<14924=14930,14925
<14925=14929,14926
<14926=14928,14927
<14931=14933,14932
<14934=14936,14935
<14937=14938
<14938=14940,14939
<14941=14942
<14942=14944,14943
<14945=14946
<14946=14948,14947
<14949=14951,14950
<14952=14953
<14953=14955,14954
<14956=14957
<14957=14959,14958
<14960=14961
<14961=14974,14962
<14962=14973,14963
<14963=14971,14964
<14964=14965
<14965=14966
<14966=14968,14967
<14968=14970,14969
<14971=14972
<14975=14976
<14976=14989,14977
<14977=14988,14978
<14978=14986,14979
<14979=14980
<14980=14981
<14981=14983,14982
<14983=14985,14984
<14986=14987
<14990=14991
<14991=15004,14992
<14992=15003,14993
<14993=15001,14994
<14994=14995
<14995=14996
<14996=14998,14997
<14998=15000,14999
<15001=15002
<15005=15006
<15006=15019,15007
<15007=15018,15008
<15008=15016,15009
<15009=15010
<15010=15011
<15011=15013,15012
<15013=15015,15014
<15016=15017
<15020=15021
<15021=15023,15022
<15024=15031,15028,15025
<15025=15027,15026
<15028=15030,15029
<15031=15033,15032
<15034=15043,15035
<15035=15042,15041,15036
<15036=15040,15037
<15037=15039,15038
<15043=15050,15049,15044
<15044=15048,15045
<15045=15047,15046
<15051=15052
<15052=15059,15058,15053
<15053=15057,15054
<15054=15056,15055
<15060=15061
<15061=15063,15062
<15064=15065
<15065=15072,15071,15066
<15066=15070,15067
<15067=15069,15068
<15073=15074
<15074=15081,15080,15075
<15075=15079,15076
<15076=15078,15077
<15082=15083
<15083=15090,15089,15084
<15084=15088,15085
<15085=15087,15086
<15091=15092
<15092=15099,15098,15093
<15093=15097,15094
<15094=15096,15095
<15150=15156,15155,15151
<15151=15152
<15152=15154,15153
<15156=15157
<15157=15158
<15158=15166,15159
<15159=15164,15162,15160
<15160=15161
<15162=15163
<15164=15165
<15166=15167
<15174=15180,15179,15175
<15175=15176
<15176=15178,15177
<15180=15532,15523,15514,15505,15501,15492,15475,15465,15461,15446,15431,15416,15401,15209,15202,15195,15188,15181
<15181=15182
<15182=15186,15183
<15183=15184
<15184=15185
<15186=15187
<15188=15189
<15189=15193,15190
<15190=15191
<15191=15192
<15193=15194
<15195=15196
<15196=15200,15197
<15197=15198
<15198=15199
<15200=15201
<15202=15203
<15203=15207,15204
<15204=15205
<15205=15206
<15207=15208
<15209=15397,15393,15390,15210
<15210=15386,15343,15320,15222,15211
<15211=15213,15212
<15213=15214
<15214=15218,15215
<15215=15216
<15216=15217
<15218=15219
<15219=15221,15220
<15222=15316,15312,15309,15223
<15223=15290,15286,15282,15274,15224
<15224=15270,15264,15261,15225
<15225=15226
<15226=15227
<15227=15259,15228
<15228=15257,15255,15247,15239,15229
<15229=15230
<15230=15238,15231
<15231=15233,15232
<15233=15235,15234
<15235=15237,15236
<15239=15240
<15240=15244,15241
<15241=15243,15242
<15244=15246,15245
<15247=15248
<15248=15252,15249
<15249=15251,15250
<15252=15254,15253
<15255=15256
<15257=15258
<15259=15260
<15261=15263,15262
<15264=15265
<15265=15269,15266
<15266=15268,15267
<15270=15271
<15271=15273,15272
<15274=15275
<15275=15281,15276
<15276=15280,15277
<15277=15279,15278
<15282=15283
<15283=15285,15284
<15286=15287
<15287=15289,15288
<15290=15291
<15291=15307,15292
<15292=15305,15303,15301,15299,15297,15295,15293
<15293=15294
<15295=15296
<15297=15298
<15299=15300
<15301=15302
<15303=15304
<15305=15306
<15307=15308
<15309=15311,15310
<15312=15313
<15313=15315,15314
<15316=15317
<15317=15319,15318
<15320=15321
<15321=15339,15322
<15322=15335,15333,15331,15329,15327,15325,15323
<15323=15324
<15325=15326
<15327=15328
<15329=15330
<15331=15332
<15333=15334
<15335=15336
<15336=15338,15337
<15339=15340
<15340=15342,15341
<15343=15382,15378,15375,15344
<15344=15363,15351,15345
<15345=15346
<15346=15348,15347
<15348=15350,15349
<15351=15352
<15352=15360,15353
<15353=15359,15354
<15354=15358,15355
<15355=15357,15356
<15360=15362,15361
<15363=15364
<15364=15372,15365
<15365=15371,15366
<15366=15370,15367
<15367=15369,15368
<15372=15374,15373
<15375=15377,15376
<15378=15379
<15379=15381,15380
<15382=15383
<15383=15385,15384
<15386=15387
<15387=15389,15388
<15390=15392,15391
<15393=15394
<15394=15396,15395
<15397=15398
<15398=15400,15399
<15401=15402
<15402=15415,15403
<15403=15414,15404
<15404=15412,15405
<15405=15406
<15406=15407
<15407=15409,15408
<15409=15411,15410
<15412=15413
<15416=15417
<15417=15430,15418
<15418=15429,15419
<15419=15427,15420
<15420=15421
<15421=15422
<15422=15424,15423
<15424=15426,15425
<15427=15428
<15431=15432
<15432=15445,15433
<15433=15444,15434
<15434=15442,15435
<15435=15436
<15436=15437
<15437=15439,15438
<15439=15441,15440
<15442=15443
<15446=15447
<15447=15460,15448
<15448=15459,15449
<15449=15457,15450
<15450=15451
<15451=15452
<15452=15454,15453
<15454=15456,15455
<15457=15458
<15461=15462
<15462=15464,15463
<15465=15472,15469,15466
<15466=15468,15467
<15469=15471,15470
<15472=15474,15473
<15475=15484,15476
<15476=15483,15482,15477
<15477=15481,15478
<15478=15480,15479
<15484=15491,15490,15485
<15485=15489,15486
<15486=15488,15487
<15492=15493
<15493=15500,15499,15494
<15494=15498,15495
<15495=15497,15496
<15501=15502
<15502=15504,15503
<15505=15506
<15506=15513,15512,15507
<15507=15511,15508
<15508=15510,15509
<15514=15515
<15515=15522,15521,15516
<15516=15520,15517
<15517=15519,15518
<15523=15524
<15524=15531,15530,15525
<15525=15529,15526
<15526=15528,15527
<15532=15533
<15533=15540,15539,15534
<15534=15538,15535
<15535=15537,15536
<15591=15597,15596,15592
<15592=15593
<15593=15595,15594
<15597=15598
<15598=15599
<15599=15607,15600
<15600=15605,15603,15601
<15601=15602
<15603=15604
<15605=15606
<15607=15608
<15615=15621,15620,15616
<15616=15617
<15617=15619,15618
<15621=16011,16002,15993,15984,15980,15971,15954,15944,15940,15925,15910,15895,15880,15871,15851,15657,15650,15643,15636,15629,15622
<15622=15623
<15623=15627,15624
<15624=15625
<15625=15626
<15627=15628
<15629=15630
<15630=15634,15631
<15631=15632
<15632=15633
<15634=15635
<15636=15637
<15637=15641,15638
<15638=15639
<15639=15640
<15641=15642
<15643=15644
<15644=15648,15645
<15645=15646
<15646=15647
<15648=15649
<15650=15651
<15651=15655,15652
<15652=15653
<15653=15654
<15655=15656
<15657=15847,15843,15840,15658
<15658=15836,15793,15770,15670,15659
<15659=15661,15660
<15661=15662
<15662=15666,15663
<15663=15664
<15664=15665
<15666=15667
<15667=15669,15668
<15670=15766,15762,15759,15671
<15671=15740,15736,15732,15724,15672
<15672=15720,15714,15711,15673
<15673=15674
<15674=15675
<15675=15709,15676
<15676=15707,15705,15697,15689,15679,15677
<15677=15678
<15679=15680
<15680=15688,15681
<15681=15683,15682
<15683=15685,15684
<15685=15687,15686
<15689=15690
<15690=15694,15691
<15691=15693,15692
<15694=15696,15695
<15697=15698
<15698=15702,15699
<15699=15701,15700
<15702=15704,15703
<15705=15706
<15707=15708
<15709=15710
<15711=15713,15712
<15714=15715
<15715=15719,15716
<15716=15718,15717
<15720=15721
<15721=15723,15722
<15724=15725
<15725=15731,15726
<15726=15730,15727
<15727=15729,15728
<15732=15733
<15733=15735,15734
<15736=15737
<15737=15739,15738
<15740=15741
<15741=15757,15742
<15742=15755,15753,15751,15749,15747,15745,15743
<15743=15744
<15745=15746
<15747=15748
<15749=15750
<15751=15752
<15753=15754
<15755=15756
<15757=15758
<15759=15761,15760
<15762=15763
<15763=15765,15764
<15766=15767
<15767=15769,15768
<15770=15771
<15771=15789,15772
<15772=15785,15783,15781,15779,15777,15775,15773
<15773=15774
<15775=15776
<15777=15778
<15779=15780
<15781=15782
<15783=15784
<15785=15786
<15786=15788,15787
<15789=15790
<15790=15792,15791
<15793=15832,15828,15825,15794
<15794=15813,15801,15795
<15795=15796
<15796=15798,15797
<15798=15800,15799
<15801=15802
<15802=15810,15803
<15803=15809,15804
<15804=15808,15805
<15805=15807,15806
<15810=15812,15811
<15813=15814
<15814=15822,15815
<15815=15821,15816
<15816=15820,15817
<15817=15819,15818
<15822=15824,15823
<15825=15827,15826
<15828=15829
<15829=15831,15830
<15832=15833
<15833=15835,15834
<15836=15837
<15837=15839,15838
<15840=15842,15841
<15843=15844
<15844=15846,15845
<15847=15848
<15848=15850,15849
<15851=15852
<15852=15870,15869,15853
<15853=15868,15854
<15854=15867,15855
<15855=15865,15856
<15856=15861,15857
<15857=15858
<15858=15860,15859
<15861=15862
<15862=15864,15863
<15865=15866
<15871=15872
<15872=15879,15878,15873
<15873=15877,15874
<15874=15876,15875
<15880=15881
<15881=15894,15882
<15882=15893,15883
<15883=15891,15884
<15884=15885
<15885=15886
<15886=15888,15887
<15888=15890,15889
<15891=15892
<15895=15896
<15896=15909,15897
<15897=15908,15898
<15898=15906,15899
<15899=15900
<15900=15901
<15901=15903,15902
<15903=15905,15904
<15906=15907
<15910=15911
<15911=15924,15912
<15912=15923,15913
<15913=15921,15914
<15914=15915
<15915=15916
<15916=15918,15917
<15918=15920,15919
<15921=15922
<15925=15926
<15926=15939,15927
<15927=15938,15928
<15928=15936,15929
<15929=15930
<15930=15931
<15931=15933,15932
<15933=15935,15934
<15936=15937
<15940=15941
<15941=15943,15942
<15944=15951,15948,15945
<15945=15947,15946
<15948=15950,15949
<15951=15953,15952
<15954=15963,15955
<15955=15962,15961,15956
<15956=15960,15957
<15957=15959,15958
<15963=15970,15969,15964
<15964=15968,15965
<15965=15967,15966
<15971=15972
<15972=15979,15978,15973
<15973=15977,15974
<15974=15976,15975
<15980=15981
<15981=15983,15982
<15984=15985
<15985=15992,15991,15986
<15986=15990,15987
<15987=15989,15988
<15993=15994
<15994=16001,16000,15995
<15995=15999,15996
<15996=15998,15997
<16002=16003
<16003=16010,16009,16004
<16004=16008,16005
<16005=16007,16006
<16011=16012
<16012=16019,16018,16013
<16013=16017,16014
<16014=16016,16015
<16074=16080,16079,16075
<16075=16076
<16076=16078,16077
<16080=16081
<16081=16082
<16082=16090,16083
<16083=16088,16086,16084
<16084=16085
<16086=16087
<16088=16089
<16090=16091
<16098=16104,16103,16099
<16099=16100
<16100=16102,16101
<16104=16587,16578,16569,16560,16556,16547,16530,16520,16516,16501,16486,16471,16456,16133,16126,16119,16112,16105
<16105=16106
<16106=16110,16107
<16107=16108
<16108=16109
<16110=16111
<16112=16113
<16113=16117,16114
<16114=16115
<16115=16116
<16117=16118
<16119=16120
<16120=16124,16121
<16121=16122
<16122=16123
<16124=16125
<16126=16127
<16127=16131,16128
<16128=16129
<16129=16130
<16131=16132
<16133=16452,16448,16445,16134
<16134=16441,16398,16375,16146,16135
<16135=16137,16136
<16137=16138
<16138=16142,16139
<16139=16140
<16140=16141
<16142=16143
<16143=16145,16144
<16146=16371,16367,16364,16147
<16147=16360,16341,16317,16310,16288,16284,16276,16181,16170,16148
<16148=16164,16149
<16149=16150
<16150=16151
<16151=16157,16152
<16152=16156,16153
<16153=16155,16154
<16157=16161,16158
<16158=16160,16159
<16161=16163,16162
<16164=16165
<16165=16167,16166
<16167=16169,16168
<16170=16171
<16171=16179,16172
<16172=16177,16175,16173
<16173=16174
<16175=16176
<16177=16178
<16179=16180
<16181=16272,16266,16263,16182
<16182=16256,16249,16183
<16183=16230,16184
<16184=16185
<16185=16226,16198,16186
<16186=16187
<16187=16188
<16188=16189
<16189=16191,16190
<16191=16193,16192
<16193=16195,16194
<16195=16197,16196
<16198=16199
<16199=16222,16221,16200
<16200=16201
<16201=16202
<16202=16203
<16203=16219,16204
<16204=16217,16215,16213,16211,16207,16205
<16205=16206
<16207=16208
<16208=16210,16209
<16211=16212
<16213=16214
<16215=16216
<16217=16218
<16219=16220
<16222=16223
<16223=16225,16224
<16226=16227
<16227=16229,16228
<16230=16231
<16231=16247,16232
<16232=16245,16243,16241,16237,16233
<16233=16234
<16234=16236,16235
<16237=16238
<16238=16240,16239
<16241=16242
<16243=16244
<16245=16246
<16247=16248
<16249=16250
<16250=16255,16254,16251
<16251=16253,16252
<16256=16257
<16257=16262,16261,16258
<16258=16260,16259
<16263=16265,16264
<16266=16267
<16267=16271,16268
<16268=16270,16269
<16272=16273
<16273=16275,16274
<16276=16277
<16277=16283,16278
<16278=16282,16279
<16279=16281,16280
<16284=16285
<16285=16287,16286
<16288=16304,16289
<16289=16296,16290
<16290=16292,16291
<16292=16293
<16293=16295,16294
<16296=16297
<16297=16303,16298
<16298=16300,16299
<16300=16302,16301
<16304=16305
<16305=16307,16306
<16307=16309,16308
<16310=16311
<16311=16316,16315,16312
<16312=16314,16313
<16317=16319,16318
<16319=16320
<16320=16336,16321
<16321=16335,16322
<16322=16328,16323
<16323=16327,16324
<16324=16326,16325
<16328=16332,16329
<16329=16331,16330
<16332=16334,16333
<16336=16338,16337
<16338=16340,16339
<16341=16342
<16342=16358,16343
<16343=16356,16354,16352,16350,16348,16346,16344
<16344=16345
<16346=16347
<16348=16349
<16350=16351
<16352=16353
<16354=16355
<16356=16357
<16358=16359
<16360=16361
<16361=16363,16362
<16364=16366,16365
<16367=16368
<16368=16370,16369
<16371=16372
<16372=16374,16373
<16375=16376
<16376=16394,16377
<16377=16390,16388,16386,16384,16382,16380,16378
<16378=16379
<16380=16381
<16382=16383
<16384=16385
<16386=16387
<16388=16389
<16390=16391
<16391=16393,16392
<16394=16395
<16395=16397,16396
<16398=16437,16433,16430,16399
<16399=16418,16406,16400
<16400=16401
<16401=16403,16402
<16403=16405,16404
<16406=16407
<16407=16415,16408
<16408=16414,16409
<16409=16413,16410
<16410=16412,16411
<16415=16417,16416
<16418=16419
<16419=16427,16420
<16420=16426,16421
<16421=16425,16422
<16422=16424,16423
<16427=16429,16428
<16430=16432,16431
<16433=16434
<16434=16436,16435
<16437=16438
<16438=16440,16439
<16441=16442
<16442=16444,16443
<16445=16447,16446
<16448=16449
<16449=16451,16450
<16452=16453
<16453=16455,16454
<16456=16457
<16457=16470,16458
<16458=16469,16459
<16459=16467,16460
<16460=16461
<16461=16462
<16462=16464,16463
<16464=16466,16465
<16467=16468
<16471=16472
<16472=16485,16473
<16473=16484,16474
<16474=16482,16475
<16475=16476
<16476=16477
<16477=16479,16478
<16479=16481,16480
<16482=16483
<16486=16487
<16487=16500,16488
<16488=16499,16489
<16489=16497,16490
<16490=16491
<16491=16492
<16492=16494,16493
<16494=16496,16495
<16497=16498
<16501=16502
<16502=16515,16503
<16503=16514,16504
<16504=16512,16505
<16505=16506
<16506=16507
<16507=16509,16508
<16509=16511,16510
<16512=16513
<16516=16517
<16517=16519,16518
<16520=16527,16524,16521
<16521=16523,16522
<16524=16526,16525
<16527=16529,16528
<16530=16539,16531
<16531=16538,16537,16532
<16532=16536,16533
<16533=16535,16534
<16539=16546,16545,16540
<16540=16544,16541
<16541=16543,16542
<16547=16548
<16548=16555,16554,16549
<16549=16553,16550
<16550=16552,16551
<16556=16557
<16557=16559,16558
<16560=16561
<16561=16568,16567,16562
<16562=16566,16563
<16563=16565,16564
<16569=16570
<16570=16577,16576,16571
<16571=16575,16572
<16572=16574,16573
<16578=16579
<16579=16586,16585,16580
<16580=16584,16581
<16581=16583,16582
<16587=16588
<16588=16595,16594,16589
<16589=16593,16590
<16590=16592,16591
<16659=16665,16664,16660
<16660=16661
<16661=16663,16662
<16665=16666
<16666=16667
<16667=16675,16668
<16668=16673,16671,16669
<16669=16670
<16671=16672
<16673=16674
<16675=16676
<16683=16689,16688,16684
<16684=16685
<16685=16687,16686
<16689=17026,17017,17008,16999,16995,16986,16969,16959,16955,16940,16925,16910,16895,16718,16711,16704,16697,16690
<16690=16691
<16691=16695,16692
<16692=16693
<16693=16694
<16695=16696
<16697=16698
<16698=16702,16699
<16699=16700
<16700=16701
<16702=16703
<16704=16705
<16705=16709,16706
<16706=16707
<16707=16708
<16709=16710
<16711=16712
<16712=16716,16713
<16713=16714
<16714=16715
<16716=16717
<16718=16891,16887,16884,16719
<16719=16880,16837,16814,16731,16720
<16720=16722,16721
<16722=16723
<16723=16727,16724
<16724=16725
<16725=16726
<16727=16728
<16728=16730,16729
<16731=16810,16806,16803,16732
<16732=16799,16780,16776,16768,16733
<16733=16764,16758,16755,16734
<16734=16735
<16735=16736
<16736=16746,16737
<16737=16739,16738
<16739=16745,16740
<16740=16742,16741
<16742=16744,16743
<16746=16748,16747
<16748=16754,16749
<16749=16751,16750
<16751=16753,16752
<16755=16757,16756
<16758=16759
<16759=16763,16760
<16760=16762,16761
<16764=16765
<16765=16767,16766
<16768=16769
<16769=16775,16770
<16770=16774,16771
<16771=16773,16772
<16776=16777
<16777=16779,16778
<16780=16781
<16781=16797,16782
<16782=16795,16793,16791,16789,16787,16785,16783
<16783=16784
<16785=16786
<16787=16788
<16789=16790
<16791=16792
<16793=16794
<16795=16796
<16797=16798
<16799=16800
<16800=16802,16801
<16803=16805,16804
<16806=16807
<16807=16809,16808
<16810=16811
<16811=16813,16812
<16814=16815
<16815=16833,16816
<16816=16829,16827,16825,16823,16821,16819,16817
<16817=16818
<16819=16820
<16821=16822
<16823=16824
<16825=16826
<16827=16828
<16829=16830
<16830=16832,16831
<16833=16834
<16834=16836,16835
<16837=16876,16872,16869,16838
<16838=16857,16845,16839
<16839=16840
<16840=16842,16841
<16842=16844,16843
<16845=16846
<16846=16854,16847
<16847=16853,16848
<16848=16852,16849
<16849=16851,16850
<16854=16856,16855
<16857=16858
<16858=16866,16859
<16859=16865,16860
<16860=16864,16861
<16861=16863,16862
<16866=16868,16867
<16869=16871,16870
<16872=16873
<16873=16875,16874
<16876=16877
<16877=16879,16878
<16880=16881
<16881=16883,16882
<16884=16886,16885
<16887=16888
<16888=16890,16889
<16891=16892
<16892=16894,16893
<16895=16896
<16896=16909,16897
<16897=16908,16898
<16898=16906,16899
<16899=16900
<16900=16901
<16901=16903,16902
<16903=16905,16904
<16906=16907
<16910=16911
<16911=16924,16912
<16912=16923,16913
<16913=16921,16914
<16914=16915
<16915=16916
<16916=16918,16917
<16918=16920,16919
<16921=16922
<16925=16926
<16926=16939,16927
<16927=16938,16928
<16928=16936,16929
<16929=16930
<16930=16931
<16931=16933,16932
<16933=16935,16934
<16936=16937
<16940=16941
<16941=16954,16942
<16942=16953,16943
<16943=16951,16944
<16944=16945
<16945=16946
<16946=16948,16947
<16948=16950,16949
<16951=16952
<16955=16956
<16956=16958,16957
<16959=16966,16963,16960
<16960=16962,16961
<16963=16965,16964
<16966=16968,16967
<16969=16978,16970
<16970=16977,16976,16971
<16971=16975,16972
<16972=16974,16973
<16978=16985,16984,16979
<16979=16983,16980
<16980=16982,16981
<16986=16987
<16987=16994,16993,16988
<16988=16992,16989
<16989=16991,16990
<16995=16996
<16996=16998,16997
<16999=17000
<17000=17007,17006,17001
<17001=17005,17002
<17002=17004,17003
<17008=17009
<17009=17016,17015,17010
<17010=17014,17011
<17011=17013,17012
<17017=17018
<17018=17025,17024,17019
<17019=17023,17020
<17020=17022,17021
<17026=17027
<17027=17034,17033,17028
<17028=17032,17029
<17029=17031,17030
<17088=17094,17093,17089
<17089=17090
<17090=17092,17091
<17094=17095
<17095=17096
<17096=17104,17097
<17097=17102,17100,17098
<17098=17099
<17100=17101
<17102=17103
<17104=17105
<17112=17118,17117,17113
<17113=17114
<17114=17116,17115
<17118=17483,17474,17465,17456,17452,17443,17426,17416,17412,17397,17382,17367,17352,17147,17140,17133,17126,17119
<17119=17120
<17120=17124,17121
<17121=17122
<17122=17123
<17124=17125
<17126=17127
<17127=17131,17128
<17128=17129
<17129=17130
<17131=17132
<17133=17134
<17134=17138,17135
<17135=17136
<17136=17137
<17138=17139
<17140=17141
<17141=17145,17142
<17142=17143
<17143=17144
<17145=17146
<17147=17348,17344,17341,17148
<17148=17337,17294,17271,17160,17149
<17149=17151,17150
<17151=17152
<17152=17156,17153
<17153=17154
<17154=17155
<17156=17157
<17157=17159,17158
<17160=17267,17263,17260,17161
<17161=17241,17237,17233,17225,17162
<17162=17221,17215,17212,17163
<17163=17205,17176,17164
<17164=17165
<17165=17167,17166
<17167=17169,17168
<17169=17175,17170
<17170=17172,17171
<17172=17174,17173
<17176=17177
<17177=17203,17178
<17178=17201,17199,17191,17183,17179
<17179=17180
<17180=17182,17181
<17183=17184
<17184=17188,17185
<17185=17187,17186
<17188=17190,17189
<17191=17192
<17192=17196,17193
<17193=17195,17194
<17196=17198,17197
<17199=17200
<17201=17202
<17203=17204
<17205=17206
<17206=17211,17210,17207
<17207=17209,17208
<17212=17214,17213
<17215=17216
<17216=17220,17217
<17217=17219,17218
<17221=17222
<17222=17224,17223
<17225=17226
<17226=17232,17227
<17227=17231,17228
<17228=17230,17229
<17233=17234
<17234=17236,17235
<17237=17238
<17238=17240,17239
<17241=17242
<17242=17258,17243
<17243=17256,17254,17252,17250,17248,17246,17244
<17244=17245
<17246=17247
<17248=17249
<17250=17251
<17252=17253
<17254=17255
<17256=17257
<17258=17259
<17260=17262,17261
<17263=17264
<17264=17266,17265
<17267=17268
<17268=17270,17269
<17271=17272
<17272=17290,17273
<17273=17286,17284,17282,17280,17278,17276,17274
<17274=17275
<17276=17277
<17278=17279
<17280=17281
<17282=17283
<17284=17285
<17286=17287
<17287=17289,17288
<17290=17291
<17291=17293,17292
<17294=17333,17329,17326,17295
<17295=17314,17302,17296
<17296=17297
<17297=17299,17298
<17299=17301,17300
<17302=17303
<17303=17311,17304
<17304=17310,17305
<17305=17309,17306
<17306=17308,17307
<17311=17313,17312
<17314=17315
<17315=17323,17316
<17316=17322,17317
<17317=17321,17318
<17318=17320,17319
<17323=17325,17324
<17326=17328,17327
<17329=17330
<17330=17332,17331
<17333=17334
<17334=17336,17335
<17337=17338
<17338=17340,17339
<17341=17343,17342
<17344=17345
<17345=17347,17346
<17348=17349
<17349=17351,17350
<17352=17353
<17353=17366,17354
<17354=17365,17355
<17355=17363,17356
<17356=17357
<17357=17358
<17358=17360,17359
<17360=17362,17361
<17363=17364
<17367=17368
<17368=17381,17369
<17369=17380,17370
<17370=17378,17371
<17371=17372
<17372=17373
<17373=17375,17374
<17375=17377,17376
<17378=17379
<17382=17383
<17383=17396,17384
<17384=17395,17385
<17385=17393,17386
<17386=17387
<17387=17388
<17388=17390,17389
<17390=17392,17391
<17393=17394
<17397=17398
<17398=17411,17399
<17399=17410,17400
<17400=17408,17401
<17401=17402
<17402=17403
<17403=17405,17404
<17405=17407,17406
<17408=17409
<17412=17413
<17413=17415,17414
<17416=17423,17420,17417
<17417=17419,17418
<17420=17422,17421
<17423=17425,17424
<17426=17435,17427
<17427=17434,17433,17428
<17428=17432,17429
<17429=17431,17430
<17435=17442,17441,17436
<17436=17440,17437
<17437=17439,17438
<17443=17444
<17444=17451,17450,17445
<17445=17449,17446
<17446=17448,17447
<17452=17453
<17453=17455,17454
<17456=17457
<17457=17464,17463,17458
<17458=17462,17459
<17459=17461,17460
<17465=17466
<17466=17473,17472,17467
<17467=17471,17468
<17468=17470,17469
<17474=17475
<17475=17482,17481,17476
<17476=17480,17477
<17477=17479,17478
<17483=17484
<17484=17491,17490,17485
<17485=17489,17486
<17486=17488,17487
<17544=17550,17549,17545
<17545=17546
<17546=17548,17547
<17550=17551
<17551=17552
<17552=17560,17553
<17553=17558,17556,17554
<17554=17555
<17556=17557
<17558=17559
<17560=17561
<17568=17574,17573,17569
<17569=17570
<17570=17572,17571
<17574=17939,17930,17921,17912,17908,17899,17882,17872,17868,17853,17838,17823,17808,17603,17596,17589,17582,17575
<17575=17576
<17576=17580,17577
<17577=17578
<17578=17579
<17580=17581
<17582=17583
<17583=17587,17584
<17584=17585
<17585=17586
<17587=17588
<17589=17590
<17590=17594,17591
<17591=17592
<17592=17593
<17594=17595
<17596=17597
<17597=17601,17598
<17598=17599
<17599=17600
<17601=17602
<17603=17804,17800,17797,17604
<17604=17793,17750,17727,17616,17605
<17605=17607,17606
<17607=17608
<17608=17612,17609
<17609=17610
<17610=17611
<17612=17613
<17613=17615,17614
<17616=17723,17719,17716,17617
<17617=17697,17693,17689,17681,17618
<17618=17677,17671,17668,17619
<17619=17661,17632,17620
<17620=17621
<17621=17623,17622
<17623=17625,17624
<17625=17631,17626
<17626=17628,17627
<17628=17630,17629
<17632=17633
<17633=17659,17634
<17634=17657,17655,17647,17639,17635
<17635=17636
<17636=17638,17637
<17639=17640
<17640=17644,17641
<17641=17643,17642
<17644=17646,17645
<17647=17648
<17648=17652,17649
<17649=17651,17650
<17652=17654,17653
<17655=17656
<17657=17658
<17659=17660
<17661=17662
<17662=17667,17666,17663
<17663=17665,17664
<17668=17670,17669
<17671=17672
<17672=17676,17673
<17673=17675,17674
<17677=17678
<17678=17680,17679
<17681=17682
<17682=17688,17683
<17683=17687,17684
<17684=17686,17685
<17689=17690
<17690=17692,17691
<17693=17694
<17694=17696,17695
<17697=17698
<17698=17714,17699
<17699=17712,17710,17708,17706,17704,17702,17700
<17700=17701
<17702=17703
<17704=17705
<17706=17707
<17708=17709
<17710=17711
<17712=17713
<17714=17715
<17716=17718,17717
<17719=17720
<17720=17722,17721
<17723=17724
<17724=17726,17725
<17727=17728
<17728=17746,17729
<17729=17742,17740,17738,17736,17734,17732,17730
<17730=17731
<17732=17733
<17734=17735
<17736=17737
<17738=17739
<17740=17741
<17742=17743
<17743=17745,17744
<17746=17747
<17747=17749,17748
<17750=17789,17785,17782,17751
<17751=17770,17758,17752
<17752=17753
<17753=17755,17754
<17755=17757,17756
<17758=17759
<17759=17767,17760
<17760=17766,17761
<17761=17765,17762
<17762=17764,17763
<17767=17769,17768
<17770=17771
<17771=17779,17772
<17772=17778,17773
<17773=17777,17774
<17774=17776,17775
<17779=17781,17780
<17782=17784,17783
<17785=17786
<17786=17788,17787
<17789=17790
<17790=17792,17791
<17793=17794
<17794=17796,17795
<17797=17799,17798
<17800=17801
<17801=17803,17802
<17804=17805
<17805=17807,17806
<17808=17809
<17809=17822,17810
<17810=17821,17811
<17811=17819,17812
<17812=17813
<17813=17814
<17814=17816,17815
<17816=17818,17817
<17819=17820
<17823=17824
<17824=17837,17825
<17825=17836,17826
<17826=17834,17827
<17827=17828
<17828=17829
<17829=17831,17830
<17831=17833,17832
<17834=17835
<17838=17839
<17839=17852,17840
<17840=17851,17841
<17841=17849,17842
<17842=17843
<17843=17844
<17844=17846,17845
<17846=17848,17847
<17849=17850
<17853=17854
<17854=17867,17855
<17855=17866,17856
<17856=17864,17857
<17857=17858
<17858=17859
<17859=17861,17860
<17861=17863,17862
<17864=17865
<17868=17869
<17869=17871,17870
<17872=17879,17876,17873
<17873=17875,17874
<17876=17878,17877
<17879=17881,17880
<17882=17891,17883
<17883=17890,17889,17884
<17884=17888,17885
<17885=17887,17886
<17891=17898,17897,17892
<17892=17896,17893
<17893=17895,17894
<17899=17900
<17900=17907,17906,17901
<17901=17905,17902
<17902=17904,17903
<17908=17909
<17909=17911,17910
<17912=17913
<17913=17920,17919,17914
<17914=17918,17915
<17915=17917,17916
<17921=17922
<17922=17929,17928,17923
<17923=17927,17924
<17924=17926,17925
<17930=17931
<17931=17938,17937,17932
<17932=17936,17933
<17933=17935,17934
<17939=17940
<17940=17947,17946,17941
<17941=17945,17942
<17942=17944,17943
<18000=18006,18005,18001
<18001=18002
<18002=18004,18003
<18006=18007
<18007=18008
<18008=18016,18009
<18009=18014,18012,18010
<18010=18011
<18012=18013
<18014=18015
<18016=18017
<18024=18030,18029,18025
<18025=18026
<18026=18028,18027
<18030=18433,18424,18415,18406,18402,18393,18376,18366,18362,18347,18332,18317,18302,18293,18273,18066,18059,18052,18045,18038,18031
<18031=18032
<18032=18036,18033
<18033=18034
<18034=18035
<18036=18037
<18038=18039
<18039=18043,18040
<18040=18041
<18041=18042
<18043=18044
<18045=18046
<18046=18050,18047
<18047=18048
<18048=18049
<18050=18051
<18052=18053
<18053=18057,18054
<18054=18055
<18055=18056
<18057=18058
<18059=18060
<18060=18064,18061
<18061=18062
<18062=18063
<18064=18065
<18066=18269,18265,18262,18067
<18067=18258,18215,18192,18079,18068
<18068=18070,18069
<18070=18071
<18071=18075,18072
<18072=18073
<18073=18074
<18075=18076
<18076=18078,18077
<18079=18188,18184,18181,18080
<18080=18162,18158,18154,18146,18081
<18081=18142,18136,18133,18082
<18082=18126,18095,18083
<18083=18084
<18084=18086,18085
<18086=18088,18087
<18088=18094,18089
<18089=18091,18090
<18091=18093,18092
<18095=18096
<18096=18124,18097
<18097=18122,18120,18112,18104,18100,18098
<18098=18099
<18100=18101
<18101=18103,18102
<18104=18105
<18105=18109,18106
<18106=18108,18107
<18109=18111,18110
<18112=18113
<18113=18117,18114
<18114=18116,18115
<18117=18119,18118
<18120=18121
<18122=18123
<18124=18125
<18126=18127
<18127=18132,18131,18128
<18128=18130,18129
<18133=18135,18134
<18136=18137
<18137=18141,18138
<18138=18140,18139
<18142=18143
<18143=18145,18144
<18146=18147
<18147=18153,18148
<18148=18152,18149
<18149=18151,18150
<18154=18155
<18155=18157,18156
<18158=18159
<18159=18161,18160
<18162=18163
<18163=18179,18164
<18164=18177,18175,18173,18171,18169,18167,18165
<18165=18166
<18167=18168
<18169=18170
<18171=18172
<18173=18174
<18175=18176
<18177=18178
<18179=18180
<18181=18183,18182
<18184=18185
<18185=18187,18186
<18188=18189
<18189=18191,18190
<18192=18193
<18193=18211,18194
<18194=18207,18205,18203,18201,18199,18197,18195
<18195=18196
<18197=18198
<18199=18200
<18201=18202
<18203=18204
<18205=18206
<18207=18208
<18208=18210,18209
<18211=18212
<18212=18214,18213
<18215=18254,18250,18247,18216
<18216=18235,18223,18217
<18217=18218
<18218=18220,18219
<18220=18222,18221
<18223=18224
<18224=18232,18225
<18225=18231,18226
<18226=18230,18227
<18227=18229,18228
<18232=18234,18233
<18235=18236
<18236=18244,18237
<18237=18243,18238
<18238=18242,18239
<18239=18241,18240
<18244=18246,18245
<18247=18249,18248
<18250=18251
<18251=18253,18252
<18254=18255
<18255=18257,18256
<18258=18259
<18259=18261,18260
<18262=18264,18263
<18265=18266
<18266=18268,18267
<18269=18270
<18270=18272,18271
<18273=18274
<18274=18292,18291,18275
<18275=18290,18276
<18276=18289,18277
<18277=18287,18278
<18278=18283,18279
<18279=18280
<18280=18282,18281
<18283=18284
<18284=18286,18285
<18287=18288
<18293=18294
<18294=18301,18300,18295
<18295=18299,18296
<18296=18298,18297
<18302=18303
<18303=18316,18304
<18304=18315,18305
<18305=18313,18306
<18306=18307
<18307=18308
<18308=18310,18309
<18310=18312,18311
<18313=18314
<18317=18318
<18318=18331,18319
<18319=18330,18320
<18320=18328,18321
<18321=18322
<18322=18323
<18323=18325,18324
<18325=18327,18326
<18328=18329
<18332=18333
<18333=18346,18334
<18334=18345,18335
<18335=18343,18336
<18336=18337
<18337=18338
<18338=18340,18339
<18340=18342,18341
<18343=18344
<18347=18348
<18348=18361,18349
<18349=18360,18350
<18350=18358,18351
<18351=18352
<18352=18353
<18353=18355,18354
<18355=18357,18356
<18358=18359
<18362=18363
<18363=18365,18364
<18366=18373,18370,18367
<18367=18369,18368
<18370=18372,18371
<18373=18375,18374
<18376=18385,18377
<18377=18384,18383,18378
<18378=18382,18379
<18379=18381,18380
<18385=18392,18391,18386
<18386=18390,18387
<18387=18389,18388
<18393=18394
<18394=18401,18400,18395
<18395=18399,18396
<18396=18398,18397
<18402=18403
<18403=18405,18404
<18406=18407
<18407=18414,18413,18408
<18408=18412,18409
<18409=18411,18410
<18415=18416
<18416=18423,18422,18417
<18417=18421,18418
<18418=18420,18419
<18424=18425
<18425=18432,18431,18426
<18426=18430,18427
<18427=18429,18428
<18433=18434
<18434=18441,18440,18435
<18435=18439,18436
<18436=18438,18437
<18498=18504,18503,18499
<18499=18500
<18500=18502,18501
<18504=18505
<18505=18506
<18506=18514,18507
<18507=18512,18510,18508
<18508=18509
<18510=18511
<18512=18513
<18514=18515
<18522=18528,18527,18523
<18523=18524
<18524=18526,18525
<18528=19013,19004,18995,18986,18982,18973,18956,18946,18942,18927,18912,18897,18882,18557,18550,18543,18536,18529
<18529=18530
<18530=18534,18531
<18531=18532
<18532=18533
<18534=18535
<18536=18537
<18537=18541,18538
<18538=18539
<18539=18540
<18541=18542
<18543=18544
<18544=18548,18545
<18545=18546
<18546=18547
<18548=18549
<18550=18551
<18551=18555,18552
<18552=18553
<18553=18554
<18555=18556
<18557=18878,18874,18871,18558
<18558=18867,18824,18801,18570,18559
<18559=18561,18560
<18561=18562
<18562=18566,18563
<18563=18564
<18564=18565
<18566=18567
<18567=18569,18568
<18570=18797,18793,18790,18571
<18571=18786,18767,18743,18736,18714,18710,18702,18605,18594,18572
<18572=18588,18573
<18573=18574
<18574=18575
<18575=18581,18576
<18576=18580,18577
<18577=18579,18578
<18581=18585,18582
<18582=18584,18583
<18585=18587,18586
<18588=18589
<18589=18591,18590
<18591=18593,18592
<18594=18595
<18595=18603,18596
<18596=18601,18599,18597
<18597=18598
<18599=18600
<18601=18602
<18603=18604
<18605=18698,18692,18689,18606
<18606=18682,18675,18607
<18607=18656,18608
<18608=18609
<18609=18652,18624,18610
<18610=18611
<18611=18612
<18612=18613
<18613=18615,18614
<18615=18617,18616
<18617=18623,18618
<18618=18620,18619
<18620=18622,18621
<18624=18625
<18625=18648,18647,18626
<18626=18627
<18627=18628
<18628=18629
<18629=18645,18630
<18630=18643,18641,18639,18637,18633,18631
<18631=18632
<18633=18634
<18634=18636,18635
<18637=18638
<18639=18640
<18641=18642
<18643=18644
<18645=18646
<18648=18649
<18649=18651,18650
<18652=18653
<18653=18655,18654
<18656=18657
<18657=18673,18658
<18658=18671,18669,18667,18663,18659
<18659=18660
<18660=18662,18661
<18663=18664
<18664=18666,18665
<18667=18668
<18669=18670
<18671=18672
<18673=18674
<18675=18676
<18676=18681,18680,18677
<18677=18679,18678
<18682=18683
<18683=18688,18687,18684
<18684=18686,18685
<18689=18691,18690
<18692=18693
<18693=18697,18694
<18694=18696,18695
<18698=18699
<18699=18701,18700
<18702=18703
<18703=18709,18704
<18704=18708,18705
<18705=18707,18706
<18710=18711
<18711=18713,18712
<18714=18730,18715
<18715=18722,18716
<18716=18718,18717
<18718=18719
<18719=18721,18720
<18722=18723
<18723=18729,18724
<18724=18726,18725
<18726=18728,18727
<18730=18731
<18731=18733,18732
<18733=18735,18734
<18736=18737
<18737=18742,18741,18738
<18738=18740,18739
<18743=18745,18744
<18745=18746
<18746=18762,18747
<18747=18761,18748
<18748=18754,18749
<18749=18753,18750
<18750=18752,18751
<18754=18758,18755
<18755=18757,18756
<18758=18760,18759
<18762=18764,18763
<18764=18766,18765
<18767=18768
<18768=18784,18769
<18769=18782,18780,18778,18776,18774,18772,18770
<18770=18771
<18772=18773
<18774=18775
<18776=18777
<18778=18779
<18780=18781
<18782=18783
<18784=18785
<18786=18787
<18787=18789,18788
<18790=18792,18791
<18793=18794
<18794=18796,18795
<18797=18798
<18798=18800,18799
<18801=18802
<18802=18820,18803
<18803=18816,18814,18812,18810,18808,18806,18804
<18804=18805
<18806=18807
<18808=18809
<18810=18811
<18812=18813
<18814=18815
<18816=18817
<18817=18819,18818
<18820=18821
<18821=18823,18822
<18824=18863,18859,18856,18825
<18825=18844,18832,18826
<18826=18827
<18827=18829,18828
<18829=18831,18830
<18832=18833
<18833=18841,18834
<18834=18840,18835
<18835=18839,18836
<18836=18838,18837
<18841=18843,18842
<18844=18845
<18845=18853,18846
<18846=18852,18847
<18847=18851,18848
<18848=18850,18849
<18853=18855,18854
<18856=18858,18857
<18859=18860
<18860=18862,18861
<18863=18864
<18864=18866,18865
<18867=18868
<18868=18870,18869
<18871=18873,18872
<18874=18875
<18875=18877,18876
<18878=18879
<18879=18881,18880
<18882=18883
<18883=18896,18884
<18884=18895,18885
<18885=18893,18886
<18886=18887
<18887=18888
<18888=18890,18889
<18890=18892,18891
<18893=18894
<18897=18898
<18898=18911,18899
<18899=18910,18900
<18900=18908,18901
<18901=18902
<18902=18903
<18903=18905,18904
<18905=18907,18906
<18908=18909
<18912=18913
<18913=18926,18914
<18914=18925,18915
<18915=18923,18916
<18916=18917
<18917=18918
<18918=18920,18919
<18920=18922,18921
<18923=18924
<18927=18928
<18928=18941,18929
<18929=18940,18930
<18930=18938,18931
<18931=18932
<18932=18933
<18933=18935,18934
<18935=18937,18936
<18938=18939
<18942=18943
<18943=18945,18944
<18946=18953,18950,18947
<18947=18949,18948
<18950=18952,18951
<18953=18955,18954
<18956=18965,18957
<18957=18964,18963,18958
<18958=18962,18959
<18959=18961,18960
<18965=18972,18971,18966
<18966=18970,18967
<18967=18969,18968
<18973=18974
<18974=18981,18980,18975
<18975=18979,18976
<18976=18978,18977
<18982=18983
<18983=18985,18984
<18986=18987
<18987=18994,18993,18988
<18988=18992,18989
<18989=18991,18990
<18995=18996
<18996=19003,19002,18997
<18997=19001,18998
<18998=19000,18999
<19004=19005
<19005=19012,19011,19006
<19006=19010,19007
<19007=19009,19008
<19013=19014
<19014=19021,19020,19015
<19015=19019,19016
<19016=19018,19017
<19085=19091,19090,19086
<19086=19087
<19087=19089,19088
<19091=19092
<19092=19093
<19093=19101,19094
<19094=19099,19097,19095
<19095=19096
<19097=19098
<19099=19100
<19101=19102
<19109=19115,19114,19110
<19110=19111
<19111=19113,19112
<19115=19452,19443,19434,19425,19421,19412,19395,19385,19381,19366,19351,19336,19321,19144,19137,19130,19123,19116
<19116=19117
<19117=19121,19118
<19118=19119
<19119=19120
<19121=19122
<19123=19124
<19124=19128,19125
<19125=19126
<19126=19127
<19128=19129
<19130=19131
<19131=19135,19132
<19132=19133
<19133=19134
<19135=19136
<19137=19138
<19138=19142,19139
<19139=19140
<19140=19141
<19142=19143
<19144=19317,19313,19310,19145
<19145=19306,19263,19240,19157,19146
<19146=19148,19147
<19148=19149
<19149=19153,19150
<19150=19151
<19151=19152
<19153=19154
<19154=19156,19155
<19157=19236,19232,19229,19158
<19158=19225,19206,19202,19194,19159
<19159=19190,19184,19181,19160
<19160=19161
<19161=19162
<19162=19172,19163
<19163=19165,19164
<19165=19171,19166
<19166=19168,19167
<19168=19170,19169
<19172=19174,19173
<19174=19180,19175
<19175=19177,19176
<19177=19179,19178
<19181=19183,19182
<19184=19185
<19185=19189,19186
<19186=19188,19187
<19190=19191
<19191=19193,19192
<19194=19195
<19195=19201,19196
<19196=19200,19197
<19197=19199,19198
<19202=19203
<19203=19205,19204
<19206=19207
<19207=19223,19208
<19208=19221,19219,19217,19215,19213,19211,19209
<19209=19210
<19211=19212
<19213=19214
<19215=19216
<19217=19218
<19219=19220
<19221=19222
<19223=19224
<19225=19226
<19226=19228,19227
<19229=19231,19230
<19232=19233
<19233=19235,19234
<19236=19237
<19237=19239,19238
<19240=19241
<19241=19259,19242
<19242=19255,19253,19251,19249,19247,19245,19243
<19243=19244
<19245=19246
<19247=19248
<19249=19250
<19251=19252
<19253=19254
<19255=19256
<19256=19258,19257
<19259=19260
<19260=19262,19261
<19263=19302,19298,19295,19264
<19264=19283,19271,19265
<19265=19266
<19266=19268,19267
<19268=19270,19269
<19271=19272
<19272=19280,19273
<19273=19279,19274
<19274=19278,19275
<19275=19277,19276
<19280=19282,19281
<19283=19284
<19284=19292,19285
<19285=19291,19286
<19286=19290,19287
<19287=19289,19288
<19292=19294,19293
<19295=19297,19296
<19298=19299
<19299=19301,19300
<19302=19303
<19303=19305,19304
<19306=19307
<19307=19309,19308
<19310=19312,19311
<19313=19314
<19314=19316,19315
<19317=19318
<19318=19320,19319
<19321=19322
<19322=19335,19323
<19323=19334,19324
<19324=19332,19325
<19325=19326
<19326=19327
<19327=19329,19328
<19329=19331,19330
<19332=19333
<19336=19337
<19337=19350,19338
<19338=19349,19339
<19339=19347,19340
<19340=19341
<19341=19342
<19342=19344,19343
<19344=19346,19345
<19347=19348
<19351=19352
<19352=19365,19353
<19353=19364,19354
<19354=19362,19355
<19355=19356
<19356=19357
<19357=19359,19358
<19359=19361,19360
<19362=19363
<19366=19367
<19367=19380,19368
<19368=19379,19369
<19369=19377,19370
<19370=19371
<19371=19372
<19372=19374,19373
<19374=19376,19375
<19377=19378
<19381=19382
<19382=19384,19383
<19385=19392,19389,19386
<19386=19388,19387
<19389=19391,19390
<19392=19394,19393
<19395=19404,19396
<19396=19403,19402,19397
<19397=19401,19398
<19398=19400,19399
<19404=19411,19410,19405
<19405=19409,19406
<19406=19408,19407
<19412=19413
<19413=19420,19419,19414
<19414=19418,19415
<19415=19417,19416
<19421=19422
<19422=19424,19423
<19425=19426
<19426=19433,19432,19427
<19427=19431,19428
<19428=19430,19429
<19434=19435
<19435=19442,19441,19436
<19436=19440,19437
<19437=19439,19438
<19443=19444
<19444=19451,19450,19445
<19445=19449,19446
<19446=19448,19447
<19452=19453
<19453=19460,19459,19454
<19454=19458,19455
<19455=19457,19456
<19514=19520,19519,19515
<19515=19516
<19516=19518,19517
<19520=19521
<19521=19522
<19522=19530,19523
<19523=19528,19526,19524
<19524=19525
<19526=19527
<19528=19529
<19530=19531
<19538=19544,19543,19539
<19539=19540
<19540=19542,19541
<19544=20029,20020,20011,20002,19998,19989,19972,19962,19958,19943,19928,19913,19898,19573,19566,19559,19552,19545
<19545=19546
<19546=19550,19547
<19547=19548
<19548=19549
<19550=19551
<19552=19553
<19553=19557,19554
<19554=19555
<19555=19556
<19557=19558
<19559=19560
<19560=19564,19561
<19561=19562
<19562=19563
<19564=19565
<19566=19567
<19567=19571,19568
<19568=19569
<19569=19570
<19571=19572
<19573=19894,19890,19887,19574
<19574=19883,19840,19817,19586,19575
<19575=19577,19576
<19577=19578
<19578=19582,19579
<19579=19580
<19580=19581
<19582=19583
<19583=19585,19584
<19586=19813,19809,19806,19587
<19587=19802,19783,19759,19752,19730,19726,19718,19621,19610,19588
<19588=19604,19589
<19589=19590
<19590=19591
<19591=19597,19592
<19592=19596,19593
<19593=19595,19594
<19597=19601,19598
<19598=19600,19599
<19601=19603,19602
<19604=19605
<19605=19607,19606
<19607=19609,19608
<19610=19611
<19611=19619,19612
<19612=19617,19615,19613
<19613=19614
<19615=19616
<19617=19618
<19619=19620
<19621=19714,19708,19705,19622
<19622=19698,19691,19623
<19623=19672,19624
<19624=19625
<19625=19668,19640,19626
<19626=19627
<19627=19628
<19628=19629
<19629=19631,19630
<19631=19633,19632
<19633=19639,19634
<19634=19636,19635
<19636=19638,19637
<19640=19641
<19641=19664,19663,19642
<19642=19643
<19643=19644
<19644=19645
<19645=19661,19646
<19646=19659,19657,19655,19653,19649,19647
<19647=19648
<19649=19650
<19650=19652,19651
<19653=19654
<19655=19656
<19657=19658
<19659=19660
<19661=19662
<19664=19665
<19665=19667,19666
<19668=19669
<19669=19671,19670
<19672=19673
<19673=19689,19674
<19674=19687,19685,19683,19679,19675
<19675=19676
<19676=19678,19677
<19679=19680
<19680=19682,19681
<19683=19684
<19685=19686
<19687=19688
<19689=19690
<19691=19692
<19692=19697,19696,19693
<19693=19695,19694
<19698=19699
<19699=19704,19703,19700
<19700=19702,19701
<19705=19707,19706
<19708=19709
<19709=19713,19710
<19710=19712,19711
<19714=19715
<19715=19717,19716
<19718=19719
<19719=19725,19720
<19720=19724,19721
<19721=19723,19722
<19726=19727
<19727=19729,19728
<19730=19746,19731
<19731=19738,19732
<19732=19734,19733
<19734=19735
<19735=19737,19736
<19738=19739
<19739=19745,19740
<19740=19742,19741
<19742=19744,19743
<19746=19747
<19747=19749,19748
<19749=19751,19750
<19752=19753
<19753=19758,19757,19754
<19754=19756,19755
<19759=19761,19760
<19761=19762
<19762=19778,19763
<19763=19777,19764
<19764=19770,19765
<19765=19769,19766
<19766=19768,19767
<19770=19774,19771
<19771=19773,19772
<19774=19776,19775
<19778=19780,19779
<19780=19782,19781
<19783=19784
<19784=19800,19785
<19785=19798,19796,19794,19792,19790,19788,19786
<19786=19787
<19788=19789
<19790=19791
<19792=19793
<19794=19795
<19796=19797
<19798=19799
<19800=19801
<19802=19803
<19803=19805,19804
<19806=19808,19807
<19809=19810
<19810=19812,19811
<19813=19814
<19814=19816,19815
<19817=19818
<19818=19836,19819
<19819=19832,19830,19828,19826,19824,19822,19820
<19820=19821
<19822=19823
<19824=19825
<19826=19827
<19828=19829
<19830=19831
<19832=19833
<19833=19835,19834
<19836=19837
<19837=19839,19838
<19840=19879,19875,19872,19841
<19841=19860,19848,19842
<19842=19843
<19843=19845,19844
<19845=19847,19846
<19848=19849
<19849=19857,19850
<19850=19856,19851
<19851=19855,19852
<19852=19854,19853
<19857=19859,19858
<19860=19861
<19861=19869,19862
<19862=19868,19863
<19863=19867,19864
<19864=19866,19865
<19869=19871,19870
<19872=19874,19873
<19875=19876
<19876=19878,19877
<19879=19880
<19880=19882,19881
<19883=19884
<19884=19886,19885
<19887=19889,19888
<19890=19891
<19891=19893,19892
<19894=19895
<19895=19897,19896
<19898=19899
<19899=19912,19900
<19900=19911,19901
<19901=19909,19902
<19902=19903
<19903=19904
<19904=19906,19905
<19906=19908,19907
<19909=19910
<19913=19914
<19914=19927,19915
<19915=19926,19916
<19916=19924,19917
<19917=19918
<19918=19919
<19919=19921,19920
<19921=19923,19922
<19924=19925
<19928=19929
<19929=19942,19930
<19930=19941,19931
<19931=19939,19932
<19932=19933
<19933=19934
<19934=19936,19935
<19936=19938,19937
<19939=19940
<19943=19944
<19944=19957,19945
<19945=19956,19946
<19946=19954,19947
<19947=19948
<19948=19949
<19949=19951,19950
<19951=19953,19952
<19954=19955
<19958=19959
<19959=19961,19960
<19962=19969,19966,19963
<19963=19965,19964
<19966=19968,19967
<19969=19971,19970
<19972=19981,19973
<19973=19980,19979,19974
<19974=19978,19975
<19975=19977,19976
<19981=19988,19987,19982
<19982=19986,19983
<19983=19985,19984
<19989=19990
<19990=19997,19996,19991
<19991=19995,19992
<19992=19994,19993
<19998=19999
<19999=20001,20000
<20002=20003
<20003=20010,20009,20004
<20004=20008,20005
<20005=20007,20006
<20011=20012
<20012=20019,20018,20013
<20013=20017,20014
<20014=20016,20015
<20020=20021
<20021=20028,20027,20022
<20022=20026,20023
<20023=20025,20024
<20029=20030
<20030=20037,20036,20031
<20031=20035,20032
<20032=20034,20033
<20101=20107,20106,20102
<20102=20103
<20103=20105,20104
<20107=20108
<20108=20109
<20109=20117,20110
<20110=20115,20113,20111
<20111=20112
<20113=20114
<20115=20116
<20117=20118
<20125=20131,20130,20126
<20126=20127
<20127=20129,20128
<20131=21620,21611,21602,21593,21577,21568,21551,21544,21537,21524,21404,21393,21383,21373,21366,21351,21336,21321,21306,21291,21276,21261,21246,20198,20191,20184,20177,20170,20163,20156,20149,20142,20132
<20132=20140,20133
<20133=20134
<20134=20138,20135
<20135=20136
<20136=20137
<20138=20139
<20140=20141
<20142=20143
<20143=20147,20144
<20144=20145
<20145=20146
<20147=20148
<20149=20150
<20150=20154,20151
<20151=20152
<20152=20153
<20154=20155
<20156=20157
<20157=20161,20158
<20158=20159
<20159=20160
<20161=20162
<20163=20164
<20164=20168,20165
<20165=20166
<20166=20167
<20168=20169
<20170=20171
<20171=20175,20172
<20172=20173
<20173=20174
<20175=20176
<20177=20178
<20178=20182,20179
<20179=20180
<20180=20181
<20182=20183
<20184=20185
<20185=20189,20186
<20186=20187
<20187=20188
<20189=20190
<20191=20192
<20192=20196,20193
<20193=20194
<20194=20195
<20196=20197
<20198=21242,21238,21235,20199
<20199=21166,21143,21120,20211,20200
<20200=20202,20201
<20202=20203
<20203=20207,20204
<20204=20205
<20205=20206
<20207=20208
<20208=20210,20209
<20211=21116,21112,21109,20212
<20212=21102,21095,21088,21074,21066,20252,20246,20235,20213
<20213=20229,20214
<20214=20215
<20215=20216
<20216=20222,20217
<20217=20221,20218
<20218=20220,20219
<20222=20226,20223
<20223=20225,20224
<20226=20228,20227
<20229=20230
<20230=20232,20231
<20232=20234,20233
<20235=20236
<20236=20244,20237
<20237=20242,20240,20238
<20238=20239
<20240=20241
<20242=20243
<20244=20245
<20246=20248,20247
<20248=20249
<20249=20251,20250
<20252=21058,21052,21049,20253
<20253=21042,21035,21028,21021,21014,21007,21000,20993,20980,20954,20928,20902,20876,20275,20254
<20254=20273,20255
<20255=20256
<20256=20257
<20257=20271,20258
<20258=20269,20267,20265,20263,20261,20259
<20259=20260
<20261=20262
<20263=20264
<20265=20266
<20267=20268
<20269=20270
<20271=20272
<20273=20274
<20275=20872,20751,20276
<20276=20277
<20277=20743,20278
<20278=20279
<20279=20739,20462,20280
<20280=20281
<20281=20447,20432,20304,20282
<20282=20298,20283
<20283=20292,20288,20284
<20284=20285
<20285=20287,20286
<20288=20289
<20289=20291,20290
<20292=20293
<20293=20297,20294
<20294=20296,20295
<20298=20299
<20299=20303,20300
<20300=20302,20301
<20304=20428,20424,20421,20305
<20305=20306
<20306=20417,20413,20410,20307
<20307=20402,20378,20374,20308
<20308=20347,20309
<20309=20343,20334,20310
<20310=20324,20311
<20311=20320,20312
<20312=20313
<20313=20319,20314
<20314=20318,20315
<20315=20317,20316
<20320=20321
<20321=20323,20322
<20324=20325
<20325=20327,20326
<20327=20333,20328
<20328=20332,20329
<20329=20331,20330
<20334=20335
<20335=20342,20341,20336
<20336=20340,20337
<20337=20339,20338
<20343=20344
<20344=20346,20345
<20347=20348
<20348=20352,20349
<20349=20351,20350
<20352=20372,20353
<20353=20370,20368,20366,20362,20358,20354
<20354=20355
<20355=20357,20356
<20358=20359
<20359=20361,20360
<20362=20363
<20363=20365,20364
<20366=20367
<20368=20369
<20370=20371
<20372=20373
<20374=20375
<20375=20377,20376
<20378=20380,20379
<20380=20381
<20381=20397,20382
<20382=20396,20383
<20383=20389,20384
<20384=20388,20385
<20385=20387,20386
<20389=20393,20390
<20390=20392,20391
<20393=20395,20394
<20397=20399,20398
<20399=20401,20400
<20402=20403
<20403=20409,20404
<20404=20408,20405
<20405=20407,20406
<20410=20412,20411
<20413=20414
<20414=20416,20415
<20417=20418
<20418=20420,20419
<20421=20423,20422
<20424=20425
<20425=20427,20426
<20428=20429
<20429=20431,20430
<20432=20433
<20433=20445,20434
<20434=20443,20441,20435
<20435=20436
<20436=20440,20437
<20437=20439,20438
<20441=20442
<20443=20444
<20445=20446
<20447=20456,20448
<20448=20455,20454,20449
<20449=20453,20450
<20450=20452,20451
<20456=20461,20460,20457
<20457=20459,20458
<20462=20718,20709,20703,20685,20667,20499,20477,20470,20463
<20463=20464
<20464=20468,20465
<20465=20466
<20466=20467
<20468=20469
<20470=20471
<20471=20475,20472
<20472=20473
<20473=20474
<20475=20476
<20477=20493,20478
<20478=20487,20483,20479
<20479=20480
<20480=20482,20481
<20483=20484
<20484=20486,20485
<20487=20488
<20488=20492,20489
<20489=20491,20490
<20493=20494
<20494=20498,20495
<20495=20497,20496
<20499=20663,20659,20656,20500
<20500=20501
<20501=20652,20648,20645,20502
<20502=20637,20613,20609,20503
<20503=20582,20504
<20504=20578,20571,20536,20505
<20505=20532,20506
<20506=20526,20520,20511,20507
<20507=20508
<20508=20510,20509
<20511=20516,20512
<20512=20513
<20513=20515,20514
<20516=20517
<20517=20519,20518
<20520=20521
<20521=20523,20522
<20523=20525,20524
<20526=20527
<20527=20529,20528
<20529=20531,20530
<20532=20533
<20533=20535,20534
<20536=20567,20563,20560,20537
<20537=20544,20538
<20538=20540,20539
<20540=20541
<20541=20543,20542
<20544=20545
<20545=20555,20546
<20546=20550,20547
<20547=20549,20548
<20550=20554,20551
<20551=20553,20552
<20555=20557,20556
<20557=20559,20558
<20560=20562,20561
<20563=20564
<20564=20566,20565
<20567=20568
<20568=20570,20569
<20571=20572
<20572=20577,20576,20573
<20573=20575,20574
<20578=20579
<20579=20581,20580
<20582=20583
<20583=20587,20584
<20584=20586,20585
<20587=20607,20588
<20588=20605,20603,20601,20597,20593,20589
<20589=20590
<20590=20592,20591
<20593=20594
<20594=20596,20595
<20597=20598
<20598=20600,20599
<20601=20602
<20603=20604
<20605=20606
<20607=20608
<20609=20610
<20610=20612,20611
<20613=20615,20614
<20615=20616
<20616=20632,20617
<20617=20631,20618
<20618=20624,20619
<20619=20623,20620
<20620=20622,20621
<20624=20628,20625
<20625=20627,20626
<20628=20630,20629
<20632=20634,20633
<20634=20636,20635
<20637=20638
<20638=20644,20639
<20639=20643,20640
<20640=20642,20641
<20645=20647,20646
<20648=20649
<20649=20651,20650
<20652=20653
<20653=20655,20654
<20656=20658,20657
<20659=20660
<20660=20662,20661
<20663=20664
<20664=20666,20665
<20667=20668
<20668=20684,20683,20669
<20669=20682,20670
<20670=20681,20671
<20671=20679,20672
<20672=20673
<20673=20674
<20674=20678,20675
<20675=20677,20676
<20679=20680
<20685=20686
<20686=20702,20701,20687
<20687=20700,20688
<20688=20699,20689
<20689=20697,20690
<20690=20691
<20691=20692
<20692=20696,20693
<20693=20695,20694
<20697=20698
<20703=20705,20704
<20705=20706
<20706=20708,20707
<20709=20710
<20710=20717,20716,20711
<20711=20715,20712
<20712=20714,20713
<20718=20733,20725,20719
<20719=20724,20723,20720
<20720=20722,20721
<20725=20732,20731,20726
<20726=20730,20727
<20727=20729,20728
<20733=20738,20737,20734
<20734=20736,20735
<20739=20740
<20740=20742,20741
<20743=20744
<20744=20748,20745
<20745=20747,20746
<20748=20750,20749
<20751=20772,20752
<20752=20768,20753
<20753=20762,20758,20754
<20754=20755
<20755=20757,20756
<20758=20759
<20759=20761,20760
<20762=20763
<20763=20767,20764
<20764=20766,20765
<20768=20769
<20769=20771,20770
<20772=20868,20864,20861,20773
<20773=20774
<20774=20857,20853,20850,20775
<20775=20842,20817,20813,20776
<20776=20786,20777
<20777=20782,20778
<20778=20779
<20779=20781,20780
<20782=20783
<20783=20785,20784
<20786=20787
<20787=20791,20788
<20788=20790,20789
<20791=20811,20792
<20792=20809,20807,20805,20801,20797,20793
<20793=20794
<20794=20796,20795
<20797=20798
<20798=20800,20799
<20801=20802
<20802=20804,20803
<20805=20806
<20807=20808
<20809=20810
<20811=20812
<20813=20814
<20814=20816,20815
<20817=20820,20818
<20818=20819
<20820=20821
<20821=20837,20822
<20822=20836,20823
<20823=20829,20824
<20824=20828,20825
<20825=20827,20826
<20829=20833,20830
<20830=20832,20831
<20833=20835,20834
<20837=20839,20838
<20839=20841,20840
<20842=20843
<20843=20849,20844
<20844=20848,20845
<20845=20847,20846
<20850=20852,20851
<20853=20854
<20854=20856,20855
<20857=20858
<20858=20860,20859
<20861=20863,20862
<20864=20865
<20865=20867,20866
<20868=20869
<20869=20871,20870
<20872=20873
<20873=20875,20874
<20876=20877
<20877=20901,20878
<20878=20899,20879
<20879=20882,20880
<20880=20881
<20882=20883
<20883=20887,20884
<20884=20886,20885
<20887=20898,20888
<20888=20896,20889
<20889=20890
<20890=20891
<20891=20893,20892
<20893=20895,20894
<20896=20897
<20899=20900
<20902=20903
<20903=20927,20904
<20904=20925,20905
<20905=20908,20906
<20906=20907
<20908=20909
<20909=20913,20910
<20910=20912,20911
<20913=20924,20914
<20914=20922,20915
<20915=20916
<20916=20917
<20917=20919,20918
<20919=20921,20920
<20922=20923
<20925=20926
<20928=20929
<20929=20953,20930
<20930=20951,20931
<20931=20934,20932
<20932=20933
<20934=20935
<20935=20939,20936
<20936=20938,20937
<20939=20950,20940
<20940=20948,20941
<20941=20942
<20942=20943
<20943=20945,20944
<20945=20947,20946
<20948=20949
<20951=20952
<20954=20955
<20955=20979,20956
<20956=20977,20957
<20957=20960,20958
<20958=20959
<20960=20961
<20961=20965,20962
<20962=20964,20963
<20965=20976,20966
<20966=20974,20967
<20967=20968
<20968=20969
<20969=20971,20970
<20971=20973,20972
<20974=20975
<20977=20978
<20980=20990,20987,20984,20981
<20981=20983,20982
<20984=20986,20985
<20987=20989,20988
<20990=20992,20991
<20993=20994
<20994=20999,20998,20995
<20995=20997,20996
<21000=21001
<21001=21006,21005,21002
<21002=21004,21003
<21007=21008
<21008=21013,21012,21009
<21009=21011,21010
<21014=21015
<21015=21020,21019,21016
<21016=21018,21017
<21021=21022
<21022=21027,21026,21023
<21023=21025,21024
<21028=21029
<21029=21034,21033,21030
<21030=21032,21031
<21035=21036
<21036=21041,21040,21037
<21037=21039,21038
<21042=21043
<21043=21048,21047,21044
<21044=21046,21045
<21049=21051,21050
<21052=21053
<21053=21057,21054
<21054=21056,21055
<21058=21059
<21059=21060
<21060=21065,21064,21061
<21061=21063,21062
<21066=21067
<21067=21073,21068
<21068=21072,21069
<21069=21071,21070
<21074=21076,21075
<21076=21077
<21077=21083,21078
<21078=21082,21079
<21079=21081,21080
<21083=21087,21084
<21084=21086,21085
<21088=21089
<21089=21094,21093,21090
<21090=21092,21091
<21095=21096
<21096=21101,21100,21097
<21097=21099,21098
<21102=21103
<21103=21108,21107,21104
<21104=21106,21105
<21109=21111,21110
<21112=21113
<21113=21115,21114
<21116=21117
<21117=21119,21118
<21120=21121
<21121=21139,21122
<21122=21135,21133,21131,21129,21127,21125,21123
<21123=21124
<21125=21126
<21127=21128
<21129=21130
<21131=21132
<21133=21134
<21135=21136
<21136=21138,21137
<21139=21140
<21140=21142,21141
<21143=21144
<21144=21162,21145
<21145=21158,21156,21154,21152,21150,21148,21146
<21146=21147
<21148=21149
<21150=21151
<21152=21153
<21154=21155
<21156=21157
<21158=21159
<21159=21161,21160
<21162=21163
<21163=21165,21164
<21166=21231,21227,21224,21167
<21167=21214,21204,21198,21186,21174,21168
<21168=21169
<21169=21171,21170
<21171=21173,21172
<21174=21175
<21175=21183,21176
<21176=21182,21177
<21177=21181,21178
<21178=21180,21179
<21183=21185,21184
<21186=21187
<21187=21195,21188
<21188=21194,21189
<21189=21193,21190
<21190=21192,21191
<21195=21197,21196
<21198=21199
<21199=21201,21200
<21201=21203,21202
<21204=21205
<21205=21211,21206
<21206=21210,21207
<21207=21209,21208
<21211=21213,21212
<21214=21215
<21215=21221,21216
<21216=21220,21217
<21217=21219,21218
<21221=21223,21222
<21224=21226,21225
<21227=21228
<21228=21230,21229
<21231=21232
<21232=21234,21233
<21235=21237,21236
<21238=21239
<21239=21241,21240
<21242=21243
<21243=21245,21244
<21246=21247
<21247=21260,21248
<21248=21259,21249
<21249=21257,21250
<21250=21251
<21251=21252
<21252=21254,21253
<21254=21256,21255
<21257=21258
<21261=21262
<21262=21275,21263
<21263=21274,21264
<21264=21272,21265
<21265=21266
<21266=21267
<21267=21269,21268
<21269=21271,21270
<21272=21273
<21276=21277
<21277=21290,21278
<21278=21289,21279
<21279=21287,21280
<21280=21281
<21281=21282
<21282=21284,21283
<21284=21286,21285
<21287=21288
<21291=21292
<21292=21305,21293
<21293=21304,21294
<21294=21302,21295
<21295=21296
<21296=21297
<21297=21299,21298
<21299=21301,21300
<21302=21303
<21306=21307
<21307=21320,21308
<21308=21319,21309
<21309=21317,21310
<21310=21311
<21311=21312
<21312=21314,21313
<21314=21316,21315
<21317=21318
<21321=21322
<21322=21335,21323
<21323=21334,21324
<21324=21332,21325
<21325=21326
<21326=21327
<21327=21329,21328
<21329=21331,21330
<21332=21333
<21336=21337
<21337=21350,21338
<21338=21349,21339
<21339=21347,21340
<21340=21341
<21341=21342
<21342=21344,21343
<21344=21346,21345
<21347=21348
<21351=21352
<21352=21365,21353
<21353=21364,21354
<21354=21362,21355
<21355=21356
<21356=21357
<21357=21359,21358
<21359=21361,21360
<21362=21363
<21366=21370,21367
<21367=21369,21368
<21370=21372,21371
<21373=21380,21377,21374
<21374=21376,21375
<21377=21379,21378
<21380=21382,21381
<21383=21390,21387,21384
<21384=21386,21385
<21387=21389,21388
<21390=21392,21391
<21393=21394
<21394=21402,21395
<21395=21400,21398,21396
<21396=21397
<21398=21399
<21400=21401
<21402=21403
<21404=21518,21513,21405
<21405=21406
<21406=21507,21419,21407
<21407=21408
<21408=21410,21409
<21410=21411
<21411=21417,21412
<21412=21415,21413
<21413=21414
<21415=21416
<21417=21418
<21419=21420
<21420=21489,21427,21421
<21421=21422
<21422=21423
<21423=21424
<21424=21426,21425
<21427=21485,21443,21428
<21428=21429
<21429=21442,21430
<21430=21441,21431
<21431=21439,21432
<21432=21433
<21433=21434
<21434=21438,21435
<21435=21437,21436
<21439=21440
<21443=21479,21474,21444
<21444=21445
<21445=21468,21459,21446
<21446=21447
<21447=21453,21448
<21448=21449
<21449=21450
<21450=21452,21451
<21453=21454
<21454=21456,21455
<21456=21458,21457
<21459=21464,21460
<21460=21461
<21461=21463,21462
<21464=21465
<21465=21467,21466
<21468=21469
<21469=21471,21470
<21471=21473,21472
<21474=21475
<21475=21476
<21476=21478,21477
<21479=21480
<21480=21482,21481
<21482=21484,21483
<21485=21486
<21486=21488,21487
<21489=21490
<21490=21502,21491
<21491=21497,21492
<21492=21494,21493
<21494=21496,21495
<21497=21499,21498
<21499=21501,21500
<21502=21504,21503
<21504=21506,21505
<21507=21508
<21508=21510,21509
<21510=21512,21511
<21513=21514
<21514=21515
<21515=21517,21516
<21518=21519
<21519=21521,21520
<21521=21523,21522
<21524=21531,21525
<21525=21530,21529,21526
<21526=21528,21527
<21531=21536,21535,21532
<21532=21534,21533
<21537=21538
<21538=21543,21542,21539
<21539=21541,21540
<21544=21545
<21545=21550,21549,21546
<21546=21548,21547
<21551=21560,21552
<21552=21559,21558,21553
<21553=21557,21554
<21554=21556,21555
<21560=21567,21566,21561
<21561=21565,21562
<21562=21564,21563
<21568=21569
<21569=21576,21575,21570
<21570=21574,21571
<21571=21573,21572
<21577=21590,21587,21584,21581,21578
<21578=21580,21579
<21581=21583,21582
<21584=21586,21585
<21587=21589,21588
<21590=21592,21591
<21593=21594
<21594=21601,21600,21595
<21595=21599,21596
<21596=21598,21597
<21602=21603
<21603=21610,21609,21604
<21604=21608,21605
<21605=21607,21606
<21611=21612
<21612=21619,21618,21613
<21613=21617,21614
<21614=21616,21615
<21620=21621
<21621=21628,21627,21622
<21622=21626,21623
<21623=21625,21624
