>3	FunctionDef	callFunction (mxArray * plhs [ ] , const mxArray * prhs [ ])
>4	ParameterList	mxArray * plhs [ ] , const mxArray * prhs [ ]
>5	Parameter	 
>6	Identifier	prhs
>7	ParameterType	const mxArray * [ ]
>8	Parameter	 
>9	Identifier	plhs
>10	ParameterType	mxArray * [ ]
>11	ReturnType	inline void
>12	CompoundStatement	 
>13	ExpressionStatement	 
>14	CallExpression	X . sparseProject ( Y , thrs , mode , lambda1 , lambda2 , lambda3 , pos , numThreads )
>15	ArgumentList	Y
>16	Argument	numThreads
>17	Identifier	numThreads
>18	Argument	pos
>19	Identifier	pos
>20	Argument	lambda3
>21	Identifier	lambda3
>22	Argument	lambda2
>23	Identifier	lambda2
>24	Argument	lambda1
>25	Identifier	lambda1
>26	Argument	mode
>27	Identifier	mode
>28	Argument	thrs
>29	Identifier	thrs
>30	Argument	Y
>31	Identifier	Y
>32	Callee	X . sparseProject
>33	MemberAccess	X . sparseProject
>34	Identifier	sparseProject
>35	Identifier	X
>36	IfStatement	if ( pos && mode >= 5 )
>37	ExpressionStatement	 
>38	CallExpression	mexErrMsgTxt ( \"mode >= 5 is not compatible with positivity constraints\" )
>39	ArgumentList	\"mode >= 5 is not compatible with positivity constraints\"
>40	Argument	\"mode >= 5 is not compatible with positivity constraints\"
>41	PrimaryExpression	\"mode >= 5 is not compatible with positivity constraints\"
>42	Callee	mexErrMsgTxt
>43	Identifier	mexErrMsgTxt
>44	Condition	 
>45	AndExpression	pos && mode >= 5
>46	RelationalExpression	mode >= 5
>47	PrimaryExpression	5
>48	Identifier	mode
>49	Identifier	pos
>50	ExpressionStatement	 
>51	Expression	prhs [ 1 ] , \"numThreads\" , - 1
>52	Expression	\"numThreads\" , - 1
>53	UnaryOp	- 1
>54	PrimaryExpression	1
>55	UnaryOperator	-
>56	PrimaryExpression	\"numThreads\"
>57	ArrayIndexing	prhs [ 1 ]
>58	PrimaryExpression	1
>59	Identifier	prhs
>60	Statement	 
>61	Statement	 
>62	Statement	 
>63	Statement	 
>64	Statement	 
>65	Statement	 
>66	Statement	 
>67	ExpressionStatement	 
>68	Expression	prhs [ 1 ] , \"mode\" , 1
>69	Expression	\"mode\" , 1
>70	PrimaryExpression	1
>71	PrimaryExpression	\"mode\"
>72	ArrayIndexing	prhs [ 1 ]
>73	PrimaryExpression	1
>74	Identifier	prhs
>75	Statement	 
>76	Statement	 
>77	Statement	 
>78	Statement	 
>79	Statement	 
>80	Statement	 
>81	Statement	 
>82	IdentifierDeclStatement	 
>83	IdentifierDecl	pos = getScalarStructDef < bool > ( prhs [ 1 ] , \"pos\" , false )
>84	AssignmentExpr	pos = getScalarStructDef < bool > ( prhs [ 1 ] , \"pos\" , false )
>85	RelationalExpression	getScalarStructDef < bool > ( prhs [ 1 ] , \"pos\" , false )
>86	RelationalExpression	bool > ( prhs [ 1 ] , \"pos\" , false )
>87	Expression	prhs [ 1 ] , \"pos\" , false
>88	Expression	\"pos\" , false
>89	Identifier	false
>90	PrimaryExpression	\"pos\"
>91	ArrayIndexing	prhs [ 1 ]
>92	PrimaryExpression	1
>93	Identifier	prhs
>94	Identifier	bool
>95	Identifier	getScalarStructDef
>96	Identifier	pos
>97	Identifier	pos
>98	IdentifierDeclType	bool
>99	IdentifierDeclStatement	 
>100	IdentifierDecl	lambda3 = getScalarStructDef < T > ( prhs [ 1 ] , \"lambda3\" , 0 )
>101	AssignmentExpr	lambda3 = getScalarStructDef < T > ( prhs [ 1 ] , \"lambda3\" , 0 )
>102	RelationalExpression	getScalarStructDef < T > ( prhs [ 1 ] , \"lambda3\" , 0 )
>103	RelationalExpression	T > ( prhs [ 1 ] , \"lambda3\" , 0 )
>104	Expression	prhs [ 1 ] , \"lambda3\" , 0
>105	Expression	\"lambda3\" , 0
>106	PrimaryExpression	0
>107	PrimaryExpression	\"lambda3\"
>108	ArrayIndexing	prhs [ 1 ]
>109	PrimaryExpression	1
>110	Identifier	prhs
>111	Identifier	T
>112	Identifier	getScalarStructDef
>113	Identifier	lambda3
>114	Identifier	lambda3
>115	IdentifierDeclType	T
>116	IdentifierDeclStatement	 
>117	IdentifierDecl	lambda2 = getScalarStructDef < T > ( prhs [ 1 ] , \"lambda2\" , 0 )
>118	AssignmentExpr	lambda2 = getScalarStructDef < T > ( prhs [ 1 ] , \"lambda2\" , 0 )
>119	RelationalExpression	getScalarStructDef < T > ( prhs [ 1 ] , \"lambda2\" , 0 )
>120	RelationalExpression	T > ( prhs [ 1 ] , \"lambda2\" , 0 )
>121	Expression	prhs [ 1 ] , \"lambda2\" , 0
>122	Expression	\"lambda2\" , 0
>123	PrimaryExpression	0
>124	PrimaryExpression	\"lambda2\"
>125	ArrayIndexing	prhs [ 1 ]
>126	PrimaryExpression	1
>127	Identifier	prhs
>128	Identifier	T
>129	Identifier	getScalarStructDef
>130	Identifier	lambda2
>131	Identifier	lambda2
>132	IdentifierDeclType	T
>133	IdentifierDeclStatement	 
>134	IdentifierDecl	lambda1 = getScalarStructDef < T > ( prhs [ 1 ] , \"lambda1\" , 0 )
>135	AssignmentExpr	lambda1 = getScalarStructDef < T > ( prhs [ 1 ] , \"lambda1\" , 0 )
>136	RelationalExpression	getScalarStructDef < T > ( prhs [ 1 ] , \"lambda1\" , 0 )
>137	RelationalExpression	T > ( prhs [ 1 ] , \"lambda1\" , 0 )
>138	Expression	prhs [ 1 ] , \"lambda1\" , 0
>139	Expression	\"lambda1\" , 0
>140	PrimaryExpression	0
>141	PrimaryExpression	\"lambda1\"
>142	ArrayIndexing	prhs [ 1 ]
>143	PrimaryExpression	1
>144	Identifier	prhs
>145	Identifier	T
>146	Identifier	getScalarStructDef
>147	Identifier	lambda1
>148	Identifier	lambda1
>149	IdentifierDeclType	T
>150	IdentifierDeclStatement	 
>151	IdentifierDecl	thrs = getScalarStructDef < T > ( prhs [ 1 ] , \"thrs\" , T ( 1.0 ) )
>152	AssignmentExpr	thrs = getScalarStructDef < T > ( prhs [ 1 ] , \"thrs\" , T ( 1.0 ) )
>153	RelationalExpression	getScalarStructDef < T > ( prhs [ 1 ] , \"thrs\" , T ( 1.0 ) )
>154	RelationalExpression	T > ( prhs [ 1 ] , \"thrs\" , T ( 1.0 ) )
>155	Expression	prhs [ 1 ] , \"thrs\" , T ( 1.0 )
>156	Expression	\"thrs\" , T ( 1.0 )
>157	CallExpression	T ( 1.0 )
>158	ArgumentList	1.0
>159	Argument	1.0
>160	PrimaryExpression	1.0
>161	Callee	T
>162	Identifier	T
>163	PrimaryExpression	\"thrs\"
>164	ArrayIndexing	prhs [ 1 ]
>165	PrimaryExpression	1
>166	Identifier	prhs
>167	Identifier	T
>168	Identifier	getScalarStructDef
>169	Identifier	thrs
>170	Identifier	thrs
>171	IdentifierDeclType	T
>172	IdentifierDeclStatement	 
>173	IdentifierDecl	Y ( prY , m , n )
>174	Expression	prY , m , n
>175	Expression	m , n
>176	Identifier	n
>177	Identifier	m
>178	Identifier	prY
>179	Identifier	Y
>180	IdentifierDeclType	Matrix < T >
>181	IdentifierDeclStatement	 
>182	IdentifierDecl	X ( prX , m , n )
>183	Expression	prX , m , n
>184	Expression	m , n
>185	Identifier	n
>186	Identifier	m
>187	Identifier	prX
>188	Identifier	X
>189	IdentifierDeclType	Matrix < T >
>190	ExpressionStatement	 
>191	CallExpression	mxGetPr ( plhs [ 0 ] )
>192	ArgumentList	plhs [ 0 ]
>193	Argument	plhs [ 0 ]
>194	ArrayIndexing	plhs [ 0 ]
>195	PrimaryExpression	0
>196	Identifier	plhs
>197	Callee	mxGetPr
>198	Identifier	mxGetPr
>199	Statement	 
>200	Statement	 
>201	Statement	 
>202	Statement	 
>203	Statement	 
>204	Statement	 
>205	Statement	 
>206	Statement	 
>207	Statement	 
>208	ExpressionStatement	 
>209	AssignmentExpr	plhs [ 0 ] = createMatrix < T > ( m , n )
>210	RelationalExpression	createMatrix < T > ( m , n )
>211	RelationalExpression	T > ( m , n )
>212	Expression	m , n
>213	Identifier	n
>214	Identifier	m
>215	Identifier	T
>216	Identifier	createMatrix
>217	ArrayIndexing	plhs [ 0 ]
>218	PrimaryExpression	0
>219	Identifier	plhs
>220	ExpressionStatement	 
>221	ArrayIndexing	dimsX [ 1 ]
>222	PrimaryExpression	1
>223	Identifier	dimsX
>224	Statement	 
>225	Statement	 
>226	Statement	 
>227	Statement	 
>228	Statement	 
>229	Statement	 
>230	Statement	 
>231	ExpressionStatement	 
>232	ArrayIndexing	dimsX [ 0 ]
>233	PrimaryExpression	0
>234	Identifier	dimsX
>235	Statement	 
>236	Statement	 
>237	Statement	 
>238	Statement	 
>239	Statement	 
>240	Statement	 
>241	Statement	 
>242	IdentifierDeclStatement	 
>243	IdentifierDecl	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>244	AssignmentExpr	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>245	CallExpression	mxGetDimensions ( prhs [ 0 ] )
>246	ArgumentList	prhs [ 0 ]
>247	Argument	prhs [ 0 ]
>248	ArrayIndexing	prhs [ 0 ]
>249	PrimaryExpression	0
>250	Identifier	prhs
>251	Callee	mxGetDimensions
>252	Identifier	mxGetDimensions
>253	Identifier	dimsX
>254	Identifier	dimsX
>255	IdentifierDeclType	const mwSize *
>256	ExpressionStatement	 
>257	CallExpression	mxGetPr ( prhs [ 0 ] )
>258	ArgumentList	prhs [ 0 ]
>259	Argument	prhs [ 0 ]
>260	ArrayIndexing	prhs [ 0 ]
>261	PrimaryExpression	0
>262	Identifier	prhs
>263	Callee	mxGetPr
>264	Identifier	mxGetPr
>265	Statement	 
>266	Statement	 
>267	Statement	 
>268	Statement	 
>269	Statement	 
>270	Statement	 
>271	Statement	 
>272	Statement	 
>273	Statement	 
>274	IfStatement	if ( ! mxIsStruct ( prhs [ 1 ] ) )
>275	ExpressionStatement	 
>276	CallExpression	mexErrMsgTxt ( \"argument 2 should be struct\" )
>277	ArgumentList	\"argument 2 should be struct\"
>278	Argument	\"argument 2 should be struct\"
>279	PrimaryExpression	\"argument 2 should be struct\"
>280	Callee	mexErrMsgTxt
>281	Identifier	mexErrMsgTxt
>282	Condition	 
>283	UnaryOp	! mxIsStruct ( prhs [ 1 ] )
>284	CallExpression	mxIsStruct ( prhs [ 1 ] )
>285	ArgumentList	prhs [ 1 ]
>286	Argument	prhs [ 1 ]
>287	ArrayIndexing	prhs [ 1 ]
>288	PrimaryExpression	1
>289	Identifier	prhs
>290	Callee	mxIsStruct
>291	Identifier	mxIsStruct
>292	UnaryOperator	!
>293	IfStatement	if ( mxIsSparse ( prhs [ 0 ] ) )
>294	ExpressionStatement	 
>295	CallExpression	mexErrMsgTxt ( \"argument 1 should be full\" )
>296	ArgumentList	\"argument 1 should be full\"
>297	Argument	\"argument 1 should be full\"
>298	PrimaryExpression	\"argument 1 should be full\"
>299	Callee	mexErrMsgTxt
>300	Identifier	mexErrMsgTxt
>301	Condition	 
>302	CallExpression	mxIsSparse ( prhs [ 0 ] )
>303	ArgumentList	prhs [ 0 ]
>304	Argument	prhs [ 0 ]
>305	ArrayIndexing	prhs [ 0 ]
>306	PrimaryExpression	0
>307	Identifier	prhs
>308	Callee	mxIsSparse
>309	Identifier	mxIsSparse
>310	IfStatement	if ( ! mexCheckType < T > ( prhs [ 0 ] ) )
>311	ExpressionStatement	 
>312	CallExpression	mexErrMsgTxt ( \"type of argument 1 is not consistent\" )
>313	ArgumentList	\"type of argument 1 is not consistent\"
>314	Argument	\"type of argument 1 is not consistent\"
>315	PrimaryExpression	\"type of argument 1 is not consistent\"
>316	Callee	mexErrMsgTxt
>317	Identifier	mexErrMsgTxt
>318	Condition	 
>319	RelationalExpression	! mexCheckType < T > ( prhs [ 0 ] )
>320	RelationalExpression	T > ( prhs [ 0 ] )
>321	ArrayIndexing	prhs [ 0 ]
>322	PrimaryExpression	0
>323	Identifier	prhs
>324	Identifier	T
>325	UnaryOp	! mexCheckType
>326	Identifier	mexCheckType
>327	UnaryOperator	!
>356	FunctionDef	mexFunction (int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ])
>357	ParameterList	int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ]
>358	Parameter	 
>359	Identifier	prhs
>360	ParameterType	const mxArray * [ ]
>361	Parameter	 
>362	Identifier	nrhs
>363	ParameterType	int
>364	Parameter	 
>365	Identifier	plhs
>366	ParameterType	mxArray * [ ]
>367	Parameter	 
>368	Identifier	nlhs
>369	ParameterType	int
>370	ReturnType	void
>371	CompoundStatement	 
>372	IfStatement	if ( mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS )
>373	ElseStatement	else
>374	CompoundStatement	 
>375	ExpressionStatement	 
>376	RelationalExpression	callFunction < float > ( plhs , prhs )
>377	RelationalExpression	float > ( plhs , prhs )
>378	Expression	plhs , prhs
>379	Identifier	prhs
>380	Identifier	plhs
>381	Identifier	float
>382	Identifier	callFunction
>383	CompoundStatement	 
>384	ExpressionStatement	 
>385	RelationalExpression	callFunction < double > ( plhs , prhs )
>386	RelationalExpression	double > ( plhs , prhs )
>387	Expression	plhs , prhs
>388	Identifier	prhs
>389	Identifier	plhs
>390	Identifier	double
>391	Identifier	callFunction
>392	Condition	 
>393	EqualityExpression	mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS
>394	Identifier	mxDOUBLE_CLASS
>395	CallExpression	mxGetClassID ( prhs [ 0 ] )
>396	ArgumentList	prhs [ 0 ]
>397	Argument	prhs [ 0 ]
>398	ArrayIndexing	prhs [ 0 ]
>399	PrimaryExpression	0
>400	Identifier	prhs
>401	Callee	mxGetClassID
>402	Identifier	mxGetClassID
>403	IfStatement	if ( nlhs != 1 )
>404	ExpressionStatement	 
>405	CallExpression	mexErrMsgTxt ( \"Bad number of output arguments\" )
>406	ArgumentList	\"Bad number of output arguments\"
>407	Argument	\"Bad number of output arguments\"
>408	PrimaryExpression	\"Bad number of output arguments\"
>409	Callee	mexErrMsgTxt
>410	Identifier	mexErrMsgTxt
>411	Condition	 
>412	EqualityExpression	nlhs != 1
>413	PrimaryExpression	1
>414	Identifier	nlhs
>415	IfStatement	if ( nrhs != 2 )
>416	ExpressionStatement	 
>417	CallExpression	mexErrMsgTxt ( \"Bad number of inputs arguments\" )
>418	ArgumentList	\"Bad number of inputs arguments\"
>419	Argument	\"Bad number of inputs arguments\"
>420	PrimaryExpression	\"Bad number of inputs arguments\"
>421	Callee	mexErrMsgTxt
>422	Identifier	mexErrMsgTxt
>423	Condition	 
>424	EqualityExpression	nrhs != 2
>425	PrimaryExpression	2
>426	Identifier	nrhs
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=310,293,274,273,272,271,270,269,268,267,266,265,256,242,241,240,13,36,50,60,61,62,63,64,65,66,67,75,76,77,78,79,80,81,82,99,116,133,150,172,181,190,199,200,201,202,203,204,205,206,207,208,220,224,225,226,227,228,229,230,231,235,236,237,238,239
<13=14
<14=32,15
<15=30,28,26,24,22,20,18,16
<16=17
<18=19
<20=21
<22=23
<24=25
<26=27
<28=29
<30=31
<32=33
<33=35,34
<36=44,37
<37=38
<38=42,39
<39=40
<40=41
<42=43
<44=45
<45=49,46
<46=48,47
<50=51
<51=57,52
<52=56,53
<53=55,54
<57=59,58
<67=68
<68=72,69
<69=71,70
<72=74,73
<82=83
<83=98,97,84
<84=96,85
<85=95,86
<86=94,87
<87=91,88
<88=90,89
<91=93,92
<99=100
<100=115,114,101
<101=113,102
<102=112,103
<103=111,104
<104=108,105
<105=107,106
<108=110,109
<116=117
<117=132,131,118
<118=130,119
<119=129,120
<120=128,121
<121=125,122
<122=124,123
<125=127,126
<133=134
<134=149,148,135
<135=147,136
<136=146,137
<137=145,138
<138=142,139
<139=141,140
<142=144,143
<150=151
<151=171,170,152
<152=169,153
<153=168,154
<154=167,155
<155=164,156
<156=163,157
<157=161,158
<158=159
<159=160
<161=162
<164=166,165
<172=173
<173=180,179,174
<174=178,175
<175=177,176
<181=182
<182=189,188,183
<183=187,184
<184=186,185
<190=191
<191=197,192
<192=193
<193=194
<194=196,195
<197=198
<208=209
<209=217,210
<210=216,211
<211=215,212
<212=214,213
<217=219,218
<220=221
<221=223,222
<231=232
<232=234,233
<242=243
<243=255,254,244
<244=253,245
<245=251,246
<246=247
<247=248
<248=250,249
<251=252
<256=257
<257=263,258
<258=259
<259=260
<260=262,261
<263=264
<274=282,275
<275=276
<276=280,277
<277=278
<278=279
<280=281
<282=283
<283=292,284
<284=290,285
<285=286
<286=287
<287=289,288
<290=291
<293=301,294
<294=295
<295=299,296
<296=297
<297=298
<299=300
<301=302
<302=308,303
<303=304
<304=305
<305=307,306
<308=309
<310=318,311
<311=312
<312=316,313
<313=314
<314=315
<316=317
<318=319
<319=325,320
<320=324,321
<321=323,322
<325=327,326
<356=371,370,357
<357=367,364,361,358
<358=360,359
<361=363,362
<364=366,365
<367=369,368
<371=415,403,372
<372=392,383,373
<373=374
<374=375
<375=376
<376=382,377
<377=381,378
<378=380,379
<383=384
<384=385
<385=391,386
<386=390,387
<387=389,388
<392=393
<393=395,394
<395=401,396
<396=397
<397=398
<398=400,399
<401=402
<403=411,404
<404=405
<405=409,406
<406=407
<407=408
<409=410
<411=412
<412=414,413
<415=423,416
<416=417
<417=421,418
<418=419
<419=420
<421=422
<423=424
<424=426,425
