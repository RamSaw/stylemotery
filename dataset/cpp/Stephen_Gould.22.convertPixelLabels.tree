>3	FunctionDef	usage ()
>4	ParameterList	 
>5	ReturnType	void
>6	CompoundStatement	 
>7	ExpressionStatement	 
>8	ShiftExpression	cerr << \"OPTIONS
>9	ShiftExpression	\"OPTIONS
>10	ShiftExpression	\"  -i <ext>          
>11	ShiftExpression	\"  -o <ext>          
>12	ShiftExpression	\"  -x                
>13	ShiftExpression	DRWN_STANDARD_OPTIONS_USAGE << endl
>14	Identifier	endl
>15	Identifier	DRWN_STANDARD_OPTIONS_USAGE
>16	PrimaryExpression	\"  -x                
>17	PrimaryExpression	\"  -o <ext>          
>18	PrimaryExpression	\"  -i <ext>          
>19	PrimaryExpression	\"OPTIONS
>20	Identifier	cerr
>21	ExpressionStatement	 
>22	ShiftExpression	cerr << \"USAGE
>23	PrimaryExpression	\"USAGE
>24	Identifier	cerr
>25	ExpressionStatement	 
>26	ShiftExpression	cerr << DRWN_USAGE_HEADER << endl
>27	ShiftExpression	DRWN_USAGE_HEADER << endl
>28	Identifier	endl
>29	Identifier	DRWN_USAGE_HEADER
>30	Identifier	cerr
>34	FunctionDef	main (int argc , char * argv [ ])
>35	ParameterList	int argc , char * argv [ ]
>36	Parameter	 
>37	Identifier	argv
>38	ParameterType	char * [ ]
>39	Parameter	 
>40	Identifier	argc
>41	ParameterType	int
>42	ReturnType	int
>43	CompoundStatement	 
>44	ReturnStatement	 
>45	PrimaryExpression	0
>46	ExpressionStatement	 
>47	CallExpression	drwnCodeProfiler 
>48	ArgumentList	 
>49	Callee	drwnCodeProfiler 
>50	Identifier	drwnCodeProfiler 
>51	ExpressionStatement	 
>52	CallExpression	drwnCodeProfiler 
>53	ArgumentList	drwnCodeProfiler 
>54	Argument	drwnCodeProfiler 
>55	CallExpression	drwnCodeProfiler 
>56	ArgumentList	\"main\"
>57	Argument	\"main\"
>58	PrimaryExpression	\"main\"
>59	Callee	drwnCodeProfiler 
>60	Identifier	drwnCodeProfiler 
>61	Callee	drwnCodeProfiler 
>62	Identifier	drwnCodeProfiler 
>63	ExpressionStatement	 
>64	CallExpression	cv 
>65	ArgumentList	 
>66	Callee	cv 
>67	Identifier	cv 
>68	IfStatement	if ( bVisualize && ( baseNames . size ( ) == 1 ) )
>69	CompoundStatement	 
>70	ExpressionStatement	 
>71	CallExpression	cv 
>72	ArgumentList	- 1
>73	Argument	- 1
>74	UnaryOp	- 1
>75	PrimaryExpression	1
>76	UnaryOperator	-
>77	Callee	cv 
>78	Identifier	cv 
>79	Condition	 
>80	AndExpression	bVisualize && ( baseNames . size ( ) == 1 )
>81	EqualityExpression	baseNames . size ( ) == 1
>82	PrimaryExpression	1
>83	CallExpression	baseNames . size ( )
>84	ArgumentList	 
>85	Callee	baseNames . size
>86	MemberAccess	baseNames . size
>87	Identifier	size
>88	Identifier	baseNames
>89	Identifier	bVisualize
>90	ForStatement	for ( int i = 0 ; i < ( int ) baseNames . size ( ) ; i ++ )
>91	CompoundStatement	 
>92	ExpressionStatement	 
>93	CallExpression	ofs . close ( )
>94	ArgumentList	 
>95	Callee	ofs . close
>96	MemberAccess	ofs . close
>97	Identifier	close
>98	Identifier	ofs
>99	ForStatement	for ( int y = 0 ; y < img . rows ; y ++ )
>100	CompoundStatement	 
>101	ExpressionStatement	 
>102	ShiftExpression	ofs << \"\n\"
>103	PrimaryExpression	\"\n\"
>104	Identifier	ofs
>105	ForStatement	for ( int x = 0 ; x < img . cols ; x ++ )
>106	CompoundStatement	 
>107	ExpressionStatement	 
>108	ShiftExpression	ofs << ( ( it == table . end ( ) ) ? - 1 
>109	ConditionalExpression	( it == table . end ( ) ) ? - 1 
>110	PtrMemberAccess	it -> second
>111	Identifier	second
>112	Identifier	it
>113	UnaryOp	- 1
>114	PrimaryExpression	1
>115	UnaryOperator	-
>116	Condition	it == table . end ( )
>117	EqualityExpression	it == table . end ( )
>118	CallExpression	table . end ( )
>119	ArgumentList	 
>120	Callee	table . end
>121	MemberAccess	table . end
>122	Identifier	end
>123	Identifier	table
>124	Identifier	it
>125	Identifier	ofs
>126	IdentifierDeclStatement	 
>127	IdentifierDecl	it = table . find ( c )
>128	AssignmentExpr	it = table . find ( c )
>129	CallExpression	table . find ( c )
>130	ArgumentList	c
>131	Argument	c
>132	Identifier	c
>133	Callee	table . find
>134	MemberAccess	table . find
>135	Identifier	find
>136	Identifier	table
>137	Identifier	it
>138	Identifier	it
>139	IdentifierDeclType	map < unsigned int , int > 
>140	IdentifierDeclStatement	 
>141	IdentifierDecl	c = ( red << 16 ) | ( green << 8 ) | blue
>142	AssignmentExpr	c = ( red << 16 ) | ( green << 8 ) | blue
>143	InclusiveOrExpression	( red << 16 ) | ( green << 8 ) | blue
>144	InclusiveOrExpression	( green << 8 ) | blue
>145	Identifier	blue
>146	ShiftExpression	green << 8
>147	PrimaryExpression	8
>148	Identifier	green
>149	ShiftExpression	red << 16
>150	PrimaryExpression	16
>151	Identifier	red
>152	Identifier	c
>153	Identifier	c
>154	IdentifierDeclType	unsigned int
>155	ExpressionStatement	 
>156	RelationalExpression	char > ( y , 3 * x + 0 )
>157	Expression	y , 3 * x + 0
>158	AdditiveExpression	3 * x + 0
>159	PrimaryExpression	0
>160	MultiplicativeExpression	3 * x
>161	Identifier	x
>162	PrimaryExpression	3
>163	Identifier	y
>164	Identifier	char
>165	Statement	 
>166	Statement	 
>167	Statement	 
>168	Statement	 
>169	Statement	 
>170	Statement	 
>171	Statement	 
>172	Statement	 
>173	Statement	 
>174	ExpressionStatement	 
>175	RelationalExpression	char > ( y , 3 * x + 1 )
>176	Expression	y , 3 * x + 1
>177	AdditiveExpression	3 * x + 1
>178	PrimaryExpression	1
>179	MultiplicativeExpression	3 * x
>180	Identifier	x
>181	PrimaryExpression	3
>182	Identifier	y
>183	Identifier	char
>184	Statement	 
>185	Statement	 
>186	Statement	 
>187	Statement	 
>188	Statement	 
>189	Statement	 
>190	Statement	 
>191	Statement	 
>192	Statement	 
>193	ExpressionStatement	 
>194	RelationalExpression	char > ( y , 3 * x + 2 )
>195	Expression	y , 3 * x + 2
>196	AdditiveExpression	3 * x + 2
>197	PrimaryExpression	2
>198	MultiplicativeExpression	3 * x
>199	Identifier	x
>200	PrimaryExpression	3
>201	Identifier	y
>202	Identifier	char
>203	Statement	 
>204	Statement	 
>205	Statement	 
>206	Statement	 
>207	Statement	 
>208	Statement	 
>209	Statement	 
>210	Statement	 
>211	Statement	 
>212	IfStatement	if ( x != 0 )
>213	ExpressionStatement	 
>214	ShiftExpression	ofs << \" \"
>215	PrimaryExpression	\" \"
>216	Identifier	ofs
>217	Condition	 
>218	EqualityExpression	x != 0
>219	PrimaryExpression	0
>220	Identifier	x
>221	IncDecOp	 
>222	IncDec	++
>223	Identifier	x
>224	Condition	 
>225	RelationalExpression	x < img . cols
>226	MemberAccess	img . cols
>227	Identifier	cols
>228	Identifier	img
>229	Identifier	x
>230	ForInit	 
>231	IdentifierDeclStatement	int x = 0 ;
>232	IdentifierDecl	x = 0
>233	AssignmentExpr	x = 0
>234	PrimaryExpression	0
>235	Identifier	x
>236	Identifier	x
>237	IdentifierDeclType	int
>238	IncDecOp	 
>239	IncDec	++
>240	Identifier	y
>241	Condition	 
>242	RelationalExpression	y < img . rows
>243	MemberAccess	img . rows
>244	Identifier	rows
>245	Identifier	img
>246	Identifier	y
>247	ForInit	 
>248	IdentifierDeclStatement	int y = 0 ;
>249	IdentifierDecl	y = 0
>250	AssignmentExpr	y = 0
>251	PrimaryExpression	0
>252	Identifier	y
>253	Identifier	y
>254	IdentifierDeclType	int
>255	IdentifierDeclStatement	 
>256	IdentifierDecl	ofs ( outFilename . c_str ( ) )
>257	CallExpression	outFilename . c_str ( )
>258	ArgumentList	 
>259	Callee	outFilename . c_str
>260	MemberAccess	outFilename . c_str
>261	Identifier	c_str
>262	Identifier	outFilename
>263	Identifier	ofs
>264	IdentifierDeclType	ofstream
>265	IdentifierDeclStatement	 
>266	IdentifierDecl	outFilename = gMultiSegConfig . filebase ( \"lblDir\" , baseNames [ i ] ) + string ( outExt )
>267	AssignmentExpr	outFilename = gMultiSegConfig . filebase ( \"lblDir\" , baseNames [ i ] ) + string ( outExt )
>268	AdditiveExpression	gMultiSegConfig . filebase ( \"lblDir\" , baseNames [ i ] ) + string ( outExt )
>269	CallExpression	string ( outExt )
>270	ArgumentList	outExt
>271	Argument	outExt
>272	Identifier	outExt
>273	Callee	string
>274	Identifier	string
>275	CallExpression	gMultiSegConfig . filebase ( \"lblDir\" , baseNames [ i ] )
>276	ArgumentList	\"lblDir\"
>277	Argument	baseNames [ i ]
>278	ArrayIndexing	baseNames [ i ]
>279	Identifier	i
>280	Identifier	baseNames
>281	Argument	\"lblDir\"
>282	PrimaryExpression	\"lblDir\"
>283	Callee	gMultiSegConfig . filebase
>284	MemberAccess	gMultiSegConfig . filebase
>285	Identifier	filebase
>286	Identifier	gMultiSegConfig
>287	Identifier	outFilename
>288	Identifier	outFilename
>289	IdentifierDeclType	const string
>290	IfStatement	if ( bVisualize )
>291	CompoundStatement	 
>292	ExpressionStatement	 
>293	CallExpression	cv 
>294	ArgumentList	100
>295	Argument	100
>296	PrimaryExpression	100
>297	Callee	cv 
>298	Identifier	cv 
>299	ExpressionStatement	 
>300	CallExpression	cv 
>301	ArgumentList	WINDOW_NAME
>302	Argument	img
>303	Identifier	img
>304	Argument	WINDOW_NAME
>305	Identifier	WINDOW_NAME
>306	Callee	cv 
>307	Identifier	cv 
>308	ExpressionStatement	 
>309	CallExpression	cv 
>310	ArgumentList	WINDOW_NAME
>311	Argument	WINDOW_NAME
>312	Identifier	WINDOW_NAME
>313	Callee	cv 
>314	Identifier	cv 
>315	Condition	 
>316	Identifier	bVisualize
>317	ExpressionStatement	 
>318	CallExpression	DRWN_ASSERT_MSG ( img . data != NULL , \"could not load image \" << inFilename )
>319	ArgumentList	img . data != NULL
>320	Argument	\"could not load image \" << inFilename
>321	ShiftExpression	\"could not load image \" << inFilename
>322	Identifier	inFilename
>323	PrimaryExpression	\"could not load image \"
>324	Argument	img . data != NULL
>325	EqualityExpression	img . data != NULL
>326	Identifier	NULL
>327	MemberAccess	img . data
>328	Identifier	data
>329	Identifier	img
>330	Callee	DRWN_ASSERT_MSG
>331	Identifier	DRWN_ASSERT_MSG
>332	IdentifierDeclStatement	 
>333	IdentifierDecl	img = cv 
>334	AssignmentExpr	img = cv 
>335	CallExpression	cv 
>336	ArgumentList	inFilename
>337	Argument	CV_LOAD_IMAGE_COLOR
>338	Identifier	CV_LOAD_IMAGE_COLOR
>339	Argument	inFilename
>340	Identifier	inFilename
>341	Callee	cv 
>342	Identifier	cv 
>343	Identifier	img
>344	Identifier	img
>345	IdentifierDeclType	cv 
>346	IdentifierDeclStatement	 
>347	IdentifierDecl	inFilename = gMultiSegConfig . filebase ( \"lblDir\" , baseNames [ i ] ) + string ( inExt )
>348	AssignmentExpr	inFilename = gMultiSegConfig . filebase ( \"lblDir\" , baseNames [ i ] ) + string ( inExt )
>349	AdditiveExpression	gMultiSegConfig . filebase ( \"lblDir\" , baseNames [ i ] ) + string ( inExt )
>350	CallExpression	string ( inExt )
>351	ArgumentList	inExt
>352	Argument	inExt
>353	Identifier	inExt
>354	Callee	string
>355	Identifier	string
>356	CallExpression	gMultiSegConfig . filebase ( \"lblDir\" , baseNames [ i ] )
>357	ArgumentList	\"lblDir\"
>358	Argument	baseNames [ i ]
>359	ArrayIndexing	baseNames [ i ]
>360	Identifier	i
>361	Identifier	baseNames
>362	Argument	\"lblDir\"
>363	PrimaryExpression	\"lblDir\"
>364	Callee	gMultiSegConfig . filebase
>365	MemberAccess	gMultiSegConfig . filebase
>366	Identifier	filebase
>367	Identifier	gMultiSegConfig
>368	Identifier	inFilename
>369	Identifier	inFilename
>370	IdentifierDeclType	const string
>371	IncDecOp	 
>372	IncDec	++
>373	Identifier	i
>374	Condition	 
>375	RelationalExpression	i < ( int ) baseNames . size ( )
>376	CastExpression	( int ) baseNames . size ( )
>377	CallExpression	baseNames . size ( )
>378	ArgumentList	 
>379	Callee	baseNames . size
>380	MemberAccess	baseNames . size
>381	Identifier	size
>382	Identifier	baseNames
>383	CastTarget	int
>384	Identifier	i
>385	ForInit	 
>386	IdentifierDeclStatement	int i = 0 ;
>387	IdentifierDecl	i = 0
>388	AssignmentExpr	i = 0
>389	PrimaryExpression	0
>390	Identifier	i
>391	Identifier	i
>392	IdentifierDeclType	int
>393	ForStatement	for ( map < unsigned int , int > 
>394	CompoundStatement	 
>395	ExpressionStatement	 
>396	CallExpression	DRWN_LOG_DEBUG ( \"colour (\" << ( int ) gMultiSegRegionDefs . red ( it -> first ) << \", \" << ( int ) gMultiSegRegionDefs \
>397	ArgumentList	\"colour (\" << ( int ) gMultiSegRegionDefs . red ( it -> first ) << \", \" << ( int ) gMultiSegRegionDefs . green ( \
>398	Argument	\"colour (\" << ( int ) gMultiSegRegionDefs . red ( it -> first ) << \", \" << ( int ) gMultiSegRegionDefs . green ( \
>399	ShiftExpression	\"colour (\" << ( int ) gMultiSegRegionDefs . red ( it -> first ) << \", \" << ( int ) gMultiSegRegionDefs \
>400	ShiftExpression	( int ) gMultiSegRegionDefs . red ( it -> first ) << \", \" << ( int ) gMultiSegRegionDefs . green ( it \
>401	ShiftExpression	\", \" << ( int ) gMultiSegRegionDefs . green ( it -> first ) << \", \" << ( int ) gMultiSegRegionDefs . \
>402	ShiftExpression	( int ) gMultiSegRegionDefs . green ( it -> first ) << \", \" << ( int ) gMultiSegRegionDefs . blue ( \
>403	ShiftExpression	\", \" << ( int ) gMultiSegRegionDefs . blue ( it -> first ) << \") corresponds to label \" << it -> second
>404	ShiftExpression	( int ) gMultiSegRegionDefs . blue ( it -> first ) << \") corresponds to label \" << it -> second
>405	ShiftExpression	\") corresponds to label \" << it -> second
>406	PtrMemberAccess	it -> second
>407	Identifier	second
>408	Identifier	it
>409	PrimaryExpression	\") corresponds to label \"
>410	CastExpression	( int ) gMultiSegRegionDefs . blue ( it -> first )
>411	CallExpression	gMultiSegRegionDefs . blue ( it -> first )
>412	ArgumentList	it -> first
>413	Argument	it -> first
>414	PtrMemberAccess	it -> first
>415	Identifier	first
>416	Identifier	it
>417	Callee	gMultiSegRegionDefs . blue
>418	MemberAccess	gMultiSegRegionDefs . blue
>419	Identifier	blue
>420	Identifier	gMultiSegRegionDefs
>421	CastTarget	int
>422	PrimaryExpression	\", \"
>423	CastExpression	( int ) gMultiSegRegionDefs . green ( it -> first )
>424	CallExpression	gMultiSegRegionDefs . green ( it -> first )
>425	ArgumentList	it -> first
>426	Argument	it -> first
>427	PtrMemberAccess	it -> first
>428	Identifier	first
>429	Identifier	it
>430	Callee	gMultiSegRegionDefs . green
>431	MemberAccess	gMultiSegRegionDefs . green
>432	Identifier	green
>433	Identifier	gMultiSegRegionDefs
>434	CastTarget	int
>435	PrimaryExpression	\", \"
>436	CastExpression	( int ) gMultiSegRegionDefs . red ( it -> first )
>437	CallExpression	gMultiSegRegionDefs . red ( it -> first )
>438	ArgumentList	it -> first
>439	Argument	it -> first
>440	PtrMemberAccess	it -> first
>441	Identifier	first
>442	Identifier	it
>443	Callee	gMultiSegRegionDefs . red
>444	MemberAccess	gMultiSegRegionDefs . red
>445	Identifier	red
>446	Identifier	gMultiSegRegionDefs
>447	CastTarget	int
>448	PrimaryExpression	\"colour (\"
>449	Callee	DRWN_LOG_DEBUG
>450	Identifier	DRWN_LOG_DEBUG
>451	UnaryExpression	 
>452	Identifier	it
>453	IncDec	++
>454	Condition	 
>455	EqualityExpression	it != table . end ( )
>456	CallExpression	table . end ( )
>457	ArgumentList	 
>458	Callee	table . end
>459	MemberAccess	table . end
>460	Identifier	end
>461	Identifier	table
>462	Identifier	it
>463	ForInit	 
>464	IdentifierDeclStatement	map < unsigned int , int > 
>465	IdentifierDecl	it = table . begin ( )
>466	AssignmentExpr	it = table . begin ( )
>467	CallExpression	table . begin ( )
>468	ArgumentList	 
>469	Callee	table . begin
>470	MemberAccess	table . begin
>471	Identifier	begin
>472	Identifier	table
>473	Identifier	it
>474	Identifier	it
>475	IdentifierDeclType	map < unsigned int , int > 
>476	ForStatement	for ( set < int > 
>477	CompoundStatement	 
>478	ExpressionStatement	 
>479	AssignmentExpr	table [ gMultiSegRegionDefs . color ( * ik ) ] = * ik
>480	UnaryOp	* ik
>481	Identifier	ik
>482	UnaryOperator	*
>483	ArrayIndexing	table [ gMultiSegRegionDefs . color ( * ik ) ]
>484	CallExpression	gMultiSegRegionDefs . color ( * ik )
>485	ArgumentList	* ik
>486	Argument	* ik
>487	UnaryOp	* ik
>488	Identifier	ik
>489	UnaryOperator	*
>490	Callee	gMultiSegRegionDefs . color
>491	MemberAccess	gMultiSegRegionDefs . color
>492	Identifier	color
>493	Identifier	gMultiSegRegionDefs
>494	Identifier	table
>495	UnaryExpression	 
>496	Identifier	ik
>497	IncDec	++
>498	Condition	 
>499	EqualityExpression	ik != keys . end ( )
>500	CallExpression	keys . end ( )
>501	ArgumentList	 
>502	Callee	keys . end
>503	MemberAccess	keys . end
>504	Identifier	end
>505	Identifier	keys
>506	Identifier	ik
>507	ForInit	 
>508	IdentifierDeclStatement	set < int > 
>509	IdentifierDecl	ik = keys . begin ( )
>510	AssignmentExpr	ik = keys . begin ( )
>511	CallExpression	keys . begin ( )
>512	ArgumentList	 
>513	Callee	keys . begin
>514	MemberAccess	keys . begin
>515	Identifier	begin
>516	Identifier	keys
>517	Identifier	ik
>518	Identifier	ik
>519	IdentifierDeclType	set < int > 
>520	IdentifierDeclStatement	 
>521	IdentifierDecl	keys ( gMultiSegRegionDefs . keys ( ) )
>522	CallExpression	gMultiSegRegionDefs . keys ( )
>523	ArgumentList	 
>524	Callee	gMultiSegRegionDefs . keys
>525	MemberAccess	gMultiSegRegionDefs . keys
>526	Identifier	keys
>527	Identifier	gMultiSegRegionDefs
>528	Identifier	keys
>529	IdentifierDeclType	set < int >
>530	IdentifierDeclStatement	 
>531	IdentifierDecl	table
>532	Identifier	table
>533	IdentifierDeclType	map < unsigned int , int >
>534	IfStatement	if ( ! drwnDirExists ( gMultiSegConfig . filebase ( \"lblDir\" , \"\" ) . c_str ( ) ) )
>535	CompoundStatement	 
>536	ExpressionStatement	 
>537	CallExpression	DRWN_LOG_FATAL ( \"input/output labels directory \" << gMultiSegConfig . filebase ( \"lblDir\" , \"\" ) << \" does not \
>538	ArgumentList	\"input/output labels directory \" << gMultiSegConfig . filebase ( \"lblDir\" , \"\" ) << \" does not exist\"
>539	Argument	\"input/output labels directory \" << gMultiSegConfig . filebase ( \"lblDir\" , \"\" ) << \" does not exist\"
>540	ShiftExpression	\"input/output labels directory \" << gMultiSegConfig . filebase ( \"lblDir\" , \"\" ) << \" does not exist\"\
>541	ShiftExpression	gMultiSegConfig . filebase ( \"lblDir\" , \"\" ) << \" does not exist\"
>542	PrimaryExpression	\" does not exist\"
>543	CallExpression	gMultiSegConfig . filebase ( \"lblDir\" , \"\" )
>544	ArgumentList	\"lblDir\"
>545	Argument	\"\"
>546	PrimaryExpression	\"\"
>547	Argument	\"lblDir\"
>548	PrimaryExpression	\"lblDir\"
>549	Callee	gMultiSegConfig . filebase
>550	MemberAccess	gMultiSegConfig . filebase
>551	Identifier	filebase
>552	Identifier	gMultiSegConfig
>553	PrimaryExpression	\"input/output labels directory \"
>554	Callee	DRWN_LOG_FATAL
>555	Identifier	DRWN_LOG_FATAL
>556	Condition	 
>557	UnaryOp	! drwnDirExists ( gMultiSegConfig . filebase ( \"lblDir\" , \"\" ) . c_str ( ) )
>558	CallExpression	drwnDirExists ( gMultiSegConfig . filebase ( \"lblDir\" , \"\" ) . c_str ( ) )
>559	ArgumentList	gMultiSegConfig . filebase ( \"lblDir\" , \"\" ) . c_str ( )
>560	Argument	gMultiSegConfig . filebase ( \"lblDir\" , \"\" ) . c_str ( )
>561	CallExpression	gMultiSegConfig . filebase ( \"lblDir\" , \"\" ) . c_str ( )
>562	ArgumentList	 
>563	Callee	gMultiSegConfig . filebase ( \"lblDir\" , \"\" ) . c_str
>564	MemberAccess	gMultiSegConfig . filebase ( \"lblDir\" , \"\" ) . c_str
>565	Identifier	c_str
>566	CallExpression	gMultiSegConfig . filebase ( \"lblDir\" , \"\" )
>567	ArgumentList	\"lblDir\"
>568	Argument	\"\"
>569	PrimaryExpression	\"\"
>570	Argument	\"lblDir\"
>571	PrimaryExpression	\"lblDir\"
>572	Callee	gMultiSegConfig . filebase
>573	MemberAccess	gMultiSegConfig . filebase
>574	Identifier	filebase
>575	Identifier	gMultiSegConfig
>576	Callee	drwnDirExists
>577	Identifier	drwnDirExists
>578	UnaryOperator	!
>579	IfStatement	if ( drwnFileExists ( imageList ) )
>580	ElseStatement	else
>581	CompoundStatement	 
>582	ExpressionStatement	 
>583	CallExpression	baseNames . push_back ( string ( imageList ) )
>584	ArgumentList	string ( imageList )
>585	Argument	string ( imageList )
>586	CallExpression	string ( imageList )
>587	ArgumentList	imageList
>588	Argument	imageList
>589	Identifier	imageList
>590	Callee	string
>591	Identifier	string
>592	Callee	baseNames . push_back
>593	MemberAccess	baseNames . push_back
>594	Identifier	push_back
>595	Identifier	baseNames
>596	ExpressionStatement	 
>597	CallExpression	DRWN_LOG_MESSAGE ( \"Processing single image \" << imageList << \"...\" )
>598	ArgumentList	\"Processing single image \" << imageList << \"...\"
>599	Argument	\"Processing single image \" << imageList << \"...\"
>600	ShiftExpression	\"Processing single image \" << imageList << \"...\"
>601	ShiftExpression	imageList << \"...\"
>602	PrimaryExpression	\"...\"
>603	Identifier	imageList
>604	PrimaryExpression	\"Processing single image \"
>605	Callee	DRWN_LOG_MESSAGE
>606	Identifier	DRWN_LOG_MESSAGE
>607	CompoundStatement	 
>608	ExpressionStatement	 
>609	CallExpression	DRWN_LOG_MESSAGE ( \"...read \" << baseNames . size ( ) << \" images\" )
>610	ArgumentList	\"...read \" << baseNames . size ( ) << \" images\"
>611	Argument	\"...read \" << baseNames . size ( ) << \" images\"
>612	ShiftExpression	\"...read \" << baseNames . size ( ) << \" images\"
>613	ShiftExpression	baseNames . size ( ) << \" images\"
>614	PrimaryExpression	\" images\"
>615	CallExpression	baseNames . size ( )
>616	ArgumentList	 
>617	Callee	baseNames . size
>618	MemberAccess	baseNames . size
>619	Identifier	size
>620	Identifier	baseNames
>621	PrimaryExpression	\"...read \"
>622	Callee	DRWN_LOG_MESSAGE
>623	Identifier	DRWN_LOG_MESSAGE
>624	ExpressionStatement	 
>625	AssignmentExpr	baseNames = drwnReadFile ( imageList )
>626	CallExpression	drwnReadFile ( imageList )
>627	ArgumentList	imageList
>628	Argument	imageList
>629	Identifier	imageList
>630	Callee	drwnReadFile
>631	Identifier	drwnReadFile
>632	Identifier	baseNames
>633	ExpressionStatement	 
>634	CallExpression	DRWN_LOG_MESSAGE ( \"Reading image list from \" << imageList << \"...\" )
>635	ArgumentList	\"Reading image list from \" << imageList << \"...\"
>636	Argument	\"Reading image list from \" << imageList << \"...\"
>637	ShiftExpression	\"Reading image list from \" << imageList << \"...\"
>638	ShiftExpression	imageList << \"...\"
>639	PrimaryExpression	\"...\"
>640	Identifier	imageList
>641	PrimaryExpression	\"Reading image list from \"
>642	Callee	DRWN_LOG_MESSAGE
>643	Identifier	DRWN_LOG_MESSAGE
>644	Condition	 
>645	CallExpression	drwnFileExists ( imageList )
>646	ArgumentList	imageList
>647	Argument	imageList
>648	Identifier	imageList
>649	Callee	drwnFileExists
>650	Identifier	drwnFileExists
>651	IdentifierDeclStatement	 
>652	IdentifierDecl	baseNames
>653	Identifier	baseNames
>654	IdentifierDeclType	vector < string >
>655	IdentifierDeclStatement	 
>656	IdentifierDecl	* imageList = DRWN_CMDLINE_ARGV [ 0 ]
>657	AssignmentExpr	* imageList = DRWN_CMDLINE_ARGV [ 0 ]
>658	ArrayIndexing	DRWN_CMDLINE_ARGV [ 0 ]
>659	PrimaryExpression	0
>660	Identifier	DRWN_CMDLINE_ARGV
>661	Identifier	imageList
>662	Identifier	imageList
>663	IdentifierDeclType	const char *
>664	ExpressionStatement	 
>665	CallExpression	drwnCodeProfiler 
>666	ArgumentList	drwnCodeProfiler 
>667	Argument	drwnCodeProfiler 
>668	CallExpression	drwnCodeProfiler 
>669	ArgumentList	\"main\"
>670	Argument	\"main\"
>671	PrimaryExpression	\"main\"
>672	Callee	drwnCodeProfiler 
>673	Identifier	drwnCodeProfiler 
>674	Callee	drwnCodeProfiler 
>675	Identifier	drwnCodeProfiler 
>676	IfStatement	if ( DRWN_CMDLINE_ARGC != 1 )
>677	CompoundStatement	 
>678	ReturnStatement	 
>679	UnaryOp	- 1
>680	PrimaryExpression	1
>681	UnaryOperator	-
>682	ExpressionStatement	 
>683	CallExpression	usage ( )
>684	ArgumentList	 
>685	Callee	usage
>686	Identifier	usage
>687	Condition	 
>688	EqualityExpression	DRWN_CMDLINE_ARGC != 1
>689	PrimaryExpression	1
>690	Identifier	DRWN_CMDLINE_ARGC
>691	ExpressionStatement	 
>692	CallExpression	DRWN_END_CMDLINE_PROCESSING ( usage ( ) )
>693	ArgumentList	usage ( )
>694	Argument	usage ( )
>695	CallExpression	usage ( )
>696	ArgumentList	 
>697	Callee	usage
>698	Identifier	usage
>699	Callee	DRWN_END_CMDLINE_PROCESSING
>700	Identifier	DRWN_END_CMDLINE_PROCESSING
>701	Statement	 
>702	Statement	 
>703	Statement	 
>704	Statement	 
>705	Statement	 
>706	Statement	 
>707	Statement	 
>708	Statement	 
>709	Statement	 
>710	Statement	 
>711	Statement	 
>712	Statement	 
>713	Statement	 
>714	Statement	 
>715	Statement	 
>716	Statement	 
>717	Statement	 
>718	Statement	 
>719	Statement	 
>720	Statement	 
>721	Statement	 
>722	Statement	 
>723	Statement	 
>724	Statement	 
>725	IdentifierDeclStatement	 
>726	IdentifierDecl	bVisualize = false
>727	AssignmentExpr	bVisualize = false
>728	Identifier	false
>729	Identifier	false
>730	Identifier	bVisualize
>731	IdentifierDeclType	bool
>732	IdentifierDeclStatement	 
>733	IdentifierDecl	* outExt = \".txt\"
>734	AssignmentExpr	* outExt = \".txt\"
>735	PrimaryExpression	\".txt\"
>736	Identifier	outExt
>737	Identifier	outExt
>738	IdentifierDeclType	const char *
>739	IdentifierDeclStatement	 
>740	IdentifierDecl	* inExt = \".bmp\"
>741	AssignmentExpr	* inExt = \".bmp\"
>742	PrimaryExpression	\".bmp\"
>743	Identifier	inExt
>744	Identifier	inExt
>745	IdentifierDeclType	const char *
<3=6,5,4
<6=25,21,7
<7=8
<8=20,9
<9=19,10
<10=18,11
<11=17,12
<12=16,13
<13=15,14
<21=22
<22=24,23
<25=26
<26=30,27
<27=29,28
<34=43,42,35
<35=39,36
<36=38,37
<39=41,40
<43=739,732,725,724,723,722,721,720,719,718,717,716,715,714,713,712,711,710,709,708,707,706,705,704,703,702,701,691,676,664,655,651,579,534,530,520,476,393,90,68,63,51,46,44
<44=45
<46=47
<47=49,48
<49=50
<51=52
<52=61,53
<53=54
<54=55
<55=59,56
<56=57
<57=58
<59=60
<61=62
<63=64
<64=66,65
<66=67
<68=79,69
<69=70
<70=71
<71=77,72
<72=73
<73=74
<74=76,75
<77=78
<79=80
<80=89,81
<81=83,82
<83=85,84
<85=86
<86=88,87
<90=385,374,371,91
<91=346,332,317,290,265,255,99,92
<92=93
<93=95,94
<95=96
<96=98,97
<99=247,241,238,100
<100=105,101
<101=102
<102=104,103
<105=230,224,221,106
<106=212,211,210,209,208,207,206,205,204,203,193,192,191,190,189,188,187,186,185,184,174,173,172,171,170,169,168,167,166,165,155,140,126,107
<107=108
<108=125,109
<109=116,113,110
<110=112,111
<113=115,114
<116=117
<117=124,118
<118=120,119
<120=121
<121=123,122
<126=127
<127=139,138,128
<128=137,129
<129=133,130
<130=131
<131=132
<133=134
<134=136,135
<140=141
<141=154,153,142
<142=152,143
<143=149,144
<144=146,145
<146=148,147
<149=151,150
<155=156
<156=164,157
<157=163,158
<158=160,159
<160=162,161
<174=175
<175=183,176
<176=182,177
<177=179,178
<179=181,180
<193=194
<194=202,195
<195=201,196
<196=198,197
<198=200,199
<212=217,213
<213=214
<214=216,215
<217=218
<218=220,219
<221=223,222
<224=225
<225=229,226
<226=228,227
<230=231
<231=232
<232=237,236,233
<233=235,234
<238=240,239
<241=242
<242=246,243
<243=245,244
<247=248
<248=249
<249=254,253,250
<250=252,251
<255=256
<256=264,263,257
<257=259,258
<259=260
<260=262,261
<265=266
<266=289,288,267
<267=287,268
<268=275,269
<269=273,270
<270=271
<271=272
<273=274
<275=283,276
<276=281,277
<277=278
<278=280,279
<281=282
<283=284
<284=286,285
<290=315,291
<291=308,299,292
<292=293
<293=297,294
<294=295
<295=296
<297=298
<299=300
<300=306,301
<301=304,302
<302=303
<304=305
<306=307
<308=309
<309=313,310
<310=311
<311=312
<313=314
<315=316
<317=318
<318=330,319
<319=324,320
<320=321
<321=323,322
<324=325
<325=327,326
<327=329,328
<330=331
<332=333
<333=345,344,334
<334=343,335
<335=341,336
<336=339,337
<337=338
<339=340
<341=342
<346=347
<347=370,369,348
<348=368,349
<349=356,350
<350=354,351
<351=352
<352=353
<354=355
<356=364,357
<357=362,358
<358=359
<359=361,360
<362=363
<364=365
<365=367,366
<371=373,372
<374=375
<375=384,376
<376=383,377
<377=379,378
<379=380
<380=382,381
<385=386
<386=387
<387=392,391,388
<388=390,389
<393=463,454,451,394
<394=395
<395=396
<396=449,397
<397=398
<398=399
<399=448,400
<400=436,401
<401=435,402
<402=423,403
<403=422,404
<404=410,405
<405=409,406
<406=408,407
<410=421,411
<411=417,412
<412=413
<413=414
<414=416,415
<417=418
<418=420,419
<423=434,424
<424=430,425
<425=426
<426=427
<427=429,428
<430=431
<431=433,432
<436=447,437
<437=443,438
<438=439
<439=440
<440=442,441
<443=444
<444=446,445
<449=450
<451=453,452
<454=455
<455=462,456
<456=458,457
<458=459
<459=461,460
<463=464
<464=465
<465=475,474,466
<466=473,467
<467=469,468
<469=470
<470=472,471
<476=507,498,495,477
<477=478
<478=479
<479=483,480
<480=482,481
<483=494,484
<484=490,485
<485=486
<486=487
<487=489,488
<490=491
<491=493,492
<495=497,496
<498=499
<499=506,500
<500=502,501
<502=503
<503=505,504
<507=508
<508=509
<509=519,518,510
<510=517,511
<511=513,512
<513=514
<514=516,515
<520=521
<521=529,528,522
<522=524,523
<524=525
<525=527,526
<530=531
<531=533,532
<534=556,535
<535=536
<536=537
<537=554,538
<538=539
<539=540
<540=553,541
<541=543,542
<543=549,544
<544=547,545
<545=546
<547=548
<549=550
<550=552,551
<554=555
<556=557
<557=578,558
<558=576,559
<559=560
<560=561
<561=563,562
<563=564
<564=566,565
<566=572,567
<567=570,568
<568=569
<570=571
<572=573
<573=575,574
<576=577
<579=644,607,580
<580=581
<581=596,582
<582=583
<583=592,584
<584=585
<585=586
<586=590,587
<587=588
<588=589
<590=591
<592=593
<593=595,594
<596=597
<597=605,598
<598=599
<599=600
<600=604,601
<601=603,602
<605=606
<607=633,624,608
<608=609
<609=622,610
<610=611
<611=612
<612=621,613
<613=615,614
<615=617,616
<617=618
<618=620,619
<622=623
<624=625
<625=632,626
<626=630,627
<627=628
<628=629
<630=631
<633=634
<634=642,635
<635=636
<636=637
<637=641,638
<638=640,639
<642=643
<644=645
<645=649,646
<646=647
<647=648
<649=650
<651=652
<652=654,653
<655=656
<656=663,662,657
<657=661,658
<658=660,659
<664=665
<665=674,666
<666=667
<667=668
<668=672,669
<669=670
<670=671
<672=673
<674=675
<676=687,677
<677=682,678
<678=679
<679=681,680
<682=683
<683=685,684
<685=686
<687=688
<688=690,689
<691=692
<692=699,693
<693=694
<694=695
<695=697,696
<697=698
<699=700
<725=726
<726=731,730,727
<727=729,728
<732=733
<733=738,737,734
<734=736,735
<739=740
<740=745,744,741
<741=743,742
