>8	FunctionDef	Private ()
>9	ParameterList	 
>10	CompoundStatement	 
>33	FunctionDef	WCHAR_Holder (QString s)
>34	ParameterList	QString s
>35	Parameter	 
>36	Identifier	s
>37	ParameterType	QString
>38	CompoundStatement	 
>39	ExpressionStatement	 
>40	AssignmentExpr	w [ s . length ( ) ] = 0
>41	PrimaryExpression	0
>42	ArrayIndexing	w [ s . length ( ) ]
>43	CallExpression	s . length ( )
>44	ArgumentList	 
>45	Callee	s . length
>46	MemberAccess	s . length
>47	Identifier	length
>48	Identifier	s
>49	Identifier	w
>50	ExpressionStatement	 
>51	CallExpression	s . toWCharArray ( w )
>52	ArgumentList	w
>53	Argument	w
>54	Identifier	w
>55	Callee	s . toWCharArray
>56	MemberAccess	s . toWCharArray
>57	Identifier	toWCharArray
>58	Identifier	s
>59	ExpressionStatement	 
>60	AssignmentExpr	w = new WCHAR [ s . length ( ) + 1 ]
>61	AdditiveExpression	s . length ( ) + 1
>62	PrimaryExpression	1
>63	CallExpression	s . length ( )
>64	ArgumentList	 
>65	Callee	s . length
>66	MemberAccess	s . length
>67	Identifier	length
>68	Identifier	s
>69	Identifier	w
>79	FunctionDef	~WCHAR_Holder ()
>80	ParameterList	 
>81	CompoundStatement	 
>82	ExpressionStatement	 
>83	Identifier	w
>84	Statement	 
>85	Statement	 
>86	Statement	 
>120	FunctionDef	QtSpeech 
>121	ParameterList	 
>122	CompoundStatement	 
>123	ExpressionStatement	 
>124	Identifier	d
>125	Statement	 
>126	ExpressionStatement	 
>127	CallExpression	d -> ptrs . removeAll ( this )
>128	ArgumentList	this
>129	Argument	this
>130	Identifier	this
>131	Callee	d -> ptrs . removeAll
>132	MemberAccess	d -> ptrs . removeAll
>133	Identifier	removeAll
>134	PtrMemberAccess	d -> ptrs
>135	Identifier	ptrs
>136	Identifier	d
>144	FunctionDef	QtSpeech 
>145	ParameterList	 
>146	ReturnType	const QtSpeech 
>147	CompoundStatement	 
>148	ReturnStatement	 
>149	PtrMemberAccess	d -> name
>150	Identifier	name
>151	Identifier	d
>158	FunctionDef	QtSpeech 
>159	ParameterList	 
>160	ReturnType	QtSpeech 
>161	CompoundStatement	 
>162	ReturnStatement	 
>163	Identifier	vs
>164	ForStatement	for ( unsigned int i = 0 ; i < count ; i ++ )
>165	CompoundStatement	 
>166	ExpressionStatement	 
>167	CallExpression	voice . Release ( )
>168	ArgumentList	 
>169	Callee	voice . Release
>170	MemberAccess	voice . Release
>171	Identifier	Release
>172	Identifier	voice
>173	ExpressionStatement	 
>174	ShiftExpression	vs << n
>175	Identifier	n
>176	Identifier	vs
>177	IdentifierDeclStatement	 
>178	IdentifierDecl	n = { id , name }
>179	AssignmentExpr	n = { id , name }
>180	InitializerList	id
>181	Identifier	name
>182	Identifier	id
>183	Identifier	n
>184	Identifier	n
>185	IdentifierDeclType	VoiceName
>186	IdentifierDeclStatement	 
>187	IdentifierDecl	name = QString 
>188	AssignmentExpr	name = QString 
>189	CallExpression	QString 
>190	ArgumentList	w_name
>191	Argument	w_name
>192	Identifier	w_name
>193	Callee	QString 
>194	Identifier	QString 
>195	Identifier	name
>196	Identifier	name
>197	IdentifierDeclType	QString
>198	IdentifierDeclStatement	 
>199	IdentifierDecl	id = QString 
>200	AssignmentExpr	id = QString 
>201	CallExpression	QString 
>202	ArgumentList	w_id
>203	Argument	w_id
>204	Identifier	w_id
>205	Callee	QString 
>206	Identifier	QString 
>207	Identifier	id
>208	Identifier	id
>209	IdentifierDeclType	QString
>210	ExpressionStatement	 
>211	CallExpression	SysCall ( voice -> GetId ( & w_id ) , LogicError )
>212	ArgumentList	voice -> GetId ( & w_id )
>213	Argument	LogicError
>214	Identifier	LogicError
>215	Argument	voice -> GetId ( & w_id )
>216	CallExpression	voice -> GetId ( & w_id )
>217	ArgumentList	& w_id
>218	Argument	& w_id
>219	UnaryOp	& w_id
>220	Identifier	w_id
>221	UnaryOperator	&
>222	Callee	voice -> GetId
>223	PtrMemberAccess	voice -> GetId
>224	Identifier	GetId
>225	Identifier	voice
>226	Callee	SysCall
>227	Identifier	SysCall
>228	ExpressionStatement	 
>229	CallExpression	SysCall ( SpGetDescription ( voice , & w_name ) , LogicError )
>230	ArgumentList	SpGetDescription ( voice , & w_name )
>231	Argument	LogicError
>232	Identifier	LogicError
>233	Argument	SpGetDescription ( voice , & w_name )
>234	CallExpression	SpGetDescription ( voice , & w_name )
>235	ArgumentList	voice
>236	Argument	& w_name
>237	UnaryOp	& w_name
>238	Identifier	w_name
>239	UnaryOperator	&
>240	Argument	voice
>241	Identifier	voice
>242	Callee	SpGetDescription
>243	Identifier	SpGetDescription
>244	Callee	SysCall
>245	Identifier	SysCall
>246	ExpressionStatement	 
>247	CallExpression	SysCall ( voices -> Next ( 1 , & voice , NULL ) , LogicError )
>248	ArgumentList	voices -> Next ( 1 , & voice , NULL )
>249	Argument	LogicError
>250	Identifier	LogicError
>251	Argument	voices -> Next ( 1 , & voice , NULL )
>252	CallExpression	voices -> Next ( 1 , & voice , NULL )
>253	ArgumentList	1
>254	Argument	NULL
>255	Identifier	NULL
>256	Argument	& voice
>257	UnaryOp	& voice
>258	Identifier	voice
>259	UnaryOperator	&
>260	Argument	1
>261	PrimaryExpression	1
>262	Callee	voices -> Next
>263	PtrMemberAccess	voices -> Next
>264	Identifier	Next
>265	Identifier	voices
>266	Callee	SysCall
>267	Identifier	SysCall
>268	IdentifierDeclStatement	 
>269	IdentifierDecl	voice
>270	Identifier	voice
>271	IdentifierDeclType	CComPtr < ISpObjectToken >
>272	IdentifierDeclStatement	 
>273	IdentifierDecl	* w_name = 0L
>274	AssignmentExpr	* w_name = 0L
>275	PrimaryExpression	0L
>276	Identifier	w_name
>277	Identifier	w_name
>278	IdentifierDeclType	WCHAR *
>279	IdentifierDeclStatement	 
>280	IdentifierDecl	* w_id = 0L
>281	AssignmentExpr	* w_id = 0L
>282	PrimaryExpression	0L
>283	Identifier	w_id
>284	Identifier	w_id
>285	IdentifierDeclType	WCHAR *
>286	IncDecOp	 
>287	IncDec	++
>288	Identifier	i
>289	Condition	 
>290	RelationalExpression	i < count
>291	Identifier	count
>292	Identifier	i
>293	ForInit	 
>294	IdentifierDeclStatement	unsigned int i = 0 ;
>295	IdentifierDecl	i = 0
>296	AssignmentExpr	i = 0
>297	PrimaryExpression	0
>298	Identifier	i
>299	Identifier	i
>300	IdentifierDeclType	unsigned int
>301	ExpressionStatement	 
>302	CallExpression	SysCall ( voices -> GetCount ( & count ) , LogicError )
>303	ArgumentList	voices -> GetCount ( & count )
>304	Argument	LogicError
>305	Identifier	LogicError
>306	Argument	voices -> GetCount ( & count )
>307	CallExpression	voices -> GetCount ( & count )
>308	ArgumentList	& count
>309	Argument	& count
>310	UnaryOp	& count
>311	Identifier	count
>312	UnaryOperator	&
>313	Callee	voices -> GetCount
>314	PtrMemberAccess	voices -> GetCount
>315	Identifier	GetCount
>316	Identifier	voices
>317	Callee	SysCall
>318	Identifier	SysCall
>319	ExpressionStatement	 
>320	CallExpression	SysCall ( SpEnumTokens ( SPCAT_VOICES , NULL , NULL , & voices ) , LogicError )
>321	ArgumentList	SpEnumTokens ( SPCAT_VOICES , NULL , NULL , & voices )
>322	Argument	LogicError
>323	Identifier	LogicError
>324	Argument	SpEnumTokens ( SPCAT_VOICES , NULL , NULL , & voices )
>325	CallExpression	SpEnumTokens ( SPCAT_VOICES , NULL , NULL , & voices )
>326	ArgumentList	SPCAT_VOICES
>327	Argument	& voices
>328	UnaryOp	& voices
>329	Identifier	voices
>330	UnaryOperator	&
>331	Argument	NULL
>332	Identifier	NULL
>333	Argument	NULL
>334	Identifier	NULL
>335	Argument	SPCAT_VOICES
>336	Identifier	SPCAT_VOICES
>337	Callee	SpEnumTokens
>338	Identifier	SpEnumTokens
>339	Callee	SysCall
>340	Identifier	SysCall
>341	ExpressionStatement	 
>342	CallExpression	CoInitialize ( NULL )
>343	ArgumentList	NULL
>344	Argument	NULL
>345	Identifier	NULL
>346	Callee	CoInitialize
>347	Identifier	CoInitialize
>348	IdentifierDeclStatement	 
>349	IdentifierDecl	voices
>350	Identifier	voices
>351	IdentifierDeclType	CComPtr < IEnumSpObjectTokens >
>352	IdentifierDeclStatement	 
>353	IdentifierDecl	count = 0
>354	AssignmentExpr	count = 0
>355	PrimaryExpression	0
>356	Identifier	count
>357	Identifier	count
>358	IdentifierDeclType	ULONG
>359	IdentifierDeclStatement	 
>360	IdentifierDecl	vs
>361	Identifier	vs
>362	IdentifierDeclType	VoiceNames
>392	FunctionDef	QtSpeech 
>393	ParameterList	const QString & text
>394	Parameter	 
>395	Identifier	text
>396	ParameterType	const QString &
>397	ReturnType	void
>398	CompoundStatement	 
>399	ExpressionStatement	 
>400	CallExpression	tell ( text , nullptr , nullptr )
>401	ArgumentList	text
>402	Argument	nullptr
>403	Identifier	nullptr
>404	Argument	nullptr
>405	Identifier	nullptr
>406	Argument	text
>407	Identifier	text
>408	Callee	tell
>409	Identifier	tell
>415	FunctionDef	QtSpeech 
>416	ParameterList	const QString & text , QObject * obj , const char * slot
>417	Parameter	 
>418	Identifier	slot
>419	ParameterType	const char *
>420	Parameter	 
>421	Identifier	obj
>422	ParameterType	QObject *
>423	Parameter	 
>424	Identifier	text
>425	ParameterType	const QString &
>426	ReturnType	void
>427	CompoundStatement	 
>428	ExpressionStatement	 
>429	CallExpression	SysCall ( d -> voice -> Speak ( w_text . w , SPF_ASYNC | SPF_IS_NOT_XML , 0 ) , LogicError )
>430	ArgumentList	d -> voice -> Speak ( w_text . w , SPF_ASYNC | SPF_IS_NOT_XML , 0 )
>431	Argument	LogicError
>432	Identifier	LogicError
>433	Argument	d -> voice -> Speak ( w_text . w , SPF_ASYNC | SPF_IS_NOT_XML , 0 )
>434	CallExpression	d -> voice -> Speak ( w_text . w , SPF_ASYNC | SPF_IS_NOT_XML , 0 )
>435	ArgumentList	w_text . w
>436	Argument	0
>437	PrimaryExpression	0
>438	Argument	SPF_ASYNC | SPF_IS_NOT_XML
>439	InclusiveOrExpression	SPF_ASYNC | SPF_IS_NOT_XML
>440	Identifier	SPF_IS_NOT_XML
>441	Identifier	SPF_ASYNC
>442	Argument	w_text . w
>443	MemberAccess	w_text . w
>444	Identifier	w
>445	Identifier	w_text
>446	Callee	d -> voice -> Speak
>447	PtrMemberAccess	d -> voice -> Speak
>448	Identifier	Speak
>449	PtrMemberAccess	d -> voice
>450	Identifier	voice
>451	Identifier	d
>452	Callee	SysCall
>453	Identifier	SysCall
>454	IdentifierDeclStatement	 
>455	IdentifierDecl	w_text ( text )
>456	Identifier	text
>457	Identifier	w_text
>458	IdentifierDeclType	Private 
>459	ExpressionStatement	 
>460	CallExpression	startTimer ( 100 )
>461	ArgumentList	100
>462	Argument	100
>463	PrimaryExpression	100
>464	Callee	startTimer
>465	Identifier	startTimer
>466	ExpressionStatement	 
>467	AssignmentExpr	d -> waitingFinish = true
>468	Identifier	true
>469	PtrMemberAccess	d -> waitingFinish
>470	Identifier	waitingFinish
>471	Identifier	d
>472	IfStatement	if ( obj && slot )
>473	CompoundStatement	 
>474	ExpressionStatement	 
>475	CallExpression	connect ( this , SIGNAL ( finished ( ) ) , obj , slot )
>476	ArgumentList	this
>477	Argument	slot
>478	Identifier	slot
>479	Argument	obj
>480	Identifier	obj
>481	Argument	SIGNAL ( finished ( ) )
>482	CallExpression	SIGNAL ( finished ( ) )
>483	ArgumentList	finished ( )
>484	Argument	finished ( )
>485	CallExpression	finished ( )
>486	ArgumentList	 
>487	Callee	finished
>488	Identifier	finished
>489	Callee	SIGNAL
>490	Identifier	SIGNAL
>491	Argument	this
>492	Identifier	this
>493	Callee	connect
>494	Identifier	connect
>495	Condition	 
>496	AndExpression	obj && slot
>497	Identifier	slot
>498	Identifier	obj
>499	ExpressionStatement	 
>500	AssignmentExpr	d -> onFinishSlot = slot
>501	Identifier	slot
>502	PtrMemberAccess	d -> onFinishSlot
>503	Identifier	onFinishSlot
>504	Identifier	d
>505	ExpressionStatement	 
>506	AssignmentExpr	d -> onFinishObj = obj
>507	Identifier	obj
>508	PtrMemberAccess	d -> onFinishObj
>509	Identifier	onFinishObj
>510	Identifier	d
>511	IfStatement	if ( d -> waitingFinish )
>512	CompoundStatement	 
>513	ReturnStatement	 
>514	ExpressionStatement	 
>515	Statement	 
>516	CompoundStatement	 
>517	ExpressionStatement	 
>518	CallExpression	tell ( text , obj , slot )
>519	ArgumentList	text
>520	Argument	slot
>521	Identifier	slot
>522	Argument	obj
>523	Identifier	obj
>524	Argument	text
>525	Identifier	text
>526	Callee	tell
>527	Identifier	tell
>528	ExpressionStatement	 
>529	CallExpression	disconnect ( * conn )
>530	ArgumentList	* conn
>531	Argument	* conn
>532	UnaryOp	* conn
>533	Identifier	conn
>534	UnaryOperator	*
>535	Callee	disconnect
>536	Identifier	disconnect
>537	Statement	 
>538	Statement	 
>539	Statement	 
>540	Statement	 
>541	Statement	 
>542	Statement	 
>543	Statement	 
>544	Statement	 
>545	Statement	 
>546	Statement	 
>547	Statement	 
>548	Statement	 
>549	Statement	 
>550	Statement	 
>551	Statement	 
>552	Statement	 
>553	Statement	 
>554	Statement	 
>555	Statement	 
>556	Statement	 
>557	Statement	 
>558	Statement	 
>559	Statement	 
>560	Statement	 
>561	Statement	 
>562	Statement	 
>563	Statement	 
>564	ExpressionStatement	 
>565	Statement	 
>566	Statement	 
>567	Statement	 
>568	Statement	 
>569	Statement	 
>570	Statement	 
>571	Statement	 
>572	Statement	 
>573	Statement	 
>574	Statement	 
>575	Statement	 
>576	Statement	 
>577	Statement	 
>578	Condition	 
>579	PtrMemberAccess	d -> waitingFinish
>580	Identifier	waitingFinish
>581	Identifier	d
>608	FunctionDef	QtSpeech 
>609	ParameterList	const QString & text
>610	Parameter	 
>611	Identifier	text
>612	ParameterType	const QString &
>613	ReturnType	void
>614	CompoundStatement	 
>615	ExpressionStatement	 
>616	CallExpression	SysCall ( d -> voice -> Speak ( w_text . w , SPF_IS_NOT_XML , 0 ) , LogicError )
>617	ArgumentList	d -> voice -> Speak ( w_text . w , SPF_IS_NOT_XML , 0 )
>618	Argument	LogicError
>619	Identifier	LogicError
>620	Argument	d -> voice -> Speak ( w_text . w , SPF_IS_NOT_XML , 0 )
>621	CallExpression	d -> voice -> Speak ( w_text . w , SPF_IS_NOT_XML , 0 )
>622	ArgumentList	w_text . w
>623	Argument	0
>624	PrimaryExpression	0
>625	Argument	SPF_IS_NOT_XML
>626	Identifier	SPF_IS_NOT_XML
>627	Argument	w_text . w
>628	MemberAccess	w_text . w
>629	Identifier	w
>630	Identifier	w_text
>631	Callee	d -> voice -> Speak
>632	PtrMemberAccess	d -> voice -> Speak
>633	Identifier	Speak
>634	PtrMemberAccess	d -> voice
>635	Identifier	voice
>636	Identifier	d
>637	Callee	SysCall
>638	Identifier	SysCall
>639	IdentifierDeclStatement	 
>640	IdentifierDecl	w_text ( text )
>641	Identifier	text
>642	Identifier	w_text
>643	IdentifierDeclType	Private 
>658	FunctionDef	QtSpeech 
>659	ParameterList	QTimerEvent * te
>660	Parameter	 
>661	Identifier	te
>662	ParameterType	QTimerEvent *
>663	ReturnType	void
>664	CompoundStatement	 
>665	IfStatement	if ( d -> waitingFinish )
>666	CompoundStatement	 
>667	IfStatement	if ( es . dwRunningState == SPRS_DONE )
>668	CompoundStatement	 
>669	IdentifierDeclStatement	 
>670	IdentifierDecl	finished ( )
>671	Identifier	finished
>672	IdentifierDeclType	emit
>673	ExpressionStatement	 
>674	CallExpression	killTimer ( te -> timerId ( ) )
>675	ArgumentList	te -> timerId ( )
>676	Argument	te -> timerId ( )
>677	CallExpression	te -> timerId ( )
>678	ArgumentList	 
>679	Callee	te -> timerId
>680	PtrMemberAccess	te -> timerId
>681	Identifier	timerId
>682	Identifier	te
>683	Callee	killTimer
>684	Identifier	killTimer
>685	ExpressionStatement	 
>686	AssignmentExpr	d -> waitingFinish = false
>687	Identifier	false
>688	PtrMemberAccess	d -> waitingFinish
>689	Identifier	waitingFinish
>690	Identifier	d
>691	Condition	 
>692	EqualityExpression	es . dwRunningState == SPRS_DONE
>693	Identifier	SPRS_DONE
>694	MemberAccess	es . dwRunningState
>695	Identifier	dwRunningState
>696	Identifier	es
>697	ExpressionStatement	 
>698	CallExpression	d -> voice -> GetStatus ( & es , NULL )
>699	ArgumentList	& es
>700	Argument	NULL
>701	Identifier	NULL
>702	Argument	& es
>703	UnaryOp	& es
>704	Identifier	es
>705	UnaryOperator	&
>706	Callee	d -> voice -> GetStatus
>707	PtrMemberAccess	d -> voice -> GetStatus
>708	Identifier	GetStatus
>709	PtrMemberAccess	d -> voice
>710	Identifier	voice
>711	Identifier	d
>712	IdentifierDeclStatement	 
>713	IdentifierDecl	es
>714	Identifier	es
>715	IdentifierDeclType	SPVOICESTATUS
>716	Condition	 
>717	PtrMemberAccess	d -> waitingFinish
>718	Identifier	waitingFinish
>719	Identifier	d
>720	ExpressionStatement	 
>721	CallExpression	QObject 
>722	ArgumentList	te
>723	Argument	te
>724	Identifier	te
>725	Callee	QObject 
>726	Identifier	QObject 
<8=10,9
<33=38,34
<34=35
<35=37,36
<38=59,50,39
<39=40
<40=42,41
<42=49,43
<43=45,44
<45=46
<46=48,47
<50=51
<51=55,52
<52=53
<53=54
<55=56
<56=58,57
<59=60
<60=69,61
<61=63,62
<63=65,64
<65=66
<66=68,67
<79=81,80
<81=86,85,84,82
<82=83
<120=122,121
<122=126,125,123
<123=124
<126=127
<127=131,128
<128=129
<129=130
<131=132
<132=134,133
<134=136,135
<144=147,146,145
<147=148
<148=149
<149=151,150
<158=161,160,159
<161=359,352,348,341,319,301,164,162
<162=163
<164=293,289,286,165
<165=279,272,268,246,228,210,198,186,177,173,166
<166=167
<167=169,168
<169=170
<170=172,171
<173=174
<174=176,175
<177=178
<178=185,184,179
<179=183,180
<180=182,181
<186=187
<187=197,196,188
<188=195,189
<189=193,190
<190=191
<191=192
<193=194
<198=199
<199=209,208,200
<200=207,201
<201=205,202
<202=203
<203=204
<205=206
<210=211
<211=226,212
<212=215,213
<213=214
<215=216
<216=222,217
<217=218
<218=219
<219=221,220
<222=223
<223=225,224
<226=227
<228=229
<229=244,230
<230=233,231
<231=232
<233=234
<234=242,235
<235=240,236
<236=237
<237=239,238
<240=241
<242=243
<244=245
<246=247
<247=266,248
<248=251,249
<249=250
<251=252
<252=262,253
<253=260,256,254
<254=255
<256=257
<257=259,258
<260=261
<262=263
<263=265,264
<266=267
<268=269
<269=271,270
<272=273
<273=278,277,274
<274=276,275
<279=280
<280=285,284,281
<281=283,282
<286=288,287
<289=290
<290=292,291
<293=294
<294=295
<295=300,299,296
<296=298,297
<301=302
<302=317,303
<303=306,304
<304=305
<306=307
<307=313,308
<308=309
<309=310
<310=312,311
<313=314
<314=316,315
<317=318
<319=320
<320=339,321
<321=324,322
<322=323
<324=325
<325=337,326
<326=335,333,331,327
<327=328
<328=330,329
<331=332
<333=334
<335=336
<337=338
<339=340
<341=342
<342=346,343
<343=344
<344=345
<346=347
<348=349
<349=351,350
<352=353
<353=358,357,354
<354=356,355
<359=360
<360=362,361
<392=398,397,393
<393=394
<394=396,395
<398=399
<399=400
<400=408,401
<401=406,404,402
<402=403
<404=405
<406=407
<408=409
<415=427,426,416
<416=423,420,417
<417=419,418
<420=422,421
<423=425,424
<427=511,505,499,472,466,459,454,428
<428=429
<429=452,430
<430=433,431
<431=432
<433=434
<434=446,435
<435=442,438,436
<436=437
<438=439
<439=441,440
<442=443
<443=445,444
<446=447
<447=449,448
<449=451,450
<452=453
<454=455
<455=458,457,456
<459=460
<460=464,461
<461=462
<462=463
<464=465
<466=467
<467=469,468
<469=471,470
<472=495,473
<473=474
<474=475
<475=493,476
<476=491,481,479,477
<477=478
<479=480
<481=482
<482=489,483
<483=484
<484=485
<485=487,486
<487=488
<489=490
<491=492
<493=494
<495=496
<496=498,497
<499=500
<500=502,501
<502=504,503
<505=506
<506=508,507
<508=510,509
<511=578,512
<512=577,576,575,574,573,572,571,570,569,568,567,566,565,564,563,562,561,560,559,558,557,556,555,554,553,552,551,550,549,548,547,546,545,544,543,542,541,540,539,538,537,516,515,514,513
<516=528,517
<517=518
<518=526,519
<519=524,522,520
<520=521
<522=523
<524=525
<526=527
<528=529
<529=535,530
<530=531
<531=532
<532=534,533
<535=536
<578=579
<579=581,580
<608=614,613,609
<609=610
<610=612,611
<614=639,615
<615=616
<616=637,617
<617=620,618
<618=619
<620=621
<621=631,622
<622=627,625,623
<623=624
<625=626
<627=628
<628=630,629
<631=632
<632=634,633
<634=636,635
<637=638
<639=640
<640=643,642,641
<658=664,663,659
<659=660
<660=662,661
<664=720,665
<665=716,666
<666=712,697,667
<667=691,668
<668=685,673,669
<669=670
<670=672,671
<673=674
<674=683,675
<675=676
<676=677
<677=679,678
<679=680
<680=682,681
<683=684
<685=686
<686=688,687
<688=690,689
<691=692
<692=694,693
<694=696,695
<697=698
<698=706,699
<699=702,700
<700=701
<702=703
<703=705,704
<706=707
<707=709,708
<709=711,710
<712=713
<713=715,714
<716=717
<717=719,718
<720=721
<721=725,722
<722=723
<723=724
<725=726
