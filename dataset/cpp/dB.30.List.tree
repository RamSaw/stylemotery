>3	FunctionDef	operator = (const CList & RefList)
>4	ParameterList	const CList & RefList
>5	Parameter	 
>6	Identifier	RefList
>7	ParameterType	const CList &
>8	CompoundStatement	 
>9	ReturnStatement	 
>10	UnaryOp	* this
>11	Identifier	this
>12	UnaryOperator	*
>13	IfStatement	if ( & RefList != this )
>14	CompoundStatement	 
>15	WhileStatement	while ( Current )
>16	CompoundStatement	 
>17	ExpressionStatement	 
>18	AssignmentExpr	Current = Current -> m_Next
>19	PtrMemberAccess	Current -> m_Next
>20	Identifier	m_Next
>21	Identifier	Current
>22	Identifier	Current
>23	ExpressionStatement	 
>24	CallExpression	Add ( Current -> m_Element )
>25	ArgumentList	Current -> m_Element
>26	Argument	Current -> m_Element
>27	PtrMemberAccess	Current -> m_Element
>28	Identifier	m_Element
>29	Identifier	Current
>30	Callee	Add
>31	Identifier	Add
>32	Condition	 
>33	Identifier	Current
>34	IdentifierDeclStatement	 
>35	IdentifierDecl	* Current = RefList . m_Head
>36	AssignmentExpr	* Current = RefList . m_Head
>37	MemberAccess	RefList . m_Head
>38	Identifier	m_Head
>39	Identifier	RefList
>40	Identifier	Current
>41	Identifier	Current
>42	IdentifierDeclType	CListElement < T > *
>43	ExpressionStatement	 
>44	CallExpression	RemoveAll ( )
>45	ArgumentList	 
>46	Callee	RemoveAll
>47	Identifier	RemoveAll
>48	Condition	 
>49	EqualityExpression	& RefList != this
>50	Identifier	this
>51	UnaryOp	& RefList
>52	Identifier	RefList
>53	UnaryOperator	&
>66	FunctionDef	~CList ()
>67	ParameterList	 
>68	CompoundStatement	 
>69	ExpressionStatement	 
>70	CallExpression	BASE_GUARD_CHECK ( m_PropGuard )
>71	ArgumentList	m_PropGuard
>72	Argument	m_PropGuard
>73	Identifier	m_PropGuard
>74	Callee	BASE_GUARD_CHECK
>75	Identifier	BASE_GUARD_CHECK
>76	ExpressionStatement	 
>77	CallExpression	BASE_GUARD_CHECK ( m_HeapGuard )
>78	ArgumentList	m_HeapGuard
>79	Argument	m_HeapGuard
>80	Identifier	m_HeapGuard
>81	Callee	BASE_GUARD_CHECK
>82	Identifier	BASE_GUARD_CHECK
>83	ExpressionStatement	 
>84	CallExpression	RemoveAll ( )
>85	ArgumentList	 
>86	Callee	RemoveAll
>87	Identifier	RemoveAll
>93	FunctionDef	RemoveAll ()
>94	ParameterList	 
>95	CompoundStatement	 
>96	ExpressionStatement	 
>97	AssignmentExpr	m_Size = 0
>98	PrimaryExpression	0
>99	Identifier	m_Size
>100	ExpressionStatement	 
>101	AssignmentExpr	m_Tail = NULL
>102	Identifier	NULL
>103	Identifier	m_Tail
>104	ExpressionStatement	 
>105	AssignmentExpr	m_Head = NULL
>106	Identifier	NULL
>107	Identifier	m_Head
>108	WhileStatement	while ( Current )
>109	CompoundStatement	 
>110	ExpressionStatement	 
>111	AssignmentExpr	Current = Prev
>112	Identifier	Prev
>113	Identifier	Current
>114	ExpressionStatement	 
>115	Identifier	Current
>116	Statement	 
>117	ExpressionStatement	 
>118	AssignmentExpr	Prev = Current -> m_Prev
>119	PtrMemberAccess	Current -> m_Prev
>120	Identifier	m_Prev
>121	Identifier	Current
>122	Identifier	Prev
>123	Condition	 
>124	Identifier	Current
>125	IdentifierDeclStatement	 
>126	IdentifierDecl	* Prev
>127	Identifier	Prev
>128	IdentifierDeclType	CListElement < T > *
>129	IdentifierDeclStatement	 
>130	IdentifierDecl	* Current = m_Tail
>131	AssignmentExpr	* Current = m_Tail
>132	Identifier	m_Tail
>133	Identifier	m_Tail
>134	Identifier	Current
>135	IdentifierDeclType	CListElement < T > *
>147	FunctionDef	Add (const T & Element)
>148	ParameterList	const T & Element
>149	Parameter	 
>150	Identifier	Element
>151	ParameterType	const T &
>152	CompoundStatement	 
>153	ExpressionStatement	 
>154	IncDecOp	m_Size ++
>155	IncDec	++
>156	Identifier	m_Size
>157	IfStatement	if ( ! m_Tail )
>158	ElseStatement	else
>159	CompoundStatement	 
>160	ExpressionStatement	 
>161	AssignmentExpr	m_Tail = m_Tail -> m_Next
>162	PtrMemberAccess	m_Tail -> m_Next
>163	Identifier	m_Next
>164	Identifier	m_Tail
>165	Identifier	m_Tail
>166	ExpressionStatement	 
>167	AssignmentExpr	m_Tail -> m_Next -> m_Prev = m_Tail
>168	Identifier	m_Tail
>169	PtrMemberAccess	m_Tail -> m_Next -> m_Prev
>170	Identifier	m_Prev
>171	PtrMemberAccess	m_Tail -> m_Next
>172	Identifier	m_Next
>173	Identifier	m_Tail
>174	ExpressionStatement	 
>175	AssignmentExpr	m_Tail -> m_Next = new CListElement < T > ( Element )
>176	Identifier	Element
>177	PtrMemberAccess	m_Tail -> m_Next
>178	Identifier	m_Next
>179	Identifier	m_Tail
>180	CompoundStatement	 
>181	ExpressionStatement	 
>182	AssignmentExpr	m_Head = m_Tail
>183	Identifier	m_Tail
>184	Identifier	m_Head
>185	ExpressionStatement	 
>186	AssignmentExpr	m_Tail = new CListElement < T > ( Element )
>187	Identifier	Element
>188	Identifier	m_Tail
>189	Condition	 
>190	UnaryOp	! m_Tail
>191	Identifier	m_Tail
>192	UnaryOperator	!
>205	FunctionDef	operator < (const CList < T > & RefList)
>206	ParameterList	const CList < T > & RefList
>207	Parameter	 
>208	Identifier	RefList
>209	ParameterType	const CList < T > &
>210	CompoundStatement	 
>211	IfStatement	if ( this == & RefList )
>212	ElseStatement	else
>213	IfStatement	if ( m_Size < RefList . m_Size )
>214	ElseStatement	else
>215	IfStatement	if ( m_Size > RefList . m_Size )
>216	ElseStatement	else
>217	CompoundStatement	 
>218	ReturnStatement	 
>219	Identifier	false
>220	WhileStatement	while ( CurrentLeft && CurrentRight )
>221	CompoundStatement	 
>222	ExpressionStatement	 
>223	AssignmentExpr	CurrentRight = CurrentRight -> m_Next
>224	PtrMemberAccess	CurrentRight -> m_Next
>225	Identifier	m_Next
>226	Identifier	CurrentRight
>227	Identifier	CurrentRight
>228	ExpressionStatement	 
>229	AssignmentExpr	CurrentLeft = CurrentLeft -> m_Next
>230	PtrMemberAccess	CurrentLeft -> m_Next
>231	Identifier	m_Next
>232	Identifier	CurrentLeft
>233	Identifier	CurrentLeft
>234	IfStatement	if ( ( * CurrentLeft ) < ( * CurrentRight ) )
>235	ReturnStatement	 
>236	Identifier	true
>237	Condition	 
>238	RelationalExpression	( * CurrentLeft ) < ( * CurrentRight )
>239	UnaryOp	* CurrentRight
>240	Identifier	CurrentRight
>241	UnaryOperator	*
>242	UnaryOp	* CurrentLeft
>243	Identifier	CurrentLeft
>244	UnaryOperator	*
>245	Condition	 
>246	AndExpression	CurrentLeft && CurrentRight
>247	Identifier	CurrentRight
>248	Identifier	CurrentLeft
>249	IdentifierDeclStatement	 
>250	IdentifierDecl	* CurrentRight = RefList . m_Head
>251	AssignmentExpr	* CurrentRight = RefList . m_Head
>252	MemberAccess	RefList . m_Head
>253	Identifier	m_Head
>254	Identifier	RefList
>255	Identifier	CurrentRight
>256	Identifier	CurrentRight
>257	IdentifierDeclType	CListElement < T > *
>258	IdentifierDeclStatement	 
>259	IdentifierDecl	* CurrentLeft = m_Head
>260	AssignmentExpr	* CurrentLeft = m_Head
>261	Identifier	m_Head
>262	Identifier	m_Head
>263	Identifier	CurrentLeft
>264	IdentifierDeclType	CListElement < T > *
>265	ReturnStatement	 
>266	Identifier	false
>267	Condition	 
>268	RelationalExpression	m_Size > RefList . m_Size
>269	MemberAccess	RefList . m_Size
>270	Identifier	m_Size
>271	Identifier	RefList
>272	Identifier	m_Size
>273	ReturnStatement	 
>274	Identifier	true
>275	Condition	 
>276	RelationalExpression	m_Size < RefList . m_Size
>277	MemberAccess	RefList . m_Size
>278	Identifier	m_Size
>279	Identifier	RefList
>280	Identifier	m_Size
>281	ReturnStatement	 
>282	Identifier	false
>283	Condition	 
>284	EqualityExpression	this == & RefList
>285	UnaryOp	& RefList
>286	Identifier	RefList
>287	UnaryOperator	&
>288	Identifier	this
>307	FunctionDef	operator > (const CList < T > & RefList)
>308	ParameterList	const CList < T > & RefList
>309	Parameter	 
>310	Identifier	RefList
>311	ParameterType	const CList < T > &
>312	CompoundStatement	 
>313	IfStatement	if ( this == & RefList )
>314	ElseStatement	else
>315	IfStatement	if ( m_Size > RefList . m_Size )
>316	ElseStatement	else
>317	IfStatement	if ( m_Size < RefList . m_Size )
>318	ElseStatement	else
>319	CompoundStatement	 
>320	ReturnStatement	 
>321	Identifier	false
>322	WhileStatement	while ( CurrentLeft && CurrentRight )
>323	CompoundStatement	 
>324	ExpressionStatement	 
>325	AssignmentExpr	CurrentRight = CurrentRight -> m_Next
>326	PtrMemberAccess	CurrentRight -> m_Next
>327	Identifier	m_Next
>328	Identifier	CurrentRight
>329	Identifier	CurrentRight
>330	ExpressionStatement	 
>331	AssignmentExpr	CurrentLeft = CurrentLeft -> m_Next
>332	PtrMemberAccess	CurrentLeft -> m_Next
>333	Identifier	m_Next
>334	Identifier	CurrentLeft
>335	Identifier	CurrentLeft
>336	IfStatement	if ( ( * CurrentLeft ) > ( * CurrentRight ) )
>337	ReturnStatement	 
>338	Identifier	true
>339	Condition	 
>340	RelationalExpression	( * CurrentLeft ) > ( * CurrentRight )
>341	UnaryOp	* CurrentRight
>342	Identifier	CurrentRight
>343	UnaryOperator	*
>344	UnaryOp	* CurrentLeft
>345	Identifier	CurrentLeft
>346	UnaryOperator	*
>347	Condition	 
>348	AndExpression	CurrentLeft && CurrentRight
>349	Identifier	CurrentRight
>350	Identifier	CurrentLeft
>351	IdentifierDeclStatement	 
>352	IdentifierDecl	* CurrentRight = RefList . m_Head
>353	AssignmentExpr	* CurrentRight = RefList . m_Head
>354	MemberAccess	RefList . m_Head
>355	Identifier	m_Head
>356	Identifier	RefList
>357	Identifier	CurrentRight
>358	Identifier	CurrentRight
>359	IdentifierDeclType	CListElement < T > *
>360	IdentifierDeclStatement	 
>361	IdentifierDecl	* CurrentLeft = m_Head
>362	AssignmentExpr	* CurrentLeft = m_Head
>363	Identifier	m_Head
>364	Identifier	m_Head
>365	Identifier	CurrentLeft
>366	IdentifierDeclType	CListElement < T > *
>367	ReturnStatement	 
>368	Identifier	false
>369	Condition	 
>370	RelationalExpression	m_Size < RefList . m_Size
>371	MemberAccess	RefList . m_Size
>372	Identifier	m_Size
>373	Identifier	RefList
>374	Identifier	m_Size
>375	ReturnStatement	 
>376	Identifier	true
>377	Condition	 
>378	RelationalExpression	m_Size > RefList . m_Size
>379	MemberAccess	RefList . m_Size
>380	Identifier	m_Size
>381	Identifier	RefList
>382	Identifier	m_Size
>383	ReturnStatement	 
>384	Identifier	false
>385	Condition	 
>386	EqualityExpression	this == & RefList
>387	UnaryOp	& RefList
>388	Identifier	RefList
>389	UnaryOperator	&
>390	Identifier	this
>409	FunctionDef	operator <= (const CList < T > & RefList)
>410	ParameterList	const CList < T > & RefList
>411	Parameter	 
>412	Identifier	RefList
>413	ParameterType	const CList < T > &
>414	CompoundStatement	 
>415	IfStatement	if ( this == & RefList )
>416	ElseStatement	else
>417	IfStatement	if ( m_Size < RefList . m_Size )
>418	ElseStatement	else
>419	IfStatement	if ( m_Size > RefList . m_Size )
>420	ElseStatement	else
>421	CompoundStatement	 
>422	ReturnStatement	 
>423	Identifier	true
>424	WhileStatement	while ( CurrentLeft && CurrentRight )
>425	CompoundStatement	 
>426	ExpressionStatement	 
>427	AssignmentExpr	CurrentRight = CurrentRight -> m_Next
>428	PtrMemberAccess	CurrentRight -> m_Next
>429	Identifier	m_Next
>430	Identifier	CurrentRight
>431	Identifier	CurrentRight
>432	ExpressionStatement	 
>433	AssignmentExpr	CurrentLeft = CurrentLeft -> m_Next
>434	PtrMemberAccess	CurrentLeft -> m_Next
>435	Identifier	m_Next
>436	Identifier	CurrentLeft
>437	Identifier	CurrentLeft
>438	IfStatement	if ( ( * CurrentLeft ) > ( * CurrentRight ) )
>439	ReturnStatement	 
>440	Identifier	false
>441	Condition	 
>442	RelationalExpression	( * CurrentLeft ) > ( * CurrentRight )
>443	UnaryOp	* CurrentRight
>444	Identifier	CurrentRight
>445	UnaryOperator	*
>446	UnaryOp	* CurrentLeft
>447	Identifier	CurrentLeft
>448	UnaryOperator	*
>449	Condition	 
>450	AndExpression	CurrentLeft && CurrentRight
>451	Identifier	CurrentRight
>452	Identifier	CurrentLeft
>453	IdentifierDeclStatement	 
>454	IdentifierDecl	* CurrentRight = RefList . m_Head
>455	AssignmentExpr	* CurrentRight = RefList . m_Head
>456	MemberAccess	RefList . m_Head
>457	Identifier	m_Head
>458	Identifier	RefList
>459	Identifier	CurrentRight
>460	Identifier	CurrentRight
>461	IdentifierDeclType	CListElement < T > *
>462	IdentifierDeclStatement	 
>463	IdentifierDecl	* CurrentLeft = m_Head
>464	AssignmentExpr	* CurrentLeft = m_Head
>465	Identifier	m_Head
>466	Identifier	m_Head
>467	Identifier	CurrentLeft
>468	IdentifierDeclType	CListElement < T > *
>469	ReturnStatement	 
>470	Identifier	false
>471	Condition	 
>472	RelationalExpression	m_Size > RefList . m_Size
>473	MemberAccess	RefList . m_Size
>474	Identifier	m_Size
>475	Identifier	RefList
>476	Identifier	m_Size
>477	ReturnStatement	 
>478	Identifier	true
>479	Condition	 
>480	RelationalExpression	m_Size < RefList . m_Size
>481	MemberAccess	RefList . m_Size
>482	Identifier	m_Size
>483	Identifier	RefList
>484	Identifier	m_Size
>485	ReturnStatement	 
>486	Identifier	true
>487	Condition	 
>488	EqualityExpression	this == & RefList
>489	UnaryOp	& RefList
>490	Identifier	RefList
>491	UnaryOperator	&
>492	Identifier	this
>511	FunctionDef	operator >= (const CList < T > & RefList)
>512	ParameterList	const CList < T > & RefList
>513	Parameter	 
>514	Identifier	RefList
>515	ParameterType	const CList < T > &
>516	CompoundStatement	 
>517	IfStatement	if ( this == & RefList )
>518	ElseStatement	else
>519	IfStatement	if ( m_Size > RefList . m_Size )
>520	ElseStatement	else
>521	IfStatement	if ( m_Size < RefList . m_Size )
>522	ElseStatement	else
>523	CompoundStatement	 
>524	ReturnStatement	 
>525	Identifier	true
>526	WhileStatement	while ( CurrentLeft && CurrentRight )
>527	CompoundStatement	 
>528	ExpressionStatement	 
>529	AssignmentExpr	CurrentRight = CurrentRight -> m_Next
>530	PtrMemberAccess	CurrentRight -> m_Next
>531	Identifier	m_Next
>532	Identifier	CurrentRight
>533	Identifier	CurrentRight
>534	ExpressionStatement	 
>535	AssignmentExpr	CurrentLeft = CurrentLeft -> m_Next
>536	PtrMemberAccess	CurrentLeft -> m_Next
>537	Identifier	m_Next
>538	Identifier	CurrentLeft
>539	Identifier	CurrentLeft
>540	IfStatement	if ( ( * CurrentLeft ) < ( * CurrentRight ) )
>541	ReturnStatement	 
>542	Identifier	false
>543	Condition	 
>544	RelationalExpression	( * CurrentLeft ) < ( * CurrentRight )
>545	UnaryOp	* CurrentRight
>546	Identifier	CurrentRight
>547	UnaryOperator	*
>548	UnaryOp	* CurrentLeft
>549	Identifier	CurrentLeft
>550	UnaryOperator	*
>551	Condition	 
>552	AndExpression	CurrentLeft && CurrentRight
>553	Identifier	CurrentRight
>554	Identifier	CurrentLeft
>555	IdentifierDeclStatement	 
>556	IdentifierDecl	* CurrentRight = RefList . m_Head
>557	AssignmentExpr	* CurrentRight = RefList . m_Head
>558	MemberAccess	RefList . m_Head
>559	Identifier	m_Head
>560	Identifier	RefList
>561	Identifier	CurrentRight
>562	Identifier	CurrentRight
>563	IdentifierDeclType	CListElement < T > *
>564	IdentifierDeclStatement	 
>565	IdentifierDecl	* CurrentLeft = m_Head
>566	AssignmentExpr	* CurrentLeft = m_Head
>567	Identifier	m_Head
>568	Identifier	m_Head
>569	Identifier	CurrentLeft
>570	IdentifierDeclType	CListElement < T > *
>571	ReturnStatement	 
>572	Identifier	false
>573	Condition	 
>574	RelationalExpression	m_Size < RefList . m_Size
>575	MemberAccess	RefList . m_Size
>576	Identifier	m_Size
>577	Identifier	RefList
>578	Identifier	m_Size
>579	ReturnStatement	 
>580	Identifier	true
>581	Condition	 
>582	RelationalExpression	m_Size > RefList . m_Size
>583	MemberAccess	RefList . m_Size
>584	Identifier	m_Size
>585	Identifier	RefList
>586	Identifier	m_Size
>587	ReturnStatement	 
>588	Identifier	true
>589	Condition	 
>590	EqualityExpression	this == & RefList
>591	UnaryOp	& RefList
>592	Identifier	RefList
>593	UnaryOperator	&
>594	Identifier	this
>613	FunctionDef	operator != (const CList < T > & RefList)
>614	ParameterList	const CList < T > & RefList
>615	Parameter	 
>616	Identifier	RefList
>617	ParameterType	const CList < T > &
>618	CompoundStatement	 
>619	IfStatement	if ( this == & RefList )
>620	ElseStatement	else
>621	IfStatement	if ( m_Size != RefList . m_Size )
>622	ElseStatement	else
>623	CompoundStatement	 
>624	ReturnStatement	 
>625	Identifier	false
>626	WhileStatement	while ( CurrentLeft && CurrentRight )
>627	CompoundStatement	 
>628	ExpressionStatement	 
>629	AssignmentExpr	CurrentRight = CurrentRight -> m_Next
>630	PtrMemberAccess	CurrentRight -> m_Next
>631	Identifier	m_Next
>632	Identifier	CurrentRight
>633	Identifier	CurrentRight
>634	ExpressionStatement	 
>635	AssignmentExpr	CurrentLeft = CurrentLeft -> m_Next
>636	PtrMemberAccess	CurrentLeft -> m_Next
>637	Identifier	m_Next
>638	Identifier	CurrentLeft
>639	Identifier	CurrentLeft
>640	IfStatement	if ( ( * CurrentLeft ) != ( * CurrentRight ) )
>641	ReturnStatement	 
>642	Identifier	true
>643	Condition	 
>644	EqualityExpression	( * CurrentLeft ) != ( * CurrentRight )
>645	UnaryOp	* CurrentRight
>646	Identifier	CurrentRight
>647	UnaryOperator	*
>648	UnaryOp	* CurrentLeft
>649	Identifier	CurrentLeft
>650	UnaryOperator	*
>651	Condition	 
>652	AndExpression	CurrentLeft && CurrentRight
>653	Identifier	CurrentRight
>654	Identifier	CurrentLeft
>655	IdentifierDeclStatement	 
>656	IdentifierDecl	* CurrentRight = RefList . m_Head
>657	AssignmentExpr	* CurrentRight = RefList . m_Head
>658	MemberAccess	RefList . m_Head
>659	Identifier	m_Head
>660	Identifier	RefList
>661	Identifier	CurrentRight
>662	Identifier	CurrentRight
>663	IdentifierDeclType	CListElement < T > *
>664	IdentifierDeclStatement	 
>665	IdentifierDecl	* CurrentLeft = m_Head
>666	AssignmentExpr	* CurrentLeft = m_Head
>667	Identifier	m_Head
>668	Identifier	m_Head
>669	Identifier	CurrentLeft
>670	IdentifierDeclType	CListElement < T > *
>671	ReturnStatement	 
>672	Identifier	true
>673	Condition	 
>674	EqualityExpression	m_Size != RefList . m_Size
>675	MemberAccess	RefList . m_Size
>676	Identifier	m_Size
>677	Identifier	RefList
>678	Identifier	m_Size
>679	ReturnStatement	 
>680	Identifier	false
>681	Condition	 
>682	EqualityExpression	this == & RefList
>683	UnaryOp	& RefList
>684	Identifier	RefList
>685	UnaryOperator	&
>686	Identifier	this
>705	FunctionDef	operator == (const CList < T > & RefList)
>706	ParameterList	const CList < T > & RefList
>707	Parameter	 
>708	Identifier	RefList
>709	ParameterType	const CList < T > &
>710	CompoundStatement	 
>711	IfStatement	if ( this == & RefList )
>712	ElseStatement	else
>713	IfStatement	if ( m_Size != RefList . m_Size )
>714	ElseStatement	else
>715	CompoundStatement	 
>716	ReturnStatement	 
>717	Identifier	true
>718	WhileStatement	while ( CurrentLeft && CurrentRight )
>719	CompoundStatement	 
>720	ExpressionStatement	 
>721	AssignmentExpr	CurrentRight = CurrentRight -> m_Next
>722	PtrMemberAccess	CurrentRight -> m_Next
>723	Identifier	m_Next
>724	Identifier	CurrentRight
>725	Identifier	CurrentRight
>726	ExpressionStatement	 
>727	AssignmentExpr	CurrentLeft = CurrentLeft -> m_Next
>728	PtrMemberAccess	CurrentLeft -> m_Next
>729	Identifier	m_Next
>730	Identifier	CurrentLeft
>731	Identifier	CurrentLeft
>732	IfStatement	if ( ( * CurrentLeft ) != ( * CurrentRight ) )
>733	ReturnStatement	 
>734	Identifier	false
>735	Condition	 
>736	EqualityExpression	( * CurrentLeft ) != ( * CurrentRight )
>737	UnaryOp	* CurrentRight
>738	Identifier	CurrentRight
>739	UnaryOperator	*
>740	UnaryOp	* CurrentLeft
>741	Identifier	CurrentLeft
>742	UnaryOperator	*
>743	Condition	 
>744	AndExpression	CurrentLeft && CurrentRight
>745	Identifier	CurrentRight
>746	Identifier	CurrentLeft
>747	IdentifierDeclStatement	 
>748	IdentifierDecl	* CurrentRight = RefList . m_Head
>749	AssignmentExpr	* CurrentRight = RefList . m_Head
>750	MemberAccess	RefList . m_Head
>751	Identifier	m_Head
>752	Identifier	RefList
>753	Identifier	CurrentRight
>754	Identifier	CurrentRight
>755	IdentifierDeclType	CListElement < T > *
>756	IdentifierDeclStatement	 
>757	IdentifierDecl	* CurrentLeft = m_Head
>758	AssignmentExpr	* CurrentLeft = m_Head
>759	Identifier	m_Head
>760	Identifier	m_Head
>761	Identifier	CurrentLeft
>762	IdentifierDeclType	CListElement < T > *
>763	ReturnStatement	 
>764	Identifier	false
>765	Condition	 
>766	EqualityExpression	m_Size != RefList . m_Size
>767	MemberAccess	RefList . m_Size
>768	Identifier	m_Size
>769	Identifier	RefList
>770	Identifier	m_Size
>771	ReturnStatement	 
>772	Identifier	true
>773	Condition	 
>774	EqualityExpression	this == & RefList
>775	UnaryOp	& RefList
>776	Identifier	RefList
>777	UnaryOperator	&
>778	Identifier	this
>797	FunctionDef	operator [ ] (const unsigned int Index)
>798	ParameterList	const unsigned int Index
>799	Parameter	 
>800	Identifier	Index
>801	ParameterType	const unsigned int
>802	CompoundStatement	 
>803	ReturnStatement	 
>804	PtrMemberAccess	Current -> m_Element
>805	Identifier	m_Element
>806	Identifier	Current
>807	WhileStatement	while ( Counter != Index )
>808	CompoundStatement	 
>809	ExpressionStatement	 
>810	AssignmentExpr	Current = Current -> m_Next
>811	PtrMemberAccess	Current -> m_Next
>812	Identifier	m_Next
>813	Identifier	Current
>814	Identifier	Current
>815	ExpressionStatement	 
>816	IncDecOp	Counter ++
>817	IncDec	++
>818	Identifier	Counter
>819	Condition	 
>820	EqualityExpression	Counter != Index
>821	Identifier	Index
>822	Identifier	Counter
>823	IdentifierDeclStatement	 
>824	IdentifierDecl	Counter = 0
>825	AssignmentExpr	Counter = 0
>826	PrimaryExpression	0
>827	Identifier	Counter
>828	Identifier	Counter
>829	IdentifierDeclType	unsigned int
>830	IdentifierDeclStatement	 
>831	IdentifierDecl	* Current = m_Head
>832	AssignmentExpr	* Current = m_Head
>833	Identifier	m_Head
>834	Identifier	m_Head
>835	Identifier	Current
>836	IdentifierDeclType	CListElement < T > *
>837	ExpressionStatement	 
>838	CallExpression	_S_DEBUG ( assert ( Index < m_Size ) )
>839	ArgumentList	assert ( Index < m_Size )
>840	Argument	assert ( Index < m_Size )
>841	CallExpression	assert ( Index < m_Size )
>842	ArgumentList	Index < m_Size
>843	Argument	Index < m_Size
>844	RelationalExpression	Index < m_Size
>845	Identifier	m_Size
>846	Identifier	Index
>847	Callee	assert
>848	Identifier	assert
>849	Callee	_S_DEBUG
>850	Identifier	_S_DEBUG
>863	FunctionDef	operator [ ] (const unsigned int Index)
>864	ParameterList	const unsigned int Index
>865	Parameter	 
>866	Identifier	Index
>867	ParameterType	const unsigned int
>868	CompoundStatement	 
>869	ReturnStatement	 
>870	PtrMemberAccess	Current -> m_Element
>871	Identifier	m_Element
>872	Identifier	Current
>873	WhileStatement	while ( Counter != Index )
>874	CompoundStatement	 
>875	ExpressionStatement	 
>876	AssignmentExpr	Current = Current -> m_Next
>877	PtrMemberAccess	Current -> m_Next
>878	Identifier	m_Next
>879	Identifier	Current
>880	Identifier	Current
>881	ExpressionStatement	 
>882	IncDecOp	Counter ++
>883	IncDec	++
>884	Identifier	Counter
>885	Condition	 
>886	EqualityExpression	Counter != Index
>887	Identifier	Index
>888	Identifier	Counter
>889	IdentifierDeclStatement	 
>890	IdentifierDecl	Counter = 0
>891	AssignmentExpr	Counter = 0
>892	PrimaryExpression	0
>893	Identifier	Counter
>894	Identifier	Counter
>895	IdentifierDeclType	unsigned int
>896	IdentifierDeclStatement	 
>897	IdentifierDecl	* Current = m_Head
>898	AssignmentExpr	* Current = m_Head
>899	Identifier	m_Head
>900	Identifier	m_Head
>901	Identifier	Current
>902	IdentifierDeclType	CListElement < T > *
>903	ExpressionStatement	 
>904	CallExpression	_S_DEBUG ( assert ( Index < m_Size ) )
>905	ArgumentList	assert ( Index < m_Size )
>906	Argument	assert ( Index < m_Size )
>907	CallExpression	assert ( Index < m_Size )
>908	ArgumentList	Index < m_Size
>909	Argument	Index < m_Size
>910	RelationalExpression	Index < m_Size
>911	Identifier	m_Size
>912	Identifier	Index
>913	Callee	assert
>914	Identifier	assert
>915	Callee	_S_DEBUG
>916	Identifier	_S_DEBUG
>929	FunctionDef	SetAt (const unsigned int Index , const T & Element)
>930	ParameterList	const unsigned int Index , const T & Element
>931	Parameter	 
>932	Identifier	Element
>933	ParameterType	const T &
>934	Parameter	 
>935	Identifier	Index
>936	ParameterType	const unsigned int
>937	CompoundStatement	 
>938	IfStatement	if ( Index >= m_Size )
>939	ElseStatement	else
>940	CompoundStatement	 
>941	ExpressionStatement	 
>942	AssignmentExpr	Current -> m_Element = Element
>943	Identifier	Element
>944	PtrMemberAccess	Current -> m_Element
>945	Identifier	m_Element
>946	Identifier	Current
>947	WhileStatement	while ( Counter != Index )
>948	CompoundStatement	 
>949	ExpressionStatement	 
>950	AssignmentExpr	Current = Current -> m_Next
>951	PtrMemberAccess	Current -> m_Next
>952	Identifier	m_Next
>953	Identifier	Current
>954	Identifier	Current
>955	ExpressionStatement	 
>956	IncDecOp	Counter ++
>957	IncDec	++
>958	Identifier	Counter
>959	Condition	 
>960	EqualityExpression	Counter != Index
>961	Identifier	Index
>962	Identifier	Counter
>963	IdentifierDeclStatement	 
>964	IdentifierDecl	Counter = 0
>965	AssignmentExpr	Counter = 0
>966	PrimaryExpression	0
>967	Identifier	Counter
>968	Identifier	Counter
>969	IdentifierDeclType	unsigned int
>970	IdentifierDeclStatement	 
>971	IdentifierDecl	* Current = m_Head
>972	AssignmentExpr	* Current = m_Head
>973	Identifier	m_Head
>974	Identifier	m_Head
>975	Identifier	Current
>976	IdentifierDeclType	CListElement < T > *
>977	ExpressionStatement	 
>978	CallExpression	Add ( Element )
>979	ArgumentList	Element
>980	Argument	Element
>981	Identifier	Element
>982	Callee	Add
>983	Identifier	Add
>984	Condition	 
>985	RelationalExpression	Index >= m_Size
>986	Identifier	m_Size
>987	Identifier	Index
>1000	FunctionDef	Find (const T & Element)
>1001	ParameterList	const T & Element
>1002	Parameter	 
>1003	Identifier	Element
>1004	ParameterType	const T &
>1005	CompoundStatement	 
>1006	ReturnStatement	 
>1007	UnaryOp	- 1
>1008	PrimaryExpression	1
>1009	UnaryOperator	-
>1010	WhileStatement	while ( Current )
>1011	CompoundStatement	 
>1012	ExpressionStatement	 
>1013	AssignmentExpr	Current = Current -> m_Next
>1014	PtrMemberAccess	Current -> m_Next
>1015	Identifier	m_Next
>1016	Identifier	Current
>1017	Identifier	Current
>1018	ExpressionStatement	 
>1019	IncDecOp	Counter ++
>1020	IncDec	++
>1021	Identifier	Counter
>1022	IfStatement	if ( Current -> m_Element == Element )
>1023	ReturnStatement	 
>1024	Identifier	Counter
>1025	Condition	 
>1026	EqualityExpression	Current -> m_Element == Element
>1027	Identifier	Element
>1028	PtrMemberAccess	Current -> m_Element
>1029	Identifier	m_Element
>1030	Identifier	Current
>1031	Condition	 
>1032	Identifier	Current
>1033	IdentifierDeclStatement	 
>1034	IdentifierDecl	Counter = 0
>1035	AssignmentExpr	Counter = 0
>1036	PrimaryExpression	0
>1037	Identifier	Counter
>1038	Identifier	Counter
>1039	IdentifierDeclType	int
>1040	IdentifierDeclStatement	 
>1041	IdentifierDecl	* Current = m_Head
>1042	AssignmentExpr	* Current = m_Head
>1043	Identifier	m_Head
>1044	Identifier	m_Head
>1045	Identifier	Current
>1046	IdentifierDeclType	CListElement < T > *
>1057	FunctionDef	Add (const CList < T > & List)
>1058	ParameterList	const CList < T > & List
>1059	Parameter	 
>1060	Identifier	List
>1061	ParameterType	const CList < T > &
>1062	CompoundStatement	 
>1063	IfStatement	if ( List . m_Size )
>1064	CompoundStatement	 
>1065	ExpressionStatement	 
>1066	AssignmentExpr	m_Size += List . m_Size
>1067	MemberAccess	List . m_Size
>1068	Identifier	m_Size
>1069	Identifier	List
>1070	Identifier	m_Size
>1071	IfStatement	if ( m_Tail )
>1072	ElseStatement	else
>1073	CompoundStatement	 
>1074	ExpressionStatement	 
>1075	AssignmentExpr	m_Tail = Current
>1076	Identifier	Current
>1077	Identifier	m_Tail
>1078	ExpressionStatement	 
>1079	AssignmentExpr	m_Head = NewHead
>1080	Identifier	NewHead
>1081	Identifier	m_Head
>1082	CompoundStatement	 
>1083	ExpressionStatement	 
>1084	AssignmentExpr	m_Tail = Current
>1085	Identifier	Current
>1086	Identifier	m_Tail
>1087	ExpressionStatement	 
>1088	AssignmentExpr	m_Tail -> m_Next = NewHead
>1089	Identifier	NewHead
>1090	PtrMemberAccess	m_Tail -> m_Next
>1091	Identifier	m_Next
>1092	Identifier	m_Tail
>1093	ExpressionStatement	 
>1094	AssignmentExpr	NewHead -> m_Prev = m_Tail
>1095	Identifier	m_Tail
>1096	PtrMemberAccess	NewHead -> m_Prev
>1097	Identifier	m_Prev
>1098	Identifier	NewHead
>1099	Condition	 
>1100	Identifier	m_Tail
>1101	WhileStatement	while ( RightCurrent )
>1102	CompoundStatement	 
>1103	ExpressionStatement	 
>1104	AssignmentExpr	RightCurrent = RightCurrent -> m_Next
>1105	PtrMemberAccess	RightCurrent -> m_Next
>1106	Identifier	m_Next
>1107	Identifier	RightCurrent
>1108	Identifier	RightCurrent
>1109	ExpressionStatement	 
>1110	AssignmentExpr	Current = Current -> m_Next
>1111	PtrMemberAccess	Current -> m_Next
>1112	Identifier	m_Next
>1113	Identifier	Current
>1114	Identifier	Current
>1115	ExpressionStatement	 
>1116	AssignmentExpr	Current -> m_Next -> m_Prev = Current
>1117	Identifier	Current
>1118	PtrMemberAccess	Current -> m_Next -> m_Prev
>1119	Identifier	m_Prev
>1120	PtrMemberAccess	Current -> m_Next
>1121	Identifier	m_Next
>1122	Identifier	Current
>1123	ExpressionStatement	 
>1124	AssignmentExpr	Current -> m_Next = new CListElement < T > ( RightCurrent -> m_Element )
>1125	PtrMemberAccess	RightCurrent -> m_Element
>1126	Identifier	m_Element
>1127	Identifier	RightCurrent
>1128	PtrMemberAccess	Current -> m_Next
>1129	Identifier	m_Next
>1130	Identifier	Current
>1131	Condition	 
>1132	Identifier	RightCurrent
>1133	ExpressionStatement	 
>1134	AssignmentExpr	RightCurrent = RightCurrent -> m_Next
>1135	PtrMemberAccess	RightCurrent -> m_Next
>1136	Identifier	m_Next
>1137	Identifier	RightCurrent
>1138	Identifier	RightCurrent
>1139	IdentifierDeclStatement	 
>1140	IdentifierDecl	* NewHead = Current
>1141	AssignmentExpr	* NewHead = Current
>1142	Identifier	Current
>1143	Identifier	Current
>1144	Identifier	NewHead
>1145	IdentifierDeclType	CListElement < T > *
>1146	IdentifierDeclStatement	 
>1147	IdentifierDecl	* Current = new CListElement < T > ( RightCurrent -> m_Element )
>1148	AssignmentExpr	* Current = new CListElement < T > ( RightCurrent -> m_Element )
>1149	PtrMemberAccess	RightCurrent -> m_Element
>1150	Identifier	m_Element
>1151	Identifier	RightCurrent
>1152	Identifier	Current
>1153	Identifier	Current
>1154	IdentifierDeclType	CListElement < T > *
>1155	IdentifierDeclStatement	 
>1156	IdentifierDecl	* RightCurrent = List . m_Head
>1157	AssignmentExpr	* RightCurrent = List . m_Head
>1158	MemberAccess	List . m_Head
>1159	Identifier	m_Head
>1160	Identifier	List
>1161	Identifier	RightCurrent
>1162	Identifier	RightCurrent
>1163	IdentifierDeclType	CListElement < T > *
>1164	Condition	 
>1165	MemberAccess	List . m_Size
>1166	Identifier	m_Size
>1167	Identifier	List
>1192	FunctionDef	Remove (const T & Element)
>1193	ParameterList	const T & Element
>1194	Parameter	 
>1195	Identifier	Element
>1196	ParameterType	const T &
>1197	CompoundStatement	 
>1198	WhileStatement	while ( Current )
>1199	CompoundStatement	 
>1200	IfStatement	if ( Current -> m_Element == Element )
>1201	ElseStatement	else
>1202	ExpressionStatement	 
>1203	AssignmentExpr	Current = Current -> m_Next
>1204	PtrMemberAccess	Current -> m_Next
>1205	Identifier	m_Next
>1206	Identifier	Current
>1207	Identifier	Current
>1208	CompoundStatement	 
>1209	ExpressionStatement	 
>1210	AssignmentExpr	Current = Future
>1211	Identifier	Future
>1212	Identifier	Current
>1213	ExpressionStatement	 
>1214	IncDecOp	m_Size --
>1215	IncDec	--
>1216	Identifier	m_Size
>1217	ExpressionStatement	 
>1218	Identifier	Current
>1219	Statement	 
>1220	IdentifierDeclStatement	 
>1221	IdentifierDecl	* Future = Current -> m_Next
>1222	AssignmentExpr	* Future = Current -> m_Next
>1223	PtrMemberAccess	Current -> m_Next
>1224	Identifier	m_Next
>1225	Identifier	Current
>1226	Identifier	Future
>1227	Identifier	Future
>1228	IdentifierDeclType	CListElement < T > *
>1229	IfStatement	if ( Current -> m_Next )
>1230	ElseStatement	else
>1231	ExpressionStatement	 
>1232	AssignmentExpr	m_Tail = Current -> m_Prev
>1233	PtrMemberAccess	Current -> m_Prev
>1234	Identifier	m_Prev
>1235	Identifier	Current
>1236	Identifier	m_Tail
>1237	ExpressionStatement	 
>1238	AssignmentExpr	Current -> m_Next -> m_Prev = Current -> m_Prev
>1239	PtrMemberAccess	Current -> m_Prev
>1240	Identifier	m_Prev
>1241	Identifier	Current
>1242	PtrMemberAccess	Current -> m_Next -> m_Prev
>1243	Identifier	m_Prev
>1244	PtrMemberAccess	Current -> m_Next
>1245	Identifier	m_Next
>1246	Identifier	Current
>1247	Condition	 
>1248	PtrMemberAccess	Current -> m_Next
>1249	Identifier	m_Next
>1250	Identifier	Current
>1251	IfStatement	if ( Current -> m_Prev )
>1252	ElseStatement	else
>1253	ExpressionStatement	 
>1254	AssignmentExpr	m_Head = Current -> m_Next
>1255	PtrMemberAccess	Current -> m_Next
>1256	Identifier	m_Next
>1257	Identifier	Current
>1258	Identifier	m_Head
>1259	ExpressionStatement	 
>1260	AssignmentExpr	Current -> m_Prev -> m_Next = Current -> m_Next
>1261	PtrMemberAccess	Current -> m_Next
>1262	Identifier	m_Next
>1263	Identifier	Current
>1264	PtrMemberAccess	Current -> m_Prev -> m_Next
>1265	Identifier	m_Next
>1266	PtrMemberAccess	Current -> m_Prev
>1267	Identifier	m_Prev
>1268	Identifier	Current
>1269	Condition	 
>1270	PtrMemberAccess	Current -> m_Prev
>1271	Identifier	m_Prev
>1272	Identifier	Current
>1273	Condition	 
>1274	EqualityExpression	Current -> m_Element == Element
>1275	Identifier	Element
>1276	PtrMemberAccess	Current -> m_Element
>1277	Identifier	m_Element
>1278	Identifier	Current
>1279	Condition	 
>1280	Identifier	Current
>1281	IdentifierDeclStatement	 
>1282	IdentifierDecl	* Current = m_Head
>1283	AssignmentExpr	* Current = m_Head
>1284	Identifier	m_Head
>1285	Identifier	m_Head
>1286	Identifier	Current
>1287	IdentifierDeclType	CListElement < T > *
>1306	FunctionDef	RemoveAt (const unsigned int Index)
>1307	ParameterList	const unsigned int Index
>1308	Parameter	 
>1309	Identifier	Index
>1310	ParameterType	const unsigned int
>1311	CompoundStatement	 
>1312	IfStatement	if ( m_Size > Index )
>1313	CompoundStatement	 
>1314	WhileStatement	while ( Current )
>1315	CompoundStatement	 
>1316	IfStatement	if ( Counter == Index )
>1317	ElseStatement	else
>1318	CompoundStatement	 
>1319	ExpressionStatement	 
>1320	IncDecOp	Counter ++
>1321	IncDec	++
>1322	Identifier	Counter
>1323	ExpressionStatement	 
>1324	AssignmentExpr	Current = Current -> m_Next
>1325	PtrMemberAccess	Current -> m_Next
>1326	Identifier	m_Next
>1327	Identifier	Current
>1328	Identifier	Current
>1329	CompoundStatement	 
>1330	ReturnStatement	 
>1331	ExpressionStatement	 
>1332	IncDecOp	m_Size --
>1333	IncDec	--
>1334	Identifier	m_Size
>1335	ExpressionStatement	 
>1336	Identifier	Current
>1337	Statement	 
>1338	IfStatement	if ( Current -> m_Next )
>1339	ElseStatement	else
>1340	ExpressionStatement	 
>1341	AssignmentExpr	m_Tail = Current -> m_Prev
>1342	PtrMemberAccess	Current -> m_Prev
>1343	Identifier	m_Prev
>1344	Identifier	Current
>1345	Identifier	m_Tail
>1346	ExpressionStatement	 
>1347	AssignmentExpr	Current -> m_Next -> m_Prev = Current -> m_Prev
>1348	PtrMemberAccess	Current -> m_Prev
>1349	Identifier	m_Prev
>1350	Identifier	Current
>1351	PtrMemberAccess	Current -> m_Next -> m_Prev
>1352	Identifier	m_Prev
>1353	PtrMemberAccess	Current -> m_Next
>1354	Identifier	m_Next
>1355	Identifier	Current
>1356	Condition	 
>1357	PtrMemberAccess	Current -> m_Next
>1358	Identifier	m_Next
>1359	Identifier	Current
>1360	IfStatement	if ( Current -> m_Prev )
>1361	ElseStatement	else
>1362	ExpressionStatement	 
>1363	AssignmentExpr	m_Head = Current -> m_Next
>1364	PtrMemberAccess	Current -> m_Next
>1365	Identifier	m_Next
>1366	Identifier	Current
>1367	Identifier	m_Head
>1368	ExpressionStatement	 
>1369	AssignmentExpr	Current -> m_Prev -> m_Next = Current -> m_Next
>1370	PtrMemberAccess	Current -> m_Next
>1371	Identifier	m_Next
>1372	Identifier	Current
>1373	PtrMemberAccess	Current -> m_Prev -> m_Next
>1374	Identifier	m_Next
>1375	PtrMemberAccess	Current -> m_Prev
>1376	Identifier	m_Prev
>1377	Identifier	Current
>1378	Condition	 
>1379	PtrMemberAccess	Current -> m_Prev
>1380	Identifier	m_Prev
>1381	Identifier	Current
>1382	Condition	 
>1383	EqualityExpression	Counter == Index
>1384	Identifier	Index
>1385	Identifier	Counter
>1386	Condition	 
>1387	Identifier	Current
>1388	IdentifierDeclStatement	 
>1389	IdentifierDecl	Counter = 0
>1390	AssignmentExpr	Counter = 0
>1391	PrimaryExpression	0
>1392	Identifier	Counter
>1393	Identifier	Counter
>1394	IdentifierDeclType	unsigned int
>1395	IdentifierDeclStatement	 
>1396	IdentifierDecl	* Current = m_Head
>1397	AssignmentExpr	* Current = m_Head
>1398	Identifier	m_Head
>1399	Identifier	m_Head
>1400	Identifier	Current
>1401	IdentifierDeclType	CListElement < T > *
>1402	Condition	 
>1403	RelationalExpression	m_Size > Index
>1404	Identifier	Index
>1405	Identifier	m_Size
>1423	FunctionDef	InsertAt (const unsigned int Index , const T & Element)
>1424	ParameterList	const unsigned int Index , const T & Element
>1425	Parameter	 
>1426	Identifier	Element
>1427	ParameterType	const T &
>1428	Parameter	 
>1429	Identifier	Index
>1430	ParameterType	const unsigned int
>1431	CompoundStatement	 
>1432	IfStatement	if ( Index >= m_Size )
>1433	ElseStatement	else
>1434	CompoundStatement	 
>1435	IfStatement	if ( Current )
>1436	ElseStatement	else
>1437	ExpressionStatement	 
>1438	CallExpression	Add ( Element )
>1439	ArgumentList	Element
>1440	Argument	Element
>1441	Identifier	Element
>1442	Callee	Add
>1443	Identifier	Add
>1444	CompoundStatement	 
>1445	ExpressionStatement	 
>1446	IncDecOp	m_Size ++
>1447	IncDec	++
>1448	Identifier	m_Size
>1449	ExpressionStatement	 
>1450	AssignmentExpr	Current -> m_Prev = NewElement
>1451	Identifier	NewElement
>1452	PtrMemberAccess	Current -> m_Prev
>1453	Identifier	m_Prev
>1454	Identifier	Current
>1455	IfStatement	if ( Current -> m_Prev )
>1456	ElseStatement	else
>1457	ExpressionStatement	 
>1458	AssignmentExpr	m_Head = NewElement
>1459	Identifier	NewElement
>1460	Identifier	m_Head
>1461	ExpressionStatement	 
>1462	AssignmentExpr	Current -> m_Prev -> m_Next = NewElement
>1463	Identifier	NewElement
>1464	PtrMemberAccess	Current -> m_Prev -> m_Next
>1465	Identifier	m_Next
>1466	PtrMemberAccess	Current -> m_Prev
>1467	Identifier	m_Prev
>1468	Identifier	Current
>1469	Condition	 
>1470	PtrMemberAccess	Current -> m_Prev
>1471	Identifier	m_Prev
>1472	Identifier	Current
>1473	ExpressionStatement	 
>1474	AssignmentExpr	NewElement -> m_Next = Current
>1475	Identifier	Current
>1476	PtrMemberAccess	NewElement -> m_Next
>1477	Identifier	m_Next
>1478	Identifier	NewElement
>1479	ExpressionStatement	 
>1480	AssignmentExpr	NewElement -> m_Prev = Current -> m_Prev
>1481	PtrMemberAccess	Current -> m_Prev
>1482	Identifier	m_Prev
>1483	Identifier	Current
>1484	PtrMemberAccess	NewElement -> m_Prev
>1485	Identifier	m_Prev
>1486	Identifier	NewElement
>1487	Condition	 
>1488	Identifier	Current
>1489	WhileStatement	while ( Current && ( Counter < Index ) )
>1490	CompoundStatement	 
>1491	ExpressionStatement	 
>1492	IncDecOp	Counter ++
>1493	IncDec	++
>1494	Identifier	Counter
>1495	ExpressionStatement	 
>1496	AssignmentExpr	Current = Current -> m_Next
>1497	PtrMemberAccess	Current -> m_Next
>1498	Identifier	m_Next
>1499	Identifier	Current
>1500	Identifier	Current
>1501	Condition	 
>1502	AndExpression	Current && ( Counter < Index )
>1503	RelationalExpression	Counter < Index
>1504	Identifier	Index
>1505	Identifier	Counter
>1506	Identifier	Current
>1507	IdentifierDeclStatement	 
>1508	IdentifierDecl	Counter = 0
>1509	AssignmentExpr	Counter = 0
>1510	PrimaryExpression	0
>1511	Identifier	Counter
>1512	Identifier	Counter
>1513	IdentifierDeclType	unsigned int
>1514	IdentifierDeclStatement	 
>1515	IdentifierDecl	* NewElement = new CListElement < T > ( Element )
>1516	AssignmentExpr	* NewElement = new CListElement < T > ( Element )
>1517	Identifier	Element
>1518	Identifier	Element
>1519	Identifier	NewElement
>1520	IdentifierDeclType	CListElement < T > *
>1521	IdentifierDeclStatement	 
>1522	IdentifierDecl	* Current = m_Head
>1523	AssignmentExpr	* Current = m_Head
>1524	Identifier	m_Head
>1525	Identifier	m_Head
>1526	Identifier	Current
>1527	IdentifierDeclType	CListElement < T > *
>1528	ExpressionStatement	 
>1529	CallExpression	Add ( Element )
>1530	ArgumentList	Element
>1531	Argument	Element
>1532	Identifier	Element
>1533	Callee	Add
>1534	Identifier	Add
>1535	Condition	 
>1536	RelationalExpression	Index >= m_Size
>1537	Identifier	m_Size
>1538	Identifier	Index
<3=8,4
<4=5
<5=7,6
<8=13,9
<9=10
<10=12,11
<13=48,14
<14=43,34,15
<15=32,16
<16=23,17
<17=18
<18=22,19
<19=21,20
<23=24
<24=30,25
<25=26
<26=27
<27=29,28
<30=31
<32=33
<34=35
<35=42,41,36
<36=40,37
<37=39,38
<43=44
<44=46,45
<46=47
<48=49
<49=51,50
<51=53,52
<66=68,67
<68=83,76,69
<69=70
<70=74,71
<71=72
<72=73
<74=75
<76=77
<77=81,78
<78=79
<79=80
<81=82
<83=84
<84=86,85
<86=87
<93=95,94
<95=129,125,108,104,100,96
<96=97
<97=99,98
<100=101
<101=103,102
<104=105
<105=107,106
<108=123,109
<109=117,116,114,110
<110=111
<111=113,112
<114=115
<117=118
<118=122,119
<119=121,120
<123=124
<125=126
<126=128,127
<129=130
<130=135,134,131
<131=133,132
<147=152,148
<148=149
<149=151,150
<152=157,153
<153=154
<154=156,155
<157=189,180,158
<158=159
<159=174,166,160
<160=161
<161=165,162
<162=164,163
<166=167
<167=169,168
<169=171,170
<171=173,172
<174=175
<175=177,176
<177=179,178
<180=185,181
<181=182
<182=184,183
<185=186
<186=188,187
<189=190
<190=192,191
<205=210,206
<206=207
<207=209,208
<210=211
<211=283,281,212
<212=213
<213=275,273,214
<214=215
<215=267,265,216
<216=217
<217=258,249,220,218
<218=219
<220=245,221
<221=234,228,222
<222=223
<223=227,224
<224=226,225
<228=229
<229=233,230
<230=232,231
<234=237,235
<235=236
<237=238
<238=242,239
<239=241,240
<242=244,243
<245=246
<246=248,247
<249=250
<250=257,256,251
<251=255,252
<252=254,253
<258=259
<259=264,263,260
<260=262,261
<265=266
<267=268
<268=272,269
<269=271,270
<273=274
<275=276
<276=280,277
<277=279,278
<281=282
<283=284
<284=288,285
<285=287,286
<307=312,308
<308=309
<309=311,310
<312=313
<313=385,383,314
<314=315
<315=377,375,316
<316=317
<317=369,367,318
<318=319
<319=360,351,322,320
<320=321
<322=347,323
<323=336,330,324
<324=325
<325=329,326
<326=328,327
<330=331
<331=335,332
<332=334,333
<336=339,337
<337=338
<339=340
<340=344,341
<341=343,342
<344=346,345
<347=348
<348=350,349
<351=352
<352=359,358,353
<353=357,354
<354=356,355
<360=361
<361=366,365,362
<362=364,363
<367=368
<369=370
<370=374,371
<371=373,372
<375=376
<377=378
<378=382,379
<379=381,380
<383=384
<385=386
<386=390,387
<387=389,388
<409=414,410
<410=411
<411=413,412
<414=415
<415=487,485,416
<416=417
<417=479,477,418
<418=419
<419=471,469,420
<420=421
<421=462,453,424,422
<422=423
<424=449,425
<425=438,432,426
<426=427
<427=431,428
<428=430,429
<432=433
<433=437,434
<434=436,435
<438=441,439
<439=440
<441=442
<442=446,443
<443=445,444
<446=448,447
<449=450
<450=452,451
<453=454
<454=461,460,455
<455=459,456
<456=458,457
<462=463
<463=468,467,464
<464=466,465
<469=470
<471=472
<472=476,473
<473=475,474
<477=478
<479=480
<480=484,481
<481=483,482
<485=486
<487=488
<488=492,489
<489=491,490
<511=516,512
<512=513
<513=515,514
<516=517
<517=589,587,518
<518=519
<519=581,579,520
<520=521
<521=573,571,522
<522=523
<523=564,555,526,524
<524=525
<526=551,527
<527=540,534,528
<528=529
<529=533,530
<530=532,531
<534=535
<535=539,536
<536=538,537
<540=543,541
<541=542
<543=544
<544=548,545
<545=547,546
<548=550,549
<551=552
<552=554,553
<555=556
<556=563,562,557
<557=561,558
<558=560,559
<564=565
<565=570,569,566
<566=568,567
<571=572
<573=574
<574=578,575
<575=577,576
<579=580
<581=582
<582=586,583
<583=585,584
<587=588
<589=590
<590=594,591
<591=593,592
<613=618,614
<614=615
<615=617,616
<618=619
<619=681,679,620
<620=621
<621=673,671,622
<622=623
<623=664,655,626,624
<624=625
<626=651,627
<627=640,634,628
<628=629
<629=633,630
<630=632,631
<634=635
<635=639,636
<636=638,637
<640=643,641
<641=642
<643=644
<644=648,645
<645=647,646
<648=650,649
<651=652
<652=654,653
<655=656
<656=663,662,657
<657=661,658
<658=660,659
<664=665
<665=670,669,666
<666=668,667
<671=672
<673=674
<674=678,675
<675=677,676
<679=680
<681=682
<682=686,683
<683=685,684
<705=710,706
<706=707
<707=709,708
<710=711
<711=773,771,712
<712=713
<713=765,763,714
<714=715
<715=756,747,718,716
<716=717
<718=743,719
<719=732,726,720
<720=721
<721=725,722
<722=724,723
<726=727
<727=731,728
<728=730,729
<732=735,733
<733=734
<735=736
<736=740,737
<737=739,738
<740=742,741
<743=744
<744=746,745
<747=748
<748=755,754,749
<749=753,750
<750=752,751
<756=757
<757=762,761,758
<758=760,759
<763=764
<765=766
<766=770,767
<767=769,768
<771=772
<773=774
<774=778,775
<775=777,776
<797=802,798
<798=799
<799=801,800
<802=837,830,823,807,803
<803=804
<804=806,805
<807=819,808
<808=815,809
<809=810
<810=814,811
<811=813,812
<815=816
<816=818,817
<819=820
<820=822,821
<823=824
<824=829,828,825
<825=827,826
<830=831
<831=836,835,832
<832=834,833
<837=838
<838=849,839
<839=840
<840=841
<841=847,842
<842=843
<843=844
<844=846,845
<847=848
<849=850
<863=868,864
<864=865
<865=867,866
<868=903,896,889,873,869
<869=870
<870=872,871
<873=885,874
<874=881,875
<875=876
<876=880,877
<877=879,878
<881=882
<882=884,883
<885=886
<886=888,887
<889=890
<890=895,894,891
<891=893,892
<896=897
<897=902,901,898
<898=900,899
<903=904
<904=915,905
<905=906
<906=907
<907=913,908
<908=909
<909=910
<910=912,911
<913=914
<915=916
<929=937,930
<930=934,931
<931=933,932
<934=936,935
<937=938
<938=984,977,939
<939=940
<940=970,963,947,941
<941=942
<942=944,943
<944=946,945
<947=959,948
<948=955,949
<949=950
<950=954,951
<951=953,952
<955=956
<956=958,957
<959=960
<960=962,961
<963=964
<964=969,968,965
<965=967,966
<970=971
<971=976,975,972
<972=974,973
<977=978
<978=982,979
<979=980
<980=981
<982=983
<984=985
<985=987,986
<1000=1005,1001
<1001=1002
<1002=1004,1003
<1005=1040,1033,1010,1006
<1006=1007
<1007=1009,1008
<1010=1031,1011
<1011=1022,1018,1012
<1012=1013
<1013=1017,1014
<1014=1016,1015
<1018=1019
<1019=1021,1020
<1022=1025,1023
<1023=1024
<1025=1026
<1026=1028,1027
<1028=1030,1029
<1031=1032
<1033=1034
<1034=1039,1038,1035
<1035=1037,1036
<1040=1041
<1041=1046,1045,1042
<1042=1044,1043
<1057=1062,1058
<1058=1059
<1059=1061,1060
<1062=1063
<1063=1164,1064
<1064=1155,1146,1139,1133,1101,1071,1065
<1065=1066
<1066=1070,1067
<1067=1069,1068
<1071=1099,1082,1072
<1072=1073
<1073=1078,1074
<1074=1075
<1075=1077,1076
<1078=1079
<1079=1081,1080
<1082=1093,1087,1083
<1083=1084
<1084=1086,1085
<1087=1088
<1088=1090,1089
<1090=1092,1091
<1093=1094
<1094=1096,1095
<1096=1098,1097
<1099=1100
<1101=1131,1102
<1102=1123,1115,1109,1103
<1103=1104
<1104=1108,1105
<1105=1107,1106
<1109=1110
<1110=1114,1111
<1111=1113,1112
<1115=1116
<1116=1118,1117
<1118=1120,1119
<1120=1122,1121
<1123=1124
<1124=1128,1125
<1125=1127,1126
<1128=1130,1129
<1131=1132
<1133=1134
<1134=1138,1135
<1135=1137,1136
<1139=1140
<1140=1145,1144,1141
<1141=1143,1142
<1146=1147
<1147=1154,1153,1148
<1148=1152,1149
<1149=1151,1150
<1155=1156
<1156=1163,1162,1157
<1157=1161,1158
<1158=1160,1159
<1164=1165
<1165=1167,1166
<1192=1197,1193
<1193=1194
<1194=1196,1195
<1197=1281,1198
<1198=1279,1199
<1199=1200
<1200=1273,1208,1201
<1201=1202
<1202=1203
<1203=1207,1204
<1204=1206,1205
<1208=1251,1229,1220,1219,1217,1213,1209
<1209=1210
<1210=1212,1211
<1213=1214
<1214=1216,1215
<1217=1218
<1220=1221
<1221=1228,1227,1222
<1222=1226,1223
<1223=1225,1224
<1229=1247,1237,1230
<1230=1231
<1231=1232
<1232=1236,1233
<1233=1235,1234
<1237=1238
<1238=1242,1239
<1239=1241,1240
<1242=1244,1243
<1244=1246,1245
<1247=1248
<1248=1250,1249
<1251=1269,1259,1252
<1252=1253
<1253=1254
<1254=1258,1255
<1255=1257,1256
<1259=1260
<1260=1264,1261
<1261=1263,1262
<1264=1266,1265
<1266=1268,1267
<1269=1270
<1270=1272,1271
<1273=1274
<1274=1276,1275
<1276=1278,1277
<1279=1280
<1281=1282
<1282=1287,1286,1283
<1283=1285,1284
<1306=1311,1307
<1307=1308
<1308=1310,1309
<1311=1312
<1312=1402,1313
<1313=1395,1388,1314
<1314=1386,1315
<1315=1316
<1316=1382,1329,1317
<1317=1318
<1318=1323,1319
<1319=1320
<1320=1322,1321
<1323=1324
<1324=1328,1325
<1325=1327,1326
<1329=1360,1338,1337,1335,1331,1330
<1331=1332
<1332=1334,1333
<1335=1336
<1338=1356,1346,1339
<1339=1340
<1340=1341
<1341=1345,1342
<1342=1344,1343
<1346=1347
<1347=1351,1348
<1348=1350,1349
<1351=1353,1352
<1353=1355,1354
<1356=1357
<1357=1359,1358
<1360=1378,1368,1361
<1361=1362
<1362=1363
<1363=1367,1364
<1364=1366,1365
<1368=1369
<1369=1373,1370
<1370=1372,1371
<1373=1375,1374
<1375=1377,1376
<1378=1379
<1379=1381,1380
<1382=1383
<1383=1385,1384
<1386=1387
<1388=1389
<1389=1394,1393,1390
<1390=1392,1391
<1395=1396
<1396=1401,1400,1397
<1397=1399,1398
<1402=1403
<1403=1405,1404
<1423=1431,1424
<1424=1428,1425
<1425=1427,1426
<1428=1430,1429
<1431=1432
<1432=1535,1528,1433
<1433=1434
<1434=1521,1514,1507,1489,1435
<1435=1487,1444,1436
<1436=1437
<1437=1438
<1438=1442,1439
<1439=1440
<1440=1441
<1442=1443
<1444=1479,1473,1455,1449,1445
<1445=1446
<1446=1448,1447
<1449=1450
<1450=1452,1451
<1452=1454,1453
<1455=1469,1461,1456
<1456=1457
<1457=1458
<1458=1460,1459
<1461=1462
<1462=1464,1463
<1464=1466,1465
<1466=1468,1467
<1469=1470
<1470=1472,1471
<1473=1474
<1474=1476,1475
<1476=1478,1477
<1479=1480
<1480=1484,1481
<1481=1483,1482
<1484=1486,1485
<1487=1488
<1489=1501,1490
<1490=1495,1491
<1491=1492
<1492=1494,1493
<1495=1496
<1496=1500,1497
<1497=1499,1498
<1501=1502
<1502=1506,1503
<1503=1505,1504
<1507=1508
<1508=1513,1512,1509
<1509=1511,1510
<1514=1515
<1515=1520,1519,1516
<1516=1518,1517
<1521=1522
<1522=1527,1526,1523
<1523=1525,1524
<1528=1529
<1529=1533,1530
<1530=1531
<1531=1532
<1533=1534
<1535=1536
<1536=1538,1537
