>3	FunctionDef	callFunction (mxArray * plhs [ ] , const mxArray * prhs [ ])
>4	ParameterList	mxArray * plhs [ ] , const mxArray * prhs [ ]
>5	Parameter	 
>6	Identifier	prhs
>7	ParameterType	const mxArray * [ ]
>8	Parameter	 
>9	Identifier	plhs
>10	ParameterType	mxArray * [ ]
>11	ReturnType	inline void
>12	CompoundStatement	 
>13	ExpressionStatement	 
>14	CallExpression	X . mult ( Y , XtY , false , true )
>15	ArgumentList	Y
>16	Argument	true
>17	Identifier	true
>18	Argument	false
>19	Identifier	false
>20	Argument	XtY
>21	Identifier	XtY
>22	Argument	Y
>23	Identifier	Y
>24	Callee	X . mult
>25	MemberAccess	X . mult
>26	Identifier	mult
>27	Identifier	X
>28	IdentifierDeclStatement	 
>29	IdentifierDecl	XtY ( prXY , n , nY )
>30	Expression	prXY , n , nY
>31	Expression	n , nY
>32	Identifier	nY
>33	Identifier	n
>34	Identifier	prXY
>35	Identifier	XtY
>36	IdentifierDeclType	Matrix < T >
>37	IdentifierDeclStatement	 
>38	IdentifierDecl	Y ( prY , nY , MY )
>39	Expression	prY , nY , MY
>40	Expression	nY , MY
>41	Identifier	MY
>42	Identifier	nY
>43	Identifier	prY
>44	Identifier	Y
>45	IdentifierDeclType	Matrix < T >
>46	IdentifierDeclStatement	 
>47	IdentifierDecl	X ( prX , n , M )
>48	Expression	prX , n , M
>49	Expression	n , M
>50	Identifier	M
>51	Identifier	n
>52	Identifier	prX
>53	Identifier	X
>54	IdentifierDeclType	Matrix < T >
>55	ExpressionStatement	 
>56	CallExpression	mxGetPr ( plhs [ 0 ] )
>57	ArgumentList	plhs [ 0 ]
>58	Argument	plhs [ 0 ]
>59	ArrayIndexing	plhs [ 0 ]
>60	PrimaryExpression	0
>61	Identifier	plhs
>62	Callee	mxGetPr
>63	Identifier	mxGetPr
>64	Statement	 
>65	Statement	 
>66	Statement	 
>67	Statement	 
>68	Statement	 
>69	Statement	 
>70	Statement	 
>71	Statement	 
>72	Statement	 
>73	ExpressionStatement	 
>74	AssignmentExpr	plhs [ 0 ] = createMatrix < T > ( n , nY )
>75	RelationalExpression	createMatrix < T > ( n , nY )
>76	RelationalExpression	T > ( n , nY )
>77	Expression	n , nY
>78	Identifier	nY
>79	Identifier	n
>80	Identifier	T
>81	Identifier	createMatrix
>82	ArrayIndexing	plhs [ 0 ]
>83	PrimaryExpression	0
>84	Identifier	plhs
>85	IfStatement	if ( M != MY )
>86	ExpressionStatement	 
>87	CallExpression	mexErrMsgTxt ( \"argument sizes are not consistent\" )
>88	ArgumentList	\"argument sizes are not consistent\"
>89	Argument	\"argument sizes are not consistent\"
>90	PrimaryExpression	\"argument sizes are not consistent\"
>91	Callee	mexErrMsgTxt
>92	Identifier	mexErrMsgTxt
>93	Condition	 
>94	EqualityExpression	M != MY
>95	Identifier	MY
>96	Identifier	M
>97	ExpressionStatement	 
>98	ArrayIndexing	dimsY [ 1 ]
>99	PrimaryExpression	1
>100	Identifier	dimsY
>101	Statement	 
>102	Statement	 
>103	Statement	 
>104	Statement	 
>105	Statement	 
>106	Statement	 
>107	Statement	 
>108	ExpressionStatement	 
>109	ArrayIndexing	dimsY [ 0 ]
>110	PrimaryExpression	0
>111	Identifier	dimsY
>112	Statement	 
>113	Statement	 
>114	Statement	 
>115	Statement	 
>116	Statement	 
>117	Statement	 
>118	Statement	 
>119	IdentifierDeclStatement	 
>120	IdentifierDecl	* dimsY = mxGetDimensions ( prhs [ 1 ] )
>121	AssignmentExpr	* dimsY = mxGetDimensions ( prhs [ 1 ] )
>122	CallExpression	mxGetDimensions ( prhs [ 1 ] )
>123	ArgumentList	prhs [ 1 ]
>124	Argument	prhs [ 1 ]
>125	ArrayIndexing	prhs [ 1 ]
>126	PrimaryExpression	1
>127	Identifier	prhs
>128	Callee	mxGetDimensions
>129	Identifier	mxGetDimensions
>130	Identifier	dimsY
>131	Identifier	dimsY
>132	IdentifierDeclType	const mwSize *
>133	ExpressionStatement	 
>134	CallExpression	mxGetPr ( prhs [ 1 ] )
>135	ArgumentList	prhs [ 1 ]
>136	Argument	prhs [ 1 ]
>137	ArrayIndexing	prhs [ 1 ]
>138	PrimaryExpression	1
>139	Identifier	prhs
>140	Callee	mxGetPr
>141	Identifier	mxGetPr
>142	Statement	 
>143	Statement	 
>144	Statement	 
>145	Statement	 
>146	Statement	 
>147	Statement	 
>148	Statement	 
>149	Statement	 
>150	Statement	 
>151	ExpressionStatement	 
>152	ArrayIndexing	dimsX [ 1 ]
>153	PrimaryExpression	1
>154	Identifier	dimsX
>155	Statement	 
>156	Statement	 
>157	Statement	 
>158	Statement	 
>159	Statement	 
>160	Statement	 
>161	Statement	 
>162	ExpressionStatement	 
>163	ArrayIndexing	dimsX [ 0 ]
>164	PrimaryExpression	0
>165	Identifier	dimsX
>166	Statement	 
>167	Statement	 
>168	Statement	 
>169	Statement	 
>170	Statement	 
>171	Statement	 
>172	Statement	 
>173	IdentifierDeclStatement	 
>174	IdentifierDecl	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>175	AssignmentExpr	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>176	CallExpression	mxGetDimensions ( prhs [ 0 ] )
>177	ArgumentList	prhs [ 0 ]
>178	Argument	prhs [ 0 ]
>179	ArrayIndexing	prhs [ 0 ]
>180	PrimaryExpression	0
>181	Identifier	prhs
>182	Callee	mxGetDimensions
>183	Identifier	mxGetDimensions
>184	Identifier	dimsX
>185	Identifier	dimsX
>186	IdentifierDeclType	const mwSize *
>187	ExpressionStatement	 
>188	CallExpression	mxGetPr ( prhs [ 0 ] )
>189	ArgumentList	prhs [ 0 ]
>190	Argument	prhs [ 0 ]
>191	ArrayIndexing	prhs [ 0 ]
>192	PrimaryExpression	0
>193	Identifier	prhs
>194	Callee	mxGetPr
>195	Identifier	mxGetPr
>196	Statement	 
>197	Statement	 
>198	Statement	 
>199	Statement	 
>200	Statement	 
>201	Statement	 
>202	Statement	 
>203	Statement	 
>204	Statement	 
>205	IfStatement	if ( mxIsSparse ( prhs [ 1 ] ) )
>206	ExpressionStatement	 
>207	CallExpression	mexErrMsgTxt ( \"argument 2 should be full\" )
>208	ArgumentList	\"argument 2 should be full\"
>209	Argument	\"argument 2 should be full\"
>210	PrimaryExpression	\"argument 2 should be full\"
>211	Callee	mexErrMsgTxt
>212	Identifier	mexErrMsgTxt
>213	Condition	 
>214	CallExpression	mxIsSparse ( prhs [ 1 ] )
>215	ArgumentList	prhs [ 1 ]
>216	Argument	prhs [ 1 ]
>217	ArrayIndexing	prhs [ 1 ]
>218	PrimaryExpression	1
>219	Identifier	prhs
>220	Callee	mxIsSparse
>221	Identifier	mxIsSparse
>222	IfStatement	if ( ! mexCheckType < T > ( prhs [ 1 ] ) )
>223	ExpressionStatement	 
>224	CallExpression	mexErrMsgTxt ( \"type of argument 2 is not consistent\" )
>225	ArgumentList	\"type of argument 2 is not consistent\"
>226	Argument	\"type of argument 2 is not consistent\"
>227	PrimaryExpression	\"type of argument 2 is not consistent\"
>228	Callee	mexErrMsgTxt
>229	Identifier	mexErrMsgTxt
>230	Condition	 
>231	RelationalExpression	! mexCheckType < T > ( prhs [ 1 ] )
>232	RelationalExpression	T > ( prhs [ 1 ] )
>233	ArrayIndexing	prhs [ 1 ]
>234	PrimaryExpression	1
>235	Identifier	prhs
>236	Identifier	T
>237	UnaryOp	! mexCheckType
>238	Identifier	mexCheckType
>239	UnaryOperator	!
>240	IfStatement	if ( mxIsSparse ( prhs [ 0 ] ) )
>241	ExpressionStatement	 
>242	CallExpression	mexErrMsgTxt ( \"argument 1 should be full\" )
>243	ArgumentList	\"argument 1 should be full\"
>244	Argument	\"argument 1 should be full\"
>245	PrimaryExpression	\"argument 1 should be full\"
>246	Callee	mexErrMsgTxt
>247	Identifier	mexErrMsgTxt
>248	Condition	 
>249	CallExpression	mxIsSparse ( prhs [ 0 ] )
>250	ArgumentList	prhs [ 0 ]
>251	Argument	prhs [ 0 ]
>252	ArrayIndexing	prhs [ 0 ]
>253	PrimaryExpression	0
>254	Identifier	prhs
>255	Callee	mxIsSparse
>256	Identifier	mxIsSparse
>257	IfStatement	if ( ! mexCheckType < T > ( prhs [ 0 ] ) )
>258	ExpressionStatement	 
>259	CallExpression	mexErrMsgTxt ( \"type of argument 1 is not consistent\" )
>260	ArgumentList	\"type of argument 1 is not consistent\"
>261	Argument	\"type of argument 1 is not consistent\"
>262	PrimaryExpression	\"type of argument 1 is not consistent\"
>263	Callee	mexErrMsgTxt
>264	Identifier	mexErrMsgTxt
>265	Condition	 
>266	RelationalExpression	! mexCheckType < T > ( prhs [ 0 ] )
>267	RelationalExpression	T > ( prhs [ 0 ] )
>268	ArrayIndexing	prhs [ 0 ]
>269	PrimaryExpression	0
>270	Identifier	prhs
>271	Identifier	T
>272	UnaryOp	! mexCheckType
>273	Identifier	mexCheckType
>274	UnaryOperator	!
>298	FunctionDef	mexFunction (int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ])
>299	ParameterList	int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ]
>300	Parameter	 
>301	Identifier	prhs
>302	ParameterType	const mxArray * [ ]
>303	Parameter	 
>304	Identifier	nrhs
>305	ParameterType	int
>306	Parameter	 
>307	Identifier	plhs
>308	ParameterType	mxArray * [ ]
>309	Parameter	 
>310	Identifier	nlhs
>311	ParameterType	int
>312	ReturnType	void
>313	CompoundStatement	 
>314	IfStatement	if ( mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS )
>315	ElseStatement	else
>316	CompoundStatement	 
>317	ExpressionStatement	 
>318	RelationalExpression	callFunction < float > ( plhs , prhs )
>319	RelationalExpression	float > ( plhs , prhs )
>320	Expression	plhs , prhs
>321	Identifier	prhs
>322	Identifier	plhs
>323	Identifier	float
>324	Identifier	callFunction
>325	CompoundStatement	 
>326	ExpressionStatement	 
>327	RelationalExpression	callFunction < double > ( plhs , prhs )
>328	RelationalExpression	double > ( plhs , prhs )
>329	Expression	plhs , prhs
>330	Identifier	prhs
>331	Identifier	plhs
>332	Identifier	double
>333	Identifier	callFunction
>334	Condition	 
>335	EqualityExpression	mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS
>336	Identifier	mxDOUBLE_CLASS
>337	CallExpression	mxGetClassID ( prhs [ 0 ] )
>338	ArgumentList	prhs [ 0 ]
>339	Argument	prhs [ 0 ]
>340	ArrayIndexing	prhs [ 0 ]
>341	PrimaryExpression	0
>342	Identifier	prhs
>343	Callee	mxGetClassID
>344	Identifier	mxGetClassID
>345	IfStatement	if ( nlhs != 1 )
>346	ExpressionStatement	 
>347	CallExpression	mexErrMsgTxt ( \"Bad number of output arguments\" )
>348	ArgumentList	\"Bad number of output arguments\"
>349	Argument	\"Bad number of output arguments\"
>350	PrimaryExpression	\"Bad number of output arguments\"
>351	Callee	mexErrMsgTxt
>352	Identifier	mexErrMsgTxt
>353	Condition	 
>354	EqualityExpression	nlhs != 1
>355	PrimaryExpression	1
>356	Identifier	nlhs
>357	IfStatement	if ( nrhs != 2 )
>358	ExpressionStatement	 
>359	CallExpression	mexErrMsgTxt ( \"Bad number of inputs arguments\" )
>360	ArgumentList	\"Bad number of inputs arguments\"
>361	Argument	\"Bad number of inputs arguments\"
>362	PrimaryExpression	\"Bad number of inputs arguments\"
>363	Callee	mexErrMsgTxt
>364	Identifier	mexErrMsgTxt
>365	Condition	 
>366	EqualityExpression	nrhs != 2
>367	PrimaryExpression	2
>368	Identifier	nrhs
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=257,240,222,205,204,203,202,201,200,199,198,197,196,187,173,172,171,170,169,168,167,166,162,161,13,28,37,46,55,64,65,66,67,68,69,70,71,72,73,85,97,101,102,103,104,105,106,107,108,112,113,114,115,116,117,118,119,133,142,143,144,145,146,147,148,149,150,151,155,156,157,158,159,160
<13=14
<14=24,15
<15=22,20,18,16
<16=17
<18=19
<20=21
<22=23
<24=25
<25=27,26
<28=29
<29=36,35,30
<30=34,31
<31=33,32
<37=38
<38=45,44,39
<39=43,40
<40=42,41
<46=47
<47=54,53,48
<48=52,49
<49=51,50
<55=56
<56=62,57
<57=58
<58=59
<59=61,60
<62=63
<73=74
<74=82,75
<75=81,76
<76=80,77
<77=79,78
<82=84,83
<85=93,86
<86=87
<87=91,88
<88=89
<89=90
<91=92
<93=94
<94=96,95
<97=98
<98=100,99
<108=109
<109=111,110
<119=120
<120=132,131,121
<121=130,122
<122=128,123
<123=124
<124=125
<125=127,126
<128=129
<133=134
<134=140,135
<135=136
<136=137
<137=139,138
<140=141
<151=152
<152=154,153
<162=163
<163=165,164
<173=174
<174=186,185,175
<175=184,176
<176=182,177
<177=178
<178=179
<179=181,180
<182=183
<187=188
<188=194,189
<189=190
<190=191
<191=193,192
<194=195
<205=213,206
<206=207
<207=211,208
<208=209
<209=210
<211=212
<213=214
<214=220,215
<215=216
<216=217
<217=219,218
<220=221
<222=230,223
<223=224
<224=228,225
<225=226
<226=227
<228=229
<230=231
<231=237,232
<232=236,233
<233=235,234
<237=239,238
<240=248,241
<241=242
<242=246,243
<243=244
<244=245
<246=247
<248=249
<249=255,250
<250=251
<251=252
<252=254,253
<255=256
<257=265,258
<258=259
<259=263,260
<260=261
<261=262
<263=264
<265=266
<266=272,267
<267=271,268
<268=270,269
<272=274,273
<298=313,312,299
<299=309,306,303,300
<300=302,301
<303=305,304
<306=308,307
<309=311,310
<313=357,345,314
<314=334,325,315
<315=316
<316=317
<317=318
<318=324,319
<319=323,320
<320=322,321
<325=326
<326=327
<327=333,328
<328=332,329
<329=331,330
<334=335
<335=337,336
<337=343,338
<338=339
<339=340
<340=342,341
<343=344
<345=353,346
<346=347
<347=351,348
<348=349
<349=350
<351=352
<353=354
<354=356,355
<357=365,358
<358=359
<359=363,360
<360=361
<361=362
<363=364
<365=366
<366=368,367
