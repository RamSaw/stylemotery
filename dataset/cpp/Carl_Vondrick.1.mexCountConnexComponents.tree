>3	FunctionDef	callFunction (mxArray * plhs [ ] , const mxArray * prhs [ ])
>4	ParameterList	mxArray * plhs [ ] , const mxArray * prhs [ ]
>5	Parameter	 
>6	Identifier	prhs
>7	ParameterType	const mxArray * [ ]
>8	Parameter	 
>9	Identifier	plhs
>10	ParameterType	mxArray * [ ]
>11	ReturnType	inline void
>12	CompoundStatement	 
>13	ExpressionStatement	 
>14	AssignmentExpr	( * pr_out ) = static_cast < T > ( num )
>15	RelationalExpression	static_cast < T > ( num )
>16	RelationalExpression	T > ( num )
>17	Identifier	num
>18	Identifier	T
>19	Identifier	static_cast
>20	UnaryOp	* pr_out
>21	Identifier	pr_out
>22	UnaryOperator	*
>23	ExpressionStatement	 
>24	CallExpression	mxGetPr ( plhs [ 0 ] )
>25	ArgumentList	plhs [ 0 ]
>26	Argument	plhs [ 0 ]
>27	ArrayIndexing	plhs [ 0 ]
>28	PrimaryExpression	0
>29	Identifier	plhs
>30	Callee	mxGetPr
>31	Identifier	mxGetPr
>32	Statement	 
>33	Statement	 
>34	Statement	 
>35	Statement	 
>36	Statement	 
>37	Statement	 
>38	Statement	 
>39	Statement	 
>40	Statement	 
>41	ExpressionStatement	 
>42	AssignmentExpr	plhs [ 0 ] = createMatrix < T > ( 1 , 1 )
>43	RelationalExpression	createMatrix < T > ( 1 , 1 )
>44	RelationalExpression	T > ( 1 , 1 )
>45	Expression	1 , 1
>46	PrimaryExpression	1
>47	PrimaryExpression	1
>48	Identifier	T
>49	Identifier	createMatrix
>50	ArrayIndexing	plhs [ 0 ]
>51	PrimaryExpression	0
>52	Identifier	plhs
>53	ExpressionStatement	 
>54	RelationalExpression	deleteCopySparse < T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r )
>55	RelationalExpression	T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r )
>56	Expression	D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r
>57	Expression	D_r2 , D_pB2 , D_pE2 , D_v , D_r
>58	Expression	D_pB2 , D_pE2 , D_v , D_r
>59	Expression	D_pE2 , D_v , D_r
>60	Expression	D_v , D_r
>61	Identifier	D_r
>62	Identifier	D_v
>63	Identifier	D_pE2
>64	Identifier	D_pB2
>65	Identifier	D_r2
>66	Identifier	D_v2
>67	Identifier	T
>68	Identifier	deleteCopySparse
>69	IdentifierDeclStatement	 
>70	IdentifierDecl	num = count_cc_graph ( G , active )
>71	AssignmentExpr	num = count_cc_graph ( G , active )
>72	CallExpression	count_cc_graph ( G , active )
>73	ArgumentList	G
>74	Argument	active
>75	Identifier	active
>76	Argument	G
>77	Identifier	G
>78	Callee	count_cc_graph
>79	Identifier	count_cc_graph
>80	Identifier	num
>81	Identifier	num
>82	IdentifierDeclType	long
>83	IdentifierDeclStatement	 
>84	IdentifierDecl	active ( pr_alpha0 , nalpha )
>85	Expression	pr_alpha0 , nalpha
>86	Identifier	nalpha
>87	Identifier	pr_alpha0
>88	Identifier	active
>89	IdentifierDeclType	Vector < T >
>90	IfStatement	if ( nalpha != G . m ( ) )
>91	ExpressionStatement	 
>92	CallExpression	mexErrMsgTxt ( \"inconsistent vector size\" )
>93	ArgumentList	\"inconsistent vector size\"
>94	Argument	\"inconsistent vector size\"
>95	PrimaryExpression	\"inconsistent vector size\"
>96	Callee	mexErrMsgTxt
>97	Identifier	mexErrMsgTxt
>98	Condition	 
>99	EqualityExpression	nalpha != G . m ( )
>100	CallExpression	G . m ( )
>101	ArgumentList	 
>102	Callee	G . m
>103	MemberAccess	G . m
>104	Identifier	m
>105	Identifier	G
>106	Identifier	nalpha
>107	ExpressionStatement	 
>108	ArrayIndexing	dimsAlpha [ 1 ]
>109	PrimaryExpression	1
>110	Identifier	dimsAlpha
>111	Statement	 
>112	Statement	 
>113	Statement	 
>114	Statement	 
>115	Statement	 
>116	Statement	 
>117	Statement	 
>118	Statement	 
>119	Statement	 
>120	Statement	 
>121	Statement	 
>122	Statement	 
>123	Statement	 
>124	Statement	 
>125	Statement	 
>126	Statement	 
>127	Statement	 
>128	Statement	 
>129	IdentifierDeclStatement	 
>130	IdentifierDecl	* dimsAlpha = mxGetDimensions ( prhs [ 1 ] )
>131	AssignmentExpr	* dimsAlpha = mxGetDimensions ( prhs [ 1 ] )
>132	CallExpression	mxGetDimensions ( prhs [ 1 ] )
>133	ArgumentList	prhs [ 1 ]
>134	Argument	prhs [ 1 ]
>135	ArrayIndexing	prhs [ 1 ]
>136	PrimaryExpression	1
>137	Identifier	prhs
>138	Callee	mxGetDimensions
>139	Identifier	mxGetDimensions
>140	Identifier	dimsAlpha
>141	Identifier	dimsAlpha
>142	IdentifierDeclType	const mwSize *
>143	ExpressionStatement	 
>144	CallExpression	mxGetPr ( prhs [ 1 ] )
>145	ArgumentList	prhs [ 1 ]
>146	Argument	prhs [ 1 ]
>147	ArrayIndexing	prhs [ 1 ]
>148	PrimaryExpression	1
>149	Identifier	prhs
>150	Callee	mxGetPr
>151	Identifier	mxGetPr
>152	Statement	 
>153	Statement	 
>154	Statement	 
>155	Statement	 
>156	Statement	 
>157	Statement	 
>158	Statement	 
>159	Statement	 
>160	Statement	 
>161	IdentifierDeclStatement	 
>162	IdentifierDecl	G ( D_v2 , D_r2 , D_pB2 , D_pE2 , mD , p , D_pB2 [ p ] )
>163	Expression	D_v2 , D_r2 , D_pB2 , D_pE2 , mD , p , D_pB2 [ p ]
>164	Expression	D_r2 , D_pB2 , D_pE2 , mD , p , D_pB2 [ p ]
>165	Expression	D_pB2 , D_pE2 , mD , p , D_pB2 [ p ]
>166	Expression	D_pE2 , mD , p , D_pB2 [ p ]
>167	Expression	mD , p , D_pB2 [ p ]
>168	Expression	p , D_pB2 [ p ]
>169	ArrayIndexing	D_pB2 [ p ]
>170	Identifier	p
>171	Identifier	D_pB2
>172	Identifier	p
>173	Identifier	mD
>174	Identifier	D_pE2
>175	Identifier	D_pB2
>176	Identifier	D_r2
>177	Identifier	D_v2
>178	Identifier	G
>179	IdentifierDeclType	SpMatrix < T >
>180	ExpressionStatement	 
>181	RelationalExpression	createCopySparse < T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p )
>182	RelationalExpression	T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p )
>183	Expression	D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p
>184	Expression	D_r2 , D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p
>185	Expression	D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p
>186	Expression	D_pE2 , D_v , D_r , D_pB , D_pE , p
>187	Expression	D_v , D_r , D_pB , D_pE , p
>188	Expression	D_r , D_pB , D_pE , p
>189	Expression	D_pB , D_pE , p
>190	Expression	D_pE , p
>191	Identifier	p
>192	Identifier	D_pE
>193	Identifier	D_pB
>194	Identifier	D_r
>195	Identifier	D_v
>196	Identifier	D_pE2
>197	Identifier	D_pB2
>198	Identifier	D_r2
>199	Identifier	D_v2
>200	Identifier	T
>201	Identifier	createCopySparse
>202	ExpressionStatement	 
>203	AssignmentExpr	D_pE = D_pB + 1
>204	AdditiveExpression	D_pB + 1
>205	PrimaryExpression	1
>206	Identifier	D_pB
>207	Identifier	D_pE
>208	ExpressionStatement	 
>209	AssignmentExpr	D_pB = mxGetJc ( prhs [ 0 ] )
>210	CallExpression	mxGetJc ( prhs [ 0 ] )
>211	ArgumentList	prhs [ 0 ]
>212	Argument	prhs [ 0 ]
>213	ArrayIndexing	prhs [ 0 ]
>214	PrimaryExpression	0
>215	Identifier	prhs
>216	Callee	mxGetJc
>217	Identifier	mxGetJc
>218	Identifier	D_pB
>219	ExpressionStatement	 
>220	AssignmentExpr	D_r = mxGetIr ( prhs [ 0 ] )
>221	CallExpression	mxGetIr ( prhs [ 0 ] )
>222	ArgumentList	prhs [ 0 ]
>223	Argument	prhs [ 0 ]
>224	ArrayIndexing	prhs [ 0 ]
>225	PrimaryExpression	0
>226	Identifier	prhs
>227	Callee	mxGetIr
>228	Identifier	mxGetIr
>229	Identifier	D_r
>230	ExpressionStatement	 
>231	CallExpression	mxGetPr ( prhs [ 0 ] )
>232	ArgumentList	prhs [ 0 ]
>233	Argument	prhs [ 0 ]
>234	ArrayIndexing	prhs [ 0 ]
>235	PrimaryExpression	0
>236	Identifier	prhs
>237	Callee	mxGetPr
>238	Identifier	mxGetPr
>239	Statement	 
>240	Statement	 
>241	Statement	 
>242	Statement	 
>243	Statement	 
>244	Statement	 
>245	Statement	 
>246	IdentifierDeclStatement	 
>247	IdentifierDecl	* D_v2
>248	Identifier	D_v2
>249	IdentifierDeclType	T *
>250	IdentifierDeclStatement	 
>251	IdentifierDecl	* D_pE2
>252	Identifier	D_pE2
>253	IdentifierDeclType	long *
>254	IdentifierDecl	* D_pB2
>255	Identifier	D_pB2
>256	IdentifierDeclType	long *
>257	IdentifierDecl	* D_r2
>258	Identifier	D_r2
>259	IdentifierDeclType	long *
>260	IdentifierDeclStatement	 
>261	IdentifierDecl	* D_pE
>262	Identifier	D_pE
>263	IdentifierDeclType	mwSize *
>264	IdentifierDecl	* D_pB
>265	Identifier	D_pB
>266	IdentifierDeclType	mwSize *
>267	IdentifierDecl	* D_r
>268	Identifier	D_r
>269	IdentifierDeclType	mwSize *
>270	IdentifierDeclStatement	 
>271	IdentifierDecl	* D_v
>272	Identifier	D_v
>273	IdentifierDeclType	double *
>274	IdentifierDeclStatement	 
>275	IdentifierDecl	n = p
>276	AssignmentExpr	n = p
>277	Identifier	p
>278	Identifier	p
>279	Identifier	n
>280	IdentifierDeclType	const long
>281	ExpressionStatement	 
>282	ArrayIndexing	dimsD [ 1 ]
>283	PrimaryExpression	1
>284	Identifier	dimsD
>285	Statement	 
>286	Statement	 
>287	Statement	 
>288	Statement	 
>289	Statement	 
>290	Statement	 
>291	Statement	 
>292	ExpressionStatement	 
>293	ArrayIndexing	dimsD [ 0 ]
>294	PrimaryExpression	0
>295	Identifier	dimsD
>296	Statement	 
>297	Statement	 
>298	Statement	 
>299	Statement	 
>300	Statement	 
>301	Statement	 
>302	Statement	 
>303	IdentifierDeclStatement	 
>304	IdentifierDecl	* dimsD = mxGetDimensions ( prhs [ 0 ] )
>305	AssignmentExpr	* dimsD = mxGetDimensions ( prhs [ 0 ] )
>306	CallExpression	mxGetDimensions ( prhs [ 0 ] )
>307	ArgumentList	prhs [ 0 ]
>308	Argument	prhs [ 0 ]
>309	ArrayIndexing	prhs [ 0 ]
>310	PrimaryExpression	0
>311	Identifier	prhs
>312	Callee	mxGetDimensions
>313	Identifier	mxGetDimensions
>314	Identifier	dimsD
>315	Identifier	dimsD
>316	IdentifierDeclType	const mwSize *
>317	IfStatement	if ( ! mxIsSparse ( prhs [ 0 ] ) )
>318	ExpressionStatement	 
>319	CallExpression	mexErrMsgTxt ( \"argument 1 should be sparse\" )
>320	ArgumentList	\"argument 1 should be sparse\"
>321	Argument	\"argument 1 should be sparse\"
>322	PrimaryExpression	\"argument 1 should be sparse\"
>323	Callee	mexErrMsgTxt
>324	Identifier	mexErrMsgTxt
>325	Condition	 
>326	UnaryOp	! mxIsSparse ( prhs [ 0 ] )
>327	CallExpression	mxIsSparse ( prhs [ 0 ] )
>328	ArgumentList	prhs [ 0 ]
>329	Argument	prhs [ 0 ]
>330	ArrayIndexing	prhs [ 0 ]
>331	PrimaryExpression	0
>332	Identifier	prhs
>333	Callee	mxIsSparse
>334	Identifier	mxIsSparse
>335	UnaryOperator	!
>336	IfStatement	if ( ! mexCheckType < T > ( prhs [ 0 ] ) )
>337	ExpressionStatement	 
>338	CallExpression	mexErrMsgTxt ( \"type of argument 1 is not consistent\" )
>339	ArgumentList	\"type of argument 1 is not consistent\"
>340	Argument	\"type of argument 1 is not consistent\"
>341	PrimaryExpression	\"type of argument 1 is not consistent\"
>342	Callee	mexErrMsgTxt
>343	Identifier	mexErrMsgTxt
>344	Condition	 
>345	RelationalExpression	! mexCheckType < T > ( prhs [ 0 ] )
>346	RelationalExpression	T > ( prhs [ 0 ] )
>347	ArrayIndexing	prhs [ 0 ]
>348	PrimaryExpression	0
>349	Identifier	prhs
>350	Identifier	T
>351	UnaryOp	! mexCheckType
>352	Identifier	mexCheckType
>353	UnaryOperator	!
>389	FunctionDef	mexFunction (int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ])
>390	ParameterList	int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ]
>391	Parameter	 
>392	Identifier	prhs
>393	ParameterType	const mxArray * [ ]
>394	Parameter	 
>395	Identifier	nrhs
>396	ParameterType	int
>397	Parameter	 
>398	Identifier	plhs
>399	ParameterType	mxArray * [ ]
>400	Parameter	 
>401	Identifier	nlhs
>402	ParameterType	int
>403	ReturnType	void
>404	CompoundStatement	 
>405	IfStatement	if ( mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS )
>406	ElseStatement	else
>407	CompoundStatement	 
>408	ExpressionStatement	 
>409	RelationalExpression	callFunction < float > ( plhs , prhs )
>410	RelationalExpression	float > ( plhs , prhs )
>411	Expression	plhs , prhs
>412	Identifier	prhs
>413	Identifier	plhs
>414	Identifier	float
>415	Identifier	callFunction
>416	CompoundStatement	 
>417	ExpressionStatement	 
>418	RelationalExpression	callFunction < double > ( plhs , prhs )
>419	RelationalExpression	double > ( plhs , prhs )
>420	Expression	plhs , prhs
>421	Identifier	prhs
>422	Identifier	plhs
>423	Identifier	double
>424	Identifier	callFunction
>425	Condition	 
>426	EqualityExpression	mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS
>427	Identifier	mxDOUBLE_CLASS
>428	CallExpression	mxGetClassID ( prhs [ 0 ] )
>429	ArgumentList	prhs [ 0 ]
>430	Argument	prhs [ 0 ]
>431	ArrayIndexing	prhs [ 0 ]
>432	PrimaryExpression	0
>433	Identifier	prhs
>434	Callee	mxGetClassID
>435	Identifier	mxGetClassID
>436	IfStatement	if ( nlhs != 1 )
>437	ExpressionStatement	 
>438	CallExpression	mexErrMsgTxt ( \"Bad number of output arguments\" )
>439	ArgumentList	\"Bad number of output arguments\"
>440	Argument	\"Bad number of output arguments\"
>441	PrimaryExpression	\"Bad number of output arguments\"
>442	Callee	mexErrMsgTxt
>443	Identifier	mexErrMsgTxt
>444	Condition	 
>445	EqualityExpression	nlhs != 1
>446	PrimaryExpression	1
>447	Identifier	nlhs
>448	IfStatement	if ( nrhs != 2 )
>449	ExpressionStatement	 
>450	CallExpression	mexErrMsgTxt ( \"Bad number of inputs arguments\" )
>451	ArgumentList	\"Bad number of inputs arguments\"
>452	Argument	\"Bad number of inputs arguments\"
>453	PrimaryExpression	\"Bad number of inputs arguments\"
>454	Callee	mexErrMsgTxt
>455	Identifier	mexErrMsgTxt
>456	Condition	 
>457	EqualityExpression	nrhs != 2
>458	PrimaryExpression	2
>459	Identifier	nrhs
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=336,317,303,302,301,300,299,298,297,296,292,291,290,289,288,287,286,285,281,274,270,260,250,246,245,244,243,242,241,240,239,230,219,13,23,32,33,34,35,36,37,38,39,40,41,53,69,83,90,107,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,143,152,153,154,155,156,157,158,159,160,161,180,202,208
<13=14
<14=20,15
<15=19,16
<16=18,17
<20=22,21
<23=24
<24=30,25
<25=26
<26=27
<27=29,28
<30=31
<41=42
<42=50,43
<43=49,44
<44=48,45
<45=47,46
<50=52,51
<53=54
<54=68,55
<55=67,56
<56=66,57
<57=65,58
<58=64,59
<59=63,60
<60=62,61
<69=70
<70=82,81,71
<71=80,72
<72=78,73
<73=76,74
<74=75
<76=77
<78=79
<83=84
<84=89,88,85
<85=87,86
<90=98,91
<91=92
<92=96,93
<93=94
<94=95
<96=97
<98=99
<99=106,100
<100=102,101
<102=103
<103=105,104
<107=108
<108=110,109
<129=130
<130=142,141,131
<131=140,132
<132=138,133
<133=134
<134=135
<135=137,136
<138=139
<143=144
<144=150,145
<145=146
<146=147
<147=149,148
<150=151
<161=162
<162=179,178,163
<163=177,164
<164=176,165
<165=175,166
<166=174,167
<167=173,168
<168=172,169
<169=171,170
<180=181
<181=201,182
<182=200,183
<183=199,184
<184=198,185
<185=197,186
<186=196,187
<187=195,188
<188=194,189
<189=193,190
<190=192,191
<202=203
<203=207,204
<204=206,205
<208=209
<209=218,210
<210=216,211
<211=212
<212=213
<213=215,214
<216=217
<219=220
<220=229,221
<221=227,222
<222=223
<223=224
<224=226,225
<227=228
<230=231
<231=237,232
<232=233
<233=234
<234=236,235
<237=238
<246=247
<247=249,248
<250=257,254,251
<251=253,252
<254=256,255
<257=259,258
<260=267,264,261
<261=263,262
<264=266,265
<267=269,268
<270=271
<271=273,272
<274=275
<275=280,279,276
<276=278,277
<281=282
<282=284,283
<292=293
<293=295,294
<303=304
<304=316,315,305
<305=314,306
<306=312,307
<307=308
<308=309
<309=311,310
<312=313
<317=325,318
<318=319
<319=323,320
<320=321
<321=322
<323=324
<325=326
<326=335,327
<327=333,328
<328=329
<329=330
<330=332,331
<333=334
<336=344,337
<337=338
<338=342,339
<339=340
<340=341
<342=343
<344=345
<345=351,346
<346=350,347
<347=349,348
<351=353,352
<389=404,403,390
<390=400,397,394,391
<391=393,392
<394=396,395
<397=399,398
<400=402,401
<404=448,436,405
<405=425,416,406
<406=407
<407=408
<408=409
<409=415,410
<410=414,411
<411=413,412
<416=417
<417=418
<418=424,419
<419=423,420
<420=422,421
<425=426
<426=428,427
<428=434,429
<429=430
<430=431
<431=433,432
<434=435
<436=444,437
<437=438
<438=442,439
<439=440
<440=441
<442=443
<444=445
<445=447,446
<448=456,449
<449=450
<450=454,451
<451=452
<452=453
<454=455
<456=457
<457=459,458
