>3	FunctionDef	RestrictionMap 
>4	ParameterList	const std 
>5	Parameter	 
>6	Identifier	restriction_list
>7	ParameterType	const std 
>8	CompoundStatement	 
>9	CompoundStatement	 
>10	ExpressionStatement	 
>11	CallExpression	m_restriction_bucket_list . at ( index ) . emplace_back ( restriction . to . node , restriction . flags . is_only )
>12	ArgumentList	restriction . to . node
>13	Argument	restriction . flags . is_only
>14	MemberAccess	restriction . flags . is_only
>15	Identifier	is_only
>16	MemberAccess	restriction . flags
>17	Identifier	flags
>18	Identifier	restriction
>19	Argument	restriction . to . node
>20	MemberAccess	restriction . to . node
>21	Identifier	node
>22	MemberAccess	restriction . to
>23	Identifier	to
>24	Identifier	restriction
>25	Callee	m_restriction_bucket_list . at ( index ) . emplace_back
>26	MemberAccess	m_restriction_bucket_list . at ( index ) . emplace_back
>27	Identifier	emplace_back
>28	CallExpression	m_restriction_bucket_list . at ( index )
>29	ArgumentList	index
>30	Argument	index
>31	Identifier	index
>32	Callee	m_restriction_bucket_list . at
>33	MemberAccess	m_restriction_bucket_list . at
>34	Identifier	at
>35	Identifier	m_restriction_bucket_list
>36	ExpressionStatement	 
>37	UnaryExpression	++ m_count
>38	Identifier	m_count
>39	IncDec	++
>40	IfStatement	if ( restriction_iter == m_restriction_map . end ( ) )
>41	ElseStatement	else
>42	CompoundStatement	 
>43	IfStatement	if ( m_restriction_bucket_list . at ( index ) . begin ( ) -> is_only )
>44	ElseStatement	else
>45	IfStatement	if ( restriction . flags . is_only )
>46	CompoundStatement	 
>47	ExpressionStatement	 
>48	CallExpression	m_restriction_bucket_list . at ( index ) . clear ( )
>49	ArgumentList	 
>50	Callee	m_restriction_bucket_list . at ( index ) . clear
>51	MemberAccess	m_restriction_bucket_list . at ( index ) . clear
>52	Identifier	clear
>53	CallExpression	m_restriction_bucket_list . at ( index )
>54	ArgumentList	index
>55	Argument	index
>56	Identifier	index
>57	Callee	m_restriction_bucket_list . at
>58	MemberAccess	m_restriction_bucket_list . at
>59	Identifier	at
>60	Identifier	m_restriction_bucket_list
>61	ExpressionStatement	 
>62	AssignmentExpr	m_count -= m_restriction_bucket_list . at ( index ) . size ( )
>63	CallExpression	m_restriction_bucket_list . at ( index ) . size ( )
>64	ArgumentList	 
>65	Callee	m_restriction_bucket_list . at ( index ) . size
>66	MemberAccess	m_restriction_bucket_list . at ( index ) . size
>67	Identifier	size
>68	CallExpression	m_restriction_bucket_list . at ( index )
>69	ArgumentList	index
>70	Argument	index
>71	Identifier	index
>72	Callee	m_restriction_bucket_list . at
>73	MemberAccess	m_restriction_bucket_list . at
>74	Identifier	at
>75	Identifier	m_restriction_bucket_list
>76	Identifier	m_count
>77	Condition	 
>78	MemberAccess	restriction . flags . is_only
>79	Identifier	is_only
>80	MemberAccess	restriction . flags
>81	Identifier	flags
>82	Identifier	restriction
>83	CompoundStatement	 
>84	ContinueStatement	 
>85	Condition	 
>86	PtrMemberAccess	m_restriction_bucket_list . at ( index ) . begin ( ) -> is_only
>87	Identifier	is_only
>88	CallExpression	m_restriction_bucket_list . at ( index ) . begin ( )
>89	ArgumentList	 
>90	Callee	m_restriction_bucket_list . at ( index ) . begin
>91	MemberAccess	m_restriction_bucket_list . at ( index ) . begin
>92	Identifier	begin
>93	CallExpression	m_restriction_bucket_list . at ( index )
>94	ArgumentList	index
>95	Argument	index
>96	Identifier	index
>97	Callee	m_restriction_bucket_list . at
>98	MemberAccess	m_restriction_bucket_list . at
>99	Identifier	at
>100	Identifier	m_restriction_bucket_list
>101	ExpressionStatement	 
>102	AssignmentExpr	index = restriction_iter -> second
>103	PtrMemberAccess	restriction_iter -> second
>104	Identifier	second
>105	Identifier	restriction_iter
>106	Identifier	index
>107	CompoundStatement	 
>108	ExpressionStatement	 
>109	CallExpression	m_restriction_map . emplace ( restriction_source , index )
>110	ArgumentList	restriction_source
>111	Argument	index
>112	Identifier	index
>113	Argument	restriction_source
>114	Identifier	restriction_source
>115	Callee	m_restriction_map . emplace
>116	MemberAccess	m_restriction_map . emplace
>117	Identifier	emplace
>118	Identifier	m_restriction_map
>119	ExpressionStatement	 
>120	CallExpression	m_restriction_bucket_list . resize ( index + 1 )
>121	ArgumentList	index + 1
>122	Argument	index + 1
>123	AdditiveExpression	index + 1
>124	PrimaryExpression	1
>125	Identifier	index
>126	Callee	m_restriction_bucket_list . resize
>127	MemberAccess	m_restriction_bucket_list . resize
>128	Identifier	resize
>129	Identifier	m_restriction_bucket_list
>130	ExpressionStatement	 
>131	AssignmentExpr	index = m_restriction_bucket_list . size ( )
>132	CallExpression	m_restriction_bucket_list . size ( )
>133	ArgumentList	 
>134	Callee	m_restriction_bucket_list . size
>135	MemberAccess	m_restriction_bucket_list . size
>136	Identifier	size
>137	Identifier	m_restriction_bucket_list
>138	Identifier	index
>139	Condition	 
>140	EqualityExpression	restriction_iter == m_restriction_map . end ( )
>141	CallExpression	m_restriction_map . end ( )
>142	ArgumentList	 
>143	Callee	m_restriction_map . end
>144	MemberAccess	m_restriction_map . end
>145	Identifier	end
>146	Identifier	m_restriction_map
>147	Identifier	restriction_iter
>148	ExpressionStatement	 
>149	AssignmentExpr	restriction_iter = m_restriction_map . find ( restriction_source )
>150	CallExpression	m_restriction_map . find ( restriction_source )
>151	ArgumentList	restriction_source
>152	Argument	restriction_source
>153	Identifier	restriction_source
>154	Callee	m_restriction_map . find
>155	MemberAccess	m_restriction_map . find
>156	Identifier	find
>157	Identifier	m_restriction_map
>158	Identifier	restriction_iter
>159	Statement	 
>160	IdentifierDeclStatement	 
>161	IdentifierDecl	index
>162	Identifier	index
>163	IdentifierDeclType	std 
>164	IdentifierDeclStatement	 
>165	IdentifierDecl	restriction_source = { restriction . from . node , restriction . via . node }
>166	AssignmentExpr	restriction_source = { restriction . from . node , restriction . via . node }
>167	InitializerList	restriction . from . node
>168	MemberAccess	restriction . via . node
>169	Identifier	node
>170	MemberAccess	restriction . via
>171	Identifier	via
>172	Identifier	restriction
>173	MemberAccess	restriction . from . node
>174	Identifier	node
>175	MemberAccess	restriction . from
>176	Identifier	from
>177	Identifier	restriction
>178	Identifier	restriction_source
>179	Identifier	restriction_source
>180	IdentifierDeclType	RestrictionSource
>181	ExpressionStatement	 
>182	CallExpression	m_no_turn_via_node_set . insert ( restriction . via . node )
>183	ArgumentList	restriction . via . node
>184	Argument	restriction . via . node
>185	MemberAccess	restriction . via . node
>186	Identifier	node
>187	MemberAccess	restriction . via
>188	Identifier	via
>189	Identifier	restriction
>190	Callee	m_no_turn_via_node_set . insert
>191	MemberAccess	m_no_turn_via_node_set . insert
>192	Identifier	insert
>193	Identifier	m_no_turn_via_node_set
>194	ExpressionStatement	 
>195	CallExpression	m_restriction_start_nodes . insert ( restriction . from . node )
>196	ArgumentList	restriction . from . node
>197	Argument	restriction . from . node
>198	MemberAccess	restriction . from . node
>199	Identifier	node
>200	MemberAccess	restriction . from
>201	Identifier	from
>202	Identifier	restriction
>203	Callee	m_restriction_start_nodes . insert
>204	MemberAccess	m_restriction_start_nodes . insert
>205	Identifier	insert
>206	Identifier	m_restriction_start_nodes
>207	Statement	 
>208	Statement	 
>209	Label	 
>210	Identifier	restriction
>211	Statement	 
>212	Statement	 
>213	Statement	 
>214	Statement	 
>249	FunctionDef	RestrictionMap 
>250	ParameterList	const NodeID node
>251	Parameter	 
>252	Identifier	node
>253	ParameterType	const NodeID
>254	ReturnType	bool
>255	CompoundStatement	 
>256	ReturnStatement	 
>257	EqualityExpression	m_no_turn_via_node_set . find ( node ) != m_no_turn_via_node_set . end ( )
>258	CallExpression	m_no_turn_via_node_set . end ( )
>259	ArgumentList	 
>260	Callee	m_no_turn_via_node_set . end
>261	MemberAccess	m_no_turn_via_node_set . end
>262	Identifier	end
>263	Identifier	m_no_turn_via_node_set
>264	CallExpression	m_no_turn_via_node_set . find ( node )
>265	ArgumentList	node
>266	Argument	node
>267	Identifier	node
>268	Callee	m_no_turn_via_node_set . find
>269	MemberAccess	m_no_turn_via_node_set . find
>270	Identifier	find
>271	Identifier	m_no_turn_via_node_set
>279	FunctionDef	RestrictionMap 
>280	ParameterList	const NodeID node_u , const NodeID node_v , const NodeID node_w
>281	Parameter	 
>282	Identifier	node_w
>283	ParameterType	const NodeID
>284	Parameter	 
>285	Identifier	node_v
>286	ParameterType	const NodeID
>287	Parameter	 
>288	Identifier	node_u
>289	ParameterType	const NodeID
>290	ReturnType	void
>291	CompoundStatement	 
>292	IfStatement	if ( restriction_iterator != m_restriction_map . end ( ) )
>293	CompoundStatement	 
>294	ExpressionStatement	 
>295	CallExpression	m_restriction_map . emplace ( new_source , index )
>296	ArgumentList	new_source
>297	Argument	index
>298	Identifier	index
>299	Argument	new_source
>300	Identifier	new_source
>301	Callee	m_restriction_map . emplace
>302	MemberAccess	m_restriction_map . emplace
>303	Identifier	emplace
>304	Identifier	m_restriction_map
>305	IdentifierDeclStatement	 
>306	IdentifierDecl	new_source = { node_u , node_w }
>307	AssignmentExpr	new_source = { node_u , node_w }
>308	InitializerList	node_u
>309	Identifier	node_w
>310	Identifier	node_u
>311	Identifier	new_source
>312	Identifier	new_source
>313	IdentifierDeclType	RestrictionSource
>314	ExpressionStatement	 
>315	CallExpression	m_restriction_start_nodes . emplace ( node_u )
>316	ArgumentList	node_u
>317	Argument	node_u
>318	Identifier	node_u
>319	Callee	m_restriction_start_nodes . emplace
>320	MemberAccess	m_restriction_start_nodes . emplace
>321	Identifier	emplace
>322	Identifier	m_restriction_start_nodes
>323	ExpressionStatement	 
>324	CallExpression	m_restriction_map . erase ( restriction_iterator )
>325	ArgumentList	restriction_iterator
>326	Argument	restriction_iterator
>327	Identifier	restriction_iterator
>328	Callee	m_restriction_map . erase
>329	MemberAccess	m_restriction_map . erase
>330	Identifier	erase
>331	Identifier	m_restriction_map
>332	IdentifierDeclStatement	 
>333	IdentifierDecl	index = restriction_iterator -> second
>334	AssignmentExpr	index = restriction_iterator -> second
>335	PtrMemberAccess	restriction_iterator -> second
>336	Identifier	second
>337	Identifier	restriction_iterator
>338	Identifier	index
>339	Identifier	index
>340	IdentifierDeclType	unsigned
>341	Statement	 
>342	Condition	 
>343	EqualityExpression	restriction_iterator != m_restriction_map . end ( )
>344	CallExpression	m_restriction_map . end ( )
>345	ArgumentList	 
>346	Callee	m_restriction_map . end
>347	MemberAccess	m_restriction_map . end
>348	Identifier	end
>349	Identifier	m_restriction_map
>350	Identifier	restriction_iterator
>351	ExpressionStatement	 
>352	Statement	 
>353	CompoundStatement	 
>354	Statement	 
>355	Statement	 
>356	Statement	 
>357	Statement	 
>358	Statement	 
>359	Statement	 
>360	Statement	 
>361	Statement	 
>362	Statement	 
>363	Statement	 
>364	Statement	 
>365	IfStatement	if ( ! IsSourceNode ( node_v ) )
>366	CompoundStatement	 
>367	ReturnStatement	 
>368	Condition	 
>369	UnaryOp	! IsSourceNode ( node_v )
>370	CallExpression	IsSourceNode ( node_v )
>371	ArgumentList	node_v
>372	Argument	node_v
>373	Identifier	node_v
>374	Callee	IsSourceNode
>375	Identifier	IsSourceNode
>376	UnaryOperator	!
>377	ExpressionStatement	 
>378	CallExpression	BOOST_ASSERT ( node_w != SPECIAL_NODEID )
>379	ArgumentList	node_w != SPECIAL_NODEID
>380	Argument	node_w != SPECIAL_NODEID
>381	EqualityExpression	node_w != SPECIAL_NODEID
>382	Identifier	SPECIAL_NODEID
>383	Identifier	node_w
>384	Callee	BOOST_ASSERT
>385	Identifier	BOOST_ASSERT
>386	ExpressionStatement	 
>387	CallExpression	BOOST_ASSERT ( node_v != SPECIAL_NODEID )
>388	ArgumentList	node_v != SPECIAL_NODEID
>389	Argument	node_v != SPECIAL_NODEID
>390	EqualityExpression	node_v != SPECIAL_NODEID
>391	Identifier	SPECIAL_NODEID
>392	Identifier	node_v
>393	Callee	BOOST_ASSERT
>394	Identifier	BOOST_ASSERT
>395	ExpressionStatement	 
>396	CallExpression	BOOST_ASSERT ( node_u != SPECIAL_NODEID )
>397	ArgumentList	node_u != SPECIAL_NODEID
>398	Argument	node_u != SPECIAL_NODEID
>399	EqualityExpression	node_u != SPECIAL_NODEID
>400	Identifier	SPECIAL_NODEID
>401	Identifier	node_u
>402	Callee	BOOST_ASSERT
>403	Identifier	BOOST_ASSERT
>420	FunctionDef	RestrictionMap 
>421	ParameterList	const NodeID node_u , const NodeID node_v
>422	Parameter	 
>423	Identifier	node_v
>424	ParameterType	const NodeID
>425	Parameter	 
>426	Identifier	node_u
>427	ParameterType	const NodeID
>428	ReturnType	NodeID
>429	CompoundStatement	 
>430	ReturnStatement	 
>431	Identifier	SPECIAL_NODEID
>432	IfStatement	if ( restriction_iter != m_restriction_map . end ( ) )
>433	CompoundStatement	 
>434	CompoundStatement	 
>435	IfStatement	if ( restriction_target . is_only )
>436	CompoundStatement	 
>437	ReturnStatement	 
>438	MemberAccess	restriction_target . target_node
>439	Identifier	target_node
>440	Identifier	restriction_target
>441	Condition	 
>442	MemberAccess	restriction_target . is_only
>443	Identifier	is_only
>444	Identifier	restriction_target
>445	Statement	 
>446	Statement	 
>447	Label	 
>448	Identifier	restriction_target
>449	Statement	 
>450	Statement	 
>451	Statement	 
>452	Statement	 
>453	Statement	 
>454	ExpressionStatement	 
>455	AssignmentExpr	& bucket = m_restriction_bucket_list . at ( index )
>456	CallExpression	m_restriction_bucket_list . at ( index )
>457	ArgumentList	index
>458	Argument	index
>459	Identifier	index
>460	Callee	m_restriction_bucket_list . at
>461	MemberAccess	m_restriction_bucket_list . at
>462	Identifier	at
>463	Identifier	m_restriction_bucket_list
>464	UnaryOp	& bucket
>465	Identifier	bucket
>466	UnaryOperator	&
>467	Statement	 
>468	Statement	 
>469	IdentifierDeclStatement	 
>470	IdentifierDecl	index = restriction_iter -> second
>471	AssignmentExpr	index = restriction_iter -> second
>472	PtrMemberAccess	restriction_iter -> second
>473	Identifier	second
>474	Identifier	restriction_iter
>475	Identifier	index
>476	Identifier	index
>477	IdentifierDeclType	unsigned
>478	Statement	 
>479	Condition	 
>480	EqualityExpression	restriction_iter != m_restriction_map . end ( )
>481	CallExpression	m_restriction_map . end ( )
>482	ArgumentList	 
>483	Callee	m_restriction_map . end
>484	MemberAccess	m_restriction_map . end
>485	Identifier	end
>486	Identifier	m_restriction_map
>487	Identifier	restriction_iter
>488	ExpressionStatement	 
>489	Statement	 
>490	CompoundStatement	 
>491	Statement	 
>492	Statement	 
>493	Statement	 
>494	Statement	 
>495	Statement	 
>496	Statement	 
>497	Statement	 
>498	Statement	 
>499	Statement	 
>500	Statement	 
>501	Statement	 
>502	IfStatement	if ( ! IsSourceNode ( node_u ) )
>503	CompoundStatement	 
>504	ReturnStatement	 
>505	Identifier	SPECIAL_NODEID
>506	Condition	 
>507	UnaryOp	! IsSourceNode ( node_u )
>508	CallExpression	IsSourceNode ( node_u )
>509	ArgumentList	node_u
>510	Argument	node_u
>511	Identifier	node_u
>512	Callee	IsSourceNode
>513	Identifier	IsSourceNode
>514	UnaryOperator	!
>515	ExpressionStatement	 
>516	CallExpression	BOOST_ASSERT ( node_v != SPECIAL_NODEID )
>517	ArgumentList	node_v != SPECIAL_NODEID
>518	Argument	node_v != SPECIAL_NODEID
>519	EqualityExpression	node_v != SPECIAL_NODEID
>520	Identifier	SPECIAL_NODEID
>521	Identifier	node_v
>522	Callee	BOOST_ASSERT
>523	Identifier	BOOST_ASSERT
>524	ExpressionStatement	 
>525	CallExpression	BOOST_ASSERT ( node_u != SPECIAL_NODEID )
>526	ArgumentList	node_u != SPECIAL_NODEID
>527	Argument	node_u != SPECIAL_NODEID
>528	EqualityExpression	node_u != SPECIAL_NODEID
>529	Identifier	SPECIAL_NODEID
>530	Identifier	node_u
>531	Callee	BOOST_ASSERT
>532	Identifier	BOOST_ASSERT
>552	FunctionDef	RestrictionMap 
>553	ParameterList	const NodeID node_u , const NodeID node_v , const NodeID node_w
>554	Parameter	 
>555	Identifier	node_w
>556	ParameterType	const NodeID
>557	Parameter	 
>558	Identifier	node_v
>559	ParameterType	const NodeID
>560	Parameter	 
>561	Identifier	node_u
>562	ParameterType	const NodeID
>563	ReturnType	bool
>564	CompoundStatement	 
>565	ReturnStatement	 
>566	Identifier	false
>567	CompoundStatement	 
>568	IfStatement	if ( node_w != restriction_target . target_node && restriction_target . is_only )
>569	CompoundStatement	 
>570	ReturnStatement	 
>571	Identifier	true
>572	Condition	 
>573	AndExpression	node_w != restriction_target . target_node && restriction_target . is_only
>574	MemberAccess	restriction_target . is_only
>575	Identifier	is_only
>576	Identifier	restriction_target
>577	EqualityExpression	node_w != restriction_target . target_node
>578	MemberAccess	restriction_target . target_node
>579	Identifier	target_node
>580	Identifier	restriction_target
>581	Identifier	node_w
>582	IfStatement	if ( node_w == restriction_target . target_node && ! restriction_target . is_only )
>583	CompoundStatement	 
>584	ReturnStatement	 
>585	Identifier	true
>586	Condition	 
>587	AndExpression	node_w == restriction_target . target_node && ! restriction_target . is_only
>588	UnaryOp	! restriction_target . is_only
>589	MemberAccess	restriction_target . is_only
>590	Identifier	is_only
>591	Identifier	restriction_target
>592	UnaryOperator	!
>593	EqualityExpression	node_w == restriction_target . target_node
>594	MemberAccess	restriction_target . target_node
>595	Identifier	target_node
>596	Identifier	restriction_target
>597	Identifier	node_w
>598	Statement	 
>599	Statement	 
>600	Label	 
>601	Identifier	restriction_target
>602	Statement	 
>603	Statement	 
>604	Statement	 
>605	Statement	 
>606	Statement	 
>607	ExpressionStatement	 
>608	AssignmentExpr	& bucket = m_restriction_bucket_list . at ( index )
>609	CallExpression	m_restriction_bucket_list . at ( index )
>610	ArgumentList	index
>611	Argument	index
>612	Identifier	index
>613	Callee	m_restriction_bucket_list . at
>614	MemberAccess	m_restriction_bucket_list . at
>615	Identifier	at
>616	Identifier	m_restriction_bucket_list
>617	UnaryOp	& bucket
>618	Identifier	bucket
>619	UnaryOperator	&
>620	Statement	 
>621	Statement	 
>622	IdentifierDeclStatement	 
>623	IdentifierDecl	index = restriction_iter -> second
>624	AssignmentExpr	index = restriction_iter -> second
>625	PtrMemberAccess	restriction_iter -> second
>626	Identifier	second
>627	Identifier	restriction_iter
>628	Identifier	index
>629	Identifier	index
>630	IdentifierDeclType	unsigned
>631	Statement	 
>632	IfStatement	if ( restriction_iter == m_restriction_map . end ( ) )
>633	CompoundStatement	 
>634	ReturnStatement	 
>635	Identifier	false
>636	Condition	 
>637	EqualityExpression	restriction_iter == m_restriction_map . end ( )
>638	CallExpression	m_restriction_map . end ( )
>639	ArgumentList	 
>640	Callee	m_restriction_map . end
>641	MemberAccess	m_restriction_map . end
>642	Identifier	end
>643	Identifier	m_restriction_map
>644	Identifier	restriction_iter
>645	ExpressionStatement	 
>646	Statement	 
>647	CompoundStatement	 
>648	Statement	 
>649	Statement	 
>650	Statement	 
>651	Statement	 
>652	Statement	 
>653	Statement	 
>654	Statement	 
>655	Statement	 
>656	Statement	 
>657	Statement	 
>658	Statement	 
>659	IfStatement	if ( ! IsSourceNode ( node_u ) )
>660	CompoundStatement	 
>661	ReturnStatement	 
>662	Identifier	false
>663	Condition	 
>664	UnaryOp	! IsSourceNode ( node_u )
>665	CallExpression	IsSourceNode ( node_u )
>666	ArgumentList	node_u
>667	Argument	node_u
>668	Identifier	node_u
>669	Callee	IsSourceNode
>670	Identifier	IsSourceNode
>671	UnaryOperator	!
>672	ExpressionStatement	 
>673	CallExpression	BOOST_ASSERT ( node_w != SPECIAL_NODEID )
>674	ArgumentList	node_w != SPECIAL_NODEID
>675	Argument	node_w != SPECIAL_NODEID
>676	EqualityExpression	node_w != SPECIAL_NODEID
>677	Identifier	SPECIAL_NODEID
>678	Identifier	node_w
>679	Callee	BOOST_ASSERT
>680	Identifier	BOOST_ASSERT
>681	ExpressionStatement	 
>682	CallExpression	BOOST_ASSERT ( node_v != SPECIAL_NODEID )
>683	ArgumentList	node_v != SPECIAL_NODEID
>684	Argument	node_v != SPECIAL_NODEID
>685	EqualityExpression	node_v != SPECIAL_NODEID
>686	Identifier	SPECIAL_NODEID
>687	Identifier	node_v
>688	Callee	BOOST_ASSERT
>689	Identifier	BOOST_ASSERT
>690	ExpressionStatement	 
>691	CallExpression	BOOST_ASSERT ( node_u != SPECIAL_NODEID )
>692	ArgumentList	node_u != SPECIAL_NODEID
>693	Argument	node_u != SPECIAL_NODEID
>694	EqualityExpression	node_u != SPECIAL_NODEID
>695	Identifier	SPECIAL_NODEID
>696	Identifier	node_u
>697	Callee	BOOST_ASSERT
>698	Identifier	BOOST_ASSERT
>721	FunctionDef	RestrictionMap 
>722	ParameterList	const NodeID node
>723	Parameter	 
>724	Identifier	node
>725	ParameterType	const NodeID
>726	ReturnType	bool
>727	CompoundStatement	 
>728	ReturnStatement	 
>729	Identifier	true
>730	IfStatement	if ( m_restriction_start_nodes . find ( node ) == m_restriction_start_nodes . end ( ) )
>731	CompoundStatement	 
>732	ReturnStatement	 
>733	Identifier	false
>734	Condition	 
>735	EqualityExpression	m_restriction_start_nodes . find ( node ) == m_restriction_start_nodes . end ( )
>736	CallExpression	m_restriction_start_nodes . end ( )
>737	ArgumentList	 
>738	Callee	m_restriction_start_nodes . end
>739	MemberAccess	m_restriction_start_nodes . end
>740	Identifier	end
>741	Identifier	m_restriction_start_nodes
>742	CallExpression	m_restriction_start_nodes . find ( node )
>743	ArgumentList	node
>744	Argument	node
>745	Identifier	node
>746	Callee	m_restriction_start_nodes . find
>747	MemberAccess	m_restriction_start_nodes . find
>748	Identifier	find
>749	Identifier	m_restriction_start_nodes
<3=8,4
<4=5
<5=7,6
<8=214,213,212,211,209,208,207,9
<9=194,181,164,160,159,148,40,36,10
<10=11
<11=25,12
<12=19,13
<13=14
<14=16,15
<16=18,17
<19=20
<20=22,21
<22=24,23
<25=26
<26=28,27
<28=32,29
<29=30
<30=31
<32=33
<33=35,34
<36=37
<37=39,38
<40=139,107,41
<41=42
<42=101,43
<43=85,83,44
<44=45
<45=77,46
<46=61,47
<47=48
<48=50,49
<50=51
<51=53,52
<53=57,54
<54=55
<55=56
<57=58
<58=60,59
<61=62
<62=76,63
<63=65,64
<65=66
<66=68,67
<68=72,69
<69=70
<70=71
<72=73
<73=75,74
<77=78
<78=80,79
<80=82,81
<83=84
<85=86
<86=88,87
<88=90,89
<90=91
<91=93,92
<93=97,94
<94=95
<95=96
<97=98
<98=100,99
<101=102
<102=106,103
<103=105,104
<107=130,119,108
<108=109
<109=115,110
<110=113,111
<111=112
<113=114
<115=116
<116=118,117
<119=120
<120=126,121
<121=122
<122=123
<123=125,124
<126=127
<127=129,128
<130=131
<131=138,132
<132=134,133
<134=135
<135=137,136
<139=140
<140=147,141
<141=143,142
<143=144
<144=146,145
<148=149
<149=158,150
<150=154,151
<151=152
<152=153
<154=155
<155=157,156
<160=161
<161=163,162
<164=165
<165=180,179,166
<166=178,167
<167=173,168
<168=170,169
<170=172,171
<173=175,174
<175=177,176
<181=182
<182=190,183
<183=184
<184=185
<185=187,186
<187=189,188
<190=191
<191=193,192
<194=195
<195=203,196
<196=197
<197=198
<198=200,199
<200=202,201
<203=204
<204=206,205
<209=210
<249=255,254,250
<250=251
<251=253,252
<255=256
<256=257
<257=264,258
<258=260,259
<260=261
<261=263,262
<264=268,265
<265=266
<266=267
<268=269
<269=271,270
<279=291,290,280
<280=287,284,281
<281=283,282
<284=286,285
<287=289,288
<291=395,386,377,365,364,363,362,361,360,359,358,357,353,352,351,292
<292=342,293
<293=341,332,323,314,305,294
<294=295
<295=301,296
<296=299,297
<297=298
<299=300
<301=302
<302=304,303
<305=306
<306=313,312,307
<307=311,308
<308=310,309
<314=315
<315=319,316
<316=317
<317=318
<319=320
<320=322,321
<323=324
<324=328,325
<325=326
<326=327
<328=329
<329=331,330
<332=333
<333=340,339,334
<334=338,335
<335=337,336
<342=343
<343=350,344
<344=346,345
<346=347
<347=349,348
<353=356,355,354
<365=368,366
<366=367
<368=369
<369=376,370
<370=374,371
<371=372
<372=373
<374=375
<377=378
<378=384,379
<379=380
<380=381
<381=383,382
<384=385
<386=387
<387=393,388
<388=389
<389=390
<390=392,391
<393=394
<395=396
<396=402,397
<397=398
<398=399
<399=401,400
<402=403
<420=429,428,421
<421=425,422
<422=424,423
<425=427,426
<429=524,515,502,501,500,499,498,497,496,495,494,490,489,488,432,430
<430=431
<432=479,433
<433=478,469,468,467,454,453,452,451,450,449,447,446,445,434
<434=435
<435=441,436
<436=437
<437=438
<438=440,439
<441=442
<442=444,443
<447=448
<454=455
<455=464,456
<456=460,457
<457=458
<458=459
<460=461
<461=463,462
<464=466,465
<469=470
<470=477,476,471
<471=475,472
<472=474,473
<479=480
<480=487,481
<481=483,482
<483=484
<484=486,485
<490=493,492,491
<502=506,503
<503=504
<504=505
<506=507
<507=514,508
<508=512,509
<509=510
<510=511
<512=513
<515=516
<516=522,517
<517=518
<518=519
<519=521,520
<522=523
<524=525
<525=531,526
<526=527
<527=528
<528=530,529
<531=532
<552=564,563,553
<553=560,557,554
<554=556,555
<557=559,558
<560=562,561
<564=690,681,672,659,658,657,656,655,654,653,652,651,647,646,645,632,631,622,621,620,607,606,605,604,603,602,600,599,598,567,565
<565=566
<567=582,568
<568=572,569
<569=570
<570=571
<572=573
<573=577,574
<574=576,575
<577=581,578
<578=580,579
<582=586,583
<583=584
<584=585
<586=587
<587=593,588
<588=592,589
<589=591,590
<593=597,594
<594=596,595
<600=601
<607=608
<608=617,609
<609=613,610
<610=611
<611=612
<613=614
<614=616,615
<617=619,618
<622=623
<623=630,629,624
<624=628,625
<625=627,626
<632=636,633
<633=634
<634=635
<636=637
<637=644,638
<638=640,639
<640=641
<641=643,642
<647=650,649,648
<659=663,660
<660=661
<661=662
<663=664
<664=671,665
<665=669,666
<666=667
<667=668
<669=670
<672=673
<673=679,674
<674=675
<675=676
<676=678,677
<679=680
<681=682
<682=688,683
<683=684
<684=685
<685=687,686
<688=689
<690=691
<691=697,692
<692=693
<693=694
<694=696,695
<697=698
<721=727,726,722
<722=723
<723=725,724
<727=730,728
<728=729
<730=734,731
<731=732
<732=733
<734=735
<735=742,736
<736=738,737
<738=739
<739=741,740
<742=746,743
<743=744
<744=745
<746=747
<747=749,748
