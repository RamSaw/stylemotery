>3	FunctionDef	AquariaComboBox 
>4	ParameterList	Vector textscale
>5	Parameter	 
>6	Identifier	textscale
>7	ParameterType	Vector
>8	CompoundStatement	 
>9	ExpressionStatement	 
>10	AssignmentExpr	this -> textscale = textscale
>11	Identifier	textscale
>12	PtrMemberAccess	this -> textscale
>13	Identifier	textscale
>14	Identifier	this
>15	ExpressionStatement	 
>16	AssignmentExpr	firstScroll = 0
>17	PrimaryExpression	0
>18	Identifier	firstScroll
>19	ExpressionStatement	 
>20	AssignmentExpr	scrollDelay = 0
>21	PrimaryExpression	0
>22	Identifier	scrollDelay
>23	ExpressionStatement	 
>24	AssignmentExpr	enqueuedSelectItem = - 1
>25	UnaryOp	- 1
>26	PrimaryExpression	1
>27	UnaryOperator	-
>28	Identifier	enqueuedSelectItem
>29	ExpressionStatement	 
>30	AssignmentExpr	scroll = 0
>31	PrimaryExpression	0
>32	Identifier	scroll
>33	ExpressionStatement	 
>34	CallExpression	setSelectedItem ( 0 )
>35	ArgumentList	0
>36	Argument	0
>37	PrimaryExpression	0
>38	Callee	setSelectedItem
>39	Identifier	setSelectedItem
>40	ExpressionStatement	 
>41	AssignmentExpr	isopen = false
>42	Identifier	false
>43	Identifier	isopen
>44	ExpressionStatement	 
>45	AssignmentExpr	mb = false
>46	Identifier	false
>47	Identifier	mb
>48	ExpressionStatement	 
>49	AssignmentExpr	numDrops = 8
>50	PrimaryExpression	8
>51	Identifier	numDrops
>52	ExpressionStatement	 
>53	CallExpression	addChild ( selectedItemLabel , PM_POINTER )
>54	ArgumentList	selectedItemLabel
>55	Argument	PM_POINTER
>56	Identifier	PM_POINTER
>57	Argument	selectedItemLabel
>58	Identifier	selectedItemLabel
>59	Callee	addChild
>60	Identifier	addChild
>61	ExpressionStatement	 
>62	AssignmentExpr	selectedItemLabel -> scale = textscale
>63	Identifier	textscale
>64	PtrMemberAccess	selectedItemLabel -> scale
>65	Identifier	scale
>66	Identifier	selectedItemLabel
>67	ExpressionStatement	 
>68	AssignmentExpr	selectedItemLabel -> position . x = - 50
>69	UnaryOp	- 50
>70	PrimaryExpression	50
>71	UnaryOperator	-
>72	MemberAccess	selectedItemLabel -> position . x
>73	Identifier	x
>74	PtrMemberAccess	selectedItemLabel -> position
>75	Identifier	position
>76	Identifier	selectedItemLabel
>77	ExpressionStatement	 
>78	AssignmentExpr	selectedItemLabel -> offset . y = - 10
>79	UnaryOp	- 10
>80	PrimaryExpression	10
>81	UnaryOperator	-
>82	MemberAccess	selectedItemLabel -> offset . y
>83	Identifier	y
>84	PtrMemberAccess	selectedItemLabel -> offset
>85	Identifier	offset
>86	Identifier	selectedItemLabel
>87	ExpressionStatement	 
>88	CallExpression	selectedItemLabel -> setFontSize ( 8 )
>89	ArgumentList	8
>90	Argument	8
>91	PrimaryExpression	8
>92	Callee	selectedItemLabel -> setFontSize
>93	PtrMemberAccess	selectedItemLabel -> setFontSize
>94	Identifier	setFontSize
>95	Identifier	selectedItemLabel
>96	ExpressionStatement	 
>97	CallExpression	selectedItemLabel -> setAlign ( ALIGN_LEFT )
>98	ArgumentList	ALIGN_LEFT
>99	Argument	ALIGN_LEFT
>100	Identifier	ALIGN_LEFT
>101	Callee	selectedItemLabel -> setAlign
>102	PtrMemberAccess	selectedItemLabel -> setAlign
>103	Identifier	setAlign
>104	Identifier	selectedItemLabel
>105	ExpressionStatement	 
>106	AssignmentExpr	selectedItemLabel = new BitmapText ( & dsq -> smallFont )
>107	UnaryOp	& dsq -> smallFont
>108	PtrMemberAccess	dsq -> smallFont
>109	Identifier	smallFont
>110	Identifier	dsq
>111	UnaryOperator	&
>112	Identifier	selectedItemLabel
>113	ExpressionStatement	 
>114	CallExpression	addChild ( scrollBtnDown , PM_POINTER )
>115	ArgumentList	scrollBtnDown
>116	Argument	PM_POINTER
>117	Identifier	PM_POINTER
>118	Argument	scrollBtnDown
>119	Identifier	scrollBtnDown
>120	Callee	addChild
>121	Identifier	addChild
>122	ExpressionStatement	 
>123	AssignmentExpr	scrollBtnDown -> alpha = 0
>124	PrimaryExpression	0
>125	PtrMemberAccess	scrollBtnDown -> alpha
>126	Identifier	alpha
>127	Identifier	scrollBtnDown
>128	ExpressionStatement	 
>129	AssignmentExpr	scrollBtnDown = new Quad ( \"gui/combo-button-up\" , Vector ( 88 , 0 ) )
>130	Expression	\"gui/combo-button-up\" , Vector ( 88 , 0 )
>131	CallExpression	Vector ( 88 , 0 )
>132	ArgumentList	88
>133	Argument	0
>134	PrimaryExpression	0
>135	Argument	88
>136	PrimaryExpression	88
>137	Callee	Vector
>138	Identifier	Vector
>139	PrimaryExpression	\"gui/combo-button-up\"
>140	Identifier	scrollBtnDown
>141	ExpressionStatement	 
>142	CallExpression	addChild ( scrollBtnUp , PM_POINTER )
>143	ArgumentList	scrollBtnUp
>144	Argument	PM_POINTER
>145	Identifier	PM_POINTER
>146	Argument	scrollBtnUp
>147	Identifier	scrollBtnUp
>148	Callee	addChild
>149	Identifier	addChild
>150	ExpressionStatement	 
>151	CallExpression	scrollBtnUp -> flipVertical ( )
>152	ArgumentList	 
>153	Callee	scrollBtnUp -> flipVertical
>154	PtrMemberAccess	scrollBtnUp -> flipVertical
>155	Identifier	flipVertical
>156	Identifier	scrollBtnUp
>157	ExpressionStatement	 
>158	AssignmentExpr	scrollBtnUp -> alpha = 0
>159	PrimaryExpression	0
>160	PtrMemberAccess	scrollBtnUp -> alpha
>161	Identifier	alpha
>162	Identifier	scrollBtnUp
>163	ExpressionStatement	 
>164	AssignmentExpr	scrollBtnUp = new Quad ( \"gui/combo-button-up\" , Vector ( 70 , 0 ) )
>165	Expression	\"gui/combo-button-up\" , Vector ( 70 , 0 )
>166	CallExpression	Vector ( 70 , 0 )
>167	ArgumentList	70
>168	Argument	0
>169	PrimaryExpression	0
>170	Argument	70
>171	PrimaryExpression	70
>172	Callee	Vector
>173	Identifier	Vector
>174	PrimaryExpression	\"gui/combo-button-up\"
>175	Identifier	scrollBtnUp
>176	ExpressionStatement	 
>177	CallExpression	addChild ( bar , PM_POINTER )
>178	ArgumentList	bar
>179	Argument	PM_POINTER
>180	Identifier	PM_POINTER
>181	Argument	bar
>182	Identifier	bar
>183	Callee	addChild
>184	Identifier	addChild
>185	ExpressionStatement	 
>186	AssignmentExpr	bar = new Quad ( \"gui/combo-drop\" , Vector ( 0 , 0 ) )
>187	Expression	\"gui/combo-drop\" , Vector ( 0 , 0 )
>188	CallExpression	Vector ( 0 , 0 )
>189	ArgumentList	0
>190	Argument	0
>191	PrimaryExpression	0
>192	Argument	0
>193	PrimaryExpression	0
>194	Callee	Vector
>195	Identifier	Vector
>196	PrimaryExpression	\"gui/combo-drop\"
>197	Identifier	bar
>233	FunctionDef	AquariaComboBox 
>234	ParameterList	 
>235	ReturnType	void
>236	CompoundStatement	 
>237	ExpressionStatement	 
>238	CallExpression	RenderObject 
>239	ArgumentList	 
>240	Callee	RenderObject 
>241	Identifier	RenderObject 
>245	FunctionDef	AquariaComboBox 
>246	ParameterList	int index
>247	Parameter	 
>248	Identifier	index
>249	ParameterType	int
>250	ReturnType	void
>251	CompoundStatement	 
>252	ExpressionStatement	 
>253	AssignmentExpr	enqueuedSelectItem = index
>254	Identifier	index
>255	Identifier	enqueuedSelectItem
>261	FunctionDef	AquariaComboBox 
>262	ParameterList	int sc
>263	Parameter	 
>264	Identifier	sc
>265	ParameterType	int
>266	ReturnType	void
>267	CompoundStatement	 
>268	ExpressionStatement	 
>269	AssignmentExpr	scroll = sc
>270	Identifier	sc
>271	Identifier	scroll
>277	FunctionDef	AquariaComboBox 
>278	ParameterList	 
>279	ReturnType	std 
>280	CompoundStatement	 
>281	ReturnStatement	 
>282	PrimaryExpression	\"\"
>283	IfStatement	if ( selectedItem >= 0 && selectedItem < items . size ( ) )
>284	ReturnStatement	 
>285	ArrayIndexing	items [ selectedItem ]
>286	Identifier	selectedItem
>287	Identifier	items
>288	Condition	 
>289	AndExpression	selectedItem >= 0 && selectedItem < items . size ( )
>290	RelationalExpression	selectedItem < items . size ( )
>291	CallExpression	items . size ( )
>292	ArgumentList	 
>293	Callee	items . size
>294	MemberAccess	items . size
>295	Identifier	size
>296	Identifier	items
>297	Identifier	selectedItem
>298	RelationalExpression	selectedItem >= 0
>299	PrimaryExpression	0
>300	Identifier	selectedItem
>309	FunctionDef	AquariaComboBox 
>310	ParameterList	int t
>311	Parameter	 
>312	Identifier	t
>313	ParameterType	int
>314	ReturnType	void
>315	CompoundStatement	 
>316	IfStatement	if ( t == 0 )
>317	ElseStatement	else
>318	CompoundStatement	 
>319	IfStatement	if ( scroll + numDrops > items . size ( ) )
>320	ElseStatement	else
>321	CompoundStatement	 
>322	ExpressionStatement	 
>323	CallExpression	open ( 0 )
>324	ArgumentList	0
>325	Argument	0
>326	PrimaryExpression	0
>327	Callee	open
>328	Identifier	open
>329	ExpressionStatement	 
>330	CallExpression	close ( 0 )
>331	ArgumentList	0
>332	Argument	0
>333	PrimaryExpression	0
>334	Callee	close
>335	Identifier	close
>336	ExpressionStatement	 
>337	AssignmentExpr	scroll = ( items . size ( ) ) - numDrops
>338	AdditiveExpression	( items . size ( ) ) - numDrops
>339	Identifier	numDrops
>340	CallExpression	items . size ( )
>341	ArgumentList	 
>342	Callee	items . size
>343	MemberAccess	items . size
>344	Identifier	size
>345	Identifier	items
>346	Identifier	scroll
>347	Condition	 
>348	RelationalExpression	scroll + numDrops > items . size ( )
>349	CallExpression	items . size ( )
>350	ArgumentList	 
>351	Callee	items . size
>352	MemberAccess	items . size
>353	Identifier	size
>354	Identifier	items
>355	AdditiveExpression	scroll + numDrops
>356	Identifier	numDrops
>357	Identifier	scroll
>358	ExpressionStatement	 
>359	IncDecOp	scroll ++
>360	IncDec	++
>361	Identifier	scroll
>362	CompoundStatement	 
>363	IfStatement	if ( scroll < 0 )
>364	ElseStatement	else
>365	CompoundStatement	 
>366	ExpressionStatement	 
>367	CallExpression	open ( 0 )
>368	ArgumentList	0
>369	Argument	0
>370	PrimaryExpression	0
>371	Callee	open
>372	Identifier	open
>373	ExpressionStatement	 
>374	CallExpression	close ( 0 )
>375	ArgumentList	0
>376	Argument	0
>377	PrimaryExpression	0
>378	Callee	close
>379	Identifier	close
>380	ExpressionStatement	 
>381	AssignmentExpr	scroll = 0
>382	PrimaryExpression	0
>383	Identifier	scroll
>384	Condition	 
>385	RelationalExpression	scroll < 0
>386	PrimaryExpression	0
>387	Identifier	scroll
>388	ExpressionStatement	 
>389	IncDecOp	scroll --
>390	IncDec	--
>391	Identifier	scroll
>392	Condition	 
>393	EqualityExpression	t == 0
>394	PrimaryExpression	0
>395	Identifier	t
>404	FunctionDef	AquariaComboBox 
>405	ParameterList	float dt
>406	Parameter	 
>407	Identifier	dt
>408	ParameterType	float
>409	ReturnType	void
>410	CompoundStatement	 
>411	IfStatement	if ( isopen )
>412	CompoundStatement	 
>413	IfStatement	if ( core -> mouse . scrollWheelChange > 0 )
>414	ElseStatement	else
>415	IfStatement	if ( core -> mouse . scrollWheelChange < 0 )
>416	CompoundStatement	 
>417	ExpressionStatement	 
>418	CallExpression	doScroll ( 1 )
>419	ArgumentList	1
>420	Argument	1
>421	PrimaryExpression	1
>422	Callee	doScroll
>423	Identifier	doScroll
>424	Condition	 
>425	RelationalExpression	core -> mouse . scrollWheelChange < 0
>426	PrimaryExpression	0
>427	MemberAccess	core -> mouse . scrollWheelChange
>428	Identifier	scrollWheelChange
>429	PtrMemberAccess	core -> mouse
>430	Identifier	mouse
>431	Identifier	core
>432	CompoundStatement	 
>433	ExpressionStatement	 
>434	CallExpression	doScroll ( 0 )
>435	ArgumentList	0
>436	Argument	0
>437	PrimaryExpression	0
>438	Callee	doScroll
>439	Identifier	doScroll
>440	Condition	 
>441	RelationalExpression	core -> mouse . scrollWheelChange > 0
>442	PrimaryExpression	0
>443	MemberAccess	core -> mouse . scrollWheelChange
>444	Identifier	scrollWheelChange
>445	PtrMemberAccess	core -> mouse
>446	Identifier	mouse
>447	Identifier	core
>448	Condition	 
>449	Identifier	isopen
>450	IfStatement	if ( bar -> isCoordinateInsideWorld ( core -> mouse . position ) )
>451	ElseStatement	else
>452	CompoundStatement	 
>453	ExpressionStatement	 
>454	AssignmentExpr	mb = false
>455	Identifier	false
>456	Identifier	mb
>457	CompoundStatement	 
>458	IfStatement	if ( ! mb && core -> mouse . buttons . left )
>459	ElseStatement	else
>460	IfStatement	if ( mb && ! core -> mouse . buttons . left )
>461	CompoundStatement	 
>462	IfStatement	if ( isopen )
>463	ElseStatement	else
>464	ExpressionStatement	 
>465	CallExpression	open ( )
>466	ArgumentList	 
>467	Callee	open
>468	Identifier	open
>469	ExpressionStatement	 
>470	CallExpression	close ( )
>471	ArgumentList	 
>472	Callee	close
>473	Identifier	close
>474	Condition	 
>475	Identifier	isopen
>476	ExpressionStatement	 
>477	CallExpression	core -> sound -> playSfx ( \"click\" )
>478	ArgumentList	\"click\"
>479	Argument	\"click\"
>480	PrimaryExpression	\"click\"
>481	Callee	core -> sound -> playSfx
>482	PtrMemberAccess	core -> sound -> playSfx
>483	Identifier	playSfx
>484	PtrMemberAccess	core -> sound
>485	Identifier	sound
>486	Identifier	core
>487	ExpressionStatement	 
>488	AssignmentExpr	mb = false
>489	Identifier	false
>490	Identifier	mb
>491	Condition	 
>492	AndExpression	mb && ! core -> mouse . buttons . left
>493	UnaryOp	! core -> mouse . buttons . left
>494	MemberAccess	core -> mouse . buttons . left
>495	Identifier	left
>496	MemberAccess	core -> mouse . buttons
>497	Identifier	buttons
>498	PtrMemberAccess	core -> mouse
>499	Identifier	mouse
>500	Identifier	core
>501	UnaryOperator	!
>502	Identifier	mb
>503	CompoundStatement	 
>504	ExpressionStatement	 
>505	AssignmentExpr	mb = true
>506	Identifier	true
>507	Identifier	mb
>508	Condition	 
>509	AndExpression	! mb && core -> mouse . buttons . left
>510	MemberAccess	core -> mouse . buttons . left
>511	Identifier	left
>512	MemberAccess	core -> mouse . buttons
>513	Identifier	buttons
>514	PtrMemberAccess	core -> mouse
>515	Identifier	mouse
>516	Identifier	core
>517	UnaryOp	! mb
>518	Identifier	mb
>519	UnaryOperator	!
>520	Condition	 
>521	CallExpression	bar -> isCoordinateInsideWorld ( core -> mouse . position )
>522	ArgumentList	core -> mouse . position
>523	Argument	core -> mouse . position
>524	MemberAccess	core -> mouse . position
>525	Identifier	position
>526	PtrMemberAccess	core -> mouse
>527	Identifier	mouse
>528	Identifier	core
>529	Callee	bar -> isCoordinateInsideWorld
>530	PtrMemberAccess	bar -> isCoordinateInsideWorld
>531	Identifier	isCoordinateInsideWorld
>532	Identifier	bar
>533	IfStatement	if ( isopen )
>534	CompoundStatement	 
>535	IfStatement	if ( core -> mouse . buttons . left && scrollBtnUp -> isCoordinateInsideWorldRect ( core -> mouse . position , 20 , \
>536	ElseStatement	else
>537	CompoundStatement	 
>538	ExpressionStatement	 
>539	CallExpression	scrollBtnUp -> setTexture ( \"gui/combo-button-up\" )
>540	ArgumentList	\"gui/combo-button-up\"
>541	Argument	\"gui/combo-button-up\"
>542	PrimaryExpression	\"gui/combo-button-up\"
>543	Callee	scrollBtnUp -> setTexture
>544	PtrMemberAccess	scrollBtnUp -> setTexture
>545	Identifier	setTexture
>546	Identifier	scrollBtnUp
>547	CompoundStatement	 
>548	ExpressionStatement	 
>549	CallExpression	scrollBtnUp -> setTexture ( \"gui/combo-button-down\" )
>550	ArgumentList	\"gui/combo-button-down\"
>551	Argument	\"gui/combo-button-down\"
>552	PrimaryExpression	\"gui/combo-button-down\"
>553	Callee	scrollBtnUp -> setTexture
>554	PtrMemberAccess	scrollBtnUp -> setTexture
>555	Identifier	setTexture
>556	Identifier	scrollBtnUp
>557	IfStatement	if ( scrollDelay == 0 )
>558	CompoundStatement	 
>559	IfStatement	if ( firstScroll )
>560	ElseStatement	else
>561	CompoundStatement	 
>562	ExpressionStatement	 
>563	AssignmentExpr	scrollDelay = SCROLL_DELAY
>564	Identifier	SCROLL_DELAY
>565	Identifier	scrollDelay
>566	CompoundStatement	 
>567	ExpressionStatement	 
>568	AssignmentExpr	firstScroll = 0
>569	PrimaryExpression	0
>570	Identifier	firstScroll
>571	ExpressionStatement	 
>572	AssignmentExpr	scrollDelay = SCROLL_DELAY_FIRST
>573	Identifier	SCROLL_DELAY_FIRST
>574	Identifier	scrollDelay
>575	Condition	 
>576	Identifier	firstScroll
>577	ExpressionStatement	 
>578	CallExpression	doScroll ( 0 )
>579	ArgumentList	0
>580	Argument	0
>581	PrimaryExpression	0
>582	Callee	doScroll
>583	Identifier	doScroll
>584	Condition	 
>585	EqualityExpression	scrollDelay == 0
>586	PrimaryExpression	0
>587	Identifier	scrollDelay
>588	Condition	 
>589	AndExpression	core -> mouse . buttons . left && scrollBtnUp -> isCoordinateInsideWorldRect ( core -> mouse . position , \
>590	CallExpression	scrollBtnUp -> isCoordinateInsideWorldRect ( core -> mouse . position , 20 , 32 )
>591	ArgumentList	core -> mouse . position
>592	Argument	32
>593	PrimaryExpression	32
>594	Argument	20
>595	PrimaryExpression	20
>596	Argument	core -> mouse . position
>597	MemberAccess	core -> mouse . position
>598	Identifier	position
>599	PtrMemberAccess	core -> mouse
>600	Identifier	mouse
>601	Identifier	core
>602	Callee	scrollBtnUp -> isCoordinateInsideWorldRect
>603	PtrMemberAccess	scrollBtnUp -> isCoordinateInsideWorldRect
>604	Identifier	isCoordinateInsideWorldRect
>605	Identifier	scrollBtnUp
>606	MemberAccess	core -> mouse . buttons . left
>607	Identifier	left
>608	MemberAccess	core -> mouse . buttons
>609	Identifier	buttons
>610	PtrMemberAccess	core -> mouse
>611	Identifier	mouse
>612	Identifier	core
>613	IfStatement	if ( core -> mouse . buttons . left && scrollBtnDown -> isCoordinateInsideWorldRect ( core -> mouse . position , \
>614	ElseStatement	else
>615	CompoundStatement	 
>616	ExpressionStatement	 
>617	CallExpression	scrollBtnDown -> setTexture ( \"gui/combo-button-up\" )
>618	ArgumentList	\"gui/combo-button-up\"
>619	Argument	\"gui/combo-button-up\"
>620	PrimaryExpression	\"gui/combo-button-up\"
>621	Callee	scrollBtnDown -> setTexture
>622	PtrMemberAccess	scrollBtnDown -> setTexture
>623	Identifier	setTexture
>624	Identifier	scrollBtnDown
>625	CompoundStatement	 
>626	ExpressionStatement	 
>627	CallExpression	scrollBtnDown -> setTexture ( \"gui/combo-button-down\" )
>628	ArgumentList	\"gui/combo-button-down\"
>629	Argument	\"gui/combo-button-down\"
>630	PrimaryExpression	\"gui/combo-button-down\"
>631	Callee	scrollBtnDown -> setTexture
>632	PtrMemberAccess	scrollBtnDown -> setTexture
>633	Identifier	setTexture
>634	Identifier	scrollBtnDown
>635	IfStatement	if ( scrollDelay == 0 )
>636	CompoundStatement	 
>637	IfStatement	if ( firstScroll )
>638	ElseStatement	else
>639	CompoundStatement	 
>640	ExpressionStatement	 
>641	AssignmentExpr	scrollDelay = SCROLL_DELAY
>642	Identifier	SCROLL_DELAY
>643	Identifier	scrollDelay
>644	CompoundStatement	 
>645	ExpressionStatement	 
>646	AssignmentExpr	firstScroll = 0
>647	PrimaryExpression	0
>648	Identifier	firstScroll
>649	ExpressionStatement	 
>650	AssignmentExpr	scrollDelay = SCROLL_DELAY_FIRST
>651	Identifier	SCROLL_DELAY_FIRST
>652	Identifier	scrollDelay
>653	Condition	 
>654	Identifier	firstScroll
>655	ExpressionStatement	 
>656	CallExpression	doScroll ( 1 )
>657	ArgumentList	1
>658	Argument	1
>659	PrimaryExpression	1
>660	Callee	doScroll
>661	Identifier	doScroll
>662	Condition	 
>663	EqualityExpression	scrollDelay == 0
>664	PrimaryExpression	0
>665	Identifier	scrollDelay
>666	Condition	 
>667	AndExpression	core -> mouse . buttons . left && scrollBtnDown -> isCoordinateInsideWorldRect ( core -> mouse . position , \
>668	CallExpression	scrollBtnDown -> isCoordinateInsideWorldRect ( core -> mouse . position , 20 , 32 )
>669	ArgumentList	core -> mouse . position
>670	Argument	32
>671	PrimaryExpression	32
>672	Argument	20
>673	PrimaryExpression	20
>674	Argument	core -> mouse . position
>675	MemberAccess	core -> mouse . position
>676	Identifier	position
>677	PtrMemberAccess	core -> mouse
>678	Identifier	mouse
>679	Identifier	core
>680	Callee	scrollBtnDown -> isCoordinateInsideWorldRect
>681	PtrMemberAccess	scrollBtnDown -> isCoordinateInsideWorldRect
>682	Identifier	isCoordinateInsideWorldRect
>683	Identifier	scrollBtnDown
>684	MemberAccess	core -> mouse . buttons . left
>685	Identifier	left
>686	MemberAccess	core -> mouse . buttons
>687	Identifier	buttons
>688	PtrMemberAccess	core -> mouse
>689	Identifier	mouse
>690	Identifier	core
>691	IfStatement	if ( ! core -> mouse . buttons . left )
>692	CompoundStatement	 
>693	ExpressionStatement	 
>694	AssignmentExpr	scrollDelay = 0
>695	PrimaryExpression	0
>696	Identifier	scrollDelay
>697	ExpressionStatement	 
>698	AssignmentExpr	firstScroll = 1
>699	PrimaryExpression	1
>700	Identifier	firstScroll
>701	Condition	 
>702	UnaryOp	! core -> mouse . buttons . left
>703	MemberAccess	core -> mouse . buttons . left
>704	Identifier	left
>705	MemberAccess	core -> mouse . buttons
>706	Identifier	buttons
>707	PtrMemberAccess	core -> mouse
>708	Identifier	mouse
>709	Identifier	core
>710	UnaryOperator	!
>711	Condition	 
>712	Identifier	isopen
>713	IfStatement	if ( scrollDelay < 0 )
>714	ExpressionStatement	 
>715	AssignmentExpr	scrollDelay = 0
>716	PrimaryExpression	0
>717	Identifier	scrollDelay
>718	Condition	 
>719	RelationalExpression	scrollDelay < 0
>720	PrimaryExpression	0
>721	Identifier	scrollDelay
>722	ExpressionStatement	 
>723	AssignmentExpr	scrollDelay -= dt
>724	Identifier	dt
>725	Identifier	scrollDelay
>726	IfStatement	if ( enqueuedSelectItem != - 1 )
>727	CompoundStatement	 
>728	ExpressionStatement	 
>729	AssignmentExpr	enqueuedSelectItem = - 1
>730	UnaryOp	- 1
>731	PrimaryExpression	1
>732	UnaryOperator	-
>733	Identifier	enqueuedSelectItem
>734	ExpressionStatement	 
>735	CallExpression	setSelectedItem ( enqueuedSelectItem )
>736	ArgumentList	enqueuedSelectItem
>737	Argument	enqueuedSelectItem
>738	Identifier	enqueuedSelectItem
>739	Callee	setSelectedItem
>740	Identifier	setSelectedItem
>741	Condition	 
>742	EqualityExpression	enqueuedSelectItem != - 1
>743	UnaryOp	- 1
>744	PrimaryExpression	1
>745	UnaryOperator	-
>746	Identifier	enqueuedSelectItem
>747	IfStatement	if ( alpha . x < 1 )
>748	ReturnStatement	 
>749	Condition	 
>750	RelationalExpression	alpha . x < 1
>751	PrimaryExpression	1
>752	MemberAccess	alpha . x
>753	Identifier	x
>754	Identifier	alpha
>755	ExpressionStatement	 
>756	CallExpression	RenderObject 
>757	ArgumentList	dt
>758	Argument	dt
>759	Identifier	dt
>760	Callee	RenderObject 
>761	Identifier	RenderObject 
>794	FunctionDef	AquariaComboBox 
>795	ParameterList	float t
>796	Parameter	 
>797	Identifier	t
>798	ParameterType	float
>799	ReturnType	void
>800	CompoundStatement	 
>801	ExpressionStatement	 
>802	AssignmentExpr	isopen = true
>803	Identifier	true
>804	Identifier	isopen
>805	ExpressionStatement	 
>806	CallExpression	scrollBtnUp -> alpha . interpolateTo ( 1 , t )
>807	ArgumentList	1
>808	Argument	t
>809	Identifier	t
>810	Argument	1
>811	PrimaryExpression	1
>812	Callee	scrollBtnUp -> alpha . interpolateTo
>813	MemberAccess	scrollBtnUp -> alpha . interpolateTo
>814	Identifier	interpolateTo
>815	PtrMemberAccess	scrollBtnUp -> alpha
>816	Identifier	alpha
>817	Identifier	scrollBtnUp
>818	ExpressionStatement	 
>819	CallExpression	scrollBtnDown -> alpha . interpolateTo ( 1 , t )
>820	ArgumentList	1
>821	Argument	t
>822	Identifier	t
>823	Argument	1
>824	PrimaryExpression	1
>825	Callee	scrollBtnDown -> alpha . interpolateTo
>826	MemberAccess	scrollBtnDown -> alpha . interpolateTo
>827	Identifier	interpolateTo
>828	PtrMemberAccess	scrollBtnDown -> alpha
>829	Identifier	alpha
>830	Identifier	scrollBtnDown
>831	ForStatement	for ( int i = scroll ; i < scroll + numDrops ; i ++ )
>832	CompoundStatement	 
>833	IfStatement	if ( i < items . size ( ) )
>834	CompoundStatement	 
>835	ExpressionStatement	 
>836	CallExpression	shownItems . push_back ( a )
>837	ArgumentList	a
>838	Argument	a
>839	Identifier	a
>840	Callee	shownItems . push_back
>841	MemberAccess	shownItems . push_back
>842	Identifier	push_back
>843	Identifier	shownItems
>844	ExpressionStatement	 
>845	CallExpression	addChild ( a , PM_POINTER )
>846	ArgumentList	a
>847	Argument	PM_POINTER
>848	Identifier	PM_POINTER
>849	Argument	a
>850	Identifier	a
>851	Callee	addChild
>852	Identifier	addChild
>853	ExpressionStatement	 
>854	AssignmentExpr	a -> position . y = ( a -> getHeight ( ) + 2 ) * ( ( i - scroll ) + 1 )
>855	MultiplicativeExpression	( a -> getHeight ( ) + 2 ) * ( ( i - scroll ) + 1 )
>856	AdditiveExpression	( i - scroll ) + 1
>857	PrimaryExpression	1
>858	AdditiveExpression	i - scroll
>859	Identifier	scroll
>860	Identifier	i
>861	AdditiveExpression	a -> getHeight ( ) + 2
>862	PrimaryExpression	2
>863	CallExpression	a -> getHeight ( )
>864	ArgumentList	 
>865	Callee	a -> getHeight
>866	PtrMemberAccess	a -> getHeight
>867	Identifier	getHeight
>868	Identifier	a
>869	MemberAccess	a -> position . y
>870	Identifier	y
>871	PtrMemberAccess	a -> position
>872	Identifier	position
>873	Identifier	a
>874	ExpressionStatement	 
>875	CallExpression	a -> alpha . interpolateTo ( 1 , t )
>876	ArgumentList	1
>877	Argument	t
>878	Identifier	t
>879	Argument	1
>880	PrimaryExpression	1
>881	Callee	a -> alpha . interpolateTo
>882	MemberAccess	a -> alpha . interpolateTo
>883	Identifier	interpolateTo
>884	PtrMemberAccess	a -> alpha
>885	Identifier	alpha
>886	Identifier	a
>887	ExpressionStatement	 
>888	AssignmentExpr	a -> alpha = 0
>889	PrimaryExpression	0
>890	PtrMemberAccess	a -> alpha
>891	Identifier	alpha
>892	Identifier	a
>893	IdentifierDeclStatement	 
>894	IdentifierDecl	* a = new AquariaComboBoxItem ( items [ i ] , i , this , textscale )
>895	AssignmentExpr	* a = new AquariaComboBoxItem ( items [ i ] , i , this , textscale )
>896	Expression	items [ i ] , i , this , textscale
>897	Expression	i , this , textscale
>898	Expression	this , textscale
>899	Identifier	textscale
>900	Identifier	this
>901	Identifier	i
>902	ArrayIndexing	items [ i ]
>903	Identifier	i
>904	Identifier	items
>905	Identifier	a
>906	Identifier	a
>907	IdentifierDeclType	AquariaComboBoxItem *
>908	Condition	 
>909	RelationalExpression	i < items . size ( )
>910	CallExpression	items . size ( )
>911	ArgumentList	 
>912	Callee	items . size
>913	MemberAccess	items . size
>914	Identifier	size
>915	Identifier	items
>916	Identifier	i
>917	IncDecOp	 
>918	IncDec	++
>919	Identifier	i
>920	Condition	 
>921	RelationalExpression	i < scroll + numDrops
>922	AdditiveExpression	scroll + numDrops
>923	Identifier	numDrops
>924	Identifier	scroll
>925	Identifier	i
>926	ForInit	 
>927	IdentifierDeclStatement	int i = scroll ;
>928	IdentifierDecl	i = scroll
>929	AssignmentExpr	i = scroll
>930	Identifier	scroll
>931	Identifier	scroll
>932	Identifier	i
>933	IdentifierDeclType	int
>934	ExpressionStatement	 
>935	CallExpression	shownItems . clear ( )
>936	ArgumentList	 
>937	Callee	shownItems . clear
>938	MemberAccess	shownItems . clear
>939	Identifier	clear
>940	Identifier	shownItems
>970	FunctionDef	AquariaComboBox 
>971	ParameterList	float t
>972	Parameter	 
>973	Identifier	t
>974	ParameterType	float
>975	ReturnType	void
>976	CompoundStatement	 
>977	ExpressionStatement	 
>978	CallExpression	shownItems . clear ( )
>979	ArgumentList	 
>980	Callee	shownItems . clear
>981	MemberAccess	shownItems . clear
>982	Identifier	clear
>983	Identifier	shownItems
>984	ExpressionStatement	 
>985	CallExpression	scrollBtnUp -> alpha . interpolateTo ( 0 , t )
>986	ArgumentList	0
>987	Argument	t
>988	Identifier	t
>989	Argument	0
>990	PrimaryExpression	0
>991	Callee	scrollBtnUp -> alpha . interpolateTo
>992	MemberAccess	scrollBtnUp -> alpha . interpolateTo
>993	Identifier	interpolateTo
>994	PtrMemberAccess	scrollBtnUp -> alpha
>995	Identifier	alpha
>996	Identifier	scrollBtnUp
>997	ExpressionStatement	 
>998	CallExpression	scrollBtnDown -> alpha . interpolateTo ( 0 , t )
>999	ArgumentList	0
>1000	Argument	t
>1001	Identifier	t
>1002	Argument	0
>1003	PrimaryExpression	0
>1004	Callee	scrollBtnDown -> alpha . interpolateTo
>1005	MemberAccess	scrollBtnDown -> alpha . interpolateTo
>1006	Identifier	interpolateTo
>1007	PtrMemberAccess	scrollBtnDown -> alpha
>1008	Identifier	alpha
>1009	Identifier	scrollBtnDown
>1010	ForStatement	for ( int i = 0 ; i < shownItems . size ( ) ; i ++ )
>1011	CompoundStatement	 
>1012	ExpressionStatement	 
>1013	ArrayIndexing	shownItems [ i ]
>1014	Identifier	i
>1015	Identifier	shownItems
>1016	Statement	 
>1017	ExpressionStatement	 
>1018	CallExpression	shownItems [ i ] -> destroy ( )
>1019	ArgumentList	 
>1020	Callee	shownItems [ i ] -> destroy
>1021	PtrMemberAccess	shownItems [ i ] -> destroy
>1022	Identifier	destroy
>1023	ArrayIndexing	shownItems [ i ]
>1024	Identifier	i
>1025	Identifier	shownItems
>1026	ExpressionStatement	 
>1027	CallExpression	removeChild ( shownItems [ i ] )
>1028	ArgumentList	shownItems [ i ]
>1029	Argument	shownItems [ i ]
>1030	ArrayIndexing	shownItems [ i ]
>1031	Identifier	i
>1032	Identifier	shownItems
>1033	Callee	removeChild
>1034	Identifier	removeChild
>1035	IncDecOp	 
>1036	IncDec	++
>1037	Identifier	i
>1038	Condition	 
>1039	RelationalExpression	i < shownItems . size ( )
>1040	CallExpression	shownItems . size ( )
>1041	ArgumentList	 
>1042	Callee	shownItems . size
>1043	MemberAccess	shownItems . size
>1044	Identifier	size
>1045	Identifier	shownItems
>1046	Identifier	i
>1047	ForInit	 
>1048	IdentifierDeclStatement	int i = 0 ;
>1049	IdentifierDecl	i = 0
>1050	AssignmentExpr	i = 0
>1051	PrimaryExpression	0
>1052	Identifier	i
>1053	Identifier	i
>1054	IdentifierDeclType	int
>1055	IfStatement	if ( t > 0 )
>1056	ExpressionStatement	 
>1057	CallExpression	dsq -> main ( t )
>1058	ArgumentList	t
>1059	Argument	t
>1060	Identifier	t
>1061	Callee	dsq -> main
>1062	PtrMemberAccess	dsq -> main
>1063	Identifier	main
>1064	Identifier	dsq
>1065	Condition	 
>1066	RelationalExpression	t > 0
>1067	PrimaryExpression	0
>1068	Identifier	t
>1069	ForStatement	for ( int i = 0 ; i < shownItems . size ( ) ; i ++ )
>1070	CompoundStatement	 
>1071	ExpressionStatement	 
>1072	CallExpression	shownItems [ i ] -> alpha . interpolateTo ( 0 , t )
>1073	ArgumentList	0
>1074	Argument	t
>1075	Identifier	t
>1076	Argument	0
>1077	PrimaryExpression	0
>1078	Callee	shownItems [ i ] -> alpha . interpolateTo
>1079	MemberAccess	shownItems [ i ] -> alpha . interpolateTo
>1080	Identifier	interpolateTo
>1081	PtrMemberAccess	shownItems [ i ] -> alpha
>1082	Identifier	alpha
>1083	ArrayIndexing	shownItems [ i ]
>1084	Identifier	i
>1085	Identifier	shownItems
>1086	IncDecOp	 
>1087	IncDec	++
>1088	Identifier	i
>1089	Condition	 
>1090	RelationalExpression	i < shownItems . size ( )
>1091	CallExpression	shownItems . size ( )
>1092	ArgumentList	 
>1093	Callee	shownItems . size
>1094	MemberAccess	shownItems . size
>1095	Identifier	size
>1096	Identifier	shownItems
>1097	Identifier	i
>1098	ForInit	 
>1099	IdentifierDeclStatement	int i = 0 ;
>1100	IdentifierDecl	i = 0
>1101	AssignmentExpr	i = 0
>1102	PrimaryExpression	0
>1103	Identifier	i
>1104	Identifier	i
>1105	IdentifierDeclType	int
>1106	ExpressionStatement	 
>1107	AssignmentExpr	isopen = false
>1108	Identifier	false
>1109	Identifier	isopen
>1110	IfStatement	if ( ! isopen )
>1111	ReturnStatement	 
>1112	Condition	 
>1113	UnaryOp	! isopen
>1114	Identifier	isopen
>1115	UnaryOperator	!
>1137	FunctionDef	AquariaComboBox 
>1138	ParameterList	const std 
>1139	Parameter	 
>1140	Identifier	item
>1141	ParameterType	const std 
>1142	ReturnType	bool
>1143	CompoundStatement	 
>1144	ReturnStatement	 
>1145	Identifier	false
>1146	ForStatement	for ( int i = 0 ; i < items . size ( ) ; i ++ )
>1147	CompoundStatement	 
>1148	IfStatement	if ( items [ i ] == item )
>1149	CompoundStatement	 
>1150	ReturnStatement	 
>1151	Identifier	true
>1152	ExpressionStatement	 
>1153	CallExpression	setSelectedItem ( i )
>1154	ArgumentList	i
>1155	Argument	i
>1156	Identifier	i
>1157	Callee	setSelectedItem
>1158	Identifier	setSelectedItem
>1159	Condition	 
>1160	EqualityExpression	items [ i ] == item
>1161	Identifier	item
>1162	ArrayIndexing	items [ i ]
>1163	Identifier	i
>1164	Identifier	items
>1165	IncDecOp	 
>1166	IncDec	++
>1167	Identifier	i
>1168	Condition	 
>1169	RelationalExpression	i < items . size ( )
>1170	CallExpression	items . size ( )
>1171	ArgumentList	 
>1172	Callee	items . size
>1173	MemberAccess	items . size
>1174	Identifier	size
>1175	Identifier	items
>1176	Identifier	i
>1177	ForInit	 
>1178	IdentifierDeclStatement	int i = 0 ;
>1179	IdentifierDecl	i = 0
>1180	AssignmentExpr	i = 0
>1181	PrimaryExpression	0
>1182	Identifier	i
>1183	Identifier	i
>1184	IdentifierDeclType	int
>1196	FunctionDef	AquariaComboBox 
>1197	ParameterList	int index
>1198	Parameter	 
>1199	Identifier	index
>1200	ParameterType	int
>1201	ReturnType	void
>1202	CompoundStatement	 
>1203	IfStatement	if ( index == AQUARIACOMBOBOXITEM_UP )
>1204	ElseStatement	else
>1205	IfStatement	if ( index == AQUARIACOMBOBOXITEM_DOWN )
>1206	ElseStatement	else
>1207	CompoundStatement	 
>1208	IfStatement	if ( index >= 0 && index < items . size ( ) )
>1209	CompoundStatement	 
>1210	IfStatement	if ( scroll + numDrops > items . size ( ) )
>1211	CompoundStatement	 
>1212	IfStatement	if ( items . size ( ) < numDrops )
>1213	ElseStatement	else
>1214	ExpressionStatement	 
>1215	AssignmentExpr	scroll = items . size ( ) - numDrops
>1216	AdditiveExpression	items . size ( ) - numDrops
>1217	Identifier	numDrops
>1218	CallExpression	items . size ( )
>1219	ArgumentList	 
>1220	Callee	items . size
>1221	MemberAccess	items . size
>1222	Identifier	size
>1223	Identifier	items
>1224	Identifier	scroll
>1225	ExpressionStatement	 
>1226	AssignmentExpr	scroll = 0
>1227	PrimaryExpression	0
>1228	Identifier	scroll
>1229	Condition	 
>1230	RelationalExpression	items . size ( ) < numDrops
>1231	Identifier	numDrops
>1232	CallExpression	items . size ( )
>1233	ArgumentList	 
>1234	Callee	items . size
>1235	MemberAccess	items . size
>1236	Identifier	size
>1237	Identifier	items
>1238	Condition	 
>1239	RelationalExpression	scroll + numDrops > items . size ( )
>1240	CallExpression	items . size ( )
>1241	ArgumentList	 
>1242	Callee	items . size
>1243	MemberAccess	items . size
>1244	Identifier	size
>1245	Identifier	items
>1246	AdditiveExpression	scroll + numDrops
>1247	Identifier	numDrops
>1248	Identifier	scroll
>1249	ExpressionStatement	 
>1250	AssignmentExpr	scroll = index
>1251	Identifier	index
>1252	Identifier	scroll
>1253	ExpressionStatement	 
>1254	CallExpression	selectedItemLabel -> setText ( items [ index ] )
>1255	ArgumentList	items [ index ]
>1256	Argument	items [ index ]
>1257	ArrayIndexing	items [ index ]
>1258	Identifier	index
>1259	Identifier	items
>1260	Callee	selectedItemLabel -> setText
>1261	PtrMemberAccess	selectedItemLabel -> setText
>1262	Identifier	setText
>1263	Identifier	selectedItemLabel
>1264	ExpressionStatement	 
>1265	AssignmentExpr	selectedItem = index
>1266	Identifier	index
>1267	Identifier	selectedItem
>1268	Condition	 
>1269	AndExpression	index >= 0 && index < items . size ( )
>1270	RelationalExpression	index < items . size ( )
>1271	CallExpression	items . size ( )
>1272	ArgumentList	 
>1273	Callee	items . size
>1274	MemberAccess	items . size
>1275	Identifier	size
>1276	Identifier	items
>1277	Identifier	index
>1278	RelationalExpression	index >= 0
>1279	PrimaryExpression	0
>1280	Identifier	index
>1281	CompoundStatement	 
>1282	ExpressionStatement	 
>1283	CallExpression	doScroll ( 0 )
>1284	ArgumentList	0
>1285	Argument	0
>1286	PrimaryExpression	0
>1287	Callee	doScroll
>1288	Identifier	doScroll
>1289	Condition	 
>1290	EqualityExpression	index == AQUARIACOMBOBOXITEM_DOWN
>1291	Identifier	AQUARIACOMBOBOXITEM_DOWN
>1292	Identifier	index
>1293	CompoundStatement	 
>1294	ExpressionStatement	 
>1295	CallExpression	doScroll ( 1 )
>1296	ArgumentList	1
>1297	Argument	1
>1298	PrimaryExpression	1
>1299	Callee	doScroll
>1300	Identifier	doScroll
>1301	Condition	 
>1302	EqualityExpression	index == AQUARIACOMBOBOXITEM_UP
>1303	Identifier	AQUARIACOMBOBOXITEM_UP
>1304	Identifier	index
>1305	IfStatement	if ( isopen )
>1306	ExpressionStatement	 
>1307	CallExpression	close ( )
>1308	ArgumentList	 
>1309	Callee	close
>1310	Identifier	close
>1311	Condition	 
>1312	Identifier	isopen
>1328	FunctionDef	AquariaComboBox 
>1329	ParameterList	 
>1330	ReturnType	int
>1331	CompoundStatement	 
>1332	ReturnStatement	 
>1333	Identifier	selectedItem
>1338	FunctionDef	AquariaComboBox 
>1339	ParameterList	const std 
>1340	Parameter	 
>1341	Identifier	n
>1342	ParameterType	const std 
>1343	ReturnType	int
>1344	CompoundStatement	 
>1345	ReturnStatement	 
>1346	AdditiveExpression	items . size ( ) - 1
>1347	PrimaryExpression	1
>1348	CallExpression	items . size ( )
>1349	ArgumentList	 
>1350	Callee	items . size
>1351	MemberAccess	items . size
>1352	Identifier	size
>1353	Identifier	items
>1354	IfStatement	if ( items . size ( ) == 1 )
>1355	CompoundStatement	 
>1356	ExpressionStatement	 
>1357	CallExpression	setSelectedItem ( 0 )
>1358	ArgumentList	0
>1359	Argument	0
>1360	PrimaryExpression	0
>1361	Callee	setSelectedItem
>1362	Identifier	setSelectedItem
>1363	Condition	 
>1364	EqualityExpression	items . size ( ) == 1
>1365	PrimaryExpression	1
>1366	CallExpression	items . size ( )
>1367	ArgumentList	 
>1368	Callee	items . size
>1369	MemberAccess	items . size
>1370	Identifier	size
>1371	Identifier	items
>1372	ExpressionStatement	 
>1373	CallExpression	items . push_back ( n )
>1374	ArgumentList	n
>1375	Argument	n
>1376	Identifier	n
>1377	Callee	items . push_back
>1378	MemberAccess	items . push_back
>1379	Identifier	push_back
>1380	Identifier	items
>1391	FunctionDef	AquariaComboBoxItem 
>1392	ParameterList	const std 
>1393	Parameter	 
>1394	Identifier	textscale
>1395	ParameterType	Vector
>1396	Parameter	 
>1397	Identifier	combo
>1398	ParameterType	AquariaComboBox *
>1399	Parameter	 
>1400	Identifier	idx
>1401	ParameterType	int
>1402	Parameter	 
>1403	Identifier	str
>1404	ParameterType	const std 
>1405	CompoundStatement	 
>1406	ExpressionStatement	 
>1407	AssignmentExpr	mb = false
>1408	Identifier	false
>1409	Identifier	mb
>1410	ExpressionStatement	 
>1411	AssignmentExpr	shareAlphaWithChildren = 1
>1412	PrimaryExpression	1
>1413	Identifier	shareAlphaWithChildren
>1414	ExpressionStatement	 
>1415	AssignmentExpr	label -> color = unselectedColor
>1416	Identifier	unselectedColor
>1417	PtrMemberAccess	label -> color
>1418	Identifier	color
>1419	Identifier	label
>1420	ExpressionStatement	 
>1421	AssignmentExpr	color = unselectedColor
>1422	Identifier	unselectedColor
>1423	Identifier	color
>1424	ExpressionStatement	 
>1425	CallExpression	addChild ( label , PM_POINTER )
>1426	ArgumentList	label
>1427	Argument	PM_POINTER
>1428	Identifier	PM_POINTER
>1429	Argument	label
>1430	Identifier	label
>1431	Callee	addChild
>1432	Identifier	addChild
>1433	ExpressionStatement	 
>1434	AssignmentExpr	label -> scale = textscale
>1435	Identifier	textscale
>1436	PtrMemberAccess	label -> scale
>1437	Identifier	scale
>1438	Identifier	label
>1439	ExpressionStatement	 
>1440	AssignmentExpr	label -> position . x = - 50
>1441	UnaryOp	- 50
>1442	PrimaryExpression	50
>1443	UnaryOperator	-
>1444	MemberAccess	label -> position . x
>1445	Identifier	x
>1446	PtrMemberAccess	label -> position
>1447	Identifier	position
>1448	Identifier	label
>1449	ExpressionStatement	 
>1450	AssignmentExpr	label -> offset . y = - 10
>1451	UnaryOp	- 10
>1452	PrimaryExpression	10
>1453	UnaryOperator	-
>1454	MemberAccess	label -> offset . y
>1455	Identifier	y
>1456	PtrMemberAccess	label -> offset
>1457	Identifier	offset
>1458	Identifier	label
>1459	ExpressionStatement	 
>1460	CallExpression	label -> setText ( str )
>1461	ArgumentList	str
>1462	Argument	str
>1463	Identifier	str
>1464	Callee	label -> setText
>1465	PtrMemberAccess	label -> setText
>1466	Identifier	setText
>1467	Identifier	label
>1468	ExpressionStatement	 
>1469	CallExpression	label -> setFontSize ( 8 )
>1470	ArgumentList	8
>1471	Argument	8
>1472	PrimaryExpression	8
>1473	Callee	label -> setFontSize
>1474	PtrMemberAccess	label -> setFontSize
>1475	Identifier	setFontSize
>1476	Identifier	label
>1477	ExpressionStatement	 
>1478	CallExpression	label -> setAlign ( ALIGN_LEFT )
>1479	ArgumentList	ALIGN_LEFT
>1480	Argument	ALIGN_LEFT
>1481	Identifier	ALIGN_LEFT
>1482	Callee	label -> setAlign
>1483	PtrMemberAccess	label -> setAlign
>1484	Identifier	setAlign
>1485	Identifier	label
>1486	ExpressionStatement	 
>1487	AssignmentExpr	label = new BitmapText ( & dsq -> smallFont )
>1488	UnaryOp	& dsq -> smallFont
>1489	PtrMemberAccess	dsq -> smallFont
>1490	Identifier	smallFont
>1491	Identifier	dsq
>1492	UnaryOperator	&
>1493	Identifier	label
>1494	ExpressionStatement	 
>1495	CallExpression	setTexture ( \"gui/combo-drop\" )
>1496	ArgumentList	\"gui/combo-drop\"
>1497	Argument	\"gui/combo-drop\"
>1498	PrimaryExpression	\"gui/combo-drop\"
>1499	Callee	setTexture
>1500	Identifier	setTexture
>1501	ExpressionStatement	 
>1502	AssignmentExpr	index = idx
>1503	Identifier	idx
>1504	Identifier	index
>1505	ExpressionStatement	 
>1506	AssignmentExpr	this -> combo = combo
>1507	Identifier	combo
>1508	PtrMemberAccess	this -> combo
>1509	Identifier	combo
>1510	Identifier	this
>1540	FunctionDef	AquariaComboBoxItem 
>1541	ParameterList	float dt
>1542	Parameter	 
>1543	Identifier	dt
>1544	ParameterType	float
>1545	ReturnType	void
>1546	CompoundStatement	 
>1547	IfStatement	if ( this -> isCoordinateInsideWorld ( core -> mouse . position ) )
>1548	ElseStatement	else
>1549	CompoundStatement	 
>1550	ExpressionStatement	 
>1551	AssignmentExpr	mb = false
>1552	Identifier	false
>1553	Identifier	mb
>1554	ExpressionStatement	 
>1555	AssignmentExpr	label -> color = unselectedColor
>1556	Identifier	unselectedColor
>1557	PtrMemberAccess	label -> color
>1558	Identifier	color
>1559	Identifier	label
>1560	ExpressionStatement	 
>1561	AssignmentExpr	color = unselectedColor
>1562	Identifier	unselectedColor
>1563	Identifier	color
>1564	CompoundStatement	 
>1565	IfStatement	if ( ! mb && core -> mouse . buttons . left )
>1566	ElseStatement	else
>1567	IfStatement	if ( mb && ! core -> mouse . buttons . left )
>1568	CompoundStatement	 
>1569	IfStatement	if ( combo )
>1570	ExpressionStatement	 
>1571	CallExpression	combo -> enqueueSelectItem ( index )
>1572	ArgumentList	index
>1573	Argument	index
>1574	Identifier	index
>1575	Callee	combo -> enqueueSelectItem
>1576	PtrMemberAccess	combo -> enqueueSelectItem
>1577	Identifier	enqueueSelectItem
>1578	Identifier	combo
>1579	Condition	 
>1580	Identifier	combo
>1581	ExpressionStatement	 
>1582	CallExpression	core -> sound -> playSfx ( \"click\" )
>1583	ArgumentList	\"click\"
>1584	Argument	\"click\"
>1585	PrimaryExpression	\"click\"
>1586	Callee	core -> sound -> playSfx
>1587	PtrMemberAccess	core -> sound -> playSfx
>1588	Identifier	playSfx
>1589	PtrMemberAccess	core -> sound
>1590	Identifier	sound
>1591	Identifier	core
>1592	ExpressionStatement	 
>1593	AssignmentExpr	mb = false
>1594	Identifier	false
>1595	Identifier	mb
>1596	Condition	 
>1597	AndExpression	mb && ! core -> mouse . buttons . left
>1598	UnaryOp	! core -> mouse . buttons . left
>1599	MemberAccess	core -> mouse . buttons . left
>1600	Identifier	left
>1601	MemberAccess	core -> mouse . buttons
>1602	Identifier	buttons
>1603	PtrMemberAccess	core -> mouse
>1604	Identifier	mouse
>1605	Identifier	core
>1606	UnaryOperator	!
>1607	Identifier	mb
>1608	CompoundStatement	 
>1609	ExpressionStatement	 
>1610	AssignmentExpr	mb = true
>1611	Identifier	true
>1612	Identifier	mb
>1613	Condition	 
>1614	AndExpression	! mb && core -> mouse . buttons . left
>1615	MemberAccess	core -> mouse . buttons . left
>1616	Identifier	left
>1617	MemberAccess	core -> mouse . buttons
>1618	Identifier	buttons
>1619	PtrMemberAccess	core -> mouse
>1620	Identifier	mouse
>1621	Identifier	core
>1622	UnaryOp	! mb
>1623	Identifier	mb
>1624	UnaryOperator	!
>1625	ExpressionStatement	 
>1626	AssignmentExpr	label -> color = selectedColor
>1627	Identifier	selectedColor
>1628	PtrMemberAccess	label -> color
>1629	Identifier	color
>1630	Identifier	label
>1631	ExpressionStatement	 
>1632	AssignmentExpr	color = selectedColor
>1633	Identifier	selectedColor
>1634	Identifier	color
>1635	Condition	 
>1636	CallExpression	this -> isCoordinateInsideWorld ( core -> mouse . position )
>1637	ArgumentList	core -> mouse . position
>1638	Argument	core -> mouse . position
>1639	MemberAccess	core -> mouse . position
>1640	Identifier	position
>1641	PtrMemberAccess	core -> mouse
>1642	Identifier	mouse
>1643	Identifier	core
>1644	Callee	this -> isCoordinateInsideWorld
>1645	PtrMemberAccess	this -> isCoordinateInsideWorld
>1646	Identifier	isCoordinateInsideWorld
>1647	Identifier	this
>1648	IfStatement	if ( label )
>1649	CompoundStatement	 
>1650	ExpressionStatement	 
>1651	AssignmentExpr	label -> alpha . x = alpha . x
>1652	MemberAccess	alpha . x
>1653	Identifier	x
>1654	Identifier	alpha
>1655	MemberAccess	label -> alpha . x
>1656	Identifier	x
>1657	PtrMemberAccess	label -> alpha
>1658	Identifier	alpha
>1659	Identifier	label
>1660	Condition	 
>1661	Identifier	label
>1662	ExpressionStatement	 
>1663	CallExpression	Quad 
>1664	ArgumentList	dt
>1665	Argument	dt
>1666	Identifier	dt
>1667	Callee	Quad 
>1668	Identifier	Quad 
<3=8,4
<4=5
<5=7,6
<8=185,176,163,157,150,141,128,122,113,105,96,87,77,67,61,52,48,44,40,33,29,23,19,15,9
<9=10
<10=12,11
<12=14,13
<15=16
<16=18,17
<19=20
<20=22,21
<23=24
<24=28,25
<25=27,26
<29=30
<30=32,31
<33=34
<34=38,35
<35=36
<36=37
<38=39
<40=41
<41=43,42
<44=45
<45=47,46
<48=49
<49=51,50
<52=53
<53=59,54
<54=57,55
<55=56
<57=58
<59=60
<61=62
<62=64,63
<64=66,65
<67=68
<68=72,69
<69=71,70
<72=74,73
<74=76,75
<77=78
<78=82,79
<79=81,80
<82=84,83
<84=86,85
<87=88
<88=92,89
<89=90
<90=91
<92=93
<93=95,94
<96=97
<97=101,98
<98=99
<99=100
<101=102
<102=104,103
<105=106
<106=112,107
<107=111,108
<108=110,109
<113=114
<114=120,115
<115=118,116
<116=117
<118=119
<120=121
<122=123
<123=125,124
<125=127,126
<128=129
<129=140,130
<130=139,131
<131=137,132
<132=135,133
<133=134
<135=136
<137=138
<141=142
<142=148,143
<143=146,144
<144=145
<146=147
<148=149
<150=151
<151=153,152
<153=154
<154=156,155
<157=158
<158=160,159
<160=162,161
<163=164
<164=175,165
<165=174,166
<166=172,167
<167=170,168
<168=169
<170=171
<172=173
<176=177
<177=183,178
<178=181,179
<179=180
<181=182
<183=184
<185=186
<186=197,187
<187=196,188
<188=194,189
<189=192,190
<190=191
<192=193
<194=195
<233=236,235,234
<236=237
<237=238
<238=240,239
<240=241
<245=251,250,246
<246=247
<247=249,248
<251=252
<252=253
<253=255,254
<261=267,266,262
<262=263
<263=265,264
<267=268
<268=269
<269=271,270
<277=280,279,278
<280=283,281
<281=282
<283=288,284
<284=285
<285=287,286
<288=289
<289=298,290
<290=297,291
<291=293,292
<293=294
<294=296,295
<298=300,299
<309=315,314,310
<310=311
<311=313,312
<315=316
<316=392,362,317
<317=318
<318=358,319
<319=347,336,320
<320=321
<321=329,322
<322=323
<323=327,324
<324=325
<325=326
<327=328
<329=330
<330=334,331
<331=332
<332=333
<334=335
<336=337
<337=346,338
<338=340,339
<340=342,341
<342=343
<343=345,344
<347=348
<348=355,349
<349=351,350
<351=352
<352=354,353
<355=357,356
<358=359
<359=361,360
<362=388,363
<363=384,380,364
<364=365
<365=373,366
<366=367
<367=371,368
<368=369
<369=370
<371=372
<373=374
<374=378,375
<375=376
<376=377
<378=379
<380=381
<381=383,382
<384=385
<385=387,386
<388=389
<389=391,390
<392=393
<393=395,394
<404=410,409,405
<405=406
<406=408,407
<410=755,747,726,722,713,533,450,411
<411=448,412
<412=413
<413=440,432,414
<414=415
<415=424,416
<416=417
<417=418
<418=422,419
<419=420
<420=421
<422=423
<424=425
<425=427,426
<427=429,428
<429=431,430
<432=433
<433=434
<434=438,435
<435=436
<436=437
<438=439
<440=441
<441=443,442
<443=445,444
<445=447,446
<448=449
<450=520,457,451
<451=452
<452=453
<453=454
<454=456,455
<457=458
<458=508,503,459
<459=460
<460=491,461
<461=487,476,462
<462=474,469,463
<463=464
<464=465
<465=467,466
<467=468
<469=470
<470=472,471
<472=473
<474=475
<476=477
<477=481,478
<478=479
<479=480
<481=482
<482=484,483
<484=486,485
<487=488
<488=490,489
<491=492
<492=502,493
<493=501,494
<494=496,495
<496=498,497
<498=500,499
<503=504
<504=505
<505=507,506
<508=509
<509=517,510
<510=512,511
<512=514,513
<514=516,515
<517=519,518
<520=521
<521=529,522
<522=523
<523=524
<524=526,525
<526=528,527
<529=530
<530=532,531
<533=711,534
<534=691,613,535
<535=588,547,536
<536=537
<537=538
<538=539
<539=543,540
<540=541
<541=542
<543=544
<544=546,545
<547=557,548
<548=549
<549=553,550
<550=551
<551=552
<553=554
<554=556,555
<557=584,558
<558=577,559
<559=575,566,560
<560=561
<561=562
<562=563
<563=565,564
<566=571,567
<567=568
<568=570,569
<571=572
<572=574,573
<575=576
<577=578
<578=582,579
<579=580
<580=581
<582=583
<584=585
<585=587,586
<588=589
<589=606,590
<590=602,591
<591=596,594,592
<592=593
<594=595
<596=597
<597=599,598
<599=601,600
<602=603
<603=605,604
<606=608,607
<608=610,609
<610=612,611
<613=666,625,614
<614=615
<615=616
<616=617
<617=621,618
<618=619
<619=620
<621=622
<622=624,623
<625=635,626
<626=627
<627=631,628
<628=629
<629=630
<631=632
<632=634,633
<635=662,636
<636=655,637
<637=653,644,638
<638=639
<639=640
<640=641
<641=643,642
<644=649,645
<645=646
<646=648,647
<649=650
<650=652,651
<653=654
<655=656
<656=660,657
<657=658
<658=659
<660=661
<662=663
<663=665,664
<666=667
<667=684,668
<668=680,669
<669=674,672,670
<670=671
<672=673
<674=675
<675=677,676
<677=679,678
<680=681
<681=683,682
<684=686,685
<686=688,687
<688=690,689
<691=701,692
<692=697,693
<693=694
<694=696,695
<697=698
<698=700,699
<701=702
<702=710,703
<703=705,704
<705=707,706
<707=709,708
<711=712
<713=718,714
<714=715
<715=717,716
<718=719
<719=721,720
<722=723
<723=725,724
<726=741,727
<727=734,728
<728=729
<729=733,730
<730=732,731
<734=735
<735=739,736
<736=737
<737=738
<739=740
<741=742
<742=746,743
<743=745,744
<747=749,748
<749=750
<750=752,751
<752=754,753
<755=756
<756=760,757
<757=758
<758=759
<760=761
<794=800,799,795
<795=796
<796=798,797
<800=934,831,818,805,801
<801=802
<802=804,803
<805=806
<806=812,807
<807=810,808
<808=809
<810=811
<812=813
<813=815,814
<815=817,816
<818=819
<819=825,820
<820=823,821
<821=822
<823=824
<825=826
<826=828,827
<828=830,829
<831=926,920,917,832
<832=833
<833=908,834
<834=893,887,874,853,844,835
<835=836
<836=840,837
<837=838
<838=839
<840=841
<841=843,842
<844=845
<845=851,846
<846=849,847
<847=848
<849=850
<851=852
<853=854
<854=869,855
<855=861,856
<856=858,857
<858=860,859
<861=863,862
<863=865,864
<865=866
<866=868,867
<869=871,870
<871=873,872
<874=875
<875=881,876
<876=879,877
<877=878
<879=880
<881=882
<882=884,883
<884=886,885
<887=888
<888=890,889
<890=892,891
<893=894
<894=907,906,895
<895=905,896
<896=902,897
<897=901,898
<898=900,899
<902=904,903
<908=909
<909=916,910
<910=912,911
<912=913
<913=915,914
<917=919,918
<920=921
<921=925,922
<922=924,923
<926=927
<927=928
<928=933,932,929
<929=931,930
<934=935
<935=937,936
<937=938
<938=940,939
<970=976,975,971
<971=972
<972=974,973
<976=1110,1106,1069,1055,1010,997,984,977
<977=978
<978=980,979
<980=981
<981=983,982
<984=985
<985=991,986
<986=989,987
<987=988
<989=990
<991=992
<992=994,993
<994=996,995
<997=998
<998=1004,999
<999=1002,1000
<1000=1001
<1002=1003
<1004=1005
<1005=1007,1006
<1007=1009,1008
<1010=1047,1038,1035,1011
<1011=1026,1017,1016,1012
<1012=1013
<1013=1015,1014
<1017=1018
<1018=1020,1019
<1020=1021
<1021=1023,1022
<1023=1025,1024
<1026=1027
<1027=1033,1028
<1028=1029
<1029=1030
<1030=1032,1031
<1033=1034
<1035=1037,1036
<1038=1039
<1039=1046,1040
<1040=1042,1041
<1042=1043
<1043=1045,1044
<1047=1048
<1048=1049
<1049=1054,1053,1050
<1050=1052,1051
<1055=1065,1056
<1056=1057
<1057=1061,1058
<1058=1059
<1059=1060
<1061=1062
<1062=1064,1063
<1065=1066
<1066=1068,1067
<1069=1098,1089,1086,1070
<1070=1071
<1071=1072
<1072=1078,1073
<1073=1076,1074
<1074=1075
<1076=1077
<1078=1079
<1079=1081,1080
<1081=1083,1082
<1083=1085,1084
<1086=1088,1087
<1089=1090
<1090=1097,1091
<1091=1093,1092
<1093=1094
<1094=1096,1095
<1098=1099
<1099=1100
<1100=1105,1104,1101
<1101=1103,1102
<1106=1107
<1107=1109,1108
<1110=1112,1111
<1112=1113
<1113=1115,1114
<1137=1143,1142,1138
<1138=1139
<1139=1141,1140
<1143=1146,1144
<1144=1145
<1146=1177,1168,1165,1147
<1147=1148
<1148=1159,1149
<1149=1152,1150
<1150=1151
<1152=1153
<1153=1157,1154
<1154=1155
<1155=1156
<1157=1158
<1159=1160
<1160=1162,1161
<1162=1164,1163
<1165=1167,1166
<1168=1169
<1169=1176,1170
<1170=1172,1171
<1172=1173
<1173=1175,1174
<1177=1178
<1178=1179
<1179=1184,1183,1180
<1180=1182,1181
<1196=1202,1201,1197
<1197=1198
<1198=1200,1199
<1202=1305,1203
<1203=1301,1293,1204
<1204=1205
<1205=1289,1281,1206
<1206=1207
<1207=1208
<1208=1268,1209
<1209=1264,1253,1249,1210
<1210=1238,1211
<1211=1212
<1212=1229,1225,1213
<1213=1214
<1214=1215
<1215=1224,1216
<1216=1218,1217
<1218=1220,1219
<1220=1221
<1221=1223,1222
<1225=1226
<1226=1228,1227
<1229=1230
<1230=1232,1231
<1232=1234,1233
<1234=1235
<1235=1237,1236
<1238=1239
<1239=1246,1240
<1240=1242,1241
<1242=1243
<1243=1245,1244
<1246=1248,1247
<1249=1250
<1250=1252,1251
<1253=1254
<1254=1260,1255
<1255=1256
<1256=1257
<1257=1259,1258
<1260=1261
<1261=1263,1262
<1264=1265
<1265=1267,1266
<1268=1269
<1269=1278,1270
<1270=1277,1271
<1271=1273,1272
<1273=1274
<1274=1276,1275
<1278=1280,1279
<1281=1282
<1282=1283
<1283=1287,1284
<1284=1285
<1285=1286
<1287=1288
<1289=1290
<1290=1292,1291
<1293=1294
<1294=1295
<1295=1299,1296
<1296=1297
<1297=1298
<1299=1300
<1301=1302
<1302=1304,1303
<1305=1311,1306
<1306=1307
<1307=1309,1308
<1309=1310
<1311=1312
<1328=1331,1330,1329
<1331=1332
<1332=1333
<1338=1344,1343,1339
<1339=1340
<1340=1342,1341
<1344=1372,1354,1345
<1345=1346
<1346=1348,1347
<1348=1350,1349
<1350=1351
<1351=1353,1352
<1354=1363,1355
<1355=1356
<1356=1357
<1357=1361,1358
<1358=1359
<1359=1360
<1361=1362
<1363=1364
<1364=1366,1365
<1366=1368,1367
<1368=1369
<1369=1371,1370
<1372=1373
<1373=1377,1374
<1374=1375
<1375=1376
<1377=1378
<1378=1380,1379
<1391=1405,1392
<1392=1402,1399,1396,1393
<1393=1395,1394
<1396=1398,1397
<1399=1401,1400
<1402=1404,1403
<1405=1505,1501,1494,1486,1477,1468,1459,1449,1439,1433,1424,1420,1414,1410,1406
<1406=1407
<1407=1409,1408
<1410=1411
<1411=1413,1412
<1414=1415
<1415=1417,1416
<1417=1419,1418
<1420=1421
<1421=1423,1422
<1424=1425
<1425=1431,1426
<1426=1429,1427
<1427=1428
<1429=1430
<1431=1432
<1433=1434
<1434=1436,1435
<1436=1438,1437
<1439=1440
<1440=1444,1441
<1441=1443,1442
<1444=1446,1445
<1446=1448,1447
<1449=1450
<1450=1454,1451
<1451=1453,1452
<1454=1456,1455
<1456=1458,1457
<1459=1460
<1460=1464,1461
<1461=1462
<1462=1463
<1464=1465
<1465=1467,1466
<1468=1469
<1469=1473,1470
<1470=1471
<1471=1472
<1473=1474
<1474=1476,1475
<1477=1478
<1478=1482,1479
<1479=1480
<1480=1481
<1482=1483
<1483=1485,1484
<1486=1487
<1487=1493,1488
<1488=1492,1489
<1489=1491,1490
<1494=1495
<1495=1499,1496
<1496=1497
<1497=1498
<1499=1500
<1501=1502
<1502=1504,1503
<1505=1506
<1506=1508,1507
<1508=1510,1509
<1540=1546,1545,1541
<1541=1542
<1542=1544,1543
<1546=1662,1648,1547
<1547=1635,1564,1548
<1548=1549
<1549=1560,1554,1550
<1550=1551
<1551=1553,1552
<1554=1555
<1555=1557,1556
<1557=1559,1558
<1560=1561
<1561=1563,1562
<1564=1631,1625,1565
<1565=1613,1608,1566
<1566=1567
<1567=1596,1568
<1568=1592,1581,1569
<1569=1579,1570
<1570=1571
<1571=1575,1572
<1572=1573
<1573=1574
<1575=1576
<1576=1578,1577
<1579=1580
<1581=1582
<1582=1586,1583
<1583=1584
<1584=1585
<1586=1587
<1587=1589,1588
<1589=1591,1590
<1592=1593
<1593=1595,1594
<1596=1597
<1597=1607,1598
<1598=1606,1599
<1599=1601,1600
<1601=1603,1602
<1603=1605,1604
<1608=1609
<1609=1610
<1610=1612,1611
<1613=1614
<1614=1622,1615
<1615=1617,1616
<1617=1619,1618
<1619=1621,1620
<1622=1624,1623
<1625=1626
<1626=1628,1627
<1628=1630,1629
<1631=1632
<1632=1634,1633
<1635=1636
<1636=1644,1637
<1637=1638
<1638=1639
<1639=1641,1640
<1641=1643,1642
<1644=1645
<1645=1647,1646
<1648=1660,1649
<1649=1650
<1650=1651
<1651=1655,1652
<1652=1654,1653
<1655=1657,1656
<1657=1659,1658
<1660=1661
<1662=1663
<1663=1667,1664
<1664=1665
<1665=1666
<1667=1668
