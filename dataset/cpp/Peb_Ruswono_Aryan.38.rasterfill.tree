>3	FunctionDef	GDALFilterLine (float * pafLastLine , float * pafThisLine , float * pafNextLine , float * pafOutLine , GByte * pabyLastTMask , \
>4	ParameterList	float * pafLastLine , float * pafThisLine , float * pafNextLine , float * pafOutLine , GByte * pabyLastTMask , GByte * \
>5	Parameter	 
>6	Identifier	nXSize
>7	ParameterType	int
>8	Parameter	 
>9	Identifier	pabyThisFMask
>10	ParameterType	GByte *
>11	Parameter	 
>12	Identifier	pabyNextTMask
>13	ParameterType	GByte *
>14	Parameter	 
>15	Identifier	pabyThisTMask
>16	ParameterType	GByte *
>17	Parameter	 
>18	Identifier	pabyLastTMask
>19	ParameterType	GByte *
>20	Parameter	 
>21	Identifier	pafOutLine
>22	ParameterType	float *
>23	Parameter	 
>24	Identifier	pafNextLine
>25	ParameterType	float *
>26	Parameter	 
>27	Identifier	pafThisLine
>28	ParameterType	float *
>29	Parameter	 
>30	Identifier	pafLastLine
>31	ParameterType	float *
>32	ReturnType	static void
>33	CompoundStatement	 
>34	ForStatement	for ( iX = 0 ; iX < nXSize ; iX ++ )
>35	CompoundStatement	 
>36	ExpressionStatement	 
>37	AssignmentExpr	pafOutLine [ iX ] = ( float ) ( dfValSum / dfWeightSum )
>38	CastExpression	( float ) ( dfValSum / dfWeightSum )
>39	MultiplicativeExpression	dfValSum / dfWeightSum
>40	Identifier	dfWeightSum
>41	Identifier	dfValSum
>42	CastTarget	float
>43	ArrayIndexing	pafOutLine [ iX ]
>44	Identifier	iX
>45	Identifier	pafOutLine
>46	IfStatement	if ( pafNextLine != NULL )
>47	CompoundStatement	 
>48	IfStatement	if ( iX < nXSize - 1 && pabyNextTMask [ iX + 1 ] )
>49	CompoundStatement	 
>50	ExpressionStatement	 
>51	AssignmentExpr	dfWeightSum += 1.0
>52	PrimaryExpression	1.0
>53	Identifier	dfWeightSum
>54	ExpressionStatement	 
>55	AssignmentExpr	dfValSum += pafNextLine [ iX + 1 ]
>56	ArrayIndexing	pafNextLine [ iX + 1 ]
>57	AdditiveExpression	iX + 1
>58	PrimaryExpression	1
>59	Identifier	iX
>60	Identifier	pafNextLine
>61	Identifier	dfValSum
>62	Condition	 
>63	AndExpression	iX < nXSize - 1 && pabyNextTMask [ iX + 1 ]
>64	ArrayIndexing	pabyNextTMask [ iX + 1 ]
>65	AdditiveExpression	iX + 1
>66	PrimaryExpression	1
>67	Identifier	iX
>68	Identifier	pabyNextTMask
>69	RelationalExpression	iX < nXSize - 1
>70	AdditiveExpression	nXSize - 1
>71	PrimaryExpression	1
>72	Identifier	nXSize
>73	Identifier	iX
>74	IfStatement	if ( pabyNextTMask [ iX ] )
>75	CompoundStatement	 
>76	ExpressionStatement	 
>77	AssignmentExpr	dfWeightSum += 1.0
>78	PrimaryExpression	1.0
>79	Identifier	dfWeightSum
>80	ExpressionStatement	 
>81	AssignmentExpr	dfValSum += pafNextLine [ iX ]
>82	ArrayIndexing	pafNextLine [ iX ]
>83	Identifier	iX
>84	Identifier	pafNextLine
>85	Identifier	dfValSum
>86	Condition	 
>87	ArrayIndexing	pabyNextTMask [ iX ]
>88	Identifier	iX
>89	Identifier	pabyNextTMask
>90	IfStatement	if ( iX > 0 && pabyNextTMask [ iX - 1 ] )
>91	CompoundStatement	 
>92	ExpressionStatement	 
>93	AssignmentExpr	dfWeightSum += 1.0
>94	PrimaryExpression	1.0
>95	Identifier	dfWeightSum
>96	ExpressionStatement	 
>97	AssignmentExpr	dfValSum += pafNextLine [ iX - 1 ]
>98	ArrayIndexing	pafNextLine [ iX - 1 ]
>99	AdditiveExpression	iX - 1
>100	PrimaryExpression	1
>101	Identifier	iX
>102	Identifier	pafNextLine
>103	Identifier	dfValSum
>104	Condition	 
>105	AndExpression	iX > 0 && pabyNextTMask [ iX - 1 ]
>106	ArrayIndexing	pabyNextTMask [ iX - 1 ]
>107	AdditiveExpression	iX - 1
>108	PrimaryExpression	1
>109	Identifier	iX
>110	Identifier	pabyNextTMask
>111	RelationalExpression	iX > 0
>112	PrimaryExpression	0
>113	Identifier	iX
>114	Condition	 
>115	EqualityExpression	pafNextLine != NULL
>116	Identifier	NULL
>117	Identifier	pafNextLine
>118	IfStatement	if ( iX < nXSize - 1 && pabyThisTMask [ iX + 1 ] )
>119	CompoundStatement	 
>120	ExpressionStatement	 
>121	AssignmentExpr	dfWeightSum += 1.0
>122	PrimaryExpression	1.0
>123	Identifier	dfWeightSum
>124	ExpressionStatement	 
>125	AssignmentExpr	dfValSum += pafThisLine [ iX + 1 ]
>126	ArrayIndexing	pafThisLine [ iX + 1 ]
>127	AdditiveExpression	iX + 1
>128	PrimaryExpression	1
>129	Identifier	iX
>130	Identifier	pafThisLine
>131	Identifier	dfValSum
>132	Condition	 
>133	AndExpression	iX < nXSize - 1 && pabyThisTMask [ iX + 1 ]
>134	ArrayIndexing	pabyThisTMask [ iX + 1 ]
>135	AdditiveExpression	iX + 1
>136	PrimaryExpression	1
>137	Identifier	iX
>138	Identifier	pabyThisTMask
>139	RelationalExpression	iX < nXSize - 1
>140	AdditiveExpression	nXSize - 1
>141	PrimaryExpression	1
>142	Identifier	nXSize
>143	Identifier	iX
>144	IfStatement	if ( pabyThisTMask [ iX ] )
>145	CompoundStatement	 
>146	ExpressionStatement	 
>147	AssignmentExpr	dfWeightSum += 1.0
>148	PrimaryExpression	1.0
>149	Identifier	dfWeightSum
>150	ExpressionStatement	 
>151	AssignmentExpr	dfValSum += pafThisLine [ iX ]
>152	ArrayIndexing	pafThisLine [ iX ]
>153	Identifier	iX
>154	Identifier	pafThisLine
>155	Identifier	dfValSum
>156	Condition	 
>157	ArrayIndexing	pabyThisTMask [ iX ]
>158	Identifier	iX
>159	Identifier	pabyThisTMask
>160	IfStatement	if ( iX > 0 && pabyThisTMask [ iX - 1 ] )
>161	CompoundStatement	 
>162	ExpressionStatement	 
>163	AssignmentExpr	dfWeightSum += 1.0
>164	PrimaryExpression	1.0
>165	Identifier	dfWeightSum
>166	ExpressionStatement	 
>167	AssignmentExpr	dfValSum += pafThisLine [ iX - 1 ]
>168	ArrayIndexing	pafThisLine [ iX - 1 ]
>169	AdditiveExpression	iX - 1
>170	PrimaryExpression	1
>171	Identifier	iX
>172	Identifier	pafThisLine
>173	Identifier	dfValSum
>174	Condition	 
>175	AndExpression	iX > 0 && pabyThisTMask [ iX - 1 ]
>176	ArrayIndexing	pabyThisTMask [ iX - 1 ]
>177	AdditiveExpression	iX - 1
>178	PrimaryExpression	1
>179	Identifier	iX
>180	Identifier	pabyThisTMask
>181	RelationalExpression	iX > 0
>182	PrimaryExpression	0
>183	Identifier	iX
>184	IfStatement	if ( pafLastLine != NULL )
>185	CompoundStatement	 
>186	IfStatement	if ( iX < nXSize - 1 && pabyLastTMask [ iX + 1 ] )
>187	CompoundStatement	 
>188	ExpressionStatement	 
>189	AssignmentExpr	dfWeightSum += 1.0
>190	PrimaryExpression	1.0
>191	Identifier	dfWeightSum
>192	ExpressionStatement	 
>193	AssignmentExpr	dfValSum += pafLastLine [ iX + 1 ]
>194	ArrayIndexing	pafLastLine [ iX + 1 ]
>195	AdditiveExpression	iX + 1
>196	PrimaryExpression	1
>197	Identifier	iX
>198	Identifier	pafLastLine
>199	Identifier	dfValSum
>200	Condition	 
>201	AndExpression	iX < nXSize - 1 && pabyLastTMask [ iX + 1 ]
>202	ArrayIndexing	pabyLastTMask [ iX + 1 ]
>203	AdditiveExpression	iX + 1
>204	PrimaryExpression	1
>205	Identifier	iX
>206	Identifier	pabyLastTMask
>207	RelationalExpression	iX < nXSize - 1
>208	AdditiveExpression	nXSize - 1
>209	PrimaryExpression	1
>210	Identifier	nXSize
>211	Identifier	iX
>212	IfStatement	if ( pabyLastTMask [ iX ] )
>213	CompoundStatement	 
>214	ExpressionStatement	 
>215	AssignmentExpr	dfWeightSum += 1.0
>216	PrimaryExpression	1.0
>217	Identifier	dfWeightSum
>218	ExpressionStatement	 
>219	AssignmentExpr	dfValSum += pafLastLine [ iX ]
>220	ArrayIndexing	pafLastLine [ iX ]
>221	Identifier	iX
>222	Identifier	pafLastLine
>223	Identifier	dfValSum
>224	Condition	 
>225	ArrayIndexing	pabyLastTMask [ iX ]
>226	Identifier	iX
>227	Identifier	pabyLastTMask
>228	IfStatement	if ( iX > 0 && pabyLastTMask [ iX - 1 ] )
>229	CompoundStatement	 
>230	ExpressionStatement	 
>231	AssignmentExpr	dfWeightSum += 1.0
>232	PrimaryExpression	1.0
>233	Identifier	dfWeightSum
>234	ExpressionStatement	 
>235	AssignmentExpr	dfValSum += pafLastLine [ iX - 1 ]
>236	ArrayIndexing	pafLastLine [ iX - 1 ]
>237	AdditiveExpression	iX - 1
>238	PrimaryExpression	1
>239	Identifier	iX
>240	Identifier	pafLastLine
>241	Identifier	dfValSum
>242	Condition	 
>243	AndExpression	iX > 0 && pabyLastTMask [ iX - 1 ]
>244	ArrayIndexing	pabyLastTMask [ iX - 1 ]
>245	AdditiveExpression	iX - 1
>246	PrimaryExpression	1
>247	Identifier	iX
>248	Identifier	pabyLastTMask
>249	RelationalExpression	iX > 0
>250	PrimaryExpression	0
>251	Identifier	iX
>252	Condition	 
>253	EqualityExpression	pafLastLine != NULL
>254	Identifier	NULL
>255	Identifier	pafLastLine
>256	IdentifierDeclStatement	 
>257	IdentifierDecl	dfWeightSum = 0.0
>258	AssignmentExpr	dfWeightSum = 0.0
>259	PrimaryExpression	0.0
>260	Identifier	dfWeightSum
>261	Identifier	dfWeightSum
>262	IdentifierDeclType	double
>263	IdentifierDeclStatement	 
>264	IdentifierDecl	dfValSum = 0.0
>265	AssignmentExpr	dfValSum = 0.0
>266	PrimaryExpression	0.0
>267	Identifier	dfValSum
>268	Identifier	dfValSum
>269	IdentifierDeclType	double
>270	ExpressionStatement	 
>271	CallExpression	CPLAssert ( pabyThisTMask [ iX ] )
>272	ArgumentList	pabyThisTMask [ iX ]
>273	Argument	pabyThisTMask [ iX ]
>274	ArrayIndexing	pabyThisTMask [ iX ]
>275	Identifier	iX
>276	Identifier	pabyThisTMask
>277	Callee	CPLAssert
>278	Identifier	CPLAssert
>279	IfStatement	if ( ! pabyThisFMask [ iX ] )
>280	CompoundStatement	 
>281	ContinueStatement	 
>282	ExpressionStatement	 
>283	AssignmentExpr	pafOutLine [ iX ] = pafThisLine [ iX ]
>284	ArrayIndexing	pafThisLine [ iX ]
>285	Identifier	iX
>286	Identifier	pafThisLine
>287	ArrayIndexing	pafOutLine [ iX ]
>288	Identifier	iX
>289	Identifier	pafOutLine
>290	Condition	 
>291	UnaryOp	! pabyThisFMask [ iX ]
>292	ArrayIndexing	pabyThisFMask [ iX ]
>293	Identifier	iX
>294	Identifier	pabyThisFMask
>295	UnaryOperator	!
>296	IncDecOp	 
>297	IncDec	++
>298	Identifier	iX
>299	Condition	 
>300	RelationalExpression	iX < nXSize
>301	Identifier	nXSize
>302	Identifier	iX
>303	ForInit	 
>304	AssignmentExpr	iX = 0
>305	PrimaryExpression	0
>306	Identifier	iX
>307	IdentifierDeclStatement	 
>308	IdentifierDecl	iX
>309	Identifier	iX
>310	IdentifierDeclType	int
>336	FunctionDef	GDALMultiFilter (GDALRasterBandH hTargetBand , GDALRasterBandH hTargetMaskBand , GDALRasterBandH hFiltMaskBand , \
>337	ParameterList	GDALRasterBandH hTargetBand , GDALRasterBandH hTargetMaskBand , GDALRasterBandH hFiltMaskBand , int nIterations , \
>338	Parameter	 
>339	Identifier	pProgressArg
>340	ParameterType	void *
>341	Parameter	 
>342	Identifier	pfnProgress
>343	ParameterType	GDALProgressFunc
>344	Parameter	 
>345	Identifier	nIterations
>346	ParameterType	int
>347	Parameter	 
>348	Identifier	hFiltMaskBand
>349	ParameterType	GDALRasterBandH
>350	Parameter	 
>351	Identifier	hTargetMaskBand
>352	ParameterType	GDALRasterBandH
>353	Parameter	 
>354	Identifier	hTargetBand
>355	ParameterType	GDALRasterBandH
>356	ReturnType	static CPLErr
>357	CompoundStatement	 
>358	ReturnStatement	 
>359	Identifier	eErr
>360	ExpressionStatement	 
>361	CallExpression	CPLFree ( paf3PassLineBuf )
>362	ArgumentList	paf3PassLineBuf
>363	Argument	paf3PassLineBuf
>364	Identifier	paf3PassLineBuf
>365	Callee	CPLFree
>366	Identifier	CPLFree
>367	ExpressionStatement	 
>368	CallExpression	CPLFree ( pabyFMaskBuf )
>369	ArgumentList	pabyFMaskBuf
>370	Argument	pabyFMaskBuf
>371	Identifier	pabyFMaskBuf
>372	Callee	CPLFree
>373	Identifier	CPLFree
>374	ExpressionStatement	 
>375	CallExpression	CPLFree ( pabyTMaskBuf )
>376	ArgumentList	pabyTMaskBuf
>377	Argument	pabyTMaskBuf
>378	Identifier	pabyTMaskBuf
>379	Callee	CPLFree
>380	Identifier	CPLFree
>381	Label	 
>382	Identifier	end
>383	ForStatement	for ( nNewLine = 0 ; eErr == CE_None && nNewLine < nYSize + nIterations ; nNewLine ++ )
>384	CompoundStatement	 
>385	IfStatement	if ( eErr == CE_None && ! pfnProgress ( ( nNewLine + 1 ) / ( double ) ( nYSize + nIterations ) , \"Smoothing Filter...\" , \
>386	CompoundStatement	 
>387	ExpressionStatement	 
>388	AssignmentExpr	eErr = CE_Failure
>389	Identifier	CE_Failure
>390	Identifier	eErr
>391	ExpressionStatement	 
>392	CallExpression	CPLError ( CE_Failure , CPLE_UserInterrupt , \"User terminated\" )
>393	ArgumentList	CE_Failure
>394	Argument	\"User terminated\"
>395	PrimaryExpression	\"User terminated\"
>396	Argument	CPLE_UserInterrupt
>397	Identifier	CPLE_UserInterrupt
>398	Argument	CE_Failure
>399	Identifier	CE_Failure
>400	Callee	CPLError
>401	Identifier	CPLError
>402	Condition	 
>403	AndExpression	eErr == CE_None && ! pfnProgress ( ( nNewLine + 1 ) / ( double ) ( nYSize + nIterations ) , \"Smoothing \
>404	UnaryOp	! pfnProgress ( ( nNewLine + 1 ) / ( double ) ( nYSize + nIterations ) , \"Smoothing Filter...\" , pProgressArg )
>405	CallExpression	pfnProgress ( ( nNewLine + 1 ) / ( double ) ( nYSize + nIterations ) , \"Smoothing Filter...\" , pProgressArg )
>406	ArgumentList	( nNewLine + 1 ) / ( double ) ( nYSize + nIterations )
>407	Argument	pProgressArg
>408	Identifier	pProgressArg
>409	Argument	\"Smoothing Filter...\"
>410	PrimaryExpression	\"Smoothing Filter...\"
>411	Argument	( nNewLine + 1 ) / ( double ) ( nYSize + nIterations )
>412	MultiplicativeExpression	( nNewLine + 1 ) / ( double ) ( nYSize + nIterations )
>413	CastExpression	( double ) ( nYSize + nIterations )
>414	AdditiveExpression	nYSize + nIterations
>415	Identifier	nIterations
>416	Identifier	nYSize
>417	CastTarget	double
>418	AdditiveExpression	nNewLine + 1
>419	PrimaryExpression	1
>420	Identifier	nNewLine
>421	Callee	pfnProgress
>422	Identifier	pfnProgress
>423	UnaryOperator	!
>424	EqualityExpression	eErr == CE_None
>425	Identifier	CE_None
>426	Identifier	eErr
>427	IfStatement	if ( iLineToSave >= 0 && eErr == CE_None )
>428	CompoundStatement	 
>429	ExpressionStatement	 
>430	AssignmentExpr	eErr = GDALRasterIO ( hTargetBand , GF_Write , 0 , iLineToSave , nXSize , 1 , pafThisPass + nXSize * \
>431	CallExpression	GDALRasterIO ( hTargetBand , GF_Write , 0 , iLineToSave , nXSize , 1 , pafThisPass + nXSize * iBufOffset , nXSize , \
>432	ArgumentList	hTargetBand
>433	Argument	0
>434	PrimaryExpression	0
>435	Argument	0
>436	PrimaryExpression	0
>437	Argument	GDT_Float32
>438	Identifier	GDT_Float32
>439	Argument	1
>440	PrimaryExpression	1
>441	Argument	nXSize
>442	Identifier	nXSize
>443	Argument	pafThisPass + nXSize * iBufOffset
>444	AdditiveExpression	pafThisPass + nXSize * iBufOffset
>445	MultiplicativeExpression	nXSize * iBufOffset
>446	Identifier	iBufOffset
>447	Identifier	nXSize
>448	Identifier	pafThisPass
>449	Argument	1
>450	PrimaryExpression	1
>451	Argument	nXSize
>452	Identifier	nXSize
>453	Argument	iLineToSave
>454	Identifier	iLineToSave
>455	Argument	0
>456	PrimaryExpression	0
>457	Argument	GF_Write
>458	Identifier	GF_Write
>459	Argument	hTargetBand
>460	Identifier	hTargetBand
>461	Callee	GDALRasterIO
>462	Identifier	GDALRasterIO
>463	Identifier	eErr
>464	ExpressionStatement	 
>465	AssignmentExpr	iBufOffset = iLineToSave % nBufLines
>466	MultiplicativeExpression	iLineToSave % nBufLines
>467	Identifier	nBufLines
>468	Identifier	iLineToSave
>469	Identifier	iBufOffset
>470	Condition	 
>471	AndExpression	iLineToSave >= 0 && eErr == CE_None
>472	EqualityExpression	eErr == CE_None
>473	Identifier	CE_None
>474	Identifier	eErr
>475	RelationalExpression	iLineToSave >= 0
>476	PrimaryExpression	0
>477	Identifier	iLineToSave
>478	IdentifierDeclStatement	 
>479	IdentifierDecl	iLineToSave = nNewLine - nIterations
>480	AssignmentExpr	iLineToSave = nNewLine - nIterations
>481	AdditiveExpression	nNewLine - nIterations
>482	Identifier	nIterations
>483	Identifier	nNewLine
>484	Identifier	iLineToSave
>485	Identifier	iLineToSave
>486	IdentifierDeclType	int
>487	ForStatement	for ( iFLine = nNewLine - 1 ; eErr == CE_None && iFLine >= nNewLine - nIterations ; iFLine -- )
>488	CompoundStatement	 
>489	ExpressionStatement	 
>490	CallExpression	GDALFilterLine ( pafSLastPass + iLastOffset * nXSize , pafLastPass + iThisOffset * nXSize , pafThisPass + iNextOffset * \
>491	ArgumentList	pafSLastPass + iLastOffset * nXSize
>492	Argument	nXSize
>493	Identifier	nXSize
>494	Argument	pabyFMaskBuf + iThisOffset * nXSize
>495	AdditiveExpression	pabyFMaskBuf + iThisOffset * nXSize
>496	MultiplicativeExpression	iThisOffset * nXSize
>497	Identifier	nXSize
>498	Identifier	iThisOffset
>499	Identifier	pabyFMaskBuf
>500	Argument	pabyTMaskBuf + iNextOffset * nXSize
>501	AdditiveExpression	pabyTMaskBuf + iNextOffset * nXSize
>502	MultiplicativeExpression	iNextOffset * nXSize
>503	Identifier	nXSize
>504	Identifier	iNextOffset
>505	Identifier	pabyTMaskBuf
>506	Argument	pabyTMaskBuf + iThisOffset * nXSize
>507	AdditiveExpression	pabyTMaskBuf + iThisOffset * nXSize
>508	MultiplicativeExpression	iThisOffset * nXSize
>509	Identifier	nXSize
>510	Identifier	iThisOffset
>511	Identifier	pabyTMaskBuf
>512	Argument	pabyTMaskBuf + iLastOffset * nXSize
>513	AdditiveExpression	pabyTMaskBuf + iLastOffset * nXSize
>514	MultiplicativeExpression	iLastOffset * nXSize
>515	Identifier	nXSize
>516	Identifier	iLastOffset
>517	Identifier	pabyTMaskBuf
>518	Argument	pafThisPass + iThisOffset * nXSize
>519	AdditiveExpression	pafThisPass + iThisOffset * nXSize
>520	MultiplicativeExpression	iThisOffset * nXSize
>521	Identifier	nXSize
>522	Identifier	iThisOffset
>523	Identifier	pafThisPass
>524	Argument	pafThisPass + iNextOffset * nXSize
>525	AdditiveExpression	pafThisPass + iNextOffset * nXSize
>526	MultiplicativeExpression	iNextOffset * nXSize
>527	Identifier	nXSize
>528	Identifier	iNextOffset
>529	Identifier	pafThisPass
>530	Argument	pafLastPass + iThisOffset * nXSize
>531	AdditiveExpression	pafLastPass + iThisOffset * nXSize
>532	MultiplicativeExpression	iThisOffset * nXSize
>533	Identifier	nXSize
>534	Identifier	iThisOffset
>535	Identifier	pafLastPass
>536	Argument	pafSLastPass + iLastOffset * nXSize
>537	AdditiveExpression	pafSLastPass + iLastOffset * nXSize
>538	MultiplicativeExpression	iLastOffset * nXSize
>539	Identifier	nXSize
>540	Identifier	iLastOffset
>541	Identifier	pafSLastPass
>542	Callee	GDALFilterLine
>543	Identifier	GDALFilterLine
>544	IfStatement	if ( iFLine < 1 || iFLine >= nYSize - 1 )
>545	CompoundStatement	 
>546	ContinueStatement	 
>547	Condition	 
>548	OrExpression	iFLine < 1 || iFLine >= nYSize - 1
>549	RelationalExpression	iFLine >= nYSize - 1
>550	AdditiveExpression	nYSize - 1
>551	PrimaryExpression	1
>552	Identifier	nYSize
>553	Identifier	iFLine
>554	RelationalExpression	iFLine < 1
>555	PrimaryExpression	1
>556	Identifier	iFLine
>557	IfStatement	if ( iFLine >= 0 )
>558	ExpressionStatement	 
>559	CallExpression	memcpy ( pafThisPass + iThisOffset * nXSize , pafLastPass + iThisOffset * nXSize , sizeof ( float ) * nXSize )
>560	ArgumentList	pafThisPass + iThisOffset * nXSize
>561	Argument	sizeof ( float ) * nXSize
>562	MultiplicativeExpression	sizeof ( float ) * nXSize
>563	Identifier	nXSize
>564	SizeofExpr	sizeof ( float )
>565	SizeofOperand	float
>566	Sizeof	sizeof
>567	Argument	pafLastPass + iThisOffset * nXSize
>568	AdditiveExpression	pafLastPass + iThisOffset * nXSize
>569	MultiplicativeExpression	iThisOffset * nXSize
>570	Identifier	nXSize
>571	Identifier	iThisOffset
>572	Identifier	pafLastPass
>573	Argument	pafThisPass + iThisOffset * nXSize
>574	AdditiveExpression	pafThisPass + iThisOffset * nXSize
>575	MultiplicativeExpression	iThisOffset * nXSize
>576	Identifier	nXSize
>577	Identifier	iThisOffset
>578	Identifier	pafThisPass
>579	Callee	memcpy
>580	Identifier	memcpy
>581	Condition	 
>582	RelationalExpression	iFLine >= 0
>583	PrimaryExpression	0
>584	Identifier	iFLine
>585	ExpressionStatement	 
>586	AssignmentExpr	iNextOffset = ( iFLine + 1 ) % nBufLines
>587	MultiplicativeExpression	( iFLine + 1 ) % nBufLines
>588	Identifier	nBufLines
>589	AdditiveExpression	iFLine + 1
>590	PrimaryExpression	1
>591	Identifier	iFLine
>592	Identifier	iNextOffset
>593	ExpressionStatement	 
>594	AssignmentExpr	iThisOffset = ( iFLine ) % nBufLines
>595	MultiplicativeExpression	( iFLine ) % nBufLines
>596	Identifier	nBufLines
>597	Identifier	iFLine
>598	Identifier	iThisOffset
>599	ExpressionStatement	 
>600	AssignmentExpr	iLastOffset = ( iFLine - 1 ) % nBufLines
>601	MultiplicativeExpression	( iFLine - 1 ) % nBufLines
>602	Identifier	nBufLines
>603	AdditiveExpression	iFLine - 1
>604	PrimaryExpression	1
>605	Identifier	iFLine
>606	Identifier	iLastOffset
>607	IdentifierDeclStatement	 
>608	IdentifierDecl	iNextOffset
>609	Identifier	iNextOffset
>610	IdentifierDeclType	int
>611	IdentifierDecl	iThisOffset
>612	Identifier	iThisOffset
>613	IdentifierDeclType	int
>614	IdentifierDecl	iLastOffset
>615	Identifier	iLastOffset
>616	IdentifierDeclType	int
>617	IncDecOp	 
>618	IncDec	--
>619	Identifier	iFLine
>620	Condition	 
>621	AndExpression	eErr == CE_None && iFLine >= nNewLine - nIterations
>622	RelationalExpression	iFLine >= nNewLine - nIterations
>623	AdditiveExpression	nNewLine - nIterations
>624	Identifier	nIterations
>625	Identifier	nNewLine
>626	Identifier	iFLine
>627	EqualityExpression	eErr == CE_None
>628	Identifier	CE_None
>629	Identifier	eErr
>630	ForInit	 
>631	AssignmentExpr	iFLine = nNewLine - 1
>632	AdditiveExpression	nNewLine - 1
>633	PrimaryExpression	1
>634	Identifier	nNewLine
>635	Identifier	iFLine
>636	IdentifierDeclStatement	 
>637	IdentifierDecl	iFLine
>638	Identifier	iFLine
>639	IdentifierDeclType	int
>640	IfStatement	if ( nNewLine < nYSize )
>641	CompoundStatement	 
>642	IfStatement	if ( eErr != CE_None )
>643	BreakStatement	 
>644	Condition	 
>645	EqualityExpression	eErr != CE_None
>646	Identifier	CE_None
>647	Identifier	eErr
>648	ExpressionStatement	 
>649	AssignmentExpr	eErr = GDALRasterIO ( hTargetBand , GF_Read , 0 , nNewLine , nXSize , 1 , pafThisPass + nXSize * iBufOffset , \
>650	CallExpression	GDALRasterIO ( hTargetBand , GF_Read , 0 , nNewLine , nXSize , 1 , pafThisPass + nXSize * iBufOffset , nXSize , \
>651	ArgumentList	hTargetBand
>652	Argument	0
>653	PrimaryExpression	0
>654	Argument	0
>655	PrimaryExpression	0
>656	Argument	GDT_Float32
>657	Identifier	GDT_Float32
>658	Argument	1
>659	PrimaryExpression	1
>660	Argument	nXSize
>661	Identifier	nXSize
>662	Argument	pafThisPass + nXSize * iBufOffset
>663	AdditiveExpression	pafThisPass + nXSize * iBufOffset
>664	MultiplicativeExpression	nXSize * iBufOffset
>665	Identifier	iBufOffset
>666	Identifier	nXSize
>667	Identifier	pafThisPass
>668	Argument	1
>669	PrimaryExpression	1
>670	Argument	nXSize
>671	Identifier	nXSize
>672	Argument	nNewLine
>673	Identifier	nNewLine
>674	Argument	0
>675	PrimaryExpression	0
>676	Argument	GF_Read
>677	Identifier	GF_Read
>678	Argument	hTargetBand
>679	Identifier	hTargetBand
>680	Callee	GDALRasterIO
>681	Identifier	GDALRasterIO
>682	Identifier	eErr
>683	IfStatement	if ( eErr != CE_None )
>684	BreakStatement	 
>685	Condition	 
>686	EqualityExpression	eErr != CE_None
>687	Identifier	CE_None
>688	Identifier	eErr
>689	ExpressionStatement	 
>690	AssignmentExpr	eErr = GDALRasterIO ( hFiltMaskBand , GF_Read , 0 , nNewLine , nXSize , 1 , pabyFMaskBuf + nXSize * iBufOffset , \
>691	CallExpression	GDALRasterIO ( hFiltMaskBand , GF_Read , 0 , nNewLine , nXSize , 1 , pabyFMaskBuf + nXSize * iBufOffset , nXSize , \
>692	ArgumentList	hFiltMaskBand
>693	Argument	0
>694	PrimaryExpression	0
>695	Argument	0
>696	PrimaryExpression	0
>697	Argument	GDT_Byte
>698	Identifier	GDT_Byte
>699	Argument	1
>700	PrimaryExpression	1
>701	Argument	nXSize
>702	Identifier	nXSize
>703	Argument	pabyFMaskBuf + nXSize * iBufOffset
>704	AdditiveExpression	pabyFMaskBuf + nXSize * iBufOffset
>705	MultiplicativeExpression	nXSize * iBufOffset
>706	Identifier	iBufOffset
>707	Identifier	nXSize
>708	Identifier	pabyFMaskBuf
>709	Argument	1
>710	PrimaryExpression	1
>711	Argument	nXSize
>712	Identifier	nXSize
>713	Argument	nNewLine
>714	Identifier	nNewLine
>715	Argument	0
>716	PrimaryExpression	0
>717	Argument	GF_Read
>718	Identifier	GF_Read
>719	Argument	hFiltMaskBand
>720	Identifier	hFiltMaskBand
>721	Callee	GDALRasterIO
>722	Identifier	GDALRasterIO
>723	Identifier	eErr
>724	IfStatement	if ( eErr != CE_None )
>725	BreakStatement	 
>726	Condition	 
>727	EqualityExpression	eErr != CE_None
>728	Identifier	CE_None
>729	Identifier	eErr
>730	ExpressionStatement	 
>731	AssignmentExpr	eErr = GDALRasterIO ( hTargetMaskBand , GF_Read , 0 , nNewLine , nXSize , 1 , pabyTMaskBuf + nXSize * \
>732	CallExpression	GDALRasterIO ( hTargetMaskBand , GF_Read , 0 , nNewLine , nXSize , 1 , pabyTMaskBuf + nXSize * iBufOffset , nXSize , \
>733	ArgumentList	hTargetMaskBand
>734	Argument	0
>735	PrimaryExpression	0
>736	Argument	0
>737	PrimaryExpression	0
>738	Argument	GDT_Byte
>739	Identifier	GDT_Byte
>740	Argument	1
>741	PrimaryExpression	1
>742	Argument	nXSize
>743	Identifier	nXSize
>744	Argument	pabyTMaskBuf + nXSize * iBufOffset
>745	AdditiveExpression	pabyTMaskBuf + nXSize * iBufOffset
>746	MultiplicativeExpression	nXSize * iBufOffset
>747	Identifier	iBufOffset
>748	Identifier	nXSize
>749	Identifier	pabyTMaskBuf
>750	Argument	1
>751	PrimaryExpression	1
>752	Argument	nXSize
>753	Identifier	nXSize
>754	Argument	nNewLine
>755	Identifier	nNewLine
>756	Argument	0
>757	PrimaryExpression	0
>758	Argument	GF_Read
>759	Identifier	GF_Read
>760	Argument	hTargetMaskBand
>761	Identifier	hTargetMaskBand
>762	Callee	GDALRasterIO
>763	Identifier	GDALRasterIO
>764	Identifier	eErr
>765	Condition	 
>766	RelationalExpression	nNewLine < nYSize
>767	Identifier	nYSize
>768	Identifier	nNewLine
>769	IdentifierDeclStatement	 
>770	IdentifierDecl	iBufOffset = nNewLine % nBufLines
>771	AssignmentExpr	iBufOffset = nNewLine % nBufLines
>772	MultiplicativeExpression	nNewLine % nBufLines
>773	Identifier	nBufLines
>774	Identifier	nNewLine
>775	Identifier	iBufOffset
>776	Identifier	iBufOffset
>777	IdentifierDeclType	int
>778	ExpressionStatement	 
>779	AssignmentExpr	pafThisPass = paf3PassLineBuf + ( ( iPassCounter + 2 ) % 3 ) * nXSize * nBufLines
>780	AdditiveExpression	paf3PassLineBuf + ( ( iPassCounter + 2 ) % 3 ) * nXSize * nBufLines
>781	MultiplicativeExpression	( ( iPassCounter + 2 ) % 3 ) * nXSize * nBufLines
>782	MultiplicativeExpression	nXSize * nBufLines
>783	Identifier	nBufLines
>784	Identifier	nXSize
>785	MultiplicativeExpression	( iPassCounter + 2 ) % 3
>786	PrimaryExpression	3
>787	AdditiveExpression	iPassCounter + 2
>788	PrimaryExpression	2
>789	Identifier	iPassCounter
>790	Identifier	paf3PassLineBuf
>791	Identifier	pafThisPass
>792	ExpressionStatement	 
>793	AssignmentExpr	pafLastPass = paf3PassLineBuf + ( ( iPassCounter + 1 ) % 3 ) * nXSize * nBufLines
>794	AdditiveExpression	paf3PassLineBuf + ( ( iPassCounter + 1 ) % 3 ) * nXSize * nBufLines
>795	MultiplicativeExpression	( ( iPassCounter + 1 ) % 3 ) * nXSize * nBufLines
>796	MultiplicativeExpression	nXSize * nBufLines
>797	Identifier	nBufLines
>798	Identifier	nXSize
>799	MultiplicativeExpression	( iPassCounter + 1 ) % 3
>800	PrimaryExpression	3
>801	AdditiveExpression	iPassCounter + 1
>802	PrimaryExpression	1
>803	Identifier	iPassCounter
>804	Identifier	paf3PassLineBuf
>805	Identifier	pafLastPass
>806	ExpressionStatement	 
>807	AssignmentExpr	pafSLastPass = paf3PassLineBuf + ( ( iPassCounter + 0 ) % 3 ) * nXSize * nBufLines
>808	AdditiveExpression	paf3PassLineBuf + ( ( iPassCounter + 0 ) % 3 ) * nXSize * nBufLines
>809	MultiplicativeExpression	( ( iPassCounter + 0 ) % 3 ) * nXSize * nBufLines
>810	MultiplicativeExpression	nXSize * nBufLines
>811	Identifier	nBufLines
>812	Identifier	nXSize
>813	MultiplicativeExpression	( iPassCounter + 0 ) % 3
>814	PrimaryExpression	3
>815	AdditiveExpression	iPassCounter + 0
>816	PrimaryExpression	0
>817	Identifier	iPassCounter
>818	Identifier	paf3PassLineBuf
>819	Identifier	pafSLastPass
>820	ExpressionStatement	 
>821	AssignmentExpr	iPassCounter = ( iPassCounter + 1 ) % 3
>822	MultiplicativeExpression	( iPassCounter + 1 ) % 3
>823	PrimaryExpression	3
>824	AdditiveExpression	iPassCounter + 1
>825	PrimaryExpression	1
>826	Identifier	iPassCounter
>827	Identifier	iPassCounter
>828	IncDecOp	 
>829	IncDec	++
>830	Identifier	nNewLine
>831	Condition	 
>832	AndExpression	eErr == CE_None && nNewLine < nYSize + nIterations
>833	RelationalExpression	nNewLine < nYSize + nIterations
>834	AdditiveExpression	nYSize + nIterations
>835	Identifier	nIterations
>836	Identifier	nYSize
>837	Identifier	nNewLine
>838	EqualityExpression	eErr == CE_None
>839	Identifier	CE_None
>840	Identifier	eErr
>841	ForInit	 
>842	AssignmentExpr	nNewLine = 0
>843	PrimaryExpression	0
>844	Identifier	nNewLine
>845	IfStatement	if ( pabyTMaskBuf == NULL || pabyFMaskBuf == NULL || paf3PassLineBuf == NULL )
>846	CompoundStatement	 
>847	GotoStatement	 
>848	Identifier	end
>849	ExpressionStatement	 
>850	AssignmentExpr	eErr = CE_Failure
>851	Identifier	CE_Failure
>852	Identifier	eErr
>853	ExpressionStatement	 
>854	CallExpression	CPLError ( CE_Failure , CPLE_OutOfMemory , \"Could not allocate enough memory for temporary buffers\" )
>855	ArgumentList	CE_Failure
>856	Argument	\"Could not allocate enough memory for temporary buffers\"
>857	PrimaryExpression	\"Could not allocate enough memory for temporary buffers\"
>858	Argument	CPLE_OutOfMemory
>859	Identifier	CPLE_OutOfMemory
>860	Argument	CE_Failure
>861	Identifier	CE_Failure
>862	Callee	CPLError
>863	Identifier	CPLError
>864	Condition	 
>865	OrExpression	pabyTMaskBuf == NULL || pabyFMaskBuf == NULL || paf3PassLineBuf == NULL
>866	OrExpression	pabyFMaskBuf == NULL || paf3PassLineBuf == NULL
>867	EqualityExpression	paf3PassLineBuf == NULL
>868	Identifier	NULL
>869	Identifier	paf3PassLineBuf
>870	EqualityExpression	pabyFMaskBuf == NULL
>871	Identifier	NULL
>872	Identifier	pabyFMaskBuf
>873	EqualityExpression	pabyTMaskBuf == NULL
>874	Identifier	NULL
>875	Identifier	pabyTMaskBuf
>876	ExpressionStatement	 
>877	AssignmentExpr	paf3PassLineBuf = ( float * ) VSIMalloc3 ( nXSize , nBufLines , 3 * sizeof ( float ) )
>878	CastExpression	( float * ) VSIMalloc3 ( nXSize , nBufLines , 3 * sizeof ( float ) )
>879	CallExpression	VSIMalloc3 ( nXSize , nBufLines , 3 * sizeof ( float ) )
>880	ArgumentList	nXSize
>881	Argument	3 * sizeof ( float )
>882	MultiplicativeExpression	3 * sizeof ( float )
>883	SizeofExpr	sizeof ( float )
>884	SizeofOperand	float
>885	Sizeof	sizeof
>886	PrimaryExpression	3
>887	Argument	nBufLines
>888	Identifier	nBufLines
>889	Argument	nXSize
>890	Identifier	nXSize
>891	Callee	VSIMalloc3
>892	Identifier	VSIMalloc3
>893	CastTarget	float *
>894	Identifier	paf3PassLineBuf
>895	ExpressionStatement	 
>896	AssignmentExpr	pabyFMaskBuf = ( GByte * ) VSIMalloc2 ( nXSize , nBufLines )
>897	CastExpression	( GByte * ) VSIMalloc2 ( nXSize , nBufLines )
>898	CallExpression	VSIMalloc2 ( nXSize , nBufLines )
>899	ArgumentList	nXSize
>900	Argument	nBufLines
>901	Identifier	nBufLines
>902	Argument	nXSize
>903	Identifier	nXSize
>904	Callee	VSIMalloc2
>905	Identifier	VSIMalloc2
>906	CastTarget	GByte *
>907	Identifier	pabyFMaskBuf
>908	ExpressionStatement	 
>909	AssignmentExpr	pabyTMaskBuf = ( GByte * ) VSIMalloc2 ( nXSize , nBufLines )
>910	CastExpression	( GByte * ) VSIMalloc2 ( nXSize , nBufLines )
>911	CallExpression	VSIMalloc2 ( nXSize , nBufLines )
>912	ArgumentList	nXSize
>913	Argument	nBufLines
>914	Identifier	nBufLines
>915	Argument	nXSize
>916	Identifier	nXSize
>917	Callee	VSIMalloc2
>918	Identifier	VSIMalloc2
>919	CastTarget	GByte *
>920	Identifier	pabyTMaskBuf
>921	IfStatement	if ( ! pfnProgress ( 0.0 , \"Smoothing Filter...\" , pProgressArg ) )
>922	CompoundStatement	 
>923	ReturnStatement	 
>924	Identifier	CE_Failure
>925	ExpressionStatement	 
>926	CallExpression	CPLError ( CE_Failure , CPLE_UserInterrupt , \"User terminated\" )
>927	ArgumentList	CE_Failure
>928	Argument	\"User terminated\"
>929	PrimaryExpression	\"User terminated\"
>930	Argument	CPLE_UserInterrupt
>931	Identifier	CPLE_UserInterrupt
>932	Argument	CE_Failure
>933	Identifier	CE_Failure
>934	Callee	CPLError
>935	Identifier	CPLError
>936	Condition	 
>937	UnaryOp	! pfnProgress ( 0.0 , \"Smoothing Filter...\" , pProgressArg )
>938	CallExpression	pfnProgress ( 0.0 , \"Smoothing Filter...\" , pProgressArg )
>939	ArgumentList	0.0
>940	Argument	pProgressArg
>941	Identifier	pProgressArg
>942	Argument	\"Smoothing Filter...\"
>943	PrimaryExpression	\"Smoothing Filter...\"
>944	Argument	0.0
>945	PrimaryExpression	0.0
>946	Callee	pfnProgress
>947	Identifier	pfnProgress
>948	UnaryOperator	!
>949	IdentifierDeclStatement	 
>950	IdentifierDecl	eErr = CE_None
>951	AssignmentExpr	eErr = CE_None
>952	Identifier	CE_None
>953	Identifier	CE_None
>954	Identifier	eErr
>955	IdentifierDeclType	CPLErr
>956	IdentifierDeclStatement	 
>957	IdentifierDecl	nYSize = GDALGetRasterBandYSize ( hTargetBand )
>958	AssignmentExpr	nYSize = GDALGetRasterBandYSize ( hTargetBand )
>959	CallExpression	GDALGetRasterBandYSize ( hTargetBand )
>960	ArgumentList	hTargetBand
>961	Argument	hTargetBand
>962	Identifier	hTargetBand
>963	Callee	GDALGetRasterBandYSize
>964	Identifier	GDALGetRasterBandYSize
>965	Identifier	nYSize
>966	Identifier	nYSize
>967	IdentifierDeclType	int
>968	IdentifierDeclStatement	 
>969	IdentifierDecl	nXSize = GDALGetRasterBandXSize ( hTargetBand )
>970	AssignmentExpr	nXSize = GDALGetRasterBandXSize ( hTargetBand )
>971	CallExpression	GDALGetRasterBandXSize ( hTargetBand )
>972	ArgumentList	hTargetBand
>973	Argument	hTargetBand
>974	Identifier	hTargetBand
>975	Callee	GDALGetRasterBandXSize
>976	Identifier	GDALGetRasterBandXSize
>977	Identifier	nXSize
>978	Identifier	nXSize
>979	IdentifierDeclType	int
>980	IdentifierDeclStatement	 
>981	IdentifierDecl	nNewLine
>982	Identifier	nNewLine
>983	IdentifierDeclType	int
>984	IdentifierDeclStatement	 
>985	IdentifierDecl	iPassCounter = 0
>986	AssignmentExpr	iPassCounter = 0
>987	PrimaryExpression	0
>988	Identifier	iPassCounter
>989	Identifier	iPassCounter
>990	IdentifierDeclType	int
>991	IdentifierDeclStatement	 
>992	IdentifierDecl	nBufLines = nIterations + 2
>993	AssignmentExpr	nBufLines = nIterations + 2
>994	AdditiveExpression	nIterations + 2
>995	PrimaryExpression	2
>996	Identifier	nIterations
>997	Identifier	nBufLines
>998	Identifier	nBufLines
>999	IdentifierDeclType	int
>1000	IdentifierDeclStatement	 
>1001	IdentifierDecl	* pafSLastPass
>1002	Identifier	pafSLastPass
>1003	IdentifierDeclType	float *
>1004	IdentifierDecl	* pafLastPass
>1005	Identifier	pafLastPass
>1006	IdentifierDeclType	float *
>1007	IdentifierDecl	* pafThisPass
>1008	Identifier	pafThisPass
>1009	IdentifierDeclType	float *
>1010	IdentifierDeclStatement	 
>1011	IdentifierDecl	* pabyFMaskBuf
>1012	Identifier	pabyFMaskBuf
>1013	IdentifierDeclType	GByte *
>1014	IdentifierDeclStatement	 
>1015	IdentifierDecl	* pabyTMaskBuf
>1016	Identifier	pabyTMaskBuf
>1017	IdentifierDeclType	GByte *
>1018	IdentifierDeclStatement	 
>1019	IdentifierDecl	* paf3PassLineBuf
>1020	Identifier	paf3PassLineBuf
>1021	IdentifierDeclType	float *
>1065	FunctionDef	GDALFillNodata (GDALRasterBandH hTargetBand , GDALRasterBandH hMaskBand , double dfMaxSearchDist , int bDeprecatedOption , \
>1066	ParameterList	GDALRasterBandH hTargetBand , GDALRasterBandH hMaskBand , double dfMaxSearchDist , int bDeprecatedOption , int nSmoothingIterations , \
>1067	Parameter	 
>1068	Identifier	pProgressArg
>1069	ParameterType	void *
>1070	Parameter	 
>1071	Identifier	pfnProgress
>1072	ParameterType	GDALProgressFunc
>1073	Parameter	 
>1074	Identifier	papszOptions
>1075	ParameterType	char * *
>1076	Parameter	 
>1077	Identifier	nSmoothingIterations
>1078	ParameterType	int
>1079	Parameter	 
>1080	Identifier	bDeprecatedOption
>1081	ParameterType	int
>1082	Parameter	 
>1083	Identifier	dfMaxSearchDist
>1084	ParameterType	double
>1085	Parameter	 
>1086	Identifier	hMaskBand
>1087	ParameterType	GDALRasterBandH
>1088	Parameter	 
>1089	Identifier	hTargetBand
>1090	ParameterType	GDALRasterBandH
>1091	ReturnType	CPLErr CPL_STDCALL
>1092	CompoundStatement	 
>1093	ReturnStatement	 
>1094	Identifier	eErr
>1095	ExpressionStatement	 
>1096	CallExpression	GDALDeleteDataset ( hDriver , osFiltMaskTmpFile )
>1097	ArgumentList	hDriver
>1098	Argument	osFiltMaskTmpFile
>1099	Identifier	osFiltMaskTmpFile
>1100	Argument	hDriver
>1101	Identifier	hDriver
>1102	Callee	GDALDeleteDataset
>1103	Identifier	GDALDeleteDataset
>1104	ExpressionStatement	 
>1105	CallExpression	GDALDeleteDataset ( hDriver , osValTmpFile )
>1106	ArgumentList	hDriver
>1107	Argument	osValTmpFile
>1108	Identifier	osValTmpFile
>1109	Argument	hDriver
>1110	Identifier	hDriver
>1111	Callee	GDALDeleteDataset
>1112	Identifier	GDALDeleteDataset
>1113	ExpressionStatement	 
>1114	CallExpression	GDALDeleteDataset ( hDriver , osYTmpFile )
>1115	ArgumentList	hDriver
>1116	Argument	osYTmpFile
>1117	Identifier	osYTmpFile
>1118	Argument	hDriver
>1119	Identifier	hDriver
>1120	Callee	GDALDeleteDataset
>1121	Identifier	GDALDeleteDataset
>1122	ExpressionStatement	 
>1123	CallExpression	GDALClose ( hFiltMaskDS )
>1124	ArgumentList	hFiltMaskDS
>1125	Argument	hFiltMaskDS
>1126	Identifier	hFiltMaskDS
>1127	Callee	GDALClose
>1128	Identifier	GDALClose
>1129	ExpressionStatement	 
>1130	CallExpression	GDALClose ( hValDS )
>1131	ArgumentList	hValDS
>1132	Argument	hValDS
>1133	Identifier	hValDS
>1134	Callee	GDALClose
>1135	Identifier	GDALClose
>1136	ExpressionStatement	 
>1137	CallExpression	GDALClose ( hYDS )
>1138	ArgumentList	hYDS
>1139	Argument	hYDS
>1140	Identifier	hYDS
>1141	Callee	GDALClose
>1142	Identifier	GDALClose
>1143	ExpressionStatement	 
>1144	CallExpression	CPLFree ( pabyFiltMask )
>1145	ArgumentList	pabyFiltMask
>1146	Argument	pabyFiltMask
>1147	Identifier	pabyFiltMask
>1148	Callee	CPLFree
>1149	Identifier	CPLFree
>1150	ExpressionStatement	 
>1151	CallExpression	CPLFree ( pabyMask )
>1152	ArgumentList	pabyMask
>1153	Argument	pabyMask
>1154	Identifier	pabyMask
>1155	Callee	CPLFree
>1156	Identifier	CPLFree
>1157	ExpressionStatement	 
>1158	CallExpression	CPLFree ( pafScanline )
>1159	ArgumentList	pafScanline
>1160	Argument	pafScanline
>1161	Identifier	pafScanline
>1162	Callee	CPLFree
>1163	Identifier	CPLFree
>1164	ExpressionStatement	 
>1165	CallExpression	CPLFree ( pafTopDownValue )
>1166	ArgumentList	pafTopDownValue
>1167	Argument	pafTopDownValue
>1168	Identifier	pafTopDownValue
>1169	Callee	CPLFree
>1170	Identifier	CPLFree
>1171	ExpressionStatement	 
>1172	CallExpression	CPLFree ( pafThisValue )
>1173	ArgumentList	pafThisValue
>1174	Argument	pafThisValue
>1175	Identifier	pafThisValue
>1176	Callee	CPLFree
>1177	Identifier	CPLFree
>1178	ExpressionStatement	 
>1179	CallExpression	CPLFree ( pafLastValue )
>1180	ArgumentList	pafLastValue
>1181	Argument	pafLastValue
>1182	Identifier	pafLastValue
>1183	Callee	CPLFree
>1184	Identifier	CPLFree
>1185	ExpressionStatement	 
>1186	CallExpression	CPLFree ( panTopDownY )
>1187	ArgumentList	panTopDownY
>1188	Argument	panTopDownY
>1189	Identifier	panTopDownY
>1190	Callee	CPLFree
>1191	Identifier	CPLFree
>1192	ExpressionStatement	 
>1193	CallExpression	CPLFree ( panThisY )
>1194	ArgumentList	panThisY
>1195	Argument	panThisY
>1196	Identifier	panThisY
>1197	Callee	CPLFree
>1198	Identifier	CPLFree
>1199	ExpressionStatement	 
>1200	CallExpression	CPLFree ( panLastY )
>1201	ArgumentList	panLastY
>1202	Argument	panLastY
>1203	Identifier	panLastY
>1204	Callee	CPLFree
>1205	Identifier	CPLFree
>1206	Label	 
>1207	Identifier	end
>1208	IfStatement	if ( eErr == CE_None && nSmoothingIterations > 0 )
>1209	CompoundStatement	 
>1210	ExpressionStatement	 
>1211	CallExpression	GDALDestroyScaledProgress ( pScaledProgress )
>1212	ArgumentList	pScaledProgress
>1213	Argument	pScaledProgress
>1214	Identifier	pScaledProgress
>1215	Callee	GDALDestroyScaledProgress
>1216	Identifier	GDALDestroyScaledProgress
>1217	ExpressionStatement	 
>1218	AssignmentExpr	eErr = GDALMultiFilter ( hTargetBand , hMaskBand , hFiltMaskBand , nSmoothingIterations , GDALScaledProgress , \
>1219	CallExpression	GDALMultiFilter ( hTargetBand , hMaskBand , hFiltMaskBand , nSmoothingIterations , GDALScaledProgress , pScaledProgress )
>1220	ArgumentList	hTargetBand
>1221	Argument	pScaledProgress
>1222	Identifier	pScaledProgress
>1223	Argument	GDALScaledProgress
>1224	Identifier	GDALScaledProgress
>1225	Argument	nSmoothingIterations
>1226	Identifier	nSmoothingIterations
>1227	Argument	hFiltMaskBand
>1228	Identifier	hFiltMaskBand
>1229	Argument	hMaskBand
>1230	Identifier	hMaskBand
>1231	Argument	hTargetBand
>1232	Identifier	hTargetBand
>1233	Callee	GDALMultiFilter
>1234	Identifier	GDALMultiFilter
>1235	Identifier	eErr
>1236	ExpressionStatement	 
>1237	AssignmentExpr	pScaledProgress = GDALCreateScaledProgress ( dfProgressRatio , 1.0 , pfnProgress , NULL )
>1238	CallExpression	GDALCreateScaledProgress ( dfProgressRatio , 1.0 , pfnProgress , NULL )
>1239	ArgumentList	dfProgressRatio
>1240	Argument	NULL
>1241	Identifier	NULL
>1242	Argument	pfnProgress
>1243	Identifier	pfnProgress
>1244	Argument	1.0
>1245	PrimaryExpression	1.0
>1246	Argument	dfProgressRatio
>1247	Identifier	dfProgressRatio
>1248	Callee	GDALCreateScaledProgress
>1249	Identifier	GDALCreateScaledProgress
>1250	Identifier	pScaledProgress
>1251	IdentifierDeclStatement	 
>1252	IdentifierDecl	* pScaledProgress
>1253	Identifier	pScaledProgress
>1254	IdentifierDeclType	void *
>1255	ExpressionStatement	 
>1256	CallExpression	GDALFlushRasterCache ( hMaskBand )
>1257	ArgumentList	hMaskBand
>1258	Argument	hMaskBand
>1259	Identifier	hMaskBand
>1260	Callee	GDALFlushRasterCache
>1261	Identifier	GDALFlushRasterCache
>1262	Condition	 
>1263	AndExpression	eErr == CE_None && nSmoothingIterations > 0
>1264	RelationalExpression	nSmoothingIterations > 0
>1265	PrimaryExpression	0
>1266	Identifier	nSmoothingIterations
>1267	EqualityExpression	eErr == CE_None
>1268	Identifier	CE_None
>1269	Identifier	eErr
>1270	ForStatement	for ( iY = nYSize - 1 ; iY >= 0 && eErr == CE_None ; iY -- )
>1271	CompoundStatement	 
>1272	IfStatement	if ( eErr == CE_None && ! pfnProgress ( dfProgressRatio * ( 0.5 + 0.5 * ( nYSize - iY ) / ( double ) nYSize ) , \"\
>1273	CompoundStatement	 
>1274	ExpressionStatement	 
>1275	AssignmentExpr	eErr = CE_Failure
>1276	Identifier	CE_Failure
>1277	Identifier	eErr
>1278	ExpressionStatement	 
>1279	CallExpression	CPLError ( CE_Failure , CPLE_UserInterrupt , \"User terminated\" )
>1280	ArgumentList	CE_Failure
>1281	Argument	\"User terminated\"
>1282	PrimaryExpression	\"User terminated\"
>1283	Argument	CPLE_UserInterrupt
>1284	Identifier	CPLE_UserInterrupt
>1285	Argument	CE_Failure
>1286	Identifier	CE_Failure
>1287	Callee	CPLError
>1288	Identifier	CPLError
>1289	Condition	 
>1290	AndExpression	eErr == CE_None && ! pfnProgress ( dfProgressRatio * ( 0.5 + 0.5 * ( nYSize - iY ) / ( double ) nYSize ) , \"\
>1291	UnaryOp	! pfnProgress ( dfProgressRatio * ( 0.5 + 0.5 * ( nYSize - iY ) / ( double ) nYSize ) , \"Filling...\" , pProgressArg )
>1292	CallExpression	pfnProgress ( dfProgressRatio * ( 0.5 + 0.5 * ( nYSize - iY ) / ( double ) nYSize ) , \"Filling...\" , pProgressArg )
>1293	ArgumentList	dfProgressRatio * ( 0.5 + 0.5 * ( nYSize - iY ) / ( double ) nYSize )
>1294	Argument	pProgressArg
>1295	Identifier	pProgressArg
>1296	Argument	\"Filling...\"
>1297	PrimaryExpression	\"Filling...\"
>1298	Argument	dfProgressRatio * ( 0.5 + 0.5 * ( nYSize - iY ) / ( double ) nYSize )
>1299	MultiplicativeExpression	dfProgressRatio * ( 0.5 + 0.5 * ( nYSize - iY ) / ( double ) nYSize )
>1300	AdditiveExpression	0.5 + 0.5 * ( nYSize - iY ) / ( double ) nYSize
>1301	MultiplicativeExpression	0.5 * ( nYSize - iY ) / ( double ) nYSize
>1302	MultiplicativeExpression	( nYSize - iY ) / ( double ) nYSize
>1303	CastExpression	( double ) nYSize
>1304	Identifier	nYSize
>1305	CastTarget	double
>1306	AdditiveExpression	nYSize - iY
>1307	Identifier	iY
>1308	Identifier	nYSize
>1309	PrimaryExpression	0.5
>1310	PrimaryExpression	0.5
>1311	Identifier	dfProgressRatio
>1312	Callee	pfnProgress
>1313	Identifier	pfnProgress
>1314	UnaryOperator	!
>1315	EqualityExpression	eErr == CE_None
>1316	Identifier	CE_None
>1317	Identifier	eErr
>1318	CompoundStatement	 
>1319	ExpressionStatement	 
>1320	AssignmentExpr	panLastY = panTmp
>1321	Identifier	panTmp
>1322	Identifier	panLastY
>1323	ExpressionStatement	 
>1324	AssignmentExpr	panThisY = panLastY
>1325	Identifier	panLastY
>1326	Identifier	panThisY
>1327	IdentifierDeclStatement	 
>1328	IdentifierDecl	* panTmp = panThisY
>1329	AssignmentExpr	* panTmp = panThisY
>1330	Identifier	panThisY
>1331	Identifier	panThisY
>1332	Identifier	panTmp
>1333	IdentifierDeclType	GUInt32 *
>1334	ExpressionStatement	 
>1335	AssignmentExpr	pafLastValue = pafTmp
>1336	Identifier	pafTmp
>1337	Identifier	pafLastValue
>1338	ExpressionStatement	 
>1339	AssignmentExpr	pafThisValue = pafLastValue
>1340	Identifier	pafLastValue
>1341	Identifier	pafThisValue
>1342	IdentifierDeclStatement	 
>1343	IdentifierDecl	* pafTmp = pafThisValue
>1344	AssignmentExpr	* pafTmp = pafThisValue
>1345	Identifier	pafThisValue
>1346	Identifier	pafThisValue
>1347	Identifier	pafTmp
>1348	IdentifierDeclType	float *
>1349	IfStatement	if ( eErr != CE_None )
>1350	BreakStatement	 
>1351	Condition	 
>1352	EqualityExpression	eErr != CE_None
>1353	Identifier	CE_None
>1354	Identifier	eErr
>1355	ExpressionStatement	 
>1356	AssignmentExpr	eErr = GDALRasterIO ( hFiltMaskBand , GF_Write , 0 , iY , nXSize , 1 , pabyFiltMask , nXSize , 1 , GDT_\
>1357	CallExpression	GDALRasterIO ( hFiltMaskBand , GF_Write , 0 , iY , nXSize , 1 , pabyFiltMask , nXSize , 1 , GDT_Byte , 0 , 0 )
>1358	ArgumentList	hFiltMaskBand
>1359	Argument	0
>1360	PrimaryExpression	0
>1361	Argument	0
>1362	PrimaryExpression	0
>1363	Argument	GDT_Byte
>1364	Identifier	GDT_Byte
>1365	Argument	1
>1366	PrimaryExpression	1
>1367	Argument	nXSize
>1368	Identifier	nXSize
>1369	Argument	pabyFiltMask
>1370	Identifier	pabyFiltMask
>1371	Argument	1
>1372	PrimaryExpression	1
>1373	Argument	nXSize
>1374	Identifier	nXSize
>1375	Argument	iY
>1376	Identifier	iY
>1377	Argument	0
>1378	PrimaryExpression	0
>1379	Argument	GF_Write
>1380	Identifier	GF_Write
>1381	Argument	hFiltMaskBand
>1382	Identifier	hFiltMaskBand
>1383	Callee	GDALRasterIO
>1384	Identifier	GDALRasterIO
>1385	Identifier	eErr
>1386	IfStatement	if ( eErr != CE_None )
>1387	BreakStatement	 
>1388	Condition	 
>1389	EqualityExpression	eErr != CE_None
>1390	Identifier	CE_None
>1391	Identifier	eErr
>1392	ExpressionStatement	 
>1393	AssignmentExpr	eErr = GDALRasterIO ( hTargetBand , GF_Write , 0 , iY , nXSize , 1 , pafScanline , nXSize , 1 , GDT_Float32 , \
>1394	CallExpression	GDALRasterIO ( hTargetBand , GF_Write , 0 , iY , nXSize , 1 , pafScanline , nXSize , 1 , GDT_Float32 , 0 , 0 )
>1395	ArgumentList	hTargetBand
>1396	Argument	0
>1397	PrimaryExpression	0
>1398	Argument	0
>1399	PrimaryExpression	0
>1400	Argument	GDT_Float32
>1401	Identifier	GDT_Float32
>1402	Argument	1
>1403	PrimaryExpression	1
>1404	Argument	nXSize
>1405	Identifier	nXSize
>1406	Argument	pafScanline
>1407	Identifier	pafScanline
>1408	Argument	1
>1409	PrimaryExpression	1
>1410	Argument	nXSize
>1411	Identifier	nXSize
>1412	Argument	iY
>1413	Identifier	iY
>1414	Argument	0
>1415	PrimaryExpression	0
>1416	Argument	GF_Write
>1417	Identifier	GF_Write
>1418	Argument	hTargetBand
>1419	Identifier	hTargetBand
>1420	Callee	GDALRasterIO
>1421	Identifier	GDALRasterIO
>1422	Identifier	eErr
>1423	ForStatement	for ( iX = 0 ; iX < nXSize ; iX ++ )
>1424	CompoundStatement	 
>1425	IfStatement	if ( dfWeightSum > 0.0 )
>1426	CompoundStatement	 
>1427	ExpressionStatement	 
>1428	AssignmentExpr	pafScanline [ iX ] = ( float ) ( dfValueSum / dfWeightSum )
>1429	CastExpression	( float ) ( dfValueSum / dfWeightSum )
>1430	MultiplicativeExpression	dfValueSum / dfWeightSum
>1431	Identifier	dfWeightSum
>1432	Identifier	dfValueSum
>1433	CastTarget	float
>1434	ArrayIndexing	pafScanline [ iX ]
>1435	Identifier	iX
>1436	Identifier	pafScanline
>1437	ExpressionStatement	 
>1438	AssignmentExpr	pabyFiltMask [ iX ] = 255
>1439	PrimaryExpression	255
>1440	ArrayIndexing	pabyFiltMask [ iX ]
>1441	Identifier	iX
>1442	Identifier	pabyFiltMask
>1443	ExpressionStatement	 
>1444	AssignmentExpr	pabyMask [ iX ] = 255
>1445	PrimaryExpression	255
>1446	ArrayIndexing	pabyMask [ iX ]
>1447	Identifier	iX
>1448	Identifier	pabyMask
>1449	Condition	 
>1450	RelationalExpression	dfWeightSum > 0.0
>1451	PrimaryExpression	0.0
>1452	Identifier	dfWeightSum
>1453	ForStatement	for ( iQuad = 0 ; iQuad < 4 ; iQuad ++ )
>1454	CompoundStatement	 
>1455	IfStatement	if ( adfQuadDist [ iQuad ] <= dfMaxSearchDist )
>1456	CompoundStatement	 
>1457	ExpressionStatement	 
>1458	AssignmentExpr	dfValueSum += adfQuadValue [ iQuad ] * dfWeight
>1459	MultiplicativeExpression	adfQuadValue [ iQuad ] * dfWeight
>1460	Identifier	dfWeight
>1461	ArrayIndexing	adfQuadValue [ iQuad ]
>1462	Identifier	iQuad
>1463	Identifier	adfQuadValue
>1464	Identifier	dfValueSum
>1465	ExpressionStatement	 
>1466	AssignmentExpr	dfWeightSum += dfWeight
>1467	Identifier	dfWeight
>1468	Identifier	dfWeightSum
>1469	IdentifierDeclStatement	 
>1470	IdentifierDecl	dfWeight = 1.0 / adfQuadDist [ iQuad ]
>1471	AssignmentExpr	dfWeight = 1.0 / adfQuadDist [ iQuad ]
>1472	MultiplicativeExpression	1.0 / adfQuadDist [ iQuad ]
>1473	ArrayIndexing	adfQuadDist [ iQuad ]
>1474	Identifier	iQuad
>1475	Identifier	adfQuadDist
>1476	PrimaryExpression	1.0
>1477	Identifier	dfWeight
>1478	Identifier	dfWeight
>1479	IdentifierDeclType	double
>1480	Condition	 
>1481	RelationalExpression	adfQuadDist [ iQuad ] <= dfMaxSearchDist
>1482	Identifier	dfMaxSearchDist
>1483	ArrayIndexing	adfQuadDist [ iQuad ]
>1484	Identifier	iQuad
>1485	Identifier	adfQuadDist
>1486	IncDecOp	 
>1487	IncDec	++
>1488	Identifier	iQuad
>1489	Condition	 
>1490	RelationalExpression	iQuad < 4
>1491	PrimaryExpression	4
>1492	Identifier	iQuad
>1493	ForInit	 
>1494	AssignmentExpr	iQuad = 0
>1495	PrimaryExpression	0
>1496	Identifier	iQuad
>1497	IdentifierDeclStatement	 
>1498	IdentifierDecl	dfValueSum = 0.0
>1499	AssignmentExpr	dfValueSum = 0.0
>1500	PrimaryExpression	0.0
>1501	Identifier	dfValueSum
>1502	Identifier	dfValueSum
>1503	IdentifierDeclType	double
>1504	IdentifierDeclStatement	 
>1505	IdentifierDecl	dfWeightSum = 0.0
>1506	AssignmentExpr	dfWeightSum = 0.0
>1507	PrimaryExpression	0.0
>1508	Identifier	dfWeightSum
>1509	Identifier	dfWeightSum
>1510	IdentifierDeclType	double
>1511	ForStatement	for ( iStep = 0 ; iStep < nThisMaxSearchDist ; iStep ++ )
>1512	CompoundStatement	 
>1513	IfStatement	if ( ( iStep & 0x3 ) == 0 )
>1514	ExpressionStatement	 
>1515	AssignmentExpr	nThisMaxSearchDist = ( int ) floor ( MAX ( MAX ( adfQuadDist [ 0 ] , adfQuadDist [ 1 ] ) , MAX ( adfQuadDist [ \
>1516	CastExpression	( int ) floor ( MAX ( MAX ( adfQuadDist [ 0 ] , adfQuadDist [ 1 ] ) , MAX ( adfQuadDist [ 2 ] , adfQuadDist [ 3 ] ) ) )
>1517	CallExpression	floor ( MAX ( MAX ( adfQuadDist [ 0 ] , adfQuadDist [ 1 ] ) , MAX ( adfQuadDist [ 2 ] , adfQuadDist [ 3 ] ) ) )
>1518	ArgumentList	MAX ( MAX ( adfQuadDist [ 0 ] , adfQuadDist [ 1 ] ) , MAX ( adfQuadDist [ 2 ] , adfQuadDist [ 3 ] ) )
>1519	Argument	MAX ( MAX ( adfQuadDist [ 0 ] , adfQuadDist [ 1 ] ) , MAX ( adfQuadDist [ 2 ] , adfQuadDist [ 3 ] ) )
>1520	CallExpression	MAX ( MAX ( adfQuadDist [ 0 ] , adfQuadDist [ 1 ] ) , MAX ( adfQuadDist [ 2 ] , adfQuadDist [ 3 ] ) )
>1521	ArgumentList	MAX ( adfQuadDist [ 0 ] , adfQuadDist [ 1 ] )
>1522	Argument	MAX ( adfQuadDist [ 2 ] , adfQuadDist [ 3 ] )
>1523	CallExpression	MAX ( adfQuadDist [ 2 ] , adfQuadDist [ 3 ] )
>1524	ArgumentList	adfQuadDist [ 2 ]
>1525	Argument	adfQuadDist [ 3 ]
>1526	ArrayIndexing	adfQuadDist [ 3 ]
>1527	PrimaryExpression	3
>1528	Identifier	adfQuadDist
>1529	Argument	adfQuadDist [ 2 ]
>1530	ArrayIndexing	adfQuadDist [ 2 ]
>1531	PrimaryExpression	2
>1532	Identifier	adfQuadDist
>1533	Callee	MAX
>1534	Identifier	MAX
>1535	Argument	MAX ( adfQuadDist [ 0 ] , adfQuadDist [ 1 ] )
>1536	CallExpression	MAX ( adfQuadDist [ 0 ] , adfQuadDist [ 1 ] )
>1537	ArgumentList	adfQuadDist [ 0 ]
>1538	Argument	adfQuadDist [ 1 ]
>1539	ArrayIndexing	adfQuadDist [ 1 ]
>1540	PrimaryExpression	1
>1541	Identifier	adfQuadDist
>1542	Argument	adfQuadDist [ 0 ]
>1543	ArrayIndexing	adfQuadDist [ 0 ]
>1544	PrimaryExpression	0
>1545	Identifier	adfQuadDist
>1546	Callee	MAX
>1547	Identifier	MAX
>1548	Callee	MAX
>1549	Identifier	MAX
>1550	Callee	floor
>1551	Identifier	floor
>1552	CastTarget	int
>1553	Identifier	nThisMaxSearchDist
>1554	Condition	 
>1555	EqualityExpression	( iStep & 0x3 ) == 0
>1556	PrimaryExpression	0
>1557	BitAndExpression	iStep & 0x3
>1558	PrimaryExpression	0x3
>1559	Identifier	iStep
>1560	ExpressionStatement	 
>1561	CallExpression	QUAD_CHECK ( adfQuadDist [ 3 ] , adfQuadValue [ 3 ] , iRightX , panLastY [ iRightX ] , iX , iY , pafLastValue [ \
>1562	ArgumentList	adfQuadDist [ 3 ]
>1563	Argument	pafLastValue [ iRightX ]
>1564	ArrayIndexing	pafLastValue [ iRightX ]
>1565	Identifier	iRightX
>1566	Identifier	pafLastValue
>1567	Argument	iY
>1568	Identifier	iY
>1569	Argument	iX
>1570	Identifier	iX
>1571	Argument	panLastY [ iRightX ]
>1572	ArrayIndexing	panLastY [ iRightX ]
>1573	Identifier	iRightX
>1574	Identifier	panLastY
>1575	Argument	iRightX
>1576	Identifier	iRightX
>1577	Argument	adfQuadValue [ 3 ]
>1578	ArrayIndexing	adfQuadValue [ 3 ]
>1579	PrimaryExpression	3
>1580	Identifier	adfQuadValue
>1581	Argument	adfQuadDist [ 3 ]
>1582	ArrayIndexing	adfQuadDist [ 3 ]
>1583	PrimaryExpression	3
>1584	Identifier	adfQuadDist
>1585	Callee	QUAD_CHECK
>1586	Identifier	QUAD_CHECK
>1587	ExpressionStatement	 
>1588	CallExpression	QUAD_CHECK ( adfQuadDist [ 2 ] , adfQuadValue [ 2 ] , iRightX , panTopDownY [ iRightX ] , iX , iY , pafTopDownValue [ \
>1589	ArgumentList	adfQuadDist [ 2 ]
>1590	Argument	pafTopDownValue [ iRightX ]
>1591	ArrayIndexing	pafTopDownValue [ iRightX ]
>1592	Identifier	iRightX
>1593	Identifier	pafTopDownValue
>1594	Argument	iY
>1595	Identifier	iY
>1596	Argument	iX
>1597	Identifier	iX
>1598	Argument	panTopDownY [ iRightX ]
>1599	ArrayIndexing	panTopDownY [ iRightX ]
>1600	Identifier	iRightX
>1601	Identifier	panTopDownY
>1602	Argument	iRightX
>1603	Identifier	iRightX
>1604	Argument	adfQuadValue [ 2 ]
>1605	ArrayIndexing	adfQuadValue [ 2 ]
>1606	PrimaryExpression	2
>1607	Identifier	adfQuadValue
>1608	Argument	adfQuadDist [ 2 ]
>1609	ArrayIndexing	adfQuadDist [ 2 ]
>1610	PrimaryExpression	2
>1611	Identifier	adfQuadDist
>1612	Callee	QUAD_CHECK
>1613	Identifier	QUAD_CHECK
>1614	IfStatement	if ( iStep == 0 )
>1615	ContinueStatement	 
>1616	Condition	 
>1617	EqualityExpression	iStep == 0
>1618	PrimaryExpression	0
>1619	Identifier	iStep
>1620	ExpressionStatement	 
>1621	CallExpression	QUAD_CHECK ( adfQuadDist [ 1 ] , adfQuadValue [ 1 ] , iLeftX , panLastY [ iLeftX ] , iX , iY , pafLastValue [ iLeftX ] )
>1622	ArgumentList	adfQuadDist [ 1 ]
>1623	Argument	pafLastValue [ iLeftX ]
>1624	ArrayIndexing	pafLastValue [ iLeftX ]
>1625	Identifier	iLeftX
>1626	Identifier	pafLastValue
>1627	Argument	iY
>1628	Identifier	iY
>1629	Argument	iX
>1630	Identifier	iX
>1631	Argument	panLastY [ iLeftX ]
>1632	ArrayIndexing	panLastY [ iLeftX ]
>1633	Identifier	iLeftX
>1634	Identifier	panLastY
>1635	Argument	iLeftX
>1636	Identifier	iLeftX
>1637	Argument	adfQuadValue [ 1 ]
>1638	ArrayIndexing	adfQuadValue [ 1 ]
>1639	PrimaryExpression	1
>1640	Identifier	adfQuadValue
>1641	Argument	adfQuadDist [ 1 ]
>1642	ArrayIndexing	adfQuadDist [ 1 ]
>1643	PrimaryExpression	1
>1644	Identifier	adfQuadDist
>1645	Callee	QUAD_CHECK
>1646	Identifier	QUAD_CHECK
>1647	ExpressionStatement	 
>1648	CallExpression	QUAD_CHECK ( adfQuadDist [ 0 ] , adfQuadValue [ 0 ] , iLeftX , panTopDownY [ iLeftX ] , iX , iY , pafTopDownValue [ \
>1649	ArgumentList	adfQuadDist [ 0 ]
>1650	Argument	pafTopDownValue [ iLeftX ]
>1651	ArrayIndexing	pafTopDownValue [ iLeftX ]
>1652	Identifier	iLeftX
>1653	Identifier	pafTopDownValue
>1654	Argument	iY
>1655	Identifier	iY
>1656	Argument	iX
>1657	Identifier	iX
>1658	Argument	panTopDownY [ iLeftX ]
>1659	ArrayIndexing	panTopDownY [ iLeftX ]
>1660	Identifier	iLeftX
>1661	Identifier	panTopDownY
>1662	Argument	iLeftX
>1663	Identifier	iLeftX
>1664	Argument	adfQuadValue [ 0 ]
>1665	ArrayIndexing	adfQuadValue [ 0 ]
>1666	PrimaryExpression	0
>1667	Identifier	adfQuadValue
>1668	Argument	adfQuadDist [ 0 ]
>1669	ArrayIndexing	adfQuadDist [ 0 ]
>1670	PrimaryExpression	0
>1671	Identifier	adfQuadDist
>1672	Callee	QUAD_CHECK
>1673	Identifier	QUAD_CHECK
>1674	IdentifierDeclStatement	 
>1675	IdentifierDecl	iRightX = MIN ( nXSize - 1 , iX + iStep )
>1676	AssignmentExpr	iRightX = MIN ( nXSize - 1 , iX + iStep )
>1677	CallExpression	MIN ( nXSize - 1 , iX + iStep )
>1678	ArgumentList	nXSize - 1
>1679	Argument	iX + iStep
>1680	AdditiveExpression	iX + iStep
>1681	Identifier	iStep
>1682	Identifier	iX
>1683	Argument	nXSize - 1
>1684	AdditiveExpression	nXSize - 1
>1685	PrimaryExpression	1
>1686	Identifier	nXSize
>1687	Callee	MIN
>1688	Identifier	MIN
>1689	Identifier	iRightX
>1690	Identifier	iRightX
>1691	IdentifierDeclType	int
>1692	IdentifierDeclStatement	 
>1693	IdentifierDecl	iLeftX = MAX ( 0 , iX - iStep )
>1694	AssignmentExpr	iLeftX = MAX ( 0 , iX - iStep )
>1695	CallExpression	MAX ( 0 , iX - iStep )
>1696	ArgumentList	0
>1697	Argument	iX - iStep
>1698	AdditiveExpression	iX - iStep
>1699	Identifier	iStep
>1700	Identifier	iX
>1701	Argument	0
>1702	PrimaryExpression	0
>1703	Callee	MAX
>1704	Identifier	MAX
>1705	Identifier	iLeftX
>1706	Identifier	iLeftX
>1707	IdentifierDeclType	int
>1708	IncDecOp	 
>1709	IncDec	++
>1710	Identifier	iStep
>1711	Condition	 
>1712	RelationalExpression	iStep < nThisMaxSearchDist
>1713	Identifier	nThisMaxSearchDist
>1714	Identifier	iStep
>1715	ForInit	 
>1716	AssignmentExpr	iStep = 0
>1717	PrimaryExpression	0
>1718	Identifier	iStep
>1719	ForStatement	for ( iQuad = 0 ; iQuad < 4 ; iQuad ++ )
>1720	ExpressionStatement	 
>1721	AssignmentExpr	adfQuadDist [ iQuad ] = dfMaxSearchDist + 1.0
>1722	AdditiveExpression	dfMaxSearchDist + 1.0
>1723	PrimaryExpression	1.0
>1724	Identifier	dfMaxSearchDist
>1725	ArrayIndexing	adfQuadDist [ iQuad ]
>1726	Identifier	iQuad
>1727	Identifier	adfQuadDist
>1728	IncDecOp	 
>1729	IncDec	++
>1730	Identifier	iQuad
>1731	Condition	 
>1732	RelationalExpression	iQuad < 4
>1733	PrimaryExpression	4
>1734	Identifier	iQuad
>1735	ForInit	 
>1736	AssignmentExpr	iQuad = 0
>1737	PrimaryExpression	0
>1738	Identifier	iQuad
>1739	IdentifierDeclStatement	 
>1740	IdentifierDecl	adfQuadValue [ 4 ]
>1741	PrimaryExpression	4
>1742	Identifier	adfQuadValue
>1743	IdentifierDeclType	double [ 4 ]
>1744	IdentifierDeclStatement	 
>1745	IdentifierDecl	adfQuadDist [ 4 ]
>1746	PrimaryExpression	4
>1747	Identifier	adfQuadDist
>1748	IdentifierDeclType	double [ 4 ]
>1749	IfStatement	if ( pabyMask [ iX ] )
>1750	ContinueStatement	 
>1751	Condition	 
>1752	ArrayIndexing	pabyMask [ iX ]
>1753	Identifier	iX
>1754	Identifier	pabyMask
>1755	IdentifierDeclStatement	 
>1756	IdentifierDecl	nThisMaxSearchDist = nMaxSearchDist
>1757	AssignmentExpr	nThisMaxSearchDist = nMaxSearchDist
>1758	Identifier	nMaxSearchDist
>1759	Identifier	nMaxSearchDist
>1760	Identifier	nThisMaxSearchDist
>1761	IdentifierDeclType	int
>1762	IdentifierDeclStatement	 
>1763	IdentifierDecl	iQuad
>1764	Identifier	iQuad
>1765	IdentifierDeclType	int
>1766	IdentifierDecl	iStep
>1767	Identifier	iStep
>1768	IdentifierDeclType	int
>1769	IncDecOp	 
>1770	IncDec	++
>1771	Identifier	iX
>1772	Condition	 
>1773	RelationalExpression	iX < nXSize
>1774	Identifier	nXSize
>1775	Identifier	iX
>1776	ForInit	 
>1777	AssignmentExpr	iX = 0
>1778	PrimaryExpression	0
>1779	Identifier	iX
>1780	ExpressionStatement	 
>1781	CallExpression	memset ( pabyFiltMask , 0 , nXSize )
>1782	ArgumentList	pabyFiltMask
>1783	Argument	nXSize
>1784	Identifier	nXSize
>1785	Argument	0
>1786	PrimaryExpression	0
>1787	Argument	pabyFiltMask
>1788	Identifier	pabyFiltMask
>1789	Callee	memset
>1790	Identifier	memset
>1791	IfStatement	if ( eErr != CE_None )
>1792	BreakStatement	 
>1793	Condition	 
>1794	EqualityExpression	eErr != CE_None
>1795	Identifier	CE_None
>1796	Identifier	eErr
>1797	ExpressionStatement	 
>1798	AssignmentExpr	eErr = GDALRasterIO ( hValBand , GF_Read , 0 , iY , nXSize , 1 , pafTopDownValue , nXSize , 1 , GDT_Float32 , \
>1799	CallExpression	GDALRasterIO ( hValBand , GF_Read , 0 , iY , nXSize , 1 , pafTopDownValue , nXSize , 1 , GDT_Float32 , 0 , 0 )
>1800	ArgumentList	hValBand
>1801	Argument	0
>1802	PrimaryExpression	0
>1803	Argument	0
>1804	PrimaryExpression	0
>1805	Argument	GDT_Float32
>1806	Identifier	GDT_Float32
>1807	Argument	1
>1808	PrimaryExpression	1
>1809	Argument	nXSize
>1810	Identifier	nXSize
>1811	Argument	pafTopDownValue
>1812	Identifier	pafTopDownValue
>1813	Argument	1
>1814	PrimaryExpression	1
>1815	Argument	nXSize
>1816	Identifier	nXSize
>1817	Argument	iY
>1818	Identifier	iY
>1819	Argument	0
>1820	PrimaryExpression	0
>1821	Argument	GF_Read
>1822	Identifier	GF_Read
>1823	Argument	hValBand
>1824	Identifier	hValBand
>1825	Callee	GDALRasterIO
>1826	Identifier	GDALRasterIO
>1827	Identifier	eErr
>1828	IfStatement	if ( eErr != CE_None )
>1829	BreakStatement	 
>1830	Condition	 
>1831	EqualityExpression	eErr != CE_None
>1832	Identifier	CE_None
>1833	Identifier	eErr
>1834	ExpressionStatement	 
>1835	AssignmentExpr	eErr = GDALRasterIO ( hYBand , GF_Read , 0 , iY , nXSize , 1 , panTopDownY , nXSize , 1 , GDT_UInt32 , \
>1836	CallExpression	GDALRasterIO ( hYBand , GF_Read , 0 , iY , nXSize , 1 , panTopDownY , nXSize , 1 , GDT_UInt32 , 0 , 0 )
>1837	ArgumentList	hYBand
>1838	Argument	0
>1839	PrimaryExpression	0
>1840	Argument	0
>1841	PrimaryExpression	0
>1842	Argument	GDT_UInt32
>1843	Identifier	GDT_UInt32
>1844	Argument	1
>1845	PrimaryExpression	1
>1846	Argument	nXSize
>1847	Identifier	nXSize
>1848	Argument	panTopDownY
>1849	Identifier	panTopDownY
>1850	Argument	1
>1851	PrimaryExpression	1
>1852	Argument	nXSize
>1853	Identifier	nXSize
>1854	Argument	iY
>1855	Identifier	iY
>1856	Argument	0
>1857	PrimaryExpression	0
>1858	Argument	GF_Read
>1859	Identifier	GF_Read
>1860	Argument	hYBand
>1861	Identifier	hYBand
>1862	Callee	GDALRasterIO
>1863	Identifier	GDALRasterIO
>1864	Identifier	eErr
>1865	ForStatement	for ( iX = 0 ; iX < nXSize ; iX ++ )
>1866	CompoundStatement	 
>1867	IfStatement	if ( pabyMask [ iX ] )
>1868	ElseStatement	else
>1869	IfStatement	if ( panLastY [ iX ] - iY <= dfMaxSearchDist )
>1870	ElseStatement	else
>1871	CompoundStatement	 
>1872	ExpressionStatement	 
>1873	AssignmentExpr	panThisY [ iX ] = nNoDataVal
>1874	Identifier	nNoDataVal
>1875	ArrayIndexing	panThisY [ iX ]
>1876	Identifier	iX
>1877	Identifier	panThisY
>1878	CompoundStatement	 
>1879	ExpressionStatement	 
>1880	AssignmentExpr	panThisY [ iX ] = panLastY [ iX ]
>1881	ArrayIndexing	panLastY [ iX ]
>1882	Identifier	iX
>1883	Identifier	panLastY
>1884	ArrayIndexing	panThisY [ iX ]
>1885	Identifier	iX
>1886	Identifier	panThisY
>1887	ExpressionStatement	 
>1888	AssignmentExpr	pafThisValue [ iX ] = pafLastValue [ iX ]
>1889	ArrayIndexing	pafLastValue [ iX ]
>1890	Identifier	iX
>1891	Identifier	pafLastValue
>1892	ArrayIndexing	pafThisValue [ iX ]
>1893	Identifier	iX
>1894	Identifier	pafThisValue
>1895	Condition	 
>1896	RelationalExpression	panLastY [ iX ] - iY <= dfMaxSearchDist
>1897	Identifier	dfMaxSearchDist
>1898	AdditiveExpression	panLastY [ iX ] - iY
>1899	Identifier	iY
>1900	ArrayIndexing	panLastY [ iX ]
>1901	Identifier	iX
>1902	Identifier	panLastY
>1903	CompoundStatement	 
>1904	ExpressionStatement	 
>1905	AssignmentExpr	panThisY [ iX ] = iY
>1906	Identifier	iY
>1907	ArrayIndexing	panThisY [ iX ]
>1908	Identifier	iX
>1909	Identifier	panThisY
>1910	ExpressionStatement	 
>1911	AssignmentExpr	pafThisValue [ iX ] = pafScanline [ iX ]
>1912	ArrayIndexing	pafScanline [ iX ]
>1913	Identifier	iX
>1914	Identifier	pafScanline
>1915	ArrayIndexing	pafThisValue [ iX ]
>1916	Identifier	iX
>1917	Identifier	pafThisValue
>1918	Condition	 
>1919	ArrayIndexing	pabyMask [ iX ]
>1920	Identifier	iX
>1921	Identifier	pabyMask
>1922	IncDecOp	 
>1923	IncDec	++
>1924	Identifier	iX
>1925	Condition	 
>1926	RelationalExpression	iX < nXSize
>1927	Identifier	nXSize
>1928	Identifier	iX
>1929	ForInit	 
>1930	AssignmentExpr	iX = 0
>1931	PrimaryExpression	0
>1932	Identifier	iX
>1933	IfStatement	if ( eErr != CE_None )
>1934	BreakStatement	 
>1935	Condition	 
>1936	EqualityExpression	eErr != CE_None
>1937	Identifier	CE_None
>1938	Identifier	eErr
>1939	ExpressionStatement	 
>1940	AssignmentExpr	eErr = GDALRasterIO ( hTargetBand , GF_Read , 0 , iY , nXSize , 1 , pafScanline , nXSize , 1 , GDT_Float32 , \
>1941	CallExpression	GDALRasterIO ( hTargetBand , GF_Read , 0 , iY , nXSize , 1 , pafScanline , nXSize , 1 , GDT_Float32 , 0 , 0 )
>1942	ArgumentList	hTargetBand
>1943	Argument	0
>1944	PrimaryExpression	0
>1945	Argument	0
>1946	PrimaryExpression	0
>1947	Argument	GDT_Float32
>1948	Identifier	GDT_Float32
>1949	Argument	1
>1950	PrimaryExpression	1
>1951	Argument	nXSize
>1952	Identifier	nXSize
>1953	Argument	pafScanline
>1954	Identifier	pafScanline
>1955	Argument	1
>1956	PrimaryExpression	1
>1957	Argument	nXSize
>1958	Identifier	nXSize
>1959	Argument	iY
>1960	Identifier	iY
>1961	Argument	0
>1962	PrimaryExpression	0
>1963	Argument	GF_Read
>1964	Identifier	GF_Read
>1965	Argument	hTargetBand
>1966	Identifier	hTargetBand
>1967	Callee	GDALRasterIO
>1968	Identifier	GDALRasterIO
>1969	Identifier	eErr
>1970	IfStatement	if ( eErr != CE_None )
>1971	BreakStatement	 
>1972	Condition	 
>1973	EqualityExpression	eErr != CE_None
>1974	Identifier	CE_None
>1975	Identifier	eErr
>1976	ExpressionStatement	 
>1977	AssignmentExpr	eErr = GDALRasterIO ( hMaskBand , GF_Read , 0 , iY , nXSize , 1 , pabyMask , nXSize , 1 , GDT_Byte , \
>1978	CallExpression	GDALRasterIO ( hMaskBand , GF_Read , 0 , iY , nXSize , 1 , pabyMask , nXSize , 1 , GDT_Byte , 0 , 0 )
>1979	ArgumentList	hMaskBand
>1980	Argument	0
>1981	PrimaryExpression	0
>1982	Argument	0
>1983	PrimaryExpression	0
>1984	Argument	GDT_Byte
>1985	Identifier	GDT_Byte
>1986	Argument	1
>1987	PrimaryExpression	1
>1988	Argument	nXSize
>1989	Identifier	nXSize
>1990	Argument	pabyMask
>1991	Identifier	pabyMask
>1992	Argument	1
>1993	PrimaryExpression	1
>1994	Argument	nXSize
>1995	Identifier	nXSize
>1996	Argument	iY
>1997	Identifier	iY
>1998	Argument	0
>1999	PrimaryExpression	0
>2000	Argument	GF_Read
>2001	Identifier	GF_Read
>2002	Argument	hMaskBand
>2003	Identifier	hMaskBand
>2004	Callee	GDALRasterIO
>2005	Identifier	GDALRasterIO
>2006	Identifier	eErr
>2007	IncDecOp	 
>2008	IncDec	--
>2009	Identifier	iY
>2010	Condition	 
>2011	AndExpression	iY >= 0 && eErr == CE_None
>2012	EqualityExpression	eErr == CE_None
>2013	Identifier	CE_None
>2014	Identifier	eErr
>2015	RelationalExpression	iY >= 0
>2016	PrimaryExpression	0
>2017	Identifier	iY
>2018	ForInit	 
>2019	AssignmentExpr	iY = nYSize - 1
>2020	AdditiveExpression	nYSize - 1
>2021	PrimaryExpression	1
>2022	Identifier	nYSize
>2023	Identifier	iY
>2024	ForStatement	for ( iY = 0 ; iY < nYSize && eErr == CE_None ; iY ++ )
>2025	CompoundStatement	 
>2026	IfStatement	if ( eErr == CE_None && ! pfnProgress ( dfProgressRatio * ( 0.5 * ( iY + 1 ) / ( double ) nYSize ) , \"Filling...\" , \
>2027	CompoundStatement	 
>2028	ExpressionStatement	 
>2029	AssignmentExpr	eErr = CE_Failure
>2030	Identifier	CE_Failure
>2031	Identifier	eErr
>2032	ExpressionStatement	 
>2033	CallExpression	CPLError ( CE_Failure , CPLE_UserInterrupt , \"User terminated\" )
>2034	ArgumentList	CE_Failure
>2035	Argument	\"User terminated\"
>2036	PrimaryExpression	\"User terminated\"
>2037	Argument	CPLE_UserInterrupt
>2038	Identifier	CPLE_UserInterrupt
>2039	Argument	CE_Failure
>2040	Identifier	CE_Failure
>2041	Callee	CPLError
>2042	Identifier	CPLError
>2043	Condition	 
>2044	AndExpression	eErr == CE_None && ! pfnProgress ( dfProgressRatio * ( 0.5 * ( iY + 1 ) / ( double ) nYSize ) , \"Filling...\" , \
>2045	UnaryOp	! pfnProgress ( dfProgressRatio * ( 0.5 * ( iY + 1 ) / ( double ) nYSize ) , \"Filling...\" , pProgressArg )
>2046	CallExpression	pfnProgress ( dfProgressRatio * ( 0.5 * ( iY + 1 ) / ( double ) nYSize ) , \"Filling...\" , pProgressArg )
>2047	ArgumentList	dfProgressRatio * ( 0.5 * ( iY + 1 ) / ( double ) nYSize )
>2048	Argument	pProgressArg
>2049	Identifier	pProgressArg
>2050	Argument	\"Filling...\"
>2051	PrimaryExpression	\"Filling...\"
>2052	Argument	dfProgressRatio * ( 0.5 * ( iY + 1 ) / ( double ) nYSize )
>2053	MultiplicativeExpression	dfProgressRatio * ( 0.5 * ( iY + 1 ) / ( double ) nYSize )
>2054	MultiplicativeExpression	0.5 * ( iY + 1 ) / ( double ) nYSize
>2055	MultiplicativeExpression	( iY + 1 ) / ( double ) nYSize
>2056	CastExpression	( double ) nYSize
>2057	Identifier	nYSize
>2058	CastTarget	double
>2059	AdditiveExpression	iY + 1
>2060	PrimaryExpression	1
>2061	Identifier	iY
>2062	PrimaryExpression	0.5
>2063	Identifier	dfProgressRatio
>2064	Callee	pfnProgress
>2065	Identifier	pfnProgress
>2066	UnaryOperator	!
>2067	EqualityExpression	eErr == CE_None
>2068	Identifier	CE_None
>2069	Identifier	eErr
>2070	CompoundStatement	 
>2071	ExpressionStatement	 
>2072	AssignmentExpr	panLastY = panTmp
>2073	Identifier	panTmp
>2074	Identifier	panLastY
>2075	ExpressionStatement	 
>2076	AssignmentExpr	panThisY = panLastY
>2077	Identifier	panLastY
>2078	Identifier	panThisY
>2079	IdentifierDeclStatement	 
>2080	IdentifierDecl	* panTmp = panThisY
>2081	AssignmentExpr	* panTmp = panThisY
>2082	Identifier	panThisY
>2083	Identifier	panThisY
>2084	Identifier	panTmp
>2085	IdentifierDeclType	GUInt32 *
>2086	ExpressionStatement	 
>2087	AssignmentExpr	pafLastValue = pafTmp
>2088	Identifier	pafTmp
>2089	Identifier	pafLastValue
>2090	ExpressionStatement	 
>2091	AssignmentExpr	pafThisValue = pafLastValue
>2092	Identifier	pafLastValue
>2093	Identifier	pafThisValue
>2094	IdentifierDeclStatement	 
>2095	IdentifierDecl	* pafTmp = pafThisValue
>2096	AssignmentExpr	* pafTmp = pafThisValue
>2097	Identifier	pafThisValue
>2098	Identifier	pafThisValue
>2099	Identifier	pafTmp
>2100	IdentifierDeclType	float *
>2101	IfStatement	if ( eErr != CE_None )
>2102	BreakStatement	 
>2103	Condition	 
>2104	EqualityExpression	eErr != CE_None
>2105	Identifier	CE_None
>2106	Identifier	eErr
>2107	ExpressionStatement	 
>2108	AssignmentExpr	eErr = GDALRasterIO ( hValBand , GF_Write , 0 , iY , nXSize , 1 , pafThisValue , nXSize , 1 , GDT_Float32 , \
>2109	CallExpression	GDALRasterIO ( hValBand , GF_Write , 0 , iY , nXSize , 1 , pafThisValue , nXSize , 1 , GDT_Float32 , 0 , 0 )
>2110	ArgumentList	hValBand
>2111	Argument	0
>2112	PrimaryExpression	0
>2113	Argument	0
>2114	PrimaryExpression	0
>2115	Argument	GDT_Float32
>2116	Identifier	GDT_Float32
>2117	Argument	1
>2118	PrimaryExpression	1
>2119	Argument	nXSize
>2120	Identifier	nXSize
>2121	Argument	pafThisValue
>2122	Identifier	pafThisValue
>2123	Argument	1
>2124	PrimaryExpression	1
>2125	Argument	nXSize
>2126	Identifier	nXSize
>2127	Argument	iY
>2128	Identifier	iY
>2129	Argument	0
>2130	PrimaryExpression	0
>2131	Argument	GF_Write
>2132	Identifier	GF_Write
>2133	Argument	hValBand
>2134	Identifier	hValBand
>2135	Callee	GDALRasterIO
>2136	Identifier	GDALRasterIO
>2137	Identifier	eErr
>2138	IfStatement	if ( eErr != CE_None )
>2139	BreakStatement	 
>2140	Condition	 
>2141	EqualityExpression	eErr != CE_None
>2142	Identifier	CE_None
>2143	Identifier	eErr
>2144	ExpressionStatement	 
>2145	AssignmentExpr	eErr = GDALRasterIO ( hYBand , GF_Write , 0 , iY , nXSize , 1 , panThisY , nXSize , 1 , GDT_UInt32 , \
>2146	CallExpression	GDALRasterIO ( hYBand , GF_Write , 0 , iY , nXSize , 1 , panThisY , nXSize , 1 , GDT_UInt32 , 0 , 0 )
>2147	ArgumentList	hYBand
>2148	Argument	0
>2149	PrimaryExpression	0
>2150	Argument	0
>2151	PrimaryExpression	0
>2152	Argument	GDT_UInt32
>2153	Identifier	GDT_UInt32
>2154	Argument	1
>2155	PrimaryExpression	1
>2156	Argument	nXSize
>2157	Identifier	nXSize
>2158	Argument	panThisY
>2159	Identifier	panThisY
>2160	Argument	1
>2161	PrimaryExpression	1
>2162	Argument	nXSize
>2163	Identifier	nXSize
>2164	Argument	iY
>2165	Identifier	iY
>2166	Argument	0
>2167	PrimaryExpression	0
>2168	Argument	GF_Write
>2169	Identifier	GF_Write
>2170	Argument	hYBand
>2171	Identifier	hYBand
>2172	Callee	GDALRasterIO
>2173	Identifier	GDALRasterIO
>2174	Identifier	eErr
>2175	ForStatement	for ( iX = 0 ; iX < nXSize ; iX ++ )
>2176	CompoundStatement	 
>2177	IfStatement	if ( pabyMask [ iX ] )
>2178	ElseStatement	else
>2179	IfStatement	if ( iY - panLastY [ iX ] <= dfMaxSearchDist )
>2180	ElseStatement	else
>2181	CompoundStatement	 
>2182	ExpressionStatement	 
>2183	AssignmentExpr	panThisY [ iX ] = nNoDataVal
>2184	Identifier	nNoDataVal
>2185	ArrayIndexing	panThisY [ iX ]
>2186	Identifier	iX
>2187	Identifier	panThisY
>2188	CompoundStatement	 
>2189	ExpressionStatement	 
>2190	AssignmentExpr	panThisY [ iX ] = panLastY [ iX ]
>2191	ArrayIndexing	panLastY [ iX ]
>2192	Identifier	iX
>2193	Identifier	panLastY
>2194	ArrayIndexing	panThisY [ iX ]
>2195	Identifier	iX
>2196	Identifier	panThisY
>2197	ExpressionStatement	 
>2198	AssignmentExpr	pafThisValue [ iX ] = pafLastValue [ iX ]
>2199	ArrayIndexing	pafLastValue [ iX ]
>2200	Identifier	iX
>2201	Identifier	pafLastValue
>2202	ArrayIndexing	pafThisValue [ iX ]
>2203	Identifier	iX
>2204	Identifier	pafThisValue
>2205	Condition	 
>2206	RelationalExpression	iY - panLastY [ iX ] <= dfMaxSearchDist
>2207	Identifier	dfMaxSearchDist
>2208	AdditiveExpression	iY - panLastY [ iX ]
>2209	ArrayIndexing	panLastY [ iX ]
>2210	Identifier	iX
>2211	Identifier	panLastY
>2212	Identifier	iY
>2213	CompoundStatement	 
>2214	ExpressionStatement	 
>2215	AssignmentExpr	panThisY [ iX ] = iY
>2216	Identifier	iY
>2217	ArrayIndexing	panThisY [ iX ]
>2218	Identifier	iX
>2219	Identifier	panThisY
>2220	ExpressionStatement	 
>2221	AssignmentExpr	pafThisValue [ iX ] = pafScanline [ iX ]
>2222	ArrayIndexing	pafScanline [ iX ]
>2223	Identifier	iX
>2224	Identifier	pafScanline
>2225	ArrayIndexing	pafThisValue [ iX ]
>2226	Identifier	iX
>2227	Identifier	pafThisValue
>2228	Condition	 
>2229	ArrayIndexing	pabyMask [ iX ]
>2230	Identifier	iX
>2231	Identifier	pabyMask
>2232	IncDecOp	 
>2233	IncDec	++
>2234	Identifier	iX
>2235	Condition	 
>2236	RelationalExpression	iX < nXSize
>2237	Identifier	nXSize
>2238	Identifier	iX
>2239	ForInit	 
>2240	AssignmentExpr	iX = 0
>2241	PrimaryExpression	0
>2242	Identifier	iX
>2243	IfStatement	if ( eErr != CE_None )
>2244	BreakStatement	 
>2245	Condition	 
>2246	EqualityExpression	eErr != CE_None
>2247	Identifier	CE_None
>2248	Identifier	eErr
>2249	ExpressionStatement	 
>2250	AssignmentExpr	eErr = GDALRasterIO ( hTargetBand , GF_Read , 0 , iY , nXSize , 1 , pafScanline , nXSize , 1 , GDT_Float32 , \
>2251	CallExpression	GDALRasterIO ( hTargetBand , GF_Read , 0 , iY , nXSize , 1 , pafScanline , nXSize , 1 , GDT_Float32 , 0 , 0 )
>2252	ArgumentList	hTargetBand
>2253	Argument	0
>2254	PrimaryExpression	0
>2255	Argument	0
>2256	PrimaryExpression	0
>2257	Argument	GDT_Float32
>2258	Identifier	GDT_Float32
>2259	Argument	1
>2260	PrimaryExpression	1
>2261	Argument	nXSize
>2262	Identifier	nXSize
>2263	Argument	pafScanline
>2264	Identifier	pafScanline
>2265	Argument	1
>2266	PrimaryExpression	1
>2267	Argument	nXSize
>2268	Identifier	nXSize
>2269	Argument	iY
>2270	Identifier	iY
>2271	Argument	0
>2272	PrimaryExpression	0
>2273	Argument	GF_Read
>2274	Identifier	GF_Read
>2275	Argument	hTargetBand
>2276	Identifier	hTargetBand
>2277	Callee	GDALRasterIO
>2278	Identifier	GDALRasterIO
>2279	Identifier	eErr
>2280	IfStatement	if ( eErr != CE_None )
>2281	BreakStatement	 
>2282	Condition	 
>2283	EqualityExpression	eErr != CE_None
>2284	Identifier	CE_None
>2285	Identifier	eErr
>2286	ExpressionStatement	 
>2287	AssignmentExpr	eErr = GDALRasterIO ( hMaskBand , GF_Read , 0 , iY , nXSize , 1 , pabyMask , nXSize , 1 , GDT_Byte , \
>2288	CallExpression	GDALRasterIO ( hMaskBand , GF_Read , 0 , iY , nXSize , 1 , pabyMask , nXSize , 1 , GDT_Byte , 0 , 0 )
>2289	ArgumentList	hMaskBand
>2290	Argument	0
>2291	PrimaryExpression	0
>2292	Argument	0
>2293	PrimaryExpression	0
>2294	Argument	GDT_Byte
>2295	Identifier	GDT_Byte
>2296	Argument	1
>2297	PrimaryExpression	1
>2298	Argument	nXSize
>2299	Identifier	nXSize
>2300	Argument	pabyMask
>2301	Identifier	pabyMask
>2302	Argument	1
>2303	PrimaryExpression	1
>2304	Argument	nXSize
>2305	Identifier	nXSize
>2306	Argument	iY
>2307	Identifier	iY
>2308	Argument	0
>2309	PrimaryExpression	0
>2310	Argument	GF_Read
>2311	Identifier	GF_Read
>2312	Argument	hMaskBand
>2313	Identifier	hMaskBand
>2314	Callee	GDALRasterIO
>2315	Identifier	GDALRasterIO
>2316	Identifier	eErr
>2317	IncDecOp	 
>2318	IncDec	++
>2319	Identifier	iY
>2320	Condition	 
>2321	AndExpression	iY < nYSize && eErr == CE_None
>2322	EqualityExpression	eErr == CE_None
>2323	Identifier	CE_None
>2324	Identifier	eErr
>2325	RelationalExpression	iY < nYSize
>2326	Identifier	nYSize
>2327	Identifier	iY
>2328	ForInit	 
>2329	AssignmentExpr	iY = 0
>2330	PrimaryExpression	0
>2331	Identifier	iY
>2332	ForStatement	for ( iX = 0 ; iX < nXSize ; iX ++ )
>2333	CompoundStatement	 
>2334	ExpressionStatement	 
>2335	AssignmentExpr	panLastY [ iX ] = nNoDataVal
>2336	Identifier	nNoDataVal
>2337	ArrayIndexing	panLastY [ iX ]
>2338	Identifier	iX
>2339	Identifier	panLastY
>2340	IncDecOp	 
>2341	IncDec	++
>2342	Identifier	iX
>2343	Condition	 
>2344	RelationalExpression	iX < nXSize
>2345	Identifier	nXSize
>2346	Identifier	iX
>2347	ForInit	 
>2348	AssignmentExpr	iX = 0
>2349	PrimaryExpression	0
>2350	Identifier	iX
>2351	IfStatement	if ( panLastY == NULL || panThisY == NULL || panTopDownY == NULL || pafLastValue == NULL || pafThisValue == NULL || \
>2352	CompoundStatement	 
>2353	GotoStatement	 
>2354	Identifier	end
>2355	ExpressionStatement	 
>2356	AssignmentExpr	eErr = CE_Failure
>2357	Identifier	CE_Failure
>2358	Identifier	eErr
>2359	ExpressionStatement	 
>2360	CallExpression	CPLError ( CE_Failure , CPLE_OutOfMemory , \"Could not allocate enough memory for temporary buffers\" )
>2361	ArgumentList	CE_Failure
>2362	Argument	\"Could not allocate enough memory for temporary buffers\"
>2363	PrimaryExpression	\"Could not allocate enough memory for temporary buffers\"
>2364	Argument	CPLE_OutOfMemory
>2365	Identifier	CPLE_OutOfMemory
>2366	Argument	CE_Failure
>2367	Identifier	CE_Failure
>2368	Callee	CPLError
>2369	Identifier	CPLError
>2370	Condition	 
>2371	OrExpression	panLastY == NULL || panThisY == NULL || panTopDownY == NULL || pafLastValue == NULL || pafThisValue == \
>2372	OrExpression	panThisY == NULL || panTopDownY == NULL || pafLastValue == NULL || pafThisValue == NULL || pafTopDownValue == \
>2373	OrExpression	panTopDownY == NULL || pafLastValue == NULL || pafThisValue == NULL || pafTopDownValue == NULL || pafScanline == \
>2374	OrExpression	pafLastValue == NULL || pafThisValue == NULL || pafTopDownValue == NULL || pafScanline == NULL || pabyMask == \
>2375	OrExpression	pafThisValue == NULL || pafTopDownValue == NULL || pafScanline == NULL || pabyMask == NULL || pabyFiltMask == \
>2376	OrExpression	pafTopDownValue == NULL || pafScanline == NULL || pabyMask == NULL || pabyFiltMask == NULL
>2377	OrExpression	pafScanline == NULL || pabyMask == NULL || pabyFiltMask == NULL
>2378	OrExpression	pabyMask == NULL || pabyFiltMask == NULL
>2379	EqualityExpression	pabyFiltMask == NULL
>2380	Identifier	NULL
>2381	Identifier	pabyFiltMask
>2382	EqualityExpression	pabyMask == NULL
>2383	Identifier	NULL
>2384	Identifier	pabyMask
>2385	EqualityExpression	pafScanline == NULL
>2386	Identifier	NULL
>2387	Identifier	pafScanline
>2388	EqualityExpression	pafTopDownValue == NULL
>2389	Identifier	NULL
>2390	Identifier	pafTopDownValue
>2391	EqualityExpression	pafThisValue == NULL
>2392	Identifier	NULL
>2393	Identifier	pafThisValue
>2394	EqualityExpression	pafLastValue == NULL
>2395	Identifier	NULL
>2396	Identifier	pafLastValue
>2397	EqualityExpression	panTopDownY == NULL
>2398	Identifier	NULL
>2399	Identifier	panTopDownY
>2400	EqualityExpression	panThisY == NULL
>2401	Identifier	NULL
>2402	Identifier	panThisY
>2403	EqualityExpression	panLastY == NULL
>2404	Identifier	NULL
>2405	Identifier	panLastY
>2406	ExpressionStatement	 
>2407	AssignmentExpr	pabyFiltMask = ( GByte * ) VSICalloc ( nXSize , 1 )
>2408	CastExpression	( GByte * ) VSICalloc ( nXSize , 1 )
>2409	CallExpression	VSICalloc ( nXSize , 1 )
>2410	ArgumentList	nXSize
>2411	Argument	1
>2412	PrimaryExpression	1
>2413	Argument	nXSize
>2414	Identifier	nXSize
>2415	Callee	VSICalloc
>2416	Identifier	VSICalloc
>2417	CastTarget	GByte *
>2418	Identifier	pabyFiltMask
>2419	ExpressionStatement	 
>2420	AssignmentExpr	pabyMask = ( GByte * ) VSICalloc ( nXSize , 1 )
>2421	CastExpression	( GByte * ) VSICalloc ( nXSize , 1 )
>2422	CallExpression	VSICalloc ( nXSize , 1 )
>2423	ArgumentList	nXSize
>2424	Argument	1
>2425	PrimaryExpression	1
>2426	Argument	nXSize
>2427	Identifier	nXSize
>2428	Callee	VSICalloc
>2429	Identifier	VSICalloc
>2430	CastTarget	GByte *
>2431	Identifier	pabyMask
>2432	ExpressionStatement	 
>2433	AssignmentExpr	pafScanline = ( float * ) VSICalloc ( nXSize , sizeof ( float ) )
>2434	CastExpression	( float * ) VSICalloc ( nXSize , sizeof ( float ) )
>2435	CallExpression	VSICalloc ( nXSize , sizeof ( float ) )
>2436	ArgumentList	nXSize
>2437	Argument	sizeof ( float )
>2438	SizeofExpr	sizeof ( float )
>2439	SizeofOperand	float
>2440	Sizeof	sizeof
>2441	Argument	nXSize
>2442	Identifier	nXSize
>2443	Callee	VSICalloc
>2444	Identifier	VSICalloc
>2445	CastTarget	float *
>2446	Identifier	pafScanline
>2447	ExpressionStatement	 
>2448	AssignmentExpr	pafTopDownValue = ( float * ) VSICalloc ( nXSize , sizeof ( float ) )
>2449	CastExpression	( float * ) VSICalloc ( nXSize , sizeof ( float ) )
>2450	CallExpression	VSICalloc ( nXSize , sizeof ( float ) )
>2451	ArgumentList	nXSize
>2452	Argument	sizeof ( float )
>2453	SizeofExpr	sizeof ( float )
>2454	SizeofOperand	float
>2455	Sizeof	sizeof
>2456	Argument	nXSize
>2457	Identifier	nXSize
>2458	Callee	VSICalloc
>2459	Identifier	VSICalloc
>2460	CastTarget	float *
>2461	Identifier	pafTopDownValue
>2462	ExpressionStatement	 
>2463	AssignmentExpr	pafThisValue = ( float * ) VSICalloc ( nXSize , sizeof ( float ) )
>2464	CastExpression	( float * ) VSICalloc ( nXSize , sizeof ( float ) )
>2465	CallExpression	VSICalloc ( nXSize , sizeof ( float ) )
>2466	ArgumentList	nXSize
>2467	Argument	sizeof ( float )
>2468	SizeofExpr	sizeof ( float )
>2469	SizeofOperand	float
>2470	Sizeof	sizeof
>2471	Argument	nXSize
>2472	Identifier	nXSize
>2473	Callee	VSICalloc
>2474	Identifier	VSICalloc
>2475	CastTarget	float *
>2476	Identifier	pafThisValue
>2477	ExpressionStatement	 
>2478	AssignmentExpr	pafLastValue = ( float * ) VSICalloc ( nXSize , sizeof ( float ) )
>2479	CastExpression	( float * ) VSICalloc ( nXSize , sizeof ( float ) )
>2480	CallExpression	VSICalloc ( nXSize , sizeof ( float ) )
>2481	ArgumentList	nXSize
>2482	Argument	sizeof ( float )
>2483	SizeofExpr	sizeof ( float )
>2484	SizeofOperand	float
>2485	Sizeof	sizeof
>2486	Argument	nXSize
>2487	Identifier	nXSize
>2488	Callee	VSICalloc
>2489	Identifier	VSICalloc
>2490	CastTarget	float *
>2491	Identifier	pafLastValue
>2492	ExpressionStatement	 
>2493	AssignmentExpr	panTopDownY = ( GUInt32 * ) VSICalloc ( nXSize , sizeof ( GUInt32 ) )
>2494	CastExpression	( GUInt32 * ) VSICalloc ( nXSize , sizeof ( GUInt32 ) )
>2495	CallExpression	VSICalloc ( nXSize , sizeof ( GUInt32 ) )
>2496	ArgumentList	nXSize
>2497	Argument	sizeof ( GUInt32 )
>2498	SizeofExpr	sizeof ( GUInt32 )
>2499	SizeofOperand	GUInt32
>2500	Sizeof	sizeof
>2501	Argument	nXSize
>2502	Identifier	nXSize
>2503	Callee	VSICalloc
>2504	Identifier	VSICalloc
>2505	CastTarget	GUInt32 *
>2506	Identifier	panTopDownY
>2507	ExpressionStatement	 
>2508	AssignmentExpr	panThisY = ( GUInt32 * ) VSICalloc ( nXSize , sizeof ( GUInt32 ) )
>2509	CastExpression	( GUInt32 * ) VSICalloc ( nXSize , sizeof ( GUInt32 ) )
>2510	CallExpression	VSICalloc ( nXSize , sizeof ( GUInt32 ) )
>2511	ArgumentList	nXSize
>2512	Argument	sizeof ( GUInt32 )
>2513	SizeofExpr	sizeof ( GUInt32 )
>2514	SizeofOperand	GUInt32
>2515	Sizeof	sizeof
>2516	Argument	nXSize
>2517	Identifier	nXSize
>2518	Callee	VSICalloc
>2519	Identifier	VSICalloc
>2520	CastTarget	GUInt32 *
>2521	Identifier	panThisY
>2522	ExpressionStatement	 
>2523	AssignmentExpr	panLastY = ( GUInt32 * ) VSICalloc ( nXSize , sizeof ( GUInt32 ) )
>2524	CastExpression	( GUInt32 * ) VSICalloc ( nXSize , sizeof ( GUInt32 ) )
>2525	CallExpression	VSICalloc ( nXSize , sizeof ( GUInt32 ) )
>2526	ArgumentList	nXSize
>2527	Argument	sizeof ( GUInt32 )
>2528	SizeofExpr	sizeof ( GUInt32 )
>2529	SizeofOperand	GUInt32
>2530	Sizeof	sizeof
>2531	Argument	nXSize
>2532	Identifier	nXSize
>2533	Callee	VSICalloc
>2534	Identifier	VSICalloc
>2535	CastTarget	GUInt32 *
>2536	Identifier	panLastY
>2537	IdentifierDeclStatement	 
>2538	IdentifierDecl	iY
>2539	Identifier	iY
>2540	IdentifierDeclType	int
>2541	IdentifierDeclStatement	 
>2542	IdentifierDecl	iX
>2543	Identifier	iX
>2544	IdentifierDeclType	int
>2545	IdentifierDeclStatement	 
>2546	IdentifierDecl	* pabyFiltMask
>2547	Identifier	pabyFiltMask
>2548	IdentifierDeclType	GByte *
>2549	IdentifierDecl	* pabyMask
>2550	Identifier	pabyMask
>2551	IdentifierDeclType	GByte *
>2552	IdentifierDeclStatement	 
>2553	IdentifierDecl	* pafTopDownValue
>2554	Identifier	pafTopDownValue
>2555	IdentifierDeclType	float *
>2556	IdentifierDecl	* pafScanline
>2557	Identifier	pafScanline
>2558	IdentifierDeclType	float *
>2559	IdentifierDecl	* pafThisValue
>2560	Identifier	pafThisValue
>2561	IdentifierDeclType	float *
>2562	IdentifierDecl	* pafLastValue
>2563	Identifier	pafLastValue
>2564	IdentifierDeclType	float *
>2565	IdentifierDeclStatement	 
>2566	IdentifierDecl	* panTopDownY
>2567	Identifier	panTopDownY
>2568	IdentifierDeclType	GUInt32 *
>2569	IdentifierDecl	* panThisY
>2570	Identifier	panThisY
>2571	IdentifierDeclType	GUInt32 *
>2572	IdentifierDecl	* panLastY
>2573	Identifier	panLastY
>2574	IdentifierDeclType	GUInt32 *
>2575	ExpressionStatement	 
>2576	AssignmentExpr	hFiltMaskBand = GDALGetRasterBand ( hFiltMaskDS , 1 )
>2577	CallExpression	GDALGetRasterBand ( hFiltMaskDS , 1 )
>2578	ArgumentList	hFiltMaskDS
>2579	Argument	1
>2580	PrimaryExpression	1
>2581	Argument	hFiltMaskDS
>2582	Identifier	hFiltMaskDS
>2583	Callee	GDALGetRasterBand
>2584	Identifier	GDALGetRasterBand
>2585	Identifier	hFiltMaskBand
>2586	IfStatement	if ( hFiltMaskDS == NULL )
>2587	ReturnStatement	 
>2588	Identifier	CE_Failure
>2589	Condition	 
>2590	EqualityExpression	hFiltMaskDS == NULL
>2591	Identifier	NULL
>2592	Identifier	hFiltMaskDS
>2593	ExpressionStatement	 
>2594	AssignmentExpr	hFiltMaskDS = GDALCreate ( hDriver , osFiltMaskTmpFile , nXSize , nYSize , 1 , GDT_Byte , ( char * * ) \
>2595	CallExpression	GDALCreate ( hDriver , osFiltMaskTmpFile , nXSize , nYSize , 1 , GDT_Byte , ( char * * ) apszOptions )
>2596	ArgumentList	hDriver
>2597	Argument	( char * * ) apszOptions
>2598	CastExpression	( char * * ) apszOptions
>2599	Identifier	apszOptions
>2600	CastTarget	char * *
>2601	Argument	GDT_Byte
>2602	Identifier	GDT_Byte
>2603	Argument	1
>2604	PrimaryExpression	1
>2605	Argument	nYSize
>2606	Identifier	nYSize
>2607	Argument	nXSize
>2608	Identifier	nXSize
>2609	Argument	osFiltMaskTmpFile
>2610	Identifier	osFiltMaskTmpFile
>2611	Argument	hDriver
>2612	Identifier	hDriver
>2613	Callee	GDALCreate
>2614	Identifier	GDALCreate
>2615	Identifier	hFiltMaskDS
>2616	IdentifierDeclStatement	 
>2617	IdentifierDecl	osFiltMaskTmpFile = osTmpFile + \"fill_filtmask_work.tif\"
>2618	AssignmentExpr	osFiltMaskTmpFile = osTmpFile + \"fill_filtmask_work.tif\"
>2619	AdditiveExpression	osTmpFile + \"fill_filtmask_work.tif\"
>2620	PrimaryExpression	\"fill_filtmask_work.tif\"
>2621	Identifier	osTmpFile
>2622	Identifier	osFiltMaskTmpFile
>2623	Identifier	osFiltMaskTmpFile
>2624	IdentifierDeclType	CPLString
>2625	IdentifierDeclStatement	 
>2626	IdentifierDecl	hFiltMaskBand
>2627	Identifier	hFiltMaskBand
>2628	IdentifierDeclType	GDALRasterBandH
>2629	IdentifierDeclStatement	 
>2630	IdentifierDecl	hFiltMaskDS
>2631	Identifier	hFiltMaskDS
>2632	IdentifierDeclType	GDALDatasetH
>2633	ExpressionStatement	 
>2634	AssignmentExpr	hValBand = GDALGetRasterBand ( hValDS , 1 )
>2635	CallExpression	GDALGetRasterBand ( hValDS , 1 )
>2636	ArgumentList	hValDS
>2637	Argument	1
>2638	PrimaryExpression	1
>2639	Argument	hValDS
>2640	Identifier	hValDS
>2641	Callee	GDALGetRasterBand
>2642	Identifier	GDALGetRasterBand
>2643	Identifier	hValBand
>2644	IfStatement	if ( hValDS == NULL )
>2645	ReturnStatement	 
>2646	Identifier	CE_Failure
>2647	Condition	 
>2648	EqualityExpression	hValDS == NULL
>2649	Identifier	NULL
>2650	Identifier	hValDS
>2651	ExpressionStatement	 
>2652	AssignmentExpr	hValDS = GDALCreate ( hDriver , osValTmpFile , nXSize , nYSize , 1 , GDALGetRasterDataType ( hTargetBand ) , ( \
>2653	CallExpression	GDALCreate ( hDriver , osValTmpFile , nXSize , nYSize , 1 , GDALGetRasterDataType ( hTargetBand ) , ( char * * ) \
>2654	ArgumentList	hDriver
>2655	Argument	( char * * ) apszOptions
>2656	CastExpression	( char * * ) apszOptions
>2657	Identifier	apszOptions
>2658	CastTarget	char * *
>2659	Argument	GDALGetRasterDataType ( hTargetBand )
>2660	CallExpression	GDALGetRasterDataType ( hTargetBand )
>2661	ArgumentList	hTargetBand
>2662	Argument	hTargetBand
>2663	Identifier	hTargetBand
>2664	Callee	GDALGetRasterDataType
>2665	Identifier	GDALGetRasterDataType
>2666	Argument	1
>2667	PrimaryExpression	1
>2668	Argument	nYSize
>2669	Identifier	nYSize
>2670	Argument	nXSize
>2671	Identifier	nXSize
>2672	Argument	osValTmpFile
>2673	Identifier	osValTmpFile
>2674	Argument	hDriver
>2675	Identifier	hDriver
>2676	Callee	GDALCreate
>2677	Identifier	GDALCreate
>2678	Identifier	hValDS
>2679	IdentifierDeclStatement	 
>2680	IdentifierDecl	osValTmpFile = osTmpFile + \"fill_val_work.tif\"
>2681	AssignmentExpr	osValTmpFile = osTmpFile + \"fill_val_work.tif\"
>2682	AdditiveExpression	osTmpFile + \"fill_val_work.tif\"
>2683	PrimaryExpression	\"fill_val_work.tif\"
>2684	Identifier	osTmpFile
>2685	Identifier	osValTmpFile
>2686	Identifier	osValTmpFile
>2687	IdentifierDeclType	CPLString
>2688	IdentifierDeclStatement	 
>2689	IdentifierDecl	hValBand
>2690	Identifier	hValBand
>2691	IdentifierDeclType	GDALRasterBandH
>2692	IdentifierDeclStatement	 
>2693	IdentifierDecl	hValDS
>2694	Identifier	hValDS
>2695	IdentifierDeclType	GDALDatasetH
>2696	ExpressionStatement	 
>2697	AssignmentExpr	hYBand = GDALGetRasterBand ( hYDS , 1 )
>2698	CallExpression	GDALGetRasterBand ( hYDS , 1 )
>2699	ArgumentList	hYDS
>2700	Argument	1
>2701	PrimaryExpression	1
>2702	Argument	hYDS
>2703	Identifier	hYDS
>2704	Callee	GDALGetRasterBand
>2705	Identifier	GDALGetRasterBand
>2706	Identifier	hYBand
>2707	IfStatement	if ( hYDS == NULL )
>2708	ReturnStatement	 
>2709	Identifier	CE_Failure
>2710	Condition	 
>2711	EqualityExpression	hYDS == NULL
>2712	Identifier	NULL
>2713	Identifier	hYDS
>2714	ExpressionStatement	 
>2715	AssignmentExpr	hYDS = GDALCreate ( hDriver , osYTmpFile , nXSize , nYSize , 1 , eType , ( char * * ) apszOptions )
>2716	CallExpression	GDALCreate ( hDriver , osYTmpFile , nXSize , nYSize , 1 , eType , ( char * * ) apszOptions )
>2717	ArgumentList	hDriver
>2718	Argument	( char * * ) apszOptions
>2719	CastExpression	( char * * ) apszOptions
>2720	Identifier	apszOptions
>2721	CastTarget	char * *
>2722	Argument	eType
>2723	Identifier	eType
>2724	Argument	1
>2725	PrimaryExpression	1
>2726	Argument	nYSize
>2727	Identifier	nYSize
>2728	Argument	nXSize
>2729	Identifier	nXSize
>2730	Argument	osYTmpFile
>2731	Identifier	osYTmpFile
>2732	Argument	hDriver
>2733	Identifier	hDriver
>2734	Callee	GDALCreate
>2735	Identifier	GDALCreate
>2736	Identifier	hYDS
>2737	IdentifierDeclStatement	 
>2738	IdentifierDecl	osYTmpFile = osTmpFile + \"fill_y_work.tif\"
>2739	AssignmentExpr	osYTmpFile = osTmpFile + \"fill_y_work.tif\"
>2740	AdditiveExpression	osTmpFile + \"fill_y_work.tif\"
>2741	PrimaryExpression	\"fill_y_work.tif\"
>2742	Identifier	osTmpFile
>2743	Identifier	osYTmpFile
>2744	Identifier	osYTmpFile
>2745	IdentifierDeclType	CPLString
>2746	IdentifierDeclStatement	 
>2747	IdentifierDecl	osTmpFile = CPLGenerateTempFilename ( \"\" )
>2748	AssignmentExpr	osTmpFile = CPLGenerateTempFilename ( \"\" )
>2749	CallExpression	CPLGenerateTempFilename ( \"\" )
>2750	ArgumentList	\"\"
>2751	Argument	\"\"
>2752	PrimaryExpression	\"\"
>2753	Callee	CPLGenerateTempFilename
>2754	Identifier	CPLGenerateTempFilename
>2755	Identifier	osTmpFile
>2756	Identifier	osTmpFile
>2757	IdentifierDeclType	CPLString
>2758	IdentifierDeclStatement	 
>2759	IdentifierDecl	* apszOptions [ ] = { \"COMPRESS=LZW\" , \"BIGTIFF=IF_SAFER\" , NULL }
>2760	AssignmentExpr	* apszOptions [ ] = { \"COMPRESS=LZW\" , \"BIGTIFF=IF_SAFER\" , NULL }
>2761	InitializerList	\"COMPRESS=LZW\"
>2762	Identifier	NULL
>2763	PrimaryExpression	\"BIGTIFF=IF_SAFER\"
>2764	PrimaryExpression	\"COMPRESS=LZW\"
>2765	Identifier	apszOptions
>2766	Identifier	apszOptions
>2767	IdentifierDeclType	const char * [ ]
>2768	Statement	 
>2769	IdentifierDeclStatement	 
>2770	IdentifierDecl	hYBand
>2771	Identifier	hYBand
>2772	IdentifierDeclType	GDALRasterBandH
>2773	IdentifierDeclStatement	 
>2774	IdentifierDecl	hYDS
>2775	Identifier	hYDS
>2776	IdentifierDeclType	GDALDatasetH
>2777	IfStatement	if ( hDriver == NULL )
>2778	CompoundStatement	 
>2779	ReturnStatement	 
>2780	Identifier	CE_Failure
>2781	ExpressionStatement	 
>2782	CallExpression	CPLError ( CE_Failure , CPLE_AppDefined , \"GDALFillNodata needs GTiff driver\" )
>2783	ArgumentList	CE_Failure
>2784	Argument	\"GDALFillNodata needs GTiff driver\"
>2785	PrimaryExpression	\"GDALFillNodata needs GTiff driver\"
>2786	Argument	CPLE_AppDefined
>2787	Identifier	CPLE_AppDefined
>2788	Argument	CE_Failure
>2789	Identifier	CE_Failure
>2790	Callee	CPLError
>2791	Identifier	CPLError
>2792	Condition	 
>2793	EqualityExpression	hDriver == NULL
>2794	Identifier	NULL
>2795	Identifier	hDriver
>2796	IdentifierDeclStatement	 
>2797	IdentifierDecl	hDriver = GDALGetDriverByName ( \"GTiff\" )
>2798	AssignmentExpr	hDriver = GDALGetDriverByName ( \"GTiff\" )
>2799	CallExpression	GDALGetDriverByName ( \"GTiff\" )
>2800	ArgumentList	\"GTiff\"
>2801	Argument	\"GTiff\"
>2802	PrimaryExpression	\"GTiff\"
>2803	Callee	GDALGetDriverByName
>2804	Identifier	GDALGetDriverByName
>2805	Identifier	hDriver
>2806	Identifier	hDriver
>2807	IdentifierDeclType	GDALDriverH
>2808	IfStatement	if ( ! pfnProgress ( 0.0 , \"Filling...\" , pProgressArg ) )
>2809	CompoundStatement	 
>2810	ReturnStatement	 
>2811	Identifier	CE_Failure
>2812	ExpressionStatement	 
>2813	CallExpression	CPLError ( CE_Failure , CPLE_UserInterrupt , \"User terminated\" )
>2814	ArgumentList	CE_Failure
>2815	Argument	\"User terminated\"
>2816	PrimaryExpression	\"User terminated\"
>2817	Argument	CPLE_UserInterrupt
>2818	Identifier	CPLE_UserInterrupt
>2819	Argument	CE_Failure
>2820	Identifier	CE_Failure
>2821	Callee	CPLError
>2822	Identifier	CPLError
>2823	Condition	 
>2824	UnaryOp	! pfnProgress ( 0.0 , \"Filling...\" , pProgressArg )
>2825	CallExpression	pfnProgress ( 0.0 , \"Filling...\" , pProgressArg )
>2826	ArgumentList	0.0
>2827	Argument	pProgressArg
>2828	Identifier	pProgressArg
>2829	Argument	\"Filling...\"
>2830	PrimaryExpression	\"Filling...\"
>2831	Argument	0.0
>2832	PrimaryExpression	0.0
>2833	Callee	pfnProgress
>2834	Identifier	pfnProgress
>2835	UnaryOperator	!
>2836	IfStatement	if ( pfnProgress == NULL )
>2837	ExpressionStatement	 
>2838	AssignmentExpr	pfnProgress = GDALDummyProgress
>2839	Identifier	GDALDummyProgress
>2840	Identifier	pfnProgress
>2841	Condition	 
>2842	EqualityExpression	pfnProgress == NULL
>2843	Identifier	NULL
>2844	Identifier	pfnProgress
>2845	IdentifierDeclStatement	 
>2846	IdentifierDecl	dfProgressRatio = ( nSmoothingIterations > 0 ) ? 0.9 
>2847	AssignmentExpr	dfProgressRatio = ( nSmoothingIterations > 0 ) ? 0.9 
>2848	ConditionalExpression	( nSmoothingIterations > 0 ) ? 0.9 
>2849	PrimaryExpression	1.0
>2850	PrimaryExpression	0.9
>2851	Condition	nSmoothingIterations > 0
>2852	RelationalExpression	nSmoothingIterations > 0
>2853	PrimaryExpression	0
>2854	Identifier	nSmoothingIterations
>2855	Identifier	dfProgressRatio
>2856	Identifier	dfProgressRatio
>2857	IdentifierDeclType	double
>2858	IfStatement	if ( hMaskBand == NULL )
>2859	ExpressionStatement	 
>2860	AssignmentExpr	hMaskBand = GDALGetMaskBand ( hTargetBand )
>2861	CallExpression	GDALGetMaskBand ( hTargetBand )
>2862	ArgumentList	hTargetBand
>2863	Argument	hTargetBand
>2864	Identifier	hTargetBand
>2865	Callee	GDALGetMaskBand
>2866	Identifier	GDALGetMaskBand
>2867	Identifier	hMaskBand
>2868	Condition	 
>2869	EqualityExpression	hMaskBand == NULL
>2870	Identifier	NULL
>2871	Identifier	hMaskBand
>2872	IfStatement	if ( nXSize > 65533 || nYSize > 65533 )
>2873	ElseStatement	else
>2874	CompoundStatement	 
>2875	ExpressionStatement	 
>2876	AssignmentExpr	nNoDataVal = 65535
>2877	PrimaryExpression	65535
>2878	Identifier	nNoDataVal
>2879	ExpressionStatement	 
>2880	AssignmentExpr	eType = GDT_UInt16
>2881	Identifier	GDT_UInt16
>2882	Identifier	eType
>2883	CompoundStatement	 
>2884	ExpressionStatement	 
>2885	AssignmentExpr	nNoDataVal = 4000002
>2886	PrimaryExpression	4000002
>2887	Identifier	nNoDataVal
>2888	ExpressionStatement	 
>2889	AssignmentExpr	eType = GDT_UInt32
>2890	Identifier	GDT_UInt32
>2891	Identifier	eType
>2892	Condition	 
>2893	OrExpression	nXSize > 65533 || nYSize > 65533
>2894	RelationalExpression	nYSize > 65533
>2895	PrimaryExpression	65533
>2896	Identifier	nYSize
>2897	RelationalExpression	nXSize > 65533
>2898	PrimaryExpression	65533
>2899	Identifier	nXSize
>2900	IdentifierDeclStatement	 
>2901	IdentifierDecl	nMaxSearchDist = ( int ) floor ( dfMaxSearchDist )
>2902	AssignmentExpr	nMaxSearchDist = ( int ) floor ( dfMaxSearchDist )
>2903	CastExpression	( int ) floor ( dfMaxSearchDist )
>2904	CallExpression	floor ( dfMaxSearchDist )
>2905	ArgumentList	dfMaxSearchDist
>2906	Argument	dfMaxSearchDist
>2907	Identifier	dfMaxSearchDist
>2908	Callee	floor
>2909	Identifier	floor
>2910	CastTarget	int
>2911	Identifier	nMaxSearchDist
>2912	Identifier	nMaxSearchDist
>2913	IdentifierDeclType	int
>2914	IfStatement	if ( dfMaxSearchDist == 0.0 )
>2915	ExpressionStatement	 
>2916	AssignmentExpr	dfMaxSearchDist = MAX ( nXSize , nYSize ) + 1
>2917	AdditiveExpression	MAX ( nXSize , nYSize ) + 1
>2918	PrimaryExpression	1
>2919	CallExpression	MAX ( nXSize , nYSize )
>2920	ArgumentList	nXSize
>2921	Argument	nYSize
>2922	Identifier	nYSize
>2923	Argument	nXSize
>2924	Identifier	nXSize
>2925	Callee	MAX
>2926	Identifier	MAX
>2927	Identifier	dfMaxSearchDist
>2928	Condition	 
>2929	EqualityExpression	dfMaxSearchDist == 0.0
>2930	PrimaryExpression	0.0
>2931	Identifier	dfMaxSearchDist
>2932	IdentifierDeclStatement	 
>2933	IdentifierDecl	eType
>2934	Identifier	eType
>2935	IdentifierDeclType	GDALDataType
>2936	IdentifierDeclStatement	 
>2937	IdentifierDecl	nNoDataVal
>2938	Identifier	nNoDataVal
>2939	IdentifierDeclType	GUInt32
>2940	IdentifierDeclStatement	 
>2941	IdentifierDecl	eErr = CE_None
>2942	AssignmentExpr	eErr = CE_None
>2943	Identifier	CE_None
>2944	Identifier	CE_None
>2945	Identifier	eErr
>2946	IdentifierDeclType	CPLErr
>2947	IdentifierDeclStatement	 
>2948	IdentifierDecl	nYSize = GDALGetRasterBandYSize ( hTargetBand )
>2949	AssignmentExpr	nYSize = GDALGetRasterBandYSize ( hTargetBand )
>2950	CallExpression	GDALGetRasterBandYSize ( hTargetBand )
>2951	ArgumentList	hTargetBand
>2952	Argument	hTargetBand
>2953	Identifier	hTargetBand
>2954	Callee	GDALGetRasterBandYSize
>2955	Identifier	GDALGetRasterBandYSize
>2956	Identifier	nYSize
>2957	Identifier	nYSize
>2958	IdentifierDeclType	int
>2959	IdentifierDeclStatement	 
>2960	IdentifierDecl	nXSize = GDALGetRasterBandXSize ( hTargetBand )
>2961	AssignmentExpr	nXSize = GDALGetRasterBandXSize ( hTargetBand )
>2962	CallExpression	GDALGetRasterBandXSize ( hTargetBand )
>2963	ArgumentList	hTargetBand
>2964	Argument	hTargetBand
>2965	Identifier	hTargetBand
>2966	Callee	GDALGetRasterBandXSize
>2967	Identifier	GDALGetRasterBandXSize
>2968	Identifier	nXSize
>2969	Identifier	nXSize
>2970	IdentifierDeclType	int
>2971	ExpressionStatement	 
>2972	CallExpression	VALIDATE_POINTER1 ( hTargetBand , \"GDALFillNodata\" , CE_Failure )
>2973	ArgumentList	hTargetBand
>2974	Argument	CE_Failure
>2975	Identifier	CE_Failure
>2976	Argument	\"GDALFillNodata\"
>2977	PrimaryExpression	\"GDALFillNodata\"
>2978	Argument	hTargetBand
>2979	Identifier	hTargetBand
>2980	Callee	VALIDATE_POINTER1
>2981	Identifier	VALIDATE_POINTER1
<3=33,32,4
<4=29,26,23,20,17,14,11,8,5
<5=7,6
<8=10,9
<11=13,12
<14=16,15
<17=19,18
<20=22,21
<23=25,24
<26=28,27
<29=31,30
<33=307,34
<34=303,299,296,35
<35=279,270,263,256,184,160,144,118,46,36
<36=37
<37=43,38
<38=42,39
<39=41,40
<43=45,44
<46=114,47
<47=90,74,48
<48=62,49
<49=54,50
<50=51
<51=53,52
<54=55
<55=61,56
<56=60,57
<57=59,58
<62=63
<63=69,64
<64=68,65
<65=67,66
<69=73,70
<70=72,71
<74=86,75
<75=80,76
<76=77
<77=79,78
<80=81
<81=85,82
<82=84,83
<86=87
<87=89,88
<90=104,91
<91=96,92
<92=93
<93=95,94
<96=97
<97=103,98
<98=102,99
<99=101,100
<104=105
<105=111,106
<106=110,107
<107=109,108
<111=113,112
<114=115
<115=117,116
<118=132,119
<119=124,120
<120=121
<121=123,122
<124=125
<125=131,126
<126=130,127
<127=129,128
<132=133
<133=139,134
<134=138,135
<135=137,136
<139=143,140
<140=142,141
<144=156,145
<145=150,146
<146=147
<147=149,148
<150=151
<151=155,152
<152=154,153
<156=157
<157=159,158
<160=174,161
<161=166,162
<162=163
<163=165,164
<166=167
<167=173,168
<168=172,169
<169=171,170
<174=175
<175=181,176
<176=180,177
<177=179,178
<181=183,182
<184=252,185
<185=228,212,186
<186=200,187
<187=192,188
<188=189
<189=191,190
<192=193
<193=199,194
<194=198,195
<195=197,196
<200=201
<201=207,202
<202=206,203
<203=205,204
<207=211,208
<208=210,209
<212=224,213
<213=218,214
<214=215
<215=217,216
<218=219
<219=223,220
<220=222,221
<224=225
<225=227,226
<228=242,229
<229=234,230
<230=231
<231=233,232
<234=235
<235=241,236
<236=240,237
<237=239,238
<242=243
<243=249,244
<244=248,245
<245=247,246
<249=251,250
<252=253
<253=255,254
<256=257
<257=262,261,258
<258=260,259
<263=264
<264=269,268,265
<265=267,266
<270=271
<271=277,272
<272=273
<273=274
<274=276,275
<277=278
<279=290,280
<280=282,281
<282=283
<283=287,284
<284=286,285
<287=289,288
<290=291
<291=295,292
<292=294,293
<296=298,297
<299=300
<300=302,301
<303=304
<304=306,305
<307=308
<308=310,309
<336=357,356,337
<337=353,350,347,344,341,338
<338=340,339
<341=343,342
<344=346,345
<347=349,348
<350=352,351
<353=355,354
<357=1018,1014,1010,1000,991,984,980,968,956,949,921,908,895,876,845,383,381,374,367,360,358
<358=359
<360=361
<361=365,362
<362=363
<363=364
<365=366
<367=368
<368=372,369
<369=370
<370=371
<372=373
<374=375
<375=379,376
<376=377
<377=378
<379=380
<381=382
<383=841,831,828,384
<384=820,806,792,778,769,640,636,487,478,427,385
<385=402,386
<386=391,387
<387=388
<388=390,389
<391=392
<392=400,393
<393=398,396,394
<394=395
<396=397
<398=399
<400=401
<402=403
<403=424,404
<404=423,405
<405=421,406
<406=411,409,407
<407=408
<409=410
<411=412
<412=418,413
<413=417,414
<414=416,415
<418=420,419
<421=422
<424=426,425
<427=470,428
<428=464,429
<429=430
<430=463,431
<431=461,432
<432=459,457,455,453,451,449,443,441,439,437,435,433
<433=434
<435=436
<437=438
<439=440
<441=442
<443=444
<444=448,445
<445=447,446
<449=450
<451=452
<453=454
<455=456
<457=458
<459=460
<461=462
<464=465
<465=469,466
<466=468,467
<470=471
<471=475,472
<472=474,473
<475=477,476
<478=479
<479=486,485,480
<480=484,481
<481=483,482
<487=630,620,617,488
<488=607,599,593,585,557,544,489
<489=490
<490=542,491
<491=536,530,524,518,512,506,500,494,492
<492=493
<494=495
<495=499,496
<496=498,497
<500=501
<501=505,502
<502=504,503
<506=507
<507=511,508
<508=510,509
<512=513
<513=517,514
<514=516,515
<518=519
<519=523,520
<520=522,521
<524=525
<525=529,526
<526=528,527
<530=531
<531=535,532
<532=534,533
<536=537
<537=541,538
<538=540,539
<542=543
<544=547,545
<545=546
<547=548
<548=554,549
<549=553,550
<550=552,551
<554=556,555
<557=581,558
<558=559
<559=579,560
<560=573,567,561
<561=562
<562=564,563
<564=566,565
<567=568
<568=572,569
<569=571,570
<573=574
<574=578,575
<575=577,576
<579=580
<581=582
<582=584,583
<585=586
<586=592,587
<587=589,588
<589=591,590
<593=594
<594=598,595
<595=597,596
<599=600
<600=606,601
<601=603,602
<603=605,604
<607=614,611,608
<608=610,609
<611=613,612
<614=616,615
<617=619,618
<620=621
<621=627,622
<622=626,623
<623=625,624
<627=629,628
<630=631
<631=635,632
<632=634,633
<636=637
<637=639,638
<640=765,641
<641=730,724,689,683,648,642
<642=644,643
<644=645
<645=647,646
<648=649
<649=682,650
<650=680,651
<651=678,676,674,672,670,668,662,660,658,656,654,652
<652=653
<654=655
<656=657
<658=659
<660=661
<662=663
<663=667,664
<664=666,665
<668=669
<670=671
<672=673
<674=675
<676=677
<678=679
<680=681
<683=685,684
<685=686
<686=688,687
<689=690
<690=723,691
<691=721,692
<692=719,717,715,713,711,709,703,701,699,697,695,693
<693=694
<695=696
<697=698
<699=700
<701=702
<703=704
<704=708,705
<705=707,706
<709=710
<711=712
<713=714
<715=716
<717=718
<719=720
<721=722
<724=726,725
<726=727
<727=729,728
<730=731
<731=764,732
<732=762,733
<733=760,758,756,754,752,750,744,742,740,738,736,734
<734=735
<736=737
<738=739
<740=741
<742=743
<744=745
<745=749,746
<746=748,747
<750=751
<752=753
<754=755
<756=757
<758=759
<760=761
<762=763
<765=766
<766=768,767
<769=770
<770=777,776,771
<771=775,772
<772=774,773
<778=779
<779=791,780
<780=790,781
<781=785,782
<782=784,783
<785=787,786
<787=789,788
<792=793
<793=805,794
<794=804,795
<795=799,796
<796=798,797
<799=801,800
<801=803,802
<806=807
<807=819,808
<808=818,809
<809=813,810
<810=812,811
<813=815,814
<815=817,816
<820=821
<821=827,822
<822=824,823
<824=826,825
<828=830,829
<831=832
<832=838,833
<833=837,834
<834=836,835
<838=840,839
<841=842
<842=844,843
<845=864,846
<846=853,849,847
<847=848
<849=850
<850=852,851
<853=854
<854=862,855
<855=860,858,856
<856=857
<858=859
<860=861
<862=863
<864=865
<865=873,866
<866=870,867
<867=869,868
<870=872,871
<873=875,874
<876=877
<877=894,878
<878=893,879
<879=891,880
<880=889,887,881
<881=882
<882=886,883
<883=885,884
<887=888
<889=890
<891=892
<895=896
<896=907,897
<897=906,898
<898=904,899
<899=902,900
<900=901
<902=903
<904=905
<908=909
<909=920,910
<910=919,911
<911=917,912
<912=915,913
<913=914
<915=916
<917=918
<921=936,922
<922=925,923
<923=924
<925=926
<926=934,927
<927=932,930,928
<928=929
<930=931
<932=933
<934=935
<936=937
<937=948,938
<938=946,939
<939=944,942,940
<940=941
<942=943
<944=945
<946=947
<949=950
<950=955,954,951
<951=953,952
<956=957
<957=967,966,958
<958=965,959
<959=963,960
<960=961
<961=962
<963=964
<968=969
<969=979,978,970
<970=977,971
<971=975,972
<972=973
<973=974
<975=976
<980=981
<981=983,982
<984=985
<985=990,989,986
<986=988,987
<991=992
<992=999,998,993
<993=997,994
<994=996,995
<1000=1007,1004,1001
<1001=1003,1002
<1004=1006,1005
<1007=1009,1008
<1010=1011
<1011=1013,1012
<1014=1015
<1015=1017,1016
<1018=1019
<1019=1021,1020
<1065=1092,1091,1066
<1066=1088,1085,1082,1079,1076,1073,1070,1067
<1067=1069,1068
<1070=1072,1071
<1073=1075,1074
<1076=1078,1077
<1079=1081,1080
<1082=1084,1083
<1085=1087,1086
<1088=1090,1089
<1092=2971,2959,2947,2940,2936,2932,2914,2900,2872,2858,2845,2836,2808,2796,2777,2773,2769,2768,2758,2746,2737,2714,1093,1095,1104,1113,1122,1129,1136,1143,1150,1157,1164,1171,1178,1185,1192,1199,1206,1208,1270,2024,2332,2351,2406,2419,2432,2447,2462,2477,2492,2507,2522,2537,2541,2545,2552,2565,2575,2586,2593,2616,2625,2629,2633,2644,2651,2679,2688,2692,2696,2707
<1093=1094
<1095=1096
<1096=1102,1097
<1097=1100,1098
<1098=1099
<1100=1101
<1102=1103
<1104=1105
<1105=1111,1106
<1106=1109,1107
<1107=1108
<1109=1110
<1111=1112
<1113=1114
<1114=1120,1115
<1115=1118,1116
<1116=1117
<1118=1119
<1120=1121
<1122=1123
<1123=1127,1124
<1124=1125
<1125=1126
<1127=1128
<1129=1130
<1130=1134,1131
<1131=1132
<1132=1133
<1134=1135
<1136=1137
<1137=1141,1138
<1138=1139
<1139=1140
<1141=1142
<1143=1144
<1144=1148,1145
<1145=1146
<1146=1147
<1148=1149
<1150=1151
<1151=1155,1152
<1152=1153
<1153=1154
<1155=1156
<1157=1158
<1158=1162,1159
<1159=1160
<1160=1161
<1162=1163
<1164=1165
<1165=1169,1166
<1166=1167
<1167=1168
<1169=1170
<1171=1172
<1172=1176,1173
<1173=1174
<1174=1175
<1176=1177
<1178=1179
<1179=1183,1180
<1180=1181
<1181=1182
<1183=1184
<1185=1186
<1186=1190,1187
<1187=1188
<1188=1189
<1190=1191
<1192=1193
<1193=1197,1194
<1194=1195
<1195=1196
<1197=1198
<1199=1200
<1200=1204,1201
<1201=1202
<1202=1203
<1204=1205
<1206=1207
<1208=1262,1209
<1209=1255,1251,1236,1217,1210
<1210=1211
<1211=1215,1212
<1212=1213
<1213=1214
<1215=1216
<1217=1218
<1218=1235,1219
<1219=1233,1220
<1220=1231,1229,1227,1225,1223,1221
<1221=1222
<1223=1224
<1225=1226
<1227=1228
<1229=1230
<1231=1232
<1233=1234
<1236=1237
<1237=1250,1238
<1238=1248,1239
<1239=1246,1244,1242,1240
<1240=1241
<1242=1243
<1244=1245
<1246=1247
<1248=1249
<1251=1252
<1252=1254,1253
<1255=1256
<1256=1260,1257
<1257=1258
<1258=1259
<1260=1261
<1262=1263
<1263=1267,1264
<1264=1266,1265
<1267=1269,1268
<1270=2018,2010,2007,1271
<1271=1976,1970,1939,1933,1865,1834,1828,1797,1791,1780,1423,1392,1386,1355,1349,1318,1272
<1272=1289,1273
<1273=1278,1274
<1274=1275
<1275=1277,1276
<1278=1279
<1279=1287,1280
<1280=1285,1283,1281
<1281=1282
<1283=1284
<1285=1286
<1287=1288
<1289=1290
<1290=1315,1291
<1291=1314,1292
<1292=1312,1293
<1293=1298,1296,1294
<1294=1295
<1296=1297
<1298=1299
<1299=1311,1300
<1300=1310,1301
<1301=1309,1302
<1302=1306,1303
<1303=1305,1304
<1306=1308,1307
<1312=1313
<1315=1317,1316
<1318=1342,1338,1334,1327,1323,1319
<1319=1320
<1320=1322,1321
<1323=1324
<1324=1326,1325
<1327=1328
<1328=1333,1332,1329
<1329=1331,1330
<1334=1335
<1335=1337,1336
<1338=1339
<1339=1341,1340
<1342=1343
<1343=1348,1347,1344
<1344=1346,1345
<1349=1351,1350
<1351=1352
<1352=1354,1353
<1355=1356
<1356=1385,1357
<1357=1383,1358
<1358=1381,1379,1377,1375,1373,1371,1369,1367,1365,1363,1361,1359
<1359=1360
<1361=1362
<1363=1364
<1365=1366
<1367=1368
<1369=1370
<1371=1372
<1373=1374
<1375=1376
<1377=1378
<1379=1380
<1381=1382
<1383=1384
<1386=1388,1387
<1388=1389
<1389=1391,1390
<1392=1393
<1393=1422,1394
<1394=1420,1395
<1395=1418,1416,1414,1412,1410,1408,1406,1404,1402,1400,1398,1396
<1396=1397
<1398=1399
<1400=1401
<1402=1403
<1404=1405
<1406=1407
<1408=1409
<1410=1411
<1412=1413
<1414=1415
<1416=1417
<1418=1419
<1420=1421
<1423=1776,1772,1769,1424
<1424=1762,1755,1749,1744,1739,1719,1511,1504,1497,1453,1425
<1425=1449,1426
<1426=1443,1437,1427
<1427=1428
<1428=1434,1429
<1429=1433,1430
<1430=1432,1431
<1434=1436,1435
<1437=1438
<1438=1440,1439
<1440=1442,1441
<1443=1444
<1444=1446,1445
<1446=1448,1447
<1449=1450
<1450=1452,1451
<1453=1493,1489,1486,1454
<1454=1455
<1455=1480,1456
<1456=1469,1465,1457
<1457=1458
<1458=1464,1459
<1459=1461,1460
<1461=1463,1462
<1465=1466
<1466=1468,1467
<1469=1470
<1470=1479,1478,1471
<1471=1477,1472
<1472=1476,1473
<1473=1475,1474
<1480=1481
<1481=1483,1482
<1483=1485,1484
<1486=1488,1487
<1489=1490
<1490=1492,1491
<1493=1494
<1494=1496,1495
<1497=1498
<1498=1503,1502,1499
<1499=1501,1500
<1504=1505
<1505=1510,1509,1506
<1506=1508,1507
<1511=1715,1711,1708,1512
<1512=1692,1674,1647,1620,1614,1587,1560,1513
<1513=1554,1514
<1514=1515
<1515=1553,1516
<1516=1552,1517
<1517=1550,1518
<1518=1519
<1519=1520
<1520=1548,1521
<1521=1535,1522
<1522=1523
<1523=1533,1524
<1524=1529,1525
<1525=1526
<1526=1528,1527
<1529=1530
<1530=1532,1531
<1533=1534
<1535=1536
<1536=1546,1537
<1537=1542,1538
<1538=1539
<1539=1541,1540
<1542=1543
<1543=1545,1544
<1546=1547
<1548=1549
<1550=1551
<1554=1555
<1555=1557,1556
<1557=1559,1558
<1560=1561
<1561=1585,1562
<1562=1581,1577,1575,1571,1569,1567,1563
<1563=1564
<1564=1566,1565
<1567=1568
<1569=1570
<1571=1572
<1572=1574,1573
<1575=1576
<1577=1578
<1578=1580,1579
<1581=1582
<1582=1584,1583
<1585=1586
<1587=1588
<1588=1612,1589
<1589=1608,1604,1602,1598,1596,1594,1590
<1590=1591
<1591=1593,1592
<1594=1595
<1596=1597
<1598=1599
<1599=1601,1600
<1602=1603
<1604=1605
<1605=1607,1606
<1608=1609
<1609=1611,1610
<1612=1613
<1614=1616,1615
<1616=1617
<1617=1619,1618
<1620=1621
<1621=1645,1622
<1622=1641,1637,1635,1631,1629,1627,1623
<1623=1624
<1624=1626,1625
<1627=1628
<1629=1630
<1631=1632
<1632=1634,1633
<1635=1636
<1637=1638
<1638=1640,1639
<1641=1642
<1642=1644,1643
<1645=1646
<1647=1648
<1648=1672,1649
<1649=1668,1664,1662,1658,1656,1654,1650
<1650=1651
<1651=1653,1652
<1654=1655
<1656=1657
<1658=1659
<1659=1661,1660
<1662=1663
<1664=1665
<1665=1667,1666
<1668=1669
<1669=1671,1670
<1672=1673
<1674=1675
<1675=1691,1690,1676
<1676=1689,1677
<1677=1687,1678
<1678=1683,1679
<1679=1680
<1680=1682,1681
<1683=1684
<1684=1686,1685
<1687=1688
<1692=1693
<1693=1707,1706,1694
<1694=1705,1695
<1695=1703,1696
<1696=1701,1697
<1697=1698
<1698=1700,1699
<1701=1702
<1703=1704
<1708=1710,1709
<1711=1712
<1712=1714,1713
<1715=1716
<1716=1718,1717
<1719=1735,1731,1728,1720
<1720=1721
<1721=1725,1722
<1722=1724,1723
<1725=1727,1726
<1728=1730,1729
<1731=1732
<1732=1734,1733
<1735=1736
<1736=1738,1737
<1739=1740
<1740=1743,1742,1741
<1744=1745
<1745=1748,1747,1746
<1749=1751,1750
<1751=1752
<1752=1754,1753
<1755=1756
<1756=1761,1760,1757
<1757=1759,1758
<1762=1766,1763
<1763=1765,1764
<1766=1768,1767
<1769=1771,1770
<1772=1773
<1773=1775,1774
<1776=1777
<1777=1779,1778
<1780=1781
<1781=1789,1782
<1782=1787,1785,1783
<1783=1784
<1785=1786
<1787=1788
<1789=1790
<1791=1793,1792
<1793=1794
<1794=1796,1795
<1797=1798
<1798=1827,1799
<1799=1825,1800
<1800=1823,1821,1819,1817,1815,1813,1811,1809,1807,1805,1803,1801
<1801=1802
<1803=1804
<1805=1806
<1807=1808
<1809=1810
<1811=1812
<1813=1814
<1815=1816
<1817=1818
<1819=1820
<1821=1822
<1823=1824
<1825=1826
<1828=1830,1829
<1830=1831
<1831=1833,1832
<1834=1835
<1835=1864,1836
<1836=1862,1837
<1837=1860,1858,1856,1854,1852,1850,1848,1846,1844,1842,1840,1838
<1838=1839
<1840=1841
<1842=1843
<1844=1845
<1846=1847
<1848=1849
<1850=1851
<1852=1853
<1854=1855
<1856=1857
<1858=1859
<1860=1861
<1862=1863
<1865=1929,1925,1922,1866
<1866=1867
<1867=1918,1903,1868
<1868=1869
<1869=1895,1878,1870
<1870=1871
<1871=1872
<1872=1873
<1873=1875,1874
<1875=1877,1876
<1878=1887,1879
<1879=1880
<1880=1884,1881
<1881=1883,1882
<1884=1886,1885
<1887=1888
<1888=1892,1889
<1889=1891,1890
<1892=1894,1893
<1895=1896
<1896=1898,1897
<1898=1900,1899
<1900=1902,1901
<1903=1910,1904
<1904=1905
<1905=1907,1906
<1907=1909,1908
<1910=1911
<1911=1915,1912
<1912=1914,1913
<1915=1917,1916
<1918=1919
<1919=1921,1920
<1922=1924,1923
<1925=1926
<1926=1928,1927
<1929=1930
<1930=1932,1931
<1933=1935,1934
<1935=1936
<1936=1938,1937
<1939=1940
<1940=1969,1941
<1941=1967,1942
<1942=1965,1963,1961,1959,1957,1955,1953,1951,1949,1947,1945,1943
<1943=1944
<1945=1946
<1947=1948
<1949=1950
<1951=1952
<1953=1954
<1955=1956
<1957=1958
<1959=1960
<1961=1962
<1963=1964
<1965=1966
<1967=1968
<1970=1972,1971
<1972=1973
<1973=1975,1974
<1976=1977
<1977=2006,1978
<1978=2004,1979
<1979=2002,2000,1998,1996,1994,1992,1990,1988,1986,1984,1982,1980
<1980=1981
<1982=1983
<1984=1985
<1986=1987
<1988=1989
<1990=1991
<1992=1993
<1994=1995
<1996=1997
<1998=1999
<2000=2001
<2002=2003
<2004=2005
<2007=2009,2008
<2010=2011
<2011=2015,2012
<2012=2014,2013
<2015=2017,2016
<2018=2019
<2019=2023,2020
<2020=2022,2021
<2024=2328,2320,2317,2025
<2025=2286,2280,2249,2243,2175,2144,2138,2107,2101,2070,2026
<2026=2043,2027
<2027=2032,2028
<2028=2029
<2029=2031,2030
<2032=2033
<2033=2041,2034
<2034=2039,2037,2035
<2035=2036
<2037=2038
<2039=2040
<2041=2042
<2043=2044
<2044=2067,2045
<2045=2066,2046
<2046=2064,2047
<2047=2052,2050,2048
<2048=2049
<2050=2051
<2052=2053
<2053=2063,2054
<2054=2062,2055
<2055=2059,2056
<2056=2058,2057
<2059=2061,2060
<2064=2065
<2067=2069,2068
<2070=2094,2090,2086,2079,2075,2071
<2071=2072
<2072=2074,2073
<2075=2076
<2076=2078,2077
<2079=2080
<2080=2085,2084,2081
<2081=2083,2082
<2086=2087
<2087=2089,2088
<2090=2091
<2091=2093,2092
<2094=2095
<2095=2100,2099,2096
<2096=2098,2097
<2101=2103,2102
<2103=2104
<2104=2106,2105
<2107=2108
<2108=2137,2109
<2109=2135,2110
<2110=2133,2131,2129,2127,2125,2123,2121,2119,2117,2115,2113,2111
<2111=2112
<2113=2114
<2115=2116
<2117=2118
<2119=2120
<2121=2122
<2123=2124
<2125=2126
<2127=2128
<2129=2130
<2131=2132
<2133=2134
<2135=2136
<2138=2140,2139
<2140=2141
<2141=2143,2142
<2144=2145
<2145=2174,2146
<2146=2172,2147
<2147=2170,2168,2166,2164,2162,2160,2158,2156,2154,2152,2150,2148
<2148=2149
<2150=2151
<2152=2153
<2154=2155
<2156=2157
<2158=2159
<2160=2161
<2162=2163
<2164=2165
<2166=2167
<2168=2169
<2170=2171
<2172=2173
<2175=2239,2235,2232,2176
<2176=2177
<2177=2228,2213,2178
<2178=2179
<2179=2205,2188,2180
<2180=2181
<2181=2182
<2182=2183
<2183=2185,2184
<2185=2187,2186
<2188=2197,2189
<2189=2190
<2190=2194,2191
<2191=2193,2192
<2194=2196,2195
<2197=2198
<2198=2202,2199
<2199=2201,2200
<2202=2204,2203
<2205=2206
<2206=2208,2207
<2208=2212,2209
<2209=2211,2210
<2213=2220,2214
<2214=2215
<2215=2217,2216
<2217=2219,2218
<2220=2221
<2221=2225,2222
<2222=2224,2223
<2225=2227,2226
<2228=2229
<2229=2231,2230
<2232=2234,2233
<2235=2236
<2236=2238,2237
<2239=2240
<2240=2242,2241
<2243=2245,2244
<2245=2246
<2246=2248,2247
<2249=2250
<2250=2279,2251
<2251=2277,2252
<2252=2275,2273,2271,2269,2267,2265,2263,2261,2259,2257,2255,2253
<2253=2254
<2255=2256
<2257=2258
<2259=2260
<2261=2262
<2263=2264
<2265=2266
<2267=2268
<2269=2270
<2271=2272
<2273=2274
<2275=2276
<2277=2278
<2280=2282,2281
<2282=2283
<2283=2285,2284
<2286=2287
<2287=2316,2288
<2288=2314,2289
<2289=2312,2310,2308,2306,2304,2302,2300,2298,2296,2294,2292,2290
<2290=2291
<2292=2293
<2294=2295
<2296=2297
<2298=2299
<2300=2301
<2302=2303
<2304=2305
<2306=2307
<2308=2309
<2310=2311
<2312=2313
<2314=2315
<2317=2319,2318
<2320=2321
<2321=2325,2322
<2322=2324,2323
<2325=2327,2326
<2328=2329
<2329=2331,2330
<2332=2347,2343,2340,2333
<2333=2334
<2334=2335
<2335=2337,2336
<2337=2339,2338
<2340=2342,2341
<2343=2344
<2344=2346,2345
<2347=2348
<2348=2350,2349
<2351=2370,2352
<2352=2359,2355,2353
<2353=2354
<2355=2356
<2356=2358,2357
<2359=2360
<2360=2368,2361
<2361=2366,2364,2362
<2362=2363
<2364=2365
<2366=2367
<2368=2369
<2370=2371
<2371=2403,2372
<2372=2400,2373
<2373=2397,2374
<2374=2394,2375
<2375=2391,2376
<2376=2388,2377
<2377=2385,2378
<2378=2382,2379
<2379=2381,2380
<2382=2384,2383
<2385=2387,2386
<2388=2390,2389
<2391=2393,2392
<2394=2396,2395
<2397=2399,2398
<2400=2402,2401
<2403=2405,2404
<2406=2407
<2407=2418,2408
<2408=2417,2409
<2409=2415,2410
<2410=2413,2411
<2411=2412
<2413=2414
<2415=2416
<2419=2420
<2420=2431,2421
<2421=2430,2422
<2422=2428,2423
<2423=2426,2424
<2424=2425
<2426=2427
<2428=2429
<2432=2433
<2433=2446,2434
<2434=2445,2435
<2435=2443,2436
<2436=2441,2437
<2437=2438
<2438=2440,2439
<2441=2442
<2443=2444
<2447=2448
<2448=2461,2449
<2449=2460,2450
<2450=2458,2451
<2451=2456,2452
<2452=2453
<2453=2455,2454
<2456=2457
<2458=2459
<2462=2463
<2463=2476,2464
<2464=2475,2465
<2465=2473,2466
<2466=2471,2467
<2467=2468
<2468=2470,2469
<2471=2472
<2473=2474
<2477=2478
<2478=2491,2479
<2479=2490,2480
<2480=2488,2481
<2481=2486,2482
<2482=2483
<2483=2485,2484
<2486=2487
<2488=2489
<2492=2493
<2493=2506,2494
<2494=2505,2495
<2495=2503,2496
<2496=2501,2497
<2497=2498
<2498=2500,2499
<2501=2502
<2503=2504
<2507=2508
<2508=2521,2509
<2509=2520,2510
<2510=2518,2511
<2511=2516,2512
<2512=2513
<2513=2515,2514
<2516=2517
<2518=2519
<2522=2523
<2523=2536,2524
<2524=2535,2525
<2525=2533,2526
<2526=2531,2527
<2527=2528
<2528=2530,2529
<2531=2532
<2533=2534
<2537=2538
<2538=2540,2539
<2541=2542
<2542=2544,2543
<2545=2549,2546
<2546=2548,2547
<2549=2551,2550
<2552=2562,2559,2556,2553
<2553=2555,2554
<2556=2558,2557
<2559=2561,2560
<2562=2564,2563
<2565=2572,2569,2566
<2566=2568,2567
<2569=2571,2570
<2572=2574,2573
<2575=2576
<2576=2585,2577
<2577=2583,2578
<2578=2581,2579
<2579=2580
<2581=2582
<2583=2584
<2586=2589,2587
<2587=2588
<2589=2590
<2590=2592,2591
<2593=2594
<2594=2615,2595
<2595=2613,2596
<2596=2611,2609,2607,2605,2603,2601,2597
<2597=2598
<2598=2600,2599
<2601=2602
<2603=2604
<2605=2606
<2607=2608
<2609=2610
<2611=2612
<2613=2614
<2616=2617
<2617=2624,2623,2618
<2618=2622,2619
<2619=2621,2620
<2625=2626
<2626=2628,2627
<2629=2630
<2630=2632,2631
<2633=2634
<2634=2643,2635
<2635=2641,2636
<2636=2639,2637
<2637=2638
<2639=2640
<2641=2642
<2644=2647,2645
<2645=2646
<2647=2648
<2648=2650,2649
<2651=2652
<2652=2678,2653
<2653=2676,2654
<2654=2674,2672,2670,2668,2666,2659,2655
<2655=2656
<2656=2658,2657
<2659=2660
<2660=2664,2661
<2661=2662
<2662=2663
<2664=2665
<2666=2667
<2668=2669
<2670=2671
<2672=2673
<2674=2675
<2676=2677
<2679=2680
<2680=2687,2686,2681
<2681=2685,2682
<2682=2684,2683
<2688=2689
<2689=2691,2690
<2692=2693
<2693=2695,2694
<2696=2697
<2697=2706,2698
<2698=2704,2699
<2699=2702,2700
<2700=2701
<2702=2703
<2704=2705
<2707=2710,2708
<2708=2709
<2710=2711
<2711=2713,2712
<2714=2715
<2715=2736,2716
<2716=2734,2717
<2717=2732,2730,2728,2726,2724,2722,2718
<2718=2719
<2719=2721,2720
<2722=2723
<2724=2725
<2726=2727
<2728=2729
<2730=2731
<2732=2733
<2734=2735
<2737=2738
<2738=2745,2744,2739
<2739=2743,2740
<2740=2742,2741
<2746=2747
<2747=2757,2756,2748
<2748=2755,2749
<2749=2753,2750
<2750=2751
<2751=2752
<2753=2754
<2758=2759
<2759=2767,2766,2760
<2760=2765,2761
<2761=2764,2763,2762
<2769=2770
<2770=2772,2771
<2773=2774
<2774=2776,2775
<2777=2792,2778
<2778=2781,2779
<2779=2780
<2781=2782
<2782=2790,2783
<2783=2788,2786,2784
<2784=2785
<2786=2787
<2788=2789
<2790=2791
<2792=2793
<2793=2795,2794
<2796=2797
<2797=2807,2806,2798
<2798=2805,2799
<2799=2803,2800
<2800=2801
<2801=2802
<2803=2804
<2808=2823,2809
<2809=2812,2810
<2810=2811
<2812=2813
<2813=2821,2814
<2814=2819,2817,2815
<2815=2816
<2817=2818
<2819=2820
<2821=2822
<2823=2824
<2824=2835,2825
<2825=2833,2826
<2826=2831,2829,2827
<2827=2828
<2829=2830
<2831=2832
<2833=2834
<2836=2841,2837
<2837=2838
<2838=2840,2839
<2841=2842
<2842=2844,2843
<2845=2846
<2846=2857,2856,2847
<2847=2855,2848
<2848=2851,2850,2849
<2851=2852
<2852=2854,2853
<2858=2868,2859
<2859=2860
<2860=2867,2861
<2861=2865,2862
<2862=2863
<2863=2864
<2865=2866
<2868=2869
<2869=2871,2870
<2872=2892,2883,2873
<2873=2874
<2874=2879,2875
<2875=2876
<2876=2878,2877
<2879=2880
<2880=2882,2881
<2883=2888,2884
<2884=2885
<2885=2887,2886
<2888=2889
<2889=2891,2890
<2892=2893
<2893=2897,2894
<2894=2896,2895
<2897=2899,2898
<2900=2901
<2901=2913,2912,2902
<2902=2911,2903
<2903=2910,2904
<2904=2908,2905
<2905=2906
<2906=2907
<2908=2909
<2914=2928,2915
<2915=2916
<2916=2927,2917
<2917=2919,2918
<2919=2925,2920
<2920=2923,2921
<2921=2922
<2923=2924
<2925=2926
<2928=2929
<2929=2931,2930
<2932=2933
<2933=2935,2934
<2936=2937
<2937=2939,2938
<2940=2941
<2941=2946,2945,2942
<2942=2944,2943
<2947=2948
<2948=2958,2957,2949
<2949=2956,2950
<2950=2954,2951
<2951=2952
<2952=2953
<2954=2955
<2959=2960
<2960=2970,2969,2961
<2961=2968,2962
<2962=2966,2963
<2963=2964
<2964=2965
<2966=2967
<2971=2972
<2972=2980,2973
<2973=2978,2976,2974
<2974=2975
<2976=2977
<2978=2979
<2980=2981
