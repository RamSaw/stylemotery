>3	FunctionDef	T_FireFlicker (fireflicker_t * flick)
>4	ParameterList	fireflicker_t * flick
>5	Parameter	 
>6	Identifier	flick
>7	ParameterType	fireflicker_t *
>8	ReturnType	void
>9	CompoundStatement	 
>10	ExpressionStatement	 
>11	AssignmentExpr	flick -> count = 4
>12	PrimaryExpression	4
>13	PtrMemberAccess	flick -> count
>14	Identifier	count
>15	Identifier	flick
>16	IfStatement	if ( flick -> sector -> lightlevel - amount < flick -> minlight )
>17	ElseStatement	else
>18	ExpressionStatement	 
>19	AssignmentExpr	flick -> sector -> lightlevel = flick -> maxlight - amount
>20	AdditiveExpression	flick -> maxlight - amount
>21	Identifier	amount
>22	PtrMemberAccess	flick -> maxlight
>23	Identifier	maxlight
>24	Identifier	flick
>25	PtrMemberAccess	flick -> sector -> lightlevel
>26	Identifier	lightlevel
>27	PtrMemberAccess	flick -> sector
>28	Identifier	sector
>29	Identifier	flick
>30	ExpressionStatement	 
>31	AssignmentExpr	flick -> sector -> lightlevel = flick -> minlight
>32	PtrMemberAccess	flick -> minlight
>33	Identifier	minlight
>34	Identifier	flick
>35	PtrMemberAccess	flick -> sector -> lightlevel
>36	Identifier	lightlevel
>37	PtrMemberAccess	flick -> sector
>38	Identifier	sector
>39	Identifier	flick
>40	Condition	 
>41	RelationalExpression	flick -> sector -> lightlevel - amount < flick -> minlight
>42	PtrMemberAccess	flick -> minlight
>43	Identifier	minlight
>44	Identifier	flick
>45	AdditiveExpression	flick -> sector -> lightlevel - amount
>46	Identifier	amount
>47	PtrMemberAccess	flick -> sector -> lightlevel
>48	Identifier	lightlevel
>49	PtrMemberAccess	flick -> sector
>50	Identifier	sector
>51	Identifier	flick
>52	ExpressionStatement	 
>53	AssignmentExpr	amount = ( P_Random ( ) & 3 ) * 16
>54	MultiplicativeExpression	( P_Random ( ) & 3 ) * 16
>55	PrimaryExpression	16
>56	BitAndExpression	P_Random ( ) & 3
>57	PrimaryExpression	3
>58	CallExpression	P_Random ( )
>59	ArgumentList	 
>60	Callee	P_Random
>61	Identifier	P_Random
>62	Identifier	amount
>63	IfStatement	if ( -- flick -> count )
>64	ReturnStatement	 
>65	Condition	 
>66	UnaryExpression	-- flick -> count
>67	PtrMemberAccess	flick -> count
>68	Identifier	count
>69	Identifier	flick
>70	IncDec	--
>71	IdentifierDeclStatement	 
>72	IdentifierDecl	amount
>73	Identifier	amount
>74	IdentifierDeclType	int
>89	FunctionDef	P_SpawnFireFlicker (sector_t * sector)
>90	ParameterList	sector_t * sector
>91	Parameter	 
>92	Identifier	sector
>93	ParameterType	sector_t *
>94	ReturnType	void
>95	CompoundStatement	 
>96	ExpressionStatement	 
>97	AssignmentExpr	flick -> count = 4
>98	PrimaryExpression	4
>99	PtrMemberAccess	flick -> count
>100	Identifier	count
>101	Identifier	flick
>102	ExpressionStatement	 
>103	AssignmentExpr	flick -> minlight = P_FindMinSurroundingLight ( sector , sector -> lightlevel ) + 16
>104	AdditiveExpression	P_FindMinSurroundingLight ( sector , sector -> lightlevel ) + 16
>105	PrimaryExpression	16
>106	CallExpression	P_FindMinSurroundingLight ( sector , sector -> lightlevel )
>107	ArgumentList	sector
>108	Argument	sector -> lightlevel
>109	PtrMemberAccess	sector -> lightlevel
>110	Identifier	lightlevel
>111	Identifier	sector
>112	Argument	sector
>113	Identifier	sector
>114	Callee	P_FindMinSurroundingLight
>115	Identifier	P_FindMinSurroundingLight
>116	PtrMemberAccess	flick -> minlight
>117	Identifier	minlight
>118	Identifier	flick
>119	ExpressionStatement	 
>120	AssignmentExpr	flick -> maxlight = sector -> lightlevel
>121	PtrMemberAccess	sector -> lightlevel
>122	Identifier	lightlevel
>123	Identifier	sector
>124	PtrMemberAccess	flick -> maxlight
>125	Identifier	maxlight
>126	Identifier	flick
>127	ExpressionStatement	 
>128	AssignmentExpr	flick -> sector = sector
>129	Identifier	sector
>130	PtrMemberAccess	flick -> sector
>131	Identifier	sector
>132	Identifier	flick
>133	ExpressionStatement	 
>134	AssignmentExpr	flick -> thinker . function . acp1 = ( actionf_p1 ) T_FireFlicker
>135	CastExpression	( actionf_p1 ) T_FireFlicker
>136	Identifier	T_FireFlicker
>137	CastTarget	actionf_p1
>138	MemberAccess	flick -> thinker . function . acp1
>139	Identifier	acp1
>140	MemberAccess	flick -> thinker . function
>141	Identifier	function
>142	PtrMemberAccess	flick -> thinker
>143	Identifier	thinker
>144	Identifier	flick
>145	ExpressionStatement	 
>146	CallExpression	P_AddThinker ( & flick -> thinker )
>147	ArgumentList	& flick -> thinker
>148	Argument	& flick -> thinker
>149	UnaryOp	& flick -> thinker
>150	PtrMemberAccess	flick -> thinker
>151	Identifier	thinker
>152	Identifier	flick
>153	UnaryOperator	&
>154	Callee	P_AddThinker
>155	Identifier	P_AddThinker
>156	ExpressionStatement	 
>157	AssignmentExpr	flick = ( fireflicker_t * ) DoomLib 
>158	CastExpression	( fireflicker_t * ) DoomLib 
>159	CallExpression	DoomLib 
>160	ArgumentList	sizeof ( * flick )
>161	Argument	0
>162	PrimaryExpression	0
>163	Argument	PU_LEVEL
>164	Identifier	PU_LEVEL
>165	Argument	sizeof ( * flick )
>166	SizeofExpr	sizeof ( * flick )
>167	UnaryOp	* flick
>168	Identifier	flick
>169	UnaryOperator	*
>170	Sizeof	sizeof
>171	Callee	DoomLib 
>172	Identifier	DoomLib 
>173	CastTarget	fireflicker_t *
>174	Identifier	flick
>175	ExpressionStatement	 
>176	AssignmentExpr	sector -> special = 0
>177	PrimaryExpression	0
>178	PtrMemberAccess	sector -> special
>179	Identifier	special
>180	Identifier	sector
>181	IdentifierDeclStatement	 
>182	IdentifierDecl	* flick
>183	Identifier	flick
>184	IdentifierDeclType	fireflicker_t *
>207	FunctionDef	T_LightFlash (lightflash_t * flash)
>208	ParameterList	lightflash_t * flash
>209	Parameter	 
>210	Identifier	flash
>211	ParameterType	lightflash_t *
>212	ReturnType	void
>213	CompoundStatement	 
>214	IfStatement	if ( flash -> sector -> lightlevel == flash -> maxlight )
>215	ElseStatement	else
>216	CompoundStatement	 
>217	ExpressionStatement	 
>218	AssignmentExpr	flash -> count = ( P_Random ( ) & flash -> maxtime ) + 1
>219	AdditiveExpression	( P_Random ( ) & flash -> maxtime ) + 1
>220	PrimaryExpression	1
>221	BitAndExpression	P_Random ( ) & flash -> maxtime
>222	PtrMemberAccess	flash -> maxtime
>223	Identifier	maxtime
>224	Identifier	flash
>225	CallExpression	P_Random ( )
>226	ArgumentList	 
>227	Callee	P_Random
>228	Identifier	P_Random
>229	PtrMemberAccess	flash -> count
>230	Identifier	count
>231	Identifier	flash
>232	ExpressionStatement	 
>233	AssignmentExpr	flash -> sector -> lightlevel = flash -> maxlight
>234	PtrMemberAccess	flash -> maxlight
>235	Identifier	maxlight
>236	Identifier	flash
>237	PtrMemberAccess	flash -> sector -> lightlevel
>238	Identifier	lightlevel
>239	PtrMemberAccess	flash -> sector
>240	Identifier	sector
>241	Identifier	flash
>242	CompoundStatement	 
>243	ExpressionStatement	 
>244	AssignmentExpr	flash -> count = ( P_Random ( ) & flash -> mintime ) + 1
>245	AdditiveExpression	( P_Random ( ) & flash -> mintime ) + 1
>246	PrimaryExpression	1
>247	BitAndExpression	P_Random ( ) & flash -> mintime
>248	PtrMemberAccess	flash -> mintime
>249	Identifier	mintime
>250	Identifier	flash
>251	CallExpression	P_Random ( )
>252	ArgumentList	 
>253	Callee	P_Random
>254	Identifier	P_Random
>255	PtrMemberAccess	flash -> count
>256	Identifier	count
>257	Identifier	flash
>258	ExpressionStatement	 
>259	AssignmentExpr	flash -> sector -> lightlevel = flash -> minlight
>260	PtrMemberAccess	flash -> minlight
>261	Identifier	minlight
>262	Identifier	flash
>263	PtrMemberAccess	flash -> sector -> lightlevel
>264	Identifier	lightlevel
>265	PtrMemberAccess	flash -> sector
>266	Identifier	sector
>267	Identifier	flash
>268	Condition	 
>269	EqualityExpression	flash -> sector -> lightlevel == flash -> maxlight
>270	PtrMemberAccess	flash -> maxlight
>271	Identifier	maxlight
>272	Identifier	flash
>273	PtrMemberAccess	flash -> sector -> lightlevel
>274	Identifier	lightlevel
>275	PtrMemberAccess	flash -> sector
>276	Identifier	sector
>277	Identifier	flash
>278	IfStatement	if ( -- flash -> count )
>279	ReturnStatement	 
>280	Condition	 
>281	UnaryExpression	-- flash -> count
>282	PtrMemberAccess	flash -> count
>283	Identifier	count
>284	Identifier	flash
>285	IncDec	--
>301	FunctionDef	P_SpawnLightFlash (sector_t * sector)
>302	ParameterList	sector_t * sector
>303	Parameter	 
>304	Identifier	sector
>305	ParameterType	sector_t *
>306	ReturnType	void
>307	CompoundStatement	 
>308	ExpressionStatement	 
>309	AssignmentExpr	flash -> count = ( P_Random ( ) & flash -> maxtime ) + 1
>310	AdditiveExpression	( P_Random ( ) & flash -> maxtime ) + 1
>311	PrimaryExpression	1
>312	BitAndExpression	P_Random ( ) & flash -> maxtime
>313	PtrMemberAccess	flash -> maxtime
>314	Identifier	maxtime
>315	Identifier	flash
>316	CallExpression	P_Random ( )
>317	ArgumentList	 
>318	Callee	P_Random
>319	Identifier	P_Random
>320	PtrMemberAccess	flash -> count
>321	Identifier	count
>322	Identifier	flash
>323	ExpressionStatement	 
>324	AssignmentExpr	flash -> mintime = 7
>325	PrimaryExpression	7
>326	PtrMemberAccess	flash -> mintime
>327	Identifier	mintime
>328	Identifier	flash
>329	ExpressionStatement	 
>330	AssignmentExpr	flash -> maxtime = 64
>331	PrimaryExpression	64
>332	PtrMemberAccess	flash -> maxtime
>333	Identifier	maxtime
>334	Identifier	flash
>335	ExpressionStatement	 
>336	AssignmentExpr	flash -> minlight = P_FindMinSurroundingLight ( sector , sector -> lightlevel )
>337	CallExpression	P_FindMinSurroundingLight ( sector , sector -> lightlevel )
>338	ArgumentList	sector
>339	Argument	sector -> lightlevel
>340	PtrMemberAccess	sector -> lightlevel
>341	Identifier	lightlevel
>342	Identifier	sector
>343	Argument	sector
>344	Identifier	sector
>345	Callee	P_FindMinSurroundingLight
>346	Identifier	P_FindMinSurroundingLight
>347	PtrMemberAccess	flash -> minlight
>348	Identifier	minlight
>349	Identifier	flash
>350	ExpressionStatement	 
>351	AssignmentExpr	flash -> maxlight = sector -> lightlevel
>352	PtrMemberAccess	sector -> lightlevel
>353	Identifier	lightlevel
>354	Identifier	sector
>355	PtrMemberAccess	flash -> maxlight
>356	Identifier	maxlight
>357	Identifier	flash
>358	ExpressionStatement	 
>359	AssignmentExpr	flash -> sector = sector
>360	Identifier	sector
>361	PtrMemberAccess	flash -> sector
>362	Identifier	sector
>363	Identifier	flash
>364	ExpressionStatement	 
>365	AssignmentExpr	flash -> thinker . function . acp1 = ( actionf_p1 ) T_LightFlash
>366	CastExpression	( actionf_p1 ) T_LightFlash
>367	Identifier	T_LightFlash
>368	CastTarget	actionf_p1
>369	MemberAccess	flash -> thinker . function . acp1
>370	Identifier	acp1
>371	MemberAccess	flash -> thinker . function
>372	Identifier	function
>373	PtrMemberAccess	flash -> thinker
>374	Identifier	thinker
>375	Identifier	flash
>376	ExpressionStatement	 
>377	CallExpression	P_AddThinker ( & flash -> thinker )
>378	ArgumentList	& flash -> thinker
>379	Argument	& flash -> thinker
>380	UnaryOp	& flash -> thinker
>381	PtrMemberAccess	flash -> thinker
>382	Identifier	thinker
>383	Identifier	flash
>384	UnaryOperator	&
>385	Callee	P_AddThinker
>386	Identifier	P_AddThinker
>387	ExpressionStatement	 
>388	AssignmentExpr	flash = ( lightflash_t * ) DoomLib 
>389	CastExpression	( lightflash_t * ) DoomLib 
>390	CallExpression	DoomLib 
>391	ArgumentList	sizeof ( * flash )
>392	Argument	0
>393	PrimaryExpression	0
>394	Argument	PU_LEVEL
>395	Identifier	PU_LEVEL
>396	Argument	sizeof ( * flash )
>397	SizeofExpr	sizeof ( * flash )
>398	UnaryOp	* flash
>399	Identifier	flash
>400	UnaryOperator	*
>401	Sizeof	sizeof
>402	Callee	DoomLib 
>403	Identifier	DoomLib 
>404	CastTarget	lightflash_t *
>405	Identifier	flash
>406	ExpressionStatement	 
>407	AssignmentExpr	sector -> special = 0
>408	PrimaryExpression	0
>409	PtrMemberAccess	sector -> special
>410	Identifier	special
>411	Identifier	sector
>412	IdentifierDeclStatement	 
>413	IdentifierDecl	* flash
>414	Identifier	flash
>415	IdentifierDeclType	lightflash_t *
>441	FunctionDef	T_StrobeFlash (strobe_t * flash)
>442	ParameterList	strobe_t * flash
>443	Parameter	 
>444	Identifier	flash
>445	ParameterType	strobe_t *
>446	ReturnType	void
>447	CompoundStatement	 
>448	IfStatement	if ( flash -> sector -> lightlevel == flash -> minlight )
>449	ElseStatement	else
>450	CompoundStatement	 
>451	ExpressionStatement	 
>452	AssignmentExpr	flash -> count = flash -> darktime
>453	PtrMemberAccess	flash -> darktime
>454	Identifier	darktime
>455	Identifier	flash
>456	PtrMemberAccess	flash -> count
>457	Identifier	count
>458	Identifier	flash
>459	ExpressionStatement	 
>460	AssignmentExpr	flash -> sector -> lightlevel = flash -> minlight
>461	PtrMemberAccess	flash -> minlight
>462	Identifier	minlight
>463	Identifier	flash
>464	PtrMemberAccess	flash -> sector -> lightlevel
>465	Identifier	lightlevel
>466	PtrMemberAccess	flash -> sector
>467	Identifier	sector
>468	Identifier	flash
>469	CompoundStatement	 
>470	ExpressionStatement	 
>471	AssignmentExpr	flash -> count = flash -> brighttime
>472	PtrMemberAccess	flash -> brighttime
>473	Identifier	brighttime
>474	Identifier	flash
>475	PtrMemberAccess	flash -> count
>476	Identifier	count
>477	Identifier	flash
>478	ExpressionStatement	 
>479	AssignmentExpr	flash -> sector -> lightlevel = flash -> maxlight
>480	PtrMemberAccess	flash -> maxlight
>481	Identifier	maxlight
>482	Identifier	flash
>483	PtrMemberAccess	flash -> sector -> lightlevel
>484	Identifier	lightlevel
>485	PtrMemberAccess	flash -> sector
>486	Identifier	sector
>487	Identifier	flash
>488	Condition	 
>489	EqualityExpression	flash -> sector -> lightlevel == flash -> minlight
>490	PtrMemberAccess	flash -> minlight
>491	Identifier	minlight
>492	Identifier	flash
>493	PtrMemberAccess	flash -> sector -> lightlevel
>494	Identifier	lightlevel
>495	PtrMemberAccess	flash -> sector
>496	Identifier	sector
>497	Identifier	flash
>498	IfStatement	if ( -- flash -> count )
>499	ReturnStatement	 
>500	Condition	 
>501	UnaryExpression	-- flash -> count
>502	PtrMemberAccess	flash -> count
>503	Identifier	count
>504	Identifier	flash
>505	IncDec	--
>520	FunctionDef	P_SpawnStrobeFlash (sector_t * sector , int fastOrSlow , int inSync)
>521	ParameterList	sector_t * sector , int fastOrSlow , int inSync
>522	Parameter	 
>523	Identifier	inSync
>524	ParameterType	int
>525	Parameter	 
>526	Identifier	fastOrSlow
>527	ParameterType	int
>528	Parameter	 
>529	Identifier	sector
>530	ParameterType	sector_t *
>531	ReturnType	void
>532	CompoundStatement	 
>533	IfStatement	if ( ! inSync )
>534	ElseStatement	else
>535	ExpressionStatement	 
>536	AssignmentExpr	flash -> count = 1
>537	PrimaryExpression	1
>538	PtrMemberAccess	flash -> count
>539	Identifier	count
>540	Identifier	flash
>541	ExpressionStatement	 
>542	AssignmentExpr	flash -> count = ( P_Random ( ) & 7 ) + 1
>543	AdditiveExpression	( P_Random ( ) & 7 ) + 1
>544	PrimaryExpression	1
>545	BitAndExpression	P_Random ( ) & 7
>546	PrimaryExpression	7
>547	CallExpression	P_Random ( )
>548	ArgumentList	 
>549	Callee	P_Random
>550	Identifier	P_Random
>551	PtrMemberAccess	flash -> count
>552	Identifier	count
>553	Identifier	flash
>554	Condition	 
>555	UnaryOp	! inSync
>556	Identifier	inSync
>557	UnaryOperator	!
>558	ExpressionStatement	 
>559	AssignmentExpr	sector -> special = 0
>560	PrimaryExpression	0
>561	PtrMemberAccess	sector -> special
>562	Identifier	special
>563	Identifier	sector
>564	IfStatement	if ( flash -> minlight == flash -> maxlight )
>565	ExpressionStatement	 
>566	AssignmentExpr	flash -> minlight = 0
>567	PrimaryExpression	0
>568	PtrMemberAccess	flash -> minlight
>569	Identifier	minlight
>570	Identifier	flash
>571	Condition	 
>572	EqualityExpression	flash -> minlight == flash -> maxlight
>573	PtrMemberAccess	flash -> maxlight
>574	Identifier	maxlight
>575	Identifier	flash
>576	PtrMemberAccess	flash -> minlight
>577	Identifier	minlight
>578	Identifier	flash
>579	ExpressionStatement	 
>580	AssignmentExpr	flash -> minlight = P_FindMinSurroundingLight ( sector , sector -> lightlevel )
>581	CallExpression	P_FindMinSurroundingLight ( sector , sector -> lightlevel )
>582	ArgumentList	sector
>583	Argument	sector -> lightlevel
>584	PtrMemberAccess	sector -> lightlevel
>585	Identifier	lightlevel
>586	Identifier	sector
>587	Argument	sector
>588	Identifier	sector
>589	Callee	P_FindMinSurroundingLight
>590	Identifier	P_FindMinSurroundingLight
>591	PtrMemberAccess	flash -> minlight
>592	Identifier	minlight
>593	Identifier	flash
>594	ExpressionStatement	 
>595	AssignmentExpr	flash -> maxlight = sector -> lightlevel
>596	PtrMemberAccess	sector -> lightlevel
>597	Identifier	lightlevel
>598	Identifier	sector
>599	PtrMemberAccess	flash -> maxlight
>600	Identifier	maxlight
>601	Identifier	flash
>602	ExpressionStatement	 
>603	AssignmentExpr	flash -> thinker . function . acp1 = ( actionf_p1 ) T_StrobeFlash
>604	CastExpression	( actionf_p1 ) T_StrobeFlash
>605	Identifier	T_StrobeFlash
>606	CastTarget	actionf_p1
>607	MemberAccess	flash -> thinker . function . acp1
>608	Identifier	acp1
>609	MemberAccess	flash -> thinker . function
>610	Identifier	function
>611	PtrMemberAccess	flash -> thinker
>612	Identifier	thinker
>613	Identifier	flash
>614	ExpressionStatement	 
>615	AssignmentExpr	flash -> brighttime = STROBEBRIGHT
>616	Identifier	STROBEBRIGHT
>617	PtrMemberAccess	flash -> brighttime
>618	Identifier	brighttime
>619	Identifier	flash
>620	ExpressionStatement	 
>621	AssignmentExpr	flash -> darktime = fastOrSlow
>622	Identifier	fastOrSlow
>623	PtrMemberAccess	flash -> darktime
>624	Identifier	darktime
>625	Identifier	flash
>626	ExpressionStatement	 
>627	AssignmentExpr	flash -> sector = sector
>628	Identifier	sector
>629	PtrMemberAccess	flash -> sector
>630	Identifier	sector
>631	Identifier	flash
>632	ExpressionStatement	 
>633	CallExpression	P_AddThinker ( & flash -> thinker )
>634	ArgumentList	& flash -> thinker
>635	Argument	& flash -> thinker
>636	UnaryOp	& flash -> thinker
>637	PtrMemberAccess	flash -> thinker
>638	Identifier	thinker
>639	Identifier	flash
>640	UnaryOperator	&
>641	Callee	P_AddThinker
>642	Identifier	P_AddThinker
>643	ExpressionStatement	 
>644	AssignmentExpr	flash = ( strobe_t * ) DoomLib 
>645	CastExpression	( strobe_t * ) DoomLib 
>646	CallExpression	DoomLib 
>647	ArgumentList	sizeof ( * flash )
>648	Argument	0
>649	PrimaryExpression	0
>650	Argument	PU_LEVEL
>651	Identifier	PU_LEVEL
>652	Argument	sizeof ( * flash )
>653	SizeofExpr	sizeof ( * flash )
>654	UnaryOp	* flash
>655	Identifier	flash
>656	UnaryOperator	*
>657	Sizeof	sizeof
>658	Callee	DoomLib 
>659	Identifier	DoomLib 
>660	CastTarget	strobe_t *
>661	Identifier	flash
>662	IdentifierDeclStatement	 
>663	IdentifierDecl	* flash
>664	Identifier	flash
>665	IdentifierDeclType	strobe_t *
>694	FunctionDef	EV_StartLightStrobing (line_t * line)
>695	ParameterList	line_t * line
>696	Parameter	 
>697	Identifier	line
>698	ParameterType	line_t *
>699	ReturnType	void
>700	CompoundStatement	 
>701	WhileStatement	while ( ( secnum = P_FindSectorFromLineTag ( line , secnum ) ) >= 0 )
>702	CompoundStatement	 
>703	ExpressionStatement	 
>704	CallExpression	P_SpawnStrobeFlash ( sec , SLOWDARK , 0 )
>705	ArgumentList	sec
>706	Argument	0
>707	PrimaryExpression	0
>708	Argument	SLOWDARK
>709	Identifier	SLOWDARK
>710	Argument	sec
>711	Identifier	sec
>712	Callee	P_SpawnStrobeFlash
>713	Identifier	P_SpawnStrobeFlash
>714	IfStatement	if ( sec -> specialdata )
>715	ContinueStatement	 
>716	Condition	 
>717	PtrMemberAccess	sec -> specialdata
>718	Identifier	specialdata
>719	Identifier	sec
>720	ExpressionStatement	 
>721	ArrayIndexing	g -> sectors [ secnum ]
>722	Identifier	secnum
>723	PtrMemberAccess	g -> sectors
>724	Identifier	sectors
>725	Identifier	g
>726	Statement	 
>727	Statement	 
>728	Statement	 
>729	Statement	 
>730	Condition	 
>731	RelationalExpression	( secnum = P_FindSectorFromLineTag ( line , secnum ) ) >= 0
>732	PrimaryExpression	0
>733	AssignmentExpr	secnum = P_FindSectorFromLineTag ( line , secnum )
>734	CallExpression	P_FindSectorFromLineTag ( line , secnum )
>735	ArgumentList	line
>736	Argument	secnum
>737	Identifier	secnum
>738	Argument	line
>739	Identifier	line
>740	Callee	P_FindSectorFromLineTag
>741	Identifier	P_FindSectorFromLineTag
>742	Identifier	secnum
>743	ExpressionStatement	 
>744	AssignmentExpr	secnum = - 1
>745	UnaryOp	- 1
>746	PrimaryExpression	1
>747	UnaryOperator	-
>748	Identifier	secnum
>749	IdentifierDeclStatement	 
>750	IdentifierDecl	* sec
>751	Identifier	sec
>752	IdentifierDeclType	sector_t *
>753	IdentifierDeclStatement	 
>754	IdentifierDecl	secnum
>755	Identifier	secnum
>756	IdentifierDeclType	int
>770	FunctionDef	EV_TurnTagLightsOff (line_t * line)
>771	ParameterList	line_t * line
>772	Parameter	 
>773	Identifier	line
>774	ParameterType	line_t *
>775	ReturnType	void
>776	CompoundStatement	 
>777	CompoundStatement	 
>778	IfStatement	if ( sector -> tag == line -> tag )
>779	CompoundStatement	 
>780	ExpressionStatement	 
>781	AssignmentExpr	sector -> lightlevel = min
>782	Identifier	min
>783	PtrMemberAccess	sector -> lightlevel
>784	Identifier	lightlevel
>785	Identifier	sector
>786	ForStatement	for ( i = 0 ; i < sector -> linecount ; i ++ )
>787	CompoundStatement	 
>788	IfStatement	if ( tsec -> lightlevel < min )
>789	ExpressionStatement	 
>790	AssignmentExpr	min = tsec -> lightlevel
>791	PtrMemberAccess	tsec -> lightlevel
>792	Identifier	lightlevel
>793	Identifier	tsec
>794	Identifier	min
>795	Condition	 
>796	RelationalExpression	tsec -> lightlevel < min
>797	Identifier	min
>798	PtrMemberAccess	tsec -> lightlevel
>799	Identifier	lightlevel
>800	Identifier	tsec
>801	IfStatement	if ( ! tsec )
>802	ContinueStatement	 
>803	Condition	 
>804	UnaryOp	! tsec
>805	Identifier	tsec
>806	UnaryOperator	!
>807	ExpressionStatement	 
>808	AssignmentExpr	tsec = getNextSector ( templine , sector )
>809	CallExpression	getNextSector ( templine , sector )
>810	ArgumentList	templine
>811	Argument	sector
>812	Identifier	sector
>813	Argument	templine
>814	Identifier	templine
>815	Callee	getNextSector
>816	Identifier	getNextSector
>817	Identifier	tsec
>818	ExpressionStatement	 
>819	AssignmentExpr	templine = sector -> lines [ i ]
>820	ArrayIndexing	sector -> lines [ i ]
>821	Identifier	i
>822	PtrMemberAccess	sector -> lines
>823	Identifier	lines
>824	Identifier	sector
>825	Identifier	templine
>826	IncDecOp	 
>827	IncDec	++
>828	Identifier	i
>829	Condition	 
>830	RelationalExpression	i < sector -> linecount
>831	PtrMemberAccess	sector -> linecount
>832	Identifier	linecount
>833	Identifier	sector
>834	Identifier	i
>835	ForInit	 
>836	AssignmentExpr	i = 0
>837	PrimaryExpression	0
>838	Identifier	i
>839	ExpressionStatement	 
>840	AssignmentExpr	min = sector -> lightlevel
>841	PtrMemberAccess	sector -> lightlevel
>842	Identifier	lightlevel
>843	Identifier	sector
>844	Identifier	min
>845	Condition	 
>846	EqualityExpression	sector -> tag == line -> tag
>847	PtrMemberAccess	line -> tag
>848	Identifier	tag
>849	Identifier	line
>850	PtrMemberAccess	sector -> tag
>851	Identifier	tag
>852	Identifier	sector
>853	Statement	 
>854	Statement	 
>855	Statement	 
>856	Statement	 
>857	Statement	 
>858	Statement	 
>859	ExpressionStatement	 
>860	PtrMemberAccess	g -> numsectors
>861	Identifier	numsectors
>862	Identifier	g
>863	Statement	 
>864	Statement	 
>865	Statement	 
>866	ExpressionStatement	 
>867	AssignmentExpr	j = 0
>868	PrimaryExpression	0
>869	Identifier	j
>870	Statement	 
>871	Statement	 
>872	ExpressionStatement	 
>873	PtrMemberAccess	g -> sectors
>874	Identifier	sectors
>875	Identifier	g
>876	Statement	 
>877	Statement	 
>878	Statement	 
>879	IdentifierDeclStatement	 
>880	IdentifierDecl	* templine
>881	Identifier	templine
>882	IdentifierDeclType	line_t *
>883	IdentifierDeclStatement	 
>884	IdentifierDecl	* tsec
>885	Identifier	tsec
>886	IdentifierDeclType	sector_t *
>887	IdentifierDeclStatement	 
>888	IdentifierDecl	* sector
>889	Identifier	sector
>890	IdentifierDeclType	sector_t *
>891	IdentifierDeclStatement	 
>892	IdentifierDecl	min
>893	Identifier	min
>894	IdentifierDeclType	int
>895	IdentifierDeclStatement	 
>896	IdentifierDecl	j
>897	Identifier	j
>898	IdentifierDeclType	int
>899	IdentifierDeclStatement	 
>900	IdentifierDecl	i
>901	Identifier	i
>902	IdentifierDeclType	int
>927	FunctionDef	EV_LightTurnOn (line_t * line , int bright)
>928	ParameterList	line_t * line , int bright
>929	Parameter	 
>930	Identifier	bright
>931	ParameterType	int
>932	Parameter	 
>933	Identifier	line
>934	ParameterType	line_t *
>935	ReturnType	void
>936	CompoundStatement	 
>937	CompoundStatement	 
>938	IfStatement	if ( sector -> tag == line -> tag )
>939	CompoundStatement	 
>940	ExpressionStatement	 
>941	AssignmentExpr	sector -> lightlevel = bright
>942	Identifier	bright
>943	PtrMemberAccess	sector -> lightlevel
>944	Identifier	lightlevel
>945	Identifier	sector
>946	IfStatement	if ( ! bright )
>947	CompoundStatement	 
>948	ForStatement	for ( j = 0 ; j < sector -> linecount ; j ++ )
>949	CompoundStatement	 
>950	IfStatement	if ( temp -> lightlevel > bright )
>951	ExpressionStatement	 
>952	AssignmentExpr	bright = temp -> lightlevel
>953	PtrMemberAccess	temp -> lightlevel
>954	Identifier	lightlevel
>955	Identifier	temp
>956	Identifier	bright
>957	Condition	 
>958	RelationalExpression	temp -> lightlevel > bright
>959	Identifier	bright
>960	PtrMemberAccess	temp -> lightlevel
>961	Identifier	lightlevel
>962	Identifier	temp
>963	IfStatement	if ( ! temp )
>964	ContinueStatement	 
>965	Condition	 
>966	UnaryOp	! temp
>967	Identifier	temp
>968	UnaryOperator	!
>969	ExpressionStatement	 
>970	AssignmentExpr	temp = getNextSector ( templine , sector )
>971	CallExpression	getNextSector ( templine , sector )
>972	ArgumentList	templine
>973	Argument	sector
>974	Identifier	sector
>975	Argument	templine
>976	Identifier	templine
>977	Callee	getNextSector
>978	Identifier	getNextSector
>979	Identifier	temp
>980	ExpressionStatement	 
>981	AssignmentExpr	templine = sector -> lines [ j ]
>982	ArrayIndexing	sector -> lines [ j ]
>983	Identifier	j
>984	PtrMemberAccess	sector -> lines
>985	Identifier	lines
>986	Identifier	sector
>987	Identifier	templine
>988	IncDecOp	 
>989	IncDec	++
>990	Identifier	j
>991	Condition	 
>992	RelationalExpression	j < sector -> linecount
>993	PtrMemberAccess	sector -> linecount
>994	Identifier	linecount
>995	Identifier	sector
>996	Identifier	j
>997	ForInit	 
>998	AssignmentExpr	j = 0
>999	PrimaryExpression	0
>1000	Identifier	j
>1001	Condition	 
>1002	UnaryOp	! bright
>1003	Identifier	bright
>1004	UnaryOperator	!
>1005	Condition	 
>1006	EqualityExpression	sector -> tag == line -> tag
>1007	PtrMemberAccess	line -> tag
>1008	Identifier	tag
>1009	Identifier	line
>1010	PtrMemberAccess	sector -> tag
>1011	Identifier	tag
>1012	Identifier	sector
>1013	Statement	 
>1014	Statement	 
>1015	Statement	 
>1016	Statement	 
>1017	Statement	 
>1018	Statement	 
>1019	ExpressionStatement	 
>1020	PtrMemberAccess	g -> numsectors
>1021	Identifier	numsectors
>1022	Identifier	g
>1023	Statement	 
>1024	Statement	 
>1025	Statement	 
>1026	ExpressionStatement	 
>1027	AssignmentExpr	i = 0
>1028	PrimaryExpression	0
>1029	Identifier	i
>1030	Statement	 
>1031	Statement	 
>1032	ExpressionStatement	 
>1033	PtrMemberAccess	g -> sectors
>1034	Identifier	sectors
>1035	Identifier	g
>1036	Statement	 
>1037	Statement	 
>1038	Statement	 
>1039	IdentifierDeclStatement	 
>1040	IdentifierDecl	* templine
>1041	Identifier	templine
>1042	IdentifierDeclType	line_t *
>1043	IdentifierDeclStatement	 
>1044	IdentifierDecl	* temp
>1045	Identifier	temp
>1046	IdentifierDeclType	sector_t *
>1047	IdentifierDeclStatement	 
>1048	IdentifierDecl	* sector
>1049	Identifier	sector
>1050	IdentifierDeclType	sector_t *
>1051	IdentifierDeclStatement	 
>1052	IdentifierDecl	j
>1053	Identifier	j
>1054	IdentifierDeclType	int
>1055	IdentifierDeclStatement	 
>1056	IdentifierDecl	i
>1057	Identifier	i
>1058	IdentifierDeclType	int
>1083	FunctionDef	T_Glow (glow_t * g)
>1084	ParameterList	glow_t * g
>1085	Parameter	 
>1086	Identifier	g
>1087	ParameterType	glow_t *
>1088	ReturnType	void
>1089	CompoundStatement	 
>1090	SwitchStatement	switch ( g -> direction )
>1091	CompoundStatement	 
>1092	BreakStatement	 
>1093	IfStatement	if ( g -> sector -> lightlevel >= g -> maxlight )
>1094	CompoundStatement	 
>1095	ExpressionStatement	 
>1096	AssignmentExpr	g -> direction = - 1
>1097	UnaryOp	- 1
>1098	PrimaryExpression	1
>1099	UnaryOperator	-
>1100	PtrMemberAccess	g -> direction
>1101	Identifier	direction
>1102	Identifier	g
>1103	ExpressionStatement	 
>1104	AssignmentExpr	g -> sector -> lightlevel -= GLOWSPEED
>1105	Identifier	GLOWSPEED
>1106	PtrMemberAccess	g -> sector -> lightlevel
>1107	Identifier	lightlevel
>1108	PtrMemberAccess	g -> sector
>1109	Identifier	sector
>1110	Identifier	g
>1111	Condition	 
>1112	RelationalExpression	g -> sector -> lightlevel >= g -> maxlight
>1113	PtrMemberAccess	g -> maxlight
>1114	Identifier	maxlight
>1115	Identifier	g
>1116	PtrMemberAccess	g -> sector -> lightlevel
>1117	Identifier	lightlevel
>1118	PtrMemberAccess	g -> sector
>1119	Identifier	sector
>1120	Identifier	g
>1121	ExpressionStatement	 
>1122	AssignmentExpr	g -> sector -> lightlevel += GLOWSPEED
>1123	Identifier	GLOWSPEED
>1124	PtrMemberAccess	g -> sector -> lightlevel
>1125	Identifier	lightlevel
>1126	PtrMemberAccess	g -> sector
>1127	Identifier	sector
>1128	Identifier	g
>1129	Label	 
>1130	BreakStatement	 
>1131	IfStatement	if ( g -> sector -> lightlevel <= g -> minlight )
>1132	CompoundStatement	 
>1133	ExpressionStatement	 
>1134	AssignmentExpr	g -> direction = 1
>1135	PrimaryExpression	1
>1136	PtrMemberAccess	g -> direction
>1137	Identifier	direction
>1138	Identifier	g
>1139	ExpressionStatement	 
>1140	AssignmentExpr	g -> sector -> lightlevel += GLOWSPEED
>1141	Identifier	GLOWSPEED
>1142	PtrMemberAccess	g -> sector -> lightlevel
>1143	Identifier	lightlevel
>1144	PtrMemberAccess	g -> sector
>1145	Identifier	sector
>1146	Identifier	g
>1147	Condition	 
>1148	RelationalExpression	g -> sector -> lightlevel <= g -> minlight
>1149	PtrMemberAccess	g -> minlight
>1150	Identifier	minlight
>1151	Identifier	g
>1152	PtrMemberAccess	g -> sector -> lightlevel
>1153	Identifier	lightlevel
>1154	PtrMemberAccess	g -> sector
>1155	Identifier	sector
>1156	Identifier	g
>1157	ExpressionStatement	 
>1158	AssignmentExpr	g -> sector -> lightlevel -= GLOWSPEED
>1159	Identifier	GLOWSPEED
>1160	PtrMemberAccess	g -> sector -> lightlevel
>1161	Identifier	lightlevel
>1162	PtrMemberAccess	g -> sector
>1163	Identifier	sector
>1164	Identifier	g
>1165	Label	 
>1166	Statement	 
>1167	Statement	 
>1168	Condition	 
>1169	PtrMemberAccess	g -> direction
>1170	Identifier	direction
>1171	Identifier	g
>1185	FunctionDef	P_SpawnGlowingLight (sector_t * sector)
>1186	ParameterList	sector_t * sector
>1187	Parameter	 
>1188	Identifier	sector
>1189	ParameterType	sector_t *
>1190	ReturnType	void
>1191	CompoundStatement	 
>1192	ExpressionStatement	 
>1193	AssignmentExpr	sector -> special = 0
>1194	PrimaryExpression	0
>1195	PtrMemberAccess	sector -> special
>1196	Identifier	special
>1197	Identifier	sector
>1198	ExpressionStatement	 
>1199	AssignmentExpr	g -> direction = - 1
>1200	UnaryOp	- 1
>1201	PrimaryExpression	1
>1202	UnaryOperator	-
>1203	PtrMemberAccess	g -> direction
>1204	Identifier	direction
>1205	Identifier	g
>1206	ExpressionStatement	 
>1207	AssignmentExpr	g -> thinker . function . acp1 = ( actionf_p1 ) T_Glow
>1208	CastExpression	( actionf_p1 ) T_Glow
>1209	Identifier	T_Glow
>1210	CastTarget	actionf_p1
>1211	MemberAccess	g -> thinker . function . acp1
>1212	Identifier	acp1
>1213	MemberAccess	g -> thinker . function
>1214	Identifier	function
>1215	PtrMemberAccess	g -> thinker
>1216	Identifier	thinker
>1217	Identifier	g
>1218	ExpressionStatement	 
>1219	AssignmentExpr	g -> maxlight = sector -> lightlevel
>1220	PtrMemberAccess	sector -> lightlevel
>1221	Identifier	lightlevel
>1222	Identifier	sector
>1223	PtrMemberAccess	g -> maxlight
>1224	Identifier	maxlight
>1225	Identifier	g
>1226	ExpressionStatement	 
>1227	AssignmentExpr	g -> minlight = P_FindMinSurroundingLight ( sector , sector -> lightlevel )
>1228	CallExpression	P_FindMinSurroundingLight ( sector , sector -> lightlevel )
>1229	ArgumentList	sector
>1230	Argument	sector -> lightlevel
>1231	PtrMemberAccess	sector -> lightlevel
>1232	Identifier	lightlevel
>1233	Identifier	sector
>1234	Argument	sector
>1235	Identifier	sector
>1236	Callee	P_FindMinSurroundingLight
>1237	Identifier	P_FindMinSurroundingLight
>1238	PtrMemberAccess	g -> minlight
>1239	Identifier	minlight
>1240	Identifier	g
>1241	ExpressionStatement	 
>1242	AssignmentExpr	g -> sector = sector
>1243	Identifier	sector
>1244	PtrMemberAccess	g -> sector
>1245	Identifier	sector
>1246	Identifier	g
>1247	ExpressionStatement	 
>1248	CallExpression	P_AddThinker ( & g -> thinker )
>1249	ArgumentList	& g -> thinker
>1250	Argument	& g -> thinker
>1251	UnaryOp	& g -> thinker
>1252	PtrMemberAccess	g -> thinker
>1253	Identifier	thinker
>1254	Identifier	g
>1255	UnaryOperator	&
>1256	Callee	P_AddThinker
>1257	Identifier	P_AddThinker
>1258	ExpressionStatement	 
>1259	AssignmentExpr	g = ( glow_t * ) DoomLib 
>1260	CastExpression	( glow_t * ) DoomLib 
>1261	CallExpression	DoomLib 
>1262	ArgumentList	sizeof ( * g )
>1263	Argument	0
>1264	PrimaryExpression	0
>1265	Argument	PU_LEVEL
>1266	Identifier	PU_LEVEL
>1267	Argument	sizeof ( * g )
>1268	SizeofExpr	sizeof ( * g )
>1269	UnaryOp	* g
>1270	Identifier	g
>1271	UnaryOperator	*
>1272	Sizeof	sizeof
>1273	Callee	DoomLib 
>1274	Identifier	DoomLib 
>1275	CastTarget	glow_t *
>1276	Identifier	g
>1277	IdentifierDeclStatement	 
>1278	IdentifierDecl	* g
>1279	Identifier	g
>1280	IdentifierDeclType	glow_t *
<3=9,8,4
<4=5
<5=7,6
<9=71,63,52,16,10
<10=11
<11=13,12
<13=15,14
<16=40,30,17
<17=18
<18=19
<19=25,20
<20=22,21
<22=24,23
<25=27,26
<27=29,28
<30=31
<31=35,32
<32=34,33
<35=37,36
<37=39,38
<40=41
<41=45,42
<42=44,43
<45=47,46
<47=49,48
<49=51,50
<52=53
<53=62,54
<54=56,55
<56=58,57
<58=60,59
<60=61
<63=65,64
<65=66
<66=70,67
<67=69,68
<71=72
<72=74,73
<89=95,94,90
<90=91
<91=93,92
<95=181,175,156,145,133,127,119,102,96
<96=97
<97=99,98
<99=101,100
<102=103
<103=116,104
<104=106,105
<106=114,107
<107=112,108
<108=109
<109=111,110
<112=113
<114=115
<116=118,117
<119=120
<120=124,121
<121=123,122
<124=126,125
<127=128
<128=130,129
<130=132,131
<133=134
<134=138,135
<135=137,136
<138=140,139
<140=142,141
<142=144,143
<145=146
<146=154,147
<147=148
<148=149
<149=153,150
<150=152,151
<154=155
<156=157
<157=174,158
<158=173,159
<159=171,160
<160=165,163,161
<161=162
<163=164
<165=166
<166=170,167
<167=169,168
<171=172
<175=176
<176=178,177
<178=180,179
<181=182
<182=184,183
<207=213,212,208
<208=209
<209=211,210
<213=278,214
<214=268,242,215
<215=216
<216=232,217
<217=218
<218=229,219
<219=221,220
<221=225,222
<222=224,223
<225=227,226
<227=228
<229=231,230
<232=233
<233=237,234
<234=236,235
<237=239,238
<239=241,240
<242=258,243
<243=244
<244=255,245
<245=247,246
<247=251,248
<248=250,249
<251=253,252
<253=254
<255=257,256
<258=259
<259=263,260
<260=262,261
<263=265,264
<265=267,266
<268=269
<269=273,270
<270=272,271
<273=275,274
<275=277,276
<278=280,279
<280=281
<281=285,282
<282=284,283
<301=307,306,302
<302=303
<303=305,304
<307=412,406,387,376,364,358,350,335,329,323,308
<308=309
<309=320,310
<310=312,311
<312=316,313
<313=315,314
<316=318,317
<318=319
<320=322,321
<323=324
<324=326,325
<326=328,327
<329=330
<330=332,331
<332=334,333
<335=336
<336=347,337
<337=345,338
<338=343,339
<339=340
<340=342,341
<343=344
<345=346
<347=349,348
<350=351
<351=355,352
<352=354,353
<355=357,356
<358=359
<359=361,360
<361=363,362
<364=365
<365=369,366
<366=368,367
<369=371,370
<371=373,372
<373=375,374
<376=377
<377=385,378
<378=379
<379=380
<380=384,381
<381=383,382
<385=386
<387=388
<388=405,389
<389=404,390
<390=402,391
<391=396,394,392
<392=393
<394=395
<396=397
<397=401,398
<398=400,399
<402=403
<406=407
<407=409,408
<409=411,410
<412=413
<413=415,414
<441=447,446,442
<442=443
<443=445,444
<447=498,448
<448=488,469,449
<449=450
<450=459,451
<451=452
<452=456,453
<453=455,454
<456=458,457
<459=460
<460=464,461
<461=463,462
<464=466,465
<466=468,467
<469=478,470
<470=471
<471=475,472
<472=474,473
<475=477,476
<478=479
<479=483,480
<480=482,481
<483=485,484
<485=487,486
<488=489
<489=493,490
<490=492,491
<493=495,494
<495=497,496
<498=500,499
<500=501
<501=505,502
<502=504,503
<520=532,531,521
<521=528,525,522
<522=524,523
<525=527,526
<528=530,529
<532=662,643,632,626,620,614,602,594,579,564,558,533
<533=554,541,534
<534=535
<535=536
<536=538,537
<538=540,539
<541=542
<542=551,543
<543=545,544
<545=547,546
<547=549,548
<549=550
<551=553,552
<554=555
<555=557,556
<558=559
<559=561,560
<561=563,562
<564=571,565
<565=566
<566=568,567
<568=570,569
<571=572
<572=576,573
<573=575,574
<576=578,577
<579=580
<580=591,581
<581=589,582
<582=587,583
<583=584
<584=586,585
<587=588
<589=590
<591=593,592
<594=595
<595=599,596
<596=598,597
<599=601,600
<602=603
<603=607,604
<604=606,605
<607=609,608
<609=611,610
<611=613,612
<614=615
<615=617,616
<617=619,618
<620=621
<621=623,622
<623=625,624
<626=627
<627=629,628
<629=631,630
<632=633
<633=641,634
<634=635
<635=636
<636=640,637
<637=639,638
<641=642
<643=644
<644=661,645
<645=660,646
<646=658,647
<647=652,650,648
<648=649
<650=651
<652=653
<653=657,654
<654=656,655
<658=659
<662=663
<663=665,664
<694=700,699,695
<695=696
<696=698,697
<700=753,749,743,701
<701=730,702
<702=729,728,727,726,720,714,703
<703=704
<704=712,705
<705=710,708,706
<706=707
<708=709
<710=711
<712=713
<714=716,715
<716=717
<717=719,718
<720=721
<721=723,722
<723=725,724
<730=731
<731=733,732
<733=742,734
<734=740,735
<735=738,736
<736=737
<738=739
<740=741
<743=744
<744=748,745
<745=747,746
<749=750
<750=752,751
<753=754
<754=756,755
<770=776,775,771
<771=772
<772=774,773
<776=899,895,891,887,883,879,878,877,876,872,871,870,866,865,864,863,859,858,857,856,855,854,853,777
<777=778
<778=845,779
<779=839,786,780
<780=781
<781=783,782
<783=785,784
<786=835,829,826,787
<787=818,807,801,788
<788=795,789
<789=790
<790=794,791
<791=793,792
<795=796
<796=798,797
<798=800,799
<801=803,802
<803=804
<804=806,805
<807=808
<808=817,809
<809=815,810
<810=813,811
<811=812
<813=814
<815=816
<818=819
<819=825,820
<820=822,821
<822=824,823
<826=828,827
<829=830
<830=834,831
<831=833,832
<835=836
<836=838,837
<839=840
<840=844,841
<841=843,842
<845=846
<846=850,847
<847=849,848
<850=852,851
<859=860
<860=862,861
<866=867
<867=869,868
<872=873
<873=875,874
<879=880
<880=882,881
<883=884
<884=886,885
<887=888
<888=890,889
<891=892
<892=894,893
<895=896
<896=898,897
<899=900
<900=902,901
<927=936,935,928
<928=932,929
<929=931,930
<932=934,933
<936=1055,1051,1047,1043,1039,1038,1037,1036,1032,1031,1030,1026,1025,1024,1023,1019,1018,1017,1016,1015,1014,1013,937
<937=938
<938=1005,939
<939=946,940
<940=941
<941=943,942
<943=945,944
<946=1001,947
<947=948
<948=997,991,988,949
<949=980,969,963,950
<950=957,951
<951=952
<952=956,953
<953=955,954
<957=958
<958=960,959
<960=962,961
<963=965,964
<965=966
<966=968,967
<969=970
<970=979,971
<971=977,972
<972=975,973
<973=974
<975=976
<977=978
<980=981
<981=987,982
<982=984,983
<984=986,985
<988=990,989
<991=992
<992=996,993
<993=995,994
<997=998
<998=1000,999
<1001=1002
<1002=1004,1003
<1005=1006
<1006=1010,1007
<1007=1009,1008
<1010=1012,1011
<1019=1020
<1020=1022,1021
<1026=1027
<1027=1029,1028
<1032=1033
<1033=1035,1034
<1039=1040
<1040=1042,1041
<1043=1044
<1044=1046,1045
<1047=1048
<1048=1050,1049
<1051=1052
<1052=1054,1053
<1055=1056
<1056=1058,1057
<1083=1089,1088,1084
<1084=1085
<1085=1087,1086
<1089=1090
<1090=1168,1091
<1091=1167,1166,1165,1157,1131,1130,1129,1121,1093,1092
<1093=1111,1094
<1094=1103,1095
<1095=1096
<1096=1100,1097
<1097=1099,1098
<1100=1102,1101
<1103=1104
<1104=1106,1105
<1106=1108,1107
<1108=1110,1109
<1111=1112
<1112=1116,1113
<1113=1115,1114
<1116=1118,1117
<1118=1120,1119
<1121=1122
<1122=1124,1123
<1124=1126,1125
<1126=1128,1127
<1131=1147,1132
<1132=1139,1133
<1133=1134
<1134=1136,1135
<1136=1138,1137
<1139=1140
<1140=1142,1141
<1142=1144,1143
<1144=1146,1145
<1147=1148
<1148=1152,1149
<1149=1151,1150
<1152=1154,1153
<1154=1156,1155
<1157=1158
<1158=1160,1159
<1160=1162,1161
<1162=1164,1163
<1168=1169
<1169=1171,1170
<1185=1191,1190,1186
<1186=1187
<1187=1189,1188
<1191=1277,1258,1247,1241,1226,1218,1206,1198,1192
<1192=1193
<1193=1195,1194
<1195=1197,1196
<1198=1199
<1199=1203,1200
<1200=1202,1201
<1203=1205,1204
<1206=1207
<1207=1211,1208
<1208=1210,1209
<1211=1213,1212
<1213=1215,1214
<1215=1217,1216
<1218=1219
<1219=1223,1220
<1220=1222,1221
<1223=1225,1224
<1226=1227
<1227=1238,1228
<1228=1236,1229
<1229=1234,1230
<1230=1231
<1231=1233,1232
<1234=1235
<1236=1237
<1238=1240,1239
<1241=1242
<1242=1244,1243
<1244=1246,1245
<1247=1248
<1248=1256,1249
<1249=1250
<1250=1251
<1251=1255,1252
<1252=1254,1253
<1256=1257
<1258=1259
<1259=1276,1260
<1260=1275,1261
<1261=1273,1262
<1262=1267,1265,1263
<1263=1264
<1265=1266
<1267=1268
<1268=1272,1269
<1269=1271,1270
<1273=1274
<1277=1278
<1278=1280,1279
