>5	FunctionDef	visitor_type (osmium 
>6	ParameterList	osmium 
>7	Parameter	 
>8	Identifier	entity
>9	ParameterType	osmium 
>10	CompoundStatement	 
>15	FunctionDef	operator ( ) (JSHandler & handler)
>16	ParameterList	JSHandler & handler
>17	Parameter	 
>18	Identifier	handler
>19	ParameterType	JSHandler &
>20	ReturnType	void
>21	CompoundStatement	 
>22	ExpressionStatement	 
>23	CallExpression	handler . dispatch_entity ( m_entity )
>24	ArgumentList	m_entity
>25	Argument	m_entity
>26	Identifier	m_entity
>27	Callee	handler . dispatch_entity
>28	MemberAccess	handler . dispatch_entity
>29	Identifier	dispatch_entity
>30	Identifier	handler
>36	FunctionDef	operator ( ) (location_handler_type & handler)
>37	ParameterList	location_handler_type & handler
>38	Parameter	 
>39	Identifier	handler
>40	ParameterType	location_handler_type &
>41	ReturnType	void
>42	CompoundStatement	 
>43	ExpressionStatement	 
>44	CallExpression	osmium 
>45	ArgumentList	m_entity
>46	Argument	handler
>47	Identifier	handler
>48	Argument	m_entity
>49	Identifier	m_entity
>50	Callee	osmium 
>51	Identifier	osmium 
>57	FunctionDef	operator ( ) (osmium 
>58	ParameterList	osmium 
>59	Parameter	 
>60	Identifier	handler
>61	ParameterType	osmium 
>62	ReturnType	void
>63	CompoundStatement	 
>64	ExpressionStatement	 
>65	CallExpression	osmium 
>66	ArgumentList	m_entity
>67	Argument	handler
>68	Identifier	handler
>69	Argument	m_entity
>70	Identifier	m_entity
>71	Callee	osmium 
>72	Identifier	osmium 
>82	FunctionDef	visitor_before_after_type (osmium 
>83	ParameterList	osmium 
>84	Parameter	 
>85	Identifier	current
>86	ParameterType	osmium 
>87	Parameter	 
>88	Identifier	last
>89	ParameterType	osmium 
>90	CompoundStatement	 
>96	FunctionDef	operator ( ) (location_handler_type & visitor)
>97	ParameterList	location_handler_type & visitor
>98	Parameter	 
>99	Identifier	visitor
>100	ParameterType	location_handler_type &
>101	ReturnType	void
>102	CompoundStatement	 
>107	FunctionDef	operator ( ) (osmium 
>108	ParameterList	osmium 
>109	Parameter	 
>110	Identifier	handler
>111	ParameterType	osmium 
>112	ReturnType	void
>113	CompoundStatement	 
>118	FunctionDef	operator ( ) (JSHandler & visitor)
>119	ParameterList	JSHandler & visitor
>120	Parameter	 
>121	Identifier	visitor
>122	ParameterType	JSHandler &
>123	ReturnType	void
>124	CompoundStatement	 
>125	SwitchStatement	switch ( m_current )
>126	CompoundStatement	 
>127	BreakStatement	 
>128	Label	 
>129	Identifier	default
>130	BreakStatement	 
>131	ExpressionStatement	 
>132	CallExpression	visitor . before_changesets ( )
>133	ArgumentList	 
>134	Callee	visitor . before_changesets
>135	MemberAccess	visitor . before_changesets
>136	Identifier	before_changesets
>137	Identifier	visitor
>138	Label	 
>139	Identifier	osmium 
>140	BreakStatement	 
>141	ExpressionStatement	 
>142	CallExpression	visitor . before_relations ( )
>143	ArgumentList	 
>144	Callee	visitor . before_relations
>145	MemberAccess	visitor . before_relations
>146	Identifier	before_relations
>147	Identifier	visitor
>148	Label	 
>149	Identifier	osmium 
>150	BreakStatement	 
>151	ExpressionStatement	 
>152	CallExpression	visitor . before_ways ( )
>153	ArgumentList	 
>154	Callee	visitor . before_ways
>155	MemberAccess	visitor . before_ways
>156	Identifier	before_ways
>157	Identifier	visitor
>158	Label	 
>159	Identifier	osmium 
>160	BreakStatement	 
>161	ExpressionStatement	 
>162	CallExpression	visitor . before_nodes ( )
>163	ArgumentList	 
>164	Callee	visitor . before_nodes
>165	MemberAccess	visitor . before_nodes
>166	Identifier	before_nodes
>167	Identifier	visitor
>168	Label	 
>169	Identifier	osmium 
>170	BreakStatement	 
>171	ExpressionStatement	 
>172	CallExpression	visitor . done ( )
>173	ArgumentList	 
>174	Callee	visitor . done
>175	MemberAccess	visitor . done
>176	Identifier	done
>177	Identifier	visitor
>178	Label	 
>179	Identifier	osmium 
>180	Condition	 
>181	Identifier	m_current
>182	SwitchStatement	switch ( m_last )
>183	CompoundStatement	 
>184	BreakStatement	 
>185	Label	 
>186	Identifier	default
>187	BreakStatement	 
>188	ExpressionStatement	 
>189	CallExpression	visitor . after_changesets ( )
>190	ArgumentList	 
>191	Callee	visitor . after_changesets
>192	MemberAccess	visitor . after_changesets
>193	Identifier	after_changesets
>194	Identifier	visitor
>195	Label	 
>196	Identifier	osmium 
>197	BreakStatement	 
>198	ExpressionStatement	 
>199	CallExpression	visitor . after_relations ( )
>200	ArgumentList	 
>201	Callee	visitor . after_relations
>202	MemberAccess	visitor . after_relations
>203	Identifier	after_relations
>204	Identifier	visitor
>205	Label	 
>206	Identifier	osmium 
>207	BreakStatement	 
>208	ExpressionStatement	 
>209	CallExpression	visitor . after_ways ( )
>210	ArgumentList	 
>211	Callee	visitor . after_ways
>212	MemberAccess	visitor . after_ways
>213	Identifier	after_ways
>214	Identifier	visitor
>215	Label	 
>216	Identifier	osmium 
>217	BreakStatement	 
>218	ExpressionStatement	 
>219	CallExpression	visitor . after_nodes ( )
>220	ArgumentList	 
>221	Callee	visitor . after_nodes
>222	MemberAccess	visitor . after_nodes
>223	Identifier	after_nodes
>224	Identifier	visitor
>225	Label	 
>226	Identifier	osmium 
>227	BreakStatement	 
>228	ExpressionStatement	 
>229	CallExpression	visitor . init ( )
>230	ArgumentList	 
>231	Callee	visitor . init
>232	MemberAccess	visitor . init
>233	Identifier	init
>234	Identifier	visitor
>235	Label	 
>236	Identifier	osmium 
>237	Condition	 
>238	Identifier	m_last
>247	FunctionDef	apply_iterator (TIter it , TIter end , std 
>248	ParameterList	TIter it , TIter end , std 
>249	Parameter	 
>250	Identifier	handlers
>251	ParameterType	std 
>252	Parameter	 
>253	Identifier	end
>254	ParameterType	TIter
>255	Parameter	 
>256	Identifier	it
>257	ParameterType	TIter
>258	ReturnType	v8 
>259	CompoundStatement	 
>260	ReturnStatement	 
>261	CallExpression	scope . Close ( v8 
>262	ArgumentList	v8 
>263	Argument	v8 
>264	CallExpression	v8 
>265	ArgumentList	 
>266	Callee	v8 
>267	Identifier	v8 
>268	Callee	scope . Close
>269	MemberAccess	scope . Close
>270	Identifier	Close
>271	Identifier	scope
>272	BlockStarter	 
>273	CompoundStatement	 
>274	ReturnStatement	return ThrowException ( v8 
>275	CallExpression	ThrowException ( v8 
>276	ArgumentList	v8 
>277	Argument	v8 
>278	CallExpression	v8 
>279	ArgumentList	v8 
>280	Argument	v8 
>281	CallExpression	v8 
>282	ArgumentList	msg . c_str ( )
>283	Argument	msg . c_str ( )
>284	CallExpression	msg . c_str ( )
>285	ArgumentList	 
>286	Callee	msg . c_str
>287	MemberAccess	msg . c_str
>288	Identifier	c_str
>289	Identifier	msg
>290	Callee	v8 
>291	Identifier	v8 
>292	Callee	v8 
>293	Identifier	v8 
>294	Callee	ThrowException
>295	Identifier	ThrowException
>296	ExpressionStatement	msg += e . what ( )
>297	AssignmentExpr	msg += e . what ( )
>298	CallExpression	e . what ( )
>299	ArgumentList	 
>300	Callee	e . what
>301	MemberAccess	e . what
>302	Identifier	what
>303	Identifier	e
>304	Identifier	msg
>305	IdentifierDeclStatement	std 
>306	IdentifierDecl	msg ( \"osmium error
>307	PrimaryExpression	\"osmium error
>308	Identifier	msg
>309	IdentifierDeclType	std 
>310	Identifier	e
>311	BlockStarter	 
>312	CompoundStatement	 
>313	ExpressionStatement	trycatch . ReThrow ( )
>314	CallExpression	trycatch . ReThrow ( )
>315	ArgumentList	 
>316	Callee	trycatch . ReThrow
>317	MemberAccess	trycatch . ReThrow
>318	Identifier	ReThrow
>319	Identifier	trycatch
>320	BlockStarter	 
>321	CompoundStatement	 
>322	CompoundStatement	 
>323	IfStatement	if ( trycatch . HasCaught ( ) )
>324	CompoundStatement	 
>325	ExpressionStatement	javascript_error ( )
>326	CallExpression	javascript_error ( )
>327	ArgumentList	 
>328	Callee	javascript_error
>329	Identifier	javascript_error
>330	Statement	throw
>331	Condition	trycatch . HasCaught ( )
>332	CallExpression	trycatch . HasCaught ( )
>333	ArgumentList	 
>334	Callee	trycatch . HasCaught
>335	MemberAccess	trycatch . HasCaught
>336	Identifier	HasCaught
>337	Identifier	trycatch
>338	ExpressionStatement	boost 
>339	CallExpression	boost 
>340	ArgumentList	visitor_before_after
>341	Argument	handler
>342	Identifier	handler
>343	Argument	visitor_before_after
>344	Identifier	visitor_before_after
>345	Callee	boost 
>346	Identifier	boost 
>347	Statement	)
>348	Statement	handlers
>349	Label	handler 
>350	Identifier	handler
>351	Statement	&
>352	Statement	auto
>353	Statement	(
>354	Statement	for
>355	IdentifierDeclStatement	visitor_before_after_type visitor_before_after ( last_type , osmium 
>356	IdentifierDecl	visitor_before_after ( last_type , osmium 
>357	Expression	last_type , osmium 
>358	Identifier	osmium 
>359	Identifier	last_type
>360	Identifier	visitor_before_after
>361	IdentifierDeclType	visitor_before_after_type
>362	ForStatement	for ( ; it != end ; ++ it )
>363	CompoundStatement	 
>364	IfStatement	if ( last_type != it -> type ( ) )
>365	CompoundStatement	 
>366	ExpressionStatement	last_type = it -> type ( )
>367	AssignmentExpr	last_type = it -> type ( )
>368	CallExpression	it -> type ( )
>369	ArgumentList	 
>370	Callee	it -> type
>371	PtrMemberAccess	it -> type
>372	Identifier	type
>373	Identifier	it
>374	Identifier	last_type
>375	Condition	last_type != it -> type ( )
>376	EqualityExpression	last_type != it -> type ( )
>377	CallExpression	it -> type ( )
>378	ArgumentList	 
>379	Callee	it -> type
>380	PtrMemberAccess	it -> type
>381	Identifier	type
>382	Identifier	it
>383	Identifier	last_type
>384	CompoundStatement	 
>385	IfStatement	if ( trycatch . HasCaught ( ) )
>386	CompoundStatement	 
>387	ExpressionStatement	javascript_error ( )
>388	CallExpression	javascript_error ( )
>389	ArgumentList	 
>390	Callee	javascript_error
>391	Identifier	javascript_error
>392	Statement	throw
>393	Condition	trycatch . HasCaught ( )
>394	CallExpression	trycatch . HasCaught ( )
>395	ArgumentList	 
>396	Callee	trycatch . HasCaught
>397	MemberAccess	trycatch . HasCaught
>398	Identifier	HasCaught
>399	Identifier	trycatch
>400	ExpressionStatement	boost 
>401	CallExpression	boost 
>402	ArgumentList	visitor
>403	Argument	handler
>404	Identifier	handler
>405	Argument	visitor
>406	Identifier	visitor
>407	Callee	boost 
>408	Identifier	boost 
>409	IfStatement	if ( last_type != it -> type ( ) )
>410	CompoundStatement	 
>411	IfStatement	if ( trycatch . HasCaught ( ) )
>412	CompoundStatement	 
>413	ExpressionStatement	javascript_error ( )
>414	CallExpression	javascript_error ( )
>415	ArgumentList	 
>416	Callee	javascript_error
>417	Identifier	javascript_error
>418	Statement	throw
>419	Condition	trycatch . HasCaught ( )
>420	CallExpression	trycatch . HasCaught ( )
>421	ArgumentList	 
>422	Callee	trycatch . HasCaught
>423	MemberAccess	trycatch . HasCaught
>424	Identifier	HasCaught
>425	Identifier	trycatch
>426	ExpressionStatement	boost 
>427	CallExpression	boost 
>428	ArgumentList	visitor_before_after
>429	Argument	handler
>430	Identifier	handler
>431	Argument	visitor_before_after
>432	Identifier	visitor_before_after
>433	Callee	boost 
>434	Identifier	boost 
>435	Condition	last_type != it -> type ( )
>436	EqualityExpression	last_type != it -> type ( )
>437	CallExpression	it -> type ( )
>438	ArgumentList	 
>439	Callee	it -> type
>440	PtrMemberAccess	it -> type
>441	Identifier	type
>442	Identifier	it
>443	Identifier	last_type
>444	Statement	)
>445	Statement	handlers
>446	Label	handler 
>447	Identifier	handler
>448	Statement	&
>449	Statement	auto
>450	Statement	(
>451	Statement	for
>452	IdentifierDeclStatement	visitor_type visitor ( * it ) ;
>453	IdentifierDecl	visitor ( * it )
>454	UnaryOp	* it
>455	Identifier	it
>456	UnaryOperator	*
>457	Identifier	visitor
>458	IdentifierDeclType	visitor_type
>459	IdentifierDeclStatement	visitor_before_after_type visitor_before_after ( last_type , it -> type ( ) ) ;
>460	IdentifierDecl	visitor_before_after ( last_type , it -> type ( ) )
>461	Expression	last_type , it -> type ( )
>462	CallExpression	it -> type ( )
>463	ArgumentList	 
>464	Callee	it -> type
>465	PtrMemberAccess	it -> type
>466	Identifier	type
>467	Identifier	it
>468	Identifier	last_type
>469	Identifier	visitor_before_after
>470	IdentifierDeclType	visitor_before_after_type
>471	UnaryExpression	++ it
>472	Identifier	it
>473	IncDec	++
>474	Condition	it != end
>475	EqualityExpression	it != end
>476	Identifier	end
>477	Identifier	it
>478	IdentifierDeclStatement	osmium 
>479	IdentifierDecl	last_type = osmium 
>480	AssignmentExpr	last_type = osmium 
>481	Identifier	osmium 
>482	Identifier	osmium 
>483	Identifier	last_type
>484	IdentifierDeclType	osmium 
>485	IdentifierDeclStatement	 
>486	IdentifierDecl	trycatch
>487	Identifier	trycatch
>488	IdentifierDeclType	v8 
>489	IdentifierDeclStatement	 
>490	IdentifierDecl	scope
>491	Identifier	scope
>492	IdentifierDeclType	v8 
>493	ExpressionStatement	 
>494	ClassDefStatement	 
>520	FunctionDef	apply (const v8 
>521	ParameterList	const v8 
>522	Parameter	 
>523	Identifier	args
>524	ParameterType	const v8 
>525	ReturnType	v8 
>526	CompoundStatement	 
>527	ReturnStatement	 
>528	CallExpression	ThrowException ( v8 
>529	ArgumentList	v8 
>530	Argument	v8 
>531	CallExpression	v8 
>532	ArgumentList	v8 
>533	Argument	v8 
>534	CallExpression	v8 
>535	ArgumentList	\"please provide a BasicReader, FlexReader or Buffer object as first parameter\"
>536	Argument	\"please provide a BasicReader, FlexReader or Buffer object as first parameter\"
>537	PrimaryExpression	\"please provide a BasicReader, FlexReader or Buffer object as first parameter\"
>538	Callee	v8 
>539	Identifier	v8 
>540	Callee	v8 
>541	Identifier	v8 
>542	Callee	ThrowException
>543	Identifier	ThrowException
>544	IfStatement	if ( args . Length ( ) > 0 && args [ 0 ] -> IsObject ( ) )
>545	CompoundStatement	 
>546	IfStatement	if ( BasicReaderWrap 
>547	ElseStatement	else
>548	IfStatement	if ( FlexReaderWrap 
>549	ElseStatement	else
>550	IfStatement	if ( BufferWrap 
>551	ElseStatement	else
>552	IfStatement	if ( node 
>553	CompoundStatement	 
>554	ExpressionStatement	 
>555	Statement	 
>556	Statement	 
>557	Statement	 
>558	Statement	 
>559	Statement	 
>560	Statement	 
>561	Statement	 
>562	Statement	 
>563	Statement	 
>564	Statement	 
>565	Statement	 
>566	Statement	 
>567	Statement	 
>568	Statement	 
>569	Statement	 
>570	Statement	 
>571	Statement	 
>572	Statement	 
>573	Statement	 
>574	Statement	 
>575	Statement	 
>576	Statement	 
>577	Statement	 
>578	Statement	 
>579	Statement	 
>580	Statement	 
>581	Statement	 
>582	Statement	 
>583	Statement	 
>584	Statement	 
>585	Statement	 
>586	Statement	 
>587	IdentifierDeclStatement	 
>588	IdentifierDecl	buffer ( reinterpret_cast < unsigned char * > ( node 
>589	Identifier	source
>590	Identifier	node 
>591	Identifier	buffer
>592	IdentifierDeclType	osmium 
>593	Condition	 
>594	CallExpression	node 
>595	ArgumentList	source
>596	Argument	source
>597	Identifier	source
>598	Callee	node 
>599	Identifier	node 
>600	CompoundStatement	 
>601	ReturnStatement	 
>602	CallExpression	scope . Close ( apply_iterator ( buffer . begin ( ) , buffer . end ( ) , handlers ) )
>603	ArgumentList	apply_iterator ( buffer . begin ( ) , buffer . end ( ) , handlers )
>604	Argument	apply_iterator ( buffer . begin ( ) , buffer . end ( ) , handlers )
>605	CallExpression	apply_iterator ( buffer . begin ( ) , buffer . end ( ) , handlers )
>606	ArgumentList	buffer . begin ( )
>607	Argument	handlers
>608	Identifier	handlers
>609	Argument	buffer . end ( )
>610	CallExpression	buffer . end ( )
>611	ArgumentList	 
>612	Callee	buffer . end
>613	MemberAccess	buffer . end
>614	Identifier	end
>615	Identifier	buffer
>616	Argument	buffer . begin ( )
>617	CallExpression	buffer . begin ( )
>618	ArgumentList	 
>619	Callee	buffer . begin
>620	MemberAccess	buffer . begin
>621	Identifier	begin
>622	Identifier	buffer
>623	Callee	apply_iterator
>624	Identifier	apply_iterator
>625	Callee	scope . Close
>626	MemberAccess	scope . Close
>627	Identifier	Close
>628	Identifier	scope
>629	IdentifierDeclStatement	 
>630	IdentifierDecl	& buffer = unwrap < BufferWrap > ( source )
>631	AssignmentExpr	& buffer = unwrap < BufferWrap > ( source )
>632	RelationalExpression	unwrap < BufferWrap > ( source )
>633	RelationalExpression	BufferWrap > ( source )
>634	Identifier	source
>635	Identifier	BufferWrap
>636	Identifier	unwrap
>637	Identifier	buffer
>638	Identifier	buffer
>639	IdentifierDeclType	osmium 
>640	Condition	 
>641	CallExpression	BufferWrap 
>642	ArgumentList	source
>643	Argument	source
>644	Identifier	source
>645	Callee	BufferWrap 
>646	PtrMemberAccess	BufferWrap 
>647	Identifier	HasInstance
>648	Identifier	BufferWrap 
>649	CompoundStatement	 
>650	ExpressionStatement	 
>651	Statement	 
>652	Statement	 
>653	Statement	 
>654	Statement	 
>655	CompoundStatement	 
>656	Statement	 
>657	Statement	 
>658	CompoundStatement	 
>659	Statement	 
>660	Statement	 
>661	Statement	 
>662	Statement	 
>663	Statement	 
>664	Statement	 
>665	Statement	 
>666	Statement	 
>667	Statement	 
>668	IdentifierDeclStatement	 
>669	IdentifierDecl	input_iterator
>670	Identifier	input_iterator
>671	IdentifierDeclType	osmium 
>672	IfStatement	if ( reader . eof ( ) )
>673	CompoundStatement	 
>674	ReturnStatement	 
>675	CallExpression	ThrowException ( v8 
>676	ArgumentList	v8 
>677	Argument	v8 
>678	CallExpression	v8 
>679	ArgumentList	v8 
>680	Argument	v8 
>681	CallExpression	v8 
>682	ArgumentList	\"apply() called on a reader that has reached EOF\"
>683	Argument	\"apply() called on a reader that has reached EOF\"
>684	PrimaryExpression	\"apply() called on a reader that has reached EOF\"
>685	Callee	v8 
>686	Identifier	v8 
>687	Callee	v8 
>688	Identifier	v8 
>689	Callee	ThrowException
>690	Identifier	ThrowException
>691	Condition	 
>692	CallExpression	reader . eof ( )
>693	ArgumentList	 
>694	Callee	reader . eof
>695	MemberAccess	reader . eof
>696	Identifier	eof
>697	Identifier	reader
>698	IdentifierDeclStatement	 
>699	IdentifierDecl	& reader = unwrap < FlexReaderWrap > ( source )
>700	AssignmentExpr	& reader = unwrap < FlexReaderWrap > ( source )
>701	RelationalExpression	unwrap < FlexReaderWrap > ( source )
>702	RelationalExpression	FlexReaderWrap > ( source )
>703	Identifier	source
>704	Identifier	FlexReaderWrap
>705	Identifier	unwrap
>706	Identifier	reader
>707	Identifier	reader
>708	IdentifierDeclType	flex_reader_type &
>709	Condition	 
>710	CallExpression	FlexReaderWrap 
>711	ArgumentList	source
>712	Argument	source
>713	Identifier	source
>714	Callee	FlexReaderWrap 
>715	PtrMemberAccess	FlexReaderWrap 
>716	Identifier	HasInstance
>717	Identifier	FlexReaderWrap 
>718	CompoundStatement	 
>719	ExpressionStatement	 
>720	Statement	 
>721	Statement	 
>722	Statement	 
>723	Statement	 
>724	CompoundStatement	 
>725	Statement	 
>726	Statement	 
>727	CompoundStatement	 
>728	Statement	 
>729	Statement	 
>730	Statement	 
>731	Statement	 
>732	Statement	 
>733	Statement	 
>734	Statement	 
>735	Statement	 
>736	Statement	 
>737	IdentifierDeclStatement	 
>738	IdentifierDecl	input_iterator
>739	Identifier	input_iterator
>740	IdentifierDeclType	osmium 
>741	IfStatement	if ( reader . eof ( ) )
>742	CompoundStatement	 
>743	ReturnStatement	 
>744	CallExpression	ThrowException ( v8 
>745	ArgumentList	v8 
>746	Argument	v8 
>747	CallExpression	v8 
>748	ArgumentList	v8 
>749	Argument	v8 
>750	CallExpression	v8 
>751	ArgumentList	\"apply() called on a reader that has reached EOF\"
>752	Argument	\"apply() called on a reader that has reached EOF\"
>753	PrimaryExpression	\"apply() called on a reader that has reached EOF\"
>754	Callee	v8 
>755	Identifier	v8 
>756	Callee	v8 
>757	Identifier	v8 
>758	Callee	ThrowException
>759	Identifier	ThrowException
>760	Condition	 
>761	CallExpression	reader . eof ( )
>762	ArgumentList	 
>763	Callee	reader . eof
>764	MemberAccess	reader . eof
>765	Identifier	eof
>766	Identifier	reader
>767	IdentifierDeclStatement	 
>768	IdentifierDecl	& reader = unwrap < BasicReaderWrap > ( source )
>769	AssignmentExpr	& reader = unwrap < BasicReaderWrap > ( source )
>770	RelationalExpression	unwrap < BasicReaderWrap > ( source )
>771	RelationalExpression	BasicReaderWrap > ( source )
>772	Identifier	source
>773	Identifier	BasicReaderWrap
>774	Identifier	unwrap
>775	Identifier	reader
>776	Identifier	reader
>777	IdentifierDeclType	osmium 
>778	Condition	 
>779	CallExpression	BasicReaderWrap 
>780	ArgumentList	source
>781	Argument	source
>782	Identifier	source
>783	Callee	BasicReaderWrap 
>784	PtrMemberAccess	BasicReaderWrap 
>785	Identifier	HasInstance
>786	Identifier	BasicReaderWrap 
>787	ExpressionStatement	 
>788	AssignmentExpr	source = args [ 0 ] -> ToObject ( )
>789	CallExpression	args [ 0 ] -> ToObject ( )
>790	ArgumentList	 
>791	Callee	args [ 0 ] -> ToObject
>792	PtrMemberAccess	args [ 0 ] -> ToObject
>793	Identifier	ToObject
>794	ArrayIndexing	args [ 0 ]
>795	PrimaryExpression	0
>796	Identifier	args
>797	Identifier	source
>798	Statement	 
>799	ForStatement	for ( int i = 1 ; i != args . Length ( ) ; ++ i )
>800	CompoundStatement	 
>801	IfStatement	if ( JSHandler 
>802	ElseStatement	else
>803	IfStatement	if ( LocationHandlerWrap 
>804	ElseStatement	else
>805	IfStatement	if ( MultipolygonHandlerWrap 
>806	CompoundStatement	 
>807	ExpressionStatement	 
>808	CallExpression	handlers . push_back ( unwrap < MultipolygonHandlerWrap > ( obj ) )
>809	ArgumentList	unwrap < MultipolygonHandlerWrap > ( obj )
>810	Argument	unwrap < MultipolygonHandlerWrap > ( obj )
>811	RelationalExpression	unwrap < MultipolygonHandlerWrap > ( obj )
>812	RelationalExpression	MultipolygonHandlerWrap > ( obj )
>813	Identifier	obj
>814	Identifier	MultipolygonHandlerWrap
>815	Identifier	unwrap
>816	Callee	handlers . push_back
>817	MemberAccess	handlers . push_back
>818	Identifier	push_back
>819	Identifier	handlers
>820	Condition	 
>821	CallExpression	MultipolygonHandlerWrap 
>822	ArgumentList	obj
>823	Argument	obj
>824	Identifier	obj
>825	Callee	MultipolygonHandlerWrap 
>826	PtrMemberAccess	MultipolygonHandlerWrap 
>827	Identifier	HasInstance
>828	Identifier	MultipolygonHandlerWrap 
>829	CompoundStatement	 
>830	ExpressionStatement	 
>831	CallExpression	handlers . push_back ( unwrap < LocationHandlerWrap > ( obj ) )
>832	ArgumentList	unwrap < LocationHandlerWrap > ( obj )
>833	Argument	unwrap < LocationHandlerWrap > ( obj )
>834	RelationalExpression	unwrap < LocationHandlerWrap > ( obj )
>835	RelationalExpression	LocationHandlerWrap > ( obj )
>836	Identifier	obj
>837	Identifier	LocationHandlerWrap
>838	Identifier	unwrap
>839	Callee	handlers . push_back
>840	MemberAccess	handlers . push_back
>841	Identifier	push_back
>842	Identifier	handlers
>843	Condition	 
>844	CallExpression	LocationHandlerWrap 
>845	ArgumentList	obj
>846	Argument	obj
>847	Identifier	obj
>848	Callee	LocationHandlerWrap 
>849	PtrMemberAccess	LocationHandlerWrap 
>850	Identifier	HasInstance
>851	Identifier	LocationHandlerWrap 
>852	CompoundStatement	 
>853	ExpressionStatement	 
>854	CallExpression	handlers . push_back ( unwrap < JSHandler > ( obj ) )
>855	ArgumentList	unwrap < JSHandler > ( obj )
>856	Argument	unwrap < JSHandler > ( obj )
>857	RelationalExpression	unwrap < JSHandler > ( obj )
>858	RelationalExpression	JSHandler > ( obj )
>859	Identifier	obj
>860	Identifier	JSHandler
>861	Identifier	unwrap
>862	Callee	handlers . push_back
>863	MemberAccess	handlers . push_back
>864	Identifier	push_back
>865	Identifier	handlers
>866	Condition	 
>867	CallExpression	JSHandler 
>868	ArgumentList	obj
>869	Argument	obj
>870	Identifier	obj
>871	Callee	JSHandler 
>872	PtrMemberAccess	JSHandler 
>873	Identifier	HasInstance
>874	Identifier	JSHandler 
>875	ExpressionStatement	 
>876	AssignmentExpr	obj = args [ i ] -> ToObject ( )
>877	CallExpression	args [ i ] -> ToObject ( )
>878	ArgumentList	 
>879	Callee	args [ i ] -> ToObject
>880	PtrMemberAccess	args [ i ] -> ToObject
>881	Identifier	ToObject
>882	ArrayIndexing	args [ i ]
>883	Identifier	i
>884	Identifier	args
>885	Identifier	obj
>886	Statement	 
>887	IfStatement	if ( ! args [ i ] -> IsObject ( ) )
>888	CompoundStatement	 
>889	ReturnStatement	 
>890	CallExpression	ThrowException ( v8 
>891	ArgumentList	v8 
>892	Argument	v8 
>893	CallExpression	v8 
>894	ArgumentList	v8 
>895	Argument	v8 
>896	CallExpression	v8 
>897	ArgumentList	\"please provide handler objects as second and further parameters to apply()\"
>898	Argument	\"please provide handler objects as second and further parameters to apply()\"
>899	PrimaryExpression	\"please provide handler objects as second and further parameters to apply()\"
>900	Callee	v8 
>901	Identifier	v8 
>902	Callee	v8 
>903	Identifier	v8 
>904	Callee	ThrowException
>905	Identifier	ThrowException
>906	Condition	 
>907	UnaryOp	! args [ i ] -> IsObject ( )
>908	CallExpression	args [ i ] -> IsObject ( )
>909	ArgumentList	 
>910	Callee	args [ i ] -> IsObject
>911	PtrMemberAccess	args [ i ] -> IsObject
>912	Identifier	IsObject
>913	ArrayIndexing	args [ i ]
>914	Identifier	i
>915	Identifier	args
>916	UnaryOperator	!
>917	UnaryExpression	 
>918	Identifier	i
>919	IncDec	++
>920	Condition	 
>921	EqualityExpression	i != args . Length ( )
>922	CallExpression	args . Length ( )
>923	ArgumentList	 
>924	Callee	args . Length
>925	MemberAccess	args . Length
>926	Identifier	Length
>927	Identifier	args
>928	Identifier	i
>929	ForInit	 
>930	IdentifierDeclStatement	int i = 1 ;
>931	IdentifierDecl	i = 1
>932	AssignmentExpr	i = 1
>933	PrimaryExpression	1
>934	Identifier	i
>935	Identifier	i
>936	IdentifierDeclType	int
>937	IdentifierDeclStatement	 
>938	IdentifierDecl	handlers
>939	Identifier	handlers
>940	IdentifierDeclType	std 
>941	Condition	 
>942	AndExpression	args . Length ( ) > 0 && args [ 0 ] -> IsObject ( )
>943	CallExpression	args [ 0 ] -> IsObject ( )
>944	ArgumentList	 
>945	Callee	args [ 0 ] -> IsObject
>946	PtrMemberAccess	args [ 0 ] -> IsObject
>947	Identifier	IsObject
>948	ArrayIndexing	args [ 0 ]
>949	PrimaryExpression	0
>950	Identifier	args
>951	RelationalExpression	args . Length ( ) > 0
>952	PrimaryExpression	0
>953	CallExpression	args . Length ( )
>954	ArgumentList	 
>955	Callee	args . Length
>956	MemberAccess	args . Length
>957	Identifier	Length
>958	Identifier	args
>959	IdentifierDeclStatement	 
>960	IdentifierDecl	scope
>961	Identifier	scope
>962	IdentifierDeclType	v8 
<5=10,6
<6=7
<7=9,8
<15=21,20,16
<16=17
<17=19,18
<21=22
<22=23
<23=27,24
<24=25
<25=26
<27=28
<28=30,29
<36=42,41,37
<37=38
<38=40,39
<42=43
<43=44
<44=50,45
<45=48,46
<46=47
<48=49
<50=51
<57=63,62,58
<58=59
<59=61,60
<63=64
<64=65
<65=71,66
<66=69,67
<67=68
<69=70
<71=72
<82=90,83
<83=87,84
<84=86,85
<87=89,88
<96=102,101,97
<97=98
<98=100,99
<107=113,112,108
<108=109
<109=111,110
<118=124,123,119
<119=120
<120=122,121
<124=182,125
<125=180,126
<126=178,171,170,168,161,160,158,151,150,148,141,140,138,131,130,128,127
<128=129
<131=132
<132=134,133
<134=135
<135=137,136
<138=139
<141=142
<142=144,143
<144=145
<145=147,146
<148=149
<151=152
<152=154,153
<154=155
<155=157,156
<158=159
<161=162
<162=164,163
<164=165
<165=167,166
<168=169
<171=172
<172=174,173
<174=175
<175=177,176
<178=179
<180=181
<182=237,183
<183=235,228,227,225,218,217,215,208,207,205,198,197,195,188,187,185,184
<185=186
<188=189
<189=191,190
<191=192
<192=194,193
<195=196
<198=199
<199=201,200
<201=202
<202=204,203
<205=206
<208=209
<209=211,210
<211=212
<212=214,213
<215=216
<218=219
<219=221,220
<221=222
<222=224,223
<225=226
<228=229
<229=231,230
<231=232
<232=234,233
<235=236
<237=238
<247=259,258,248
<248=255,252,249
<249=251,250
<252=254,253
<255=257,256
<259=494,493,489,485,320,311,272,260
<260=261
<261=268,262
<262=263
<263=264
<264=266,265
<266=267
<268=269
<269=271,270
<272=310,273
<273=305,296,274
<274=275
<275=294,276
<276=277
<277=278
<278=292,279
<279=280
<280=281
<281=290,282
<282=283
<283=284
<284=286,285
<286=287
<287=289,288
<290=291
<292=293
<294=295
<296=297
<297=304,298
<298=300,299
<300=301
<301=303,302
<305=306
<306=309,308,307
<311=312
<312=313
<313=314
<314=316,315
<316=317
<317=319,318
<320=321
<321=478,362,355,354,353,352,351,349,348,347,322
<322=338,323
<323=331,324
<324=330,325
<325=326
<326=328,327
<328=329
<331=332
<332=334,333
<334=335
<335=337,336
<338=339
<339=345,340
<340=343,341
<341=342
<343=344
<345=346
<349=350
<355=356
<356=361,360,357
<357=359,358
<362=474,471,363
<363=459,452,451,450,449,448,446,445,444,384,364
<364=375,365
<365=366
<366=367
<367=374,368
<368=370,369
<370=371
<371=373,372
<375=376
<376=383,377
<377=379,378
<379=380
<380=382,381
<384=409,400,385
<385=393,386
<386=392,387
<387=388
<388=390,389
<390=391
<393=394
<394=396,395
<396=397
<397=399,398
<400=401
<401=407,402
<402=405,403
<403=404
<405=406
<407=408
<409=435,410
<410=426,411
<411=419,412
<412=418,413
<413=414
<414=416,415
<416=417
<419=420
<420=422,421
<422=423
<423=425,424
<426=427
<427=433,428
<428=431,429
<429=430
<431=432
<433=434
<435=436
<436=443,437
<437=439,438
<439=440
<440=442,441
<446=447
<452=453
<453=458,457,454
<454=456,455
<459=460
<460=470,469,461
<461=468,462
<462=464,463
<464=465
<465=467,466
<471=473,472
<474=475
<475=477,476
<478=479
<479=484,483,480
<480=482,481
<485=486
<486=488,487
<489=490
<490=492,491
<520=526,525,521
<521=522
<522=524,523
<526=959,544,527
<527=528
<528=542,529
<529=530
<530=531
<531=540,532
<532=533
<533=534
<534=538,535
<535=536
<536=537
<538=539
<540=541
<542=543
<544=941,545
<545=937,799,798,787,546
<546=778,718,547
<547=548
<548=709,649,549
<549=550
<550=640,600,551
<551=552
<552=593,553
<553=587,586,585,584,583,582,581,580,579,578,577,576,575,574,573,572,571,570,569,568,567,566,565,564,563,562,561,560,559,558,557,556,555,554
<587=588
<588=592,591,590,589
<593=594
<594=598,595
<595=596
<596=597
<598=599
<600=629,601
<601=602
<602=625,603
<603=604
<604=605
<605=623,606
<606=616,609,607
<607=608
<609=610
<610=612,611
<612=613
<613=615,614
<616=617
<617=619,618
<619=620
<620=622,621
<623=624
<625=626
<626=628,627
<629=630
<630=639,638,631
<631=637,632
<632=636,633
<633=635,634
<640=641
<641=645,642
<642=643
<643=644
<645=646
<646=648,647
<649=698,672,668,667,666,665,664,663,662,661,660,658,657,656,655,654,653,652,651,650
<658=659
<668=669
<669=671,670
<672=691,673
<673=674
<674=675
<675=689,676
<676=677
<677=678
<678=687,679
<679=680
<680=681
<681=685,682
<682=683
<683=684
<685=686
<687=688
<689=690
<691=692
<692=694,693
<694=695
<695=697,696
<698=699
<699=708,707,700
<700=706,701
<701=705,702
<702=704,703
<709=710
<710=714,711
<711=712
<712=713
<714=715
<715=717,716
<718=767,741,737,736,735,734,733,732,731,730,729,727,726,725,724,723,722,721,720,719
<727=728
<737=738
<738=740,739
<741=760,742
<742=743
<743=744
<744=758,745
<745=746
<746=747
<747=756,748
<748=749
<749=750
<750=754,751
<751=752
<752=753
<754=755
<756=757
<758=759
<760=761
<761=763,762
<763=764
<764=766,765
<767=768
<768=777,776,769
<769=775,770
<770=774,771
<771=773,772
<778=779
<779=783,780
<780=781
<781=782
<783=784
<784=786,785
<787=788
<788=797,789
<789=791,790
<791=792
<792=794,793
<794=796,795
<799=929,920,917,800
<800=887,886,875,801
<801=866,852,802
<802=803
<803=843,829,804
<804=805
<805=820,806
<806=807
<807=808
<808=816,809
<809=810
<810=811
<811=815,812
<812=814,813
<816=817
<817=819,818
<820=821
<821=825,822
<822=823
<823=824
<825=826
<826=828,827
<829=830
<830=831
<831=839,832
<832=833
<833=834
<834=838,835
<835=837,836
<839=840
<840=842,841
<843=844
<844=848,845
<845=846
<846=847
<848=849
<849=851,850
<852=853
<853=854
<854=862,855
<855=856
<856=857
<857=861,858
<858=860,859
<862=863
<863=865,864
<866=867
<867=871,868
<868=869
<869=870
<871=872
<872=874,873
<875=876
<876=885,877
<877=879,878
<879=880
<880=882,881
<882=884,883
<887=906,888
<888=889
<889=890
<890=904,891
<891=892
<892=893
<893=902,894
<894=895
<895=896
<896=900,897
<897=898
<898=899
<900=901
<902=903
<904=905
<906=907
<907=916,908
<908=910,909
<910=911
<911=913,912
<913=915,914
<917=919,918
<920=921
<921=928,922
<922=924,923
<924=925
<925=927,926
<929=930
<930=931
<931=936,935,932
<932=934,933
<937=938
<938=940,939
<941=942
<942=951,943
<943=945,944
<945=946
<946=948,947
<948=950,949
<951=953,952
<953=955,954
<955=956
<956=958,957
<959=960
<960=962,961
