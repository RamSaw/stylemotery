>3	FunctionDef	BlendMaskGenerator (int nXOff , int nYOff , int nXSize , int nYSize , GByte * pabyPolyMask , float * pafValidityMask , \
>4	ParameterList	int nXOff , int nYOff , int nXSize , int nYSize , GByte * pabyPolyMask , float * pafValidityMask , OGRGeometryH \
>5	Parameter	 
>6	Identifier	dfBlendDist
>7	ParameterType	double
>8	Parameter	 
>9	Identifier	hPolygon
>10	ParameterType	OGRGeometryH
>11	Parameter	 
>12	Identifier	pafValidityMask
>13	ParameterType	float *
>14	Parameter	 
>15	Identifier	pabyPolyMask
>16	ParameterType	GByte *
>17	Parameter	 
>18	Identifier	nYSize
>19	ParameterType	int
>20	Parameter	 
>21	Identifier	nXSize
>22	ParameterType	int
>23	Parameter	 
>24	Identifier	nYOff
>25	ParameterType	int
>26	Parameter	 
>27	Identifier	nXOff
>28	ParameterType	int
>29	ReturnType	static CPLErr
>30	CompoundStatement	 
>31	ReturnStatement	 
>32	Identifier	CE_Failure
>33	ExpressionStatement	 
>34	CallExpression	CPLError ( CE_Failure , CPLE_AppDefined , \"Blend distance support not available without the GEOS library.\" )
>35	ArgumentList	CE_Failure
>36	Argument	\"Blend distance support not available without the GEOS library.\"
>37	PrimaryExpression	\"Blend distance support not available without the GEOS library.\"
>38	Argument	CPLE_AppDefined
>39	Identifier	CPLE_AppDefined
>40	Argument	CE_Failure
>41	Identifier	CE_Failure
>42	Callee	CPLError
>43	Identifier	CPLError
>57	FunctionDef	CutlineTransformer (void * pTransformArg , int bDstToSrc , int nPointCount , double * x , double * y , double * \
>58	ParameterList	void * pTransformArg , int bDstToSrc , int nPointCount , double * x , double * y , double * z , int * panSuccess
>59	Parameter	 
>60	Identifier	panSuccess
>61	ParameterType	int *
>62	Parameter	 
>63	Identifier	z
>64	ParameterType	double *
>65	Parameter	 
>66	Identifier	y
>67	ParameterType	double *
>68	Parameter	 
>69	Identifier	x
>70	ParameterType	double *
>71	Parameter	 
>72	Identifier	nPointCount
>73	ParameterType	int
>74	Parameter	 
>75	Identifier	bDstToSrc
>76	ParameterType	int
>77	Parameter	 
>78	Identifier	pTransformArg
>79	ParameterType	void *
>80	ReturnType	static int
>81	CompoundStatement	 
>82	ReturnStatement	 
>83	Identifier	TRUE
>84	ForStatement	for ( i = 0 ; i < nPointCount ; i ++ )
>85	CompoundStatement	 
>86	ExpressionStatement	 
>87	AssignmentExpr	y [ i ] -= nYOff
>88	Identifier	nYOff
>89	ArrayIndexing	y [ i ]
>90	Identifier	i
>91	Identifier	y
>92	ExpressionStatement	 
>93	AssignmentExpr	x [ i ] -= nXOff
>94	Identifier	nXOff
>95	ArrayIndexing	x [ i ]
>96	Identifier	i
>97	Identifier	x
>98	IncDecOp	 
>99	IncDec	++
>100	Identifier	i
>101	Condition	 
>102	RelationalExpression	i < nPointCount
>103	Identifier	nPointCount
>104	Identifier	i
>105	ForInit	 
>106	AssignmentExpr	i = 0
>107	PrimaryExpression	0
>108	Identifier	i
>109	IfStatement	if ( bDstToSrc )
>110	CompoundStatement	 
>111	ExpressionStatement	 
>112	AssignmentExpr	nYOff *= - 1
>113	UnaryOp	- 1
>114	PrimaryExpression	1
>115	UnaryOperator	-
>116	Identifier	nYOff
>117	ExpressionStatement	 
>118	AssignmentExpr	nXOff *= - 1
>119	UnaryOp	- 1
>120	PrimaryExpression	1
>121	UnaryOperator	-
>122	Identifier	nXOff
>123	Condition	 
>124	Identifier	bDstToSrc
>125	IdentifierDeclStatement	 
>126	IdentifierDecl	i
>127	Identifier	i
>128	IdentifierDeclType	int
>129	IdentifierDeclStatement	 
>130	IdentifierDecl	nYOff = ( ( int * ) pTransformArg ) [ 1 ]
>131	AssignmentExpr	nYOff = ( ( int * ) pTransformArg ) [ 1 ]
>132	ArrayIndexing	( ( int * ) pTransformArg ) [ 1 ]
>133	PrimaryExpression	1
>134	CastExpression	( int * ) pTransformArg
>135	Identifier	pTransformArg
>136	CastTarget	int *
>137	Identifier	nYOff
>138	Identifier	nYOff
>139	IdentifierDeclType	int
>140	IdentifierDeclStatement	 
>141	IdentifierDecl	nXOff = ( ( int * ) pTransformArg ) [ 0 ]
>142	AssignmentExpr	nXOff = ( ( int * ) pTransformArg ) [ 0 ]
>143	ArrayIndexing	( ( int * ) pTransformArg ) [ 0 ]
>144	PrimaryExpression	0
>145	CastExpression	( int * ) pTransformArg
>146	Identifier	pTransformArg
>147	CastTarget	int *
>148	Identifier	nXOff
>149	Identifier	nXOff
>150	IdentifierDeclType	int
<3=30,29,4
<4=26,23,20,17,14,11,8,5
<5=7,6
<8=10,9
<11=13,12
<14=16,15
<17=19,18
<20=22,21
<23=25,24
<26=28,27
<30=33,31
<31=32
<33=34
<34=42,35
<35=40,38,36
<36=37
<38=39
<40=41
<42=43
<57=81,80,58
<58=77,74,71,68,65,62,59
<59=61,60
<62=64,63
<65=67,66
<68=70,69
<71=73,72
<74=76,75
<77=79,78
<81=140,129,125,109,84,82
<82=83
<84=105,101,98,85
<85=92,86
<86=87
<87=89,88
<89=91,90
<92=93
<93=95,94
<95=97,96
<98=100,99
<101=102
<102=104,103
<105=106
<106=108,107
<109=123,110
<110=117,111
<111=112
<112=116,113
<113=115,114
<117=118
<118=122,119
<119=121,120
<123=124
<125=126
<126=128,127
<129=130
<130=139,138,131
<131=137,132
<132=134,133
<134=136,135
<140=141
<141=150,149,142
<142=148,143
<143=145,144
<145=147,146
