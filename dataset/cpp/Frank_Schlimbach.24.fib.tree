>7	FunctionDef	preschedule ()
>8	ParameterList	 
>9	ReturnType	bool
>10	CompoundStatement	 
>11	ReturnStatement	 
>12	Identifier	false
>17	FunctionDef	affinity (const fib_type & tag , fib_context & ctxt)
>18	ParameterList	const fib_type & tag , fib_context & ctxt
>19	Parameter	 
>20	Identifier	ctxt
>21	ParameterType	fib_context &
>22	Parameter	 
>23	Identifier	tag
>24	ParameterType	const fib_type &
>25	ReturnType	int
>26	CompoundStatement	 
>27	ReturnStatement	 
>28	ConditionalExpression	tag < 4 ? CnC 
>29	MultiplicativeExpression	tag % numThreads ( ctxt )
>30	CallExpression	numThreads ( ctxt )
>31	ArgumentList	ctxt
>32	Argument	ctxt
>33	Identifier	ctxt
>34	Callee	numThreads
>35	Identifier	numThreads
>36	Identifier	tag
>37	Identifier	CnC 
>38	Condition	tag < 4
>39	RelationalExpression	tag < 4
>40	PrimaryExpression	4
>41	Identifier	tag
>42	ExpressionStatement	 
>43	ShiftExpression	std 
>44	PrimaryExpression	\"aff\n\"
>45	Identifier	std 
>56	FunctionDef	get_count (const tag_type & tag)
>57	ParameterList	const tag_type & tag
>58	Parameter	 
>59	Identifier	tag
>60	ParameterType	const tag_type &
>61	ReturnType	int
>62	CompoundStatement	 
>63	ReturnStatement	 
>64	ConditionalExpression	tag > 0 ? 2 
>65	PrimaryExpression	1
>66	PrimaryExpression	2
>67	Condition	tag > 0
>68	RelationalExpression	tag > 0
>69	PrimaryExpression	0
>70	Identifier	tag
>75	FunctionDef	consumed_on (const fib_type & tag)
>76	ParameterList	const fib_type & tag
>77	Parameter	 
>78	Identifier	tag
>79	ParameterType	const fib_type &
>80	ReturnType	const std 
>81	CompoundStatement	 
>82	IfStatement	if ( tag > 4 )
>83	ElseStatement	else
>84	CompoundStatement	 
>85	ReturnStatement	 
>86	Identifier	_tmp
>87	IdentifierDeclStatement	 
>88	IdentifierDecl	_tmp ( 0 )
>89	PrimaryExpression	0
>90	Identifier	_tmp
>91	IdentifierDeclType	const std 
>92	Statement	 
>93	IfStatement	if ( tag == 1 )
>94	ElseStatement	else
>95	IfStatement	if ( tag == 2 && numProcs ( ) > 2 )
>96	CompoundStatement	 
>97	ReturnStatement	 
>98	Identifier	_tmp2
>99	IdentifierDeclStatement	 
>100	IdentifierDecl	_tmp2 ( 1 , CnC 
>101	Expression	1 , CnC 
>102	Identifier	CnC 
>103	PrimaryExpression	1
>104	Identifier	_tmp2
>105	IdentifierDeclType	const std 
>106	Statement	 
>107	Condition	 
>108	AndExpression	tag == 2 && numProcs ( ) > 2
>109	RelationalExpression	numProcs ( ) > 2
>110	PrimaryExpression	2
>111	CallExpression	numProcs ( )
>112	ArgumentList	 
>113	Callee	numProcs
>114	Identifier	numProcs
>115	EqualityExpression	tag == 2
>116	PrimaryExpression	2
>117	Identifier	tag
>118	CompoundStatement	 
>119	ReturnStatement	 
>120	Identifier	_tmp1
>121	IdentifierDeclStatement	 
>122	IdentifierDecl	_tmp1 ( 1 , CnC 
>123	Expression	1 , CnC 
>124	Identifier	CnC 
>125	PrimaryExpression	1
>126	Identifier	_tmp1
>127	IdentifierDeclType	const std 
>128	Statement	 
>129	Condition	 
>130	EqualityExpression	tag == 1
>131	PrimaryExpression	1
>132	Identifier	tag
>133	ReturnStatement	 
>134	ArrayIndexing	m_vecs [ ON_PROC ( tag ) ]
>135	CallExpression	ON_PROC ( tag )
>136	ArgumentList	tag
>137	Argument	tag
>138	Identifier	tag
>139	Callee	ON_PROC
>140	Identifier	ON_PROC
>141	Identifier	m_vecs
>142	Condition	 
>143	RelationalExpression	tag > 4
>144	PrimaryExpression	4
>145	Identifier	tag
>158	FunctionDef	produced_on (const fib_type & tag)
>159	ParameterList	const fib_type & tag
>160	Parameter	 
>161	Identifier	tag
>162	ParameterType	const fib_type &
>163	ReturnType	int
>164	CompoundStatement	 
>165	ReturnStatement	 
>166	ConditionalExpression	tag > 1 ? ON_PROC ( tag ) 
>167	Identifier	CnC 
>168	CallExpression	ON_PROC ( tag )
>169	ArgumentList	tag
>170	Argument	tag
>171	Identifier	tag
>172	Callee	ON_PROC
>173	Identifier	ON_PROC
>174	Condition	tag > 1
>175	RelationalExpression	tag > 1
>176	PrimaryExpression	1
>177	Identifier	tag
>184	FunctionDef	item_tuner (int np)
>185	ParameterList	int np
>186	Parameter	 
>187	Identifier	np
>188	ParameterType	int
>189	CompoundStatement	 
>190	ExpressionStatement	 
>191	CallExpression	init ( np )
>192	ArgumentList	np
>193	Argument	np
>194	Identifier	np
>195	Callee	init
>196	Identifier	init
>203	FunctionDef	item_tuner ()
>204	ParameterList	 
>205	CompoundStatement	 
>206	ExpressionStatement	 
>207	CallExpression	CNC_ASSERT ( 0 )
>208	ArgumentList	0
>209	Argument	0
>210	PrimaryExpression	0
>211	Callee	CNC_ASSERT
>212	Identifier	CNC_ASSERT
>216	FunctionDef	init (int np)
>217	ParameterList	int np
>218	Parameter	 
>219	Identifier	np
>220	ParameterType	int
>221	ReturnType	void
>222	CompoundStatement	 
>223	ForStatement	for ( int i = 0 ; i != np ; ++ i )
>224	CompoundStatement	 
>225	IfStatement	if ( _tmp == myPid ( ) )
>226	ElseStatement	else
>227	CompoundStatement	 
>228	ExpressionStatement	 
>229	AssignmentExpr	m_vecs [ i ] [ 1 ] = _tmp
>230	Identifier	_tmp
>231	ArrayIndexing	m_vecs [ i ] [ 1 ]
>232	PrimaryExpression	1
>233	ArrayIndexing	m_vecs [ i ]
>234	Identifier	i
>235	Identifier	m_vecs
>236	CompoundStatement	 
>237	ExpressionStatement	 
>238	AssignmentExpr	m_vecs [ i ] [ 0 ] = myPid ( )
>239	CallExpression	myPid ( )
>240	ArgumentList	 
>241	Callee	myPid
>242	Identifier	myPid
>243	ArrayIndexing	m_vecs [ i ] [ 0 ]
>244	PrimaryExpression	0
>245	ArrayIndexing	m_vecs [ i ]
>246	Identifier	i
>247	Identifier	m_vecs
>248	ExpressionStatement	 
>249	AssignmentExpr	m_vecs [ i ] [ 1 ] = m_vecs [ i ] [ 0 ]
>250	ArrayIndexing	m_vecs [ i ] [ 0 ]
>251	PrimaryExpression	0
>252	ArrayIndexing	m_vecs [ i ]
>253	Identifier	i
>254	Identifier	m_vecs
>255	ArrayIndexing	m_vecs [ i ] [ 1 ]
>256	PrimaryExpression	1
>257	ArrayIndexing	m_vecs [ i ]
>258	Identifier	i
>259	Identifier	m_vecs
>260	Condition	 
>261	EqualityExpression	_tmp == myPid ( )
>262	CallExpression	myPid ( )
>263	ArgumentList	 
>264	Callee	myPid
>265	Identifier	myPid
>266	Identifier	_tmp
>267	IdentifierDeclStatement	 
>268	IdentifierDecl	_tmp ( ON_PROC ( i + 2 ) )
>269	CallExpression	ON_PROC ( i + 2 )
>270	ArgumentList	i + 2
>271	Argument	i + 2
>272	AdditiveExpression	i + 2
>273	PrimaryExpression	2
>274	Identifier	i
>275	Callee	ON_PROC
>276	Identifier	ON_PROC
>277	Identifier	_tmp
>278	IdentifierDeclType	int
>279	ExpressionStatement	 
>280	AssignmentExpr	m_vecs [ i ] [ 0 ] = ON_PROC ( i + 1 )
>281	CallExpression	ON_PROC ( i + 1 )
>282	ArgumentList	i + 1
>283	Argument	i + 1
>284	AdditiveExpression	i + 1
>285	PrimaryExpression	1
>286	Identifier	i
>287	Callee	ON_PROC
>288	Identifier	ON_PROC
>289	ArrayIndexing	m_vecs [ i ] [ 0 ]
>290	PrimaryExpression	0
>291	ArrayIndexing	m_vecs [ i ]
>292	Identifier	i
>293	Identifier	m_vecs
>294	ExpressionStatement	 
>295	CallExpression	m_vecs [ i ] . resize ( 2 )
>296	ArgumentList	2
>297	Argument	2
>298	PrimaryExpression	2
>299	Callee	m_vecs [ i ] . resize
>300	MemberAccess	m_vecs [ i ] . resize
>301	Identifier	resize
>302	ArrayIndexing	m_vecs [ i ]
>303	Identifier	i
>304	Identifier	m_vecs
>305	UnaryExpression	 
>306	Identifier	i
>307	IncDec	++
>308	Condition	 
>309	EqualityExpression	i != np
>310	Identifier	np
>311	Identifier	i
>312	ForInit	 
>313	IdentifierDeclStatement	int i = 0 ;
>314	IdentifierDecl	i = 0
>315	AssignmentExpr	i = 0
>316	PrimaryExpression	0
>317	Identifier	i
>318	Identifier	i
>319	IdentifierDeclType	int
>320	ExpressionStatement	 
>321	CallExpression	m_vecs . resize ( np )
>322	ArgumentList	np
>323	Argument	np
>324	Identifier	np
>325	Callee	m_vecs . resize
>326	MemberAccess	m_vecs . resize
>327	Identifier	resize
>328	Identifier	m_vecs
>354	FunctionDef	fib_step 
>355	ParameterList	const fib_type & tag , fib_context & ctxt
>356	Parameter	 
>357	Identifier	ctxt
>358	ParameterType	fib_context &
>359	Parameter	 
>360	Identifier	tag
>361	ParameterType	const fib_type &
>362	ReturnType	int
>363	CompoundStatement	 
>364	ReturnStatement	 
>365	Identifier	CnC 
>366	IfStatement	if ( tag > 1 )
>367	ElseStatement	else
>368	CompoundStatement	 
>369	ExpressionStatement	 
>370	CallExpression	ctxt . m_fibs . put ( tag , tag )
>371	ArgumentList	tag
>372	Argument	tag
>373	Identifier	tag
>374	Argument	tag
>375	Identifier	tag
>376	Callee	ctxt . m_fibs . put
>377	MemberAccess	ctxt . m_fibs . put
>378	Identifier	put
>379	MemberAccess	ctxt . m_fibs
>380	Identifier	m_fibs
>381	Identifier	ctxt
>382	CompoundStatement	 
>383	ExpressionStatement	 
>384	CallExpression	ctxt . m_fibs . put ( tag , f_1 + f_2 )
>385	ArgumentList	tag
>386	Argument	f_1 + f_2
>387	AdditiveExpression	f_1 + f_2
>388	Identifier	f_2
>389	Identifier	f_1
>390	Argument	tag
>391	Identifier	tag
>392	Callee	ctxt . m_fibs . put
>393	MemberAccess	ctxt . m_fibs . put
>394	Identifier	put
>395	MemberAccess	ctxt . m_fibs
>396	Identifier	m_fibs
>397	Identifier	ctxt
>398	ExpressionStatement	 
>399	CallExpression	ctxt . flush_gets ( )
>400	ArgumentList	 
>401	Callee	ctxt . flush_gets
>402	MemberAccess	ctxt . flush_gets
>403	Identifier	flush_gets
>404	Identifier	ctxt
>405	ExpressionStatement	 
>406	CallExpression	ctxt . m_fibs . unsafe_get ( tag - 2 , f_2 )
>407	ArgumentList	tag - 2
>408	Argument	f_2
>409	Identifier	f_2
>410	Argument	tag - 2
>411	AdditiveExpression	tag - 2
>412	PrimaryExpression	2
>413	Identifier	tag
>414	Callee	ctxt . m_fibs . unsafe_get
>415	MemberAccess	ctxt . m_fibs . unsafe_get
>416	Identifier	unsafe_get
>417	MemberAccess	ctxt . m_fibs
>418	Identifier	m_fibs
>419	Identifier	ctxt
>420	IdentifierDeclStatement	 
>421	IdentifierDecl	f_2
>422	Identifier	f_2
>423	IdentifierDeclType	fib_type
>424	ExpressionStatement	 
>425	CallExpression	ctxt . m_fibs . unsafe_get ( tag - 1 , f_1 )
>426	ArgumentList	tag - 1
>427	Argument	f_1
>428	Identifier	f_1
>429	Argument	tag - 1
>430	AdditiveExpression	tag - 1
>431	PrimaryExpression	1
>432	Identifier	tag
>433	Callee	ctxt . m_fibs . unsafe_get
>434	MemberAccess	ctxt . m_fibs . unsafe_get
>435	Identifier	unsafe_get
>436	MemberAccess	ctxt . m_fibs
>437	Identifier	m_fibs
>438	Identifier	ctxt
>439	IdentifierDeclStatement	 
>440	IdentifierDecl	f_1
>441	Identifier	f_1
>442	IdentifierDeclType	fib_type
>443	Condition	 
>444	RelationalExpression	tag > 1
>445	PrimaryExpression	1
>446	Identifier	tag
>456	FunctionDef	fib_ctrl 
>457	ParameterList	const fib_type & tag , fib_context & ctxt
>458	Parameter	 
>459	Identifier	ctxt
>460	ParameterType	fib_context &
>461	Parameter	 
>462	Identifier	tag
>463	ParameterType	const fib_type &
>464	ReturnType	int
>465	CompoundStatement	 
>466	ReturnStatement	 
>467	Identifier	CnC 
>468	IfStatement	if ( tag > 1 )
>469	CompoundStatement	 
>470	ExpressionStatement	 
>471	CallExpression	ctxt . m_tags . put ( tag - 2 )
>472	ArgumentList	tag - 2
>473	Argument	tag - 2
>474	AdditiveExpression	tag - 2
>475	PrimaryExpression	2
>476	Identifier	tag
>477	Callee	ctxt . m_tags . put
>478	MemberAccess	ctxt . m_tags . put
>479	Identifier	put
>480	MemberAccess	ctxt . m_tags
>481	Identifier	m_tags
>482	Identifier	ctxt
>483	ExpressionStatement	 
>484	CallExpression	ctxt . m_tags . put ( tag - 1 )
>485	ArgumentList	tag - 1
>486	Argument	tag - 1
>487	AdditiveExpression	tag - 1
>488	PrimaryExpression	1
>489	Identifier	tag
>490	Callee	ctxt . m_tags . put
>491	MemberAccess	ctxt . m_tags . put
>492	Identifier	put
>493	MemberAccess	ctxt . m_tags
>494	Identifier	m_tags
>495	Identifier	ctxt
>496	Condition	 
>497	RelationalExpression	tag > 1
>498	PrimaryExpression	1
>499	Identifier	tag
>507	FunctionDef	fib_tuner 
>508	ParameterList	const fib_type & tag , fib_context & c , dependency_consumer & dC
>509	Parameter	 
>510	Identifier	dC
>511	ParameterType	dependency_consumer &
>512	Parameter	 
>513	Identifier	c
>514	ParameterType	fib_context &
>515	Parameter	 
>516	Identifier	tag
>517	ParameterType	const fib_type &
>518	ReturnType	void
>519	CompoundStatement	 
>520	IfStatement	if ( tag > 1 )
>521	CompoundStatement	 
>522	ExpressionStatement	 
>523	CallExpression	dC . depends ( c . m_fibs , tag - 2 )
>524	ArgumentList	c . m_fibs
>525	Argument	tag - 2
>526	AdditiveExpression	tag - 2
>527	PrimaryExpression	2
>528	Identifier	tag
>529	Argument	c . m_fibs
>530	MemberAccess	c . m_fibs
>531	Identifier	m_fibs
>532	Identifier	c
>533	Callee	dC . depends
>534	MemberAccess	dC . depends
>535	Identifier	depends
>536	Identifier	dC
>537	ExpressionStatement	 
>538	CallExpression	assert ( compute_on ( tag - 2 , c ) >= 0 )
>539	ArgumentList	compute_on ( tag - 2 , c ) >= 0
>540	Argument	compute_on ( tag - 2 , c ) >= 0
>541	RelationalExpression	compute_on ( tag - 2 , c ) >= 0
>542	PrimaryExpression	0
>543	CallExpression	compute_on ( tag - 2 , c )
>544	ArgumentList	tag - 2
>545	Argument	c
>546	Identifier	c
>547	Argument	tag - 2
>548	AdditiveExpression	tag - 2
>549	PrimaryExpression	2
>550	Identifier	tag
>551	Callee	compute_on
>552	Identifier	compute_on
>553	Callee	assert
>554	Identifier	assert
>555	ExpressionStatement	 
>556	CallExpression	dC . depends ( c . m_fibs , tag - 1 )
>557	ArgumentList	c . m_fibs
>558	Argument	tag - 1
>559	AdditiveExpression	tag - 1
>560	PrimaryExpression	1
>561	Identifier	tag
>562	Argument	c . m_fibs
>563	MemberAccess	c . m_fibs
>564	Identifier	m_fibs
>565	Identifier	c
>566	Callee	dC . depends
>567	MemberAccess	dC . depends
>568	Identifier	depends
>569	Identifier	dC
>570	ExpressionStatement	 
>571	CallExpression	assert ( compute_on ( tag - 1 , c ) >= 0 )
>572	ArgumentList	compute_on ( tag - 1 , c ) >= 0
>573	Argument	compute_on ( tag - 1 , c ) >= 0
>574	RelationalExpression	compute_on ( tag - 1 , c ) >= 0
>575	PrimaryExpression	0
>576	CallExpression	compute_on ( tag - 1 , c )
>577	ArgumentList	tag - 1
>578	Argument	c
>579	Identifier	c
>580	Argument	tag - 1
>581	AdditiveExpression	tag - 1
>582	PrimaryExpression	1
>583	Identifier	tag
>584	Callee	compute_on
>585	Identifier	compute_on
>586	Callee	assert
>587	Identifier	assert
>588	Condition	 
>589	RelationalExpression	tag > 1
>590	PrimaryExpression	1
>591	Identifier	tag
>600	FunctionDef	main (int argc , char * argv [ ])
>601	ParameterList	int argc , char * argv [ ]
>602	Parameter	 
>603	Identifier	argv
>604	ParameterType	char * [ ]
>605	Parameter	 
>606	Identifier	argc
>607	ParameterType	int
>608	ReturnType	int
>609	CompoundStatement	 
>610	ReturnStatement	 
>611	PrimaryExpression	0
>612	ExpressionStatement	 
>613	ShiftExpression	std 
>614	ShiftExpression	\"time
>615	ShiftExpression	( stop2 - start2 ) . seconds ( ) << \" s\n\"
>616	PrimaryExpression	\" s\n\"
>617	CallExpression	( stop2 - start2 ) . seconds ( )
>618	ArgumentList	 
>619	Callee	( stop2 - start2 ) . seconds
>620	MemberAccess	( stop2 - start2 ) . seconds
>621	Identifier	seconds
>622	AdditiveExpression	stop2 - start2
>623	Identifier	start2
>624	Identifier	stop2
>625	PrimaryExpression	\"time
>626	Identifier	std 
>627	ExpressionStatement	 
>628	ShiftExpression	std 
>629	ShiftExpression	\"CnC recursive (\" << n << \")
>630	ShiftExpression	n << \")
>631	ShiftExpression	\")
>632	ShiftExpression	res2 << std 
>633	Identifier	std 
>634	Identifier	res2
>635	PrimaryExpression	\")
>636	Identifier	n
>637	PrimaryExpression	\"CnC recursive (\"
>638	Identifier	std 
>639	ExpressionStatement	 
>640	CallExpression	ctxt . m_fibs . get ( n , res2 )
>641	ArgumentList	n
>642	Argument	res2
>643	Identifier	res2
>644	Argument	n
>645	Identifier	n
>646	Callee	ctxt . m_fibs . get
>647	MemberAccess	ctxt . m_fibs . get
>648	Identifier	get
>649	MemberAccess	ctxt . m_fibs
>650	Identifier	m_fibs
>651	Identifier	ctxt
>652	IdentifierDeclStatement	 
>653	IdentifierDecl	res2
>654	Identifier	res2
>655	IdentifierDeclType	fib_type
>656	IdentifierDeclStatement	 
>657	IdentifierDecl	stop2 = tbb 
>658	AssignmentExpr	stop2 = tbb 
>659	CallExpression	tbb 
>660	ArgumentList	 
>661	Callee	tbb 
>662	Identifier	tbb 
>663	Identifier	stop2
>664	Identifier	stop2
>665	IdentifierDeclType	tbb 
>666	ExpressionStatement	 
>667	CallExpression	ctxt . wait ( )
>668	ArgumentList	 
>669	Callee	ctxt . wait
>670	MemberAccess	ctxt . wait
>671	Identifier	wait
>672	Identifier	ctxt
>673	ExpressionStatement	 
>674	CallExpression	ctxt . m_tags . put ( n )
>675	ArgumentList	n
>676	Argument	n
>677	Identifier	n
>678	Callee	ctxt . m_tags . put
>679	MemberAccess	ctxt . m_tags . put
>680	Identifier	put
>681	MemberAccess	ctxt . m_tags
>682	Identifier	m_tags
>683	Identifier	ctxt
>684	IdentifierDeclStatement	 
>685	IdentifierDecl	ctxt
>686	Identifier	ctxt
>687	IdentifierDeclType	fib_context
>688	IdentifierDeclStatement	 
>689	IdentifierDecl	start2 = tbb 
>690	AssignmentExpr	start2 = tbb 
>691	CallExpression	tbb 
>692	ArgumentList	 
>693	Callee	tbb 
>694	Identifier	tbb 
>695	Identifier	start2
>696	Identifier	start2
>697	IdentifierDeclType	tbb 
>698	IdentifierDeclStatement	 
>699	IdentifierDecl	n = atol ( argv [ 1 ] )
>700	AssignmentExpr	n = atol ( argv [ 1 ] )
>701	CallExpression	atol ( argv [ 1 ] )
>702	ArgumentList	argv [ 1 ]
>703	Argument	argv [ 1 ]
>704	ArrayIndexing	argv [ 1 ]
>705	PrimaryExpression	1
>706	Identifier	argv
>707	Callee	atol
>708	Identifier	atol
>709	Identifier	n
>710	Identifier	n
>711	IdentifierDeclType	fib_type
>712	IfStatement	if ( argc < 2 )
>713	CompoundStatement	 
>714	ReturnStatement	 
>715	PrimaryExpression	1
>716	ExpressionStatement	 
>717	ShiftExpression	std 
>718	PrimaryExpression	\"usage
>719	Identifier	std 
>720	Condition	 
>721	RelationalExpression	argc < 2
>722	PrimaryExpression	2
>723	Identifier	argc
>724	IdentifierDeclStatement	 
>725	IdentifierDecl	_dinit
>726	Identifier	_dinit
>727	IdentifierDeclType	CnC 
>728	ExpressionStatement	 
>729	CallExpression	_putenv ( \"CNC_USE_AFFINITY=1\" )
>730	ArgumentList	\"CNC_USE_AFFINITY=1\"
>731	Argument	\"CNC_USE_AFFINITY=1\"
>732	PrimaryExpression	\"CNC_USE_AFFINITY=1\"
>733	Callee	_putenv
>734	Identifier	_putenv
>735	ExpressionStatement	 
>736	CallExpression	_putenv ( \"CNC_SCHEDULER=FIFO_STEAL\" )
>737	ArgumentList	\"CNC_SCHEDULER=FIFO_STEAL\"
>738	Argument	\"CNC_SCHEDULER=FIFO_STEAL\"
>739	PrimaryExpression	\"CNC_SCHEDULER=FIFO_STEAL\"
>740	Callee	_putenv
>741	Identifier	_putenv
<7=10,9,8
<10=11
<11=12
<17=26,25,18
<18=22,19
<19=21,20
<22=24,23
<26=42,27
<27=28
<28=38,37,29
<29=36,30
<30=34,31
<31=32
<32=33
<34=35
<38=39
<39=41,40
<42=43
<43=45,44
<56=62,61,57
<57=58
<58=60,59
<62=63
<63=64
<64=67,66,65
<67=68
<68=70,69
<75=81,80,76
<76=77
<77=79,78
<81=82
<82=142,133,83
<83=84
<84=93,92,87,85
<85=86
<87=88
<88=91,90,89
<93=129,118,94
<94=95
<95=107,96
<96=106,99,97
<97=98
<99=100
<100=105,104,101
<101=103,102
<107=108
<108=115,109
<109=111,110
<111=113,112
<113=114
<115=117,116
<118=128,121,119
<119=120
<121=122
<122=127,126,123
<123=125,124
<129=130
<130=132,131
<133=134
<134=141,135
<135=139,136
<136=137
<137=138
<139=140
<142=143
<143=145,144
<158=164,163,159
<159=160
<160=162,161
<164=165
<165=166
<166=174,168,167
<168=172,169
<169=170
<170=171
<172=173
<174=175
<175=177,176
<184=189,185
<185=186
<186=188,187
<189=190
<190=191
<191=195,192
<192=193
<193=194
<195=196
<203=205,204
<205=206
<206=207
<207=211,208
<208=209
<209=210
<211=212
<216=222,221,217
<217=218
<218=220,219
<222=320,223
<223=312,308,305,224
<224=294,279,267,225
<225=260,236,226
<226=227
<227=228
<228=229
<229=231,230
<231=233,232
<233=235,234
<236=248,237
<237=238
<238=243,239
<239=241,240
<241=242
<243=245,244
<245=247,246
<248=249
<249=255,250
<250=252,251
<252=254,253
<255=257,256
<257=259,258
<260=261
<261=266,262
<262=264,263
<264=265
<267=268
<268=278,277,269
<269=275,270
<270=271
<271=272
<272=274,273
<275=276
<279=280
<280=289,281
<281=287,282
<282=283
<283=284
<284=286,285
<287=288
<289=291,290
<291=293,292
<294=295
<295=299,296
<296=297
<297=298
<299=300
<300=302,301
<302=304,303
<305=307,306
<308=309
<309=311,310
<312=313
<313=314
<314=319,318,315
<315=317,316
<320=321
<321=325,322
<322=323
<323=324
<325=326
<326=328,327
<354=363,362,355
<355=359,356
<356=358,357
<359=361,360
<363=366,364
<364=365
<366=443,382,367
<367=368
<368=369
<369=370
<370=376,371
<371=374,372
<372=373
<374=375
<376=377
<377=379,378
<379=381,380
<382=439,424,420,405,398,383
<383=384
<384=392,385
<385=390,386
<386=387
<387=389,388
<390=391
<392=393
<393=395,394
<395=397,396
<398=399
<399=401,400
<401=402
<402=404,403
<405=406
<406=414,407
<407=410,408
<408=409
<410=411
<411=413,412
<414=415
<415=417,416
<417=419,418
<420=421
<421=423,422
<424=425
<425=433,426
<426=429,427
<427=428
<429=430
<430=432,431
<433=434
<434=436,435
<436=438,437
<439=440
<440=442,441
<443=444
<444=446,445
<456=465,464,457
<457=461,458
<458=460,459
<461=463,462
<465=468,466
<466=467
<468=496,469
<469=483,470
<470=471
<471=477,472
<472=473
<473=474
<474=476,475
<477=478
<478=480,479
<480=482,481
<483=484
<484=490,485
<485=486
<486=487
<487=489,488
<490=491
<491=493,492
<493=495,494
<496=497
<497=499,498
<507=519,518,508
<508=515,512,509
<509=511,510
<512=514,513
<515=517,516
<519=520
<520=588,521
<521=570,555,537,522
<522=523
<523=533,524
<524=529,525
<525=526
<526=528,527
<529=530
<530=532,531
<533=534
<534=536,535
<537=538
<538=553,539
<539=540
<540=541
<541=543,542
<543=551,544
<544=547,545
<545=546
<547=548
<548=550,549
<551=552
<553=554
<555=556
<556=566,557
<557=562,558
<558=559
<559=561,560
<562=563
<563=565,564
<566=567
<567=569,568
<570=571
<571=586,572
<572=573
<573=574
<574=576,575
<576=584,577
<577=580,578
<578=579
<580=581
<581=583,582
<584=585
<586=587
<588=589
<589=591,590
<600=609,608,601
<601=605,602
<602=604,603
<605=607,606
<609=735,728,724,712,698,688,684,673,666,656,652,639,627,612,610
<610=611
<612=613
<613=626,614
<614=625,615
<615=617,616
<617=619,618
<619=620
<620=622,621
<622=624,623
<627=628
<628=638,629
<629=637,630
<630=636,631
<631=635,632
<632=634,633
<639=640
<640=646,641
<641=644,642
<642=643
<644=645
<646=647
<647=649,648
<649=651,650
<652=653
<653=655,654
<656=657
<657=665,664,658
<658=663,659
<659=661,660
<661=662
<666=667
<667=669,668
<669=670
<670=672,671
<673=674
<674=678,675
<675=676
<676=677
<678=679
<679=681,680
<681=683,682
<684=685
<685=687,686
<688=689
<689=697,696,690
<690=695,691
<691=693,692
<693=694
<698=699
<699=711,710,700
<700=709,701
<701=707,702
<702=703
<703=704
<704=706,705
<707=708
<712=720,713
<713=716,714
<714=715
<716=717
<717=719,718
<720=721
<721=723,722
<724=725
<725=727,726
<728=729
<729=733,730
<730=731
<731=732
<733=734
<735=736
<736=740,737
<737=738
<738=739
<740=741
