>3	FunctionDef	usage ()
>4	ParameterList	 
>5	ReturnType	void
>6	CompoundStatement	 
>7	ExpressionStatement	 
>8	ShiftExpression	cerr << \"OPTIONS
>9	ShiftExpression	\"OPTIONS
>10	ShiftExpression	\"  -tags <filename>  
>11	ShiftExpression	\"  -x                
>12	ShiftExpression	DRWN_STANDARD_OPTIONS_USAGE << endl
>13	Identifier	endl
>14	Identifier	DRWN_STANDARD_OPTIONS_USAGE
>15	PrimaryExpression	\"  -x                
>16	PrimaryExpression	\"  -tags <filename>  
>17	PrimaryExpression	\"OPTIONS
>18	Identifier	cerr
>19	ExpressionStatement	 
>20	ShiftExpression	cerr << \"USAGE
>21	PrimaryExpression	\"USAGE
>22	Identifier	cerr
>23	ExpressionStatement	 
>24	ShiftExpression	cerr << DRWN_USAGE_HEADER << endl
>25	ShiftExpression	DRWN_USAGE_HEADER << endl
>26	Identifier	endl
>27	Identifier	DRWN_USAGE_HEADER
>28	Identifier	cerr
>32	FunctionDef	main (int argc , char * argv [ ])
>33	ParameterList	int argc , char * argv [ ]
>34	Parameter	 
>35	Identifier	argv
>36	ParameterType	char * [ ]
>37	Parameter	 
>38	Identifier	argc
>39	ParameterType	int
>40	ReturnType	int
>41	CompoundStatement	 
>42	ReturnStatement	 
>43	PrimaryExpression	0
>44	ExpressionStatement	 
>45	CallExpression	drwnCodeProfiler 
>46	ArgumentList	 
>47	Callee	drwnCodeProfiler 
>48	Identifier	drwnCodeProfiler 
>49	ExpressionStatement	 
>50	CallExpression	drwnCodeProfiler 
>51	ArgumentList	drwnCodeProfiler 
>52	Argument	drwnCodeProfiler 
>53	CallExpression	drwnCodeProfiler 
>54	ArgumentList	\"main\"
>55	Argument	\"main\"
>56	PrimaryExpression	\"main\"
>57	Callee	drwnCodeProfiler 
>58	Identifier	drwnCodeProfiler 
>59	Callee	drwnCodeProfiler 
>60	Identifier	drwnCodeProfiler 
>61	ExpressionStatement	 
>62	CallExpression	cv 
>63	ArgumentList	 
>64	Callee	cv 
>65	Identifier	cv 
>66	IfStatement	if ( bVisualize && ( baseNames . size ( ) == 1 ) )
>67	CompoundStatement	 
>68	ExpressionStatement	 
>69	CallExpression	cv 
>70	ArgumentList	- 1
>71	Argument	- 1
>72	UnaryOp	- 1
>73	PrimaryExpression	1
>74	UnaryOperator	-
>75	Callee	cv 
>76	Identifier	cv 
>77	Condition	 
>78	AndExpression	bVisualize && ( baseNames . size ( ) == 1 )
>79	EqualityExpression	baseNames . size ( ) == 1
>80	PrimaryExpression	1
>81	CallExpression	baseNames . size ( )
>82	ArgumentList	 
>83	Callee	baseNames . size
>84	MemberAccess	baseNames . size
>85	Identifier	size
>86	Identifier	baseNames
>87	Identifier	bVisualize
>88	ForStatement	for ( int n = 0 ; n < ( int ) baseNames . size ( ) ; n ++ )
>89	CompoundStatement	 
>90	ExpressionStatement	 
>91	CallExpression	cv 
>92	ArgumentList	lblFilename
>93	Argument	labels
>94	Identifier	labels
>95	Argument	lblFilename
>96	Identifier	lblFilename
>97	Callee	cv 
>98	Identifier	cv 
>99	IdentifierDeclStatement	 
>100	IdentifierDecl	lblFilename = gMultiSegConfig . filebase ( \"lblDir\" , baseNames [ n ] ) + string ( \".png\" )
>101	AssignmentExpr	lblFilename = gMultiSegConfig . filebase ( \"lblDir\" , baseNames [ n ] ) + string ( \".png\" )
>102	AdditiveExpression	gMultiSegConfig . filebase ( \"lblDir\" , baseNames [ n ] ) + string ( \".png\" )
>103	CallExpression	string ( \".png\" )
>104	ArgumentList	\".png\"
>105	Argument	\".png\"
>106	PrimaryExpression	\".png\"
>107	Callee	string
>108	Identifier	string
>109	CallExpression	gMultiSegConfig . filebase ( \"lblDir\" , baseNames [ n ] )
>110	ArgumentList	\"lblDir\"
>111	Argument	baseNames [ n ]
>112	ArrayIndexing	baseNames [ n ]
>113	Identifier	n
>114	Identifier	baseNames
>115	Argument	\"lblDir\"
>116	PrimaryExpression	\"lblDir\"
>117	Callee	gMultiSegConfig . filebase
>118	MemberAccess	gMultiSegConfig . filebase
>119	Identifier	filebase
>120	Identifier	gMultiSegConfig
>121	Identifier	lblFilename
>122	Identifier	lblFilename
>123	IdentifierDeclType	const string
>124	IfStatement	if ( bVisualize )
>125	CompoundStatement	 
>126	ExpressionStatement	 
>127	CallExpression	drwnShowDebuggingImage ( labels , string ( WINDOW_NAME ) , false )
>128	ArgumentList	labels
>129	Argument	false
>130	Identifier	false
>131	Argument	string ( WINDOW_NAME )
>132	CallExpression	string ( WINDOW_NAME )
>133	ArgumentList	WINDOW_NAME
>134	Argument	WINDOW_NAME
>135	Identifier	WINDOW_NAME
>136	Callee	string
>137	Identifier	string
>138	Argument	labels
>139	Identifier	labels
>140	Callee	drwnShowDebuggingImage
>141	Identifier	drwnShowDebuggingImage
>142	Condition	 
>143	Identifier	bVisualize
>144	ForStatement	for ( drwnXMLNode * node = xml -> first_node ( \"object\" ) ; node != NULL ; node = node -> next_sibling ( \"object\" ) )
>145	CompoundStatement	 
>146	ExpressionStatement	 
>147	Identifier	poly
>148	Statement	 
>149	Statement	 
>150	Statement	 
>151	ExpressionStatement	 
>152	CallExpression	cv 
>153	ArgumentList	labels
>154	Argument	colour
>155	Identifier	colour
>156	Argument	( int ) numPoints + 1
>157	AdditiveExpression	( int ) numPoints + 1
>158	PrimaryExpression	1
>159	CastExpression	( int ) numPoints
>160	Identifier	numPoints
>161	CastTarget	int
>162	Argument	poly
>163	Identifier	poly
>164	Argument	labels
>165	Identifier	labels
>166	Callee	cv 
>167	Identifier	cv 
>168	ExpressionStatement	 
>169	AssignmentExpr	poly [ numPoints ] = poly [ 0 ]
>170	ArrayIndexing	poly [ 0 ]
>171	PrimaryExpression	0
>172	Identifier	poly
>173	ArrayIndexing	poly [ numPoints ]
>174	Identifier	numPoints
>175	Identifier	poly
>176	ForStatement	for ( int j = 0 ; j < numPoints ; j ++ )
>177	CompoundStatement	 
>178	ExpressionStatement	 
>179	AssignmentExpr	poly [ j ] = cv 
>180	CallExpression	cv 
>181	ArgumentList	x
>182	Argument	y
>183	Identifier	y
>184	Argument	x
>185	Identifier	x
>186	Callee	cv 
>187	Identifier	cv 
>188	ArrayIndexing	poly [ j ]
>189	Identifier	j
>190	Identifier	poly
>191	IdentifierDeclStatement	 
>192	IdentifierDecl	y = atoi ( pt -> first_node ( \"y\" ) -> value ( ) )
>193	AssignmentExpr	y = atoi ( pt -> first_node ( \"y\" ) -> value ( ) )
>194	CallExpression	atoi ( pt -> first_node ( \"y\" ) -> value ( ) )
>195	ArgumentList	pt -> first_node ( \"y\" ) -> value ( )
>196	Argument	pt -> first_node ( \"y\" ) -> value ( )
>197	CallExpression	pt -> first_node ( \"y\" ) -> value ( )
>198	ArgumentList	 
>199	Callee	pt -> first_node ( \"y\" ) -> value
>200	PtrMemberAccess	pt -> first_node ( \"y\" ) -> value
>201	Identifier	value
>202	CallExpression	pt -> first_node ( \"y\" )
>203	ArgumentList	\"y\"
>204	Argument	\"y\"
>205	PrimaryExpression	\"y\"
>206	Callee	pt -> first_node
>207	PtrMemberAccess	pt -> first_node
>208	Identifier	first_node
>209	Identifier	pt
>210	Callee	atoi
>211	Identifier	atoi
>212	Identifier	y
>213	Identifier	y
>214	IdentifierDeclType	const int
>215	IdentifierDeclStatement	 
>216	IdentifierDecl	x = atoi ( pt -> first_node ( \"x\" ) -> value ( ) )
>217	AssignmentExpr	x = atoi ( pt -> first_node ( \"x\" ) -> value ( ) )
>218	CallExpression	atoi ( pt -> first_node ( \"x\" ) -> value ( ) )
>219	ArgumentList	pt -> first_node ( \"x\" ) -> value ( )
>220	Argument	pt -> first_node ( \"x\" ) -> value ( )
>221	CallExpression	pt -> first_node ( \"x\" ) -> value ( )
>222	ArgumentList	 
>223	Callee	pt -> first_node ( \"x\" ) -> value
>224	PtrMemberAccess	pt -> first_node ( \"x\" ) -> value
>225	Identifier	value
>226	CallExpression	pt -> first_node ( \"x\" )
>227	ArgumentList	\"x\"
>228	Argument	\"x\"
>229	PrimaryExpression	\"x\"
>230	Callee	pt -> first_node
>231	PtrMemberAccess	pt -> first_node
>232	Identifier	first_node
>233	Identifier	pt
>234	Callee	atoi
>235	Identifier	atoi
>236	Identifier	x
>237	Identifier	x
>238	IdentifierDeclType	const int
>239	ExpressionStatement	 
>240	CallExpression	DRWN_ASSERT ( pt != NULL )
>241	ArgumentList	pt != NULL
>242	Argument	pt != NULL
>243	EqualityExpression	pt != NULL
>244	Identifier	NULL
>245	Identifier	pt
>246	Callee	DRWN_ASSERT
>247	Identifier	DRWN_ASSERT
>248	ExpressionStatement	 
>249	AssignmentExpr	pt = ( j == 0 ) ? child -> first_node ( \"pt\" ) 
>250	ConditionalExpression	( j == 0 ) ? child -> first_node ( \"pt\" ) 
>251	CallExpression	pt -> next_sibling ( \"pt\" )
>252	ArgumentList	\"pt\"
>253	Argument	\"pt\"
>254	PrimaryExpression	\"pt\"
>255	Callee	pt -> next_sibling
>256	PtrMemberAccess	pt -> next_sibling
>257	Identifier	next_sibling
>258	Identifier	pt
>259	CallExpression	child -> first_node ( \"pt\" )
>260	ArgumentList	\"pt\"
>261	Argument	\"pt\"
>262	PrimaryExpression	\"pt\"
>263	Callee	child -> first_node
>264	PtrMemberAccess	child -> first_node
>265	Identifier	first_node
>266	Identifier	child
>267	Condition	j == 0
>268	EqualityExpression	j == 0
>269	PrimaryExpression	0
>270	Identifier	j
>271	Identifier	pt
>272	IncDecOp	 
>273	IncDec	++
>274	Identifier	j
>275	Condition	 
>276	RelationalExpression	j < numPoints
>277	Identifier	numPoints
>278	Identifier	j
>279	ForInit	 
>280	IdentifierDeclStatement	int j = 0 ;
>281	IdentifierDecl	j = 0
>282	AssignmentExpr	j = 0
>283	PrimaryExpression	0
>284	Identifier	j
>285	Identifier	j
>286	IdentifierDeclType	int
>287	IdentifierDeclStatement	 
>288	IdentifierDecl	* pt = NULL
>289	AssignmentExpr	* pt = NULL
>290	Identifier	NULL
>291	Identifier	NULL
>292	Identifier	pt
>293	IdentifierDeclType	drwnXMLNode *
>294	IdentifierDeclStatement	 
>295	IdentifierDecl	* poly = new cv 
>296	AssignmentExpr	* poly = new cv 
>297	AdditiveExpression	numPoints + 1
>298	PrimaryExpression	1
>299	Identifier	numPoints
>300	Identifier	poly
>301	Identifier	poly
>302	IdentifierDeclType	cv 
>303	ExpressionStatement	 
>304	CallExpression	DRWN_LOG_DEBUG ( name << \" (\" << colourIndex << \") \" << \" has \" << numPoints << \" points\" )
>305	ArgumentList	name << \" (\" << colourIndex << \") \" << \" has \" << numPoints << \" points\"
>306	Argument	name << \" (\" << colourIndex << \") \" << \" has \" << numPoints << \" points\"
>307	ShiftExpression	name << \" (\" << colourIndex << \") \" << \" has \" << numPoints << \" points\"
>308	ShiftExpression	\" (\" << colourIndex << \") \" << \" has \" << numPoints << \" points\"
>309	ShiftExpression	colourIndex << \") \" << \" has \" << numPoints << \" points\"
>310	ShiftExpression	\") \" << \" has \" << numPoints << \" points\"
>311	ShiftExpression	\" has \" << numPoints << \" points\"
>312	ShiftExpression	numPoints << \" points\"
>313	PrimaryExpression	\" points\"
>314	Identifier	numPoints
>315	PrimaryExpression	\" has \"
>316	PrimaryExpression	\") \"
>317	Identifier	colourIndex
>318	PrimaryExpression	\" (\"
>319	Identifier	name
>320	Callee	DRWN_LOG_DEBUG
>321	Identifier	DRWN_LOG_DEBUG
>322	IdentifierDeclStatement	 
>323	IdentifierDecl	numPoints = drwnCountXMLChildren ( * child , \"pt\" )
>324	AssignmentExpr	numPoints = drwnCountXMLChildren ( * child , \"pt\" )
>325	CallExpression	drwnCountXMLChildren ( * child , \"pt\" )
>326	ArgumentList	* child
>327	Argument	\"pt\"
>328	PrimaryExpression	\"pt\"
>329	Argument	* child
>330	UnaryOp	* child
>331	Identifier	child
>332	UnaryOperator	*
>333	Callee	drwnCountXMLChildren
>334	Identifier	drwnCountXMLChildren
>335	Identifier	numPoints
>336	Identifier	numPoints
>337	IdentifierDeclType	const int
>338	ExpressionStatement	 
>339	CallExpression	DRWN_ASSERT ( child != NULL )
>340	ArgumentList	child != NULL
>341	Argument	child != NULL
>342	EqualityExpression	child != NULL
>343	Identifier	NULL
>344	Identifier	child
>345	Callee	DRWN_ASSERT
>346	Identifier	DRWN_ASSERT
>347	ExpressionStatement	 
>348	AssignmentExpr	child = node -> first_node ( \"polygon\" )
>349	CallExpression	node -> first_node ( \"polygon\" )
>350	ArgumentList	\"polygon\"
>351	Argument	\"polygon\"
>352	PrimaryExpression	\"polygon\"
>353	Callee	node -> first_node
>354	PtrMemberAccess	node -> first_node
>355	Identifier	first_node
>356	Identifier	node
>357	Identifier	child
>358	IdentifierDeclStatement	 
>359	IdentifierDecl	colour = CV_RGB ( gMultiSegRegionDefs . red ( colourIndex ) , gMultiSegRegionDefs . green ( colourIndex ) , gMultiSegRegionDefs \
>360	AssignmentExpr	colour = CV_RGB ( gMultiSegRegionDefs . red ( colourIndex ) , gMultiSegRegionDefs . green ( colourIndex ) , \
>361	CallExpression	CV_RGB ( gMultiSegRegionDefs . red ( colourIndex ) , gMultiSegRegionDefs . green ( colourIndex ) , gMultiSegRegionDefs \
>362	ArgumentList	gMultiSegRegionDefs . red ( colourIndex )
>363	Argument	gMultiSegRegionDefs . blue ( colourIndex )
>364	CallExpression	gMultiSegRegionDefs . blue ( colourIndex )
>365	ArgumentList	colourIndex
>366	Argument	colourIndex
>367	Identifier	colourIndex
>368	Callee	gMultiSegRegionDefs . blue
>369	MemberAccess	gMultiSegRegionDefs . blue
>370	Identifier	blue
>371	Identifier	gMultiSegRegionDefs
>372	Argument	gMultiSegRegionDefs . green ( colourIndex )
>373	CallExpression	gMultiSegRegionDefs . green ( colourIndex )
>374	ArgumentList	colourIndex
>375	Argument	colourIndex
>376	Identifier	colourIndex
>377	Callee	gMultiSegRegionDefs . green
>378	MemberAccess	gMultiSegRegionDefs . green
>379	Identifier	green
>380	Identifier	gMultiSegRegionDefs
>381	Argument	gMultiSegRegionDefs . red ( colourIndex )
>382	CallExpression	gMultiSegRegionDefs . red ( colourIndex )
>383	ArgumentList	colourIndex
>384	Argument	colourIndex
>385	Identifier	colourIndex
>386	Callee	gMultiSegRegionDefs . red
>387	MemberAccess	gMultiSegRegionDefs . red
>388	Identifier	red
>389	Identifier	gMultiSegRegionDefs
>390	Callee	CV_RGB
>391	Identifier	CV_RGB
>392	Identifier	colour
>393	Identifier	colour
>394	IdentifierDeclType	cv 
>395	IfStatement	if ( table . find ( name ) != table . end ( ) )
>396	ElseStatement	else
>397	CompoundStatement	 
>398	ContinueStatement	 
>399	ExpressionStatement	 
>400	CallExpression	DRWN_LOG_WARNING ( \"could not find \" << name << \" in colour table\" )
>401	ArgumentList	\"could not find \" << name << \" in colour table\"
>402	Argument	\"could not find \" << name << \" in colour table\"
>403	ShiftExpression	\"could not find \" << name << \" in colour table\"
>404	ShiftExpression	name << \" in colour table\"
>405	PrimaryExpression	\" in colour table\"
>406	Identifier	name
>407	PrimaryExpression	\"could not find \"
>408	Callee	DRWN_LOG_WARNING
>409	Identifier	DRWN_LOG_WARNING
>410	CompoundStatement	 
>411	ExpressionStatement	 
>412	AssignmentExpr	colourIndex = table [ name ]
>413	ArrayIndexing	table [ name ]
>414	Identifier	name
>415	Identifier	table
>416	Identifier	colourIndex
>417	Condition	 
>418	EqualityExpression	table . find ( name ) != table . end ( )
>419	CallExpression	table . end ( )
>420	ArgumentList	 
>421	Callee	table . end
>422	MemberAccess	table . end
>423	Identifier	end
>424	Identifier	table
>425	CallExpression	table . find ( name )
>426	ArgumentList	name
>427	Argument	name
>428	Identifier	name
>429	Callee	table . find
>430	MemberAccess	table . find
>431	Identifier	find
>432	Identifier	table
>433	IdentifierDeclStatement	 
>434	IdentifierDecl	colourIndex = 0
>435	AssignmentExpr	colourIndex = 0
>436	PrimaryExpression	0
>437	Identifier	colourIndex
>438	Identifier	colourIndex
>439	IdentifierDeclType	unsigned int
>440	IfStatement	if ( tags . find ( name ) != tags . end ( ) )
>441	CompoundStatement	 
>442	ExpressionStatement	 
>443	AssignmentExpr	name = tags [ name ]
>444	ArrayIndexing	tags [ name ]
>445	Identifier	name
>446	Identifier	tags
>447	Identifier	name
>448	Condition	 
>449	EqualityExpression	tags . find ( name ) != tags . end ( )
>450	CallExpression	tags . end ( )
>451	ArgumentList	 
>452	Callee	tags . end
>453	MemberAccess	tags . end
>454	Identifier	end
>455	Identifier	tags
>456	CallExpression	tags . find ( name )
>457	ArgumentList	name
>458	Argument	name
>459	Identifier	name
>460	Callee	tags . find
>461	MemberAccess	tags . find
>462	Identifier	find
>463	Identifier	tags
>464	IdentifierDeclStatement	 
>465	IdentifierDecl	name = string ( child -> value ( ) )
>466	AssignmentExpr	name = string ( child -> value ( ) )
>467	CallExpression	string ( child -> value ( ) )
>468	ArgumentList	child -> value ( )
>469	Argument	child -> value ( )
>470	CallExpression	child -> value ( )
>471	ArgumentList	 
>472	Callee	child -> value
>473	PtrMemberAccess	child -> value
>474	Identifier	value
>475	Identifier	child
>476	Callee	string
>477	Identifier	string
>478	Identifier	name
>479	Identifier	name
>480	IdentifierDeclType	string
>481	IfStatement	if ( ( child == NULL ) || ( child -> value ( ) == NULL ) )
>482	CompoundStatement	 
>483	ContinueStatement	 
>484	ExpressionStatement	 
>485	CallExpression	DRWN_LOG_WARNING ( \"object has no name field\" )
>486	ArgumentList	\"object has no name field\"
>487	Argument	\"object has no name field\"
>488	PrimaryExpression	\"object has no name field\"
>489	Callee	DRWN_LOG_WARNING
>490	Identifier	DRWN_LOG_WARNING
>491	Condition	 
>492	OrExpression	( child == NULL ) || ( child -> value ( ) == NULL )
>493	EqualityExpression	child -> value ( ) == NULL
>494	Identifier	NULL
>495	CallExpression	child -> value ( )
>496	ArgumentList	 
>497	Callee	child -> value
>498	PtrMemberAccess	child -> value
>499	Identifier	value
>500	Identifier	child
>501	EqualityExpression	child == NULL
>502	Identifier	NULL
>503	Identifier	child
>504	IdentifierDeclStatement	 
>505	IdentifierDecl	* child = node -> first_node ( \"name\" )
>506	AssignmentExpr	* child = node -> first_node ( \"name\" )
>507	CallExpression	node -> first_node ( \"name\" )
>508	ArgumentList	\"name\"
>509	Argument	\"name\"
>510	PrimaryExpression	\"name\"
>511	Callee	node -> first_node
>512	PtrMemberAccess	node -> first_node
>513	Identifier	first_node
>514	Identifier	node
>515	Identifier	child
>516	Identifier	child
>517	IdentifierDeclType	drwnXMLNode *
>518	AssignmentExpr	 
>519	CallExpression	node -> next_sibling ( \"object\" )
>520	ArgumentList	\"object\"
>521	Argument	\"object\"
>522	PrimaryExpression	\"object\"
>523	Callee	node -> next_sibling
>524	PtrMemberAccess	node -> next_sibling
>525	Identifier	next_sibling
>526	Identifier	node
>527	Identifier	node
>528	Condition	 
>529	EqualityExpression	node != NULL
>530	Identifier	NULL
>531	Identifier	node
>532	ForInit	 
>533	IdentifierDeclStatement	drwnXMLNode * node = xml -> first_node ( \"object\" ) ;
>534	IdentifierDecl	* node = xml -> first_node ( \"object\" )
>535	AssignmentExpr	* node = xml -> first_node ( \"object\" )
>536	CallExpression	xml -> first_node ( \"object\" )
>537	ArgumentList	\"object\"
>538	Argument	\"object\"
>539	PrimaryExpression	\"object\"
>540	Callee	xml -> first_node
>541	PtrMemberAccess	xml -> first_node
>542	Identifier	first_node
>543	Identifier	xml
>544	Identifier	node
>545	Identifier	node
>546	IdentifierDeclType	drwnXMLNode *
>547	IdentifierDeclStatement	 
>548	IdentifierDecl	* xml = drwnParseXMLFile ( doc , xmlFilename . c_str ( ) , \"annotation\" )
>549	AssignmentExpr	* xml = drwnParseXMLFile ( doc , xmlFilename . c_str ( ) , \"annotation\" )
>550	CallExpression	drwnParseXMLFile ( doc , xmlFilename . c_str ( ) , \"annotation\" )
>551	ArgumentList	doc
>552	Argument	\"annotation\"
>553	PrimaryExpression	\"annotation\"
>554	Argument	xmlFilename . c_str ( )
>555	CallExpression	xmlFilename . c_str ( )
>556	ArgumentList	 
>557	Callee	xmlFilename . c_str
>558	MemberAccess	xmlFilename . c_str
>559	Identifier	c_str
>560	Identifier	xmlFilename
>561	Argument	doc
>562	Identifier	doc
>563	Callee	drwnParseXMLFile
>564	Identifier	drwnParseXMLFile
>565	Identifier	xml
>566	Identifier	xml
>567	IdentifierDeclType	drwnXMLNode *
>568	IdentifierDeclStatement	 
>569	IdentifierDecl	doc
>570	Identifier	doc
>571	IdentifierDeclType	drwnXMLDoc
>572	IdentifierDeclStatement	 
>573	IdentifierDecl	xmlFilename = gMultiSegConfig . filebase ( \"lblDir\" , baseNames [ n ] ) + string ( \".xml\" )
>574	AssignmentExpr	xmlFilename = gMultiSegConfig . filebase ( \"lblDir\" , baseNames [ n ] ) + string ( \".xml\" )
>575	AdditiveExpression	gMultiSegConfig . filebase ( \"lblDir\" , baseNames [ n ] ) + string ( \".xml\" )
>576	CallExpression	string ( \".xml\" )
>577	ArgumentList	\".xml\"
>578	Argument	\".xml\"
>579	PrimaryExpression	\".xml\"
>580	Callee	string
>581	Identifier	string
>582	CallExpression	gMultiSegConfig . filebase ( \"lblDir\" , baseNames [ n ] )
>583	ArgumentList	\"lblDir\"
>584	Argument	baseNames [ n ]
>585	ArrayIndexing	baseNames [ n ]
>586	Identifier	n
>587	Identifier	baseNames
>588	Argument	\"lblDir\"
>589	PrimaryExpression	\"lblDir\"
>590	Callee	gMultiSegConfig . filebase
>591	MemberAccess	gMultiSegConfig . filebase
>592	Identifier	filebase
>593	Identifier	gMultiSegConfig
>594	Identifier	xmlFilename
>595	Identifier	xmlFilename
>596	IdentifierDeclType	const string
>597	IdentifierDeclStatement	 
>598	IdentifierDecl	labels ( img . rows , img . cols , CV_8UC3 )
>599	Expression	img . rows , img . cols , CV_8UC3
>600	Expression	img . cols , CV_8UC3
>601	Identifier	CV_8UC3
>602	MemberAccess	img . cols
>603	Identifier	cols
>604	Identifier	img
>605	MemberAccess	img . rows
>606	Identifier	rows
>607	Identifier	img
>608	Identifier	labels
>609	IdentifierDeclType	cv 
>610	IfStatement	if ( bVisualize )
>611	CompoundStatement	 
>612	ExpressionStatement	 
>613	CallExpression	cv 
>614	ArgumentList	100
>615	Argument	100
>616	PrimaryExpression	100
>617	Callee	cv 
>618	Identifier	cv 
>619	ExpressionStatement	 
>620	CallExpression	cv 
>621	ArgumentList	WINDOW_NAME
>622	Argument	img
>623	Identifier	img
>624	Argument	WINDOW_NAME
>625	Identifier	WINDOW_NAME
>626	Callee	cv 
>627	Identifier	cv 
>628	ExpressionStatement	 
>629	CallExpression	cv 
>630	ArgumentList	WINDOW_NAME
>631	Argument	WINDOW_NAME
>632	Identifier	WINDOW_NAME
>633	Callee	cv 
>634	Identifier	cv 
>635	Condition	 
>636	Identifier	bVisualize
>637	IdentifierDeclStatement	 
>638	IdentifierDecl	img = cv 
>639	AssignmentExpr	img = cv 
>640	CallExpression	cv 
>641	ArgumentList	imgFilename
>642	Argument	CV_LOAD_IMAGE_COLOR
>643	Identifier	CV_LOAD_IMAGE_COLOR
>644	Argument	imgFilename
>645	Identifier	imgFilename
>646	Callee	cv 
>647	Identifier	cv 
>648	Identifier	img
>649	Identifier	img
>650	IdentifierDeclType	cv 
>651	IdentifierDeclStatement	 
>652	IdentifierDecl	imgFilename = gMultiSegConfig . filename ( \"imgDir\" , baseNames [ n ] , \"imgExt\" )
>653	AssignmentExpr	imgFilename = gMultiSegConfig . filename ( \"imgDir\" , baseNames [ n ] , \"imgExt\" )
>654	CallExpression	gMultiSegConfig . filename ( \"imgDir\" , baseNames [ n ] , \"imgExt\" )
>655	ArgumentList	\"imgDir\"
>656	Argument	\"imgExt\"
>657	PrimaryExpression	\"imgExt\"
>658	Argument	baseNames [ n ]
>659	ArrayIndexing	baseNames [ n ]
>660	Identifier	n
>661	Identifier	baseNames
>662	Argument	\"imgDir\"
>663	PrimaryExpression	\"imgDir\"
>664	Callee	gMultiSegConfig . filename
>665	MemberAccess	gMultiSegConfig . filename
>666	Identifier	filename
>667	Identifier	gMultiSegConfig
>668	Identifier	imgFilename
>669	Identifier	imgFilename
>670	IdentifierDeclType	const string
>671	ExpressionStatement	 
>672	CallExpression	DRWN_LOG_VERBOSE ( \"processing \" << baseNames [ n ] << \"...\" )
>673	ArgumentList	\"processing \" << baseNames [ n ] << \"...\"
>674	Argument	\"processing \" << baseNames [ n ] << \"...\"
>675	ShiftExpression	\"processing \" << baseNames [ n ] << \"...\"
>676	ShiftExpression	baseNames [ n ] << \"...\"
>677	PrimaryExpression	\"...\"
>678	ArrayIndexing	baseNames [ n ]
>679	Identifier	n
>680	Identifier	baseNames
>681	PrimaryExpression	\"processing \"
>682	Callee	DRWN_LOG_VERBOSE
>683	Identifier	DRWN_LOG_VERBOSE
>684	IncDecOp	 
>685	IncDec	++
>686	Identifier	n
>687	Condition	 
>688	RelationalExpression	n < ( int ) baseNames . size ( )
>689	CastExpression	( int ) baseNames . size ( )
>690	CallExpression	baseNames . size ( )
>691	ArgumentList	 
>692	Callee	baseNames . size
>693	MemberAccess	baseNames . size
>694	Identifier	size
>695	Identifier	baseNames
>696	CastTarget	int
>697	Identifier	n
>698	ForInit	 
>699	IdentifierDeclStatement	int n = 0 ;
>700	IdentifierDecl	n = 0
>701	AssignmentExpr	n = 0
>702	PrimaryExpression	0
>703	Identifier	n
>704	Identifier	n
>705	IdentifierDeclType	int
>706	ForStatement	for ( map < string , unsigned int > 
>707	CompoundStatement	 
>708	ExpressionStatement	 
>709	CallExpression	DRWN_LOG_DEBUG ( \"colour (\" << ( int ) gMultiSegRegionDefs . red ( it -> second ) << \", \" << ( int ) gMultiSegRegionDefs \
>710	ArgumentList	\"colour (\" << ( int ) gMultiSegRegionDefs . red ( it -> second ) << \", \" << ( int ) gMultiSegRegionDefs . green ( \
>711	Argument	\"colour (\" << ( int ) gMultiSegRegionDefs . red ( it -> second ) << \", \" << ( int ) gMultiSegRegionDefs . green ( \
>712	ShiftExpression	\"colour (\" << ( int ) gMultiSegRegionDefs . red ( it -> second ) << \", \" << ( int ) gMultiSegRegionDefs \
>713	ShiftExpression	( int ) gMultiSegRegionDefs . red ( it -> second ) << \", \" << ( int ) gMultiSegRegionDefs . green ( \
>714	ShiftExpression	\", \" << ( int ) gMultiSegRegionDefs . green ( it -> second ) << \", \" << ( int ) gMultiSegRegionDefs \
>715	ShiftExpression	( int ) gMultiSegRegionDefs . green ( it -> second ) << \", \" << ( int ) gMultiSegRegionDefs . blue ( \
>716	ShiftExpression	\", \" << ( int ) gMultiSegRegionDefs . blue ( it -> second ) << \") corresponds to label \" << it -> first
>717	ShiftExpression	( int ) gMultiSegRegionDefs . blue ( it -> second ) << \") corresponds to label \" << it -> first
>718	ShiftExpression	\") corresponds to label \" << it -> first
>719	PtrMemberAccess	it -> first
>720	Identifier	first
>721	Identifier	it
>722	PrimaryExpression	\") corresponds to label \"
>723	CastExpression	( int ) gMultiSegRegionDefs . blue ( it -> second )
>724	CallExpression	gMultiSegRegionDefs . blue ( it -> second )
>725	ArgumentList	it -> second
>726	Argument	it -> second
>727	PtrMemberAccess	it -> second
>728	Identifier	second
>729	Identifier	it
>730	Callee	gMultiSegRegionDefs . blue
>731	MemberAccess	gMultiSegRegionDefs . blue
>732	Identifier	blue
>733	Identifier	gMultiSegRegionDefs
>734	CastTarget	int
>735	PrimaryExpression	\", \"
>736	CastExpression	( int ) gMultiSegRegionDefs . green ( it -> second )
>737	CallExpression	gMultiSegRegionDefs . green ( it -> second )
>738	ArgumentList	it -> second
>739	Argument	it -> second
>740	PtrMemberAccess	it -> second
>741	Identifier	second
>742	Identifier	it
>743	Callee	gMultiSegRegionDefs . green
>744	MemberAccess	gMultiSegRegionDefs . green
>745	Identifier	green
>746	Identifier	gMultiSegRegionDefs
>747	CastTarget	int
>748	PrimaryExpression	\", \"
>749	CastExpression	( int ) gMultiSegRegionDefs . red ( it -> second )
>750	CallExpression	gMultiSegRegionDefs . red ( it -> second )
>751	ArgumentList	it -> second
>752	Argument	it -> second
>753	PtrMemberAccess	it -> second
>754	Identifier	second
>755	Identifier	it
>756	Callee	gMultiSegRegionDefs . red
>757	MemberAccess	gMultiSegRegionDefs . red
>758	Identifier	red
>759	Identifier	gMultiSegRegionDefs
>760	CastTarget	int
>761	PrimaryExpression	\"colour (\"
>762	Callee	DRWN_LOG_DEBUG
>763	Identifier	DRWN_LOG_DEBUG
>764	UnaryExpression	 
>765	Identifier	it
>766	IncDec	++
>767	Condition	 
>768	EqualityExpression	it != table . end ( )
>769	CallExpression	table . end ( )
>770	ArgumentList	 
>771	Callee	table . end
>772	MemberAccess	table . end
>773	Identifier	end
>774	Identifier	table
>775	Identifier	it
>776	ForInit	 
>777	IdentifierDeclStatement	map < string , unsigned int > 
>778	IdentifierDecl	it = table . begin ( )
>779	AssignmentExpr	it = table . begin ( )
>780	CallExpression	table . begin ( )
>781	ArgumentList	 
>782	Callee	table . begin
>783	MemberAccess	table . begin
>784	Identifier	begin
>785	Identifier	table
>786	Identifier	it
>787	Identifier	it
>788	IdentifierDeclType	map < string , unsigned int > 
>789	ForStatement	for ( set < int > 
>790	CompoundStatement	 
>791	ExpressionStatement	 
>792	AssignmentExpr	table [ gMultiSegRegionDefs . name ( * ik ) ] = gMultiSegRegionDefs . color ( * ik )
>793	CallExpression	gMultiSegRegionDefs . color ( * ik )
>794	ArgumentList	* ik
>795	Argument	* ik
>796	UnaryOp	* ik
>797	Identifier	ik
>798	UnaryOperator	*
>799	Callee	gMultiSegRegionDefs . color
>800	MemberAccess	gMultiSegRegionDefs . color
>801	Identifier	color
>802	Identifier	gMultiSegRegionDefs
>803	ArrayIndexing	table [ gMultiSegRegionDefs . name ( * ik ) ]
>804	CallExpression	gMultiSegRegionDefs . name ( * ik )
>805	ArgumentList	* ik
>806	Argument	* ik
>807	UnaryOp	* ik
>808	Identifier	ik
>809	UnaryOperator	*
>810	Callee	gMultiSegRegionDefs . name
>811	MemberAccess	gMultiSegRegionDefs . name
>812	Identifier	name
>813	Identifier	gMultiSegRegionDefs
>814	Identifier	table
>815	UnaryExpression	 
>816	Identifier	ik
>817	IncDec	++
>818	Condition	 
>819	EqualityExpression	ik != keys . end ( )
>820	CallExpression	keys . end ( )
>821	ArgumentList	 
>822	Callee	keys . end
>823	MemberAccess	keys . end
>824	Identifier	end
>825	Identifier	keys
>826	Identifier	ik
>827	ForInit	 
>828	IdentifierDeclStatement	set < int > 
>829	IdentifierDecl	ik = keys . begin ( )
>830	AssignmentExpr	ik = keys . begin ( )
>831	CallExpression	keys . begin ( )
>832	ArgumentList	 
>833	Callee	keys . begin
>834	MemberAccess	keys . begin
>835	Identifier	begin
>836	Identifier	keys
>837	Identifier	ik
>838	Identifier	ik
>839	IdentifierDeclType	set < int > 
>840	IdentifierDeclStatement	 
>841	IdentifierDecl	keys ( gMultiSegRegionDefs . keys ( ) )
>842	CallExpression	gMultiSegRegionDefs . keys ( )
>843	ArgumentList	 
>844	Callee	gMultiSegRegionDefs . keys
>845	MemberAccess	gMultiSegRegionDefs . keys
>846	Identifier	keys
>847	Identifier	gMultiSegRegionDefs
>848	Identifier	keys
>849	IdentifierDeclType	set < int >
>850	IdentifierDeclStatement	 
>851	IdentifierDecl	table
>852	Identifier	table
>853	IdentifierDeclType	map < string , unsigned int >
>854	IfStatement	if ( tagFilename != NULL )
>855	CompoundStatement	 
>856	ExpressionStatement	 
>857	CallExpression	DRWN_LOG_VERBOSE ( tags . size ( ) << \" tags synonyms read\" )
>858	ArgumentList	tags . size ( ) << \" tags synonyms read\"
>859	Argument	tags . size ( ) << \" tags synonyms read\"
>860	ShiftExpression	tags . size ( ) << \" tags synonyms read\"
>861	PrimaryExpression	\" tags synonyms read\"
>862	CallExpression	tags . size ( )
>863	ArgumentList	 
>864	Callee	tags . size
>865	MemberAccess	tags . size
>866	Identifier	size
>867	Identifier	tags
>868	Callee	DRWN_LOG_VERBOSE
>869	Identifier	DRWN_LOG_VERBOSE
>870	ForStatement	for ( unsigned i = 0 ; i < lines . size ( ) ; i ++ )
>871	CompoundStatement	 
>872	IfStatement	if ( head == string ( \"TAG
>873	ElseStatement	else
>874	CompoundStatement	 
>875	ExpressionStatement	 
>876	CallExpression	DRWN_LOG_DEBUG ( tail << \" maps to \" << latestTag )
>877	ArgumentList	tail << \" maps to \" << latestTag
>878	Argument	tail << \" maps to \" << latestTag
>879	ShiftExpression	tail << \" maps to \" << latestTag
>880	ShiftExpression	\" maps to \" << latestTag
>881	Identifier	latestTag
>882	PrimaryExpression	\" maps to \"
>883	Identifier	tail
>884	Callee	DRWN_LOG_DEBUG
>885	Identifier	DRWN_LOG_DEBUG
>886	ExpressionStatement	 
>887	AssignmentExpr	tags [ tail ] = latestTag
>888	Identifier	latestTag
>889	ArrayIndexing	tags [ tail ]
>890	Identifier	tail
>891	Identifier	tags
>892	CompoundStatement	 
>893	ExpressionStatement	 
>894	AssignmentExpr	latestTag = tail
>895	Identifier	tail
>896	Identifier	latestTag
>897	Condition	 
>898	EqualityExpression	head == string ( \"TAG
>899	CallExpression	string ( \"TAG
>900	ArgumentList	\"TAG
>901	Argument	\"TAG
>902	PrimaryExpression	\"TAG
>903	Callee	string
>904	Identifier	string
>905	Identifier	head
>906	IdentifierDeclStatement	 
>907	IdentifierDecl	tail = lines [ i ] . substr ( 5 , lines [ i ] . size ( ) - 6 )
>908	AssignmentExpr	tail = lines [ i ] . substr ( 5 , lines [ i ] . size ( ) - 6 )
>909	CallExpression	lines [ i ] . substr ( 5 , lines [ i ] . size ( ) - 6 )
>910	ArgumentList	5
>911	Argument	lines [ i ] . size ( ) - 6
>912	AdditiveExpression	lines [ i ] . size ( ) - 6
>913	PrimaryExpression	6
>914	CallExpression	lines [ i ] . size ( )
>915	ArgumentList	 
>916	Callee	lines [ i ] . size
>917	MemberAccess	lines [ i ] . size
>918	Identifier	size
>919	ArrayIndexing	lines [ i ]
>920	Identifier	i
>921	Identifier	lines
>922	Argument	5
>923	PrimaryExpression	5
>924	Callee	lines [ i ] . substr
>925	MemberAccess	lines [ i ] . substr
>926	Identifier	substr
>927	ArrayIndexing	lines [ i ]
>928	Identifier	i
>929	Identifier	lines
>930	Identifier	tail
>931	Identifier	tail
>932	IdentifierDeclType	string
>933	IdentifierDeclStatement	 
>934	IdentifierDecl	head = lines [ i ] . substr ( 0 , 4 )
>935	AssignmentExpr	head = lines [ i ] . substr ( 0 , 4 )
>936	CallExpression	lines [ i ] . substr ( 0 , 4 )
>937	ArgumentList	0
>938	Argument	4
>939	PrimaryExpression	4
>940	Argument	0
>941	PrimaryExpression	0
>942	Callee	lines [ i ] . substr
>943	MemberAccess	lines [ i ] . substr
>944	Identifier	substr
>945	ArrayIndexing	lines [ i ]
>946	Identifier	i
>947	Identifier	lines
>948	Identifier	head
>949	Identifier	head
>950	IdentifierDeclType	string
>951	IfStatement	if ( lines . size ( ) < 4 )
>952	ContinueStatement	 
>953	Condition	 
>954	RelationalExpression	lines . size ( ) < 4
>955	PrimaryExpression	4
>956	CallExpression	lines . size ( )
>957	ArgumentList	 
>958	Callee	lines . size
>959	MemberAccess	lines . size
>960	Identifier	size
>961	Identifier	lines
>962	IncDecOp	 
>963	IncDec	++
>964	Identifier	i
>965	Condition	 
>966	RelationalExpression	i < lines . size ( )
>967	CallExpression	lines . size ( )
>968	ArgumentList	 
>969	Callee	lines . size
>970	MemberAccess	lines . size
>971	Identifier	size
>972	Identifier	lines
>973	Identifier	i
>974	ForInit	 
>975	IdentifierDeclStatement	unsigned i = 0 ;
>976	IdentifierDecl	i = 0
>977	AssignmentExpr	i = 0
>978	PrimaryExpression	0
>979	Identifier	i
>980	Identifier	i
>981	IdentifierDeclType	unsigned
>982	IdentifierDeclStatement	 
>983	IdentifierDecl	lines = drwnReadLines ( tagFilename )
>984	AssignmentExpr	lines = drwnReadLines ( tagFilename )
>985	CallExpression	drwnReadLines ( tagFilename )
>986	ArgumentList	tagFilename
>987	Argument	tagFilename
>988	Identifier	tagFilename
>989	Callee	drwnReadLines
>990	Identifier	drwnReadLines
>991	Identifier	lines
>992	Identifier	lines
>993	IdentifierDeclType	vector < string >
>994	IdentifierDeclStatement	 
>995	IdentifierDecl	latestTag
>996	Identifier	latestTag
>997	IdentifierDeclType	string
>998	Condition	 
>999	EqualityExpression	tagFilename != NULL
>1000	Identifier	NULL
>1001	Identifier	tagFilename
>1002	IdentifierDeclStatement	 
>1003	IdentifierDecl	tags
>1004	Identifier	tags
>1005	IdentifierDeclType	map < string , string >
>1006	IfStatement	if ( ! drwnDirExists ( gMultiSegConfig . filebase ( \"lblDir\" , \"\" ) . c_str ( ) ) )
>1007	CompoundStatement	 
>1008	ExpressionStatement	 
>1009	CallExpression	DRWN_LOG_FATAL ( \"input/output labels directory \" << gMultiSegConfig . filebase ( \"lblDir\" , \"\" ) << \" does not \
>1010	ArgumentList	\"input/output labels directory \" << gMultiSegConfig . filebase ( \"lblDir\" , \"\" ) << \" does not exist\"
>1011	Argument	\"input/output labels directory \" << gMultiSegConfig . filebase ( \"lblDir\" , \"\" ) << \" does not exist\"
>1012	ShiftExpression	\"input/output labels directory \" << gMultiSegConfig . filebase ( \"lblDir\" , \"\" ) << \" does not exist\"\
>1013	ShiftExpression	gMultiSegConfig . filebase ( \"lblDir\" , \"\" ) << \" does not exist\"
>1014	PrimaryExpression	\" does not exist\"
>1015	CallExpression	gMultiSegConfig . filebase ( \"lblDir\" , \"\" )
>1016	ArgumentList	\"lblDir\"
>1017	Argument	\"\"
>1018	PrimaryExpression	\"\"
>1019	Argument	\"lblDir\"
>1020	PrimaryExpression	\"lblDir\"
>1021	Callee	gMultiSegConfig . filebase
>1022	MemberAccess	gMultiSegConfig . filebase
>1023	Identifier	filebase
>1024	Identifier	gMultiSegConfig
>1025	PrimaryExpression	\"input/output labels directory \"
>1026	Callee	DRWN_LOG_FATAL
>1027	Identifier	DRWN_LOG_FATAL
>1028	Condition	 
>1029	UnaryOp	! drwnDirExists ( gMultiSegConfig . filebase ( \"lblDir\" , \"\" ) . c_str ( ) )
>1030	CallExpression	drwnDirExists ( gMultiSegConfig . filebase ( \"lblDir\" , \"\" ) . c_str ( ) )
>1031	ArgumentList	gMultiSegConfig . filebase ( \"lblDir\" , \"\" ) . c_str ( )
>1032	Argument	gMultiSegConfig . filebase ( \"lblDir\" , \"\" ) . c_str ( )
>1033	CallExpression	gMultiSegConfig . filebase ( \"lblDir\" , \"\" ) . c_str ( )
>1034	ArgumentList	 
>1035	Callee	gMultiSegConfig . filebase ( \"lblDir\" , \"\" ) . c_str
>1036	MemberAccess	gMultiSegConfig . filebase ( \"lblDir\" , \"\" ) . c_str
>1037	Identifier	c_str
>1038	CallExpression	gMultiSegConfig . filebase ( \"lblDir\" , \"\" )
>1039	ArgumentList	\"lblDir\"
>1040	Argument	\"\"
>1041	PrimaryExpression	\"\"
>1042	Argument	\"lblDir\"
>1043	PrimaryExpression	\"lblDir\"
>1044	Callee	gMultiSegConfig . filebase
>1045	MemberAccess	gMultiSegConfig . filebase
>1046	Identifier	filebase
>1047	Identifier	gMultiSegConfig
>1048	Callee	drwnDirExists
>1049	Identifier	drwnDirExists
>1050	UnaryOperator	!
>1051	IfStatement	if ( drwnFileExists ( imageList ) )
>1052	ElseStatement	else
>1053	CompoundStatement	 
>1054	ExpressionStatement	 
>1055	CallExpression	baseNames . push_back ( string ( imageList ) )
>1056	ArgumentList	string ( imageList )
>1057	Argument	string ( imageList )
>1058	CallExpression	string ( imageList )
>1059	ArgumentList	imageList
>1060	Argument	imageList
>1061	Identifier	imageList
>1062	Callee	string
>1063	Identifier	string
>1064	Callee	baseNames . push_back
>1065	MemberAccess	baseNames . push_back
>1066	Identifier	push_back
>1067	Identifier	baseNames
>1068	ExpressionStatement	 
>1069	CallExpression	DRWN_LOG_MESSAGE ( \"Processing single image \" << imageList << \"...\" )
>1070	ArgumentList	\"Processing single image \" << imageList << \"...\"
>1071	Argument	\"Processing single image \" << imageList << \"...\"
>1072	ShiftExpression	\"Processing single image \" << imageList << \"...\"
>1073	ShiftExpression	imageList << \"...\"
>1074	PrimaryExpression	\"...\"
>1075	Identifier	imageList
>1076	PrimaryExpression	\"Processing single image \"
>1077	Callee	DRWN_LOG_MESSAGE
>1078	Identifier	DRWN_LOG_MESSAGE
>1079	CompoundStatement	 
>1080	ExpressionStatement	 
>1081	CallExpression	DRWN_LOG_MESSAGE ( \"...read \" << baseNames . size ( ) << \" images\" )
>1082	ArgumentList	\"...read \" << baseNames . size ( ) << \" images\"
>1083	Argument	\"...read \" << baseNames . size ( ) << \" images\"
>1084	ShiftExpression	\"...read \" << baseNames . size ( ) << \" images\"
>1085	ShiftExpression	baseNames . size ( ) << \" images\"
>1086	PrimaryExpression	\" images\"
>1087	CallExpression	baseNames . size ( )
>1088	ArgumentList	 
>1089	Callee	baseNames . size
>1090	MemberAccess	baseNames . size
>1091	Identifier	size
>1092	Identifier	baseNames
>1093	PrimaryExpression	\"...read \"
>1094	Callee	DRWN_LOG_MESSAGE
>1095	Identifier	DRWN_LOG_MESSAGE
>1096	ExpressionStatement	 
>1097	AssignmentExpr	baseNames = drwnReadFile ( imageList )
>1098	CallExpression	drwnReadFile ( imageList )
>1099	ArgumentList	imageList
>1100	Argument	imageList
>1101	Identifier	imageList
>1102	Callee	drwnReadFile
>1103	Identifier	drwnReadFile
>1104	Identifier	baseNames
>1105	ExpressionStatement	 
>1106	CallExpression	DRWN_LOG_MESSAGE ( \"Reading image list from \" << imageList << \"...\" )
>1107	ArgumentList	\"Reading image list from \" << imageList << \"...\"
>1108	Argument	\"Reading image list from \" << imageList << \"...\"
>1109	ShiftExpression	\"Reading image list from \" << imageList << \"...\"
>1110	ShiftExpression	imageList << \"...\"
>1111	PrimaryExpression	\"...\"
>1112	Identifier	imageList
>1113	PrimaryExpression	\"Reading image list from \"
>1114	Callee	DRWN_LOG_MESSAGE
>1115	Identifier	DRWN_LOG_MESSAGE
>1116	Condition	 
>1117	CallExpression	drwnFileExists ( imageList )
>1118	ArgumentList	imageList
>1119	Argument	imageList
>1120	Identifier	imageList
>1121	Callee	drwnFileExists
>1122	Identifier	drwnFileExists
>1123	IdentifierDeclStatement	 
>1124	IdentifierDecl	baseNames
>1125	Identifier	baseNames
>1126	IdentifierDeclType	vector < string >
>1127	IdentifierDeclStatement	 
>1128	IdentifierDecl	* imageList = DRWN_CMDLINE_ARGV [ 0 ]
>1129	AssignmentExpr	* imageList = DRWN_CMDLINE_ARGV [ 0 ]
>1130	ArrayIndexing	DRWN_CMDLINE_ARGV [ 0 ]
>1131	PrimaryExpression	0
>1132	Identifier	DRWN_CMDLINE_ARGV
>1133	Identifier	imageList
>1134	Identifier	imageList
>1135	IdentifierDeclType	const char *
>1136	ExpressionStatement	 
>1137	CallExpression	drwnCodeProfiler 
>1138	ArgumentList	drwnCodeProfiler 
>1139	Argument	drwnCodeProfiler 
>1140	CallExpression	drwnCodeProfiler 
>1141	ArgumentList	\"main\"
>1142	Argument	\"main\"
>1143	PrimaryExpression	\"main\"
>1144	Callee	drwnCodeProfiler 
>1145	Identifier	drwnCodeProfiler 
>1146	Callee	drwnCodeProfiler 
>1147	Identifier	drwnCodeProfiler 
>1148	IfStatement	if ( DRWN_CMDLINE_ARGC != 1 )
>1149	CompoundStatement	 
>1150	ReturnStatement	 
>1151	UnaryOp	- 1
>1152	PrimaryExpression	1
>1153	UnaryOperator	-
>1154	ExpressionStatement	 
>1155	CallExpression	usage ( )
>1156	ArgumentList	 
>1157	Callee	usage
>1158	Identifier	usage
>1159	Condition	 
>1160	EqualityExpression	DRWN_CMDLINE_ARGC != 1
>1161	PrimaryExpression	1
>1162	Identifier	DRWN_CMDLINE_ARGC
>1163	ExpressionStatement	 
>1164	CallExpression	DRWN_END_CMDLINE_PROCESSING ( usage ( ) )
>1165	ArgumentList	usage ( )
>1166	Argument	usage ( )
>1167	CallExpression	usage ( )
>1168	ArgumentList	 
>1169	Callee	usage
>1170	Identifier	usage
>1171	Callee	DRWN_END_CMDLINE_PROCESSING
>1172	Identifier	DRWN_END_CMDLINE_PROCESSING
>1173	Statement	 
>1174	Statement	 
>1175	Statement	 
>1176	Statement	 
>1177	Statement	 
>1178	Statement	 
>1179	Statement	 
>1180	Statement	 
>1181	Statement	 
>1182	Statement	 
>1183	Statement	 
>1184	Statement	 
>1185	Statement	 
>1186	Statement	 
>1187	Statement	 
>1188	Statement	 
>1189	Statement	 
>1190	Statement	 
>1191	IdentifierDeclStatement	 
>1192	IdentifierDecl	bVisualize = false
>1193	AssignmentExpr	bVisualize = false
>1194	Identifier	false
>1195	Identifier	false
>1196	Identifier	bVisualize
>1197	IdentifierDeclType	bool
>1198	IdentifierDeclStatement	 
>1199	IdentifierDecl	* tagFilename = NULL
>1200	AssignmentExpr	* tagFilename = NULL
>1201	Identifier	NULL
>1202	Identifier	NULL
>1203	Identifier	tagFilename
>1204	IdentifierDeclType	const char *
<3=6,5,4
<6=23,19,7
<7=8
<8=18,9
<9=17,10
<10=16,11
<11=15,12
<12=14,13
<19=20
<20=22,21
<23=24
<24=28,25
<25=27,26
<32=41,40,33
<33=37,34
<34=36,35
<37=39,38
<41=1198,1191,1190,1189,1188,1187,1186,1185,1184,1183,1182,1181,1180,1179,1178,1177,1176,1175,1174,1173,1163,1148,1136,1127,1123,1051,1006,1002,854,850,840,789,706,88,66,61,49,44,42
<42=43
<44=45
<45=47,46
<47=48
<49=50
<50=59,51
<51=52
<52=53
<53=57,54
<54=55
<55=56
<57=58
<59=60
<61=62
<62=64,63
<64=65
<66=77,67
<67=68
<68=69
<69=75,70
<70=71
<71=72
<72=74,73
<75=76
<77=78
<78=87,79
<79=81,80
<81=83,82
<83=84
<84=86,85
<88=698,687,684,89
<89=671,651,637,610,597,572,568,547,144,124,99,90
<90=91
<91=97,92
<92=95,93
<93=94
<95=96
<97=98
<99=100
<100=123,122,101
<101=121,102
<102=109,103
<103=107,104
<104=105
<105=106
<107=108
<109=117,110
<110=115,111
<111=112
<112=114,113
<115=116
<117=118
<118=120,119
<124=142,125
<125=126
<126=127
<127=140,128
<128=138,131,129
<129=130
<131=132
<132=136,133
<133=134
<134=135
<136=137
<138=139
<140=141
<142=143
<144=532,528,518,145
<145=504,481,464,440,433,395,358,347,338,322,303,294,287,176,168,151,150,149,148,146
<146=147
<151=152
<152=166,153
<153=164,162,156,154
<154=155
<156=157
<157=159,158
<159=161,160
<162=163
<164=165
<166=167
<168=169
<169=173,170
<170=172,171
<173=175,174
<176=279,275,272,177
<177=248,239,215,191,178
<178=179
<179=188,180
<180=186,181
<181=184,182
<182=183
<184=185
<186=187
<188=190,189
<191=192
<192=214,213,193
<193=212,194
<194=210,195
<195=196
<196=197
<197=199,198
<199=200
<200=202,201
<202=206,203
<203=204
<204=205
<206=207
<207=209,208
<210=211
<215=216
<216=238,237,217
<217=236,218
<218=234,219
<219=220
<220=221
<221=223,222
<223=224
<224=226,225
<226=230,227
<227=228
<228=229
<230=231
<231=233,232
<234=235
<239=240
<240=246,241
<241=242
<242=243
<243=245,244
<246=247
<248=249
<249=271,250
<250=267,259,251
<251=255,252
<252=253
<253=254
<255=256
<256=258,257
<259=263,260
<260=261
<261=262
<263=264
<264=266,265
<267=268
<268=270,269
<272=274,273
<275=276
<276=278,277
<279=280
<280=281
<281=286,285,282
<282=284,283
<287=288
<288=293,292,289
<289=291,290
<294=295
<295=302,301,296
<296=300,297
<297=299,298
<303=304
<304=320,305
<305=306
<306=307
<307=319,308
<308=318,309
<309=317,310
<310=316,311
<311=315,312
<312=314,313
<320=321
<322=323
<323=337,336,324
<324=335,325
<325=333,326
<326=329,327
<327=328
<329=330
<330=332,331
<333=334
<338=339
<339=345,340
<340=341
<341=342
<342=344,343
<345=346
<347=348
<348=357,349
<349=353,350
<350=351
<351=352
<353=354
<354=356,355
<358=359
<359=394,393,360
<360=392,361
<361=390,362
<362=381,372,363
<363=364
<364=368,365
<365=366
<366=367
<368=369
<369=371,370
<372=373
<373=377,374
<374=375
<375=376
<377=378
<378=380,379
<381=382
<382=386,383
<383=384
<384=385
<386=387
<387=389,388
<390=391
<395=417,410,396
<396=397
<397=399,398
<399=400
<400=408,401
<401=402
<402=403
<403=407,404
<404=406,405
<408=409
<410=411
<411=412
<412=416,413
<413=415,414
<417=418
<418=425,419
<419=421,420
<421=422
<422=424,423
<425=429,426
<426=427
<427=428
<429=430
<430=432,431
<433=434
<434=439,438,435
<435=437,436
<440=448,441
<441=442
<442=443
<443=447,444
<444=446,445
<448=449
<449=456,450
<450=452,451
<452=453
<453=455,454
<456=460,457
<457=458
<458=459
<460=461
<461=463,462
<464=465
<465=480,479,466
<466=478,467
<467=476,468
<468=469
<469=470
<470=472,471
<472=473
<473=475,474
<476=477
<481=491,482
<482=484,483
<484=485
<485=489,486
<486=487
<487=488
<489=490
<491=492
<492=501,493
<493=495,494
<495=497,496
<497=498
<498=500,499
<501=503,502
<504=505
<505=517,516,506
<506=515,507
<507=511,508
<508=509
<509=510
<511=512
<512=514,513
<518=527,519
<519=523,520
<520=521
<521=522
<523=524
<524=526,525
<528=529
<529=531,530
<532=533
<533=534
<534=546,545,535
<535=544,536
<536=540,537
<537=538
<538=539
<540=541
<541=543,542
<547=548
<548=567,566,549
<549=565,550
<550=563,551
<551=561,554,552
<552=553
<554=555
<555=557,556
<557=558
<558=560,559
<561=562
<563=564
<568=569
<569=571,570
<572=573
<573=596,595,574
<574=594,575
<575=582,576
<576=580,577
<577=578
<578=579
<580=581
<582=590,583
<583=588,584
<584=585
<585=587,586
<588=589
<590=591
<591=593,592
<597=598
<598=609,608,599
<599=605,600
<600=602,601
<602=604,603
<605=607,606
<610=635,611
<611=628,619,612
<612=613
<613=617,614
<614=615
<615=616
<617=618
<619=620
<620=626,621
<621=624,622
<622=623
<624=625
<626=627
<628=629
<629=633,630
<630=631
<631=632
<633=634
<635=636
<637=638
<638=650,649,639
<639=648,640
<640=646,641
<641=644,642
<642=643
<644=645
<646=647
<651=652
<652=670,669,653
<653=668,654
<654=664,655
<655=662,658,656
<656=657
<658=659
<659=661,660
<662=663
<664=665
<665=667,666
<671=672
<672=682,673
<673=674
<674=675
<675=681,676
<676=678,677
<678=680,679
<682=683
<684=686,685
<687=688
<688=697,689
<689=696,690
<690=692,691
<692=693
<693=695,694
<698=699
<699=700
<700=705,704,701
<701=703,702
<706=776,767,764,707
<707=708
<708=709
<709=762,710
<710=711
<711=712
<712=761,713
<713=749,714
<714=748,715
<715=736,716
<716=735,717
<717=723,718
<718=722,719
<719=721,720
<723=734,724
<724=730,725
<725=726
<726=727
<727=729,728
<730=731
<731=733,732
<736=747,737
<737=743,738
<738=739
<739=740
<740=742,741
<743=744
<744=746,745
<749=760,750
<750=756,751
<751=752
<752=753
<753=755,754
<756=757
<757=759,758
<762=763
<764=766,765
<767=768
<768=775,769
<769=771,770
<771=772
<772=774,773
<776=777
<777=778
<778=788,787,779
<779=786,780
<780=782,781
<782=783
<783=785,784
<789=827,818,815,790
<790=791
<791=792
<792=803,793
<793=799,794
<794=795
<795=796
<796=798,797
<799=800
<800=802,801
<803=814,804
<804=810,805
<805=806
<806=807
<807=809,808
<810=811
<811=813,812
<815=817,816
<818=819
<819=826,820
<820=822,821
<822=823
<823=825,824
<827=828
<828=829
<829=839,838,830
<830=837,831
<831=833,832
<833=834
<834=836,835
<840=841
<841=849,848,842
<842=844,843
<844=845
<845=847,846
<850=851
<851=853,852
<854=998,855
<855=994,982,870,856
<856=857
<857=868,858
<858=859
<859=860
<860=862,861
<862=864,863
<864=865
<865=867,866
<868=869
<870=974,965,962,871
<871=951,933,906,872
<872=897,892,873
<873=874
<874=886,875
<875=876
<876=884,877
<877=878
<878=879
<879=883,880
<880=882,881
<884=885
<886=887
<887=889,888
<889=891,890
<892=893
<893=894
<894=896,895
<897=898
<898=905,899
<899=903,900
<900=901
<901=902
<903=904
<906=907
<907=932,931,908
<908=930,909
<909=924,910
<910=922,911
<911=912
<912=914,913
<914=916,915
<916=917
<917=919,918
<919=921,920
<922=923
<924=925
<925=927,926
<927=929,928
<933=934
<934=950,949,935
<935=948,936
<936=942,937
<937=940,938
<938=939
<940=941
<942=943
<943=945,944
<945=947,946
<951=953,952
<953=954
<954=956,955
<956=958,957
<958=959
<959=961,960
<962=964,963
<965=966
<966=973,967
<967=969,968
<969=970
<970=972,971
<974=975
<975=976
<976=981,980,977
<977=979,978
<982=983
<983=993,992,984
<984=991,985
<985=989,986
<986=987
<987=988
<989=990
<994=995
<995=997,996
<998=999
<999=1001,1000
<1002=1003
<1003=1005,1004
<1006=1028,1007
<1007=1008
<1008=1009
<1009=1026,1010
<1010=1011
<1011=1012
<1012=1025,1013
<1013=1015,1014
<1015=1021,1016
<1016=1019,1017
<1017=1018
<1019=1020
<1021=1022
<1022=1024,1023
<1026=1027
<1028=1029
<1029=1050,1030
<1030=1048,1031
<1031=1032
<1032=1033
<1033=1035,1034
<1035=1036
<1036=1038,1037
<1038=1044,1039
<1039=1042,1040
<1040=1041
<1042=1043
<1044=1045
<1045=1047,1046
<1048=1049
<1051=1116,1079,1052
<1052=1053
<1053=1068,1054
<1054=1055
<1055=1064,1056
<1056=1057
<1057=1058
<1058=1062,1059
<1059=1060
<1060=1061
<1062=1063
<1064=1065
<1065=1067,1066
<1068=1069
<1069=1077,1070
<1070=1071
<1071=1072
<1072=1076,1073
<1073=1075,1074
<1077=1078
<1079=1105,1096,1080
<1080=1081
<1081=1094,1082
<1082=1083
<1083=1084
<1084=1093,1085
<1085=1087,1086
<1087=1089,1088
<1089=1090
<1090=1092,1091
<1094=1095
<1096=1097
<1097=1104,1098
<1098=1102,1099
<1099=1100
<1100=1101
<1102=1103
<1105=1106
<1106=1114,1107
<1107=1108
<1108=1109
<1109=1113,1110
<1110=1112,1111
<1114=1115
<1116=1117
<1117=1121,1118
<1118=1119
<1119=1120
<1121=1122
<1123=1124
<1124=1126,1125
<1127=1128
<1128=1135,1134,1129
<1129=1133,1130
<1130=1132,1131
<1136=1137
<1137=1146,1138
<1138=1139
<1139=1140
<1140=1144,1141
<1141=1142
<1142=1143
<1144=1145
<1146=1147
<1148=1159,1149
<1149=1154,1150
<1150=1151
<1151=1153,1152
<1154=1155
<1155=1157,1156
<1157=1158
<1159=1160
<1160=1162,1161
<1163=1164
<1164=1171,1165
<1165=1166
<1166=1167
<1167=1169,1168
<1169=1170
<1171=1172
<1191=1192
<1192=1197,1196,1193
<1193=1195,1194
<1198=1199
<1199=1204,1203,1200
<1200=1202,1201
