>3	FunctionDef	isAnagram1 (string s , string t)
>4	ParameterList	string s , string t
>5	Parameter	 
>6	Identifier	t
>7	ParameterType	string
>8	Parameter	 
>9	Identifier	s
>10	ParameterType	string
>11	ReturnType	bool
>12	CompoundStatement	 
>13	IfStatement	if ( s == t )
>14	ElseStatement	else
>15	ReturnStatement	 
>16	Identifier	false
>17	ReturnStatement	 
>18	Identifier	true
>19	Condition	 
>20	EqualityExpression	s == t
>21	Identifier	t
>22	Identifier	s
>23	ExpressionStatement	 
>24	CallExpression	sort ( & t [ 0 ] , & t [ 0 ] + t . length ( ) )
>25	ArgumentList	& t [ 0 ]
>26	Argument	& t [ 0 ] + t . length ( )
>27	AdditiveExpression	& t [ 0 ] + t . length ( )
>28	CallExpression	t . length ( )
>29	ArgumentList	 
>30	Callee	t . length
>31	MemberAccess	t . length
>32	Identifier	length
>33	Identifier	t
>34	UnaryOp	& t [ 0 ]
>35	ArrayIndexing	t [ 0 ]
>36	PrimaryExpression	0
>37	Identifier	t
>38	UnaryOperator	&
>39	Argument	& t [ 0 ]
>40	UnaryOp	& t [ 0 ]
>41	ArrayIndexing	t [ 0 ]
>42	PrimaryExpression	0
>43	Identifier	t
>44	UnaryOperator	&
>45	Callee	sort
>46	Identifier	sort
>47	ExpressionStatement	 
>48	CallExpression	sort ( & s [ 0 ] , & s [ 0 ] + s . length ( ) )
>49	ArgumentList	& s [ 0 ]
>50	Argument	& s [ 0 ] + s . length ( )
>51	AdditiveExpression	& s [ 0 ] + s . length ( )
>52	CallExpression	s . length ( )
>53	ArgumentList	 
>54	Callee	s . length
>55	MemberAccess	s . length
>56	Identifier	length
>57	Identifier	s
>58	UnaryOp	& s [ 0 ]
>59	ArrayIndexing	s [ 0 ]
>60	PrimaryExpression	0
>61	Identifier	s
>62	UnaryOperator	&
>63	Argument	& s [ 0 ]
>64	UnaryOp	& s [ 0 ]
>65	ArrayIndexing	s [ 0 ]
>66	PrimaryExpression	0
>67	Identifier	s
>68	UnaryOperator	&
>69	Callee	sort
>70	Identifier	sort
>71	IfStatement	if ( s . length ( ) != t . length ( ) )
>72	ReturnStatement	 
>73	Identifier	false
>74	Condition	 
>75	EqualityExpression	s . length ( ) != t . length ( )
>76	CallExpression	t . length ( )
>77	ArgumentList	 
>78	Callee	t . length
>79	MemberAccess	t . length
>80	Identifier	length
>81	Identifier	t
>82	CallExpression	s . length ( )
>83	ArgumentList	 
>84	Callee	s . length
>85	MemberAccess	s . length
>86	Identifier	length
>87	Identifier	s
>88	IfStatement	if ( s == \"\" || t == \"\" )
>89	ReturnStatement	 
>90	Identifier	false
>91	Condition	 
>92	OrExpression	s == \"\" || t == \"\"
>93	EqualityExpression	t == \"\"
>94	PrimaryExpression	\"\"
>95	Identifier	t
>96	EqualityExpression	s == \"\"
>97	PrimaryExpression	\"\"
>98	Identifier	s
>110	FunctionDef	isAnagram (string s , string t)
>111	ParameterList	string s , string t
>112	Parameter	 
>113	Identifier	t
>114	ParameterType	string
>115	Parameter	 
>116	Identifier	s
>117	ParameterType	string
>118	ReturnType	bool
>119	CompoundStatement	 
>120	ReturnStatement	 
>121	Identifier	true
>122	ForStatement	for ( int i = 0 ; i < 256 ; ++ i )
>123	IfStatement	if ( c [ i ] != 0 )
>124	ReturnStatement	 
>125	Identifier	false
>126	Condition	 
>127	EqualityExpression	c [ i ] != 0
>128	PrimaryExpression	0
>129	ArrayIndexing	c [ i ]
>130	Identifier	i
>131	Identifier	c
>132	UnaryExpression	 
>133	Identifier	i
>134	IncDec	++
>135	Condition	 
>136	RelationalExpression	i < 256
>137	PrimaryExpression	256
>138	Identifier	i
>139	ForInit	 
>140	IdentifierDeclStatement	int i = 0 ;
>141	IdentifierDecl	i = 0
>142	AssignmentExpr	i = 0
>143	PrimaryExpression	0
>144	Identifier	i
>145	Identifier	i
>146	IdentifierDeclType	int
>147	ForStatement	for ( int i = 0 ; i < len ; ++ i )
>148	CompoundStatement	 
>149	ExpressionStatement	 
>150	UnaryExpression	-- c [ ( int ) t [ i ] ]
>151	ArrayIndexing	c [ ( int ) t [ i ] ]
>152	CastExpression	( int ) t [ i ]
>153	ArrayIndexing	t [ i ]
>154	Identifier	i
>155	Identifier	t
>156	CastTarget	int
>157	Identifier	c
>158	IncDec	--
>159	ExpressionStatement	 
>160	UnaryExpression	++ c [ ( int ) s [ i ] ]
>161	ArrayIndexing	c [ ( int ) s [ i ] ]
>162	CastExpression	( int ) s [ i ]
>163	ArrayIndexing	s [ i ]
>164	Identifier	i
>165	Identifier	s
>166	CastTarget	int
>167	Identifier	c
>168	IncDec	++
>169	UnaryExpression	 
>170	Identifier	i
>171	IncDec	++
>172	Condition	 
>173	RelationalExpression	i < len
>174	Identifier	len
>175	Identifier	i
>176	ForInit	 
>177	IdentifierDeclStatement	int i = 0 ;
>178	IdentifierDecl	i = 0
>179	AssignmentExpr	i = 0
>180	PrimaryExpression	0
>181	Identifier	i
>182	Identifier	i
>183	IdentifierDeclType	int
>184	ExpressionStatement	 
>185	CallExpression	memset ( c , 0 , sizeof ( c ) )
>186	ArgumentList	c
>187	Argument	sizeof ( c )
>188	SizeofExpr	sizeof ( c )
>189	SizeofOperand	c
>190	Sizeof	sizeof
>191	Argument	0
>192	PrimaryExpression	0
>193	Argument	c
>194	Identifier	c
>195	Callee	memset
>196	Identifier	memset
>197	IdentifierDeclStatement	 
>198	IdentifierDecl	c [ 256 ]
>199	PrimaryExpression	256
>200	Identifier	c
>201	IdentifierDeclType	int [ 256 ]
>202	IdentifierDeclStatement	 
>203	IdentifierDecl	len = s . length ( )
>204	AssignmentExpr	len = s . length ( )
>205	CallExpression	s . length ( )
>206	ArgumentList	 
>207	Callee	s . length
>208	MemberAccess	s . length
>209	Identifier	length
>210	Identifier	s
>211	Identifier	len
>212	Identifier	len
>213	IdentifierDeclType	int
>214	IfStatement	if ( s . length ( ) != t . length ( ) )
>215	ReturnStatement	 
>216	Identifier	false
>217	Condition	 
>218	EqualityExpression	s . length ( ) != t . length ( )
>219	CallExpression	t . length ( )
>220	ArgumentList	 
>221	Callee	t . length
>222	MemberAccess	t . length
>223	Identifier	length
>224	Identifier	t
>225	CallExpression	s . length ( )
>226	ArgumentList	 
>227	Callee	s . length
>228	MemberAccess	s . length
>229	Identifier	length
>230	Identifier	s
>231	IfStatement	if ( s == \"\" || t == \"\" )
>232	ReturnStatement	 
>233	Identifier	false
>234	Condition	 
>235	OrExpression	s == \"\" || t == \"\"
>236	EqualityExpression	t == \"\"
>237	PrimaryExpression	\"\"
>238	Identifier	t
>239	EqualityExpression	s == \"\"
>240	PrimaryExpression	\"\"
>241	Identifier	s
>258	FunctionDef	main ()
>259	ParameterList	 
>260	ReturnType	int
>261	CompoundStatement	 
>262	ReturnStatement	 
>263	PrimaryExpression	0
>264	ExpressionStatement	 
>265	ShiftExpression	cout << isAnagram ( s , t ) << endl
>266	ShiftExpression	isAnagram ( s , t ) << endl
>267	Identifier	endl
>268	CallExpression	isAnagram ( s , t )
>269	ArgumentList	s
>270	Argument	t
>271	Identifier	t
>272	Argument	s
>273	Identifier	s
>274	Callee	isAnagram
>275	Identifier	isAnagram
>276	Identifier	cout
>277	IdentifierDeclStatement	 
>278	IdentifierDecl	t = \"ababab\"
>279	AssignmentExpr	t = \"ababab\"
>280	PrimaryExpression	\"ababab\"
>281	Identifier	t
>282	Identifier	t
>283	IdentifierDeclType	string
>284	IdentifierDeclStatement	 
>285	IdentifierDecl	s = \"aaabbb\"
>286	AssignmentExpr	s = \"aaabbb\"
>287	PrimaryExpression	\"aaabbb\"
>288	Identifier	s
>289	Identifier	s
>290	IdentifierDeclType	string
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=88,71,47,23,13
<13=19,17,14
<14=15
<15=16
<17=18
<19=20
<20=22,21
<23=24
<24=45,25
<25=39,26
<26=27
<27=34,28
<28=30,29
<30=31
<31=33,32
<34=38,35
<35=37,36
<39=40
<40=44,41
<41=43,42
<45=46
<47=48
<48=69,49
<49=63,50
<50=51
<51=58,52
<52=54,53
<54=55
<55=57,56
<58=62,59
<59=61,60
<63=64
<64=68,65
<65=67,66
<69=70
<71=74,72
<72=73
<74=75
<75=82,76
<76=78,77
<78=79
<79=81,80
<82=84,83
<84=85
<85=87,86
<88=91,89
<89=90
<91=92
<92=96,93
<93=95,94
<96=98,97
<110=119,118,111
<111=115,112
<112=114,113
<115=117,116
<119=231,214,202,197,184,147,122,120
<120=121
<122=139,135,132,123
<123=126,124
<124=125
<126=127
<127=129,128
<129=131,130
<132=134,133
<135=136
<136=138,137
<139=140
<140=141
<141=146,145,142
<142=144,143
<147=176,172,169,148
<148=159,149
<149=150
<150=158,151
<151=157,152
<152=156,153
<153=155,154
<159=160
<160=168,161
<161=167,162
<162=166,163
<163=165,164
<169=171,170
<172=173
<173=175,174
<176=177
<177=178
<178=183,182,179
<179=181,180
<184=185
<185=195,186
<186=193,191,187
<187=188
<188=190,189
<191=192
<193=194
<195=196
<197=198
<198=201,200,199
<202=203
<203=213,212,204
<204=211,205
<205=207,206
<207=208
<208=210,209
<214=217,215
<215=216
<217=218
<218=225,219
<219=221,220
<221=222
<222=224,223
<225=227,226
<227=228
<228=230,229
<231=234,232
<232=233
<234=235
<235=239,236
<236=238,237
<239=241,240
<258=261,260,259
<261=284,277,264,262
<262=263
<264=265
<265=276,266
<266=268,267
<268=274,269
<269=272,270
<270=271
<272=273
<274=275
<277=278
<278=283,282,279
<279=281,280
<284=285
<285=290,289,286
<286=288,287
